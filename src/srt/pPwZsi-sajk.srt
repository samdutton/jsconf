1
00:00:00,000 --> 00:00:10,720

I

2
00:00:10,730 --> 00:00:21,620
you

3
00:00:21,630 --> 00:00:25,250


4
00:00:25,260 --> 00:00:28,110
good morning everyone guten morgen for

5
00:00:28,110 --> 00:00:29,869
those of you to speak a little German

6
00:00:29,869 --> 00:00:31,770
was a pretty good party last night

7
00:00:31,770 --> 00:00:34,350
wasn't it so yeah I'm glad there's at

8
00:00:34,350 --> 00:00:36,180
least a bunch of people out this morning

9
00:00:36,180 --> 00:00:40,200
so I'm here today to talk to you guys

10
00:00:40,200 --> 00:00:42,480
because I believe that every mobile app

11
00:00:42,480 --> 00:00:44,100
should be tested through automation I

12
00:00:44,100 --> 00:00:46,370
should probably take the time real quick

13
00:00:46,370 --> 00:00:51,330
so what I'm going to show you is why I

14
00:00:51,330 --> 00:00:53,670
believe you should be doing this and the

15
00:00:53,670 --> 00:00:54,840
great thing about it is that the

16
00:00:54,840 --> 00:00:56,340
technologies that I'm going to use which

17
00:00:56,340 --> 00:01:00,720
is at miam Apache Cordova also known as

18
00:01:00,720 --> 00:01:03,570
phonegap and top code they all backed by

19
00:01:03,570 --> 00:01:05,370
JavaScript a lab technology so it's you

20
00:01:05,370 --> 00:01:06,650
know for this conference pretty relevant

21
00:01:06,650 --> 00:01:10,890
so um I have a little cold to excuse my

22
00:01:10,890 --> 00:01:14,760
um like small breaks in between so the

23
00:01:14,760 --> 00:01:16,799
reason why I like one of the reasons why

24
00:01:16,799 --> 00:01:18,810
I believe every mobile app should be

25
00:01:18,810 --> 00:01:21,060
tested through automation is the fact

26
00:01:21,060 --> 00:01:23,070
that there's a paradigm shift going on

27
00:01:23,070 --> 00:01:26,280
right now especially like consumers like

28
00:01:26,280 --> 00:01:27,750
people that are not professionals that

29
00:01:27,750 --> 00:01:30,390
use can be like that not use they're not

30
00:01:30,390 --> 00:01:32,010
using a computer on a daily basis to

31
00:01:32,010 --> 00:01:35,190
detail work the increasingly using more

32
00:01:35,190 --> 00:01:37,980
mobile devices to you know use the

33
00:01:37,980 --> 00:01:39,330
internet and like whatever is out there

34
00:01:39,330 --> 00:01:42,060
so there's a shift from like the

35
00:01:42,060 --> 00:01:45,570
old-school desktop browser based app to

36
00:01:45,570 --> 00:01:48,780
mobile apps and you know like mobile

37
00:01:48,780 --> 00:01:50,700
devices like smartphones are getting

38
00:01:50,700 --> 00:01:52,290
increasingly more popular cheaper

39
00:01:52,290 --> 00:01:54,750
because technology you know evolves and

40
00:01:54,750 --> 00:01:57,060
you know it's only it's only progressing

41
00:01:57,060 --> 00:02:00,330
it's only getting more that is great

42
00:02:00,330 --> 00:02:02,790
because it also opens up a lot you know

43
00:02:02,790 --> 00:02:05,070
new opportunities business wise and just

44
00:02:05,070 --> 00:02:07,950
you know building awesome stuff so one

45
00:02:07,950 --> 00:02:09,629
of the examples are obviously Instagram

46
00:02:09,629 --> 00:02:11,970
very popular I mean it would found it a

47
00:02:11,970 --> 00:02:13,650
couple of years ago and blew up in like

48
00:02:13,650 --> 00:02:16,590
no time another good example is like

49
00:02:16,590 --> 00:02:18,330
lyft or any of those transportation

50
00:02:18,330 --> 00:02:21,629
companies that use the fact that a

51
00:02:21,629 --> 00:02:23,069
mobile devices so much more in the

52
00:02:23,069 --> 00:02:25,230
context of a real life because it's more

53
00:02:25,230 --> 00:02:29,430
like a person carries it with him or her

54
00:02:29,430 --> 00:02:31,440
whatever they go it's not like you're

55
00:02:31,440 --> 00:02:33,359
going to a computer in your room like

56
00:02:33,359 --> 00:02:35,340
you always bring in the phone so you

57
00:02:35,340 --> 00:02:37,650
have the advantage of having the device

58
00:02:37,650 --> 00:02:39,110
embedded in the car

59
00:02:39,110 --> 00:02:41,600
text of a person's life meaning it knows

60
00:02:41,600 --> 00:02:43,610
the location and it has all kinds of

61
00:02:43,610 --> 00:02:45,680
other like information available that

62
00:02:45,680 --> 00:02:47,420
you just don't get out of a browser or

63
00:02:47,420 --> 00:02:49,790
like all of a desktop browser and a

64
00:02:49,790 --> 00:02:51,470
really good example also is like

65
00:02:51,470 --> 00:02:55,550
variables like the Nike FuelBand you

66
00:02:55,550 --> 00:02:59,120
know I get it actually uses information

67
00:02:59,120 --> 00:03:01,250
that it collects throughout the day and

68
00:03:01,250 --> 00:03:03,140
then sings the W mobile phone and like

69
00:03:03,140 --> 00:03:04,400
presents to you what you've been up to

70
00:03:04,400 --> 00:03:05,900
like activity wise and all that kind of

71
00:03:05,900 --> 00:03:07,459
stuff that's just I would necessarily

72
00:03:07,459 --> 00:03:09,800
say it's impossible on a computer but

73
00:03:09,800 --> 00:03:12,680
the entry barriers way lower for mobile

74
00:03:12,680 --> 00:03:16,610
devices and mobile apps to do that so um

75
00:03:16,610 --> 00:03:18,860
it's great that we get new opportunities

76
00:03:18,860 --> 00:03:20,300
and all that but like opportunities also

77
00:03:20,300 --> 00:03:24,380
come with challenges so that's kind of

78
00:03:24,380 --> 00:03:26,450
exciting but it also can be very

79
00:03:26,450 --> 00:03:28,220
frustrating and you know one of the

80
00:03:28,220 --> 00:03:29,930
challenges obviously that there's not

81
00:03:29,930 --> 00:03:31,820
just one mobile phone and there's not

82
00:03:31,820 --> 00:03:33,709
just one operating system out there and

83
00:03:33,709 --> 00:03:36,080
in particular for for the mobile world

84
00:03:36,080 --> 00:03:38,200
you know the contenders are like iOS

85
00:03:38,200 --> 00:03:42,440
Android Blackberry Windows Phone and

86
00:03:42,440 --> 00:03:44,570
maybe symbian not so much anymore but

87
00:03:44,570 --> 00:03:46,549
you get it it's just like there's like a

88
00:03:46,549 --> 00:03:49,640
multitude of platforms another problem

89
00:03:49,640 --> 00:03:51,230
is that these platforms run on like all

90
00:03:51,230 --> 00:03:53,780
kinds of devices so it's not a standard

91
00:03:53,780 --> 00:03:55,130
device everyone has the same one

92
00:03:55,130 --> 00:03:56,450
everyone has an iphone they're like

93
00:03:56,450 --> 00:03:58,370
plenty of devices this is like a chart

94
00:03:58,370 --> 00:04:01,160
that I took from a blog post and it's

95
00:04:01,160 --> 00:04:05,150
the data of July 2012 and it shows you

96
00:04:05,150 --> 00:04:08,510
how popular certain devices are and um I

97
00:04:08,510 --> 00:04:10,070
can't really show this right now because

98
00:04:10,070 --> 00:04:12,470
it's not in the active but the way they

99
00:04:12,470 --> 00:04:14,510
did that is like they show how it

100
00:04:14,510 --> 00:04:15,650
progressed all the time and then it

101
00:04:15,650 --> 00:04:17,810
moves around really fast so you know the

102
00:04:17,810 --> 00:04:19,100
sudden your phone comes out and like

103
00:04:19,100 --> 00:04:21,380
it's tossed into the mix and the problem

104
00:04:21,380 --> 00:04:23,300
is it you know as very different screen

105
00:04:23,300 --> 00:04:26,630
sizes this is a chart that basically

106
00:04:26,630 --> 00:04:28,700
kind of shows you how many different

107
00:04:28,700 --> 00:04:30,830
screen sizes there are like obviously

108
00:04:30,830 --> 00:04:33,169
like more in a symbolic way not like you

109
00:04:33,169 --> 00:04:36,350
know at scale the other interesting

110
00:04:36,350 --> 00:04:37,669
thing or like the other thing that's

111
00:04:37,669 --> 00:04:39,440
very challenging is that like most of

112
00:04:39,440 --> 00:04:40,669
these devices have different memory

113
00:04:40,669 --> 00:04:43,880
different CPUs you know different

114
00:04:43,880 --> 00:04:46,040
technology so it's not that easy to like

115
00:04:46,040 --> 00:04:48,560
provide a unified experience to all

116
00:04:48,560 --> 00:04:50,850
users

117
00:04:50,860 --> 00:04:54,509
using you know just a single technology

118
00:04:54,509 --> 00:04:57,009
and not a really big problem that brings

119
00:04:57,009 --> 00:04:59,319
back to this test automation statement

120
00:04:59,319 --> 00:05:02,139
that I made is the way you distribute

121
00:05:02,139 --> 00:05:04,750
apps is very different from like

122
00:05:04,750 --> 00:05:06,159
deploying a website and using a browser

123
00:05:06,159 --> 00:05:08,530
and like hitting it it's like these days

124
00:05:08,530 --> 00:05:09,939
they are like you know app stores you

125
00:05:09,939 --> 00:05:12,189
submit an app to app store and it's the

126
00:05:12,189 --> 00:05:13,810
way people find your app discover it and

127
00:05:13,810 --> 00:05:16,060
download and use it the problem with

128
00:05:16,060 --> 00:05:18,430
that is I mean it's great it's not

129
00:05:18,430 --> 00:05:19,870
really a problem it's great because it

130
00:05:19,870 --> 00:05:22,539
is a unified way for non-technical

131
00:05:22,539 --> 00:05:24,250
people to get hold of you know great

132
00:05:24,250 --> 00:05:26,469
apps that provide great open create

133
00:05:26,469 --> 00:05:29,110
experiences and great services the

134
00:05:29,110 --> 00:05:30,240
problem that comes with that is

135
00:05:30,240 --> 00:05:33,099
particularly for a certain platform you

136
00:05:33,099 --> 00:05:34,569
have to submit your app and if you're

137
00:05:34,569 --> 00:05:36,430
lucky it actually makes it into the app

138
00:05:36,430 --> 00:05:39,490
store in like a two weeks time so but it

139
00:05:39,490 --> 00:05:41,740
can sometimes be like you know a month

140
00:05:41,740 --> 00:05:44,439
or five because there's a review process

141
00:05:44,439 --> 00:05:46,240
attached to it like they want to make

142
00:05:46,240 --> 00:05:47,800
sure that you don't steal data from the

143
00:05:47,800 --> 00:05:49,509
users and they're using the platform in

144
00:05:49,509 --> 00:05:53,560
a in a let's say like regulated way like

145
00:05:53,560 --> 00:05:57,009
in a sandboxed way and the way that

146
00:05:57,009 --> 00:05:59,199
works is like you make a change you want

147
00:05:59,199 --> 00:06:00,460
to get out there you have to submit it

148
00:06:00,460 --> 00:06:01,539
to the App Store and go through all this

149
00:06:01,539 --> 00:06:05,680
process so essentially it's not as easy

150
00:06:05,680 --> 00:06:07,779
as like running a website where you can

151
00:06:07,779 --> 00:06:10,270
deploy at will because it's your service

152
00:06:10,270 --> 00:06:11,830
you're running at people hit it from

153
00:06:11,830 --> 00:06:14,169
their desktop browsers it's more like

154
00:06:14,169 --> 00:06:16,180
you make a change and then you have one

155
00:06:16,180 --> 00:06:17,979
shot and then like you have to wait two

156
00:06:17,979 --> 00:06:20,110
weeks or cancel it and like you

157
00:06:20,110 --> 00:06:21,639
definitely have to wait a time until it

158
00:06:21,639 --> 00:06:22,930
actually hits the App Store and people

159
00:06:22,930 --> 00:06:24,580
updated and then it's also after the

160
00:06:24,580 --> 00:06:26,439
people actually update or upgrade to the

161
00:06:26,439 --> 00:06:29,469
latest version so one thing that really

162
00:06:29,469 --> 00:06:31,719
you know is key here is quality

163
00:06:31,719 --> 00:06:33,159
assurance right so when you have one

164
00:06:33,159 --> 00:06:34,629
shot you want to be you know you want to

165
00:06:34,629 --> 00:06:36,819
be sure that when you actually you know

166
00:06:36,819 --> 00:06:38,469
go ahead and you're submitting the app

167
00:06:38,469 --> 00:06:41,139
to the app store that um you know

168
00:06:41,139 --> 00:06:44,919
essentially this app is is buck free at

169
00:06:44,919 --> 00:06:46,389
least the functionality that you want to

170
00:06:46,389 --> 00:06:48,370
provide any users you have a confidence

171
00:06:48,370 --> 00:06:50,620
that it's working and there's a really

172
00:06:50,620 --> 00:06:53,379
common way of doing this which is called

173
00:06:53,379 --> 00:06:56,740
dog fooding so companies go ahead and

174
00:06:56,740 --> 00:06:58,629
like serve a development version to the

175
00:06:58,629 --> 00:07:00,669
employees like I think Facebook does

176
00:07:00,669 --> 00:07:01,779
that because I have a lot of employees

177
00:07:01,779 --> 00:07:04,000
and everyone kind of has to use Facebook

178
00:07:04,000 --> 00:07:04,569
in the way even

179
00:07:04,569 --> 00:07:08,610
big a fan on Twitter but the thing is

180
00:07:08,610 --> 00:07:11,589
the kind of like dependent on like

181
00:07:11,589 --> 00:07:13,059
people using it hitting boxing and

182
00:07:13,059 --> 00:07:14,830
finding reports to actually get some

183
00:07:14,830 --> 00:07:17,319
sort of QA process in there but it's

184
00:07:17,319 --> 00:07:18,669
kind of up to coincidence it's not

185
00:07:18,669 --> 00:07:20,529
really systematical and it's definitely

186
00:07:20,529 --> 00:07:22,899
not automated at least the testing part

187
00:07:22,899 --> 00:07:26,199
of it another thing is like you can't

188
00:07:26,199 --> 00:07:28,779
really execute some sort of test case

189
00:07:28,779 --> 00:07:30,580
repetitively because you like the way

190
00:07:30,580 --> 00:07:32,800
just kind of probing the ad like people

191
00:07:32,800 --> 00:07:34,569
just use it it's not there's no system

192
00:07:34,569 --> 00:07:36,729
to there's no there's no test plan to it

193
00:07:36,729 --> 00:07:39,610
and even if there were one it's really

194
00:07:39,610 --> 00:07:41,860
you know hard to repeat that on a

195
00:07:41,860 --> 00:07:45,330
frequent basis and you know quickly

196
00:07:45,330 --> 00:07:47,110
obviously you want to find bucks before

197
00:07:47,110 --> 00:07:48,699
you use the students kind of like the

198
00:07:48,699 --> 00:07:53,199
bottom line of all then so um you know

199
00:07:53,199 --> 00:07:55,059
like that all that said and all these

200
00:07:55,059 --> 00:07:57,039
variety of platforms and screen size and

201
00:07:57,039 --> 00:07:59,889
all that there's like this this

202
00:07:59,889 --> 00:08:02,319
initiative in this you know app

203
00:08:02,319 --> 00:08:05,110
development world which goes in the area

204
00:08:05,110 --> 00:08:06,729
that like instead of like using some

205
00:08:06,729 --> 00:08:08,169
native programming language like

206
00:08:08,169 --> 00:08:10,479
objective CEO like Android why not just

207
00:08:10,479 --> 00:08:12,039
using you know web technologies to build

208
00:08:12,039 --> 00:08:14,680
apps you can see all you know most of us

209
00:08:14,680 --> 00:08:16,509
in the room here probably uh are either

210
00:08:16,509 --> 00:08:18,939
you know building websites already we

211
00:08:18,939 --> 00:08:21,099
have build websites but you know there's

212
00:08:21,099 --> 00:08:22,240
a there's a standard here or their

213
00:08:22,240 --> 00:08:23,740
standards already and they will accept

214
00:08:23,740 --> 00:08:26,439
it and and they work in the browser so

215
00:08:26,439 --> 00:08:28,300
why not using them Firefox OS is a

216
00:08:28,300 --> 00:08:29,349
really good example they're gonna

217
00:08:29,349 --> 00:08:31,930
embracing that to the full extent the

218
00:08:31,930 --> 00:08:33,099
other platforms are not quite there yet

219
00:08:33,099 --> 00:08:34,919
mostly because of performance reasons

220
00:08:34,919 --> 00:08:38,019
it's it's not quite competitive yet but

221
00:08:38,019 --> 00:08:39,399
you know we'll see what happens in

222
00:08:39,399 --> 00:08:41,620
future so my idea here what I'm going to

223
00:08:41,620 --> 00:08:43,360
demo here is like an approach it

224
00:08:43,360 --> 00:08:44,620
actually uses web technologies to build

225
00:08:44,620 --> 00:08:48,639
an app that's cross-platform so I'm

226
00:08:48,639 --> 00:08:53,259
using Apache Cordova which is also known

227
00:08:53,259 --> 00:08:56,290
as phonegap and I found this really good

228
00:08:56,290 --> 00:08:58,300
app online it's from Chris stuff I

229
00:08:58,300 --> 00:08:59,560
really don't know how to pronounce his

230
00:08:59,560 --> 00:09:02,860
last name so not going to attempt it but

231
00:09:02,860 --> 00:09:04,269
he built this app and I just basically

232
00:09:04,269 --> 00:09:05,769
took you to extend it a little bit and

233
00:09:05,769 --> 00:09:07,600
I'm just going to show you guys what I'm

234
00:09:07,600 --> 00:09:09,130
talking about

235
00:09:09,130 --> 00:09:11,180
so this is an obvious an iPhone

236
00:09:11,180 --> 00:09:13,100
simulator it's really simple it's an

237
00:09:13,100 --> 00:09:16,720
employee directory you can just search

238
00:09:16,720 --> 00:09:20,210
you can scroll for the list you know you

239
00:09:20,210 --> 00:09:21,620
click on things you just get more

240
00:09:21,620 --> 00:09:23,420
information you can like you know hit

241
00:09:23,420 --> 00:09:24,920
the call button it will call the person

242
00:09:24,920 --> 00:09:27,500
at least it will simulate a call and

243
00:09:27,500 --> 00:09:29,690
yeah its overall looks pretty great

244
00:09:29,690 --> 00:09:31,310
because topcoat does a really good job

245
00:09:31,310 --> 00:09:32,390
it's kind of like the Twitter bootstrap

246
00:09:32,390 --> 00:09:36,770
off of mobile apps like if you like like

247
00:09:36,770 --> 00:09:38,270
myself and you don't have a really good

248
00:09:38,270 --> 00:09:39,590
hand for the design you may as well just

249
00:09:39,590 --> 00:09:41,390
use you know something that is already

250
00:09:41,390 --> 00:09:44,570
you know pretty good looking but overall

251
00:09:44,570 --> 00:09:47,000
it's a pretty simple app the emphasis of

252
00:09:47,000 --> 00:09:48,800
my talk is obviously the testing aspect

253
00:09:48,800 --> 00:09:50,870
so I'm not like a full-on could /

254
00:09:50,870 --> 00:09:55,430
developer all right so yeah I just

255
00:09:55,430 --> 00:09:58,510
talked about that yeah code over is

256
00:09:58,510 --> 00:10:01,310
basically the attempt to use native apps

257
00:10:01,310 --> 00:10:03,140
that wrap a web view of fullscreen web

258
00:10:03,140 --> 00:10:06,550
view and make make it possible to deploy

259
00:10:06,550 --> 00:10:09,470
cross-platform apps by using web

260
00:10:09,470 --> 00:10:12,170
technologies and it also makes native

261
00:10:12,170 --> 00:10:14,360
API is available through JavaScript so

262
00:10:14,360 --> 00:10:15,830
you can actually only you know your web

263
00:10:15,830 --> 00:10:17,330
on the JavaScript level you can hook

264
00:10:17,330 --> 00:10:19,640
into stuff that actually happens

265
00:10:19,640 --> 00:10:21,620
natively on the phone and it tries to do

266
00:10:21,620 --> 00:10:24,440
that in a unified way so the idea is to

267
00:10:24,440 --> 00:10:25,910
have like you know and then strap some

268
00:10:25,910 --> 00:10:28,130
abstraction layer on top you know across

269
00:10:28,130 --> 00:10:32,930
all these platforms top coat as i said

270
00:10:32,930 --> 00:10:34,460
is like this twitter bootstrap for

271
00:10:34,460 --> 00:10:35,990
mobile apps it's really great if you

272
00:10:35,990 --> 00:10:37,910
ever design if you ever happen to build

273
00:10:37,910 --> 00:10:39,830
out could / app and you you know we're

274
00:10:39,830 --> 00:10:40,880
going to get something off the ground

275
00:10:40,880 --> 00:10:43,250
real quick i highly recommend that it's

276
00:10:43,250 --> 00:10:46,040
also like build with the performance in

277
00:10:46,040 --> 00:10:48,290
the back of their head so in order to

278
00:10:48,290 --> 00:10:49,820
compete with like native apps you know

279
00:10:49,820 --> 00:10:52,550
performance is key and there's a lot of

280
00:10:52,550 --> 00:10:54,710
things you can do wrong if you if you

281
00:10:54,710 --> 00:10:55,880
like when to a bunch of talks yesterday

282
00:10:55,880 --> 00:10:58,220
yeah you probably notice today a lot of

283
00:10:58,220 --> 00:11:00,170
things you can do wrong using you know

284
00:11:00,170 --> 00:11:02,690
interactivity and like styles and all

285
00:11:02,690 --> 00:11:04,400
that look just like bring down the

286
00:11:04,400 --> 00:11:06,080
performance of yep and it's obviously

287
00:11:06,080 --> 00:11:07,580
more important on mobile phones and it

288
00:11:07,580 --> 00:11:08,840
may be on desktop just because of the

289
00:11:08,840 --> 00:11:12,680
computation power that brings me to at

290
00:11:12,680 --> 00:11:14,480
miam miam is the test automation

291
00:11:14,480 --> 00:11:16,250
framework them are going to use my demo

292
00:11:16,250 --> 00:11:17,740
that i'm going to show you in a second

293
00:11:17,740 --> 00:11:21,370
emiem is a is an effort to

294
00:11:21,370 --> 00:11:25,519
basically create a unified test

295
00:11:25,519 --> 00:11:27,620
automation API which is based on the web

296
00:11:27,620 --> 00:11:30,440
driver Jason prada dr a wire protocol

297
00:11:30,440 --> 00:11:32,560
which is very well accepted by

298
00:11:32,560 --> 00:11:35,149
implementations for selenium webdriver

299
00:11:35,149 --> 00:11:37,449
for the browsers so they are like

300
00:11:37,449 --> 00:11:39,829
language native bindings out there and

301
00:11:39,829 --> 00:11:41,329
all kinds of languages you don't have to

302
00:11:41,329 --> 00:11:43,250
you're not locked into a certain

303
00:11:43,250 --> 00:11:44,899
technology to the test automation it's

304
00:11:44,899 --> 00:11:46,940
very open and at miam is basically the

305
00:11:46,940 --> 00:11:51,440
server that uses native get like native

306
00:11:51,440 --> 00:11:54,050
developer tools of iOS of Android of

307
00:11:54,050 --> 00:11:56,899
Firefox OS to do the backend automation

308
00:11:56,899 --> 00:11:58,759
parts you have a unified API you don't

309
00:11:58,759 --> 00:12:00,139
have to worry about the you know the the

310
00:12:00,139 --> 00:12:02,750
back end part of it I haven't ly

311
00:12:02,750 --> 00:12:04,670
contributed to this earlier this year my

312
00:12:04,670 --> 00:12:06,170
coworker jonathan is basically working

313
00:12:06,170 --> 00:12:08,060
on this full-time it's entirely open

314
00:12:08,060 --> 00:12:10,009
source all of this is probably open

315
00:12:10,009 --> 00:12:13,519
source it's a great thing I'll show you

316
00:12:13,519 --> 00:12:16,790
the second so um a couple of things

317
00:12:16,790 --> 00:12:18,829
about at miam those are kind of like the

318
00:12:18,829 --> 00:12:20,959
the highlight points or like the driving

319
00:12:20,959 --> 00:12:24,380
factors behind it they're a bunch of

320
00:12:24,380 --> 00:12:26,420
like competitive like competitors in the

321
00:12:26,420 --> 00:12:27,949
open source space to do kind of the same

322
00:12:27,949 --> 00:12:30,019
but they don't have these like

323
00:12:30,019 --> 00:12:31,819
guidelines that we build it on top off

324
00:12:31,819 --> 00:12:33,860
or like these cornerstones which is that

325
00:12:33,860 --> 00:12:35,839
you shouldn't you should not have to

326
00:12:35,839 --> 00:12:37,699
instrument your app in order to test it

327
00:12:37,699 --> 00:12:39,560
the idea behind it it's like you should

328
00:12:39,560 --> 00:12:41,690
be able to test the app in the way that

329
00:12:41,690 --> 00:12:43,339
you submitting it to the App Store like

330
00:12:43,339 --> 00:12:45,860
no SDK is no embedded web servers or

331
00:12:45,860 --> 00:12:47,389
anything like that it's like one of the

332
00:12:47,389 --> 00:12:49,339
really big driving factors because once

333
00:12:49,339 --> 00:12:50,810
you modify your app you don't know if

334
00:12:50,810 --> 00:12:52,490
that's going to cause you know issues

335
00:12:52,490 --> 00:12:55,040
when you deliver it because most likely

336
00:12:55,040 --> 00:12:56,319
you're going to take that instrumental

337
00:12:56,319 --> 00:12:58,130
instrumentation out before you deliver

338
00:12:58,130 --> 00:13:01,610
it to the App Store as I said you want

339
00:13:01,610 --> 00:13:04,550
to write the test in any language as far

340
00:13:04,550 --> 00:13:06,439
as I know like even for exotic languages

341
00:13:06,439 --> 00:13:08,269
there like a webdriver selenium

342
00:13:08,269 --> 00:13:10,339
webdriver compel bindings out there so

343
00:13:10,339 --> 00:13:12,709
you can Co do your tests in everything

344
00:13:12,709 --> 00:13:16,000
from coffee script to pearl you name it

345
00:13:16,000 --> 00:13:18,649
it builds on top of like a lot accepted

346
00:13:18,649 --> 00:13:21,639
automation standards that are by nature

347
00:13:21,639 --> 00:13:24,199
grown out of the web you know the web

348
00:13:24,199 --> 00:13:27,579
browser area but we basically try to

349
00:13:27,579 --> 00:13:29,569
since the ideas are kind of the same

350
00:13:29,569 --> 00:13:32,569
like you know evolve them to use mobile

351
00:13:32,569 --> 00:13:34,730
and a bunch of my coworkers are involved

352
00:13:34,730 --> 00:13:35,010
in

353
00:13:35,010 --> 00:13:36,660
you know standardization process with

354
00:13:36,660 --> 00:13:38,850
the with the guys from webdriver and for

355
00:13:38,850 --> 00:13:42,810
to get that into the w3c spec so it

356
00:13:42,810 --> 00:13:44,820
becomes legit web you know technology

357
00:13:44,820 --> 00:13:47,640
standard and on top of that is actually

358
00:13:47,640 --> 00:13:49,050
a lot of traction that project got ever

359
00:13:49,050 --> 00:13:50,700
since and you know I highly recommend to

360
00:13:50,700 --> 00:13:52,050
like take a look if you guys working on

361
00:13:52,050 --> 00:13:56,160
mobile apps and and I'm going to use an

362
00:13:56,160 --> 00:13:58,560
emulator and a simulator they kind of

363
00:13:58,560 --> 00:14:00,480
call differently in iOS and in android

364
00:14:00,480 --> 00:14:02,580
2.x you test but you can you can lower

365
00:14:02,580 --> 00:14:03,810
your tattoo a real device to your

366
00:14:03,810 --> 00:14:05,310
computer and run it on your device

367
00:14:05,310 --> 00:14:07,470
instead of running it in the simulator

368
00:14:07,470 --> 00:14:10,830
and I brought a nexus one tablet if any

369
00:14:10,830 --> 00:14:12,030
we want to know if you guys want to see

370
00:14:12,030 --> 00:14:13,350
how that works I can show you later I

371
00:14:13,350 --> 00:14:16,680
just don't have the time today alright

372
00:14:16,680 --> 00:14:20,430
so code over is this um this framework

373
00:14:20,430 --> 00:14:22,650
that wraps a webview which basically

374
00:14:22,650 --> 00:14:24,840
like you know fullscreen browser in a

375
00:14:24,840 --> 00:14:26,550
native app right and that's the way it

376
00:14:26,550 --> 00:14:28,230
deploys or like it gets the

377
00:14:28,230 --> 00:14:30,450
functionality out to all the different

378
00:14:30,450 --> 00:14:32,790
platforms and the great thing about that

379
00:14:32,790 --> 00:14:36,210
is that if we talked into a website this

380
00:14:36,210 --> 00:14:39,300
whole automation you know process is

381
00:14:39,300 --> 00:14:41,460
basically unified because always web

382
00:14:41,460 --> 00:14:42,780
technology is always the same across the

383
00:14:42,780 --> 00:14:44,670
platforms supposedly it's the same I

384
00:14:44,670 --> 00:14:46,440
mean it relies on the idea that like

385
00:14:46,440 --> 00:14:47,880
everybody implements a standard right

386
00:14:47,880 --> 00:14:50,120
which day which they do most of the time

387
00:14:50,120 --> 00:14:52,350
but it's not it's not as different as

388
00:14:52,350 --> 00:14:53,910
like you know you have android and iOS

389
00:14:53,910 --> 00:14:55,770
and you're very different framework so

390
00:14:55,770 --> 00:14:57,750
like very different ap is so that's

391
00:14:57,750 --> 00:15:02,550
great um also emiem supports talking to

392
00:15:02,550 --> 00:15:04,590
the native part of the app we're talking

393
00:15:04,590 --> 00:15:06,030
to the webview part so the different

394
00:15:06,030 --> 00:15:08,370
contexts the context and you can switch

395
00:15:08,370 --> 00:15:09,900
back and forth between them so you can

396
00:15:09,900 --> 00:15:11,700
automate the web part of the app which

397
00:15:11,700 --> 00:15:13,800
is the web view which is forked over the

398
00:15:13,800 --> 00:15:15,540
actual app but there are things that you

399
00:15:15,540 --> 00:15:18,030
you know you can test to the web app if

400
00:15:18,030 --> 00:15:19,830
you hooking like if you have events

401
00:15:19,830 --> 00:15:21,660
hooked up to some native API that

402
00:15:21,660 --> 00:15:23,850
JavaScript exposes fuka dola so

403
00:15:23,850 --> 00:15:25,740
sometimes you have to switch from the

404
00:15:25,740 --> 00:15:28,680
webview context to the native context in

405
00:15:28,680 --> 00:15:30,150
order to like automate something and

406
00:15:30,150 --> 00:15:34,830
then switch back so the great thing is

407
00:15:34,830 --> 00:15:35,820
that you're actually using the same

408
00:15:35,820 --> 00:15:38,100
exact protocol but the semantics change

409
00:15:38,100 --> 00:15:39,870
because in one way you're talking to

410
00:15:39,870 --> 00:15:41,580
need the native part in the other way

411
00:15:41,580 --> 00:15:42,720
you're talking to the webview part which

412
00:15:42,720 --> 00:15:45,630
is you know web technologies the way

413
00:15:45,630 --> 00:15:48,720
that looks like is I try to make it a

414
00:15:48,720 --> 00:15:50,430
little bit clearer by providing a code

415
00:15:50,430 --> 00:15:52,470
example so the top one here is talking

416
00:15:52,470 --> 00:15:54,960
to native codes as you can see it uses

417
00:15:54,960 --> 00:15:57,600
like a kind of familiar Dom type of like

418
00:15:57,600 --> 00:15:59,880
look up get elements by tag name but in

419
00:15:59,880 --> 00:16:01,830
fact attack name here doesn't doesn't

420
00:16:01,830 --> 00:16:03,300
mean a tag name it doesn't it doesn't

421
00:16:03,300 --> 00:16:05,250
mean like I'm looking for a span or a

422
00:16:05,250 --> 00:16:07,230
diff or something it looks it in fact

423
00:16:07,230 --> 00:16:09,930
uses a UI component class which is a

424
00:16:09,930 --> 00:16:12,900
table cell and it will return all of

425
00:16:12,900 --> 00:16:14,160
them so you can do something within the

426
00:16:14,160 --> 00:16:17,280
automation script the idea is to use the

427
00:16:17,280 --> 00:16:20,190
exact same API and it's already let you

428
00:16:20,190 --> 00:16:21,570
know specified so you're not going to

429
00:16:21,570 --> 00:16:23,520
change it but you can use the same

430
00:16:23,520 --> 00:16:25,320
semantics and just you know for now

431
00:16:25,320 --> 00:16:26,940
forget that you're not really looking

432
00:16:26,940 --> 00:16:29,160
for a tag name it's just a UI component

433
00:16:29,160 --> 00:16:31,620
component class but it works it works

434
00:16:31,620 --> 00:16:36,630
just fine down below is the counterpart

435
00:16:36,630 --> 00:16:38,190
it's like when you switch to the webview

436
00:16:38,190 --> 00:16:39,930
context you look for Hispanic a

437
00:16:39,930 --> 00:16:41,340
delicious man so you can work against it

438
00:16:41,340 --> 00:16:43,020
in between you have to do a bunch of

439
00:16:43,020 --> 00:16:45,150
other commands to let you know at me um

440
00:16:45,150 --> 00:16:46,620
no you not want to talk to native for

441
00:16:46,620 --> 00:16:50,760
the webview part okay um without all

442
00:16:50,760 --> 00:16:53,190
thriller do let's just run the tests so

443
00:16:53,190 --> 00:16:54,090
what I'm going to do here is I'm going

444
00:16:54,090 --> 00:17:01,500
to run the tests on iOS first bringing

445
00:17:01,500 --> 00:17:04,350
up the simulator I dropped some delays

446
00:17:04,350 --> 00:17:05,730
in there so a little execute a little

447
00:17:05,730 --> 00:17:07,110
bit slower so we can actually see how it

448
00:17:07,110 --> 00:17:11,130
you know does it's magic and like on the

449
00:17:11,130 --> 00:17:13,140
side here's mocha as a test runner and

450
00:17:13,140 --> 00:17:15,990
it will just do the BDD style interface

451
00:17:15,990 --> 00:17:18,089
and you know show you what tests are

452
00:17:18,089 --> 00:17:20,010
executing at the moment it gets a little

453
00:17:20,010 --> 00:17:25,689
bit more exciting towards the end so

454
00:17:25,699 --> 00:17:27,990
like the setup face is usually a little

455
00:17:27,990 --> 00:17:31,380
bit slow so this one is really

456
00:17:31,380 --> 00:17:32,790
interesting I'm like switching to the

457
00:17:32,790 --> 00:17:33,780
native for you at the end and I'm

458
00:17:33,780 --> 00:17:35,700
scrolling up I do a flick up which you

459
00:17:35,700 --> 00:17:37,680
can't do through the web automation or

460
00:17:37,680 --> 00:17:40,320
like the web context part of it so you

461
00:17:40,320 --> 00:17:44,940
can see here so I mean this is this is

462
00:17:44,940 --> 00:17:47,040
pretty cool stuff but it gets even

463
00:17:47,040 --> 00:17:48,690
better because i'm using the same exact

464
00:17:48,690 --> 00:17:50,310
code and run the same tests on android

465
00:17:50,310 --> 00:17:51,990
without changing anything so you

466
00:17:51,990 --> 00:17:54,150
basically can automate cross-platform

467
00:17:54,150 --> 00:17:56,070
but you use the same exact test cases

468
00:17:56,070 --> 00:17:57,900
like you don't have to implement like

469
00:17:57,900 --> 00:18:02,390
very different code to like do the tests

470
00:18:02,400 --> 00:18:04,720
here there wasn't like a dialog box like

471
00:18:04,720 --> 00:18:05,950
a modal dialogue that i clicked it's

472
00:18:05,950 --> 00:18:09,790
also a native you know api that gets

473
00:18:09,790 --> 00:18:10,810
called and i'm going to show you the

474
00:18:10,810 --> 00:18:12,250
code on how that works and how you can

475
00:18:12,250 --> 00:18:14,410
switch in into the native context from

476
00:18:14,410 --> 00:18:16,870
the webview context but before we do

477
00:18:16,870 --> 00:18:18,190
that i'm going to kick off the android

478
00:18:18,190 --> 00:18:20,950
test so you can see that it does the

479
00:18:20,950 --> 00:18:24,910
same thing for android so this is the

480
00:18:24,910 --> 00:18:29,470
android simulator emulator and hopefully

481
00:18:29,470 --> 00:18:33,520
it'll bring up the app you can see it's

482
00:18:33,520 --> 00:18:40,800
running and let's move it a little bit

483
00:18:40,800 --> 00:18:43,180
on the right side you okay you can see

484
00:18:43,180 --> 00:18:46,870
how it executes the tests so yeah that's

485
00:18:46,870 --> 00:18:48,040
the excitement Zach saying it's a little

486
00:18:48,040 --> 00:18:49,120
bit done in two like watch it all

487
00:18:49,120 --> 00:18:52,360
happening because it takes a while let's

488
00:18:52,360 --> 00:18:55,810
go back to the presentation so my test

489
00:18:55,810 --> 00:18:57,130
implementation i kinda like you're going

490
00:18:57,130 --> 00:18:58,120
to dive into a little bit of code here

491
00:18:58,120 --> 00:19:00,490
it's based on it's all you know it's all

492
00:19:00,490 --> 00:19:03,820
node it's JavaScript the bleeding edge

493
00:19:03,820 --> 00:19:06,910
part here is that I'm using node 0 dots

494
00:19:06,910 --> 00:19:09,760
point 11 that comes with like years 6

495
00:19:09,760 --> 00:19:12,850
and harmony and i'm using a part of it

496
00:19:12,850 --> 00:19:14,470
or like a part of the specification

497
00:19:14,470 --> 00:19:17,740
which is generators test code is

498
00:19:17,740 --> 00:19:19,720
fundamentally sync because you know user

499
00:19:19,720 --> 00:19:21,550
interaction is you know i use i can only

500
00:19:21,550 --> 00:19:23,200
do so much and it's usually like one

501
00:19:23,200 --> 00:19:26,290
thing at a time so using callbacks as

502
00:19:26,290 --> 00:19:28,090
much as I don't have a problem with call

503
00:19:28,090 --> 00:19:30,160
bags like the code just grows to the

504
00:19:30,160 --> 00:19:31,360
right unless you break it up in

505
00:19:31,360 --> 00:19:33,940
functions but and it's not a square and

506
00:19:33,940 --> 00:19:36,760
so my coworker Jonathan the he build a

507
00:19:36,760 --> 00:19:41,110
library called monocle which is a port

508
00:19:41,110 --> 00:19:43,150
from a Python equally on that basically

509
00:19:43,150 --> 00:19:45,550
uses generators to make this API a

510
00:19:45,550 --> 00:19:48,730
little bit nicer and like what it does

511
00:19:48,730 --> 00:19:51,640
is like yield callbacks here as you can

512
00:19:51,640 --> 00:19:53,980
see here and it will unwrap them and

513
00:19:53,980 --> 00:19:56,890
return the value for you so up here

514
00:19:56,890 --> 00:19:59,050
that's a better example it yields a

515
00:19:59,050 --> 00:20:01,150
selector and it returns the value and

516
00:20:01,150 --> 00:20:04,420
when you hit a yield note won't move on

517
00:20:04,420 --> 00:20:06,340
it will like a like pause execution

518
00:20:06,340 --> 00:20:09,100
right there and then later on when the

519
00:20:09,100 --> 00:20:10,360
value comes back and returns the value

520
00:20:10,360 --> 00:20:13,240
and keeps going so this is a very short

521
00:20:13,240 --> 00:20:13,990
example but as

522
00:20:13,990 --> 00:20:16,090
see it's all like nicely lined up and

523
00:20:16,090 --> 00:20:18,429
it's from a from a test authoring point

524
00:20:18,429 --> 00:20:20,410
of view it's just nice and read in my in

525
00:20:20,410 --> 00:20:25,900
my opinion um all right let's look at

526
00:20:25,900 --> 00:20:31,510
the code so um so I spent a lot of time

527
00:20:31,510 --> 00:20:33,280
on actually like creating a nice API on

528
00:20:33,280 --> 00:20:35,470
top of mocha and like that basically

529
00:20:35,470 --> 00:20:37,630
takes care of like getting your app like

530
00:20:37,630 --> 00:20:39,340
set up on the on the simulator which

531
00:20:39,340 --> 00:20:40,960
mostly at me I'm dust but I kind of want

532
00:20:40,960 --> 00:20:42,760
to abstract that away from the user like

533
00:20:42,760 --> 00:20:44,290
from the from the developer and in that

534
00:20:44,290 --> 00:20:46,480
sense so I created like a nice API where

535
00:20:46,480 --> 00:20:48,760
you can basically just drop in like the

536
00:20:48,760 --> 00:20:50,320
package name and the action name which

537
00:20:50,320 --> 00:20:52,150
is you know some like stuff that you

538
00:20:52,150 --> 00:20:54,850
need to specify when you create a code /

539
00:20:54,850 --> 00:20:56,200
app it's always basically the same thing

540
00:20:56,200 --> 00:20:58,030
but and then you can basically just

541
00:20:58,030 --> 00:20:59,320
start coding tests you don't have to

542
00:20:59,320 --> 00:21:01,809
worry about Android or iOS you set that

543
00:21:01,809 --> 00:21:03,309
through environment variable that the

544
00:21:03,309 --> 00:21:06,520
test runner picks up on so it's a BDD

545
00:21:06,520 --> 00:21:08,950
style interface that i coded against and

546
00:21:08,950 --> 00:21:10,300
as you can see here there's a describe

547
00:21:10,300 --> 00:21:14,470
block and and I'm like basically calling

548
00:21:14,470 --> 00:21:17,230
this before each method that will just

549
00:21:17,230 --> 00:21:18,700
activate the webview and then I just

550
00:21:18,700 --> 00:21:20,830
write my test code without going into

551
00:21:20,830 --> 00:21:22,480
much detail here the thing that I wanted

552
00:21:22,480 --> 00:21:23,559
to highlight is like this here is the

553
00:21:23,559 --> 00:21:26,110
actual tests like the the yet statement

554
00:21:26,110 --> 00:21:28,929
it's a yield it I just made me i shorten

555
00:21:28,929 --> 00:21:32,530
it and it's basically just the sequence

556
00:21:32,530 --> 00:21:34,059
of steps it's really easy to read i'm

557
00:21:34,059 --> 00:21:35,980
using CSS selectors mostly to get hold

558
00:21:35,980 --> 00:21:37,660
of elements and click on them and like

559
00:21:37,660 --> 00:21:40,240
retried values and then use like acid in

560
00:21:40,240 --> 00:21:41,800
this assertion framework to just make

561
00:21:41,800 --> 00:21:43,540
sure that you know what i'm expecting is

562
00:21:43,540 --> 00:21:46,270
actually happening what's really

563
00:21:46,270 --> 00:21:47,980
interesting here is that that part down

564
00:21:47,980 --> 00:21:51,010
here I built this method like this

565
00:21:51,010 --> 00:21:52,929
function it's actually a generator but

566
00:21:52,929 --> 00:21:55,150
it's wrapped in a in a in a function

567
00:21:55,150 --> 00:21:56,800
that is called native sequence and then

568
00:21:56,800 --> 00:21:58,630
let's see whatever you put in there will

569
00:21:58,630 --> 00:22:00,970
x will be executed in the native context

570
00:22:00,970 --> 00:22:04,240
and not in the webview context so the

571
00:22:04,240 --> 00:22:05,920
interesting thing is I'm dismissing a

572
00:22:05,920 --> 00:22:08,110
modal dialogue here and as you can see

573
00:22:08,110 --> 00:22:09,880
up here this is the the function

574
00:22:09,880 --> 00:22:12,550
definition will actually generator this

575
00:22:12,550 --> 00:22:14,470
is obviously different because iOS and

576
00:22:14,470 --> 00:22:17,590
Android are different in the ways you

577
00:22:17,590 --> 00:22:19,000
have to interact with like native code

578
00:22:19,000 --> 00:22:21,250
so there's a little bit of like platform

579
00:22:21,250 --> 00:22:22,960
specific stuff that you have to do but

580
00:22:22,960 --> 00:22:24,280
whenever you talk about view it's the

581
00:22:24,280 --> 00:22:25,700
exact same code

582
00:22:25,700 --> 00:22:30,830
alright um so what's next so since I

583
00:22:30,830 --> 00:22:33,409
said like every you know mobile app

584
00:22:33,409 --> 00:22:36,500
should be tested in an automated way it

585
00:22:36,500 --> 00:22:38,620
should also be part of a build right so

586
00:22:38,620 --> 00:22:41,419
I thought like the scope of this talk is

587
00:22:41,419 --> 00:22:43,909
already you know pretty comprehensive so

588
00:22:43,909 --> 00:22:46,340
I didn't when I get CI in there and all

589
00:22:46,340 --> 00:22:48,320
that kind of stuff but like it's

590
00:22:48,320 --> 00:22:49,970
essential if you know if you want to do

591
00:22:49,970 --> 00:22:52,309
that on a in an automated fashion to

592
00:22:52,309 --> 00:22:53,929
make it part of a build running on a you

593
00:22:53,929 --> 00:22:56,029
know Jenkins server or Travis or Strider

594
00:22:56,029 --> 00:22:58,639
any of those open source solutions or

595
00:22:58,639 --> 00:23:01,850
propriety solutions for that matter the

596
00:23:01,850 --> 00:23:03,080
great thing is that like my employer

597
00:23:03,080 --> 00:23:05,029
sauce labs we running at me I'm in the

598
00:23:05,029 --> 00:23:07,039
cloud and if you happen to work on an

599
00:23:07,039 --> 00:23:08,419
open source project we do that for free

600
00:23:08,419 --> 00:23:11,659
so you can just use that otherwise it's

601
00:23:11,659 --> 00:23:13,130
a really good way of like scaling

602
00:23:13,130 --> 00:23:15,440
because executing functional tests waste

603
00:23:15,440 --> 00:23:17,899
lowered and unit tests and executing in

604
00:23:17,899 --> 00:23:20,179
scale like on a single machine can take

605
00:23:20,179 --> 00:23:22,490
a while so that's a great great way off

606
00:23:22,490 --> 00:23:23,809
like getting around this problem and

607
00:23:23,809 --> 00:23:24,980
especially if you're doing open source

608
00:23:24,980 --> 00:23:25,909
you don't have to worry about you know

609
00:23:25,909 --> 00:23:27,889
costs or anything like that a good

610
00:23:27,889 --> 00:23:30,649
starting point for all this is a smoke

611
00:23:30,649 --> 00:23:32,840
test right like you you just want to see

612
00:23:32,840 --> 00:23:34,850
is your most important flow through the

613
00:23:34,850 --> 00:23:38,029
app working like let's say you your

614
00:23:38,029 --> 00:23:39,559
booking something and you have a credit

615
00:23:39,559 --> 00:23:41,269
card checkout process or the credit card

616
00:23:41,269 --> 00:23:43,039
is already in the system you just want

617
00:23:43,039 --> 00:23:44,419
to make sure that the user gets from n

618
00:23:44,419 --> 00:23:46,279
to n so smoke tests a good starting

619
00:23:46,279 --> 00:23:47,539
point but you know the more the merrier

620
00:23:47,539 --> 00:23:50,750
obviously it's really important to not

621
00:23:50,750 --> 00:23:52,730
confuse unit tests with functional tests

622
00:23:52,730 --> 00:23:54,409
so the great thing is like since we were

623
00:23:54,409 --> 00:23:55,580
working on the web you can you can

624
00:23:55,580 --> 00:23:58,039
heavily test your small parts of the

625
00:23:58,039 --> 00:24:00,019
code using javascript unit tests the

626
00:24:00,019 --> 00:24:01,220
only problem that you have with that is

627
00:24:01,220 --> 00:24:03,279
that you obviously when you coat them in

628
00:24:03,279 --> 00:24:05,659
Chrome or Firefox they're not running on

629
00:24:05,659 --> 00:24:07,370
the actual device right so it's a good

630
00:24:07,370 --> 00:24:09,260
way of having like integration tests

631
00:24:09,260 --> 00:24:12,200
like wrapped up in functional tests it

632
00:24:12,200 --> 00:24:14,419
fulfills a bunch of a lot of purposes

633
00:24:14,419 --> 00:24:17,720
for that matter and yeah it's it's it's

634
00:24:17,720 --> 00:24:19,100
great stuff and you know what it's all

635
00:24:19,100 --> 00:24:20,929
open source so the tools out there they

636
00:24:20,929 --> 00:24:22,340
work and it did this proof-of-concept

637
00:24:22,340 --> 00:24:24,350
implementation here then I'm going to

638
00:24:24,350 --> 00:24:26,120
source and everyone can look at it and

639
00:24:26,120 --> 00:24:28,760
user to make it better and and that's

640
00:24:28,760 --> 00:24:30,919
why I'm saying every app should be a

641
00:24:30,919 --> 00:24:32,870
tested an automated way because it's you

642
00:24:32,870 --> 00:24:34,639
know it's available the tools are there

643
00:24:34,639 --> 00:24:39,500
there's no excuse and that's

644
00:24:39,500 --> 00:24:41,810
basically all I've got and I have a

645
00:24:41,810 --> 00:24:45,170
bunch of links here at miam I always

646
00:24:45,170 --> 00:24:47,660
liked the automation framework please

647
00:24:47,660 --> 00:24:49,690
check it out we can always use

648
00:24:49,690 --> 00:24:51,680
contributions any kind of way sample

649
00:24:51,680 --> 00:24:54,080
codes fixing bucks all that kind of

650
00:24:54,080 --> 00:24:57,860
stuff gap miam is like you know phonegap

651
00:24:57,860 --> 00:24:59,570
and at miam this is like what i showed

652
00:24:59,570 --> 00:25:01,700
you this is basically the the sample app

653
00:25:01,700 --> 00:25:03,650
that I used and it has code in there

654
00:25:03,650 --> 00:25:04,700
that like does this whole nice

655
00:25:04,700 --> 00:25:06,290
abstraction using generators and all

656
00:25:06,290 --> 00:25:07,970
that which hopefully will end in nodes

657
00:25:07,970 --> 00:25:10,670
zero point 12 so you don't have to use

658
00:25:10,670 --> 00:25:12,530
the Harmony command line option to

659
00:25:12,530 --> 00:25:16,910
activate them and it also it will have

660
00:25:16,910 --> 00:25:18,050
all this code I haven't pushed it out

661
00:25:18,050 --> 00:25:19,670
yet but it will I just want to follow

662
00:25:19,670 --> 00:25:21,110
the community process of getting it in

663
00:25:21,110 --> 00:25:23,570
there yeah and other than that there's

664
00:25:23,570 --> 00:25:26,060
Cordova and topcoat padova is really

665
00:25:26,060 --> 00:25:28,400
great um it was the first time I got my

666
00:25:28,400 --> 00:25:30,590
hands basically dirty with code over but

667
00:25:30,590 --> 00:25:32,240
it's it's a really great framework and

668
00:25:32,240 --> 00:25:35,920
it also gives you a multitude of like

669
00:25:35,920 --> 00:25:38,330
API so you can like interact with the

670
00:25:38,330 --> 00:25:40,340
actual app you can you can set geo

671
00:25:40,340 --> 00:25:41,930
locations you can get the battery life

672
00:25:41,930 --> 00:25:45,230
status and all that so check that out

673
00:25:45,230 --> 00:25:47,090
feel free to like hit me up on Twitter

674
00:25:47,090 --> 00:25:49,340
if you have questions or like come you

675
00:25:49,340 --> 00:25:50,870
know finally talk to me i can show you

676
00:25:50,870 --> 00:25:52,130
how to execute that stuff in the real

677
00:25:52,130 --> 00:25:54,380
device or show you the guts of the test

678
00:25:54,380 --> 00:25:56,000
code or like what's behind it in on then

679
00:25:56,000 --> 00:25:59,090
and other than that that's all i have so

680
00:25:59,090 --> 00:26:06,259
if five minutes of Q&A I guess

681
00:26:06,269 --> 00:26:08,789
I love that the guy that looks like me

682
00:26:08,789 --> 00:26:11,940
talked about phonegap that's awesome it

683
00:26:11,940 --> 00:26:17,879
don't get to keep my haircuts yes hi I'm

684
00:26:17,879 --> 00:26:21,239
max from Mozilla working on firefox OS

685
00:26:21,239 --> 00:26:22,830
localization infrastructure stuff like

686
00:26:22,830 --> 00:26:25,799
that one thing that we've been looking

687
00:26:25,799 --> 00:26:28,559
at is actually doing screenshots is part

688
00:26:28,559 --> 00:26:31,499
of the automated testing so that you can

689
00:26:31,499 --> 00:26:33,749
actually have a visual test afterwards

690
00:26:33,749 --> 00:26:35,639
without waiting for the whole execution

691
00:26:35,639 --> 00:26:38,159
part right have you thought about stuff

692
00:26:38,159 --> 00:26:40,079
like that I think this is actually in

693
00:26:40,079 --> 00:26:41,849
the making i'm not sure what platform

694
00:26:41,849 --> 00:26:44,099
are supported so far i know that like on

695
00:26:44,099 --> 00:26:46,079
our platform on saw slaps it works

696
00:26:46,079 --> 00:26:48,659
because it's built into the service but

697
00:26:48,659 --> 00:26:50,879
i think fundamentally we want the the

698
00:26:50,879 --> 00:26:52,349
framework that were using to support it

699
00:26:52,349 --> 00:26:53,729
and not you know make that dependent on

700
00:26:53,729 --> 00:26:55,769
the platform i do know that my coworker

701
00:26:55,769 --> 00:26:57,959
Jonathan worked with Malini dust from

702
00:26:57,959 --> 00:27:00,209
Mozilla who's like working on Marion had

703
00:27:00,209 --> 00:27:01,709
to actually get firefox OS support

704
00:27:01,709 --> 00:27:03,239
Indian as far as i know that actually

705
00:27:03,239 --> 00:27:05,639
works I don't know the extent of it but

706
00:27:05,639 --> 00:27:07,859
if you want to know more about this feel

707
00:27:07,859 --> 00:27:09,570
free to check out a project and you know

708
00:27:09,570 --> 00:27:11,309
if you can't find the screenshot feel

709
00:27:11,309 --> 00:27:12,629
free to create a github issue and then

710
00:27:12,629 --> 00:27:13,829
we can get it in the whole community

711
00:27:13,829 --> 00:27:17,070
process and all then there's also i can

712
00:27:17,070 --> 00:27:18,599
shoot you a link but there's plug-ins

713
00:27:18,599 --> 00:27:21,349
for that for cordova for iOS and Android

714
00:27:21,349 --> 00:27:23,159
actually have a question for you this

715
00:27:23,159 --> 00:27:26,029
Firefox OS implement a screenshot in API

716
00:27:26,029 --> 00:27:30,479
it does cool that's a benefit that you

717
00:27:30,479 --> 00:27:32,009
get when your host is actually the

718
00:27:32,009 --> 00:27:33,450
author of the framework you're talking

719
00:27:33,450 --> 00:27:40,019
about do we have any more questions come

720
00:27:40,019 --> 00:27:41,729
on I have a question actually you guys

721
00:27:41,729 --> 00:27:44,099
gonna start doing work with medic which

722
00:27:44,099 --> 00:27:45,839
is the continuous integration stuff that

723
00:27:45,839 --> 00:27:50,279
film I wrote for Cordova um I mean Phil

724
00:27:50,279 --> 00:27:54,259
works was now so it is a good chance but

725
00:27:54,259 --> 00:27:56,820
I'm trying to dig out the info on this

726
00:27:56,820 --> 00:27:59,039
one I mean I would just I would say it's

727
00:27:59,039 --> 00:28:01,859
not impossible yeah i'm just not deeply

728
00:28:01,859 --> 00:28:03,119
involved I'm just kind of like I was

729
00:28:03,119 --> 00:28:04,709
curious about code ova and and how that

730
00:28:04,709 --> 00:28:05,999
works with automation I wanted to do a

731
00:28:05,999 --> 00:28:07,469
proof of concept now I'm talking about

732
00:28:07,469 --> 00:28:12,320
it but potentially cool

733
00:28:12,330 --> 00:28:17,669
I mean it's it's it's pretty slick yeah

734
00:28:17,669 --> 00:28:19,500
I mean like I can't take the credit for

735
00:28:19,500 --> 00:28:20,700
it i really have to like give my

736
00:28:20,700 --> 00:28:22,679
coworker of jonathan here daughter's

737
00:28:22,679 --> 00:28:24,570
lips all the credit for it the good

738
00:28:24,570 --> 00:28:26,549
thing is like we he poured it the

739
00:28:26,549 --> 00:28:29,519
implementation of Python twisted that we

740
00:28:29,519 --> 00:28:30,990
use internally and salsa for

741
00:28:30,990 --> 00:28:32,309
infrastructure so you had a really nice

742
00:28:32,309 --> 00:28:34,200
API already that you know have been

743
00:28:34,200 --> 00:28:36,690
using for a couple of years I think it's

744
00:28:36,690 --> 00:28:38,580
great to just a little bit of

745
00:28:38,580 --> 00:28:40,230
controversy behind like how to handle

746
00:28:40,230 --> 00:28:42,240
errors which is really not a big deal in

747
00:28:42,240 --> 00:28:43,830
tesco because when an error happens you

748
00:28:43,830 --> 00:28:45,269
just wanted to bubble up and like have

749
00:28:45,269 --> 00:28:47,159
to test run or like make it visible to

750
00:28:47,159 --> 00:28:49,740
you there may be a little bit more work

751
00:28:49,740 --> 00:28:51,120
required to actually use in a different

752
00:28:51,120 --> 00:28:52,649
way but it's you know it's pretty great

753
00:28:52,649 --> 00:28:54,539
it makes called super annoying spoon

754
00:28:54,539 --> 00:28:59,899
yeah I appreciate it then thanks cool so

755
00:28:59,899 --> 00:29:03,779
give give my doppelganger round of

756
00:29:03,779 --> 00:29:06,539
applause and we'll we'll have a white

757
00:29:06,539 --> 00:29:08,309
out a couple days to set up the next

758
00:29:08,309 --> 00:29:16,509
talk about

