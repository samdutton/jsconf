1
00:00:00,180 --> 00:00:15,650

[Music]

2
00:00:15,650 --> 00:00:19,020
there's a very re so today Thomas

3
00:00:19,020 --> 00:00:21,330
inception or Thomas section whatever you

4
00:00:21,330 --> 00:00:23,160
might go to a conference in sumption

5
00:00:23,160 --> 00:00:25,890
this my dear friend Bella who you can

6
00:00:25,890 --> 00:00:27,900
see co-presenting right next to me I

7
00:00:27,900 --> 00:00:29,490
made you a key mistake on my last

8
00:00:29,490 --> 00:00:32,520
conference to forget my co-presenter I'm

9
00:00:32,520 --> 00:00:34,200
never gonna make that mistake again

10
00:00:34,200 --> 00:00:36,180
so yeah you're gonna be talking about

11
00:00:36,180 --> 00:00:40,440
JavaScript or hardware or you could also

12
00:00:40,440 --> 00:00:43,620
put it all these gadgets

13
00:00:43,620 --> 00:00:46,800
I'm estimates moshansky you can reach me

14
00:00:46,800 --> 00:00:50,250
in twitter at SL Softworks if you really

15
00:00:50,250 --> 00:00:56,610
want to and I'm I'm always asked what do

16
00:00:56,610 --> 00:00:59,640
you really do and I was like yeah I'm a

17
00:00:59,640 --> 00:01:01,770
JavaScript developer also you program I

18
00:01:01,770 --> 00:01:04,530
was like no not really I kind of write

19
00:01:04,530 --> 00:01:08,310
emails like 24/7 but yeah because I do a

20
00:01:08,310 --> 00:01:10,350
lot of community management conferences

21
00:01:10,350 --> 00:01:12,060
I'm a missile text because this is the

22
00:01:12,060 --> 00:01:15,680
big blue t-shirt and colorful heart

23
00:01:15,680 --> 00:01:18,659
which is which one of the reasons why

24
00:01:18,659 --> 00:01:20,880
I'm put on this stage and many other

25
00:01:20,880 --> 00:01:22,530
stages as well and we're gonna be

26
00:01:22,530 --> 00:01:23,880
talking about the decimal in a short

27
00:01:23,880 --> 00:01:28,320
while so that's not who knows this dear

28
00:01:28,320 --> 00:01:29,820
person right here

29
00:01:29,820 --> 00:01:33,119
although will help this is 2009 I just

30
00:01:33,119 --> 00:01:35,729
hands up if anybody all right

31
00:01:35,729 --> 00:01:39,060
there's at least one this darling is

32
00:01:39,060 --> 00:01:43,049
ryan doll and this is Jay's Kampf EU

33
00:01:43,049 --> 00:01:47,009
2009 where no GS was presented for the

34
00:01:47,009 --> 00:01:51,689
very first time noches zero point one

35
00:01:51,689 --> 00:01:55,020
point 17 if I'm not mistaken something

36
00:01:55,020 --> 00:01:57,750
like that they were waiting the big 0

37
00:01:57,750 --> 00:02:01,530
put do version to command and why are we

38
00:02:01,530 --> 00:02:04,619
starting window Jess and in a JavaScript

39
00:02:04,619 --> 00:02:06,960
a microcontroller or Hardware talk well

40
00:02:06,960 --> 00:02:10,739
you know the there's a lot that

41
00:02:10,739 --> 00:02:13,800
influenced were the hardware communities

42
00:02:13,800 --> 00:02:16,739
and the JavaScript and web hardware

43
00:02:16,739 --> 00:02:20,700
community is that currently but the main

44
00:02:20,700 --> 00:02:23,520
influence was mostly nodejs because when

45
00:02:23,520 --> 00:02:27,330
no just came out it the browser and this

46
00:02:27,330 --> 00:02:30,750
javascript language lost its shackles

47
00:02:30,750 --> 00:02:33,900
its freed from its shackles being only a

48
00:02:33,900 --> 00:02:35,430
thing in the browser

49
00:02:35,430 --> 00:02:37,830
no jesus brought it to your computer's

50
00:02:37,830 --> 00:02:40,860
common line brought it to your servers

51
00:02:40,860 --> 00:02:42,959
and eventually to your hardware devices

52
00:02:42,959 --> 00:02:47,819
and i wrote this article you know

53
00:02:47,819 --> 00:02:50,040
shameless plug here javascript world

54
00:02:50,040 --> 00:02:54,440
domination and has anybody read this one

55
00:02:54,440 --> 00:03:01,709
gee i have less happy than then I not

56
00:03:01,709 --> 00:03:05,129
seeing hands on Ryan the ha face anyway

57
00:03:05,129 --> 00:03:07,620
it turned out to be a really long lead

58
00:03:07,620 --> 00:03:10,590
and even this already haven't really

59
00:03:10,590 --> 00:03:12,720
mentioned Harvard that much this was two

60
00:03:12,720 --> 00:03:16,560
and a half years ago maybe but even then

61
00:03:16,560 --> 00:03:19,590
like the writing was on the ball because

62
00:03:19,590 --> 00:03:22,530
you can already see the emerging act

63
00:03:22,530 --> 00:03:25,230
echo system around you know IOT smart

64
00:03:25,230 --> 00:03:30,239
devices and all that so it's it's due to

65
00:03:30,239 --> 00:03:32,370
an update because a lot of things have

66
00:03:32,370 --> 00:03:35,190
happened since then because JavaScript

67
00:03:35,190 --> 00:03:37,200
has finally arrived to the hardware and

68
00:03:37,200 --> 00:03:39,569
what I'm saying you know JavaScript

69
00:03:39,569 --> 00:03:42,330
arrived on the hardware but first we are

70
00:03:42,330 --> 00:03:44,159
going to be talking about is really no

71
00:03:44,159 --> 00:03:47,340
BOTS so note about is really hardware

72
00:03:47,340 --> 00:03:52,319
plus no GS we took smells like node

73
00:03:52,319 --> 00:03:56,879
robotics but no chairs and so there is a

74
00:03:56,879 --> 00:03:59,689
trick here actually javascript is not

75
00:03:59,689 --> 00:04:01,980
really on the heart verb and you know

76
00:04:01,980 --> 00:04:03,780
talking about

77
00:04:03,780 --> 00:04:06,870
nodebots there are a few ways to do this

78
00:04:06,870 --> 00:04:09,690
but the number one ways to do this is

79
00:04:09,690 --> 00:04:12,720
johnny-five which is a library you could

80
00:04:12,720 --> 00:04:18,030
install for your new GS install under

81
00:04:18,030 --> 00:04:20,609
nodejs it's an NPM package you install

82
00:04:20,609 --> 00:04:23,480
it as a usual and you can use your node

83
00:04:23,480 --> 00:04:28,080
script to control a device to control a

84
00:04:28,080 --> 00:04:30,650
hardware device from inside your node.js

85
00:04:30,650 --> 00:04:33,240
JavaScript code but your code is

86
00:04:33,240 --> 00:04:35,810
actually not run on the device itself

87
00:04:35,810 --> 00:04:38,940
the code runs on your computer and the

88
00:04:38,940 --> 00:04:41,460
commands are transferred to the device

89
00:04:41,460 --> 00:04:44,940
itself still it's not bad I mean it got

90
00:04:44,940 --> 00:04:47,970
you some node boats not just some node

91
00:04:47,970 --> 00:04:53,040
BOTS got you some node quadrocopters

92
00:04:53,040 --> 00:04:55,650
which is pretty cool from something

93
00:04:55,650 --> 00:04:57,210
that's not running on the hardware right

94
00:04:57,210 --> 00:05:01,800
and 2014 there was this conference in

95
00:05:01,800 --> 00:05:04,710
jail scoff in the US and they were like

96
00:05:04,710 --> 00:05:07,320
we already have all the node robots and

97
00:05:07,320 --> 00:05:10,860
and Volkers and boats and there is one

98
00:05:10,860 --> 00:05:15,440
thing we don't have yeah that is right

99
00:05:15,440 --> 00:05:21,590
what you see here is in a rocket well

100
00:05:21,590 --> 00:05:25,729
there is no need to see other the fire

101
00:05:25,729 --> 00:05:27,720
agency just yet

102
00:05:27,720 --> 00:05:30,110
this was pressure using pressurized

103
00:05:30,110 --> 00:05:33,300
water to launch rockets in kiddie air

104
00:05:33,300 --> 00:05:36,060
but I mean it is a rocket right it

105
00:05:36,060 --> 00:05:38,700
blasts often it flies it's a rocket it's

106
00:05:38,700 --> 00:05:42,630
it's good enough so how did they

107
00:05:42,630 --> 00:05:45,330
accomplish this is something called node

108
00:05:45,330 --> 00:05:49,530
serial port was insurmountable which

109
00:05:49,530 --> 00:05:52,860
basically lets you connect no GS with an

110
00:05:52,860 --> 00:05:55,590
Arduino device or a any other hardware

111
00:05:55,590 --> 00:05:59,490
device when you did that what you did is

112
00:05:59,490 --> 00:06:01,290
you had your node.js and you're running

113
00:06:01,290 --> 00:06:02,520
on your computer and you've installed

114
00:06:02,520 --> 00:06:05,669
the node 0 port library which then went

115
00:06:05,669 --> 00:06:08,940
on and you could write your code in your

116
00:06:08,940 --> 00:06:12,060
node.js application you connected in

117
00:06:12,060 --> 00:06:14,910
some way in one way or another

118
00:06:14,910 --> 00:06:17,310
the microcontroller you wanted to

119
00:06:17,310 --> 00:06:20,970
control and the natural port library

120
00:06:20,970 --> 00:06:23,810
used to send your commands to this other

121
00:06:23,810 --> 00:06:28,430
device using something like a Fermata

122
00:06:28,430 --> 00:06:31,260
command for mother is basically a

123
00:06:31,260 --> 00:06:33,540
protocol that you're gonna be using to

124
00:06:33,540 --> 00:06:37,020
give comments to other devices so you

125
00:06:37,020 --> 00:06:39,210
have your micro controller you have

126
00:06:39,210 --> 00:06:42,720
Fermanagh connecting the two you have

127
00:06:42,720 --> 00:06:46,050
another computer that's translating your

128
00:06:46,050 --> 00:06:47,730
JavaScript code that you wrote for

129
00:06:47,730 --> 00:06:50,460
nodejs into this platform our protocol

130
00:06:50,460 --> 00:06:53,070
and sends your commands 2d 2d 2d

131
00:06:53,070 --> 00:06:56,010
hardware device by the way these

132
00:06:56,010 --> 00:06:59,370
pictures are taken from the wonderful

133
00:06:59,370 --> 00:07:02,610
babbling mid merfolk talk by sis Hinton

134
00:07:02,610 --> 00:07:06,060
or Nootka most people usually know her

135
00:07:06,060 --> 00:07:07,860
lately from her twitch streaming

136
00:07:07,860 --> 00:07:10,470
open-source development she's amazing

137
00:07:10,470 --> 00:07:12,060
and you should definitely watch this

138
00:07:12,060 --> 00:07:14,400
talk because it's amazing for an

139
00:07:14,400 --> 00:07:16,590
introduction to hard I think to date

140
00:07:16,590 --> 00:07:18,900
this is probably one of the best ones if

141
00:07:18,900 --> 00:07:20,940
you never brought a work with hardware

142
00:07:20,940 --> 00:07:23,970
it has all what you want cute animals

143
00:07:23,970 --> 00:07:30,510
and interesting technical bits told very

144
00:07:30,510 --> 00:07:32,850
well so if you want to get into and what

145
00:07:32,850 --> 00:07:34,650
you get no more about Arduinos and

146
00:07:34,650 --> 00:07:35,460
firmata

147
00:07:35,460 --> 00:07:38,670
you're gonna be starting here there's

148
00:07:38,670 --> 00:07:40,440
going to be a lot a bunch of links at

149
00:07:40,440 --> 00:07:42,090
the end of this presentation you can

150
00:07:42,090 --> 00:07:45,600
find it there so here's the thing

151
00:07:45,600 --> 00:07:48,060
like I said these devices were really

152
00:07:48,060 --> 00:07:51,540
running JavaScript on the harbor so what

153
00:07:51,540 --> 00:07:54,000
you really wanted to have something a

154
00:07:54,000 --> 00:07:56,250
device that runs JavaScript on the

155
00:07:56,250 --> 00:07:58,590
hardware itself you know debry like it

156
00:07:58,590 --> 00:08:00,570
said writing was on the wall everybody

157
00:08:00,570 --> 00:08:04,200
wanted to code easily hardware devices

158
00:08:04,200 --> 00:08:09,240
on in their favorite language so the

159
00:08:09,240 --> 00:08:10,950
castle I mentioned before this is a

160
00:08:10,950 --> 00:08:13,230
microcontroller that actually brought me

161
00:08:13,230 --> 00:08:15,450
into programming hardware in the first

162
00:08:15,450 --> 00:08:16,350
place

163
00:08:16,350 --> 00:08:20,730
it had a crowdfunding campaign roughly

164
00:08:20,730 --> 00:08:25,960
three years ago you can see 2015 January

165
00:08:25,960 --> 00:08:31,600
I was a time oh it's almost exactly it's

166
00:08:31,600 --> 00:08:35,529
gonna be in January 27 nice that I

167
00:08:35,529 --> 00:08:37,690
presented the very first time at

168
00:08:37,690 --> 00:08:40,839
Budapest Jas in Hungary about Harvard

169
00:08:40,839 --> 00:08:43,270
and JavaScript in the first place

170
00:08:43,270 --> 00:08:44,709
because the test song was a

171
00:08:44,709 --> 00:08:46,660
microcontroller that was running

172
00:08:46,660 --> 00:08:48,490
JavaScript which is a bit of a stretch

173
00:08:48,490 --> 00:08:51,520
but it was running your code on the

174
00:08:51,520 --> 00:08:53,440
hardware itself and then just sending

175
00:08:53,440 --> 00:08:55,870
comments to the hardware what I'm saying

176
00:08:55,870 --> 00:08:57,430
that this that this is a bit of a

177
00:08:57,430 --> 00:09:02,170
stretch is I always have one image in

178
00:09:02,170 --> 00:09:04,450
any member of my presentation that is

179
00:09:04,450 --> 00:09:07,750
just not loading so my dear friend John

180
00:09:07,750 --> 00:09:11,230
Mackay who is not going to be presented

181
00:09:11,230 --> 00:09:15,010
on stage here has a very excellent talk

182
00:09:15,010 --> 00:09:19,360
he is the founder of the project he is a

183
00:09:19,360 --> 00:09:24,300
founder of the project that the tassel

184
00:09:24,300 --> 00:09:28,750
he created the tassel project and he was

185
00:09:28,750 --> 00:09:32,020
a initially a part of a team a start of

186
00:09:32,020 --> 00:09:34,180
team who created the original tassel and

187
00:09:34,180 --> 00:09:37,120
he had a very great talk about the

188
00:09:37,120 --> 00:09:40,810
perils of running nodejs

189
00:09:40,810 --> 00:09:42,850
on a microcontroller because that's what

190
00:09:42,850 --> 00:09:45,190
they tried to do so what the test I'll

191
00:09:45,190 --> 00:09:48,399
try to do is they try to put nodejs onto

192
00:09:48,399 --> 00:09:50,170
the microcontroller that was this low

193
00:09:50,170 --> 00:09:53,800
power device but how they accomplish

194
00:09:53,800 --> 00:09:56,470
that is actually they use Lua who here

195
00:09:56,470 --> 00:09:59,680
knows who not do is alright at least

196
00:09:59,680 --> 00:10:01,990
there is a few people Solo is very

197
00:10:01,990 --> 00:10:05,829
similar language in terms of complexity

198
00:10:05,829 --> 00:10:09,579
to JavaScript for the average you know

199
00:10:09,579 --> 00:10:12,070
person looking at the cue languages one

200
00:10:12,070 --> 00:10:15,850
might even confuse it to Lua is that

201
00:10:15,850 --> 00:10:18,070
explicitly made for embedding and

202
00:10:18,070 --> 00:10:20,740
scripting a bunch of like World of

203
00:10:20,740 --> 00:10:23,279
Warcraft is scripted in Lua for example

204
00:10:23,279 --> 00:10:27,279
under a fantasy consoles used in law the

205
00:10:27,279 --> 00:10:30,160
languages have very similar types and in

206
00:10:30,160 --> 00:10:32,740
general very similar to each other so

207
00:10:32,740 --> 00:10:35,020
they decided to create a compiler that

208
00:10:35,020 --> 00:10:38,079
compiles your code from javascript to

209
00:10:38,079 --> 00:10:39,250
Lua and

210
00:10:39,250 --> 00:10:41,830
Lua on the actual device itself so it

211
00:10:41,830 --> 00:10:44,080
still your code running on the device

212
00:10:44,080 --> 00:10:46,930
itself but it's transformed to something

213
00:10:46,930 --> 00:10:49,390
that the device could run later could

214
00:10:49,390 --> 00:10:51,340
run itself we're gonna be talking about

215
00:10:51,340 --> 00:10:54,640
bit more about this later why is that a

216
00:10:54,640 --> 00:10:57,430
good idea and if you watched John's

217
00:10:57,430 --> 00:10:59,260
video he will tell you why is that a

218
00:10:59,260 --> 00:11:02,620
terrible idea the number one is the node

219
00:11:02,620 --> 00:11:05,890
ecosystem itself NPM itself needs a lot

220
00:11:05,890 --> 00:11:11,850
of breeds a lot of compatibility issue

221
00:11:11,850 --> 00:11:13,900
especially when you're trying to cater

222
00:11:13,900 --> 00:11:16,630
for it and JavaScript itself is not as

223
00:11:16,630 --> 00:11:19,180
easy as it seems and not as easy to

224
00:11:19,180 --> 00:11:22,450
compile to Lua as it seems and a bunch

225
00:11:22,450 --> 00:11:25,510
of other things if you are thinking of

226
00:11:25,510 --> 00:11:27,430
doing a hardware startup ever or just

227
00:11:27,430 --> 00:11:29,830
this chart up in general he has very

228
00:11:29,830 --> 00:11:31,810
good takeaways from the whole startup

229
00:11:31,810 --> 00:11:37,780
thing as well so as as I said you will

230
00:11:37,780 --> 00:11:39,790
find the link later on the slides and

231
00:11:39,790 --> 00:11:43,810
the presentations so ok running nodejs a

232
00:11:43,810 --> 00:11:45,820
microcontroller might not be a good idea

233
00:11:45,820 --> 00:11:48,220
maybe let's try just running playing

234
00:11:48,220 --> 00:11:51,730
JavaScript and this is what the Espino

235
00:11:51,730 --> 00:11:56,350
is gonna be May making it possible for

236
00:11:56,350 --> 00:11:59,110
us so what you see here is the s Perino

237
00:11:59,110 --> 00:12:03,910
picker from all these gadgets I forgot

238
00:12:03,910 --> 00:12:05,680
to bring my Ashbury nose so you'll have

239
00:12:05,680 --> 00:12:07,780
to believe me that it's about the size

240
00:12:07,780 --> 00:12:11,260
of a table drive and this actually runs

241
00:12:11,260 --> 00:12:14,970
proper JavaScript on the device itself

242
00:12:14,970 --> 00:12:21,970
even better it was created by a educator

243
00:12:21,970 --> 00:12:27,820
in the UK called Gordon and what good

244
00:12:27,820 --> 00:12:30,070
Gordon did you know there are a bunch of

245
00:12:30,070 --> 00:12:31,960
educators in the UK you kind of find

246
00:12:31,960 --> 00:12:35,050
them quite often so what Gordon did is

247
00:12:35,050 --> 00:12:37,660
hey I had this idea I wanted to make

248
00:12:37,660 --> 00:12:40,420
hardware accessible to people but he

249
00:12:40,420 --> 00:12:42,100
actually went all the way he didn't just

250
00:12:42,100 --> 00:12:43,570
make the hardware accessible in the

251
00:12:43,570 --> 00:12:46,030
programming language accessible but what

252
00:12:46,030 --> 00:12:48,279
he did is he actually

253
00:12:48,279 --> 00:12:51,670
created a web IDE for the thing and made

254
00:12:51,670 --> 00:12:53,709
it easy to program the device so you

255
00:12:53,709 --> 00:12:56,769
just plugged your a Pico in you just

256
00:12:56,769 --> 00:13:00,970
launched you can install a web from the

257
00:13:00,970 --> 00:13:03,009
Chrome Web Store this this application

258
00:13:03,009 --> 00:13:05,889
that would later connect to your Xperia

259
00:13:05,889 --> 00:13:08,379
because these days you can just run this

260
00:13:08,379 --> 00:13:11,970
web app from the from a URL itself

261
00:13:11,970 --> 00:13:15,339
there's a Web API called web serial port

262
00:13:15,339 --> 00:13:18,069
and web Bluetooth that lets you program

263
00:13:18,069 --> 00:13:20,829
your hardware devices without installing

264
00:13:20,829 --> 00:13:23,470
any extra plug-in or application itself

265
00:13:23,470 --> 00:13:26,019
so he was like I'm not just gonna make

266
00:13:26,019 --> 00:13:28,990
it the programming itself easier by

267
00:13:28,990 --> 00:13:31,149
making this thing in JavaScript I'm

268
00:13:31,149 --> 00:13:33,699
gonna make the whole experience better

269
00:13:33,699 --> 00:13:36,699
so if you're ever doing something with

270
00:13:36,699 --> 00:13:39,970
hardware think about this and tehsil was

271
00:13:39,970 --> 00:13:42,910
was I was working a lot on making this

272
00:13:42,910 --> 00:13:47,379
work with DITA so the first decide the

273
00:13:47,379 --> 00:13:49,269
second tehsil the developer experience

274
00:13:49,269 --> 00:13:52,059
and user experience where the user is

275
00:13:52,059 --> 00:13:54,100
currently the developer make it better

276
00:13:54,100 --> 00:13:59,500
and make it worthwhile so they even came

277
00:13:59,500 --> 00:14:02,019
out with a new device lately that's the

278
00:14:02,019 --> 00:14:05,230
purchase that's also super tiny and that

279
00:14:05,230 --> 00:14:06,850
doesn't even require any wired

280
00:14:06,850 --> 00:14:09,220
connection so you don't have to plug it

281
00:14:09,220 --> 00:14:11,920
in anywhere it will just use bluetooth

282
00:14:11,920 --> 00:14:14,230
and and the thing called that Bluetooth

283
00:14:14,230 --> 00:14:16,059
which hasn't gonna be demoing you in a

284
00:14:16,059 --> 00:14:19,300
short while if we still have time for it

285
00:14:19,300 --> 00:14:24,069
so what's the interesting in the India

286
00:14:24,069 --> 00:14:26,470
screener so how they did it so the S

287
00:14:26,470 --> 00:14:29,110
Perino actually runs your JavaScript

288
00:14:29,110 --> 00:14:32,620
code on the device even more so it

289
00:14:32,620 --> 00:14:34,839
actually transfers the whole source code

290
00:14:34,839 --> 00:14:37,779
onto the device and runs your JavaScript

291
00:14:37,779 --> 00:14:40,600
code by interpreting it from out of the

292
00:14:40,600 --> 00:14:42,579
source there are a lot of reasons might

293
00:14:42,579 --> 00:14:45,970
doesn't convert to an est ast or si and

294
00:14:45,970 --> 00:14:48,399
I think like that you'll find that on

295
00:14:48,399 --> 00:14:51,339
the Esprit no explanation page but where

296
00:14:51,339 --> 00:14:53,170
is more important and more interesting

297
00:14:53,170 --> 00:14:56,620
is what are the implications of running

298
00:14:56,620 --> 00:14:59,360
JavaScript from the source on a tiny

299
00:14:59,360 --> 00:15:02,450
controller now these are a few megahertz

300
00:15:02,450 --> 00:15:06,980
that the processors in these devices are

301
00:15:06,980 --> 00:15:09,560
few megahertz and the memories of these

302
00:15:09,560 --> 00:15:12,320
devices are few kilobytes the flash

303
00:15:12,320 --> 00:15:14,930
program usually doesn't exceed a few

304
00:15:14,930 --> 00:15:16,940
tenths or a few hundreds of kilobytes so

305
00:15:16,940 --> 00:15:19,220
you're very resource constrained when

306
00:15:19,220 --> 00:15:21,140
you are running your code on such a

307
00:15:21,140 --> 00:15:23,180
resource-constrained device from the

308
00:15:23,180 --> 00:15:25,880
source what happens is you're gonna be

309
00:15:25,880 --> 00:15:28,010
interpreting and reading back the

310
00:15:28,010 --> 00:15:30,320
JavaScript code from the source so what

311
00:15:30,320 --> 00:15:32,660
that means and what that effect usually

312
00:15:32,660 --> 00:15:37,459
results in how you flash a lad LED is

313
00:15:37,459 --> 00:15:39,589
basically you turn it on you wait a

314
00:15:39,589 --> 00:15:41,959
little and then you turn it off you can

315
00:15:41,959 --> 00:15:44,149
even control the intensity of the light

316
00:15:44,149 --> 00:15:47,380
by very fast turning it on and off again

317
00:15:47,380 --> 00:15:51,610
this is called pulse width modulation

318
00:15:51,610 --> 00:15:55,570
basically on these devices the very

319
00:15:55,570 --> 00:15:58,310
white space that you live in your code

320
00:15:58,310 --> 00:16:01,850
affect how fast your code will run so if

321
00:16:01,850 --> 00:16:04,160
you're gonna leave a bunch of spaces

322
00:16:04,160 --> 00:16:06,649
like you can see on the bottom in your

323
00:16:06,649 --> 00:16:09,140
source code the microcontroller has to

324
00:16:09,140 --> 00:16:11,510
read the bytes to be able to import

325
00:16:11,510 --> 00:16:13,459
interpret your code so the

326
00:16:13,459 --> 00:16:16,089
microcontroller will execute your code

327
00:16:16,089 --> 00:16:19,430
slower than it would be if you would

328
00:16:19,430 --> 00:16:22,040
have ditched the white space and this is

329
00:16:22,040 --> 00:16:24,920
the implication of you know reading the

330
00:16:24,920 --> 00:16:27,140
source code and executing it on the fly

331
00:16:27,140 --> 00:16:29,600
which is you know we have been grown to

332
00:16:29,600 --> 00:16:32,720
use a lot of like JIT compilers and a

333
00:16:32,720 --> 00:16:35,390
cone running from a sts but this was the

334
00:16:35,390 --> 00:16:36,980
olden days this was how JavaScript

335
00:16:36,980 --> 00:16:41,180
originally I think almost 25 years ago

336
00:16:41,180 --> 00:16:44,480
or 20 years ago it was conceived it was

337
00:16:44,480 --> 00:16:46,490
interpreted and we tend to forget that

338
00:16:46,490 --> 00:16:48,949
because it just got so much faster these

339
00:16:48,949 --> 00:16:51,620
days and you are gonna say you know yeah

340
00:16:51,620 --> 00:16:53,149
so what so there is this quirky

341
00:16:53,149 --> 00:16:55,250
microcontroller that do is there's silly

342
00:16:55,250 --> 00:16:58,940
things because of its tiny brains what

343
00:16:58,940 --> 00:17:01,010
do I a bad developer have to do with all

344
00:17:01,010 --> 00:17:04,490
of this and the problem is have you ever

345
00:17:04,490 --> 00:17:08,329
heard of the function inlining

346
00:17:08,329 --> 00:17:11,150
practices practiced by nodejs or

347
00:17:11,150 --> 00:17:15,230
attention more specifically so what it

348
00:17:15,230 --> 00:17:18,470
does modest fingers and I heard this at

349
00:17:18,470 --> 00:17:20,870
my very first conference two or three

350
00:17:20,870 --> 00:17:23,810
years or almost three years ago my very

351
00:17:23,810 --> 00:17:25,640
first international conference I was

352
00:17:25,640 --> 00:17:29,150
blown away because apparently the v8

353
00:17:29,150 --> 00:17:31,640
engine which is used in node.js but also

354
00:17:31,640 --> 00:17:36,650
in Chrome in a earlier iteration in its

355
00:17:36,650 --> 00:17:41,000
turbo and it's a crankshaft compiler

356
00:17:41,000 --> 00:17:44,030
what it did it chose to inline some

357
00:17:44,030 --> 00:17:47,210
functions in lining a function means you

358
00:17:47,210 --> 00:17:50,960
you inline some code in a place when you

359
00:17:50,960 --> 00:17:54,620
compile it and choose to do that based

360
00:17:54,620 --> 00:17:56,930
on the source code for a size of the

361
00:17:56,930 --> 00:17:59,720
function so the problem is when you have

362
00:17:59,720 --> 00:18:05,000
a function that has a has some comments

363
00:18:05,000 --> 00:18:08,530
in it they count into the source code so

364
00:18:08,530 --> 00:18:11,510
the this there is a blog post on this

365
00:18:11,510 --> 00:18:13,420
you can read it so what it basically

366
00:18:13,420 --> 00:18:17,840
resulted in you had your function if it

367
00:18:17,840 --> 00:18:20,630
was changed by a tiny bit even though it

368
00:18:20,630 --> 00:18:23,390
was change only in the comments and it

369
00:18:23,390 --> 00:18:26,210
grew over the 600 character 600 byte

370
00:18:26,210 --> 00:18:30,710
size note stopped inlining that function

371
00:18:30,710 --> 00:18:34,160
and your code will run much slower so

372
00:18:34,160 --> 00:18:37,160
you can see there could be a factor of

373
00:18:37,160 --> 00:18:40,030
key difference between the two runs and

374
00:18:40,030 --> 00:18:42,650
you know I was like oh this is crazy

375
00:18:42,650 --> 00:18:45,020
I wonder if this still exists so I have

376
00:18:45,020 --> 00:18:46,910
a very good fan working on the VA team

377
00:18:46,910 --> 00:18:51,080
Benedict who I was hey how is this thing

378
00:18:51,080 --> 00:18:54,590
is this fixed by now you know it's been

379
00:18:54,590 --> 00:18:57,080
almost three years ago he was like yeah

380
00:18:57,080 --> 00:18:59,420
it was fixed by you know switching out

381
00:18:59,420 --> 00:19:01,160
the crankshaft compiler to the new

382
00:19:01,160 --> 00:19:04,880
turbofan one and I was there is a good

383
00:19:04,880 --> 00:19:06,620
presentation at Jazz Congress about

384
00:19:06,620 --> 00:19:10,520
what's new in in turbofan it's a it it's

385
00:19:10,520 --> 00:19:12,530
very good and it's used in nodejs

386
00:19:12,530 --> 00:19:16,010
version eight which is a LTS version of

387
00:19:16,010 --> 00:19:19,580
no GS so if you are no date on and on

388
00:19:19,580 --> 00:19:22,010
the latest chrome you will be using

389
00:19:22,010 --> 00:19:23,389
turbofan and crank

390
00:19:23,389 --> 00:19:26,509
is deprecated and being removed but even

391
00:19:26,509 --> 00:19:29,989
then turbo Fang doesn't care about the

392
00:19:29,989 --> 00:19:31,879
source size so your comments doesn't

393
00:19:31,879 --> 00:19:34,099
matter but there are of course still

394
00:19:34,099 --> 00:19:36,529
limits like the bytecode size of your

395
00:19:36,529 --> 00:19:39,320
code so the performance value of your

396
00:19:39,320 --> 00:19:41,269
code is still limited by the code size

397
00:19:41,269 --> 00:19:44,149
or the size of your functions even in

398
00:19:44,149 --> 00:19:46,459
turbofan now I'm not saying everybody

399
00:19:46,459 --> 00:19:48,559
should micro queue - and I'm not saying

400
00:19:48,559 --> 00:19:50,809
everybody should you know know de very

401
00:19:50,809 --> 00:19:52,999
intricate internals of the older

402
00:19:52,999 --> 00:19:54,529
JavaScript engines and all their

403
00:19:54,529 --> 00:19:58,669
optimizations on contrary justice

404
00:19:58,669 --> 00:20:02,749
Benedict mourns in his talk I'm warning

405
00:20:02,749 --> 00:20:04,759
you as well to not do that I'm just

406
00:20:04,759 --> 00:20:07,129
saying that it doesn't hurt you know all

407
00:20:07,129 --> 00:20:09,739
of these things and be aware it makes

408
00:20:09,739 --> 00:20:11,570
you better programmer even if you're not

409
00:20:11,570 --> 00:20:13,549
you know playing video hobby electronics

410
00:20:13,549 --> 00:20:16,399
in the first place so we have talked

411
00:20:16,399 --> 00:20:19,190
talked about v8 but there is a thing

412
00:20:19,190 --> 00:20:22,159
called v7 it sounds like a very good pun

413
00:20:22,159 --> 00:20:25,940
but it isn't actually a JavaScript

414
00:20:25,940 --> 00:20:28,789
engine aimed at microcontrollers it was

415
00:20:28,789 --> 00:20:31,359
created by Santa for the microcontroller

416
00:20:31,359 --> 00:20:35,359
platform and it's a company created by

417
00:20:35,359 --> 00:20:37,669
ex Googlers in Ireland so they know

418
00:20:37,669 --> 00:20:40,639
they're their things and they created a

419
00:20:40,639 --> 00:20:44,029
is a meta JavaScript engine that could

420
00:20:44,029 --> 00:20:46,039
be put onto the very small brains of a

421
00:20:46,039 --> 00:20:50,149
microcontroller it's you know it's 40 to

422
00:20:50,149 --> 00:20:54,379
100 kilobytes in size like the compile

423
00:20:54,379 --> 00:20:56,359
size like in comparison

424
00:20:56,359 --> 00:20:58,759
I think v8 has multiple tens of

425
00:20:58,759 --> 00:21:02,179
megabytes these days and even uses even

426
00:21:02,179 --> 00:21:05,659
more even less memory like orders of

427
00:21:05,659 --> 00:21:09,139
magnitude less memory than a v8 does and

428
00:21:09,139 --> 00:21:12,079
it's es 5.1 component which is you know

429
00:21:12,079 --> 00:21:13,789
very hard to tell about all the other

430
00:21:13,789 --> 00:21:17,749
engines yes purino is getting there but

431
00:21:17,749 --> 00:21:19,279
ver initially they had very poor

432
00:21:19,279 --> 00:21:22,789
standard support and it has reasons so

433
00:21:22,789 --> 00:21:28,879
well v8 not a J's engine it it not is

434
00:21:28,879 --> 00:21:31,190
but it more like was it was deprecated a

435
00:21:31,190 --> 00:21:33,179
few months ago

436
00:21:33,179 --> 00:21:37,529
in favor of MJS and what they did it's

437
00:21:37,529 --> 00:21:40,889
Assunta that said 40 to 40 to 120

438
00:21:40,889 --> 00:21:42,960
kilobytes that's still too big we have

439
00:21:42,960 --> 00:21:45,690
to go smaller so what they did is they

440
00:21:45,690 --> 00:21:49,679
created MJS which is a restricted

441
00:21:49,679 --> 00:21:52,139
JavaScript engine you could say it's a

442
00:21:52,139 --> 00:21:54,570
JavaScript chops an engine because when

443
00:21:54,570 --> 00:21:57,659
you are gonna go like to below the tens

444
00:21:57,659 --> 00:22:00,509
of kilobytes you're gonna say hey we're

445
00:22:00,509 --> 00:22:02,789
gonna get rid of some some features and

446
00:22:02,789 --> 00:22:04,950
when you're doing this on the web you

447
00:22:04,950 --> 00:22:07,849
cannot really break the web right so

448
00:22:07,849 --> 00:22:10,499
you're not allowed to do that on the web

449
00:22:10,499 --> 00:22:11,989
but alone when you're programming

450
00:22:11,989 --> 00:22:14,429
microcontrollers which the primary

451
00:22:14,429 --> 00:22:17,309
concerns of our you know downloading and

452
00:22:17,309 --> 00:22:20,549
pinging server data and J salts and you

453
00:22:20,549 --> 00:22:24,929
know connecting to other devices by IO

454
00:22:24,929 --> 00:22:29,039
ports they don't really need a regular

455
00:22:29,039 --> 00:22:32,129
expression support or for example unique

456
00:22:32,129 --> 00:22:34,799
full Unicode support what they need is

457
00:22:34,799 --> 00:22:38,269
long lifetime long battery life and easy

458
00:22:38,269 --> 00:22:41,940
programmability modules is interfacing

459
00:22:41,940 --> 00:22:44,820
with the with the underlying system so

460
00:22:44,820 --> 00:22:48,239
they made this restrictions part of the

461
00:22:48,239 --> 00:22:51,089
language itself and it gets closed its

462
00:22:51,089 --> 00:22:54,509
25 kilobytes even the smallest or dinos

463
00:22:54,509 --> 00:22:57,149
are equipped with 30 kilobytes of RAM

464
00:22:57,149 --> 00:22:59,609
which doesn't leave you a lot of space

465
00:22:59,609 --> 00:23:01,649
to put your actual programs on but you

466
00:23:01,649 --> 00:23:03,450
know it gets close and we'll happily

467
00:23:03,450 --> 00:23:05,820
live on a bunch of other a bunch of

468
00:23:05,820 --> 00:23:10,559
devices there was one very large company

469
00:23:10,559 --> 00:23:12,419
who tried to do this and create a

470
00:23:12,419 --> 00:23:16,950
JavaScript soft set language that

471
00:23:16,950 --> 00:23:19,769
pictures from the Samsung open the

472
00:23:19,769 --> 00:23:26,159
Samsung's presentation from 2014 at the

473
00:23:26,159 --> 00:23:29,849
tc39 which is the group that cares about

474
00:23:29,849 --> 00:23:32,549
the improvements of the JavaScript

475
00:23:32,549 --> 00:23:34,460
language and I expect my spirit language

476
00:23:34,460 --> 00:23:36,929
they presented hey we want to do a

477
00:23:36,929 --> 00:23:38,880
JavaScript

478
00:23:38,880 --> 00:23:42,030
subset language officially and they got

479
00:23:42,030 --> 00:23:44,040
a huge backlash because everybody's told

480
00:23:44,040 --> 00:23:47,130
it was not it's not okay to do it cannot

481
00:23:47,130 --> 00:23:49,560
be done you're gonna be losing too much

482
00:23:49,560 --> 00:23:50,940
it's not worth it

483
00:23:50,940 --> 00:23:54,060
they didn't give up that easy so what

484
00:23:54,060 --> 00:23:56,610
they did is started some explorations

485
00:23:56,610 --> 00:24:00,090
they started with the engine the open

486
00:24:00,090 --> 00:24:02,670
source JavaScript core engine powering

487
00:24:02,670 --> 00:24:06,830
most of the WebKit browsers and the

488
00:24:06,830 --> 00:24:09,450
miniature JavaScript engine duck tape

489
00:24:09,450 --> 00:24:12,150
and try to figure out if they could make

490
00:24:12,150 --> 00:24:14,010
it small enough to fit into a

491
00:24:14,010 --> 00:24:16,170
microcontroller and they found out that

492
00:24:16,170 --> 00:24:18,060
the duct tape was small enough but

493
00:24:18,060 --> 00:24:19,800
eventually they went with their own the

494
00:24:19,800 --> 00:24:22,560
thing that's called gyroscope

495
00:24:22,560 --> 00:24:27,630
Jerry script is actually one of the best

496
00:24:27,630 --> 00:24:30,090
tiny JavaScript engines in these days

497
00:24:30,090 --> 00:24:33,240
and they actually open sourced it that

498
00:24:33,240 --> 00:24:36,090
helped a lot to get a system I'm going

499
00:24:36,090 --> 00:24:38,160
to be showing you some examples very

500
00:24:38,160 --> 00:24:40,590
soon about George cut so here's the

501
00:24:40,590 --> 00:24:42,720
thing it could fly you could flash this

502
00:24:42,720 --> 00:24:46,740
onto less than 200 km flash and it runs

503
00:24:46,740 --> 00:24:50,040
there about 40 64 kilobytes of memory so

504
00:24:50,040 --> 00:24:52,440
it's not the tiniest one but it comes

505
00:24:52,440 --> 00:24:54,600
with es5 support heavy really optimized

506
00:24:54,600 --> 00:24:59,010
and and very well usable the fact that

507
00:24:59,010 --> 00:25:01,800
is very well usable comes from the fact

508
00:25:01,800 --> 00:25:04,470
that even BBC micro bet has adapted it

509
00:25:04,470 --> 00:25:07,830
and a bunch of erm devices the BBC micro

510
00:25:07,830 --> 00:25:11,400
bet is a small educational device that

511
00:25:11,400 --> 00:25:14,400
every seventh grader in the UK gets for

512
00:25:14,400 --> 00:25:17,940
free to learn about computers so this is

513
00:25:17,940 --> 00:25:19,800
the device itself and because you are

514
00:25:19,800 --> 00:25:21,540
not gonna be seeing it like that let's

515
00:25:21,540 --> 00:25:31,730
see if we can I get this working

516
00:25:31,740 --> 00:25:49,409
no let me just related this and

517
00:25:49,409 --> 00:25:53,720
I'll be again there you go so let's

518
00:25:53,720 --> 00:25:58,919
focus no peeking

519
00:25:58,919 --> 00:26:00,600
you will see all the other devices so

520
00:26:00,600 --> 00:26:02,460
yes this is this big and you could tell

521
00:26:02,460 --> 00:26:04,169
it's an educational device because it

522
00:26:04,169 --> 00:26:07,169
has no pins and no whatsoever it has

523
00:26:07,169 --> 00:26:09,419
very flat edges so you can give it to a

524
00:26:09,419 --> 00:26:11,279
seventh grader and they're not gonna

525
00:26:11,279 --> 00:26:13,710
kill anybody with it except if they are

526
00:26:13,710 --> 00:26:17,130
very crafty which seventh graders are

527
00:26:17,130 --> 00:26:19,250
mostly are so they are screwed anyway

528
00:26:19,250 --> 00:26:22,200
but if you wanted to do more Hardware

529
00:26:22,200 --> 00:26:23,940
stuff on this you could just add a

530
00:26:23,940 --> 00:26:26,880
little expansion board this will just

531
00:26:26,880 --> 00:26:29,580
snap right in and you can just plug your

532
00:26:29,580 --> 00:26:31,649
devices onto it so it's very good for

533
00:26:31,649 --> 00:26:33,960
prototyping as well and it has a bunch

534
00:26:33,960 --> 00:26:36,149
of features built in that are not gonna

535
00:26:36,149 --> 00:26:37,770
be mentioning now but you can ask me

536
00:26:37,770 --> 00:26:40,440
about later all right let me see if this

537
00:26:40,440 --> 00:26:44,159
works what made it even better is that

538
00:26:44,159 --> 00:26:47,010
they they created a very special editor

539
00:26:47,010 --> 00:26:47,580
for it

540
00:26:47,580 --> 00:26:50,220
this device also runs JavaScript on it

541
00:26:50,220 --> 00:26:54,110
it actually runs DJ script compiler

542
00:26:54,110 --> 00:26:58,230
language engine on that but what you

543
00:26:58,230 --> 00:27:01,080
could do is you could actually use this

544
00:27:01,080 --> 00:27:04,590
web IDE again you know still the idea of

545
00:27:04,590 --> 00:27:07,470
the ASP now there is a web page you can

546
00:27:07,470 --> 00:27:13,950
go to I can actually just go there that

547
00:27:13,950 --> 00:27:17,130
is basically this online editor and it

548
00:27:17,130 --> 00:27:23,700
has a emulator on it but it also has

549
00:27:23,700 --> 00:27:26,010
this block thing that you can just

550
00:27:26,010 --> 00:27:27,990
puzzle together some code that is easy

551
00:27:27,990 --> 00:27:29,610
to understand you don't have to write

552
00:27:29,610 --> 00:27:32,669
anything and then you can see that it

553
00:27:32,669 --> 00:27:34,260
actually translates to a basic

554
00:27:34,260 --> 00:27:37,380
JavaScript and this is used to teach

555
00:27:37,380 --> 00:27:40,139
people that web development and and

556
00:27:40,139 --> 00:27:43,380
hardware development in the first place

557
00:27:43,380 --> 00:27:47,120
from as early as seventh grade or even

558
00:27:47,120 --> 00:27:51,840
less so that was a another JavaScript

559
00:27:51,840 --> 00:27:54,150
conference in 2015

560
00:27:54,150 --> 00:27:58,530
this is Jes conf 15 ironically this

561
00:27:58,530 --> 00:28:01,110
looks also like Jays Cove is which is

562
00:28:01,110 --> 00:28:04,140
Jay's confess land and ironically this

563
00:28:04,140 --> 00:28:05,940
presentation actually took place on both

564
00:28:05,940 --> 00:28:09,300
conferences this is hey come parents

565
00:28:09,300 --> 00:28:11,990
who've worked at the time for pebble and

566
00:28:11,990 --> 00:28:14,550
pebble put together something their

567
00:28:14,550 --> 00:28:16,970
watches actually use javascript as well

568
00:28:16,970 --> 00:28:19,560
they actually put together pebble juice

569
00:28:19,560 --> 00:28:22,710
or rocky J us to run their run on their

570
00:28:22,710 --> 00:28:26,640
watches and so I'm gonna see if I can

571
00:28:26,640 --> 00:28:28,880
show you so this is a Pebble watch and

572
00:28:28,880 --> 00:28:31,710
the actual watch face you are seeing and

573
00:28:31,710 --> 00:28:34,020
a bunch of other watch faces are created

574
00:28:34,020 --> 00:28:36,870
using html5 and JavaScript you'll find

575
00:28:36,870 --> 00:28:39,270
that presentation it's quite fascinating

576
00:28:39,270 --> 00:28:42,240
in the links as well the interesting

577
00:28:42,240 --> 00:28:44,910
part of this what they did okay we're

578
00:28:44,910 --> 00:28:46,770
gonna use Jerry script we're gonna put

579
00:28:46,770 --> 00:28:49,080
this onto the device and we're not gonna

580
00:28:49,080 --> 00:28:52,110
sleep until this goes just exactly the

581
00:28:52,110 --> 00:28:54,930
same performance written in JavaScript

582
00:28:54,930 --> 00:28:57,390
as it goes in in C and you would think

583
00:28:57,390 --> 00:28:59,280
that's not possible that but that's

584
00:28:59,280 --> 00:29:00,810
actually very much possible

585
00:29:00,810 --> 00:29:03,330
they are running the thirty-nine lines

586
00:29:03,330 --> 00:29:09,090
of code of the JavaScript watch face on

587
00:29:09,090 --> 00:29:11,040
the same device on the same performance

588
00:29:11,040 --> 00:29:15,660
same battery barrel usage in the exact

589
00:29:15,660 --> 00:29:18,780
same place replacing they nobody

590
00:29:18,780 --> 00:29:20,730
actually noticed they haven't announced

591
00:29:20,730 --> 00:29:22,470
that they are replacing the watch face

592
00:29:22,470 --> 00:29:25,950
with a one written in JavaScript and you

593
00:29:25,950 --> 00:29:29,130
know 230 lights of seeker goodbye

594
00:29:29,130 --> 00:29:31,500
well comforting nine lines of JavaScript

595
00:29:31,500 --> 00:29:33,630
code that's equally performant running

596
00:29:33,630 --> 00:29:37,290
on a watch and you're like okay okay but

597
00:29:37,290 --> 00:29:40,290
my watch pebble has gone bankrupt but

598
00:29:40,290 --> 00:29:42,210
actually the technology is not lost

599
00:29:42,210 --> 00:29:44,520
actually because Fitbit bought the

600
00:29:44,520 --> 00:29:46,410
company mostly for the intellectual

601
00:29:46,410 --> 00:29:48,480
property so when they came out with

602
00:29:48,480 --> 00:29:50,790
their own SmartWatch offering they

603
00:29:50,790 --> 00:29:53,730
actually stole the idea while they

604
00:29:53,730 --> 00:29:56,600
bought the idea first so

605
00:29:56,600 --> 00:29:58,340
I'm going to show you that amount of

606
00:29:58,340 --> 00:29:59,840
time but also I'm gonna show you my

607
00:29:59,840 --> 00:30:02,330
Fitbit watch and I was joking on Twitter

608
00:30:02,330 --> 00:30:04,370
but I was asking about this that if I

609
00:30:04,370 --> 00:30:05,780
don't sleep I'm gonna show you a demo

610
00:30:05,780 --> 00:30:08,020
even well I didn't actually end up

611
00:30:08,020 --> 00:30:10,940
showing anything useful but here is the

612
00:30:10,940 --> 00:30:12,560
application that I made with a few lines

613
00:30:12,560 --> 00:30:16,580
of JavaScript and at web api's it says

614
00:30:16,580 --> 00:30:19,280
you know accelerometer barometer heart

615
00:30:19,280 --> 00:30:20,510
rate he is gonna faint

616
00:30:20,510 --> 00:30:25,640
stuff like that you are running

617
00:30:25,640 --> 00:30:27,710
JavaScript on a watch that could stay

618
00:30:27,710 --> 00:30:31,040
with a single charge stay charged for a

619
00:30:31,040 --> 00:30:34,070
whole week and you know people are

620
00:30:34,070 --> 00:30:36,770
people are asking you know this

621
00:30:36,770 --> 00:30:39,830
javascript is a toy language right so

622
00:30:39,830 --> 00:30:43,010
okay so what I have been up to Dan these

623
00:30:43,010 --> 00:30:45,350
are all nice and this should give you a

624
00:30:45,350 --> 00:30:47,780
lot of improvement you know the state of

625
00:30:47,780 --> 00:30:50,810
JavaScript on hardware I've been up to a

626
00:30:50,810 --> 00:30:52,730
bunch of things and I mean I would like

627
00:30:52,730 --> 00:30:56,960
to show you some of those in some of

628
00:30:56,960 --> 00:31:01,160
those things in a short demo I here 2008

629
00:31:01,160 --> 00:31:03,800
is gonna be the Europe declared I'm also

630
00:31:03,800 --> 00:31:05,600
hearing this for like probably five

631
00:31:05,600 --> 00:31:09,200
years now so okay we have shown you a

632
00:31:09,200 --> 00:31:11,120
bunch of devices but how do you put

633
00:31:11,120 --> 00:31:13,550
JavaScript on this device does anyone

634
00:31:13,550 --> 00:31:14,860
know what's this

635
00:31:14,860 --> 00:31:17,300
there is a there is a microcontroller on

636
00:31:17,300 --> 00:31:20,300
the Left so that one is a

637
00:31:20,300 --> 00:31:26,570
microcontroller well let me show you if

638
00:31:26,570 --> 00:31:42,080
I may

639
00:31:42,090 --> 00:31:50,980
to do so gonna die oh I always die the

640
00:31:50,980 --> 00:31:55,390
first time ah so what is that right you

641
00:31:55,390 --> 00:31:56,140
may ask

642
00:31:56,140 --> 00:32:00,580
so that thing is called an Arduino on

643
00:32:00,580 --> 00:32:01,750
the left you can see that the

644
00:32:01,750 --> 00:32:03,550
microcontroller it's basically just

645
00:32:03,550 --> 00:32:05,650
hooked up by a bunch of wires into your

646
00:32:05,650 --> 00:32:08,530
screen and LCD screen or LED screen

647
00:32:08,530 --> 00:32:13,060
buzzer and some buttons this finger

648
00:32:13,060 --> 00:32:15,400
actually is running a C code so this

649
00:32:15,400 --> 00:32:18,070
device has maybe 30 Q kilobytes of flash

650
00:32:18,070 --> 00:32:21,040
memory kilobytes that is two and a half

651
00:32:21,040 --> 00:32:25,150
kilobytes of memory and a 16 megahertz

652
00:32:25,150 --> 00:32:28,150
8-bit processor so it's not the fastest

653
00:32:28,150 --> 00:32:31,690
device on earth that was made what's

654
00:32:31,690 --> 00:32:35,050
interesting about this thing is that

655
00:32:35,050 --> 00:32:38,110
actually you can run JavaScript on it it

656
00:32:38,110 --> 00:32:40,630
takes a few tricks but you can actually

657
00:32:40,630 --> 00:32:44,710
do it and I don't think oh I think I

658
00:32:44,710 --> 00:32:48,040
have maybe a bit more time to show you a

659
00:32:48,040 --> 00:32:50,710
few things and after this talk and

660
00:32:50,710 --> 00:32:52,480
throughout so tomorrow I'm gonna be

661
00:32:52,480 --> 00:32:56,290
demoing cloud oh boy if somebody signed

662
00:32:56,290 --> 00:32:58,060
up for my workshop you're gonna seeing a

663
00:32:58,060 --> 00:33:00,340
lot more of this and if you're curious

664
00:33:00,340 --> 00:33:02,380
and you're not signed up to the workshop

665
00:33:02,380 --> 00:33:03,760
you can find me in the Mozilla booth

666
00:33:03,760 --> 00:33:06,280
today and - and on Saturday as well and

667
00:33:06,280 --> 00:33:08,440
they're happy to answer any questions

668
00:33:08,440 --> 00:33:10,270
you may have about cloud oh boy and

669
00:33:10,270 --> 00:33:12,220
everything else but also you can try

670
00:33:12,220 --> 00:33:13,930
some of these devices that I'm gonna be

671
00:33:13,930 --> 00:33:16,600
showing you so cloudy boy is basically

672
00:33:16,600 --> 00:33:20,350
an online editor for games it has a

673
00:33:20,350 --> 00:33:22,390
bunch of components but what makes it

674
00:33:22,390 --> 00:33:25,900
most interesting is that it lets you

675
00:33:25,900 --> 00:33:28,690
create pixel graphic art and games and

676
00:33:28,690 --> 00:33:32,470
then lets you put that put those games

677
00:33:32,470 --> 00:33:35,110
up on the internet because you can share

678
00:33:35,110 --> 00:33:36,850
them because they're just JavaScript and

679
00:33:36,850 --> 00:33:40,000
html5 canvas but you can also put that

680
00:33:40,000 --> 00:33:41,890
onto microcontroller devices like this

681
00:33:41,890 --> 00:33:46,880
one so you know this cobbled together

682
00:33:46,880 --> 00:33:51,110
mess is not very exciting how about this

683
00:33:51,110 --> 00:33:54,110
one this is called the order boy this is

684
00:33:54,110 --> 00:33:56,149
the exact same device with the exact

685
00:33:56,149 --> 00:33:58,399
same components on the right hand side

686
00:33:58,399 --> 00:34:00,889
you can see the little tiny microchip

687
00:34:00,889 --> 00:34:02,720
that is the same as the Arduino is

688
00:34:02,720 --> 00:34:05,750
microchip some buttons and the screen

689
00:34:05,750 --> 00:34:08,510
and a hidden buzzer in the back just you

690
00:34:08,510 --> 00:34:12,819
know looks a lot nicer and you can

691
00:34:12,819 --> 00:34:15,859
create games for this microcontroller or

692
00:34:15,859 --> 00:34:17,480
how about this one

693
00:34:17,480 --> 00:34:21,740
the tiny arcade how about this is

694
00:34:21,740 --> 00:34:23,839
actually a much faster processor it's a

695
00:34:23,839 --> 00:34:26,720
32-bit ARM processor and a colored

696
00:34:26,720 --> 00:34:30,470
screen and because I'm not here to show

697
00:34:30,470 --> 00:34:35,210
you pictures I'm here to show you games

698
00:34:35,210 --> 00:34:40,429
actually so we have horrible glare but

699
00:34:40,429 --> 00:34:42,470
you can buy probably a maybe able to see

700
00:34:42,470 --> 00:34:44,569
the jas kana let me just zoom in a bit

701
00:34:44,569 --> 00:34:48,639
and alright

702
00:34:48,639 --> 00:34:53,899
gorgeous so come Jeschke invasion this

703
00:34:53,899 --> 00:34:56,030
game itself when I was last time here in

704
00:34:56,030 --> 00:34:59,119
November - we were sitting in Thomas and

705
00:34:59,119 --> 00:35:01,339
doing a verse shop he put together a

706
00:35:01,339 --> 00:35:03,470
picross game in maybe two and a half

707
00:35:03,470 --> 00:35:05,990
hours with cloudy boy and it took me a

708
00:35:05,990 --> 00:35:08,500
bit of time to to fix some of the bugs

709
00:35:08,500 --> 00:35:12,500
but then after the pikers game was

710
00:35:12,500 --> 00:35:15,980
compiled automatically to run on this

711
00:35:15,980 --> 00:35:18,470
device so what means you create their

712
00:35:18,470 --> 00:35:20,839
game on the Obey browser and then you

713
00:35:20,839 --> 00:35:22,700
can you can put it onto your

714
00:35:22,700 --> 00:35:32,060
microcontroller device yep and I have a

715
00:35:32,060 --> 00:35:35,480
bunch of things that I had to skip skip

716
00:35:35,480 --> 00:35:38,060
over so if you want to talk about those

717
00:35:38,060 --> 00:35:39,980
things you can find me on Twitter at SL

718
00:35:39,980 --> 00:35:42,890
softworks and if you want to hear more

719
00:35:42,890 --> 00:35:45,050
about you know how to put games onto

720
00:35:45,050 --> 00:35:47,839
microcontrollers you can follow at cloud

721
00:35:47,839 --> 00:35:49,400
boy

722
00:35:49,400 --> 00:35:52,520
and your job by them as a booth or the

723
00:35:52,520 --> 00:35:56,020
workshop tomorrow thank you very much

724
00:35:56,020 --> 00:36:05,930
[Applause]

