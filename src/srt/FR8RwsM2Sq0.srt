1
00:00:08,809 --> 00:00:11,219

thank you very much is very exciting to

2
00:00:11,219 --> 00:00:16,470
be here in Berlin so it's a beautiful

3
00:00:16,470 --> 00:00:18,869
world we live in I grew up cutting my

4
00:00:18,869 --> 00:00:21,689
teeth on shrink wrap software where if

5
00:00:21,689 --> 00:00:23,970
you found a bug and occasionally I would

6
00:00:23,970 --> 00:00:27,420
write code with bugs in it you would

7
00:00:27,420 --> 00:00:30,420
have to wait until the next release in 3

8
00:00:30,420 --> 00:00:33,150
6 12 months to get that bug fix out or

9
00:00:33,150 --> 00:00:34,680
you'd have to ask all your develop your

10
00:00:34,680 --> 00:00:38,699
users to download a patch and you know

11
00:00:38,699 --> 00:00:41,219
that just didn't exist in the 80s and

12
00:00:41,219 --> 00:00:45,360
90s early 90s so in one sense the web

13
00:00:45,360 --> 00:00:47,280
has given us this beautiful world where

14
00:00:47,280 --> 00:00:50,250
we can work on stuff and and make fixes

15
00:00:50,250 --> 00:00:53,280
and do pushes on a daily hourly maybe

16
00:00:53,280 --> 00:00:57,510
even by minute basis but where we've

17
00:00:57,510 --> 00:00:59,879
also entered this minefield this

18
00:00:59,879 --> 00:01:03,420
battlefield where what we really want if

19
00:01:03,420 --> 00:01:05,399
you think about it the idea of pushing

20
00:01:05,399 --> 00:01:09,539
programs at you know apps at that

21
00:01:09,539 --> 00:01:13,950
frequency to everyone in the world is a

22
00:01:13,950 --> 00:01:16,890
very challenging problem and it's

23
00:01:16,890 --> 00:01:19,080
especially challenging because we don't

24
00:01:19,080 --> 00:01:21,930
want any monolithic organization like

25
00:01:21,930 --> 00:01:25,590
Microsoft or Adobe or Google to run that

26
00:01:25,590 --> 00:01:27,900
entire environment and ensure its

27
00:01:27,900 --> 00:01:30,150
quality and integrity so we're trying to

28
00:01:30,150 --> 00:01:34,830
do this in a very distributed way an

29
00:01:34,830 --> 00:01:38,100
open-source way and that's the cause of

30
00:01:38,100 --> 00:01:39,750
many of the problems that we've been

31
00:01:39,750 --> 00:01:43,520
talking about this weekend

32
00:01:43,520 --> 00:01:47,630
inconsistencies incompatibilities so a

33
00:01:47,630 --> 00:01:50,909
primary way that we can or a primary

34
00:01:50,909 --> 00:01:52,979
weapon we can use in this battle to

35
00:01:52,979 --> 00:01:56,159
carry the metaphor is sharing the

36
00:01:56,159 --> 00:01:58,710
information and experiences and best

37
00:01:58,710 --> 00:02:03,829
practices that we have and so I want to

38
00:02:03,829 --> 00:02:08,459
give some credit to the speakers who are

39
00:02:08,459 --> 00:02:12,530
here for the conference to the attendees

40
00:02:12,530 --> 00:02:15,840
you know there's a very receptive techy

41
00:02:15,840 --> 00:02:18,120
audience that's awesome I've never seen

42
00:02:18,120 --> 00:02:19,740
I've never been at a tech

43
00:02:19,740 --> 00:02:22,410
conference where a speaker got a

44
00:02:22,410 --> 00:02:24,870
standing ovation like Ryan got just a

45
00:02:24,870 --> 00:02:26,880
little while ago that was amazing that

46
00:02:26,880 --> 00:02:31,140
shows how committed people are here both

47
00:02:31,140 --> 00:02:34,050
the speakers and the audience and then

48
00:02:34,050 --> 00:02:36,210
also to the organizers I know they're

49
00:02:36,210 --> 00:02:37,890
going to get up at the end and close

50
00:02:37,890 --> 00:02:40,500
this but and I'm sure I'm grow their

51
00:02:40,500 --> 00:02:43,830
names Yong ogre and multi for pulling

52
00:02:43,830 --> 00:02:45,120
this together for a first-time

53
00:02:45,120 --> 00:02:47,520
conference it's just amazing and I know

54
00:02:47,520 --> 00:02:49,020
when they get up they're not going to

55
00:02:49,020 --> 00:02:50,670
complement themselves and ask for a

56
00:02:50,670 --> 00:02:52,350
round of applause so I'd like to do that

57
00:02:52,350 --> 00:03:01,170
now

58
00:03:01,180 --> 00:03:07,719
oh I've got some more fun slides so I'm

59
00:03:07,719 --> 00:03:09,430
in an awkward position I was in this

60
00:03:09,430 --> 00:03:11,409
position earlier this week to I stand

61
00:03:11,409 --> 00:03:14,799
between you and the party but it's just

62
00:03:14,799 --> 00:03:16,569
not me standing between you and the

63
00:03:16,569 --> 00:03:22,959
party there's also John Rezac I'm not

64
00:03:22,959 --> 00:03:27,219
alone and and what we see here is

65
00:03:27,219 --> 00:03:29,079
something that we all need to practice

66
00:03:29,079 --> 00:03:31,900
multiple disciplines right so we all

67
00:03:31,900 --> 00:03:34,720
know that John is a JavaScript ninja and

68
00:03:34,720 --> 00:03:37,269
he's got some of that going on here but

69
00:03:37,269 --> 00:03:39,400
he's also pulled in the three stooges

70
00:03:39,400 --> 00:03:44,139
technique of the two-finger I poke right

71
00:03:44,139 --> 00:03:45,939
so two techniques often in your

72
00:03:45,939 --> 00:03:47,909
development work you're going to have to

73
00:03:47,909 --> 00:03:52,719
employ more than one thing and then

74
00:03:52,719 --> 00:03:55,359
another good buddy of mine couldn't be

75
00:03:55,359 --> 00:03:57,219
here today Dion Almer he had to leave

76
00:03:57,219 --> 00:04:00,459
but he told me that he gave me this next

77
00:04:00,459 --> 00:04:01,900
slide he said it would help me get a

78
00:04:01,900 --> 00:04:06,060
very warm reception when i did my talk I

79
00:04:06,060 --> 00:04:10,629
don't really understand he said to

80
00:04:10,629 --> 00:04:13,690
mention he's from England does that make

81
00:04:13,690 --> 00:04:16,449
it more relevant ok so let's get into

82
00:04:16,449 --> 00:04:18,400
the meat of the talk if you could

83
00:04:18,400 --> 00:04:21,549
memorize this really quick I don't want

84
00:04:21,549 --> 00:04:22,960
to litter all my slides with footnotes

85
00:04:22,960 --> 00:04:25,360
so these are all the footnotes from the

86
00:04:25,360 --> 00:04:27,340
slides and and if you do want to find

87
00:04:27,340 --> 00:04:28,960
the sources it will be pretty obvious

88
00:04:28,960 --> 00:04:31,360
where they go and I skipped over the

89
00:04:31,360 --> 00:04:33,460
first slide kind of quick but you can

90
00:04:33,460 --> 00:04:35,199
find these slides on my website right

91
00:04:35,199 --> 00:04:38,320
now Steve Souders calm so a little bit

92
00:04:38,320 --> 00:04:42,940
about me I used to work at yahoo i work

93
00:04:42,940 --> 00:04:45,909
at Google now I created why slow i wrote

94
00:04:45,909 --> 00:04:48,490
two books about web performance i taught

95
00:04:48,490 --> 00:04:50,500
a class on these books at Stanford i

96
00:04:50,500 --> 00:04:52,509
co-chair the velocity conference on web

97
00:04:52,509 --> 00:04:54,880
performance and operations I also wrote

98
00:04:54,880 --> 00:04:57,280
hammerhead kazillion sprite me and

99
00:04:57,280 --> 00:04:59,050
browser scope I'll talk about some of

100
00:04:59,050 --> 00:05:01,990
those later today i have a blog does

101
00:05:01,990 --> 00:05:07,900
anyone here read my blog ok keep the

102
00:05:07,900 --> 00:05:11,409
hands up hands up keep the hands up ok

103
00:05:11,409 --> 00:05:37,880
hold on

104
00:05:37,890 --> 00:05:40,180
someone said oh but they've already got

105
00:05:40,180 --> 00:05:42,310
the books yeah like I really believe

106
00:05:42,310 --> 00:05:43,930
everyone in the room has read the books

107
00:05:43,930 --> 00:05:46,600
yeah that was very polite of you to say

108
00:05:46,600 --> 00:05:49,210
make me believe that so I think the main

109
00:05:49,210 --> 00:05:50,770
thing that I contributed to the world of

110
00:05:50,770 --> 00:05:53,050
web performance is what I sit call

111
00:05:53,050 --> 00:05:55,030
turning it upside down turning the focus

112
00:05:55,030 --> 00:05:58,330
upside down I worked for 10 years doing

113
00:05:58,330 --> 00:06:00,190
web development on back-end

114
00:06:00,190 --> 00:06:02,320
architectures I ran to my yahoo team I

115
00:06:02,320 --> 00:06:05,110
worked on yahoo's user database before

116
00:06:05,110 --> 00:06:07,260
that I worked at lycos and who wear

117
00:06:07,260 --> 00:06:14,260
large web companies and about five years

118
00:06:14,260 --> 00:06:16,510
ago I got asked to start a performance

119
00:06:16,510 --> 00:06:18,460
group at Yahoo and that was one of the

120
00:06:18,460 --> 00:06:20,230
first times I fired up a packet sniffer

121
00:06:20,230 --> 00:06:23,320
and we've seen a lot of these waterfall

122
00:06:23,320 --> 00:06:26,110
charts so we kind of know what's going

123
00:06:26,110 --> 00:06:28,630
on here but we have a HTML document and

124
00:06:28,630 --> 00:06:30,610
then all the other requests that come

125
00:06:30,610 --> 00:06:32,950
forward here and one thing that I'd like

126
00:06:32,950 --> 00:06:34,600
to highlight here I'm not going to talk

127
00:06:34,600 --> 00:06:36,940
about too much more but if you look at

128
00:06:36,940 --> 00:06:40,990
this we consider or a lot of my work is

129
00:06:40,990 --> 00:06:42,820
on how to download stuff more quickly

130
00:06:42,820 --> 00:06:45,370
Kyle talked about that yesterday for an

131
00:06:45,370 --> 00:06:49,440
hour and if you look here this person's

132
00:06:49,440 --> 00:06:52,090
internet connection is being utilized at

133
00:06:52,090 --> 00:06:54,640
most at about it twenty percent ten or

134
00:06:54,640 --> 00:06:57,460
twenty percent of its capacity and so we

135
00:06:57,460 --> 00:06:59,680
need to do a lot of work in trying to

136
00:06:59,680 --> 00:07:01,630
get that up it'll never be a hundred

137
00:07:01,630 --> 00:07:03,730
percent but we're never going to have

138
00:07:03,730 --> 00:07:06,460
fast web at web applications until we

139
00:07:06,460 --> 00:07:08,920
start utilizing the browser's network

140
00:07:08,920 --> 00:07:10,690
connection at least at the eighty

141
00:07:10,690 --> 00:07:12,820
percent level so we've got a lot of room

142
00:07:12,820 --> 00:07:15,010
for improvement here that's why I'm very

143
00:07:15,010 --> 00:07:18,370
optimistic that the slow performance I

144
00:07:18,370 --> 00:07:20,980
experience now surfing the web is

145
00:07:20,980 --> 00:07:23,920
fixable so anyway the thing I flipped

146
00:07:23,920 --> 00:07:26,410
upside down was you know in my first ten

147
00:07:26,410 --> 00:07:27,970
years why I wanted to optimize the

148
00:07:27,970 --> 00:07:29,980
performance of a website I would focus

149
00:07:29,980 --> 00:07:32,380
on that back-end architecture and it

150
00:07:32,380 --> 00:07:35,050
turns out in here I'm unloading I google

151
00:07:35,050 --> 00:07:37,510
with an empty cache in ie7 that only

152
00:07:37,510 --> 00:07:40,660
nine percent of the overall page load

153
00:07:40,660 --> 00:07:42,790
time was the part that I was focusing on

154
00:07:42,790 --> 00:07:44,670
and maybe I could

155
00:07:44,670 --> 00:07:46,950
move that back in part ten percent if I

156
00:07:46,950 --> 00:07:49,110
was really successful so I was going to

157
00:07:49,110 --> 00:07:51,210
knock off about point nine percent of

158
00:07:51,210 --> 00:07:53,430
the low time of the page so clearly I

159
00:07:53,430 --> 00:07:55,560
wasn't focusing on the long pole in the

160
00:07:55,560 --> 00:07:57,570
tent the long pole in the tent is what i

161
00:07:57,570 --> 00:07:59,760
call this front end part and this front

162
00:07:59,760 --> 00:08:01,260
end part does include some network

163
00:08:01,260 --> 00:08:02,940
traffic maybe a little bit of server

164
00:08:02,940 --> 00:08:05,670
back in time but it turns out that these

165
00:08:05,670 --> 00:08:10,650
techniques that I evangelize can really

166
00:08:10,650 --> 00:08:12,960
have a dramatic improvement on this

167
00:08:12,960 --> 00:08:15,990
front end part and even like the network

168
00:08:15,990 --> 00:08:19,170
part isn't always the culprit so here we

169
00:08:19,170 --> 00:08:21,360
see with a prime cash there's only two

170
00:08:21,360 --> 00:08:24,060
requests the HTML document and some

171
00:08:24,060 --> 00:08:25,650
other beacon or add or something like

172
00:08:25,650 --> 00:08:27,930
that and even with everything cashed

173
00:08:27,930 --> 00:08:31,230
their page still has a long load time

174
00:08:31,230 --> 00:08:35,100
reading all of that all those resources

175
00:08:35,100 --> 00:08:38,160
from the browser cache parsing and

176
00:08:38,160 --> 00:08:40,620
applying all the CSS and JavaScript so

177
00:08:40,620 --> 00:08:43,350
what what can we do to fix that so I

178
00:08:43,350 --> 00:08:46,230
came up in why slow and in my first book

179
00:08:46,230 --> 00:08:49,130
with these 14 rules for faster web sites

180
00:08:49,130 --> 00:08:52,910
and and so I did that work mostly like

181
00:08:52,910 --> 00:08:56,490
2006-2007 and after that first book came

182
00:08:56,490 --> 00:08:58,410
out I started working and focusing more

183
00:08:58,410 --> 00:09:01,200
on on the world of web soooo and ajax in

184
00:09:01,200 --> 00:09:03,720
d HTML and so this book is much more

185
00:09:03,720 --> 00:09:06,780
focused on JavaScript and I've got some

186
00:09:06,780 --> 00:09:09,930
chapters contributed by industry experts

187
00:09:09,930 --> 00:09:12,630
like Dion and band Doug Crockford

188
00:09:12,630 --> 00:09:16,380
Nicholas akos Nicole who's here and

189
00:09:16,380 --> 00:09:18,870
talking about CSS but she and story on

190
00:09:18,870 --> 00:09:21,240
in my mind are the industry experts on

191
00:09:21,240 --> 00:09:22,890
image optimization as well so they

192
00:09:22,890 --> 00:09:24,930
contributed a chapter talking about

193
00:09:24,930 --> 00:09:34,260
images so so we have all of these best

194
00:09:34,260 --> 00:09:36,330
practices and they've been out there for

195
00:09:36,330 --> 00:09:39,300
a while but I don't know about you the

196
00:09:39,300 --> 00:09:42,450
web still feel slow to me and so popping

197
00:09:42,450 --> 00:09:44,460
up a level what is it that you know in

198
00:09:44,460 --> 00:09:46,770
your reaction and your emotional

199
00:09:46,770 --> 00:09:48,540
reaction and frustration frustration

200
00:09:48,540 --> 00:09:51,780
levels what is it that makes you feel

201
00:09:51,780 --> 00:09:53,970
like a site is slow so I have a couple

202
00:09:53,970 --> 00:09:55,860
examples here I want to

203
00:09:55,860 --> 00:09:59,550
show so i actually have videos here so I

204
00:09:59,550 --> 00:10:03,029
hit return so this is real time it's not

205
00:10:03,029 --> 00:10:09,959
slow motion and this also isn't on the

206
00:10:09,959 --> 00:10:12,300
internet here right these are videos i

207
00:10:12,300 --> 00:10:15,630
recorded at home on my comcast cable

208
00:10:15,630 --> 00:10:17,399
modem connection at 3 megabits per

209
00:10:17,399 --> 00:10:19,620
second down and that's how long it took

210
00:10:19,620 --> 00:10:23,940
to load Twitter I love Twitter now use

211
00:10:23,940 --> 00:10:31,050
it a lot but ok and this was this was

212
00:10:31,050 --> 00:10:33,000
that like I mean you know I'm it's like

213
00:10:33,000 --> 00:10:35,190
1am when I'm doing these things you know

214
00:10:35,190 --> 00:10:37,589
like it shouldn't be that slow Twitter

215
00:10:37,589 --> 00:10:40,019
it's a lovely page there's like 20

216
00:10:40,019 --> 00:10:41,339
tweets on there how can that take so

217
00:10:41,339 --> 00:10:43,740
long to load that page I think you know

218
00:10:43,740 --> 00:10:46,019
to me there's no excuse for that anyone

219
00:10:46,019 --> 00:10:47,700
who has flash in our site will like this

220
00:10:47,700 --> 00:10:49,649
one these guys actually do a pretty good

221
00:10:49,649 --> 00:10:51,360
job getting some progressive rendering

222
00:10:51,360 --> 00:10:54,480
to go but the main thing I want to see

223
00:10:54,480 --> 00:10:56,190
in the page is in the in the middle

224
00:10:56,190 --> 00:10:58,079
there and it's the last thing to come in

225
00:10:58,079 --> 00:11:00,839
right and then the poster child for slow

226
00:11:00,839 --> 00:11:07,320
websites I mean it looks like I loaded

227
00:11:07,320 --> 00:11:09,829
the page three times or something yeah

228
00:11:09,829 --> 00:11:13,230
finally it comes in so I think what

229
00:11:13,230 --> 00:11:15,209
makes these sites slow what makes sites

230
00:11:15,209 --> 00:11:17,430
feel slow it's pretty obvious one of the

231
00:11:17,430 --> 00:11:19,769
earlier speakers mentioned it is the

232
00:11:19,769 --> 00:11:21,990
lack of progressive rendering right I go

233
00:11:21,990 --> 00:11:23,970
to the page and it just takes so long

234
00:11:23,970 --> 00:11:26,190
before there's any feedback that what I

235
00:11:26,190 --> 00:11:27,959
want is actually going to be delivered

236
00:11:27,959 --> 00:11:32,459
to me so here's another so I'm starting

237
00:11:32,459 --> 00:11:35,209
to put a lot more visualizations

238
00:11:35,209 --> 00:11:37,980
graphics and video in my presentations

239
00:11:37,980 --> 00:11:39,420
because I think it makes the point

240
00:11:39,420 --> 00:11:41,670
really well and I want to kind of light

241
00:11:41,670 --> 00:11:44,010
the fire run under you know these web

242
00:11:44,010 --> 00:11:47,970
companies to focus on on making a faster

243
00:11:47,970 --> 00:11:50,970
user experience so this is screen

244
00:11:50,970 --> 00:11:53,100
captures done at a half second interval

245
00:11:53,100 --> 00:11:56,640
for the major search providers and I

246
00:11:56,640 --> 00:11:59,040
want to point out here that they're

247
00:11:59,040 --> 00:12:01,829
sorted in order of popularity this might

248
00:12:01,829 --> 00:12:04,079
just be in the US yeah I think it is

249
00:12:04,079 --> 00:12:07,500
just us so Google has the most AOL has

250
00:12:07,500 --> 00:12:08,070
the least

251
00:12:08,070 --> 00:12:10,410
and this kind of pattern where things

252
00:12:10,410 --> 00:12:13,530
are in the upper right art used very

253
00:12:13,530 --> 00:12:15,720
well for my work it shows that the

254
00:12:15,720 --> 00:12:17,700
fastest websites are the most popular

255
00:12:17,700 --> 00:12:20,430
right so in search I think it's not

256
00:12:20,430 --> 00:12:22,080
surprising that we see that kind of

257
00:12:22,080 --> 00:12:24,780
dynamic happening because speed is

258
00:12:24,780 --> 00:12:27,540
something that has become a very real

259
00:12:27,540 --> 00:12:30,630
competitive advantage of a benefit in

260
00:12:30,630 --> 00:12:35,850
the search marketplace so just where did

261
00:12:35,850 --> 00:12:37,080
I get this stuff I want to highlight

262
00:12:37,080 --> 00:12:40,860
webpagetest org here I'll actually we'll

263
00:12:40,860 --> 00:12:42,540
see well even if the Internet's not

264
00:12:42,540 --> 00:12:44,880
working i captured some pages so try it

265
00:12:44,880 --> 00:12:47,640
out it's really easy the AOL guys built

266
00:12:47,640 --> 00:12:49,770
this IE plugin so if you want you can

267
00:12:49,770 --> 00:12:52,140
plug it into IE and do things live on

268
00:12:52,140 --> 00:12:54,480
your desktop but you can also go to this

269
00:12:54,480 --> 00:12:57,360
website and just plug in a URL you can

270
00:12:57,360 --> 00:12:59,400
pick your they just last we've got a

271
00:12:59,400 --> 00:13:02,190
location hosted in california they've

272
00:13:02,190 --> 00:13:05,130
got some folks helping them in the UK in

273
00:13:05,130 --> 00:13:07,110
New Zealand you can choose right now

274
00:13:07,110 --> 00:13:09,950
just ie seven or eight different

275
00:13:09,950 --> 00:13:13,710
bandwidth speeds you can say capture a

276
00:13:13,710 --> 00:13:17,070
video you say go all the results unless

277
00:13:17,070 --> 00:13:19,500
you choose to hide it or saved so even

278
00:13:19,500 --> 00:13:20,790
if you haven't run anything you could

279
00:13:20,790 --> 00:13:23,190
just go to the test history and click

280
00:13:23,190 --> 00:13:25,440
any to video results and compare them

281
00:13:25,440 --> 00:13:28,770
and so here I want to play this video so

282
00:13:28,770 --> 00:13:30,810
this guy Pat mean and has written all

283
00:13:30,810 --> 00:13:32,070
this code like in the last two months

284
00:13:32,070 --> 00:13:34,980
for all this video stuff so you can see

285
00:13:34,980 --> 00:13:37,310
here late these are loading pretty slow

286
00:13:37,310 --> 00:13:39,930
and you can see there that beam comes in

287
00:13:39,930 --> 00:13:41,910
a little bit faster than yahoo search I

288
00:13:41,910 --> 00:13:44,130
think being bing as third right now but

289
00:13:44,130 --> 00:13:46,560
certainly they're fast and they're

290
00:13:46,560 --> 00:13:48,900
getting faster and I think that's a

291
00:13:48,900 --> 00:13:50,190
reason that they're catching on more

292
00:13:50,190 --> 00:13:52,920
plus the awesome name change live search

293
00:13:52,920 --> 00:13:57,960
bing bing now you gotta love thing so

294
00:13:57,960 --> 00:14:00,540
yeah Pat meaning a guy after my own

295
00:14:00,540 --> 00:14:02,220
heart just hack stuff out of his

296
00:14:02,220 --> 00:14:04,650
basement so that's how you can run

297
00:14:04,650 --> 00:14:07,590
webpagetest org here's the same thing in

298
00:14:07,590 --> 00:14:10,410
news notice in news I had to go to a one

299
00:14:10,410 --> 00:14:15,210
second interval and so we see here this

300
00:14:15,210 --> 00:14:20,070
actually argues against my you know

301
00:14:20,070 --> 00:14:21,490
evangelism we see the

302
00:14:21,490 --> 00:14:23,380
fastest one google news is actually

303
00:14:23,380 --> 00:14:26,140
forth in the marketplace so there's

304
00:14:26,140 --> 00:14:27,580
obviously other things that come into

305
00:14:27,580 --> 00:14:29,649
play here yahoo news was established

306
00:14:29,649 --> 00:14:31,870
early on maybe they have I don't know

307
00:14:31,870 --> 00:14:35,020
what more content a better UI we see

308
00:14:35,020 --> 00:14:37,600
here number to CNN hasn't even render

309
00:14:37,600 --> 00:14:39,670
started rendering yet at the four second

310
00:14:39,670 --> 00:14:44,110
mark right shopping so this looks a

311
00:14:44,110 --> 00:14:48,160
little better for me amazon i think you

312
00:14:48,160 --> 00:14:50,440
know if you want to look at techniques

313
00:14:50,440 --> 00:14:53,440
look at things like amazon and msn and

314
00:14:53,440 --> 00:14:55,390
google search these people really know

315
00:14:55,390 --> 00:14:58,300
what they're doing so amazon has a lot i

316
00:14:58,300 --> 00:14:59,860
think has a lot of content in their

317
00:14:59,860 --> 00:15:02,050
pages and yet they're very good about

318
00:15:02,050 --> 00:15:04,600
flushing their document early getting

319
00:15:04,600 --> 00:15:06,910
progressive rendering of stuff above the

320
00:15:06,910 --> 00:15:11,370
fold to happen quickly sports we see

321
00:15:11,370 --> 00:15:14,350
that ESPN even though it starts

322
00:15:14,350 --> 00:15:16,930
rendering early it's one the last ones

323
00:15:16,930 --> 00:15:18,850
to get the meat of the page up there

324
00:15:18,850 --> 00:15:21,490
first the meat of the page is the photo

325
00:15:21,490 --> 00:15:23,830
of the Red Sox almost getting into the

326
00:15:23,830 --> 00:15:26,500
World Series and it comes up last on

327
00:15:26,500 --> 00:15:32,529
ESPN so I think the key to two there's

328
00:15:32,529 --> 00:15:35,200
this key pattern that people don't talk

329
00:15:35,200 --> 00:15:36,940
about enough and maybe because it's a

330
00:15:36,940 --> 00:15:39,510
little too hand wavy and not that techie

331
00:15:39,510 --> 00:15:44,880
but i think we had this pendulum where

332
00:15:44,880 --> 00:15:47,860
we got into javascript and we built

333
00:15:47,860 --> 00:15:49,540
these web apps that were really heavy

334
00:15:49,540 --> 00:15:51,880
with javascript and when I describe this

335
00:15:51,880 --> 00:15:53,890
I think you'll agree with me that if

336
00:15:53,890 --> 00:15:55,660
someone had described this before we

337
00:15:55,660 --> 00:15:57,250
started we would have said oh yeah we'll

338
00:15:57,250 --> 00:15:59,200
never do that we got to this point where

339
00:15:59,200 --> 00:16:01,390
we downloaded all of this really

340
00:16:01,390 --> 00:16:04,420
expensive JavaScript into our pages and

341
00:16:04,420 --> 00:16:08,700
then created all of this these HTML

342
00:16:08,700 --> 00:16:11,020
elements either you know be a create

343
00:16:11,020 --> 00:16:13,720
element or by stitching together a

344
00:16:13,720 --> 00:16:16,240
really long string and setting inner

345
00:16:16,240 --> 00:16:18,760
HTML and then the user could actually

346
00:16:18,760 --> 00:16:22,510
see the content of the page that just

347
00:16:22,510 --> 00:16:24,550
sounds ridiculous we need to say like

348
00:16:24,550 --> 00:16:26,110
that's how I'm going to build my web app

349
00:16:26,110 --> 00:16:30,040
and so I no properties at Google are

350
00:16:30,040 --> 00:16:31,360
doing this and I talked to other people

351
00:16:31,360 --> 00:16:32,259
who are doing

352
00:16:32,259 --> 00:16:35,139
it also trying to get that pendulum to

353
00:16:35,139 --> 00:16:37,149
swing back to where it should be which

354
00:16:37,149 --> 00:16:39,609
is to do progressive enhancement is

355
00:16:39,609 --> 00:16:43,499
deliver the meat of the page in HTML

356
00:16:43,499 --> 00:16:45,759
rendered on the server side as quickly

357
00:16:45,759 --> 00:16:48,699
as possible right defer the JavaScript

358
00:16:48,699 --> 00:16:50,949
don't touch the Dom or touch it as

359
00:16:50,949 --> 00:16:53,499
little as possible and then once you get

360
00:16:53,499 --> 00:16:55,239
that meat of the page up in front of the

361
00:16:55,239 --> 00:16:57,729
user you can add the decoration that

362
00:16:57,729 --> 00:17:00,459
JavaScript functionality to enhance the

363
00:17:00,459 --> 00:17:04,179
page after the user has the content in

364
00:17:04,179 --> 00:17:05,380
front of them and you do have to worry

365
00:17:05,380 --> 00:17:07,659
about race conditions the user clicking

366
00:17:07,659 --> 00:17:09,699
on buttons before it's ready but those

367
00:17:09,699 --> 00:17:11,919
aren't that difficult those challenges

368
00:17:11,919 --> 00:17:13,269
aren't that difficult to work through

369
00:17:13,269 --> 00:17:18,010
and so if you adopt this a pattern of

370
00:17:18,010 --> 00:17:19,899
progressively enhancing your pages

371
00:17:19,899 --> 00:17:22,029
you'll get better recive rendering I

372
00:17:22,029 --> 00:17:26,439
think better user experience so in doing

373
00:17:26,439 --> 00:17:28,209
this it's really important to focus on

374
00:17:28,209 --> 00:17:30,309
JavaScript why so here are some of the

375
00:17:30,309 --> 00:17:34,769
Alexa top 10 websites and what we see is

376
00:17:34,769 --> 00:17:37,570
JavaScript dominates the low time of the

377
00:17:37,570 --> 00:17:40,389
page and usually it's disproportional

378
00:17:40,389 --> 00:17:41,590
there's a very small number of

379
00:17:41,590 --> 00:17:44,320
JavaScript requests in the page but it's

380
00:17:44,320 --> 00:17:46,330
causing the biggest slowdown in the page

381
00:17:46,330 --> 00:17:49,720
these are all done with ie7 and that's

382
00:17:49,720 --> 00:17:51,700
because scripts block write the script

383
00:17:51,700 --> 00:17:54,250
the script block both downloading and

384
00:17:54,250 --> 00:17:57,460
rendering so here's a hypothetical test

385
00:17:57,460 --> 00:18:01,090
case using my kazillion tool I have two

386
00:18:01,090 --> 00:18:02,529
scripts that take two seconds to

387
00:18:02,529 --> 00:18:04,840
download two seconds to execute and then

388
00:18:04,840 --> 00:18:06,850
an image a stylesheet an iframe that

389
00:18:06,850 --> 00:18:09,519
each take one second and and in these

390
00:18:09,519 --> 00:18:12,070
browsers listed here we see what happens

391
00:18:12,070 --> 00:18:13,389
is when the first script starts

392
00:18:13,389 --> 00:18:14,649
downloading the browser won't do

393
00:18:14,649 --> 00:18:16,299
anything else no other downloads no

394
00:18:16,299 --> 00:18:18,429
other rendering it will take two seconds

395
00:18:18,429 --> 00:18:20,110
to download that file two seconds to

396
00:18:20,110 --> 00:18:22,269
execute when all of that is done it will

397
00:18:22,269 --> 00:18:23,769
start the next script but that will

398
00:18:23,769 --> 00:18:25,659
block everything else all rendering and

399
00:18:25,659 --> 00:18:28,570
other resources until it's done and then

400
00:18:28,570 --> 00:18:30,340
we'll get two seconds of execution and

401
00:18:30,340 --> 00:18:32,260
then all the other resources in the page

402
00:18:32,260 --> 00:18:35,710
will download together in parallel which

403
00:18:35,710 --> 00:18:37,840
is very cool and so this is you know

404
00:18:37,840 --> 00:18:39,760
obviously why one of the why slow rules

405
00:18:39,760 --> 00:18:41,590
is to move your JavaScript as low in the

406
00:18:41,590 --> 00:18:42,110
pay

407
00:18:42,110 --> 00:18:44,640
but also in my new work I've talked

408
00:18:44,640 --> 00:18:46,380
about how to load these scripts in

409
00:18:46,380 --> 00:18:49,530
parallel because I certainly understand

410
00:18:49,530 --> 00:18:51,840
you know this script might depend on the

411
00:18:51,840 --> 00:18:55,140
symbols in this script so this code has

412
00:18:55,140 --> 00:18:57,660
to be parsed and executed after this

413
00:18:57,660 --> 00:19:01,620
code but it's just ridiculous that the

414
00:19:01,620 --> 00:19:03,690
browser knows there's two scripts and it

415
00:19:03,690 --> 00:19:05,580
doesn't even start downloading this one

416
00:19:05,580 --> 00:19:07,980
until it's done parsing and executing

417
00:19:07,980 --> 00:19:10,110
this one there's no excuse for that and

418
00:19:10,110 --> 00:19:11,640
that's why we're seeing in the newer

419
00:19:11,640 --> 00:19:14,390
browsers that they've actually added a

420
00:19:14,390 --> 00:19:16,980
parallel script downloading and the

421
00:19:16,980 --> 00:19:18,540
built-in behavior is that it will

422
00:19:18,540 --> 00:19:20,310
download these two scripts in parallel

423
00:19:20,310 --> 00:19:22,470
but it will execute this one for two

424
00:19:22,470 --> 00:19:24,300
seconds and then execute this one for

425
00:19:24,300 --> 00:19:26,070
two seconds so you don't get any race

426
00:19:26,070 --> 00:19:28,980
conditions undefined symbol errors but

427
00:19:28,980 --> 00:19:30,300
we see that they're still not good

428
00:19:30,300 --> 00:19:33,030
enough and Kyle again highlighted this

429
00:19:33,030 --> 00:19:35,130
in his talk so here I think I'm in

430
00:19:35,130 --> 00:19:38,370
Firefox 35 and it will only pull in the

431
00:19:38,370 --> 00:19:40,500
style sheet and load that in parallel as

432
00:19:40,500 --> 00:19:42,990
well whereas what I really want I want

433
00:19:42,990 --> 00:19:45,660
all three of these real extra resources

434
00:19:45,660 --> 00:19:47,790
to be loaded in parallel and that would

435
00:19:47,790 --> 00:19:49,590
make the page one second faster in this

436
00:19:49,590 --> 00:19:52,470
test case so how do we make that happen

437
00:19:52,470 --> 00:19:54,660
so even in the newer browsers we're

438
00:19:54,660 --> 00:19:56,190
getting better and hopefully in the next

439
00:19:56,190 --> 00:19:58,290
round of browsers I already know some of

440
00:19:58,290 --> 00:19:59,760
these issues have been fixed in the next

441
00:19:59,760 --> 00:20:02,460
round of browsers but we're going to

442
00:20:02,460 --> 00:20:05,250
have ie6 and ie7 for years to come so

443
00:20:05,250 --> 00:20:07,200
even in the newer browsers it's not as

444
00:20:07,200 --> 00:20:09,210
optimal as it could be we've got I you

445
00:20:09,210 --> 00:20:11,520
six and seven for years what can we do

446
00:20:11,520 --> 00:20:14,190
about this about making JavaScript less

447
00:20:14,190 --> 00:20:16,530
painful for our pages one thing is to

448
00:20:16,530 --> 00:20:18,570
split the initial download of javascript

449
00:20:18,570 --> 00:20:22,110
so here there's this tool goop PageSpeed

450
00:20:22,110 --> 00:20:24,150
from google they'll talk about in a

451
00:20:24,150 --> 00:20:26,580
minute that can tell you how much of

452
00:20:26,580 --> 00:20:28,440
your code your JavaScript code that you

453
00:20:28,440 --> 00:20:30,750
downloaded was actually used to render

454
00:20:30,750 --> 00:20:33,090
the page and so here for the Alexa top

455
00:20:33,090 --> 00:20:36,540
10 we see on average 250 k of javascript

456
00:20:36,540 --> 00:20:38,490
is downloaded but only twenty-six

457
00:20:38,490 --> 00:20:40,530
percent of that was executed by the time

458
00:20:40,530 --> 00:20:43,110
of the onload event anything executed

459
00:20:43,110 --> 00:20:45,030
after the onload event could have been

460
00:20:45,030 --> 00:20:47,250
lazy loaded could have been deferred to

461
00:20:47,250 --> 00:20:49,170
get progressive enhancement to promote

462
00:20:49,170 --> 00:20:50,570
progressive rendering right

463
00:20:50,570 --> 00:20:52,940
so what's this seventy-four percent of

464
00:20:52,940 --> 00:20:57,409
other code it could be cases conditions

465
00:20:57,409 --> 00:20:59,840
that I didn't trigger error cases or

466
00:20:59,840 --> 00:21:01,909
maybe I'm a special user or something

467
00:21:01,909 --> 00:21:04,880
like that certainly if it's my code

468
00:21:04,880 --> 00:21:06,470
there's a lot of cruft in there that I

469
00:21:06,470 --> 00:21:09,769
never cleaned out but a lot of it

470
00:21:09,769 --> 00:21:11,960
especially for today's web sites is this

471
00:21:11,960 --> 00:21:14,740
enhanced functionality these drop-down

472
00:21:14,740 --> 00:21:19,429
menus pop-up divs Ajax requests things

473
00:21:19,429 --> 00:21:20,990
like that that could have been deferred

474
00:21:20,990 --> 00:21:23,149
to get the main part of the page the

475
00:21:23,149 --> 00:21:25,250
main content of the page delivered to

476
00:21:25,250 --> 00:21:28,220
the user more quickly so that's the

477
00:21:28,220 --> 00:21:30,169
first rule is splitting the initial

478
00:21:30,169 --> 00:21:32,750
payload figure out what of your

479
00:21:32,750 --> 00:21:34,399
javascript is needed to render the main

480
00:21:34,399 --> 00:21:36,860
content of the page and defer everything

481
00:21:36,860 --> 00:21:41,000
else this isn't as easy as it sounds or

482
00:21:41,000 --> 00:21:42,769
it might be for you if you have a lot of

483
00:21:42,769 --> 00:21:44,029
JavaScript and you have a lot of

484
00:21:44,029 --> 00:21:45,830
developers working on that JavaScript

485
00:21:45,830 --> 00:21:48,009
you can get really really hard to

486
00:21:48,009 --> 00:21:51,440
unravel that code and figure out what

487
00:21:51,440 --> 00:21:53,240
needs to be in the initial download of

488
00:21:53,240 --> 00:21:55,610
what can be deferred so there's this

489
00:21:55,610 --> 00:21:58,039
tool PageSpeed that will actually lists

490
00:21:58,039 --> 00:21:59,600
all the functions that weren't called

491
00:21:59,600 --> 00:22:01,490
and so that could be a starting point

492
00:22:01,490 --> 00:22:03,529
it's not a guaranteed to be a hundred

493
00:22:03,529 --> 00:22:05,000
percent accurate but it's probably

494
00:22:05,000 --> 00:22:07,250
eighty to ninety percent accurate and if

495
00:22:07,250 --> 00:22:08,690
someone who is familiar with the code

496
00:22:08,690 --> 00:22:10,759
look at looked at that break out they

497
00:22:10,759 --> 00:22:12,830
could say oh well we also need this you

498
00:22:12,830 --> 00:22:14,600
know error condition code down to the

499
00:22:14,600 --> 00:22:16,970
initial part and get it right and

500
00:22:16,970 --> 00:22:19,039
there's also this tool de loto from

501
00:22:19,039 --> 00:22:21,649
microsoft that was written up about two

502
00:22:21,649 --> 00:22:23,269
years ago and the code was just released

503
00:22:23,269 --> 00:22:26,000
about three months ago publicly but

504
00:22:26,000 --> 00:22:27,590
we're still going to load scripts as the

505
00:22:27,590 --> 00:22:29,179
main part of the page how can we do that

506
00:22:29,179 --> 00:22:32,389
with less pain so before I didn't show

507
00:22:32,389 --> 00:22:35,210
msn and actually this screen capture I

508
00:22:35,210 --> 00:22:36,950
did about two years ago so they've been

509
00:22:36,950 --> 00:22:41,340
doing this for a while on a major portal

510
00:22:41,350 --> 00:22:44,210
we see they have three scripts that are

511
00:22:44,210 --> 00:22:47,269
all downloading in parallel and this is

512
00:22:47,269 --> 00:22:50,360
IE 7 and in addition they have style

513
00:22:50,360 --> 00:22:52,039
sheets that are downloading in parallel

514
00:22:52,039 --> 00:22:54,259
as well how do they do this is it some

515
00:22:54,259 --> 00:22:57,169
secret technology that they have that we

516
00:22:57,169 --> 00:22:59,330
have no hope of ever unraveling or could

517
00:22:59,330 --> 00:23:00,710
we just look at their document source

518
00:23:00,710 --> 00:23:02,500
and see what they're doing

519
00:23:02,500 --> 00:23:05,920
so they're doing document create element

520
00:23:05,920 --> 00:23:08,680
script set the source and appended to

521
00:23:08,680 --> 00:23:10,390
head right so it's very straightforward

522
00:23:10,390 --> 00:23:12,640
I call this the script Dom element

523
00:23:12,640 --> 00:23:15,640
approach so when I saw this I started

524
00:23:15,640 --> 00:23:17,530
talking to other developers doing a

525
00:23:17,530 --> 00:23:19,840
little poking around myself and came up

526
00:23:19,840 --> 00:23:21,490
with these six techniques that I wrote

527
00:23:21,490 --> 00:23:24,160
up in the book for all of these

528
00:23:24,160 --> 00:23:26,860
techniques will load scripts in parallel

529
00:23:26,860 --> 00:23:30,970
without blocking other requests the two

530
00:23:30,970 --> 00:23:32,800
just for the sake of time i'll just talk

531
00:23:32,800 --> 00:23:36,220
about to really quickly xhr eval do an

532
00:23:36,220 --> 00:23:38,560
XML HTTP request for your javascript

533
00:23:38,560 --> 00:23:40,890
file when you get the response eval it

534
00:23:40,890 --> 00:23:43,300
the downside of this is you have the

535
00:23:43,300 --> 00:23:45,850
same domain restriction and you might

536
00:23:45,850 --> 00:23:47,560
have to massage your script a little bit

537
00:23:47,560 --> 00:23:50,980
if you have to have some backslashes in

538
00:23:50,980 --> 00:23:52,810
there some carriage returns or something

539
00:23:52,810 --> 00:23:55,810
like that script on element for loading

540
00:23:55,810 --> 00:23:57,640
scripts asynchronously I think is the

541
00:23:57,640 --> 00:23:59,500
most popular technique that I see out

542
00:23:59,500 --> 00:24:01,540
there well actually that's not true the

543
00:24:01,540 --> 00:24:03,640
most popular technique is document dot

544
00:24:03,640 --> 00:24:05,830
write which is the worst technique it

545
00:24:05,830 --> 00:24:09,750
only has very limited async capability

546
00:24:09,750 --> 00:24:12,040
but its most popular because it's

547
00:24:12,040 --> 00:24:15,070
prevalent in the world of ads but for

548
00:24:15,070 --> 00:24:17,410
developers who are trying and they don't

549
00:24:17,410 --> 00:24:19,750
even use that technique for a sink

550
00:24:19,750 --> 00:24:20,950
loading they do it for other purposes

551
00:24:20,950 --> 00:24:23,530
but for developers who are trying to

552
00:24:23,530 --> 00:24:24,760
take advantage of the async script

553
00:24:24,760 --> 00:24:26,770
loading script on element is the most

554
00:24:26,770 --> 00:24:29,950
typical technique that I see used out

555
00:24:29,950 --> 00:24:33,160
there so you know there's no same site

556
00:24:33,160 --> 00:24:36,220
restriction you can use your da che s

557
00:24:36,220 --> 00:24:38,740
file just the way it is now you have to

558
00:24:38,740 --> 00:24:41,830
be a little careful because although in

559
00:24:41,830 --> 00:24:44,550
Firefox and some other browsers the

560
00:24:44,550 --> 00:24:47,920
order of script execution is preserved

561
00:24:47,920 --> 00:24:51,340
in IE and I think Chrome and Safari it's

562
00:24:51,340 --> 00:24:54,340
not so if you use this technique on two

563
00:24:54,340 --> 00:24:57,550
scripts and you know a and B & B depends

564
00:24:57,550 --> 00:25:00,640
on a but you know a is 100 k & B is 10k

565
00:25:00,640 --> 00:25:04,450
so becomes pack first nie if you use

566
00:25:04,450 --> 00:25:06,940
these techniques without any coupling on

567
00:25:06,940 --> 00:25:08,800
B would be executed first you probably

568
00:25:08,800 --> 00:25:10,900
get some undefined symbol errors so you

569
00:25:10,900 --> 00:25:12,400
have to be a little careful there and in

570
00:25:12,400 --> 00:25:13,940
my book I go into

571
00:25:13,940 --> 00:25:16,940
excruciating detail about you know when

572
00:25:16,940 --> 00:25:19,429
these situations arise and how you can

573
00:25:19,429 --> 00:25:20,870
couple scripts and chain them together

574
00:25:20,870 --> 00:25:24,919
and then the work that Kyle is doing in

575
00:25:24,919 --> 00:25:27,620
lab Jas is beautiful because he's

576
00:25:27,620 --> 00:25:29,389
implementing that in a package that we

577
00:25:29,389 --> 00:25:33,320
can all use I wanted to point out two

578
00:25:33,320 --> 00:25:34,789
techniques have just come up in the last

579
00:25:34,789 --> 00:25:37,909
month or so the gmail mobile guys wrote

580
00:25:37,909 --> 00:25:40,129
an awesome blog post about what they're

581
00:25:40,129 --> 00:25:43,610
doing for gmail on mobile devices where

582
00:25:43,610 --> 00:25:46,820
latency is even a bigger issue so gmail

583
00:25:46,820 --> 00:25:48,769
has a lot of functionality that isn't

584
00:25:48,769 --> 00:25:51,110
used to render the page in fact it may

585
00:25:51,110 --> 00:25:53,269
never be used it all depends on what the

586
00:25:53,269 --> 00:25:55,129
user clicks on right and what the user

587
00:25:55,129 --> 00:25:57,200
tried what features the user tries to

588
00:25:57,200 --> 00:26:00,049
take advantage of so they face a

589
00:26:00,049 --> 00:26:02,090
situation of they want to render the

590
00:26:02,090 --> 00:26:04,789
main part of gmail and then they want to

591
00:26:04,789 --> 00:26:06,470
defer the loading of this other

592
00:26:06,470 --> 00:26:08,899
JavaScript but if you just defer it

593
00:26:08,899 --> 00:26:11,149
until like after the onload event and

594
00:26:11,149 --> 00:26:12,950
then you download another I don't know

595
00:26:12,950 --> 00:26:15,679
what it is 300 k of JavaScript even if

596
00:26:15,679 --> 00:26:18,620
you gzip that JavaScript it's still 300

597
00:26:18,620 --> 00:26:20,600
k that has to be parsed and executed and

598
00:26:20,600 --> 00:26:22,399
guess what it does it locks the UI

599
00:26:22,399 --> 00:26:24,799
thread so all of us have experienced

600
00:26:24,799 --> 00:26:26,929
that when you're downloading something

601
00:26:26,929 --> 00:26:30,529
big like gmail or facebook or something

602
00:26:30,529 --> 00:26:32,870
like that and you go to click on it and

603
00:26:32,870 --> 00:26:35,750
there's no response I especially love it

604
00:26:35,750 --> 00:26:37,970
when the little spinning logo in the tab

605
00:26:37,970 --> 00:26:40,129
stops spinning then you know you're

606
00:26:40,129 --> 00:26:45,080
really got a lock to UI thread so so

607
00:26:45,080 --> 00:26:47,059
they that they didn't want to just like

608
00:26:47,059 --> 00:26:49,370
deferred and then download 300k of

609
00:26:49,370 --> 00:26:52,070
JavaScript and have the UI block so what

610
00:26:52,070 --> 00:26:54,799
they did was they put the JavaScript

611
00:26:54,799 --> 00:26:56,840
code in these script block surrounded by

612
00:26:56,840 --> 00:26:59,240
comments and they debt they defer the

613
00:26:59,240 --> 00:27:01,370
download of it right they do that after

614
00:27:01,370 --> 00:27:05,450
the main content has been rendered but

615
00:27:05,450 --> 00:27:07,700
then they don't have to actually incur

616
00:27:07,700 --> 00:27:10,879
the parsing pain unless the user

617
00:27:10,879 --> 00:27:15,649
actually enables that feature exercises

618
00:27:15,649 --> 00:27:18,230
that feature so they just you know get

619
00:27:18,230 --> 00:27:21,409
the script on elements text remove the

620
00:27:21,409 --> 00:27:24,409
comments and II valid so you know it

621
00:27:24,409 --> 00:27:26,800
sounds pretty like weird

622
00:27:26,800 --> 00:27:28,510
you know Google's really committed to

623
00:27:28,510 --> 00:27:30,430
making things as fast as possible and

624
00:27:30,430 --> 00:27:32,230
they're doing this on a really popular

625
00:27:32,230 --> 00:27:35,080
web app so you know it's a solid

626
00:27:35,080 --> 00:27:37,390
technique they do it I think they put

627
00:27:37,390 --> 00:27:40,990
these script blocks in the same in the

628
00:27:40,990 --> 00:27:43,660
HTML document itself if it was me and I

629
00:27:43,660 --> 00:27:46,480
was using this for a website i would put

630
00:27:46,480 --> 00:27:48,670
him in an iframe so i could have that be

631
00:27:48,670 --> 00:27:52,600
cached and then Charles jolly I've been

632
00:27:52,600 --> 00:27:55,030
going back and forth with him for the

633
00:27:55,030 --> 00:27:58,900
last month or so he looked at that a

634
00:27:58,900 --> 00:28:01,360
different way and said well I'm doing a

635
00:28:01,360 --> 00:28:03,820
little bit of extra work they're getting

636
00:28:03,820 --> 00:28:06,430
it as a comment the JavaScript parser

637
00:28:06,430 --> 00:28:08,740
still parses that one character at a

638
00:28:08,740 --> 00:28:10,600
time even though the whole thing is a

639
00:28:10,600 --> 00:28:14,020
comment so there's some pain there and

640
00:28:14,020 --> 00:28:15,820
then I'm going to eval it so there's

641
00:28:15,820 --> 00:28:17,710
again another set of parsing that has to

642
00:28:17,710 --> 00:28:20,650
happen what if I just get it as a string

643
00:28:20,650 --> 00:28:23,740
right and then as the user takes

644
00:28:23,740 --> 00:28:26,380
advantage of a feature I just know which

645
00:28:26,380 --> 00:28:28,420
module that feature is associated with

646
00:28:28,420 --> 00:28:31,990
and I eval that string so he did a

647
00:28:31,990 --> 00:28:34,900
really good set of experiments and

648
00:28:34,900 --> 00:28:37,810
posted the results and and it's not

649
00:28:37,810 --> 00:28:39,430
surprising here we're just looking at

650
00:28:39,430 --> 00:28:41,650
download time and so it's not surprising

651
00:28:41,650 --> 00:28:45,790
that the technique of either green or

652
00:28:45,790 --> 00:28:47,620
blue of doing it as a comment or a

653
00:28:47,620 --> 00:28:50,170
string or much faster than actually

654
00:28:50,170 --> 00:28:52,060
downloading it as a script and and

655
00:28:52,060 --> 00:28:55,390
incurring the parsing time so he's got

656
00:28:55,390 --> 00:28:56,980
another wave of experiments that

657
00:28:56,980 --> 00:28:59,800
hopefully will come out soon where he

658
00:28:59,800 --> 00:29:02,050
adds the parsing time for the other

659
00:29:02,050 --> 00:29:04,660
string and comment techniques and I

660
00:29:04,660 --> 00:29:06,460
think what we're going to see is it's

661
00:29:06,460 --> 00:29:09,100
actually takes longer to download java

662
00:29:09,100 --> 00:29:10,990
script as a comment or a string and then

663
00:29:10,990 --> 00:29:14,260
eval it but the point here is we're not

664
00:29:14,260 --> 00:29:16,090
doing this on the core java script in

665
00:29:16,090 --> 00:29:17,830
our pages we're doing it on that

666
00:29:17,830 --> 00:29:21,100
javascript that is for enhancing the

667
00:29:21,100 --> 00:29:23,500
page for later functionality and so

668
00:29:23,500 --> 00:29:25,120
getting it down in the page and

669
00:29:25,120 --> 00:29:27,520
incurring as little pain and you I

670
00:29:27,520 --> 00:29:32,140
locking as possible is really key so I

671
00:29:32,140 --> 00:29:35,620
think that's a really good technique so

672
00:29:35,620 --> 00:29:36,970
there are all these techniques out there

673
00:29:36,970 --> 00:29:39,220
how do you remember them all how do you

674
00:29:39,220 --> 00:29:39,990
know which

675
00:29:39,990 --> 00:29:41,760
ones you're not using and which ones you

676
00:29:41,760 --> 00:29:44,910
are using so there's why slow you know

677
00:29:44,910 --> 00:29:47,580
it started with 13 rules that I put it

678
00:29:47,580 --> 00:29:51,390
in now it's up to like 25 or 30 rules so

679
00:29:51,390 --> 00:29:52,970
definitely run why slow on your pages

680
00:29:52,970 --> 00:29:58,060
page speed how many people run why slow

681
00:29:58,070 --> 00:30:00,840
okay PageSpeed came out about three

682
00:30:00,840 --> 00:30:04,130
months ago how many people use pagespeed

683
00:30:04,130 --> 00:30:06,600
yeah so that it's kind of newer and

684
00:30:06,600 --> 00:30:08,610
there's no one really evangelizing it

685
00:30:08,610 --> 00:30:12,720
that that much but it's got some really

686
00:30:12,720 --> 00:30:15,210
good it's very similar to why slow it's

687
00:30:15,210 --> 00:30:17,670
a Firebug plugin it's got 30 rules or

688
00:30:17,670 --> 00:30:19,470
something like that it automatically

689
00:30:19,470 --> 00:30:21,179
tells you what you're doing well and not

690
00:30:21,179 --> 00:30:24,090
well in your page for me when I'm

691
00:30:24,090 --> 00:30:26,190
analyzing a page I'm run both and this

692
00:30:26,190 --> 00:30:28,350
is why there's a lot of rules that they

693
00:30:28,350 --> 00:30:31,350
both measure but why slow has some like

694
00:30:31,350 --> 00:30:34,200
especially etag sprites that only it

695
00:30:34,200 --> 00:30:36,600
measures and page B doesn't and page

696
00:30:36,600 --> 00:30:38,340
speed has some really critical ones like

697
00:30:38,340 --> 00:30:41,040
unused JavaScript on use CSS that why

698
00:30:41,040 --> 00:30:43,140
slow doesn't measure so if you run both

699
00:30:43,140 --> 00:30:44,730
it's not that painful they're both in

700
00:30:44,730 --> 00:30:46,950
Firebug they're both tabs just click on

701
00:30:46,950 --> 00:30:49,200
it to run you'll make sure that you get

702
00:30:49,200 --> 00:30:51,570
coverage of all of the performance best

703
00:30:51,570 --> 00:30:53,340
practices that are automated out there

704
00:30:53,340 --> 00:30:57,720
right now so with all of these books and

705
00:30:57,720 --> 00:30:59,940
techniques and evangelism and automated

706
00:30:59,940 --> 00:31:02,790
tools I kind of envision this world

707
00:31:02,790 --> 00:31:07,170
where you know I would have this stream

708
00:31:07,170 --> 00:31:10,650
of flowing web performance techniques

709
00:31:10,650 --> 00:31:13,860
and and the horses would come up to the

710
00:31:13,860 --> 00:31:16,620
water and just you know lap it up and

711
00:31:16,620 --> 00:31:18,630
adopt all these techniques that we'd

712
00:31:18,630 --> 00:31:21,630
have a faster internet out there and I'm

713
00:31:21,630 --> 00:31:23,580
not seeing that and instead I kind of

714
00:31:23,580 --> 00:31:25,920
feel like this like I'm the performance

715
00:31:25,920 --> 00:31:27,929
cop and you know I have to go around and

716
00:31:27,929 --> 00:31:29,460
find these horses and drag them kicking

717
00:31:29,460 --> 00:31:32,790
and screaming to this stream and force

718
00:31:32,790 --> 00:31:35,220
them to drink the water and so I thought

719
00:31:35,220 --> 00:31:37,230
why is that and and what I heard from a

720
00:31:37,230 --> 00:31:40,500
lot of developers is that they want to

721
00:31:40,500 --> 00:31:42,420
make code fast like I think that's

722
00:31:42,420 --> 00:31:43,620
something that makes you be a

723
00:31:43,620 --> 00:31:45,390
developer's you care about speed and

724
00:31:45,390 --> 00:31:48,050
optimization and write an optimal code

725
00:31:48,050 --> 00:31:51,810
but you know the marketing people or

726
00:31:51,810 --> 00:31:53,400
the product people are the sales people

727
00:31:53,400 --> 00:31:55,920
won't let me prioritize performance

728
00:31:55,920 --> 00:31:58,260
because it's not a WOW factor so I

729
00:31:58,260 --> 00:32:00,360
thought okay like you know developers

730
00:32:00,360 --> 00:32:01,980
want to do this how can I get the rest

731
00:32:01,980 --> 00:32:04,950
of the company to get on board so for

732
00:32:04,950 --> 00:32:06,840
the velocity conference last year I said

733
00:32:06,840 --> 00:32:09,150
a theme of how performance impacts the

734
00:32:09,150 --> 00:32:11,490
bottom line of the business and I was

735
00:32:11,490 --> 00:32:13,080
really pleased to see some big players

736
00:32:13,080 --> 00:32:15,690
come up and pony up some stats about how

737
00:32:15,690 --> 00:32:18,210
performance impacted their websites so

738
00:32:18,210 --> 00:32:21,390
Google search came out and said they did

739
00:32:21,390 --> 00:32:23,940
an experiment where they injected a four

740
00:32:23,940 --> 00:32:26,220
hundred millisecond delay in certain

741
00:32:26,220 --> 00:32:27,900
users a very small percentage of users

742
00:32:27,900 --> 00:32:30,630
and for those users they saw searches go

743
00:32:30,630 --> 00:32:35,130
down point-six percent Yahoo did a

744
00:32:35,130 --> 00:32:37,500
similar experiment at 400 milliseconds

745
00:32:37,500 --> 00:32:40,590
they saw five to nine percent drop off

746
00:32:40,590 --> 00:32:44,370
in full page traffic being got up they

747
00:32:44,370 --> 00:32:46,290
took the experiment to two seconds and

748
00:32:46,290 --> 00:32:48,000
when they got up to that level revenue

749
00:32:48,000 --> 00:32:52,530
per user dropped four percent shopzilla

750
00:32:52,530 --> 00:32:54,840
went through a major optimization

751
00:32:54,840 --> 00:32:56,730
redesign they went from seven seconds 22

752
00:32:56,730 --> 00:32:59,520
seconds of load time and the revenue

753
00:32:59,520 --> 00:33:01,200
went up seven and twelve percent and

754
00:33:01,200 --> 00:33:03,480
there this is the other side of this

755
00:33:03,480 --> 00:33:06,210
optimization coin when you you not only

756
00:33:06,210 --> 00:33:08,130
get a better user experience and better

757
00:33:08,130 --> 00:33:10,470
revenue metrics but you also reduce your

758
00:33:10,470 --> 00:33:12,300
operating costs so in their case they

759
00:33:12,300 --> 00:33:14,370
cut the number of servers needed to run

760
00:33:14,370 --> 00:33:18,300
the website in half and a similar stat

761
00:33:18,300 --> 00:33:21,540
from netflix when they finally turned on

762
00:33:21,540 --> 00:33:23,790
gzip compression compression their

763
00:33:23,790 --> 00:33:25,530
outbound traffic dropped by forty three

764
00:33:25,530 --> 00:33:28,320
percent so are some more charts this is

765
00:33:28,320 --> 00:33:31,260
the google data and not surprisingly as

766
00:33:31,260 --> 00:33:33,750
that delay was incremented up to 400

767
00:33:33,750 --> 00:33:35,790
milliseconds it had a greater and

768
00:33:35,790 --> 00:33:38,640
greater negative impact on searches per

769
00:33:38,640 --> 00:33:42,300
user here's the bing data so i threw up

770
00:33:42,300 --> 00:33:44,490
the revenue stat but they also have page

771
00:33:44,490 --> 00:33:46,260
view stats and things like that and

772
00:33:46,260 --> 00:33:48,240
here's this netflix chart you can see

773
00:33:48,240 --> 00:33:50,940
where they push the apache config that

774
00:33:50,940 --> 00:33:53,520
turned on gzip compression the folks in

775
00:33:53,520 --> 00:33:57,840
the ops group paged bill scott who runs

776
00:33:57,840 --> 00:34:00,270
the UI team there and told them the site

777
00:34:00,270 --> 00:34:01,770
must be down all that all they were

778
00:34:01,770 --> 00:34:03,870
serving were error pages because that's

779
00:34:03,870 --> 00:34:05,040
about how much bandwidth

780
00:34:05,040 --> 00:34:06,540
you would need to serve error pages to

781
00:34:06,540 --> 00:34:08,100
every user and you said no we just

782
00:34:08,100 --> 00:34:11,250
turned on gzip compression so anyone who

783
00:34:11,250 --> 00:34:13,200
runs a large website and knows what the

784
00:34:13,200 --> 00:34:14,580
bandwidth costs are can appreciate

785
00:34:14,580 --> 00:34:16,800
cutting your bandwidth costs by forty

786
00:34:16,800 --> 00:34:19,650
three percent so fast performance it

787
00:34:19,650 --> 00:34:21,390
gives us a better user experience more

788
00:34:21,390 --> 00:34:23,840
traffic better user metrics more revenue

789
00:34:23,840 --> 00:34:26,580
reduces our operating costs or hardware

790
00:34:26,580 --> 00:34:30,800
costs so why don't more people do it

791
00:34:30,800 --> 00:34:36,590
it's too hard I it's really really hard

792
00:34:36,590 --> 00:34:40,320
so oh let's see if this works okay I

793
00:34:40,320 --> 00:34:52,860
have a mic oh really okay audio

794
00:34:52,870 --> 00:35:06,080
I pulled it if I

795
00:35:06,090 --> 00:35:11,340
now watch the Wi-Fi will be down okay it

796
00:35:11,340 --> 00:35:15,320
will try it oh and I better turn off

797
00:35:15,320 --> 00:35:24,290
mute however crank this up

798
00:35:24,300 --> 00:35:28,450
oh that's how the kind of loud okay

799
00:35:28,450 --> 00:35:31,030
we'll see what happens anyone know what

800
00:35:31,030 --> 00:35:33,310
this movie is Oh a league of their own

801
00:35:33,310 --> 00:35:36,349
okay

802
00:35:36,359 --> 00:35:40,259
I should have covered that up it just

803
00:35:40,259 --> 00:35:44,430
got too hard

804
00:35:44,440 --> 00:35:47,890
supposed to be hard if it wasn't hard

805
00:35:47,890 --> 00:35:49,920
everyone would do it

806
00:35:49,920 --> 00:35:53,500
the hard nexon parade

807
00:35:53,500 --> 00:36:04,420
I love that the hard is what makes it

808
00:36:04,420 --> 00:36:08,410
great right so that's why we like being

809
00:36:08,410 --> 00:36:10,480
writing code right we like tackling

810
00:36:10,480 --> 00:36:12,100
these hard problems especially the

811
00:36:12,100 --> 00:36:14,740
people here look right I love a hard

812
00:36:14,740 --> 00:36:19,180
fight I love working hard but Tom Hanks

813
00:36:19,180 --> 00:36:22,390
Jimmy Dugan said something right before

814
00:36:22,390 --> 00:36:26,620
that that is really more relevant if it

815
00:36:26,620 --> 00:36:30,100
wasn't hard everyone would do it I don't

816
00:36:30,100 --> 00:36:31,720
want just one percent of the web

817
00:36:31,720 --> 00:36:33,430
developers in the world writing fast

818
00:36:33,430 --> 00:36:35,650
websites i want everyone building fast

819
00:36:35,650 --> 00:36:37,090
web sites how are we going to make that

820
00:36:37,090 --> 00:36:39,250
happen so the theme for velocity this

821
00:36:39,250 --> 00:36:42,640
year fast by default so I want to throw

822
00:36:42,640 --> 00:36:46,360
up a couple examples of this there's a

823
00:36:46,360 --> 00:36:48,160
company in New Zealand called optimize

824
00:36:48,160 --> 00:36:50,020
they have a web accelerator they call

825
00:36:50,020 --> 00:36:53,830
wax it concatenates scripts style sheets

826
00:36:53,830 --> 00:36:56,770
create sprites in search data URIs make

827
00:36:56,770 --> 00:36:58,060
sure you have a far future expires

828
00:36:58,060 --> 00:37:00,430
header minify xand it does all of this

829
00:37:00,430 --> 00:37:02,200
automatically in real time it's an

830
00:37:02,200 --> 00:37:04,900
Apache and I is software module you

831
00:37:04,900 --> 00:37:07,210
install it you generate your HTML just

832
00:37:07,210 --> 00:37:08,740
the way you are now before it leaves the

833
00:37:08,740 --> 00:37:10,960
box all of these fix-ups are applied

834
00:37:10,960 --> 00:37:14,740
right they installed it on sharepoint

835
00:37:14,740 --> 00:37:17,110
microsoft com the number of requests for

836
00:37:17,110 --> 00:37:20,230
an empty cache went from 96 to 35 for a

837
00:37:20,230 --> 00:37:23,980
prime cash went from 50 down to nine the

838
00:37:23,980 --> 00:37:26,680
pages got about fifty percent faster for

839
00:37:26,680 --> 00:37:28,660
an empty cache and about thirty percent

840
00:37:28,660 --> 00:37:30,610
faster for a prime cash just by

841
00:37:30,610 --> 00:37:33,640
installing a server module strange loop

842
00:37:33,640 --> 00:37:35,680
networks has a similar accelerator it's

843
00:37:35,680 --> 00:37:38,830
a hardware appliance they released a

844
00:37:38,830 --> 00:37:40,720
blog post about a month ago and they

845
00:37:40,720 --> 00:37:42,580
said they ran it on a typical e-commerce

846
00:37:42,580 --> 00:37:45,340
site they didn't say who it was for an a

847
00:37:45,340 --> 00:37:48,130
for half the users they turned on the

848
00:37:48,130 --> 00:37:49,540
appliance for the other half they left

849
00:37:49,540 --> 00:37:51,400
it off so the people who had the

850
00:37:51,400 --> 00:37:54,010
accelerated experience pages per visit

851
00:37:54,010 --> 00:37:56,710
went from 11 to 16 time on the site one

852
00:37:56,710 --> 00:37:58,780
from 24 to 30 which is kind of

853
00:37:58,780 --> 00:38:00,520
surprising right they're getting a

854
00:38:00,520 --> 00:38:01,930
faster experience but they're spending

855
00:38:01,930 --> 00:38:03,850
more time why is that it's a better user

856
00:38:03,850 --> 00:38:04,790
experience

857
00:38:04,790 --> 00:38:07,829
and more importantly for those people in

858
00:38:07,829 --> 00:38:09,530
product and business and sales

859
00:38:09,530 --> 00:38:11,609
conversions went up sixteen percent

860
00:38:11,609 --> 00:38:13,349
order value in about five and a half

861
00:38:13,349 --> 00:38:17,670
percent so we're seeing appliances from

862
00:38:17,670 --> 00:38:19,380
vendors like that but we also need to

863
00:38:19,380 --> 00:38:22,740
embed this fast by default mentality

864
00:38:22,740 --> 00:38:24,450
into the frameworks that we're using

865
00:38:24,450 --> 00:38:26,900
into the CMS is in programming

866
00:38:26,900 --> 00:38:29,490
environment environments that we have so

867
00:38:29,490 --> 00:38:31,589
I've been working recently with yehuda

868
00:38:31,589 --> 00:38:34,079
katz from the rails community and he was

869
00:38:34,079 --> 00:38:35,490
explained to me all the things that

870
00:38:35,490 --> 00:38:37,740
rails does automatically make sure you

871
00:38:37,740 --> 00:38:38,910
have far future expires header

872
00:38:38,910 --> 00:38:41,160
concatenate scripts provides for domain

873
00:38:41,160 --> 00:38:44,099
shardene configure Z tags the main thing

874
00:38:44,099 --> 00:38:46,800
he and I are working on is making the

875
00:38:46,800 --> 00:38:48,869
script loading in rails adopt some of

876
00:38:48,869 --> 00:38:50,819
these acing techniques but he also

877
00:38:50,819 --> 00:38:53,069
mentioned coming up with spriting

878
00:38:53,069 --> 00:38:54,720
modification and document flushing

879
00:38:54,720 --> 00:38:57,059
sprout core was mentioned earlier today

880
00:38:57,059 --> 00:38:58,760
I've been working with Charles jolly

881
00:38:58,760 --> 00:39:01,230
there and again sprout cores the

882
00:39:01,230 --> 00:39:04,230
JavaScript framework behind mobil me so

883
00:39:04,230 --> 00:39:06,510
he was describing to me all the things

884
00:39:06,510 --> 00:39:08,190
that sprout core is doing concatenate

885
00:39:08,190 --> 00:39:09,869
these scripts and stylesheets making

886
00:39:09,869 --> 00:39:11,700
sure style sheets are the top scripts at

887
00:39:11,700 --> 00:39:13,619
the bottom removing duplicate scripts

888
00:39:13,619 --> 00:39:18,270
similar things so I think that we're

889
00:39:18,270 --> 00:39:20,339
going to see more and more of this I'm

890
00:39:20,339 --> 00:39:21,869
certainly going to try to encourage it

891
00:39:21,869 --> 00:39:24,690
by highlighting companies and projects

892
00:39:24,690 --> 00:39:27,119
that are making their frameworks fast by

893
00:39:27,119 --> 00:39:28,910
default that velocity this year if

894
00:39:28,910 --> 00:39:31,410
anyone here has a framework and I know

895
00:39:31,410 --> 00:39:33,329
people do and I already heard some of

896
00:39:33,329 --> 00:39:35,400
this this weekend but i encourage you to

897
00:39:35,400 --> 00:39:38,339
add more fast by default functionality

898
00:39:38,339 --> 00:39:41,040
so that anyone using your framework gets

899
00:39:41,040 --> 00:39:44,339
fast web sites just out of the box just

900
00:39:44,339 --> 00:39:47,670
by default so i'm wrapping up i want to

901
00:39:47,670 --> 00:39:50,430
talk about some recent news recent

902
00:39:50,430 --> 00:39:58,319
projects so is Francisco here so he

903
00:39:58,319 --> 00:40:00,329
scares me a little bit he's so smart and

904
00:40:00,329 --> 00:40:03,119
so yesterday he talked about how sprites

905
00:40:03,119 --> 00:40:05,369
are bad and dated your eyes are good so

906
00:40:05,369 --> 00:40:07,530
I feel a little funny getting up and

907
00:40:07,530 --> 00:40:09,480
talking about sprite me I certainly

908
00:40:09,480 --> 00:40:11,280
think his environment maybe is a little

909
00:40:11,280 --> 00:40:13,890
different and data your eyes I certainly

910
00:40:13,890 --> 00:40:16,619
evangelized but I think for another year

911
00:40:16,619 --> 00:40:17,400
or so we're

912
00:40:17,400 --> 00:40:19,380
are still going to need to deploy

913
00:40:19,380 --> 00:40:22,920
sprites so let me see if the internet is

914
00:40:22,920 --> 00:40:24,720
working if I can do a quick demo of that

915
00:40:24,720 --> 00:40:28,400
how many people here have run sprite me

916
00:40:28,400 --> 00:40:32,340
good good that it's so tiny thanks to

917
00:40:32,340 --> 00:40:35,620
the three of you that raised your hands

918
00:40:35,630 --> 00:40:38,400
okay so let's see it's a bookmarklet so

919
00:40:38,400 --> 00:40:40,860
it runs in all browsers ebay used to be

920
00:40:40,860 --> 00:40:43,260
my canonical example in fact if you look

921
00:40:43,260 --> 00:40:46,170
here you can see that they had all of

922
00:40:46,170 --> 00:40:51,000
these background images and sprite me

923
00:40:51,000 --> 00:40:53,520
found to these are the slides sprite me

924
00:40:53,520 --> 00:40:56,280
found two sprites to create so when

925
00:40:56,280 --> 00:40:57,900
sprite me first came out I emailed it to

926
00:40:57,900 --> 00:40:59,760
the performance guy in know at ebay and

927
00:40:59,760 --> 00:41:01,350
I said oh you guys have some opportunity

928
00:41:01,350 --> 00:41:03,360
here and they've actually since that

929
00:41:03,360 --> 00:41:05,250
time sometimes the last month have

930
00:41:05,250 --> 00:41:07,740
deployed a lot more sprites but right

931
00:41:07,740 --> 00:41:09,270
now sprightly still finds these

932
00:41:09,270 --> 00:41:11,970
opportunities for creating sprites so

933
00:41:11,970 --> 00:41:13,290
with sprite me you can actually like

934
00:41:13,290 --> 00:41:15,750
what you can just see what CSS

935
00:41:15,750 --> 00:41:18,510
backgrounds are being used now you can

936
00:41:18,510 --> 00:41:20,580
open it up and you can hover over an

937
00:41:20,580 --> 00:41:22,980
element you can actually see where CSS

938
00:41:22,980 --> 00:41:25,200
background is being used you can just

939
00:41:25,200 --> 00:41:27,840
click on make sprite and what it's doing

940
00:41:27,840 --> 00:41:29,910
is sending all those URLs off to another

941
00:41:29,910 --> 00:41:33,930
open source project called cool runnings

942
00:41:33,930 --> 00:41:38,390
and getting back a getting back a

943
00:41:38,390 --> 00:41:43,320
getting back a ok and it gets back a

944
00:41:43,320 --> 00:41:45,960
sprite an image and actually injects it

945
00:41:45,960 --> 00:41:48,480
in the page right now and changes all

946
00:41:48,480 --> 00:41:51,480
the CSS and then you can export that CSS

947
00:41:51,480 --> 00:41:54,000
and save that image so you can actually

948
00:41:54,000 --> 00:41:58,590
verify that it's working on your site so

949
00:41:58,590 --> 00:42:02,070
that sprite me Oh browser scope came out

950
00:42:02,070 --> 00:42:03,690
about a month or two ago this is based

951
00:42:03,690 --> 00:42:05,910
off something I built a year ago called

952
00:42:05,910 --> 00:42:08,940
you a profiler so when chrome came out a

953
00:42:08,940 --> 00:42:11,550
year ago dionne asked me if I was go

954
00:42:11,550 --> 00:42:13,230
write a blog post about how good or bad

955
00:42:13,230 --> 00:42:15,500
it was when it came to performance and

956
00:42:15,500 --> 00:42:17,700
it was the weekend before it came out

957
00:42:17,700 --> 00:42:21,000
and so i had to find the internal link

958
00:42:21,000 --> 00:42:23,550
for the download so i could review it

959
00:42:23,550 --> 00:42:25,380
and write the blog post for the launch

960
00:42:25,380 --> 00:42:27,330
and I couldn't find that internal link

961
00:42:27,330 --> 00:42:29,460
so I said okay what I'll do is I'll

962
00:42:29,460 --> 00:42:31,100
write a bunch of

963
00:42:31,100 --> 00:42:35,280
to measure crows performance and then

964
00:42:35,280 --> 00:42:36,900
when it comes out when I go to work on

965
00:42:36,900 --> 00:42:39,210
Monday I'll install it and run it

966
00:42:39,210 --> 00:42:40,470
through the test really quick so I can

967
00:42:40,470 --> 00:42:42,530
write the blog post really quick and

968
00:42:42,530 --> 00:42:45,180
once I built these tests I thought oh

969
00:42:45,180 --> 00:42:47,250
well any browser could be run through

970
00:42:47,250 --> 00:42:49,320
these tests so i created this framework

971
00:42:49,320 --> 00:42:51,600
out of it and then my office mate

972
00:42:51,600 --> 00:42:54,930
Lindsey Simon took that and has started

973
00:42:54,930 --> 00:42:56,610
this open source project called browser

974
00:42:56,610 --> 00:42:58,950
scope and so the original test that i

975
00:42:58,950 --> 00:43:01,260
had are here in the network tab but

976
00:43:01,260 --> 00:43:03,510
we've also added acid three selectors

977
00:43:03,510 --> 00:43:06,120
api rich text edit controls i think next

978
00:43:06,120 --> 00:43:08,070
week we're launching a security module

979
00:43:08,070 --> 00:43:10,260
we've got one of the work for cookies in

980
00:43:10,260 --> 00:43:12,810
html5 and basically you go to the

981
00:43:12,810 --> 00:43:16,260
website and we don't run any tests all

982
00:43:16,260 --> 00:43:18,990
the tests are generated by you people so

983
00:43:18,990 --> 00:43:20,550
anyone with a web client that supports

984
00:43:20,550 --> 00:43:22,980
javascript can navigate to the site

985
00:43:22,980 --> 00:43:25,140
click on this how does your browser

986
00:43:25,140 --> 00:43:27,690
compare button run the test and the data

987
00:43:27,690 --> 00:43:30,300
gets stored in our database so we have

988
00:43:30,300 --> 00:43:33,180
about 30,000 people who have run tests

989
00:43:33,180 --> 00:43:38,300
across maybe 200 or 300 unique browsers

990
00:43:38,300 --> 00:43:41,190
and so it's a great resource for

991
00:43:41,190 --> 00:43:43,620
developers to know what the browser

992
00:43:43,620 --> 00:43:45,030
they're working on does and does not

993
00:43:45,030 --> 00:43:47,790
support but then also it kind of

994
00:43:47,790 --> 00:43:51,030
highlights to the browser vendors what

995
00:43:51,030 --> 00:43:52,380
they're doing well and what they need to

996
00:43:52,380 --> 00:43:54,630
improve on so try to keep that heat

997
00:43:54,630 --> 00:43:57,600
under them to give users a better

998
00:43:57,600 --> 00:44:02,400
browser experience the HTTP archive

999
00:44:02,400 --> 00:44:05,640
format so I want to create this

1000
00:44:05,640 --> 00:44:07,380
repository that stores performance

1001
00:44:07,380 --> 00:44:09,390
information for the entire internet and

1002
00:44:09,390 --> 00:44:11,670
I realized i've had this idea for a

1003
00:44:11,670 --> 00:44:13,200
couple years I realized a key component

1004
00:44:13,200 --> 00:44:16,620
was an industry standard way of saving

1005
00:44:16,620 --> 00:44:19,470
performance data for a web page and so

1006
00:44:19,470 --> 00:44:23,550
about it well in January honza from the

1007
00:44:23,550 --> 00:44:26,160
Firebug team who owns net panel said he

1008
00:44:26,160 --> 00:44:28,800
was going on an export feature so I told

1009
00:44:28,800 --> 00:44:30,900
him he should hook up with Simon Perkins

1010
00:44:30,900 --> 00:44:34,140
of HTTP watch who already did exporting

1011
00:44:34,140 --> 00:44:36,540
but in a proprietary format and get them

1012
00:44:36,540 --> 00:44:39,120
to agree on an open source format and if

1013
00:44:39,120 --> 00:44:41,490
fire bug net panel and HTTP watch who

1014
00:44:41,490 --> 00:44:43,620
are both very popular have a way of

1015
00:44:43,620 --> 00:44:44,369
exporting

1016
00:44:44,369 --> 00:44:46,559
and importing data that it would get

1017
00:44:46,559 --> 00:44:48,269
adopted as an industry standard and I

1018
00:44:48,269 --> 00:44:50,190
think we're seeing that happen so my

1019
00:44:50,190 --> 00:44:51,930
contributions to this project were

1020
00:44:51,930 --> 00:44:54,990
twofold I introduced honza and Simon and

1021
00:44:54,990 --> 00:44:57,359
I chose the three-letter suffix for the

1022
00:44:57,359 --> 00:45:04,890
file names I'm serious so it actually

1023
00:45:04,890 --> 00:45:08,400
works now you have to get a nightly

1024
00:45:08,400 --> 00:45:12,569
build of Firefox to get export to work

1025
00:45:12,569 --> 00:45:15,660
in Firebug but if you read my blog you

1026
00:45:15,660 --> 00:45:17,400
can see that and then the last thing I

1027
00:45:17,400 --> 00:45:19,859
wanted to mention i wouldn't plug stuff

1028
00:45:19,859 --> 00:45:21,720
you know just for the commercial value

1029
00:45:21,720 --> 00:45:23,849
of plugging it I think velocity is a

1030
00:45:23,849 --> 00:45:25,349
really good resource if you care about

1031
00:45:25,349 --> 00:45:27,569
web performance and we're going to start

1032
00:45:27,569 --> 00:45:30,599
doing webinars maybe like once a quarter

1033
00:45:30,599 --> 00:45:32,940
so the first one of these is december

1034
00:45:32,940 --> 00:45:37,079
eight it's 92 about noon pacific time

1035
00:45:37,079 --> 00:45:41,759
and we're going to have us someone from

1036
00:45:41,759 --> 00:45:43,559
strange loop their talk they were the

1037
00:45:43,559 --> 00:45:45,749
ones who ran that study about the

1038
00:45:45,749 --> 00:45:47,940
typical ecommerce site so he's going to

1039
00:45:47,940 --> 00:45:50,269
dig into those stats a little bit more

1040
00:45:50,269 --> 00:45:52,440
charles jolly from sprout core is going

1041
00:45:52,440 --> 00:45:54,749
to talk about the more recent results he

1042
00:45:54,749 --> 00:45:56,460
has about that javascript loading

1043
00:45:56,460 --> 00:45:58,950
there's go be a cool thing from google

1044
00:45:58,950 --> 00:46:01,349
to talk about our tour Bergman is go

1045
00:46:01,349 --> 00:46:04,349
talk about stuff more on the op side and

1046
00:46:04,349 --> 00:46:06,420
we'll have I think kind of a high-level

1047
00:46:06,420 --> 00:46:08,190
talk I think it's going to be from Chris

1048
00:46:08,190 --> 00:46:11,339
Andersen not Damien of CouchDB so where

1049
00:46:11,339 --> 00:46:13,140
are the takeaways focus on the front end

1050
00:46:13,140 --> 00:46:15,630
don't stop focusing on the back end but

1051
00:46:15,630 --> 00:46:17,160
I think we've had a disproportionate

1052
00:46:17,160 --> 00:46:19,319
amount of our performance optimization

1053
00:46:19,319 --> 00:46:21,359
resources focusing on the back end and

1054
00:46:21,359 --> 00:46:23,609
when in reality the front end is where

1055
00:46:23,609 --> 00:46:25,799
we have the most room for improvement so

1056
00:46:25,799 --> 00:46:27,089
make sure that you're getting an

1057
00:46:27,089 --> 00:46:28,890
appropriate amount of focus on the front

1058
00:46:28,890 --> 00:46:32,039
end run why slow and PageSpeed you

1059
00:46:32,039 --> 00:46:33,509
really need to run both of them to get a

1060
00:46:33,509 --> 00:46:35,430
full coverage of the performance

1061
00:46:35,430 --> 00:46:38,730
optimizations that are well known and i

1062
00:46:38,730 --> 00:46:40,109
think really look at how you're

1063
00:46:40,109 --> 00:46:41,730
rendering your page and make sure you're

1064
00:46:41,730 --> 00:46:43,890
not doing too much in javascript for the

1065
00:46:43,890 --> 00:46:45,869
initial user experience try to do as

1066
00:46:45,869 --> 00:46:47,819
much of that server side in HTML as

1067
00:46:47,819 --> 00:46:51,119
possible I really think already now in

1068
00:46:51,119 --> 00:46:52,829
the search marketplace but I think in

1069
00:46:52,829 --> 00:46:54,890
other marketplaces we're going to see

1070
00:46:54,890 --> 00:46:56,920
speed become a competitive

1071
00:46:56,920 --> 00:46:59,350
advantage so I really recommend that you

1072
00:46:59,350 --> 00:47:01,750
you start adopting these performance

1073
00:47:01,750 --> 00:47:03,670
best practices before one of your

1074
00:47:03,670 --> 00:47:21,949
competitors does and passes you by thank

1075
00:47:21,959 --> 00:47:24,099
so if there are any questions I'd be

1076
00:47:24,099 --> 00:47:26,140
happy to take questions and if we run

1077
00:47:26,140 --> 00:47:29,410
out of time I'll be here you know

1078
00:47:29,410 --> 00:47:32,259
forever so there any are there any

