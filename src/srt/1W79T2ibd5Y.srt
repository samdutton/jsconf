1
00:00:02,220 --> 00:00:10,150

[Music]

2
00:00:10,160 --> 00:00:16,199
hey everyone hi you ready for the last

3
00:00:16,199 --> 00:00:20,699
set of talks oh sure yeah why not cool

4
00:00:20,699 --> 00:00:23,189
them hi I'm Sam I'm also known as snug

5
00:00:23,189 --> 00:00:25,140
UGG throughout the internet this is the

6
00:00:25,140 --> 00:00:26,820
Houdini bunny if you want Houdini bunny

7
00:00:26,820 --> 00:00:29,189
stickers come find me I have a bunch of

8
00:00:29,189 --> 00:00:31,320
them and this talk is available online

9
00:00:31,320 --> 00:00:33,059
at that link

10
00:00:33,059 --> 00:00:34,860
don't worry that link will be up again

11
00:00:34,860 --> 00:00:38,520
at the end of the talk so what is

12
00:00:38,520 --> 00:00:40,170
Houdini for those of you who haven't

13
00:00:40,170 --> 00:00:43,320
been following a web standard that

14
00:00:43,320 --> 00:00:45,239
doesn't really exist in any browsers yet

15
00:00:45,239 --> 00:00:48,809
well the objective of the CSS tag

16
00:00:48,809 --> 00:00:52,559
Houdini task force or CSS Houdini is to

17
00:00:52,559 --> 00:00:54,449
jointly develop features that explain

18
00:00:54,449 --> 00:00:57,480
the magic of styling and layout on the

19
00:00:57,480 --> 00:00:58,640
web

20
00:00:58,640 --> 00:01:00,480
practically though what does that mean

21
00:01:00,480 --> 00:01:02,940
well it means extending CSS via

22
00:01:02,940 --> 00:01:05,820
JavaScript so that authors like us don't

23
00:01:05,820 --> 00:01:07,950
have to wait decades for browsers and

24
00:01:07,950 --> 00:01:10,250
standards bodies to implement new things

25
00:01:10,250 --> 00:01:12,810
but wait you say can't we do that

26
00:01:12,810 --> 00:01:15,900
already and the answer is not quite it's

27
00:01:15,900 --> 00:01:18,540
not currently possible to extend CSS

28
00:01:18,540 --> 00:01:21,000
through JavaScript it's only possible to

29
00:01:21,000 --> 00:01:22,619
mimic job or write JavaScript that

30
00:01:22,619 --> 00:01:26,759
mimics CSS actually polyfill in CSS or

31
00:01:26,759 --> 00:01:29,369
introducing new features like CSS grid

32
00:01:29,369 --> 00:01:31,799
is hard to impossible to do today

33
00:01:31,799 --> 00:01:34,259
especially so without being just

34
00:01:34,259 --> 00:01:36,229
terrible for performance

35
00:01:36,229 --> 00:01:38,700
Houdini will actually let authors tap

36
00:01:38,700 --> 00:01:41,670
into these actual CSS engine finally

37
00:01:41,670 --> 00:01:44,880
letting them extend CSS and do so at CSS

38
00:01:44,880 --> 00:01:47,939
engine speeds I like to think about it

39
00:01:47,939 --> 00:01:50,250
like this much like service workers are

40
00:01:50,250 --> 00:01:52,079
a low-level JavaScript API for the

41
00:01:52,079 --> 00:01:54,329
browser's cache Houdini introduces

42
00:01:54,329 --> 00:01:56,250
low-level JavaScript API is for the

43
00:01:56,250 --> 00:01:59,670
browser's render engines and I think

44
00:01:59,670 --> 00:02:04,560
that's pretty cool so the question that

45
00:02:04,560 --> 00:02:07,170
I always get is can I use it yet and the

46
00:02:07,170 --> 00:02:11,069
answer is unequivocally no no you cannot

47
00:02:11,069 --> 00:02:12,260
use it yet

48
00:02:12,260 --> 00:02:16,099
but I mean maybe kind of things are

49
00:02:16,099 --> 00:02:18,080
coming the web's changing a little bit

50
00:02:18,080 --> 00:02:20,750
so maybe you kind of so normally it's a

51
00:02:20,750 --> 00:02:23,989
warning today it's a heads-up so voodini

52
00:02:23,989 --> 00:02:25,940
is getting pretty stable and you can

53
00:02:25,940 --> 00:02:27,709
kind of start to use it in some browsers

54
00:02:27,709 --> 00:02:30,590
but some of it a lot of it is pretty far

55
00:02:30,590 --> 00:02:33,290
off and landscapes like I said really in

56
00:02:33,290 --> 00:02:35,060
flux most of what we're going to be

57
00:02:35,060 --> 00:02:37,610
talking about today is the mostly stable

58
00:02:37,610 --> 00:02:39,019
bit but you're gonna need to use

59
00:02:39,019 --> 00:02:40,370
polyfills and get your progressive

60
00:02:40,370 --> 00:02:42,230
enhancement on in order to use this

61
00:02:42,230 --> 00:02:46,640
stuff today so let's talk about the core

62
00:02:46,640 --> 00:02:48,590
magical secrets of Houdini the stuff

63
00:02:48,590 --> 00:02:50,269
that you need to understand make

64
00:02:50,269 --> 00:02:52,640
everything else work and the first one

65
00:02:52,640 --> 00:02:55,129
is this thing called worklets worklets

66
00:02:55,129 --> 00:02:58,000
our extension points for render engines

67
00:02:58,000 --> 00:03:00,739
they're kind of like web workers but

68
00:03:00,739 --> 00:03:02,720
they're much smaller in scope they can

69
00:03:02,720 --> 00:03:05,030
be parallelized to live on multiple

70
00:03:05,030 --> 00:03:07,519
threads and most importantly you don't

71
00:03:07,519 --> 00:03:09,560
call them the render engine calls them

72
00:03:09,560 --> 00:03:10,970
they're an extension of the render

73
00:03:10,970 --> 00:03:14,299
engine so this is what adding one looks

74
00:03:14,299 --> 00:03:16,340
like you have a demo worklet and add

75
00:03:16,340 --> 00:03:17,870
module and then a path to whatever your

76
00:03:17,870 --> 00:03:21,260
workload is these are also promises so

77
00:03:21,260 --> 00:03:23,269
you can promise all of them and then off

78
00:03:23,269 --> 00:03:25,910
of them to do work once your worklets

79
00:03:25,910 --> 00:03:29,419
are loaded every worklet has this kind

80
00:03:29,419 --> 00:03:31,690
of shape to it it's got a function that

81
00:03:31,690 --> 00:03:33,560
function is the function that gets

82
00:03:33,560 --> 00:03:36,410
called that function has a name which is

83
00:03:36,410 --> 00:03:37,400
the thing you're actually going to use

84
00:03:37,400 --> 00:03:40,370
in CSS and then there's a class and all

85
00:03:40,370 --> 00:03:41,959
classes will have some sort of process

86
00:03:41,959 --> 00:03:43,669
function which is the actual thing the

87
00:03:43,669 --> 00:03:45,470
render engine is calling whenever it

88
00:03:45,470 --> 00:03:47,329
wants to use your worklet you'll see a

89
00:03:47,329 --> 00:03:50,900
couple examples of this later on let's

90
00:03:50,900 --> 00:03:52,040
take a look at the life cycle of a

91
00:03:52,040 --> 00:03:53,959
worklet we have our render engine our

92
00:03:53,959 --> 00:03:56,419
render engine spins up the main thread

93
00:03:56,419 --> 00:03:59,000
once it's spun up the main thread will

94
00:03:59,000 --> 00:04:01,489
also spin up multiple worklet processes

95
00:04:01,489 --> 00:04:03,980
these work that processes can either be

96
00:04:03,980 --> 00:04:05,690
on the main thread or they can be

97
00:04:05,690 --> 00:04:08,030
parallel to the main thread it doesn't

98
00:04:08,030 --> 00:04:08,329
matter

99
00:04:08,329 --> 00:04:09,709
they're just going to be a bunch of them

100
00:04:09,709 --> 00:04:12,859
sitting around from the main thread

101
00:04:12,859 --> 00:04:13,940
we're going to call our browser

102
00:04:13,940 --> 00:04:16,010
JavaScript and our browser Java scripts

103
00:04:16,010 --> 00:04:18,349
gonna call worklet Add module that's

104
00:04:18,349 --> 00:04:20,239
going to load a worklet and the worklet

105
00:04:20,239 --> 00:04:22,729
will load into two or more work with

106
00:04:22,729 --> 00:04:25,130
processes now here's where things get

107
00:04:25,130 --> 00:04:26,060
interesting and

108
00:04:26,060 --> 00:04:27,470
of our browser JavaScript calling our

109
00:04:27,470 --> 00:04:29,600
worklet the render engine calls our

110
00:04:29,600 --> 00:04:31,730
worklet when it needs to do a render

111
00:04:31,730 --> 00:04:34,120
when it needs to use it

112
00:04:34,120 --> 00:04:36,139
worklets are the underlying foundation

113
00:04:36,139 --> 00:04:38,540
for which all of Houdini is based the

114
00:04:38,540 --> 00:04:40,130
the magic that makes it happen it's what

115
00:04:40,130 --> 00:04:46,120
makes Houdini powerful next bit typed om

116
00:04:46,120 --> 00:04:48,830
the typed om expose the structure beyond

117
00:04:48,830 --> 00:04:50,090
simple strings which is what we have

118
00:04:50,090 --> 00:04:53,210
today for CSS values these can be

119
00:04:53,210 --> 00:04:55,220
manipulated and retrieved really

120
00:04:55,220 --> 00:04:56,900
performant lis and they're part of this

121
00:04:56,900 --> 00:05:00,139
new CSS style value class and there are

122
00:05:00,139 --> 00:05:01,520
buncha turan options there's keyword

123
00:05:01,520 --> 00:05:03,770
values like idents there's position

124
00:05:03,770 --> 00:05:06,260
values transform values unit values and

125
00:05:06,260 --> 00:05:09,410
some math so this is what it looks like

126
00:05:09,410 --> 00:05:11,240
we've got a class of example with a

127
00:05:11,240 --> 00:05:13,160
background position of center bottom 10

128
00:05:13,160 --> 00:05:16,280
pixels now trying to parse that out from

129
00:05:16,280 --> 00:05:18,590
that string is really hard but with the

130
00:05:18,590 --> 00:05:20,960
type 2 m we can get its computed map

131
00:05:20,960 --> 00:05:24,229
sire computed style map and then we can

132
00:05:24,229 --> 00:05:26,750
get background position X and that comes

133
00:05:26,750 --> 00:05:29,870
back as a CSS unit value with a value of

134
00:05:29,870 --> 00:05:33,190
50 and a unit of percentage or %

135
00:05:33,190 --> 00:05:37,220
background position Y it's a sum of 100

136
00:05:37,220 --> 00:05:38,630
percent because that's bottom that's

137
00:05:38,630 --> 00:05:40,640
going to the bottom and then negative 10

138
00:05:40,640 --> 00:05:42,470
pixels because after that bottom 10

139
00:05:42,470 --> 00:05:44,690
pixels bit means in CSS so we know now

140
00:05:44,690 --> 00:05:46,789
no longer need to string parse this and

141
00:05:46,789 --> 00:05:49,039
do disgusting reggae regex

142
00:05:49,039 --> 00:05:50,720
to actually understand what this is we

143
00:05:50,720 --> 00:05:54,380
can just call it and get it typed om

144
00:05:54,380 --> 00:05:58,490
gives us the structure we need to cast

145
00:05:58,490 --> 00:06:02,419
the spells that we want but what can you

146
00:06:02,419 --> 00:06:04,639
do with this you might say well you can

147
00:06:04,639 --> 00:06:07,760
do put some pretty rad things let's talk

148
00:06:07,760 --> 00:06:09,440
about the rad custom stuff that you can

149
00:06:09,440 --> 00:06:14,510
do with worklets and the typed om please

150
00:06:14,510 --> 00:06:16,669
allow me to introduce or reintroduce you

151
00:06:16,669 --> 00:06:21,320
to window dot CSS and the first api

152
00:06:21,320 --> 00:06:23,270
we're going to look at is the properties

153
00:06:23,270 --> 00:06:27,650
and values api aka make the snozzberries

154
00:06:27,650 --> 00:06:31,280
taste like snozzberries so this is kind

155
00:06:31,280 --> 00:06:32,780
of the current state of custom

156
00:06:32,780 --> 00:06:34,909
properties CSS variables we have

157
00:06:34,909 --> 00:06:36,380
something called my color we set it to

158
00:06:36,380 --> 00:06:39,320
green and then we set it to a URL that's

159
00:06:39,320 --> 00:06:39,970
not a color

160
00:06:39,970 --> 00:06:42,580
and everything is sad because urls not a

161
00:06:42,580 --> 00:06:45,430
color and it doesn't know what to do but

162
00:06:45,430 --> 00:06:47,980
then we can do window dot CSS dot

163
00:06:47,980 --> 00:06:50,620
Register property tell it the property

164
00:06:50,620 --> 00:06:53,590
my color has a syntax of color and now

165
00:06:53,590 --> 00:06:55,510
the browser knows it's a color because

166
00:06:55,510 --> 00:06:57,760
the browser knows it's a color that URL

167
00:06:57,760 --> 00:06:59,740
junk is gonna get skipped which is

168
00:06:59,740 --> 00:07:02,590
really nice there are a couple other

169
00:07:02,590 --> 00:07:04,750
things we can do with it we can decide

170
00:07:04,750 --> 00:07:07,090
whether or not inherits up the Dom or we

171
00:07:07,090 --> 00:07:12,610
can also give it an initial value boom

172
00:07:12,610 --> 00:07:14,440
there we go there are a bunch of

173
00:07:14,440 --> 00:07:15,640
different types that you can use the

174
00:07:15,640 --> 00:07:17,740
syntax so you can great lengths you can

175
00:07:17,740 --> 00:07:20,140
create numbers percentages images colors

176
00:07:20,140 --> 00:07:23,230
times resolutions all sorts of different

177
00:07:23,230 --> 00:07:25,780
types for this syntax and you can

178
00:07:25,780 --> 00:07:29,080
combine them so a single item is just a

179
00:07:29,080 --> 00:07:31,570
single item length you can combine them

180
00:07:31,570 --> 00:07:33,760
with a bar separator for an or so in

181
00:07:33,760 --> 00:07:37,240
this case it's an image or a URL if you

182
00:07:37,240 --> 00:07:38,890
have custom idents you can combine a

183
00:07:38,890 --> 00:07:41,080
bunch of them so big bigger and all caps

184
00:07:41,080 --> 00:07:43,120
bigger are three different valid ID ends

185
00:07:43,120 --> 00:07:47,380
if you have a plus that's a space

186
00:07:47,380 --> 00:07:49,030
separated this so in this case the space

187
00:07:49,030 --> 00:07:51,070
separate a list of lengths and then if

188
00:07:51,070 --> 00:07:51,970
you have a hash

189
00:07:51,970 --> 00:07:56,980
it's a comma separated list now now that

190
00:07:56,980 --> 00:07:58,360
a browser actually knows what it is we

191
00:07:58,360 --> 00:08:00,940
can do some pretty interesting things so

192
00:08:00,940 --> 00:08:07,480
we have over here a two buttons styled

193
00:08:07,480 --> 00:08:09,400
with a linear gradient and a custom

194
00:08:09,400 --> 00:08:12,220
property now if I hover over the

195
00:08:12,220 --> 00:08:14,440
unregistered one it does exactly what we

196
00:08:14,440 --> 00:08:16,990
think it does nothing it just pops into

197
00:08:16,990 --> 00:08:18,610
that next color because we can't

198
00:08:18,610 --> 00:08:21,540
transition linear gradients right well

199
00:08:21,540 --> 00:08:24,790
now that we know what a custom property

200
00:08:24,790 --> 00:08:26,440
is now that we know that it's a color if

201
00:08:26,440 --> 00:08:32,750
we transition the custom property then

202
00:08:32,760 --> 00:08:35,500
we can actually do things like

203
00:08:35,500 --> 00:08:37,539
transition linear gradients or

204
00:08:37,539 --> 00:08:39,159
transition anything that is a registered

205
00:08:39,159 --> 00:08:41,560
custom property and that gets really

206
00:08:41,560 --> 00:08:43,770
powerful as you'll see as we go along

207
00:08:43,770 --> 00:08:46,570
but before we do that how can you use

208
00:08:46,570 --> 00:08:48,520
them in your design systems that's the

209
00:08:48,520 --> 00:08:49,930
point of this talk right how can we use

210
00:08:49,930 --> 00:08:51,620
Houdini in design systems

211
00:08:51,620 --> 00:08:54,260
well there is a proposed declarative

212
00:08:54,260 --> 00:08:58,160
syntax for these custom properties that

213
00:08:58,160 --> 00:08:59,480
lets you write these custom properties

214
00:08:59,480 --> 00:09:02,000
not in JavaScript to put in CSS using at

215
00:09:02,000 --> 00:09:04,220
property property name and then the

216
00:09:04,220 --> 00:09:06,200
syntax and it roughly works out to the

217
00:09:06,200 --> 00:09:07,580
JavaScript on the left there on the

218
00:09:07,580 --> 00:09:10,160
right what's nice about this proposed

219
00:09:10,160 --> 00:09:12,160
syntax is you can start using it today

220
00:09:12,160 --> 00:09:15,470
with a post CSS plug in a post CSS

221
00:09:15,470 --> 00:09:17,000
plug-in you write that property syntax

222
00:09:17,000 --> 00:09:19,490
and it will spit out the JavaScript so

223
00:09:19,490 --> 00:09:21,740
you can write all your custom properties

224
00:09:21,740 --> 00:09:24,710
in your CSS deliver them as part of your

225
00:09:24,710 --> 00:09:28,280
design systems as well as the JavaScript

226
00:09:28,280 --> 00:09:30,530
for a fallback which then is

227
00:09:30,530 --> 00:09:32,060
progressively enhanced with the if

228
00:09:32,060 --> 00:09:35,930
statement so some things we can do this

229
00:09:35,930 --> 00:09:38,030
we can make CSS variables smarter so if

230
00:09:38,030 --> 00:09:40,190
we've got our main blue and we have a

231
00:09:40,190 --> 00:09:43,010
property main blue with syntax and

232
00:09:43,010 --> 00:09:45,230
Harrison initial value we can use that

233
00:09:45,230 --> 00:09:46,880
and in fact when the property syntax

234
00:09:46,880 --> 00:09:48,440
ships we can get rid of that initial

235
00:09:48,440 --> 00:09:51,710
main blue call entirely because it'll

236
00:09:51,710 --> 00:09:54,140
just be there available we can also make

237
00:09:54,140 --> 00:09:55,910
things like this background variable

238
00:09:55,910 --> 00:09:57,980
more intelligent by only allowing images

239
00:09:57,980 --> 00:10:00,980
or colors and not allowing it to inherit

240
00:10:00,980 --> 00:10:03,530
up the Dom right now all CSS variables

241
00:10:03,530 --> 00:10:05,450
inherit up the Dom which is not

242
00:10:05,450 --> 00:10:06,350
something you really want for a

243
00:10:06,350 --> 00:10:09,920
background oh it's really cool when we

244
00:10:09,920 --> 00:10:11,210
started to talk about worklets is you

245
00:10:11,210 --> 00:10:14,030
can make truly custom properties so you

246
00:10:14,030 --> 00:10:15,830
can do things like theme colors where

247
00:10:15,830 --> 00:10:18,520
you have identify that you want to allow

248
00:10:18,520 --> 00:10:21,050
you can do things like create custom

249
00:10:21,050 --> 00:10:24,350
columns for layouts you can create your

250
00:10:24,350 --> 00:10:27,230
own padding properties so all these

251
00:10:27,230 --> 00:10:30,650
different actual literal custom

252
00:10:30,650 --> 00:10:31,840
properties as opposed to just

253
00:10:31,840 --> 00:10:33,470
placeholders for things you're going to

254
00:10:33,470 --> 00:10:37,380
put into another property somewhere else

255
00:10:37,390 --> 00:10:39,710
speaking of worklets let's talk about

256
00:10:39,710 --> 00:10:41,900
the paint API because as Bob Rost likes

257
00:10:41,900 --> 00:10:43,220
to say every day is a good day when you

258
00:10:43,220 --> 00:10:48,830
paint yeah Bob Ross have you ever wanted

259
00:10:48,830 --> 00:10:51,170
to use canvas as a background a mask or

260
00:10:51,170 --> 00:10:53,750
a border in CSS with the styling and

261
00:10:53,750 --> 00:10:55,790
flexibility of an element and the

262
00:10:55,790 --> 00:10:58,790
scalability of an SVG of course you

263
00:10:58,790 --> 00:11:03,620
haven't no one has but it turns out if

264
00:11:03,620 --> 00:11:05,240
you can do that it's actually really

265
00:11:05,240 --> 00:11:06,950
cool and you can do a lot of really

266
00:11:06,950 --> 00:11:10,400
interesting things so the paint API the

267
00:11:10,400 --> 00:11:12,200
class for the work that looks a little

268
00:11:12,200 --> 00:11:14,030
bit something like this we have input

269
00:11:14,030 --> 00:11:16,340
properties that's an array of properties

270
00:11:16,340 --> 00:11:18,560
either custom properties or standard

271
00:11:18,560 --> 00:11:19,760
properties you can read standard

272
00:11:19,760 --> 00:11:23,090
properties into that you want to read in

273
00:11:23,090 --> 00:11:25,100
from the element that this is that's

274
00:11:25,100 --> 00:11:28,280
being painted you can also pass input

275
00:11:28,280 --> 00:11:29,750
arguments with that same formatting

276
00:11:29,750 --> 00:11:32,930
syntax as custom properties to pass in

277
00:11:32,930 --> 00:11:35,480
arguments to the paint function and then

278
00:11:35,480 --> 00:11:37,010
the paint function is the thing that

279
00:11:37,010 --> 00:11:39,110
actually gets called it has a 2d drawing

280
00:11:39,110 --> 00:11:41,630
context the size of the element the

281
00:11:41,630 --> 00:11:43,220
properties that get passed in and the

282
00:11:43,220 --> 00:11:46,550
arguments let's write a basic paint

283
00:11:46,550 --> 00:11:48,440
worklet right now so this one's just

284
00:11:48,440 --> 00:11:51,020
going to draw a big circle we're going

285
00:11:51,020 --> 00:11:53,270
to get the circle color property we're

286
00:11:53,270 --> 00:11:56,440
going to get it from within our paint

287
00:11:56,440 --> 00:11:58,940
function and this is actually a CSS

288
00:11:58,940 --> 00:12:00,710
style value this is our type domain in

289
00:12:00,710 --> 00:12:03,260
action then we do some math to figure

290
00:12:03,260 --> 00:12:04,640
out the center point in the radius of

291
00:12:04,640 --> 00:12:08,180
our circle and we draw our circle once

292
00:12:08,180 --> 00:12:10,310
we've drawn our circle we import it and

293
00:12:10,310 --> 00:12:11,060
we get this

294
00:12:11,060 --> 00:12:13,220
I mean I've drawn a big circle in the

295
00:12:13,220 --> 00:12:16,070
middle in the middle of a thing I can

296
00:12:16,070 --> 00:12:21,050
change its color it's nice it's a it's a

297
00:12:21,050 --> 00:12:23,390
cute little circle demo but with this as

298
00:12:23,390 --> 00:12:24,710
our foundation we can do really

299
00:12:24,710 --> 00:12:27,380
interesting things so there's this guy

300
00:12:27,380 --> 00:12:28,790
named Tim Holman and he makes great

301
00:12:28,790 --> 00:12:31,040
generative art so I've converted one of

302
00:12:31,040 --> 00:12:33,320
his generative art demos into an actual

303
00:12:33,320 --> 00:12:37,670
paint background using this so I can

304
00:12:37,670 --> 00:12:39,800
decide how many steps that I want I

305
00:12:39,800 --> 00:12:43,400
start with 50 but if I do 40 and I every

306
00:12:43,400 --> 00:12:45,350
time I reload the page it randomly

307
00:12:45,350 --> 00:12:47,540
generates a new background image for me

308
00:12:47,540 --> 00:12:51,650
I do this with very few lines of CSS I

309
00:12:51,650 --> 00:12:53,540
don't need to load a new image in and

310
00:12:53,540 --> 00:12:56,060
it's all controllable through actual CSS

311
00:12:56,060 --> 00:12:58,550
the worklet isn't so big it's smaller

312
00:12:58,550 --> 00:13:00,380
than loading an image and you can get an

313
00:13:00,380 --> 00:13:02,000
infinite number of randomly generated

314
00:13:02,000 --> 00:13:04,370
backgrounds this way much more

315
00:13:04,370 --> 00:13:05,960
interesting and much more performant

316
00:13:05,960 --> 00:13:08,090
then just loading in a bunch of random

317
00:13:08,090 --> 00:13:11,450
images you can even combine the paint

318
00:13:11,450 --> 00:13:14,480
worklet with that custom property

319
00:13:14,480 --> 00:13:15,410
transition

320
00:13:15,410 --> 00:13:17,510
and you can do something like this and

321
00:13:17,510 --> 00:13:19,730
create a nice little ripple effect by

322
00:13:19,730 --> 00:13:22,430
figuring out where you clicked and then

323
00:13:22,430 --> 00:13:27,260
toggling on a class that has the end

324
00:13:27,260 --> 00:13:29,000
transition state that you want and

325
00:13:29,000 --> 00:13:34,220
transitioning through our paint cool how

326
00:13:34,220 --> 00:13:37,550
can I use this in design systems well

327
00:13:37,550 --> 00:13:39,830
there's a polyfill for it and it works

328
00:13:39,830 --> 00:13:41,990
pretty well anywhere that has canvas and

329
00:13:41,990 --> 00:13:43,610
you're gonna want CSS variables as well

330
00:13:43,610 --> 00:13:45,260
it especially works pretty well in

331
00:13:45,260 --> 00:13:49,550
Firefox and Safari what I think Design

332
00:13:49,550 --> 00:13:50,150
Systems

333
00:13:50,150 --> 00:13:51,890
I think web components or I think

334
00:13:51,890 --> 00:13:54,260
components and when I write components I

335
00:13:54,260 --> 00:13:55,730
think web components I've been using

336
00:13:55,730 --> 00:13:57,980
them recently I really like them and I

337
00:13:57,980 --> 00:13:59,540
think that they're a great way to

338
00:13:59,540 --> 00:14:02,390
encapsulate styling and functionality

339
00:14:02,390 --> 00:14:04,580
and we're gonna use it today to build

340
00:14:04,580 --> 00:14:07,820
our our version of a paint button

341
00:14:07,820 --> 00:14:09,260
although buttons aren't as cool what

342
00:14:09,260 --> 00:14:12,770
we're gonna build so we have this basic

343
00:14:12,770 --> 00:14:15,710
demo of tabs we have a tab you switch

344
00:14:15,710 --> 00:14:18,400
tabs everything switch is hunky-dory

345
00:14:18,400 --> 00:14:21,470
except these tabs have that cute little

346
00:14:21,470 --> 00:14:23,750
rounded corner going out at the bottom

347
00:14:23,750 --> 00:14:26,120
which if you've ever tried to actually

348
00:14:26,120 --> 00:14:29,300
do is not so straightforward especially

349
00:14:29,300 --> 00:14:31,570
if you want it styler Bowl through CSS

350
00:14:31,570 --> 00:14:34,370
and without any extra elements so what

351
00:14:34,370 --> 00:14:35,900
we're gonna do is we're going to write a

352
00:14:35,900 --> 00:14:38,330
paint function a paint worklet that will

353
00:14:38,330 --> 00:14:40,580
write those for us and style it based

354
00:14:40,580 --> 00:14:45,360
off of the background color of our tab

355
00:14:45,370 --> 00:14:47,630
so starting with a web component you

356
00:14:47,630 --> 00:14:49,820
start by writing a template a template

357
00:14:49,820 --> 00:14:50,570
has an ID

358
00:14:50,570 --> 00:14:52,340
it has our styling the styling lives

359
00:14:52,340 --> 00:14:54,440
inside of our template and it's only

360
00:14:54,440 --> 00:14:56,150
going to affect this web component it

361
00:14:56,150 --> 00:14:59,410
won't leak outside we've got a couple

362
00:14:59,410 --> 00:15:02,210
variables up top CSS variables where

363
00:15:02,210 --> 00:15:04,130
we're using a property we're passing in

364
00:15:04,130 --> 00:15:05,900
called tab multiplier to do some math

365
00:15:05,900 --> 00:15:08,720
for us to make sure that our bottom

366
00:15:08,720 --> 00:15:10,160
rounded corners and our top rounded

367
00:15:10,160 --> 00:15:13,190
corners all kind of continue to to be in

368
00:15:13,190 --> 00:15:15,950
sync with each other and then we do some

369
00:15:15,950 --> 00:15:18,860
of the actual a little bit annoying CSS

370
00:15:18,860 --> 00:15:22,010
to get border images working with paint

371
00:15:22,010 --> 00:15:24,950
and then we're good with our styling for

372
00:15:24,950 --> 00:15:27,350
our HTML this is pretty basic

373
00:15:27,350 --> 00:15:28,590
it's a div

374
00:15:28,590 --> 00:15:31,800
and we have this part L or part

375
00:15:31,800 --> 00:15:34,920
attribute on it to allow us to expose

376
00:15:34,920 --> 00:15:36,900
styling outside of our web component

377
00:15:36,900 --> 00:15:39,420
this is part of the new shadow parts

378
00:15:39,420 --> 00:15:43,200
spec for web components the JavaScript

379
00:15:43,200 --> 00:15:44,700
for getting this to actually work and be

380
00:15:44,700 --> 00:15:47,400
usable is very straightforward on the

381
00:15:47,400 --> 00:15:48,870
Left we've got our CSS paint

382
00:15:48,870 --> 00:15:51,150
registrations or sorry property

383
00:15:51,150 --> 00:15:53,160
registrations and we're adding our

384
00:15:53,160 --> 00:15:55,290
worklet for our paint module or paint

385
00:15:55,290 --> 00:15:57,780
worklet and then on the right is all the

386
00:15:57,780 --> 00:15:59,760
JavaScript I need to turn that template

387
00:15:59,760 --> 00:16:02,400
into a reusable web component I extend

388
00:16:02,400 --> 00:16:05,130
the HTML element I grab the content of

389
00:16:05,130 --> 00:16:06,720
that template and attach it to the

390
00:16:06,720 --> 00:16:09,330
shadow DOM and then under custom

391
00:16:09,330 --> 00:16:11,760
elements I define a rounded tab using

392
00:16:11,760 --> 00:16:14,310
that class it's six lines of JavaScript

393
00:16:14,310 --> 00:16:17,220
it's not so terribly hard to do and in

394
00:16:17,220 --> 00:16:19,580
the end we get this what we just saw

395
00:16:19,580 --> 00:16:23,370
tabs tabs tabs but because we've

396
00:16:23,370 --> 00:16:25,410
encapsulated it we can start to do

397
00:16:25,410 --> 00:16:28,410
things like make everything more round

398
00:16:28,410 --> 00:16:33,360
or even more round and we get those nice

399
00:16:33,360 --> 00:16:37,550
rounded transitions from those tabs

400
00:16:37,550 --> 00:16:40,410
dynamically through this CSS control

401
00:16:40,410 --> 00:16:43,260
through our CSS we can even do things

402
00:16:43,260 --> 00:16:44,910
like change the tab position so if we

403
00:16:44,910 --> 00:16:46,350
look at our first tab this is on the

404
00:16:46,350 --> 00:16:49,320
left we could say instead we want it on

405
00:16:49,320 --> 00:16:51,090
the right and our rounded corner moves

406
00:16:51,090 --> 00:16:55,020
to the other end or the middle and now

407
00:16:55,020 --> 00:16:58,290
it's on both go back to left and because

408
00:16:58,290 --> 00:17:00,570
we're using paint which can read in

409
00:17:00,570 --> 00:17:02,070
regular properties I can change the

410
00:17:02,070 --> 00:17:03,510
background of this tab to something like

411
00:17:03,510 --> 00:17:05,580
purple and it will change what I've

412
00:17:05,580 --> 00:17:08,490
painted as well no extra elements no

413
00:17:08,490 --> 00:17:11,160
extra loading of anything this one paint

414
00:17:11,160 --> 00:17:13,200
worklet is able to do all of that with

415
00:17:13,200 --> 00:17:19,590
standard CSS backing it up now the final

416
00:17:19,590 --> 00:17:20,640
thing we're going to talk about is the

417
00:17:20,640 --> 00:17:22,890
layout API and the layout API is a

418
00:17:22,890 --> 00:17:24,390
little bit heavy and it's super

419
00:17:24,390 --> 00:17:26,340
experimental but it's kind of cool so

420
00:17:26,340 --> 00:17:29,190
I'm gonna show it to you anyway the

421
00:17:29,190 --> 00:17:31,650
paint API lets you play Tetris with your

422
00:17:31,650 --> 00:17:35,850
web apps it literally lets you make your

423
00:17:35,850 --> 00:17:38,640
own display properties lets you do

424
00:17:38,640 --> 00:17:40,170
things like polyfill it awesome new

425
00:17:40,170 --> 00:17:41,800
layouts back that you like

426
00:17:41,800 --> 00:17:43,750
or because everyone likes a good masonry

427
00:17:43,750 --> 00:17:45,790
layout you can write one without the

428
00:17:45,790 --> 00:17:47,200
performance hit of running a bunch of

429
00:17:47,200 --> 00:17:50,540
JavaScript on the main thread

430
00:17:50,550 --> 00:17:53,320
now this specs a little bit complicated

431
00:17:53,320 --> 00:17:56,020
so I'm gonna walk you through how the

432
00:17:56,020 --> 00:17:57,790
spec thinks about layout which actually

433
00:17:57,790 --> 00:17:59,500
can help you understand how browsers

434
00:17:59,500 --> 00:18:02,080
think about layout layout starts with a

435
00:18:02,080 --> 00:18:05,470
box a box is either an element or it is

436
00:18:05,470 --> 00:18:07,720
a pseudo element the layout algorithm

437
00:18:07,720 --> 00:18:09,460
for that box is something called the

438
00:18:09,460 --> 00:18:13,480
current layout the boxes direct parent

439
00:18:13,480 --> 00:18:15,550
is the parent of the layout algorithm

440
00:18:15,550 --> 00:18:16,810
for the box's direct parent is the

441
00:18:16,810 --> 00:18:19,300
parent layout the parent layout has

442
00:18:19,300 --> 00:18:22,270
layout constraints those layout

443
00:18:22,270 --> 00:18:24,700
constraints is the available room inside

444
00:18:24,700 --> 00:18:27,970
of the parent for the box to be laid out

445
00:18:27,970 --> 00:18:30,610
in the parent layout also has layout

446
00:18:30,610 --> 00:18:32,860
edges these are your box model edges

447
00:18:32,860 --> 00:18:37,030
padding scrollbar and borders current

448
00:18:37,030 --> 00:18:39,880
layout has a child layout which is the

449
00:18:39,880 --> 00:18:42,700
layout algorithm of layout child as if

450
00:18:42,700 --> 00:18:45,400
it wasn't visible with display:none I

451
00:18:45,400 --> 00:18:47,110
didn't name these things I'm sorry

452
00:18:47,110 --> 00:18:50,140
they're named confusingly bring it up in

453
00:18:50,140 --> 00:18:54,220
the spec now layout child can't really

454
00:18:54,220 --> 00:18:56,830
do anything but what it can do is it can

455
00:18:56,830 --> 00:18:59,200
generate a layout fragment and layout

456
00:18:59,200 --> 00:19:01,540
fragments are interesting layout

457
00:19:01,540 --> 00:19:03,970
fragments have an in-line size and a

458
00:19:03,970 --> 00:19:05,980
block size this goes back to the

459
00:19:05,980 --> 00:19:07,750
abstract sizing stuff that we talked

460
00:19:07,750 --> 00:19:08,980
about all right that I think was

461
00:19:08,980 --> 00:19:12,310
mentioned earlier so in line sizing and

462
00:19:12,310 --> 00:19:13,870
block sizing this is stuff we can't

463
00:19:13,870 --> 00:19:16,600
change we can't actually change the size

464
00:19:16,600 --> 00:19:18,100
of elements when we go to lay them out

465
00:19:18,100 --> 00:19:20,980
but we can change their inline offset

466
00:19:20,980 --> 00:19:23,110
and block offset that's how we actually

467
00:19:23,110 --> 00:19:26,950
position stuff around cool with that out

468
00:19:26,950 --> 00:19:28,420
of the way let's take a look at layout

469
00:19:28,420 --> 00:19:32,080
we've got input properties input

470
00:19:32,080 --> 00:19:33,430
properties are actually things that go

471
00:19:33,430 --> 00:19:36,040
on the parent layout so

472
00:19:36,040 --> 00:19:38,530
layout API layout worklets they start

473
00:19:38,530 --> 00:19:40,240
from the parent layout down as opposed

474
00:19:40,240 --> 00:19:42,610
to the current layout up so input

475
00:19:42,610 --> 00:19:44,920
properties these are things like your

476
00:19:44,920 --> 00:19:47,830
grid template columns on display grid

477
00:19:47,830 --> 00:19:50,320
would be input properties child input

478
00:19:50,320 --> 00:19:51,610
properties or properties you want to

479
00:19:51,610 --> 00:19:54,190
read in from the children of that layout

480
00:19:54,190 --> 00:19:55,510
so this would be

481
00:19:55,510 --> 00:19:58,630
like grid columns and then there are a

482
00:19:58,630 --> 00:20:00,640
couple layout options there are two

483
00:20:00,640 --> 00:20:02,260
functions that get called as part of

484
00:20:02,260 --> 00:20:04,060
this one is intrinsic sizing or

485
00:20:04,060 --> 00:20:07,780
intrinsic size which will figure out how

486
00:20:07,780 --> 00:20:11,530
much room a block should take up and

487
00:20:11,530 --> 00:20:13,390
layout which is the actual function that

488
00:20:13,390 --> 00:20:16,810
we do our layout in now the internal

489
00:20:16,810 --> 00:20:19,600
some intrinsic sizing are really complex

490
00:20:19,600 --> 00:20:22,480
so we're not going to cover them the

491
00:20:22,480 --> 00:20:24,610
easiest way to think about it is what

492
00:20:24,610 --> 00:20:26,370
you're trying to figure out here is

493
00:20:26,370 --> 00:20:29,830
given an unlimited amount of space how

494
00:20:29,830 --> 00:20:33,190
big can we make a box so there's not a

495
00:20:33,190 --> 00:20:36,670
lot of unused space and then also how

496
00:20:36,670 --> 00:20:38,170
small can we make that box without

497
00:20:38,170 --> 00:20:40,480
having any of the content overflow and

498
00:20:40,480 --> 00:20:41,620
once we figure out how big it can

499
00:20:41,620 --> 00:20:43,480
possibly be and how small it can

500
00:20:43,480 --> 00:20:46,210
possibly be then we return that and the

501
00:20:46,210 --> 00:20:48,070
browser figures out where it goes in

502
00:20:48,070 --> 00:20:51,520
between those two things but the layout

503
00:20:51,520 --> 00:20:53,230
function that's pretty easy to

504
00:20:53,230 --> 00:20:55,510
understand the first thing we need to do

505
00:20:55,510 --> 00:20:58,720
is we need to figure out what the total

506
00:20:58,720 --> 00:21:00,550
size is that we can lay out our children

507
00:21:00,550 --> 00:21:03,730
in so that's our inline size - our edge

508
00:21:03,730 --> 00:21:06,760
inline and our block size - our block in

509
00:21:06,760 --> 00:21:09,760
line bundle that up as an object and

510
00:21:09,760 --> 00:21:13,840
then we loop through each one of the

511
00:21:13,840 --> 00:21:15,820
children and generate a fragment based

512
00:21:15,820 --> 00:21:17,860
on that constraint size this is us

513
00:21:17,860 --> 00:21:21,610
generating layout constraints from there

514
00:21:21,610 --> 00:21:24,220
we start actually laying stuff out we

515
00:21:24,220 --> 00:21:27,190
get the block offset started at where

516
00:21:27,190 --> 00:21:28,840
our edges start and then just loop over

517
00:21:28,840 --> 00:21:32,140
everything we make it's block offset

518
00:21:32,140 --> 00:21:35,530
whatever the block offset is we Center

519
00:21:35,530 --> 00:21:38,080
it and then we add to the block offset

520
00:21:38,080 --> 00:21:40,840
so we have an item go right one

521
00:21:40,840 --> 00:21:42,940
underneath each other and finally add

522
00:21:42,940 --> 00:21:45,730
block edges back in and we return our

523
00:21:45,730 --> 00:21:49,030
children and this new block sizing and

524
00:21:49,030 --> 00:21:50,700
we get something that looks like this

525
00:21:50,700 --> 00:21:53,890
again not super duper terribly cool is

526
00:21:53,890 --> 00:21:56,110
just a whole bunch of boxes centered on

527
00:21:56,110 --> 00:21:57,250
one on top of another

528
00:21:57,250 --> 00:21:59,560
but with this as our building block we

529
00:21:59,560 --> 00:22:01,960
can do some really cool things like

530
00:22:01,960 --> 00:22:03,370
build a layout that puts everything in a

531
00:22:03,370 --> 00:22:06,340
circle puts everything in a circle in 40

532
00:22:06,340 --> 00:22:09,160
lines of JavaScript for the worklet

533
00:22:09,160 --> 00:22:12,220
with no external dependencies at render

534
00:22:12,220 --> 00:22:15,760
engine speeds with as many elements as

535
00:22:15,760 --> 00:22:23,020
you want that's 12 that's 18 up remind

536
00:22:23,020 --> 00:22:25,480
me later I had disable notifications I'm

537
00:22:25,480 --> 00:22:28,390
glad that popped up so yeah as many

538
00:22:28,390 --> 00:22:30,070
elements as we want and we can just kind

539
00:22:30,070 --> 00:22:37,800
of keep on going but wait there's more a

540
00:22:37,800 --> 00:22:39,450
[Applause]

541
00:22:39,450 --> 00:22:42,310
masonry layout cuz everyone likes

542
00:22:42,310 --> 00:22:46,300
masonry this masonry layout is literally

543
00:22:46,300 --> 00:22:49,600
45 lines of JavaScript with no

544
00:22:49,600 --> 00:22:53,260
dependencies at render engine speeds you

545
00:22:53,260 --> 00:22:55,840
can see it goes across one two three

546
00:22:55,840 --> 00:22:58,570
four five six seven eight nine ten

547
00:22:58,570 --> 00:23:01,300
eleven it's packing it all in there if I

548
00:23:01,300 --> 00:23:04,540
go to my CSS if I want columns let's say

549
00:23:04,540 --> 00:23:06,280
I want five columns now it's slow

550
00:23:06,280 --> 00:23:07,990
because the images are reloading every

551
00:23:07,990 --> 00:23:11,800
time but I have a masonry layout with

552
00:23:11,800 --> 00:23:16,170
almost no overhead and I can make it

553
00:23:16,170 --> 00:23:18,580
with no padding in between now I've got

554
00:23:18,580 --> 00:23:21,970
this nice tight dense grid and that's

555
00:23:21,970 --> 00:23:24,760
that something everyone loves but I've

556
00:23:24,760 --> 00:23:26,620
got one more thing for you yeah you can

557
00:23:26,620 --> 00:23:33,280
clap for masonry layout

558
00:23:33,290 --> 00:23:36,210
I've got one less thing how do we use

559
00:23:36,210 --> 00:23:38,760
this in our design systems well make

560
00:23:38,760 --> 00:23:40,200
sure you layout we know how we use cuz

561
00:23:40,200 --> 00:23:45,360
we can lay out cards forever now but how

562
00:23:45,360 --> 00:23:49,110
about this this is a demo that kind of

563
00:23:49,110 --> 00:23:50,300
uses everything that we've shown

564
00:23:50,300 --> 00:23:54,650
transitioning custom properties typed om

565
00:23:54,650 --> 00:23:57,990
custom paint worklet and that circular

566
00:23:57,990 --> 00:23:59,910
layout that I just showed you to create

567
00:23:59,910 --> 00:24:03,660
an animated circular navigation or dial

568
00:24:03,660 --> 00:24:07,530
pad navigation without any JavaScript

569
00:24:07,530 --> 00:24:10,110
for any of the animation all powered by

570
00:24:10,110 --> 00:24:12,360
CSS now the animation is gonna be a

571
00:24:12,360 --> 00:24:15,420
little bit choppy because something

572
00:24:15,420 --> 00:24:16,680
happened in Chrome Canary and it got a

573
00:24:16,680 --> 00:24:18,620
little bit choppy since I last gave this

574
00:24:18,620 --> 00:24:20,970
but it looks pretty cool

575
00:24:20,970 --> 00:24:30,370
I think right

576
00:24:30,380 --> 00:24:32,870
now it's not as cool and I do that but

577
00:24:32,870 --> 00:24:37,009
if I do that again yeah so the paint

578
00:24:37,009 --> 00:24:40,399
worklet is animating an offset the

579
00:24:40,399 --> 00:24:42,259
offset property and that's strong that

580
00:24:42,259 --> 00:24:43,940
arc and it's animating it based on our

581
00:24:43,940 --> 00:24:46,490
transition now we can do some cool

582
00:24:46,490 --> 00:24:49,159
things with this because it's all CSS if

583
00:24:49,159 --> 00:24:53,029
we do padding of 0 that'll stay the same

584
00:24:53,029 --> 00:24:55,880
but when I close it everything shrinks

585
00:24:55,880 --> 00:25:00,370
back in right now if I go really crazy

586
00:25:00,370 --> 00:25:15,570
I'll set for 95 135

587
00:25:15,580 --> 00:25:20,080
and now again this is 15 maybe lines of

588
00:25:20,080 --> 00:25:22,720
JavaScript for the paint worklet it's 40

589
00:25:22,720 --> 00:25:24,429
lines of JavaScript for the circle

590
00:25:24,429 --> 00:25:27,460
layout worklet and then everything else

591
00:25:27,460 --> 00:25:29,769
is just CSS and transitions because the

592
00:25:29,769 --> 00:25:31,539
browser knows now knows what to do and

593
00:25:31,539 --> 00:25:34,679
we're extending CSS through javascript

594
00:25:34,679 --> 00:25:39,649
and you know what I think that's awesome

595
00:25:39,659 --> 00:25:42,669
because with Houdini the future of our

596
00:25:42,669 --> 00:25:44,499
design systems and our styling is really

597
00:25:44,499 --> 00:25:46,989
bright and we all really need to party

598
00:25:46,989 --> 00:25:50,259
for that because we get to add magic to

599
00:25:50,259 --> 00:25:52,509
our design systems thank you all very

600
00:25:52,509 --> 00:26:01,980
much

601
00:26:01,990 --> 00:26:06,380
so again that's the link to the talks

602
00:26:06,380 --> 00:26:08,600
here's a bunch of other good resources

603
00:26:08,600 --> 00:26:11,350
Houdini glitch day is an interactive

604
00:26:11,350 --> 00:26:13,340
introduction to Houdini that you can

605
00:26:13,340 --> 00:26:15,290
play with your going to need Chrome

606
00:26:15,290 --> 00:26:17,990
Canary with experimental Flags on and

607
00:26:17,990 --> 00:26:19,550
yeah the source code for this talk is

608
00:26:19,550 --> 00:26:20,750
available too if you want to dig into

609
00:26:20,750 --> 00:26:23,050
all these demos thank you all

610
00:26:23,050 --> 00:26:27,610
[Applause]

