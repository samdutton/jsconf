1
00:00:15,710 --> 00:00:18,770

hi everybody I'm psyched to be here I'm

2
00:00:18,770 --> 00:00:22,220
psyched to talk about this so let's see

3
00:00:22,220 --> 00:00:24,800
I'm Adam Wolfe and today I'm gonna talk

4
00:00:24,800 --> 00:00:27,260
about rebuilding facebook chat and

5
00:00:27,260 --> 00:00:29,450
actually there was a big project going

6
00:00:29,450 --> 00:00:31,099
on to rebuild all a facebook chat

7
00:00:31,099 --> 00:00:33,140
including the back end but I gotta focus

8
00:00:33,140 --> 00:00:34,579
on the front end and the JavaScript

9
00:00:34,579 --> 00:00:37,399
rewrote it seems appropriate and you may

10
00:00:37,399 --> 00:00:39,860
wonder why we felt like we needed to

11
00:00:39,860 --> 00:00:42,350
rebuild facebook chat and you know the

12
00:00:42,350 --> 00:00:43,790
answer is that it was pretty terrible

13
00:00:43,790 --> 00:00:46,100
and I pulled something that I remembered

14
00:00:46,100 --> 00:00:48,079
from about a year ago this was like a

15
00:00:48,079 --> 00:00:50,840
blog post announcing our new subscribe

16
00:00:50,840 --> 00:00:52,340
feature so you could follow people on

17
00:00:52,340 --> 00:00:54,530
Facebook and the very first comment it

18
00:00:54,530 --> 00:00:56,089
was posted a minute after this went up

19
00:00:56,089 --> 00:00:58,730
says improve the chat system and there

20
00:00:58,730 --> 00:01:00,920
are thousand likes on that comment so um

21
00:01:00,920 --> 00:01:02,629
and actually this is a problem for us

22
00:01:02,629 --> 00:01:05,180
because the complaints about chat just

23
00:01:05,180 --> 00:01:07,700
drowned out our overall user feedback it

24
00:01:07,700 --> 00:01:09,830
was like really hard to tell when we had

25
00:01:09,830 --> 00:01:11,150
new bugs and stuff because you know

26
00:01:11,150 --> 00:01:12,670
people are always complaining about chat

27
00:01:12,670 --> 00:01:15,680
and facebook chats I think it's somewhat

28
00:01:15,680 --> 00:01:17,600
unique as a client-side application

29
00:01:17,600 --> 00:01:19,939
because it's embedded in this browse

30
00:01:19,939 --> 00:01:21,560
experience you know Facebook is still

31
00:01:21,560 --> 00:01:23,509
delivered very much as like a page to

32
00:01:23,509 --> 00:01:26,390
page classic web application so we can't

33
00:01:26,390 --> 00:01:28,130
afford to like load a bunch of code and

34
00:01:28,130 --> 00:01:29,810
then go back to the server to build up a

35
00:01:29,810 --> 00:01:31,490
bunch of state because you know we're

36
00:01:31,490 --> 00:01:34,219
gonna get paged out quickly the other

37
00:01:34,219 --> 00:01:35,840
thing is that the scale of facebook chat

38
00:01:35,840 --> 00:01:38,180
is enormous it's you know at our peak

39
00:01:38,180 --> 00:01:40,340
it's hundreds of millions of concurrent

40
00:01:40,340 --> 00:01:42,979
users so every extra fetch to the

41
00:01:42,979 --> 00:01:46,159
backend means extra latency and extra

42
00:01:46,159 --> 00:01:48,289
servers you know more cost for us and

43
00:01:48,289 --> 00:01:50,780
the worse experience so you know I think

44
00:01:50,780 --> 00:01:52,130
it's kind of funny we've been doing

45
00:01:52,130 --> 00:01:54,560
JavaScript and web apps for like for a

46
00:01:54,560 --> 00:01:56,659
while now and it's still not obvious how

47
00:01:56,659 --> 00:01:58,310
you build a feature like this you know

48
00:01:58,310 --> 00:02:00,170
everyone like builds their own language

49
00:02:00,170 --> 00:02:01,700
and their own servers for this and

50
00:02:01,700 --> 00:02:03,770
everything so you know we kind of

51
00:02:03,770 --> 00:02:06,079
approach this like not not sure um how

52
00:02:06,079 --> 00:02:09,160
what we were going to do to to fix this

53
00:02:09,160 --> 00:02:12,500
and I before we go into like what we did

54
00:02:12,500 --> 00:02:14,120
I want to show a little bit about what

55
00:02:14,120 --> 00:02:16,580
facebook chat does or do people here use

56
00:02:16,580 --> 00:02:19,520
facebook chat on the web like some

57
00:02:19,520 --> 00:02:21,890
people do I I figure this is like more

58
00:02:21,890 --> 00:02:24,050
of a Twitter crab but no worries I'll

59
00:02:24,050 --> 00:02:26,450
show you what it does okay so here I

60
00:02:26,450 --> 00:02:29,420
have my alter-ego to be Co Jones his

61
00:02:29,420 --> 00:02:32,030
Facebook page and I'm going to start a

62
00:02:32,030 --> 00:02:34,010
chat with nan one of the Facebook

63
00:02:34,010 --> 00:02:36,590
contingent who's here and you know the

64
00:02:36,590 --> 00:02:38,620
very first thing I want to show is that

65
00:02:38,620 --> 00:02:41,569
when one thing that we did is oh thanks

66
00:02:41,569 --> 00:02:44,660
nan one thing that we did is let's try

67
00:02:44,660 --> 00:02:52,190
that again when we when we merged chat

68
00:02:52,190 --> 00:02:54,680
and messages you know we used to have

69
00:02:54,680 --> 00:02:56,319
two different products there was this

70
00:02:56,319 --> 00:02:58,910
there was this jewel at the top we call

71
00:02:58,910 --> 00:03:00,800
this thing up here the messages jewel

72
00:03:00,800 --> 00:03:03,110
and then we also have chat windows and

73
00:03:03,110 --> 00:03:05,360
um we merged the backend for these

74
00:03:05,360 --> 00:03:06,500
things because we felt like hey you're

75
00:03:06,500 --> 00:03:07,819
talking to your friend you know in

76
00:03:07,819 --> 00:03:09,590
either interface they should be the same

77
00:03:09,590 --> 00:03:11,630
thing but we didn't merge the front end

78
00:03:11,630 --> 00:03:14,030
of these applications so the jewel was

79
00:03:14,030 --> 00:03:16,010
controlled by like one set of client

80
00:03:16,010 --> 00:03:18,140
code and the chat window was controlled

81
00:03:18,140 --> 00:03:20,420
by another and they would get out of

82
00:03:20,420 --> 00:03:21,830
sync all the time that was actually like

83
00:03:21,830 --> 00:03:25,130
the dominant form of angry feedback so

84
00:03:25,130 --> 00:03:28,130
man will you send me another message so

85
00:03:28,130 --> 00:03:30,049
now you'll see that when nan sends me

86
00:03:30,049 --> 00:03:33,890
another thanks with nan sends me another

87
00:03:33,890 --> 00:03:35,180
message you see they appear in both

88
00:03:35,180 --> 00:03:38,209
interfaces at the same time and so like

89
00:03:38,209 --> 00:03:39,920
fundamentally like this was what we had

90
00:03:39,920 --> 00:03:41,239
to do you know we had to introduce a

91
00:03:41,239 --> 00:03:43,489
model for what chat was doing and make

92
00:03:43,489 --> 00:03:46,250
it more than just like a very simple app

93
00:03:46,250 --> 00:03:47,600
it used to be just something that was

94
00:03:47,600 --> 00:03:49,820
all about the UI um couple other

95
00:03:49,820 --> 00:03:51,739
features I want to show here let me

96
00:03:51,739 --> 00:03:53,450
minimize this window and maybe nan will

97
00:03:53,450 --> 00:03:56,660
send me one more message I think he's

98
00:03:56,660 --> 00:03:58,370
out of prepared comments so hopefully

99
00:03:58,370 --> 00:04:01,340
yeah he has to type something on this

100
00:04:01,340 --> 00:04:03,739
phone we'll wait for that to come in

101
00:04:03,739 --> 00:04:06,140
okay there we go so now I have a new

102
00:04:06,140 --> 00:04:07,459
message and I'm gonna actually reload

103
00:04:07,459 --> 00:04:11,209
the page here before um before I do and

104
00:04:11,209 --> 00:04:13,940
what you'll see now is what I wanted to

105
00:04:13,940 --> 00:04:15,440
point out about this is that you know

106
00:04:15,440 --> 00:04:17,600
even though people have messages when

107
00:04:17,600 --> 00:04:20,359
they come to facebook chat is not the

108
00:04:20,359 --> 00:04:21,890
most important feature on Facebook

109
00:04:21,890 --> 00:04:23,900
obviously it's the newsfeed so like half

110
00:04:23,900 --> 00:04:25,760
of our users don't engage with chat at

111
00:04:25,760 --> 00:04:28,639
all in a given day um so we can't afford

112
00:04:28,639 --> 00:04:30,470
to like load all the messages when the

113
00:04:30,470 --> 00:04:32,120
page comes up and what that means is

114
00:04:32,120 --> 00:04:34,010
that now when I raise this chat window

115
00:04:34,010 --> 00:04:35,570
you'll see a little tiny delay where we

116
00:04:35,570 --> 00:04:38,450
have to go fetch the the conversation

117
00:04:38,450 --> 00:04:42,080
before we can show it and even though

118
00:04:42,080 --> 00:04:43,260
we've done that we

119
00:04:43,260 --> 00:04:44,970
haven't loaded all the data for the

120
00:04:44,970 --> 00:04:47,850
model like when we go look at our list

121
00:04:47,850 --> 00:04:50,220
of conversations you'll see that has to

122
00:04:50,220 --> 00:04:51,450
get loaded in as well

123
00:04:51,450 --> 00:04:53,330
so we very much have to emphasize

124
00:04:53,330 --> 00:04:56,520
incremental loading they did take away

125
00:04:56,520 --> 00:04:59,670
my shaving cream yes that's right

126
00:04:59,670 --> 00:05:02,370
okay oh and I'm getting lots of messages

127
00:05:02,370 --> 00:05:07,110
here hi everybody one last thing I want

128
00:05:07,110 --> 00:05:09,420
to show is that there's a group chat

129
00:05:09,420 --> 00:05:12,240
feature here and you know this makes

130
00:05:12,240 --> 00:05:15,150
this much more complicated so tobiko

131
00:05:15,150 --> 00:05:18,450
here is gonna add Adam to this chat and

132
00:05:18,450 --> 00:05:23,370
this is a new group chat and maybe then

133
00:05:23,370 --> 00:05:25,650
can add some people too and the thing I

134
00:05:25,650 --> 00:05:26,910
want to point out about this is it you

135
00:05:26,910 --> 00:05:28,530
know nan can add people who are his

136
00:05:28,530 --> 00:05:31,230
friends to this chat that and these are

137
00:05:31,230 --> 00:05:33,600
people that tobiko doesn't know so he

138
00:05:33,600 --> 00:05:34,860
doesn't have information about these

139
00:05:34,860 --> 00:05:36,690
participants and those need to be loaded

140
00:05:36,690 --> 00:05:38,820
incrementally sort of as these messages

141
00:05:38,820 --> 00:05:42,780
come in and in sort of real-time so

142
00:05:42,780 --> 00:05:45,660
whoops I lost focus there we go

143
00:05:45,660 --> 00:05:47,670
so you know that's actually something

144
00:05:47,670 --> 00:05:48,840
that we had to contend with and I'm

145
00:05:48,840 --> 00:05:50,070
gonna show a little bit of code that

146
00:05:50,070 --> 00:05:52,740
kind of gives an example of how we dealt

147
00:05:52,740 --> 00:05:56,610
with that okay so back to presentation

148
00:05:56,610 --> 00:05:59,040
so um you know we did this we did this

149
00:05:59,040 --> 00:06:00,840
rewrite and I you know I think we can

150
00:06:00,840 --> 00:06:03,330
say it was a success you know one thing

151
00:06:03,330 --> 00:06:04,980
that we really got to do is we really

152
00:06:04,980 --> 00:06:07,020
got to focus on the technology and the

153
00:06:07,020 --> 00:06:09,450
quality we didn't have a bunch of new

154
00:06:09,450 --> 00:06:11,160
features to add it was pretty minor in

155
00:06:11,160 --> 00:06:13,950
that regard so that was very helpful we

156
00:06:13,950 --> 00:06:16,140
developed a new command-line JavaScript

157
00:06:16,140 --> 00:06:17,850
test framework as part of this project

158
00:06:17,850 --> 00:06:20,280
and it's been adopted across Facebook

159
00:06:20,280 --> 00:06:22,080
and now we're working to open source it

160
00:06:22,080 --> 00:06:23,460
so I'll talk a little bit more about

161
00:06:23,460 --> 00:06:25,500
that the whole project took six months

162
00:06:25,500 --> 00:06:27,290
most of the time it was just for

163
00:06:27,290 --> 00:06:32,100
engineers working on it so you know that

164
00:06:32,100 --> 00:06:33,990
it wasn't like a gigantic project and

165
00:06:33,990 --> 00:06:35,660
what I'm showing here is the graph of

166
00:06:35,660 --> 00:06:37,920
user tickets now unfortunately a

167
00:06:37,920 --> 00:06:40,320
facebook like each individual user

168
00:06:40,320 --> 00:06:42,780
report surfaces to us is like you know

169
00:06:42,780 --> 00:06:44,520
thousands of users complaining about

170
00:06:44,520 --> 00:06:46,470
things every day but we can tell we're

171
00:06:46,470 --> 00:06:48,180
doing better when those those thousands

172
00:06:48,180 --> 00:06:50,400
become hundreds and that's kind of what

173
00:06:50,400 --> 00:06:51,600
happened here and it's gotten better

174
00:06:51,600 --> 00:06:54,180
since so you can see that this was you

175
00:06:54,180 --> 00:06:55,710
know really helped with the quality

176
00:06:55,710 --> 00:06:58,550
there are other things we were doing

177
00:06:58,550 --> 00:07:01,560
but you know the very first thing that I

178
00:07:01,560 --> 00:07:02,700
want to talk about and the most

179
00:07:02,700 --> 00:07:04,890
important thing and like the the thing

180
00:07:04,890 --> 00:07:06,300
that I would sort of suggest you

181
00:07:06,300 --> 00:07:08,280
remember from this talk if you're gonna

182
00:07:08,280 --> 00:07:10,710
remember one thing is that we introduced

183
00:07:10,710 --> 00:07:13,020
modularity into the Facebook JavaScript

184
00:07:13,020 --> 00:07:15,510
code base in order to deliver this

185
00:07:15,510 --> 00:07:17,040
feature and that was like the single

186
00:07:17,040 --> 00:07:20,280
best thing we did cuz like if you even

187
00:07:20,280 --> 00:07:22,680
if you have a big steaming pile like if

188
00:07:22,680 --> 00:07:24,450
you have a steaming pile that's like in

189
00:07:24,450 --> 00:07:26,400
little buckets then you can fix them one

190
00:07:26,400 --> 00:07:29,370
at a time and so that you know that's

191
00:07:29,370 --> 00:07:31,550
like the single best thing that we did

192
00:07:31,550 --> 00:07:34,170
so when I joined Facebook like a little

193
00:07:34,170 --> 00:07:35,970
over two years ago all of our JavaScript

194
00:07:35,970 --> 00:07:39,300
was effectively in a global namespace so

195
00:07:39,300 --> 00:07:41,730
you know you just write like var blah

196
00:07:41,730 --> 00:07:44,490
equals blah you know and then and that

197
00:07:44,490 --> 00:07:46,020
would just like kind of run whenever it

198
00:07:46,020 --> 00:07:48,300
ran you could you could give directives

199
00:07:48,300 --> 00:07:49,620
that say like hey when you load this

200
00:07:49,620 --> 00:07:51,150
file you also need to load these other

201
00:07:51,150 --> 00:07:53,070
files but there's no guarantee about

202
00:07:53,070 --> 00:07:54,840
what order that would happen so it made

203
00:07:54,840 --> 00:07:58,640
it really really complicated and any any

204
00:07:58,640 --> 00:08:00,810
JavaScript code could break any other

205
00:08:00,810 --> 00:08:02,370
JavaScript code so it's like really easy

206
00:08:02,370 --> 00:08:05,070
to cause a problem and then really hard

207
00:08:05,070 --> 00:08:08,220
to figure out what who had done what and

208
00:08:08,220 --> 00:08:09,270
the other thing was that like we had

209
00:08:09,270 --> 00:08:11,580
this we have this stochastic packager

210
00:08:11,580 --> 00:08:13,350
that actually takes data from production

211
00:08:13,350 --> 00:08:15,450
and tries to do the most efficient job

212
00:08:15,450 --> 00:08:17,070
it can like putting JavaScript files

213
00:08:17,070 --> 00:08:17,730
together

214
00:08:17,730 --> 00:08:20,910
so the packager would like change what

215
00:08:20,910 --> 00:08:22,740
javascript with was delivered in what

216
00:08:22,740 --> 00:08:24,750
bundle and that would cause bugs even

217
00:08:24,750 --> 00:08:26,280
though no code had changed that makes it

218
00:08:26,280 --> 00:08:27,780
really hard to figure out what's going

219
00:08:27,780 --> 00:08:30,090
on and the last thing this is leads to

220
00:08:30,090 --> 00:08:32,340
is like just layers and layers of

221
00:08:32,340 --> 00:08:34,530
initialization because you kind of like

222
00:08:34,530 --> 00:08:36,120
it's really hard to know when

223
00:08:36,120 --> 00:08:38,040
everything's ready just everything sends

224
00:08:38,040 --> 00:08:39,660
in an it event you know and you like end

225
00:08:39,660 --> 00:08:41,550
up depending on like 20 init events

226
00:08:41,550 --> 00:08:45,630
before you are ready to do anything so

227
00:08:45,630 --> 00:08:47,970
we fixed that with you know common KS

228
00:08:47,970 --> 00:08:50,100
effectively so now at Facebook when you

229
00:08:50,100 --> 00:08:53,820
write a file you can require resources

230
00:08:53,820 --> 00:08:56,550
and then you know you just can export

231
00:08:56,550 --> 00:08:59,270
something this gets transformed into

232
00:08:59,270 --> 00:09:01,740
like something like a defined function

233
00:09:01,740 --> 00:09:03,540
along the lines of requirejs

234
00:09:03,540 --> 00:09:05,900
we didn't actually pull in requirejs

235
00:09:05,900 --> 00:09:08,040
because you know it's kind of easier

236
00:09:08,040 --> 00:09:09,300
Facebook to just do it

237
00:09:09,300 --> 00:09:12,540
unfortunately often but we're definitely

238
00:09:12,540 --> 00:09:14,339
inspired by requirejs

239
00:09:14,339 --> 00:09:16,709
so you can see that now like the

240
00:09:16,709 --> 00:09:18,630
contents of a given file get run inside

241
00:09:18,630 --> 00:09:21,180
a function you get you know global

242
00:09:21,180 --> 00:09:22,709
namespace protection all kinds of good

243
00:09:22,709 --> 00:09:24,390
stuff and you get this like

244
00:09:24,390 --> 00:09:26,279
initialization guarantee you know

245
00:09:26,279 --> 00:09:28,279
there's only one module named foo and

246
00:09:28,279 --> 00:09:30,720
you kind of know know when it's ready

247
00:09:30,720 --> 00:09:34,140
now um that ideally that would have been

248
00:09:34,140 --> 00:09:36,779
enough but for our application it wasn't

249
00:09:36,779 --> 00:09:38,880
and the problem that we had was that

250
00:09:38,880 --> 00:09:41,279
most dependency chains in our app

251
00:09:41,279 --> 00:09:44,160
actually start on the server so if you

252
00:09:44,160 --> 00:09:46,410
think about like I'm gonna talk about

253
00:09:46,410 --> 00:09:48,899
that chat tab window that appears at the

254
00:09:48,899 --> 00:09:49,860
bottom of the screen and just like

255
00:09:49,860 --> 00:09:51,540
imagine the control that renders that

256
00:09:51,540 --> 00:09:53,970
right so in addition to all the data it

257
00:09:53,970 --> 00:09:55,079
needs it needs a couple other things

258
00:09:55,079 --> 00:09:57,540
like a like a configuration from the

259
00:09:57,540 --> 00:09:59,339
server and also the templates we

260
00:09:59,339 --> 00:10:01,010
actually deliver from the server as well

261
00:10:01,010 --> 00:10:04,200
and you may wonder like why in a

262
00:10:04,200 --> 00:10:05,370
client-side app we're delivering

263
00:10:05,370 --> 00:10:07,560
templates from the server the best

264
00:10:07,560 --> 00:10:09,260
answer is that initial is a

265
00:10:09,260 --> 00:10:11,160
internationalization is really really

266
00:10:11,160 --> 00:10:14,459
hard and we have a big legacy stack for

267
00:10:14,459 --> 00:10:15,620
D not on the server so we

268
00:10:15,620 --> 00:10:17,160
internationalized a template on the

269
00:10:17,160 --> 00:10:18,870
server and then deliver it to the client

270
00:10:18,870 --> 00:10:20,520
there are other things that we do in

271
00:10:20,520 --> 00:10:21,990
these templates that are also helpful

272
00:10:21,990 --> 00:10:24,329
but then you're back to this multi pass

273
00:10:24,329 --> 00:10:25,800
initialization thing where you know you

274
00:10:25,800 --> 00:10:28,649
have a module called chat tab view but

275
00:10:28,649 --> 00:10:29,820
you can't use it right away

276
00:10:29,820 --> 00:10:31,740
you know requiring it is not enough and

277
00:10:31,740 --> 00:10:33,660
instead you also and the other thing

278
00:10:33,660 --> 00:10:34,980
that you have is like when you want to

279
00:10:34,980 --> 00:10:37,200
deliver these resources to the client

280
00:10:37,200 --> 00:10:40,350
you have this like gross interconnect

281
00:10:40,350 --> 00:10:43,140
between PHP and JavaScript where PHP in

282
00:10:43,140 --> 00:10:45,329
our case sorry where you have to like

283
00:10:45,329 --> 00:10:47,339
require this module and call a method on

284
00:10:47,339 --> 00:10:49,560
it and you know this is a really hard

285
00:10:49,560 --> 00:10:50,970
dependency to track like it's

286
00:10:50,970 --> 00:10:53,040
effectively a string in PHP so if you

287
00:10:53,040 --> 00:10:55,649
want to refactor that method it's a pain

288
00:10:55,649 --> 00:10:57,570
also if you want to share this config

289
00:10:57,570 --> 00:10:59,130
you know you end up doing this like 50

290
00:10:59,130 --> 00:11:01,760
times so the way we fix this is we

291
00:11:01,760 --> 00:11:03,480
introduce this idea of dynamic

292
00:11:03,480 --> 00:11:05,699
dependencies where you can define

293
00:11:05,699 --> 00:11:08,730
modules on the server so you just sort

294
00:11:08,730 --> 00:11:11,100
of export like a bunch of configuration

295
00:11:11,100 --> 00:11:15,269
as a dictionary or a template as even

296
00:11:15,269 --> 00:11:17,070
just like a string and then you can

297
00:11:17,070 --> 00:11:19,230
require these templates and now we don't

298
00:11:19,230 --> 00:11:21,270
use the require keyword even though to

299
00:11:21,270 --> 00:11:22,769
the client these things look the same

300
00:11:22,769 --> 00:11:25,019
regular modules we use require dynamic

301
00:11:25,019 --> 00:11:26,999
because you know the one thing about

302
00:11:26,999 --> 00:11:29,129
this approach is that it is a little bit

303
00:11:29,129 --> 00:11:30,779
fragile right like you can end up with a

304
00:11:30,779 --> 00:11:32,730
client in a state where it needs a

305
00:11:32,730 --> 00:11:35,489
module that the server forgot to prepare

306
00:11:35,489 --> 00:11:37,529
for it so by using a required dynamic we

307
00:11:37,529 --> 00:11:39,480
can kind of keep better track of what

308
00:11:39,480 --> 00:11:41,309
the client needs in order to be able to

309
00:11:41,309 --> 00:11:43,350
initialize but you can freely mix

310
00:11:43,350 --> 00:11:45,600
require dynamic statements with regular

311
00:11:45,600 --> 00:11:47,610
require statements and then go about

312
00:11:47,610 --> 00:11:50,939
your business so you know this worked

313
00:11:50,939 --> 00:11:52,350
really well and as I said like if

314
00:11:52,350 --> 00:11:53,999
there's one thing that made this project

315
00:11:53,999 --> 00:11:55,980
work it was the fact that we could put

316
00:11:55,980 --> 00:11:58,170
our chat code our new shiny chat code in

317
00:11:58,170 --> 00:12:00,420
modules that would not be broken by the

318
00:12:00,420 --> 00:12:02,999
rest of the JavaScript at Facebook um

319
00:12:02,999 --> 00:12:04,679
there's a couple things I feel like we

320
00:12:04,679 --> 00:12:06,149
didn't quite get right so you know if

321
00:12:06,149 --> 00:12:08,790
you go down this road there are things I

322
00:12:08,790 --> 00:12:11,009
would do differently the very first

323
00:12:11,009 --> 00:12:13,019
thing I would say is I I really wish we

324
00:12:13,019 --> 00:12:15,029
hadn't allowed circular dependencies I

325
00:12:15,029 --> 00:12:17,189
know that's part of the common Jas spec

326
00:12:17,189 --> 00:12:19,410
and I'm I'd be fine allowing it for

327
00:12:19,410 --> 00:12:21,779
third-party code but in our code you

328
00:12:21,779 --> 00:12:23,339
know it leads to all kinds of problems

329
00:12:23,339 --> 00:12:25,079
it's really hard to reason about these

330
00:12:25,079 --> 00:12:27,179
circular dependencies and it's really

331
00:12:27,179 --> 00:12:30,240
hard to know when you're looking at one

332
00:12:30,240 --> 00:12:32,309
module that like it it's part of a

333
00:12:32,309 --> 00:12:34,769
circular dependency chain the other

334
00:12:34,769 --> 00:12:36,269
thing about it is that like anytime you

335
00:12:36,269 --> 00:12:37,649
have something that can execute an

336
00:12:37,649 --> 00:12:40,079
arbitrary order you almost always end up

337
00:12:40,079 --> 00:12:41,999
with bugs when that order switches for

338
00:12:41,999 --> 00:12:44,610
whatever reason um the other thing I

339
00:12:44,610 --> 00:12:46,019
wish we'd done like while we were at it

340
00:12:46,019 --> 00:12:48,779
I wish we had modularized JavaScript

341
00:12:48,779 --> 00:12:50,639
codes access to the window and the

342
00:12:50,639 --> 00:12:53,490
document in that window because just

343
00:12:53,490 --> 00:12:55,319
being able to freely refer to the window

344
00:12:55,319 --> 00:12:57,720
as a global basically means that you can

345
00:12:57,720 --> 00:12:59,670
only have one window in your context and

346
00:12:59,670 --> 00:13:00,959
I think like the destiny of all

347
00:13:00,959 --> 00:13:03,149
JavaScript code is to run on the server

348
00:13:03,149 --> 00:13:05,249
and when you move this code to the

349
00:13:05,249 --> 00:13:06,990
server you have to context to fie it you

350
00:13:06,990 --> 00:13:08,189
know you have to say like there's

351
00:13:08,189 --> 00:13:11,009
there's one VM sort of per request and

352
00:13:11,009 --> 00:13:12,600
then the last thing was just dumb we in

353
00:13:12,600 --> 00:13:13,860
you know instead of doing like straight

354
00:13:13,860 --> 00:13:15,329
common J ass where you can give file

355
00:13:15,329 --> 00:13:17,339
names we did this thing where you kind

356
00:13:17,339 --> 00:13:20,339
of like name your file using a comment

357
00:13:20,339 --> 00:13:22,079
and that was just like it's unnecessary

358
00:13:22,079 --> 00:13:24,660
garbage now in the system but overall

359
00:13:24,660 --> 00:13:29,150
you know big success okay

360
00:13:29,160 --> 00:13:31,920
the other side of modularity I think is

361
00:13:31,920 --> 00:13:33,600
unit testing and I'm presenting these

362
00:13:33,600 --> 00:13:35,250
things as if they're different but I see

363
00:13:35,250 --> 00:13:37,319
them as very much the same like you can

364
00:13:37,319 --> 00:13:39,060
build a module system but you don't know

365
00:13:39,060 --> 00:13:40,860
you actually have modules unless you

366
00:13:40,860 --> 00:13:43,620
have an expression for the seams between

367
00:13:43,620 --> 00:13:45,209
these modules and that's what I see is

368
00:13:45,209 --> 00:13:47,550
unit testing being about so you know I

369
00:13:47,550 --> 00:13:49,199
feel like a lot of people feel like okay

370
00:13:49,199 --> 00:13:51,060
we I know we need to do unit testing

371
00:13:51,060 --> 00:13:52,350
yeah I know that it really helps

372
00:13:52,350 --> 00:13:54,449
especially an environment like Facebook

373
00:13:54,449 --> 00:13:55,620
where you have hundreds of Engineers

374
00:13:55,620 --> 00:13:58,259
committing to the same codebase but you

375
00:13:58,259 --> 00:13:59,699
know I think like one thing that people

376
00:13:59,699 --> 00:14:01,470
don't talk about too much is like just

377
00:14:01,470 --> 00:14:03,300
the workflow benefit of unit testing

378
00:14:03,300 --> 00:14:06,149
like I think most developers I certainly

379
00:14:06,149 --> 00:14:07,920
would rather interact with my console

380
00:14:07,920 --> 00:14:09,990
and my keyboard then with the browser

381
00:14:09,990 --> 00:14:12,779
and the mouse but in order to make that

382
00:14:12,779 --> 00:14:14,069
really work you need to make the unit

383
00:14:14,069 --> 00:14:16,920
testing really fast so you know when we

384
00:14:16,920 --> 00:14:18,990
we had some unit testing for JavaScript

385
00:14:18,990 --> 00:14:21,029
but it was actually slower to run the

386
00:14:21,029 --> 00:14:22,649
unit test and it was to reload the

387
00:14:22,649 --> 00:14:24,720
webpage and click on things so like you

388
00:14:24,720 --> 00:14:26,250
know that's like the wrong set of

389
00:14:26,250 --> 00:14:27,839
rewards there um

390
00:14:27,839 --> 00:14:30,120
the other benefit of unit testing is is

391
00:14:30,120 --> 00:14:33,600
this design benefit so you know if you

392
00:14:33,600 --> 00:14:35,370
have a unit test like you're forced to

393
00:14:35,370 --> 00:14:38,009
consider what is this unit you know what

394
00:14:38,009 --> 00:14:39,839
are the guarantees that it provides and

395
00:14:39,839 --> 00:14:42,660
what are the invariants so in order to

396
00:14:42,660 --> 00:14:45,089
like really capture that design benefit

397
00:14:45,089 --> 00:14:47,040
you need to setup your unit test system

398
00:14:47,040 --> 00:14:48,029
so that it um

399
00:14:48,029 --> 00:14:50,970
by default it isolates modules you know

400
00:14:50,970 --> 00:14:52,709
you sort of encourage to test one thing

401
00:14:52,709 --> 00:14:55,050
at a time I mean then then the last

402
00:14:55,050 --> 00:14:56,430
thing and I think this is like really

403
00:14:56,430 --> 00:14:58,170
common understanding of what unit

404
00:14:58,170 --> 00:15:00,029
testing is for us is the idea that like

405
00:15:00,029 --> 00:15:02,160
it's a signpost you know if you come

406
00:15:02,160 --> 00:15:03,449
back or someone else comes back and

407
00:15:03,449 --> 00:15:05,279
wants to change something like there's a

408
00:15:05,279 --> 00:15:06,930
big long list of like well this is what

409
00:15:06,930 --> 00:15:08,430
it does now you know if you're gonna

410
00:15:08,430 --> 00:15:10,170
change it you need to like think about

411
00:15:10,170 --> 00:15:12,899
the current spec but in order to make

412
00:15:12,899 --> 00:15:15,180
that read well as a specification you

413
00:15:15,180 --> 00:15:16,350
need to make sure your unit test

414
00:15:16,350 --> 00:15:18,569
framework is really expressive and to

415
00:15:18,569 --> 00:15:19,860
this end I think you need to make your

416
00:15:19,860 --> 00:15:21,930
unit test framework hack hackable you

417
00:15:21,930 --> 00:15:23,750
know you need to make it so that like

418
00:15:23,750 --> 00:15:25,649
developers on the team think of

419
00:15:25,649 --> 00:15:27,449
committing to the unit test framework

420
00:15:27,449 --> 00:15:29,790
and the unit test as like just as

421
00:15:29,790 --> 00:15:32,100
important as committing to the

422
00:15:32,100 --> 00:15:34,379
production code and you know like

423
00:15:34,379 --> 00:15:36,000
packing on the unit test stuff is fun

424
00:15:36,000 --> 00:15:38,279
cuz like you know if you break it that's

425
00:15:38,279 --> 00:15:39,420
really good

426
00:15:39,420 --> 00:15:41,220
and and it's also like it's much more

427
00:15:41,220 --> 00:15:42,660
abstract you know it only

428
00:15:42,660 --> 00:15:46,110
runs in your dev environment one thing

429
00:15:46,110 --> 00:15:48,060
unit testing I think is not for is like

430
00:15:48,060 --> 00:15:50,879
as a wall you know and so people new to

431
00:15:50,879 --> 00:15:52,500
unit testing sort of say like well I can

432
00:15:52,500 --> 00:15:53,730
write this unit test but that doesn't

433
00:15:53,730 --> 00:15:55,860
prevent you from like you know writing

434
00:15:55,860 --> 00:15:57,600
some other module that mocks this

435
00:15:57,600 --> 00:15:59,279
interface and does the wrong thing with

436
00:15:59,279 --> 00:16:01,920
it and yeah you know absolutely and you

437
00:16:01,920 --> 00:16:03,569
can write integration tests if you're

438
00:16:03,569 --> 00:16:05,040
really worried about that but you know

439
00:16:05,040 --> 00:16:06,930
this is unit testing is about other

440
00:16:06,930 --> 00:16:08,939
thoughtful developers coming along and

441
00:16:08,939 --> 00:16:12,120
like sincerely trying to do to do their

442
00:16:12,120 --> 00:16:13,649
best to like keep things working you

443
00:16:13,649 --> 00:16:14,550
know which I think most developers

444
00:16:14,550 --> 00:16:18,269
that's what they want to do so this is

445
00:16:18,269 --> 00:16:19,920
what it looks like and you know that we

446
00:16:19,920 --> 00:16:24,060
we integrated j/s Dom so that you can

447
00:16:24,060 --> 00:16:26,370
run browser code at the console it works

448
00:16:26,370 --> 00:16:27,959
great you can see this is like a trivial

449
00:16:27,959 --> 00:16:29,939
test it takes about under two tenths of

450
00:16:29,939 --> 00:16:32,490
a second to run I still wish it were

451
00:16:32,490 --> 00:16:34,170
faster but we made some trade-offs at

452
00:16:34,170 --> 00:16:36,839
all that I'll describe now so the test

453
00:16:36,839 --> 00:16:38,370
environment is written in nodejs

454
00:16:38,370 --> 00:16:40,769
and that alone gives us like a lot of

455
00:16:40,769 --> 00:16:43,589
speed benefit so you know before we

456
00:16:43,589 --> 00:16:44,970
start we actually kind of have to scan

457
00:16:44,970 --> 00:16:46,589
all the JavaScript files it's really

458
00:16:46,589 --> 00:16:48,389
easy to do that in parallel and notes oh

459
00:16:48,389 --> 00:16:50,430
that's great we also had to integrate

460
00:16:50,430 --> 00:16:52,709
j/s dom and could text fi in order to

461
00:16:52,709 --> 00:16:54,990
support browser code and that slows us

462
00:16:54,990 --> 00:16:56,819
down you know and again like I wish we

463
00:16:56,819 --> 00:16:58,319
didn't need context to Phi that I think

464
00:16:58,319 --> 00:17:03,600
was a mistake we made for isolation we

465
00:17:03,600 --> 00:17:05,189
did a couple things one is we made it so

466
00:17:05,189 --> 00:17:07,650
that the each test runs in its own VM

467
00:17:07,650 --> 00:17:10,020
and that prevents cascading failures

468
00:17:10,020 --> 00:17:12,299
because I think like if developers get

469
00:17:12,299 --> 00:17:15,000
used to the idea that you know unit test

470
00:17:15,000 --> 00:17:16,740
breakage doesn't necessarily mean that

471
00:17:16,740 --> 00:17:18,480
something's broken they'll start to

472
00:17:18,480 --> 00:17:20,010
ignore it and then you know the tests

473
00:17:20,010 --> 00:17:22,079
rot really quickly the other thing that

474
00:17:22,079 --> 00:17:24,299
we did is we made is that by default you

475
00:17:24,299 --> 00:17:26,039
get a mock when you require something

476
00:17:26,039 --> 00:17:28,140
and this was actually inspired by Felix

477
00:17:28,140 --> 00:17:30,240
goose and darf who's I think he's here

478
00:17:30,240 --> 00:17:33,809
at he presented at node Kampf like over

479
00:17:33,809 --> 00:17:36,240
a year ago his micro test framework and

480
00:17:36,240 --> 00:17:38,220
you know it's the idea of using a

481
00:17:38,220 --> 00:17:41,039
require as a seam to inject test doubles

482
00:17:41,039 --> 00:17:43,890
and it's great it works really well that

483
00:17:43,890 --> 00:17:45,570
was pretty awesome than looking for that

484
00:17:45,570 --> 00:17:48,990
guy but you know I can talk a little

485
00:17:48,990 --> 00:17:51,030
more about that but I don't have a lot

486
00:17:51,030 --> 00:17:52,740
of time okay and then the last thing is

487
00:17:52,740 --> 00:17:54,539
you know this hack ability idea and

488
00:17:54,539 --> 00:17:56,640
they're the best thing working for us

489
00:17:56,640 --> 00:17:58,440
so at Facebook we don't have production

490
00:17:58,440 --> 00:18:00,240
systems that run node but there are a

491
00:18:00,240 --> 00:18:01,470
lot of people who do want to hack on

492
00:18:01,470 --> 00:18:03,539
nodes so the very fact that it's all

493
00:18:03,539 --> 00:18:04,890
written a note is great and then the

494
00:18:04,890 --> 00:18:06,299
other thing that we did is instead of

495
00:18:06,299 --> 00:18:08,190
integrating with crappy old legacy

496
00:18:08,190 --> 00:18:10,350
systems we rewrote them you know even

497
00:18:10,350 --> 00:18:12,210
though it was extra work it makes it

498
00:18:12,210 --> 00:18:14,340
like all the code is shiny and new you

499
00:18:14,340 --> 00:18:16,440
know when you go track down a dependency

500
00:18:16,440 --> 00:18:18,240
chain like you're looking at JavaScript

501
00:18:18,240 --> 00:18:22,830
code and not crazy legacy PHP okay the

502
00:18:22,830 --> 00:18:24,330
last thing and this is like kind of

503
00:18:24,330 --> 00:18:28,919
where it gets weird so come with me you

504
00:18:28,919 --> 00:18:30,720
know we we sort of abandoned like

505
00:18:30,720 --> 00:18:33,000
object-oriented programming for this or

506
00:18:33,000 --> 00:18:34,769
at least like sort of the framework

507
00:18:34,769 --> 00:18:38,760
style MVC I mean I want yeah and I want

508
00:18:38,760 --> 00:18:40,980
to talk about you know why why we did

509
00:18:40,980 --> 00:18:43,860
that so here let's again we'll consider

510
00:18:43,860 --> 00:18:46,620
that chat tab view that window and you

511
00:18:46,620 --> 00:18:48,860
know here's like a classic MVC

512
00:18:48,860 --> 00:18:50,549
constructor for that thing we're gonna

513
00:18:50,549 --> 00:18:53,460
take a thread object and the Dom node

514
00:18:53,460 --> 00:18:54,659
and what we're gonna do is like attach

515
00:18:54,659 --> 00:18:57,090
our template for the window to that Dom

516
00:18:57,090 --> 00:18:58,830
node and like let's just think about

517
00:18:58,830 --> 00:19:00,750
what we need to do to fill out the top

518
00:19:00,750 --> 00:19:02,279
bar of that chat window that needs to

519
00:19:02,279 --> 00:19:04,559
say like you know Adam man and two

520
00:19:04,559 --> 00:19:07,710
others or whatever um so you know when

521
00:19:07,710 --> 00:19:09,779
you start off and it's like a sunny day

522
00:19:09,779 --> 00:19:11,909
and you know it's the first file of your

523
00:19:11,909 --> 00:19:13,019
new project you write something like

524
00:19:13,019 --> 00:19:14,970
this you say oh yeah the thread has

525
00:19:14,970 --> 00:19:17,279
participants so we'll just get those

526
00:19:17,279 --> 00:19:19,889
participants and we'll like map over all

527
00:19:19,889 --> 00:19:21,630
the names of the participants and use

528
00:19:21,630 --> 00:19:23,760
that to generate the title and you know

529
00:19:23,760 --> 00:19:26,760
this works this is great toy program you

530
00:19:26,760 --> 00:19:28,799
like go show it to the product manager

531
00:19:28,799 --> 00:19:31,590
he's all excited you know keep going so

532
00:19:31,590 --> 00:19:33,960
but then you realize that you know you

533
00:19:33,960 --> 00:19:35,820
get sometimes you get a message and you

534
00:19:35,820 --> 00:19:37,679
don't have the data for the thread you

535
00:19:37,679 --> 00:19:38,669
need to be able to talk about this

536
00:19:38,669 --> 00:19:41,549
thread just as an ID before you really

537
00:19:41,549 --> 00:19:45,090
know what's in it so cross that out and

538
00:19:45,090 --> 00:19:47,760
replace it with like some evented thing

539
00:19:47,760 --> 00:19:50,159
where you know the the thread has a load

540
00:19:50,159 --> 00:19:52,080
event that distinguishes between the

541
00:19:52,080 --> 00:19:54,179
case where it's got data in it and it

542
00:19:54,179 --> 00:19:55,380
doesn't and then you know you have to

543
00:19:55,380 --> 00:19:57,269
kind of wring your hands a little bit

544
00:19:57,269 --> 00:19:59,010
about like okay but what if it already

545
00:19:59,010 --> 00:20:00,870
loaded by the time I get here you know

546
00:20:00,870 --> 00:20:02,700
what does that mean but you know there

547
00:20:02,700 --> 00:20:03,809
are answers to that question

548
00:20:03,809 --> 00:20:06,059
so now you know you sort of wait for

549
00:20:06,059 --> 00:20:07,289
this load event you register your

550
00:20:07,289 --> 00:20:09,000
callback and then you get the

551
00:20:09,000 --> 00:20:10,050
participants for this

552
00:20:10,050 --> 00:20:12,390
red and that works for a little while

553
00:20:12,390 --> 00:20:14,460
until you know you get to this group cap

554
00:20:14,460 --> 00:20:16,800
feature where you realize that like you

555
00:20:16,800 --> 00:20:19,320
may end up on the thread with

556
00:20:19,320 --> 00:20:20,760
participants who you don't know about

557
00:20:20,760 --> 00:20:22,140
yet and what are we gonna do about that

558
00:20:22,140 --> 00:20:25,590
you know and this is where I you see two

559
00:20:25,590 --> 00:20:28,800
approaches you know one is people try to

560
00:20:28,800 --> 00:20:30,810
like have this invariant that we never

561
00:20:30,810 --> 00:20:32,220
have threads that don't have

562
00:20:32,220 --> 00:20:35,670
participants at the best case that leads

563
00:20:35,670 --> 00:20:37,110
to over fetching right cuz like that

564
00:20:37,110 --> 00:20:38,520
means that every time you find out about

565
00:20:38,520 --> 00:20:40,110
a thread you have to reef a CH all the

566
00:20:40,110 --> 00:20:41,310
participants um

567
00:20:41,310 --> 00:20:43,800
worst case is like you have a bug or you

568
00:20:43,800 --> 00:20:45,600
you know you've failed to capture this

569
00:20:45,600 --> 00:20:48,210
untracked dependency and you get to the

570
00:20:48,210 --> 00:20:49,920
client and you're you're trying to do

571
00:20:49,920 --> 00:20:52,140
this render a thread you're missing

572
00:20:52,140 --> 00:20:53,490
participant data and the only thing you

573
00:20:53,490 --> 00:20:55,320
can do is error you've got no you know

574
00:20:55,320 --> 00:20:58,320
you've got no way out of that so you

575
00:20:58,320 --> 00:21:00,000
know probably the best thing to do is to

576
00:21:00,000 --> 00:21:01,530
not do this and do the same thing to

577
00:21:01,530 --> 00:21:03,930
participants that we did the threads so

578
00:21:03,930 --> 00:21:06,420
we wait for the load of the thread and

579
00:21:06,420 --> 00:21:07,950
then we have to wait for all the

580
00:21:07,950 --> 00:21:10,230
participants to load and then we can

581
00:21:10,230 --> 00:21:12,540
finally render the chat window and you

582
00:21:12,540 --> 00:21:14,130
know by the time we get here like this

583
00:21:14,130 --> 00:21:16,110
is no longer shiny and simple it's like

584
00:21:16,110 --> 00:21:18,090
now really complicated and you've got

585
00:21:18,090 --> 00:21:19,800
this sort of spaghetti evented system

586
00:21:19,800 --> 00:21:21,990
you've got like subtle ordering

587
00:21:21,990 --> 00:21:23,790
dependencies like if participants load

588
00:21:23,790 --> 00:21:25,800
before threads that make aynd of change

589
00:21:25,800 --> 00:21:27,600
the behavior here it's it's not obvious

590
00:21:27,600 --> 00:21:31,980
what's going to happen so um you know

591
00:21:31,980 --> 00:21:33,750
there there are two things that like I

592
00:21:33,750 --> 00:21:35,640
really don't like about this style I'll

593
00:21:35,640 --> 00:21:37,740
try to point them out quickly the first

594
00:21:37,740 --> 00:21:41,300
one is you know let's just be okay with

595
00:21:41,300 --> 00:21:43,830
constructors and initializers and like

596
00:21:43,830 --> 00:21:47,610
you know class keyword thank you but but

597
00:21:47,610 --> 00:21:50,430
you know we have two different kinds of

598
00:21:50,430 --> 00:21:52,020
api's that don't look different right

599
00:21:52,020 --> 00:21:54,900
like the thread knows it's ID and you

600
00:21:54,900 --> 00:21:57,450
can always call get ID that's fine but

601
00:21:57,450 --> 00:21:59,310
to call get participants you have to

602
00:21:59,310 --> 00:22:01,350
wait for the load event and like there's

603
00:22:01,350 --> 00:22:03,180
nothing obvious in the API that says

604
00:22:03,180 --> 00:22:04,950
this you have to kind of like read

605
00:22:04,950 --> 00:22:06,030
through the code or keep the

606
00:22:06,030 --> 00:22:07,830
documentation up-to-date or whatever to

607
00:22:07,830 --> 00:22:10,440
really know this and new developers will

608
00:22:10,440 --> 00:22:11,490
come along and you know it works

609
00:22:11,490 --> 00:22:14,000
sometime so it's like really confusing

610
00:22:14,000 --> 00:22:17,250
um the other thing that really hurts is

611
00:22:17,250 --> 00:22:19,350
testability right so like consider our

612
00:22:19,350 --> 00:22:21,720
test for the participants behaviors

613
00:22:21,720 --> 00:22:23,360
around threads

614
00:22:23,360 --> 00:22:25,520
what we're gonna do is you know we can

615
00:22:25,520 --> 00:22:27,830
make a new thread that's easy but when

616
00:22:27,830 --> 00:22:29,660
we call get participants in the context

617
00:22:29,660 --> 00:22:32,690
of a test it's like unclear what we need

618
00:22:32,690 --> 00:22:35,150
to test here you know like we can do two

619
00:22:35,150 --> 00:22:37,580
things one thing one thing we can do is

620
00:22:37,580 --> 00:22:39,920
we can sort of return real participants

621
00:22:39,920 --> 00:22:41,810
from this call in which case like now we

622
00:22:41,810 --> 00:22:43,070
don't have a unit test we've got an

623
00:22:43,070 --> 00:22:44,330
integration test of threads and

624
00:22:44,330 --> 00:22:46,520
participants or we can return mock

625
00:22:46,520 --> 00:22:48,440
participants from here in which case

626
00:22:48,440 --> 00:22:51,020
like the mock four participants needs to

627
00:22:51,020 --> 00:22:54,560
be really clear about like what what is

628
00:22:54,560 --> 00:22:56,450
done by participants code and what is

629
00:22:56,450 --> 00:22:58,430
done by thread code so you know you you

630
00:22:58,430 --> 00:23:00,110
still bundled these things together and

631
00:23:00,110 --> 00:23:01,610
pulling them apart again is pretty hard

632
00:23:01,610 --> 00:23:04,160
um and you know this makes me wonder

633
00:23:04,160 --> 00:23:05,840
like why do we do this whole

634
00:23:05,840 --> 00:23:07,430
object-oriented programming thing like

635
00:23:07,430 --> 00:23:10,610
what what got us here and you know the

636
00:23:10,610 --> 00:23:12,560
first part that like the ones we're all

637
00:23:12,560 --> 00:23:14,270
programmers you know the one thing I

638
00:23:14,270 --> 00:23:16,130
think we're all good with is abstraction

639
00:23:16,130 --> 00:23:17,510
right like you wouldn't you wouldn't

640
00:23:17,510 --> 00:23:18,380
write code if you didn't like

641
00:23:18,380 --> 00:23:20,360
abstraction and I think that's you know

642
00:23:20,360 --> 00:23:23,270
that's something we can keep so in the

643
00:23:23,270 --> 00:23:24,500
chat code they're definitely like

644
00:23:24,500 --> 00:23:26,180
function constructors and function

645
00:23:26,180 --> 00:23:28,100
prototypes they tend to be for like UI

646
00:23:28,100 --> 00:23:30,740
controls you know like that menu or just

647
00:23:30,740 --> 00:23:32,300
or the chat tab view things that we're

648
00:23:32,300 --> 00:23:35,000
gonna have a few of but um but that's

649
00:23:35,000 --> 00:23:37,190
where I would say it stops you know like

650
00:23:37,190 --> 00:23:40,790
inheritance that you know that's when

651
00:23:40,790 --> 00:23:42,290
we're like even in languages that are

652
00:23:42,290 --> 00:23:44,900
built around inheritance like Java like

653
00:23:44,900 --> 00:23:46,370
the best directive there is to use

654
00:23:46,370 --> 00:23:48,140
delegation rather than inheritance

655
00:23:48,140 --> 00:23:49,880
because you know it's just so brittle

656
00:23:49,880 --> 00:23:51,440
like once you've put something in an

657
00:23:51,440 --> 00:23:54,290
inheritance tree then you can't get it

658
00:23:54,290 --> 00:23:56,180
from anywhere else except subclasses and

659
00:23:56,180 --> 00:23:58,280
you know no one really does a good job

660
00:23:58,280 --> 00:24:00,430
of like designing for inheritance like

661
00:24:00,430 --> 00:24:02,540
designing an API is hard and then

662
00:24:02,540 --> 00:24:04,400
designing a class that can be inherited

663
00:24:04,400 --> 00:24:07,750
is like you know ten times harder

664
00:24:07,750 --> 00:24:09,620
polymorphism is another one where like

665
00:24:09,620 --> 00:24:10,970
if you have a language that has

666
00:24:10,970 --> 00:24:12,920
first-class functions and callbacks I

667
00:24:12,920 --> 00:24:15,020
just don't get why you'd have this crazy

668
00:24:15,020 --> 00:24:17,060
contract that says like by naming this

669
00:24:17,060 --> 00:24:19,940
function show I am participating in the

670
00:24:19,940 --> 00:24:21,800
show able interface you know which is

671
00:24:21,800 --> 00:24:24,070
like again this like super untracked

672
00:24:24,070 --> 00:24:27,500
dependency in JavaScript and a callback

673
00:24:27,500 --> 00:24:29,390
totally suffices there and is much more

674
00:24:29,390 --> 00:24:31,610
flexible it means that you can have sort

675
00:24:31,610 --> 00:24:34,070
of pieces of code that don't really that

676
00:24:34,070 --> 00:24:35,570
aren't expressed as objects but can

677
00:24:35,570 --> 00:24:37,100
still connect to

678
00:24:37,100 --> 00:24:39,350
opponents that are um and then the last

679
00:24:39,350 --> 00:24:41,299
one this is the worst one I don't even

680
00:24:41,299 --> 00:24:43,100
get why this was a benefit in the first

681
00:24:43,100 --> 00:24:47,360
place like data that is hidden is data

682
00:24:47,360 --> 00:24:49,940
that you know is not serializable so

683
00:24:49,940 --> 00:24:51,440
like you know when the browser page

684
00:24:51,440 --> 00:24:53,660
unloads when the machine crashes when

685
00:24:53,660 --> 00:24:55,700
you migrate data this is the stuff that

686
00:24:55,700 --> 00:24:58,730
you lose and you know in facebook chat

687
00:24:58,730 --> 00:24:59,929
what we found is it like we had to

688
00:24:59,929 --> 00:25:01,910
externalise everything you know we have

689
00:25:01,910 --> 00:25:03,740
to account for multiple clients marking

690
00:25:03,740 --> 00:25:05,630
things as red or opening chat tabs or

691
00:25:05,630 --> 00:25:08,270
whatever it's gonna be so like all of

692
00:25:08,270 --> 00:25:10,370
our data ended up externalized and we

693
00:25:10,370 --> 00:25:11,690
sort of now I think of like application

694
00:25:11,690 --> 00:25:15,289
data should always just be JSON of old

695
00:25:15,289 --> 00:25:17,390
data like it it should never be hidden

696
00:25:17,390 --> 00:25:21,710
in this way okay so that's my little

697
00:25:21,710 --> 00:25:25,370
rant what did we replace it with so you

698
00:25:25,370 --> 00:25:28,220
know I have to scare quote this cuz like

699
00:25:28,220 --> 00:25:31,730
we used a functional style not strict

700
00:25:31,730 --> 00:25:33,080
functional at all and you know there are

701
00:25:33,080 --> 00:25:35,419
places where we have objects and you

702
00:25:35,419 --> 00:25:37,190
know it's it's intermixed but like in

703
00:25:37,190 --> 00:25:40,010
general I would say you know modules are

704
00:25:40,010 --> 00:25:42,169
connected by functions and not by events

705
00:25:42,169 --> 00:25:45,260
or named interfaces instead of like

706
00:25:45,260 --> 00:25:47,600
class instances so instead of a thread

707
00:25:47,600 --> 00:25:50,120
instance we use a singleton to represent

708
00:25:50,120 --> 00:25:53,000
like all the threads and then this last

709
00:25:53,000 --> 00:25:54,230
thing is the thing I just talked about

710
00:25:54,230 --> 00:25:56,480
we're like application data is generally

711
00:25:56,480 --> 00:25:58,280
sort of thought of as always

712
00:25:58,280 --> 00:26:01,400
serializable so let's go back and look

713
00:26:01,400 --> 00:26:03,230
at that chat tab view example now and

714
00:26:03,230 --> 00:26:04,610
you know the first thing you'll see is

715
00:26:04,610 --> 00:26:05,780
that like the signature for this

716
00:26:05,780 --> 00:26:07,190
constructor is different instead of

717
00:26:07,190 --> 00:26:09,470
getting past a thread object it gets

718
00:26:09,470 --> 00:26:11,539
past a thread ID which is just a string

719
00:26:11,539 --> 00:26:14,390
and now to go get the data about that

720
00:26:14,390 --> 00:26:17,030
thread sorry first we're gonna attach a

721
00:26:17,030 --> 00:26:18,409
template that doesn't change we're gonna

722
00:26:18,409 --> 00:26:20,000
pick out the title just so that we can

723
00:26:20,000 --> 00:26:21,409
close over that it makes it code look

724
00:26:21,409 --> 00:26:23,690
better but then when we want the data

725
00:26:23,690 --> 00:26:26,330
about that we pass that ID back to the

726
00:26:26,330 --> 00:26:30,710
threads singleton and go and pass a

727
00:26:30,710 --> 00:26:33,320
continuation that will get handed the

728
00:26:33,320 --> 00:26:35,690
data for about that Fred once we have it

729
00:26:35,690 --> 00:26:37,280
and that means that like if we have it

730
00:26:37,280 --> 00:26:38,870
great you get called back right away if

731
00:26:38,870 --> 00:26:40,580
we don't we can go back to the server

732
00:26:40,580 --> 00:26:42,100
and get it for you

733
00:26:42,100 --> 00:26:44,750
so this continuation then gets the

734
00:26:44,750 --> 00:26:46,490
thread metadata and we do the same trick

735
00:26:46,490 --> 00:26:48,770
with participants and you'll notice that

736
00:26:48,770 --> 00:26:50,540
thread and participants are completely

737
00:26:50,540 --> 00:26:53,930
coupled in this case so you know this

738
00:26:53,930 --> 00:26:56,120
changes the API it makes it simpler

739
00:26:56,120 --> 00:26:58,610
right threads is just a singleton and

740
00:26:58,610 --> 00:27:00,710
you can obviously tell like what things

741
00:27:00,710 --> 00:27:02,660
support direct returns are like you know

742
00:27:02,660 --> 00:27:03,800
let's say there's some trivial ID

743
00:27:03,800 --> 00:27:05,180
transformation that we can do on the

744
00:27:05,180 --> 00:27:07,610
client obviously you just pass in an ID

745
00:27:07,610 --> 00:27:10,970
get back the normalized ID but the get

746
00:27:10,970 --> 00:27:14,570
function here takes a continuation so

747
00:27:14,570 --> 00:27:15,920
you know that you have to pass that

748
00:27:15,920 --> 00:27:20,090
along with your call for testability

749
00:27:20,090 --> 00:27:22,940
it's like a similar thing where you know

750
00:27:22,940 --> 00:27:25,250
instead of being bound to the

751
00:27:25,250 --> 00:27:26,930
participants data we can use like a mock

752
00:27:26,930 --> 00:27:29,000
function here that we just made this

753
00:27:29,000 --> 00:27:30,710
like utility knife function that can be

754
00:27:30,710 --> 00:27:33,320
called as a constructor or an instance

755
00:27:33,320 --> 00:27:35,300
method or raw function that captures the

756
00:27:35,300 --> 00:27:37,460
calls and can also be used to inject

757
00:27:37,460 --> 00:27:40,370
return data so here we just pass a mock

758
00:27:40,370 --> 00:27:42,590
function to this callback and then we

759
00:27:42,590 --> 00:27:44,150
can poke it off you know do various

760
00:27:44,150 --> 00:27:45,290
things with the mocks make sure that

761
00:27:45,290 --> 00:27:47,420
threads made an async request if we

762
00:27:47,420 --> 00:27:48,920
expect it to whatever that's going to be

763
00:27:48,920 --> 00:27:51,550
and then when we want to verify the data

764
00:27:51,550 --> 00:27:54,080
again it can be expressed in JSON so we

765
00:27:54,080 --> 00:27:55,520
just have like this simple equality

766
00:27:55,520 --> 00:27:57,170
check to be able to talk about our

767
00:27:57,170 --> 00:28:01,400
expectations there you know I do want to

768
00:28:01,400 --> 00:28:03,290
at least build up a straw man and tear

769
00:28:03,290 --> 00:28:04,880
it down about this functional style so

770
00:28:04,880 --> 00:28:06,320
what are the what are some of the things

771
00:28:06,320 --> 00:28:08,990
that I hear objections to you know I

772
00:28:08,990 --> 00:28:11,210
think that most common ones like this is

773
00:28:11,210 --> 00:28:13,910
too hard you know like four layers of

774
00:28:13,910 --> 00:28:15,830
nested callbacks is like it's too hard

775
00:28:15,830 --> 00:28:17,270
to follow the code it's hard to write

776
00:28:17,270 --> 00:28:18,890
the code and and people usually talk

777
00:28:18,890 --> 00:28:20,930
about this is like I get it but someone

778
00:28:20,930 --> 00:28:24,200
else wouldn't and you know I guess what

779
00:28:24,200 --> 00:28:26,180
I say is like yeah coatings hard you

780
00:28:26,180 --> 00:28:28,340
know that's that's just the way it goes

781
00:28:28,340 --> 00:28:31,390
buddy you know writing these apps are

782
00:28:31,390 --> 00:28:33,710
like if they weren't hard to build then

783
00:28:33,710 --> 00:28:34,910
everyone would build them and you know

784
00:28:34,910 --> 00:28:36,680
we'd be out of a job

785
00:28:36,680 --> 00:28:40,790
the the other side of this is that it's

786
00:28:40,790 --> 00:28:42,470
like hard to follow you know it's like

787
00:28:42,470 --> 00:28:45,440
kind of it can be like really and you

788
00:28:45,440 --> 00:28:46,880
know this is related to the like super

789
00:28:46,880 --> 00:28:48,980
indenting thing I guess what I would say

790
00:28:48,980 --> 00:28:50,720
is I think it's clearer than the than

791
00:28:50,720 --> 00:28:52,940
the tangle of events you get in a lot of

792
00:28:52,940 --> 00:28:54,680
OOP code and so I like it better that

793
00:28:54,680 --> 00:28:56,110
way

794
00:28:56,110 --> 00:28:58,130
another thing you see is like there are

795
00:28:58,130 --> 00:28:59,960
too many includes in these files and

796
00:28:59,960 --> 00:29:01,190
it's true like at the bottom of our

797
00:29:01,190 --> 00:29:02,720
dependency chains like I was looking at

798
00:29:02,720 --> 00:29:03,440
chat tab

799
00:29:03,440 --> 00:29:05,720
to prepare for this presentation and at

800
00:29:05,720 --> 00:29:08,419
this point they're like forty includes

801
00:29:08,419 --> 00:29:10,340
at the top of that file I guess the

802
00:29:10,340 --> 00:29:11,570
thing I would say is like at least the

803
00:29:11,570 --> 00:29:14,000
dependencies are tracked and not and not

804
00:29:14,000 --> 00:29:15,379
on track the way they are in that

805
00:29:15,379 --> 00:29:17,899
threads participants example and then

806
00:29:17,899 --> 00:29:19,759
the last one is like this is legit like

807
00:29:19,759 --> 00:29:21,710
you end up using bind a lot when you use

808
00:29:21,710 --> 00:29:23,029
this style and that can be really

809
00:29:23,029 --> 00:29:24,919
inefficient like if you bind at every

810
00:29:24,919 --> 00:29:27,529
call site like every time you call a

811
00:29:27,529 --> 00:29:30,860
method on another module and pass a

812
00:29:30,860 --> 00:29:33,620
callback if you bind every time that

813
00:29:33,620 --> 00:29:36,049
uses memory so you do have to watch out

814
00:29:36,049 --> 00:29:39,320
for that one I hoped I'd have time for

815
00:29:39,320 --> 00:29:40,490
questions but I don't you'll just have

816
00:29:40,490 --> 00:29:42,379
to find me and I'd love to talk about

817
00:29:42,379 --> 00:29:44,179
functional and OOP or chat or and

818
00:29:44,179 --> 00:29:48,559
anything else but I guess here's what I

819
00:29:48,559 --> 00:29:50,870
have to say modularity that's the big

820
00:29:50,870 --> 00:29:52,460
win you know that that's what you

821
00:29:52,460 --> 00:29:54,559
absolutely need to do unit testing goes

822
00:29:54,559 --> 00:29:56,450
right with it I highly recommend it and

