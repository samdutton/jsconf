1
00:00:09,320 --> 00:00:10,880
Hi, everyone.

2
00:00:11,060 --> 00:00:17,520
I'm about to show you some presentation of
new concepts and we have a lot of code.

3
00:00:17,570 --> 00:00:19,460
So, please bear with me.

4
00:00:19,460 --> 00:00:27,740
I hope we're going to have fun in the next
25 minutes and hopefully learn one or two

5
00:00:27,750 --> 00:00:28,750
tricks.

6
00:00:28,750 --> 00:00:38,460
But before we start, I'm whenever I'm going
to show you what's under construction right

7
00:00:38,460 --> 00:00:46,380
now, the main thing here is to put the language
that will show the kind of amazing features

8
00:00:46,380 --> 00:00:55,620
that may or may not come to JavaScript and
all the problems that a new feature can bring

9
00:00:55,620 --> 00:00:58,059
to ship those features to ourselves.

10
00:00:58,059 --> 00:01:01,899
That said, I'm going to bring you back to
the future.

11
00:01:01,899 --> 00:01:14,150
[theme song from Back to the Future playing]
So, I would like to start my presentation

12
00:01:14,150 --> 00:01:16,570
with a tricky question.

13
00:01:16,570 --> 00:01:18,090
What is this?

14
00:01:18,090 --> 00:01:26,880
So, this has different meanings than this
in other language where it most likely refers

15
00:01:26,880 --> 00:01:31,540
to the code scope.

16
00:01:31,540 --> 00:01:34,110
So, in the scope, this in JavaScript, it's
the object.

17
00:01:34,110 --> 00:01:35,310
So, not browser, it's window.

18
00:01:35,310 --> 00:01:40,930
And the web itself, NodeJS, model.exports
and so on.

19
00:01:40,930 --> 00:01:44,650
But what about this inside a function?

20
00:01:44,650 --> 00:01:47,189
Well, depends.

21
00:01:47,189 --> 00:01:52,070
It depends how this function is called.

22
00:01:52,070 --> 00:01:55,390
I will show you my components.

23
00:01:55,390 --> 00:02:01,180
It's a very simple class that has just one
premier and one method.

24
00:02:01,180 --> 00:02:06,649
So, if you're looking at this line 15 here,
you will see that whenever I click on the

25
00:02:06,649 --> 00:02:13,190
button, I want to console log, property.

26
00:02:13,190 --> 00:02:20,290
But actually, my intention is to hit the button
element.

27
00:02:20,290 --> 00:02:24,140
But this the context here is the button event.

28
00:02:24,140 --> 00:02:33,170
I will create it because the button element
doesn't have the full property.

29
00:02:33,170 --> 00:02:36,230
So, how to make this predictable?

30
00:02:36,230 --> 00:02:40,810
So, this inside of JavaScript is tricky.

31
00:02:40,810 --> 00:02:43,140
We can just buy into things.

32
00:02:43,140 --> 00:02:50,150
The first is the prototype.bind which binds
the context of the first sent to the bind

33
00:02:50,150 --> 00:02:53,910
function to the method you want to call.

34
00:02:53,910 --> 00:02:55,190
And error function.

35
00:02:55,190 --> 00:03:00,400
So, I will show the previous example with
these two techniques.

36
00:03:00,400 --> 00:03:08,910
The first one you can see here, this bottom
line here, it's basically binding the cat

37
00:03:08,910 --> 00:03:11,350
instance into meow method.

38
00:03:11,350 --> 00:03:17,920
So, I will print out this one.

39
00:03:17,920 --> 00:03:24,050
I will print out button element there.

40
00:03:24,050 --> 00:03:27,510
And then with error function, it's here.

41
00:03:27,510 --> 00:03:39,100
But you will see that I don't need to explicitly
bind this because it takes the lexical this

42
00:03:39,100 --> 00:03:44,320
and then we will have button console property.

43
00:03:44,320 --> 00:03:52,140
So, the thing is, error function removes a
lot of complexity in order to predict that

44
00:03:52,140 --> 00:03:54,100
this is in a function.

45
00:03:54,100 --> 00:04:01,180
But we still have two cases that we need to
explicitly bind this on a function.

46
00:04:01,180 --> 00:04:02,410
The first one is this one.

47
00:04:02,410 --> 00:04:08,790
Whenever we present in the language here,
you will see that I have a new object called

48
00:04:08,790 --> 00:04:09,790
Obj.

49
00:04:09,790 --> 00:04:18,400
But I don't extend this from the object prototype.

50
00:04:18,400 --> 00:04:20,100
I don't have has own property.

51
00:04:20,100 --> 00:04:29,310
So, when I want to check if I have the X property
inside the Obj, calling property, and the

52
00:04:29,310 --> 00:04:30,350
prototype.

53
00:04:30,350 --> 00:04:36,900
So, to fix this, I need to extract this function
from the object prototype and then call this

54
00:04:36,900 --> 00:04:38,190
in the first context.

55
00:04:38,190 --> 00:04:42,780
In the second, the first for the function.

56
00:04:42,780 --> 00:04:44,810
It's kind of tricky.

57
00:04:44,810 --> 00:04:50,510
In the second one, whenever I want to extract
a method from an object, I need to explicitly

58
00:04:50,510 --> 00:04:52,860
call the context.

59
00:04:52,860 --> 00:05:00,310
So, how do you call this case in a more natural
way?

60
00:05:00,310 --> 00:05:08,590
This is the route for our first proposal.

61
00:05:08,590 --> 00:05:19,470
ｶ?ｶ
this comes with two syntaxes.

62
00:05:19,470 --> 00:05:23,820
The uniform and binary form.

63
00:05:23,820 --> 00:05:30,360
The binary form takes whatever we have on
the left side as a context, it binds to the

64
00:05:30,360 --> 00:05:33,300
right side of the operator.

65
00:05:33,300 --> 00:05:38,960
So, that example could be rewritten on the
lines five and ten?

66
00:05:38,960 --> 00:05:39,960
Yeah?

67
00:05:39,960 --> 00:05:40,960
The last one?

68
00:05:40,960 --> 00:05:41,960
Like this one.

69
00:05:41,960 --> 00:05:43,280
So, it works.

70
00:05:43,280 --> 00:05:46,930
And we need to shift, of course.

71
00:05:46,930 --> 00:05:51,030
And the operator is a little bit different.

72
00:05:51,030 --> 00:05:58,480
It takes the base of the reference you are
passing and sets it as the context of the

73
00:05:58,480 --> 00:05:59,480
methods.

74
00:05:59,480 --> 00:06:08,080
So, this could be the cat.meow.bind and inside.

75
00:06:08,080 --> 00:06:14,790
This we can call because we can compose personalities
through methods.

76
00:06:14,790 --> 00:06:22,990
You can extract those methods and compose
them like in this internal library.

77
00:06:22,990 --> 00:06:27,330
Or on this implementation, our XGS5, there's
a way to do this here.

78
00:06:27,330 --> 00:06:29,640
I don't know if they still encourage this.

79
00:06:29,640 --> 00:06:31,590
I won't do it.

80
00:06:31,590 --> 00:06:33,330
But it's an example.

81
00:06:33,330 --> 00:06:38,230
For example, on this J query library, you
can extract the functions you need.

82
00:06:38,230 --> 00:06:47,900
And it's nice because you bundle only the
functions you need.

83
00:06:47,900 --> 00:06:53,830
And plus, it makes it easy to extend those
libraries.

84
00:06:53,830 --> 00:07:01,650
It's a good solution for the methods, but
it relies on this to be bound.

85
00:07:01,650 --> 00:07:07,650
How can we compose the functions in the same
way without relying on this?

86
00:07:07,650 --> 00:07:10,420
So, let's suppose I have this function here.

87
00:07:10,420 --> 00:07:12,020
This functionality.

88
00:07:12,020 --> 00:07:19,050
Whenever the user puts something, I need to
sanitize this and textualize all the digits

89
00:07:19,050 --> 00:07:21,140
I receive and then log those.

90
00:07:21,140 --> 00:07:25,860
So, usually this is a way that we can do this.

91
00:07:25,860 --> 00:07:33,190
But to make it readable, we end up having
a lot of intermediary variables.

92
00:07:33,190 --> 00:07:38,210
And I think someone can say, ah, this could
be written without using this variable.

93
00:07:38,210 --> 00:07:41,860
But it will look more or less like this.

94
00:07:41,860 --> 00:07:49,400
It could be tricky because we may have a lot
of nested functions, one inside the other

95
00:07:49,400 --> 00:07:51,139
like this.

96
00:07:51,139 --> 00:07:58,919
So, to solve this problem, I wanted to present
you to you the second proposal.

97
00:07:58,919 --> 00:08:06,810
ｶ?ｶ
part operator.

98
00:08:06,810 --> 00:08:16,420
It's a syntax for function composition.

99
00:08:16,420 --> 00:08:21,090
It creates a chain of functions and it's backwards
compatible.

100
00:08:21,090 --> 00:08:25,860
So, remember this example here?

101
00:08:25,860 --> 00:08:31,880
Using pipeline operator, I can rewrite this
one with this code example.

102
00:08:31,880 --> 00:08:36,690
So, you can see on the top of the pipeline
chain you have the subject.

103
00:08:36,690 --> 00:08:43,330
And then you start to pass this object through
the next one, and the result will be the subject

104
00:08:43,330 --> 00:08:45,770
for the following stack and so on and so forth.

105
00:08:45,770 --> 00:08:48,650
And this code could be to this.

106
00:08:48,650 --> 00:08:51,290
It will remain.

107
00:08:51,290 --> 00:08:55,500
You don't need to write all those variables.

108
00:08:55,500 --> 00:09:00,140
What if that textualized number needs to receive
a second parameter?

109
00:09:00,140 --> 00:09:09,590
For example, if we have a need to only textualize
zeros and ones, how can we do that here?

110
00:09:09,590 --> 00:09:13,880
One possible solution is to create a narrow
function to receive a one per meter.

111
00:09:13,880 --> 00:09:19,690
And inside this function, bind the second
parameter inside of this.

112
00:09:19,690 --> 00:09:25,940
But it creates a syntax server because you
need to wrap to need to wrap the error

113
00:09:25,940 --> 00:09:27,600
function with the parentheses.

114
00:09:27,600 --> 00:09:31,330
So, it's kind of tricky.

115
00:09:31,330 --> 00:09:38,760
And what if I need to process the sanitized
and what if the sanitized function needs to

116
00:09:38,760 --> 00:09:43,430
process the server?

117
00:09:43,430 --> 00:09:47,570
I can await this.

118
00:09:47,570 --> 00:09:55,070
But it's tricky because this line here, it's
not clear how this would go to.

119
00:09:55,070 --> 00:10:02,810
I can get this to the rate, parameter call
with the step.

120
00:10:02,810 --> 00:10:10,560
Or I wait for the sanitize and then the result
will be a function that then I will send parameter.

121
00:10:10,560 --> 00:10:16,490
So, we have a tricky question.

122
00:10:16,490 --> 00:10:24,940
A tricky it's tricky to reason about how
which one of those could be the two.

123
00:10:24,940 --> 00:10:35,020
To answer this question, we need to understand
the two proposals we have for this.

124
00:10:35,020 --> 00:10:38,730
Because they're proposals don't cover this
completely.

125
00:10:38,730 --> 00:10:46,390
So, I want to present you the first one, which
is smart line.

126
00:10:46,390 --> 00:10:50,580
You have this in two ways.

127
00:10:50,580 --> 00:10:59,450
You can see here we have line two, the top
style, and the line four, the bear style.

128
00:10:59,450 --> 00:11:04,730
Whenever we need to use parentheses or describe
brackets, you need to use the top, and then

129
00:11:04,730 --> 00:11:13,330
you need to use the hash token to as a
place holder for the subject for the previous

130
00:11:13,330 --> 00:11:14,440
step.

131
00:11:14,440 --> 00:11:15,580
From the previous step.

132
00:11:15,580 --> 00:11:18,040
And whenever I do anything, it's straightforward.

133
00:11:18,040 --> 00:11:20,360
You just need to do use it.

134
00:11:20,360 --> 00:11:27,760
This is information that in this chart it
is subject to change.

135
00:11:27,760 --> 00:11:30,300
It's not final.

136
00:11:30,300 --> 00:11:32,750
What are carry?

137
00:11:32,750 --> 00:11:36,990
If you try to use it in the first, since you
are using parentheses, it thinks that it's

138
00:11:36,990 --> 00:11:45,029
topic style since you don't have the token
for the syntax server.

139
00:11:45,029 --> 00:11:50,000
So, the good way to do this is on the second
example here.

140
00:11:50,000 --> 00:11:53,690
This is good because
>> There's a new challenger!

141
00:11:53,690 --> 00:11:58,290
WILLIAN: We have a new challenger.

142
00:11:58,290 --> 00:12:01,610
So, there is the F# pipeline proposals.

143
00:12:01,610 --> 00:12:03,170
The data proposal.

144
00:12:03,170 --> 00:12:07,370
It just extends the minimal proposal with
an await step.

145
00:12:07,370 --> 00:12:14,050
And it you can see on this example here,
you have just a solo await step here.

146
00:12:14,050 --> 00:12:19,350
And this means that it needs to await for
the first step to be finished.

147
00:12:19,350 --> 00:12:25,720
And then as soon as that previous step is
finished, then it passes to the next step.

148
00:12:25,720 --> 00:12:33,870
You can see here that we still have the error
function being wrappered with the parentheses.

149
00:12:33,870 --> 00:12:40,420
But these are I will show you how we can
solve this just in a couple minutes.

150
00:12:40,420 --> 00:12:43,790
We will discuss the operator.

151
00:12:43,790 --> 00:12:49,580
We saw this example here with the sharp as
a token.

152
00:12:49,580 --> 00:12:50,720
We can do this.

153
00:12:50,720 --> 00:12:54,149
We can solve this this line with partial
application.

154
00:12:54,149 --> 00:12:59,350
But first I need to explain to you what is
partial application?

155
00:12:59,350 --> 00:13:06,589
Partial application refers to a process of
giving a function without any editing.

156
00:13:06,589 --> 00:13:10,810
It returns another function with a smaller
entity.

157
00:13:10,810 --> 00:13:13,500
By bounding the fixed parameters.

158
00:13:13,500 --> 00:13:18,959
And by the way, it's the number of the programmers
that a specific function takes.

159
00:13:18,959 --> 00:13:22,270
So, I have this example here where a function.

160
00:13:22,270 --> 00:13:27,180
And then you receive it, and the name and
location.

161
00:13:27,180 --> 00:13:29,529
Just console log those.

162
00:13:29,529 --> 00:13:37,399
But what if this example like this is just
straightforward, but what if we need to fetch

163
00:13:37,399 --> 00:13:39,570
the location for the server?

164
00:13:39,570 --> 00:13:41,370
I don't know why.

165
00:13:41,370 --> 00:13:51,640
But then we will end up with this kind of
code that we have some parameters like that

166
00:13:51,640 --> 00:13:52,640
we assigned before.

167
00:13:52,640 --> 00:13:58,600
And then whenever we have this chain reserved,
we console log it.

168
00:13:58,600 --> 00:14:00,890
Or call the function.

169
00:14:00,890 --> 00:14:11,510
This kind but we still have a way to bind
this and create a partial application in ECMAScript.

170
00:14:11,510 --> 00:14:17,100
So, we can do this using function bind.

171
00:14:17,100 --> 00:14:23,520
Sometimes we forgot that binds bind
dot on binds the concept, but also binds parameters.

172
00:14:23,520 --> 00:14:32,740
So, if the first parameter is the but the
second parameter is what you want to call.

173
00:14:32,740 --> 00:14:42,410
And it returns a new function just with the
remaining missing parameters.

174
00:14:42,410 --> 00:14:49,950
So, with this, I can rewrite that function
using this bind.

175
00:14:49,950 --> 00:14:54,110
So, on the first line you can see that this
is achievable.

176
00:14:54,110 --> 00:14:59,030
But what if I want to bind just the first
and the last parameter?

177
00:14:59,030 --> 00:15:04,840
There is a problem with the binder because
I'm sorry the bind function.

178
00:15:04,840 --> 00:15:12,529
It takes the parameters from the left to right
without jumping in one of those.

179
00:15:12,529 --> 00:15:13,790
So, this is a problem.

180
00:15:13,790 --> 00:15:18,709
And someone can say, yeah, but we can solve
this with carry.

181
00:15:18,709 --> 00:15:20,560
Yes, we can.

182
00:15:20,560 --> 00:15:29,089
But you need to remain that even though carry,
it's our way to achieve a partial application,

183
00:15:29,089 --> 00:15:32,240
doesn't mean that carry is partial application.

184
00:15:32,240 --> 00:15:40,840
Carry is, each time you carry a function,
you receive another function and add and minus

185
00:15:40,840 --> 00:15:41,840
one.

186
00:15:41,840 --> 00:15:48,089
And so, that example, let's say I want to
just bind the first and the last parameter

187
00:15:48,089 --> 00:15:55,610
so I can write the three first lines of code.

188
00:15:55,610 --> 00:16:00,670
Create like that carry function that has the
location.

189
00:16:00,670 --> 00:16:11,051
Then on the line five I bind the first two
parameters and then I receive the function

190
00:16:11,051 --> 00:16:15,410
to bind to call with the third one online
eight.

191
00:16:15,410 --> 00:16:18,230
So, you can see that it's kind of a purpose.

192
00:16:18,230 --> 00:16:23,850
Because whenever we want to change the configuration
that you want to bind, you need to rewrite

193
00:16:23,850 --> 00:16:25,990
that carry function there.

194
00:16:25,990 --> 00:16:34,350
And, yes, of course, you can do this with
a partial application with an error function.

195
00:16:34,350 --> 00:16:40,470
Which it's kind of better than the carry function.

196
00:16:40,470 --> 00:16:47,339
But you still need to write the function for
each configuration of parameters.

197
00:16:47,339 --> 00:16:55,680
So, this is the hook for our last proposal
for today.

198
00:16:55,680 --> 00:17:02,620
ｶ?ｶ
partial application.

199
00:17:02,620 --> 00:17:09,159
Partial application proposal creates two new
tokens to be placed in this the parameters.

200
00:17:09,159 --> 00:17:16,909
So, the question mark is for and the ellipses
is for multiple.

201
00:17:16,909 --> 00:17:21,499
So, the examples could be written in this
way.

202
00:17:21,499 --> 00:17:24,100
The first and second parameters being bound.

203
00:17:24,100 --> 00:17:25,759
And the third one, a question mark.

204
00:17:25,759 --> 00:17:31,789
This will return a new function that you can
call later with the missing parameters.

205
00:17:31,789 --> 00:17:39,850
It's nice because you can do a lot of different
configurations of parameters without them

206
00:17:39,850 --> 00:17:43,519
having to do any kind of code.

207
00:17:43,519 --> 00:17:46,039
But, wait.

208
00:17:46,039 --> 00:17:48,119
There is more.

209
00:17:48,119 --> 00:17:49,119
There is this.

210
00:17:49,119 --> 00:17:50,119
This token.

211
00:17:50,119 --> 00:17:56,500
And it's it spreads the unbalanced parameters
on a specific position.

212
00:17:56,500 --> 00:18:01,870
It's very useful whenever you want to bind
like the first parameters and you don't need

213
00:18:01,870 --> 00:18:05,679
to care about the rest of those or the last
one.

214
00:18:05,679 --> 00:18:10,139
So, I have an example here.

215
00:18:10,139 --> 00:18:16,779
For example, this is a function that it's
much greater than zero.

216
00:18:16,779 --> 00:18:23,010
So, I receive a bunch of numbers and I need
to return whenever I have a number greater

217
00:18:23,010 --> 00:18:27,070
than zero, I return the max of those.

218
00:18:27,070 --> 00:18:31,490
Whenever I only received negative numbers,
I return zero.

219
00:18:31,490 --> 00:18:35,279
So, this one, it's okay.

220
00:18:35,279 --> 00:18:37,179
But we can do better.

221
00:18:37,179 --> 00:18:43,769
With this we can bind just the zero as the
first parameter and don't care about the rest.

222
00:18:43,769 --> 00:18:48,799
And this will return a function with zero
being bound.

223
00:18:48,799 --> 00:18:52,769
And this is nice because it doesn't matter
how I can call it, if I call in the first

224
00:18:52,769 --> 00:18:55,929
configuration it will return the same as before.

225
00:18:55,929 --> 00:19:03,169
And since zero is bound to math.next, I will
receive zero whenever it sends just negative

226
00:19:03,169 --> 00:19:05,899
numbers.

227
00:19:05,899 --> 00:19:08,639
[ Laughter ]

228
00:19:08,639 --> 00:19:18,010
So, I have at least you have this configuration
on the F# proposal.

229
00:19:18,010 --> 00:19:23,509
And I told you that this kind of syntax over
here to wrap an error function with this balance.

230
00:19:23,509 --> 00:19:29,330
But with partial application we can rewrite
this line four to this.

231
00:19:29,330 --> 00:19:35,600
And we have more like pre code, a readable
one.

232
00:19:35,600 --> 00:19:43,559
So, then you may ask me, should I use this
all of this amazing stuff in production?

233
00:19:43,559 --> 00:19:44,559
No.

234
00:19:44,559 --> 00:19:46,759
These proposals are in the very early stage.

235
00:19:46,759 --> 00:19:51,480
nothing I showed you is even in the stage
two.

236
00:19:51,480 --> 00:19:56,429
The binary is just stage zero and the other
two in stage one.

237
00:19:56,429 --> 00:20:04,299
That is a lot of conversations to be done
in order to fix that syntax.

238
00:20:04,299 --> 00:20:12,019
One form of one proposal may shape the syntax
of the other or even remove completely.

239
00:20:12,019 --> 00:20:20,279
So, my point here is to call you to participate
with this discussion.

240
00:20:20,279 --> 00:20:30,309
On my second slide I will share with you later
on, there is the link for TC39 proposals page.

241
00:20:30,309 --> 00:20:37,909
Whenever you wanted to like show your interest
in some proposals or express your concerns,

242
00:20:37,909 --> 00:20:44,659
open an issue, put stars, create a talk about
it, as I did.

243
00:20:44,659 --> 00:20:50,859
Before I finish, I want to thank that guy,
Brendan Bush who was the guy who helped me

244
00:20:50,859 --> 00:20:53,899
finish with these designs.

245
00:20:53,899 --> 00:20:57,739
Because as a JavaScript designer.

246
00:20:57,739 --> 00:20:59,749
This guy here, Daniel.

247
00:20:59,749 --> 00:21:01,509
Suddenly he is behind me.

248
00:21:01,509 --> 00:21:04,830
He helped me with the technical stuff.

249
00:21:04,830 --> 00:21:08,649
Like don't introduce any misconceptions to
you.

250
00:21:08,649 --> 00:21:13,600
These are my contacts if you want to get in
touch with me.

251
00:21:13,600 --> 00:21:23,489
I will try to in the next weeks write all
of these in an act code that may help you

252
00:21:23,489 --> 00:21:26,610
to understand more about it.

253
00:21:26,610 --> 00:21:28,230
And with this, I think I will leave you.

