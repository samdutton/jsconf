1
00:00:06,070 --> 00:00:09,280

okay now before I start my

2
00:00:09,280 --> 00:00:11,620
presentation I just want to go as most

3
00:00:11,620 --> 00:00:14,290
disclaimer all the proposed

4
00:00:14,290 --> 00:00:18,100
our own stage 1 in tc39 process which

5
00:00:18,100 --> 00:00:20,050
means that the community decided that

6
00:00:20,050 --> 00:00:22,869
the use case of this proposed that this

7
00:00:22,869 --> 00:00:26,590
proposed tries to solve are valid and it

8
00:00:26,590 --> 00:00:28,090
worth more investigation investigation

9
00:00:28,090 --> 00:00:30,460
nothing else okay

10
00:00:30,460 --> 00:00:34,780
the main purpose here is you still have

11
00:00:34,780 --> 00:00:38,340
a nice nick peak about of the future

12
00:00:38,340 --> 00:00:41,800
javascript and understand the use case

13
00:00:41,800 --> 00:00:45,370
broad pros and cons of this or each one

14
00:00:45,370 --> 00:00:49,150
of these features and create some words

15
00:00:49,150 --> 00:00:51,160
about the amazing and work that this

16
00:00:51,160 --> 00:00:52,960
attorney committee is doing in order to

17
00:00:52,960 --> 00:00:59,850
make our language better so if you have

18
00:00:59,850 --> 00:01:02,710
more a thing if I have any any concerns

19
00:01:02,710 --> 00:01:07,299
or if wanna show your excitement about

20
00:01:07,299 --> 00:01:09,729
some of the features or even though

21
00:01:09,729 --> 00:01:12,670
feature that I'm not mentioning here go

22
00:01:12,670 --> 00:01:16,390
to this link is their github repository

23
00:01:16,390 --> 00:01:18,550
all the proposed there they work on is

24
00:01:18,550 --> 00:01:23,470
there so the agenda for today is I will

25
00:01:23,470 --> 00:01:25,630
talk about pattern matching pipeline

26
00:01:25,630 --> 00:01:29,530
operator binaries T ast and a dangerous

27
00:01:29,530 --> 00:01:32,409
thing I will throw some opinions on that

28
00:01:32,409 --> 00:01:35,590
so if you will if you see this red

29
00:01:35,590 --> 00:01:39,010
border it means it's my opinion so if

30
00:01:39,010 --> 00:01:40,390
you disagree like let's talk to me

31
00:01:40,390 --> 00:01:42,790
afterwards and otherwise just ignore it

32
00:01:42,790 --> 00:01:47,850
because it's just my opinion with that

33
00:01:47,850 --> 00:01:52,190
sound

34
00:01:52,200 --> 00:02:01,859
[Music]

35
00:02:01,869 --> 00:02:10,670
okay to give a your background

36
00:02:10,670 --> 00:02:12,800
motivation about the first proposal I

37
00:02:12,800 --> 00:02:15,800
want to first talk about conditionals in

38
00:02:15,800 --> 00:02:17,630
JavaScript in JavaScript nowadays we

39
00:02:17,630 --> 00:02:20,959
have three ways to do conditionals if

40
00:02:20,959 --> 00:02:23,390
you're if knows the statement switch

41
00:02:23,390 --> 00:02:25,870
statement in ternary eternal expression

42
00:02:25,870 --> 00:02:28,180
to help you to get the picture an

43
00:02:28,180 --> 00:02:30,170
expression is something that they value

44
00:02:30,170 --> 00:02:33,140
a it's dot Val value and a statement is

45
00:02:33,140 --> 00:02:35,959
just something that does something I

46
00:02:35,959 --> 00:02:38,510
will show quickly how each one of these

47
00:02:38,510 --> 00:02:42,590
words so an if-else statement requires a

48
00:02:42,590 --> 00:02:44,569
condition which is thrown by this

49
00:02:44,569 --> 00:02:50,120
parenthesis and which can evaluate to

50
00:02:50,120 --> 00:02:52,580
true fee or false value if the condition

51
00:02:52,580 --> 00:02:56,170
is true it is equids the first block

52
00:02:56,170 --> 00:02:59,630
which is the curly brackets there and if

53
00:02:59,630 --> 00:03:04,310
not if it's false goes to the to the

54
00:03:04,310 --> 00:03:09,500
else block if there is one okay just to

55
00:03:09,500 --> 00:03:13,510
help you to get Peter I I create this

56
00:03:13,510 --> 00:03:16,220
snippet which is just a function that

57
00:03:16,220 --> 00:03:21,680
outputs a moyes that mostly reflects the

58
00:03:21,680 --> 00:03:27,680
the the the the temperature this is so I

59
00:03:27,680 --> 00:03:30,850
forgot to firstly it is to Freud sorry

60
00:03:30,850 --> 00:03:35,000
okay so as you can see here like you

61
00:03:35,000 --> 00:03:37,430
have a an ephah statement and then if

62
00:03:37,430 --> 00:03:39,260
this is true it returns like all the

63
00:03:39,260 --> 00:03:42,230
fire otherwise it falls to the LC

64
00:03:42,230 --> 00:03:44,930
statement which is another heavy

65
00:03:44,930 --> 00:03:48,410
statement so with this you can Cheney if

66
00:03:48,410 --> 00:03:50,930
an Elsa statement and this can go wild

67
00:03:50,930 --> 00:03:52,970
like I'm not even talk about that nasty

68
00:03:52,970 --> 00:03:59,930
if so if if I have like oh and this kind

69
00:03:59,930 --> 00:04:02,480
of sequential checks with just a small

70
00:04:02,480 --> 00:04:05,420
code to react to this I think switch

71
00:04:05,420 --> 00:04:06,440
statement could fit

72
00:04:06,440 --> 00:04:08,570
better so let's check how a switch

73
00:04:08,570 --> 00:04:13,130
statement works so as I told you that if

74
00:04:13,130 --> 00:04:14,600
statements very handy when you want to

75
00:04:14,600 --> 00:04:18,620
just react to a cup of choice and you

76
00:04:18,620 --> 00:04:21,680
know or we have a big chunk of code to

77
00:04:21,680 --> 00:04:24,380
run but when I will have like a

78
00:04:24,380 --> 00:04:26,930
multiple-choice with just a small code

79
00:04:26,930 --> 00:04:30,740
to react to this I think maybe a switch

80
00:04:30,740 --> 00:04:32,150
statement could be a good choice

81
00:04:32,150 --> 00:04:35,360
so how switch statement works so have

82
00:04:35,360 --> 00:04:38,900
like under between disbalances an

83
00:04:38,900 --> 00:04:42,110
expression and it evaluates this

84
00:04:42,110 --> 00:04:44,870
expression try to match with one of

85
00:04:44,870 --> 00:04:48,250
these cases statements and owns the

86
00:04:48,250 --> 00:04:50,630
expression matched to the expression

87
00:04:50,630 --> 00:04:52,520
inside the case statement this is the

88
00:04:52,520 --> 00:04:54,050
entry point of the the switch statement

89
00:04:54,050 --> 00:04:59,450
so the the the this is a key to enter in

90
00:04:59,450 --> 00:05:03,860
this point it get it gets going until

91
00:05:03,860 --> 00:05:05,990
the end so that's why we have this break

92
00:05:05,990 --> 00:05:08,660
statement to jump out of the the switch

93
00:05:08,660 --> 00:05:12,470
statement so going back to our initial

94
00:05:12,470 --> 00:05:16,330
example this is the way I just make the

95
00:05:16,330 --> 00:05:19,640
we will wrote the the previous example

96
00:05:19,640 --> 00:05:21,620
using switch statement as you can see

97
00:05:21,620 --> 00:05:24,169
here you oftentimes we just use the

98
00:05:24,169 --> 00:05:25,790
constant in the case statement but here

99
00:05:25,790 --> 00:05:28,460
see someone to trust us the truth value

100
00:05:28,460 --> 00:05:30,820
so I put that constant in the the switch

101
00:05:30,820 --> 00:05:33,410
expression and the comparison inside the

102
00:05:33,410 --> 00:05:38,960
case expression the third one like is

103
00:05:38,960 --> 00:05:42,500
the ternary expression so the ternary

104
00:05:42,500 --> 00:05:45,590
operator became popular recently most by

105
00:05:45,590 --> 00:05:48,590
the fictional programmers and who tries

106
00:05:48,590 --> 00:05:50,390
to write the code which am as much

107
00:05:50,390 --> 00:05:53,660
expression as possible it's it basically

108
00:05:53,660 --> 00:05:55,640
works as the following give it a

109
00:05:55,640 --> 00:05:57,800
condition if it's true it executes that

110
00:05:57,800 --> 00:06:00,380
block after the question mark it's false

111
00:06:00,380 --> 00:06:02,390
or if it's false

112
00:06:02,390 --> 00:06:06,530
after there the column so sister Mary is

113
00:06:06,530 --> 00:06:08,960
an expression you can use error function

114
00:06:08,960 --> 00:06:11,750
and to make the that previous example

115
00:06:11,750 --> 00:06:15,380
more concise and but it is readable I

116
00:06:15,380 --> 00:06:18,540
don't know I'm not heated dirt

117
00:06:18,540 --> 00:06:20,160
there are people that really like this

118
00:06:20,160 --> 00:06:24,480
approach as you can see there are a lot

119
00:06:24,480 --> 00:06:27,480
of ways to do conditional in JavaScript

120
00:06:27,480 --> 00:06:27,900
today

121
00:06:27,900 --> 00:06:30,740
what's the matter of the fourth one

122
00:06:30,740 --> 00:06:34,410
could you imagine what could happen if

123
00:06:34,410 --> 00:06:36,840
you mix if statement with switch

124
00:06:36,840 --> 00:06:39,360
statement plus the power for the power

125
00:06:39,360 --> 00:06:46,130
of distracting parameter very matching

126
00:06:46,130 --> 00:06:51,840
so transcend it better how I create this

127
00:06:51,840 --> 00:06:54,480
for example which I have we have like a

128
00:06:54,480 --> 00:06:58,770
list of shapes with size color type and

129
00:06:58,770 --> 00:07:01,770
I want I want to log all these circles

130
00:07:01,770 --> 00:07:06,210
red squares and big ball triangles just

131
00:07:06,210 --> 00:07:09,090
to context wise this will be our sample

132
00:07:09,090 --> 00:07:14,100
entry and this is how this is one of

133
00:07:14,100 --> 00:07:17,280
partition solution for the problem but

134
00:07:17,280 --> 00:07:19,620
it's tricky that it becomes tricky

135
00:07:19,620 --> 00:07:21,810
because it can easily become hard to

136
00:07:21,810 --> 00:07:24,540
reason about because the more checks we

137
00:07:24,540 --> 00:07:26,670
have then the bigger is the if statement

138
00:07:26,670 --> 00:07:29,910
and this is the way we can achieve this

139
00:07:29,910 --> 00:07:34,770
with with pattern matching so because of

140
00:07:34,770 --> 00:07:37,440
the time I want to explain the concepts

141
00:07:37,440 --> 00:07:39,540
of the pattern matching if you are

142
00:07:39,540 --> 00:07:41,520
interested in interest in this we can

143
00:07:41,520 --> 00:07:45,630
talk more about this later so this is

144
00:07:45,630 --> 00:07:48,450
the first first part part of it which is

145
00:07:48,450 --> 00:07:52,110
the case statement it defines the start

146
00:07:52,110 --> 00:07:55,800
of the pattern matching statement so it

147
00:07:55,800 --> 00:07:59,340
receives just one value as input which

148
00:07:59,340 --> 00:08:01,110
is inside this parenthesis which is the

149
00:08:01,110 --> 00:08:04,260
case expression so then we have

150
00:08:04,260 --> 00:08:08,130
afterwards the wain clause so the

151
00:08:08,130 --> 00:08:11,070
windows is divided in two parts the

152
00:08:11,070 --> 00:08:13,920
match pattern which is this first pair

153
00:08:13,920 --> 00:08:17,700
of curly brackets and the Wayne Clause

154
00:08:17,700 --> 00:08:18,150
body

155
00:08:18,150 --> 00:08:22,320
so whenever the shape of the parent the

156
00:08:22,320 --> 00:08:24,750
the pattern and makes the shape of the

157
00:08:24,750 --> 00:08:29,670
expression it gets into this it executes

158
00:08:29,670 --> 00:08:32,900
the this body

159
00:08:32,900 --> 00:08:36,090
so as you can see to achieve the second

160
00:08:36,090 --> 00:08:38,729
condition I just need to create another

161
00:08:38,729 --> 00:08:43,280
query let's say not another pattern and

162
00:08:43,280 --> 00:08:46,020
so in here you have something different

163
00:08:46,020 --> 00:08:48,630
you can check that we have like we are

164
00:08:48,630 --> 00:08:51,450
matching the size and then afterwards we

165
00:08:51,450 --> 00:08:55,590
have this if statement which not a an if

166
00:08:55,590 --> 00:08:58,200
statement it's just it's called magic

167
00:08:58,200 --> 00:09:02,150
word so whenever the first part match

168
00:09:02,150 --> 00:09:05,280
even though the like if the the match

169
00:09:05,280 --> 00:09:07,770
guard returns false we don't execute

170
00:09:07,770 --> 00:09:11,250
that that body we just skip the last

171
00:09:11,250 --> 00:09:14,400
part is when I will put a variable and

172
00:09:14,400 --> 00:09:20,310
stay alone on this match better it's

173
00:09:20,310 --> 00:09:23,670
just it just matched everything so it's

174
00:09:23,670 --> 00:09:25,680
kind of the default statement for force

175
00:09:25,680 --> 00:09:32,280
which case okay now even though man

176
00:09:32,280 --> 00:09:34,140
parent may is powerful we should not

177
00:09:34,140 --> 00:09:35,700
forget to use the right tool to do the

178
00:09:35,700 --> 00:09:39,930
right job remember or whether example

179
00:09:39,930 --> 00:09:42,900
using part and a pattern matching we

180
00:09:42,900 --> 00:09:45,780
could do like this so keep in mind that

181
00:09:45,780 --> 00:09:50,870
not everything they need to use a hammer

182
00:09:50,870 --> 00:09:55,170
okay dangerous part this brings me some

183
00:09:55,170 --> 00:09:58,620
some wishes like since we have three

184
00:09:58,620 --> 00:10:00,420
ways to do conditionals in JavaScript

185
00:10:00,420 --> 00:10:05,010
and to our arrays a statement so I would

186
00:10:05,010 --> 00:10:06,450
like to see parent matching linking

187
00:10:06,450 --> 00:10:09,540
JavaScript as as expression so we could

188
00:10:09,540 --> 00:10:13,380
have because now as its proposed its

189
00:10:13,380 --> 00:10:16,890
proposed as a statement and I think and

190
00:10:16,890 --> 00:10:18,900
having this I know there are there are a

191
00:10:18,900 --> 00:10:20,820
lot of chronic case that needs to be

192
00:10:20,820 --> 00:10:23,820
covered to make this as as an expression

193
00:10:23,820 --> 00:10:25,860
but I would like to wait more to have

194
00:10:25,860 --> 00:10:29,820
this and have this as expression but if

195
00:10:29,820 --> 00:10:34,230
this lens as a as a statement and if we

196
00:10:34,230 --> 00:10:35,910
have a do expression aligned in

197
00:10:35,910 --> 00:10:37,770
JavaScript we can write prior image we

198
00:10:37,770 --> 00:10:40,620
do expression so let's go to the next

199
00:10:40,620 --> 00:10:42,030
one

200
00:10:42,030 --> 00:10:44,550
before introduce the next proposal let's

201
00:10:44,550 --> 00:10:45,920
check

202
00:10:45,920 --> 00:10:48,290
what is functional composition in how we

203
00:10:48,290 --> 00:10:50,480
can do this even in JavaScript so

204
00:10:50,480 --> 00:10:52,510
function composition is a mathematical

205
00:10:52,510 --> 00:10:55,940
mathematical concept that allows you to

206
00:10:55,940 --> 00:10:58,160
combine two or more functions to create

207
00:10:58,160 --> 00:11:01,940
a new function okay so to help you to

208
00:11:01,940 --> 00:11:02,810
get the picture

209
00:11:02,810 --> 00:11:05,660
let's could cook a bento I came up with

210
00:11:05,660 --> 00:11:07,640
this example just because it's I think

211
00:11:07,640 --> 00:11:09,890
it's easier to reason about food and

212
00:11:09,890 --> 00:11:15,170
because I like to use a mooch so when I

213
00:11:15,170 --> 00:11:18,730
was like whenever have a function that

214
00:11:18,730 --> 00:11:21,440
you the output of the previous function

215
00:11:21,440 --> 00:11:24,620
use as input to the next function you

216
00:11:24,620 --> 00:11:27,200
like you think that you need to compose

217
00:11:27,200 --> 00:11:30,380
those but like to do this nowadays one

218
00:11:30,380 --> 00:11:32,029
of the possible ways is to do this

219
00:11:32,029 --> 00:11:35,600
within this intermediary variables but

220
00:11:35,600 --> 00:11:38,000
it becomes verbose just just because you

221
00:11:38,000 --> 00:11:39,800
need to create this variable just to

222
00:11:39,800 --> 00:11:41,930
hold this function to this value until

223
00:11:41,930 --> 00:11:43,870
use this as input to the next function

224
00:11:43,870 --> 00:11:47,570
so I don't want I don't want to use this

225
00:11:47,570 --> 00:11:51,470
intermediate variables okay like how can

226
00:11:51,470 --> 00:11:55,130
we do this better right I can do like

227
00:11:55,130 --> 00:11:59,540
this but it's a trick treasonable

228
00:11:59,540 --> 00:12:01,370
because the way the data flow is

229
00:12:01,370 --> 00:12:03,020
different that the way we read the code

230
00:12:03,020 --> 00:12:04,970
because the the data flows from the

231
00:12:04,970 --> 00:12:06,320
inner function to the our reference

232
00:12:06,320 --> 00:12:08,540
outer function but the way we read this

233
00:12:08,540 --> 00:12:11,570
like top down left right and there is a

234
00:12:11,570 --> 00:12:13,460
1x or problem that the more we change

235
00:12:13,460 --> 00:12:15,110
these functions the more an asset that

236
00:12:15,110 --> 00:12:16,880
we have this call so it's not so

237
00:12:16,880 --> 00:12:20,420
readable okay we can use low - flow for

238
00:12:20,420 --> 00:12:23,870
of for pipe in this function and a more

239
00:12:23,870 --> 00:12:27,710
readable way let's say or ramp down a

240
00:12:27,710 --> 00:12:32,480
pipe or even vanilla J's right so

241
00:12:32,480 --> 00:12:34,959
wouldn't be nice to have this capability

242
00:12:34,959 --> 00:12:37,400
somehow incorporate into JavaScript

243
00:12:37,400 --> 00:12:39,290
without having to rely to external

244
00:12:39,290 --> 00:12:43,580
library or some homemade functions so

245
00:12:43,580 --> 00:12:45,380
let's bring the the second proposal of

246
00:12:45,380 --> 00:12:48,800
this talk

247
00:12:48,810 --> 00:12:52,540
pipeline operator so pipeline operator

248
00:12:52,540 --> 00:12:57,000
is a syntactic sugar for this use case

249
00:12:57,000 --> 00:12:59,350
it creates a streamline

250
00:12:59,350 --> 00:13:01,330
chain of functions you know readable in

251
00:13:01,330 --> 00:13:04,390
functional manner and in its backhoe

252
00:13:04,390 --> 00:13:08,920
backwards compatible so that initial

253
00:13:08,920 --> 00:13:14,590
example of great Beto could be used to I

254
00:13:14,590 --> 00:13:17,680
only have five minutes sir really I just

255
00:13:17,680 --> 00:13:24,820
started oh I need to hurry up okay so

256
00:13:24,820 --> 00:13:27,400
use the pipeline operator I can do like

257
00:13:27,400 --> 00:13:29,950
this so it becomes clear that the way

258
00:13:29,950 --> 00:13:31,330
there are flow is the way I read the

259
00:13:31,330 --> 00:13:34,120
code and this will be the sugar to this

260
00:13:34,120 --> 00:13:36,370
one it's nice right

261
00:13:36,370 --> 00:13:39,510
so what if my chain function like

262
00:13:39,510 --> 00:13:42,670
receives more one more parameter let's

263
00:13:42,670 --> 00:13:45,190
suppose that we have this add fish to

264
00:13:45,190 --> 00:13:47,980
create an agree and we need to define

265
00:13:47,980 --> 00:13:50,920
which kind of fish we need to add to the

266
00:13:50,920 --> 00:13:54,970
to the rice once we have it so we could

267
00:13:54,970 --> 00:13:57,070
wrap this function with an arrow

268
00:13:57,070 --> 00:14:00,610
function so but in a minimum proposal

269
00:14:00,610 --> 00:14:02,260
you need to wrap the arrow function with

270
00:14:02,260 --> 00:14:03,400
parentheses otherwise you'll have a

271
00:14:03,400 --> 00:14:09,610
syntax error and okay I just figure out

272
00:14:09,610 --> 00:14:12,700
that I don't know how to a simpler bento

273
00:14:12,700 --> 00:14:15,820
so I need to delegate this task to an

274
00:14:15,820 --> 00:14:19,480
iron I a sync third-party function how

275
00:14:19,480 --> 00:14:21,490
to treat this async function using

276
00:14:21,490 --> 00:14:25,180
pipeline operator so I could await this

277
00:14:25,180 --> 00:14:29,170
function but the problem is this line by

278
00:14:29,170 --> 00:14:31,360
line aphorism Vigo's because I don't

279
00:14:31,360 --> 00:14:34,060
know for example if my implementation of

280
00:14:34,060 --> 00:14:35,650
the add to bento is just a

281
00:14:35,650 --> 00:14:38,260
straightforward async implementation I

282
00:14:38,260 --> 00:14:40,660
want to have this function to be the

283
00:14:40,660 --> 00:14:43,660
sugar to this line six but if for some

284
00:14:43,660 --> 00:14:46,360
reason I have uncommon implementation

285
00:14:46,360 --> 00:14:48,010
which I return another function that I

286
00:14:48,010 --> 00:14:50,140
want to call with the the the rice to

287
00:14:50,140 --> 00:14:52,600
create an agree or to create the the

288
00:14:52,600 --> 00:14:56,140
bento I want to I want this line to be

289
00:14:56,140 --> 00:14:58,450
the alone among this function to be the

290
00:14:58,450 --> 00:15:00,570
sugar to the line 6 the

291
00:15:00,570 --> 00:15:03,210
problem is that the MIMO proposal there

292
00:15:03,210 --> 00:15:06,930
is no guarantee that I I can that our

293
00:15:06,930 --> 00:15:09,540
wait step could be the sugar to the one

294
00:15:09,540 --> 00:15:13,560
on an order yes as you can see the the

295
00:15:13,560 --> 00:15:15,360
minimal poser has two caveats that needs

296
00:15:15,360 --> 00:15:18,600
to be others in order to have in order

297
00:15:18,600 --> 00:15:20,010
to proceed in and the sitter nine

298
00:15:20,010 --> 00:15:24,480
proposal there are two comparing

299
00:15:24,480 --> 00:15:27,810
proposals to that try to address these

300
00:15:27,810 --> 00:15:30,900
two issues in different ways I will

301
00:15:30,900 --> 00:15:32,580
first explain the smart pipeline

302
00:15:32,580 --> 00:15:35,970
proposal so this mark pipeline proposal

303
00:15:35,970 --> 00:15:38,760
creates our token so this token is like

304
00:15:38,760 --> 00:15:40,740
the placeholder for the results of the

305
00:15:40,740 --> 00:15:43,830
previous step so whenever whenever we

306
00:15:43,830 --> 00:15:47,790
want to you have like a to a weight a

307
00:15:47,790 --> 00:15:50,640
function or you have to pass one extra

308
00:15:50,640 --> 00:15:53,970
premier like as as I showed you you can

309
00:15:53,970 --> 00:15:57,210
you can use the top style or whenever

310
00:15:57,210 --> 00:15:58,740
you have like this is straight for a

311
00:15:58,740 --> 00:16:03,050
call you just use the very bear style so

312
00:16:03,050 --> 00:16:05,930
just couple of rules for SmartPak nine

313
00:16:05,930 --> 00:16:09,090
when I will have parentheses are called

314
00:16:09,090 --> 00:16:13,140
by square brackets you need to use topic

315
00:16:13,140 --> 00:16:15,330
style otherwise issue do you can use

316
00:16:15,330 --> 00:16:18,330
various time which brings to a small

317
00:16:18,330 --> 00:16:20,310
corner case which is how to handle

318
00:16:20,310 --> 00:16:23,220
co-occurring so when you have current

319
00:16:23,220 --> 00:16:30,450
you have to use you have - I have more

320
00:16:30,450 --> 00:16:31,530
50 more minutes

321
00:16:31,530 --> 00:16:36,110
okay okay

322
00:16:36,110 --> 00:16:41,310
backtrack okay when you have curry since

323
00:16:41,310 --> 00:16:42,960
you have the the parentheses if you

324
00:16:42,960 --> 00:16:45,570
don't if though if you try to use the

325
00:16:45,570 --> 00:16:49,200
Barry style you have a syntax error so

326
00:16:49,200 --> 00:16:52,290
that's why you need to create a an extra

327
00:16:52,290 --> 00:16:56,820
call I can with the token okay this

328
00:16:56,820 --> 00:16:58,830
proposal has an extensive documentation

329
00:16:58,830 --> 00:17:01,160
for further enhancements after this

330
00:17:01,160 --> 00:17:03,060
[Music]

331
00:17:03,060 --> 00:17:06,400
baseline baseline proposal you should

332
00:17:06,400 --> 00:17:08,380
check that out that is there there are

333
00:17:08,380 --> 00:17:09,760
some links on the end of this

334
00:17:09,760 --> 00:17:13,420
presentation so as a counterpart we have

335
00:17:13,420 --> 00:17:16,510
the F sharp proposal which only tries to

336
00:17:16,510 --> 00:17:19,440
other is the ambiguity of a weight step

337
00:17:19,440 --> 00:17:22,900
of a weight by using an unweighted step

338
00:17:22,900 --> 00:17:27,250
so it seems to be simpler than than

339
00:17:27,250 --> 00:17:29,500
smart pipelines proposed but still we

340
00:17:29,500 --> 00:17:31,600
have to override the the arrow function

341
00:17:31,600 --> 00:17:34,290
with parentheses because the F sharp

342
00:17:34,290 --> 00:17:36,760
pipeline proposal doesn't try to address

343
00:17:36,760 --> 00:17:40,240
this one maybe because we still like

344
00:17:40,240 --> 00:17:44,400
maybe if we have the partial application

345
00:17:44,400 --> 00:17:46,450
lending JavaScript the partial

346
00:17:46,450 --> 00:17:48,280
application can replace this this line

347
00:17:48,280 --> 00:17:53,860
with of their error function so just to

348
00:17:53,860 --> 00:17:56,170
summarize the everything about pipeline

349
00:17:56,170 --> 00:17:58,810
operator so it's a nice addition for

350
00:17:58,810 --> 00:18:01,260
create a functional composition in a

351
00:18:01,260 --> 00:18:04,450
streamlined way the minimal purpose has

352
00:18:04,450 --> 00:18:08,230
two caveats the smart pipeline tries to

353
00:18:08,230 --> 00:18:10,300
solve this by ID and talkin and the F

354
00:18:10,300 --> 00:18:15,070
sharp adds just the weight step okay my

355
00:18:15,070 --> 00:18:17,650
point is I really really really like

356
00:18:17,650 --> 00:18:20,410
pipeline operator and I really want to

357
00:18:20,410 --> 00:18:22,900
have this shift as soon as possible so I

358
00:18:22,900 --> 00:18:26,350
would advocate for have the the I think

359
00:18:26,350 --> 00:18:28,330
that the F sharp proposed is just great

360
00:18:28,330 --> 00:18:31,300
like it's just writes off like a small

361
00:18:31,300 --> 00:18:33,850
problem and then we can we could put

362
00:18:33,850 --> 00:18:36,790
possible possibly having this ship to

363
00:18:36,790 --> 00:18:39,430
JavaScript and then afterwards the the

364
00:18:39,430 --> 00:18:41,190
committee could decide that whether

365
00:18:41,190 --> 00:18:46,600
introduce a token as one way of so these

366
00:18:46,600 --> 00:18:48,970
issues are these caveats as the the

367
00:18:48,970 --> 00:18:52,990
smart pipeline tries to to others or I

368
00:18:52,990 --> 00:18:56,400
don't know keep a series nevertheless

369
00:18:56,400 --> 00:18:59,200
bubble seven and adultery has shipped

370
00:18:59,200 --> 00:19:01,960
this my it smart pipeline proposal so I

371
00:19:01,960 --> 00:19:04,810
invite you to try that out not important

372
00:19:04,810 --> 00:19:06,820
so far like because this is this is not

373
00:19:06,820 --> 00:19:10,720
the syntax is not final but please and

374
00:19:10,720 --> 00:19:13,850
try that out okay

375
00:19:13,850 --> 00:19:16,220
before going to the last proposal of

376
00:19:16,220 --> 00:19:18,409
this presentation one to me I want to

377
00:19:18,409 --> 00:19:21,169
make sure some performance tips have you

378
00:19:21,169 --> 00:19:24,739
ever heard about any of these JavaScript

379
00:19:24,739 --> 00:19:28,190
performance tips do you ever wonder why

380
00:19:28,190 --> 00:19:29,869
this is important for the performance of

381
00:19:29,869 --> 00:19:33,580
your application to understand this in

382
00:19:33,580 --> 00:19:37,279
this practice and how they are important

383
00:19:37,279 --> 00:19:39,019
the next propose and how the next

384
00:19:39,019 --> 00:19:42,529
proposal tries to help to mitigate that

385
00:19:42,529 --> 00:19:45,409
we need to check first how the GS engine

386
00:19:45,409 --> 00:19:52,059
is generally generally works so so

387
00:19:52,059 --> 00:19:54,919
hopefully explain how the GS engines

388
00:19:54,919 --> 00:19:58,070
worked I will show this illustration

389
00:19:58,070 --> 00:20:02,210
that I borrowed from excellent article

390
00:20:02,210 --> 00:20:04,519
from address money about startup

391
00:20:04,519 --> 00:20:08,599
reference in JavaScript so whenever the

392
00:20:08,599 --> 00:20:11,590
browser finds a script tag they download

393
00:20:11,590 --> 00:20:16,070
the text content of it and then after it

394
00:20:16,070 --> 00:20:18,529
parses the JavaScript and then generally

395
00:20:18,529 --> 00:20:20,659
the result of this JavaScript is

396
00:20:20,659 --> 00:20:24,409
something called abstract syntax tree or

397
00:20:24,409 --> 00:20:27,139
ast which is a tree representation of

398
00:20:27,139 --> 00:20:28,249
your code

399
00:20:28,249 --> 00:20:31,700
so then afterwards the browser used is

400
00:20:31,700 --> 00:20:35,690
to generate the vertical to do the first

401
00:20:35,690 --> 00:20:38,149
virtual version of the other brainy

402
00:20:38,149 --> 00:20:40,460
JavaScript so this last parts more

403
00:20:40,460 --> 00:20:43,909
regarding the the runtime optimizations

404
00:20:43,909 --> 00:20:46,220
that happens in JavaScript when Dan and

405
00:20:46,220 --> 00:20:48,649
makes the JavaScript executes faster but

406
00:20:48,649 --> 00:20:50,450
this is not targeted for presentation

407
00:20:50,450 --> 00:20:54,669
just to summarize putting short

408
00:20:54,669 --> 00:20:56,899
JavaScript likes I could be described as

409
00:20:56,899 --> 00:20:59,809
generally as startup phase or loading

410
00:20:59,809 --> 00:21:01,970
phase that's the the dull old Parson

411
00:21:01,970 --> 00:21:05,149
compilation runtime phase which is the

412
00:21:05,149 --> 00:21:08,479
the proper execution of the optimization

413
00:21:08,479 --> 00:21:10,159
the optimization bailing out and the

414
00:21:10,159 --> 00:21:11,629
teardown phase which is the garbage

415
00:21:11,629 --> 00:21:16,820
collection but here I want to focus more

416
00:21:16,820 --> 00:21:20,869
on the parsing phase why think about the

417
00:21:20,869 --> 00:21:23,119
code and startup phase in JavaScript we

418
00:21:23,119 --> 00:21:25,849
can see that it's crucial crucial for

419
00:21:25,849 --> 00:21:27,500
the perceived profession or perform

420
00:21:27,500 --> 00:21:31,520
of an application so to make an

421
00:21:31,520 --> 00:21:33,800
application I start faster we end up

422
00:21:33,800 --> 00:21:35,540
doing those kinds of things that we just

423
00:21:35,540 --> 00:21:37,070
spoke in the beginning of this section

424
00:21:37,070 --> 00:21:40,310
but one thing doesn't change the parts

425
00:21:40,310 --> 00:21:44,180
in time parson parson in the initial

426
00:21:44,180 --> 00:21:45,860
compilation of JavaScript could take up

427
00:21:45,860 --> 00:21:49,100
to 30% of the the main tried time and 1

428
00:21:49,100 --> 00:21:52,520
megabyte of uncompressed JavaScript can

429
00:21:52,520 --> 00:21:54,590
easily take a whole second to be parsad

430
00:21:54,590 --> 00:21:58,450
in an average mobile phone normal depth

431
00:21:58,450 --> 00:22:01,850
the browser needs to parse the whole

432
00:22:01,850 --> 00:22:05,690
file before compiling and these are the

433
00:22:05,690 --> 00:22:07,340
motivation for the last propose of this

434
00:22:07,340 --> 00:22:15,110
talk binary is T so the parent in a

435
00:22:15,110 --> 00:22:18,440
binary SC proposal proposes a new over

436
00:22:18,440 --> 00:22:22,550
the wire format for JavaScript which is

437
00:22:22,550 --> 00:22:25,820
based on the binary representation of a

438
00:22:25,820 --> 00:22:30,020
simplified custom ast so this could

439
00:22:30,020 --> 00:22:32,330
potentially decrease the the start of

440
00:22:32,330 --> 00:22:35,240
large J application and the browser that

441
00:22:35,240 --> 00:22:37,310
doesn't support it just can load the

442
00:22:37,310 --> 00:22:41,570
Nommo javascript file so this is how

443
00:22:41,570 --> 00:22:45,140
this may work first we we need to write

444
00:22:45,140 --> 00:22:47,090
or or beautiful delightful piece of

445
00:22:47,090 --> 00:22:50,780
JavaScript so then you can compile it

446
00:22:50,780 --> 00:22:55,880
using your favorite favorite flavor of a

447
00:22:55,880 --> 00:23:00,320
bundle or transpire which provides such

448
00:23:00,320 --> 00:23:04,850
feature and then the processor will give

449
00:23:04,850 --> 00:23:07,940
not only the min J's file but a bean JS

450
00:23:07,940 --> 00:23:11,630
file and and this bin J's file it's a

451
00:23:11,630 --> 00:23:15,770
pre first ast representation of your

452
00:23:15,770 --> 00:23:19,580
javascript file so the browser that

453
00:23:19,580 --> 00:23:24,470
supports it can can have the the parsing

454
00:23:24,470 --> 00:23:27,860
phase the duskily decrease in time since

455
00:23:27,860 --> 00:23:29,780
the majority of this test is doing in a

456
00:23:29,780 --> 00:23:33,710
butte I'm right so the champions of this

457
00:23:33,710 --> 00:23:36,890
proposal create a PLC over spider I spot

458
00:23:36,890 --> 00:23:39,320
a marquee and user government buys on

459
00:23:39,320 --> 00:23:39,990
the it

460
00:23:39,990 --> 00:23:43,760
internal ast and try to compile some

461
00:23:43,760 --> 00:23:46,500
javascript in binary ST and measured

462
00:23:46,500 --> 00:23:50,160
their performance and using the the

463
00:23:50,160 --> 00:23:52,500
Facebook static newsfeed as a benchmark

464
00:23:52,500 --> 00:23:56,179
the POC had the following outcomes

465
00:23:56,179 --> 00:23:59,010
the result of this beauty of the POC was

466
00:23:59,010 --> 00:24:01,320
the following the the size of the binary

467
00:24:01,320 --> 00:24:03,660
st was slightly smaller than the

468
00:24:03,660 --> 00:24:08,090
javascript file and the parsing of

469
00:24:08,090 --> 00:24:10,920
creating the that job is clearly was

470
00:24:10,920 --> 00:24:14,250
between work between 500 800

471
00:24:14,250 --> 00:24:16,950
milliseconds but the time for create ast

472
00:24:16,950 --> 00:24:22,920
was twice as fast as before so this POC

473
00:24:22,920 --> 00:24:25,140
showed the show showed some evidence

474
00:24:25,140 --> 00:24:28,530
that cheap plain binary AST was a good

475
00:24:28,530 --> 00:24:32,090
performance wing that creates some a

476
00:24:32,090 --> 00:24:35,340
second level of X extra notations on the

477
00:24:35,340 --> 00:24:39,870
binary ST file could has enable some

478
00:24:39,870 --> 00:24:42,510
that that code elimination without

479
00:24:42,510 --> 00:24:45,570
relying in the butt and the bundle

480
00:24:45,570 --> 00:24:50,730
bundle plugins like tree shaking and it

481
00:24:50,730 --> 00:24:54,000
it can improve to the point that it this

482
00:24:54,000 --> 00:24:55,410
this annotation improved to the point

483
00:24:55,410 --> 00:24:58,080
that we can enable a streaming

484
00:24:58,080 --> 00:25:01,110
compilation if the performance of this

485
00:25:01,110 --> 00:25:05,610
hypothetical stream compilation has was

486
00:25:05,610 --> 00:25:08,730
closer to the current webassembly stream

487
00:25:08,730 --> 00:25:11,460
completion we can reach to the point

488
00:25:11,460 --> 00:25:15,059
that the compilation time for for the

489
00:25:15,059 --> 00:25:18,300
enhancement EST by name EST could be

490
00:25:18,300 --> 00:25:20,970
faster than a long time amazing right

491
00:25:20,970 --> 00:25:26,700
so to finalize these are links for

492
00:25:26,700 --> 00:25:32,640
further reading and these are my contact

493
00:25:32,640 --> 00:25:38,320
if want to get in touch and Mahalo

