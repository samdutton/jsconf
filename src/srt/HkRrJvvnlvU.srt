1
00:00:05,650 --> 00:00:12,160

all right hello jazz comp for ye before

2
00:00:12,160 --> 00:00:13,690
we get started I want to talk a little

3
00:00:13,690 --> 00:00:15,400
bit about how amazing this conference

4
00:00:15,400 --> 00:00:16,480
has been right I mean he was just

5
00:00:16,480 --> 00:00:19,930
talking about Hawaii but how about like

6
00:00:19,930 --> 00:00:23,560
the variety that we've seen on stage we

7
00:00:23,560 --> 00:00:28,900
have seen Moana we have seen natural

8
00:00:28,900 --> 00:00:33,670
hair we have seen Tamagotchis I mean

9
00:00:33,670 --> 00:00:35,559
let's give it up for the organizers a

10
00:00:35,559 --> 00:00:36,610
little bit for putting this thing

11
00:00:36,610 --> 00:00:43,870
together right so for those who are not

12
00:00:43,870 --> 00:00:45,430
from actually show of hands who knows

13
00:00:45,430 --> 00:00:49,300
what J s party is a few of you alright

14
00:00:49,300 --> 00:00:52,300
so J s party is a podcast but more than

15
00:00:52,300 --> 00:00:54,280
that it is a weekly celebration of

16
00:00:54,280 --> 00:00:56,410
JavaScript and the web we get together

17
00:00:56,410 --> 00:00:59,649
every week and talk about cutting edge

18
00:00:59,649 --> 00:01:01,510
content what's going on with JavaScript

19
00:01:01,510 --> 00:01:03,430
what's going on with related topics I've

20
00:01:03,430 --> 00:01:05,320
heard conferences described as the place

21
00:01:05,320 --> 00:01:06,940
you go to learn what you should be

22
00:01:06,940 --> 00:01:09,430
learning about well if you can't make it

23
00:01:09,430 --> 00:01:11,259
out to conferences every week you can

24
00:01:11,259 --> 00:01:12,759
get that anyway by listening to Jay s

25
00:01:12,759 --> 00:01:16,810
party we do come to conferences today

26
00:01:16,810 --> 00:01:18,250
we're here we're going to do a live

27
00:01:18,250 --> 00:01:20,530
episode this is you are live with us

28
00:01:20,530 --> 00:01:22,119
typically when we do an episode we

29
00:01:22,119 --> 00:01:24,190
broadcast it live as we do it there's a

30
00:01:24,190 --> 00:01:25,660
slack channel you can come and slack

31
00:01:25,660 --> 00:01:27,429
with us as we do it here we don't have

32
00:01:27,429 --> 00:01:29,050
the slack channel so I'm relying on you

33
00:01:29,050 --> 00:01:33,190
all to give us that live feel but we are

34
00:01:33,190 --> 00:01:34,899
going to be digging in with our some of

35
00:01:34,899 --> 00:01:36,550
our amazing speakers from yesterday and

36
00:01:36,550 --> 00:01:38,050
kind of going a little deeper and trying

37
00:01:38,050 --> 00:01:39,849
to make me make them uncomfortable and

38
00:01:39,849 --> 00:01:42,099
ask questions that they hadn't thought

39
00:01:42,099 --> 00:01:43,259
about

40
00:01:43,259 --> 00:01:46,060
so before we again I'm Kay ball I'm one

41
00:01:46,060 --> 00:01:48,399
of the hosts I'm a regular on Jays party

42
00:01:48,399 --> 00:01:50,979
if you want to find Jay s party go to

43
00:01:50,979 --> 00:01:54,130
any podcast app search for Jay s party

44
00:01:54,130 --> 00:01:56,380
you'll find it last night somebody was

45
00:01:56,380 --> 00:01:57,459
trying to do that on Spotify and it

46
00:01:57,459 --> 00:01:58,929
didn't work and so I was frantically

47
00:01:58,929 --> 00:02:00,580
slacking people what's going on it turns

48
00:02:00,580 --> 00:02:03,069
out the search term was not matched

49
00:02:03,069 --> 00:02:05,560
properly so we fixed that but search for

50
00:02:05,560 --> 00:02:07,420
Jays party wherever you do podcasts you

51
00:02:07,420 --> 00:02:10,690
will find us alright so I am joined

52
00:02:10,690 --> 00:02:15,760
today with four amazing speakers they

53
00:02:15,760 --> 00:02:17,200
spoke yesterday but I'm going to

54
00:02:17,200 --> 00:02:18,920
introduce them anyway

55
00:02:18,920 --> 00:02:24,080
Willian spoke about tc39 the future of

56
00:02:24,080 --> 00:02:27,230
JavaScript Shawn spoke about Babylon

57
00:02:27,230 --> 00:02:28,970
some amazing things you can do with that

58
00:02:28,970 --> 00:02:30,800
with the language I don't know if I even

59
00:02:30,800 --> 00:02:32,239
need to introduce you to you're so

60
00:02:32,239 --> 00:02:34,910
famous but we have Lin until who both

61
00:02:34,910 --> 00:02:36,590
spoke about webassembly

62
00:02:36,590 --> 00:02:38,780
and what we're gonna dig a little deeper

63
00:02:38,780 --> 00:02:42,140
on today is this idea of the future of

64
00:02:42,140 --> 00:02:44,780
JavaScript of web development where is

65
00:02:44,780 --> 00:02:47,959
this going you know how can we take all

66
00:02:47,959 --> 00:02:49,700
of these talks that happen independently

67
00:02:49,700 --> 00:02:51,620
and sort of try to weave a picture

68
00:02:51,620 --> 00:02:53,660
together of of where this is going in

69
00:02:53,660 --> 00:02:57,860
the future so we'll just start I had

70
00:02:57,860 --> 00:03:00,590
prepared a few questions if you all get

71
00:03:00,590 --> 00:03:02,959
a burning need to ask questions you can

72
00:03:02,959 --> 00:03:04,069
raise your hand and I'll probably call

73
00:03:04,069 --> 00:03:06,350
out to you but we've got plenty so don't

74
00:03:06,350 --> 00:03:08,840
stress so I want to start actually

75
00:03:08,840 --> 00:03:10,340
talking about the JavaScript language

76
00:03:10,340 --> 00:03:11,810
itself

77
00:03:11,810 --> 00:03:15,080
Willian introduced us to some of the

78
00:03:15,080 --> 00:03:16,790
proposals that are there for advancing

79
00:03:16,790 --> 00:03:20,000
the language and I noticed that there

80
00:03:20,000 --> 00:03:24,700
were a lot of operators involved in the

81
00:03:24,700 --> 00:03:26,959
pattern matching there was a new arrow

82
00:03:26,959 --> 00:03:28,549
operator it wasn't the fat arrow were

83
00:03:28,549 --> 00:03:29,870
used to with arrow functions it was the

84
00:03:29,870 --> 00:03:33,500
thin arrow with the piping there was a

85
00:03:33,500 --> 00:03:35,480
pipeline operator and I'm kind of

86
00:03:35,480 --> 00:03:36,410
wondering I'm gonna throw this to

87
00:03:36,410 --> 00:03:38,120
Willian first but any of the panelists

88
00:03:38,120 --> 00:03:39,799
you're welcome to answer are we gonna

89
00:03:39,799 --> 00:03:42,260
run out of syntax and operators like is

90
00:03:42,260 --> 00:03:43,640
there room for a tamagotchi operator

91
00:03:43,640 --> 00:03:46,400
where are we going I think this is a

92
00:03:46,400 --> 00:03:51,109
good question for to you right so I

93
00:03:51,109 --> 00:03:52,820
think there are sort of two different

94
00:03:52,820 --> 00:03:56,989
answers to this um one is we can and see

95
00:03:56,989 --> 00:03:59,900
if we invent an arbitrary amount of

96
00:03:59,900 --> 00:04:02,060
additional operators and make them work

97
00:04:02,060 --> 00:04:06,769
somehow just put two characters next to

98
00:04:06,769 --> 00:04:08,299
each other that currently would be

99
00:04:08,299 --> 00:04:12,650
invalid and say listen you operator and

100
00:04:12,650 --> 00:04:14,930
cynic was actually an example where we

101
00:04:14,930 --> 00:04:16,340
could have done that when we introduced

102
00:04:16,340 --> 00:04:20,539
the federal there the committee was

103
00:04:20,539 --> 00:04:22,220
pretty close to also in producing a

104
00:04:22,220 --> 00:04:24,350
scenario variant that didn't capture

105
00:04:24,350 --> 00:04:28,490
this the this value but otherwise what

106
00:04:28,490 --> 00:04:30,560
if we actually operate it exactly the

107
00:04:30,560 --> 00:04:32,420
same and the reason

108
00:04:32,420 --> 00:04:35,660
this is not done was mention complexity

109
00:04:35,660 --> 00:04:40,400
budget and that is really what a lot of

110
00:04:40,400 --> 00:04:41,480
this is about that

111
00:04:41,480 --> 00:04:45,650
an operator has to carry its weight it

112
00:04:45,650 --> 00:04:49,370
has to be specialized in a way that

113
00:04:49,370 --> 00:04:53,060
allows people to use it as a an

114
00:04:53,060 --> 00:04:55,880
efficient mental abstraction instead of

115
00:04:55,880 --> 00:04:58,790
just some weird characters on the page

116
00:04:58,790 --> 00:05:00,920
that make things unreadable and if we

117
00:05:00,920 --> 00:05:02,720
didn't keep that in mind then the

118
00:05:02,720 --> 00:05:04,700
language would be more and more just

119
00:05:04,700 --> 00:05:06,650
sort of this weird stuff on the page

120
00:05:06,650 --> 00:05:10,880
that nobody can clock and so yes we will

121
00:05:10,880 --> 00:05:13,400
over time it would use new upgrade earth

122
00:05:13,400 --> 00:05:15,410
but we have to be extremely careful

123
00:05:15,410 --> 00:05:18,950
about which ones and make sure that they

124
00:05:18,950 --> 00:05:22,550
are actually useful enough that leads

125
00:05:22,550 --> 00:05:24,830
into kind of a question about the

126
00:05:24,830 --> 00:05:27,710
process of deciding what goes into this

127
00:05:27,710 --> 00:05:30,290
language you know we talked about tc39

128
00:05:30,290 --> 00:05:34,010
and the stage one that was going on

129
00:05:34,010 --> 00:05:35,690
there but maybe can one of the panelists

130
00:05:35,690 --> 00:05:37,310
spell out the stages that things go

131
00:05:37,310 --> 00:05:39,320
through as they advance in the

132
00:05:39,320 --> 00:05:42,680
JavaScript language okay I can try that

133
00:05:42,680 --> 00:05:46,490
one okay we have like a five stage and

134
00:05:46,490 --> 00:05:49,520
d'Oro like that is the stromwell

135
00:05:49,520 --> 00:05:51,590
it's like you have a conversation bar

136
00:05:51,590 --> 00:05:53,590
and we are kind of drunk and say yeah

137
00:05:53,590 --> 00:05:56,060
where if with those days in JavaScript

138
00:05:56,060 --> 00:05:58,910
let's try like and and you try to

139
00:05:58,910 --> 00:06:00,440
present this token to the committee and

140
00:06:00,440 --> 00:06:03,650
then if they and if you find a champion

141
00:06:03,650 --> 00:06:07,040
and and this proposal its I tried to

142
00:06:07,040 --> 00:06:09,110
solve a problem like yeah you should

143
00:06:09,110 --> 00:06:11,750
shake the the the the the the problem

144
00:06:11,750 --> 00:06:15,470
first and then if I have a simple four

145
00:06:15,470 --> 00:06:18,740
champion in this and you you and the

146
00:06:18,740 --> 00:06:20,360
committee decides that this is like

147
00:06:20,360 --> 00:06:23,180
something that worth more investigation

148
00:06:23,180 --> 00:06:26,990
so they goes to the stage one so then

149
00:06:26,990 --> 00:06:30,650
they try to do a little bit more

150
00:06:30,650 --> 00:06:33,620
research on that and shaped like if it's

151
00:06:33,620 --> 00:06:36,650
a syntax like shape the syntax or in the

152
00:06:36,650 --> 00:06:39,320
semantics of the this proposal and then

153
00:06:39,320 --> 00:06:42,890
goes to the draft which is the stage two

154
00:06:42,890 --> 00:06:45,720
so then they start to

155
00:06:45,720 --> 00:06:49,760
right the draft of the of this

156
00:06:49,760 --> 00:06:53,820
specification and then sometimes they

157
00:06:53,820 --> 00:06:56,610
have some implementation bubble and and

158
00:06:56,610 --> 00:07:00,540
and sent to the to the developers to try

159
00:07:00,540 --> 00:07:04,680
that out and then after after they find

160
00:07:04,680 --> 00:07:07,200
some consensus on and syntax I'm in send

161
00:07:07,200 --> 00:07:09,440
mailings of the the proposal that goes

162
00:07:09,440 --> 00:07:13,050
that this proposal goes to the go stage

163
00:07:13,050 --> 00:07:16,440
3 which is the time that they wait for

164
00:07:16,440 --> 00:07:19,860
some permutation the browsers and and I

165
00:07:19,860 --> 00:07:21,480
think like then you see this

166
00:07:21,480 --> 00:07:26,120
implementation coming to the nightly

167
00:07:26,120 --> 00:07:30,150
version of Firefox or Chrome Canary and

168
00:07:30,150 --> 00:07:33,750
so on and then after everything's done

169
00:07:33,750 --> 00:07:38,450
and the final consensus will seem to

170
00:07:38,450 --> 00:07:41,730
stage 4 which is the last stage and then

171
00:07:41,730 --> 00:07:43,590
they have a cohort I think in March

172
00:07:43,590 --> 00:07:46,800
right and and then this goes to the next

173
00:07:46,800 --> 00:07:51,150
spec which is in July then you talked

174
00:07:51,150 --> 00:07:53,820
about similar feature advancement

175
00:07:53,820 --> 00:07:56,130
happening in the web assembly is the

176
00:07:56,130 --> 00:07:57,720
process they're similar or how does the

177
00:07:57,720 --> 00:07:59,460
web assembly working group deal with

178
00:07:59,460 --> 00:08:01,890
this there are a lot of similarities and

179
00:08:01,890 --> 00:08:05,190
a couple of differences so for a web

180
00:08:05,190 --> 00:08:07,970
assembly you do have also four stages

181
00:08:07,970 --> 00:08:11,790
that look pretty similar there is a

182
00:08:11,790 --> 00:08:14,430
difference in advancing between the

183
00:08:14,430 --> 00:08:19,590
stages which is that with tc39 you need

184
00:08:19,590 --> 00:08:21,600
really full consensus that happens at a

185
00:08:21,600 --> 00:08:24,450
meeting individuals from different

186
00:08:24,450 --> 00:08:28,050
companies can object whereas with

187
00:08:28,050 --> 00:08:31,950
webassembly it's more the different

188
00:08:31,950 --> 00:08:34,779
implementers

189
00:08:34,789 --> 00:08:37,560
really it's what they do is technically

190
00:08:37,560 --> 00:08:39,240
they take a vote and people can say I

191
00:08:39,240 --> 00:08:42,120
strongly disagree I disagree I'm neutral

192
00:08:42,120 --> 00:08:43,110
I agree

193
00:08:43,110 --> 00:08:47,460
strong agree and practice really as long

194
00:08:47,460 --> 00:08:51,570
as the engines as a whole all agree

195
00:08:51,570 --> 00:08:54,630
things will advance so there are some

196
00:08:54,630 --> 00:08:56,970
some technical differences but it really

197
00:08:56,970 --> 00:08:59,410
is fairly similar

198
00:08:59,410 --> 00:09:03,290
nice digging into one of those proposals

199
00:09:03,290 --> 00:09:05,540
that Willian talked about there's this

200
00:09:05,540 --> 00:09:09,770
concept of binary a STS and essentially

201
00:09:09,770 --> 00:09:14,860
having a much easier to parse version of

202
00:09:14,860 --> 00:09:17,360
JavaScript what's that going to do to

203
00:09:17,360 --> 00:09:19,520
the demand for web assembly we're one of

204
00:09:19,520 --> 00:09:22,430
at least the initial value propositions

205
00:09:22,430 --> 00:09:24,230
was hey this stuff can be compiled so

206
00:09:24,230 --> 00:09:25,520
fast that we don't need to worry about

207
00:09:25,520 --> 00:09:28,880
that initial startup phase so um I'd say

208
00:09:28,880 --> 00:09:31,610
that it's actually pretty useful to look

209
00:09:31,610 --> 00:09:33,890
at the different kinds of use cases that

210
00:09:33,890 --> 00:09:36,380
these two that inspired work on these

211
00:09:36,380 --> 00:09:40,280
two so for web assembly a lot of the use

212
00:09:40,280 --> 00:09:42,500
cases were around desktop applications

213
00:09:42,500 --> 00:09:43,940
and games at least the first inspired it

214
00:09:43,940 --> 00:09:45,230
we're seeing a lot of other use cases

215
00:09:45,230 --> 00:09:48,560
now but and what needed to happen there

216
00:09:48,560 --> 00:09:51,020
was actually a start up time is

217
00:09:51,020 --> 00:09:52,880
important but that wasn't the critical

218
00:09:52,880 --> 00:09:55,040
thing there it was execution how fast

219
00:09:55,040 --> 00:09:58,100
the code is running rather than how fast

220
00:09:58,100 --> 00:10:05,420
it starts up and for so it was really at

221
00:10:05,420 --> 00:10:09,440
the time about bringing new things to

222
00:10:09,440 --> 00:10:11,150
the web that weren't already on the web

223
00:10:11,150 --> 00:10:12,890
now we're seeing that you can actually

224
00:10:12,890 --> 00:10:14,660
speed up things that are on the web like

225
00:10:14,660 --> 00:10:17,030
the parser that I mentioned that is used

226
00:10:17,030 --> 00:10:20,180
in web packet and our dev tools or the

227
00:10:20,180 --> 00:10:21,980
Gutenberg part which is 86 times faster

228
00:10:21,980 --> 00:10:24,860
but that's really a different use case

229
00:10:24,860 --> 00:10:27,380
than taking something like Facebook or

230
00:10:27,380 --> 00:10:28,970
Gmail and trying to make it start up

231
00:10:28,970 --> 00:10:34,220
faster binary AST is really specifically

232
00:10:34,220 --> 00:10:37,480
targeted at the problem of startup cost

233
00:10:37,480 --> 00:10:44,270
and so with binary AST we take this

234
00:10:44,270 --> 00:10:46,460
process that's really complicated and

235
00:10:46,460 --> 00:10:49,250
manual today where you have to do all of

236
00:10:49,250 --> 00:10:50,780
these things to improve your startup

237
00:10:50,780 --> 00:10:53,260
times like code splitting and we

238
00:10:53,260 --> 00:10:57,020
automate a lot of that to make it so

239
00:10:57,020 --> 00:11:01,340
that um you don't have to think so much

240
00:11:01,340 --> 00:11:04,670
about how to design your system to

241
00:11:04,670 --> 00:11:06,590
optimize for start-up cost you can just

242
00:11:06,590 --> 00:11:09,530
automate this process of getting a quick

243
00:11:09,530 --> 00:11:10,370
startup

244
00:11:10,370 --> 00:11:12,860
you know just to put a bit more on top

245
00:11:12,860 --> 00:11:15,260
of that like they are trying to it's

246
00:11:15,260 --> 00:11:20,480
different problems like for like binary

247
00:11:20,480 --> 00:11:23,180
it is something that targets the code

248
00:11:23,180 --> 00:11:25,730
start of a JavaScript application so it

249
00:11:25,730 --> 00:11:28,820
tries to make the compiler face it start

250
00:11:28,820 --> 00:11:32,150
faster and and and where the same is

251
00:11:32,150 --> 00:11:35,089
more about like runtime so how fast your

252
00:11:35,089 --> 00:11:38,390
how performing your code could be so

253
00:11:38,390 --> 00:11:42,529
it's and pre its different kind of

254
00:11:42,529 --> 00:11:44,779
things and they are I think as far as I

255
00:11:44,779 --> 00:11:46,760
know like the community is not even sure

256
00:11:46,760 --> 00:11:49,310
that if binary ST is something that

257
00:11:49,310 --> 00:11:52,790
needs to proceed because for example v8

258
00:11:52,790 --> 00:11:55,420
has a different way to parse the the

259
00:11:55,420 --> 00:11:57,410
JavaScript like they have like extend

260
00:11:57,410 --> 00:11:59,750
their parts JavaScript in a streamlined

261
00:11:59,750 --> 00:12:04,610
way so and and the POC that did so far

262
00:12:04,610 --> 00:12:08,300
is it was only in spider monkey so they

263
00:12:08,300 --> 00:12:10,910
they need to try to assess this if this

264
00:12:10,910 --> 00:12:13,250
solution is even true it's a performance

265
00:12:13,250 --> 00:12:14,990
win for the other browser vendors as

266
00:12:14,990 --> 00:12:24,640
well we are in Firefox we're working on

267
00:12:24,640 --> 00:12:27,710
moving this out and I think it is right

268
00:12:27,710 --> 00:12:31,100
for other vendors to say well show us

269
00:12:31,100 --> 00:12:34,490
the numbers before we go and duplicate

270
00:12:34,490 --> 00:12:37,339
the effort here and the good thing is

271
00:12:37,339 --> 00:12:40,250
frankly is T it's a format where this or

272
00:12:40,250 --> 00:12:41,990
is is a proposal where this is possible

273
00:12:41,990 --> 00:12:43,520
if we were shipping a language feature

274
00:12:43,520 --> 00:12:45,770
and then at some point said I know we

275
00:12:45,770 --> 00:12:47,690
changed our mind and stopped shipping it

276
00:12:47,690 --> 00:12:49,760
we would wake code that depends on it

277
00:12:49,760 --> 00:12:52,160
that's not the case with binary ST it's

278
00:12:52,160 --> 00:12:55,940
really much like a minification step

279
00:12:55,940 --> 00:12:58,670
where nobody would only ship by anyway

280
00:12:58,670 --> 00:13:00,589
as G at least for the foreseeable future

281
00:13:00,589 --> 00:13:03,260
so if we at some point stopped sending

282
00:13:03,260 --> 00:13:05,480
the header saying we understand binary

283
00:13:05,480 --> 00:13:09,740
AST then we'll just instead get aj s

284
00:13:09,740 --> 00:13:13,279
file and nothing quakes so that's good

285
00:13:13,279 --> 00:13:16,459
I don't want to say something more about

286
00:13:16,459 --> 00:13:19,190
the motivation here I think it's really

287
00:13:19,190 --> 00:13:20,870
important to look at this holistically

288
00:13:20,870 --> 00:13:23,960
we want the web to be

289
00:13:23,960 --> 00:13:26,899
platform where you can ship or do you

290
00:13:26,899 --> 00:13:29,690
deploy applications of all sizes to and

291
00:13:29,690 --> 00:13:33,920
to make that work we need to pull all

292
00:13:33,920 --> 00:13:35,779
the levers that we have access to we

293
00:13:35,779 --> 00:13:37,880
can't just say well this seems kind of

294
00:13:37,880 --> 00:13:40,910
good enough so let's let's not continue

295
00:13:40,910 --> 00:13:43,480
working in this direction we need to do

296
00:13:43,480 --> 00:13:46,070
what we can for start-up performance in

297
00:13:46,070 --> 00:13:47,600
all kinds of ways we need to optimize

298
00:13:47,600 --> 00:13:49,520
one-time performance using the right

299
00:13:49,520 --> 00:13:52,370
language for the job for individual

300
00:13:52,370 --> 00:13:54,529
modules and going forward we'll

301
00:13:54,529 --> 00:13:56,510
eventually also want to look at similar

302
00:13:56,510 --> 00:13:58,010
things for the other parts of the

303
00:13:58,010 --> 00:14:02,120
platform like HTML and CSS and stopping

304
00:14:02,120 --> 00:14:04,940
at some point because we feel like this

305
00:14:04,940 --> 00:14:06,380
is fast enough for what people are doing

306
00:14:06,380 --> 00:14:13,700
now is selling the platform short so in

307
00:14:13,700 --> 00:14:19,190
Shaun's talk we in Shaun's talk you

308
00:14:19,190 --> 00:14:20,899
talked a lot about compile time

309
00:14:20,899 --> 00:14:23,540
optimizations and I think this is

310
00:14:23,540 --> 00:14:25,730
something that clearly lends itself well

311
00:14:25,730 --> 00:14:27,410
in the web assembly world what you were

312
00:14:27,410 --> 00:14:29,540
talking about with treating binary

313
00:14:29,540 --> 00:14:31,550
estie's is essentially a minification or

314
00:14:31,550 --> 00:14:35,839
compile step where do you all feel we

315
00:14:35,839 --> 00:14:41,300
are in the sort of build systems around

316
00:14:41,300 --> 00:14:43,070
web development you know it feels like

317
00:14:43,070 --> 00:14:44,660
we've come a long way in the last few

318
00:14:44,660 --> 00:14:46,540
years but does that mean that we're at

319
00:14:46,540 --> 00:14:49,160
about as good as it's going to get or we

320
00:14:49,160 --> 00:14:51,740
are at step one of 10 or you know how

321
00:14:51,740 --> 00:14:55,610
far is this stuff going to go it's a

322
00:14:55,610 --> 00:14:59,029
very broad question I am far from an

323
00:14:59,029 --> 00:15:02,240
authority on this but I think I think we

324
00:15:02,240 --> 00:15:03,950
were definitely at the beginning of

325
00:15:03,950 --> 00:15:07,370
build system innovation in fact like you

326
00:15:07,370 --> 00:15:09,370
know a lot of these pieces were were

327
00:15:09,370 --> 00:15:12,200
cobbled together and invented separately

328
00:15:12,200 --> 00:15:13,610
and that's why people complain that

329
00:15:13,610 --> 00:15:16,160
there's no integrated end-to-end thing

330
00:15:16,160 --> 00:15:18,890
from from you know NPM installed to web

331
00:15:18,890 --> 00:15:21,950
packed Babel and and and in having

332
00:15:21,950 --> 00:15:23,420
conflicts between like all this all

333
00:15:23,420 --> 00:15:25,970
these different parts of the system make

334
00:15:25,970 --> 00:15:28,370
on boarding to web home and difficult I

335
00:15:28,370 --> 00:15:30,620
think there is some reason there is some

336
00:15:30,620 --> 00:15:34,600
struggle against like mning such a

337
00:15:34,600 --> 00:15:37,670
complicated build system is a

338
00:15:37,670 --> 00:15:39,500
it's the original spirit of the web you

339
00:15:39,500 --> 00:15:41,180
know like you used to be able to just

340
00:15:41,180 --> 00:15:43,820
drop some JSON to HTML and that's true

341
00:15:43,820 --> 00:15:46,190
but the same time the way we use the web

342
00:15:46,190 --> 00:15:48,590
has also changed a lot and so our tools

343
00:15:48,590 --> 00:15:52,760
should evolved accordingly and there

344
00:15:52,760 --> 00:15:53,750
should be there should be more

345
00:15:53,750 --> 00:15:59,360
innovation on this yeah I mean and like

346
00:15:59,360 --> 00:16:02,750
as much as you know I talk about Trent

347
00:16:02,750 --> 00:16:05,810
compiling to JavaScript but I think that

348
00:16:05,810 --> 00:16:08,630
obviously there's a huge case for

349
00:16:08,630 --> 00:16:10,930
compiling to web assembly

350
00:16:10,930 --> 00:16:13,880
well I think that as you point out the

351
00:16:13,880 --> 00:16:15,980
the use cases that we're doing web

352
00:16:15,980 --> 00:16:18,380
development for have changed and I think

353
00:16:18,380 --> 00:16:20,750
in your talk yesterday on web assembly

354
00:16:20,750 --> 00:16:22,460
you talked about taking this concept of

355
00:16:22,460 --> 00:16:25,310
the web platform and expanding it beyond

356
00:16:25,310 --> 00:16:27,650
what we traditionally think of as the

357
00:16:27,650 --> 00:16:30,470
web how far do you think that goes is

358
00:16:30,470 --> 00:16:32,270
eventually every type of development

359
00:16:32,270 --> 00:16:34,250
using the web development model and

360
00:16:34,250 --> 00:16:40,130
platform so in in the talk yesterday I

361
00:16:40,130 --> 00:16:44,710
made this sort of offhand joke about

362
00:16:44,710 --> 00:16:47,780
stealing your Bitcoin wallet which of

363
00:16:47,780 --> 00:16:53,080
course is based on real world events and

364
00:16:53,080 --> 00:16:59,630
it's no joke it's it's something that

365
00:16:59,630 --> 00:17:03,920
has actually happened applications an

366
00:17:03,920 --> 00:17:08,270
application that you trust where you

367
00:17:08,270 --> 00:17:10,790
rightfully trust the author of that

368
00:17:10,790 --> 00:17:13,550
application still going behind your back

369
00:17:13,550 --> 00:17:16,610
and stealing your money literally well

370
00:17:16,610 --> 00:17:17,330
almost

371
00:17:17,330 --> 00:17:24,830
blockchain and this problem won't go

372
00:17:24,830 --> 00:17:27,620
away without us doing anything about it

373
00:17:27,620 --> 00:17:31,220
and the way I see it we can do something

374
00:17:31,220 --> 00:17:33,820
about it in two different ways either by

375
00:17:33,820 --> 00:17:37,280
locking everything down through

376
00:17:37,280 --> 00:17:40,390
Authority going through app stores and

377
00:17:40,390 --> 00:17:45,560
letting the apples of this world dictate

378
00:17:45,560 --> 00:17:48,020
what you can and cannot consume in terms

379
00:17:48,020 --> 00:17:50,160
of applications in media

380
00:17:50,160 --> 00:17:57,600
or by going away from something that is

381
00:17:57,600 --> 00:18:00,930
otherwise incredibly helpful and

382
00:18:00,930 --> 00:18:02,299
[Music]

383
00:18:02,299 --> 00:18:06,179
increases the stability and product of

384
00:18:06,179 --> 00:18:08,100
our applications and the productivity of

385
00:18:08,100 --> 00:18:09,809
developers and there is code we use

386
00:18:09,809 --> 00:18:12,750
screw platforms like NPM or for West we

387
00:18:12,750 --> 00:18:17,179
have kway teow which is very similar and

388
00:18:17,179 --> 00:18:20,490
it's not scalable to try to weave you

389
00:18:20,490 --> 00:18:24,570
the entire code therefore the hundreds

390
00:18:24,570 --> 00:18:26,840
of thousands of packages published there

391
00:18:26,840 --> 00:18:29,580
all the time and we see that it's not

392
00:18:29,580 --> 00:18:31,799
scalable because nobody is doing and

393
00:18:31,799 --> 00:18:35,940
nobody could possibly do it and so we

394
00:18:35,940 --> 00:18:38,820
can give up on this code we use or we

395
00:18:38,820 --> 00:18:41,370
can say well let's work on things such

396
00:18:41,370 --> 00:18:43,500
that you don't have to trust all of this

397
00:18:43,500 --> 00:18:45,780
code and to do that we need wrapper

398
00:18:45,780 --> 00:18:48,990
sandboxing we need to be able to say I I

399
00:18:48,990 --> 00:18:52,080
don't as long as the application can

400
00:18:52,080 --> 00:18:54,059
only run in this directory you say I

401
00:18:54,059 --> 00:18:55,950
don't usually care about whether it

402
00:18:55,950 --> 00:18:58,049
tries to steal my Bitcoin wallet because

403
00:18:58,049 --> 00:18:58,770
it can't

404
00:18:58,770 --> 00:19:00,960
I need don't need to trusted him in this

405
00:19:00,960 --> 00:19:04,080
regard and for that we need to bring a

406
00:19:04,080 --> 00:19:05,850
sandboxing model that is essentially

407
00:19:05,850 --> 00:19:09,020
similar to what the web provides to

408
00:19:09,020 --> 00:19:11,789
development outside the web in a way

409
00:19:11,789 --> 00:19:14,940
that still allows these applications to

410
00:19:14,940 --> 00:19:16,950
provide the value you want from them and

411
00:19:16,950 --> 00:19:21,570
we are working on that when I was

412
00:19:21,570 --> 00:19:24,179
tweeting about your talk I had a someone

413
00:19:24,179 --> 00:19:25,919
who does native development respond and

414
00:19:25,919 --> 00:19:28,950
say hey do I really want my applications

415
00:19:28,950 --> 00:19:30,299
running in a browser isn't that going to

416
00:19:30,299 --> 00:19:31,890
be a little heavy wait isn't that going

417
00:19:31,890 --> 00:19:33,510
to slow everything down and will that

418
00:19:33,510 --> 00:19:36,630
give me the access that I need how do we

419
00:19:36,630 --> 00:19:39,870
address those concerns from folks who

420
00:19:39,870 --> 00:19:41,700
are used to being able to essentially

421
00:19:41,700 --> 00:19:44,309
access everything and run at a

422
00:19:44,309 --> 00:19:47,760
bare-metal level so that I'm glad you

423
00:19:47,760 --> 00:19:49,830
mentioned the access everything he

424
00:19:49,830 --> 00:19:52,340
mentioned me in that tweet as well and

425
00:19:52,340 --> 00:19:55,830
this idea of a developer accessing

426
00:19:55,830 --> 00:19:58,020
anything on your system that is great

427
00:19:58,020 --> 00:20:00,059
for the developer is really not great

428
00:20:00,059 --> 00:20:02,940
for the user as till was just talking

429
00:20:02,940 --> 00:20:04,139
about

430
00:20:04,139 --> 00:20:09,029
it opens up it opens you up to so many

431
00:20:09,029 --> 00:20:11,419
different security vulnerabilities so

432
00:20:11,419 --> 00:20:15,090
it's not just the web that has locked

433
00:20:15,090 --> 00:20:16,649
down on these things you're actually

434
00:20:16,649 --> 00:20:18,419
seeing the operating system start to

435
00:20:18,419 --> 00:20:20,279
lock down in these things as well

436
00:20:20,279 --> 00:20:22,649
Apple is actually starting to lock down

437
00:20:22,649 --> 00:20:24,749
on what their application developers can

438
00:20:24,749 --> 00:20:31,229
do and I think that as developers see

439
00:20:31,229 --> 00:20:34,739
better systems for providing this kind

440
00:20:34,739 --> 00:20:38,249
of ability capabilities but with a

441
00:20:38,249 --> 00:20:41,489
security around them they'll start to

442
00:20:41,489 --> 00:20:43,739
accept it too because it protects them

443
00:20:43,739 --> 00:20:45,359
if they're reusing code from other

444
00:20:45,359 --> 00:20:48,029
people it protects their applications

445
00:20:48,029 --> 00:20:50,220
from the kinds of exploits that they

446
00:20:50,220 --> 00:20:52,859
could potentially be vulnerable to which

447
00:20:52,859 --> 00:20:56,039
I think most aboveboard developers are

448
00:20:56,039 --> 00:20:58,919
in favor of not putting their user

449
00:20:58,919 --> 00:21:03,960
systems at risk there's also actually a

450
00:21:03,960 --> 00:21:07,739
kind of funny part to this when I looked

451
00:21:07,739 --> 00:21:11,039
at this Twitter conversation yesterday I

452
00:21:11,039 --> 00:21:12,690
then looked at the timeline of this

453
00:21:12,690 --> 00:21:14,820
person who had posed these questions and

454
00:21:14,820 --> 00:21:20,450
just a few days ago they had compared

455
00:21:20,450 --> 00:21:24,749
iTunes and epimutations about how badly

456
00:21:24,749 --> 00:21:26,729
it works and had compared it to Spotify

457
00:21:26,729 --> 00:21:28,859
and said this is how an application

458
00:21:28,859 --> 00:21:31,529
should be done it went smoothly and it's

459
00:21:31,529 --> 00:21:34,229
really well done and at the same time

460
00:21:34,229 --> 00:21:36,809
they complained about how all these web

461
00:21:36,809 --> 00:21:40,139
apps need an entire browser quantum well

462
00:21:40,139 --> 00:21:41,999
Spotify turns out to be an electron app

463
00:21:41,999 --> 00:21:44,940
that brings its own browser wizard so

464
00:21:44,940 --> 00:21:46,950
turns out the web platform actually is

465
00:21:46,950 --> 00:21:52,719
maybe further ahead and they realize

466
00:21:52,729 --> 00:21:54,989
awesome so coming back a little bit to

467
00:21:54,989 --> 00:21:57,239
the languages that we're using to build

468
00:21:57,239 --> 00:22:00,330
this out you know Lynn you highlighted

469
00:22:00,330 --> 00:22:02,789
the need for easy and fast data exchange

470
00:22:02,789 --> 00:22:06,470
and we saw yesterday some discussion of

471
00:22:06,470 --> 00:22:08,759
typescript and I know there's a lot of

472
00:22:08,759 --> 00:22:10,649
type discussion the JavaScript community

473
00:22:10,649 --> 00:22:12,869
right now we also one of the things that

474
00:22:12,869 --> 00:22:14,759
web assembly gives us is you know the

475
00:22:14,759 --> 00:22:16,349
ability to use languages like rust and

476
00:22:16,349 --> 00:22:17,410
other things that have these

477
00:22:17,410 --> 00:22:20,320
guarantees when we're talking back and

478
00:22:20,320 --> 00:22:21,550
forth between these different

479
00:22:21,550 --> 00:22:23,610
environments is there a mechanism within

480
00:22:23,610 --> 00:22:24,940
webassembly

481
00:22:24,940 --> 00:22:30,800
for translating those type guarantees

482
00:22:30,810 --> 00:22:34,450
kept only that is up to tooling and the

483
00:22:34,450 --> 00:22:36,520
rest - webisode mutual chain that we are

484
00:22:36,520 --> 00:22:39,030
working on actually could uses

485
00:22:39,030 --> 00:22:41,740
typescript definition files for the web

486
00:22:41,740 --> 00:22:44,800
assembly modules so that you can work

487
00:22:44,800 --> 00:22:46,450
with them in a sporran a type way and

488
00:22:46,450 --> 00:22:48,550
you have to you have to pass in the

489
00:22:48,550 --> 00:22:51,550
pride types and you have something to

490
00:22:51,550 --> 00:22:53,020
have some kind of layer that converts

491
00:22:53,020 --> 00:22:56,440
what the web assembly module could uses

492
00:22:56,440 --> 00:22:57,970
into something that you as a JavaScript

493
00:22:57,970 --> 00:23:01,150
developer can consume and currently all

494
00:23:01,150 --> 00:23:04,570
you have to interact with the episode

495
00:23:04,570 --> 00:23:06,910
new module are numbers instant float so

496
00:23:06,910 --> 00:23:09,630
all that that one we can understand

497
00:23:09,630 --> 00:23:12,820
going forward that'll change Lynn talked

498
00:23:12,820 --> 00:23:17,140
about the garbage collection proposal

499
00:23:17,140 --> 00:23:21,580
for web assembly and I'm actually the

500
00:23:21,580 --> 00:23:25,660
tc39 champion for the accompanying typed

501
00:23:25,660 --> 00:23:27,880
objects proposal where we will have

502
00:23:27,880 --> 00:23:31,240
strongly typed JavaScript objects where

503
00:23:31,240 --> 00:23:32,680
you don't only have the type of the

504
00:23:32,680 --> 00:23:34,930
object itself but all the fields on that

505
00:23:34,930 --> 00:23:38,380
object are strongly typed and in a fixed

506
00:23:38,380 --> 00:23:40,930
location in memory so that they can be

507
00:23:40,930 --> 00:23:42,670
efficiently accessed both in web

508
00:23:42,670 --> 00:23:45,790
assembly and in JavaScript but you will

509
00:23:45,790 --> 00:23:48,220
still want to have typescript definition

510
00:23:48,220 --> 00:23:50,590
files to see what that structure is and

511
00:23:50,590 --> 00:23:52,780
to have you editor give you hints about

512
00:23:52,780 --> 00:23:55,150
how to interact with that object so that

513
00:23:55,150 --> 00:23:56,680
won't go away and actually think

514
00:23:56,680 --> 00:23:59,290
typescript definition files are the

515
00:23:59,290 --> 00:24:04,450
right way to quote - that there's some

516
00:24:04,450 --> 00:24:07,270
so I'm not too clear about this but

517
00:24:07,270 --> 00:24:09,340
there's some discussion about the the

518
00:24:09,340 --> 00:24:11,470
soundness of like the soundness of a

519
00:24:11,470 --> 00:24:15,450
type system and I'm told that typescript

520
00:24:15,450 --> 00:24:18,070
isn't well it's not something by default

521
00:24:18,070 --> 00:24:21,400
and that could be a hurdle I don't fully

522
00:24:21,400 --> 00:24:24,310
like is that something that you all

523
00:24:24,310 --> 00:24:29,609
consider in terms of your discussions

524
00:24:29,619 --> 00:24:32,809
so the parts of the type system that we

525
00:24:32,809 --> 00:24:36,739
need for this are about the most really

526
00:24:36,739 --> 00:24:40,249
oh yes they fake ones and that part is

527
00:24:40,249 --> 00:24:44,450
sound there's a subset yes it's

528
00:24:44,450 --> 00:24:48,499
absolutely small Chinese anything there

529
00:24:48,499 --> 00:24:49,549
is something interesting for the

530
00:24:49,549 --> 00:24:50,960
typescript team to consider going

531
00:24:50,960 --> 00:24:53,149
forward once we add garbage collection

532
00:24:53,149 --> 00:24:55,399
support to webassembly they could

533
00:24:55,399 --> 00:24:59,090
actually go and compile parts of your

534
00:24:59,090 --> 00:25:01,309
typescript to webassembly to make it run

535
00:25:01,309 --> 00:25:04,730
fast but because the types of type

536
00:25:04,730 --> 00:25:06,619
system is unsound and because even

537
00:25:06,619 --> 00:25:07,940
without that it doesn't make sense to

538
00:25:07,940 --> 00:25:10,369
compile all code to Java to to whoever's

539
00:25:10,369 --> 00:25:12,080
in me instead of JavaScript they could

540
00:25:12,080 --> 00:25:14,989
do it on a per function level and if all

541
00:25:14,989 --> 00:25:17,450
engines have these fast calls said

542
00:25:17,450 --> 00:25:18,799
Linden talked about yesterday and

543
00:25:18,799 --> 00:25:20,239
actually published a blog post about a

544
00:25:20,239 --> 00:25:22,909
few months ago then itself doesn't

545
00:25:22,909 --> 00:25:25,999
matter which part of the system a

546
00:25:25,999 --> 00:25:27,470
function is implemented in and the

547
00:25:27,470 --> 00:25:29,749
JavaScript compiler could really that we

548
00:25:29,749 --> 00:25:32,509
find way and decide back and forth back

549
00:25:32,509 --> 00:25:33,590
web but something is good for this

550
00:25:33,590 --> 00:25:35,299
javascript is good for this let's

551
00:25:35,299 --> 00:25:40,129
optimize all the things I want to

552
00:25:40,129 --> 00:25:43,999
mention that there are two experiments

553
00:25:43,999 --> 00:25:46,909
done on JavaScript to compile to

554
00:25:46,909 --> 00:25:51,320
webassembly one is about the double-a LT

555
00:25:51,320 --> 00:25:55,580
which is kind of you write a JA

556
00:25:55,580 --> 00:25:58,399
JavaScript ish language that combines

557
00:25:58,399 --> 00:26:00,470
that with the whoever thing and there is

558
00:26:00,470 --> 00:26:02,570
another one called a same script script

559
00:26:02,570 --> 00:26:06,289
which is a subset of typescript that

560
00:26:06,289 --> 00:26:08,480
compiles down to the web assembly so

561
00:26:08,480 --> 00:26:11,960
yeah I'm interested in see how they they

562
00:26:11,960 --> 00:26:14,419
do this and how this can work out like

563
00:26:14,419 --> 00:26:17,509
maybe this could be a good starting

564
00:26:17,509 --> 00:26:20,509
point for writing JavaScript and see how

565
00:26:20,509 --> 00:26:22,100
this goes like back and forth on

566
00:26:22,100 --> 00:26:28,840
webassembly all of this discussion about

567
00:26:28,840 --> 00:26:31,869
the many fold possibilities here

568
00:26:31,869 --> 00:26:34,519
reminded me of an ongoing conversation

569
00:26:34,519 --> 00:26:36,169
that that folks are having about how we

570
00:26:36,169 --> 00:26:39,769
preserve the on-ramps to web development

571
00:26:39,769 --> 00:26:42,470
it used to be that you just get started

572
00:26:42,470 --> 00:26:43,040
you do a

573
00:26:43,040 --> 00:26:44,720
little bit of HTML you can do your CSS

574
00:26:44,720 --> 00:26:46,070
and JavaScript right there and you're

575
00:26:46,070 --> 00:26:48,950
already in and it's straightforward and

576
00:26:48,950 --> 00:26:50,390
easy and now we're getting into this

577
00:26:50,390 --> 00:26:52,490
polyglot language world we're getting

578
00:26:52,490 --> 00:26:54,320
into complex build chains we're getting

579
00:26:54,320 --> 00:26:57,290
into complex frameworks Lin I know you

580
00:26:57,290 --> 00:26:58,940
do a lot of thinking about how to

581
00:26:58,940 --> 00:27:02,720
explain code concepts to people I know

582
00:27:02,720 --> 00:27:04,610
that this is a surprised question

583
00:27:04,610 --> 00:27:05,900
because it just came up now I didn't

584
00:27:05,900 --> 00:27:07,580
prep you on this but do you have

585
00:27:07,580 --> 00:27:09,590
thoughts on how we make keep making this

586
00:27:09,590 --> 00:27:13,340
accessible to folks that is a question

587
00:27:13,340 --> 00:27:16,190
that has come up a number of times

588
00:27:16,190 --> 00:27:20,690
because people are worried that when you

589
00:27:20,690 --> 00:27:22,520
introduce something like web assembly

590
00:27:22,520 --> 00:27:24,620
does everyone then have to learn web

591
00:27:24,620 --> 00:27:26,600
assembly in order to be a web developer

592
00:27:26,600 --> 00:27:31,790
and I think that the answer is no I

593
00:27:31,790 --> 00:27:35,090
think that we can actually all of the

594
00:27:35,090 --> 00:27:37,790
web developers can benefit from web

595
00:27:37,790 --> 00:27:39,440
assembly without ever having to learn it

596
00:27:39,440 --> 00:27:42,740
if we have people like the react core

597
00:27:42,740 --> 00:27:46,310
developers re-implementing core parts of

598
00:27:46,310 --> 00:27:49,910
react then people who are using it won't

599
00:27:49,910 --> 00:27:53,180
actually have to know anything about web

600
00:27:53,180 --> 00:27:55,910
assembly they'll just see that the you

601
00:27:55,910 --> 00:27:57,590
know Dom deafening algorithm is going

602
00:27:57,590 --> 00:28:01,670
faster because the api's that are on top

603
00:28:01,670 --> 00:28:04,550
of it will stay the same and so I think

604
00:28:04,550 --> 00:28:10,520
that we can provide kind of this ladder

605
00:28:10,520 --> 00:28:13,070
basically add another few rungs to the

606
00:28:13,070 --> 00:28:14,960
ladder that you don't actually need to

607
00:28:14,960 --> 00:28:16,820
climb if you want to you can climb those

608
00:28:16,820 --> 00:28:18,590
extra wrongs and learn how to do web

609
00:28:18,590 --> 00:28:20,390
assembly development but that you don't

610
00:28:20,390 --> 00:28:22,610
need to to have the same level of

611
00:28:22,610 --> 00:28:24,050
proficiency that you do today and

612
00:28:24,050 --> 00:28:26,300
actually benefit from web assembly

613
00:28:26,300 --> 00:28:30,110
without having to learn it yeah I have

614
00:28:30,110 --> 00:28:33,710
thoughts I mean I agree I think as we

615
00:28:33,710 --> 00:28:36,040
like this industry is still super young

616
00:28:36,040 --> 00:28:39,080
you know you don't and and as we

617
00:28:39,080 --> 00:28:42,080
professionalize and go deeper it's the

618
00:28:42,080 --> 00:28:43,700
the the learning curve is going to steep

619
00:28:43,700 --> 00:28:46,970
in and like that's not it's not an

620
00:28:46,970 --> 00:28:48,890
argument to stop development you know

621
00:28:48,890 --> 00:28:51,590
and I think it's an argument for more

622
00:28:51,590 --> 00:28:53,870
people at every level particularly

623
00:28:53,870 --> 00:28:55,670
intermedia to

624
00:28:55,670 --> 00:28:58,160
to do to produce content to teach each

625
00:28:58,160 --> 00:29:00,500
other I'm a big proponent of learning in

626
00:29:00,500 --> 00:29:02,990
public what you know whatever you just

627
00:29:02,990 --> 00:29:05,300
learned you are the world's most recent

628
00:29:05,300 --> 00:29:09,140
expert at even though you may be you may

629
00:29:09,140 --> 00:29:10,550
not have like a hundred percent of the

630
00:29:10,550 --> 00:29:12,050
knowledge or you may be me

631
00:29:12,050 --> 00:29:14,090
maybe incomplete and missing out some of

632
00:29:14,090 --> 00:29:16,730
the history of something but you're our

633
00:29:16,730 --> 00:29:18,800
best place to explain to other beginners

634
00:29:18,800 --> 00:29:20,120
as well because you you have the

635
00:29:20,120 --> 00:29:21,380
beginner's mind and that's something

636
00:29:21,380 --> 00:29:24,260
that experts don't so I think that we

637
00:29:24,260 --> 00:29:28,640
should have more of that awesome I think

638
00:29:28,640 --> 00:29:29,840
we're getting close to where we're gonna

639
00:29:29,840 --> 00:29:32,540
have to wrap up for the next speakers to

640
00:29:32,540 --> 00:29:33,980
come in but I want to go around

641
00:29:33,980 --> 00:29:35,990
potentially to each of our panelists and

642
00:29:35,990 --> 00:29:38,930
ask you for a quick hit you know what is

643
00:29:38,930 --> 00:29:40,040
one of the things that you are most

644
00:29:40,040 --> 00:29:42,320
excited about coming in the future of

645
00:29:42,320 --> 00:29:43,520
web development and that can be

646
00:29:43,520 --> 00:29:45,290
JavaScript specific that can be

647
00:29:45,290 --> 00:29:47,570
webassembly specific that can be kind of

648
00:29:47,570 --> 00:29:49,520
global big picture of where the platform

649
00:29:49,520 --> 00:29:51,950
is going whatever layer you want to hit

650
00:29:51,950 --> 00:29:53,990
it at and in whatever order because I

651
00:29:53,990 --> 00:29:55,460
once again I didn't prep you on this

652
00:29:55,460 --> 00:29:58,430
sorry throwing you a few curveballs but

653
00:29:58,430 --> 00:29:59,810
what is something that gets you really

654
00:29:59,810 --> 00:30:01,490
excited about the future of web

655
00:30:01,490 --> 00:30:02,990
development cuz I mean from where I'm

656
00:30:02,990 --> 00:30:03,590
sitting

657
00:30:03,590 --> 00:30:06,410
we're where it's at like this is amazing

658
00:30:06,410 --> 00:30:07,820
the stuff going on in this industry is

659
00:30:07,820 --> 00:30:10,760
phenomenal and you know this is an

660
00:30:10,760 --> 00:30:12,200
exciting time to be alive

661
00:30:12,200 --> 00:30:17,120
I personally am very excited about how

662
00:30:17,120 --> 00:30:21,890
far the the web as a platform is going

663
00:30:21,890 --> 00:30:24,170
out of just for the web for example now

664
00:30:24,170 --> 00:30:28,100
you can create a PWA and install an

665
00:30:28,100 --> 00:30:31,160
unknown Windows machine so I'm very

666
00:30:31,160 --> 00:30:33,470
excited about that because like as a web

667
00:30:33,470 --> 00:30:36,860
developer I would I I'd like to do

668
00:30:36,860 --> 00:30:38,810
something more than just like web sites

669
00:30:38,810 --> 00:30:44,490
so yeah I'm pretty excited about it

670
00:30:44,500 --> 00:30:48,140
so I do a lot of I spend a lot of my

671
00:30:48,140 --> 00:30:49,880
time in the reactor wall ecosystem I

672
00:30:49,880 --> 00:30:50,660
guess

673
00:30:50,660 --> 00:30:53,720
and so concurrent reactors kind of like

674
00:30:53,720 --> 00:30:55,010
the next thing that's that's being

675
00:30:55,010 --> 00:30:56,720
released by the by the VI team and it's

676
00:30:56,720 --> 00:30:59,300
seems to be like you think that we're

677
00:30:59,300 --> 00:31:01,460
kind of done with like rendering thing

678
00:31:01,460 --> 00:31:03,550
rendering like lists of items on a page

679
00:31:03,550 --> 00:31:06,560
but there's so many nuances and and ways

680
00:31:06,560 --> 00:31:09,570
to declaratively make

681
00:31:09,570 --> 00:31:11,190
you know user and if declare user

682
00:31:11,190 --> 00:31:14,040
interface that's better and I you know

683
00:31:14,040 --> 00:31:15,600
I'm very much looking forward to the

684
00:31:15,600 --> 00:31:19,470
release of that over the next year I

685
00:31:19,470 --> 00:31:21,180
think that there there are a bunch of

686
00:31:21,180 --> 00:31:23,460
things that I'm excited about I talked

687
00:31:23,460 --> 00:31:25,110
about a bunch of them in the talk

688
00:31:25,110 --> 00:31:27,300
yesterday but I think the thing I'm most

689
00:31:27,300 --> 00:31:30,330
excited for is web assemblies

690
00:31:30,330 --> 00:31:32,670
integration with the garbage collector

691
00:31:32,670 --> 00:31:33,960
in the browser because I think that that

692
00:31:33,960 --> 00:31:36,960
opens the door to so many different use

693
00:31:36,960 --> 00:31:38,790
cases where we use javascript and web

694
00:31:38,790 --> 00:31:41,070
assembly together and where we use web

695
00:31:41,070 --> 00:31:44,100
assembly for the parts of an app that it

696
00:31:44,100 --> 00:31:46,200
really makes sense for and speed up a

697
00:31:46,200 --> 00:31:51,840
whole bunch of these apps I'm excited

698
00:31:51,840 --> 00:31:55,410
about tearing down barriers between the

699
00:31:55,410 --> 00:31:59,160
web and all other platforms in both

700
00:31:59,160 --> 00:32:01,500
directions so Kevin Lee if you want to

701
00:32:01,500 --> 00:32:04,440
have or in the past really we this is

702
00:32:04,440 --> 00:32:07,020
has sort of changed now in the past if

703
00:32:07,020 --> 00:32:08,640
you wanted to have a an application

704
00:32:08,640 --> 00:32:12,750
available on desktop systems and Android

705
00:32:12,750 --> 00:32:17,630
and iOS and also the web you built one

706
00:32:17,630 --> 00:32:21,000
portable application core for all these

707
00:32:21,000 --> 00:32:23,430
other platforms and then individual user

708
00:32:23,430 --> 00:32:25,860
interfaces for all of them and then you

709
00:32:25,860 --> 00:32:28,140
built the web version completely

710
00:32:28,140 --> 00:32:30,990
independent from all the quest or you

711
00:32:30,990 --> 00:32:33,360
have to choose to not have that or not

712
00:32:33,360 --> 00:32:35,520
have the other ones and we are changing

713
00:32:35,520 --> 00:32:38,880
that where the web platform can be one

714
00:32:38,880 --> 00:32:40,560
of the others where you have a portable

715
00:32:40,560 --> 00:32:42,780
core and you build a web specific user

716
00:32:42,780 --> 00:32:45,000
interface using web technologies that's

717
00:32:45,000 --> 00:32:47,390
the one direction the other direction is

718
00:32:47,390 --> 00:32:51,540
bringing webassembly to other use cases

719
00:32:51,540 --> 00:32:54,750
in similar ways to how node what

720
00:32:54,750 --> 00:32:57,060
javascript you are the use cases and to

721
00:32:57,060 --> 00:32:59,340
the degree that web developers get more

722
00:32:59,340 --> 00:33:02,070
comfortable with using web assembly and

723
00:33:02,070 --> 00:33:05,630
not all of them have to of course but

724
00:33:05,630 --> 00:33:10,050
those that do we open new worlds for

725
00:33:10,050 --> 00:33:13,950
them we open the ability to go into tiny

726
00:33:13,950 --> 00:33:18,750
Nicias where javascript would not be the

727
00:33:18,750 --> 00:33:22,110
quiet language and apply their abilities

728
00:33:22,110 --> 00:33:22,770
there

729
00:33:22,770 --> 00:33:24,960
really blurring the lines between these

730
00:33:24,960 --> 00:33:27,330
very two different platforms that's what

731
00:33:27,330 --> 00:33:31,110
I'm really excited about all right so as

732
00:33:31,110 --> 00:33:33,690
we wrap up I want to get a hand for all

733
00:33:33,690 --> 00:33:36,270
of our panelists here they're pretty

734
00:33:36,270 --> 00:33:42,870
amazing yeah I mean I don't know how I

735
00:33:42,870 --> 00:33:44,370
got so lucky to get to pick the brains

736
00:33:44,370 --> 00:33:46,710
of these types of folks but it's it's a

737
00:33:46,710 --> 00:33:47,940
pretty amazing thing and if you like

738
00:33:47,940 --> 00:33:51,330
hearing from folks like this every week

739
00:33:51,330 --> 00:33:54,720
take out your phone right now look up

740
00:33:54,720 --> 00:33:57,870
j/s party you can listen on the web if

741
00:33:57,870 --> 00:33:59,070
you really don't want to subscribe you

742
00:33:59,070 --> 00:34:02,280
can listen wherever you want and we

743
00:34:02,280 --> 00:34:04,770
bring content from conferences we have

744
00:34:04,770 --> 00:34:07,260
regular guests we've had you know folks

745
00:34:07,260 --> 00:34:08,970
like John Risa Khan the show we've had

746
00:34:08,970 --> 00:34:13,169
folks you know just incredible stuff and

747
00:34:13,169 --> 00:34:15,840
you know I I listen to every episode not

748
00:34:15,840 --> 00:34:17,820
just because I'm on the show a lot of

749
00:34:17,820 --> 00:34:19,320
times I'm not on the show and I just I'm

750
00:34:19,320 --> 00:34:20,520
like alright I got to hear what they

751
00:34:20,520 --> 00:34:23,909
said that's amazing so check it out

752
00:34:23,909 --> 00:34:26,730
thank you all for coming thank you thank

753
00:34:26,730 --> 00:34:27,070
you

