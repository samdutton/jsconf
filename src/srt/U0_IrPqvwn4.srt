1
00:00:01,430 --> 00:00:12,910
Hey!

2
00:00:12,910 --> 00:00:31,070
So, change the title a little bit, Pimp up
your workflow.

3
00:00:31,070 --> 00:00:34,660
How do we get to understand how programs work?

4
00:00:34,660 --> 00:00:44,100
One way is to read the code, top to bottom,
read all the files.

5
00:00:44,100 --> 00:00:45,420
Execute it in your head.

6
00:00:45,420 --> 00:00:50,899
Keep the stack in mind.

7
00:00:50,899 --> 00:00:54,860
Well, it might work for small projects.

8
00:00:54,860 --> 00:01:02,739
When you have something big, it would take
a while.

9
00:01:02,739 --> 00:01:06,900
Say, imagine you have a project.

10
00:01:06,900 --> 00:01:09,540
With hundreds of files.

11
00:01:09,540 --> 00:01:13,070
And hundred thousands of lines of Js code.

12
00:01:13,070 --> 00:01:22,310
Are you going to read all of it before you
start to work on a feature or fix a bug?

13
00:01:22,310 --> 00:01:27,689
How do you start?

14
00:01:27,689 --> 00:01:30,070
The project is so big.

15
00:01:30,070 --> 00:01:34,320
You don't know which file you would need.

16
00:01:34,320 --> 00:01:43,920
One way of understanding how a program works
is console statements everywhere.

17
00:01:43,920 --> 00:01:50,700
So, you open, find some function.

18
00:01:50,700 --> 00:01:53,920
Put some console .Log statements.

19
00:01:53,920 --> 00:01:57,340
You open the browser.

20
00:01:57,340 --> 00:02:00,110
See what is in the console.

21
00:02:00,110 --> 00:02:07,159
If it is not what you expect it, you do the
same over again.

22
00:02:07,159 --> 00:02:09,259
Another way is to use the debugger.

23
00:02:09,259 --> 00:02:12,809
And insert breakpoints.

24
00:02:12,809 --> 00:02:16,109
Breakpoints are great.

25
00:02:16,109 --> 00:02:23,390
Because you can insert them without the page.

26
00:02:23,390 --> 00:02:27,730
You can disable them too.

27
00:02:27,730 --> 00:02:32,190
But one problem with breakpoints is that they
block.

28
00:02:32,190 --> 00:02:35,169
Imagine you are debugging.

29
00:02:35,169 --> 00:02:38,900
And you have 2 function competing.

30
00:02:38,900 --> 00:02:43,669
When you step on a breakpoint it blocks the
execution.

31
00:02:43,669 --> 00:02:49,949
Breakpoints are not the best tool for that
kind of task.

32
00:02:49,949 --> 00:02:54,939
So, today I'm going to be showing a few other
tools.

33
00:02:54,939 --> 00:02:58,450
That I believe not so popular.

34
00:02:58,450 --> 00:03:07,159
And I think they're great for understanding
how programs run and how they work.

35
00:03:07,159 --> 00:03:16,589
And they actually allow you to see actual
states of the program.

36
00:03:16,589 --> 00:03:22,599
So, the first one is lighttable.

37
00:03:22,599 --> 00:03:28,359
One cool feature I like is inline Watchers.

38
00:03:28,359 --> 00:03:35,760
When we read the code we don't really know
what's inside the variable.

39
00:03:35,760 --> 00:03:45,449
And lighttable allows to watch, to select
some code and start watching it.

40
00:03:45,449 --> 00:03:47,449
It will show the value in realtime.

41
00:03:47,449 --> 00:03:50,299
As the program ran.

42
00:03:50,299 --> 00:03:56,369
So, I'm going to run some demo.

43
00:03:56,369 --> 00:04:05,370
On the rightside there is a demo.

44
00:04:05,370 --> 00:04:08,159
Processing library in Javascript.

45
00:04:08,159 --> 00:04:09,719
On the leftside the code.

46
00:04:09,719 --> 00:04:11,739
I see the variables but I don't know what
it is.

47
00:04:11,739 --> 00:04:13,859
What is Other?

48
00:04:13,859 --> 00:04:18,289
Is it a number?

49
00:04:18,289 --> 00:04:20,470
Undefined on first click.

50
00:04:20,470 --> 00:04:22,410
And some object on the second click.

51
00:04:22,410 --> 00:04:28,870
You can see, Lighttable is updating in realtime.

52
00:04:28,870 --> 00:04:36,730
Here is some velocity property.

53
00:04:36,730 --> 00:04:37,730
I don't know what it is.

54
00:04:37,730 --> 00:04:45,150
It is a vector.

55
00:04:45,150 --> 00:04:53,000
And it updates in realtime as you play around
in your code.

56
00:04:53,000 --> 00:05:01,870
There is some drag property.

57
00:05:01,870 --> 00:05:08,389
I don't know what it is.

58
00:05:08,389 --> 00:05:20,930
So, what was it...

59
00:05:20,930 --> 00:05:28,530
Watch expression.

60
00:05:28,530 --> 00:05:33,030
Another cool tool is inline eval.

61
00:05:33,030 --> 00:05:39,560
So, it works like this.

62
00:05:39,560 --> 00:05:42,939
You select some code and press command enter.

63
00:05:42,939 --> 00:05:45,909
It should the last.

64
00:05:45,909 --> 00:05:46,909
Right in the code.

65
00:05:46,909 --> 00:05:48,780
Not in a console.

66
00:05:48,780 --> 00:05:54,200
But right there.

67
00:05:54,200 --> 00:06:04,370
So, those were 2 features of Lighttable that
I really like.

68
00:06:04,370 --> 00:06:09,630
If you don't use Lighttable, maybe you should
check it out.

69
00:06:09,630 --> 00:06:18,889
If you work on some tools, maybe you should
implement some of those features in your favourite

70
00:06:18,889 --> 00:06:21,719
tool.

71
00:06:21,719 --> 00:06:30,659
Timeline is available in Chrome tools.

72
00:06:30,659 --> 00:06:34,430
Firefox dev tools.

73
00:06:34,430 --> 00:06:38,740
When people talk about Timeline they talk
about profiling, measurements zhozer i'm going

74
00:06:38,740 --> 00:06:42,159
to use it different.

75
00:06:42,159 --> 00:06:43,159
So, here is a demo.

76
00:06:43,159 --> 00:07:04,460
It is the same webpage.

77
00:07:04,460 --> 00:07:07,759
To record the events.

78
00:07:07,759 --> 00:07:14,870
I want to know, I want to find the function
responsible for mouse down events.

79
00:07:14,870 --> 00:07:16,020
Or click.

80
00:07:16,020 --> 00:07:17,020
I don't know where it is.

81
00:07:17,020 --> 00:07:20,889
I don't know how many files I have.

82
00:07:20,889 --> 00:07:23,979
I can see all the timers.

83
00:07:23,979 --> 00:07:28,849
All the mouse events.

84
00:07:28,849 --> 00:07:29,849
There are too many.

85
00:07:29,849 --> 00:07:45,660
I filter down to mouse.

86
00:07:45,660 --> 00:07:54,379
From there I can jump right to the function
that was executed on mousedown.

87
00:07:54,379 --> 00:08:00,469
I didn't read any code before that.

88
00:08:00,469 --> 00:08:09,770
So, this is a good tool to give you an overview
of how your program works.

89
00:08:09,770 --> 00:08:15,349
When you see a program for the first time.

90
00:08:15,349 --> 00:08:17,770
You don't know where to start.

91
00:08:17,770 --> 00:08:24,490
You can play around and see what gets executed.

92
00:08:24,490 --> 00:08:37,300
But, and from there you can jump to the files
and functions that you want to edit.

93
00:08:37,300 --> 00:08:45,480
So, another tool is Adobe Brakets Theseus.

94
00:08:45,480 --> 00:08:54,970
It is actually an extention to Adobe Braket.

95
00:08:54,970 --> 00:08:57,620
Which is a...

96
00:08:57,620 --> 00:09:08,370
I am going to play another demo.

97
00:09:08,370 --> 00:09:19,220
I have a game.

98
00:09:19,220 --> 00:09:37,630
It is just a webpage in Javascript.

99
00:09:37,630 --> 00:09:46,380
And in the editor you can see there are 21
calls, 24 calls.

100
00:09:46,380 --> 00:09:57,960
So, it is logging all the function calls that
are happening on the webpage.

101
00:09:57,960 --> 00:10:01,180
You can see what is running at this time.

102
00:10:01,180 --> 00:10:03,440
You can see which functions are not used.

103
00:10:03,440 --> 00:10:11,870
And which ones are used.

104
00:10:11,870 --> 00:10:13,209
And you can narrow it down.

105
00:10:13,209 --> 00:10:20,070
You can see all the function names and the
arguments.

106
00:10:20,070 --> 00:10:22,850
They are all there.

107
00:10:22,850 --> 00:10:37,290
You don't need to insert hundreds of console.Logs.

108
00:10:37,290 --> 00:10:44,180
From there you can see that from keyboard
input manager all those callbacks were called.

109
00:10:44,180 --> 00:10:49,440
You can see call stack.

110
00:10:49,440 --> 00:11:05,740
You can go up.

111
00:11:05,740 --> 00:11:21,790
Okay.

112
00:11:21,790 --> 00:11:27,180
That was adobe brakets theseus.

113
00:11:27,180 --> 00:11:31,100
Another tool is in the webstore.

114
00:11:31,100 --> 00:11:35,070
It is an ID.

115
00:11:35,070 --> 00:11:39,430
It has a feature Spyjs.

116
00:11:39,430 --> 00:11:44,699
It is similar to Braket theseus.

117
00:11:44,699 --> 00:11:53,230
But it has slightly different user interface.

118
00:11:53,230 --> 00:12:14,209
I'm going to show you.

119
00:12:14,209 --> 00:12:26,800
Where am I?

120
00:12:26,800 --> 00:12:31,000
Hm...

121
00:12:31,000 --> 00:12:39,399
Maybe not.

122
00:12:39,399 --> 00:12:54,069
Maybe I'm not going to show you.

123
00:12:54,069 --> 00:12:56,500
Okay.

124
00:12:56,500 --> 00:13:01,370
Ignore that.

125
00:13:01,370 --> 00:13:10,190
It logs all events on the left column.

126
00:13:10,190 --> 00:13:26,759
I speed it up a little bit.

127
00:13:26,759 --> 00:13:35,950
It highlights in light green background the
pieces of code that ran.

128
00:13:35,950 --> 00:13:38,330
There is a conditional here.

129
00:13:38,330 --> 00:13:39,839
It didn't run.

130
00:13:39,839 --> 00:13:41,700
Because it doesn't have a background.

131
00:13:41,700 --> 00:13:46,260
You can see which parts got executed.

132
00:13:46,260 --> 00:14:01,290
There are a lot of events there.

133
00:14:01,290 --> 00:14:17,740
The same as Adobe Brakets you can see argument
values.

134
00:14:17,740 --> 00:14:23,160
That was SpyJs.

135
00:14:23,160 --> 00:14:34,449
So, I think it is all cool.

136
00:14:34,449 --> 00:14:35,449
What would be better I think.

137
00:14:35,449 --> 00:14:44,370
What if I just could play it back?

138
00:14:44,370 --> 00:14:49,240
So, oops.

139
00:14:49,240 --> 00:14:51,670
Okay.

140
00:14:51,670 --> 00:15:02,480
So, about 1,5 years ago I was playing around
with one tool.

141
00:15:02,480 --> 00:15:04,769
Called it Rewind.

142
00:15:04,769 --> 00:15:09,540
I do some Dom operations.

143
00:15:09,540 --> 00:15:15,839
And what if I played it back?

144
00:15:15,839 --> 00:15:18,510
And forward.

145
00:15:18,510 --> 00:15:21,180


146
00:15:21,180 --> 00:15:31,310
And so I was working on a tool that captures
all the Dom manipulations.

147
00:15:31,310 --> 00:15:33,649
Allows to rewind them.

148
00:15:33,649 --> 00:15:36,620
Eventually I realised it is not practical.

149
00:15:36,620 --> 00:15:40,050
I only captured Dom.

150
00:15:40,050 --> 00:15:42,980
Not Js events.

151
00:15:42,980 --> 00:15:43,980
Input.

152
00:15:43,980 --> 00:15:47,500
If there is something going on in an interval.

153
00:15:47,500 --> 00:15:50,699
And tries to access the dom.

154
00:15:50,699 --> 00:15:53,250
And I rewind it.

155
00:15:53,250 --> 00:15:58,410
It will try to do something with an element
that is no longer there.

156
00:15:58,410 --> 00:15:59,810
So.

157
00:15:59,810 --> 00:16:07,959
I kept it as a project.

158
00:16:07,959 --> 00:16:14,510
Hopefully, fortunately...

159
00:16:14,510 --> 00:16:24,329
Some other tool.

160
00:16:24,329 --> 00:16:27,440
Tools out here.

161
00:16:27,440 --> 00:16:38,410
So, this is Timeline again in Web Inspector.

162
00:16:38,410 --> 00:16:43,449
I have a hidden feature.

163
00:16:43,449 --> 00:16:44,449
Web replay.

164
00:16:44,449 --> 00:16:52,829
At this stage it doesn't do that much.

165
00:16:52,829 --> 00:17:08,570
But you'll see.

166
00:17:08,570 --> 00:17:22,000
So, I basically played it back as it was.

167
00:17:22,000 --> 00:17:28,510
It captured all the values such as random.

168
00:17:28,510 --> 00:17:29,510
And information.

169
00:17:29,510 --> 00:17:56,850
And played exactly the same as it was.

170
00:17:56,850 --> 00:18:03,190
For now, wouldn't it be amazing rewind back.

171
00:18:03,190 --> 00:18:05,960
Play some code.

172
00:18:05,960 --> 00:18:12,350
Loop some animation and tweak around with
values and just play.

173
00:18:12,350 --> 00:18:16,740
And you don't need to hit refresh all the
time.

174
00:18:16,740 --> 00:18:26,890
So, this was a current implementation in the
webkit nightly.

175
00:18:26,890 --> 00:19:22,140
I'd like to finish with

176
00:19:22,140 --> 00:19:37,330
a video.

177
00:19:37,330 --> 00:19:56,970
Isn't it amazing.

178
00:19:56,970 --> 00:20:33,940
I

179
00:20:33,940 --> 00:20:38,620
hope at some point you'll be able to rewind
back and play it again.

180
00:20:38,620 --> 00:20:41,810
And change some value.

181
00:20:41,810 --> 00:20:46,390
We hit refresh all day long.

182
00:20:46,390 --> 00:20:52,150
And I think it is not necessary.

183
00:20:52,150 --> 00:20:55,130
Timelapse is now called Webreplay.

184
00:20:55,130 --> 00:21:01,580
And it doesn't allow you to rewind as I showed
you.

185
00:21:01,580 --> 00:21:04,190
I hope will get there eventually.

186
00:21:04,190 --> 00:21:10,770
I hope, Web replay will change the way we
develop web apps.

187
00:21:10,770 --> 00:21:12,510
Thank you.

