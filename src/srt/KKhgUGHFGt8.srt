1
00:00:07,580 --> 00:00:11,429

ok let's try to get started my name is

2
00:00:11,429 --> 00:00:14,340
Jacob and I work at a company called

3
00:00:14,340 --> 00:00:17,699
Burt we're a Swedish startup in the ad

4
00:00:17,699 --> 00:00:22,220
tech industry doing add analytics and

5
00:00:22,220 --> 00:00:25,350
well being a startup these days means

6
00:00:25,350 --> 00:00:27,840
that you're usually following some some

7
00:00:27,840 --> 00:00:29,820
lean principle like running a lean

8
00:00:29,820 --> 00:00:31,769
startup and we're doing agile

9
00:00:31,769 --> 00:00:34,530
development and promoting agile

10
00:00:34,530 --> 00:00:36,660
advertising for our customers and we're

11
00:00:36,660 --> 00:00:38,399
using dynamically typed programming

12
00:00:38,399 --> 00:00:41,100
languages and and scrum and everything

13
00:00:41,100 --> 00:00:43,320
everything is just so dynamic

14
00:00:43,320 --> 00:00:46,920
all the time except for one tiny tiny

15
00:00:46,920 --> 00:00:52,530
thing javascript is not and sure

16
00:00:52,530 --> 00:00:55,500
javascript is dynamically typed but it's

17
00:00:55,500 --> 00:00:57,719
not really a dynamic programming

18
00:00:57,719 --> 00:01:04,199
language so I will use this talk to

19
00:01:04,199 --> 00:01:06,630
describe what I mean to to make you

20
00:01:06,630 --> 00:01:08,790
understand my thoughts here but I will

21
00:01:08,790 --> 00:01:12,479
start by by explaining how i came to

22
00:01:12,479 --> 00:01:15,509
this conclusion or brother which

23
00:01:15,509 --> 00:01:17,790
experience took me took me through this

24
00:01:17,790 --> 00:01:21,960
i started developing in in high school

25
00:01:21,960 --> 00:01:25,470
and I learned that static checking was

26
00:01:25,470 --> 00:01:28,560
good because I was programming c++ a

27
00:01:28,560 --> 00:01:32,220
horrible first language and I read all

28
00:01:32,220 --> 00:01:36,210
the books by burner in particular design

29
00:01:36,210 --> 00:01:38,729
and evolution of C++ which goes into the

30
00:01:38,729 --> 00:01:41,009
detail of the language itself and this

31
00:01:41,009 --> 00:01:43,740
made me interested in in languages but

32
00:01:43,740 --> 00:01:46,740
the theme kind of one of one of the

33
00:01:46,740 --> 00:01:48,750
things that really stuck with me was

34
00:01:48,750 --> 00:01:52,170
that casting was evil because casting a

35
00:01:52,170 --> 00:01:54,780
variable from one type to another was a

36
00:01:54,780 --> 00:01:57,719
design flaw you've made some mistake in

37
00:01:57,719 --> 00:01:59,579
your code since you have to change

38
00:01:59,579 --> 00:02:03,960
something from one thing to another and

39
00:02:03,960 --> 00:02:05,880
i thought this for years and I i

40
00:02:05,880 --> 00:02:08,670
programmed C++ for maybe three four five

41
00:02:08,670 --> 00:02:11,000
years without

42
00:02:11,000 --> 00:02:14,690
learning any other languages but later I

43
00:02:14,690 --> 00:02:16,550
got some new perspectives when I got

44
00:02:16,550 --> 00:02:21,140
into web I learned SQL I learn PHP Perl

45
00:02:21,140 --> 00:02:24,170
all these wonderful things and in

46
00:02:24,170 --> 00:02:27,010
particular i discovered the Haskell and

47
00:02:27,010 --> 00:02:31,160
if if there are some people here who who

48
00:02:31,160 --> 00:02:33,980
don't know what Haskell is it's a purely

49
00:02:33,980 --> 00:02:37,100
functional programming language which is

50
00:02:37,100 --> 00:02:39,410
statically typed but all the types are

51
00:02:39,410 --> 00:02:42,620
in third so you almost never have to

52
00:02:42,620 --> 00:02:44,360
write the types but still the program

53
00:02:44,360 --> 00:02:46,790
will or the compiler will tell you if

54
00:02:46,790 --> 00:02:50,030
you've done something inconsistent and I

55
00:02:50,030 --> 00:02:52,730
thought hey this is cool but Haskell is

56
00:02:52,730 --> 00:02:55,520
purely functional and that makes it hard

57
00:02:55,520 --> 00:02:58,610
to use and think like you usually do so

58
00:02:58,610 --> 00:03:01,070
I thought why not take the ideas from

59
00:03:01,070 --> 00:03:04,280
Haskell this type inference to some

60
00:03:04,280 --> 00:03:08,300
language that is well more more useful

61
00:03:08,300 --> 00:03:11,000
in general and since I started doing

62
00:03:11,000 --> 00:03:13,400
some web development I had recently

63
00:03:13,400 --> 00:03:16,010
learned javascript and found it to be a

64
00:03:16,010 --> 00:03:18,380
nice little language and it should be

65
00:03:18,380 --> 00:03:20,090
possible to put like a type inference

66
00:03:20,090 --> 00:03:22,730
layer on top of JavaScript was my idea

67
00:03:22,730 --> 00:03:25,070
so so let's combine the best of two

68
00:03:25,070 --> 00:03:28,220
words like type inference and tiny very

69
00:03:28,220 --> 00:03:33,530
useful language and the the idea was

70
00:03:33,530 --> 00:03:37,610
good but the problem was that there are

71
00:03:37,610 --> 00:03:41,360
some features in JavaScript that you

72
00:03:41,360 --> 00:03:45,590
can't really infer at at runtime we're

73
00:03:45,590 --> 00:03:48,680
at at compile time I mean so the the

74
00:03:48,680 --> 00:03:51,680
project was bound to fail I mean it's

75
00:03:51,680 --> 00:03:55,010
not possible to do static checking on

76
00:03:55,010 --> 00:04:01,220
evow on with on looking up keys in an

77
00:04:01,220 --> 00:04:03,920
object using using a string rather than

78
00:04:03,920 --> 00:04:06,560
the dot notation and so on and I thought

79
00:04:06,560 --> 00:04:08,209
that well that wouldn't matter much

80
00:04:08,209 --> 00:04:10,970
because those those features are kinda

81
00:04:10,970 --> 00:04:12,769
creepy right you shouldn't really use

82
00:04:12,769 --> 00:04:15,560
eval and with that's no no no that's

83
00:04:15,560 --> 00:04:19,609
that's bad but the reason it faded the

84
00:04:19,609 --> 00:04:21,440
reason I couldn't just exclude those

85
00:04:21,440 --> 00:04:23,840
things where that most libraries

86
00:04:23,840 --> 00:04:25,960
actually use one of one or another

87
00:04:25,960 --> 00:04:28,639
somewhere somewhere deep in the code and

88
00:04:28,639 --> 00:04:30,800
if you can statically check your

89
00:04:30,800 --> 00:04:32,840
libraries you can't statically check

90
00:04:32,840 --> 00:04:35,470
your own code and the whole thing breaks

91
00:04:35,470 --> 00:04:39,050
so it didn't work but it made me realize

92
00:04:39,050 --> 00:04:44,960
that the real benefit of dynamic

93
00:04:44,960 --> 00:04:48,050
programming language it's not that who I

94
00:04:48,050 --> 00:04:51,680
don't have to write the types it's it's

95
00:04:51,680 --> 00:04:53,479
so easy I don't have to think I can just

96
00:04:53,479 --> 00:04:55,400
experiment and we will see if it blows

97
00:04:55,400 --> 00:04:58,010
up at runtime the real benefit is that

98
00:04:58,010 --> 00:05:00,740
it allows you to do certain things that

99
00:05:00,740 --> 00:05:04,220
you can't do in a static language and I

100
00:05:04,220 --> 00:05:09,530
mean can it's impossible like doing the

101
00:05:09,530 --> 00:05:11,750
eval things and and with and so on and

102
00:05:11,750 --> 00:05:16,789
it made me think that what what other

103
00:05:16,789 --> 00:05:20,419
features are there like this what are

104
00:05:20,419 --> 00:05:22,729
the dynamic languages in the world

105
00:05:22,729 --> 00:05:25,520
actually providing for us what can we do

106
00:05:25,520 --> 00:05:29,600
if we use them instead so I thought

107
00:05:29,600 --> 00:05:32,570
let's learn Ruby Python Lisp all of

108
00:05:32,570 --> 00:05:36,710
these and yeah I was I was just

109
00:05:36,710 --> 00:05:39,680
disappointed they didn't really do what

110
00:05:39,680 --> 00:05:42,229
I expected them to do they didn't use

111
00:05:42,229 --> 00:05:45,710
the full potential of being dynamic so

112
00:05:45,710 --> 00:05:47,479
to speak let me give you some examples

113
00:05:47,479 --> 00:05:54,889
and the top is JavaScript as you as you

114
00:05:54,889 --> 00:05:57,320
probably notice and the second piece of

115
00:05:57,320 --> 00:05:59,750
code is Ruby and the last one is hasco

116
00:05:59,750 --> 00:06:05,330
and well Ruby and javascript is a little

117
00:06:05,330 --> 00:06:07,639
more bloated than the last one and and

118
00:06:07,639 --> 00:06:12,110
why is this you you could reason as much

119
00:06:12,110 --> 00:06:15,440
as you want about why it looks like this

120
00:06:15,440 --> 00:06:18,260
but but the fact is that you can't

121
00:06:18,260 --> 00:06:22,820
change it you can't alter JavaScript to

122
00:06:22,820 --> 00:06:25,190
get a behavior light like the Ruby line

123
00:06:25,190 --> 00:06:28,099
or or like the Haskell line you're stuck

124
00:06:28,099 --> 00:06:30,470
with function you're stuck with return

125
00:06:30,470 --> 00:06:32,440
you're stuck with the parentheses

126
00:06:32,440 --> 00:06:35,950
and the bracket or the curly braces I

127
00:06:35,950 --> 00:06:40,690
mean it's impossible to change the

128
00:06:40,690 --> 00:06:44,290
language itself into accepting something

129
00:06:44,290 --> 00:06:48,880
else even though why is it that way why

130
00:06:48,880 --> 00:06:51,730
does it have to be like that and then we

131
00:06:51,730 --> 00:06:55,200
can look at the operators well in

132
00:06:55,200 --> 00:06:57,280
JavaScript you can't really do anything

133
00:06:57,280 --> 00:06:59,200
with operators at all you can't define

134
00:06:59,200 --> 00:07:01,090
your own you can change them you can't

135
00:07:01,090 --> 00:07:03,370
really you can't really change the

136
00:07:03,370 --> 00:07:05,290
syntax of JavaScript in any way and

137
00:07:05,290 --> 00:07:08,440
these two operators are particularly

138
00:07:08,440 --> 00:07:13,240
nasty because they do lazy evaluation or

139
00:07:13,240 --> 00:07:16,000
a short circuiting if you will which

140
00:07:16,000 --> 00:07:19,180
means that the the or operator will not

141
00:07:19,180 --> 00:07:20,860
evaluate the second argument if the

142
00:07:20,860 --> 00:07:22,510
first argument evaluates to true and

143
00:07:22,510 --> 00:07:25,030
that is also something that's impossible

144
00:07:25,030 --> 00:07:28,420
to do yourself you can't create that

145
00:07:28,420 --> 00:07:30,160
behavior unless you add a lot of sugar

146
00:07:30,160 --> 00:07:32,890
like your rabbit in a function and make

147
00:07:32,890 --> 00:07:38,020
it a lot more complicated why and then

148
00:07:38,020 --> 00:07:39,669
there's this thing everyone keeps

149
00:07:39,669 --> 00:07:41,950
yelling that all these modern

150
00:07:41,950 --> 00:07:44,169
dynamically typed languages in in them

151
00:07:44,169 --> 00:07:45,940
everything is an object everything is an

152
00:07:45,940 --> 00:07:47,680
object I can manipulate the strings the

153
00:07:47,680 --> 00:07:49,480
numbers everything everything but

154
00:07:49,480 --> 00:07:52,000
everything is not an object I'm not sure

155
00:07:52,000 --> 00:07:53,590
what your definition of everything is

156
00:07:53,590 --> 00:07:55,060
but my definition of everything is

157
00:07:55,060 --> 00:07:59,350
everything in JavaScript function the

158
00:07:59,350 --> 00:08:01,770
keyword function that's not an object

159
00:08:01,770 --> 00:08:05,050
the parentheses the dots these things

160
00:08:05,050 --> 00:08:07,990
are not objects they could be if the

161
00:08:07,990 --> 00:08:10,210
function function keyword was an object

162
00:08:10,210 --> 00:08:12,250
we could assign it to something we could

163
00:08:12,250 --> 00:08:14,620
say F equals function and then we could

164
00:08:14,620 --> 00:08:17,590
write F when creating functions rather

165
00:08:17,590 --> 00:08:19,900
than writing functions function which

166
00:08:19,900 --> 00:08:24,190
would be a lot easier and well we can't

167
00:08:24,190 --> 00:08:30,600
everything is not an object so I

168
00:08:30,600 --> 00:08:34,450
actually changed my mind when it comes

169
00:08:34,450 --> 00:08:38,080
to thinking about what what the language

170
00:08:38,080 --> 00:08:39,940
can do what's a good and a bad language

171
00:08:39,940 --> 00:08:44,650
because instead of thinking like let's

172
00:08:44,650 --> 00:08:45,850
call the language blob

173
00:08:45,850 --> 00:08:52,029
if you read anything by yeah exactly by

174
00:08:52,029 --> 00:08:54,730
Paul Graham thanks you recognize the

175
00:08:54,730 --> 00:08:57,569
name so this is my anonymous language

176
00:08:57,569 --> 00:09:01,000
instead of asking yourself what can blob

177
00:09:01,000 --> 00:09:04,569
do that that don't ask that

178
00:09:04,569 --> 00:09:06,850
question ask yourself what is it that

179
00:09:06,850 --> 00:09:09,550
that blob can't do because if you see

180
00:09:09,550 --> 00:09:12,009
what a language can do you you start

181
00:09:12,009 --> 00:09:15,190
like discovering what's possible it's

182
00:09:15,190 --> 00:09:18,160
hard to make up new scenarios if you

183
00:09:18,160 --> 00:09:21,009
don't think that way and also I think

184
00:09:21,009 --> 00:09:24,490
it's it's not very easy to to design the

185
00:09:24,490 --> 00:09:25,899
language by sitting down and thinking

186
00:09:25,899 --> 00:09:28,750
what do I want to do because it's not

187
00:09:28,750 --> 00:09:30,880
about a particular solution you're not

188
00:09:30,880 --> 00:09:32,230
trying to solve a particular problem

189
00:09:32,230 --> 00:09:33,880
you're creating a programming language

190
00:09:33,880 --> 00:09:36,279
that's like the most generic thing you

191
00:09:36,279 --> 00:09:40,029
can build it's the language will be used

192
00:09:40,029 --> 00:09:42,759
to build a framework which will be used

193
00:09:42,759 --> 00:09:44,380
to build an application that someone

194
00:09:44,380 --> 00:09:46,300
else we use and so on like the language

195
00:09:46,300 --> 00:09:49,209
is at the very bottom it should be as

196
00:09:49,209 --> 00:09:51,639
generic as possible so you can't really

197
00:09:51,639 --> 00:09:56,920
put a task 2211 guy or girl to like our

198
00:09:56,920 --> 00:09:58,990
create a programming language and think

199
00:09:58,990 --> 00:10:00,939
of all the kinds of scenarios that all

200
00:10:00,939 --> 00:10:04,620
we as developers will want to use it for

201
00:10:04,620 --> 00:10:07,660
you can't do that you can solve a

202
00:10:07,660 --> 00:10:09,790
particular thing that's the job of a

203
00:10:09,790 --> 00:10:13,870
framework so instead it's about doing as

204
00:10:13,870 --> 00:10:16,899
little as possible do the easiest thing

205
00:10:16,899 --> 00:10:23,110
you can and that's not that's not easier

206
00:10:23,110 --> 00:10:25,449
actually because what you have to do is

207
00:10:25,449 --> 00:10:27,880
that you have to find the set of

208
00:10:27,880 --> 00:10:31,990
primitives that are the most generic

209
00:10:31,990 --> 00:10:35,410
ones that allows someone to shape your

210
00:10:35,410 --> 00:10:37,870
language into whatever they want to use

211
00:10:37,870 --> 00:10:43,269
it for and they have to be as few as

212
00:10:43,269 --> 00:10:46,269
possible because the more things you put

213
00:10:46,269 --> 00:10:49,060
into the language the more you encode

214
00:10:49,060 --> 00:10:51,790
like ideas and concepts and everything

215
00:10:51,790 --> 00:10:54,459
that you want like the way you want the

216
00:10:54,459 --> 00:10:58,350
user to think or the programmer I mean

217
00:10:58,350 --> 00:11:00,840
so if you don't put a lot of stuff in

218
00:11:00,840 --> 00:11:02,820
you don't force the programmer to behave

219
00:11:02,820 --> 00:11:06,300
in a certain way and that's kind of the

220
00:11:06,300 --> 00:11:08,820
main value as i see it of a programming

221
00:11:08,820 --> 00:11:11,910
language that a dynamic language or well

222
00:11:11,910 --> 00:11:14,370
preferably at any language but it has to

223
00:11:14,370 --> 00:11:16,410
be dynamic to satisfy this is that it

224
00:11:16,410 --> 00:11:18,720
should be malleable and moldable which

225
00:11:18,720 --> 00:11:21,180
means that you should be able to change

226
00:11:21,180 --> 00:11:23,850
it into whatever you want if you don't

227
00:11:23,850 --> 00:11:25,980
like writing function when you create

228
00:11:25,980 --> 00:11:27,570
your functions then you should be able

229
00:11:27,570 --> 00:11:30,120
to change that and you should also not

230
00:11:30,120 --> 00:11:33,090
just be able to everything should not be

231
00:11:33,090 --> 00:11:35,280
fluid all the time like water you should

232
00:11:35,280 --> 00:11:37,950
be able to to fix it when you want to

233
00:11:37,950 --> 00:11:41,310
like make something fixed which is

234
00:11:41,310 --> 00:11:42,930
exactly what I mean when I say that it

235
00:11:42,930 --> 00:11:48,000
should be moldable so a language should

236
00:11:48,000 --> 00:11:50,610
be like a dough you're like massaging it

237
00:11:50,610 --> 00:11:53,940
and and making something out of it but

238
00:11:53,940 --> 00:11:56,610
it's not predetermined what what that is

239
00:11:56,610 --> 00:11:59,640
and that's actually the best part the

240
00:11:59,640 --> 00:12:02,780
best part when with a good language is

241
00:12:02,780 --> 00:12:05,250
that you don't know what the best part

242
00:12:05,250 --> 00:12:08,850
will be because you leave that up to

243
00:12:08,850 --> 00:12:11,070
someone else to decide they can use your

244
00:12:11,070 --> 00:12:12,780
dough to create something awesome

245
00:12:12,780 --> 00:12:15,450
themselves and this is where where the

246
00:12:15,450 --> 00:12:17,610
fact comes in that you as a language

247
00:12:17,610 --> 00:12:20,760
designer cannot create the perfect like

248
00:12:20,760 --> 00:12:22,950
the perfect solution to everything

249
00:12:22,950 --> 00:12:24,840
yourself you have to create something

250
00:12:24,840 --> 00:12:28,050
that others can change to actually map

251
00:12:28,050 --> 00:12:31,920
onto a problem and solve something so

252
00:12:31,920 --> 00:12:34,590
now we are wondering this conference is

253
00:12:34,590 --> 00:12:36,330
about JavaScript who brought this guy

254
00:12:36,330 --> 00:12:39,890
here what is he talking about and

255
00:12:39,890 --> 00:12:45,060
there's there's three reasons why I

256
00:12:45,060 --> 00:12:46,850
think that these questions are

257
00:12:46,850 --> 00:12:49,640
interesting when it comes to JavaScript

258
00:12:49,640 --> 00:12:51,930
when you try to like think of a new

259
00:12:51,930 --> 00:12:54,240
language think of what you would like to

260
00:12:54,240 --> 00:13:01,160
do and the first one is regarding like

261
00:13:01,160 --> 00:13:04,500
what's what the language does and what

262
00:13:04,500 --> 00:13:07,020
it should do what it shouldn't do and I

263
00:13:07,020 --> 00:13:09,330
mean javascript is just so full of

264
00:13:09,330 --> 00:13:12,060
so there's so many bad

265
00:13:12,060 --> 00:13:13,680
balls like don't do this don't do this

266
00:13:13,680 --> 00:13:15,870
don't do this don't do this very very

267
00:13:15,870 --> 00:13:19,470
much to learn from and secondly and this

268
00:13:19,470 --> 00:13:21,350
might be the most important point is

269
00:13:21,350 --> 00:13:24,810
that currently it's like a platform for

270
00:13:24,810 --> 00:13:27,000
everything and now i'm using everything

271
00:13:27,000 --> 00:13:28,530
in the same sloppy sense that everyone

272
00:13:28,530 --> 00:13:30,450
else is using everything because it's

273
00:13:30,450 --> 00:13:32,520
not a platform for everything but when

274
00:13:32,520 --> 00:13:35,400
you're doing web these days you have to

275
00:13:35,400 --> 00:13:37,110
work with javascript because javascript

276
00:13:37,110 --> 00:13:38,490
is known the language the runs in the

277
00:13:38,490 --> 00:13:41,220
browser and more and more things come to

278
00:13:41,220 --> 00:13:43,800
the world of the browser these days so

279
00:13:43,800 --> 00:13:47,250
if you want to make a new language that

280
00:13:47,250 --> 00:13:49,080
targets the browser you will have to

281
00:13:49,080 --> 00:13:51,450
think of javascript how will this new

282
00:13:51,450 --> 00:13:54,720
language play with javascript how can we

283
00:13:54,720 --> 00:13:56,760
make them interact with each other in

284
00:13:56,760 --> 00:13:58,830
order to reuse all that's already out

285
00:13:58,830 --> 00:14:03,300
there and third javascript actually has

286
00:14:03,300 --> 00:14:05,640
some amazing ideas it contains a lot of

287
00:14:05,640 --> 00:14:09,810
good good stuff like functions are first

288
00:14:09,810 --> 00:14:14,250
class objects behave like caches or hash

289
00:14:14,250 --> 00:14:16,980
maps you can look up all the properties

290
00:14:16,980 --> 00:14:19,200
and functions and everything like a hash

291
00:14:19,200 --> 00:14:24,120
and it's very tiny in general it's not a

292
00:14:24,120 --> 00:14:27,420
big bloated language and the prototyping

293
00:14:27,420 --> 00:14:31,260
is at least to me a more pure idea of

294
00:14:31,260 --> 00:14:33,330
inheritance than the classical model

295
00:14:33,330 --> 00:14:36,540
employed by Java or C++ because you can

296
00:14:36,540 --> 00:14:38,280
build something that behaves kind of

297
00:14:38,280 --> 00:14:40,490
like classical inheritance using

298
00:14:40,490 --> 00:14:44,630
prototyping but you can simplify the

299
00:14:44,630 --> 00:14:46,940
classical model if that's what you have

300
00:14:46,940 --> 00:14:51,090
so it has a lot of good ideas and I

301
00:14:51,090 --> 00:14:53,370
think that will play well with a new

302
00:14:53,370 --> 00:14:55,800
language that could create that embodies

303
00:14:55,800 --> 00:14:58,410
these new ideas and and the new things

304
00:14:58,410 --> 00:15:00,960
that I'm thinking of the primitives that

305
00:15:00,960 --> 00:15:03,060
you would really want in a language to

306
00:15:03,060 --> 00:15:05,670
make it really really dynamic really

307
00:15:05,670 --> 00:15:09,780
moldable are those are three things as

308
00:15:09,780 --> 00:15:12,870
well and the first one of those is to

309
00:15:12,870 --> 00:15:15,990
have called by name instead of call by

310
00:15:15,990 --> 00:15:19,830
value all or call by reference and if

311
00:15:19,830 --> 00:15:21,630
not all of you understand what that

312
00:15:21,630 --> 00:15:25,120
means it's passing a value to offer

313
00:15:25,120 --> 00:15:28,060
like a copy of the original value that's

314
00:15:28,060 --> 00:15:29,650
called by value called by reference

315
00:15:29,650 --> 00:15:31,510
means that you pass a reference to the

316
00:15:31,510 --> 00:15:33,940
original object and call by name means

317
00:15:33,940 --> 00:15:37,600
that you pass the actual name of what

318
00:15:37,600 --> 00:15:40,290
you're sending in the symbol or the

319
00:15:40,290 --> 00:15:44,740
expression itself which allows you to do

320
00:15:44,740 --> 00:15:46,870
things that don't evaluate immediately

321
00:15:46,870 --> 00:15:50,290
but for example think of this like tank

322
00:15:50,290 --> 00:15:55,120
of severed do kodesh JavaScript the code

323
00:15:55,120 --> 00:15:59,110
where we have a lazy function which

324
00:15:59,110 --> 00:16:01,120
doesn't evaluate its arguments when they

325
00:16:01,120 --> 00:16:03,520
are first passed in but rather can use

326
00:16:03,520 --> 00:16:06,070
some kind of executes statement to to

327
00:16:06,070 --> 00:16:08,980
actually evaluate those if we had that

328
00:16:08,980 --> 00:16:12,480
and well if we had could could assign

329
00:16:12,480 --> 00:16:14,980
values to operators we could implement

330
00:16:14,980 --> 00:16:17,589
the end operator ourselves because we

331
00:16:17,589 --> 00:16:20,980
would not have to evaluate be if a is

332
00:16:20,980 --> 00:16:25,180
false and the cool thing is that if you

333
00:16:25,180 --> 00:16:26,410
have this functionality you can

334
00:16:26,410 --> 00:16:28,750
implement the regular one because if you

335
00:16:28,750 --> 00:16:30,520
just take all the arguments and start by

336
00:16:30,520 --> 00:16:32,709
evaluating them left to right you get

337
00:16:32,709 --> 00:16:35,200
the regular function behavior like the

338
00:16:35,200 --> 00:16:37,180
everything is evaluated before the

339
00:16:37,180 --> 00:16:38,980
function starts so this is a more

340
00:16:38,980 --> 00:16:41,380
generic primitive to construct your

341
00:16:41,380 --> 00:16:47,279
language from secondly we need operators

342
00:16:47,279 --> 00:16:50,650
and I don't just mean having operators

343
00:16:50,650 --> 00:16:52,450
like in JavaScript I mean operators on

344
00:16:52,450 --> 00:16:55,209
freaking steroids so so they can do

345
00:16:55,209 --> 00:16:58,000
anything you want we're not anything but

346
00:16:58,000 --> 00:17:02,430
more things and i took this example from

347
00:17:02,430 --> 00:17:05,679
from well Ruby or coffee script or other

348
00:17:05,679 --> 00:17:10,589
languages has the the unless statement

349
00:17:10,589 --> 00:17:12,790
maybe you used coffee script and and

350
00:17:12,790 --> 00:17:15,220
seen this what it means is that we will

351
00:17:15,220 --> 00:17:20,020
assign V to be a plus B unless X is

352
00:17:20,020 --> 00:17:24,370
larger than y so that's kind of an

353
00:17:24,370 --> 00:17:27,040
operator a lazy one again it evaluates

354
00:17:27,040 --> 00:17:29,620
the right part first and then it runs

355
00:17:29,620 --> 00:17:32,350
the left part if depending on the

356
00:17:32,350 --> 00:17:36,610
truthiness some of the right part and in

357
00:17:36,610 --> 00:17:38,000
CoffeeScript this has

358
00:17:38,000 --> 00:17:41,480
has been like a put into the language

359
00:17:41,480 --> 00:17:44,060
they have entered the unless statement

360
00:17:44,060 --> 00:17:46,090
into the grammar of the language itself

361
00:17:46,090 --> 00:17:49,160
which is exactly the wrong way to do it

362
00:17:49,160 --> 00:17:51,860
in my opinion if you really want an

363
00:17:51,860 --> 00:17:53,540
unless statement and you have to create

364
00:17:53,540 --> 00:17:56,450
a new language to get it what does that

365
00:17:56,450 --> 00:17:59,240
tell you then you're not really solving

366
00:17:59,240 --> 00:18:01,550
the problem by doing what CoffeeScript

367
00:18:01,550 --> 00:18:03,980
does you're just saying I have a better

368
00:18:03,980 --> 00:18:05,720
idea I will provide the people with this

369
00:18:05,720 --> 00:18:07,250
solution and they can use that instead

370
00:18:07,250 --> 00:18:09,770
and if that idea is not awesome or

371
00:18:09,770 --> 00:18:11,720
someone else has a good idea well then

372
00:18:11,720 --> 00:18:13,100
you're screwed again you haven't solved

373
00:18:13,100 --> 00:18:17,810
the actual issue so what I would like to

374
00:18:17,810 --> 00:18:20,780
do instead is to be able to say that at

375
00:18:20,780 --> 00:18:24,650
runtime like I want the word unless to

376
00:18:24,650 --> 00:18:27,230
behave like an operator and I wanted to

377
00:18:27,230 --> 00:18:29,780
evaluate either the left or the right

378
00:18:29,780 --> 00:18:32,390
side first and I wanted to have this and

379
00:18:32,390 --> 00:18:34,700
these proceedings so it gets executed

380
00:18:34,700 --> 00:18:37,250
before or after other operators as I

381
00:18:37,250 --> 00:18:40,940
want to so it when it's actually run

382
00:18:40,940 --> 00:18:43,610
turns into something that looks more

383
00:18:43,610 --> 00:18:47,960
like this not actual code again but just

384
00:18:47,960 --> 00:18:50,450
so you can think of what it does so

385
00:18:50,450 --> 00:18:54,310
unless would then be a method on the

386
00:18:54,310 --> 00:18:58,490
boolean type so as long as you define

387
00:18:58,490 --> 00:19:03,050
unless as an operator and you create a

388
00:19:03,050 --> 00:19:05,690
function that's called unless it will be

389
00:19:05,690 --> 00:19:09,290
invoked well like this if everything

390
00:19:09,290 --> 00:19:13,630
works the way you you intended it to

391
00:19:13,630 --> 00:19:19,470
sorry

392
00:19:19,480 --> 00:19:23,210
so that's exactly one can you hear me

393
00:19:23,210 --> 00:19:38,519
well none is it good it's okay thank you

394
00:19:38,529 --> 00:19:42,649
so this is the thing you have to find

395
00:19:42,649 --> 00:19:45,470
the primitives that will allow you to

396
00:19:45,470 --> 00:19:48,710
create the new features that you want by

397
00:19:48,710 --> 00:19:50,419
not creating a new programming language

398
00:19:50,419 --> 00:19:52,809
but bending the one you have into new

399
00:19:52,809 --> 00:19:57,649
into a new shape so that was called by

400
00:19:57,649 --> 00:20:00,619
name and it was operators the third one

401
00:20:00,619 --> 00:20:04,820
is syntax unification which is what

402
00:20:04,820 --> 00:20:07,460
leads make sense at this is this is like

403
00:20:07,460 --> 00:20:09,950
the whole thing that is list everything

404
00:20:09,950 --> 00:20:12,230
looks the same you have your parentheses

405
00:20:12,230 --> 00:20:13,639
and that's it then you can play with

406
00:20:13,639 --> 00:20:15,950
them the bad part about this place that

407
00:20:15,950 --> 00:20:17,690
you have to play with the parentheses

408
00:20:17,690 --> 00:20:20,690
you can't add operators you can't make

409
00:20:20,690 --> 00:20:23,389
things that read better than a whole

410
00:20:23,389 --> 00:20:26,389
bunch of parentheses and well just lots

411
00:20:26,389 --> 00:20:29,899
of nested statement but we still need

412
00:20:29,899 --> 00:20:33,139
that part as well because then we would

413
00:20:33,139 --> 00:20:35,690
be we would have the possibility to

414
00:20:35,690 --> 00:20:37,850
actually implement something that looked

415
00:20:37,850 --> 00:20:40,429
like this that I showed you in the first

416
00:20:40,429 --> 00:20:44,809
code example if filter would be a

417
00:20:44,809 --> 00:20:48,350
function that was taking its arguments

418
00:20:48,350 --> 00:20:50,629
in the lazy way and not just evaluating

419
00:20:50,629 --> 00:20:53,240
them right away this would be okay to

420
00:20:53,240 --> 00:20:55,399
begin with because it wouldn't evaluate

421
00:20:55,399 --> 00:20:57,200
the arguments and argument this kind of

422
00:20:57,200 --> 00:21:00,289
invalid so it's not okay to to evaluate

423
00:21:00,289 --> 00:21:03,529
it but when it passes it to the to the

424
00:21:03,529 --> 00:21:06,619
function it should not just pass like

425
00:21:06,619 --> 00:21:11,210
this dream greater than zero it should

426
00:21:11,210 --> 00:21:14,779
parse that as if it were a program which

427
00:21:14,779 --> 00:21:16,879
we want it to be and create something

428
00:21:16,879 --> 00:21:19,070
like this like this is a message and it

429
00:21:19,070 --> 00:21:20,419
has a name and it has a list of

430
00:21:20,419 --> 00:21:23,389
arguments and the arguments could be new

431
00:21:23,389 --> 00:21:25,100
messages doing new things it could be a

432
00:21:25,100 --> 00:21:26,870
whole freaking program in there

433
00:21:26,870 --> 00:21:29,180
and then you pass that to the function

434
00:21:29,180 --> 00:21:32,480
and instead of saying like execute

435
00:21:32,480 --> 00:21:35,450
evaluate this statement or this

436
00:21:35,450 --> 00:21:40,610
expression you you send the expression

437
00:21:40,610 --> 00:21:44,750
to an object so here we're we're

438
00:21:44,750 --> 00:21:46,850
implementing filter by creating a new

439
00:21:46,850 --> 00:21:48,380
empty array and looking through this

440
00:21:48,380 --> 00:21:51,790
array and for each element we send this

441
00:21:51,790 --> 00:21:54,950
this expression that we received to this

442
00:21:54,950 --> 00:21:57,790
object so so he becomes the target of

443
00:21:57,790 --> 00:22:00,890
the expression we sent in and suddenly

444
00:22:00,890 --> 00:22:05,420
it's meaningful e greater than 0 and if

445
00:22:05,420 --> 00:22:07,550
it is we push it onto our and what

446
00:22:07,550 --> 00:22:11,450
return our when we're finished so as

447
00:22:11,450 --> 00:22:14,360
long as every statement in the program

448
00:22:14,360 --> 00:22:18,620
is parsed to to a syntax tree like like

449
00:22:18,620 --> 00:22:23,090
this or something like it and not just

450
00:22:23,090 --> 00:22:25,640
looked upon as a piece of like like a

451
00:22:25,640 --> 00:22:27,890
string which we have in JavaScript with

452
00:22:27,890 --> 00:22:29,660
the eval statement we can pass a string

453
00:22:29,660 --> 00:22:31,880
to it and we can evaluate arbitrary code

454
00:22:31,880 --> 00:22:35,300
but if we actually parsed it and got the

455
00:22:35,300 --> 00:22:37,730
data as it looked we could manipulate it

456
00:22:37,730 --> 00:22:40,550
in more more meaningful ways and we

457
00:22:40,550 --> 00:22:42,740
could change things a lot in here we

458
00:22:42,740 --> 00:22:45,500
could not just send the message to a

459
00:22:45,500 --> 00:22:47,179
target object but we could manipulate

460
00:22:47,179 --> 00:22:49,820
the message first we could change the

461
00:22:49,820 --> 00:22:52,850
zero in in the argument to something

462
00:22:52,850 --> 00:22:55,670
else or we could could reshape it in

463
00:22:55,670 --> 00:22:58,220
some other way and and as you see I I

464
00:22:58,220 --> 00:22:59,780
don't really know what we could use it

465
00:22:59,780 --> 00:23:02,630
for but that's the point it gives you

466
00:23:02,630 --> 00:23:05,240
power to do things and it gives you the

467
00:23:05,240 --> 00:23:07,850
power to make up what you should use it

468
00:23:07,850 --> 00:23:09,890
for it it's not my job to say what what

469
00:23:09,890 --> 00:23:14,179
you should do with it so that's the

470
00:23:14,179 --> 00:23:18,220
third point so to start like wrapping up

471
00:23:18,220 --> 00:23:20,600
we're not really there yet we're not

472
00:23:20,600 --> 00:23:23,420
using the full potential of dynamic

473
00:23:23,420 --> 00:23:26,330
languages we are just like scratching

474
00:23:26,330 --> 00:23:29,559
the surface and I think the reason is

475
00:23:29,559 --> 00:23:32,540
most of the languages we use today were

476
00:23:32,540 --> 00:23:35,750
developed quite a long time ago like

477
00:23:35,750 --> 00:23:39,290
javascript is like 16 years old now ruby

478
00:23:39,290 --> 00:23:40,550
was created in the beginning

479
00:23:40,550 --> 00:23:44,690
the 90s JavaScript as Java as well even

480
00:23:44,690 --> 00:23:46,810
if it's not one of the dynamic languages

481
00:23:46,810 --> 00:23:51,620
and that age put certain restrictions on

482
00:23:51,620 --> 00:23:54,410
the performance people thought that well

483
00:23:54,410 --> 00:23:58,820
it has to at least be kind of fast but

484
00:23:58,820 --> 00:24:00,950
we know now that there's room for

485
00:24:00,950 --> 00:24:03,220
different languages there's room for

486
00:24:03,220 --> 00:24:06,680
four options I mean everything we use

487
00:24:06,680 --> 00:24:08,780
don't have to be performant all the time

488
00:24:08,780 --> 00:24:11,990
if it would had have to we would still

489
00:24:11,990 --> 00:24:17,020
be using assembler so when people say

490
00:24:17,020 --> 00:24:20,120
well what about safety and and what

491
00:24:20,120 --> 00:24:24,310
about performance I just say well safety

492
00:24:24,310 --> 00:24:28,040
go back to using Java come on if you

493
00:24:28,040 --> 00:24:29,420
don't want to shoot yourself in the foot

494
00:24:29,420 --> 00:24:30,980
you shouldn't even be using javascript

495
00:24:30,980 --> 00:24:35,630
to to begin with the same thing applies

496
00:24:35,630 --> 00:24:38,750
here if you want safety you create it

497
00:24:38,750 --> 00:24:41,090
yourself you write tests you follow

498
00:24:41,090 --> 00:24:44,120
conventions you learn from other you

499
00:24:44,120 --> 00:24:47,150
avoid the Troublesome parts of the

500
00:24:47,150 --> 00:24:50,960
language and so on if safety is what you

501
00:24:50,960 --> 00:24:54,440
want don't use our dynamic language and

502
00:24:54,440 --> 00:24:56,600
if you use a dynamic language stop

503
00:24:56,600 --> 00:24:59,060
caring about safety don't say it's not

504
00:24:59,060 --> 00:25:00,650
safe if you can manipulate everything

505
00:25:00,650 --> 00:25:01,970
and change everything and no one

506
00:25:01,970 --> 00:25:04,760
understands what you're doing that's

507
00:25:04,760 --> 00:25:07,250
just not valid and then as for the

508
00:25:07,250 --> 00:25:10,820
performance like I said performance it's

509
00:25:10,820 --> 00:25:13,250
just a matter of time you can't really

510
00:25:13,250 --> 00:25:17,240
you it's going to be optimized over time

511
00:25:17,240 --> 00:25:21,260
compilers become better our Hardware

512
00:25:21,260 --> 00:25:24,530
becomes better we're always taking new

513
00:25:24,530 --> 00:25:26,660
steps so we would still be doing like

514
00:25:26,660 --> 00:25:29,750
assembler or see if if we never thought

515
00:25:29,750 --> 00:25:36,620
about new languages so once again don't

516
00:25:36,620 --> 00:25:40,580
ask yourself what your language can do

517
00:25:40,580 --> 00:25:42,740
for current language or your ideal

518
00:25:42,740 --> 00:25:45,050
language ask yourself what is it that I

519
00:25:45,050 --> 00:25:49,160
can't do what what would happen if I

520
00:25:49,160 --> 00:25:52,490
could do those things because let's face

521
00:25:52,490 --> 00:25:54,530
it every program

522
00:25:54,530 --> 00:25:57,140
language today is turing-complete they

523
00:25:57,140 --> 00:25:59,570
can all solve the exact same set of

524
00:25:59,570 --> 00:26:03,380
problems except changing themselves only

525
00:26:03,380 --> 00:26:06,020
a truly dynamic programming language can

526
00:26:06,020 --> 00:26:17,269
do that Thank

527
00:26:17,279 --> 00:26:21,519
two things if you're interested in

528
00:26:21,519 --> 00:26:24,459
seeing what what's becoming of these

529
00:26:24,459 --> 00:26:26,799
thoughts follow me on Twitter and I will

530
00:26:26,799 --> 00:26:29,950
keep you updated I promise there will be

531
00:26:29,950 --> 00:26:33,219
something open source very soon secondly

532
00:26:33,219 --> 00:26:35,799
I would love to answer all of your

533
00:26:35,799 --> 00:26:39,129
questions but I think it's much more

534
00:26:39,129 --> 00:26:41,859
interesting to take while and discuss it

535
00:26:41,859 --> 00:26:45,099
so just come up to me after this and ask

536
00:26:45,099 --> 00:26:46,659
anything you want and we'll talk about

537
00:26:46,659 --> 00:26:50,709
it and all of you can do it if you want

