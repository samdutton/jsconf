1
00:00:05,470 --> 00:00:08,750

about the fact or the idea at least to

2
00:00:08,750 --> 00:00:11,209
start a conversation about you writing a

3
00:00:11,209 --> 00:00:15,049
framework I'm Wes I write JavaScript

4
00:00:15,049 --> 00:00:17,300
atlassian there's a twitter handle but

5
00:00:17,300 --> 00:00:21,230
not really much happens there the i

6
00:00:21,230 --> 00:00:23,960
guess the premise is that whether you

7
00:00:23,960 --> 00:00:25,280
write something that's micro or

8
00:00:25,280 --> 00:00:26,600
monolithic something that's supposed to

9
00:00:26,600 --> 00:00:28,550
handle something very small or handle

10
00:00:28,550 --> 00:00:30,740
things that are really big i think that

11
00:00:30,740 --> 00:00:36,140
you can make some lives easier so first

12
00:00:36,140 --> 00:00:38,989
i think it's useful to define framework

13
00:00:38,989 --> 00:00:43,999
for the sake of the talk wikipedia for a

14
00:00:43,999 --> 00:00:46,609
long time helpfully define framework the

15
00:00:46,609 --> 00:00:48,109
word framework in the programming

16
00:00:48,109 --> 00:00:50,870
context as a buzzword so that didn't

17
00:00:50,870 --> 00:00:53,239
help but actually over the last about a

18
00:00:53,239 --> 00:00:54,559
year and a half there's been a really

19
00:00:54,559 --> 00:00:56,749
sort of healthy debate around what

20
00:00:56,749 --> 00:00:58,789
pieces of things make up a framework or

21
00:00:58,789 --> 00:01:00,579
what differentiates a framework from

22
00:01:00,579 --> 00:01:04,010
libraries or api's I'm not going to use

23
00:01:04,010 --> 00:01:07,000
that frame that that definition strictly

24
00:01:07,000 --> 00:01:10,659
but what I do want to talk about is

25
00:01:10,659 --> 00:01:15,610
sorry just to say the idea of taking

26
00:01:15,610 --> 00:01:18,079
moving from a place where as app

27
00:01:18,079 --> 00:01:20,000
application developers we think about

28
00:01:20,000 --> 00:01:21,950
our apps as our app and the whole code

29
00:01:21,950 --> 00:01:24,439
is our appt to thinking about how we can

30
00:01:24,439 --> 00:01:26,270
up level things to be sort of a level up

31
00:01:26,270 --> 00:01:28,460
out from our app and be sort of upstream

32
00:01:28,460 --> 00:01:30,590
from us and our app doesn't change that

33
00:01:30,590 --> 00:01:33,229
code our app maybe hand stuff to that

34
00:01:33,229 --> 00:01:35,479
code and it handles maybe control flow

35
00:01:35,479 --> 00:01:38,420
or something for us or it it helps us

36
00:01:38,420 --> 00:01:41,329
out in some way but it's above the app

37
00:01:41,329 --> 00:01:43,700
so the app doesn't sort of modify its

38
00:01:43,700 --> 00:01:47,450
internals so basically going from one

39
00:01:47,450 --> 00:01:50,000
big app to having something upstream

40
00:01:50,000 --> 00:01:51,920
from us I'm going to talk about how we

41
00:01:51,920 --> 00:01:54,500
can begin thinking about doing that and

42
00:01:54,500 --> 00:01:56,000
I know they're certainly people here

43
00:01:56,000 --> 00:01:57,530
already doing that but I want to talk

44
00:01:57,530 --> 00:02:00,979
about and encourage you to if you're not

45
00:02:00,979 --> 00:02:02,840
already to start doing that and what

46
00:02:02,840 --> 00:02:04,219
sort of things I think about when I'm

47
00:02:04,219 --> 00:02:06,979
going through that process and how I

48
00:02:06,979 --> 00:02:10,789
think it helps helps you up level as a

49
00:02:10,789 --> 00:02:12,770
developer

50
00:02:12,770 --> 00:02:17,050
and so yeah it's there's nothing I guess

51
00:02:17,050 --> 00:02:20,210
about my definition that differentiates

52
00:02:20,210 --> 00:02:26,210
you from from an API or from libraries

53
00:02:26,210 --> 00:02:29,450
except that whatever that layer is it's

54
00:02:29,450 --> 00:02:31,010
something that may encapsulate multiple

55
00:02:31,010 --> 00:02:33,740
things and then expose a single API to

56
00:02:33,740 --> 00:02:38,590
itself again the Wikipedia article

57
00:02:38,590 --> 00:02:40,520
insinuates that there must be some

58
00:02:40,520 --> 00:02:43,160
inversion of control right where the

59
00:02:43,160 --> 00:02:45,890
framework handles lifecycle I don't

60
00:02:45,890 --> 00:02:47,360
think that's necessary right out of the

61
00:02:47,360 --> 00:02:48,980
gate as you begin pulling components out

62
00:02:48,980 --> 00:02:50,710
of your app and putting them up stream

63
00:02:50,710 --> 00:02:53,410
what I think is important is that

64
00:02:53,410 --> 00:02:55,370
whenever you take those components

65
00:02:55,370 --> 00:02:57,320
libraries or interfaces you put them all

66
00:02:57,320 --> 00:02:59,930
inside of a container and then interface

67
00:02:59,930 --> 00:03:03,740
only with that container so that's the

68
00:03:03,740 --> 00:03:07,340
definition I'm going with for now so

69
00:03:07,340 --> 00:03:11,300
yeah why what should you why should you

70
00:03:11,300 --> 00:03:12,710
framework what should you framework how

71
00:03:12,710 --> 00:03:14,030
should you go about it how do you think

72
00:03:14,030 --> 00:03:16,730
when you're writing framework code and

73
00:03:16,730 --> 00:03:19,430
then I'll do a little I think advocacy

74
00:03:19,430 --> 00:03:21,560
around the Java JavaScript community

75
00:03:21,560 --> 00:03:23,140
specifically because I think we're

76
00:03:23,140 --> 00:03:25,730
positioned in an interesting place right

77
00:03:25,730 --> 00:03:29,540
now so work for atlassian atlassian

78
00:03:29,540 --> 00:03:32,090
rights I think about eight different

79
00:03:32,090 --> 00:03:34,940
applications all but two of them are

80
00:03:34,940 --> 00:03:39,200
just big java applications and whenever

81
00:03:39,200 --> 00:03:41,390
you read Java code and one of the sort

82
00:03:41,390 --> 00:03:42,740
of interesting transitions that I had

83
00:03:42,740 --> 00:03:43,970
when I came to the company I was in a

84
00:03:43,970 --> 00:03:45,800
place with a lamp stack before that I

85
00:03:45,800 --> 00:03:47,840
was very comfortable if I met a bug that

86
00:03:47,840 --> 00:03:49,340
could potentially be in the framework

87
00:03:49,340 --> 00:03:51,260
level with just walking the stack trace

88
00:03:51,260 --> 00:03:54,770
up to that point and you know modifying

89
00:03:54,770 --> 00:03:56,480
it if I needed to or understanding that

90
00:03:56,480 --> 00:03:58,340
abstraction better whereas JavaScript

91
00:03:58,340 --> 00:04:00,770
avada developers tend to really trust

92
00:04:00,770 --> 00:04:02,810
their abstractions and I think that

93
00:04:02,810 --> 00:04:07,760
that's in some part due to the maturity

94
00:04:07,760 --> 00:04:10,820
of that of that group but it's also

95
00:04:10,820 --> 00:04:11,959
something that I think the JavaScript

96
00:04:11,959 --> 00:04:13,310
community is getting to a place where it

97
00:04:13,310 --> 00:04:17,390
could be it that comfortable as well so

98
00:04:17,390 --> 00:04:20,989
and in in a recent project I've been

99
00:04:20,989 --> 00:04:22,760
writing what is essentially a single

100
00:04:22,760 --> 00:04:26,120
page app and if you go

101
00:04:26,120 --> 00:04:27,229
to the server the only thing that's

102
00:04:27,229 --> 00:04:29,169
really there is a REST API for

103
00:04:29,169 --> 00:04:31,669
persistence you know we're using we're

104
00:04:31,669 --> 00:04:33,710
using the server to persist data the

105
00:04:33,710 --> 00:04:34,790
client is doing most of the heavy

106
00:04:34,790 --> 00:04:37,130
lifting for business logic and whenever

107
00:04:37,130 --> 00:04:39,380
you look at the rest endpoints for this

108
00:04:39,380 --> 00:04:42,020
application if you go to look at one

109
00:04:42,020 --> 00:04:47,470
specifically you'll get to a place where

110
00:04:47,470 --> 00:04:56,350
another sex sorry okay there we go

111
00:04:56,350 --> 00:05:01,610
you'll get to a place where the um where

112
00:05:01,610 --> 00:05:03,590
the rest in point is implemented and in

113
00:05:03,590 --> 00:05:05,630
the comment above that method it's just

114
00:05:05,630 --> 00:05:07,130
going to be a method and in the comment

115
00:05:07,130 --> 00:05:09,889
above it there will be a part of the

116
00:05:09,889 --> 00:05:12,110
comment that tells you it's an

117
00:05:12,110 --> 00:05:13,370
annotation and it will tell you exactly

118
00:05:13,370 --> 00:05:16,490
the route that is required for an HTTP

119
00:05:16,490 --> 00:05:18,560
request to invoke that method and then

120
00:05:18,560 --> 00:05:20,210
the parameters to that method are going

121
00:05:20,210 --> 00:05:23,539
to be the get or post parameters that

122
00:05:23,539 --> 00:05:25,639
are sent as a part of that call and then

123
00:05:25,639 --> 00:05:27,800
the return value is just an a Java

124
00:05:27,800 --> 00:05:29,419
object there's nothing special about it

125
00:05:29,419 --> 00:05:32,030
and all the serialization d civilization

126
00:05:32,030 --> 00:05:34,570
all the parts of an HTTP request headers

127
00:05:34,570 --> 00:05:37,190
cookies sessions all that's just handled

128
00:05:37,190 --> 00:05:39,139
for you and it's hidden from you and you

129
00:05:39,139 --> 00:05:41,360
just trust it and it works and so you

130
00:05:41,360 --> 00:05:42,770
see things like this and you think man

131
00:05:42,770 --> 00:05:44,030
frameworks are really useful so you go

132
00:05:44,030 --> 00:05:45,080
back to your JavaScript friends and

133
00:05:45,080 --> 00:05:46,669
you're like frameworks we're gonna write

134
00:05:46,669 --> 00:05:48,410
a framework and they kind of look at you

135
00:05:48,410 --> 00:05:50,930
like framework and I think that

136
00:05:50,930 --> 00:05:53,169
JavaScript developers so far have been

137
00:05:53,169 --> 00:05:56,630
really skeptical of frameworks it's no

138
00:05:56,630 --> 00:05:58,849
accident that backbone is so popular

139
00:05:58,849 --> 00:06:01,270
it's it's popular because it's simple

140
00:06:01,270 --> 00:06:04,520
it's also no accident that just huge

141
00:06:04,520 --> 00:06:07,490
parts of huge numbers of Java JavaScript

142
00:06:07,490 --> 00:06:09,889
developers have this death grip on

143
00:06:09,889 --> 00:06:12,050
jQuery as the thing that they're going

144
00:06:12,050 --> 00:06:15,470
to use in their framework it's because

145
00:06:15,470 --> 00:06:17,180
you can go and read a hundred percent of

146
00:06:17,180 --> 00:06:18,889
that code you can go and understand all

147
00:06:18,889 --> 00:06:20,690
of it really really easily and it's

148
00:06:20,690 --> 00:06:21,560
because they don't trust their

149
00:06:21,560 --> 00:06:25,160
abstractions so why do I think we should

150
00:06:25,160 --> 00:06:27,470
move beyond that and begin building

151
00:06:27,470 --> 00:06:30,110
either bigger pieces of things and trust

152
00:06:30,110 --> 00:06:31,970
that code to handle a lot of the major

153
00:06:31,970 --> 00:06:36,409
repetition pieces for us I'm going to go

154
00:06:36,409 --> 00:06:37,849
with sort of a soft argument and then a

155
00:06:37,849 --> 00:06:39,280
hard argument

156
00:06:39,280 --> 00:06:43,940
so and hackers and painters Paul Graham

157
00:06:43,940 --> 00:06:46,160
encourages this encourages us to think

158
00:06:46,160 --> 00:06:50,360
of our trade as a craft and to consider

159
00:06:50,360 --> 00:06:54,440
our code art and to take on that art and

160
00:06:54,440 --> 00:06:57,890
to consider ourselves artists to take on

161
00:06:57,890 --> 00:06:59,690
the hard decisions in the the trade-offs

162
00:06:59,690 --> 00:07:02,710
and treat them as things that have

163
00:07:02,710 --> 00:07:07,550
subtlety to them another artist Kurt

164
00:07:07,550 --> 00:07:11,480
Vonnegut was written to by a primary

165
00:07:11,480 --> 00:07:13,640
school classroom and they were asking

166
00:07:13,640 --> 00:07:16,340
essentially had a how to be awesome like

167
00:07:16,340 --> 00:07:17,900
he is I don't know what they asked but

168
00:07:17,900 --> 00:07:19,400
they asked something and he writes back

169
00:07:19,400 --> 00:07:21,710
to them which is pretty cool and his

170
00:07:21,710 --> 00:07:23,390
advice is essentially to just practice

171
00:07:23,390 --> 00:07:26,420
any art whatever your art is to practice

172
00:07:26,420 --> 00:07:29,210
it no matter how well or badly you're

173
00:07:29,210 --> 00:07:32,030
going to go at it to practice it and his

174
00:07:32,030 --> 00:07:34,250
main advocacy is to do it for the sake

175
00:07:34,250 --> 00:07:37,970
of the experience of becoming not to not

176
00:07:37,970 --> 00:07:39,950
to put it on github for the world to

177
00:07:39,950 --> 00:07:43,700
consume but just to experience becoming

178
00:07:43,700 --> 00:07:46,670
just a little better at that thing he

179
00:07:46,670 --> 00:07:49,040
goes so far as to advocate that you tear

180
00:07:49,040 --> 00:07:50,680
it up right after you're done with it

181
00:07:50,680 --> 00:07:53,420
like I said I think for a lot of us that

182
00:07:53,420 --> 00:07:54,830
looks like putting it up on github you

183
00:07:54,830 --> 00:07:57,290
know there's the bin or the whole world

184
00:07:57,290 --> 00:08:01,880
can view it whatever so that's that's

185
00:08:01,880 --> 00:08:04,250
the soft side right that's the I think

186
00:08:04,250 --> 00:08:05,510
you should do this in order to practice

187
00:08:05,510 --> 00:08:08,330
there's also like much more pragmatic

188
00:08:08,330 --> 00:08:10,070
matters which is I think it makes you a

189
00:08:10,070 --> 00:08:12,860
better developer so application

190
00:08:12,860 --> 00:08:15,140
developers in my experience and as an

191
00:08:15,140 --> 00:08:16,760
app developer mice like it someone who

192
00:08:16,760 --> 00:08:18,530
writes is concerned with applications on

193
00:08:18,530 --> 00:08:20,420
a regular basis myself I'm very

194
00:08:20,420 --> 00:08:22,880
interested in how to make my box

195
00:08:22,880 --> 00:08:25,520
transparent and how to fit that cat into

196
00:08:25,520 --> 00:08:27,560
the box and how to get that to the

197
00:08:27,560 --> 00:08:29,090
market and how the market is going to

198
00:08:29,090 --> 00:08:32,150
respond to that cat in that box and as a

199
00:08:32,150 --> 00:08:33,620
framework developer I think you have to

200
00:08:33,620 --> 00:08:34,940
think about how you're going to build a

201
00:08:34,940 --> 00:08:36,950
system that is going to make transparent

202
00:08:36,950 --> 00:08:38,930
or opaque boxes depending on what the

203
00:08:38,930 --> 00:08:40,820
people using it need and how it's going

204
00:08:40,820 --> 00:08:44,780
to fit any sized object so it teaches us

205
00:08:44,780 --> 00:08:47,420
how to be intentional about the edges

206
00:08:47,420 --> 00:08:50,110
that we expose to the rest of the world

207
00:08:50,110 --> 00:08:52,329
applications tend to

208
00:08:52,329 --> 00:08:56,110
be built with concerns separated but

209
00:08:56,110 --> 00:08:57,730
then as you go about writing them you

210
00:08:57,730 --> 00:09:01,149
end up using the things so each of these

211
00:09:01,149 --> 00:09:03,790
objects expose a number of AP is and

212
00:09:03,790 --> 00:09:08,829
they basically serve one concern but all

213
00:09:08,829 --> 00:09:10,869
the other pieces need to interoperate

214
00:09:10,869 --> 00:09:12,249
with those concerns and so you end up

215
00:09:12,249 --> 00:09:14,410
with an undirected ace of the graph of

216
00:09:14,410 --> 00:09:20,139
objects and I think that in writing

217
00:09:20,139 --> 00:09:21,850
frameworks in learning how to think

218
00:09:21,850 --> 00:09:23,439
about writing a framework you sort of

219
00:09:23,439 --> 00:09:25,179
uplevel into thinking about how you can

220
00:09:25,179 --> 00:09:28,509
better encapsulate those concerns so in

221
00:09:28,509 --> 00:09:30,910
an app integration can be tight because

222
00:09:30,910 --> 00:09:32,980
there's only one instance of this thing

223
00:09:32,980 --> 00:09:36,069
in the world and when a feature needs to

224
00:09:36,069 --> 00:09:37,360
be implemented and this is where some of

225
00:09:37,360 --> 00:09:39,069
those extra lines come from whenever a

226
00:09:39,069 --> 00:09:41,170
new feature needs to be implemented you

227
00:09:41,170 --> 00:09:43,689
just add one more connection right you

228
00:09:43,689 --> 00:09:47,350
just add one more line in order to eke

229
00:09:47,350 --> 00:09:49,209
out that one new thing you want it to do

230
00:09:49,209 --> 00:09:51,519
and you stretch the limits of your

231
00:09:51,519 --> 00:09:55,329
originally intended boundaries and I

232
00:09:55,329 --> 00:09:57,699
think that in learning to move things

233
00:09:57,699 --> 00:10:00,129
upstream from ourselves we'll learn how

234
00:10:00,129 --> 00:10:03,129
to go about taking those separated

235
00:10:03,129 --> 00:10:05,049
objects and packaging them up and then

236
00:10:05,049 --> 00:10:07,600
from that package of objects exposing

237
00:10:07,600 --> 00:10:12,459
one coherent API I think that it teaches

238
00:10:12,459 --> 00:10:15,399
us also how to go into this process with

239
00:10:15,399 --> 00:10:19,749
eyes open about how what we expose will

240
00:10:19,749 --> 00:10:22,949
affect those that consume the framework

241
00:10:22,949 --> 00:10:25,569
so I guess this is I don't I didn't put

242
00:10:25,569 --> 00:10:26,889
a lot of thought into what each of these

243
00:10:26,889 --> 00:10:28,929
things says but I suppose if you were

244
00:10:28,929 --> 00:10:30,639
building if you were a company that was

245
00:10:30,639 --> 00:10:33,989
concerned with sending email well and

246
00:10:33,989 --> 00:10:37,059
you always wanted your email to generate

247
00:10:37,059 --> 00:10:38,649
statistics so that your customers could

248
00:10:38,649 --> 00:10:40,179
come look at when it was sent and when

249
00:10:40,179 --> 00:10:42,189
it was opened and all that you would

250
00:10:42,189 --> 00:10:43,600
have something that looks something like

251
00:10:43,600 --> 00:10:45,339
this and if you built a framework out of

252
00:10:45,339 --> 00:10:47,079
this and expose those things to the

253
00:10:47,079 --> 00:10:49,299
world and then someone wanted to send an

254
00:10:49,299 --> 00:10:50,829
email without tracking it you know maybe

255
00:10:50,829 --> 00:10:52,329
that would be a problem I don't know

256
00:10:52,329 --> 00:10:53,589
because you've expressed that opinion

257
00:10:53,589 --> 00:10:56,259
write the opinion being that messages

258
00:10:56,259 --> 00:10:58,149
when they're sent get statistics

259
00:10:58,149 --> 00:11:01,660
attached to them but that's that's the

260
00:11:01,660 --> 00:11:03,490
eyes open part that's where you go in

261
00:11:03,490 --> 00:11:04,790
knowing

262
00:11:04,790 --> 00:11:08,160
if i make you know i can either make

263
00:11:08,160 --> 00:11:09,989
generating statistics really easy for

264
00:11:09,989 --> 00:11:11,850
everyone who uses my framework or i can

265
00:11:11,850 --> 00:11:13,889
add make them do a little more work and

266
00:11:13,889 --> 00:11:15,720
then anyone who uses this framework can

267
00:11:15,720 --> 00:11:17,790
send it with or without statistics so

268
00:11:17,790 --> 00:11:20,699
those are the sorts of trade-offs that I

269
00:11:20,699 --> 00:11:24,479
think make this into an art so what what

270
00:11:24,479 --> 00:11:28,859
to framework so I'm standing on stage in

271
00:11:28,859 --> 00:11:30,539
front of a room full of JavaScript

272
00:11:30,539 --> 00:11:32,609
developers and JavaScript frameworks

273
00:11:32,609 --> 00:11:36,299
there are a few of those they've been

274
00:11:36,299 --> 00:11:38,669
around for a while and I'm not

275
00:11:38,669 --> 00:11:40,289
advocating that you build a new

276
00:11:40,289 --> 00:11:42,600
framework to build web applications I

277
00:11:42,600 --> 00:11:45,869
think that's been done in a pretty good

278
00:11:45,869 --> 00:11:47,579
article defending not invented here

279
00:11:47,579 --> 00:11:50,279
syndrome Joel sapolsky says that you

280
00:11:50,279 --> 00:11:53,939
should reinvent things even if they've

281
00:11:53,939 --> 00:11:55,470
been invented you should reinvent them

282
00:11:55,470 --> 00:11:57,989
if it's something that differentiates

283
00:11:57,989 --> 00:11:59,999
your application from the rest of the

284
00:11:59,999 --> 00:12:02,100
applications in the world if that's your

285
00:12:02,100 --> 00:12:03,959
defining factor if it's what makes you

286
00:12:03,959 --> 00:12:06,419
in the market you should probably

287
00:12:06,419 --> 00:12:08,429
reinvent it because chances are you're

288
00:12:08,429 --> 00:12:11,069
very concerned with doing it better than

289
00:12:11,069 --> 00:12:14,789
anyone else so if you're at an org that

290
00:12:14,789 --> 00:12:16,350
because of the industry you're in needs

291
00:12:16,350 --> 00:12:18,749
to send faxes you know maybe you write a

292
00:12:18,749 --> 00:12:20,309
framework that makes all the apps that

293
00:12:20,309 --> 00:12:22,769
send faxes do it in the same way right

294
00:12:22,769 --> 00:12:25,350
if you're sending email similarly maybe

295
00:12:25,350 --> 00:12:27,449
you really want how you send email to be

296
00:12:27,449 --> 00:12:32,039
done better and again since I'm not

297
00:12:32,039 --> 00:12:33,209
using the inversion of control

298
00:12:33,209 --> 00:12:35,339
definition of framework I don't want you

299
00:12:35,339 --> 00:12:37,499
to be too concerned with when you up

300
00:12:37,499 --> 00:12:39,499
level things when you push them upstream

301
00:12:39,499 --> 00:12:41,789
about whether or not they need to handle

302
00:12:41,789 --> 00:12:44,789
the whole lifecycle of your app and I

303
00:12:44,789 --> 00:12:46,230
think that that actually comes out in

304
00:12:46,230 --> 00:12:48,329
reality a lot of really great frameworks

305
00:12:48,329 --> 00:12:50,669
have come out of individual products

306
00:12:50,669 --> 00:12:52,679
where the creator of that product began

307
00:12:52,679 --> 00:12:55,169
to slowly pull library after library out

308
00:12:55,169 --> 00:12:56,519
of their product and into something

309
00:12:56,519 --> 00:12:59,339
upstream and that eventually that that

310
00:12:59,339 --> 00:13:01,019
thing that they were building upstream

311
00:13:01,019 --> 00:13:02,939
from their app became a framework and

312
00:13:02,939 --> 00:13:06,259
began to take on control of the sort of

313
00:13:06,259 --> 00:13:08,579
operational control of how the app runs

314
00:13:08,579 --> 00:13:11,269
and became sort of sovereign

315
00:13:11,269 --> 00:13:15,329
full-fledged frameworks so don't be i

316
00:13:15,329 --> 00:13:17,510
guess don't be allowed don't be

317
00:13:17,510 --> 00:13:18,830
learned about letting things build

318
00:13:18,830 --> 00:13:20,510
organically and pulling more more stuff

319
00:13:20,510 --> 00:13:25,040
into your upstream so how'd it go about

320
00:13:25,040 --> 00:13:28,250
building a framework I'll talk this

321
00:13:28,250 --> 00:13:31,220
isn't I'm not about to go on a tutorial

322
00:13:31,220 --> 00:13:34,630
for how to build frameworks but I will

323
00:13:34,630 --> 00:13:36,920
go through some practical steps that I

324
00:13:36,920 --> 00:13:39,320
find myself thinking about when sort of

325
00:13:39,320 --> 00:13:41,240
trying to pull things upstream from my

326
00:13:41,240 --> 00:13:52,430
application so I guess consider which

327
00:13:52,430 --> 00:13:54,260
pieces of code our framework in which

328
00:13:54,260 --> 00:13:56,240
are downstream from your from that

329
00:13:56,240 --> 00:14:02,480
framework oh sorry I'm going to start

330
00:14:02,480 --> 00:14:05,690
with reading code so I'm going to talk

331
00:14:05,690 --> 00:14:07,490
about reading other frameworks and how I

332
00:14:07,490 --> 00:14:09,080
think that's a good practice to learn

333
00:14:09,080 --> 00:14:11,180
how to think in sort of framework level

334
00:14:11,180 --> 00:14:14,660
terms then it's deciding what to pull up

335
00:14:14,660 --> 00:14:17,060
stream and what to push downstream so

336
00:14:17,060 --> 00:14:20,960
what to push on to implementers and what

337
00:14:20,960 --> 00:14:23,630
to pull into a framework and then I'll

338
00:14:23,630 --> 00:14:26,210
talk about how that decision has to be

339
00:14:26,210 --> 00:14:29,240
gone into with with intention and

340
00:14:29,240 --> 00:14:30,860
knowing that you're making trade-offs

341
00:14:30,860 --> 00:14:32,360
and knowing that you're making decisions

342
00:14:32,360 --> 00:14:34,280
about the complexity that either you'll

343
00:14:34,280 --> 00:14:37,360
take on or your consumers will take on

344
00:14:37,360 --> 00:14:42,220
so you should read a lot of code that's

345
00:14:42,220 --> 00:14:44,930
probably just generic advice across all

346
00:14:44,930 --> 00:14:46,880
programmers if you want to become better

347
00:14:46,880 --> 00:14:49,040
you read lots and lots and lots of other

348
00:14:49,040 --> 00:14:53,240
people's code I would assume that though

349
00:14:53,240 --> 00:14:58,580
that I get paid to output new features

350
00:14:58,580 --> 00:15:02,420
and new programs in to fix bugs actually

351
00:15:02,420 --> 00:15:04,070
spend a larger portion of time reading

352
00:15:04,070 --> 00:15:05,420
other people's code than I do out

353
00:15:05,420 --> 00:15:07,520
putting my own and in reading framework

354
00:15:07,520 --> 00:15:09,110
code you're going to wet out every now

355
00:15:09,110 --> 00:15:11,270
and then it's going to be a little

356
00:15:11,270 --> 00:15:12,650
confusing here and there because

357
00:15:12,650 --> 00:15:14,960
framework developers do crazy stuff in

358
00:15:14,960 --> 00:15:16,790
order to sort of automatically connect

359
00:15:16,790 --> 00:15:19,850
things that are just named similarly

360
00:15:19,850 --> 00:15:21,140
right like they're going to concatenate

361
00:15:21,140 --> 00:15:24,620
that function name with this other

362
00:15:24,620 --> 00:15:26,510
function name and then use them as an

363
00:15:26,510 --> 00:15:28,430
array look up in this hash that contains

364
00:15:28,430 --> 00:15:31,370
methods and call invoke that

365
00:15:31,370 --> 00:15:32,930
the function that is the concatenation

366
00:15:32,930 --> 00:15:34,760
of those two things that a user passed

367
00:15:34,760 --> 00:15:37,190
in in order to connect you know the

368
00:15:37,190 --> 00:15:41,870
route to the controller and but I guess

369
00:15:41,870 --> 00:15:44,210
the point being that wedding out when

370
00:15:44,210 --> 00:15:46,160
you are reading framework code is rarely

371
00:15:46,160 --> 00:15:48,290
the result of bad code it's often an

372
00:15:48,290 --> 00:15:53,000
opportunity to learn something it's

373
00:15:53,000 --> 00:15:55,150
often doing something pretty cool

374
00:15:55,150 --> 00:15:58,460
reading the dependency injection stuff

375
00:15:58,460 --> 00:16:01,190
in angular can kind of do your head in

376
00:16:01,190 --> 00:16:03,350
but it's pretty sweet when you realize

377
00:16:03,350 --> 00:16:07,640
what all the pieces are doing if it's

378
00:16:07,640 --> 00:16:09,560
actually bad code just remember

379
00:16:09,560 --> 00:16:12,589
everyone's every bad idea was someone's

380
00:16:12,589 --> 00:16:14,810
good idea and it was more likely a

381
00:16:14,810 --> 00:16:16,490
compromise this is just generically

382
00:16:16,490 --> 00:16:18,650
truer across all all programming right

383
00:16:18,650 --> 00:16:19,520
when you're reading someone else's

384
00:16:19,520 --> 00:16:21,380
garbage code it's because they had to

385
00:16:21,380 --> 00:16:23,180
make trade-offs right they needed to get

386
00:16:23,180 --> 00:16:24,290
it out the door on time where they

387
00:16:24,290 --> 00:16:27,020
needed to to shim that thing into a

388
00:16:27,020 --> 00:16:29,540
system that already existed if you're

389
00:16:29,540 --> 00:16:30,740
going to read code if you're going to

390
00:16:30,740 --> 00:16:32,210
read framework level code for the first

391
00:16:32,210 --> 00:16:34,250
time backbone is just an amazing place

392
00:16:34,250 --> 00:16:36,860
to start I wasn't trashing it earlier

393
00:16:36,860 --> 00:16:38,300
when I said that it's popular because

394
00:16:38,300 --> 00:16:40,400
it's simple it's great because it's

395
00:16:40,400 --> 00:16:42,410
simple it's simple it's also a great

396
00:16:42,410 --> 00:16:43,670
place to start if you're just starting

397
00:16:43,670 --> 00:16:47,120
out in reading framework code if if

398
00:16:47,120 --> 00:16:48,620
you're comfortable with the language and

399
00:16:48,620 --> 00:16:52,760
you're comfortable reading sort of if

400
00:16:52,760 --> 00:16:53,930
you've read frameworks and other

401
00:16:53,930 --> 00:16:57,470
languages you can have a really good

402
00:16:57,470 --> 00:16:59,260
reading of backbone in a single sitting

403
00:16:59,260 --> 00:17:01,850
like an honest I really understand

404
00:17:01,850 --> 00:17:03,200
everything that's going on and why these

405
00:17:03,200 --> 00:17:05,300
pieces exist in about probably three

406
00:17:05,300 --> 00:17:07,880
hours if you're new the language you're

407
00:17:07,880 --> 00:17:09,230
slightly uncomfortable with it or you've

408
00:17:09,230 --> 00:17:11,030
never read frameworks before it's really

409
00:17:11,030 --> 00:17:13,459
easy to set up to split up into

410
00:17:13,459 --> 00:17:15,079
conceptual pieces and read each one a

411
00:17:15,079 --> 00:17:18,439
night for four or five nights make sure

412
00:17:18,439 --> 00:17:20,059
you're reading the annotated source the

413
00:17:20,059 --> 00:17:22,459
authors were super intentional about how

414
00:17:22,459 --> 00:17:25,429
they come at their code and how they go

415
00:17:25,429 --> 00:17:27,050
about documenting it so that you can

416
00:17:27,050 --> 00:17:30,370
understand each chunk so that's reading

417
00:17:30,370 --> 00:17:33,470
next we'll talk about how you or how I

418
00:17:33,470 --> 00:17:35,809
think what sort of types of things I

419
00:17:35,809 --> 00:17:37,160
think about when I think about pushing

420
00:17:37,160 --> 00:17:40,130
things upstream from my app so this is

421
00:17:40,130 --> 00:17:43,160
the this is a well-understood model if

422
00:17:43,160 --> 00:17:44,710
you're writing node

423
00:17:44,710 --> 00:17:47,200
replace the word client with server if

424
00:17:47,200 --> 00:17:48,970
you're writing browser-based code you

425
00:17:48,970 --> 00:17:50,799
always sort of understand that you

426
00:17:50,799 --> 00:17:52,390
interoperate with AP is that our

427
00:17:52,390 --> 00:17:55,419
upstream from you so you your

428
00:17:55,419 --> 00:17:58,210
application sits below sort of the

429
00:17:58,210 --> 00:18:01,210
client and the the goal being to take

430
00:18:01,210 --> 00:18:02,710
things that are repetitive or that are

431
00:18:02,710 --> 00:18:05,260
causing pain or that make things painful

432
00:18:05,260 --> 00:18:07,990
for new developers on your team and put

433
00:18:07,990 --> 00:18:11,679
it in between your the client and the

434
00:18:11,679 --> 00:18:15,039
application so that if you're writing a

435
00:18:15,039 --> 00:18:17,559
sort of a sovereign framework then you

436
00:18:17,559 --> 00:18:19,419
sort of constancy start to consider that

437
00:18:19,419 --> 00:18:25,240
your application is interfacing with

438
00:18:25,240 --> 00:18:28,899
this framework and then that hides stuff

439
00:18:28,899 --> 00:18:30,700
from the client right like the

440
00:18:30,700 --> 00:18:32,320
application almost never talks to

441
00:18:32,320 --> 00:18:34,419
directly to the client for stuff anymore

442
00:18:34,419 --> 00:18:36,190
it talks to the framework if you're just

443
00:18:36,190 --> 00:18:39,250
building if you go back to the examples

444
00:18:39,250 --> 00:18:41,140
with sending email right like maybe your

445
00:18:41,140 --> 00:18:43,240
app no longer ever talks to the message

446
00:18:43,240 --> 00:18:45,760
queue it never talks to the statistic

447
00:18:45,760 --> 00:18:48,669
subsystem it always just talks to the

448
00:18:48,669 --> 00:18:50,080
framework that handles that stuff for

449
00:18:50,080 --> 00:18:54,039
you the goal is just to find pieces that

450
00:18:54,039 --> 00:18:58,210
need to be up leveled so look for code

451
00:18:58,210 --> 00:18:59,919
that's being repeated at every every

452
00:18:59,919 --> 00:19:04,090
turn things that are repeated multiple

453
00:19:04,090 --> 00:19:06,970
times and are consistently hard pieces

454
00:19:06,970 --> 00:19:09,399
that caused problems for new developers

455
00:19:09,399 --> 00:19:12,549
if you know if the new guy if every time

456
00:19:12,549 --> 00:19:13,779
there's a new guy for the first month

457
00:19:13,779 --> 00:19:16,390
they write bugs and X X could probably

458
00:19:16,390 --> 00:19:19,539
be moved upstream and made easier right

459
00:19:19,539 --> 00:19:21,640
you could make doing something hard easy

460
00:19:21,640 --> 00:19:25,029
for people if you're going after domain

461
00:19:25,029 --> 00:19:27,340
specific problems think about the domain

462
00:19:27,340 --> 00:19:28,720
specific solutions that your company

463
00:19:28,720 --> 00:19:30,220
offers are that your application offers

464
00:19:30,220 --> 00:19:33,039
over its competitors so if you're trying

465
00:19:33,039 --> 00:19:34,630
to not reinvent things that have been

466
00:19:34,630 --> 00:19:37,480
invented elsewhere you know what are the

467
00:19:37,480 --> 00:19:45,270
things that set your appt apart one

468
00:19:45,270 --> 00:19:48,210
really convenient place I've found to

469
00:19:48,210 --> 00:19:50,440
start thinking about what things need to

470
00:19:50,440 --> 00:19:52,539
be moved upstream from the application

471
00:19:52,539 --> 00:19:55,240
is well sort of two pieces it's in

472
00:19:55,240 --> 00:19:56,780
testing so

473
00:19:56,780 --> 00:19:58,310
for one for one thing you should always

474
00:19:58,310 --> 00:20:00,170
consider your test downstream from your

475
00:20:00,170 --> 00:20:02,990
app if your if your tests are sort of

476
00:20:02,990 --> 00:20:06,170
just a part of your app you're probably

477
00:20:06,170 --> 00:20:08,030
going about it slightly wrong and

478
00:20:08,030 --> 00:20:09,220
especially if you find yourself

479
00:20:09,220 --> 00:20:11,390
modifying application code for the sake

480
00:20:11,390 --> 00:20:17,930
of testing so this is both a good way to

481
00:20:17,930 --> 00:20:19,430
begin thinking about the boundaries

482
00:20:19,430 --> 00:20:21,980
between components but it's also a good

483
00:20:21,980 --> 00:20:24,260
way to find things that could be moved

484
00:20:24,260 --> 00:20:26,300
upstream from the app so if there's

485
00:20:26,300 --> 00:20:27,770
something that needs to be mocked in

486
00:20:27,770 --> 00:20:29,630
every test it should probably be

487
00:20:29,630 --> 00:20:32,510
upstream and then just the framework

488
00:20:32,510 --> 00:20:34,970
tier needs to be mocked if there's

489
00:20:34,970 --> 00:20:37,880
something that the setup function in

490
00:20:37,880 --> 00:20:40,250
every test does then whatever that's

491
00:20:40,250 --> 00:20:42,350
doing can probably be moved upstream

492
00:20:42,350 --> 00:20:43,730
from your application and then that

493
00:20:43,730 --> 00:20:45,710
framework can be tested and then all the

494
00:20:45,710 --> 00:20:47,150
other applications within your

495
00:20:47,150 --> 00:20:49,460
organization don't need to do that

496
00:20:49,460 --> 00:20:51,170
duplication in their tests they just

497
00:20:51,170 --> 00:20:56,680
need to use that framework so that's

498
00:20:56,680 --> 00:20:59,540
reading code and that's how I out some

499
00:20:59,540 --> 00:21:02,390
sort of pragmatic tips around how I

500
00:21:02,390 --> 00:21:05,210
think about beginning to separate how to

501
00:21:05,210 --> 00:21:07,070
move how to begin moving things upstream

502
00:21:07,070 --> 00:21:09,710
from your application and now it's sort

503
00:21:09,710 --> 00:21:14,360
of the art piece of it so when deciding

504
00:21:14,360 --> 00:21:15,740
what opinions to express from a

505
00:21:15,740 --> 00:21:18,800
framework you're basically deciding what

506
00:21:18,800 --> 00:21:21,710
complexity to push downstream so every

507
00:21:21,710 --> 00:21:25,580
time you separate a new component and

508
00:21:25,580 --> 00:21:27,290
you say this thing is only concerned

509
00:21:27,290 --> 00:21:31,040
with this one task you're essentially

510
00:21:31,040 --> 00:21:34,520
pushing complexity into someone

511
00:21:34,520 --> 00:21:37,130
downstream so the fewer opinions your

512
00:21:37,130 --> 00:21:38,930
framework expresses the more complexity

513
00:21:38,930 --> 00:21:41,930
you're pushing to the implementer so

514
00:21:41,930 --> 00:21:44,060
this this is a system that has very few

515
00:21:44,060 --> 00:21:45,440
opinions right each of these things is

516
00:21:45,440 --> 00:21:46,940
isolated it has its own separate

517
00:21:46,940 --> 00:21:48,740
concerned but everything else that needs

518
00:21:48,740 --> 00:21:50,840
to have anything to do with that concern

519
00:21:50,840 --> 00:21:52,670
takes on the complexity of connecting

520
00:21:52,670 --> 00:21:55,430
all the different pieces whereas this is

521
00:21:55,430 --> 00:21:57,650
something that's quite opinionated right

522
00:21:57,650 --> 00:22:00,290
so yes internally these things are

523
00:22:00,290 --> 00:22:01,880
connected to one another and they're

524
00:22:01,880 --> 00:22:03,440
coupled they are coupled it's just a

525
00:22:03,440 --> 00:22:05,270
fact they're pieces of your of your

526
00:22:05,270 --> 00:22:06,980
framework are going to be coupled but

527
00:22:06,980 --> 00:22:10,130
the interface that they push out to

528
00:22:10,130 --> 00:22:10,929
consume

529
00:22:10,929 --> 00:22:14,660
allows them to allows those consumers to

530
00:22:14,660 --> 00:22:18,710
take on less complexity so just go in

531
00:22:18,710 --> 00:22:21,830
with eyes open about that and there

532
00:22:21,830 --> 00:22:24,470
there's a whole range of these in the

533
00:22:24,470 --> 00:22:28,150
JavaScript world as things exist so

534
00:22:28,150 --> 00:22:30,799
backbone philosophically doesn't take on

535
00:22:30,799 --> 00:22:33,110
many opinions it's the goal was not to

536
00:22:33,110 --> 00:22:35,570
make application development easy the

537
00:22:35,570 --> 00:22:38,720
goal for them was to take to make a set

538
00:22:38,720 --> 00:22:40,520
of components that every web app needs

539
00:22:40,520 --> 00:22:42,350
so they were trying to find the minimum

540
00:22:42,350 --> 00:22:45,559
viable set that are generically useful

541
00:22:45,559 --> 00:22:48,770
all web apps need x y and z whereas on

542
00:22:48,770 --> 00:22:50,540
the other end of that opinion spectrum

543
00:22:50,540 --> 00:22:53,390
is something like ember where their goal

544
00:22:53,390 --> 00:22:57,770
was to codify common idioms so this is

545
00:22:57,770 --> 00:22:59,690
the one true way that we've decided that

546
00:22:59,690 --> 00:23:01,790
framework has decided that you need to

547
00:23:01,790 --> 00:23:04,730
go about doing things and then you only

548
00:23:04,730 --> 00:23:06,320
focus on what differentiates you are at

549
00:23:06,320 --> 00:23:09,110
from other apps so there they've been

550
00:23:09,110 --> 00:23:10,460
quite opinionated about their framework

551
00:23:10,460 --> 00:23:16,100
and that all essentially comes back to

552
00:23:16,100 --> 00:23:18,590
you know if you're writing backbone code

553
00:23:18,590 --> 00:23:21,410
and your controller needs to take on

554
00:23:21,410 --> 00:23:23,510
multiple pieces from your model and then

555
00:23:23,510 --> 00:23:25,880
push things out to views whereas ember

556
00:23:25,880 --> 00:23:28,340
might automatically connect the route

557
00:23:28,340 --> 00:23:31,730
Model View and controller during its

558
00:23:31,730 --> 00:23:43,070
bootstrap phase so JavaScript

559
00:23:43,070 --> 00:23:46,700
specifically I think we're an

560
00:23:46,700 --> 00:23:52,799
interesting position as a community

561
00:23:52,809 --> 00:23:55,280
historically it's people have been

562
00:23:55,280 --> 00:23:57,200
interested in languages that are either

563
00:23:57,200 --> 00:24:01,790
server only or client only so for a long

564
00:24:01,790 --> 00:24:02,990
time we weren't doing a whole lot of

565
00:24:02,990 --> 00:24:04,429
heavy lifting in decline at all and you

566
00:24:04,429 --> 00:24:06,410
had a couple of different languages but

567
00:24:06,410 --> 00:24:11,870
it was Java Ruby Python PHP and I assume

568
00:24:11,870 --> 00:24:15,020
Java was the first one to do it fairly

569
00:24:15,020 --> 00:24:20,300
well where you would implement a Model

570
00:24:20,300 --> 00:24:22,400
View controller on the server and then

571
00:24:22,400 --> 00:24:23,929
use the client is essentially

572
00:24:23,929 --> 00:24:26,029
done paint and that's how the web's the

573
00:24:26,029 --> 00:24:30,440
web worked for just a very long time so

574
00:24:30,440 --> 00:24:32,720
the the server is where all the business

575
00:24:32,720 --> 00:24:34,820
logic is performed data is sent to the

576
00:24:34,820 --> 00:24:37,039
client and it's used to paint that that

577
00:24:37,039 --> 00:24:38,899
data and then it also has some concerns

578
00:24:38,899 --> 00:24:40,759
around user input right the user clicked

579
00:24:40,759 --> 00:24:43,970
on position to 39 x 48 and that's a

580
00:24:43,970 --> 00:24:46,580
button so we're going to send this the

581
00:24:46,580 --> 00:24:48,649
information about the the form that

582
00:24:48,649 --> 00:24:50,869
we're going to send a post thats related

583
00:24:50,869 --> 00:24:53,090
to that form back to the server and then

584
00:24:53,090 --> 00:24:55,070
the server recalculates what it needs to

585
00:24:55,070 --> 00:24:56,389
draw in response to that and sends it

586
00:24:56,389 --> 00:24:59,179
back for another paint then we started

587
00:24:59,179 --> 00:25:03,830
doing sort of single page apps or doing

588
00:25:03,830 --> 00:25:06,110
a lot of heavy lifting on the the client

589
00:25:06,110 --> 00:25:07,999
and we realized we could do a lot of our

590
00:25:07,999 --> 00:25:09,830
JavaScript had become good enough or

591
00:25:09,830 --> 00:25:11,029
maybe it was good enough all along I'm

592
00:25:11,029 --> 00:25:13,039
not sure but we had it had become good

593
00:25:13,039 --> 00:25:14,210
enough that we can begin doing our

594
00:25:14,210 --> 00:25:17,559
business logic in the in the client and

595
00:25:17,559 --> 00:25:19,759
we began to use the server as

596
00:25:19,759 --> 00:25:22,129
essentially a dump data store so it's

597
00:25:22,129 --> 00:25:23,840
it's there for persistence you know the

598
00:25:23,840 --> 00:25:25,399
user has done some things our model has

599
00:25:25,399 --> 00:25:27,409
changed let's sync it you know it's

600
00:25:27,409 --> 00:25:29,960
essentially a sink call the business

601
00:25:29,960 --> 00:25:32,059
logic is a base is essentially contained

602
00:25:32,059 --> 00:25:34,940
inside the the client and this is not

603
00:25:34,940 --> 00:25:36,980
entirely true if you were doing more

604
00:25:36,980 --> 00:25:38,990
complex stuff on top of that data sync

605
00:25:38,990 --> 00:25:40,789
right like if your server was doing some

606
00:25:40,789 --> 00:25:42,649
hard number crunching you could have

607
00:25:42,649 --> 00:25:45,289
things in the server but by and large

608
00:25:45,289 --> 00:25:49,309
for simple crud apps that were doing

609
00:25:49,309 --> 00:25:51,919
heavy lifting in the client the data was

610
00:25:51,919 --> 00:25:53,509
just or the server was just there for

611
00:25:53,509 --> 00:26:00,139
data access and persistence and now now

612
00:26:00,139 --> 00:26:04,220
we're building things in node and well

613
00:26:04,220 --> 00:26:07,460
this is splat side NBC but really it's

614
00:26:07,460 --> 00:26:10,340
it's splat side splat right does it need

615
00:26:10,340 --> 00:26:12,230
to be MVC I don't think we're all

616
00:26:12,230 --> 00:26:14,389
convinced or at least I hope no one's

617
00:26:14,389 --> 00:26:17,419
convinced one because NBC is sort of a

618
00:26:17,419 --> 00:26:21,740
bad term and otherwise because I don't

619
00:26:21,740 --> 00:26:22,850
think we found I don't think we've

620
00:26:22,850 --> 00:26:26,179
arrived I don't think we're there yet so

621
00:26:26,179 --> 00:26:27,980
I think that the JavaScript community is

622
00:26:27,980 --> 00:26:32,149
uniquely positioned itself because we're

623
00:26:32,149 --> 00:26:33,649
comfortable writing code both on the

624
00:26:33,649 --> 00:26:36,580
server and on the client

625
00:26:36,580 --> 00:26:39,830
we have an opportunity to build complete

626
00:26:39,830 --> 00:26:42,669
into in solutions to a problem that's

627
00:26:42,669 --> 00:26:45,320
consistently hard and we have the

628
00:26:45,320 --> 00:26:47,299
opportunity to make that easy and it's

629
00:26:47,299 --> 00:26:48,919
essentially if I make writing code that

630
00:26:48,919 --> 00:26:52,580
can run in either place I think that

631
00:26:52,580 --> 00:26:53,989
meteor and Derby are the closest

632
00:26:53,989 --> 00:26:57,139
approximations to this so far I don't

633
00:26:57,139 --> 00:26:59,239
think that neither of those projects are

634
00:26:59,239 --> 00:27:02,809
done by their creators standards so you

635
00:27:02,809 --> 00:27:04,610
can go get involved in them or you can

636
00:27:04,610 --> 00:27:05,749
begin writing frameworks that are

637
00:27:05,749 --> 00:27:08,720
similar to them so we're still driving

638
00:27:08,720 --> 00:27:10,340
towards solutions and I don't think

639
00:27:10,340 --> 00:27:15,320
anyone thinks that we've arrived but go

640
00:27:15,320 --> 00:27:16,519
take a look at one of those if you

641
00:27:16,519 --> 00:27:19,519
haven't already they're essentially

642
00:27:19,519 --> 00:27:22,669
doing you know major major pieces of the

643
00:27:22,669 --> 00:27:24,320
lifting on both sides depending on what

644
00:27:24,320 --> 00:27:26,629
you want to do there are also some

645
00:27:26,629 --> 00:27:28,639
components that are doing things quite

646
00:27:28,639 --> 00:27:33,440
well doing one thing quite well and have

647
00:27:33,440 --> 00:27:35,119
the opportunity to evolve into the

648
00:27:35,119 --> 00:27:37,549
canonical way of doing something so

649
00:27:37,549 --> 00:27:39,289
reacts already been presented on here

650
00:27:39,289 --> 00:27:41,299
but it's something that does views very

651
00:27:41,299 --> 00:27:43,309
well and it's a new approach to drawing

652
00:27:43,309 --> 00:27:48,200
the view with the virtual Dom I couldn't

653
00:27:48,200 --> 00:27:52,700
find a logo for 4q but venable promises

654
00:27:52,700 --> 00:27:55,100
are coming about as a new and interests

655
00:27:55,100 --> 00:27:56,629
or not new but they're an interesting

656
00:27:56,629 --> 00:27:58,999
way of going about doing a sink

657
00:27:58,999 --> 00:28:02,239
programming and a node the node devs

658
00:28:02,239 --> 00:28:04,850
have opinions about that but it's

659
00:28:04,850 --> 00:28:06,409
certainly a new and it and an

660
00:28:06,409 --> 00:28:08,119
interesting way of going about acing

661
00:28:08,119 --> 00:28:11,840
programming moment is obviously it like

662
00:28:11,840 --> 00:28:16,700
of the things that do that do times it's

663
00:28:16,700 --> 00:28:18,350
probably the one doing it the best at

664
00:28:18,350 --> 00:28:21,080
this point and if a framework comes

665
00:28:21,080 --> 00:28:23,210
along that needs to draw to the dom

666
00:28:23,210 --> 00:28:25,039
maybe it'll take on react is the

667
00:28:25,039 --> 00:28:27,259
canonical way if at some point the

668
00:28:27,259 --> 00:28:28,759
community decides that that's a great

669
00:28:28,759 --> 00:28:32,330
way to do it I'm pretty consistently

670
00:28:32,330 --> 00:28:35,840
using venable promises in in all of my

671
00:28:35,840 --> 00:28:38,119
code just because I'm fairly sure it's

672
00:28:38,119 --> 00:28:40,489
better than callback passing to method

673
00:28:40,489 --> 00:28:44,090
to methods but I guess what I want to

674
00:28:44,090 --> 00:28:45,919
say about that is that if we move into a

675
00:28:45,919 --> 00:28:47,269
space where we're solving into n

676
00:28:47,269 --> 00:28:48,679
solutions will need

677
00:28:48,679 --> 00:28:50,629
solutions to these individual problems

678
00:28:50,629 --> 00:28:53,570
that are quite good and we may be

679
00:28:53,570 --> 00:28:56,960
getting close to some of those so if you

680
00:28:56,960 --> 00:28:58,220
if you decide to write a framework

681
00:28:58,220 --> 00:28:59,720
that's going to be exposed to the rest

682
00:28:59,720 --> 00:29:03,379
of the world go about doing the

683
00:29:03,379 --> 00:29:06,919
individual things well go consume pieces

684
00:29:06,919 --> 00:29:08,240
that already exist on the web and are

