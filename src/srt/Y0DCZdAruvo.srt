1
00:00:37,660 --> 00:00:40,969

my talk for today is front end up

2
00:00:40,969 --> 00:00:44,510
sterling I'm nikka you can find me on to

3
00:00:44,510 --> 00:00:48,170
your ass and such gb i posted the slides

4
00:00:48,170 --> 00:00:51,109
online for you to see I'm be back when

5
00:00:51,109 --> 00:00:53,480
did have and i have a blog at and

6
00:00:53,480 --> 00:00:57,620
panning for calm i'm also writing a book

7
00:00:57,620 --> 00:00:59,539
it's called a javascript application

8
00:00:59,539 --> 00:01:05,000
design all right about processes how to

9
00:01:05,000 --> 00:01:07,700
write modular applications there are

10
00:01:07,700 --> 00:01:11,360
testable and it comes with a lot of code

11
00:01:11,360 --> 00:01:14,060
samples that are fully documented you

12
00:01:14,060 --> 00:01:17,899
can look at here's the disc and God if

13
00:01:17,899 --> 00:01:19,880
you're interested just go to that URL

14
00:01:19,880 --> 00:01:24,590
and check out with it so for today's

15
00:01:24,590 --> 00:01:27,770
talk I'm going to talk about the reasons

16
00:01:27,770 --> 00:01:32,540
to build and the development flow I'm

17
00:01:32,540 --> 00:01:36,829
going to talk about how to put together

18
00:01:36,829 --> 00:01:38,960
a development flow that works for you

19
00:01:38,960 --> 00:01:42,049
and which tools you could use and I'm

20
00:01:42,049 --> 00:01:43,820
going to talk about the different kind

21
00:01:43,820 --> 00:01:46,340
of tasks that you can perform with those

22
00:01:46,340 --> 00:01:49,070
tools also i'm going to talk about

23
00:01:49,070 --> 00:01:52,009
molarity and in particular and when they

24
00:01:52,009 --> 00:01:54,649
talk about had to bring molarity into

25
00:01:54,649 --> 00:01:59,299
the browser so the first question I have

26
00:01:59,299 --> 00:02:03,200
is why build and more importantly why

27
00:02:03,200 --> 00:02:05,750
build first rather than somewhere down

28
00:02:05,750 --> 00:02:09,220
the line and the reasons for these are

29
00:02:09,220 --> 00:02:14,410
process productivity and performance

30
00:02:14,420 --> 00:02:17,610
process really means that you are able

31
00:02:17,610 --> 00:02:21,570
to automate animation really is all

32
00:02:21,570 --> 00:02:24,920
about reducing and eliminating

33
00:02:24,920 --> 00:02:31,230
repetitive work and it also means it

34
00:02:31,230 --> 00:02:34,950
also helps you to reduce human for

35
00:02:34,950 --> 00:02:37,230
instance if you go to that link you'll

36
00:02:37,230 --> 00:02:40,380
find the story about the company who

37
00:02:40,380 --> 00:02:44,070
work on the stock exchange and they had

38
00:02:44,070 --> 00:02:48,300
one guy doing deployments on nine

39
00:02:48,300 --> 00:02:51,090
different boxes and he did it by hand on

40
00:02:51,090 --> 00:02:55,610
each one of those and they also had

41
00:02:55,610 --> 00:02:58,380
coding production that was ten year old

42
00:02:58,380 --> 00:03:02,370
and they didn't use it and it was shot

43
00:03:02,370 --> 00:03:06,720
serum behind a flag and they pushed some

44
00:03:06,720 --> 00:03:08,760
new code to eight of those nine

45
00:03:08,760 --> 00:03:11,600
instances because he just forgot one and

46
00:03:11,600 --> 00:03:17,370
and he he forgot to reply to that one

47
00:03:17,370 --> 00:03:20,430
and the issue was that the new code was

48
00:03:20,430 --> 00:03:23,400
behind this old flag that they just

49
00:03:23,400 --> 00:03:27,290
changed to do something else but in the

50
00:03:27,290 --> 00:03:30,950
ninth box it still did the same thing

51
00:03:30,950 --> 00:03:34,980
and so they started losing money because

52
00:03:34,980 --> 00:03:38,070
they were they were making batter

53
00:03:38,070 --> 00:03:42,150
requests and and they tried to figure

54
00:03:42,150 --> 00:03:43,860
out what the issue was Anna and they

55
00:03:43,860 --> 00:03:45,690
thought it was in the new in the new

56
00:03:45,690 --> 00:03:48,570
code so they started rolling that back

57
00:03:48,570 --> 00:03:50,310
and they started losing more and more

58
00:03:50,310 --> 00:03:53,520
money and they went bankrupt in like 30

59
00:03:53,520 --> 00:03:55,620
minutes they lost half a billion dollars

60
00:03:55,620 --> 00:03:58,410
so like I said you're reduces human or

61
00:03:58,410 --> 00:04:02,700
any eliminates repetitive work animation

62
00:04:02,700 --> 00:04:05,520
is also productivity for you because if

63
00:04:05,520 --> 00:04:08,840
you are automating you are able to do

64
00:04:08,840 --> 00:04:11,989
continuously development for example

65
00:04:11,989 --> 00:04:15,090
whenever a file changes you run your

66
00:04:15,090 --> 00:04:17,970
tests again or your build again so that

67
00:04:17,970 --> 00:04:20,010
you are able to develop we are going

68
00:04:20,010 --> 00:04:23,760
back and forth and you can also set that

69
00:04:23,760 --> 00:04:28,229
up on the cloud and do continuous

70
00:04:28,229 --> 00:04:30,419
integration which is pretty much the

71
00:04:30,419 --> 00:04:33,500
same same but either it on the cloud and

72
00:04:33,500 --> 00:04:35,850
rather than do it whenever a file

73
00:04:35,850 --> 00:04:37,910
changes in your local system is it

74
00:04:37,910 --> 00:04:42,300
whenever someone pushes new car to to

75
00:04:42,300 --> 00:04:46,770
your little Reaper for instance and that

76
00:04:46,770 --> 00:04:49,880
also enables you to do deployments

77
00:04:49,880 --> 00:04:52,320
automatically if those builds pass in

78
00:04:52,320 --> 00:04:59,370
the cloud under social performance you

79
00:04:59,370 --> 00:05:02,430
get almost for free compiling bundling

80
00:05:02,430 --> 00:05:07,950
minifying spriting and acid hashing

81
00:05:07,950 --> 00:05:13,280
which are all almost free if you are

82
00:05:13,280 --> 00:05:16,979
doing built first and if you're not you

83
00:05:16,979 --> 00:05:19,560
might have to move things around a

84
00:05:19,560 --> 00:05:21,150
little bit too if you're and how exactly

85
00:05:21,150 --> 00:05:24,240
to make those into what you are already

86
00:05:24,240 --> 00:05:28,530
doing and all of this gives you faster

87
00:05:28,530 --> 00:05:32,940
response times which means your goal of

88
00:05:32,940 --> 00:05:37,289
making humans happier will be easier to

89
00:05:37,289 --> 00:05:42,270
thing so what tools am I going to talk

90
00:05:42,270 --> 00:05:46,500
about in the old days we shall see used

91
00:05:46,500 --> 00:05:50,250
to have tools like make and which were

92
00:05:50,250 --> 00:05:54,990
really more of general purpose kind of

93
00:05:54,990 --> 00:05:57,630
tools and now we have tools there are

94
00:05:57,630 --> 00:05:59,490
more oriented to front-end developers

95
00:05:59,490 --> 00:06:05,250
such as NPM grunt gulp Yemen and a bunch

96
00:06:05,250 --> 00:06:07,650
of father's right that you know probably

97
00:06:07,650 --> 00:06:10,380
even know their names so I'll just focus

98
00:06:10,380 --> 00:06:13,950
on NPM bullpen grant but really you

99
00:06:13,950 --> 00:06:17,280
should choose your own tooling and I'll

100
00:06:17,280 --> 00:06:19,620
just talk about this free because they

101
00:06:19,620 --> 00:06:22,470
are the ones that I use but you should

102
00:06:22,470 --> 00:06:26,250
find the tools that fit what you need to

103
00:06:26,250 --> 00:06:29,720
do so grunt

104
00:06:29,720 --> 00:06:32,450
grant is a configuration driven bill

105
00:06:32,450 --> 00:06:36,530
till it's easy to configure you just

106
00:06:36,530 --> 00:06:40,250
write a big JSON object actually it's

107
00:06:40,250 --> 00:06:43,550
not Jason you just write the big o

108
00:06:43,550 --> 00:06:46,280
checked with maybe a couple functions or

109
00:06:46,280 --> 00:06:48,800
options or wherever and you can figure

110
00:06:48,800 --> 00:06:52,340
the different tasks which are made into

111
00:06:52,340 --> 00:06:55,760
plugins endorse a whole bunch of clients

112
00:06:55,760 --> 00:06:59,860
there's like thousands of those so you

113
00:06:59,860 --> 00:07:04,640
can write also your own tasks because it

114
00:07:04,640 --> 00:07:06,560
just shall escape you write the function

115
00:07:06,560 --> 00:07:10,580
and that's a task the issue with grant

116
00:07:10,580 --> 00:07:13,370
is that the flow tends to get to burbles

117
00:07:13,370 --> 00:07:16,340
if you are trying to do something rather

118
00:07:16,340 --> 00:07:20,150
large in your builds because to run a

119
00:07:20,150 --> 00:07:22,820
single commenting your shell with grant

120
00:07:22,820 --> 00:07:25,690
maybe it takes like six lines of code

121
00:07:25,690 --> 00:07:29,600
and it's not so fast as the alternatives

122
00:07:29,600 --> 00:07:34,669
maybe maybe but the truth is that during

123
00:07:34,669 --> 00:07:36,440
builds unless you are going for

124
00:07:36,440 --> 00:07:38,660
continuous development which you should

125
00:07:38,660 --> 00:07:44,030
is it's not such big of a deal if the

126
00:07:44,030 --> 00:07:47,780
bill takes a little longer so to install

127
00:07:47,780 --> 00:07:50,330
grunt all you need to do is have a

128
00:07:50,330 --> 00:07:54,800
package.json file the the CLI and the

129
00:07:54,800 --> 00:07:58,580
local grant installation and then you

130
00:07:58,580 --> 00:08:02,240
have to create a grunt file and I'm

131
00:08:02,240 --> 00:08:05,080
going to show you how to do that using

132
00:08:05,080 --> 00:08:09,530
by creating a a grunt file that turns a

133
00:08:09,530 --> 00:08:13,130
few icons into spreadsheet so here's a

134
00:08:13,130 --> 00:08:17,240
grunt file that does nothing mile

135
00:08:17,240 --> 00:08:20,410
exports is the camassia syntax for

136
00:08:20,410 --> 00:08:24,229
exposing an API in email and in

137
00:08:24,229 --> 00:08:26,240
comerciais every file is a mile I'll

138
00:08:26,240 --> 00:08:30,979
talk about that a little more later so

139
00:08:30,979 --> 00:08:36,520
here I am loading a plugin with grant

140
00:08:36,520 --> 00:08:39,349
and I'm initializing it with some

141
00:08:39,349 --> 00:08:41,570
configuration telling it where the icons

142
00:08:41,570 --> 00:08:43,200
are going to be were

143
00:08:43,200 --> 00:08:46,650
the sprite sheet is going to be placed

144
00:08:46,650 --> 00:08:50,190
and then where I want the CSS to be

145
00:08:50,190 --> 00:08:53,670
placed too and I just run grunts pride

146
00:08:53,670 --> 00:08:56,490
and I get my icons so it looks kind of

147
00:08:56,490 --> 00:08:59,330
like this maybe the designer gave me a

148
00:08:59,330 --> 00:09:02,130
bunch of icons and threw them in a

149
00:09:02,130 --> 00:09:05,130
directory and I can't just automate the

150
00:09:05,130 --> 00:09:07,320
process of creating the spreadsheet

151
00:09:07,320 --> 00:09:09,030
which may be in the old days you would

152
00:09:09,030 --> 00:09:13,500
just make it yourself for us your

153
00:09:13,500 --> 00:09:15,990
designer to that it was a really painful

154
00:09:15,990 --> 00:09:19,530
process right and you can also do way

155
00:09:19,530 --> 00:09:22,290
more complicated stuff we grant how many

156
00:09:22,290 --> 00:09:26,300
of you have used amazon ec2 for instance

157
00:09:26,300 --> 00:09:31,110
okay a few so Amazon ec2 is a hosting

158
00:09:31,110 --> 00:09:34,140
environment and you can automate the

159
00:09:34,140 --> 00:09:38,130
deployment to that as well using grant i

160
00:09:38,130 --> 00:09:40,770
wrote a package for grant called grantee

161
00:09:40,770 --> 00:09:44,370
c2 which shots with your access key or

162
00:09:44,370 --> 00:09:46,890
secret access key and the fewer things

163
00:09:46,890 --> 00:09:50,340
it allows you to put together a build

164
00:09:50,340 --> 00:09:53,310
process that is able to spin up new

165
00:09:53,310 --> 00:09:57,030
grantee instances in this case for

166
00:09:57,030 --> 00:10:00,350
example i'm i'm building the whole

167
00:10:00,350 --> 00:10:05,520
distribution I'm making here i'm making

168
00:10:05,520 --> 00:10:09,570
a message for the release in my change

169
00:10:09,570 --> 00:10:12,810
log and then the grantee see to baggage

170
00:10:12,810 --> 00:10:18,010
will enable me to prohibition and

171
00:10:18,020 --> 00:10:21,240
british on the amazon ec2 instance with

172
00:10:21,240 --> 00:10:25,950
engine acts now the works and then it'll

173
00:10:25,950 --> 00:10:29,070
allow me to push too easy to the changes

174
00:10:29,070 --> 00:10:31,560
that I made since the last release with

175
00:10:31,560 --> 00:10:35,520
rsync another little just install my

176
00:10:35,520 --> 00:10:38,400
dependencies again restore tension

177
00:10:38,400 --> 00:10:43,140
headaches on NPM and I said I'm not

178
00:10:43,140 --> 00:10:46,010
going to make you watch the whole thing

179
00:10:46,010 --> 00:10:51,120
um and the North gulp which is similar

180
00:10:51,120 --> 00:10:54,060
to grant where it's code ribbon so it's

181
00:10:54,060 --> 00:10:56,630
a little leaner you're just writing code

182
00:10:56,630 --> 00:10:59,460
but it still works with this plugin

183
00:10:59,460 --> 00:11:03,089
concept there's hundreds because it's

184
00:11:03,089 --> 00:11:05,820
newer than rent but it's against as

185
00:11:05,820 --> 00:11:09,120
JavaScript so you can really build your

186
00:11:09,120 --> 00:11:12,390
own gulp tasks the issue with gulp is

187
00:11:12,390 --> 00:11:16,770
that it comes with the concept of pipes

188
00:11:16,770 --> 00:11:20,160
streams and asynchronous code which are

189
00:11:20,160 --> 00:11:23,160
all very no the concepts and if you're

190
00:11:23,160 --> 00:11:25,529
not enough developer you might have an

191
00:11:25,529 --> 00:11:29,250
issue with that but it's faster than

192
00:11:29,250 --> 00:11:32,700
grant so there's that to install go it's

193
00:11:32,700 --> 00:11:34,620
pretty much the same as we grant you

194
00:11:34,620 --> 00:11:37,710
should need the package.json god locally

195
00:11:37,710 --> 00:11:41,700
and globally and that's it here I'll

196
00:11:41,700 --> 00:11:43,230
show you how to build something with

197
00:11:43,230 --> 00:11:46,950
gold I hope you create a gold file and

198
00:11:46,950 --> 00:11:50,250
rather than require sorry rather than

199
00:11:50,250 --> 00:11:53,940
expose an API you require the API gulp

200
00:11:53,940 --> 00:11:57,810
exposes so here I mean to defining a

201
00:11:57,810 --> 00:12:01,560
task that does nothing and I can easily

202
00:12:01,560 --> 00:12:05,850
say okay I'll take this source file pipe

203
00:12:05,850 --> 00:12:09,750
that through uglify in memory and then

204
00:12:09,750 --> 00:12:15,089
push it to the desk a.m. and it's really

205
00:12:15,089 --> 00:12:17,820
easy to add more stuff into that because

206
00:12:17,820 --> 00:12:22,350
it's using streams so for instance if I

207
00:12:22,350 --> 00:12:25,200
wanted to print into the council d sighs

208
00:12:25,200 --> 00:12:28,650
I just other a new pipe statement and

209
00:12:28,650 --> 00:12:31,589
pipe that through the the corresponding

210
00:12:31,589 --> 00:12:34,830
gold plugin and I can also transform the

211
00:12:34,830 --> 00:12:38,640
file using her file for example in my

212
00:12:38,640 --> 00:12:41,820
license information and the version of

213
00:12:41,820 --> 00:12:45,390
the package and then I run it with gold

214
00:12:45,390 --> 00:12:49,620
build similarly to grant mpm is a bit

215
00:12:49,620 --> 00:12:52,070
different in that it's great the ribbon

216
00:12:52,070 --> 00:12:57,270
and there's barely any configuration you

217
00:12:57,270 --> 00:12:59,870
can use any NPM package that you want

218
00:12:59,870 --> 00:13:04,620
and it you can write in JavaScript if

219
00:13:04,620 --> 00:13:04,940
you

220
00:13:04,940 --> 00:13:07,580
I'm using certain Dino the environment

221
00:13:07,580 --> 00:13:12,200
the issue that is that bashes and so

222
00:13:12,200 --> 00:13:16,850
cross flood cross platform but if you

223
00:13:16,850 --> 00:13:20,390
have to work with Windows probably use

224
00:13:20,390 --> 00:13:23,930
something else and it's probably the

225
00:13:23,930 --> 00:13:25,700
fastest option of these three I

226
00:13:25,700 --> 00:13:29,330
mentioned so like I said there's no

227
00:13:29,330 --> 00:13:32,720
installation for mpm run you just need

228
00:13:32,720 --> 00:13:36,500
the baggage JSON file and then you add

229
00:13:36,500 --> 00:13:39,860
the scrapes key and in that I've checked

230
00:13:39,860 --> 00:13:44,690
every key is a command so here you could

231
00:13:44,690 --> 00:13:48,380
do npm wrong length and you use chasing

232
00:13:48,380 --> 00:13:51,320
to lend your directory the cool thing

233
00:13:51,320 --> 00:13:55,790
about 10pm run is that it smart enough

234
00:13:55,790 --> 00:13:59,240
to figure out if Shay a saint is

235
00:13:59,240 --> 00:14:01,220
installed locally as a development

236
00:14:01,220 --> 00:14:04,490
dependency for instance it will know to

237
00:14:04,490 --> 00:14:07,460
look at for it in no miles chess ain't

238
00:14:07,460 --> 00:14:11,300
been chase and so you need to install

239
00:14:11,300 --> 00:14:15,160
chase and globally for mpm run to work

240
00:14:15,160 --> 00:14:18,190
so you doing p.m. run linton that said

241
00:14:18,190 --> 00:14:20,660
but the point really is that it doesn't

242
00:14:20,660 --> 00:14:24,890
matter which tool you use as long as it

243
00:14:24,890 --> 00:14:27,020
doesn't the shop for you and it works

244
00:14:27,020 --> 00:14:30,830
for you and one last thing I wanted to

245
00:14:30,830 --> 00:14:36,140
talk about was molarity for the last

246
00:14:36,140 --> 00:14:38,180
year and a half or so i've been using

247
00:14:38,180 --> 00:14:43,100
NPM and and i entered in el community so

248
00:14:43,100 --> 00:14:47,060
to speak and i start caring so much

249
00:14:47,060 --> 00:14:50,150
about modules and writing code that

250
00:14:50,150 --> 00:14:53,990
that's one thing very well by one small

251
00:14:53,990 --> 00:14:57,830
thing so how can we bring that to the

252
00:14:57,830 --> 00:15:02,750
browser well we have comerciais right

253
00:15:02,750 --> 00:15:07,610
which is the node module system but we

254
00:15:07,610 --> 00:15:10,370
want that in the browser and that's

255
00:15:10,370 --> 00:15:13,220
where browser fagenson which basically

256
00:15:13,220 --> 00:15:16,339
will convert the commercials code into

257
00:15:16,339 --> 00:15:17,939
something the browser can run

258
00:15:17,939 --> 00:15:21,179
so what's commish is really my o'shea s

259
00:15:21,179 --> 00:15:24,029
is a mile system which says every file

260
00:15:24,029 --> 00:15:26,879
ismael miles have an implicit local

261
00:15:26,879 --> 00:15:29,029
scope which means you don't have to use

262
00:15:29,029 --> 00:15:32,599
weird closures and stuff you shall

263
00:15:32,599 --> 00:15:35,429
declare variables and if you want to

264
00:15:35,429 --> 00:15:37,709
expose something you have to use the

265
00:15:37,709 --> 00:15:42,329
global that explicit call they can also

266
00:15:42,329 --> 00:15:45,929
expose an API like we saw earlier same

267
00:15:45,929 --> 00:15:50,459
oil exports something am i loading sir

268
00:15:50,459 --> 00:15:54,749
and miles can require our meals using

269
00:15:54,749 --> 00:15:58,259
require likewise earlier am i loading is

270
00:15:58,259 --> 00:16:01,139
synchronous which means the module will

271
00:16:01,139 --> 00:16:06,419
be pulled in as as you require it and

272
00:16:06,419 --> 00:16:09,479
the arc difference with our module

273
00:16:09,479 --> 00:16:13,729
systems is that in in in this system you

274
00:16:13,729 --> 00:16:17,549
your modules are loaded in code rather

275
00:16:17,549 --> 00:16:21,470
than having to do like using stinemans

276
00:16:21,470 --> 00:16:24,629
and requiring our assemblies or stuff

277
00:16:24,629 --> 00:16:28,529
like that so here's an example

278
00:16:28,529 --> 00:16:31,409
comerciais file it declares a local

279
00:16:31,409 --> 00:16:34,799
variable experts a couple of methods in

280
00:16:34,799 --> 00:16:37,939
an API and then you can require it in

281
00:16:37,939 --> 00:16:41,819
set the status and pregnant in L you run

282
00:16:41,819 --> 00:16:44,579
that as need food right but that's

283
00:16:44,579 --> 00:16:47,699
that's not how you how do you bring that

284
00:16:47,699 --> 00:16:49,979
to the browser that's for browser

285
00:16:49,979 --> 00:16:52,829
handsome browser fine lines require

286
00:16:52,829 --> 00:16:55,169
calls meaning that it'll it'll figure

287
00:16:55,169 --> 00:16:58,069
out what you're trying to require and

288
00:16:58,069 --> 00:17:00,179
bundle everything together into a single

289
00:17:00,179 --> 00:17:03,899
file so that the browser doesn't who

290
00:17:03,899 --> 00:17:07,399
can't make the requests can work with it

291
00:17:07,399 --> 00:17:10,110
it poured no caramel hills to the

292
00:17:10,110 --> 00:17:12,990
browser so it's smart enough to work

293
00:17:12,990 --> 00:17:16,500
with noodle on HTTP and all of the our

294
00:17:16,500 --> 00:17:20,419
core modules in available to note

295
00:17:20,419 --> 00:17:23,009
non-conscious miles can be shamed so you

296
00:17:23,009 --> 00:17:25,980
don't have to go pester the guys who are

297
00:17:25,980 --> 00:17:28,199
writing your favorite libraries just

298
00:17:28,199 --> 00:17:31,140
because they don't support ricochets

299
00:17:31,140 --> 00:17:36,850
you can use any library you want we you

300
00:17:36,850 --> 00:17:39,310
just have to shame it which means you

301
00:17:39,310 --> 00:17:42,280
take the global that they declare and

302
00:17:42,280 --> 00:17:46,630
make that into module and it has access

303
00:17:46,630 --> 00:17:49,660
to all of em p.m. right which means you

304
00:17:49,660 --> 00:17:54,120
have you get access to a much broader

305
00:17:54,120 --> 00:17:58,600
community of JavaScript packages it

306
00:17:58,600 --> 00:18:01,480
shine light source maps which means your

307
00:18:01,480 --> 00:18:04,050
development process doesn't get affected

308
00:18:04,050 --> 00:18:08,410
at all and you can automate it away with

309
00:18:08,410 --> 00:18:14,740
a little sub so that's pretty much it so

310
00:18:14,740 --> 00:18:19,240
to run to bundle something through

311
00:18:19,240 --> 00:18:23,800
verify you need to use the CLI or it has

312
00:18:23,800 --> 00:18:27,220
a programmatic API as well and you can

313
00:18:27,220 --> 00:18:32,500
do browserify main and and hope that to

314
00:18:32,500 --> 00:18:35,950
a browser phase file and once you run

315
00:18:35,950 --> 00:18:40,030
that there you go you have conscious

316
00:18:40,030 --> 00:18:45,250
miles in the browser so to recap bill

317
00:18:45,250 --> 00:18:47,680
first rather than later this will set up

318
00:18:47,680 --> 00:18:51,280
a foundation for where where your

319
00:18:51,280 --> 00:18:54,430
application looks like and enable you to

320
00:18:54,430 --> 00:18:57,430
do less hacker stack down let's hack

321
00:18:57,430 --> 00:19:00,640
your staff down the road make tools work

322
00:19:00,640 --> 00:19:03,400
for you rather than trying to cram your

323
00:19:03,400 --> 00:19:05,230
whole process into a tool that doesn't

324
00:19:05,230 --> 00:19:08,320
really fit your needs and browserify all

325
00:19:08,320 --> 00:19:11,050
the things really I i believe browserify

326
00:19:11,050 --> 00:19:15,400
see member than yes six miles so moving

327
00:19:15,400 --> 00:19:17,740
forward I definitely think this is

328
00:19:17,740 --> 00:19:19,540
something we should be placing more

329
00:19:19,540 --> 00:20:02,420
weight on and that's what I had thanks

