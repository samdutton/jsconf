1
00:00:37,920 --> 00:00:40,810

so I'm Jeff Overton Facebook I work on

2
00:00:40,810 --> 00:00:43,480
our JavaScript infrastructure team which

3
00:00:43,480 --> 00:00:45,700
is just a weird way of saying that I

4
00:00:45,700 --> 00:00:48,460
work on JavaScript tools at Facebook and

5
00:00:48,460 --> 00:00:50,200
I'm here to talk to you about just which

6
00:00:50,200 --> 00:00:52,000
is a tool that we've had internally for

7
00:00:52,000 --> 00:00:54,250
actually kind of a couple years now we

8
00:00:54,250 --> 00:00:57,010
use it for testing and I thought it was

9
00:00:57,010 --> 00:00:59,800
really it's really useful and I open

10
00:00:59,800 --> 00:01:01,989
sourced it about two weeks ago mostly

11
00:01:01,989 --> 00:01:03,700
for selfish reasons because I wanted to

12
00:01:03,700 --> 00:01:05,740
use in my personal projects but you guys

13
00:01:05,740 --> 00:01:07,210
can play with it too because it's pretty

14
00:01:07,210 --> 00:01:10,060
cool I think so to start with like

15
00:01:10,060 --> 00:01:12,610
before we get into like what my one of

16
00:01:12,610 --> 00:01:13,930
the most interesting features of just is

17
00:01:13,930 --> 00:01:15,159
I want to go start from the beginning

18
00:01:15,159 --> 00:01:17,560
and talk about like how do like redesign

19
00:01:17,560 --> 00:01:19,750
apps as just like human beings right we

20
00:01:19,750 --> 00:01:22,330
see this app in our head and it's this

21
00:01:22,330 --> 00:01:24,240
vision and we have this idea of like

22
00:01:24,240 --> 00:01:26,080
visualizing this app from the users

23
00:01:26,080 --> 00:01:29,470
perspective but that's different from

24
00:01:29,470 --> 00:01:31,000
how you build the app the way you build

25
00:01:31,000 --> 00:01:32,470
the app is you actually break it down

26
00:01:32,470 --> 00:01:36,630
conceptually into smaller pieces and

27
00:01:36,630 --> 00:01:39,909
these little pieces help us like reason

28
00:01:39,909 --> 00:01:41,080
about the app as we go we can

29
00:01:41,080 --> 00:01:43,810
progressively iterate and like have a

30
00:01:43,810 --> 00:01:45,430
partial prototype that we can play with

31
00:01:45,430 --> 00:01:47,040
and iterate on and so forth and so on

32
00:01:47,040 --> 00:01:49,930
and the way that these pieces usually

33
00:01:49,930 --> 00:01:51,760
manifest themselves at least

34
00:01:51,760 --> 00:01:53,409
historically has been scripts but

35
00:01:53,409 --> 00:01:56,020
recently we have modules as well so we

36
00:01:56,020 --> 00:01:58,390
have these scripts this is this hammer

37
00:01:58,390 --> 00:02:00,759
that we've been given for however long

38
00:02:00,759 --> 00:02:02,830
JavaScript's been around and they're

39
00:02:02,830 --> 00:02:05,140
basically bags of statements and you put

40
00:02:05,140 --> 00:02:07,930
them in you know your HTML page and if

41
00:02:07,930 --> 00:02:09,399
you put a second script you have two

42
00:02:09,399 --> 00:02:11,910
scripts running together and

43
00:02:11,910 --> 00:02:13,200
one of the problems of the scripts is

44
00:02:13,200 --> 00:02:15,210
that they run in this global scope so

45
00:02:15,210 --> 00:02:18,240
they have this this disappointing nature

46
00:02:18,240 --> 00:02:20,490
of like potentially interfering with

47
00:02:20,490 --> 00:02:22,380
each other so really quickly to

48
00:02:22,380 --> 00:02:25,410
illustrate and a simple example let's

49
00:02:25,410 --> 00:02:27,300
say our app we want to be able to log in

50
00:02:27,300 --> 00:02:29,690
and we want to be able to quickly

51
00:02:29,690 --> 00:02:31,680
personalize the app and show the users

52
00:02:31,680 --> 00:02:33,600
name in the app say hello Jeff or

53
00:02:33,600 --> 00:02:36,120
whatever so we write a script it has

54
00:02:36,120 --> 00:02:39,570
this get user object function and it

55
00:02:39,570 --> 00:02:41,250
just talks to the Facebook API and like

56
00:02:41,250 --> 00:02:43,590
gets the the first name of the last name

57
00:02:43,590 --> 00:02:47,220
from the Facebook API this is cool so we

58
00:02:47,220 --> 00:02:49,050
built this we test it we integrate it

59
00:02:49,050 --> 00:02:51,030
with our UI we go play around the

60
00:02:51,030 --> 00:02:52,440
browser while before we check this whole

61
00:02:52,440 --> 00:02:55,350
thing in we try it right this is before

62
00:02:55,350 --> 00:02:57,390
we send their dip out for review or

63
00:02:57,390 --> 00:02:59,520
check it in and we make sure that when

64
00:02:59,520 --> 00:03:00,900
we actually this thing actually works

65
00:03:00,900 --> 00:03:03,420
like if you click login it actually gets

66
00:03:03,420 --> 00:03:05,070
some information from Facebook and says

67
00:03:05,070 --> 00:03:08,790
hello Jeff so that's great it's good we

68
00:03:08,790 --> 00:03:10,560
go on we build our app two months later

69
00:03:10,560 --> 00:03:11,880
we decide well not everybody has

70
00:03:11,880 --> 00:03:13,200
Facebook some people want to use Twitter

71
00:03:13,200 --> 00:03:15,450
some people don't like to use Facebook

72
00:03:15,450 --> 00:03:17,580
that's okay so we just want to get

73
00:03:17,580 --> 00:03:19,170
people's name so we can personalize our

74
00:03:19,170 --> 00:03:21,150
app and pull their name in so we go we

75
00:03:21,150 --> 00:03:23,970
build another library script file very

76
00:03:23,970 --> 00:03:26,730
similar almost identical except this

77
00:03:26,730 --> 00:03:28,260
time it's calling off to the Twitter API

78
00:03:28,260 --> 00:03:30,690
getting from the username and phone the

79
00:03:30,690 --> 00:03:32,540
first name and the last thing that way

80
00:03:32,540 --> 00:03:34,860
so we test this the same way we tested

81
00:03:34,860 --> 00:03:37,440
the Facebook script we go and we play

82
00:03:37,440 --> 00:03:38,760
with it we login with Twitter we see

83
00:03:38,760 --> 00:03:40,830
that says hello Jeff we're good we check

84
00:03:40,830 --> 00:03:43,440
it in we push it and all of a sudden all

85
00:03:43,440 --> 00:03:44,940
of our users start reporting they can't

86
00:03:44,940 --> 00:03:48,480
log in with Facebook damn it what

87
00:03:48,480 --> 00:03:58,550
happened was we over wrote Oh too far

88
00:03:58,560 --> 00:04:01,950
let's do that again

89
00:04:01,950 --> 00:04:04,780
we remember wrote that debt user object

90
00:04:04,780 --> 00:04:06,700
function we were so focused building our

91
00:04:06,700 --> 00:04:08,200
Twitter API library script that we

92
00:04:08,200 --> 00:04:09,430
forgot that we already had a function

93
00:04:09,430 --> 00:04:11,230
name that and scripts clobber each other

94
00:04:11,230 --> 00:04:12,579
but we weren't thinking about that we

95
00:04:12,579 --> 00:04:13,870
wrote it we weren't even thinking about

96
00:04:13,870 --> 00:04:15,370
it we were testing it because we were so

97
00:04:15,370 --> 00:04:16,859
focused on testing the Twitter thing

98
00:04:16,859 --> 00:04:20,410
manually testing that is that we just

99
00:04:20,410 --> 00:04:21,880
put it in there and tested the Twitter

100
00:04:21,880 --> 00:04:23,080
and it worked so we thought we were good

101
00:04:23,080 --> 00:04:23,500
to go

102
00:04:23,500 --> 00:04:25,449
so this is where modules come in and I

103
00:04:25,449 --> 00:04:26,740
don't think I'm telling anybody anything

104
00:04:26,740 --> 00:04:28,960
new here everybody I think or most

105
00:04:28,960 --> 00:04:30,880
people get the Y models are a good thing

106
00:04:30,880 --> 00:04:33,220
they offer these two sort of forms of

107
00:04:33,220 --> 00:04:36,160
isolation they give you the ability to

108
00:04:36,160 --> 00:04:37,990
not clobber other things in your app

109
00:04:37,990 --> 00:04:41,050
which is awesome by default so if I

110
00:04:41,050 --> 00:04:42,550
write a get user object and either these

111
00:04:42,550 --> 00:04:44,139
modules it's not going to clobber each

112
00:04:44,139 --> 00:04:47,860
other but also with all the various

113
00:04:47,860 --> 00:04:49,539
module systems that we have in our

114
00:04:49,539 --> 00:04:51,460
options today which is annoying but

115
00:04:51,460 --> 00:04:53,560
that's another problem they all offer

116
00:04:53,560 --> 00:04:55,750
the ability to explicitly specify how we

117
00:04:55,750 --> 00:04:59,229
interact with the rest of our app so es6

118
00:04:59,229 --> 00:05:00,820
modules am become and yes you can

119
00:05:00,820 --> 00:05:03,820
require import and you can export from

120
00:05:03,820 --> 00:05:05,500
all of these the nice thing about that

121
00:05:05,500 --> 00:05:07,150
is you explicitly identify the things

122
00:05:07,150 --> 00:05:09,010
you want to you want to pull in from the

123
00:05:09,010 --> 00:05:11,080
outside and you explicitly identify the

124
00:05:11,080 --> 00:05:12,520
things that you want the outside to be

125
00:05:12,520 --> 00:05:14,320
able to pull in from you that's really

126
00:05:14,320 --> 00:05:15,729
important in being able to reason about

127
00:05:15,729 --> 00:05:17,440
a small chunk of your app at a small

128
00:05:17,440 --> 00:05:21,970
piece of time but that's how you design

129
00:05:21,970 --> 00:05:25,349
your app let's talk about testing so if

130
00:05:25,349 --> 00:05:28,449
you write some automated tests let's say

131
00:05:28,449 --> 00:05:31,479
we wrote some tests here it's really

132
00:05:31,479 --> 00:05:33,699
useful to have your tests give you some

133
00:05:33,699 --> 00:05:36,520
information about when you're it's when

134
00:05:36,520 --> 00:05:39,039
your application might fail before you

135
00:05:39,039 --> 00:05:41,080
push it off into production so well the

136
00:05:41,080 --> 00:05:42,220
first thing that's beneficial about

137
00:05:42,220 --> 00:05:43,810
tests is that they pass and fail they

138
00:05:43,810 --> 00:05:45,849
give you this immediate indication that

139
00:05:45,849 --> 00:05:47,770
something is wrong with your code before

140
00:05:47,770 --> 00:05:49,659
and it's maybe something that you didn't

141
00:05:49,659 --> 00:05:51,099
even think of it's the Facebook library

142
00:05:51,099 --> 00:05:54,220
broke or whatever but this kind of test

143
00:05:54,220 --> 00:05:56,050
message sucks it's not very specific it

144
00:05:56,050 --> 00:05:58,419
just says the API library failed so

145
00:05:58,419 --> 00:06:00,580
really what we want out of tests we want

146
00:06:00,580 --> 00:06:02,260
that signal of failure but we also want

147
00:06:02,260 --> 00:06:04,360
more information we want to know what

148
00:06:04,360 --> 00:06:06,099
failed let's let's like narrow that

149
00:06:06,099 --> 00:06:09,400
scope down to figure out exactly like if

150
00:06:09,400 --> 00:06:10,810
all we had was that

151
00:06:10,810 --> 00:06:14,560
the the API module failed we have to go

152
00:06:14,560 --> 00:06:16,180
manually figure out how the test

153
00:06:16,180 --> 00:06:18,430
observed that something failed but if we

154
00:06:18,430 --> 00:06:19,870
can write tests that actually give us

155
00:06:19,870 --> 00:06:22,180
this information Twitter API jet user

156
00:06:22,180 --> 00:06:24,000
object never called its callback that

157
00:06:24,000 --> 00:06:25,870
significantly reduces the amount of time

158
00:06:25,870 --> 00:06:26,980
we have to spend trying to figure out

159
00:06:26,980 --> 00:06:28,960
what went wrong and the test did it for

160
00:06:28,960 --> 00:06:29,850
us

161
00:06:29,850 --> 00:06:34,690
so the next question is like well I'll

162
00:06:34,690 --> 00:06:36,490
just recap here basically you have this

163
00:06:36,490 --> 00:06:38,500
sort of debug problem you want to you

164
00:06:38,500 --> 00:06:40,150
find out that a problem or a bug exists

165
00:06:40,150 --> 00:06:41,530
test give you this very quickly and very

166
00:06:41,530 --> 00:06:43,930
easily because they pass or fail the

167
00:06:43,930 --> 00:06:45,430
next question and there the next thing

168
00:06:45,430 --> 00:06:46,479
that you want to do is you want to be

169
00:06:46,479 --> 00:06:48,070
able to reproduce or figure out how that

170
00:06:48,070 --> 00:06:50,410
how to observe that bug if a user sends

171
00:06:50,410 --> 00:06:52,210
your bug report if they just tell you

172
00:06:52,210 --> 00:06:54,940
that your app is broken you don't that's

173
00:06:54,940 --> 00:06:56,770
not useful it's the same thing with

174
00:06:56,770 --> 00:06:59,080
tests so you need to know how the tests

175
00:06:59,080 --> 00:07:01,120
observe that something failed and then

176
00:07:01,120 --> 00:07:03,310
once you have that you can dive in and

177
00:07:03,310 --> 00:07:05,050
find the root cause this is kind of

178
00:07:05,050 --> 00:07:08,740
similar to what Chris shadows talk was

179
00:07:08,740 --> 00:07:10,660
the other day it was like isolating the

180
00:07:10,660 --> 00:07:12,220
area the problem domain and being able

181
00:07:12,220 --> 00:07:13,840
to narrow down to the smallest search

182
00:07:13,840 --> 00:07:22,030
search space um so we have this app and

183
00:07:22,030 --> 00:07:24,039
we need to figure out how we've broken

184
00:07:24,039 --> 00:07:25,840
it down into pieces to build it but now

185
00:07:25,840 --> 00:07:27,580
we need to figure out how to break it

186
00:07:27,580 --> 00:07:30,700
down to pieces that we want to test well

187
00:07:30,700 --> 00:07:33,010
one of the most traditional ways that

188
00:07:33,010 --> 00:07:35,260
you do this is you just observe that you

189
00:07:35,260 --> 00:07:36,520
have these modules and there are these

190
00:07:36,520 --> 00:07:37,720
grooves between them right

191
00:07:37,720 --> 00:07:39,430
each of these orange things is a module

192
00:07:39,430 --> 00:07:40,870
they might talk to each other they have

193
00:07:40,870 --> 00:07:43,110
little sort of links between each other

194
00:07:43,110 --> 00:07:45,460
these but because you have these nice

195
00:07:45,460 --> 00:07:48,310
little separations between these modules

196
00:07:48,310 --> 00:07:50,440
it's very easy to be able to cut them

197
00:07:50,440 --> 00:07:52,479
apart the only thing you have to cut in

198
00:07:52,479 --> 00:07:54,250
those little grooves in between the

199
00:07:54,250 --> 00:07:56,169
modules is the links as those requires

200
00:07:56,169 --> 00:07:58,479
and those imports so this is where it

201
00:07:58,479 --> 00:08:02,800
just comes very useful but one of the

202
00:08:02,800 --> 00:08:04,300
benefits of being able to cut out a

203
00:08:04,300 --> 00:08:06,520
piece of your app is that whenever your

204
00:08:06,520 --> 00:08:08,710
test fails if you know that your test is

205
00:08:08,710 --> 00:08:10,930
only test is only exercising code within

206
00:08:10,930 --> 00:08:12,940
that white square let's say that one

207
00:08:12,940 --> 00:08:15,550
module you know that you've reduced your

208
00:08:15,550 --> 00:08:17,380
server space in your app for the problem

209
00:08:17,380 --> 00:08:19,750
to that white square so now debugging

210
00:08:19,750 --> 00:08:22,770
that test becomes much easier

211
00:08:22,770 --> 00:08:24,569
so where I'm going with this becomes

212
00:08:24,569 --> 00:08:25,889
much more apparent when I actually start

213
00:08:25,889 --> 00:08:28,400
showing you code so here's a very simple

214
00:08:28,400 --> 00:08:32,539
test that will start writing using just

215
00:08:32,539 --> 00:08:35,250
just ships with jasmine

216
00:08:35,250 --> 00:08:38,969
right now at least we are hoping to be

217
00:08:38,969 --> 00:08:40,289
able to make it so that you can plug in

218
00:08:40,289 --> 00:08:41,940
different test frameworks as well but

219
00:08:41,940 --> 00:08:44,039
we'll start with jasmine and if you're

220
00:08:44,039 --> 00:08:45,899
not familiar with jasmine basically the

221
00:08:45,899 --> 00:08:47,670
way you your standard test boilerplate

222
00:08:47,670 --> 00:08:50,220
goes is you write a describe and that's

223
00:08:50,220 --> 00:08:52,470
your test suite in traditional terms and

224
00:08:52,470 --> 00:08:54,540
you have your it which is your spec or

225
00:08:54,540 --> 00:08:57,300
your test and describes or test Suites

226
00:08:57,300 --> 00:09:00,540
can have sets of test specs and tests in

227
00:09:00,540 --> 00:09:02,760
them here we only have one and you see

228
00:09:02,760 --> 00:09:05,270
that we require Facebook API right here

229
00:09:05,270 --> 00:09:07,440
so what we're doing is we're getting

230
00:09:07,440 --> 00:09:09,089
access to this module inside of our test

231
00:09:09,089 --> 00:09:11,089
and this is the module we want to test

232
00:09:11,089 --> 00:09:14,910
but this is the thing we're doing right

233
00:09:14,910 --> 00:09:18,959
now got ahead of myself in real life

234
00:09:18,959 --> 00:09:21,240
what would happen if we did this like in

235
00:09:21,240 --> 00:09:23,070
real life like say no tor browser fire

236
00:09:23,070 --> 00:09:25,890
or whatever what you're going to get

237
00:09:25,890 --> 00:09:27,149
back is an object that looks like this

238
00:09:27,149 --> 00:09:28,980
it has this get user object right and

239
00:09:28,980 --> 00:09:30,630
it's a function and it does this stuff

240
00:09:30,630 --> 00:09:33,000
that we saw earlier but in jest what you

241
00:09:33,000 --> 00:09:36,180
actually get which is interesting and my

242
00:09:36,180 --> 00:09:38,160
favorite part is you don't get that you

243
00:09:38,160 --> 00:09:40,440
get a mock function you don't get the

244
00:09:40,440 --> 00:09:43,860
real thing there's actually problematic

245
00:09:43,860 --> 00:09:46,399
because you want to test the real thing

246
00:09:46,399 --> 00:09:49,200
right here we want to test the Facebook

247
00:09:49,200 --> 00:09:52,579
API but just mocks everything by default

248
00:09:52,579 --> 00:09:55,740
so we have to tell Jess not to mock the

249
00:09:55,740 --> 00:09:59,190
Facebook API but it's cool because we've

250
00:09:59,190 --> 00:10:00,930
told just exactly what we don't want

251
00:10:00,930 --> 00:10:02,910
mocked and everything else just will

252
00:10:02,910 --> 00:10:05,310
just do it for us it's not that magical

253
00:10:05,310 --> 00:10:07,800
the way it works is whenever you require

254
00:10:07,800 --> 00:10:10,709
a function just goes off into like an

255
00:10:10,709 --> 00:10:12,839
isolated environment actually requires

256
00:10:12,839 --> 00:10:15,990
the the module and the reason the

257
00:10:15,990 --> 00:10:18,270
environment is isolated is to make sure

258
00:10:18,270 --> 00:10:20,490
that any side-effects that happen when

259
00:10:20,490 --> 00:10:22,079
you require that module don't affect

260
00:10:22,079 --> 00:10:24,480
your test environment but often secret

261
00:10:24,480 --> 00:10:26,209
it goes off and requires the real module

262
00:10:26,209 --> 00:10:28,529
looks at the exports object that come

263
00:10:28,529 --> 00:10:29,760
out of it that came out of it

264
00:10:29,760 --> 00:10:33,180
says oh there's a get user object

265
00:10:33,180 --> 00:10:35,339
function and then it builds a fake

266
00:10:35,339 --> 00:10:35,920
version

267
00:10:35,920 --> 00:10:37,889
what it saw and that's what it gives you

268
00:10:37,889 --> 00:10:42,149
so when you do things like requiring

269
00:10:42,149 --> 00:10:45,240
other things let's go look at that

270
00:10:45,240 --> 00:10:47,709
Facebook API module that we're requiring

271
00:10:47,709 --> 00:10:49,959
the test at the top of this module will

272
00:10:49,959 --> 00:10:52,510
requiring xhr well in our test

273
00:10:52,510 --> 00:10:55,180
environment when we execute Facebook API

274
00:10:55,180 --> 00:10:56,519
because we've said don't mock it

275
00:10:56,519 --> 00:10:58,810
Facebook API doesn't get the real xhr

276
00:10:58,810 --> 00:11:01,839
module by default and automatically it

277
00:11:01,839 --> 00:11:03,760
gets one that looks like the Facebook

278
00:11:03,760 --> 00:11:06,160
API module and you can see that the

279
00:11:06,160 --> 00:11:08,980
sorry the xhr module you can see the xhr

280
00:11:08,980 --> 00:11:11,290
module has a get function that it

281
00:11:11,290 --> 00:11:15,100
exported well just has generated an just

282
00:11:15,100 --> 00:11:17,230
as automatically generator to get export

283
00:11:17,230 --> 00:11:19,180
for you so if you actually were to call

284
00:11:19,180 --> 00:11:20,889
that function there it wouldn't do

285
00:11:20,889 --> 00:11:23,199
anything it's just mocked and the whole

286
00:11:23,199 --> 00:11:24,760
point here is that you don't want to

287
00:11:24,760 --> 00:11:26,199
exercise any code that isn't in that

288
00:11:26,199 --> 00:11:28,180
white area because if your test fails

289
00:11:28,180 --> 00:11:30,070
you want to be able to be guaranteed

290
00:11:30,070 --> 00:11:32,620
that it's something that you need to

291
00:11:32,620 --> 00:11:34,180
search within the white area not within

292
00:11:34,180 --> 00:11:37,420
your entire app so I've added some

293
00:11:37,420 --> 00:11:40,000
contrived stuff here to make the testing

294
00:11:40,000 --> 00:11:46,300
example simpler to explain but we've I

295
00:11:46,300 --> 00:11:48,820
basically added a user cache here and

296
00:11:48,820 --> 00:11:50,519
I've primed it with information about me

297
00:11:50,519 --> 00:11:53,079
and if you call user object now rather

298
00:11:53,079 --> 00:11:54,730
than always going out to the API and

299
00:11:54,730 --> 00:11:56,230
fetching the information it will go to

300
00:11:56,230 --> 00:11:57,519
the user cache first and if it's there

301
00:11:57,519 --> 00:11:59,980
it'll return it if not it goes off and

302
00:11:59,980 --> 00:12:05,920
gets it so let's see yeah let's go to

303
00:12:05,920 --> 00:12:10,449
the back to the test so coming back to

304
00:12:10,449 --> 00:12:12,850
the test we've required our Facebook ID

305
00:12:12,850 --> 00:12:15,279
API module all of its dependencies have

306
00:12:15,279 --> 00:12:17,050
been automatically blocked so whenever

307
00:12:17,050 --> 00:12:18,910
we do anything with it we're only going

308
00:12:18,910 --> 00:12:21,100
to be executing code within it the next

309
00:12:21,100 --> 00:12:23,050
thing we do is we want to go ahead

310
00:12:23,050 --> 00:12:24,699
because this test is making sure that

311
00:12:24,699 --> 00:12:27,130
our callback function is called we want

312
00:12:27,130 --> 00:12:30,100
to make this mock callback function and

313
00:12:30,100 --> 00:12:32,440
we're using just has a utility for

314
00:12:32,440 --> 00:12:35,620
generating mock functions it's a it's

315
00:12:35,620 --> 00:12:37,569
almost the same thing if you've heard of

316
00:12:37,569 --> 00:12:39,519
jasmine dot create spy it's the same

317
00:12:39,519 --> 00:12:40,569
thing except we just didn't want a

318
00:12:40,569 --> 00:12:42,370
couple just directly to Jasmine so we

319
00:12:42,370 --> 00:12:46,110
included nan couple mocking utilities

320
00:12:46,110 --> 00:12:48,699
creates this mock function all the mock

321
00:12:48,699 --> 00:12:49,870
function does is work

322
00:12:49,870 --> 00:12:51,940
the calls that are made to it and the

323
00:12:51,940 --> 00:12:54,660
arguments that are passed to those calls

324
00:12:54,660 --> 00:12:56,980
so now we're going to call our real

325
00:12:56,980 --> 00:12:59,590
version of Facebook API get user objects

326
00:12:59,590 --> 00:13:01,750
with Jeff Moe which remember I primed so

327
00:13:01,750 --> 00:13:04,390
it's in our cache and then the next

328
00:13:04,390 --> 00:13:05,980
thing we do here is this Jeff stop run

329
00:13:05,980 --> 00:13:10,480
Alzheimer's this is a really cool

330
00:13:10,480 --> 00:13:12,190
feature it's it's really it's just like

331
00:13:12,190 --> 00:13:13,300
I didn't cope with this but somebody

332
00:13:13,300 --> 00:13:15,130
whoever came up with this is it's it's

333
00:13:15,130 --> 00:13:15,670
really neat

334
00:13:15,670 --> 00:13:18,340
basically all we want to do in this test

335
00:13:18,340 --> 00:13:19,870
at this point is wait for that set

336
00:13:19,870 --> 00:13:21,430
timeout zero to go because remember it

337
00:13:21,430 --> 00:13:25,450
was like cached which we contrived for

338
00:13:25,450 --> 00:13:27,790
this example so that set time on zero

339
00:13:27,790 --> 00:13:28,810
isn't going to happen until the next

340
00:13:28,810 --> 00:13:31,060
event loop we don't we don't want to

341
00:13:31,060 --> 00:13:32,350
wait we're just running a test we just

342
00:13:32,350 --> 00:13:34,480
want to fast forward through time just

343
00:13:34,480 --> 00:13:35,920
gives you the ability because you're in

344
00:13:35,920 --> 00:13:38,410
the Jess environment you can run through

345
00:13:38,410 --> 00:13:41,170
all the pending timers and exhaust that

346
00:13:41,170 --> 00:13:43,930
timer queue right now imperative lis in

347
00:13:43,930 --> 00:13:46,240
your tests so you don't the wait there's

348
00:13:46,240 --> 00:13:47,710
no like asynchronous test there's no

349
00:13:47,710 --> 00:13:49,930
like if your test callback never runs

350
00:13:49,930 --> 00:13:51,280
then you have to wait five seconds here

351
00:13:51,280 --> 00:13:52,900
a test if I'm timeout that none of that

352
00:13:52,900 --> 00:13:55,320
nonsense you just run your timers now

353
00:13:55,320 --> 00:13:58,300
and then lastly you can do your expect

354
00:13:58,300 --> 00:14:00,430
you expect that mock callback to have

355
00:14:00,430 --> 00:14:02,560
been called with your stuff and it

356
00:14:02,560 --> 00:14:10,990
should pass let's see so that's how you

357
00:14:10,990 --> 00:14:12,580
that's the high level like the most

358
00:14:12,580 --> 00:14:14,260
interesting feature of just in my

359
00:14:14,260 --> 00:14:16,210
opinion otherwise most of the other

360
00:14:16,210 --> 00:14:17,470
features are just things that you've

361
00:14:17,470 --> 00:14:20,730
probably seen before so but the biggest

362
00:14:20,730 --> 00:14:22,600
benefit to the fact that these things

363
00:14:22,600 --> 00:14:24,310
exist in just in my mind aliases they

364
00:14:24,310 --> 00:14:27,700
come together so you can npm install' GS

365
00:14:27,700 --> 00:14:30,280
CLI you just simply CD into your project

366
00:14:30,280 --> 00:14:31,420
and you're on the just command and it

367
00:14:31,420 --> 00:14:33,010
searches for your tests finds them

368
00:14:33,010 --> 00:14:34,870
execute them it executes them in the

369
00:14:34,870 --> 00:14:36,280
just environment this is very similar to

370
00:14:36,280 --> 00:14:38,800
like the mote the mocha CLI or the

371
00:14:38,800 --> 00:14:40,360
Jasmine node CLI that you might have

372
00:14:40,360 --> 00:14:44,570
seen before and probably lots of others

373
00:14:44,580 --> 00:14:47,950
so let's see yeah you run the you run

374
00:14:47,950 --> 00:14:49,060
the test Runner and searches for your

375
00:14:49,060 --> 00:14:51,790
test it finds them it also executes your

376
00:14:51,790 --> 00:14:54,460
tests in clean environments each time so

377
00:14:54,460 --> 00:14:57,130
every time you run a test file at the

378
00:14:57,130 --> 00:14:58,510
end of that test file it's going to

379
00:14:58,510 --> 00:14:59,890
clean everything up any side effects

380
00:14:59,890 --> 00:15:01,840
that may have happened any modules you

381
00:15:01,840 --> 00:15:04,030
may have required a module state it all

382
00:15:04,030 --> 00:15:05,620
it's cleaned up and then when you run

383
00:15:05,620 --> 00:15:07,930
the next file it it's starting from a

384
00:15:07,930 --> 00:15:10,330
clean state slate so no tests can

385
00:15:10,330 --> 00:15:13,000
interfere by means of side effects with

386
00:15:13,000 --> 00:15:15,460
the next next test see how am i doing on

387
00:15:15,460 --> 00:15:21,120
time I got plenty

388
00:15:21,120 --> 00:15:23,500
what does what this actually gives us

389
00:15:23,500 --> 00:15:24,940
though is the ability to run tests in

390
00:15:24,940 --> 00:15:28,540
parallel so we do by default the just

391
00:15:28,540 --> 00:15:30,250
command line run or not only finds tests

392
00:15:30,250 --> 00:15:32,050
and execute them but actually by default

393
00:15:32,050 --> 00:15:34,930
boots up a worker pool of child

394
00:15:34,930 --> 00:15:37,630
processes this is a node program right

395
00:15:37,630 --> 00:15:41,230
here just as a node node program and it

396
00:15:41,230 --> 00:15:44,470
shells out to those child processes and

397
00:15:44,470 --> 00:15:46,840
runs your tests in parallel and this is

398
00:15:46,840 --> 00:15:48,310
extremely important to us at Facebook

399
00:15:48,310 --> 00:15:50,080
because we have thousands of these tests

400
00:15:50,080 --> 00:15:52,660
and we have to run them like often and

401
00:15:52,660 --> 00:15:55,330
fast so we run our however many thousand

402
00:15:55,330 --> 00:15:59,440
I probably should look that up tests in

403
00:15:59,440 --> 00:16:01,720
well around a minute a little over a

404
00:16:01,720 --> 00:16:02,080
minute

405
00:16:02,080 --> 00:16:06,460
which is pretty cool let's see the the

406
00:16:06,460 --> 00:16:07,780
other interesting aspect of just is

407
00:16:07,780 --> 00:16:09,340
something you might have also seen

408
00:16:09,340 --> 00:16:10,900
before is that it ships with Jazze Dom

409
00:16:10,900 --> 00:16:13,870
so j/s Dom if you haven't heard of it is

410
00:16:13,870 --> 00:16:19,390
a way in node of sort of creating a fake

411
00:16:19,390 --> 00:16:22,540
version of the Dom API and they work so

412
00:16:22,540 --> 00:16:24,730
if you do document aakhri element in in

413
00:16:24,730 --> 00:16:27,160
your test it actually returns an object

414
00:16:27,160 --> 00:16:29,050
it looks like a Dom element so you can

415
00:16:29,050 --> 00:16:32,440
actually write tests on modules that are

416
00:16:32,440 --> 00:16:33,610
actually interacting with the Dom

417
00:16:33,610 --> 00:16:35,230
creating things putting things in a

418
00:16:35,230 --> 00:16:36,640
document that body so forth and so on

419
00:16:36,640 --> 00:16:38,770
and then in your test you just query

420
00:16:38,770 --> 00:16:40,750
selector all for it find it assert that

421
00:16:40,750 --> 00:16:42,160
it did what it was supposed to do and

422
00:16:42,160 --> 00:16:45,970
you can do your test that way that as

423
00:16:45,970 --> 00:16:48,820
well as is cleaned up in each version so

424
00:16:48,820 --> 00:16:50,170
you get a clean version the Dom in each

425
00:16:50,170 --> 00:16:52,150
each run of the test and I should

426
00:16:52,150 --> 00:16:52,990
clarify because I get this question

427
00:16:52,990 --> 00:16:55,990
sometimes when I say we run tests in

428
00:16:55,990 --> 00:16:58,330
parallel we run test files in parallel

429
00:16:58,330 --> 00:17:00,970
we it's it's a very hard problem and I'm

430
00:17:00,970 --> 00:17:03,400
not sure if it's even possible to split

431
00:17:03,400 --> 00:17:06,910
those specs up into parallel but if you

432
00:17:06,910 --> 00:17:08,920
have like this huge test file that takes

433
00:17:08,920 --> 00:17:13,060
a really long time it's it's it's the

434
00:17:13,060 --> 00:17:14,860
quickest optimisation you can do is

435
00:17:14,860 --> 00:17:16,150
split that test in the two so that you

436
00:17:16,150 --> 00:17:17,270
can run both of them parallel

437
00:17:17,270 --> 00:17:22,910
so just to clarify there I think I sped

438
00:17:22,910 --> 00:17:24,530
through that way faster than I expected

439
00:17:24,530 --> 00:17:28,339
so that's the gist of it you can check

440
00:17:28,339 --> 00:17:33,040
out just by installing it npm install' G

441
00:17:33,040 --> 00:17:35,210
you can check out the code and the

442
00:17:35,210 --> 00:17:37,280
documentation and we also most of us

443
00:17:37,280 --> 00:17:42,760
hang out in freenode pound Jess Jas and

444
00:17:42,760 --> 00:17:46,340
I'm not always on my computer but I will

445
00:17:46,340 --> 00:17:47,630
at least try to answer questions and

446
00:17:47,630 --> 00:17:51,650
such yeah I'll bail general I think I'm

