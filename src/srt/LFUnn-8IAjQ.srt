1
00:00:06,840 --> 00:00:09,700

my name is Garth Henson as was mentioned

2
00:00:09,700 --> 00:00:11,320
I do

3
00:00:11,320 --> 00:00:12,730
Disney Company I've been with the

4
00:00:12,730 --> 00:00:15,219
company about five years now thank you

5
00:00:15,219 --> 00:00:18,360
that that's how I feel still every day I

6
00:00:18,360 --> 00:00:21,160
worked out of the Seattle office for

7
00:00:21,160 --> 00:00:22,900
about four years I work with corporate

8
00:00:22,900 --> 00:00:23,950
technology there

9
00:00:23,950 --> 00:00:27,039
what we do is basically platform to

10
00:00:27,039 --> 00:00:29,439
laying anything we need to build to

11
00:00:29,439 --> 00:00:31,029
enable the different brands to do what

12
00:00:31,029 --> 00:00:32,980
they need to do so right now I'm working

13
00:00:32,980 --> 00:00:35,350
with the SPN we work with ABC News we

14
00:00:35,350 --> 00:00:36,790
work with Parks and Resorts we work with

15
00:00:36,790 --> 00:00:38,530
all the different brands from an

16
00:00:38,530 --> 00:00:40,809
infrastructure architecture application

17
00:00:40,809 --> 00:00:42,539
basically whatever we need to build

18
00:00:42,539 --> 00:00:46,000
right now it's kind of fun because most

19
00:00:46,000 --> 00:00:48,520
of what I build is node on the backend

20
00:00:48,520 --> 00:00:50,320
and we do full stack all the way up then

21
00:00:50,320 --> 00:00:52,629
we do react on the front end and so most

22
00:00:52,629 --> 00:00:53,980
of the stuff we're working is JavaScript

23
00:00:53,980 --> 00:00:56,710
end to end one of the reasons I am

24
00:00:56,710 --> 00:00:59,170
excited about this talk is this is

25
00:00:59,170 --> 00:01:02,289
something that is an ongoing project is

26
00:01:02,289 --> 00:01:03,899
we're trying to figure out which

27
00:01:03,899 --> 00:01:06,399
applications we should move to not only

28
00:01:06,399 --> 00:01:08,380
into the cloud but into a service

29
00:01:08,380 --> 00:01:10,990
architecture the nice thing is that in

30
00:01:10,990 --> 00:01:12,850
most cases we can keep running

31
00:01:12,850 --> 00:01:15,190
JavaScript end to end with maybe a

32
00:01:15,190 --> 00:01:16,689
little bit of bash in there for some of

33
00:01:16,689 --> 00:01:18,159
our docker containers and entry points

34
00:01:18,159 --> 00:01:20,590
and that type of thing so that's what

35
00:01:20,590 --> 00:01:22,830
we're gonna talk about today

36
00:01:22,830 --> 00:01:25,810
serverless is one of those very

37
00:01:25,810 --> 00:01:27,880
interesting terms it's been a buzzword

38
00:01:27,880 --> 00:01:29,470
for a long time and it's one that I

39
00:01:29,470 --> 00:01:32,759
really don't like honestly serverless

40
00:01:32,759 --> 00:01:35,770
sounds like we just don't have service

41
00:01:35,770 --> 00:01:39,369
anymore which of course we know they

42
00:01:39,369 --> 00:01:40,689
just are going to go away and everything

43
00:01:40,689 --> 00:01:42,009
runs on magic right that's at least at

44
00:01:42,009 --> 00:01:45,850
Disney that's how it works but but what

45
00:01:45,850 --> 00:01:48,399
is serverless server this computing

46
00:01:48,399 --> 00:01:50,649
based on a Wikipedia definition here

47
00:01:50,649 --> 00:01:53,170
it's really a cloud computing execution

48
00:01:53,170 --> 00:01:55,270
model it's a process it's a way of

49
00:01:55,270 --> 00:01:57,399
thinking in which the cloud provider

50
00:01:57,399 --> 00:01:59,259
dynamically manages allocation of

51
00:01:59,259 --> 00:02:01,840
machine resources and then the pricing

52
00:02:01,840 --> 00:02:03,759
itself is generally based on the actual

53
00:02:03,759 --> 00:02:06,040
consumption of the processing so

54
00:02:06,040 --> 00:02:08,619
whatever you use is what you pay for so

55
00:02:08,619 --> 00:02:11,380
obviously that means I'm not there yes

56
00:02:11,380 --> 00:02:14,170
arms up and so this this diagram kind of

57
00:02:14,170 --> 00:02:16,000
breaks down into a couple different

58
00:02:16,000 --> 00:02:18,430
categories all of the things we would

59
00:02:18,430 --> 00:02:20,590
talk about as a cloud offering and so

60
00:02:20,590 --> 00:02:23,320
most of these I hope many people in here

61
00:02:23,320 --> 00:02:24,609
familiar with some of the different

62
00:02:24,609 --> 00:02:24,970
burrows

63
00:02:24,970 --> 00:02:29,740
odd categories is is pretty common

64
00:02:29,740 --> 00:02:30,790
you're gonna have

65
00:02:30,790 --> 00:02:32,350
infrastructure-as-a-service whether

66
00:02:32,350 --> 00:02:34,150
that's an on-prem data center that

67
00:02:34,150 --> 00:02:36,970
you're having to pull resources from an

68
00:02:36,970 --> 00:02:39,160
out gate or you're using ec2 instances

69
00:02:39,160 --> 00:02:41,950
or you're using compute instances from

70
00:02:41,950 --> 00:02:43,740
whatever provider cloud provider you use

71
00:02:43,740 --> 00:02:47,410
you basically have to provision what you

72
00:02:47,410 --> 00:02:50,170
need and you have to assemble all of

73
00:02:50,170 --> 00:02:51,820
your pieces before you can deploy the

74
00:02:51,820 --> 00:02:53,710
code to it right that's that we're

75
00:02:53,710 --> 00:02:56,050
familiar with that and then you've got

76
00:02:56,050 --> 00:02:57,940
the SAS offerings which I think most of

77
00:02:57,940 --> 00:02:59,500
us are also familiar with where I just

78
00:02:59,500 --> 00:03:01,120
don't either want to take the time or

79
00:03:01,120 --> 00:03:02,500
the money to build it I'd rather put the

80
00:03:02,500 --> 00:03:04,240
money into paying for the service and

81
00:03:04,240 --> 00:03:06,220
just use it where it stands and let them

82
00:03:06,220 --> 00:03:08,350
manage the SaaS let them manage

83
00:03:08,350 --> 00:03:10,030
everything else and the support layers

84
00:03:10,030 --> 00:03:11,290
we just don't want to take that on

85
00:03:11,290 --> 00:03:13,630
ourselves so we're gonna buy the service

86
00:03:13,630 --> 00:03:15,700
from somebody else use it in place and

87
00:03:15,700 --> 00:03:18,910
continue processing and then more

88
00:03:18,910 --> 00:03:20,620
recently we're getting more and more

89
00:03:20,620 --> 00:03:22,540
capabilities of moving things into the

90
00:03:22,540 --> 00:03:24,760
cloud on top of your past offering so

91
00:03:24,760 --> 00:03:26,410
you've got your platform as a service

92
00:03:26,410 --> 00:03:28,350
that you're going to start leveraging

93
00:03:28,350 --> 00:03:31,810
and what's really interesting and we'll

94
00:03:31,810 --> 00:03:33,220
talk a little bit more about this is

95
00:03:33,220 --> 00:03:36,220
with things like Direct Connect for AWS

96
00:03:36,220 --> 00:03:37,780
and there's other things with with some

97
00:03:37,780 --> 00:03:39,720
of the other service offerings as well

98
00:03:39,720 --> 00:03:42,160
you can actually start running some of

99
00:03:42,160 --> 00:03:44,680
these platform offerings on your own

100
00:03:44,680 --> 00:03:47,560
private networks and so even though it's

101
00:03:47,560 --> 00:03:50,200
still managed completely remotely by

102
00:03:50,200 --> 00:03:51,550
your service provider you can actually

103
00:03:51,550 --> 00:03:52,900
run it on your private network as well

104
00:03:52,900 --> 00:03:55,060
so you starting to get the best of both

105
00:03:55,060 --> 00:03:57,250
worlds where you can start leveraging

106
00:03:57,250 --> 00:03:59,170
these other pieces but yet keep your

107
00:03:59,170 --> 00:04:00,549
connectivity the way it needs to be for

108
00:04:00,549 --> 00:04:03,400
your broader application and then on

109
00:04:03,400 --> 00:04:05,019
this diagram as well you'll notice that

110
00:04:05,019 --> 00:04:08,230
towards the top here we have the

111
00:04:08,230 --> 00:04:11,049
functions and the database is a service

112
00:04:11,049 --> 00:04:12,959
some of your things like your no sequels

113
00:04:12,959 --> 00:04:16,989
firebase or you've got your dynamo DB

114
00:04:16,989 --> 00:04:19,810
type of thing those are typically what

115
00:04:19,810 --> 00:04:21,820
we group into what we would really call

116
00:04:21,820 --> 00:04:23,200
server lists those are the things that

117
00:04:23,200 --> 00:04:24,760
basically everybody says oh yeah just

118
00:04:24,760 --> 00:04:27,100
use it it'll it'll scale and you just

119
00:04:27,100 --> 00:04:31,030
pay for what you use which is true but

120
00:04:31,030 --> 00:04:32,440
we need to make sure we understand what

121
00:04:32,440 --> 00:04:35,919
that actually means so this is if we're

122
00:04:35,919 --> 00:04:37,750
in a smaller room I would pause for

123
00:04:37,750 --> 00:04:38,740
questions but I

124
00:04:38,740 --> 00:04:40,900
say now if you have questions please do

125
00:04:40,900 --> 00:04:43,030
come talk to me afterwards I don't have

126
00:04:43,030 --> 00:04:44,979
all the answers I'm still learning a lot

127
00:04:44,979 --> 00:04:46,630
of this but I do want to share what

128
00:04:46,630 --> 00:04:50,069
we've what we've figured out so far so

129
00:04:50,069 --> 00:04:53,470
of course once we understand all of

130
00:04:53,470 --> 00:04:55,090
these this means this brings us to the

131
00:04:55,090 --> 00:04:56,889
conclusion I've heard so many times

132
00:04:56,889 --> 00:04:58,900
no more server is yeah everything's

133
00:04:58,900 --> 00:04:59,949
awesome we'd have to worry about

134
00:04:59,949 --> 00:05:03,340
anything anymore no actually all it

135
00:05:03,340 --> 00:05:06,520
means is it's not my servers the the

136
00:05:06,520 --> 00:05:08,680
problem or the the hiccups that the

137
00:05:08,680 --> 00:05:09,880
things we have to be aware of don't go

138
00:05:09,880 --> 00:05:12,310
away they just move to another location

139
00:05:12,310 --> 00:05:16,659
the concerns we have to be aware of just

140
00:05:16,659 --> 00:05:21,759
change it they don't go away why do we

141
00:05:21,759 --> 00:05:25,479
care why does it matter well if we look

142
00:05:25,479 --> 00:05:27,819
at the benefits of service there's

143
00:05:27,819 --> 00:05:29,949
several and then there's other things we

144
00:05:29,949 --> 00:05:32,710
have to be aware of as we move into this

145
00:05:32,710 --> 00:05:33,729
architecture

146
00:05:33,729 --> 00:05:38,500
first of all cost cost really is almost

147
00:05:38,500 --> 00:05:42,520
unanimously cited as the driving reason

148
00:05:42,520 --> 00:05:44,159
to move to serverless adoption

149
00:05:44,159 --> 00:05:46,120
everybody's like oh it's just cheaper

150
00:05:46,120 --> 00:05:47,320
everything should be service

151
00:05:47,320 --> 00:05:51,190
everything's cheaper which can be on

152
00:05:51,190 --> 00:05:52,930
demand execution built-in elasticity

153
00:05:52,930 --> 00:05:56,409
optimizes utilization uptime reliability

154
00:05:56,409 --> 00:05:58,000
everything's higher this is this is all

155
00:05:58,000 --> 00:06:00,789
true this is great it's fantastic but I

156
00:06:00,789 --> 00:06:02,500
want to see there's a there's a specific

157
00:06:02,500 --> 00:06:06,180
word right there the savings can be

158
00:06:06,180 --> 00:06:09,909
insane if they're built correctly for

159
00:06:09,909 --> 00:06:12,240
the appropriate applications they are

160
00:06:12,240 --> 00:06:14,199
incredibly cheaper to run

161
00:06:14,199 --> 00:06:18,460
however there's that key word of if we

162
00:06:18,460 --> 00:06:20,469
build them properly and we use it used

163
00:06:20,469 --> 00:06:22,300
it for the appropriate application it's

164
00:06:22,300 --> 00:06:24,340
cheaper so keep that in mind

165
00:06:24,340 --> 00:06:27,940
scalability by definition we're using

166
00:06:27,940 --> 00:06:30,250
serverless offerings we're using hosted

167
00:06:30,250 --> 00:06:33,490
and managed solutions and so scalability

168
00:06:33,490 --> 00:06:36,190
is built into it reliability it's really

169
00:06:36,190 --> 00:06:38,800
based off your providers SLA so we have

170
00:06:38,800 --> 00:06:40,539
all of these great potential benefits

171
00:06:40,539 --> 00:06:42,849
that we can get out of moving

172
00:06:42,849 --> 00:06:45,270
applications into a service architecture

173
00:06:45,270 --> 00:06:49,000
but we need to be aware I love this

174
00:06:49,000 --> 00:06:51,400
quote the most common currency to pay

175
00:06:51,400 --> 00:06:52,090
for benefits

176
00:06:52,090 --> 00:06:54,160
in our application architecture its

177
00:06:54,160 --> 00:06:57,970
complexity so how do we get I don't know

178
00:06:57,970 --> 00:07:00,040
if you I don't have the diagram up here

179
00:07:00,040 --> 00:07:02,260
but you've got different pivots that you

180
00:07:02,260 --> 00:07:03,820
can actually pull on in any application

181
00:07:03,820 --> 00:07:06,280
right any architecture management comes

182
00:07:06,280 --> 00:07:08,260
down says hey this has to run less

183
00:07:08,260 --> 00:07:10,540
expensively okay great it's gonna be

184
00:07:10,540 --> 00:07:12,550
slower now or it's going to be there's

185
00:07:12,550 --> 00:07:14,500
only certain things we can pull on and

186
00:07:14,500 --> 00:07:18,250
in order to reduce the cost and increase

187
00:07:18,250 --> 00:07:20,410
the performance and the scalability and

188
00:07:20,410 --> 00:07:22,540
reliability the easiest way to do that

189
00:07:22,540 --> 00:07:24,160
is to increase complexity now what does

190
00:07:24,160 --> 00:07:26,410
that look like though well in this

191
00:07:26,410 --> 00:07:29,290
diagram we kind of see the stepping

192
00:07:29,290 --> 00:07:31,570
stones between moving from our old

193
00:07:31,570 --> 00:07:34,570
monolithic applications into a standard

194
00:07:34,570 --> 00:07:36,070
what we would call the microservice

195
00:07:36,070 --> 00:07:38,580
infrastructure or ecosystem and

196
00:07:38,580 --> 00:07:41,560
basically what happens is is from step

197
00:07:41,560 --> 00:07:44,470
one to step two all we've done is we've

198
00:07:44,470 --> 00:07:46,479
broken all of those bits of logic all of

199
00:07:46,479 --> 00:07:48,160
those sections of the code that we're

200
00:07:48,160 --> 00:07:50,440
running all in one big application we've

201
00:07:50,440 --> 00:07:51,850
broken them out into their own smaller

202
00:07:51,850 --> 00:07:54,430
services which is great but now we have

203
00:07:54,430 --> 00:07:56,650
all this wiring in between so we've

204
00:07:56,650 --> 00:07:58,960
introduced some complexity of the wiring

205
00:07:58,960 --> 00:08:01,000
breaking a model with into into a

206
00:08:01,000 --> 00:08:03,090
microservices now did we gain

207
00:08:03,090 --> 00:08:05,350
performance reliability yeah if it's

208
00:08:05,350 --> 00:08:07,450
done right absolutely but we've added

209
00:08:07,450 --> 00:08:10,060
some type of complexity so when we're

210
00:08:10,060 --> 00:08:12,250
moving from microservice infrastructure

211
00:08:12,250 --> 00:08:16,270
or architecture into a full server love

212
00:08:16,270 --> 00:08:19,780
stack we're introducing far more wiring

213
00:08:19,780 --> 00:08:21,580
in between all the pieces so the

214
00:08:21,580 --> 00:08:24,130
complexity is potentially much greater

215
00:08:24,130 --> 00:08:27,280
for the overall application even if the

216
00:08:27,280 --> 00:08:29,229
individual pieces of code that we as

217
00:08:29,229 --> 00:08:30,910
engineers are managing are much much

218
00:08:30,910 --> 00:08:33,370
simpler to maintain so the overall

219
00:08:33,370 --> 00:08:35,560
application architecture we've got to be

220
00:08:35,560 --> 00:08:38,260
aware of as we go and then all of this

221
00:08:38,260 --> 00:08:39,820
of course is built on top of some type

222
00:08:39,820 --> 00:08:43,779
of a platform that we're paying for or

223
00:08:43,779 --> 00:08:48,100
we've spun up internally so Oh moving on

224
00:08:48,100 --> 00:08:51,550
here here are some of the things that we

225
00:08:51,550 --> 00:08:55,300
have to be aware of as the heading up

226
00:08:55,300 --> 00:08:57,820
here says service is cheaper not

227
00:08:57,820 --> 00:09:02,980
necessarily simpler anybody played with

228
00:09:02,980 --> 00:09:04,660
us three much and had any issues with

229
00:09:04,660 --> 00:09:05,860
eventual consistency

230
00:09:05,860 --> 00:09:09,339
a couple hands awesome okay so if you're

231
00:09:09,339 --> 00:09:12,490
not aware of what eventual consisted he

232
00:09:12,490 --> 00:09:16,600
consistently and and I told miles I was

233
00:09:16,600 --> 00:09:17,620
going to have to apologize to him I

234
00:09:17,620 --> 00:09:18,670
don't know if he's in here all of my

235
00:09:18,670 --> 00:09:22,120
examples are AWS I am intentionally

236
00:09:22,120 --> 00:09:24,640
doing pretty generic examples because

237
00:09:24,640 --> 00:09:26,170
these are things you can do on any

238
00:09:26,170 --> 00:09:28,360
service provider I'm not doing a sales

239
00:09:28,360 --> 00:09:30,459
pitch for AWS I just just what I know

240
00:09:30,459 --> 00:09:33,000
the best but eventual consistency

241
00:09:33,000 --> 00:09:35,440
basically means you can drop an object

242
00:09:35,440 --> 00:09:39,130
into an s3 bucket for storage and it may

243
00:09:39,130 --> 00:09:40,990
or may not be available for a read right

244
00:09:40,990 --> 00:09:43,269
away because it has the replicated

245
00:09:43,269 --> 00:09:44,709
across different data centers it's got

246
00:09:44,709 --> 00:09:46,510
to replicate across regions and when

247
00:09:46,510 --> 00:09:48,040
you're get requests or your pull request

248
00:09:48,040 --> 00:09:50,860
goes back out if it hasn't replicated

249
00:09:50,860 --> 00:09:52,720
all the way across you might hit a

250
00:09:52,720 --> 00:09:54,310
bucket or region where it hasn't

251
00:09:54,310 --> 00:09:56,560
propagated yet and so even though you

252
00:09:56,560 --> 00:09:58,390
just wrote it you've got a success it

253
00:09:58,390 --> 00:10:01,240
may not be available to read yet and so

254
00:10:01,240 --> 00:10:02,769
we actually had a couple projects we're

255
00:10:02,769 --> 00:10:04,089
like a server looks awesome we're gonna

256
00:10:04,089 --> 00:10:05,380
do one lamb to here and it's going to

257
00:10:05,380 --> 00:10:06,579
drop something into a three and then

258
00:10:06,579 --> 00:10:07,959
it's gonna fire this thing off over here

259
00:10:07,959 --> 00:10:09,279
and then the other lamp is gonna pick it

260
00:10:09,279 --> 00:10:11,019
up and do more processing with it and it

261
00:10:11,019 --> 00:10:15,100
wasn't there and the entire flow grinds

262
00:10:15,100 --> 00:10:17,320
to a halt and we realized that oh we

263
00:10:17,320 --> 00:10:19,240
need to call AWS guys so we can is on

264
00:10:19,240 --> 00:10:20,860
the phone we're talking with them and

265
00:10:20,860 --> 00:10:22,600
the question of course what did you read

266
00:10:22,600 --> 00:10:29,230
the SLA no I didn't and s3 is eventual

267
00:10:29,230 --> 00:10:31,420
consistency there is a window of time in

268
00:10:31,420 --> 00:10:33,490
which they are still within their SLA

269
00:10:33,490 --> 00:10:35,649
and as long as you can read it back out

270
00:10:35,649 --> 00:10:37,870
within a certain length of time they're

271
00:10:37,870 --> 00:10:40,420
okay and so these are things like the

272
00:10:40,420 --> 00:10:42,670
fault tolerance a synchronicity is

273
00:10:42,670 --> 00:10:44,440
you're doing multiple lambdas they're

274
00:10:44,440 --> 00:10:46,810
stateless you've got things like this

275
00:10:46,810 --> 00:10:49,240
that you have to start juggling where

276
00:10:49,240 --> 00:10:50,980
you do it in an application level in a

277
00:10:50,980 --> 00:10:54,190
monolith or even a microcircuit maintain

278
00:10:54,190 --> 00:10:56,560
some type of state you now are

279
00:10:56,560 --> 00:10:58,810
introducing logical chunks that are

280
00:10:58,810 --> 00:11:00,790
stateless that have to be aware or be

281
00:11:00,790 --> 00:11:03,130
able to retrieve or rebuild or saturate

282
00:11:03,130 --> 00:11:05,500
or do something to be able to continue

283
00:11:05,500 --> 00:11:07,630
processing and so things that before

284
00:11:07,630 --> 00:11:09,910
were somewhat intuitive within the

285
00:11:09,910 --> 00:11:11,680
application architecture are now

286
00:11:11,680 --> 00:11:13,240
becoming things we have to manually

287
00:11:13,240 --> 00:11:15,430
think through and deal with or at least

288
00:11:15,430 --> 00:11:18,399
be aware of latency the only reason I

289
00:11:18,399 --> 00:11:19,550
bring it up here

290
00:11:19,550 --> 00:11:21,860
every new Network hop can introduce

291
00:11:21,860 --> 00:11:24,320
latency so if you have something let's

292
00:11:24,320 --> 00:11:25,850
say we've got three micro-services and

293
00:11:25,850 --> 00:11:27,620
they're talking nicely together and

294
00:11:27,620 --> 00:11:29,660
every new request hits all three of them

295
00:11:29,660 --> 00:11:31,670
and it's a handoff you've got the

296
00:11:31,670 --> 00:11:33,290
inbound request and then you've got at

297
00:11:33,290 --> 00:11:36,830
least two hops so you've got three but

298
00:11:36,830 --> 00:11:38,450
if we break that out and it turns into

299
00:11:38,450 --> 00:11:40,670
six different lambdas or whatever you're

300
00:11:40,670 --> 00:11:41,960
doubling the number of network

301
00:11:41,960 --> 00:11:43,400
connections the network hops you're

302
00:11:43,400 --> 00:11:45,560
having to make to process something so

303
00:11:45,560 --> 00:11:46,880
you've got to be aware of the increased

304
00:11:46,880 --> 00:11:49,490
latency potentially okay and again these

305
00:11:49,490 --> 00:11:50,870
are all just be aware of them they're

306
00:11:50,870 --> 00:11:52,790
not I'm not saying don't do it I'm just

307
00:11:52,790 --> 00:11:54,050
saying be aware of what the potential

308
00:11:54,050 --> 00:11:57,110
gotchas are let's see fault tolerance

309
00:11:57,110 --> 00:11:59,270
what happens if an asynchronous lambda

310
00:11:59,270 --> 00:12:01,460
spins up and fails and it can't process

311
00:12:01,460 --> 00:12:03,980
and it's responding to something that it

312
00:12:03,980 --> 00:12:06,980
pulled off of a queue have you thought

313
00:12:06,980 --> 00:12:08,510
through what's your dead letter Q look

314
00:12:08,510 --> 00:12:10,040
like are you going to actually do some

315
00:12:10,040 --> 00:12:12,050
retry logic what is your fault tolerance

316
00:12:12,050 --> 00:12:13,970
for it what's your retry all these

317
00:12:13,970 --> 00:12:15,860
things we have to start thinking through

318
00:12:15,860 --> 00:12:21,920
on a higher level or broader scale API

319
00:12:21,920 --> 00:12:23,810
is messaging schemas how are you gonna

320
00:12:23,810 --> 00:12:25,400
have all of the different pieces talk to

321
00:12:25,400 --> 00:12:26,330
each other if they're on the same

322
00:12:26,330 --> 00:12:29,030
process all of these different things

323
00:12:29,030 --> 00:12:31,670
rolling up grades how do you manage your

324
00:12:31,670 --> 00:12:32,930
actual upgrades of the individual

325
00:12:32,930 --> 00:12:35,780
lambdas or whatever whatever piece

326
00:12:35,780 --> 00:12:38,750
you're upgrading are you changing the

327
00:12:38,750 --> 00:12:40,550
signature of the payload you're dropping

328
00:12:40,550 --> 00:12:42,320
what what are all of the different

329
00:12:42,320 --> 00:12:45,410
pieces like that ah let's see and

330
00:12:45,410 --> 00:12:48,920
there's more so I've heard from a lot of

331
00:12:48,920 --> 00:12:51,020
people that hey just do everything

332
00:12:51,020 --> 00:12:52,790
serverless it's it's a solve all it'll

333
00:12:52,790 --> 00:12:54,980
cure everything and it's really not if

334
00:12:54,980 --> 00:12:58,430
you if you approach it as a cure-all if

335
00:12:58,430 --> 00:12:59,720
you approach it as a silver bullet

336
00:12:59,720 --> 00:13:01,190
that's gonna fix all of our problems I'm

337
00:13:01,190 --> 00:13:02,330
afraid people are gonna be very

338
00:13:02,330 --> 00:13:05,450
disappointed now again I say all of this

339
00:13:05,450 --> 00:13:07,250
and I'm a very big proponent of using

340
00:13:07,250 --> 00:13:10,040
serverless so don't get me wrong it is a

341
00:13:10,040 --> 00:13:13,040
fantastic tool but as with any other

342
00:13:13,040 --> 00:13:14,930
tool you've got to use the right tool

343
00:13:14,930 --> 00:13:15,560
for the right job

344
00:13:15,560 --> 00:13:17,630
and so every application if you're

345
00:13:17,630 --> 00:13:20,180
considering server lists as a potential

346
00:13:20,180 --> 00:13:22,490
architecture you need to evaluate your

347
00:13:22,490 --> 00:13:24,590
actual system what it is you're trying

348
00:13:24,590 --> 00:13:26,360
to build and what the benefits are what

349
00:13:26,360 --> 00:13:29,000
is your ROI what's the cost going to be

350
00:13:29,000 --> 00:13:31,480
how many requests are you gonna have

351
00:13:31,480 --> 00:13:34,630
and we'll look at a couple examples here

352
00:13:34,630 --> 00:13:35,830
in a minute where we can actually talk

353
00:13:35,830 --> 00:13:39,820
through some of those concerns so let's

354
00:13:39,820 --> 00:13:45,130
build a little bit this slide we're

355
00:13:45,130 --> 00:13:46,390
going to talk through a couple of the

356
00:13:46,390 --> 00:13:49,480
options in the AWS toolset that actually

357
00:13:49,480 --> 00:13:52,470
we use regularly for service

358
00:13:52,470 --> 00:13:55,410
applications so broader architectures

359
00:13:55,410 --> 00:13:58,450
some of these are arguable they fall

360
00:13:58,450 --> 00:14:00,400
into slightly different categories and

361
00:14:00,400 --> 00:14:02,710
maybe somebody like well that's not pure

362
00:14:02,710 --> 00:14:05,260
serverless that's the bass or something

363
00:14:05,260 --> 00:14:07,690
yeah I get that but overall from a

364
00:14:07,690 --> 00:14:09,190
service architecture standpoint here's a

365
00:14:09,190 --> 00:14:11,740
few things to be aware of we use route

366
00:14:11,740 --> 00:14:14,100
53 anytime we can to do dns resolution

367
00:14:14,100 --> 00:14:18,130
because it ties so seamlessly into some

368
00:14:18,130 --> 00:14:19,840
of the other pieces like the API gateway

369
00:14:19,840 --> 00:14:22,660
if you have not looked into the API

370
00:14:22,660 --> 00:14:24,610
management structures for several of the

371
00:14:24,610 --> 00:14:26,620
different cloud providers API gateway is

372
00:14:26,620 --> 00:14:30,310
great they're the the way you can define

373
00:14:30,310 --> 00:14:33,130
and manage configuration for even

374
00:14:33,130 --> 00:14:35,020
authentication and header parsing

375
00:14:35,020 --> 00:14:35,770
different things like that

376
00:14:35,770 --> 00:14:39,790
it's pretty pretty slick lambdas

377
00:14:39,790 --> 00:14:41,530
themselves this is this is pretty

378
00:14:41,530 --> 00:14:43,150
standard this is what every provider has

379
00:14:43,150 --> 00:14:46,840
as their cloud functions you you provide

380
00:14:46,840 --> 00:14:50,020
enough logic to run as a single logical

381
00:14:50,020 --> 00:14:52,540
execution and you want to break it down

382
00:14:52,540 --> 00:14:54,280
and make sure you don't throw too much

383
00:14:54,280 --> 00:14:55,750
in there you're going to run within

384
00:14:55,750 --> 00:14:58,020
restrictions in the different providers

385
00:14:58,020 --> 00:15:00,730
such as within lambdas if you're running

386
00:15:00,730 --> 00:15:03,220
more than I believe it's a five Meg

387
00:15:03,220 --> 00:15:05,830
payload in a post request in or into the

388
00:15:05,830 --> 00:15:07,930
context into the lambda is your your cap

389
00:15:07,930 --> 00:15:10,300
it also has a time limit of a five

390
00:15:10,300 --> 00:15:12,910
minute processing time so anything

391
00:15:12,910 --> 00:15:14,380
beyond that and it will automatically

392
00:15:14,380 --> 00:15:16,480
shut it down so there are things like

393
00:15:16,480 --> 00:15:18,640
that you just have to be aware of which

394
00:15:18,640 --> 00:15:20,530
will help you discern where in your

395
00:15:20,530 --> 00:15:22,570
logic to slice up the pieces to make it

396
00:15:22,570 --> 00:15:24,630
affordable and still be able to process

397
00:15:24,630 --> 00:15:29,230
so lambdas um you see what's next s3

398
00:15:29,230 --> 00:15:32,320
this is your object stores this is

399
00:15:32,320 --> 00:15:35,740
basically I'm mmm AWS makes it very

400
00:15:35,740 --> 00:15:38,140
distinct that it is not a static asset

401
00:15:38,140 --> 00:15:39,460
store it is an object store you

402
00:15:39,460 --> 00:15:40,780
basically could drop anything you want

403
00:15:40,780 --> 00:15:43,840
in there this is the one that has given

404
00:15:43,840 --> 00:15:45,130
us trouble with eventual consists

405
00:15:45,130 --> 00:15:46,750
see you just have to be aware of that

406
00:15:46,750 --> 00:15:49,300
and then we'll look at dynamodb this is

407
00:15:49,300 --> 00:15:51,310
our new seek no sequel store highly

408
00:15:51,310 --> 00:15:55,120
scalable incredibly fast connection

409
00:15:55,120 --> 00:15:58,330
speeds read speeds write speeds and then

410
00:15:58,330 --> 00:16:00,490
sqs the and the reason I threw these up

411
00:16:00,490 --> 00:16:01,390
on here is because these are the ones

412
00:16:01,390 --> 00:16:03,550
will actually talk through on a couple

413
00:16:03,550 --> 00:16:05,380
of the architectural diagrams that we'll

414
00:16:05,380 --> 00:16:08,140
look at in a moment so sqs is just what

415
00:16:08,140 --> 00:16:09,550
it sounds like it's a queueing service

416
00:16:09,550 --> 00:16:10,870
it's a hosted and managed queuing

417
00:16:10,870 --> 00:16:12,670
service you set it up and you start

418
00:16:12,670 --> 00:16:14,880
dropping items into it and then you can

419
00:16:14,880 --> 00:16:17,230
reach out to it and check to see if

420
00:16:17,230 --> 00:16:18,700
there's anything on the queue for you to

421
00:16:18,700 --> 00:16:22,120
resolve and it supports both standard

422
00:16:22,120 --> 00:16:24,940
queuing as well as 5o queuing so you can

423
00:16:24,940 --> 00:16:26,140
you can do a lot of different things

424
00:16:26,140 --> 00:16:27,330
with it

425
00:16:27,330 --> 00:16:29,920
so one of the examples I'm going to talk

426
00:16:29,920 --> 00:16:33,880
through is a problem space I ran into

427
00:16:33,880 --> 00:16:37,260
where we had a couple api's internally

428
00:16:37,260 --> 00:16:39,730
these were api's that had been spun up

429
00:16:39,730 --> 00:16:42,700
and as we all know there's no such thing

430
00:16:42,700 --> 00:16:45,070
as a proof-of-concept that stays a proof

431
00:16:45,070 --> 00:16:47,290
of concept any time you show it to

432
00:16:47,290 --> 00:16:49,030
somebody somebody starts using it and

433
00:16:49,030 --> 00:16:51,250
now you have to support it and we had

434
00:16:51,250 --> 00:16:52,840
several api's that had been built

435
00:16:52,840 --> 00:16:55,320
internally for different teams and a

436
00:16:55,320 --> 00:16:57,760
security audit came through and realized

437
00:16:57,760 --> 00:16:59,830
that we had multiple api's that had

438
00:16:59,830 --> 00:17:02,680
accessed the data that were not fronted

439
00:17:02,680 --> 00:17:05,320
with any type of authentication now good

440
00:17:05,320 --> 00:17:06,970
news is they were only on the internal

441
00:17:06,970 --> 00:17:08,200
network however they still were not

442
00:17:08,200 --> 00:17:10,810
fronted with authentication so we were

443
00:17:10,810 --> 00:17:13,270
tasked with figuring out a way to try

444
00:17:13,270 --> 00:17:18,670
and Front existing api's with basically

445
00:17:18,670 --> 00:17:20,920
an OAuth style authentication of some

446
00:17:20,920 --> 00:17:23,020
sort well we could give API keys out to

447
00:17:23,020 --> 00:17:25,390
only those who need access to it and we

448
00:17:25,390 --> 00:17:27,070
could do some type of token exchange to

449
00:17:27,070 --> 00:17:29,890
grant access into those api's so if

450
00:17:29,890 --> 00:17:31,030
you've ever done something like that

451
00:17:31,030 --> 00:17:32,950
before where you've had an existing API

452
00:17:32,950 --> 00:17:34,600
and you've had to try and put something

453
00:17:34,600 --> 00:17:36,100
in front of it it can be extremely

454
00:17:36,100 --> 00:17:39,700
challenging in this case we came up with

455
00:17:39,700 --> 00:17:42,580
something that worked decently well see

456
00:17:42,580 --> 00:17:46,150
if I can point over here essentially the

457
00:17:46,150 --> 00:17:48,310
goal is we have an application layer

458
00:17:48,310 --> 00:17:49,840
down here so this is something that was

459
00:17:49,840 --> 00:17:52,000
already existing okay the applications

460
00:17:52,000 --> 00:17:55,540
there the API is being hit but there's

461
00:17:55,540 --> 00:17:57,730
no security layer in front of it and so

462
00:17:57,730 --> 00:17:59,030
what we were able to do

463
00:17:59,030 --> 00:18:06,190
is take a right here the API gateway and

464
00:18:06,190 --> 00:18:10,720
set up a basically just an authorization

465
00:18:10,720 --> 00:18:13,460
password exchange so you can take your

466
00:18:13,460 --> 00:18:16,190
API key and your secret and you can hit

467
00:18:16,190 --> 00:18:18,890
an endpoint here that will reach out

468
00:18:18,890 --> 00:18:20,840
into the this is kind of where the

469
00:18:20,840 --> 00:18:22,940
application layer I guess from the the

470
00:18:22,940 --> 00:18:25,550
oauth thing that we created and there's

471
00:18:25,550 --> 00:18:27,040
a lambda here that's your Authenticator

472
00:18:27,040 --> 00:18:30,710
that really just checks your password if

473
00:18:30,710 --> 00:18:33,320
you're in the the API keys that have

474
00:18:33,320 --> 00:18:35,210
been granted it checks to make sure

475
00:18:35,210 --> 00:18:37,420
you've got the appropriate role it

476
00:18:37,420 --> 00:18:39,980
creates a new token it drops a token

477
00:18:39,980 --> 00:18:42,260
into another DB table and another dynamo

478
00:18:42,260 --> 00:18:44,960
table the reason we chose this

479
00:18:44,960 --> 00:18:47,900
architecture is DynamoDB tables allow

480
00:18:47,900 --> 00:18:51,350
you to specify a TTL on every item that

481
00:18:51,350 --> 00:18:54,500
you drop into the table and at that TTL

482
00:18:54,500 --> 00:18:56,480
it will auto expire that item and remove

483
00:18:56,480 --> 00:18:58,520
it from your table so for this solution

484
00:18:58,520 --> 00:19:00,770
it worked really well because if we had

485
00:19:00,770 --> 00:19:03,260
you know let's say we had five minutes

486
00:19:03,260 --> 00:19:04,910
oaken's and we only wanted them good for

487
00:19:04,910 --> 00:19:06,830
a certain amount of time we could drop

488
00:19:06,830 --> 00:19:09,680
them into our token table and they would

489
00:19:09,680 --> 00:19:11,000
auto expire in that amount of time we

490
00:19:11,000 --> 00:19:12,260
didn't have to do any manual cleanup

491
00:19:12,260 --> 00:19:14,810
which was fantastic in this case once

492
00:19:14,810 --> 00:19:17,180
that's done the Authenticator simply

493
00:19:17,180 --> 00:19:19,100
returns with the token that they just

494
00:19:19,100 --> 00:19:24,110
generated and the user or application

495
00:19:24,110 --> 00:19:25,220
whatever it is it's hitting the end

496
00:19:25,220 --> 00:19:27,890
point then can pick up that token pass

497
00:19:27,890 --> 00:19:30,560
it off to the API that they were trying

498
00:19:30,560 --> 00:19:33,380
to reach anyway and provide an

499
00:19:33,380 --> 00:19:35,240
authorization header with a bearer token

500
00:19:35,240 --> 00:19:37,970
on it that then fires off a secondary

501
00:19:37,970 --> 00:19:40,250
lambda that all it knows how to do is

502
00:19:40,250 --> 00:19:41,900
authorize the only thing this lambda

503
00:19:41,900 --> 00:19:44,510
does is it takes the header and it looks

504
00:19:44,510 --> 00:19:46,910
in here to see if it exists and if it

505
00:19:46,910 --> 00:19:48,830
has the appropriate scopes for you to

506
00:19:48,830 --> 00:19:50,530
execute what you're trying to execute an

507
00:19:50,530 --> 00:19:55,160
api gateway right here actually has a

508
00:19:55,160 --> 00:19:58,450
concept of authorizer and the authorizer

509
00:19:58,450 --> 00:20:01,700
basically says you can check your token

510
00:20:01,700 --> 00:20:07,010
you can build up an AWS what's the term

511
00:20:07,010 --> 00:20:09,260
lost my lost my train of thought but you

512
00:20:09,260 --> 00:20:10,700
basically build up your policy that's

513
00:20:10,700 --> 00:20:12,870
what it is that grants our denies

514
00:20:12,870 --> 00:20:15,150
as to what they're wanting and the API

515
00:20:15,150 --> 00:20:16,950
gateway will receive that policy and

516
00:20:16,950 --> 00:20:18,990
actually cache it at that layer so all

517
00:20:18,990 --> 00:20:20,630
subsequent requests that that endpoint

518
00:20:20,630 --> 00:20:22,920
will actually use the same policy that's

519
00:20:22,920 --> 00:20:25,110
been cached so you can actually replay

520
00:20:25,110 --> 00:20:26,790
tokens without having to overload the

521
00:20:26,790 --> 00:20:28,440
number of executions of your lambdas

522
00:20:28,440 --> 00:20:31,410
which ends up saving even more money so

523
00:20:31,410 --> 00:20:33,450
I get a jump ahead I just got got the

524
00:20:33,450 --> 00:20:35,760
signal here so application layer you end

525
00:20:35,760 --> 00:20:37,650
up doing the handoff once everything has

526
00:20:37,650 --> 00:20:41,850
been granted and you move forward this

527
00:20:41,850 --> 00:20:44,120
one I think is a little more

528
00:20:44,120 --> 00:20:47,160
approachable this is a full-on if we

529
00:20:47,160 --> 00:20:48,840
wanted to do something like a mailing

530
00:20:48,840 --> 00:20:52,800
list we could actually have the route 53

531
00:20:52,800 --> 00:20:54,540
layer the DNS resolution had an API

532
00:20:54,540 --> 00:20:57,390
gateway we can have the Gateway simply

533
00:20:57,390 --> 00:21:01,260
drop payloads into like a registration

534
00:21:01,260 --> 00:21:04,230
bucket so lambda can fire off mail great

535
00:21:04,230 --> 00:21:05,490
yo you wanted to register we're gonna

536
00:21:05,490 --> 00:21:07,440
drop drop your email address into a

537
00:21:07,440 --> 00:21:10,200
dynamo DB table and then you might have

538
00:21:10,200 --> 00:21:11,760
an administrator come in later and want

539
00:21:11,760 --> 00:21:13,590
to actually send an email and they can

540
00:21:13,590 --> 00:21:14,910
hit a different endpoint on the API

541
00:21:14,910 --> 00:21:17,280
gateway and it'll kick you over and

542
00:21:17,280 --> 00:21:19,320
build up a queue of all the emails that

543
00:21:19,320 --> 00:21:20,610
need to be sent and then you can process

544
00:21:20,610 --> 00:21:23,160
them however you like I want to jump

545
00:21:23,160 --> 00:21:25,950
real quick and see if I can do a quick

546
00:21:25,950 --> 00:21:31,170
demo or not so give me one moment I've

547
00:21:31,170 --> 00:21:38,590
got just a couple minutes here and

548
00:21:38,600 --> 00:21:41,760
alright so this is a whirlwind I will

549
00:21:41,760 --> 00:21:43,890
tell you now I'm going to probably have

550
00:21:43,890 --> 00:21:46,260
to cut this very short so if you have

551
00:21:46,260 --> 00:21:47,880
questions or you want to walk through

552
00:21:47,880 --> 00:21:49,730
this with me later please find me I'm

553
00:21:49,730 --> 00:21:51,870
happy to talk through as much of this as

554
00:21:51,870 --> 00:21:53,040
I can

555
00:21:53,040 --> 00:21:56,220
API gateway essentially allows you to

556
00:21:56,220 --> 00:21:58,980
just specify all of your endpoints like

557
00:21:58,980 --> 00:22:01,290
you would it's almost if you've used

558
00:22:01,290 --> 00:22:02,820
swagger or anything like that or or you

559
00:22:02,820 --> 00:22:04,860
use happy Jas or anything that where you

560
00:22:04,860 --> 00:22:09,600
can do a declarative style ap is or

561
00:22:09,600 --> 00:22:11,610
routes that's basically what we can do

562
00:22:11,610 --> 00:22:15,570
here and then you wire it up directly to

563
00:22:15,570 --> 00:22:17,130
a lambda so you've got up here you see

564
00:22:17,130 --> 00:22:19,080
the type as a lambda proxy on the

565
00:22:19,080 --> 00:22:21,690
integration request basically what that

566
00:22:21,690 --> 00:22:24,060
tells the api gateway to do is to do a

567
00:22:24,060 --> 00:22:26,070
little bit of pre-processing and

568
00:22:26,070 --> 00:22:27,570
create a context that's going to hand

569
00:22:27,570 --> 00:22:29,760
off to your lambda function and so then

570
00:22:29,760 --> 00:22:31,700
you write a little bit of node in your

571
00:22:31,700 --> 00:22:47,610
lambdas over here slow there we go if

572
00:22:47,610 --> 00:22:49,020
that loads that's great but there's some

573
00:22:49,020 --> 00:22:51,810
node it's just a function that accepts a

574
00:22:51,810 --> 00:22:53,070
context and some additional parameters

575
00:22:53,070 --> 00:22:54,720
depending on the type of lambda you want

576
00:22:54,720 --> 00:22:56,070
there's a lot more complexity I'm

577
00:22:56,070 --> 00:22:58,380
smoothing a little bit of it over but it

578
00:22:58,380 --> 00:23:00,270
gets handed of context from that context

579
00:23:00,270 --> 00:23:01,860
you can basically look at the payload

580
00:23:01,860 --> 00:23:02,970
that was parsed out you can look at the

581
00:23:02,970 --> 00:23:04,470
headers you can make all kinds of

582
00:23:04,470 --> 00:23:06,750
different decisions within your lambda

583
00:23:06,750 --> 00:23:09,450
of what to do further and so in this

584
00:23:09,450 --> 00:23:11,940
case I'm trying to load the email

585
00:23:11,940 --> 00:23:13,410
sending one in this case we would

586
00:23:13,410 --> 00:23:15,900
actually grab from dynamodb our entire

587
00:23:15,900 --> 00:23:18,270
list of emails that have been registered

588
00:23:18,270 --> 00:23:20,340
we would then take the body that was

589
00:23:20,340 --> 00:23:22,050
sent to us and we just kind of line them

590
00:23:22,050 --> 00:23:23,460
up together and send off an email to

591
00:23:23,460 --> 00:23:24,960
each one of the users so it's a really

592
00:23:24,960 --> 00:23:27,390
really rudimentary email management or

593
00:23:27,390 --> 00:23:29,970
marketing type thing but that's that's

594
00:23:29,970 --> 00:23:32,910
essentially all that there is in it is

595
00:23:32,910 --> 00:23:35,730
the ability to wire up your API directly

596
00:23:35,730 --> 00:23:37,320
into a lambda that knows how to process

597
00:23:37,320 --> 00:23:39,150
glean the data that's been dropped in

598
00:23:39,150 --> 00:23:42,030
from somewhere else so that never did

599
00:23:42,030 --> 00:23:45,810
load did it nope all right well come to

600
00:23:45,810 --> 00:23:50,070
be later well we'll run through it so

601
00:23:50,070 --> 00:23:52,200
again that's all this this diagram is

602
00:23:52,200 --> 00:23:54,150
showing in this case what I was doing is

603
00:23:54,150 --> 00:23:56,490
dropping it into a queue and SQS and

604
00:23:56,490 --> 00:23:58,020
then we'd be able to pull that queue and

605
00:23:58,020 --> 00:24:00,120
pull off the generated emails to send

606
00:24:00,120 --> 00:24:01,290
off you could have an iron port or

607
00:24:01,290 --> 00:24:02,900
something like that to actually process

608
00:24:02,900 --> 00:24:08,250
major email loads so besides that a

609
00:24:08,250 --> 00:24:09,450
little bit of homework there are

610
00:24:09,450 --> 00:24:11,550
multiple multiple multiple things to

611
00:24:11,550 --> 00:24:13,380
consider we have not talked about this

612
00:24:13,380 --> 00:24:16,620
is a very high level we have things like

613
00:24:16,620 --> 00:24:18,540
I am roles you've got security models

614
00:24:18,540 --> 00:24:20,340
you've got VPC for your private cloud

615
00:24:20,340 --> 00:24:22,890
you have Direct Connect which I did

616
00:24:22,890 --> 00:24:24,510
mention which lets you run things on

617
00:24:24,510 --> 00:24:27,330
your internal or business network so

618
00:24:27,330 --> 00:24:30,000
that you can actually control your

619
00:24:30,000 --> 00:24:31,260
security a little bit better or have

620
00:24:31,260 --> 00:24:33,060
security shared between internal and

621
00:24:33,060 --> 00:24:36,360
cloud applications if you're using my

622
00:24:36,360 --> 00:24:38,310
sequel Postgres something like that

623
00:24:38,310 --> 00:24:39,200
there are

624
00:24:39,200 --> 00:24:40,549
Frings to let you do that with your

625
00:24:40,549 --> 00:24:42,139
database and let them scale it or host

626
00:24:42,139 --> 00:24:45,080
it for you and again by them pretty much

627
00:24:45,080 --> 00:24:46,250
all the providers have this type of

628
00:24:46,250 --> 00:24:48,529
thing you've got caching layers you've

629
00:24:48,529 --> 00:24:50,450
got all kinds of different things you

630
00:24:50,450 --> 00:24:52,730
can use to to accent or complement the

631
00:24:52,730 --> 00:24:54,679
serverless offerings we've looked at to

632
00:24:54,679 --> 00:24:56,510
build out a much broader and more secure

633
00:24:56,510 --> 00:25:00,200
application so I just did the demo and

634
00:25:00,200 --> 00:25:03,140
so that's it thank you very much

