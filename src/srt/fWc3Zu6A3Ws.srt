1
00:00:00,000 --> 00:00:03,519

[Applause]

2
00:00:03,529 --> 00:00:15,210
we are anxiously waiting I mean oh the

3
00:00:15,210 --> 00:00:16,410
other way it's giveaway it's always the

4
00:00:16,410 --> 00:00:19,560
other way right yeah we good I think

5
00:00:19,560 --> 00:00:21,960
we're good press press the have to think

6
00:00:21,960 --> 00:00:23,279
right okay okay oh the full screen yeah

7
00:00:23,279 --> 00:00:25,099
yeah yeah

8
00:00:25,099 --> 00:00:30,150
f4 full screen there we go yeah oh okay

9
00:00:30,150 --> 00:00:34,079
right ah so earlier this year a few of

10
00:00:34,079 --> 00:00:35,760
us went on a fact-finding mission to

11
00:00:35,760 --> 00:00:37,530
India to see how folks use the in turn

12
00:00:37,530 --> 00:00:39,000
out there and one thing stood out to us

13
00:00:39,000 --> 00:00:41,520
and that is that feature phones are back

14
00:00:41,520 --> 00:00:43,800
yeah the future phone market doubled in

15
00:00:43,800 --> 00:00:45,989
2018 in India and the sale of

16
00:00:45,989 --> 00:00:48,329
smartphones by kind of flattened out and

17
00:00:48,329 --> 00:00:50,219
at the current rate to this projected

18
00:00:50,219 --> 00:00:53,430
that 400 million feature phones will be

19
00:00:53,430 --> 00:00:55,829
sold in India this year alone yes and

20
00:00:55,829 --> 00:00:57,840
the one on the right over there the very

21
00:00:57,840 --> 00:00:59,940
far end that is a geophone which is the

22
00:00:59,940 --> 00:01:02,699
most popular brand and it costs just 15

23
00:01:02,699 --> 00:01:05,159
pounds and I compared to all the phones

24
00:01:05,159 --> 00:01:07,979
you all have here everything about all

25
00:01:07,979 --> 00:01:10,250
of these phones is extremely it's

26
00:01:10,250 --> 00:01:13,110
240 pixels wide it's single pixel

27
00:01:13,110 --> 00:01:15,900
density there is no touchscreen and the

28
00:01:15,900 --> 00:01:17,960
CPU is god-awful

29
00:01:17,960 --> 00:01:21,509
but it's 15 quid and that allows people

30
00:01:21,509 --> 00:01:23,880
to be on the internet that previously

31
00:01:23,880 --> 00:01:26,280
couldn't afford to be there yes and also

32
00:01:26,280 --> 00:01:27,659
the geophone on the end there this is a

33
00:01:27,659 --> 00:01:30,000
web-based phone that is running Kai OS

34
00:01:30,000 --> 00:01:32,729
which is a fork of the old Firefox OS so

35
00:01:32,729 --> 00:01:34,290
this phone is kind of is running Firefox

36
00:01:34,290 --> 00:01:36,630
42 for pretty much everything so a

37
00:01:36,630 --> 00:01:37,530
little team of us got together

38
00:01:37,530 --> 00:01:45,940
consisting of Surma Jake and Mary Coe

39
00:01:45,950 --> 00:01:48,689
she's in America Mike Mike is in America

40
00:01:48,689 --> 00:01:49,710
America is that way

41
00:01:49,710 --> 00:01:51,990
if you actually think it's quicker to go

42
00:01:51,990 --> 00:01:54,689
that way that way yeah either way if you

43
00:01:54,689 --> 00:01:58,380
just keep your phone so yeah what we

44
00:01:58,380 --> 00:01:59,850
wanted to see if it could we build an

45
00:01:59,850 --> 00:02:02,579
interactive web experience that would

46
00:02:02,579 --> 00:02:05,399
run on devices like this but you know

47
00:02:05,399 --> 00:02:07,560
with responsive design and progressive

48
00:02:07,560 --> 00:02:10,679
enhancement and enabling it to also

49
00:02:10,679 --> 00:02:13,060
scale up to something that looks

50
00:02:13,060 --> 00:02:15,250
on a desktop yes and that thing became

51
00:02:15,250 --> 00:02:18,580
procs it is a game if you like

52
00:02:18,580 --> 00:02:20,709
minesweeper you will like procs because

53
00:02:20,709 --> 00:02:23,550
it's the same play it now on proxy a p--

54
00:02:23,550 --> 00:02:25,930
so here's on desktop and as you can tell

55
00:02:25,930 --> 00:02:28,000
like we through all the animations at it

56
00:02:28,000 --> 00:02:30,250
and like make it fancy but keep in mind

57
00:02:30,250 --> 00:02:32,739
this entire thing scales down nicely and

58
00:02:32,739 --> 00:02:35,380
is playable on one of these 15 quid

59
00:02:35,380 --> 00:02:37,840
feature phones with the exact same code

60
00:02:37,840 --> 00:02:39,400
base yeah so we put a lot of effort into

61
00:02:39,400 --> 00:02:41,200
making it run really fast so we figured

62
00:02:41,200 --> 00:02:42,280
we'd go through some of the tricks and

63
00:02:42,280 --> 00:02:43,989
techniques that we use because none of

64
00:02:43,989 --> 00:02:46,000
its really unique to this particular web

65
00:02:46,000 --> 00:02:47,620
app it's stuff that you can apply to any

66
00:02:47,620 --> 00:02:50,440
site or all right but before we dive in

67
00:02:50,440 --> 00:02:52,330
I think it's important that we address a

68
00:02:52,330 --> 00:02:54,670
question that we still often see on

69
00:02:54,670 --> 00:02:58,810
Twitter yes should I care about

70
00:02:58,810 --> 00:03:01,390
performance should I care about

71
00:03:01,390 --> 00:03:04,239
performance should I care about

72
00:03:04,239 --> 00:03:12,250
performance I'll go to article 4 this is

73
00:03:12,250 --> 00:03:15,220
this one on web fundamentals there by

74
00:03:15,220 --> 00:03:18,100
Jeremy Jeremy where are you where is it

75
00:03:18,100 --> 00:03:21,160
he's actually here is he here he's

76
00:03:21,160 --> 00:03:23,230
supposed to be here the guy said to me

77
00:03:23,230 --> 00:03:24,489
last night really looking forward to

78
00:03:24,489 --> 00:03:28,329
your talk Jake where are you man it's

79
00:03:28,329 --> 00:03:30,519
just rude fine

80
00:03:30,519 --> 00:03:32,350
well okay well if you want to read

81
00:03:32,350 --> 00:03:35,110
Jeremy's article whatever you can find

82
00:03:35,110 --> 00:03:37,630
it at this bitly link it's like your

83
00:03:37,630 --> 00:03:39,430
points to all these web performance

84
00:03:39,430 --> 00:03:41,079
studies carried out by a variety of

85
00:03:41,079 --> 00:03:44,519
companies such as Pinterest who reduced

86
00:03:44,519 --> 00:03:47,859
their perceived wait times by 40% and so

87
00:03:47,859 --> 00:03:50,829
on increase by 15% in signups or cookie

88
00:03:50,829 --> 00:03:52,090
reduced a load time by under 50

89
00:03:52,090 --> 00:03:53,200
milliseconds and saw an increase in

90
00:03:53,200 --> 00:03:54,459
conversions on session time or the BBC

91
00:03:54,459 --> 00:03:55,810
velocity initial times of users and

92
00:03:55,810 --> 00:03:56,769
everything that's how they paid it to

93
00:03:56,769 --> 00:03:58,090
load or also anything huge is playful

94
00:03:58,090 --> 00:03:59,799
time by half and some boost in sales

95
00:03:59,799 --> 00:04:02,380
well no but responded by 250 seconds

96
00:04:02,380 --> 00:04:04,359
terms ignition supply right although

97
00:04:04,359 --> 00:04:06,220
that's a large variety of sites like

98
00:04:06,220 --> 00:04:08,320
we'd still see folks saying like mmm

99
00:04:08,320 --> 00:04:10,239
this yeah it's all very interesting but

100
00:04:10,239 --> 00:04:12,220
it doesn't apply to my sites because

101
00:04:12,220 --> 00:04:14,140
like my site is somehow different yeah

102
00:04:14,140 --> 00:04:15,790
they sound like one aspect in the study

103
00:04:15,790 --> 00:04:17,410
that they feel like their own site

104
00:04:17,410 --> 00:04:18,789
doesn't match too and therefore the

105
00:04:18,789 --> 00:04:21,729
entire evidence provided is invalid we

106
00:04:21,729 --> 00:04:24,880
don't buy that now I think everyone in

107
00:04:24,880 --> 00:04:26,100
this room right is a you

108
00:04:26,100 --> 00:04:28,350
of software we know how frustrating it

109
00:04:28,350 --> 00:04:30,690
is when something performs badly and low

110
00:04:30,690 --> 00:04:32,790
time is just such a big part that the

111
00:04:32,790 --> 00:04:34,110
performance optimizations if you're

112
00:04:34,110 --> 00:04:35,730
going to talk about in this talk are

113
00:04:35,730 --> 00:04:38,790
pretty simple dead easy literally two

114
00:04:38,790 --> 00:04:42,210
minutes on paper but when you've got a

115
00:04:42,210 --> 00:04:44,340
build system wrapped around your project

116
00:04:44,340 --> 00:04:46,530
as most of us do just adding something

117
00:04:46,530 --> 00:04:48,450
like a tag to a page can become like a

118
00:04:48,450 --> 00:04:49,650
real pain so we're going to take a look

119
00:04:49,650 --> 00:04:51,450
at that side of things as well so let's

120
00:04:51,450 --> 00:04:54,180
rewind to the first alpha version of

121
00:04:54,180 --> 00:04:56,730
trucks before we had done any of our

122
00:04:56,730 --> 00:04:58,380
performance work yes this is totally the

123
00:04:58,380 --> 00:04:59,910
real alpha version not a version we just

124
00:04:59,910 --> 00:05:01,490
retrofitted for the sake of the shut up

125
00:05:01,490 --> 00:05:04,710
you're ruining the illusion I'm sorry so

126
00:05:04,710 --> 00:05:07,380
aside from being a bit slow it wasn't

127
00:05:07,380 --> 00:05:09,720
really all that different from your

128
00:05:09,720 --> 00:05:11,850
average everyday JavaScript driven app

129
00:05:11,850 --> 00:05:14,460
yeah so HTML was pretty basic right it

130
00:05:14,460 --> 00:05:15,500
content a little bit of metadata

131
00:05:15,500 --> 00:05:17,220
JavaScript file that took care of

132
00:05:17,220 --> 00:05:19,110
populating the page we've got a style

133
00:05:19,110 --> 00:05:20,670
sheet there that star sheet is just for

134
00:05:20,670 --> 00:05:23,340
a web font the rest of our CSS was

135
00:05:23,340 --> 00:05:25,430
embedded in our JavaScript via post CSS

136
00:05:25,430 --> 00:05:28,320
the notable difference from most web

137
00:05:28,320 --> 00:05:31,200
apps I think is that we used pre-act

138
00:05:31,200 --> 00:05:35,010
instead of react react is 33k pre-act is

139
00:05:35,010 --> 00:05:38,250
3k react can do much more but none of

140
00:05:38,250 --> 00:05:39,870
the things that it can do more we

141
00:05:39,870 --> 00:05:41,970
actually needed so for us was really

142
00:05:41,970 --> 00:05:44,520
like a no-brainer to be able to save 30k

143
00:05:44,520 --> 00:05:45,930
it's straight out the start yes

144
00:05:45,930 --> 00:05:47,130
absolutely any other difference is we

145
00:05:47,130 --> 00:05:49,380
used roll-up basically because we wanted

146
00:05:49,380 --> 00:05:50,940
to give it a try like we'd use roll-up

147
00:05:50,940 --> 00:05:52,470
in before for like libraries and stuff

148
00:05:52,470 --> 00:05:55,140
but but not for full web apps so if the

149
00:05:55,140 --> 00:05:56,760
last year we build a web app called

150
00:05:56,760 --> 00:06:00,150
sploosh and to build swoosh we used web

151
00:06:00,150 --> 00:06:03,180
hack and when I say we I really mean our

152
00:06:03,180 --> 00:06:07,500
colleague Jason handle the back side of

153
00:06:07,500 --> 00:06:13,740
things and he basically had to make use

154
00:06:13,740 --> 00:06:16,920
of lots of undocumented and internal web

155
00:06:16,920 --> 00:06:20,730
pack api's just to achieve basic stuff

156
00:06:20,730 --> 00:06:23,790
and he has years of web pack experiences

157
00:06:23,790 --> 00:06:25,650
really comfortable with it the two of us

158
00:06:25,650 --> 00:06:28,650
on the other hand don't yes so as a

159
00:06:28,650 --> 00:06:29,730
result like we didn't understand the

160
00:06:29,730 --> 00:06:31,830
project build system if something went

161
00:06:31,830 --> 00:06:34,140
wrong that was non-trivial which most of

162
00:06:34,140 --> 00:06:35,610
it was non-trivial

163
00:06:35,610 --> 00:06:37,380
we were kind of helpless until Jason

164
00:06:37,380 --> 00:06:38,500
woke up on the other side of the

165
00:06:38,500 --> 00:06:40,690
and talking to some other teams

166
00:06:40,690 --> 00:06:43,030
internally and exhale we hear similar

167
00:06:43,030 --> 00:06:44,680
stories there's like one or two people

168
00:06:44,680 --> 00:06:46,090
who are considered the webpack

169
00:06:46,090 --> 00:06:47,830
whisperers on the team it's their sole

170
00:06:47,830 --> 00:06:49,780
job to like maintain the built system

171
00:06:49,780 --> 00:06:52,270
and nobody else actually really dares to

172
00:06:52,270 --> 00:06:54,250
touch it and maybe this sounds too

173
00:06:54,250 --> 00:06:55,630
familiar to some of the people here in

174
00:06:55,630 --> 00:06:58,840
the room yes so when I use webpack I

175
00:06:58,840 --> 00:07:00,970
don't feel like I'm using JavaScript I

176
00:07:00,970 --> 00:07:03,100
feel like I'm switching like pulling

177
00:07:03,100 --> 00:07:04,360
levers switching switches and I get

178
00:07:04,360 --> 00:07:06,700
massive config objects like and herding

179
00:07:06,700 --> 00:07:08,470
lots of plugins around a varying quality

180
00:07:08,470 --> 00:07:09,730
that often don't really play well

181
00:07:09,730 --> 00:07:11,830
together yeah and so we tried roll up

182
00:07:11,830 --> 00:07:14,020
and we found lots of plugins of varying

183
00:07:14,020 --> 00:07:15,400
quality that don't really play well

184
00:07:15,400 --> 00:07:18,400
together but the big difference is mere

185
00:07:18,400 --> 00:07:20,080
mortals can write their own plugins roll

186
00:07:20,080 --> 00:07:21,820
up has this simple well-documented

187
00:07:21,820 --> 00:07:23,380
plug-in system so it's easy to get

188
00:07:23,380 --> 00:07:25,000
involved in the innards of the build now

189
00:07:25,000 --> 00:07:26,530
if you know enough JavaScript to wrangle

190
00:07:26,530 --> 00:07:28,510
a web pack config you know more than

191
00:07:28,510 --> 00:07:30,430
enough to write a rollup plug-in and we

192
00:07:30,430 --> 00:07:32,169
knew we were going to do unusual stuff

193
00:07:32,169 --> 00:07:34,360
if it was clear to us and on these super

194
00:07:34,360 --> 00:07:36,730
low end feature phones it's gonna be

195
00:07:36,730 --> 00:07:38,350
hard to have everything on the main

196
00:07:38,350 --> 00:07:41,410
thread so we wanted to make workers core

197
00:07:41,410 --> 00:07:43,270
part of our architecture straight from

198
00:07:43,270 --> 00:07:43,720
the start

199
00:07:43,720 --> 00:07:46,180
yes and there's you know the problem is

200
00:07:46,180 --> 00:07:48,220
that we now have multiple threads and

201
00:07:48,220 --> 00:07:49,840
the problem is that there's often shared

202
00:07:49,840 --> 00:07:52,000
dependencies between these multiple

203
00:07:52,000 --> 00:07:53,860
plant fats so to solve that we use

204
00:07:53,860 --> 00:07:55,120
common link and that facilitates the

205
00:07:55,120 --> 00:07:56,500
communication between workers the main

206
00:07:56,500 --> 00:07:59,200
thread library that you wrote but that

207
00:07:59,200 --> 00:08:00,790
means that library needs to appear you

208
00:08:00,790 --> 00:08:02,320
know on all of the workers and on the

209
00:08:02,320 --> 00:08:04,240
main thread now web pack can't share

210
00:08:04,240 --> 00:08:05,710
chunks between workers and the main

211
00:08:05,710 --> 00:08:07,390
thread so news would end up downloading

212
00:08:07,390 --> 00:08:09,580
it well at least twice once for every

213
00:08:09,580 --> 00:08:11,500
worker plus one and this would happen

214
00:08:11,500 --> 00:08:13,479
for each additional shared dependency

215
00:08:13,479 --> 00:08:15,910
and the roll-up kind of handles this for

216
00:08:15,910 --> 00:08:17,530
free out of the box because at least the

217
00:08:17,530 --> 00:08:20,410
choice of format up to you yeah it

218
00:08:20,410 --> 00:08:21,669
wasn't just JavaScript needed handle

219
00:08:21,669 --> 00:08:23,590
either because you know we needed HTML

220
00:08:23,590 --> 00:08:26,590
as well and there is what plugin for you

221
00:08:26,590 --> 00:08:31,210
to create HTML for your project but here

222
00:08:31,210 --> 00:08:34,270
is the code for that plugin and its

223
00:08:34,270 --> 00:08:37,030
massive and again it relies on loads of

224
00:08:37,030 --> 00:08:39,789
internal and undocumented parts of web

225
00:08:39,789 --> 00:08:41,560
pack yeah this booking is so big it has

226
00:08:41,560 --> 00:08:44,530
its own plug-in ecosystem as well and

227
00:08:44,530 --> 00:08:46,000
it's kind of the way it works it doesn't

228
00:08:46,000 --> 00:08:48,070
really want you touching the HTML itself

229
00:08:48,070 --> 00:08:49,510
instead it wants you to learn the

230
00:08:49,510 --> 00:08:50,810
configuration options and

231
00:08:50,810 --> 00:08:52,759
you know all of that and learn all of

232
00:08:52,759 --> 00:08:55,129
their quirks as well like it turns out

233
00:08:55,129 --> 00:08:57,019
that your skills in HTML which I imagine

234
00:08:57,019 --> 00:08:58,430
even many of us already have they are

235
00:08:58,430 --> 00:09:00,139
completely useless when you're using

236
00:09:00,139 --> 00:09:01,939
this plugin so we try to find the

237
00:09:01,939 --> 00:09:03,259
equivalent plugin for roll-up and

238
00:09:03,259 --> 00:09:04,790
couldn't find one to make us comparison

239
00:09:04,790 --> 00:09:08,209
fair so we decided to write our own so

240
00:09:08,209 --> 00:09:10,579
roller plugins are just functions that

241
00:09:10,579 --> 00:09:12,829
return objects and that object has a

242
00:09:12,829 --> 00:09:14,540
name key just so that your plugin can

243
00:09:14,540 --> 00:09:16,399
have a name and Rob can generate nice

244
00:09:16,399 --> 00:09:18,110
error messages and debug messages and

245
00:09:18,110 --> 00:09:19,850
the rest of his object are just

246
00:09:19,850 --> 00:09:22,970
callbacks for the various stages of the

247
00:09:22,970 --> 00:09:24,459
build and these are all very

248
00:09:24,459 --> 00:09:26,540
well-documented yeah so the one we're

249
00:09:26,540 --> 00:09:27,680
gonna use for this one so we're gonna

250
00:09:27,680 --> 00:09:29,899
use the generate bundle hook and this is

251
00:09:29,899 --> 00:09:31,639
called just before it writes everything

252
00:09:31,639 --> 00:09:33,740
to disk you get the options that roll-up

253
00:09:33,740 --> 00:09:35,389
was called with there and you also get

254
00:09:35,389 --> 00:09:37,449
this bundle object which looks like this

255
00:09:37,449 --> 00:09:40,040
this tells you everything about the the

256
00:09:40,040 --> 00:09:42,529
build you know so so as for the

257
00:09:42,529 --> 00:09:43,970
JavaScript files for example you get the

258
00:09:43,970 --> 00:09:45,920
initial path the path the source file

259
00:09:45,920 --> 00:09:48,079
you get the output filename which has

260
00:09:48,079 --> 00:09:50,930
been hashed for long paths which are

261
00:09:50,930 --> 00:09:53,149
caching and but it also loads of other

262
00:09:53,149 --> 00:09:56,089
data like dependencies and which exports

263
00:09:56,089 --> 00:10:00,050
it has and JavaScript files you do get a

264
00:10:00,050 --> 00:10:02,449
subset of this kind of information did I

265
00:10:02,449 --> 00:10:04,040
go too fast through my bit and not keep

266
00:10:04,040 --> 00:10:05,329
time to open the bottle I'm sorry is

267
00:10:05,329 --> 00:10:06,559
that the fizzy water or the still water

268
00:10:06,559 --> 00:10:08,300
I feel very strongly about this stuff

269
00:10:08,300 --> 00:10:14,089
which will that still okay right yes so

270
00:10:14,089 --> 00:10:15,920
this is the whole build config tells us

271
00:10:15,920 --> 00:10:17,389
everything about what's going on inside

272
00:10:17,389 --> 00:10:19,819
roll ups little world but we can use

273
00:10:19,819 --> 00:10:22,189
this to create our HTML so what we're

274
00:10:22,189 --> 00:10:23,120
going to do is we're going to load an

275
00:10:23,120 --> 00:10:26,149
ejs templates and compile it and now you

276
00:10:26,149 --> 00:10:27,589
know we're just using a GS as an example

277
00:10:27,589 --> 00:10:29,209
well it's the one we use but you can use

278
00:10:29,209 --> 00:10:31,040
any templating language you want like

279
00:10:31,040 --> 00:10:33,679
roll up doesn't care all we all it cares

280
00:10:33,679 --> 00:10:35,179
about is it wants to know about this

281
00:10:35,179 --> 00:10:36,829
HTML and it wants to know where to write

282
00:10:36,829 --> 00:10:38,720
it to so we're going to use roll-ups

283
00:10:38,720 --> 00:10:41,300
Amit file method there you tell it's an

284
00:10:41,300 --> 00:10:42,949
asset and you give it a file name and

285
00:10:42,949 --> 00:10:44,509
you give it the source of the HTML and

286
00:10:44,509 --> 00:10:46,220
now roll up will write that file along

287
00:10:46,220 --> 00:10:48,709
with everything else so here's our

288
00:10:48,709 --> 00:10:50,209
template now we've got a placeholder

289
00:10:50,209 --> 00:10:53,089
here for the JavaScript file name which

290
00:10:53,089 --> 00:10:54,829
we don't know ahead of time because as I

291
00:10:54,829 --> 00:10:57,199
said roll up will add a hash to the file

292
00:10:57,199 --> 00:10:59,899
name so we need to pass in that final

293
00:10:59,899 --> 00:11:01,910
file name into our templating engine

294
00:11:01,910 --> 00:11:02,810
after half

295
00:11:02,810 --> 00:11:05,600
and we can get this as I said from the

296
00:11:05,600 --> 00:11:07,490
bundle object since it tells us both the

297
00:11:07,490 --> 00:11:09,290
input path in the output path so we

298
00:11:09,290 --> 00:11:11,690
create little helper here called get J s

299
00:11:11,690 --> 00:11:13,460
which we just goes to the bundle and

300
00:11:13,460 --> 00:11:16,550
finds the corresponding file yes so now

301
00:11:16,550 --> 00:11:18,680
all we need to do is add that new

302
00:11:18,680 --> 00:11:20,030
plug-in into our rule of config and

303
00:11:20,030 --> 00:11:21,770
that's it we're done

304
00:11:21,770 --> 00:11:23,390
now you know everything you need to know

305
00:11:23,390 --> 00:11:26,780
to write a rollup plug-in and I realized

306
00:11:26,780 --> 00:11:28,520
that you know that it's a pretty quick

307
00:11:28,520 --> 00:11:30,620
introduction just throw at you but again

308
00:11:30,620 --> 00:11:33,170
compare it to the web pack version and

309
00:11:33,170 --> 00:11:36,020
I'd argue that what we wrote is simpler

310
00:11:36,020 --> 00:11:38,540
just a little bit and and the good thing

311
00:11:38,540 --> 00:11:39,920
is that everyone on our team I think

312
00:11:39,920 --> 00:11:41,540
felt like they were comfortable with

313
00:11:41,540 --> 00:11:43,190
touching that piece of code and

314
00:11:43,190 --> 00:11:45,410
adjusting the plugin if it needed any

315
00:11:45,410 --> 00:11:47,600
kind of changing and even better like

316
00:11:47,600 --> 00:11:49,220
we're writing code to do what we want

317
00:11:49,220 --> 00:11:51,320
rather than wrangling config so if we

318
00:11:51,320 --> 00:11:52,640
wanted our HTML to be a slightly

319
00:11:52,640 --> 00:11:54,170
different shape we could just go into

320
00:11:54,170 --> 00:11:55,520
the template and change it on to add a

321
00:11:55,520 --> 00:11:57,790
new tag rearrange things it's just HTML

322
00:11:57,790 --> 00:12:00,680
but what do we actually need to change

323
00:12:00,680 --> 00:12:02,420
to make things faster so I was slow on

324
00:12:02,420 --> 00:12:04,310
the slow end on the flow and phones but

325
00:12:04,310 --> 00:12:06,110
we need to figure out where procs was

326
00:12:06,110 --> 00:12:08,240
actually using performance our tool of

327
00:12:08,240 --> 00:12:11,780
choice for testing websites in as real

328
00:12:11,780 --> 00:12:13,220
world conditions as possible

329
00:12:13,220 --> 00:12:16,070
it's webpagetest.org it lets you run

330
00:12:16,070 --> 00:12:18,500
tests on real devices which makes a big

331
00:12:18,500 --> 00:12:20,240
difference and also has an excellent

332
00:12:20,240 --> 00:12:23,060
emulation of worse network connections

333
00:12:23,060 --> 00:12:25,070
yeah I always like to test on a moto G

334
00:12:25,070 --> 00:12:28,220
for this is a fairly old now phone it

335
00:12:28,220 --> 00:12:29,420
was a mid-range phone even when it came

336
00:12:29,420 --> 00:12:30,920
out but it's not dissimilar to the kind

337
00:12:30,920 --> 00:12:32,330
of phones that a lot of people have in

338
00:12:32,330 --> 00:12:34,190
the world we're also going to test on a

339
00:12:34,190 --> 00:12:36,170
3G connection and 3G is actually a

340
00:12:36,170 --> 00:12:37,400
really good speed to measure I know

341
00:12:37,400 --> 00:12:39,950
we're mostly used to here to like 4G and

342
00:12:39,950 --> 00:12:43,070
LTE and maybe even 5g soon but you know

343
00:12:43,070 --> 00:12:44,960
often due to signal strength and

344
00:12:44,960 --> 00:12:46,670
contention you will be experiencing

345
00:12:46,670 --> 00:12:48,500
speeds closer to 3G and sometimes even

346
00:12:48,500 --> 00:12:50,690
worse so here's the results for the very

347
00:12:50,690 --> 00:12:53,390
first version of procs before we'd

348
00:12:53,390 --> 00:12:54,920
optimized it and whenever I look at

349
00:12:54,920 --> 00:12:56,240
webpagetest the first thing I look at is

350
00:12:56,240 --> 00:12:57,650
this film strip along the top because

351
00:12:57,650 --> 00:12:59,390
there that shows us what the user sees

352
00:12:59,390 --> 00:13:02,360
as the site is downloading yeah so let's

353
00:13:02,360 --> 00:13:05,870
break that down for the first 4.2 second

354
00:13:05,870 --> 00:13:11,270
the user sees absolutely nothing that's

355
00:13:11,270 --> 00:13:13,910
what nothing looks like quite literally

356
00:13:13,910 --> 00:13:16,200
no things totally Finglas

357
00:13:16,200 --> 00:13:19,260
but out of nothing emerges our first

358
00:13:19,260 --> 00:13:22,829
render that's our first render we can't

359
00:13:22,829 --> 00:13:24,600
really count it as interactive though

360
00:13:24,600 --> 00:13:27,000
until let the user sees the full UI with

361
00:13:27,000 --> 00:13:28,740
with all of the interactivity and the

362
00:13:28,740 --> 00:13:30,240
user doesn't get that until they have

363
00:13:30,240 --> 00:13:31,829
been waiting five point one seconds so

364
00:13:31,829 --> 00:13:33,120
we're well over that three-second mark

365
00:13:33,120 --> 00:13:34,949
that causes fifty percent of people to

366
00:13:34,949 --> 00:13:37,350
abandon according to some studies but

367
00:13:37,350 --> 00:13:39,810
like we said we are targeting these 15

368
00:13:39,810 --> 00:13:41,279
dollar feature phones in these fifteen

369
00:13:41,279 --> 00:13:42,870
dollar feature phones are most popular

370
00:13:42,870 --> 00:13:45,029
in emerging markets like India and their

371
00:13:45,029 --> 00:13:48,209
speeds like 2g are much more on a daily

372
00:13:48,209 --> 00:13:51,170
basis happening so on 2g the user gets

373
00:13:51,170 --> 00:13:53,910
8.1 seconds of absolutely nothing than a

374
00:13:53,910 --> 00:13:56,370
pretty useless render and in total it

375
00:13:56,370 --> 00:13:58,829
takes almost 11 seconds until the user

376
00:13:58,829 --> 00:14:01,560
can actually start playing the game 11

377
00:14:01,560 --> 00:14:02,480
seconds let's put that into perspective

378
00:14:02,480 --> 00:14:05,279
Usain Bolt can run 100 meters quicker

379
00:14:05,279 --> 00:14:06,870
than it takes to load our dumb game

380
00:14:06,870 --> 00:14:09,779
right so so all in all the user had to

381
00:14:09,779 --> 00:14:12,839
load 62 kilobytes before the site was

382
00:14:12,839 --> 00:14:15,930
actually interactive surely we can do

383
00:14:15,930 --> 00:14:18,269
better but what is a realistic goal for

384
00:14:18,269 --> 00:14:20,670
us here and that's what I asked Jake to

385
00:14:20,670 --> 00:14:22,199
figure out yeah so I went and did some

386
00:14:22,199 --> 00:14:24,839
competitor analysis and here it is so

387
00:14:24,839 --> 00:14:27,480
this is a graph of the size of Windows

388
00:14:27,480 --> 00:14:30,269
minesweeper over time it starts off at

389
00:14:30,269 --> 00:14:33,360
11 kilobytes in windows 3.11 that's

390
00:14:33,360 --> 00:14:35,040
pretty small it actually gets smaller

391
00:14:35,040 --> 00:14:36,750
which is kind of amazing like 9.3

392
00:14:36,750 --> 00:14:37,980
kilobytes and Windows 95

393
00:14:37,980 --> 00:14:40,170
much smaller than procs the piece of

394
00:14:40,170 --> 00:14:41,370
 we made right like they're doing

395
00:14:41,370 --> 00:14:44,820
we made right like they're doing
really well but then in Windows 2000 it

396
00:14:44,820 --> 00:14:47,430
became bigger seven times bigger in fact

397
00:14:47,430 --> 00:14:50,040
70 K now this is now bigger than procs

398
00:14:50,040 --> 00:14:52,560
the site's crept up again in Windows XP

399
00:14:52,560 --> 00:14:57,570
there so it's up to 80k but then BAM it

400
00:14:57,570 --> 00:14:59,699
became 50 times bigger three point eight

401
00:14:59,699 --> 00:15:03,329
four megabytes in Windows Vista roughly

402
00:15:03,329 --> 00:15:09,360
the same size in Windows 7 but then BAM

403
00:15:09,360 --> 00:15:11,910
it became 25 times bigger still it's a

404
00:15:11,910 --> 00:15:13,980
hundred and four megabytes in Windows 10

405
00:15:13,980 --> 00:15:15,720
absolutely seriously minesweeper is

406
00:15:15,720 --> 00:15:17,160
growing so fast we have to switch the

407
00:15:17,160 --> 00:15:20,310
graph to a logarithmic scale if you

408
00:15:20,310 --> 00:15:21,959
sometimes wake up at night and worrying

409
00:15:21,959 --> 00:15:23,760
about how you CSS code base is growing

410
00:15:23,760 --> 00:15:25,290
on proportion don't worry you're still

411
00:15:25,290 --> 00:15:28,529
doing better than Microsoft yeah and if

412
00:15:28,529 --> 00:15:30,720
you analyze this trend which we did by

413
00:15:30,720 --> 00:15:35,310
2025 - people would be 2 terabytes by

414
00:15:35,310 --> 00:15:37,050
2030 we predict two thirds of the

415
00:15:37,050 --> 00:15:38,190
planet's surface will be covered by a

416
00:15:38,190 --> 00:15:40,230
single hard drive containing one copy of

417
00:15:40,230 --> 00:15:41,190
Windows minesweeper

418
00:15:41,190 --> 00:15:51,600
I mean Rotenberg is doing some great

419
00:15:51,600 --> 00:15:52,860
outreach of raising awareness with

420
00:15:52,860 --> 00:15:54,449
climate change but really should be

421
00:15:54,449 --> 00:15:55,439
worrying about the biggest threat to

422
00:15:55,439 --> 00:15:57,390
mankind which is Microsoft minesweeper

423
00:15:57,390 --> 00:15:59,850
absolutely so you have my conclusion is

424
00:15:59,850 --> 00:16:04,529
really that procs is 62k not really

425
00:16:04,529 --> 00:16:06,600
doing that badly so there you go thank

426
00:16:06,600 --> 00:16:07,949
you good night thank you for this

427
00:16:07,949 --> 00:16:11,130
insightful report so but on the other

428
00:16:11,130 --> 00:16:13,500
hand we do know that my super can be

429
00:16:13,500 --> 00:16:16,589
done in like 11k 10k that kind of

430
00:16:16,589 --> 00:16:19,140
territory and so admittedly our version

431
00:16:19,140 --> 00:16:21,360
has a bit more going on graphically but

432
00:16:21,360 --> 00:16:24,600
still 62 kilobytes to interactive we

433
00:16:24,600 --> 00:16:26,910
should probably reduce that yeah we

434
00:16:26,910 --> 00:16:28,110
probably should so if you want to

435
00:16:28,110 --> 00:16:29,610
improve the performance of your site and

436
00:16:29,610 --> 00:16:30,839
you only have like a few minutes to

437
00:16:30,839 --> 00:16:31,230
spare

438
00:16:31,230 --> 00:16:32,970
identify the important resources that

439
00:16:32,970 --> 00:16:35,850
start loading too late and so we're

440
00:16:35,850 --> 00:16:36,870
looking at the timeline here we're

441
00:16:36,870 --> 00:16:38,310
getting stuff we're getting this render

442
00:16:38,310 --> 00:16:40,740
it like 4.2 seconds and our JavaScript

443
00:16:40,740 --> 00:16:42,149
is loaded at that point so the site is

444
00:16:42,149 --> 00:16:44,600
completely ready to go but it is useless

445
00:16:44,600 --> 00:16:47,699
because the text is not rendering you

446
00:16:47,699 --> 00:16:49,980
guessed it we are using a web font a web

447
00:16:49,980 --> 00:16:52,050
form so we're using space mono from

448
00:16:52,050 --> 00:16:53,819
google fonts both the normal and the

449
00:16:53,819 --> 00:16:56,399
bold version and they're about 10k each

450
00:16:56,399 --> 00:16:58,740
which as far as web fonts go is it

451
00:16:58,740 --> 00:17:00,569
actually not that bad so why are they

452
00:17:00,569 --> 00:17:02,699
giving us so much trouble yes and find

453
00:17:02,699 --> 00:17:04,140
out we need to dive into the network

454
00:17:04,140 --> 00:17:06,720
panel of webpagetest or in dev tools it

455
00:17:06,720 --> 00:17:08,549
gives you the same information and

456
00:17:08,549 --> 00:17:09,540
here's the pattern that we were seeing

457
00:17:09,540 --> 00:17:12,240
first off the HTML downloads the filler

458
00:17:12,240 --> 00:17:13,530
line here is a convention that both

459
00:17:13,530 --> 00:17:14,939
webpagetest and chrome dev tools

460
00:17:14,939 --> 00:17:17,370
actually use it means it's setting up a

461
00:17:17,370 --> 00:17:19,890
new HTTP connection and the thicker line

462
00:17:19,890 --> 00:17:21,510
is then the time it takes for

463
00:17:21,510 --> 00:17:23,640
request and response yes and once that's

464
00:17:23,640 --> 00:17:25,890
done it will download the CSS and then

465
00:17:25,890 --> 00:17:27,959
it downloads the actual fonts now when

466
00:17:27,959 --> 00:17:29,220
you're looking at these sort of diagrams

467
00:17:29,220 --> 00:17:30,570
especially compared to rendering it's

468
00:17:30,570 --> 00:17:32,130
worth noting that they don't always

469
00:17:32,130 --> 00:17:33,930
exactly align and that's because once

470
00:17:33,930 --> 00:17:35,490
the browser is downloaded something it

471
00:17:35,490 --> 00:17:37,410
then needs to parse and execute it and

472
00:17:37,410 --> 00:17:39,090
then paint it which takes time so

473
00:17:39,090 --> 00:17:41,010
there's like an offset compared to you

474
00:17:41,010 --> 00:17:42,540
know actual painted things on the screen

475
00:17:42,540 --> 00:17:44,430
anyway the red flag here is that both

476
00:17:44,430 --> 00:17:46,410
the CSS and the font files have their

477
00:17:46,410 --> 00:17:48,960
own thin line meaning there's a TP

478
00:17:48,960 --> 00:17:50,970
connection being set up and this is

479
00:17:50,970 --> 00:17:53,460
because the CSS is actually on another

480
00:17:53,460 --> 00:17:55,470
server it's on Fahnestock Google API

481
00:17:55,470 --> 00:17:57,540
it's calm and so it has to start a new

482
00:17:57,540 --> 00:17:58,710
connection to actually be able to

483
00:17:58,710 --> 00:18:00,810
download that file yes but if we look

484
00:18:00,810 --> 00:18:02,640
inside the actual CSS we can see the

485
00:18:02,640 --> 00:18:04,560
fonts are actually hosted on yet another

486
00:18:04,560 --> 00:18:06,900
server so this is fonts G static com so

487
00:18:06,900 --> 00:18:08,790
that's yet another connection and the

488
00:18:08,790 --> 00:18:10,680
quick fix here is to copy the CSS in the

489
00:18:10,680 --> 00:18:13,050
fonts to our own server that way the

490
00:18:13,050 --> 00:18:15,060
browser can reuse the already existing

491
00:18:15,060 --> 00:18:16,980
connection and in theory we feel safe

492
00:18:16,980 --> 00:18:19,440
around a second but wait you can't just

493
00:18:19,440 --> 00:18:21,240
do that fonts are protected by various

494
00:18:21,240 --> 00:18:22,980
intellectual property laws including

495
00:18:22,980 --> 00:18:24,600
trademarks copyrights and design patents

496
00:18:24,600 --> 00:18:26,580
Cottenham to your own server may violate

497
00:18:26,580 --> 00:18:29,490
the policy of the rights holder valid

498
00:18:29,490 --> 00:18:31,800
concerned but doesn't apply when you use

499
00:18:31,800 --> 00:18:33,510
Google phones all the phones on Google

500
00:18:33,510 --> 00:18:34,740
phones are open source and have

501
00:18:34,740 --> 00:18:36,300
permissive licenses that you can just

502
00:18:36,300 --> 00:18:38,880
copy to your own server Oh disaster

503
00:18:38,880 --> 00:18:39,570
averted

504
00:18:39,570 --> 00:18:42,210
I for one will sleep tonight in fact the

505
00:18:42,210 --> 00:18:43,830
CSS turns out to be so small that we

506
00:18:43,830 --> 00:18:46,200
might as well just inline it into our

507
00:18:46,200 --> 00:18:48,930
HTML all about these fonts now the

508
00:18:48,930 --> 00:18:50,490
browser tries to be smart here when it

509
00:18:50,490 --> 00:18:51,660
comes to font downloading it won't

510
00:18:51,660 --> 00:18:53,190
download fonts until it finds something

511
00:18:53,190 --> 00:18:55,020
on the page that actually needs them so

512
00:18:55,020 --> 00:18:56,850
that means it waits for the CSS to be

513
00:18:56,850 --> 00:18:59,340
loaded and then an element appearing on

514
00:18:59,340 --> 00:19:02,190
it in the dom that contains text that

515
00:19:02,190 --> 00:19:03,600
needs that font and this is good in some

516
00:19:03,600 --> 00:19:05,340
ways because it means the browser going

517
00:19:05,340 --> 00:19:06,660
to avoid downloading fonts it doesn't

518
00:19:06,660 --> 00:19:09,780
need but in this case we know it needs

519
00:19:09,780 --> 00:19:11,280
both of those fonts from the very start

520
00:19:11,280 --> 00:19:14,430
and the answer is a link rel preload tag

521
00:19:14,430 --> 00:19:16,320
in the head of the document these tags

522
00:19:16,320 --> 00:19:17,640
basically allow you to tell the browser

523
00:19:17,640 --> 00:19:19,980
that it should download a thing and keep

524
00:19:19,980 --> 00:19:21,570
it in memory until it's actually being

525
00:19:21,570 --> 00:19:23,220
requested by the page and then it's

526
00:19:23,220 --> 00:19:25,530
already there and with those small

527
00:19:25,530 --> 00:19:27,480
changes we should see the yellow line

528
00:19:27,480 --> 00:19:29,070
shrink when we pass it through

529
00:19:29,070 --> 00:19:31,680
webpagetest the next time that's dude so

530
00:19:31,680 --> 00:19:32,890
note that

531
00:19:32,890 --> 00:19:37,380
Wow let's go back let's do it again hey

532
00:19:37,380 --> 00:19:39,970
don't run Chrome Canary for your slides

533
00:19:39,970 --> 00:19:45,220
I should know this by now okay have some

534
00:19:45,220 --> 00:19:47,760
Atari yeah yeah I should have learned oh

535
00:19:47,760 --> 00:19:51,250
so in theory we should be saving a good

536
00:19:51,250 --> 00:19:53,650
amount of time here right but we have to

537
00:19:53,650 --> 00:19:55,210
get it working within the build tools we

538
00:19:55,210 --> 00:19:57,429
have so this is the plugin we saw before

539
00:19:57,429 --> 00:19:59,770
the one that creates the HTML what we

540
00:19:59,770 --> 00:20:01,660
need to do is inline the CSS for our

541
00:20:01,660 --> 00:20:03,460
fonts and we need to add a preload tag

542
00:20:03,460 --> 00:20:04,929
for each of them now

543
00:20:04,929 --> 00:20:06,040
I'm not gonna go for it step by step

544
00:20:06,040 --> 00:20:07,840
we've only got like 30 minutes or

545
00:20:07,840 --> 00:20:09,280
whatever but it looks a little bit like

546
00:20:09,280 --> 00:20:12,250
this whoo there it goes so at the start

547
00:20:12,250 --> 00:20:14,950
of the build we use roll-ups Amit method

548
00:20:14,950 --> 00:20:17,110
to bring the fun files into our build so

549
00:20:17,110 --> 00:20:18,640
now roll-up is aware of these files and

550
00:20:18,640 --> 00:20:20,290
we'll add hashes to the file name and

551
00:20:20,290 --> 00:20:21,669
put it into the output folder all these

552
00:20:21,669 --> 00:20:23,080
little things and when it comes to

553
00:20:23,080 --> 00:20:25,660
generating our HTML we pass that data

554
00:20:25,660 --> 00:20:28,210
into our template now so that we can

555
00:20:28,210 --> 00:20:29,770
where this helper will actually give us

556
00:20:29,770 --> 00:20:32,260
the final URL off the font files yes

557
00:20:32,260 --> 00:20:33,880
that means we need to go back into our

558
00:20:33,880 --> 00:20:35,740
template and we need to loop over that

559
00:20:35,740 --> 00:20:38,169
font data and output a style tag that

560
00:20:38,169 --> 00:20:39,790
defines the font and this is just all

561
00:20:39,790 --> 00:20:40,990
the stuff we passed into the template

562
00:20:40,990 --> 00:20:43,000
before there's the weight there's the

563
00:20:43,000 --> 00:20:44,740
source and then we're gonna add a

564
00:20:44,740 --> 00:20:46,030
preload type for each of those as well

565
00:20:46,030 --> 00:20:47,830
so what I really like about this that

566
00:20:47,830 --> 00:20:50,080
the roller plugin handles all the

567
00:20:50,080 --> 00:20:52,600
roll-up specific stuff like making it

568
00:20:52,600 --> 00:20:54,190
aware of the files putting them into the

569
00:20:54,190 --> 00:20:55,870
build pipeline and adding hashes blah

570
00:20:55,870 --> 00:20:57,669
blah blah blah blah but then for the

571
00:20:57,669 --> 00:21:01,450
HTML part we use our HTML skills there's

572
00:21:01,450 --> 00:21:03,490
nothing specific to roll up about this

573
00:21:03,490 --> 00:21:05,200
template so roll up isn't preventing us

574
00:21:05,200 --> 00:21:07,840
from rearranging or even adding new HTML

575
00:21:07,840 --> 00:21:10,419
tags to our markup but we are not done

576
00:21:10,419 --> 00:21:12,280
yet the fonts aren't the only asset that

577
00:21:12,280 --> 00:21:13,780
is loading too late at the same time

578
00:21:13,780 --> 00:21:15,520
like our main script loads and it also

579
00:21:15,520 --> 00:21:17,140
will load to the other scripts it needs

580
00:21:17,140 --> 00:21:18,669
so this is the code splitting thing we

581
00:21:18,669 --> 00:21:19,179
saw before

582
00:21:19,179 --> 00:21:20,799
because we're sharing scripts between

583
00:21:20,799 --> 00:21:23,320
the the main thread and workers they sit

584
00:21:23,320 --> 00:21:26,740
in different files but you know we know

585
00:21:26,740 --> 00:21:28,720
once again that the main page will

586
00:21:28,720 --> 00:21:30,610
always need all three of these scripts

587
00:21:30,610 --> 00:21:32,590
so we should be pre loading those as

588
00:21:32,590 --> 00:21:34,690
well yeah but the question is what what

589
00:21:34,690 --> 00:21:36,280
faults should be pre loading we know

590
00:21:36,280 --> 00:21:37,660
there are dependencies but what are

591
00:21:37,660 --> 00:21:40,030
their actual names and luckily the role

592
00:21:40,030 --> 00:21:42,010
of bundle object gives us the answer as

593
00:21:42,010 --> 00:21:44,260
I said for each JavaScript piece of

594
00:21:44,260 --> 00:21:45,230
output that we have

595
00:21:45,230 --> 00:21:47,240
it will list give us an array of files

596
00:21:47,240 --> 00:21:49,760
that are being directly or statically

597
00:21:49,760 --> 00:21:53,210
imported so in this case we pass that

598
00:21:53,210 --> 00:21:55,519
data into our template engine by just

599
00:21:55,519 --> 00:21:58,210
looking at the dot imports property and

600
00:21:58,210 --> 00:22:00,950
back over an hour EGS template we can

601
00:22:00,950 --> 00:22:02,750
now just loop over these dependencies

602
00:22:02,750 --> 00:22:05,269
and generate a preload tag for each of

603
00:22:05,269 --> 00:22:06,769
them yeah just like that

604
00:22:06,769 --> 00:22:08,480
so we've now moved our fonts onto our

605
00:22:08,480 --> 00:22:10,460
own server we've added some preload tags

606
00:22:10,460 --> 00:22:11,840
for them and for our scripts as well

607
00:22:11,840 --> 00:22:14,480
better in theory but what does

608
00:22:14,480 --> 00:22:16,190
webpagetest tell us about the real-world

609
00:22:16,190 --> 00:22:19,130
impact well we have eliminated the know

610
00:22:19,130 --> 00:22:21,049
fonts for I know the second anything is

611
00:22:21,049 --> 00:22:23,450
on screen its interactive and good to go

612
00:22:23,450 --> 00:22:25,429
and it's a one-second improvement on 3G

613
00:22:25,429 --> 00:22:27,169
and a massive three second improvement

614
00:22:27,169 --> 00:22:30,500
on 2g we haven't really impacted the red

615
00:22:30,500 --> 00:22:32,419
bar though the time where the user sees

616
00:22:32,419 --> 00:22:35,120
absolutely nothing yeah and four seconds

617
00:22:35,120 --> 00:22:35,929
that's a lot of nothing

618
00:22:35,929 --> 00:22:38,929
eight seconds is a lot a lot of nothing

619
00:22:38,929 --> 00:22:40,789
this is the part where the user is just

620
00:22:40,789 --> 00:22:42,049
staring at a white screen they don't

621
00:22:42,049 --> 00:22:44,899
even know if the server is even think

622
00:22:44,899 --> 00:22:46,700
about sending them a response so looking

623
00:22:46,700 --> 00:22:48,610
at webpage tests network waterfall

624
00:22:48,610 --> 00:22:51,169
confirms that we achieve what we set out

625
00:22:51,169 --> 00:22:53,240
to do everything that's important is now

626
00:22:53,240 --> 00:22:56,659
loading in parallel it's just taking too

627
00:22:56,659 --> 00:22:58,460
long yeah so we have two options here

628
00:22:58,460 --> 00:22:59,630
like we can have a try and make this

629
00:22:59,630 --> 00:23:03,889
just shorter by shipping less code or we

630
00:23:03,889 --> 00:23:06,380
can just make it matter less yep so

631
00:23:06,380 --> 00:23:08,840
right now we are fully reliant on Java

632
00:23:08,840 --> 00:23:11,899
Script to put anything on the screen so

633
00:23:11,899 --> 00:23:14,769
let's put a stop to that let's use

634
00:23:14,769 --> 00:23:17,360
server-side rendering but at build time

635
00:23:17,360 --> 00:23:19,340
and that's often called a pre render or

636
00:23:19,340 --> 00:23:21,740
a static render yeah so we want used to

637
00:23:21,740 --> 00:23:23,630
see something like this like it's not

638
00:23:23,630 --> 00:23:24,980
interactive at this stage so we've

639
00:23:24,980 --> 00:23:26,510
removed all of the the buttons that

640
00:23:26,510 --> 00:23:28,490
depend on JavaScript but this can appear

641
00:23:28,490 --> 00:23:30,559
while the JavaScript is loading and this

642
00:23:30,559 --> 00:23:31,940
really improves the perception of

643
00:23:31,940 --> 00:23:33,350
performance because the user sees that

644
00:23:33,350 --> 00:23:35,480
something is happening and then once the

645
00:23:35,480 --> 00:23:36,830
JavaScript loads it can sort of lazily

646
00:23:36,830 --> 00:23:40,159
enhance the page and there are a few

647
00:23:40,159 --> 00:23:42,559
ways to actually do this every Dom

648
00:23:42,559 --> 00:23:44,179
orchestration framework that is we're

649
00:23:44,179 --> 00:23:45,950
talking about has a way to generate an

650
00:23:45,950 --> 00:23:48,769
HTML string from its components and imp

651
00:23:48,769 --> 00:23:50,960
react and react land that is called

652
00:23:50,960 --> 00:23:53,840
render to string this is pretty fast

653
00:23:53,840 --> 00:23:55,460
it's not as fast as a general-purpose

654
00:23:55,460 --> 00:23:57,769
templating engine but pretty close to

655
00:23:57,769 --> 00:23:58,850
the point where actually

656
00:23:58,850 --> 00:24:01,840
people do run this on every request

657
00:24:01,840 --> 00:24:04,340
although we only want to use its built

658
00:24:04,340 --> 00:24:06,470
time so super high performance is not as

659
00:24:06,470 --> 00:24:08,510
big of a requirement for us in this

660
00:24:08,510 --> 00:24:12,380
particular use case however render to

661
00:24:12,380 --> 00:24:14,570
string runs an ode and we actually see

662
00:24:14,570 --> 00:24:16,490
that as kind of a downside because if

663
00:24:16,490 --> 00:24:18,980
you have any codes in your components

664
00:24:18,980 --> 00:24:19,970
that assumes to be running in the

665
00:24:19,970 --> 00:24:22,280
browser which usually is a fair

666
00:24:22,280 --> 00:24:24,440
assumption to make that will break and

667
00:24:24,440 --> 00:24:26,750
not so we had a component with index DB

668
00:24:26,750 --> 00:24:30,200
and that would just break we could fix

669
00:24:30,200 --> 00:24:32,210
that by adding like code branches for

670
00:24:32,210 --> 00:24:34,220
node versus browser but that will get

671
00:24:34,220 --> 00:24:37,910
really messy over time over all ready to

672
00:24:37,910 --> 00:24:40,130
string is probably ideal if you can bend

673
00:24:40,130 --> 00:24:42,110
your components that way it's not what

674
00:24:42,110 --> 00:24:44,300
we ended up using though no we looked at

675
00:24:44,300 --> 00:24:46,130
JSON which is kind of like a browser

676
00:24:46,130 --> 00:24:48,740
environment but it runs inside node the

677
00:24:48,740 --> 00:24:50,900
problem there is the word kind of like

678
00:24:50,900 --> 00:24:52,550
jest um it's like an entirely new

679
00:24:52,550 --> 00:24:53,780
browser that you end up having to

680
00:24:53,780 --> 00:24:55,310
support and we try to use it this is

681
00:24:55,310 --> 00:24:56,390
what we thought we were going to settle

682
00:24:56,390 --> 00:24:58,580
on but then we hit all these kind of

683
00:24:58,580 --> 00:25:01,010
weird quirks like as part of our

684
00:25:01,010 --> 00:25:02,480
inlining process we had some inline

685
00:25:02,480 --> 00:25:04,310
Styles and we resource some of those

686
00:25:04,310 --> 00:25:06,860
just going missing and it turns out that

687
00:25:06,860 --> 00:25:10,010
JSON doesn't understand linear gradients

688
00:25:10,010 --> 00:25:12,050
so it's just getting rid of them and

689
00:25:12,050 --> 00:25:13,010
this is the right thing for it to do

690
00:25:13,010 --> 00:25:14,750
this is what the the spec says the spec

691
00:25:14,750 --> 00:25:16,100
says if there's an inline style you

692
00:25:16,100 --> 00:25:18,050
don't understand it just just discard it

693
00:25:18,050 --> 00:25:20,450
and JSON was dutifully behaving like a

694
00:25:20,450 --> 00:25:22,310
browser according to that spec just it

695
00:25:22,310 --> 00:25:23,660
was a browser that doesn't understand

696
00:25:23,660 --> 00:25:27,050
linear gradients and also 4x12 is slower

697
00:25:27,050 --> 00:25:28,850
than render to string so it's not

698
00:25:28,850 --> 00:25:29,840
something you would want to be running

699
00:25:29,840 --> 00:25:31,220
on every request but it's really matter

700
00:25:31,220 --> 00:25:33,920
to us so in the end we ended up with

701
00:25:33,920 --> 00:25:36,650
puppeteer babbity launches a headless

702
00:25:36,650 --> 00:25:39,080
version of drone that you get to remote

703
00:25:39,080 --> 00:25:40,760
control you can load pages you can

704
00:25:40,760 --> 00:25:42,350
inject JavaScript you can inspect the

705
00:25:42,350 --> 00:25:44,690
Dom it can read back any results and so

706
00:25:44,690 --> 00:25:47,480
your code is running in an actual Chrome

707
00:25:47,480 --> 00:25:49,190
so you don't have to it's not a new

708
00:25:49,190 --> 00:25:51,500
browser for you to support it is however

709
00:25:51,500 --> 00:25:53,720
obviously slower than render to string

710
00:25:53,720 --> 00:25:57,140
it is also slower than j/s Dom but

711
00:25:57,140 --> 00:25:59,620
actually surprisingly only by a tiny bit

712
00:25:59,620 --> 00:26:02,480
but as I said we only to run it once per

713
00:26:02,480 --> 00:26:04,460
build so it's not really that big a deal

714
00:26:04,460 --> 00:26:06,920
it is really easy to install to you so

715
00:26:06,920 --> 00:26:08,570
if you haven't done that yet take a look

716
00:26:08,570 --> 00:26:10,160
at it and tell us what you think but

717
00:26:10,160 --> 00:26:12,440
let's be honest adding an entire

718
00:26:12,440 --> 00:26:14,780
from to your build setup is a pretty big

719
00:26:14,780 --> 00:26:17,060
jump in complexity it is what we ended

720
00:26:17,060 --> 00:26:18,920
up doing for procs though and it wasn't

721
00:26:18,920 --> 00:26:20,890
about yeah so how did we get it working

722
00:26:20,890 --> 00:26:23,360
well we wrote another plugin didn't we

723
00:26:23,360 --> 00:26:26,000
here it is I'm not gonna go through it

724
00:26:26,000 --> 00:26:27,200
line by line just wanting to show you

725
00:26:27,200 --> 00:26:28,900
it's a relatively small chunk of code

726
00:26:28,900 --> 00:26:31,280
puppeteer lets us launch this invisible

727
00:26:31,280 --> 00:26:33,290
version of Chrome we run our JavaScript

728
00:26:33,290 --> 00:26:34,700
and we collect the HTML that it

729
00:26:34,700 --> 00:26:38,270
generates as a nice bonus like since our

730
00:26:38,270 --> 00:26:40,430
CSS was inside our JavaScript it was

731
00:26:40,430 --> 00:26:41,810
creating style tags for all of the

732
00:26:41,810 --> 00:26:43,160
components that were used in that first

733
00:26:43,160 --> 00:26:45,170
render so we sort of got CSS inlining

734
00:26:45,170 --> 00:26:46,550
just for free yep

735
00:26:46,550 --> 00:26:48,680
so one thing we haven't covered is how

736
00:26:48,680 --> 00:26:51,500
do we prevent the pre renderer from

737
00:26:51,500 --> 00:26:53,410
rendering components that aren't

738
00:26:53,410 --> 00:26:56,930
interactive yet so we want this landing

739
00:26:56,930 --> 00:26:59,180
stream to actually look a bit more like

740
00:26:59,180 --> 00:27:02,360
this yeah so the simplest solution to

741
00:27:02,360 --> 00:27:04,010
get that is you know give a little bit

742
00:27:04,010 --> 00:27:05,840
of code to puppeteer just before we end

743
00:27:05,840 --> 00:27:07,640
it the rest of our script and that means

744
00:27:07,640 --> 00:27:09,710
in our app we can branch on that in an

745
00:27:09,710 --> 00:27:11,630
if statement and do stuff like you know

746
00:27:11,630 --> 00:27:13,310
hide buttons you know rearrange things

747
00:27:13,310 --> 00:27:15,290
whatever and since that is only ever

748
00:27:15,290 --> 00:27:17,060
going to be true in puppeteer land it

749
00:27:17,060 --> 00:27:20,300
won't run those steps for real users but

750
00:27:20,300 --> 00:27:21,680
it doesn't mean that you're shipping

751
00:27:21,680 --> 00:27:23,810
code to real users that they don't

752
00:27:23,810 --> 00:27:26,690
actually need but then again it's

753
00:27:26,690 --> 00:27:28,880
probably not a lot of code and it's

754
00:27:28,880 --> 00:27:30,710
probably not worth putting in the effort

755
00:27:30,710 --> 00:27:34,730
to strip it all out can we fix this

756
00:27:34,730 --> 00:27:38,240
please can we fix this all right so our

757
00:27:38,240 --> 00:27:40,310
aim is to remove this kind of code to

758
00:27:40,310 --> 00:27:42,530
ever-reaching the production bundle that

759
00:27:42,530 --> 00:27:45,860
is being shipped to use this here's our

760
00:27:45,860 --> 00:27:48,200
current set of plugins can you guess

761
00:27:48,200 --> 00:27:50,510
what we are gonna do now I don't know

762
00:27:50,510 --> 00:27:51,980
but I'm excited about it we are gonna

763
00:27:51,980 --> 00:27:54,380
write a plugin out yes so the plugin

764
00:27:54,380 --> 00:27:57,020
means that we can write code like this

765
00:27:57,020 --> 00:27:59,900
and the value of this pre-render will be

766
00:27:59,900 --> 00:28:02,180
exactly what the value of pre-render in

767
00:28:02,180 --> 00:28:05,840
our roll-up config script is yeah the

768
00:28:05,840 --> 00:28:07,190
plug-in like this is great for all kinds

769
00:28:07,190 --> 00:28:08,540
of constants like passing in late

770
00:28:08,540 --> 00:28:10,250
version numbers of things or different

771
00:28:10,250 --> 00:28:12,260
kinds of flags now I've seen similar

772
00:28:12,260 --> 00:28:14,360
plugins that do this they don't require

773
00:28:14,360 --> 00:28:16,190
the import statement they just go

774
00:28:16,190 --> 00:28:17,960
through your code and replace a variable

775
00:28:17,960 --> 00:28:19,730
of a given name with a particular value

776
00:28:19,730 --> 00:28:22,070
but I don't know I kind of hate that

777
00:28:22,070 --> 00:28:24,020
because to me it's not obvious on the

778
00:28:24,020 --> 00:28:26,119
source code that some build magic is

779
00:28:26,119 --> 00:28:28,189
going to happen where it's like here you

780
00:28:28,189 --> 00:28:29,779
look at that and you go well this import

781
00:28:29,779 --> 00:28:31,819
is not normal this is not how imports

782
00:28:31,819 --> 00:28:34,129
normally look so you can do a quick code

783
00:28:34,129 --> 00:28:35,959
search for like the start of that string

784
00:28:35,959 --> 00:28:37,999
the Const call on bit and then you'll

785
00:28:37,999 --> 00:28:40,009
find the the bill tool that's actually

786
00:28:40,009 --> 00:28:41,419
doing that it's really easy to discover

787
00:28:41,419 --> 00:28:44,569
and also roll up it's really smart here

788
00:28:44,569 --> 00:28:47,149
so if you do a build where preload is

789
00:28:47,149 --> 00:28:49,519
true it will actually optimize it to

790
00:28:49,519 --> 00:28:52,219
this and if you do a build where it is

791
00:28:52,219 --> 00:28:55,609
false it will optimize it to this and so

792
00:28:55,609 --> 00:28:58,069
that's what we did we created two builds

793
00:28:58,069 --> 00:29:00,799
one for the user and one for puppeteer

794
00:29:00,799 --> 00:29:03,859
so let's take a look this is legit the

795
00:29:03,859 --> 00:29:06,499
entire plugin the plugin only does

796
00:29:06,499 --> 00:29:08,989
anything when the import statement

797
00:29:08,989 --> 00:29:11,179
starts with Const school and if it does

798
00:29:11,179 --> 00:29:13,609
it just generates a string of JavaScript

799
00:29:13,609 --> 00:29:15,529
on the fly containing the value that is

800
00:29:15,529 --> 00:29:20,329
being imported that's it that's all yeah

801
00:29:20,329 --> 00:29:22,219
here is the comparable webpack plugin

802
00:29:22,219 --> 00:29:23,749
that does the same thing if you want to

803
00:29:23,749 --> 00:29:26,359
have the dead code elimination again

804
00:29:26,359 --> 00:29:27,259
it's not something I would feel

805
00:29:27,259 --> 00:29:30,289
comfortable hacking around with and you

806
00:29:30,289 --> 00:29:31,789
might feel like we're you know kicking

807
00:29:31,789 --> 00:29:34,939
web pack a lot here you were right we

808
00:29:34,939 --> 00:29:36,559
are but the honest truth is like the

809
00:29:36,559 --> 00:29:37,939
difference that we felt between working

810
00:29:37,939 --> 00:29:39,409
on a project with web pack and working

811
00:29:39,409 --> 00:29:40,639
on a project with roll-up was really

812
00:29:40,639 --> 00:29:42,859
really night and day for us like not

813
00:29:42,859 --> 00:29:44,269
only did we feel like we understood what

814
00:29:44,269 --> 00:29:45,859
was happening we felt capable of

815
00:29:45,859 --> 00:29:47,149
changing what was happening if we needed

816
00:29:47,149 --> 00:29:47,389
to

817
00:29:47,389 --> 00:29:49,759
especially with less Jordan past like

818
00:29:49,759 --> 00:29:51,739
you know making work as a core part of

819
00:29:51,739 --> 00:29:53,899
your architecture it was incredibly

820
00:29:53,899 --> 00:29:55,429
valuable to be able to go in and just

821
00:29:55,429 --> 00:29:57,679
change how roll-up handled these kind of

822
00:29:57,679 --> 00:30:01,399
things yes ok now we have an optimized

823
00:30:01,399 --> 00:30:03,349
server render what do we win what is the

824
00:30:03,349 --> 00:30:06,199
real world impacts let's take a look so

825
00:30:06,199 --> 00:30:07,819
we have pushed that read nothing

826
00:30:07,819 --> 00:30:09,439
rendered time right back we've put it to

827
00:30:09,439 --> 00:30:11,569
almost two seconds of white screen on 3G

828
00:30:11,569 --> 00:30:14,299
we've cut it by three seconds on 2g this

829
00:30:14,299 --> 00:30:15,979
is a massive improvement to the

830
00:30:15,979 --> 00:30:17,899
perception of performance so the yellow

831
00:30:17,899 --> 00:30:19,549
area represents where we have something

832
00:30:19,549 --> 00:30:21,709
on screen but the app isn't really

833
00:30:21,709 --> 00:30:23,989
interactive yet because the JavaScript

834
00:30:23,989 --> 00:30:26,359
hasn't loaded but at least the user is

835
00:30:26,359 --> 00:30:27,859
seeing something to feel like they're

836
00:30:27,859 --> 00:30:29,629
being informed about the progress of the

837
00:30:29,629 --> 00:30:33,259
app loading so what can we do next well

838
00:30:33,259 --> 00:30:35,449
looking at the network waterfall to

839
00:30:35,449 --> 00:30:37,489
remind you the thin blog is the setting

840
00:30:37,489 --> 00:30:38,989
of a connection and the stake block is

841
00:30:38,989 --> 00:30:39,720
the time it's

842
00:30:39,720 --> 00:30:41,580
for the request and the response to go

843
00:30:41,580 --> 00:30:43,710
with a wire but there's another feature

844
00:30:43,710 --> 00:30:45,240
of network waterfalls that we can look

845
00:30:45,240 --> 00:30:46,559
at here and that's the time to first

846
00:30:46,559 --> 00:30:46,889
byte

847
00:30:46,889 --> 00:30:48,929
now both webpagetest and chrome dev

848
00:30:48,929 --> 00:30:51,690
tools they highlight the area before the

849
00:30:51,690 --> 00:30:53,399
first byte of the responses received so

850
00:30:53,399 --> 00:30:54,870
this is the time taken up by the request

851
00:30:54,870 --> 00:30:56,909
and waiting for the server to start

852
00:30:56,909 --> 00:30:58,799
sending the response and as you can see

853
00:30:58,799 --> 00:31:00,769
there is a pretty big gap between

854
00:31:00,769 --> 00:31:03,779
receiving all of the HTML and receiving

855
00:31:03,779 --> 00:31:06,179
the first byte of any of the resources

856
00:31:06,179 --> 00:31:09,000
used in the HTML it's about 400

857
00:31:09,000 --> 00:31:11,610
milliseconds on 3G and about a second on

858
00:31:11,610 --> 00:31:14,490
2g there are two solutions to this one

859
00:31:14,490 --> 00:31:17,940
is HTTP to server push No

860
00:31:17,940 --> 00:31:19,590
so how achieved approach turned out to

861
00:31:19,590 --> 00:31:22,139
be incredibly difficult to get right we

862
00:31:22,139 --> 00:31:23,549
have seen a couple of teams with a good

863
00:31:23,549 --> 00:31:25,679
number of like networking experts try to

864
00:31:25,679 --> 00:31:27,899
use it and they struggle to just break

865
00:31:27,899 --> 00:31:30,750
even in terms of performance yeah so the

866
00:31:30,750 --> 00:31:32,610
alternative then is inlining like we

867
00:31:32,610 --> 00:31:34,110
take these assets and we just put them

868
00:31:34,110 --> 00:31:36,210
straight into our HTML so first up let's

869
00:31:36,210 --> 00:31:39,120
do that with our fonts aligning both

870
00:31:39,120 --> 00:31:41,580
ARRA funds would add about 20 kilobytes

871
00:31:41,580 --> 00:31:44,009
to our HTML which honestly is kind of a

872
00:31:44,009 --> 00:31:45,960
lot yeah that's why I took a look inside

873
00:31:45,960 --> 00:31:47,610
these font files and I found some

874
00:31:47,610 --> 00:31:48,980
interesting stuff

875
00:31:48,980 --> 00:31:52,440
3/4 an upside-down question mark and

876
00:31:52,440 --> 00:31:56,610
indecisive vowel the surprised face no

877
00:31:56,610 --> 00:31:58,799
one knows what this is that's an asset

878
00:31:58,799 --> 00:32:01,470
so what sorry it's an s10 no one knows

879
00:32:01,470 --> 00:32:04,590
what this is fine if you want a P and a

880
00:32:04,590 --> 00:32:06,779
B at the same time Scott you saw it and

881
00:32:06,779 --> 00:32:09,600
this which it kinda looks like a rotated

882
00:32:09,600 --> 00:32:11,220
elephants I think that's what that is

883
00:32:11,220 --> 00:32:13,710
for the point is that none of these

884
00:32:13,710 --> 00:32:16,200
characters are in this set which is the

885
00:32:16,200 --> 00:32:17,610
set of characters that we are actually

886
00:32:17,610 --> 00:32:21,750
using on our landing page so we figured

887
00:32:21,750 --> 00:32:24,210
we just inline the characters that we

888
00:32:24,210 --> 00:32:26,789
actually need which are these characters

889
00:32:26,789 --> 00:32:27,899
and that's you know it's kind of like

890
00:32:27,899 --> 00:32:29,909
tree shaking but for phones and for

891
00:32:29,909 --> 00:32:32,549
funds its called sub settings and there

892
00:32:32,549 --> 00:32:34,169
are command line tools that do this for

893
00:32:34,169 --> 00:32:35,669
you but they're written in Python and I

894
00:32:35,669 --> 00:32:41,250
kind of loathe Python and so - so

895
00:32:41,250 --> 00:32:42,720
there's a little feature about about

896
00:32:42,720 --> 00:32:46,500
google fonts the URL for the CSS of your

897
00:32:46,500 --> 00:32:48,929
font actually takes a parameter which

898
00:32:48,929 --> 00:32:50,820
looks like this but it was the first

899
00:32:50,820 --> 00:32:52,120
language I learned I know

900
00:32:52,120 --> 00:32:55,870
move on here so if you include this text

901
00:32:55,870 --> 00:32:58,090
parameter the CSS will contain a URL to

902
00:32:58,090 --> 00:33:00,279
a new font file which is specifically

903
00:33:00,279 --> 00:33:02,080
generated to just contain the characters

904
00:33:02,080 --> 00:33:04,000
that you are using in this text

905
00:33:04,000 --> 00:33:07,029
parameter yeah I still have - anyway so

906
00:33:07,029 --> 00:33:08,830
we used build script to go into these

907
00:33:08,830 --> 00:33:10,299
files we generated and open them and

908
00:33:10,299 --> 00:33:12,220
spit them into our template as base64

909
00:33:12,220 --> 00:33:14,830
URLs and this only added 4.5 k to the

910
00:33:14,830 --> 00:33:17,350
HTML which is much better than the 20k

911
00:33:17,350 --> 00:33:19,630
for the full fonts we do still load the

912
00:33:19,630 --> 00:33:21,159
full fonts because the future screens

913
00:33:21,159 --> 00:33:22,510
will have more than just that initial

914
00:33:22,510 --> 00:33:24,789
set of characters but you know they're

915
00:33:24,789 --> 00:33:26,860
an interactive 40 away so we can wait

916
00:33:26,860 --> 00:33:28,240
for like you know you load those lazily

917
00:33:28,240 --> 00:33:30,429
in the background so how do we do this

918
00:33:30,429 --> 00:33:33,669
well back to our create HTML plugin or

919
00:33:33,669 --> 00:33:36,610
at least the part that feeds data into

920
00:33:36,610 --> 00:33:38,590
our templating engine for each font

921
00:33:38,590 --> 00:33:40,840
we're passing in the weight and the URL

922
00:33:40,840 --> 00:33:42,970
but you're also going to pass in the

923
00:33:42,970 --> 00:33:46,000
inline fund as a base64 encoded string

924
00:33:46,000 --> 00:33:47,289
yeah and this is just using built-in

925
00:33:47,289 --> 00:33:49,659
node API is nothing special but we're

926
00:33:49,659 --> 00:33:51,549
also going to pass in the Unicode range

927
00:33:51,549 --> 00:33:53,049
for each font now if you've used web

928
00:33:53,049 --> 00:33:54,399
fonts before you'll have seen that you

929
00:33:54,399 --> 00:33:55,990
need to specify the Unicode range to

930
00:33:55,990 --> 00:33:57,850
tell the browser exactly what's inside

931
00:33:57,850 --> 00:33:59,529
the font there we use this little

932
00:33:59,529 --> 00:34:01,809
library from NPM which just takes a lot

933
00:34:01,809 --> 00:34:03,820
of characters and will give you a valid

934
00:34:03,820 --> 00:34:06,340
CSS unicode range for all of those so

935
00:34:06,340 --> 00:34:07,659
now we're passing everything into the

936
00:34:07,659 --> 00:34:09,970
template that we need to in the font but

937
00:34:09,970 --> 00:34:13,690
what about our JavaScript yeah so here's

938
00:34:13,690 --> 00:34:15,280
where we're getting the file name you

939
00:34:15,280 --> 00:34:16,450
know that we're passing into the

940
00:34:16,450 --> 00:34:19,240
template but roll up instead could just

941
00:34:19,240 --> 00:34:22,839
give us the entire code job done we're

942
00:34:22,839 --> 00:34:23,950
also passing in the file names for all

943
00:34:23,950 --> 00:34:25,089
the dependencies as we talked about

944
00:34:25,089 --> 00:34:27,399
earlier so instead we'll map over those

945
00:34:27,399 --> 00:34:30,580
and return the code for those instead so

946
00:34:30,580 --> 00:34:32,080
we had to change the HTML template as a

947
00:34:32,080 --> 00:34:33,669
result to handle that but again this is

948
00:34:33,669 --> 00:34:35,530
using our skills in HTML nothing plug-in

949
00:34:35,530 --> 00:34:37,270
specific so here's where we're doing the

950
00:34:37,270 --> 00:34:39,040
inline font there as part of the base64

951
00:34:39,040 --> 00:34:41,649
URL we can add the Unicode range there

952
00:34:41,649 --> 00:34:44,649
and there is the the inline script so

953
00:34:44,649 --> 00:34:46,960
we're done in theory but how does this

954
00:34:46,960 --> 00:34:50,020
impact our real-world performance we've

955
00:34:50,020 --> 00:34:51,730
already improved things a lot but with

956
00:34:51,730 --> 00:34:54,220
inlining we've reduced our interactive

957
00:34:54,220 --> 00:34:56,649
time by half a second on 3G and by about

958
00:34:56,649 --> 00:34:59,920
a second on 2g but we're not done yet

959
00:34:59,920 --> 00:35:02,440
now this javascript is inlined as well

960
00:35:02,440 --> 00:35:03,580
we've reached the point where the only

961
00:35:03,580 --> 00:35:05,510
thing that matters for first interactive

962
00:35:05,510 --> 00:35:07,100
everything that's inside of the HTML

963
00:35:07,100 --> 00:35:09,560
file like we've come a long way so even

964
00:35:09,560 --> 00:35:11,090
over 2g we're now interactive and just

965
00:35:11,090 --> 00:35:13,910
under six seconds not too bad but we can

966
00:35:13,910 --> 00:35:14,240
do better

967
00:35:14,240 --> 00:35:16,640
yeah like looking at our HTML file or

968
00:35:16,640 --> 00:35:21,260
index.html file it's 43 kilobytes and 32

969
00:35:21,260 --> 00:35:23,360
kilobytes of that our JavaScript and

970
00:35:23,360 --> 00:35:27,530
that is the code for everything it's all

971
00:35:27,530 --> 00:35:29,600
the fancy animations it's our rendering

972
00:35:29,600 --> 00:35:31,700
engines the WebGL bits it's the end

973
00:35:31,700 --> 00:35:33,740
screen and the user duty doesn't need

974
00:35:33,740 --> 00:35:36,140
the end screen at the start of the game

975
00:35:36,140 --> 00:35:38,210
yeah what we've done here is we've we've

976
00:35:38,210 --> 00:35:40,430
done a Photoshop right sure you've

977
00:35:40,430 --> 00:35:41,510
experienced this before where you're

978
00:35:41,510 --> 00:35:43,520
staring at this screen while it loads

979
00:35:43,520 --> 00:35:45,530
like a hundred plugins even though like

980
00:35:45,530 --> 00:35:47,120
the first interaction all you can really

981
00:35:47,120 --> 00:35:50,450
do when it when it starts up is create a

982
00:35:50,450 --> 00:35:52,730
new image or load an existing image you

983
00:35:52,730 --> 00:35:54,470
don't need all of those plugins until

984
00:35:54,470 --> 00:35:56,780
sometime later on yeah my my my favorite

985
00:35:56,780 --> 00:35:59,300
plugin is halida bottlenecks like series

986
00:35:59,300 --> 00:36:00,680
when you first showed me this I thought

987
00:36:00,680 --> 00:36:02,090
like well ironically I thought you'd

988
00:36:02,090 --> 00:36:03,680
Photoshop just a silly name in there

989
00:36:03,680 --> 00:36:05,150
like a poem oh I wasn't getting but this

990
00:36:05,150 --> 00:36:07,340
is a real it's a real pile of this it

991
00:36:07,340 --> 00:36:08,930
sounds like a Swedish folk singer like

992
00:36:08,930 --> 00:36:12,140
highlight the bottlenecks yeah so let's

993
00:36:12,140 --> 00:36:14,570
not load everything before the user can

994
00:36:14,570 --> 00:36:17,570
do anything let's prioritize the code to

995
00:36:17,570 --> 00:36:20,600
do this the first interaction is

996
00:36:20,600 --> 00:36:22,730
basically the user picking what kind of

997
00:36:22,730 --> 00:36:25,130
game they want to play and the only

998
00:36:25,130 --> 00:36:27,320
thing we to react to is the user hitting

999
00:36:27,320 --> 00:36:29,420
the start button and if for some reason

1000
00:36:29,420 --> 00:36:31,070
the user manages to press the start

1001
00:36:31,070 --> 00:36:33,200
button before our game logic has loaded

1002
00:36:33,200 --> 00:36:35,060
that's when we can spin up a loading

1003
00:36:35,060 --> 00:36:38,210
screen everything else can really just

1004
00:36:38,210 --> 00:36:39,620
Louis liking later it won't really

1005
00:36:39,620 --> 00:36:42,350
matter yes so this is where we need to

1006
00:36:42,350 --> 00:36:43,940
code split at this point because this is

1007
00:36:43,940 --> 00:36:45,470
our first interactive bit we don't have

1008
00:36:45,470 --> 00:36:47,270
the fancy animated background or the

1009
00:36:47,270 --> 00:36:48,800
logo that you know that stuff is

1010
00:36:48,800 --> 00:36:51,350
non-essential really Co splitting in

1011
00:36:51,350 --> 00:36:52,910
roll up works much the same as it does

1012
00:36:52,910 --> 00:36:55,660
in WebKit and web pack and parcel

1013
00:36:55,660 --> 00:36:57,590
imports like this this will cause

1014
00:36:57,590 --> 00:37:00,170
whatever dot J's to be bundled into the

1015
00:37:00,170 --> 00:37:02,690
same file if you want to be code split

1016
00:37:02,690 --> 00:37:06,080
instead you'll use a dynamic import and

1017
00:37:06,080 --> 00:37:08,090
this will return a promise so if you

1018
00:37:08,090 --> 00:37:09,470
want to use that module sometimes later

1019
00:37:09,470 --> 00:37:12,350
you will have to await it just in the

1020
00:37:12,350 --> 00:37:13,040
usual way

1021
00:37:13,040 --> 00:37:14,720
so the difference now is that whatever

1022
00:37:14,720 --> 00:37:16,520
dot J's is not going to be bundled in it

1023
00:37:16,520 --> 00:37:18,690
is going to be put into another chunk

1024
00:37:18,690 --> 00:37:21,089
and that makes it a sink which can bring

1025
00:37:21,089 --> 00:37:23,010
its own problems for example most of the

1026
00:37:23,010 --> 00:37:24,660
UI framework we are using nowadays

1027
00:37:24,660 --> 00:37:27,030
expect rendering to be synchronous and

1028
00:37:27,030 --> 00:37:29,790
can't really handle promises so react

1029
00:37:29,790 --> 00:37:31,859
suspense is aiming to change that by

1030
00:37:31,859 --> 00:37:34,079
allowing you to lazy load components but

1031
00:37:34,079 --> 00:37:36,690
pre-act doesn't have suspense so of

1032
00:37:36,690 --> 00:37:39,920
course we wrote it ourselves in 20 lines

1033
00:37:39,920 --> 00:37:42,780
seems like it obviously it can all half

1034
00:37:42,780 --> 00:37:45,150
of the things of that react suspense can

1035
00:37:45,150 --> 00:37:46,980
do but it can do everything that we need

1036
00:37:46,980 --> 00:37:49,470
it that we needed to do so really well

1037
00:37:49,470 --> 00:37:50,940
does if you give it a promise of a

1038
00:37:50,940 --> 00:37:52,890
component it wrapped it and returns you

1039
00:37:52,890 --> 00:37:55,349
a real component synchronously and you

1040
00:37:55,349 --> 00:37:57,359
can use that component as a placeholder

1041
00:37:57,359 --> 00:37:59,579
with two parameter spacing it will take

1042
00:37:59,579 --> 00:38:01,980
a loading function which will read

1043
00:38:01,980 --> 00:38:03,540
people used for rendering a placeholder

1044
00:38:03,540 --> 00:38:06,060
until the underlying component is ready

1045
00:38:06,060 --> 00:38:07,710
and at that point just switches over and

1046
00:38:07,710 --> 00:38:10,079
uses the other function like for aura

1047
00:38:10,079 --> 00:38:13,170
nebula yes so with that we moved all of

1048
00:38:13,170 --> 00:38:15,150
our components to a lazy model except

1049
00:38:15,150 --> 00:38:16,230
the ones that we needed for the first

1050
00:38:16,230 --> 00:38:19,109
render and this cut off over 20k

1051
00:38:19,109 --> 00:38:21,210
of the HTML that the JavaScript is now

1052
00:38:21,210 --> 00:38:23,940
down to just 11 K now I mean honestly I

1053
00:38:23,940 --> 00:38:25,800
think 11 K is a lot of JavaScript for

1054
00:38:25,800 --> 00:38:27,569
but is basically just a simple form on a

1055
00:38:27,569 --> 00:38:29,790
button but you know it's it's done its

1056
00:38:29,790 --> 00:38:31,500
job it's given us like that really quick

1057
00:38:31,500 --> 00:38:35,160
first bits of interactivity but you know

1058
00:38:35,160 --> 00:38:36,420
you're going to develop this app you're

1059
00:38:36,420 --> 00:38:38,369
gonna add stuff fix bugs how do we stop

1060
00:38:38,369 --> 00:38:40,380
this creeping up over time and this

1061
00:38:40,380 --> 00:38:41,550
turned out to be quite hard quite

1062
00:38:41,550 --> 00:38:43,530
interesting so you know you're sitting

1063
00:38:43,530 --> 00:38:44,940
there you write a new comp or you want

1064
00:38:44,940 --> 00:38:46,920
to add a new feature to the app and you

1065
00:38:46,920 --> 00:38:48,150
do everything right you think about

1066
00:38:48,150 --> 00:38:49,560
performance you think about file size

1067
00:38:49,560 --> 00:38:51,960
and it's Friday afternoon and none of

1068
00:38:51,960 --> 00:38:54,119
your colleagues are looking and then and

1069
00:38:54,119 --> 00:38:56,160
you have a weak moment and then you do

1070
00:38:56,160 --> 00:38:59,010
it you use vias code autocomplete and

1071
00:38:59,010 --> 00:39:01,530
bam suddenly you have a static import it

1072
00:39:01,530 --> 00:39:04,170
pulls in 200k of more code and that that

1073
00:39:04,170 --> 00:39:06,210
exactly is how Microsoft minesweeper

1074
00:39:06,210 --> 00:39:07,900
happens

1075
00:39:07,900 --> 00:39:11,109
yeah so we tried to know about how ways

1076
00:39:11,109 --> 00:39:12,700
ways we could fix this we tried the

1077
00:39:12,700 --> 00:39:14,079
comment system where we just put a

1078
00:39:14,079 --> 00:39:17,349
warning in files that we should encode -

1079
00:39:17,349 --> 00:39:18,130
yeah

1080
00:39:18,130 --> 00:39:20,859
bulletproof isn't it it did help a

1081
00:39:20,859 --> 00:39:23,529
little bit it was acted as a reminder it

1082
00:39:23,529 --> 00:39:24,999
was something we'd look at and in diffs

1083
00:39:24,999 --> 00:39:26,680
but yes we know it wasn't the best

1084
00:39:26,680 --> 00:39:29,529
solution your tools not rules so we felt

1085
00:39:29,529 --> 00:39:31,809
a little thing this hooks up to Travis

1086
00:39:31,809 --> 00:39:33,789
CI and so on each build it will go and

1087
00:39:33,789 --> 00:39:34,839
look at everything in the dist folder

1088
00:39:34,839 --> 00:39:36,609
and it will record the sizes of it and

1089
00:39:36,609 --> 00:39:38,410
that means when you create a PR it will

1090
00:39:38,410 --> 00:39:40,839
compare that against master so it'll

1091
00:39:40,839 --> 00:39:42,579
give us the Delta for all of the files

1092
00:39:42,579 --> 00:39:44,410
and so that means for every PR we just

1093
00:39:44,410 --> 00:39:46,329
go into this we have a look and you know

1094
00:39:46,329 --> 00:39:48,130
we'll be able to see if that index.html

1095
00:39:48,130 --> 00:39:50,289
file it's ballooning in a way that we

1096
00:39:50,289 --> 00:39:52,359
didn't expect this this works for all

1097
00:39:52,359 --> 00:39:54,309
projects that use Travis so you know

1098
00:39:54,309 --> 00:39:56,410
feel free to give it a go so what do we

1099
00:39:56,410 --> 00:39:58,150
win what do we gain since this is our

1100
00:39:58,150 --> 00:40:00,249
last optimization let's rewind all the

1101
00:40:00,249 --> 00:40:01,839
way back to the start to see where we

1102
00:40:01,839 --> 00:40:04,029
started yeah we started at like five

1103
00:40:04,029 --> 00:40:06,789
seconds until ready on 3G and 11 seconds

1104
00:40:06,789 --> 00:40:09,099
already on 2g we moved upon since we're

1105
00:40:09,099 --> 00:40:10,660
on server we pre-loaded the fonts and

1106
00:40:10,660 --> 00:40:11,920
the scripts and that improved the time

1107
00:40:11,920 --> 00:40:14,529
to interactive we added aesthetic render

1108
00:40:14,529 --> 00:40:15,910
improving perceived loading performance

1109
00:40:15,910 --> 00:40:18,730
and getting pixels on the screen earlier

1110
00:40:18,730 --> 00:40:20,890
and then we aligned our scripts and

1111
00:40:20,890 --> 00:40:22,299
subsided the fonts bringing down the

1112
00:40:22,299 --> 00:40:24,160
time to interactive again and then we

1113
00:40:24,160 --> 00:40:26,170
split the code we focus on the code that

1114
00:40:26,170 --> 00:40:28,809
we needed for interactivity and split

1115
00:40:28,809 --> 00:40:30,999
off everything else and that slashed the

1116
00:40:30,999 --> 00:40:33,519
time to interactive by over a second on

1117
00:40:33,519 --> 00:40:36,700
3G and by two seconds on 2g yeah so from

1118
00:40:36,700 --> 00:40:38,799
the stying point we've like half the

1119
00:40:38,799 --> 00:40:40,509
time to interactive and so let's

1120
00:40:40,509 --> 00:40:42,190
actually feel what that difference is

1121
00:40:42,190 --> 00:40:43,809
so here on the left is the original

1122
00:40:43,809 --> 00:40:45,730
alpha version and on the right is the

1123
00:40:45,730 --> 00:40:48,039
latest version this is loading over a 2g

1124
00:40:48,039 --> 00:40:49,660
connection so it's all got a bit of a

1125
00:40:49,660 --> 00:40:50,890
delay at the start because I think

1126
00:40:50,890 --> 00:40:52,390
setting up connections but then our

1127
00:40:52,390 --> 00:40:53,589
optimized version there it is and now

1128
00:40:53,589 --> 00:40:55,359
it's interactive the user can use it the

1129
00:40:55,359 --> 00:40:57,160
old version it gets there but come on

1130
00:40:57,160 --> 00:40:58,720
it's like still not interactive because

1131
00:40:58,720 --> 00:41:00,579
of the fonts and finally it's like so

1132
00:41:00,579 --> 00:41:03,670
much later remember when you are at a

1133
00:41:03,670 --> 00:41:06,970
festival or on a train on conference

1134
00:41:06,970 --> 00:41:09,670
like here or you just on vacation and

1135
00:41:09,670 --> 00:41:11,739
using roaming you will be experiencing

1136
00:41:11,739 --> 00:41:13,450
speech like speeds that closer than 3G

1137
00:41:13,450 --> 00:41:17,200
or even 2g sometimes yeah I also once

1138
00:41:17,200 --> 00:41:18,400
they're playing the game we install the

1139
00:41:18,400 --> 00:41:19,779
serviceworker because you know I'm not

1140
00:41:19,779 --> 00:41:20,859
allowed to ship anything that doesn't

1141
00:41:20,859 --> 00:41:21,910
have a

1142
00:41:21,910 --> 00:41:23,650
and that means like it's going to work

1143
00:41:23,650 --> 00:41:25,330
offline first but you know as a side

1144
00:41:25,330 --> 00:41:27,609
effect it means it cuts down the timing

1145
00:41:27,609 --> 00:41:29,530
to like well pretty much instantly just

1146
00:41:29,530 --> 00:41:31,420
a second for all caches to split so you

1147
00:41:31,420 --> 00:41:32,920
might be wondering where did we end up

1148
00:41:32,920 --> 00:41:34,660
with our plugin counter well to be

1149
00:41:34,660 --> 00:41:36,190
honest ii wrote way more plugins than we

1150
00:41:36,190 --> 00:41:40,359
talked about in this talk so this is

1151
00:41:40,359 --> 00:41:42,849
what our roller plugin looked like in

1152
00:41:42,849 --> 00:41:44,500
the end it's probably easier to me to

1153
00:41:44,500 --> 00:41:46,300
highlight the plugins that we did not

1154
00:41:46,300 --> 00:41:49,540
write which is these and so in total

1155
00:41:49,540 --> 00:41:56,530
that brings us to 16 plugins it's not a

1156
00:41:56,530 --> 00:41:58,540
bad thing I don't know I'm not so sure

1157
00:41:58,540 --> 00:42:00,670
I prefer wrangling code than I do

1158
00:42:00,670 --> 00:42:02,230
wrangling come to give someone else's

1159
00:42:02,230 --> 00:42:03,670
code I think it's really empowering to

1160
00:42:03,670 --> 00:42:05,500
be able to go in and just fix stuff

1161
00:42:05,500 --> 00:42:07,420
without spending days learning a new DSL

1162
00:42:07,420 --> 00:42:10,270
or something like that we're not asking

1163
00:42:10,270 --> 00:42:11,950
you to use our plugins absolutely not

1164
00:42:11,950 --> 00:42:13,170
because they're kind of dependent

1165
00:42:13,170 --> 00:42:15,730
interdependent and unique to procs but

1166
00:42:15,730 --> 00:42:17,590
we're saying like write your own cuz it

1167
00:42:17,590 --> 00:42:19,119
probably be quicker than using someone

1168
00:42:19,119 --> 00:42:20,859
else's plugin for especially for a lot

1169
00:42:20,859 --> 00:42:22,690
of fairly trivial stuff and if your

1170
00:42:22,690 --> 00:42:24,369
current build system is in the way of

1171
00:42:24,369 --> 00:42:25,300
shipping features that improve

1172
00:42:25,300 --> 00:42:27,580
performance for your users get a better

1173
00:42:27,580 --> 00:42:35,410
built system by right

