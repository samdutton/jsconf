1
00:00:09,440 --> 00:00:12,360

I'm James Halliday or sub stack on

2
00:00:12,360 --> 00:00:15,299
github and I'm going to talk about D

3
00:00:15,299 --> 00:00:22,350
node which makes RPC awesome so as I

4
00:00:22,350 --> 00:00:24,750
said easy as cake with D node you can

5
00:00:24,750 --> 00:00:26,990
just string together your processes like

6
00:00:26,990 --> 00:00:29,429
like nothing you just hack up a server

7
00:00:29,429 --> 00:00:33,540
here require D node and then just call

8
00:00:33,540 --> 00:00:35,579
it it's it's a function you can define

9
00:00:35,579 --> 00:00:36,750
methods on it you can define

10
00:00:36,750 --> 00:00:39,420
constructors the cool thing is you can

11
00:00:39,420 --> 00:00:42,600
define functions in your D node server

12
00:00:42,600 --> 00:00:44,910
and then those functions can be called

13
00:00:44,910 --> 00:00:48,960
by clients that connect so like here we

14
00:00:48,960 --> 00:00:52,500
have just a simple sting function that

15
00:00:52,500 --> 00:00:55,140
has two parameters N and a callback and

16
00:00:55,140 --> 00:00:57,539
then you know when we get a request in

17
00:00:57,539 --> 00:00:59,670
we just call that callback with n times

18
00:00:59,670 --> 00:01:03,420
100 and listen on port 5000 and here's a

19
00:01:03,420 --> 00:01:05,430
client that makes use of that server so

20
00:01:05,430 --> 00:01:09,840
it just goes denote connect port 5000

21
00:01:09,840 --> 00:01:11,939
and it gets this remote object and you

22
00:01:11,939 --> 00:01:14,340
can call the the server function which

23
00:01:14,340 --> 00:01:17,850
was Xing as we just saw and it gives it

24
00:01:17,850 --> 00:01:19,140
some parameters and you just get the

25
00:01:19,140 --> 00:01:22,350
callback and and these processes can be

26
00:01:22,350 --> 00:01:25,950
living on different servers or the same

27
00:01:25,950 --> 00:01:27,420
server it really doesn't matter because

28
00:01:27,420 --> 00:01:29,850
do you know just figures all that out

29
00:01:29,850 --> 00:01:33,869
makes it all work so yeah no schemas

30
00:01:33,869 --> 00:01:37,020
none of that about XML no like

31
00:01:37,020 --> 00:01:39,150
making your own silly JSON thing that's

32
00:01:39,150 --> 00:01:41,400
gonna route your your a synchronous

33
00:01:41,400 --> 00:01:43,470
callbacks to where you need in your

34
00:01:43,470 --> 00:01:45,329
program you can just pass a function

35
00:01:45,329 --> 00:01:49,579
directly and it makes it so much simpler

36
00:01:49,579 --> 00:01:53,340
so here's here's these two client and

37
00:01:53,340 --> 00:01:54,930
server side by side servers on the top

38
00:01:54,930 --> 00:01:56,759
and I'm just gonna go through kind of

39
00:01:56,759 --> 00:01:59,369
what happens when you make a remote

40
00:01:59,369 --> 00:02:03,180
function called d node so oh goodness

41
00:02:03,180 --> 00:02:06,840
that's supposed to be red I don't know

42
00:02:06,840 --> 00:02:12,930
what's up with that anyways so here we

43
00:02:12,930 --> 00:02:14,010
call this link function

44
00:02:14,010 --> 00:02:18,510
we give it 66 as the end parameter okay

45
00:02:18,510 --> 00:02:22,110
this one's good and then uh you know we

46
00:02:22,110 --> 00:02:24,060
give it this callback here that has just

47
00:02:24,060 --> 00:02:26,909
a console dot log now in denote the

48
00:02:26,909 --> 00:02:29,069
functions execute on the sides that

49
00:02:29,069 --> 00:02:32,220
they're defined on so this console dot

50
00:02:32,220 --> 00:02:34,040
log is going to execute on the client

51
00:02:34,040 --> 00:02:37,049
because that's you know where you've run

52
00:02:37,049 --> 00:02:38,519
the program it's not like sending around

53
00:02:38,519 --> 00:02:40,560
a serialized to string of a function or

54
00:02:40,560 --> 00:02:42,090
something silly like that it actually

55
00:02:42,090 --> 00:02:45,329
sends references so that callback gets

56
00:02:45,329 --> 00:02:48,140
passed into the function body and then

57
00:02:48,140 --> 00:02:51,510
the N also two computer results that we

58
00:02:51,510 --> 00:02:53,220
get back at the client just as a

59
00:02:53,220 --> 00:02:55,980
parameter directly exactly like is as if

60
00:02:55,980 --> 00:02:59,120
all of this was running locally except

61
00:02:59,120 --> 00:03:02,190
you don't get return values because

62
00:03:02,190 --> 00:03:03,690
that's not very asynchronous you know

63
00:03:03,690 --> 00:03:06,780
and then you can just print it like this

64
00:03:06,780 --> 00:03:09,269
so you just launch your server you want

65
00:03:09,269 --> 00:03:11,700
your client and you get your result back

66
00:03:11,700 --> 00:03:16,049
it's very simple very very easy to get

67
00:03:16,049 --> 00:03:17,790
started building this stuff and so you

68
00:03:17,790 --> 00:03:19,290
can sort of incrementally build these

69
00:03:19,290 --> 00:03:22,650
awesome programs like I have here but it

70
00:03:22,650 --> 00:03:24,150
might be a little bit sketchy getting it

71
00:03:24,150 --> 00:03:26,129
uh entirely working with this network so

72
00:03:26,129 --> 00:03:31,650
 yeah callbacks so you can actually

73
00:03:31,650 --> 00:03:33,480
yeah callbacks so you can actually
take this code this sort of server

74
00:03:33,480 --> 00:03:36,209
client TCP streams like I just mentioned

75
00:03:36,209 --> 00:03:38,310
that example and just throw it up on the

76
00:03:38,310 --> 00:03:42,299
server with exactly the same code except

77
00:03:42,299 --> 00:03:44,220
you know okay here in the first four

78
00:03:44,220 --> 00:03:46,199
lines we've got a web server and then

79
00:03:46,199 --> 00:03:48,480
instead of a server dot less than 5,000

80
00:03:48,480 --> 00:03:51,209
we just server dot listen app

81
00:03:51,209 --> 00:03:53,760
and it's a web app and it just knows how

82
00:03:53,760 --> 00:03:58,859
to make that work with socket IO so yeah

83
00:03:58,859 --> 00:04:00,690
and you can actually do both - so you

84
00:04:00,690 --> 00:04:02,370
can like serve it out listen app and

85
00:04:02,370 --> 00:04:04,500
server dot listen on five thousand and

86
00:04:04,500 --> 00:04:06,569
that will like host a web server and

87
00:04:06,569 --> 00:04:09,030
have your TCP service so you can have

88
00:04:09,030 --> 00:04:11,519
like your your hacky back-end code that

89
00:04:11,519 --> 00:04:13,229
like connects to the TCP thing and you

90
00:04:13,229 --> 00:04:14,970
can have your nice fancy front-end that

91
00:04:14,970 --> 00:04:20,060
connects to your web server and it's

92
00:04:20,060 --> 00:04:25,440
it's the same methods for both so like

93
00:04:25,440 --> 00:04:27,840
if if you remember the client we just

94
00:04:27,840 --> 00:04:29,880
wrapped up this is basically the

95
00:04:29,880 --> 00:04:32,310
equivalent in browser form so just some

96
00:04:32,310 --> 00:04:34,740
basic HTML you just throw down a script

97
00:04:34,740 --> 00:04:39,000
tag and D node makes this /d nodejs

98
00:04:39,000 --> 00:04:41,669
available for you automatically so you

99
00:04:41,669 --> 00:04:43,830
don't have to really worry about messing

100
00:04:43,830 --> 00:04:48,660
with like deploying client source but

101
00:04:48,660 --> 00:04:50,850
anyways you just pass in your 66

102
00:04:50,850 --> 00:04:52,530
parameter and you pass in your callback

103
00:04:52,530 --> 00:04:55,199
and you get back the end value and if

104
00:04:55,199 --> 00:04:56,520
you go to the browser that's what you

105
00:04:56,520 --> 00:05:00,450
see pretty much exactly like the client

106
00:05:00,450 --> 00:05:02,760
I mean it's exactly the same sort of

107
00:05:02,760 --> 00:05:04,650
code except for instead of console dot

108
00:05:04,650 --> 00:05:06,990
log we have you know inner HTML thing

109
00:05:06,990 --> 00:05:08,220
because I'm not using jQuery for

110
00:05:08,220 --> 00:05:12,510
simplicity here also denote works

111
00:05:12,510 --> 00:05:14,610
awesomely with browser if I actually

112
00:05:14,610 --> 00:05:17,850
behind the scenes its wrapping the

113
00:05:17,850 --> 00:05:20,760
client source that's like /d nodejs the

114
00:05:20,760 --> 00:05:22,560
the browser side version of denote that

115
00:05:22,560 --> 00:05:25,770
it needs to do this crazy trickery with

116
00:05:25,770 --> 00:05:27,479
browserify already but you can also use

117
00:05:27,479 --> 00:05:31,110
it explicitly browser fight is a is a

118
00:05:31,110 --> 00:05:34,950
browser version of require so you can

119
00:05:34,950 --> 00:05:37,169
like load up npm modules and craziness

120
00:05:37,169 --> 00:05:39,750
like that and bundle everything but

121
00:05:39,750 --> 00:05:41,240
here's just an example of that you can

122
00:05:41,240 --> 00:05:43,919
just require d node in your little

123
00:05:43,919 --> 00:05:46,800
browserify line there as a middleware

124
00:05:46,800 --> 00:05:51,330
and then the code becomes even nicer

125
00:05:51,330 --> 00:05:53,460
because it's even more like what you

126
00:05:53,460 --> 00:05:55,080
would write on the server because now

127
00:05:55,080 --> 00:05:59,490
Verdi node equals require D node and you

128
00:05:59,490 --> 00:06:01,800
just you know throw in a window dot

129
00:06:01,800 --> 00:06:06,960
onload and it's like even cooler so

130
00:06:06,960 --> 00:06:08,669
basically what's going on here is you've

131
00:06:08,669 --> 00:06:10,650
got your main denote constructor and

132
00:06:10,650 --> 00:06:13,530
this can take either like just an object

133
00:06:13,530 --> 00:06:16,470
with you know keys and values you can

134
00:06:16,470 --> 00:06:21,650
pass attributes as well as functions and

135
00:06:21,650 --> 00:06:24,479
or you can use it like in constructor

136
00:06:24,479 --> 00:06:26,099
form like I've got here up on the on the

137
00:06:26,099 --> 00:06:29,639
bottom it's basically just like if you

138
00:06:29,639 --> 00:06:32,190
call new and a function it does the same

139
00:06:32,190 --> 00:06:34,349
sort of trick where like there's this

140
00:06:34,349 --> 00:06:36,479
implicit return at the end that returns

141
00:06:36,479 --> 00:06:38,880
to this object so makes it a really

142
00:06:38,880 --> 00:06:40,260
compelling use case because you can just

143
00:06:40,260 --> 00:06:41,199
go this

144
00:06:41,199 --> 00:06:44,860
whatever and you can have access to the

145
00:06:44,860 --> 00:06:46,810
remote object which is the first

146
00:06:46,810 --> 00:06:48,580
callback parameter and the connection

147
00:06:48,580 --> 00:06:50,979
objects which you can do cool stuff with

148
00:06:50,979 --> 00:06:54,159
like listening for different kinds of

149
00:06:54,159 --> 00:06:57,189
events that happen and like ending a

150
00:06:57,189 --> 00:07:02,409
client's connection - right one thing

151
00:07:02,409 --> 00:07:03,879
that's a little bit tricky I think for

152
00:07:03,879 --> 00:07:05,379
newcomers is remote isn't always

153
00:07:05,379 --> 00:07:09,400
populated so because each side sort of

154
00:07:09,400 --> 00:07:11,259
needs to call the others constructor to

155
00:07:11,259 --> 00:07:13,569
figure out what methods it has and so

156
00:07:13,569 --> 00:07:15,339
like something's got to give there you

157
00:07:15,339 --> 00:07:18,129
can't like know about it before you get

158
00:07:18,129 --> 00:07:19,779
it from the other side it's you get

159
00:07:19,779 --> 00:07:22,810
deadlock so you can do a use the

160
00:07:22,810 --> 00:07:25,270
connection object on ready to get that

161
00:07:25,270 --> 00:07:29,169
event or if you call connect you get

162
00:07:29,169 --> 00:07:31,689
that stuff so the other way to connect

163
00:07:31,689 --> 00:07:33,310
with denote is to call the dot connect

164
00:07:33,310 --> 00:07:34,839
and dot listen you could pass a callback

165
00:07:34,839 --> 00:07:38,110
to that I've tried really hard to make

166
00:07:38,110 --> 00:07:41,349
Dino just crazy usable and so you can

167
00:07:41,349 --> 00:07:44,529
just throw fricking ports or host names

168
00:07:44,529 --> 00:07:46,629
or callbacks at these constructors in

169
00:07:46,629 --> 00:07:50,080
any order and Dino just figures out what

170
00:07:50,080 --> 00:07:54,189
you probably you know mean by it I guess

171
00:07:54,189 --> 00:07:57,460
that's not always um it's it's not for

172
00:07:57,460 --> 00:07:58,659
everyone but I think in this case it

173
00:07:58,659 --> 00:08:00,819
really works cuz you can just you know

174
00:08:00,819 --> 00:08:03,120
not have to worry about argument order

175
00:08:03,120 --> 00:08:05,919
and in the callback of course you get

176
00:08:05,919 --> 00:08:07,899
the remote and the connection that's a

177
00:08:07,899 --> 00:08:09,370
pretty consistent convention throughout

178
00:08:09,370 --> 00:08:10,719
the you know I mean there's only just

179
00:08:10,719 --> 00:08:12,520
that callback and then the constructor

180
00:08:12,520 --> 00:08:15,939
callback and then for convenience even

181
00:08:15,939 --> 00:08:17,770
further you can just do like Dino dot

182
00:08:17,770 --> 00:08:19,569
connect instead of actually you know if

183
00:08:19,569 --> 00:08:21,099
you don't even have a constructor or

184
00:08:21,099 --> 00:08:22,389
anything that you want to host either

185
00:08:22,389 --> 00:08:27,550
side you could just call that so Dino

186
00:08:27,550 --> 00:08:32,169
does callbacks really I guess pleasantly

187
00:08:32,169 --> 00:08:35,469
surprisingly something like this would

188
00:08:35,469 --> 00:08:38,579
actually work because it's not just that

189
00:08:38,579 --> 00:08:42,819
D note is looking in an object or you

190
00:08:42,819 --> 00:08:44,800
know the results of a constructor for

191
00:08:44,800 --> 00:08:47,949
functions it's actually looking for

192
00:08:47,949 --> 00:08:52,610
functions whenever you call a function

193
00:08:52,610 --> 00:08:55,010
in in one of those callbacks that you

194
00:08:55,010 --> 00:08:56,450
supplied in the first place so here we

195
00:08:56,450 --> 00:08:57,830
have like three layers of indirection

196
00:08:57,830 --> 00:09:02,750
and you can just go all the way all the

197
00:09:02,750 --> 00:09:05,330
way with this it's it's actually

198
00:09:05,330 --> 00:09:09,290
entirely recursive so you can pass

199
00:09:09,290 --> 00:09:10,820
functions around like crazy which is

200
00:09:10,820 --> 00:09:12,880
great if you're making these complicated

201
00:09:12,880 --> 00:09:16,520
stateful applications where you sort of

202
00:09:16,520 --> 00:09:18,650
need data to be in every which place

203
00:09:18,650 --> 00:09:21,130
throughout your interface sort of oil

204
00:09:21,130 --> 00:09:23,740
unavoidable so D node makes that

205
00:09:23,740 --> 00:09:26,780
possible at least it I mean it it might

206
00:09:26,780 --> 00:09:33,060
not be pretty but you can fix that later

207
00:09:33,070 --> 00:09:41,750
also yeah that's great yes so D node

208
00:09:41,750 --> 00:09:43,790
will ruthlessly hunt down your callbacks

209
00:09:43,790 --> 00:09:46,670
to no matter how deeply you nest them no

210
00:09:46,670 --> 00:09:48,350
matter how many times you recurse like

211
00:09:48,350 --> 00:09:52,850
here's a just a function call and you

212
00:09:52,850 --> 00:09:54,590
can nest them however you want and that

213
00:09:54,590 --> 00:09:56,150
includes when you set up like

214
00:09:56,150 --> 00:09:58,880
constructors and object definitions or

215
00:09:58,880 --> 00:10:01,070
if you just pass if you just call

216
00:10:01,070 --> 00:10:03,200
functions remotely it's you can just

217
00:10:03,200 --> 00:10:06,560
pass around data however you like and it

218
00:10:06,560 --> 00:10:08,420
can have functions wherever pretty much

219
00:10:08,420 --> 00:10:09,950
except in the prototype chain because

220
00:10:09,950 --> 00:10:11,150
that's a key and I don't want to mess

221
00:10:11,150 --> 00:10:12,440
with that

222
00:10:12,440 --> 00:10:15,860
and even in client definition so your

223
00:10:15,860 --> 00:10:17,720
clients can actually host up methods

224
00:10:17,720 --> 00:10:19,580
that they want the server to see as sort

225
00:10:19,580 --> 00:10:20,930
of an entry point into this whole

226
00:10:20,930 --> 00:10:24,770
negotiation so here's some awesome

227
00:10:24,770 --> 00:10:26,900
examples of stuff that uses D node in

228
00:10:26,900 --> 00:10:29,000
the well my startup browser lling we use

229
00:10:29,000 --> 00:10:31,730
this a lot I was gonna do a quick demo

230
00:10:31,730 --> 00:10:34,250
but networks kind of for that but I

231
00:10:34,250 --> 00:10:38,000
basically lets you do like cross-browser

232
00:10:38,000 --> 00:10:39,470
testing in your browser so you can

233
00:10:39,470 --> 00:10:41,300
actually use like IE or Safari or

234
00:10:41,300 --> 00:10:43,430
something from this canvas element and

235
00:10:43,430 --> 00:10:46,250
it's all on the back end done with like

236
00:10:46,250 --> 00:10:48,410
on the back end and the front end dino

237
00:10:48,410 --> 00:10:51,440
ties everything together another awesome

238
00:10:51,440 --> 00:10:53,600
thing that maroc over here and his

239
00:10:53,600 --> 00:10:56,030
buddies at no jitsi wrote up was a json

240
00:10:56,030 --> 00:10:58,070
loops it's this awesome sequencer thing

241
00:10:58,070 --> 00:11:01,310
that we might or may not use here in a

242
00:11:01,310 --> 00:11:06,350
bit and like crazy games and

243
00:11:06,350 --> 00:11:10,400
and like upload progress bars it's great

244
00:11:10,400 --> 00:11:11,780
for that sort of stuff where you sort of

245
00:11:11,780 --> 00:11:15,200
have like a job maybe and it you you

246
00:11:15,200 --> 00:11:16,610
don't want to periodically pull it for

247
00:11:16,610 --> 00:11:19,150
updates or anything or make some hacky

248
00:11:19,150 --> 00:11:23,630
JSON protocol to sort of marshal data

249
00:11:23,630 --> 00:11:26,300
around so you know it is great for that

250
00:11:26,300 --> 00:11:28,880
stuff also you can use D node in Ruby

251
00:11:28,880 --> 00:11:30,770
I've got like a little library up on

252
00:11:30,770 --> 00:11:34,010
github that lets you use the denote

253
00:11:34,010 --> 00:11:35,270
protocol so you can like tie together

254
00:11:35,270 --> 00:11:37,730
nodejs processes and Ruby processes and

255
00:11:37,730 --> 00:11:42,170
the same thing for Perl and some crazy

256
00:11:42,170 --> 00:11:46,670
fool even wrote a Java implementation

257
00:11:46,670 --> 00:11:48,290
I've not tried it I don't know how it

258
00:11:48,290 --> 00:11:51,590
works but it's out there so it's getting

259
00:11:51,590 --> 00:11:52,790
pretty awesome

260
00:11:52,790 --> 00:11:55,970
and here's it up on github you should

261
00:11:55,970 --> 00:11:59,570
definitely check it out and now if

262
00:11:59,570 --> 00:12:01,370
everything goes well that's the end of

263
00:12:01,370 --> 00:12:05,750
the slides but let's see we've got about

264
00:12:05,750 --> 00:12:12,290
15 minutes so hopefully we can oh please

265
00:12:12,290 --> 00:12:19,220
connect well I guess we just read it off

266
00:12:19,220 --> 00:12:28,490
my lip oh yes it works yeah oh yeah

267
00:12:28,490 --> 00:12:38,270
so okay big so here I've got this rap

268
00:12:38,270 --> 00:12:39,860
battle program you can check it out and

269
00:12:39,860 --> 00:12:41,180
github actually it's it's up there right

270
00:12:41,180 --> 00:12:42,140
now

271
00:12:42,140 --> 00:12:48,740
so basically it's it's just a denote

272
00:12:48,740 --> 00:12:52,880
server here and we've got it uses you

273
00:12:52,880 --> 00:12:56,000
know browserify and everything and if we

274
00:12:56,000 --> 00:12:57,680
can scroll I don't know how to scroll

275
00:12:57,680 --> 00:12:59,840
correctly on this Mac but um yeah here

276
00:12:59,840 --> 00:13:01,550
we go here's the the server part you

277
00:13:01,550 --> 00:13:03,500
know denote function and you get your

278
00:13:03,500 --> 00:13:05,120
client handle and your connection handle

279
00:13:05,120 --> 00:13:06,230
and you can just define these functions

280
00:13:06,230 --> 00:13:08,750
here here's a watch function here's a

281
00:13:08,750 --> 00:13:12,230
wrap function it takes a call back in

282
00:13:12,230 --> 00:13:15,230
like a challenge callback so you can mix

283
00:13:15,230 --> 00:13:17,300
and match and you just basically write

284
00:13:17,300 --> 00:13:19,010
your code pretty much like you'd write

285
00:13:19,010 --> 00:13:20,170
it in note anyways

286
00:13:20,170 --> 00:13:21,399
if everything was just living in a

287
00:13:21,399 --> 00:13:24,880
single process but callbacks can like be

288
00:13:24,880 --> 00:13:26,829
defined on the browser or be defined on

289
00:13:26,829 --> 00:13:29,019
entirely separate processes maybe on

290
00:13:29,019 --> 00:13:34,240
entirely separate servers and so we can

291
00:13:34,240 --> 00:13:36,639
just straight-up call these functions

292
00:13:36,639 --> 00:13:39,550
like here I have it actually running

293
00:13:39,550 --> 00:13:43,089
I'll just real quick in do some live

294
00:13:43,089 --> 00:13:49,510
coding in the repple here so we can just

295
00:13:49,510 --> 00:13:53,490
require the d node require event emitter

296
00:13:53,490 --> 00:13:57,399
require event event emitter okay

297
00:13:57,399 --> 00:13:59,769
and now just D no duck connect I've got

298
00:13:59,769 --> 00:14:02,399
this service running on port 8081

299
00:14:02,399 --> 00:14:05,199
and we get a handle to the remote object

300
00:14:05,199 --> 00:14:07,870
and why don't we just like console that

301
00:14:07,870 --> 00:14:12,519
derp that oh yeah ah and then it's

302
00:14:12,519 --> 00:14:16,570
done some really weird thing I just want

303
00:14:16,570 --> 00:14:17,560
to find cuz I don't care about the

304
00:14:17,560 --> 00:14:19,449
result oh no connection refused alright

305
00:14:19,449 --> 00:14:27,860
because I had the wrong port I think

306
00:14:27,870 --> 00:14:32,800
yeah what's running I think oh no it's

307
00:14:32,800 --> 00:14:37,029
no that would be why okay so let's

308
00:14:37,029 --> 00:14:42,820
actually start the thing so we've just

309
00:14:42,820 --> 00:14:45,430
got a server okay that work is being

310
00:14:45,430 --> 00:14:50,140
slow so we've got these clients that are

311
00:14:50,140 --> 00:14:53,140
these wrap combatants and I wrote this

312
00:14:53,140 --> 00:14:55,690
crazy Markov freestyle thing like in the

313
00:14:55,690 --> 00:14:58,720
past couple of days so basically with

314
00:14:58,720 --> 00:15:03,880
that we can like just connect to our

315
00:15:03,880 --> 00:15:08,110
server process and have this freestyle

316
00:15:08,110 --> 00:15:13,420
handle going here we're like here's the

317
00:15:13,420 --> 00:15:16,149
bulk of it so basically generate wrap

318
00:15:16,149 --> 00:15:20,019
responses to when it's our turn

319
00:15:20,019 --> 00:15:23,260
basically from the server so I'll fire

320
00:15:23,260 --> 00:15:27,510
up one of these

321
00:15:27,520 --> 00:15:33,070
for me and this actually takes a bit to

322
00:15:33,070 --> 00:15:35,350
start up so it prints out ready when

323
00:15:35,350 --> 00:15:40,839
it's ready and then let's fire up Chrome

324
00:15:40,839 --> 00:16:07,450
real quick okay so we go to I hate Mac's

325
00:16:07,450 --> 00:16:10,709
by the way it's so I get this think that

326
00:16:10,709 --> 00:16:18,459
oh I did that wrong okay so this is the

327
00:16:18,459 --> 00:16:21,970
the web version basically of this um rap

328
00:16:21,970 --> 00:16:24,550
program I guess I can while these are

329
00:16:24,550 --> 00:16:27,300
loading okay they're both ready so

330
00:16:27,300 --> 00:16:30,040
basically what the the web app is doing

331
00:16:30,040 --> 00:16:31,990
isn't much more complicated than this

332
00:16:31,990 --> 00:16:33,520
this is like a command line version of

333
00:16:33,520 --> 00:16:35,620
it it basically registers an event it

334
00:16:35,620 --> 00:16:37,240
creates an event emitter and like binds

335
00:16:37,240 --> 00:16:40,450
the emit function to this remote dot

336
00:16:40,450 --> 00:16:42,940
watch thing so it can sort of like an ad

337
00:16:42,940 --> 00:16:44,860
hoc pub/sub thing you can just hack

338
00:16:44,860 --> 00:16:46,660
these up like nothing in denote because

339
00:16:46,660 --> 00:16:49,770
it's it's that modular and flexible so

340
00:16:49,770 --> 00:16:53,860
go back to Chrome real quick oh yeah so

341
00:16:53,860 --> 00:16:55,720
uh we're gonna have a little rap battle

342
00:16:55,720 --> 00:16:57,820
for you here it's a mark of randomly

343
00:16:57,820 --> 00:17:01,660
generated rhyming D node based rap

344
00:17:01,660 --> 00:17:08,380
battle so yeah yeah sure so maroc here

345
00:17:08,380 --> 00:17:11,050
is gonna help me out with this I know a

346
00:17:11,050 --> 00:17:17,590
good mp3 to use oh yeah

347
00:17:17,600 --> 00:17:23,430
okay three more

348
00:17:23,440 --> 00:17:25,060
well I'm not hearing anything now it's

349
00:17:25,060 --> 00:18:07,669
gonna go through

350
00:18:07,679 --> 00:18:10,450
yes either very well they don't actually

351
00:18:10,450 --> 00:18:20,320
work teach you function into cube the

352
00:18:20,320 --> 00:18:39,220
first one cookie jar from where my

353
00:18:39,220 --> 00:19:30,960
question

354
00:19:30,970 --> 00:19:37,920
are there any docs on why it's not easy

355
00:19:37,930 --> 00:19:46,400
what about little wear compatibility out

356
00:19:46,400 --> 00:19:49,730
of whack a simple string the way to pass

357
00:19:49,730 --> 00:20:50,800
a hack

358
00:20:50,810 --> 00:21:00,600
guess

359
00:21:00,610 --> 00:21:05,090
try to read me encoding ex work only

360
00:21:05,090 --> 00:21:09,289
supports utf-8 alright problem with that

361
00:21:09,289 --> 00:21:25,529
installs updating a - cheap package side

362
00:21:25,539 --> 00:22:00,500
no and it's all for you yeah yeah this

363
00:22:00,500 --> 00:22:03,380
cuz that's all my no JSI are CVS you get

364
00:22:03,380 --> 00:22:42,950
a real 24/7 Oh

365
00:22:42,960 --> 00:22:54,380
and now we see he's not in the list

366
00:22:54,390 --> 00:23:04,930
might be some lag on our network we

367
00:23:04,930 --> 00:23:10,460
generated on

368
00:23:10,470 --> 00:23:28,650
I guess so you guys can check that out

369
00:23:28,650 --> 00:23:30,630
and github or I guess we got time for

370
00:23:30,630 --> 00:23:32,549
like a few questions maybe and we're

371
00:23:32,549 --> 00:23:34,650
accepting rap battles so just let us

372
00:23:34,650 --> 00:23:34,980
know

373
00:23:34,980 --> 00:23:40,500
oh the now Gia's question oh yeah is

374
00:23:40,500 --> 00:23:41,309
expecting this

375
00:23:41,309 --> 00:23:43,530
so right now jess is this new sort of

376
00:23:43,530 --> 00:23:46,799
real-time projects based on socket IO

377
00:23:46,799 --> 00:23:49,470
it's pretty similar now jeaious is

378
00:23:49,470 --> 00:23:51,809
really new and it's got this sort of

379
00:23:51,809 --> 00:23:53,429
replication thing with like harmony

380
00:23:53,429 --> 00:23:55,590
proxies and and like a set interval to

381
00:23:55,590 --> 00:23:58,350
check so the idea with no GS is you sort

382
00:23:58,350 --> 00:24:03,659
of add and delete items on the fly and

383
00:24:03,659 --> 00:24:06,150
and they propagate but D note is not

384
00:24:06,150 --> 00:24:08,130
about that at all it's about just you

385
00:24:08,130 --> 00:24:11,370
pass an object or a constructor and

386
00:24:11,370 --> 00:24:13,020
that's just how it goes

387
00:24:13,020 --> 00:24:15,210
and to get the sort of advanced

388
00:24:15,210 --> 00:24:18,330
functionality you use callbacks and use

389
00:24:18,330 --> 00:24:20,659
like event streams on top of callbacks

390
00:24:20,659 --> 00:24:23,970
so and then D note also works in frickin

391
00:24:23,970 --> 00:24:27,299
Ruby and Perl and Java and it works on

392
00:24:27,299 --> 00:24:33,990
the browser or the the backend so yeah

393
00:24:33,990 --> 00:24:39,000
maroc

394
00:24:39,010 --> 00:24:42,310
so yeah mirach just asked if i if you

395
00:24:42,310 --> 00:24:44,530
can use like just pure service server

396
00:24:44,530 --> 00:24:46,870
like TCP connections absolutely you can

397
00:24:46,870 --> 00:24:49,030
do that um that's actually like what I

398
00:24:49,030 --> 00:24:52,300
wrote it for originally and then I sort

399
00:24:52,300 --> 00:24:54,160
of just said hey why not suck it I Oh

400
00:24:54,160 --> 00:24:55,120
that'd be pretty sweet

401
00:24:55,120 --> 00:25:02,530
and so yeah Felix doesn't work

402
00:25:02,530 --> 00:25:06,040
cross-domain um it so that's all really

403
00:25:06,040 --> 00:25:08,590
dependent I guess for for browser stuff

404
00:25:08,590 --> 00:25:10,360
that's all really dependent on how you

405
00:25:10,360 --> 00:25:12,010
configure socket IO you can pass in

406
00:25:12,010 --> 00:25:13,810
socket IO options directly if you want

407
00:25:13,810 --> 00:25:15,550
to mess with all that I get no idea how

408
00:25:15,550 --> 00:25:17,320
any of that works but it's probably

409
00:25:17,320 --> 00:25:19,540
possible but I don't really mess with

410
00:25:19,540 --> 00:25:27,370
that yeah okay no more questions then

411
00:25:27,370 --> 00:25:32,200
anybody that's cool just about used up

412
00:25:32,200 --> 00:25:36,580
all our time so you can check out denote

413
00:25:36,580 --> 00:25:44,060
yourself at github comm sub stack D node

