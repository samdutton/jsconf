1
00:00:00,620 --> 00:00:14,630

[Music]

2
00:00:14,630 --> 00:00:20,430
okay let's begin good morning everyone

3
00:00:20,430 --> 00:00:25,380
so today I'm going to talk about race

4
00:00:25,380 --> 00:00:28,619
conditions in JavaScript apps and so

5
00:00:28,619 --> 00:00:30,480
right the title of this talk is about

6
00:00:30,480 --> 00:00:33,390
race conditions today I'm going to talk

7
00:00:33,390 --> 00:00:36,329
about other things as well maybe other

8
00:00:36,329 --> 00:00:38,820
edge cases that are not strictly race

9
00:00:38,820 --> 00:00:41,100
conditions but you may encounter them

10
00:00:41,100 --> 00:00:44,190
when you write a synchronous code so

11
00:00:44,190 --> 00:00:47,030
before I begin to talk I would like to

12
00:00:47,030 --> 00:00:51,030
share a bit of story before like how

13
00:00:51,030 --> 00:00:54,629
this talk came to be so I first got the

14
00:00:54,629 --> 00:00:59,370
idea of for this talk on one day on that

15
00:00:59,370 --> 00:01:01,320
day I went to a local meet up in

16
00:01:01,320 --> 00:01:03,989
Thailand and after the talks are done

17
00:01:03,989 --> 00:01:06,450
it's like networking time and my friend

18
00:01:06,450 --> 00:01:10,860
approached me and asked me hey ty is it

19
00:01:10,860 --> 00:01:13,260
hard to deal with race conditions in

20
00:01:13,260 --> 00:01:17,159
JavaScript so I answered well is

21
00:01:17,159 --> 00:01:20,850
actually pretty easy you just don't

22
00:01:20,850 --> 00:01:24,390
forget about them he gives me a bit of a

23
00:01:24,390 --> 00:01:27,360
confused look and I was like hey I'm

24
00:01:27,360 --> 00:01:30,720
totally serious here let me show you a

25
00:01:30,720 --> 00:01:32,880
couple of examples so I took out my

26
00:01:32,880 --> 00:01:35,430
laptop and start coding showing him some

27
00:01:35,430 --> 00:01:38,430
examples and before long it turned into

28
00:01:38,430 --> 00:01:42,720
a really deep discussion so after that

29
00:01:42,720 --> 00:01:46,799
discussion my friend told me whoa this

30
00:01:46,799 --> 00:01:50,729
could have been a food talk why don't

31
00:01:50,729 --> 00:01:52,170
you make a talk out of it and submit it

32
00:01:52,170 --> 00:01:54,990
to judge point for something so here I

33
00:01:54,990 --> 00:01:59,219
am and a big shout out goes to same for

34
00:01:59,219 --> 00:02:01,250
giving me the inspiration for this talk

35
00:02:01,250 --> 00:02:05,369
he's with us here as well so next time

36
00:02:05,369 --> 00:02:07,290
you have a deep technical discussion

37
00:02:07,290 --> 00:02:09,629
maybe you can tell your friend to like

38
00:02:09,629 --> 00:02:12,660
consider submitting a talk

39
00:02:12,660 --> 00:02:16,770
so this makes it my second time speaking

40
00:02:16,770 --> 00:02:19,770
here at just wants a CS so big big

41
00:02:19,770 --> 00:02:22,920
thanks to Thomas and all the organizers

42
00:02:22,920 --> 00:02:25,290
involved in running this conference it's

43
00:02:25,290 --> 00:02:27,300
really great and thank you for having me

44
00:02:27,300 --> 00:02:30,060
once again so today I'm going to show

45
00:02:30,060 --> 00:02:32,100
you two stories from my experience

46
00:02:32,100 --> 00:02:35,090
dealing with race conditions and stuff

47
00:02:35,090 --> 00:02:37,800
so I hope you can learn something out of

48
00:02:37,800 --> 00:02:41,250
these stories as I did by the way my

49
00:02:41,250 --> 00:02:44,490
name is ty and I'm from Thailand my

50
00:02:44,490 --> 00:02:47,910
twitter handle is at DT ints and if you

51
00:02:47,910 --> 00:02:49,860
have any feedback about this talk please

52
00:02:49,860 --> 00:02:52,320
send it to me and I would really

53
00:02:52,320 --> 00:02:55,680
appreciate it I'm currently working at

54
00:02:55,680 --> 00:02:57,780
task whereas the front-end architect and

55
00:02:57,780 --> 00:02:59,310
I'll get back to that later

56
00:02:59,310 --> 00:03:02,600
but now here comes the first story and

57
00:03:02,600 --> 00:03:06,810
this story involves little search box so

58
00:03:06,810 --> 00:03:09,060
in this search boss as I type a keyword

59
00:03:09,060 --> 00:03:12,170
is going to show the search result and

60
00:03:12,170 --> 00:03:14,670
it's going to show the result instantly

61
00:03:14,670 --> 00:03:16,260
so I don't have to press ENTER or

62
00:03:16,260 --> 00:03:16,620
anything

63
00:03:16,620 --> 00:03:19,740
it's like Google's autosuggest so let's

64
00:03:19,740 --> 00:03:21,510
build this real quick first we need the

65
00:03:21,510 --> 00:03:25,050
mock up so here I'm going to use the

66
00:03:25,050 --> 00:03:27,450
section for the rapper then it does an

67
00:03:27,450 --> 00:03:30,420
input box right there and then list

68
00:03:30,420 --> 00:03:34,080
containing the result so that's all the

69
00:03:34,080 --> 00:03:37,020
mock-up we need and next we're going to

70
00:03:37,020 --> 00:03:40,110
add some interactivity and for that I'm

71
00:03:40,110 --> 00:03:45,900
going to use VJ s so let's start with

72
00:03:45,900 --> 00:03:48,180
the data model for our state first we

73
00:03:48,180 --> 00:03:50,340
need to store the security that the user

74
00:03:50,340 --> 00:03:54,810
type and we can buy that today input box

75
00:03:54,810 --> 00:03:58,020
using the Wemo directive then we also

76
00:03:58,020 --> 00:04:00,180
need to store the search result to be

77
00:04:00,180 --> 00:04:02,340
displayed on the list here and to do

78
00:04:02,340 --> 00:04:06,150
that we can use the we four directive to

79
00:04:06,150 --> 00:04:08,040
do the binding and finally we buy the

80
00:04:08,040 --> 00:04:10,080
content of each result into the

81
00:04:10,080 --> 00:04:14,220
respective elements so that the data and

82
00:04:14,220 --> 00:04:16,459
the Dom they are now kept in sync so

83
00:04:16,459 --> 00:04:19,500
when the user enters the text Kure into

84
00:04:19,500 --> 00:04:22,350
the input field is going to update the

85
00:04:22,350 --> 00:04:25,710
text right here and we can wash for when

86
00:04:25,710 --> 00:04:26,500
it changes

87
00:04:26,500 --> 00:04:30,040
and when it changes we can perform in a

88
00:04:30,040 --> 00:04:32,740
synchronous Kure by calling the search

89
00:04:32,740 --> 00:04:35,440
function right there it's going to

90
00:04:35,440 --> 00:04:37,390
return a promise so we have to await it

91
00:04:37,390 --> 00:04:40,660
and once the result arrived we save it

92
00:04:40,660 --> 00:04:42,490
into this page which will be displayed

93
00:04:42,490 --> 00:04:46,600
on the user interface so then we have it

94
00:04:46,600 --> 00:04:48,760
and let's see how it goes

95
00:04:48,760 --> 00:04:52,810
so okay I'm going to type in react I

96
00:04:52,810 --> 00:04:57,160
don't know why but okay so the result

97
00:04:57,160 --> 00:05:00,130
shows up and that's good but it seems

98
00:05:00,130 --> 00:05:02,740
that the result that I see here doesn't

99
00:05:02,740 --> 00:05:05,770
have anything to do with react so what's

100
00:05:05,770 --> 00:05:08,380
going on here let's try again but this

101
00:05:08,380 --> 00:05:10,830
time I built an inspector on the right

102
00:05:10,830 --> 00:05:15,660
so that we can see what's going on okay

103
00:05:15,660 --> 00:05:19,570
you can see here that the result I want

104
00:05:19,570 --> 00:05:23,590
to see is overwritten by the result of

105
00:05:23,590 --> 00:05:26,500
the request that I made earlier but it

106
00:05:26,500 --> 00:05:29,590
finished later so it overrides their the

107
00:05:29,590 --> 00:05:32,710
the Dom and you know this kind of makes

108
00:05:32,710 --> 00:05:35,830
sense because the shorter the Kure maybe

109
00:05:35,830 --> 00:05:37,810
it will return more result and maybe it

110
00:05:37,810 --> 00:05:41,580
will take longer to load so you cannot

111
00:05:41,580 --> 00:05:44,560
depend on the order of the request to

112
00:05:44,560 --> 00:05:46,530
correspond to the order of the response

113
00:05:46,530 --> 00:05:50,380
so you can think of an a sync function

114
00:05:50,380 --> 00:05:54,430
as a function that spawns the trade and

115
00:05:54,430 --> 00:05:57,310
the Dom here is a shared mutable state

116
00:05:57,310 --> 00:05:59,919
so you know when dealing with shared

117
00:05:59,919 --> 00:06:02,950
mutable state we have to be careful

118
00:06:02,950 --> 00:06:06,460
so let's come back to this code when we

119
00:06:06,460 --> 00:06:08,860
face problem like this one of the common

120
00:06:08,860 --> 00:06:12,130
approach I see very often is to do a D

121
00:06:12,130 --> 00:06:14,919
bounce and what I mean by D bouncing is

122
00:06:14,919 --> 00:06:16,990
that instead of doing the search right

123
00:06:16,990 --> 00:06:19,960
away we're going to wait a bit until the

124
00:06:19,960 --> 00:06:22,960
user has finished typing and after that

125
00:06:22,960 --> 00:06:25,960
period of inactivity then we do the

126
00:06:25,960 --> 00:06:31,150
search as usual so let's try it okay it

127
00:06:31,150 --> 00:06:33,940
seems to work because now it only

128
00:06:33,940 --> 00:06:36,580
performs a single request there are no

129
00:06:36,580 --> 00:06:39,729
more competing requests but you know it

130
00:06:39,729 --> 00:06:42,130
went with the D bounce it still doesn't

131
00:06:42,130 --> 00:06:45,789
guarantee the order of the response so I

132
00:06:45,789 --> 00:06:48,669
could do something like this then we're

133
00:06:48,669 --> 00:06:51,340
back to the same problem so let's step

134
00:06:51,340 --> 00:06:54,700
back and look at this code again the

135
00:06:54,700 --> 00:06:57,070
real problem here is that while we are

136
00:06:57,070 --> 00:07:00,160
waiting for the result to arrive I could

137
00:07:00,160 --> 00:07:02,770
have triggered another search and in

138
00:07:02,770 --> 00:07:06,010
this case when the result did arrive it

139
00:07:06,010 --> 00:07:07,750
might not make sense to use it anymore

140
00:07:07,750 --> 00:07:11,020
because now I have already triggered

141
00:07:11,020 --> 00:07:14,020
another search so let's fix this but

142
00:07:14,020 --> 00:07:15,729
first I'm going to get rid of the D

143
00:07:15,729 --> 00:07:19,210
bounce because it didn't work instead

144
00:07:19,210 --> 00:07:22,210
I'm going to generate a unique ID for

145
00:07:22,210 --> 00:07:25,120
each request then keep track of the

146
00:07:25,120 --> 00:07:30,789
latest request ID here and when we after

147
00:07:30,789 --> 00:07:33,820
we await maybe this not latest request

148
00:07:33,820 --> 00:07:36,700
ID could have changed so we compare if

149
00:07:36,700 --> 00:07:38,729
the request ID we are holding onto

150
00:07:38,729 --> 00:07:41,289
doesn't corresponds to the latest

151
00:07:41,289 --> 00:07:43,659
request we'll just discard the result

152
00:07:43,659 --> 00:07:50,159
and let's see okay now it works and

153
00:07:50,159 --> 00:07:53,110
because we only care about the result of

154
00:07:53,110 --> 00:07:57,190
the latest request other other response

155
00:07:57,190 --> 00:08:01,659
got discarded but here now I am

156
00:08:01,659 --> 00:08:03,970
searching really slowly and you can see

157
00:08:03,970 --> 00:08:08,020
that until I finished typing I get no

158
00:08:08,020 --> 00:08:10,120
feedback whatsoever from the search box

159
00:08:10,120 --> 00:08:13,659
and that makes me fear that the search

160
00:08:13,659 --> 00:08:18,280
box is a bit unresponsive because you

161
00:08:18,280 --> 00:08:20,650
know before the resolve could arrive I

162
00:08:20,650 --> 00:08:23,919
type another letter so it discarded the

163
00:08:23,919 --> 00:08:28,450
result that the interim result but if we

164
00:08:28,450 --> 00:08:30,729
compare that to Google even on a very

165
00:08:30,729 --> 00:08:33,969
slow internet I still get the result as

166
00:08:33,969 --> 00:08:36,940
I type even if it lacks behind by

167
00:08:36,940 --> 00:08:40,209
several characters so it's clear that

168
00:08:40,209 --> 00:08:43,780
they are not totally disregarding the

169
00:08:43,780 --> 00:08:48,250
result that is not the latest so I think

170
00:08:48,250 --> 00:08:50,500
we can do better so instead of

171
00:08:50,500 --> 00:08:52,370
discarding the result that

172
00:08:52,370 --> 00:08:53,899
doesn't correspond to the latest

173
00:08:53,899 --> 00:08:57,290
requests what if we only discard the

174
00:08:57,290 --> 00:09:01,670
result that arrived out of order so we

175
00:09:01,670 --> 00:09:06,800
can do this and let's see okay now it

176
00:09:06,800 --> 00:09:09,230
seems to work and you can see here that

177
00:09:09,230 --> 00:09:11,930
I get the result I want even before I

178
00:09:11,930 --> 00:09:17,509
finished typing so yeah you can see that

179
00:09:17,509 --> 00:09:21,139
this humble little search box it took me

180
00:09:21,139 --> 00:09:23,809
three attempts until I can get it right

181
00:09:23,809 --> 00:09:27,079
and that brings me to the first takeaway

182
00:09:27,079 --> 00:09:30,379
for this first story which is to always

183
00:09:30,379 --> 00:09:33,439
remember about the potential risk

184
00:09:33,439 --> 00:09:35,920
conditions whenever there is an await

185
00:09:35,920 --> 00:09:39,439
call so each time you see in a wait

186
00:09:39,439 --> 00:09:42,050
maybe think about what else could happen

187
00:09:42,050 --> 00:09:44,089
while we are waiting for the result and

188
00:09:44,089 --> 00:09:46,759
also think about whether or not it makes

189
00:09:46,759 --> 00:09:50,920
sense to use the result after the wait

190
00:09:50,920 --> 00:09:52,370
all right

191
00:09:52,370 --> 00:09:55,399
that's the first story we're going to

192
00:09:55,399 --> 00:09:58,430
continue with the second story and this

193
00:09:58,430 --> 00:10:00,709
story came from like my experience

194
00:10:00,709 --> 00:10:03,529
working at Tazewell and it is a

195
00:10:03,529 --> 00:10:05,689
real-time collaborative project

196
00:10:05,689 --> 00:10:08,569
management app and that's important and

197
00:10:08,569 --> 00:10:12,470
you'll see why the story happened when

198
00:10:12,470 --> 00:10:15,379
we built the app in its early days so

199
00:10:15,379 --> 00:10:17,720
we're just starting out there it

200
00:10:17,720 --> 00:10:19,579
happened about two to three years ago

201
00:10:19,579 --> 00:10:22,639
and it has to do with something called

202
00:10:22,639 --> 00:10:26,420
optimistic updates so for example our

203
00:10:26,420 --> 00:10:29,209
app provides a Kanban board and suppose

204
00:10:29,209 --> 00:10:31,129
that you drag a task from one list to

205
00:10:31,129 --> 00:10:33,740
the other you wouldn't expect the task

206
00:10:33,740 --> 00:10:37,129
to go into the loading State right well

207
00:10:37,129 --> 00:10:39,470
no you expect the task to just snap

208
00:10:39,470 --> 00:10:42,769
right into the new list and that's what

209
00:10:42,769 --> 00:10:46,069
optimistic update is so basic idea is we

210
00:10:46,069 --> 00:10:49,879
update the UI first in anticipation that

211
00:10:49,879 --> 00:10:52,730
the request will be completed

212
00:10:52,730 --> 00:10:55,819
successfully and raw we synchronize this

213
00:10:55,819 --> 00:10:58,730
change with the server in the background

214
00:10:58,730 --> 00:11:01,579
so having this kind of experience like

215
00:11:01,579 --> 00:11:04,129
optimistic updates it's really important

216
00:11:04,129 --> 00:11:06,540
for collaborative epic

217
00:11:06,540 --> 00:11:10,590
patience but our app users react and

218
00:11:10,590 --> 00:11:12,570
when we use to react

219
00:11:12,570 --> 00:11:15,900
we like to derive our user interface

220
00:11:15,900 --> 00:11:18,570
from the underlying data model so in

221
00:11:18,570 --> 00:11:22,200
this case is the reader store so in

222
00:11:22,200 --> 00:11:24,960
order to preserve the unidirectional

223
00:11:24,960 --> 00:11:28,110
data flow we update the data model

224
00:11:28,110 --> 00:11:31,920
instead and we're going to let it flow

225
00:11:31,920 --> 00:11:36,180
into the UI and for this example maybe

226
00:11:36,180 --> 00:11:39,210
moving a task is a bit complex operation

227
00:11:39,210 --> 00:11:42,330
because it involves both a task and the

228
00:11:42,330 --> 00:11:45,330
list so instead I'm going to just focus

229
00:11:45,330 --> 00:11:50,370
on something simpler such as renaming a

230
00:11:50,370 --> 00:11:54,420
task so when I hit enter here is going

231
00:11:54,420 --> 00:11:57,630
to trigger an event handler and it will

232
00:11:57,630 --> 00:12:00,450
call a function here rename task which

233
00:12:00,450 --> 00:12:04,320
is our action and following this basic

234
00:12:04,320 --> 00:12:06,660
pattern what we did is okay we update

235
00:12:06,660 --> 00:12:09,180
the data model here and that's going to

236
00:12:09,180 --> 00:12:12,120
cost the data model to flow into the

237
00:12:12,120 --> 00:12:15,480
user interface and like that then we

238
00:12:15,480 --> 00:12:17,370
make the API call to synchronize with

239
00:12:17,370 --> 00:12:20,330
the backend and because sometimes

240
00:12:20,330 --> 00:12:22,980
internet connection may not be stable or

241
00:12:22,980 --> 00:12:24,720
something we are just going on with the

242
00:12:24,720 --> 00:12:28,140
API we use a try cache to display the

243
00:12:28,140 --> 00:12:31,080
error message just for good measure and

244
00:12:31,080 --> 00:12:33,660
that's it that is how we implement it

245
00:12:33,660 --> 00:12:37,200
basic optimistic updates and for most of

246
00:12:37,200 --> 00:12:40,530
our operations in our app we write code

247
00:12:40,530 --> 00:12:44,130
following this basic pattern and you

248
00:12:44,130 --> 00:12:46,770
know this works really well and gives us

249
00:12:46,770 --> 00:12:50,940
a really great experience as long as

250
00:12:50,940 --> 00:12:53,880
never as long as nothing goes wrong so

251
00:12:53,880 --> 00:12:56,820
it works well in the early days when we

252
00:12:56,820 --> 00:12:59,580
are just starting out and our focus was

253
00:12:59,580 --> 00:13:03,210
to figure out how we can make project

254
00:13:03,210 --> 00:13:05,970
management to that our customers would

255
00:13:05,970 --> 00:13:09,660
like to use however as we get more

256
00:13:09,660 --> 00:13:12,570
customers we start getting reports such

257
00:13:12,570 --> 00:13:14,910
as well our screens are displaying

258
00:13:14,910 --> 00:13:18,540
different things you know they become

259
00:13:18,540 --> 00:13:19,950
incomes

260
00:13:19,950 --> 00:13:23,010
or something more serious such as this

261
00:13:23,010 --> 00:13:25,920
one so someone writes a comment the

262
00:13:25,920 --> 00:13:27,600
other person didn't receive it because

263
00:13:27,600 --> 00:13:31,320
it never gets sent but the app acts as

264
00:13:31,320 --> 00:13:35,490
if it was already sent so you know work

265
00:13:35,490 --> 00:13:38,790
is lost and that's pretty serious I

266
00:13:38,790 --> 00:13:42,270
think we came back to our code and it

267
00:13:42,270 --> 00:13:45,890
became clear that our implementation of

268
00:13:45,890 --> 00:13:49,230
optimistic update was indeed too

269
00:13:49,230 --> 00:13:53,400
optimistic so there's no room for

270
00:13:53,400 --> 00:13:56,190
anything to go wrong here and when it

271
00:13:56,190 --> 00:13:58,980
does let's see for example if this API

272
00:13:58,980 --> 00:14:02,580
call fails first we didn't live with our

273
00:14:02,580 --> 00:14:04,860
data model back to the previous state so

274
00:14:04,860 --> 00:14:07,800
each client will go its own way and it

275
00:14:07,800 --> 00:14:10,800
will be totally out of sync and we also

276
00:14:10,800 --> 00:14:13,590
didn't really try to request and this is

277
00:14:13,590 --> 00:14:16,230
really bad because you know we tried so

278
00:14:16,230 --> 00:14:18,240
hard and put in a lot of effort to like

279
00:14:18,240 --> 00:14:21,600
craft a great experience that the

280
00:14:21,600 --> 00:14:23,460
customer will want to use and now we are

281
00:14:23,460 --> 00:14:26,430
just throwing their data away and you

282
00:14:26,430 --> 00:14:28,140
know that's not what we want for our

283
00:14:28,140 --> 00:14:31,740
users but well that was what we

284
00:14:31,740 --> 00:14:35,600
implemented so at that time we

285
00:14:35,600 --> 00:14:38,610
incorrectly assumed that building a

286
00:14:38,610 --> 00:14:41,910
single page real-time collaborative app

287
00:14:41,910 --> 00:14:45,270
and task management apps you know is

288
00:14:45,270 --> 00:14:48,600
it's just like CI UD apps create read

289
00:14:48,600 --> 00:14:51,900
update delete that's all that's mostly

290
00:14:51,900 --> 00:14:54,420
what it does so it should be as simple

291
00:14:54,420 --> 00:14:57,480
as Oh screw multi page application

292
00:14:57,480 --> 00:15:00,150
because right because you know that's

293
00:15:00,150 --> 00:15:01,590
what we know that's what we're familiar

294
00:15:01,590 --> 00:15:05,970
with and if you write Ruby on Rails ya

295
00:15:05,970 --> 00:15:09,810
doing a create thing is just as simple

296
00:15:09,810 --> 00:15:13,110
as that so it's supposed to be simple

297
00:15:13,110 --> 00:15:17,450
right well maybe not really and now here

298
00:15:17,450 --> 00:15:21,930
here we are facing its consequence so we

299
00:15:21,930 --> 00:15:24,360
have to fix it and that means we have to

300
00:15:24,360 --> 00:15:26,850
go back and fix all of these operations

301
00:15:26,850 --> 00:15:31,900
that we've implemented so far as well so

302
00:15:31,900 --> 00:15:36,640
our goals shift data loss is a serious

303
00:15:36,640 --> 00:15:40,570
problem and first to fix that we need to

304
00:15:40,570 --> 00:15:43,780
try to achieve eventual consistency that

305
00:15:43,780 --> 00:15:46,240
means everyone will eventually see the

306
00:15:46,240 --> 00:15:48,730
same thing on their screen which I call

307
00:15:48,730 --> 00:15:51,940
the ground truth without having to like

308
00:15:51,940 --> 00:15:55,750
press refresh and second we want to

309
00:15:55,750 --> 00:15:59,530
prevent data loss as much as we can so

310
00:15:59,530 --> 00:16:01,860
let's first talk about the first one

311
00:16:01,860 --> 00:16:04,870
coming back to this code record the

312
00:16:04,870 --> 00:16:07,480
previous part where I say when the API

313
00:16:07,480 --> 00:16:09,280
call failed we didn't reword this state

314
00:16:09,280 --> 00:16:10,360
right

315
00:16:10,360 --> 00:16:13,420
maybe that's quite easy to fix right

316
00:16:13,420 --> 00:16:16,990
we just start a previous title here and

317
00:16:16,990 --> 00:16:18,460
when that's an error

318
00:16:18,460 --> 00:16:23,800
we just revert and that would work would

319
00:16:23,800 --> 00:16:28,860
it as we learned from our first story

320
00:16:28,860 --> 00:16:31,990
you see in a weight and anything could

321
00:16:31,990 --> 00:16:34,450
happen here especially in a real-time

322
00:16:34,450 --> 00:16:38,430
app so for example someone may

323
00:16:38,430 --> 00:16:40,720
successfully update this task while

324
00:16:40,720 --> 00:16:43,180
we're awaiting here and that means the

325
00:16:43,180 --> 00:16:46,660
previous title that we stored will no

326
00:16:46,660 --> 00:16:48,370
longer become well it and we cannot use

327
00:16:48,370 --> 00:16:49,180
it anymore

328
00:16:49,180 --> 00:16:53,200
so the more is cases we try to solve the

329
00:16:53,200 --> 00:16:56,470
more they seem to come up and what about

330
00:16:56,470 --> 00:16:58,240
more complex operations such as like

331
00:16:58,240 --> 00:17:01,180
moving a task between lists how how much

332
00:17:01,180 --> 00:17:04,420
complex would our quote be if we were to

333
00:17:04,420 --> 00:17:06,580
handle all the edge cases in all of

334
00:17:06,580 --> 00:17:10,480
these operations uh is there something

335
00:17:10,480 --> 00:17:12,340
fundamentally wrong with the way we are

336
00:17:12,340 --> 00:17:16,360
writing code so I took another step back

337
00:17:16,360 --> 00:17:18,220
and think about the way we are

338
00:17:18,220 --> 00:17:21,040
approaching optimistic updates and then

339
00:17:21,040 --> 00:17:24,660
I realized that if we want to have

340
00:17:24,660 --> 00:17:27,610
eventual consistency we must try to

341
00:17:27,610 --> 00:17:31,660
stick with the ground truth I defined it

342
00:17:31,660 --> 00:17:34,090
as the letter state that we received

343
00:17:34,090 --> 00:17:37,390
from or delay or delayed the thing that

344
00:17:37,390 --> 00:17:40,300
was acknowledged by the backend can be

345
00:17:40,300 --> 00:17:42,370
considered the ground truth and each

346
00:17:42,370 --> 00:17:45,040
time we update the model of the

347
00:17:45,040 --> 00:17:48,780
basically here we are moving away from

348
00:17:48,780 --> 00:17:52,210
that ground truth and considering that

349
00:17:52,210 --> 00:17:54,520
everything else may be going on and

350
00:17:54,520 --> 00:17:57,420
happening all around that will make it

351
00:17:57,420 --> 00:18:01,720
hard harder to ever come back to it so

352
00:18:01,720 --> 00:18:04,780
maybe we should leave that data model

353
00:18:04,780 --> 00:18:07,950
alone and don't update it optimistically

354
00:18:07,950 --> 00:18:12,000
but then how would we implement

355
00:18:12,000 --> 00:18:18,310
optimistic UI then we figure something

356
00:18:18,310 --> 00:18:23,580
out what if we had a separate data model

357
00:18:23,580 --> 00:18:25,540
representing a list of the pending

358
00:18:25,540 --> 00:18:28,960
operations instead of optimistically

359
00:18:28,960 --> 00:18:33,190
update the data model directly we just

360
00:18:33,190 --> 00:18:35,140
add it to the list of pending operations

361
00:18:35,140 --> 00:18:38,430
and when it's done we just remove it

362
00:18:38,430 --> 00:18:42,010
when we render the UI we overlay the

363
00:18:42,010 --> 00:18:44,530
pending change on top of what's inside

364
00:18:44,530 --> 00:18:47,470
the model essentially computing a

365
00:18:47,470 --> 00:18:49,960
project optimistic version of the task

366
00:18:49,960 --> 00:18:56,230
on the fly in our components and that

367
00:18:56,230 --> 00:18:57,970
could work because if the operation

368
00:18:57,970 --> 00:19:00,850
fails the data model would be left alone

369
00:19:00,850 --> 00:19:04,720
and the UI will revert back but if the

370
00:19:04,720 --> 00:19:07,740
operation succeeded the ground truth

371
00:19:07,740 --> 00:19:10,840
will be updated first then the operation

372
00:19:10,840 --> 00:19:14,050
will be removed from the list and from

373
00:19:14,050 --> 00:19:17,170
the UI perspective it's nothing change

374
00:19:17,170 --> 00:19:20,470
so now we have a data model that allows

375
00:19:20,470 --> 00:19:22,570
us to do optimistic up Dre updates

376
00:19:22,570 --> 00:19:26,980
without driving us insane so now let's

377
00:19:26,980 --> 00:19:30,640
consider a case where I just created a

378
00:19:30,640 --> 00:19:33,760
task here and the blue bar right there

379
00:19:33,760 --> 00:19:35,590
represents the time it take for the

380
00:19:35,590 --> 00:19:39,070
operation to complete but now since we

381
00:19:39,070 --> 00:19:40,600
have optimistic update

382
00:19:40,600 --> 00:19:43,620
I see the task appear right away and

383
00:19:43,620 --> 00:19:46,210
that means I can also interact with it

384
00:19:46,210 --> 00:19:48,790
so let's say I immediately assigned

385
00:19:48,790 --> 00:19:52,630
someone to that task in this case this

386
00:19:52,630 --> 00:19:55,030
API call would fail because at this time

387
00:19:55,030 --> 00:19:57,550
the task doesn't exist in the backend

388
00:19:57,550 --> 00:19:58,710
yet

389
00:19:58,710 --> 00:20:03,639
right so that will lead to a data loss

390
00:20:03,639 --> 00:20:06,970
and we don't want that and that means I

391
00:20:06,970 --> 00:20:08,679
need to wait until the previous

392
00:20:08,679 --> 00:20:13,450
operation complete first before before

393
00:20:13,450 --> 00:20:16,179
we can work on the subsequent operation

394
00:20:16,179 --> 00:20:19,419
and that essentially means we have to

395
00:20:19,419 --> 00:20:23,169
sequence our operations into an

396
00:20:23,169 --> 00:20:27,129
operation queue so with the operation

397
00:20:27,129 --> 00:20:29,889
queue implemented the action code now

398
00:20:29,889 --> 00:20:33,009
looks like this so this is now even

399
00:20:33,009 --> 00:20:34,629
simpler than the first one that we came

400
00:20:34,629 --> 00:20:37,509
up and we just let the queue do his

401
00:20:37,509 --> 00:20:40,989
thing so now all of our write operations

402
00:20:40,989 --> 00:20:44,109
can be fixed by making it right to the

403
00:20:44,109 --> 00:20:45,940
queue instead of calling the API

404
00:20:45,940 --> 00:20:50,349
directly then we can update the UI to

405
00:20:50,349 --> 00:20:53,499
compute the projected state by reading

406
00:20:53,499 --> 00:20:57,099
from that queue so because the

407
00:20:57,099 --> 00:20:59,710
operations are now sequence and managed

408
00:20:59,710 --> 00:21:02,979
by the queue that means it can also take

409
00:21:02,979 --> 00:21:05,080
care of Lee trying the failed request

410
00:21:05,080 --> 00:21:10,169
and that helps us deal with data loss so

411
00:21:10,169 --> 00:21:13,450
we haven't covered all the edge cases

412
00:21:13,450 --> 00:21:16,779
yet and preventing further data loss

413
00:21:16,779 --> 00:21:18,609
from here is like just a matter of

414
00:21:18,609 --> 00:21:22,779
asking a series of what-if questions for

415
00:21:22,779 --> 00:21:25,059
example what if the user closes the

416
00:21:25,059 --> 00:21:27,239
browser arrived a queue is still running

417
00:21:27,239 --> 00:21:29,979
well we can try to prevent the user from

418
00:21:29,979 --> 00:21:32,649
quitting the browser or we can persist

419
00:21:32,649 --> 00:21:34,899
the content of the queue into the

420
00:21:34,899 --> 00:21:37,960
client-side storage so that it can be

421
00:21:37,960 --> 00:21:40,690
resumed afterwards or we can do both

422
00:21:40,690 --> 00:21:45,159
right but our user may be using our app

423
00:21:45,159 --> 00:21:48,489
from a mobile device and it might not be

424
00:21:48,489 --> 00:21:52,059
practical to do that so we decided to

425
00:21:52,059 --> 00:21:54,220
also save the queue to the client

426
00:21:54,220 --> 00:21:59,950
storage and that gives us as a bonus

427
00:21:59,950 --> 00:22:03,309
give us a building block that if we want

428
00:22:03,309 --> 00:22:06,009
to make our app work offline in the

429
00:22:06,009 --> 00:22:08,799
future because you know progressive web

430
00:22:08,799 --> 00:22:11,830
apps are becoming more popular each year

431
00:22:11,830 --> 00:22:14,890
so yeah that's a good bonus for for

432
00:22:14,890 --> 00:22:16,809
purchasing the cute to the clients

433
00:22:16,809 --> 00:22:21,390
knowledge but then a user may be running

434
00:22:21,390 --> 00:22:27,160
our app in multiple attempts so before

435
00:22:27,160 --> 00:22:29,860
we decide to purchase the queue there

436
00:22:29,860 --> 00:22:32,140
was no problem because each tap would

437
00:22:32,140 --> 00:22:34,960
have its own queue but now the queue is

438
00:22:34,960 --> 00:22:35,710
persistent

439
00:22:35,710 --> 00:22:39,760
so it become a shared mutable state here

440
00:22:39,760 --> 00:22:42,490
if every tap runs the queue at the same

441
00:22:42,490 --> 00:22:46,390
time bad things going to happen so that

442
00:22:46,390 --> 00:22:48,550
can be only one tab that runs this queue

443
00:22:48,550 --> 00:22:55,780
but which one so today with today's web

444
00:22:55,780 --> 00:22:58,179
technology we have shared web workers

445
00:22:58,179 --> 00:23:00,580
and also so its workers so we have two

446
00:23:00,580 --> 00:23:04,570
things so maybe we don't need any tap to

447
00:23:04,570 --> 00:23:07,720
run it at all we can just do it in the

448
00:23:07,720 --> 00:23:13,240
workers but today we also have this so I

449
00:23:13,240 --> 00:23:18,309
guess we cannot use the workers yet so

450
00:23:18,309 --> 00:23:20,650
we have to make it so that any tab can

451
00:23:20,650 --> 00:23:23,740
work on the queue if and only if no

452
00:23:23,740 --> 00:23:27,640
other tabs work on it but since our

453
00:23:27,640 --> 00:23:30,630
client side storage can be a synchronous

454
00:23:30,630 --> 00:23:33,460
there might be the case where more than

455
00:23:33,460 --> 00:23:36,309
one tab looking at the queue and saw

456
00:23:36,309 --> 00:23:40,000
that no one's running the queue and both

457
00:23:40,000 --> 00:23:46,660
decide to work on it so who wins and you

458
00:23:46,660 --> 00:23:50,170
know there can be only one tap working

459
00:23:50,170 --> 00:23:52,030
on the queue that's a hot requirement

460
00:23:52,030 --> 00:23:54,790
otherwise bad things going to happen so

461
00:23:54,790 --> 00:23:57,520
we use a shared client-side storage and

462
00:23:57,520 --> 00:24:01,059
have each I have each tap write its own

463
00:24:01,059 --> 00:24:04,090
ID to this storage and after allow

464
00:24:04,090 --> 00:24:08,050
really we read it back so the letters

465
00:24:08,050 --> 00:24:11,440
the latest have to write wins and the

466
00:24:11,440 --> 00:24:14,830
winning tap will periodically report its

467
00:24:14,830 --> 00:24:16,960
status to the shared storage so that

468
00:24:16,960 --> 00:24:19,690
other taps know that okay someone is

469
00:24:19,690 --> 00:24:21,190
taking care of the queue and it's due

470
00:24:21,190 --> 00:24:23,140
alive but

471
00:24:23,140 --> 00:24:28,390
if that tap somehow disappeared um maybe

472
00:24:28,390 --> 00:24:31,660
it maybe the user closed it maybe it

473
00:24:31,660 --> 00:24:35,320
crashed then that we have to set up a

474
00:24:35,320 --> 00:24:37,990
time out so that other taps could decide

475
00:24:37,990 --> 00:24:40,750
that well the tap that originally work

476
00:24:40,750 --> 00:24:45,790
on it has gone and can take over can

477
00:24:45,790 --> 00:24:49,840
take a word the work left from the

478
00:24:49,840 --> 00:24:55,590
previous tab so but what if the tap tap

479
00:24:55,590 --> 00:24:59,830
disappeared didn't didn't went away it

480
00:24:59,830 --> 00:25:04,600
just slept and it came back so we also

481
00:25:04,600 --> 00:25:07,240
have to handle the case where where

482
00:25:07,240 --> 00:25:09,610
where the cue has been taken away from

483
00:25:09,610 --> 00:25:12,790
the tap that is not dead so as you can

484
00:25:12,790 --> 00:25:15,250
see there was a lot of edge cases that

485
00:25:15,250 --> 00:25:17,860
we have to handle to make our app more

486
00:25:17,860 --> 00:25:21,850
resilient and to prevent data loss that

487
00:25:21,850 --> 00:25:25,540
brings me to the takeaway that first I

488
00:25:25,540 --> 00:25:28,240
didn't know that writing as the IUD apps

489
00:25:28,240 --> 00:25:31,809
would have to be this complex you know

490
00:25:31,809 --> 00:25:34,049
there's a lot of tutorials out there

491
00:25:34,049 --> 00:25:36,540
teaching you to like how to make a

492
00:25:36,540 --> 00:25:39,240
real-time to do application

493
00:25:39,240 --> 00:25:42,400
collaborative using let's say socket IO

494
00:25:42,400 --> 00:25:45,190
I have never seen any of them want me

495
00:25:45,190 --> 00:25:49,660
about this when so these are the

496
00:25:49,660 --> 00:25:51,700
problems we face when we try to build

497
00:25:51,700 --> 00:25:55,299
production quality apps and that's why I

498
00:25:55,299 --> 00:25:58,840
want to give this talk so much and the

499
00:25:58,840 --> 00:26:01,419
next takeaway is knowing your tools can

500
00:26:01,419 --> 00:26:04,030
help so there are higher level

501
00:26:04,030 --> 00:26:07,240
primitives that can help you write code

502
00:26:07,240 --> 00:26:10,630
that's free of race conditions there are

503
00:26:10,630 --> 00:26:16,419
some cloud cloud providers and SDKs that

504
00:26:16,419 --> 00:26:20,559
will take care of these problems to some

505
00:26:20,559 --> 00:26:23,679
extent some open source database are

506
00:26:23,679 --> 00:26:25,960
designed to be about to synchronize and

507
00:26:25,960 --> 00:26:32,470
work offline so sometimes if you can

508
00:26:32,470 --> 00:26:34,059
take advantage of them that's great

509
00:26:34,059 --> 00:26:34,780
you

510
00:26:34,780 --> 00:26:37,750
less problem to solve but sometimes your

511
00:26:37,750 --> 00:26:39,880
circumstance might prevent you from

512
00:26:39,880 --> 00:26:43,570
using the tools that you want and that's

513
00:26:43,570 --> 00:26:46,210
why in my opinion the most important

514
00:26:46,210 --> 00:26:49,000
thing the most important thing here is

515
00:26:49,000 --> 00:26:52,860
to become aware of the existence of this

516
00:26:52,860 --> 00:26:57,100
class of problems because even if you

517
00:26:57,100 --> 00:26:59,500
don't know the solutions or if you don't

518
00:26:59,500 --> 00:27:03,790
know the wish to to use at least you

519
00:27:03,790 --> 00:27:06,870
know that you should try to avoid it so

520
00:27:06,870 --> 00:27:10,180
to close this talk I would consider this

521
00:27:10,180 --> 00:27:13,240
talk success if you go home today and

522
00:27:13,240 --> 00:27:16,000
become more careful when you see the

523
00:27:16,000 --> 00:27:20,380
keyword await in your codebase you don't

524
00:27:20,380 --> 00:27:24,760
have to be paranoid just maybe just be

525
00:27:24,760 --> 00:27:26,550
aware that during an a wait

526
00:27:26,550 --> 00:27:30,790
anything could happen I don't know if

527
00:27:30,790 --> 00:27:35,850
that's paranoid or not but but and maybe

528
00:27:35,850 --> 00:27:37,930
when you test your app try

529
00:27:37,930 --> 00:27:39,760
double-clicking everything instead of

530
00:27:39,760 --> 00:27:44,800
single clicking and the next time you

531
00:27:44,800 --> 00:27:48,400
see all right there were a wait I hope

532
00:27:48,400 --> 00:27:51,680
you think about this talk thank you

