1
00:00:07,280 --> 00:00:10,380

it's a for instance okay I have an slc

2
00:00:10,380 --> 00:00:14,730
directory and and in there is an

3
00:00:14,730 --> 00:00:16,379
application GS which most likely

4
00:00:16,379 --> 00:00:23,230
requires plenty of other stuff and

5
00:00:23,240 --> 00:00:27,720
please practice that and put that in a

6
00:00:27,720 --> 00:00:30,660
dist JavaScript application GS and

7
00:00:30,660 --> 00:00:33,630
whatever assets you encounter along the

8
00:00:33,630 --> 00:00:35,790
way put those recursively in the dist

9
00:00:35,790 --> 00:00:38,460
directory that's what the dash a deist

10
00:00:38,460 --> 00:00:40,469
says if I hadn't specified an asset

11
00:00:40,469 --> 00:00:43,860
rooted wouldn't copy the assets met for

12
00:00:43,860 --> 00:00:46,860
the provider actives you can use that

13
00:00:46,860 --> 00:00:50,700
from within Ruby code so because it's

14
00:00:50,700 --> 00:00:53,550
Ruby API anyway so that's a quite simple

15
00:00:53,550 --> 00:00:55,170
there's that the main entry point is

16
00:00:55,170 --> 00:00:57,210
gone sprocket secretary and you provide

17
00:00:57,210 --> 00:00:59,070
basically the same thing except you can

18
00:00:59,070 --> 00:01:00,570
use google being you can use especially

19
00:01:00,570 --> 00:01:02,850
double star globbing which is not

20
00:01:02,850 --> 00:01:05,330
necessarily available in your shell and

21
00:01:05,330 --> 00:01:08,610
and then grab the concatenation save

22
00:01:08,610 --> 00:01:10,229
that anywhere and you have a special

23
00:01:10,229 --> 00:01:12,420
instant assets as well to install that

24
00:01:12,420 --> 00:01:16,140
has it all the assets in the SS root

25
00:01:16,140 --> 00:01:20,909
directory so sometimes well you don't

26
00:01:20,909 --> 00:01:22,590
over be or you can choose your OB and

27
00:01:22,590 --> 00:01:25,770
then for instance you're in a PHP world

28
00:01:25,770 --> 00:01:29,280
like so me and therefore you need

29
00:01:29,280 --> 00:01:31,500
something else so what you can do is use

30
00:01:31,500 --> 00:01:34,799
a CGI script that does all this for you

31
00:01:34,799 --> 00:01:37,189
say you have that tree so we have

32
00:01:37,189 --> 00:01:40,290
something that kind of look alikes rails

33
00:01:40,290 --> 00:01:42,380
application we have a sparkle gml file

34
00:01:42,380 --> 00:01:44,369
somewhere up there in the config

35
00:01:44,369 --> 00:01:49,950
directory we have our base javascript in

36
00:01:49,950 --> 00:01:53,729
javascript out there and we have so that

37
00:01:53,729 --> 00:01:55,680
all of those of defaults assumed by the

38
00:01:55,680 --> 00:01:57,840
CGI script which is why I am going with

39
00:01:57,840 --> 00:01:59,250
the convention here but you could

40
00:01:59,250 --> 00:02:02,100
customize this crypt and then we

41
00:02:02,100 --> 00:02:04,650
have a vendor directory with brackets

42
00:02:04,650 --> 00:02:07,290
and in there one directory post bracket

43
00:02:07,290 --> 00:02:10,170
and slc sub sub directories and now you

44
00:02:10,170 --> 00:02:12,239
can have assets sub directories as well

45
00:02:12,239 --> 00:02:15,810
and stuff like that and you can actually

46
00:02:15,810 --> 00:02:17,520
configure all this through the spark

47
00:02:17,520 --> 00:02:19,500
HTML file so this package see how much

48
00:02:19,500 --> 00:02:21,690
fun would tell you won't say what the

49
00:02:21,690 --> 00:02:23,700
load path is so here the lib beth is the

50
00:02:23,700 --> 00:02:26,370
javascript directory plus vendors

51
00:02:26,370 --> 00:02:29,280
brackets anything slc and the source

52
00:02:29,280 --> 00:02:31,800
file the sources that i'm going to want

53
00:02:31,800 --> 00:02:34,920
to to pass here or my site jazz first

54
00:02:34,920 --> 00:02:36,540
and foremost and then any other j/s

55
00:02:36,540 --> 00:02:40,890
after that if if any and i want that to

56
00:02:40,890 --> 00:02:44,300
be output you to public sprockets Jess

57
00:02:44,300 --> 00:02:48,239
so that's what I would want and you

58
00:02:48,239 --> 00:02:53,299
write this and then you have well some

59
00:02:53,299 --> 00:02:55,200
configuration to do that so for instance

60
00:02:55,200 --> 00:02:57,420
this is Apache configuration and you

61
00:02:57,420 --> 00:02:59,549
would just say obviously I want to exec

62
00:02:59,549 --> 00:03:04,500
execute cgi's and add the handlers and

63
00:03:04,500 --> 00:03:07,440
stuff and say okay if I if I request

64
00:03:07,440 --> 00:03:10,230
sprockets that jazz either it exists and

65
00:03:10,230 --> 00:03:11,730
then everything's fine or it doesn't

66
00:03:11,730 --> 00:03:13,230
exist and then i'm going to rewrite that

67
00:03:13,230 --> 00:03:15,690
internally through patched through to my

68
00:03:15,690 --> 00:03:17,820
CGI script and i'm going to there's a

69
00:03:17,820 --> 00:03:19,350
smaller environment variable that you

70
00:03:19,350 --> 00:03:21,690
can put in there which tails the script

71
00:03:21,690 --> 00:03:24,359
to actually save its output to the

72
00:03:24,359 --> 00:03:26,700
sprockets yes so it's cached after the

73
00:03:26,700 --> 00:03:30,989
first request and and all you have to do

74
00:03:30,989 --> 00:03:33,600
in your source is basically just called

75
00:03:33,600 --> 00:03:35,519
stash Park hds which will pass through

76
00:03:35,519 --> 00:03:37,829
to a CGI script and do the concatenation

77
00:03:37,829 --> 00:03:40,500
on the fly and obviously that NPH

78
00:03:40,500 --> 00:03:43,410
sprockets cgi it's provided by the

79
00:03:43,410 --> 00:03:46,170
script so I wanted to show you a couple

80
00:03:46,170 --> 00:03:48,239
of things here's down sprockets

81
00:03:48,239 --> 00:03:49,560
directory so

82
00:03:49,560 --> 00:03:52,500
way to say it was my mouse here so

83
00:03:52,500 --> 00:03:55,950
that's the sprockets stuff and I

84
00:03:55,950 --> 00:03:58,709
actually have such projects and I wanted

85
00:03:58,709 --> 00:04:03,569
to show you so you have all installation

86
00:04:03,569 --> 00:04:05,130
details in that script and that script

87
00:04:05,130 --> 00:04:09,630
is basically provided by within brackets

88
00:04:09,630 --> 00:04:12,720
so you in the X sub directories you you

89
00:04:12,720 --> 00:04:14,190
can use that and does all the work for

90
00:04:14,190 --> 00:04:15,840
you it's just the Ruby script basically

91
00:04:15,840 --> 00:04:22,010
and it does all that work for you and

92
00:04:22,010 --> 00:04:25,650
that's that it's provided by sprockets

93
00:04:25,650 --> 00:04:27,330
and that's pretty neat union of itself

94
00:04:27,330 --> 00:04:29,340
obviously if you're in the rails world

95
00:04:29,340 --> 00:04:32,760
as Sam staff and son isn't us many of us

96
00:04:32,760 --> 00:04:36,870
are likely to be you have an extra level

97
00:04:36,870 --> 00:04:40,560
of candy which is the sprockets rail jam

98
00:04:40,560 --> 00:04:46,320
right which is provided as well by Sam

99
00:04:46,320 --> 00:04:52,500
and what sprockets Ramsdale is it's a

100
00:04:52,500 --> 00:04:55,830
plug-in you just install it or use the

101
00:04:55,830 --> 00:04:58,560
same module if you want to and all you

102
00:04:58,560 --> 00:05:01,110
have to do really is in your route

103
00:05:01,110 --> 00:05:03,120
configuration and that's a simple call

104
00:05:03,120 --> 00:05:07,340
that will do all the mapping for you and

105
00:05:07,340 --> 00:05:09,570
then instead of using your regular

106
00:05:09,570 --> 00:05:12,030
JavaScript include tags you just use a

107
00:05:12,030 --> 00:05:14,370
sprocket single tag and that's it and it

108
00:05:14,370 --> 00:05:16,740
will do the entire concatenation for

109
00:05:16,740 --> 00:05:20,100
this it uses a config sprocket CML file

110
00:05:20,100 --> 00:05:21,930
in your config directory in Wales which

111
00:05:21,930 --> 00:05:23,460
does pretty much the same stuff as we

112
00:05:23,460 --> 00:05:25,800
sell with the pinion with the CGI script

113
00:05:25,800 --> 00:05:28,530
and accept that you don't have to do all

114
00:05:28,530 --> 00:05:30,090
the Apache configuration and stuff

115
00:05:30,090 --> 00:05:31,940
because well stuff the route into the

116
00:05:31,940 --> 00:05:36,630
routing you just r out like this and it

117
00:05:36,630 --> 00:05:38,520
will handle all the caching disputing it

118
00:05:38,520 --> 00:05:40,919
provides rake tasks to install the

119
00:05:40,919 --> 00:05:43,350
assets into to precompile that script

120
00:05:43,350 --> 00:05:45,570
and put it in your source repository for

121
00:05:45,570 --> 00:05:47,580
you if you want to you could do that for

122
00:05:47,580 --> 00:05:49,050
instance if you deploy with caps Tran

123
00:05:49,050 --> 00:05:51,419
you could do that on a cab deploy hook

124
00:05:51,419 --> 00:05:53,669
to every time you deployed free

125
00:05:53,669 --> 00:05:55,440
composite everything update to the SS

126
00:05:55,440 --> 00:05:57,169
put that

127
00:05:57,169 --> 00:05:59,330
you're sore on your server and your

128
00:05:59,330 --> 00:06:00,529
deployment server and then you don't

129
00:06:00,529 --> 00:06:03,979
have to worry about a thing so that's

130
00:06:03,979 --> 00:06:10,400
also recently I was fortunate enough to

131
00:06:10,400 --> 00:06:13,009
do some planting for tennis on freckle

132
00:06:13,009 --> 00:06:15,349
and on Thomas came back to me and say

133
00:06:15,349 --> 00:06:17,330
you know what would be awesome it to

134
00:06:17,330 --> 00:06:20,240
bind that with really good JavaScript

135
00:06:20,240 --> 00:06:22,999
compression so that we can squeeze even

136
00:06:22,999 --> 00:06:25,610
more size out of it and not stop at

137
00:06:25,610 --> 00:06:29,240
regular concatenation so yeah indeed

138
00:06:29,240 --> 00:06:30,710
just because it's one big file doesn't

139
00:06:30,710 --> 00:06:33,110
mean it's one small file which is really

140
00:06:33,110 --> 00:06:34,460
weird sentence i'm really happy with it

141
00:06:34,460 --> 00:06:40,729
and we have something called yui

142
00:06:40,729 --> 00:06:42,499
compressor and why our compressor is

143
00:06:42,499 --> 00:06:44,330
arguably the best to shrink are out

144
00:06:44,330 --> 00:06:46,580
there currently it's one hundred percent

145
00:06:46,580 --> 00:06:49,099
safe and despite that it has a lot of

146
00:06:49,099 --> 00:06:53,330
optimizations and the documentation we

147
00:06:53,330 --> 00:06:55,969
use on sprockets rails and and the yui

148
00:06:55,969 --> 00:06:57,830
compressor wrappers and stuff just

149
00:06:57,830 --> 00:06:59,749
mention a couple options like the munch

150
00:06:59,749 --> 00:07:01,669
options for instance we just shortens

151
00:07:01,669 --> 00:07:03,710
local variable names but there are

152
00:07:03,710 --> 00:07:07,719
plenty of optimizations that you can use

153
00:07:07,719 --> 00:07:10,909
it's currently seems to be better in

154
00:07:10,909 --> 00:07:13,159
yield better results than stuff like

155
00:07:13,159 --> 00:07:15,879
jasmine your shrink safe which is JoJo's

156
00:07:15,879 --> 00:07:18,349
compressor or pack your stuff like that

157
00:07:18,349 --> 00:07:21,020
and one of the good things about it is

158
00:07:21,020 --> 00:07:24,080
unless you really really insist on it it

159
00:07:24,080 --> 00:07:25,819
doesn't obfuscate and you should not

160
00:07:25,819 --> 00:07:28,580
obfuscate your go ever because it makes

161
00:07:28,580 --> 00:07:31,189
debugging hell among other things and

162
00:07:31,189 --> 00:07:32,899
it's not necessary i mean the

163
00:07:32,899 --> 00:07:34,490
compression you're going to get Fisk

164
00:07:34,490 --> 00:07:36,830
Asian anyway is you can beat the crap

165
00:07:36,830 --> 00:07:38,839
out of that by in GC pinpoints neato

166
00:07:38,839 --> 00:07:42,499
doesn't make sense it's distributed as a

167
00:07:42,499 --> 00:07:44,779
draw file so one of the small conference

168
00:07:44,779 --> 00:07:46,159
you have is that you're going to have

169
00:07:46,159 --> 00:07:49,789
some form of GRE installed which is

170
00:07:49,789 --> 00:07:51,710
pretty straightforward on in platform

171
00:07:51,710 --> 00:07:54,830
better so there's a gem wrapper which

172
00:07:54,830 --> 00:07:58,789
again was provided by Sam this is why I

173
00:07:58,789 --> 00:08:00,409
can pressure page you've got plenty of

174
00:08:00,409 --> 00:08:02,870
information on it it it's birthday Yahoo

175
00:08:02,870 --> 00:08:03,610
developing it

176
00:08:03,610 --> 00:08:07,120
ok now Sam has a small Ruby wrapper you

177
00:08:07,120 --> 00:08:09,280
actually put that together acting this

178
00:08:09,280 --> 00:08:12,280
summer right it has a smaller bead

179
00:08:12,280 --> 00:08:13,810
wrapper that wraps the right I

180
00:08:13,810 --> 00:08:17,229
compressor and lets us access that

181
00:08:17,229 --> 00:08:19,960
really easily through Ruby which is

182
00:08:19,960 --> 00:08:24,300
awesome and you just install that and

183
00:08:24,300 --> 00:08:27,039
you can access the volumes kinds of

184
00:08:27,039 --> 00:08:29,530
compression and what's a specific

185
00:08:29,530 --> 00:08:30,520
interest to us right now is to

186
00:08:30,520 --> 00:08:32,620
JavaScript compressor and here's an

187
00:08:32,620 --> 00:08:34,990
example option actually among many which

188
00:08:34,990 --> 00:08:36,490
is managed which just tells it to

189
00:08:36,490 --> 00:08:38,649
shorten local variable names which has

190
00:08:38,649 --> 00:08:41,409
no impact whatsoever and you can tell

191
00:08:41,409 --> 00:08:43,450
that it does that it does a few things

192
00:08:43,450 --> 00:08:46,180
like replacing a square bracket member

193
00:08:46,180 --> 00:08:48,970
access when it's static by a period

194
00:08:48,970 --> 00:08:50,620
notation stuff like that so it actually

195
00:08:50,620 --> 00:08:54,610
compresses very well and you can also

196
00:08:54,610 --> 00:08:57,670
specify the code in the middle goes with

197
00:08:57,670 --> 00:08:59,500
the default but you can specify stuff

198
00:08:59,500 --> 00:09:01,839
like which Java interpreter you went

199
00:09:01,839 --> 00:09:04,570
around and well the job final is located

200
00:09:04,570 --> 00:09:06,519
by default it assumes a number of things

201
00:09:06,519 --> 00:09:08,050
like the draw file is in the same

202
00:09:08,050 --> 00:09:10,870
directory as the jam stuff like that but

203
00:09:10,870 --> 00:09:12,940
you can and also notice that a Yui

204
00:09:12,940 --> 00:09:15,310
compressor does a lot of things not only

205
00:09:15,310 --> 00:09:17,290
JavaScript it does CSS and stuff so we

206
00:09:17,290 --> 00:09:18,610
could actually use that as well to

207
00:09:18,610 --> 00:09:20,560
compress like CSS assets or stuff like

208
00:09:20,560 --> 00:09:27,130
that yeah it is it's distributed along

209
00:09:27,130 --> 00:09:29,740
the gem because well it's licensed in a

210
00:09:29,740 --> 00:09:31,480
way that lets us do that so you don't

211
00:09:31,480 --> 00:09:33,820
have to install and while you are on one

212
00:09:33,820 --> 00:09:36,310
side and wave I compressor on one side

213
00:09:36,310 --> 00:09:38,649
and the gem on the other side let's put

214
00:09:38,649 --> 00:09:40,570
yourself concern so incidentally this

215
00:09:40,570 --> 00:09:43,269
thing is currently in production on

216
00:09:43,269 --> 00:09:48,399
freckle Quinton's and here's a sample

217
00:09:48,399 --> 00:09:50,290
configuration it's a it's very very

218
00:09:50,290 --> 00:09:52,180
similar to what we saw earlier except

219
00:09:52,180 --> 00:09:54,760
there is this new compress option and

220
00:09:54,760 --> 00:09:58,000
compress can basically be just true or

221
00:09:58,000 --> 00:10:00,699
it can be your hash of options that are

222
00:10:00,699 --> 00:10:02,589
passed directly to the yui compressor

223
00:10:02,589 --> 00:10:05,260
gem which usually passes them directly

224
00:10:05,260 --> 00:10:12,300
to the yui compressor library i think

225
00:10:12,300 --> 00:10:14,430
I have mentioned freaking freakish the

226
00:10:14,430 --> 00:10:17,250
offical rules I complete mostly

227
00:10:17,250 --> 00:10:20,070
freelancers deal with their time in an

228
00:10:20,070 --> 00:10:26,940
unobtrusive efficient way and it has

229
00:10:26,940 --> 00:10:28,800
this run so you can see it sparking to

230
00:10:28,800 --> 00:10:30,210
us out there it's my you I come crash

231
00:10:30,210 --> 00:10:33,090
them stuff so it's great and once you've

232
00:10:33,090 --> 00:10:35,730
done that you've got all your javascript

233
00:10:35,730 --> 00:10:37,380
is neatly structured you can use

234
00:10:37,380 --> 00:10:40,140
Constanza it's easily maintainable you

235
00:10:40,140 --> 00:10:42,030
have far less margin issues especially

236
00:10:42,030 --> 00:10:44,130
as if you were unfortunate enough not to

237
00:10:44,130 --> 00:10:46,350
use git and your for instance of

238
00:10:46,350 --> 00:10:49,170
subversion and mergers are usually more

239
00:10:49,170 --> 00:10:52,100
often than not fail force to be reasoned

240
00:10:52,100 --> 00:10:55,710
and so it's you have this comfort of

241
00:10:55,710 --> 00:10:58,200
using properties throughout your tree to

242
00:10:58,200 --> 00:10:59,910
whatever degree of depth you want I

243
00:10:59,910 --> 00:11:01,470
think we have yeah close to 60

244
00:11:01,470 --> 00:11:04,470
JavaScript files on freckle and um three

245
00:11:04,470 --> 00:11:08,670
or four levels of depth and uh and it's

246
00:11:08,670 --> 00:11:10,920
compressed it's me to find well it's not

247
00:11:10,920 --> 00:11:13,620
compressed it's it's yeah it's minified

248
00:11:13,620 --> 00:11:15,870
in in the best possible way it's

249
00:11:15,870 --> 00:11:17,760
constantly they do that one thing the

250
00:11:17,760 --> 00:11:19,680
phone is outputted and stuff is great so

251
00:11:19,680 --> 00:11:22,200
what's left for us to optimize well for

252
00:11:22,200 --> 00:11:25,230
instance you could tweak your assets

253
00:11:25,230 --> 00:11:27,390
HTTP server you could gzip for instance

254
00:11:27,390 --> 00:11:29,400
which you release the crab it up any

255
00:11:29,400 --> 00:11:31,050
kind of wire compression you're going to

256
00:11:31,050 --> 00:11:33,870
be able to do and you could cash you

257
00:11:33,870 --> 00:11:36,690
could configure your server and now

258
00:11:36,690 --> 00:11:38,340
whatever reverse proxies or whatever you

259
00:11:38,340 --> 00:11:41,820
have to catch the hang of it and heck

260
00:11:41,820 --> 00:11:45,300
out a bit on the client side and if

261
00:11:45,300 --> 00:11:47,940
necessary if you decide it's worth it

262
00:11:47,940 --> 00:11:50,400
you could actually upload Main Street

263
00:11:50,400 --> 00:11:52,890
believes that you use to the Google Ajax

264
00:11:52,890 --> 00:11:56,630
API system which we'll see in a moment

265
00:11:56,630 --> 00:12:00,180
that again is not necessarily what you

266
00:12:00,180 --> 00:12:01,860
systematically want to use because these

267
00:12:01,860 --> 00:12:03,210
guys have some form of latency

268
00:12:03,210 --> 00:12:07,050
themselves here's an example I've

269
00:12:07,050 --> 00:12:08,580
actually configurations actually taken

270
00:12:08,580 --> 00:12:10,530
straight out of Thomas book JavaScript

271
00:12:10,530 --> 00:12:12,630
performance parts

272
00:12:12,630 --> 00:12:15,960
and here we mostly say like very basics

273
00:12:15,960 --> 00:12:19,350
like any kind of text resource basically

274
00:12:19,350 --> 00:12:24,660
should be compressed and expiry should

275
00:12:24,660 --> 00:12:26,670
be active and it should be really far

276
00:12:26,670 --> 00:12:28,860
away and to change that we're just going

277
00:12:28,860 --> 00:12:30,930
to change names when we use rails

278
00:12:30,930 --> 00:12:32,730
application rails automatically adds a

279
00:12:32,730 --> 00:12:36,390
time stamp which is M time based at the

280
00:12:36,390 --> 00:12:38,940
end of any asset anyway so we're we

281
00:12:38,940 --> 00:12:40,500
would add we would have time stamps at

282
00:12:40,500 --> 00:12:42,150
the end of all of our assets and if the

283
00:12:42,150 --> 00:12:45,510
change we're going to just bypass cash

284
00:12:45,510 --> 00:12:47,640
because the the result doesn't feel like

285
00:12:47,640 --> 00:12:49,700
it's the same at all even name wise

286
00:12:49,700 --> 00:12:52,950
which lets us put really long expiry

287
00:12:52,950 --> 00:12:56,640
times here so you see that well cache

288
00:12:56,640 --> 00:12:58,170
controllers public by default cache

289
00:12:58,170 --> 00:13:00,570
control is most often private I think

290
00:13:00,570 --> 00:13:04,410
its rails default on that point which is

291
00:13:04,410 --> 00:13:06,570
good for stuff like banking or stuff

292
00:13:06,570 --> 00:13:08,400
when you really want to ensure it's not

293
00:13:08,400 --> 00:13:09,450
going to be character especially by

294
00:13:09,450 --> 00:13:11,970
reverse proxies but here we're going

295
00:13:11,970 --> 00:13:15,090
like okay let's uh let's let reverse

296
00:13:15,090 --> 00:13:16,560
proxies mostly catch the hell out of

297
00:13:16,560 --> 00:13:19,290
this which is great for with increasing

298
00:13:19,290 --> 00:13:20,790
throughput while reducing the stress on

299
00:13:20,790 --> 00:13:23,850
your application server and we are

300
00:13:23,850 --> 00:13:26,400
killing any so V tanks the reason for

301
00:13:26,400 --> 00:13:31,920
this is that e tanks or really dependent

302
00:13:31,920 --> 00:13:33,570
on the kind of HTTP server you're using

303
00:13:33,570 --> 00:13:36,930
and some of them are going to use weird

304
00:13:36,930 --> 00:13:41,070
local stuff like the local IP and stuff

305
00:13:41,070 --> 00:13:43,230
to use e-tags and so when you start

306
00:13:43,230 --> 00:13:45,930
distributing your assets among a CDN or

307
00:13:45,930 --> 00:13:49,020
whatever every single node will have

308
00:13:49,020 --> 00:13:50,460
different attacks when it's the same

309
00:13:50,460 --> 00:13:53,460
resource so we prefer just work with the

310
00:13:53,460 --> 00:13:57,480
the fan named and whatever em time we're

311
00:13:57,480 --> 00:13:59,610
going to have on the files and rely on

312
00:13:59,610 --> 00:14:01,650
the good old if not matter if my fight

313
00:14:01,650 --> 00:14:08,040
scenes not modified logic so here are a

314
00:14:08,040 --> 00:14:11,250
few numbers that's putting onto a

315
00:14:11,250 --> 00:14:13,830
produce better for instance

316
00:14:13,830 --> 00:14:16,230
just the example I pulled with just

317
00:14:16,230 --> 00:14:18,630
prototype the FX part of script oculus

318
00:14:18,630 --> 00:14:24,060
and a very tiny application swept it it

319
00:14:24,060 --> 00:14:27,330
originates out close to 300 k and when

320
00:14:27,330 --> 00:14:30,930
its consolidated in one file Yui

321
00:14:30,930 --> 00:14:35,190
compressed and GZ at it goes to almost

322
00:14:35,190 --> 00:14:38,370
just ten percent of that so that's quite

323
00:14:38,370 --> 00:14:41,250
significant as far as HTTP requests go

324
00:14:41,250 --> 00:14:43,920
well either we play like the old way we

325
00:14:43,920 --> 00:14:46,110
have those those massive files and

326
00:14:46,110 --> 00:14:47,610
that's going to be in my example just

327
00:14:47,610 --> 00:14:50,220
three files which is where under what

328
00:14:50,220 --> 00:14:52,680
actual applications use let's say we

329
00:14:52,680 --> 00:14:54,860
have a very significant application or

330
00:14:54,860 --> 00:14:57,360
not necessarily significant but we use

331
00:14:57,360 --> 00:15:00,200
like the structured split sauce approach

332
00:15:00,200 --> 00:15:03,480
that can go quickly in many tens of

333
00:15:03,480 --> 00:15:07,710
files at the end with this optimization

334
00:15:07,710 --> 00:15:09,120
applied there's only one fine there's

335
00:15:09,120 --> 00:15:10,440
only one JavaScript with everything

336
00:15:10,440 --> 00:15:12,150
that's re dated in it obviously that

337
00:15:12,150 --> 00:15:13,740
means that you code your javascript in a

338
00:15:13,740 --> 00:15:15,390
way that every single pod detects

339
00:15:15,390 --> 00:15:16,650
whether it's applicable to the current

340
00:15:16,650 --> 00:15:26,210
page or not and are otherwise obviously

341
00:15:26,220 --> 00:15:32,550
yeah yeah yeah because the dictionaries

342
00:15:32,550 --> 00:15:34,650
better the dictionaries better basically

343
00:15:34,650 --> 00:15:36,000
so obviously the compressions and works

344
00:15:36,000 --> 00:15:39,180
better and here's a lot of time that

345
00:15:39,180 --> 00:15:42,210
with unprimed cash so on that thing

346
00:15:42,210 --> 00:15:45,480
considering the I went with a massive

347
00:15:45,480 --> 00:15:47,430
amount of files and we have a huge

348
00:15:47,430 --> 00:15:49,800
accumulated latency basically just

349
00:15:49,800 --> 00:15:52,260
latency and that was on a page that

350
00:15:52,260 --> 00:15:54,210
didn't do anything outside loading the

351
00:15:54,210 --> 00:15:57,810
scripts no images know CSS so I wasn't

352
00:15:57,810 --> 00:15:59,760
even putting stress with like concurrent

353
00:15:59,760 --> 00:16:02,040
HTTP connections all the HTTP

354
00:16:02,040 --> 00:16:03,480
connections that the browser could open

355
00:16:03,480 --> 00:16:06,390
were for JavaScript even so I had close

356
00:16:06,390 --> 00:16:09,140
to two seconds latency on localhost

357
00:16:09,140 --> 00:16:12,930
right so I'll let you you do the math

358
00:16:12,930 --> 00:16:16,200
with like actual online and after that I

359
00:16:16,200 --> 00:16:19,380
had close to a half a second of actually

360
00:16:19,380 --> 00:16:21,900
sending the data with all optimizations

361
00:16:21,900 --> 00:16:25,320
gone I only have one single latency the

362
00:16:25,320 --> 00:16:27,450
platen see is actually higher the first

363
00:16:27,450 --> 00:16:30,090
time around because I'm hitting the GZ

364
00:16:30,090 --> 00:16:32,250
ping online often you know like on the

365
00:16:32,250 --> 00:16:33,630
flying cheesy thing so I'm actually

366
00:16:33,630 --> 00:16:36,840
assuming here that the my javascript

367
00:16:36,840 --> 00:16:39,090
wasn't gzipped yet and wasn't cashed on

368
00:16:39,090 --> 00:16:41,100
server side that I'm like the first

369
00:16:41,100 --> 00:16:43,140
client ever so even in that worst case

370
00:16:43,140 --> 00:16:46,440
you know you client-side I'm still

371
00:16:46,440 --> 00:16:50,030
having barely one fourth or something of

372
00:16:50,030 --> 00:16:53,340
of the time on the other side and with

373
00:16:53,340 --> 00:16:55,320
the cash Prime well that's awesome

374
00:16:55,320 --> 00:16:57,270
because even with cash prime if you have

375
00:16:57,270 --> 00:16:58,820
a lot of files you still have to request

376
00:16:58,820 --> 00:17:01,320
to the server stuff like oh by the way

377
00:17:01,320 --> 00:17:03,890
if not modified scenes blah blah blah

378
00:17:03,890 --> 00:17:06,990
and so you can still have a lot of

379
00:17:06,990 --> 00:17:08,910
latency because of that and then I'm

380
00:17:08,910 --> 00:17:10,590
sure you have very small data transfer

381
00:17:10,590 --> 00:17:12,210
because it's mostly headers saying oh

382
00:17:12,210 --> 00:17:14,220
not modified and whatever but you do

383
00:17:14,220 --> 00:17:17,310
have a lot of Latin see what you do with

384
00:17:17,310 --> 00:17:19,380
all the optimizations including expiry

385
00:17:19,380 --> 00:17:21,600
and stuff is that latency is close to

386
00:17:21,600 --> 00:17:23,580
nail for the simple reason that you said

387
00:17:23,580 --> 00:17:26,640
Oh long expiry you might file name

388
00:17:26,640 --> 00:17:28,320
didn't change so it's going to stay on

389
00:17:28,320 --> 00:17:30,210
server on the client and the plan is

390
00:17:30,210 --> 00:17:31,860
just going to load it for local and

391
00:17:31,860 --> 00:17:33,310
bossy interpret

392
00:17:33,310 --> 00:17:37,410
and that's gonna be ridiculously fast

393
00:17:37,410 --> 00:17:40,510
obviously your mileage may vary that

394
00:17:40,510 --> 00:17:42,040
totally depends on your application but

395
00:17:42,040 --> 00:17:44,140
the savings out there and the factor

396
00:17:44,140 --> 00:17:45,610
vary but the savings are very

397
00:17:45,610 --> 00:17:50,080
significant in any case so I mentioned

398
00:17:50,080 --> 00:17:56,610
Google Ajax libraries API that is a

399
00:17:56,610 --> 00:17:59,890
great idea i'm basically google just i

400
00:17:59,890 --> 00:18:04,630
think i have something in there that's

401
00:18:04,630 --> 00:18:08,050
the javascript performance website yeah

402
00:18:08,050 --> 00:18:10,620
those are the Google Ajax libraries API

403
00:18:10,620 --> 00:18:13,000
basically Google maintains a number of

404
00:18:13,000 --> 00:18:16,180
recent versions online for most of the

405
00:18:16,180 --> 00:18:17,830
Dominion library so obviously jQuery

406
00:18:17,830 --> 00:18:20,500
jQuery UI prototype script oculus since

407
00:18:20,500 --> 00:18:23,470
52 when we make it official mootools

408
00:18:23,470 --> 00:18:26,800
dojo sweet objects Yui the entire thing

409
00:18:26,800 --> 00:18:29,440
xed core and recently the chrome frame

410
00:18:29,440 --> 00:18:32,880
system so all of this is available

411
00:18:32,880 --> 00:18:35,410
through the system you can either use a

412
00:18:35,410 --> 00:18:37,690
javascript call to build the script call

413
00:18:37,690 --> 00:18:40,180
or just do a regular script call and

414
00:18:40,180 --> 00:18:42,550
avoid an extra JavaScript interpretation

415
00:18:42,550 --> 00:18:46,720
the great thing about this is that the

416
00:18:46,720 --> 00:18:48,340
Duke top not serving so they have really

417
00:18:48,340 --> 00:18:51,460
good cash configuration and expiry to do

418
00:18:51,460 --> 00:18:53,400
massive jet zipping and they have a CDN

419
00:18:53,400 --> 00:18:56,710
so from that point of view why slow

420
00:18:56,710 --> 00:18:58,930
would say yay on many aspects and you

421
00:18:58,930 --> 00:19:03,790
get an a but the thing is this is Google

422
00:19:03,790 --> 00:19:05,650
CDN this is the same Google City and

423
00:19:05,650 --> 00:19:07,000
that sometimes let's just have like a

424
00:19:07,000 --> 00:19:09,820
five-second latency on Google Analytics

425
00:19:09,820 --> 00:19:15,750
trackers right some what

426
00:19:15,750 --> 00:19:18,160
right it's not the same but I mean in

427
00:19:18,160 --> 00:19:19,330
the end you get the same kind of

428
00:19:19,330 --> 00:19:27,490
potential long latency so the is sander

429
00:19:27,490 --> 00:19:28,870
architecture and don't make any

430
00:19:28,870 --> 00:19:31,300
guarantee of like really you before

431
00:19:31,300 --> 00:19:33,340
serving and they don't have to I mean

432
00:19:33,340 --> 00:19:34,540
they're just providing that as a

433
00:19:34,540 --> 00:19:36,940
convenient force which is great enough

434
00:19:36,940 --> 00:19:39,220
the good thing about this what's really

435
00:19:39,220 --> 00:19:40,600
interesting about this though is that

436
00:19:40,600 --> 00:19:42,160
you're gonna pay that let into the first

437
00:19:42,160 --> 00:19:44,350
time the first time you query that thing

438
00:19:44,350 --> 00:19:46,390
and then you have a really lonely expiry

439
00:19:46,390 --> 00:19:49,630
and so what's interesting with that is

440
00:19:49,630 --> 00:19:52,240
that if enough people use that on their

441
00:19:52,240 --> 00:19:56,680
websites odds are that your user

442
00:19:56,680 --> 00:19:59,020
probably went already recently to

443
00:19:59,020 --> 00:20:01,270
website that use that same library

444
00:20:01,270 --> 00:20:04,570
YouTube through the google Ajax API and

445
00:20:04,570 --> 00:20:07,180
so we already has that URL in n cached

446
00:20:07,180 --> 00:20:10,570
and so you're not going to have to load

447
00:20:10,570 --> 00:20:12,820
it at all you're going to benefit from

448
00:20:12,820 --> 00:20:14,980
that shared cache system and it's going

449
00:20:14,980 --> 00:20:19,540
to be good fast um I'd like to say thank

450
00:20:19,540 --> 00:20:22,150
you to Sam because this is all this is a

451
00:20:22,150 --> 00:20:26,230
good bacon in system july this is all

452
00:20:26,230 --> 00:20:28,650
thanks to him it's been working on that

453
00:20:28,650 --> 00:20:34,540
on whatever spare time he has if any so

454
00:20:34,540 --> 00:20:36,310
this is all open source and this is own

455
00:20:36,310 --> 00:20:39,480
get have you're more than invited to

456
00:20:39,480 --> 00:20:43,240
forking it and play with it there are a

457
00:20:43,240 --> 00:20:44,650
few things that are on my folks

458
00:20:44,650 --> 00:20:46,750
currently like the sprockets rails yui

459
00:20:46,750 --> 00:20:48,970
compressor binding is not yet in the

460
00:20:48,970 --> 00:20:50,530
optional sprockets warehouse is just in

461
00:20:50,530 --> 00:20:53,020
my in my fork and some has to do some

462
00:20:53,020 --> 00:20:55,960
review with it and with that and this

463
00:20:55,960 --> 00:21:02,460
very tiny audience it's really weird

464
00:21:02,460 --> 00:21:06,310
i'll just say thank you and um if you

465
00:21:06,310 --> 00:21:09,150
have any questions probably not you

466
00:21:09,150 --> 00:21:11,320
probably not anyone actually the odds

467
00:21:11,320 --> 00:21:22,019
are and uh yeah

468
00:21:22,029 --> 00:21:28,159
alright

469
00:21:28,169 --> 00:21:33,869
not in the current version now you will

470
00:21:33,869 --> 00:21:37,590
Plus that would be kind of weird but uh

471
00:21:37,590 --> 00:21:39,989
yeah I she needed that you just have to

472
00:21:39,989 --> 00:21:43,830
patch the city iphone yeah I can see

473
00:21:43,830 --> 00:21:46,679
what you mean well the CDI is just for

474
00:21:46,679 --> 00:21:48,960
visuals so you can definitely tweak it

475
00:21:48,960 --> 00:21:50,369
to whatever needs you have and look at

476
00:21:50,369 --> 00:21:53,039
the htp power amps and and tweaking that

477
00:21:53,039 --> 00:21:55,409
probably filter on the remote IP and

478
00:21:55,409 --> 00:21:57,059
stuff like that and I HTTP basic

479
00:21:57,059 --> 00:21:59,059
authentication maybe in that case and uh

480
00:21:59,059 --> 00:22:02,609
and I have it tweaked however you want

481
00:22:02,609 --> 00:22:04,320
yeah or you could just like upload a new

482
00:22:04,320 --> 00:22:07,499
sprocket CML and then go but on that's

483
00:22:07,499 --> 00:22:14,910
what it is

484
00:22:14,920 --> 00:22:22,640
at all yeah yeah it's done by Sam but it

485
00:22:22,640 --> 00:22:24,200
has no relation whatsoever to put a type

486
00:22:24,200 --> 00:22:26,360
or anything it's not really basic

487
00:22:26,360 --> 00:22:45,590
JavaScript yeah

488
00:22:45,600 --> 00:22:51,100
anyone know it's I think internally it

489
00:22:51,100 --> 00:22:53,680
works with the EOB to just change that

490
00:22:53,680 --> 00:22:56,320
but aside from that I don't think

491
00:22:56,320 --> 00:22:58,750
there's any specific template featuring

492
00:22:58,750 --> 00:23:01,270
but since it's a hobby though you're

493
00:23:01,270 --> 00:23:04,000
well technically you could you can put

494
00:23:04,000 --> 00:23:05,950
on now actually because it's it's going

495
00:23:05,950 --> 00:23:13,420
to I would have to check in that yeah

496
00:23:13,420 --> 00:23:15,790
it's I either attr be and technically it

497
00:23:15,790 --> 00:23:18,760
is Ruby code so you could do whatever or

498
00:23:18,760 --> 00:23:22,450
is just passing for that small snippet

499
00:23:22,450 --> 00:23:24,660
that's more than you know a less than

500
00:23:24,660 --> 00:23:27,670
person equal snippet and replacing from

501
00:23:27,670 --> 00:23:29,530
a hash but i think it's yah be actually

502
00:23:29,530 --> 00:23:31,990
and so that you could do loops or

503
00:23:31,990 --> 00:23:36,700
interpolation or anything i'm actually

504
00:23:36,700 --> 00:23:41,570
i'm just check that out very quickly

505
00:23:41,580 --> 00:23:45,220
there's no require a visa that sounds

506
00:23:45,220 --> 00:23:47,890
like constant oh well yeah but that's

507
00:23:47,890 --> 00:23:50,290
just brackets so i would have to i'm

508
00:23:50,290 --> 00:23:55,020
just up in a quick sprocket source

509
00:23:55,020 --> 00:23:57,310
that's actually not going to be on that

510
00:23:57,310 --> 00:24:02,860
session I'm going to have multiple users

511
00:24:02,860 --> 00:24:08,070
on that thing I tell you that right away

512
00:24:08,070 --> 00:24:10,309
yeah

513
00:24:10,309 --> 00:24:23,430
so sprockets

514
00:24:23,440 --> 00:24:26,710
so the way it interpolates as a

515
00:24:26,710 --> 00:24:39,420
preprocessor

516
00:24:39,430 --> 00:24:42,100
now it doesn't use your be so it's it's

517
00:24:42,100 --> 00:24:48,370
most likely just yeah it's just a G sub

518
00:24:48,370 --> 00:24:52,810
call so currently it uh it wouldn't let

519
00:24:52,810 --> 00:24:54,910
you do any significant yeah there's a

520
00:24:54,910 --> 00:24:57,580
small interpolate constants call and it

521
00:24:57,580 --> 00:25:00,940
does a G sub so and pools for my hash so

522
00:25:00,940 --> 00:25:02,710
currently it doesn't do anything like

523
00:25:02,710 --> 00:25:04,930
that but indeed especially as its Ruby

524
00:25:04,930 --> 00:25:06,940
based you could just pull off your be

525
00:25:06,940 --> 00:25:11,290
and do an ARB eval of your stuff and you

526
00:25:11,290 --> 00:25:15,640
gain the whole interspersing the whole

527
00:25:15,640 --> 00:25:17,650
ability to intersperse Ruby code in your

528
00:25:17,650 --> 00:25:19,180
template and get some form of templating

529
00:25:19,180 --> 00:25:25,210
because of that do you have any specific

530
00:25:25,210 --> 00:25:29,280
like you

531
00:25:29,290 --> 00:25:33,250
right

532
00:25:33,260 --> 00:25:45,779
mm-hmm

533
00:25:45,789 --> 00:25:51,669
right yeah so stuff that you could yeah

534
00:25:51,669 --> 00:25:53,409
that you can do with like load or

535
00:25:53,409 --> 00:25:56,289
regular load codes and stuff like that

536
00:25:56,289 --> 00:26:15,139
oh yeah

537
00:26:15,149 --> 00:26:19,979
either that or one primitive form of

538
00:26:19,979 --> 00:26:22,229
that would be to just use that to switch

539
00:26:22,229 --> 00:26:24,119
between several configuration files but

540
00:26:24,119 --> 00:26:25,710
the gist final concatenation plan

541
00:26:25,710 --> 00:26:29,489
selection and to get finer grained yes

542
00:26:29,489 --> 00:26:31,320
we need stuff like if therefore on

543
00:26:31,320 --> 00:26:34,440
whatever an hour and specific well and

544
00:26:34,440 --> 00:26:35,849
then we just have our includes or

545
00:26:35,849 --> 00:27:03,010
regular include codes

546
00:27:03,020 --> 00:27:08,850
huh

547
00:27:08,860 --> 00:27:12,370
alright well thank you for having been

548
00:27:12,370 --> 00:27:34,540
the elite group in this session and

549
00:27:34,550 --> 00:27:58,580
one short one long then

550
00:27:58,590 --> 00:28:01,750
right but then you would depend on Ruby

551
00:28:01,750 --> 00:28:05,980
and rubygems basically yeah yeah which

552
00:28:05,980 --> 00:28:08,710
are however today mostly instant by

553
00:28:08,710 --> 00:28:10,330
default on just about any distribution

554
00:28:10,330 --> 00:28:22,960
but uh I think I see where you're going

555
00:28:22,970 --> 00:28:25,680
it does have I don't know how they well

556
00:28:25,680 --> 00:28:27,300
you do have a build process today

557
00:28:27,300 --> 00:28:28,890
because you're already cutting your

558
00:28:28,890 --> 00:28:30,750
source down and slicing and dicing and

559
00:28:30,750 --> 00:28:32,370
then building building it back up again

560
00:28:32,370 --> 00:28:35,520
and now it reminds me of the early days

561
00:28:35,520 --> 00:28:37,500
of mootools where their main selling

562
00:28:37,500 --> 00:28:39,030
point was like oh you can just grab

563
00:28:39,030 --> 00:28:40,530
whatever and we're going to concatenate

564
00:28:40,530 --> 00:28:45,840
for you and now and now we're yeah there

565
00:28:45,840 --> 00:28:48,000
I think any anytime you go into

566
00:28:48,000 --> 00:28:50,280
real-world application that actually

567
00:28:50,280 --> 00:28:53,100
depend heavily on JavaScript what you're

568
00:28:53,100 --> 00:28:56,040
gonna need that currently like where you

569
00:28:56,040 --> 00:28:58,920
know 37signals mostly does regular full

570
00:28:58,920 --> 00:29:00,870
concatenation they have this big old

571
00:29:00,870 --> 00:29:03,900
digesting provided by rails and then the

572
00:29:03,900 --> 00:29:07,110
cash the just cash it and having a fine

573
00:29:07,110 --> 00:29:10,560
jus sittin by apache but they don't have

574
00:29:10,560 --> 00:29:12,330
required they don't have anything they

575
00:29:12,330 --> 00:29:15,690
have to basically explicitly grab

576
00:29:15,690 --> 00:29:17,880
everything by alphabetical order and put

577
00:29:17,880 --> 00:29:20,820
that in there and there's no there's no

