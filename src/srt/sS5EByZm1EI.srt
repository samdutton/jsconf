1
00:00:01,430 --> 00:00:25,630
There's quite a lot of you to come and here
about make.

2
00:00:25,630 --> 00:00:32,629
So, it's going to be one‑on‑one talk,
quite basic, I'm going go through the steps

3
00:00:32,629 --> 00:00:38,550
of building up a decent make file, if you
already know make, and you're an expert, I

4
00:00:38,550 --> 00:00:41,120
apologize, please do go next door.

5
00:00:41,120 --> 00:00:47,559
I'm Rob Ashton, if you tried following me
on Twitter from the page on site it's not

6
00:00:47,559 --> 00:00:56,120
spelled like that, I'm not him, don't send
abuse to him on Twitter, he'll be very confused,

7
00:00:56,120 --> 00:01:03,140
send it to me here, these are things I don't
like, quite a lot of things, quite a lot of

8
00:01:03,140 --> 00:01:09,210
things, these are things do like, needles
to say I don't like very much.

9
00:01:09,210 --> 00:01:17,280
Some context, I work in a team of predominantly
airline developers, beard wearing E Mac users,

10
00:01:17,280 --> 00:01:24,549
a lot of C, a lot of bash and a lot of make,
our C and airline are Polished diamonds and

11
00:01:24,549 --> 00:01:30,610
wrapped up in duck take and that's bash and
make, because of this it made sense to use

12
00:01:30,610 --> 00:01:33,400
make for our JavaScript, it may not make sense
for you.

13
00:01:33,400 --> 00:01:41,170
I'm not Evanial rising, yet I kind of am though
I haven't seen a nice tidy grump file.

14
00:01:41,170 --> 00:01:47,229
I found this picture on a make web site, I
quite like it.

15
00:01:47,229 --> 00:01:51,869
Apparently it's afully Gnu, however you say
it, looks like it was drawn by a three‑year‑old,

16
00:01:51,869 --> 00:02:00,390
drawn by a thirty‑year‑old, make, as old
as the hills, it solved all the problems and

17
00:02:00,390 --> 00:02:06,130
solved all the problems in weird wacky ways
which makes it super fun, I always have established

18
00:02:06,130 --> 00:02:11,680
that if you're using cowboys language like
JavaScript, and it is, and mind as well use

19
00:02:11,680 --> 00:02:12,900
cowboy tuning around it.

20
00:02:12,900 --> 00:02:21,409
Try to keep professional\h‑‑ like grump
or gulp, and arrange everything in a tiny

21
00:02:21,409 --> 00:02:27,470
nice streams, it's all very fun, but it's
not as fun as wading through obscure symbols

22
00:02:27,470 --> 00:02:34,139
and traversing where to\h‑‑ I really enjoy
this find it entertaining, so yes, that's

23
00:02:34,139 --> 00:02:40,319
why make, I'm going to jump right into what
make is, and do some demos because it's more

24
00:02:40,319 --> 00:02:41,319
E.

25
00:02:41,319 --> 00:02:42,319
siting.

26
00:02:42,319 --> 00:02:46,029
And more importantly, what make is not, so
over here if this directory, I've got some

27
00:02:46,029 --> 00:02:50,430
stuff, I haven't got any cool music, to play.

28
00:02:50,430 --> 00:02:54,260
You hum or whatever, do a dance.

29
00:02:54,260 --> 00:02:56,299
Use your imagination now.

30
00:02:56,299 --> 00:03:00,739
I have a recursor file to make something in
it.

31
00:03:00,739 --> 00:03:04,510
I just want to demonstrate that make is not
procedural.

32
00:03:04,510 --> 00:03:12,249
So, here I have a variable and signs whatever
the value of 2 is, like another variable and

33
00:03:12,249 --> 00:03:18,139
assign it to where there's all there $3 is,
3 is equal to hello world, down here in the

34
00:03:18,139 --> 00:03:21,589
all target, make that bigger, you can all
see it.

35
00:03:21,589 --> 00:03:27,000
That look good in the back ?
yeah, yeah, we're good, okay, cool.

36
00:03:27,000 --> 00:03:32,049
I'm going to echo out, do whatever is in the
value of 3.

37
00:03:32,049 --> 00:03:33,549
And if I run this.

38
00:03:33,549 --> 00:03:45,589
So, over here we get hello world printed out
which is quite interesting if you read that

39
00:03:45,589 --> 00:03:52,439
top down, all these variables are lacy, value
of a point of actual use them, it's called

40
00:03:52,439 --> 00:03:57,329
variable expansion, these are recuresively,
actually, I got that wrong, these are meant

41
00:03:57,329 --> 00:03:59,449
to be\h‑‑ O Oop, whatever.

42
00:03:59,449 --> 00:04:03,189
Forget everything I just said.

43
00:04:03,189 --> 00:04:14,639
I, if I go into supervise over here, you also
have these ones, semi colon in there instead,

44
00:04:14,639 --> 00:04:20,650
these are actually evaluated at the point
of time, which means in my all over here if

45
00:04:20,650 --> 00:04:23,039
I echo out the value of one p ...

46
00:04:23,039 --> 00:04:34,629
t Ooops, I should not have worked,\h‑‑
that should not have worked, I did everything

47
00:04:34,629 --> 00:04:35,629
wrong.

48
00:04:35,629 --> 00:04:39,270
I'm doomed to fail already.

49
00:04:39,270 --> 00:04:46,379
Ooops, meant to do that, quite, so, any way,
because of the semicolon, because of this

50
00:04:46,379 --> 00:04:52,520
channel over here, these are values of execution,
value of one over here is nothing, this is

51
00:04:52,520 --> 00:04:58,560
kind of important, make is all about expanding
expressions, whether those expressions are

52
00:04:58,560 --> 00:05:03,949
simple variable assignment, function calls
to get list of crap, not really important.

53
00:05:03,949 --> 00:05:11,099
What we have a very non‑procedural language,
recursive variables are lacy, simple expanded

54
00:05:11,099 --> 00:05:18,169
variables are not (Laze city) so whatever,
I'm going to use recursive variables everywhere

55
00:05:18,169 --> 00:05:24,419
in these demos what is the structure of a
make file, what does it look like? Well, it's

56
00:05:24,419 --> 00:05:31,560
separated out into these things called targets,
prerecs, and recipes, I try ouse the terminology

57
00:05:31,560 --> 00:05:35,620
on the side I call it a big pile of make and
get on with life.

58
00:05:35,620 --> 00:05:37,819
That's not to everyone's taste.

59
00:05:37,819 --> 00:05:44,639
I have a very simple set up in a directory,
very simple copy.

60
00:05:44,639 --> 00:05:53,520
Okay, we have a make file and we have an in
directory, in our in directory we have a file

61
00:05:53,520 --> 00:06:04,499
called Pinki file, rainbow dash is not best
pony if you don't know this, you do now.

62
00:06:04,499 --> 00:06:07,309
It's a truism.

63
00:06:07,309 --> 00:06:08,949
\h‑‑ we have a make file, right.

64
00:06:08,949 --> 00:06:13,840
I'm going to copy and paste from down here
rather than try to write things, I think I'm

65
00:06:13,840 --> 00:06:20,460
in demo fail mood today this is preparation,
it is, right, so what I'm going to do over

66
00:06:20,460 --> 00:06:27,039
here, I'm going to define a target, it's a
directory called out, we have Pinkie text,

67
00:06:27,039 --> 00:06:31,310
and it has independency on Pinki.text.

68
00:06:31,310 --> 00:06:36,389
And also dependency on out, which is nice,
copy and paste.

69
00:06:36,389 --> 00:06:40,340
The press pee is found underneath this.

70
00:06:40,340 --> 00:06:45,210
So here I have in Pinkie text and out Pinkie
text.

71
00:06:45,210 --> 00:06:51,300
And here we have a target called out, which
is directory, and we simply say, please make

72
00:06:51,300 --> 00:06:55,090
the directory called out.

73
00:06:55,090 --> 00:07:04,490
Over here we're just echoing Dev null\h‑‑
if I run this, so I go to simple copy and

74
00:07:04,490 --> 00:07:09,710
say, hey, please make that, you'll see here
it copied over my Pinkie and rain by, if I

75
00:07:09,710 --> 00:07:12,069
run it again, it doesn't anything at all.

76
00:07:12,069 --> 00:07:17,210
Make is quite clever when you have targets
and dependents set up, it looks at files and

77
00:07:17,210 --> 00:07:21,800
times stamps and only dose things when something
is different than expected.

78
00:07:21,800 --> 00:07:35,849
If I go to Pinkie text and say Pinkie pie
is the best pony it will only copy Pinkie.text.

79
00:07:35,849 --> 00:07:40,310
If you set up a decent dependency graph, it
will be clever about what it runs and doesn't

80
00:07:40,310 --> 00:07:41,310
run.

81
00:07:41,310 --> 00:07:42,310
This is the best thing about make.

82
00:07:42,310 --> 00:07:49,439
I believe that was the only point I wanted
to make here, really, we can go copying of

83
00:07:49,439 --> 00:07:51,120
Gumpf.

84
00:07:51,120 --> 00:07:55,439
We have a target,list of prerequisites and
they execute from right to left.

85
00:07:55,439 --> 00:07:58,389
Got that, of course we did, excellent.

86
00:07:58,389 --> 00:08:03,729
What we learned here are targets that are
actual physical outputs on the disk, prerequisites

87
00:08:03,729 --> 00:08:10,240
can be files or other targets you're executing
and recipes are scripts that execute to make

88
00:08:10,240 --> 00:08:12,819
the targets appear from the dependencies.

89
00:08:12,819 --> 00:08:15,969
Nothing too exciting.

90
00:08:15,969 --> 00:08:20,039
Of course, that make file was awfully crap,
I can't sit there and write a make file for

91
00:08:20,039 --> 00:08:25,220
every single file for my input and out put
directories because this would take me all

92
00:08:25,220 --> 00:08:27,870
day, so we have patterns, rules.

93
00:08:27,870 --> 00:08:29,650
Let's do a demo of that.

94
00:08:29,650 --> 00:08:34,110
So, let's go to my patent directory.

95
00:08:34,110 --> 00:08:39,839
So, here I have the exact same make fail,
I just made before.

96
00:08:39,839 --> 00:08:47,370
That's wrong keyboard short cut, I'm normally
a Linux usually, I just closed it instead

97
00:08:47,370 --> 00:08:51,680
of VM, I'm going to present that happened.

98
00:08:51,680 --> 00:08:58,810
I don't know my keyboard short cuts on Mac
OS, I'm afraid, I make mistakes all the time.

99
00:08:58,810 --> 00:09:00,350
Okay, Kayry on.

100
00:09:00,350 --> 00:09:05,950
So here we have really crap make file because
we're copying files independently all the

101
00:09:05,950 --> 00:09:12,829
time, we can use pattern rules do this, actually
if we have a, if we call a target where it's

102
00:09:12,829 --> 00:09:15,880
any pattern matching out/something.text.

103
00:09:15,880 --> 00:09:25,510
Then, actually, dependency will be in something.text,and,
down here, we can actually take the value,

104
00:09:25,510 --> 00:09:30,070
which we've got from above, which will be\h‑‑
is it a ...

105
00:09:30,070 --> 00:09:35,060
it's an angle wrack et, of course it is the
incantations are important.

106
00:09:35,060 --> 00:09:41,680
I want a copy from here, wrong keyboard short
cut again and I'm getting confused on Mac

107
00:09:41,680 --> 00:09:46,769
OS that the control key is in the wrong place,
it always gets me.

108
00:09:46,769 --> 00:09:54,339
So, isn't that exciting, with can say, this
is a magic automatic variable given to us

109
00:09:54,339 --> 00:09:59,870
by make that says whatever the target is,
please put it in dollar open angle bracket

110
00:09:59,870 --> 00:10:05,670
and the other one dollar at whatever our first
prerequisite was.

111
00:10:05,670 --> 00:10:10,560
We still have up here all out slash Pinkie
and rainbow text and they will part earn match

112
00:10:10,560 --> 00:10:17,600
on the target over here and they'll both work
so if I go and run that, I say, make, that

113
00:10:17,600 --> 00:10:22,980
actually works and expands to Pinkie and rainbow
and works like it did before.

114
00:10:22,980 --> 00:10:27,930
Which is super awesome and nice, we saw here
something really nice, which is we have pattern

115
00:10:27,930 --> 00:10:32,880
rules where we have substitutions with that
lovely percent symbol, automatic variables

116
00:10:32,880 --> 00:10:38,130
are exposed to recipes from the targets and
prewe can we sits we have a magic list of

117
00:10:38,130 --> 00:10:42,620
incantations that will get things out of the
list.

118
00:10:42,620 --> 00:10:46,560
You start memorizing the incantations, I've
forgotten them because I'm on stage and panicking.

119
00:10:46,560 --> 00:10:54,800
There are dozens of them, it makes it clear
to read, when cru near a can have fee shop

120
00:10:54,800 --> 00:10:59,160
and peek looking over your shoulder they think
you're dead clever.

121
00:10:59,160 --> 00:11:07,899
Make has a Maureen Bunyan of of built in functions.

122
00:11:07,899 --> 00:11:14,320
The thing with make file, I don't really like
is that over here I'm having to do out/pin

123
00:11:14,320 --> 00:11:20,980
I can and out slash rainbow as my actual targets,
well, that's kind of crap because I don't

124
00:11:20,980 --> 00:11:27,709
want to write out all of my targets manually
in my make file, it's rubbish, I can call

125
00:11:27,709 --> 00:11:28,709
functions instead.

126
00:11:28,709 --> 00:11:33,540
I'm going to do that over here, inputs, I
can generate a list of inputs over here, and

127
00:11:33,540 --> 00:11:39,360
say, actually if I call this function wild
card and match on anything in the in directory,

128
00:11:39,360 --> 00:11:44,790
asterisk, and\h‑‑ please put it in a variable
called inputs thank you very much.

129
00:11:44,790 --> 00:11:51,779
Well, that's not very useful, because, of
course, I want to replace out/Pinkie and out/rainbow

130
00:11:51,779 --> 00:11:59,370
over here, so I can call more\h‑‑ I can
call more function on my inputs.

131
00:11:59,370 --> 00:12:04,730
6 Ooops, and Ooops again.

132
00:12:04,730 --> 00:12:07,940
There we go.

133
00:12:07,940 --> 00:12:14,180
And I Kayk say, actually can you do a pattern
substitute on in/whatever and replace that

134
00:12:14,180 --> 00:12:18,610
whatever without/whatever on all the inputs.

135
00:12:18,610 --> 00:12:20,340
And now I have a list of out puts.

136
00:12:20,340 --> 00:12:26,509
I can actually print out this list, going
to hide this entire line now, so, of I say,

137
00:12:26,509 --> 00:12:32,399
I'm going to echo out my output.

138
00:12:32,399 --> 00:12:34,600
And for good measure, inputs as well.

139
00:12:34,600 --> 00:12:37,509
Of that's no good.

140
00:12:37,509 --> 00:12:42,589
Of did I mention I don't know my keyboard
short cuts on Mac OS, I'm hitting all the

141
00:12:42,589 --> 00:12:50,860
wrong keys, so if I run this make file, you'll
see over here my output list contain out/rainbow

142
00:12:50,860 --> 00:12:57,889
of and out/Pinkie, and the include list\h‑‑
I've general herb rated a list of file and

143
00:12:57,889 --> 00:13:01,839
replaced the expressions with something else.

144
00:13:01,839 --> 00:13:05,420
My inputs and out puts.

145
00:13:05,420 --> 00:13:13,389
I can feed these outputs into my of target
over here as a dependency.

146
00:13:13,389 --> 00:13:20,940
And that will mash past this out/and I'll
execute this against everything, these inputs

147
00:13:20,940 --> 00:13:26,120
over here aren't actually used but to build
out puts collections, another exam you might

148
00:13:26,120 --> 00:13:33,650
chose to did that, so I'm going to echo to
Den null, I don't like to print out, so I

149
00:13:33,650 --> 00:13:39,430
run this now, actually executed, so I copy
over my Pinkie to my output directory, because

150
00:13:39,430 --> 00:13:47,459
if I cat out/Pinkie, and cat out/rainbow we
see that Pinki pie still best pony and dash

151
00:13:47,459 --> 00:13:53,910
is not best pony.

152
00:13:53,910 --> 00:14:00,250
We can generate list of inputs using wild
cards and we can generate a list of outputs

153
00:14:00,250 --> 00:14:07,839
by pat ton producing on that list, that is
cool when combine that with pat enrules, you

154
00:14:07,839 --> 00:14:11,970
go and scan your fold erstructure, which is
known for the structure for all the files

155
00:14:11,970 --> 00:14:16,690
you were to input into various command line
tools and generate the outputs you want out

156
00:14:16,690 --> 00:14:21,160
of that and generate big part targets out
of that and run all your code and hopefully

157
00:14:21,160 --> 00:14:25,990
you end up with come peopling an application
which is super cool this is why Pinkie pie

158
00:14:25,990 --> 00:14:29,530
is best pony because she plays all the instruments.

159
00:14:29,530 --> 00:14:36,790
I'm going to build something that's roughly
equatable to a real world example.

160
00:14:36,790 --> 00:14:40,920
It's not going to be a real world example
because I adopt want to play with barrels

161
00:14:40,920 --> 00:14:47,579
of fire and MPM and reactor fire that I would
use in a java application, I'm going to go

162
00:14:47,579 --> 00:14:52,120
incompared my vanilla, that this is not how
I do things in the real world too much.

163
00:14:52,120 --> 00:14:56,000
I didn't want to start throwing in all sorts
of crazy concepts.

164
00:14:56,000 --> 00:15:06,160
Over here I have a similar widgets directory,
in my simple widgets directory, never mind\h‑‑

165
00:15:06,160 --> 00:15:12,500
I have a widgets folder in that widgets folder
we have three wig its, once one's called Celestia,

166
00:15:12,500 --> 00:15:24,220
Pink Ie, and rainbow, each have a style sheet,
have an index file, and they have some images

167
00:15:24,220 --> 00:15:28,230
too, so pictures of Celest aye as a child
and groan up.

168
00:15:28,230 --> 00:15:32,620
I don't want to know what they're composed
of, but I have a convention in any project

169
00:15:32,620 --> 00:15:40,339
that all widgets have some kind of index enindustry
point and some kind of style sheet, and I

170
00:15:40,339 --> 00:15:46,939
want to copy all that across so this index
file will actually work, I'm referencing budgets.CSS

171
00:15:46,939 --> 00:15:54,550
and J S, and they magically appear over here,
in here in the real world I would use browser

172
00:15:54,550 --> 00:15:57,899
five, this is a nice simple example.

173
00:15:57,899 --> 00:16:04,319
I have two outputs here at least, and wig
its.CSS and I have widgets in these folders,

174
00:16:04,319 --> 00:16:06,870
and copy them as welt.

175
00:16:06,870 --> 00:16:17,319
Real project you might want to put them in
image map, we're not going to do that today.

176
00:16:17,319 --> 00:16:22,040
Thankfully I have it all down here before,
copy and paste everything again.

177
00:16:22,040 --> 00:16:23,670
Absolutely wonderful.

178
00:16:23,670 --> 00:16:28,730
The first thing I always do when making a
mu make file is figure out my nut output files

179
00:16:28,730 --> 00:16:30,470
and work my way up.

180
00:16:30,470 --> 00:16:35,300
It's clear I have two outputs over here.

181
00:16:35,300 --> 00:16:44,370
And these outputs are going to have to be\h‑‑
they're completely wrong, got the wrong file

182
00:16:44,370 --> 00:16:45,690
open.

183
00:16:45,690 --> 00:16:49,629
There we go.

184
00:16:49,629 --> 00:16:52,259
Of wow.

185
00:16:52,259 --> 00:16:54,899
Okay, good.

186
00:16:54,899 --> 00:17:02,481
So hereby I want to make a widget.JS and clearly
I'm going to need some JavaScript files and

187
00:17:02,481 --> 00:17:04,390
I'm going to need some CS file to point over
there.

188
00:17:04,390 --> 00:17:10,970
So how am I going to get those, let's go to
the top of the file over hering let's go and

189
00:17:10,970 --> 00:17:14,950
get some expansions.

190
00:17:14,950 --> 00:17:16,280
So ...

191
00:17:16,280 --> 00:17:24,040
if I have some coffee files in each wig it,
over here, I'm going to wild card against

192
00:17:24,040 --> 00:17:29,650
one it/against whatever the wig it is and
anything that's coffee in the directory, and

193
00:17:29,650 --> 00:17:36,010
generate a list of output files from that,
placing all the coffee with J Ses, obviously

194
00:17:36,010 --> 00:17:42,930
as you do, going do the same with stylus files,
I want to take take all the stylus files,/whatever,/whatever

195
00:17:42,930 --> 00:17:50,260
file, success files are going to look like
that, the file replaced by CSS, make sense

196
00:17:50,260 --> 00:17:55,170
so far? Of course it does, nothing complicated
here at all.

197
00:17:55,170 --> 00:17:56,800
I hope not any way.

198
00:17:56,800 --> 00:18:03,630
So, cool, I'm going to if he cuss on CSS and
such for now, what I need to do is I need

199
00:18:03,630 --> 00:18:09,300
to somehow convert all my JavaScript files\h‑‑
my coffee files to JavaScript files before

200
00:18:09,300 --> 00:18:10,520
calf Nateing them.

201
00:18:10,520 --> 00:18:13,200
To do that we need to compile them.

202
00:18:13,200 --> 00:18:22,440
That's the coffee script Compiler, if I gather
up all of my .

203
00:18:22,440 --> 00:18:30,010
If I gather up all of my coffee files over
here as dependencies, one it/whatever coffee,

204
00:18:30,010 --> 00:18:36,740
and we have widget/whatever JS, coffee script
Compiler against the target I want generated.

205
00:18:36,740 --> 00:18:39,030
Which will work perfectly fine.

206
00:18:39,030 --> 00:18:53,590
It's quite clear that if I want to generate
a pile of one it of CSS, I can do the same

207
00:18:53,590 --> 00:18:54,590
thing.

208
00:18:54,590 --> 00:18:57,700
Take the files, general ate some outputs.

209
00:18:57,700 --> 00:19:02,220
If I want to execute these rules I'm going
to have to say, well, actually let's make

210
00:19:02,220 --> 00:19:06,460
two place holder rules over here, we have
style and we have coffee.

211
00:19:06,460 --> 00:19:13,150
The style and coffee by the way go intinesically
hand in hand, if you haven't got coffee, you

212
00:19:13,150 --> 00:19:14,230
haven't got style.

213
00:19:14,230 --> 00:19:21,840
Out put CSS files goes to/site\h‑‑ success
and output files\h‑‑ nothing over there.

214
00:19:21,840 --> 00:19:28,920
Of soft here if I call coffee, it's going
to match against this rule for every single

215
00:19:28,920 --> 00:19:34,590
JS file and look at the coffee spiel, look
at coffee script against any file that hasn't

216
00:19:34,590 --> 00:19:38,840
been change in the recent times, which is
nice.

217
00:19:38,840 --> 00:19:46,041
So, if I go over here, and I want to generate
my code, I can say over here, well, if I want

218
00:19:46,041 --> 00:19:50,940
to do the code, I want to execute the coffee
script Compiler, and I want to make the wig

219
00:19:50,940 --> 00:19:51,940
it.

220
00:19:51,940 --> 00:20:06,280
JS file, so over here offul I'm confusing
myself, I hope you're following.

221
00:20:06,280 --> 00:20:14,780
We take all the J S output files and we cut
them all together in really horrible way,

222
00:20:14,780 --> 00:20:18,160
so I hope semi colon in the file, there will
be semi colon, because we're using coffee

223
00:20:18,160 --> 00:20:27,380
script, if there wasn't semi colons then this
wouldn't work.

224
00:20:27,380 --> 00:20:30,620
Friends don't let friends use semi colons.

225
00:20:30,620 --> 00:20:35,380
I'm going to make a clean directory over here
because it's polite.

226
00:20:35,380 --> 00:20:37,010
It's good to be polite.

227
00:20:37,010 --> 00:20:39,860
Let's love the images for now though.

228
00:20:39,860 --> 00:20:40,860
Cool.

229
00:20:40,860 --> 00:20:48,660
I'm going to save say my all depends on my
code and my style.

230
00:20:48,660 --> 00:20:56,090
I'm going to echo this down to receive/Nul.

231
00:20:56,090 --> 00:21:07,700
Cool, so what we've (Dev/Null\h‑‑ we generated
targets for them which are JavaScript and

232
00:21:07,700 --> 00:21:13,690
another target a JavaScript target file and
we have a nice pipeline of individual files

233
00:21:13,690 --> 00:21:15,950
to individual files to one big file.

234
00:21:15,950 --> 00:21:16,950
Which is super cool.

235
00:21:16,950 --> 00:21:20,260
And because I don't trust my copy and paste,
I'm going to copy and paste all this over

236
00:21:20,260 --> 00:21:22,430
here.

237
00:21:22,430 --> 00:21:29,820
Let's pretend I live code all of this.

238
00:21:29,820 --> 00:21:38,470
So, I'm going to copy all of my CSS across
into one file, my JavaScript file, I run this.

239
00:21:38,470 --> 00:21:39,470
Over here.

240
00:21:39,470 --> 00:21:45,130
And we see here, around my JavaScript Compiler,
I did everything like that, run, fine, fine,

241
00:21:45,130 --> 00:21:50,990
if I run page again, nothing at all, nothing
needs to be done, because nothing's changed,

242
00:21:50,990 --> 00:21:54,990
which is super cool, I'ming going to make
clean.

243
00:21:54,990 --> 00:21:58,970
One of the great things about make, once you
have all the targets set up and doing things

244
00:21:58,970 --> 00:22:06,220
on a file by file basis, this is important,
it's very easy to parallelize, using make/J

245
00:22:06,220 --> 00:22:11,970
parallelizes all of that and super quick,
you get this for free if you build a sensible

246
00:22:11,970 --> 00:22:17,200
composed make file comprised of lots of small
targets and small files that's granular you

247
00:22:17,200 --> 00:22:23,670
can get a fast build process out of the grate
by parallelizing it for free.

248
00:22:23,670 --> 00:22:37,150
The site made, there's my Http servers if
I go to Safari or Chrome.

249
00:22:37,150 --> 00:22:38,600
Pinkie Pie and Celestia.

250
00:22:38,600 --> 00:22:47,170
These are my wig it, they you click on them
and they do things.

251
00:22:47,170 --> 00:22:48,860
It's cool.

252
00:22:48,860 --> 00:22:50,550
Okay, cool.

253
00:22:50,550 --> 00:22:57,510
Of so, we'll see here that we is av a wig
it CSS and image directory of everything copied

254
00:22:57,510 --> 00:23:06,610
across, I have a make file\h‑‑ in a nice
granular way, now the thing is, this is kind

255
00:23:06,610 --> 00:23:11,820
of cool, you have a make file which opens
and compos very well, place holder files,

256
00:23:11,820 --> 00:23:16,880
time stamps and we have automatic parallelism,
clearly if you're on windows it doesn't works,

257
00:23:16,880 --> 00:23:20,350
but I don't really care about that.

258
00:23:20,350 --> 00:23:25,780
This make file is not perfect, obviousfully
a real world, it's probably browserfy against

259
00:23:25,780 --> 00:23:32,420
JavaScript files, we probably reexecute make
on a per one it basis you can do more explicit

260
00:23:32,420 --> 00:23:39,720
pattern matching Andrea have a widgets folder
that we pattern match on the module folder

261
00:23:39,720 --> 00:23:46,340
that's I do at my workplace, I load modules
contain all the JavaScript, all of the CSS,

262
00:23:46,340 --> 00:23:52,590
all images, pattern match against a module
derricktory, we can build image maps out put

263
00:23:52,590 --> 00:23:58,181
CSS and paralyze and it's super fast only
things that change get copies across, which

264
00:23:58,181 --> 00:23:59,400
is awesome.

265
00:23:59,400 --> 00:24:06,070
Quite a lot of stream based pipelines forego
that, and put them through a stream and complicated

266
00:24:06,070 --> 00:24:10,270
and hard to understand, come collated but
also incredibly simple.

267
00:24:10,270 --> 00:24:14,950
Reuse, I've spent all this time making an
amazing make file, it this case it wasn't

268
00:24:14,950 --> 00:24:20,900
amazing, it was simple, but my work one is
probably 500 lines of make, I want to reuse

269
00:24:20,900 --> 00:24:25,281
across all my lines of projects, they have
a similar structure all of my projects, how

270
00:24:25,281 --> 00:24:29,110
do I do that .
let's look at that.

271
00:24:29,110 --> 00:24:30,350
Shall we.

272
00:24:30,350 --> 00:24:35,510
What I've done is on to GitHub I've pushed
this reproand there's an assets folder over

273
00:24:35,510 --> 00:24:43,270
here where I have common.Merk, nothing's changed,
except for over here we have a conditional

274
00:24:43,270 --> 00:24:50,200
assignment of widget to widgets, so widget
had been specified by the caller of this make

275
00:24:50,200 --> 00:24:56,320
file, we'll actually not sign this variable,
so in my current project I want to call widgets

276
00:24:56,320 --> 00:25:00,460
gadgets or baubles or something, I don't know.

277
00:25:00,460 --> 00:25:06,040
And the thing over here, I have the default
goals, I will always call goal unless I specify

278
00:25:06,040 --> 00:25:08,140
a goal myself.

279
00:25:08,140 --> 00:25:17,830
What I can then do is inside my\h‑‑ inside
a make file on an actual project, that's empty

280
00:25:17,830 --> 00:25:23,500
because I he want it to be empty, of course
we go, clef er.

281
00:25:23,500 --> 00:25:29,610
Of we can export some configuration for that,
you can say export widget port equals baubles,

282
00:25:29,610 --> 00:25:36,210
the make files to that we invoked at this
point, set a target at common.America, if

283
00:25:36,210 --> 00:25:45,640
we haven't got a common.Mk, go and get it\h‑‑
comment.mk, this is what our make files look

284
00:25:45,640 --> 00:25:52,030
at work, which downloads a latest version
of our make and goes and gets it, are if I

285
00:25:52,030 --> 00:25:59,200
run this right now, hopefully on the WiFi,
it sound loaded the make file into common.Mk,and

286
00:25:59,200 --> 00:26:05,510
executed against bauble directory and gave
me a site, so, there we go, baubles, CSS,

287
00:26:05,510 --> 00:26:11,130
and Html, it's exactly the same as before,
just ponies.

288
00:26:11,130 --> 00:26:17,100
I say just ponies, I'm very fond of ponies,
no such thing as ponies, they're awesome.

289
00:26:17,100 --> 00:26:24,820
Boot strapping our make files, we can export
variables which is super cool, you can set

290
00:26:24,820 --> 00:26:27,100
default goals, which is useful.

291
00:26:27,100 --> 00:26:31,450
And, if you have a set of conventions across
your projects you can use your make files

292
00:26:31,450 --> 00:26:35,370
across all things and get much joy and happiness
from your life.

293
00:26:35,370 --> 00:26:37,630
Especially as your make files look very pretty.

294
00:26:37,630 --> 00:26:41,760
Here's a friendly warning of something not
to do.

295
00:26:41,760 --> 00:26:50,810
This is what I see quite a lot with Mk files,
I see this a lot GitHub\h‑‑ we have targets

296
00:26:50,810 --> 00:26:57,880
call build JS and they invoke some command
line against an entire directory of JavaScript,

297
00:26:57,880 --> 00:27:04,100
and then we have pony directives down there,
these are not real output these execute these

298
00:27:04,100 --> 00:27:10,040
every single time and make is being used as
a task runner, I see this a lot not in node

299
00:27:10,040 --> 00:27:15,100
projects but this airline projects as well,
but the common\h‑‑ airline is a glorified

300
00:27:15,100 --> 00:27:22,160
bash script made in make, it's really slow,
it's not doing any additional compilation,

301
00:27:22,160 --> 00:27:28,030
it's just compiling every single bean file
inset of asking if it's out of date.

302
00:27:28,030 --> 00:27:32,900
Build systems are not task runners, and vice
versa, not true, one of the mistakes I see,

303
00:27:32,900 --> 00:27:37,630
one of the problems I see all the time that
grunt and GitHub being used as a combination

304
00:27:37,630 --> 00:27:45,040
of these things that's why t's confusing,
if you just want a task runner, that's what

305
00:27:45,040 --> 00:27:50,750
NPM scripts are for\h‑‑ in my workplace
it's a bash scripts calling a bunch of bash

306
00:27:50,750 --> 00:27:58,700
scripts we're a bunch of coy boys that's what
we like do\h‑‑ cowboys\h‑‑ these two

307
00:27:58,700 --> 00:28:04,250
things go together very well, close tools
wisely, that's it and I am running out of

308
00:28:04,250 --> 00:28:06,970
time, I was right about having to rush myself
a little bit.

309
00:28:06,970 --> 00:28:12,110
If you want to come and tell me how awful
it was, do so outside over coffee or breed

