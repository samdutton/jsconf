1
00:00:21,630 --> 00:00:25,130

you

2
00:00:25,140 --> 00:00:28,380
okay so hello everyone so my topic for

3
00:00:28,380 --> 00:00:29,670
this talk might sound a little

4
00:00:29,670 --> 00:00:31,500
surprising so I'm going to talk about

5
00:00:31,500 --> 00:00:34,650
static typing and JavaScript and well

6
00:00:34,650 --> 00:00:36,750
JavaScript is dynamically type it is a

7
00:00:36,750 --> 00:00:38,370
dynamically typed language so how come

8
00:00:38,370 --> 00:00:39,960
I'm going to talk about static types so

9
00:00:39,960 --> 00:00:43,290
let's see so I'll start with a very

10
00:00:43,290 --> 00:00:45,720
simple statement like types are there in

11
00:00:45,720 --> 00:00:47,730
every program like in every program like

12
00:00:47,730 --> 00:00:50,610
all the values that you manipulate with

13
00:00:50,610 --> 00:00:53,760
have certain types and I do not actually

14
00:00:53,760 --> 00:00:55,290
mean types in the like computer theory

15
00:00:55,290 --> 00:00:57,420
sense like in the Haskell sense but

16
00:00:57,420 --> 00:01:00,300
simply types that types like kind of

17
00:01:00,300 --> 00:01:01,590
things that you are working with strings

18
00:01:01,590 --> 00:01:03,989
objects like objects of a certain kind

19
00:01:03,989 --> 00:01:05,640
that have certain attributes and so on

20
00:01:05,640 --> 00:01:07,770
or functions which have like specific

21
00:01:07,770 --> 00:01:12,090
set of arguments and so on and when

22
00:01:12,090 --> 00:01:13,619
you're writing a program in any language

23
00:01:13,619 --> 00:01:15,930
you have to understand what the types

24
00:01:15,930 --> 00:01:18,000
are in order to be able to understand

25
00:01:18,000 --> 00:01:19,740
code to reason about code and in order

26
00:01:19,740 --> 00:01:23,550
to be able to write code and I'm not

27
00:01:23,550 --> 00:01:24,899
sure if it's wise of me to show an

28
00:01:24,899 --> 00:01:26,130
assembly language example in a

29
00:01:26,130 --> 00:01:28,140
JavaScript conference but this is just a

30
00:01:28,140 --> 00:01:30,420
single instruction so hopefully it's not

31
00:01:30,420 --> 00:01:30,960
too hard

32
00:01:30,960 --> 00:01:33,930
so obviously the CPU level there are no

33
00:01:33,930 --> 00:01:36,330
types like there are like numbers that

34
00:01:36,330 --> 00:01:37,860
are put into registers and are stored

35
00:01:37,860 --> 00:01:39,930
into memory and so on but in order to

36
00:01:39,930 --> 00:01:41,280
make sense of this instruction in order

37
00:01:41,280 --> 00:01:43,080
to understand why it's plus four and not

38
00:01:43,080 --> 00:01:45,390
plus eight and what this thing does you

39
00:01:45,390 --> 00:01:47,610
need to know what they what the value of

40
00:01:47,610 --> 00:01:50,369
the EDX register points to you know we

41
00:01:50,369 --> 00:01:54,180
have to know what what the type is of

42
00:01:54,180 --> 00:01:55,590
this thing that is stored in the memory

43
00:01:55,590 --> 00:01:58,860
there and this of course this also

44
00:01:58,860 --> 00:02:00,000
applies by writing when writing

45
00:02:00,000 --> 00:02:02,189
JavaScript code and when we have been

46
00:02:02,189 --> 00:02:03,810
and when the information is not

47
00:02:03,810 --> 00:02:06,299
expressed in the source code when you

48
00:02:06,299 --> 00:02:07,560
just have like a parameter declaration

49
00:02:07,560 --> 00:02:10,530
what's disposing when it's not expressed

50
00:02:10,530 --> 00:02:12,030
in the source code explicitly you still

51
00:02:12,030 --> 00:02:13,560
have to know what this is and you still

52
00:02:13,560 --> 00:02:16,260
have to understand what this thing is

53
00:02:16,260 --> 00:02:19,830
about and of course because and of

54
00:02:19,830 --> 00:02:21,150
course there are multiple ways to how

55
00:02:21,150 --> 00:02:23,010
you can understand what this is about so

56
00:02:23,010 --> 00:02:24,360
if it's a frame or function then you can

57
00:02:24,360 --> 00:02:26,280
read the documentation for the framework

58
00:02:26,280 --> 00:02:28,530
and you can see what it says about what

59
00:02:28,530 --> 00:02:31,560
the particular function expects or what

60
00:02:31,560 --> 00:02:33,959
what it gives you as a parameter if it's

61
00:02:33,959 --> 00:02:35,760
your own code you can just look look

62
00:02:35,760 --> 00:02:38,159
around and

63
00:02:38,159 --> 00:02:40,659
see how this function is called try to

64
00:02:40,659 --> 00:02:42,579
understand the context and try to figure

65
00:02:42,579 --> 00:02:44,709
out what this thing is you can try to

66
00:02:44,709 --> 00:02:46,359
give parameters you can get right

67
00:02:46,359 --> 00:02:48,099
you can try to give meaningful names to

68
00:02:48,099 --> 00:02:49,599
the parameter so from the name you can

69
00:02:49,599 --> 00:02:50,980
so that from the name you can probably

70
00:02:50,980 --> 00:02:53,790
figure out what the type of the thing is

71
00:02:53,790 --> 00:02:56,230
but this is all of this is extra

72
00:02:56,230 --> 00:02:58,420
cognitive load so it's an extra thing

73
00:02:58,420 --> 00:02:59,769
that you have to think about when you

74
00:02:59,769 --> 00:03:01,659
reason about the code and in some cases

75
00:03:01,659 --> 00:03:03,609
it's just automatic in in some cases

76
00:03:03,609 --> 00:03:06,430
this is not just as easy especially when

77
00:03:06,430 --> 00:03:08,319
you have a large complicated code base

78
00:03:08,319 --> 00:03:09,790
especially when you are reading the code

79
00:03:09,790 --> 00:03:12,099
that you did that someone else wrote and

80
00:03:12,099 --> 00:03:14,769
if it's not just like a couple of jQuery

81
00:03:14,769 --> 00:03:16,510
adapters to make something's move on the

82
00:03:16,510 --> 00:03:18,010
page when it's like like real big

83
00:03:18,010 --> 00:03:23,230
large-scale JavaScript application and

84
00:03:23,230 --> 00:03:26,680
of course with the of course the types

85
00:03:26,680 --> 00:03:28,389
is the type system needs to be able to

86
00:03:28,389 --> 00:03:31,090
express what what the code is about

87
00:03:31,090 --> 00:03:33,459
instead type system so type of languages

88
00:03:33,459 --> 00:03:35,709
like Java they are actually quite rigid

89
00:03:35,709 --> 00:03:37,329
so you have classes and the class has a

90
00:03:37,329 --> 00:03:39,760
fixed set of members and you have to

91
00:03:39,760 --> 00:03:40,989
list the members when you are defining

92
00:03:40,989 --> 00:03:43,750
the class and so on and with JavaScript

93
00:03:43,750 --> 00:03:45,310
people want to have more flexibility

94
00:03:45,310 --> 00:03:46,870
than that they want to have like objects

95
00:03:46,870 --> 00:03:48,310
which have properties they can add some

96
00:03:48,310 --> 00:03:49,840
properties and they can inspect what the

97
00:03:49,840 --> 00:03:51,519
properties are there they can make

98
00:03:51,519 --> 00:03:53,199
decisions based on depending on whether

99
00:03:53,199 --> 00:03:55,239
some property is there or not so the

100
00:03:55,239 --> 00:03:56,859
type system that you that we are using

101
00:03:56,859 --> 00:03:58,150
the static type system needs to be

102
00:03:58,150 --> 00:04:00,909
expressive enough to be able to state

103
00:04:00,909 --> 00:04:02,889
all of these requirements and state all

104
00:04:02,889 --> 00:04:06,329
of these points in the type declaration

105
00:04:06,329 --> 00:04:10,030
but the interesting thing is it is

106
00:04:10,030 --> 00:04:13,900
actually possible to express the stat to

107
00:04:13,900 --> 00:04:15,639
infer the static types that were meant

108
00:04:15,639 --> 00:04:17,769
by the JavaScript library developers so

109
00:04:17,769 --> 00:04:19,510
this is the definite type brought this

110
00:04:19,510 --> 00:04:22,120
is the definite typed project on github

111
00:04:22,120 --> 00:04:24,699
where people actually after the fact

112
00:04:24,699 --> 00:04:26,650
take JavaScript libraries written by the

113
00:04:26,650 --> 00:04:29,020
community and come up with static type

114
00:04:29,020 --> 00:04:30,729
declarations for all of the functions in

115
00:04:30,729 --> 00:04:32,380
those libraries and you can see they

116
00:04:32,380 --> 00:04:34,090
cover like a huge set so this is just

117
00:04:34,090 --> 00:04:35,620
not a complete list of the libraries

118
00:04:35,620 --> 00:04:37,900
that are there and it is actually

119
00:04:37,900 --> 00:04:39,009
possible when you have a good language

120
00:04:39,009 --> 00:04:40,690
of the good type system to express all

121
00:04:40,690 --> 00:04:42,220
the types that are that have been used

122
00:04:42,220 --> 00:04:45,639
by those libraries and so like in any in

123
00:04:45,639 --> 00:04:47,529
any piece of JavaScript code it is also

124
00:04:47,529 --> 00:04:49,000
possible with a good enough type system

125
00:04:49,000 --> 00:04:51,400
to express your intentions and

126
00:04:51,400 --> 00:04:54,520
your requirements another common

127
00:04:54,520 --> 00:04:56,169
misconception about types is that like

128
00:04:56,169 --> 00:04:57,520
type slowed you down when you change

129
00:04:57,520 --> 00:05:00,699
code because you have to you have to

130
00:05:00,699 --> 00:05:03,550
adapt the you have to go in and make

131
00:05:03,550 --> 00:05:05,169
sure that the types actually fit and you

132
00:05:05,169 --> 00:05:06,550
have to go and change the type

133
00:05:06,550 --> 00:05:08,620
declarations when you are else altering

134
00:05:08,620 --> 00:05:11,350
the code but this is actually all this

135
00:05:11,350 --> 00:05:13,090
is actually not quite true so it does it

136
00:05:13,090 --> 00:05:14,770
is true that you have to like go and

137
00:05:14,770 --> 00:05:16,720
worry about the types but this is still

138
00:05:16,720 --> 00:05:18,370
extremely useful to be able to

139
00:05:18,370 --> 00:05:20,590
understand so the types are not there

140
00:05:20,590 --> 00:05:22,360
for that for the sakes of themself for

141
00:05:22,360 --> 00:05:24,039
the sake of themselves it's you they

142
00:05:24,039 --> 00:05:26,110
give you a list of all the places that

143
00:05:26,110 --> 00:05:27,910
you have to change when you are changing

144
00:05:27,910 --> 00:05:30,100
a particular piece of code in order to

145
00:05:30,100 --> 00:05:31,449
make sure that your program fit together

146
00:05:31,449 --> 00:05:33,820
fits together yet that you do not end up

147
00:05:33,820 --> 00:05:34,840
with the like square peg in the round

148
00:05:34,840 --> 00:05:40,780
hole situation and if you don't have

149
00:05:40,780 --> 00:05:42,310
types you have to run the test and you

150
00:05:42,310 --> 00:05:43,449
have to like go through the test

151
00:05:43,449 --> 00:05:44,740
failures and understand what exactly

152
00:05:44,740 --> 00:05:46,750
needs to be changed when you because of

153
00:05:46,750 --> 00:05:48,370
this test failure and you have to make

154
00:05:48,370 --> 00:05:49,900
sure that you have enough coverage in

155
00:05:49,900 --> 00:05:51,810
enough test covering your program and

156
00:05:51,810 --> 00:05:54,220
like type save you a lot of pain in this

157
00:05:54,220 --> 00:05:57,610
regard and of course a very good things

158
00:05:57,610 --> 00:05:59,260
about types is that you do not have to

159
00:05:59,260 --> 00:06:02,500
have them everywhere so if if in some

160
00:06:02,500 --> 00:06:04,120
particular place like it's simple event

161
00:06:04,120 --> 00:06:05,800
handler that takes it's like a parameter

162
00:06:05,800 --> 00:06:07,150
you know what the parameter is you don't

163
00:06:07,150 --> 00:06:08,979
you don't you are not ever getting

164
00:06:08,979 --> 00:06:11,229
confused by that so you just leave it as

165
00:06:11,229 --> 00:06:14,830
is but you can't specify types in like

166
00:06:14,830 --> 00:06:16,750
more here in more complicated pieces of

167
00:06:16,750 --> 00:06:18,099
code simply to support your thinking

168
00:06:18,099 --> 00:06:20,500
simply to make it clear what happens in

169
00:06:20,500 --> 00:06:25,240
every particular place now how can you

170
00:06:25,240 --> 00:06:26,860
actually put types in a Java Script so

171
00:06:26,860 --> 00:06:28,240
this was like a bit of the white part

172
00:06:28,240 --> 00:06:30,310
and so how can you do actually how can

173
00:06:30,310 --> 00:06:31,169
you actually do that

174
00:06:31,169 --> 00:06:33,190
so first of all there are a bunch of

175
00:06:33,190 --> 00:06:34,960
languages that compile to JavaScript and

176
00:06:34,960 --> 00:06:37,300
that's like have fully supported static

177
00:06:37,300 --> 00:06:39,190
type systems so these are just a few of

178
00:06:39,190 --> 00:06:41,199
them there are actually like others so

179
00:06:41,199 --> 00:06:43,330
cotton is made by JetBrains so this is

180
00:06:43,330 --> 00:06:44,650
also something that I have worked on

181
00:06:44,650 --> 00:06:46,810
previously but this is not what this

182
00:06:46,810 --> 00:06:47,650
talk is about

183
00:06:47,650 --> 00:06:49,630
so all these languages are nice they

184
00:06:49,630 --> 00:06:51,340
give you a lot of a lot of power but

185
00:06:51,340 --> 00:06:53,169
they require you to essentially change

186
00:06:53,169 --> 00:06:55,030
the language in your project and then

187
00:06:55,030 --> 00:06:56,320
the JavaScript communities can be often

188
00:06:56,320 --> 00:06:57,729
a very controversial topic and there are

189
00:06:57,729 --> 00:06:59,409
like many reasons why you do not want to

190
00:06:59,409 --> 00:07:02,379
do that

191
00:07:02,389 --> 00:07:04,580
and so this is not what I'm going to

192
00:07:04,580 --> 00:07:06,980
talk about for like for the meat or my

193
00:07:06,980 --> 00:07:09,710
talk today what I am going to talk to

194
00:07:09,710 --> 00:07:13,040
talk about is Jays dog which is actually

195
00:07:13,040 --> 00:07:15,530
great too and it actually it is much

196
00:07:15,530 --> 00:07:19,310
more than just the cogeneration tool it

197
00:07:19,310 --> 00:07:21,530
is a tool that lets you simply document

198
00:07:21,530 --> 00:07:24,350
your code by adding parameter names like

199
00:07:24,350 --> 00:07:26,540
like describing function specifying what

200
00:07:26,540 --> 00:07:27,710
the negative of the purpose of the

201
00:07:27,710 --> 00:07:29,750
parameters are and so on but it does

202
00:07:29,750 --> 00:07:31,730
much more than that it has actually

203
00:07:31,730 --> 00:07:34,010
built-in type system that allows you to

204
00:07:34,010 --> 00:07:35,840
express like all of those things that I

205
00:07:35,840 --> 00:07:37,040
was just talking about all of the

206
00:07:37,040 --> 00:07:39,590
requirements all of the expectations

207
00:07:39,590 --> 00:07:44,040
that you have about functions all of the

208
00:07:44,050 --> 00:07:47,390
like like all the parameter types and so

209
00:07:47,390 --> 00:07:58,280
on okay and beside the documentation

210
00:07:58,280 --> 00:08:00,229
there are also tools that can make use

211
00:08:00,229 --> 00:08:01,610
of this additional information to do

212
00:08:01,610 --> 00:08:04,400
error checking and to improve your code

213
00:08:04,400 --> 00:08:07,370
experience when you write code so Google

214
00:08:07,370 --> 00:08:09,229
closure compiler is an example of a tool

215
00:08:09,229 --> 00:08:10,970
that does quite extensive type checking

216
00:08:10,970 --> 00:08:14,840
based on based on j-stop information and

217
00:08:14,840 --> 00:08:17,960
webstorm is the tool that i'm currently

218
00:08:17,960 --> 00:08:20,030
working on it's an ID for JavaScript and

219
00:08:20,030 --> 00:08:22,700
it can extract a lot of value from JSTOR

220
00:08:22,700 --> 00:08:24,470
comments and I'm going to show you how

221
00:08:24,470 --> 00:08:27,650
exactly so the problem is just doc is

222
00:08:27,650 --> 00:08:29,840
that there are actually more than there

223
00:08:29,840 --> 00:08:31,820
is just no single standard J's doc

224
00:08:31,820 --> 00:08:33,680
format that like everyone knows how to

225
00:08:33,680 --> 00:08:35,630
use there are like multiple versions of

226
00:08:35,630 --> 00:08:37,130
that there is like J's dog 3 which is

227
00:08:37,130 --> 00:08:38,810
like the new kid on the block there are

228
00:08:38,810 --> 00:08:42,469
multiple like older tools that use that

229
00:08:42,469 --> 00:08:44,000
use different dialects of the Bluejays

230
00:08:44,000 --> 00:08:46,520
doc and also documentation that is not

231
00:08:46,520 --> 00:08:48,470
quite JSTOR but similar to that and its

232
00:08:48,470 --> 00:08:51,260
form and function but the things that

233
00:08:51,260 --> 00:08:52,460
I'm going to show you now are like

234
00:08:52,460 --> 00:08:54,650
mostly there like there is a common

235
00:08:54,650 --> 00:08:55,910
ground between all of the tools and this

236
00:08:55,910 --> 00:08:59,720
and you can use it for for your for your

237
00:08:59,720 --> 00:09:02,630
project and just to show that is not

238
00:09:02,630 --> 00:09:05,000
that like there are like real people out

239
00:09:05,000 --> 00:09:06,589
there that use J's dog for their comment

240
00:09:06,589 --> 00:09:07,910
and for their comments this is just a

241
00:09:07,910 --> 00:09:10,280
piece of the fire box source code and

242
00:09:10,280 --> 00:09:12,770
you can see an example for how this is

243
00:09:12,770 --> 00:09:14,120
used like this is the most common thing

244
00:09:14,120 --> 00:09:15,030
the parameter

245
00:09:15,030 --> 00:09:17,160
so the parameter it has a type string

246
00:09:17,160 --> 00:09:18,630
the name of the parameter we are

247
00:09:18,630 --> 00:09:21,060
documenting is expression and like what

248
00:09:21,060 --> 00:09:22,410
it means is the expression which is I

249
00:09:22,410 --> 00:09:28,620
guess not very useful and once you have

250
00:09:28,620 --> 00:09:30,810
this kind of information let's see how

251
00:09:30,810 --> 00:09:33,600
what you can do with that so for example

252
00:09:33,600 --> 00:09:34,830
here is a very simple example of

253
00:09:34,830 --> 00:09:36,330
function that has a string parameter and

254
00:09:36,330 --> 00:09:37,860
we are calling it with a passing it an

255
00:09:37,860 --> 00:09:40,650
integer so in this case it's not going

256
00:09:40,650 --> 00:09:42,540
to crash Trotta but still it's not it's

257
00:09:42,540 --> 00:09:45,360
something that we want to be able to be

258
00:09:45,360 --> 00:09:46,890
able to get a warning about because this

259
00:09:46,890 --> 00:09:48,420
isn't we are not using the function in a

260
00:09:48,420 --> 00:09:50,340
way that I meant and this is an example

261
00:09:50,340 --> 00:09:51,930
of a message produced by the Google

262
00:09:51,930 --> 00:09:53,420
closure compiler to let it to rule

263
00:09:53,420 --> 00:09:55,560
notify you about the error so this is

264
00:09:55,560 --> 00:09:57,120
not an error actually this is a warning

265
00:09:57,120 --> 00:09:58,890
but they still give tells you that the

266
00:09:58,890 --> 00:10:00,390
actual parameter does not start them

267
00:10:00,390 --> 00:10:02,100
does not match the formal parameter so

268
00:10:02,100 --> 00:10:07,290
it's not a string it's a number and now

269
00:10:07,290 --> 00:10:09,480
let's see what additional checks can be

270
00:10:09,480 --> 00:10:11,130
performed by webstorm for examples so

271
00:10:11,130 --> 00:10:14,460
yeah this is a function that takes it

272
00:10:14,460 --> 00:10:15,930
takes an object and this object has to

273
00:10:15,930 --> 00:10:17,850
have this number of fields like name age

274
00:10:17,850 --> 00:10:20,190
and an optional professional profession

275
00:10:20,190 --> 00:10:23,610
field and when we are passing some

276
00:10:23,610 --> 00:10:25,590
specific objects that we also declare

277
00:10:25,590 --> 00:10:27,120
the type of we can get a warning about

278
00:10:27,120 --> 00:10:30,690
the mismatch of the type so like the we

279
00:10:30,690 --> 00:10:32,010
are passing a structure that only has a

280
00:10:32,010 --> 00:10:34,680
string as a string field and the

281
00:10:34,680 --> 00:10:36,120
structure that the function expects must

282
00:10:36,120 --> 00:10:37,470
have the swing and the number so the

283
00:10:37,470 --> 00:10:39,210
function is going to crash and we get a

284
00:10:39,210 --> 00:10:42,360
static of type warning about this yeah

285
00:10:42,360 --> 00:10:43,740
this is a simpler example we are simply

286
00:10:43,740 --> 00:10:45,120
define this rush in line and we are

287
00:10:45,120 --> 00:10:50,040
passing into the function G's dog also

288
00:10:50,040 --> 00:10:53,700
gives us a way to express certain so you

289
00:10:53,700 --> 00:10:56,580
had certain class like constructs so

290
00:10:56,580 --> 00:10:58,230
yeah JavaScript users prototype

291
00:10:58,230 --> 00:10:59,760
inheritance what the people wanted to

292
00:10:59,760 --> 00:11:01,260
use like want to use it like a more

293
00:11:01,260 --> 00:11:03,840
object-oriented language and his dog has

294
00:11:03,840 --> 00:11:05,550
tags to support this with a class tag

295
00:11:05,550 --> 00:11:06,810
please find that the particular

296
00:11:06,810 --> 00:11:08,670
functions the constructor works the

297
00:11:08,670 --> 00:11:11,190
constructor of a class you can specimen

298
00:11:11,190 --> 00:11:13,290
mark one classes extending another class

299
00:11:13,290 --> 00:11:15,840
you can declare static members and also

300
00:11:15,840 --> 00:11:19,460
declare the types of them and so on and

301
00:11:19,460 --> 00:11:21,690
this actually gives you a common ground

302
00:11:21,690 --> 00:11:23,820
among all of the different javascript

303
00:11:23,820 --> 00:11:25,850
libraries which each of those implements

304
00:11:25,850 --> 00:11:28,470
their own concept of inheritance

305
00:11:28,470 --> 00:11:30,870
and so on and this this is just how you

306
00:11:30,870 --> 00:11:32,700
can express all of those in a single in

307
00:11:32,700 --> 00:11:36,210
a simple way also continuing the object

308
00:11:36,210 --> 00:11:37,590
oriented programming topic you can also

309
00:11:37,590 --> 00:11:40,350
express that some member is private of

310
00:11:40,350 --> 00:11:42,030
course this is not enforced at runtime

311
00:11:42,030 --> 00:11:44,700
so that there is no encapsulation

312
00:11:44,700 --> 00:11:46,920
JavaScript but in an ID or when a

313
00:11:46,920 --> 00:11:48,420
compiling your code you can get warnings

314
00:11:48,420 --> 00:11:50,130
about trying to access private members

315
00:11:50,130 --> 00:11:56,160
of a class another concept supported by

316
00:11:56,160 --> 00:12:00,050
J's talk is the concept of interfaces so

317
00:12:00,050 --> 00:12:03,870
this is this this allows you to say that

318
00:12:03,870 --> 00:12:06,000
an object that you pass through some

319
00:12:06,000 --> 00:12:07,530
function needs to have a certain set of

320
00:12:07,530 --> 00:12:11,910
methods yeah this interface tag is used

321
00:12:11,910 --> 00:12:16,620
to do that and when yes and you can also

322
00:12:16,620 --> 00:12:19,410
mark an object that as requiring to

323
00:12:19,410 --> 00:12:21,510
implement some interface and if it does

324
00:12:21,510 --> 00:12:22,770
not actually implement the interface

325
00:12:22,770 --> 00:12:24,890
then you get a warning because like the

326
00:12:24,890 --> 00:12:26,730
implementation of the interfaces are not

327
00:12:26,730 --> 00:12:29,430
there and once you do that it's very

328
00:12:29,430 --> 00:12:31,050
easy to generate the implementations and

329
00:12:31,050 --> 00:12:33,300
webstorm so you can just invoke the

330
00:12:33,300 --> 00:12:37,230
implement methods quick fix and the

331
00:12:37,230 --> 00:12:39,800
implementations are generated for you

332
00:12:39,800 --> 00:12:43,800
it's quite easy to use the next concept

333
00:12:43,800 --> 00:12:50,130
is announced so just the set of just

334
00:12:50,130 --> 00:12:52,470
when a function takes the values that

335
00:12:52,470 --> 00:12:54,390
need to be in a particular set you can

336
00:12:54,390 --> 00:12:57,480
annotate this set as an enum and we are

337
00:12:57,480 --> 00:12:59,010
trying to pass or to assign something

338
00:12:59,010 --> 00:13:00,630
else to a function you get an warning

339
00:13:00,630 --> 00:13:02,820
about not like this this thing is not

340
00:13:02,820 --> 00:13:04,140
assignable it does not have the right

341
00:13:04,140 --> 00:13:09,900
type you can also the next thing I'm

342
00:13:09,900 --> 00:13:12,810
going to show you the type def tag so

343
00:13:12,810 --> 00:13:14,340
the type def it actually allows you to

344
00:13:14,340 --> 00:13:16,730
give a short name to a particular set of

345
00:13:16,730 --> 00:13:23,910
like a set of object fields so like if

346
00:13:23,910 --> 00:13:26,730
this is an this is no object like this

347
00:13:26,730 --> 00:13:28,020
if this is a set of fields that you

348
00:13:28,020 --> 00:13:29,550
commonly used when it does not have like

349
00:13:29,550 --> 00:13:31,710
a class or space like a specific class

350
00:13:31,710 --> 00:13:33,780
at a constructor function you can just

351
00:13:33,780 --> 00:13:35,610
take this thing and give it a specific

352
00:13:35,610 --> 00:13:37,920
particular name and you like use it in

353
00:13:37,920 --> 00:13:40,370
your code and according to this name and

354
00:13:40,370 --> 00:13:42,350
so in this case yeah we

355
00:13:42,350 --> 00:13:44,540
you can simply after once you do that

356
00:13:44,540 --> 00:13:47,180
you can use it as simply an parameters

357
00:13:47,180 --> 00:13:48,950
and then type tags just all over the

358
00:13:48,950 --> 00:13:52,340
place there are many more tags in J's

359
00:13:52,340 --> 00:13:54,200
talk I'm not going to talk about all of

360
00:13:54,200 --> 00:13:56,180
them because this would get quite boring

361
00:13:56,180 --> 00:14:00,860
quite quickly but just the key concepts

362
00:14:00,860 --> 00:14:02,570
are the one that the ones that have been

363
00:14:02,570 --> 00:14:06,470
the traffic shown previously listen this

364
00:14:06,470 --> 00:14:09,110
is another example which shows how JSTOR

365
00:14:09,110 --> 00:14:11,330
can be used for JSTOR can be useful and

366
00:14:11,330 --> 00:14:13,580
in this case the J's talk that we are

367
00:14:13,580 --> 00:14:15,590
talking about or is that is the

368
00:14:15,590 --> 00:14:19,400
documentation for for the job for the

369
00:14:19,400 --> 00:14:20,810
standard job field function that we have

370
00:14:20,810 --> 00:14:24,290
as part of the webstorm distribution so

371
00:14:24,290 --> 00:14:25,340
in this case we are making a mistake

372
00:14:25,340 --> 00:14:27,500
that's very easy to that's very easy to

373
00:14:27,500 --> 00:14:29,330
make accidentally so to this set

374
00:14:29,330 --> 00:14:32,030
interval function instead of passing the

375
00:14:32,030 --> 00:14:33,290
function itself we are passing the

376
00:14:33,290 --> 00:14:34,550
return value of the function which is

377
00:14:34,550 --> 00:14:35,840
not going to work because this function

378
00:14:35,840 --> 00:14:37,700
does not return anything just returns

379
00:14:37,700 --> 00:14:39,980
undefined and webstorm can actually

380
00:14:39,980 --> 00:14:46,640
highlight this error and so yeah

381
00:14:46,640 --> 00:14:49,070
actually get this cubicle you can also

382
00:14:49,070 --> 00:14:50,390
see that the type system allows you to

383
00:14:50,390 --> 00:14:51,920
express alternatives and types so this

384
00:14:51,920 --> 00:14:53,630
this thing must be either a string or a

385
00:14:53,630 --> 00:14:56,420
function this or this pipe marker means

386
00:14:56,420 --> 00:14:59,690
that yeah and this is how we how we

387
00:14:59,690 --> 00:15:02,390
declare the types for the expected types

388
00:15:02,390 --> 00:15:03,830
or sentence for the set interval

389
00:15:03,830 --> 00:15:05,990
function it is just part of like this

390
00:15:05,990 --> 00:15:08,000
these documents are just part of the

391
00:15:08,000 --> 00:15:09,410
standard distribution of webstorm we are

392
00:15:09,410 --> 00:15:11,090
simply maintaining this information to

393
00:15:11,090 --> 00:15:12,650
make sure it's accurate and it reflects

394
00:15:12,650 --> 00:15:14,120
all the stuff that's going on in the

395
00:15:14,120 --> 00:15:17,390
browsers another thing that can the

396
00:15:17,390 --> 00:15:18,890
another feature of webstorm that relies

397
00:15:18,890 --> 00:15:20,450
on static type information is parameter

398
00:15:20,450 --> 00:15:22,790
in for parameter information so it's a

399
00:15:22,790 --> 00:15:25,850
very just very easy way to get to get a

400
00:15:25,850 --> 00:15:27,110
tooltip for the function that you are

401
00:15:27,110 --> 00:15:30,380
calling to get to check whether the

402
00:15:30,380 --> 00:15:33,080
parameters that that it takes to match

403
00:15:33,080 --> 00:15:36,950
your expectations the code completion

404
00:15:36,950 --> 00:15:39,080
can also make use of static typing

405
00:15:39,080 --> 00:15:40,580
information so in this case we have

406
00:15:40,580 --> 00:15:42,800
declared the parameter parameter as a as

407
00:15:42,800 --> 00:15:45,170
an element and so the completion

408
00:15:45,170 --> 00:15:49,100
variants are generated based on knowing

409
00:15:49,100 --> 00:15:51,110
the type of this value and so it's an

410
00:15:51,110 --> 00:15:52,400
element and so we show the list of

411
00:15:52,400 --> 00:15:55,450
members for element

412
00:15:55,460 --> 00:15:57,510
this also works in slightly more

413
00:15:57,510 --> 00:15:59,700
complicated situations so in this case

414
00:15:59,700 --> 00:16:03,120
we have declared that the change

415
00:16:03,120 --> 00:16:05,370
function takes a callback and the D and

416
00:16:05,370 --> 00:16:07,350
in the context of the callback this is

417
00:16:07,350 --> 00:16:09,660
going to be an element and so now we are

418
00:16:09,660 --> 00:16:11,790
calling the change function and invoking

419
00:16:11,790 --> 00:16:13,950
the code completion for this and once

420
00:16:13,950 --> 00:16:16,500
again we get the list of the list of

421
00:16:16,500 --> 00:16:19,920
members for element so this is also

422
00:16:19,920 --> 00:16:26,800
quite handy in the next example we are

423
00:16:26,810 --> 00:16:31,980
we are also we are also seeing another

424
00:16:31,980 --> 00:16:33,540
common pattern in JavaScript libraries

425
00:16:33,540 --> 00:16:36,060
where we have an object we has like so

426
00:16:36,060 --> 00:16:37,710
instead of adding multiple parameters

427
00:16:37,710 --> 00:16:41,340
for different separate parameters for

428
00:16:41,340 --> 00:16:42,690
different options that the function can

429
00:16:42,690 --> 00:16:43,890
take which as they make a single

430
00:16:43,890 --> 00:16:46,200
settings object and we put all the sync

431
00:16:46,200 --> 00:16:47,610
all of the things that we want to pass

432
00:16:47,610 --> 00:16:49,410
to the function as attributes on the

433
00:16:49,410 --> 00:16:51,360
settings object and we declare the types

434
00:16:51,360 --> 00:16:53,100
of those so like in this case the

435
00:16:53,100 --> 00:16:55,110
settings object has a context parameter

436
00:16:55,110 --> 00:16:57,360
and the URL parameter and we are calling

437
00:16:57,360 --> 00:16:59,720
the Ajax function passing in an object

438
00:16:59,720 --> 00:17:02,010
object literal and inside the object

439
00:17:02,010 --> 00:17:04,590
literal we get the completion for or for

440
00:17:04,590 --> 00:17:09,640
the parameters that we have declared

441
00:17:09,650 --> 00:17:11,610
webstorm also has a bunch of features

442
00:17:11,610 --> 00:17:16,380
for helping you write J's documents and

443
00:17:16,380 --> 00:17:17,820
so for example in this case we have a

444
00:17:17,820 --> 00:17:19,980
function and we have started writing and

445
00:17:19,980 --> 00:17:21,900
document for in for it so we have simply

446
00:17:21,900 --> 00:17:24,360
started so we have simply type slash

447
00:17:24,360 --> 00:17:26,940
double asterisk and we simply press

448
00:17:26,940 --> 00:17:29,940
ENTER and once we do that we get a stop

449
00:17:29,940 --> 00:17:32,670
for the door comment so we have actually

450
00:17:32,670 --> 00:17:34,080
analyzed the code of the function we

451
00:17:34,080 --> 00:17:37,170
have try to infer its return type and so

452
00:17:37,170 --> 00:17:38,790
we have generated the returns tag for

453
00:17:38,790 --> 00:17:40,830
you and because we don't know anything

454
00:17:40,830 --> 00:17:42,120
about the object we just leave the

455
00:17:42,120 --> 00:17:43,560
parameter declaration as is so you can

456
00:17:43,560 --> 00:17:48,240
complete it as you need the refactorings

457
00:17:48,240 --> 00:17:50,190
in webstorm also worked with the J's

458
00:17:50,190 --> 00:17:52,350
Dogg comments correctly so in this case

459
00:17:52,350 --> 00:17:54,270
we are we are taking a function and we

460
00:17:54,270 --> 00:17:55,710
are going to apply the introduce Panther

461
00:17:55,710 --> 00:17:57,960
refactoring to it so we select the piece

462
00:17:57,960 --> 00:18:01,260
of code we press the shortcut to invoke

463
00:18:01,260 --> 00:18:04,800
the refactoring it and it offers us the

464
00:18:04,800 --> 00:18:06,470
generate a stock option

465
00:18:06,470 --> 00:18:08,810
and then when we invoke the refactoring

466
00:18:08,810 --> 00:18:10,700
you see that the function that we have

467
00:18:10,700 --> 00:18:13,430
generated has the parameter tagged with

468
00:18:13,430 --> 00:18:18,110
a correct parameter type we also have a

469
00:18:18,110 --> 00:18:20,480
bunch of quick fixes - correct - correct

470
00:18:20,480 --> 00:18:22,670
faulty J's dog comments so for example

471
00:18:22,670 --> 00:18:26,150
in this case we have a variable that is

472
00:18:26,150 --> 00:18:27,800
that this has actually a type of string

473
00:18:27,800 --> 00:18:30,410
but and it is a data to have as have any

474
00:18:30,410 --> 00:18:32,240
type number and we can invoke a quick

475
00:18:32,240 --> 00:18:36,380
fix to correct this for us so we invoke

476
00:18:36,380 --> 00:18:37,700
it and it changes the age a stock

477
00:18:37,700 --> 00:18:43,640
declaration also common case is when we

478
00:18:43,640 --> 00:18:45,590
have a J's comment that does not include

479
00:18:45,590 --> 00:18:47,390
any information about types includes

480
00:18:47,390 --> 00:18:48,950
just the description of the function and

481
00:18:48,950 --> 00:18:51,800
we can invoke the fixed comment fixed

482
00:18:51,800 --> 00:18:54,410
action the the fixed or comment action

483
00:18:54,410 --> 00:18:57,440
in order to bring the to complete the

484
00:18:57,440 --> 00:18:59,240
J's dog declaration with all the stuff

485
00:18:59,240 --> 00:19:00,710
that needs to be there so we invoke the

486
00:19:00,710 --> 00:19:03,830
action and now it gives out the actual

487
00:19:03,830 --> 00:19:08,930
results that we give that the parameter

488
00:19:08,930 --> 00:19:13,590
and the return type declarations

489
00:19:13,600 --> 00:19:16,340
actually the so yeah as I mentioned so

490
00:19:16,340 --> 00:19:17,930
J's dog has quite a sophisticated type

491
00:19:17,930 --> 00:19:19,220
system and it's also interesting that

492
00:19:19,220 --> 00:19:21,590
this the type system of JS JS dog maps

493
00:19:21,590 --> 00:19:22,910
quite well - the type system of

494
00:19:22,910 --> 00:19:27,260
typescript so like for the many like for

495
00:19:27,260 --> 00:19:29,180
like many things supported by this dog

496
00:19:29,180 --> 00:19:30,590
there are like good equivalents in the

497
00:19:30,590 --> 00:19:33,680
types you type system and what what this

498
00:19:33,680 --> 00:19:35,660
lets us do is actually it's less it lets

499
00:19:35,660 --> 00:19:37,730
us use a single internal representation

500
00:19:37,730 --> 00:19:39,560
for all of the types in your program and

501
00:19:39,560 --> 00:19:43,490
to also use the declarations created by

502
00:19:43,490 --> 00:19:44,960
the typescript community in order to

503
00:19:44,960 --> 00:19:46,910
make to improve the quality of the code

504
00:19:46,910 --> 00:19:49,400
completion in your JavaScript code so

505
00:19:49,400 --> 00:19:50,360
even if you're writing in plain

506
00:19:50,360 --> 00:19:51,890
JavaScript Hindman if you don't use any

507
00:19:51,890 --> 00:19:54,260
type script in your application you can

508
00:19:54,260 --> 00:19:55,880
still download the typescript stubs and

509
00:19:55,880 --> 00:19:56,960
they are going to improve their code

510
00:19:56,960 --> 00:19:58,930
completion experience very significantly

511
00:19:58,930 --> 00:20:01,160
so we have a specific action for that

512
00:20:01,160 --> 00:20:03,650
you can just go download and install a

513
00:20:03,650 --> 00:20:05,540
library select the typescript immunity

514
00:20:05,540 --> 00:20:08,840
stubs there's like a long list of

515
00:20:08,840 --> 00:20:12,320
libraries that are there and you can you

516
00:20:12,320 --> 00:20:14,480
can invoke you can select the one that

517
00:20:14,480 --> 00:20:16,310
you need and it will be downloaded as

518
00:20:16,310 --> 00:20:19,610
part of your project this is what the

519
00:20:19,610 --> 00:20:20,420
declaration look

520
00:20:20,420 --> 00:20:21,830
the declarations in those libraries

521
00:20:21,830 --> 00:20:24,650
looks like so just Route interface like

522
00:20:24,650 --> 00:20:27,250
callbacks methods and stuff like that

523
00:20:27,250 --> 00:20:31,280
and here's how the code completion works

524
00:20:31,280 --> 00:20:33,020
when you have this information so want

525
00:20:33,020 --> 00:20:34,160
to get once again this is pure

526
00:20:34,160 --> 00:20:35,480
JavaScript there is no typescript

527
00:20:35,480 --> 00:20:37,160
anywhere in your project just in those

528
00:20:37,160 --> 00:20:39,710
stop files and still we get all of the

529
00:20:39,710 --> 00:20:41,900
all of the assistance that all of the

530
00:20:41,900 --> 00:20:43,550
useful information that is contained in

531
00:20:43,550 --> 00:20:49,340
those stop libraries so so that

532
00:20:49,340 --> 00:20:52,070
concludes my presentation actually so as

533
00:20:52,070 --> 00:20:53,660
we have seen there is a lot of power

534
00:20:53,660 --> 00:20:55,520
that could be gained by simply using J's

535
00:20:55,520 --> 00:20:58,730
talk to annotate your JavaScript code

536
00:20:58,730 --> 00:21:00,320
with additional information about the

537
00:21:00,320 --> 00:21:02,030
types it's going to help you with

538
00:21:02,030 --> 00:21:03,590
refactorings it's going to help you with

539
00:21:03,590 --> 00:21:05,000
code completion is going to generally

540
00:21:05,000 --> 00:21:06,980
help you make your code easier to

541
00:21:06,980 --> 00:21:09,080
maintain and you can apply this

542
00:21:09,080 --> 00:21:11,240
technique exactly when you need it and

543
00:21:11,240 --> 00:21:12,710
exactly to the degree that you need it

544
00:21:12,710 --> 00:21:14,390
where it where it is actually helpful

545
00:21:14,390 --> 00:21:16,280
and simply the places where it's not

546
00:21:16,280 --> 00:21:18,890
helpful just leave them alone and there

547
00:21:18,890 --> 00:21:21,410
are tools that can make a lot of that

548
00:21:21,410 --> 00:21:22,640
can extract a lot of value for this

549
00:21:22,640 --> 00:21:24,740
information make your life easier and

550
00:21:24,740 --> 00:21:26,360
yeah webstorm is one of those tools

551
00:21:26,360 --> 00:21:28,310
Google closure compiler is another is

552
00:21:28,310 --> 00:21:32,450
another and yeah please go and use JSTOR

553
00:21:32,450 --> 00:21:42,260
for your projects

554
00:21:42,270 --> 00:21:45,210
we think we have some time for

555
00:21:45,210 --> 00:21:47,260
five minutes for questions if anybody

556
00:21:47,260 --> 00:21:58,899
wants question yep

557
00:21:58,909 --> 00:22:04,440
hello no yes I I'm a bit slow today so

558
00:22:04,440 --> 00:22:06,899
I'm sorry if this has been covered but I

559
00:22:06,899 --> 00:22:09,469
wondered what if I wanted to do like a

560
00:22:09,469 --> 00:22:13,529
postal code as a type I basically want

561
00:22:13,529 --> 00:22:15,139
to string everything that the string is

562
00:22:15,139 --> 00:22:18,899
like so I don't really want to create a

563
00:22:18,899 --> 00:22:23,579
new class for it so if they're astern of

564
00:22:23,579 --> 00:22:25,019
this technology what would allow me to

565
00:22:25,019 --> 00:22:27,509
just sort of say that this function

566
00:22:27,509 --> 00:22:31,589
returns and add a postal code it just

567
00:22:31,589 --> 00:22:34,619
happens to be a string but I demand that

568
00:22:34,619 --> 00:22:36,599
it's been called a postal code and

569
00:22:36,599 --> 00:22:38,940
functions taking postal code will

570
00:22:38,940 --> 00:22:42,029
require it to be this I'm not just a

571
00:22:42,029 --> 00:22:45,449
random string I'm actually not quite

572
00:22:45,449 --> 00:22:47,279
true so I think the type dev tag can

573
00:22:47,279 --> 00:22:48,959
allow you to do that so you can like

574
00:22:48,959 --> 00:22:53,099
type dev string as postal code and I'm

575
00:22:53,099 --> 00:22:54,809
not sure if the static static checks are

576
00:22:54,809 --> 00:22:57,749
going to be able to catch like you you

577
00:22:57,749 --> 00:22:59,069
calling this incorrectly but at least

578
00:22:59,069 --> 00:23:00,899
you will have this information written

579
00:23:00,899 --> 00:23:02,309
in the code for use to you that you can

580
00:23:02,309 --> 00:23:13,620
see that this takes a postal code hello

581
00:23:13,630 --> 00:23:17,360
hey hey so uh given that the J stock is

582
00:23:17,360 --> 00:23:19,039
completely unrelated to the code that

583
00:23:19,039 --> 00:23:21,530
you command so you can synthesize a

584
00:23:21,530 --> 00:23:24,020
function synthesize properties etc how

585
00:23:24,020 --> 00:23:27,380
how do you think editors should react

586
00:23:27,380 --> 00:23:32,110
when you try to you know mock them or

587
00:23:32,110 --> 00:23:33,470
fool them

588
00:23:33,470 --> 00:23:34,700
like you declare a property doesn't

589
00:23:34,700 --> 00:23:36,679
exist or contradicts what you write in

590
00:23:36,679 --> 00:23:39,650
the in the function this is for instance

591
00:23:39,650 --> 00:23:43,929
this web from autocorrect this suggests

592
00:23:43,929 --> 00:23:48,350
so actually for something like object

593
00:23:48,350 --> 00:23:49,970
attributes we do not so if you are

594
00:23:49,970 --> 00:23:52,070
declaring it an attribute that is not

595
00:23:52,070 --> 00:23:53,630
explicitly defined anywhere in your code

596
00:23:53,630 --> 00:23:55,190
we do not try to highlight this as an

597
00:23:55,190 --> 00:23:58,220
error so we simply we assume that you

598
00:23:58,220 --> 00:23:59,929
created somehow in some way that we do

599
00:23:59,929 --> 00:24:01,970
not understand and so like the if you

600
00:24:01,970 --> 00:24:03,380
declare that the attribute is there then

601
00:24:03,380 --> 00:24:05,390
it's there for something like a fashion

602
00:24:05,390 --> 00:24:07,429
function parameter if you for example if

603
00:24:07,429 --> 00:24:09,590
you're in the if you have a parameter

604
00:24:09,590 --> 00:24:11,720
that if you document a parameter that

605
00:24:11,720 --> 00:24:13,610
the function does not actually take then

606
00:24:13,610 --> 00:24:14,690
we do highlight this as a warning

607
00:24:14,690 --> 00:24:15,950
because most likely you made a mistake

608
00:24:15,950 --> 00:24:18,020
when you rename the parameter and forgot

609
00:24:18,020 --> 00:24:19,340
to update the J stock or something like

610
00:24:19,340 --> 00:24:24,510
that in this case we do highlight this

611
00:24:24,520 --> 00:24:27,500
anyone else ultimate tree is here so if

612
00:24:27,500 --> 00:24:28,580
you've any more questions you can just

613
00:24:28,580 --> 00:24:30,710
come up and ask him we're breaking now

614
00:24:30,710 --> 00:24:33,409
for an hour it's lunchtime thank you for

615
00:24:33,409 --> 00:24:33,830
attention

616
00:24:33,830 --> 00:24:43,060
thanks again

