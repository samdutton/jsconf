1
00:00:00,320 --> 00:00:02,070

[Music]

2
00:00:02,070 --> 00:00:03,840
[Applause]

3
00:00:03,840 --> 00:00:05,660
[Music]

4
00:00:05,660 --> 00:00:07,410
[Applause]

5
00:00:07,410 --> 00:00:09,280
[Music]

6
00:00:09,280 --> 00:00:11,020
[Applause]

7
00:00:11,020 --> 00:00:12,780
[Music]

8
00:00:12,780 --> 00:00:16,860
[Applause]

9
00:00:16,870 --> 00:00:27,470
[Music]

10
00:00:27,480 --> 00:00:29,770
can everybody hear me okay good I was

11
00:00:29,770 --> 00:00:31,410
worried the mic was not working okay

12
00:00:31,410 --> 00:00:33,430
well thank you everybody for coming to

13
00:00:33,430 --> 00:00:37,510
see my talk a little bit so slight

14
00:00:37,510 --> 00:00:39,430
change of pace you'll see a few themes

15
00:00:39,430 --> 00:00:41,770
in it but the main question I want to

16
00:00:41,770 --> 00:00:44,530
answer and unfortunately I missed boss's

17
00:00:44,530 --> 00:00:46,270
talk so if some of this is repetitive I

18
00:00:46,270 --> 00:00:47,980
was right here just let me know

19
00:00:47,980 --> 00:00:50,200
it was repetitive it's what's in your je

20
00:00:50,200 --> 00:00:52,150
s a little bit about myself really

21
00:00:52,150 --> 00:00:54,010
quickly I'm a Technical Evangelist and

22
00:00:54,010 --> 00:00:56,140
epidemics um prior worked some

23
00:00:56,140 --> 00:00:57,430
distributed systems companies like

24
00:00:57,430 --> 00:01:00,190
mesosphere Red Hat and they keep me out

25
00:01:00,190 --> 00:01:01,600
of production now I had some very

26
00:01:01,600 --> 00:01:03,730
large-scale corruption issues and

27
00:01:03,730 --> 00:01:05,710
different types of databases and I'm not

28
00:01:05,710 --> 00:01:07,600
good at math so slider calculations if

29
00:01:07,600 --> 00:01:08,920
you're familiar with them I'm not I

30
00:01:08,920 --> 00:01:11,020
don't know you divide by 8 divided by 16

31
00:01:11,020 --> 00:01:12,640
it's kind of the same thing to me so

32
00:01:12,640 --> 00:01:15,700
what's not so what are we gonna learn

33
00:01:15,700 --> 00:01:16,770
today

34
00:01:16,770 --> 00:01:19,330
pretty interactive quick quick show of

35
00:01:19,330 --> 00:01:21,400
hands if you can't caught Patras talk

36
00:01:21,400 --> 00:01:23,830
about extensions how many of you

37
00:01:23,830 --> 00:01:26,229
actually want NPM install the extension

38
00:01:26,229 --> 00:01:28,330
if you're in the talk did anybody try

39
00:01:28,330 --> 00:01:31,060
that right after so we okay a little

40
00:01:31,060 --> 00:01:33,280
less than I expected but the next

41
00:01:33,280 --> 00:01:34,810
question would be you know did you do it

42
00:01:34,810 --> 00:01:37,900
on your work laptop right ah see and say

43
00:01:37,900 --> 00:01:39,610
what are some takeaways that we're gonna

44
00:01:39,610 --> 00:01:42,430
learn about today is that don't add

45
00:01:42,430 --> 00:01:44,409
things willy-nilly all right and I'm

46
00:01:44,409 --> 00:01:45,640
gonna keep this is gonna be very clear

47
00:01:45,640 --> 00:01:47,470
do not add things willy-nilly into your

48
00:01:47,470 --> 00:01:49,780
project I've been bit in a few times and

49
00:01:49,780 --> 00:01:50,950
some of my peers have been bit in a few

50
00:01:50,950 --> 00:01:52,900
times also a lot of my a lot of my

51
00:01:52,900 --> 00:01:56,619
background I was a je a Java like a cor

52
00:01:56,619 --> 00:01:58,810
distributed systems engineer for on

53
00:01:58,810 --> 00:02:00,909
several Java projects and what you know

54
00:02:00,909 --> 00:02:02,560
one transitioning into node what were

55
00:02:02,560 --> 00:02:04,990
some analogies I was missing and looking

56
00:02:04,990 --> 00:02:06,549
for and really it shows the importance

57
00:02:06,549 --> 00:02:08,349
of this conference and how quickly the

58
00:02:08,349 --> 00:02:11,079
Java Script your systems changing and

59
00:02:11,079 --> 00:02:13,299
also what are the equivalents right so

60
00:02:13,299 --> 00:02:16,090
you know Java Java fanboy here like hey

61
00:02:16,090 --> 00:02:17,680
if you're preaching about all this

62
00:02:17,680 --> 00:02:20,050
what's you know what's going on and so

63
00:02:20,050 --> 00:02:22,420
you thought this was a JavaScript

64
00:02:22,420 --> 00:02:24,250
conference right what is Duke doing

65
00:02:24,250 --> 00:02:28,240
the screen in Java so a lot if you look

66
00:02:28,240 --> 00:02:30,490
at the lineage of the Java language of

67
00:02:30,490 --> 00:02:33,520
je from when it came out in 1999 to now

68
00:02:33,520 --> 00:02:35,650
is that what really pushed the language

69
00:02:35,650 --> 00:02:37,750
Ford was a governing body right so if

70
00:02:37,750 --> 00:02:39,010
there was a change have a very tight

71
00:02:39,010 --> 00:02:41,560
structure in the Java language and so if

72
00:02:41,560 --> 00:02:42,970
there was a change they have something

73
00:02:42,970 --> 00:02:44,620
called a JCP a Java community of

74
00:02:44,620 --> 00:02:46,209
practice and people would vote on future

75
00:02:46,209 --> 00:02:48,760
editions the closest thing that

76
00:02:48,760 --> 00:02:51,910
JavaScript has is the ECMA right and so

77
00:02:51,910 --> 00:02:55,420
JavaScript aka ECMAScript is the

78
00:02:55,420 --> 00:02:56,440
governing body in the standards

79
00:02:56,440 --> 00:02:57,820
organization and so as we have current

80
00:02:57,820 --> 00:02:58,840
road issues I think we remember just an

81
00:02:58,840 --> 00:03:02,530
eight right now or nine and 2018 is that

82
00:03:02,530 --> 00:03:03,700
that's that governing body right so

83
00:03:03,700 --> 00:03:05,170
without a governing particular strong

84
00:03:05,170 --> 00:03:06,940
governing body how do you get standards

85
00:03:06,940 --> 00:03:08,739
into the language and so let's take a

86
00:03:08,739 --> 00:03:11,800
look at what would be you do be a common

87
00:03:11,800 --> 00:03:13,420
theme here if you're going to start

88
00:03:13,420 --> 00:03:15,670
building a more distributed system your

89
00:03:15,670 --> 00:03:17,800
npm install' is gonna get quite you know

90
00:03:17,800 --> 00:03:20,590
quite big right so what are some things

91
00:03:20,590 --> 00:03:22,480
okay so as a core services developer

92
00:03:22,480 --> 00:03:24,130
that I am what are some things that I

93
00:03:24,130 --> 00:03:27,400
expect in my particular packages or how

94
00:03:27,400 --> 00:03:29,019
my application interacts and so

95
00:03:29,019 --> 00:03:31,450
transactions right so the the common

96
00:03:31,450 --> 00:03:34,120
myth that server-side JavaScript it's

97
00:03:34,120 --> 00:03:35,799
not good in transactions actually

98
00:03:35,799 --> 00:03:37,420
because of the ecosystem it's not true

99
00:03:37,420 --> 00:03:38,380
anymore if you think about what a

100
00:03:38,380 --> 00:03:40,150
transaction is pretend I'm dealing out

101
00:03:40,150 --> 00:03:41,590
money to people in the room okay did you

102
00:03:41,590 --> 00:03:43,780
did I give you money yes no that's what

103
00:03:43,780 --> 00:03:45,519
most people kind of pop in there how

104
00:03:45,519 --> 00:03:46,660
about transaction is but if you take a

105
00:03:46,660 --> 00:03:48,880
look at how an actual transaction

106
00:03:48,880 --> 00:03:50,350
actually occurs or what actually

107
00:03:50,350 --> 00:03:51,280
transaction means when you look at

108
00:03:51,280 --> 00:03:53,410
system boundaries applications kind of

109
00:03:53,410 --> 00:03:54,880
look like this right so it's more than

110
00:03:54,880 --> 00:03:56,799
this front-end we might be taking it

111
00:03:56,799 --> 00:03:58,690
data from sensors you might be taking in

112
00:03:58,690 --> 00:04:01,120
data from other users or inputs there

113
00:04:01,120 --> 00:04:03,370
might be a message broker attached to it

114
00:04:03,370 --> 00:04:05,920
there's definitely databases that are

115
00:04:05,920 --> 00:04:07,090
attached to it and all of these systems

116
00:04:07,090 --> 00:04:09,760
have to have to interact with each other

117
00:04:09,760 --> 00:04:12,519
and so what what one of the the core

118
00:04:12,519 --> 00:04:14,459
differences between the Java ecosystem

119
00:04:14,459 --> 00:04:16,359
well I would call it one of the top

120
00:04:16,359 --> 00:04:17,829
three things that put Java in the

121
00:04:17,829 --> 00:04:19,540
enterprise it something called JTA under

122
00:04:19,540 --> 00:04:21,850
the Java transaction API and what the

123
00:04:21,850 --> 00:04:24,310
Java transaction API is and there is an

124
00:04:24,310 --> 00:04:25,840
ogee a circle instance but what the Java

125
00:04:25,840 --> 00:04:28,990
transaction API is is that it allows

126
00:04:28,990 --> 00:04:31,360
even non Java clients right so you go

127
00:04:31,360 --> 00:04:33,039
database and they were to see they have

128
00:04:33,039 --> 00:04:34,810
the ability to do a rollback in a commit

129
00:04:34,810 --> 00:04:36,010
right so you can even participate in

130
00:04:36,010 --> 00:04:37,600
something called X a transaction is

131
00:04:37,600 --> 00:04:39,700
every transaction so if you go back to

132
00:04:39,700 --> 00:04:42,790
our diagram here we're crossing several

133
00:04:42,790 --> 00:04:44,410
transaction boundaries we're interacting

134
00:04:44,410 --> 00:04:47,020
with systems JTA is what put it on the

135
00:04:47,020 --> 00:04:48,970
map but we are at a JavaScript

136
00:04:48,970 --> 00:04:51,040
conference right so what one of how in

137
00:04:51,040 --> 00:04:53,230
JavaScript land that we have and so a

138
00:04:53,230 --> 00:04:55,120
lot of times this is delegated to the

139
00:04:55,120 --> 00:04:57,130
actual database right and so a lot of

140
00:04:57,130 --> 00:04:58,510
the concurrency or a lot of the

141
00:04:58,510 --> 00:05:00,100
transaction handling it's actually

142
00:05:00,100 --> 00:05:01,900
delegated to the database and why is it

143
00:05:01,900 --> 00:05:04,840
delegated to the database is that so if

144
00:05:04,840 --> 00:05:05,980
you take a look at how your work is

145
00:05:05,980 --> 00:05:08,080
actually distributed and here's a

146
00:05:08,080 --> 00:05:09,400
perfect example a node you might have

147
00:05:09,400 --> 00:05:12,220
multiple instances of uh nodes let's say

148
00:05:12,220 --> 00:05:13,810
a client or a node a piece of server

149
00:05:13,810 --> 00:05:15,700
infrastructure but the incoming

150
00:05:15,700 --> 00:05:18,190
transactions the the incoming a let's

151
00:05:18,190 --> 00:05:19,570
say partitions are all managed by

152
00:05:19,570 --> 00:05:21,280
database right so did someone pay you

153
00:05:21,280 --> 00:05:23,410
money well yes we have a record here in

154
00:05:23,410 --> 00:05:27,010
the database and so just skip skipping

155
00:05:27,010 --> 00:05:28,330
along a little bit about you know what's

156
00:05:28,330 --> 00:05:30,250
just why this is important you know

157
00:05:30,250 --> 00:05:33,160
captain consistency availability

158
00:05:33,160 --> 00:05:35,080
partition tolerance again you know core

159
00:05:35,080 --> 00:05:37,000
services developer you're looking at

160
00:05:37,000 --> 00:05:41,550
these particular things now in Java land

161
00:05:41,550 --> 00:05:43,860
there's so there's just another

162
00:05:43,860 --> 00:05:46,090
difference in how Java Script is handled

163
00:05:46,090 --> 00:05:48,880
is in threads right and so in the drama

164
00:05:48,880 --> 00:05:50,860
the Java rendition there's a concept of

165
00:05:50,860 --> 00:05:52,150
pools right so if you have an incoming

166
00:05:52,150 --> 00:05:55,030
request you have the ability to pull

167
00:05:55,030 --> 00:05:57,100
those threads so the JVM gets bigger and

168
00:05:57,100 --> 00:05:59,680
bigger and bigger not like in the and

169
00:05:59,680 --> 00:06:01,630
nodejs it's Agnon on blocking thread or

170
00:06:01,630 --> 00:06:02,740
they have threatened and the covers out

171
00:06:02,740 --> 00:06:04,300
the integer written but in the

172
00:06:04,300 --> 00:06:05,830
JavaScript rendition is something called

173
00:06:05,830 --> 00:06:07,300
promise right so how many people use

174
00:06:07,300 --> 00:06:08,790
promises in here before

175
00:06:08,790 --> 00:06:11,050
okay good seems like there's most people

176
00:06:11,050 --> 00:06:12,310
use promises the promises were something

177
00:06:12,310 --> 00:06:14,830
that was new to me a few years ago and

178
00:06:14,830 --> 00:06:16,330
that again was something that was

179
00:06:16,330 --> 00:06:19,120
blocking me from doing doing development

180
00:06:19,120 --> 00:06:20,500
that's say okay we can't you know we

181
00:06:20,500 --> 00:06:21,760
don't have ability to call back but for

182
00:06:21,760 --> 00:06:22,840
folks who haven't used a promise

183
00:06:22,840 --> 00:06:25,570
basically what I promise is you can

184
00:06:25,570 --> 00:06:27,250
either succeed or fail at one time right

185
00:06:27,250 --> 00:06:28,900
and so it's like a callback on steroids

186
00:06:28,900 --> 00:06:33,700
and a very particular another of large

187
00:06:33,700 --> 00:06:36,010
promise package is Bluebird jazz so

188
00:06:36,010 --> 00:06:38,980
Bluebird jeaious allows you to had hop

189
00:06:38,980 --> 00:06:40,450
types as callbacks is anybody in here

190
00:06:40,450 --> 00:06:41,730
use Bluebird

191
00:06:41,730 --> 00:06:45,070
Wow good very good it was again this is

192
00:06:45,070 --> 00:06:46,720
new to me a year ago but the reason why

193
00:06:46,720 --> 00:06:47,650
I bring this up in these particular

194
00:06:47,650 --> 00:06:49,810
features up is that as we're going along

195
00:06:49,810 --> 00:06:51,249
this journey okay how do I

196
00:06:51,249 --> 00:06:53,199
have you know how do I have a proper

197
00:06:53,199 --> 00:06:55,419
promise if I happen in traffic database

198
00:06:55,419 --> 00:06:57,249
another client and all this entire time

199
00:06:57,249 --> 00:07:00,369
we keep adding things into our package

200
00:07:00,369 --> 00:07:01,919
of JSON right so what ends up happening

201
00:07:01,919 --> 00:07:04,089
eventually is that this package keeps

202
00:07:04,089 --> 00:07:05,469
growing grow so keep that in the back of

203
00:07:05,469 --> 00:07:08,469
your head when going along what kind of

204
00:07:08,469 --> 00:07:10,269
last about you know how work just

205
00:07:10,269 --> 00:07:12,459
actually distributed well and why is

206
00:07:12,459 --> 00:07:13,569
this problem becoming even more

207
00:07:13,569 --> 00:07:15,039
important is that if you take a look at

208
00:07:15,039 --> 00:07:16,179
where your applications are actually

209
00:07:16,179 --> 00:07:18,789
headed comparing it to a Java model it

210
00:07:18,789 --> 00:07:20,309
actually looks like this right so no

211
00:07:20,309 --> 00:07:22,209
more and more out if you're looking at

212
00:07:22,209 --> 00:07:23,499
JavaScript or distributed application

213
00:07:23,499 --> 00:07:25,599
there's way more renditions of your

214
00:07:25,599 --> 00:07:27,189
application out there so if I taking

215
00:07:27,189 --> 00:07:29,379
okay I have a java application that

216
00:07:29,379 --> 00:07:31,360
might be deployed one place your

217
00:07:31,360 --> 00:07:33,459
JavaScript application as here so the

218
00:07:33,459 --> 00:07:34,929
isolation is handled by the container

219
00:07:34,929 --> 00:07:37,089
right it's distributed multiple places

220
00:07:37,089 --> 00:07:39,309
so as your application gets more and

221
00:07:39,309 --> 00:07:41,589
more dependencies it actually goes more

222
00:07:41,589 --> 00:07:43,899
places taking a look at some more of

223
00:07:43,899 --> 00:07:46,209
these dependencies again so what-what

224
00:07:46,209 --> 00:07:47,739
would be something that a core Java

225
00:07:47,739 --> 00:07:49,899
developer be looking for debugging and

226
00:07:49,899 --> 00:07:53,229
tracing right so if I was in Java land

227
00:07:53,229 --> 00:07:55,169
you can have aid distributed tracer and

228
00:07:55,169 --> 00:07:57,809
part of the distribute tracing is

229
00:07:57,809 --> 00:07:59,679
instrumentation also so you can

230
00:07:59,679 --> 00:08:00,849
introspect the bytecode

231
00:08:00,849 --> 00:08:03,339
but what about in the nodejs land right

232
00:08:03,339 --> 00:08:05,979
about the dough's equivalents one of my

233
00:08:05,979 --> 00:08:07,779
favorite projects out there right now is

234
00:08:07,779 --> 00:08:09,639
something called Jaeger I like because

235
00:08:09,639 --> 00:08:11,529
of the name I thought I'd run me the

236
00:08:11,529 --> 00:08:13,029
alcohol race I was like oh yeah this is

237
00:08:13,029 --> 00:08:15,219
a really cool project but a little bit

238
00:08:15,219 --> 00:08:17,559
about Jaeger anybody familiar is again

239
00:08:17,559 --> 00:08:19,119
pull I love to pull the audience anybody

240
00:08:19,119 --> 00:08:22,689
who's used Jaeger in here before or okay

241
00:08:22,689 --> 00:08:24,869
so that I can add some value here so

242
00:08:24,869 --> 00:08:26,919
vaguer is a cloud native compute

243
00:08:26,919 --> 00:08:29,019
foundation project it came from uber and

244
00:08:29,019 --> 00:08:32,110
so over it if you look at how their

245
00:08:32,110 --> 00:08:34,209
applications written maybe 2008 it was

246
00:08:34,209 --> 00:08:35,979
very heavy in Java but what as they

247
00:08:35,979 --> 00:08:37,899
became a bigger organization they

248
00:08:37,899 --> 00:08:40,209
clearly became more polyglot and so they

249
00:08:40,209 --> 00:08:41,379
have to support other languages like

250
00:08:41,379 --> 00:08:44,350
Python or especially nodejs now and so

251
00:08:44,350 --> 00:08:46,540
one of the limiting factors for them was

252
00:08:46,540 --> 00:08:47,920
the ability to get trace information

253
00:08:47,920 --> 00:08:49,990
from their nodejs applications and so

254
00:08:49,990 --> 00:08:52,600
you can act up I'm wrong suggest taking

255
00:08:52,600 --> 00:08:53,589
a look at Jaeger if you have a

256
00:08:53,589 --> 00:08:55,059
distributed application or let's say a

257
00:08:55,059 --> 00:08:57,430
application of scale is that you can

258
00:08:57,430 --> 00:08:59,319
actually implement a Jaeger client to be

259
00:08:59,319 --> 00:09:02,110
included in your node application Oh in

260
00:09:02,110 --> 00:09:05,020
your node application and so you can

261
00:09:05,020 --> 00:09:07,210
interact with traps right so okay part

262
00:09:07,210 --> 00:09:08,800
of the trouble when I was making single

263
00:09:08,800 --> 00:09:10,660
page or known applications in the

264
00:09:10,660 --> 00:09:12,550
beginning was the hooks for us to get

265
00:09:12,550 --> 00:09:14,950
user data out was tremendous it took as

266
00:09:14,950 --> 00:09:16,180
much horsepower for us to instrument the

267
00:09:16,180 --> 00:09:17,650
application that it was the build

268
00:09:17,650 --> 00:09:19,300
features a lot of us I was working in

269
00:09:19,300 --> 00:09:21,100
the federal sector for this and a

270
00:09:21,100 --> 00:09:22,540
project like eager with really important

271
00:09:22,540 --> 00:09:24,280
that help captures specific information

272
00:09:24,280 --> 00:09:28,270
and now getting into kind of the gist of

273
00:09:28,270 --> 00:09:29,590
the talk right so okay why is this guy

274
00:09:29,590 --> 00:09:31,510
babbling a lot about Java the whole time

275
00:09:31,510 --> 00:09:33,700
it gets to what I call the fog of

276
00:09:33,700 --> 00:09:35,710
development and what is a fog of

277
00:09:35,710 --> 00:09:37,270
development let's all pretend we all

278
00:09:37,270 --> 00:09:39,820
started a new project right and so we

279
00:09:39,820 --> 00:09:42,490
the very first time we run now spotted a

280
00:09:42,490 --> 00:09:44,200
few folks about this earlier today we

281
00:09:44,200 --> 00:09:45,550
started a new project today we're all in

282
00:09:45,550 --> 00:09:47,950
the same journey and we have to learn

283
00:09:47,950 --> 00:09:51,970
about how is our project structured went

284
00:09:51,970 --> 00:09:53,410
the first the very first time I did no

285
00:09:53,410 --> 00:09:54,910
development but I think there was like

286
00:09:54,910 --> 00:09:56,920
300 packages in the package.json I was

287
00:09:56,920 --> 00:09:58,780
like what is this how do I even go about

288
00:09:58,780 --> 00:10:01,210
figuring out what's what and this is in

289
00:10:01,210 --> 00:10:03,070
the fog of development right people is

290
00:10:03,070 --> 00:10:04,690
kind of willy-nilly again don't

291
00:10:04,690 --> 00:10:07,180
willy-nilly include things we're adding

292
00:10:07,180 --> 00:10:08,770
package to the package.json or we didn't

293
00:10:08,770 --> 00:10:09,880
know why certain things weren't

294
00:10:09,880 --> 00:10:11,290
resolving like okay go ahead and add

295
00:10:11,290 --> 00:10:13,180
those other packages well until we beat

296
00:10:13,180 --> 00:10:16,210
it together to sort of work but

297
00:10:16,210 --> 00:10:18,040
comparing so let's look at the problem

298
00:10:18,040 --> 00:10:19,840
again I missed some of AUSA's talk so

299
00:10:19,840 --> 00:10:21,790
I'm gonna talk about how NPM resolves

300
00:10:21,790 --> 00:10:23,590
things if any of that's changed in 2018

301
00:10:23,590 --> 00:10:26,040
just tell me I missed part of his talk

302
00:10:26,040 --> 00:10:28,450
if you look at what what I call

303
00:10:28,450 --> 00:10:29,560
dependency health so if you've been

304
00:10:29,560 --> 00:10:31,570
working in software for a while you'll

305
00:10:31,570 --> 00:10:33,250
see that oh you know what do you

306
00:10:33,250 --> 00:10:35,350
definitely include things that you don't

307
00:10:35,350 --> 00:10:37,240
have that in your software project

308
00:10:37,240 --> 00:10:39,130
you've written so quite a quote I didn't

309
00:10:39,130 --> 00:10:40,420
write half of these things I included

310
00:10:40,420 --> 00:10:43,150
them as dependencies dependency hell in

311
00:10:43,150 --> 00:10:45,280
Java and there is a a particular

312
00:10:45,280 --> 00:10:46,750
hierarchy that you have so this this is

313
00:10:46,750 --> 00:10:49,600
a typical Java project but there is a

314
00:10:49,600 --> 00:10:51,400
hierarchy that the Java bootloader will

315
00:10:51,400 --> 00:10:53,560
take to resolve class resolution or

316
00:10:53,560 --> 00:10:57,640
class conflicts and not so much in the

317
00:10:57,640 --> 00:10:59,820
NPM Lance if you take a look at what

318
00:10:59,820 --> 00:11:01,960
mental picture this is what it looks

319
00:11:01,960 --> 00:11:05,260
like in Java typical trace what it looks

320
00:11:05,260 --> 00:11:07,180
like for real estate but a jquery

321
00:11:07,180 --> 00:11:08,980
rendition it's actually very complicated

322
00:11:08,980 --> 00:11:11,620
the packages are very incent you another

323
00:11:11,620 --> 00:11:13,060
that let's say you're working on

324
00:11:13,060 --> 00:11:15,400
particular this is actually a profile of

325
00:11:15,400 --> 00:11:17,440
an application that oh we call jQuery

326
00:11:17,440 --> 00:11:18,520
eight times or there

327
00:11:18,520 --> 00:11:19,960
eight renditions of the package in there

328
00:11:19,960 --> 00:11:22,660
and so this really loose itself to some

329
00:11:22,660 --> 00:11:25,360
very funky problems that you have and so

330
00:11:25,360 --> 00:11:27,430
this might be a little bit cliche to say

331
00:11:27,430 --> 00:11:30,670
here but and anybody in the room runs

332
00:11:30,670 --> 00:11:31,930
this problem so you you work on an

333
00:11:31,930 --> 00:11:33,700
application and in the JavaScript land

334
00:11:33,700 --> 00:11:36,370
its first to load will win right so when

335
00:11:36,370 --> 00:11:38,650
the ast loads it's actually the first to

336
00:11:38,650 --> 00:11:40,630
load that will win so let's say in a

337
00:11:40,630 --> 00:11:43,000
this really gets them to share around if

338
00:11:43,000 --> 00:11:44,440
it worked on your computer versus at

339
00:11:44,440 --> 00:11:46,480
work it doesn't work in production if I

340
00:11:46,480 --> 00:11:47,770
was writing a particular package or a

341
00:11:47,770 --> 00:11:50,920
particularly on my desktop it might have

342
00:11:50,920 --> 00:11:52,510
certain performance implications that oh

343
00:11:52,510 --> 00:11:54,160
you know what my my first package loaded

344
00:11:54,160 --> 00:11:57,010
before my second package enough let's

345
00:11:57,010 --> 00:11:58,630
say my first package had jQuery one

346
00:11:58,630 --> 00:12:00,100
point two point four and there's some

347
00:12:00,100 --> 00:12:02,110
other renditions had one point three you

348
00:12:02,110 --> 00:12:03,460
might start getting inconsistent states

349
00:12:03,460 --> 00:12:05,290
right saying oh we don't know exactly

350
00:12:05,290 --> 00:12:07,390
why this particular function failed in

351
00:12:07,390 --> 00:12:09,610
production because it was working fine

352
00:12:09,610 --> 00:12:11,470
on my laptop but what it's really hard

353
00:12:11,470 --> 00:12:14,020
to debug like oh there was a transitive

354
00:12:14,020 --> 00:12:15,700
dependency to another version of jQuery

355
00:12:15,700 --> 00:12:17,800
that lookout loaded in the browser first

356
00:12:17,800 --> 00:12:19,240
and that's actually something very very

357
00:12:19,240 --> 00:12:20,140
hard to tell

358
00:12:20,140 --> 00:12:22,750
and so like answering this very basic

359
00:12:22,750 --> 00:12:25,180
question you know what is in your npm

360
00:12:25,180 --> 00:12:30,100
install so so what are some things that

361
00:12:30,100 --> 00:12:31,990
we can do or what are some things we can

362
00:12:31,990 --> 00:12:34,420
take immediately as teams to start

363
00:12:34,420 --> 00:12:36,700
addressing this particular sue what's in

364
00:12:36,700 --> 00:12:38,710
your npm install so the first thing is

365
00:12:38,710 --> 00:12:41,740
is hygiene right so unfortunately Tyler

366
00:12:41,740 --> 00:12:43,600
couldn't make the talk he was in talking

367
00:12:43,600 --> 00:12:44,890
so some of this will overlap with

368
00:12:44,890 --> 00:12:47,800
Tyler's talk but he's not trying to

369
00:12:47,800 --> 00:12:49,090
steal so much a his sundar from earlier

370
00:12:49,090 --> 00:12:51,250
is that you what answering this

371
00:12:51,250 --> 00:12:53,020
infringing question it really comes down

372
00:12:53,020 --> 00:12:55,030
to Deb practices in def hygiene right so

373
00:12:55,030 --> 00:12:57,280
the JavaScript ecosystem is it's not

374
00:12:57,280 --> 00:13:00,610
immune to certain types of attacks like

375
00:13:00,610 --> 00:13:02,950
typos squatting you know let's say I

376
00:13:02,950 --> 00:13:05,410
made a particular package called jja why

377
00:13:05,410 --> 00:13:07,570
Cory like a name and someone mistyped

378
00:13:07,570 --> 00:13:10,090
that I can really inject nefarious items

379
00:13:10,090 --> 00:13:12,820
into your NPM install but first thing is

380
00:13:12,820 --> 00:13:14,020
really understand where your particular

381
00:13:14,020 --> 00:13:16,450
package just came from and this this is

382
00:13:16,450 --> 00:13:17,650
pretty true you know when you read an

383
00:13:17,650 --> 00:13:19,360
emptyness all for the first time when we

384
00:13:19,360 --> 00:13:21,630
look on three well I got 300 300 75

385
00:13:21,630 --> 00:13:24,610
packages is really asking some questions

386
00:13:24,610 --> 00:13:26,650
why right so it goes going back to dev

387
00:13:26,650 --> 00:13:28,570
hygiene hey why are these particular

388
00:13:28,570 --> 00:13:30,400
packages in there but a lot of time to

389
00:13:30,400 --> 00:13:32,170
be coming to projects after the fact

390
00:13:32,170 --> 00:13:33,760
right and it becomes really hard to

391
00:13:33,760 --> 00:13:35,410
answer that question why did someone

392
00:13:35,410 --> 00:13:36,910
include this why did someone not include

393
00:13:36,910 --> 00:13:39,190
this why why is there a JSON file you

394
00:13:39,190 --> 00:13:40,990
know 400 lines long to even do at MPM

395
00:13:40,990 --> 00:13:45,220
install I gets very difficult the first

396
00:13:45,220 --> 00:13:46,210
thing is actually getting a bill of

397
00:13:46,210 --> 00:13:47,440
materials right for that particular

398
00:13:47,440 --> 00:13:48,970
project so if you can Javal and you can

399
00:13:48,970 --> 00:13:50,350
look at the dependency tree or look at

400
00:13:50,350 --> 00:13:52,180
like a maven install for the coordinates

401
00:13:52,180 --> 00:13:54,910
in the npm install' again understanding

402
00:13:54,910 --> 00:13:56,080
those transit dependencies to get a

403
00:13:56,080 --> 00:13:58,930
little bit harder harder to do you know

404
00:13:58,930 --> 00:14:03,460
let's see here and so going back to you

405
00:14:03,460 --> 00:14:04,930
know what's actually in your npm install

406
00:14:04,930 --> 00:14:07,330
the profiling becomes extremely

407
00:14:07,330 --> 00:14:08,860
important does anybody use any sort of

408
00:14:08,860 --> 00:14:10,570
profiler but they're in JavaScript

409
00:14:10,570 --> 00:14:13,510
packages or so a few people use a

410
00:14:13,510 --> 00:14:15,490
profile I got it yeah what's really

411
00:14:15,490 --> 00:14:17,140
important when the profile profiler can

412
00:14:17,140 --> 00:14:18,760
do imagine go back to you just started

413
00:14:18,760 --> 00:14:20,440
on that particular project it's actually

414
00:14:20,440 --> 00:14:22,330
looking at the culture is right saying

415
00:14:22,330 --> 00:14:24,910
okay let's figure out exactly what's

416
00:14:24,910 --> 00:14:26,770
being used where cuz if what happens and

417
00:14:26,770 --> 00:14:29,290
it might be it's kind of a delegate that

418
00:14:29,290 --> 00:14:31,060
it's easy to include certain things

419
00:14:31,060 --> 00:14:32,560
right it's a JavaScript it's plain text

420
00:14:32,560 --> 00:14:34,440
so I can include anything on the fly

421
00:14:34,440 --> 00:14:37,210
really taking a look at into deeper

422
00:14:37,210 --> 00:14:39,040
context what am I actually including

423
00:14:39,040 --> 00:14:40,540
right what does this functionality and

424
00:14:40,540 --> 00:14:44,110
having this maybe a go going back to

425
00:14:44,110 --> 00:14:46,000
practical experience oh you know part of

426
00:14:46,000 --> 00:14:47,380
our stand-up meetings or dead meetings

427
00:14:47,380 --> 00:14:49,180
anytime you're introducing a particular

428
00:14:49,180 --> 00:14:52,240
change is why you're introducing that

429
00:14:52,240 --> 00:14:53,950
particular change or why why do we need

430
00:14:53,950 --> 00:14:55,210
it because you can actually introduce

431
00:14:55,210 --> 00:14:57,580
yourself to undo risk right so from a

432
00:14:57,580 --> 00:14:58,990
license standpoint am i including

433
00:14:58,990 --> 00:15:00,400
something that has a nefarious license

434
00:15:00,400 --> 00:15:01,870
am i including something that has a

435
00:15:01,870 --> 00:15:05,170
particular vulnerability the big one and

436
00:15:05,170 --> 00:15:07,540
no js' was eastland so they have a type

437
00:15:07,540 --> 00:15:09,520
of squad or sat there and was able to

438
00:15:09,520 --> 00:15:11,500
intercept and so that that particular

439
00:15:11,500 --> 00:15:13,750
information is key and I think there's a

440
00:15:13,750 --> 00:15:15,190
lot of work that the NPM community is

441
00:15:15,190 --> 00:15:17,730
doing around that every round that arena

442
00:15:17,730 --> 00:15:21,130
let's see here so some other tooling

443
00:15:21,130 --> 00:15:24,100
that you can use when if something quick

444
00:15:24,100 --> 00:15:25,450
and easy and dirty you can use for free

445
00:15:25,450 --> 00:15:27,670
I don't have a slide for this but it's

446
00:15:27,670 --> 00:15:28,060
called

447
00:15:28,060 --> 00:15:29,680
a wasp but the open web app security

448
00:15:29,680 --> 00:15:31,540
group they have something called

449
00:15:31,540 --> 00:15:33,490
dependency checker right so it'll

450
00:15:33,490 --> 00:15:35,590
actually introspect your package JSON

451
00:15:35,590 --> 00:15:37,900
and give you a list of all in appendices

452
00:15:37,900 --> 00:15:39,850
so if your team's not using a wasp's

453
00:15:39,850 --> 00:15:40,900
dependency checker that would be

454
00:15:40,900 --> 00:15:42,640
something I would highly recommend it

455
00:15:42,640 --> 00:15:43,810
looks I'll give you a printout of all

456
00:15:43,810 --> 00:15:45,040
the dependencies that you have and also

457
00:15:45,040 --> 00:15:45,939
something

458
00:15:45,939 --> 00:15:48,669
for free and that they actually tie back

459
00:15:48,669 --> 00:15:52,239
the package information to mitre CVE so

460
00:15:52,239 --> 00:15:54,669
if I see a CVE show of hands like if you

461
00:15:54,669 --> 00:15:57,129
know what a CBE is so okay you may be

462
00:15:57,129 --> 00:16:00,609
better so more education so a CVS it's

463
00:16:00,609 --> 00:16:02,169
something called a common vulnerability

464
00:16:02,169 --> 00:16:04,809
enumeration right and so what a CVA is

465
00:16:04,809 --> 00:16:08,799
is that if a defect or a particular

466
00:16:08,799 --> 00:16:10,179
vulnerabilities found there's a way to

467
00:16:10,179 --> 00:16:12,249
report it there's certain aspects that

468
00:16:12,249 --> 00:16:13,869
how severe it is there's a score right

469
00:16:13,869 --> 00:16:15,579
so it's a metric how use we're impacting

470
00:16:15,579 --> 00:16:18,399
how much it can it be remotely launched

471
00:16:18,399 --> 00:16:20,529
and so it does SUVs built for

472
00:16:20,529 --> 00:16:23,139
vulnerabilities now what if you if you

473
00:16:23,139 --> 00:16:25,329
might have if used github and this is

474
00:16:25,329 --> 00:16:26,829
going off off kilter here but for using

475
00:16:26,829 --> 00:16:28,059
github you might be getting as email

476
00:16:28,059 --> 00:16:30,489
notifications Oh a particular package in

477
00:16:30,489 --> 00:16:32,859
your github repo is vulnerable to CVE

478
00:16:32,859 --> 00:16:35,919
XYZ this is exactly what a whilst with

479
00:16:35,919 --> 00:16:38,669
Penske checker is doing for that so

480
00:16:38,669 --> 00:16:41,679
great tool to use to give you give you a

481
00:16:41,679 --> 00:16:44,169
call stack for that but other other

482
00:16:44,169 --> 00:16:46,239
tooling that's out there let me see what

483
00:16:46,239 --> 00:16:51,819
we got going on sue firm from a trans

484
00:16:51,819 --> 00:16:55,239
that were from a particular performance

485
00:16:55,239 --> 00:16:57,249
standpoint there's there several

486
00:16:57,249 --> 00:16:58,869
profilers that are out there will help

487
00:16:58,869 --> 00:17:00,939
you a catalog the application take a

488
00:17:00,939 --> 00:17:03,729
take a profiling look at it there is a

489
00:17:03,729 --> 00:17:05,529
commercial version just free plug I've

490
00:17:05,529 --> 00:17:07,179
worked for epidemic so our profiler

491
00:17:07,179 --> 00:17:09,370
actually will help intercept the call

492
00:17:09,370 --> 00:17:10,839
trace and give you a pretty clean clean

493
00:17:10,839 --> 00:17:16,100
out of what's actually being called I

494
00:17:16,110 --> 00:17:18,009
think I blew through everything in like

495
00:17:18,009 --> 00:17:21,610
twenty minutes going through but I

496
00:17:21,610 --> 00:17:23,110
wanted to be a little more interactive I

497
00:17:23,110 --> 00:17:25,509
do have little flamingos so that's

498
00:17:25,509 --> 00:17:26,799
something I was gonna do before the talk

499
00:17:26,799 --> 00:17:28,720
but didn't get time to do it was I was

500
00:17:28,720 --> 00:17:30,340
gonna make a fake project called project

501
00:17:30,340 --> 00:17:32,200
flamingo if you can see my shirt there's

502
00:17:32,200 --> 00:17:34,029
flamingos here and just see how many

503
00:17:34,029 --> 00:17:35,649
people would actually download it and

504
00:17:35,649 --> 00:17:37,750
just to prove a point that hey don't

505
00:17:37,750 --> 00:17:39,909
install things willy-nilly I was gonna

506
00:17:39,909 --> 00:17:41,259
make up some very good store like oh

507
00:17:41,259 --> 00:17:43,210
yeah my flamingo and the associated

508
00:17:43,210 --> 00:17:45,340
Flocker project that I have with it we

509
00:17:45,340 --> 00:17:46,539
really solve a lot of your tracing

510
00:17:46,539 --> 00:17:47,889
problems that you have it'll do mocks

511
00:17:47,889 --> 00:17:50,529
relief efficiently and you know you're

512
00:17:50,529 --> 00:17:51,820
going to worry about things and just try

513
00:17:51,820 --> 00:17:53,649
to get metrics on how many people

514
00:17:53,649 --> 00:17:55,809
actually after a talk did npm install

515
00:17:55,809 --> 00:17:59,139
install flamingo ryan say oh you had no

516
00:17:59,139 --> 00:17:59,950
idea what I just did

517
00:17:59,950 --> 00:18:02,230
made it look cool but what was it so but

518
00:18:02,230 --> 00:18:04,419
now something I didn't get to do right

519
00:18:04,419 --> 00:18:06,010
before the talk and I have a little pink

520
00:18:06,010 --> 00:18:08,200
flamingos I was gonna hand out to people

521
00:18:08,200 --> 00:18:10,059
who had questions but I would like to

522
00:18:10,059 --> 00:18:11,620
open up for questions if anybody has

523
00:18:11,620 --> 00:18:13,179
questions I know I threw a lot of kind

524
00:18:13,179 --> 00:18:14,799
of disparate information at the folks in

525
00:18:14,799 --> 00:18:16,899
the audience maybe practices that I've

526
00:18:16,899 --> 00:18:19,809
missed if you ask a question I would

527
00:18:19,809 --> 00:18:20,470
give you a flamingo

528
00:18:20,470 --> 00:18:21,820
does anybody have one in the audience of

529
00:18:21,820 --> 00:18:24,490
lingo you can show yeah do you want a

530
00:18:24,490 --> 00:18:25,630
cool flu bug someone asked me a question

531
00:18:25,630 --> 00:18:31,269
earlier yeah oh okay

532
00:18:31,269 --> 00:18:39,100
yeah any questions any comments any

533
00:18:39,100 --> 00:18:41,289
thoughts what is this guy talking about

534
00:18:41,289 --> 00:18:47,380
Java to Josh your conference well I got

535
00:18:47,380 --> 00:18:48,700
a blue bird is that it has you can

536
00:18:48,700 --> 00:18:50,679
actually associate types with the

537
00:18:50,679 --> 00:18:54,519
callbacks and so it again being a being

538
00:18:54,519 --> 00:18:56,289
full disclosure being a fan of type

539
00:18:56,289 --> 00:18:58,000
languages I might want to associate a

540
00:18:58,000 --> 00:18:59,470
certain type of error a blue bird right

541
00:18:59,470 --> 00:19:01,899
saying okay the error exception for I'm

542
00:19:01,899 --> 00:19:02,860
gonna pretend we're trying to get the

543
00:19:02,860 --> 00:19:05,139
weather might be a certain type of cast

544
00:19:05,139 --> 00:19:06,820
that we have and so instead of having a

545
00:19:06,820 --> 00:19:08,380
generic blue bird allow you to have a

546
00:19:08,380 --> 00:19:09,760
specific type saying oh this is a

547
00:19:09,760 --> 00:19:11,860
whether or not found exception so big

548
00:19:11,860 --> 00:19:13,570
fan of it co-worker turned me on to blue

549
00:19:13,570 --> 00:19:17,880
bird so like a lot flamingo for you sir

550
00:19:17,880 --> 00:19:24,720
hey did anybody else have any questions

551
00:19:24,720 --> 00:19:29,380
if not a warm round of applause it was

552
00:19:29,380 --> 00:19:31,179
there anything else that you had no

553
00:19:31,179 --> 00:19:33,639
those it then yeah a warm and applause -

554
00:19:33,639 --> 00:19:34,080
Ravi

