1
00:00:15,430 --> 00:00:17,260

I'm just gonna say a few words and then

2
00:00:17,260 --> 00:00:18,760
Luke will do some demoing and then

3
00:00:18,760 --> 00:00:20,710
hopefully we have time for some

4
00:00:20,710 --> 00:00:25,000
questions afterwards so over the last

5
00:00:25,000 --> 00:00:27,640
I'd say five years in particular we've

6
00:00:27,640 --> 00:00:29,700
just sort of increasingly heard from

7
00:00:29,700 --> 00:00:33,460
customers and internal teams how it's

8
00:00:33,460 --> 00:00:36,040
really hard to to write an in particular

9
00:00:36,040 --> 00:00:38,920
maintain large code bases in in

10
00:00:38,920 --> 00:00:42,220
JavaScript variety of reasons you know

11
00:00:42,220 --> 00:00:44,199
like I mean the language as you all know

12
00:00:44,199 --> 00:00:45,970
doesn't really have any structuring

13
00:00:45,970 --> 00:00:48,160
means beyond function so there are no

14
00:00:48,160 --> 00:00:51,550
classes there's no modules but also

15
00:00:51,550 --> 00:00:54,309
there's no there's no static typing in

16
00:00:54,309 --> 00:00:56,950
the language with which we can

17
00:00:56,950 --> 00:00:59,079
communicate contracts and teams you know

18
00:00:59,079 --> 00:01:00,880
like big teams like to actually be able

19
00:01:00,880 --> 00:01:03,550
to reason about if I I'm supposed to

20
00:01:03,550 --> 00:01:05,080
implement this contract what's in it

21
00:01:05,080 --> 00:01:06,670
what message so much functions what

22
00:01:06,670 --> 00:01:10,840
interfaces and also static typing is one

23
00:01:10,840 --> 00:01:13,539
of those sort of things that empowered

24
00:01:13,539 --> 00:01:15,729
the IDE revolution over the past decade

25
00:01:15,729 --> 00:01:18,190
if you look at things like Co completion

26
00:01:18,190 --> 00:01:21,580
refactorings go to definition navigation

27
00:01:21,580 --> 00:01:23,530
and large code bases it's all largely

28
00:01:23,530 --> 00:01:28,780
powered by by static typing so so when

29
00:01:28,780 --> 00:01:30,310
we when we were thinking about where to

30
00:01:30,310 --> 00:01:32,710
go next with Java JavaScript development

31
00:01:32,710 --> 00:01:36,070
tools a couple of years ago we thought

32
00:01:36,070 --> 00:01:37,869
it'd be great if we could somehow

33
00:01:37,869 --> 00:01:39,850
strengthen JavaScript with these things

34
00:01:39,850 --> 00:01:41,890
that are missing like classes modules

35
00:01:41,890 --> 00:01:46,210
and and some form of of typing but we

36
00:01:46,210 --> 00:01:48,130
wanted to do so in a way that did not at

37
00:01:48,130 --> 00:01:50,350
all take away any of the inherent

38
00:01:50,350 --> 00:01:52,360
advantages of JavaScript II the

39
00:01:52,360 --> 00:01:54,670
standards web cross-platform

40
00:01:54,670 --> 00:01:58,479
and so forth and so typescript is is the

41
00:01:58,479 --> 00:02:02,170
outcome of that and and sort of market

42
00:02:02,170 --> 00:02:05,170
espeak wise typescript is a language for

43
00:02:05,170 --> 00:02:07,840
application scale JavaScript development

44
00:02:07,840 --> 00:02:12,070
but and if but technically it is a

45
00:02:12,070 --> 00:02:15,340
superset of JavaScript that compiles to

46
00:02:15,340 --> 00:02:18,700
plain JavaScript and the compiler itself

47
00:02:18,700 --> 00:02:21,130
is written in typescript and the code

48
00:02:21,130 --> 00:02:25,090
that it generates is is just plain

49
00:02:25,090 --> 00:02:28,030
JavaScript that runs on any browser on

50
00:02:28,030 --> 00:02:29,110
any host on

51
00:02:29,110 --> 00:02:31,630
any OS and the compiler and the

52
00:02:31,630 --> 00:02:33,880
associated language services are open

53
00:02:33,880 --> 00:02:39,340
open-source so so unlike other languages

54
00:02:39,340 --> 00:02:43,420
that target JavaScript typescript starts

55
00:02:43,420 --> 00:02:47,710
with JavaScript and and and to to that

56
00:02:47,710 --> 00:02:49,570
and that that means that every line of

57
00:02:49,570 --> 00:02:52,180
JavaScript out there is also typescript

58
00:02:52,180 --> 00:02:53,950
you can copy and paste JavaScript into a

59
00:02:53,950 --> 00:02:55,570
typescript file and and just go from

60
00:02:55,570 --> 00:02:56,020
there

61
00:02:56,020 --> 00:02:58,420
and it also means that typescript works

62
00:02:58,420 --> 00:03:01,330
completely seamlessly with all of the

63
00:03:01,330 --> 00:03:03,459
existing JavaScript frameworks that are

64
00:03:03,459 --> 00:03:06,940
out there like note jQuery expressed

65
00:03:06,940 --> 00:03:11,350
backbone underscore etc etc and then the

66
00:03:11,350 --> 00:03:12,850
thing that we add in typescript is

67
00:03:12,850 --> 00:03:16,330
classes modules arrow functions rest

68
00:03:16,330 --> 00:03:17,709
parameters a bunch of things that are

69
00:03:17,709 --> 00:03:19,989
actually already proposed in es6 and

70
00:03:19,989 --> 00:03:22,230
we're very aligned with those proposals

71
00:03:22,230 --> 00:03:25,480
and then we also add optional static

72
00:03:25,480 --> 00:03:30,070
typing on top and through that through

73
00:03:30,070 --> 00:03:32,350
that amalgam of things we can then build

74
00:03:32,350 --> 00:03:34,959
great tooling because we now have a

75
00:03:34,959 --> 00:03:37,269
foundation upon which we can reason

76
00:03:37,269 --> 00:03:39,700
about code and navigate larger code

77
00:03:39,700 --> 00:03:41,470
bases but but the good news is that that

78
00:03:41,470 --> 00:03:43,900
it all compiles away so so when we

79
00:03:43,900 --> 00:03:45,760
compile to JavaScript we basically

80
00:03:45,760 --> 00:03:47,769
generate what I would call idiomatic

81
00:03:47,769 --> 00:03:49,540
JavaScript the same kind of JavaScript

82
00:03:49,540 --> 00:03:51,190
that you would generate to do prototype

83
00:03:51,190 --> 00:03:53,769
inheritance and to do function closures

84
00:03:53,769 --> 00:03:56,739
for modules and and so forth and as I

85
00:03:56,739 --> 00:03:59,470
said deed the final code there's no

86
00:03:59,470 --> 00:04:02,200
shred of evidence left that it came from

87
00:04:02,200 --> 00:04:03,700
typescript so to speak and it runs

88
00:04:03,700 --> 00:04:06,340
anywhere that the JavaScript runs so

89
00:04:06,340 --> 00:04:08,680
that's sort of the short spiel if you

90
00:04:08,680 --> 00:04:10,180
will will have looked through some

91
00:04:10,180 --> 00:04:12,040
demoing and then then we'll we'll do

92
00:04:12,040 --> 00:04:14,680
some Q&A afterwards all right so see I

93
00:04:14,680 --> 00:04:16,690
say good get to do some fun the fun part

94
00:04:16,690 --> 00:04:18,459
here and just walk you through what some

95
00:04:18,459 --> 00:04:21,190
of this looks like in our tools here

96
00:04:21,190 --> 00:04:23,800
so as Anders mentioned typescript just

97
00:04:23,800 --> 00:04:26,200
starts with JavaScript so we can paste

98
00:04:26,200 --> 00:04:28,930
in a piece of JavaScript code this tool

99
00:04:28,930 --> 00:04:30,220
I have here is something that's on our

100
00:04:30,220 --> 00:04:32,530
web site the typescript playground which

101
00:04:32,530 --> 00:04:34,479
lets you just try out the language see

102
00:04:34,479 --> 00:04:35,470
what it looks like see what the

103
00:04:35,470 --> 00:04:37,419
generator javascript looks like and then

104
00:04:37,419 --> 00:04:39,820
run that so I'm starting here with

105
00:04:39,820 --> 00:04:41,840
system JavaScript code I have a

106
00:04:41,840 --> 00:04:43,940
to function a member on his prototype

107
00:04:43,940 --> 00:04:46,250
create an instance of that and then play

108
00:04:46,250 --> 00:04:47,900
around with the Dom a little bit a

109
00:04:47,900 --> 00:04:49,730
couple things to notice one is that I

110
00:04:49,730 --> 00:04:51,800
wrote this code on the left the compiled

111
00:04:51,800 --> 00:04:53,360
JavaScript because this was just

112
00:04:53,360 --> 00:04:54,919
JavaScript to begin with I'm getting

113
00:04:54,919 --> 00:04:56,270
back exactly the same thing on the

114
00:04:56,270 --> 00:04:57,770
output there's a little bit of

115
00:04:57,770 --> 00:04:59,360
whitespace removed but it's the exactly

116
00:04:59,360 --> 00:05:01,820
the same JavaScript code I can go ahead

117
00:05:01,820 --> 00:05:04,340
and run this we see our beautiful web

118
00:05:04,340 --> 00:05:07,400
application here which when I run it

119
00:05:07,400 --> 00:05:09,440
seems to have you know a little bit of a

120
00:05:09,440 --> 00:05:12,229
little bug in its hello world output and

121
00:05:12,229 --> 00:05:14,120
so if I come back into here we can start

122
00:05:14,120 --> 00:05:16,190
using the first sort of typescript value

123
00:05:16,190 --> 00:05:18,530
add piece and that is to actually add a

124
00:05:18,530 --> 00:05:21,889
type annotation so if I put colons

125
00:05:21,889 --> 00:05:22,610
string here

126
00:05:22,610 --> 00:05:24,740
that's me indicating my intent that is

127
00:05:24,740 --> 00:05:26,330
the author of this piece of code I

128
00:05:26,330 --> 00:05:28,729
intended this to be called being passed

129
00:05:28,729 --> 00:05:32,120
a string this does a few things the

130
00:05:32,120 --> 00:05:34,280
first thing is it does not change the

131
00:05:34,280 --> 00:05:35,450
output at all

132
00:05:35,450 --> 00:05:37,070
who knows that this just completely

133
00:05:37,070 --> 00:05:39,139
disappears in the output that means that

134
00:05:39,139 --> 00:05:40,610
these types won't have any performance

135
00:05:40,610 --> 00:05:42,590
overhead they won't have any change in

136
00:05:42,590 --> 00:05:44,600
the semantics of your code you can still

137
00:05:44,600 --> 00:05:45,919
reason about your code exactly in the

138
00:05:45,919 --> 00:05:47,479
same way as you would have if you just

139
00:05:47,479 --> 00:05:48,800
written the JavaScript without the type

140
00:05:48,800 --> 00:05:50,720
annotations that's a really really key

141
00:05:50,720 --> 00:05:52,669
foundation for for the way that we think

142
00:05:52,669 --> 00:05:55,520
about types the next thing is we saw

143
00:05:55,520 --> 00:05:56,930
that as soon as I typed that I got this

144
00:05:56,930 --> 00:05:58,760
little red squiggle here and the

145
00:05:58,760 --> 00:06:00,680
compiler is telling me hey you probably

146
00:06:00,680 --> 00:06:02,570
did something wrong here you said that

147
00:06:02,570 --> 00:06:03,380
this thing we're supposed to take a

148
00:06:03,380 --> 00:06:05,690
string and you passed at this object

149
00:06:05,690 --> 00:06:07,760
literal here and so we're here is the

150
00:06:07,760 --> 00:06:09,110
place where we start being a little bit

151
00:06:09,110 --> 00:06:10,130
you know having a little bit of an

152
00:06:10,130 --> 00:06:12,080
opinion in a sense on you know

153
00:06:12,080 --> 00:06:13,639
technically in JavaScript there's no

154
00:06:13,639 --> 00:06:14,960
problem with just passing this object

155
00:06:14,960 --> 00:06:16,789
literal to something that maybe if you

156
00:06:16,789 --> 00:06:18,500
treated as a string that'll work out all

157
00:06:18,500 --> 00:06:21,740
right but probably you don't and so here

158
00:06:21,740 --> 00:06:23,780
we're we're sort of saying we think

159
00:06:23,780 --> 00:06:24,770
that's probably an error in your code

160
00:06:24,770 --> 00:06:26,660
we're going to give you that feedback on

161
00:06:26,660 --> 00:06:29,120
the fly as you type your code so I can

162
00:06:29,120 --> 00:06:33,110
fix that just by removing this the next

163
00:06:33,110 --> 00:06:35,000
thing we get is we start to get some of

164
00:06:35,000 --> 00:06:36,950
the tooling to light up so I can come up

165
00:06:36,950 --> 00:06:39,860
here and type in greeting dot and you

166
00:06:39,860 --> 00:06:41,090
see we get a completion list at this

167
00:06:41,090 --> 00:06:43,010
point we get feedback about it because I

168
00:06:43,010 --> 00:06:44,690
know this is a string because the

169
00:06:44,690 --> 00:06:46,700
developer indicated that intent we can

170
00:06:46,700 --> 00:06:47,810
give you a completion list and this

171
00:06:47,810 --> 00:06:49,969
tells me not just the names of the

172
00:06:49,969 --> 00:06:51,860
members that are available so I can see

173
00:06:51,860 --> 00:06:53,900
I've got a length property it also tells

174
00:06:53,900 --> 00:06:55,220
me the types of those

175
00:06:55,220 --> 00:06:56,420
members and that's really useful

176
00:06:56,420 --> 00:06:58,160
feedback to get directly in the tool

177
00:06:58,160 --> 00:07:00,200
because it means that for members that I

178
00:07:00,200 --> 00:07:01,550
don't use that often like I don't call

179
00:07:01,550 --> 00:07:04,610
locale compare all the time but if I but

180
00:07:04,610 --> 00:07:06,110
if I need to I can look at it right here

181
00:07:06,110 --> 00:07:07,160
I don't need to go read the

182
00:07:07,160 --> 00:07:09,050
documentation and look up what the you

183
00:07:09,050 --> 00:07:10,190
know what I need to pass it what is

184
00:07:10,190 --> 00:07:11,600
going to give me back all that

185
00:07:11,600 --> 00:07:12,800
information is sort of right there

186
00:07:12,800 --> 00:07:16,930
inside inside my tool

187
00:07:16,930 --> 00:07:20,450
the one thing you sort of may notice

188
00:07:20,450 --> 00:07:23,900
here is that when I when I made that

189
00:07:23,900 --> 00:07:25,880
change I originally was passing let me

190
00:07:25,880 --> 00:07:27,980
just go back and undo this um I was

191
00:07:27,980 --> 00:07:29,750
originally passing an object literal

192
00:07:29,750 --> 00:07:31,340
here and you may have wondered well what

193
00:07:31,340 --> 00:07:32,900
if I'd actually intended to pass an

194
00:07:32,900 --> 00:07:34,610
object literal there and what if this

195
00:07:34,610 --> 00:07:36,230
wasn't supposed to be a string it was

196
00:07:36,230 --> 00:07:38,540
supposed to be an object literal and so

197
00:07:38,540 --> 00:07:39,770
we can actually represent that kind of

198
00:07:39,770 --> 00:07:41,630
thing in here as well so we can say that

199
00:07:41,630 --> 00:07:44,540
this greeting is actually some object

200
00:07:44,540 --> 00:07:46,850
which has a message property that is a

201
00:07:46,850 --> 00:07:49,250
string so if we want to pass around sort

202
00:07:49,250 --> 00:07:50,990
of structured data we can indicate that

203
00:07:50,990 --> 00:07:53,720
within within the type system here and

204
00:07:53,720 --> 00:07:54,890
see the soon as we do that that's

205
00:07:54,890 --> 00:07:56,990
another way of sort of fixing the error

206
00:07:56,990 --> 00:08:00,410
that was being reported to us now well

207
00:08:00,410 --> 00:08:01,910
and I should also show of course you

208
00:08:01,910 --> 00:08:03,530
know now because I have that when I hit

209
00:08:03,530 --> 00:08:05,450
greeting dot we see that that thing has

210
00:08:05,450 --> 00:08:09,380
a message property now of course if we

211
00:08:09,380 --> 00:08:11,050
were doing this in any real program

212
00:08:11,050 --> 00:08:12,950
these kind of things would get pretty

213
00:08:12,950 --> 00:08:14,870
big you know if we were passing around

214
00:08:14,870 --> 00:08:16,400
packets of data and we wanted to

215
00:08:16,400 --> 00:08:19,250
actually type them typically our objects

216
00:08:19,250 --> 00:08:21,350
have more than one member so here we can

217
00:08:21,350 --> 00:08:23,060
go and just give that thing a name by

218
00:08:23,060 --> 00:08:27,110
calling it a greeter options and then

219
00:08:27,110 --> 00:08:29,500
putting a message property in there and

220
00:08:29,500 --> 00:08:31,910
interfaces in typescript are just a way

221
00:08:31,910 --> 00:08:34,130
of giving a name to some structure for

222
00:08:34,130 --> 00:08:36,200
an object and so we can come back in

223
00:08:36,200 --> 00:08:38,539
here and just replace this in Lion thing

224
00:08:38,539 --> 00:08:42,169
with greeter options it's important to

225
00:08:42,169 --> 00:08:43,669
notice that this is a structural

226
00:08:43,669 --> 00:08:45,740
contract this isn't like nominal typing

227
00:08:45,740 --> 00:08:47,420
like you'd get in Java or C sharp this

228
00:08:47,420 --> 00:08:49,370
is just a structural contract that the

229
00:08:49,370 --> 00:08:51,100
thing being passed in is this parameter

230
00:08:51,100 --> 00:08:53,930
better be an object which has a message

231
00:08:53,930 --> 00:08:55,430
property and that message property

232
00:08:55,430 --> 00:08:56,990
better be a string so that's the the

233
00:08:56,990 --> 00:08:58,790
intent that I'm indicating but we can

234
00:08:58,790 --> 00:09:00,650
pass any object letter we want in here

235
00:09:00,650 --> 00:09:02,900
as long as it has the right things if

236
00:09:02,900 --> 00:09:05,180
though we made a typo we get that error

237
00:09:05,180 --> 00:09:08,120
again and similarly if we pass the wrong

238
00:09:08,120 --> 00:09:09,859
kind of data

239
00:09:09,859 --> 00:09:12,049
again we see the error comes back so

240
00:09:12,049 --> 00:09:13,189
we're able to sort of flow all that

241
00:09:13,189 --> 00:09:16,699
information through now we could add

242
00:09:16,699 --> 00:09:18,499
other things to these to these

243
00:09:18,499 --> 00:09:20,720
interfaces so for instance let's say

244
00:09:20,720 --> 00:09:22,609
that it's greater options also I can

245
00:09:22,609 --> 00:09:25,309
have a function on it so we can say that

246
00:09:25,309 --> 00:09:27,139
there's a function foo which takes an X

247
00:09:27,139 --> 00:09:31,309
of type number and returns a number now

248
00:09:31,309 --> 00:09:33,290
when we come back in here we can see

249
00:09:33,290 --> 00:09:35,179
greeting dot gives us back that foo

250
00:09:35,179 --> 00:09:39,649
function and in fact if I say var x

251
00:09:39,649 --> 00:09:44,689
equals greeting dot you'll start to see

252
00:09:44,689 --> 00:09:46,339
we get a little bit of type inference so

253
00:09:46,339 --> 00:09:48,619
because we know that food takes a number

254
00:09:48,619 --> 00:09:50,149
and returns a number that means we know

255
00:09:50,149 --> 00:09:51,949
that X is a number and so we're actually

256
00:09:51,949 --> 00:09:53,389
we don't have to add type annotations

257
00:09:53,389 --> 00:09:54,410
for these things a lot of this

258
00:09:54,410 --> 00:09:55,579
information is just going to flow

259
00:09:55,579 --> 00:10:00,410
through type inference now we can do

260
00:10:00,410 --> 00:10:02,209
other interesting things so properties

261
00:10:02,209 --> 00:10:05,600
and functions on our interfaces is one

262
00:10:05,600 --> 00:10:07,519
thing but JavaScript objects can sort of

263
00:10:07,519 --> 00:10:09,169
do a few other things other than just

264
00:10:09,169 --> 00:10:11,029
have properties so one thing they can do

265
00:10:11,029 --> 00:10:12,679
is they can be callable they can

266
00:10:12,679 --> 00:10:14,899
effectively be function like and so

267
00:10:14,899 --> 00:10:15,980
imagine that we want to indicate that

268
00:10:15,980 --> 00:10:19,279
our greeter options object is callable

269
00:10:19,279 --> 00:10:21,980
and when called with no parameters we'll

270
00:10:21,980 --> 00:10:24,829
return an element so here we can do

271
00:10:24,829 --> 00:10:28,009
something like you know we can take this

272
00:10:28,009 --> 00:10:29,660
greeting and while it still has a

273
00:10:29,660 --> 00:10:31,850
message property in a foo property it

274
00:10:31,850 --> 00:10:34,069
also can be called and we call that we

275
00:10:34,069 --> 00:10:35,569
get back an element and so we get the

276
00:10:35,569 --> 00:10:39,459
completion list here for an HTML element

277
00:10:39,459 --> 00:10:41,660
now one last thing here

278
00:10:41,660 --> 00:10:43,249
another thing that JavaScript objects

279
00:10:43,249 --> 00:10:45,470
can sort of quality they can have is

280
00:10:45,470 --> 00:10:46,910
that they can sort of be indexable that

281
00:10:46,910 --> 00:10:49,790
they can be array like objects and so

282
00:10:49,790 --> 00:10:51,619
here we can say that if I index this on

283
00:10:51,619 --> 00:10:53,389
a number I'm gonna get back a date

284
00:10:53,389 --> 00:10:55,910
object and so now if we come in here and

285
00:10:55,910 --> 00:10:58,160
grab the 0th element of this and hit dot

286
00:10:58,160 --> 00:11:00,470
we're gonna get the completion list for

287
00:11:00,470 --> 00:11:02,480
date and this kind of thing can look a

288
00:11:02,480 --> 00:11:04,069
bit crazy when you do it in a simple

289
00:11:04,069 --> 00:11:05,449
example like this like what kind of

290
00:11:05,449 --> 00:11:06,980
object is gonna be callable and

291
00:11:06,980 --> 00:11:08,480
indexable and giving back elements and

292
00:11:08,480 --> 00:11:11,629
dates but you know things in the Dom are

293
00:11:11,629 --> 00:11:13,669
not that much more sane than this right

294
00:11:13,669 --> 00:11:15,439
there there's a lot of host objects that

295
00:11:15,439 --> 00:11:18,110
that have some pretty strange api's and

296
00:11:18,110 --> 00:11:20,480
by trying to model taking the runtime

297
00:11:20,480 --> 00:11:22,329
type system that javascript has

298
00:11:22,329 --> 00:11:24,100
and exposing that in a static type

299
00:11:24,100 --> 00:11:25,839
system that you can use to describe and

300
00:11:25,839 --> 00:11:28,269
model your api's we can bring a lot of

301
00:11:28,269 --> 00:11:30,069
the richness of those api's and just

302
00:11:30,069 --> 00:11:31,989
expose it into tools and documentation

303
00:11:31,989 --> 00:11:35,829
and static analysis okay so that's a

304
00:11:35,829 --> 00:11:39,399
quick look at at some of the well let me

305
00:11:39,399 --> 00:11:41,290
just let me just actually go back to the

306
00:11:41,290 --> 00:11:45,369
the basic version of this so one other

307
00:11:45,369 --> 00:11:48,040
thing with types that I should note we

308
00:11:48,040 --> 00:11:49,449
added this one type annotation here and

309
00:11:49,449 --> 00:11:50,679
I showed how that kind of gives you some

310
00:11:50,679 --> 00:11:53,079
some tooling benefits it turns out we

311
00:11:53,079 --> 00:11:54,429
were actually getting a few tooling

312
00:11:54,429 --> 00:11:56,230
benefits kind of already for free in

313
00:11:56,230 --> 00:11:57,730
this code even when we just pasted it in

314
00:11:57,730 --> 00:11:59,799
the raw JavaScript and that's because by

315
00:11:59,799 --> 00:12:02,170
default we give you typing for the core

316
00:12:02,170 --> 00:12:04,600
browser primitives so all the Dom API is

317
00:12:04,600 --> 00:12:07,449
all the es five core libraries and so if

318
00:12:07,449 --> 00:12:08,949
I hover over document we see we know

319
00:12:08,949 --> 00:12:11,529
that thing is a document and therefore

320
00:12:11,529 --> 00:12:12,819
we know that create element is a

321
00:12:12,819 --> 00:12:14,589
function which takes a string and

322
00:12:14,589 --> 00:12:16,899
returns an HTML element and we know that

323
00:12:16,899 --> 00:12:18,670
it has an errant text property and this

324
00:12:18,670 --> 00:12:20,230
is all useful because it means that if I

325
00:12:20,230 --> 00:12:22,149
mistyped something here we're gonna get

326
00:12:22,149 --> 00:12:24,279
that error as well so even when I'm just

327
00:12:24,279 --> 00:12:25,869
pasting in JavaScript code we're able to

328
00:12:25,869 --> 00:12:27,549
sort of do some checking against your

329
00:12:27,549 --> 00:12:29,529
code because we know something about the

330
00:12:29,529 --> 00:12:33,369
the core libraries that you're using all

331
00:12:33,369 --> 00:12:36,129
right so that's a quick look at types in

332
00:12:36,129 --> 00:12:38,499
typescript so the next thing that we we

333
00:12:38,499 --> 00:12:41,290
give you is is classes in classes

334
00:12:41,290 --> 00:12:43,059
generally are just a useful tool for

335
00:12:43,059 --> 00:12:45,639
kind of this structuring of code there's

336
00:12:45,639 --> 00:12:47,679
a lot of good design patterns that the

337
00:12:47,679 --> 00:12:49,269
developers are used to for for how to

338
00:12:49,269 --> 00:12:51,249
think through classes the classes in

339
00:12:51,249 --> 00:12:53,350
typescript are actually very simple and

340
00:12:53,350 --> 00:12:54,879
lightweight they're they're very much

341
00:12:54,879 --> 00:12:56,589
aligned with what's being discussed

342
00:12:56,589 --> 00:12:58,299
currently in the echo script standards

343
00:12:58,299 --> 00:13:00,249
body for ACMA script six the maximum and

344
00:13:00,249 --> 00:13:03,100
minimum classes proposal it's basically

345
00:13:03,100 --> 00:13:04,869
just ultimately a way of hooking up you

346
00:13:04,869 --> 00:13:06,879
know the standard constructor with with

347
00:13:06,879 --> 00:13:09,149
prototype properties prototype methods

348
00:13:09,149 --> 00:13:11,470
pattern using a single sort of

349
00:13:11,470 --> 00:13:12,730
declarative construct instead of

350
00:13:12,730 --> 00:13:16,089
smashing it together manually and so

351
00:13:16,089 --> 00:13:17,619
you'll see that this code if you've seen

352
00:13:17,619 --> 00:13:19,959
what the es6 classes look like the code

353
00:13:19,959 --> 00:13:22,089
here is is effectively identical to

354
00:13:22,089 --> 00:13:23,799
those the key thing that's different

355
00:13:23,799 --> 00:13:26,559
here is even typescript we let you

356
00:13:26,559 --> 00:13:28,509
describe what properties you have and

357
00:13:28,509 --> 00:13:31,209
what types those properties have this is

358
00:13:31,209 --> 00:13:32,470
way of getting that type information

359
00:13:32,470 --> 00:13:35,709
back into the tool again you can see on

360
00:13:35,709 --> 00:13:36,250
the right hand

361
00:13:36,250 --> 00:13:38,050
we code generate this into a fairly

362
00:13:38,050 --> 00:13:40,330
standard pattern here this is more or

363
00:13:40,330 --> 00:13:42,190
less the kind of code that you would

364
00:13:42,190 --> 00:13:43,840
likely write if you're gonna write this

365
00:13:43,840 --> 00:13:45,160
kind of thing out by hand

366
00:13:45,160 --> 00:13:46,870
and so we're really trying to make sure

367
00:13:46,870 --> 00:13:48,130
that the code we generate is really

368
00:13:48,130 --> 00:13:49,840
simple and clean and has a one-to-one

369
00:13:49,840 --> 00:13:52,090
correspondence with with a typescript

370
00:13:52,090 --> 00:13:55,180
code that you write in now classes are

371
00:13:55,180 --> 00:13:57,070
actually particularly interesting for

372
00:13:57,070 --> 00:13:58,420
language like typescript which has a

373
00:13:58,420 --> 00:14:00,550
sort of static type system that it's

374
00:14:00,550 --> 00:14:03,100
offering because the class defines not

375
00:14:03,100 --> 00:14:05,320
just a constructor object that you can

376
00:14:05,320 --> 00:14:06,190
use at runtime

377
00:14:06,190 --> 00:14:08,320
it also finds a type which is the type

378
00:14:08,320 --> 00:14:10,420
of the instances that are created by

379
00:14:10,420 --> 00:14:12,460
that constructor function and that means

380
00:14:12,460 --> 00:14:13,810
that down here when we created that new

381
00:14:13,810 --> 00:14:16,150
greeter object we actually see that we

382
00:14:16,150 --> 00:14:17,860
know that that thing has type greeter

383
00:14:17,860 --> 00:14:20,170
which means for instance that if we look

384
00:14:20,170 --> 00:14:22,540
at the greet function here we know what

385
00:14:22,540 --> 00:14:24,310
type that has we know that it takes no

386
00:14:24,310 --> 00:14:26,050
arguments and returns a string and we

387
00:14:26,050 --> 00:14:27,580
know that this is referring to you can

388
00:14:27,580 --> 00:14:29,170
see the highlighting here you can see

389
00:14:29,170 --> 00:14:31,300
this is referring to the the greet

390
00:14:31,300 --> 00:14:33,190
function to find up here and that's

391
00:14:33,190 --> 00:14:34,060
something that would traditionally be

392
00:14:34,060 --> 00:14:35,650
quite hard to do with JavaScript to know

393
00:14:35,650 --> 00:14:36,970
that there was that association between

394
00:14:36,970 --> 00:14:39,370
those pieces of code because you know in

395
00:14:39,370 --> 00:14:40,780
general we could have a lot of different

396
00:14:40,780 --> 00:14:42,040
things happening that could make that

397
00:14:42,040 --> 00:14:44,110
name bound resolve to something in a

398
00:14:44,110 --> 00:14:46,060
very different place but with the static

399
00:14:46,060 --> 00:14:47,200
type system we're actually able to

400
00:14:47,200 --> 00:14:50,050
resolve how how those connections are

401
00:14:50,050 --> 00:14:50,550
made

402
00:14:50,550 --> 00:14:52,570
one of the other nice things that offers

403
00:14:52,570 --> 00:14:54,250
is the ability to do some some richer

404
00:14:54,250 --> 00:14:57,310
kind of ID services so if I come in here

405
00:14:57,310 --> 00:15:00,700
and say rename we can come and say oops

406
00:15:00,700 --> 00:15:03,610
I keep doing that too much we can come

407
00:15:03,610 --> 00:15:08,320
and say change this to say hello and do

408
00:15:08,320 --> 00:15:10,240
every sort of rename in line of our code

409
00:15:10,240 --> 00:15:11,860
and actually change both the definition

410
00:15:11,860 --> 00:15:14,740
site and the and the use site and at

411
00:15:14,740 --> 00:15:16,210
once and obviously the JavaScript that

412
00:15:16,210 --> 00:15:17,440
we got generated out on the other side

413
00:15:17,440 --> 00:15:18,940
so we can offer some of these sort of

414
00:15:18,940 --> 00:15:22,270
richer IDE services inside this kind of

415
00:15:22,270 --> 00:15:25,690
environment so the the last sort of

416
00:15:25,690 --> 00:15:29,860
major concept that the typescript brings

417
00:15:29,860 --> 00:15:31,300
in and this one's also something that's

418
00:15:31,300 --> 00:15:35,650
being worked on in in the es6 group is

419
00:15:35,650 --> 00:15:38,610
the the notion of modules and so modules

420
00:15:38,610 --> 00:15:40,870
and this first example might this is

421
00:15:40,870 --> 00:15:42,160
just an internal module so the ability

422
00:15:42,160 --> 00:15:44,170
to just declare a module that I can use

423
00:15:44,170 --> 00:15:47,380
within my single file here and you see I

424
00:15:47,380 --> 00:15:49,150
just took my greeter function I stuck it

425
00:15:49,150 --> 00:15:50,260
inside a module

426
00:15:50,260 --> 00:15:52,930
and a couple of things the outer module

427
00:15:52,930 --> 00:15:55,000
here just becomes a simple sort of

428
00:15:55,000 --> 00:15:58,140
closure around around the code I wrote

429
00:15:58,140 --> 00:16:01,330
I'm exporting this class which means I'm

430
00:16:01,330 --> 00:16:03,880
just gonna stick it as a property on the

431
00:16:03,880 --> 00:16:06,700
object that I'm exporting here and we

432
00:16:06,700 --> 00:16:07,630
can do the some of the standard things

433
00:16:07,630 --> 00:16:09,700
that we would do inside any sort of

434
00:16:09,700 --> 00:16:11,740
closure of programming in JavaScript so

435
00:16:11,740 --> 00:16:13,480
I can for instance take that string I'm

436
00:16:13,480 --> 00:16:15,400
using in there and just grab it out as

437
00:16:15,400 --> 00:16:17,310
sort of a local private piece of state

438
00:16:17,310 --> 00:16:20,500
and refer to it like this and you see of

439
00:16:20,500 --> 00:16:21,880
course there were not exporting the data

440
00:16:21,880 --> 00:16:23,620
property but it is being captured in

441
00:16:23,620 --> 00:16:25,780
that in that closure there so do all

442
00:16:25,780 --> 00:16:27,700
those same kinds of programming styles

443
00:16:27,700 --> 00:16:30,070
but again modules are useful to

444
00:16:30,070 --> 00:16:31,780
typescript in particular because they

445
00:16:31,780 --> 00:16:33,880
provide some structure over the types as

446
00:16:33,880 --> 00:16:36,460
well as a structure over the values and

447
00:16:36,460 --> 00:16:38,860
so here we have a greeter type that's

448
00:16:38,860 --> 00:16:41,140
defined inside a sayings module and so

449
00:16:41,140 --> 00:16:42,850
when we hover over this this object here

450
00:16:42,850 --> 00:16:45,010
we see that it's type is saying stock

451
00:16:45,010 --> 00:16:47,020
greeter so this is part of why sort of

452
00:16:47,020 --> 00:16:48,400
all three of these features kind of tie

453
00:16:48,400 --> 00:16:50,170
in and together they're what sort of

454
00:16:50,170 --> 00:16:54,160
makes a lot of this really nice okay so

455
00:16:54,160 --> 00:16:55,630
that's that's a really quick tour

456
00:16:55,630 --> 00:16:57,280
actually one more thing I wanted to show

457
00:16:57,280 --> 00:17:02,800
in here if I just delete this code if

458
00:17:02,800 --> 00:17:06,520
you have a top-level export from a type

459
00:17:06,520 --> 00:17:08,770
script file just like in the equity of

460
00:17:08,770 --> 00:17:10,360
six proposals this defines a sort of

461
00:17:10,360 --> 00:17:12,339
loadable module a module which can be

462
00:17:12,339 --> 00:17:16,180
loaded by a runtime module loader and by

463
00:17:16,180 --> 00:17:18,520
default we actually emit code which is

464
00:17:18,520 --> 00:17:20,380
compatible so the common jeaious module

465
00:17:20,380 --> 00:17:22,780
system so here we we write that onto a

466
00:17:22,780 --> 00:17:25,120
global exports object and so if I have

467
00:17:25,120 --> 00:17:27,490
some common GS loader like if I'm in a

468
00:17:27,490 --> 00:17:30,040
node environment this kind of code is I

469
00:17:30,040 --> 00:17:31,930
can just use to write node modules

470
00:17:31,930 --> 00:17:34,090
effectively we do have a mode on the

471
00:17:34,090 --> 00:17:35,980
compiler where you can say that you want

472
00:17:35,980 --> 00:17:37,750
to target AMD modules instead and then

473
00:17:37,750 --> 00:17:39,610
will code generate code which will be

474
00:17:39,610 --> 00:17:41,800
compatible with any AMD compatible

475
00:17:41,800 --> 00:17:46,120
loader like requirejs so that's that's

476
00:17:46,120 --> 00:17:47,860
sort of the the quick tour of the

477
00:17:47,860 --> 00:17:49,620
language features inside the playground

478
00:17:49,620 --> 00:17:52,930
one thing I wanted to show if I just go

479
00:17:52,930 --> 00:17:55,210
over onto our sample site we have a

480
00:17:55,210 --> 00:17:57,130
handful of samples here that show off a

481
00:17:57,130 --> 00:17:59,130
few different pieces of what you can do

482
00:17:59,130 --> 00:18:01,030
one of them I'll just show some of the

483
00:18:01,030 --> 00:18:02,380
code for is this little you know

484
00:18:02,380 --> 00:18:03,760
battleship simulate

485
00:18:03,760 --> 00:18:06,700
thing here try to blow up one of these

486
00:18:06,700 --> 00:18:10,870
ships good we got one so you know really

487
00:18:10,870 --> 00:18:13,180
simple little app here but I'll open

488
00:18:13,180 --> 00:18:16,930
this up inside visual studio here so one

489
00:18:16,930 --> 00:18:18,970
of the things we made available with the

490
00:18:18,970 --> 00:18:20,950
with typescript earlier this week when

491
00:18:20,950 --> 00:18:23,500
we put it out was a visual studio a

492
00:18:23,500 --> 00:18:25,390
plugin that can really show off kind of

493
00:18:25,390 --> 00:18:27,940
this rich tooling experience inside one

494
00:18:27,940 --> 00:18:30,090
of the tools that we build at Microsoft

495
00:18:30,090 --> 00:18:32,890
and so this is the code for that you

496
00:18:32,890 --> 00:18:35,530
know it's got a few classes in here and

497
00:18:35,530 --> 00:18:37,090
you know the the cell class for instance

498
00:18:37,090 --> 00:18:39,340
has a handful of properties and

499
00:18:39,340 --> 00:18:42,610
functions on it a couple of things that

500
00:18:42,610 --> 00:18:44,560
are interesting I'd sort of talked a

501
00:18:44,560 --> 00:18:46,750
little bit about how some of the Dom API

502
00:18:46,750 --> 00:18:48,220
s are available for you to program

503
00:18:48,220 --> 00:18:49,690
against we have all the type information

504
00:18:49,690 --> 00:18:53,050
for that stuff in in this environment

505
00:18:53,050 --> 00:18:54,970
and so we have things like this HTML

506
00:18:54,970 --> 00:18:57,340
element and this if I just right click

507
00:18:57,340 --> 00:18:59,860
and say go to definition it'll drop us

508
00:18:59,860 --> 00:19:02,200
into this file that we provide called

509
00:19:02,200 --> 00:19:05,470
Lib DTS which is a bunch of declarations

510
00:19:05,470 --> 00:19:08,050
of all of the capabilities that are

511
00:19:08,050 --> 00:19:09,910
available inside inside the browser

512
00:19:09,910 --> 00:19:12,400
environment and this for instance has

513
00:19:12,400 --> 00:19:14,290
the HTML element type and the element

514
00:19:14,290 --> 00:19:16,210
type if I come down here we'll see

515
00:19:16,210 --> 00:19:18,430
things like on click is a property that

516
00:19:18,430 --> 00:19:20,980
HTML elements have and it has you know

517
00:19:20,980 --> 00:19:22,840
it's going to be a property which is a

518
00:19:22,840 --> 00:19:24,640
function that takes a mouse event and

519
00:19:24,640 --> 00:19:27,480
returns code return an arbitrary thing

520
00:19:27,480 --> 00:19:30,670
if I go to Mouse event you'll see sort

521
00:19:30,670 --> 00:19:31,420
of some of the stuff you're probably

522
00:19:31,420 --> 00:19:32,980
familiar with all the kind of properties

523
00:19:32,980 --> 00:19:35,320
that you have available to you on an

524
00:19:35,320 --> 00:19:38,290
event passed back to a mouse event so

525
00:19:38,290 --> 00:19:40,240
this file is about eight thousand lines

526
00:19:40,240 --> 00:19:41,590
of code that was actually generated

527
00:19:41,590 --> 00:19:44,140
automatically from some of the IDL

528
00:19:44,140 --> 00:19:46,180
descriptions that the standards bodies

529
00:19:46,180 --> 00:19:49,240
provide over a lot of the Dom API s and

530
00:19:49,240 --> 00:19:50,530
that means that were able to take all

531
00:19:50,530 --> 00:19:53,140
that information that's available in the

532
00:19:53,140 --> 00:19:54,670
standard from the standard specs and

533
00:19:54,670 --> 00:19:56,590
actually make that available into sort

534
00:19:56,590 --> 00:19:58,000
of tooling environment here so you can

535
00:19:58,000 --> 00:19:59,650
use that for static analysis you can use

536
00:19:59,650 --> 00:20:01,810
that for getting completion lists and

537
00:20:01,810 --> 00:20:03,220
refactoring and all that kind of thing

538
00:20:03,220 --> 00:20:05,800
so this is actually a pretty useful

539
00:20:05,800 --> 00:20:08,890
thing now we do that automatically for

540
00:20:08,890 --> 00:20:10,780
the Dom which is one very big library

541
00:20:10,780 --> 00:20:12,550
but of course we also want that kind of

542
00:20:12,550 --> 00:20:14,530
information to be available for some of

543
00:20:14,530 --> 00:20:16,060
the libraries that you would be either

544
00:20:16,060 --> 00:20:17,560
using or writing or

545
00:20:17,560 --> 00:20:20,020
with and so you see in this example

546
00:20:20,020 --> 00:20:23,080
we're actually also using jQuery and so

547
00:20:23,080 --> 00:20:26,350
if I do dollar you know open paren you

548
00:20:26,350 --> 00:20:28,390
see we can actually get sort of some

549
00:20:28,390 --> 00:20:29,710
some hints about what the different

550
00:20:29,710 --> 00:20:31,840
overloads of this function are and so

551
00:20:31,840 --> 00:20:33,310
it's basically seven different patterns

552
00:20:33,310 --> 00:20:35,650
for how we can call jQuery and they each

553
00:20:35,650 --> 00:20:37,630
take sort of different combinations of

554
00:20:37,630 --> 00:20:39,220
parameters we can get that information

555
00:20:39,220 --> 00:20:43,360
again in the ID environment if I do just

556
00:20:43,360 --> 00:20:45,580
one of these and hit dot yeah you'll see

557
00:20:45,580 --> 00:20:47,200
that we can get back you know is sort of

558
00:20:47,200 --> 00:20:48,490
a list of the members that are available

559
00:20:48,490 --> 00:20:50,740
in here you see things like we have add

560
00:20:50,740 --> 00:20:52,300
class which again is sort of overloaded

561
00:20:52,300 --> 00:20:53,830
there's two sort of valid ways to call

562
00:20:53,830 --> 00:20:56,470
it one of the interesting things to note

563
00:20:56,470 --> 00:21:00,460
is if I go to definition on this it's

564
00:21:00,460 --> 00:21:03,030
gonna drop me into this jQuery DTS file

565
00:21:03,030 --> 00:21:05,350
and this is just a file that we've

566
00:21:05,350 --> 00:21:07,150
written we've sort of written this based

567
00:21:07,150 --> 00:21:09,160
on the jQuery documentation and you know

568
00:21:09,160 --> 00:21:09,970
there's a lot of stuff that actually

569
00:21:09,970 --> 00:21:11,620
isn't captured really fully in the API

570
00:21:11,620 --> 00:21:13,120
documentation so kind of going and

571
00:21:13,120 --> 00:21:15,160
making sure that we have the information

572
00:21:15,160 --> 00:21:17,680
correct beyond that but this is trying

573
00:21:17,680 --> 00:21:19,780
to capture all of the typing of this API

574
00:21:19,780 --> 00:21:21,190
surface area and this is sort of a

575
00:21:21,190 --> 00:21:25,870
formalization of of documentation and so

576
00:21:25,870 --> 00:21:27,010
this is something that you know

577
00:21:27,010 --> 00:21:28,300
obviously we could do this for a bunch

578
00:21:28,300 --> 00:21:29,500
of different libraries and we're talking

579
00:21:29,500 --> 00:21:30,970
to a bunch of library vendors including

580
00:21:30,970 --> 00:21:32,830
the j.crew folks about you know what the

581
00:21:32,830 --> 00:21:35,050
best approach is for developing and

582
00:21:35,050 --> 00:21:37,140
maintaining these things going forward

583
00:21:37,140 --> 00:21:39,430
but one of the particularly notable

584
00:21:39,430 --> 00:21:40,990
things about this is that in my worship

585
00:21:40,990 --> 00:21:44,710
example I'm using both jQuery and jQuery

586
00:21:44,710 --> 00:21:50,220
UI you can see up here and jQuery is is

587
00:21:50,220 --> 00:21:52,210
uses a pattern that you know several

588
00:21:52,210 --> 00:21:54,790
libraries use in JavaScript where they

589
00:21:54,790 --> 00:21:56,680
still have a plug-in model where they

590
00:21:56,680 --> 00:21:59,290
the plugins can actually sort of expand

591
00:21:59,290 --> 00:22:01,780
the capabilities of existing libraries

592
00:22:01,780 --> 00:22:04,210
so for instance typical jQuery plug-in

593
00:22:04,210 --> 00:22:06,790
will actually go and extend the jQuery

594
00:22:06,790 --> 00:22:09,160
prototype with some new capabilities and

595
00:22:09,160 --> 00:22:11,680
also potentially extend the dollar

596
00:22:11,680 --> 00:22:14,530
object itself and this kind of sort of

597
00:22:14,530 --> 00:22:17,440
dynamic extension of existing objects is

598
00:22:17,440 --> 00:22:18,900
one of the things that traditionally

599
00:22:18,900 --> 00:22:21,430
static type systems have not been as

600
00:22:21,430 --> 00:22:22,870
expressive with and it's one of the

601
00:22:22,870 --> 00:22:25,030
reasons why typically you know these

602
00:22:25,030 --> 00:22:27,430
kinds of things are done in languages

603
00:22:27,430 --> 00:22:28,870
like JavaScript which have a much more

604
00:22:28,870 --> 00:22:31,000
dynamic type system

605
00:22:31,000 --> 00:22:32,409
in typescript we really wanted to make

606
00:22:32,409 --> 00:22:34,059
sure we were able to capture all these

607
00:22:34,059 --> 00:22:36,429
kinds of patterns because they are so so

608
00:22:36,429 --> 00:22:38,559
commonly used in a lot of JavaScript

609
00:22:38,559 --> 00:22:40,299
libraries and so one of things we let

610
00:22:40,299 --> 00:22:43,690
you do is actually extend interfaces so

611
00:22:43,690 --> 00:22:45,909
for instance when I have the draggable

612
00:22:45,909 --> 00:22:48,280
member here if I go to definition on

613
00:22:48,280 --> 00:22:52,330
that you'll see that actually drops me

614
00:22:52,330 --> 00:22:54,070
into a different file so I'm not in

615
00:22:54,070 --> 00:22:57,520
jQuery DITA TSM and jQuery UI dot DTS

616
00:22:57,520 --> 00:22:59,980
and what I did here is I just wrote

617
00:22:59,980 --> 00:23:01,659
another definition of the interface and

618
00:23:01,659 --> 00:23:03,370
basically what types is gonna do is look

619
00:23:03,370 --> 00:23:05,080
for all the definitions of the jQuery

620
00:23:05,080 --> 00:23:06,280
interface and just merge them together

621
00:23:06,280 --> 00:23:08,500
and this means that sort of different

622
00:23:08,500 --> 00:23:10,450
different authors working on different

623
00:23:10,450 --> 00:23:11,830
components which might extend one

624
00:23:11,830 --> 00:23:13,419
another can work on those things in

625
00:23:13,419 --> 00:23:15,130
parallel and don't have to sort of agree

626
00:23:15,130 --> 00:23:17,710
on what their shared surface area is and

627
00:23:17,710 --> 00:23:19,299
this actually allows sort of a lot of

628
00:23:19,299 --> 00:23:23,740
that flexibility that you get with with

629
00:23:23,740 --> 00:23:25,980
sort of these kind of plug-in models

630
00:23:25,980 --> 00:23:29,620
okay so that's a quick look at at this

631
00:23:29,620 --> 00:23:31,780
sample so I've showed Visual Studio and

632
00:23:31,780 --> 00:23:34,110
I've showed the the types of playground

633
00:23:34,110 --> 00:23:37,750
we also make available an NPM package so

634
00:23:37,750 --> 00:23:41,549
I can you know install typescript and

635
00:23:41,549 --> 00:23:44,500
when I install type script using NPM I

636
00:23:44,500 --> 00:23:48,429
get a TSC type ship compiler and I can

637
00:23:48,429 --> 00:23:49,659
just run that and you see it's just a

638
00:23:49,659 --> 00:23:51,070
standard sort of compiler that I can

639
00:23:51,070 --> 00:23:52,960
plug into any tool chains the cloud9

640
00:23:52,960 --> 00:23:54,549
guys yesterday showed how they're using

641
00:23:54,549 --> 00:23:56,500
this on their server to provide some

642
00:23:56,500 --> 00:23:59,500
basic tooling services inside cloud 9

643
00:23:59,500 --> 00:24:02,380
over top of typescript and this you know

644
00:24:02,380 --> 00:24:03,640
this is basically a compiler you can

645
00:24:03,640 --> 00:24:07,710
plug into to any any compilation chain

646
00:24:07,710 --> 00:24:11,590
the we support both you know NPM as an

647
00:24:11,590 --> 00:24:12,850
installation mechanism but of course

648
00:24:12,850 --> 00:24:14,620
also if you want to use typescript for

649
00:24:14,620 --> 00:24:16,780
node development or really any kind of

650
00:24:16,780 --> 00:24:19,150
JavaScript development you can use it

651
00:24:19,150 --> 00:24:20,260
there and so I just want to show a

652
00:24:20,260 --> 00:24:23,770
really quick example of have a node app

653
00:24:23,770 --> 00:24:28,000
here so let me open up this image board

654
00:24:28,000 --> 00:24:30,280
app and so this image board app is a is

655
00:24:30,280 --> 00:24:33,909
a basic node express based application

656
00:24:33,909 --> 00:24:36,159
the one thing that's kind of maybe a

657
00:24:36,159 --> 00:24:37,360
little bit different from what you might

658
00:24:37,360 --> 00:24:39,580
expect to see in a standard node app is

659
00:24:39,580 --> 00:24:40,870
that instead of just calling require

660
00:24:40,870 --> 00:24:42,950
directly which is a very dynamic

661
00:24:42,950 --> 00:24:46,790
API we have a sort of a declarative

662
00:24:46,790 --> 00:24:48,920
forum for import and export this is

663
00:24:48,920 --> 00:24:51,920
again based on the es6 module

664
00:24:51,920 --> 00:24:54,410
import/export syntax and the key reason

665
00:24:54,410 --> 00:24:55,400
this is important is because it allows

666
00:24:55,400 --> 00:24:58,730
us to know not just that this Express

667
00:24:58,730 --> 00:25:00,440
object has been has been brought into

668
00:25:00,440 --> 00:25:02,540
the environment but also that any types

669
00:25:02,540 --> 00:25:04,550
that live within that module that we can

670
00:25:04,550 --> 00:25:07,130
we can refer to those so for instance

671
00:25:07,130 --> 00:25:09,080
when I have expressed here you know that

672
00:25:09,080 --> 00:25:11,030
refers to the Express module but

673
00:25:11,030 --> 00:25:12,500
expressed our crate server actually

674
00:25:12,500 --> 00:25:16,190
returns a express dot Express server

675
00:25:16,190 --> 00:25:18,440
type and so this type was defined inside

676
00:25:18,440 --> 00:25:19,820
that module and is something that we can

677
00:25:19,820 --> 00:25:22,540
get back inside this environment now

678
00:25:22,540 --> 00:25:24,950
this this application here for instance

679
00:25:24,950 --> 00:25:27,590
uses a few other libraries so if I go

680
00:25:27,590 --> 00:25:30,350
into this DB this is representing my

681
00:25:30,350 --> 00:25:32,960
database connection and you see a few

682
00:25:32,960 --> 00:25:34,760
things one it uses MongoDB and we have a

683
00:25:34,760 --> 00:25:36,650
sort of fairly rudimentary library

684
00:25:36,650 --> 00:25:40,610
typing over the node MongoDB wrapper but

685
00:25:40,610 --> 00:25:42,110
you can also use interfaces for instance

686
00:25:42,110 --> 00:25:44,330
to describe what our intent is for the

687
00:25:44,330 --> 00:25:45,980
shape of data that lives in our in our

688
00:25:45,980 --> 00:25:47,870
MongoDB database so if we're calling

689
00:25:47,870 --> 00:25:50,540
some some remote i/o capability either

690
00:25:50,540 --> 00:25:53,660
into a database or across to a some web

691
00:25:53,660 --> 00:25:56,720
service we can we can sort of describe

692
00:25:56,720 --> 00:25:58,580
what we expect the shape of that API to

693
00:25:58,580 --> 00:26:00,200
be and we'll get checking against that

694
00:26:00,200 --> 00:26:01,670
and it's no runtime guarantee that our

695
00:26:01,670 --> 00:26:03,410
data does have that shape but it will

696
00:26:03,410 --> 00:26:04,670
make sure that as we're writing code we

697
00:26:04,670 --> 00:26:08,990
get the help against that and so let me

698
00:26:08,990 --> 00:26:12,290
just let me just go in here and and just

699
00:26:12,290 --> 00:26:16,310
show that running for a second so if I

700
00:26:16,310 --> 00:26:19,130
come in here and I look at that file you

701
00:26:19,130 --> 00:26:21,620
see we were we were looking at app TS so

702
00:26:21,620 --> 00:26:24,800
I can just run TS c m TS it actually

703
00:26:24,800 --> 00:26:26,090
goes and finds all those dependent

704
00:26:26,090 --> 00:26:28,100
dependent files and compiles them and

705
00:26:28,100 --> 00:26:31,700
then we can just run node on our app and

706
00:26:31,700 --> 00:26:40,940
go - there we go so we have a simple you

707
00:26:40,940 --> 00:26:44,390
know app running here against node saw

708
00:26:44,390 --> 00:26:45,590
the great category theory talked

709
00:26:45,590 --> 00:26:47,810
yesterday we you know we have books that

710
00:26:47,810 --> 00:26:49,760
I like they the working categories for

711
00:26:49,760 --> 00:26:51,950
the workingman efficient but basic just

712
00:26:51,950 --> 00:26:53,900
simple app here that we can we can use

713
00:26:53,900 --> 00:26:56,480
against node ok

714
00:26:56,480 --> 00:26:59,810
so that's a quick look at sort of

715
00:26:59,810 --> 00:27:01,040
although the main piece of technology

716
00:27:01,040 --> 00:27:02,810
the last thing I want to show is Anders

717
00:27:02,810 --> 00:27:04,850
mentioned at the end there we've we've

718
00:27:04,850 --> 00:27:05,900
put all this out

719
00:27:05,900 --> 00:27:09,170
open-source so the all the compiler and

720
00:27:09,170 --> 00:27:10,760
the core language services that that you

721
00:27:10,760 --> 00:27:13,280
would need to use to build any tooling

722
00:27:13,280 --> 00:27:15,650
on top of this are available here on

723
00:27:15,650 --> 00:27:18,890
CodePlex we we use git so you know if

724
00:27:18,890 --> 00:27:21,080
you want to clone this you can you can

725
00:27:21,080 --> 00:27:23,900
do that off of the CodePlex link and

726
00:27:23,900 --> 00:27:26,450
yeah and we were doing don't have an

727
00:27:26,450 --> 00:27:29,600
interconnection but yeah so we're using

728
00:27:29,600 --> 00:27:32,660
we're using complex and and get for the

729
00:27:32,660 --> 00:27:35,120
open source project so that's a quick

730
00:27:35,120 --> 00:27:36,110
summary of what we're doing with

731
00:27:36,110 --> 00:27:37,880
typescript but we definitely love to

732
00:27:37,880 --> 00:27:40,310
have any questions that you guys have so

733
00:27:40,310 --> 00:27:53,030
thanks thank you

734
00:27:53,040 --> 00:27:57,030
I got a question over here

735
00:27:57,030 --> 00:27:59,700
very cool is there a way to do modular

736
00:27:59,700 --> 00:28:02,220
exports equals it's a great question

737
00:28:02,220 --> 00:28:05,520
there is not currently we would love to

738
00:28:05,520 --> 00:28:07,050
do something like that I think we we

739
00:28:07,050 --> 00:28:08,610
want to make sure we work on that along

740
00:28:08,610 --> 00:28:10,620
with the standards body the in the air

741
00:28:10,620 --> 00:28:12,000
six proposals there was not yet a way to

742
00:28:12,000 --> 00:28:13,320
do that either

743
00:28:13,320 --> 00:28:16,620
but I think we I think in both places we

744
00:28:16,620 --> 00:28:18,090
have to do something about that problem

745
00:28:18,090 --> 00:28:25,260
so yeah so what's the support plan in

746
00:28:25,260 --> 00:28:27,390
terms of Microsoft and typescript how

747
00:28:27,390 --> 00:28:29,310
like if I wanted to go build something

748
00:28:29,310 --> 00:28:31,110
that I would like to last for a long

749
00:28:31,110 --> 00:28:33,270
time what what kind of commitment is

750
00:28:33,270 --> 00:28:34,830
Microsoft happening

751
00:28:34,830 --> 00:28:37,050
so I'd say you know right now we've what

752
00:28:37,050 --> 00:28:39,300
we have out is a preview it's a point

753
00:28:39,300 --> 00:28:42,150
you know Oh point eight release where

754
00:28:42,150 --> 00:28:44,540
we're hoping to be at at one point oh

755
00:28:44,540 --> 00:28:48,360
sometime in the next year certainly but

756
00:28:48,360 --> 00:28:50,310
but we'll see you know we're putting it

757
00:28:50,310 --> 00:28:51,390
out there trying to get the feedback now

758
00:28:51,390 --> 00:28:53,190
we'll see where that goes we certainly

759
00:28:53,190 --> 00:28:55,320
have you know a long-term commitment to

760
00:28:55,320 --> 00:28:56,550
trying to make this thing into something

761
00:28:56,550 --> 00:28:58,620
useful we would love to build great

762
00:28:58,620 --> 00:29:01,200
tools around this we'd love to to

763
00:29:01,200 --> 00:29:03,300
generally support this but you know

764
00:29:03,300 --> 00:29:04,620
we'll see it's going to depend a bit on

765
00:29:04,620 --> 00:29:07,170
you know how much you guys like it how

766
00:29:07,170 --> 00:29:08,340
much investment were able to put into it

767
00:29:08,340 --> 00:29:12,180
oh here I got two questions so um we're

768
00:29:12,180 --> 00:29:14,360
working back on Bespin back in days

769
00:29:14,360 --> 00:29:17,580
better-quality wrote in library that in

770
00:29:17,580 --> 00:29:19,800
interference types for libraries like

771
00:29:19,800 --> 00:29:22,950
jQuery and there's also dr. Jas and with

772
00:29:22,950 --> 00:29:25,920
interference and types of JavaScript so

773
00:29:25,920 --> 00:29:28,590
do you plan to come up with some kind of

774
00:29:28,590 --> 00:29:31,320
tool way to stomp your library do some

775
00:29:31,320 --> 00:29:33,270
kind of more advanced analysis and then

776
00:29:33,270 --> 00:29:36,060
you create at least some interfaces that

777
00:29:36,060 --> 00:29:39,540
don't have to do that yourself and the

778
00:29:39,540 --> 00:29:41,700
other question is what are you doing if

779
00:29:41,700 --> 00:29:46,560
you pass in so for an argument if if the

780
00:29:46,560 --> 00:29:48,390
shape doesn't match so because you might

781
00:29:48,390 --> 00:29:51,630
have one tie or you have one kind of

782
00:29:51,630 --> 00:29:54,930
class which has this shape in for a same

783
00:29:54,930 --> 00:29:56,730
argument different shape and then you do

784
00:29:56,730 --> 00:29:58,830
an instance off track to do different

785
00:29:58,830 --> 00:30:00,150
code passwords in the financials if

786
00:30:00,150 --> 00:30:02,670
that's posture I could take the first

787
00:30:02,670 --> 00:30:04,290
one maybe you wanna take the second one

788
00:30:04,290 --> 00:30:06,420
for sure but with respect to a different

789
00:30:06,420 --> 00:30:07,140
shape classes

790
00:30:07,140 --> 00:30:09,180
the type system is a structural type

791
00:30:09,180 --> 00:30:11,490
system so so it doesn't really matter

792
00:30:11,490 --> 00:30:12,750
you can define the same interface

793
00:30:12,750 --> 00:30:14,790
umpteen times as long as they are

794
00:30:14,790 --> 00:30:16,290
structurally compatible have to say

795
00:30:16,290 --> 00:30:18,780
members you can substitute one for for

796
00:30:18,780 --> 00:30:23,190
the other yeah so I think maybe I got

797
00:30:23,190 --> 00:30:24,990
the question that the way we would

798
00:30:24,990 --> 00:30:26,190
normally solve that is with overloading

799
00:30:26,190 --> 00:30:27,750
so I don't know if I explicitly showed

800
00:30:27,750 --> 00:30:29,100
it but you can sort of have overloaded

801
00:30:29,100 --> 00:30:30,750
signatures and so you can say that this

802
00:30:30,750 --> 00:30:33,000
this function takes any of these five

803
00:30:33,000 --> 00:30:35,490
shapes and those shapes can include two

804
00:30:35,490 --> 00:30:37,710
different two different object pattern

805
00:30:37,710 --> 00:30:39,900
object shapes effectively and then you

806
00:30:39,900 --> 00:30:41,070
would implement that by having an

807
00:30:41,070 --> 00:30:42,540
instance of check that split at runtime

808
00:30:42,540 --> 00:30:43,770
or what you know however you do it in

809
00:30:43,770 --> 00:30:45,690
JavaScript today but typically that can

810
00:30:45,690 --> 00:30:47,370
be the intent can be described by a set

811
00:30:47,370 --> 00:30:48,960
of overloads and that's how we do it we

812
00:30:48,960 --> 00:30:50,460
don't have a union type for instance I

813
00:30:50,460 --> 00:30:53,070
think the other question in getting the

814
00:30:53,070 --> 00:30:55,020
types automatic automatic aliy out of

815
00:30:55,020 --> 00:30:57,240
existing JavaScript we know that that's

816
00:30:57,240 --> 00:30:58,560
sort of the whole point of this is

817
00:30:58,560 --> 00:31:00,210
effectively that that's not possible to

818
00:31:00,210 --> 00:31:02,130
do 100% correctly because you know if we

819
00:31:02,130 --> 00:31:03,330
could just get all the types out of

820
00:31:03,330 --> 00:31:04,710
plain JavaScript it wouldn't need to do

821
00:31:04,710 --> 00:31:06,900
all this type annotation stuff but we do

822
00:31:06,900 --> 00:31:08,370
think there's a lot we could do to try

823
00:31:08,370 --> 00:31:11,310
to get you 50 60 70 I don't know how

824
00:31:11,310 --> 00:31:12,870
exactly how far it is but percent of the

825
00:31:12,870 --> 00:31:15,480
way along that process using some

826
00:31:15,480 --> 00:31:16,920
automated tools kind of like the things

827
00:31:16,920 --> 00:31:18,810
you mentioned and I think we that's

828
00:31:18,810 --> 00:31:19,950
that's an area we're definitely gonna be

829
00:31:19,950 --> 00:31:21,660
looking into as we try to help people to

830
00:31:21,660 --> 00:31:25,860
create these library typing assets cool

831
00:31:25,860 --> 00:31:26,880
all right we're out of time

832
00:31:26,880 --> 00:31:29,160
unfortunately but you know where to find

833
00:31:29,160 --> 00:31:31,530
these guys so uh thank you guys for

