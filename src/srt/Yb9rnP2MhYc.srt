1
00:00:08,510 --> 00:00:17,910

hi seems cool yeah so I've been giving a

2
00:00:17,910 --> 00:00:20,850
lot of introduction talks to note in the

3
00:00:20,850 --> 00:00:24,390
last couple months and its really nice

4
00:00:24,390 --> 00:00:27,330
to come to Jas Compton and be able to

5
00:00:27,330 --> 00:00:30,779
make some small assumption about people

6
00:00:30,779 --> 00:00:33,630
here knowing what note is and what it

7
00:00:33,630 --> 00:00:37,829
does so I'm going to take the

8
00:00:37,829 --> 00:00:43,320
opportunity to give you some things in

9
00:00:43,320 --> 00:00:46,680
note that are less than perfect and that

10
00:00:46,680 --> 00:00:51,719
need to be done and to hopefully

11
00:00:51,719 --> 00:00:54,690
encourage some of you to contribute to

12
00:00:54,690 --> 00:00:56,910
the project and work on these problems I

13
00:00:56,910 --> 00:00:59,989
think that they're all kind of fun and

14
00:00:59,989 --> 00:01:06,659
there's a lot of stuff to do so yes note

15
00:01:06,659 --> 00:01:10,680
is gaining popularity it's really it's

16
00:01:10,680 --> 00:01:14,159
really interesting and fun and I think

17
00:01:14,159 --> 00:01:18,390
that you know it it actually has a

18
00:01:18,390 --> 00:01:20,670
chance of becoming a real application

19
00:01:20,670 --> 00:01:27,450
platform and we should work very hard to

20
00:01:27,450 --> 00:01:30,299
try to make that the case or at least

21
00:01:30,299 --> 00:01:35,909
I'm going to so yeah I hope that this

22
00:01:35,909 --> 00:01:38,729
encourages somebody to work on some

23
00:01:38,729 --> 00:01:44,909
stuff in note so problem one is the ssl

24
00:01:44,909 --> 00:01:52,079
support in in node is is lacking and its

25
00:01:52,079 --> 00:01:58,730
really unacceptable SSL is very much

26
00:01:58,730 --> 00:02:01,400
an infrastructural protocol you almost

27
00:02:01,400 --> 00:02:05,150
can't do internet without it and maybe

28
00:02:05,150 --> 00:02:06,620
this wasn't the case a couple of years

29
00:02:06,620 --> 00:02:09,500
ago but these days with more and more

30
00:02:09,500 --> 00:02:16,400
websites defaulting to to SSL it really

31
00:02:16,400 --> 00:02:20,780
needs to be done correctly and currently

32
00:02:20,780 --> 00:02:24,950
Note has some bindings to openssl but

33
00:02:24,950 --> 00:02:29,320
their buggy and they're incomplete and

34
00:02:29,320 --> 00:02:34,000
they're not implemented in the best way

35
00:02:34,000 --> 00:02:37,640
they're very much tied too tight into

36
00:02:37,640 --> 00:02:40,490
the socket code and should be separated

37
00:02:40,490 --> 00:02:44,480
a bit and all this makes for something

38
00:02:44,480 --> 00:02:47,900
that is ultimately unusable and so so

39
00:02:47,900 --> 00:02:51,860
this is really not acceptable and so I

40
00:02:51,860 --> 00:02:54,860
think probably the most important

41
00:02:54,860 --> 00:02:57,590
problem that needs to be done with note

42
00:02:57,590 --> 00:03:01,460
is is that we need to have really good

43
00:03:01,460 --> 00:03:07,810
support for for client and server ssl

44
00:03:07,810 --> 00:03:10,220
with all these cool features you know

45
00:03:10,220 --> 00:03:12,320
there there's a lot of talk about how to

46
00:03:12,320 --> 00:03:15,800
speed up you know that the handshake

47
00:03:15,800 --> 00:03:20,390
process and some of the new features and

48
00:03:20,390 --> 00:03:22,970
that you can do with with SSL and I

49
00:03:22,970 --> 00:03:27,230
think that you know we're kind of

50
00:03:27,230 --> 00:03:30,489
starting from scratch with note and so

51
00:03:30,489 --> 00:03:32,450
we might want to take this opportunity

52
00:03:32,450 --> 00:03:38,090
to see how far we can we can go forward

53
00:03:38,090 --> 00:03:40,730
with this can can we actually you know

54
00:03:40,730 --> 00:03:43,480
implement a snap start sort of thing

55
00:03:43,480 --> 00:03:46,970
even if openssl doesn't actually support

56
00:03:46,970 --> 00:03:51,860
it yet

57
00:03:51,870 --> 00:03:57,160
the second most important problem is the

58
00:03:57,160 --> 00:04:00,280
fact that node is very much focused on

59
00:04:00,280 --> 00:04:04,180
performance and a lot of thought goes

60
00:04:04,180 --> 00:04:07,300
into how to make things as fast as

61
00:04:07,300 --> 00:04:11,050
possible yet more or less we're

62
00:04:11,050 --> 00:04:15,370
developing blindly so that we don't have

63
00:04:15,370 --> 00:04:18,010
a continuous integration system for

64
00:04:18,010 --> 00:04:21,880
performance tests there's been some work

65
00:04:21,880 --> 00:04:25,300
done in this area to kind of get a

66
00:04:25,300 --> 00:04:27,460
website up and have built bots that

67
00:04:27,460 --> 00:04:30,550
produce graphs but there was too much

68
00:04:30,550 --> 00:04:32,470
noise in the graphs and the the

69
00:04:32,470 --> 00:04:34,889
benchmarks weren't weren't so effective

70
00:04:34,889 --> 00:04:38,229
and build BOTS not it's kind of an

71
00:04:38,229 --> 00:04:40,180
external project from note itself but

72
00:04:40,180 --> 00:04:42,600
it's really important we need to know

73
00:04:42,600 --> 00:04:46,120
when we make changes if it's affecting a

74
00:04:46,120 --> 00:04:48,130
certain part of the system so at the

75
00:04:48,130 --> 00:04:49,780
moment really the only thing that that's

76
00:04:49,780 --> 00:04:54,370
being tested very often is the HGP hello

77
00:04:54,370 --> 00:04:57,760
world server which is not really

78
00:04:57,760 --> 00:05:00,460
important but basically anybody who

79
00:05:00,460 --> 00:05:03,370
comes to note and tries it out is going

80
00:05:03,370 --> 00:05:05,410
to open it up in write a HelloWorld

81
00:05:05,410 --> 00:05:08,590
server in and see how fast is and you

82
00:05:08,590 --> 00:05:10,270
know stupidly based their decision off

83
00:05:10,270 --> 00:05:12,580
of that so we should address that point

84
00:05:12,580 --> 00:05:17,110
if and I mean a hello world server does

85
00:05:17,110 --> 00:05:20,050
exercise a lot of code but there's other

86
00:05:20,050 --> 00:05:25,450
issues for example startup time it's

87
00:05:25,450 --> 00:05:27,039
currently something like 40 milliseconds

88
00:05:27,039 --> 00:05:32,039
on my laptop on the palm device it's

89
00:05:32,039 --> 00:05:37,510
more than a second so this stuff needs

90
00:05:37,510 --> 00:05:41,139
to be considered and we need to know

91
00:05:41,139 --> 00:05:43,900
that when changes are being done that

92
00:05:43,900 --> 00:05:54,659
they're not affecting performance

93
00:05:54,669 --> 00:05:58,610
note introduces kind of some new ideas

94
00:05:58,610 --> 00:06:00,949
about programming servers not not

95
00:06:00,949 --> 00:06:03,860
necessarily new but takes them to an

96
00:06:03,860 --> 00:06:08,060
extreme level and so if you've done

97
00:06:08,060 --> 00:06:11,060
something with node you might realize

98
00:06:11,060 --> 00:06:13,819
that you get into this situation pretty

99
00:06:13,819 --> 00:06:17,860
often where an event is triggered and

100
00:06:17,860 --> 00:06:20,240
you'll get an exception and you'll see

101
00:06:20,240 --> 00:06:22,719
your stack trace and it's very small

102
00:06:22,719 --> 00:06:25,759
because you're you're constantly killing

103
00:06:25,759 --> 00:06:27,919
your it's a single step so you're

104
00:06:27,919 --> 00:06:30,229
constantly trashing it all the time

105
00:06:30,229 --> 00:06:33,500
every every every event you're you throw

106
00:06:33,500 --> 00:06:35,180
it away and so you get very little

107
00:06:35,180 --> 00:06:37,969
context into where errors are coming

108
00:06:37,969 --> 00:06:42,500
from so like this example you have to

109
00:06:42,500 --> 00:06:45,560
set timeouts and you don't know

110
00:06:45,560 --> 00:06:48,289
beforehand which one necessarily is

111
00:06:48,289 --> 00:06:50,990
going to execute the function f but one

112
00:06:50,990 --> 00:06:53,180
of them is I mean this is very contrived

113
00:06:53,180 --> 00:06:55,639
but you could you can imagine and you've

114
00:06:55,639 --> 00:06:57,440
probably experienced situations where

115
00:06:57,440 --> 00:06:59,839
two different events can lead to a

116
00:06:59,839 --> 00:07:02,810
certain function and you need to know

117
00:07:02,810 --> 00:07:05,089
where it originated from to solve the

118
00:07:05,089 --> 00:07:11,930
problem how do you deal with this when

119
00:07:11,930 --> 00:07:15,469
one solution of course is is some sort

120
00:07:15,469 --> 00:07:19,120
of green thread co routine continued

121
00:07:19,120 --> 00:07:26,330
continuation passing thing I don't want

122
00:07:26,330 --> 00:07:29,000
to go into that at the moment but note

123
00:07:29,000 --> 00:07:34,250
is not going to do that so right you

124
00:07:34,250 --> 00:07:36,860
might get an error like this which you

125
00:07:36,860 --> 00:07:38,599
know references the fact that there is a

126
00:07:38,599 --> 00:07:40,939
neck section throne but doesn't actually

127
00:07:40,939 --> 00:07:43,069
tell you from which set time outfit came

128
00:07:43,069 --> 00:07:48,229
from so it's really hard to debug how

129
00:07:48,229 --> 00:07:50,930
can we solve this problem it's not like

130
00:07:50,930 --> 00:07:53,180
you know written into the laws of

131
00:07:53,180 --> 00:07:55,639
physics that you need co routines to

132
00:07:55,639 --> 00:07:57,180
solve this problem

133
00:07:57,180 --> 00:07:58,610
perhaps we can think of something else

134
00:07:58,610 --> 00:08:02,520
what if we limit ourselves to this to

135
00:08:02,520 --> 00:08:04,500
this single stack world can we think of

136
00:08:04,500 --> 00:08:08,140
some other ways of solving this problem

137
00:08:08,150 --> 00:08:11,940
maybe every time you set up a new event

138
00:08:11,940 --> 00:08:14,940
like startup set timeout if you make a

139
00:08:14,940 --> 00:08:20,190
link to the previous event that created

140
00:08:20,190 --> 00:08:22,610
that thing and you have this kind of

141
00:08:22,610 --> 00:08:25,740
list of things that you could walk back

142
00:08:25,740 --> 00:08:28,169
through history to find out where it

143
00:08:28,169 --> 00:08:36,300
came from of course there's other things

144
00:08:36,300 --> 00:08:38,940
that can be done with debugging v8 has

145
00:08:38,940 --> 00:08:43,890
this really nice tcp server that that it

146
00:08:43,890 --> 00:08:45,959
can start up and you can connect to it

147
00:08:45,959 --> 00:08:49,940
and write a little JSON protocol between

148
00:08:49,940 --> 00:08:53,209
the node process and your debugger and

149
00:08:53,209 --> 00:08:57,270
kind of get information set set

150
00:08:57,270 --> 00:09:01,100
breakpoints step through the execution

151
00:09:01,100 --> 00:09:04,110
so you can do this currently with note

152
00:09:04,110 --> 00:09:07,230
you do know dash dash debug and it will

153
00:09:07,230 --> 00:09:13,500
start the server but it would be nice to

154
00:09:13,500 --> 00:09:19,480
be able to turn this on dynamically so

155
00:09:19,490 --> 00:09:22,950
maybe by sending the process of signal

156
00:09:22,950 --> 00:09:24,779
it would start this TCP server and then

157
00:09:24,779 --> 00:09:26,910
you could connect to it and and do stuff

158
00:09:26,910 --> 00:09:31,740
and the v8 has has this live edit

159
00:09:31,740 --> 00:09:33,480
feature which allows you to actually

160
00:09:33,480 --> 00:09:35,730
change the running code and so I think

161
00:09:35,730 --> 00:09:38,779
for a lot of people who are doing

162
00:09:38,779 --> 00:09:41,279
frameworks on top of note that this

163
00:09:41,279 --> 00:09:44,760
would be a really useful thing that you

164
00:09:44,760 --> 00:09:46,890
could run your application at a normal

165
00:09:46,890 --> 00:09:49,589
speed and then turn on this debugger

166
00:09:49,589 --> 00:09:52,800
send the changes to the code change

167
00:09:52,800 --> 00:09:55,770
change the send the diffs to to what

168
00:09:55,770 --> 00:09:57,770
you've changed in the code and

169
00:09:57,770 --> 00:09:59,940
disconnected and have it still running

170
00:09:59,940 --> 00:10:05,640
but at a normal speed it would be nice

171
00:10:05,640 --> 00:10:07,210
to

172
00:10:07,210 --> 00:10:10,340
hit the process with a signal and get

173
00:10:10,340 --> 00:10:13,990
some sort of heat profile or CPU profile

174
00:10:13,990 --> 00:10:17,180
turns out and note one of the things

175
00:10:17,180 --> 00:10:19,010
that we learned from from doing the node

176
00:10:19,010 --> 00:10:23,240
knockout contest was there's often

177
00:10:23,240 --> 00:10:25,250
memory leaks and in node programs it's

178
00:10:25,250 --> 00:10:28,670
it's hard to debug where these leaks in

179
00:10:28,670 --> 00:10:32,350
your JavaScript objects are coming from

180
00:10:32,350 --> 00:10:35,090
it would be nice to be able to just kind

181
00:10:35,090 --> 00:10:37,730
of hit your running server and get a

182
00:10:37,730 --> 00:10:44,030
heat profile dtrace proked Joanne

183
00:10:44,030 --> 00:10:46,100
recently hired brian Cantrell who's the

184
00:10:46,100 --> 00:10:50,750
one of the creators of DTrace and so we

185
00:10:50,750 --> 00:10:54,230
have plans to put these probes in as

186
00:10:54,230 --> 00:10:58,550
much as possible so would be really nice

187
00:10:58,550 --> 00:11:00,080
to get them into function calls so that

188
00:11:00,080 --> 00:11:03,380
you could actually you know get stack

189
00:11:03,380 --> 00:11:06,230
traces on CC where certain things

190
00:11:06,230 --> 00:11:09,790
originated from with respect to to

191
00:11:09,790 --> 00:11:15,230
JavaScript function calls but these

192
00:11:15,230 --> 00:11:19,340
things seem hard it seems that that

193
00:11:19,340 --> 00:11:21,980
inspecting the the VA keep and finding

194
00:11:21,980 --> 00:11:25,330
out looking inspecting these objects is

195
00:11:25,330 --> 00:11:31,230
probably going to be difficult so anyway

196
00:11:31,240 --> 00:11:34,580
event emitter firing possibly some

197
00:11:34,580 --> 00:11:36,560
things on the thread pool just event

198
00:11:36,560 --> 00:11:38,540
everywhere so that we can we can kind of

199
00:11:38,540 --> 00:11:40,700
poke at these processes and see what

200
00:11:40,700 --> 00:11:42,830
they're doing and be able to inspect

201
00:11:42,830 --> 00:11:50,150
note processes the fourth most important

202
00:11:50,150 --> 00:11:53,810
problem is windows which almost nobody

203
00:11:53,810 --> 00:11:56,980
cares about except for everybody which

204
00:11:56,980 --> 00:11:59,540
is a bit unfortunate i certainly don't

205
00:11:59,540 --> 00:12:03,320
care about windows i just would like to

206
00:12:03,320 --> 00:12:07,130
run on windows so currently we have a

207
00:12:07,130 --> 00:12:12,170
cig wind fort which is as far as i'm

208
00:12:12,170 --> 00:12:15,230
concerned fine but windows people tell

209
00:12:15,230 --> 00:12:17,960
me that windows people don't like that

210
00:12:17,960 --> 00:12:22,370
and so it would be nice to have a native

211
00:12:22,370 --> 00:12:25,010
windows port I'm it is a significant

212
00:12:25,010 --> 00:12:28,040
user base and it's really you can't just

213
00:12:28,040 --> 00:12:30,950
ignore it you have to have some story

214
00:12:30,950 --> 00:12:35,260
there and for the moment cygwin is

215
00:12:35,260 --> 00:12:38,270
reasonable but I think having a native

216
00:12:38,270 --> 00:12:41,330
like an actual real native windows

217
00:12:41,330 --> 00:12:45,230
program that ran well would be very

218
00:12:45,230 --> 00:12:47,840
beneficial to a lot of people there's no

219
00:12:47,840 --> 00:12:49,910
reason that we can't be doing windows

220
00:12:49,910 --> 00:12:57,380
GUI apps with note so it's just that it

221
00:12:57,380 --> 00:12:59,420
seems like it's going to be very hard

222
00:12:59,420 --> 00:13:04,400
note is very much a UNIX program and not

223
00:13:04,400 --> 00:13:08,840
a windows program and so in particular

224
00:13:08,840 --> 00:13:11,840
the the event loop abstraction library

225
00:13:11,840 --> 00:13:14,830
that note uses Libby V doesn't doesn't

226
00:13:14,830 --> 00:13:21,460
support Windows very well it seems like

227
00:13:21,460 --> 00:13:26,060
this can be dealt with but it's going to

228
00:13:26,060 --> 00:13:29,630
really require some effort and it

229
00:13:29,630 --> 00:13:33,830
requires somebody who's very familiar

230
00:13:33,830 --> 00:13:37,490
with with windows system programming so

231
00:13:37,490 --> 00:13:40,070
this is definitely not something that's

232
00:13:40,070 --> 00:13:44,150
going to come from me but I hope that

233
00:13:44,150 --> 00:13:47,480
somebody cares enough about it to sit

234
00:13:47,480 --> 00:13:53,820
down and and do the work

235
00:13:53,830 --> 00:13:57,130
it would be really nice to supposedly

236
00:13:57,130 --> 00:14:00,820
Windows has a very fast event

237
00:14:00,820 --> 00:14:07,690
notification system these IO completion

238
00:14:07,690 --> 00:14:11,170
ports it would be nice to be able to use

239
00:14:11,170 --> 00:14:13,750
those instead of select supposedly live

240
00:14:13,750 --> 00:14:16,690
event to which is another event loop

241
00:14:16,690 --> 00:14:20,410
abstraction library does this correctly

242
00:14:20,410 --> 00:14:24,070
so one possibility is to actually crane

243
00:14:24,070 --> 00:14:28,360
lift note off of Libby V and on to live

244
00:14:28,360 --> 00:14:33,810
event to which sounds really painful and

245
00:14:33,810 --> 00:14:37,060
Libby v's just so cute and like you just

246
00:14:37,060 --> 00:14:38,770
really wouldn't actually want to do that

247
00:14:38,770 --> 00:14:41,710
but it is nice that that live event to

248
00:14:41,710 --> 00:14:43,720
is is going through great lengths to be

249
00:14:43,720 --> 00:14:47,590
very compatible with windows so maybe

250
00:14:47,590 --> 00:14:50,290
it's worth doing it would be a lot of

251
00:14:50,290 --> 00:14:53,500
work but maybe you don't even care about

252
00:14:53,500 --> 00:14:55,420
performance on windows too much maybe

253
00:14:55,420 --> 00:14:59,080
maybe note could be I mean nobody's

254
00:14:59,080 --> 00:15:00,520
really going to be running servers on

255
00:15:00,520 --> 00:15:04,930
windows anyway so perhaps perhaps select

256
00:15:04,930 --> 00:15:11,319
as okay

257
00:15:11,329 --> 00:15:16,559
v8 has a has a 1 gigabyte heap

258
00:15:16,559 --> 00:15:23,309
limitation on x64 just recently

259
00:15:23,309 --> 00:15:28,110
discovered so this is of course a fairly

260
00:15:28,110 --> 00:15:31,739
large problem I don't think we can

261
00:15:31,739 --> 00:15:33,569
expect that processes are going to be

262
00:15:33,569 --> 00:15:39,089
under 1 gig of memory so this needs to

263
00:15:39,089 --> 00:15:45,360
be addressed one gig is a decent size 44

264
00:15:45,360 --> 00:15:49,709
program so I I don't think we're

265
00:15:49,709 --> 00:15:51,509
necessarily going to be bouncing against

266
00:15:51,509 --> 00:15:56,009
that immediately but if people start

267
00:15:56,009 --> 00:15:57,779
developing larger and larger frameworks

268
00:15:57,779 --> 00:16:00,449
and you know maybe they're they're doing

269
00:16:00,449 --> 00:16:02,970
a little in-memory database or something

270
00:16:02,970 --> 00:16:04,799
like that you would definitely not want

271
00:16:04,799 --> 00:16:09,389
this to be a restriction yeah

272
00:16:09,389 --> 00:16:11,819
unfortunately v8 doesn't care so much

273
00:16:11,819 --> 00:16:14,850
about this because websites don't get

274
00:16:14,850 --> 00:16:18,600
that big so this this is some work that

275
00:16:18,600 --> 00:16:25,259
will have to be done it's getting more

276
00:16:25,259 --> 00:16:28,019
and more technical if as we go along so

277
00:16:28,019 --> 00:16:32,610
I apologize copying strings out of v8

278
00:16:32,610 --> 00:16:37,040
seems to be a problem so so if you do a

279
00:16:37,040 --> 00:16:41,610
little benchmark where you send a larger

280
00:16:41,610 --> 00:16:45,480
and larger strings as a response notes

281
00:16:45,480 --> 00:16:50,040
performance degradation with respect to

282
00:16:50,040 --> 00:16:52,519
other dynamic language what web servers

283
00:16:52,519 --> 00:16:55,079
so clearly we're doing something very

284
00:16:55,079 --> 00:17:00,360
wrong and I think the the problem is

285
00:17:00,360 --> 00:17:02,999
that basically we're doing two copies we

286
00:17:02,999 --> 00:17:05,339
have to copy the string out of v8 seep

287
00:17:05,339 --> 00:17:08,370
into some external buffer and then copy

288
00:17:08,370 --> 00:17:10,980
it into the kernel or to the device or

289
00:17:10,980 --> 00:17:14,519
whatever whereas the other people are

290
00:17:14,519 --> 00:17:17,189
actually actually accessing the string

291
00:17:17,189 --> 00:17:21,010
in the Ruby heap itself so it some

292
00:17:21,010 --> 00:17:22,390
needs to be done here at least for

293
00:17:22,390 --> 00:17:28,030
certain cases for example JSON dumps if

294
00:17:28,030 --> 00:17:30,220
we could just be able to push those to a

295
00:17:30,220 --> 00:17:35,500
socket a lot quicker removing one of

296
00:17:35,500 --> 00:17:38,140
these these copies there I think it

297
00:17:38,140 --> 00:17:43,930
would be very beneficial also not

298
00:17:43,930 --> 00:17:53,530
non-trivial to solve this so the current

299
00:17:53,530 --> 00:17:57,370
mechanism and note for for writing two

300
00:17:57,370 --> 00:18:00,430
sockets is every time you call socket

301
00:18:00,430 --> 00:18:03,070
dot right or if you're in a web server

302
00:18:03,070 --> 00:18:05,830
you you say response dot right it maps

303
00:18:05,830 --> 00:18:08,020
to the same thing is that it actually

304
00:18:08,020 --> 00:18:11,740
execute the right sis call in line in

305
00:18:11,740 --> 00:18:15,820
that in that function and it seems that

306
00:18:15,820 --> 00:18:18,540
this is not the appropriate design I

307
00:18:18,540 --> 00:18:22,180
think what needs to happen is I mean

308
00:18:22,180 --> 00:18:24,160
what ends up happening is is that you

309
00:18:24,160 --> 00:18:26,860
call write a bunch of times in one

310
00:18:26,860 --> 00:18:30,460
iteration of the event loop and you end

311
00:18:30,460 --> 00:18:32,440
up with small packets being pushed out

312
00:18:32,440 --> 00:18:34,360
which is not what you want you want them

313
00:18:34,360 --> 00:18:35,830
to be bunched up because within one

314
00:18:35,830 --> 00:18:37,570
iteration of the event loop it's very

315
00:18:37,570 --> 00:18:41,560
very quick right that these rights need

316
00:18:41,560 --> 00:18:47,380
to be buffered into at the end up until

317
00:18:47,380 --> 00:18:50,590
you go to select or a pole or whatever

318
00:18:50,590 --> 00:18:52,480
they need to be buffered up and then

319
00:18:52,480 --> 00:19:00,960
sent out and one dumped so node has this

320
00:19:00,960 --> 00:19:04,570
this watch file thing which people

321
00:19:04,570 --> 00:19:07,300
probably have used and on Linux it's

322
00:19:07,300 --> 00:19:10,000
really great because it actually uses

323
00:19:10,000 --> 00:19:12,580
that I notify stuff and so you actually

324
00:19:12,580 --> 00:19:15,340
get an event from the colonel to to tell

325
00:19:15,340 --> 00:19:18,580
you when when a file has changed but on

326
00:19:18,580 --> 00:19:20,770
other operating systems it's just doing

327
00:19:20,770 --> 00:19:23,320
a stat over and over again with some

328
00:19:23,320 --> 00:19:26,050
interval between which is expensive and

329
00:19:26,050 --> 00:19:27,720
it actually is doing this stat

330
00:19:27,720 --> 00:19:30,480
synchronously in the main threat of

331
00:19:30,480 --> 00:19:34,770
note so of course if if you're if you're

332
00:19:34,770 --> 00:19:38,660
start watching a file on say and NFS

333
00:19:38,660 --> 00:19:44,280
file system then that can block for an

334
00:19:44,280 --> 00:19:46,620
arbitrary amount of time in the main

335
00:19:46,620 --> 00:19:53,650
event so this is really not a good thing

336
00:19:53,660 --> 00:19:56,970
other operating systems have ways of

337
00:19:56,970 --> 00:19:58,559
getting events from the colonel it's not

338
00:19:58,559 --> 00:20:01,320
the same as I notify but there there are

339
00:20:01,320 --> 00:20:07,559
ways to do this on on OS X so this is a

340
00:20:07,559 --> 00:20:10,440
bit of work but not too difficult I

341
00:20:10,440 --> 00:20:15,150
think I think the main problem is that

342
00:20:15,150 --> 00:20:18,059
that watch file references a path and

343
00:20:18,059 --> 00:20:21,120
the other event notification systems

344
00:20:21,120 --> 00:20:25,710
reference file descriptors so yeah we

345
00:20:25,710 --> 00:20:27,650
either have to change the interface or

346
00:20:27,650 --> 00:20:30,059
massage it a little bit into into

347
00:20:30,059 --> 00:20:36,960
working so node has this this little

348
00:20:36,960 --> 00:20:40,860
thread pool called Libby i/o which just

349
00:20:40,860 --> 00:20:44,309
has a bunch of P threads and you kind of

350
00:20:44,309 --> 00:20:48,390
send it little system calls to do things

351
00:20:48,390 --> 00:20:50,340
that things that would block right if

352
00:20:50,340 --> 00:20:52,559
you if you have to do a get address info

353
00:20:52,559 --> 00:20:55,860
you send it to that thread pool and it

354
00:20:55,860 --> 00:20:58,380
blocks fine but you know it does it in a

355
00:20:58,380 --> 00:20:59,850
thread and your your main thread can

356
00:20:59,850 --> 00:21:01,650
keep going and then you get notified

357
00:21:01,650 --> 00:21:06,960
back on certain systems you do actually

358
00:21:06,960 --> 00:21:11,549
have internal asynchronous i/o and so

359
00:21:11,549 --> 00:21:13,380
you don't actually need to do this this

360
00:21:13,380 --> 00:21:18,179
thread pool thing in user space so it

361
00:21:18,179 --> 00:21:20,790
would be nice if if Libby io actually

362
00:21:20,790 --> 00:21:24,990
used these the appropriate things on on

363
00:21:24,990 --> 00:21:32,340
different systems so there those are my

364
00:21:32,340 --> 00:21:38,190
my nine problems there's a new mailing

365
00:21:38,190 --> 00:21:39,309
list

366
00:21:39,309 --> 00:21:42,200
44 note because the other ones getting a

367
00:21:42,200 --> 00:21:44,540
lot of traffic that's a lot of newbies

368
00:21:44,540 --> 00:21:46,880
and so if you're interested in

369
00:21:46,880 --> 00:21:48,410
development you should you should join

370
00:21:48,410 --> 00:21:50,660
this and if you're interested in solving

371
00:21:50,660 --> 00:21:53,059
any of these problems of course email me

372
00:21:53,059 --> 00:21:56,299
and we can we can discuss it but yeah

373
00:21:56,299 --> 00:21:59,870
it's very much encouraged okay so this

374
00:21:59,870 --> 00:22:03,710
is mostly the end of my talk I also want

375
00:22:03,710 --> 00:22:07,790
to announce that joint is is having a

376
00:22:07,790 --> 00:22:11,750
new release of our noge service which we

377
00:22:11,750 --> 00:22:16,070
did for the node knockout and so people

378
00:22:16,070 --> 00:22:19,370
at this contest can can go to n.o de and

379
00:22:19,370 --> 00:22:23,150
get a smart machine to deployed no taps

380
00:22:23,150 --> 00:22:27,580
to this is not our final version but

381
00:22:27,580 --> 00:22:30,320
another release of it so if you go to

382
00:22:30,320 --> 00:22:34,160
n.o de you can register for an account

383
00:22:34,160 --> 00:22:37,040
and there's some curl commands to do

384
00:22:37,040 --> 00:22:40,690
because I in the end it's some rest api

385
00:22:40,690 --> 00:22:42,679
you don't have to memorize these

386
00:22:42,679 --> 00:22:45,140
commands right here but um go to noge

387
00:22:45,140 --> 00:22:47,660
and you can get an account and and try

388
00:22:47,660 --> 00:22:53,020
to push a a note app up to it and

389
00:22:53,020 --> 00:22:58,309
hopefully in the next two months or so i

390
00:22:58,309 --> 00:23:01,150
think we'll have an actual release that

391
00:23:01,150 --> 00:23:04,820
we will charge money for and will be

392
00:23:04,820 --> 00:23:13,640
open to the public so yes so sorry for

393
00:23:13,640 --> 00:23:16,220
the very technical talk I hope I didn't

394
00:23:16,220 --> 00:23:19,210
or anybody but are there any questions

395
00:23:19,210 --> 00:23:29,650
about anything related to note yes

396
00:23:29,660 --> 00:23:33,780
so the question is should i will I be

397
00:23:33,780 --> 00:23:35,880
bundling a package manager with note and

398
00:23:35,880 --> 00:23:42,049
the answer is no note is more or less

399
00:23:42,049 --> 00:23:45,030
how it will be now that not much more

400
00:23:45,030 --> 00:23:47,130
will go into it and I think it's

401
00:23:47,130 --> 00:23:51,720
important to keep it small and so of

402
00:23:51,720 --> 00:23:53,460
course there's a lot of work to do I've

403
00:23:53,460 --> 00:23:55,410
just laid it all out but it's not

404
00:23:55,410 --> 00:23:58,049
necessarily you know building a package

405
00:23:58,049 --> 00:24:01,590
manager or doing the these library or

406
00:24:01,590 --> 00:24:03,450
you know building a web framework I mean

407
00:24:03,450 --> 00:24:07,230
the API that we have now is more you

408
00:24:07,230 --> 00:24:08,850
know we might add a couple of things

409
00:24:08,850 --> 00:24:10,530
here and there but but more or less this

410
00:24:10,530 --> 00:24:16,799
is what it will be not my goal but the

411
00:24:16,799 --> 00:24:28,830
person behind Michael that yes the the

412
00:24:28,830 --> 00:24:43,100
heat profiling is already in v8

413
00:24:43,110 --> 00:24:46,299
no originally had an the question is

414
00:24:46,299 --> 00:24:48,279
about blocking versus async required

415
00:24:48,279 --> 00:24:50,919
note originally had an async require but

416
00:24:50,919 --> 00:24:53,590
I was convinced by the common J's people

417
00:24:53,590 --> 00:24:55,389
to change it in the name of common Jas

418
00:24:55,389 --> 00:25:07,720
so it will be synchronous sorry I

419
00:25:07,720 --> 00:25:16,600
couldn't hear you it the asynchronous

420
00:25:16,600 --> 00:25:18,429
require has always been there it was

421
00:25:18,429 --> 00:25:20,619
recently removed there will be no hay

422
00:25:20,619 --> 00:25:37,130
synchronous require Michael

423
00:25:37,140 --> 00:25:41,650
but buffers are outside of VA so just v8

424
00:25:41,650 --> 00:25:48,730
objects right so if you're doing like a

425
00:25:48,730 --> 00:25:51,190
some sort of database you should

426
00:25:51,190 --> 00:25:53,049
probably allocate a very large buffer

427
00:25:53,049 --> 00:25:55,840
and do that instead of a big JavaScript

428
00:25:55,840 --> 00:26:05,320
array or some other questions okay well

