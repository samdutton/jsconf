1
00:00:06,900 --> 00:00:10,240

[Applause]

2
00:00:10,250 --> 00:00:13,139
hey everybody yeah that's my name

3
00:00:13,139 --> 00:00:15,480
Alec state you can find me on the

4
00:00:15,480 --> 00:00:17,550
Internet at eighty underscore fresh

5
00:00:17,550 --> 00:00:20,400
underscore death I'm from Toronto Canada

6
00:00:20,400 --> 00:00:25,260
any Canadians here a few of us yes and I

7
00:00:25,260 --> 00:00:27,930
work at a front-end consultancy they're

8
00:00:27,930 --> 00:00:31,619
called wrangle and we're having a little

9
00:00:31,619 --> 00:00:34,050
hometown love right now the Toronto

10
00:00:34,050 --> 00:00:36,239
Raptors made it into the NBA Finals and

11
00:00:36,239 --> 00:00:40,020
won their first game so lots to be proud

12
00:00:40,020 --> 00:00:44,940
of but we're also proud of our very

13
00:00:44,940 --> 00:00:47,250
first Canadian competitor in RuPaul's

14
00:00:47,250 --> 00:00:51,809
Drag Race yeah so Brooklyn Heights made

15
00:00:51,809 --> 00:00:53,460
it to the finals which happened last

16
00:00:53,460 --> 00:00:57,600
night no spoilers a little bit about me

17
00:00:57,600 --> 00:01:01,260
I am a front-end web developer and this

18
00:01:01,260 --> 00:01:02,850
is my family since people are showing

19
00:01:02,850 --> 00:01:05,700
families today I have a human baby and a

20
00:01:05,700 --> 00:01:10,260
fur baby Avery and Trixie but we're not

21
00:01:10,260 --> 00:01:12,600
here to talk about that we're here to

22
00:01:12,600 --> 00:01:16,770
talk about functional CSS and all of the

23
00:01:16,770 --> 00:01:21,270
feelings surrounding it so what is

24
00:01:21,270 --> 00:01:23,460
functional CSS just to get a lay of the

25
00:01:23,460 --> 00:01:25,590
land who here has worked with functional

26
00:01:25,590 --> 00:01:31,140
CSS okay that's like maybe 10% cool so

27
00:01:31,140 --> 00:01:33,979
you all are gonna benefit from this talk

28
00:01:33,979 --> 00:01:36,150
essentially it's just a CSS paradigm

29
00:01:36,150 --> 00:01:37,530
it's so it's a way to handle your

30
00:01:37,530 --> 00:01:42,450
classes so the classes themselves should

31
00:01:42,450 --> 00:01:45,630
be small global reusable single purpose

32
00:01:45,630 --> 00:01:47,909
and immutable which I'll put in quotes

33
00:01:47,909 --> 00:01:49,860
because it's not that you can't change

34
00:01:49,860 --> 00:01:53,750
them but the idea is that you don't and

35
00:01:53,750 --> 00:01:56,250
the class names themselves should

36
00:01:56,250 --> 00:01:58,049
indicate their visual or structural

37
00:01:58,049 --> 00:02:02,040
purpose so you can think of them like

38
00:02:02,040 --> 00:02:04,469
Lego blocks each class does one thing

39
00:02:04,469 --> 00:02:06,479
and one thing only and the class name

40
00:02:06,479 --> 00:02:09,090
describes what it's doing so with Lego

41
00:02:09,090 --> 00:02:11,280
you might have like agree

42
00:02:11,280 --> 00:02:13,650
in two by six you wouldn't say this

43
00:02:13,650 --> 00:02:15,959
greenpeace is part of the wing of my

44
00:02:15,959 --> 00:02:20,940
helicopter and just some sample classes

45
00:02:20,940 --> 00:02:23,850
an example will be w 100 so that would

46
00:02:23,850 --> 00:02:28,319
be a width of 100% flex display flex BG

47
00:02:28,319 --> 00:02:30,540
black background color black so each one

48
00:02:30,540 --> 00:02:34,110
is only doing one discrete piece and

49
00:02:34,110 --> 00:02:36,120
what that looks like in your markup is

50
00:02:36,120 --> 00:02:38,550
kind of long strings of classes that you

51
00:02:38,550 --> 00:02:41,910
compose together to build your UI so in

52
00:02:41,910 --> 00:02:44,760
case you can't see the this div has W

53
00:02:44,760 --> 00:02:48,209
100 which means with 100 W 50 M which is

54
00:02:48,209 --> 00:02:51,000
a media query so honest on a medium

55
00:02:51,000 --> 00:02:54,060
sized screen it's gonna be 50% with W 33

56
00:02:54,060 --> 00:02:57,810
L that's gonna be 33% width on a large

57
00:02:57,810 --> 00:03:00,720
screen flex would be display flex item

58
00:03:00,720 --> 00:03:03,150
center would be a line item center BG

59
00:03:03,150 --> 00:03:04,920
black will be background black and PL 3

60
00:03:04,920 --> 00:03:07,530
would be a padding left 3 so you kind of

61
00:03:07,530 --> 00:03:09,269
compose all these things together to

62
00:03:09,269 --> 00:03:14,310
create the UI and let's talk briefly

63
00:03:14,310 --> 00:03:17,010
about the name functional CSS like where

64
00:03:17,010 --> 00:03:18,420
did this come from and how is it

65
00:03:18,420 --> 00:03:24,630
relevant so functional has many

66
00:03:24,630 --> 00:03:27,060
definitions but there's a couple that

67
00:03:27,060 --> 00:03:28,890
are sort of useful for functional CSS

68
00:03:28,890 --> 00:03:31,739
the first is ever having a special

69
00:03:31,739 --> 00:03:34,410
activity purpose or task relating to the

70
00:03:34,410 --> 00:03:36,269
way in which something works or operates

71
00:03:36,269 --> 00:03:38,519
so it's how something works so what's

72
00:03:38,519 --> 00:03:41,549
its purpose and a second is designed to

73
00:03:41,549 --> 00:03:43,410
be practical and useful rather than

74
00:03:43,410 --> 00:03:46,739
attractive and you'll see you know from

75
00:03:46,739 --> 00:03:48,359
the markup I just showed and from some

76
00:03:48,359 --> 00:03:49,920
of the complaints people have your

77
00:03:49,920 --> 00:03:52,620
markup isn't pretty but functional CSS

78
00:03:52,620 --> 00:03:53,910
isn't designed to make your markup

79
00:03:53,910 --> 00:03:57,209
beautiful it's designed to be useful and

80
00:03:57,209 --> 00:04:02,489
practical and what's a function we're

81
00:04:02,489 --> 00:04:05,549
all web developers here and there's lots

82
00:04:05,549 --> 00:04:06,959
of things that a function can be but

83
00:04:06,959 --> 00:04:08,310
with respect to math and code it's

84
00:04:08,310 --> 00:04:09,959
essentially a situation where you have

85
00:04:09,959 --> 00:04:13,260
an input and an output and something

86
00:04:13,260 --> 00:04:14,670
happens in between and you want to be

87
00:04:14,670 --> 00:04:16,380
able to predict your output based on

88
00:04:16,380 --> 00:04:20,180
your input

89
00:04:20,190 --> 00:04:22,740
so what puts the function in functional

90
00:04:22,740 --> 00:04:25,320
CSS rather than the classes being

91
00:04:25,320 --> 00:04:27,270
functions I like to think of the markup

92
00:04:27,270 --> 00:04:29,970
itself as being a function so the idea

93
00:04:29,970 --> 00:04:32,130
is you're you're inputting these classes

94
00:04:32,130 --> 00:04:34,440
and you can predict what the rendered

95
00:04:34,440 --> 00:04:36,330
output is going to be so if you think of

96
00:04:36,330 --> 00:04:38,010
the markup is the thing you're inputting

97
00:04:38,010 --> 00:04:40,110
into and then whatever's rendered on the

98
00:04:40,110 --> 00:04:46,350
screen as the output and any functional

99
00:04:46,350 --> 00:04:53,250
programming fans so for those who love

100
00:04:53,250 --> 00:04:54,620
functional programming in JavaScript

101
00:04:54,620 --> 00:04:57,720
there's a lot of familiarity so we have

102
00:04:57,720 --> 00:05:00,090
the concepts of immutability so with our

103
00:05:00,090 --> 00:05:01,650
functional classes we want to declare

104
00:05:01,650 --> 00:05:04,430
them once globally and not change them

105
00:05:04,430 --> 00:05:07,080
single purpose so much like a functional

106
00:05:07,080 --> 00:05:09,120
programming function it should be doing

107
00:05:09,120 --> 00:05:12,150
one thing so the classes do one thing

108
00:05:12,150 --> 00:05:14,160
they're reusable so you declare them on

109
00:05:14,160 --> 00:05:15,930
a global level and then you use them

110
00:05:15,930 --> 00:05:18,150
throughout your code base and they're

111
00:05:18,150 --> 00:05:19,980
composed so when you're doing functional

112
00:05:19,980 --> 00:05:21,330
programming you're you're composing

113
00:05:21,330 --> 00:05:23,370
functions and with functional classes

114
00:05:23,370 --> 00:05:26,130
you're composing them together and there

115
00:05:26,130 --> 00:05:28,110
shouldn't be any side effects so with

116
00:05:28,110 --> 00:05:30,090
functional CSS you shouldn't be having

117
00:05:30,090 --> 00:05:32,040
to predict what the Cascade will do or

118
00:05:32,040 --> 00:05:34,800
some specificity weirdness because

119
00:05:34,800 --> 00:05:37,140
things are global and immutable

120
00:05:37,140 --> 00:05:38,669
you shouldn't have unperturbed

121
00:05:38,669 --> 00:05:43,710
unpredictable outputs so just to make

122
00:05:43,710 --> 00:05:45,000
sure we're on the same page about what

123
00:05:45,000 --> 00:05:48,560
functional CSS isn't for today's talk

124
00:05:48,560 --> 00:05:51,690
I'm not referring to CSS component

125
00:05:51,690 --> 00:05:53,880
libraries or frameworks meaning things

126
00:05:53,880 --> 00:05:56,820
like bootstrap or angular material where

127
00:05:56,820 --> 00:05:59,090
there's full-on components given to you

128
00:05:59,090 --> 00:06:01,950
those libraries often do leverage

129
00:06:01,950 --> 00:06:03,870
functional CSS as a part of what they

130
00:06:03,870 --> 00:06:06,480
offer but I'm just talking about the

131
00:06:06,480 --> 00:06:09,270
classes themselves as discrete CSS

132
00:06:09,270 --> 00:06:14,280
classes not full-on components in since

133
00:06:14,280 --> 00:06:15,660
the word functional is in there I just

134
00:06:15,660 --> 00:06:16,890
want to be sure everyone knows we're not

135
00:06:16,890 --> 00:06:20,190
talking about CSS and j/s today love it

136
00:06:20,190 --> 00:06:24,260
but that's not our subject

137
00:06:24,270 --> 00:06:27,080
so people have a lot of feelings about

138
00:06:27,080 --> 00:06:29,460
functional CSS

139
00:06:29,460 --> 00:06:32,460
there's the lovers and the haters and I

140
00:06:32,460 --> 00:06:33,569
want to look at both sides of the

141
00:06:33,569 --> 00:06:35,699
argument today so let's talk about what

142
00:06:35,699 --> 00:06:41,520
people don't like so the HTML can be

143
00:06:41,520 --> 00:06:44,130
ugly you can have these long strings of

144
00:06:44,130 --> 00:06:47,639
classes in line in your markup people

145
00:06:47,639 --> 00:06:50,729
really don't like that and there's a lot

146
00:06:50,729 --> 00:06:53,490
of comparisons made to inline Styles but

147
00:06:53,490 --> 00:06:54,780
I want to make sure everybody

148
00:06:54,780 --> 00:06:57,900
understands the differences so with

149
00:06:57,900 --> 00:07:00,060
inline Styles you can write literally

150
00:07:00,060 --> 00:07:02,550
anything and it will take precedence

151
00:07:02,550 --> 00:07:05,940
it'll it'll override things whereas with

152
00:07:05,940 --> 00:07:08,729
functional classes usually if you're

153
00:07:08,729 --> 00:07:10,889
working from a library you're going with

154
00:07:10,889 --> 00:07:12,810
a system so you're not just writing

155
00:07:12,810 --> 00:07:14,520
anything willy-nilly you're pulling from

156
00:07:14,520 --> 00:07:15,930
a discrete set of values that have

157
00:07:15,930 --> 00:07:17,550
already been defined for you so there's

158
00:07:17,550 --> 00:07:21,360
a lot of structure involved inline

159
00:07:21,360 --> 00:07:23,580
Styles don't support media queries most

160
00:07:23,580 --> 00:07:27,030
functional CSS paradigms do inline

161
00:07:27,030 --> 00:07:28,979
Styles don't support hover or focus

162
00:07:28,979 --> 00:07:33,270
States functional CSS does and inline

163
00:07:33,270 --> 00:07:35,099
Styles can only target one element at a

164
00:07:35,099 --> 00:07:37,440
time so you're directly writing it on

165
00:07:37,440 --> 00:07:38,940
the element whereas with functional

166
00:07:38,940 --> 00:07:41,130
Styles your your you can use these

167
00:07:41,130 --> 00:07:46,530
classes on multiple elements another

168
00:07:46,530 --> 00:07:49,460
critique is the separation of concerns

169
00:07:49,460 --> 00:07:52,050
so there's a lot of thought out there

170
00:07:52,050 --> 00:07:55,740
about how styles and context are in

171
00:07:55,740 --> 00:07:57,840
content need to be separated so your

172
00:07:57,840 --> 00:08:00,210
HTML shouldn't be concerned with your

173
00:08:00,210 --> 00:08:03,419
Styles that's kind of where semantics

174
00:08:03,419 --> 00:08:05,849
class names come in the idea is that if

175
00:08:05,849 --> 00:08:07,800
you're if you're describing the style in

176
00:08:07,800 --> 00:08:10,770
your class name that's that's this

177
00:08:10,770 --> 00:08:12,630
coupling things that's coupling your

178
00:08:12,630 --> 00:08:14,250
design thinking with your structural

179
00:08:14,250 --> 00:08:17,460
thinking yeah so essentially they they

180
00:08:17,460 --> 00:08:18,990
don't want markup to be concerned with

181
00:08:18,990 --> 00:08:20,219
style

182
00:08:20,219 --> 00:08:22,530
but there's kind of this dependency

183
00:08:22,530 --> 00:08:25,500
direction thing that happens where

184
00:08:25,500 --> 00:08:28,319
either your markup is depending on your

185
00:08:28,319 --> 00:08:30,810
Styles or your CSS Styles or depending

186
00:08:30,810 --> 00:08:33,060
on your markup because when you have

187
00:08:33,060 --> 00:08:36,360
semantic class names that might say

188
00:08:36,360 --> 00:08:37,209
something like

189
00:08:37,209 --> 00:08:39,819
and a whole bunch of styles that's then

190
00:08:39,819 --> 00:08:42,899
tied to the structure in the in HTML

191
00:08:42,899 --> 00:08:47,980
versus having HTML with class names like

192
00:08:47,980 --> 00:08:49,959
Flex where you're you're tying things to

193
00:08:49,959 --> 00:08:51,790
the design so it's a dependency

194
00:08:51,790 --> 00:08:54,009
Direction choice you don't really ever

195
00:08:54,009 --> 00:08:56,679
have this separation of concerns and

196
00:08:56,679 --> 00:08:59,800
it's kind of a myth and there's a great

197
00:08:59,800 --> 00:09:03,100
article written by Adam Lawson who is

198
00:09:03,100 --> 00:09:05,259
one of the creators of tailwind and he

199
00:09:05,259 --> 00:09:07,149
debunks this really well and is really

200
00:09:07,149 --> 00:09:09,129
worth reading but this quote kind of

201
00:09:09,129 --> 00:09:12,069
sums it up my markup wasn't concerned

202
00:09:12,069 --> 00:09:14,199
with my styling decisions but my CSS was

203
00:09:14,199 --> 00:09:19,309
very concerned with my markup structure

204
00:09:19,319 --> 00:09:22,300
so another critique is that it's not dry

205
00:09:22,300 --> 00:09:24,579
do not repeat yourself for those who

206
00:09:24,579 --> 00:09:27,550
don't know the dry acronym so yeah you

207
00:09:27,550 --> 00:09:29,679
are gonna be reusing strings of similar

208
00:09:29,679 --> 00:09:31,179
classes like there's patterns that

209
00:09:31,179 --> 00:09:32,670
you're going to use over and over again

210
00:09:32,670 --> 00:09:35,860
and that is a critique of functional CSS

211
00:09:35,860 --> 00:09:38,800
however where you gain is that you're

212
00:09:38,800 --> 00:09:41,259
cutting down dramatically on the number

213
00:09:41,259 --> 00:09:42,429
of times that you're writing the same

214
00:09:42,429 --> 00:09:44,980
CSS rules like drastically cutting that

215
00:09:44,980 --> 00:09:46,929
down so you might be a little more like

216
00:09:46,929 --> 00:09:50,049
wet in your in your markup but you're

217
00:09:50,049 --> 00:09:53,139
going to be extremely dry in your CSS so

218
00:09:53,139 --> 00:09:55,869
that's kind of a false critique again

219
00:09:55,869 --> 00:09:57,610
it's it's choosing where do you want to

220
00:09:57,610 --> 00:10:04,149
be dry and then just the general concept

221
00:10:04,149 --> 00:10:06,129
of semantics class names people really

222
00:10:06,129 --> 00:10:08,199
really like semantic class names to

223
00:10:08,199 --> 00:10:10,660
describe the structure and you know like

224
00:10:10,660 --> 00:10:12,220
with sass you can get into nesting

225
00:10:12,220 --> 00:10:14,579
things and and really paralleling your

226
00:10:14,579 --> 00:10:18,579
your markup structure and just to make

227
00:10:18,579 --> 00:10:20,290
sure we're all on the same page this is

228
00:10:20,290 --> 00:10:22,449
an example of a semantic class name

229
00:10:22,449 --> 00:10:24,879
where I have a container around some

230
00:10:24,879 --> 00:10:26,470
drag queens it's called the queen

231
00:10:26,470 --> 00:10:28,149
container and I've got some properties

232
00:10:28,149 --> 00:10:30,999
on it and it's really tied to the

233
00:10:30,999 --> 00:10:35,259
structure of my document so in this case

234
00:10:35,259 --> 00:10:37,749
with semantics class names you're

235
00:10:37,749 --> 00:10:40,389
describing what it is not how it works

236
00:10:40,389 --> 00:10:42,879
or how it looks whereas a functional CSS

237
00:10:42,879 --> 00:10:44,589
you're very much describing how it

238
00:10:44,589 --> 00:10:47,090
functions and how it looks

239
00:10:47,090 --> 00:10:49,400
and I want to talk about the word

240
00:10:49,400 --> 00:10:53,240
semantics semantics means to give

241
00:10:53,240 --> 00:10:55,850
meaning so when you have a semantic

242
00:10:55,850 --> 00:10:58,400
class name you're describing the content

243
00:10:58,400 --> 00:11:01,130
the structure of the HTML and that's the

244
00:11:01,130 --> 00:11:03,500
meaning but when you have functional

245
00:11:03,500 --> 00:11:06,620
class names like flex or red being the

246
00:11:06,620 --> 00:11:09,320
color red there's still meaning it's not

247
00:11:09,320 --> 00:11:11,420
that it's unsymmetric it just has a

248
00:11:11,420 --> 00:11:14,000
different meaning and when we think

249
00:11:14,000 --> 00:11:16,760
about the purpose of classes really

250
00:11:16,760 --> 00:11:19,130
their function is to be a hook for a

251
00:11:19,130 --> 00:11:22,820
JavaScript or for styles the job of a

252
00:11:22,820 --> 00:11:25,130
class in in my opinion or in the opinion

253
00:11:25,130 --> 00:11:27,920
of many isn't isn't to describe the

254
00:11:27,920 --> 00:11:29,300
structure of your document because

255
00:11:29,300 --> 00:11:31,970
that's already done in your markup so

256
00:11:31,970 --> 00:11:34,460
making it describe your structure that's

257
00:11:34,460 --> 00:11:36,140
that jobs already been taken care of by

258
00:11:36,140 --> 00:11:42,560
the structure itself so what problems

259
00:11:42,560 --> 00:11:46,370
does functional CSS try to solve as

260
00:11:46,370 --> 00:11:48,920
Rachel mentioned this morning CSS has

261
00:11:48,920 --> 00:11:51,560
lots of problems we all have dealt with

262
00:11:51,560 --> 00:11:54,140
frustrations we all love it too or it

263
00:11:54,140 --> 00:11:55,910
wouldn't be here but I think there's

264
00:11:55,910 --> 00:11:57,260
kind of four main problems that

265
00:11:57,260 --> 00:12:02,570
functional CSS tries to address probably

266
00:12:02,570 --> 00:12:05,530
the biggest is performance and CSS bloat

267
00:12:05,530 --> 00:12:09,500
so there's the actual performance aspect

268
00:12:09,500 --> 00:12:11,660
when you cut down the amount of CSS that

269
00:12:11,660 --> 00:12:13,340
you're writing you're delivering a

270
00:12:13,340 --> 00:12:15,220
smaller bundle it's pretty straight up

271
00:12:15,220 --> 00:12:18,380
but there's also the the like dev time

272
00:12:18,380 --> 00:12:20,870
bloat where you don't have to be writing

273
00:12:20,870 --> 00:12:24,410
the CSS so unlike a selfish level it's

274
00:12:24,410 --> 00:12:26,120
kind of nice to just know how these

275
00:12:26,120 --> 00:12:27,440
classes work and be able to put them

276
00:12:27,440 --> 00:12:29,000
together and not have to spend a whole

277
00:12:29,000 --> 00:12:34,730
lot of time writing CSS on the

278
00:12:34,730 --> 00:12:36,770
performance level Adam Morris who's the

279
00:12:36,770 --> 00:12:38,180
creator of tachyons which I'll be

280
00:12:38,180 --> 00:12:40,190
talking about a little bit today

281
00:12:40,190 --> 00:12:42,320
he wrote this great article called CSS

282
00:12:42,320 --> 00:12:44,920
and scalability highly recommend as well

283
00:12:44,920 --> 00:12:48,020
and he looked at a lot of large websites

284
00:12:48,020 --> 00:12:49,490
this is a couple of years old so I don't

285
00:12:49,490 --> 00:12:52,310
know how current the statistics are but

286
00:12:52,310 --> 00:12:54,500
Pinterest for example has more than one

287
00:12:54,500 --> 00:12:56,810
megabyte of uncompressed CSS spread out

288
00:12:56,810 --> 00:12:59,990
over five files 97% of it isn't used on

289
00:12:59,990 --> 00:13:00,800
the home page

290
00:13:00,800 --> 00:13:02,540
I'd rather just try and send my users

291
00:13:02,540 --> 00:13:05,450
the 3% they do need so there's this

292
00:13:05,450 --> 00:13:07,459
thing where a lot of websites and and

293
00:13:07,459 --> 00:13:09,740
applications have to load all of the CSS

294
00:13:09,740 --> 00:13:12,110
in order to view a single page whereas

295
00:13:12,110 --> 00:13:13,580
they don't necessarily have to load all

296
00:13:13,580 --> 00:13:15,620
of the HTML to view a single page so

297
00:13:15,620 --> 00:13:16,790
having a little bit of bloat in your

298
00:13:16,790 --> 00:13:20,330
HTML is is probably still a lot cheaper

299
00:13:20,330 --> 00:13:24,649
than having a lot of CSS and just to

300
00:13:24,649 --> 00:13:27,680
show in Adams article he clicks to some

301
00:13:27,680 --> 00:13:30,830
gist where he shows repeated properties

302
00:13:30,830 --> 00:13:33,860
so from Pinterest he looked at where

303
00:13:33,860 --> 00:13:37,160
they wrote display:none over and over

304
00:13:37,160 --> 00:13:39,560
and over again and this is just a small

305
00:13:39,560 --> 00:13:41,330
screenshot but it's actually two hundred

306
00:13:41,330 --> 00:13:43,399
and sorry six hundred and twenty-six

307
00:13:43,399 --> 00:13:45,140
lines of code and it's just just for

308
00:13:45,140 --> 00:13:47,870
display:none perp interest so if they

309
00:13:47,870 --> 00:13:49,520
had leveraged a functional class of

310
00:13:49,520 --> 00:13:51,770
display:none they would have written it

311
00:13:51,770 --> 00:13:57,350
one time so scalability is definitely a

312
00:13:57,350 --> 00:14:01,790
thing when you are writing custom CSS

313
00:14:01,790 --> 00:14:04,459
all the time you probably aren't going

314
00:14:04,459 --> 00:14:06,290
to memorize every single class that you

315
00:14:06,290 --> 00:14:08,000
wrote anywhere and look for ways to

316
00:14:08,000 --> 00:14:09,620
reuse it and you're probably not gonna

317
00:14:09,620 --> 00:14:11,360
search your entire code base for

318
00:14:11,360 --> 00:14:12,940
everything you could possibly reuse

319
00:14:12,940 --> 00:14:15,350
which means that scaling out a codebase

320
00:14:15,350 --> 00:14:17,570
means you're just writing a lot of CSS

321
00:14:17,570 --> 00:14:21,500
you're you're having to continually grow

322
00:14:21,500 --> 00:14:25,700
the stylesheet and that means that not

323
00:14:25,700 --> 00:14:27,260
only is it harder to scale as a

324
00:14:27,260 --> 00:14:29,570
developer but your user then has to

325
00:14:29,570 --> 00:14:32,480
download all that extra CSS another

326
00:14:32,480 --> 00:14:33,649
thing that can happen there when you're

327
00:14:33,649 --> 00:14:35,240
writing a lot of custom CSS is

328
00:14:35,240 --> 00:14:37,459
especially on shared code bases like

329
00:14:37,459 --> 00:14:38,899
probably a lot of us work on enterprise

330
00:14:38,899 --> 00:14:41,360
level applications with multiple

331
00:14:41,360 --> 00:14:44,300
developers collaborating on git and then

332
00:14:44,300 --> 00:14:46,070
you get into inconsistent values and

333
00:14:46,070 --> 00:14:49,880
patterns functional CSS one of the main

334
00:14:49,880 --> 00:14:51,920
selling points is that there are systems

335
00:14:51,920 --> 00:14:55,010
that you follow and you agree upon you

336
00:14:55,010 --> 00:14:56,630
don't necessarily have to buy into the

337
00:14:56,630 --> 00:14:58,279
system of a library you can create your

338
00:14:58,279 --> 00:15:01,550
own or you can customize a library but

339
00:15:01,550 --> 00:15:02,750
either way you're you're sort of

340
00:15:02,750 --> 00:15:05,959
agreeing on a on a standard set of what

341
00:15:05,959 --> 00:15:10,300
is allowed in your codebase

342
00:15:10,300 --> 00:15:13,460
and then yeah so decoupling styles and

343
00:15:13,460 --> 00:15:16,370
structure CSS that's tightly coupled to

344
00:15:16,370 --> 00:15:20,720
markup isn't easily reusable if you have

345
00:15:20,720 --> 00:15:23,600
say you have a component and you've got

346
00:15:23,600 --> 00:15:25,490
your queen container for example and

347
00:15:25,490 --> 00:15:27,110
you're describing everything it's really

348
00:15:27,110 --> 00:15:29,660
hard to reuse that somewhere else like

349
00:15:29,660 --> 00:15:31,040
you have to put a lot of effort into

350
00:15:31,040 --> 00:15:32,960
abstract things it's not impossible you

351
00:15:32,960 --> 00:15:35,930
absolutely can but functional CSS makes

352
00:15:35,930 --> 00:15:38,120
it really easy to decouple these things

353
00:15:38,120 --> 00:15:39,520
[Applause]

354
00:15:39,520 --> 00:15:43,690
so going back to Adam Morse and Lego

355
00:15:43,690 --> 00:15:46,760
when I used to build things with Legos

356
00:15:46,760 --> 00:15:48,890
I never thought oh this is a piece for

357
00:15:48,890 --> 00:15:50,960
an engine block I thought oh cool this

358
00:15:50,960 --> 00:15:53,240
is a 1x4 blew Lego and I can do anything

359
00:15:53,240 --> 00:15:55,820
I want with it and that is really the

360
00:15:55,820 --> 00:15:59,690
the key concept here and then this one

361
00:15:59,690 --> 00:16:02,650
from like a selfish developer time

362
00:16:02,650 --> 00:16:05,570
perspective you're minimizing context

363
00:16:05,570 --> 00:16:07,820
switching so when you get really

364
00:16:07,820 --> 00:16:10,250
comfortable with functional styles you

365
00:16:10,250 --> 00:16:11,690
can just write them directly in your

366
00:16:11,690 --> 00:16:13,280
markup and you can really predict how

367
00:16:13,280 --> 00:16:14,300
it's going to turn out

368
00:16:14,300 --> 00:16:16,010
you might occasionally want to refresh

369
00:16:16,010 --> 00:16:17,240
your browser and take a look at things

370
00:16:17,240 --> 00:16:18,680
but you're not constantly toggling

371
00:16:18,680 --> 00:16:21,560
between a CSS file and a markup

372
00:16:21,560 --> 00:16:24,770
structure it's just really fast to kind

373
00:16:24,770 --> 00:16:26,060
of put things together once you get

374
00:16:26,060 --> 00:16:27,640
comfortable and know how the pieces work

375
00:16:27,640 --> 00:16:30,470
and similarly when you're in the browser

376
00:16:30,470 --> 00:16:32,390
you can just be writing some Styles

377
00:16:32,390 --> 00:16:34,850
inline in your in your markup and you

378
00:16:34,850 --> 00:16:36,620
don't even have to get into the CSS dev

379
00:16:36,620 --> 00:16:42,150
tools if you're using functional Styles

380
00:16:42,160 --> 00:16:46,070
one more at Morse code that that article

381
00:16:46,070 --> 00:16:48,640
is so good so it's CSS and scalability

382
00:16:48,640 --> 00:16:51,020
in a great system there's a two-way

383
00:16:51,020 --> 00:16:52,820
street of information if you look at the

384
00:16:52,820 --> 00:16:55,280
CSS you can tell what will happen if you

385
00:16:55,280 --> 00:16:57,140
look at the HTML you know what the code

386
00:16:57,140 --> 00:17:00,320
will do so the idea is here that if you

387
00:17:00,320 --> 00:17:02,120
look at the the functional styles that

388
00:17:02,120 --> 00:17:03,950
have been defined you know what each one

389
00:17:03,950 --> 00:17:06,620
does a class of red is going to be color

390
00:17:06,620 --> 00:17:09,230
red there's no questions there and then

391
00:17:09,230 --> 00:17:11,390
when you look at your markup like I know

392
00:17:11,390 --> 00:17:14,570
when I see something that has pa4 that's

393
00:17:14,570 --> 00:17:17,120
padding all four I know what you know in

394
00:17:17,120 --> 00:17:19,520
a Tachyon situation for works out to I

395
00:17:19,520 --> 00:17:22,640
think it's one Ram or something and I

396
00:17:22,640 --> 00:17:23,480
just get you see

397
00:17:23,480 --> 00:17:24,770
things and I can predict what they look

398
00:17:24,770 --> 00:17:28,760
like yeah I'm not here to sell tachyons

399
00:17:28,760 --> 00:17:31,280
like I don't work for tachyons but I do

400
00:17:31,280 --> 00:17:33,290
work with tachyons and I find it to be a

401
00:17:33,290 --> 00:17:35,299
really great library to play with and

402
00:17:35,299 --> 00:17:38,660
and it does work for me in production I

403
00:17:38,660 --> 00:17:40,429
would recommend checking out their docks

404
00:17:40,429 --> 00:17:41,780
because they're really really helpful

405
00:17:41,780 --> 00:17:45,010
everything is kind of visually shown Oh

406
00:17:45,010 --> 00:17:47,120
everything shows you examples of how to

407
00:17:47,120 --> 00:17:48,710
write it in the markup what each class

408
00:17:48,710 --> 00:17:52,160
does there's visual layout examples the

409
00:17:52,160 --> 00:17:54,980
docks are really great so one of the

410
00:17:54,980 --> 00:17:57,230
things that's awesome about tachyons is

411
00:17:57,230 --> 00:18:00,650
it very much as a scale based system so

412
00:18:00,650 --> 00:18:03,410
there's a font scale a type scale

413
00:18:03,410 --> 00:18:07,040
padding scale margin scale everything

414
00:18:07,040 --> 00:18:09,200
kind of breaks down into sort of design

415
00:18:09,200 --> 00:18:16,010
system scale thinking so let's check it

416
00:18:16,010 --> 00:18:21,200
out we've seen elephants and dogs and

417
00:18:21,200 --> 00:18:22,640
stuff but I'm going to show you drag

418
00:18:22,640 --> 00:18:26,450
queens so I made this app it's some of

419
00:18:26,450 --> 00:18:31,370
my finest work really like super proud

420
00:18:31,370 --> 00:18:36,559
of this so this is just a grid of images

421
00:18:36,559 --> 00:18:41,929
you can resize it it's responsive really

422
00:18:41,929 --> 00:18:46,549
it's just beautiful yeah so I built this

423
00:18:46,549 --> 00:18:48,650
first using sort of a more traditional

424
00:18:48,650 --> 00:18:51,860
approach so this is not a react app it's

425
00:18:51,860 --> 00:18:53,000
not an angular app it's not

426
00:18:53,000 --> 00:18:54,290
componentized at all it's just

427
00:18:54,290 --> 00:18:56,570
straight-up HTML and CSS just to

428
00:18:56,570 --> 00:18:59,210
illustrate the point here so you can see

429
00:18:59,210 --> 00:19:02,690
here in the markup I've got the cream

430
00:19:02,690 --> 00:19:04,490
container around things there's a

431
00:19:04,490 --> 00:19:07,370
heading with a div around it there's

432
00:19:07,370 --> 00:19:10,760
individual images for each queen and

433
00:19:10,760 --> 00:19:14,210
then in them in the CSS everything is is

434
00:19:14,210 --> 00:19:15,559
written out in sort of the more

435
00:19:15,559 --> 00:19:17,450
traditional style with semantic class

436
00:19:17,450 --> 00:19:19,760
names and towards the bottom we've got

437
00:19:19,760 --> 00:19:21,500
some media queries to handle the

438
00:19:21,500 --> 00:19:29,230
responsiveness of the layout and here

439
00:19:29,230 --> 00:19:33,460
we're going to redo it with tachyons

440
00:19:33,460 --> 00:19:35,470
so first thing we're gonna do is bring

441
00:19:35,470 --> 00:19:37,780
in the CDN I would recommend importing

442
00:19:37,780 --> 00:19:38,800
the library if you're gonna do it in

443
00:19:38,800 --> 00:19:40,840
production but just to play with the CDN

444
00:19:40,840 --> 00:19:43,540
is great we're killing our old markup

445
00:19:43,540 --> 00:19:45,550
and bringing in tachyons markup so you

446
00:19:45,550 --> 00:19:47,200
can see we've got some familiar classes

447
00:19:47,200 --> 00:19:50,170
now flex with 100 there's some media

448
00:19:50,170 --> 00:19:53,410
queries on the images with 50 on medium

449
00:19:53,410 --> 00:19:55,300
and then this is the fun part

450
00:19:55,300 --> 00:20:00,550
CSS how gone all of it delete all the

451
00:20:00,550 --> 00:20:06,130
things and then just you know I'm being

452
00:20:06,130 --> 00:20:09,429
honest I renamed the title to drag

453
00:20:09,429 --> 00:20:13,870
royalty 2.0 and then we'll give it a hot

454
00:20:13,870 --> 00:20:17,380
refresh in the browser and this is the

455
00:20:17,380 --> 00:20:19,990
same site and it's still responsive and

456
00:20:19,990 --> 00:20:22,660
the layout is exactly the same with zero

457
00:20:22,660 --> 00:20:30,220
CSS not zero CSS functional CSS so yeah

458
00:20:30,220 --> 00:20:34,510
what do the lovers have to say like I

459
00:20:34,510 --> 00:20:35,800
just showed you I don't have to write

460
00:20:35,800 --> 00:20:40,870
any CSS this is a false dream this is

461
00:20:40,870 --> 00:20:43,030
not the situation you are gonna have to

462
00:20:43,030 --> 00:20:46,150
write CSS and I think if your motivation

463
00:20:46,150 --> 00:20:48,160
to get into functional CSS is that you

464
00:20:48,160 --> 00:20:50,500
don't want to learn CSS that's going to

465
00:20:50,500 --> 00:20:53,350
lead to problems and pain in my

466
00:20:53,350 --> 00:20:55,750
experience on projects where a where I

467
00:20:55,750 --> 00:20:58,870
do use functional CSS I'd say 50% of my

468
00:20:58,870 --> 00:21:00,370
components I'm still writing some

469
00:21:00,370 --> 00:21:02,650
components go up CSS and there's still

470
00:21:02,650 --> 00:21:04,750
some global CSS that I'm writing to

471
00:21:04,750 --> 00:21:07,000
affect the whole code base so it's not

472
00:21:07,000 --> 00:21:10,120
like a Silver Bullet only solution but

473
00:21:10,120 --> 00:21:12,460
it's it's cutting down dramatically on

474
00:21:12,460 --> 00:21:14,500
the amount that I have to write and then

475
00:21:14,500 --> 00:21:16,540
the bundle size - because tachyons

476
00:21:16,540 --> 00:21:21,790
itself is only 15k so yeah the bundle is

477
00:21:21,790 --> 00:21:24,700
so small there's an article you can find

478
00:21:24,700 --> 00:21:27,370
that's called 15k of CSS is all you'll

479
00:21:27,370 --> 00:21:30,550
ever need and that's a good one but I

480
00:21:30,550 --> 00:21:32,800
also think that that's not really the

481
00:21:32,800 --> 00:21:35,860
situation in my experience yes you can

482
00:21:35,860 --> 00:21:37,600
save a lot of bundle size by using

483
00:21:37,600 --> 00:21:40,600
tachyons but you are gonna have to write

484
00:21:40,600 --> 00:21:42,940
your own CSS there's gonna be a good a

485
00:21:42,940 --> 00:21:45,350
good amount of it

486
00:21:45,350 --> 00:21:48,580
this is very true I can work so fast

487
00:21:48,580 --> 00:21:50,960
once I got used to functional CSS which

488
00:21:50,960 --> 00:21:53,539
realistically took me two or three weeks

489
00:21:53,539 --> 00:21:55,279
like it wasn't a steep lean learning

490
00:21:55,279 --> 00:21:57,860
curve I just find that I'm I'm I'm

491
00:21:57,860 --> 00:21:59,120
writing it really fast and I'm

492
00:21:59,120 --> 00:22:01,360
prototyping in the browser super fast

493
00:22:01,360 --> 00:22:03,740
it's just made our workflow really

494
00:22:03,740 --> 00:22:09,259
really smooth reuse all the things this

495
00:22:09,259 --> 00:22:11,720
is very much true so you're reusing this

496
00:22:11,720 --> 00:22:13,309
global stylesheet that you've either

497
00:22:13,309 --> 00:22:14,899
created yourself or pulled in from a

498
00:22:14,899 --> 00:22:17,750
library and then you can take this one

499
00:22:17,750 --> 00:22:19,639
step further by component izing your

500
00:22:19,639 --> 00:22:22,370
system where you know each component has

501
00:22:22,370 --> 00:22:23,840
a string of classes but you're not

502
00:22:23,840 --> 00:22:25,309
duplicating that everywhere you're just

503
00:22:25,309 --> 00:22:27,559
reusing that component so you're not

504
00:22:27,559 --> 00:22:29,090
necessarily having to rewrite the same

505
00:22:29,090 --> 00:22:33,799
strings of classes constantly and this

506
00:22:33,799 --> 00:22:36,289
one is super super awesome I can think

507
00:22:36,289 --> 00:22:38,840
in design systems so you know having

508
00:22:38,840 --> 00:22:40,220
worked closely with designers who are

509
00:22:40,220 --> 00:22:43,309
also familiar with with functional CSS

510
00:22:43,309 --> 00:22:45,049
I'm able to sit down with them and be

511
00:22:45,049 --> 00:22:47,419
like okay how do you you know how do we

512
00:22:47,419 --> 00:22:49,009
want to customize the scale do we like

513
00:22:49,009 --> 00:22:51,139
the scale cool now that we're on board

514
00:22:51,139 --> 00:22:52,700
the scale how do we want to use it and

515
00:22:52,700 --> 00:22:54,470
you know somebody can just ping me on

516
00:22:54,470 --> 00:22:56,389
slack and be like I need that to be

517
00:22:56,389 --> 00:22:58,639
actually like margin level five instead

518
00:22:58,639 --> 00:23:00,080
of margin level four and it's just like

519
00:23:00,080 --> 00:23:03,559
the easiest communication flow because

520
00:23:03,559 --> 00:23:04,940
you're already thinking in the same

521
00:23:04,940 --> 00:23:07,370
system and of course that's possible

522
00:23:07,370 --> 00:23:09,049
with other systems is this is just one

523
00:23:09,049 --> 00:23:14,299
that works well so so what do I do in

524
00:23:14,299 --> 00:23:19,580
production on a code base is where we

525
00:23:19,580 --> 00:23:22,460
are using functional CSS which you know

526
00:23:22,460 --> 00:23:24,590
is client specific I do work at a

527
00:23:24,590 --> 00:23:26,750
consultancy so I have different

528
00:23:26,750 --> 00:23:28,909
different clients with different comfort

529
00:23:28,909 --> 00:23:31,879
levels with this type of stuff but when

530
00:23:31,879 --> 00:23:33,649
I do I use the functional classes as

531
00:23:33,649 --> 00:23:35,360
much as possible and it reach for those

532
00:23:35,360 --> 00:23:37,929
first before I try to write my own CSS

533
00:23:37,929 --> 00:23:39,950
which in the beginning requires

534
00:23:39,950 --> 00:23:41,299
searching the docs a lot and getting

535
00:23:41,299 --> 00:23:42,769
comfortable but eventually you really

536
00:23:42,769 --> 00:23:45,950
just know what's up and then you

537
00:23:45,950 --> 00:23:47,419
customize the library is needed you

538
00:23:47,419 --> 00:23:51,309
don't have to take it out of the box I

539
00:23:51,309 --> 00:23:53,750
I'm sure to componentize as much as

540
00:23:53,750 --> 00:23:55,519
possible so that I'm not having to

541
00:23:55,519 --> 00:23:57,260
rewrite the same things over and over

542
00:23:57,260 --> 00:24:00,260
again both with the markup and the CS

543
00:24:00,260 --> 00:24:02,960
and then when I have to I'll component

544
00:24:02,960 --> 00:24:04,520
scope classes so if I don't think

545
00:24:04,520 --> 00:24:06,740
something is reusable but it is a

546
00:24:06,740 --> 00:24:08,720
specific situation where I need to be

547
00:24:08,720 --> 00:24:10,790
just doing something outside of tachyons

548
00:24:10,790 --> 00:24:12,559
I'll components go bit first before I

549
00:24:12,559 --> 00:24:16,490
reach for the global scope and then when

550
00:24:16,490 --> 00:24:18,050
you do want to get into things that are

551
00:24:18,050 --> 00:24:19,700
reusable through your code base but

552
00:24:19,700 --> 00:24:21,800
don't come from the library of course

553
00:24:21,800 --> 00:24:23,420
you're going to need some global CSS for

554
00:24:23,420 --> 00:24:26,900
that in those situations if I'm going to

555
00:24:26,900 --> 00:24:29,090
write utility classes that might be

556
00:24:29,090 --> 00:24:31,070
reused everywhere I try to remember to

557
00:24:31,070 --> 00:24:32,059
prefix them

558
00:24:32,059 --> 00:24:36,050
so in this app I might call it like DQ

559
00:24:36,050 --> 00:24:38,960
flex 12 or whatever like drag queen so

560
00:24:38,960 --> 00:24:40,880
you're like pre fixing things just to be

561
00:24:40,880 --> 00:24:43,700
sure that there's no weird interaction

562
00:24:43,700 --> 00:24:45,620
with the functional library in case

563
00:24:45,620 --> 00:24:47,210
there's a random class you're not aware

564
00:24:47,210 --> 00:24:49,190
of prefixing is just a nice way to

565
00:24:49,190 --> 00:24:54,670
prevent that so just a few cautions

566
00:24:54,670 --> 00:24:58,970
learn CSS I don't think I have to preach

567
00:24:58,970 --> 00:25:02,030
to the choir here but as I said if you

568
00:25:02,030 --> 00:25:04,130
think this is a shortcut to not learn

569
00:25:04,130 --> 00:25:06,620
CSS you'll feel the pain as soon as you

570
00:25:06,620 --> 00:25:08,179
have to write your own and you don't

571
00:25:08,179 --> 00:25:09,470
understand what's happening

572
00:25:09,470 --> 00:25:12,860
so definitely learn CSS and use this as

573
00:25:12,860 --> 00:25:14,929
a tool within your your palette of

574
00:25:14,929 --> 00:25:18,440
things you can do a CSS this one I've

575
00:25:18,440 --> 00:25:22,280
seen don't import the full library to

576
00:25:22,280 --> 00:25:25,790
extend a class from it so there was a

577
00:25:25,790 --> 00:25:27,890
component that I was working on for a

578
00:25:27,890 --> 00:25:31,010
component library so it was a drop-down

579
00:25:31,010 --> 00:25:32,300
that was going to be used all over

580
00:25:32,300 --> 00:25:34,760
multiple products for a company and

581
00:25:34,760 --> 00:25:38,150
someone had imported the entire library

582
00:25:38,150 --> 00:25:42,020
of tachyons just to extend a class like

583
00:25:42,020 --> 00:25:45,740
margin top two so tachyons is 15k that

584
00:25:45,740 --> 00:25:47,929
means every list item in every drop-down

585
00:25:47,929 --> 00:25:51,350
on every product has 15k of CSS on it so

586
00:25:51,350 --> 00:25:54,710
just just don't do that if you feel like

587
00:25:54,710 --> 00:25:57,200
you want to be extending things maybe

588
00:25:57,200 --> 00:25:58,550
it's a good time to be writing your own

589
00:25:58,550 --> 00:26:03,020
CSS component scoped and this one's

590
00:26:03,020 --> 00:26:06,320
really big CSS or functional CSS is

591
00:26:06,320 --> 00:26:07,700
super exciting and it's really fun to

592
00:26:07,700 --> 00:26:10,280
play with but don't be the developer who

593
00:26:10,280 --> 00:26:11,820
goes home and then rewrite

594
00:26:11,820 --> 00:26:13,260
an entire collaborative code base

595
00:26:13,260 --> 00:26:15,810
without buy-in from your team if you're

596
00:26:15,810 --> 00:26:17,100
interested in bringing it into your

597
00:26:17,100 --> 00:26:18,780
project and I will say I've used in

598
00:26:18,780 --> 00:26:22,680
production a lot and it's great make

599
00:26:22,680 --> 00:26:24,390
sure your team is on board it's a huge

600
00:26:24,390 --> 00:26:26,700
code style change and you don't want to

601
00:26:26,700 --> 00:26:27,870
be doing that stuff and being

602
00:26:27,870 --> 00:26:30,660
heavy-handed and just kind of demanding

603
00:26:30,660 --> 00:26:33,120
a new way what I'd really recommend is

604
00:26:33,120 --> 00:26:34,650
that you go home and try it out on some

605
00:26:34,650 --> 00:26:36,480
little silly side project make some drag

606
00:26:36,480 --> 00:26:39,420
queens or whatever and then show your

607
00:26:39,420 --> 00:26:40,920
colleagues and and see if they're

608
00:26:40,920 --> 00:26:43,710
interested because yeah that can be

609
00:26:43,710 --> 00:26:45,950
really disruptive to a team vibe to just

610
00:26:45,950 --> 00:26:51,720
dogmatically make a decision and yeah do

611
00:26:51,720 --> 00:26:55,920
you this is not a silver bullet it's

612
00:26:55,920 --> 00:26:58,290
only one possible way of handling your

613
00:26:58,290 --> 00:27:01,350
CSS there's lots of cases where I still

614
00:27:01,350 --> 00:27:03,030
write custom CSS and I'm very grateful

615
00:27:03,030 --> 00:27:06,000
that I know it and love it try it out

616
00:27:06,000 --> 00:27:08,070
don't push it on people if your team

617
00:27:08,070 --> 00:27:13,260
isn't ready be chill but yeah if you

618
00:27:13,260 --> 00:27:15,180
don't like it you don't have to like it

619
00:27:15,180 --> 00:27:17,520
like nobody has to do anything it's just

620
00:27:17,520 --> 00:27:19,740
a cool thing to check out

621
00:27:19,740 --> 00:27:22,830
I want to thank CSS comfy you for having

622
00:27:22,830 --> 00:27:25,020
me today and everybody here for

623
00:27:25,020 --> 00:27:28,140
listening and I want to thank all of the

624
00:27:28,140 --> 00:27:29,820
people who've written great articles

625
00:27:29,820 --> 00:27:31,440
about functional CSS because I read

626
00:27:31,440 --> 00:27:33,450
about 30 of them in preparation for this

627
00:27:33,450 --> 00:27:35,190
talk there's lots of great stuff you can

628
00:27:35,190 --> 00:27:37,760
find online by just googling the subject

629
00:27:37,760 --> 00:27:40,550
feel free to hit me up on Twitter and

630
00:27:40,550 --> 00:27:43,700
I'll be sharing my slides later today

631
00:27:43,700 --> 00:27:50,350
Thanks

