1
00:00:09,560 --> 00:00:10,780
So, hello, everybody.

2
00:00:10,780 --> 00:00:15,340
My name is Adrien Trauth, I'm a frontend engineer.

3
00:00:15,349 --> 00:00:19,939
Our topic today is how to build advanced search
experiences with a custom query language.

4
00:00:19,939 --> 00:00:22,820
First, I will focus on the use case.

5
00:00:22,820 --> 00:00:28,830
I will explain what it is and the benefits
of introducing one in the search interface.

6
00:00:28,830 --> 00:00:33,820
And then how to implement it in the code of
your advanced search.

7
00:00:33,820 --> 00:00:40,120
And finally, the solution for your users to
make sure they are aware and how to write

8
00:00:40,120 --> 00:00:41,120
their own queries.

9
00:00:41,120 --> 00:00:47,260
So, let's get a bit more into the use case
and why is an advanced search necessary and

10
00:00:47,260 --> 00:00:51,230
custom query language, improves the user experience?

11
00:00:51,230 --> 00:00:57,960
And spending most of my day marking the lab
management tool and doing lab management is

12
00:00:57,960 --> 00:01:04,680
about allowing the user to search for millions
of events and find the right one.

13
00:01:04,680 --> 00:01:09,800
This is the search.

14
00:01:09,800 --> 00:01:15,430
Since it's about traversing, you run a lot
of searches before finding the information.

15
00:01:15,430 --> 00:01:21,790
The search needs to be efficient because you're
running a lot of things and using the tool

16
00:01:21,790 --> 00:01:24,540
a very long time.

17
00:01:24,540 --> 00:01:29,040
Also, because you need to find the right log
that will explain what's happening inside

18
00:01:29,040 --> 00:01:38,630
of your infrastructure, your search has to
be precise or you will not find the needle

19
00:01:38,630 --> 00:01:39,630
in the haystack.

20
00:01:39,630 --> 00:01:49,020
They can be system logs to database event
to system logs, the data is not known.

21
00:01:49,020 --> 00:01:55,509
So, you have to make yourself flexible enough
to search all kinds of different data.

22
00:01:55,509 --> 00:01:57,479
And so, those are our requirements for the
search.

23
00:01:57,479 --> 00:01:59,659
They're not really specific to log management.

24
00:01:59,659 --> 00:02:03,260
But this is what we will be working with today.

25
00:02:03,260 --> 00:02:06,670
And the common search interfaces match those
requirements.

26
00:02:06,670 --> 00:02:12,550
So, basically word search, you find on a lot
of websites.

27
00:02:12,550 --> 00:02:16,440
It's nice because it's simple and you can
get start in a few seconds.

28
00:02:16,440 --> 00:02:17,440
It's really efficient.

29
00:02:17,440 --> 00:02:23,490
You type a few keywords, and, in a few seconds,
you already have your first results.

30
00:02:23,490 --> 00:02:27,330
But the limitation with that search is precision.

31
00:02:27,330 --> 00:02:31,830
Because, for example, here, if I'm on the
phone, I'm looking for a blue chair, I have

32
00:02:31,830 --> 00:02:38,660
no way to tell the system that I'm not looking
for either something that's blue or a chair.

33
00:02:38,660 --> 00:02:40,480
And I'm looking for a chair that's specifically
blue.

34
00:02:40,480 --> 00:02:44,400
So, you have no way to give the system what
your intent is.

35
00:02:44,400 --> 00:02:47,130
And to give the context about what you're
searching for.

36
00:02:47,130 --> 00:02:54,550
So, the way a lot of websites solve this is
that the sorry they introduce an advanced

37
00:02:54,550 --> 00:02:55,550
search pattern.

38
00:02:55,550 --> 00:03:03,830
And when you click on that pattern, you will
see a lot of different inputs and everything.

39
00:03:03,830 --> 00:03:09,260
And what this gives to you is a lot more precision
because every input has its own intent.

40
00:03:09,260 --> 00:03:14,420
If I select the color blue, all the results
are blue this time.

41
00:03:14,420 --> 00:03:17,480
What you notice here with that pattern is
efficiency.

42
00:03:17,480 --> 00:03:23,290
You went from a search where you could type
a few words and get results to a search where

43
00:03:23,290 --> 00:03:28,670
you have to click around a lot and find out
which inputs are relevant to you.

44
00:03:28,670 --> 00:03:34,010
And also, it makes this a lot less readable
because you have to look if you want to know

45
00:03:34,010 --> 00:03:38,260
exactly what you're searching for, you have
to look at every input and the value of every

46
00:03:38,260 --> 00:03:39,930
input.

47
00:03:39,930 --> 00:03:42,370
And finally, it's not that flexible.

48
00:03:42,370 --> 00:03:48,710
The way you set up the inputs defines the
ways that searchers search for something.

49
00:03:48,710 --> 00:03:53,780
Here I put one price range, and if the searcher
wants to search across two price ranges, they

50
00:03:53,780 --> 00:03:56,310
cannot do that.

51
00:03:56,310 --> 00:04:01,500
As a developer, I know another way to search
for results.

52
00:04:01,500 --> 00:04:04,200
That's query languages.

53
00:04:04,200 --> 00:04:09,180
You send to, for example, a database or an
API some text that's going to return your

54
00:04:09,180 --> 00:04:11,200
results.

55
00:04:11,200 --> 00:04:19,460
The first query that you usually learn about
when you start, I don't know, when you're

56
00:04:19,460 --> 00:04:22,400
a child, is natural language.

57
00:04:22,400 --> 00:04:24,720
That's asking a question in English.

58
00:04:24,720 --> 00:04:26,000
It's very flexible.

59
00:04:26,000 --> 00:04:30,340
Because you can ask any question in English
and it's always making sense.

60
00:04:30,340 --> 00:04:32,910
That's your own language.

61
00:04:32,910 --> 00:04:36,500
The issue with natural language is that it's
not made for computers.

62
00:04:36,500 --> 00:04:39,150
So, computers, they struggle with nuances.

63
00:04:39,150 --> 00:04:45,150
And also, the range of questions you will
be able to ask is a lot bigger than the question

64
00:04:45,150 --> 00:04:48,180
you can answer on your website.

65
00:04:48,180 --> 00:04:51,110
And so, if you have Google or Facebook money,
it may be fine.

66
00:04:51,110 --> 00:04:53,000
You may be able to solve that problem.

67
00:04:53,000 --> 00:04:59,560
But for your own tool and website, it's probably
a little bit overkill.

68
00:04:59,560 --> 00:05:02,720
The second query language that I encountered
was SQL.

69
00:05:02,720 --> 00:05:05,650
So, that's a query language for databases.

70
00:05:05,650 --> 00:05:10,620
It's very powerful because it allows you to
query any kind of structure data.

71
00:05:10,620 --> 00:05:12,800
Also, it has great support.

72
00:05:12,800 --> 00:05:17,110
You have a lot of databases supporting it
and if you want to implement it, you basically

73
00:05:17,110 --> 00:05:19,830
send the search through the server to the
database.

74
00:05:19,830 --> 00:05:22,950
You have nothing more to do.

75
00:05:22,950 --> 00:05:29,140
But this is for us, it's not really good for
our use case because you have to know how

76
00:05:29,140 --> 00:05:33,360
the data is stored to be able to query it,
and that's not something we want our users

77
00:05:33,360 --> 00:05:36,470
to care about.

78
00:05:36,470 --> 00:05:38,690
And it's a bit too complex.

79
00:05:38,690 --> 00:05:41,860
And it's not what we want there.

80
00:05:41,860 --> 00:05:47,720
And so, one of the systems that tries to solve
this is GraphQL.

81
00:05:47,720 --> 00:05:51,500
Since it's an abstraction of a data storage,
it's a bit better because you don't have to

82
00:05:51,500 --> 00:05:55,420
care about how the data is stored.

83
00:05:55,420 --> 00:05:59,310
And what's really nice also is that you can
define easily what kind of output you want

84
00:05:59,310 --> 00:06:00,370
for your data.

85
00:06:00,370 --> 00:06:03,820
But it's still very much targeted to APIs.

86
00:06:03,820 --> 00:06:08,830
So, for example, if you see that query here
and you would it's really nice if you want

87
00:06:08,830 --> 00:06:12,190
to send it over HTTP, or if you write it in
your code.

88
00:06:12,190 --> 00:06:16,940
But if you want a user to write that query,
it's a bit long, it's a bit verbose.

89
00:06:16,940 --> 00:06:19,650
So, that's not really what we want here.

90
00:06:19,650 --> 00:06:26,150
So, since we've not been about to able to
form anything that matches our requirements,

91
00:06:26,150 --> 00:06:29,570
since I'm a developer, I made my own query
language.

92
00:06:29,570 --> 00:06:33,190
I found companies that did that.

93
00:06:33,190 --> 00:06:40,250
There's GQL, allows you to search through
your tasks and issues.

94
00:06:40,250 --> 00:06:45,120
There are some tools, they have their own
way to create data.

95
00:06:45,120 --> 00:06:55,210
And data that is there is another team that
made its own query language to the query data

96
00:06:55,210 --> 00:06:56,650
visualizations.

97
00:06:56,650 --> 00:06:59,450
And so, we are two different teams finding
the same way to solve problems.

98
00:06:59,450 --> 00:07:07,830
So, one of the benefits of having your own
custom query language.

99
00:07:07,830 --> 00:07:10,310
First, it's as high level as you want.

100
00:07:10,310 --> 00:07:15,450
So, you are able to decide what you want your
users to care about or not.

101
00:07:15,450 --> 00:07:20,230
So, for example, if you want your user to
be able to define the output format, like

102
00:07:20,230 --> 00:07:22,790
in GraphQL, you can include that in your language.

103
00:07:22,790 --> 00:07:28,680
But you want to make it a bit more simple,
you just choose that and do your own thing.

104
00:07:28,680 --> 00:07:30,660
It's also very specific to our use case.

105
00:07:30,660 --> 00:07:35,740
So, you can make sure that every word that
the user types is relevant to your demand

106
00:07:35,740 --> 00:07:41,520
and express what the user is looking for and
there's not technical getting in the way.

107
00:07:41,520 --> 00:07:47,550
And finally, since it's high level and user
specific, it's readable.

108
00:07:47,550 --> 00:07:52,889
The only in the query are about the domain
and not technical.

109
00:07:52,889 --> 00:07:57,230
So, this seems to be a good solution for our
use case here.

110
00:07:57,230 --> 00:08:04,810
So, to be and it's probably not perfect, but
we'll get into the limitations a bit later.

111
00:08:04,810 --> 00:08:10,130
Now that I know that I want to make my own
query language, I have to define it.

112
00:08:10,130 --> 00:08:14,460
And so, a language definition is called a
grammar.

113
00:08:14,460 --> 00:08:20,730
And so, that's going to be the set of rules
that define what valid search is and the meaning

114
00:08:20,730 --> 00:08:24,270
of each word in my valid search.

115
00:08:24,270 --> 00:08:28,949
Two things you should care about when writing
your grammar is you have to make it flexible

116
00:08:28,949 --> 00:08:33,180
for the user to write any kind of different
queries.

117
00:08:33,180 --> 00:08:38,300
And make sure your most important concepts,
the first thing the user is going to look

118
00:08:38,300 --> 00:08:45,320
for is the first thing they have to write
so that they can benefit from your query language

119
00:08:45,320 --> 00:08:46,360
very fast.

120
00:08:46,360 --> 00:08:50,760
Let's give you a quick example to give you
a better idea of what a grammar is.

121
00:08:50,760 --> 00:08:53,670
So, that's my simplified English grammar.

122
00:08:53,670 --> 00:08:57,870
Obviously, we're not going to get into all
the rules of English now.

123
00:08:57,870 --> 00:09:03,770
But if I were to define grammar for English,
the first rule is a sentence is a set of words

124
00:09:03,770 --> 00:09:05,980
separated by spaces.

125
00:09:05,980 --> 00:09:13,870
And if I use that rule, I'm going to be allowed
to say, well, I have three words in this sentence.

126
00:09:13,870 --> 00:09:16,360
I like meatballs.

127
00:09:16,360 --> 00:09:20,560
And then I can use a second rule which would
say that the first word is the subject, the

128
00:09:20,560 --> 00:09:25,730
second is the verb and the third is the object
to say that, oh, I is my subject, like is

129
00:09:25,730 --> 00:09:28,870
my verb and meatballs is the object.

130
00:09:28,870 --> 00:09:34,860
By defining the rules, you can extract words
and the context of the words and find the

131
00:09:34,860 --> 00:09:37,370
meaning of the sentence.

132
00:09:37,370 --> 00:09:44,700
And we know that we and we can apply that
to my example, which is still here.

133
00:09:44,700 --> 00:09:50,580
If I were to write a grammar for my search
language, I would be able to define a set

134
00:09:50,580 --> 00:10:01,630
of rules that say, for example, a search query
for my furniture would be furniture, separated.

135
00:10:01,630 --> 00:10:07,540
And there is the type of the furniture and
then brackets and inside the brackets there's

136
00:10:07,540 --> 00:10:11,600
a list of attributes I care about for this
furniture.

137
00:10:11,600 --> 00:10:14,980
By using that, I can say, hey, I'm looking
for a chair and a couch.

138
00:10:14,980 --> 00:10:17,170
And the chair is blue.

139
00:10:17,170 --> 00:10:20,770
And the couch has the attribute, green.

140
00:10:20,770 --> 00:10:26,080
And if I want to go even further, I can say,
well, actually in my attributes, every attribute

141
00:10:26,080 --> 00:10:31,440
that starts with a hashtag will be a color,
and every attribute that ends with a currency

142
00:10:31,440 --> 00:10:32,880
will be a price.

143
00:10:32,880 --> 00:10:36,270
So, that's how you get into writing your own
query.

144
00:10:36,270 --> 00:10:43,990
And once you have defined all those rules,
you can once you have defined your grammar

145
00:10:43,990 --> 00:10:48,930
the next step is actually to implement it
in the code of your search.

146
00:10:48,930 --> 00:10:54,980
And so, that's making the computer understand
the set queries.

147
00:10:54,980 --> 00:11:02,529
So, the goal here is to get from a string
it an object that will be easier for my code

148
00:11:02,529 --> 00:11:09,470
and contain all the context that was extracted
from the string.

149
00:11:09,470 --> 00:11:13,630
And then once I have an object that's very
simple, I can use it anywhere.

150
00:11:13,630 --> 00:11:18,170
If I want to create databases, if I want to
extract information for the user or anything

151
00:11:18,170 --> 00:11:19,170
like that.

152
00:11:19,170 --> 00:11:24,391
Once you have an object, you're pretty much
on all the jobs.

153
00:11:24,391 --> 00:11:29,990
So, to go from the string to the object is
actually called parsing.

154
00:11:29,990 --> 00:11:35,470
And so, parsing will say, well, actually,
from that query I extract that one word is

155
00:11:35,470 --> 00:11:36,760
"Chair."

156
00:11:36,760 --> 00:11:43,290
And since I have grammar rules, chair is not
a color, it's the first word.

157
00:11:43,290 --> 00:11:45,030
It's not inside brackets.

158
00:11:45,030 --> 00:11:46,770
It's the type.

159
00:11:46,770 --> 00:11:50,360
That's what parsing is.

160
00:11:50,360 --> 00:11:55,010
The first thing I think about when I want
to extract information from the string is

161
00:11:55,010 --> 00:11:58,660
to try to raise the regular expression.

162
00:11:58,660 --> 00:12:05,680
Regular expressions are really efficient when
you are extracting information from emails

163
00:12:05,680 --> 00:12:06,680
or telephones.

164
00:12:06,680 --> 00:12:12,500
So, when you know the number of things you
want to extract from the query, it's really

165
00:12:12,500 --> 00:12:13,500
good.

166
00:12:13,500 --> 00:12:17,230
But when you don't know, your expression gets
really complex.

167
00:12:17,230 --> 00:12:22,730
And also, it's hard to extract the element
you extracted.

168
00:12:22,730 --> 00:12:25,250
It's easy to extract, for example, the chair.

169
00:12:25,250 --> 00:12:31,950
But if I want to extract it's a furniture
type, that's more complex.

170
00:12:31,950 --> 00:12:39,870
And I found this really good code on StackOverflow
that says if you write to regular expression,

171
00:12:39,870 --> 00:12:46,240
you go with a cup of coffee, then you come
back, and you have no idea what you just wrote.

172
00:12:46,240 --> 00:12:49,170
Maybe a regular expression is not the tool
for you.

173
00:12:49,170 --> 00:12:56,100
So, I think that's explaining really why this
is not good for our use case here.

174
00:12:56,100 --> 00:13:03,040
So, the other way to extract from a string
is to generate from the language.

175
00:13:03,040 --> 00:13:09,170
From the grammar I just explain in English,
I can actually generate a parser from that.

176
00:13:09,170 --> 00:13:14,550
And the way to do that is to write the grammar
in another grammar.

177
00:13:14,550 --> 00:13:20,180
So, there is actually a way to write grammars
and there are rules to write grammars.

178
00:13:20,180 --> 00:13:26,130
And so, the one we'll be using today is the
passing expression grammar.

179
00:13:26,130 --> 00:13:31,920
I found it to be one of the most readable
ones, PEG.

180
00:13:31,920 --> 00:13:32,920
How does that work in practice?

181
00:13:32,920 --> 00:13:33,920
It seems hard now.

182
00:13:33,920 --> 00:13:38,950
That's a grammar rule.

183
00:13:38,950 --> 00:13:45,839
A grammar rule is made of first the name of
the rule and then your parsing expression.

184
00:13:45,839 --> 00:13:52,050
So, your parsing expression will define the
input you want to match.

185
00:13:52,050 --> 00:13:55,570
And the output you want to return from that
match.

186
00:13:55,570 --> 00:14:00,680
And so, here for our type rule, I'm matching
a range of characters repeating any number

187
00:14:00,680 --> 00:14:02,200
of times.

188
00:14:02,200 --> 00:14:07,610
And then I'm using that much results which
you will be an array of characters which is

189
00:14:07,610 --> 00:14:11,970
the full string of the furniture type.

190
00:14:11,970 --> 00:14:14,029
It looks like a regular expression, right?

191
00:14:14,029 --> 00:14:21,960
Yes, but what is really nice with this way
of writing different rules is that it's really

192
00:14:21,960 --> 00:14:23,050
easy to combine them.

193
00:14:23,050 --> 00:14:27,500
So, here, for example, if I want to extract
my simple character match, it's actually adjusting

194
00:14:27,500 --> 00:14:34,180
the new rule and using that new rule in my
furniture type rule.

195
00:14:34,180 --> 00:14:39,610
And what I see is really good about this is
that it's really easy to reuse some and in

196
00:14:39,610 --> 00:14:40,770
the other ones.

197
00:14:40,770 --> 00:14:44,500
And also, it makes your numbers definition
a lot more readable.

198
00:14:44,500 --> 00:14:51,220
Because here I can read that my furniture
type would be a set of characters and I don't

199
00:14:51,220 --> 00:14:55,260
have to care about one type of character or
not.

200
00:14:55,260 --> 00:14:56,610
That's different rule.

201
00:14:56,610 --> 00:15:02,899
So, it allows you to write really complex
rules in a very simple way.

202
00:15:02,899 --> 00:15:06,900
So, another way to combine different rules
is to put them in sequence.

203
00:15:06,900 --> 00:15:14,180
So, here, if I have to define a price, I just
need to define first what the number is.

204
00:15:14,180 --> 00:15:15,490
And then what a currency is.

205
00:15:15,490 --> 00:15:16,602
So, number will be an integer.

206
00:15:16,602 --> 00:15:22,310
And pound, Euro, anything you would want to.

207
00:15:22,310 --> 00:15:27,209
And from that sequence of characters, my parser
will try to match both.

208
00:15:27,209 --> 00:15:30,670
If only one of them matches, it's just going
to fail.

209
00:15:30,670 --> 00:15:36,910
And once I have matched both those rules,
I'm going to be able to use both match results

210
00:15:36,910 --> 00:15:39,579
which I call here amount and currency.

211
00:15:39,579 --> 00:15:45,980
And I will be able to combine both those match
results actually inside the brackets.

212
00:15:45,980 --> 00:15:48,000
That's valid JavaScript.

213
00:15:48,000 --> 00:15:56,100
And to define a new match result for price,
which is really a combination of the two others.

214
00:15:56,100 --> 00:16:02,120
And a final way you can combine didn't rules
is to put them separated by slashes.

215
00:16:02,120 --> 00:16:08,590
And then you will be what that will do is
that this is this object from the options.

216
00:16:08,590 --> 00:16:15,060
So, if I define an attribute as a price or
a color, what the parser will do here is going

217
00:16:15,060 --> 00:16:17,329
to be to try to match price.

218
00:16:17,329 --> 00:16:21,890
And if that succeeds, I'm going to return
the same match result as for the price.

219
00:16:21,890 --> 00:16:26,950
If that fails, I'm going to go to the next
one and match the color and et cetera and

220
00:16:26,950 --> 00:16:27,950
et cetera.

221
00:16:27,950 --> 00:16:34,860
And once you have that way of writing different
rules and to combine them in didn't ways,

222
00:16:34,860 --> 00:16:40,089
I can actually start defining my full grammar
for my furniture store.

223
00:16:40,089 --> 00:16:48,450
And here so, I said in any grammar, as I explained
in English, the furniture will be a type,

224
00:16:48,450 --> 00:16:51,760
brackets and any number of attributes.

225
00:16:51,760 --> 00:16:56,380
What I think is really amazing here is exactly
what I'm reading in the code.

226
00:16:56,380 --> 00:16:57,380
That's valid code.

227
00:16:57,380 --> 00:17:02,990
I wrote the full query grammar to make sure
it's something that makes sense.

228
00:17:02,990 --> 00:17:08,189
And so, here if you read the first, it's defining
what a furniture is.

229
00:17:08,189 --> 00:17:13,149
And I'm defining it as a furniture type and
then a list of attributes.

230
00:17:13,149 --> 00:17:17,439
And if I want to see what a list of attributes
is, I can just go to the last line and see,

231
00:17:17,439 --> 00:17:23,539
well, a list of attributes is just one opening
bracket, any number of attributes, and one

232
00:17:23,539 --> 00:17:25,189
closing bracket.

233
00:17:25,189 --> 00:17:31,580
And so, what I think what I love about this
is that I can every rule is actually quite

234
00:17:31,580 --> 00:17:32,640
simple.

235
00:17:32,640 --> 00:17:37,929
And you can go from very simple rules to a
full query language in a way that's really

236
00:17:37,929 --> 00:17:39,009
testable.

237
00:17:39,009 --> 00:17:42,600
Really easy to improve on, really easy to
extend.

238
00:17:42,600 --> 00:17:47,270
That's good that's really readable and really
simple.

239
00:17:47,270 --> 00:17:53,200
And once you've done that, once of your full
query language or your rules defined, you

240
00:17:53,200 --> 00:17:56,169
just have to run it.

241
00:17:56,169 --> 00:18:00,889
And that's going to generate a parser that
will that you will able to import in your

242
00:18:00,889 --> 00:18:01,889
code.

243
00:18:01,889 --> 00:18:06,009
So, I'm just running it through the command
line.

244
00:18:06,009 --> 00:18:13,399
you can use the results in Webpack loader
if you want to make it automatic.

245
00:18:13,399 --> 00:18:17,750
And now that I'm generating my parser, I'm
just importing it.

246
00:18:17,750 --> 00:18:21,820
Running my queries through it and I'm going
to be able to have the exact object I was

247
00:18:21,820 --> 00:18:23,830
looking for.

248
00:18:23,830 --> 00:18:29,889
So, I'm able to parse my different queries.

249
00:18:29,889 --> 00:18:32,029
I can just use that in my search.

250
00:18:32,029 --> 00:18:35,539
Hopefully type chair, hashtag blue.

251
00:18:35,539 --> 00:18:38,200
And I'm only going to have a blue chair.

252
00:18:38,200 --> 00:18:45,799
I used to have my keyword search that would
return either chair or things that were blue.

253
00:18:45,799 --> 00:18:47,549
There was a blue table in the results.

254
00:18:47,549 --> 00:18:50,960
Now the query language provides intent.

255
00:18:50,960 --> 00:18:54,360
Now I can say that the color is applied to
chair.

256
00:18:54,360 --> 00:19:02,859
And blue is actually a color.

257
00:19:02,859 --> 00:19:06,799
I can implement it in my sorry.

258
00:19:06,799 --> 00:19:08,169
It's matching all my requirements.

259
00:19:08,169 --> 00:19:11,279
So, I have the intent, so, that's precise.

260
00:19:11,279 --> 00:19:16,440
It's also efficient because I just have to
do a few key strokes to get the results.

261
00:19:16,440 --> 00:19:19,429
And it's readable, I have the full search
in my query.

262
00:19:19,429 --> 00:19:20,690
And it's flexible.

263
00:19:20,690 --> 00:19:23,289
I can have any number of attributes.

264
00:19:23,289 --> 00:19:25,570
Any number of furnitures.

265
00:19:25,570 --> 00:19:32,559
Flexible is actually up to you when you design
your search language.

266
00:19:32,559 --> 00:19:35,419
It's a balance to find.

267
00:19:35,419 --> 00:19:38,580
So, did we solve the search problem forever?

268
00:19:38,580 --> 00:19:40,390
Well, not really.

269
00:19:40,390 --> 00:19:47,299
Because I think a custom query language comes
with one big limitation, and that's user onboarding.

270
00:19:47,299 --> 00:19:50,429
Because know that you have a language that
is valid or not.

271
00:19:50,429 --> 00:19:54,909
The first experience you can give to your
user is that before they would type anything

272
00:19:54,909 --> 00:19:57,980
and that would always work.

273
00:19:57,980 --> 00:20:02,249
But now what they can do is the first search
they type is not valid and you won't be able

274
00:20:02,249 --> 00:20:04,399
to parse it and they won't get any results.

275
00:20:04,399 --> 00:20:07,499
And that's really frustrating for your users.

276
00:20:07,499 --> 00:20:12,570
So, you need to teach them two things before
they are able to write their own queries.

277
00:20:12,570 --> 00:20:13,999
And the first thing is the grammar.

278
00:20:13,999 --> 00:20:15,740
What is a valid query?

279
00:20:15,740 --> 00:20:17,889
And the possible attribute.

280
00:20:17,889 --> 00:20:22,619
You want to tell them, you can search for
a chair, a coat, anything you want.

281
00:20:22,619 --> 00:20:27,129
You need to tell them what values they can
put inside of the queries.

282
00:20:27,129 --> 00:20:29,380
The first thing you need to do is add documentation.

283
00:20:29,380 --> 00:20:30,380
That's really important.

284
00:20:30,380 --> 00:20:31,749
You always need documentation.

285
00:20:31,749 --> 00:20:35,019
And to give quick access to the documentation.

286
00:20:35,019 --> 00:20:41,369
But that's not enough because to make them
want to go to the documentation you need to

287
00:20:41,369 --> 00:20:45,960
give them a few valid searches, so they know
that, oh, that's really useful.

288
00:20:45,960 --> 00:20:48,330
I want to learn more about that.

289
00:20:48,330 --> 00:20:55,700
And so, one way that's worked for us is to
have a playground, like an advanced search.

290
00:20:55,700 --> 00:20:59,229
We are adding back some inputs.

291
00:20:59,229 --> 00:21:03,559
But the difference is this time you are not
using the inputs to make queries to the back

292
00:21:03,559 --> 00:21:04,559
end.

293
00:21:04,559 --> 00:21:08,669
You're using inputs to modify the search bar
and make a valid search inside your search

294
00:21:08,669 --> 00:21:09,669
bar.

295
00:21:09,669 --> 00:21:14,169
So, let's see how that would look.

296
00:21:14,169 --> 00:21:15,169
Yeah.

297
00:21:15,169 --> 00:21:19,340
So, here I select chair, and adding chair
to my queries and then blue.

298
00:21:19,340 --> 00:21:24,379
And once you have a valid send, the user will
be able to by himself to improve upon it and

299
00:21:24,379 --> 00:21:28,389
start typing his own search queries.

300
00:21:28,389 --> 00:21:30,390
Because it's stitching by example.

301
00:21:30,390 --> 00:21:31,390
And that's really good.

302
00:21:31,390 --> 00:21:35,820
You want to show him what it looks like and
show him, oh, it's really simple.

303
00:21:35,820 --> 00:21:37,690
I can do it myself now.

304
00:21:37,690 --> 00:21:41,649
It's progressive because you start doing it,
and when you feel ready, you can start modifying

305
00:21:41,649 --> 00:21:43,130
your search.

306
00:21:43,130 --> 00:21:50,509
And if you feel like you're even more ready,
you can sorry you can write your own search

307
00:21:50,509 --> 00:21:52,249
and hide their playground.

308
00:21:52,249 --> 00:21:53,340
You cannot use it anymore.

309
00:21:53,340 --> 00:21:55,419
And it adapts to the user.

310
00:21:55,419 --> 00:21:58,570
Because if they want to learn more about it,
they can type things.

311
00:21:58,570 --> 00:22:02,889
But they never want to run it because they
only come on the website once.

312
00:22:02,889 --> 00:22:10,369
They can click the inputs and never care about
the query language.

313
00:22:10,369 --> 00:22:14,899
It's really not an advanced search because
you don't need to use the chat box anymore.

314
00:22:14,899 --> 00:22:15,899
You can use them or not.

315
00:22:15,899 --> 00:22:20,580
You don't have to have all the attributes.

316
00:22:20,580 --> 00:22:23,200
You can add them in the documentation.

317
00:22:23,200 --> 00:22:28,220
And since the state is synchronized with the
search bar, you don't need to read the state

318
00:22:28,220 --> 00:22:33,639
of every selected patch, so it's still very
readable.

319
00:22:33,639 --> 00:22:40,129
And since I have a parser, it's easy to implement
because I know how to extract information

320
00:22:40,129 --> 00:22:44,139
from my query to select the field.

321
00:22:44,139 --> 00:22:52,279
And I need to click to add the value to my
query and to print it again.

322
00:22:52,279 --> 00:22:54,929
And that's kind of easy to implement because
think object is simple.

323
00:22:54,929 --> 00:22:58,450
So, I just need to push a value inside the
object.

324
00:22:58,450 --> 00:22:59,510
And then to define a print function.

325
00:22:59,510 --> 00:23:05,799
And the print function is actually it's great
because all the context is in the object.

326
00:23:05,799 --> 00:23:09,559
So, it's really easy to go from all the context
back to a string.

327
00:23:09,559 --> 00:23:14,889
So here, for example, I say furniture will
be a furniture name and the print value of

328
00:23:14,889 --> 00:23:16,610
all the attributes.

329
00:23:16,610 --> 00:23:20,600
And for attributes, it seems in the attribute
name it contains a lot of context too.

330
00:23:20,600 --> 00:23:24,610
I can say, well, if it's a color, you print
it as a hashtag and the attribute value.

331
00:23:24,610 --> 00:23:30,809
We have a way to generate this, but if you're
writing it by yourself, it's actually fairly

332
00:23:30,809 --> 00:23:32,440
straightforward.

333
00:23:32,440 --> 00:23:35,429
And a few things you can add is error reporting.

334
00:23:35,429 --> 00:23:39,169
Telling the user, why is such queries not
valid?

335
00:23:39,169 --> 00:23:41,679
Syntax highlight if you want to have the information.

336
00:23:41,679 --> 00:23:46,399
And autocomplete showing what values they
can type.

337
00:23:46,399 --> 00:23:50,059
Set of colors or chair when they start typing
the query.

338
00:23:50,059 --> 00:23:52,350
So, autocomplete is really efficient.

339
00:23:52,350 --> 00:23:59,269
So, the benefits of having some query language
is it's efficient, it's precise, it's readable

340
00:23:59,269 --> 00:24:00,619
and it's flexible.

341
00:24:00,619 --> 00:24:05,849
The drawback is that you are teaching your
users and it becomes crucial and you have

342
00:24:05,849 --> 00:24:09,649
to care about that a lot more than with a
simple keyword search.

343
00:24:09,649 --> 00:24:15,179
So, good use cases for custom query language
would be a tool that's used repeatedly.

344
00:24:15,179 --> 00:24:22,210
If you have a tool that's spent a lot of time
on, being efficient becomes a lot more important.

345
00:24:22,210 --> 00:24:23,950
Also, sharing.

346
00:24:23,950 --> 00:24:28,519
Because it's always nicer to share a small
search that's readable than a full object

347
00:24:28,519 --> 00:24:29,929
when it's inexact.

348
00:24:29,929 --> 00:24:35,210
And if you want to have integrations like
APIs or integrate results, it's nice for the

349
00:24:35,210 --> 00:24:40,509
developers to be able to type the query, copy
and paste it in the HTTP request and that's

350
00:24:40,509 --> 00:24:42,580
just going to work.

351
00:24:42,580 --> 00:24:44,809
Thank you for listening.

