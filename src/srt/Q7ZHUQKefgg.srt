1
00:00:08,240 --> 00:00:14,519

hi I'm Michael I'm from linz austria I'm

2
00:00:14,519 --> 00:00:17,279
going to talk about data chest today

3
00:00:17,279 --> 00:00:21,840
which is a uniform interface to main

4
00:00:21,840 --> 00:00:25,080
data so it should make interacting with

5
00:00:25,080 --> 00:00:28,260
the main data easier for us JavaScript

6
00:00:28,260 --> 00:00:32,899
programmers at work at classic pacheco

7
00:00:32,899 --> 00:00:35,730
in Linz which is an office sharing

8
00:00:35,730 --> 00:00:40,730
project we launched in 2008 and yeah

9
00:00:40,730 --> 00:00:45,750
let's jump into the topic I'm gonna give

10
00:00:45,750 --> 00:00:48,480
you some background at first so how this

11
00:00:48,480 --> 00:00:52,100
all started back in October last year

12
00:00:52,100 --> 00:00:56,489
we'll cover the most fundamental data

13
00:00:56,489 --> 00:01:00,420
structures or concepts of theta chess

14
00:01:00,420 --> 00:01:03,920
which are graphs notes objects and types

15
00:01:03,920 --> 00:01:10,200
will have a brief look at the API will

16
00:01:10,200 --> 00:01:15,930
cover persistence so persistence is like

17
00:01:15,930 --> 00:01:19,530
a drop in support so you don't have to

18
00:01:19,530 --> 00:01:22,710
use it but you can so it will be

19
00:01:22,710 --> 00:01:26,820
possible to to store data on the server

20
00:01:26,820 --> 00:01:28,259
side back end without writing

21
00:01:28,259 --> 00:01:32,340
server-side code actually we will cover

22
00:01:32,340 --> 00:01:36,299
offline applications also then I will

23
00:01:36,299 --> 00:01:39,840
give you a demo of substance I all which

24
00:01:39,840 --> 00:01:41,729
is actually the application that drives

25
00:01:41,729 --> 00:01:46,350
such data chairs development so we'll

26
00:01:46,350 --> 00:01:49,829
have a look at this and finally we will

27
00:01:49,829 --> 00:01:53,790
build a data J's client so that show you

28
00:01:53,790 --> 00:01:57,360
how the

29
00:01:57,370 --> 00:02:04,360
how the API works basically so as set

30
00:02:04,360 --> 00:02:06,010
data she has developed in the context of

31
00:02:06,010 --> 00:02:09,340
substance which is a web-based document

32
00:02:09,340 --> 00:02:14,050
publishing engine that's how it looks

33
00:02:14,050 --> 00:02:20,640
like the idea was the following arm

34
00:02:20,640 --> 00:02:22,900
substance is dedicated to manipulating

35
00:02:22,900 --> 00:02:25,780
documents right in the browser and as

36
00:02:25,780 --> 00:02:28,360
you know documents are usually composed

37
00:02:28,360 --> 00:02:33,310
sequentially like you start on top right

38
00:02:33,310 --> 00:02:36,030
your text and to format into it to

39
00:02:36,030 --> 00:02:39,780
structure in and add stash and in format

40
00:02:39,780 --> 00:02:45,160
but um the idea was to do it that a

41
00:02:45,160 --> 00:02:48,700
little bit differently so we split up

42
00:02:48,700 --> 00:02:52,450
this document into its integral parts so

43
00:02:52,450 --> 00:02:55,480
to say so we have a top-level the root

44
00:02:55,480 --> 00:02:57,940
node the document content node so to say

45
00:02:57,940 --> 00:03:00,640
which then consists the section and

46
00:03:00,640 --> 00:03:05,170
image or a text node so what we are

47
00:03:05,170 --> 00:03:07,270
ending up with is the data structure

48
00:03:07,270 --> 00:03:10,209
that looks like this one which is

49
00:03:10,209 --> 00:03:12,700
basically in the case of the document a

50
00:03:12,700 --> 00:03:15,670
tree but there could also be back

51
00:03:15,670 --> 00:03:18,670
references so what we are looking here

52
00:03:18,670 --> 00:03:21,750
at is basically a graph data structure

53
00:03:21,750 --> 00:03:26,470
and that's actually what data chest is

54
00:03:26,470 --> 00:03:29,230
all about it's an object model that fits

55
00:03:29,230 --> 00:03:31,840
on top of graph data so graph data is a

56
00:03:31,840 --> 00:03:34,239
low level data structure in computer

57
00:03:34,239 --> 00:03:38,160
science and we build sort of an API or

58
00:03:38,160 --> 00:03:40,360
abstraction layer on top of it so it's

59
00:03:40,360 --> 00:03:44,500
easier for us to interact with it data

60
00:03:44,500 --> 00:03:48,340
chasis in-memory data manipulation so

61
00:03:48,340 --> 00:03:50,709
you're basically manipulating and

62
00:03:50,709 --> 00:03:53,350
interacting with a local in-memory data

63
00:03:53,350 --> 00:03:56,200
structure which can then be persisted to

64
00:03:56,200 --> 00:03:57,700
the server at some point so that's the

65
00:03:57,700 --> 00:04:00,850
persistence layer then it provides the

66
00:04:00,850 --> 00:04:03,820
exact same API on server side and on the

67
00:04:03,820 --> 00:04:09,520
client side so you can reuse code

68
00:04:09,520 --> 00:04:12,220
written basically it also features a GUI

69
00:04:12,220 --> 00:04:18,910
interface for local and remote data this

70
00:04:18,910 --> 00:04:20,830
library is inspired by the concept of

71
00:04:20,830 --> 00:04:24,610
the Semantic Web which is basically also

72
00:04:24,610 --> 00:04:32,380
based on on graph data so you know the

73
00:04:32,380 --> 00:04:38,290
resource description framework that sort

74
00:04:38,290 --> 00:04:41,080
of acted as an inspiration and there's

75
00:04:41,080 --> 00:04:44,680
this project freebase dot-com I'll know

76
00:04:44,680 --> 00:04:47,320
if you have seen this they have been

77
00:04:47,320 --> 00:04:51,760
acquired by Google lately they also use

78
00:04:51,760 --> 00:04:53,170
the concept of semantic web but they

79
00:04:53,170 --> 00:04:58,240
stripped it like down to a simpler API

80
00:04:58,240 --> 00:05:02,320
which is chasing based or not xml stuff

81
00:05:02,320 --> 00:05:05,080
I also took some inspiration from under

82
00:05:05,080 --> 00:05:10,470
scratches so where are the use cases um

83
00:05:10,470 --> 00:05:15,880
you could for example um build data

84
00:05:15,880 --> 00:05:19,600
analysis and visualization tools on top

85
00:05:19,600 --> 00:05:24,820
of stata chest framework so I don't have

86
00:05:24,820 --> 00:05:26,290
enough time to show you this project

87
00:05:26,290 --> 00:05:30,160
life but what we see here is you can you

88
00:05:30,160 --> 00:05:32,470
can check it out yourself then what you

89
00:05:32,470 --> 00:05:38,500
see here is a visualization that shows

90
00:05:38,500 --> 00:05:44,760
and that that aggregates and filters

91
00:05:44,760 --> 00:05:47,530
data that are pulled from from github

92
00:05:47,530 --> 00:05:54,669
and it's aggregated it's represented as

93
00:05:54,669 --> 00:05:58,090
data object this data from github about

94
00:05:58,090 --> 00:06:03,180
top thousand not just repositories and

95
00:06:03,180 --> 00:06:06,750
the filtering and the aggregation is

96
00:06:06,750 --> 00:06:11,050
performed in memory so you click on on a

97
00:06:11,050 --> 00:06:13,750
certain aspect of the data and you

98
00:06:13,750 --> 00:06:16,210
immediately see the results check it out

99
00:06:16,210 --> 00:06:20,530
I said it could also be used for offline

100
00:06:20,530 --> 00:06:23,409
applications there's an example at task

101
00:06:23,409 --> 00:06:26,289
stop substance that I oh so you can

102
00:06:26,289 --> 00:06:28,749
check out that as well so this deals

103
00:06:28,749 --> 00:06:31,839
with the problems of offline

104
00:06:31,839 --> 00:06:33,550
applications like synchronization and

105
00:06:33,550 --> 00:06:38,289
conflict management so let's have a look

106
00:06:38,289 --> 00:06:45,209
at the anatomy of the data graph it

107
00:06:45,209 --> 00:06:50,259
basically consists of data nodes which

108
00:06:50,259 --> 00:06:55,839
can either be an object or a type so

109
00:06:55,839 --> 00:06:58,259
data nodes are then connected through

110
00:06:58,259 --> 00:07:03,519
properties so they reference each other

111
00:07:03,519 --> 00:07:07,419
basically each data node has a type

112
00:07:07,419 --> 00:07:12,399
property which describes which type so

113
00:07:12,399 --> 00:07:18,489
to say which class is a member of in

114
00:07:18,489 --> 00:07:22,419
this example we've some example data

115
00:07:22,419 --> 00:07:25,839
from from a document model and we also

116
00:07:25,839 --> 00:07:29,559
include a user data structure here so a

117
00:07:29,559 --> 00:07:32,829
document has a creator which points to a

118
00:07:32,829 --> 00:07:37,149
user objects in the graph space also it

119
00:07:37,149 --> 00:07:40,709
contains the section or more and

120
00:07:40,709 --> 00:07:43,479
connects this with the children property

121
00:07:43,479 --> 00:07:45,939
which is a non unique property which

122
00:07:45,939 --> 00:07:52,540
means can have more than one value

123
00:07:52,550 --> 00:07:58,090
so all all data nodes in the graph share

124
00:07:58,090 --> 00:08:01,070
certain set of properties which are the

125
00:08:01,070 --> 00:08:03,350
ID property that is the unique

126
00:08:03,350 --> 00:08:07,100
identifier which is either be generated

127
00:08:07,100 --> 00:08:10,580
or explicitly set by the user the type

128
00:08:10,580 --> 00:08:14,450
property is also recommended so this

129
00:08:14,450 --> 00:08:19,700
depict some of which type and the node

130
00:08:19,700 --> 00:08:23,750
belongs to that need to be filled out

131
00:08:23,750 --> 00:08:25,400
too and we have a ref property a

132
00:08:25,400 --> 00:08:28,610
revision which is used for detecting

133
00:08:28,610 --> 00:08:33,970
conflict in a persistence scenario so

134
00:08:33,970 --> 00:08:39,520
this is how a data type looks like um

135
00:08:39,520 --> 00:08:44,330
it's the Chasen representation basically

136
00:08:44,330 --> 00:08:46,430
an object literal you have to specify an

137
00:08:46,430 --> 00:08:50,600
ID type property and in the case of a

138
00:08:50,600 --> 00:08:52,850
type you need properties property which

139
00:08:52,850 --> 00:08:55,750
describe the abstract characteristics of

140
00:08:55,750 --> 00:08:59,840
objects of the type so in this case we

141
00:08:59,840 --> 00:09:01,970
have a section which contains a name

142
00:09:01,970 --> 00:09:04,700
property which is a value type type

143
00:09:04,700 --> 00:09:08,170
string and the children property which

144
00:09:08,170 --> 00:09:15,590
can either be a text or an image so

145
00:09:15,590 --> 00:09:20,240
here's an instance of this type so to

146
00:09:20,240 --> 00:09:24,830
say it's a concrete section which has a

147
00:09:24,830 --> 00:09:29,660
name and children property which refers

148
00:09:29,660 --> 00:09:34,040
to an image and it has a link to the

149
00:09:34,040 --> 00:09:41,050
Associated type which is type section a

150
00:09:41,050 --> 00:09:44,240
data graph is constructed by calling the

151
00:09:44,240 --> 00:09:47,300
data graph constructor and pass it a

152
00:09:47,300 --> 00:09:51,580
serialized data graph some seed data to

153
00:09:51,580 --> 00:09:56,540
initialize the data structure basically

154
00:09:56,540 --> 00:10:00,050
you insert some

155
00:10:00,050 --> 00:10:02,660
schema information here but you can also

156
00:10:02,660 --> 00:10:07,940
combine it with objects when you've done

157
00:10:07,940 --> 00:10:10,339
that you are ready to add objects to the

158
00:10:10,339 --> 00:10:13,220
graph which is as easy as calling graph

159
00:10:13,220 --> 00:10:18,430
top set and pass it an object

160
00:10:18,430 --> 00:10:22,970
represented as a JSON object in this

161
00:10:22,970 --> 00:10:29,180
case we just add a new text node we can

162
00:10:29,180 --> 00:10:31,040
then set properties on an existing

163
00:10:31,040 --> 00:10:34,190
object therefore we need to just pull it

164
00:10:34,190 --> 00:10:36,230
out of the graph at first which we do

165
00:10:36,230 --> 00:10:41,660
with the graft or get call um we then

166
00:10:41,660 --> 00:10:43,550
are ready to call sec we get back a

167
00:10:43,550 --> 00:10:45,170
reference to section reference in this

168
00:10:45,170 --> 00:10:50,990
case and we can call section set and set

169
00:10:50,990 --> 00:10:52,519
the children property in this case we

170
00:10:52,519 --> 00:10:54,470
add a text object that we've created

171
00:10:54,470 --> 00:11:05,620
earlier at some point we are ready to

172
00:11:05,620 --> 00:11:08,510
synchronize our local data structure

173
00:11:08,510 --> 00:11:10,850
with has some dirty notes that we've

174
00:11:10,850 --> 00:11:13,160
changed and other ones that are not

175
00:11:13,160 --> 00:11:15,550
changed yet so it should just

176
00:11:15,550 --> 00:11:20,000
synchronize the 30 notes we just have to

177
00:11:20,000 --> 00:11:22,940
from an user point of view we just have

178
00:11:22,940 --> 00:11:29,390
to call graph top sync so that's how

179
00:11:29,390 --> 00:11:31,490
grasp assistants are basically looked

180
00:11:31,490 --> 00:11:35,120
like so we have our in-memory data

181
00:11:35,120 --> 00:11:37,399
structure on the right side here the

182
00:11:37,399 --> 00:11:40,790
client and on the server side there's

183
00:11:40,790 --> 00:11:42,470
the huge craft with all the information

184
00:11:42,470 --> 00:11:46,279
from all the users so to say and we are

185
00:11:46,279 --> 00:11:51,410
talking to either a graph read service

186
00:11:51,410 --> 00:11:54,649
or a graph right service so if you have

187
00:11:54,649 --> 00:11:57,490
changed two nodes we just synchronize

188
00:11:57,490 --> 00:12:00,230
those two dirty notes and sent them in

189
00:12:00,230 --> 00:12:03,980
one go to the server arm which is a no

190
00:12:03,980 --> 00:12:08,600
chess um back end it then gets passed

191
00:12:08,600 --> 00:12:10,699
out so we fill the stack that you can

192
00:12:10,699 --> 00:12:11,769
apply

193
00:12:11,769 --> 00:12:17,350
and it it end up in couchdb so one node

194
00:12:17,350 --> 00:12:20,350
in the local graph later on corresponds

195
00:12:20,350 --> 00:12:24,790
to one document in coach t be so this is

196
00:12:24,790 --> 00:12:27,699
how it's basically working and we have a

197
00:12:27,699 --> 00:12:30,759
quick look at how filters work so in the

198
00:12:30,759 --> 00:12:34,329
case a user is trying to save two nodes

199
00:12:34,329 --> 00:12:37,600
one of it is a section another one is an

200
00:12:37,600 --> 00:12:42,160
image will go through the authorization

201
00:12:42,160 --> 00:12:45,670
filtered first which detects that the

202
00:12:45,670 --> 00:12:47,889
user session is not authorized to save

203
00:12:47,889 --> 00:12:52,410
the image node so it will be rejected

204
00:12:52,410 --> 00:12:56,499
the section node and passes through and

205
00:12:56,499 --> 00:12:59,769
goes through the sanitization a filter

206
00:12:59,769 --> 00:13:05,079
for example if you want to strip HTML

207
00:13:05,079 --> 00:13:09,879
code that could be injected and could be

208
00:13:09,879 --> 00:13:14,259
used for cross-site scripting so you

209
00:13:14,259 --> 00:13:17,139
gonna change this node and pass it to

210
00:13:17,139 --> 00:13:25,090
couchdb then

211
00:13:25,100 --> 00:13:27,450
the next release of data jess is

212
00:13:27,450 --> 00:13:31,170
dedicated to offline applications so

213
00:13:31,170 --> 00:13:35,280
with data chess Oh point five there will

214
00:13:35,280 --> 00:13:38,400
be on the future of be directional sink

215
00:13:38,400 --> 00:13:41,450
so we're going to use the pull push

216
00:13:41,450 --> 00:13:45,300
approach here so that if you have your

217
00:13:45,300 --> 00:13:51,240
local graph data structure you can as

218
00:13:51,240 --> 00:13:54,840
soon as you click sync um you get back

219
00:13:54,840 --> 00:13:57,690
updates that have happened on the server

220
00:13:57,690 --> 00:14:01,650
in the meantime and those notes then get

221
00:14:01,650 --> 00:14:04,580
an erection to the local graph which can

222
00:14:04,580 --> 00:14:07,320
result in conflicts if you have changes

223
00:14:07,320 --> 00:14:09,600
locally as well so that's the hard part

224
00:14:09,600 --> 00:14:12,270
basically this offline applications in

225
00:14:12,270 --> 00:14:13,680
area we are all have to deal with when

226
00:14:13,680 --> 00:14:18,600
we want to build this apps and yeah data

227
00:14:18,600 --> 00:14:20,220
change is going to be you are using

228
00:14:20,220 --> 00:14:24,210
local storage for keeping local data

229
00:14:24,210 --> 00:14:29,160
persistent and this is how we are

230
00:14:29,160 --> 00:14:32,630
dealing with conflict management

231
00:14:32,630 --> 00:14:35,430
supposed to following scenario to

232
00:14:35,430 --> 00:14:39,870
clients check out the same node say a

233
00:14:39,870 --> 00:14:49,830
text node and start editing them so from

234
00:14:49,830 --> 00:14:53,340
logically the first client changes this

235
00:14:53,340 --> 00:15:01,140
node gets dirty then but it will be

236
00:15:01,140 --> 00:15:04,350
synchronized with the server which is

237
00:15:04,350 --> 00:15:06,210
okay you see this on the left side here

238
00:15:06,210 --> 00:15:13,320
client one since the client one

239
00:15:13,320 --> 00:15:15,720
specified the right revision which is

240
00:15:15,720 --> 00:15:17,480
actually latest revision on the server

241
00:15:17,480 --> 00:15:21,300
it goes through and the client gets back

242
00:15:21,300 --> 00:15:23,730
the updated node containing the new

243
00:15:23,730 --> 00:15:29,090
revision which is revision to the client

244
00:15:29,090 --> 00:15:33,390
to on the other hand the meanwhile so to

245
00:15:33,390 --> 00:15:35,730
say also changes

246
00:15:35,730 --> 00:15:39,000
um the same note and hits the

247
00:15:39,000 --> 00:15:43,350
synchronize button batteries he's the

248
00:15:43,350 --> 00:15:47,100
letter one so we'll be there will be a

249
00:15:47,100 --> 00:15:50,430
conflict here so what happens then data

250
00:15:50,430 --> 00:15:52,620
jazz cases that server returns the

251
00:15:52,620 --> 00:15:57,300
newest revision it knows and the client

252
00:15:57,300 --> 00:16:02,339
then have to deal with this conflict

253
00:16:02,339 --> 00:16:05,730
scenarios here to resolve the conflict

254
00:16:05,730 --> 00:16:09,209
himself so basically you have to

255
00:16:09,209 --> 00:16:11,910
implement a strategy to deal with this

256
00:16:11,910 --> 00:16:17,430
certain scenario after it has been

257
00:16:17,430 --> 00:16:19,290
resolved by the client you can either

258
00:16:19,290 --> 00:16:22,199
use his version or the version that was

259
00:16:22,199 --> 00:16:26,250
on the server and then start another

260
00:16:26,250 --> 00:16:31,670
sink and this is on the right side then

261
00:16:31,670 --> 00:16:35,730
it gets back to revision three and it is

262
00:16:35,730 --> 00:16:42,389
fun again ok I'm going to show you a

263
00:16:42,389 --> 00:16:46,560
project I'm working on since last year

264
00:16:46,560 --> 00:16:51,930
October which is basically dead wondered

265
00:16:51,930 --> 00:16:58,350
um yeah drives data chase development is

266
00:16:58,350 --> 00:17:01,769
set and it's basically open document

267
00:17:01,769 --> 00:17:03,829
authoring and publishing for the web and

268
00:17:03,829 --> 00:17:06,600
open means it's a fully open source

269
00:17:06,600 --> 00:17:09,089
effort so you can check it out it can be

270
00:17:09,089 --> 00:17:11,959
used for free and it targets open

271
00:17:11,959 --> 00:17:16,429
collaborations with Courage's readers to

272
00:17:16,429 --> 00:17:23,790
contribute to documents easily so let's

273
00:17:23,790 --> 00:17:25,949
have a look at like recent documents

274
00:17:25,949 --> 00:17:29,970
here there are a lot of hello word

275
00:17:29,970 --> 00:17:36,320
documents already this one is a nice one

276
00:17:36,320 --> 00:17:40,530
then Halladay he used the substance

277
00:17:40,530 --> 00:17:45,750
editor to make a write-up about the

278
00:17:45,750 --> 00:17:50,330
musical composition and he added some

279
00:17:50,330 --> 00:17:57,629
transcripts here

280
00:17:57,639 --> 00:18:02,409
so that's that's a nice example but what

281
00:18:02,409 --> 00:18:04,839
we want to look at is how document

282
00:18:04,839 --> 00:18:06,909
manipulation looks like so if we want to

283
00:18:06,909 --> 00:18:17,169
add a document so let's go here and this

284
00:18:17,169 --> 00:18:19,690
is actually the presentation we were

285
00:18:19,690 --> 00:18:22,419
looking at before it's basically a

286
00:18:22,419 --> 00:18:31,310
substance document that is being friends

287
00:18:31,320 --> 00:18:34,149
translated into into a slideshow on the

288
00:18:34,149 --> 00:18:39,600
fly

289
00:18:39,610 --> 00:18:43,390
so what we can do here is change

290
00:18:43,390 --> 00:18:53,400
something

291
00:18:53,410 --> 00:18:56,920
and if you look at the upper right

292
00:18:56,920 --> 00:19:01,870
corner c is spinning wheel there so if

293
00:19:01,870 --> 00:19:04,090
you manipulate local data structure the

294
00:19:04,090 --> 00:19:06,630
local data graph some point a

295
00:19:06,630 --> 00:19:09,040
synchronization gets triggered and the

296
00:19:09,040 --> 00:19:11,020
changes to the document get synchronized

297
00:19:11,020 --> 00:19:16,480
with the server yeah we're pretty far

298
00:19:16,480 --> 00:19:21,280
yet you can invite other collaborators

299
00:19:21,280 --> 00:19:23,590
by specifying an email address so it

300
00:19:23,590 --> 00:19:27,940
gets a link can join the document

301
00:19:27,940 --> 00:19:32,350
creation process we've built versioning

302
00:19:32,350 --> 00:19:39,970
so now it's time to publish this this

303
00:19:39,970 --> 00:19:44,140
document so it is available to you right

304
00:19:44,140 --> 00:19:46,090
now so if you are going to the substance

305
00:19:46,090 --> 00:19:49,300
I all platform and click on the recent

306
00:19:49,300 --> 00:19:51,640
documents panel it should be available

307
00:19:51,640 --> 00:19:56,980
to you but you probably not interested

308
00:19:56,980 --> 00:20:03,210
in looking at the at the substance

309
00:20:03,210 --> 00:20:07,990
representation here you're going to see

310
00:20:07,990 --> 00:20:12,910
the slideshow representation and for

311
00:20:12,910 --> 00:20:16,230
that you can use the export dialog and

312
00:20:16,230 --> 00:20:18,580
there are many formats that are already

313
00:20:18,580 --> 00:20:24,880
available so we use msn substance I'm

314
00:20:24,880 --> 00:20:27,040
exposes documents as data as a data

315
00:20:27,040 --> 00:20:29,890
graph and an external service in this

316
00:20:29,890 --> 00:20:31,810
case it's called letterpress which is

317
00:20:31,810 --> 00:20:34,350
the conversion service that turns

318
00:20:34,350 --> 00:20:38,530
substance documents into arbitrary other

319
00:20:38,530 --> 00:20:42,160
formats we've implemented some some

320
00:20:42,160 --> 00:20:44,560
predefined output formats which are run

321
00:20:44,560 --> 00:20:48,250
through pan dock which is pretty good

322
00:20:48,250 --> 00:20:51,640
for cross document compiling so between

323
00:20:51,640 --> 00:20:54,580
formats so to say

324
00:20:54,580 --> 00:20:56,429
okay and here's the shower

325
00:20:56,429 --> 00:20:59,799
representation and we are back in our

326
00:20:59,799 --> 00:21:06,210
slides

327
00:21:06,220 --> 00:21:16,840
yeah so you are invited to to try out

328
00:21:16,840 --> 00:21:21,130
substance on the data J's API and that

329
00:21:21,130 --> 00:21:24,780
could be done by just consuming the

330
00:21:24,780 --> 00:21:28,600
substance API and building a client

331
00:21:28,600 --> 00:21:30,700
using data chairs so all you need is

332
00:21:30,700 --> 00:21:33,730
basically a static HTML file in the

333
00:21:33,730 --> 00:21:39,100
substance data chess library so what we

334
00:21:39,100 --> 00:21:40,990
are going to do is first connect to

335
00:21:40,990 --> 00:21:44,039
remote data graph fetch the document and

336
00:21:44,039 --> 00:21:53,620
render it so we are going to to

337
00:21:53,620 --> 00:21:57,039
construct a new data graph pass it a

338
00:21:57,039 --> 00:22:01,760
schema which is available in substance

339
00:22:01,770 --> 00:22:06,400
you connect to a remote back end using

340
00:22:06,400 --> 00:22:09,580
HX in this case and you specify URL

341
00:22:09,580 --> 00:22:17,860
where this service lives you can then

342
00:22:17,860 --> 00:22:20,020
start fetching a document by specifying

343
00:22:20,020 --> 00:22:24,010
a query object and pass it to the graph

344
00:22:24,010 --> 00:22:31,409
top fetch method and you get a call back

345
00:22:31,409 --> 00:22:36,549
as soon as the result is there we are

346
00:22:36,549 --> 00:22:39,610
interacting with this nodes collection

347
00:22:39,610 --> 00:22:43,390
you can just ask to get the document ID

348
00:22:43,390 --> 00:22:46,929
you specified before once you've done

349
00:22:46,929 --> 00:22:51,549
that you can like walk this graph you

350
00:22:51,549 --> 00:22:54,669
can progress it by using the get api so

351
00:22:54,669 --> 00:22:58,000
we have talked get children get the

352
00:22:58,000 --> 00:23:01,750
first children get those children which

353
00:23:01,750 --> 00:23:04,750
is a section obviously and get the first

354
00:23:04,750 --> 00:23:08,620
text element of this and its content so

355
00:23:08,620 --> 00:23:11,950
what you then have to do is creating an

356
00:23:11,950 --> 00:23:16,980
HTML renderer you pass the document

357
00:23:16,980 --> 00:23:18,530
reference

358
00:23:18,530 --> 00:23:20,960
and call render on it for example or you

359
00:23:20,960 --> 00:23:23,390
can do it differently and then you're

360
00:23:23,390 --> 00:23:26,230
ready to inject this generator the HTML

361
00:23:26,230 --> 00:23:33,740
to your website at some point so there

362
00:23:33,740 --> 00:23:36,680
are some examples for substance

363
00:23:36,680 --> 00:23:43,590
integration next up then he started to

364
00:23:43,600 --> 00:23:47,300
to write his blog using the substance

365
00:23:47,300 --> 00:23:50,960
platform and integrates his website with

366
00:23:50,960 --> 00:23:57,650
the with the API lets looks pretty nice

367
00:23:57,650 --> 00:24:06,899
i would say

368
00:24:06,909 --> 00:24:15,549
so that's him there's another one Molly

369
00:24:15,549 --> 00:24:18,700
O'Shea Liga he's here from Berlin he

370
00:24:18,700 --> 00:24:23,679
contacted me and he wanted to use

371
00:24:23,679 --> 00:24:25,529
substance for creating a

372
00:24:25,529 --> 00:24:30,159
community-driven book and so we started

373
00:24:30,159 --> 00:24:34,919
to sketch something that is basically a

374
00:24:34,919 --> 00:24:38,590
reader of substance document as well but

375
00:24:38,590 --> 00:24:41,799
optimized for like looking at it as it

376
00:24:41,799 --> 00:24:45,340
were a book so we have two chapters on

377
00:24:45,340 --> 00:24:47,679
the left side and can never get through

378
00:24:47,679 --> 00:24:52,389
it let's basically strip down to a

379
00:24:52,389 --> 00:24:59,559
minimum and we can as a reader just get

380
00:24:59,559 --> 00:25:03,399
active and discuss certain text

381
00:25:03,399 --> 00:25:06,489
fragments on the substance platform so

382
00:25:06,489 --> 00:25:09,909
took the easy to contribute and you

383
00:25:09,909 --> 00:25:12,519
should no longer need to write an email

384
00:25:12,519 --> 00:25:15,909
to the author and coordinate this so you

385
00:25:15,909 --> 00:25:32,110
just add a comment to this

386
00:25:32,120 --> 00:25:37,370
that's basically is it so I would like

387
00:25:37,370 --> 00:25:40,580
to say you're invited to to check that

388
00:25:40,580 --> 00:25:43,520
out try out the substance I'll platform

389
00:25:43,520 --> 00:25:47,840
try out a data chess and start

390
00:25:47,840 --> 00:25:53,500
implementing your own application um

391
00:25:53,500 --> 00:25:56,710
these two project doesn't didn't have

392
00:25:56,710 --> 00:25:59,870
get any funding yet we applied for a

393
00:25:59,870 --> 00:26:03,130
grant in Austria but it got rejected and

394
00:26:03,130 --> 00:26:06,260
yeah just check it out contribute to the

395
00:26:06,260 --> 00:26:10,910
source or if you can afford it we are

396
00:26:10,910 --> 00:26:13,670
open for donations you can send to

397
00:26:13,670 --> 00:26:15,980
contributed substance io or if you have

398
00:26:15,980 --> 00:26:18,650
any questions just asking afterwards or

399
00:26:18,650 --> 00:26:24,380
send an email to info @ substance oil so

400
00:26:24,380 --> 00:26:36,470
are there any questions right now

401
00:26:36,480 --> 00:26:57,330
yeah yeah it's one example exactly yeah

402
00:26:57,330 --> 00:27:02,110
yeah the question was um if there's if

403
00:27:02,110 --> 00:27:05,530
this document model we've seen is just

404
00:27:05,530 --> 00:27:07,870
an example and yes it is you can

405
00:27:07,870 --> 00:27:11,620
basically build whatever application you

406
00:27:11,620 --> 00:27:16,440
can imagine so you can specify your own

407
00:27:16,440 --> 00:27:20,440
data model which may be a project that

408
00:27:20,440 --> 00:27:22,600
contains tasks for example or whatever

409
00:27:22,600 --> 00:27:25,120
so that basically for building

410
00:27:25,120 --> 00:27:35,640
applications of any kind yeah

411
00:27:35,650 --> 00:27:41,240
yeah the question was there is a method

412
00:27:41,240 --> 00:27:44,840
of validation and yes there are some

413
00:27:44,840 --> 00:27:49,160
basic tools to do validation on it you

414
00:27:49,160 --> 00:27:50,660
can specify required property for

415
00:27:50,660 --> 00:27:55,330
example or you can specify a validator

416
00:27:55,330 --> 00:27:58,130
regular expression to make some checks

417
00:27:58,130 --> 00:28:02,000
that's that's now supported but you can

418
00:28:02,000 --> 00:28:05,540
also use a middleware and server-side to

419
00:28:05,540 --> 00:28:07,910
more complex stuff of validation and

420
00:28:07,910 --> 00:28:24,480
reject notes or something

421
00:28:24,490 --> 00:28:27,920
yeah yeah your renderer somehow needs to

422
00:28:27,920 --> 00:28:29,890
know how the structure looks like but

423
00:28:29,890 --> 00:28:37,580
yeah yeah you could you wouldn't need

424
00:28:37,580 --> 00:28:39,560
data chess at all for rendering this

425
00:28:39,560 --> 00:28:41,450
document you can just take the chasing

426
00:28:41,450 --> 00:28:44,930
and use Ruby or whatever you would like

427
00:28:44,930 --> 00:29:00,060
to yeah

428
00:29:00,070 --> 00:29:07,320
ya know

429
00:29:07,330 --> 00:29:11,240
the question was if data chess can

430
00:29:11,240 --> 00:29:14,570
validate this on the client side not at

431
00:29:14,570 --> 00:29:18,200
the server side so yeah basically it's

432
00:29:18,200 --> 00:29:21,940
done on both sides so already so this

433
00:29:21,940 --> 00:29:24,680
validator or required properties are I

434
00:29:24,680 --> 00:29:27,200
checked locally and they're immediately

435
00:29:27,200 --> 00:29:36,290
rejected so yeah

436
00:29:36,300 --> 00:29:44,590
yeah so yeah the question was can data

437
00:29:44,590 --> 00:29:49,920
jazz resolve associations between

438
00:29:49,920 --> 00:29:52,810
objects and yeah that's basically what

439
00:29:52,810 --> 00:29:55,290
data chess is about so to give you an

440
00:29:55,290 --> 00:29:58,120
API that makes that easier so you just

441
00:29:58,120 --> 00:30:00,580
can call get and get references back

442
00:30:00,580 --> 00:30:02,620
which are wrapped in a so called data

443
00:30:02,620 --> 00:30:04,840
hash which is also part of the framework

444
00:30:04,840 --> 00:30:09,790
and yeah so theta chess is used for

445
00:30:09,790 --> 00:30:22,450
commercial then

446
00:30:22,460 --> 00:30:27,710
between documents I don't do yet but

447
00:30:27,710 --> 00:30:31,260
that could be done to year so it's some

448
00:30:31,260 --> 00:30:33,990
sort of how you index it or something

449
00:30:33,990 --> 00:30:45,330
yeah yeah the question was if I've

450
00:30:45,330 --> 00:30:48,750
looked at chasing schema and how it

451
00:30:48,750 --> 00:30:50,460
compares to that I'm basically as a

452
00:30:50,460 --> 00:30:55,620
competitor so I've had brief look at it

453
00:30:55,620 --> 00:30:59,670
but I was somehow more influenced by the

454
00:30:59,670 --> 00:31:01,950
meta web object model which is used at

455
00:31:01,950 --> 00:31:05,190
free based calm and so I try to apply

456
00:31:05,190 --> 00:31:22,100
this rules there yeah yeah

457
00:31:22,110 --> 00:31:26,680
yeah the question was if there are

458
00:31:26,680 --> 00:31:29,200
events triggered if some action captain

459
00:31:29,200 --> 00:31:33,790
like there's a new note that gets pushed

460
00:31:33,790 --> 00:31:40,000
to the client at the current version at

461
00:31:40,000 --> 00:31:43,090
current at moment we just support push

462
00:31:43,090 --> 00:31:46,060
support which has support push mechanism

463
00:31:46,060 --> 00:31:51,400
and basically when you manipulate a

464
00:31:51,400 --> 00:31:53,200
document that dirty event gets triggered

465
00:31:53,200 --> 00:31:57,430
and you can bind on that one so I'm

466
00:31:57,430 --> 00:32:05,380
sorry there's a tour event that gets

467
00:32:05,380 --> 00:32:07,390
triggered when you manipulate documents

468
00:32:07,390 --> 00:32:10,480
locally so there are some events for

469
00:32:10,480 --> 00:32:23,860
different scenarios

470
00:32:23,870 --> 00:32:27,660
yeah yeah yeah good question and this is

471
00:32:27,660 --> 00:32:31,320
a work in progress and it's all should

472
00:32:31,320 --> 00:32:34,290
be solved with a 05 which question 05

473
00:32:34,290 --> 00:32:42,499
yeah so that's on the list

