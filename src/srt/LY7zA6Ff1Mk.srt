1
00:00:07,880 --> 00:00:12,139

so yes I'm going to be taking all of

2
00:00:12,139 --> 00:00:14,639
taking over all of your browser's for

3
00:00:14,639 --> 00:00:17,640
fun because I can a little bit about

4
00:00:17,640 --> 00:00:20,520
myself i'm james i like doing stupid

5
00:00:20,520 --> 00:00:23,550
things with ruby and javascript and i

6
00:00:23,550 --> 00:00:25,650
wrote a bunch of open source stuff that

7
00:00:25,650 --> 00:00:27,840
you might have heard of and most

8
00:00:27,840 --> 00:00:29,460
important thing about this talk is that

9
00:00:29,460 --> 00:00:32,279
there is audience participation as you

10
00:00:32,279 --> 00:00:34,620
as i'm sure you'll have seen me tweeting

11
00:00:34,620 --> 00:00:39,079
for maybe weeks and if you have a

12
00:00:39,079 --> 00:00:42,000
macintosh computer that's one of the

13
00:00:42,000 --> 00:00:45,059
ones that's got this all apple but and

14
00:00:45,059 --> 00:00:47,640
firefox a recent firefox so six or seven

15
00:00:47,640 --> 00:00:52,079
i need you to open it and go to this URL

16
00:00:52,079 --> 00:00:54,480
and then don't do anything then click on

17
00:00:54,480 --> 00:00:55,710
anything thanks line into anything you

18
00:00:55,710 --> 00:00:57,660
just have to open that URL and the

19
00:00:57,660 --> 00:00:59,760
reason why it will become clear shortly

20
00:00:59,760 --> 00:01:05,519
and keep your volume off for now so some

21
00:01:05,519 --> 00:01:08,640
backstory why am I doing this this is a

22
00:01:08,640 --> 00:01:11,580
band called The Flaming Lips this is

23
00:01:11,580 --> 00:01:16,140
something sorry

24
00:01:16,150 --> 00:01:23,160
never got that okay turn your sound off

25
00:01:23,170 --> 00:01:27,380
thank you awesome so yes this band

26
00:01:27,380 --> 00:01:28,820
called flaming lips they're mostly

27
00:01:28,820 --> 00:01:31,700
famous these days fulfilling stadiums

28
00:01:31,700 --> 00:01:34,700
with balloons and confetti and lots of

29
00:01:34,700 --> 00:01:37,820
weird noise and but back in the 90s they

30
00:01:37,820 --> 00:01:40,580
released this album called zai rica as

31
00:01:40,580 --> 00:01:43,040
Erica came on four discs that you were

32
00:01:43,040 --> 00:01:44,690
supposed to play at the same time

33
00:01:44,690 --> 00:01:46,850
they're assuming that people had four

34
00:01:46,850 --> 00:01:50,360
stereos lying around and the idea was

35
00:01:50,360 --> 00:01:51,979
that like a this gave the user some

36
00:01:51,979 --> 00:01:54,260
control over listener rather some

37
00:01:54,260 --> 00:01:56,119
control over the sound but also took

38
00:01:56,119 --> 00:01:57,950
advantage of the fact that CD players

39
00:01:57,950 --> 00:02:00,470
aren't perfect their clocks all track at

40
00:02:00,470 --> 00:02:02,660
different speeds and they don't track

41
00:02:02,660 --> 00:02:04,340
constantly like the same CD player

42
00:02:04,340 --> 00:02:07,280
doesn't maintain constant time very well

43
00:02:07,280 --> 00:02:10,250
so all the samples on these discs we're

44
00:02:10,250 --> 00:02:11,990
kind of getting an out of sync with each

45
00:02:11,990 --> 00:02:13,550
other and you'd get interesting effect

46
00:02:13,550 --> 00:02:15,170
and like the gaps between tracks would

47
00:02:15,170 --> 00:02:17,480
be different on each machine and so

48
00:02:17,480 --> 00:02:19,400
they're kind of using multiple outputs

49
00:02:19,400 --> 00:02:22,489
to do something interesting this is been

50
00:02:22,489 --> 00:02:24,380
called Boredoms from Japan they're a

51
00:02:24,380 --> 00:02:26,750
noise rock band they're extremely noisy

52
00:02:26,750 --> 00:02:29,959
and they have a7 neck attire they have

53
00:02:29,959 --> 00:02:32,660
this array of things that I don't know

54
00:02:32,660 --> 00:02:34,160
what they're called that this dude beats

55
00:02:34,160 --> 00:02:38,269
with sticks in this picture there's at

56
00:02:38,269 --> 00:02:42,739
least one two three four well it's

57
00:02:42,739 --> 00:02:46,910
actually 77 drum kits this is a show

58
00:02:46,910 --> 00:02:49,010
that put on on 7th of july two thousand

59
00:02:49,010 --> 00:02:51,830
seven in brooklyn they got 77 drummers

60
00:02:51,830 --> 00:02:53,300
from a bunch of alternative rock bands

61
00:02:53,300 --> 00:02:55,970
and played a bunch of their material and

62
00:02:55,970 --> 00:02:59,510
it was this crazy mix of kind of like

63
00:02:59,510 --> 00:03:02,630
just chaos and then when they all

64
00:03:02,630 --> 00:03:04,459
actually stopped deliberately drumming

65
00:03:04,459 --> 00:03:06,230
together it's just this tremendous is

66
00:03:06,230 --> 00:03:08,750
that this giant robot marching to turn

67
00:03:08,750 --> 00:03:10,790
has incredible I've only seen them with

68
00:03:10,790 --> 00:03:12,860
seven drummers but that was staggering

69
00:03:12,860 --> 00:03:14,600
so I assumed this was just I'm surprised

70
00:03:14,600 --> 00:03:17,070
the earth than blow up

71
00:03:17,070 --> 00:03:19,960
skip forward a few years I'm seeing a

72
00:03:19,960 --> 00:03:22,210
hack day in san francisco and i'm kind

73
00:03:22,210 --> 00:03:23,290
of tired of glowing together web

74
00:03:23,290 --> 00:03:24,880
services and i want to make some music

75
00:03:24,880 --> 00:03:28,990
so I you know I'm kind of looking around

76
00:03:28,990 --> 00:03:30,820
for people who know how to do synth

77
00:03:30,820 --> 00:03:32,170
stuff because I know nothing about it

78
00:03:32,170 --> 00:03:35,170
and I'm not getting anywhere with that

79
00:03:35,170 --> 00:03:37,690
and then I think hey there's a bunch of

80
00:03:37,690 --> 00:03:39,400
other computers here what if we could

81
00:03:39,400 --> 00:03:42,640
make them all make music and so I put

82
00:03:42,640 --> 00:03:44,110
together this really simple little synth

83
00:03:44,110 --> 00:03:47,080
and it was monophonic it had really

84
00:03:47,080 --> 00:03:49,510
basic controls can do very much but we

85
00:03:49,510 --> 00:03:50,980
got a room full of computers to play

86
00:03:50,980 --> 00:03:52,480
happy birthday to one of the organizers

87
00:03:52,480 --> 00:03:58,740
and it sounded just about recognizable

88
00:03:58,740 --> 00:04:02,500
but yeah it worked so I want to go away

89
00:04:02,500 --> 00:04:03,580
and do something more sophisticated

90
00:04:03,580 --> 00:04:05,830
something where you know you could

91
00:04:05,830 --> 00:04:08,500
record stuff play loops play chords do

92
00:04:08,500 --> 00:04:11,500
effects and that's what I want to show

93
00:04:11,500 --> 00:04:15,100
off today I had to confess when I

94
00:04:15,100 --> 00:04:16,420
proposed this talk I didn't know what it

95
00:04:16,420 --> 00:04:18,070
was going to turn into I just wanted to

96
00:04:18,070 --> 00:04:20,710
get hundreds of laptops together and am

97
00:04:20,710 --> 00:04:22,990
but I've learned something by building

98
00:04:22,990 --> 00:04:24,340
this I hope you guys will get something

99
00:04:24,340 --> 00:04:26,980
out of it too so that is where this

100
00:04:26,980 --> 00:04:28,960
project came from and so I'm going to

101
00:04:28,960 --> 00:04:34,360
try to do a demo and if if this works

102
00:04:34,360 --> 00:04:35,950
I'll be tremendously surprised because

103
00:04:35,950 --> 00:04:38,350
it has a very high chance of not working

104
00:04:38,350 --> 00:04:46,280
at all so let's just take those down

105
00:04:46,290 --> 00:04:48,670
yeah if you guys could like refresh your

106
00:04:48,670 --> 00:04:50,020
browser's Ashley because it's probably

107
00:04:50,020 --> 00:04:53,519
 up ready

108
00:04:53,529 --> 00:04:59,730
yeah oh well

109
00:04:59,740 --> 00:05:05,889
we'll refreshed okay okay so i am just

110
00:05:05,889 --> 00:05:08,410
going to try and get a couple people to

111
00:05:08,410 --> 00:05:18,460
play this one sample forgot a couple

112
00:05:18,460 --> 00:05:23,290
people playing laughs

113
00:05:23,300 --> 00:05:45,360
yeah key turn your sound up now

114
00:05:45,370 --> 00:05:55,279
if they start buzzing just refresh

115
00:05:55,289 --> 00:06:05,030
Oh

116
00:06:05,040 --> 00:06:10,510
I feel connected

117
00:06:10,520 --> 00:06:11,990
I'm not sure this is thinking of

118
00:06:11,990 --> 00:06:25,560
terribly ye

119
00:06:25,570 --> 00:06:35,210
alright so a few of them a kind of

120
00:06:35,210 --> 00:06:37,730
synced up so you can do those stuff like

121
00:06:37,730 --> 00:06:48,470
bringing more samples no it's gonna pick

122
00:06:48,470 --> 00:06:50,090
that up okay so it turns out it sounds

123
00:06:50,090 --> 00:06:54,500
terrible but nevermind I'm thanks

124
00:06:54,500 --> 00:07:03,500
everybody for helping out of that this

125
00:07:03,500 --> 00:07:04,460
is what happens when you don't have

126
00:07:04,460 --> 00:07:05,840
hundreds of machines at home to test

127
00:07:05,840 --> 00:07:12,620
with anyway ok sound off so yeah aside

128
00:07:12,620 --> 00:07:15,290
from it being at an incredible failure I

129
00:07:15,290 --> 00:07:16,760
have learned a few things while building

130
00:07:16,760 --> 00:07:19,730
this so the first of which is how do you

131
00:07:19,730 --> 00:07:22,550
generate sound in a browser this is

132
00:07:22,550 --> 00:07:24,320
stuff that spinning Firefox for a while

133
00:07:24,320 --> 00:07:26,690
it's just coming in to WebKit and chrome

134
00:07:26,690 --> 00:07:29,270
and you can program out programmatically

135
00:07:29,270 --> 00:07:31,940
generate sound so how do we do that well

136
00:07:31,940 --> 00:07:34,370
sound is just waves right and it's

137
00:07:34,370 --> 00:07:35,900
represented in the exact same way

138
00:07:35,900 --> 00:07:37,700
digitally you just have to produce big

139
00:07:37,700 --> 00:07:39,110
strings of numbers and write them to

140
00:07:39,110 --> 00:07:41,030
something so this is a really basic

141
00:07:41,030 --> 00:07:43,300
sound wave this would produce just a

142
00:07:43,300 --> 00:07:49,450
constant

143
00:07:49,460 --> 00:07:54,020
yeah all right Kyle so this produces a

144
00:07:54,020 --> 00:07:56,479
constant pitch constant volume just pure

145
00:07:56,479 --> 00:08:01,099
a single note with no effects no no

146
00:08:01,099 --> 00:08:03,340
change in volume no nothing and

147
00:08:03,340 --> 00:08:05,449
synthesizers work by taking these waves

148
00:08:05,449 --> 00:08:08,360
and modifying them and you just with

149
00:08:08,360 --> 00:08:09,680
some really basic modifications you can

150
00:08:09,680 --> 00:08:11,479
make some really interesting sounds so

151
00:08:11,479 --> 00:08:15,289
one thing you can do is use a low

152
00:08:15,289 --> 00:08:17,660
frequency wave to change the volume this

153
00:08:17,660 --> 00:08:19,130
is called amplitude modulation and it

154
00:08:19,130 --> 00:08:21,160
makes the volume oscillate up and down

155
00:08:21,160 --> 00:08:24,259
if you want to replicate kind of more

156
00:08:24,259 --> 00:08:27,199
realistic organic instruments so the way

157
00:08:27,199 --> 00:08:29,750
the luck if you hit a piano key or you

158
00:08:29,750 --> 00:08:31,550
strum a guitar the note will trail off

159
00:08:31,550 --> 00:08:34,010
over time so we modeled that is that you

160
00:08:34,010 --> 00:08:36,950
play what's called adsr envelope so the

161
00:08:36,950 --> 00:08:39,979
sound where you have a tack time which

162
00:08:39,979 --> 00:08:41,539
is how long it takes to ramp up to full

163
00:08:41,539 --> 00:08:43,909
volume if it decay time which is how

164
00:08:43,909 --> 00:08:46,130
long it takes to trail off to their

165
00:08:46,130 --> 00:08:48,020
sustain level and the sustained level

166
00:08:48,020 --> 00:08:49,610
says how loud it is while you're holding

167
00:08:49,610 --> 00:08:51,170
the key down and then there's a decay

168
00:08:51,170 --> 00:08:53,300
time that says how long it takes to

169
00:08:53,300 --> 00:08:56,089
trail off to silence and just using that

170
00:08:56,089 --> 00:08:58,750
you can do some quite interesting things

171
00:08:58,750 --> 00:09:01,940
so how now we know how to model sound

172
00:09:01,940 --> 00:09:04,420
how do we make browsers spit stuff out

173
00:09:04,420 --> 00:09:08,300
so Firefox has this audio object which

174
00:09:08,300 --> 00:09:10,160
you make a new one of those and you say

175
00:09:10,160 --> 00:09:13,810
I want two channels left and right and a

176
00:09:13,810 --> 00:09:18,140
40 44 kilohertz sample rate which is a

177
00:09:18,140 --> 00:09:20,329
standard sample rate used in digital

178
00:09:20,329 --> 00:09:21,860
audio which means that you have to

179
00:09:21,860 --> 00:09:24,970
generate 44,000 data points per second

180
00:09:24,970 --> 00:09:26,810
for the sound waves that you're

181
00:09:26,810 --> 00:09:29,240
generating and then you just make us

182
00:09:29,240 --> 00:09:31,010
that interval loop there like every 10

183
00:09:31,010 --> 00:09:33,350
milliseconds say it takes the current

184
00:09:33,350 --> 00:09:36,740
time and you get your sound generation

185
00:09:36,740 --> 00:09:38,360
stuff to give you a time slice which is

186
00:09:38,360 --> 00:09:41,149
just a big array of floats which is just

187
00:09:41,149 --> 00:09:44,240
a little you know slice of the wave

188
00:09:44,240 --> 00:09:45,620
function for that interval of time and

189
00:09:45,620 --> 00:09:48,589
then use the mosrite audio function and

190
00:09:48,589 --> 00:09:52,540
that actually writes it to the speakers

191
00:09:52,540 --> 00:09:56,839
so within your your your models for

192
00:09:56,839 --> 00:09:58,279
generating sound this is basically what

193
00:09:58,279 --> 00:10:00,170
what sine waves is doing is it models

194
00:10:00,170 --> 00:10:01,500
things using

195
00:10:01,500 --> 00:10:03,660
subjects and you cannot unload for a

196
00:10:03,660 --> 00:10:04,980
time slice and what that's going to do

197
00:10:04,980 --> 00:10:06,810
is it's going to take the current time

198
00:10:06,810 --> 00:10:08,850
and the interval you want to generate

199
00:10:08,850 --> 00:10:10,650
and the sample rate figure out how many

200
00:10:10,650 --> 00:10:12,120
samples you need and then just build up

201
00:10:12,120 --> 00:10:15,810
an array and by just going over every

202
00:10:15,810 --> 00:10:17,610
little time point in that interval and

203
00:10:17,610 --> 00:10:18,960
calculating the value of the way for

204
00:10:18,960 --> 00:10:20,670
that point that's a big array and just

205
00:10:20,670 --> 00:10:23,250
returned it and then to figure out the

206
00:10:23,250 --> 00:10:24,870
value of a note at any particular time

207
00:10:24,870 --> 00:10:27,270
there's a bunch of mass that I'm not

208
00:10:27,270 --> 00:10:29,760
going to dwell too much on and also I

209
00:10:29,760 --> 00:10:31,950
feel like after and judgment talk I

210
00:10:31,950 --> 00:10:33,060
should reduce the size of this

211
00:10:33,060 --> 00:10:35,880
tremendously there's a bunch of math

212
00:10:35,880 --> 00:10:37,050
just to calculate what the values the

213
00:10:37,050 --> 00:10:40,740
wave is at that time but we have a

214
00:10:40,740 --> 00:10:44,840
problem right and imagine that you

215
00:10:44,840 --> 00:10:47,880
assigned a sequential ID to every little

216
00:10:47,880 --> 00:10:48,930
bit of data that you're right to an

217
00:10:48,930 --> 00:10:52,560
audio stream what you want is a just

218
00:10:52,560 --> 00:10:56,220
continuous uninterruptedly IDs going

219
00:10:56,220 --> 00:10:58,890
through with no no sections repeated no

220
00:10:58,890 --> 00:11:01,740
bits skipped but as we know JavaScript

221
00:11:01,740 --> 00:11:03,330
timers are tremendously accurate if you

222
00:11:03,330 --> 00:11:04,890
can you can say that you want to loop to

223
00:11:04,890 --> 00:11:06,390
fire every 10 milliseconds but it will

224
00:11:06,390 --> 00:11:08,520
never actually do exactly that right

225
00:11:08,520 --> 00:11:09,630
sometimes there'll be a bit late

226
00:11:09,630 --> 00:11:12,570
sometimes a bit be a bit early and the

227
00:11:12,570 --> 00:11:15,650
code that we had her head here that's

228
00:11:15,650 --> 00:11:17,970
just getting the current time to figure

229
00:11:17,970 --> 00:11:19,500
out what the kind of starting index of

230
00:11:19,500 --> 00:11:22,410
your your slices so what that's going to

231
00:11:22,410 --> 00:11:24,420
do in practice is it like we might write

232
00:11:24,420 --> 00:11:26,190
a couple of loops have just you know

233
00:11:26,190 --> 00:11:27,990
uninterruptedly the first one we do

234
00:11:27,990 --> 00:11:29,970
naught to nine and then we do 10 to 19

235
00:11:29,970 --> 00:11:31,530
and that's fine but then the third

236
00:11:31,530 --> 00:11:33,660
iteration starts a bit early so we

237
00:11:33,660 --> 00:11:36,300
repeat a bit of the last one and what

238
00:11:36,300 --> 00:11:37,730
that ends up doing to the sound is this

239
00:11:37,730 --> 00:11:40,260
which sounds really really horrible if

240
00:11:40,260 --> 00:11:42,180
you and if you implement your sound like

241
00:11:42,180 --> 00:11:44,370
that you'll get kind of an overlay of

242
00:11:44,370 --> 00:11:46,140
white noise on top of on top of the

243
00:11:46,140 --> 00:11:48,390
sound so what you did to fix that is you

244
00:11:48,390 --> 00:11:51,600
just maintain your encounter right each

245
00:11:51,600 --> 00:11:53,130
iteration of your loop you increment the

246
00:11:53,130 --> 00:11:55,200
counter of how the big your interval is

247
00:11:55,200 --> 00:11:57,990
it needs that at the current time but

248
00:11:57,990 --> 00:11:58,980
then you've got another problem right

249
00:11:58,980 --> 00:12:00,089
because you basically introduced your

250
00:12:00,089 --> 00:12:01,640
own idea of what time is which is

251
00:12:01,640 --> 00:12:03,810
potentially going to differ and drift

252
00:12:03,810 --> 00:12:06,030
from real time as you go on so that

253
00:12:06,030 --> 00:12:07,950
means that anything you timestamp in a

254
00:12:07,950 --> 00:12:10,140
synthesizer like when user input happens

255
00:12:10,140 --> 00:12:11,760
what the duration of a note

256
00:12:11,760 --> 00:12:14,580
is what frequency is all that stuff you

257
00:12:14,580 --> 00:12:16,500
have to base it on your counter not on

258
00:12:16,500 --> 00:12:18,180
the built-in date object because they

259
00:12:18,180 --> 00:12:20,610
will differ and you know the the

260
00:12:20,610 --> 00:12:22,470
playback loops won't quite join up

261
00:12:22,470 --> 00:12:26,940
probably so that we can model sound we

262
00:12:26,940 --> 00:12:29,010
need a way of doing user input and it

263
00:12:29,010 --> 00:12:31,110
turns out this if you are if you've

264
00:12:31,110 --> 00:12:32,490
already got away that you're modeling

265
00:12:32,490 --> 00:12:34,200
sound waves this is pretty easy right

266
00:12:34,200 --> 00:12:35,600
you just figure out a way of mapping

267
00:12:35,600 --> 00:12:38,310
keyboard input two frequencies which you

268
00:12:38,310 --> 00:12:40,380
can pick whatever you like for sine

269
00:12:40,380 --> 00:12:43,020
waves I'm just saying like like pick a

270
00:12:43,020 --> 00:12:46,110
key like a major and just take all the

271
00:12:46,110 --> 00:12:47,160
notes in that key and just match them

272
00:12:47,160 --> 00:12:49,700
sequentially onto the onto the keyboard

273
00:12:49,700 --> 00:12:51,990
so when a key is struck you go what

274
00:12:51,990 --> 00:12:54,420
what's the frequency of that key you may

275
00:12:54,420 --> 00:12:57,030
can you know with that frequency and you

276
00:12:57,030 --> 00:12:58,560
time stamp it with the current time so

277
00:12:58,560 --> 00:13:00,750
every note has one of those envelopes

278
00:13:00,750 --> 00:13:03,150
that showed a second ago that decides

279
00:13:03,150 --> 00:13:05,880
how its volume varies over time how it

280
00:13:05,880 --> 00:13:08,250
picks up our trails off and so you need

281
00:13:08,250 --> 00:13:09,960
to you need to tell it when it was

282
00:13:09,960 --> 00:13:11,760
pressed and when the key was lifted so

283
00:13:11,760 --> 00:13:13,560
that it knows what that envelope looks

284
00:13:13,560 --> 00:13:17,040
like and when you pick a key up all you

285
00:13:17,040 --> 00:13:20,010
do is you look up the note that that key

286
00:13:20,010 --> 00:13:22,620
code last generated and time stamp it

287
00:13:22,620 --> 00:13:24,780
with a key up time and then it the

288
00:13:24,780 --> 00:13:27,990
volume RL off a recording works in much

289
00:13:27,990 --> 00:13:30,840
the same way so instead of storing all

290
00:13:30,840 --> 00:13:33,780
the audio data that we generate which is

291
00:13:33,780 --> 00:13:35,670
huge volumes of numbers which would be

292
00:13:35,670 --> 00:13:38,490
expensive to transmit in store all you

293
00:13:38,490 --> 00:13:39,960
do is you record the user input because

294
00:13:39,960 --> 00:13:41,490
you can completely reconstruct the sound

295
00:13:41,490 --> 00:13:44,370
from the user input so in this case

296
00:13:44,370 --> 00:13:46,080
instead of making you notes all you do

297
00:13:46,080 --> 00:13:48,030
is you just like record some events

298
00:13:48,030 --> 00:13:50,700
right you say at this time this key was

299
00:13:50,700 --> 00:13:52,800
pressed with this frequency on this

300
00:13:52,800 --> 00:13:55,950
channel and the same for Kia and what

301
00:13:55,950 --> 00:13:59,070
that gets you is just some information

302
00:13:59,070 --> 00:14:00,600
that says how long the recording was

303
00:14:00,600 --> 00:14:03,510
which means how you know if it lasts

304
00:14:03,510 --> 00:14:05,220
eight seconds that means you like every

305
00:14:05,220 --> 00:14:07,920
eight seconds you restart the lip and a

306
00:14:07,920 --> 00:14:09,120
list of events that says like which

307
00:14:09,120 --> 00:14:10,590
which keys were pressed at what times

308
00:14:10,590 --> 00:14:13,530
and what frequencies those map T so then

309
00:14:13,530 --> 00:14:15,030
for playback all you have to do is like

310
00:14:15,030 --> 00:14:16,620
in your timer loop every time you hit a

311
00:14:16,620 --> 00:14:18,210
multiple of the recording generate

312
00:14:18,210 --> 00:14:20,490
duration you just schedule a bunch of

313
00:14:20,490 --> 00:14:22,209
these events 22

314
00:14:22,209 --> 00:14:25,920
play the notes in the right sequence so

315
00:14:25,920 --> 00:14:28,179
now we can play stuff on our own

316
00:14:28,179 --> 00:14:29,740
machines but how do we get that to other

317
00:14:29,740 --> 00:14:33,040
people right so the setup that I'm using

318
00:14:33,040 --> 00:14:36,149
is I'm running node on the server with

319
00:14:36,149 --> 00:14:39,759
express for handling web requests so

320
00:14:39,759 --> 00:14:43,179
that deals with the you know saving and

321
00:14:43,179 --> 00:14:44,350
retrieving the Jason for these

322
00:14:44,350 --> 00:14:46,389
performances it deals with serving you

323
00:14:46,389 --> 00:14:49,059
the pages that you can see and i'm using

324
00:14:49,059 --> 00:14:50,709
faithful pub/sub and that's all backed

325
00:14:50,709 --> 00:14:55,329
up with a reduced database and you have

326
00:14:55,329 --> 00:14:57,910
a really simple JSON representation for

327
00:14:57,910 --> 00:14:59,499
performances so performance is just an

328
00:14:59,499 --> 00:15:02,410
array of channels each channel has a ton

329
00:15:02,410 --> 00:15:03,819
of settings all those little sliders

330
00:15:03,819 --> 00:15:05,129
that you could see those all represent

331
00:15:05,129 --> 00:15:07,119
parameters that can change how the sound

332
00:15:07,119 --> 00:15:09,339
works so a channel is just an object

333
00:15:09,339 --> 00:15:11,139
that has all those settings in it and it

334
00:15:11,139 --> 00:15:13,869
optionally will have what the settings

335
00:15:13,869 --> 00:15:15,459
touching the keyboard are and whether

336
00:15:15,459 --> 00:15:16,929
there's a recording on that channel so

337
00:15:16,929 --> 00:15:19,569
you can live it so all the browser is

338
00:15:19,569 --> 00:15:21,459
doing is it's taking that sending it to

339
00:15:21,459 --> 00:15:24,999
server service rubs it in Reader's so if

340
00:15:24,999 --> 00:15:27,339
if all your domain objects have a to

341
00:15:27,339 --> 00:15:28,869
Jason method you can just really easily

342
00:15:28,869 --> 00:15:33,069
use xhr to save and retrieve these

343
00:15:33,069 --> 00:15:35,290
things and you can use phaser pub/sub

344
00:15:35,290 --> 00:15:38,019
channels to to get updates so every time

345
00:15:38,019 --> 00:15:40,209
that you change a little setting that

346
00:15:40,209 --> 00:15:41,470
saved it to the server and then the

347
00:15:41,470 --> 00:15:42,819
stove is going to use Faye to push it

348
00:15:42,819 --> 00:15:45,959
and to all the people who are listening

349
00:15:45,959 --> 00:15:50,319
so this brings me to the kind of main

350
00:15:50,319 --> 00:15:52,029
thing that I learned which you've

351
00:15:52,029 --> 00:15:55,990
already seen a demonstration of timed

352
00:15:55,990 --> 00:16:04,749
kind of hard to get right yeah it's just

353
00:16:04,749 --> 00:16:06,639
nasty right as you can see like sinking

354
00:16:06,639 --> 00:16:08,559
clocks is just hard that didn't work

355
00:16:08,559 --> 00:16:12,759
very well it works I've seen it work

356
00:16:12,759 --> 00:16:15,429
okay on smaller scales as smaller groups

357
00:16:15,429 --> 00:16:17,470
and I have no to get some quite good

358
00:16:17,470 --> 00:16:19,089
numbers out of my clocks but it doesn't

359
00:16:19,089 --> 00:16:23,889
always translate into good music and if

360
00:16:23,889 --> 00:16:25,149
you've always over the top for me so

361
00:16:25,149 --> 00:16:26,949
invoke Stephen Hawking for this this is

362
00:16:26,949 --> 00:16:28,749
a problem that cutting-edge science has

363
00:16:28,749 --> 00:16:30,819
right now there are people disputing the

364
00:16:30,819 --> 00:16:32,980
fuss than light neutrinos because they

365
00:16:32,980 --> 00:16:33,260
think

366
00:16:33,260 --> 00:16:35,740
the guy's got their clocks thanks wrong

367
00:16:35,740 --> 00:16:37,850
so how are we going to sing the clots

368
00:16:37,850 --> 00:16:39,590
well it turns out there's an established

369
00:16:39,590 --> 00:16:40,970
way of doing this in UNIX it's called

370
00:16:40,970 --> 00:16:44,120
ntp the network Time Protocol and that

371
00:16:44,120 --> 00:16:47,180
uses timestamps that have a 2 to the

372
00:16:47,180 --> 00:16:51,620
minus 32 second resolution which I don't

373
00:16:51,620 --> 00:16:54,380
know how useful that is in practice it

374
00:16:54,380 --> 00:16:56,030
turns out that's 10 orders of magnitude

375
00:16:56,030 --> 00:16:59,510
smaller than the the lifetime of the top

376
00:16:59,510 --> 00:17:01,250
quark which is so unstable that it

377
00:17:01,250 --> 00:17:02,420
wasn't observed until nineteen

378
00:17:02,420 --> 00:17:04,850
ninety-five in a custom-built particle

379
00:17:04,850 --> 00:17:07,070
accelerator so I don't know how useful

380
00:17:07,070 --> 00:17:09,410
that is but it's a lot more useful than

381
00:17:09,410 --> 00:17:11,060
what we have in JavaScript land which is

382
00:17:11,060 --> 00:17:14,860
just milliseconds which are I mean even

383
00:17:14,860 --> 00:17:17,030
even that you know the millisecond

384
00:17:17,030 --> 00:17:18,440
counts that you get are just you know

385
00:17:18,440 --> 00:17:20,150
inaccurate you see this with timers and

386
00:17:20,150 --> 00:17:22,459
you can't he doesn't even go down two

387
00:17:22,459 --> 00:17:26,089
microseconds or anything but it turns

388
00:17:26,089 --> 00:17:27,980
out like for some cases that's that's

389
00:17:27,980 --> 00:17:31,910
good enough right the the kind of the

390
00:17:31,910 --> 00:17:34,040
lesson that I took from from Zurich is

391
00:17:34,040 --> 00:17:36,200
that stuff doesn't have to be perfect it

392
00:17:36,200 --> 00:17:38,240
just has to be interesting and whether

393
00:17:38,240 --> 00:17:41,300
it is interesting is a function of you

394
00:17:41,300 --> 00:17:42,920
know you can't go to outside the Ranger

395
00:17:42,920 --> 00:17:44,300
it just sounds like noise but it also

396
00:17:44,300 --> 00:17:47,300
doesn't have to be perfect so we can use

397
00:17:47,300 --> 00:17:50,300
this and this is basically what ntp does

398
00:17:50,300 --> 00:17:52,820
and you have a client and the client

399
00:17:52,820 --> 00:17:54,740
goes i want to sing my my clock with a

400
00:17:54,740 --> 00:17:57,590
with an upstream server so what it does

401
00:17:57,590 --> 00:17:59,600
is it creates a message and it puts a

402
00:17:59,600 --> 00:18:01,190
timestamp teaser on that message that's

403
00:18:01,190 --> 00:18:03,230
when the client sent them at the the

404
00:18:03,230 --> 00:18:05,180
message to the server and when the

405
00:18:05,180 --> 00:18:06,860
server receives it puts his own time

406
00:18:06,860 --> 00:18:09,830
stamp on at t1 to say i got i got this

407
00:18:09,830 --> 00:18:11,690
message at this time that's going to be

408
00:18:11,690 --> 00:18:13,430
in a different time frame to what the

409
00:18:13,430 --> 00:18:14,840
clients using because their clocks are

410
00:18:14,840 --> 00:18:17,330
synchronized yet and then the server's

411
00:18:17,330 --> 00:18:18,290
going to hang onto it for a certain

412
00:18:18,290 --> 00:18:19,970
amount of time there's processing there

413
00:18:19,970 --> 00:18:21,950
needs to be done that it's not sent back

414
00:18:21,950 --> 00:18:24,320
immediately so puts another time stamp

415
00:18:24,320 --> 00:18:25,640
on it to say when it's sent it back to

416
00:18:25,640 --> 00:18:28,010
the client and that's t2 and then when

417
00:18:28,010 --> 00:18:29,330
the client eventually receives the

418
00:18:29,330 --> 00:18:31,340
message back it puts a final time stamp

419
00:18:31,340 --> 00:18:34,220
on it t three now if you didn't have a

420
00:18:34,220 --> 00:18:38,750
network latency to take care about the

421
00:18:38,750 --> 00:18:40,490
difference between the two clocks would

422
00:18:40,490 --> 00:18:42,890
just be t1 minus t0 right the client

423
00:18:42,890 --> 00:18:44,350
says the server I think it's this time

424
00:18:44,350 --> 00:18:45,910
the server goes is actually this time

425
00:18:45,910 --> 00:18:48,309
and you just send that straight back but

426
00:18:48,309 --> 00:18:49,600
we have networks and they have latency

427
00:18:49,600 --> 00:18:52,690
and that can be you know hundreds of

428
00:18:52,690 --> 00:18:55,030
milliseconds seconds depending on you

429
00:18:55,030 --> 00:18:59,200
know where these these things are so how

430
00:18:59,200 --> 00:19:00,610
we actually calculate the offset is that

431
00:19:00,610 --> 00:19:01,960
we know the total elapsed time on the

432
00:19:01,960 --> 00:19:04,840
client side that's t3 minus t0 and we

433
00:19:04,840 --> 00:19:06,160
know how much time the server took

434
00:19:06,160 --> 00:19:08,169
holding on to the message at t2 minus t1

435
00:19:08,169 --> 00:19:11,470
and assuming those clocks run at about

436
00:19:11,470 --> 00:19:14,230
the same rate over a short time span you

437
00:19:14,230 --> 00:19:16,000
can just subtract those two to get the

438
00:19:16,000 --> 00:19:18,429
the network round-trip time so you

439
00:19:18,429 --> 00:19:20,409
calculate that you have it and you take

440
00:19:20,409 --> 00:19:23,650
it and you subtract it from the

441
00:19:23,650 --> 00:19:26,020
difference between t1 minus 20 and that

442
00:19:26,020 --> 00:19:29,500
tells the client and what the what the

443
00:19:29,500 --> 00:19:33,460
difference between the clock says so we

444
00:19:33,460 --> 00:19:34,990
can use phase pub/sub channels to this

445
00:19:34,990 --> 00:19:36,309
right we can get browsers to send

446
00:19:36,309 --> 00:19:39,220
messages to each other so the client

447
00:19:39,220 --> 00:19:40,900
could publish a message to the time

448
00:19:40,900 --> 00:19:44,230
channel with its t0 whatever it thinks

449
00:19:44,230 --> 00:19:46,059
the current time is and then the server

450
00:19:46,059 --> 00:19:49,090
could can listen on that channel and

451
00:19:49,090 --> 00:19:50,710
process it which we'll see in a second

452
00:19:50,710 --> 00:19:52,750
and the client will also have to

453
00:19:52,750 --> 00:19:55,059
subscribe to a channel where it can pick

454
00:19:55,059 --> 00:19:57,010
up the responses from the server so

455
00:19:57,010 --> 00:19:59,289
clicks a unique ID and it listens on a

456
00:19:59,289 --> 00:20:01,299
channel that contains that unique ID so

457
00:20:01,299 --> 00:20:02,440
when it gets a message back from the

458
00:20:02,440 --> 00:20:04,419
server it can look at the timestamps on

459
00:20:04,419 --> 00:20:06,340
that message and do the kind of ntp

460
00:20:06,340 --> 00:20:08,260
algorithm stuff to figure out what how

461
00:20:08,260 --> 00:20:10,710
much it should adjust its own clock by

462
00:20:10,710 --> 00:20:12,760
so on the server side the server's

463
00:20:12,760 --> 00:20:14,169
subscribe to the time channel so it's

464
00:20:14,169 --> 00:20:15,370
going to receive those messages that

465
00:20:15,370 --> 00:20:17,830
clients publishing and and it's just

466
00:20:17,830 --> 00:20:19,030
going to go okay well I'm going to

467
00:20:19,030 --> 00:20:21,100
return you the t0 that you gave me and

468
00:20:21,100 --> 00:20:23,799
I'm going to attach my own t1 and t2 of

469
00:20:23,799 --> 00:20:28,090
whatever those are so it's pretty simple

470
00:20:28,090 --> 00:20:32,620
but it basically relies on on on your

471
00:20:32,620 --> 00:20:35,890
network being reasonably responsive if

472
00:20:35,890 --> 00:20:38,110
you have highlighted see if you have

473
00:20:38,110 --> 00:20:40,990
noisy latency if you have asymmetric up

474
00:20:40,990 --> 00:20:42,520
and download speeds between these two

475
00:20:42,520 --> 00:20:45,130
people that throws the algorithm off

476
00:20:45,130 --> 00:20:46,539
right it just gets stuff wrong as soon

477
00:20:46,539 --> 00:20:48,970
as you have noise when it tries to

478
00:20:48,970 --> 00:20:50,320
figure out what the round-trip time is

479
00:20:50,320 --> 00:20:51,820
it's going to take half of the total

480
00:20:51,820 --> 00:20:54,669
time and if there's a symmetric up and

481
00:20:54,669 --> 00:20:55,059
download

482
00:20:55,059 --> 00:20:56,620
these that's not gonna be a right thing

483
00:20:56,620 --> 00:20:59,679
and the greater latency that you have in

484
00:20:59,679 --> 00:21:01,659
your network the higher that margin of

485
00:21:01,659 --> 00:21:03,549
error gets and you just get out of sync

486
00:21:03,549 --> 00:21:06,490
by 100 milliseconds seconds in some

487
00:21:06,490 --> 00:21:11,049
cases so we're kind of thinking that we

488
00:21:11,049 --> 00:21:12,309
have a model like this right web

489
00:21:12,309 --> 00:21:13,840
browsers can send messages to each other

490
00:21:13,840 --> 00:21:15,100
and they're kind of communicating

491
00:21:15,100 --> 00:21:17,559
directly but that isn't really what's

492
00:21:17,559 --> 00:21:19,509
happening they actually going virus

493
00:21:19,509 --> 00:21:21,100
server right when you use any pub/sub

494
00:21:21,100 --> 00:21:22,929
service the browser standing message to

495
00:21:22,929 --> 00:21:23,950
a server and the show is going to

496
00:21:23,950 --> 00:21:27,669
forward it on somewhere else so that's

497
00:21:27,669 --> 00:21:29,619
already kind of you know latency that we

498
00:21:29,619 --> 00:21:30,879
haven't thought of giving our mental

499
00:21:30,879 --> 00:21:32,769
model of how this works but it's even

500
00:21:32,769 --> 00:21:34,119
worse than that because these machines

501
00:21:34,119 --> 00:21:35,350
are probably going to be on a Wi-Fi

502
00:21:35,350 --> 00:21:37,450
network depending on what your Wi-Fi

503
00:21:37,450 --> 00:21:40,119
hardware is like that can introduce huge

504
00:21:40,119 --> 00:21:41,259
amounts of noise to your network

505
00:21:41,259 --> 00:21:43,080
connection I tried this out at home

506
00:21:43,080 --> 00:21:46,059
using Wi-Fi and putting an ethernet

507
00:21:46,059 --> 00:21:48,730
cable to my router and the amount of

508
00:21:48,730 --> 00:21:51,539
latency the Wi-Fi introduces is horrible

509
00:21:51,539 --> 00:21:54,190
so that's more noise and every one of

510
00:21:54,190 --> 00:21:58,119
these lengths introduces introduces more

511
00:21:58,119 --> 00:22:01,480
latency it introduces variability and

512
00:22:01,480 --> 00:22:02,860
that all adds up in a really horrible

513
00:22:02,860 --> 00:22:05,049
way so to make this thing kind of

514
00:22:05,049 --> 00:22:09,549
unusable so we can t have a system like

515
00:22:09,549 --> 00:22:11,799
this where we have one master which is

516
00:22:11,799 --> 00:22:13,600
the browser being used by the performer

517
00:22:13,600 --> 00:22:18,220
and we have a bunch of listeners so all

518
00:22:18,220 --> 00:22:20,139
you guys in the audience the guys at the

519
00:22:20,139 --> 00:22:21,970
bottom and my machine is machine at the

520
00:22:21,970 --> 00:22:24,159
top and you you're all asking me for the

521
00:22:24,159 --> 00:22:25,600
current time so you can sync your clocks

522
00:22:25,600 --> 00:22:29,080
what if instead we use the model like

523
00:22:29,080 --> 00:22:30,909
this right we've run a clock on the

524
00:22:30,909 --> 00:22:32,860
server the server can sync with the

525
00:22:32,860 --> 00:22:35,499
master and then all the clients will

526
00:22:35,499 --> 00:22:37,240
sync with that clock on the server so

527
00:22:37,240 --> 00:22:39,879
that kind of made a it removes some work

528
00:22:39,879 --> 00:22:42,429
from from the master machine because

529
00:22:42,429 --> 00:22:43,600
it's not having to deal with all these

530
00:22:43,600 --> 00:22:47,080
incoming messages which is helpful

531
00:22:47,080 --> 00:22:49,360
because any extra work that the

532
00:22:49,360 --> 00:22:50,350
browser's trying to do while it's

533
00:22:50,350 --> 00:22:53,110
generating audio is just interference

534
00:22:53,110 --> 00:22:54,820
right if you update the UI if there's

535
00:22:54,820 --> 00:22:58,059
expensive computations going on and it

536
00:22:58,059 --> 00:23:00,999
gives it less less bandwidth to deal

537
00:23:00,999 --> 00:23:02,659
with making audio

538
00:23:02,659 --> 00:23:04,909
it makes the sound choppy and that's why

539
00:23:04,909 --> 00:23:07,099
in that interface for example there

540
00:23:07,099 --> 00:23:10,159
isn't like I want to have am like a

541
00:23:10,159 --> 00:23:11,869
progress bar that would track how faster

542
00:23:11,869 --> 00:23:13,820
if through a recording air like if I

543
00:23:13,820 --> 00:23:16,009
record on one channel and then I want to

544
00:23:16,009 --> 00:23:17,269
record something over the top of it I

545
00:23:17,269 --> 00:23:18,590
want to make sure I'm in time so I want

546
00:23:18,590 --> 00:23:20,269
to see how far along we are just adding

547
00:23:20,269 --> 00:23:22,099
that made it completely unusable all

548
00:23:22,099 --> 00:23:24,769
those little updates of the Dom made the

549
00:23:24,769 --> 00:23:27,109
sound really choppy and this hottie is

550
00:23:27,109 --> 00:23:29,840
and so if you introduce this the browser

551
00:23:29,840 --> 00:23:32,649
does less work and it also means that

552
00:23:32,649 --> 00:23:37,609
the the there's less there's less

553
00:23:37,609 --> 00:23:39,289
network distance basically between the

554
00:23:39,289 --> 00:23:40,369
clients and the thing they're trying to

555
00:23:40,369 --> 00:23:41,960
sync with and the important thing in

556
00:23:41,960 --> 00:23:43,820
this kind of situation is not that

557
00:23:43,820 --> 00:23:45,169
you're all synced up with the performer

558
00:23:45,169 --> 00:23:46,759
but you're synched up with each other

559
00:23:46,759 --> 00:23:48,979
because that's what is producing the

560
00:23:48,979 --> 00:23:51,979
sound and it turns out if you go to this

561
00:23:51,979 --> 00:23:53,359
model depending on your network I've

562
00:23:53,359 --> 00:23:56,720
seen tenfold improvements in in Sinking

563
00:23:56,720 --> 00:23:59,450
like I've got and like hundreds of

564
00:23:59,450 --> 00:24:01,369
clocks on my machine synced within a

565
00:24:01,369 --> 00:24:03,289
millisecond using a pub sub server on

566
00:24:03,289 --> 00:24:06,619
the other side of the planet but it

567
00:24:06,619 --> 00:24:08,509
turns out that this can also introduce

568
00:24:08,509 --> 00:24:10,580
instabilities right you can get jumps

569
00:24:10,580 --> 00:24:12,320
when the server if the server gets

570
00:24:12,320 --> 00:24:14,869
behind the performers computer it can

571
00:24:14,869 --> 00:24:16,700
kind of jump forward it can jump back

572
00:24:16,700 --> 00:24:19,039
and it turns out that this particular

573
00:24:19,039 --> 00:24:21,169
model is just really bad for producing

574
00:24:21,169 --> 00:24:24,109
music you get like even if the numbers

575
00:24:24,109 --> 00:24:25,340
look really good out of your clocks the

576
00:24:25,340 --> 00:24:26,899
sound that comes out of your speakers is

577
00:24:26,899 --> 00:24:33,229
just noise so that about wraps it up

578
00:24:33,229 --> 00:24:36,200
you've got a synthesizer or beer one

579
00:24:36,200 --> 00:24:38,119
that didn't work terribly well its top

580
00:24:38,119 --> 00:24:39,889
to bottom JavaScript client-side and

581
00:24:39,889 --> 00:24:41,690
server-side and to sort of find a level

582
00:24:41,690 --> 00:24:43,820
of easter egg this funky little logo

583
00:24:43,820 --> 00:24:46,549
that I made for it is also JavaScript

584
00:24:46,549 --> 00:24:48,200
it's just written using the canvas

585
00:24:48,200 --> 00:24:51,139
element and a bit of math so thank you

586
00:24:51,139 --> 00:25:00,960
all for listening

587
00:25:00,970 --> 00:25:07,340
can have questions hey everybody's just

588
00:25:07,340 --> 00:25:20,400
baffled okay

589
00:25:20,410 --> 00:25:22,310
first of all I didn't think it was a

590
00:25:22,310 --> 00:25:23,840
failure i thought i was totally cool the

591
00:25:23,840 --> 00:25:26,480
demo yes yes here was really good you

592
00:25:26,480 --> 00:25:27,950
should whatever he is going on are you

593
00:25:27,950 --> 00:25:29,810
hearing a mix i was hearing pockets of

594
00:25:29,810 --> 00:25:32,420
of good and then pockets of just oh god

595
00:25:32,420 --> 00:25:34,250
I really no I thought I was cool it was

596
00:25:34,250 --> 00:25:35,960
cool at all so cool when two people

597
00:25:35,960 --> 00:25:37,310
playing different things like that would

598
00:25:37,310 --> 00:25:39,590
change how would you do bud vet sorry

599
00:25:39,590 --> 00:25:42,230
how do you do bug that um how would you

600
00:25:42,230 --> 00:25:44,450
mean if you if it's not you what it was

601
00:25:44,450 --> 00:25:46,130
like I've been trying to figure this out

602
00:25:46,130 --> 00:25:48,020
like whether it's possible for a client

603
00:25:48,020 --> 00:25:49,250
to tell that it's doing a bad job

604
00:25:49,250 --> 00:25:51,410
because all it has to go on is whether

605
00:25:51,410 --> 00:25:53,210
it's clogged to some type properly right

606
00:25:53,210 --> 00:25:55,130
you could do some stuff like detect that

607
00:25:55,130 --> 00:25:56,630
you hadn't received any messages for a

608
00:25:56,630 --> 00:25:59,060
while and maybe tell her to shut up if

609
00:25:59,060 --> 00:26:02,270
that hadn't happened but it's it's it's

610
00:26:02,270 --> 00:26:04,940
kind of tricky to get clients to shut up

611
00:26:04,940 --> 00:26:06,850
if they're not behaving properly and

612
00:26:06,850 --> 00:26:14,890
yeah I did welcome

