1
00:00:01,640 --> 00:00:19,439
> Jake Archibald: Can you all hear me? Right,
so, I'm not getting a whole lot of anything

2
00:00:19,439 --> 00:00:20,439
on the screen. (Hey ... oh, no ... here we
go. And I think we are good to go. Right.

3
00:00:20,439 --> 00:00:22,289
We go on the screen, brilliant, hello, we've
come a long way haven't we in the past 20

4
00:00:22,289 --> 00:00:27,630
years since the '90s, I mean, back then you
would have some friends over, it'd be going

5
00:00:27,630 --> 00:00:32,660
great, then two of your friends would start
having a disagreement involving the release

6
00:00:32,660 --> 00:00:37,989
gait of ghost busters, but then it starts
to get heated, none of them are backing down,

7
00:00:37,989 --> 00:00:44,280
the mood of the dinner party is at stake,
but it's okay, for you hold aloft the answer,

8
00:00:44,280 --> 00:00:51,420
for you are the proud owner of Microsoft Cinemania.
Giving you instant access to the history of

9
00:00:51,420 --> 00:00:57,600
cinema. Well, it's not really instant, first
you must go to the room with the computer

10
00:00:57,600 --> 00:01:05,190
in and turn it on, and then the fan starts
whirring, you get that friendly static crackle

11
00:01:05,190 --> 00:01:13,670
as the CRT monitor whirs into action, windows
3.1 slowly boots up. Then you get your desktop,

12
00:01:13,670 --> 00:01:23,000
eventually. And it does this (Horn sound)
and that really sets expectations we are dealing

13
00:01:23,000 --> 00:01:28,110
with an operating system that thinks that
booting successfully is a fanfare worthy moment

14
00:01:28,110 --> 00:01:40,770
(Applause) and by the power of multimedia
C ROM you veal that ghost busters was release

15
00:01:40,770 --> 00:01:49,490
in the 1984, you did that in under ten minutes,
the dinner party is saved. The web changed

16
00:01:49,490 --> 00:01:57,200
everything, with the web you get information
instantly, no installation, they looked out

17
00:01:57,200 --> 00:02:01,909
of date the CDs almost instantly, having separate
apps for these things became weird, the stuff

18
00:02:01,909 --> 00:02:07,110
ton internet was better, built with new interconnected
with the modern world in run, the browser

19
00:02:07,110 --> 00:02:13,980
Runtime replaced more my native App, office
tooling, code editors, native apps became

20
00:02:13,980 --> 00:02:19,030
the exception, if you look at the top ten
selling laptops on Amazon they include chrome

21
00:02:19,030 --> 00:02:25,879
books that's how secondary native apps are,
though that's not true on mobile. The native

22
00:02:25,879 --> 00:02:29,470
apps still rule, because they build to the
strength of the platform and a lot of the

23
00:02:29,470 --> 00:02:35,510
web predates that, some of the web is hostile
to mobile. This is a creative agency that

24
00:02:35,510 --> 00:02:39,230
I won't name; this is what you get if you
visit their site.

25
00:02:39,230 --> 00:02:44,320
> Choosing your creative agency isn't like
buying a pair of shoes, so why group make

26
00:02:44,320 --> 00:02:54,080
yourself Coffee and visit our site on real
screen. They're kind over right, I never had

27
00:02:54,080 --> 00:03:05,750
a shoe tell me to Fuck off and come back when
I have real feet. You can see the things they're

28
00:03:05,750 --> 00:03:13,050
expert in, which includes, responsive sites,
of course (Laughing) the more worrying case

29
00:03:13,050 --> 00:03:18,840
the sites are simply hostile to just the mobile
web, not just the mobile platform, this is

30
00:03:18,840 --> 00:03:23,659
a horrible situation, the user has gone to
these sites in a browser following a deep

31
00:03:23,659 --> 00:03:28,050
link rather than sending them the thing they
want, we send them to another thing where

32
00:03:28,050 --> 00:03:33,500
they can download a thing to install a thing
that can run that Macon train the thing they

33
00:03:33,500 --> 00:03:38,290
originally wanted somewhere in in the interface.
It's not a good United Nations experience,

34
00:03:38,290 --> 00:03:45,150
it's one developers think is good to get you
after the web to the native app. Think about

35
00:03:45,150 --> 00:03:50,890
the native apps you use and rely on, this
that is where the web is failing what caused

36
00:03:50,890 --> 00:03:54,690
that failure, what features do they have that
can make it impossible to replicate on the

37
00:03:54,690 --> 00:04:02,840
web. I use these apps often, or they can't
be done on the web because of push notification,

38
00:04:02,840 --> 00:04:07,319
that is vital for the apps in yellow, they
tell me someone sent me something, or something

39
00:04:07,319 --> 00:04:12,740
happens in the background when the App isn't
open,I rarely use trip it, I forget I have

40
00:04:12,740 --> 00:04:18,791
it. Then it'll send me a notification that
a flight is delayed or canceled. Background

41
00:04:18,791 --> 00:04:24,980
Sync, from downloading pod cast to sending
an e‑mail late their failed to send at the

42
00:04:24,980 --> 00:04:30,950
time, which sends to off line, I depend on
this for more apps that I realize for playing

43
00:04:30,950 --> 00:04:34,920
music, checking where my hotel is, looking
up a meeting location, I continue want to

44
00:04:34,920 --> 00:04:45,540
depend on connectivity for these things, we
need better performance and integration to

45
00:04:45,540 --> 00:04:50,640
the O several, battery staps, accounting information,
the web can't do these, and that's a bug,

46
00:04:50,640 --> 00:04:55,550
what gives me hope is that these are bugs
that are getting fixed not just being thought

47
00:04:55,550 --> 00:04:59,820
about, code is landing to fix these things,
and these are the ones I want to talk about

48
00:04:59,820 --> 00:05:04,201
today these require something new, background
Sync, that happen in the background, push

49
00:05:04,201 --> 00:05:09,040
notification are received and dealt with in
the background. Off line, doesn't run in the

50
00:05:09,040 --> 00:05:14,650
background but requires context to run before
pages, and that thing is the service worker.

51
00:05:14,650 --> 00:05:21,600
And this is the Spec. That bit got a round
applause at GoogleIO (Applause) don't patronize,

52
00:05:21,600 --> 00:05:30,600
me, I could of dressed it up a bit. I like
what graphic cards into in this present, they're

53
00:05:30,600 --> 00:05:35,410
just circuit boards, but they need to sort
of dress themselves up to make them look like

54
00:05:35,410 --> 00:05:39,720
the must have for people. Even though they
don't do anything on their own. The boxes

55
00:05:39,720 --> 00:05:44,240
they come in are amazing in this kind of sub
deviant arts craft, you get the usual sort

56
00:05:44,240 --> 00:05:49,660
of sexist nonsense you get with gaming, you
always get things like the hideous off string

57
00:05:49,660 --> 00:06:00,020
of Sh reck and Yoda and also teenage mutant
Ninja dog. So in this vain, I present to you

58
00:06:00,020 --> 00:06:12,840
the service worker! (Applause) that's Memrod
using his evil pow tore control browser feature.

59
00:06:12,840 --> 00:06:19,900
We need a logo, stop me. This is something
being worked on between Google Mozilla Sam

60
00:06:19,900 --> 00:06:27,870
sung. It has no Dom access, unlike a shared
worker it can exist without a reference to

61
00:06:27,870 --> 00:06:34,120
it and shuts down when not in used this is
the gabbinge background context we need. It's

62
00:06:34,120 --> 00:06:41,310
in Bruce tore day, you'll need COMCanary,
you'll need go about about flags and enable

63
00:06:41,310 --> 00:06:47,620
experimental browser feature and restart.
If chrome isn't your thing you can use fire

64
00:06:47,620 --> 00:06:54,980
fox nightly, go to about Config and enable
service worker and give the Bruce ear restart.

65
00:06:54,980 --> 00:07:00,720
I'm going to stick with canary, Google played
for my flight and hoe it will, it would be

66
00:07:00,720 --> 00:07:07,900
rude not to. And the debugging tool is forever
ahead. If you want to know what support or

67
00:07:07,900 --> 00:07:15,041
sub features, it's service worker ready and
tells you which browser support what. It's

68
00:07:15,041 --> 00:07:20,370
the foundation for the others, off line suffers
from the same misconceptions as progressive

69
00:07:20,370 --> 00:07:26,780
enhancement, I think, people say my App doesn't
need to work off line because my users have

70
00:07:26,780 --> 00:07:30,720
permanent internet connectivity, but it's
not just about zero connectivity, it's about

71
00:07:30,720 --> 00:07:37,630
treating the network as an enhancement, when
user clicks a link to your site, the URL start

72
00:07:37,630 --> 00:07:42,610
a navigation, a document is created, but we
have to go to network to get the data for

73
00:07:42,610 --> 00:07:49,151
that, that can take a long time, it will come
back eventually, we can't rend E. we have

74
00:07:49,151 --> 00:07:55,490
to send request for the Java, the images,
as these come back we can start to render,

75
00:07:55,490 --> 00:08:01,710
but the sub resource trigger other sub resources,
fonts, images used in the CSS, when they come

76
00:08:01,710 --> 00:08:07,360
back we get towards our find render. As a
practical example I'll take train ‑‑ it's

77
00:08:07,360 --> 00:08:17,370
a responsive site, I was on a train when I
started building it I had a moment of zero

78
00:08:17,370 --> 00:08:23,810
inspiration. But let's load it on a phone
that's 250‑kilo births fifteen‑year‑old

79
00:08:23,810 --> 00:08:29,470
me would have kill you for a 256 kill birth
con next, not the best today but far from

80
00:08:29,470 --> 00:08:36,970
the worst. So, three, two, one, go. We get
the first render, that wasn't JavaScript dependent

81
00:08:36,970 --> 00:08:40,770
.
we get content after 5 seconds that's from

82
00:08:40,770 --> 00:08:49,320
Flickr, those images are 200 K each, that's
what it gave me if I wanted to coverer this

83
00:08:49,320 --> 00:08:56,080
density. First image through, after thirty‑seconds,
other images start loading, after what seems

84
00:08:56,080 --> 00:09:03,310
like years, we get the full render. Now, that
video wasn't real‑time, I had to cut it

85
00:09:03,310 --> 00:09:08,640
down, it took so long, those are the correct
figures, we can compress the images better,

86
00:09:08,640 --> 00:09:14,320
we can do things to insure the top images
load first,I just took what Flickr gave me.

87
00:09:14,320 --> 00:09:21,680
We are still beating native, the equivalent
is the visit the App store, download, it's

88
00:09:21,680 --> 00:09:27,960
a slow user experience, but native kicks our
ass on the second visit it used that initial

89
00:09:27,960 --> 00:09:32,920
download and install cash loads of stuff,
we have the browser cash, but the whole internet

90
00:09:32,920 --> 00:09:38,720
is fighting for that, if we change one line
in CSS or java script, we change the file

91
00:09:38,720 --> 00:09:44,221
name, we break the cash,we like to deploy
often, we're breaking the cash office. This

92
00:09:44,221 --> 00:09:50,100
page register for a service worker allowing
us to do something about the second load.

93
00:09:50,100 --> 00:09:56,990
Registration estruation is simple, miter JavaScript
like, this you can also scope it to an area

94
00:09:56,990 --> 00:10:01,570
of your origin, and that's use informal you
have single origin with many apps, like Google

95
00:10:01,570 --> 00:10:07,950
does with calendar and stuff like that. The
default scope is the whole origin, which we'll

96
00:10:07,950 --> 00:10:12,080
use here, it returns a promise so you can
find out if it works or not. You can register

97
00:10:12,080 --> 00:10:18,930
for a service worker on 750 DPS, the service
worker is so power it would p a disaster it

98
00:10:18,930 --> 00:10:26,750
fall boss a man in the middle is a good place
to butt demo stuff and local host is exempt

99
00:10:26,750 --> 00:10:35,930
for development. Console log, listen for install
events, service worker for the first time,

100
00:10:35,930 --> 00:10:39,680
so let's see that in action. First, I'm going
to go to service worker internal, which is

101
00:10:39,680 --> 00:10:44,140
where our debugging stuff is living at the
moment, as you can see there's nothing there.

102
00:10:44,140 --> 00:10:50,150
Then I'll open the train site, a dead version
of it . As you can see on the bottom corner

103
00:10:50,150 --> 00:10:55,510
there, our service worker is successfully
registered F we go to service worker internals

104
00:10:55,510 --> 00:11:02,430
there, it is, there's our console log, we
can launch Dev tools, we can also set break

105
00:11:02,430 --> 00:11:09,160
points run stuff on the console, etc… If
we fast forward time a bit, the service worker

106
00:11:09,160 --> 00:11:14,330
terminates, that's not a bug, it's just not
needed at the moment, closes to conserve memory.

107
00:11:14,330 --> 00:11:20,290
And congratulations, at that point, you're
now wielding the power of the service worker,

108
00:11:20,290 --> 00:11:27,540
but what did that actually get us? Nothing.
(Laughing) but, wait, oh, my God, it's actually

109
00:11:27,540 --> 00:11:34,460
a good thing that it does nothing. The unapologetically
made it good. Compare it to App cash, if you

110
00:11:34,460 --> 00:11:41,810
give manifest, and that manifest only contains
the words cash manifest,I would expect to

111
00:11:41,810 --> 00:11:48,570
go from this to this said no one ever in the
world. So, we didn't want to do that, service

112
00:11:48,570 --> 00:11:52,740
worker doesn't do anything unless you tell
it to do something, App Cache broke a lot

113
00:11:52,740 --> 00:12:01,510
of eggs and failed to make a omelet, has the
right ingredients, routing fetching cashing,

114
00:12:01,510 --> 00:12:09,910
updates and version control,blouse first reverse
the piles of implicit behavior, which are,

115
00:12:09,910 --> 00:12:15,690
of course, guarded by the army of robot wasps.
If you've used that Cache before you'll know

116
00:12:15,690 --> 00:12:23,990
what I mean. We sort it out, without getting
stung. This is the extensible web. Don't ask

117
00:12:23,990 --> 00:12:30,350
don't take fish, ask for a fisher rod, but
take the fish as well. We need both high and

118
00:12:30,350 --> 00:12:40,430
low level AIs, the service worker is event
driven we've seen install, it's also fetch,

119
00:12:40,430 --> 00:12:46,100
this fires for any navigation for your scope,
but also for any sub resource from that page.

120
00:12:46,100 --> 00:12:51,750
In service worker internals, we're going to
start off the service worker, inspect it,

121
00:12:51,750 --> 00:12:58,500
navigate to our train site, you see as soon
as we navigate we hit the break point many

122
00:12:58,500 --> 00:13:07,750
if net fetch, we get one for the CSS, we skip
from there, we'll get the logo, the JavaScript,

123
00:13:07,750 --> 00:13:15,070
we rendered before JavaScript because we care
about performance, get API call to Flikr.

124
00:13:15,070 --> 00:13:22,800
And then get all the image requests coming
in. But, hey, the cool bit is, this is ‑‑ this

125
00:13:22,800 --> 00:13:27,590
is an event, like other vents like clique,
touch start, key down, you can present the

126
00:13:27,590 --> 00:13:32,710
default and do something else Y. can respond
with something else. Responses can be created

127
00:13:32,710 --> 00:13:42,400
manually, give it some texts, and if do we,
that the page gives us this to this. But the

128
00:13:42,400 --> 00:13:48,740
swears interesting thing here S. we delivered
that without going to the network at all,

129
00:13:48,740 --> 00:13:55,140
making it the first off line demo of the talk
only almost halfway through, but we can do

130
00:13:55,140 --> 00:13:59,510
better than that. When the browser discover
the service worker for first time, we'll send

131
00:13:59,510 --> 00:14:05,380
it to the network, get it to make load of
requests and get responses it might with fast

132
00:14:05,380 --> 00:14:10,180
it might be slow,the network is not predictable,
we're not disrupting the user they already

133
00:14:10,180 --> 00:14:16,839
have the page open. If our response comes
back we'll put them in the Cache, this pre‑Cache

134
00:14:16,839 --> 00:14:23,020
method is what native would do with an initial
install back age, we do it in the background

135
00:14:23,020 --> 00:14:31,420
without disrupting the user, the loot page
template, JavaScript, all the stat tick stuff,

136
00:14:31,420 --> 00:14:37,260
when we get a request for one of those things,
we'll just get it from the Cache, the uncertainty

137
00:14:37,260 --> 00:14:43,490
of the network is no learn our problem, this
is simple thanks to the cashing API, full

138
00:14:43,490 --> 00:14:51,170
control of the Cache in the install event
from earlier, we get this vent ‑‑ and

139
00:14:51,170 --> 00:14:55,570
we can pass a promise into there that extends
the installation process, use to indicate

140
00:14:55,570 --> 00:15:03,510
success and failure as well. Here we're going
to create a Cache, give a name, and then add

141
00:15:03,510 --> 00:15:09,950
stuff to it, our static has sets, if any of
these fail, the whole operation fails. And,

142
00:15:09,950 --> 00:15:13,520
service worker won't control pages, so if
the install succeeds we know we have these

143
00:15:13,520 --> 00:15:18,200
thing in the Cach oh, there are deopinion
Dennis, it's not thee canary yet, there's

144
00:15:18,200 --> 00:15:27,420
a poly fill, the proper implementation in
a few weeks. How do we use these Cache items,

145
00:15:27,420 --> 00:15:35,170
responds with Cac hade.match, it will find
a response that matches that request, it's

146
00:15:35,170 --> 00:15:41,029
done by method, URL, similar to the browser
Cach e if there's no match you'll get no back,

147
00:15:41,029 --> 00:15:47,790
if we get no, we can send something else,
what should we do instead, we could send a

148
00:15:47,790 --> 00:15:54,440
fall back entry, what if we want to try the
network, to do this we need the make a request

149
00:15:54,440 --> 00:16:01,279
using JavaScript. In 1999, Microsoft engineers
were design ago new excitingAPI, what should

150
00:16:01,279 --> 00:16:07,121
they call it, it contained abbreviations,
initialisms, they shouldn't decide if it should

151
00:16:07,121 --> 00:16:17,920
be all caps or just the first letter like
getElement by ‑‑ so they did both XMLHttpReques

152
00:16:17,920 --> 00:16:27,800
the ‑‑ restricted to HTTP but it isn't,
and request, you get a request object back,

153
00:16:27,800 --> 00:16:35,780
yet you don't. We tried to modernize it is
a bit, fetching some JSON, is verboten, we've

154
00:16:35,780 --> 00:16:39,910
been patching this API for fifteen years,
I do not want to use this AI when it's old

155
00:16:39,910 --> 00:16:48,580
enough to drink. Thankfully, the fetch back
by Mozilla, it gives lower level control,

156
00:16:48,580 --> 00:16:56,970
weave already seen some of it. Lower APSI
usually easier to use than higher level one,

157
00:16:56,970 --> 00:17:04,350
HHR is so bad, it's not true here, the equivalent
to this in Fetch Fetch URL gives you a promise,

158
00:17:04,350 --> 00:17:10,850
pass it how you want, gives you a promise,
done. This is a forward thinking API, arrow

159
00:17:10,850 --> 00:17:17,260
functions make it easier, Async functions
can make it a one liner if you want. To answer

160
00:17:17,260 --> 00:17:24,300
the question, how do we send this request
to network, fetch. So what improvements does

161
00:17:24,300 --> 00:17:31,420
this give us, 3, 2, 1, go. We reverend almost
instantly, we get content after a couple of

162
00:17:31,420 --> 00:17:35,920
seconds, we still go to the network, but our
JavaScript rivered so much quicker, we're

163
00:17:35,920 --> 00:17:43,410
able to start it so much sooner, still a sad
sorry ‑‑ let's fix that. When there's

164
00:17:43,410 --> 00:17:50,970
a request for a Flickr, if we have it in the
cash it will return from the cash over wise

165
00:17:50,970 --> 00:18:00,059
we go to the network, when when we get response
back, we'll send to the cash and the page,

166
00:18:00,059 --> 00:18:07,140
this is also good for Avatars, things you
want to Cache as you go along, we're going

167
00:18:07,140 --> 00:18:17,790
to special case URLs that end in static Flickr.com,
take the request, try to take frit the darks

168
00:18:17,790 --> 00:18:23,360
fetch it from the network, add it to our Cache,
send it to the browser, need be careful, we're

169
00:18:23,360 --> 00:18:29,310
adding to the cash for every image request,
we'll need the garden at some point. For now,

170
00:18:29,310 --> 00:18:35,460
how does that improve things, 3, 2, 3e 1,
go. We render quickly, content comes through

171
00:18:35,460 --> 00:18:39,890
quickly, this time we have images, all of
the images weave seen already, but not this

172
00:18:39,890 --> 00:18:46,150
one at the top that's new, that comes through
in 11 seconds, and that's pretty good, but

173
00:18:46,150 --> 00:18:51,900
we're still dependent on network for the initial
API call that tells us which images to display,

174
00:18:51,900 --> 00:19:00,559
let's fix that. So this one's a little bit
different, the page does a fetch for the API,

175
00:19:00,559 --> 00:19:07,060
via the service worker,as everything does,
it also goes straight to the Cache, because

176
00:19:07,060 --> 00:19:13,550
pages can access the Cache too, it'll render
with it, that will trigger the requests for

177
00:19:13,550 --> 00:19:20,240
the old images that is also in the cash the
service worker goes to the network, gets data

178
00:19:20,240 --> 00:19:24,741
back, we do what we do with the images, wend
it both to the cash and the page, this is

179
00:19:24,741 --> 00:19:32,020
a good point to clean up the Cache, with this
pattern it makes two requests, once from the

180
00:19:32,020 --> 00:19:36,120
we shall question, once from the network,
we get to render quickly with all content

181
00:19:36,120 --> 00:19:40,960
but provide up to date content when we find
it, the best native apps find it, very few,

182
00:19:40,960 --> 00:19:48,260
but the best ones do. Here's where we're at
now, we also want to special case K PI.Flickr.com.

183
00:19:48,260 --> 00:19:55,200
In that case we'll do, this I'm not going
to go through this line by line, this is fetching

184
00:19:55,200 --> 00:19:59,880
data, returning it to the browser, this start
of Gnarly bit in the middle, pausing data

185
00:19:59,880 --> 00:20:06,910
from Flickr, and removing ones from the cash
that we don't need anymore this is a little

186
00:20:06,910 --> 00:20:13,730
bit Gnarly with promises ES 78 functions make
it neater, that's the service worker ‑‑ this

187
00:20:13,730 --> 00:20:20,840
makes two request requests so one over on
the page side,www.to the Cache, one to network.

188
00:20:20,840 --> 00:20:25,661
Afterf the respond come in after the Cac he,
we'll update, we'll know an error if they

189
00:20:25,661 --> 00:20:35,840
both fail provide data. If the Cache but network
fails, we fail silently. That was probably

190
00:20:35,840 --> 00:20:46,030
too much code to show on slides. But my point
is we're expressing complex behavior using

191
00:20:46,030 --> 00:20:52,541
small amounts of code, and the effect of that,
let's remind ourself where we started, first

192
00:20:52,541 --> 00:20:58,030
visit, takes quite a long time to get the
first render, just over a second, then content

193
00:20:58,030 --> 00:21:04,470
comes in after over five seconds and then
we're waiting forever for the images. Of with

194
00:21:04,470 --> 00:21:09,700
service worker and the code we've written
to manager the network and Caching, 3, 2,

195
00:21:09,700 --> 00:21:14,809
1, go,we have what looks like a complete view
rendered quickly, new data comes in after

196
00:21:14,809 --> 00:21:21,310
a few seconds, doesn't disrupt the user, we
get the image, we shaved a second off our

197
00:21:21,310 --> 00:21:26,980
first render, over 30 seconds for what looks
like a complete view. You can get content

198
00:21:26,980 --> 00:21:31,429
on the screen in a fraction of a second whether
you have a fast, slow or no connection, it

199
00:21:31,429 --> 00:21:45,360
doesn't matter this catches up to native.
First up, push, something I depend on for

200
00:21:45,360 --> 00:21:52,260
many apps before we look at code, going to
give a live demo a go, which is (Laughing)

201
00:21:52,260 --> 00:22:21,270
see how this goes. Remi, could you help me
with this? So ... Remy, you're going to send

202
00:22:21,270 --> 00:22:25,570
a chat in there, but not until we have something
on the screen.

203
00:22:25,570 --> 00:22:40,019
> Huh… I got it by the way…
> Fine ‑‑

204
00:22:40,019 --> 00:22:51,380
> It's pretty good.
> You’re enjoying your morning so far, was

205
00:22:51,380 --> 00:22:52,570
breakfast good?
> Yes

206
00:22:52,570 --> 00:22:58,100
> I didn't breakfast, I was afraid I might
throw it up. (Laughing)

207
00:22:58,100 --> 00:23:05,880
> Oh, there we go. This is a simple chat App,
this is running in an internal build of Chromium,

208
00:23:05,880 --> 00:23:12,940
but based on actual speck work. If you could
type in any message in there.

209
00:23:12,940 --> 00:23:17,940
> Oh, that's nice, thank you whoever tweeted
that, oh, that's lovely, no one tweet anything

210
00:23:17,940 --> 00:23:26,880
rude right now.
> How's the WiFi holding up? I guess it's

211
00:23:26,880 --> 00:23:37,310
‑‑
> Let's refresh that. Go again.Ed oh, that's

212
00:23:37,310 --> 00:23:40,940
a disaster, isn't it I'll refresh this one
as well.

213
00:23:40,940 --> 00:23:45,029
> Go again, if not, we'll just babe don it
‑‑

214
00:23:45,029 --> 00:23:48,059
> You say don't swear,
> Yes, but it's great because it's not going

215
00:23:48,059 --> 00:23:55,549
to display, so ... well, agreement tweets,
which is a good sign. Oh, this worked like

216
00:23:55,549 --> 00:24:02,010
five minutes ago. No, we might just have to
aBonn don it. I'm going to drop on to roaming

217
00:24:02,010 --> 00:24:07,550
and see if that helps.
> Restart Chrome

218
00:24:07,550 --> 00:24:13,730
oh, that's a good idea. That normally fixing
everything. We're using fire fox here to send

219
00:24:13,730 --> 00:24:18,960
the messages, so I can always blame them.
Give it one more go, if not, we'll just bane

220
00:24:18,960 --> 00:24:30,090
don it. Yes,thank you Remy! (Applause) no,
stay. That's ‑‑ we've seen that happen

221
00:24:30,090 --> 00:24:36,850
before, this is nothing new, what I'm going
to do now is I'm going to close Chromium completely,

222
00:24:36,850 --> 00:24:45,309
int browsers not open at all. No recent apps
on. So ... many Remy would you care to send

223
00:24:45,309 --> 00:24:53,179
another message. Now, what we're getting here,
this is a push notification using open web

224
00:24:53,179 --> 00:24:59,080
features, and completely native notification,
the browser was closed started up the service

225
00:24:59,080 --> 00:25:03,290
worker in the background and we got a push
notification, because we're using native notification,

226
00:25:03,290 --> 00:25:15,410
it appeared on multifamily watch as well just
using the open web. (Applause) Remy's birth

227
00:25:15,410 --> 00:25:34,429
day as well! Can we switch over to the laptop,
is that possible (Happy birthday, to you ‑‑ happy

228
00:25:34,429 --> 00:25:52,070
birthday to you. Happy birthday, happy birth
dear Remy, happy birthday to you! (Applause)

229
00:25:52,070 --> 00:25:58,120
> Brilliant. So ... right, I'm hideously running
over now, the way we coded that, it's just

230
00:25:58,120 --> 00:26:02,330
a standard, from your page, you register for
push messaging, we'll give you the details

231
00:26:02,330 --> 00:26:07,720
like the ID and end point where to send messages,
but when that actually, when that's called

232
00:26:07,720 --> 00:26:12,040
you gel get an vent in the service worker,
you'll get to do what you want at this point,

233
00:26:12,040 --> 00:26:17,940
look at data, update cache, show notification,
once again, you get to did what you want,

234
00:26:17,940 --> 00:26:23,240
in that case you can navigate to that page,
refocus an existing tab. Background sink is

235
00:26:23,240 --> 00:26:30,570
similar, you don't need a service operator
for that, sometime late your fire an vent

236
00:26:30,570 --> 00:26:35,450
in the service worker to do something for
me that I was unable to do earlier. These

237
00:26:35,450 --> 00:26:39,720
things require use permission, of course,
they'll be told of this.

238
00:26:39,720 --> 00:26:42,980
> You have ten minutes.
> I have ten minutes, oh,I'm going to tell

239
00:26:42,980 --> 00:26:53,830
you about how to code push and Sythisc, then
(Laughing) okay, how did that demo work, Jack?

240
00:26:53,830 --> 00:26:59,100
Well, I'll tell you. From the page you call
navigator.serviceWorker.ready that gives you

241
00:26:59,100 --> 00:27:07,370
the registration ‑‑ navigator.serviceWorker
‑‑ on our registration we call push.register,

242
00:27:07,370 --> 00:27:11,090
that gives you the details and you post those
to the service, you'll associate that with

243
00:27:11,090 --> 00:27:16,340
the current use their will give you the end
point information where you'll send the information.

244
00:27:16,340 --> 00:27:23,370
For home, GSM, Google Cloud messaging, every
browser can use their own, you'll need an

245
00:27:23,370 --> 00:27:28,309
account set up with the different push messaging
providers the data you'll send to these things

246
00:27:28,309 --> 00:27:31,900
will be exactly the same, you'll just have
to know which way you're sending it, which

247
00:27:31,900 --> 00:27:40,350
will be a URL, when the user receives a message,
you get a push event and you have a look to

248
00:27:40,350 --> 00:27:47,360
see what kind of data, I'm going to react
to that, I'm going to do ‑‑ after this

249
00:27:47,360 --> 00:27:53,500
I'll show a notification. Something, this
is something that native, even the really

250
00:27:53,500 --> 00:27:59,850
best native apps, they get it wrong, often
I'll get a tweet, I won't notice it when it

251
00:27:59,850 --> 00:28:04,370
around arrive, on the under ground I'll see
the notification, I'll click et, I'll get

252
00:28:04,370 --> 00:28:13,151
nothing because they haven't cached that data
off line. You get an vent when you get a click

253
00:28:13,151 --> 00:28:19,309
notification and you do what you want, usually
navigating to the page, give a we to enumerate

254
00:28:19,309 --> 00:28:24,530
the client, which there pages within your
scope, look at theme them, see if they're

255
00:28:24,530 --> 00:28:31,220
focused, hidden, hang on, there's already
a window that has focus, so I don't need to

256
00:28:31,220 --> 00:28:35,660
show a notification or I don't need to navigate
anywhere,I can determine that stuff ahead

257
00:28:35,660 --> 00:28:40,970
of time. What about background Sync, lets
you wake up the service worker at some vague

258
00:28:40,970 --> 00:28:46,570
point in the future to do whatever you want
this is a bit similar to push, it's a lot

259
00:28:46,570 --> 00:28:50,880
simpler, if you try to send an e‑mail but
the user has no connection, the user is down

260
00:28:50,880 --> 00:28:58,290
it fails, you can saver it somewhere, IDB
or another cache AI, then register for a Sync

261
00:28:58,290 --> 00:29:06,030
event, that triggers a permission dialogue,
then, sometimes later when the user has good

262
00:29:06,030 --> 00:29:14,280
connectivity, you get a Sync vent, if the
ID empty in‑box, get the out box and try

263
00:29:14,280 --> 00:29:18,950
to send all the e‑mails, in this pattern,
it works similar to installer event, if you

264
00:29:18,950 --> 00:29:26,900
pass the event ‑‑ it will reschedule.
If we fail to send the e‑mail it will be

265
00:29:26,900 --> 00:29:36,370
scheduled for later this is registering for
a single Sync event, you ask for ones on an

266
00:29:36,370 --> 00:29:42,260
interval as well, use updating train did that
that that the background, the ‑‑ is a

267
00:29:42,260 --> 00:29:53,419
minimum, when things happen determined heuristically,
if you register for a Sync once day and we

268
00:29:53,419 --> 00:29:59,270
know the user looks allot your App like about
9:00 in the morning, we can schedule the Sync

269
00:29:59,270 --> 00:30:08,280
for 10‑9, and coalescing it with other sink
events. With service worker we gain a lot

270
00:30:08,280 --> 00:30:14,030
of the features that make native superior,
butane the bits that keep the web super your,

271
00:30:14,030 --> 00:30:19,840
the instant on, no install required, open
platform. Chrome is going to start chipping

272
00:30:19,840 --> 00:30:25,990
this stuff this year, it's already if canary,
it'll go to stable this year, fire fox actively

273
00:30:25,990 --> 00:30:30,320
developing, Microsoft is investigating it,
we haven't heard anything from apple, but

274
00:30:30,320 --> 00:30:36,830
that's not unusual at this stage, it's designed
to be an enhancement, I mean no browser is

275
00:30:36,830 --> 00:30:38,169
going to have it on the first visit

276
00:30:38,169 --> 00:30:43,350
> Have to prepare, use basic object detection
you can give the benefit to the browsers that

277
00:30:43,350 --> 00:30:53,010
support it, which is a lot of users in chrome's
case. It doesn't turn push messages into ‑‑ it

278
00:30:53,010 --> 00:30:58,049
gives you nothing for free, but it treats
you like an adult, gifts you the moving parts

279
00:30:58,049 --> 00:31:04,059
and do what you want, make things faster,
work off line, create new features trance

280
00:31:04,059 --> 00:31:13,130
code a video former using streams, turn build
a client side Wik I, do it in a way this'

281
00:31:13,130 --> 00:31:20,179
unique your App, the way that gives the best
user experience. I am heavily biased. I think

282
00:31:20,179 --> 00:31:27,380
this changes what the web is capable. Let's
build some cool stuff with it. Thank you very

