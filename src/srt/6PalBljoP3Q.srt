1
00:00:32,320 --> 00:00:35,840

hello I'm Nick I'm from Shopify like

2
00:00:35,840 --> 00:00:38,210
Brendan said and I'm here to talk about

3
00:00:38,210 --> 00:00:40,690
yet another JavaScript micro framework

4
00:00:40,690 --> 00:00:43,070
there are people a lot smarter than me

5
00:00:43,070 --> 00:00:45,020
and I'll probably manage to pitts a good

6
00:00:45,020 --> 00:00:48,350
number of them off today but my bullshit

7
00:00:48,350 --> 00:00:49,850
title at Shopify means that I get to

8
00:00:49,850 --> 00:00:51,290
play with JavaScript frameworks all day

9
00:00:51,290 --> 00:00:56,360
long and it's awesome so let's talk

10
00:00:56,360 --> 00:01:00,470
about frameworks we want to build great

11
00:01:00,470 --> 00:01:04,040
web apps that that can mean web apps or

12
00:01:04,040 --> 00:01:06,740
embedded apps or no taps or anything

13
00:01:06,740 --> 00:01:09,229
else that people like all of you are

14
00:01:09,229 --> 00:01:13,399
going to build but talking specifically

15
00:01:13,399 --> 00:01:15,680
about web apps it's important to to

16
00:01:15,680 --> 00:01:17,539
decide what kind of web apps we want to

17
00:01:17,539 --> 00:01:19,970
build so this is an old cappuccino slide

18
00:01:19,970 --> 00:01:22,520
that I really like it's about the

19
00:01:22,520 --> 00:01:24,320
spectrum of different kinds of web apps

20
00:01:24,320 --> 00:01:25,789
on the left you've got really simple

21
00:01:25,789 --> 00:01:28,640
just text document based pages and all

22
00:01:28,640 --> 00:01:31,250
the way to the right you have desktop

23
00:01:31,250 --> 00:01:33,020
style applications like cappuccino

24
00:01:33,020 --> 00:01:37,909
builds like 280 slides so frameworks

25
00:01:37,909 --> 00:01:41,210
like backbone are aiming more towards

26
00:01:41,210 --> 00:01:43,189
kind of to the right somewhere between

27
00:01:43,189 --> 00:01:45,080
something like Facebook and something

28
00:01:45,080 --> 00:01:47,270
like 20 G slides where you have a fair

29
00:01:47,270 --> 00:01:48,770
amount of interaction but not

30
00:01:48,770 --> 00:01:50,869
necessarily the fully stated model that

31
00:01:50,869 --> 00:01:52,729
you would have with a full desktop

32
00:01:52,729 --> 00:01:57,259
application the problem is is that

33
00:01:57,259 --> 00:01:59,360
building these kinds of apps is still

34
00:01:59,360 --> 00:02:01,400
really hard there are a lot of moving

35
00:02:01,400 --> 00:02:03,829
parts involved and complexity explodes

36
00:02:03,829 --> 00:02:05,180
for anything but the simplest of

37
00:02:05,180 --> 00:02:08,119
applications so at Shopify we have a

38
00:02:08,119 --> 00:02:10,519
really big app to implement like

39
00:02:10,519 --> 00:02:12,709
seriously this thing is huge hundreds of

40
00:02:12,709 --> 00:02:18,470
endpoints and models and routes and Ajax

41
00:02:18,470 --> 00:02:20,930
requests I mean things pretty crazy and

42
00:02:20,930 --> 00:02:23,230
so the complexity involved is

43
00:02:23,230 --> 00:02:28,100
mind-blowing what we wanted to make it

44
00:02:28,100 --> 00:02:30,769
work so my job is to sit there like a

45
00:02:30,769 --> 00:02:32,209
monkey had a typewriter and figure out

46
00:02:32,209 --> 00:02:35,900
how we can make that happen but the

47
00:02:35,900 --> 00:02:37,519
thing you need to understand is that I

48
00:02:37,519 --> 00:02:39,500
am the only JavaScript developer at a

49
00:02:39,500 --> 00:02:44,060
company full of Ruby developers that's

50
00:02:44,060 --> 00:02:45,830
that's the important thing to understand

51
00:02:45,830 --> 00:02:47,600
for this story so I started implementing

52
00:02:47,600 --> 00:02:50,660
shop fight as a nap in backbone and

53
00:02:50,660 --> 00:02:53,750
backbones pretty awesome yeah so I was

54
00:02:53,750 --> 00:02:55,580
able to get a few tasks working really

55
00:02:55,580 --> 00:02:58,160
quickly I was I was impressed I showed

56
00:02:58,160 --> 00:03:00,170
it to everyone else they understood the

57
00:03:00,170 --> 00:03:02,840
code they also were impressed but

58
00:03:02,840 --> 00:03:04,580
something didn't seem to compute for

59
00:03:04,580 --> 00:03:07,730
them even more importantly was designers

60
00:03:07,730 --> 00:03:09,020
we have a team of really talented

61
00:03:09,020 --> 00:03:11,540
designers but showing them this giant

62
00:03:11,540 --> 00:03:13,940
javascript file where they basically

63
00:03:13,940 --> 00:03:16,700
render their views in JavaScript code

64
00:03:16,700 --> 00:03:19,700
not going to happen you show a designer

65
00:03:19,700 --> 00:03:21,290
a bunch of JavaScript code they will

66
00:03:21,290 --> 00:03:26,990
punch you in the face so we wanted

67
00:03:26,990 --> 00:03:29,990
something that doesn't make designers

68
00:03:29,990 --> 00:03:31,160
write a bunch of code that lets them

69
00:03:31,160 --> 00:03:32,510
work in the tools that they're familiar

70
00:03:32,510 --> 00:03:37,190
with I played with everything all of

71
00:03:37,190 --> 00:03:39,800
these frameworks are great I love them

72
00:03:39,800 --> 00:03:43,160
all please keep building really awesome

73
00:03:43,160 --> 00:03:46,190
stuff but none of it works specifically

74
00:03:46,190 --> 00:03:50,570
for what we wanted to build so it was

75
00:03:50,570 --> 00:03:55,970
either we we came to this impasse we

76
00:03:55,970 --> 00:03:57,290
could either invest in one of these

77
00:03:57,290 --> 00:03:58,940
technologies that wouldn't do exactly

78
00:03:58,940 --> 00:04:00,980
what we wanted or just give up on

79
00:04:00,980 --> 00:04:03,769
everything but I realized that there

80
00:04:03,769 --> 00:04:05,959
were just a few specific goals that we

81
00:04:05,959 --> 00:04:09,110
needed to achieve in order to that we

82
00:04:09,110 --> 00:04:11,630
really wanted to solve first of all

83
00:04:11,630 --> 00:04:14,810
everything should be really fast really

84
00:04:14,810 --> 00:04:17,690
fast start up the runtime and everything

85
00:04:17,690 --> 00:04:20,510
in your app should be fast and that

86
00:04:20,510 --> 00:04:23,480
means that a lot of work needs to be

87
00:04:23,480 --> 00:04:25,850
done to make sure that there's no long

88
00:04:25,850 --> 00:04:28,340
running code or big loops that are you

89
00:04:28,340 --> 00:04:30,380
know causing a lot of things to change

90
00:04:30,380 --> 00:04:33,380
within the app and it also means that

91
00:04:33,380 --> 00:04:35,479
development should be fast as a

92
00:04:35,479 --> 00:04:38,690
developer as an implementer of code you

93
00:04:38,690 --> 00:04:39,620
don't want to spend a lot of time

94
00:04:39,620 --> 00:04:41,630
messing with the library or with the

95
00:04:41,630 --> 00:04:44,570
framework and you just want to develop

96
00:04:44,570 --> 00:04:47,720
your app that goes hand in hand with

97
00:04:47,720 --> 00:04:50,360
maximizing developer cough happiness so

98
00:04:50,360 --> 00:04:52,700
for better or worse in a company full of

99
00:04:52,700 --> 00:04:55,750
Ruby developers that means CoffeeScript

100
00:04:55,750 --> 00:04:59,930
don't get me wrong I love native jas but

101
00:04:59,930 --> 00:05:01,400
CoffeeScript is definitely beautiful and

102
00:05:01,400 --> 00:05:04,009
allows you to do some things that we're

103
00:05:04,009 --> 00:05:05,870
pretty hard to do natively more

104
00:05:05,870 --> 00:05:07,570
importantly it allows you to implement

105
00:05:07,570 --> 00:05:11,479
certain things just just like what a

106
00:05:11,479 --> 00:05:13,850
developer is is expecting when they sit

107
00:05:13,850 --> 00:05:15,650
down to look at the code and that's

108
00:05:15,650 --> 00:05:17,360
really important is the path of least

109
00:05:17,360 --> 00:05:20,169
resistance that goes hand in hand with

110
00:05:20,169 --> 00:05:23,270
rails looking now let me be clear I I

111
00:05:23,270 --> 00:05:24,710
don't want to reimplement rails in

112
00:05:24,710 --> 00:05:26,449
JavaScript and rails is definitely not

113
00:05:26,449 --> 00:05:28,699
the end-all of web frameworks but for

114
00:05:28,699 --> 00:05:30,320
our company full of rails developers

115
00:05:30,320 --> 00:05:32,180
sitting down and looking at some code

116
00:05:32,180 --> 00:05:34,490
that looks aesthetically similar to

117
00:05:34,490 --> 00:05:39,650
something like rails it again follows

118
00:05:39,650 --> 00:05:42,800
the path of least resistance so spoiler

119
00:05:42,800 --> 00:05:45,949
alert that's going to pop up a lot it

120
00:05:45,949 --> 00:05:48,940
should also maximize designer happiness

121
00:05:48,940 --> 00:05:51,080
things look different in the eyes of

122
00:05:51,080 --> 00:05:54,110
designers and they're used to their HTML

123
00:05:54,110 --> 00:05:56,509
and their CSS they don't want to write a

124
00:05:56,509 --> 00:05:58,759
lot of code it was a struggle getting

125
00:05:58,759 --> 00:06:02,990
designers to work with ERV templates and

126
00:06:02,990 --> 00:06:05,479
also the more you can be couple with the

127
00:06:05,479 --> 00:06:07,729
designers they can work on their code on

128
00:06:07,729 --> 00:06:09,650
their HTML you can work on your business

129
00:06:09,650 --> 00:06:11,389
logic and it's really easy to make that

130
00:06:11,389 --> 00:06:13,159
all work together or it should be and

131
00:06:13,159 --> 00:06:18,680
that's what we want to do but designers

132
00:06:18,680 --> 00:06:20,930
will still write jQuery code or you know

133
00:06:20,930 --> 00:06:23,419
whatever to make cool things happen on

134
00:06:23,419 --> 00:06:24,800
the page so you want to give them a

135
00:06:24,800 --> 00:06:26,750
place to do that without interfering

136
00:06:26,750 --> 00:06:28,820
with it and without blowing all of that

137
00:06:28,820 --> 00:06:31,430
jQuery away every time something in the

138
00:06:31,430 --> 00:06:34,909
app has to change designers should be

139
00:06:34,909 --> 00:06:36,289
allowed to have rapid iteration and

140
00:06:36,289 --> 00:06:38,360
again when a designer sits down to look

141
00:06:38,360 --> 00:06:39,889
at it they should know exactly what's

142
00:06:39,889 --> 00:06:41,389
going on without having to struggle to

143
00:06:41,389 --> 00:06:44,199
figure out everything that's happening

144
00:06:44,199 --> 00:06:46,159
it should follow convention over

145
00:06:46,159 --> 00:06:48,800
configuration when you have some a lot

146
00:06:48,800 --> 00:06:50,330
of configuration there's all these

147
00:06:50,330 --> 00:06:52,039
options that you have to set up and all

148
00:06:52,039 --> 00:06:55,009
different kinds of what at light bulbs

149
00:06:55,009 --> 00:06:58,030
to put in and switches to flip so we

150
00:06:58,030 --> 00:07:00,560
didn't want to do that with when you

151
00:07:00,560 --> 00:07:02,840
follow well established conventions you

152
00:07:02,840 --> 00:07:04,699
write less code you know where to put

153
00:07:04,699 --> 00:07:06,440
your stuff which is a big problem with

154
00:07:06,440 --> 00:07:08,840
existing micro frameworks like when you

155
00:07:08,840 --> 00:07:09,950
start up a backbone app for example

156
00:07:09,950 --> 00:07:11,960
where do you put all your controllers

157
00:07:11,960 --> 00:07:13,400
where do you put all your models

158
00:07:13,400 --> 00:07:15,949
in the same file if your app is big then

159
00:07:15,949 --> 00:07:17,330
do you put them in different folders

160
00:07:17,330 --> 00:07:19,790
which folders so we wanted a place to

161
00:07:19,790 --> 00:07:22,699
put your stuff and again when there's

162
00:07:22,699 --> 00:07:24,320
well established conventions you can sit

163
00:07:24,320 --> 00:07:26,030
down look at something and not have to

164
00:07:26,030 --> 00:07:27,830
figure out how it works because it works

165
00:07:27,830 --> 00:07:30,979
the same in every single application we

166
00:07:30,979 --> 00:07:32,900
also wanted a really powerful system of

167
00:07:32,900 --> 00:07:35,060
bindings so part of the problem with

168
00:07:35,060 --> 00:07:37,130
building large apps is keeping them in

169
00:07:37,130 --> 00:07:40,850
sync you when data changes in one part

170
00:07:40,850 --> 00:07:42,199
of your app you usually want to know

171
00:07:42,199 --> 00:07:44,090
about it somewhere else you either end

172
00:07:44,090 --> 00:07:48,430
up writing a lot of code yourself or if

173
00:07:48,430 --> 00:07:51,530
if your framework has implemented a

174
00:07:51,530 --> 00:07:53,240
system of bindings it's usually just

175
00:07:53,240 --> 00:07:55,639
kind of attacked on thing so we really

176
00:07:55,639 --> 00:07:56,930
wanted to build the whole framework

177
00:07:56,930 --> 00:07:59,979
around this powerful system of bindings

178
00:07:59,979 --> 00:08:02,389
and that means that everything is really

179
00:08:02,389 --> 00:08:06,680
really fast and finally there's no

180
00:08:06,680 --> 00:08:09,710
templates when you have templates in

181
00:08:09,710 --> 00:08:12,530
client-side code like ejs or eco or any

182
00:08:12,530 --> 00:08:15,259
of these other templating languages they

183
00:08:15,259 --> 00:08:19,160
were great on servers but we're not in

184
00:08:19,160 --> 00:08:21,860
that stateless environment anymore when

185
00:08:21,860 --> 00:08:23,180
you have templates in JavaScript

186
00:08:23,180 --> 00:08:25,250
whenever anything in your app changes

187
00:08:25,250 --> 00:08:27,620
you have to blow all of those changes or

188
00:08:27,620 --> 00:08:29,720
you have to blow all of your Dom away to

189
00:08:29,720 --> 00:08:33,500
replace it with a new dalam plus they

190
00:08:33,500 --> 00:08:36,020
make designers program they ruin the Dom

191
00:08:36,020 --> 00:08:38,089
whenever anything changes they're really

192
00:08:38,089 --> 00:08:39,770
slow so not only do you have to replace

193
00:08:39,770 --> 00:08:41,930
entire sections of your page but you

194
00:08:41,930 --> 00:08:44,089
have to parse that string first and then

195
00:08:44,089 --> 00:08:47,330
create nodes from it and that parsing

196
00:08:47,330 --> 00:08:49,040
can take a long time like in the case of

197
00:08:49,040 --> 00:08:52,610
the original mustache and they also mix

198
00:08:52,610 --> 00:08:57,470
logic with design so we didn't want to

199
00:08:57,470 --> 00:08:59,660
use any type of JavaScript templating

200
00:08:59,660 --> 00:09:03,770
library and the final goal is to be more

201
00:09:03,770 --> 00:09:05,570
of a framework and not a library when

202
00:09:05,570 --> 00:09:07,700
you have a library like backbone or any

203
00:09:07,700 --> 00:09:10,300
of the other JavaScript micro frameworks

204
00:09:10,300 --> 00:09:12,980
it's a section of code or it's a chunk

205
00:09:12,980 --> 00:09:15,290
of code that you can call into and make

206
00:09:15,290 --> 00:09:18,410
cool things happen but you're still

207
00:09:18,410 --> 00:09:20,779
writing a lot of glue code and and

208
00:09:20,779 --> 00:09:24,230
boilerplate code to connect into that so

209
00:09:24,230 --> 00:09:26,120
if you have a tiny well-written

210
00:09:26,120 --> 00:09:26,960
framework

211
00:09:26,960 --> 00:09:28,790
then all of that glue code and

212
00:09:28,790 --> 00:09:30,830
boilerplate can be taken for you can be

213
00:09:30,830 --> 00:09:32,300
taken care of for you so you just

214
00:09:32,300 --> 00:09:36,310
concentrate on writing your actual app

215
00:09:36,310 --> 00:09:39,950
so those were the goals that we had and

216
00:09:39,950 --> 00:09:42,500
that brings us back to the dilemma we're

217
00:09:42,500 --> 00:09:44,680
back at this impasse do we want to

218
00:09:44,680 --> 00:09:48,140
invest in one of these other frameworks

219
00:09:48,140 --> 00:09:51,710
or give up or you know do something

220
00:09:51,710 --> 00:09:53,810
about it people told me to give up I

221
00:09:53,810 --> 00:09:57,620
said sundial sticks to them we're doing

222
00:09:57,620 --> 00:10:02,390
it anyway realizing that these goals are

223
00:10:02,390 --> 00:10:04,250
probably completely unobtainable I

224
00:10:04,250 --> 00:10:06,470
started building Shopify as the app that

225
00:10:06,470 --> 00:10:11,420
we wanted to see the result is a

226
00:10:11,420 --> 00:10:14,060
framework that partly extracted from

227
00:10:14,060 --> 00:10:15,970
real work and partly my own

228
00:10:15,970 --> 00:10:18,590
over-engineering fancy but that

229
00:10:18,590 --> 00:10:22,970
framework is Batman j/s so what is

230
00:10:22,970 --> 00:10:25,520
Batman it's really fast everything's

231
00:10:25,520 --> 00:10:28,100
fast developments fast start up as fast

232
00:10:28,100 --> 00:10:31,550
runtime is fast maximizes developer and

233
00:10:31,550 --> 00:10:33,290
designer happiness and all the ways that

234
00:10:33,290 --> 00:10:35,240
i mentioned convention over

235
00:10:35,240 --> 00:10:38,510
configuration powerful bindings and no

236
00:10:38,510 --> 00:10:40,820
templates but what we have instead i

237
00:10:40,820 --> 00:10:42,580
think is better than templates and

238
00:10:42,580 --> 00:10:45,260
everything is designed to just make

239
00:10:45,260 --> 00:10:47,210
sitting down and looking at this code

240
00:10:47,210 --> 00:10:50,780
really easy so this is Batman we're

241
00:10:50,780 --> 00:10:52,340
going to be releasing it under the MIT

242
00:10:52,340 --> 00:10:54,920
license soon but let me show you what it

243
00:10:54,920 --> 00:10:58,460
looks like so Alfred is the first

244
00:10:58,460 --> 00:11:00,770
example i want to show you everybody

245
00:11:00,770 --> 00:11:02,600
always has to build it to a to-do

246
00:11:02,600 --> 00:11:04,340
manager it's just kind of this canonical

247
00:11:04,340 --> 00:11:07,370
thing but doing it in Batman is so

248
00:11:07,370 --> 00:11:09,590
trivial that it's almost not really

249
00:11:09,590 --> 00:11:12,140
worth showing a demo but that's what i'm

250
00:11:12,140 --> 00:11:22,749
going to do so it's file

251
00:11:22,759 --> 00:11:26,699
sorry i meant to have it open so this is

252
00:11:26,699 --> 00:11:30,180
the basic template say a designer gave

253
00:11:30,180 --> 00:11:33,139
this to me it's just an empty HTML file

254
00:11:33,139 --> 00:11:36,060
here's what it looks like doesn't do

255
00:11:36,060 --> 00:11:39,059
anything yet so we want to turn this

256
00:11:39,059 --> 00:11:42,720
into an actual app down at the bottom

257
00:11:42,720 --> 00:11:45,779
here you see we have a simple app called

258
00:11:45,779 --> 00:11:48,809
Alfred it extends Batman app and then it

259
00:11:48,809 --> 00:11:51,689
runs but nothing actually happens yet so

260
00:11:51,689 --> 00:11:55,439
I hate live coding but this is pretty

261
00:11:55,439 --> 00:12:00,269
trivial so let's do it first of all we

262
00:12:00,269 --> 00:12:04,230
need a model called to do and it extends

263
00:12:04,230 --> 00:12:08,040
Batman model pretty straightforward and

264
00:12:08,040 --> 00:12:09,629
CoffeeScript makes that really easy and

265
00:12:09,629 --> 00:12:11,910
it's still using prototype will

266
00:12:11,910 --> 00:12:13,920
inheritance as opposed to a regular

267
00:12:13,920 --> 00:12:16,050
native JavaScript class library that

268
00:12:16,050 --> 00:12:19,800
would have some have its own complicated

269
00:12:19,800 --> 00:12:23,309
class system now you don't need to

270
00:12:23,309 --> 00:12:24,839
declare a schema all the bindings will

271
00:12:24,839 --> 00:12:26,879
just be set up automatically you can if

272
00:12:26,879 --> 00:12:29,370
you want to sew a to do will have a body

273
00:12:29,370 --> 00:12:35,939
and in is Don attribute and then once

274
00:12:35,939 --> 00:12:38,309
you have that model you can do things

275
00:12:38,309 --> 00:12:40,769
like to do at all and that will return

276
00:12:40,769 --> 00:12:42,959
an array of all the to do's right now

277
00:12:42,959 --> 00:12:45,899
that's empty so why don't we say if not

278
00:12:45,899 --> 00:12:56,940
to do all that length then you to do

279
00:12:56,950 --> 00:12:59,860
and you can put that somewhere and then

280
00:12:59,860 --> 00:13:03,310
call to do not save so it's very

281
00:13:03,310 --> 00:13:05,440
straightforward to look at you can it

282
00:13:05,440 --> 00:13:07,650
does what you expect and if we run this

283
00:13:07,650 --> 00:13:10,420
it won't do anything but it doesn't

284
00:13:10,420 --> 00:13:12,550
cause many years the to do is now saved

285
00:13:12,550 --> 00:13:17,800
in the data cache but we probably want

286
00:13:17,800 --> 00:13:22,270
to actually make it do something so for

287
00:13:22,270 --> 00:13:25,030
our list of items for every item will

288
00:13:25,030 --> 00:13:27,070
have a checkbox and then a label and

289
00:13:27,070 --> 00:13:29,260
essentially what we want is the label to

290
00:13:29,260 --> 00:13:31,510
have the context or the content of the

291
00:13:31,510 --> 00:13:35,790
to do so we want to write something like

292
00:13:35,790 --> 00:13:40,240
data bind is to do dot body so using

293
00:13:40,240 --> 00:13:42,160
data attributes we have a number of

294
00:13:42,160 --> 00:13:45,550
hooks into your app they take strings or

295
00:13:45,550 --> 00:13:48,130
executable code and then they can run

296
00:13:48,130 --> 00:13:50,920
pieces of your app get data bind to data

297
00:13:50,920 --> 00:13:54,040
and keep that note in sync with all of

298
00:13:54,040 --> 00:13:56,710
your data and the important part is that

299
00:13:56,710 --> 00:13:59,890
the node itself is is registering an

300
00:13:59,890 --> 00:14:01,990
observer on your data you never have to

301
00:14:01,990 --> 00:14:04,390
there's never like a big Dom tree that's

302
00:14:04,390 --> 00:14:06,490
mapped that has to walk through whenever

303
00:14:06,490 --> 00:14:08,860
data changes so it's really fast the

304
00:14:08,860 --> 00:14:12,070
node is in charge of itself but where do

305
00:14:12,070 --> 00:14:14,290
we get this reference to to do well

306
00:14:14,290 --> 00:14:15,760
aside from the one that we defined that

307
00:14:15,760 --> 00:14:18,460
in here but that's not global so what we

308
00:14:18,460 --> 00:14:19,780
want to do is we want to iterate through

309
00:14:19,780 --> 00:14:21,370
the collection of all the to do's

310
00:14:21,370 --> 00:14:23,650
there's another data binding that will

311
00:14:23,650 --> 00:14:28,210
iterate through a collection you can say

312
00:14:28,210 --> 00:14:31,630
for each and the variable that will be

313
00:14:31,630 --> 00:14:33,550
defined within that loop will be

314
00:14:33,550 --> 00:14:35,620
whatever you pass it and then finally

315
00:14:35,620 --> 00:14:37,060
you can say what you want to iterate

316
00:14:37,060 --> 00:14:40,360
over so this is saying for each to do in

317
00:14:40,360 --> 00:14:43,030
to do all create a new list item now

318
00:14:43,030 --> 00:14:46,270
whenever a gets added it will create a

319
00:14:46,270 --> 00:14:48,490
new list item whenever one gets removed

320
00:14:48,490 --> 00:14:50,140
it will remove the corresponding note

321
00:14:50,140 --> 00:14:52,240
from the Dom it never rear enders the

322
00:14:52,240 --> 00:14:55,990
whole list or anything like that so if

323
00:14:55,990 --> 00:15:00,400
we run this there's the first to do we

324
00:15:00,400 --> 00:15:04,750
can also bind the check box to to do is

325
00:15:04,750 --> 00:15:09,460
done and now it'll work but we don't

326
00:15:09,460 --> 00:15:10,590
have anything to show

327
00:15:10,590 --> 00:15:12,810
whether the to do is done so we want to

328
00:15:12,810 --> 00:15:15,390
say add a class named to the label we

329
00:15:15,390 --> 00:15:18,930
can just say data class and then the

330
00:15:18,930 --> 00:15:20,310
name of the class that we want to bind

331
00:15:20,310 --> 00:15:21,930
so in this case the class name will be

332
00:15:21,930 --> 00:15:25,140
done and we'll also bind that to do is

333
00:15:25,140 --> 00:15:28,800
done so now when the to-do item is done

334
00:15:28,800 --> 00:15:30,390
it will automatically add that class

335
00:15:30,390 --> 00:15:33,810
name to the node and take it away again

336
00:15:33,810 --> 00:15:36,630
when the binding changes so the node is

337
00:15:36,630 --> 00:15:39,030
taking care of itself it's really fast

338
00:15:39,030 --> 00:15:41,580
and you never have to worry about any of

339
00:15:41,580 --> 00:15:49,930
the glue code to make that happen if we

340
00:15:49,940 --> 00:16:11,199
just add a couple to do's play with

341
00:16:11,209 --> 00:16:14,420
so now we have some to dues that we can

342
00:16:14,420 --> 00:16:20,329
play with the next thing that we want to

343
00:16:20,329 --> 00:16:23,839
do is bind this delete button to the

344
00:16:23,839 --> 00:16:27,769
actual action so you can use event

345
00:16:27,769 --> 00:16:31,939
bindings and now whenever it gets

346
00:16:31,939 --> 00:16:33,290
clicked on it will call to do not

347
00:16:33,290 --> 00:16:34,999
destroy now why would you use an event

348
00:16:34,999 --> 00:16:37,069
binding as opposed to on click two

349
00:16:37,069 --> 00:16:38,929
reasons first of all it uses add event

350
00:16:38,929 --> 00:16:41,389
listener instead of on click and second

351
00:16:41,389 --> 00:16:43,240
of all it's within the context of

352
00:16:43,240 --> 00:16:45,439
whatever context your range so we have

353
00:16:45,439 --> 00:16:47,929
access to this to do variable and we can

354
00:16:47,929 --> 00:16:50,240
call not destroy on it so now these

355
00:16:50,240 --> 00:16:53,509
become links and if we delete one that

356
00:16:53,509 --> 00:16:55,779
node will be removed from the Dom

357
00:16:55,779 --> 00:16:57,980
without messing with all of the other

358
00:16:57,980 --> 00:17:02,240
nodes Batman also has this is a really

359
00:17:02,240 --> 00:17:04,010
simple mixing system and a few

360
00:17:04,010 --> 00:17:05,839
predefined mix-ins so if you want to do

361
00:17:05,839 --> 00:17:08,659
something like make this label editable

362
00:17:08,659 --> 00:17:13,029
you can just say mix in editable and now

363
00:17:13,029 --> 00:17:15,740
that will apply all of the properties to

364
00:17:15,740 --> 00:17:18,079
that node from the editable mixin to

365
00:17:18,079 --> 00:17:19,939
make it in line editable and then when

366
00:17:19,939 --> 00:17:21,770
you change that it will automatically

367
00:17:21,770 --> 00:17:32,860
update it should automatically update

368
00:17:32,860 --> 00:17:37,279
well live demo digs break I'm not going

369
00:17:37,279 --> 00:17:39,380
to debug it but it should normally

370
00:17:39,380 --> 00:17:41,870
automatically update that it gets really

371
00:17:41,870 --> 00:17:45,200
cool though because you can also say mix

372
00:17:45,200 --> 00:17:56,659
in animation and now whenever okay

373
00:17:56,659 --> 00:17:58,909
everything's breaking well whenever one

374
00:17:58,909 --> 00:18:00,890
gets created it will animate in and when

375
00:18:00,890 --> 00:18:05,380
you delete it it'll animate away and

376
00:18:05,380 --> 00:18:07,730
finally we can make this form actually

377
00:18:07,730 --> 00:18:10,520
work there's a form for binding so you

378
00:18:10,520 --> 00:18:14,210
can give it a context will say form

379
00:18:14,210 --> 00:18:16,520
forward to do and it'll be to do to

380
00:18:16,520 --> 00:18:18,860
create and now within this form you have

381
00:18:18,860 --> 00:18:21,770
an instance of to do that you combine

382
00:18:21,770 --> 00:18:24,900
two so we can bind this

383
00:18:24,900 --> 00:18:32,950
input to to u-dub body I'll remove the

384
00:18:32,950 --> 00:18:34,960
animation mix in so we can actually see

385
00:18:34,960 --> 00:18:38,980
what's happening and finally when you

386
00:18:38,980 --> 00:18:43,300
submit this form will call to do not

387
00:18:43,300 --> 00:18:47,020
save pretty straightforward and now when

388
00:18:47,020 --> 00:18:49,270
we add it there it goes if the animation

389
00:18:49,270 --> 00:18:51,010
mixing was still there then that one

390
00:18:51,010 --> 00:18:54,670
would slide in so that's basically what

391
00:18:54,670 --> 00:18:57,160
it's like to build a simple application

392
00:18:57,160 --> 00:19:04,510
d couple designers and developers and it

393
00:19:04,510 --> 00:19:11,810
lets you concentrate on the cool stuff

394
00:19:11,820 --> 00:19:14,200
unlike other frameworks like sprout core

395
00:19:14,200 --> 00:19:17,530
or cappuccino though it's more like

396
00:19:17,530 --> 00:19:19,350
backbone in that the framework itself is

397
00:19:19,350 --> 00:19:23,290
really tiny it's less than 10k and it's

398
00:19:23,290 --> 00:19:24,850
really fast because it just doesn't do

399
00:19:24,850 --> 00:19:26,890
very much aside from just set up classes

400
00:19:26,890 --> 00:19:30,720
that you need to to implement and extend

401
00:19:30,720 --> 00:19:34,810
it's really tiny it's really fast you

402
00:19:34,810 --> 00:19:36,940
can use it with an existing back-end if

403
00:19:36,940 --> 00:19:38,920
you have an existing REST API like

404
00:19:38,920 --> 00:19:41,170
Shopify does you can drop in that

405
00:19:41,170 --> 00:19:45,130
back-end you can add to your models

406
00:19:45,130 --> 00:19:47,860
persist Batman rest storage and it will

407
00:19:47,860 --> 00:19:50,370
automatically persist to the endpoint

408
00:19:50,370 --> 00:19:53,260
that that's just respected from the

409
00:19:53,260 --> 00:19:58,960
model name or if you want to write in

410
00:19:58,960 --> 00:20:02,260
end-to-end JavaScript app this is where

411
00:20:02,260 --> 00:20:03,880
things get really cool Batman is

412
00:20:03,880 --> 00:20:06,370
actually a full stack frame work so you

413
00:20:06,370 --> 00:20:08,230
can build an end to end Batman

414
00:20:08,230 --> 00:20:13,090
application there's a Batman node server

415
00:20:13,090 --> 00:20:16,180
and it will actually use your same code

416
00:20:16,180 --> 00:20:18,430
for client and server not a fake promise

417
00:20:18,430 --> 00:20:21,150
it actually uses the exact same code

418
00:20:21,150 --> 00:20:24,130
which we've seen people try to do before

419
00:20:24,130 --> 00:20:26,310
but it hasn't really worked out so

420
00:20:26,310 --> 00:20:28,450
seriously like you can have the same

421
00:20:28,450 --> 00:20:30,280
model with the same validations and it

422
00:20:30,280 --> 00:20:32,290
runs in both places you can also include

423
00:20:32,290 --> 00:20:35,080
specific note code to run security

424
00:20:35,080 --> 00:20:37,390
critical things or extra validations on

425
00:20:37,390 --> 00:20:37,660
the

426
00:20:37,660 --> 00:20:39,130
over that you don't want in the client

427
00:20:39,130 --> 00:20:41,200
and you don't have to recreate your

428
00:20:41,200 --> 00:20:42,730
model in both the client on the server

429
00:20:42,730 --> 00:20:45,490
it'll just validate when it comes in to

430
00:20:45,490 --> 00:20:50,980
the server so when you have a model like

431
00:20:50,980 --> 00:20:53,470
my model you can just say persist Batman

432
00:20:53,470 --> 00:20:55,840
and then it will automatically sync that

433
00:20:55,840 --> 00:20:57,640
model with this server and whenever the

434
00:20:57,640 --> 00:21:00,130
model changes for anyone it will change

435
00:21:00,130 --> 00:21:02,410
for everyone and the Batman server uses

436
00:21:02,410 --> 00:21:04,780
web sockets to to make that happen and

437
00:21:04,780 --> 00:21:07,420
persist across everything if you want it

438
00:21:07,420 --> 00:21:13,930
to otherwise so it's a full stack frame

439
00:21:13,930 --> 00:21:15,700
work if you want it to be otherwise it's

440
00:21:15,700 --> 00:21:18,070
just an awesome tiny and really fast

441
00:21:18,070 --> 00:21:25,070
client-side framework so am I on time

442
00:21:25,080 --> 00:21:30,970
okay I for another example I want to

443
00:21:30,970 --> 00:21:32,830
actually show you what it's like to

444
00:21:32,830 --> 00:21:34,330
build a full app the to do demos are

445
00:21:34,330 --> 00:21:38,470
cute but it doesn't give you an idea for

446
00:21:38,470 --> 00:21:40,840
what it's like to build a full app so I

447
00:21:40,840 --> 00:21:42,700
could not think of anything more name

448
00:21:42,700 --> 00:21:44,590
than building a Twitter client Plus

449
00:21:44,590 --> 00:21:46,030
Twitter said don't build more Twitter

450
00:21:46,030 --> 00:21:52,840
clients so Twitter client here we go so

451
00:21:52,840 --> 00:21:54,850
basically what this demo is going to do

452
00:21:54,850 --> 00:21:58,360
is it'll get a stream of public timeline

453
00:21:58,360 --> 00:22:01,930
tweets and then let you locally comment

454
00:22:01,930 --> 00:22:04,060
on them and persist those comments to

455
00:22:04,060 --> 00:22:07,390
all other users of the Twitter comment

456
00:22:07,390 --> 00:22:11,140
application so as a just to start off

457
00:22:11,140 --> 00:22:13,180
your app you'll say Batman gen app

458
00:22:13,180 --> 00:22:14,860
Twitter so there's a full tool twin

459
00:22:14,860 --> 00:22:16,720
chain of generators and things like that

460
00:22:16,720 --> 00:22:18,790
that you can use to create your app and

461
00:22:18,790 --> 00:22:20,530
give it a structure so the response to

462
00:22:20,530 --> 00:22:22,900
that will create your application create

463
00:22:22,900 --> 00:22:24,790
your models in your views folder so it

464
00:22:24,790 --> 00:22:26,350
gives you a place to put your stuff and

465
00:22:26,350 --> 00:22:32,380
it it gets you set up with with a

466
00:22:32,380 --> 00:22:34,840
convention that you expect and then you

467
00:22:34,840 --> 00:22:37,510
can CD into Twitter and run Batman

468
00:22:37,510 --> 00:22:43,450
server to start up the server so we say

469
00:22:43,450 --> 00:22:47,650
Batman server then the default app just

470
00:22:47,650 --> 00:22:50,370
looks like

471
00:22:50,380 --> 00:22:53,070
it's just a simple app it has a binding

472
00:22:53,070 --> 00:22:56,290
so when you change this text field it

473
00:22:56,290 --> 00:22:58,030
updates the binding that's just the

474
00:22:58,030 --> 00:22:59,650
default of what happens when the

475
00:22:59,650 --> 00:23:04,060
generator gets invoked so the next thing

476
00:23:04,060 --> 00:23:05,980
we want to do is we want to have a model

477
00:23:05,980 --> 00:23:07,600
called a tweet so we can generate that

478
00:23:07,600 --> 00:23:11,380
and it'll generate the file for us this

479
00:23:11,380 --> 00:23:13,420
is the code that we want our put our

480
00:23:13,420 --> 00:23:16,180
tweet model to look like it has many

481
00:23:16,180 --> 00:23:18,040
comments so you can do associations

482
00:23:18,040 --> 00:23:20,350
those are built in and then we'll have a

483
00:23:20,350 --> 00:23:22,270
fetch method which just sends a JSON p

484
00:23:22,270 --> 00:23:24,940
request to Twitter search it gets cut

485
00:23:24,940 --> 00:23:28,000
off but it's using the the query object

486
00:23:28,000 --> 00:23:30,580
and then we'll create a new tweet and

487
00:23:30,580 --> 00:23:32,470
save it for every result that comes back

488
00:23:32,470 --> 00:23:34,540
in from Twitter next we'll need a

489
00:23:34,540 --> 00:23:37,390
comment model so that'll again generate

490
00:23:37,390 --> 00:23:40,330
the model for us and the comment models

491
00:23:40,330 --> 00:23:43,750
will persist to the Batman server they

492
00:23:43,750 --> 00:23:45,910
belong to a post we you can have

493
00:23:45,910 --> 00:23:47,560
validators like here we're validating

494
00:23:47,560 --> 00:23:50,170
the length of if you are familiar with

495
00:23:50,170 --> 00:23:51,700
rails this should look really familiar

496
00:23:51,700 --> 00:23:55,090
even though it's working as a JavaScript

497
00:23:55,090 --> 00:23:57,610
app and not a server-side app and then

498
00:23:57,610 --> 00:24:00,970
we can define a schema the next thing we

499
00:24:00,970 --> 00:24:03,700
need is a controller so in the default

500
00:24:03,700 --> 00:24:05,710
app controller that the generator gives

501
00:24:05,710 --> 00:24:09,250
us we have an index action now when you

502
00:24:09,250 --> 00:24:10,990
have an action on a controller if you

503
00:24:10,990 --> 00:24:12,400
don't return anything then it will

504
00:24:12,400 --> 00:24:13,930
automatically render the appropriate

505
00:24:13,930 --> 00:24:19,000
view for that route otherwise you can

506
00:24:19,000 --> 00:24:21,340
specify what you want to render or what

507
00:24:21,340 --> 00:24:22,990
you want to redirect to like in the

508
00:24:22,990 --> 00:24:26,500
search action we will call our fetch

509
00:24:26,500 --> 00:24:28,510
method so it'll send the request to the

510
00:24:28,510 --> 00:24:31,870
Twitter API and then it will redirect to

511
00:24:31,870 --> 00:24:38,020
a URL with that query in it and finally

512
00:24:38,020 --> 00:24:40,030
we'll have a comments controller the

513
00:24:40,030 --> 00:24:42,880
index action will fetch all of the

514
00:24:42,880 --> 00:24:45,700
tweets or a specific sweet sorry and

515
00:24:45,700 --> 00:24:47,560
show you the comments all the comments

516
00:24:47,560 --> 00:24:49,960
for that tweet and then new will allow

517
00:24:49,960 --> 00:24:53,080
you to write a comment for it sweet and

518
00:24:53,080 --> 00:24:55,360
both of these routes will be handled

519
00:24:55,360 --> 00:24:58,930
automatically by by Batman so it will

520
00:24:58,930 --> 00:25:00,700
automatically generate the route matches

521
00:25:00,700 --> 00:25:03,730
that need to happen to call these

522
00:25:03,730 --> 00:25:05,130
methods

523
00:25:05,130 --> 00:25:07,480
finally this is what your view would

524
00:25:07,480 --> 00:25:10,630
look like you can still just because

525
00:25:10,630 --> 00:25:12,010
there's no templates doesn't mean that

526
00:25:12,010 --> 00:25:14,649
you can't still have views in different

527
00:25:14,649 --> 00:25:16,630
folders so we have view / comment /

528
00:25:16,630 --> 00:25:20,049
index and this HTML will be rendered

529
00:25:20,049 --> 00:25:24,039
when that action is called and it will

530
00:25:24,039 --> 00:25:25,750
render the tweet it will render all the

531
00:25:25,750 --> 00:25:29,559
comments for it so let's look at what

532
00:25:29,559 --> 00:25:33,010
that looks like i will switch to the

533
00:25:33,010 --> 00:25:37,149
full version so this is everything that

534
00:25:37,149 --> 00:25:39,909
we just implemented in slides you can

535
00:25:39,909 --> 00:25:43,120
search twitter give it a hashtag to

536
00:25:43,120 --> 00:25:44,590
search for so we'll search for jazz

537
00:25:44,590 --> 00:25:47,620
cough and once twitter comes back there

538
00:25:47,620 --> 00:25:50,710
we go so these are the results of the

539
00:25:50,710 --> 00:25:52,720
search on twitter and that's just the

540
00:25:52,720 --> 00:25:54,970
tweet model they get saved in the model

541
00:25:54,970 --> 00:25:57,549
and then we can iterate over tweet doll

542
00:25:57,549 --> 00:26:01,000
so you would think that there's more

543
00:26:01,000 --> 00:26:06,399
going on on Twitter right now good call

544
00:26:06,399 --> 00:26:08,230
so I can change this right in the route

545
00:26:08,230 --> 00:26:13,870
and and it'll update everything okay j/s

546
00:26:13,870 --> 00:26:17,049
conf and these are all the tweets about

547
00:26:17,049 --> 00:26:21,010
Jess Khan and there's me so you can hit

548
00:26:21,010 --> 00:26:22,600
the new comment button and that'll take

549
00:26:22,600 --> 00:26:24,519
you to the route for this tweet /

550
00:26:24,519 --> 00:26:27,519
comment and that will create this is the

551
00:26:27,519 --> 00:26:32,139
new comment action we can get that's my

552
00:26:32,139 --> 00:26:37,330
name and then give it a comment submit

553
00:26:37,330 --> 00:26:39,909
and now this is the comment section so

554
00:26:39,909 --> 00:26:41,799
it's our list action and it will list

555
00:26:41,799 --> 00:26:44,350
all of the the comments for that tweet

556
00:26:44,350 --> 00:26:48,429
you can head back and the routes will

557
00:26:48,429 --> 00:26:50,169
update even though we're still you know

558
00:26:50,169 --> 00:26:52,269
in the same application and the fact

559
00:26:52,269 --> 00:26:54,700
that it's using the hash URL is just an

560
00:26:54,700 --> 00:26:56,049
implementation detail just like in

561
00:26:56,049 --> 00:26:58,450
backbone when put state is gets a little

562
00:26:58,450 --> 00:27:00,010
better than that can change within

563
00:27:00,010 --> 00:27:01,360
Batman without affecting your

564
00:27:01,360 --> 00:27:04,659
application so we can add another

565
00:27:04,659 --> 00:27:07,929
comment and there it is and if we go

566
00:27:07,929 --> 00:27:11,080
back to the Twitter timeline now this

567
00:27:11,080 --> 00:27:13,570
tweet has a comments link that will take

568
00:27:13,570 --> 00:27:17,830
you back to the list of Commons

569
00:27:17,830 --> 00:27:20,860
so that's the Twitter comments demo when

570
00:27:20,860 --> 00:27:22,480
you look at the code you can sit down

571
00:27:22,480 --> 00:27:24,669
and really easily see what's going on it

572
00:27:24,669 --> 00:27:26,200
looks like what you expect there's not a

573
00:27:26,200 --> 00:27:28,809
lot of figuring out to do designers can

574
00:27:28,809 --> 00:27:30,399
independently work on the templates like

575
00:27:30,399 --> 00:27:32,890
comment / index.html the designer can

576
00:27:32,890 --> 00:27:35,620
build that that HTML page and then it

577
00:27:35,620 --> 00:27:37,029
automatically gets rendered into your

578
00:27:37,029 --> 00:27:40,360
app where you want it and finally the

579
00:27:40,360 --> 00:27:42,580
whole demo which pulls from Twitter it

580
00:27:42,580 --> 00:27:45,130
models and has relationships and

581
00:27:45,130 --> 00:27:47,320
associations between those models it has

582
00:27:47,320 --> 00:27:48,940
routes and it renders Hughes and

583
00:27:48,940 --> 00:27:53,990
everything was less than a hundred lines

584
00:27:54,000 --> 00:27:56,860
so next Batman it's really fast

585
00:27:56,860 --> 00:27:58,419
developer and designer happiness

586
00:27:58,419 --> 00:28:00,789
convention over configuration bindings

587
00:28:00,789 --> 00:28:04,659
no templates and optionally it's a full

588
00:28:04,659 --> 00:28:09,090
stack framework to persist things over

589
00:28:09,090 --> 00:28:14,200
over the server less than 10k and it

590
00:28:14,200 --> 00:28:17,950
will be MIT license very soon we also

591
00:28:17,950 --> 00:28:19,840
have Batman chase org which will have

592
00:28:19,840 --> 00:28:22,029
lots more info and examples and that

593
00:28:22,029 --> 00:28:24,909
will hopefully be live later today so

594
00:28:24,909 --> 00:28:28,750
you can check that out and then we have

595
00:28:28,750 --> 00:28:32,260
one more thing we have this crazy demo

596
00:28:32,260 --> 00:28:35,799
with a lot of moving pieces and it used

597
00:28:35,799 --> 00:28:38,080
to involve an Arduino but that Arduino

598
00:28:38,080 --> 00:28:43,690
exploded so we're going to fake the

599
00:28:43,690 --> 00:28:51,039
Arduino part that's okay this is what

600
00:28:51,039 --> 00:28:53,019
the Ben andreas website looks like

601
00:28:53,019 --> 00:28:54,850
except without filler text that's not

602
00:28:54,850 --> 00:28:58,149
what I wanted to show you JS comp node

603
00:28:58,149 --> 00:29:06,460
stir calm so I this is the

604
00:29:06,460 --> 00:29:09,190
crime-fighting application unfortunately

605
00:29:09,190 --> 00:29:12,309
right now there's no crime so if i can

606
00:29:12,309 --> 00:29:13,929
get cell phone reception that's the

607
00:29:13,929 --> 00:29:15,190
other thing is that this needs cell

608
00:29:15,190 --> 00:29:19,330
phone reception and i had not planned on

609
00:29:19,330 --> 00:29:20,950
there not being any cell phone reception

610
00:29:20,950 --> 00:29:35,020
so i'm going to try to make a phone call

611
00:29:35,030 --> 00:29:38,000
hey it worked so what's happening is

612
00:29:38,000 --> 00:29:40,070
this is a Batman application running on

613
00:29:40,070 --> 00:29:42,470
the Batman server with troppo in the

614
00:29:42,470 --> 00:29:43,820
background that will send messages to

615
00:29:43,820 --> 00:29:45,950
the Batman server so as soon as I called

616
00:29:45,950 --> 00:29:47,840
it sent a message to the server which

617
00:29:47,840 --> 00:29:49,910
then sent a message to the client that

618
00:29:49,910 --> 00:29:54,440
updates this page so if you see crime be

619
00:29:54,440 --> 00:29:55,730
committed which you do because I just

620
00:29:55,730 --> 00:29:57,920
committed a crime please call this

621
00:29:57,920 --> 00:29:59,690
number so if you have cell phone

622
00:29:59,690 --> 00:30:01,430
reception please call one eight eight

623
00:30:01,430 --> 00:30:08,520
eight nine Batman and if not then a

624
00:30:08,530 --> 00:30:13,340
there's two oh man those lot of crime

625
00:30:13,340 --> 00:30:16,580
going on and so every time a call comes

626
00:30:16,580 --> 00:30:18,740
in it pushes the number to the client

627
00:30:18,740 --> 00:30:21,170
the client can update and then as soon

628
00:30:21,170 --> 00:30:24,230
as it reaches a hundred percent then the

629
00:30:24,230 --> 00:30:28,340
no file comes on and sends the signal to

630
00:30:28,340 --> 00:30:32,090
light up the bat signal and when the bad

631
00:30:32,090 --> 00:31:01,140
signal happens then Batman appears

632
00:31:01,150 --> 00:31:08,039
thank you Chris

633
00:31:08,049 --> 00:31:15,110
so thank you for reporting crime I so

634
00:31:15,110 --> 00:31:18,409
that was the batman demo BAM andreas org

635
00:31:18,409 --> 00:31:20,269
it will be up later today thank you very

636
00:31:20,269 --> 00:31:30,130
much roads take me home to the place I

637
00:31:30,130 --> 00:31:35,830
belong pork the door again jazz calm

