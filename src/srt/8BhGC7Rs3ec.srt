1
00:00:10,790 --> 00:00:13,920

hi I'm Peter Higgins I am presenting on

2
00:00:13,920 --> 00:00:17,789
dojo patterns and this is me um Dante

3
00:00:17,789 --> 00:00:19,710
those are boot kit p Higgins on Twitter

4
00:00:19,710 --> 00:00:22,350
wonderful I want to before i get into

5
00:00:22,350 --> 00:00:25,949
any of any of this I want a big huge

6
00:00:25,949 --> 00:00:46,520
round of applause for Chris and Laura

7
00:00:46,530 --> 00:00:49,360
I'm really just stalling I only have

8
00:00:49,360 --> 00:00:53,080
three slides um seriously though they've

9
00:00:53,080 --> 00:00:54,670
done such a great great job in getting

10
00:00:54,670 --> 00:00:56,440
this together and just to have a

11
00:00:56,440 --> 00:00:59,830
JavaScript conference here that we can

12
00:00:59,830 --> 00:01:02,650
do this it's phenomenal and I salute you

13
00:01:02,650 --> 00:01:05,020
so I am a huge obviously a huge fan of

14
00:01:05,020 --> 00:01:06,790
JavaScript or else I wouldn't be here

15
00:01:06,790 --> 00:01:09,940
with the rest of you and and I worked

16
00:01:09,940 --> 00:01:14,620
for dojo that is what I do the history

17
00:01:14,620 --> 00:01:16,270
of dojo and this is this is the exciting

18
00:01:16,270 --> 00:01:17,820
i only have three slides i swear to god

19
00:01:17,820 --> 00:01:20,920
it was started by this guy alex russell

20
00:01:20,920 --> 00:01:23,320
and if you've never gotten a cease and

21
00:01:23,320 --> 00:01:25,900
desist letter before name of product net

22
00:01:25,900 --> 00:01:27,100
windows or something with the word

23
00:01:27,100 --> 00:01:29,800
windows in it and that's what dojo

24
00:01:29,800 --> 00:01:32,290
started as essentially it was started as

25
00:01:32,290 --> 00:01:35,500
a net windows turned into a foundation

26
00:01:35,500 --> 00:01:38,710
of a couple of javascript hackers that

27
00:01:38,710 --> 00:01:41,320
had a unified vision for just JavaScript

28
00:01:41,320 --> 00:01:44,649
let's make an API let's make a dojo

29
00:01:44,649 --> 00:01:47,080
foundation where we can license this and

30
00:01:47,080 --> 00:01:49,210
then the rest is history we've come into

31
00:01:49,210 --> 00:01:53,140
we have 40 some-odd core committers that

32
00:01:53,140 --> 00:01:55,750
are full-time dedicated to to the

33
00:01:55,750 --> 00:01:58,780
betterment of dojo Dylan Chi Minh is the

34
00:01:58,780 --> 00:02:01,360
founder of sight pen and one of the

35
00:02:01,360 --> 00:02:03,759
original founders of the dojo foundation

36
00:02:03,759 --> 00:02:10,090
so the what dojo is has changed today is

37
00:02:10,090 --> 00:02:12,900
in fact dojos five year anniversary

38
00:02:12,900 --> 00:02:16,930
today was the first day that the net

39
00:02:16,930 --> 00:02:19,450
windows mailing list email went out five

40
00:02:19,450 --> 00:02:21,940
years ago so that's kind of significant

41
00:02:21,940 --> 00:02:24,610
in that wow it's been that long that's

42
00:02:24,610 --> 00:02:28,930
amazing so we became a JavaScript

43
00:02:28,930 --> 00:02:30,910
toolkit we're not anything a framework

44
00:02:30,910 --> 00:02:34,480
or anything beyond tools lightweight

45
00:02:34,480 --> 00:02:38,050
base starts at typically 26 k it can get

46
00:02:38,050 --> 00:02:42,010
down as small as 6 k and somewhere on 17

47
00:02:42,010 --> 00:02:44,530
k is another another variant for web kit

48
00:02:44,530 --> 00:02:47,650
which is i'll explain later we're

49
00:02:47,650 --> 00:02:49,030
probably going to hover right around the

50
00:02:49,030 --> 00:02:52,900
30k mark in 1.4 because of a project

51
00:02:52,900 --> 00:02:55,510
that i also do called plug d probably

52
00:02:55,510 --> 00:02:57,550
should be pronounced plugged

53
00:02:57,550 --> 00:03:00,130
but I call it plug d because I refused

54
00:03:00,130 --> 00:03:02,380
to follow conventions so it's it's just

55
00:03:02,380 --> 00:03:04,030
a use it will library it starts with

56
00:03:04,030 --> 00:03:05,680
this small base and then you get all of

57
00:03:05,680 --> 00:03:08,550
these extra components right like it's

58
00:03:08,550 --> 00:03:10,930
everyone's familiar with XKCD right

59
00:03:10,930 --> 00:03:14,020
right so dojo is to javascript like

60
00:03:14,020 --> 00:03:17,500
Python in my humble opinion um it's like

61
00:03:17,500 --> 00:03:19,930
you're flying I go you know err on the

62
00:03:19,930 --> 00:03:21,580
side of the medicine cabinet comparison

63
00:03:21,580 --> 00:03:24,010
thing but I think it's the Python but i

64
00:03:24,010 --> 00:03:26,680
think it's the dojo really because it's

65
00:03:26,680 --> 00:03:29,340
like flying if you want something you

66
00:03:29,340 --> 00:03:33,130
just require it and it goes on and on

67
00:03:33,130 --> 00:03:35,830
calendars there's a require for it and

68
00:03:35,830 --> 00:03:37,720
it pulls it in file uploads everything

69
00:03:37,720 --> 00:03:40,050
you could ever think that you wanted is

70
00:03:40,050 --> 00:03:43,420
probably there you just don't know it

71
00:03:43,420 --> 00:03:45,940
yet right it's partially the

72
00:03:45,940 --> 00:03:48,220
documentation which is my first point on

73
00:03:48,220 --> 00:03:50,860
what's wrong but it just goes on and on

74
00:03:50,860 --> 00:03:54,310
there are so many wonderful components

75
00:03:54,310 --> 00:03:57,630
in dojo that are just there so not only

76
00:03:57,630 --> 00:03:59,980
it's it's not so much that you have to

77
00:03:59,980 --> 00:04:03,040
use the the framework okay i think the

78
00:04:03,040 --> 00:04:05,440
south park right have you seen the south

79
00:04:05,440 --> 00:04:06,640
park where he's going around trying to

80
00:04:06,640 --> 00:04:08,440
do something that the simpsons hasn't

81
00:04:08,440 --> 00:04:12,489
done that's that's what dojo is really

82
00:04:12,489 --> 00:04:14,470
it's we've been around so long we have

83
00:04:14,470 --> 00:04:18,400
so much stuff that it's not necessarily

84
00:04:18,400 --> 00:04:20,169
the best way to do it but it's there and

85
00:04:20,169 --> 00:04:22,240
it's licensed it's free and you can use

86
00:04:22,240 --> 00:04:23,710
it and you can take it and you can port

87
00:04:23,710 --> 00:04:24,880
it and you can modify it and do whatever

88
00:04:24,880 --> 00:04:27,340
you want but really consider looking at

89
00:04:27,340 --> 00:04:29,440
it for nothing else other than to learn

90
00:04:29,440 --> 00:04:31,570
the javascript because there's a huge

91
00:04:31,570 --> 00:04:34,060
huge amount of talent that went into

92
00:04:34,060 --> 00:04:38,050
this product so it adds up right go back

93
00:04:38,050 --> 00:04:40,150
it adds up all of these modules that

94
00:04:40,150 --> 00:04:42,220
you're that you're doing requiring in or

95
00:04:42,220 --> 00:04:45,400
whatever our individual javascript files

96
00:04:45,400 --> 00:04:47,890
and contradictory to the the performance

97
00:04:47,890 --> 00:04:50,380
talk we saw earlier that's probably a

98
00:04:50,380 --> 00:04:51,820
bad thing because its individual files

99
00:04:51,820 --> 00:04:54,220
and its individual you know synchronous

100
00:04:54,220 --> 00:04:57,490
requests out onto the server so the dojo

101
00:04:57,490 --> 00:04:58,840
solution to that is the dojo build

102
00:04:58,840 --> 00:05:00,450
system it's like an all-in-one

103
00:05:00,450 --> 00:05:03,340
optimization kind of thing that happens

104
00:05:03,340 --> 00:05:06,789
it starts works transparently with our

105
00:05:06,789 --> 00:05:09,340
package system so when you don't require

106
00:05:09,340 --> 00:05:10,600
something all of the

107
00:05:10,600 --> 00:05:12,940
dependencies are tracked all of the all

108
00:05:12,940 --> 00:05:15,430
of the modules are pulled in in order

109
00:05:15,430 --> 00:05:17,290
dependencies within those modules are

110
00:05:17,290 --> 00:05:19,330
tracked but when you build it all turns

111
00:05:19,330 --> 00:05:21,760
it into one file you group the modules

112
00:05:21,760 --> 00:05:22,870
into layers you group them into

113
00:05:22,870 --> 00:05:25,210
optimized layers you can have like a

114
00:05:25,210 --> 00:05:27,070
first layer and then an additive layer

115
00:05:27,070 --> 00:05:28,630
that you lazy load after the initial

116
00:05:28,630 --> 00:05:31,060
page load the deferring of widget

117
00:05:31,060 --> 00:05:34,690
loading stuff like that it's you create

118
00:05:34,690 --> 00:05:37,180
these optimize things we do it to CSS as

119
00:05:37,180 --> 00:05:40,960
well within our themes are our widget UI

120
00:05:40,960 --> 00:05:43,600
library is called digit and their theme

121
00:05:43,600 --> 00:05:47,140
files are only at import calls or the

122
00:05:47,140 --> 00:05:48,610
roll-up game file is it's just a bunch

123
00:05:48,610 --> 00:05:49,930
of Adam for calls which Steve Souders

124
00:05:49,930 --> 00:05:51,670
will tell us is a horrible horrible way

125
00:05:51,670 --> 00:05:55,120
to do anything but it works because it

126
00:05:55,120 --> 00:05:57,520
works and then we import the ettes the

127
00:05:57,520 --> 00:05:59,170
ad imports just like we do the requires

128
00:05:59,170 --> 00:06:02,350
and it concatenates single layer CSS

129
00:06:02,350 --> 00:06:04,960
files after you do that we do to both of

130
00:06:04,960 --> 00:06:07,300
the JavaScript and CSS whitespace

131
00:06:07,300 --> 00:06:10,060
removal comment removal and new line

132
00:06:10,060 --> 00:06:13,600
removal just wasted cruft and then

133
00:06:13,600 --> 00:06:15,310
shrink safe as well goes through and

134
00:06:15,310 --> 00:06:18,300
does the variable up of obfuscation that

135
00:06:18,300 --> 00:06:21,400
Yui compressor basic that does as well

136
00:06:21,400 --> 00:06:22,990
they're essentially the same thing both

137
00:06:22,990 --> 00:06:25,240
of them are based on rhino both of them

138
00:06:25,240 --> 00:06:28,780
have essentially the same output as far

139
00:06:28,780 --> 00:06:31,330
as Speights on the wire and then on top

140
00:06:31,330 --> 00:06:35,800
of on top of the removal stuff we have

141
00:06:35,800 --> 00:06:37,440
stripped console and a bunch of other

142
00:06:37,440 --> 00:06:39,550
interesting options but stripped console

143
00:06:39,550 --> 00:06:41,080
is interesting because it'll actually

144
00:06:41,080 --> 00:06:43,030
just remove the console debugging

145
00:06:43,030 --> 00:06:44,980
statements that you put in so you can

146
00:06:44,980 --> 00:06:46,930
accidentally leave a console log in a

147
00:06:46,930 --> 00:06:48,100
thing and after you go to production

148
00:06:48,100 --> 00:06:50,860
it'll be removed if you if you do so

149
00:06:50,860 --> 00:06:53,740
there's varying levels so you can strip

150
00:06:53,740 --> 00:06:56,380
warn log but leave error because they're

151
00:06:56,380 --> 00:06:58,350
part of your you know part of your API

152
00:06:58,350 --> 00:07:01,630
and that's not so interesting to

153
00:07:01,630 --> 00:07:03,130
everybody because everyone's like but

154
00:07:03,130 --> 00:07:05,860
why why do you have console logs in your

155
00:07:05,860 --> 00:07:07,660
code directly you can't use that naive

156
00:07:07,660 --> 00:07:09,760
but we all know about Firebug light and

157
00:07:09,760 --> 00:07:12,250
dojo has shipped Firebug light as part

158
00:07:12,250 --> 00:07:15,580
of its package for years now so we're

159
00:07:15,580 --> 00:07:16,870
kind of spoiled in the sense that I've

160
00:07:16,870 --> 00:07:18,370
never known a time when I couldn't use

161
00:07:18,370 --> 00:07:20,919
console any of the console calls it's

162
00:07:20,919 --> 00:07:22,810
just kind of transparently there which

163
00:07:22,810 --> 00:07:24,400
is really really nice

164
00:07:24,400 --> 00:07:27,910
nice I'm really gonna try and rush

165
00:07:27,910 --> 00:07:29,830
through this because we only have you

166
00:07:29,830 --> 00:07:32,560
know 50 minutes so bear with me and if

167
00:07:32,560 --> 00:07:33,789
I'm going too fast or if I'm going too

168
00:07:33,789 --> 00:07:35,500
slow stop me and feel free to ask any

169
00:07:35,500 --> 00:07:37,120
questions along the way and just throw

170
00:07:37,120 --> 00:07:39,820
something at me get my attention basic

171
00:07:39,820 --> 00:07:42,460
api's require a download after the

172
00:07:42,460 --> 00:07:44,500
require is done you can add on load

173
00:07:44,500 --> 00:07:47,889
works just like a Dom ready function and

174
00:07:47,889 --> 00:07:50,710
then you can embed them a download

175
00:07:50,710 --> 00:07:52,360
require a download require a download

176
00:07:52,360 --> 00:07:54,750
require and it's always going to be

177
00:07:54,750 --> 00:07:57,550
accurate all the way down the chain you

178
00:07:57,550 --> 00:08:00,310
can do the required thing you can do

179
00:08:00,310 --> 00:08:02,530
your own custom code as well in the

180
00:08:02,530 --> 00:08:05,229
module system this is the first most

181
00:08:05,229 --> 00:08:07,870
complicated example and only complicated

182
00:08:07,870 --> 00:08:09,970
example is two directories down if you

183
00:08:09,970 --> 00:08:12,610
put your name space as a sibling of the

184
00:08:12,610 --> 00:08:14,800
dojo namespace it works transparently

185
00:08:14,800 --> 00:08:16,750
transparently it thinks that whatever

186
00:08:16,750 --> 00:08:18,099
your folder name is your route natan

187
00:08:18,099 --> 00:08:20,020
space otherwise you have to define where

188
00:08:20,020 --> 00:08:21,580
it is in the file system it can be an

189
00:08:21,580 --> 00:08:23,349
absolute URL it can be whatever you want

190
00:08:23,349 --> 00:08:26,410
it's very flexible um and then you just

191
00:08:26,410 --> 00:08:28,120
know to require my code and it goes off

192
00:08:28,120 --> 00:08:36,580
and fetches my my code AS ifdef Tim

193
00:08:36,580 --> 00:08:37,990
JavaScript another cool build feature

194
00:08:37,990 --> 00:08:41,860
right you can do ifdef in javascript

195
00:08:41,860 --> 00:08:43,300
it's really really cool and it's not

196
00:08:43,300 --> 00:08:45,220
really cool until you realize the kind

197
00:08:45,220 --> 00:08:47,860
of things that you can do with it um we

198
00:08:47,860 --> 00:08:51,459
are using it for WebKit right now we

199
00:08:51,459 --> 00:08:53,320
have these if thefts all over the code

200
00:08:53,320 --> 00:08:56,140
where we've eliminated the IE branch

201
00:08:56,140 --> 00:08:58,450
basically for a lot of our functions and

202
00:08:58,450 --> 00:09:01,170
we've gotten our build for WebKit mobile

203
00:09:01,170 --> 00:09:04,330
almost under the cash of limits so we've

204
00:09:04,330 --> 00:09:06,130
got a little bit a little bit to work

205
00:09:06,130 --> 00:09:07,959
out there but it's it's almost under the

206
00:09:07,959 --> 00:09:10,720
cacheable limit its i believe it's 17 k

207
00:09:10,720 --> 00:09:14,350
compressed so it's like 39 something

208
00:09:14,350 --> 00:09:17,110
before and it occurred to me earlier

209
00:09:17,110 --> 00:09:18,130
today i could probably get rid of that

210
00:09:18,130 --> 00:09:21,310
with with animations CSS transition

211
00:09:21,310 --> 00:09:23,350
animations rewriting our api is in that

212
00:09:23,350 --> 00:09:25,779
getting it down to something smaller but

213
00:09:25,779 --> 00:09:28,480
i haven't done that yet so these are a

214
00:09:28,480 --> 00:09:31,779
couple of special builds the stubs dojo

215
00:09:31,779 --> 00:09:34,990
is really really cool it's a 6k dojo

216
00:09:34,990 --> 00:09:37,990
that has all of the api's in it

217
00:09:37,990 --> 00:09:40,209
but it's only 6k and then if you

218
00:09:40,209 --> 00:09:41,620
actually call the api goes out and

219
00:09:41,620 --> 00:09:43,180
fetches it and pulls it in and then you

220
00:09:43,180 --> 00:09:45,730
can use it it's not for performance

221
00:09:45,730 --> 00:09:47,380
reasons it's for size reasons you can

222
00:09:47,380 --> 00:09:49,930
get it this gets under the the 6k or the

223
00:09:49,930 --> 00:09:52,570
25k limit on the on the iPhone but it's

224
00:09:52,570 --> 00:09:55,330
definitely not performance but you can

225
00:09:55,330 --> 00:09:56,649
go the other way with it to base plus

226
00:09:56,649 --> 00:10:00,010
plus you can roll extra code into dojo

227
00:10:00,010 --> 00:10:02,470
j/s so your solution is a single file we

228
00:10:02,470 --> 00:10:04,120
typically recommend you don't mess with

229
00:10:04,120 --> 00:10:06,310
da jjs and leave it as a 26 and then do

230
00:10:06,310 --> 00:10:08,290
your one layer on top of it but in stuff

231
00:10:08,290 --> 00:10:10,300
like air or whatever you can really just

232
00:10:10,300 --> 00:10:12,610
you know deploy a single javascript file

233
00:10:12,610 --> 00:10:13,839
with your library in your production

234
00:10:13,839 --> 00:10:15,760
code in it and ship it and it's done

235
00:10:15,760 --> 00:10:18,279
which is awesome plug d is another

236
00:10:18,279 --> 00:10:22,420
special build where I use I use the

237
00:10:22,420 --> 00:10:25,390
ifdef stuff to conflict there's a

238
00:10:25,390 --> 00:10:27,580
there's a I'll get into it a little bit

239
00:10:27,580 --> 00:10:30,940
later but it automatically runs conflict

240
00:10:30,940 --> 00:10:33,370
or dojo conflict scope burning as well

241
00:10:33,370 --> 00:10:35,080
which is kind of interesting it's it's

242
00:10:35,080 --> 00:10:37,630
our solution to running multiple dojos

243
00:10:37,630 --> 00:10:38,950
in the same page which we've been able

244
00:10:38,950 --> 00:10:42,820
to do since 1.1 we're currently at one

245
00:10:42,820 --> 00:10:44,589
point three so it's been about a year

246
00:10:44,589 --> 00:10:46,839
since we've been doing this but the

247
00:10:46,839 --> 00:10:49,750
scope burning you can remap the dojo

248
00:10:49,750 --> 00:10:52,779
namespace on the fly or on page load to

249
00:10:52,779 --> 00:10:54,339
something else you can be like mojo or

250
00:10:54,339 --> 00:10:56,709
whatever you want to do based on just

251
00:10:56,709 --> 00:10:58,750
making a build and then you just access

252
00:10:58,750 --> 00:11:01,390
the api's that way and it works

253
00:11:01,390 --> 00:11:05,230
transparently um so I used scope burning

254
00:11:05,230 --> 00:11:06,399
to do something really really cool

255
00:11:06,399 --> 00:11:10,570
called mujo and it's kind of funny it

256
00:11:10,570 --> 00:11:12,820
doesn't look anything like dojo it was

257
00:11:12,820 --> 00:11:15,760
me working with the the mootools team

258
00:11:15,760 --> 00:11:19,990
joking around one day and this is this

259
00:11:19,990 --> 00:11:22,540
is dojo code this is a automatically all

260
00:11:22,540 --> 00:11:24,070
you do is have to load there's a link I

261
00:11:24,070 --> 00:11:26,850
don't know if you can really read it

262
00:11:26,850 --> 00:11:29,910
it's on my my sandbox link that was

263
00:11:29,910 --> 00:11:34,779
originally on the thing but it's dojo

264
00:11:34,779 --> 00:11:37,290
places the real API so this is using a

265
00:11:37,290 --> 00:11:41,470
special ifdef to allow a function to be

266
00:11:41,470 --> 00:11:43,240
called when you load the page to export

267
00:11:43,240 --> 00:11:44,829
all of the dojo namespaces into the

268
00:11:44,829 --> 00:11:46,750
window object which is not something

269
00:11:46,750 --> 00:11:49,209
dojo would do but it's something dojo

270
00:11:49,209 --> 00:11:49,720
could do

271
00:11:49,720 --> 00:11:53,439
so it actually it speeds it up

272
00:11:53,439 --> 00:11:56,529
considerably um things on the window and

273
00:11:56,529 --> 00:11:58,480
ie are probably the fastest way to

274
00:11:58,480 --> 00:12:00,279
access them it turns out and I'll get

275
00:12:00,279 --> 00:12:02,589
into that in a second um and that's what

276
00:12:02,589 --> 00:12:06,490
the the ifdef stuff looks like exclude

277
00:12:06,490 --> 00:12:08,529
start and then if you pass an auto

278
00:12:08,529 --> 00:12:10,269
conflict into your profile that

279
00:12:10,269 --> 00:12:12,759
everything in between the exclude start

280
00:12:12,759 --> 00:12:16,079
and stop based on the tag is removed so

281
00:12:16,079 --> 00:12:18,899
normally you have this conditional

282
00:12:18,899 --> 00:12:20,980
conditional thing but you know if you're

283
00:12:20,980 --> 00:12:22,360
if you're building it especially and you

284
00:12:22,360 --> 00:12:23,800
know what you're doing then it does it

285
00:12:23,800 --> 00:12:25,089
for you automatically and then dojo

286
00:12:25,089 --> 00:12:29,560
export NS is a plug d plugin which maps

287
00:12:29,560 --> 00:12:32,230
from one to the other dojo global is the

288
00:12:32,230 --> 00:12:34,750
window but we use dojo global so we can

289
00:12:34,750 --> 00:12:37,899
switch it in different environments um

290
00:12:37,899 --> 00:12:41,560
and mujo introduced something very very

291
00:12:41,560 --> 00:12:46,149
interesting uh that I i put mujo in with

292
00:12:46,149 --> 00:12:49,240
the dojo speed test and mujo beats dojo

293
00:12:49,240 --> 00:12:52,209
for whatever reason it's it's it's

294
00:12:52,209 --> 00:12:55,240
faster than then dojo which is

295
00:12:55,240 --> 00:12:57,790
incredible um but it is and it's the

296
00:12:57,790 --> 00:12:59,319
same reason i had i had plugged in here

297
00:12:59,319 --> 00:13:01,750
as well just to test because plug d does

298
00:13:01,750 --> 00:13:05,050
a little bit of magic to dojo that even

299
00:13:05,050 --> 00:13:06,759
dojo wouldn't necessarily agree with but

300
00:13:06,759 --> 00:13:09,759
um i like it and i use it so i've done

301
00:13:09,759 --> 00:13:11,740
it and i'm the project lead of dojo and

302
00:13:11,740 --> 00:13:13,420
i'm working on getting it back into its

303
00:13:13,420 --> 00:13:16,540
a we've got we've got a very very

304
00:13:16,540 --> 00:13:18,100
serious dedication to backwards

305
00:13:18,100 --> 00:13:20,649
compatibility that we just can't break

306
00:13:20,649 --> 00:13:24,220
so especially in the dot releases in 1.4

307
00:13:24,220 --> 00:13:25,720
we'll probably see a lot of the plug the

308
00:13:25,720 --> 00:13:31,129
api's but not anything that will break

309
00:13:31,139 --> 00:13:34,720
so put plug be in here and it was faster

310
00:13:34,720 --> 00:13:37,360
that was interesting so we put mujo in

311
00:13:37,360 --> 00:13:40,000
here it was even faster but it totally

312
00:13:40,000 --> 00:13:43,480
comes down to the object association

313
00:13:43,480 --> 00:13:45,370
look up which i'll be talking about more

314
00:13:45,370 --> 00:13:47,709
not not today because it's brand new

315
00:13:47,709 --> 00:13:49,059
information that we've just discovered

316
00:13:49,059 --> 00:13:52,019
but internet explorer jscript is

317
00:13:52,019 --> 00:13:55,360
considerably considerably slowed in its

318
00:13:55,360 --> 00:13:57,430
in its object look up stuff that you

319
00:13:57,430 --> 00:13:59,529
wouldn't expect but if you've never seen

320
00:13:59,529 --> 00:14:01,809
task speed this is what kind of pointed

321
00:14:01,809 --> 00:14:03,550
it out and john touched on

322
00:14:03,550 --> 00:14:06,519
on yesterday a little bit about what is

323
00:14:06,519 --> 00:14:09,040
what is wrong with using browser browser

324
00:14:09,040 --> 00:14:11,620
numbers um and it is it's seriously

325
00:14:11,620 --> 00:14:16,720
flawed and but tax speed is it is flawed

326
00:14:16,720 --> 00:14:19,089
right but the point is it's fair before

327
00:14:19,089 --> 00:14:23,110
right I took a lot of a lot of effort

328
00:14:23,110 --> 00:14:26,230
into getting each of the each of the

329
00:14:26,230 --> 00:14:28,930
library authors for the tests in task

330
00:14:28,930 --> 00:14:30,940
speed were written by the the leads of

331
00:14:30,940 --> 00:14:33,310
the associated library just to avoid any

332
00:14:33,310 --> 00:14:36,100
any potential but you know bike shedding

333
00:14:36,100 --> 00:14:37,899
or arguing about it it was never

334
00:14:37,899 --> 00:14:40,570
intended to be like a definitive kind of

335
00:14:40,570 --> 00:14:42,220
selector sweet I was just interested in

336
00:14:42,220 --> 00:14:44,760
the 1.3 api's and started testing them

337
00:14:44,760 --> 00:14:47,649
it was fair before right which is great

338
00:14:47,649 --> 00:14:51,250
because Alex leaked it he talked about

339
00:14:51,250 --> 00:14:52,779
it when we were least 1.3 and I was

340
00:14:52,779 --> 00:14:54,190
pissed and I was like no nobody's

341
00:14:54,190 --> 00:14:55,450
supposed to know about this but a little

342
00:14:55,450 --> 00:14:58,450
blah but he did and I'm glad I did

343
00:14:58,450 --> 00:15:01,209
because I was saved because nobody could

344
00:15:01,209 --> 00:15:04,149
like mom me for doing it but it's an

345
00:15:04,149 --> 00:15:07,390
interesting start it it runs the test it

346
00:15:07,390 --> 00:15:08,589
runs the test that runs the test and

347
00:15:08,589 --> 00:15:11,470
then it submits them back to to it back

348
00:15:11,470 --> 00:15:14,980
in for charts and you can go to Dante

349
00:15:14,980 --> 00:15:17,470
dojo toolkit org test speed and find the

350
00:15:17,470 --> 00:15:20,260
link to the charts which are charts by

351
00:15:20,260 --> 00:15:24,640
dojo ironically in our graphics library

352
00:15:24,640 --> 00:15:27,970
charting thing but the point is it's

353
00:15:27,970 --> 00:15:30,010
just JavaScript like we have all of like

354
00:15:30,010 --> 00:15:32,200
all of these things that that I just did

355
00:15:32,200 --> 00:15:35,170
at the MU Joe there's a jojo version in

356
00:15:35,170 --> 00:15:37,510
the mucho which exports dojo to the

357
00:15:37,510 --> 00:15:39,940
dollar sign or the dojo query to the

358
00:15:39,940 --> 00:15:41,860
dollar sign but it's just JavaScript

359
00:15:41,860 --> 00:15:43,779
it's a very flexible beautiful language

360
00:15:43,779 --> 00:15:46,360
and it's it's a lot of fun the earlier I

361
00:15:46,360 --> 00:15:47,890
was talking about the the type coercion

362
00:15:47,890 --> 00:15:49,420
and I was like oh I don't know if I like

363
00:15:49,420 --> 00:15:51,790
that so much like I like the fact that

364
00:15:51,790 --> 00:15:54,790
it's is flexible so but we have

365
00:15:54,790 --> 00:15:56,770
JavaScript and things JavaScript should

366
00:15:56,770 --> 00:16:00,070
have are the basics right there's like a

367
00:16:00,070 --> 00:16:03,550
lot of core api's and dojo that are just

368
00:16:03,550 --> 00:16:05,440
there because the originals don't work

369
00:16:05,440 --> 00:16:09,790
index of right find an it erased index

370
00:16:09,790 --> 00:16:11,620
of first index of that kind of stuff it

371
00:16:11,620 --> 00:16:14,040
doesn't work in IE so we made we made a

372
00:16:14,040 --> 00:16:16,480
function to do so for each map and

373
00:16:16,480 --> 00:16:17,410
filter no

374
00:16:17,410 --> 00:16:19,620
rayners right everyone should have those

375
00:16:19,620 --> 00:16:23,110
hitch and partial are really cool but it

376
00:16:23,110 --> 00:16:25,860
looks like we're going to get bind in

377
00:16:25,860 --> 00:16:29,319
whenever the browser's adopted which is

378
00:16:29,319 --> 00:16:32,259
great but it's kind of like the pull the

379
00:16:32,259 --> 00:16:34,209
pull the leg out from under you the good

380
00:16:34,209 --> 00:16:36,819
grief from from earlier is yeah we're

381
00:16:36,819 --> 00:16:38,079
going to get bind but really not a

382
00:16:38,079 --> 00:16:39,819
browser is going to implement it until

383
00:16:39,819 --> 00:16:43,329
you know 2015 and then we're stuck with

384
00:16:43,329 --> 00:16:44,769
it but we've got the the hitch in the

385
00:16:44,769 --> 00:16:47,620
partial now that work safely namespace

386
00:16:47,620 --> 00:16:49,990
to delegate Mixon extend all these basic

387
00:16:49,990 --> 00:16:51,310
things everything in javascript is an

388
00:16:51,310 --> 00:16:53,199
object you should be able to have object

389
00:16:53,199 --> 00:16:56,560
manipulation tools so dojo has a does

390
00:16:56,560 --> 00:16:59,529
the design philosophy around it is it's

391
00:16:59,529 --> 00:17:00,970
everything stubbed off of the dojo

392
00:17:00,970 --> 00:17:04,000
namespace and that's that's not so not

393
00:17:04,000 --> 00:17:06,730
so desirable to some people so but

394
00:17:06,730 --> 00:17:08,860
that's on our defense we're designed to

395
00:17:08,860 --> 00:17:10,870
be in hostile environments and be

396
00:17:10,870 --> 00:17:13,000
consumed and and share and play nice

397
00:17:13,000 --> 00:17:15,400
with other people so we don't use any

398
00:17:15,400 --> 00:17:17,049
names or we use namespaces don't use any

399
00:17:17,049 --> 00:17:19,809
Global's and then on the offensive side

400
00:17:19,809 --> 00:17:22,559
where we have forward-thinking api's so

401
00:17:22,559 --> 00:17:25,480
so we're deferring to the native

402
00:17:25,480 --> 00:17:28,080
implementations as best we can that's

403
00:17:28,080 --> 00:17:30,880
minus the slightly longer reg up version

404
00:17:30,880 --> 00:17:32,950
comment that's dojos inflammation

405
00:17:32,950 --> 00:17:36,490
implementation of a trim API it's pretty

406
00:17:36,490 --> 00:17:39,340
basic d on all our made fun of me

407
00:17:39,340 --> 00:17:41,830
because not not me specifically but we

408
00:17:41,830 --> 00:17:44,230
also have a dojo string trim which is

409
00:17:44,230 --> 00:17:47,409
the faster much larger version of it so

410
00:17:47,409 --> 00:17:50,260
if size isn't the the consideration then

411
00:17:50,260 --> 00:17:53,320
and then of course the the array methods

412
00:17:53,320 --> 00:17:55,539
that were all familiar with for each map

413
00:17:55,539 --> 00:17:57,970
filter Mozilla was kind enough to give

414
00:17:57,970 --> 00:18:01,390
these to us nobody else really has yet

415
00:18:01,390 --> 00:18:03,970
WebKit I guess is good and then chrome

416
00:18:03,970 --> 00:18:05,799
probably has them and I've not tried so

417
00:18:05,799 --> 00:18:07,539
I'm just used to using the the dojo for

418
00:18:07,539 --> 00:18:10,210
each and it's there's intentionally no

419
00:18:10,210 --> 00:18:14,260
magic there's in it it's straight up for

420
00:18:14,260 --> 00:18:17,409
an array it doesn't do for in lookups

421
00:18:17,409 --> 00:18:19,059
because that's just an extra code path

422
00:18:19,059 --> 00:18:20,770
in it you have to detect and really why

423
00:18:20,770 --> 00:18:22,419
not just implement the the

424
00:18:22,419 --> 00:18:24,490
forward-looking api's at some point we

425
00:18:24,490 --> 00:18:27,549
can replace for each with some kind of

426
00:18:27,549 --> 00:18:29,330
sniff to the

427
00:18:29,330 --> 00:18:32,320
native api's same with map and filter

428
00:18:32,320 --> 00:18:35,810
because of these design patterns we are

429
00:18:35,810 --> 00:18:37,940
able to do really really clever things

430
00:18:37,940 --> 00:18:42,130
and fun things so some people don't like

431
00:18:42,130 --> 00:18:44,690
extending native prototypes some people

432
00:18:44,690 --> 00:18:48,410
do some people don't I don't myself but

433
00:18:48,410 --> 00:18:50,690
I do sometimes I actually do it

434
00:18:50,690 --> 00:18:53,120
sometimes in in pragmatic cases where I

435
00:18:53,120 --> 00:18:54,560
know I'm not going to be consumed and I

436
00:18:54,560 --> 00:18:57,920
know I'm not going to be used with other

437
00:18:57,920 --> 00:19:02,060
libraries so I wrote a function called

438
00:19:02,060 --> 00:19:05,230
dojo clobber which safely extends

439
00:19:05,230 --> 00:19:08,450
prototypes like that it's the opposite

440
00:19:08,450 --> 00:19:10,940
of extend dojo extent which is cool but

441
00:19:10,940 --> 00:19:13,250
because of the the patterns that we that

442
00:19:13,250 --> 00:19:15,800
we already have the map call is really

443
00:19:15,800 --> 00:19:18,080
just the same as it would be it's just

444
00:19:18,080 --> 00:19:21,650
taking off the the actual object so the

445
00:19:21,650 --> 00:19:23,420
pattern there is that all of these

446
00:19:23,420 --> 00:19:24,740
things because of the forward-looking

447
00:19:24,740 --> 00:19:27,320
ness of them and then returning this

448
00:19:27,320 --> 00:19:29,840
just you know allows you to to chain off

449
00:19:29,840 --> 00:19:32,420
of the the new array or whatever and

450
00:19:32,420 --> 00:19:34,640
then so the the native thing in action

451
00:19:34,640 --> 00:19:36,470
there you go you've got an array you map

452
00:19:36,470 --> 00:19:38,090
it down and then you go through and for

453
00:19:38,090 --> 00:19:40,400
each it and it's all it's all based on

454
00:19:40,400 --> 00:19:43,460
the defined specs that already exist and

455
00:19:43,460 --> 00:19:46,640
that's actually a project I kind of

456
00:19:46,640 --> 00:19:49,100
started it's not a full project but it's

457
00:19:49,100 --> 00:19:51,200
on google code it's called dojo type I

458
00:19:51,200 --> 00:19:53,420
thought it was a pretty clever name if

459
00:19:53,420 --> 00:19:56,450
if you've never had any experience with

460
00:19:56,450 --> 00:20:00,650
the prototype JavaScript library that's

461
00:20:00,650 --> 00:20:05,830
what it is so this is a quick glance at

462
00:20:05,830 --> 00:20:09,590
the code style in dojo so you've got the

463
00:20:09,590 --> 00:20:12,560
the regular you know called the dojo and

464
00:20:12,560 --> 00:20:14,000
then we've seen you can you know replace

465
00:20:14,000 --> 00:20:17,300
it with nothing but it it all these are

466
00:20:17,300 --> 00:20:18,920
all the patterns that exist in dojo and

467
00:20:18,920 --> 00:20:22,190
I'm going to explain them but basic

468
00:20:22,190 --> 00:20:25,040
stuff right like connect is a custom

469
00:20:25,040 --> 00:20:28,880
events object events Dom events whatever

470
00:20:28,880 --> 00:20:32,780
you want to do the object sync stuff

471
00:20:32,780 --> 00:20:35,450
there is transparently going through the

472
00:20:35,450 --> 00:20:37,370
the hitch in the partial which is a

473
00:20:37,370 --> 00:20:41,960
kareem basically or Reese coping XA

474
00:20:41,960 --> 00:20:44,080
char functions animation functions

475
00:20:44,080 --> 00:20:47,270
regular down style functions placement

476
00:20:47,270 --> 00:20:49,610
functions all that kind of stuff CSS

477
00:20:49,610 --> 00:20:52,010
selectors everybody has them blah blah

478
00:20:52,010 --> 00:20:54,250
blah blah blah blah blah blah right

479
00:20:54,250 --> 00:20:57,919
nodelist prototype is the the instance

480
00:20:57,919 --> 00:21:00,740
that has returned from a from a dojo

481
00:21:00,740 --> 00:21:04,520
query call and extending nodelist

482
00:21:04,520 --> 00:21:06,529
prototype is writing a plug-in so if you

483
00:21:06,529 --> 00:21:08,899
put a function on nodelist prototype you

484
00:21:08,899 --> 00:21:10,370
are welcome to that's what it's there

485
00:21:10,370 --> 00:21:13,190
for and that's where you put your

486
00:21:13,190 --> 00:21:16,130
plugins into dojo so kind of getting

487
00:21:16,130 --> 00:21:19,690
into the basic patterns that dojo uses

488
00:21:19,690 --> 00:21:22,010
one of my favorites is the magic

489
00:21:22,010 --> 00:21:24,350
arguments it's it's a very flexible

490
00:21:24,350 --> 00:21:26,539
thing I never ever want to see ordered

491
00:21:26,539 --> 00:21:29,990
arguments anywhere ever again on a

492
00:21:29,990 --> 00:21:32,539
function call because it's entirely too

493
00:21:32,539 --> 00:21:35,840
difficult to change by using a magic

494
00:21:35,840 --> 00:21:39,289
argument and defining defaults and then

495
00:21:39,289 --> 00:21:41,240
mixing in the argument over the defaults

496
00:21:41,240 --> 00:21:44,510
allows you a very very clean kind of

497
00:21:44,510 --> 00:21:46,789
short way so this this will accept no

498
00:21:46,789 --> 00:21:51,590
arguments at all so if you mix in a prop

499
00:21:51,590 --> 00:21:56,299
a new prop you get bar so it's it's a

500
00:21:56,299 --> 00:22:00,890
very flexible way to to have great great

501
00:22:00,890 --> 00:22:03,590
api's right that you can add to and you

502
00:22:03,590 --> 00:22:05,870
can remove them without having to worry

503
00:22:05,870 --> 00:22:07,970
so much about where they are

504
00:22:07,970 --> 00:22:09,740
positionally positional arguments are

505
00:22:09,740 --> 00:22:14,510
mine mind-numbing and also mixin mixin

506
00:22:14,510 --> 00:22:16,270
is relatively interesting in the sense

507
00:22:16,270 --> 00:22:20,330
there we go that you can build up these

508
00:22:20,330 --> 00:22:23,360
arguments so you don't necessarily have

509
00:22:23,360 --> 00:22:25,460
to pass the object directly or whatever

510
00:22:25,460 --> 00:22:27,200
you can you know here's my my route

511
00:22:27,200 --> 00:22:29,720
object I'm gonna go along the code path

512
00:22:29,720 --> 00:22:31,520
mix in one more object go along the code

513
00:22:31,520 --> 00:22:33,320
path mix in one more object and then at

514
00:22:33,320 --> 00:22:35,480
the end of it all I'm going to just

515
00:22:35,480 --> 00:22:37,490
execute the function with with the the

516
00:22:37,490 --> 00:22:39,640
final object that I've generated so it's

517
00:22:39,640 --> 00:22:42,289
it allows you a lot more flexibility

518
00:22:42,289 --> 00:22:44,240
than having to repeat that function call

519
00:22:44,240 --> 00:22:46,460
in different places does anyone use Java

520
00:22:46,460 --> 00:22:51,200
in here like okay so yeah exactly I had

521
00:22:51,200 --> 00:22:53,480
a horrible experience my first

522
00:22:53,480 --> 00:22:55,700
experience with Java trying to

523
00:22:55,700 --> 00:22:57,710
make a function that accepted a

524
00:22:57,710 --> 00:22:59,510
different a different number of

525
00:22:59,510 --> 00:23:04,130
parameters yeah so yeah you had to write

526
00:23:04,130 --> 00:23:05,690
a whole new function for it like and it

527
00:23:05,690 --> 00:23:07,179
was the same name or whatever and it's

528
00:23:07,179 --> 00:23:10,279
it's amazing but you don't even need to

529
00:23:10,279 --> 00:23:12,710
think about that stuff it's just passed

530
00:23:12,710 --> 00:23:17,289
around the object so the Dom arguments

531
00:23:17,289 --> 00:23:20,779
pattern that I that we have see

532
00:23:20,779 --> 00:23:22,730
everyone's familiar with get element by

533
00:23:22,730 --> 00:23:25,820
ID right that's the probably it's broken

534
00:23:25,820 --> 00:23:29,269
in internet explorer by the way so in

535
00:23:29,269 --> 00:23:31,730
the cases where it would work right

536
00:23:31,730 --> 00:23:33,830
that's that's a valid piece of code set

537
00:23:33,830 --> 00:23:37,309
the style the width to 200 so why why

538
00:23:37,309 --> 00:23:39,950
not make a utility function to fix by ID

539
00:23:39,950 --> 00:23:42,889
we have dojo by D right and it accepts a

540
00:23:42,889 --> 00:23:47,210
string so N equals dou job ID and then

541
00:23:47,210 --> 00:23:50,289
the the pattern that allows us this is

542
00:23:50,289 --> 00:23:53,659
we can pass a node reference to it or we

543
00:23:53,659 --> 00:23:57,590
can pass the string ID to it directly so

544
00:23:57,590 --> 00:23:59,360
we can skip the by ID call but if we

545
00:23:59,360 --> 00:24:00,950
already have a node reference to it why

546
00:24:00,950 --> 00:24:03,460
not just keep it around and and reuse it

547
00:24:03,460 --> 00:24:05,899
so we're allowed and then of course the

548
00:24:05,899 --> 00:24:10,130
dojo query way so our style API all the

549
00:24:10,130 --> 00:24:12,230
Dom api's do this with the the first one

550
00:24:12,230 --> 00:24:14,210
being a node string stringer Dom node

551
00:24:14,210 --> 00:24:16,370
right and then whatever the ordered

552
00:24:16,370 --> 00:24:18,860
arguments are so property property and

553
00:24:18,860 --> 00:24:21,769
then in the query case it's just

554
00:24:21,769 --> 00:24:24,080
assuming no notes bulk operations so

555
00:24:24,080 --> 00:24:25,490
your note is assume for you and we

556
00:24:25,490 --> 00:24:26,630
iterate over it and call the same

557
00:24:26,630 --> 00:24:30,440
function n times so pretty cool stuff I

558
00:24:30,440 --> 00:24:34,100
went the wrong way so that's that's how

559
00:24:34,100 --> 00:24:36,909
we fix the DOM and this is how we do it

560
00:24:36,909 --> 00:24:40,639
it's basically the same as your last

561
00:24:40,639 --> 00:24:42,440
example except our node is now just

562
00:24:42,440 --> 00:24:44,809
being filtered through by ID not a big

563
00:24:44,809 --> 00:24:47,330
deal so that one line of code gives us

564
00:24:47,330 --> 00:24:50,000
the flexibility to repeat that pattern

565
00:24:50,000 --> 00:24:54,169
throughout everywhere no ref and then of

566
00:24:54,169 --> 00:24:58,139
course the props that get mixed in there

567
00:24:58,149 --> 00:25:01,779
ambiguous constructors dojo has a

568
00:25:01,779 --> 00:25:04,340
object-oriented inheritance stuff but on

569
00:25:04,340 --> 00:25:07,370
a basic level you don't really need it

570
00:25:07,370 --> 00:25:09,220
this is just plain old

571
00:25:09,220 --> 00:25:12,250
a functional prototype whatever so

572
00:25:12,250 --> 00:25:14,140
something is something and then we mix

573
00:25:14,140 --> 00:25:17,380
in this the Magic argh that we were past

574
00:25:17,380 --> 00:25:20,710
so we're mixing into ourselves anything

575
00:25:20,710 --> 00:25:24,130
that was that is a member function right

576
00:25:24,130 --> 00:25:28,900
so we can well the extent is extending

577
00:25:28,900 --> 00:25:30,669
the prototype and that's that's the

578
00:25:30,669 --> 00:25:32,590
basic pattern for for making class

579
00:25:32,590 --> 00:25:35,320
objects but by passing in this optex and

580
00:25:35,320 --> 00:25:38,190
this mix in or whatever our opt is then

581
00:25:38,190 --> 00:25:40,870
overloaded to be X we can do this with

582
00:25:40,870 --> 00:25:43,120
functions we can do this with anything

583
00:25:43,120 --> 00:25:45,100
that can be passed in just because we're

584
00:25:45,100 --> 00:25:47,320
kind of haphazardly mixing into this it

585
00:25:47,320 --> 00:25:49,630
has side effects if you start overriding

586
00:25:49,630 --> 00:25:51,159
like private methods and stuff but you

587
00:25:51,159 --> 00:25:52,710
should know better and you should be

588
00:25:52,710 --> 00:25:57,010
smart enough to know what to do you can

589
00:25:57,010 --> 00:25:58,390
always call the inherited function as

590
00:25:58,390 --> 00:26:00,669
well not not in this example but in this

591
00:26:00,669 --> 00:26:05,320
example you can dojo declare is the

592
00:26:05,320 --> 00:26:08,080
class create whatever it is that that

593
00:26:08,080 --> 00:26:10,720
you that you do so create some things

594
00:26:10,720 --> 00:26:12,460
it's the same exact example is before

595
00:26:12,460 --> 00:26:16,450
inherit from nothing no give it some an

596
00:26:16,450 --> 00:26:18,340
option and then you just list out in

597
00:26:18,340 --> 00:26:20,710
this object hash all of the all the

598
00:26:20,710 --> 00:26:21,880
different member things for this class

599
00:26:21,880 --> 00:26:24,549
um so you make new something with

600
00:26:24,549 --> 00:26:26,549
nothing or new something with an ex and

601
00:26:26,549 --> 00:26:31,659
it's the same exact thing so by doing

602
00:26:31,659 --> 00:26:35,230
this by using allowing these ambiguous

603
00:26:35,230 --> 00:26:38,500
constructors to just mix in haphazardly

604
00:26:38,500 --> 00:26:44,110
the dojo parser is a kind of thing for

605
00:26:44,110 --> 00:26:46,440
these things the dojo parser will turn

606
00:26:46,440 --> 00:26:49,710
Dom nodes decorated with a dojo type

607
00:26:49,710 --> 00:26:52,030
attribute which a lot of people complain

608
00:26:52,030 --> 00:26:55,140
about but it's that's not the discussion

609
00:26:55,140 --> 00:26:58,990
it will it will instantiate this into a

610
00:26:58,990 --> 00:27:01,539
new some class thing and then it will

611
00:27:01,539 --> 00:27:03,429
use these properties so it's the exact

612
00:27:03,429 --> 00:27:06,610
same same exact these two things are the

613
00:27:06,610 --> 00:27:11,169
exact same everything or you can do it

614
00:27:11,169 --> 00:27:12,940
from no Dolph no Dom node at all and in

615
00:27:12,940 --> 00:27:15,070
the widget case at least a dumb node

616
00:27:15,070 --> 00:27:16,330
will be created for you but you have to

617
00:27:16,330 --> 00:27:18,760
place it in the Dom yourself so you

618
00:27:18,760 --> 00:27:21,190
really don't have to do any kind of div

619
00:27:21,190 --> 00:27:22,630
stuff but this is very very

620
00:27:22,630 --> 00:27:25,870
pragmatic it's a very easy way to just

621
00:27:25,870 --> 00:27:30,280
do things especially in prototyping so

622
00:27:30,280 --> 00:27:32,950
and then the next wonderful wonderful

623
00:27:32,950 --> 00:27:35,500
thing and this is partial is the cousin

624
00:27:35,500 --> 00:27:38,350
of hitch but functional JavaScript don't

625
00:27:38,350 --> 00:27:40,720
repeat yourself right it's a kind of a

626
00:27:40,720 --> 00:27:43,210
fundamental thing so you have your

627
00:27:43,210 --> 00:27:44,950
function called my turn it and it

628
00:27:44,950 --> 00:27:47,380
accepts a direction parameter and if it

629
00:27:47,380 --> 00:27:49,810
gets past two one go left whatever or

630
00:27:49,810 --> 00:27:52,990
one go right to the left so you have the

631
00:27:52,990 --> 00:27:55,870
one instead of having a my turn left my

632
00:27:55,870 --> 00:27:57,160
turn right you just have a turnip

633
00:27:57,160 --> 00:27:58,990
function and then you can wherever you

634
00:27:58,990 --> 00:28:01,570
are partial create a partial function

635
00:28:01,570 --> 00:28:04,390
it's like currying this is actually bind

636
00:28:04,390 --> 00:28:10,540
in prototype and in New acma so next is

637
00:28:10,540 --> 00:28:13,330
a function when called it will call my

638
00:28:13,330 --> 00:28:16,780
turn it passing it one and previous will

639
00:28:16,780 --> 00:28:18,460
call my turn it passing a negative one

640
00:28:18,460 --> 00:28:20,980
and then later on we can just reference

641
00:28:20,980 --> 00:28:23,590
the function when we click on the next

642
00:28:23,590 --> 00:28:25,720
button call the next and we can

643
00:28:25,720 --> 00:28:29,860
reference that next variable anywhere

644
00:28:29,860 --> 00:28:33,480
within that scope that we created it so

645
00:28:33,480 --> 00:28:36,670
same duel service functions this is a

646
00:28:36,670 --> 00:28:40,870
great pattern and and this is actually I

647
00:28:40,870 --> 00:28:42,550
didn't really touch on it back it back

648
00:28:42,550 --> 00:28:46,060
at task feed and tasked feed was so

649
00:28:46,060 --> 00:28:49,630
flawed but it did show us one thing or

650
00:28:49,630 --> 00:28:51,340
two things two very very important

651
00:28:51,340 --> 00:28:53,710
things a none of us are optimized for

652
00:28:53,710 --> 00:28:56,020
Internet Explorer every everyone

653
00:28:56,020 --> 00:28:59,230
Internet Explorer's is slow that's you

654
00:28:59,230 --> 00:29:01,300
know unquestionable but it's it's more

655
00:29:01,300 --> 00:29:04,900
painful than we're anticipating and it's

656
00:29:04,900 --> 00:29:08,290
we should do more about that it's still

657
00:29:08,290 --> 00:29:10,360
the majority of the browser market so we

658
00:29:10,360 --> 00:29:12,850
need to stop being like evil evil

659
00:29:12,850 --> 00:29:14,530
hackers and all excited about how fast

660
00:29:14,530 --> 00:29:17,350
this runs in chrome and WebKit for beta

661
00:29:17,350 --> 00:29:20,560
you know safari for beta right but and

662
00:29:20,560 --> 00:29:22,510
focus on the people that are actually

663
00:29:22,510 --> 00:29:25,600
using our products right so but the

664
00:29:25,600 --> 00:29:26,920
other thing that it showed us is that

665
00:29:26,920 --> 00:29:30,940
dojo is fast for whatever reason it's

666
00:29:30,940 --> 00:29:33,940
fast enough it's it's whatever it's it

667
00:29:33,940 --> 00:29:35,750
the argument is is

668
00:29:35,750 --> 00:29:39,800
they're so so dual service functions you

669
00:29:39,800 --> 00:29:41,090
write a function that works on the

670
00:29:41,090 --> 00:29:43,640
pattern of node args it accepts the

671
00:29:43,640 --> 00:29:47,210
string or ID string or node reference

672
00:29:47,210 --> 00:29:48,710
and then it does something and it does

673
00:29:48,710 --> 00:29:50,750
it as fast as it possibly can on one

674
00:29:50,750 --> 00:29:53,000
node it does it optimized for that and

675
00:29:53,000 --> 00:29:55,610
then it's just a matter of adapting it

676
00:29:55,610 --> 00:29:58,460
as a for each for query to have this

677
00:29:58,460 --> 00:30:01,130
this low-level API that you can just do

678
00:30:01,130 --> 00:30:05,920
and then there's the bulk operation so

679
00:30:05,920 --> 00:30:09,350
there's a there's a couple adapt as in

680
00:30:09,350 --> 00:30:11,800
this series for dojo node list there's

681
00:30:11,800 --> 00:30:14,540
adapt as for each adapt as for each with

682
00:30:14,540 --> 00:30:16,970
conditional they're all documented and

683
00:30:16,970 --> 00:30:21,200
they're they're brand-new in 1.3 as part

684
00:30:21,200 --> 00:30:23,840
of a huge performance boost in node list

685
00:30:23,840 --> 00:30:26,560
that we that we did between 1.2 and 1.3

686
00:30:26,560 --> 00:30:30,320
completely backwards compatible so this

687
00:30:30,320 --> 00:30:31,970
is and the node list is where you get

688
00:30:31,970 --> 00:30:34,730
your training in dojo basically but it's

689
00:30:34,730 --> 00:30:38,030
not exclusively limited that it's really

690
00:30:38,030 --> 00:30:41,150
just this any time you return the object

691
00:30:41,150 --> 00:30:42,950
that you're working with you can call

692
00:30:42,950 --> 00:30:46,940
another method off of it and that's it's

693
00:30:46,940 --> 00:30:49,370
just a matter of returning this so like

694
00:30:49,370 --> 00:30:52,940
in graphics the shape creation returns

695
00:30:52,940 --> 00:30:54,860
this so you can add a fill and because

696
00:30:54,860 --> 00:30:56,180
there's nothing that needs to be

697
00:30:56,180 --> 00:30:58,940
returned format fill we return this so

698
00:30:58,940 --> 00:31:02,180
we can continue on you can do there x

699
00:31:02,180 --> 00:31:04,640
equals new graphics shape from a surface

700
00:31:04,640 --> 00:31:07,670
and then x dad Phil or X set stroke it's

701
00:31:07,670 --> 00:31:09,470
a little bit easier to debug because

702
00:31:09,470 --> 00:31:11,570
it's not all on one line and not all on

703
00:31:11,570 --> 00:31:15,470
one long function call but it's a lot

704
00:31:15,470 --> 00:31:20,330
easier to to write without it so back a

705
00:31:20,330 --> 00:31:24,050
little bit to the the the global

706
00:31:24,050 --> 00:31:27,770
namespaces that we have dojo seems a

707
00:31:27,770 --> 00:31:29,780
little verbose to do something like

708
00:31:29,780 --> 00:31:32,300
select elements by class or do something

709
00:31:32,300 --> 00:31:35,600
by ID jquery has the dollar sign there

710
00:31:35,600 --> 00:31:38,450
for the the class and then they have the

711
00:31:38,450 --> 00:31:40,070
same thing for the ID so they don't have

712
00:31:40,070 --> 00:31:41,900
a direct function to get a node by ID

713
00:31:41,900 --> 00:31:44,300
that's any faster than instantiating an

714
00:31:44,300 --> 00:31:46,370
entire jQuery object prototype has the

715
00:31:46,370 --> 00:31:48,170
double dollar sign for its selector

716
00:31:48,170 --> 00:31:48,899
engine and

717
00:31:48,899 --> 00:31:52,589
single dollar sign for its ID which is

718
00:31:52,589 --> 00:31:56,399
just confusing to me to see the people

719
00:31:56,399 --> 00:31:58,409
like they put these libraries together

720
00:31:58,409 --> 00:32:01,320
on a page in it I couldn't imagine even

721
00:32:01,320 --> 00:32:04,289
trying to read or work with that no

722
00:32:04,289 --> 00:32:05,940
criticism at all I'm just saying it like

723
00:32:05,940 --> 00:32:08,219
it blows my mind to see that many dollar

724
00:32:08,219 --> 00:32:10,799
signs and then mootools follows the

725
00:32:10,799 --> 00:32:14,519
prototype example this is its element so

726
00:32:14,519 --> 00:32:16,529
it allows you to change single node

727
00:32:16,529 --> 00:32:18,719
operations and then the bulk operations

728
00:32:18,719 --> 00:32:21,739
on the double dollar sign so plug d

729
00:32:21,739 --> 00:32:24,239
allows you to use the dollar sign as

730
00:32:24,239 --> 00:32:28,649
well in dojo conflict mode I had to name

731
00:32:28,649 --> 00:32:30,119
it conflict because we don't otherwise

732
00:32:30,119 --> 00:32:34,229
but it I I did and then so after you

733
00:32:34,229 --> 00:32:35,609
called Ojo conflict you can write code

734
00:32:35,609 --> 00:32:39,269
that looks like that or you can there's

735
00:32:39,269 --> 00:32:40,950
a bunch of other api's and plug d it's

736
00:32:40,950 --> 00:32:43,159
in google code if you'd like to see it

737
00:32:43,159 --> 00:32:45,419
or you can do it automatically by

738
00:32:45,419 --> 00:32:49,320
setting a DJ config on the on the script

739
00:32:49,320 --> 00:32:52,919
object a typical way of configuring dojo

740
00:32:52,919 --> 00:32:54,509
before load and then it will

741
00:32:54,509 --> 00:32:56,099
automatically call conflict and then

742
00:32:56,099 --> 00:32:58,379
you'll have the exported dollar sign to

743
00:32:58,379 --> 00:33:01,289
the query selector engine in dojo or you

744
00:33:01,289 --> 00:33:03,059
can do it as a build step and you can

745
00:33:03,059 --> 00:33:05,369
just pass auto conflict equals on and

746
00:33:05,369 --> 00:33:07,099
then tell it the profile to build and

747
00:33:07,099 --> 00:33:09,539
there it is it every time you load this

748
00:33:09,539 --> 00:33:11,339
on the page you steal the dollar sign

749
00:33:11,339 --> 00:33:13,139
back so it is conflict and it's not

750
00:33:13,139 --> 00:33:14,879
something that dojo recommends but it's

751
00:33:14,879 --> 00:33:20,159
it's their expansion patterns so once

752
00:33:20,159 --> 00:33:23,009
you get past this base this base set of

753
00:33:23,009 --> 00:33:24,450
functionality and these these base

754
00:33:24,450 --> 00:33:28,169
patterns that we're doing it gets into a

755
00:33:28,169 --> 00:33:31,080
hole a hole bigger world once you can

756
00:33:31,080 --> 00:33:33,179
start loading in modules and you have to

757
00:33:33,179 --> 00:33:34,200
start thinking about things

758
00:33:34,200 --> 00:33:36,629
asynchronously because it is Ajax right

759
00:33:36,629 --> 00:33:39,869
asynchronous JavaScript we have

760
00:33:39,869 --> 00:33:42,179
something called dojo deferred if your

761
00:33:42,179 --> 00:33:45,809
Python fan at all it's just like pythons

762
00:33:45,809 --> 00:33:48,419
deferred it's a contract it's an

763
00:33:48,419 --> 00:33:50,519
asynchronous contract that says i'm

764
00:33:50,519 --> 00:33:53,279
going to i will give you a response at

765
00:33:53,279 --> 00:33:54,899
some point it's going to either be fail

766
00:33:54,899 --> 00:34:01,350
or good or both in some odd cases so

767
00:34:01,350 --> 00:34:04,830
you to find the contract and say okay do

768
00:34:04,830 --> 00:34:07,080
this operation and when the contract is

769
00:34:07,080 --> 00:34:09,240
up you get the call back no matter what

770
00:34:09,240 --> 00:34:10,859
happened you can do it on a timeout you

771
00:34:10,859 --> 00:34:14,340
can do it on within a try catch a lot of

772
00:34:14,340 --> 00:34:17,340
people don't pay attention or don't use

773
00:34:17,340 --> 00:34:19,560
deferred directly it's kind of hidden

774
00:34:19,560 --> 00:34:22,139
from you the most indirect usage of

775
00:34:22,139 --> 00:34:23,700
using a deferred is in our Ajax

776
00:34:23,700 --> 00:34:29,879
functions xhr get calls a get request

777
00:34:29,879 --> 00:34:32,790
right to a UL to a URL and then the load

778
00:34:32,790 --> 00:34:34,730
function calls it will call

779
00:34:34,730 --> 00:34:36,810
asynchronously but in the background a

780
00:34:36,810 --> 00:34:39,149
deferred is happening a deferred was

781
00:34:39,149 --> 00:34:40,830
created in fact the deferred was

782
00:34:40,830 --> 00:34:43,020
returned from the xhr get that you could

783
00:34:43,020 --> 00:34:45,960
further add callbacks and Arab x2 at a

784
00:34:45,960 --> 00:34:48,359
later time you can pass it around and do

785
00:34:48,359 --> 00:34:51,080
that so and then of course dojo hip

786
00:34:51,080 --> 00:34:54,240
manipulating the scope of the of the

787
00:34:54,240 --> 00:34:59,730
callback so fun fun stuff this is a the

788
00:34:59,730 --> 00:35:03,030
load keyword kind of makes you want to

789
00:35:03,030 --> 00:35:04,859
write code like this where it's do

790
00:35:04,859 --> 00:35:06,750
something and then in this callback do

791
00:35:06,750 --> 00:35:08,070
something else and then in this callback

792
00:35:08,070 --> 00:35:09,660
do something else and in this callback

793
00:35:09,660 --> 00:35:11,310
and then by the time you know it you're

794
00:35:11,310 --> 00:35:17,220
nowhere near your 40 tabs in and why I I

795
00:35:17,220 --> 00:35:18,900
don't I don't want to do that I want I

796
00:35:18,900 --> 00:35:22,230
want a clever asynchronous clever

797
00:35:22,230 --> 00:35:24,780
asynchronous API so I call xhr get and

798
00:35:24,780 --> 00:35:26,130
then I had a callback right there in the

799
00:35:26,130 --> 00:35:28,230
place and whatever you return from the

800
00:35:28,230 --> 00:35:30,510
deferred chain you can you can modify

801
00:35:30,510 --> 00:35:32,100
the data along the deferred chain or you

802
00:35:32,100 --> 00:35:33,359
can just listen to it so here we're just

803
00:35:33,359 --> 00:35:34,920
listening to it as long as we don't

804
00:35:34,920 --> 00:35:36,720
return anything nothing along the

805
00:35:36,720 --> 00:35:38,640
deferred chain will get the new stuff

806
00:35:38,640 --> 00:35:41,190
but in this case the next place that

807
00:35:41,190 --> 00:35:44,430
gets it the and post function which is a

808
00:35:44,430 --> 00:35:48,030
function that I've defined up here it's

809
00:35:48,030 --> 00:35:50,609
a it accepts the data it gets called it

810
00:35:50,609 --> 00:35:52,590
gets past the same data which is food

811
00:35:52,590 --> 00:35:55,830
each tml content but it gets passed it

812
00:35:55,830 --> 00:35:58,470
lower cased all lower cased which is

813
00:35:58,470 --> 00:36:00,570
great and then of course we set an error

814
00:36:00,570 --> 00:36:02,640
back in another scope in error handle

815
00:36:02,640 --> 00:36:05,400
this calls other scope error handle in

816
00:36:05,400 --> 00:36:09,030
the scope of other scope it's a magic

817
00:36:09,030 --> 00:36:11,400
thing of dojo hitch and that pattern

818
00:36:11,400 --> 00:36:14,280
exists everywhere in dojo

819
00:36:14,280 --> 00:36:16,560
and then you know the elsewhere add the

820
00:36:16,560 --> 00:36:21,180
callback right so that's fun right the

821
00:36:21,180 --> 00:36:23,970
asynchronous thing moving on into more

822
00:36:23,970 --> 00:36:26,370
asynchronous greatness dojo data it's

823
00:36:26,370 --> 00:36:28,620
it's more than just data for the Dom

824
00:36:28,620 --> 00:36:32,700
like it's it's a we saw on what was it

825
00:36:32,700 --> 00:36:36,000
taffie BB taffie d be reminded a lot of

826
00:36:36,000 --> 00:36:40,350
us of dojo data the api's it's it's

827
00:36:40,350 --> 00:36:43,280
readwrite identity and notification say

828
00:36:43,280 --> 00:36:46,290
the reed is the the most basic of it it

829
00:36:46,290 --> 00:36:49,700
says I want an item give me an item or

830
00:36:49,700 --> 00:36:53,220
i'm making a query give me an item or

831
00:36:53,220 --> 00:36:55,410
give me all the items so you do you have

832
00:36:55,410 --> 00:36:57,210
an on item callback that you can call or

833
00:36:57,210 --> 00:36:59,180
an uncomplete callback that you can call

834
00:36:59,180 --> 00:37:02,190
so you can either know each item

835
00:37:02,190 --> 00:37:04,080
individually or do them all at once when

836
00:37:04,080 --> 00:37:07,490
the entire contract has been fulfilled

837
00:37:07,490 --> 00:37:10,350
common functions and callbacks dojo data

838
00:37:10,350 --> 00:37:13,380
is just an API it's it's it's just an

839
00:37:13,380 --> 00:37:15,750
abstraction it's there's no there are

840
00:37:15,750 --> 00:37:18,450
two official data stores in dojo but

841
00:37:18,450 --> 00:37:19,560
only because their sample

842
00:37:19,560 --> 00:37:22,950
implementations of this API of the

843
00:37:22,950 --> 00:37:25,500
read/write identity and notification a

844
00:37:25,500 --> 00:37:29,850
vis the two are item file read store and

845
00:37:29,850 --> 00:37:31,920
item file right store which basically

846
00:37:31,920 --> 00:37:34,740
are just jason files flat files and it

847
00:37:34,740 --> 00:37:37,590
loads the file using xhr and iterates

848
00:37:37,590 --> 00:37:39,960
but it maps this api which is really

849
00:37:39,960 --> 00:37:41,640
really useful when you don't want to

850
00:37:41,640 --> 00:37:43,920
think about how did how to do the wiring

851
00:37:43,920 --> 00:37:50,790
um there are a couple a couple of okay

852
00:37:50,790 --> 00:37:53,160
so we make a google search store this is

853
00:37:53,160 --> 00:37:56,610
another this one's in dojo directly and

854
00:37:56,610 --> 00:37:59,580
we create a new store with some

855
00:37:59,580 --> 00:38:03,360
parameters that it requires API keys and

856
00:38:03,360 --> 00:38:06,150
and stuff like that but we require the

857
00:38:06,150 --> 00:38:07,830
module create the store and then send

858
00:38:07,830 --> 00:38:09,990
off the query so what is our query its

859
00:38:09,990 --> 00:38:11,970
we're looking for dojo in the google

860
00:38:11,970 --> 00:38:14,400
search and whatever google says on the

861
00:38:14,400 --> 00:38:17,550
search we're going to on item every time

862
00:38:17,550 --> 00:38:19,200
an item is returned from this store

863
00:38:19,200 --> 00:38:20,790
thinger add item is going to be called

864
00:38:20,790 --> 00:38:22,620
in the scope of thing or thing is a

865
00:38:22,620 --> 00:38:27,000
widget i've defined up here um and then

866
00:38:27,000 --> 00:38:27,750
when it's

867
00:38:27,750 --> 00:38:29,130
all done I tell the thinger to render

868
00:38:29,130 --> 00:38:32,160
itself each of the add items is you know

869
00:38:32,160 --> 00:38:33,750
just a little couple lines of code that

870
00:38:33,750 --> 00:38:35,640
says I'm receiving a JSON object maybe I

871
00:38:35,640 --> 00:38:38,070
need to to make a new row in a table or

872
00:38:38,070 --> 00:38:39,510
I need to make a new option in the

873
00:38:39,510 --> 00:38:41,940
drop-down or whatever it is it's it's a

874
00:38:41,940 --> 00:38:44,670
very very simple way to do asynchronous

875
00:38:44,670 --> 00:38:48,360
operations and it's very very clean dojo

876
00:38:48,360 --> 00:38:50,130
data this is a great example I don't

877
00:38:50,130 --> 00:38:52,110
know if our our bandwidth here will

878
00:38:52,110 --> 00:38:55,140
permit us to it's called stalker it's on

879
00:38:55,140 --> 00:38:58,800
it uses persevere where Chris did the

880
00:38:58,800 --> 00:39:01,680
talk earlier but it's using a lot of

881
00:39:01,680 --> 00:39:04,020
dojo technology actually the top part is

882
00:39:04,020 --> 00:39:06,870
a dojo grid where you can sort the the

883
00:39:06,870 --> 00:39:09,000
various headings and stuff like that the

884
00:39:09,000 --> 00:39:12,600
grid is powered by a datastore that same

885
00:39:12,600 --> 00:39:15,840
data store is powering a data chart the

886
00:39:15,840 --> 00:39:18,960
chart data is being fed from persevere

887
00:39:18,960 --> 00:39:21,240
via comedy so we're getting we're

888
00:39:21,240 --> 00:39:23,070
simulating real time stock updates by

889
00:39:23,070 --> 00:39:25,620
pumping fake data on random intervals

890
00:39:25,620 --> 00:39:27,720
into this thing as a demo so you can see

891
00:39:27,720 --> 00:39:31,260
it live if you visit it persevere site

892
00:39:31,260 --> 00:39:35,490
pencom stalker dot HTML but the charts

893
00:39:35,490 --> 00:39:37,290
just kind of flow by and re-render and

894
00:39:37,290 --> 00:39:39,840
you can you can change the the line the

895
00:39:39,840 --> 00:39:41,820
way the lines interact on the fly with

896
00:39:41,820 --> 00:39:43,980
the buttons and stuff so it's a fun

897
00:39:43,980 --> 00:39:45,510
little example but it's using a lot of

898
00:39:45,510 --> 00:39:49,110
asynchronous data technology to pull it

899
00:39:49,110 --> 00:39:51,780
off and it's pretty pretty simple there

900
00:39:51,780 --> 00:39:55,140
are a lot of data stores in dojo X a lot

901
00:39:55,140 --> 00:39:57,080
of them user contributed a lot of them

902
00:39:57,080 --> 00:39:59,400
developer like core developer

903
00:39:59,400 --> 00:40:02,490
contributed because we use them and or

904
00:40:02,490 --> 00:40:05,280
read stores just a basic it's not a

905
00:40:05,280 --> 00:40:07,410
basic it's an extension on the item file

906
00:40:07,410 --> 00:40:09,210
restore which is the basic one and and

907
00:40:09,210 --> 00:40:12,840
or gives you a better query syntax so

908
00:40:12,840 --> 00:40:15,780
you can like item equals and or you know

909
00:40:15,780 --> 00:40:18,840
it gives you more SQL like things and a

910
00:40:18,840 --> 00:40:22,500
couch DB rest or we saw the CouchDB demo

911
00:40:22,500 --> 00:40:24,810
earlier it's a dojo datastore that talks

912
00:40:24,810 --> 00:40:27,390
to CouchDB restfully out of the box

913
00:40:27,390 --> 00:40:31,980
using the dojo data API so CSS rule

914
00:40:31,980 --> 00:40:33,660
store gives you access to your style

915
00:40:33,660 --> 00:40:37,650
sheets using the dojo data API um flickr

916
00:40:37,650 --> 00:40:39,630
store google feed store all of those

917
00:40:39,630 --> 00:40:41,670
stores give you access to

918
00:40:41,670 --> 00:40:43,650
all of this information using the dojo

919
00:40:43,650 --> 00:40:46,440
data API and the reason that the API is

920
00:40:46,440 --> 00:40:48,030
important is because you can write

921
00:40:48,030 --> 00:40:51,480
components that accept data but you

922
00:40:51,480 --> 00:40:52,680
don't have to think about the store

923
00:40:52,680 --> 00:40:56,549
abstraction so the lightbox it's an

924
00:40:56,549 --> 00:40:57,930
image this one's coming from flickr

925
00:40:57,930 --> 00:41:00,059
using the flickr rest or it could come

926
00:41:00,059 --> 00:41:03,059
from any service that i have that can

927
00:41:03,059 --> 00:41:08,099
provide dojo data API data basically the

928
00:41:08,099 --> 00:41:12,809
the gadgets use dojo data the drop-down

929
00:41:12,809 --> 00:41:14,730
combo boxes the trees all of these

930
00:41:14,730 --> 00:41:18,270
little widgets can just talk dojo data

931
00:41:18,270 --> 00:41:21,329
for whatever reason so it's it's a great

932
00:41:21,329 --> 00:41:23,460
thing and you can plug in whatever store

933
00:41:23,460 --> 00:41:27,480
behind it you want so and then I'm

934
00:41:27,480 --> 00:41:29,849
probably running short on time and if

935
00:41:29,849 --> 00:41:30,930
I'm not I have lots of time for

936
00:41:30,930 --> 00:41:34,200
questions because our PC SMD is kind of

937
00:41:34,200 --> 00:41:36,990
the the final final bit of this Chris

938
00:41:36,990 --> 00:41:39,210
showed a bunch of great stuff in his

939
00:41:39,210 --> 00:41:42,480
talk with persevere that kind of got

940
00:41:42,480 --> 00:41:45,299
into this it's a lot the same it's using

941
00:41:45,299 --> 00:41:48,619
a service it's called dojo X RPC service

942
00:41:48,619 --> 00:41:51,780
and then it uses JSON schema basically

943
00:41:51,780 --> 00:41:54,869
to define the api's that to communicate

944
00:41:54,869 --> 00:41:58,710
so in I i wrote the google SMD service

945
00:41:58,710 --> 00:42:01,109
service method definition i think is

946
00:42:01,109 --> 00:42:04,170
what's gone but and then it defines all

947
00:42:04,170 --> 00:42:07,260
of these api so goob now is this service

948
00:42:07,260 --> 00:42:10,319
that i can call and the RPC call is web

949
00:42:10,319 --> 00:42:12,240
search so i call the web search and then

950
00:42:12,240 --> 00:42:15,900
here's my deferred call back you can do

951
00:42:15,900 --> 00:42:17,250
error back you can do handle back you

952
00:42:17,250 --> 00:42:18,480
can do the deferred chaining where you

953
00:42:18,480 --> 00:42:20,130
manipulate the data long the thing it's

954
00:42:20,130 --> 00:42:27,319
all exactly the same no yeah okay so

955
00:42:27,319 --> 00:42:29,819
that's that's that's really it I mean

956
00:42:29,819 --> 00:42:33,119
there's it's a huge huge project and

957
00:42:33,119 --> 00:42:35,250
it's been going on now for five years

958
00:42:35,250 --> 00:42:39,990
but it's a large very very large active

959
00:42:39,990 --> 00:42:42,900
developer friendly friendly developer

960
00:42:42,900 --> 00:42:45,780
base it's great and one of the one of

961
00:42:45,780 --> 00:42:48,180
the most compelling things about it i

962
00:42:48,180 --> 00:42:52,200
think is the licensing to where it's all

963
00:42:52,200 --> 00:42:55,050
licensed m bsd

964
00:42:55,050 --> 00:42:57,750
a free license new BSD app academic free

965
00:42:57,750 --> 00:43:00,810
license and it's just meant to be

966
00:43:00,810 --> 00:43:02,580
consumed you can take it you can hack it

967
00:43:02,580 --> 00:43:03,930
you can do whatever you want as long as

968
00:43:03,930 --> 00:43:06,690
you leave like the copyright notice it

969
00:43:06,690 --> 00:43:09,180
says hey dojo wrote this right it's you

970
00:43:09,180 --> 00:43:12,600
can do whatever meant to be adopted in

971
00:43:12,600 --> 00:43:14,910
that sense and it's all covered under a

972
00:43:14,910 --> 00:43:18,120
dojo foundation it's all covered under

973
00:43:18,120 --> 00:43:20,100
the dojo foundation which is a nonprofit

974
00:43:20,100 --> 00:43:22,320
organization set up to to own the

975
00:43:22,320 --> 00:43:24,270
copyright of this product so that

976
00:43:24,270 --> 00:43:26,450
there's nobody that that's singly

977
00:43:26,450 --> 00:43:28,830
singled out for the for the ownership

978
00:43:28,830 --> 00:43:30,480
all contributions come in under

979
00:43:30,480 --> 00:43:32,640
contributor license like Apache like

980
00:43:32,640 --> 00:43:35,010
contributor license agreements so you

981
00:43:35,010 --> 00:43:36,990
can know that you can you can ship this

982
00:43:36,990 --> 00:43:40,200
code it's actually IBM is probably the

983
00:43:40,200 --> 00:43:42,870
biggest motivator behind that because

984
00:43:42,870 --> 00:43:45,060
they ship dojo in a lot of large

985
00:43:45,060 --> 00:43:48,240
products in their websphere stuff and

986
00:43:48,240 --> 00:43:51,270
and they want to know that that they can

987
00:43:51,270 --> 00:43:53,700
basically that the code is entirely

988
00:43:53,700 --> 00:43:58,050
clean so um our do we have does anyone

989
00:43:58,050 --> 00:43:59,850
have any questions how am i doing on

990
00:43:59,850 --> 00:44:02,910
time i have no idea good great that's so

991
00:44:02,910 --> 00:44:05,250
no questions at all really oh awesome go

992
00:44:05,250 --> 00:44:07,620
for it well I want to do how what it

993
00:44:07,620 --> 00:44:08,820
takes to build like a server-side

994
00:44:08,820 --> 00:44:11,220
version of Jojo like I want to use like

995
00:44:11,220 --> 00:44:12,000
you're talking about the crypto stuff

996
00:44:12,000 --> 00:44:14,820
yeah whatever some dojo component not in

997
00:44:14,820 --> 00:44:16,230
the browser is there a bill for that

998
00:44:16,230 --> 00:44:21,330
there is we have host environments it's

999
00:44:21,330 --> 00:44:23,700
the default one is host envy browser

1000
00:44:23,700 --> 00:44:25,920
right but there's host envy rhino and

1001
00:44:25,920 --> 00:44:30,080
there's host envy fire what is it XUL

1002
00:44:30,080 --> 00:44:32,280
things like that so you define the host

1003
00:44:32,280 --> 00:44:34,110
of me and that's the might not have seen

1004
00:44:34,110 --> 00:44:35,400
it earlier but there was a call a

1005
00:44:35,400 --> 00:44:38,370
function called a dojo body and it was a

1006
00:44:38,370 --> 00:44:41,070
function you define that in the host

1007
00:44:41,070 --> 00:44:45,240
envy how and all of the rest the code

1008
00:44:45,240 --> 00:44:46,680
works transparently as long as it

1009
00:44:46,680 --> 00:44:48,120
returns some kind of element that

1010
00:44:48,120 --> 00:44:51,190
behaves like a body so

1011
00:44:51,190 --> 00:44:55,510
um I was hoping you'd cover the dojo doc

1012
00:44:55,510 --> 00:44:58,750
test module oh yeah I can um I don't

1013
00:44:58,750 --> 00:45:00,310
know if you had opinions on that so ever

1014
00:45:00,310 --> 00:45:03,430
I are you talking about the the doc test

1015
00:45:03,430 --> 00:45:06,819
one where the inlet of the unit tests

1016
00:45:06,819 --> 00:45:09,099
are in the code like Python or in the

1017
00:45:09,099 --> 00:45:10,900
comments in the code like Python or

1018
00:45:10,900 --> 00:45:12,970
where they're actually the separate

1019
00:45:12,970 --> 00:45:14,530
thing I just curious again opinion oh no

1020
00:45:14,530 --> 00:45:16,300
I think it's I think it's great it kind

1021
00:45:16,300 --> 00:45:18,040
of makes the code hard to read and it

1022
00:45:18,040 --> 00:45:21,010
doesn't really it doesn't really benefit

1023
00:45:21,010 --> 00:45:24,369
like UI testing stuff because it's just

1024
00:45:24,369 --> 00:45:25,869
the functional stuff but you can do it

1025
00:45:25,869 --> 00:45:27,700
it's great on the on the low level on

1026
00:45:27,700 --> 00:45:30,089
the low level stuff yeah absolutely

1027
00:45:30,089 --> 00:45:37,510
anybody listens well no great that looks

1028
00:45:37,510 --> 00:45:41,530
like that's me I'm done and thank you

1029
00:45:41,530 --> 00:45:54,170
all

