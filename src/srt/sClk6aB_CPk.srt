1
00:00:12,769 --> 00:00:16,440

let me know if you can't hear me so I'm

2
00:00:16,440 --> 00:00:18,960
going to talk about some work that we're

3
00:00:18,960 --> 00:00:22,350
doing in the atma task force that was

4
00:00:22,350 --> 00:00:23,930
just mentioned in the previous speech

5
00:00:23,930 --> 00:00:26,400
it's actually called technical committee

6
00:00:26,400 --> 00:00:30,779
39 and I think we've got a good group

7
00:00:30,779 --> 00:00:32,219
that's now working harmoniously together

8
00:00:32,219 --> 00:00:33,960
so I wanted to talk about one of the

9
00:00:33,960 --> 00:00:35,340
best things that I've seen coming out of

10
00:00:35,340 --> 00:00:35,700
it

11
00:00:35,700 --> 00:00:37,410
which is already implemented in Firefox

12
00:00:37,410 --> 00:00:42,220
and that's this notion of proxies but

13
00:00:42,230 --> 00:00:45,620
I'm stung because the a query crew

14
00:00:45,620 --> 00:00:47,489
implied that I was just playing some

15
00:00:47,489 --> 00:00:49,620
YouTube videos and goofing around my

16
00:00:49,620 --> 00:00:51,360
last chance conf so I'm not going to

17
00:00:51,360 --> 00:00:52,559
play any videos this is getting very

18
00:00:52,559 --> 00:00:55,500
technical they'll be a lot of code we're

19
00:00:55,500 --> 00:00:58,079
also up against beer I'm in the Alex

20
00:00:58,079 --> 00:01:00,750
Russell slot so I won't I won't keep it

21
00:01:00,750 --> 00:01:02,039
too long but I will give you a test

22
00:01:02,039 --> 00:01:05,280
afterwards liquor is weird I showed

23
00:01:05,280 --> 00:01:06,869
people at work this episode where they

24
00:01:06,869 --> 00:01:09,150
had like the Quadra box with the four

25
00:01:09,150 --> 00:01:10,560
talking heads and then this heart-shaped

26
00:01:10,560 --> 00:01:12,750
window in the middle with John Resig in

27
00:01:12,750 --> 00:01:16,650
it and and you know unicorns or

28
00:01:16,650 --> 00:01:18,420
something and it was people were very

29
00:01:18,420 --> 00:01:19,500
confused by it they don't really

30
00:01:19,500 --> 00:01:22,950
understand our community I'm trying to

31
00:01:22,950 --> 00:01:24,799
explain it to them

32
00:01:24,799 --> 00:01:27,540
html5 is like the flying unicorn that

33
00:01:27,540 --> 00:01:31,159
craps skittles out of its rear end

34
00:01:31,159 --> 00:01:33,060
javascript doesn't meet that kind of

35
00:01:33,060 --> 00:01:34,590
stuff we're awesome

36
00:01:34,590 --> 00:01:37,770
without the unicorn so about res it's

37
00:01:37,770 --> 00:01:42,979
cool so thank you so let me talk about

38
00:01:42,979 --> 00:01:46,079
voluntary talk about this is based on

39
00:01:46,079 --> 00:01:48,299
work by Mark Miller of Google and Tom

40
00:01:48,299 --> 00:01:50,840
van could some of the Free University of

41
00:01:50,840 --> 00:01:55,229
Belgium and it's it's got a long history

42
00:01:55,229 --> 00:01:58,530
in the research community that is pretty

43
00:01:58,530 --> 00:02:00,270
cool I'll talk about that too so to

44
00:02:00,270 --> 00:02:03,180
review we have managed to produce

45
00:02:03,180 --> 00:02:04,799
something called the fifth edition of

46
00:02:04,799 --> 00:02:07,920
ECMO script and it's called es5 for

47
00:02:07,920 --> 00:02:09,479
short because no one wants to really say

48
00:02:09,479 --> 00:02:11,760
Eckman

49
00:02:11,760 --> 00:02:13,769
and it has things in it that have been

50
00:02:13,769 --> 00:02:15,510
in some browsers for a long time like

51
00:02:15,510 --> 00:02:17,700
the array map and for each and other

52
00:02:17,700 --> 00:02:21,269
methods it has JSON based on Dougs JSON

53
00:02:21,269 --> 00:02:25,019
- it has strict mode which we hope will

54
00:02:25,019 --> 00:02:28,769
be an Internet Explorer 9 it has this

55
00:02:28,769 --> 00:02:32,069
metaprogramming API for defining getters

56
00:02:32,069 --> 00:02:33,480
and setters again there was some prior

57
00:02:33,480 --> 00:02:35,819
art there that when in Mozilla like 11

58
00:02:35,819 --> 00:02:38,030
years ago and got into other browsers

59
00:02:38,030 --> 00:02:40,349
actually founded other browsers really

60
00:02:40,349 --> 00:02:42,060
fast what happened was that that I

61
00:02:42,060 --> 00:02:44,480
believe the first version of Live Maps

62
00:02:44,480 --> 00:02:47,280
launched in I think it was 2005 and it

63
00:02:47,280 --> 00:02:49,170
was based on Atlas which was like

64
00:02:49,170 --> 00:02:50,730
Microsoft's answer to Ajax which was

65
00:02:50,730 --> 00:02:52,650
kind of cool was just an 8x library the

66
00:02:52,650 --> 00:02:54,660
way it worked though was that it assumed

67
00:02:54,660 --> 00:02:58,260
that browser was IE and if it couldn't

68
00:02:58,260 --> 00:03:00,150
detect document dot all or something

69
00:03:00,150 --> 00:03:01,470
like that it would then say oh I'm going

70
00:03:01,470 --> 00:03:03,629
to assume it's Firefox if it's Firefox I

71
00:03:03,629 --> 00:03:05,579
can use you know double underscore

72
00:03:05,579 --> 00:03:07,829
define getter double underscore defined

73
00:03:07,829 --> 00:03:09,989
setter and sure enough it did that and

74
00:03:09,989 --> 00:03:12,540
so live Maps works great in IE and work

75
00:03:12,540 --> 00:03:14,040
great in firefox didn't work in Safari

76
00:03:14,040 --> 00:03:16,470
or opera and I happen to know some from

77
00:03:16,470 --> 00:03:18,180
some prints those companies that within

78
00:03:18,180 --> 00:03:20,190
a week there was a fire drill you know

79
00:03:20,190 --> 00:03:23,910
Steve Jobs was using certain words and

80
00:03:23,910 --> 00:03:26,700
and people added define get a defined

81
00:03:26,700 --> 00:03:28,290
setter and lookup getter look up said

82
00:03:28,290 --> 00:03:31,349
her to JavaScript core in the WebKit

83
00:03:31,349 --> 00:03:33,450
they added it to operas engine at the

84
00:03:33,450 --> 00:03:35,730
time futhark because they needed to make

85
00:03:35,730 --> 00:03:37,560
live maps work and that's how you get

86
00:03:37,560 --> 00:03:39,690
rapid evolution on the web I I don't

87
00:03:39,690 --> 00:03:41,760
like being the number two browser having

88
00:03:41,760 --> 00:03:43,530
to force them to do it and then some of

89
00:03:43,530 --> 00:03:44,849
my Apple friends are sensitive to this

90
00:03:44,849 --> 00:03:46,950
because they don't like being forced to

91
00:03:46,950 --> 00:03:49,200
do it but on the other hand you know I

92
00:03:49,200 --> 00:03:50,790
he forced us all to do stuff so it was

93
00:03:50,790 --> 00:03:51,380
good

94
00:03:51,380 --> 00:03:54,540
WebKit has like less market share than

95
00:03:54,540 --> 00:03:55,799
Missoula and they forced us to do stuff

96
00:03:55,799 --> 00:03:58,169
and it's good so if it's good let's do

97
00:03:58,169 --> 00:04:00,000
it I don't mind having to do it in a

98
00:04:00,000 --> 00:04:01,470
hurry though I have said I didn't have

99
00:04:01,470 --> 00:04:03,870
to do anything on a weeks notice to make

100
00:04:03,870 --> 00:04:05,519
live Maps work so maybe I would feel

101
00:04:05,519 --> 00:04:07,680
differently if I did but the define

102
00:04:07,680 --> 00:04:09,269
getter and setter stuff was all about

103
00:04:09,269 --> 00:04:12,419
making properties that had code behind

104
00:04:12,419 --> 00:04:14,190
them so you could run a function when

105
00:04:14,190 --> 00:04:15,660
somebody gets a property you can run in

106
00:04:15,660 --> 00:04:16,739
their function when somebody sets the

107
00:04:16,739 --> 00:04:18,750
value of the property and that got

108
00:04:18,750 --> 00:04:20,849
cleaned up and rationalized and sort of

109
00:04:20,849 --> 00:04:23,430
synthesized into the metaprogramming API

110
00:04:23,430 --> 00:04:24,410
and es5

111
00:04:24,410 --> 00:04:26,720
five and you could think it is like

112
00:04:26,720 --> 00:04:28,610
java.lang reflect only javascript line

113
00:04:28,610 --> 00:04:32,060
reflect and less painful to use it also

114
00:04:32,060 --> 00:04:34,280
lets you control whether a foreign loop

115
00:04:34,280 --> 00:04:36,770
will see the properties you define it

116
00:04:36,770 --> 00:04:38,330
lets you walk down properties against

117
00:04:38,330 --> 00:04:40,450
mutation and objects against extension

118
00:04:40,450 --> 00:04:44,840
and people worry that that's too you

119
00:04:44,840 --> 00:04:47,060
know alien to javascript it's certainly

120
00:04:47,060 --> 00:04:48,620
not the way javascript was when I

121
00:04:48,620 --> 00:04:50,030
created it I made it so you could monkey

122
00:04:50,030 --> 00:04:51,050
Padgett because I knew it needed

123
00:04:51,050 --> 00:04:52,990
patching I was doing such a rush job I

124
00:04:52,990 --> 00:04:55,340
made almost everything mutable I think

125
00:04:55,340 --> 00:04:57,800
only the the built-in constructors

126
00:04:57,800 --> 00:04:59,480
prototype properties could not be

127
00:04:59,480 --> 00:05:00,740
overwritten but everything else

128
00:05:00,740 --> 00:05:02,300
including those global bindings for

129
00:05:02,300 --> 00:05:04,010
object and array could be replaced and

130
00:05:04,010 --> 00:05:06,650
that was intentional that was because it

131
00:05:06,650 --> 00:05:09,380
needed the ability to be upgraded by

132
00:05:09,380 --> 00:05:11,540
library authors such as yourselves but

133
00:05:11,540 --> 00:05:12,920
now we're in a different world one I

134
00:05:12,920 --> 00:05:14,930
think that having control over mutation

135
00:05:14,930 --> 00:05:17,240
extension configurability is important

136
00:05:17,240 --> 00:05:20,870
and we've got that in es5 so this is

137
00:05:20,870 --> 00:05:22,790
actually in a Firefox 4 it's coming

138
00:05:22,790 --> 00:05:25,670
along in the WebKit nightlies and it's

139
00:05:25,670 --> 00:05:28,910
in an IE not into large extent so we

140
00:05:28,910 --> 00:05:30,530
should just try to keep going and get it

141
00:05:30,530 --> 00:05:31,540
all done

142
00:05:31,540 --> 00:05:35,270
here's a quick slide on what the

143
00:05:35,270 --> 00:05:37,490
metaprogramming API looks like it has

144
00:05:37,490 --> 00:05:39,980
some methods on object because it's not

145
00:05:39,980 --> 00:05:41,480
really possible to extend object up

146
00:05:41,480 --> 00:05:44,180
prototype yet so you get these methods

147
00:05:44,180 --> 00:05:47,000
with sometimes long names stylized names

148
00:05:47,000 --> 00:05:49,460
like get own property descriptor you can

149
00:05:49,460 --> 00:05:51,080
see that if you have a point and it has

150
00:05:51,080 --> 00:05:55,850
a getter for R the radius you could

151
00:05:55,850 --> 00:05:57,860
actually query for it at the bottom when

152
00:05:57,860 --> 00:06:00,080
you get on property descriptor point R

153
00:06:00,080 --> 00:06:02,240
in quotes you get back a descriptor that

154
00:06:02,240 --> 00:06:04,970
says this thing's got again and said the

155
00:06:04,970 --> 00:06:06,200
set happens to be undefined there's no

156
00:06:06,200 --> 00:06:11,620
setter so it's really constant and by

157
00:06:11,620 --> 00:06:15,140
the convention that it was defined in

158
00:06:15,140 --> 00:06:17,419
the object initializer using that get R

159
00:06:17,419 --> 00:06:19,850
open paren close paren syntax its

160
00:06:19,850 --> 00:06:21,590
innumerable you'll see in the foreign

161
00:06:21,590 --> 00:06:23,270
loop it's configurable you can you can

162
00:06:23,270 --> 00:06:24,650
mess whether you can delete it mainly

163
00:06:24,650 --> 00:06:28,000
you can replace it and that's just how

164
00:06:28,000 --> 00:06:30,200
properties defined by object

165
00:06:30,200 --> 00:06:34,130
initializers happen to work but you

166
00:06:34,130 --> 00:06:35,390
could you could do more you could say

167
00:06:35,390 --> 00:06:37,639
I'll get that define property

168
00:06:37,639 --> 00:06:41,599
try to create a Z that is enumerable but

169
00:06:41,599 --> 00:06:43,580
defaults that's what the grayed out part

170
00:06:43,580 --> 00:06:45,800
implies - not writable and not

171
00:06:45,800 --> 00:06:50,330
configurable and in that case that Z

172
00:06:50,330 --> 00:06:52,629
cannot be deleted and it cannot be

173
00:06:52,629 --> 00:06:54,650
rewritten to have a different value than

174
00:06:54,650 --> 00:06:57,680
zero it cannot be replaced by a getter

175
00:06:57,680 --> 00:07:00,349
and when you query for it you'll you'll

176
00:07:00,349 --> 00:07:03,439
find out that's that's the case you'll

177
00:07:03,439 --> 00:07:04,669
get back different descriptors and

178
00:07:04,669 --> 00:07:07,069
here's an example at the bottom showing

179
00:07:07,069 --> 00:07:09,800
another api object.create where you can

180
00:07:09,800 --> 00:07:11,870
specify the prototype for the new object

181
00:07:11,870 --> 00:07:13,520
you're creating as well as what's called

182
00:07:13,520 --> 00:07:16,129
a property descriptor map which looks

183
00:07:16,129 --> 00:07:18,349
like an object initializer whose keys

184
00:07:18,349 --> 00:07:20,090
are the names of the properties and the

185
00:07:20,090 --> 00:07:22,189
values are the individual descriptors

186
00:07:22,189 --> 00:07:25,009
that include things like value or get

187
00:07:25,009 --> 00:07:28,009
set and the boolean enumerable

188
00:07:28,009 --> 00:07:30,830
configurable writable etc instead of a

189
00:07:30,830 --> 00:07:33,349
big API it's got a lot of optional

190
00:07:33,349 --> 00:07:34,969
parameters so it made sense to use

191
00:07:34,969 --> 00:07:37,250
objects as arguments and let you write

192
00:07:37,250 --> 00:07:39,560
object initializers and you can read all

193
00:07:39,560 --> 00:07:42,379
about it in the spec or in documentation

194
00:07:42,379 --> 00:07:43,759
that's kind of online that the mozilla

195
00:07:43,759 --> 00:07:44,900
developer center in other places that

196
00:07:44,900 --> 00:07:46,580
try to make it easier to read the net

197
00:07:46,580 --> 00:07:50,800
respects but it's it's very powerful and

198
00:07:50,800 --> 00:07:54,370
when you create such an object you get

199
00:07:54,370 --> 00:07:56,990
this property descriptor map telling you

200
00:07:56,990 --> 00:07:59,000
how how these properties should be bound

201
00:07:59,000 --> 00:08:03,229
and object create does that if you want

202
00:08:03,229 --> 00:08:05,659
to make an object that can't be messed

203
00:08:05,659 --> 00:08:08,419
with there's a trio of methods on object

204
00:08:08,419 --> 00:08:10,639
that are progressively more restrictive

205
00:08:10,639 --> 00:08:13,460
prevent extensions object but prevent

206
00:08:13,460 --> 00:08:16,339
extensions says the argument object

207
00:08:16,339 --> 00:08:19,759
after that successfully returns cannot

208
00:08:19,759 --> 00:08:22,250
be extended with new properties you can

209
00:08:22,250 --> 00:08:24,650
still delete old properties if there are

210
00:08:24,650 --> 00:08:26,060
writable properties in that point you

211
00:08:26,060 --> 00:08:28,879
can reassign them reconfigure them if

212
00:08:28,879 --> 00:08:30,439
they're configurable but you cannot add

213
00:08:30,439 --> 00:08:32,810
new properties if you then go further or

214
00:08:32,810 --> 00:08:34,490
instead of calling for an extensions

215
00:08:34,490 --> 00:08:36,890
call object seal you get the effect not

216
00:08:36,890 --> 00:08:39,560
only it prevent extensions but you get

217
00:08:39,560 --> 00:08:42,500
all the existing properties made non

218
00:08:42,500 --> 00:08:44,180
configurable so that they can't be

219
00:08:44,180 --> 00:08:46,550
deleted or replaced with getters things

220
00:08:46,550 --> 00:08:49,220
like that finally if you use object of

221
00:08:49,220 --> 00:08:50,960
freeze that's the real power

222
00:08:50,960 --> 00:08:53,870
tool that does effectively free

223
00:08:53,870 --> 00:08:54,590
extensions

224
00:08:54,590 --> 00:08:56,750
seal and then it goes through and it

225
00:08:56,750 --> 00:09:00,170
makes every property non writable and so

226
00:09:00,170 --> 00:09:03,460
these are the the sort of ways of

227
00:09:03,460 --> 00:09:05,930
increasing the integrity of your objects

228
00:09:05,930 --> 00:09:08,810
so that you can be sure no one's mess

229
00:09:08,810 --> 00:09:10,550
them up even your own code accidentally

230
00:09:10,550 --> 00:09:13,070
sometimes this is useful people argue

231
00:09:13,070 --> 00:09:14,630
this is good for security and it is it's

232
00:09:14,630 --> 00:09:17,210
not a silver bullet on the other hand

233
00:09:17,210 --> 00:09:18,680
you might use this just for your own you

234
00:09:18,680 --> 00:09:20,990
know programming sanity and there are

235
00:09:20,990 --> 00:09:22,280
certain objects that should be constant

236
00:09:22,280 --> 00:09:23,660
there's certain things in the language

237
00:09:23,660 --> 00:09:25,010
it should be constant you can use these

238
00:09:25,010 --> 00:09:28,610
these api's to do that so now I'm going

239
00:09:28,610 --> 00:09:30,920
to turn to proxies and why we're adding

240
00:09:30,920 --> 00:09:32,810
more metaprogramming you know why do you

241
00:09:32,810 --> 00:09:35,180
need more meta it's possible to really

242
00:09:35,180 --> 00:09:36,950
go crazy with meta programming and a lot

243
00:09:36,950 --> 00:09:39,920
of language research has the api's that

244
00:09:39,920 --> 00:09:43,150
are in the 5th edition only goes so far

245
00:09:43,150 --> 00:09:45,620
we still have some things out there in

246
00:09:45,620 --> 00:09:47,390
the field like spider monkeys no such

247
00:09:47,390 --> 00:09:50,330
method handler which is like small talks

248
00:09:50,330 --> 00:09:52,250
does not understand and there's a little

249
00:09:52,250 --> 00:09:53,540
example it shows if you make an object

250
00:09:53,540 --> 00:09:55,730
with no such method in spider monkey if

251
00:09:55,730 --> 00:09:57,560
the value of that double underbar no

252
00:09:57,560 --> 00:09:59,540
such method double any of our property

253
00:09:59,540 --> 00:10:02,270
is a function taking the identifier of

254
00:10:02,270 --> 00:10:05,150
the method and the arguments to it you

255
00:10:05,150 --> 00:10:07,130
can see that calling some non-existent

256
00:10:07,130 --> 00:10:09,020
method will actually trap to that

257
00:10:09,020 --> 00:10:11,900
function and it will sure enough print

258
00:10:11,900 --> 00:10:13,370
the identifier and the arguments as an

259
00:10:13,370 --> 00:10:15,830
array people like this this is something

260
00:10:15,830 --> 00:10:17,930
that the Beck guys use in their sort of

261
00:10:17,930 --> 00:10:21,080
small talk on JavaScript Ajax library VM

262
00:10:21,080 --> 00:10:24,260
thing it's it's one of the sort of

263
00:10:24,260 --> 00:10:26,360
inputs to the standards process where we

264
00:10:26,360 --> 00:10:28,880
see there's an extension we added its

265
00:10:28,880 --> 00:10:31,280
fills a need and something needs to be

266
00:10:31,280 --> 00:10:33,020
standardized now you can be sure with

267
00:10:33,020 --> 00:10:34,430
double-under VARs on the name it's never

268
00:10:34,430 --> 00:10:35,270
going to get through the Standards

269
00:10:35,270 --> 00:10:37,430
Committee but this was informative to

270
00:10:37,430 --> 00:10:39,290
the proxies work that Mark and Tom did

271
00:10:39,290 --> 00:10:42,140
and there are good reasons that you want

272
00:10:42,140 --> 00:10:44,060
to do this you want to make virtual

273
00:10:44,060 --> 00:10:46,340
objects objects that aren't really there

274
00:10:46,340 --> 00:10:48,500
that they front for some database or

275
00:10:48,500 --> 00:10:50,180
some object that's in a persistent store

276
00:10:50,180 --> 00:10:53,420
or on another machine and you ideally

277
00:10:53,420 --> 00:10:55,100
want to get rid over tame this this

278
00:10:55,100 --> 00:10:56,720
weird corner of the atma spec called

279
00:10:56,720 --> 00:10:58,310
host objects which I was there when this

280
00:10:58,310 --> 00:11:00,260
was written this was written mainly

281
00:11:00,260 --> 00:11:01,779
because the I Dom

282
00:11:01,779 --> 00:11:03,790
to some extent every browser store has

283
00:11:03,790 --> 00:11:05,560
these objects they're implemented in C++

284
00:11:05,560 --> 00:11:08,319
they reflect in the JavaScript but they

285
00:11:08,319 --> 00:11:10,600
don't act quite like objects in

286
00:11:10,600 --> 00:11:13,149
JavaScript have acted till now they may

287
00:11:13,149 --> 00:11:15,220
have non configurable and non writable

288
00:11:15,220 --> 00:11:18,629
non extensible properties they may have

289
00:11:18,629 --> 00:11:21,189
weird bugs where if you you know asked

290
00:11:21,189 --> 00:11:23,259
what the type of some thing like alert

291
00:11:23,259 --> 00:11:26,410
is until ie 9 you get object instead of

292
00:11:26,410 --> 00:11:28,899
function they may have the problem if

293
00:11:28,899 --> 00:11:30,490
you touch them in the wrong way they'll

294
00:11:30,490 --> 00:11:32,800
actually throw an exception at you those

295
00:11:32,800 --> 00:11:34,600
are just bugs but but still host objects

296
00:11:34,600 --> 00:11:37,029
have leeway in the atmosphere to do

297
00:11:37,029 --> 00:11:38,379
weird-ass

298
00:11:38,379 --> 00:11:41,410
and and that's bad but it's also good

299
00:11:41,410 --> 00:11:43,540
that people need to extend JavaScript

300
00:11:43,540 --> 00:11:45,939
not only with C++ with lots of security

301
00:11:45,939 --> 00:11:48,249
issues but with JavaScript itself they

302
00:11:48,249 --> 00:11:50,860
need to be able to keep extending the

303
00:11:50,860 --> 00:11:52,779
language and the libraries in ways that

304
00:11:52,779 --> 00:11:56,490
looks like built-in objects and that can

305
00:11:56,490 --> 00:11:58,809
substitute for built-in objects that can

306
00:11:58,809 --> 00:12:00,279
virtualized built-in objects and that

307
00:12:00,279 --> 00:12:01,959
that becomes important as you build

308
00:12:01,959 --> 00:12:04,120
libraries and as you try to manage

309
00:12:04,120 --> 00:12:06,250
incompatibilities across browsers and

310
00:12:06,250 --> 00:12:09,639
across browser versions so that's a

311
00:12:09,639 --> 00:12:11,410
motivation for dynamic proxies and

312
00:12:11,410 --> 00:12:13,990
there's some precedent for it that you

313
00:12:13,990 --> 00:12:16,300
could say well maybe we don't really

314
00:12:16,300 --> 00:12:18,180
need to go much further than the es5

315
00:12:18,180 --> 00:12:20,709
getters and setters based on the prior

316
00:12:20,709 --> 00:12:22,689
art maybe we just need to add gathers

317
00:12:22,689 --> 00:12:24,879
and setters but really every getter and

318
00:12:24,879 --> 00:12:27,250
setter defined using the es5 api or the

319
00:12:27,250 --> 00:12:29,259
declarative syntax in object literals

320
00:12:29,259 --> 00:12:32,620
like in the middle of slide has to pin

321
00:12:32,620 --> 00:12:34,930
down the name of the property the access

322
00:12:34,930 --> 00:12:36,459
to property the property with the getter

323
00:12:36,459 --> 00:12:39,579
and setter and that's not general it's

324
00:12:39,579 --> 00:12:42,370
ad-hoc and it hard codes the name you

325
00:12:42,370 --> 00:12:44,709
can do it if you know exactly the names

326
00:12:44,709 --> 00:12:46,899
of the properties you want to meta

327
00:12:46,899 --> 00:12:48,639
program if you don't you're out of luck

328
00:12:48,639 --> 00:12:54,309
and it's pretty verbose so perhaps you

329
00:12:54,309 --> 00:12:55,569
could go a little further you could use

330
00:12:55,569 --> 00:12:58,839
object.create and you could use another

331
00:12:58,839 --> 00:13:01,779
api get own property names object get

332
00:13:01,779 --> 00:13:03,069
own property names we'll take any object

333
00:13:03,069 --> 00:13:05,620
and give you all the direct property

334
00:13:05,620 --> 00:13:06,879
names whether their innumerable or not

335
00:13:06,879 --> 00:13:08,499
in an array and then you could use nice

336
00:13:08,499 --> 00:13:10,509
for each this shows all the es5

337
00:13:10,509 --> 00:13:13,080
additions for each array X

338
00:13:13,080 --> 00:13:16,560
passing a function so for each direct

339
00:13:16,560 --> 00:13:19,170
property named own property name you can

340
00:13:19,170 --> 00:13:21,209
then get the descriptor of that property

341
00:13:21,209 --> 00:13:24,089
and you can wrap that property with a

342
00:13:24,089 --> 00:13:25,560
getter and a setter that will do the

343
00:13:25,560 --> 00:13:27,149
logging for you that way you don't the

344
00:13:27,149 --> 00:13:32,650
hard-code the names that's better

345
00:13:32,660 --> 00:13:36,120
but it's a one-time wrapping operation

346
00:13:36,120 --> 00:13:39,329
and you won't catch new added properties

347
00:13:39,329 --> 00:13:41,730
that are extended on the object after

348
00:13:41,730 --> 00:13:43,649
this this make logger function has been

349
00:13:43,649 --> 00:13:46,230
called you won't catch changes to

350
00:13:46,230 --> 00:13:48,920
property attributes so it's not complete

351
00:13:48,920 --> 00:13:51,750
so here finally is what we're working on

352
00:13:51,750 --> 00:13:53,820
for the harmony version of JavaScript

353
00:13:53,820 --> 00:13:57,329
it's new API instead of capital object

354
00:13:57,329 --> 00:14:00,029
as the locus of create and other meta

355
00:14:00,029 --> 00:14:01,160
programming methods we have a new

356
00:14:01,160 --> 00:14:04,620
built-in class called proxy and it has a

357
00:14:04,620 --> 00:14:10,730
create method which can take two things

358
00:14:10,730 --> 00:14:13,470
the first is conventionally passed as an

359
00:14:13,470 --> 00:14:15,709
object initializer it's the handler and

360
00:14:15,709 --> 00:14:19,680
the second is the prototype for the the

361
00:14:19,680 --> 00:14:21,480
new proxy object you can think of these

362
00:14:21,480 --> 00:14:23,690
proxies as blank objects these are

363
00:14:23,690 --> 00:14:28,140
objects that you give code to to answer

364
00:14:28,140 --> 00:14:30,630
questions about properties to act on

365
00:14:30,630 --> 00:14:33,240
changes to the object but but otherwise

366
00:14:33,240 --> 00:14:35,240
the proxy itself is kind of empty and

367
00:14:35,240 --> 00:14:37,910
the cool thing is the handler is is

368
00:14:37,910 --> 00:14:42,779
isolated in the meta layer from the

369
00:14:42,779 --> 00:14:44,790
proxy that the handler is your own

370
00:14:44,790 --> 00:14:46,230
object maybe it's a shared object

371
00:14:46,230 --> 00:14:47,910
initializer maybe it's some object that

372
00:14:47,910 --> 00:14:49,680
you create maybe it's another proxy

373
00:14:49,680 --> 00:14:50,430
which we'll get to

374
00:14:50,430 --> 00:14:54,779
and there isn't necessarily a an object

375
00:14:54,779 --> 00:14:56,310
backstage of it it could be a remote

376
00:14:56,310 --> 00:14:57,449
object it could be just doing

377
00:14:57,449 --> 00:15:00,120
computations to answer gets and sets but

378
00:15:00,120 --> 00:15:02,329
this way you can handle all the possible

379
00:15:02,329 --> 00:15:05,459
evolutions of of an object if you're

380
00:15:05,459 --> 00:15:06,839
willing to create it as a proxy from

381
00:15:06,839 --> 00:15:09,720
from birth and so make logger now

382
00:15:09,720 --> 00:15:12,230
finally has managed to make a logger and

383
00:15:12,230 --> 00:15:15,600
it's captured obviously the object that

384
00:15:15,600 --> 00:15:18,600
it's being logged in its closure as an

385
00:15:18,600 --> 00:15:20,910
argument so it does in fact have a have

386
00:15:20,910 --> 00:15:22,829
an object that it's fronting for but

387
00:15:22,829 --> 00:15:24,329
again that's that's incidental that's

388
00:15:24,329 --> 00:15:26,120
not required

389
00:15:26,120 --> 00:15:28,140
so you'll see this kind of diagram

390
00:15:28,140 --> 00:15:30,120
throughout there's a base layer and

391
00:15:30,120 --> 00:15:32,340
there's a metal layer metal layer is

392
00:15:32,340 --> 00:15:36,060
like backstage at the play basis is what

393
00:15:36,060 --> 00:15:38,160
the audience is seeing so when the

394
00:15:38,160 --> 00:15:40,890
handler is there doing its thing the the

395
00:15:40,890 --> 00:15:44,040
user the proxy with only a few

396
00:15:44,040 --> 00:15:45,270
exceptions really can't tell that

397
00:15:45,270 --> 00:15:46,770
they're not dealing with a regular

398
00:15:46,770 --> 00:15:49,170
JavaScript object everything can be done

399
00:15:49,170 --> 00:15:50,880
almost seamlessly and there's a few

400
00:15:50,880 --> 00:15:52,110
important cases where that's not true

401
00:15:52,110 --> 00:15:56,160
but I'll get to those and so one of the

402
00:15:56,160 --> 00:15:58,010
things that this dash line divides is

403
00:15:58,010 --> 00:15:59,850
correspondences between the meta layer

404
00:15:59,850 --> 00:16:03,500
and the base layer so here you have a

405
00:16:03,500 --> 00:16:06,060
base reference and expression property

406
00:16:06,060 --> 00:16:09,180
of foo that turns into handler duck get

407
00:16:09,180 --> 00:16:11,490
passing the proxy and the name foo as a

408
00:16:11,490 --> 00:16:15,900
string so a base expression that assigns

409
00:16:15,900 --> 00:16:18,240
hand without phooey quills 42 turns into

410
00:16:18,240 --> 00:16:20,430
ham sorry proxy about foo equals 42

411
00:16:20,430 --> 00:16:22,400
terms at the handler dot set proxy

412
00:16:22,400 --> 00:16:28,620
string foo and 42 and calling proxy up

413
00:16:28,620 --> 00:16:31,110
foo with an argument list turns into a

414
00:16:31,110 --> 00:16:33,780
get essentially followed by an apply

415
00:16:33,780 --> 00:16:37,440
it's kind of an internal apply and so

416
00:16:37,440 --> 00:16:39,270
you can see how almost everything you

417
00:16:39,270 --> 00:16:41,940
could do to object maps from proxy to

418
00:16:41,940 --> 00:16:47,310
Handler and indeed if you reference

419
00:16:47,310 --> 00:16:51,720
proxy yet you're just getting the name

420
00:16:51,720 --> 00:16:54,030
yet from the from the proxy if I calling

421
00:16:54,030 --> 00:16:58,860
the handlers get method and proxies can

422
00:16:58,860 --> 00:17:00,210
have prototypes this is important for

423
00:17:00,210 --> 00:17:02,190
instance of for things like that

424
00:17:02,190 --> 00:17:04,709
but it's up to the proxy to delegate to

425
00:17:04,709 --> 00:17:07,709
its prototype there's no automatic

426
00:17:07,709 --> 00:17:10,530
delegation done by the the JavaScript VM

427
00:17:10,530 --> 00:17:14,209
the proxy is responsible for somehow

428
00:17:14,209 --> 00:17:16,650
answering for all its properties both

429
00:17:16,650 --> 00:17:18,570
the own or direct ones and any that

430
00:17:18,570 --> 00:17:19,980
might come from its prototype or some

431
00:17:19,980 --> 00:17:23,190
other object and the handler you know

432
00:17:23,190 --> 00:17:24,750
can have a prototype too if you want to

433
00:17:24,750 --> 00:17:26,850
build a corresponding tower in the meta

434
00:17:26,850 --> 00:17:31,260
level and it's not just for property

435
00:17:31,260 --> 00:17:34,770
accesses you can do things like in

436
00:17:34,770 --> 00:17:36,900
expressions which turn into handler that

437
00:17:36,900 --> 00:17:39,430
has these methods on the

438
00:17:39,430 --> 00:17:41,530
handler we call traps by analogy of

439
00:17:41,530 --> 00:17:44,560
operating system traps to distinguish

440
00:17:44,560 --> 00:17:46,390
them so the jargon is that proxy has a

441
00:17:46,390 --> 00:17:48,550
handler that's associated at creation

442
00:17:48,550 --> 00:17:51,820
time otherwise not discoverable from the

443
00:17:51,820 --> 00:17:55,060
proxy the handler has traps there's a

444
00:17:55,060 --> 00:17:59,140
suite of them 13 I think if you delete

445
00:17:59,140 --> 00:18:01,330
proxy dot foo that calls handler dot

446
00:18:01,330 --> 00:18:04,780
delete with the name foo if you write a

447
00:18:04,780 --> 00:18:07,000
foreign loop over a proxy the handlers

448
00:18:07,000 --> 00:18:10,240
enumerate trap is called and it returns

449
00:18:10,240 --> 00:18:15,660
an array of all the innumerable keys and

450
00:18:15,660 --> 00:18:18,100
if you do metaprogramming using those

451
00:18:18,100 --> 00:18:20,500
es5 object dot defined property all

452
00:18:20,500 --> 00:18:22,600
those somewhat long the methods on

453
00:18:22,600 --> 00:18:25,480
object in fact those have handler traps

454
00:18:25,480 --> 00:18:27,580
too because it's important that you be

455
00:18:27,580 --> 00:18:29,920
able to masquerade almost seamlessly you

456
00:18:29,920 --> 00:18:32,230
should be able to intercede on any

457
00:18:32,230 --> 00:18:34,360
behavior that an object can have and

458
00:18:34,360 --> 00:18:36,840
that includes the metaprogramming API s

459
00:18:36,840 --> 00:18:39,220
so there's a hand without defined

460
00:18:39,220 --> 00:18:44,320
property but there's a few things that

461
00:18:44,320 --> 00:18:45,310
we don't want to break these are

462
00:18:45,310 --> 00:18:46,360
invariants in the language that are

463
00:18:46,360 --> 00:18:49,440
important to preserve so triple equals

464
00:18:49,440 --> 00:18:51,790
notice that there's a base expression

465
00:18:51,790 --> 00:18:54,340
proxy triple equals Saabs there's no

466
00:18:54,340 --> 00:18:55,840
handler call for that it's object

467
00:18:55,840 --> 00:18:58,030
identity for objects that's all it is

468
00:18:58,030 --> 00:19:00,340
you cannot intercede there with a

469
00:19:00,340 --> 00:19:03,700
handler trap object not get prototype of

470
00:19:03,700 --> 00:19:05,710
which is kind of like the read-only form

471
00:19:05,710 --> 00:19:07,390
of double under our proto this other

472
00:19:07,390 --> 00:19:10,840
extension there's no way to lie about

473
00:19:10,840 --> 00:19:12,700
that that's the proto that was given to

474
00:19:12,700 --> 00:19:16,360
proxy dot create and we'll get into this

475
00:19:16,360 --> 00:19:18,220
a little more but I mentioned instance

476
00:19:18,220 --> 00:19:22,120
of is also looking at proto and type of

477
00:19:22,120 --> 00:19:24,160
for a proxy that's not a function proxy

478
00:19:24,160 --> 00:19:26,500
that that's what's coming next is object

479
00:19:26,500 --> 00:19:29,440
always object in the future we might be

480
00:19:29,440 --> 00:19:31,180
able to do something it would be a

481
00:19:31,180 --> 00:19:33,280
different thing from proxies themselves

482
00:19:33,280 --> 00:19:34,630
but it would be closely related would

483
00:19:34,630 --> 00:19:36,220
let you make value types we're looking

484
00:19:36,220 --> 00:19:39,310
at that but it's not not harmonious yet

485
00:19:39,310 --> 00:19:40,720
whereas proxies are and then are

486
00:19:40,720 --> 00:19:43,000
implemented so the full handler API

487
00:19:43,000 --> 00:19:45,070
looks like this it's it's quite a lot to

488
00:19:45,070 --> 00:19:45,670
take in

489
00:19:45,670 --> 00:19:48,130
I'll let you stare at it but you can see

490
00:19:48,130 --> 00:19:50,070
on the left are the base level

491
00:19:50,070 --> 00:19:52,690
expressions and on the right are the

492
00:19:52,690 --> 00:19:55,960
meta-level handler trap calls with the

493
00:19:55,960 --> 00:20:01,269
arguments that you expect and there's

494
00:20:01,269 --> 00:20:04,659
there's a bunch of these that are for

495
00:20:04,659 --> 00:20:06,700
the metaprogramming API and es5 there's

496
00:20:06,700 --> 00:20:09,220
some of them for the old delete and the

497
00:20:09,220 --> 00:20:11,109
es3 in operator things like that the

498
00:20:11,109 --> 00:20:16,539
foreign loop and to break it down a

499
00:20:16,539 --> 00:20:18,369
little further some of these traps are

500
00:20:18,369 --> 00:20:21,340
called fundamental because if you

501
00:20:21,340 --> 00:20:23,470
implement them the derived traps could

502
00:20:23,470 --> 00:20:26,139
be constructed for you by the virtual

503
00:20:26,139 --> 00:20:28,179
machine at some loss of efficiency so

504
00:20:28,179 --> 00:20:30,309
derive traps are there to allow a

505
00:20:30,309 --> 00:20:33,099
handler to optimize a little harder but

506
00:20:33,099 --> 00:20:36,489
they are not required derive traps have

507
00:20:36,489 --> 00:20:38,080
some interesting properties one of them

508
00:20:38,080 --> 00:20:40,029
that we've just been discussing this I

509
00:20:40,029 --> 00:20:41,970
think on its way to harmony status is

510
00:20:41,970 --> 00:20:44,259
instead of just enumerate which gives

511
00:20:44,259 --> 00:20:46,239
you an array of all the keys for

512
00:20:46,239 --> 00:20:47,919
innumerable properties when someone is a

513
00:20:47,919 --> 00:20:49,929
foreign loop on a proxy there should be

514
00:20:49,929 --> 00:20:51,759
a way on a very large object or an

515
00:20:51,759 --> 00:20:54,249
object that is a proxy for some

516
00:20:54,249 --> 00:20:56,379
indefinite stream of values to iterate

517
00:20:56,379 --> 00:20:58,720
lazily over those those values without

518
00:20:58,720 --> 00:21:00,159
having to make an array that has you

519
00:21:00,159 --> 00:21:02,499
know a billion elements in it and so

520
00:21:02,499 --> 00:21:03,309
there's a separate

521
00:21:03,309 --> 00:21:05,259
derived trap optional trap called

522
00:21:05,259 --> 00:21:07,119
iterate it returns an iterator and this

523
00:21:07,119 --> 00:21:09,039
is very much like the Python iteration

524
00:21:09,039 --> 00:21:11,229
protocol it's based on the work we did

525
00:21:11,229 --> 00:21:13,509
in json' 7 and it's cleaned up a bit and

526
00:21:13,509 --> 00:21:15,759
it fits right into proxies it's a

527
00:21:15,759 --> 00:21:17,769
perfect fit for dealing with the very

528
00:21:17,769 --> 00:21:20,340
large object case or the infinite stream

529
00:21:20,340 --> 00:21:26,769
value stream case now functions in

530
00:21:26,769 --> 00:21:27,970
JavaScript are a little different from

531
00:21:27,970 --> 00:21:32,379
objects it's all mysterious at first why

532
00:21:32,379 --> 00:21:34,840
this is maybe it's not because you write

533
00:21:34,840 --> 00:21:36,580
functions especially they have closures

534
00:21:36,580 --> 00:21:39,669
things like that so there are function

535
00:21:39,669 --> 00:21:40,869
proxies that you have to create

536
00:21:40,869 --> 00:21:42,669
differently because they have two

537
00:21:42,669 --> 00:21:45,999
additional traps beyond the ones that

538
00:21:45,999 --> 00:21:47,470
are in the handler and these are passed

539
00:21:47,470 --> 00:21:49,659
as separate arguments to proxy to create

540
00:21:49,659 --> 00:21:51,609
function and these are the call and

541
00:21:51,609 --> 00:21:54,009
construct traps and construct is

542
00:21:54,009 --> 00:21:55,239
optional if you don't provide it then

543
00:21:55,239 --> 00:21:58,210
the usual way that operator new works on

544
00:21:58,210 --> 00:22:00,340
a function is is used with the call trap

545
00:22:00,340 --> 00:22:05,019
so a function proxy has call ability

546
00:22:05,019 --> 00:22:06,509
there's fun props

547
00:22:06,509 --> 00:22:09,299
three and that turns into the call trap

548
00:22:09,299 --> 00:22:10,709
passed as an argument to proxy attack

549
00:22:10,709 --> 00:22:12,329
rate function being invoked with the

550
00:22:12,329 --> 00:22:15,959
arguments new phone proxy one to three

551
00:22:15,959 --> 00:22:20,820
calls the construct trap and getting the

552
00:22:20,820 --> 00:22:22,649
prototype of a function proxy you might

553
00:22:22,649 --> 00:22:23,309
want to do that

554
00:22:23,309 --> 00:22:25,919
we'll call handler get which is the same

555
00:22:25,919 --> 00:22:28,529
trap you have with with object proxies

556
00:22:28,529 --> 00:22:30,570
works for function proxies so function

557
00:22:30,570 --> 00:22:32,159
proxies are an extension of object

558
00:22:32,159 --> 00:22:36,899
proxies and type of doesn't lie and

559
00:22:36,899 --> 00:22:38,940
cannot lie type of always says function

560
00:22:38,940 --> 00:22:43,799
for a function proxy finally as you

561
00:22:43,799 --> 00:22:45,599
expect when you when you call get

562
00:22:45,599 --> 00:22:50,579
prototype of you get function dot

563
00:22:50,579 --> 00:22:51,629
prototype these things look like

564
00:22:51,629 --> 00:22:54,509
functions type of says it get prototype

565
00:22:54,509 --> 00:22:56,909
F says that you can find apply and call

566
00:22:56,909 --> 00:22:59,309
on their proto chain therefore those get

567
00:22:59,309 --> 00:23:00,899
trapped so you could always do something

568
00:23:00,899 --> 00:23:03,209
weird there's a little dilemma I wanted

569
00:23:03,209 --> 00:23:05,909
to talk about that that came up when we

570
00:23:05,909 --> 00:23:07,259
were doing no such method and that's

571
00:23:07,259 --> 00:23:10,409
that if you don't separate traps for

572
00:23:10,409 --> 00:23:13,429
getting a value of a property from

573
00:23:13,429 --> 00:23:16,259
getting that value whatever it is in

574
00:23:16,259 --> 00:23:18,779
order to invoke it as a method then you

575
00:23:18,779 --> 00:23:21,179
end up having to create a method on

576
00:23:21,179 --> 00:23:23,699
every call which kind of expensive so

577
00:23:23,699 --> 00:23:25,289
you end up having to memorize or cash

578
00:23:25,289 --> 00:23:29,129
memo eyes that that method so that you

579
00:23:29,129 --> 00:23:31,559
don't have a million calls construct a

580
00:23:31,559 --> 00:23:34,589
million methods and so at one point in

581
00:23:34,589 --> 00:23:37,889
design we had this invoked trap it

582
00:23:37,889 --> 00:23:40,109
doesn't seem necessary and it has some

583
00:23:40,109 --> 00:23:43,739
undesirable technical properties so we

584
00:23:43,739 --> 00:23:45,690
got rid of it it does mean that if if

585
00:23:45,690 --> 00:23:47,129
you're worried about this issue you're

586
00:23:47,129 --> 00:23:48,119
going to have to cash you have to

587
00:23:48,119 --> 00:23:52,919
memorize and again it when we were doing

588
00:23:52,919 --> 00:23:53,940
this kind of meta programming it's

589
00:23:53,940 --> 00:23:55,259
important to hold fast to some

590
00:23:55,259 --> 00:23:56,609
invariants like triple equals should

591
00:23:56,609 --> 00:23:59,099
work and this invariant you know it's

592
00:23:59,099 --> 00:24:01,289
not exactly written in my blood anywhere

593
00:24:01,289 --> 00:24:04,259
but it is important for existing code

594
00:24:04,259 --> 00:24:05,819
we've seen this on the web and it ought

595
00:24:05,819 --> 00:24:07,649
to be preserved we think in the absence

596
00:24:07,649 --> 00:24:10,289
of other evidence so we got rid of the

597
00:24:10,289 --> 00:24:15,469
invoked trap now proxies can do

598
00:24:15,469 --> 00:24:17,969
everything almost everything except lie

599
00:24:17,969 --> 00:24:19,300
about type of

600
00:24:19,300 --> 00:24:22,120
get prototype of that an object can do

601
00:24:22,120 --> 00:24:25,600
but what's really cool is how they give

602
00:24:25,600 --> 00:24:27,040
you the developer's power that

603
00:24:27,040 --> 00:24:30,880
previously has only been in the domain

604
00:24:30,880 --> 00:24:32,350
of I would say that the browser

605
00:24:32,350 --> 00:24:34,360
implementers who write C++ not even the

606
00:24:34,360 --> 00:24:36,550
ecla committee because we're kind of the

607
00:24:36,550 --> 00:24:37,990
people who formalize what the browser

608
00:24:37,990 --> 00:24:39,970
vendors do and now in this era of

609
00:24:39,970 --> 00:24:41,380
harmony we're trying to actually work

610
00:24:41,380 --> 00:24:43,090
together to prototype the next

611
00:24:43,090 --> 00:24:44,470
generation that ends up being

612
00:24:44,470 --> 00:24:46,630
implemented in C++ code but there's no

613
00:24:46,630 --> 00:24:48,070
good reason why this should have to be

614
00:24:48,070 --> 00:24:50,650
in C++ code you know everything from

615
00:24:50,650 --> 00:24:52,960
java javascript everything for the 90s

616
00:24:52,960 --> 00:24:54,700
was done in a hurry was done backwards

617
00:24:54,700 --> 00:24:55,990
while java actually took five years i

618
00:24:55,990 --> 00:24:56,790
don't know why they didn't do it right

619
00:24:56,790 --> 00:25:00,120
small talk did it right small talk took

620
00:25:00,120 --> 00:25:02,080
decade but it got to the point where

621
00:25:02,080 --> 00:25:03,700
everything was bootstrapped on a very

622
00:25:03,700 --> 00:25:05,800
small amount of native machine code or

623
00:25:05,800 --> 00:25:07,930
native assembly or basic originally and

624
00:25:07,930 --> 00:25:10,900
it was mostly mostly written in small

625
00:25:10,900 --> 00:25:12,280
talk which is beautiful and wonderful i

626
00:25:12,280 --> 00:25:14,760
kept things honest and preserved the

627
00:25:14,760 --> 00:25:16,960
uniformity and meta programmability of

628
00:25:16,960 --> 00:25:19,150
the system it got rid of weird host

629
00:25:19,150 --> 00:25:21,820
objects exceptions and loopholes and

630
00:25:21,820 --> 00:25:24,310
more's the pity javascript wasn't built

631
00:25:24,310 --> 00:25:26,350
that way but there wasn't time on the

632
00:25:26,350 --> 00:25:27,910
other hand with proxies we can kind of

633
00:25:27,910 --> 00:25:30,130
rebuild the world incremental ii and we

634
00:25:30,130 --> 00:25:31,900
can give you the power to do it by

635
00:25:31,900 --> 00:25:33,940
writing handlers creating proxies and

636
00:25:33,940 --> 00:25:38,200
doing selective interception so you know

637
00:25:38,200 --> 00:25:40,420
it's been great fun haha not really I'm

638
00:25:40,420 --> 00:25:42,060
being sarcastic to write a bunch of C++

639
00:25:42,060 --> 00:25:45,070
native code that shows up as JavaScript

640
00:25:45,070 --> 00:25:46,810
objects it's really not fun it's

641
00:25:46,810 --> 00:25:48,220
constantly taking your life in your

642
00:25:48,220 --> 00:25:51,010
hands with security and in memory leaks

643
00:25:51,010 --> 00:25:52,480
and all sorts of problems every browser

644
00:25:52,480 --> 00:25:54,760
vendor faces this there's no no one is

645
00:25:54,760 --> 00:25:58,060
safe no one is innocent but javascript

646
00:25:58,060 --> 00:26:00,430
has been debugged that may have noticed

647
00:26:00,430 --> 00:26:04,270
it's got law faster putting this ability

648
00:26:04,270 --> 00:26:05,950
to selectively intercept it do this kind

649
00:26:05,950 --> 00:26:08,320
of stratified dynamic proxies

650
00:26:08,320 --> 00:26:10,090
metaprogramming in the hands of

651
00:26:10,090 --> 00:26:14,830
developers actually is not unsafe

652
00:26:14,830 --> 00:26:16,990
compared to writing more sequel code +

653
00:26:16,990 --> 00:26:19,720
code it's it's more safe and it again

654
00:26:19,720 --> 00:26:21,520
will help with distributed innovation in

655
00:26:21,520 --> 00:26:24,940
extensibility so this is what we hope to

656
00:26:24,940 --> 00:26:27,340
do and then we we have to draw a hard

657
00:26:27,340 --> 00:26:30,090
line between the C++ code still and the

658
00:26:30,090 --> 00:26:32,679
JavaScript code

659
00:26:32,679 --> 00:26:34,779
we want self-hosting we want to rebuild

660
00:26:34,779 --> 00:26:36,090
the world that small talk had

661
00:26:36,090 --> 00:26:38,110
incrementally with all your help we want

662
00:26:38,110 --> 00:26:40,299
to get to the mostly self-hosted very

663
00:26:40,299 --> 00:26:42,159
little native code nirvana it's going to

664
00:26:42,159 --> 00:26:44,020
take a long time don't know if I'll make

665
00:26:44,020 --> 00:26:45,700
it but props you seem like an important

666
00:26:45,700 --> 00:26:47,529
ingredient otherwise I don't see how

667
00:26:47,529 --> 00:26:50,620
we'll get there we do not want random

668
00:26:50,620 --> 00:26:53,919
objects created for the Dom or I don't

669
00:26:53,919 --> 00:26:55,960
know JavaScript a reg X of object to

670
00:26:55,960 --> 00:26:57,940
suddenly start sprouting handlers that

671
00:26:57,940 --> 00:26:59,740
can change their behavior from what

672
00:26:59,740 --> 00:27:01,570
existing code expects what programmers

673
00:27:01,570 --> 00:27:04,750
expect so that's why proxies have to be

674
00:27:04,750 --> 00:27:07,240
created fresh as kind of blank objects

675
00:27:07,240 --> 00:27:09,070
with this behavioral intercession power

676
00:27:09,070 --> 00:27:12,100
you cannot tap a handler onto an

677
00:27:12,100 --> 00:27:13,890
existing object and that's an important

678
00:27:13,890 --> 00:27:17,890
design point so here's a simple example

679
00:27:17,890 --> 00:27:20,710
of a forwarding proxy it's given an

680
00:27:20,710 --> 00:27:24,159
object it captures it the property on

681
00:27:24,159 --> 00:27:26,250
this so it's meant to be called via new

682
00:27:26,250 --> 00:27:29,049
you could do with closures to not worry

683
00:27:29,049 --> 00:27:32,620
about this or new and this handler will

684
00:27:32,620 --> 00:27:35,049
simply forward all the fundamental traps

685
00:27:35,049 --> 00:27:37,240
or the ones I cared to write to the

686
00:27:37,240 --> 00:27:39,429
target object so it's just a pass

687
00:27:39,429 --> 00:27:43,120
through and it's just a way of creating

688
00:27:43,120 --> 00:27:45,640
a sort of a no op proxy and it's handy

689
00:27:45,640 --> 00:27:46,919
to have these things around when you

690
00:27:46,919 --> 00:27:49,240
need to stick a proxy somewhere that's

691
00:27:49,240 --> 00:27:50,529
not going to do anything or you want to

692
00:27:50,529 --> 00:27:52,929
sort of build on its bones to add some

693
00:27:52,929 --> 00:27:58,390
logging or some something so this is

694
00:27:58,390 --> 00:28:01,450
kind of the sort of proxies my first

695
00:28:01,450 --> 00:28:03,909
proxy example and at the bottom you see

696
00:28:03,909 --> 00:28:05,980
how proxy dot create is given the

697
00:28:05,980 --> 00:28:07,990
handler which is constructed by calling

698
00:28:07,990 --> 00:28:10,929
this this constructor and the prototype

699
00:28:10,929 --> 00:28:14,230
of the target object so that the proxy

700
00:28:14,230 --> 00:28:19,480
looks like it has the same prototype and

701
00:28:19,480 --> 00:28:22,179
here's a somewhat less vacuous example

702
00:28:22,179 --> 00:28:23,890
this one will actually count all gets

703
00:28:23,890 --> 00:28:27,640
and it it has to be able to start from

704
00:28:27,640 --> 00:28:31,630
an undefined count it so count all

705
00:28:31,630 --> 00:28:36,940
access is actually and returned them in

706
00:28:36,940 --> 00:28:39,010
a stats property that there's a getter

707
00:28:39,010 --> 00:28:44,620
for the the idea of counting all gets

708
00:28:44,620 --> 00:28:45,700
here could be

709
00:28:45,700 --> 00:28:46,929
otherwise you could write a bunch of

710
00:28:46,929 --> 00:28:51,789
counters one for each kind of trap that

711
00:28:51,789 --> 00:28:53,200
might be a little tedious but you could

712
00:28:53,200 --> 00:28:56,260
do it and you can make a simple profile

713
00:28:56,260 --> 00:28:59,470
or just counting gets in this case could

714
00:28:59,470 --> 00:29:00,039
be handy

715
00:29:00,039 --> 00:29:02,289
just seeing the counts of operations

716
00:29:02,289 --> 00:29:06,130
enzymes helps you find bugs now in es5

717
00:29:06,130 --> 00:29:10,929
there's a way to freeze seal prevent

718
00:29:10,929 --> 00:29:12,789
extensions these turn into something

719
00:29:12,789 --> 00:29:17,649
called the fix trap and all three of

720
00:29:17,649 --> 00:29:19,929
these work through the same trap there's

721
00:29:19,929 --> 00:29:22,750
no difference because as I mentioned

722
00:29:22,750 --> 00:29:24,309
earlier it's prevent extensions that

723
00:29:24,309 --> 00:29:27,159
actually is fixing the object so that

724
00:29:27,159 --> 00:29:29,889
cannot be extended and the other ones go

725
00:29:29,889 --> 00:29:31,090
through all the properties and do

726
00:29:31,090 --> 00:29:32,559
further things like limit their

727
00:29:32,559 --> 00:29:33,700
configurability limit their write

728
00:29:33,700 --> 00:29:37,570
ability seal limits configurability

729
00:29:37,570 --> 00:29:40,740
removes it and freeze does that and

730
00:29:40,740 --> 00:29:42,760
removes write ability makes things

731
00:29:42,760 --> 00:29:46,029
read-only so those those can be

732
00:29:46,029 --> 00:29:47,889
expressed in other traps but it's the

733
00:29:47,889 --> 00:29:49,299
fixed trap that is the fundamental one

734
00:29:49,299 --> 00:29:52,779
for all these three of these these new

735
00:29:52,779 --> 00:29:56,309
es5 methods for hardening objects and

736
00:29:56,309 --> 00:29:58,389
what's really suck about this is another

737
00:29:58,389 --> 00:30:01,090
small talk-- thing in order to make fix

738
00:30:01,090 --> 00:30:03,549
work we actually do something at mobile

739
00:30:03,549 --> 00:30:05,200
calling brain transplants we make a

740
00:30:05,200 --> 00:30:08,590
brand new object that's frozen that's

741
00:30:08,590 --> 00:30:10,950
based on the property descriptors that

742
00:30:10,950 --> 00:30:14,019
are returned by fix so you can you can

743
00:30:14,019 --> 00:30:15,880
specify what the object becomes when

744
00:30:15,880 --> 00:30:17,320
it's fixed and it doesn't just get those

745
00:30:17,320 --> 00:30:19,330
properties it becomes that object this

746
00:30:19,330 --> 00:30:21,610
read become primitive it's not in the

747
00:30:21,610 --> 00:30:23,440
language it's it's one of these things

748
00:30:23,440 --> 00:30:25,269
that's that's definitely backstage of

749
00:30:25,269 --> 00:30:28,389
reality in the VM it swaps the guts or

750
00:30:28,389 --> 00:30:30,100
the brains of two objects so that the

751
00:30:30,100 --> 00:30:32,950
object identity of the of the proxy

752
00:30:32,950 --> 00:30:34,960
being fixed is preserved but it

753
00:30:34,960 --> 00:30:36,850
literally stops being a proxy it stops

754
00:30:36,850 --> 00:30:40,419
being this magic object that can call

755
00:30:40,419 --> 00:30:42,279
traps on it from its handler and becomes

756
00:30:42,279 --> 00:30:45,370
a plain old object and the plain ol

757
00:30:45,370 --> 00:30:46,450
object that was created here of course

758
00:30:46,450 --> 00:30:47,710
becomes the proxy and then becomes

759
00:30:47,710 --> 00:30:50,049
garbage collected because it's it's it's

760
00:30:50,049 --> 00:30:51,809
not retained there's no reference to it

761
00:30:51,809 --> 00:30:54,940
that's pretty cool and that guarantees

762
00:30:54,940 --> 00:30:57,700
that that you will never go back from

763
00:30:57,700 --> 00:30:58,809
being fixed

764
00:30:58,809 --> 00:31:00,940
and yet you preserve the identity of the

765
00:31:00,940 --> 00:31:02,830
proxy once it is fixed and becomes a

766
00:31:02,830 --> 00:31:09,909
regular object okay so this sounds kind

767
00:31:09,909 --> 00:31:10,750
of cool maybe it sounds a little

768
00:31:10,750 --> 00:31:13,450
abstract it sounds like I don't know you

769
00:31:13,450 --> 00:31:14,490
know

770
00:31:14,490 --> 00:31:19,299
platon ism or something something weird

771
00:31:19,299 --> 00:31:22,780
like Gnosticism but there is a meta

772
00:31:22,780 --> 00:31:25,120
level that is above or backstage of the

773
00:31:25,120 --> 00:31:27,520
reality and this meta programming lets

774
00:31:27,520 --> 00:31:29,500
you get it and proxies in particular let

775
00:31:29,500 --> 00:31:33,280
you make an object behave like anything

776
00:31:33,280 --> 00:31:37,539
and if if you write all these traps you

777
00:31:37,539 --> 00:31:39,610
can do that and that that's that's 13

778
00:31:39,610 --> 00:31:41,650
traps that's a mouthful but what's what

779
00:31:41,650 --> 00:31:42,909
this will blow your mind what you can do

780
00:31:42,909 --> 00:31:44,590
if you're if you don't want to do that

781
00:31:44,590 --> 00:31:49,000
is you can make a proxy whose handler is

782
00:31:49,000 --> 00:31:52,299
a proxy so you can climb up the meta

783
00:31:52,299 --> 00:31:54,610
ladder so-called put up the meta ladder

784
00:31:54,610 --> 00:31:59,230
one rung and write a new handler I think

785
00:31:59,230 --> 00:32:02,980
that's legal Unicode identifier for the

786
00:32:02,980 --> 00:32:05,860
handler so the proxy has a handler the

787
00:32:05,860 --> 00:32:07,750
handler is a proxy it has a handler and

788
00:32:07,750 --> 00:32:10,030
every time the handlers traps are called

789
00:32:10,030 --> 00:32:12,070
by the virtual machine when you do some

790
00:32:12,070 --> 00:32:14,950
base level operation on the proxy the

791
00:32:14,950 --> 00:32:19,570
handler calls turn into meta handler

792
00:32:19,570 --> 00:32:22,990
traps get traps so the meta handler only

793
00:32:22,990 --> 00:32:24,820
needs to have the get trap and then it

794
00:32:24,820 --> 00:32:27,760
can do whatever it needs to do to create

795
00:32:27,760 --> 00:32:35,169
or find those 13 traps and that that

796
00:32:35,169 --> 00:32:37,929
actually is handy for if we go back to

797
00:32:37,929 --> 00:32:44,730
this example of counting see where it is

798
00:32:44,730 --> 00:32:47,500
counting get operations remember that

799
00:32:47,500 --> 00:32:52,840
one the the example here only trapped

800
00:32:52,840 --> 00:32:55,929
get and I said you could write out get

801
00:32:55,929 --> 00:32:58,929
set has they're all 13 of them but you

802
00:32:58,929 --> 00:33:02,559
don't have to instead you can exchange

803
00:33:02,559 --> 00:33:05,350
this example so that it uses a proxy as

804
00:33:05,350 --> 00:33:08,020
the handler and the that meta handler

805
00:33:08,020 --> 00:33:10,809
has a get and all it does is count the

806
00:33:10,809 --> 00:33:12,659
named operation

807
00:33:12,659 --> 00:33:15,450
it's being trapped by the handler so

808
00:33:15,450 --> 00:33:17,639
it's meta meta we're getting meta on

809
00:33:17,639 --> 00:33:20,999
meta but that's cool and there's there's

810
00:33:20,999 --> 00:33:24,029
some great power there in not writing

811
00:33:24,029 --> 00:33:26,099
things out too long and also in sort of

812
00:33:26,099 --> 00:33:29,609
automating construction of rappers or

813
00:33:29,609 --> 00:33:31,710
what are called membranes and so let me

814
00:33:31,710 --> 00:33:34,379
talk about that these are actually used

815
00:33:34,379 --> 00:33:36,419
in Firefox for security for cross-site

816
00:33:36,419 --> 00:33:39,090
scripting for the privileged Zul scripts

817
00:33:39,090 --> 00:33:41,399
to isolate them from the unprivileged

818
00:33:41,399 --> 00:33:44,099
web content we have like seven flavors

819
00:33:44,099 --> 00:33:45,869
of these and we've got them all kind of

820
00:33:45,869 --> 00:33:47,340
rationalized and they've all been

821
00:33:47,340 --> 00:33:49,619
rebuilt in Firefox 4 on top of how many

822
00:33:49,619 --> 00:33:51,809
proxies there's a good history research

823
00:33:51,809 --> 00:33:53,909
here mark Miller's thesis and he writes

824
00:33:53,909 --> 00:33:54,479
org

825
00:33:54,479 --> 00:33:56,909
it's obviously fed directly into google

826
00:33:56,909 --> 00:33:59,580
kaha the capabilities secure a subset of

827
00:33:59,580 --> 00:34:02,879
JavaScript that uses membranes also the

828
00:34:02,879 --> 00:34:04,259
simplest use case in the object

829
00:34:04,259 --> 00:34:06,389
capability world is that you want to

830
00:34:06,389 --> 00:34:09,000
limit the authority of objects you want

831
00:34:09,000 --> 00:34:11,129
to use the principle least authority but

832
00:34:11,129 --> 00:34:12,780
when you when you give your logic throw

833
00:34:12,780 --> 00:34:13,859
you do it by giving them an object

834
00:34:13,859 --> 00:34:15,809
reference well what if you want to take

835
00:34:15,809 --> 00:34:18,539
that away later that's hard to do unless

836
00:34:18,539 --> 00:34:20,760
you have something like a revocable

837
00:34:20,760 --> 00:34:24,359
membrane some-some way of saying no more

838
00:34:24,359 --> 00:34:27,149
access something like a proxy so you can

839
00:34:27,149 --> 00:34:31,139
share enough build membranes with with

840
00:34:31,139 --> 00:34:35,010
proxies and here's a fine object ability

841
00:34:35,010 --> 00:34:38,760
diagram showing how you can do this it's

842
00:34:38,760 --> 00:34:44,220
kind of artistic I'll leave you leave it

843
00:34:44,220 --> 00:34:45,809
to people to figure out what's going on

844
00:34:45,809 --> 00:34:53,099
there but when we get no unicorns so so

845
00:34:53,099 --> 00:34:54,779
the code is what everyone's going to

846
00:34:54,779 --> 00:34:55,740
read because I know you want to read

847
00:34:55,740 --> 00:34:59,640
code before you have beer what's really

848
00:34:59,640 --> 00:35:00,720
cool is that I'm going to start with

849
00:35:00,720 --> 00:35:01,890
this and build in toward the middle this

850
00:35:01,890 --> 00:35:03,740
is an example that the mark and Tom had

851
00:35:03,740 --> 00:35:07,829
it shows the power of the meta handler

852
00:35:07,829 --> 00:35:12,990
the ability to to rift traps from the

853
00:35:12,990 --> 00:35:15,150
handler into the meta level with one

854
00:35:15,150 --> 00:35:18,210
piece of code so we're going to wrap

855
00:35:18,210 --> 00:35:20,849
some target objects and it better be an

856
00:35:20,849 --> 00:35:22,020
object and it's printer we're just going

857
00:35:22,020 --> 00:35:24,150
to get it back we're going to make a

858
00:35:24,150 --> 00:35:24,960
forwarding hands

859
00:35:24,960 --> 00:35:25,950
I saw that already it's the snow

860
00:35:25,950 --> 00:35:28,589
pastoring thing we're going to make a

861
00:35:28,589 --> 00:35:32,130
revoke Handler and it has a rope handler

862
00:35:32,130 --> 00:35:35,339
that is a proxy reveal Candler is proxy

863
00:35:35,339 --> 00:35:37,530
up creative handler that is a proxy and

864
00:35:37,530 --> 00:35:40,410
its handler has only a get trap and that

865
00:35:40,410 --> 00:35:42,630
get trap whatever it's being called with

866
00:35:42,630 --> 00:35:44,160
remember it's only being called with

867
00:35:44,160 --> 00:35:45,270
whatever is calling the handler and

868
00:35:45,270 --> 00:35:46,920
unless you do something to the handler

869
00:35:46,920 --> 00:35:48,660
that's only going to be one of those

870
00:35:48,660 --> 00:35:52,619
thirteen trap names so get set has that

871
00:35:52,619 --> 00:35:53,520
name is going to be one of those

872
00:35:53,520 --> 00:35:54,630
searching names you're going to wrap

873
00:35:54,630 --> 00:35:57,690
that base handler and reflect it back

874
00:35:57,690 --> 00:36:02,760
into the the base level and you have to

875
00:36:02,760 --> 00:36:04,080
handle functions differently of course

876
00:36:04,080 --> 00:36:05,640
so there's a special case for create

877
00:36:05,640 --> 00:36:08,700
function otherwise this thing will just

878
00:36:08,700 --> 00:36:11,190
sort of recursively wrap an object you

879
00:36:11,190 --> 00:36:13,349
give it in a membrane and the membrane

880
00:36:13,349 --> 00:36:15,839
will make sure that all the traps

881
00:36:15,839 --> 00:36:18,720
whatever they are go through something

882
00:36:18,720 --> 00:36:20,400
that I haven't shown yet which is coming

883
00:36:20,400 --> 00:36:22,080
wrap function and what does wrap

884
00:36:22,080 --> 00:36:23,609
function do well it's normally going to

885
00:36:23,609 --> 00:36:26,040
just apply the trap let you do your

886
00:36:26,040 --> 00:36:27,900
membrane thing which is the forwarding

887
00:36:27,900 --> 00:36:29,820
thing this is the capability you've

888
00:36:29,820 --> 00:36:31,230
given that you want to go to revoke it

889
00:36:31,230 --> 00:36:34,890
but if the enabled flag has been set to

890
00:36:34,890 --> 00:36:36,300
false then it's going to throw an error

891
00:36:36,300 --> 00:36:38,849
and that's that's revoked so this simple

892
00:36:38,849 --> 00:36:41,430
one-page example shows it's not that

893
00:36:41,430 --> 00:36:42,690
simple but it's pretty simple

894
00:36:42,690 --> 00:36:44,609
this shows how you can use proxies to do

895
00:36:44,609 --> 00:36:47,880
something that is taken for me we did it

896
00:36:47,880 --> 00:36:50,130
C++ it's a lot of C++ it's very bug

897
00:36:50,130 --> 00:36:53,210
prone it's conceptually simple but but

898
00:36:53,210 --> 00:36:55,589
complicated to implement but here is

899
00:36:55,589 --> 00:36:57,359
it's it's fairly comprehensible it's

900
00:36:57,359 --> 00:36:57,810
very pretty

901
00:36:57,810 --> 00:36:59,460
and you don't have to write out those

902
00:36:59,460 --> 00:37:01,320
thirteen trap names you just use this

903
00:37:01,320 --> 00:37:04,109
this meta handler and you have a

904
00:37:04,109 --> 00:37:08,640
revocable membrane so this is all based

905
00:37:08,640 --> 00:37:11,490
on Tom Marx very good work and that's

906
00:37:11,490 --> 00:37:15,270
based on prior work Tom van cooked some

907
00:37:15,270 --> 00:37:17,099
others his colleagues at the Free

908
00:37:17,099 --> 00:37:18,540
University of Belgium and other places

909
00:37:18,540 --> 00:37:20,040
have been working on ambient talk which

910
00:37:20,040 --> 00:37:21,300
is in the small talk family in the e

911
00:37:21,300 --> 00:37:24,660
family and they had a meta programming

912
00:37:24,660 --> 00:37:28,980
system that was called mirages based on

913
00:37:28,980 --> 00:37:30,839
mirrors mirrors is a old paper from

914
00:37:30,839 --> 00:37:32,849
David hunger and Gilad bracha about how

915
00:37:32,849 --> 00:37:34,440
when you do meta programming you want it

916
00:37:34,440 --> 00:37:35,020
to be strapped

917
00:37:35,020 --> 00:37:36,280
I've been using that word what does that

918
00:37:36,280 --> 00:37:38,320
mean well it means no more double

919
00:37:38,320 --> 00:37:40,180
underbar proto double underbar no more

920
00:37:40,180 --> 00:37:41,830
double underbar no such method the

921
00:37:41,830 --> 00:37:43,450
blonde or because for one thing sticking

922
00:37:43,450 --> 00:37:46,270
those properties at the base level means

923
00:37:46,270 --> 00:37:47,920
you can't intercede for those names what

924
00:37:47,920 --> 00:37:49,660
if somebody has a database or a JSON

925
00:37:49,660 --> 00:37:50,950
file and they have double wonder or

926
00:37:50,950 --> 00:37:53,310
Frodo in it they're kind of hosts

927
00:37:53,310 --> 00:37:54,910
stratification means that there's a

928
00:37:54,910 --> 00:37:58,960
mirror backstage of reality and you

929
00:37:58,960 --> 00:38:01,570
reflect the object off of it and that's

930
00:38:01,570 --> 00:38:02,980
how you do meta programming you kind of

931
00:38:02,980 --> 00:38:07,450
bend the mirror so this isn't a complete

932
00:38:07,450 --> 00:38:09,369
picture of the prior work but it's the

933
00:38:09,369 --> 00:38:10,810
directly influential for our work it

934
00:38:10,810 --> 00:38:12,190
does go back to small talk like almost

935
00:38:12,190 --> 00:38:15,369
everything and you know the number of

936
00:38:15,369 --> 00:38:18,730
traps in these systems varies but 13:8

937
00:38:18,730 --> 00:38:20,290
bad take it from me

938
00:38:20,290 --> 00:38:23,369
Java seems like the winner here with one

939
00:38:23,369 --> 00:38:25,780
trap but it's not really a trap it's a

940
00:38:25,780 --> 00:38:28,150
whole no class I'm not sure that this is

941
00:38:28,150 --> 00:38:38,219
counted fairly and anyway Java sucks so

942
00:38:38,229 --> 00:38:40,819
so why are we doing this why am i

943
00:38:40,819 --> 00:38:42,499
telling you about this I hope that this

944
00:38:42,499 --> 00:38:44,239
is interest interested you and piqued

945
00:38:44,239 --> 00:38:46,999
your curiosity we're trying to solve

946
00:38:46,999 --> 00:38:49,969
some problems as browser vendors and as

947
00:38:49,969 --> 00:38:52,459
responsible stewards of JavaScript we

948
00:38:52,459 --> 00:38:58,489
want to make host objects saying and we

949
00:38:58,489 --> 00:39:01,160
want to give programmers the power that

950
00:39:01,160 --> 00:39:04,279
is so far been only in the domain of the

951
00:39:04,279 --> 00:39:08,420
C++ browser hackers proxies look like

952
00:39:08,420 --> 00:39:10,119
they're sufficiently powerful to do this

953
00:39:10,119 --> 00:39:12,859
they allow us to self host more and more

954
00:39:12,859 --> 00:39:13,999
we're using them for these security

955
00:39:13,999 --> 00:39:16,519
wrappers in Firefox for the handlers our

956
00:39:16,519 --> 00:39:18,469
C++ by the way that we're not that crazy

957
00:39:18,469 --> 00:39:19,849
but we're going to get there I think

958
00:39:19,849 --> 00:39:21,529
we're going to get to the promised land

959
00:39:21,529 --> 00:39:22,849
of almost everything written in

960
00:39:22,849 --> 00:39:24,859
JavaScript with the performance work

961
00:39:24,859 --> 00:39:26,749
that's going on and and this kind of

962
00:39:26,749 --> 00:39:28,729
meta programming work in principle

963
00:39:28,729 --> 00:39:30,170
there's no reason why we can't get rid

964
00:39:30,170 --> 00:39:31,789
of this you know megabytes of native

965
00:39:31,789 --> 00:39:34,099
code that were burdened with from the

966
00:39:34,099 --> 00:39:38,180
past now you could say host objects

967
00:39:38,180 --> 00:39:40,130
still can do you know weird-ass stuff

968
00:39:40,130 --> 00:39:41,779
that they shouldn't do or maybe that

969
00:39:41,779 --> 00:39:43,579
might be good the proxies can't do so

970
00:39:43,579 --> 00:39:45,769
we're thinking about should we make

971
00:39:45,769 --> 00:39:47,180
proxies even more powerful

972
00:39:47,180 --> 00:39:48,709
maybe we should somehow make host

973
00:39:48,709 --> 00:39:50,509
objects only as powerful as proxies and

974
00:39:50,509 --> 00:39:52,729
we're serious about this in every

975
00:39:52,729 --> 00:39:53,930
javascript engine including spider

976
00:39:53,930 --> 00:39:56,239
monkey there's something like the proxy

977
00:39:56,239 --> 00:39:58,519
api but it's not quite as clever it

978
00:39:58,519 --> 00:40:00,229
doesn't have this becomes primitive I

979
00:40:00,229 --> 00:40:02,359
probably doesn't have all the es5 traps

980
00:40:02,359 --> 00:40:05,660
but it has you know virtual methods for

981
00:40:05,660 --> 00:40:07,519
calling get and set on arbitrary objects

982
00:40:07,519 --> 00:40:08,660
and that's how people implement things

983
00:40:08,660 --> 00:40:13,069
like you know the Dom or a live connect

984
00:40:13,069 --> 00:40:16,489
the Java reflection we would like in

985
00:40:16,489 --> 00:40:18,829
spider monkey to make that API that

986
00:40:18,829 --> 00:40:23,779
internal virtual method table be proxies

987
00:40:23,779 --> 00:40:26,089
only proxies so there's nothing that

988
00:40:26,089 --> 00:40:28,819
hosts object can do that a proxy can't

989
00:40:28,819 --> 00:40:30,979
do and we're serious about this and will

990
00:40:30,979 --> 00:40:32,989
help us with with maintainability and

991
00:40:32,989 --> 00:40:35,329
sanity it would make life better for us

992
00:40:35,329 --> 00:40:37,009
and for all the JavaScript developers

993
00:40:37,009 --> 00:40:40,069
and I think people in equities 39 from

994
00:40:40,069 --> 00:40:41,930
other browser vendors see this too I

995
00:40:41,930 --> 00:40:43,910
know I've talked to Allen worse Rock and

996
00:40:43,910 --> 00:40:46,009
Microsoft about this and Travis Lee head

997
00:40:46,009 --> 00:40:48,349
of Microsoft I think they get it it

998
00:40:48,349 --> 00:40:50,070
might take a while

999
00:40:50,070 --> 00:40:51,810
but it looks good to those of us who are

1000
00:40:51,810 --> 00:40:54,840
working on it so this was presented this

1001
00:40:54,840 --> 00:40:56,700
past year at tc39 meetings there was a

1002
00:40:56,700 --> 00:40:59,160
lot of good obvious at prior work and

1003
00:40:59,160 --> 00:41:02,250
small talk in an academic research it

1004
00:41:02,250 --> 00:41:04,620
actually got approved in our sort of

1005
00:41:04,620 --> 00:41:07,620
semi formal process it became harmony

1006
00:41:07,620 --> 00:41:09,510
proposal so it's very likely to get into

1007
00:41:09,510 --> 00:41:12,360
the next edition of the language and the

1008
00:41:12,360 --> 00:41:14,070
spec is excellent Tom and Mark did great

1009
00:41:14,070 --> 00:41:14,730
work

1010
00:41:14,730 --> 00:41:16,440
tom has followed through on a number of

1011
00:41:16,440 --> 00:41:19,260
points diligently and what's even more

1012
00:41:19,260 --> 00:41:20,970
gratifying is on address gal ran off and

1013
00:41:20,970 --> 00:41:22,140
implemented it in like a weekend in

1014
00:41:22,140 --> 00:41:24,510
Firefox in SpiderMonkey in this past

1015
00:41:24,510 --> 00:41:26,520
spring and we started using it for our

1016
00:41:26,520 --> 00:41:28,620
security wrappers this was ahead of what

1017
00:41:28,620 --> 00:41:30,570
I thought would happen and it's also

1018
00:41:30,570 --> 00:41:32,550
being used for something called Zaphod I

1019
00:41:32,550 --> 00:41:34,130
don't know if anybody's heard of Zaphod

1020
00:41:34,130 --> 00:41:35,580
cool yeah

1021
00:41:35,580 --> 00:41:39,240
I'll talk about that after that is the

1022
00:41:39,240 --> 00:41:41,010
old narcissus meta-circular evaluator I

1023
00:41:41,010 --> 00:41:43,950
wrote as a Firefox plugin you can

1024
00:41:43,950 --> 00:41:45,990
substitute in place of spider monkey and

1025
00:41:45,990 --> 00:41:48,150
run is a very slow scripting engine for

1026
00:41:48,150 --> 00:41:49,800
your webpage but you can use it as a

1027
00:41:49,800 --> 00:41:51,450
research VM you can extend the language

1028
00:41:51,450 --> 00:41:52,890
very easily because it's JavaScript you

1029
00:41:52,890 --> 00:41:55,050
can hack in new syntax you can you know

1030
00:41:55,050 --> 00:41:56,340
do what you want

1031
00:41:56,340 --> 00:41:59,070
Zaphod this on a Don Sutton's law that

1032
00:41:59,070 --> 00:42:01,610
Oregon sand add-on it's on github you

1033
00:42:01,610 --> 00:42:04,230
know safe hovels kind of vain too so we

1034
00:42:04,230 --> 00:42:06,390
kind of went with narcissus theme he had

1035
00:42:06,390 --> 00:42:10,050
two heads there's a big picture point

1036
00:42:10,050 --> 00:42:11,040
here I want to make and this is

1037
00:42:11,040 --> 00:42:13,710
important for other standards bodies to

1038
00:42:13,710 --> 00:42:15,720
learn from it's it's not perfect Annette

1039
00:42:15,720 --> 00:42:18,390
MA we're not bragging but right now we

1040
00:42:18,390 --> 00:42:19,560
have something that seems to be working

1041
00:42:19,560 --> 00:42:20,970
we need to roll with it because the

1042
00:42:20,970 --> 00:42:22,170
alternative doesn't look good it looks

1043
00:42:22,170 --> 00:42:25,500
like individual innovation where other

1044
00:42:25,500 --> 00:42:28,230
people have to catch up which we've done

1045
00:42:28,230 --> 00:42:30,540
of necessity I think we didn't want to

1046
00:42:30,540 --> 00:42:33,300
just do nothing but what we're doing in

1047
00:42:33,300 --> 00:42:36,200
tc39 is we're taking well-informed

1048
00:42:36,200 --> 00:42:38,280
practically oriented academic research

1049
00:42:38,280 --> 00:42:42,120
and researchers we're taking the

1050
00:42:42,120 --> 00:42:43,680
attitude that standards must evolve

1051
00:42:43,680 --> 00:42:45,090
because there are gaps in the language

1052
00:42:45,090 --> 00:42:46,080
there are problems that need to be

1053
00:42:46,080 --> 00:42:47,910
solved for JavaScript developers for

1054
00:42:47,910 --> 00:42:50,190
browser vendors you cannot solve these

1055
00:42:50,190 --> 00:42:52,890
problems by going into the tower and

1056
00:42:52,890 --> 00:42:55,350
writing some perfect paper and then

1057
00:42:55,350 --> 00:42:57,360
coming out with with a standard you have

1058
00:42:57,360 --> 00:43:00,060
to do a prototype implementation due to

1059
00:43:00,060 --> 00:43:01,500
prototype implementation to test

1060
00:43:01,500 --> 00:43:03,340
interoperation ideally do do more

1061
00:43:03,340 --> 00:43:05,470
- and you need a lot of user testing

1062
00:43:05,470 --> 00:43:07,660
because it's a large search space to

1063
00:43:07,660 --> 00:43:09,250
cover the API here to cover all the

1064
00:43:09,250 --> 00:43:11,440
corners so it's not like you're going to

1065
00:43:11,440 --> 00:43:12,700
write the test suite even if it has

1066
00:43:12,700 --> 00:43:14,890
thousands of tests and really learn

1067
00:43:14,890 --> 00:43:15,880
everything you need to you need to

1068
00:43:15,880 --> 00:43:18,010
release this into the world from the lab

1069
00:43:18,010 --> 00:43:19,630
and that's what we're doing in Firefox

1070
00:43:19,630 --> 00:43:21,820
for even sticking with a named proxy you

1071
00:43:21,820 --> 00:43:23,230
know in JavaScript we don't have this

1072
00:43:23,230 --> 00:43:26,560
Moz or WebKit prefix convention we

1073
00:43:26,560 --> 00:43:28,420
haven't as much experience as the CSS

1074
00:43:28,420 --> 00:43:30,850
guys do using such a prefix on the other

1075
00:43:30,850 --> 00:43:33,430
hand they tend to use it and then forget

1076
00:43:33,430 --> 00:43:35,490
to get rid of the prefixes over time

1077
00:43:35,490 --> 00:43:39,180
we're going to try to bet on the harmony

1078
00:43:39,180 --> 00:43:41,500
continuing so that proxy actually sticks

1079
00:43:41,500 --> 00:43:43,140
and so far it hasn't collided on the web

1080
00:43:43,140 --> 00:43:45,550
you can always reassign it just like any

1081
00:43:45,550 --> 00:43:47,560
other global name but we're shipping

1082
00:43:47,560 --> 00:43:49,330
proxies in Firefox for as far as I know

1083
00:43:49,330 --> 00:43:51,400
and I think we should so we're going to

1084
00:43:51,400 --> 00:43:52,660
reach users at scale and we're going to

1085
00:43:52,660 --> 00:43:54,460
feedback what we learned the committee

1086
00:43:54,460 --> 00:43:56,170
if we have to change something I hope

1087
00:43:56,170 --> 00:43:57,580
it's not big it probably won't be will

1088
00:43:57,580 --> 00:44:00,100
tweak it the early adopters can probably

1089
00:44:00,100 --> 00:44:01,750
cope and will standardize based on that

1090
00:44:01,750 --> 00:44:03,940
learning and that's how I the best we

1091
00:44:03,940 --> 00:44:05,620
can do for web standards that actually

1092
00:44:05,620 --> 00:44:09,040
evolve that keep up with growing use

1093
00:44:09,040 --> 00:44:11,380
cases demands of developers or old

1094
00:44:11,380 --> 00:44:14,110
demands gaps in the language left over

1095
00:44:14,110 --> 00:44:17,110
from the dark ages and this is actually

1096
00:44:17,110 --> 00:44:18,310
a strong commitment in the committee

1097
00:44:18,310 --> 00:44:20,020
right now it means that we're not going

1098
00:44:20,020 --> 00:44:21,220
to go blindside each other and do

1099
00:44:21,220 --> 00:44:24,910
something weird you know bugs aside

1100
00:44:24,910 --> 00:44:26,170
we're not going to go do something we

1101
00:44:26,170 --> 00:44:27,790
haven't explained to our friends in the

1102
00:44:27,790 --> 00:44:29,740
committee because that would make for a

1103
00:44:29,740 --> 00:44:34,270
pretty icy dinner conversation just a

1104
00:44:34,270 --> 00:44:35,890
little micro benchmark this is from the

1105
00:44:35,890 --> 00:44:37,140
spring I think it's gotten better

1106
00:44:37,140 --> 00:44:40,060
proxies if they're just doing forwarding

1107
00:44:40,060 --> 00:44:42,160
like that no op proxy do have some cost

1108
00:44:42,160 --> 00:44:44,770
this is the very first implementation we

1109
00:44:44,770 --> 00:44:46,870
have not done anything to optimize the

1110
00:44:46,870 --> 00:44:49,270
trap call the cool thing about tracing

1111
00:44:49,270 --> 00:44:50,590
which we haven't trace monkey is you can

1112
00:44:50,590 --> 00:44:53,410
inline small functions aggressively so

1113
00:44:53,410 --> 00:44:55,450
if traps are very small like these

1114
00:44:55,450 --> 00:44:57,880
forwarding ones we can inline them so I

1115
00:44:57,880 --> 00:45:00,940
expect that this kind of profile result

1116
00:45:00,940 --> 00:45:03,280
will go squeeze down toward toward one

1117
00:45:03,280 --> 00:45:05,470
and there will be almost no slowdown and

1118
00:45:05,470 --> 00:45:07,690
and the overhead of having proxies in

1119
00:45:07,690 --> 00:45:09,100
your VM when you're not using them

1120
00:45:09,100 --> 00:45:11,230
should be effectively 1 and here it is I

1121
00:45:11,230 --> 00:45:13,230
mean there's some noise there and some

1122
00:45:13,230 --> 00:45:14,700
minor things that we've had to work out

1123
00:45:14,700 --> 00:45:17,640
since then but proxies don't cost and

1124
00:45:17,640 --> 00:45:18,900
like I said we're actually using them as

1125
00:45:18,900 --> 00:45:21,240
the basis for all our our host objects

1126
00:45:21,240 --> 00:45:25,440
as we go forward so proxies are awesome

1127
00:45:25,440 --> 00:45:28,710
they give you this ability to intercede

1128
00:45:28,710 --> 00:45:31,920
and create new behavior with code in a

1129
00:45:31,920 --> 00:45:34,260
handler for an arbitrary object you

1130
00:45:34,260 --> 00:45:36,390
create you can even do functions you can

1131
00:45:36,390 --> 00:45:38,640
make virtual objects that have no peer

1132
00:45:38,640 --> 00:45:40,530
object behind them no wrapped object you

1133
00:45:40,530 --> 00:45:42,000
can make wrappers which are important

1134
00:45:42,000 --> 00:45:43,760
for things like testing security

1135
00:45:43,760 --> 00:45:47,160
profiling one of the things that I think

1136
00:45:47,160 --> 00:45:48,150
we should try to build with this and

1137
00:45:48,150 --> 00:45:49,230
we're going to try to get going on this

1138
00:45:49,230 --> 00:45:53,340
soon is you know how replay VMs and

1139
00:45:53,340 --> 00:45:55,830
debugging through time traveling has

1140
00:45:55,830 --> 00:45:58,980
become popular this goes back to Ma C I

1141
00:45:58,980 --> 00:46:00,210
think it was named after the hacker

1142
00:46:00,210 --> 00:46:01,920
Michael Elizabeth Chastain I think he

1143
00:46:01,920 --> 00:46:04,440
did this cool debugger that used Linux's

1144
00:46:04,440 --> 00:46:06,900
debugging API to capture all the inputs

1145
00:46:06,900 --> 00:46:08,910
and outputs of your program he would

1146
00:46:08,910 --> 00:46:10,830
actually login like imagine a VCR

1147
00:46:10,830 --> 00:46:13,280
running and recording all the i/o you do

1148
00:46:13,280 --> 00:46:16,020
including a map including P trace it

1149
00:46:16,020 --> 00:46:17,850
would follow all the pointers and then

1150
00:46:17,850 --> 00:46:20,430
you could rewind and play back that

1151
00:46:20,430 --> 00:46:22,350
input to the program and if the program

1152
00:46:22,350 --> 00:46:23,910
was deterministic it would evolve to the

1153
00:46:23,910 --> 00:46:25,380
same state so you could you could do

1154
00:46:25,380 --> 00:46:28,620
kind of brute force replay debugging you

1155
00:46:28,620 --> 00:46:29,790
guys could build that with proxies

1156
00:46:29,790 --> 00:46:31,980
somebody here should go do that we're

1157
00:46:31,980 --> 00:46:33,900
going to try to do it too because that

1158
00:46:33,900 --> 00:46:35,100
would be really awesome to have like a

1159
00:46:35,100 --> 00:46:36,930
slider on your debugger or you could

1160
00:46:36,930 --> 00:46:38,640
just rewind it especially if you could

1161
00:46:38,640 --> 00:46:40,470
capture all this Dhamma FEX this is a

1162
00:46:40,470 --> 00:46:41,700
little challenging there's a lot of

1163
00:46:41,700 --> 00:46:43,590
hidden effects there and those damn host

1164
00:46:43,590 --> 00:46:45,330
objects but if you could capture them

1165
00:46:45,330 --> 00:46:47,580
all treat them as transactions and roll

1166
00:46:47,580 --> 00:46:49,650
them back invert them if they're

1167
00:46:49,650 --> 00:46:52,620
invertible save order state if you have

1168
00:46:52,620 --> 00:46:54,420
- if there's destructive operations you

1169
00:46:54,420 --> 00:46:56,070
could do a replay debugger with proxies

1170
00:46:56,070 --> 00:46:57,780
and and you could do that slider and you

1171
00:46:57,780 --> 00:47:00,060
could see Gmail kind of reef lowing back

1172
00:47:00,060 --> 00:47:02,160
to where it was before it hit your bug

1173
00:47:02,160 --> 00:47:03,810
and you could find the bug and I think

1174
00:47:03,810 --> 00:47:05,730
we're going to try to build it and see

1175
00:47:05,730 --> 00:47:06,720
how it goes and I think proxies are

1176
00:47:06,720 --> 00:47:10,020
going to be key to this the API uses

1177
00:47:10,020 --> 00:47:11,580
stratification so we're past adding

1178
00:47:11,580 --> 00:47:15,540
double underscore names we are careful

1179
00:47:15,540 --> 00:47:17,070
to preserve a few important invariants

1180
00:47:17,070 --> 00:47:21,330
in language we of course do the es5 meta

1181
00:47:21,330 --> 00:47:23,490
programming properly support frees and

1182
00:47:23,490 --> 00:47:25,620
so on and as I showed there's really no

1183
00:47:25,620 --> 00:47:26,310
performance

1184
00:47:26,310 --> 00:47:29,400
done on proxy objects so beyond all this

1185
00:47:29,400 --> 00:47:31,620
you know proxies are awesome this does

1186
00:47:31,620 --> 00:47:35,070
show two things I mentioned the

1187
00:47:35,070 --> 00:47:37,650
committee and the browser vendors and

1188
00:47:37,650 --> 00:47:40,230
you developers are working more in

1189
00:47:40,230 --> 00:47:42,420
concert than I've ever seen we should

1190
00:47:42,420 --> 00:47:44,220
push on this we should do even more

1191
00:47:44,220 --> 00:47:47,190
without you know overreaching I think we

1192
00:47:47,190 --> 00:47:49,770
should get this stuff rolled out use it

1193
00:47:49,770 --> 00:47:51,900
get feedback standardize it and do it

1194
00:47:51,900 --> 00:47:54,090
again I don't know how else to improve

1195
00:47:54,090 --> 00:47:55,560
the web and I think it's working so

1196
00:47:55,560 --> 00:47:57,540
let's let's do it and really javascript

1197
00:47:57,540 --> 00:47:58,950
is the revenge of small talk and I

1198
00:47:58,950 --> 00:48:01,160
intend to see that come to pass in full

1199
00:48:01,160 --> 00:48:04,230
and with that I'll just show you

1200
00:48:04,230 --> 00:48:07,500
Zaphod if I can this is here's the code

1201
00:48:07,500 --> 00:48:09,330
on github you can see it uses proxies

1202
00:48:09,330 --> 00:48:11,910
this is narcissus when I wrote our

1203
00:48:11,910 --> 00:48:13,200
sisters there weren't any proxies so I

1204
00:48:13,200 --> 00:48:14,520
had the hack in double underscore

1205
00:48:14,520 --> 00:48:17,520
defined property meta methods on an if

1206
00:48:17,520 --> 00:48:20,130
def build a spider monkey it was bad you

1207
00:48:20,130 --> 00:48:22,740
couldn't host narcissus in full on a

1208
00:48:22,740 --> 00:48:24,960
browser people took the parser and they

1209
00:48:24,960 --> 00:48:27,000
ported it to Ruby and you know spread it

1210
00:48:27,000 --> 00:48:29,370
all over but now with proxies you can

1211
00:48:29,370 --> 00:48:31,910
actually do what you need to do with

1212
00:48:31,910 --> 00:48:34,530
supported to be standardized harmonious

1213
00:48:34,530 --> 00:48:35,880
api's

1214
00:48:35,880 --> 00:48:39,150
and I hope this works this is kind of

1215
00:48:39,150 --> 00:48:41,880
bleeding edge so here's here's CNN and

1216
00:48:41,880 --> 00:48:47,780
it has some scripts on it narcissus is

1217
00:48:47,780 --> 00:48:50,250
god-awful slow we haven't done nothing

1218
00:48:50,250 --> 00:48:51,360
to optimize the performance I'm actually

1219
00:48:51,360 --> 00:48:52,740
thinking that we can make it a lot

1220
00:48:52,740 --> 00:48:56,910
faster once we get proxies in our CSS we

1221
00:48:56,910 --> 00:48:59,250
can stop doing you know basically AST

1222
00:48:59,250 --> 00:49:00,900
walking tree walking to interpret it we

1223
00:49:00,900 --> 00:49:02,850
could start doing tricks that would make

1224
00:49:02,850 --> 00:49:04,920
it actually perform really well there's

1225
00:49:04,920 --> 00:49:08,370
a little Mozilla head added by Zaphod

1226
00:49:08,370 --> 00:49:10,080
the add-on down at the bottom if you

1227
00:49:10,080 --> 00:49:12,180
mouse over it says Jas Engine equal

1228
00:49:12,180 --> 00:49:16,470
SpiderMonkey if I click that I have just

1229
00:49:16,470 --> 00:49:20,010
swapped narcissus which runs in spider

1230
00:49:20,010 --> 00:49:22,670
monkey for spider monkey as the

1231
00:49:22,670 --> 00:49:24,420
JavaScript engine that handles

1232
00:49:24,420 --> 00:49:26,100
application JavaScript text JavaScript

1233
00:49:26,100 --> 00:49:28,530
all those arm types if I now reload and

1234
00:49:28,530 --> 00:49:34,080
knock on wood I probably locked it up

1235
00:49:34,080 --> 00:49:36,270
but yeah it's it's now running the

1236
00:49:36,270 --> 00:49:37,980
scripts on cnn.com which are not that

1237
00:49:37,980 --> 00:49:39,930
challenging through narcissus

1238
00:49:39,930 --> 00:49:42,390
it doesn't run Gmail yet it's just

1239
00:49:42,390 --> 00:49:44,700
there's still some things missing and

1240
00:49:44,700 --> 00:49:46,590
performance is really atrocious but this

1241
00:49:46,590 --> 00:49:48,990
is Zaphod in action and it's kind of

1242
00:49:48,990 --> 00:49:51,650
crazy we actually made an application

1243
00:49:51,650 --> 00:49:54,150
narcissus mimetype we haven't register

1244
00:49:54,150 --> 00:49:55,800
we're not going to register but Zaphod

1245
00:49:55,800 --> 00:49:57,240
recognizes that so if you want to write

1246
00:49:57,240 --> 00:49:59,840
test pages that actually choose to use

1247
00:49:59,840 --> 00:50:02,340
the narcissus engine through Zaphod they

1248
00:50:02,340 --> 00:50:03,960
can target it with script I people's

1249
00:50:03,960 --> 00:50:06,870
applications are CSS I think it loaded

1250
00:50:06,870 --> 00:50:08,180
Wow

1251
00:50:08,180 --> 00:50:11,490
DMS let's see if everything works yeah

1252
00:50:11,490 --> 00:50:15,870
it's slow yeah there we go I believe

1253
00:50:15,870 --> 00:50:17,670
this is written yeah this is running in

1254
00:50:17,670 --> 00:50:21,480
their sis's so right here is a glimpse

1255
00:50:21,480 --> 00:50:23,930
of the future of the bootstrap

1256
00:50:23,930 --> 00:50:26,250
self-hosted small talk world we can get

1257
00:50:26,250 --> 00:50:28,460
to if we just keep working on it

1258
00:50:28,460 --> 00:50:30,470
it's too damn slow right now anyway

