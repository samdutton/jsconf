1
00:00:00,000 --> 00:00:12,990

I

2
00:00:13,000 --> 00:00:16,820
hi everybody my name is Glen Madden I

3
00:00:16,820 --> 00:00:22,369
work with mark on CSS modules in fact

4
00:00:22,369 --> 00:00:23,840
those conversations that he talked about

5
00:00:23,840 --> 00:00:26,540
with Tobias coppers we were away at a

6
00:00:26,540 --> 00:00:29,119
javascript event in Australia called

7
00:00:29,119 --> 00:00:31,520
Camp Jess and so we had this quite

8
00:00:31,520 --> 00:00:35,329
useful iteration cycle of wall Tobias

9
00:00:35,329 --> 00:00:37,489
was asleep we would talk about stuff and

10
00:00:37,489 --> 00:00:38,899
then mark would go away and talk to him

11
00:00:38,899 --> 00:00:41,480
online when he woke up in Germany and in

12
00:00:41,480 --> 00:00:44,809
three days we hashed out a big chunk of

13
00:00:44,809 --> 00:00:48,769
this of this project I'm going to be

14
00:00:48,769 --> 00:00:50,870
talking about CSS modules as well but

15
00:00:50,870 --> 00:00:52,550
from kind of a different direction

16
00:00:52,550 --> 00:00:58,339
because I when I got involved in the

17
00:00:58,339 --> 00:01:01,100
project I had my own kind of background

18
00:01:01,100 --> 00:01:03,530
the only with my own ways of doing style

19
00:01:03,530 --> 00:01:05,870
and Mark and I disagreed on a lot of

20
00:01:05,870 --> 00:01:08,270
points and CSS modules is really kind of

21
00:01:08,270 --> 00:01:10,460
a compromise of these two points of view

22
00:01:10,460 --> 00:01:12,890
that we think now has the resilience to

23
00:01:12,890 --> 00:01:15,170
cover a lot of use cases and I think

24
00:01:15,170 --> 00:01:16,670
it's a big benefit to have gone through

25
00:01:16,670 --> 00:01:19,520
that process but what I'm interested in

26
00:01:19,520 --> 00:01:21,890
talking about is the change I think it

27
00:01:21,890 --> 00:01:24,619
represents in CSS not necessarily CSS

28
00:01:24,619 --> 00:01:27,049
modules being successful but this shift

29
00:01:27,049 --> 00:01:30,619
this this progression and I'm calling

30
00:01:30,619 --> 00:01:32,570
this idea modular style which I've

31
00:01:32,570 --> 00:01:35,450
started to use a little bit and that's

32
00:01:35,450 --> 00:01:38,600
my talks going to be about that the

33
00:01:38,600 --> 00:01:41,390
first part of my talk is about the

34
00:01:41,390 --> 00:01:45,229
difference between a something that's

35
00:01:45,229 --> 00:01:46,700
designed for humans and something that's

36
00:01:46,700 --> 00:01:49,820
constrained by machines I'm gonna go all

37
00:01:49,820 --> 00:01:52,100
the way back to the invention of the

38
00:01:52,100 --> 00:01:55,219
compiler by grace hopper she wrote in a

39
00:01:55,219 --> 00:02:00,170
new magazine article in 1987 that in

40
00:02:00,170 --> 00:02:03,350
1952 she had a running compiler but

41
00:02:03,350 --> 00:02:06,229
nobody would touch it they thought that

42
00:02:06,229 --> 00:02:08,860
computers could only do arithmetic and

43
00:02:08,860 --> 00:02:13,010
really it it constitutes a breaking

44
00:02:13,010 --> 00:02:14,870
point where we were completely

45
00:02:14,870 --> 00:02:17,240
constrained by what the machine could do

46
00:02:17,240 --> 00:02:19,130
before that all you could give it was

47
00:02:19,130 --> 00:02:20,570
machine instructions you had to

48
00:02:20,570 --> 00:02:22,490
translate everything in your head and

49
00:02:22,490 --> 00:02:24,910
this you know it's what is a 60

50
00:02:24,910 --> 00:02:27,680
three years ago was the first time

51
00:02:27,680 --> 00:02:30,590
anybody had ever progressed written

52
00:02:30,590 --> 00:02:32,360
something that then the machine would

53
00:02:32,360 --> 00:02:34,990
translate to what the machine could run

54
00:02:34,990 --> 00:02:37,730
now scoot forward a little bit to

55
00:02:37,730 --> 00:02:39,740
September 2008 which is a far darker

56
00:02:39,740 --> 00:02:43,490
time in history at least in the history

57
00:02:43,490 --> 00:02:50,840
of the web in 2008 Firefox was at

58
00:02:50,840 --> 00:02:53,780
version too but 75% of the online world

59
00:02:53,780 --> 00:02:57,920
used IE and I II was at version 7 it was

60
00:02:57,920 --> 00:02:59,900
well basically if this is humans vs and

61
00:02:59,900 --> 00:03:01,970
machines in 2008 the machines were

62
00:03:01,970 --> 00:03:05,450
winning JavaScript of 2008 had started

63
00:03:05,450 --> 00:03:06,950
to mature though they were started some

64
00:03:06,950 --> 00:03:09,350
patterns that started to emerge jQuery

65
00:03:09,350 --> 00:03:11,900
had had really started to establish

66
00:03:11,900 --> 00:03:13,370
itself the plug-in ecosystem was pretty

67
00:03:13,370 --> 00:03:16,970
healthy and this was sort of the best

68
00:03:16,970 --> 00:03:21,680
practice in 2008 you would write

69
00:03:21,680 --> 00:03:24,709
everything attached it to window make

70
00:03:24,709 --> 00:03:25,910
sure that you weren't clobbering

71
00:03:25,910 --> 00:03:27,680
something that was already there attach

72
00:03:27,680 --> 00:03:29,209
your code somewhere that somebody else

73
00:03:29,209 --> 00:03:33,019
could find it and run what I mean

74
00:03:33,019 --> 00:03:34,070
there's nothing wrong with the way this

75
00:03:34,070 --> 00:03:36,950
code is written but it implies the fact

76
00:03:36,950 --> 00:03:40,790
that you have a global namespace you

77
00:03:40,790 --> 00:03:42,620
have nothing except what's on window and

78
00:03:42,620 --> 00:03:45,739
the only kind of conceptual method for

79
00:03:45,739 --> 00:03:47,900
execution is sequential if you want two

80
00:03:47,900 --> 00:03:49,700
things in the pot in the file simply

81
00:03:49,700 --> 00:03:53,900
concatenate them all so at the end of

82
00:03:53,900 --> 00:03:56,720
2008 Google came out with chrome I don't

83
00:03:56,720 --> 00:03:57,799
know if you remember they released this

84
00:03:57,799 --> 00:04:01,640
comic book to try to educate the 75

85
00:04:01,640 --> 00:04:03,950
percent of people who are using IE that

86
00:04:03,950 --> 00:04:06,680
you could choose a browser and if you

87
00:04:06,680 --> 00:04:08,480
could choose and obviously you wouldn't

88
00:04:08,480 --> 00:04:12,880
choose IE google chrome was quickly

89
00:04:12,880 --> 00:04:15,410
popular partly because of the

90
00:04:15,410 --> 00:04:17,000
performance of v8 which was its

91
00:04:17,000 --> 00:04:18,500
javascript interpreter and it was far

92
00:04:18,500 --> 00:04:20,780
faster than the javascript interpreters

93
00:04:20,780 --> 00:04:23,720
of the day and that helped to catalyze a

94
00:04:23,720 --> 00:04:25,310
movement that had already started around

95
00:04:25,310 --> 00:04:26,930
the idea of running JavaScript on the

96
00:04:26,930 --> 00:04:29,750
server this project at that point was

97
00:04:29,750 --> 00:04:32,270
called server jas Kevin dangle wrote in

98
00:04:32,270 --> 00:04:35,270
January of that of 2009 that for

99
00:04:35,270 --> 00:04:37,480
JavaScript to really come

100
00:04:37,480 --> 00:04:39,550
of age and to work on the server it

101
00:04:39,550 --> 00:04:41,680
needed a standard way to include modules

102
00:04:41,680 --> 00:04:43,780
the JavaScript specification as it was

103
00:04:43,780 --> 00:04:46,720
wasn't sufficient it needed those

104
00:04:46,720 --> 00:04:49,060
modules to live in discrete namespaces

105
00:04:49,060 --> 00:04:50,770
you could already do namespaces just by

106
00:04:50,770 --> 00:04:53,050
attaching things to window in a in a

107
00:04:53,050 --> 00:04:55,300
conventional way but you couldn't

108
00:04:55,300 --> 00:04:58,710
include other people's code just once

109
00:04:58,710 --> 00:05:00,880
then went on to write that server side

110
00:05:00,880 --> 00:05:02,680
JavaScript is very fragmented that if

111
00:05:02,680 --> 00:05:04,090
you wanted to do anything beyond what

112
00:05:04,090 --> 00:05:05,920
javascript was designed for like access

113
00:05:05,920 --> 00:05:08,410
a file and the file system you couldn't

114
00:05:08,410 --> 00:05:10,450
do that the same way on the to server

115
00:05:10,450 --> 00:05:13,000
side JavaScript interpreter is right on

116
00:05:13,000 --> 00:05:15,430
v8 SpiderMonkey JavaScript cool they

117
00:05:15,430 --> 00:05:17,860
couldn't load the same modules external

118
00:05:17,860 --> 00:05:19,990
modules in the same way and so every

119
00:05:19,990 --> 00:05:21,760
time somebody wanted to use javascript

120
00:05:21,760 --> 00:05:23,620
for a web framework they had to create a

121
00:05:23,620 --> 00:05:25,720
bunch of AP is that other programmers

122
00:05:25,720 --> 00:05:28,600
took for granted and what I think is

123
00:05:28,600 --> 00:05:30,580
interesting is if you replace the year

124
00:05:30,580 --> 00:05:33,460
2009 and you talk about CSS instead of

125
00:05:33,460 --> 00:05:35,800
server-side JavaScript there is this

126
00:05:35,800 --> 00:05:38,170
sort of sense of of a lack of legitimacy

127
00:05:38,170 --> 00:05:41,440
around the tooling around CSS and that

128
00:05:41,440 --> 00:05:44,290
if you want to write a framework like

129
00:05:44,290 --> 00:05:46,450
bootstrap it's either very tied to less

130
00:05:46,450 --> 00:05:49,390
as it was or SAS as it is now and that

131
00:05:49,390 --> 00:05:51,910
sass and less and the Perseus is plug in

132
00:05:51,910 --> 00:05:56,140
ecosystem do create ap is that other

133
00:05:56,140 --> 00:05:57,700
programming language is now including

134
00:05:57,700 --> 00:06:02,080
JavaScript take for granted okay so also

135
00:06:02,080 --> 00:06:04,930
in 2009 nodejs comes out I'm sure a lot

136
00:06:04,930 --> 00:06:07,660
of you aware no Jess even if you don't

137
00:06:07,660 --> 00:06:11,590
use JavaScript day today in March Chris

138
00:06:11,590 --> 00:06:13,420
Cole who was also blogging and

139
00:06:13,420 --> 00:06:15,430
influential around this time wrote that

140
00:06:15,430 --> 00:06:17,410
this year had begun with a combination

141
00:06:17,410 --> 00:06:19,930
of wondrous events in JavaScript he'd

142
00:06:19,930 --> 00:06:21,430
been struggling to promote the idea of a

143
00:06:21,430 --> 00:06:22,780
module system in JavaScript for several

144
00:06:22,780 --> 00:06:24,310
years now and there had been a sudden

145
00:06:24,310 --> 00:06:26,230
explosion of progress and I also feel

146
00:06:26,230 --> 00:06:28,450
that that's what's happening with CSS at

147
00:06:28,450 --> 00:06:30,220
the moment there's a lot of energy

148
00:06:30,220 --> 00:06:31,960
coming from the react community a lot of

149
00:06:31,960 --> 00:06:34,150
new ideas maybe some bad ones as well

150
00:06:34,150 --> 00:06:37,210
but the the collective kind of spirit is

151
00:06:37,210 --> 00:06:39,460
that CSS is undergoing a change and

152
00:06:39,460 --> 00:06:41,890
there are a lot of smart people working

153
00:06:41,890 --> 00:06:45,460
on this hard problem and that maybe we

154
00:06:45,460 --> 00:06:49,180
are stumbling across a solution so by

155
00:06:49,180 --> 00:06:50,960
the middle of 2009

156
00:06:50,960 --> 00:06:52,460
javascript had a new name the server

157
00:06:52,460 --> 00:06:53,840
side JavaScript had a new name common

158
00:06:53,840 --> 00:06:56,600
Jas and I'm sure a lot of you will know

159
00:06:56,600 --> 00:06:59,389
that term commonjs it's sort of not

160
00:06:59,389 --> 00:07:01,340
maybe what you think it is come a jess

161
00:07:01,340 --> 00:07:03,800
was trying to be a standard that handled

162
00:07:03,800 --> 00:07:05,479
all these different ways of handling and

163
00:07:05,479 --> 00:07:08,120
dependencies in JavaScript no Jess

164
00:07:08,120 --> 00:07:10,880
didn't really follow that on and node

165
00:07:10,880 --> 00:07:14,419
one whatever no does the thing that node

166
00:07:14,419 --> 00:07:16,400
does no jss module system is what we

167
00:07:16,400 --> 00:07:19,639
call comedy is today sub stack calls it

168
00:07:19,639 --> 00:07:21,919
command J desk which is a pretty good

169
00:07:21,919 --> 00:07:23,449
description of what it is it's kind of

170
00:07:23,449 --> 00:07:25,820
based around these two lines require and

171
00:07:25,820 --> 00:07:29,780
modular exports and what it did to that

172
00:07:29,780 --> 00:07:31,580
language what it did to javascript is

173
00:07:31,580 --> 00:07:34,490
quite profound because previously you

174
00:07:34,490 --> 00:07:36,770
had namespace widget through x equals

175
00:07:36,770 --> 00:07:40,430
function and now you have to explicitly

176
00:07:40,430 --> 00:07:42,199
require everything you need and

177
00:07:42,199 --> 00:07:44,380
explicitly export everything you make

178
00:07:44,380 --> 00:07:48,080
for something else to require but what I

179
00:07:48,080 --> 00:07:49,849
like about this example in this contrast

180
00:07:49,849 --> 00:07:51,650
is that the words window namespace

181
00:07:51,650 --> 00:07:53,389
widgets and fubar disappeared from your

182
00:07:53,389 --> 00:07:55,340
code because they're implied by the file

183
00:07:55,340 --> 00:07:59,030
system your file fubar j/s lives inside

184
00:07:59,030 --> 00:08:00,740
the widget which lives inside your

185
00:08:00,740 --> 00:08:02,449
namespace directory so of course that's

186
00:08:02,449 --> 00:08:03,650
what it's about you don't have to write

187
00:08:03,650 --> 00:08:05,690
it every time and that I think is a

188
00:08:05,690 --> 00:08:09,320
particularly relevant to CSS as what

189
00:08:09,320 --> 00:08:13,070
Mark was talking about before so no it

190
00:08:13,070 --> 00:08:15,050
must be thinking and this is CSS conf

191
00:08:15,050 --> 00:08:17,300
not Jas conf this is a great history

192
00:08:17,300 --> 00:08:18,880
lesson of JavaScript bet I mean

193
00:08:18,880 --> 00:08:22,159
javascript has a lot more power than CSS

194
00:08:22,159 --> 00:08:23,719
ever will we're not going to run CSS on

195
00:08:23,719 --> 00:08:26,509
the server all right you know operating

196
00:08:26,509 --> 00:08:29,990
systems in it and that's true but the

197
00:08:29,990 --> 00:08:32,060
change in the ecosystem around

198
00:08:32,060 --> 00:08:35,209
JavaScript can happen to CSS the change

199
00:08:35,209 --> 00:08:38,270
in JavaScript was pretty small these

200
00:08:38,270 --> 00:08:41,329
lines were valid before they just had no

201
00:08:41,329 --> 00:08:43,700
meaning the require and module will wear

202
00:08:43,700 --> 00:08:47,540
whatever you define them to be but if

203
00:08:47,540 --> 00:08:49,550
you wrap a module system around it and

204
00:08:49,550 --> 00:08:51,770
you wrap an ecosystem around it that can

205
00:08:51,770 --> 00:08:53,480
fundamentally change how people write

206
00:08:53,480 --> 00:08:57,980
JavaScript and it was successful npm

207
00:08:57,980 --> 00:09:02,350
came along not long after mpm is now

208
00:09:02,350 --> 00:09:04,430
extremely popular

209
00:09:04,430 --> 00:09:06,920
there is a module on NPM for literally

210
00:09:06,920 --> 00:09:08,600
everything absolutely everything and

211
00:09:08,600 --> 00:09:10,339
everything that ever will be is already

212
00:09:10,339 --> 00:09:13,220
on NPM by changing the ecosystem in

213
00:09:13,220 --> 00:09:17,810
JavaScript that revolutionized what have

214
00:09:17,810 --> 00:09:19,610
escaped was what it could be and what it

215
00:09:19,610 --> 00:09:22,310
is today and I think the key thing was

216
00:09:22,310 --> 00:09:24,860
that the human interface went from

217
00:09:24,860 --> 00:09:26,480
having to remember that all this other

218
00:09:26,480 --> 00:09:28,130
code was going to run before yours and

219
00:09:28,130 --> 00:09:29,209
all this code was going to run after

220
00:09:29,209 --> 00:09:31,520
yours to having an actual module system

221
00:09:31,520 --> 00:09:35,300
and having no mechanism for sharing code

222
00:09:35,300 --> 00:09:36,920
except putting one file in front of the

223
00:09:36,920 --> 00:09:38,420
other and including something off a CDN

224
00:09:38,420 --> 00:09:40,760
and then your script tag to having

225
00:09:40,760 --> 00:09:45,800
200,000 packages of NPM what makes that

226
00:09:45,800 --> 00:09:47,740
particularly relevant for us is

227
00:09:47,740 --> 00:09:51,320
browserify browserify is in the similar

228
00:09:51,320 --> 00:09:53,029
vein to web pack but it was the first to

229
00:09:53,029 --> 00:09:56,810
really to do this browser if I said you

230
00:09:56,810 --> 00:09:59,810
write your normal nodejs module code and

231
00:09:59,810 --> 00:10:02,330
I'll make it work in a browser it does

232
00:10:02,330 --> 00:10:04,610
that by because of the way JavaScript

233
00:10:04,610 --> 00:10:06,589
works it does that quite cleverly by

234
00:10:06,589 --> 00:10:09,080
simply taking your file wrapping it in a

235
00:10:09,080 --> 00:10:11,120
function making sure that it defines

236
00:10:11,120 --> 00:10:12,940
what require module and exports is

237
00:10:12,940 --> 00:10:15,010
concatenates all of those files together

238
00:10:15,010 --> 00:10:17,240
wise up all the dependencies and then

239
00:10:17,240 --> 00:10:19,250
with a little runtime shim basically

240
00:10:19,250 --> 00:10:21,410
boots that up and execute your code your

241
00:10:21,410 --> 00:10:22,910
code is none the wiser whether it's

242
00:10:22,910 --> 00:10:24,800
running on a browser or on a file system

243
00:10:24,800 --> 00:10:29,089
once it stubs out the AP is browserify

244
00:10:29,089 --> 00:10:31,130
proves that for the browser you could

245
00:10:31,130 --> 00:10:33,950
change the human interface of a language

246
00:10:33,950 --> 00:10:35,660
that we were using day to day without

247
00:10:35,660 --> 00:10:38,000
actually having to wait for JavaScript

248
00:10:38,000 --> 00:10:39,260
to change I mean if we were waiting for

249
00:10:39,260 --> 00:10:40,940
a new version JavaScript we'd still be

250
00:10:40,940 --> 00:10:45,770
waiting it's still not solidified so

251
00:10:45,770 --> 00:10:47,209
what about CSS now we've been talking a

252
00:10:47,209 --> 00:10:48,740
bit about CSS a lot of two talks have

253
00:10:48,740 --> 00:10:51,470
been about CSS and we have been changing

254
00:10:51,470 --> 00:10:54,680
this the human interface CSS as the

255
00:10:54,680 --> 00:10:57,140
language has had virtually no change in

256
00:10:57,140 --> 00:11:00,589
a long time but sass is incredibly

257
00:11:00,589 --> 00:11:02,690
popular there was a recent survey of fun

258
00:11:02,690 --> 00:11:04,700
and professionals who I think was

259
00:11:04,700 --> 00:11:07,670
sixty-four percent of people used sass

260
00:11:07,670 --> 00:11:10,070
in their projects less was more popular

261
00:11:10,070 --> 00:11:11,810
earlier and is dying in popularity now

262
00:11:11,810 --> 00:11:14,750
post CSS is kind of is rising in

263
00:11:14,750 --> 00:11:16,550
popularity because people can plug and

264
00:11:16,550 --> 00:11:17,830
choose the things they want

265
00:11:17,830 --> 00:11:20,750
but none of them actually change what

266
00:11:20,750 --> 00:11:23,300
CSS is they're just different ways of

267
00:11:23,300 --> 00:11:27,470
generating the same sort of code that's

268
00:11:27,470 --> 00:11:29,570
where I think CSS modules is different

269
00:11:29,570 --> 00:11:32,840
CSS modules wraps a file format called

270
00:11:32,840 --> 00:11:35,510
interoperable CSS which we finally sort

271
00:11:35,510 --> 00:11:37,280
of settled on in in the end of June this

272
00:11:37,280 --> 00:11:41,360
year I CSS is trying to be as small a

273
00:11:41,360 --> 00:11:43,880
change to the CSS language as possible

274
00:11:43,880 --> 00:11:47,150
to facilitate a module system so we add

275
00:11:47,150 --> 00:11:51,530
to inert sorry to pseudo selectors

276
00:11:51,530 --> 00:11:53,810
import and export they can pass the

277
00:11:53,810 --> 00:11:55,610
recess they can pass your post CSS they

278
00:11:55,610 --> 00:11:59,410
can go to the browser if you want

279
00:11:59,410 --> 00:12:01,640
nothing will choke on them they're valid

280
00:12:01,640 --> 00:12:05,150
CSS they just don't mean anything until

281
00:12:05,150 --> 00:12:06,710
you give it this ecosystem around it

282
00:12:06,710 --> 00:12:09,800
using webpack or something else the rest

283
00:12:09,800 --> 00:12:11,270
of the file is normal global CSS we

284
00:12:11,270 --> 00:12:12,230
didn't change anything there's no

285
00:12:12,230 --> 00:12:14,780
runtime dependencies it's just CSS you

286
00:12:14,780 --> 00:12:17,630
can concatenate it you can gzip it you

287
00:12:17,630 --> 00:12:19,370
can put it on a CD n you can do whatever

288
00:12:19,370 --> 00:12:22,910
you want with it and the way CSS modules

289
00:12:22,910 --> 00:12:24,710
uses this intermediate format is that

290
00:12:24,710 --> 00:12:26,960
when it sees a class like normal it

291
00:12:26,960 --> 00:12:30,530
compiles it it adds an export line as

292
00:12:30,530 --> 00:12:34,370
well as rewriting that class so now

293
00:12:34,370 --> 00:12:37,940
normal doesn't exist except in the

294
00:12:37,940 --> 00:12:42,110
metadata the export the Styles don't

295
00:12:42,110 --> 00:12:43,670
change the selectors don't change it's

296
00:12:43,670 --> 00:12:47,240
just the keys change then as Mark showed

297
00:12:47,240 --> 00:12:50,240
you import that across the boundary from

298
00:12:50,240 --> 00:12:52,730
CSS into your JavaScript component and

299
00:12:52,730 --> 00:12:54,140
you get that mapping so then if you

300
00:12:54,140 --> 00:12:58,150
change your markup to feed that class in

301
00:12:58,150 --> 00:13:03,380
you line up with now compiled output and

302
00:13:03,380 --> 00:13:06,230
I want to sort of talk about this in a

303
00:13:06,230 --> 00:13:08,990
little bit with another example if you

304
00:13:08,990 --> 00:13:11,089
have normal in two classes now into sort

305
00:13:11,089 --> 00:13:14,870
of CSS files they can't clash anymore

306
00:13:14,870 --> 00:13:18,170
they get compiled to different hashes or

307
00:13:18,170 --> 00:13:20,120
two different longer class names

308
00:13:20,120 --> 00:13:22,940
whatever you want them to be and they

309
00:13:22,940 --> 00:13:24,260
get exported into two different places

310
00:13:24,260 --> 00:13:26,390
the only way to see what's in menu is to

311
00:13:26,390 --> 00:13:28,400
import it the only way to see what's in

312
00:13:28,400 --> 00:13:29,459
button is to impor

313
00:13:29,459 --> 00:13:33,899
and that lack of global pneus lack of

314
00:13:33,899 --> 00:13:36,389
predictability about the output CSS

315
00:13:36,389 --> 00:13:37,920
means that you have to be explicit about

316
00:13:37,920 --> 00:13:41,999
where that code goes so for a dumb

317
00:13:41,999 --> 00:13:46,050
example let's pretend our button CSS had

318
00:13:46,050 --> 00:13:48,660
to know what was in menu CSS there's no

319
00:13:48,660 --> 00:13:50,579
way for me to write it as an author and

320
00:13:50,579 --> 00:13:52,410
guarantee i'm going to figure out what

321
00:13:52,410 --> 00:13:55,019
on the right-hand side but i can import

322
00:13:55,019 --> 00:13:57,990
it i can import that file I can give it

323
00:13:57,990 --> 00:13:59,879
my own alias and I say whatever you call

324
00:13:59,879 --> 00:14:02,970
normal I call menus normal and then I

325
00:14:02,970 --> 00:14:04,860
could use it now don't do this we don't

326
00:14:04,860 --> 00:14:07,019
expose this in CSS modules but this is

327
00:14:07,019 --> 00:14:08,519
the underlying mechanism under Lee

328
00:14:08,519 --> 00:14:10,410
underneath composition and a bunch of

329
00:14:10,410 --> 00:14:12,990
other techniques this idea that the only

330
00:14:12,990 --> 00:14:15,839
way for information to move between

331
00:14:15,839 --> 00:14:20,490
files is if your explicit about it when

332
00:14:20,490 --> 00:14:23,220
that gets compiled everything gets

333
00:14:23,220 --> 00:14:25,230
linked up so that your override class

334
00:14:25,230 --> 00:14:26,910
has the same class in that other file

335
00:14:26,910 --> 00:14:29,429
and because we knew that you had a

336
00:14:29,429 --> 00:14:30,869
dependency from this file to the other

337
00:14:30,869 --> 00:14:32,879
we know which order to concatenate them

338
00:14:32,879 --> 00:14:35,160
in so now you don't have this source

339
00:14:35,160 --> 00:14:36,749
order unpredictability that you might

340
00:14:36,749 --> 00:14:39,179
have by trying to concatenate a whole

341
00:14:39,179 --> 00:14:44,699
lot of potentially global CSS so I want

342
00:14:44,699 --> 00:14:46,079
to think about I CSS is being the

343
00:14:46,079 --> 00:14:48,480
browserify output it's the translation

344
00:14:48,480 --> 00:14:51,139
of the human interface into what

345
00:14:51,139 --> 00:14:55,860
browsers can understand so I success is

346
00:14:55,860 --> 00:14:57,540
a compiled target it's not a human

347
00:14:57,540 --> 00:14:59,970
interface she says modules uses it if

348
00:14:59,970 --> 00:15:01,949
you wanted to design your own module

349
00:15:01,949 --> 00:15:03,959
modular CSS framework you could target

350
00:15:03,959 --> 00:15:05,999
it as well and use all the other tools

351
00:15:05,999 --> 00:15:08,879
that we've built for CSS modules the

352
00:15:08,879 --> 00:15:10,679
file is completely isolated it can port

353
00:15:10,679 --> 00:15:12,420
others and what it really is is

354
00:15:12,420 --> 00:15:14,610
unlocking the power of web pack chase

355
00:15:14,610 --> 00:15:16,410
p.m. browserify it's a set of

356
00:15:16,410 --> 00:15:18,149
instructions i set a metadata to tell

357
00:15:18,149 --> 00:15:20,519
webpack what part of this file is CSS

358
00:15:20,519 --> 00:15:22,709
and what's JavaScript and how these

359
00:15:22,709 --> 00:15:26,100
things flow around so C says modules was

360
00:15:26,100 --> 00:15:29,309
with the best logo in the world takes

361
00:15:29,309 --> 00:15:32,309
this and the first thing it can do is as

362
00:15:32,309 --> 00:15:33,959
Mark already hinted at is be flexible

363
00:15:33,959 --> 00:15:35,999
with what you output you don't have to

364
00:15:35,999 --> 00:15:38,970
have normal f34 you can have in

365
00:15:38,970 --> 00:15:41,549
development mode a longer path now

366
00:15:41,549 --> 00:15:43,790
there's nothing preventing us

367
00:15:43,790 --> 00:15:47,070
source maps but we haven't needed it

368
00:15:47,070 --> 00:15:48,750
this in development mode seems to be

369
00:15:48,750 --> 00:15:51,180
enough if you go further you could put a

370
00:15:51,180 --> 00:15:52,829
line number of the first in you know you

371
00:15:52,829 --> 00:15:55,470
could go however you like in fact we saw

372
00:15:55,470 --> 00:15:57,300
this morning about selectors class

373
00:15:57,300 --> 00:15:59,250
selectors using characters you wouldn't

374
00:15:59,250 --> 00:16:02,579
normally type what school here is that

375
00:16:02,579 --> 00:16:05,339
all three of these the middle doesn't

376
00:16:05,339 --> 00:16:06,990
change you never interact with it in a

377
00:16:06,990 --> 00:16:08,610
different way it's just a compile out

378
00:16:08,610 --> 00:16:10,170
but why would you care your component

379
00:16:10,170 --> 00:16:12,990
needs the normal class so you know you

380
00:16:12,990 --> 00:16:17,550
don't mind what the output is marking to

381
00:16:17,550 --> 00:16:19,620
that it they use a min ified version a

382
00:16:19,620 --> 00:16:22,889
short hexadecimal string that works

383
00:16:22,889 --> 00:16:25,170
great it saves and bites but it's not as

384
00:16:25,170 --> 00:16:26,579
good as you could do the best you can do

385
00:16:26,579 --> 00:16:28,709
thus far as I'm concerned is minify to

386
00:16:28,709 --> 00:16:31,819
emoji emoji is the best bite for bite

387
00:16:31,819 --> 00:16:34,259
replacement of a perfectly

388
00:16:34,259 --> 00:16:37,199
understandable computer accessible term

389
00:16:37,199 --> 00:16:40,920
but also human recognizable and if you

390
00:16:40,920 --> 00:16:42,630
don't believe me i encourage you to have

391
00:16:42,630 --> 00:16:45,800
a look at my website glenn madden calm

392
00:16:45,800 --> 00:16:48,990
every selector in that site is an emoji

393
00:16:48,990 --> 00:16:53,130
so this time tag has a chicken bone

394
00:16:53,130 --> 00:16:55,529
class attached to it the firework up the

395
00:16:55,529 --> 00:16:58,319
firework down lantern love letter

396
00:16:58,319 --> 00:17:00,720
engagement ring a lot of other all the

397
00:17:00,720 --> 00:17:03,149
way to the last one which is fast poop i

398
00:17:03,149 --> 00:17:07,679
think it is and what's interesting about

399
00:17:07,679 --> 00:17:08,909
this because apart from being a min

400
00:17:08,909 --> 00:17:12,270
efficacious oak it's also actually

401
00:17:12,270 --> 00:17:14,400
easier to read than minified code

402
00:17:14,400 --> 00:17:17,159
normally is because if you look on the

403
00:17:17,159 --> 00:17:18,929
right hand side you can start to see

404
00:17:18,929 --> 00:17:21,870
duplicates of selectors you can see the

405
00:17:21,870 --> 00:17:23,130
same class applying at three places

406
00:17:23,130 --> 00:17:24,569
which you would never be able to do if

407
00:17:24,569 --> 00:17:26,549
it's just random hexadecimal strings so

408
00:17:26,549 --> 00:17:28,439
I actually think minifying to emoji is

409
00:17:28,439 --> 00:17:32,309
not just a joke I found it quite useful

410
00:17:32,309 --> 00:17:37,200
and yeah in real life and so this is

411
00:17:37,200 --> 00:17:39,419
sort of a two-fold approach the first is

412
00:17:39,419 --> 00:17:42,140
by defining a file format that unlocks

413
00:17:42,140 --> 00:17:45,690
webpack browserify giving a machine

414
00:17:45,690 --> 00:17:47,730
format that we're happy with we can do

415
00:17:47,730 --> 00:17:52,320
better we can better target a file

416
00:17:52,320 --> 00:17:54,210
format module system an ecosystem for

417
00:17:54,210 --> 00:17:55,750
humans

418
00:17:55,750 --> 00:17:58,850
hopeful that in the future maybe seven

419
00:17:58,850 --> 00:18:01,190
years from now if you see bem style code

420
00:18:01,190 --> 00:18:02,990
with their long class names that imply

421
00:18:02,990 --> 00:18:04,790
that this has to live in the global

422
00:18:04,790 --> 00:18:07,100
namespace and if I get this wrong things

423
00:18:07,100 --> 00:18:09,280
will go badly that that looks as

424
00:18:09,280 --> 00:18:15,320
redundant and unsafe as you know

425
00:18:15,320 --> 00:18:17,600
JavaScript before a module system and

426
00:18:17,600 --> 00:18:20,660
that this becomes the norm you have

427
00:18:20,660 --> 00:18:22,490
contextual styles not contextual just

428
00:18:22,490 --> 00:18:23,720
because they're local to that component

429
00:18:23,720 --> 00:18:25,970
but because the tool enforces it the

430
00:18:25,970 --> 00:18:27,980
tool says that you cannot possibly find

431
00:18:27,980 --> 00:18:31,520
out what Lodge becomes unless you make

432
00:18:31,520 --> 00:18:33,790
an explicit link across your project and

433
00:18:33,790 --> 00:18:37,030
that I think is a big that's a big win

434
00:18:37,030 --> 00:18:40,280
which takes me dude part two part two is

435
00:18:40,280 --> 00:18:44,390
now given the increased capability given

436
00:18:44,390 --> 00:18:48,740
the given a module system what might we

437
00:18:48,740 --> 00:18:51,440
use it for what like what uses all this

438
00:18:51,440 --> 00:18:53,270
unless we can write applications about

439
00:18:53,270 --> 00:18:55,400
our node and NPM wouldn't have taken off

440
00:18:55,400 --> 00:18:59,240
unless you could write algorithms more

441
00:18:59,240 --> 00:19:01,460
scalable and more maintainable using

442
00:19:01,460 --> 00:19:03,920
modules rather than Global's so what

443
00:19:03,920 --> 00:19:07,580
does it look like for CSS so I want to

444
00:19:07,580 --> 00:19:09,500
talk about a little example which is

445
00:19:09,500 --> 00:19:11,240
that you have to build two variants of a

446
00:19:11,240 --> 00:19:13,310
single button give a submit button

447
00:19:13,310 --> 00:19:15,860
delete button submit buttons blue delete

448
00:19:15,860 --> 00:19:19,190
buttons written in bem you would have

449
00:19:19,190 --> 00:19:20,450
your common styles in a submit button

450
00:19:20,450 --> 00:19:23,780
class your blue colors exhibit mine

451
00:19:23,780 --> 00:19:25,610
already the submit button danger should

452
00:19:25,610 --> 00:19:27,500
be pretty common to anybody who's seen

453
00:19:27,500 --> 00:19:30,860
them before then you apply both classes

454
00:19:30,860 --> 00:19:33,260
the button and the normal and the button

455
00:19:33,260 --> 00:19:35,090
and the danger and you get you two

456
00:19:35,090 --> 00:19:38,990
outputs the problem happens and this is

457
00:19:38,990 --> 00:19:40,700
a problem that I've encountered that

458
00:19:40,700 --> 00:19:42,040
started me on a bit of a journey into

459
00:19:42,040 --> 00:19:46,850
digging into CSS tooling when you forget

460
00:19:46,850 --> 00:19:49,250
one of those classes because there's

461
00:19:49,250 --> 00:19:51,500
nothing to enforce the fact that normal

462
00:19:51,500 --> 00:19:54,080
is also a button and if you do this you

463
00:19:54,080 --> 00:19:55,700
break your styles and if you're the

464
00:19:55,700 --> 00:19:57,440
person who built the style sheet and

465
00:19:57,440 --> 00:19:59,180
then somebody comes along and writes a

466
00:19:59,180 --> 00:20:01,310
component and they forget it then you

467
00:20:01,310 --> 00:20:03,230
might get angry right that if they've

468
00:20:03,230 --> 00:20:06,890
broken this convention and i would like

469
00:20:06,890 --> 00:20:09,070
to implore you to get less angry

470
00:20:09,070 --> 00:20:11,860
than you otherwise would because

471
00:20:11,860 --> 00:20:14,500
something I'm recognizing more and more

472
00:20:14,500 --> 00:20:16,840
is that if you're designing something

473
00:20:16,840 --> 00:20:20,200
for other people to use then if people

474
00:20:20,200 --> 00:20:22,120
keep making the same mistakes then you

475
00:20:22,120 --> 00:20:23,860
haven't finished designing you can get

476
00:20:23,860 --> 00:20:26,139
better you can make tools that enforce

477
00:20:26,139 --> 00:20:28,570
these things and so when somebody makes

478
00:20:28,570 --> 00:20:30,549
the mistake I want you to take it as a

479
00:20:30,549 --> 00:20:32,320
challenge to make your tool better

480
00:20:32,320 --> 00:20:34,299
there's plenty of stuff and CSS modules

481
00:20:34,299 --> 00:20:36,190
work that people get tripped up on and

482
00:20:36,190 --> 00:20:39,970
we're trying to fix it so that's my rant

483
00:20:39,970 --> 00:20:43,750
that was my little rant that's a topic

484
00:20:43,750 --> 00:20:45,850
very dear to me which is code for people

485
00:20:45,850 --> 00:20:48,039
who are new to coding whenever you can

486
00:20:48,039 --> 00:20:51,009
so anyway back to this problem you have

487
00:20:51,009 --> 00:20:53,080
this button and you've got the wrong

488
00:20:53,080 --> 00:20:54,610
styles on it and you think I'll look

489
00:20:54,610 --> 00:20:56,679
hang on they're all buttons so why don't

490
00:20:56,679 --> 00:21:00,159
we just make the thing the tag button

491
00:21:00,159 --> 00:21:02,080
and I think anybody who's done any

492
00:21:02,080 --> 00:21:05,909
amount of CSS should feel queasy at that

493
00:21:05,909 --> 00:21:08,590
because a button using a button in a

494
00:21:08,590 --> 00:21:10,899
HTML document is not a styling choice

495
00:21:10,899 --> 00:21:12,940
that's an accessibility and functional

496
00:21:12,940 --> 00:21:15,370
choice so attaching lots of style to

497
00:21:15,370 --> 00:21:18,039
that information means that every time

498
00:21:18,039 --> 00:21:19,210
you use a button and it doesn't have to

499
00:21:19,210 --> 00:21:20,169
look like the others you have to do a

500
00:21:20,169 --> 00:21:22,889
lot of overriding and overriding is bad

501
00:21:22,889 --> 00:21:25,269
so sask um long such as a function

502
00:21:25,269 --> 00:21:26,620
called extent which we had a question on

503
00:21:26,620 --> 00:21:30,039
just before extend does exactly this

504
00:21:30,039 --> 00:21:33,070
extend says hey if you use normal I know

505
00:21:33,070 --> 00:21:36,309
that you also meant the base class so

506
00:21:36,309 --> 00:21:38,019
submit my normal extend submit button

507
00:21:38,019 --> 00:21:42,490
danger extends submit button that works

508
00:21:42,490 --> 00:21:44,860
great it's exactly what we want we can

509
00:21:44,860 --> 00:21:46,720
use one name in our output and we can

510
00:21:46,720 --> 00:21:50,019
either get neither style or both it

511
00:21:50,019 --> 00:21:52,360
works by rewriting the CSS by injecting

512
00:21:52,360 --> 00:21:54,669
so that submit button normal matches the

513
00:21:54,669 --> 00:21:57,460
top line and the fourth line and danger

514
00:21:57,460 --> 00:21:59,220
matches the top and the third-to-last

515
00:21:59,220 --> 00:22:02,200
works great conceptually it's beautiful

516
00:22:02,200 --> 00:22:04,649
implementation wise it's dangerous I

517
00:22:04,649 --> 00:22:08,529
love it I used it a lot and then it bit

518
00:22:08,529 --> 00:22:10,320
me like a bit sever and bites everyone

519
00:22:10,320 --> 00:22:13,029
here's a quick example of how it gets

520
00:22:13,029 --> 00:22:15,399
bad you can have if you extend something

521
00:22:15,399 --> 00:22:17,889
that's used in multiple places then your

522
00:22:17,889 --> 00:22:20,049
selector gets used in multiple places if

523
00:22:20,049 --> 00:22:21,669
you have complicated selectors yourself

524
00:22:21,669 --> 00:22:22,419
and you

525
00:22:22,419 --> 00:22:24,149
stand something then it gets even worse

526
00:22:24,149 --> 00:22:29,230
it bloats it bloats and the i guess the

527
00:22:29,230 --> 00:22:34,090
worst case is a ryanair the airline that

528
00:22:34,090 --> 00:22:36,369
nobody particularly likes just released

529
00:22:36,369 --> 00:22:37,720
a responsive redesign that takes

530
00:22:37,720 --> 00:22:40,269
something like 30 seconds to render on

531
00:22:40,269 --> 00:22:42,489
an iphone 5 something like that even on

532
00:22:42,489 --> 00:22:45,759
4G even on a macbook pro I think it pegs

533
00:22:45,759 --> 00:22:48,539
the CPU just passing the see the CSS for

534
00:22:48,539 --> 00:22:51,399
one and a half seconds and nothing is

535
00:22:51,399 --> 00:22:52,480
accessible in that one and a half

536
00:22:52,480 --> 00:22:53,739
seconds it's just simply trying to

537
00:22:53,739 --> 00:22:56,289
understand this mess what I like about

538
00:22:56,289 --> 00:22:58,960
this example one it's rain air and I

539
00:22:58,960 --> 00:23:00,730
don't particular like them the other is

540
00:23:00,730 --> 00:23:02,529
that all of this code is to reset a

541
00:23:02,529 --> 00:23:05,759
border radius to zero which means

542
00:23:05,759 --> 00:23:08,109
somewhere else border radius is being

543
00:23:08,109 --> 00:23:12,090
set for everything to something else

544
00:23:12,090 --> 00:23:14,590
this is why extend gets a bad rap this

545
00:23:14,590 --> 00:23:16,960
is clearly using extend and it has this

546
00:23:16,960 --> 00:23:21,129
runaway output this is terrifying so you

547
00:23:21,129 --> 00:23:22,749
get blog posts that written like this

548
00:23:22,749 --> 00:23:24,759
what nobody told you why you should

549
00:23:24,759 --> 00:23:27,100
avoid extending SAS without creating a

550
00:23:27,100 --> 00:23:28,960
mess or my favorite which is SAS doesn't

551
00:23:28,960 --> 00:23:32,440
create bad code bad coders do just on

552
00:23:32,440 --> 00:23:35,879
the topic of coding for newcomers

553
00:23:35,879 --> 00:23:38,019
writing titles like this now the rest of

554
00:23:38,019 --> 00:23:39,700
the article is a lot more nuanced and a

555
00:23:39,700 --> 00:23:42,489
lot more clever but titles like this

556
00:23:42,489 --> 00:23:44,109
have the potential to harm people who

557
00:23:44,109 --> 00:23:47,139
are new to code who are potentially

558
00:23:47,139 --> 00:23:49,090
making the mistake that extend leaves

559
00:23:49,090 --> 00:23:51,129
there for them and if they suddenly see

560
00:23:51,129 --> 00:23:52,330
a headline saying that there are bad

561
00:23:52,330 --> 00:23:54,820
coders then maybe that contributes to a

562
00:23:54,820 --> 00:23:56,169
general hostility that doesn't need to

563
00:23:56,169 --> 00:24:00,009
be their dog in CSS modules how does it

564
00:24:00,009 --> 00:24:01,899
work well it's a one-to-one replacement

565
00:24:01,899 --> 00:24:05,049
for extend in this simple case so normal

566
00:24:05,049 --> 00:24:07,600
composer space danger composers base

567
00:24:07,600 --> 00:24:09,460
again we don't have to use submit button

568
00:24:09,460 --> 00:24:11,639
because that's implied by the file

569
00:24:11,639 --> 00:24:14,859
extending and composers are identical in

570
00:24:14,859 --> 00:24:19,149
this example we also have the benefit of

571
00:24:19,149 --> 00:24:21,730
still using just one name right normal

572
00:24:21,730 --> 00:24:23,799
in danger as we saw before doesn't

573
00:24:23,799 --> 00:24:25,239
really matter what the output is we

574
00:24:25,239 --> 00:24:26,980
always just use that one name and I

575
00:24:26,980 --> 00:24:28,899
can't harp on about that enough because

576
00:24:28,899 --> 00:24:30,999
being able to having confidence in your

577
00:24:30,999 --> 00:24:33,549
markup when you're typing the line for

578
00:24:33,549 --> 00:24:35,260
your markup that you only have to

579
00:24:35,260 --> 00:24:40,450
right one thing is is very comforting so

580
00:24:40,450 --> 00:24:42,820
go through how this works CSS module

581
00:24:42,820 --> 00:24:46,420
sees these three lines the first thing

582
00:24:46,420 --> 00:24:48,550
it does is it rewrites all those classes

583
00:24:48,550 --> 00:24:50,980
because the classes need to be safe for

584
00:24:50,980 --> 00:24:52,570
global consumption depending on whatever

585
00:24:52,570 --> 00:24:53,920
rules you're using it generates these

586
00:24:53,920 --> 00:24:56,020
classes it exports those classes so that

587
00:24:56,020 --> 00:24:57,460
your javascript the rest of your

588
00:24:57,460 --> 00:24:59,320
application can deal with it and inject

589
00:24:59,320 --> 00:25:02,770
it composers instead of changing the CSS

590
00:25:02,770 --> 00:25:06,870
in any way just moves the export so now

591
00:25:06,870 --> 00:25:09,370
normal when you use normal you get two

592
00:25:09,370 --> 00:25:11,880
classes as Mark already demonstrated and

593
00:25:11,880 --> 00:25:15,040
that severely reduces the number of

594
00:25:15,040 --> 00:25:16,810
places that you can use composers you

595
00:25:16,810 --> 00:25:18,550
can't use it in a pseudo selector you

596
00:25:18,550 --> 00:25:20,200
can't use it at a nested selector it has

597
00:25:20,200 --> 00:25:22,180
to be that simple relationship that this

598
00:25:22,180 --> 00:25:25,060
thing is something else which is all of

599
00:25:25,060 --> 00:25:29,160
the edge cases of extends just disappear

600
00:25:29,160 --> 00:25:32,350
so when you use it styles dot danger one

601
00:25:32,350 --> 00:25:35,710
word you get two classes out and that

602
00:25:35,710 --> 00:25:39,580
breaking the one-to-one mapping is a big

603
00:25:39,580 --> 00:25:42,610
deal it means you can change it means

604
00:25:42,610 --> 00:25:44,020
you have total flexibility of the number

605
00:25:44,020 --> 00:25:45,730
of classes the type of classes what the

606
00:25:45,730 --> 00:25:47,860
classes are how big they are when you

607
00:25:47,860 --> 00:25:49,450
compose them whether they have one line

608
00:25:49,450 --> 00:25:53,650
of CSS or a hundred that ends up being a

609
00:25:53,650 --> 00:25:55,990
big deal and how you change in changing

610
00:25:55,990 --> 00:26:00,400
how you style so the simple cases here

611
00:26:00,400 --> 00:26:02,020
where the blue and the light blue

612
00:26:02,020 --> 00:26:03,460
background we want to use from somewhere

613
00:26:03,460 --> 00:26:04,870
else we have a colors file we have a

614
00:26:04,870 --> 00:26:06,160
blue class we have a light blue

615
00:26:06,160 --> 00:26:08,380
background class and now our normal

616
00:26:08,380 --> 00:26:10,690
button is a base button but it's also a

617
00:26:10,690 --> 00:26:13,330
blue light blue background from colors

618
00:26:13,330 --> 00:26:15,400
and this is where the input syntax comes

619
00:26:15,400 --> 00:26:17,740
in so that I see a sense underneath is

620
00:26:17,740 --> 00:26:19,870
wiring up the dependencies building a

621
00:26:19,870 --> 00:26:22,240
dependency graph which webpack and

622
00:26:22,240 --> 00:26:26,680
others are very happy to consume that

623
00:26:26,680 --> 00:26:28,720
gets compiled the boot the colors file

624
00:26:28,720 --> 00:26:30,880
gets compiled the buttons file gets

625
00:26:30,880 --> 00:26:32,080
compiled and then they just get

626
00:26:32,080 --> 00:26:34,090
concatenated because it's just normal

627
00:26:34,090 --> 00:26:38,800
CSS your button when you use normal now

628
00:26:38,800 --> 00:26:42,220
generates for classes and what's good

629
00:26:42,220 --> 00:26:45,340
about this example is that normal now no

630
00:26:45,340 --> 00:26:48,580
longer has any rules it's simply a

631
00:26:48,580 --> 00:26:51,399
culmination of other rules elsewhere and

632
00:26:51,399 --> 00:26:52,720
in fact you put this through a min afire

633
00:26:52,720 --> 00:26:54,929
and that normal line will just disappear

634
00:26:54,929 --> 00:26:57,190
which means you built a novel piece of

635
00:26:57,190 --> 00:26:58,870
you I something that somebody asked you

636
00:26:58,870 --> 00:27:00,970
to build without adding a line of CSS

637
00:27:00,970 --> 00:27:03,250
the more times you can do that in your

638
00:27:03,250 --> 00:27:06,370
job the happier you will be from

639
00:27:06,370 --> 00:27:09,010
experience the more CSS every line of

640
00:27:09,010 --> 00:27:14,039
CSS you write is should earn its place

641
00:27:14,039 --> 00:27:16,120
and this turns you to this sort of

642
00:27:16,120 --> 00:27:17,350
structure now people already do this

643
00:27:17,350 --> 00:27:20,669
with sass and they do it fine they do a

644
00:27:20,669 --> 00:27:22,870
shared directory full of things like

645
00:27:22,870 --> 00:27:24,639
colors typography layout borders

646
00:27:24,639 --> 00:27:27,370
dividers sizes animations effects

647
00:27:27,370 --> 00:27:29,440
whatever and then a components directory

648
00:27:29,440 --> 00:27:31,539
probably alongside their JavaScript

649
00:27:31,539 --> 00:27:34,960
images tests whatever it is and that

650
00:27:34,960 --> 00:27:39,730
division is very beneficial it turns you

651
00:27:39,730 --> 00:27:41,049
towards this idea of using single

652
00:27:41,049 --> 00:27:42,730
purpose files using full of single

653
00:27:42,730 --> 00:27:45,010
purpose classes that's how I code at the

654
00:27:45,010 --> 00:27:48,490
moment to give another example a bit

655
00:27:48,490 --> 00:27:50,860
more scary let's say an article needs to

656
00:27:50,860 --> 00:27:52,809
be a vertical flexbox and a masthead

657
00:27:52,809 --> 00:27:55,990
needs to be 48 point bold serif centered

658
00:27:55,990 --> 00:27:59,260
with margin and padding we can pull

659
00:27:59,260 --> 00:28:01,289
those all those things from other places

660
00:28:01,289 --> 00:28:04,389
so lay out the word the class centered

661
00:28:04,389 --> 00:28:05,620
inside layup means something different

662
00:28:05,620 --> 00:28:07,529
from centered in typography which

663
00:28:07,529 --> 00:28:10,510
shouldn't be confusing because those do

664
00:28:10,510 --> 00:28:12,039
have meaning in those files you have

665
00:28:12,039 --> 00:28:15,039
context as well as names the output you

666
00:28:15,039 --> 00:28:16,600
get three classes for the article and

667
00:28:16,600 --> 00:28:19,299
seven classes for the div but you don't

668
00:28:19,299 --> 00:28:22,720
see that you just use the name and that

669
00:28:22,720 --> 00:28:24,519
breaking of what you get what you're

670
00:28:24,519 --> 00:28:28,610
generating from what you're putting in

671
00:28:28,620 --> 00:28:30,549
increases your confidence with what

672
00:28:30,549 --> 00:28:32,799
you're building what it's doing is

673
00:28:32,799 --> 00:28:35,529
defining an API into your styles you

674
00:28:35,529 --> 00:28:38,260
have the same same choices that you have

675
00:28:38,260 --> 00:28:39,760
designing other parts of your

676
00:28:39,760 --> 00:28:44,950
application in your CSS file so what a

677
00:28:44,950 --> 00:28:46,809
what is modular style then because I

678
00:28:46,809 --> 00:28:48,669
mean we talked about it it's less than

679
00:28:48,669 --> 00:28:51,539
six months since that first conversation

680
00:28:51,539 --> 00:28:53,860
about five months since the whole idea

681
00:28:53,860 --> 00:28:56,049
of interoperable CSS CSS modules hasn't

682
00:28:56,049 --> 00:28:58,029
has had a name for yet less than six

683
00:28:58,029 --> 00:28:59,950
months we don't wear the right at the

684
00:28:59,950 --> 00:29:02,000
beginning of this stuff so we don't

685
00:29:02,000 --> 00:29:04,130
know where this is going but the one

686
00:29:04,130 --> 00:29:05,660
thing I'm pretty confident on is that

687
00:29:05,660 --> 00:29:08,900
the module system that we built should

688
00:29:08,900 --> 00:29:11,300
be capable of supporting whatever the

689
00:29:11,300 --> 00:29:14,090
next big CSS technique is whether its

690
00:29:14,090 --> 00:29:16,220
CSS modules or something else because

691
00:29:16,220 --> 00:29:18,320
going from having one global context to

692
00:29:18,320 --> 00:29:21,170
having lots of individual contexts does

693
00:29:21,170 --> 00:29:24,230
change what you're capable of Four

694
00:29:24,230 --> 00:29:25,460
Seasons modules I think the key is

695
00:29:25,460 --> 00:29:27,860
flexibility there's one thing that I

696
00:29:27,860 --> 00:29:31,430
want to talk about a little bit even

697
00:29:31,430 --> 00:29:33,740
though running out of time which is this

698
00:29:33,740 --> 00:29:36,080
idea of atomic design type of design is

699
00:29:36,080 --> 00:29:37,880
a great metaphor for discussing

700
00:29:37,880 --> 00:29:40,640
different elements at different levels

701
00:29:40,640 --> 00:29:43,040
of resolution across an entire team

702
00:29:43,040 --> 00:29:44,810
between designers developers everybody

703
00:29:44,810 --> 00:29:47,000
it's a excellent metaphor if you haven't

704
00:29:47,000 --> 00:29:48,230
tried using it in your projects you

705
00:29:48,230 --> 00:29:50,840
should but as an implementer like myself

706
00:29:50,840 --> 00:29:53,300
I see all of those things and I just see

707
00:29:53,300 --> 00:29:55,340
a component and once you start working

708
00:29:55,340 --> 00:29:56,900
with react once you start moving two

709
00:29:56,900 --> 00:29:59,330
components you realize that the level at

710
00:29:59,330 --> 00:30:02,060
which or the size of which a component

711
00:30:02,060 --> 00:30:04,460
is doesn't change how you build it but

712
00:30:04,460 --> 00:30:06,260
it changes how you talk about it how

713
00:30:06,260 --> 00:30:08,870
many times it's used what parameters it

714
00:30:08,870 --> 00:30:12,920
takes and I think if modular UI is

715
00:30:12,920 --> 00:30:14,900
capable through components as I feel

716
00:30:14,900 --> 00:30:19,190
like it is then modular styling comes

717
00:30:19,190 --> 00:30:21,860
through composing classes being able to

718
00:30:21,860 --> 00:30:23,510
no matter what the metaphor whatever

719
00:30:23,510 --> 00:30:25,670
whatever style of code that you're

720
00:30:25,670 --> 00:30:27,230
writing knowing that you always have

721
00:30:27,230 --> 00:30:29,030
that one technique which is that each

722
00:30:29,030 --> 00:30:31,400
file has local scope and that you can

723
00:30:31,400 --> 00:30:35,180
compose glasses from other places as we

724
00:30:35,180 --> 00:30:36,470
talked about it one of the questions

725
00:30:36,470 --> 00:30:38,150
just before is this idea of reusable

726
00:30:38,150 --> 00:30:41,420
components so it's an area of intense

727
00:30:41,420 --> 00:30:43,250
discussion about what does this mean for

728
00:30:43,250 --> 00:30:44,930
the next bootstrap how am I going to

729
00:30:44,930 --> 00:30:46,820
publish something that I can consume the

730
00:30:46,820 --> 00:30:48,290
bits that i need and leave all the bits

731
00:30:48,290 --> 00:30:51,080
that don't it's still an open question

732
00:30:51,080 --> 00:30:52,460
we'd love you to contribute to the

733
00:30:52,460 --> 00:30:56,150
discussion but in the same way that npm

734
00:30:56,150 --> 00:30:57,950
took a little while after jeaious had

735
00:30:57,950 --> 00:30:59,450
this module system it's going to take a

736
00:30:59,450 --> 00:31:00,980
little while to figure out the best ways

737
00:31:00,980 --> 00:31:03,590
to do this and the other big thing for

738
00:31:03,590 --> 00:31:06,140
us is non javascript assistance mark

739
00:31:06,140 --> 00:31:07,370
already hinted at it it's a personal

740
00:31:07,370 --> 00:31:09,440
thing of mine which is that all of the

741
00:31:09,440 --> 00:31:10,700
fill of the things I've been talking

742
00:31:10,700 --> 00:31:13,910
about as making CSS easier for humans at

743
00:31:13,910 --> 00:31:15,470
the moment depends on JavaScript being

744
00:31:15,470 --> 00:31:15,779
involved

745
00:31:15,779 --> 00:31:18,299
at some point whether it's generating a

746
00:31:18,299 --> 00:31:20,190
static site or actually running your

747
00:31:20,190 --> 00:31:23,639
application and it doesn't need to be it

748
00:31:23,639 --> 00:31:25,529
can be completely offline the same way

749
00:31:25,529 --> 00:31:27,539
that SAS can be used everywhere I think

750
00:31:27,539 --> 00:31:29,099
CSS modules should be able to be used

751
00:31:29,099 --> 00:31:34,619
everywhere we have a team of people who

752
00:31:34,619 --> 00:31:37,649
are building stuff it's not just me the

753
00:31:37,649 --> 00:31:39,570
project has a lot of momentum behind it

754
00:31:39,570 --> 00:31:40,919
has a lot of issues a lot of people

755
00:31:40,919 --> 00:31:43,679
contributing discussions patches please

756
00:31:43,679 --> 00:31:45,539
if you are interested please get

757
00:31:45,539 --> 00:31:47,369
involved we're right at the beginning of

758
00:31:47,369 --> 00:31:50,039
this as I said my slides are up here

759
00:31:50,039 --> 00:31:52,379
cesar's modules is there if you like

760
00:31:52,379 --> 00:31:54,809
another introductory to the concept I

761
00:31:54,809 --> 00:31:56,580
wrote a blog about it that's me on

762
00:31:56,580 --> 00:32:02,419
Twitter thanks very much for time hey um

763
00:32:02,419 --> 00:32:05,879
let's say you have a like a layout CSS

764
00:32:05,879 --> 00:32:07,679
file would like all the different layout

765
00:32:07,679 --> 00:32:09,059
techniques that you could possibly

766
00:32:09,059 --> 00:32:11,940
imagine and you only use maybe half of

767
00:32:11,940 --> 00:32:14,969
them in your actual application will the

768
00:32:14,969 --> 00:32:18,089
CSS modules actually strip out the rest

769
00:32:18,089 --> 00:32:19,710
of it or will they remain in there when

770
00:32:19,710 --> 00:32:22,830
they're compiled or what at the moment

771
00:32:22,830 --> 00:32:25,139
they'll remain in but one of the

772
00:32:25,139 --> 00:32:26,729
benefits of actually encoding your

773
00:32:26,729 --> 00:32:29,369
dependencies and having written down

774
00:32:29,369 --> 00:32:31,799
that this thing needs this thing means

775
00:32:31,799 --> 00:32:34,710
that we can properly crawl the defensive

776
00:32:34,710 --> 00:32:36,539
graph and remove things that aren't

777
00:32:36,539 --> 00:32:39,809
needed one of the things I think that

778
00:32:39,809 --> 00:32:42,539
I've found as I've moved towards sharing

779
00:32:42,539 --> 00:32:44,639
more CSS putting more CSS into

780
00:32:44,639 --> 00:32:46,889
fundamental building blocks is the size

781
00:32:46,889 --> 00:32:50,419
of my output CSS is a lot smaller that

782
00:32:50,419 --> 00:32:53,279
when you have 100 components but they

783
00:32:53,279 --> 00:32:55,889
share most of their code it doesn't seem

784
00:32:55,889 --> 00:32:57,960
to bloat at the same speed as if you

785
00:32:57,960 --> 00:33:00,509
start with a fresh file and you include

786
00:33:00,509 --> 00:33:02,909
a whole lot of things and so it's been

787
00:33:02,909 --> 00:33:04,889
less we've had less pressure to do that

788
00:33:04,889 --> 00:33:06,629
but certainly we have the function at

789
00:33:06,629 --> 00:33:07,979
their capability to that in the future

790
00:33:07,979 --> 00:33:10,200
like okay so you're talking about like

791
00:33:10,200 --> 00:33:11,309
having like hundreds and hundreds of

792
00:33:11,309 --> 00:33:12,839
components say but I quite a big web app

793
00:33:12,839 --> 00:33:15,649
there's hundreds of components in there

794
00:33:15,649 --> 00:33:18,690
just thinking about like how you direct

795
00:33:18,690 --> 00:33:20,759
dive them like with the directives and

796
00:33:20,759 --> 00:33:22,859
stuff like that would you put components

797
00:33:22,859 --> 00:33:25,139
into direct into like specific folders

798
00:33:25,139 --> 00:33:26,729
or would you put them all in one area

799
00:33:26,729 --> 00:33:27,730
like

800
00:33:27,730 --> 00:33:28,540
one thing we've been trying to think

801
00:33:28,540 --> 00:33:30,280
about actually where we are is like how

802
00:33:30,280 --> 00:33:32,560
how we can go about creating directories

803
00:33:32,560 --> 00:33:34,540
with things that are easy to read and

804
00:33:34,540 --> 00:33:35,800
funnel through without having them all

805
00:33:35,800 --> 00:33:37,990
in one area yeah you thought about that

806
00:33:37,990 --> 00:33:40,030
I've thought about it I don't have a

807
00:33:40,030 --> 00:33:43,240
good answer i think the divisions your

808
00:33:43,240 --> 00:33:46,120
components is an art it's the same way

809
00:33:46,120 --> 00:33:48,910
is dividing your styles into fundamental

810
00:33:48,910 --> 00:33:53,200
blocks he's an art and it i found i've

811
00:33:53,200 --> 00:33:55,000
had that same progression using angular

812
00:33:55,000 --> 00:33:57,520
not react potentially react makes it a

813
00:33:57,520 --> 00:33:59,170
little bit easier but with angular i

814
00:33:59,170 --> 00:34:01,630
found that when you have 30 components

815
00:34:01,630 --> 00:34:03,340
you're fine but then one component needs

816
00:34:03,340 --> 00:34:05,080
five variants and you don't want all

817
00:34:05,080 --> 00:34:06,400
those five variants to live in one file

818
00:34:06,400 --> 00:34:10,420
and so tooling around that stuff is

819
00:34:10,420 --> 00:34:13,420
still still coming out it's still early

820
00:34:13,420 --> 00:34:17,590
days but it works well for the first 30

821
00:34:17,590 --> 00:34:19,270
and it feels like it should keep working

822
00:34:19,270 --> 00:34:21,250
as you have lots and lots of more

823
00:34:21,250 --> 00:34:24,520
variations one of the things that I've

824
00:34:24,520 --> 00:34:25,840
seen one of the approaches I've seen is

825
00:34:25,840 --> 00:34:28,810
encoding more things into arguments so

826
00:34:28,810 --> 00:34:30,910
there is a kind of upper level component

827
00:34:30,910 --> 00:34:34,630
that the whose sole responsibility is to

828
00:34:34,630 --> 00:34:36,670
dispatch to smaller components so that

829
00:34:36,670 --> 00:34:38,380
it gets all the inputs is common

830
00:34:38,380 --> 00:34:39,460
interface for everything but then the

831
00:34:39,460 --> 00:34:41,260
implementation that's more and they

832
00:34:41,260 --> 00:34:42,580
would live in a subdirectory or

833
00:34:42,580 --> 00:34:46,350
something but yeah it's it's a if

834
00:34:46,350 --> 00:34:48,310
everybody's mileage is varying at the

