1
00:00:07,550 --> 00:00:11,150

I'm going to talk about current events

2
00:00:11,150 --> 00:00:14,130
but we have to understand history or

3
00:00:14,130 --> 00:00:15,480
we're doomed to repeat it so I'll do a

4
00:00:15,480 --> 00:00:16,800
little bit of history I think most you

5
00:00:16,800 --> 00:00:17,940
know this and you're probably gonna want

6
00:00:17,940 --> 00:00:23,580
me to go fast Plus kittens so es6 is

7
00:00:23,580 --> 00:00:25,260
happening people sometimes don't believe

8
00:00:25,260 --> 00:00:28,170
it we'll get into that maybe there's

9
00:00:28,170 --> 00:00:29,550
some things we're doing wrong I want to

10
00:00:29,550 --> 00:00:31,250
talk about that because the community

11
00:00:31,250 --> 00:00:34,500
counts a lot with me and then I'll go to

12
00:00:34,500 --> 00:00:38,460
demo parallel JavaScript so when I went

13
00:00:38,460 --> 00:00:40,110
to Netscape and I had 10 days to do this

14
00:00:40,110 --> 00:00:43,200
demo where that became shift it wasn't

15
00:00:43,200 --> 00:00:44,820
just you know mismanagement in netscape

16
00:00:44,820 --> 00:00:47,250
there really was microsoft bearing down

17
00:00:47,250 --> 00:00:51,570
on netscape and vbscript was looming so

18
00:00:51,570 --> 00:00:54,120
I missed the morning talk about what

19
00:00:54,120 --> 00:00:55,260
might have happened if it hadn't been

20
00:00:55,260 --> 00:00:57,260
JavaScript it would have been vbscript

21
00:00:57,260 --> 00:01:01,829
so thank God and then you know the name

22
00:01:01,829 --> 00:01:05,430
sucks but what are you gonna do it's

23
00:01:05,430 --> 00:01:07,619
really funny the Intel folks we've been

24
00:01:07,619 --> 00:01:10,260
working with want to call River Trail

25
00:01:10,260 --> 00:01:12,180
parallel JavaScript so they're going to

26
00:01:12,180 --> 00:01:14,390
oracle to ask for a trademark license

27
00:01:14,390 --> 00:01:18,630
this is probably not going to work son

28
00:01:18,630 --> 00:01:19,890
used to be very jealous they went after

29
00:01:19,890 --> 00:01:22,080
a man of mill European descent whose

30
00:01:22,080 --> 00:01:24,840
surname was yvonne co they said your

31
00:01:24,840 --> 00:01:26,580
name starts with j VA you cannot use

32
00:01:26,580 --> 00:01:28,560
this as your vanity domain site we will

33
00:01:28,560 --> 00:01:31,619
sue you in he got them to cease and

34
00:01:31,619 --> 00:01:35,820
desist so I've been talking about how we

35
00:01:35,820 --> 00:01:38,670
make standards in the Harmony era and it

36
00:01:38,670 --> 00:01:40,020
has its ups and downs and pluses and

37
00:01:40,020 --> 00:01:41,640
minuses it's kind of a little soap opera

38
00:01:41,640 --> 00:01:44,280
but it is making progress if it weren't

39
00:01:44,280 --> 00:01:45,869
we wouldn't do it we do something else

40
00:01:45,869 --> 00:01:48,390
that happens with age to Ellen and so on

41
00:01:48,390 --> 00:01:50,450
that was the what WG we actually

42
00:01:50,450 --> 00:01:53,490
realized in 2004 the w3c wasn't

43
00:01:53,490 --> 00:01:55,079
interested in HTML or the web so we

44
00:01:55,079 --> 00:01:58,020
created the what WG did html5 but

45
00:01:58,020 --> 00:01:59,729
javascript is making progress in a coma

46
00:01:59,729 --> 00:02:02,399
and I'll talk about that es3 was the

47
00:02:02,399 --> 00:02:04,170
last big addition for es5 that was a

48
00:02:04,170 --> 00:02:06,329
long time ago since then people learned

49
00:02:06,329 --> 00:02:08,190
how to use language well computers got

50
00:02:08,190 --> 00:02:08,840
faster

51
00:02:08,840 --> 00:02:11,120
javascript gotten faster some important

52
00:02:11,120 --> 00:02:14,360
api's came along yes for a rest in peace

53
00:02:14,360 --> 00:02:16,310
it's funny how some pieces of it want to

54
00:02:16,310 --> 00:02:17,810
keep coming back at least from some

55
00:02:17,810 --> 00:02:20,540
people on the committee es5 is here it's

56
00:02:20,540 --> 00:02:22,580
actually in all the modern browsers I 10

57
00:02:22,580 --> 00:02:24,260
platform preview even has strict mode

58
00:02:24,260 --> 00:02:28,340
support we have some goals it's

59
00:02:28,340 --> 00:02:29,569
important to know what you're doing what

60
00:02:29,569 --> 00:02:31,519
you're not doing so we're not trying to

61
00:02:31,519 --> 00:02:33,049
make everybody happy we're we're

62
00:02:33,049 --> 00:02:35,629
concerned that JavaScript has grown way

63
00:02:35,629 --> 00:02:37,549
beyond its original design point it's

64
00:02:37,549 --> 00:02:39,680
used for incredibly complex applications

65
00:02:39,680 --> 00:02:41,540
which involved factoring into libraries

66
00:02:41,540 --> 00:02:43,489
the Dom should just be a library it's

67
00:02:43,489 --> 00:02:45,019
got this privileged status with lots of

68
00:02:45,019 --> 00:02:47,510
weirdo host objects but we're trying to

69
00:02:47,510 --> 00:02:49,400
tame those it's long project it's

70
00:02:49,400 --> 00:02:50,870
happening through proxies which I talked

71
00:02:50,870 --> 00:02:52,250
about a year ago jay is coming to you

72
00:02:52,250 --> 00:02:54,650
the what about al work that is being

73
00:02:54,650 --> 00:02:56,480
edited by Cameron McCormick is also

74
00:02:56,480 --> 00:02:59,690
helping we're getting the Java OMG IDL

75
00:02:59,690 --> 00:03:02,569
stuff out of Y by DL and we're very

76
00:03:02,569 --> 00:03:04,489
concerned with code generators so I'm

77
00:03:04,489 --> 00:03:06,950
scripting right or coffee script lots

78
00:03:06,950 --> 00:03:08,299
and lots of code generators and they

79
00:03:08,299 --> 00:03:10,099
need they need some language extensions

80
00:03:10,099 --> 00:03:11,239
and I'm thinking more and more about

81
00:03:11,239 --> 00:03:12,590
this in connection with things like

82
00:03:12,590 --> 00:03:16,010
typed arrays and parallel rays we have

83
00:03:16,010 --> 00:03:17,540
tests which is amazing there's a link

84
00:03:17,540 --> 00:03:20,720
there we have test 2629 script org a lot

85
00:03:20,720 --> 00:03:22,400
of specs get produced without tests

86
00:03:22,400 --> 00:03:24,319
these tests are not normative they're

87
00:03:24,319 --> 00:03:25,670
not the final answer they're like

88
00:03:25,670 --> 00:03:27,470
software their buggy and they need to be

89
00:03:27,470 --> 00:03:29,120
continually evolved but we have tests

90
00:03:29,120 --> 00:03:32,480
that's pretty good and we want to adopt

91
00:03:32,480 --> 00:03:35,329
standards you guys create we want to see

92
00:03:35,329 --> 00:03:37,220
stuff and merge on github and win we

93
00:03:37,220 --> 00:03:38,269
don't want to invent it in committee

94
00:03:38,269 --> 00:03:39,739
because no committee can do as good a

95
00:03:39,739 --> 00:03:43,190
job as the community we want to keep our

96
00:03:43,190 --> 00:03:46,609
version story just like stepping up from

97
00:03:46,609 --> 00:03:48,410
strict mode one step and then not

98
00:03:48,410 --> 00:03:50,630
forking again we're not going to have

99
00:03:50,630 --> 00:03:53,720
stricter strict mode and this one's near

100
00:03:53,720 --> 00:03:55,790
and dear to Mark Millar's heart of Mark

101
00:03:55,790 --> 00:03:57,910
Miller Google kaha fame we want to

102
00:03:57,910 --> 00:04:00,169
repair JavaScript it's almost there with

103
00:04:00,169 --> 00:04:02,569
es5 strict so that it is a capability

104
00:04:02,569 --> 00:04:04,190
language because that's the security

105
00:04:04,190 --> 00:04:06,349
model in JavaScript the Dom has its own

106
00:04:06,349 --> 00:04:07,519
issues but javascript actually has a

107
00:04:07,519 --> 00:04:09,769
fairly strong model if you fix a few

108
00:04:09,769 --> 00:04:12,650
things so here's what's of any s6e

109
00:04:12,650 --> 00:04:15,079
finally notice let is the new VAR const

110
00:04:15,079 --> 00:04:17,209
is like wet only you have to initialize

111
00:04:17,209 --> 00:04:17,920
it you can

112
00:04:17,920 --> 00:04:20,710
use it before it's initialized and

113
00:04:20,710 --> 00:04:23,590
function can work in block scope in a

114
00:04:23,590 --> 00:04:25,210
standard way that's only in that block

115
00:04:25,210 --> 00:04:26,530
scope the way it works in browsers now

116
00:04:26,530 --> 00:04:29,320
is is wacky and different destructuring

117
00:04:29,320 --> 00:04:31,540
this is for Alex Sexton who can't be

118
00:04:31,540 --> 00:04:33,460
here because he's getting married he he

119
00:04:33,460 --> 00:04:34,660
wants to structuring you want something

120
00:04:34,660 --> 00:04:36,520
I'll get to on the next line but the

121
00:04:36,520 --> 00:04:38,050
structuring is what you know from Python

122
00:04:38,050 --> 00:04:42,190
Ruby unpacking destructuring in ml it's

123
00:04:42,190 --> 00:04:43,990
really sweet there's an object shorthand

124
00:04:43,990 --> 00:04:45,690
that works if you're creating an object

125
00:04:45,690 --> 00:04:48,280
from free variables x and y it looks

126
00:04:48,280 --> 00:04:49,690
just like that without the wet on the

127
00:04:49,690 --> 00:04:52,170
left or the assignment on the right

128
00:04:52,170 --> 00:04:54,490
parameter default values right you got

129
00:04:54,490 --> 00:04:58,030
to have these the first parameter X

130
00:04:58,030 --> 00:04:59,650
doesn't have a default value the second

131
00:04:59,650 --> 00:05:01,870
one y has one is its default value so if

132
00:05:01,870 --> 00:05:03,550
you call f with only one actual

133
00:05:03,550 --> 00:05:07,120
parameter y will be bound to one and you

134
00:05:07,120 --> 00:05:10,030
can use parameters to the left this is

135
00:05:10,030 --> 00:05:11,770
like prologue code in the function after

136
00:05:11,770 --> 00:05:13,360
it's been activated so why I could have

137
00:05:13,360 --> 00:05:15,370
defaulted to X or x times X or something

138
00:05:15,370 --> 00:05:17,530
spread expression involving X and then

139
00:05:17,530 --> 00:05:19,870
the third formal crowder there is

140
00:05:19,870 --> 00:05:21,760
actually a destructuring pattern it says

141
00:05:21,760 --> 00:05:24,520
it f if it takes a third actual

142
00:05:24,520 --> 00:05:26,290
parameters should receive an object and

143
00:05:26,290 --> 00:05:28,300
that object might want to have Z and W

144
00:05:28,300 --> 00:05:30,180
is properties but if it doesn't

145
00:05:30,180 --> 00:05:32,230
individually one of those are both are

146
00:05:32,230 --> 00:05:34,900
missing they will be defaulted and that

147
00:05:34,900 --> 00:05:36,130
allows you to get rid of a lot of

148
00:05:36,130 --> 00:05:37,600
boilerplate you guys probably do where

149
00:05:37,600 --> 00:05:40,060
you look at the argument you see if

150
00:05:40,060 --> 00:05:41,830
that's this property you know in

151
00:05:41,830 --> 00:05:44,080
CoffeeScript you would use existential

152
00:05:44,080 --> 00:05:46,960
or conditional expressions this is all

153
00:05:46,960 --> 00:05:48,640
wrapped up into the structuring and

154
00:05:48,640 --> 00:05:52,570
default parameter values rest thanks

155
00:05:52,570 --> 00:05:54,100
rest and spread we want to fill the

156
00:05:54,100 --> 00:05:55,690
arguments object we can't kill it fast

157
00:05:55,690 --> 00:05:57,670
because a lot of code will migrate with

158
00:05:57,670 --> 00:06:00,130
it it's a pain to rewrite but once we

159
00:06:00,130 --> 00:06:02,140
put rest and spread in we can think

160
00:06:02,140 --> 00:06:04,270
about killing arguments I'll be down the

161
00:06:04,270 --> 00:06:06,430
road but that's really good because now

162
00:06:06,430 --> 00:06:08,410
you'll get a real array you don't do

163
00:06:08,410 --> 00:06:10,380
this crazy array that prototype that

164
00:06:10,380 --> 00:06:16,060
slice call arguments jazz to turn it

165
00:06:16,060 --> 00:06:18,820
into an arguments object and copy it you

166
00:06:18,820 --> 00:06:21,280
actually get in the thoughts are you get

167
00:06:21,280 --> 00:06:23,140
found to the armed perimeter you get a

168
00:06:23,140 --> 00:06:23,950
real ray

169
00:06:23,950 --> 00:06:26,470
and if you want to turn an array into

170
00:06:26,470 --> 00:06:28,000
positional parameters and spread them

171
00:06:28,000 --> 00:06:29,620
out across an actual argument list you

172
00:06:29,620 --> 00:06:31,660
can do that with the other the prefix it

173
00:06:31,660 --> 00:06:33,310
also works in a rayon ishal I zor's

174
00:06:33,310 --> 00:06:36,880
special form proxies these are actually

175
00:06:36,880 --> 00:06:39,130
in v8 now as well as spider monkey

176
00:06:39,130 --> 00:06:40,690
they're under a flag but you can test

177
00:06:40,690 --> 00:06:42,550
them in v8 that's excellent news and

178
00:06:42,550 --> 00:06:43,960
that means we can have interoperation

179
00:06:43,960 --> 00:06:45,760
testing which we need we're still

180
00:06:45,760 --> 00:06:46,750
tweaking the design a little and

181
00:06:46,750 --> 00:06:48,070
committee but they're good when you have

182
00:06:48,070 --> 00:06:49,630
proxies you can do all sorts of amazing

183
00:06:49,630 --> 00:06:51,250
things known as you want to hang on to

184
00:06:51,250 --> 00:06:53,890
sort of cash or memorize objects but not

185
00:06:53,890 --> 00:06:56,110
make them leak not create memory leaks

186
00:06:56,110 --> 00:06:58,030
not memorize the world week maps are

187
00:06:58,030 --> 00:07:00,910
important for that modules this is one

188
00:07:00,910 --> 00:07:02,020
of the biggest things i think in es6

189
00:07:02,020 --> 00:07:05,260
this is a second class by default module

190
00:07:05,260 --> 00:07:07,090
system you can reflect on it there's a

191
00:07:07,090 --> 00:07:09,550
dynamic module loader API so when you

192
00:07:09,550 --> 00:07:10,870
have to go down anything you can do it

193
00:07:10,870 --> 00:07:12,490
but the neat thing about this is when

194
00:07:12,490 --> 00:07:13,810
you're using modules and you're

195
00:07:13,810 --> 00:07:16,240
referring to their bodies loading from

196
00:07:16,240 --> 00:07:18,970
URLs the JavaScript engine can see that

197
00:07:18,970 --> 00:07:21,070
the parser can see that even a pre

198
00:07:21,070 --> 00:07:22,330
parser you can see it pretty easily you

199
00:07:22,330 --> 00:07:24,940
can preload them you can prefetch them

200
00:07:24,940 --> 00:07:26,680
there's no more speculative jazz that

201
00:07:26,680 --> 00:07:28,690
we're doing now in browsers it doesn't

202
00:07:28,690 --> 00:07:30,550
always work out you can actually make

203
00:07:30,550 --> 00:07:32,230
sure that all those dependencies are pre

204
00:07:32,230 --> 00:07:33,880
fetched ahead of time and you never

205
00:07:33,880 --> 00:07:35,650
interrupt your schedule you have never

206
00:07:35,650 --> 00:07:37,590
have to write a callback function that

207
00:07:37,590 --> 00:07:40,300
captures the continuation of your whole

208
00:07:40,300 --> 00:07:41,740
program in order to do something with

209
00:07:41,740 --> 00:07:44,100
the the module you loaded it's all there

210
00:07:44,100 --> 00:07:46,210
iterators and generators I mean we had

211
00:07:46,210 --> 00:07:48,010
these in spider monkey we're tweaking

212
00:07:48,010 --> 00:07:49,600
the design a little bit like there's a

213
00:07:49,600 --> 00:07:51,820
star after the function keyword to

214
00:07:51,820 --> 00:07:53,710
remind you it is a generator function

215
00:07:53,710 --> 00:07:55,480
and it doesn't therefore need to have a

216
00:07:55,480 --> 00:07:57,040
yielded at all you can make an empty

217
00:07:57,040 --> 00:07:59,080
generator just it's a good basis case

218
00:07:59,080 --> 00:08:02,680
for certain special forms but this is

219
00:08:02,680 --> 00:08:04,450
pretty close to Python it's like Python

220
00:08:04,450 --> 00:08:07,810
with a few fixes simplifications and we

221
00:08:07,810 --> 00:08:09,040
even talked to the Python guts about it

222
00:08:09,040 --> 00:08:11,410
and they proved and then comprehensions

223
00:08:11,410 --> 00:08:13,930
you know these are just awesome though

224
00:08:13,930 --> 00:08:16,120
from Python notice there's a prin free

225
00:08:16,120 --> 00:08:18,160
for head in there and there's going to

226
00:08:18,160 --> 00:08:20,950
be ways to mix let bindings and have an

227
00:08:20,950 --> 00:08:22,960
if condition at the end pretty much like

228
00:08:22,960 --> 00:08:26,590
Python or ml or Haskell but not not

229
00:08:26,590 --> 00:08:30,680
Haskell pure and all that stuff

230
00:08:30,680 --> 00:08:32,820
binary data this is an embrace and

231
00:08:32,820 --> 00:08:34,320
extend on type2 raise typed arrays are

232
00:08:34,320 --> 00:08:37,620
already in every browser except IE and I

233
00:08:37,620 --> 00:08:39,570
kind of had this feeling whenever I talk

234
00:08:39,570 --> 00:08:40,860
to the Microsoft guy that they might

235
00:08:40,860 --> 00:08:43,200
show up in IE so everybody who believes

236
00:08:43,200 --> 00:08:45,060
in fairies clap your hands 3 times

237
00:08:45,060 --> 00:08:47,430
because I think they're coming and

238
00:08:47,430 --> 00:08:50,490
binary data is es6 extension of typed

239
00:08:50,490 --> 00:08:51,690
arrays where instead of making these

240
00:08:51,690 --> 00:08:53,670
flat arrays that are like Fortran

241
00:08:53,670 --> 00:08:55,529
favorite program and Fortran where you

242
00:08:55,529 --> 00:08:57,690
actually have to lay down a bunch of it

243
00:08:57,690 --> 00:09:00,060
you and 32s in a row or doubles and

244
00:09:00,060 --> 00:09:01,500
sometimes you have to overlay them to

245
00:09:01,500 --> 00:09:03,060
pretend you have a structure that has to

246
00:09:03,060 --> 00:09:05,250
you and 32s in a double that's just nuts

247
00:09:05,250 --> 00:09:07,250
instead you can make these pretty

248
00:09:07,250 --> 00:09:10,320
composite data structures by describing

249
00:09:10,320 --> 00:09:13,529
the native machine types that are their

250
00:09:13,529 --> 00:09:15,630
members you can build a raise of structs

251
00:09:15,630 --> 00:09:17,790
trucks of arrays do it generative lee so

252
00:09:17,790 --> 00:09:18,990
that's what's happening here once you've

253
00:09:18,990 --> 00:09:20,640
nude up some constructors you can call

254
00:09:20,640 --> 00:09:23,970
them so new triangle can take an object

255
00:09:23,970 --> 00:09:25,770
literal or very literal in this case

256
00:09:25,770 --> 00:09:28,020
containing object literals that provides

257
00:09:28,020 --> 00:09:30,420
all the data now you might think well

258
00:09:30,420 --> 00:09:31,920
that's making twice the data this can be

259
00:09:31,920 --> 00:09:34,080
optimized you can also have constant

260
00:09:34,080 --> 00:09:35,880
arrays that are used for the default

261
00:09:35,880 --> 00:09:37,589
values you can just make new triangle

262
00:09:37,589 --> 00:09:39,420
with no arguments and you get a bunch of

263
00:09:39,420 --> 00:09:41,100
zeros and you can then start setting

264
00:09:41,100 --> 00:09:43,020
things that the key point here is that

265
00:09:43,020 --> 00:09:45,600
you're able to describe memory in a

266
00:09:45,600 --> 00:09:48,810
machine integer and floating-point Pat

267
00:09:48,810 --> 00:09:51,720
format and you can therefore talk to

268
00:09:51,720 --> 00:09:54,450
file formats over the file API the blob

269
00:09:54,450 --> 00:09:55,800
API is that are coming in the web api

270
00:09:55,800 --> 00:09:58,709
group you can also talk to WebGL you can

271
00:09:58,709 --> 00:10:02,220
talk to your GP you gotta have it causee

272
00:10:02,220 --> 00:10:04,290
literals this was something that came at

273
00:10:04,290 --> 00:10:06,330
the last minute for es6 and i'm glad it

274
00:10:06,330 --> 00:10:08,370
did it was mike samuel with martin

275
00:10:08,370 --> 00:10:10,830
miller helping at Google we wanted to

276
00:10:10,830 --> 00:10:12,300
have multi-line strings people were

277
00:10:12,300 --> 00:10:13,860
saying why don't we have triple quoted

278
00:10:13,860 --> 00:10:16,080
strings like in college scriptor other

279
00:10:16,080 --> 00:10:18,540
languages we also wanted multi-line

280
00:10:18,540 --> 00:10:20,970
regular expressions which would be free

281
00:10:20,970 --> 00:10:23,010
to embed almost any character because

282
00:10:23,010 --> 00:10:24,150
regular expressions have different

283
00:10:24,150 --> 00:10:26,880
backslash escaping rules and we wanted

284
00:10:26,880 --> 00:10:29,520
to be safe in our string formatting we

285
00:10:29,520 --> 00:10:31,170
wanted to allow you to say I want to

286
00:10:31,170 --> 00:10:33,470
have a message where I use a variable

287
00:10:33,470 --> 00:10:35,070
expanded instant

288
00:10:35,070 --> 00:10:36,750
and the other one is the verb for Ino

289
00:10:36,750 --> 00:10:38,490
localized message but I don't want

290
00:10:38,490 --> 00:10:40,170
somebody to inject some nasty code into

291
00:10:40,170 --> 00:10:41,490
that variable that didn't gets evaluated

292
00:10:41,490 --> 00:10:44,940
and it taps me so classy literal solve

293
00:10:44,940 --> 00:10:48,150
all these cases we use the scarce accent

294
00:10:48,150 --> 00:10:50,640
gras of that character and it like this

295
00:10:50,640 --> 00:10:53,820
there's a free variable in front of

296
00:10:53,820 --> 00:10:55,530
premarital reference it refers to a

297
00:10:55,530 --> 00:10:57,300
function you define the function has to

298
00:10:57,300 --> 00:10:59,670
be in scope and it's optional if you

299
00:10:59,670 --> 00:11:01,080
don't add it i'll show you what happens

300
00:11:01,080 --> 00:11:03,240
but if you do provide that quazy that's

301
00:11:03,240 --> 00:11:04,580
just a made-up name it could be anything

302
00:11:04,580 --> 00:11:09,500
the function gets the literal portions

303
00:11:09,500 --> 00:11:12,120
quoted and kind of frozen and protected

304
00:11:12,120 --> 00:11:14,730
it gets them both in the raw with their

305
00:11:14,730 --> 00:11:17,550
backslash escapes unprocessed so you can

306
00:11:17,550 --> 00:11:18,870
do your own interpretation of most

307
00:11:18,870 --> 00:11:21,120
backslashes and cooked where the

308
00:11:21,120 --> 00:11:22,620
standard string backslash escaping

309
00:11:22,620 --> 00:11:25,890
happens forms and that that object

310
00:11:25,890 --> 00:11:27,600
literally think passed in the D sugaring

311
00:11:27,600 --> 00:11:30,810
the bottom a triple line there is a

312
00:11:30,810 --> 00:11:33,870
constant it's peculiar to the occurrence

313
00:11:33,870 --> 00:11:36,180
of the literal in the program the final

314
00:11:36,180 --> 00:11:38,280
arguments are the substitutions that are

315
00:11:38,280 --> 00:11:39,690
actually in green those are whatever

316
00:11:39,690 --> 00:11:41,820
variables you want we're still

317
00:11:41,820 --> 00:11:43,380
fine-tuning how the grammar works so you

318
00:11:43,380 --> 00:11:46,230
can't be attacked probably it's safe to

319
00:11:46,230 --> 00:11:48,630
have expression forms it's like dotted

320
00:11:48,630 --> 00:11:51,600
member expressions identify errs this is

321
00:11:51,600 --> 00:11:53,670
being specified and you can have new

322
00:11:53,670 --> 00:11:55,560
lines embedded in these back kick quoted

323
00:11:55,560 --> 00:11:56,790
strings so there's your multi-line

324
00:11:56,790 --> 00:11:58,290
string constant if you don't put any

325
00:11:58,290 --> 00:11:59,850
Kwazii or other identifiers in front

326
00:11:59,850 --> 00:12:01,290
you're not calling a quazy function

327
00:12:01,290 --> 00:12:03,060
you're getting a default behavior which

328
00:12:03,060 --> 00:12:05,610
simply does the substitution and does

329
00:12:05,610 --> 00:12:07,830
the default string backslash processing

330
00:12:07,830 --> 00:12:10,500
and that yes that was a new line so here

331
00:12:10,500 --> 00:12:11,970
you have multi-line strings no triple

332
00:12:11,970 --> 00:12:14,520
quoting just backwards and think about

333
00:12:14,520 --> 00:12:15,840
multi only reg ex all you need is a

334
00:12:15,840 --> 00:12:17,850
special Kwazii handler you probably from

335
00:12:17,850 --> 00:12:21,120
a standard built-in module I call it re

336
00:12:21,120 --> 00:12:22,710
here we're gonna have to do that it's

337
00:12:22,710 --> 00:12:24,270
part of me a 6 that's easy to do that's

338
00:12:24,270 --> 00:12:26,190
not a difficult design problem it's not

339
00:12:26,190 --> 00:12:29,220
going to need you controversial classes

340
00:12:29,220 --> 00:12:30,630
I've been talking about classes since

341
00:12:30,630 --> 00:12:32,340
they supposedly made it and the meeting

342
00:12:32,340 --> 00:12:36,600
last week we had of tc39 people was

343
00:12:36,600 --> 00:12:38,220
pretty contentious because there are

344
00:12:38,220 --> 00:12:39,810
still too many open issues in my opinion

345
00:12:39,810 --> 00:12:42,960
but there is a pattern people use when

346
00:12:42,960 --> 00:12:45,340
they write the constructor prototype

347
00:12:45,340 --> 00:12:46,990
pattern they write a function that they

348
00:12:46,990 --> 00:12:48,940
need to be called by new in that

349
00:12:48,940 --> 00:12:50,410
function they assigned that this thought

350
00:12:50,410 --> 00:12:52,420
X and this dot why they're making a

351
00:12:52,420 --> 00:12:54,910
point say and that function they it's

352
00:12:54,910 --> 00:12:56,320
called Cap'n Pete point has a dot

353
00:12:56,320 --> 00:12:58,420
prototype object that contains all the

354
00:12:58,420 --> 00:13:00,550
shared methods the prototype delegated

355
00:13:00,550 --> 00:13:04,360
methods that expansion that people do my

356
00:13:04,360 --> 00:13:05,890
hand these days is a little awkward

357
00:13:05,890 --> 00:13:07,840
especially when you have sub classing

358
00:13:07,840 --> 00:13:09,730
you have sort of a convention like

359
00:13:09,730 --> 00:13:11,920
CoffeeScript compiles where you have a

360
00:13:11,920 --> 00:13:13,750
superclass and you can have super calls

361
00:13:13,750 --> 00:13:15,970
and you want to get this right and it's

362
00:13:15,970 --> 00:13:17,320
too much code right by hand it's a

363
00:13:17,320 --> 00:13:19,270
little error-prone so why don't I have

364
00:13:19,270 --> 00:13:20,920
class and that's we're trying to boil it

365
00:13:20,920 --> 00:13:22,090
down to the simplest thing we can agree

366
00:13:22,090 --> 00:13:24,310
on that isn't so simple and stupid that

367
00:13:24,310 --> 00:13:26,530
it's not worth doing it's difficult one

368
00:13:26,530 --> 00:13:27,610
of the things we factored that was

369
00:13:27,610 --> 00:13:29,800
private variables some people in the

370
00:13:29,800 --> 00:13:31,120
committee feels strongly classes should

371
00:13:31,120 --> 00:13:33,460
have things like constant instance

372
00:13:33,460 --> 00:13:35,530
variables and private member's and it's

373
00:13:35,530 --> 00:13:37,270
very hard to do this but this slide

374
00:13:37,270 --> 00:13:38,980
shows on the very first line a separate

375
00:13:38,980 --> 00:13:40,540
proposal is accepted for private named

376
00:13:40,540 --> 00:13:42,460
objects these are a new thing in

377
00:13:42,460 --> 00:13:43,630
JavaScript you know how JavaScript you

378
00:13:43,630 --> 00:13:45,940
have objects where the properties are

379
00:13:45,940 --> 00:13:48,190
all named by strings or equivalents of

380
00:13:48,190 --> 00:13:50,740
strings like indexes same thing as if

381
00:13:50,740 --> 00:13:53,170
you quoted the number 0 or 1 you can use

382
00:13:53,170 --> 00:13:55,450
0 1 but it's all string equated property

383
00:13:55,450 --> 00:13:57,750
identifiers private names and you have 6

384
00:13:57,750 --> 00:14:01,750
another option to the property key type

385
00:14:01,750 --> 00:14:04,090
it can be a private name object this is

386
00:14:04,090 --> 00:14:06,310
an object with a unique identity the

387
00:14:06,310 --> 00:14:09,490
identity is the the keys value when you

388
00:14:09,490 --> 00:14:11,440
make a private name object and you don't

389
00:14:11,440 --> 00:14:12,640
give it out to anybody it really is

390
00:14:12,640 --> 00:14:13,960
private nobody can find that on your

391
00:14:13,960 --> 00:14:15,580
object they can't find it through for in

392
00:14:15,580 --> 00:14:17,950
they can't find it through es 5s object

393
00:14:17,950 --> 00:14:19,600
get owned property names they can't find

394
00:14:19,600 --> 00:14:21,100
it anyway unless you give them the

395
00:14:21,100 --> 00:14:22,390
private name and then I guess maybe it's

396
00:14:22,390 --> 00:14:24,400
a shared secret or even public but it's

397
00:14:24,400 --> 00:14:28,210
unique and so here to show point with x

398
00:14:28,210 --> 00:14:31,840
and y being private members i showed PX

399
00:14:31,840 --> 00:14:34,050
and py being constants bound to fresh

400
00:14:34,050 --> 00:14:36,970
private named objects and then to see

401
00:14:36,970 --> 00:14:38,320
other you look down a little but you see

402
00:14:38,320 --> 00:14:39,910
there being used with bracketing that's

403
00:14:39,910 --> 00:14:41,350
how you use a computed property name in

404
00:14:41,350 --> 00:14:42,970
javascript already right it's how you

405
00:14:42,970 --> 00:14:44,320
use array indexes or if you have a

406
00:14:44,320 --> 00:14:46,570
string you compute turns out to be X or

407
00:14:46,570 --> 00:14:48,400
Y that's a public name in this case it

408
00:14:48,400 --> 00:14:50,640
turns out to be the private names and

409
00:14:50,640 --> 00:14:53,980
the rest of its kind of verbose you have

410
00:14:53,980 --> 00:14:55,750
this the PX and py

411
00:14:55,750 --> 00:14:57,280
all over the place and past slides I've

412
00:14:57,280 --> 00:14:59,560
shown some sugar for this that kind of

413
00:14:59,560 --> 00:15:02,080
inspired by maybe Ruby or coffee syrup

414
00:15:02,080 --> 00:15:05,110
used at sign as kind of an infix or even

415
00:15:05,110 --> 00:15:08,410
a prefix operator for this case we

416
00:15:08,410 --> 00:15:10,420
didn't agree on that and so this this is

417
00:15:10,420 --> 00:15:12,370
almost too little to do because it's

418
00:15:12,370 --> 00:15:13,900
kind of heavy weight but maybe you don't

419
00:15:13,900 --> 00:15:15,580
need private names at all a lot of

420
00:15:15,580 --> 00:15:17,140
people in the committee not everyone

421
00:15:17,140 --> 00:15:19,060
thinks let's just circle what people do

422
00:15:19,060 --> 00:15:21,130
today they use public names if they want

423
00:15:21,130 --> 00:15:22,960
real privacy to use closures I used to

424
00:15:22,960 --> 00:15:24,550
close your pattern which has its costs

425
00:15:24,550 --> 00:15:26,290
but you can use it so why are we killing

426
00:15:26,290 --> 00:15:28,270
ourselves over private names so we tried

427
00:15:28,270 --> 00:15:30,310
to factor it out but there are still

428
00:15:30,310 --> 00:15:32,860
open issues like constant instance

429
00:15:32,860 --> 00:15:33,940
variable some people feel strongly is

430
00:15:33,940 --> 00:15:36,490
you have constant variables in your

431
00:15:36,490 --> 00:15:38,890
class instances and they should only

432
00:15:38,890 --> 00:15:40,540
ever be seen with their initial value

433
00:15:40,540 --> 00:15:42,280
should never see them with the undefined

434
00:15:42,280 --> 00:15:43,840
value it should be an error to access

435
00:15:43,840 --> 00:15:44,920
them before they've been initialized

436
00:15:44,920 --> 00:15:47,080
this is hard to get right I'll get in

437
00:15:47,080 --> 00:15:49,900
this little more so my colleague

438
00:15:49,900 --> 00:15:52,330
allomere sprocket and so uh the editor

439
00:15:52,330 --> 00:15:54,610
of the s5 and s6 some of you may

440
00:15:54,610 --> 00:15:57,460
remember he was at Microsoft has come up

441
00:15:57,460 --> 00:16:00,070
with these simpler proposals for doing

442
00:16:00,070 --> 00:16:01,810
pieces of what classes do also doing

443
00:16:01,810 --> 00:16:04,000
part of what non-standard extensions

444
00:16:04,000 --> 00:16:05,500
like the double under of our proto

445
00:16:05,500 --> 00:16:07,330
property pseudo property I added years

446
00:16:07,330 --> 00:16:09,780
ago do and triangle is one of them and

447
00:16:09,780 --> 00:16:12,430
there's some some issues with triangles

448
00:16:12,430 --> 00:16:14,980
but mostly syntactic I think

449
00:16:14,980 --> 00:16:16,720
semantically there they're good they're

450
00:16:16,720 --> 00:16:19,660
like creating a fresh object with double

451
00:16:19,660 --> 00:16:22,660
under or proto initialized and this is

452
00:16:22,660 --> 00:16:25,510
unobjectionable to implementers this is

453
00:16:25,510 --> 00:16:27,190
not going to mutate the prototype of

454
00:16:27,190 --> 00:16:28,900
your live object that people are already

455
00:16:28,900 --> 00:16:31,120
using as if it were you know an apple so

456
00:16:31,120 --> 00:16:32,410
that it delegates to orange dot

457
00:16:32,410 --> 00:16:34,690
prototype this is just creating at birth

458
00:16:34,690 --> 00:16:38,230
a certain prototype chain es5 has object

459
00:16:38,230 --> 00:16:39,700
i'll create where you can do this but

460
00:16:39,700 --> 00:16:41,589
it's long winded compared to this you

461
00:16:41,589 --> 00:16:43,180
have to give it the prototype is the

462
00:16:43,180 --> 00:16:44,110
first argument then you call

463
00:16:44,110 --> 00:16:45,970
object.create with a second argument

464
00:16:45,970 --> 00:16:49,000
that's a big property descriptor map not

465
00:16:49,000 --> 00:16:51,280
an object literal here you can just take

466
00:16:51,280 --> 00:16:53,470
the triangle operator slap it between

467
00:16:53,470 --> 00:16:55,030
your base object and

468
00:16:55,030 --> 00:16:57,820
an object literal and that means that

469
00:16:57,820 --> 00:17:00,040
object literal on the right can actually

470
00:17:00,040 --> 00:17:02,260
be reused it can have its proto set it

471
00:17:02,260 --> 00:17:04,450
is not ever going to escape with its

472
00:17:04,450 --> 00:17:06,070
original proto to the object of

473
00:17:06,070 --> 00:17:07,630
prototype and the cool thing is this

474
00:17:07,630 --> 00:17:09,490
actually works for other literal object

475
00:17:09,490 --> 00:17:11,200
forms you can have arrays that delegate

476
00:17:11,200 --> 00:17:12,670
to an intervening prototype objects you

477
00:17:12,670 --> 00:17:14,920
can make sort of sub arrays or subtypes

478
00:17:14,920 --> 00:17:17,530
of array if you will I do it for

479
00:17:17,530 --> 00:17:18,910
functions it should work for regular

480
00:17:18,910 --> 00:17:23,080
expressions as well the literal strings

481
00:17:23,080 --> 00:17:25,000
numbers and boolean czar primitives in

482
00:17:25,000 --> 00:17:26,110
JavaScript and we're still debating

483
00:17:26,110 --> 00:17:27,970
whether does she work for the object

484
00:17:27,970 --> 00:17:29,440
wrappers that you get automatically

485
00:17:29,440 --> 00:17:31,300
around those but that's not really an

486
00:17:31,300 --> 00:17:33,760
important use case the main thing about

487
00:17:33,760 --> 00:17:35,350
this is the triangle syntax doesn't look

488
00:17:35,350 --> 00:17:37,990
quite right it career almost gets it

489
00:17:37,990 --> 00:17:39,850
right here but the bar looks a little

490
00:17:39,850 --> 00:17:42,790
too tall if you connect the lines it

491
00:17:42,790 --> 00:17:47,200
doesn't quite line up and so keep going

492
00:17:47,200 --> 00:17:48,640
bear with me we're not looking at

493
00:17:48,640 --> 00:17:49,840
something else which is inspired by

494
00:17:49,840 --> 00:17:52,450
prototype JSE's object out extend this

495
00:17:52,450 --> 00:17:54,520
is a method that's been in prototype in

496
00:17:54,520 --> 00:17:56,050
other libraries for a long time it

497
00:17:56,050 --> 00:17:58,420
usually uses the foreign loop have some

498
00:17:58,420 --> 00:18:00,100
issues there but we wanted to work by

499
00:18:00,100 --> 00:18:01,810
taking all the own properties from knob

500
00:18:01,810 --> 00:18:04,120
ject on the right and copying them into

501
00:18:04,120 --> 00:18:06,730
the object on the left it's a little

502
00:18:06,730 --> 00:18:08,140
funky that there's no assignment

503
00:18:08,140 --> 00:18:09,760
operator you have to know that this is a

504
00:18:09,760 --> 00:18:13,120
must monocle mustaches winking mustache

505
00:18:13,120 --> 00:18:15,550
guys on his side is going to mutate the

506
00:18:15,550 --> 00:18:19,620
base but you know roll with it for now

507
00:18:19,620 --> 00:18:23,200
and it gets all the own properties so

508
00:18:23,200 --> 00:18:24,370
suppose you have those private named

509
00:18:24,370 --> 00:18:26,800
object identified properties they'll get

510
00:18:26,800 --> 00:18:28,300
copied to and you can't do that before

511
00:18:28,300 --> 00:18:30,340
in loop so this is important to make a

512
00:18:30,340 --> 00:18:31,900
built-in you want new built-ins that

513
00:18:31,900 --> 00:18:33,160
fill gaps in the language that you

514
00:18:33,160 --> 00:18:34,660
cannot fill yourselves you cannot

515
00:18:34,660 --> 00:18:36,760
reflect on private named objects but you

516
00:18:36,760 --> 00:18:39,370
I think want as a compositional operator

517
00:18:39,370 --> 00:18:41,080
this monocle mustache to get the private

518
00:18:41,080 --> 00:18:43,810
names wouldn't it be better if it just

519
00:18:43,810 --> 00:18:45,250
made a fresh object I mean we can worry

520
00:18:45,250 --> 00:18:47,860
about optimizing but it looks like an

521
00:18:47,860 --> 00:18:50,590
expression form of some sort doesn't

522
00:18:50,590 --> 00:18:52,210
necessarily mutate base doesn't screen

523
00:18:52,210 --> 00:18:54,160
out I'm going to copy things in the Maya

524
00:18:54,160 --> 00:18:57,090
left what thing left my monocle but

525
00:18:57,090 --> 00:18:58,980
if we do that then you have to capture

526
00:18:58,980 --> 00:19:01,740
the result in a new object or if you

527
00:19:01,740 --> 00:19:02,970
really want it to be clear that it's a

528
00:19:02,970 --> 00:19:04,440
mutating operator why not use the

529
00:19:04,440 --> 00:19:07,230
assignment operator idiom from see that

530
00:19:07,230 --> 00:19:08,730
JavaScript inherited lots of languages

531
00:19:08,730 --> 00:19:10,680
have in this case it would be dot equals

532
00:19:10,680 --> 00:19:12,300
instead of plus equals we can't use plus

533
00:19:12,300 --> 00:19:13,710
equals that's kind of taken it does

534
00:19:13,710 --> 00:19:14,880
string conversion and string

535
00:19:14,880 --> 00:19:17,700
concatenation that ship sailed long time

536
00:19:17,700 --> 00:19:20,310
home unfortunately so we're still

537
00:19:20,310 --> 00:19:21,810
arguing about what the right form is and

538
00:19:21,810 --> 00:19:23,640
your input is welcome on he has discuss

539
00:19:23,640 --> 00:19:27,330
your informed comments are welcome now

540
00:19:27,330 --> 00:19:29,880
what alan has done with these has he's

541
00:19:29,880 --> 00:19:32,220
made the class pattern without class

542
00:19:32,220 --> 00:19:35,250
syntax so here it is all at once there's

543
00:19:35,250 --> 00:19:37,110
the private names again just to keep it

544
00:19:37,110 --> 00:19:40,200
parallel instead of class point we have

545
00:19:40,200 --> 00:19:42,750
a wet point and on the right instead of

546
00:19:42,750 --> 00:19:46,230
point extends base we have base triangle

547
00:19:46,230 --> 00:19:47,850
function and the function is the

548
00:19:47,850 --> 00:19:49,830
constructor and it looks just like the

549
00:19:49,830 --> 00:19:52,230
constructor from the earlier slide but

550
00:19:52,230 --> 00:19:54,030
you also want to take the methods that

551
00:19:54,030 --> 00:19:56,010
were in the class in the earlier slide

552
00:19:56,010 --> 00:19:57,780
and put them on the prototype so we use

553
00:19:57,780 --> 00:20:00,150
monocle mustache to do that it's kind of

554
00:20:00,150 --> 00:20:03,180
pretty not totally pretty though but not

555
00:20:03,180 --> 00:20:05,190
totally awful and then you want to end

556
00:20:05,190 --> 00:20:06,570
in the constructor because that's what

557
00:20:06,570 --> 00:20:07,830
you want to assign the point you don't

558
00:20:07,830 --> 00:20:09,060
want point to refer to point that

559
00:20:09,060 --> 00:20:10,770
prototype asked for a point the

560
00:20:10,770 --> 00:20:12,990
constructor function so you then use doc

561
00:20:12,990 --> 00:20:15,060
constructor monocle mustache any static

562
00:20:15,060 --> 00:20:16,170
properties you might have here's an

563
00:20:16,170 --> 00:20:17,640
all-points data property you could have

564
00:20:17,640 --> 00:20:19,200
static methods people like to put class

565
00:20:19,200 --> 00:20:21,090
methods the built-in objects have them

566
00:20:21,090 --> 00:20:24,180
you know like date dot parse is one

567
00:20:24,180 --> 00:20:27,270
example this almost work sudden people

568
00:20:27,270 --> 00:20:28,860
start to like this because they think I

569
00:20:28,860 --> 00:20:30,120
could actually live with this instead of

570
00:20:30,120 --> 00:20:31,500
class syntax and I wouldn't have to

571
00:20:31,500 --> 00:20:34,140
hassle with standardizing classes and

572
00:20:34,140 --> 00:20:36,510
but it's a little fragile if you get dot

573
00:20:36,510 --> 00:20:38,250
prototype section in the doc constructor

574
00:20:38,250 --> 00:20:40,230
section in the wrong order then you end

575
00:20:40,230 --> 00:20:41,940
up a sign the prototype to point and you

576
00:20:41,940 --> 00:20:45,330
can't do it and it's just boilerplate

577
00:20:45,330 --> 00:20:46,860
you have to write the monocle mustache

578
00:20:46,860 --> 00:20:48,960
you get dots in the middle of your your

579
00:20:48,960 --> 00:20:51,180
your class layout it doesn't look as

580
00:20:51,180 --> 00:20:53,760
sweet as the ideal class index we

581
00:20:53,760 --> 00:20:54,290
haven't fight

582
00:20:54,290 --> 00:20:58,490
looks so you know syntax I I swear one

583
00:20:58,490 --> 00:21:00,440
go launched I was excited about certain

584
00:21:00,440 --> 00:21:01,640
things and then I realized was a lot

585
00:21:01,640 --> 00:21:03,080
like previous Rob Pike languages but

586
00:21:03,080 --> 00:21:04,280
worst of all they kept blogging about

587
00:21:04,280 --> 00:21:06,050
syntax and I thought why are they

588
00:21:06,050 --> 00:21:07,940
talking about CX who cares about syntax

589
00:21:07,940 --> 00:21:10,610
that's like the last detail you want to

590
00:21:10,610 --> 00:21:11,570
worry about when you're designing new

591
00:21:11,570 --> 00:21:14,180
language but Java is an old language and

592
00:21:14,180 --> 00:21:16,340
it needs to be more usable so sin tax

593
00:21:16,340 --> 00:21:18,950
rises to the fore and we on the

594
00:21:18,950 --> 00:21:21,020
committee can't just be egghead samana

595
00:21:21,020 --> 00:21:22,640
sis we have to think about syntax and

596
00:21:22,640 --> 00:21:24,740
usability not particularly great at that

597
00:21:24,740 --> 00:21:27,500
I'll talk more about that yeah so

598
00:21:27,500 --> 00:21:31,130
triangle monocle long nose moustache if

599
00:21:31,130 --> 00:21:32,030
it's the thought equal thing

600
00:21:32,030 --> 00:21:35,450
coffeescript has has class that just the

601
00:21:35,450 --> 00:21:37,430
sugars two prototypes constructor

602
00:21:37,430 --> 00:21:39,410
functions why can't we it's harder than

603
00:21:39,410 --> 00:21:41,720
you think the standardized funny

604
00:21:41,720 --> 00:21:43,940
operators and maybe not maybe they're

605
00:21:43,940 --> 00:21:45,080
good maybe we need to find the right

606
00:21:45,080 --> 00:21:46,670
operators where we still might want

607
00:21:46,670 --> 00:21:49,640
classes and by shedding is the constant

608
00:21:49,640 --> 00:21:52,370
threat whereas instead of deciding what

609
00:21:52,370 --> 00:21:54,400
you know paint color to use for the

610
00:21:54,400 --> 00:21:56,630
unimportant bike shed we really do have

611
00:21:56,630 --> 00:21:58,940
you know the atomic power plant in front

612
00:21:58,940 --> 00:22:01,010
that has important usability features we

613
00:22:01,010 --> 00:22:02,180
want to get right so it doesn't melt

614
00:22:02,180 --> 00:22:05,180
down so we ought to be considering

615
00:22:05,180 --> 00:22:06,740
syntax carefully and interacting with

616
00:22:06,740 --> 00:22:08,120
the community on usability which means

617
00:22:08,120 --> 00:22:10,340
to me we probably have to prototype this

618
00:22:10,340 --> 00:22:13,340
stuff maybe have a beauty contest you

619
00:22:13,340 --> 00:22:14,630
guys would have to get your hands on it

620
00:22:14,630 --> 00:22:16,250
to use it I think to really judge you

621
00:22:16,250 --> 00:22:18,020
could look at it everybody has an

622
00:22:18,020 --> 00:22:19,820
opinion right but you really want to use

623
00:22:19,820 --> 00:22:22,070
it to the side let me talk about Moore's

624
00:22:22,070 --> 00:22:23,780
index because again people get tired of

625
00:22:23,780 --> 00:22:24,920
function i really regret this

626
00:22:24,920 --> 00:22:27,140
eight-letter keyword I made JavaScript

627
00:22:27,140 --> 00:22:29,270
based on sort of C syntax but I needed

628
00:22:29,270 --> 00:22:30,950
first class functions and I didn't use

629
00:22:30,950 --> 00:22:33,440
fun or FN I thought about fun and I

630
00:22:33,440 --> 00:22:35,570
thought it it kind of wind up with bars

631
00:22:35,570 --> 00:22:37,670
a three-letter keyword but it didn't

632
00:22:37,670 --> 00:22:42,590
match the Java gravitas of class extends

633
00:22:42,590 --> 00:22:44,960
an interface and it was it was too short

634
00:22:44,960 --> 00:22:47,420
so i used function also inspired by awk

635
00:22:47,420 --> 00:22:49,910
function is too long people getting

636
00:22:49,910 --> 00:22:52,190
tired of it if you only do a little

637
00:22:52,190 --> 00:22:54,260
javascript in or you write big functions

638
00:22:54,260 --> 00:22:55,730
with big bodies maybe it's not a problem

639
00:22:55,730 --> 00:22:56,990
if you write lots of functional

640
00:22:56,990 --> 00:22:58,490
javascript you started seeing function

641
00:22:58,490 --> 00:22:59,560
function function function function

642
00:22:59,560 --> 00:23:01,940
participating ass now over the years

643
00:23:01,940 --> 00:23:03,650
people have asked for funny characters

644
00:23:03,650 --> 00:23:06,110
again lambda and florin are actually

645
00:23:06,110 --> 00:23:06,980
unicode identified

646
00:23:06,980 --> 00:23:08,210
characters i believe and cannot be used

647
00:23:08,210 --> 00:23:09,679
without breaking compatibility with

648
00:23:09,679 --> 00:23:12,980
somebody in Greece or I don't know

649
00:23:12,980 --> 00:23:15,620
Belgium who uses flooring it could

650
00:23:15,620 --> 00:23:16,760
happen though and so I don't know if we

651
00:23:16,760 --> 00:23:18,350
want to do that and it doesn't work well

652
00:23:18,350 --> 00:23:20,360
for other reasons that I won't get into

653
00:23:20,360 --> 00:23:22,100
but there was also an idea that we

654
00:23:22,100 --> 00:23:23,780
should just use hash and his hash is

655
00:23:23,780 --> 00:23:25,760
short for function wouldn't that really

656
00:23:25,760 --> 00:23:27,110
improve things I don't I don't think so

657
00:23:27,110 --> 00:23:29,750
because part of the problem is what

658
00:23:29,750 --> 00:23:31,010
we're running out of characters we want

659
00:23:31,010 --> 00:23:33,320
hash maybe for something more universal

660
00:23:33,320 --> 00:23:36,290
later also function as long as a keyword

661
00:23:36,290 --> 00:23:38,540
but return is six more honking letters

662
00:23:38,540 --> 00:23:39,559
and you have to have a space after

663
00:23:39,559 --> 00:23:41,900
friends around its operand so pretty

664
00:23:41,900 --> 00:23:43,610
soon you're talking about four functions

665
00:23:43,610 --> 00:23:45,710
actually return values 14 or more or

666
00:23:45,710 --> 00:23:47,570
maybe 15 characters when you could have

667
00:23:47,570 --> 00:23:49,549
one so there's more to do than just

668
00:23:49,549 --> 00:23:52,820
shortened function and so one idea what

669
00:23:52,820 --> 00:23:54,200
I'm actually developed is straight from

670
00:23:54,200 --> 00:23:56,030
CoffeeScript because it's a cowpath we

671
00:23:56,030 --> 00:23:57,530
could pave though it's grammatically

672
00:23:57,530 --> 00:23:59,929
quite different and it's not validated

673
00:23:59,929 --> 00:24:02,750
in the same way that javascript is it's

674
00:24:02,750 --> 00:24:04,910
a github project the code is the spec

675
00:24:04,910 --> 00:24:07,760
and Jeremy keeps tuning the sort of

676
00:24:07,760 --> 00:24:09,679
magic elixir and the rewriter phase and

677
00:24:09,679 --> 00:24:11,900
so on which is cool but it's not

678
00:24:11,900 --> 00:24:13,250
something we could standardize but I

679
00:24:13,250 --> 00:24:15,080
worked on this enough that I got it so

680
00:24:15,080 --> 00:24:16,400
that you didn't have to use extra

681
00:24:16,400 --> 00:24:19,850
parentheses or braces but it requires

682
00:24:19,850 --> 00:24:22,549
some novel grammatical techniques that

683
00:24:22,549 --> 00:24:24,020
some people in the committee just don't

684
00:24:24,020 --> 00:24:26,210
want to take a chance on so I'm kind of

685
00:24:26,210 --> 00:24:28,070
pessimistic about arrows a federal would

686
00:24:28,070 --> 00:24:30,169
bind this just like in CoffeeScript but

687
00:24:30,169 --> 00:24:31,640
I did a bunch of work on this it's still

688
00:24:31,640 --> 00:24:34,400
a straw man in our wiki and some people

689
00:24:34,400 --> 00:24:36,980
like it to me it's it's it's got some

690
00:24:36,980 --> 00:24:38,360
uphill battles in the Committee on the

691
00:24:38,360 --> 00:24:41,120
granic evaluation of front and it's kind

692
00:24:41,120 --> 00:24:43,340
of only function syntax and at this

693
00:24:43,340 --> 00:24:46,340
point I want more name functions too and

694
00:24:46,340 --> 00:24:50,960
so I did some more work inspired by Ruby

695
00:24:50,960 --> 00:24:53,510
and small talk to put block lambdas in

696
00:24:53,510 --> 00:24:55,520
without kind of the extra steps that

697
00:24:55,520 --> 00:24:56,960
Ruby put in where they have to you know

698
00:24:56,960 --> 00:24:58,730
be passed down to certain functions and

699
00:24:58,730 --> 00:25:00,169
then they have to be proc taught nude

700
00:25:00,169 --> 00:25:01,429
and there's just complexity there we

701
00:25:01,429 --> 00:25:03,440
don't need instead these would be a new

702
00:25:03,440 --> 00:25:05,600
kind of callable object they're built in

703
00:25:05,600 --> 00:25:07,130
Colorado so type of says they're type

704
00:25:07,130 --> 00:25:08,090
this function that tells you it's

705
00:25:08,090 --> 00:25:10,280
callable they have some of the things

706
00:25:10,280 --> 00:25:11,630
you expect from functions like a dot

707
00:25:11,630 --> 00:25:12,950
length property for the number of

708
00:25:12,950 --> 00:25:15,290
expected arguments they do not have a

709
00:25:15,290 --> 00:25:16,269
dot prototype

710
00:25:16,269 --> 00:25:18,070
not have a construct internal method you

711
00:25:18,070 --> 00:25:20,049
cannot new them and that's important

712
00:25:20,049 --> 00:25:22,269
because they actually don't change the

713
00:25:22,269 --> 00:25:24,999
meaning of this in their bodies they in

714
00:25:24,999 --> 00:25:26,409
fact don't change the meaning of a lot

715
00:25:26,409 --> 00:25:27,399
of things in their bodies they have a

716
00:25:27,399 --> 00:25:29,709
property somebody will call this tenants

717
00:25:29,709 --> 00:25:31,719
correspondence principle so that you can

718
00:25:31,719 --> 00:25:33,099
take a piece of code and wrap it in one

719
00:25:33,099 --> 00:25:34,179
of these things and call it right away

720
00:25:34,179 --> 00:25:35,830
and it's as if you didn't wrap it at all

721
00:25:35,830 --> 00:25:39,899
I think that's called an ADA conversion

722
00:25:39,899 --> 00:25:44,159
so they're cool they can be used for

723
00:25:44,159 --> 00:25:46,149
iterators that can be used like you

724
00:25:46,149 --> 00:25:47,379
would use them in Ruby they can have

725
00:25:47,379 --> 00:25:49,929
control effects like returning from the

726
00:25:49,929 --> 00:25:51,729
enclosing functions you can write your

727
00:25:51,729 --> 00:25:53,799
own outer function capital F sorry

728
00:25:53,799 --> 00:25:55,929
eight-letter word function and your

729
00:25:55,929 --> 00:25:57,519
inner blockland to the cooperates with

730
00:25:57,519 --> 00:25:58,779
it by returning a value and that's what

731
00:25:58,779 --> 00:26:01,119
these examples show some people freak

732
00:26:01,119 --> 00:26:02,409
out because what this means is if you

733
00:26:02,409 --> 00:26:03,909
let one of these block lenders escape

734
00:26:03,909 --> 00:26:06,009
and it returns from its enclosing

735
00:26:06,009 --> 00:26:07,869
function then you call it later when the

736
00:26:07,869 --> 00:26:09,190
enclosing function is no longer active

737
00:26:09,190 --> 00:26:11,739
you get a runtime error it's sort of

738
00:26:11,739 --> 00:26:13,119
like having a throw in your code I mean

739
00:26:13,119 --> 00:26:14,950
runtime errors happen especially with

740
00:26:14,950 --> 00:26:17,289
throws in cs3 I'm not freaked out by

741
00:26:17,289 --> 00:26:19,079
this but it really bothers some people

742
00:26:19,079 --> 00:26:21,099
so that's a challenge in the committee

743
00:26:21,099 --> 00:26:22,659
and probably the community some of your

744
00:26:22,659 --> 00:26:23,769
rubios though and you're probably like

745
00:26:23,769 --> 00:26:27,940
salivating and you know why are we

746
00:26:27,940 --> 00:26:30,609
fussing about this so Michael Rogers had

747
00:26:30,609 --> 00:26:32,919
this claw I still like I got 99 problems

748
00:26:32,919 --> 00:26:36,639
in JavaScript syntax ain't one that's

749
00:26:36,639 --> 00:26:38,649
Michael but you know there's there's

750
00:26:38,649 --> 00:26:40,509
still a lot of disagreement people who

751
00:26:40,509 --> 00:26:42,519
program a lot of JavaScript and a lot of

752
00:26:42,519 --> 00:26:44,139
functional JavaScript do do feel some

753
00:26:44,139 --> 00:26:47,109
pain it's not really writing so much as

754
00:26:47,109 --> 00:26:48,339
reading though I'm sympathetic to both

755
00:26:48,339 --> 00:26:51,089
read abilities the first consideration

756
00:26:51,089 --> 00:26:53,409
so you know we're not going to get

757
00:26:53,409 --> 00:26:56,320
arrows without some grammatical wonder

758
00:26:56,320 --> 00:26:57,459
work that I haven't figured out how to

759
00:26:57,459 --> 00:26:59,829
do in the committee block lambdas are

760
00:26:59,829 --> 00:27:01,619
actually closer because the grammatical

761
00:27:01,619 --> 00:27:03,849
purists don't mind them they're they're

762
00:27:03,849 --> 00:27:07,709
unproblematic that curly brace bar helps

763
00:27:07,709 --> 00:27:10,989
kind of spaces but it still house and

764
00:27:10,989 --> 00:27:12,009
then some people just want to go back

765
00:27:12,009 --> 00:27:13,539
can't we just have a shorthand that's

766
00:27:13,539 --> 00:27:14,889
just not only character i don't care

767
00:27:14,889 --> 00:27:17,019
about return or this and that's that's

768
00:27:17,019 --> 00:27:18,879
that's warm beer it's not going to fly

769
00:27:18,879 --> 00:27:19,929
in the committee it's probably not gonna

770
00:27:19,929 --> 00:27:20,320
fly with you

771
00:27:20,320 --> 00:27:24,570
guys so you know I have to ask myself

772
00:27:24,570 --> 00:27:28,570
because we did defect from the without

773
00:27:28,570 --> 00:27:30,820
me if we see to do html5 we did form the

774
00:27:30,820 --> 00:27:32,529
what WG would opera and Apple back into

775
00:27:32,529 --> 00:27:34,029
the sport maybe something's wrong here

776
00:27:34,029 --> 00:27:35,470
even if the committee is operating

777
00:27:35,470 --> 00:27:38,440
harmoniously it's good the question how

778
00:27:38,440 --> 00:27:40,179
we work as well as the product we do

779
00:27:40,179 --> 00:27:41,649
have this problem that we're committee

780
00:27:41,649 --> 00:27:43,740
we don't design if we can help it but

781
00:27:43,740 --> 00:27:45,940
apart from by shedding temptation we

782
00:27:45,940 --> 00:27:47,769
delegate champions and we try to codify

783
00:27:47,769 --> 00:27:49,120
the facto standards but we're

784
00:27:49,120 --> 00:27:50,590
consensus-driven which means it's hard

785
00:27:50,590 --> 00:27:52,570
to reach general agreement which is the

786
00:27:52,570 --> 00:27:55,600
definition consensus we also have long

787
00:27:55,600 --> 00:27:57,549
path dependencies so we end up doing

788
00:27:57,549 --> 00:27:59,590
something like adding a special form

789
00:27:59,590 --> 00:28:01,419
where we could have a macro facility

790
00:28:01,419 --> 00:28:03,580
that lets it be a library that I think

791
00:28:03,580 --> 00:28:04,870
isn't so big that particular issue

792
00:28:04,870 --> 00:28:06,399
because later on if we have macros you

793
00:28:06,399 --> 00:28:08,679
guys can go recast it without problem if

794
00:28:08,679 --> 00:28:10,149
we did our macro job right but still

795
00:28:10,149 --> 00:28:11,919
there's this when you're doing this work

796
00:28:11,919 --> 00:28:13,659
you're going down a path and there are

797
00:28:13,659 --> 00:28:15,340
roads not taken and it's hard to hop to

798
00:28:15,340 --> 00:28:18,519
a different path so things like dark

799
00:28:18,519 --> 00:28:20,169
navy wonder things like WebGL typed

800
00:28:20,169 --> 00:28:22,990
arrays in Krypton should we take the

801
00:28:22,990 --> 00:28:27,070
typed array precedent and make some

802
00:28:27,070 --> 00:28:29,470
numeric extensions for JavaScript some

803
00:28:29,470 --> 00:28:31,750
way of saying I have an integer not just

804
00:28:31,750 --> 00:28:34,480
a in 32 typed array but an actual in 32

805
00:28:34,480 --> 00:28:37,539
variable might be good it starts to

806
00:28:37,539 --> 00:28:39,970
smell like es for exit 3 you know java

807
00:28:39,970 --> 00:28:43,059
with optional types been there and done

808
00:28:43,059 --> 00:28:44,259
that i don't really want to go there but

809
00:28:44,259 --> 00:28:47,169
just for the hardcore typed array stuff

810
00:28:47,169 --> 00:28:48,789
maybe just run script and maybe for this

811
00:28:48,789 --> 00:28:50,440
being a better target for code

812
00:28:50,440 --> 00:28:55,090
generators goal maybe and since we had

813
00:28:55,090 --> 00:28:56,950
this calling process and we may cut more

814
00:28:56,950 --> 00:28:58,330
of the proposals it did make it the es6

815
00:28:58,330 --> 00:29:00,519
some of those strum and like block

816
00:29:00,519 --> 00:29:01,960
lender Bible are still out there in

817
00:29:01,960 --> 00:29:04,090
straw state but maybe they should be

818
00:29:04,090 --> 00:29:06,220
experimentally implemented so the under

819
00:29:06,220 --> 00:29:07,750
a flag you can try them and we can get

820
00:29:07,750 --> 00:29:11,110
more user feedback even that is hard

821
00:29:11,110 --> 00:29:12,820
because I think spider American v8 teams

822
00:29:12,820 --> 00:29:14,500
are all full up they're busy doing the

823
00:29:14,500 --> 00:29:16,779
stuff we have approved they don't want

824
00:29:16,779 --> 00:29:18,549
to try some rando strongman that might

825
00:29:18,549 --> 00:29:21,610
fail so maybe we should organize the

826
00:29:21,610 --> 00:29:22,990
community to do more prototyping I know

827
00:29:22,990 --> 00:29:24,669
there are some really good hackers here

828
00:29:24,669 --> 00:29:26,110
it could actually extend v8 and spider

829
00:29:26,110 --> 00:29:27,370
monkey and JavaScript or for that matter

830
00:29:27,370 --> 00:29:27,940
the other

831
00:29:27,940 --> 00:29:29,549
source engine to have some of these

832
00:29:29,549 --> 00:29:32,740
experimental features in a coordinated

833
00:29:32,740 --> 00:29:35,259
way but but the good news is that es6 is

834
00:29:35,259 --> 00:29:36,909
being drafted that's a link to the page

835
00:29:36,909 --> 00:29:38,200
on the wiki where you can find the

836
00:29:38,200 --> 00:29:40,120
emerging drafts their word documents and

837
00:29:40,120 --> 00:29:42,039
PDFs you can dip them if you use word

838
00:29:42,039 --> 00:29:44,139
you can look at them in PDF jas if you

839
00:29:44,139 --> 00:29:48,250
want and we're making progress people

840
00:29:48,250 --> 00:29:49,389
don't believe this you think oh the

841
00:29:49,389 --> 00:29:50,889
committee's off again the wii's it'll

842
00:29:50,889 --> 00:29:52,539
never happen but it's being perfect in

843
00:29:52,539 --> 00:29:54,399
v8 it isn't just Mozilla you know the

844
00:29:54,399 --> 00:29:56,590
holy fools adding the spider monkey in

845
00:29:56,590 --> 00:29:58,179
the vain hope that gets standardized is

846
00:29:58,179 --> 00:30:00,250
actually coming along and I expect it'll

847
00:30:00,250 --> 00:30:02,200
show up an apple and microsoft in never

848
00:30:02,200 --> 00:30:04,240
can tell but i think they'll emit a lot

849
00:30:04,240 --> 00:30:05,529
of this to their actually keen on things

850
00:30:05,529 --> 00:30:08,919
like binary data so that this is all

851
00:30:08,919 --> 00:30:10,950
good news and we can even afford to cut

852
00:30:10,950 --> 00:30:15,129
and we really are worrying about syntax

853
00:30:15,129 --> 00:30:17,440
like I swore I wouldn't do and I think

854
00:30:17,440 --> 00:30:20,200
that's a bad role for the committee I

855
00:30:20,200 --> 00:30:21,460
think it's better for the community so

856
00:30:21,460 --> 00:30:25,269
we need to interact somehow and and I

857
00:30:25,269 --> 00:30:28,360
want to find the pretty unusable syntax

858
00:30:28,360 --> 00:30:31,269
I know it's out there so let me talk

859
00:30:31,269 --> 00:30:33,519
about something new that I did talk

860
00:30:33,519 --> 00:30:35,110
about it blog about recently but i'll

861
00:30:35,110 --> 00:30:36,940
show you the demo and this is also i

862
00:30:36,940 --> 00:30:38,470
think connected to what alone is doing

863
00:30:38,470 --> 00:30:40,480
because Emscripten could certainly use

864
00:30:40,480 --> 00:30:43,690
that parallel hardware to lv m actually

865
00:30:43,690 --> 00:30:46,269
connects to open CL through some work

866
00:30:46,269 --> 00:30:49,179
nvidia did so there is a great

867
00:30:49,179 --> 00:30:50,769
opportunity here to do a fast pathway

868
00:30:50,769 --> 00:30:53,649
you can have c++ or whatever language

869
00:30:53,649 --> 00:30:55,840
you want that has a compiler the LVN

870
00:30:55,840 --> 00:30:58,210
backend and outcomes not only javascript

871
00:30:58,210 --> 00:31:01,149
may be parallel javascript and the intel

872
00:31:01,149 --> 00:31:03,159
researchers added a parallel ray library

873
00:31:03,159 --> 00:31:04,870
there's one of those in java so they

874
00:31:04,870 --> 00:31:05,889
were may be inspired by that but it's

875
00:31:05,889 --> 00:31:07,360
not bad thing it's like typed arrays

876
00:31:07,360 --> 00:31:11,500
only know methods mutate any of the

877
00:31:11,500 --> 00:31:13,120
elements you can't write to any of the

878
00:31:13,120 --> 00:31:14,769
elements and that makes it easy to do

879
00:31:14,769 --> 00:31:16,870
the dataflow analysis and you really are

880
00:31:16,870 --> 00:31:20,440
just throwing out work doing work

881
00:31:20,440 --> 00:31:23,440
stealing on your cpu's you're doing

882
00:31:23,440 --> 00:31:24,789
instruction selection on your short

883
00:31:24,789 --> 00:31:26,230
vector units that's what the demo uses

884
00:31:26,230 --> 00:31:28,090
and ideally you can map it to your GPU i

885
00:31:28,090 --> 00:31:29,649
think that'll happen so here are the

886
00:31:29,649 --> 00:31:32,019
methods they all produce fresh results

887
00:31:32,019 --> 00:31:33,610
that means that this isn't just a

888
00:31:33,610 --> 00:31:34,890
library if you run this

889
00:31:34,890 --> 00:31:37,320
slow but if you run a special compiler

890
00:31:37,320 --> 00:31:40,170
over it javascript to opencl is the

891
00:31:40,170 --> 00:31:41,550
current technique but this could be done

892
00:31:41,550 --> 00:31:42,810
in the Jets the current jobs with

893
00:31:42,810 --> 00:31:44,220
engines can actually do this analysis

894
00:31:44,220 --> 00:31:47,970
you can actually generate if you want to

895
00:31:47,970 --> 00:31:50,100
use opencl because it knows how to map

896
00:31:50,100 --> 00:31:51,720
to your hardware and it's a sort of

897
00:31:51,720 --> 00:31:53,640
reporting layer or maybe you just wire

898
00:31:53,640 --> 00:31:54,960
it in your g it knows how to generate

899
00:31:54,960 --> 00:31:56,670
the right instructions for your your

900
00:31:56,670 --> 00:31:59,670
multi-core vector units yours your GPU

901
00:31:59,670 --> 00:32:02,010
with its massive floating point

902
00:32:02,010 --> 00:32:05,160
parallelism and the source is on github

903
00:32:05,160 --> 00:32:06,540
that's really awesome intel's doing work

904
00:32:06,540 --> 00:32:09,600
on github I mean I knew they have

905
00:32:09,600 --> 00:32:10,440
another thing they have a swim

906
00:32:10,440 --> 00:32:12,050
decompiler they're just doing stuff

907
00:32:12,050 --> 00:32:14,130
there's a place in the demo code they

908
00:32:14,130 --> 00:32:15,570
hired some consultants who didn't know

909
00:32:15,570 --> 00:32:17,250
how to use strict than it cost mera so

910
00:32:17,250 --> 00:32:19,020
they put do not use strict in quotes it

911
00:32:19,020 --> 00:32:23,390
was funny and it shows that a string

912
00:32:23,390 --> 00:32:26,190
literal useless expression statement

913
00:32:26,190 --> 00:32:27,690
really is useless unless it happens to

914
00:32:27,690 --> 00:32:29,010
be used strict so be careful with your

915
00:32:29,010 --> 00:32:31,440
use tricks they do have meaning in

916
00:32:31,440 --> 00:32:33,840
harmony you'll have to take away the

917
00:32:33,840 --> 00:32:35,120
quotes and then you get guaranteed

918
00:32:35,120 --> 00:32:37,350
semantics it isn't just a useless string

919
00:32:37,350 --> 00:32:39,900
expression to old old browsers the

920
00:32:39,900 --> 00:32:41,460
parallel or constructor builds on typed

921
00:32:41,460 --> 00:32:42,870
arrays this is where embrace and extend

922
00:32:42,870 --> 00:32:44,640
maybe this will change this is just a

923
00:32:44,640 --> 00:32:46,230
technology demonstrator but the way it

924
00:32:46,230 --> 00:32:47,820
works looks like javascript right you're

925
00:32:47,820 --> 00:32:50,370
just doing new parallel array you're

926
00:32:50,370 --> 00:32:51,770
setting up a bunch of state for your

927
00:32:51,770 --> 00:32:56,790
asteroid particle system thingy using

928
00:32:56,790 --> 00:32:58,500
combine instead of plus equals is kind

929
00:32:58,500 --> 00:33:00,210
of a mouthful but this is where the

930
00:33:00,210 --> 00:33:01,410
magic happens because this is where you

931
00:33:01,410 --> 00:33:02,850
can actually farm out the work across

932
00:33:02,850 --> 00:33:05,520
multiple elements in the short vector or

933
00:33:05,520 --> 00:33:08,040
across even parts of GPU across mobile

934
00:33:08,040 --> 00:33:11,040
cores and you can take your loops that

935
00:33:11,040 --> 00:33:13,410
use these operations you can also split

936
00:33:13,410 --> 00:33:15,870
them and form them out everything is

937
00:33:15,870 --> 00:33:17,910
immutable so the dependencies are easy

938
00:33:17,910 --> 00:33:20,520
to figure out and that makes me think

939
00:33:20,520 --> 00:33:24,420
that Janice is underrated because when I

940
00:33:24,420 --> 00:33:26,190
did it it was first a toy or useless

941
00:33:26,190 --> 00:33:28,110
even in 2006 andreia scale had a paper

942
00:33:28,110 --> 00:33:30,090
rejected by a referee was like cgo

943
00:33:30,090 --> 00:33:32,190
conference who said javascript is a toy

944
00:33:32,190 --> 00:33:33,840
and performance doesn't matter and this

945
00:33:33,840 --> 00:33:35,550
was like two thousand six I mean gmail

946
00:33:35,550 --> 00:33:38,640
was out google maps but you know jess

947
00:33:38,640 --> 00:33:40,710
was too slow you needed actions for free

948
00:33:40,710 --> 00:33:41,970
you needed silver

949
00:33:41,970 --> 00:33:43,260
I don't know something but that's not

950
00:33:43,260 --> 00:33:46,050
true it couldn't be fixed while we're

951
00:33:46,050 --> 00:33:47,730
fixing it we're making progress in the

952
00:33:47,730 --> 00:33:49,620
committee ain't going to be the

953
00:33:49,620 --> 00:33:51,300
prettiest thing but not sure anything

954
00:33:51,300 --> 00:33:53,220
that's got the reach of JavaScript can

955
00:33:53,220 --> 00:33:54,480
be that pretty because it has to be

956
00:33:54,480 --> 00:33:57,840
compatible roughly over time you can

957
00:33:57,840 --> 00:33:59,670
bring things slow and put in new things

958
00:33:59,670 --> 00:34:01,650
like spread and rest but takes time and

959
00:34:01,650 --> 00:34:03,570
they said I couldn't do you know

960
00:34:03,570 --> 00:34:04,680
parallel hardware we need a new language

961
00:34:04,680 --> 00:34:06,720
for that you know we're embedding web CL

962
00:34:06,720 --> 00:34:09,870
unsafely in web pages where we're going

963
00:34:09,870 --> 00:34:11,910
to put magic domain-specific languages

964
00:34:11,910 --> 00:34:13,560
into strings in java script where they

965
00:34:13,560 --> 00:34:15,780
can be unchecked that's a good

966
00:34:15,780 --> 00:34:17,550
experiment too but it's to me it's not

967
00:34:17,550 --> 00:34:20,370
appealing it's unsafe it's unchecked

968
00:34:20,370 --> 00:34:22,500
with parallel arrays we can do better so

969
00:34:22,500 --> 00:34:24,480
I say almost bad on Jas and i'm going to

970
00:34:24,480 --> 00:34:26,420
show you the River Trail demo now and

971
00:34:26,420 --> 00:34:30,450
this is a pretty particle system but

972
00:34:30,450 --> 00:34:31,830
when it starts we'll see it's using

973
00:34:31,830 --> 00:34:33,960
sequential execution which is slow and

974
00:34:33,960 --> 00:34:36,570
there come some particles and it it's

975
00:34:36,570 --> 00:34:38,010
just painful and the framerate

976
00:34:38,010 --> 00:34:39,330
eventually on the right there will pop

977
00:34:39,330 --> 00:34:43,440
up and it's not good but if you click on

978
00:34:43,440 --> 00:35:01,760
parallel then

979
00:35:01,770 --> 00:35:03,940
and I think my fans are going to turn on

980
00:35:03,940 --> 00:35:07,060
now because it is lighting up I mean all

981
00:35:07,060 --> 00:35:08,620
the silicon and all four cores on this

982
00:35:08,620 --> 00:35:13,240
big beautiful map are chuck it away so

983
00:35:13,240 --> 00:35:19,910
yeah almost bet on jazz some questions

984
00:35:19,920 --> 00:35:37,190
Brian

985
00:35:37,200 --> 00:35:39,960
yeah scripta has to do like or zero or

986
00:35:39,960 --> 00:35:41,250
whatever all over the place it's crazy

987
00:35:41,250 --> 00:35:43,380
so I alluded to that with the idea of

988
00:35:43,380 --> 00:35:46,380
America extensions for JavaScript given

989
00:35:46,380 --> 00:35:48,960
the type to ray storage types you do

990
00:35:48,960 --> 00:35:51,480
kind of want arithmetic evaluation

991
00:35:51,480 --> 00:35:54,000
intermediate types and even local

992
00:35:54,000 --> 00:35:57,180
variable types which I'm going to

993
00:35:57,180 --> 00:35:58,859
consider all possibilities like your

994
00:35:58,859 --> 00:36:00,869
phones have GPUs with 16-bit floats on

995
00:36:00,869 --> 00:36:03,119
them maybe we need those it starts to

996
00:36:03,119 --> 00:36:04,500
get messy if you make a numeric tower

997
00:36:04,500 --> 00:36:06,119
where there are implicit conversions

998
00:36:06,119 --> 00:36:08,339
that lead to loss of precision or crazy

999
00:36:08,339 --> 00:36:11,220
unsigned contamination that I think is

1000
00:36:11,220 --> 00:36:12,900
to be avoided maybe we should have no

1001
00:36:12,900 --> 00:36:14,339
implicit conversions you should have to

1002
00:36:14,339 --> 00:36:16,740
explicitly convert I'm thinking about

1003
00:36:16,740 --> 00:36:18,150
making this proposal this is another one

1004
00:36:18,150 --> 00:36:19,440
of those late proposals that might be

1005
00:36:19,440 --> 00:36:21,329
more important than some of the stuff

1006
00:36:21,329 --> 00:36:23,970
we're working on 3s 6 so look for more

1007
00:36:23,970 --> 00:36:25,290
on my blog about this I'm serious about

1008
00:36:25,290 --> 00:36:28,589
this is it's it's relevant to the typed

1009
00:36:28,589 --> 00:36:30,270
array and parallel array work it's

1010
00:36:30,270 --> 00:36:31,560
relevant to the script in a bunch of

1011
00:36:31,560 --> 00:36:34,440
other code generators sounds like darts

1012
00:36:34,440 --> 00:36:35,970
got multiple numeric types so you know

1013
00:36:35,970 --> 00:36:45,090
got to keep up with the Joneses yes

1014
00:36:45,100 --> 00:36:57,720
Wow time for beer

1015
00:36:57,730 --> 00:37:01,400
if Oracle of bothering people about like

1016
00:37:01,400 --> 00:37:03,830
the Java tried knock why not make Jas

1017
00:37:03,830 --> 00:37:09,170
official good idea you know promise jst

1018
00:37:09,170 --> 00:37:11,930
org is I think it's like Jerusalem

1019
00:37:11,930 --> 00:37:14,660
synoptic studies org or something I mean

1020
00:37:14,660 --> 00:37:17,810
idiot j/s a little short but how do you

1021
00:37:17,810 --> 00:37:20,359
like that that black and yellow logo is

1022
00:37:20,359 --> 00:37:25,490
that good all right I thought about I

1023
00:37:25,490 --> 00:37:27,320
actually tried to negotiate with some

1024
00:37:27,320 --> 00:37:28,910
domain squatters for certain names

1025
00:37:28,910 --> 00:37:31,070
because i think jay s is a strong short

1026
00:37:31,070 --> 00:37:33,230
name and we could have that community

1027
00:37:33,230 --> 00:37:36,349
group that does have a hacker elite that

1028
00:37:36,349 --> 00:37:39,140
extends the open-source engines beyond

1029
00:37:39,140 --> 00:37:41,420
what their owners can afford to do to

1030
00:37:41,420 --> 00:37:43,280
experimental stuff thinking about it

1031
00:37:43,280 --> 00:37:55,200
thanks

1032
00:37:55,210 --> 00:37:58,190
so good at me in a pasilla might apply

1033
00:37:58,190 --> 00:38:02,599
for i jst LD put some money into it

1034
00:38:02,599 --> 00:38:07,400
about jst OB Wow all right hadn't

1035
00:38:07,400 --> 00:38:17,640
thought of that one will look into it

1036
00:38:17,650 --> 00:38:21,260
cool um so what's the kind of though I

1037
00:38:21,260 --> 00:38:23,120
suppose the backwards compatibility

1038
00:38:23,120 --> 00:38:25,160
story are we going to do what right

1039
00:38:25,160 --> 00:38:27,380
Tracy doesn't have like it or

1040
00:38:27,380 --> 00:38:28,820
CoffeeScript have this kind of converter

1041
00:38:28,820 --> 00:38:30,350
which will always go back to JavaScript

1042
00:38:30,350 --> 00:38:34,160
or yeah it's in plan there was already

1043
00:38:34,160 --> 00:38:35,570
tracer I don't think that's we maintain

1044
00:38:35,570 --> 00:38:38,390
now but the idea is to take the next

1045
00:38:38,390 --> 00:38:39,890
version JavaScript and compile it down

1046
00:38:39,890 --> 00:38:41,330
to the current version all the browsers

1047
00:38:41,330 --> 00:38:42,710
support there's going to be some

1048
00:38:42,710 --> 00:38:45,110
performance effects but that's better

1049
00:38:45,110 --> 00:38:47,390
than not running and if you really want

1050
00:38:47,390 --> 00:38:48,860
to target current version until the new

1051
00:38:48,860 --> 00:38:49,970
version it's widely adopted you can

1052
00:38:49,970 --> 00:38:51,140
always do that I keep saying this

1053
00:38:51,140 --> 00:38:53,030
because people say well we have to wait

1054
00:38:53,030 --> 00:38:54,320
four years so there's no point in doing

1055
00:38:54,320 --> 00:38:56,240
anything but that's not true sometimes

1056
00:38:56,240 --> 00:38:57,590
it's less than four years the web can

1057
00:38:57,590 --> 00:38:58,970
evolve rapidly and with the move to

1058
00:38:58,970 --> 00:39:09,859
mobile I think it will cope

1059
00:39:09,869 --> 00:39:13,210
hi when it comes to the question of

1060
00:39:13,210 --> 00:39:16,119
syntax I feel like maybe a better move

1061
00:39:16,119 --> 00:39:18,130
would be to work on features for

1062
00:39:18,130 --> 00:39:19,540
JavaScript to make itself a better

1063
00:39:19,540 --> 00:39:21,100
target for other languages like

1064
00:39:21,100 --> 00:39:23,020
coffeescript compiling into it right now

1065
00:39:23,020 --> 00:39:25,060
you can't really use it for test fit and

1066
00:39:25,060 --> 00:39:27,070
development you can't really use any of

1067
00:39:27,070 --> 00:39:28,540
the CoffeeScript stuff because this deck

1068
00:39:28,540 --> 00:39:30,130
traces search is totally meaningless and

1069
00:39:30,130 --> 00:39:33,430
I think so both WebKit as well as

1070
00:39:33,430 --> 00:39:35,200
Mozilla has bugs open for like a

1071
00:39:35,200 --> 00:39:37,060
proposal to annotate source code with

1072
00:39:37,060 --> 00:39:38,890
line numbers from other language that ya

1073
00:39:38,890 --> 00:39:41,130
generated some is that something akma

1074
00:39:41,130 --> 00:39:43,750
script 6 would address sort of I

1075
00:39:43,750 --> 00:39:45,100
actually worked on the past for that

1076
00:39:45,100 --> 00:39:46,420
which is under review and it's going to

1077
00:39:46,420 --> 00:39:48,010
land soon for Firefox I don't know

1078
00:39:48,010 --> 00:39:51,670
something and that is that that's called

1079
00:39:51,670 --> 00:39:52,960
source Maps it's what the closure

1080
00:39:52,960 --> 00:39:54,490
compiler generates and that's a good

1081
00:39:54,490 --> 00:39:56,290
idea I don't want to standardize yet

1082
00:39:56,290 --> 00:39:57,400
because it's still something that only

1083
00:39:57,400 --> 00:39:59,860
like the closure compiler and spider

1084
00:39:59,860 --> 00:40:02,380
monkey and maybe a WebKit or chromium

1085
00:40:02,380 --> 00:40:04,270
patch that might be going forward is

1086
00:40:04,270 --> 00:40:06,940
doing I think spider-man he's going to

1087
00:40:06,940 --> 00:40:08,350
have it first but we want to support

1088
00:40:08,350 --> 00:40:09,850
good source coordinate mapping so when

1089
00:40:09,850 --> 00:40:11,830
you get an error when you are debugging

1090
00:40:11,830 --> 00:40:13,840
you can project back to your coffee

1091
00:40:13,840 --> 00:40:15,850
script source other than I think coffee

1092
00:40:15,850 --> 00:40:16,660
syrups good for test-driven development

1093
00:40:16,660 --> 00:40:19,330
and these numeric extensions will be

1094
00:40:19,330 --> 00:40:20,920
good for coffee script triangle would be

1095
00:40:20,920 --> 00:40:22,060
good for coffee script because coffee

1096
00:40:22,060 --> 00:40:23,859
trip wants to do Ruby s-class side

1097
00:40:23,859 --> 00:40:26,109
inheritance when you make a subclass you

1098
00:40:26,109 --> 00:40:28,450
inherit the super classes class methods

1099
00:40:28,450 --> 00:40:30,640
and triangle does that magically when

1100
00:40:30,640 --> 00:40:31,900
you use it with a function on the right

1101
00:40:31,900 --> 00:40:36,490
so some of this is relevant so yeah just

1102
00:40:36,490 --> 00:40:38,770
a question on the M scriptum versus

1103
00:40:38,770 --> 00:40:40,210
Native Client versus extending

1104
00:40:40,210 --> 00:40:43,270
JavaScript because of the let's say the

1105
00:40:43,270 --> 00:40:44,770
performance characteristics of both

1106
00:40:44,770 --> 00:40:48,790
memory size and cpu speed there is going

1107
00:40:48,790 --> 00:40:51,760
to be a class of applications that are

1108
00:40:51,760 --> 00:40:53,590
going to drive the adoption right so

1109
00:40:53,590 --> 00:40:56,170
that you have to have a killer app for

1110
00:40:56,170 --> 00:40:59,380
to use this technology so how do you see

1111
00:40:59,380 --> 00:41:01,450
the performance balance for instance

1112
00:41:01,450 --> 00:41:03,130
it's great at it can cross compile to

1113
00:41:03,130 --> 00:41:05,230
JavaScript but if you know the only

1114
00:41:05,230 --> 00:41:07,930
browser that runs it fast enough is you

1115
00:41:07,930 --> 00:41:10,780
know maybe two browsers or one in half

1116
00:41:10,780 --> 00:41:13,750
is it still is it still a competitive

1117
00:41:13,750 --> 00:41:15,310
because if I run it on an iPad maybe it

1118
00:41:15,310 --> 00:41:17,140
runs like half of frames per second

1119
00:41:17,140 --> 00:41:18,850
which yeah I got just call device

1120
00:41:18,850 --> 00:41:22,300
Native Client incoming the iPad ever so

1121
00:41:22,300 --> 00:41:25,090
that's really not a comparable good but

1122
00:41:25,090 --> 00:41:27,760
but frames per second isn't either so

1123
00:41:27,760 --> 00:41:29,290
then you don't care right so if this

1124
00:41:29,290 --> 00:41:33,400
becomes a hot issue pun intended then I

1125
00:41:33,400 --> 00:41:35,380
think competition will drive these

1126
00:41:35,380 --> 00:41:37,150
devices and they will get faster and

1127
00:41:37,150 --> 00:41:38,800
more multi-core architectures with

1128
00:41:38,800 --> 00:41:40,690
bigger caches and we will see them

1129
00:41:40,690 --> 00:41:43,000
running these these more aggressive apps

1130
00:41:43,000 --> 00:41:43,990
but you have to go through this

1131
00:41:43,990 --> 00:41:46,090
competitive cycle there's no shortcut on

1132
00:41:46,090 --> 00:41:48,010
the web and that's why I say always bet

1133
00:41:48,010 --> 00:41:50,110
on jazz because the shortest path which

1134
00:41:50,110 --> 00:41:51,460
alone is taking with them script in

1135
00:41:51,460 --> 00:41:52,630
which we're doing with these parallel

1136
00:41:52,630 --> 00:41:54,970
ray extensions is to extend the web as

1137
00:41:54,970 --> 00:41:56,740
it is not try to do a replacement on

1138
00:41:56,740 --> 00:41:59,200
part of it or all of it that trick never

1139
00:41:59,200 --> 00:42:06,490
works Brendan some time ago you sent me

1140
00:42:06,490 --> 00:42:09,700
this link to this suggestion of an

1141
00:42:09,700 --> 00:42:12,730
dicked API you remember plus the state

1142
00:42:12,730 --> 00:42:14,470
about that it's a straw man and didn't

1143
00:42:14,470 --> 00:42:17,200
make the cut off dave herman did some

1144
00:42:17,200 --> 00:42:19,630
great work making a dict api it's

1145
00:42:19,630 --> 00:42:22,150
actually a literal syntax you put

1146
00:42:22,150 --> 00:42:25,270
brackets around you know key colon value

1147
00:42:25,270 --> 00:42:26,830
property initializers instead of

1148
00:42:26,830 --> 00:42:29,020
squiggly curly braces you use square

1149
00:42:29,020 --> 00:42:32,530
brackets kind of cool because it's only

1150
00:42:32,530 --> 00:42:35,530
a dictionary you get string or katrinak

1151
00:42:35,530 --> 00:42:37,720
weighted keys and values you get no

1152
00:42:37,720 --> 00:42:39,910
object on prototype we can decide if we

1153
00:42:39,910 --> 00:42:41,110
want it to be extensive Laura now it's

1154
00:42:41,110 --> 00:42:43,360
all I should it acts more like what a

1155
00:42:43,360 --> 00:42:46,330
Python dicked is but how do you make an

1156
00:42:46,330 --> 00:42:48,370
empty one square brackets by themselves

1157
00:42:48,370 --> 00:42:51,100
make an array they started adding pipes

1158
00:42:51,100 --> 00:42:53,020
it got weird and it was a little late

1159
00:42:53,020 --> 00:42:54,220
and it just didn't make it so we're

1160
00:42:54,220 --> 00:42:56,320
gonna keep working on it the strong and

1161
00:42:56,320 --> 00:42:58,060
stuff is still ground we're turning over

1162
00:42:58,060 --> 00:42:59,110
we're still trying to grow some

1163
00:42:59,110 --> 00:43:00,940
beautiful plants or plenty corns there

1164
00:43:00,940 --> 00:43:03,070
so don't give up but keep the feedback

1165
00:43:03,070 --> 00:43:11,140
coming and about the TC 339 do you think

1166
00:43:11,140 --> 00:43:14,290
that will come to conclusion of having a

1167
00:43:14,290 --> 00:43:17,500
more open from external contributions

1168
00:43:17,500 --> 00:43:20,620
like we have an Oreo mailing list and

1169
00:43:20,620 --> 00:43:23,150
there is clearly evolution on that but

1170
00:43:23,150 --> 00:43:25,250
as I'm trying to implement some this

1171
00:43:25,250 --> 00:43:28,850
pack and I find out hi difficult to get

1172
00:43:28,850 --> 00:43:31,940
the dart that test that's it that's it

1173
00:43:31,940 --> 00:43:35,810
running so yeah sorry I didn't know what

1174
00:43:35,810 --> 00:43:37,580
chance what you meant but there there is

1175
00:43:37,580 --> 00:43:39,710
a problem with open this akma like all

1176
00:43:39,710 --> 00:43:41,360
standards bodies has been talking about

1177
00:43:41,360 --> 00:43:43,280
openness and sort of moving toward

1178
00:43:43,280 --> 00:43:46,070
openness but it's it's gradual w3c

1179
00:43:46,070 --> 00:43:47,480
actually got severe pressure from the

1180
00:43:47,480 --> 00:43:49,540
what WG which let any individual

1181
00:43:49,540 --> 00:43:51,470
well-behaved individual be a member in

1182
00:43:51,470 --> 00:43:53,600
standing so now i think the HTML working

1183
00:43:53,600 --> 00:43:55,490
group is like that which is good makes

1184
00:43:55,490 --> 00:43:57,410
for a certain noise level only hicks he

1185
00:43:57,410 --> 00:43:59,110
can really keep up so he usually wins

1186
00:43:59,110 --> 00:44:01,700
not sure about that you know i like

1187
00:44:01,700 --> 00:44:03,440
hixxy he did the job we picked them for

1188
00:44:03,440 --> 00:44:07,190
when he was still at opera in 2004 I'm

1189
00:44:07,190 --> 00:44:08,390
not gonna pick on him cuz I think he did

1190
00:44:08,390 --> 00:44:10,370
the job basically and I'm happy with it

1191
00:44:10,370 --> 00:44:13,340
mostly but I don't know how you r Ian

1192
00:44:13,340 --> 00:44:15,410
you redo that you can find another hixxy

1193
00:44:15,410 --> 00:44:18,800
somewhere it's hard acma is not going to

1194
00:44:18,800 --> 00:44:20,120
let any individual be a member in good

1195
00:44:20,120 --> 00:44:21,650
standing but we created es discuss at

1196
00:44:21,650 --> 00:44:23,480
Mozilla to let everybody participate and

1197
00:44:23,480 --> 00:44:26,180
a bunch of us not just me it was all in

1198
00:44:26,180 --> 00:44:28,610
others but people Google take input

1199
00:44:28,610 --> 00:44:30,590
seriously and take it back and Alex

1200
00:44:30,590 --> 00:44:32,750
Russell has tried to incorporate some of

1201
00:44:32,750 --> 00:44:34,130
the people who might be around when we

1202
00:44:34,130 --> 00:44:36,410
meet to come to our dinners and I think

1203
00:44:36,410 --> 00:44:38,900
we're gonna keep trying that no games

1204
00:44:38,900 --> 00:44:41,030
and I'm not trying to play politics just

1205
00:44:41,030 --> 00:44:42,500
get get more voices of the community

1206
00:44:42,500 --> 00:44:44,660
heard but maybe the best idea is the DJ

1207
00:44:44,660 --> 00:44:47,780
s domain or the j org take a less

1208
00:44:47,780 --> 00:44:50,360
hostile approach to what WG but do make

1209
00:44:50,360 --> 00:44:52,160
sort of advanced scouting organization

1210
00:44:52,160 --> 00:44:54,620
out of the community and be serious

1211
00:44:54,620 --> 00:44:56,270
about it try to be coordinated make some

1212
00:44:56,270 --> 00:44:58,210
extensions to the open-source engines

1213
00:44:58,210 --> 00:45:01,010
argue until you somebody wins or the

1214
00:45:01,010 --> 00:45:02,840
rice right design comes to the surface

1215
00:45:02,840 --> 00:45:04,820
and scale it out better than the

1216
00:45:04,820 --> 00:45:06,110
committee can do because the committee

1217
00:45:06,110 --> 00:45:10,310
is understaffed it does seem like we're

1218
00:45:10,310 --> 00:45:11,690
losing a few Googlers I don't know if

1219
00:45:11,690 --> 00:45:13,360
that's because the darted on I think not

1220
00:45:13,360 --> 00:45:16,160
we're just going to never do as good as

1221
00:45:16,160 --> 00:45:17,750
the community can do if the community is

1222
00:45:17,750 --> 00:45:23,810
harmonious and coordinated hi we have

1223
00:45:23,810 --> 00:45:26,750
the conversation about seat types of I'm

1224
00:45:26,750 --> 00:45:28,520
the guy that was trying see types to

1225
00:45:28,520 --> 00:45:30,680
simulate what you would have done that

1226
00:45:30,680 --> 00:45:31,450
yes

1227
00:45:31,450 --> 00:45:36,200
yes six looks cool but it seems to be

1228
00:45:36,200 --> 00:45:39,050
split in two main things one is this

1229
00:45:39,050 --> 00:45:41,150
binary data structure array this

1230
00:45:41,150 --> 00:45:43,040
parallel stuff which is which is amazing

1231
00:45:43,040 --> 00:45:46,760
and everything else is syntax by any

1232
00:45:46,760 --> 00:45:48,770
chance we can have as soon as possible

1233
00:45:48,770 --> 00:45:50,690
at least the part that can mix things

1234
00:45:50,690 --> 00:45:54,470
faster and think about syntax after

1235
00:45:54,470 --> 00:45:57,200
maybe oh yeah so the problem is that the

1236
00:45:57,200 --> 00:45:59,450
it's there two problems one is turn

1237
00:45:59,450 --> 00:46:00,980
numbers the committee don't want to

1238
00:46:00,980 --> 00:46:03,410
leave you all using CoffeeScript or a

1239
00:46:03,410 --> 00:46:05,750
compiler they want to attend the

1240
00:46:05,750 --> 00:46:06,920
usability problems that are in the

1241
00:46:06,920 --> 00:46:08,120
language functions too long they're a

1242
00:46:08,120 --> 00:46:09,230
bunch of them writing the class

1243
00:46:09,230 --> 00:46:10,640
boilerplate the problem it's not the

1244
00:46:10,640 --> 00:46:12,230
biggest problem but it is a problem so

1245
00:46:12,230 --> 00:46:13,700
if we make people wait they're going to

1246
00:46:13,700 --> 00:46:14,900
wait a long time and that's the second

1247
00:46:14,900 --> 00:46:16,250
problem the overhead of the standards

1248
00:46:16,250 --> 00:46:18,680
process which has some value in the

1249
00:46:18,680 --> 00:46:20,450
release of patents and then government's

1250
00:46:20,450 --> 00:46:22,820
respecting ISO particles that has fairly

1251
00:46:22,820 --> 00:46:24,650
high overhead you cannot do really fast

1252
00:46:24,650 --> 00:46:26,120
turns of the crank because the overhead

1253
00:46:26,120 --> 00:46:27,770
dominates your schedule and you have no

1254
00:46:27,770 --> 00:46:30,380
room left actually do any work so we're

1255
00:46:30,380 --> 00:46:33,530
aiming at es6 in 2013 italy prototype 2

1256
00:46:33,530 --> 00:46:35,390
while before then i'll probably be not

1257
00:46:35,390 --> 00:46:36,950
even under a fly again v it i hope it'll

1258
00:46:36,950 --> 00:46:38,390
just be turned on because parts of it

1259
00:46:38,390 --> 00:46:40,190
anyway it will be on controversial and

1260
00:46:40,190 --> 00:46:42,200
they're already in on in spider monkey

1261
00:46:42,200 --> 00:46:43,730
we'll get some of that in javis rapport

1262
00:46:43,730 --> 00:46:45,980
you'll see it coming now if the things

1263
00:46:45,980 --> 00:46:48,740
that come first are the make it faster

1264
00:46:48,740 --> 00:46:50,990
maybe even these numeric extensions then

1265
00:46:50,990 --> 00:46:52,730
we win so that's why I think community

1266
00:46:52,730 --> 00:46:54,020
interaction is most important because

1267
00:46:54,020 --> 00:46:56,450
our prioritization not just on the

1268
00:46:56,450 --> 00:46:57,890
committee but among the implementers at

1269
00:46:57,890 --> 00:47:00,170
all the browser renders needs to be

1270
00:47:00,170 --> 00:47:03,530
informed by the community all right

