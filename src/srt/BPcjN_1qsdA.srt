1
00:00:18,640 --> 00:00:21,890

hi everyone I'm going to talk about a

2
00:00:21,890 --> 00:00:22,970
couple of tools that I've been working

3
00:00:22,970 --> 00:00:26,330
on and how they help you bundle your

4
00:00:26,330 --> 00:00:28,250
front-end web applications with HTTP two

5
00:00:28,250 --> 00:00:31,400
so a couple things I'm uncover is just a

6
00:00:31,400 --> 00:00:34,430
rough intro on how server push actually

7
00:00:34,430 --> 00:00:36,260
works not the basics of HTTP to I'm

8
00:00:36,260 --> 00:00:37,550
assuming a familiar with that or there's

9
00:00:37,550 --> 00:00:39,620
other talks to explain that better and

10
00:00:39,620 --> 00:00:40,610
then there's two demos that I want to

11
00:00:40,610 --> 00:00:41,960
show the two projects that i mentioned

12
00:00:41,960 --> 00:00:44,420
one is going to help you reduce latency

13
00:00:44,420 --> 00:00:46,820
and save bandwidth so therefore

14
00:00:46,820 --> 00:00:48,680
accelerate your websites and the other

15
00:00:48,680 --> 00:00:51,020
one is going to help you a transpile but

16
00:00:51,020 --> 00:00:53,329
particularly for projects that are being

17
00:00:53,329 --> 00:00:57,950
served with HTTP server push it's

18
00:00:57,950 --> 00:01:00,200
produced over push is basically adding

19
00:01:00,200 --> 00:01:02,270
bundling like you would do with a web

20
00:01:02,270 --> 00:01:03,800
pack or browserify all these things into

21
00:01:03,800 --> 00:01:06,560
the protocol layer it's a introduces a

22
00:01:06,560 --> 00:01:09,740
new semantics into the protocol most of

23
00:01:09,740 --> 00:01:11,960
the other stuff in HP two is really just

24
00:01:11,960 --> 00:01:14,090
the same as HTTP 1.1 but better so you

25
00:01:14,090 --> 00:01:15,470
get marginal improvements in performance

26
00:01:15,470 --> 00:01:17,479
but would a to b to server push you can

27
00:01:17,479 --> 00:01:21,920
achieve much greater advantages so lots

28
00:01:21,920 --> 00:01:24,020
of different little little uh you know

29
00:01:24,020 --> 00:01:26,570
pros and cons up my plusses for a server

30
00:01:26,570 --> 00:01:29,960
push over the legacy file concatenation

31
00:01:29,960 --> 00:01:32,930
I guess you'd call it so its native in

32
00:01:32,930 --> 00:01:34,729
the browser so the browser can optimize

33
00:01:34,729 --> 00:01:36,680
it it works for any file and not just

34
00:01:36,680 --> 00:01:38,990
JavaScript or CSS or images it just

35
00:01:38,990 --> 00:01:43,580
works blindly across it all you can cash

36
00:01:43,580 --> 00:01:45,860
individual files and update just those

37
00:01:45,860 --> 00:01:48,380
ones rather than an entire bundle and it

38
00:01:48,380 --> 00:01:49,670
works on a foot on the very first

39
00:01:49,670 --> 00:01:51,110
request so you don't have to like load

40
00:01:51,110 --> 00:01:53,299
the HTML and then serve your

41
00:01:53,299 --> 00:01:54,590
concatenated file you can serve

42
00:01:54,590 --> 00:01:56,540
everything from the straight from the

43
00:01:56,540 --> 00:01:59,780
first response all right and you know

44
00:01:59,780 --> 00:02:00,799
falcon combination we're all familiar

45
00:02:00,799 --> 00:02:03,110
with some of the problems that it has so

46
00:02:03,110 --> 00:02:05,560
i want to show you basically how a

47
00:02:05,560 --> 00:02:08,599
server push request flow goes real quick

48
00:02:08,599 --> 00:02:10,249
so you get a request coming in from a

49
00:02:10,249 --> 00:02:11,989
browser to your web server let's say for

50
00:02:11,989 --> 00:02:13,440
/ for the home

51
00:02:13,440 --> 00:02:15,120
page what's going to happen is your

52
00:02:15,120 --> 00:02:16,230
observer is going to analyze that and

53
00:02:16,230 --> 00:02:17,460
say okay you know if you're looking for

54
00:02:17,460 --> 00:02:18,690
the home page you're probably gonna need

55
00:02:18,690 --> 00:02:20,400
a fab you con as well so I'm going to

56
00:02:20,400 --> 00:02:22,260
serve you a fake request because that's

57
00:02:22,260 --> 00:02:23,760
what a promise is it's a fake request

58
00:02:23,760 --> 00:02:25,350
not just a response with a request first

59
00:02:25,350 --> 00:02:27,000
and it's going to say I'm going to put

60
00:02:27,000 --> 00:02:29,310
it on another HP to stream HP has lots

61
00:02:29,310 --> 00:02:30,720
of different streams they all go over

62
00:02:30,720 --> 00:02:33,660
the same socket but just keep that a

63
00:02:33,660 --> 00:02:36,810
concept in mind but it can push lots of

64
00:02:36,810 --> 00:02:38,250
lots of different promises right lots of

65
00:02:38,250 --> 00:02:39,540
different requests I did anticipating

66
00:02:39,540 --> 00:02:42,120
the client to make finally it's going to

67
00:02:42,120 --> 00:02:43,470
serve the actual response to the

68
00:02:43,470 --> 00:02:45,300
original request it's going to serve the

69
00:02:45,300 --> 00:02:47,010
headers in the body and then once that's

70
00:02:47,010 --> 00:02:48,810
once the browser has that it's going to

71
00:02:48,810 --> 00:02:51,240
start pushing all those promises so now

72
00:02:51,240 --> 00:02:52,590
it's serving the responses to these

73
00:02:52,590 --> 00:02:55,650
requests that it pretended occurred so

74
00:02:55,650 --> 00:02:57,090
those I'll go over it over the wire and

75
00:02:57,090 --> 00:03:00,030
we've got a lot of these streams going

76
00:03:00,030 --> 00:03:02,010
on independently so you can prioritize

77
00:03:02,010 --> 00:03:04,320
things you can schedule things it's

78
00:03:04,320 --> 00:03:06,240
pretty cool so let's see what we can do

79
00:03:06,240 --> 00:03:08,250
we've got a tool called HTTP to server

80
00:03:08,250 --> 00:03:11,100
and let's do a little demo see what

81
00:03:11,100 --> 00:03:13,980
happens if we try to sum in comparison

82
00:03:13,980 --> 00:03:16,350
to previous practices I've taken one of

83
00:03:16,350 --> 00:03:18,840
Simon Swain's epic projects from last

84
00:03:18,840 --> 00:03:21,209
year's conference and I want to see how

85
00:03:21,209 --> 00:03:25,260
how fast it works with HB 2 versus hp1

86
00:03:25,260 --> 00:03:27,120
concatenation here on the left-hand side

87
00:03:27,120 --> 00:03:28,850
I've got a browser simulating a

88
00:03:28,850 --> 00:03:33,630
connection from Singapore to San

89
00:03:33,630 --> 00:03:35,580
Francisco that's roughly you know 300

90
00:03:35,580 --> 00:03:37,800
milliseconds of artificial latency but

91
00:03:37,800 --> 00:03:39,450
I've got a gigabit connection because

92
00:03:39,450 --> 00:03:41,340
Singapore's pretty good like that but

93
00:03:41,340 --> 00:03:42,630
what's going to happen with this latency

94
00:03:42,630 --> 00:03:46,290
if we run a server that serves the HTTP

95
00:03:46,290 --> 00:03:48,750
one version of the project which has a

96
00:03:48,750 --> 00:03:50,540
lot of jobs with clouds and some CSS and

97
00:03:50,540 --> 00:03:54,120
then we load that page that extra

98
00:03:54,120 --> 00:03:55,590
latency is going to force a lot of round

99
00:03:55,590 --> 00:03:58,940
trips so we've seeing this graph here

100
00:03:58,940 --> 00:04:02,100
this traditional waterfall the green

101
00:04:02,100 --> 00:04:03,600
parts are basically the latency on the

102
00:04:03,600 --> 00:04:05,160
network there's very little time

103
00:04:05,160 --> 00:04:06,239
actually transferring because I've got a

104
00:04:06,239 --> 00:04:08,489
gigabit right but the latency is going

105
00:04:08,489 --> 00:04:11,130
to kill my app look at that so it's

106
00:04:11,130 --> 00:04:12,959
taking like four seconds all right so

107
00:04:12,959 --> 00:04:15,360
let's see what happens with HTTP two if

108
00:04:15,360 --> 00:04:17,250
I runnin HP to server I'll have to do is

109
00:04:17,250 --> 00:04:18,859
this and by the way to the HP to server

110
00:04:18,859 --> 00:04:21,840
it's blind to any kind of file type so i

111
00:04:21,840 --> 00:04:23,160
don't have to configure you know

112
00:04:23,160 --> 00:04:24,870
complicated gulp script or a web pack

113
00:04:24,870 --> 00:04:27,280
config it just serves everything in

114
00:04:27,280 --> 00:04:31,240
pushes it very easy so let me turn off

115
00:04:31,240 --> 00:04:34,300
this cpu monster all right and go over

116
00:04:34,300 --> 00:04:37,570
to the HP to site run that and see what

117
00:04:37,570 --> 00:04:38,889
happens it's got its got one or cuts and

118
00:04:38,889 --> 00:04:40,720
it's pushing tons of files all those

119
00:04:40,720 --> 00:04:43,480
requests are now getting pushed how long

120
00:04:43,480 --> 00:04:45,820
did I take about the same oh that's not

121
00:04:45,820 --> 00:04:48,340
good right so why is that so there's a

122
00:04:48,340 --> 00:04:50,380
lot of that it goes up if you look at

123
00:04:50,380 --> 00:04:52,300
this left here is excruciatingly Lee

124
00:04:52,300 --> 00:04:53,800
slow right you get a request and then

125
00:04:53,800 --> 00:04:55,780
you know if a vivir con takes 100 5

126
00:04:55,780 --> 00:04:59,260
milliseconds what's hell so this server

127
00:04:59,260 --> 00:05:01,870
is optimizing your files with you know

128
00:05:01,870 --> 00:05:03,340
complicated compression that takes about

129
00:05:03,340 --> 00:05:04,690
a hundred times longer than gzip so it's

130
00:05:04,690 --> 00:05:06,160
not meant to be streaming so when you

131
00:05:06,160 --> 00:05:07,450
start the server it's gonna have a cold

132
00:05:07,450 --> 00:05:09,730
cash when you're running this again and

133
00:05:09,730 --> 00:05:11,440
again it's going to start warming up the

134
00:05:11,440 --> 00:05:12,970
cash you know keeping all these assets

135
00:05:12,970 --> 00:05:14,290
in memory and a compressed State and

136
00:05:14,290 --> 00:05:16,510
eliminate all of that so let's say we

137
00:05:16,510 --> 00:05:18,820
clear the log the server is still

138
00:05:18,820 --> 00:05:22,030
running and we can go back caching is

139
00:05:22,030 --> 00:05:24,250
disabled you can see and run it again

140
00:05:24,250 --> 00:05:26,680
BAM how fast was that right so

141
00:05:26,680 --> 00:05:28,690
everything is now like you know 0 0 1

142
00:05:28,690 --> 00:05:32,440
millisecond and on the network it took a

143
00:05:32,440 --> 00:05:34,479
second so we're three times faster just

144
00:05:34,479 --> 00:05:36,220
eliminating all the latency that's what

145
00:05:36,220 --> 00:05:38,620
server push will do you get one shot of

146
00:05:38,620 --> 00:05:40,330
latency that's the minimal amount of

147
00:05:40,330 --> 00:05:41,320
latency that you're going to have to

148
00:05:41,320 --> 00:05:42,580
accept because that's just your network

149
00:05:42,580 --> 00:05:44,110
but everything else can be eliminated

150
00:05:44,110 --> 00:05:46,300
with HP server push rest concatenation

151
00:05:46,300 --> 00:05:48,970
cannot do this so all right that's

152
00:05:48,970 --> 00:05:50,470
pretty good result let's talk about how

153
00:05:50,470 --> 00:05:56,200
that actually works go back so our page

154
00:05:56,200 --> 00:05:57,850
load time is really a function of

155
00:05:57,850 --> 00:06:00,190
latency and bandwidth there's a it's

156
00:06:00,190 --> 00:06:01,570
called a bandwidth delay product if you

157
00:06:01,570 --> 00:06:02,919
wanna look this up you know basically

158
00:06:02,919 --> 00:06:04,180
the product of your data link capacity

159
00:06:04,180 --> 00:06:05,740
that's like your aggregate band was like

160
00:06:05,740 --> 00:06:07,990
a gigabit per second and your round trip

161
00:06:07,990 --> 00:06:09,940
time measured in seconds would be you

162
00:06:09,940 --> 00:06:11,440
know point three seconds from here to

163
00:06:11,440 --> 00:06:15,310
you know west coast of us this is called

164
00:06:15,310 --> 00:06:18,430
the long fast networks I'm not sure it's

165
00:06:18,430 --> 00:06:20,560
called 11 or elephant I like elephants

166
00:06:20,560 --> 00:06:22,440
so I'm going to call it elephants and

167
00:06:22,440 --> 00:06:24,669
this is a common case for most people

168
00:06:24,669 --> 00:06:25,720
around the world nowadays that you have

169
00:06:25,720 --> 00:06:26,770
a data center that's around the world

170
00:06:26,770 --> 00:06:28,030
and you yourself have a very

171
00:06:28,030 --> 00:06:30,010
high-powered mobile device and you're

172
00:06:30,010 --> 00:06:32,140
probably on a pretty speedy 4G

173
00:06:32,140 --> 00:06:34,990
connection or beyond going forward and

174
00:06:34,990 --> 00:06:37,270
we need to optimize the latency so how

175
00:06:37,270 --> 00:06:38,950
does a to do that we saw it basically

176
00:06:38,950 --> 00:06:40,700
cuts out your graph

177
00:06:40,700 --> 00:06:41,990
you know left-hand side loads in one

178
00:06:41,990 --> 00:06:44,090
second if you have a lot of latency take

179
00:06:44,090 --> 00:06:45,470
like an order of magnitude more than

180
00:06:45,470 --> 00:06:48,140
that just because requests induce and

181
00:06:48,140 --> 00:06:50,840
compound this latency so that's pretty

182
00:06:50,840 --> 00:06:52,460
sweet what else can we do to eliminate

183
00:06:52,460 --> 00:06:54,380
well the other half the product would be

184
00:06:54,380 --> 00:06:56,330
the bandwidth if you can if you can get

185
00:06:56,330 --> 00:06:58,010
free bandwidth from compression and this

186
00:06:58,010 --> 00:07:00,260
magical thing called cash digests that

187
00:07:00,260 --> 00:07:02,000
will help a lot so let's let's look at

188
00:07:02,000 --> 00:07:03,650
that so I mentioned that we doing this

189
00:07:03,650 --> 00:07:06,470
very fancy compression it introduces a

190
00:07:06,470 --> 00:07:08,480
massive load of you know computational

191
00:07:08,480 --> 00:07:11,240
demand on the server but you know but

192
00:07:11,240 --> 00:07:13,010
caching we can we can avoid you know any

193
00:07:13,010 --> 00:07:15,290
kind of performance impact and the two

194
00:07:15,290 --> 00:07:17,330
codecs that i'm using here zup flea or

195
00:07:17,330 --> 00:07:18,620
zip fly I don't know how it could

196
00:07:18,620 --> 00:07:21,260
pronounce it basically that's compatible

197
00:07:21,260 --> 00:07:22,460
with gzip so any browser that supports

198
00:07:22,460 --> 00:07:24,980
gzip it's going to support this slightly

199
00:07:24,980 --> 00:07:26,900
more compressed version of your output

200
00:07:26,900 --> 00:07:29,390
but if you're using let's say Firefox or

201
00:07:29,390 --> 00:07:31,970
Chrome you can support broadly and

202
00:07:31,970 --> 00:07:34,550
that's going to save significant amounts

203
00:07:34,550 --> 00:07:36,320
of bandwidth now it's only working on

204
00:07:36,320 --> 00:07:39,080
HTTPS if you hadn't if you notice that

205
00:07:39,080 --> 00:07:41,450
in the the demo data showed the HTTP one

206
00:07:41,450 --> 00:07:42,950
version was just you know playing static

207
00:07:42,950 --> 00:07:45,710
web server running on HTTP but the HTTP

208
00:07:45,710 --> 00:07:48,260
two one had to run on HTTPS and one of

209
00:07:48,260 --> 00:07:49,670
the troubles that I think a lot of

210
00:07:49,670 --> 00:07:51,110
developers are familiar with is setting

211
00:07:51,110 --> 00:07:52,460
up like certificates for localhost

212
00:07:52,460 --> 00:07:54,440
development getting the sign adding the

213
00:07:54,440 --> 00:07:56,360
exceptions to your browser to pain so

214
00:07:56,360 --> 00:07:57,950
I've kind of taken care of that it's

215
00:07:57,950 --> 00:07:59,810
when you run HP server the first time

216
00:07:59,810 --> 00:08:02,060
it'll register generator tificate hook

217
00:08:02,060 --> 00:08:03,620
it up to your keychain and your browser

218
00:08:03,620 --> 00:08:05,540
will just have a green secure website

219
00:08:05,540 --> 00:08:07,250
thing it's fantastic so even if you just

220
00:08:07,250 --> 00:08:08,780
use it for that you're gonna have a good

221
00:08:08,780 --> 00:08:12,830
time next we've got cash digests to save

222
00:08:12,830 --> 00:08:15,020
us then say for some bandwidth and this

223
00:08:15,020 --> 00:08:17,270
is huge and this is new to me until like

224
00:08:17,270 --> 00:08:19,370
a month ago I not a computer science

225
00:08:19,370 --> 00:08:22,220
type of person so I didn't know anything

226
00:08:22,220 --> 00:08:24,680
about bloom filters and I was like lord

227
00:08:24,680 --> 00:08:27,170
of the rings gollum coded bloom filters

228
00:08:27,170 --> 00:08:30,200
it's a thing right but basically right

229
00:08:30,200 --> 00:08:31,850
what we're doing is we're telling the

230
00:08:31,850 --> 00:08:33,500
server which files we've already got

231
00:08:33,500 --> 00:08:36,170
cached and we're basically hashing

232
00:08:36,170 --> 00:08:38,390
fingerprinting every file or just the

233
00:08:38,390 --> 00:08:40,520
URL taking a couple of bits from that

234
00:08:40,520 --> 00:08:42,110
sticking them all together into a little

235
00:08:42,110 --> 00:08:44,330
header and telling the server here this

236
00:08:44,330 --> 00:08:45,710
is these are the files we have anything

237
00:08:45,710 --> 00:08:47,300
y'all anything that matches that that

238
00:08:47,300 --> 00:08:48,500
you're trying to push me just don't push

239
00:08:48,500 --> 00:08:50,660
it so essentially we're skipping all of

240
00:08:50,660 --> 00:08:52,220
the unnecessary files that haven't

241
00:08:52,220 --> 00:08:53,630
changed since the last time I visited a

242
00:08:53,630 --> 00:08:54,529
page he

243
00:08:54,529 --> 00:08:56,389
savings because most of times not your

244
00:08:56,389 --> 00:08:58,670
entire app is changing tiny parts of

245
00:08:58,670 --> 00:09:00,949
your code base incrementally evolve but

246
00:09:00,949 --> 00:09:01,910
most of the libraries and frameworks

247
00:09:01,910 --> 00:09:04,759
they're not changing all the time so

248
00:09:04,759 --> 00:09:06,560
that's basically how it works that's

249
00:09:06,560 --> 00:09:08,689
what it's meant to do there's a speck

250
00:09:08,689 --> 00:09:10,999
pretty recent from this year that's

251
00:09:10,999 --> 00:09:15,319
doing this all over HTTP frames I'm

252
00:09:15,319 --> 00:09:17,120
using because if the browser knee

253
00:09:17,120 --> 00:09:18,529
support that natively I'm using a

254
00:09:18,529 --> 00:09:19,910
service worker for Chrome and Firefox

255
00:09:19,910 --> 00:09:22,249
and a cookie fallback so it works on

256
00:09:22,249 --> 00:09:24,139
every single browser right now which is

257
00:09:24,139 --> 00:09:25,519
pretty cool so we save a lot of

258
00:09:25,519 --> 00:09:26,809
bandwidth and we save a lot of latency

259
00:09:26,809 --> 00:09:27,860
whether i do because all these round

260
00:09:27,860 --> 00:09:31,029
trips are now eliminated so second tool

261
00:09:31,029 --> 00:09:34,249
that I've got for you is called unbundle

262
00:09:34,249 --> 00:09:36,199
and I'll show you a little demo of that

263
00:09:36,199 --> 00:09:38,089
as well this is going to help you with

264
00:09:38,089 --> 00:09:39,879
the front-end development side of things

265
00:09:39,879 --> 00:09:41,720
everyone's familiar with the JavaScript

266
00:09:41,720 --> 00:09:43,579
fatigue so let's let's set up a little

267
00:09:43,579 --> 00:09:46,490
imaginary tiny little hello world

268
00:09:46,490 --> 00:09:49,910
project so we know we want to use proper

269
00:09:49,910 --> 00:09:51,800
tools we've got react framework from NPM

270
00:09:51,800 --> 00:09:55,069
which is awesome and p.m. i mean i'm not

271
00:09:55,069 --> 00:09:57,379
really react whatever each their own and

272
00:09:57,379 --> 00:10:00,199
I've got a minimalist application

273
00:10:00,199 --> 00:10:03,500
javascript HTML and there we go so what

274
00:10:03,500 --> 00:10:04,730
do we normally do we set up a web pack

275
00:10:04,730 --> 00:10:07,040
build or a gulp thing or you know who

276
00:10:07,040 --> 00:10:08,559
knows what right it's a lot of work

277
00:10:08,559 --> 00:10:11,680
let's cut all that short and say

278
00:10:11,680 --> 00:10:15,439
unbundle and it's going to run but you

279
00:10:15,439 --> 00:10:16,850
know this this computer has about the

280
00:10:16,850 --> 00:10:18,649
power of most people's phones if you

281
00:10:18,649 --> 00:10:21,319
bought them this year but yet it's going

282
00:10:21,319 --> 00:10:23,540
to be pretty quick right the reason is

283
00:10:23,540 --> 00:10:25,100
that it's doing all this stuff in

284
00:10:25,100 --> 00:10:26,600
parallel so I've got two cores in here

285
00:10:26,600 --> 00:10:28,850
no to physical cores so he's going to

286
00:10:28,850 --> 00:10:30,649
run you know parallel builds on this and

287
00:10:30,649 --> 00:10:32,269
it's tracing all of the files that we

288
00:10:32,269 --> 00:10:34,459
have which is all mostly react obviously

289
00:10:34,459 --> 00:10:36,529
this is one one of my own files and

290
00:10:36,529 --> 00:10:39,379
probably 170 files from react it

291
00:10:39,379 --> 00:10:42,290
processed them all and then we run HTTP

292
00:10:42,290 --> 00:10:44,660
to server and we're going to host that

293
00:10:44,660 --> 00:10:47,929
website maybe not okay I gotta kill the

294
00:10:47,929 --> 00:10:52,600
I don't give me a second here we go okay

295
00:10:52,600 --> 00:10:56,230
port issues

296
00:10:56,240 --> 00:10:58,530
here we go so we're running our server

297
00:10:58,530 --> 00:11:01,620
now and serving the files that we just

298
00:11:01,620 --> 00:11:03,150
created that's the static files and

299
00:11:03,150 --> 00:11:04,680
because these commands have nothing

300
00:11:04,680 --> 00:11:06,030
inherently to each other but they just

301
00:11:06,030 --> 00:11:07,530
assume you know sensible defaults so

302
00:11:07,530 --> 00:11:09,540
they kind of work well together you

303
00:11:09,540 --> 00:11:11,070
could use either one without theater so

304
00:11:11,070 --> 00:11:12,870
let's clear our browser no tricks up our

305
00:11:12,870 --> 00:11:15,570
sleeves and see what happens if we load

306
00:11:15,570 --> 00:11:19,770
our app okay like I said the first time

307
00:11:19,770 --> 00:11:21,840
the caching meets the load okay well it

308
00:11:21,840 --> 00:11:23,700
worked so we've got our es6 app we've

309
00:11:23,700 --> 00:11:26,010
got node modules it's all working it's

310
00:11:26,010 --> 00:11:28,260
pretty sweet and if we look at the log

311
00:11:28,260 --> 00:11:30,480
we can see there's a lot going on here

312
00:11:30,480 --> 00:11:33,540
what is that right but really we're

313
00:11:33,540 --> 00:11:35,190
using push just like before with the

314
00:11:35,190 --> 00:11:38,700
static cold war demo here we've got one

315
00:11:38,700 --> 00:11:40,410
request coming in at the top this get

316
00:11:40,410 --> 00:11:42,120
for the homepage and then we're just

317
00:11:42,120 --> 00:11:45,060
going to push app GS and a lot of emoji

318
00:11:45,060 --> 00:11:46,410
that's kind of interesting we'll talk

319
00:11:46,410 --> 00:11:48,900
about that but a lot of these node

320
00:11:48,900 --> 00:11:49,800
modules is you're going to push

321
00:11:49,800 --> 00:11:51,510
individually rather than like a web pack

322
00:11:51,510 --> 00:11:53,430
bundle everything in one in one blob

323
00:11:53,430 --> 00:11:55,410
it's all happening individually and at

324
00:11:55,410 --> 00:11:56,430
the end here does a service worker

325
00:11:56,430 --> 00:11:58,020
that's got something to do with the cash

326
00:11:58,020 --> 00:12:00,660
digests so that's kind of sweet let's

327
00:12:00,660 --> 00:12:09,839
let's jump back into the slides so this

328
00:12:09,839 --> 00:12:12,000
tool is all based on you know really

329
00:12:12,000 --> 00:12:14,970
incredible technology browser 54

330
00:12:14,970 --> 00:12:17,339
dependency tracing battle for doing a

331
00:12:17,339 --> 00:12:19,020
lot of the processing you know mapping

332
00:12:19,020 --> 00:12:21,120
the file paths and then finally using

333
00:12:21,120 --> 00:12:23,360
system jas behind the scenes to

334
00:12:23,360 --> 00:12:25,020
asynchronously load things in the

335
00:12:25,020 --> 00:12:27,120
browser you're not actually interacting

336
00:12:27,120 --> 00:12:28,860
with these tools any more reps tracting

337
00:12:28,860 --> 00:12:29,880
over them and building the next

338
00:12:29,880 --> 00:12:31,380
generation of tools for frontal

339
00:12:31,380 --> 00:12:34,589
development it's got a lot of stuff

340
00:12:34,589 --> 00:12:36,780
built in batteries included it's

341
00:12:36,780 --> 00:12:38,430
minified you got your source maps for

342
00:12:38,430 --> 00:12:40,020
your development and you've got all this

343
00:12:40,020 --> 00:12:42,180
latest syntax available for yourself to

344
00:12:42,180 --> 00:12:44,490
use normally this takes a lot of time I

345
00:12:44,490 --> 00:12:45,720
know I took a lot of time to learn all

346
00:12:45,720 --> 00:12:47,430
these things and set it all up now it's

347
00:12:47,430 --> 00:12:50,130
very easy like I said it's very it's

348
00:12:50,130 --> 00:12:51,510
going to be very fast especially if you

349
00:12:51,510 --> 00:12:53,190
like quad core or going forward or

350
00:12:53,190 --> 00:12:54,450
you're running this on a build server

351
00:12:54,450 --> 00:12:56,010
with like I mean it maybe have like 32

352
00:12:56,010 --> 00:12:57,900
cores on your bills or your builds going

353
00:12:57,900 --> 00:12:59,520
to be lightning fast it's got a watch

354
00:12:59,520 --> 00:13:00,690
mode as well for incremental build

355
00:13:00,690 --> 00:13:04,380
sticks milliseconds right happening in

356
00:13:04,380 --> 00:13:07,150
parallel it's pretty sweet all right

357
00:13:07,150 --> 00:13:09,230
like I said we're using service works

358
00:13:09,230 --> 00:13:11,540
using service workers that means it's

359
00:13:11,540 --> 00:13:13,340
got some little JavaScript running in

360
00:13:13,340 --> 00:13:15,140
the browser right it's like having a CDN

361
00:13:15,140 --> 00:13:17,810
on the clients machine the same it's

362
00:13:17,810 --> 00:13:19,430
using the cache API which is kind of a

363
00:13:19,430 --> 00:13:21,410
misnomer like it the more I started

364
00:13:21,410 --> 00:13:22,610
using it i'm more i figured out that

365
00:13:22,610 --> 00:13:25,340
this isn't really for caching it's kind

366
00:13:25,340 --> 00:13:28,790
of just a key value storage for requests

367
00:13:28,790 --> 00:13:30,410
and responses doesn't have any kind of

368
00:13:30,410 --> 00:13:31,970
complicated and if you have to have to

369
00:13:31,970 --> 00:13:34,610
implement all of the HTTP caching logic

370
00:13:34,610 --> 00:13:36,740
from scratch which isn't something

371
00:13:36,740 --> 00:13:39,170
everyone should be doing I feel so you

372
00:13:39,170 --> 00:13:40,610
can rely on something like that that's

373
00:13:40,610 --> 00:13:43,280
been that's already prepared to take

374
00:13:43,280 --> 00:13:45,470
care of that without errors now

375
00:13:45,470 --> 00:13:47,030
cache-control immutable is another

376
00:13:47,030 --> 00:13:48,610
recent spec that came out this year and

377
00:13:48,610 --> 00:13:51,170
it's going to tell the browser to never

378
00:13:51,170 --> 00:13:53,570
invalidate an asset that's kind of cool

379
00:13:53,570 --> 00:13:55,190
right if you have a asset that you

380
00:13:55,190 --> 00:13:56,600
guaranteed to never change like your

381
00:13:56,600 --> 00:13:58,760
file revving it you should your browser

382
00:13:58,760 --> 00:14:00,320
should isn't even going to check if it's

383
00:14:00,320 --> 00:14:02,990
you know out expired until that max age

384
00:14:02,990 --> 00:14:05,930
has a past but if you set like a file

385
00:14:05,930 --> 00:14:09,650
rift asset to expire in 10 years your

386
00:14:09,650 --> 00:14:10,940
browser is never going to be even doing

387
00:14:10,940 --> 00:14:13,310
round trip at all you can guarantee that

388
00:14:13,310 --> 00:14:14,630
you can rely on that and your servers

389
00:14:14,630 --> 00:14:16,310
wrkn is going to read it from cache put

390
00:14:16,310 --> 00:14:17,630
it in a digest your server is never

391
00:14:17,630 --> 00:14:19,490
going to push that file ever again so

392
00:14:19,490 --> 00:14:22,400
you save huge bandwidth of course you

393
00:14:22,400 --> 00:14:24,050
have to be careful with that so I'm only

394
00:14:24,050 --> 00:14:26,690
applying as the reft files now those

395
00:14:26,690 --> 00:14:29,180
emoji and the file names what's up with

396
00:14:29,180 --> 00:14:31,220
that well this is my solution to cache

397
00:14:31,220 --> 00:14:32,360
invalidation which is the hardest

398
00:14:32,360 --> 00:14:35,510
problem in computer science and I think

399
00:14:35,510 --> 00:14:36,980
I'm owed your the solution to most hard

400
00:14:36,980 --> 00:14:40,760
problems i'm using x.x hash 64 which is

401
00:14:40,760 --> 00:14:42,460
really really fast fingerprinting

402
00:14:42,460 --> 00:14:44,990
algorithm and then encoding that in

403
00:14:44,990 --> 00:14:46,970
emoji right because it's just bits and

404
00:14:46,970 --> 00:14:49,820
why not you know hex is so lame so you

405
00:14:49,820 --> 00:14:51,440
stick an emotion there we need to change

406
00:14:51,440 --> 00:14:52,640
your file is going to come up with the

407
00:14:52,640 --> 00:14:55,280
new emoji and to the browser it's all

408
00:14:55,280 --> 00:14:56,840
transparent this works you know I'm

409
00:14:56,840 --> 00:14:57,920
surprised there wasn't actually any

410
00:14:57,920 --> 00:15:00,280
serious issues with this many tools

411
00:15:00,280 --> 00:15:02,240
showed us to some people and they liked

412
00:15:02,240 --> 00:15:06,350
it as well so that's my two projects and

413
00:15:06,350 --> 00:15:08,240
I hope you enjoy them I enjoyed working

414
00:15:08,240 --> 00:15:09,800
on them and I think this is the future

415
00:15:09,800 --> 00:15:11,790
thank you

