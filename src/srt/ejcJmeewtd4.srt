1
00:00:15,250 --> 00:00:18,400

my name is Kevin markman and I come to

2
00:00:18,400 --> 00:00:19,660
you from New York to talk a little bit

3
00:00:19,660 --> 00:00:22,779
about taking web apps offline and what

4
00:00:22,779 --> 00:00:24,790
it takes to do that and how you can do

5
00:00:24,790 --> 00:00:27,099
that because realistically your app

6
00:00:27,099 --> 00:00:29,500
isn't there for your users unless it's

7
00:00:29,500 --> 00:00:32,410
available to them all the time so first

8
00:00:32,410 --> 00:00:34,449
I want to tell you a little bit about me

9
00:00:34,449 --> 00:00:36,610
and my my background I come from a

10
00:00:36,610 --> 00:00:40,360
history of C++ desktop applications and

11
00:00:40,360 --> 00:00:42,370
they had the exact opposite problem so

12
00:00:42,370 --> 00:00:43,809
the issue they face is that they didn't

13
00:00:43,809 --> 00:00:45,699
get any of the advantages that the cloud

14
00:00:45,699 --> 00:00:48,520
brings to to us to us javascript HTML

15
00:00:48,520 --> 00:00:53,079
CSS people and that is the update update

16
00:00:53,079 --> 00:00:55,930
cycles for years a product that i worked

17
00:00:55,930 --> 00:00:58,780
on three years ago still isn't launched

18
00:00:58,780 --> 00:01:01,180
I've launched more and the in the last

19
00:01:01,180 --> 00:01:03,160
month then I've launched from my

20
00:01:03,160 --> 00:01:05,199
previous job which is which is kind of

21
00:01:05,199 --> 00:01:08,080
crazy so at the same time there are

22
00:01:08,080 --> 00:01:10,590
things that desktop apps do well that

23
00:01:10,590 --> 00:01:13,780
web apps suffer with and one of those

24
00:01:13,780 --> 00:01:16,840
things is offline and Doc's offline was

25
00:01:16,840 --> 00:01:19,149
a huge effort and it really pushed the

26
00:01:19,149 --> 00:01:21,520
boundaries of what's possible and by

27
00:01:21,520 --> 00:01:23,890
taking this step forward I think what

28
00:01:23,890 --> 00:01:25,450
we're really showing the community at

29
00:01:25,450 --> 00:01:27,729
large is that it can be done it can be

30
00:01:27,729 --> 00:01:31,840
done for you so first what stocks who

31
00:01:31,840 --> 00:01:33,640
here has used google documents by a show

32
00:01:33,640 --> 00:01:37,060
of hands that is fantastic that's pretty

33
00:01:37,060 --> 00:01:40,420
much all of you so i should be able to

34
00:01:40,420 --> 00:01:43,030
skip through this quick sesh I through

35
00:01:43,030 --> 00:01:44,979
this quickly but i do want to give a

36
00:01:44,979 --> 00:01:48,579
high-level overview so what Google Docs

37
00:01:48,579 --> 00:01:49,990
used to be a couple of years ago is

38
00:01:49,990 --> 00:01:51,640
content editable which is basically a

39
00:01:51,640 --> 00:01:54,700
text area into which you type it

40
00:01:54,700 --> 00:01:57,880
transferred it puts it all into HTML it

41
00:01:57,880 --> 00:01:59,439
would send it up to the server the

42
00:01:59,439 --> 00:02:01,659
server would store it as HTML and that

43
00:02:01,659 --> 00:02:03,970
was bad that was bad because the model

44
00:02:03,970 --> 00:02:05,290
the view the controller they're they're

45
00:02:05,290 --> 00:02:07,540
all the same thing basically you can't

46
00:02:07,540 --> 00:02:09,160
have your model and your and your view

47
00:02:09,160 --> 00:02:13,060
both be HTML so what documents is now is

48
00:02:13,060 --> 00:02:15,820
it's a full fledge word processor what

49
00:02:15,820 --> 00:02:17,170
you see on the screen was placed there

50
00:02:17,170 --> 00:02:19,510
explicitly you can have tab stops for

51
00:02:19,510 --> 00:02:22,150
example in HTML we placed that text

52
00:02:22,150 --> 00:02:24,069
explicitly the cursor for example is

53
00:02:24,069 --> 00:02:27,550
just a 1 pixel wide div which blinks on

54
00:02:27,550 --> 00:02:28,810
a timeout

55
00:02:28,810 --> 00:02:31,000
timer right so when you click back when

56
00:02:31,000 --> 00:02:32,349
you click into the document it

57
00:02:32,349 --> 00:02:34,630
explicitly positions that div in that

58
00:02:34,630 --> 00:02:36,430
location everything is done in

59
00:02:36,430 --> 00:02:41,650
JavaScript so that's really cool and

60
00:02:41,650 --> 00:02:45,010
that really enables offline web apps the

61
00:02:45,010 --> 00:02:46,630
number one thing that you need is you

62
00:02:46,630 --> 00:02:48,220
need everything to be done on the client

63
00:02:48,220 --> 00:02:50,920
if your app depends on constant server

64
00:02:50,920 --> 00:02:52,660
communication to get all of its

65
00:02:52,660 --> 00:02:55,060
information then you're you're gonna

66
00:02:55,060 --> 00:02:57,760
you're going to suffer so we start off

67
00:02:57,760 --> 00:02:58,840
in the right place but there were still

68
00:02:58,840 --> 00:03:03,420
a number of things that we didn't do so

69
00:03:03,420 --> 00:03:07,000
what we do what used to happen two years

70
00:03:07,000 --> 00:03:09,190
ago Doc's would connect to a server and

71
00:03:09,190 --> 00:03:11,860
pull down a huge chunk of content and

72
00:03:11,860 --> 00:03:16,180
that includes the model the application

73
00:03:16,180 --> 00:03:18,580
itself meaning the the JavaScript the

74
00:03:18,580 --> 00:03:22,090
CSS etc and along with all the

75
00:03:22,090 --> 00:03:23,920
configuration options and that

76
00:03:23,920 --> 00:03:26,560
completely breaks MVC we're bundling it

77
00:03:26,560 --> 00:03:28,000
all together so why do we do it for

78
00:03:28,000 --> 00:03:31,450
performance but obviously or as you'll

79
00:03:31,450 --> 00:03:33,489
see will we will have suffered because

80
00:03:33,489 --> 00:03:36,430
of this but what's really nice is that

81
00:03:36,430 --> 00:03:39,310
after this one chunk there's only little

82
00:03:39,310 --> 00:03:40,660
things being sent back and forth to the

83
00:03:40,660 --> 00:03:42,640
server the client really does the heavy

84
00:03:42,640 --> 00:03:45,700
the heavy lifting here so that means

85
00:03:45,700 --> 00:03:46,780
that if you have a really laggy

86
00:03:46,780 --> 00:03:48,250
connection it doesn't matter you can

87
00:03:48,250 --> 00:03:50,500
continue typing away and after that

88
00:03:50,500 --> 00:03:52,510
connection is restored it will all get

89
00:03:52,510 --> 00:03:54,190
sensitive server the server's really

90
00:03:54,190 --> 00:03:56,500
just the persistence mechanism and the

91
00:03:56,500 --> 00:04:00,100
client is the client is there for

92
00:04:00,100 --> 00:04:03,730
everything that you do that really

93
00:04:03,730 --> 00:04:07,150
enabled us to to take off line to next

94
00:04:07,150 --> 00:04:08,560
step in the sense that we already had

95
00:04:08,560 --> 00:04:10,000
this infrastructure from our real-time

96
00:04:10,000 --> 00:04:16,000
collaboration built into our app so what

97
00:04:16,000 --> 00:04:20,039
is Doc's like now as you see i make no

98
00:04:20,039 --> 00:04:22,720
there's no separation between server and

99
00:04:22,720 --> 00:04:24,880
storage to us server and storage are

100
00:04:24,880 --> 00:04:26,979
sort of the same thing when we pull the

101
00:04:26,979 --> 00:04:30,940
document from from storage or server it

102
00:04:30,940 --> 00:04:33,280
doesn't matter so let's walk you through

103
00:04:33,280 --> 00:04:35,860
at a high level what happens so first we

104
00:04:35,860 --> 00:04:37,930
have this happy user and he types in

105
00:04:37,930 --> 00:04:40,750
Doc's like google com he types in a

106
00:04:40,750 --> 00:04:42,090
specific a

107
00:04:42,090 --> 00:04:46,050
cific document ID either by bookmark or

108
00:04:46,050 --> 00:04:50,220
using using the drive launcher and from

109
00:04:50,220 --> 00:04:52,620
here chrome triggers the fallback

110
00:04:52,620 --> 00:04:53,940
application because we don't have a

111
00:04:53,940 --> 00:04:55,110
network connection let's assume we're

112
00:04:55,110 --> 00:04:56,880
offline now the online flow is largely

113
00:04:56,880 --> 00:05:01,650
unaffected the fallback application

114
00:05:01,650 --> 00:05:04,350
takes them to a place which determines

115
00:05:04,350 --> 00:05:06,419
which binary to run and we'll jump into

116
00:05:06,419 --> 00:05:08,760
this in a second determines which binary

117
00:05:08,760 --> 00:05:11,160
to run which java and c says to pull in

118
00:05:11,160 --> 00:05:12,900
determines of the dock is available and

119
00:05:12,900 --> 00:05:15,060
then sends the user to the docks

120
00:05:15,060 --> 00:05:20,610
themselves to an offline specific binary

121
00:05:20,610 --> 00:05:23,880
that offline binary then reads the

122
00:05:23,880 --> 00:05:25,889
doctrine user data from the database and

123
00:05:25,889 --> 00:05:27,840
uses that info to load the offline

124
00:05:27,840 --> 00:05:34,229
document we use we then use browser we

125
00:05:34,229 --> 00:05:36,000
then use browser history AP is to

126
00:05:36,000 --> 00:05:38,010
rewrite the URL to make it look like you

127
00:05:38,010 --> 00:05:39,960
were the online binary so why is that

128
00:05:39,960 --> 00:05:41,550
important we don't want to surface to

129
00:05:41,550 --> 00:05:42,810
the user that anything is different

130
00:05:42,810 --> 00:05:43,910
everything should look identical

131
00:05:43,910 --> 00:05:46,740
including the URL as a matter of fact if

132
00:05:46,740 --> 00:05:48,389
you hit refresh it uses the current URL

133
00:05:48,389 --> 00:05:51,000
in the URL bar so it will actually go

134
00:05:51,000 --> 00:05:53,010
through this entire flow of hitting the

135
00:05:53,010 --> 00:05:55,020
fallback application figuring out which

136
00:05:55,020 --> 00:05:56,970
binary to use ensuring that the document

137
00:05:56,970 --> 00:06:00,150
is available offline etc if if you don't

138
00:06:00,150 --> 00:06:03,419
have a connection so as the user

139
00:06:03,419 --> 00:06:04,950
interacts with their document as they're

140
00:06:04,950 --> 00:06:07,320
typing stuff in it gets saved it gets

141
00:06:07,320 --> 00:06:10,710
saved both locally as you see in uh in

142
00:06:10,710 --> 00:06:12,990
the first part and then down to the

143
00:06:12,990 --> 00:06:15,300
server what we store locally is pretty

144
00:06:15,300 --> 00:06:16,770
much identical to what we sent to the

145
00:06:16,770 --> 00:06:19,349
server and that's done so that as we

146
00:06:19,349 --> 00:06:21,780
read it back it's exactly what the

147
00:06:21,780 --> 00:06:24,120
server is sending to us so this works

148
00:06:24,120 --> 00:06:27,870
really well except this only talks about

149
00:06:27,870 --> 00:06:30,479
one document so what can we do to really

150
00:06:30,479 --> 00:06:32,370
push this out because we have lots of

151
00:06:32,370 --> 00:06:36,060
documents that are offline we have

152
00:06:36,060 --> 00:06:38,700
what's known as a shared worker this is

153
00:06:38,700 --> 00:06:40,260
actually a JavaScript shared worker

154
00:06:40,260 --> 00:06:44,190
which which we synchronize all documents

155
00:06:44,190 --> 00:06:45,750
with in the background so there's a

156
00:06:45,750 --> 00:06:47,849
locking mechanism which I won't go into

157
00:06:47,849 --> 00:06:49,889
in this talk it's an entire talk in

158
00:06:49,889 --> 00:06:53,310
itself to ensure that nothing gets

159
00:06:53,310 --> 00:06:55,770
written to storage by multiple by

160
00:06:55,770 --> 00:06:57,720
multiple tabs at the same time but every

161
00:06:57,720 --> 00:07:00,150
single docs tab that you have open has a

162
00:07:00,150 --> 00:07:02,479
pointer to the shared worker so the way

163
00:07:02,479 --> 00:07:05,430
javascript shared workers work as soon

164
00:07:05,430 --> 00:07:07,229
as you close all tabs that points them

165
00:07:07,229 --> 00:07:11,310
the shared worker dies so we also do one

166
00:07:11,310 --> 00:07:13,800
last bit of magic which is a background

167
00:07:13,800 --> 00:07:16,909
page this background page is a

168
00:07:16,909 --> 00:07:18,930
permission that's granted to us through

169
00:07:18,930 --> 00:07:22,289
a chrome app which is why we insured or

170
00:07:22,289 --> 00:07:25,710
we force you to to install the drive

171
00:07:25,710 --> 00:07:28,830
chrome app before before you can use

172
00:07:28,830 --> 00:07:30,659
offline and it's really there for that

173
00:07:30,659 --> 00:07:32,520
permission because if you're typing

174
00:07:32,520 --> 00:07:36,720
offline and you close your tab and you

175
00:07:36,720 --> 00:07:37,889
have chrome open or you have your

176
00:07:37,889 --> 00:07:39,449
computer on and a couple of days later

177
00:07:39,449 --> 00:07:42,120
you still haven't gone to Doc's you

178
00:07:42,120 --> 00:07:44,250
really want that content available it'd

179
00:07:44,250 --> 00:07:47,639
be crazy if it weren't there so let's

180
00:07:47,639 --> 00:07:49,139
drill down a little bit I want to talk

181
00:07:49,139 --> 00:07:54,900
about two things which were which were I

182
00:07:54,900 --> 00:07:57,509
think the really novel parts about Doc's

183
00:07:57,509 --> 00:08:02,039
offline so the first one is how we

184
00:08:02,039 --> 00:08:03,539
manage loading so I talked about

185
00:08:03,539 --> 00:08:05,039
choosing binaries the fallback

186
00:08:05,039 --> 00:08:07,680
application what does that mean and the

187
00:08:07,680 --> 00:08:09,719
second part is matching static data and

188
00:08:09,719 --> 00:08:12,960
these two things really came up as we

189
00:08:12,960 --> 00:08:14,759
were developing we didn't we didn't

190
00:08:14,759 --> 00:08:16,229
envision them beforehand especially the

191
00:08:16,229 --> 00:08:17,819
matching static data and now that's a

192
00:08:17,819 --> 00:08:19,229
really really interesting one so I'm

193
00:08:19,229 --> 00:08:21,690
really curious too I'm gonna ask you

194
00:08:21,690 --> 00:08:25,930
guys a couple questions there as well so

195
00:08:25,940 --> 00:08:28,380
first we're going to talk about managing

196
00:08:28,380 --> 00:08:31,469
offline loading I first want to talk

197
00:08:31,469 --> 00:08:33,360
about the application cache who here has

198
00:08:33,360 --> 00:08:35,190
used an app cache in their in their

199
00:08:35,190 --> 00:08:38,490
applications awesome great so I'm going

200
00:08:38,490 --> 00:08:40,709
to go over this really quickly basically

201
00:08:40,709 --> 00:08:42,479
an app cache allows you to store static

202
00:08:42,479 --> 00:08:44,850
data on disk you reference it through

203
00:08:44,850 --> 00:08:47,850
and through the HTML tag you say you say

204
00:08:47,850 --> 00:08:50,880
the man the app cache manifest points to

205
00:08:50,880 --> 00:08:53,730
this file it's just a blob that looks

206
00:08:53,730 --> 00:08:55,620
like this it has an explicit section

207
00:08:55,620 --> 00:08:57,529
Network section and fall back section

208
00:08:57,529 --> 00:09:00,390
explicit section says if I hit this URL

209
00:09:00,390 --> 00:09:02,760
always use what I have available locally

210
00:09:02,760 --> 00:09:05,820
network says if I hit this URL always go

211
00:09:05,820 --> 00:09:07,740
to the network and the fallback says if

212
00:09:07,740 --> 00:09:09,209
I don't have

213
00:09:09,209 --> 00:09:11,550
a connection available then fall back to

214
00:09:11,550 --> 00:09:20,490
this so so what was the difficulty with

215
00:09:20,490 --> 00:09:24,089
Doc's one of the things that is unique

216
00:09:24,089 --> 00:09:26,429
about Doc's is we don't have just one

217
00:09:26,429 --> 00:09:29,850
binary we have several binaries so for

218
00:09:29,850 --> 00:09:31,949
example we have apps for domain and

219
00:09:31,949 --> 00:09:33,990
people can choose to enable or disable

220
00:09:33,990 --> 00:09:36,899
experimental features that leads to

221
00:09:36,899 --> 00:09:38,429
different binaries but we can't

222
00:09:38,429 --> 00:09:40,589
determine that from the document URL so

223
00:09:40,589 --> 00:09:42,899
as the user types in the URL hit center

224
00:09:42,899 --> 00:09:44,879
they're offline we have to pick the

225
00:09:44,879 --> 00:09:47,399
binary based off that app cache does not

226
00:09:47,399 --> 00:09:48,899
provide us a way to do that there's no

227
00:09:48,899 --> 00:09:51,029
code that that can run there's not even

228
00:09:51,029 --> 00:09:53,129
regular Express regular expression

229
00:09:53,129 --> 00:09:55,649
matching in the explicit explicit cache

230
00:09:55,649 --> 00:09:59,759
entry so instead M excuse me instead

231
00:09:59,759 --> 00:10:01,980
what we have to do is we have a fallback

232
00:10:01,980 --> 00:10:04,949
application so this syntax right at the

233
00:10:04,949 --> 00:10:07,019
bottom says that if the user goes to

234
00:10:07,019 --> 00:10:09,059
anywhere on docstoc google com so doc

235
00:10:09,059 --> 00:10:11,009
cycle combat blah it goes to the

236
00:10:11,009 --> 00:10:13,050
fallback location instead which is also

237
00:10:13,050 --> 00:10:16,170
an explicit cache entry so let's

238
00:10:16,170 --> 00:10:17,670
actually step through an example of this

239
00:10:17,670 --> 00:10:20,850
so the user put some puts in the URL and

240
00:10:20,850 --> 00:10:23,249
or clicks a link to it whichever way

241
00:10:23,249 --> 00:10:27,749
they get it the application at chrome

242
00:10:27,749 --> 00:10:28,679
decides that there is no network

243
00:10:28,679 --> 00:10:30,420
available or the server responds with a

244
00:10:30,420 --> 00:10:33,720
400 whatever forces it and it says hey

245
00:10:33,720 --> 00:10:35,699
look there's a fallback location for

246
00:10:35,699 --> 00:10:37,949
this so from there it forwards to the

247
00:10:37,949 --> 00:10:40,679
fallback location the fallback location

248
00:10:40,679 --> 00:10:42,689
takes a look at the URL which is in the

249
00:10:42,689 --> 00:10:44,790
URL bar and it tries to interpret a few

250
00:10:44,790 --> 00:10:46,649
things what does this point to is the

251
00:10:46,649 --> 00:10:48,299
point to a document yes it's pointing to

252
00:10:48,299 --> 00:10:49,470
a document does the user have

253
00:10:49,470 --> 00:10:52,350
permissions for it uh what kind of

254
00:10:52,350 --> 00:10:54,899
binary do we need for it etc it's the

255
00:10:54,899 --> 00:10:55,980
one that actually does all the

256
00:10:55,980 --> 00:10:58,860
processing by looking at the URL and and

257
00:10:58,860 --> 00:11:01,139
making decisions from there and that's

258
00:11:01,139 --> 00:11:04,129
the way that we can actually intercept

259
00:11:04,129 --> 00:11:06,799
intercept it if those aren't available

260
00:11:06,799 --> 00:11:09,420
if they answer those are no you don't

261
00:11:09,420 --> 00:11:11,220
have the binary or the user doesn't have

262
00:11:11,220 --> 00:11:14,579
permissions it blows up if you do then

263
00:11:14,579 --> 00:11:17,189
we pick the binary and we forward the

264
00:11:17,189 --> 00:11:20,610
user there but there's a catch you can't

265
00:11:20,610 --> 00:11:23,010
there's no way to really communicate

266
00:11:23,010 --> 00:11:27,090
with the binary so if you have an

267
00:11:27,090 --> 00:11:28,830
application cache and you have an

268
00:11:28,830 --> 00:11:30,660
explicit you have an explicit cash there

269
00:11:30,660 --> 00:11:32,610
everything including query params have

270
00:11:32,610 --> 00:11:35,670
to match exactly to hit it except

271
00:11:35,670 --> 00:11:38,910
hashtags so hashes allow you to add

272
00:11:38,910 --> 00:11:41,820
information after a URL it will still

273
00:11:41,820 --> 00:11:44,670
hit the correct app cache manifest if

274
00:11:44,670 --> 00:11:46,170
it's there before the hashtag and

275
00:11:46,170 --> 00:11:48,960
everything afterward is ignored so we

276
00:11:48,960 --> 00:11:51,180
encode a bunch of stuff after that

277
00:11:51,180 --> 00:11:54,000
hashtag to relay that information from

278
00:11:54,000 --> 00:11:57,360
the fallback application to to the

279
00:11:57,360 --> 00:12:02,010
editor itself so that way we can we can

280
00:12:02,010 --> 00:12:03,330
encode the things that are on the

281
00:12:03,330 --> 00:12:05,430
landing page of the editor which weren't

282
00:12:05,430 --> 00:12:07,710
there which are there on the online flow

283
00:12:07,710 --> 00:12:10,110
but we can't get at immediately so

284
00:12:10,110 --> 00:12:11,490
another thing that we noticed for

285
00:12:11,490 --> 00:12:15,210
example is that it's slow to read we use

286
00:12:15,210 --> 00:12:17,550
index DB its load to read index DB while

287
00:12:17,550 --> 00:12:19,110
things are loading because the async

288
00:12:19,110 --> 00:12:21,090
callbacks come back asynchronously at a

289
00:12:21,090 --> 00:12:23,580
time and what you can't determine so if

290
00:12:23,580 --> 00:12:26,040
a large JavaScript binary came in in

291
00:12:26,040 --> 00:12:28,440
between it takes forever to cut to get

292
00:12:28,440 --> 00:12:29,940
the call back and you can't have that

293
00:12:29,940 --> 00:12:34,650
you really want to snap you load so from

294
00:12:34,650 --> 00:12:36,630
there we parse the URL we extract out

295
00:12:36,630 --> 00:12:38,160
the doc idea and whatever other things

296
00:12:38,160 --> 00:12:40,470
are in the hashtag and then we rewrite

297
00:12:40,470 --> 00:12:46,210
it using the browser html5 history API

298
00:12:46,220 --> 00:12:50,760
and that's basically our initial load

299
00:12:50,760 --> 00:12:54,450
flow so that worked really well except

300
00:12:54,450 --> 00:12:57,030
we bumped into this issue and we really

301
00:12:57,030 --> 00:12:58,820
we really only came up on it

302
00:12:58,820 --> 00:13:01,290
infrequently but it was affecting more

303
00:13:01,290 --> 00:13:02,610
and more users and we couldn't really

304
00:13:02,610 --> 00:13:06,900
figure out what was going on so CSS and

305
00:13:06,900 --> 00:13:08,550
JS bundles have to match the landing

306
00:13:08,550 --> 00:13:10,200
page landing page here is just the HTML

307
00:13:10,200 --> 00:13:13,170
page that's served so how does this come

308
00:13:13,170 --> 00:13:15,480
up in practice same buddy have have an

309
00:13:15,480 --> 00:13:17,940
idea of when the the JavaScript in the

310
00:13:17,940 --> 00:13:24,640
HTML page wouldn't match so

311
00:13:24,640 --> 00:13:30,190
this comes up so first let me let me

312
00:13:30,190 --> 00:13:32,050
tell you why they have to match so our

313
00:13:32,050 --> 00:13:34,780
HTML landing page actually points to a

314
00:13:34,780 --> 00:13:37,120
javascript binary that has a hash tag

315
00:13:37,120 --> 00:13:39,370
attached to it so for example we have

316
00:13:39,370 --> 00:13:41,530
the HTML page refer to my javascript

317
00:13:41,530 --> 00:13:45,310
binary 1 2 3 and that ensures that the

318
00:13:45,310 --> 00:13:47,290
api's that are used between them are

319
00:13:47,290 --> 00:13:51,250
identical so why is this a problem so

320
00:13:51,250 --> 00:13:52,870
let's actually step through this and try

321
00:13:52,870 --> 00:13:55,660
to see when this happens so there's a

322
00:13:55,660 --> 00:13:57,370
level of indirection that's added by the

323
00:13:57,370 --> 00:14:01,150
app cache so the user requests the app

324
00:14:01,150 --> 00:14:04,090
cache manifest from a given machine from

325
00:14:04,090 --> 00:14:07,180
machine a and that app cache manifest

326
00:14:07,180 --> 00:14:11,860
says ok so your HDL page is / page for

327
00:14:11,860 --> 00:14:15,910
example or / edit for documents and here

328
00:14:15,910 --> 00:14:19,390
is your JavaScript binary etc that's

329
00:14:19,390 --> 00:14:21,280
fine the users happy everything's good

330
00:14:21,280 --> 00:14:23,380
and then the user goes to actually fetch

331
00:14:23,380 --> 00:14:26,290
that so first they go to fetch the the

332
00:14:26,290 --> 00:14:28,450
hash static content so they go and fetch

333
00:14:28,450 --> 00:14:30,550
my JavaScript binary one two three

334
00:14:30,550 --> 00:14:33,790
perfect not a problem and then they go

335
00:14:33,790 --> 00:14:37,000
to fetch they go to fetch the HTML

336
00:14:37,000 --> 00:14:38,560
landing page and now they hit a

337
00:14:38,560 --> 00:14:41,020
different machine that machine could be

338
00:14:41,020 --> 00:14:43,630
on a different a different schedule so

339
00:14:43,630 --> 00:14:45,370
for example as we're rolling out new

340
00:14:45,370 --> 00:14:48,670
versions of docs this probably won't

341
00:14:48,670 --> 00:14:50,080
come as a surprise to you guys but we

342
00:14:50,080 --> 00:14:51,970
have more than one machine running

343
00:14:51,970 --> 00:14:55,330
Google Docs so as we roll as we roll out

344
00:14:55,330 --> 00:14:58,000
new versions not all machines are on the

345
00:14:58,000 --> 00:15:00,520
same version and that's exactly what's

346
00:15:00,520 --> 00:15:02,620
happening here when we hit when we hit

347
00:15:02,620 --> 00:15:04,780
machine be to actually retrieve the HTML

348
00:15:04,780 --> 00:15:07,290
page it points to my JavaScript binary

349
00:15:07,290 --> 00:15:11,110
456 the worst part about this is that

350
00:15:11,110 --> 00:15:14,650
there's no mechanism to stop this the

351
00:15:14,650 --> 00:15:16,510
the server will order have to return to

352
00:15:16,510 --> 00:15:18,940
hundreds for all of this which from its

353
00:15:18,940 --> 00:15:20,020
point of view it started everything

354
00:15:20,020 --> 00:15:23,290
correctly the browser will see

355
00:15:23,290 --> 00:15:25,450
everything returned properly so it says

356
00:15:25,450 --> 00:15:27,850
my app cache is up-to-date it won't

357
00:15:27,850 --> 00:15:29,740
retrieve a new app cache until there's a

358
00:15:29,740 --> 00:15:31,450
new push so that could be you know a

359
00:15:31,450 --> 00:15:34,810
week so that user won't be able to use

360
00:15:34,810 --> 00:15:37,900
their offline application for that week

361
00:15:37,900 --> 00:15:38,620
because

362
00:15:38,620 --> 00:15:39,850
as soon as they get to the landing page

363
00:15:39,850 --> 00:15:42,220
it will point to a JavaScript binary

364
00:15:42,220 --> 00:15:44,410
which doesn't exist offline because

365
00:15:44,410 --> 00:15:45,670
they're pointing to one two three and

366
00:15:45,670 --> 00:15:49,420
they only have four five six offline so

367
00:15:49,420 --> 00:15:51,970
they explode and exploding is a problem

368
00:15:51,970 --> 00:15:54,930
so there are actually a few solutions

369
00:15:54,930 --> 00:15:57,940
that are possible here does anybody have

370
00:15:57,940 --> 00:15:59,230
any ideas send really bumped into this

371
00:15:59,230 --> 00:16:06,340
before but I hear a yes out there so

372
00:16:06,340 --> 00:16:08,260
what what was your solution or if you're

373
00:16:08,260 --> 00:16:22,150
if you're willing to share it okay okay

374
00:16:22,150 --> 00:16:25,990
that's that's a that's a related problem

375
00:16:25,990 --> 00:16:27,910
so his solution was to make sure that

376
00:16:27,910 --> 00:16:29,860
that that didn't change the the URLs

377
00:16:29,860 --> 00:16:31,780
didn't change that's definitely one

378
00:16:31,780 --> 00:16:34,480
solution and that's something that we

379
00:16:34,480 --> 00:16:37,270
wanted to do but we decided against it

380
00:16:37,270 --> 00:16:39,070
and the reason is you get a lot more

381
00:16:39,070 --> 00:16:43,060
cash hits if you uh if you hit if the

382
00:16:43,060 --> 00:16:45,700
binary is always the same name so for

383
00:16:45,700 --> 00:16:47,080
example if you have my JavaScript binary

384
00:16:47,080 --> 00:16:50,500
1 2 3 you can you can say this expires a

385
00:16:50,500 --> 00:16:53,170
you know a dozen years from now so that

386
00:16:53,170 --> 00:16:55,570
the client never has to refresh the

387
00:16:55,570 --> 00:16:57,640
binary and we weren't willing to undo

388
00:16:57,640 --> 00:17:00,220
some optimizations that having a hash in

389
00:17:00,220 --> 00:17:03,220
our in our JavaScript would an hour

390
00:17:03,220 --> 00:17:05,350
JavaScript binary name would do somebody

391
00:17:05,350 --> 00:17:10,570
else have any ideas all right well I'll

392
00:17:10,570 --> 00:17:13,930
throw some out there so you could

393
00:17:13,930 --> 00:17:15,970
download multiple binaries you could say

394
00:17:15,970 --> 00:17:17,770
I'm going to download java script binary

395
00:17:17,770 --> 00:17:20,890
one two three and four five six the

396
00:17:20,890 --> 00:17:23,230
issue is that we have to know beforehand

397
00:17:23,230 --> 00:17:24,790
when we're going to updates four five

398
00:17:24,790 --> 00:17:26,830
six so before a push we would have to

399
00:17:26,830 --> 00:17:29,320
tell all existing machines hey the next

400
00:17:29,320 --> 00:17:30,820
JavaScript binary is going to be four

401
00:17:30,820 --> 00:17:32,920
five six so download both of them and

402
00:17:32,920 --> 00:17:35,650
that's sort of crappy plus the user is

403
00:17:35,650 --> 00:17:37,540
going to have to download a lot more a

404
00:17:37,540 --> 00:17:40,900
lot more JavaScript binaries and it's

405
00:17:40,900 --> 00:17:44,170
just not the cleanest approach so you

406
00:17:44,170 --> 00:17:45,460
could put the binary and slamming page

407
00:17:45,460 --> 00:17:47,530
instead of having an external javascript

408
00:17:47,530 --> 00:17:50,590
binary just in line it the difficulty

409
00:17:50,590 --> 00:17:52,000
there is really performance

410
00:17:52,000 --> 00:17:54,850
it's really what it boils down to it

411
00:17:54,850 --> 00:17:56,740
also deviates from the online case and

412
00:17:56,740 --> 00:17:58,120
we really wanted to keep the online and

413
00:17:58,120 --> 00:18:02,230
offline flows similar so performance the

414
00:18:02,230 --> 00:18:04,240
problem because we we dynamically

415
00:18:04,240 --> 00:18:06,520
execute our scripts to ensure that only

416
00:18:06,520 --> 00:18:08,980
when we need something does it get

417
00:18:08,980 --> 00:18:11,350
pulled in so the user is able to edit a

418
00:18:11,350 --> 00:18:13,420
document before all of the javascript is

419
00:18:13,420 --> 00:18:17,260
even downloaded so we could put binary

420
00:18:17,260 --> 00:18:18,940
into a comment and then evaluate that

421
00:18:18,940 --> 00:18:21,910
comment so this is actually what what

422
00:18:21,910 --> 00:18:23,800
other people do this is this is a fairly

423
00:18:23,800 --> 00:18:26,800
common pattern and this is one that we

424
00:18:26,800 --> 00:18:28,300
were really considering the problem is

425
00:18:28,300 --> 00:18:30,280
it will deviate from online and offline

426
00:18:30,280 --> 00:18:32,440
and the online case we don't want the

427
00:18:32,440 --> 00:18:34,570
user to have to download two megabytes

428
00:18:34,570 --> 00:18:36,850
of an HTML page before evaluating a

429
00:18:36,850 --> 00:18:40,240
comment and we really did want that that

430
00:18:40,240 --> 00:18:43,000
hard barrier there so you could version

431
00:18:43,000 --> 00:18:44,740
landing pages the other thing you could

432
00:18:44,740 --> 00:18:48,550
do is instead of having / / page or /

433
00:18:48,550 --> 00:18:52,450
edit you could have / edit one / edit to

434
00:18:52,450 --> 00:18:55,210
and / edit one will map to my JavaScript

435
00:18:55,210 --> 00:18:58,270
binary one two three my you know edit

436
00:18:58,270 --> 00:19:01,810
two will map to four five six the issue

437
00:19:01,810 --> 00:19:03,970
is then all applications then have to

438
00:19:03,970 --> 00:19:06,430
know oh I have to hit / edit to instead

439
00:19:06,430 --> 00:19:08,920
of / edit three or instead of / out of

440
00:19:08,920 --> 00:19:10,810
four and getting that coordination right

441
00:19:10,810 --> 00:19:12,850
between all the different editors or

442
00:19:12,850 --> 00:19:14,710
between all the between the fallback

443
00:19:14,710 --> 00:19:17,470
application which actually loads it and

444
00:19:17,470 --> 00:19:19,710
the end the push is kind of complicated

445
00:19:19,710 --> 00:19:22,420
which leads us to intercept entries

446
00:19:22,420 --> 00:19:24,670
which is what we ended up going with so

447
00:19:24,670 --> 00:19:26,080
who here is familiar with the chrome

448
00:19:26,080 --> 00:19:28,780
specific for as far as I know comes to

449
00:19:28,780 --> 00:19:30,580
the concept of intercept entries in the

450
00:19:30,580 --> 00:19:33,280
app cache awesome i'm going to teach you

451
00:19:33,280 --> 00:19:39,670
something new so so chrome specific app

452
00:19:39,670 --> 00:19:42,850
cache entries allow you allow you to

453
00:19:42,850 --> 00:19:46,060
intercept urls using a prefix match

454
00:19:46,060 --> 00:19:51,340
before they hit the network so how do we

455
00:19:51,340 --> 00:19:55,780
use it we can say URL returns URL to so

456
00:19:55,780 --> 00:19:59,200
in this case what we can do is we can

457
00:19:59,200 --> 00:20:02,320
append that version so we can append

458
00:20:02,320 --> 00:20:05,560
that version but have / edit reader

459
00:20:05,560 --> 00:20:08,640
subversion in other words we can have in

460
00:20:08,640 --> 00:20:12,040
the in the explicit entry section we can

461
00:20:12,040 --> 00:20:14,920
have / page given that version we either

462
00:20:14,920 --> 00:20:16,660
through a query parameter or however you

463
00:20:16,660 --> 00:20:19,090
want to append it's that URL then we can

464
00:20:19,090 --> 00:20:21,520
have that intercept entry say / page

465
00:20:21,520 --> 00:20:25,450
always forwards to always forwards to /

466
00:20:25,450 --> 00:20:29,050
page with that version attached so how

467
00:20:29,050 --> 00:20:32,290
does this work why does this work so

468
00:20:32,290 --> 00:20:34,270
what ends up happening is the browser

469
00:20:34,270 --> 00:20:36,640
will actually try to download / page

470
00:20:36,640 --> 00:20:38,440
with the given version if it hits

471
00:20:38,440 --> 00:20:40,030
machine be if we go back to our diagram

472
00:20:40,030 --> 00:20:42,370
and it hits machine be it's going to say

473
00:20:42,370 --> 00:20:43,840
I don't know what that version is and

474
00:20:43,840 --> 00:20:46,000
it's going to send back a 404 the

475
00:20:46,000 --> 00:20:47,770
browser just going to get that 404 and

476
00:20:47,770 --> 00:20:50,020
it's going to say well this app cache

477
00:20:50,020 --> 00:20:52,690
this app cache update was a failure so

478
00:20:52,690 --> 00:20:54,940
let's throw this away and then it does

479
00:20:54,940 --> 00:20:57,970
it again so if the if the machine that

480
00:20:57,970 --> 00:21:01,330
you hit is on a different version if the

481
00:21:01,330 --> 00:21:02,770
machine that you hit when retrieving the

482
00:21:02,770 --> 00:21:04,810
app cache manifest is on a different

483
00:21:04,810 --> 00:21:06,340
version than the machine that you hit

484
00:21:06,340 --> 00:21:07,960
when you actually retrieve the landing

485
00:21:07,960 --> 00:21:10,780
page it just won't update the app cache

486
00:21:10,780 --> 00:21:13,060
will not update so this is guaranteed to

487
00:21:13,060 --> 00:21:15,490
work which is pretty neat and it

488
00:21:15,490 --> 00:21:16,660
requires no difference between the

489
00:21:16,660 --> 00:21:19,260
online in the offline flow we can still

490
00:21:19,260 --> 00:21:22,630
use / page 1 online we don't have to

491
00:21:22,630 --> 00:21:28,570
append a version number to it so why

492
00:21:28,570 --> 00:21:32,320
this talk so I have just a few minutes

493
00:21:32,320 --> 00:21:34,120
left and I really want people to think

494
00:21:34,120 --> 00:21:36,970
about offline it's best for you and it's

495
00:21:36,970 --> 00:21:38,920
best for your users if the stuff that

496
00:21:38,920 --> 00:21:40,540
you if the stuff that you work on is

497
00:21:40,540 --> 00:21:42,820
available for your users all the time

498
00:21:42,820 --> 00:21:44,770
they will be much happier than if it's

499
00:21:44,770 --> 00:21:46,120
available to them only when they have a

500
00:21:46,120 --> 00:21:48,280
connection I'm sure people here despite

501
00:21:48,280 --> 00:21:51,070
how how connected we seem to constantly

502
00:21:51,070 --> 00:21:54,010
be have experienced network outages been

503
00:21:54,010 --> 00:21:57,210
on a plane etc so web apps and

504
00:21:57,210 --> 00:22:00,120
traditional apps are fairly similar

505
00:22:00,120 --> 00:22:04,000
except now web apps can take advantage

506
00:22:04,000 --> 00:22:06,220
of all the benefits of the cloud plus go

507
00:22:06,220 --> 00:22:07,780
offline and I think that we've really

508
00:22:07,780 --> 00:22:10,960
demonstrated it with with Doc's offline

509
00:22:10,960 --> 00:22:13,570
I also wanted to point out some of the

510
00:22:13,570 --> 00:22:14,920
things that made it hard for us like

511
00:22:14,920 --> 00:22:17,020
matching static content through the

512
00:22:17,020 --> 00:22:19,309
landing page that's something which

513
00:22:19,309 --> 00:22:21,350
earlier earlier offline things like

514
00:22:21,350 --> 00:22:24,350
there I mentioned it gears actually did

515
00:22:24,350 --> 00:22:26,990
right and an app in the app cache world

516
00:22:26,990 --> 00:22:28,759
that's that's been difficult for us to

517
00:22:28,759 --> 00:22:33,740
do and it can be done so think offline

518
00:22:33,740 --> 00:22:35,929
whenever you construct something make

519
00:22:35,929 --> 00:22:37,789
sure that whenever it goes to server

520
00:22:37,789 --> 00:22:39,440
just send its local store as well then

521
00:22:39,440 --> 00:22:43,249
read it back from local store so I have

522
00:22:43,249 --> 00:22:46,970
a few minutes left so I wanted to thank

523
00:22:46,970 --> 00:22:49,610
you all for for coming and sitting

524
00:22:49,610 --> 00:22:51,379
through my talk I didn't know if anybody

525
00:22:51,379 --> 00:22:53,179
had any questions about any of the

526
00:22:53,179 --> 00:22:54,919
things that I've discussed and i'll also

527
00:22:54,919 --> 00:22:57,529
be available at the at the google booth

528
00:22:57,529 --> 00:23:00,080
after this so feel free to visit us

529
00:23:00,080 --> 00:23:03,499
we're in the and the lunchroom yes hey

530
00:23:03,499 --> 00:23:06,379
so with the intercept rules was that

531
00:23:06,379 --> 00:23:08,029
something that you put into chrome

532
00:23:08,029 --> 00:23:09,649
because docks required it or is it

533
00:23:09,649 --> 00:23:11,600
something that chrome put in then docs

534
00:23:11,600 --> 00:23:13,700
discovered it like as it is that is eid

535
00:23:13,700 --> 00:23:15,470
back loop or that is an excellent

536
00:23:15,470 --> 00:23:20,090
question so the answer the answer is we

537
00:23:20,090 --> 00:23:22,399
discovered it so if you take a look at

538
00:23:22,399 --> 00:23:23,929
if you take a look at the history of it

539
00:23:23,929 --> 00:23:26,090
intercept entries were added sometime

540
00:23:26,090 --> 00:23:28,909
last November in the newest version of

541
00:23:28,909 --> 00:23:32,419
Chrome nightlies at the time and and we

542
00:23:32,419 --> 00:23:34,450
took advantage of it at some point in

543
00:23:34,450 --> 00:23:40,909
June something like that so that was

544
00:23:40,909 --> 00:23:45,419
that was innocent of us other questions

545
00:23:45,429 --> 00:23:48,200
kind of a follow-up to this one are you

546
00:23:48,200 --> 00:23:51,950
pushing that to standard bodies to get

547
00:23:51,950 --> 00:23:53,869
because that sounds really useful but

548
00:23:53,869 --> 00:23:56,869
then it only works on Chrome it is

549
00:23:56,869 --> 00:23:59,119
incredibly useful so that's something

550
00:23:59,119 --> 00:24:04,340
that we leave up to so there was a talk

551
00:24:04,340 --> 00:24:06,470
earlier today in this room about pushing

552
00:24:06,470 --> 00:24:08,600
stuff to standards bodies and it takes a

553
00:24:08,600 --> 00:24:10,129
lot of time so that's something that we

554
00:24:10,129 --> 00:24:12,559
have been pushing for there are a couple

555
00:24:12,559 --> 00:24:15,499
of things that are better slowing that

556
00:24:15,499 --> 00:24:17,090
down but this is something that we're

557
00:24:17,090 --> 00:24:18,499
pushing for we think that it's an

558
00:24:18,499 --> 00:24:19,850
excellent improvement to every browser

559
00:24:19,850 --> 00:24:22,970
if it's one of its one of the things

560
00:24:22,970 --> 00:24:25,460
along with getting permissions from the

561
00:24:25,460 --> 00:24:26,960
chrome apps and background pages etc

562
00:24:26,960 --> 00:24:30,049
that are preventing us from doing docs

563
00:24:30,049 --> 00:24:31,820
offline cross-browser right now it's

564
00:24:31,820 --> 00:24:32,990
chrome only so

565
00:24:32,990 --> 00:24:35,150
pushing this to through standards will

566
00:24:35,150 --> 00:24:37,309
make docs offline work everywhere that's

567
00:24:37,309 --> 00:24:38,900
the better for us so that's definitely

568
00:24:38,900 --> 00:24:41,780
something that we're pushing for other

569
00:24:41,780 --> 00:24:46,910
questions I think that's it I think

570
00:24:46,910 --> 00:24:48,470
that's it for now if you have any more

571
00:24:48,470 --> 00:24:50,450
questions Kevin will be at the Google

572
00:24:50,450 --> 00:24:52,460
booth inside but thank you very much

