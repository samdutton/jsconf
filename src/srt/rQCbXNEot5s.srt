1
00:00:18,330 --> 00:00:21,910

I'm Emily um I'm a core developer on

2
00:00:21,910 --> 00:00:24,820
meteor as Rico said I'm really excited

3
00:00:24,820 --> 00:00:25,449
to be here

4
00:00:25,449 --> 00:00:27,699
um and today I'm going to be telling you

5
00:00:27,699 --> 00:00:29,529
all about meteor and also showing you

6
00:00:29,529 --> 00:00:32,529
about it so a few of you it sounds like

7
00:00:32,529 --> 00:00:34,000
he had heard of meteor I've talked to

8
00:00:34,000 --> 00:00:35,680
some people who have used it or even

9
00:00:35,680 --> 00:00:37,600
using it for their for their companies

10
00:00:37,600 --> 00:00:40,000
if you haven't heard of meteor let me

11
00:00:40,000 --> 00:00:42,089
tell you a little bit about what it is

12
00:00:42,089 --> 00:00:47,050
basically meteor is a a set of command

13
00:00:47,050 --> 00:00:49,629
line tools like a build tool and a set

14
00:00:49,629 --> 00:00:52,570
of packages and together these make up a

15
00:00:52,570 --> 00:00:55,329
platform for basically developing really

16
00:00:55,329 --> 00:00:57,160
really cool web apps so what's a cool

17
00:00:57,160 --> 00:00:59,379
web app well what we mean is something

18
00:00:59,379 --> 00:01:02,140
that is very interactive real-time very

19
00:01:02,140 --> 00:01:04,690
fast and has a really rich snappy user

20
00:01:04,690 --> 00:01:07,390
experience and our goal is to make it

21
00:01:07,390 --> 00:01:09,550
really easy for developers to build

22
00:01:09,550 --> 00:01:13,810
these apps very quickly so in this talk

23
00:01:13,810 --> 00:01:15,550
I'm going to start by telling you a

24
00:01:15,550 --> 00:01:17,140
little bit about what makes meteor

25
00:01:17,140 --> 00:01:19,149
different and more generally what Web

26
00:01:19,149 --> 00:01:20,800
Apps are looking like these days which

27
00:01:20,800 --> 00:01:22,959
is different from traditional apps that

28
00:01:22,959 --> 00:01:24,720
you might have built in rails or Django

29
00:01:24,720 --> 00:01:26,950
and then I'm going to spend most of the

30
00:01:26,950 --> 00:01:29,229
time doing a live coding demo so I'm

31
00:01:29,229 --> 00:01:30,429
going to go through building a simple

32
00:01:30,429 --> 00:01:33,700
app and hopefully if you have already

33
00:01:33,700 --> 00:01:35,679
maybe seen that seen meteor played

34
00:01:35,679 --> 00:01:37,630
around with it a little bit I'm

35
00:01:37,630 --> 00:01:39,429
hopefully going to give you a little bit

36
00:01:39,429 --> 00:01:41,200
of new new knowledge because I'm going

37
00:01:41,200 --> 00:01:42,910
to try to as I go through each feature

38
00:01:42,910 --> 00:01:45,280
explain what's going on under the hood a

39
00:01:45,280 --> 00:01:47,259
lot of times people say meteors too much

40
00:01:47,259 --> 00:01:49,629
magic I don't know what's going on and

41
00:01:49,629 --> 00:01:50,920
I'm gonna try to explain what's going on

42
00:01:50,920 --> 00:01:55,629
because I swear it's not magic so let me

43
00:01:55,629 --> 00:01:58,060
start by telling you what a meteor app

44
00:01:58,060 --> 00:01:59,739
looks like and I'm going to do that by

45
00:01:59,739 --> 00:02:01,599
comparing to a traditional request

46
00:02:01,599 --> 00:02:04,690
response style app so this request

47
00:02:04,690 --> 00:02:07,860
response style is where the client says

48
00:02:07,860 --> 00:02:10,390
hey server I want a list of sea

49
00:02:10,390 --> 00:02:12,970
creatures and the server says these are

50
00:02:12,970 --> 00:02:14,170
the sea creatures that I know about

51
00:02:14,170 --> 00:02:16,690
right now and here's the HTML to display

52
00:02:16,690 --> 00:02:18,819
them and that's all the browser knows

53
00:02:18,819 --> 00:02:21,040
how to do is go make a request to get a

54
00:02:21,040 --> 00:02:23,319
response and and display that response

55
00:02:23,319 --> 00:02:26,720
on the page

56
00:02:26,730 --> 00:02:29,700
in a meteor app we want to subscribe to

57
00:02:29,700 --> 00:02:31,769
data we want to say I want to know about

58
00:02:31,769 --> 00:02:33,360
all the sea creatures that the server

59
00:02:33,360 --> 00:02:35,160
knows about and when the server finds

60
00:02:35,160 --> 00:02:37,230
out about new sea creatures then I want

61
00:02:37,230 --> 00:02:40,170
to know about those also and when the

62
00:02:40,170 --> 00:02:41,730
client finds out about new data from the

63
00:02:41,730 --> 00:02:43,800
server the client figures out how to put

64
00:02:43,800 --> 00:02:45,180
it on the page instead of the server

65
00:02:45,180 --> 00:02:46,920
saying here's all the HTML for the

66
00:02:46,920 --> 00:02:50,550
entire list and of course it's not just

67
00:02:50,550 --> 00:02:52,530
meteor apps that are doing this this is

68
00:02:52,530 --> 00:02:54,120
this is a very common style of web

69
00:02:54,120 --> 00:02:56,430
development today you might have used

70
00:02:56,430 --> 00:02:57,900
something like servers and events or

71
00:02:57,900 --> 00:02:59,790
WebSockets to constantly stream data

72
00:02:59,790 --> 00:03:00,950
from the server to the client

73
00:03:00,950 --> 00:03:03,299
client-side rendering is a very common

74
00:03:03,299 --> 00:03:05,970
thing but what we try to do in meteor is

75
00:03:05,970 --> 00:03:07,950
make it very easy and quick to develop

76
00:03:07,950 --> 00:03:09,360
these kinds of apps and make it so that

77
00:03:09,360 --> 00:03:10,920
you can bake these features in from the

78
00:03:10,920 --> 00:03:14,819
very beginning so these are some of the

79
00:03:14,819 --> 00:03:16,440
principles that that we have that

80
00:03:16,440 --> 00:03:18,230
describe this kind of app and that that

81
00:03:18,230 --> 00:03:21,780
inform how meteor works data on the wire

82
00:03:21,780 --> 00:03:23,819
means we send data from the server to

83
00:03:23,819 --> 00:03:25,590
the client we don't generally send these

84
00:03:25,590 --> 00:03:28,709
huge blobs of HTML client-side rendering

85
00:03:28,709 --> 00:03:30,690
I mentioned the client is the one who

86
00:03:30,690 --> 00:03:32,609
knows how to how to render the templates

87
00:03:32,609 --> 00:03:34,440
it's not that the server has a template

88
00:03:34,440 --> 00:03:36,000
and the server renders that template

89
00:03:36,000 --> 00:03:38,069
with some data instead the client has

90
00:03:38,069 --> 00:03:39,540
the template and the client figured out

91
00:03:39,540 --> 00:03:42,389
how to do the rendering and how to react

92
00:03:42,389 --> 00:03:48,789
to data as it comes from the server

93
00:03:48,799 --> 00:03:51,060
another difference is when you start

94
00:03:51,060 --> 00:03:52,620
writing data so when you start making

95
00:03:52,620 --> 00:03:54,780
changes to data on the server in a

96
00:03:54,780 --> 00:03:56,639
traditional request response style app

97
00:03:56,639 --> 00:03:59,190
you generally send an HTTP POST request

98
00:03:59,190 --> 00:04:01,410
where you say this is the new creature I

99
00:04:01,410 --> 00:04:03,690
want to add and the server goes off and

100
00:04:03,690 --> 00:04:05,489
does some work maybe writes to the

101
00:04:05,489 --> 00:04:07,530
database and then it comes back and it

102
00:04:07,530 --> 00:04:10,049
says okay I added that and here's the

103
00:04:10,049 --> 00:04:12,329
updated HTML with with your new creature

104
00:04:12,329 --> 00:04:17,430
in it in a meteor app we have a little

105
00:04:17,430 --> 00:04:20,459
bit of an advantage as I mentioned the

106
00:04:20,459 --> 00:04:22,620
client the client subscribes to data

107
00:04:22,620 --> 00:04:25,020
over time and that means that the client

108
00:04:25,020 --> 00:04:27,630
has this in-memory local cache of the

109
00:04:27,630 --> 00:04:30,450
data that it knows about so when the

110
00:04:30,450 --> 00:04:32,010
client wants to go make a change to that

111
00:04:32,010 --> 00:04:34,590
data instead of going to the server and

112
00:04:34,590 --> 00:04:36,690
saying I want to make this change tell

113
00:04:36,690 --> 00:04:38,630
me what the result is the

114
00:04:38,630 --> 00:04:40,430
I can just do it locally the clan can

115
00:04:40,430 --> 00:04:42,620
just update its local cache and then go

116
00:04:42,620 --> 00:04:44,960
update the page do whatever it needs to

117
00:04:44,960 --> 00:04:47,690
do to reflect that change while sending

118
00:04:47,690 --> 00:04:49,640
the message to the server and when the

119
00:04:49,640 --> 00:04:51,740
server comes back and says ok everything

120
00:04:51,740 --> 00:04:53,870
went according to plan the client has

121
00:04:53,870 --> 00:04:55,490
successfully predicted everything that

122
00:04:55,490 --> 00:04:56,930
it was going to do and it doesn't need

123
00:04:56,930 --> 00:04:59,000
to do anything else and meteor takes

124
00:04:59,000 --> 00:05:00,710
care of all of this for you as you'll

125
00:05:00,710 --> 00:05:04,460
see when I do my demo and so we call

126
00:05:04,460 --> 00:05:05,930
this latency compensation

127
00:05:05,930 --> 00:05:07,790
we're compensating for the latency of

128
00:05:07,790 --> 00:05:10,100
going back and forth to the server by

129
00:05:10,100 --> 00:05:11,330
just predicting what the server is going

130
00:05:11,330 --> 00:05:13,910
to do and and acting accordingly and

131
00:05:13,910 --> 00:05:15,590
only if something goes wrong on the

132
00:05:15,590 --> 00:05:17,600
server like if the server comes back and

133
00:05:17,600 --> 00:05:20,440
says you're not authorized to do that or

134
00:05:20,440 --> 00:05:22,010
exception I don't know what you're

135
00:05:22,010 --> 00:05:22,850
talking about

136
00:05:22,850 --> 00:05:24,860
then meteor figures out how to undo the

137
00:05:24,860 --> 00:05:26,480
changes that were applied locally and

138
00:05:26,480 --> 00:05:28,220
match what actually happened on the

139
00:05:28,220 --> 00:05:34,100
server one final point of comparison I

140
00:05:34,100 --> 00:05:36,350
want to make before I get into my demo

141
00:05:36,350 --> 00:05:39,020
is that we see a lot of developers

142
00:05:39,020 --> 00:05:40,820
building these kinds of apps that behave

143
00:05:40,820 --> 00:05:43,250
a lot like meteor apps but they often do

144
00:05:43,250 --> 00:05:44,960
it by putting together tons of different

145
00:05:44,960 --> 00:05:48,350
tools so you might use any one of a

146
00:05:48,350 --> 00:05:49,610
number of front-end front-end JavaScript

147
00:05:49,610 --> 00:05:52,220
libraries in addition to your CSS

148
00:05:52,220 --> 00:05:52,970
framework

149
00:05:52,970 --> 00:05:54,980
you might pick some different technology

150
00:05:54,980 --> 00:05:56,210
on the server a different framework

151
00:05:56,210 --> 00:05:59,240
different actual application server you

152
00:05:59,240 --> 00:06:00,680
might want to use something like sock

153
00:06:00,680 --> 00:06:04,490
js2 to use web sockets even in browsers

154
00:06:04,490 --> 00:06:08,180
that don't support it in meteor our

155
00:06:08,180 --> 00:06:10,160
philosophy is that it's much easier to

156
00:06:10,160 --> 00:06:12,320
do it all we're a little bit more of an

157
00:06:12,320 --> 00:06:14,660
opinionated framework we we want it we

158
00:06:14,660 --> 00:06:16,760
wanted it to be as easy as possible for

159
00:06:16,760 --> 00:06:18,650
you and so we try to make the hard

160
00:06:18,650 --> 00:06:21,040
decisions for you and give you one stack

161
00:06:21,040 --> 00:06:23,720
so by default you write your entire app

162
00:06:23,720 --> 00:06:26,000
and JavaScript server code client code

163
00:06:26,000 --> 00:06:27,650
and that means you can share a lot of

164
00:06:27,650 --> 00:06:29,360
code from the client in the server and

165
00:06:29,360 --> 00:06:31,940
you can use the same api's under the

166
00:06:31,940 --> 00:06:35,090
client on in the server except where it

167
00:06:35,090 --> 00:06:36,260
doesn't make sense and I'll give you

168
00:06:36,260 --> 00:06:39,200
some examples of that but we also don't

169
00:06:39,200 --> 00:06:41,870
want to tie you down so when when you

170
00:06:41,870 --> 00:06:44,120
want to go hook up your meteor app to an

171
00:06:44,120 --> 00:06:46,400
objective-c client we have a protocol

172
00:06:46,400 --> 00:06:48,500
that we use to transfer data from the

173
00:06:48,500 --> 00:06:49,840
client and the server

174
00:06:49,840 --> 00:06:51,940
and you can implement a client in in

175
00:06:51,940 --> 00:06:54,160
Python or objective-c or you can take

176
00:06:54,160 --> 00:06:55,840
your meteor your meteor app and hook it

177
00:06:55,840 --> 00:06:57,820
up to a Java server can we have

178
00:06:57,820 --> 00:06:59,110
community members who are doing these

179
00:06:59,110 --> 00:07:00,520
things and I think we'll only see more

180
00:07:00,520 --> 00:07:05,919
of that as time goes on all right so now

181
00:07:05,919 --> 00:07:08,800
it's time for my demo and so I'm going

182
00:07:08,800 --> 00:07:10,060
to go through the process of building a

183
00:07:10,060 --> 00:07:13,389
simple app I went to the hobbit house

184
00:07:13,389 --> 00:07:15,430
last night instead of practicing so it's

185
00:07:15,430 --> 00:07:23,390
your job to find typos and where is my

186
00:07:23,400 --> 00:07:29,770
there we go okay okay so we're gonna

187
00:07:29,770 --> 00:07:31,419
start with an app I have a little bit of

188
00:07:31,419 --> 00:07:33,250
scaffolding already set up here but not

189
00:07:33,250 --> 00:07:34,630
not too much um

190
00:07:34,630 --> 00:07:37,660
we're inside a meteor app uh if we

191
00:07:37,660 --> 00:07:39,250
weren't already here we would create an

192
00:07:39,250 --> 00:07:42,700
app by by typing meteor create and the

193
00:07:42,700 --> 00:07:44,880
name of our app can everyone see okay

194
00:07:44,880 --> 00:07:49,300
okay and what's in here is an HTML file

195
00:07:49,300 --> 00:07:50,560
where I have just a little bit of

196
00:07:50,560 --> 00:07:54,400
starter code and and and in every meteor

197
00:07:54,400 --> 00:07:56,140
app you have a meteor directory which

198
00:07:56,140 --> 00:07:58,000
has things like the packages that you're

199
00:07:58,000 --> 00:08:01,330
using and the release of meteor that

200
00:08:01,330 --> 00:08:05,260
this app is pinned to so let's look at

201
00:08:05,260 --> 00:08:11,680
this HTML so I have this file open it's

202
00:08:11,680 --> 00:08:14,440
it's written in mostly HTML and it has

203
00:08:14,440 --> 00:08:16,030
some handlebars syntax so we use a

204
00:08:16,030 --> 00:08:18,389
template language similar to handlebars

205
00:08:18,389 --> 00:08:20,680
which you might have heard of yesterday

206
00:08:20,680 --> 00:08:23,500
described as like the son of Satan or

207
00:08:23,500 --> 00:08:25,389
something but um

208
00:08:25,389 --> 00:08:28,810
so it's okay um so so we have two

209
00:08:28,810 --> 00:08:32,190
templates here we have a header which is

210
00:08:32,190 --> 00:08:35,830
just a header not not too um oh and by

211
00:08:35,830 --> 00:08:37,270
the way this is like not a politically

212
00:08:37,270 --> 00:08:38,919
correct app people's feelings are gonna

213
00:08:38,919 --> 00:08:41,830
get hurt once I deploy this but so so we

214
00:08:41,830 --> 00:08:44,620
have we have this header and then we

215
00:08:44,620 --> 00:08:47,200
have a list of talks so what we're going

216
00:08:47,200 --> 00:08:49,510
to do is iterate over the talks and for

217
00:08:49,510 --> 00:08:51,190
each talk we just print the title and

218
00:08:51,190 --> 00:08:54,640
the speaker and the number of votes so

219
00:08:54,640 --> 00:08:56,080
right now this is just a template we

220
00:08:56,080 --> 00:08:57,670
don't have any JavaScript code yet we

221
00:08:57,670 --> 00:08:59,440
don't have any data here we're not this

222
00:08:59,440 --> 00:09:00,700
is not going to do anything so let's

223
00:09:00,700 --> 00:09:05,360
write some JavaScript

224
00:09:05,370 --> 00:09:09,550
this files not supposed to exist all

225
00:09:09,550 --> 00:09:20,770
right good maybe a little big okay so

226
00:09:20,770 --> 00:09:22,270
the first thing I'm going to do is

227
00:09:22,270 --> 00:09:29,710
declare a collection so if you've used

228
00:09:29,710 --> 00:09:31,930
MongoDB before this is the syntax we're

229
00:09:31,930 --> 00:09:34,360
using and meteor right now only supports

230
00:09:34,360 --> 00:09:36,280
MongoDB but there are plans to support

231
00:09:36,280 --> 00:09:38,770
other databases including sequel

232
00:09:38,770 --> 00:09:41,200
databases in the future so we're

233
00:09:41,200 --> 00:09:42,820
declaring this collection and we're

234
00:09:42,820 --> 00:09:44,620
actually writing code this line of code

235
00:09:44,620 --> 00:09:46,210
is going to run on both the client and

236
00:09:46,210 --> 00:09:48,790
the server so when this code runs on the

237
00:09:48,790 --> 00:09:50,650
server it actually creates a Mongo

238
00:09:50,650 --> 00:09:51,940
collection and when you read and write

239
00:09:51,940 --> 00:09:53,470
to this collection that actually talks

240
00:09:53,470 --> 00:09:56,710
to Mongo on the client we're declaring a

241
00:09:56,710 --> 00:10:01,670
local in-memory cache of this collection

242
00:10:01,680 --> 00:10:04,630
now let's write some code that just runs

243
00:10:04,630 --> 00:10:07,120
on the server and later we'll write some

244
00:10:07,120 --> 00:10:12,400
code that just runs on the client so on

245
00:10:12,400 --> 00:10:13,960
the server we want to publish this data

246
00:10:13,960 --> 00:10:23,900
just as I showed in our picture

247
00:10:23,910 --> 00:10:26,100
so we're writing a published function

248
00:10:26,100 --> 00:10:27,630
and what we're doing here is we're

249
00:10:27,630 --> 00:10:29,220
taking the result we're taking a

250
00:10:29,220 --> 00:10:31,080
database cursor which is sort of like an

251
00:10:31,080 --> 00:10:33,270
abstraction representing a query but not

252
00:10:33,270 --> 00:10:35,100
representing the actual results of the

253
00:10:35,100 --> 00:10:37,650
query at any particular time and we're

254
00:10:37,650 --> 00:10:39,600
basically returning this as our as the

255
00:10:39,600 --> 00:10:42,240
result of our published function now on

256
00:10:42,240 --> 00:10:43,800
the client we're going to subscribe to

257
00:10:43,800 --> 00:10:47,490
this so what this means is that our

258
00:10:47,490 --> 00:10:49,680
server is publishing everything in its

259
00:10:49,680 --> 00:10:51,540
Sox collection and the client is

260
00:10:51,540 --> 00:10:53,430
subscribing to that data and storing it

261
00:10:53,430 --> 00:11:00,840
in its own Sox collection okay so we

262
00:11:00,840 --> 00:11:02,010
have that we have some data being

263
00:11:02,010 --> 00:11:03,810
published one more thing before our app

264
00:11:03,810 --> 00:11:07,620
actually does something is that we want

265
00:11:07,620 --> 00:11:09,600
to actually declare define that template

266
00:11:09,600 --> 00:11:12,360
helper that we used in our template so

267
00:11:12,360 --> 00:11:13,860
when we're when we're iterating over

268
00:11:13,860 --> 00:11:15,960
that list of talks we need to actually

269
00:11:15,960 --> 00:11:21,330
have the talks to iterate all right so I

270
00:11:21,330 --> 00:11:23,310
have some dummy data in the database so

271
00:11:23,310 --> 00:11:28,800
um so let's go run this app and the way

272
00:11:28,800 --> 00:11:31,260
we do this is I was totally gonna do an

273
00:11:31,260 --> 00:11:33,750
okay meteor run joke but I feel like

274
00:11:33,750 --> 00:11:35,700
that was used up already

275
00:11:35,700 --> 00:11:39,900
so okay so this is how you actually run

276
00:11:39,900 --> 00:11:43,380
it um and then we can go so we're

277
00:11:43,380 --> 00:11:44,790
running a local development server now

278
00:11:44,790 --> 00:11:48,360
and now we can go look at our app um did

279
00:11:48,360 --> 00:11:51,060
I get rid of my name let me see I might

280
00:11:51,060 --> 00:11:53,070
have gotten rid of my sample data so

281
00:11:53,070 --> 00:11:54,750
another thing we can do is open up a

282
00:11:54,750 --> 00:11:58,440
Mongo shell um and this is a Mongo shell

283
00:11:58,440 --> 00:12:00,810
to the database that our app is our app

284
00:12:00,810 --> 00:12:03,660
is running okay so I don't have anything

285
00:12:03,660 --> 00:12:05,280
in the database let's go put something

286
00:12:05,280 --> 00:12:08,250
in I think I have some sample data

287
00:12:08,250 --> 00:12:16,560
somewhere

288
00:12:16,570 --> 00:12:19,450
okay so now we should have something in

289
00:12:19,450 --> 00:12:24,560
our database and in a second okay so now

290
00:12:24,560 --> 00:12:26,690
we have our so now we have our we have

291
00:12:26,690 --> 00:12:28,850
our talks can everyone read it it looks

292
00:12:28,850 --> 00:12:33,860
good okay yes okay so we have some stuff

293
00:12:33,860 --> 00:12:37,070
in the database we've we've published

294
00:12:37,070 --> 00:12:43,580
we've subscribed okay so what's going on

295
00:12:43,580 --> 00:12:45,950
I haven't showed too much yet but before

296
00:12:45,950 --> 00:12:47,780
I go further let me explain how this

297
00:12:47,780 --> 00:12:51,050
pub/sub thing is working so it's

298
00:12:51,050 --> 00:12:53,390
actually kind of embarrassing what we do

299
00:12:53,390 --> 00:12:55,940
right now is when you win and when the

300
00:12:55,940 --> 00:12:58,700
server publishes some data and then some

301
00:12:58,700 --> 00:13:00,440
right happens like you go use a meteor

302
00:13:00,440 --> 00:13:03,020
API to write to the database the server

303
00:13:03,020 --> 00:13:05,600
actually goes and pulls Mongo for all

304
00:13:05,600 --> 00:13:07,430
the queries that clients have subscribed

305
00:13:07,430 --> 00:13:10,250
to and then it takes the it takes the

306
00:13:10,250 --> 00:13:11,630
data that it's already sent to the

307
00:13:11,630 --> 00:13:13,310
clients and dips that with the new

308
00:13:13,310 --> 00:13:15,800
result of the query so it's

309
00:13:15,800 --> 00:13:18,110
computationally expensive it's expensive

310
00:13:18,110 --> 00:13:21,020
in memory but it's actually gotten this

311
00:13:21,020 --> 00:13:22,160
quite far there are a few optimizations

312
00:13:22,160 --> 00:13:24,620
that work really well like deduplicating

313
00:13:24,620 --> 00:13:26,510
queries because a lot of times the same

314
00:13:26,510 --> 00:13:29,030
clients subscribe to one query and not

315
00:13:29,030 --> 00:13:31,370
get all their own queries but we

316
00:13:31,370 --> 00:13:32,690
actually have something really cool and

317
00:13:32,690 --> 00:13:34,610
exciting coming out fairly soon there's

318
00:13:34,610 --> 00:13:36,950
actually a preview release if you really

319
00:13:36,950 --> 00:13:38,720
want to try the hot off the press stuff

320
00:13:38,720 --> 00:13:40,130
there's a preview release with something

321
00:13:40,130 --> 00:13:42,320
called a blog tailing and this is a much

322
00:13:42,320 --> 00:13:43,940
more scalable mechanism for doing

323
00:13:43,940 --> 00:13:46,160
pub/sub where the meteor server is

324
00:13:46,160 --> 00:13:48,260
actually going to act as a secondary in

325
00:13:48,260 --> 00:13:51,020
a Mongo replica set so the meteor server

326
00:13:51,020 --> 00:13:53,600
is going to tail the OP log which is the

327
00:13:53,600 --> 00:13:55,910
Mongo log of all the operations that are

328
00:13:55,910 --> 00:13:58,220
happening on the primary and it can tail

329
00:13:58,220 --> 00:14:00,260
that to figure out which queries are

330
00:14:00,260 --> 00:14:03,230
that clients need to be updated so it's

331
00:14:03,230 --> 00:14:05,000
much less memory intensive and it's much

332
00:14:05,000 --> 00:14:07,340
less computationally intensive we're

333
00:14:07,340 --> 00:14:08,540
still you know gathering information

334
00:14:08,540 --> 00:14:10,010
about how it's going to work in real

335
00:14:10,010 --> 00:14:11,900
apps but so so far the benchmarks are

336
00:14:11,900 --> 00:14:13,880
looking really good so that'll be a that

337
00:14:13,880 --> 00:14:19,460
will be a release in the near future all

338
00:14:19,460 --> 00:14:22,940
right let's make this app do something

339
00:14:22,940 --> 00:14:26,250
I'm going to give it some upvote and

340
00:14:26,250 --> 00:14:29,819
downvote buttons so first let's just do

341
00:14:29,819 --> 00:14:35,009
the HTML so this we're we're rendering a

342
00:14:35,009 --> 00:14:43,510
talk let's put in a button

343
00:14:43,520 --> 00:14:50,560
and a downvote button

344
00:14:50,570 --> 00:14:53,519
and so these should show up now on our

345
00:14:53,519 --> 00:14:57,990
on our page okay one little thing I want

346
00:14:57,990 --> 00:14:59,370
to point out is the hot code push I

347
00:14:59,370 --> 00:15:00,240
don't know if you caught that but I

348
00:15:00,240 --> 00:15:01,740
didn't refresh the page the meteor

349
00:15:01,740 --> 00:15:03,600
server just hex one code has changed and

350
00:15:03,600 --> 00:15:05,339
it autumn it tells clients to refresh

351
00:15:05,339 --> 00:15:08,760
and get the new code um okay so we have

352
00:15:08,760 --> 00:15:10,110
our buttons but of course they don't do

353
00:15:10,110 --> 00:15:11,610
anything yet meteor is not that much

354
00:15:11,610 --> 00:15:13,620
magic we didn't write any code to

355
00:15:13,620 --> 00:15:15,360
actually do something yet so let's write

356
00:15:15,360 --> 00:15:17,490
that code so we have we need events for

357
00:15:17,490 --> 00:15:21,300
our upvote and downvote buttons so we'll

358
00:15:21,300 --> 00:15:24,240
go into our JavaScript and define an

359
00:15:24,240 --> 00:15:28,620
event like so so this is called an event

360
00:15:28,620 --> 00:15:31,199
map and we say when you click on an

361
00:15:31,199 --> 00:15:35,100
upvote button we're going to do we're

362
00:15:35,100 --> 00:15:40,300
gonna call what's called a meteor method

363
00:15:40,310 --> 00:15:42,750
so we're calling the up boat method and

364
00:15:42,750 --> 00:15:44,430
we're passing it the ID of the talk

365
00:15:44,430 --> 00:15:45,570
which is the talk we're currently

366
00:15:45,570 --> 00:15:48,120
iterating over that's what goes into the

367
00:15:48,120 --> 00:15:51,750
this keyword and we'll do the same thing

368
00:15:51,750 --> 00:15:58,500
for down boat okay so i've defined these

369
00:15:58,500 --> 00:16:00,720
these event handlers and now we need to

370
00:16:00,720 --> 00:16:04,860
write these actual methods so i'll

371
00:16:04,860 --> 00:16:10,050
define them here and this is just a

372
00:16:10,050 --> 00:16:11,790
function that takes the ID of the talk

373
00:16:11,790 --> 00:16:26,170
and upvotes it

374
00:16:26,180 --> 00:16:29,490
okay sorry I went off the let me do that

375
00:16:29,490 --> 00:16:32,490
so it's a little easier to see so that's

376
00:16:32,490 --> 00:16:34,710
simple enough and we do the exact same

377
00:16:34,710 --> 00:16:36,660
thing for down voting well not the exact

378
00:16:36,660 --> 00:16:43,579
same thing

379
00:16:43,589 --> 00:16:46,029
so this is our method and we can call it

380
00:16:46,029 --> 00:16:49,359
from the client you can also pass

381
00:16:49,359 --> 00:16:51,549
objects or meteor does a lot of

382
00:16:51,549 --> 00:16:53,559
serialization and deserialization for

383
00:16:53,559 --> 00:16:55,959
you so you can you can pass any any

384
00:16:55,959 --> 00:16:57,929
object that can be serialized

385
00:16:57,929 --> 00:17:02,319
approximately with JSON okay so let's

386
00:17:02,319 --> 00:17:03,729
see what happens I'm gonna do one more

387
00:17:03,729 --> 00:17:05,559
thing before I run this which is I'm

388
00:17:05,559 --> 00:17:08,769
gonna change my template to actually to

389
00:17:08,769 --> 00:17:15,699
sort by votes okay so this means our

390
00:17:15,699 --> 00:17:17,319
list should be sorted by votes all right

391
00:17:17,319 --> 00:17:19,869
fingers crossed that I didn't make a

392
00:17:19,869 --> 00:17:22,869
typo we should now be able to up vote

393
00:17:22,869 --> 00:17:26,049
yeah okay so notice that I did not write

394
00:17:26,049 --> 00:17:28,329
any code to actually go update the page

395
00:17:28,329 --> 00:17:31,419
to change the number of votes and if we

396
00:17:31,419 --> 00:17:34,210
upload this one it reorders I didn't

397
00:17:34,210 --> 00:17:36,669
write any code to reorder the list this

398
00:17:36,669 --> 00:17:38,259
is where the reactivity is all about

399
00:17:38,259 --> 00:17:40,509
meteor is just reacting to the changes

400
00:17:40,509 --> 00:17:42,399
in the data and automatically rerender

401
00:17:42,399 --> 00:17:43,749
in the parts of the template that are

402
00:17:43,749 --> 00:17:45,909
relevant and of course this is all

403
00:17:45,909 --> 00:17:47,320
persistent so I just refreshed the page

404
00:17:47,320 --> 00:17:48,879
this is actually writing in the database

405
00:17:48,879 --> 00:17:53,950
on the server so let me show the code

406
00:17:53,950 --> 00:17:56,919
again and this is usually the point

407
00:17:56,919 --> 00:17:58,299
where people start saying this is too

408
00:17:58,299 --> 00:17:59,769
much magic I don't understand what's

409
00:17:59,769 --> 00:18:02,619
going on so I'm gonna tell you about a

410
00:18:02,619 --> 00:18:04,450
package called depths and this is a

411
00:18:04,450 --> 00:18:06,519
fairly small package in the meteor core

412
00:18:06,519 --> 00:18:09,100
it's about 500 lines of code and it's

413
00:18:09,100 --> 00:18:10,539
how all this is implemented it's a

414
00:18:10,539 --> 00:18:13,749
simple dependency tracking system so

415
00:18:13,749 --> 00:18:15,220
when we render this template the first

416
00:18:15,220 --> 00:18:18,429
time we construct this this database

417
00:18:18,429 --> 00:18:21,669
cursor when this cursor is constructed

418
00:18:21,669 --> 00:18:24,279
it says to meteor to this depths package

419
00:18:24,279 --> 00:18:26,919
it says hey meteor any current

420
00:18:26,919 --> 00:18:28,720
computation that's running depends on me

421
00:18:28,720 --> 00:18:30,759
it's running it called me it depends on

422
00:18:30,759 --> 00:18:31,149
me

423
00:18:31,149 --> 00:18:33,909
when I say that I changed you have to go

424
00:18:33,909 --> 00:18:38,259
rerun that computation then sometime

425
00:18:38,259 --> 00:18:40,389
later on the client gets some new data

426
00:18:40,389 --> 00:18:42,580
from the server and the client says oh

427
00:18:42,580 --> 00:18:44,259
that's that goes in this query that

428
00:18:44,259 --> 00:18:47,230
affects this query at that point the

429
00:18:47,230 --> 00:18:48,940
database cursor says hey meteor I

430
00:18:48,940 --> 00:18:50,919
changed you have to go rerun all the

431
00:18:50,919 --> 00:18:53,500
computations that depended on me in this

432
00:18:53,500 --> 00:18:55,450
case that computation is this part of

433
00:18:55,450 --> 00:18:57,000
the template rendering

434
00:18:57,000 --> 00:18:59,559
so this is actually really simple easy

435
00:18:59,559 --> 00:19:01,360
to understand idea even though it seems

436
00:19:01,360 --> 00:19:02,919
kind of magical when you first see it

437
00:19:02,919 --> 00:19:05,230
but you can go read the steps package

438
00:19:05,230 --> 00:19:07,360
it's used to implement reactive

439
00:19:07,360 --> 00:19:09,210
templates it's used to implement

440
00:19:09,210 --> 00:19:11,470
reactive different reactive data

441
00:19:11,470 --> 00:19:13,779
services like database queries and and

442
00:19:13,779 --> 00:19:16,090
even just plain reactive variables on

443
00:19:16,090 --> 00:19:18,610
the client so if you're interested it's

444
00:19:18,610 --> 00:19:20,320
very accessible and I think you should

445
00:19:20,320 --> 00:19:24,880
check it out okay so we can upvote and

446
00:19:24,880 --> 00:19:28,480
downvote um another thing we can do is

447
00:19:28,480 --> 00:19:30,070
actually do this from multiple tabs so

448
00:19:30,070 --> 00:19:32,380
this is not just you know something

449
00:19:32,380 --> 00:19:33,970
that's happening within this tab we can

450
00:19:33,970 --> 00:19:35,620
go to a different tab that doesn't share

451
00:19:35,620 --> 00:19:37,990
any state with this one and changes from

452
00:19:37,990 --> 00:19:39,789
this one are automatically reflected in

453
00:19:39,789 --> 00:19:43,600
the other one and reordering and etc and

454
00:19:43,600 --> 00:19:45,340
we didn't write any code to do that

455
00:19:45,340 --> 00:19:52,090
meteor does that all for us if you were

456
00:19:52,090 --> 00:19:54,669
watching closely you might have seen

457
00:19:54,669 --> 00:19:57,370
that I actually define these methods on

458
00:19:57,370 --> 00:19:59,260
both the client and the server so I

459
00:19:59,260 --> 00:20:01,630
didn't I could have put this code inside

460
00:20:01,630 --> 00:20:04,779
our is server a block but I actually put

461
00:20:04,779 --> 00:20:07,510
it in in the in the top level where it

462
00:20:07,510 --> 00:20:09,480
runs on both the client and the server

463
00:20:09,480 --> 00:20:11,559
but it's sort of weird because these are

464
00:20:11,559 --> 00:20:13,450
the server methods they what is the

465
00:20:13,450 --> 00:20:15,250
client doing running the logic that we

466
00:20:15,250 --> 00:20:18,190
want to happen on the server so this is

467
00:20:18,190 --> 00:20:19,870
the latency compensation I was talking

468
00:20:19,870 --> 00:20:22,779
about with the same code we've defined

469
00:20:22,779 --> 00:20:25,539
both the method on the server and we've

470
00:20:25,539 --> 00:20:27,270
defined what's called the client stub

471
00:20:27,270 --> 00:20:28,990
which is the way that the client

472
00:20:28,990 --> 00:20:33,070
simulates the method locally so when the

473
00:20:33,070 --> 00:20:34,590
client when you click the upload button

474
00:20:34,590 --> 00:20:36,850
the the client immediately sends a

475
00:20:36,850 --> 00:20:38,770
message to the server are saying I'm

476
00:20:38,770 --> 00:20:41,350
calling the upvote method at the same

477
00:20:41,350 --> 00:20:43,659
time the client goes and runs this code

478
00:20:43,659 --> 00:20:45,789
where it actually updates as a local

479
00:20:45,789 --> 00:20:48,309
in-memory collection and that causes the

480
00:20:48,309 --> 00:20:51,250
page to rerender and all that so what

481
00:20:51,250 --> 00:20:53,020
this means is that the client is

482
00:20:53,020 --> 00:20:55,179
simulating the effects while the methods

483
00:20:55,179 --> 00:20:57,340
actually being run on the server and

484
00:20:57,340 --> 00:20:58,539
then when the result from the server

485
00:20:58,539 --> 00:21:00,760
comes back the clients done and this is

486
00:21:00,760 --> 00:21:02,710
why meteor app meteor apps feel so

487
00:21:02,710 --> 00:21:04,750
snappy because we did all the work

488
00:21:04,750 --> 00:21:06,399
already we predicted what was going to

489
00:21:06,399 --> 00:21:08,230
happen and only if something went wrong

490
00:21:08,230 --> 00:21:08,840
do we

491
00:21:08,840 --> 00:21:12,740
to undo the changes that we made and and

492
00:21:12,740 --> 00:21:14,539
meteor takes care of that part too so

493
00:21:14,539 --> 00:21:16,520
you don't have to actually go undo the

494
00:21:16,520 --> 00:21:18,650
changes from the method meteor saves the

495
00:21:18,650 --> 00:21:20,600
original the original state before it

496
00:21:20,600 --> 00:21:22,460
runs the client stub and restores it

497
00:21:22,460 --> 00:21:30,860
afterwards all right so we have used a

498
00:21:30,860 --> 00:21:32,270
meteor method that's a really

499
00:21:32,270 --> 00:21:34,309
fundamental building block is this RPC

500
00:21:34,309 --> 00:21:37,909
mechanism inside meteor um one thing you

501
00:21:37,909 --> 00:21:40,010
might have heard about meteor is that

502
00:21:40,010 --> 00:21:42,080
you can use the database API on both the

503
00:21:42,080 --> 00:21:43,909
client and the server and that's totally

504
00:21:43,909 --> 00:21:46,640
insecure so the first part of that

505
00:21:46,640 --> 00:21:48,529
sentence is true the second part is

506
00:21:48,529 --> 00:21:51,950
false so I'm going to add I'm gonna add

507
00:21:51,950 --> 00:21:54,830
a new feature here which is um adding a

508
00:21:54,830 --> 00:22:01,370
new talk into the into the list so let's

509
00:22:01,370 --> 00:22:03,799
add a new template and this is just

510
00:22:03,799 --> 00:22:08,330
going to have a form inside it and we're

511
00:22:08,330 --> 00:22:10,279
just gonna use the database API directly

512
00:22:10,279 --> 00:22:21,260
to insert this new talk

513
00:22:21,270 --> 00:22:28,840
so it takes a title and a speaker

514
00:22:28,850 --> 00:22:31,519
and boy those kids must be having a lot

515
00:22:31,519 --> 00:22:37,519
of fun okay okay so we have a forum

516
00:22:37,519 --> 00:22:39,679
pretty basic let's write an event

517
00:22:39,679 --> 00:22:45,139
handler for it so down in our client

518
00:22:45,139 --> 00:22:47,600
code we're gonna write an event for a

519
00:22:47,600 --> 00:22:58,379
new new talk template

520
00:22:58,389 --> 00:23:01,639
and what this is going to do is just

521
00:23:01,639 --> 00:23:03,980
call insert just like you would from a

522
00:23:03,980 --> 00:23:10,029
Mongo shell or from server-side code and

523
00:23:10,029 --> 00:23:12,169
it's just gonna grab the values out of

524
00:23:12,169 --> 00:23:17,300
the form

525
00:23:17,310 --> 00:23:23,250
and we can also just pass a callback so

526
00:23:23,250 --> 00:23:25,140
this is a callback that gets run after

527
00:23:25,140 --> 00:23:26,730
the the server has actually acknowledged

528
00:23:26,730 --> 00:23:28,650
the insert and what we'll do is that we

529
00:23:28,650 --> 00:23:31,410
say if there's no error we'll just clear

530
00:23:31,410 --> 00:23:35,820
the forum values so if we run this right

531
00:23:35,820 --> 00:23:37,980
now it shouldn't work that's because

532
00:23:37,980 --> 00:23:39,420
this collection is completely locked

533
00:23:39,420 --> 00:23:41,760
down you can't do any rights to it from

534
00:23:41,760 --> 00:23:46,090
the client except if you call a method

535
00:23:46,100 --> 00:23:49,800
so let me just show you that we have our

536
00:23:49,800 --> 00:23:54,960
form down here and it didn't work and in

537
00:23:54,960 --> 00:23:57,660
fact if you go look in the console which

538
00:23:57,660 --> 00:24:03,810
is ok if we do if we do this again maybe

539
00:24:03,810 --> 00:24:09,930
it doesn't print the error ok I thought

540
00:24:09,930 --> 00:24:11,490
it was gonna say access denied but the

541
00:24:11,490 --> 00:24:13,350
point is that it doesn't it doesn't let

542
00:24:13,350 --> 00:24:18,120
us insert anything that that that we

543
00:24:18,120 --> 00:24:19,470
doesn't let us insert anything right now

544
00:24:19,470 --> 00:24:22,140
and what we're gonna do is write a rule

545
00:24:22,140 --> 00:24:23,310
that it allows us to insert the

546
00:24:23,310 --> 00:24:24,900
particular things that clients should be

547
00:24:24,900 --> 00:24:30,760
able to insert so in our server code

548
00:24:30,770 --> 00:24:33,840
we're gonna write an allow rule and this

549
00:24:33,840 --> 00:24:36,930
is a rule that takes the user ID of the

550
00:24:36,930 --> 00:24:39,420
client the of the client who's doing the

551
00:24:39,420 --> 00:24:41,940
insert and it takes the document that

552
00:24:41,940 --> 00:24:43,980
the client wants to insert and if it

553
00:24:43,980 --> 00:24:45,570
returns true the insert will be allowed

554
00:24:45,570 --> 00:24:47,400
if it returns false the insert will be

555
00:24:47,400 --> 00:24:50,790
denied so just for a toy example we'll

556
00:24:50,790 --> 00:24:53,250
just say you can insert any talk you

557
00:24:53,250 --> 00:24:56,880
want as long as it has a vote to zero so

558
00:24:56,880 --> 00:25:01,400
now I believe that this should work so

559
00:25:01,400 --> 00:25:05,750
if I put a new talk here

560
00:25:05,750 --> 00:25:08,580
inserts here in here and it's allowed

561
00:25:08,580 --> 00:25:11,510
only because we passed that insert check

562
00:25:11,510 --> 00:25:14,940
and just to prove to you that that check

563
00:25:14,940 --> 00:25:20,100
is working if we go change this to be a

564
00:25:20,100 --> 00:25:24,210
bajillion then we should not be able to

565
00:25:24,210 --> 00:25:29,490
add a new talk so that's how an allow

566
00:25:29,490 --> 00:25:31,320
rule works you can also write deny rules

567
00:25:31,320 --> 00:25:33,179
and you can write these rules for for

568
00:25:33,179 --> 00:25:36,690
inserts updates any any operation so

569
00:25:36,690 --> 00:25:39,450
when people say that meteor isn't secure

570
00:25:39,450 --> 00:25:41,250
what they're talking about is a default

571
00:25:41,250 --> 00:25:44,970
prototyping method a mode for

572
00:25:44,970 --> 00:25:47,190
prototyping that we have where you can

573
00:25:47,190 --> 00:25:49,559
write read and write any any collection

574
00:25:49,559 --> 00:25:51,990
arbitrarily from the client but as soon

575
00:25:51,990 --> 00:25:53,480
as you go out of that prototyping

576
00:25:53,480 --> 00:25:55,559
prototyping mode you have to use a

577
00:25:55,559 --> 00:25:57,510
method or write allowing deny rules to

578
00:25:57,510 --> 00:25:59,580
specify what parts of the API of the

579
00:25:59,580 --> 00:26:03,929
clients can use so we have a pretty cool

580
00:26:03,929 --> 00:26:07,679
app now and in not very much code um one

581
00:26:07,679 --> 00:26:10,500
last thing I want to show you is about

582
00:26:10,500 --> 00:26:12,090
meteor we tried it we try to make it

583
00:26:12,090 --> 00:26:13,890
really easy for developers to build the

584
00:26:13,890 --> 00:26:15,600
kind of real time fast apps I was

585
00:26:15,600 --> 00:26:18,030
talking about but part of that is also

586
00:26:18,030 --> 00:26:19,770
just making it easy to do things that

587
00:26:19,770 --> 00:26:21,600
everyone needs to do in every app and

588
00:26:21,600 --> 00:26:23,070
that are very easy to get wrong like an

589
00:26:23,070 --> 00:26:25,799
account system so we don't want everyone

590
00:26:25,799 --> 00:26:26,789
to have to write their own account

591
00:26:26,789 --> 00:26:30,030
system that's that's probably bad for a

592
00:26:30,030 --> 00:26:31,590
security and it's just a lot of wasted

593
00:26:31,590 --> 00:26:35,100
effort so we have a couple packages

594
00:26:35,100 --> 00:26:37,020
actually quite a few packages that help

595
00:26:37,020 --> 00:26:39,510
you implement an account system in very

596
00:26:39,510 --> 00:26:41,669
little code so the first thing we're

597
00:26:41,669 --> 00:26:44,400
going to do is add an accounts google

598
00:26:44,400 --> 00:26:46,679
package to our app so we're adding this

599
00:26:46,679 --> 00:26:48,539
package this is this is a core package

600
00:26:48,539 --> 00:26:50,730
and it will allow users to sign in with

601
00:26:50,730 --> 00:26:54,150
their Google account using OAuth we also

602
00:26:54,150 --> 00:26:55,710
have packages like accounts github

603
00:26:55,710 --> 00:26:57,809
accounts Facebook etc etc and there are

604
00:26:57,809 --> 00:26:59,610
other community supported packages for

605
00:26:59,610 --> 00:26:59,880
other

606
00:26:59,880 --> 00:27:01,230
ooofff providers that we don't support

607
00:27:01,230 --> 00:27:05,250
in in core so I added accounts Google

608
00:27:05,250 --> 00:27:06,600
I'm going to add another package called

609
00:27:06,600 --> 00:27:08,549
accounts UI and this Jib gives us an

610
00:27:08,549 --> 00:27:10,919
out-of-the-box UI for for users to sign

611
00:27:10,919 --> 00:27:14,200
up and login

612
00:27:14,210 --> 00:27:17,029
okay so we've added those packages now

613
00:27:17,029 --> 00:27:20,600
in my template to get this UI all I have

614
00:27:20,600 --> 00:27:26,590
to do is this so this is a this is a UI

615
00:27:26,590 --> 00:27:28,820
template helper that the accounts ui

616
00:27:28,820 --> 00:27:31,730
package gives us so after we've done

617
00:27:31,730 --> 00:27:36,200
that we see this configure button and

618
00:27:36,200 --> 00:27:37,820
this is just something you do once when

619
00:27:37,820 --> 00:27:40,340
you first deploy your app to get the to

620
00:27:40,340 --> 00:27:42,529
get the OAuth the OAuth configuration

621
00:27:42,529 --> 00:27:48,889
set up mmm okay so I have some I have

622
00:27:48,889 --> 00:27:53,179
some credentials for this toy app you

623
00:27:53,179 --> 00:27:54,980
just paste these into the configure

624
00:27:54,980 --> 00:28:03,799
dialog and you get these from the Google

625
00:28:03,799 --> 00:28:10,789
API console okay so we save our

626
00:28:10,789 --> 00:28:12,799
configuration now we have this sign-in

627
00:28:12,799 --> 00:28:18,200
button let me make it bigger again and

628
00:28:18,200 --> 00:28:24,760
now we can sign in with Google

629
00:28:24,770 --> 00:28:26,390
so now I've signed in with my Google

630
00:28:26,390 --> 00:28:28,190
identity it knows who I am

631
00:28:28,190 --> 00:28:30,920
I could similarly add github or Facebook

632
00:28:30,920 --> 00:28:32,870
log in there's also an accounts password

633
00:28:32,870 --> 00:28:34,460
package if you just want password-based

634
00:28:34,460 --> 00:28:35,960
authentication you don't want to use

635
00:28:35,960 --> 00:28:40,730
OAuth and one the last thing I'll show

636
00:28:40,730 --> 00:28:41,960
you is that we can actually use this

637
00:28:41,960 --> 00:28:44,480
user I dated you to do useful things so

638
00:28:44,480 --> 00:28:48,550
if we go we into our methods we can say

639
00:28:48,550 --> 00:28:51,260
if you're not logged in when you call

640
00:28:51,260 --> 00:28:54,790
this method then you just get an error

641
00:28:54,790 --> 00:28:58,610
so we can do that on our methods we can

642
00:28:58,610 --> 00:29:01,309
do that in our Lauer rule also so here

643
00:29:01,309 --> 00:29:04,130
we only want to return return true to

644
00:29:04,130 --> 00:29:12,230
allow the insert if you're logged in so

645
00:29:12,230 --> 00:29:14,240
now that I'm here and I guess one more

646
00:29:14,240 --> 00:29:15,440
one more thing we can do is actually

647
00:29:15,440 --> 00:29:17,690
hide the UI that you're not allowed to

648
00:29:17,690 --> 00:29:22,520
use if you are not logged in so this is

649
00:29:22,520 --> 00:29:24,290
another another template helper that the

650
00:29:24,290 --> 00:29:26,690
accounts UI package gives you which is

651
00:29:26,690 --> 00:29:30,470
that you can just you can just call

652
00:29:30,470 --> 00:29:32,720
current user to see who's logged in and

653
00:29:32,720 --> 00:29:34,460
we can hide the UI that we don't want

654
00:29:34,460 --> 00:29:43,149
the the non logged in users to see

655
00:29:43,159 --> 00:29:46,169
so now I see the UI here but over here

656
00:29:46,169 --> 00:29:47,700
when I'm logged out I don't see the up

657
00:29:47,700 --> 00:29:52,549
foot buttons and here I can upvote here

658
00:29:52,549 --> 00:30:04,310
if I try to insert a new talk directly

659
00:30:04,320 --> 00:30:08,740
I'll get an access denied

660
00:30:08,750 --> 00:30:12,000
so you might be wondering what is going

661
00:30:12,000 --> 00:30:14,250
on at the network level what is the

662
00:30:14,250 --> 00:30:15,750
actual message is being passed between

663
00:30:15,750 --> 00:30:17,910
the client and the server and you can

664
00:30:17,910 --> 00:30:19,350
actually look at them so if this

665
00:30:19,350 --> 00:30:21,240
protocol is called DDP there's a rough

666
00:30:21,240 --> 00:30:23,460
draft specification in the meteor

667
00:30:23,460 --> 00:30:26,850
repository and it runs over a soft Jas

668
00:30:26,850 --> 00:30:29,280
and on this browser which supports

669
00:30:29,280 --> 00:30:31,140
WebSockets it actually runs over

670
00:30:31,140 --> 00:30:33,360
WebSockets and you can see these are the

671
00:30:33,360 --> 00:30:36,000
messages in DDP so there's a connect

672
00:30:36,000 --> 00:30:38,700
message there's a login method that gets

673
00:30:38,700 --> 00:30:40,650
called so all this accounts UI stuff

674
00:30:40,650 --> 00:30:42,360
it's all implemented as methods just

675
00:30:42,360 --> 00:30:43,890
like the upvote and downvote methods

676
00:30:43,890 --> 00:30:46,140
that I showed you these are the

677
00:30:46,140 --> 00:30:48,000
subscription messages where the clients

678
00:30:48,000 --> 00:30:51,690
subscribing to data um you can see when

679
00:30:51,690 --> 00:30:54,870
a method gets called let me let me do

680
00:30:54,870 --> 00:30:57,930
this to call a method so you can see now

681
00:30:57,930 --> 00:30:59,910
a method gets called the upvote method

682
00:30:59,910 --> 00:31:02,180
and a result comes back from the server

683
00:31:02,180 --> 00:31:04,890
this updated message is a message to

684
00:31:04,890 --> 00:31:06,720
tell the client when all the data

685
00:31:06,720 --> 00:31:09,360
changes that the method ran are sent to

686
00:31:09,360 --> 00:31:11,520
the client so at this point the meteor

687
00:31:11,520 --> 00:31:13,530
client knows that now is the time when

688
00:31:13,530 --> 00:31:15,240
it can start figuring out if the things

689
00:31:15,240 --> 00:31:16,800
that it predicted to do during the

690
00:31:16,800 --> 00:31:18,570
method stub are actually the things that

691
00:31:18,570 --> 00:31:25,590
the server wanted it to do okay so I

692
00:31:25,590 --> 00:31:27,120
think that's about what I wanted to show

693
00:31:27,120 --> 00:31:31,230
you in the demo before I wrap up there's

694
00:31:31,230 --> 00:31:32,820
just a couple things I wanted to say

695
00:31:32,820 --> 00:31:34,410
about the future of meteor so I

696
00:31:34,410 --> 00:31:36,090
mentioned some of them already I'm

697
00:31:36,090 --> 00:31:38,310
really excited about about app log

698
00:31:38,310 --> 00:31:40,230
tailing which is going to be going to be

699
00:31:40,230 --> 00:31:42,210
a whole new level of scalability for

700
00:31:42,210 --> 00:31:44,700
meteor apps the current the mechanism

701
00:31:44,700 --> 00:31:46,410
that we have in there right now has has

702
00:31:46,410 --> 00:31:48,360
worked it's gotten a lot it's running a

703
00:31:48,360 --> 00:31:50,310
lot of production sites right now but um

704
00:31:50,310 --> 00:31:52,980
you know it's it is what it sounds like

705
00:31:52,980 --> 00:31:54,570
and we're really excited about a blog

706
00:31:54,570 --> 00:31:56,910
tailing to to be a much more scalable

707
00:31:56,910 --> 00:31:59,340
mechanism there's another project going

708
00:31:59,340 --> 00:32:01,620
on which is called meteor UI and that's

709
00:32:01,620 --> 00:32:03,720
a new rendering engine and front-end

710
00:32:03,720 --> 00:32:06,660
framework for meteor and it's it's a lot

711
00:32:06,660 --> 00:32:08,370
smarter about figuring out when to

712
00:32:08,370 --> 00:32:10,200
re-render things and it's also much more

713
00:32:10,200 --> 00:32:12,480
interoperable with other non meteor code

714
00:32:12,480 --> 00:32:14,910
that might be running on your page both

715
00:32:14,910 --> 00:32:16,800
of these projects have preview releases

716
00:32:16,800 --> 00:32:18,390
out so if you're playing around with

717
00:32:18,390 --> 00:32:21,410
meteor you can check out the meteor talk

718
00:32:21,410 --> 00:32:23,120
we'll group and there are threads on

719
00:32:23,120 --> 00:32:25,190
there for the preview releases you can

720
00:32:25,190 --> 00:32:27,890
try those out I'm trying out a new media

721
00:32:27,890 --> 00:32:29,510
release with your app is as easy as

722
00:32:29,510 --> 00:32:33,050
doing this so if I want to rollback this

723
00:32:33,050 --> 00:32:38,090
app 206 606 6 I can just do this and

724
00:32:38,090 --> 00:32:40,370
then when I run this app it'll run with

725
00:32:40,370 --> 00:32:43,820
meteor 6 6 instead of Oh 6 6 3 which is

726
00:32:43,820 --> 00:32:48,290
what it was on before so those are 2

727
00:32:48,290 --> 00:32:49,820
cool things to check out one thing which

728
00:32:49,820 --> 00:32:51,560
is not publicly available yet but it's

729
00:32:51,560 --> 00:32:52,760
the thing I've been spending most of my

730
00:32:52,760 --> 00:32:55,640
time on is this distributed deployment

731
00:32:55,640 --> 00:32:57,920
environment called galaxy and this is

732
00:32:57,920 --> 00:33:00,170
going to be an application server that

733
00:33:00,170 --> 00:33:01,940
handles auto scaling and monitoring

734
00:33:01,940 --> 00:33:04,850
provisioning all sorts of good things

735
00:33:04,850 --> 00:33:07,340
and it's been a lot of fun to work on

736
00:33:07,340 --> 00:33:09,590
where we're aiming to have some release

737
00:33:09,590 --> 00:33:11,480
of all these things out by early 2014

738
00:33:11,480 --> 00:33:17,510
with the meteor 1.0 release so I hope

739
00:33:17,510 --> 00:33:18,890
you learned something whether you've

740
00:33:18,890 --> 00:33:21,020
seen meteor before or whether this is

741
00:33:21,020 --> 00:33:22,820
the first time you've seen it I've been

742
00:33:22,820 --> 00:33:24,380
having the time of my life working on it

743
00:33:24,380 --> 00:33:25,730
so if you have any more questions about

744
00:33:25,730 --> 00:33:27,080
what's going on under the hood or how

745
00:33:27,080 --> 00:33:29,510
you can get started learning please feel

746
00:33:29,510 --> 00:33:35,540
free to ask me thank you all right Thank

747
00:33:35,540 --> 00:33:37,400
You Emily we actually have time for a

748
00:33:37,400 --> 00:33:38,870
question or two anyone have any

749
00:33:38,870 --> 00:33:43,130
questions raise your hands all right we

750
00:33:43,130 --> 00:33:49,240
have one over here

751
00:33:49,250 --> 00:33:52,230
what how does it work with you know

752
00:33:52,230 --> 00:33:54,240
other server-side code I mean I want to

753
00:33:54,240 --> 00:33:55,650
do like you know I want to send out

754
00:33:55,650 --> 00:33:58,950
email so I want to connect to make a TCP

755
00:33:58,950 --> 00:34:00,330
connection to another server how do how

756
00:34:00,330 --> 00:34:02,700
do I do that so there are a couple well

757
00:34:02,700 --> 00:34:06,960
the specific one one other trick so all

758
00:34:06,960 --> 00:34:09,149
right I'll answers to that the

759
00:34:09,149 --> 00:34:10,860
prerequisite for one of those answers is

760
00:34:10,860 --> 00:34:12,510
that there's this really third use

761
00:34:12,510 --> 00:34:13,919
called meteor deploy where you can

762
00:34:13,919 --> 00:34:16,530
deploy an app to our free hosting

763
00:34:16,530 --> 00:34:18,510
service that has absolutely no uptime

764
00:34:18,510 --> 00:34:21,629
guarantees except like someone will get

765
00:34:21,629 --> 00:34:23,280
paged if it goes down and it might be me

766
00:34:23,280 --> 00:34:25,260
but we have no guarantees about it but

767
00:34:25,260 --> 00:34:26,879
it's a great place to deploy your your

768
00:34:26,879 --> 00:34:29,010
apps and when you deploy them here you

769
00:34:29,010 --> 00:34:30,780
actually get automatically provisioned

770
00:34:30,780 --> 00:34:36,510
with a an email sending is it mailgun is

771
00:34:36,510 --> 00:34:37,889
that the thing is that a thing

772
00:34:37,889 --> 00:34:41,940
mail then ok it's just matter Melvin

773
00:34:41,940 --> 00:34:43,740
yeah anyway you automatically get an

774
00:34:43,740 --> 00:34:45,600
email sending API which is built into

775
00:34:45,600 --> 00:34:46,740
the meteor Cora and which is

776
00:34:46,740 --> 00:34:48,000
automatically provisioned with a

777
00:34:48,000 --> 00:34:50,070
third-party service when you deploy here

778
00:34:50,070 --> 00:34:51,419
I don't think that's really the answer

779
00:34:51,419 --> 00:34:54,240
your question though um there are a

780
00:34:54,240 --> 00:34:56,490
variety of ways you can drop in you can

781
00:34:56,490 --> 00:34:59,820
drop in any NPM module so in your um oh

782
00:34:59,820 --> 00:35:01,890
so now you can all go play with this and

783
00:35:01,890 --> 00:35:06,790
be brutal

784
00:35:06,800 --> 00:35:11,550
okay that's live okay oh but we need an

785
00:35:11,550 --> 00:35:12,990
API key okay you can't be brutal yet

786
00:35:12,990 --> 00:35:16,670
anyway okay so in your server code um

787
00:35:16,670 --> 00:35:20,310
you can do something like like what's

788
00:35:20,310 --> 00:35:27,550
your favorite NPM module mr. coffee

789
00:35:27,560 --> 00:35:30,210
um you can you can you can drop in any

790
00:35:30,210 --> 00:35:32,490
npm module you want um

791
00:35:32,490 --> 00:35:34,770
you can package any code that you want

792
00:35:34,770 --> 00:35:36,390
as a meteor package there's not very

793
00:35:36,390 --> 00:35:37,890
much to that you just need to make a

794
00:35:37,890 --> 00:35:42,330
single manifest file there is also the

795
00:35:42,330 --> 00:35:44,130
biggest problem that people have I think

796
00:35:44,130 --> 00:35:47,100
is that meteor code all runs in fibers

797
00:35:47,100 --> 00:35:50,430
and a lot of pure node code does not so

798
00:35:50,430 --> 00:35:52,230
we provide some wrapper utilities too

799
00:35:52,230 --> 00:35:54,090
for example if you call a third party a

800
00:35:54,090 --> 00:35:56,910
third party um API and you pass it a

801
00:35:56,910 --> 00:35:59,070
callback we give you a helper that wraps

802
00:35:59,070 --> 00:36:01,080
your callback in a fiber for you so you

803
00:36:01,080 --> 00:36:02,400
don't really have to think about fibers

804
00:36:02,400 --> 00:36:05,730
all that much okay and people are

805
00:36:05,730 --> 00:36:07,650
wondering if he could actually vote on

806
00:36:07,650 --> 00:36:10,290
that list I hear just someone betting

807
00:36:10,290 --> 00:36:15,840
ten bucks on Leia okay okay let me put

808
00:36:15,840 --> 00:36:23,820
in people are gonna be very people's

809
00:36:23,820 --> 00:36:25,430
feelings they're gonna get very hurt

810
00:36:25,430 --> 00:36:34,070
it's not my fault

811
00:36:34,080 --> 00:36:38,990
all right it's all yours

812
00:36:38,990 --> 00:36:42,840
again that's talk judge dot meteor danke

813
00:36:42,840 --> 00:36:46,020
oh it's not all yours okay I will I will

814
00:36:46,020 --> 00:36:48,090
set it up and I have to change them

815
00:36:48,090 --> 00:36:50,060
because I set it up for localhost oh I

816
00:36:50,060 --> 00:36:52,470
like put in the chat or something

817
00:36:52,470 --> 00:36:54,570
boy if anyone has any more questions

818
00:36:54,570 --> 00:36:56,430
Emily's gonna be going around it's Iran

