1
00:00:22,460 --> 00:00:28,430
Welcome to my talk on Async and streaming
JavaScript, are we doing it wrong.

2
00:00:28,430 --> 00:00:32,500
Of course the answer is always going to be
yes, otherwise why am I standing on stage

3
00:00:32,500 --> 00:00:39,530
here, what better picture than to know John
McCarthy telling us we're exactly doing programming

4
00:00:39,530 --> 00:00:41,270
wrong.

5
00:00:41,270 --> 00:00:46,930
So before I get started I actually want to
thank the organizers very much, because, of

6
00:00:46,930 --> 00:00:55,480
course, this is my first time speaking here,
but I've been coming here since 2010 and without

7
00:00:55,480 --> 00:01:01,280
a conference such as this things like no J
S on windows might not have happened or might

8
00:01:01,280 --> 00:01:03,839
not have happened as quickly as it did.

9
00:01:03,839 --> 00:01:08,730
It's with this very conference that it's really
amazing stuff to me.

10
00:01:08,730 --> 00:01:17,280
So, what I'm talking about Async or Async
or vent‑based programs, I think to myself,

11
00:01:17,280 --> 00:01:23,500
I thought I had a problem, I know, I'll solve
it with call backs and events.

12
00:01:23,500 --> 00:01:29,220
Now have I problems, two I, yeah ...

13
00:01:29,220 --> 00:01:30,770
crap! Yeah.

14
00:01:30,770 --> 00:01:38,110
The con currency bugs, been bugging me since
I started doing JavaScript.

15
00:01:38,110 --> 00:01:46,250
What this talk will not be it will not be
a Monad tutorial, no mention of category theory,

16
00:01:46,250 --> 00:01:53,869
it doesn't require you to know much about
functional programming to really get started.

17
00:01:53,869 --> 00:01:57,659
To learning new abstractions for asink nows
programming.

18
00:01:57,659 --> 00:02:04,219
So,\h‑‑ Asyncous programming, no they're
not like Burritos or any other way you can

19
00:02:04,219 --> 00:02:06,630
think of to describe Monads.

20
00:02:06,630 --> 00:02:15,730
I'm a software engineer, self described Open
Sourcerer, you can find me on Twitter and

21
00:02:15,730 --> 00:02:23,590
GitHub, using the same tag, I'm fairly unoriginal
that way.

22
00:02:23,590 --> 00:02:28,760
And I work for this small start up out of
the Seattle Washington area.

23
00:02:28,760 --> 00:02:32,709
I don't know if you've heard of them they're
called Microsoft.

24
00:02:32,709 --> 00:02:38,239
And I like to think of myself as putting a
little bit of metal back in Microsoft.

25
00:02:38,239 --> 00:02:44,410
Add Umlauds to anything automatically turns
it into metal.

26
00:02:44,410 --> 00:02:51,460
I worked on a project called the reactive
extensions, I've been working on this since

27
00:02:51,460 --> 00:03:00,209
120, the idea behind the reactive extensions
is really to create a nice programming language

28
00:03:00,209 --> 00:03:09,889
agnostic way of dealing with Asyncous programming,
and I am an Rx pusher.

29
00:03:09,889 --> 00:03:16,510
Now, really what I want to get through first
is that I want some quotes that will help

30
00:03:16,510 --> 00:03:18,209
us in our learnings today.

31
00:03:18,209 --> 00:03:25,870
The first one is to be conscious that you
are ignorant is a step towards knowledge.

32
00:03:25,870 --> 00:03:30,840
The next one is ignorance never settles a
question.

33
00:03:30,840 --> 00:03:35,900
And the third one is the best way to become
acquainted with a subject is to write a book

34
00:03:35,900 --> 00:03:36,900
about it.

35
00:03:36,900 --> 00:03:40,930
Or in my case, get up here and give a talk
about it.

36
00:03:40,930 --> 00:03:48,040
And this was given by the Prime Minister of
the UK back in the 19th century.

37
00:03:48,040 --> 00:03:54,430
So, let's just face it, asynchronous programming
as we know it today is annoying, because by

38
00:03:54,430 --> 00:03:59,430
themselves you have every library and every
certain thing doing it's own thing, whether

39
00:03:59,430 --> 00:04:06,209
it's call backs and promises doing one thing
where it's yielding a single value verse events

40
00:04:06,209 --> 00:04:11,919
where there's dealing with multiple values
so each concept is covering it's own little

41
00:04:11,919 --> 00:04:15,070
piece of the story, not the whole piece.

42
00:04:15,070 --> 00:04:20,510
So just to kind of give you an example here,
you'd certainly wouldn't call a promise on

43
00:04:20,510 --> 00:04:26,900
an event that you expect for more than one
of just as you wouldn't, you wouldn't normally

44
00:04:26,900 --> 00:04:30,800
need a collection to describe a single value.

45
00:04:30,800 --> 00:04:37,020
But, even more than that, how about if I want
to make a web request and then combine that

46
00:04:37,020 --> 00:04:42,840
with getting the key press event so that I
can send my data over to that and then we

47
00:04:42,840 --> 00:04:46,680
need to make sure that we're not overloading
the server.

48
00:04:46,680 --> 00:04:52,810
How do we think about that when we're just
talked about promises, call backs, timers,

49
00:04:52,810 --> 00:04:54,800
etc., how do we deal with that.

50
00:04:54,800 --> 00:05:00,750
Is there a better way that we can think about
asynchronous and event‑based programming?

51
00:05:00,750 --> 00:05:09,080
Well, we had a very forward thinking president
in the United States who the early '60s came

52
00:05:09,080 --> 00:05:11,300
to this very city and said.

53
00:05:11,300 --> 00:05:18,830
ch Eii Berliner, we also said we chose to
solve asynchronous programming not because

54
00:05:18,830 --> 00:05:28,150
it's easy but because they're hard\h‑‑
citation needed\h‑‑ damn it Wikipedia.

55
00:05:28,150 --> 00:05:31,750
So call back hell is very much a real thing.

56
00:05:31,750 --> 00:05:38,180
So, when you're dealing with call back hell
you've got nested function after nested function

57
00:05:38,180 --> 00:05:42,500
where you're trying to accomplish something
Lynn I can't recallly, so for example\h‑‑

58
00:05:42,500 --> 00:05:43,500
linearly.

59
00:05:43,500 --> 00:05:49,370
So for here, I might want to play a movie,
what that entails is making sure that the

60
00:05:49,370 --> 00:05:56,750
players initialized that I'm authorized to
do so, then when I'm done it authorizes me

61
00:05:56,750 --> 00:05:59,949
with a movie ticket.

62
00:05:59,949 --> 00:06:03,469
And what you end up with a cow's head.

63
00:06:03,469 --> 00:06:08,379
All your code all it looks like is just a
cow's head at that point, somewhere the logic

64
00:06:08,379 --> 00:06:09,870
gets lost.

65
00:06:09,870 --> 00:06:12,340
And it's se evil.

66
00:06:12,340 --> 00:06:19,229
So I don't know about you, when ever I write
code like that, this usually happens.

67
00:06:19,229 --> 00:06:28,979
And it's not easy to recover from getting
bush burned like that.

68
00:06:28,979 --> 00:06:34,250
And just as well, event‑based programming
is just as annoying, say for example we want

69
00:06:34,250 --> 00:06:40,759
to create a drag event, a custom kind of event
that we do on our own, so what we would need

70
00:06:40,759 --> 00:06:45,279
for that, we would need to say whether the
mouse is down or not have some stay test to

71
00:06:45,279 --> 00:06:47,949
where the mouse is.

72
00:06:47,949 --> 00:06:52,620
Then in the mouse down we would have to say,
okay, spouse down, here's with we started,

73
00:06:52,620 --> 00:06:58,319
mouse move, we go, okay, mouse is down, let's
do some calculations and on a mouse up, we

74
00:06:58,319 --> 00:07:01,860
say, everything's done, we're good to go.

75
00:07:01,860 --> 00:07:08,940
And we have to, of course, not only add the
event listeners, but we also have to remove

76
00:07:08,940 --> 00:07:11,270
them as well.

77
00:07:11,270 --> 00:07:15,930
And that gets pretty darn annoying.

78
00:07:15,930 --> 00:07:22,060
And so when you're dealing with that much
state, once again you're juggling and you

79
00:07:22,060 --> 00:07:24,270
just can't hold it.

80
00:07:24,270 --> 00:07:31,240
Especially when you're just trying to do something
else\h‑‑ add something new to your program,

81
00:07:31,240 --> 00:07:34,120
that's what you end up with.

82
00:07:34,120 --> 00:07:44,199
So let's talk a little bit asynchronous programming
landscape, the landscape in general.

83
00:07:44,199 --> 00:07:50,810
Two accessese siss, one to describe synchronous
and one to describe asynchronous behavior,

84
00:07:50,810 --> 00:07:55,699
one to describe a single value and one to
say it's multiple.

85
00:07:55,699 --> 00:08:02,110
For example, when you're dealing with a value
you call a function or you assign it a value,

86
00:08:02,110 --> 00:08:04,309
that's a value, good.

87
00:08:04,309 --> 00:08:12,939
An iterble is a collection so in JavaScript
we have arrays, we have maps, sets, arguments,

88
00:08:12,939 --> 00:08:18,060
anything that's iterble here, and then we
can apply higher order operation such as map,

89
00:08:18,060 --> 00:08:20,339
filter and for each.

90
00:08:20,339 --> 00:08:27,770
But what about asynchronous single values,
we have call backs but we also have promises,

91
00:08:27,770 --> 00:08:33,880
now promises are very interesting in the fact
that now instead of the call back function,

92
00:08:33,880 --> 00:08:38,210
you have a first class object that you can
pass around the people that describes what

93
00:08:38,210 --> 00:08:41,419
that value eventually will be.

94
00:08:41,419 --> 00:08:45,270
And that's not something you can necessarily
do with a call back, I can't hand you a call

95
00:08:45,270 --> 00:08:50,590
back and say this represents a value, doesn't
work that way.

96
00:08:50,590 --> 00:08:56,370
And then what I'll put in the fourth quadrant
and final quadrant is observable, now observable

97
00:08:56,370 --> 00:09:03,020
as you will see is asynchronous in it's very
nature so you can take the same stock data,

98
00:09:03,020 --> 00:09:08,700
you can filter it, map it, and you can four
each it, no code changed at all in terms of

99
00:09:08,700 --> 00:09:13,550
what you're coding on the client, non, nothing,
whatsoever.

100
00:09:13,550 --> 00:09:19,781
That's very, very intentional about what we've
done with the observable design, so if you

101
00:09:19,781 --> 00:09:27,620
know how to program against collections then
you know how to program against observables.

102
00:09:27,620 --> 00:09:32,520
What I like to say, a lot of the times is
that your mouse is also a database, it's a

103
00:09:32,520 --> 00:09:39,350
database of coordinates you'll get eventually
when the mouse moves, it should be as querible

104
00:09:39,350 --> 00:09:42,500
as an iterative sequence is.

105
00:09:42,500 --> 00:09:49,630
So, the thing that I like about these abstractions
is that they're first class.

106
00:09:49,630 --> 00:09:55,160
And then what it means by first class is the
fact that I can pass one of these objects

107
00:09:55,160 --> 00:10:02,700
whether it's an observable, or it's a promise
to a function and I can also return it from

108
00:10:02,700 --> 00:10:04,180
a function.

109
00:10:04,180 --> 00:10:10,410
And so what that gives us it gives us a lot
of little flexibility when it comes to querying

110
00:10:10,410 --> 00:10:16,870
something or for testing for mocking whatever
else it is, it's really nice for us to do

111
00:10:16,870 --> 00:10:17,870
that.

112
00:10:17,870 --> 00:10:23,700
Now, promises, I'm sure you've heard a lot
about, I hear already, I've seen it mentioned

113
00:10:23,700 --> 00:10:26,180
a good number of talks already.

114
00:10:26,180 --> 00:10:30,680
Now promises are great because they're pretty
much in every single library that are out

115
00:10:30,680 --> 00:10:37,880
there nowadays, and that have pretty much
the same behavior outside of jQuery, they

116
00:10:37,880 --> 00:10:43,040
have pretty much the same behavior so you
can think about them pretty much the same,

117
00:10:43,040 --> 00:10:51,040
asynchronous handled, and once you're done,
it's done, everyone gets the same answer,

118
00:10:51,040 --> 00:10:56,640
so we can take the previous thing that we
talked about, the call back hell and distill

119
00:10:56,640 --> 00:11:01,840
it down to the player initialized authorizing
the movie, if you're handling the log‑inner

120
00:11:01,840 --> 00:11:05,580
report, playing the movie saying you're unauthorized.

121
00:11:05,580 --> 00:11:13,330
No more trying to finish and detecting whether
this state is available or not.

122
00:11:13,330 --> 00:11:19,740
But, there's some problems I have, at least,
when it comes to promises, promises don't

123
00:11:19,740 --> 00:11:21,130
solve everything.

124
00:11:21,130 --> 00:11:27,770
So, for example cancellation is not a part
of the contract for promises in ES 6.

125
00:11:27,770 --> 00:11:33,310
Why? Because there are a good number of reasons
you want most people to fall into the happy

126
00:11:33,310 --> 00:11:39,280
path and be pretty productive, but it's very
much the case when you deal with a lot of

127
00:11:39,280 --> 00:11:47,930
things such as dealing with IO where cooperationlation
is a normal part of what do you and what about

128
00:11:47,930 --> 00:11:52,190
situations with an auto complete that you
just don't care about the value that comes

129
00:11:52,190 --> 00:11:53,190
back.

130
00:11:53,190 --> 00:11:59,980
In this particular case here, how do I cancel
that again? I don't\h‑‑ I'm not really

131
00:11:59,980 --> 00:12:07,130
interested in this anymore? I I don't know
so do I create a cancellation promise and

132
00:12:07,130 --> 00:12:14,170
I sub class the regular promise? Do I mass
a cancellation token? Do I\h‑‑ or do I

133
00:12:14,170 --> 00:12:21,100
just use a library like last from Donmick
Dencola, all of those are perfectly optionble

134
00:12:21,100 --> 00:12:22,100
options.

135
00:12:22,100 --> 00:12:30,690
When I talk about reactive programming, it's
a very kind of fuzz city definition just like

136
00:12:30,690 --> 00:12:32,630
functional programming is.

137
00:12:32,630 --> 00:12:37,820
Says functional programming, application of
functions, not helpful.

138
00:12:37,820 --> 00:12:43,670
So what we're trying to do is trying to figure
out exactly what we could call reactive programming.

139
00:12:43,670 --> 00:12:52,120
So, the dictionary says readily responds to
a stimulus, well isn't that just normal programming?

140
00:12:52,120 --> 00:12:57,700
What else is interesting about it? Well, reacting
to events is certainly one thing that reactive

141
00:12:57,700 --> 00:13:04,330
applications do, but they also react to load,
so the fact is that you can spin up more instances

142
00:13:04,330 --> 00:13:09,990
to handle data, you can determine whether
you need to drop data and so forth.

143
00:13:09,990 --> 00:13:17,880
You can react to failure, so if at any point
that you need to handle some errors and return

144
00:13:17,880 --> 00:13:20,300
it from cache, you can certainly do that.

145
00:13:20,300 --> 00:13:26,320
But, to me, most importantly is reacting to
your user.

146
00:13:26,320 --> 00:13:32,370
The last thing you want to do is have your
JavaScript page be unresponsive to a particular

147
00:13:32,370 --> 00:13:33,370
user.

148
00:13:33,370 --> 00:13:40,240
And, what I'd like to say is, you know, the
reactive extension stuff that I've done has

149
00:13:40,240 --> 00:13:45,680
played a little bit of a role, there's a lot
of hype, obviously around there with Gartner

150
00:13:45,680 --> 00:13:51,000
and so forth with reactive programming, when
I talk about reactive programming here, I'm

151
00:13:51,000 --> 00:13:57,450
just talking about observables, why don't
we take the previous example of that mouse

152
00:13:57,450 --> 00:14:03,540
drag and kind of turn it inside out and turn
it in to an observable solution, what would

153
00:14:03,540 --> 00:14:09,670
it look like? Well, if we had this first class
object of the mouse down, we can take that

154
00:14:09,670 --> 00:14:16,350
and combine\h‑‑ and start to do a calculus
so flat map will basically it will take a

155
00:14:16,350 --> 00:14:23,220
sequence and it will flatten it into a single
value or a single stream of values rather.

156
00:14:23,220 --> 00:14:27,990
We can calculate the offset of where we started
for every mouse down.

157
00:14:27,990 --> 00:14:32,820
Now, we can start to take the mouse moves
by once again using functional programming

158
00:14:32,820 --> 00:14:38,250
things that we already know with using arrays,
and the array extras we can say take the mouse

159
00:14:38,250 --> 00:14:44,730
move, which is also another first class object,
map it so we can design to give the left and

160
00:14:44,730 --> 00:14:48,210
the top so the total differential between
the two.

161
00:14:48,210 --> 00:14:49,210
Okay.

162
00:14:49,210 --> 00:14:50,210
Pretty good.

163
00:14:50,210 --> 00:14:56,000
So, the problem is we'll be going like this
and then forever it'll keep ongoing because

164
00:14:56,000 --> 00:14:58,590
it never responds to the mouse up.

165
00:14:58,590 --> 00:15:02,380
But we can fix that by saying take until mouse
up.

166
00:15:02,380 --> 00:15:08,740
So mouse up, once again, a first class object,
we can say when ever this fires stop the sequence,

167
00:15:08,740 --> 00:15:10,590
we're done.

168
00:15:10,590 --> 00:15:17,250
And even holds a little bit more promise sufficient
it to say when you're dealing with promises.

169
00:15:17,250 --> 00:15:25,490
So, what if we want to take some input as
it were, take the inputs value and then we're

170
00:15:25,490 --> 00:15:32,210
going to call\h‑‑ make an auto complete
scenario here, what we want to do is we don't

171
00:15:32,210 --> 00:15:39,310
want to overload the server because our Bandwidth
is time and money, quite honestly, so what

172
00:15:39,310 --> 00:15:45,040
do we need to do to fix that, well, we have
things such as throttle,throttle or debounce

173
00:15:45,040 --> 00:15:50,930
as most people know it where you can type,
type, type, stop for half a second and suddenly

174
00:15:50,930 --> 00:15:52,050
it'll fire.

175
00:15:52,050 --> 00:15:53,050
Excellent.

176
00:15:53,050 --> 00:15:59,440
So, if\h‑‑ when we're thinking about observables,
we're thinking about once again back to the

177
00:15:59,440 --> 00:16:04,660
access there, we have the observable and we
have the observable and the notion of acinous

178
00:16:04,660 --> 00:16:15,150
or time based we can get the value (Asynchronous
did) we can call a service which might be

179
00:16:15,150 --> 00:16:18,750
a promise only getting the last one.

180
00:16:18,750 --> 00:16:23,530
So one of the biggest problem problems with
asynchronous programming is what? Is that

181
00:16:23,530 --> 00:16:32,480
you are dealing with the fact that you could
get out of order responses and this fixes

182
00:16:32,480 --> 00:16:35,620
and then you bind that to the UI and you're
good to go.

183
00:16:35,620 --> 00:16:41,540
Even more complex things, I'm not going to
bother explaining all of this, even more complex

184
00:16:41,540 --> 00:16:48,870
things such as poling for more updates that's
complicated by RX handles it just fine.

185
00:16:48,870 --> 00:16:53,260
What we fled to know is everything's a stream.

186
00:16:53,260 --> 00:16:59,130
It's a very zen like moment, you're like,
yes, I got this.

187
00:16:59,130 --> 00:17:07,360
This is not to be confused with FRP, FRP is
a notion of continuous time, behaviors are

188
00:17:07,360 --> 00:17:15,750
objects with a continuous piece of time, and
a continuous value, whereas events are different.

189
00:17:15,750 --> 00:17:19,110
Events only have values when they fire.

190
00:17:19,110 --> 00:17:24,720
And most of those\h‑‑ what it is not,
it is not just any old library that has map

191
00:17:24,720 --> 00:17:30,330
filter and reduce on observables, so most
FRP libraries aren't.

192
00:17:30,330 --> 00:17:33,760
So, what about generators.

193
00:17:33,760 --> 00:17:39,620
So, I'm sure that a lot of people have seen
what generator cans do, and so yield suspends

194
00:17:39,620 --> 00:17:45,409
the functiontion and resumes when you actually
get the value back, and a number of libraries

195
00:17:45,409 --> 00:17:47,100
already support this.

196
00:17:47,100 --> 00:17:56,169
Well, the library that I work on does it as
well, as well as Q Co you can say retry three

197
00:17:56,169 --> 00:18:04,340
times here and you still get the benefit of
observables, yet you get a very linear imperative

198
00:18:04,340 --> 00:18:05,340
style.

199
00:18:05,340 --> 00:18:13,690
CSP, Eh, I'm okay, on it, it's interesting,
but a lot of people seem to love CAR.Async,

200
00:18:13,690 --> 00:18:20,049
they seem to think that it's a good win.

201
00:18:20,049 --> 00:18:26,100
Like I said, I'm not all that amused by it
because it makes error handling very manual,

202
00:18:26,100 --> 00:18:29,970
it makes resource management very manual.

203
00:18:29,970 --> 00:18:33,789
Not a far.

204
00:18:33,789 --> 00:18:41,419
Asink await also is very worthwhile in terms
of discovering what's new in JavaScript.

205
00:18:41,419 --> 00:18:47,389
So what we have is we have Async await which
has been approved for ES 7, at least the first

206
00:18:47,389 --> 00:18:49,429
stage.

207
00:18:49,429 --> 00:18:55,929
We can now take some animations and we can
start to await each one as it comes through.

208
00:18:55,929 --> 00:18:57,120
That's pretty powerful.

209
00:18:57,120 --> 00:19:01,179
So it makes it explicit that we're dealing
with an asin crow next so we don't have to

210
00:19:01,179 --> 00:19:09,929
deal with function star and yield stuff, it
makes it very, very obvious.

211
00:19:09,929 --> 00:19:12,730
Now let's QUICly talk about stream processing.

212
00:19:12,730 --> 00:19:18,170
Now, when you near node, I don't know how
many people dealt with streams 1, but let's

213
00:19:18,170 --> 00:19:20,990
face it, it was awful.

214
00:19:20,990 --> 00:19:27,410
The pause didn't, data didn't start meetly,
can't consume a number of bytes, everything

215
00:19:27,410 --> 00:19:28,940
was just shoved at you.

216
00:19:28,940 --> 00:19:30,940
Pause and resume was impossible.

217
00:19:30,940 --> 00:19:46,380
It was basically this (Laughing) so, then
we got streams 2 which land in the 0.9 and

218
00:19:46,380 --> 00:19:55,340
eventually the stable 0.10, supported object
mode, instant now and everything was good,

219
00:19:55,340 --> 00:20:01,409
then we got readable/writable classes, which
was good, duplex and pass throughs and streams

220
00:20:01,409 --> 00:20:14,100
33 and a third when ever they decide to land
and V 0.12 (Giggles) I'm sure that'll solve

221
00:20:14,100 --> 00:20:15,159
everything too.

222
00:20:15,159 --> 00:20:21,720
Cork, uncork pretty cool stuff in terms of
being able to deal with mass data rights.

223
00:20:21,720 --> 00:20:29,179
Still, to me, it's too employment Kateed.

224
00:20:29,179 --> 00:20:35,190
So, the whatWG streams, what they're trying
to do is trying to standardize a lot of this

225
00:20:35,190 --> 00:20:42,850
for lower level APIs for what's going into
the browsers, so come nick, who is here\h‑‑

226
00:20:42,850 --> 00:20:50,019
Domnik is here, he's working on that and it's
working on lower level IO, and cast which

227
00:20:50,019 --> 00:20:59,289
means one person reads, one person writes
(Uniany cast) can we take and generalize what

228
00:20:59,289 --> 00:21:05,360
we're trying to do here into a more general
kind of thing where we're talking about like

229
00:21:05,360 --> 00:21:06,360
observables.

230
00:21:06,360 --> 00:21:12,910
And the answer is yes, and the answer, unfortunately
is dart.

231
00:21:12,910 --> 00:21:18,490
Dart is doing those kind of things where asynchronous
programming they do with futures and streams

232
00:21:18,490 --> 00:21:26,049
automatically, so futures, great, streams,
unify.O and vents together.

233
00:21:26,049 --> 00:21:37,370
So literally, your Oparin (Unify I/O) you
can use the same API throughout all of them.

234
00:21:37,370 --> 00:21:43,499
Now reactive streams is an effort that's going
on because a lot of people in the observable

235
00:21:43,499 --> 00:21:50,269
world say, well you can't do back pressure,
can you? Because I mean come on you deal with

236
00:21:50,269 --> 00:21:57,420
a lot of people handling your data, we can't
possibly\h‑‑ we can't possibly know how

237
00:21:57,420 --> 00:21:58,730
to deal with this.

238
00:21:58,730 --> 00:22:04,820
You know, a node and others have it very easy
where you have one coming in, one going out

239
00:22:04,820 --> 00:22:09,049
that if you kind of crimp the hose, that's
fine, no big deal.

240
00:22:09,049 --> 00:22:15,269
But when you're dealing with a multi‑cast
situation, it kind of is a big deal.

241
00:22:15,269 --> 00:22:19,700
With observables we have notions of back pressure,
they could be lassi, possible, sampling throttling,

242
00:22:19,700 --> 00:22:30,350
they could be lossless, so I could pauseble
buffer, pause and resume, or control, so for

243
00:22:30,350 --> 00:22:36,960
example here, I can take my chatty observable,
pauseble buffer it, then pause and resume,

244
00:22:36,960 --> 00:22:42,049
and anything that happened in between the
pause and resume I still get.

245
00:22:42,049 --> 00:22:47,429
And just as well while we're building it into
the very core part each subscription will

246
00:22:47,429 --> 00:22:53,559
be able to say I want to request "N" number
of items, so once again back pressure is something

247
00:22:53,559 --> 00:22:57,539
that we have definitely under our belt.

248
00:22:57,539 --> 00:23:04,480
Now where do we go from here? I think there's
actually a lot of places we can go because

249
00:23:04,480 --> 00:23:11,100
of the fact that Async away\h‑‑ all these
things are pushing the envelope.

250
00:23:11,100 --> 00:23:17,720
And that's really cool thing, but what if
we could go even further? So in: Seven Jafar

251
00:23:17,720 --> 00:23:28,660
Husain a member of the ES 39 communication
committee proposed Async generators in which

252
00:23:28,660 --> 00:23:37,730
we could take that very same mouse/drag and
put it into the for/on kind of syntax so you

253
00:23:37,730 --> 00:23:45,129
could say let mouse donee down on element
mouse down, that first class object, document.mouse

254
00:23:45,129 --> 00:23:52,470
move, first class object, taken till document.mouse
ups, yield the mouse move.

255
00:23:52,470 --> 00:23:54,250
Good.

256
00:23:54,250 --> 00:24:00,320
So that to me is very, very interesting and
I think there are a lot of places that we

257
00:24:00,320 --> 00:24:02,720
can go with these kinds of approaches.

258
00:24:02,720 --> 00:24:05,239
So ...

259
00:24:05,239 --> 00:24:10,139
I will be upstairs if anyone has any questions
or if anyone wants an RX sticker come find

