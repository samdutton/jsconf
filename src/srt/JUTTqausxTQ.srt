1
00:00:00,170 --> 00:00:02,500
Weakest Link
By

2
00:00:24,900 --> 00:00:25,900
[ Applause ]
Here it comes.

3
00:00:25,900 --> 00:00:26,900
Sorry about that.

4
00:00:26,900 --> 00:00:27,900
Yeah, let's get going.

5
00:00:27,900 --> 00:00:29,631
We're obviously a little bit late, but we'll
recoup the time.

6
00:00:29,631 --> 00:00:30,631
>> I need your computer too.

7
00:00:30,631 --> 00:00:31,631
>> It was my machine.

8
00:00:31,631 --> 00:00:32,631
>> I want to see what I'm doing.

9
00:00:32,631 --> 00:00:33,631
>> I get random messages.

10
00:00:33,631 --> 00:00:34,631
I turned off Slack.

11
00:00:34,631 --> 00:00:35,631
So don't mess it up too much.

12
00:00:35,631 --> 00:00:36,631
>> Yeah, I do.

13
00:00:36,631 --> 00:00:37,631
>> Okay.

14
00:00:37,631 --> 00:00:38,631
Typing a very long URL.

15
00:00:38,631 --> 00:00:39,631
The lucky thing is, it's nothing to do with
my computer.

16
00:00:39,631 --> 00:00:40,631
No, no.

17
00:00:40,631 --> 00:00:41,631
I need to open my presentation so that I see
it.

18
00:00:41,631 --> 00:00:42,631
Here we are.

19
00:00:42,631 --> 00:00:43,631
They will switch it for me.

20
00:00:43,631 --> 00:00:44,631
So it will be a little confusing.

21
00:00:44,631 --> 00:00:45,631
>> Makeshift.

22
00:00:45,631 --> 00:00:46,631
Whoop.

23
00:00:46,631 --> 00:00:47,631
>> So everything is broken.

24
00:00:47,631 --> 00:00:48,631
Yeah, sorry for this.

25
00:00:48,631 --> 00:00:49,631
Yeah.

26
00:00:49,631 --> 00:00:50,631
I will talk today about my thoughts of what
is the weakest link in our trust chain in

27
00:00:50,631 --> 00:00:51,631
the web platform.

28
00:00:51,631 --> 00:00:52,631
This is regarding� we will not see any code
of JavaScript or anything else.

29
00:00:52,631 --> 00:00:53,631
It's more a thought model and it brought me
so some insights which we will see later.

30
00:00:53,631 --> 00:01:02,799
So the first question I asked to myself was,
why we trust in our keys we use for doors

31
00:01:02,799 --> 00:01:06,520
and other things?

32
00:01:06,520 --> 00:01:18,270
And I continued and said, okay, there might
be other locks that we also trust in.

33
00:01:18,270 --> 00:01:23,000
Next.

34
00:01:23,000 --> 00:01:29,090
So there are quite a lot of other locks coming
up.

35
00:01:29,090 --> 00:01:31,310
So we have these things.

36
00:01:31,310 --> 00:01:36,340
Which is a broken� a bad lock in Firefox.

37
00:01:36,340 --> 00:01:38,539
Which looks like that.

38
00:01:38,539 --> 00:01:40,670
Another one.

39
00:01:40,670 --> 00:01:41,729
Next.

40
00:01:41,729 --> 00:01:44,840
And the green lock in Firefox.

41
00:01:44,840 --> 00:01:46,049
It looks like that.

42
00:01:46,049 --> 00:01:47,049
Another time, next.

43
00:01:47,049 --> 00:01:51,580
And we have Chrome, hopefully a Chrome.

44
00:01:51,580 --> 00:01:53,459
Please.

45
00:01:53,459 --> 00:01:59,090
[ Laughter ]
What's that?

46
00:01:59,090 --> 00:02:03,560
So we have a Chrome lock� Ah.

47
00:02:03,560 --> 00:02:04,560
I have to run.

48
00:02:04,560 --> 00:02:06,100
[Cheering and applause]
Yeah, my system is locking at that.

49
00:02:06,100 --> 00:02:09,890
I don't know why� if I click it blocks the
system.

50
00:02:09,890 --> 00:02:10,890
Okay.

51
00:02:10,890 --> 00:02:11,890


52
00:02:11,890 --> 00:02:20,300
[ Applause ]
I can do this from behind.

53
00:02:20,300 --> 00:02:21,819
Yep.

54
00:02:21,819 --> 00:02:23,340
No.

55
00:02:23,340 --> 00:02:24,860
Running!

56
00:02:24,860 --> 00:02:30,230
A broken lock is less trustworthy.

57
00:02:30,230 --> 00:02:37,019
[ Applause ]
Thanks!

58
00:02:37,019 --> 00:02:40,420
Yeah.

59
00:02:40,420 --> 00:02:44,010
That's one of my questions.

60
00:02:44,010 --> 00:02:45,610
Is this less trustful?

61
00:02:45,610 --> 00:02:49,890
Okay, a connection is not secure, what does
it mean?

62
00:02:49,890 --> 00:02:57,470
Basically, it means nothing.

63
00:02:57,470 --> 00:03:00,819
And then also other people thinking about
these.

64
00:03:00,819 --> 00:03:07,710
You can read that and it says, basically,
your information is traveling the Internet.

65
00:03:07,710 --> 00:03:13,520
And it could be� and that's a very important
thing� it could be that this is not very

66
00:03:13,520 --> 00:03:15,940
secure or safe.

67
00:03:15,940 --> 00:03:20,750
That just says to me, okay, there are some
concerns possible.

68
00:03:20,750 --> 00:03:26,969
The nice thing� I also discovered the others
never mention such a thing.

69
00:03:26,969 --> 00:03:28,750
It's only in Firefox.

70
00:03:28,750 --> 00:03:30,070
Yeah.

71
00:03:30,070 --> 00:03:36,379
What's happened� that was the next question
I asked to myself� what happens to your

72
00:03:36,379 --> 00:03:44,280
trust when you know what� that there are
copies of your key out?

73
00:03:44,280 --> 00:03:52,220
Basically, it means you come home and your
space is empty and nothing is broken.

74
00:03:52,220 --> 00:03:53,500
Of course, that could happen.

75
00:03:53,500 --> 00:03:59,129
If somebody else has a key, he can open it
and steal whatever he wants.

76
00:03:59,129 --> 00:04:00,230
Or put new stuff in.

77
00:04:00,230 --> 00:04:02,739
That's also possible.

78
00:04:02,739 --> 00:04:11,900
But generally, in that case, we have a problem
with trusting in our locks and keys.

79
00:04:11,900 --> 00:04:18,470
That's what's happening if we know that there
are some copies of our keys out.

80
00:04:18,470 --> 00:04:23,940
And so gain back access, the only solution
we have, we can exchange the lock and the

81
00:04:23,940 --> 00:04:27,940
key in total.

82
00:04:27,940 --> 00:04:32,070
And out of this there was a new question coming
up.

83
00:04:32,070 --> 00:04:34,530
And I have a lot of questions.

84
00:04:34,530 --> 00:04:36,060
Could we detect copies?

85
00:04:36,060 --> 00:04:42,850
Is there any way how we are able to detect
that our keys are copied?

86
00:04:42,850 --> 00:04:49,110
And in the physical world� oops.

87
00:04:49,110 --> 00:04:51,610
Good.

88
00:04:51,610 --> 00:04:54,480
In the physical world this is difficult.

89
00:04:54,480 --> 00:05:00,730
But the important thing is to know that in
the physical world no exactly same objects

90
00:05:00,730 --> 00:05:02,070
exist at any moment.

91
00:05:02,070 --> 00:05:08,790
So it's not possible to replicate to 100%
equal in the physical world.

92
00:05:08,790 --> 00:05:10,200
It's too complicated.

93
00:05:10,200 --> 00:05:21,550
And there's a lot of things which says, okay,
I have� there are natures line the bullets

94
00:05:21,550 --> 00:05:24,380
fired through a specific gun.

95
00:05:24,380 --> 00:05:29,190
Or you could say it a little bit different,
there is no perfect crime in the physical

96
00:05:29,190 --> 00:05:30,190
world.

97
00:05:30,190 --> 00:05:33,810
So there's every time an evidence which says,
okay.

98
00:05:33,810 --> 00:05:36,160
That's a copy.

99
00:05:36,160 --> 00:05:42,120
That is whatever makes it visible that it
doesn't work out.

100
00:05:42,120 --> 00:05:45,120
In digital, it's a completely different story.

101
00:05:45,120 --> 00:05:54,720
And in digital, copying of data generates
100% perfect objects.

102
00:05:54,720 --> 00:05:59,750
Which are absolutely identical to the original
object.

103
00:05:59,750 --> 00:06:11,460
And that causes that we are asking the question,
are physical objects� digital objects copied

104
00:06:11,460 --> 00:06:12,740
or not copied?

105
00:06:12,740 --> 00:06:13,740
Is there an original?

106
00:06:13,740 --> 00:06:14,740
No.

107
00:06:14,740 --> 00:06:18,550
We are all copies.

108
00:06:18,550 --> 00:06:23,000
There's also some other constraints coming
into place.

109
00:06:23,000 --> 00:06:28,120
If you tried to replicate 1,000 keys, it's
hard work to do.

110
00:06:28,120 --> 00:06:31,460
It's pretty complex.

111
00:06:31,460 --> 00:06:40,560
In digital, it's basically impossible to distinguish
between the original and the copied thing.

112
00:06:40,560 --> 00:06:49,560
So that's� for me it was a very important
understanding to get the knowledge that everything

113
00:06:49,560 --> 00:06:53,260
in digital is a perfect copy.

114
00:06:53,260 --> 00:06:56,060
And this is a very common scenario.

115
00:06:56,060 --> 00:06:57,710
Of course, I'm on the left.

116
00:06:57,710 --> 00:07:00,100
No, I am this.

117
00:07:00,100 --> 00:07:03,450
The guy behind with the green lock, I'm very
happy.

118
00:07:03,450 --> 00:07:07,200
And on the other side, that's the server guy.

119
00:07:07,200 --> 00:07:10,070
And he has his own private key.

120
00:07:10,070 --> 00:07:15,270
And in this scenario, we have� in the first
place, we did not see any copies.

121
00:07:15,270 --> 00:07:18,830
There is no copy of the private key information.

122
00:07:18,830 --> 00:07:25,950
They're just handing it off, we are seeing
that the transport to use, we can see the

123
00:07:25,950 --> 00:07:28,260
transfer is still in place.

124
00:07:28,260 --> 00:07:33,580
And we know that there might not be a third
party which can read this.

125
00:07:33,580 --> 00:07:36,540
Can read the data, which we are transferring.

126
00:07:36,540 --> 00:07:39,250
So it's okay.

127
00:07:39,250 --> 00:07:50,320
But what happens if we have a third party
coming into this session?

128
00:07:50,320 --> 00:07:54,330
And� go back.

129
00:07:54,330 --> 00:07:59,270
What happens if a third party is coming into
this session?

130
00:07:59,270 --> 00:08:06,610
And the nice thing in that case is� the
right one, so the server guy� hands out

131
00:08:06,610 --> 00:08:10,580
his key to this guy in the middle.

132
00:08:10,580 --> 00:08:13,870
And for us that means everything stays green.

133
00:08:13,870 --> 00:08:16,060
We still see the green lock.

134
00:08:16,060 --> 00:08:21,280
But there's another person who is also able
to� yeah.

135
00:08:21,280 --> 00:08:26,560
Modify the data we are transferring and so
on.

136
00:08:26,560 --> 00:08:30,880
That's why I called it the perfect man in
the middle impersonation.

137
00:08:30,880 --> 00:08:45,800
Which, based on that we are having losing
the key between two partners.

138
00:08:45,800 --> 00:08:50,980
And in the digital universe, it's basically
impossible to identify that this scenario

139
00:08:50,980 --> 00:08:53,310
that we saw before has happened.

140
00:08:53,310 --> 00:08:54,740
Of course, we have no proof.

141
00:08:54,740 --> 00:09:02,769
We have no test, nothing different from the
outside to gain any evidence that there's

142
00:09:02,769 --> 00:09:06,160
a copy created of the key.

143
00:09:06,160 --> 00:09:12,380
And the next question is, what about a private
key?

144
00:09:12,380 --> 00:09:20,240
Are private keys usually copied?

145
00:09:20,240 --> 00:09:21,930
I asked another question.

146
00:09:21,930 --> 00:09:26,649
Is it possible to detect copies out of private
keys from the outside?

147
00:09:26,649 --> 00:09:36,770
Could I find any measurement which allows
me to determine if there are copies generated

148
00:09:36,770 --> 00:09:38,990
on the server side?

149
00:09:38,990 --> 00:09:44,140
And what I did is, I just measured how long.

150
00:09:44,140 --> 00:09:50,139
But I only measured the time how long it takes
to open a TLS connection.

151
00:09:50,139 --> 00:09:56,550
My assumption was like that, if only one key
exists and I do these measurements from different

152
00:09:56,550 --> 00:10:07,120
places on this planet, then I will see proportional
factor, which is related to the speed of light,

153
00:10:07,120 --> 00:10:13,480
of the distance between me and the key.

154
00:10:13,480 --> 00:10:24,269
And out of this, I discovered� I discovered
the following, that, for example, Amazon.com

155
00:10:24,269 --> 00:10:27,350
has only one key in one place.

156
00:10:27,350 --> 00:10:32,240
So you can hop around to the whole world and
try to access them and measure the time how

157
00:10:32,240 --> 00:10:35,550
long it takes to open the connection.

158
00:10:35,550 --> 00:10:39,829
And you will see that the� that is in proportion
to the speed of light.

159
00:10:39,829 --> 00:10:45,920
Which we need to transfer data from A to B.
And if you look closer through that, you will

160
00:10:45,920 --> 00:10:50,170
see, okay, it might be in the area of Seattle.

161
00:10:50,170 --> 00:10:53,790
This is pretty common.

162
00:10:53,790 --> 00:10:57,759
But there are other sides.

163
00:10:57,759 --> 00:11:01,269
Like Google.com and Facebook.com.

164
00:11:01,269 --> 00:11:02,570
And there are four points.

165
00:11:02,570 --> 00:11:11,170
I measure somewhere in the U.S., somewhere
in Europe, I measure somewhere in Japan.

166
00:11:11,170 --> 00:11:15,439
And last, but not least, in Australia.

167
00:11:15,439 --> 00:11:23,029
And I discover that the keys must be within
a perimeter of 2,000 kilometers around my

168
00:11:23,029 --> 00:11:25,269
measurement points.

169
00:11:25,269 --> 00:11:27,959
And out of this there are no intersections.

170
00:11:27,959 --> 00:11:38,860
I could basically induct and say, okay, there
must be four copies of the key, at least.

171
00:11:38,860 --> 00:11:40,540
To get this pattern working.

172
00:11:40,540 --> 00:11:46,769
Of course, every open TLS connection needs
to make use of the private key.

173
00:11:46,769 --> 00:11:54,399
And to get these timings, it's only possible
if you are having the key copied over to the

174
00:11:54,399 --> 00:12:00,559
specific location or you will see� the highlight
and see during the transfer to a central point

175
00:12:00,559 --> 00:12:07,779
where the keys are living.

176
00:12:07,779 --> 00:12:12,139
And this ends up with one interesting thing.

177
00:12:12,139 --> 00:12:13,139
Okay.

178
00:12:13,139 --> 00:12:16,639
It's normal that we have copies of keys out.

179
00:12:16,639 --> 00:12:27,759
So it's not like my house at home where I
know, okay, I have one key or three keys.

180
00:12:27,759 --> 00:12:31,410
And in this case, I definitely know there
will be copies.

181
00:12:31,410 --> 00:12:35,649
And it's a very common pattern to copy the
private key on the Internet.

182
00:12:35,649 --> 00:12:37,879
It's not the same.

183
00:12:37,879 --> 00:12:42,059
There are other use cases where you need to
copy your keys also.

184
00:12:42,059 --> 00:12:50,310
Out of this, another assumption and say, okay,
and say Amazon will have one key.

185
00:12:50,310 --> 00:12:51,829
At least.

186
00:12:51,829 --> 00:12:55,120
It could be more.

187
00:12:55,120 --> 00:12:56,579
Back.

188
00:12:56,579 --> 00:12:59,970
Amazon.com will have one key, at least.

189
00:12:59,970 --> 00:13:06,319
And Google.com I say, okay, they will probably
have a hundred thousand copies of their private

190
00:13:06,319 --> 00:13:09,360
key spread around their network.

191
00:13:09,360 --> 00:13:10,720
It's just an assumption.

192
00:13:10,720 --> 00:13:14,899
I would be� it would be very cool to hear
the real numbers.

193
00:13:14,899 --> 00:13:21,500
But I say, okay, it must be bigger than a
hundred thousand.

194
00:13:21,500 --> 00:13:29,649
And out of this I did a� some risk analyzers
and say, okay, if I multiply the possibility

195
00:13:29,649 --> 00:13:37,999
of losing one key with the existence of a
hundred thousand keys, then I will be getting

196
00:13:37,999 --> 00:13:43,199
a value of around 10% risk to lose the key.

197
00:13:43,199 --> 00:13:49,339
If you have got a hundred thousand copies,
then one of them might be those.

198
00:13:49,339 --> 00:13:55,439
So the risk of losing is 10% if you have a
hundred thousand copies.

199
00:13:55,439 --> 00:13:57,589
If you have a million copies.

200
00:13:57,589 --> 00:14:00,790
Risk is even higher.

201
00:14:00,790 --> 00:14:01,790
63%.

202
00:14:01,790 --> 00:14:04,249
That's a lot.

203
00:14:04,249 --> 00:14:07,540
So the risk is also increasing in that.

204
00:14:07,540 --> 00:14:17,059
And out of this, I said, okay, what can I
do to gain back trust in this?

205
00:14:17,059 --> 00:14:21,649
So I know that Google might be lost� lost
their key.

206
00:14:21,649 --> 00:14:28,560
Of course, there's a 10% chance to lose their
key.

207
00:14:28,560 --> 00:14:32,209
And what can I do to gain back control with
that?

208
00:14:32,209 --> 00:14:34,879
There's a lot of other problems like scaling
and so on.

209
00:14:34,879 --> 00:14:43,529
But I could say if I have a facility� just
call it "Facility"� where I can put my private

210
00:14:43,529 --> 00:14:54,220
key in, but it will still be able to use it
for encryption and signing, then it might

211
00:14:54,220 --> 00:14:55,220
be better.

212
00:14:55,220 --> 00:15:01,839
Of course, this device stores the key but
never allows it to leave the key again.

213
00:15:01,839 --> 00:15:10,959
So if I know that this kind of device is exists,
then I could say, okay, it's not a problem.

214
00:15:10,959 --> 00:15:14,800
But if this device exists I would see the
Amazon timing.

215
00:15:14,800 --> 00:15:19,750
Of course, there's� there might be no copies.

216
00:15:19,750 --> 00:15:21,619
You only have one key.

217
00:15:21,619 --> 00:15:23,879
That's what's going on there.

218
00:15:23,879 --> 00:15:31,350
It's a little bit of a side track, but it's
also important.

219
00:15:31,350 --> 00:15:33,769
So we have these certified authorities.

220
00:15:33,769 --> 00:15:37,220
We have the certifications we use for TLS.

221
00:15:37,220 --> 00:15:41,980
And we have� they broadly are called public
key infrastructure.

222
00:15:41,980 --> 00:15:44,059
Or PKIs.

223
00:15:44,059 --> 00:15:50,050
And they are built to maintain the integrity
of public keys.

224
00:15:50,050 --> 00:15:52,639
That's the only thing they do.

225
00:15:52,639 --> 00:16:02,420
They never do anything or touches the private
key integrity.

226
00:16:02,420 --> 00:16:03,459
That's a vacuum.

227
00:16:03,459 --> 00:16:05,259
There's nothing in.

228
00:16:05,259 --> 00:16:08,810
So nobody cares about the private keys at
all.

229
00:16:08,810 --> 00:16:15,429
And� but they are�the reason why we are
trusting on keys.

230
00:16:15,429 --> 00:16:21,579
So it's pretty difficult.

231
00:16:21,579 --> 00:16:27,509
And I came to the conclusion saying, okay,
the weakest link of the chain of trust we

232
00:16:27,509 --> 00:16:32,430
have is the private key of my communication
partner.

233
00:16:32,430 --> 00:16:36,410
That's basically� or that is the fundamental
thing.

234
00:16:36,410 --> 00:16:44,680
So if I did not know how my partner and communication
handles his private keys, I barely could trust

235
00:16:44,680 --> 00:16:45,680
him.

236
00:16:45,680 --> 00:16:54,329
Which a little bit means we cannot trust anybody.

237
00:16:54,329 --> 00:17:05,930
This raises the question which is there any
solution to these problems to maintain the

238
00:17:05,930 --> 00:17:09,200
private key integrity?

239
00:17:09,200 --> 00:17:14,260
And my honest answer to that is, I have no
clue.

240
00:17:14,260 --> 00:17:23,160
So there is� in the scale of worldwide organizations�
no chance to deal with that.

241
00:17:23,160 --> 00:17:30,640
There are some approaches, generally speaking,
on current technology basis we have to solution

242
00:17:30,640 --> 00:17:38,300
to trust on other keys if they are copied.

243
00:17:38,300 --> 00:17:43,970
But luckily, there is a little tiny solution.

244
00:17:43,970 --> 00:17:47,720
That we could use to our own private keys.

245
00:17:47,720 --> 00:17:54,390
So every private key you have and use on a
daily basis, you can protect.

246
00:17:54,390 --> 00:17:59,410
You can protect with the use of smart cuts.

247
00:17:59,410 --> 00:18:06,710
So smart cards are these devices I had before
which says, okay, it is only a oneway road.

248
00:18:06,710 --> 00:18:12,040
You can put a key in, but you will never get
a key out, or better, smart cards are also

249
00:18:12,040 --> 00:18:15,400
able to generate the key within the card.

250
00:18:15,400 --> 00:18:20,460
So it never exposed the card� the key to
anyone else.

251
00:18:20,460 --> 00:18:26,940
But you can still use it to protect it and
copy.

252
00:18:26,940 --> 00:18:30,190
Yeah.

253
00:18:30,190 --> 00:18:34,360
You can still use this for encryption, sign,
and so on.

254
00:18:34,360 --> 00:18:41,170
But you will never, ever, as your own� you
will never get your private key material in

255
00:18:41,170 --> 00:18:43,820
hand so that you could copy it.

256
00:18:43,820 --> 00:18:49,360
The only ability to access it is to take a
smart card and use it.

257
00:18:49,360 --> 00:18:53,030
So that's pretty cool that these kind of things
exist.

258
00:18:53,030 --> 00:18:55,250
And� yeah.

259
00:18:55,250 --> 00:18:56,630
I'm done at this point.

260
00:18:56,630 --> 00:19:02,960
Of course, I lost control a little bit of
time out of the starting problems.

261
00:19:02,960 --> 00:19:09,780
So you have to say thank you to my friends,
Myles, and the JSConf and you, audience.

262
00:19:09,780 --> 00:19:10,780
Thanks.

263
00:19:10,780 --> 00:19:11,780
[ Applause ]

264
00:19:11,780 --> 00:19:12,780
>> All right.

265
00:19:12,780 --> 00:19:13,780
Thank you for that.

266
00:19:13,780 --> 00:19:14,780
Give me a hug.

267
00:19:14,780 --> 00:19:15,780
We got there.

268
00:19:15,780 --> 00:19:16,780
So we have a 15minute break.

269
00:19:16,780 --> 00:19:17,780
Remember, there's all the community stuff.

270
00:19:17,780 --> 00:19:18,780
Live JS is playing.

271
00:19:18,780 --> 00:19:19,780
All that jazz there.

272
00:19:19,780 --> 00:19:20,780
It's cut a little bit short.

273
00:19:20,780 --> 00:19:21,780
But� I'm sorry.

274
00:19:21,780 --> 00:19:22,780
There's nothing really I can do about that.

275
00:19:22,780 --> 00:19:23,780
[Break]
>>

