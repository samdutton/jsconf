1
00:00:06,770 --> 00:00:10,830

hi my name is Geeta and I work as a

2
00:00:10,830 --> 00:00:13,139
software engineer for the design system

3
00:00:13,139 --> 00:00:16,410
team at sync for the one who don't know

4
00:00:16,410 --> 00:00:19,680
think it's a platform for professional

5
00:00:19,680 --> 00:00:23,460
networking and today I will be talking

6
00:00:23,460 --> 00:00:27,359
about functional programming so first of

7
00:00:27,359 --> 00:00:29,279
all I would like to share with you why I

8
00:00:29,279 --> 00:00:31,949
decided to learn functional programming

9
00:00:31,949 --> 00:00:34,320
I have studied computer science where I

10
00:00:34,320 --> 00:00:37,410
learned Java and a little bit JavaScript

11
00:00:37,410 --> 00:00:39,210
and objective oriented programming

12
00:00:39,210 --> 00:00:42,059
paradigm and it was fine back then but

13
00:00:42,059 --> 00:00:44,100
when I started to work in real

14
00:00:44,100 --> 00:00:47,340
application that solve business problems

15
00:00:47,340 --> 00:00:50,700
I barely see the same techniques I

16
00:00:50,700 --> 00:00:53,789
learned back at university also I don't

17
00:00:53,789 --> 00:00:56,610
know for you guys but for me debugging

18
00:00:56,610 --> 00:01:01,100
code in JavaScript it's very hard so

19
00:01:01,100 --> 00:01:04,949
today we live in a world where if you

20
00:01:04,949 --> 00:01:07,049
want to learn new skills it's very easy

21
00:01:07,049 --> 00:01:10,229
you don't need to wait for universities

22
00:01:10,229 --> 00:01:12,689
and all those long processes you just

23
00:01:12,689 --> 00:01:13,619
start right away

24
00:01:13,619 --> 00:01:15,900
pick your computer and then start

25
00:01:15,900 --> 00:01:18,770
reading about what you want to learn and

26
00:01:18,770 --> 00:01:21,540
here I would like to point out something

27
00:01:21,540 --> 00:01:24,750
that this way of learning it is cool but

28
00:01:24,750 --> 00:01:27,299
has a side effect in it sometimes I

29
00:01:27,299 --> 00:01:29,610
believe developers are very creative

30
00:01:29,610 --> 00:01:33,090
human being but sometimes they create

31
00:01:33,090 --> 00:01:35,670
some stereotypes like half PHP it's a

32
00:01:35,670 --> 00:01:39,590
lazy language and JavaScript has heart

33
00:01:39,590 --> 00:01:43,110
magic and those stereotypes are fine for

34
00:01:43,110 --> 00:01:45,570
people who are very experienced but for

35
00:01:45,570 --> 00:01:49,320
me as a junior who just started to code

36
00:01:49,320 --> 00:01:51,659
it is very hard to understand what do

37
00:01:51,659 --> 00:01:55,350
they mean and all those why I can find

38
00:01:55,350 --> 00:01:59,159
an answer so that's was the reason that

39
00:01:59,159 --> 00:02:00,810
I started to learn functional

40
00:02:00,810 --> 00:02:03,780
programming because I thought it is cool

41
00:02:03,780 --> 00:02:07,619
and first I started with to answer the

42
00:02:07,619 --> 00:02:10,040
question what is functional program

43
00:02:10,040 --> 00:02:14,050
actually I find it very hard to give a

44
00:02:14,050 --> 00:02:16,610
definition like what is functional

45
00:02:16,610 --> 00:02:18,680
programming the one I read on the

46
00:02:18,680 --> 00:02:21,830
internet it's kind of boring and hard to

47
00:02:21,830 --> 00:02:25,160
memorize so I decided to tell you first

48
00:02:25,160 --> 00:02:28,190
the characteristics and let's see if I

49
00:02:28,190 --> 00:02:31,190
will manage to give you a summarize what

50
00:02:31,190 --> 00:02:33,520
I understand functional programming is

51
00:02:33,520 --> 00:02:37,550
so functional programming it is a

52
00:02:37,550 --> 00:02:40,490
programming paradigm let me explain to

53
00:02:40,490 --> 00:02:42,380
you what I understand and I think of a

54
00:02:42,380 --> 00:02:45,500
paradigm for me a paradigm it is kind of

55
00:02:45,500 --> 00:02:48,110
a world view a way how we look at the

56
00:02:48,110 --> 00:02:50,780
world in terms of how the world is

57
00:02:50,780 --> 00:02:53,810
composed to like what elements and how

58
00:02:53,810 --> 00:02:55,580
does elements interact with each other

59
00:02:55,580 --> 00:02:57,680
so if we say what is functional

60
00:02:57,680 --> 00:02:59,210
programming I would say it's a code

61
00:02:59,210 --> 00:03:02,120
style like we look how those what

62
00:03:02,120 --> 00:03:04,760
elements it contains and Hamas and and

63
00:03:04,760 --> 00:03:06,920
them interact with each other so to

64
00:03:06,920 --> 00:03:10,760
explain this I will try to talk about

65
00:03:10,760 --> 00:03:13,420
other programming paradigms like

66
00:03:13,420 --> 00:03:16,550
imperative codes so an imperative code

67
00:03:16,550 --> 00:03:18,980
we write codes out of commands like

68
00:03:18,980 --> 00:03:20,780
because we instruct the code line by

69
00:03:20,780 --> 00:03:23,300
line like now do this and then do that

70
00:03:23,300 --> 00:03:25,430
and after that do that and after do that

71
00:03:25,430 --> 00:03:29,690
and as we see time here is an important

72
00:03:29,690 --> 00:03:31,760
concept in imperative programming and

73
00:03:31,760 --> 00:03:34,340
with that comes an idea of values

74
00:03:34,340 --> 00:03:37,459
changing over the time which is called

75
00:03:37,459 --> 00:03:41,270
state another characteristic of function

76
00:03:41,270 --> 00:03:45,020
of imperative programming it is that for

77
00:03:45,020 --> 00:03:47,209
the same input we don't always get the

78
00:03:47,209 --> 00:03:50,330
same output from the other side that

79
00:03:50,330 --> 00:03:52,310
this object oriented programming which

80
00:03:52,310 --> 00:03:54,500
says that imperative programming it's

81
00:03:54,500 --> 00:03:57,290
cool but what if our programs get

82
00:03:57,290 --> 00:04:02,720
complicated and the valve manage that

83
00:04:02,720 --> 00:04:04,700
state in those days are changing over

84
00:04:04,700 --> 00:04:07,760
the time it is very hard so what if we

85
00:04:07,760 --> 00:04:10,910
pack those data in some little units

86
00:04:10,910 --> 00:04:13,370
call them object and the way how they

87
00:04:13,370 --> 00:04:15,140
talk and interact or each other each

88
00:04:15,140 --> 00:04:17,139
byte is it is by standing mesh

89
00:04:17,139 --> 00:04:19,629
back and forth which is essentially what

90
00:04:19,629 --> 00:04:22,120
we do when we call the methods and

91
00:04:22,120 --> 00:04:24,819
objects one object method called the

92
00:04:24,819 --> 00:04:27,819
method of another object the opposite of

93
00:04:27,819 --> 00:04:29,979
imperative programming it is declarative

94
00:04:29,979 --> 00:04:32,469
programming if imperative programming

95
00:04:32,469 --> 00:04:35,080
was the program growth out of comments

96
00:04:35,080 --> 00:04:37,389
inverting declarative programming it is

97
00:04:37,389 --> 00:04:39,699
built out of expression so it's like

98
00:04:39,699 --> 00:04:42,250
that's what I want I don't care how you

99
00:04:42,250 --> 00:04:45,330
deliver it to me but that's what I want

100
00:04:45,330 --> 00:04:48,849
so what fight what is functional

101
00:04:48,849 --> 00:04:50,949
programming then so a functional

102
00:04:50,949 --> 00:04:53,710
programming it is a paradigm where we

103
00:04:53,710 --> 00:04:55,840
express everything with functions and

104
00:04:55,840 --> 00:04:58,090
the way how they lament interact with

105
00:04:58,090 --> 00:05:00,599
each other is by giving input and

106
00:05:00,599 --> 00:05:06,099
transferring them into an output and how

107
00:05:06,099 --> 00:05:09,009
we do that it is by using pure functions

108
00:05:09,009 --> 00:05:11,919
what is a pure function a pure function

109
00:05:11,919 --> 00:05:14,620
it is a function that for the same input

110
00:05:14,620 --> 00:05:18,009
gets always the same output without side

111
00:05:18,009 --> 00:05:21,870
effects let me explain this also

112
00:05:21,870 --> 00:05:24,219
functional programming I would say it's

113
00:05:24,219 --> 00:05:26,830
kind of a sub paradigm of declarative

114
00:05:26,830 --> 00:05:29,349
programming so I would explain this with

115
00:05:29,349 --> 00:05:30,339
an example

116
00:05:30,339 --> 00:05:33,279
let's say we have a function which takes

117
00:05:33,279 --> 00:05:35,710
as argument an array and you return a

118
00:05:35,710 --> 00:05:38,139
new function with the double values of

119
00:05:38,139 --> 00:05:40,479
the old array the code like looks like

120
00:05:40,479 --> 00:05:42,490
this in declarative style which is

121
00:05:42,490 --> 00:05:44,710
basically functional programming if we

122
00:05:44,710 --> 00:05:47,500
want to do the to solve the same problem

123
00:05:47,500 --> 00:05:50,800
in imperative code we have to do we have

124
00:05:50,800 --> 00:05:53,199
to declare function which is called Dabu

125
00:05:53,199 --> 00:05:55,150
age and then takes an array we have to

126
00:05:55,150 --> 00:05:57,430
initialize a new array and then with the

127
00:05:57,430 --> 00:05:59,919
help of a for loop we push the other

128
00:05:59,919 --> 00:06:02,919
values and as you see the code this line

129
00:06:02,919 --> 00:06:06,669
by line and also we use those old

130
00:06:06,669 --> 00:06:10,120
methods or methyls I you I learned in

131
00:06:10,120 --> 00:06:13,419
the data structure subject like four and

132
00:06:13,419 --> 00:06:15,039
four and this is the good thing about

133
00:06:15,039 --> 00:06:17,139
functional programming we will never

134
00:06:17,139 --> 00:06:19,870
have to write a for loop or a push I

135
00:06:19,870 --> 00:06:24,800
have never seen this at least and my job

136
00:06:24,810 --> 00:06:28,160
actually when I think of an application

137
00:06:28,160 --> 00:06:30,050
usually I have in mind like without

138
00:06:30,050 --> 00:06:32,810
considering the UI part I have in mind a

139
00:06:32,810 --> 00:06:35,090
list of data that we have to render in

140
00:06:35,090 --> 00:06:37,760
the screen and those data can be mutable

141
00:06:37,760 --> 00:06:40,790
and immutable immutable data can change

142
00:06:40,790 --> 00:06:42,800
after the creation and immutable data

143
00:06:42,800 --> 00:06:45,350
cannot change after the creation let me

144
00:06:45,350 --> 00:06:49,310
explain this let's say we have an object

145
00:06:49,310 --> 00:06:53,300
called a and it has a property fo and

146
00:06:53,300 --> 00:06:56,150
which has a value bar and then we assign

147
00:06:56,150 --> 00:06:59,360
the we have a new variable a which we

148
00:06:59,360 --> 00:07:02,890
assign it to B and then once we want to

149
00:07:02,890 --> 00:07:06,320
portion your value to the V and if we

150
00:07:06,320 --> 00:07:10,460
console.log V we will see that a and V

151
00:07:10,460 --> 00:07:12,710
are equal because we are not doing

152
00:07:12,710 --> 00:07:14,990
anything else we assign those objects to

153
00:07:14,990 --> 00:07:20,300
H they assigned to the same place so how

154
00:07:20,300 --> 00:07:26,240
can we avoid those kind of mutations and

155
00:07:26,240 --> 00:07:29,030
the way how I know how to do this is by

156
00:07:29,030 --> 00:07:32,870
object freezing a frozen object is an

157
00:07:32,870 --> 00:07:35,300
object that can no longer be changed

158
00:07:35,300 --> 00:07:37,910
after creation which means we cannot

159
00:07:37,910 --> 00:07:40,520
longer add new values to it but we can

160
00:07:40,520 --> 00:07:44,180
no longer extract values from it also we

161
00:07:44,180 --> 00:07:48,080
can do this with programmer discipline

162
00:07:48,080 --> 00:07:50,900
so we use functions like the map

163
00:07:50,900 --> 00:07:54,050
function or like a sine function like we

164
00:07:54,050 --> 00:07:56,060
find the object to a new one and then we

165
00:07:56,060 --> 00:07:57,890
added the new one but not the old one

166
00:07:57,890 --> 00:08:01,340
and also there is Concord and filter but

167
00:08:01,340 --> 00:08:03,770
we never have to use those old methods

168
00:08:03,770 --> 00:08:05,240
we learned in the data structure like

169
00:08:05,240 --> 00:08:09,710
Porsche and top and other things one of

170
00:08:09,710 --> 00:08:11,480
the nice features that I love about

171
00:08:11,480 --> 00:08:13,700
functional programming is high order

172
00:08:13,700 --> 00:08:16,760
function a high order function it is the

173
00:08:16,760 --> 00:08:19,430
function that accepts a function as an

174
00:08:19,430 --> 00:08:23,770
argument or returns a new function I

175
00:08:23,770 --> 00:08:28,310
think high order function at first seems

176
00:08:28,310 --> 00:08:30,560
a bit scary but it's not I think it's

177
00:08:30,560 --> 00:08:32,780
very helpful when our application it

178
00:08:32,780 --> 00:08:35,630
gets really complicated so and we repeat

179
00:08:35,630 --> 00:08:37,790
ourselves again and again

180
00:08:37,790 --> 00:08:39,560
so I think it could make sense to have

181
00:08:39,560 --> 00:08:41,870
something as a provider which fits the

182
00:08:41,870 --> 00:08:44,090
need of the components under the tree

183
00:08:44,090 --> 00:08:46,610
which are mostly the consumers let me

184
00:08:46,610 --> 00:08:48,850
show you this with an example

185
00:08:48,850 --> 00:08:52,160
let's say we have to build a counter for

186
00:08:52,160 --> 00:08:55,130
making some mathematical calculations

187
00:08:55,130 --> 00:08:58,100
and I have an high order function which

188
00:08:58,100 --> 00:08:59,780
takes argument

189
00:08:59,780 --> 00:09:04,070
another function we store a very odd

190
00:09:04,070 --> 00:09:06,920
variable calm and then with the help of

191
00:09:06,920 --> 00:09:07,970
the rest

192
00:09:07,970 --> 00:09:13,400
operator we create a new function which

193
00:09:13,400 --> 00:09:15,860
will return the result with the help of

194
00:09:15,860 --> 00:09:19,040
the spread operator and if we want to

195
00:09:19,040 --> 00:09:21,140
use now or if we want to make different

196
00:09:21,140 --> 00:09:23,180
calculation with this we just have to

197
00:09:23,180 --> 00:09:24,830
use this function by passing another

198
00:09:24,830 --> 00:09:27,530
function to it which in this case we

199
00:09:27,530 --> 00:09:29,840
have a function ad which has two

200
00:09:29,840 --> 00:09:33,590
arguments X and epsilon and then to add

201
00:09:33,590 --> 00:09:38,370
this function to the higher order wines

202
00:09:38,380 --> 00:09:42,410
one of the topics that I still don't

203
00:09:42,410 --> 00:09:45,440
feel comfortable talking with but I will

204
00:09:45,440 --> 00:09:49,480
try to it is caring and compositions

205
00:09:49,480 --> 00:09:52,880
sharing a caret function is the function

206
00:09:52,880 --> 00:09:55,400
that takes multiple arguments at one

207
00:09:55,400 --> 00:09:58,670
time as we have in this case we have a

208
00:09:58,670 --> 00:10:01,520
function called substrate or sub which

209
00:10:01,520 --> 00:10:06,140
first take a and create a new function

210
00:10:06,140 --> 00:10:09,140
out of it which takes B and then return

211
00:10:09,140 --> 00:10:12,830
a new function which substrat a minus B

212
00:10:12,830 --> 00:10:15,200
and to use this we just pass values to

213
00:10:15,200 --> 00:10:17,690
it so why is that helpful

214
00:10:17,690 --> 00:10:23,450
I think one of the topics known as the

215
00:10:23,450 --> 00:10:25,910
soul and the hearth of functional

216
00:10:25,910 --> 00:10:33,200
programming is compositions let's say we

217
00:10:33,200 --> 00:10:36,380
have two function like f which takes an

218
00:10:36,380 --> 00:10:40,220
argument and must've add 2 to it and

219
00:10:40,220 --> 00:10:42,170
then we have another function with this

220
00:10:42,170 --> 00:10:45,080
G which takes an argument and added a

221
00:10:45,080 --> 00:10:49,310
number 3 to compose those elements we

222
00:10:49,310 --> 00:10:50,499
just nest those

223
00:10:50,499 --> 00:10:54,819
together like we do it here we have the

224
00:10:54,819 --> 00:10:59,619
Campos funk function and then we pass to

225
00:10:59,619 --> 00:11:02,439
function to it and then we just mask the

226
00:11:02,439 --> 00:11:04,959
F to the G in this way how we see it

227
00:11:04,959 --> 00:11:10,149
here so why this carried a great so for

228
00:11:10,149 --> 00:11:12,969
me carat is the great functions for

229
00:11:12,969 --> 00:11:16,269
composing because they allow us to

230
00:11:16,269 --> 00:11:18,189
easily convert functions with multiple

231
00:11:18,189 --> 00:11:20,979
arguments in the stands of a single

232
00:11:20,979 --> 00:11:30,819
function so I wish to give you a summary

233
00:11:30,819 --> 00:11:33,039
why I think that functional programming

234
00:11:33,039 --> 00:11:37,929
for me it is very great one week because

235
00:11:37,929 --> 00:11:40,329
we can combine a lot of pure function

236
00:11:40,329 --> 00:11:43,029
with each other and all this work with

237
00:11:43,029 --> 00:11:46,629
function given in forget transforming

238
00:11:46,629 --> 00:11:48,969
them into an output it is very helpful

239
00:11:48,969 --> 00:11:53,649
for me also add avoiding shared state

240
00:11:53,649 --> 00:11:56,199
immutable data and all the side effects

241
00:11:56,199 --> 00:12:00,559
which help at least me a lot and

242
00:12:00,569 --> 00:12:02,919
declarative approach that rather than

243
00:12:02,919 --> 00:12:06,419
imperative approach I'm not a big fan of

244
00:12:06,419 --> 00:12:09,549
declarative very difficult so for me it

245
00:12:09,549 --> 00:12:18,270
is fine to use that one thank you

