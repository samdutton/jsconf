1
00:00:17,490 --> 00:00:20,050

hi everybody as you heard my name is

2
00:00:20,050 --> 00:00:22,779
Marc devilish I'm here from Melbourne

3
00:00:22,779 --> 00:00:23,550
Australia

4
00:00:23,550 --> 00:00:26,279
and I'm here today to talk to you about

5
00:00:26,279 --> 00:00:29,020
the end of global CSS which is a lofty

6
00:00:29,020 --> 00:00:31,420
title but hopefully by the end of this

7
00:00:31,420 --> 00:00:33,820
you'll understand why a lot of things

8
00:00:33,820 --> 00:00:36,309
have been changing in the CSS space a

9
00:00:36,309 --> 00:00:38,800
lot of people trying new things and it's

10
00:00:38,800 --> 00:00:40,180
definitely something I've been a part of

11
00:00:40,180 --> 00:00:43,269
and I'm really excited today to share

12
00:00:43,269 --> 00:00:46,479
some of the work myself and a few others

13
00:00:46,479 --> 00:00:48,760
have been doing to really try and

14
00:00:48,760 --> 00:00:51,190
rethink how we build our applications

15
00:00:51,190 --> 00:00:54,309
with CSS so to put all of this in its

16
00:00:54,309 --> 00:00:56,350
proper context I think I first need to

17
00:00:56,350 --> 00:00:58,119
take you back to the beginning really to

18
00:00:58,119 --> 00:00:59,890
the beginning of my career essentially

19
00:00:59,890 --> 00:01:02,260
for me personally it all began with this

20
00:01:02,260 --> 00:01:04,420
book now this book is not a classic it's

21
00:01:04,420 --> 00:01:06,670
just a random HTML book I picked up in

22
00:01:06,670 --> 00:01:09,670
99 I wasn't a programmer I wasn't

23
00:01:09,670 --> 00:01:12,159
dreaming of becoming a programmer I just

24
00:01:12,159 --> 00:01:13,720
loved the web and I wanted to be part of

25
00:01:13,720 --> 00:01:15,369
it somehow and this for me was a natural

26
00:01:15,369 --> 00:01:18,790
place to start now it has a chapter in

27
00:01:18,790 --> 00:01:20,860
there chapter 13 which is all about CSS

28
00:01:20,860 --> 00:01:23,560
now at the time in 99 CSS wasn't quite

29
00:01:23,560 --> 00:01:25,090
ready for primetime and that's what this

30
00:01:25,090 --> 00:01:27,880
summary says but everyone knew that CSS

31
00:01:27,880 --> 00:01:29,680
was really gonna change the way we think

32
00:01:29,680 --> 00:01:33,490
about styling our our websites it's

33
00:01:33,490 --> 00:01:34,780
already been covered this morning

34
00:01:34,780 --> 00:01:36,970
actually that CSS is in garden is

35
00:01:36,970 --> 00:01:40,450
something that was was really what

36
00:01:40,450 --> 00:01:42,430
convinced me that that CSS was something

37
00:01:42,430 --> 00:01:44,200
you could really fall in love with CSS

38
00:01:44,200 --> 00:01:46,420
Zen garden the whole concept as you

39
00:01:46,420 --> 00:01:48,580
already heard today was was about taking

40
00:01:48,580 --> 00:01:51,400
a document and completely restyling it

41
00:01:51,400 --> 00:01:53,770
just by swapping out the CSS so just by

42
00:01:53,770 --> 00:01:55,840
changing the CSS you could go to a

43
00:01:55,840 --> 00:01:57,610
completely different look and feel and

44
00:01:57,610 --> 00:01:59,770
this really you know in it at the time

45
00:01:59,770 --> 00:02:01,780
proved out a completely opposite

46
00:02:01,780 --> 00:02:03,130
approach to what we were doing with

47
00:02:03,130 --> 00:02:05,020
things like table based layouts where

48
00:02:05,020 --> 00:02:07,330
and font tags where the design was

49
00:02:07,330 --> 00:02:10,299
tightly coupled to the markup so CSS Zen

50
00:02:10,299 --> 00:02:12,280
garden presented a really great way

51
00:02:12,280 --> 00:02:15,519
forward for us as a web community but as

52
00:02:15,519 --> 00:02:18,190
we move forward in time we get a bit of

53
00:02:18,190 --> 00:02:20,110
a clash between the the techniques

54
00:02:20,110 --> 00:02:22,060
presented in CSS Zen garden and how you

55
00:02:22,060 --> 00:02:24,300
build a complex web application

56
00:02:24,300 --> 00:02:26,560
while one is just a basic document

57
00:02:26,560 --> 00:02:28,990
basically a glorified version of what we

58
00:02:28,990 --> 00:02:31,330
were doing in things like word web apps

59
00:02:31,330 --> 00:02:33,250
are a very different environment and

60
00:02:33,250 --> 00:02:37,150
entirely and the problem with that is

61
00:02:37,150 --> 00:02:38,800
that when you when you're restarting a

62
00:02:38,800 --> 00:02:41,260
document the global scope of CSS is a

63
00:02:41,260 --> 00:02:42,490
good thing you want to be able to

64
00:02:42,490 --> 00:02:44,770
restyle any element on the page very

65
00:02:44,770 --> 00:02:47,140
quickly very easily but that comes with

66
00:02:47,140 --> 00:02:49,300
a maintenance cost when you get into the

67
00:02:49,300 --> 00:02:51,370
world of big complex applications with

68
00:02:51,370 --> 00:02:55,210
lots of nested components over the years

69
00:02:55,210 --> 00:02:56,680
in the CSS community we've come up with

70
00:02:56,680 --> 00:02:58,900
a lot of techniques to try and tame the

71
00:02:58,900 --> 00:03:01,450
the problems inherent with CSS at scale

72
00:03:01,450 --> 00:03:03,550
we've got things like oo CSS which

73
00:03:03,550 --> 00:03:06,520
arguably kicked us off other techniques

74
00:03:06,520 --> 00:03:09,420
like smacks BEM suits and now

75
00:03:09,420 --> 00:03:11,260
controversially in the react community

76
00:03:11,260 --> 00:03:13,690
inline Styles is actually a feasible

77
00:03:13,690 --> 00:03:16,960
solution to this problem but they are

78
00:03:16,960 --> 00:03:18,850
arguably the most popular solution out

79
00:03:18,850 --> 00:03:20,620
in the wild is been block element

80
00:03:20,620 --> 00:03:22,390
modifier and ultimately it's just a

81
00:03:22,390 --> 00:03:23,770
naming convention it's a way of

82
00:03:23,770 --> 00:03:26,110
restricting yourself in in the way that

83
00:03:26,110 --> 00:03:29,020
you use your CSS so that you can make

84
00:03:29,020 --> 00:03:31,480
this technology scale and you can scale

85
00:03:31,480 --> 00:03:33,760
it over a long period of time and have a

86
00:03:33,760 --> 00:03:35,980
code base that's actually able to be

87
00:03:35,980 --> 00:03:37,930
maintained able to be refactored which

88
00:03:37,930 --> 00:03:40,900
for legacy CSS code bases was basically

89
00:03:40,900 --> 00:03:44,500
impossible when you apply BEM to your

90
00:03:44,500 --> 00:03:45,940
markup you get something that looks like

91
00:03:45,940 --> 00:03:49,390
this it does get quite a bit noisy so

92
00:03:49,390 --> 00:03:50,920
obviously there was a bit of a cost in

93
00:03:50,920 --> 00:03:52,630
terms of the pure aesthetics of working

94
00:03:52,630 --> 00:03:55,570
with them but for those of us that kind

95
00:03:55,570 --> 00:03:58,959
of got over that that initial distaste

96
00:03:58,959 --> 00:04:01,000
of the markup we ended it was something

97
00:04:01,000 --> 00:04:02,830
that was definitely a big step ahead of

98
00:04:02,830 --> 00:04:07,270
where we were with CSS in the past the

99
00:04:07,270 --> 00:04:09,610
the challenge here though is that CSS at

100
00:04:09,610 --> 00:04:11,320
scale when you're using something like

101
00:04:11,320 --> 00:04:13,420
them feels completely different to what

102
00:04:13,420 --> 00:04:15,340
you were doing in the world of CSS is in

103
00:04:15,340 --> 00:04:17,200
garden the techniques you had to adopt

104
00:04:17,200 --> 00:04:19,480
were completely different and there was

105
00:04:19,480 --> 00:04:22,030
definitely a learning curve people who

106
00:04:22,030 --> 00:04:23,890
were good at CSS were not necessarily

107
00:04:23,890 --> 00:04:25,960
good at CSS at scale and that was a real

108
00:04:25,960 --> 00:04:28,090
problem particularly when you're working

109
00:04:28,090 --> 00:04:30,730
in a team environment but this problem

110
00:04:30,730 --> 00:04:33,039
of scaling interfaces is not unique to

111
00:04:33,039 --> 00:04:34,780
CSS of course this question has been

112
00:04:34,780 --> 00:04:38,110
asked everywhere and in the in

113
00:04:38,110 --> 00:04:40,270
javascript community in particular in

114
00:04:40,270 --> 00:04:41,919
particular we've now basically arrived

115
00:04:41,919 --> 00:04:44,289
in what I call the age of components if

116
00:04:44,289 --> 00:04:46,030
you look at the landscape at the moment

117
00:04:46,030 --> 00:04:48,159
and what people are using to build rich

118
00:04:48,159 --> 00:04:50,770
single page page applications you've got

119
00:04:50,770 --> 00:04:53,020
of course web components landing is a

120
00:04:53,020 --> 00:04:54,759
standard part of the web platform

121
00:04:54,759 --> 00:04:57,009
you've got polymer poly filling nuts you

122
00:04:57,009 --> 00:05:00,340
can try to use that today angular is is

123
00:05:00,340 --> 00:05:02,199
all about directives and directives are

124
00:05:02,199 --> 00:05:04,629
about basically turning HTML to a DSL

125
00:05:04,629 --> 00:05:07,780
powered by components but the one that

126
00:05:07,780 --> 00:05:09,970
I've been focusing on lately it's been

127
00:05:09,970 --> 00:05:11,620
getting a lot of traction is react for

128
00:05:11,620 --> 00:05:13,210
me the big reason I've picked react is I

129
00:05:13,210 --> 00:05:15,159
can render it on the server so I get all

130
00:05:15,159 --> 00:05:16,539
the benefit of components without

131
00:05:16,539 --> 00:05:18,250
sacrificing progressive enhancement

132
00:05:18,250 --> 00:05:21,940
which i think is very very important but

133
00:05:21,940 --> 00:05:23,620
components are nothing new components

134
00:05:23,620 --> 00:05:26,800
were not invented on the web but even in

135
00:05:26,800 --> 00:05:28,720
the earliest days of the web we had a

136
00:05:28,720 --> 00:05:30,490
basic set of components you had things

137
00:05:30,490 --> 00:05:32,919
like select select box with options in

138
00:05:32,919 --> 00:05:36,550
it its html5 date input these things

139
00:05:36,550 --> 00:05:39,009
came with a lot of inbuilt behavior you

140
00:05:39,009 --> 00:05:40,750
just got for free you just drop a simple

141
00:05:40,750 --> 00:05:42,940
tag in your markup and all of this rich

142
00:05:42,940 --> 00:05:45,280
run interactivity is now provided to you

143
00:05:45,280 --> 00:05:47,400
and the interface is very very simple

144
00:05:47,400 --> 00:05:50,199
but the the important thing to note here

145
00:05:50,199 --> 00:05:51,460
for the purposes of this talk is that

146
00:05:51,460 --> 00:05:53,680
CSS and images are private to a

147
00:05:53,680 --> 00:05:55,449
component at no point do you have to

148
00:05:55,449 --> 00:05:57,729
worry about the styling or the images

149
00:05:57,729 --> 00:05:59,440
that a browser might need to render

150
00:05:59,440 --> 00:06:00,940
these things they're completely abstract

151
00:06:00,940 --> 00:06:03,969
it away from you and that of course came

152
00:06:03,969 --> 00:06:05,590
to a screeching halt the second you

153
00:06:05,590 --> 00:06:07,690
wanted to use a third-party component so

154
00:06:07,690 --> 00:06:09,130
taking the canonical example of the

155
00:06:09,130 --> 00:06:11,050
jQuery UI date picker

156
00:06:11,050 --> 00:06:13,270
just having a date picker you've got

157
00:06:13,270 --> 00:06:17,050
over a dozen files images CSS JavaScript

158
00:06:17,050 --> 00:06:19,150
and it's your job to integrate this into

159
00:06:19,150 --> 00:06:21,099
your project which was not necessarily

160
00:06:21,099 --> 00:06:23,770
the simplest of tasks certainly doable

161
00:06:23,770 --> 00:06:25,659
but a lot more work than should be

162
00:06:25,659 --> 00:06:26,310
necessary

163
00:06:26,310 --> 00:06:28,930
and now El tools reflected this model

164
00:06:28,930 --> 00:06:31,090
for the longest time you look at a build

165
00:06:31,090 --> 00:06:32,949
tool like gulp for example and the

166
00:06:32,949 --> 00:06:34,930
standard way we would work our gulp

167
00:06:34,930 --> 00:06:36,490
files would look something like this you

168
00:06:36,490 --> 00:06:38,919
might have a task for your JavaScript

169
00:06:38,919 --> 00:06:40,300
that runs it through something like

170
00:06:40,300 --> 00:06:42,940
browserify maybe uglify you've got your

171
00:06:42,940 --> 00:06:44,440
CSS tasks which might run it through

172
00:06:44,440 --> 00:06:47,740
sass or less or post CSS you've got your

173
00:06:47,740 --> 00:06:50,180
images tasks as well and so on

174
00:06:50,180 --> 00:06:51,919
you were you would definitely sort of

175
00:06:51,919 --> 00:06:54,680
encourage to separate everything by file

176
00:06:54,680 --> 00:06:56,479
type and everything was in these silos

177
00:06:56,479 --> 00:06:59,060
this of course continued into tools like

178
00:06:59,060 --> 00:07:01,639
SAS where you know ultimately SAS only

179
00:07:01,639 --> 00:07:04,220
cares about your CSS so what that ends

180
00:07:04,220 --> 00:07:06,110
up causing is something like this an

181
00:07:06,110 --> 00:07:08,240
index dot s CSS for example where

182
00:07:08,240 --> 00:07:10,250
essentially it's just a wall of imports

183
00:07:10,250 --> 00:07:13,160
because SAS has to know the full tree of

184
00:07:13,160 --> 00:07:16,130
styles in your app but seth has to start

185
00:07:16,130 --> 00:07:18,250
somewhere and this is your entry point

186
00:07:18,250 --> 00:07:21,020
but what do we do in the component age

187
00:07:21,020 --> 00:07:22,910
like is there a way that we can rethink

188
00:07:22,910 --> 00:07:25,070
our tooling and luckily for us there's a

189
00:07:25,070 --> 00:07:27,259
really great example in the form of web

190
00:07:27,259 --> 00:07:29,360
pack web pack is basically the default

191
00:07:29,360 --> 00:07:31,880
choice in the react community and for

192
00:07:31,880 --> 00:07:34,490
really good reason because web pack

193
00:07:34,490 --> 00:07:36,229
encourages us to think in terms of a

194
00:07:36,229 --> 00:07:38,449
single dependency tree across all of our

195
00:07:38,449 --> 00:07:42,050
asset types so rather than the standard

196
00:07:42,050 --> 00:07:44,240
folder structure in your in your project

197
00:07:44,240 --> 00:07:45,500
where you might have JavaScript over

198
00:07:45,500 --> 00:07:47,840
here CSS images and fonts in a different

199
00:07:47,840 --> 00:07:50,120
place you're much more likely to

200
00:07:50,120 --> 00:07:51,979
structure up like this where you've got

201
00:07:51,979 --> 00:07:54,110
a components directory may be nested

202
00:07:54,110 --> 00:07:55,729
levels of components directories as well

203
00:07:55,729 --> 00:07:57,800
and inside each of those we have a

204
00:07:57,800 --> 00:08:00,530
folder for each component that component

205
00:08:00,530 --> 00:08:03,050
has the JavaScript or CSS and any images

206
00:08:03,050 --> 00:08:05,690
it needs to render and web pack gives us

207
00:08:05,690 --> 00:08:07,720
a really great way to manage this

208
00:08:07,720 --> 00:08:10,039
because if you look at here we've got a

209
00:08:10,039 --> 00:08:12,199
basic react component the very first

210
00:08:12,199 --> 00:08:14,570
line we're actually requiring a CSS file

211
00:08:14,570 --> 00:08:17,030
so we're making it very explicit that

212
00:08:17,030 --> 00:08:19,669
this component depends on some CSS in

213
00:08:19,669 --> 00:08:21,650
order to render correctly whereas

214
00:08:21,650 --> 00:08:24,349
previously that that dependency between

215
00:08:24,349 --> 00:08:26,630
the markup and the CSS was basically in

216
00:08:26,630 --> 00:08:28,220
your head and scattered throughout your

217
00:08:28,220 --> 00:08:31,639
entire project the great thing about web

218
00:08:31,639 --> 00:08:33,320
pack is it can traverse these links or

219
00:08:33,320 --> 00:08:35,599
even into your CSS so web pack follows

220
00:08:35,599 --> 00:08:37,909
follows the lead into that CSS file and

221
00:08:37,909 --> 00:08:39,560
it can see that you've got a background

222
00:08:39,560 --> 00:08:43,579
image here of an icon SVG and web pack

223
00:08:43,579 --> 00:08:45,680
knows that it now needs to include that

224
00:08:45,680 --> 00:08:49,279
image in your in your final output so

225
00:08:49,279 --> 00:08:51,050
here we have one build tool traversing

226
00:08:51,050 --> 00:08:54,230
multiple asset types and you can figure

227
00:08:54,230 --> 00:08:55,430
that with loaders so you've got things

228
00:08:55,430 --> 00:08:57,950
like style loader CSS loader post CSS

229
00:08:57,950 --> 00:09:02,029
less sass URL and there's a whole bunch

230
00:09:02,029 --> 00:09:03,900
more and this is the way you tell teach

231
00:09:03,900 --> 00:09:05,310
webpack about how to understand these

232
00:09:05,310 --> 00:09:07,500
different file types you can figure it

233
00:09:07,500 --> 00:09:09,090
like this you don't have to understand

234
00:09:09,090 --> 00:09:11,100
this to to any large degree right now

235
00:09:11,100 --> 00:09:12,840
but the point is that you tell webpack

236
00:09:12,840 --> 00:09:15,840
if you CSS c s CSS file i want you to

237
00:09:15,840 --> 00:09:17,490
run it through this chain of loaders go

238
00:09:17,490 --> 00:09:21,150
through post CSS CSS style and so on but

239
00:09:21,150 --> 00:09:22,260
what's great is that when you use these

240
00:09:22,260 --> 00:09:23,850
components you maintain the simple

241
00:09:23,850 --> 00:09:26,400
interface you just import a component

242
00:09:26,400 --> 00:09:27,750
and render it if you're building a

243
00:09:27,750 --> 00:09:29,580
reactor and all of the internals of the

244
00:09:29,580 --> 00:09:31,080
different asset types are obstructed

245
00:09:31,080 --> 00:09:34,410
from you so how does BEM fit into this

246
00:09:34,410 --> 00:09:37,740
world of components well luckily a block

247
00:09:37,740 --> 00:09:40,440
in BEM is really the same abstraction as

248
00:09:40,440 --> 00:09:43,560
a component in something like react it's

249
00:09:43,560 --> 00:09:45,390
dealing with the exact same problem in

250
00:09:45,390 --> 00:09:48,300
basically the same way so this leads to

251
00:09:48,300 --> 00:09:50,100
a very simple rule of thumb which is

252
00:09:50,100 --> 00:09:52,380
that you should never use a block in BEM

253
00:09:52,380 --> 00:09:55,470
outside a component of the same name so

254
00:09:55,470 --> 00:09:56,700
that looks something like this again if

255
00:09:56,700 --> 00:09:58,290
we revisit this folder structure we've

256
00:09:58,290 --> 00:10:00,180
got our component directory with the

257
00:10:00,180 --> 00:10:03,870
JavaScript the CSS in the image if you

258
00:10:03,870 --> 00:10:06,240
look inside that CSS file it's called my

259
00:10:06,240 --> 00:10:08,220
component dot CSS and inside you'll

260
00:10:08,220 --> 00:10:10,080
notice every single selector starts with

261
00:10:10,080 --> 00:10:13,800
my component we're essentially emulating

262
00:10:13,800 --> 00:10:16,080
local scope here that file only affects

263
00:10:16,080 --> 00:10:18,180
the the JavaScript in the same file in

264
00:10:18,180 --> 00:10:20,640
the same folder so to visualize that

265
00:10:20,640 --> 00:10:22,620
what we've got is for every CSS file in

266
00:10:22,620 --> 00:10:23,880
this project we've got a matching

267
00:10:23,880 --> 00:10:26,070
JavaScript file that forms a natural

268
00:10:26,070 --> 00:10:27,600
component boundary and the great thing

269
00:10:27,600 --> 00:10:28,980
about components of courses that they

270
00:10:28,980 --> 00:10:30,990
compose really nicely into a tree

271
00:10:30,990 --> 00:10:32,580
structure forming the basis of your

272
00:10:32,580 --> 00:10:35,280
whole UI so now we've got a way of

273
00:10:35,280 --> 00:10:38,820
scaling our CSS really really nicely now

274
00:10:38,820 --> 00:10:41,010
this is where personally I thought I was

275
00:10:41,010 --> 00:10:43,350
going to end with this technique for

276
00:10:43,350 --> 00:10:45,360
quite a long time I wrote about it in a

277
00:10:45,360 --> 00:10:47,370
blog post called block element modifying

278
00:10:47,370 --> 00:10:49,230
your JavaScript components and this was

279
00:10:49,230 --> 00:10:50,550
something that I thought was going to do

280
00:10:50,550 --> 00:10:52,320
us well for a long time work really

281
00:10:52,320 --> 00:10:55,110
really well but luckily in the meantime

282
00:10:55,110 --> 00:10:56,670
some really interesting developments

283
00:10:56,670 --> 00:10:59,100
were happening in the web pack space web

284
00:10:59,100 --> 00:11:02,190
pack landed in its CSS loader and an

285
00:11:02,190 --> 00:11:04,290
experimental feature called local scope

286
00:11:04,290 --> 00:11:06,150
and it basically looked something like

287
00:11:06,150 --> 00:11:06,920
this

288
00:11:06,920 --> 00:11:09,780
whereas in the previous example I just

289
00:11:09,780 --> 00:11:12,450
required a CSS file and it was a pure

290
00:11:12,450 --> 00:11:14,190
side-effect it was just telling web pack

291
00:11:14,190 --> 00:11:17,310
include the CSS file what you would do

292
00:11:17,310 --> 00:11:17,690
in

293
00:11:17,690 --> 00:11:19,520
you would actually import something from

294
00:11:19,520 --> 00:11:20,930
that stylesheet into the scope of your

295
00:11:20,930 --> 00:11:22,610
JavaScript so now you're importing

296
00:11:22,610 --> 00:11:24,260
styles from the stylesheet

297
00:11:24,260 --> 00:11:26,390
now you might look at that as I did and

298
00:11:26,390 --> 00:11:28,370
wonder what exactly is going on here

299
00:11:28,370 --> 00:11:30,680
like what does this Styles thing we've

300
00:11:30,680 --> 00:11:33,620
imported from a stylesheet evaluate - so

301
00:11:33,620 --> 00:11:35,300
to answer that first let's look at the

302
00:11:35,300 --> 00:11:38,780
CSS this is what you would see in the

303
00:11:38,780 --> 00:11:40,640
matching CSS file this was a new syntax

304
00:11:40,640 --> 00:11:42,710
custom syntax introduced into web pack

305
00:11:42,710 --> 00:11:45,170
you'd put colon local and wrap it around

306
00:11:45,170 --> 00:11:46,760
the selector so here we've got a local

307
00:11:46,760 --> 00:11:49,700
dot header and a dot footer so what that

308
00:11:49,700 --> 00:11:51,320
means now is that if you go over to your

309
00:11:51,320 --> 00:11:53,810
react component in this case we have

310
00:11:53,810 --> 00:11:56,240
access to Styles header and styles dot

311
00:11:56,240 --> 00:11:58,160
footer and these are just strict class

312
00:11:58,160 --> 00:11:59,480
strings that we're putting into our

313
00:11:59,480 --> 00:12:01,400
template so now we're being even more

314
00:12:01,400 --> 00:12:03,770
explicit in the link between this

315
00:12:03,770 --> 00:12:06,110
javascript file requiring CSS and then

316
00:12:06,110 --> 00:12:07,940
what classes it actually wants to use

317
00:12:07,940 --> 00:12:11,270
from that CSS file I'm sure you can

318
00:12:11,270 --> 00:12:12,980
imagine this is gonna scale even better

319
00:12:12,980 --> 00:12:14,650
than what we were looking at before so

320
00:12:14,650 --> 00:12:17,810
to understand what happens as part of

321
00:12:17,810 --> 00:12:19,160
the build process if you look at that

322
00:12:19,160 --> 00:12:21,440
simple CSS file or the local header and

323
00:12:21,440 --> 00:12:23,450
a local doc footer once it's come out

324
00:12:23,450 --> 00:12:24,890
the other end of web pack what you end

325
00:12:24,890 --> 00:12:27,200
up with is a hash globally unique class

326
00:12:27,200 --> 00:12:30,260
name so what what happens when you

327
00:12:30,260 --> 00:12:32,090
import it is that you get an object that

328
00:12:32,090 --> 00:12:34,160
maps from the name you gave it don't

329
00:12:34,160 --> 00:12:36,980
header to the global hash which I'm not

330
00:12:36,980 --> 00:12:40,070
going to try to pronounce of course the

331
00:12:40,070 --> 00:12:41,720
amazing thing here is that we have no

332
00:12:41,720 --> 00:12:43,760
more naming collisions you're free to

333
00:12:43,760 --> 00:12:46,220
have a dozen dot headers in your app and

334
00:12:46,220 --> 00:12:49,100
and dot root and footer dot title dot

335
00:12:49,100 --> 00:12:51,020
logo you can just call them basic

336
00:12:51,020 --> 00:12:52,640
classes like the good old days you don't

337
00:12:52,640 --> 00:12:56,660
have to worry too much and if you for

338
00:12:56,660 --> 00:12:57,710
whatever reason particularly in

339
00:12:57,710 --> 00:12:58,850
development you might want to give your

340
00:12:58,850 --> 00:13:01,850
classes nicer names than just hashes you

341
00:13:01,850 --> 00:13:03,320
have full control over it so you can

342
00:13:03,320 --> 00:13:05,420
configure the web pack loader to say

343
00:13:05,420 --> 00:13:07,580
that you want the identifier to be the

344
00:13:07,580 --> 00:13:09,980
the name of the file two underscores and

345
00:13:09,980 --> 00:13:11,720
the name of the local so in this case

346
00:13:11,720 --> 00:13:12,770
what's happening is we're basically

347
00:13:12,770 --> 00:13:14,930
having web pack right our Bend classes

348
00:13:14,930 --> 00:13:16,850
for us we don't have to do it by hand

349
00:13:16,850 --> 00:13:20,450
anymore now I work at a company in

350
00:13:20,450 --> 00:13:22,100
Australia called seek which is basically

351
00:13:22,100 --> 00:13:24,260
the number one job site there it's a

352
00:13:24,260 --> 00:13:26,300
household name and a new project we were

353
00:13:26,300 --> 00:13:27,950
working on was leveraging these

354
00:13:27,950 --> 00:13:30,570
techniques we were doing it in the the

355
00:13:30,570 --> 00:13:33,150
style mapping to classes and as soon as

356
00:13:33,150 --> 00:13:34,890
we saw this local scope we really

357
00:13:34,890 --> 00:13:36,870
couldn't help ourselves but port our

358
00:13:36,870 --> 00:13:38,730
entire app across to local scope it was

359
00:13:38,730 --> 00:13:40,440
a natural fit it was doing exactly what

360
00:13:40,440 --> 00:13:42,380
we were already doing in our application

361
00:13:42,380 --> 00:13:45,750
so what that resulted in is any CSS file

362
00:13:45,750 --> 00:13:47,280
in our application you would open it up

363
00:13:47,280 --> 00:13:49,140
and you would see this a wall of local

364
00:13:49,140 --> 00:13:51,690
local local local every single line with

365
00:13:51,690 --> 00:13:56,220
very few exceptions and that led to a

366
00:13:56,220 --> 00:13:59,100
very interesting question which was what

367
00:13:59,100 --> 00:14:02,100
if locally scoped CSS was the default

368
00:14:02,100 --> 00:14:04,290
why do we have to opt in every single

369
00:14:04,290 --> 00:14:06,330
selector into this when really when you

370
00:14:06,330 --> 00:14:08,370
look at any other sane module system

371
00:14:08,370 --> 00:14:11,100
local scoping is the default and global

372
00:14:11,100 --> 00:14:12,780
is the exception you should have to say

373
00:14:12,780 --> 00:14:15,360
I want a global select it not I want

374
00:14:15,360 --> 00:14:16,920
everything to be local specifically

375
00:14:16,920 --> 00:14:20,010
every time what if we could write this

376
00:14:20,010 --> 00:14:22,110
instead we opened up a new tab in our

377
00:14:22,110 --> 00:14:24,240
editor and we just wrote what we wish we

378
00:14:24,240 --> 00:14:26,190
could write and ultimately all that was

379
00:14:26,190 --> 00:14:28,920
was deleting all of the colon locals now

380
00:14:28,920 --> 00:14:30,690
when we came to what you see on that

381
00:14:30,690 --> 00:14:32,430
last line there one of the very few

382
00:14:32,430 --> 00:14:34,500
exceptions where we needed a global

383
00:14:34,500 --> 00:14:37,410
class because of the way transition

384
00:14:37,410 --> 00:14:39,840
group works and react we needed access

385
00:14:39,840 --> 00:14:41,310
to a global class so we flipped the

386
00:14:41,310 --> 00:14:43,650
model around we said if we say : global

387
00:14:43,650 --> 00:14:45,450
we want that class to be global but

388
00:14:45,450 --> 00:14:49,170
everything else is local now we were

389
00:14:49,170 --> 00:14:50,610
able to achieve this quite easily with

390
00:14:50,610 --> 00:14:52,680
post CSS which Lockland just covered in

391
00:14:52,680 --> 00:14:54,360
great details so obviously I don't have

392
00:14:54,360 --> 00:14:56,310
to go into too much detail here but post

393
00:14:56,310 --> 00:14:58,350
CSS is a really great tool for allowing

394
00:14:58,350 --> 00:15:00,240
you to do this sort of work where you

395
00:15:00,240 --> 00:15:01,200
want to have your own custom

396
00:15:01,200 --> 00:15:04,350
transformations on the CSS so as a

397
00:15:04,350 --> 00:15:06,390
result on the train ride home from work

398
00:15:06,390 --> 00:15:08,340
that day I was the same day I asked the

399
00:15:08,340 --> 00:15:10,380
question I was very it didn't take long

400
00:15:10,380 --> 00:15:13,320
to hack together an open-source project

401
00:15:13,320 --> 00:15:14,910
called post CSS local scope and

402
00:15:14,910 --> 00:15:16,770
ultimately all it did was it turned dot

403
00:15:16,770 --> 00:15:18,810
class into a colon local doc class and

404
00:15:18,810 --> 00:15:21,860
it turned : global dot class into class

405
00:15:21,860 --> 00:15:24,620
because that doesn't need to be hashed

406
00:15:24,620 --> 00:15:27,510
IRA I was very excited about where this

407
00:15:27,510 --> 00:15:28,560
was going

408
00:15:28,560 --> 00:15:30,600
I wrote a blog post called the end of

409
00:15:30,600 --> 00:15:33,090
global CSS just like this talk and to my

410
00:15:33,090 --> 00:15:34,980
surprise it picked up a lot of traction

411
00:15:34,980 --> 00:15:37,500
got a lot of views people were really

412
00:15:37,500 --> 00:15:38,790
excited about what we were doing with

413
00:15:38,790 --> 00:15:42,450
CSS in our application arguably the most

414
00:15:42,450 --> 00:15:44,190
important person to get excited about it

415
00:15:44,190 --> 00:15:45,960
was tobias koppers the creator of

416
00:15:45,960 --> 00:15:48,420
webpack he reached out to me and he said

417
00:15:48,420 --> 00:15:50,040
i hope it's okay if i integrate your

418
00:15:50,040 --> 00:15:53,070
post CSS local scope module into the CSS

419
00:15:53,070 --> 00:15:55,710
loader and of course the obvious answer

420
00:15:55,710 --> 00:15:58,440
the answer to that is yes so we started

421
00:15:58,440 --> 00:16:02,400
talking about doing exactly this very

422
00:16:02,400 --> 00:16:05,250
shortly after this CSS loader landed a

423
00:16:05,250 --> 00:16:07,110
new feature and another experimental

424
00:16:07,110 --> 00:16:08,850
feature called module mode so you just

425
00:16:08,850 --> 00:16:10,770
added question mark module to the end of

426
00:16:10,770 --> 00:16:13,650
your loader config and this became part

427
00:16:13,650 --> 00:16:15,030
of the way it worked you didn't need to

428
00:16:15,030 --> 00:16:17,940
use this post CSS plug-in with a post

429
00:16:17,940 --> 00:16:20,610
CSS pipeline it was all internal to the

430
00:16:20,610 --> 00:16:22,500
CSS loader and it all just worked for

431
00:16:22,500 --> 00:16:26,220
you out of the box as part of my blog

432
00:16:26,220 --> 00:16:28,320
post one of the things I talked about as

433
00:16:28,320 --> 00:16:30,510
a potential future was I said we could

434
00:16:30,510 --> 00:16:32,310
start generating shared classes between

435
00:16:32,310 --> 00:16:34,470
components automatically treating style

436
00:16:34,470 --> 00:16:36,660
reuse as an optimization at compile time

437
00:16:36,660 --> 00:16:39,390
what I meant by that was you know if you

438
00:16:39,390 --> 00:16:40,950
if you look at what's happening when you

439
00:16:40,950 --> 00:16:42,390
import the style object you've got an

440
00:16:42,390 --> 00:16:44,700
object that says styles dot foo maps to

441
00:16:44,700 --> 00:16:46,620
this global class in this case of BEM

442
00:16:46,620 --> 00:16:49,410
style class but when you use that in the

443
00:16:49,410 --> 00:16:51,210
template you know there's really no

444
00:16:51,210 --> 00:16:53,220
reason that that class could actually be

445
00:16:53,220 --> 00:16:54,870
a one-to-many mapping when you say

446
00:16:54,870 --> 00:16:57,090
Stiles dafu why does it have to be one

447
00:16:57,090 --> 00:16:58,980
class it could be three or four or a

448
00:16:58,980 --> 00:17:00,480
hundred for all you know you actually

449
00:17:00,480 --> 00:17:02,160
don't care and that creates a really

450
00:17:02,160 --> 00:17:04,439
interesting way for us to allow people

451
00:17:04,439 --> 00:17:06,569
to change their markup without having to

452
00:17:06,569 --> 00:17:08,430
change their CSS sorry without having to

453
00:17:08,430 --> 00:17:12,209
change the mark-up necessarily this

454
00:17:12,209 --> 00:17:14,699
feature then very quickly landed in web

455
00:17:14,699 --> 00:17:17,339
pack again under the name of composition

456
00:17:17,339 --> 00:17:20,400
after like much black shedding and it

457
00:17:20,400 --> 00:17:21,569
looks something like this so when you

458
00:17:21,569 --> 00:17:25,140
write a selector like dot foo inside of

459
00:17:25,140 --> 00:17:27,150
that you can say composes heading from

460
00:17:27,150 --> 00:17:29,190
typography and it composes box from

461
00:17:29,190 --> 00:17:31,710
layout and what that means now is that

462
00:17:31,710 --> 00:17:33,630
you this class is actually made out of

463
00:17:33,630 --> 00:17:36,000
three classes if you drill down further

464
00:17:36,000 --> 00:17:38,160
your typography CSS has a dot heading

465
00:17:38,160 --> 00:17:39,990
class again it's just locally scoped and

466
00:17:39,990 --> 00:17:43,860
layout CSS has a dot box these in the

467
00:17:43,860 --> 00:17:46,290
end end up being globally unique hashes

468
00:17:46,290 --> 00:17:48,300
but for in day-to-day development you

469
00:17:48,300 --> 00:17:50,760
don't have to worry about the names so

470
00:17:50,760 --> 00:17:54,630
again to really make this clear when you

471
00:17:54,630 --> 00:17:56,730
import the styles from this style sheet

472
00:17:56,730 --> 00:17:58,080
Styles dot foo is

473
00:17:58,080 --> 00:18:00,240
three classes from three different files

474
00:18:00,240 --> 00:18:02,519
and you don't have to do all that work

475
00:18:02,519 --> 00:18:04,289
of putting all these classes into your

476
00:18:04,289 --> 00:18:09,090
HTML it's just kind of done for you now

477
00:18:09,090 --> 00:18:11,279
I was really excited about what we were

478
00:18:11,279 --> 00:18:13,380
doing here but my big fear was that this

479
00:18:13,380 --> 00:18:15,690
was at the time really just a feature

480
00:18:15,690 --> 00:18:18,210
embedded within web pack not everyone

481
00:18:18,210 --> 00:18:20,460
uses web pack tools come and go but the

482
00:18:20,460 --> 00:18:22,350
ideas we had here I thought could really

483
00:18:22,350 --> 00:18:24,210
have a big impact on the future of CSS

484
00:18:24,210 --> 00:18:26,370
so I reached out to Tobias copper's and

485
00:18:26,370 --> 00:18:27,809
I said have you thought about writing a

486
00:18:27,809 --> 00:18:29,640
standard for CSS modules that others

487
00:18:29,640 --> 00:18:31,590
could implement I was particularly

488
00:18:31,590 --> 00:18:33,510
interested in where this could take the

489
00:18:33,510 --> 00:18:35,130
CSS community in the future when you

490
00:18:35,130 --> 00:18:37,320
look at something like NPM and what's

491
00:18:37,320 --> 00:18:38,460
happened to the JavaScript community

492
00:18:38,460 --> 00:18:40,350
there because everyone agreed on a

493
00:18:40,350 --> 00:18:42,510
module system I'm hoping that we can get

494
00:18:42,510 --> 00:18:44,429
there with CSS and this is really the

495
00:18:44,429 --> 00:18:46,350
first step we need to agree on a module

496
00:18:46,350 --> 00:18:50,789
system so the next step of course was a

497
00:18:50,789 --> 00:18:53,190
new repository a new organization on

498
00:18:53,190 --> 00:18:55,769
github called CSS modules the initial

499
00:18:55,769 --> 00:18:57,840
commit you can see here which was a big

500
00:18:57,840 --> 00:19:00,380
readme describing what a CSS module is

501
00:19:00,380 --> 00:19:03,510
and this got started to get a lot more

502
00:19:03,510 --> 00:19:05,519
visibility from people now that it had a

503
00:19:05,519 --> 00:19:07,590
name the missing thing of course was a

504
00:19:07,590 --> 00:19:09,269
logo which I threw together first as a

505
00:19:09,269 --> 00:19:13,980
joke but it kind of stuck and and it's

506
00:19:13,980 --> 00:19:16,320
now available in web packs official CSS

507
00:19:16,320 --> 00:19:18,929
loader as no longer no longer marked as

508
00:19:18,929 --> 00:19:22,049
experimental its CSS modules mode and

509
00:19:22,049 --> 00:19:24,179
everyone who's using webpack today we're

510
00:19:24,179 --> 00:19:26,100
CSS loader already has the ability to

511
00:19:26,100 --> 00:19:28,230
plug CSS modules into their pipeline

512
00:19:28,230 --> 00:19:31,559
today which is really exciting one of

513
00:19:31,559 --> 00:19:32,909
the big contributions I made was

514
00:19:32,909 --> 00:19:35,100
creating the CSS modules web page demo

515
00:19:35,100 --> 00:19:36,779
this runs through all the different

516
00:19:36,779 --> 00:19:38,460
features and tells you how they work and

517
00:19:38,460 --> 00:19:40,889
you get to get a sense of what it looks

518
00:19:40,889 --> 00:19:42,899
like in a in a somewhat more realistic

519
00:19:42,899 --> 00:19:45,690
application now an obvious question that

520
00:19:45,690 --> 00:19:47,700
might come up here is you know do we

521
00:19:47,700 --> 00:19:50,220
have a hard dependency on react here and

522
00:19:50,220 --> 00:19:52,860
the answer here luckily is no of course

523
00:19:52,860 --> 00:19:55,169
you've seen it working with react but it

524
00:19:55,169 --> 00:19:57,440
really works with any JavaScript

525
00:19:57,440 --> 00:20:00,480
framework you've got it works in mercury

526
00:20:00,480 --> 00:20:01,799
which is very similar to reactor we've

527
00:20:01,799 --> 00:20:03,960
got examples in angular angular 2 as

528
00:20:03,960 --> 00:20:07,470
well backbone and we've seen examples in

529
00:20:07,470 --> 00:20:10,260
just vanilla J's writing inner HTML or

530
00:20:10,260 --> 00:20:12,750
creating Dom nodes on the fly because as

531
00:20:12,750 --> 00:20:15,029
long as you can import styles into a

532
00:20:15,029 --> 00:20:17,010
JavaScript context you can use CSS

533
00:20:17,010 --> 00:20:20,010
modules the next obvious question from

534
00:20:20,010 --> 00:20:21,779
there is does that mean CSS modules has

535
00:20:21,779 --> 00:20:24,299
a JavaScript dependency I said I was a

536
00:20:24,299 --> 00:20:26,159
big fan of of progressive enhancement

537
00:20:26,159 --> 00:20:28,649
how do how does it work if we need

538
00:20:28,649 --> 00:20:30,510
JavaScript to be able to understand our

539
00:20:30,510 --> 00:20:32,730
Styles and luckily the answer to this as

540
00:20:32,730 --> 00:20:34,559
well is no there is no JavaScript

541
00:20:34,559 --> 00:20:38,309
runtime dependency only at Build time as

542
00:20:38,309 --> 00:20:41,370
an example of one way of many that you

543
00:20:41,370 --> 00:20:42,720
could solve this problem I created a

544
00:20:42,720 --> 00:20:44,700
project called static site generator web

545
00:20:44,700 --> 00:20:46,730
pack plug-in and it basically lets you

546
00:20:46,730 --> 00:20:50,070
run JavaScript at Build time to output a

547
00:20:50,070 --> 00:20:51,929
set of static HTML files but you get all

548
00:20:51,929 --> 00:20:54,299
the benefits of web pack including CSS

549
00:20:54,299 --> 00:20:56,279
modules so if you look at the source

550
00:20:56,279 --> 00:20:57,960
code for the web pack demo that I showed

551
00:20:57,960 --> 00:20:59,820
you earlier it actually has no

552
00:20:59,820 --> 00:21:01,470
JavaScript running in the browser it's a

553
00:21:01,470 --> 00:21:04,500
pure static bundle of HTML and CSS no

554
00:21:04,500 --> 00:21:06,990
JavaScript and if you view source you'll

555
00:21:06,990 --> 00:21:08,760
see that you basically have a bunch of

556
00:21:08,760 --> 00:21:10,860
BEM style classes that are very similar

557
00:21:10,860 --> 00:21:11,970
to what you would have written by hand

558
00:21:11,970 --> 00:21:14,429
but at development time it's all locally

559
00:21:14,429 --> 00:21:16,950
scoped CSS no manual BEM written out

560
00:21:16,950 --> 00:21:20,940
it's all done for you at Build time now

561
00:21:20,940 --> 00:21:23,580
the future of course it is going to

562
00:21:23,580 --> 00:21:25,710
require a lot more work because while we

563
00:21:25,710 --> 00:21:27,120
have a dependency on JavaScript at the

564
00:21:27,120 --> 00:21:29,610
moment we're really interested in

565
00:21:29,610 --> 00:21:31,409
solving the problem of taking CSS

566
00:21:31,409 --> 00:21:33,240
modules to the broader web community you

567
00:21:33,240 --> 00:21:34,379
know how does this fit in with things

568
00:21:34,379 --> 00:21:36,510
like rails for example what's the answer

569
00:21:36,510 --> 00:21:38,279
there we've got a bunch of ideas we're

570
00:21:38,279 --> 00:21:39,450
going to start a bunch of experiments

571
00:21:39,450 --> 00:21:42,149
and by way of course I mean the CSS

572
00:21:42,149 --> 00:21:43,620
modules team so we've attracted a lot of

573
00:21:43,620 --> 00:21:45,149
interest some really smart people

574
00:21:45,149 --> 00:21:47,100
helping us out with this including Glenn

575
00:21:47,100 --> 00:21:48,600
Madden who's also here today as a

576
00:21:48,600 --> 00:21:52,559
complete coincidence I swear and yeah I

577
00:21:52,559 --> 00:21:54,149
think the future looks really bright for

578
00:21:54,149 --> 00:21:54,750
CSS

579
00:21:54,750 --> 00:21:56,820
even if it's not necessarily CSS modules

580
00:21:56,820 --> 00:21:58,559
but what we're kicking off here I think

581
00:21:58,559 --> 00:22:02,129
is really really important so we've got

582
00:22:02,129 --> 00:22:03,389
it in web pack today but most

583
00:22:03,389 --> 00:22:05,309
importantly I think we've proved that we

584
00:22:05,309 --> 00:22:07,289
can spread it beyond a single tool we've

585
00:22:07,289 --> 00:22:09,350
also got it working in browserify

586
00:22:09,350 --> 00:22:12,299
JSP m and again if you feel like your

587
00:22:12,299 --> 00:22:13,799
build tool or your environment is

588
00:22:13,799 --> 00:22:15,179
missing from this list by all means

589
00:22:15,179 --> 00:22:18,210
please help us out and try to spread CSS

590
00:22:18,210 --> 00:22:22,020
modules beyond where it is today I think

591
00:22:22,020 --> 00:22:23,669
it's a fair response to this for a lot

592
00:22:23,669 --> 00:22:24,900
of people would be that this looks

593
00:22:24,900 --> 00:22:27,600
complicated you know we're making CSS

594
00:22:27,600 --> 00:22:30,170
feel a lot more heavy and tall driven

595
00:22:30,170 --> 00:22:32,100
but there's a really important point

596
00:22:32,100 --> 00:22:34,110
here I want to want to hone it on this

597
00:22:34,110 --> 00:22:36,000
model here of a component with

598
00:22:36,000 --> 00:22:38,310
everything localized is actually a much

599
00:22:38,310 --> 00:22:40,050
simpler model to work with and I think

600
00:22:40,050 --> 00:22:40,950
it's much easier for beginners

601
00:22:40,950 --> 00:22:43,230
importantly all of these CSS

602
00:22:43,230 --> 00:22:44,760
methodologies come with a very steep

603
00:22:44,760 --> 00:22:46,110
learning curve for people who are new

604
00:22:46,110 --> 00:22:47,820
and I think that this is actually a nice

605
00:22:47,820 --> 00:22:51,120
a starting point for people because each

606
00:22:51,120 --> 00:22:52,620
one of these components is a miniature

607
00:22:52,620 --> 00:22:54,800
CSS is in garden everything's

608
00:22:54,800 --> 00:22:56,790
everything's nice and simple within that

609
00:22:56,790 --> 00:22:58,500
boundary and you're basically back in

610
00:22:58,500 --> 00:23:00,630
the in the simple days of the early web

611
00:23:00,630 --> 00:23:02,610
where it was just basic pages and that

612
00:23:02,610 --> 00:23:05,760
scales really really nicely the main

613
00:23:05,760 --> 00:23:07,200
point I want to stress is that I think

614
00:23:07,200 --> 00:23:09,180
we need to have smarter tools not

615
00:23:09,180 --> 00:23:10,950
stricter methodologies these

616
00:23:10,950 --> 00:23:13,440
methodologies mean that onboarding

617
00:23:13,440 --> 00:23:15,300
people and upskilling people in CSS is a

618
00:23:15,300 --> 00:23:17,370
lot harder than it should be and if we

619
00:23:17,370 --> 00:23:19,470
get the smarts into the tools I think we

620
00:23:19,470 --> 00:23:21,120
can have a much better environment for

621
00:23:21,120 --> 00:23:23,370
beginners as well as solving the problem

622
00:23:23,370 --> 00:23:26,580
of scaling CSS so together I think with

623
00:23:26,580 --> 00:23:28,620
things like CSS and thinking more about

624
00:23:28,620 --> 00:23:31,290
scoping things together we can make big

625
00:23:31,290 --> 00:23:34,170
CSS feel like small CSS and that's what

626
00:23:34,170 --> 00:23:37,410
CSS modules is really all about that's

627
00:23:37,410 --> 00:23:39,150
it for me thank you so much for having

628
00:23:39,150 --> 00:23:48,180
me hey the buggin work you debugging

629
00:23:48,180 --> 00:23:51,840
yeah so so for me the fact that I can

630
00:23:51,840 --> 00:23:53,760
name my classes based on the file name

631
00:23:53,760 --> 00:23:57,690
and the local name is how we debug in

632
00:23:57,690 --> 00:23:59,520
our application and so what that means

633
00:23:59,520 --> 00:24:02,040
is that in development mode when you

634
00:24:02,040 --> 00:24:04,200
open the dev tools you can very quickly

635
00:24:04,200 --> 00:24:06,480
get a sense of where in your application

636
00:24:06,480 --> 00:24:08,940
it were in which file these selectors

637
00:24:08,940 --> 00:24:11,310
are coming from but the cool thing is

638
00:24:11,310 --> 00:24:13,110
that because it's completely

639
00:24:13,110 --> 00:24:16,290
configurable in your website config we

640
00:24:16,290 --> 00:24:17,790
actually have minified class names in

641
00:24:17,790 --> 00:24:19,560
production we have five character hashes

642
00:24:19,560 --> 00:24:23,100
so that's that's we found that that's

643
00:24:23,100 --> 00:24:25,170
actually plenty for us to debug

644
00:24:25,170 --> 00:24:27,150
we haven't neat had any need for

645
00:24:27,150 --> 00:24:28,800
anything like source maps or anything

646
00:24:28,800 --> 00:24:29,910
like that

647
00:24:29,910 --> 00:24:32,520
just being curious what happens when you

648
00:24:32,520 --> 00:24:34,530
have some global style

649
00:24:34,530 --> 00:24:36,960
absolutely have to include like like

650
00:24:36,960 --> 00:24:41,130
bootstrap or foundation CSS yeah so I

651
00:24:41,130 --> 00:24:42,390
guess there's a couple answers to this

652
00:24:42,390 --> 00:24:44,130
question like in our application we

653
00:24:44,130 --> 00:24:46,890
started with with the classic like Eric

654
00:24:46,890 --> 00:24:49,080
Meyer CSS reset that of course has to be

655
00:24:49,080 --> 00:24:52,380
global its styling tags so what we do is

656
00:24:52,380 --> 00:24:55,080
we wrap that we we wrap that in : global

657
00:24:55,080 --> 00:24:56,520
and just say all of these Styles have to

658
00:24:56,520 --> 00:24:59,820
be in the global scope the other I guess

659
00:24:59,820 --> 00:25:01,500
there's a broader answer or more of a

660
00:25:01,500 --> 00:25:02,580
discussion around something like

661
00:25:02,580 --> 00:25:06,780
bootstrap where I think the probably

662
00:25:06,780 --> 00:25:07,980
that one of the things I really want to

663
00:25:07,980 --> 00:25:12,240
focus on after this conference is is

664
00:25:12,240 --> 00:25:13,440
looking at how we can better support

665
00:25:13,440 --> 00:25:17,190
something like bootstrap so to use your

666
00:25:17,190 --> 00:25:18,330
bootstrap classes you would have to

667
00:25:18,330 --> 00:25:20,070
explicitly import them you can't just

668
00:25:20,070 --> 00:25:22,080
assume they're in the global scope but

669
00:25:22,080 --> 00:25:25,980
the I'd like to argue that if we

670
00:25:25,980 --> 00:25:28,170
introduce a module system to CSS I think

671
00:25:28,170 --> 00:25:30,450
that will need to usher in a new era of

672
00:25:30,450 --> 00:25:33,510
frameworks that are built you know

673
00:25:33,510 --> 00:25:34,680
understanding that there's a module

674
00:25:34,680 --> 00:25:36,140
system in the same way that that

675
00:25:36,140 --> 00:25:37,950
JavaScript kind of went through the same

676
00:25:37,950 --> 00:25:39,840
thing where every library assumed it was

677
00:25:39,840 --> 00:25:41,910
in the global scope and then slowly move

678
00:25:41,910 --> 00:25:43,650
towards things like commonjs now that we

679
00:25:43,650 --> 00:25:47,100
have NPM I think we might if CSS modules

680
00:25:47,100 --> 00:25:48,870
really takes off I'm hoping we'll see a

681
00:25:48,870 --> 00:25:51,810
similar transition where you have CSS

682
00:25:51,810 --> 00:25:54,210
frameworks that introduce classes that

683
00:25:54,210 --> 00:25:55,950
you never actually use in Europe you

684
00:25:55,950 --> 00:25:57,900
just compose from their classes and

685
00:25:57,900 --> 00:26:00,120
build up your own language on top of

686
00:26:00,120 --> 00:26:05,370
them for example but yeah how about

687
00:26:05,370 --> 00:26:07,920
documentation and customization of each

688
00:26:07,920 --> 00:26:11,790
of the component stylesheet so I'm not

689
00:26:11,790 --> 00:26:14,130
sure I understand I mean if I use the

690
00:26:14,130 --> 00:26:17,010
third-party CS module to my component

691
00:26:17,010 --> 00:26:20,250
how how do you suggest as as an author

692
00:26:20,250 --> 00:26:22,950
of the third-party module how do we

693
00:26:22,950 --> 00:26:25,170
document the usage and how to customize

694
00:26:25,170 --> 00:26:27,230
it

695
00:26:27,230 --> 00:26:29,670
yes so I'm not sure if I understand the

696
00:26:29,670 --> 00:26:32,550
question but basically it's it's not

697
00:26:32,550 --> 00:26:34,020
that different to how you might document

698
00:26:34,020 --> 00:26:36,150
a JavaScript project for example where

699
00:26:36,150 --> 00:26:39,210
you'll need to explain in what things

700
00:26:39,210 --> 00:26:41,250
you can import from that library you

701
00:26:41,250 --> 00:26:42,660
know what basically what's the public

702
00:26:42,660 --> 00:26:45,090
API of this thing and for a CSS module

703
00:26:45,090 --> 00:26:47,100
you know in the way that I was just

704
00:26:47,100 --> 00:26:47,710
talking about we

705
00:26:47,710 --> 00:26:49,149
might have a framework of things that

706
00:26:49,149 --> 00:26:52,929
you can pose your classes from you might

707
00:26:52,929 --> 00:26:55,000
document and say you know say there's a

708
00:26:55,000 --> 00:26:57,070
grid system you can say you can compose

709
00:26:57,070 --> 00:26:59,289
your class from these grid classes and

710
00:26:59,289 --> 00:27:02,110
and and that's kind of how you document

711
00:27:02,110 --> 00:27:04,000
the link between what what what are the

712
00:27:04,000 --> 00:27:05,649
building blocks that you provide in your

713
00:27:05,649 --> 00:27:11,919
in your CSS modules your package okay

714
00:27:11,919 --> 00:27:16,090
so let's say I don't want to use jQuery

715
00:27:16,090 --> 00:27:18,850
UI is 2,800 line of JavaScript

716
00:27:18,850 --> 00:27:21,940
datepicker and I want to you say

717
00:27:21,940 --> 00:27:23,799
something that you you know you built

718
00:27:23,799 --> 00:27:26,710
that's a component that's up there but I

719
00:27:26,710 --> 00:27:29,640
have a gigantic already existing CSS

720
00:27:29,640 --> 00:27:34,480
JavaScript how quickly can I get that

721
00:27:34,480 --> 00:27:38,260
running from npm install blank date

722
00:27:38,260 --> 00:27:40,990
picker to that thing working in my site

723
00:27:40,990 --> 00:27:43,450
that's that's a really good question and

724
00:27:43,450 --> 00:27:45,130
I'm not sure that we have a good answer

725
00:27:45,130 --> 00:27:48,580
for that yet web pack is a really great

726
00:27:48,580 --> 00:27:51,159
tool but in my opinion it's not that

727
00:27:51,159 --> 00:27:55,840
strong when you're crossing like package

728
00:27:55,840 --> 00:27:58,240
boundaries like you publishing something

729
00:27:58,240 --> 00:28:01,090
that depends on web pack to NPM in a way

730
00:28:01,090 --> 00:28:02,529
that you could install it and just use

731
00:28:02,529 --> 00:28:04,149
it in your app I don't think the story

732
00:28:04,149 --> 00:28:06,909
is that strong there and I think that's

733
00:28:06,909 --> 00:28:08,890
probably where development in the future

734
00:28:08,890 --> 00:28:10,659
is going to have to go to make that a

