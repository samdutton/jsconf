1
00:00:16,380 --> 00:00:19,900

great to see everyone here yo got like

2
00:00:19,900 --> 00:00:21,970
30 minutes get a really really quick run

3
00:00:21,970 --> 00:00:25,420
through a very big project you know

4
00:00:25,420 --> 00:00:27,009
we'll be around today so please come and

5
00:00:27,009 --> 00:00:28,570
talk if you have questions about the

6
00:00:28,570 --> 00:00:31,779
api's or anything to do with WebRTC we

7
00:00:31,779 --> 00:00:34,330
really really need your feedback at this

8
00:00:34,330 --> 00:00:35,710
stage we want to know what you think of

9
00:00:35,710 --> 00:00:38,860
the api's and what you want from them I

10
00:00:38,860 --> 00:00:40,480
just want to get a quick check from the

11
00:00:40,480 --> 00:00:41,769
audience of you know what kind of stuff

12
00:00:41,769 --> 00:00:43,660
you've used is there anyone here in the

13
00:00:43,660 --> 00:00:45,250
audience who's actually built a web app

14
00:00:45,250 --> 00:00:49,540
with getusermedia okay few people there

15
00:00:49,540 --> 00:00:51,730
has anything done anything with like our

16
00:00:51,730 --> 00:00:54,219
tcp connection previously known as peer

17
00:00:54,219 --> 00:00:57,489
connection going to build an app ok I

18
00:00:57,489 --> 00:00:59,860
think that's a no one if anyone knows

19
00:00:59,860 --> 00:01:01,840
what those abbreviations mean then I

20
00:01:01,840 --> 00:01:05,740
take pity so you know I think there's

21
00:01:05,740 --> 00:01:10,330
been this incredible explosion in in you

22
00:01:10,330 --> 00:01:13,300
know the availability of media api's

23
00:01:13,300 --> 00:01:15,220
over the last few years we had the video

24
00:01:15,220 --> 00:01:17,590
and audio element which a huge shift in

25
00:01:17,590 --> 00:01:19,869
the way you could do things more

26
00:01:19,869 --> 00:01:22,330
recently we've had stuff like web audio

27
00:01:22,330 --> 00:01:25,360
media source the track element so on and

28
00:01:25,360 --> 00:01:29,320
so on and a stack of technologies that

29
00:01:29,320 --> 00:01:31,180
we can use with that stuff you know just

30
00:01:31,180 --> 00:01:34,000
CSS but also things like canvas element

31
00:01:34,000 --> 00:01:37,390
WebGL and so on and I think you know the

32
00:01:37,390 --> 00:01:38,890
combination with these AP is and these

33
00:01:38,890 --> 00:01:40,330
technologies and these different kinds

34
00:01:40,330 --> 00:01:41,830
of media come together we can get

35
00:01:41,830 --> 00:01:44,079
something you know really really

36
00:01:44,079 --> 00:01:47,229
exciting and that's what I think is

37
00:01:47,229 --> 00:01:49,210
going to be particularly interesting

38
00:01:49,210 --> 00:01:51,159
with WebRTC I just wanted to give a

39
00:01:51,159 --> 00:01:52,659
little example of the kind of thing I

40
00:01:52,659 --> 00:01:54,340
mean this has absolutely nothing to do

41
00:01:54,340 --> 00:01:56,110
with web RTC but I thought I'd show it

42
00:01:56,110 --> 00:02:01,720
anyway this is a an example of using the

43
00:02:01,720 --> 00:02:04,689
track element a guy at the Google campus

44
00:02:04,689 --> 00:02:06,670
in California it you know I cycled

45
00:02:06,670 --> 00:02:08,290
around the campus and he took video and

46
00:02:08,290 --> 00:02:10,390
he got GPS I put it together with the

47
00:02:10,390 --> 00:02:12,070
track elements it's pretty

48
00:02:12,070 --> 00:02:14,799
straightforward he cycles around and the

49
00:02:14,799 --> 00:02:16,600
map changes and you can change the

50
00:02:16,600 --> 00:02:18,010
position on the map and the position the

51
00:02:18,010 --> 00:02:20,549
video changes so you know it's not

52
00:02:20,549 --> 00:02:23,590
revolutionary stuff but you know what

53
00:02:23,590 --> 00:02:26,680
interested me about doing that was that

54
00:02:26,680 --> 00:02:28,390
the track element you know it wasn't

55
00:02:28,390 --> 00:02:29,090
invented

56
00:02:29,090 --> 00:02:30,709
those reasons it was invented so people

57
00:02:30,709 --> 00:02:32,480
could do initially it's just captions

58
00:02:32,480 --> 00:02:34,730
and subtitles but you know you get these

59
00:02:34,730 --> 00:02:36,410
interesting things I think with

60
00:02:36,410 --> 00:02:38,510
JavaScript when you get these kind of

61
00:02:38,510 --> 00:02:41,000
unforeseen things when api's come up

62
00:02:41,000 --> 00:02:42,980
against each other with different types

63
00:02:42,980 --> 00:02:46,879
of you know different kinds of media and

64
00:02:46,879 --> 00:02:52,340
data so you know traditionally if we're

65
00:02:52,340 --> 00:02:54,860
thinking about real-time communication

66
00:02:54,860 --> 00:02:57,739
it's been it's been sort of closed and

67
00:02:57,739 --> 00:02:59,959
corporate and hard to get at it's kind

68
00:02:59,959 --> 00:03:01,549
of out of the reach of you know kind of

69
00:03:01,549 --> 00:03:05,030
mere mortals like like you and me so

70
00:03:05,030 --> 00:03:06,829
what's what's happened is that you know

71
00:03:06,829 --> 00:03:08,620
there was there's been this big project

72
00:03:08,620 --> 00:03:11,709
there's kind of collaborative effort to

73
00:03:11,709 --> 00:03:14,510
bring something that was open source and

74
00:03:14,510 --> 00:03:16,579
unlicensed so you could get it right

75
00:03:16,579 --> 00:03:19,250
there in the browser the very short

76
00:03:19,250 --> 00:03:21,410
version of WebRTC is that lets you do

77
00:03:21,410 --> 00:03:23,150
you know real-time communication between

78
00:03:23,150 --> 00:03:27,440
browsers so stuff like video chat and

79
00:03:27,440 --> 00:03:29,569
you know real time gaming and so on but

80
00:03:29,569 --> 00:03:31,519
you know hopefully even more interesting

81
00:03:31,519 --> 00:03:35,870
stuff than that if we go back a bit the

82
00:03:35,870 --> 00:03:38,000
you know we had kind of HDD p which is

83
00:03:38,000 --> 00:03:39,440
sort of the basis of the web we can make

84
00:03:39,440 --> 00:03:41,450
requests to serve as get stuff we could

85
00:03:41,450 --> 00:03:44,569
do stuff with put and post and then we

86
00:03:44,569 --> 00:03:48,380
had Ajax which you know talk about six

87
00:03:48,380 --> 00:03:49,970
years to take off but people did really

88
00:03:49,970 --> 00:03:53,480
interesting stuff with it and then more

89
00:03:53,480 --> 00:03:55,459
recently WebSocket as let us do

90
00:03:55,459 --> 00:03:57,049
bi-directional communication with a

91
00:03:57,049 --> 00:03:59,389
server and again you know be interested

92
00:03:59,389 --> 00:04:02,930
to see what comes of that what WebRTC

93
00:04:02,930 --> 00:04:05,480
enables is communication between

94
00:04:05,480 --> 00:04:08,569
browsers and communication of real-time

95
00:04:08,569 --> 00:04:12,169
streaming data as I'll explain servers

96
00:04:12,169 --> 00:04:14,239
are involved but you know the point is

97
00:04:14,239 --> 00:04:16,220
you're having what you're setting up is

98
00:04:16,220 --> 00:04:20,150
a communication between two browsers so

99
00:04:20,150 --> 00:04:22,400
you know this communication not via a

100
00:04:22,400 --> 00:04:26,510
server so we have these you know these

101
00:04:26,510 --> 00:04:28,910
open standards and the idea is that you

102
00:04:28,910 --> 00:04:30,919
could have this stuff directly in your

103
00:04:30,919 --> 00:04:32,750
browser you know would it be great if

104
00:04:32,750 --> 00:04:35,270
you could just have like a video chat

105
00:04:35,270 --> 00:04:37,490
application in your web application that

106
00:04:37,490 --> 00:04:40,039
would be fantastic one of my colleagues

107
00:04:40,039 --> 00:04:42,480
said you know that something like

108
00:04:42,480 --> 00:04:46,710
human communication should be as normal

109
00:04:46,710 --> 00:04:48,840
a part of a web app as like entering

110
00:04:48,840 --> 00:04:52,920
text in a textbox and you know I think

111
00:04:52,920 --> 00:04:56,070
what's interesting is the what we'll see

112
00:04:56,070 --> 00:04:59,240
like beyond the scenarios as well so

113
00:04:59,240 --> 00:05:02,430
when RTC is kind of two different

114
00:05:02,430 --> 00:05:04,530
efforts as well as the implementation

115
00:05:04,530 --> 00:05:06,960
stuff we have the IETF work which is

116
00:05:06,960 --> 00:05:08,910
kind of protocols and formats lots of

117
00:05:08,910 --> 00:05:12,150
documents and the w3c api's for the web

118
00:05:12,150 --> 00:05:15,780
apps I mean at the moment you know kind

119
00:05:15,780 --> 00:05:18,540
of everyone's doing it with with

120
00:05:18,540 --> 00:05:20,940
real-time communication the problem is

121
00:05:20,940 --> 00:05:23,760
that you know like hangouts and skype or

122
00:05:23,760 --> 00:05:26,400
whatever work pretty well but for start

123
00:05:26,400 --> 00:05:28,170
they use plugins with the problems that

124
00:05:28,170 --> 00:05:30,720
they have these are closed you know

125
00:05:30,720 --> 00:05:32,220
there ra p is for these things but these

126
00:05:32,220 --> 00:05:35,490
are kind of closed systems and as we all

127
00:05:35,490 --> 00:05:37,860
know they they don't work perfectly

128
00:05:37,860 --> 00:05:40,860
either so WebRTC aims to make this stuff

129
00:05:40,860 --> 00:05:42,990
open but ready to go beyond this to do a

130
00:05:42,990 --> 00:05:46,410
better job and like I say you know

131
00:05:46,410 --> 00:05:47,730
what's really interesting is what

132
00:05:47,730 --> 00:05:50,370
scenarios will see beyond the simple

133
00:05:50,370 --> 00:05:53,460
video chat stuff so we're looking to

134
00:05:53,460 --> 00:05:55,770
build a common platform I don't think

135
00:05:55,770 --> 00:05:57,090
the participants really know what will

136
00:05:57,090 --> 00:06:00,660
come out of it but they're developing in

137
00:06:00,660 --> 00:06:03,990
collaboration these big projects and you

138
00:06:03,990 --> 00:06:06,740
know i think that the internet has

139
00:06:06,740 --> 00:06:08,700
revolutionized the way we communicate

140
00:06:08,700 --> 00:06:12,960
and we experience and consume media I

141
00:06:12,960 --> 00:06:14,700
you know I really believe I've said this

142
00:06:14,700 --> 00:06:18,090
before but that WebRTC can democratize

143
00:06:18,090 --> 00:06:22,560
and decentralize the the tools we have

144
00:06:22,560 --> 00:06:26,160
for communication but also for content

145
00:06:26,160 --> 00:06:27,750
creation and you know I'm thinking not

146
00:06:27,750 --> 00:06:29,690
just about things like gaming but also

147
00:06:29,690 --> 00:06:32,160
things like video production I've seen

148
00:06:32,160 --> 00:06:33,720
some really interesting ideas from the

149
00:06:33,720 --> 00:06:37,260
BBC about collaborative news editing for

150
00:06:37,260 --> 00:06:41,040
music making and so on and so on so I

151
00:06:41,040 --> 00:06:42,000
think this could have a really

152
00:06:42,000 --> 00:06:45,300
transformative effect someone told me

153
00:06:45,300 --> 00:06:47,880
that the communications industry is like

154
00:06:47,880 --> 00:06:50,160
it's like a two trillion dollar industry

155
00:06:50,160 --> 00:06:54,480
something like that so you know WebRTC

156
00:06:54,480 --> 00:06:56,110
could be a big thing

157
00:06:56,110 --> 00:06:58,180
least it you know it could well be the

158
00:06:58,180 --> 00:07:03,520
end of telephony as we know it just sort

159
00:07:03,520 --> 00:07:05,200
of smaller example of this this is

160
00:07:05,200 --> 00:07:08,410
something called tether with it's built

161
00:07:08,410 --> 00:07:09,940
by a company based in Europe called

162
00:07:09,940 --> 00:07:13,060
voxeo done great stuff with real-time

163
00:07:13,060 --> 00:07:15,640
communication this is a kind of simple

164
00:07:15,640 --> 00:07:18,910
idea it's a kind of communication system

165
00:07:18,910 --> 00:07:21,630
in a box so what they use it for is

166
00:07:21,630 --> 00:07:23,560
disaster communications so

167
00:07:23,560 --> 00:07:25,480
communications in a crisis where there

168
00:07:25,480 --> 00:07:28,120
is no telephone network what they have

169
00:07:28,120 --> 00:07:31,630
is an open cell phone network built

170
00:07:31,630 --> 00:07:33,730
using something called open BTS like

171
00:07:33,730 --> 00:07:36,940
this is an open source cell that you can

172
00:07:36,940 --> 00:07:38,590
set up yourself and they have that in

173
00:07:38,590 --> 00:07:40,360
that little box it's on the right of the

174
00:07:40,360 --> 00:07:44,230
computer and you can communicate with

175
00:07:44,230 --> 00:07:45,970
that from any kind of phone like any old

176
00:07:45,970 --> 00:07:48,370
feature phone whatever and then from

177
00:07:48,370 --> 00:07:50,200
that box you can communicate with a

178
00:07:50,200 --> 00:07:53,650
computer using WebRTC so yeah this is

179
00:07:53,650 --> 00:07:57,070
amazing to me it's telephone telephony

180
00:07:57,070 --> 00:07:58,570
without a carrot you know without a

181
00:07:58,570 --> 00:08:01,000
carrier I kind of DIY telephony and

182
00:08:01,000 --> 00:08:03,480
that's great but in this situation

183
00:08:03,480 --> 00:08:05,680
disaster communications that you know

184
00:08:05,680 --> 00:08:11,200
really makes a huge huge impact so any

185
00:08:11,200 --> 00:08:14,020
kind of real-time communication needs a

186
00:08:14,020 --> 00:08:15,940
bunch of different things so firstly

187
00:08:15,940 --> 00:08:18,460
obviously you need to be able to acquire

188
00:08:18,460 --> 00:08:20,650
streaming data somehow you know you need

189
00:08:20,650 --> 00:08:23,470
a source like from an audio audio from a

190
00:08:23,470 --> 00:08:25,930
mic or video from a camera or some other

191
00:08:25,930 --> 00:08:29,200
source of streaming data and then this

192
00:08:29,200 --> 00:08:31,810
middle bit which is actually really

193
00:08:31,810 --> 00:08:34,960
really hard is to communicate that data

194
00:08:34,960 --> 00:08:37,360
in real-time the streaming data between

195
00:08:37,360 --> 00:08:40,290
peers and to do that in a way that

196
00:08:40,290 --> 00:08:43,870
performs very well and copes with all

197
00:08:43,870 --> 00:08:47,980
kinds of network disasters the third

198
00:08:47,980 --> 00:08:50,140
part of this process is is something

199
00:08:50,140 --> 00:08:54,580
called signaling and that's the process

200
00:08:54,580 --> 00:08:56,860
by which you can exchange messages about

201
00:08:56,860 --> 00:08:58,180
what you're doing and how the handshake

202
00:08:58,180 --> 00:09:00,550
process all that stuff exchanging data

203
00:09:00,550 --> 00:09:02,620
or kind of metadata about what it is

204
00:09:02,620 --> 00:09:07,600
you're communicating so here's a really

205
00:09:07,600 --> 00:09:09,400
I just love the simplicity of this this

206
00:09:09,400 --> 00:09:10,000
is kind of

207
00:09:10,000 --> 00:09:13,420
the syntax that works in firefox this is

208
00:09:13,420 --> 00:09:16,140
a really simple example of getusermedia

209
00:09:16,140 --> 00:09:18,700
you can use it now in firefox night

210
00:09:18,700 --> 00:09:21,940
please but i'll show you the same we

211
00:09:21,940 --> 00:09:26,290
have the same syntax working in lots of

212
00:09:26,290 --> 00:09:27,970
different browsers we can't see much of

213
00:09:27,970 --> 00:09:31,210
the page here can't get to anything

214
00:09:31,210 --> 00:09:34,870
either let's have a look at opera so

215
00:09:34,870 --> 00:09:36,490
yeah we've got the same syntax running

216
00:09:36,490 --> 00:09:40,450
an opera and the same code again running

217
00:09:40,450 --> 00:09:46,830
I've actually put this code here in

218
00:09:46,830 --> 00:09:49,840
actually run it from Firebug using a

219
00:09:49,840 --> 00:09:52,990
video element in in Firefox what I

220
00:09:52,990 --> 00:09:55,180
discovered a silly thing is that like if

221
00:09:55,180 --> 00:09:57,010
you don't play the video Firefox

222
00:09:57,010 --> 00:09:58,600
actually records the stuff you're doing

223
00:09:58,600 --> 00:10:02,700
so if you then play back what you've got

224
00:10:02,700 --> 00:10:06,390
you get a whole bunch this is me earlier

225
00:10:06,390 --> 00:10:08,920
you get the idea it's like playing back

226
00:10:08,920 --> 00:10:10,570
the stuff you actually recorded with

227
00:10:10,570 --> 00:10:13,900
getusermedia so kind of similar syntax

228
00:10:13,900 --> 00:10:16,990
or virtually you know that on all those

229
00:10:16,990 --> 00:10:18,940
different browsers working the same way

230
00:10:18,940 --> 00:10:23,710
so that's a way of getting media what

231
00:10:23,710 --> 00:10:26,290
we've what we've seen is also a stack of

232
00:10:26,290 --> 00:10:28,300
stuff I might not go through these now

233
00:10:28,300 --> 00:10:31,600
but if anyone's seen Phil Nev stuff

234
00:10:31,600 --> 00:10:35,020
great like photo booth apps we've also

235
00:10:35,020 --> 00:10:37,240
got some really nice stuff I don't have

236
00:10:37,240 --> 00:10:38,980
anyone seen the magic xylophone let's

237
00:10:38,980 --> 00:10:41,280
see if we can make that work hold on

238
00:10:41,280 --> 00:10:45,960
let's see we get this magic xylophone

239
00:10:45,960 --> 00:10:48,130
this is kind of cool you can play a

240
00:10:48,130 --> 00:10:51,520
xylophone by waving your hands and

241
00:10:51,520 --> 00:10:56,440
there's motion detection yeah using

242
00:10:56,440 --> 00:10:58,450
getusermedia it's kind of simple but

243
00:10:58,450 --> 00:11:01,540
it's quite beautiful actually I better

244
00:11:01,540 --> 00:11:03,310
turn it off otherwise it will drive

245
00:11:03,310 --> 00:11:05,680
everyone crazy I just in case no one's

246
00:11:05,680 --> 00:11:07,600
seen this you know this is the the Phil

247
00:11:07,600 --> 00:11:10,630
Nev stuff there's been a miracle if it

248
00:11:10,630 --> 00:11:12,400
works with connectivity but you know

249
00:11:12,400 --> 00:11:14,710
it's really simple again doing filters

250
00:11:14,710 --> 00:11:17,080
and lots of silly stuff just straight

251
00:11:17,080 --> 00:11:19,060
stuff and you can take photos as well oh

252
00:11:19,060 --> 00:11:23,000
my god ok enough of that

253
00:11:23,010 --> 00:11:25,830
so you know lovely stuff just that's

254
00:11:25,830 --> 00:11:27,510
just come out of getusermedia you know

255
00:11:27,510 --> 00:11:29,580
that's just the first very first part of

256
00:11:29,580 --> 00:11:32,100
WebRTC what's really exciting a couple

257
00:11:32,100 --> 00:11:33,690
of weeks back we had integration of get

258
00:11:33,690 --> 00:11:35,970
user media and web audio this means you

259
00:11:35,970 --> 00:11:39,570
can use get user media as an input for

260
00:11:39,570 --> 00:11:42,150
web audio so essentially using the

261
00:11:42,150 --> 00:11:44,970
create media stream source methods on a

262
00:11:44,970 --> 00:11:46,890
stream that you got from say a

263
00:11:46,890 --> 00:11:49,860
microphone I'll try and do a demo of

264
00:11:49,860 --> 00:11:53,990
that and work by one of my colleagues

265
00:11:53,990 --> 00:11:57,390
let's just say nice um a guy called

266
00:11:57,390 --> 00:11:59,490
Chris Wilson check out his stuff is just

267
00:11:59,490 --> 00:12:01,770
fantastic this is a really simple

268
00:12:01,770 --> 00:12:03,420
example it's just a pitch detector

269
00:12:03,420 --> 00:12:08,850
excuse me while I try to sing ah okay

270
00:12:08,850 --> 00:12:13,650
you get the idea it's a bit grim he's

271
00:12:13,650 --> 00:12:16,290
also done some sorry this this will if

272
00:12:16,290 --> 00:12:18,450
you have tinnitus this will just do

273
00:12:18,450 --> 00:12:22,050
wonders for it this is okay you get the

274
00:12:22,050 --> 00:12:24,270
idea we're getting sort of weird effects

275
00:12:24,270 --> 00:12:29,580
and so sorry it's impossible without

276
00:12:29,580 --> 00:12:32,190
that with the echo so what you're

277
00:12:32,190 --> 00:12:34,320
getting there is like I say input from

278
00:12:34,320 --> 00:12:36,620
getusermedia from the microphone locally

279
00:12:36,620 --> 00:12:39,690
into Web Audio you could also be getting

280
00:12:39,690 --> 00:12:41,160
you know media stream doesn't define

281
00:12:41,160 --> 00:12:42,710
that you have to get it from the local

282
00:12:42,710 --> 00:12:45,240
microphone or camera you could get it

283
00:12:45,240 --> 00:12:47,310
from any source of streaming data so

284
00:12:47,310 --> 00:12:49,260
huge potential there like I say once

285
00:12:49,260 --> 00:12:53,750
again 11 API coming up against another

286
00:12:53,750 --> 00:12:59,250
we have here his vocoder demo which is

287
00:12:59,250 --> 00:13:00,990
kind of similar and will probably sound

288
00:13:00,990 --> 00:13:08,430
even worse okay anyway you get the

289
00:13:08,430 --> 00:13:12,270
general idea getting horrible effects

290
00:13:12,270 --> 00:13:16,620
there okay right so lovely stuff there

291
00:13:16,620 --> 00:13:18,000
check it out the the you know the

292
00:13:18,000 --> 00:13:20,580
combination of web audio and get user

293
00:13:20,580 --> 00:13:24,570
media um so like I say WebRTC needs to

294
00:13:24,570 --> 00:13:26,220
do these three different things I've

295
00:13:26,220 --> 00:13:27,720
shown you the first one which is getting

296
00:13:27,720 --> 00:13:30,450
streaming data we also need to

297
00:13:30,450 --> 00:13:33,540
communicate the data somehow there's got

298
00:13:33,540 --> 00:13:34,800
to be a way of doing that and then this

299
00:13:34,800 --> 00:13:36,390
way of exchanging

300
00:13:36,390 --> 00:13:39,740
control messages so the API is for this

301
00:13:39,740 --> 00:13:43,950
media stream and what's now called RTC

302
00:13:43,950 --> 00:13:46,200
peer connection and something called

303
00:13:46,200 --> 00:13:48,090
data channel these are the three

304
00:13:48,090 --> 00:13:52,980
components of the WebRTC project i've

305
00:13:52,980 --> 00:13:54,870
talked about media stream for getting

306
00:13:54,870 --> 00:13:57,120
streaming data RTC peer connection is

307
00:13:57,120 --> 00:14:01,080
the part that does the communication of

308
00:14:01,080 --> 00:14:04,320
audio and videos so this is doing a lot

309
00:14:04,320 --> 00:14:06,090
of different stuff things like coping

310
00:14:06,090 --> 00:14:10,050
with bandwidth changes enabling

311
00:14:10,050 --> 00:14:13,530
encryption and so on that there's a lot

312
00:14:13,530 --> 00:14:16,550
in this as i'll show you the the third

313
00:14:16,550 --> 00:14:19,050
part of this puzzle which is sort of

314
00:14:19,050 --> 00:14:21,390
kind of part of the peer connection

315
00:14:21,390 --> 00:14:23,460
stuff as well it's called data channel

316
00:14:23,460 --> 00:14:24,900
and to me this is potentially the most

317
00:14:24,900 --> 00:14:27,360
exciting thing of all what this allows

318
00:14:27,360 --> 00:14:30,570
is you know PR TCP connection is all

319
00:14:30,570 --> 00:14:32,340
oriented really to audio video and

320
00:14:32,340 --> 00:14:35,010
particularly to voice and of course you

321
00:14:35,010 --> 00:14:36,870
know there's a bunch of telephony has

322
00:14:36,870 --> 00:14:38,970
gone into this but data channel allows

323
00:14:38,970 --> 00:14:42,570
streaming communication of any arbitrary

324
00:14:42,570 --> 00:14:44,880
data so this could be really interesting

325
00:14:44,880 --> 00:14:48,510
for a you know for gaming I also think

326
00:14:48,510 --> 00:14:50,070
of sort of scientific applications you

327
00:14:50,070 --> 00:14:52,050
know getting data from CERN to your

328
00:14:52,050 --> 00:14:53,940
local university you know interesting

329
00:14:53,940 --> 00:14:57,000
stuff there I heard some web at sea

330
00:14:57,000 --> 00:14:59,100
engineers talking about this saying that

331
00:14:59,100 --> 00:15:00,870
you know in a good day with WebSocket I

332
00:15:00,870 --> 00:15:03,660
think you can get something like maybe

333
00:15:03,660 --> 00:15:06,510
50 millisecond latency say within Europe

334
00:15:06,510 --> 00:15:09,840
if you're really lucky and what they're

335
00:15:09,840 --> 00:15:12,360
talking about with data channel is to

336
00:15:12,360 --> 00:15:14,760
try and get it to really you know where

337
00:15:14,760 --> 00:15:16,410
they've got what you call it you know a

338
00:15:16,410 --> 00:15:17,880
speed of light problem so they're

339
00:15:17,880 --> 00:15:20,520
getting very very close to the physical

340
00:15:20,520 --> 00:15:24,000
constraints which is stunning stuff and

341
00:15:24,000 --> 00:15:26,760
we'll that is coming it's not there yet

342
00:15:26,760 --> 00:15:28,890
there are some polyfills if you want to

343
00:15:28,890 --> 00:15:30,930
have a play with it but I think that'll

344
00:15:30,930 --> 00:15:34,440
be incredibly interesting the two things

345
00:15:34,440 --> 00:15:37,170
that aren't part of the WebRTC project

346
00:15:37,170 --> 00:15:40,550
these processes of peer discovery and

347
00:15:40,550 --> 00:15:44,490
signaling by peer discovery I mean

348
00:15:44,490 --> 00:15:46,530
actually finding someone to talk to you

349
00:15:46,530 --> 00:15:47,550
know if you want to make a telephone

350
00:15:47,550 --> 00:15:49,350
call you have a telephone number and you

351
00:15:49,350 --> 00:15:49,860
use

352
00:15:49,860 --> 00:15:51,209
there's all sort of a lot of magic that

353
00:15:51,209 --> 00:15:52,950
goes on in telephony systems with

354
00:15:52,950 --> 00:15:57,089
handshaking and so on and it's the same

355
00:15:57,089 --> 00:16:01,440
with WebRTC or any kinds of real-time

356
00:16:01,440 --> 00:16:03,630
communication you know a really simple

357
00:16:03,630 --> 00:16:06,120
kind of user discovery mechanism that

358
00:16:06,120 --> 00:16:07,800
it's actually you know is used by some

359
00:16:07,800 --> 00:16:10,440
of the the existing demos is you take a

360
00:16:10,440 --> 00:16:12,180
unique URL and you put it in an email

361
00:16:12,180 --> 00:16:13,970
and you send it to your friend you know

362
00:16:13,970 --> 00:16:16,110
you've discovered the user you've

363
00:16:16,110 --> 00:16:19,230
exchanged this URL and then you can

364
00:16:19,230 --> 00:16:23,480
communicate via a server using that URL

365
00:16:23,480 --> 00:16:26,910
because essentially discovery is all

366
00:16:26,910 --> 00:16:29,640
about it's all about setting up the

367
00:16:29,640 --> 00:16:32,010
means to do what's called signaling so

368
00:16:32,010 --> 00:16:34,050
to do any kind of real-time

369
00:16:34,050 --> 00:16:36,089
communication but thinking about WebRTC

370
00:16:36,089 --> 00:16:38,100
you need to be able to set up this

371
00:16:38,100 --> 00:16:41,399
channel to do signaling so essentially

372
00:16:41,399 --> 00:16:42,630
what you need to do is you need to

373
00:16:42,630 --> 00:16:44,459
contact your friend and say hey I want

374
00:16:44,459 --> 00:16:46,649
to do like say video chat just like you

375
00:16:46,649 --> 00:16:48,920
do with hangouts or skype or whatever

376
00:16:48,920 --> 00:16:51,870
and then there needs to be a mechanism

377
00:16:51,870 --> 00:16:54,779
that you can use to set up a signaling

378
00:16:54,779 --> 00:16:57,420
channel so what people have done is done

379
00:16:57,420 --> 00:17:00,420
stuff with WebSockets and also examples

380
00:17:00,420 --> 00:17:03,930
using xhr plus the data channel API in

381
00:17:03,930 --> 00:17:07,350
Google App Engine so you make contact

382
00:17:07,350 --> 00:17:09,089
with your friends and then basically

383
00:17:09,089 --> 00:17:11,280
you're saying let's use WebSocket via

384
00:17:11,280 --> 00:17:13,949
this server to exchange signaling

385
00:17:13,949 --> 00:17:16,919
information now the content of the

386
00:17:16,919 --> 00:17:20,100
signaling information is is twofold

387
00:17:20,100 --> 00:17:21,780
there are two bits to this there's

388
00:17:21,780 --> 00:17:24,150
information about the local setup that

389
00:17:24,150 --> 00:17:25,799
you have the capabilities of your

390
00:17:25,799 --> 00:17:28,470
machine but also information about the

391
00:17:28,470 --> 00:17:30,809
media you're going to communicate when

392
00:17:30,809 --> 00:17:32,040
you actually start communicating

393
00:17:32,040 --> 00:17:35,700
directly between the browsers it's not a

394
00:17:35,700 --> 00:17:37,650
really good analogy but if you think of

395
00:17:37,650 --> 00:17:40,860
HTTP make HTTP requests and there are

396
00:17:40,860 --> 00:17:42,540
headers that tell you about capabilities

397
00:17:42,540 --> 00:17:44,280
and the content and then there's the

398
00:17:44,280 --> 00:17:47,669
payload which which is the actual

399
00:17:47,669 --> 00:17:51,480
content you're trying to exchange and

400
00:17:51,480 --> 00:17:53,160
the second part of that is that we need

401
00:17:53,160 --> 00:17:55,710
to be able to work out how to contact

402
00:17:55,710 --> 00:17:57,480
ate each other how to actually set up

403
00:17:57,480 --> 00:17:58,860
the network connection and that

404
00:17:58,860 --> 00:18:02,250
information is exchanged via signaling

405
00:18:02,250 --> 00:18:03,010
to

406
00:18:03,010 --> 00:18:06,490
so you know it's peer-to-peer but at

407
00:18:06,490 --> 00:18:08,520
this point in time we do need servers

408
00:18:08,520 --> 00:18:11,530
sadly you know you can't just kind of

409
00:18:11,530 --> 00:18:13,570
shout into the internet begin exchanging

410
00:18:13,570 --> 00:18:15,310
data with my friend Heinrich you know

411
00:18:15,310 --> 00:18:17,170
it's just not it's not going to work

412
00:18:17,170 --> 00:18:23,260
sadly so here's a diagram it kind of

413
00:18:23,260 --> 00:18:25,060
shows this it's called this architecture

414
00:18:25,060 --> 00:18:26,260
is called jcf there's been this

415
00:18:26,260 --> 00:18:28,120
deliberate decision to have the

416
00:18:28,120 --> 00:18:32,140
signaling outside the core WebRTC stuff

417
00:18:32,140 --> 00:18:34,530
so I mean kind of all this shows is that

418
00:18:34,530 --> 00:18:38,050
you know you set up a session signaling

419
00:18:38,050 --> 00:18:41,440
between the two browsers and you

420
00:18:41,440 --> 00:18:43,140
exchange like session information

421
00:18:43,140 --> 00:18:45,790
signaling data and so on and once that's

422
00:18:45,790 --> 00:18:47,650
happened you can do this bottom bit

423
00:18:47,650 --> 00:18:49,510
which is actually communicating directly

424
00:18:49,510 --> 00:18:53,410
between the two browsers and that's done

425
00:18:53,410 --> 00:18:56,770
using you know if it works over RTP over

426
00:18:56,770 --> 00:19:00,480
UDP if that's not possible it kind of

427
00:19:00,480 --> 00:19:02,830
falls back to other mechanisms which

428
00:19:02,830 --> 00:19:06,930
I'll talk a bit more about Anna moment

429
00:19:06,930 --> 00:19:10,480
this very complicated looking diagram is

430
00:19:10,480 --> 00:19:11,980
really just there to show you that it's

431
00:19:11,980 --> 00:19:14,530
really bloody complicated you know this

432
00:19:14,530 --> 00:19:16,330
is what peer connection does and it does

433
00:19:16,330 --> 00:19:17,890
a stack of stuff and the other point

434
00:19:17,890 --> 00:19:19,570
about this is that shields a lot of the

435
00:19:19,570 --> 00:19:23,020
complexity from the developer so yeah

436
00:19:23,020 --> 00:19:24,790
peer connection this is the stuff that

437
00:19:24,790 --> 00:19:27,280
does the video and voice audio calling

438
00:19:27,280 --> 00:19:29,560
and it has to do a lot things like

439
00:19:29,560 --> 00:19:31,930
packet loss concealment noise

440
00:19:31,930 --> 00:19:34,900
suppression what's called gain control

441
00:19:34,900 --> 00:19:36,580
so your volumes don't go up and down too

442
00:19:36,580 --> 00:19:39,220
much image cleaning coping with you know

443
00:19:39,220 --> 00:19:42,310
changing bandwidth a stack of other

444
00:19:42,310 --> 00:19:44,890
stuff this thing called dynamic jitter

445
00:19:44,890 --> 00:19:46,600
buffering so you need to do really

446
00:19:46,600 --> 00:19:48,370
clever buffering to avoid some hiccups

447
00:19:48,370 --> 00:19:51,340
the video and audio you'll also notice

448
00:19:51,340 --> 00:19:55,360
that in this diagram there are codex but

449
00:19:55,360 --> 00:19:58,420
there is nothing in the specs that that

450
00:19:58,420 --> 00:20:01,330
refers to specific codex this is you

451
00:20:01,330 --> 00:20:02,880
know this is essentially the

452
00:20:02,880 --> 00:20:08,710
implementation as it exists in chrome so

453
00:20:08,710 --> 00:20:11,050
a good place to start you know if you

454
00:20:11,050 --> 00:20:13,750
want to have a look at web RTC I would

455
00:20:13,750 --> 00:20:17,049
recommend a really simple example here

456
00:20:17,049 --> 00:20:21,009
which I actually nicked from masam

457
00:20:21,009 --> 00:20:29,509
colleagues let's just close that stuff

458
00:20:29,519 --> 00:20:32,919
so what this page does and I'll just

459
00:20:32,919 --> 00:20:34,840
show you that well I'll show you the app

460
00:20:34,840 --> 00:20:35,860
and then I can show you the code

461
00:20:35,860 --> 00:20:38,019
essentially what this is doing is it's

462
00:20:38,019 --> 00:20:40,749
doing web RTC but within a page so

463
00:20:40,749 --> 00:20:42,399
there's none of the signaling mechanism

464
00:20:42,399 --> 00:20:44,019
you're actually you just signaling from

465
00:20:44,019 --> 00:20:45,669
one object to another within the page

466
00:20:45,669 --> 00:20:47,409
you're not having to set up some

467
00:20:47,409 --> 00:20:51,580
WebSocket channel or whatever so yeah if

468
00:20:51,580 --> 00:20:54,909
I start this off then it's it's getting

469
00:20:54,909 --> 00:20:56,289
the local stream and that's being

470
00:20:56,289 --> 00:20:57,909
displayed in the left hand side there

471
00:20:57,909 --> 00:21:00,159
I'll then call my friends who's actually

472
00:21:00,159 --> 00:21:03,190
the same on the same page the same code

473
00:21:03,190 --> 00:21:06,690
and yeah now we're having communication

474
00:21:06,690 --> 00:21:08,889
but you know it's sort of fake because

475
00:21:08,889 --> 00:21:12,100
it's on the same page if we look at the

476
00:21:12,100 --> 00:21:16,389
code this is you'll see it's it's it's

477
00:21:16,389 --> 00:21:20,109
really pretty simple stuff you know

478
00:21:20,109 --> 00:21:24,159
that's that's it so that's actually all

479
00:21:24,159 --> 00:21:26,559
you need to do within a page to do peer

480
00:21:26,559 --> 00:21:28,749
connection like that so I'd say that's a

481
00:21:28,749 --> 00:21:30,309
really good place to start if you want

482
00:21:30,309 --> 00:21:33,039
to start getting your head around web

483
00:21:33,039 --> 00:21:35,409
RTC you know I'll make no bones about it

484
00:21:35,409 --> 00:21:37,359
there is some complex stuff in this and

485
00:21:37,359 --> 00:21:39,940
it can be quite hard to to get your head

486
00:21:39,940 --> 00:21:43,710
around the whole the whole set of stuff

487
00:21:43,710 --> 00:21:48,669
um so yeah this is the most complicated

488
00:21:48,669 --> 00:21:53,200
bit so just just to warn you this is the

489
00:21:53,200 --> 00:21:55,899
process whereby once you've created a

490
00:21:55,899 --> 00:21:59,190
peer connection object you actually make

491
00:21:59,190 --> 00:22:01,509
exchange of data about session

492
00:22:01,509 --> 00:22:03,309
information between the caller and the

493
00:22:03,309 --> 00:22:05,499
corlee so what you do is you make this

494
00:22:05,499 --> 00:22:07,299
thing called an offer which uses

495
00:22:07,299 --> 00:22:08,320
something called the session description

496
00:22:08,320 --> 00:22:11,320
protocol you send that via whatever it

497
00:22:11,320 --> 00:22:12,909
was that you set up as the signaling

498
00:22:12,909 --> 00:22:15,279
mechanism to the coulee the person

499
00:22:15,279 --> 00:22:17,590
you're trying to speak to you and then

500
00:22:17,590 --> 00:22:20,200
when they get that they can set that and

501
00:22:20,200 --> 00:22:21,909
go all right this is the conditions at

502
00:22:21,909 --> 00:22:24,489
the other end of this conversation then

503
00:22:24,489 --> 00:22:26,679
they make their own session description

504
00:22:26,679 --> 00:22:28,269
which is called an answer and then I

505
00:22:28,269 --> 00:22:30,100
send it back again and once that process

506
00:22:30,100 --> 00:22:30,880
happens

507
00:22:30,880 --> 00:22:34,230
you can begin to communicate stuff now

508
00:22:34,230 --> 00:22:36,340
simultaneously there's another process

509
00:22:36,340 --> 00:22:38,440
that goes on with our tcp connection

510
00:22:38,440 --> 00:22:41,380
which is called finding candidates the

511
00:22:41,380 --> 00:22:43,480
idea of a candidate is essentially an IP

512
00:22:43,480 --> 00:22:45,880
address and a port a way of connecting

513
00:22:45,880 --> 00:22:48,630
with someone else out there in the world

514
00:22:48,630 --> 00:22:51,190
and again this is a sort of similar

515
00:22:51,190 --> 00:22:54,490
process that happens when you create the

516
00:22:54,490 --> 00:22:56,800
work the rtcp connection object you

517
00:22:56,800 --> 00:22:57,730
create this thing called a nice

518
00:22:57,730 --> 00:22:59,740
candidate you serialize it you use the

519
00:22:59,740 --> 00:23:01,570
signaling channel to send that to the

520
00:23:01,570 --> 00:23:03,910
other person they set that they do their

521
00:23:03,910 --> 00:23:05,920
own one and they send it back again now

522
00:23:05,920 --> 00:23:07,600
once those two things have happened

523
00:23:07,600 --> 00:23:10,420
those two processes and you know there's

524
00:23:10,420 --> 00:23:11,890
a kind of pinging process to check it

525
00:23:11,890 --> 00:23:14,850
all going to work then you've got

526
00:23:14,850 --> 00:23:17,230
communication then directly directly

527
00:23:17,230 --> 00:23:19,450
between the two peers not via the

528
00:23:19,450 --> 00:23:21,760
signaling server not via anything else

529
00:23:21,760 --> 00:23:24,880
directly between the two peers at the

530
00:23:24,880 --> 00:23:26,560
moment the way it's been implemented is

531
00:23:26,560 --> 00:23:31,390
like one to one but there's no reason

532
00:23:31,390 --> 00:23:34,390
why it couldn't be essentially

533
00:23:34,390 --> 00:23:36,760
many-to-many this is just some of the

534
00:23:36,760 --> 00:23:39,670
code we saw before and just thinking

535
00:23:39,670 --> 00:23:44,800
back about the servers we've got as i

536
00:23:44,800 --> 00:23:47,290
said to you we have to use servers at

537
00:23:47,290 --> 00:23:49,570
this point I can't see a situation where

538
00:23:49,570 --> 00:23:51,790
this would it might be decentralized but

539
00:23:51,790 --> 00:23:52,900
essentially we still need these

540
00:23:52,900 --> 00:23:55,030
mechanisms for user discovery and

541
00:23:55,030 --> 00:23:56,950
communicating with the other person you

542
00:23:56,950 --> 00:23:58,300
know to say hi I want to do video chat

543
00:23:58,300 --> 00:24:01,330
or whatever and we also need a signaling

544
00:24:01,330 --> 00:24:03,940
channel now the two are there are two

545
00:24:03,940 --> 00:24:07,570
other bits to this we need to be able to

546
00:24:07,570 --> 00:24:09,490
for this all to work with in things like

547
00:24:09,490 --> 00:24:11,440
corporate networks so we need to be able

548
00:24:11,440 --> 00:24:14,620
to traverse Nats firewalls and so on and

549
00:24:14,620 --> 00:24:16,150
for that we use something called stun

550
00:24:16,150 --> 00:24:18,490
which is essentially just a way for a

551
00:24:18,490 --> 00:24:22,000
peer behind a NAT or whatever to get its

552
00:24:22,000 --> 00:24:26,620
external IP address and so on now like I

553
00:24:26,620 --> 00:24:32,350
said WebRTC tries to do RTP over UDP

554
00:24:32,350 --> 00:24:34,150
directly between the clients there are

555
00:24:34,150 --> 00:24:37,360
situations where that can fail so it

556
00:24:37,360 --> 00:24:39,160
hasn't been implemented yet but you will

557
00:24:39,160 --> 00:24:40,780
be able to use what's called a turn

558
00:24:40,780 --> 00:24:43,840
server a turn server is a kind of relay

559
00:24:43,840 --> 00:24:44,679
server

560
00:24:44,679 --> 00:24:46,210
be able to specify the address of that

561
00:24:46,210 --> 00:24:47,799
when you create your peer connection

562
00:24:47,799 --> 00:24:50,009
object and that is a means for

563
00:24:50,009 --> 00:24:52,570
exchanging data of via this intermediary

564
00:24:52,570 --> 00:24:54,909
relay if the direct connection doesn't

565
00:24:54,909 --> 00:24:56,590
work so essentially what you're doing is

566
00:24:56,590 --> 00:25:00,190
you're falling back to TCP here's a

567
00:25:00,190 --> 00:25:05,139
diagram of exactly that which shows yeah

568
00:25:05,139 --> 00:25:06,850
the communication happening via the

569
00:25:06,850 --> 00:25:08,799
relay server not directly between the

570
00:25:08,799 --> 00:25:12,669
peers so where can I use this stuff well

571
00:25:12,669 --> 00:25:15,129
you've got it in chrome you've got get

572
00:25:15,129 --> 00:25:18,460
user media and our TCP connection peer

573
00:25:18,460 --> 00:25:20,039
connections stables still behind a flag

574
00:25:20,039 --> 00:25:23,379
operas got get user media like I showed

575
00:25:23,379 --> 00:25:25,419
Firefox has get user media and the night

576
00:25:25,419 --> 00:25:28,509
please I think Opera Mobile has get user

577
00:25:28,509 --> 00:25:30,940
media and Firefox i think on some of

578
00:25:30,940 --> 00:25:33,220
firefox mobile i haven't seen it that I

579
00:25:33,220 --> 00:25:35,379
believe that's there as well rdc

580
00:25:35,379 --> 00:25:37,990
peerconnection told is coming to Firefox

581
00:25:37,990 --> 00:25:42,730
in January 2013 and of course in IE you

582
00:25:42,730 --> 00:25:46,720
can use chrome frame but you know what

583
00:25:46,720 --> 00:25:49,779
this means is that by in the next few

584
00:25:49,779 --> 00:25:52,659
months most you know if unless the sky

585
00:25:52,659 --> 00:25:55,869
falls on our heads we will have the

586
00:25:55,869 --> 00:25:58,480
ability to do WebRTC in most of the

587
00:25:58,480 --> 00:26:00,850
world's browsers we hope say I think

588
00:26:00,850 --> 00:26:03,669
that's very exciting just one thing we

589
00:26:03,669 --> 00:26:05,679
talked about web but you know there's a

590
00:26:05,679 --> 00:26:07,600
whole C++ aspect to this which is

591
00:26:07,600 --> 00:26:11,169
incredibly you know rich and and it's a

592
00:26:11,169 --> 00:26:13,240
great API and have a look at that

593
00:26:13,240 --> 00:26:14,559
there's lots of information on the web

594
00:26:14,559 --> 00:26:17,919
RTC org site this enables you to do

595
00:26:17,919 --> 00:26:20,769
stuff like set up a web RTC client on a

596
00:26:20,769 --> 00:26:23,289
server so to speak I've also seen a

597
00:26:23,289 --> 00:26:25,649
couple of weeks out there's on YouTube a

598
00:26:25,649 --> 00:26:28,539
cutie cute app that's built using WebRTC

599
00:26:28,539 --> 00:26:31,659
so you know great for doing stuff with

600
00:26:31,659 --> 00:26:37,539
WebRTC in your C++ apps so just a last

601
00:26:37,539 --> 00:26:42,580
couple of demos I'm not sure this will

602
00:26:42,580 --> 00:26:44,529
work in this situation but let's try it

603
00:26:44,529 --> 00:26:48,159
out anyway just close some of these

604
00:26:48,159 --> 00:26:51,820
windows so I'd say once you've got your

605
00:26:51,820 --> 00:26:53,590
head around the peer connection stuff

606
00:26:53,590 --> 00:26:55,690
that has showed before then the next

607
00:26:55,690 --> 00:26:58,090
best place to go is

608
00:26:58,090 --> 00:27:01,990
to have a look at a party see appspot

609
00:27:01,990 --> 00:27:05,710
com and what this has is the full

610
00:27:05,710 --> 00:27:09,520
signaling setup so if we have a look at

611
00:27:09,520 --> 00:27:13,330
this this is actually this might I'll

612
00:27:13,330 --> 00:27:15,159
turn on the mic a bit but it's going to

613
00:27:15,159 --> 00:27:26,590
go let's see chug chug yeah is it going

614
00:27:26,590 --> 00:27:30,010
to work I don't know essentially what

615
00:27:30,010 --> 00:27:33,789
you've got there is let's just try that

616
00:27:33,789 --> 00:27:36,460
again so what you've got is is peer

617
00:27:36,460 --> 00:27:39,220
connection plus signaling so like I say

618
00:27:39,220 --> 00:27:42,730
this is a really great place to look at

619
00:27:42,730 --> 00:27:46,270
the whole picture of web RTC you notice

620
00:27:46,270 --> 00:27:50,080
there that we're getting the little the

621
00:27:50,080 --> 00:27:52,390
confirmation box so there is an aspect

622
00:27:52,390 --> 00:27:54,220
of this which is you know we have to

623
00:27:54,220 --> 00:27:56,110
think carefully about this in terms of

624
00:27:56,110 --> 00:27:59,590
user information okay it's been hard to

625
00:27:59,590 --> 00:28:01,240
see on this monitor but essentially

626
00:28:01,240 --> 00:28:04,330
we've got you can see there I've got

627
00:28:04,330 --> 00:28:07,510
both clients and the the audio is going

628
00:28:07,510 --> 00:28:09,340
really hideous but you know that's a

629
00:28:09,340 --> 00:28:13,289
working video chat application using

630
00:28:13,289 --> 00:28:17,070
using a party see so you're using WebRTC

631
00:28:17,070 --> 00:28:19,899
so yeah check that out as the I'd say

632
00:28:19,899 --> 00:28:21,399
the next place to stop if you're trying

633
00:28:21,399 --> 00:28:24,820
to understand this stuff I won't show

634
00:28:24,820 --> 00:28:26,020
this now but WebGL meeting is a

635
00:28:26,020 --> 00:28:28,210
beautiful implementation using WebGL of

636
00:28:28,210 --> 00:28:30,669
two clients and sort of old-fashioned

637
00:28:30,669 --> 00:28:33,279
televisions and have a look at play here

638
00:28:33,279 --> 00:28:36,070
my game this is lovely work from agency

639
00:28:36,070 --> 00:28:37,600
magnetic north who did this for us at

640
00:28:37,600 --> 00:28:39,190
Google i/o it's a game the old game

641
00:28:39,190 --> 00:28:40,450
where you put a name on your head you

642
00:28:40,450 --> 00:28:43,990
have to guess who you are so if you want

643
00:28:43,990 --> 00:28:46,390
to find out more about WebRTC you know

644
00:28:46,390 --> 00:28:48,370
have a look at web RTC org I'd really

645
00:28:48,370 --> 00:28:51,250
recommend Justin a Bertie's google i/o

646
00:28:51,250 --> 00:28:53,049
video there's also a great video on

647
00:28:53,049 --> 00:28:56,890
vimeo from and that from erickson so

648
00:28:56,890 --> 00:28:59,169
yeah a great introduction there and

649
00:28:59,169 --> 00:29:04,240
check out the stuff on html5 rocks I i

650
00:29:04,240 --> 00:29:06,700
do tweak quite a lot about WebRTC so I

651
00:29:06,700 --> 00:29:09,730
tweeted at sw12 and you know usually put

652
00:29:09,730 --> 00:29:12,070
most of the big kind of news stories for

653
00:29:12,070 --> 00:29:12,320
their

654
00:29:12,320 --> 00:29:14,870
and please we you know we really want to

655
00:29:14,870 --> 00:29:18,470
know your experiences of using WebRTC in

656
00:29:18,470 --> 00:29:20,630
chrome so please if you're using it

657
00:29:20,630 --> 00:29:22,610
firebugs tell us what you want and tell

658
00:29:22,610 --> 00:29:26,269
us what you need from the api's you know

659
00:29:26,269 --> 00:29:27,710
I really hope this is going to have a

660
00:29:27,710 --> 00:29:29,990
really intro you know a disruptive

661
00:29:29,990 --> 00:29:34,159
effect on on media so so please ask me

662
00:29:34,159 --> 00:29:35,690
questions now slightly run out of time

663
00:29:35,690 --> 00:29:37,970
but you can speak to me now speak to me

664
00:29:37,970 --> 00:29:47,090
in the break yes Peter yes there is a

665
00:29:47,090 --> 00:29:50,720
rumor on the internet that there might

666
00:29:50,720 --> 00:29:52,279
be some kind of hackathon going on a

667
00:29:52,279 --> 00:29:54,470
long run remember 30 did you confirm

668
00:29:54,470 --> 00:29:56,600
that yeah yeah I've heard some words

669
00:29:56,600 --> 00:29:59,120
about that there is an event in london

670
00:29:59,120 --> 00:30:02,389
on the thirtieth of november at campus

671
00:30:02,389 --> 00:30:05,330
london and Peter may have something to

672
00:30:05,330 --> 00:30:07,299
do with that so if you're interested

673
00:30:07,299 --> 00:30:10,549
give me or Peter and shout we're going

674
00:30:10,549 --> 00:30:13,639
to have a big intense day of web audio

675
00:30:13,639 --> 00:30:16,789
web RTC hacking hackathon with like the

676
00:30:16,789 --> 00:30:20,000
the kind of core WebRTC boffins there

677
00:30:20,000 --> 00:30:21,230
and some really interesting people

678
00:30:21,230 --> 00:30:23,509
designers and performers as well so at a

679
00:30:23,509 --> 00:30:26,629
campus London 30th of November good one

680
00:30:26,629 --> 00:30:28,610
awesome we're running out of time for

681
00:30:28,610 --> 00:30:31,009
questions but remember this face if you

682
00:30:31,009 --> 00:30:33,200
have questions about awesome WebRTC

683
00:30:33,200 --> 00:30:35,570
stuff and we have a next speaker coming

684
00:30:35,570 --> 00:30:38,090
right on and one more and then we have

685
00:30:38,090 --> 00:30:40,909
lunch so hold on for one more talk and

