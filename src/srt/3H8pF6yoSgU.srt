1
00:00:05,330 --> 00:00:08,519

thank ball all right so let's talk about

2
00:00:08,519 --> 00:00:10,080
a little bit about security today I'll

3
00:00:10,080 --> 00:00:12,090
introduce myself first my name is Ron

4
00:00:12,090 --> 00:00:14,070
Ptolemy developer advocate at sneakin

5
00:00:14,070 --> 00:00:16,500
from Israel I sneak we build developer

6
00:00:16,500 --> 00:00:19,080
tooling real for security tooling to

7
00:00:19,080 --> 00:00:20,580
help developers and empower them to

8
00:00:20,580 --> 00:00:23,010
actually fix security vulnerabilities

9
00:00:23,010 --> 00:00:24,269
that they have in their open-source

10
00:00:24,269 --> 00:00:26,640
projects I am also actively involved in

11
00:00:26,640 --> 00:00:28,680
an OG air security working group to help

12
00:00:28,680 --> 00:00:31,170
improve the state of security of no GS

13
00:00:31,170 --> 00:00:33,660
and the NPM ecosystem as well and to a

14
00:00:33,660 --> 00:00:35,430
lot of other projects like OS node goat

15
00:00:35,430 --> 00:00:37,530
and some books I wrote about security if

16
00:00:37,530 --> 00:00:38,969
you're interested in any of those and

17
00:00:38,969 --> 00:00:40,230
getting involved I'll be happy to help

18
00:00:40,230 --> 00:00:41,870
so just ping me on Twitter and we can

19
00:00:41,870 --> 00:00:45,270
take it offline so open source is

20
00:00:45,270 --> 00:00:47,160
awesome right we're all using virtually

21
00:00:47,160 --> 00:00:49,920
everyone is using open source in one way

22
00:00:49,920 --> 00:00:51,960
or the other it is a great way for us to

23
00:00:51,960 --> 00:00:54,449
go ahead and just focus on the business

24
00:00:54,449 --> 00:00:55,980
logic of things that we need to build

25
00:00:55,980 --> 00:00:59,070
and reuse what we need what we can from

26
00:00:59,070 --> 00:01:01,289
the ecosystem we can also go ahead and

27
00:01:01,289 --> 00:01:02,789
contribute back some of us even

28
00:01:02,789 --> 00:01:04,260
contribute and create and maintain

29
00:01:04,260 --> 00:01:06,689
project which is amazing and they

30
00:01:06,689 --> 00:01:07,920
probably don't need to convince you that

31
00:01:07,920 --> 00:01:09,960
you probably already know that and true

32
00:01:09,960 --> 00:01:12,270
as a testament of that we have seen a

33
00:01:12,270 --> 00:01:14,640
lot of growth in all the NPM all the

34
00:01:14,640 --> 00:01:16,830
packaged ecosystems of different

35
00:01:16,830 --> 00:01:21,180
languages even Java as it seems I don't

36
00:01:21,180 --> 00:01:22,799
know if virtual T or not but generally

37
00:01:22,799 --> 00:01:25,350
we've seen this growth going up through

38
00:01:25,350 --> 00:01:27,720
all of them actually in just 2018

39
00:01:27,720 --> 00:01:30,810
yes last year NPM has added 250 K

40
00:01:30,810 --> 00:01:33,210
packages to the repository earlier this

41
00:01:33,210 --> 00:01:35,579
year in June we already crossed 1

42
00:01:35,579 --> 00:01:38,610
million packages on NPM which I probably

43
00:01:38,610 --> 00:01:40,710
don't need to tell you that because all

44
00:01:40,710 --> 00:01:42,600
of you are pulling half the universe

45
00:01:42,600 --> 00:01:46,640
when you're done doing an NPM install so

46
00:01:46,640 --> 00:01:49,439
really the question is how much do we

47
00:01:49,439 --> 00:01:51,540
know about the NPM dependencies that

48
00:01:51,540 --> 00:01:53,520
we're pulling into the project try to do

49
00:01:53,520 --> 00:01:55,649
a mental exercise just now yourselves

50
00:01:55,649 --> 00:01:57,570
try to imagine your package is on your

51
00:01:57,570 --> 00:01:59,850
package manifest how many packages do

52
00:01:59,850 --> 00:02:01,439
you know do you recognize those direct

53
00:02:01,439 --> 00:02:04,409
dependencies and how many transitive

54
00:02:04,409 --> 00:02:06,899
dependencies do you also pull in so

55
00:02:06,899 --> 00:02:08,250
there's a lot of dependencies a lot of

56
00:02:08,250 --> 00:02:10,500
unknown that we are using in our

57
00:02:10,500 --> 00:02:12,690
projects and you know possibly involving

58
00:02:12,690 --> 00:02:14,580
some risks

59
00:02:14,580 --> 00:02:17,350
an interesting article or a research

60
00:02:17,350 --> 00:02:18,640
paper that was actually published

61
00:02:18,640 --> 00:02:20,380
earlier this year that I had a chance to

62
00:02:20,380 --> 00:02:22,810
read and write about is something that

63
00:02:22,810 --> 00:02:24,220
actually compared a Python hacker system

64
00:02:24,220 --> 00:02:27,190
with the NPM ecosystem and it found that

65
00:02:27,190 --> 00:02:30,790
61% of all NPM packages could be

66
00:02:30,790 --> 00:02:33,010
considered abandoned now abandoned is a

67
00:02:33,010 --> 00:02:35,020
very open to interpretation you know

68
00:02:35,020 --> 00:02:36,640
different people have different opinions

69
00:02:36,640 --> 00:02:39,070
on it for the sake of the research what

70
00:02:39,070 --> 00:02:41,320
they did is considered any package that

71
00:02:41,320 --> 00:02:42,910
didn't have a release in the last 12

72
00:02:42,910 --> 00:02:45,700
months is abandoned which is arguable

73
00:02:45,700 --> 00:02:46,930
because you could just say that you know

74
00:02:46,930 --> 00:02:49,300
the package is well known it's mature

75
00:02:49,300 --> 00:02:53,350
it's reached its and state and go except

76
00:02:53,350 --> 00:02:55,540
in 2018 some of us may remember the

77
00:02:55,540 --> 00:02:58,120
event stream incident probably the most

78
00:02:58,120 --> 00:02:59,890
sophisticated attack that we've seen on

79
00:02:59,890 --> 00:03:02,770
NPM happening happened to a package

80
00:03:02,770 --> 00:03:04,750
called event stream which has been there

81
00:03:04,750 --> 00:03:07,030
for almost a decade like eight years did

82
00:03:07,030 --> 00:03:08,530
not have any release for the last two or

83
00:03:08,530 --> 00:03:10,380
three years depending how you count it

84
00:03:10,380 --> 00:03:12,910
but someone was actually able to

85
00:03:12,910 --> 00:03:15,040
socially engineer their way into getting

86
00:03:15,040 --> 00:03:18,010
into gaining NPM publish permissions to

87
00:03:18,010 --> 00:03:20,110
publish a module injected a malicious

88
00:03:20,110 --> 00:03:22,330
package in the dependency tree of event

89
00:03:22,330 --> 00:03:24,940
stream itself and in this way we're able

90
00:03:24,940 --> 00:03:27,190
to steal money from cryptocurrency

91
00:03:27,190 --> 00:03:29,860
wallets this actually happened there's a

92
00:03:29,860 --> 00:03:31,180
whole post more than one chain events if

93
00:03:31,180 --> 00:03:33,370
you're interested in following that as

94
00:03:33,370 --> 00:03:35,500
well but also what that research paper

95
00:03:35,500 --> 00:03:38,560
actually you know highlighted is an

96
00:03:38,560 --> 00:03:41,050
important note about that the dependency

97
00:03:41,050 --> 00:03:42,790
tree that we are always pulling in so it

98
00:03:42,790 --> 00:03:45,160
actually found that on average we'll be

99
00:03:45,160 --> 00:03:48,160
pulling in four and PM packages nested

100
00:03:48,160 --> 00:03:49,930
deep in every time we'll go ahead and

101
00:03:49,930 --> 00:03:52,720
install and be an NPM package so this

102
00:03:52,720 --> 00:03:54,310
actually is you know very interesting in

103
00:03:54,310 --> 00:03:56,080
terms of how many packages are we

104
00:03:56,080 --> 00:03:57,280
pulling in and what do we know about

105
00:03:57,280 --> 00:03:59,049
those packages and all of those nested

106
00:03:59,049 --> 00:04:00,489
dependencies in the tree watch go to

107
00:04:00,489 --> 00:04:03,430
vulnerabilities they may have so as an

108
00:04:03,430 --> 00:04:04,930
example and security vulnerabilities

109
00:04:04,930 --> 00:04:06,850
happen all the time we just usually less

110
00:04:06,850 --> 00:04:08,380
hear about them as we're less conscious

111
00:04:08,380 --> 00:04:10,180
on this but where do we go with yawn

112
00:04:10,180 --> 00:04:14,530
yawn is popular NPM package manager it

113
00:04:14,530 --> 00:04:16,450
was it was found to be vulnerable to a

114
00:04:16,450 --> 00:04:18,280
man-in-the-middle attack so for example

115
00:04:18,280 --> 00:04:19,840
if you were here on the workshop or in a

116
00:04:19,840 --> 00:04:21,789
coffee shop you are using a you were

117
00:04:21,789 --> 00:04:23,590
doing a yarn install someone could

118
00:04:23,590 --> 00:04:25,360
actually eavesdrop the connection and

119
00:04:25,360 --> 00:04:27,430
get the NPM tokens that you were

120
00:04:27,430 --> 00:04:29,740
sending off to to npm itself because

121
00:04:29,740 --> 00:04:32,229
that was sent off on an insecure medium

122
00:04:32,229 --> 00:04:34,930
so not on an HTTP so that's that's one

123
00:04:34,930 --> 00:04:37,240
and I could probably do a safe a safe

124
00:04:37,240 --> 00:04:39,010
estimation and guess that no one is

125
00:04:39,010 --> 00:04:40,990
using this latest version of yarn that

126
00:04:40,990 --> 00:04:42,810
was just released a few months ago

127
00:04:42,810 --> 00:04:45,160
another example is markdown marked down

128
00:04:45,160 --> 00:04:47,650
for j6 this package is actually pretty

129
00:04:47,650 --> 00:04:49,750
popular it's used for a storybook UI in

130
00:04:49,750 --> 00:04:52,270
several gatsby teams obviously in

131
00:04:52,270 --> 00:04:55,210
several UJ s and n react.js components

132
00:04:55,210 --> 00:04:57,160
as well and it is also vulnerable to

133
00:04:57,160 --> 00:04:58,960
some XSS vulnerabilities which were

134
00:04:58,960 --> 00:05:02,350
again only recently fixed sequel is

135
00:05:02,350 --> 00:05:04,090
another even more the most up-to-date

136
00:05:04,090 --> 00:05:07,630
example of an SQL injection SQL

137
00:05:07,630 --> 00:05:09,460
abstraction library that is usually

138
00:05:09,460 --> 00:05:12,550
popularly used on OJ's project actually

139
00:05:12,550 --> 00:05:14,289
was found to be vulnerable to several

140
00:05:14,289 --> 00:05:16,690
SQL injections and was just fixed last

141
00:05:16,690 --> 00:05:18,760
month so if you know that one of your

142
00:05:18,760 --> 00:05:20,050
teams is using that you should probably

143
00:05:20,050 --> 00:05:21,430
scan and make sure that you're fixing it

144
00:05:21,430 --> 00:05:25,270
and upgrading very quickly now this

145
00:05:25,270 --> 00:05:26,979
means that a lot of open open source is

146
00:05:26,979 --> 00:05:28,419
amazing and it's written by humans but

147
00:05:28,419 --> 00:05:30,310
you know as we come to think about all

148
00:05:30,310 --> 00:05:33,130
of this risk we come to also understand

149
00:05:33,130 --> 00:05:35,020
and realize that we do not know who

150
00:05:35,020 --> 00:05:36,220
wrote them and you know what is their

151
00:05:36,220 --> 00:05:38,080
proficiency what is going on with those

152
00:05:38,080 --> 00:05:40,060
packages for example we actually

153
00:05:40,060 --> 00:05:41,349
conducted a state of open source

154
00:05:41,349 --> 00:05:43,599
security in February 2019

155
00:05:43,599 --> 00:05:45,250
we found a lot of interesting fact for

156
00:05:45,250 --> 00:05:46,960
example this one where maintainer x'

157
00:05:46,960 --> 00:05:49,419
would feel less confident in fixing

158
00:05:49,419 --> 00:05:51,130
security issues once they are disclosed

159
00:05:51,130 --> 00:05:53,229
because they do not think that they have

160
00:05:53,229 --> 00:05:54,639
a strong enough security knowledge to

161
00:05:54,639 --> 00:05:56,440
actually fix that and do something about

162
00:05:56,440 --> 00:05:58,740
it similar to that for example

163
00:05:58,740 --> 00:06:02,020
maintainer is usually or a 26% of the

164
00:06:02,020 --> 00:06:03,880
time will not add a to their packages

165
00:06:03,880 --> 00:06:06,070
they will not have any such kind of

166
00:06:06,070 --> 00:06:07,900
security testing that static application

167
00:06:07,900 --> 00:06:09,430
dynamic application security testing not

168
00:06:09,430 --> 00:06:12,070
even a security code review so imagine

169
00:06:12,070 --> 00:06:13,870
your projects although dependencies

170
00:06:13,870 --> 00:06:16,120
count one out of four that did not go

171
00:06:16,120 --> 00:06:18,099
any kind of security test now that

172
00:06:18,099 --> 00:06:19,930
pretty is pretty easy to do an hour on a

173
00:06:19,930 --> 00:06:21,280
direct dependency but just think about

174
00:06:21,280 --> 00:06:22,690
how all of those are indirect

175
00:06:22,690 --> 00:06:23,949
dependencies that you're pulling in as

176
00:06:23,949 --> 00:06:27,669
well so as we come to talk about you

177
00:06:27,669 --> 00:06:29,500
know the code that we have and how much

178
00:06:29,500 --> 00:06:31,090
we rely on open source it's a it's a

179
00:06:31,090 --> 00:06:33,400
simple app I built based on vgs and a UI

180
00:06:33,400 --> 00:06:34,750
framework called Bouma so it doesn't

181
00:06:34,750 --> 00:06:36,550
have a lot of dependencies but you can

182
00:06:36,550 --> 00:06:38,020
already see that what a code is

183
00:06:38,020 --> 00:06:39,490
generated from my app and from the

184
00:06:39,490 --> 00:06:40,810
bundle of all the vendors

185
00:06:40,810 --> 00:06:42,370
that you know I'm actually dependent

186
00:06:42,370 --> 00:06:45,150
upon you know it's only represents 0.2%

187
00:06:45,150 --> 00:06:47,680
my code through the whole app and I

188
00:06:47,680 --> 00:06:49,270
think this is the most thing that you

189
00:06:49,270 --> 00:06:51,340
know struck lightning in terms of being

190
00:06:51,340 --> 00:06:53,710
able to understand and realize how much

191
00:06:53,710 --> 00:06:55,419
we're using open-source because this is

192
00:06:55,419 --> 00:06:57,040
a common misconception for me as a

193
00:06:57,040 --> 00:06:59,139
developer were I'm building code pushing

194
00:06:59,139 --> 00:07:01,480
it to production and you know this is my

195
00:07:01,480 --> 00:07:04,600
app except my app is actually you know

196
00:07:04,600 --> 00:07:07,120
it is that but my code what I write you

197
00:07:07,120 --> 00:07:08,680
know my own responsibility is actually a

198
00:07:08,680 --> 00:07:11,290
very small piece or that whole thing and

199
00:07:11,290 --> 00:07:12,490
when I'm pushing this whole thing I'm

200
00:07:12,490 --> 00:07:14,050
pushing a lot of code into production a

201
00:07:14,050 --> 00:07:15,790
lot of risk that you know other people

202
00:07:15,790 --> 00:07:18,760
would usually catch such as DevOps and

203
00:07:18,760 --> 00:07:19,930
security engineers and figure out that

204
00:07:19,930 --> 00:07:21,040
there's a lot of risk that I'm actually

205
00:07:21,040 --> 00:07:24,850
pushing in so at this point I guess some

206
00:07:24,850 --> 00:07:26,290
of us are wondering you know we're

207
00:07:26,290 --> 00:07:27,520
talking about security vulnerabilities

208
00:07:27,520 --> 00:07:29,530
in open-source libraries and how much

209
00:07:29,530 --> 00:07:32,530
are we dependent upon so how do we jump

210
00:07:32,530 --> 00:07:33,970
from a security vulnerability in a

211
00:07:33,970 --> 00:07:36,580
package in a dependency that we're using

212
00:07:36,580 --> 00:07:38,050
to a security vulnerability in our

213
00:07:38,050 --> 00:07:39,940
application it actually puts it into

214
00:07:39,940 --> 00:07:47,260
risk so let's go ahead and go to the

215
00:07:47,260 --> 00:07:48,820
hands-on part of this of this

216
00:07:48,820 --> 00:07:55,030
presentation so over here I have a

217
00:07:55,030 --> 00:07:57,729
simple goof to do application you can do

218
00:07:57,729 --> 00:08:02,800
things like I'm pretty nervous here and

219
00:08:02,800 --> 00:08:04,419
it's basically a to-do app that I can

220
00:08:04,419 --> 00:08:06,280
just add some stuff into it as the

221
00:08:06,280 --> 00:08:08,260
security conscious developer you might

222
00:08:08,260 --> 00:08:10,330
start already to think about how you

223
00:08:10,330 --> 00:08:11,889
could go ahead and you know attack this

224
00:08:11,889 --> 00:08:13,960
one so it has an SQL injection input

225
00:08:13,960 --> 00:08:15,910
maybe I can do something around it maybe

226
00:08:15,910 --> 00:08:18,820
I can do an exercise several things

227
00:08:18,820 --> 00:08:20,800
right so maybe I would go ahead and add

228
00:08:20,800 --> 00:08:23,650
something like that maybe it works maybe

229
00:08:23,650 --> 00:08:25,780
it doesn't work I don't think that we

230
00:08:25,780 --> 00:08:27,729
should know about this is I've built

231
00:08:27,729 --> 00:08:30,669
this using marked so marked I'll go

232
00:08:30,669 --> 00:08:33,000
ahead and increase that so you can see

233
00:08:33,000 --> 00:08:36,450
mark is a fairly popular as well package

234
00:08:36,450 --> 00:08:39,610
for doing work down one example of

235
00:08:39,610 --> 00:08:41,320
understanding security and being aware

236
00:08:41,320 --> 00:08:43,659
of this is this is a bad example of it

237
00:08:43,659 --> 00:08:45,880
in terms of you need to opt in to

238
00:08:45,880 --> 00:08:48,610
security right to sanitize the data

239
00:08:48,610 --> 00:08:50,980
that's coming in when you use it so it's

240
00:08:50,980 --> 00:08:52,209
not turned on by default you actually

241
00:08:52,209 --> 00:08:54,130
need to know to do that so as a

242
00:08:54,130 --> 00:08:55,120
developer if you

243
00:08:55,120 --> 00:08:56,230
if you're reading this you have to like

244
00:08:56,230 --> 00:08:57,910
understand the API is read I need

245
00:08:57,910 --> 00:08:59,230
security disclosure and then then turn

246
00:08:59,230 --> 00:09:02,500
it on so we have marked her and I have

247
00:09:02,500 --> 00:09:03,760
marked down support so I can go ahead

248
00:09:03,760 --> 00:09:06,100
and do stuff and actually scan this up

249
00:09:06,100 --> 00:09:08,710
with weed snake and I can see that you

250
00:09:08,710 --> 00:09:10,750
know I have I am vulnerable to

251
00:09:10,750 --> 00:09:12,820
cross-site scripting right and I'm part

252
00:09:12,820 --> 00:09:15,880
of like 448 libraries that I have read

253
00:09:15,880 --> 00:09:17,790
so again like how what could I do next

254
00:09:17,790 --> 00:09:21,400
to go ahead and cause maybe an XSS as of

255
00:09:21,400 --> 00:09:23,529
sin how about if we try a different

256
00:09:23,529 --> 00:09:25,300
vector we know that there is markdown so

257
00:09:25,300 --> 00:09:30,880
I can do like this and get something

258
00:09:30,880 --> 00:09:32,620
bold but then I also have this vector of

259
00:09:32,620 --> 00:09:34,810
attack where I can add things so imagine

260
00:09:34,810 --> 00:09:36,460
someone adding a JavaScript link into

261
00:09:36,460 --> 00:09:43,519
this so maybe something like this

262
00:09:43,529 --> 00:09:45,910
right and then we have links so now I

263
00:09:45,910 --> 00:09:48,310
can go ahead and take this one step

264
00:09:48,310 --> 00:09:54,580
further and perhaps I want to change

265
00:09:54,580 --> 00:09:56,520
this with something else

266
00:09:56,520 --> 00:10:00,310
this is a good way to start except it

267
00:10:00,310 --> 00:10:02,800
doesn't work because markdown is

268
00:10:02,800 --> 00:10:04,480
actually sanitizing it as we actually

269
00:10:04,480 --> 00:10:06,760
provided it so it's doing something with

270
00:10:06,760 --> 00:10:08,320
the data just you know we're not yet

271
00:10:08,320 --> 00:10:12,910
there one thing that is common is to go

272
00:10:12,910 --> 00:10:15,040
ahead and represent data in a different

273
00:10:15,040 --> 00:10:17,920
way so we can go ahead and say : on a on

274
00:10:17,920 --> 00:10:19,480
a web page could represent that by the

275
00:10:19,480 --> 00:10:21,400
HTML entity for that so we could go

276
00:10:21,400 --> 00:10:29,250
ahead and do something like this

277
00:10:29,250 --> 00:10:33,400
represent this as well and do it and the

278
00:10:33,400 --> 00:10:34,690
way that I know this I do not need to

279
00:10:34,690 --> 00:10:36,130
reverse engineer something that is you

280
00:10:36,130 --> 00:10:37,540
know very difficult because markdown is

281
00:10:37,540 --> 00:10:38,770
open source I can just go to the

282
00:10:38,770 --> 00:10:41,200
repository figure out what sanitize true

283
00:10:41,200 --> 00:10:43,180
does and just reverse engineer that so

284
00:10:43,180 --> 00:10:45,459
it's pretty easy to figure this out so I

285
00:10:45,459 --> 00:10:46,750
can do this I can already see that

286
00:10:46,750 --> 00:10:49,060
something different is happening so

287
00:10:49,060 --> 00:10:50,410
perhaps I'm on the right path

288
00:10:50,410 --> 00:10:53,410
and at this point again I can go into

289
00:10:53,410 --> 00:10:55,150
markdown source code and figure out why

290
00:10:55,150 --> 00:10:56,740
did these get sanitized in a different

291
00:10:56,740 --> 00:10:57,130
way

292
00:10:57,130 --> 00:11:02,440
the true it is the sanitization process

293
00:11:02,440 --> 00:11:04,089
in marked work this way that it actually

294
00:11:04,089 --> 00:11:06,790
rejects as disco part of the string so

295
00:11:06,790 --> 00:11:08,889
it actually looks for this kind of code

296
00:11:08,889 --> 00:11:11,170
strips this out so while I'm trying to

297
00:11:11,170 --> 00:11:14,049
be outsmarting it it is actually someone

298
00:11:14,049 --> 00:11:16,299
as a developer that wrote it was able to

299
00:11:16,299 --> 00:11:18,509
actually think about this vector as well

300
00:11:18,509 --> 00:11:21,480
what they hadn't took into account is

301
00:11:21,480 --> 00:11:24,249
something that that happens in the

302
00:11:24,249 --> 00:11:26,529
browser and that is router are usually

303
00:11:26,529 --> 00:11:28,809
very nice in terms of they help us to if

304
00:11:28,809 --> 00:11:31,029
we write like bad code but you know

305
00:11:31,029 --> 00:11:32,589
broken divs or brought off forgotten

306
00:11:32,589 --> 00:11:33,730
deals or stuff like that they would go

307
00:11:33,730 --> 00:11:36,309
ahead and complete that so if I would

308
00:11:36,309 --> 00:11:38,799
just write something like this like

309
00:11:38,799 --> 00:11:40,509
literally this I know it's hard in

310
00:11:40,509 --> 00:11:43,209
JavaScript bear with me but if I her if

311
00:11:43,209 --> 00:11:45,999
I put a valid JavaScript statement like

312
00:11:45,999 --> 00:11:48,399
this as a keyword it will go ahead and

313
00:11:48,399 --> 00:11:50,169
pass the sanitization process by marked

314
00:11:50,169 --> 00:11:53,819
because marked does not look for this it

315
00:11:53,819 --> 00:11:56,470
looks for a specific string as someone

316
00:11:56,470 --> 00:11:58,480
trying to hack this out so when I do

317
00:11:58,480 --> 00:12:01,899
this I get this link actually working

318
00:12:01,899 --> 00:12:04,449
and what the browser does is it says

319
00:12:04,449 --> 00:12:08,319
well I think you meant to end that a 58

320
00:12:08,319 --> 00:12:10,839
character with a with a semicolon so let

321
00:12:10,839 --> 00:12:12,699
me do that for you it adds it and

322
00:12:12,699 --> 00:12:14,220
because this is a valid JavaScript

323
00:12:14,220 --> 00:12:17,379
statement the whole thing gets validated

324
00:12:17,379 --> 00:12:19,149
as far as well and we have an XSS in our

325
00:12:19,149 --> 00:12:24,129
application so one example of dust of

326
00:12:24,129 --> 00:12:26,439
that is this we can go ahead and figure

327
00:12:26,439 --> 00:12:30,949
out some other examples for example I

328
00:12:30,959 --> 00:12:34,329
have this about page which is based on

329
00:12:34,329 --> 00:12:35,860
so this is I'm not doing anything

330
00:12:35,860 --> 00:12:37,569
dynamically I'm actually using a

331
00:12:37,569 --> 00:12:40,329
template engine for nodejs called dust

332
00:12:40,329 --> 00:12:42,459
J's developed by LinkedIn for a

333
00:12:42,459 --> 00:12:43,929
framework called cracker and it's

334
00:12:43,929 --> 00:12:45,549
actually pretty secure project etc but

335
00:12:45,549 --> 00:12:48,610
bit of an oldie reference here anyway

336
00:12:48,610 --> 00:12:50,619
what I have is an about page on this app

337
00:12:50,619 --> 00:12:54,399
and you can see how I'm like really

338
00:12:54,399 --> 00:12:56,169
great at CSS because I have this skill

339
00:12:56,169 --> 00:13:03,309
to make it big make it alright so let's

340
00:13:03,309 --> 00:13:06,519
go back to this so it is a mobile first

341
00:13:06,519 --> 00:13:07,600
application you can see it actually

342
00:13:07,600 --> 00:13:11,230
responds reactivate to what I do and at

343
00:13:11,230 --> 00:13:12,789
this point again I'm trying to figure

344
00:13:12,789 --> 00:13:14,379
out what can I do with us as a

345
00:13:14,379 --> 00:13:18,419
templating engine on this application so

346
00:13:18,419 --> 00:13:21,730
give you a bit more context into what's

347
00:13:21,730 --> 00:13:22,720
going on

348
00:13:22,720 --> 00:13:28,420
no this is a template for it right about

349
00:13:28,420 --> 00:13:30,610
you it has the test extension I have

350
00:13:30,610 --> 00:13:32,110
this condition where if something is a

351
00:13:32,110 --> 00:13:34,540
device equals the desktop or mobile it's

352
00:13:34,540 --> 00:13:37,030
gonna run through one of those branching

353
00:13:37,030 --> 00:13:39,760
statements in my conditions and draw it

354
00:13:39,760 --> 00:13:42,370
draw the draw the HTML for this so

355
00:13:42,370 --> 00:13:43,720
pretty straightforward but the question

356
00:13:43,720 --> 00:13:46,540
is what we can do with this if we were

357
00:13:46,540 --> 00:13:49,990
to figure out what is what is that's

358
00:13:49,990 --> 00:13:51,580
viable for you know if you would scan

359
00:13:51,580 --> 00:13:52,930
your app you could scan it with whatever

360
00:13:52,930 --> 00:13:55,150
you want sneak or NPM audit or OS

361
00:13:55,150 --> 00:13:56,350
dependency check doesn't really matter

362
00:13:56,350 --> 00:13:57,850
but you would find something like this

363
00:13:57,850 --> 00:13:59,320
like dust is vulnerable to a code

364
00:13:59,320 --> 00:14:01,270
injection what does it mean a code

365
00:14:01,270 --> 00:14:02,500
injection how does that really happen

366
00:14:02,500 --> 00:14:04,930
how does that impact from a library to

367
00:14:04,930 --> 00:14:11,000
my own application so the thing is

368
00:14:11,010 --> 00:14:13,210
there's a user input here so we can go

369
00:14:13,210 --> 00:14:15,160
ahead and start and doing something with

370
00:14:15,160 --> 00:14:17,320
it and for example I can go ahead and

371
00:14:17,320 --> 00:14:20,830
put maybe a quote because maybe I'm

372
00:14:20,830 --> 00:14:22,510
trying to escape this whole quote

373
00:14:22,510 --> 00:14:23,980
condition and do something with this

374
00:14:23,980 --> 00:14:26,830
part of the code maybe I would do

375
00:14:26,830 --> 00:14:28,750
something like this except that seems to

376
00:14:28,750 --> 00:14:30,460
be okay dust it's probably behind the

377
00:14:30,460 --> 00:14:32,290
scenes and coding it doing it properly

378
00:14:32,290 --> 00:14:40,990
etc and we can actually see that dust

379
00:14:40,990 --> 00:14:44,650
has this escape HTML part of the code so

380
00:14:44,650 --> 00:14:47,440
it's actually taking a string trying to

381
00:14:47,440 --> 00:14:48,910
see if there's anything malicious that

382
00:14:48,910 --> 00:14:50,290
should be encoded you know something

383
00:14:50,290 --> 00:14:51,460
dangerous that should go trying to

384
00:14:51,460 --> 00:14:53,140
encoding and then it's going to go and

385
00:14:53,140 --> 00:14:54,580
encode it so it's gonna replace it with

386
00:14:54,580 --> 00:14:56,710
the HTML entity for it and this way try

387
00:14:56,710 --> 00:14:59,440
and you know not use the original quote

388
00:14:59,440 --> 00:15:01,060
or whatever fragment or I was trying to

389
00:15:01,060 --> 00:15:04,750
do to circumvent the app this is great

390
00:15:04,750 --> 00:15:08,080
except it is actually only going into

391
00:15:08,080 --> 00:15:09,970
this safe condition when I'm giving it a

392
00:15:09,970 --> 00:15:12,790
string at this point is it too

393
00:15:12,790 --> 00:15:14,620
interesting to figure out how do i hack

394
00:15:14,620 --> 00:15:17,200
through that and do not give it a string

395
00:15:17,200 --> 00:15:18,880
because I need to put something else but

396
00:15:18,880 --> 00:15:20,740
to bypass this part which is not a

397
00:15:20,740 --> 00:15:24,460
string so one example one way to do that

398
00:15:24,460 --> 00:15:29,380
is to think about array parameters for

399
00:15:29,380 --> 00:15:30,970
the way that you could go ahead and do

400
00:15:30,970 --> 00:15:33,460
our request poisoning like this with an

401
00:15:33,460 --> 00:15:35,110
HTTP parameter pollution and you would

402
00:15:35,110 --> 00:15:35,420
say

403
00:15:35,420 --> 00:15:38,120
Desktop is now actually an array this is

404
00:15:38,120 --> 00:15:39,770
very common where you have like end user

405
00:15:39,770 --> 00:15:42,020
ID equals something and use ready equals

406
00:15:42,020 --> 00:15:43,100
something and you want to pass an array

407
00:15:43,100 --> 00:15:45,530
to a request parameter or you can also

408
00:15:45,530 --> 00:15:48,130
use the bracket notation to go ahead and

409
00:15:48,130 --> 00:15:51,020
convey the same the same in terms as you

410
00:15:51,020 --> 00:15:53,090
can see when I'm doing that this

411
00:15:53,090 --> 00:15:56,210
continues to work just fine because when

412
00:15:56,210 --> 00:16:04,220
the evaluation happens over here over

413
00:16:04,220 --> 00:16:06,590
here I'm just go ahead going ahead and

414
00:16:06,590 --> 00:16:08,180
doing a two string for an array that's

415
00:16:08,180 --> 00:16:11,630
gonna give me the first item under so it

416
00:16:11,630 --> 00:16:12,980
seems that the app is actually working

417
00:16:12,980 --> 00:16:16,610
well but what's interesting is if I go

418
00:16:16,610 --> 00:16:18,650
ahead and try to put a quote or

419
00:16:18,650 --> 00:16:22,100
something fails and we can already see

420
00:16:22,100 --> 00:16:24,290
what's going on so to understand a

421
00:16:24,290 --> 00:16:26,120
little bit better what what is actually

422
00:16:26,120 --> 00:16:27,530
going on behind the hood with the

423
00:16:27,530 --> 00:16:30,760
security issue is this if condition is

424
00:16:30,760 --> 00:16:33,860
actually something that gets evaluated

425
00:16:33,860 --> 00:16:35,390
through runtime because this is

426
00:16:35,390 --> 00:16:37,520
generally how the template engines work

427
00:16:37,520 --> 00:16:40,940
and dust has this helper were for if

428
00:16:40,940 --> 00:16:42,950
it's going to go take that condition and

429
00:16:42,950 --> 00:16:47,330
evaluates it so knowing this I can go

430
00:16:47,330 --> 00:16:48,470
ahead and figure out well if that

431
00:16:48,470 --> 00:16:50,180
condition works maybe I can provide a

432
00:16:50,180 --> 00:16:54,680
specific string to do something let's

433
00:16:54,680 --> 00:17:01,040
try to run a commander so we're at a

434
00:17:01,040 --> 00:17:09,200
request

435
00:17:09,210 --> 00:17:10,990
probably a life so we can do this

436
00:17:10,990 --> 00:17:13,870
together and I'm gonna go and see that

437
00:17:13,870 --> 00:17:16,480
everything is okay I will add a quote

438
00:17:16,480 --> 00:17:20,200
see that everything is okay again I'm

439
00:17:20,200 --> 00:17:23,740
gonna go and add this to do the whole

440
00:17:23,740 --> 00:17:25,210
thing and reproduce the whole bag and

441
00:17:25,210 --> 00:17:26,470
you know now I have a working example I

442
00:17:26,470 --> 00:17:29,740
can actually work with and this is where

443
00:17:29,740 --> 00:17:31,630
the fun begins right because we know

444
00:17:31,630 --> 00:17:34,030
it's an evaluation statement so it is a

445
00:17:34,030 --> 00:17:36,660
simple for me as doing something like

446
00:17:36,660 --> 00:17:43,970
sorry note and then evaluating desktop

447
00:17:43,980 --> 00:17:47,500
equals desktop for example it's gonna be

448
00:17:47,500 --> 00:17:49,480
true but now that I know that I have a

449
00:17:49,480 --> 00:17:51,070
way to inject data there that is not

450
00:17:51,070 --> 00:17:53,860
being treated in any others a safe way I

451
00:17:53,860 --> 00:17:58,070
can go ahead and do something like this

452
00:17:58,080 --> 00:18:00,520
which is trying to evaluate an

453
00:18:00,520 --> 00:18:02,620
expression for a place that expects a

454
00:18:02,620 --> 00:18:05,050
value so as I do this I don't really

455
00:18:05,050 --> 00:18:06,640
care about whether that's false or true

456
00:18:06,640 --> 00:18:07,960
I care about the fact that I was

457
00:18:07,960 --> 00:18:09,570
actually able to invoke a function

458
00:18:09,570 --> 00:18:15,700
through this evil statement so going

459
00:18:15,700 --> 00:18:20,710
back to a request I can do something

460
00:18:20,710 --> 00:18:24,610
similar and I will make this a bit

461
00:18:24,610 --> 00:18:26,440
bigger so you could see I was able to go

462
00:18:26,440 --> 00:18:28,540
ahead and put on the server side a

463
00:18:28,540 --> 00:18:30,430
function expression write a function

464
00:18:30,430 --> 00:18:32,530
invocation that actually did a console

465
00:18:32,530 --> 00:18:35,020
log so remove the code injection now

466
00:18:35,020 --> 00:18:36,490
this is just for the example right just

467
00:18:36,490 --> 00:18:38,500
for us to be very fast in this example

468
00:18:38,500 --> 00:18:40,300
in the demo but imagine what I could do

469
00:18:40,300 --> 00:18:42,550
here just require process child process

470
00:18:42,550 --> 00:18:44,560
invoke something that I want to get from

471
00:18:44,560 --> 00:18:46,390
your application or anything else all of

472
00:18:46,390 --> 00:18:49,120
this is done through dust if this page

473
00:18:49,120 --> 00:18:50,800
was not even authorized you know

474
00:18:50,800 --> 00:18:52,420
anonymous it means everyone are able to

475
00:18:52,420 --> 00:18:54,190
do this so it's kind of a remote code

476
00:18:54,190 --> 00:19:02,710
injection so we're talking about all

477
00:19:02,710 --> 00:19:04,120
these examples with open source

478
00:19:04,120 --> 00:19:06,790
libraries and and how much you know how

479
00:19:06,790 --> 00:19:08,050
much they affect us and what's the risk

480
00:19:08,050 --> 00:19:09,880
that we have in them and the thing is

481
00:19:09,880 --> 00:19:11,680
for attackers that's a really easy way

482
00:19:11,680 --> 00:19:13,450
to do it because it's easy to think

483
00:19:13,450 --> 00:19:15,160
about attackers and you know hackers as

484
00:19:15,160 --> 00:19:16,660
those with hoodies

485
00:19:16,660 --> 00:19:18,190
you know worrying that trying to hide

486
00:19:18,190 --> 00:19:19,360
the Pentagon or something else but

487
00:19:19,360 --> 00:19:21,100
mostly like the easy for the low-hanging

488
00:19:21,100 --> 00:19:22,720
fruits the easy stuff that they can do

489
00:19:22,720 --> 00:19:24,250
is just figure out all of those

490
00:19:24,250 --> 00:19:25,870
non-public vulnerabilities that you know

491
00:19:25,870 --> 00:19:27,340
everyone know about it's publicly known

492
00:19:27,340 --> 00:19:29,470
but people are really late in terms of

493
00:19:29,470 --> 00:19:30,910
patching and keeping up to date with

494
00:19:30,910 --> 00:19:33,100
them so one vulnerability that they find

495
00:19:33,100 --> 00:19:35,740
in an ecosystem like NPM for example

496
00:19:35,740 --> 00:19:37,450
will mean many victims because everyone

497
00:19:37,450 --> 00:19:39,070
are using open-source you know millions

498
00:19:39,070 --> 00:19:40,600
of downloads for its press sample our

499
00:19:40,600 --> 00:19:42,340
react whatever vulnerability that they

500
00:19:42,340 --> 00:19:45,130
find and apps act is pretty hard right

501
00:19:45,130 --> 00:19:46,750
that's one example of it and there's so

502
00:19:46,750 --> 00:19:48,730
many things that need to happen in a

503
00:19:48,730 --> 00:19:50,940
secure application development lifecycle

504
00:19:50,940 --> 00:19:53,350
just one example but what's really

505
00:19:53,350 --> 00:19:55,540
challenging is software delivery has

506
00:19:55,540 --> 00:19:57,730
sped up it is really fast everyone

507
00:19:57,730 --> 00:19:59,110
trying to be really mature in terms of

508
00:19:59,110 --> 00:20:01,600
CI CD pushing value pushing data out

509
00:20:01,600 --> 00:20:05,020
pushing code out etc but do we forget do

510
00:20:05,020 --> 00:20:06,760
we do we actually do to actually embed

511
00:20:06,760 --> 00:20:08,140
security testing in part of our

512
00:20:08,140 --> 00:20:09,700
application in what would and what we

513
00:20:09,700 --> 00:20:11,470
develop and what we push out do we have

514
00:20:11,470 --> 00:20:12,880
this confidence that everything we push

515
00:20:12,880 --> 00:20:15,130
out is really tested very well and does

516
00:20:15,130 --> 00:20:16,270
not have any kind of security

517
00:20:16,270 --> 00:20:20,140
vulnerabilities like this we're also

518
00:20:20,140 --> 00:20:22,750
outnumbered in organizations right in

519
00:20:22,750 --> 00:20:24,490
organizations the ratio that like

520
00:20:24,490 --> 00:20:27,220
Gartner report was was saying is one

521
00:20:27,220 --> 00:20:28,750
security person for 100 developers

522
00:20:28,750 --> 00:20:32,170
that's actually a good example of it

523
00:20:32,170 --> 00:20:33,610
because in most organization it's

524
00:20:33,610 --> 00:20:36,490
actually pretty worse than that how

525
00:20:36,490 --> 00:20:38,230
about the fact that as developers we do

526
00:20:38,230 --> 00:20:41,470
not really get any knowledge or any

527
00:20:41,470 --> 00:20:43,780
experimental experience or expertise on

528
00:20:43,780 --> 00:20:46,000
security for example these are the top

529
00:20:46,000 --> 00:20:47,920
computer science programs in the United

530
00:20:47,920 --> 00:20:50,110
States of America I imagine that you're

531
00:20:50,110 --> 00:20:52,960
able to recognize some of them I

532
00:20:52,960 --> 00:20:56,140
filtered at least to show all those that

533
00:20:56,140 --> 00:20:57,790
actually have a requirement for a

534
00:20:57,790 --> 00:21:02,110
software security course yep

535
00:21:02,110 --> 00:21:04,810
so no wonder that you know as developers

536
00:21:04,810 --> 00:21:06,430
we sometimes feel that we do not have

537
00:21:06,430 --> 00:21:08,440
that that knowledge then that gap that

538
00:21:08,440 --> 00:21:10,360
exists for us to build applications that

539
00:21:10,360 --> 00:21:11,490
are secure

540
00:21:11,490 --> 00:21:14,410
how how equipped do we fill in terms of

541
00:21:14,410 --> 00:21:16,030
not just finding but actually fixing a

542
00:21:16,030 --> 00:21:18,070
vulnerability actually being able to

543
00:21:18,070 --> 00:21:19,480
remediate it but because at the end of

544
00:21:19,480 --> 00:21:21,580
the day it is our responsibility and

545
00:21:21,580 --> 00:21:23,590
it's great that it is like that open

546
00:21:23,590 --> 00:21:24,790
source is awesome we just need to do it

547
00:21:24,790 --> 00:21:28,390
in a very good way it is not so easy to

548
00:21:28,390 --> 00:21:30,550
fix of vulnerability and another thing

549
00:21:30,550 --> 00:21:31,840
that we learned from that state of open

550
00:21:31,840 --> 00:21:33,940
source security report is as we looked

551
00:21:33,940 --> 00:21:35,980
at the data that sneak has on all of its

552
00:21:35,980 --> 00:21:37,570
users we just can't package manifest

553
00:21:37,570 --> 00:21:38,830
file so we really care just about the

554
00:21:38,830 --> 00:21:40,810
dependency that you're using and what we

555
00:21:40,810 --> 00:21:43,720
try to pull it out is how does that work

556
00:21:43,720 --> 00:21:45,370
in terms of different ecosystems like

557
00:21:45,370 --> 00:21:46,390
where do we find security

558
00:21:46,390 --> 00:21:48,610
vulnerabilities so for NPM for example

559
00:21:48,610 --> 00:21:51,490
you can see that 78% of the time we will

560
00:21:51,490 --> 00:21:53,230
find security vulnerabilities in

561
00:21:53,230 --> 00:21:55,450
transitive dependencies so even if

562
00:21:55,450 --> 00:21:57,190
you're like a conscious developer and

563
00:21:57,190 --> 00:21:59,230
very responsible and you track all the

564
00:21:59,230 --> 00:22:01,540
change logs for no reactive you whatever

565
00:22:01,540 --> 00:22:03,790
it is and you go through each code

566
00:22:03,790 --> 00:22:06,160
change one by one most of the time we'll

567
00:22:06,160 --> 00:22:08,050
find the issues in the vulnerabilities

568
00:22:08,050 --> 00:22:10,720
that those dependencies pull in and the

569
00:22:10,720 --> 00:22:15,220
problems that exist err so what if

570
00:22:15,220 --> 00:22:16,690
security was a bit easier right what if

571
00:22:16,690 --> 00:22:18,580
it was something that is actionable that

572
00:22:18,580 --> 00:22:20,350
is really friendly for me to interact

573
00:22:20,350 --> 00:22:23,350
with that I as a developer it is aligned

574
00:22:23,350 --> 00:22:24,910
with the way that I work it's not a

575
00:22:24,910 --> 00:22:27,040
security system that I need to log into

576
00:22:27,040 --> 00:22:29,190
and find out about all of these things

577
00:22:29,190 --> 00:22:31,810
what if for example the same way that

578
00:22:31,810 --> 00:22:34,450
you have a Travis or a circle CIO code

579
00:22:34,450 --> 00:22:36,040
coverage running in your in your you

580
00:22:36,040 --> 00:22:38,620
know pull request you would have another

581
00:22:38,620 --> 00:22:39,940
test and you can you can replace

582
00:22:39,940 --> 00:22:41,140
sneakier with anything else that you

583
00:22:41,140 --> 00:22:42,970
want generally but what if you had if

584
00:22:42,970 --> 00:22:44,500
you add that right what if a new

585
00:22:44,500 --> 00:22:47,080
developer was now introducing a security

586
00:22:47,080 --> 00:22:48,730
Vaughn a package that has security

587
00:22:48,730 --> 00:22:50,530
vulnerabilities whether on it or it's

588
00:22:50,530 --> 00:22:52,150
transitive dependency you would go ahead

589
00:22:52,150 --> 00:22:53,380
and fill the build because you already

590
00:22:53,380 --> 00:22:54,880
detected it right there you do not need

591
00:22:54,880 --> 00:22:56,920
to find it as you go to production and

592
00:22:56,920 --> 00:23:00,040
find it you know a few months later what

593
00:23:00,040 --> 00:23:01,840
if that security tooling was really

594
00:23:01,840 --> 00:23:04,450
really good in terms of not just opening

595
00:23:04,450 --> 00:23:06,100
a pull request for you and fixing it

596
00:23:06,100 --> 00:23:07,840
which is a great step and doing that but

597
00:23:07,840 --> 00:23:09,550
also doing that in a smart way so in

598
00:23:09,550 --> 00:23:11,410
terms of if the dependency had a

599
00:23:11,410 --> 00:23:13,540
vulnerability and then a fix in a major

600
00:23:13,540 --> 00:23:15,340
version it will actually try and fold

601
00:23:15,340 --> 00:23:15,850
the

602
00:23:15,850 --> 00:23:17,680
the most minor and minimal version it

603
00:23:17,680 --> 00:23:20,290
can to resolve the security fix so to

604
00:23:20,290 --> 00:23:22,450
not you know get you through the hurdle

605
00:23:22,450 --> 00:23:25,480
of actually taking in a major change or

606
00:23:25,480 --> 00:23:26,980
breaking change or future changes that

607
00:23:26,980 --> 00:23:28,870
you may not want to pull in with that

608
00:23:28,870 --> 00:23:31,630
security fix so I'm going to leave you

609
00:23:31,630 --> 00:23:33,760
with that notion open-source is awesome

610
00:23:33,760 --> 00:23:35,770
just please join it responsibly thank

611
00:23:35,770 --> 00:23:43,000
you

612
00:23:43,010 --> 00:23:44,200


613
00:23:44,200 --> 00:23:44,210
you

