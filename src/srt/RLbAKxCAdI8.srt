1
00:00:08,210 --> 00:00:13,590

nobody casco and I just fronting web

2
00:00:13,590 --> 00:00:17,130
developer from Belgium and about a year

3
00:00:17,130 --> 00:00:19,580
ago by make this website called Jasper

4
00:00:19,580 --> 00:00:22,820
much shorter time I heard used it before

5
00:00:22,820 --> 00:00:30,090
Ken's death at home again who's Jasper

6
00:00:30,090 --> 00:00:31,830
to create valid performance test cases

7
00:00:31,830 --> 00:00:36,149
and focuses on other parts so just to

8
00:00:36,149 --> 00:00:39,719
write rehydrate Jesper black market

9
00:00:39,719 --> 00:00:43,430
which is my spaghetti code with PHP

10
00:00:43,430 --> 00:00:55,680
server okay everybody the day that just

11
00:00:55,680 --> 00:00:58,199
were first watched I also saw at the

12
00:00:58,199 --> 00:01:02,010
National GS projects for stocks you need

13
00:01:02,010 --> 00:01:04,189
a JavaScript benchmark a library and

14
00:01:04,189 --> 00:01:07,110
originally I just took out with night

15
00:01:07,110 --> 00:01:08,900
working on wearable but yes it was

16
00:01:08,900 --> 00:01:12,210
priority word I threw out everything

17
00:01:12,210 --> 00:01:14,490
else at identities and I add my own

18
00:01:14,490 --> 00:01:16,799
stuff to it and that's what I mean

19
00:01:16,799 --> 00:01:19,680
Matchbox yes so it was really just for

20
00:01:19,680 --> 00:01:21,780
specific and it was not much of a chair

21
00:01:21,780 --> 00:01:25,500
of the book was hashmark library the

22
00:01:25,500 --> 00:01:27,479
other open source is hoping that if you

23
00:01:27,479 --> 00:01:32,040
see a hand over time and luckily someone

24
00:01:32,040 --> 00:01:34,259
stepped up performance later which is

25
00:01:34,259 --> 00:01:37,259
calculated Elton and he made a much more

26
00:01:37,259 --> 00:01:40,290
awesome alum bug fixes he had more

27
00:01:40,290 --> 00:01:42,750
features and he made a generic lie

28
00:01:42,750 --> 00:01:44,490
buried at work across different

29
00:01:44,490 --> 00:01:49,450
environments and the best thing about

30
00:01:49,450 --> 00:01:52,270
that crazy process for you can get

31
00:01:52,270 --> 00:01:54,520
support from Brussels and also screw

32
00:01:54,520 --> 00:02:06,130
this guy so we have the vision we have

33
00:02:06,130 --> 00:02:07,899
benchmarked ES and then the final

34
00:02:07,899 --> 00:02:10,000
ingredients for jasper is a browser

35
00:02:10,000 --> 00:02:12,430
scope which is the project that we're

36
00:02:12,430 --> 00:02:14,200
using to store the results based on your

37
00:02:14,200 --> 00:02:16,269
browser so after you run a test we

38
00:02:16,269 --> 00:02:19,180
gather those results and we store them

39
00:02:19,180 --> 00:02:21,040
so I can show you a nice little table or

40
00:02:21,040 --> 00:02:22,720
a chart which contains all the

41
00:02:22,720 --> 00:02:24,880
information of the tests that have him

42
00:02:24,880 --> 00:02:27,220
run by other users and the browser scope

43
00:02:27,220 --> 00:02:29,769
guys actually had to Twitter API for us

44
00:02:29,769 --> 00:02:31,900
so that we would be able to

45
00:02:31,900 --> 00:02:34,450
automatically create new tests with them

46
00:02:34,450 --> 00:02:36,160
for every new test case that's created

47
00:02:36,160 --> 00:02:38,760
on GS perv so thank you browsers cope

48
00:02:38,760 --> 00:02:41,920
now here's some quick statistics they're

49
00:02:41,920 --> 00:02:43,780
not all that interesting but the main

50
00:02:43,780 --> 00:02:46,120
thing to remember here is that ever

51
00:02:46,120 --> 00:02:47,950
since jasper first launched there are

52
00:02:47,950 --> 00:02:50,980
about well almost 57 new test cases

53
00:02:50,980 --> 00:02:54,400
added every day and I mean I think

54
00:02:54,400 --> 00:02:56,650
that's a lot of test cases and that's

55
00:02:56,650 --> 00:02:58,660
all very good news but there is a

56
00:02:58,660 --> 00:03:01,720
problem with that the problem is that

57
00:03:01,720 --> 00:03:03,760
about sixty-eight percent of Allah

58
00:03:03,760 --> 00:03:05,799
Jasper test cases is broken according to

59
00:03:05,799 --> 00:03:08,560
Jean Jacques Rousseau and well it's true

60
00:03:08,560 --> 00:03:10,660
mistakes are very easy to make and it

61
00:03:10,660 --> 00:03:13,269
kind of sucks because Jasper allows you

62
00:03:13,269 --> 00:03:15,579
to easily create test cases but you know

63
00:03:15,579 --> 00:03:17,590
even the tiniest little mistake that you

64
00:03:17,590 --> 00:03:19,920
make or the tiniest a typo in your code

65
00:03:19,920 --> 00:03:22,540
will just render the test invalid and

66
00:03:22,540 --> 00:03:25,480
results would be meaningless and was it

67
00:03:25,480 --> 00:03:27,310
not william shakespeare who as written

68
00:03:27,310 --> 00:03:29,230
it would be unwise to take all jesper if

69
00:03:29,230 --> 00:03:32,180
results for granted

70
00:03:32,190 --> 00:03:34,780
he was right this would be very nice if

71
00:03:34,780 --> 00:03:37,330
we would be able to just browse Jasper

72
00:03:37,330 --> 00:03:40,510
and you know look at the results and

73
00:03:40,510 --> 00:03:41,740
make a decision based on that but

74
00:03:41,740 --> 00:03:43,210
unfortunately it's not that simple

75
00:03:43,210 --> 00:03:45,040
because there are too many mistakes that

76
00:03:45,040 --> 00:03:47,800
are made and I've written about

77
00:03:47,800 --> 00:03:50,170
benchmarking pitfalls before together

78
00:03:50,170 --> 00:03:52,480
with John David Dalton again if you're

79
00:03:52,480 --> 00:03:54,010
interested you can just read the article

80
00:03:54,010 --> 00:03:55,630
build proof JavaScript benchmarks the

81
00:03:55,630 --> 00:03:58,060
link is at the bottom but the main

82
00:03:58,060 --> 00:04:00,790
topics there are that there are a lot of

83
00:04:00,790 --> 00:04:02,230
inaccurate millisecond timers in

84
00:04:02,230 --> 00:04:04,360
different operating systems and browsers

85
00:04:04,360 --> 00:04:06,280
and of course if your bench marking code

86
00:04:06,280 --> 00:04:07,989
in JavaScript you will need to work

87
00:04:07,989 --> 00:04:09,820
around that to still get an accurate

88
00:04:09,820 --> 00:04:12,910
result I probably don't need to tell you

89
00:04:12,910 --> 00:04:15,070
that browsers have books so if those

90
00:04:15,070 --> 00:04:16,419
books affect the way your benchmark

91
00:04:16,419 --> 00:04:17,829
codes you will need to work around those

92
00:04:17,829 --> 00:04:21,160
bugs as well and maybe one of the

93
00:04:21,160 --> 00:04:22,810
biggest problems with benchmarking is

94
00:04:22,810 --> 00:04:25,080
that you will need to have statistically

95
00:04:25,080 --> 00:04:27,910
significant results if you don't do

96
00:04:27,910 --> 00:04:30,120
statistical analysis on your results

97
00:04:30,120 --> 00:04:32,770
they're not completely meaningless but

98
00:04:32,770 --> 00:04:35,410
you know they're not as it should be and

99
00:04:35,410 --> 00:04:39,190
this really sounds self-evident but if

100
00:04:39,190 --> 00:04:40,990
you want to run a test and you later we

101
00:04:40,990 --> 00:04:42,520
run the same tests on the same browser

102
00:04:42,520 --> 00:04:44,020
in the same device with the same

103
00:04:44,020 --> 00:04:46,060
settings the same everything you're

104
00:04:46,060 --> 00:04:47,440
going to want to get the same results

105
00:04:47,440 --> 00:04:50,830
right and it makes sense but even the

106
00:04:50,830 --> 00:04:52,600
bigger browser benchmarks like sunspider

107
00:04:52,600 --> 00:04:54,880
and Kraken they still don't get this

108
00:04:54,880 --> 00:04:56,950
quite right so if you run the same tests

109
00:04:56,950 --> 00:04:59,770
twice in same browser sometimes will

110
00:04:59,770 --> 00:05:01,360
tell you that your browser is faster or

111
00:05:01,360 --> 00:05:05,320
slower than itself so no results they're

112
00:05:05,320 --> 00:05:07,180
not really as meaningful as they should

113
00:05:07,180 --> 00:05:10,630
be another thing to consider is that

114
00:05:10,630 --> 00:05:12,370
there are browser plugins and add-ons

115
00:05:12,370 --> 00:05:14,680
that may influence the results for

116
00:05:14,680 --> 00:05:16,990
example Firebug in Firefox is known to

117
00:05:16,990 --> 00:05:19,150
disable the jets and Firefox so all

118
00:05:19,150 --> 00:05:21,190
JavaScript that you'll overrun will run

119
00:05:21,190 --> 00:05:24,460
much slower and on GS perfect right to

120
00:05:24,460 --> 00:05:27,040
one you if Firebug is enabled to try to

121
00:05:27,040 --> 00:05:29,410
detect it and show a warning but it's

122
00:05:29,410 --> 00:05:32,220
still up to you to disable Firebug and

123
00:05:32,220 --> 00:05:35,590
rerun the tests because for example it

124
00:05:35,590 --> 00:05:38,620
wouldn't be fair sure to compare the

125
00:05:38,620 --> 00:05:40,750
in chrome and you would compare the

126
00:05:40,750 --> 00:05:42,400
number of operations per second that you

127
00:05:42,400 --> 00:05:44,650
would get from Jasper with the number of

128
00:05:44,650 --> 00:05:46,120
operations per second that you would get

129
00:05:46,120 --> 00:05:48,280
in Firefox with Firebug enable that

130
00:05:48,280 --> 00:05:49,750
wouldn't be a fair comparison at all of

131
00:05:49,750 --> 00:05:51,250
course Firefox is going to be slower

132
00:05:51,250 --> 00:05:55,449
that way another thing to consider is

133
00:05:55,449 --> 00:05:57,160
that you should always test in all the

134
00:05:57,160 --> 00:05:58,660
browsers that you're planning to support

135
00:05:58,660 --> 00:06:00,310
there's no point in creating a test case

136
00:06:00,310 --> 00:06:02,470
and just throwing a test and say Safari

137
00:06:02,470 --> 00:06:04,150
if you're going to support all browsers

138
00:06:04,150 --> 00:06:06,820
all the way back to ie6 everybody is

139
00:06:06,820 --> 00:06:08,350
different every JavaScript engine is

140
00:06:08,350 --> 00:06:10,090
different so it's very important to test

141
00:06:10,090 --> 00:06:11,620
in every engine that you're planning to

142
00:06:11,620 --> 00:06:15,850
support and well maybe the biggest

143
00:06:15,850 --> 00:06:17,740
problem of all is that a lot of tests

144
00:06:17,740 --> 00:06:20,050
are incorrect or make assumptions that

145
00:06:20,050 --> 00:06:23,050
aren't quite right now when we look at

146
00:06:23,050 --> 00:06:24,880
the six bullet points we can divide them

147
00:06:24,880 --> 00:06:27,430
into groups and the first one or three

148
00:06:27,430 --> 00:06:29,350
things that benchmark yes and this

149
00:06:29,350 --> 00:06:32,199
Jasper takes care of for you so good

150
00:06:32,199 --> 00:06:33,310
news is you don't have to worry about

151
00:06:33,310 --> 00:06:36,160
these three things again the bad news is

152
00:06:36,160 --> 00:06:37,840
that you will have to worry about these

153
00:06:37,840 --> 00:06:40,090
three things these are things that

154
00:06:40,090 --> 00:06:42,340
Jasper cannot enforce on you so you will

155
00:06:42,340 --> 00:06:44,740
have to take care of it yourself in the

156
00:06:44,740 --> 00:06:46,180
end it's you who has to write the test

157
00:06:46,180 --> 00:06:49,030
and run them correctly so please do that

158
00:06:49,030 --> 00:06:53,530
correctly now let's see what's the most

159
00:06:53,530 --> 00:06:55,270
common problem with tests and their own

160
00:06:55,270 --> 00:06:59,020
fair comparisons incorrect tests suck so

161
00:06:59,020 --> 00:07:01,360
let's see what we can do about them here

162
00:07:01,360 --> 00:07:03,580
are a couple of quick hit hints and

163
00:07:03,580 --> 00:07:04,930
quick tips that you can use to make

164
00:07:04,930 --> 00:07:08,620
better test cases in Jasper so the

165
00:07:08,620 --> 00:07:10,300
function declarations that you will use

166
00:07:10,300 --> 00:07:11,889
in your test they should go either in

167
00:07:11,889 --> 00:07:13,300
the preparation code or in the setup

168
00:07:13,300 --> 00:07:16,419
code so on Jasper if that looks kind of

169
00:07:16,419 --> 00:07:18,370
like this you have this big text area

170
00:07:18,370 --> 00:07:19,479
where you can enter all the JavaScript

171
00:07:19,479 --> 00:07:22,780
that will be executed first time in the

172
00:07:22,780 --> 00:07:25,210
global scope so if you have any

173
00:07:25,210 --> 00:07:26,919
functions that you want to declare just

174
00:07:26,919 --> 00:07:28,510
do it there don't do it in a test body

175
00:07:28,510 --> 00:07:31,720
itself only the bare minimum should go

176
00:07:31,720 --> 00:07:35,199
inside of each test body so ideally you

177
00:07:35,199 --> 00:07:37,599
would get something like this see it's

178
00:07:37,599 --> 00:07:41,289
really concise I'll see I've seen people

179
00:07:41,289 --> 00:07:43,750
include the entire jQuery source in the

180
00:07:43,750 --> 00:07:45,860
test body itself and

181
00:07:45,860 --> 00:07:50,930
that's not how Jasper perks yeah well a

182
00:07:50,930 --> 00:07:52,460
good example of the test case is this

183
00:07:52,460 --> 00:07:56,180
one this is the preparation code that we

184
00:07:56,180 --> 00:07:57,860
saw earlier this is how what it will

185
00:07:57,860 --> 00:07:59,419
look like when the test case is finished

186
00:07:59,419 --> 00:08:01,550
so you get a syntax highlighted view of

187
00:08:01,550 --> 00:08:04,219
the code you got a nice little table

188
00:08:04,219 --> 00:08:06,080
with all the different tests in them and

189
00:08:06,080 --> 00:08:08,240
then there's a button that allows you to

190
00:08:08,240 --> 00:08:10,219
run the tests and results will look

191
00:08:10,219 --> 00:08:11,659
something like this depending on the

192
00:08:11,659 --> 00:08:14,360
browser of course I won't just prefer

193
00:08:14,360 --> 00:08:16,460
sure which one is fastest and which one

194
00:08:16,460 --> 00:08:20,689
is slowest here's another common problem

195
00:08:20,689 --> 00:08:23,240
i made this test case regarding

196
00:08:23,240 --> 00:08:25,219
Fibonacci numbers so I found a couple of

197
00:08:25,219 --> 00:08:29,389
functions that allow that we you pass an

198
00:08:29,389 --> 00:08:31,520
argument which is an index and then it

199
00:08:31,520 --> 00:08:33,019
returns you the Fibonacci number with

200
00:08:33,019 --> 00:08:36,289
that index from the sequence and you

201
00:08:36,289 --> 00:08:38,060
know I run some tests and turned out

202
00:08:38,060 --> 00:08:39,409
that the first solution that I found

203
00:08:39,409 --> 00:08:41,810
what's much much much faster as you can

204
00:08:41,810 --> 00:08:43,370
see the second option is about

205
00:08:43,370 --> 00:08:45,529
ninety-eight percent slower and that's

206
00:08:45,529 --> 00:08:49,279
kind of a big difference so yeah first

207
00:08:49,279 --> 00:08:50,930
reaction would be yeah okay let's use

208
00:08:50,930 --> 00:08:53,930
first one it's much faster but long

209
00:08:53,930 --> 00:08:55,610
story short you got to make sure the

210
00:08:55,610 --> 00:08:56,930
methods you're comparing actually do

211
00:08:56,930 --> 00:08:58,610
exactly the same thing if they don't

212
00:08:58,610 --> 00:09:00,640
it's not really fair comparison and

213
00:09:00,640 --> 00:09:02,930
depending on your use case that may or

214
00:09:02,930 --> 00:09:05,600
may not be a problem so if there is a

215
00:09:05,600 --> 00:09:06,769
difference in the different function

216
00:09:06,769 --> 00:09:08,600
that you're testing please be polite and

217
00:09:08,600 --> 00:09:10,220
mention it in the description of your

218
00:09:10,220 --> 00:09:12,260
test case because other people will look

219
00:09:12,260 --> 00:09:14,769
at it and it's best not to confuse them

220
00:09:14,769 --> 00:09:18,350
so in this case I investigated a little

221
00:09:18,350 --> 00:09:19,910
further and I noticed that the first

222
00:09:19,910 --> 00:09:23,600
function only handles indexes up to 1474

223
00:09:23,600 --> 00:09:26,089
while the second function allows a nexus

224
00:09:26,089 --> 00:09:29,959
up to 1476 now that may not be much of a

225
00:09:29,959 --> 00:09:31,310
difference but depending on your use

226
00:09:31,310 --> 00:09:33,920
case it may be so it's important to be

227
00:09:33,920 --> 00:09:36,230
aware of it and also a later found out

228
00:09:36,230 --> 00:09:37,760
that the first function you know the

229
00:09:37,760 --> 00:09:40,760
super fast one starts to earn inaccurate

230
00:09:40,760 --> 00:09:44,140
results starting at the index 76 so

231
00:09:44,140 --> 00:09:46,339
again depending on your use case that

232
00:09:46,339 --> 00:09:47,660
may not be a problem if you're just

233
00:09:47,660 --> 00:09:50,600
getting an approximation but maybe it is

234
00:09:50,600 --> 00:09:51,800
and then you still have to use the

235
00:09:51,800 --> 00:09:53,209
second function even though it's lower

236
00:09:53,209 --> 00:09:57,529
so that's something to consider another

237
00:09:57,529 --> 00:09:59,350
thing is you have to make sure that

238
00:09:59,350 --> 00:10:03,370
really testing or to intended to test in

239
00:10:03,370 --> 00:10:05,050
a good example of that well a bad

240
00:10:05,050 --> 00:10:06,910
example of that is this test case the

241
00:10:06,910 --> 00:10:09,910
title is jQuery ID versus native get

242
00:10:09,910 --> 00:10:12,250
element by ID so you would expect the

243
00:10:12,250 --> 00:10:15,040
best case where you would get an element

244
00:10:15,040 --> 00:10:17,440
based on its ID using jQuery versus

245
00:10:17,440 --> 00:10:20,590
using a documented get element by ID but

246
00:10:20,590 --> 00:10:21,970
when I looked at the test it looked

247
00:10:21,970 --> 00:10:28,930
something like this as you can see what

248
00:10:28,930 --> 00:10:30,700
this is really testing is how long it

249
00:10:30,700 --> 00:10:32,680
takes to bind an event handler either

250
00:10:32,680 --> 00:10:35,890
using the dumb 0 window download or by

251
00:10:35,890 --> 00:10:38,410
using jQuery and calling the load method

252
00:10:38,410 --> 00:10:40,480
which by the way I don't think load

253
00:10:40,480 --> 00:10:42,280
works the way the other things it does

254
00:10:42,280 --> 00:10:44,230
because load is used for IX stuff in

255
00:10:44,230 --> 00:10:49,150
jQuery so really whatever is inside of

256
00:10:49,150 --> 00:10:51,010
the event handler here it doesn't really

257
00:10:51,010 --> 00:10:53,160
matter because it won't ever get called

258
00:10:53,160 --> 00:10:56,680
during the tests so even if you know

259
00:10:56,680 --> 00:10:58,840
even if the second test would have a

260
00:10:58,840 --> 00:11:01,720
super slow event handler it won't matter

261
00:11:01,720 --> 00:11:03,640
in this case and you can tell because

262
00:11:03,640 --> 00:11:06,040
good results are the same the last

263
00:11:06,040 --> 00:11:07,330
result of course is a little slower

264
00:11:07,330 --> 00:11:09,670
because you're making a call to jQuery

265
00:11:09,670 --> 00:11:14,280
there but this test is kind of rubbish

266
00:11:14,280 --> 00:11:16,510
another thing to consider is that when

267
00:11:16,510 --> 00:11:19,120
you're using variables across tests you

268
00:11:19,120 --> 00:11:20,800
need to make sure that you reset them

269
00:11:20,800 --> 00:11:23,770
whenever it's necessary for example this

270
00:11:23,770 --> 00:11:27,850
test case here they're trying to compare

271
00:11:27,850 --> 00:11:31,150
if it's faster to do a plus equals B or

272
00:11:31,150 --> 00:11:33,610
if it's faster to do a equals a plus B

273
00:11:33,610 --> 00:11:34,960
which both do the same thing and

274
00:11:34,960 --> 00:11:37,090
honestly I would expect both to be

275
00:11:37,090 --> 00:11:39,850
equally fast and it's a very micro

276
00:11:39,850 --> 00:11:43,240
optimization anyway the problem with

277
00:11:43,240 --> 00:11:44,800
this setup is that in the preparation

278
00:11:44,800 --> 00:11:48,520
code a is set to 2 and then the test

279
00:11:48,520 --> 00:11:51,400
starts running so by the time test one

280
00:11:51,400 --> 00:11:54,370
starts a equals 2 and it's a commented

281
00:11:54,370 --> 00:11:57,220
all the time but by the time test one is

282
00:11:57,220 --> 00:11:59,170
finished and has two starts running a

283
00:11:59,170 --> 00:12:01,270
will be a much higher number it will

284
00:12:01,270 --> 00:12:03,130
have a much higher value so that may or

285
00:12:03,130 --> 00:12:05,470
may not make a difference in results and

286
00:12:05,470 --> 00:12:08,529
in fact in Opera

287
00:12:08,529 --> 00:12:10,660
discrete from opera and there it does

288
00:12:10,660 --> 00:12:13,810
really make a big difference as you can

289
00:12:13,810 --> 00:12:15,939
tell the second method seems to be

290
00:12:15,939 --> 00:12:17,980
thirteen percent slower but it's not

291
00:12:17,980 --> 00:12:19,839
actually slower just because the number

292
00:12:19,839 --> 00:12:22,060
a has much higher starting value for the

293
00:12:22,060 --> 00:12:23,680
second tests so it's not a fair

294
00:12:23,680 --> 00:12:26,709
comparison the fun thing is that if we

295
00:12:26,709 --> 00:12:29,350
rerun the same test afterwards so after

296
00:12:29,350 --> 00:12:31,749
we get super high values for a we run

297
00:12:31,749 --> 00:12:33,910
the test again we get a completely

298
00:12:33,910 --> 00:12:35,680
different results so now we see that

299
00:12:35,680 --> 00:12:37,870
both tests turn out to be equally fast

300
00:12:37,870 --> 00:12:40,329
so whenever that happens on the Esper

301
00:12:40,329 --> 00:12:41,649
there's something wrong with your test

302
00:12:41,649 --> 00:12:43,300
case we're on the same test twice and

303
00:12:43,300 --> 00:12:45,160
get different results something is wrong

304
00:12:45,160 --> 00:12:49,720
that's a red flag another good idea is

305
00:12:49,720 --> 00:12:51,999
to never introduce randomness in your

306
00:12:51,999 --> 00:12:56,170
tests I saw this test case here and as

307
00:12:56,170 --> 00:12:59,230
you can see inside the test body the

308
00:12:59,230 --> 00:13:01,779
author used math dot random to generate

309
00:13:01,779 --> 00:13:03,879
random numbers then round them down and

310
00:13:03,879 --> 00:13:06,040
then do some other stuff with them the

311
00:13:06,040 --> 00:13:08,199
problem with this is that there's always

312
00:13:08,199 --> 00:13:10,329
the chance that you get numbers that are

313
00:13:10,329 --> 00:13:12,550
slightly faster to ramp down in one of

314
00:13:12,550 --> 00:13:15,370
the tests so you'll never know if

315
00:13:15,370 --> 00:13:17,199
actually the function that you're

316
00:13:17,199 --> 00:13:19,180
testing is faster or if it's something

317
00:13:19,180 --> 00:13:21,699
else that's influencing the results so

318
00:13:21,699 --> 00:13:23,050
if you want to test with different

319
00:13:23,050 --> 00:13:24,610
numbers that's great but just add

320
00:13:24,610 --> 00:13:26,589
multiple tests to the same test case and

321
00:13:26,589 --> 00:13:30,970
don't use random numbers another pro tip

322
00:13:30,970 --> 00:13:33,209
is never just asynchronous stuff

323
00:13:33,209 --> 00:13:36,730
synchronously it sounds logical but a

324
00:13:36,730 --> 00:13:39,399
lot of people make the mistake for

325
00:13:39,399 --> 00:13:46,120
example at this test case

326
00:13:46,130 --> 00:13:48,860
as you can see we're testing through

327
00:13:48,860 --> 00:13:50,900
different functions in a set amount in

328
00:13:50,900 --> 00:13:52,670
the same set them out and they turn out

329
00:13:52,670 --> 00:13:54,440
to be both as fast even though the first

330
00:13:54,440 --> 00:13:57,320
so the test one function it's supposed

331
00:13:57,320 --> 00:13:59,780
to be fast while this test tube function

332
00:13:59,780 --> 00:14:01,970
is supposed to be super slow and of

333
00:14:01,970 --> 00:14:03,950
course they're equally fast for Jasper

334
00:14:03,950 --> 00:14:05,780
because you're testing something is

335
00:14:05,780 --> 00:14:09,020
synchronously that's testing something

336
00:14:09,020 --> 00:14:10,370
synchronously that's supposed to be

337
00:14:10,370 --> 00:14:13,340
asynchronous the set timeout it will

338
00:14:13,340 --> 00:14:16,190
yeah it basically is no operation test

339
00:14:16,190 --> 00:14:19,340
initially the functions will be called

340
00:14:19,340 --> 00:14:20,960
eventually but they will be called

341
00:14:20,960 --> 00:14:22,580
outside of the test loop so it won't be

342
00:14:22,580 --> 00:14:25,820
times so in this case you get it seems

343
00:14:25,820 --> 00:14:27,800
like their boat as fast but it's not

344
00:14:27,800 --> 00:14:29,990
really the case if you want to do a

345
00:14:29,990 --> 00:14:32,300
synchronous test here's a good example

346
00:14:32,300 --> 00:14:39,710
of doing that right so jess perf has

347
00:14:39,710 --> 00:14:41,600
this checkbox for every test that you

348
00:14:41,600 --> 00:14:44,690
add this isn't a synchronous test well

349
00:14:44,690 --> 00:14:46,820
if it is just hit the check box and then

350
00:14:46,820 --> 00:14:49,160
all you need to do is you get a deferred

351
00:14:49,160 --> 00:14:51,710
object for free and you just need to

352
00:14:51,710 --> 00:14:53,930
call resolve on that object and then the

353
00:14:53,930 --> 00:14:56,660
test will finish so for example in the

354
00:14:56,660 --> 00:14:59,930
html5 spec the minimum set timeout value

355
00:14:59,930 --> 00:15:03,020
allowed is four and that wasn't spective

356
00:15:03,020 --> 00:15:04,880
or so I decided to figure out which

357
00:15:04,880 --> 00:15:08,120
browsers already support this feature so

358
00:15:08,120 --> 00:15:10,010
the idea is that if you would use the

359
00:15:10,010 --> 00:15:13,040
zero as timeout it would still use for

360
00:15:13,040 --> 00:15:16,940
instead so i created this test case see

361
00:15:16,940 --> 00:15:18,320
the only thing that's different is

362
00:15:18,320 --> 00:15:20,390
timeout value that's always increasing

363
00:15:20,390 --> 00:15:22,970
by the way that last value is really

364
00:15:22,970 --> 00:15:24,440
weird with some browsers have an issue

365
00:15:24,440 --> 00:15:27,020
where if you use this value or a higher

366
00:15:27,020 --> 00:15:29,600
value it will still use zero or four

367
00:15:29,600 --> 00:15:32,690
instead it's really freaky so I added

368
00:15:32,690 --> 00:15:34,760
that to the test this is a good example

369
00:15:34,760 --> 00:15:40,470
of an a synchronous test

370
00:15:40,480 --> 00:15:43,220
it also really helps if you learn the

371
00:15:43,220 --> 00:15:44,870
difference between preparation code and

372
00:15:44,870 --> 00:15:48,740
the setup and the teardown sections so

373
00:15:48,740 --> 00:15:50,240
Jasper looks something like this right

374
00:15:50,240 --> 00:15:52,160
these are the most basic fields where

375
00:15:52,160 --> 00:15:54,379
you can enter your alter details and the

376
00:15:54,379 --> 00:15:57,470
title of the test case but here's the

377
00:15:57,470 --> 00:15:59,120
interesting part so you get a

378
00:15:59,120 --> 00:16:01,759
preparation code for HTML I like to call

379
00:16:01,759 --> 00:16:03,939
this the preparation h fields and

380
00:16:03,939 --> 00:16:06,680
there's also feels for JavaScript and

381
00:16:06,680 --> 00:16:08,899
all you need to know is that this code

382
00:16:08,899 --> 00:16:10,420
will be inserted into an HTML document

383
00:16:10,420 --> 00:16:12,800
so the JavaScript that you enter there

384
00:16:12,800 --> 00:16:14,930
will be evaluated in the global scope so

385
00:16:14,930 --> 00:16:16,970
if you were to create a new variable in

386
00:16:16,970 --> 00:16:19,279
the preparation code for JavaScript it

387
00:16:19,279 --> 00:16:23,060
would become a global variable the

388
00:16:23,060 --> 00:16:24,800
difference with setup and the teardown

389
00:16:24,800 --> 00:16:27,529
test is that they run same scope as the

390
00:16:27,529 --> 00:16:30,529
actual tests so whatever code you enter

391
00:16:30,529 --> 00:16:33,220
here it still won't be x same as the

392
00:16:33,220 --> 00:16:35,480
same as the preparation coat it only

393
00:16:35,480 --> 00:16:38,439
times but they do run in the same scope

394
00:16:38,439 --> 00:16:40,759
which allows you to do all kinds of

395
00:16:40,759 --> 00:16:44,029
crazy and cool stuff for example there's

396
00:16:44,029 --> 00:16:45,889
this test case that multi made a couple

397
00:16:45,889 --> 00:16:50,449
of weeks ago and well the setups like

398
00:16:50,449 --> 00:16:52,730
this he as you can see he clear eighths

399
00:16:52,730 --> 00:16:56,420
some global variables here and for

400
00:16:56,420 --> 00:16:58,850
example the I variable is using that in

401
00:16:58,850 --> 00:17:00,889
the tests in a used them in every test

402
00:17:00,889 --> 00:17:03,050
so that's not a problem because the same

403
00:17:03,050 --> 00:17:05,720
scope lookup is done in every test but

404
00:17:05,720 --> 00:17:07,520
then for example if you look at the boo

405
00:17:07,520 --> 00:17:10,549
variable he's only using that one in the

406
00:17:10,549 --> 00:17:14,449
first two tests so those first two tests

407
00:17:14,449 --> 00:17:16,130
they have the performance penalty

408
00:17:16,130 --> 00:17:18,110
penalty of a scope look up while the

409
00:17:18,110 --> 00:17:20,990
other ones don't so it would be slightly

410
00:17:20,990 --> 00:17:22,699
better and slightly more fair if you

411
00:17:22,699 --> 00:17:24,559
would were to change the test and use

412
00:17:24,559 --> 00:17:28,250
setup code instead so all let me change

413
00:17:28,250 --> 00:17:30,409
this we move to variable declarations to

414
00:17:30,409 --> 00:17:33,409
the setup code and this way the variable

415
00:17:33,409 --> 00:17:35,500
those are created in the same scope as

416
00:17:35,500 --> 00:17:38,929
the tests themselves so no scope lookups

417
00:17:38,929 --> 00:17:40,640
and no performance penalty for the first

418
00:17:40,640 --> 00:17:42,950
two tests and I think this is a slightly

419
00:17:42,950 --> 00:17:45,590
more fair comparison again this may not

420
00:17:45,590 --> 00:17:46,970
make much of a difference in every

421
00:17:46,970 --> 00:17:48,860
browser with in some browsers it does

422
00:17:48,860 --> 00:17:50,690
and in some situations it does so it's

423
00:17:50,690 --> 00:17:51,600
better to

424
00:17:51,600 --> 00:17:55,919
do it this way another example of using

425
00:17:55,919 --> 00:17:58,650
these advanced features is the dumb

426
00:17:58,650 --> 00:18:00,960
cleanup for example when you're testing

427
00:18:00,960 --> 00:18:03,840
how long it takes to insert a new

428
00:18:03,840 --> 00:18:06,299
element into the Dom you could do it

429
00:18:06,299 --> 00:18:08,970
like this without using setup you could

430
00:18:08,970 --> 00:18:11,250
just use a preparation code could create

431
00:18:11,250 --> 00:18:13,500
a new container element so a reference

432
00:18:13,500 --> 00:18:15,390
to development and a variable called al

433
00:18:15,390 --> 00:18:18,299
and then we just use that variable in

434
00:18:18,299 --> 00:18:20,940
every test the problem with this setup

435
00:18:20,940 --> 00:18:22,890
is that test code is repeated

436
00:18:22,890 --> 00:18:26,460
potentially millions of times so this

437
00:18:26,460 --> 00:18:28,250
would add a lot of elements to the Dom

438
00:18:28,250 --> 00:18:31,980
all right so the problem with this setup

439
00:18:31,980 --> 00:18:33,630
is that the test code is repeated

440
00:18:33,630 --> 00:18:35,250
potentially millions of times so this

441
00:18:35,250 --> 00:18:36,659
would add a lot of elements to the DOM

442
00:18:36,659 --> 00:18:39,750
and things might get slow the thing is

443
00:18:39,750 --> 00:18:41,370
you're only trying to test how long it

444
00:18:41,370 --> 00:18:43,289
takes to insert the new elements and not

445
00:18:43,289 --> 00:18:46,260
and you know it may be faster if the dam

446
00:18:46,260 --> 00:18:48,419
is already huge it may be slower if it

447
00:18:48,419 --> 00:18:50,220
down is already huge if you're inserting

448
00:18:50,220 --> 00:18:53,159
new elements then so ideally we would

449
00:18:53,159 --> 00:18:54,780
reset the container element every would

450
00:18:54,780 --> 00:18:57,659
clear it of all its children and we can

451
00:18:57,659 --> 00:19:00,510
use the tip code for that so the setup

452
00:19:00,510 --> 00:19:04,820
code will be run for each test batch so

453
00:19:04,820 --> 00:19:07,169
right here we're just clear the inner

454
00:19:07,169 --> 00:19:09,690
HTML which will effectively remove all

455
00:19:09,690 --> 00:19:13,049
child elements however we can fill

456
00:19:13,049 --> 00:19:14,490
optimize this test case a little bit

457
00:19:14,490 --> 00:19:16,380
because we are only interested in how

458
00:19:16,380 --> 00:19:18,330
long it takes to insert key element into

459
00:19:18,330 --> 00:19:20,280
the DOM and right here we're still

460
00:19:20,280 --> 00:19:22,049
creating the diff and the P element in

461
00:19:22,049 --> 00:19:24,809
memory so that also gets timed and

462
00:19:24,809 --> 00:19:26,130
that's also going to influence the

463
00:19:26,130 --> 00:19:29,190
results so if you want we could simplify

464
00:19:29,190 --> 00:19:33,120
this into something like this where we

465
00:19:33,120 --> 00:19:35,820
basically we create the elements in set

466
00:19:35,820 --> 00:19:37,980
up code as well and then the best

467
00:19:37,980 --> 00:19:40,440
buddies themselves are as small as

468
00:19:40,440 --> 00:19:42,870
possible and you're only really time how

469
00:19:42,870 --> 00:19:44,580
long it takes to append the new elements

470
00:19:44,580 --> 00:19:48,720
and as a bonus by doing it this way it

471
00:19:48,720 --> 00:19:50,280
will always reuse the same elements

472
00:19:50,280 --> 00:19:52,110
rather than creating new ones every time

473
00:19:52,110 --> 00:19:54,659
so there's only ever going to be one

474
00:19:54,659 --> 00:19:56,250
child element in the container element

475
00:19:56,250 --> 00:20:00,070
this way so it's much better

476
00:20:00,070 --> 00:20:03,260
another of pro tip is that benchmark

477
00:20:03,260 --> 00:20:06,440
jess is used on Jasper and there are a

478
00:20:06,440 --> 00:20:08,450
lot of advanced settings that you can

479
00:20:08,450 --> 00:20:10,490
use that Jasper doesn't even have a user

480
00:20:10,490 --> 00:20:12,800
interface for so if you can just go to

481
00:20:12,800 --> 00:20:14,510
the documentation if you read through

482
00:20:14,510 --> 00:20:16,190
the API there's a lot of cool stuff that

483
00:20:16,190 --> 00:20:18,230
you can discover and tricks that you can

484
00:20:18,230 --> 00:20:20,750
use on GS curve for example i created

485
00:20:20,750 --> 00:20:23,540
this test case to test how long it takes

486
00:20:23,540 --> 00:20:28,670
to remove a child element and so let's

487
00:20:28,670 --> 00:20:30,200
see we want to test how slow it is to

488
00:20:30,200 --> 00:20:32,270
remove an element from the dump I've

489
00:20:32,270 --> 00:20:35,090
only added one test and all that's

490
00:20:35,090 --> 00:20:36,890
happening there is an element gets

491
00:20:36,890 --> 00:20:40,370
removed that's it the problem is we need

492
00:20:40,370 --> 00:20:42,590
enough elements so we can remove them

493
00:20:42,590 --> 00:20:44,090
because we don't know how many times it

494
00:20:44,090 --> 00:20:45,980
tests will be repeated because J

495
00:20:45,980 --> 00:20:47,450
benchmark Jess will automatically

496
00:20:47,450 --> 00:20:49,610
calculate that for us now the thing is

497
00:20:49,610 --> 00:20:53,090
we can actually get the test count by

498
00:20:53,090 --> 00:20:56,660
using this in the setup function this

499
00:20:56,660 --> 00:20:58,850
will refer to the current benchmark

500
00:20:58,850 --> 00:21:00,740
instance and every benchmark instance

501
00:21:00,740 --> 00:21:03,650
gets account property which refers to

502
00:21:03,650 --> 00:21:05,210
the number of times the test will be

503
00:21:05,210 --> 00:21:10,400
hydrated so this way we just if you just

504
00:21:10,400 --> 00:21:13,250
look at a setup code here just adding as

505
00:21:13,250 --> 00:21:15,530
many child elements that we need so

506
00:21:15,530 --> 00:21:19,070
exactly the right amount so that's

507
00:21:19,070 --> 00:21:22,520
thought it was pretty neat of course

508
00:21:22,520 --> 00:21:24,500
there's some other stuff that may mess

509
00:21:24,500 --> 00:21:26,270
with your results that we didn't cover

510
00:21:26,270 --> 00:21:29,180
here unexpected browser features for

511
00:21:29,180 --> 00:21:31,460
example opera suddenly decided to start

512
00:21:31,460 --> 00:21:33,460
cashing the query selector all results

513
00:21:33,460 --> 00:21:35,990
and of course if you're testing if

514
00:21:35,990 --> 00:21:37,340
you're creating a benchmark for query

515
00:21:37,340 --> 00:21:39,680
selector request select the row Oprah

516
00:21:39,680 --> 00:21:42,680
has a huge advantage so ideally you

517
00:21:42,680 --> 00:21:45,140
would have to work around it by using a

518
00:21:45,140 --> 00:21:49,700
different selector every time another

519
00:21:49,700 --> 00:21:52,100
the interesting is that code removal of

520
00:21:52,100 --> 00:21:55,210
course that's a very hard to predict and

521
00:21:55,210 --> 00:21:58,460
you know if there's if you're getting

522
00:21:58,460 --> 00:22:01,070
weird results you know some that code

523
00:22:01,070 --> 00:22:03,890
might be in there of course there is

524
00:22:03,890 --> 00:22:07,130
much more but the idea is that if we all

525
00:22:07,130 --> 00:22:08,750
help each other if we

526
00:22:08,750 --> 00:22:10,340
test case that's incorrect in some way

527
00:22:10,340 --> 00:22:12,980
just leave a comment or four kids and

528
00:22:12,980 --> 00:22:15,530
improve it just so others can learn from

529
00:22:15,530 --> 00:22:19,400
it as well that's it from are there any

530
00:22:19,400 --> 00:22:29,690
questions

531
00:22:29,700 --> 00:22:35,279
hmm well yeah well the question was am i

532
00:22:35,279 --> 00:22:36,659
planning on adding new features through

533
00:22:36,659 --> 00:22:39,110
GS curve the answer is that there's a

534
00:22:39,110 --> 00:22:43,590
lot of things on my to-do list and one

535
00:22:43,590 --> 00:22:50,429
of which is adding a search go to the

536
00:22:50,429 --> 00:22:52,110
Browse page and you will get back all

537
00:22:52,110 --> 00:22:56,190
this cases but I checked it last week

538
00:22:56,190 --> 00:22:57,809
and it was about an HTML document of

539
00:22:57,809 --> 00:23:00,600
about two and a half megabytes so it has

540
00:23:00,600 --> 00:23:03,059
got my gosh there's a lot of test cases

541
00:23:03,059 --> 00:23:04,590
on there so I really need to do

542
00:23:04,590 --> 00:23:07,529
something about it and the quick fix was

543
00:23:07,529 --> 00:23:09,899
to just limit the Browse page to 2050

544
00:23:09,899 --> 00:23:12,389
latest tests so that's what happened now

545
00:23:12,389 --> 00:23:14,130
but i'm planning to add a search

546
00:23:14,130 --> 00:23:18,090
functionality to it soon I think there

547
00:23:18,090 --> 00:23:20,250
are another couple of other things lined

548
00:23:20,250 --> 00:23:22,830
up there but there's a github repo if

549
00:23:22,830 --> 00:23:24,659
you check my user account matches

550
00:23:24,659 --> 00:23:28,169
balance on github there's a repo for

551
00:23:28,169 --> 00:23:30,299
Jasper com there's no code inside of it

552
00:23:30,299 --> 00:23:33,090
yet I plan all open sourcing the PHP one

553
00:23:33,090 --> 00:23:35,580
day but uh I'm a bit too ashamed of it

554
00:23:35,580 --> 00:23:37,320
right now so need to clean it up a

555
00:23:37,320 --> 00:23:40,110
little bit the repository has an issue

556
00:23:40,110 --> 00:23:43,169
tracker and all my to-do items are being

557
00:23:43,169 --> 00:23:44,429
tracked there so if you have any

558
00:23:44,429 --> 00:23:46,440
suggestions you're free to just file a

559
00:23:46,440 --> 00:23:50,090
new ticket and I'll see what I can do

560
00:23:50,090 --> 00:24:01,470
any other questions

561
00:24:01,480 --> 00:24:04,720
oh if you have questions you can always

562
00:24:04,720 --> 00:24:08,350
fin either me or Jay Dalton or there is

563
00:24:08,350 --> 00:24:10,150
also this twitter account of GS work

564
00:24:10,150 --> 00:24:13,929
itself and its jsb RF because someone

565
00:24:13,929 --> 00:24:16,210
will guy named joy / supply she has the

566
00:24:16,210 --> 00:24:18,730
other account so if you have any

567
00:24:18,730 --> 00:24:21,490
questions just other just mentioned JSP

568
00:24:21,490 --> 00:24:24,610
RF in your tweets and we'll try to get

569
00:24:24,610 --> 00:24:31,090
back to you as soon as possible any

570
00:24:31,090 --> 00:24:35,620
other questions yeah okay thank you very

