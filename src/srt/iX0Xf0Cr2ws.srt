1
00:00:00,000 --> 00:00:05,160

uh yeah so hi I'm Nathan I'm here to

2
00:00:05,160 --> 00:00:06,330
talk to you about the future of

3
00:00:06,330 --> 00:00:10,110
operating systems I didn't have the

4
00:00:10,110 --> 00:00:11,790
chance to finish my slides and I woke up

5
00:00:11,790 --> 00:00:13,769
late this morning so I don't actually

6
00:00:13,769 --> 00:00:15,450
remember my slides so this is going to

7
00:00:15,450 --> 00:00:19,740
be fun all right I reinvent wheels

8
00:00:19,740 --> 00:00:22,350
because I think we could use some better

9
00:00:22,350 --> 00:00:27,119
ones so I'm working on a colonel and

10
00:00:27,119 --> 00:00:30,630
that's a research project and some guy

11
00:00:30,630 --> 00:00:36,030
on the internet did that to you also he

12
00:00:36,030 --> 00:00:38,850
seems to have gotten somewhere so I'm

13
00:00:38,850 --> 00:00:44,070
hoping that works at uh so primer about

14
00:00:44,070 --> 00:00:48,600
kernels if you're running linux or mac

15
00:00:48,600 --> 00:00:52,829
OS or some other funky thing you're

16
00:00:52,829 --> 00:00:55,320
probably looking at using something like

17
00:00:55,320 --> 00:01:00,899
the thing on the left so all of your

18
00:01:00,899 --> 00:01:02,789
stuff runs in kernel mode and rings out

19
00:01:02,789 --> 00:01:04,860
0 where everything has to be absolutely

20
00:01:04,860 --> 00:01:07,170
perfect if anything crashes you're

21
00:01:07,170 --> 00:01:09,060
screwed and you get a kernel panic and

22
00:01:09,060 --> 00:01:11,340
life is terrible and you will throw your

23
00:01:11,340 --> 00:01:17,100
computer at the wall and some guy had

24
00:01:17,100 --> 00:01:22,929
opinions on this

25
00:01:22,939 --> 00:01:26,970
and argued with the other guy so we have

26
00:01:26,970 --> 00:01:31,049
the situation like this where like if

27
00:01:31,049 --> 00:01:32,549
you want to write the kernel module the

28
00:01:32,549 --> 00:01:36,720
code has to be perfect and you kind of

29
00:01:36,720 --> 00:01:38,790
have to poke it into the kernel you

30
00:01:38,790 --> 00:01:41,700
can't just run it separately you can't

31
00:01:41,700 --> 00:01:43,860
build modules over your own if you have

32
00:01:43,860 --> 00:01:47,649
a new idea on how things should work

33
00:01:47,659 --> 00:01:53,450
well you're you can kind of shove it and

34
00:01:53,450 --> 00:01:56,520
like if you want to do something that's

35
00:01:56,520 --> 00:01:59,640
within the framework of what your kernel

36
00:01:59,640 --> 00:02:02,340
provides then you're fine and

37
00:02:02,340 --> 00:02:04,710
everything's easy way easier than if you

38
00:02:04,710 --> 00:02:07,590
were using a more modular system but

39
00:02:07,590 --> 00:02:10,709
because there's a cost to modularity but

40
00:02:10,709 --> 00:02:14,340
we decided that wasn't worth it we pick

41
00:02:14,340 --> 00:02:15,989
something with a small core that's why

42
00:02:15,989 --> 00:02:19,080
we're all here and we picked came up

43
00:02:19,080 --> 00:02:22,890
with a way to manage modularity and I

44
00:02:22,890 --> 00:02:36,019
run out of slides here but uh so

45
00:02:36,019 --> 00:02:42,359
actually I need this slide some people

46
00:02:42,359 --> 00:02:43,950
figured out that there might be a better

47
00:02:43,950 --> 00:02:46,049
way to do this and came up with micro

48
00:02:46,049 --> 00:02:48,840
kernels in the middle you separate these

49
00:02:48,840 --> 00:02:52,500
things you make you move with all things

50
00:02:52,500 --> 00:02:54,269
into user space where they run those

51
00:02:54,269 --> 00:02:57,390
normal processes they can crash like

52
00:02:57,390 --> 00:03:00,299
your filesystem can crash now your file

53
00:03:00,299 --> 00:03:01,739
system doesn't work that's rather

54
00:03:01,739 --> 00:03:03,600
annoying maybe your network driver

55
00:03:03,600 --> 00:03:06,030
crashes you know I've known at work but

56
00:03:06,030 --> 00:03:07,590
your systems still running and it can

57
00:03:07,590 --> 00:03:10,170
restart these things and everything will

58
00:03:10,170 --> 00:03:17,549
be better again so in the early 90s I

59
00:03:17,549 --> 00:03:21,319
think this was a really popular idea and

60
00:03:21,319 --> 00:03:29,040
nobody really actually made popular

61
00:03:29,040 --> 00:03:34,019
implementations of it so because it

62
00:03:34,019 --> 00:03:35,579
turns out it's way easier to write

63
00:03:35,579 --> 00:03:36,300
everything as

64
00:03:36,300 --> 00:03:44,370
one big bunch of code and I think in

65
00:03:44,370 --> 00:03:46,830
part that is because of you Luke the

66
00:03:46,830 --> 00:03:50,130
micro kernels we already have some of

67
00:03:50,130 --> 00:03:54,660
them like they have still for something

68
00:03:54,660 --> 00:03:56,550
that should be very simple they're very

69
00:03:56,550 --> 00:03:58,980
large API surface they're complicated to

70
00:03:58,980 --> 00:04:01,050
talk to so nobody actually wants to

71
00:04:01,050 --> 00:04:08,100
write the modules and some of them are

72
00:04:08,100 --> 00:04:10,290
slightly more practical there's minix

73
00:04:10,290 --> 00:04:14,060
which is written by Andrew Tannenbaum

74
00:04:14,060 --> 00:04:18,510
who who gives computer science and

75
00:04:18,510 --> 00:04:19,980
operating systems design at the

76
00:04:19,980 --> 00:04:23,010
University he retired recently but

77
00:04:23,010 --> 00:04:25,620
that's a that's a research operating

78
00:04:25,620 --> 00:04:32,670
system nobody uses it seriously and it

79
00:04:32,670 --> 00:04:35,400
doesn't go far enough in my opinion it

80
00:04:35,400 --> 00:04:37,950
makes in preconceived notions like Halle

81
00:04:37,950 --> 00:04:40,020
file system works I'll file system

82
00:04:40,020 --> 00:04:44,220
should work how network works and I want

83
00:04:44,220 --> 00:04:47,580
to put that all these bits so we go down

84
00:04:47,580 --> 00:04:52,680
to things like l4 which is a really

85
00:04:52,680 --> 00:04:55,380
really fast research microkernel that

86
00:04:55,380 --> 00:04:57,810
actually has some traction it's used in

87
00:04:57,810 --> 00:05:01,710
some niche applications but it still has

88
00:05:01,710 --> 00:05:04,530
a very large and complex API I have no

89
00:05:04,530 --> 00:05:11,820
clue how to program for it and I started

90
00:05:11,820 --> 00:05:15,450
writing my own thing I decided that C

91
00:05:15,450 --> 00:05:18,840
wasn't good enough it needed to be a

92
00:05:18,840 --> 00:05:22,760
safe systems language so i went for rust

93
00:05:22,760 --> 00:05:28,680
where you can strike kernel with so in

94
00:05:28,680 --> 00:05:31,050
rust you have unsafe blocks where you

95
00:05:31,050 --> 00:05:33,150
can do all the crazy things you can do

96
00:05:33,150 --> 00:05:35,850
and see like the reference null pointers

97
00:05:35,850 --> 00:05:39,120
and do pointer arithmetic and do stupid

98
00:05:39,120 --> 00:05:42,930
things and those need to be perfect but

99
00:05:42,930 --> 00:05:45,000
if you can isolate the unsafety to those

100
00:05:45,000 --> 00:05:46,110
blow

101
00:05:46,110 --> 00:05:48,270
and you can build save obstructions

102
00:05:48,270 --> 00:05:51,540
around the tricky stuff you can start

103
00:05:51,540 --> 00:05:53,730
right you can write a kernel without

104
00:05:53,730 --> 00:05:58,110
actually knowing that much it becomes

105
00:05:58,110 --> 00:06:06,460
much much easier to reason about and

106
00:06:06,470 --> 00:06:08,690
unwilling to build the kernel that

107
00:06:08,690 --> 00:06:13,340
provides the absolute minimum you get

108
00:06:13,340 --> 00:06:15,420
processes which have their own memory

109
00:06:15,420 --> 00:06:17,640
spaces so you can poke into you on the

110
00:06:17,640 --> 00:06:23,130
other people's memory as usual they can

111
00:06:23,130 --> 00:06:24,900
map memory to each other so they can

112
00:06:24,900 --> 00:06:29,270
share a memory your programs do this

113
00:06:29,270 --> 00:06:32,250
pretty much all the time this is why

114
00:06:32,250 --> 00:06:34,340
your graphics are in uber slow because

115
00:06:34,340 --> 00:06:36,510
everything's being copied every frame

116
00:06:36,510 --> 00:06:40,230
stuff like that and they get channels to

117
00:06:40,230 --> 00:06:44,220
communicate with each other some of you

118
00:06:44,220 --> 00:06:46,080
are probably familiar with goes channels

119
00:06:46,080 --> 00:06:51,570
and the basic approach is not only

120
00:06:51,570 --> 00:06:57,120
modularity like NPM style also separate

121
00:06:57,120 --> 00:07:02,190
your modules in to their own runtime

122
00:07:02,190 --> 00:07:04,530
spaces so you're getting more of an

123
00:07:04,530 --> 00:07:09,260
erlang style thing or micro services and

124
00:07:09,260 --> 00:07:11,610
the moment you have something like that

125
00:07:11,610 --> 00:07:14,520
you can you're operating like your

126
00:07:14,520 --> 00:07:18,300
kernel provides no preconceived notion

127
00:07:18,300 --> 00:07:20,900
of how an operating system should work

128
00:07:20,900 --> 00:07:23,940
so if you want to if you want to file

129
00:07:23,940 --> 00:07:27,000
system that's cool you can do that I

130
00:07:27,000 --> 00:07:28,670
think file systems are just terrible

131
00:07:28,670 --> 00:07:33,720
databases I'm not going to have one if

132
00:07:33,720 --> 00:07:37,830
you want to have tcp/ip or x 25 or

133
00:07:37,830 --> 00:07:41,250
carrier pigeons right the thing for it

134
00:07:41,250 --> 00:07:44,850
I'm not too interested i want crazy

135
00:07:44,850 --> 00:07:46,980
anarchist decentralized networking

136
00:07:46,980 --> 00:07:49,740
protocols and i can build that because

137
00:07:49,740 --> 00:07:52,350
my operating system no longer has the

138
00:07:52,350 --> 00:07:54,180
preconceived notion of how that stuff

139
00:07:54,180 --> 00:07:56,690
should work

140
00:07:56,700 --> 00:08:04,380
and let's see what's fun too okay so if

141
00:08:04,380 --> 00:08:09,330
you if nobody if the operating system

142
00:08:09,330 --> 00:08:11,670
provides no preconceived notions of how

143
00:08:11,670 --> 00:08:14,250
things should work what you start having

144
00:08:14,250 --> 00:08:18,270
is the things that are compatible are

145
00:08:18,270 --> 00:08:19,680
just the things that talk through the

146
00:08:19,680 --> 00:08:22,680
same interfaces rust has a nice

147
00:08:22,680 --> 00:08:24,810
mechanism for defining interfaces

148
00:08:24,810 --> 00:08:26,610
unfortunately I don't have a slide for

149
00:08:26,610 --> 00:08:33,630
that but you Annie sell things is

150
00:08:33,630 --> 00:08:35,550
interoperable interoperable if they

151
00:08:35,550 --> 00:08:38,640
agree and that's pretty powerful that's

152
00:08:38,640 --> 00:08:41,700
how in p.m. works we all agree like on

153
00:08:41,700 --> 00:08:44,310
something like Cole back lost and

154
00:08:44,310 --> 00:08:48,120
everything works together for that or we

155
00:08:48,120 --> 00:08:52,530
all agree on function resurrect for our

156
00:08:52,530 --> 00:08:54,900
HTTP servers and everything works

157
00:08:54,900 --> 00:08:58,140
together for that and we see people

158
00:08:58,140 --> 00:09:01,680
innovating with these like we all use

159
00:09:01,680 --> 00:09:03,930
resurrect and next now for our

160
00:09:03,930 --> 00:09:06,480
middleware that's already like taking

161
00:09:06,480 --> 00:09:08,910
that and just everyone agreeing that

162
00:09:08,910 --> 00:09:13,040
that's a good idea we'll stick with it

163
00:09:13,040 --> 00:09:21,800
and that means you can write much much

164
00:09:21,800 --> 00:09:27,240
smaller modules because you just need an

165
00:09:27,240 --> 00:09:30,240
in an input interface that's agreed on

166
00:09:30,240 --> 00:09:35,310
an interface that's agreed on and that

167
00:09:35,310 --> 00:09:38,180
means i can write a thing that just

168
00:09:38,180 --> 00:09:40,470
figures out how to place looks on the

169
00:09:40,470 --> 00:09:45,330
disk it's the minimal basis you need for

170
00:09:45,330 --> 00:09:48,720
a file system but also for a database so

171
00:09:48,720 --> 00:09:50,490
you can have your file system and it can

172
00:09:50,490 --> 00:09:53,430
work on the same disk sharing space with

173
00:09:53,430 --> 00:09:58,980
the database but the database no longer

174
00:09:58,980 --> 00:10:01,590
is forced to be layered onto the file

175
00:10:01,590 --> 00:10:10,350
system which i find a terrible thing I

176
00:10:10,360 --> 00:10:13,010
yeah I didn't actually prepare well for

177
00:10:13,010 --> 00:10:19,050
this so

178
00:10:19,060 --> 00:10:22,190
english questions and questions at the

179
00:10:22,190 --> 00:10:29,330
end very questions edge yeah I'm not

180
00:10:29,330 --> 00:10:32,920
sure where to go from here uh must uh

181
00:10:32,920 --> 00:10:41,780
yeah right uh so my Colonels cold sulfur

182
00:10:41,780 --> 00:10:45,850
because it's a terrible chemistry joke

183
00:10:45,850 --> 00:10:48,650
but it's not public right now because

184
00:10:48,650 --> 00:10:50,780
the code is kind of terrible and it

185
00:10:50,780 --> 00:11:03,129
doesn't do much right now it pretty much

186
00:11:03,139 --> 00:11:06,319
like it doesn't even right to the screen

187
00:11:06,319 --> 00:11:07,819
right now because I'm hacking on the

188
00:11:07,819 --> 00:11:10,790
paging code and hardware sucks so right

189
00:11:10,790 --> 00:11:12,709
now it writes to the serial ports didn't

190
00:11:12,709 --> 00:11:20,359
not see it uh yeah it's also they you

191
00:11:20,359 --> 00:11:22,819
can write note bolts in an environment

192
00:11:22,819 --> 00:11:24,879
where you have literally no systems

193
00:11:24,879 --> 00:11:30,769
libraries or memory allocation writing

194
00:11:30,769 --> 00:11:35,699
memory allocators is actually hard uh

195
00:11:35,709 --> 00:11:39,949
right so what you want like sub slack

196
00:11:39,949 --> 00:11:44,839
talks about Mad Science no comfy you I

197
00:11:44,839 --> 00:11:46,429
don't know how many of you have seen the

198
00:11:46,429 --> 00:11:50,329
talk basically like mad science is what

199
00:11:50,329 --> 00:11:52,040
we do in node where we make small

200
00:11:52,040 --> 00:11:55,329
modules small packets of functionality

201
00:11:55,329 --> 00:11:58,579
that aren't prescriptive that can be

202
00:11:58,579 --> 00:12:00,589
recombined in new and surprising ways

203
00:12:00,589 --> 00:12:03,739
and that is mad science making new and

204
00:12:03,739 --> 00:12:06,980
crazy things combining modules pieces of

205
00:12:06,980 --> 00:12:09,319
functionality in ways you remember the

206
00:12:09,319 --> 00:12:10,759
authors are never envisioned before

207
00:12:10,759 --> 00:12:14,779
because this modularity allows for it so

208
00:12:14,779 --> 00:12:17,239
I'm hoping people will come up with some

209
00:12:17,239 --> 00:12:19,549
new crazy way of how operating systems

210
00:12:19,549 --> 00:12:21,799
will work and I'm just trying to provide

211
00:12:21,799 --> 00:12:25,399
base for them I'll write my own

212
00:12:25,399 --> 00:12:28,339
operating system on top of it because I

213
00:12:28,339 --> 00:12:30,799
might as well if I have a kernel that

214
00:12:30,799 --> 00:12:34,040
allows me to do that easily but I think

215
00:12:34,040 --> 00:12:36,230
everyone should come along and mix up

216
00:12:36,230 --> 00:12:39,619
their own operating system and figure

217
00:12:39,619 --> 00:12:41,209
out how their computer should work for

