1
00:00:05,470 --> 00:00:11,210

I really appreciated

2
00:00:11,220 --> 00:00:13,900
so javascript is the most popular

3
00:00:13,900 --> 00:00:15,430
programming language in the world today

4
00:00:15,430 --> 00:00:18,869
right and you're some of the most

5
00:00:18,869 --> 00:00:20,790
important people in this community

6
00:00:20,790 --> 00:00:23,260
influential sitting right here you know

7
00:00:23,260 --> 00:00:24,730
today in my talk I have three things to

8
00:00:24,730 --> 00:00:26,439
talk about I will talk a little bit

9
00:00:26,439 --> 00:00:29,710
about the journey of chakra so far I'll

10
00:00:29,710 --> 00:00:31,119
talk about something that's really

11
00:00:31,119 --> 00:00:33,100
exciting for us and hope you will find

12
00:00:33,100 --> 00:00:35,320
it exciting as well and last I'll kind

13
00:00:35,320 --> 00:00:37,270
of talk about the road ahead so you know

14
00:00:37,270 --> 00:00:38,680
those are the three things I'm going to

15
00:00:38,680 --> 00:00:41,379
go through in the talk today so back in

16
00:00:41,379 --> 00:00:43,900
2008 was when we decided to invest in a

17
00:00:43,900 --> 00:00:46,089
new JavaScript engine grounds up you

18
00:00:46,089 --> 00:00:48,519
know at that point in time the biggest

19
00:00:48,519 --> 00:00:50,260
context for applications in which

20
00:00:50,260 --> 00:00:51,970
JavaScript engines used to ship were

21
00:00:51,970 --> 00:00:53,979
browsers and we shipped chakra first in

22
00:00:53,979 --> 00:00:57,610
ie9 back in 2008 between then and now I

23
00:00:57,610 --> 00:01:00,519
you know chakra has made a very good

24
00:01:00,519 --> 00:01:03,190
progress and now with Microsoft edge you

25
00:01:03,190 --> 00:01:04,720
know we are leading we've evolved chakra

26
00:01:04,720 --> 00:01:06,280
we've optimized it to really run the

27
00:01:06,280 --> 00:01:08,229
modern web payloads you know very very

28
00:01:08,229 --> 00:01:11,619
efficiently and fast in terms of you

29
00:01:11,619 --> 00:01:12,940
know what chakra contains it has a

30
00:01:12,940 --> 00:01:15,250
unique architecture from the very

31
00:01:15,250 --> 00:01:17,230
beginning it starts with an interpreter

32
00:01:17,230 --> 00:01:19,420
you know for faster paid start ups and

33
00:01:19,420 --> 00:01:21,790
you know the interpreter also helps port

34
00:01:21,790 --> 00:01:23,860
the engine across architectures and

35
00:01:23,860 --> 00:01:26,590
across operating systems and then on the

36
00:01:26,590 --> 00:01:28,240
background thread it utilizes the power

37
00:01:28,240 --> 00:01:30,190
of the machine to have you know a

38
00:01:30,190 --> 00:01:32,260
multi-threaded multi-phased

39
00:01:32,260 --> 00:01:33,940
JIT compiler for extremely good

40
00:01:33,940 --> 00:01:35,650
throughput and it's comprised of a

41
00:01:35,650 --> 00:01:38,230
concurrent you know traditional marking

42
00:01:38,230 --> 00:01:40,810
sweep garbage collector which can do

43
00:01:40,810 --> 00:01:43,330
partial and time-based collections so

44
00:01:43,330 --> 00:01:45,940
that really helps things you know state

45
00:01:45,940 --> 00:01:48,700
height and be optimized but over the

46
00:01:48,700 --> 00:01:50,370
years right between 2000 and now

47
00:01:50,370 --> 00:01:52,780
JavaScript has gone way beyond the

48
00:01:52,780 --> 00:01:57,070
browser landscape today javascript

49
00:01:57,070 --> 00:01:59,190
powers a lot of server applications

50
00:01:59,190 --> 00:02:02,110
cloud services where the compute power

51
00:02:02,110 --> 00:02:04,990
or the computer sources available to

52
00:02:04,990 --> 00:02:07,300
those applications are really flexible

53
00:02:07,300 --> 00:02:10,899
right they could be you know huge - you

54
00:02:10,899 --> 00:02:12,550
know going to the Internet of Things

55
00:02:12,550 --> 00:02:14,319
where the computer resources are really

56
00:02:14,319 --> 00:02:17,470
really tiny during this time we've also

57
00:02:17,470 --> 00:02:19,510
optimized chakra and evolved chakra to

58
00:02:19,510 --> 00:02:21,249
power a bunch of these kind of scenarios

59
00:02:21,249 --> 00:02:22,920
outside of the browser today

60
00:02:22,920 --> 00:02:24,870
chakra powers you know all Universal

61
00:02:24,870 --> 00:02:27,239
windows apps across a whole range of

62
00:02:27,239 --> 00:02:28,920
hardware profiles where Windows 10 is

63
00:02:28,920 --> 00:02:32,040
supported chakra powered services such

64
00:02:32,040 --> 00:02:33,959
as a short DB which is a no sequel

65
00:02:33,959 --> 00:02:35,280
database katana

66
00:02:35,280 --> 00:02:38,069
outlook.com and last but not the least

67
00:02:38,069 --> 00:02:41,130
we brought you know the power of node to

68
00:02:41,130 --> 00:02:43,860
Windows 10 IOT by making node work with

69
00:02:43,860 --> 00:02:46,110
chakra during the Windows 10 timeframe

70
00:02:46,110 --> 00:02:49,250
so we have all of this stuff going on

71
00:02:49,250 --> 00:02:52,830
now when we started on chakra back in

72
00:02:52,830 --> 00:02:55,650
2008 we really had a goal about you know

73
00:02:55,650 --> 00:02:59,370
making sure that as a team we really

74
00:02:59,370 --> 00:03:00,799
start pushing the boundaries of

75
00:03:00,799 --> 00:03:03,630
interoperable language landscape you

76
00:03:03,630 --> 00:03:05,430
know to make sure that developers such

77
00:03:05,430 --> 00:03:07,410
as you can actually build great apps

78
00:03:07,410 --> 00:03:11,489
right and what does it take right to get

79
00:03:11,489 --> 00:03:13,799
there because the whole goal is like the

80
00:03:13,799 --> 00:03:14,970
platform needs to have those

81
00:03:14,970 --> 00:03:18,120
capabilities in an interoperable way so

82
00:03:18,120 --> 00:03:19,709
that we don't repeat any of the old

83
00:03:19,709 --> 00:03:24,780
stories so today you know chakra has the

84
00:03:24,780 --> 00:03:27,209
highest support for ECMO script six

85
00:03:27,209 --> 00:03:29,459
there's the chart on the left side of

86
00:03:29,459 --> 00:03:30,959
the screen where you can see like you

87
00:03:30,959 --> 00:03:32,489
know where chakra is but it's not only

88
00:03:32,489 --> 00:03:34,170
es6 you know we've already already

89
00:03:34,170 --> 00:03:36,030
started supporting a bunch of you know

90
00:03:36,030 --> 00:03:37,799
evolving or proposals for future

91
00:03:37,799 --> 00:03:39,269
versions of ECMO syrup like async

92
00:03:39,269 --> 00:03:41,310
functions etc but in terms of pushing

93
00:03:41,310 --> 00:03:43,290
Interop you know it's not only about

94
00:03:43,290 --> 00:03:45,930
implementing those features right as a

95
00:03:45,930 --> 00:03:48,030
team you know we've been active members

96
00:03:48,030 --> 00:03:50,329
of Ahmed tc39 that's the committee where

97
00:03:50,329 --> 00:03:54,450
you know Java Script evolves and right

98
00:03:54,450 --> 00:03:57,840
now you know we we are not only having

99
00:03:57,840 --> 00:03:59,970
we are not only championing a bunch of

100
00:03:59,970 --> 00:04:02,340
features in there but you know the

101
00:04:02,340 --> 00:04:04,950
editor for Echo script 2016 is from

102
00:04:04,950 --> 00:04:06,930
Microsoft we've been the editors of test

103
00:04:06,930 --> 00:04:09,420
262 since the very beginning in case

104
00:04:09,420 --> 00:04:11,549
you're not aware test 262 is the test

105
00:04:11,549 --> 00:04:13,829
the official test suite from equi that

106
00:04:13,829 --> 00:04:16,890
helps you know JavaScript engines and

107
00:04:16,890 --> 00:04:18,600
JavaScript implementations remain

108
00:04:18,600 --> 00:04:19,709
interoperable so that's the

109
00:04:19,709 --> 00:04:22,079
certification you know tool that we use

110
00:04:22,079 --> 00:04:24,750
to make sure that it is certified so you

111
00:04:24,750 --> 00:04:25,740
know that that's great like that's

112
00:04:25,740 --> 00:04:27,419
that's one of the other contributions

113
00:04:27,419 --> 00:04:29,490
you're making but you know just saying

114
00:04:29,490 --> 00:04:31,320
that leading leading in language

115
00:04:31,320 --> 00:04:33,090
implementation has its own pros and cons

116
00:04:33,090 --> 00:04:35,039
if you if I kind of talk about it from

117
00:04:35,039 --> 00:04:35,790
an injury

118
00:04:35,790 --> 00:04:37,680
in perspective right it has its own

119
00:04:37,680 --> 00:04:39,240
challenges sometimes we get ahead of

120
00:04:39,240 --> 00:04:41,910
ourselves with the speck right

121
00:04:41,910 --> 00:04:44,060
the speck changes you already you know

122
00:04:44,060 --> 00:04:46,260
ask the engineers to go develop

123
00:04:46,260 --> 00:04:47,610
something and then oops that speck

124
00:04:47,610 --> 00:04:49,200
changes all of that work kind of goes

125
00:04:49,200 --> 00:04:51,960
down but what it really helps with we

126
00:04:51,960 --> 00:04:53,820
found is like it helps us find the

127
00:04:53,820 --> 00:04:56,460
places where you know we can bring the

128
00:04:56,460 --> 00:04:58,110
data back to the committee in a very

129
00:04:58,110 --> 00:05:00,600
very timely fashion to say that hey you

130
00:05:00,600 --> 00:05:01,890
know you should not be evolving this

131
00:05:01,890 --> 00:05:03,390
particular feature this way because this

132
00:05:03,390 --> 00:05:05,250
is the impact on the web so you know

133
00:05:05,250 --> 00:05:06,900
let's have this feature implemented in

134
00:05:06,900 --> 00:05:08,700
the other way so getting that timely

135
00:05:08,700 --> 00:05:10,290
feedback timely data back to the

136
00:05:10,290 --> 00:05:12,090
committee as we are evolving is a very

137
00:05:12,090 --> 00:05:13,560
big thing and here are a couple of

138
00:05:13,560 --> 00:05:14,790
examples I'm not going to go into the

139
00:05:14,790 --> 00:05:16,530
details of them I think there were a

140
00:05:16,530 --> 00:05:18,030
couple of things that you know when we

141
00:05:18,030 --> 00:05:20,340
were evolving es6 we found hey there was

142
00:05:20,340 --> 00:05:21,870
a particular thing that broke her

143
00:05:21,870 --> 00:05:23,280
version of mootools and there was a

144
00:05:23,280 --> 00:05:24,990
particular thing that broke Oberon off

145
00:05:24,990 --> 00:05:27,090
you know Zepto now all of these things

146
00:05:27,090 --> 00:05:29,040
with the latest versions the frameworks

147
00:05:29,040 --> 00:05:30,810
keep evolving and keep fixing but people

148
00:05:30,810 --> 00:05:33,690
take dependencies on old frameworks and

149
00:05:33,690 --> 00:05:35,730
old versions of those frameworks which

150
00:05:35,730 --> 00:05:37,410
kind of breaks the web and we have to as

151
00:05:37,410 --> 00:05:39,660
a community as a you know member of the

152
00:05:39,660 --> 00:05:41,970
committee make sure that the entire web

153
00:05:41,970 --> 00:05:43,980
continues to run or the impact is

154
00:05:43,980 --> 00:05:48,600
minimal over the last you know year or

155
00:05:48,600 --> 00:05:50,190
so we started doing a bunch of

156
00:05:50,190 --> 00:05:52,290
partnerships to bring new things to

157
00:05:52,290 --> 00:05:53,850
chakra you know to work with partners

158
00:05:53,850 --> 00:05:55,620
one of the first things there that I'm

159
00:05:55,620 --> 00:05:57,840
going to talk about is as in Jas I hope

160
00:05:57,840 --> 00:06:00,140
how many of you know what Adam Jas is

161
00:06:00,140 --> 00:06:03,750
awesome so yes it's a pure superset of

162
00:06:03,750 --> 00:06:07,470
you know JavaScript you basically take C

163
00:06:07,470 --> 00:06:10,890
C++ code transpile it down to you know

164
00:06:10,890 --> 00:06:13,230
JavaScript and the best benefit of Azzam

165
00:06:13,230 --> 00:06:15,120
J's is the predictable performance it's

166
00:06:15,120 --> 00:06:17,280
all ahead of time compile you can run it

167
00:06:17,280 --> 00:06:19,500
in the browser at almost near native

168
00:06:19,500 --> 00:06:21,870
performances and the big thing here is

169
00:06:21,870 --> 00:06:23,310
that we brought this technology to

170
00:06:23,310 --> 00:06:25,230
chakra into Microsoft edge in

171
00:06:25,230 --> 00:06:27,330
partnership with Mozilla and this is

172
00:06:27,330 --> 00:06:29,370
again a new thing you know you would not

173
00:06:29,370 --> 00:06:31,470
expect me to come up here and talk about

174
00:06:31,470 --> 00:06:33,780
it but you know we partnered with them

175
00:06:33,780 --> 00:06:35,910
we kind of loved the technology and I

176
00:06:35,910 --> 00:06:38,010
think we could really expand that

177
00:06:38,010 --> 00:06:39,930
technology to a lot more scenarios and

178
00:06:39,930 --> 00:06:41,430
we are internally actually working on

179
00:06:41,430 --> 00:06:44,160
some of these stuff you know to talk

180
00:06:44,160 --> 00:06:46,080
about or bring the power of as MJS to

181
00:06:46,080 --> 00:06:48,000
the web platform ourselves so we

182
00:06:48,000 --> 00:06:49,389
recently announced that

183
00:06:49,389 --> 00:06:51,639
Azzam jess is now available by default

184
00:06:51,639 --> 00:06:54,639
in Microsoft edge so it's on by default

185
00:06:54,639 --> 00:06:56,919
and when we announced that recently with

186
00:06:56,919 --> 00:06:58,389
the November update we also kind of

187
00:06:58,389 --> 00:07:00,400
published a demo so you can hit that you

188
00:07:00,400 --> 00:07:04,120
know the tiny URL as some GS chess and

189
00:07:04,120 --> 00:07:05,860
go play with it and you can see there's

190
00:07:05,860 --> 00:07:07,750
a chess engine running with as MJS code

191
00:07:07,750 --> 00:07:09,669
and non as MGS cause it's the exact same

192
00:07:09,669 --> 00:07:11,770
code from which we transpile and you can

193
00:07:11,770 --> 00:07:15,069
see the differences in the same vein you

194
00:07:15,069 --> 00:07:17,080
know we've been partnering with Intel to

195
00:07:17,080 --> 00:07:19,599
bring sim D to JavaScript to all of you

196
00:07:19,599 --> 00:07:21,009
guys all so no sim D like I know for

197
00:07:21,009 --> 00:07:23,379
Adam she has a lot of hands went up okay

198
00:07:23,379 --> 00:07:25,810
not not much so sim D essentially stands

199
00:07:25,810 --> 00:07:27,219
for single instruction multiple data

200
00:07:27,219 --> 00:07:29,560
it's one of the proposals for ECMO

201
00:07:29,560 --> 00:07:32,650
script 2016 and what it does is exploits

202
00:07:32,650 --> 00:07:34,960
data parallelism using Hardware cap

203
00:07:34,960 --> 00:07:36,789
capabilities so imagine this is

204
00:07:36,789 --> 00:07:38,979
JavaScript

205
00:07:38,979 --> 00:07:41,590
you know exploiting the full potential

206
00:07:41,590 --> 00:07:44,620
of the hardware to accelerate the

207
00:07:44,620 --> 00:07:47,529
performance to take an example you know

208
00:07:47,529 --> 00:07:49,090
what simply provides assume that you

209
00:07:49,090 --> 00:07:51,099
have two vectors you know each of them

210
00:07:51,099 --> 00:07:52,599
has four elements and you were to add

211
00:07:52,599 --> 00:07:55,060
those two vectors in general you know

212
00:07:55,060 --> 00:07:57,909
the typical JavaScript world you know

213
00:07:57,909 --> 00:07:59,680
there will be four add operations that

214
00:07:59,680 --> 00:08:01,509
will happen but if it's MD you know

215
00:08:01,509 --> 00:08:03,190
simply looks at those two vectors and

216
00:08:03,190 --> 00:08:05,289
just with one operation it can add those

217
00:08:05,289 --> 00:08:07,659
two vectors together there are a lot of

218
00:08:07,659 --> 00:08:10,539
you know hardware devices out there and

219
00:08:10,539 --> 00:08:11,680
processors out there that already

220
00:08:11,680 --> 00:08:14,830
supports simply instruction sets so you

221
00:08:14,830 --> 00:08:16,659
know given that you guys have not seen

222
00:08:16,659 --> 00:08:20,020
it let me actually move back to a demo

223
00:08:20,020 --> 00:08:22,029
and show you a demo of assembly in

224
00:08:22,029 --> 00:08:28,180
action and how you know sembly is

225
00:08:28,180 --> 00:08:32,079
helpful and kind of is brings

226
00:08:32,079 --> 00:08:34,750
performance to the next level so here I

227
00:08:34,750 --> 00:08:36,459
have what I have here is it's a it's a

228
00:08:36,459 --> 00:08:39,000
demo you know it'll try to go towards

229
00:08:39,000 --> 00:08:52,800
let's see if I can

230
00:08:52,810 --> 00:08:55,200
you know I'm gonna start playing this

231
00:08:55,200 --> 00:08:57,790
and right now somebody is off so you

232
00:08:57,790 --> 00:08:59,350
know it starts with about sixty frames

233
00:08:59,350 --> 00:09:01,090
per second which can you can see at the

234
00:09:01,090 --> 00:09:03,700
top right corner and then the goal is it

235
00:09:03,700 --> 00:09:05,320
will try to keep you know getting these

236
00:09:05,320 --> 00:09:09,040
jumping birds into the demo as things

237
00:09:09,040 --> 00:09:12,010
proceed so now when I'm going to enable

238
00:09:12,010 --> 00:09:14,710
simply you know notice the jump in the

239
00:09:14,710 --> 00:09:16,540
frames per second and the number of

240
00:09:16,540 --> 00:09:19,089
birds that are in there so right now you

241
00:09:19,089 --> 00:09:20,589
know again it is you know we try to

242
00:09:20,589 --> 00:09:22,330
stabilize this demo at about thirty and

243
00:09:22,330 --> 00:09:25,000
if I switch sim Dion and the other thing

244
00:09:25,000 --> 00:09:26,290
you should notice is the number of birds

245
00:09:26,290 --> 00:09:28,450
that are flying around if I do simply

246
00:09:28,450 --> 00:09:30,790
off it jumped from thirty to about

247
00:09:30,790 --> 00:09:32,589
twenty-one and look at the number of

248
00:09:32,589 --> 00:09:34,300
birds that are in there it's gone down

249
00:09:34,300 --> 00:09:36,670
to four fifty four so this really tells

250
00:09:36,670 --> 00:09:38,440
that you know there was extra hardware

251
00:09:38,440 --> 00:09:40,480
capabilities on my machine that were not

252
00:09:40,480 --> 00:09:43,990
being utilized and Cindy is bringing or

253
00:09:43,990 --> 00:09:58,220
lighting up those hardware capabilities

254
00:09:58,230 --> 00:10:01,380
but that's all great you know I'm you

255
00:10:01,380 --> 00:10:03,269
know excited about the advancement that

256
00:10:03,269 --> 00:10:05,790
the team is making etc but the reason

257
00:10:05,790 --> 00:10:07,950
I'm here really is not to kind of only

258
00:10:07,950 --> 00:10:09,810
tell you about the story of you know how

259
00:10:09,810 --> 00:10:11,940
we brought chakra here it's really to

260
00:10:11,940 --> 00:10:14,579
tell you about you know the next step in

261
00:10:14,579 --> 00:10:15,269
our journey

262
00:10:15,269 --> 00:10:17,250
you know you might ask why now why I

263
00:10:17,250 --> 00:10:19,139
hear there I think three big reasons

264
00:10:19,139 --> 00:10:21,959
that I would say I mean Jaya stomp is a

265
00:10:21,959 --> 00:10:24,600
premier event you know with great

266
00:10:24,600 --> 00:10:27,300
community support the next big thing is

267
00:10:27,300 --> 00:10:30,089
that it's a lot of awesome things have

268
00:10:30,089 --> 00:10:31,709
been announced urges conf including

269
00:10:31,709 --> 00:10:33,899
things like note itself and third but

270
00:10:33,899 --> 00:10:37,230
not you know the least is this is last

271
00:10:37,230 --> 00:10:39,449
call it is special and that's why we

272
00:10:39,449 --> 00:10:42,420
wanted to come here and talk about you

273
00:10:42,420 --> 00:10:44,610
know our journey ahead so I think our

274
00:10:44,610 --> 00:10:45,800
you go already

275
00:10:45,800 --> 00:10:55,090
okay

276
00:10:55,100 --> 00:10:57,600
so I am very very happy to announce

277
00:10:57,600 --> 00:11:00,929
today the chakra is going open source

278
00:11:00,929 --> 00:11:07,619
you know over the years we've started

279
00:11:07,619 --> 00:11:09,720
partnering with a lot of people a lot of

280
00:11:09,720 --> 00:11:11,429
partners to do a bunch of things to

281
00:11:11,429 --> 00:11:14,009
either bring new features to JavaScript

282
00:11:14,009 --> 00:11:15,929
to innovate on top of a technology that

283
00:11:15,929 --> 00:11:19,199
we have built or you know even like give

284
00:11:19,199 --> 00:11:21,660
us feedback from the you know

285
00:11:21,660 --> 00:11:23,670
relationships we have with them I think

286
00:11:23,670 --> 00:11:25,649
it's a great opportunity to open it up

287
00:11:25,649 --> 00:11:27,329
and have a much more intimate

288
00:11:27,329 --> 00:11:30,179
relationship with all the developers you

289
00:11:30,179 --> 00:11:32,309
know of the community and all of you

290
00:11:32,309 --> 00:11:34,860
guys and see what you guys build with

291
00:11:34,860 --> 00:11:38,399
this so the sources for chakra core

292
00:11:38,399 --> 00:11:40,920
which is the core of the chakra engine

293
00:11:40,920 --> 00:11:42,749
would be available for the holidays in

294
00:11:42,749 --> 00:11:44,730
the month of January they will be

295
00:11:44,730 --> 00:11:46,829
available at github under an MIT license

296
00:11:46,829 --> 00:11:48,899
we would be accepting contributions for

297
00:11:48,899 --> 00:11:50,759
the community so when these sources are

298
00:11:50,759 --> 00:11:52,860
available I would really you know urge

299
00:11:52,860 --> 00:11:55,709
you guys to go browse these sources you

300
00:11:55,709 --> 00:11:57,660
know submit pull requests help us find

301
00:11:57,660 --> 00:11:59,910
issues you know embed the technology in

302
00:11:59,910 --> 00:12:04,769
your apps and innovate on top of it you

303
00:12:04,769 --> 00:12:25,000
might

304
00:12:25,010 --> 00:12:34,269
check check one two

305
00:12:34,279 --> 00:12:38,220
all right so you know what is chakra

306
00:12:38,220 --> 00:12:40,080
cool right chakra core is a fully

307
00:12:40,080 --> 00:12:42,120
functional JavaScript virtual machine

308
00:12:42,120 --> 00:12:44,190
you know it has the exact same

309
00:12:44,190 --> 00:12:46,140
characteristics and capabilities as

310
00:12:46,140 --> 00:12:48,360
chakra except for two key differences

311
00:12:48,360 --> 00:12:51,570
difference number one is that chakra

312
00:12:51,570 --> 00:12:54,060
core does not have bindings exposed to

313
00:12:54,060 --> 00:12:56,279
the browser and the you know Universal

314
00:12:56,279 --> 00:12:57,870
Windows platform both of those are very

315
00:12:57,870 --> 00:13:00,149
scenario specific very platform specific

316
00:13:00,149 --> 00:13:01,350
those are the two things that are not

317
00:13:01,350 --> 00:13:03,930
available the second thing is instead of

318
00:13:03,930 --> 00:13:06,360
using the old Khan diagnostic api's or

319
00:13:06,360 --> 00:13:07,770
the debugging API is that we currently

320
00:13:07,770 --> 00:13:11,640
have in chakra chakra core is gonna have

321
00:13:11,640 --> 00:13:13,920
these new modern diagnostic api's or

322
00:13:13,920 --> 00:13:15,570
modern debugging api's and the reason we

323
00:13:15,570 --> 00:13:17,100
are doing this is we want to make sure

324
00:13:17,100 --> 00:13:18,600
that even from a debugging perspective

325
00:13:18,600 --> 00:13:21,510
you know we can make chakra core

326
00:13:21,510 --> 00:13:23,550
interoperable in these debugging api is

327
00:13:23,550 --> 00:13:25,260
specifically interoperable across both

328
00:13:25,260 --> 00:13:28,440
tools as well as across different you

329
00:13:28,440 --> 00:13:29,910
know VMs and javascript engines out

330
00:13:29,910 --> 00:13:32,160
there so that's the difference so what

331
00:13:32,160 --> 00:13:33,240
do you see here in terms of the

332
00:13:33,240 --> 00:13:34,920
component there are two things that go

333
00:13:34,920 --> 00:13:37,290
away from here but it's essentially a

334
00:13:37,290 --> 00:13:39,360
fully functional you know virtual

335
00:13:39,360 --> 00:13:41,459
machine that exists there with that I

336
00:13:41,459 --> 00:13:42,810
actually want to show you a couple of

337
00:13:42,810 --> 00:13:45,450
demos to show you the power of you know

338
00:13:45,450 --> 00:13:48,390
chakra core what I have here in the

339
00:13:48,390 --> 00:13:50,339
first demo I have this candy robot right

340
00:13:50,339 --> 00:13:51,420
here

341
00:13:51,420 --> 00:13:54,300
candy is powered by Raspberry Pi 2 it's

342
00:13:54,300 --> 00:13:56,580
running Windows 10 IOT core on it and it

343
00:13:56,580 --> 00:13:59,670
has no js' running with chakra core it

344
00:13:59,670 --> 00:14:03,360
has 100 plus npm modules including Cylon

345
00:14:03,360 --> 00:14:06,720
4 mada serial port express all running

346
00:14:06,720 --> 00:14:09,329
on that machine very long way to say but

347
00:14:09,329 --> 00:14:10,650
the thing that I'm trying to convey is

348
00:14:10,650 --> 00:14:13,110
that job you know it's a fully featured

349
00:14:13,110 --> 00:14:16,020
VM which supports you know a great set

350
00:14:16,020 --> 00:14:19,110
of node modules the second demo that I'm

351
00:14:19,110 --> 00:14:20,550
going to show you is going to be about

352
00:14:20,550 --> 00:14:22,110
time travel debugging you know

353
00:14:22,110 --> 00:14:24,779
developers typically in JavaScript only

354
00:14:24,779 --> 00:14:26,700
have a way to go forward but you know we

355
00:14:26,700 --> 00:14:29,100
are working on this new innovation in

356
00:14:29,100 --> 00:14:30,660
very close collaboration with Microsoft

357
00:14:30,660 --> 00:14:31,980
research to see how

358
00:14:31,980 --> 00:14:33,720
we can really advance the state of the

359
00:14:33,720 --> 00:14:36,300
art of JavaScript debugging going ahead

360
00:14:36,300 --> 00:14:53,810
so let's let's hit the demos

361
00:14:53,820 --> 00:14:56,400
so what I what I have here with me is

362
00:14:56,400 --> 00:14:58,260
there are two controls here so let me

363
00:14:58,260 --> 00:14:59,580
let me explain you the setup I have

364
00:14:59,580 --> 00:15:01,800
candy sitting right here which is

365
00:15:01,800 --> 00:15:03,750
controlled by this first you know

366
00:15:03,750 --> 00:15:05,910
control panel here and then I have

367
00:15:05,910 --> 00:15:08,340
another node server running on my

368
00:15:08,340 --> 00:15:11,910
machine in a VM out here what happens is

369
00:15:11,910 --> 00:15:13,920
candy has a light sensor on it as I move

370
00:15:13,920 --> 00:15:16,320
candy around candy goes and you know

371
00:15:16,320 --> 00:15:17,970
captures the light intensity at a given

372
00:15:17,970 --> 00:15:20,460
point in time and uploads it to the the

373
00:15:20,460 --> 00:15:22,380
central node server the second control

374
00:15:22,380 --> 00:15:25,260
that I have here and then you know we

375
00:15:25,260 --> 00:15:27,180
can go to the second server and see like

376
00:15:27,180 --> 00:15:28,590
hey how the average brightness is

377
00:15:28,590 --> 00:15:30,330
changing what data are you getting and

378
00:15:30,330 --> 00:15:32,220
then we will go into TDD from there so

379
00:15:32,220 --> 00:15:34,010
time-traveled a bugging from there so

380
00:15:34,010 --> 00:15:53,350
let's see let's ensure I have

381
00:15:53,360 --> 00:15:57,739
all right so Danny go forward what you

382
00:15:57,739 --> 00:15:59,389
would notice is you know it kind of

383
00:15:59,389 --> 00:16:02,629
moved ahead and if you look at my

384
00:16:02,629 --> 00:16:05,149
control panel which is on the you know

385
00:16:05,149 --> 00:16:08,660
left screen here all right for you guys

386
00:16:08,660 --> 00:16:10,429
you can see that there is this light

387
00:16:10,429 --> 00:16:13,999
intensity 6:21 that it uploaded try it

388
00:16:13,999 --> 00:16:15,920
one more time let's see it's 6:14 and

389
00:16:15,920 --> 00:16:18,309
support of course it's the same you know

390
00:16:18,309 --> 00:16:20,509
light thing that is coming here let me

391
00:16:20,509 --> 00:16:27,319
cover this guy a little bit and right

392
00:16:27,319 --> 00:16:29,029
now what's happening is if I go look at

393
00:16:29,029 --> 00:16:31,519
the average brightness right so see that

394
00:16:31,519 --> 00:16:33,439
the brightness is changing every time so

395
00:16:33,439 --> 00:16:34,759
that data is actually flowing to my

396
00:16:34,759 --> 00:16:38,689
second server which is you know and now

397
00:16:38,689 --> 00:16:40,579
you know once now that I'm done with

398
00:16:40,579 --> 00:16:43,040
this let me actually go and take a look

399
00:16:43,040 --> 00:16:45,949
at exploration time of like how much

400
00:16:45,949 --> 00:17:10,069
time did it take me you work with Andy

401
00:17:10,079 --> 00:17:12,970
so then I hit the exploration time

402
00:17:12,970 --> 00:17:14,709
button I already have a breakpoint set

403
00:17:14,709 --> 00:17:16,299
up in my second half you know

404
00:17:16,299 --> 00:17:17,770
traditionally JavaScript is single

405
00:17:17,770 --> 00:17:19,630
threaded and synchronous in nature you

406
00:17:19,630 --> 00:17:21,459
know if you set breakpoints and we the

407
00:17:21,459 --> 00:17:24,309
only way to do is keep going ahead with

408
00:17:24,309 --> 00:17:25,600
time travel debugging there are these

409
00:17:25,600 --> 00:17:27,069
two extra controls which can actually

410
00:17:27,069 --> 00:17:29,110
take you said you know move back now

411
00:17:29,110 --> 00:17:30,970
what I have here is a demo debugger can

412
00:17:30,970 --> 00:17:32,380
you can you guys in the back see the

413
00:17:32,380 --> 00:17:35,289
screen or you want me to make it a

414
00:17:35,289 --> 00:17:42,020
little bigger

415
00:17:42,030 --> 00:17:46,210
is this okay all right so I have a

416
00:17:46,210 --> 00:17:49,030
breakpoint set up here and I will start

417
00:17:49,030 --> 00:17:51,370
moving back in time in code so I'm gonna

418
00:17:51,370 --> 00:17:53,080
instead of stepping forward

419
00:17:53,080 --> 00:17:56,110
I'll start stepping reverse so the first

420
00:17:56,110 --> 00:17:58,809
thing you'll notice is the response code

421
00:17:58,809 --> 00:18:02,049
here was 200 and it moved to let me go

422
00:18:02,049 --> 00:18:03,970
ahead so when we started the response

423
00:18:03,970 --> 00:18:07,230
code was 200 and as I start moving back

424
00:18:07,230 --> 00:18:10,360
see that the response code changed I'm

425
00:18:10,360 --> 00:18:12,250
gonna go keep stepping back a few more

426
00:18:12,250 --> 00:18:16,150
times so there's a switch statement it

427
00:18:16,150 --> 00:18:17,799
came out of this you know switch

428
00:18:17,799 --> 00:18:18,940
statement which is great because you

429
00:18:18,940 --> 00:18:20,500
coming out of a control flow block there

430
00:18:20,500 --> 00:18:22,720
and now here see look there's this time

431
00:18:22,720 --> 00:18:23,980
stamp right there's a notion of time

432
00:18:23,980 --> 00:18:25,799
stand that we took the time stamp and

433
00:18:25,799 --> 00:18:28,510
keep a watch on the variable here now

434
00:18:28,510 --> 00:18:30,460
look that when I kind of replay this

435
00:18:30,460 --> 00:18:33,280
it'll exactly play the same timestamp to

436
00:18:33,280 --> 00:18:34,870
show you that it's actually capturing

437
00:18:34,870 --> 00:18:36,400
that data and replaying stuff like

438
00:18:36,400 --> 00:18:52,580
calling you know new dot new date

439
00:18:52,590 --> 00:18:55,409
let's give it another try I think I

440
00:18:55,409 --> 00:18:58,559
messed up the control here so this is

441
00:18:58,559 --> 00:19:28,230
the fun of playing with prototypes

442
00:19:28,240 --> 00:19:29,990
all right

443
00:19:29,990 --> 00:19:34,220
I hope I can show you so the response

444
00:19:34,220 --> 00:19:36,950
core changes I'm gonna go back a couple

445
00:19:36,950 --> 00:19:42,170
of more times and what you see here is

446
00:19:42,170 --> 00:19:43,970
VR at that time stamp and now I'm gonna

447
00:19:43,970 --> 00:19:47,300
you know go play this so the time stamp

448
00:19:47,300 --> 00:19:49,850
right now is twenty sixty three one go

449
00:19:49,850 --> 00:19:56,690
back come forward 20 63 so exactly same

450
00:19:56,690 --> 00:20:00,380
time stamp being replayed I'll keep

451
00:20:00,380 --> 00:20:02,240
stepping back but you know the

452
00:20:02,240 --> 00:20:03,470
interesting thing would be like here

453
00:20:03,470 --> 00:20:04,790
there was another callback that came

454
00:20:04,790 --> 00:20:06,590
right I was kind of talking about the

455
00:20:06,590 --> 00:20:08,570
intensity so time travel debugging also

456
00:20:08,570 --> 00:20:09,980
brings you the ability to go to the

457
00:20:09,980 --> 00:20:11,420
previous callback think of previous

458
00:20:11,420 --> 00:20:13,970
promise etc so you know I click the

459
00:20:13,970 --> 00:20:15,590
other button so I'm in the you know

460
00:20:15,590 --> 00:20:17,390
handle request again and I'm gonna keep

461
00:20:17,390 --> 00:20:20,090
going down you know a few more times to

462
00:20:20,090 --> 00:20:22,730
see that it's actually the right thing

463
00:20:22,730 --> 00:20:24,170
so I come back to the switch statement

464
00:20:24,170 --> 00:20:26,330
and this time you see that I got into

465
00:20:26,330 --> 00:20:27,440
the case which is talking about

466
00:20:27,440 --> 00:20:29,300
brightness rather than the exploration

467
00:20:29,300 --> 00:20:32,990
time and keep going ahead you know now

468
00:20:32,990 --> 00:20:34,370
we are in this loop where we just

469
00:20:34,370 --> 00:20:35,960
calculating the sum of the total

470
00:20:35,960 --> 00:20:41,690
brightness so keep a watch on this so

471
00:20:41,690 --> 00:20:44,990
the first data point we get is 80 let's

472
00:20:44,990 --> 00:20:46,880
go through the loop it's it's 580 and

473
00:20:46,880 --> 00:20:48,530
then you know now if I step start

474
00:20:48,530 --> 00:20:50,210
stepping back it goes back to the exact

475
00:20:50,210 --> 00:20:52,100
same value so that's just to show you

476
00:20:52,100 --> 00:20:53,960
the power now this is very early bits

477
00:20:53,960 --> 00:20:56,270
you know early innovation but we really

478
00:20:56,270 --> 00:20:58,309
hope to get it you know to a much better

479
00:20:58,309 --> 00:21:00,500
state to complete it and bring that

480
00:21:00,500 --> 00:21:03,200
innovation to the JavaScript community

481
00:21:03,200 --> 00:21:13,990
and to the developers

482
00:21:14,000 --> 00:21:16,010
so with that you know I talked about I

483
00:21:16,010 --> 00:21:17,720
showed you two demos the first one

484
00:21:17,720 --> 00:21:20,540
running you know Windows 10 IOT with

485
00:21:20,540 --> 00:21:22,490
Nord and chakracore on this machine and

486
00:21:22,490 --> 00:21:24,200
the second one actually showing you some

487
00:21:24,200 --> 00:21:26,180
of the innovation in terms of you know

488
00:21:26,180 --> 00:21:28,340
time travel debugging which is going to

489
00:21:28,340 --> 00:21:29,990
hopefully change the state of the art of

490
00:21:29,990 --> 00:21:31,910
JavaScript debugging to the community

491
00:21:31,910 --> 00:21:34,310
now I given that I was talking to you

492
00:21:34,310 --> 00:21:36,350
know talking about node I really wanted

493
00:21:36,350 --> 00:21:37,490
to bring somebody from the community

494
00:21:37,490 --> 00:21:39,860
over and we asked Michael to come join

495
00:21:39,860 --> 00:21:40,460
us

496
00:21:40,460 --> 00:21:42,170
you know Michael's from northbound ation

497
00:21:42,170 --> 00:21:43,610
he's been with the node community ever

498
00:21:43,610 --> 00:21:45,590
since it was formed and I just wanted to

499
00:21:45,590 --> 00:21:47,480
bring him over and ask him like hey what

500
00:21:47,480 --> 00:21:50,150
does he really you know feel about the

501
00:21:50,150 --> 00:21:51,470
announcement that we just made today and

502
00:21:51,470 --> 00:21:53,930
some of the demos we showed so hey

503
00:21:53,930 --> 00:21:58,710
everybody

504
00:21:58,720 --> 00:22:01,340
yeah so when when node was first

505
00:22:01,340 --> 00:22:05,300
released in 2009 at JS conf people like

506
00:22:05,300 --> 00:22:06,830
just couldn't believe how fast it was

507
00:22:06,830 --> 00:22:08,480
especially compared to all the other

508
00:22:08,480 --> 00:22:09,680
languages were coming out at the time

509
00:22:09,680 --> 00:22:11,660
and this because we we weren't starting

510
00:22:11,660 --> 00:22:13,520
over from scratch with a brand-new VM

511
00:22:13,520 --> 00:22:15,170
that hadn't been optimized we had a VM

512
00:22:15,170 --> 00:22:18,620
in v8 and it was part of this you know

513
00:22:18,620 --> 00:22:20,600
friendly competition that was happening

514
00:22:20,600 --> 00:22:22,430
in the in the browser landscape where

515
00:22:22,430 --> 00:22:23,840
everybody was leapfrogging each other in

516
00:22:23,840 --> 00:22:25,460
terms of performance and that's how

517
00:22:25,460 --> 00:22:27,880
we've gotten such fast VMS in general

518
00:22:27,880 --> 00:22:30,410
and so it's really exciting to see node

519
00:22:30,410 --> 00:22:32,810
now becoming a platform where multiple

520
00:22:32,810 --> 00:22:34,940
VMs can continue to duke it out and

521
00:22:34,940 --> 00:22:36,800
continue to leapfrog each other in terms

522
00:22:36,800 --> 00:22:39,860
of performance and so the great thing

523
00:22:39,860 --> 00:22:41,420
about this isn't just that you'll be

524
00:22:41,420 --> 00:22:44,900
able to use chakra in node and in your

525
00:22:44,900 --> 00:22:46,760
notifications but also that everybody's

526
00:22:46,760 --> 00:22:48,350
gonna get a faster VM out of this as

527
00:22:48,350 --> 00:22:49,850
soon as we start doing comparisons right

528
00:22:49,850 --> 00:22:51,200
regardless of which one you're gonna use

529
00:22:51,200 --> 00:22:52,970
they're all just gonna get faster so

530
00:22:52,970 --> 00:22:53,900
this is just amazing

531
00:22:53,900 --> 00:22:57,050
and know the story you know today is

532
00:22:57,050 --> 00:22:58,610
looking more and more like the story of

533
00:22:58,610 --> 00:23:00,170
the web we just we end up going

534
00:23:00,170 --> 00:23:02,000
everywhere JavaScript ends up taking

535
00:23:02,000 --> 00:23:03,740
over everything and part of taking over

536
00:23:03,740 --> 00:23:06,530
everything is being on multiple VMs it's

537
00:23:06,530 --> 00:23:08,030
being compiled in multiple languages

538
00:23:08,030 --> 00:23:09,230
being compiled then they'll do it

539
00:23:09,230 --> 00:23:11,780
sometimes because that's just what you

540
00:23:11,780 --> 00:23:13,520
have to do to really get everywhere so

541
00:23:13,520 --> 00:23:14,570
this is like a really really exciting

542
00:23:14,570 --> 00:23:17,090
exciting announcement and also just

543
00:23:17,090 --> 00:23:18,590
Microsoft is killing it with open-source

544
00:23:18,590 --> 00:23:21,200
lately this is awesome like it's all the

545
00:23:21,200 --> 00:23:23,300
stuff on github and like close to your

546
00:23:23,300 --> 00:23:24,800
code it was amazing so just give it up

547
00:23:24,800 --> 00:23:26,970
for this guy man

548
00:23:26,970 --> 00:23:30,160
thanks thanks Michael so uh you know

549
00:23:30,160 --> 00:23:32,169
Michael did talk about you know one

550
00:23:32,169 --> 00:23:33,220
interesting thing he did talk about

551
00:23:33,220 --> 00:23:35,320
performance and I know I did not cover

552
00:23:35,320 --> 00:23:37,540
performance in my talk till now so let's

553
00:23:37,540 --> 00:23:38,919
let's move and talk a little bit about

554
00:23:38,919 --> 00:23:41,320
that before we kind of wrap up so ever

555
00:23:41,320 --> 00:23:43,360
since we started working on chakra our

556
00:23:43,360 --> 00:23:45,070
goal has been to enable developers to

557
00:23:45,070 --> 00:23:46,990
deliver consistently delightful user

558
00:23:46,990 --> 00:23:48,820
experiences across a range of form

559
00:23:48,820 --> 00:23:50,770
factors right I mean it's it's a whole

560
00:23:50,770 --> 00:23:52,630
spectrum and it's all about the user

561
00:23:52,630 --> 00:23:54,490
experiences that you could deliver and

562
00:23:54,490 --> 00:23:56,590
ever since we started chakra we really

563
00:23:56,590 --> 00:23:58,570
have you know our goal has been to go

564
00:23:58,570 --> 00:24:01,030
look at real world stuff you know the

565
00:24:01,030 --> 00:24:02,710
stuff that you build and see how we can

566
00:24:02,710 --> 00:24:04,660
extract the most juice out of you know

567
00:24:04,660 --> 00:24:06,910
the stuff you build and essentially make

568
00:24:06,910 --> 00:24:09,250
the VM really really go fast on that

569
00:24:09,250 --> 00:24:12,130
stuff you know I talked about you know

570
00:24:12,130 --> 00:24:14,919
working with some of the you know select

571
00:24:14,919 --> 00:24:18,790
partners to advance the landscape of the

572
00:24:18,790 --> 00:24:22,059
language itself recently with Microsoft

573
00:24:22,059 --> 00:24:23,890
edge and with Windows 10 in general I

574
00:24:23,890 --> 00:24:24,970
think we've started listening to

575
00:24:24,970 --> 00:24:27,160
developers a lot more we've started

576
00:24:27,160 --> 00:24:28,570
listening to customers a lot more in

577
00:24:28,570 --> 00:24:30,429
Microsoft edge if you go there's a way

578
00:24:30,429 --> 00:24:32,980
to kind of go and just send feedback so

579
00:24:32,980 --> 00:24:34,840
here's one of the you know customer

580
00:24:34,840 --> 00:24:37,030
feedbacks that arrived in our mailbox

581
00:24:37,030 --> 00:24:39,100
one day they were like Heather's this

582
00:24:39,100 --> 00:24:41,380
YouTube html5 player on a particular

583
00:24:41,380 --> 00:24:43,600
gaming site that's that's behaving

584
00:24:43,600 --> 00:24:46,270
slowly or that's running slowly and then

585
00:24:46,270 --> 00:24:48,250
when we started looking at it we said

586
00:24:48,250 --> 00:24:49,630
hey there's a pattern here that we could

587
00:24:49,630 --> 00:24:50,950
identify I think there's something

588
00:24:50,950 --> 00:24:52,570
happening in the JED it's kind of really

589
00:24:52,570 --> 00:24:54,669
you know essentially what is happening

590
00:24:54,669 --> 00:24:56,110
is there they were calling a caller

591
00:24:56,110 --> 00:24:59,110
which made sure that I mean which made

592
00:24:59,110 --> 00:25:02,110
the VM actually virtually unwind the

593
00:25:02,110 --> 00:25:04,419
stack while we were loading the page we

594
00:25:04,419 --> 00:25:07,000
took that code example we kind of ran it

595
00:25:07,000 --> 00:25:09,429
through you know some of the other top

596
00:25:09,429 --> 00:25:11,350
web sites and we saw that you know it

597
00:25:11,350 --> 00:25:13,600
was not that it is extremely common but

598
00:25:13,600 --> 00:25:15,040
it was there were still occurrences of

599
00:25:15,040 --> 00:25:16,540
those kind of things you know what was

600
00:25:16,540 --> 00:25:18,580
happening in the engine is when you have

601
00:25:18,580 --> 00:25:20,200
JIT compilers and you have super

602
00:25:20,200 --> 00:25:21,669
optimized at compilers they create

603
00:25:21,669 --> 00:25:24,340
something called bailout and bailout in

604
00:25:24,340 --> 00:25:26,470
or bailout info is something that

605
00:25:26,470 --> 00:25:27,460
happens that you know when you're

606
00:25:27,460 --> 00:25:29,169
compiling and JIT compiling JavaScript

607
00:25:29,169 --> 00:25:31,780
code anything can change these JIT

608
00:25:31,780 --> 00:25:33,460
compilers rely on the bailout

609
00:25:33,460 --> 00:25:35,710
information to say that if any of the

610
00:25:35,710 --> 00:25:37,390
assumption I made about a type goes

611
00:25:37,390 --> 00:25:39,850
wrong I need to use this data so that

612
00:25:39,850 --> 00:25:44,160
there is no hitch in the perceived user

613
00:25:44,160 --> 00:25:46,030
functionality of the app that I'm

614
00:25:46,030 --> 00:25:47,380
writing so essentially if something goes

615
00:25:47,380 --> 00:25:49,750
wrong we unwind from the chit we use

616
00:25:49,750 --> 00:25:51,370
this bailout data to make sure that the

617
00:25:51,370 --> 00:25:53,590
execution just continues right so one of

618
00:25:53,590 --> 00:25:59,799
the things we notice was in terms of the

619
00:25:59,799 --> 00:26:02,200
bailout info you know that was a little

620
00:26:02,200 --> 00:26:06,360
slow and we were essentially relying on

621
00:26:06,360 --> 00:26:09,549
the OS api's to do the virtual unwind

622
00:26:09,549 --> 00:26:12,700
but what we realized was like you know

623
00:26:12,700 --> 00:26:15,510
doing calling the OS api's was actually

624
00:26:15,510 --> 00:26:18,520
you know extremely rich in terms of the

625
00:26:18,520 --> 00:26:22,299
data I provided but was not giving us we

626
00:26:22,299 --> 00:26:25,530
didn't need all of that API information

627
00:26:25,530 --> 00:26:28,240
for those unwinds so we essentially what

628
00:26:28,240 --> 00:26:30,190
we ended up doing is we linked we

629
00:26:30,190 --> 00:26:32,500
created rbb chains linked them up and we

630
00:26:32,500 --> 00:26:34,900
use them so you know there's one part

631
00:26:34,900 --> 00:26:36,520
about bailout data I think I spoke a

632
00:26:36,520 --> 00:26:38,169
little bit ahead I'll come to that but

633
00:26:38,169 --> 00:26:40,270
this one was really about you know this

634
00:26:40,270 --> 00:26:42,039
optimization was really to find out like

635
00:26:42,039 --> 00:26:43,809
hey how you were doing stack walking in

636
00:26:43,809 --> 00:26:45,909
the engine and instead of relying on the

637
00:26:45,909 --> 00:26:48,220
OS API which provides you much richer

638
00:26:48,220 --> 00:26:50,799
much you know fuller stuff how do you

639
00:26:50,799 --> 00:26:52,600
actually make it much faster so we

640
00:26:52,600 --> 00:26:54,220
started using these rbp chains and the

641
00:26:54,220 --> 00:26:55,900
impact of this on some of the real web

642
00:26:55,900 --> 00:26:57,700
sites was you know about 40 to 50

643
00:26:57,700 --> 00:26:59,200
percent better page load performance

644
00:26:59,200 --> 00:27:01,929
that's huge that's huge the next thing I

645
00:27:01,929 --> 00:27:03,850
think one of the things we always keep

646
00:27:03,850 --> 00:27:06,070
doing is we always keep optimizing the

647
00:27:06,070 --> 00:27:08,380
engine for a bunch of things startup

648
00:27:08,380 --> 00:27:11,169
performance throughput scalability and

649
00:27:11,169 --> 00:27:12,970
even to use the full power of the

650
00:27:12,970 --> 00:27:14,890
hardware that stuff is running on so the

651
00:27:14,890 --> 00:27:16,240
couple of things that we did in the last

652
00:27:16,240 --> 00:27:18,070
one year we you know created a new

653
00:27:18,070 --> 00:27:20,710
simple JIT here a simple jet allows it's

654
00:27:20,710 --> 00:27:23,230
not fully optimizing JIT but it helps

655
00:27:23,230 --> 00:27:24,760
you you know get it get from the

656
00:27:24,760 --> 00:27:26,080
interpreted code through the JIT code

657
00:27:26,080 --> 00:27:28,270
much faster we did multiple concurrent

658
00:27:28,270 --> 00:27:30,520
choose so what it implies is before we

659
00:27:30,520 --> 00:27:32,200
just had one concurrent JIT thread or

660
00:27:32,200 --> 00:27:34,150
one towel JIT thread running but now

661
00:27:34,150 --> 00:27:36,280
based on the processor that it is

662
00:27:36,280 --> 00:27:38,530
running on you know octa-core zon phones

663
00:27:38,530 --> 00:27:40,210
are not uncommon these days so there's a

664
00:27:40,210 --> 00:27:43,000
lot of untapped hardware potential that

665
00:27:43,000 --> 00:27:45,039
you could utilize so chakra can now go

666
00:27:45,039 --> 00:27:48,190
and you know spawn multiple concurrent

667
00:27:48,190 --> 00:27:50,860
rate threads and the impact of this like

668
00:27:50,860 --> 00:27:52,390
if I'm just going to talk about from a

669
00:27:52,390 --> 00:27:52,710
true

670
00:27:52,710 --> 00:27:54,809
perspective the typescript compilers

671
00:27:54,809 --> 00:27:56,250
throughput you know it's it's a

672
00:27:56,250 --> 00:27:58,200
JavaScript heavy payload improved by

673
00:27:58,200 --> 00:28:01,710
about 30% which is again huge and last

674
00:28:01,710 --> 00:28:03,450
but not the lead like it's all about

675
00:28:03,450 --> 00:28:05,429
staying lean you know those two came

676
00:28:05,429 --> 00:28:07,470
directly from the browser those two you

677
00:28:07,470 --> 00:28:09,299
know points I talked about but I told

678
00:28:09,299 --> 00:28:10,919
you we've started optimizing for things

679
00:28:10,919 --> 00:28:12,570
like Cortana Cortana needs to runs

680
00:28:12,570 --> 00:28:14,610
across a variety of devices from high

681
00:28:14,610 --> 00:28:16,380
profile devices to extremely low profile

682
00:28:16,380 --> 00:28:18,299
devices always on always there with you

683
00:28:18,299 --> 00:28:20,399
one of the things we found was you know

684
00:28:20,399 --> 00:28:22,740
the memory footprint was huge or there

685
00:28:22,740 --> 00:28:24,690
was one particular issue where the

686
00:28:24,690 --> 00:28:26,909
memory footprint was big we took that in

687
00:28:26,909 --> 00:28:29,039
for we you know again went back to the

688
00:28:29,039 --> 00:28:31,500
web we found a pattern and we kind of

689
00:28:31,500 --> 00:28:34,020
say sadly let's just go get that data

690
00:28:34,020 --> 00:28:35,820
and this is where the bailout thing

691
00:28:35,820 --> 00:28:38,130
comes which is you know what we saw was

692
00:28:38,130 --> 00:28:40,440
for about 15 MB of jittered code that we

693
00:28:40,440 --> 00:28:43,020
were producing the engine was producing

694
00:28:43,020 --> 00:28:45,360
about 50 MB of this bailout information

695
00:28:45,360 --> 00:28:48,240
right that's a lot of bailout data that

696
00:28:48,240 --> 00:28:51,299
you're producing so we did work during

697
00:28:51,299 --> 00:28:53,279
the last three months to make sure that

698
00:28:53,279 --> 00:28:55,559
we really optimized it we compress it we

699
00:28:55,559 --> 00:28:57,690
share data structures there and we were

700
00:28:57,690 --> 00:29:00,450
able to compress you know the bailout

701
00:29:00,450 --> 00:29:03,720
information from 50 MB to about 18 MB

702
00:29:03,720 --> 00:29:05,159
that's about one third of the memory

703
00:29:05,159 --> 00:29:07,710
usage that it was already using and all

704
00:29:07,710 --> 00:29:09,720
of these things are applicable with

705
00:29:09,720 --> 00:29:11,909
chakra core available across you know

706
00:29:11,909 --> 00:29:14,190
all the hardware profile so it's great

707
00:29:14,190 --> 00:29:16,919
from a user perspective but whenever we

708
00:29:16,919 --> 00:29:18,450
talk about performance you know people

709
00:29:18,450 --> 00:29:20,070
do come back and ask us like hey how are

710
00:29:20,070 --> 00:29:21,480
you doing on benchmarks because that's

711
00:29:21,480 --> 00:29:22,970
one of these things you know I'm

712
00:29:22,970 --> 00:29:25,740
personally and not a huge fan of it but

713
00:29:25,740 --> 00:29:27,990
all I'm gonna say here is that it's

714
00:29:27,990 --> 00:29:29,820
great to see that we are also leading on

715
00:29:29,820 --> 00:29:31,830
benchmarks we don't have any benchmark

716
00:29:31,830 --> 00:29:34,049
of our own you know here are two key

717
00:29:34,049 --> 00:29:35,429
benchmarks like there's octane from

718
00:29:35,429 --> 00:29:36,929
Google and Jetstream from Apple both

719
00:29:36,929 --> 00:29:39,360
from are competing you know browser

720
00:29:39,360 --> 00:29:41,549
vendors in chakra today is winning on

721
00:29:41,549 --> 00:29:44,760
both of them in the market so to sum it

722
00:29:44,760 --> 00:29:46,649
up you know it's a it's a it's a great

723
00:29:46,649 --> 00:29:48,960
journey we are on and I'm really excited

724
00:29:48,960 --> 00:29:50,909
and looking forward to chakra core going

725
00:29:50,909 --> 00:29:52,950
open and you know the sources becoming

726
00:29:52,950 --> 00:29:54,720
available post holidays in the month of

727
00:29:54,720 --> 00:29:57,270
January I think once the sources become

728
00:29:57,270 --> 00:29:58,980
available some of the things that we

729
00:29:58,980 --> 00:30:00,659
have on our roadmap I think one of the

730
00:30:00,659 --> 00:30:02,490
first things is you know we would want

731
00:30:02,490 --> 00:30:04,110
to submit a pull request back to Nord

732
00:30:04,110 --> 00:30:06,090
main line with chakracore

733
00:30:06,090 --> 00:30:07,830
one of the other things we want to do is

734
00:30:07,830 --> 00:30:09,330
you want to keep working on those intro

735
00:30:09,330 --> 00:30:11,700
interoperable debugging api's so that

736
00:30:11,700 --> 00:30:13,799
you know we can even power that you want

737
00:30:13,799 --> 00:30:15,929
to you know bring time travel debugging

738
00:30:15,929 --> 00:30:17,580
to a more production quality so you did

739
00:30:17,580 --> 00:30:19,380
CI you know ran into a hitch and that's

740
00:30:19,380 --> 00:30:20,610
because you know you're solely in the

741
00:30:20,610 --> 00:30:21,899
prototype but I do want to show it to

742
00:30:21,899 --> 00:30:23,909
you because you know we advancing it in

743
00:30:23,909 --> 00:30:25,980
a very different way so that's the next

744
00:30:25,980 --> 00:30:27,990
thing and last but not the least when we

745
00:30:27,990 --> 00:30:30,240
open source we will be only on Windows

746
00:30:30,240 --> 00:30:31,799
but you know taking chakra core

747
00:30:31,799 --> 00:30:33,960
cross-platform is one of the other goals

748
00:30:33,960 --> 00:30:36,090
on the roadmap that we have that I would

749
00:30:36,090 --> 00:30:37,110
say you know we have really really

750
00:30:37,110 --> 00:30:40,070
committed to OSS this point in time and

751
00:30:40,070 --> 00:30:43,289
you know we would love to see what you

752
00:30:43,289 --> 00:30:45,029
build with the technology that we have

753
00:30:45,029 --> 00:30:46,590
open-source how you know you helped

754
00:30:46,590 --> 00:30:48,929
contribute I just want to say it before

755
00:30:48,929 --> 00:30:50,820
I end that you know throughout the two

756
00:30:50,820 --> 00:30:53,159
days we have a booth set up just outside

757
00:30:53,159 --> 00:30:54,659
if you walk through the door to the wall

758
00:30:54,659 --> 00:30:56,700
so if you have questions come find me

759
00:30:56,700 --> 00:30:58,590
there you know we'll have we have a lot

760
00:30:58,590 --> 00:31:00,389
of other folks from Microsoft edge as

