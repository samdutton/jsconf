1
00:00:17,200 --> 00:00:20,830

my name is John han this is brian

2
00:00:20,830 --> 00:00:24,400
cavalier everybody I you I architect at

3
00:00:24,400 --> 00:00:26,800
a small startup called life image and

4
00:00:26,800 --> 00:00:32,020
I'm a web architect at a consulting firm

5
00:00:32,020 --> 00:00:36,010
in Pittsburgh hovercraft studios and

6
00:00:36,010 --> 00:00:38,380
we're kind of partners in crime trying

7
00:00:38,380 --> 00:00:40,330
to cause trouble in the JavaScript

8
00:00:40,330 --> 00:00:43,120
community and in general so this this

9
00:00:43,120 --> 00:00:45,340
talk is to further that cause actually

10
00:00:45,340 --> 00:00:50,380
so slick get a quick survey how many

11
00:00:50,380 --> 00:00:52,570
people are using javascript modules

12
00:00:52,570 --> 00:00:56,440
today awesome how many of those people

13
00:00:56,440 --> 00:00:59,730
are using them client-side or is that

14
00:00:59,730 --> 00:01:01,810
excellent all right how many people are

15
00:01:01,810 --> 00:01:06,880
familiar with common jas how many people

16
00:01:06,880 --> 00:01:08,680
are familiar with common just come and

17
00:01:08,680 --> 00:01:14,470
jas AMD you are you using it today no

18
00:01:14,470 --> 00:01:18,369
all right okay so we might have a little

19
00:01:18,369 --> 00:01:20,500
bit of time to talk about AMD and a

20
00:01:20,500 --> 00:01:21,729
little bit more detail because that's

21
00:01:21,729 --> 00:01:24,340
kind of integral to this talk so anyways

22
00:01:24,340 --> 00:01:29,950
so anyways this is um this talk is going

23
00:01:29,950 --> 00:01:32,800
to be about modules and why it's my

24
00:01:32,800 --> 00:01:35,410
personal mission and my belief and I

25
00:01:35,410 --> 00:01:37,660
can't speak for Brian because I'm going

26
00:01:37,660 --> 00:01:39,399
to be injecting a lot of my opinion here

27
00:01:39,399 --> 00:01:41,800
I kind of drag Brian along with me

28
00:01:41,800 --> 00:01:44,369
because we work together about why

29
00:01:44,369 --> 00:01:48,399
modules to me are much cooler than

30
00:01:48,399 --> 00:01:51,940
frameworks so so at least Michael appear

31
00:01:51,940 --> 00:01:53,709
to refute everything John says yeah

32
00:01:53,709 --> 00:02:01,030
exactly so okay so first of all was a

33
00:02:01,030 --> 00:02:02,800
module we just saw some modules with Yui

34
00:02:02,800 --> 00:02:04,720
there's actually some other talks about

35
00:02:04,720 --> 00:02:07,450
modules by a strict definition from

36
00:02:07,450 --> 00:02:10,450
Wikipedia modules are you know single

37
00:02:10,450 --> 00:02:13,300
purposed there this compact unit of code

38
00:02:13,300 --> 00:02:16,599
and there you know pretty much self

39
00:02:16,599 --> 00:02:18,160
contained you can take that and move it

40
00:02:18,160 --> 00:02:21,360
around from one project to another and

41
00:02:21,360 --> 00:02:23,980
very importantly and this seems to get

42
00:02:23,980 --> 00:02:26,900
lost a lot they're interchangeable

43
00:02:26,900 --> 00:02:29,190
like we saw in the previous talk the the

44
00:02:29,190 --> 00:02:31,020
most one of the most exciting things

45
00:02:31,020 --> 00:02:33,300
with modules today is the the way that

46
00:02:33,300 --> 00:02:34,800
they can help speed up your application

47
00:02:34,800 --> 00:02:37,740
and we just saw a perfect example of

48
00:02:37,740 --> 00:02:39,810
that with the ue loader but but I'm

49
00:02:39,810 --> 00:02:41,760
going to be talking about the exact

50
00:02:41,760 --> 00:02:44,220
opposite that's that's a huge benefit

51
00:02:44,220 --> 00:02:46,080
with modules but we're not going to

52
00:02:46,080 --> 00:02:47,490
totally ignore that right now and talk

53
00:02:47,490 --> 00:02:51,300
about the coding benefits so just a

54
00:02:51,300 --> 00:02:53,730
comparison what's a web framework and I

55
00:02:53,730 --> 00:02:56,010
tried to grab this off of Wikipedia as

56
00:02:56,010 --> 00:02:57,330
well but it's kind of fragmented all

57
00:02:57,330 --> 00:03:00,810
over the place conversely to a module

58
00:03:00,810 --> 00:03:02,910
which is this compact unit a web

59
00:03:02,910 --> 00:03:05,640
framework is is more multi-purpose and

60
00:03:05,640 --> 00:03:08,400
it tries to commoditize services so that

61
00:03:08,400 --> 00:03:11,340
you know coding is easy and in one of

62
00:03:11,340 --> 00:03:12,900
the ways it does that with is with an

63
00:03:12,900 --> 00:03:16,400
API abstraction and I caught in a set of

64
00:03:16,400 --> 00:03:19,380
built-in best practices say here here's

65
00:03:19,380 --> 00:03:22,350
how you you you build a application with

66
00:03:22,350 --> 00:03:25,920
our framework so so like if anybody uses

67
00:03:25,920 --> 00:03:29,400
dojo dojos a great example of a

68
00:03:29,400 --> 00:03:32,310
framework or Yui yeah where you they

69
00:03:32,310 --> 00:03:33,780
have you know most everything you would

70
00:03:33,780 --> 00:03:38,820
need built-in right so yep one of the

71
00:03:38,820 --> 00:03:41,040
biggest peeves with it is though is

72
00:03:41,040 --> 00:03:42,600
everything's Global's with frameworks

73
00:03:42,600 --> 00:03:46,920
today so so this is wed libraries jquery

74
00:03:46,920 --> 00:03:48,660
is an example what is what is the web

75
00:03:48,660 --> 00:03:50,550
library it's kind of a you know small

76
00:03:50,550 --> 00:03:52,500
and a framework still it's it's as

77
00:03:52,500 --> 00:03:54,930
globally available set of tools for you

78
00:03:54,930 --> 00:03:58,140
to use helps you get done you know

79
00:03:58,140 --> 00:04:00,209
it's bigger than a module but not quite

80
00:04:00,209 --> 00:04:02,670
as big as a framework then we have these

81
00:04:02,670 --> 00:04:04,830
micro libraries these micro frameworks

82
00:04:04,830 --> 00:04:06,810
and and you know it all gets kind of

83
00:04:06,810 --> 00:04:08,580
kind of confusing you know when do I

84
00:04:08,580 --> 00:04:11,760
pick one one do i pick another and it

85
00:04:11,760 --> 00:04:13,140
all comes down to the same thing to me

86
00:04:13,140 --> 00:04:17,760
is just how much of you know how much

87
00:04:17,760 --> 00:04:19,769
functionality do you get and how much

88
00:04:19,769 --> 00:04:23,760
are you you know you know kind of forced

89
00:04:23,760 --> 00:04:27,540
into this this framework so which which

90
00:04:27,540 --> 00:04:29,610
which is my biggest pet peeve here is

91
00:04:29,610 --> 00:04:32,910
that you know going with a framework or

92
00:04:32,910 --> 00:04:34,950
a library kind of locks you in because

93
00:04:34,950 --> 00:04:36,510
you're coding to that library or

94
00:04:36,510 --> 00:04:39,090
framework now and if you've wanted to

95
00:04:39,090 --> 00:04:40,120
switch the

96
00:04:40,120 --> 00:04:42,100
witching cost is is extremely high

97
00:04:42,100 --> 00:04:44,830
because you've coded basically around

98
00:04:44,830 --> 00:04:48,910
this framework and the code infiltration

99
00:04:48,910 --> 00:04:55,000
is is extremely high so not just not

100
00:04:55,000 --> 00:04:56,949
just how the modules work but just even

101
00:04:56,949 --> 00:04:59,800
the names if you're using something like

102
00:04:59,800 --> 00:05:02,650
dojo you do have dojo dot throughout all

103
00:05:02,650 --> 00:05:04,479
of your code so if you wanted to change

104
00:05:04,479 --> 00:05:08,169
any of that you know you have that name

105
00:05:08,169 --> 00:05:09,639
litter through your code so you would

106
00:05:09,639 --> 00:05:11,770
have to you have to refactor all of that

107
00:05:11,770 --> 00:05:13,690
code to same same with you or any other

108
00:05:13,690 --> 00:05:16,300
large framework their name spaces are

109
00:05:16,300 --> 00:05:20,860
throughout your code right so to me this

110
00:05:20,860 --> 00:05:22,570
is kind of like coding dysentery you

111
00:05:22,570 --> 00:05:27,669
know it's just you know I I just want to

112
00:05:27,669 --> 00:05:29,169
say get your out of my code you

113
00:05:29,169 --> 00:05:31,510
know but but you know I saying that I

114
00:05:31,510 --> 00:05:33,880
really do like the frameworks it's just

115
00:05:33,880 --> 00:05:36,729
it's just when a client or or my company

116
00:05:36,729 --> 00:05:38,830
says okay so why did you pick that

117
00:05:38,830 --> 00:05:41,199
framework you know it sucks at this you

118
00:05:41,199 --> 00:05:43,930
know and you know I'd like to be able to

119
00:05:43,930 --> 00:05:45,130
say oh don't worry we're going to switch

120
00:05:45,130 --> 00:05:47,139
that out for you it's harder than it

121
00:05:47,139 --> 00:05:52,240
should be so and and then on top of that

122
00:05:52,240 --> 00:05:53,710
you know you get the problem with the

123
00:05:53,710 --> 00:05:55,840
fact that you know you want a code to

124
00:05:55,840 --> 00:05:57,610
standards you know but you can't because

125
00:05:57,610 --> 00:05:59,650
you're stuck supporting these sucky old

126
00:05:59,650 --> 00:06:07,900
browsers so so here's an example of you

127
00:06:07,900 --> 00:06:09,610
know some coding dysentery and i'm going

128
00:06:09,610 --> 00:06:12,190
to pick on dojo because dojo is actually

129
00:06:12,190 --> 00:06:15,160
my my number one library that I pick so

130
00:06:15,160 --> 00:06:19,410
so of examples here you know I got dojo

131
00:06:19,410 --> 00:06:22,360
sprinkled all throughout my code all

132
00:06:22,360 --> 00:06:24,699
right and then and then to make it worse

133
00:06:24,699 --> 00:06:28,330
I've got these non-standard calls to you

134
00:06:28,330 --> 00:06:30,460
know basically this is this is a wrapper

135
00:06:30,460 --> 00:06:32,320
around prevent default and stop

136
00:06:32,320 --> 00:06:35,530
propagation right so if I were to if I

137
00:06:35,530 --> 00:06:37,720
were to do some awesome new event based

138
00:06:37,720 --> 00:06:40,900
library out there that that does event

139
00:06:40,900 --> 00:06:43,660
handling way better than though Joe then

140
00:06:43,660 --> 00:06:47,080
I know what you thinking so but if they

141
00:06:47,080 --> 00:06:51,340
way maybe there is but I can't just swap

142
00:06:51,340 --> 00:06:53,500
it in for dojo and expect

143
00:06:53,500 --> 00:06:55,420
to work because my code is infiltrated

144
00:06:55,420 --> 00:06:58,080
with all these calls to proprietary

145
00:06:58,080 --> 00:07:00,130
differently on proprietary frameworks

146
00:07:00,130 --> 00:07:02,050
and again I'm not picking on dojo here

147
00:07:02,050 --> 00:07:05,200
because this is the same with every

148
00:07:05,200 --> 00:07:06,580
library or framework that I've worked

149
00:07:06,580 --> 00:07:11,380
with so far um and if anybody has any

150
00:07:11,380 --> 00:07:13,090
questions or I've been going too fast I

151
00:07:13,090 --> 00:07:14,980
like to be interrupted actually because

152
00:07:14,980 --> 00:07:16,300
sometimes you remind me of something

153
00:07:16,300 --> 00:07:18,310
that I'm forgetting about so if you have

154
00:07:18,310 --> 00:07:20,380
an intelligent question to ask please

155
00:07:20,380 --> 00:07:22,930
please ask it at any time all right yes

156
00:07:22,930 --> 00:07:29,230
I said intelligent yes so what is what

157
00:07:29,230 --> 00:07:31,180
is the Utopia you know what is at least

158
00:07:31,180 --> 00:07:33,130
to me what is what is the coding utopia

159
00:07:33,130 --> 00:07:38,020
I'll have in my my toolkit of dozens of

160
00:07:38,020 --> 00:07:40,120
stand-alone single purpose modules all

161
00:07:40,120 --> 00:07:43,060
right something I can take it I can grab

162
00:07:43,060 --> 00:07:44,620
this the best of breed here grab this

163
00:07:44,620 --> 00:07:46,990
best of breed here and and and and

164
00:07:46,990 --> 00:07:50,350
assemble an application together again

165
00:07:50,350 --> 00:07:52,150
as we saw with modules they give you the

166
00:07:52,150 --> 00:07:55,270
opportunity to have small fast code they

167
00:07:55,270 --> 00:07:58,510
load you know really quick I like to I

168
00:07:58,510 --> 00:08:00,790
like to be in charge of my code you know

169
00:08:00,790 --> 00:08:05,710
so my code is is my code and and and

170
00:08:05,710 --> 00:08:08,590
then again no Global's at all you know I

171
00:08:08,590 --> 00:08:10,240
don't need to tell you guys about why

172
00:08:10,240 --> 00:08:13,150
Global's shouldn't be in your code but I

173
00:08:13,150 --> 00:08:17,680
and share their name spaced and there's

174
00:08:17,680 --> 00:08:22,690
all these no conflict type mechanisms so

175
00:08:22,690 --> 00:08:24,700
that the frameworks don't don't fight

176
00:08:24,700 --> 00:08:25,900
with each other anymore but you know

177
00:08:25,900 --> 00:08:28,720
just it's time we get rid of Global's

178
00:08:28,720 --> 00:08:31,479
altogether and in my coding utopia I'll

179
00:08:31,479 --> 00:08:34,830
ignore it ignore IE six through eight so

180
00:08:34,830 --> 00:08:38,740
so here's here's an example of you know

181
00:08:38,740 --> 00:08:41,800
this coding utopia I'm using standard

182
00:08:41,800 --> 00:08:44,860
methods here using preventdefault i'm

183
00:08:44,860 --> 00:08:48,130
using query selector all using array

184
00:08:48,130 --> 00:08:50,440
iterators that have been available at

185
00:08:50,440 --> 00:08:53,260
least in some browsers since 1990 i

186
00:08:53,260 --> 00:08:59,470
don't know so

187
00:08:59,480 --> 00:09:02,760
and here's here's here's his a second

188
00:09:02,760 --> 00:09:04,710
try you know here's here's maybe this is

189
00:09:04,710 --> 00:09:08,730
good enough instead of going coding to

190
00:09:08,730 --> 00:09:11,670
standards why don't we just agree on

191
00:09:11,670 --> 00:09:14,190
that there is a standard but maybe we've

192
00:09:14,190 --> 00:09:16,500
had to wrap it to help support the older

193
00:09:16,500 --> 00:09:18,300
browsers right because because if we

194
00:09:18,300 --> 00:09:20,070
were going to work this way this means

195
00:09:20,070 --> 00:09:21,840
duck punching the older browsers

196
00:09:21,840 --> 00:09:24,680
basically prototype augmentation which

197
00:09:24,680 --> 00:09:28,400
arguably is good or bad if you're

198
00:09:28,400 --> 00:09:31,020
augmenting the prototype to a standard I

199
00:09:31,020 --> 00:09:32,520
think some people think that's

200
00:09:32,520 --> 00:09:34,140
acceptable but I think we've been burned

201
00:09:34,140 --> 00:09:35,640
so many times in the past so maybe this

202
00:09:35,640 --> 00:09:38,460
is good enough you know if we just have

203
00:09:38,460 --> 00:09:39,840
some wrapper function that looks and

204
00:09:39,840 --> 00:09:41,820
behaves exactly like query selector all

205
00:09:41,820 --> 00:09:46,200
or if we have this object with array

206
00:09:46,200 --> 00:09:48,870
iterators and array mutators on it that

207
00:09:48,870 --> 00:09:51,410
works in acts exactly like the standard

208
00:09:51,410 --> 00:09:54,870
but instead takes takes an array as its

209
00:09:54,870 --> 00:09:57,330
parameter so this kind of wrapper around

210
00:09:57,330 --> 00:10:01,160
arrays maybe that's good enough and

211
00:10:01,160 --> 00:10:03,240
here's another example we've got some

212
00:10:03,240 --> 00:10:08,170
event library here

213
00:10:08,180 --> 00:10:14,790
so is this feasible so in order to get

214
00:10:14,790 --> 00:10:16,260
this to work we would have to have

215
00:10:16,260 --> 00:10:21,540
number one standard api's and again my

216
00:10:21,540 --> 00:10:32,530
pet peeve no Global's

217
00:10:32,540 --> 00:10:39,950
so and again you know in order to meet

218
00:10:39,950 --> 00:10:41,900
this utopia we need need to be able to

219
00:10:41,900 --> 00:10:43,280
take these modules because they've got

220
00:10:43,280 --> 00:10:45,800
standard api's we should be able to swap

221
00:10:45,800 --> 00:10:48,710
out for the best of breed and this last

222
00:10:48,710 --> 00:10:51,460
point is what we were mentioning earlier

223
00:10:51,460 --> 00:10:54,950
when you have when you just use a tool

224
00:10:54,950 --> 00:10:58,180
kit directly and you're not using a

225
00:10:58,180 --> 00:11:01,700
module framework or module loader that

226
00:11:01,700 --> 00:11:03,080
allows you to take control of the name

227
00:11:03,080 --> 00:11:06,110
spacing you have things like ue and dojo

228
00:11:06,110 --> 00:11:09,770
and dollar sign sprinkled throughout

229
00:11:09,770 --> 00:11:13,210
your code which makes switching harder

230
00:11:13,210 --> 00:11:15,950
one thing that modules allows you to do

231
00:11:15,950 --> 00:11:19,250
and with something like an AMD loader if

232
00:11:19,250 --> 00:11:23,270
you've used one you control the incoming

233
00:11:23,270 --> 00:11:25,460
namespace so in the example that John

234
00:11:25,460 --> 00:11:27,560
just gave the code example where he has

235
00:11:27,560 --> 00:11:31,010
event add event listener event is not a

236
00:11:31,010 --> 00:11:35,060
global event is something that we

237
00:11:35,060 --> 00:11:38,660
defined the name event and we said we

238
00:11:38,660 --> 00:11:40,910
want this module over here maybe it was

239
00:11:40,910 --> 00:11:42,620
written by someone we found it on github

240
00:11:42,620 --> 00:11:45,440
it's really awesome we pull that in we

241
00:11:45,440 --> 00:11:48,380
assign it the name event so if we wanted

242
00:11:48,380 --> 00:11:50,120
to change that later we control that

243
00:11:50,120 --> 00:11:52,190
name we can say okay now I want this

244
00:11:52,190 --> 00:11:54,560
module over here this event library and

245
00:11:54,560 --> 00:11:58,580
I want to call it event and because it's

246
00:11:58,580 --> 00:12:01,820
been coded to some standard API you know

247
00:12:01,820 --> 00:12:05,030
possibly a common j/s API it just works

248
00:12:05,030 --> 00:12:07,310
we don't have to change the name here we

249
00:12:07,310 --> 00:12:08,330
don't have to change the name of the

250
00:12:08,330 --> 00:12:10,870
methods no refactoring it just words

251
00:12:10,870 --> 00:12:14,450
right so that kind of gets in with this

252
00:12:14,450 --> 00:12:15,950
slide what's wrong with this code you

253
00:12:15,950 --> 00:12:18,970
know it looks like we're still using mod

254
00:12:18,970 --> 00:12:20,930
Global's but we're actually not and

255
00:12:20,930 --> 00:12:22,070
we'll show you in a minute why that

256
00:12:22,070 --> 00:12:24,230
we're not but what else is wrong with

257
00:12:24,230 --> 00:12:28,430
this code the w3c you know Dom methods

258
00:12:28,430 --> 00:12:30,470
everybody's pretty sick of them is you

259
00:12:30,470 --> 00:12:32,240
know besides a lot of typing and whatnot

260
00:12:32,240 --> 00:12:33,680
you know it's just not it's not a nice

261
00:12:33,680 --> 00:12:35,930
way to code so so we still got that

262
00:12:35,930 --> 00:12:38,420
issue to get around and so there is a

263
00:12:38,420 --> 00:12:39,920
way to get around that and we'll talk

264
00:12:39,920 --> 00:12:43,730
about it in a minute so can we have

265
00:12:43,730 --> 00:12:46,060
these modules today

266
00:12:46,060 --> 00:12:48,560
not really you know people are still

267
00:12:48,560 --> 00:12:52,279
creating libraries frameworks that use

268
00:12:52,279 --> 00:12:54,500
these global invasive ways to write your

269
00:12:54,500 --> 00:12:57,200
code and swapping out requires standard

270
00:12:57,200 --> 00:13:00,050
api's and of course javascript has no

271
00:13:00,050 --> 00:13:02,600
standard api's well that's not true

272
00:13:02,600 --> 00:13:04,070
because it really does and a lot of them

273
00:13:04,070 --> 00:13:05,690
are hidden and and I was surprised when

274
00:13:05,690 --> 00:13:07,010
I started digging in to find to find

275
00:13:07,010 --> 00:13:10,670
some of them so so for instance just

276
00:13:10,670 --> 00:13:13,070
JavaScript itself you know eka the

277
00:13:13,070 --> 00:13:16,370
forthcoming ECMO standards of some of

278
00:13:16,370 --> 00:13:17,779
them actually I say forthcoming but

279
00:13:17,779 --> 00:13:19,400
they're really here it's just we're

280
00:13:19,400 --> 00:13:21,230
waiting for them to infiltrate browsers

281
00:13:21,230 --> 00:13:23,779
you know arrays objects there's all

282
00:13:23,779 --> 00:13:25,700
these standard interfaces already and we

283
00:13:25,700 --> 00:13:29,839
should start well actually dojo already

284
00:13:29,839 --> 00:13:32,660
does this already and some of the other

285
00:13:32,660 --> 00:13:34,279
frameworks out there and libraries are

286
00:13:34,279 --> 00:13:38,050
doing it as well creating wrappers that

287
00:13:38,050 --> 00:13:40,670
actually mimic and look at you know have

288
00:13:40,670 --> 00:13:43,370
the same parameter function signatures

289
00:13:43,370 --> 00:13:46,100
as as the standards so and there are a

290
00:13:46,100 --> 00:13:47,360
bunch of others out there this JSON

291
00:13:47,360 --> 00:13:52,120
schema Jason referencing Jason path yeah

292
00:13:52,120 --> 00:13:55,730
html5 and css3 give us some great ap is

293
00:13:55,730 --> 00:13:59,330
that we can we can model our our

294
00:13:59,330 --> 00:14:02,570
libraries against query selector all the

295
00:14:02,570 --> 00:14:06,350
event model Dom again those are quite

296
00:14:06,350 --> 00:14:09,470
ugly and unwieldy but we can we'll see

297
00:14:09,470 --> 00:14:10,580
in a minute while we can address that

298
00:14:10,580 --> 00:14:15,520
the rest rest is a de facto standard for

299
00:14:15,520 --> 00:14:19,010
for web development so there's some

300
00:14:19,010 --> 00:14:21,070
excellent API as we can mimic for that

301
00:14:21,070 --> 00:14:23,810
and plus this is common Jas proposed

302
00:14:23,810 --> 00:14:29,810
standards common Jas is is not it's not

303
00:14:29,810 --> 00:14:33,680
the it's not a dictatorship that says

304
00:14:33,680 --> 00:14:35,209
this is the way you have to do things

305
00:14:35,209 --> 00:14:37,430
the way comedy is works is people

306
00:14:37,430 --> 00:14:39,260
propose things and people basically vote

307
00:14:39,260 --> 00:14:42,589
on it through popularity and just you

308
00:14:42,589 --> 00:14:44,660
know by using these standards one of

309
00:14:44,660 --> 00:14:46,339
them will come up to the top or several

310
00:14:46,339 --> 00:14:48,410
of them come to the top and become de

311
00:14:48,410 --> 00:14:50,390
facto standards and that's that's that's

312
00:14:50,390 --> 00:14:52,420
happening right now and it's very very

313
00:14:52,420 --> 00:14:54,589
active right now we're seeing lots of

314
00:14:54,589 --> 00:14:56,829
things come out and pop out of standards

315
00:14:56,829 --> 00:14:59,089
well potential standards

316
00:14:59,089 --> 00:15:02,089
and a lot of our are being used I mean

317
00:15:02,089 --> 00:15:04,610
they're they're on they're on a wiki on

318
00:15:04,610 --> 00:15:06,350
the common J's wiki but a lot of them

319
00:15:06,350 --> 00:15:07,730
are being put into practice today so

320
00:15:07,730 --> 00:15:10,269
this is going to happen more quickly

321
00:15:10,269 --> 00:15:12,559
than you might think a lot of these

322
00:15:12,559 --> 00:15:13,939
standards are going to become actual

323
00:15:13,939 --> 00:15:15,740
standards pretty quickly I think yeah

324
00:15:15,740 --> 00:15:17,149
there's actually a lot of momentum and

325
00:15:17,149 --> 00:15:21,079
and of course the proposed standard that

326
00:15:21,079 --> 00:15:23,360
really helped us out on the browser side

327
00:15:23,360 --> 00:15:25,899
is asynchronous module definition and

328
00:15:25,899 --> 00:15:30,189
I've got a great overview of

329
00:15:30,189 --> 00:15:32,509
asynchronous module definition at this

330
00:15:32,509 --> 00:15:36,949
this address here don't we don't have

331
00:15:36,949 --> 00:15:39,230
time to go into all of it of course but

332
00:15:39,230 --> 00:15:40,759
I'm going to at least touch on it a

333
00:15:40,759 --> 00:15:45,379
little bit so so that's how I felt

334
00:15:45,379 --> 00:15:50,400
basically when I when I discovered AMD

335
00:15:50,410 --> 00:15:54,889
well in a nutshell it's it wraps you

336
00:15:54,889 --> 00:15:57,800
know our common j/s standard module

337
00:15:57,800 --> 00:16:03,160
format which is quite plain and simple

338
00:16:03,160 --> 00:16:05,629
again we might be able to take a look at

339
00:16:05,629 --> 00:16:07,100
that a little bit if we have some time

340
00:16:07,100 --> 00:16:08,389
during this presentation but i encourage

341
00:16:08,389 --> 00:16:10,699
you to take a look at that it works

342
00:16:10,699 --> 00:16:13,519
today I no need to wait for all the

343
00:16:13,519 --> 00:16:14,990
current browsers and I we can start

344
00:16:14,990 --> 00:16:17,209
using AMD actually it's already being

345
00:16:17,209 --> 00:16:19,550
used in several places and it has a

346
00:16:19,550 --> 00:16:21,589
migration path strategy there's been

347
00:16:21,589 --> 00:16:23,509
several proposed strategies to migrate

348
00:16:23,509 --> 00:16:26,509
from AMD to JavaScript modules when it's

349
00:16:26,509 --> 00:16:29,860
available in ECMO script and and

350
00:16:29,860 --> 00:16:33,100
definitely check out the ten o'clock

351
00:16:33,100 --> 00:16:35,029
presentation tomorrow by Dave Herman

352
00:16:35,029 --> 00:16:37,249
about JavaScript modules and what

353
00:16:37,249 --> 00:16:38,329
they're going to look like when they

354
00:16:38,329 --> 00:16:44,430
really come to JavaScript so

355
00:16:44,440 --> 00:16:46,340
unfortunately the standards don't cover

356
00:16:46,340 --> 00:16:48,050
everything today you know we don't have

357
00:16:48,050 --> 00:16:49,400
standards for templating we don't have

358
00:16:49,400 --> 00:16:51,110
standards for data binding application

359
00:16:51,110 --> 00:16:56,120
control flow this just distill a

360
00:16:56,120 --> 00:16:57,860
bazillion things we do on our apps that

361
00:16:57,860 --> 00:17:01,640
don't have a standard so how do you deal

362
00:17:01,640 --> 00:17:03,260
with that so there's plenty of ways to

363
00:17:03,260 --> 00:17:06,410
run around that and I probably shouldn't

364
00:17:06,410 --> 00:17:07,699
say run around because they're they're

365
00:17:07,699 --> 00:17:10,250
actually very cool strategies Bryan

366
00:17:10,250 --> 00:17:12,100
later is going to talk about in

367
00:17:12,100 --> 00:17:14,360
inversion of control and dependency

368
00:17:14,360 --> 00:17:19,520
injection interrupt any time you want so

369
00:17:19,520 --> 00:17:22,370
I'm in 220 this room yes you're all

370
00:17:22,370 --> 00:17:24,770
about it so so we're places where there

371
00:17:24,770 --> 00:17:27,079
isn't no standard API you can actually

372
00:17:27,079 --> 00:17:30,950
inject functionality or even use an

373
00:17:30,950 --> 00:17:33,020
observer or adapter patterns and we're

374
00:17:33,020 --> 00:17:35,030
doing a lot of that actually in our

375
00:17:35,030 --> 00:17:38,840
projects where where you build code that

376
00:17:38,840 --> 00:17:41,630
acts on your coat and is not instead and

377
00:17:41,630 --> 00:17:46,670
not integrated into your code so and

378
00:17:46,670 --> 00:17:48,590
adapter patterns these plugins can work

379
00:17:48,590 --> 00:17:50,180
in conjunction with IOC or in

380
00:17:50,180 --> 00:17:52,550
conjunction with module loaders in order

381
00:17:52,550 --> 00:17:57,260
to deliver additional functionality so

382
00:17:57,260 --> 00:17:59,780
yes we can't have modules today here

383
00:17:59,780 --> 00:18:02,840
very briefly is the AMD module format

384
00:18:02,840 --> 00:18:05,630
your code your actual module would go

385
00:18:05,630 --> 00:18:08,930
here and basically the way it works is a

386
00:18:08,930 --> 00:18:11,630
single free variable we don't call them

387
00:18:11,630 --> 00:18:13,670
Global's anymore we call them free

388
00:18:13,670 --> 00:18:16,630
that's how we're getting away with this

389
00:18:16,630 --> 00:18:19,820
is a free free free variable as a

390
00:18:19,820 --> 00:18:23,120
function called define and the first

391
00:18:23,120 --> 00:18:24,590
parameter defined is it I'm lying

392
00:18:24,590 --> 00:18:25,820
there's actually another parameter that

393
00:18:25,820 --> 00:18:27,260
can go in there but don't use it is

394
00:18:27,260 --> 00:18:28,940
there's a way to identify your modules

395
00:18:28,940 --> 00:18:30,470
from within but that's a strategy that's

396
00:18:30,470 --> 00:18:35,180
meant for the the optimization the

397
00:18:35,180 --> 00:18:37,940
concatenation and the compilation pieces

398
00:18:37,940 --> 00:18:42,980
of AMD so if the first parameters you

399
00:18:42,980 --> 00:18:45,680
specify a list of of modules you want to

400
00:18:45,680 --> 00:18:47,750
pull in and I'm pulling in you know

401
00:18:47,750 --> 00:18:49,100
something that looks like query selector

402
00:18:49,100 --> 00:18:51,410
all I'm pulling in that array wrapper

403
00:18:51,410 --> 00:18:53,570
I'm pulling in an event Raptor

404
00:18:53,570 --> 00:19:00,140
rapper Raptor and I'm pulling in

405
00:19:00,140 --> 00:19:02,780
basically a promises library here so

406
00:19:02,780 --> 00:19:04,850
here's an example of a plug-in I'm

407
00:19:04,850 --> 00:19:07,550
pulling in a text module and I'm pulling

408
00:19:07,550 --> 00:19:11,120
in this proprietary CSS module and and I

409
00:19:11,120 --> 00:19:12,980
actually could just write that CSS here

410
00:19:12,980 --> 00:19:15,800
I should have done that so these are

411
00:19:15,800 --> 00:19:19,100
like standard a standard plugins so and

412
00:19:19,100 --> 00:19:21,710
if if you look closely all of these map

413
00:19:21,710 --> 00:19:24,140
to function parameters here corey

414
00:19:24,140 --> 00:19:27,560
selector all rares where the names don't

415
00:19:27,560 --> 00:19:30,440
have to be the same right the dependency

416
00:19:30,440 --> 00:19:33,260
names are actual names of modules

417
00:19:33,260 --> 00:19:35,300
actually it is actually they're not here

418
00:19:35,300 --> 00:19:37,370
they're not here I remapped them already

419
00:19:37,370 --> 00:19:41,930
so so these could map directly to files

420
00:19:41,930 --> 00:19:44,480
files in your in your in your web app

421
00:19:44,480 --> 00:19:45,950
but actually there's a way to map them

422
00:19:45,950 --> 00:19:48,590
so they this query selector all could be

423
00:19:48,590 --> 00:19:50,480
actually pointing actually is right now

424
00:19:50,480 --> 00:19:51,920
in the project wanna show it's pointing

425
00:19:51,920 --> 00:19:54,650
at sizzle the jQuery selector engine but

426
00:19:54,650 --> 00:19:56,210
we could easily just point it at dojos

427
00:19:56,210 --> 00:19:59,990
query engine or at NW match your Diego

428
00:19:59,990 --> 00:20:04,100
paninis query selector engine and same

429
00:20:04,100 --> 00:20:06,050
with array this is actually pointing at

430
00:20:06,050 --> 00:20:07,820
a small library I wrote but it could put

431
00:20:07,820 --> 00:20:12,650
it be pointing at Uber's array rapper

432
00:20:12,650 --> 00:20:14,930
could be pointing at dojo array you know

433
00:20:14,930 --> 00:20:20,120
are just the dojo object itself so so

434
00:20:20,120 --> 00:20:21,410
sorry there's your brief introduction to

435
00:20:21,410 --> 00:20:23,570
AMD I do have a whole presentation on

436
00:20:23,570 --> 00:20:26,690
that and can show plenty of examples on

437
00:20:26,690 --> 00:20:31,550
how to build AMD style modules and so

438
00:20:31,550 --> 00:20:34,160
bug me later today if you want to get a

439
00:20:34,160 --> 00:20:38,480
good intro into that here are the AMD

440
00:20:38,480 --> 00:20:41,000
loaders today require j/s being the one

441
00:20:41,000 --> 00:20:42,650
that's been around the most James Burke

442
00:20:42,650 --> 00:20:44,990
did an excellent job getting that going

443
00:20:44,990 --> 00:20:49,040
and getting that integrated proposed to

444
00:20:49,040 --> 00:20:51,410
common j/s Chris I've had a big hand in

445
00:20:51,410 --> 00:20:54,650
that as well curl j/s curled ojs is the

446
00:20:54,650 --> 00:21:02,020
one that I wrote pinned by Christophe

447
00:21:02,020 --> 00:21:06,350
Dorn thank you BTW load which is the one

448
00:21:06,350 --> 00:21:07,370
that was adapted to

449
00:21:07,370 --> 00:21:10,610
work with dojo that's by raúl guild

450
00:21:10,610 --> 00:21:13,970
there's even one startup in Spain local

451
00:21:13,970 --> 00:21:18,260
net and Dan right from Twitter is

452
00:21:18,260 --> 00:21:20,620
building one called loadrunner Jas and

453
00:21:20,620 --> 00:21:22,730
from quick discussions with him it

454
00:21:22,730 --> 00:21:24,320
sounds like he's also leaning towards

455
00:21:24,320 --> 00:21:26,660
AMD or at least common Jas format and

456
00:21:26,660 --> 00:21:29,990
Kyle Cal symptom Simpson has been

457
00:21:29,990 --> 00:21:33,140
working on module modular based lab Jas

458
00:21:33,140 --> 00:21:36,980
as well so and add I've been arguing

459
00:21:36,980 --> 00:21:38,930
with Kyle back and forth he's he's I

460
00:21:38,930 --> 00:21:41,300
think he's going to go AMD so so I don't

461
00:21:41,300 --> 00:21:42,890
think as a choice actually because AMD

462
00:21:42,890 --> 00:21:44,330
actually has a lot of momentum right now

463
00:21:44,330 --> 00:21:46,820
Firebug 18 is using it already if you're

464
00:21:46,820 --> 00:21:49,250
using the Firebug alpha version it's

465
00:21:49,250 --> 00:21:51,920
already using Andy formatted modules

466
00:21:51,920 --> 00:21:56,420
dojo 16 and 17 1 dot 6 is in release and

467
00:21:56,420 --> 00:21:59,470
it's using AMD format there's dozens

468
00:21:59,470 --> 00:22:02,000
dozens and dozens of Production apps out

469
00:22:02,000 --> 00:22:04,660
there if you follow the required j/s

470
00:22:04,660 --> 00:22:07,340
Google Group you realize that there's

471
00:22:07,340 --> 00:22:09,260
just there's just tons of people

472
00:22:09,260 --> 00:22:10,760
actually building production worthy

473
00:22:10,760 --> 00:22:13,760
applications with it and open

474
00:22:13,760 --> 00:22:16,010
cooperative web framework has also

475
00:22:16,010 --> 00:22:18,440
adapted it as their standard for modules

476
00:22:18,440 --> 00:22:22,790
as well this just tons of plugins out

477
00:22:22,790 --> 00:22:28,020
there oh my links didn't work

478
00:22:28,030 --> 00:22:31,820
coffeescript loaders Google loaders you

479
00:22:31,820 --> 00:22:35,600
know CSS loaders CSS manipulators you

480
00:22:35,600 --> 00:22:36,860
know you can load text you can load

481
00:22:36,860 --> 00:22:39,050
translation files you can light load

482
00:22:39,050 --> 00:22:40,910
plain old JavaScript I almost called it

483
00:22:40,910 --> 00:22:45,320
lame-o lame-o JavaScript there's also

484
00:22:45,320 --> 00:22:47,840
lots of modules already available Chris

485
00:22:47,840 --> 00:22:49,880
type adapted sizzle which is one we're

486
00:22:49,880 --> 00:22:52,850
going to be using today there's a ton

487
00:22:52,850 --> 00:22:56,690
Peter Higgins has and bryan forbes have

488
00:22:56,690 --> 00:22:58,640
created tons of modules you can use

489
00:22:58,640 --> 00:23:02,870
under the uber github repo brian's

490
00:23:02,870 --> 00:23:04,700
written some modules I've written some

491
00:23:04,700 --> 00:23:07,820
modules there's also lots of module

492
00:23:07,820 --> 00:23:12,350
helpers IOC wire is an IOC and inversion

493
00:23:12,350 --> 00:23:14,750
of control of what do you call it you

494
00:23:14,750 --> 00:23:16,750
know Colin front was called framework

495
00:23:16,750 --> 00:23:19,510
yeah it's a inversion of control

496
00:23:19,510 --> 00:23:23,260
container I'm a server-side guy turned

497
00:23:23,260 --> 00:23:27,400
front end guy so for y'all's sneer at

498
00:23:27,400 --> 00:23:29,350
ioc container in the server-side world

499
00:23:29,350 --> 00:23:31,750
this is sort of a fresh take on it for

500
00:23:31,750 --> 00:23:34,240
javascript if you're interested come at

501
00:23:34,240 --> 00:23:38,050
220 today and walk about it yep there's

502
00:23:38,050 --> 00:23:42,220
has how many people use has as jas it's

503
00:23:42,220 --> 00:23:46,690
a way to to feature tests and fine tune

504
00:23:46,690 --> 00:23:49,690
your modules so that only the code

505
00:23:49,690 --> 00:23:51,100
that's necessary gets shipped up to the

506
00:23:51,100 --> 00:23:53,530
browser it's an awesome project and then

507
00:23:53,530 --> 00:23:54,550
there's other there's lots of other

508
00:23:54,550 --> 00:23:55,780
things in the works I just named one of

509
00:23:55,780 --> 00:23:57,820
them here Cola to help deal with the

510
00:23:57,820 --> 00:24:00,120
other pieces that don't have standards

511
00:24:00,120 --> 00:24:02,980
so that again Cola uses an observer

512
00:24:02,980 --> 00:24:04,630
pattern so that it doesn't infiltrate

513
00:24:04,630 --> 00:24:09,040
your code we've almost got utopia today

514
00:24:09,040 --> 00:24:11,530
as she saw you we uses modules and they

515
00:24:11,530 --> 00:24:13,000
do an excellent job they've got the

516
00:24:13,000 --> 00:24:15,760
performance thing down pat dojo is is

517
00:24:15,760 --> 00:24:18,280
hot on their heels with one dot 71 that

518
00:24:18,280 --> 00:24:20,920
six is actually pretty good one dot

519
00:24:20,920 --> 00:24:22,630
seven is going to be awesome in terms of

520
00:24:22,630 --> 00:24:25,240
modules talk to some of the jQuery

521
00:24:25,240 --> 00:24:27,070
people bought modules they're looking at

522
00:24:27,070 --> 00:24:34,120
it become so so yeah sorry there's some

523
00:24:34,120 --> 00:24:35,800
examples of the dojo ones that are that

524
00:24:35,800 --> 00:24:37,420
I think are the most awesome you know I

525
00:24:37,420 --> 00:24:39,660
can just swap in a qsa if i want to or

526
00:24:39,660 --> 00:24:42,790
deferred as promised implementation and

527
00:24:42,790 --> 00:24:45,160
the work crews I did on Jason rest i

528
00:24:45,160 --> 00:24:47,320
think is an excellent example that we

529
00:24:47,320 --> 00:24:49,480
should be using first standard for for

530
00:24:49,480 --> 00:24:51,520
server communications moving forward so

531
00:24:51,520 --> 00:24:53,890
but the big issue with with dojo and yui

532
00:24:53,890 --> 00:24:55,620
is is still quite a commitment because

533
00:24:55,620 --> 00:24:58,660
just for instance if you load dojos

534
00:24:58,660 --> 00:25:00,910
deferred it pulls down an additional 20

535
00:25:00,910 --> 00:25:03,040
files well obviously be compressing them

536
00:25:03,040 --> 00:25:04,990
but you know you're you're kind of kind

537
00:25:04,990 --> 00:25:07,330
of still locked into the whole dojo

538
00:25:07,330 --> 00:25:11,720
thing as well

539
00:25:11,730 --> 00:25:15,030
so I want to write a module so here's

540
00:25:15,030 --> 00:25:16,680
here's a quick recipe if you want to

541
00:25:16,680 --> 00:25:19,010
write a good modules that somebody

542
00:25:19,010 --> 00:25:21,750
anybody could start picking up and using

543
00:25:21,750 --> 00:25:24,650
you know focus on a single purpose

544
00:25:24,650 --> 00:25:27,780
minimize the number of dependencies so

545
00:25:27,780 --> 00:25:30,360
that you know wider audience can adopt

546
00:25:30,360 --> 00:25:33,720
your module write some kickass code of

547
00:25:33,720 --> 00:25:37,560
course and and follow the standards even

548
00:25:37,560 --> 00:25:39,270
if it's just proposed standard selected

549
00:25:39,270 --> 00:25:40,680
just about everything's a proposed

550
00:25:40,680 --> 00:25:42,030
standard if it's not in part of ECMO

551
00:25:42,030 --> 00:25:45,990
script already right so innovate

552
00:25:45,990 --> 00:25:47,880
obviously without breaking the standards

553
00:25:47,880 --> 00:25:50,130
too badly or are you know if you have to

554
00:25:50,130 --> 00:25:53,040
break the standards you know get some

555
00:25:53,040 --> 00:25:55,740
real-life code out there and and get it

556
00:25:55,740 --> 00:25:58,140
out in production and propose a standard

557
00:25:58,140 --> 00:25:58,980
you know if you're doing something

558
00:25:58,980 --> 00:26:01,170
that's awesome and and lots of other

559
00:26:01,170 --> 00:26:03,060
people agree with you you know or you

560
00:26:03,060 --> 00:26:05,790
think they should get out there and

561
00:26:05,790 --> 00:26:07,470
propose a standard it's it's not that

562
00:26:07,470 --> 00:26:12,120
hard actually the commonjs blog is is

563
00:26:12,120 --> 00:26:14,850
open for anybody to participate so

564
00:26:14,850 --> 00:26:16,860
actually they probably hate that I'm

565
00:26:16,860 --> 00:26:18,300
saying that right this right now because

566
00:26:18,300 --> 00:26:20,580
because you know they've been locked in

567
00:26:20,580 --> 00:26:22,770
their server side world and when the

568
00:26:22,770 --> 00:26:25,590
browser guys are starting to take over

569
00:26:25,590 --> 00:26:31,260
so and you know document where your

570
00:26:31,260 --> 00:26:33,240
module deviates from the standard so

571
00:26:33,240 --> 00:26:35,040
someone picking up your ear module that

572
00:26:35,040 --> 00:26:38,580
you've written can can know exactly what

573
00:26:38,580 --> 00:26:40,320
they need to do in order to make sure

574
00:26:40,320 --> 00:26:43,020
that they're there you know not locking

575
00:26:43,020 --> 00:26:44,880
themselves in or and if they do you know

576
00:26:44,880 --> 00:26:47,010
you know what they need to do in order

577
00:26:47,010 --> 00:26:49,170
to get around that you may be doing

578
00:26:49,170 --> 00:26:51,150
something that goes above and beyond the

579
00:26:51,150 --> 00:26:53,850
current standard and you know someone

580
00:26:53,850 --> 00:26:55,200
may choose to use that because it's

581
00:26:55,200 --> 00:26:57,210
awesome and if you document that in your

582
00:26:57,210 --> 00:26:58,680
module that's some that might be a

583
00:26:58,680 --> 00:27:00,740
reason for someone to choose your module

584
00:27:00,740 --> 00:27:03,150
especially if you're already out there

585
00:27:03,150 --> 00:27:04,770
you know sort of pushing that extra

586
00:27:04,770 --> 00:27:07,500
functionality as an addendum to the

587
00:27:07,500 --> 00:27:10,920
standard or you know a change to the

588
00:27:10,920 --> 00:27:13,800
standard and and one of the really cool

589
00:27:13,800 --> 00:27:16,590
things here if you sum all of this up it

590
00:27:16,590 --> 00:27:19,230
means you don't have to write a massive

591
00:27:19,230 --> 00:27:20,300
framework to

592
00:27:20,300 --> 00:27:23,630
get people to start using your code you

593
00:27:23,630 --> 00:27:25,370
can write something really tiny you know

594
00:27:25,370 --> 00:27:29,620
an array library an implementation of

595
00:27:29,620 --> 00:27:32,360
the wind function thats related to

596
00:27:32,360 --> 00:27:35,060
promises small things that that you

597
00:27:35,060 --> 00:27:36,260
think could be really useful to people

598
00:27:36,260 --> 00:27:37,970
or that you're already using in your

599
00:27:37,970 --> 00:27:40,430
code you can wrap them up as an AMD

600
00:27:40,430 --> 00:27:43,400
module put them up on github tweet about

601
00:27:43,400 --> 00:27:45,620
them people might start using them if

602
00:27:45,620 --> 00:27:49,970
they're awesome people will use exactly

603
00:27:49,970 --> 00:27:58,730
share it questions so far okay so let's

604
00:27:58,730 --> 00:28:07,869
let's dig into the demo

605
00:28:07,879 --> 00:28:13,489
I can find it oh not good the green

606
00:28:13,489 --> 00:28:19,440
button work green one zoom

607
00:28:19,440 --> 00:28:21,850
did all right

608
00:28:21,850 --> 00:28:24,730
alright so we gotta get a cute little

609
00:28:24,730 --> 00:28:26,740
application here it doesn't do a whole

610
00:28:26,740 --> 00:28:29,980
lot you basically have to pick which of

611
00:28:29,980 --> 00:28:32,140
these code snippets is more priority

612
00:28:32,140 --> 00:28:34,090
than the other priority being a good

613
00:28:34,090 --> 00:28:36,760
thing by the way think of it as ninja

614
00:28:36,760 --> 00:28:41,679
you know but with a je s conf theme so

615
00:28:41,679 --> 00:28:43,690
just demonstrate this really quickly if

616
00:28:43,690 --> 00:28:46,450
I think this one on top is more priority

617
00:28:46,450 --> 00:28:48,850
because oh I like that I like how that

618
00:28:48,850 --> 00:28:51,240
works i'm going to choose that one I

619
00:28:51,240 --> 00:28:54,640
should have done that all right sir but

620
00:28:54,640 --> 00:28:57,159
but no there's actually a performance

621
00:28:57,159 --> 00:28:59,320
problem with doing it this way with this

622
00:28:59,320 --> 00:29:01,450
inline function in the line anonymous

623
00:29:01,450 --> 00:29:03,669
function the JavaScript engines can't

624
00:29:03,669 --> 00:29:05,770
compile that effectively so this one

625
00:29:05,770 --> 00:29:07,390
with the function hoisted is better so

626
00:29:07,390 --> 00:29:08,919
that's that's not really what we need to

627
00:29:08,919 --> 00:29:13,780
talk about here so really the the flow

628
00:29:13,780 --> 00:29:16,510
is you choose something you're right or

629
00:29:16,510 --> 00:29:19,870
wrong you click Next so you pick another

630
00:29:19,870 --> 00:29:22,030
one let's see sorry which one of these

631
00:29:22,030 --> 00:29:23,820
is more priority top one at the bottom

632
00:29:23,820 --> 00:29:25,870
raise your hand if you think the top one

633
00:29:25,870 --> 00:29:31,990
is 0

634
00:29:32,000 --> 00:29:37,920
that better you see now good so I'm

635
00:29:37,920 --> 00:29:39,300
gonna pick the bottom one no it was

636
00:29:39,300 --> 00:29:46,950
tough one sir so IMHO right so let's

637
00:29:46,950 --> 00:29:50,130
take a look at the code here this is our

638
00:29:50,130 --> 00:29:54,630
project we have a just a standard HTML

639
00:29:54,630 --> 00:29:57,540
file and several folders with modules in

640
00:29:57,540 --> 00:30:01,440
them we've got this our library for our

641
00:30:01,440 --> 00:30:05,280
array we've got this CSS x module to

642
00:30:05,280 --> 00:30:09,150
load and manipulate CSS we've got our

643
00:30:09,150 --> 00:30:13,380
AMD loader we're using curl and we've

644
00:30:13,380 --> 00:30:15,210
also what we're using wire for our

645
00:30:15,210 --> 00:30:17,640
inversion of control and we've also got

646
00:30:17,640 --> 00:30:19,800
this view folder and this controller

647
00:30:19,800 --> 00:30:21,810
folder here that actually have our

648
00:30:21,810 --> 00:30:24,660
application code and and how this this

649
00:30:24,660 --> 00:30:26,760
is laid out is just for simplicity you

650
00:30:26,760 --> 00:30:30,510
can get really much more detailed with

651
00:30:30,510 --> 00:30:32,880
your folder structure this is just so

652
00:30:32,880 --> 00:30:38,010
it's easy to easily laid out here so our

653
00:30:38,010 --> 00:30:40,680
views we've got several views in here

654
00:30:40,680 --> 00:30:42,480
let me go back to the application here

655
00:30:42,480 --> 00:30:43,530
and show you how this is we've got a

656
00:30:43,530 --> 00:30:45,660
codes view a heading view and a score

657
00:30:45,660 --> 00:30:47,220
view actually the score views hidden

658
00:30:47,220 --> 00:30:49,200
because we don't have that running yet

659
00:30:49,200 --> 00:30:57,039
but this section up here

660
00:30:57,049 --> 00:30:59,429
this is our heading view up here this

661
00:30:59,429 --> 00:31:01,410
section of the of the application up

662
00:31:01,410 --> 00:31:03,740
there at the top and our codes view is

663
00:31:03,740 --> 00:31:07,410
everything underneath so this is its own

664
00:31:07,410 --> 00:31:10,890
view so i'm using i'm using client side

665
00:31:10,890 --> 00:31:14,190
views so each of these views is actually

666
00:31:14,190 --> 00:31:17,400
a component in our system and each one

667
00:31:17,400 --> 00:31:19,110
of these components consists of three

668
00:31:19,110 --> 00:31:21,510
different files a JavaScript controller

669
00:31:21,510 --> 00:31:25,860
an HTML template this is the PureView in

670
00:31:25,860 --> 00:31:31,710
an MVC world and we've also got a CSS

671
00:31:31,710 --> 00:31:34,110
file this companion to it so and again

672
00:31:34,110 --> 00:31:37,530
the heading has again similarly this

673
00:31:37,530 --> 00:31:39,840
heading component as a JavaScript

674
00:31:39,840 --> 00:31:42,150
controller a template in the CSS joke

675
00:31:42,150 --> 00:31:46,169
right yeah okay so let's see I'll assume

676
00:31:46,169 --> 00:31:59,880
that in for you guess

677
00:31:59,890 --> 00:32:05,380
so so here's a simple template we've you

678
00:32:05,380 --> 00:32:13,170
know it's just very straightforward

679
00:32:13,180 --> 00:32:15,730
here alright here's an example of us

680
00:32:15,730 --> 00:32:20,440
using an AMD defined module our module

681
00:32:20,440 --> 00:32:24,430
itself is that this is really considered

682
00:32:24,430 --> 00:32:27,160
to be a rapper this is the part that one

683
00:32:27,160 --> 00:32:28,870
day when we have javascript modules

684
00:32:28,870 --> 00:32:30,610
that's going to disappear or it's going

685
00:32:30,610 --> 00:32:31,840
to it's going to morph into something

686
00:32:31,840 --> 00:32:33,880
that looks more like import statements

687
00:32:33,880 --> 00:32:35,860
this is really the meat of our module

688
00:32:35,860 --> 00:32:39,910
down here so down here if you if you

689
00:32:39,910 --> 00:32:42,360
take a look we're using almost entirely

690
00:32:42,360 --> 00:32:47,950
standard code you know actually I take

691
00:32:47,950 --> 00:32:49,330
that back we're actually using the

692
00:32:49,330 --> 00:32:50,710
wrapped ones in this version i had

693
00:32:50,710 --> 00:32:52,660
another version that wasn't quite

694
00:32:52,660 --> 00:32:55,690
operational where we were using what

695
00:32:55,690 --> 00:32:59,800
looked like standard dom w3c event codes

696
00:32:59,800 --> 00:33:02,020
so this one uses these wrapped modules

697
00:33:02,020 --> 00:33:05,830
to UM to add remove event listeners to

698
00:33:05,830 --> 00:33:09,790
do a ray iteration and whatnot and we've

699
00:33:09,790 --> 00:33:12,640
also get promises in area yes reset in

700
00:33:12,640 --> 00:33:15,370
the structure of how you're building

701
00:33:15,370 --> 00:33:17,190
that very pop

702
00:33:17,190 --> 00:33:21,060
sort of one aration in your ear mapping

703
00:33:21,060 --> 00:33:23,310
that into the arguments point why don't

704
00:33:23,310 --> 00:33:25,590
you have it was just sort of a name

705
00:33:25,590 --> 00:33:29,010
value set up somebody else coming along

706
00:33:29,010 --> 00:33:32,100
because it I mean that you're going from

707
00:33:32,100 --> 00:33:34,980
vert come from vertical vertical to

708
00:33:34,980 --> 00:33:45,000
horizontal yet III agree actually this

709
00:33:45,000 --> 00:33:46,800
is this is something that takes get some

710
00:33:46,800 --> 00:33:49,050
getting used to and kyle has been

711
00:33:49,050 --> 00:33:51,450
playing with this idea with different

712
00:33:51,450 --> 00:33:53,310
types of rappers that that may or may

713
00:33:53,310 --> 00:33:58,920
not make more sense to you that so he's

714
00:33:58,920 --> 00:34:00,570
gotten mixed reviews about his his

715
00:34:00,570 --> 00:34:03,780
versions of this as well so so but i

716
00:34:03,780 --> 00:34:05,700
definitely agree that sorry indicated in

717
00:34:05,700 --> 00:34:08,430
here at the fact that that this it's

718
00:34:08,430 --> 00:34:09,630
kind of hard to visualize the

719
00:34:09,630 --> 00:34:11,490
relationship between these dependencies

720
00:34:11,490 --> 00:34:14,160
and and there the way they're basically

721
00:34:14,160 --> 00:34:16,440
quote imported as parameters into our

722
00:34:16,440 --> 00:34:26,430
our module so really quickly here we we

723
00:34:26,430 --> 00:34:29,480
just invented our own quick and dirty

724
00:34:29,480 --> 00:34:32,160
templating system here which is just

725
00:34:32,160 --> 00:34:36,240
replace of some tokens if this this is

726
00:34:36,240 --> 00:34:38,640
actually a piece that can be abstracted

727
00:34:38,640 --> 00:34:40,710
out entirely so it doesn't even appear

728
00:34:40,710 --> 00:34:42,480
in your code so your did you don't

729
00:34:42,480 --> 00:34:45,030
you're not actually manipulating your

730
00:34:45,030 --> 00:34:47,010
view inside your controller they just

731
00:34:47,010 --> 00:34:49,710
kind of coexist happily and as well if

732
00:34:49,710 --> 00:34:51,630
you're abstracting the event delegation

733
00:34:51,630 --> 00:34:57,810
out for the event handling out again

734
00:34:57,810 --> 00:35:01,290
this this part down here also can get

735
00:35:01,290 --> 00:35:02,580
extracted out of your code and we're

736
00:35:02,580 --> 00:35:03,750
actually you can actually going to show

737
00:35:03,750 --> 00:35:05,880
an example of that at two o'clock right

738
00:35:05,880 --> 00:35:08,730
yeah yeah yeah cool using an observer

739
00:35:08,730 --> 00:35:12,270
pattern external to the the code itself

740
00:35:12,270 --> 00:35:14,940
to actually hook events together right

741
00:35:14,940 --> 00:35:16,950
so once you pull that out the template

742
00:35:16,950 --> 00:35:18,630
out in the event handling stuff what you

743
00:35:18,630 --> 00:35:20,670
end up with is just pure business logic

744
00:35:20,670 --> 00:35:24,180
and that's that I think is as close to

745
00:35:24,180 --> 00:35:26,610
the ideal as we're going to get so

746
00:35:26,610 --> 00:35:30,780
so let's take a look then at the main

747
00:35:30,780 --> 00:35:43,570
file so here's the main HTML file

748
00:35:43,580 --> 00:35:48,620
standard html5 let's see the first piece

749
00:35:48,620 --> 00:35:51,410
we want to look at is this is the way to

750
00:35:51,410 --> 00:35:54,050
get the AMD loader kick-started we're

751
00:35:54,050 --> 00:35:57,170
saying that look for all of our modules

752
00:35:57,170 --> 00:35:59,900
and the root of our marginal is going to

753
00:35:59,900 --> 00:36:05,480
be in the jas folder here is where I I I

754
00:36:05,480 --> 00:36:09,550
insulted you by correcting you about

755
00:36:09,550 --> 00:36:12,140
where our files are located we can

756
00:36:12,140 --> 00:36:14,300
actually tell the loader where to look

757
00:36:14,300 --> 00:36:16,880
for our files for instance wire is here

758
00:36:16,880 --> 00:36:18,800
our Dom ready wherever we're referencing

759
00:36:18,800 --> 00:36:20,990
this Dom ready module is actually

760
00:36:20,990 --> 00:36:24,020
looking for it here anywhere where it

761
00:36:24,020 --> 00:36:25,970
says CSS in our code it's actually

762
00:36:25,970 --> 00:36:27,770
looking for it here and we can see how

763
00:36:27,770 --> 00:36:29,570
these are mapped over here so see us

764
00:36:29,570 --> 00:36:31,640
it's actually looking for anything

765
00:36:31,640 --> 00:36:33,710
that's called CSS is actually finding it

766
00:36:33,710 --> 00:36:36,140
here and anything that's called Dom

767
00:36:36,140 --> 00:36:39,740
ready its funding it right there we tend

768
00:36:39,740 --> 00:36:41,600
to think of Dom ready is one of those

769
00:36:41,600 --> 00:36:43,760
things that is integral to a framework

770
00:36:43,760 --> 00:36:46,460
or a library but as you can see here it

771
00:36:46,460 --> 00:36:48,350
could just be a module two yeah and

772
00:36:48,350 --> 00:36:52,370
actually the AMD loaders are also taking

773
00:36:52,370 --> 00:36:54,890
this strategy that yet no Dom ready is

774
00:36:54,890 --> 00:36:58,190
its own it's it's own module so it we're

775
00:36:58,190 --> 00:37:00,020
actually pulling them out and allowing

776
00:37:00,020 --> 00:37:02,540
people to pick and choose Dom ready or

777
00:37:02,540 --> 00:37:04,130
use the one in your framework already I

778
00:37:04,130 --> 00:37:05,510
use the one in the loader it doesn't

779
00:37:05,510 --> 00:37:08,150
matter and and more importantly here

780
00:37:08,150 --> 00:37:09,770
anywhere where we see a reference to

781
00:37:09,770 --> 00:37:11,210
query selector all it's actually pulling

782
00:37:11,210 --> 00:37:13,760
in the sizzle engine right here right

783
00:37:13,760 --> 00:37:15,800
there and again I could actually have

784
00:37:15,800 --> 00:37:22,860
mapped that 22

785
00:37:22,870 --> 00:37:25,690
it's actually in this strange location

786
00:37:25,690 --> 00:37:27,070
i'm not even sure if it's still here in

787
00:37:27,070 --> 00:37:28,960
one dot seven but I could actually map

788
00:37:28,960 --> 00:37:32,320
it like that and that would work and if

789
00:37:32,320 --> 00:37:34,090
I can get that running later today I can

790
00:37:34,090 --> 00:37:36,370
I can actually show that I've started

791
00:37:36,370 --> 00:37:37,720
working on a version that actually

792
00:37:37,720 --> 00:37:39,580
substitutes a lot of these things for

793
00:37:39,580 --> 00:37:42,910
for dojos and because we used query

794
00:37:42,910 --> 00:37:45,310
selector all in the dependency list in

795
00:37:45,310 --> 00:37:47,770
our modules we can make the change in

796
00:37:47,770 --> 00:37:49,660
one spot and then everywhere we viewed

797
00:37:49,660 --> 00:37:52,990
you we've imported query selector all we

798
00:37:52,990 --> 00:37:55,240
get the new implementation in this case

799
00:37:55,240 --> 00:37:59,050
dojo query or a jquery implementation

800
00:37:59,050 --> 00:38:02,140
right and the these are some great

801
00:38:02,140 --> 00:38:04,270
examples because dojo and sizzle both

802
00:38:04,270 --> 00:38:06,190
both follow the query select where all

803
00:38:06,190 --> 00:38:07,780
they extend on it you know and you can

804
00:38:07,780 --> 00:38:10,210
actually do additional things that that

805
00:38:10,210 --> 00:38:12,850
weren't in query selector all i'm not i

806
00:38:12,850 --> 00:38:14,620
might be talking on my ass right now but

807
00:38:14,620 --> 00:38:18,340
but um but but you know they also do

808
00:38:18,340 --> 00:38:21,250
more than just the the standard and so

809
00:38:21,250 --> 00:38:23,170
again that's something that needs to be

810
00:38:23,170 --> 00:38:24,790
documented so you know when you break

811
00:38:24,790 --> 00:38:26,470
and breaking the rules so you know if

812
00:38:26,470 --> 00:38:28,090
you you know what you're switching costs

813
00:38:28,090 --> 00:38:37,120
are and then here's an example of us

814
00:38:37,120 --> 00:38:40,270
using the wire plug in for AMD AMD

815
00:38:40,270 --> 00:38:42,790
loaders to actually go and load our app

816
00:38:42,790 --> 00:38:44,980
so let's take a look at app loader this

817
00:38:44,980 --> 00:38:46,420
is actually this is this code that

818
00:38:46,420 --> 00:38:52,430
actually bootstraps our app right here

819
00:38:52,440 --> 00:38:58,480
this this is the language of of wire so

820
00:38:58,480 --> 00:39:00,790
do you want to sure okay just a quick

821
00:39:00,790 --> 00:39:05,650
rundown this is just a define a module

822
00:39:05,650 --> 00:39:08,380
being fine using the free variable so a

823
00:39:08,380 --> 00:39:10,810
wire so a wire spec is just a module

824
00:39:10,810 --> 00:39:13,420
right yeah yeah so this spec is just a

825
00:39:13,420 --> 00:39:16,510
module and this is basically an object

826
00:39:16,510 --> 00:39:18,340
literal that just describes all the

827
00:39:18,340 --> 00:39:20,320
components we want to bring into

828
00:39:20,320 --> 00:39:23,700
existence to make our appt work we have

829
00:39:23,700 --> 00:39:28,300
some data that we're loading from a

830
00:39:28,300 --> 00:39:30,250
module we have a

831
00:39:30,250 --> 00:39:31,960
codes view which you saw just a minute

832
00:39:31,960 --> 00:39:34,720
ago and we specify the AMD module path

833
00:39:34,720 --> 00:39:38,020
to it and some constructor arcs in this

834
00:39:38,020 --> 00:39:39,340
case a dom node where we're going to

835
00:39:39,340 --> 00:39:42,040
stick that view a heading view what you

836
00:39:42,040 --> 00:39:43,630
saw has the picture of the two pirates

837
00:39:43,630 --> 00:39:45,220
we're going to place that in the Dom

838
00:39:45,220 --> 00:39:48,250
also in the heading view container the

839
00:39:48,250 --> 00:39:49,980
score of you which was hidden and our

840
00:39:49,980 --> 00:39:53,980
controller so we're just declaring what

841
00:39:53,980 --> 00:39:58,120
components go into our app and what what

842
00:39:58,120 --> 00:40:00,450
weather where the views needed placed

843
00:40:00,450 --> 00:40:03,460
our controller we're injecting a

844
00:40:03,460 --> 00:40:05,560
reference to the codes view so that the

845
00:40:05,560 --> 00:40:09,520
controller can interact with it so this

846
00:40:09,520 --> 00:40:12,360
is just a sort of a declarative way to

847
00:40:12,360 --> 00:40:15,130
bootstrap all right and all the ten

848
00:40:15,130 --> 00:40:16,780
ponies all right I think we're out of

849
00:40:16,780 --> 00:40:19,030
time is that correct is this we out of

850
00:40:19,030 --> 00:40:22,510
time now all right but anyways this is

851
00:40:22,510 --> 00:40:25,330
just a teaser about how wire works in

852
00:40:25,330 --> 00:40:27,250
the aversive version of control and how

853
00:40:27,250 --> 00:40:30,250
we're injecting you know other modules

854
00:40:30,250 --> 00:40:33,760
and and properties into our modules if

855
00:40:33,760 --> 00:40:35,470
you want to see more about this two

856
00:40:35,470 --> 00:40:39,760
o'clock today right 220 sorry 220 220

857
00:40:39,760 --> 00:40:45,340
today here so any last questions all

858
00:40:45,340 --> 00:40:48,310
right thanks for your time guys good

