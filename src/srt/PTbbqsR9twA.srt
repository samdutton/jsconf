1
00:00:04,879 --> 00:00:15,420

welcome everybody my name is Adam DC I'm

2
00:00:15,420 --> 00:00:18,750
Adam DC dev on Twitter and before I was

3
00:00:18,750 --> 00:00:21,539
a software engineer I attended school

4
00:00:21,539 --> 00:00:23,939
for music specifically music composition

5
00:00:23,939 --> 00:00:26,820
and I was always drawn to the analytical

6
00:00:26,820 --> 00:00:29,160
thinking aspect of music theory and

7
00:00:29,160 --> 00:00:31,109
years later when I started to learn

8
00:00:31,109 --> 00:00:32,880
functional programming I found that that

9
00:00:32,880 --> 00:00:34,620
kind of the same itch was scratched

10
00:00:34,620 --> 00:00:37,890
so when I started a musical project with

11
00:00:37,890 --> 00:00:40,350
web development I decided to use

12
00:00:40,350 --> 00:00:42,059
functional programming so here's my

13
00:00:42,059 --> 00:00:43,710
introduction to functional programming

14
00:00:43,710 --> 00:00:48,000
from a musical perspective so first we

15
00:00:48,000 --> 00:00:50,039
have to ask the question what is

16
00:00:50,039 --> 00:00:53,770
functional programming

17
00:00:53,780 --> 00:00:56,270
well it's programming with functions I

18
00:00:56,270 --> 00:00:59,550
just like object-oriented is based

19
00:00:59,550 --> 00:01:01,170
around objects functions are the

20
00:01:01,170 --> 00:01:03,420
building blocks so that leads the next

21
00:01:03,420 --> 00:01:07,290
question what is a function well a non

22
00:01:07,290 --> 00:01:08,909
functional definition might be something

23
00:01:08,909 --> 00:01:11,850
like a sequence of commands attracted

24
00:01:11,850 --> 00:01:14,250
into a reusable unit but a functional

25
00:01:14,250 --> 00:01:15,720
definition is more something like a

26
00:01:15,720 --> 00:01:17,880
relationship between a set of inputs and

27
00:01:17,880 --> 00:01:20,090
outputs this is the mathematical

28
00:01:20,090 --> 00:01:24,330
definition of of a function and is

29
00:01:24,330 --> 00:01:26,100
sometimes referred to in programming as

30
00:01:26,100 --> 00:01:30,119
a pure function so what makes a function

31
00:01:30,119 --> 00:01:33,750
pure first means given the same

32
00:01:33,750 --> 00:01:35,970
arguments in it will return the same

33
00:01:35,970 --> 00:01:39,780
value this this means that it shouldn't

34
00:01:39,780 --> 00:01:41,520
rely on anything from the outside such

35
00:01:41,520 --> 00:01:43,560
as a random number generator the current

36
00:01:43,560 --> 00:01:47,159
time or a read from the database it also

37
00:01:47,159 --> 00:01:48,450
means no side-effects

38
00:01:48,450 --> 00:01:50,189
this means it shouldn't affect anything

39
00:01:50,189 --> 00:01:52,649
outside of itself it shouldn't many play

40
00:01:52,649 --> 00:01:54,720
the Dom or write to the database or play

41
00:01:54,720 --> 00:01:57,420
music and sometimes this is referred to

42
00:01:57,420 --> 00:02:00,000
as being referentially transparent and

43
00:02:00,000 --> 00:02:01,979
referentially transparent means that the

44
00:02:01,979 --> 00:02:04,140
function and its arguments can be

45
00:02:04,140 --> 00:02:08,280
replaced by its return value so for an

46
00:02:08,280 --> 00:02:10,860
example we are here defining a note it

47
00:02:10,860 --> 00:02:12,180
has a name

48
00:02:12,180 --> 00:02:16,049
and an octave for here we have a pure

49
00:02:16,049 --> 00:02:18,150
function increment octave it accepts a

50
00:02:18,150 --> 00:02:21,090
note and returns a new note with octave

51
00:02:21,090 --> 00:02:24,180
incremented by one pi see here is the

52
00:02:24,180 --> 00:02:27,810
result of that pure function play here

53
00:02:27,810 --> 00:02:29,790
is an impure function because it has a

54
00:02:29,790 --> 00:02:30,810
side-effect

55
00:02:30,810 --> 00:02:33,269
it plays music and here you can note

56
00:02:33,269 --> 00:02:36,120
that you can pass in either high C or

57
00:02:36,120 --> 00:02:38,220
increment octave middle C and have the

58
00:02:38,220 --> 00:02:39,450
same effect this is where the

59
00:02:39,450 --> 00:02:44,069
referential transparency comes in so you

60
00:02:44,069 --> 00:02:45,950
learn functional programming and you

61
00:02:45,950 --> 00:02:49,319
move all side effects and now your

62
00:02:49,319 --> 00:02:52,739
program is useless it's important to

63
00:02:52,739 --> 00:02:54,900
note that side effects are not bad they

64
00:02:54,900 --> 00:02:57,090
include making an HTTP request

65
00:02:57,090 --> 00:02:59,220
manipulating the Dom putting the console

66
00:02:59,220 --> 00:03:01,290
or playing music side effects are not

67
00:03:01,290 --> 00:03:03,180
bad but they are unpredictable and they

68
00:03:03,180 --> 00:03:04,859
are harder to test so you should use

69
00:03:04,859 --> 00:03:06,989
your impure functions carefully and

70
00:03:06,989 --> 00:03:12,239
predictably alright now that we have a

71
00:03:12,239 --> 00:03:14,389
definition of functional programming

72
00:03:14,389 --> 00:03:16,590
here are some of the tools that are

73
00:03:16,590 --> 00:03:19,919
important immutability immutability is

74
00:03:19,919 --> 00:03:23,010
the idea that variable state cannot be

75
00:03:23,010 --> 00:03:24,810
modified after its creation

76
00:03:24,810 --> 00:03:27,949
you might be thinking something like why

77
00:03:27,949 --> 00:03:30,389
why would you like to why would you

78
00:03:30,389 --> 00:03:32,940
limit yourself by tying one hand behind

79
00:03:32,940 --> 00:03:34,980
your back but there is a reason for for

80
00:03:34,980 --> 00:03:37,590
this one of the advantages is that is

81
00:03:37,590 --> 00:03:40,560
less for your brain to track humans have

82
00:03:40,560 --> 00:03:42,659
a working memory it's kind of like the

83
00:03:42,659 --> 00:03:44,729
biological equivalent to RAM you can

84
00:03:44,729 --> 00:03:46,530
only keep track of so many things at a

85
00:03:46,530 --> 00:03:49,590
time so by making sure not to change

86
00:03:49,590 --> 00:03:51,299
your variables let's Lester a brain to

87
00:03:51,299 --> 00:03:53,449
track it also prevents unintentional

88
00:03:53,449 --> 00:03:56,639
side-effects trust me I know from

89
00:03:56,639 --> 00:03:58,349
experience that accidentally changing a

90
00:03:58,349 --> 00:04:00,030
variable and function could be a really

91
00:04:00,030 --> 00:04:03,329
hard bug to track down immutability also

92
00:04:03,329 --> 00:04:05,790
preserves state think about like a bank

93
00:04:05,790 --> 00:04:07,260
account it doesn't just show your

94
00:04:07,260 --> 00:04:08,819
balance it shows your starting balance

95
00:04:08,819 --> 00:04:10,500
and then all of your withdrawals and

96
00:04:10,500 --> 00:04:15,329
deposits I higher-order functions are

97
00:04:15,329 --> 00:04:18,419
functions that either accept a function

98
00:04:18,419 --> 00:04:20,279
as an argument or return a new function

99
00:04:20,279 --> 00:04:22,139
so you might be thinking something like

100
00:04:22,139 --> 00:04:25,740
this here's a

101
00:04:25,740 --> 00:04:29,220
here's an example so we've got tone J s

102
00:04:29,220 --> 00:04:30,720
is a framework on top of the Web Audio

103
00:04:30,720 --> 00:04:33,180
API the Web Audio API itself is very low

104
00:04:33,180 --> 00:04:36,930
level and and maybe a little more than

105
00:04:36,930 --> 00:04:39,120
what you need so the the the Web Audio

106
00:04:39,120 --> 00:04:41,400
API helps abstract it become a little

107
00:04:41,400 --> 00:04:44,520
easier play note here is a higher order

108
00:04:44,520 --> 00:04:48,419
function it accepts a note and it

109
00:04:48,419 --> 00:04:51,930
returns a new function play middle C

110
00:04:51,930 --> 00:04:53,880
here is the result of play note and it

111
00:04:53,880 --> 00:04:57,120
is the new function add event listener

112
00:04:57,120 --> 00:04:59,330
here accepts a function as an argument

113
00:04:59,330 --> 00:05:01,949
so add event listener and played-out are

114
00:05:01,949 --> 00:05:04,590
both higher-order play note because it

115
00:05:04,590 --> 00:05:06,150
returns a function and add event

116
00:05:06,150 --> 00:05:07,199
listener him because it accepts a

117
00:05:07,199 --> 00:05:10,409
function so here's our first beautiful

118
00:05:10,409 --> 00:05:16,020
musical example I promise they get a

119
00:05:16,020 --> 00:05:19,530
little better from here on out I dealing

120
00:05:19,530 --> 00:05:22,020
with arrays manipulating arrays are an

121
00:05:22,020 --> 00:05:24,240
important part of all paradigms and

122
00:05:24,240 --> 00:05:26,250
JavaScript comes with some array methods

123
00:05:26,250 --> 00:05:27,870
that work really well with functional

124
00:05:27,870 --> 00:05:30,690
programming and there are two concepts

125
00:05:30,690 --> 00:05:32,219
that we covered that that are important

126
00:05:32,219 --> 00:05:33,180
to dealing with arrays there's

127
00:05:33,180 --> 00:05:34,830
higher-order functions each of these

128
00:05:34,830 --> 00:05:36,300
methods except a function and

129
00:05:36,300 --> 00:05:38,460
immutability because each of the ment

130
00:05:38,460 --> 00:05:40,590
mentioned methods here will return a new

131
00:05:40,590 --> 00:05:43,800
array so array dot filter right up

132
00:05:43,800 --> 00:05:45,449
filter accepts a function that's run

133
00:05:45,449 --> 00:05:47,490
against every element it receives an

134
00:05:47,490 --> 00:05:49,590
element index and array and it returns a

135
00:05:49,590 --> 00:05:52,560
subset of the original array so here

136
00:05:52,560 --> 00:05:56,250
we're defining the melody is high here

137
00:05:56,250 --> 00:05:59,099
compares and the nose frequency in Hertz

138
00:05:59,099 --> 00:06:02,729
to middle C and if the provider note is

139
00:06:02,729 --> 00:06:04,590
C for or above it will return true

140
00:06:04,590 --> 00:06:06,539
otherwise it will return false so we

141
00:06:06,539 --> 00:06:09,270
passed the is high function into the

142
00:06:09,270 --> 00:06:13,440
melody filter and we get the only the

143
00:06:13,440 --> 00:06:16,409
values that remain so here we have an

144
00:06:16,409 --> 00:06:17,680
unfiltered melody

145
00:06:17,680 --> 00:06:22,400
[Music]

146
00:06:22,400 --> 00:06:24,680
and when we remove all the notes that

147
00:06:24,680 --> 00:06:30,910
are that are that don't pass the is hi

148
00:06:30,910 --> 00:06:34,439
[Music]

149
00:06:34,449 --> 00:06:38,630
we have the new melody a write up map is

150
00:06:38,630 --> 00:06:40,220
similar it accepts a function that's run

151
00:06:40,220 --> 00:06:42,169
against every element and receives the

152
00:06:42,169 --> 00:06:45,070
element index and array but rather than

153
00:06:45,070 --> 00:06:48,650
checking if a value is truthy or faulty

154
00:06:48,650 --> 00:06:50,990
it returns an array of the same length

155
00:06:50,990 --> 00:06:54,229
as the original but with new values so

156
00:06:54,229 --> 00:06:58,699
here we have a melody and we have our

157
00:06:58,699 --> 00:07:00,350
increment octave function from before it

158
00:07:00,350 --> 00:07:02,150
takes a note and it returns a new note

159
00:07:02,150 --> 00:07:06,440
and we can map the notes with this

160
00:07:06,440 --> 00:07:08,419
increment octave function then we have

161
00:07:08,419 --> 00:07:10,430
the same melody but each notes octave

162
00:07:10,430 --> 00:07:12,010
has been incremented

163
00:07:12,010 --> 00:07:20,099
[Music]

164
00:07:20,099 --> 00:07:22,990
now we have a radar produced a radar

165
00:07:22,990 --> 00:07:24,729
reduce is a little bit more complicated

166
00:07:24,729 --> 00:07:26,319
it accepts a function that's run against

167
00:07:26,319 --> 00:07:29,050
every every element but in addition to

168
00:07:29,050 --> 00:07:30,789
the element index and array it also

169
00:07:30,789 --> 00:07:32,979
receives an accumulator and returns an

170
00:07:32,979 --> 00:07:35,499
accumulated value this is also known as

171
00:07:35,499 --> 00:07:38,289
fold or accumulate in some languages and

172
00:07:38,289 --> 00:07:40,959
it is a more generic tool than filter or

173
00:07:40,959 --> 00:07:43,959
map I sometimes hear that radar reduced

174
00:07:43,959 --> 00:07:45,909
takes an array and it returns a single

175
00:07:45,909 --> 00:07:49,029
value this is true but I don't find it

176
00:07:49,029 --> 00:07:51,249
to be a particularly useful distinction

177
00:07:51,249 --> 00:07:53,439
because all functions in JavaScript will

178
00:07:53,439 --> 00:07:56,349
return a single value so I like to think

179
00:07:56,349 --> 00:07:58,449
of array dot reduced as a value that

180
00:07:58,449 --> 00:08:00,309
takes an array and it can return any

181
00:08:00,309 --> 00:08:03,550
type filter for example will take an

182
00:08:03,550 --> 00:08:06,369
array and it will return a new array

183
00:08:06,369 --> 00:08:08,529
that is of smaller size array that map

184
00:08:08,529 --> 00:08:11,259
will take an array and it will return a

185
00:08:11,259 --> 00:08:13,119
new array of the same length both with

186
00:08:13,119 --> 00:08:17,519
different values a rate not reduce can

187
00:08:17,519 --> 00:08:19,779
return anything whether it be a number

188
00:08:19,779 --> 00:08:23,169
or a string or an array filter and map

189
00:08:23,169 --> 00:08:26,499
for example can be written in reduce so

190
00:08:26,499 --> 00:08:28,240
here's here's an example we have a

191
00:08:28,240 --> 00:08:30,490
little bit longer melody we define the

192
00:08:30,490 --> 00:08:33,669
notes and the length here we have a two

193
00:08:33,669 --> 00:08:34,719
length function that's going to be

194
00:08:34,719 --> 00:08:37,599
passed to reduce total here is the

195
00:08:37,599 --> 00:08:40,449
accumulator and note here is the array

196
00:08:40,449 --> 00:08:43,419
element the method here accepts the

197
00:08:43,419 --> 00:08:46,120
function two length and an initial value

198
00:08:46,120 --> 00:08:49,060
and it will return the end accumulation

199
00:08:49,060 --> 00:08:51,430
so we start with the initial value of

200
00:08:51,430 --> 00:08:54,910
zero and then we add it to each to each

201
00:08:54,910 --> 00:08:57,670
note length so zero plus point one two

202
00:08:57,670 --> 00:09:00,720
five plus point one two five is 0.25

203
00:09:00,720 --> 00:09:03,220
point three seven five and so on until

204
00:09:03,220 --> 00:09:06,699
we get to the overall melodies length so

205
00:09:06,699 --> 00:09:13,470
here didn't update the timer supposed to

206
00:09:13,470 --> 00:09:18,160
go up on my screen says one point six

207
00:09:18,160 --> 00:09:22,050
two five

208
00:09:22,060 --> 00:09:24,970
partial application personal application

209
00:09:24,970 --> 00:09:27,850
is an incredibly useful tool for writing

210
00:09:27,850 --> 00:09:29,860
reusable and generic functions and

211
00:09:29,860 --> 00:09:32,440
partial application works by pre setting

212
00:09:32,440 --> 00:09:33,970
or fixing some of the arguments to a

213
00:09:33,970 --> 00:09:38,020
function so here we've got the transpose

214
00:09:38,020 --> 00:09:41,320
function it takes a direction an

215
00:09:41,320 --> 00:09:43,600
interval and a note and it returns a new

216
00:09:43,600 --> 00:09:46,210
note so here up nature third is a

217
00:09:46,210 --> 00:09:51,640
partially apply transpose it accepts a

218
00:09:51,640 --> 00:09:55,600
note and it calls transpose with up and

219
00:09:55,600 --> 00:09:59,350
a major third preset so here we can

220
00:09:59,350 --> 00:10:05,340
convert c4 to e4 or b-flat - to d3 and

221
00:10:05,340 --> 00:10:07,390
partial application is currently in

222
00:10:07,390 --> 00:10:10,240
stage one of the tc39 proposal and if

223
00:10:10,240 --> 00:10:11,470
that goes through then you'll be able to

224
00:10:11,470 --> 00:10:13,750
use the question mark to partially apply

225
00:10:13,750 --> 00:10:15,940
function so here are down minor seventh

226
00:10:15,940 --> 00:10:20,040
is a partially apply transpose as well

227
00:10:20,040 --> 00:10:23,530
so you don't have to manually apply it

228
00:10:23,530 --> 00:10:27,010
hard code each of the functions so here

229
00:10:27,010 --> 00:10:29,770
we can map using array to map these

230
00:10:29,770 --> 00:10:31,300
partial applied functions to an array of

231
00:10:31,300 --> 00:10:31,900
notes

232
00:10:31,900 --> 00:10:35,229
[Music]

233
00:10:35,239 --> 00:10:37,199
which I could take credit for that

234
00:10:37,199 --> 00:10:44,429
melody here's it Maps it down a minor

235
00:10:44,429 --> 00:10:54,179
70s alright composition composition I

236
00:10:54,179 --> 00:10:56,610
find to really be the bread and butter a

237
00:10:56,610 --> 00:10:59,160
functional programming and composition

238
00:10:59,160 --> 00:11:00,749
is a technique to combine multiple

239
00:11:00,749 --> 00:11:03,989
functions into a new function so here

240
00:11:03,989 --> 00:11:05,249
we're going to take a note name and

241
00:11:05,249 --> 00:11:06,629
we'll return a slightly detuned

242
00:11:06,629 --> 00:11:09,480
frequency first we have a function

243
00:11:09,480 --> 00:11:10,799
converting a note name to a frequency

244
00:11:10,799 --> 00:11:15,600
for example an input of a4 would which

245
00:11:15,600 --> 00:11:17,279
is a note name of a and an octave a4

246
00:11:17,279 --> 00:11:20,399
will return 440 that's the the Hertz of

247
00:11:20,399 --> 00:11:23,519
that note and here we're defining

248
00:11:23,519 --> 00:11:25,439
function to multiply by small percentage

249
00:11:25,439 --> 00:11:26,939
so once we have that frequency we can

250
00:11:26,939 --> 00:11:31,259
detune it so in input a 440 would return

251
00:11:31,259 --> 00:11:35,699
444 0.4 so compose takes two new

252
00:11:35,699 --> 00:11:37,199
functions and calls them from right to

253
00:11:37,199 --> 00:11:41,179
left the right to left is because

254
00:11:41,179 --> 00:11:44,329
compose is a mathematical concept and

255
00:11:44,329 --> 00:11:46,889
compose reads them from right to left if

256
00:11:46,889 --> 00:11:49,619
you are you can use pike which is a

257
00:11:49,619 --> 00:11:52,019
similar idea but from left to right and

258
00:11:52,019 --> 00:11:53,369
we'll be looking at that a little bit

259
00:11:53,369 --> 00:11:56,850
later so here get deep get d2 dn't

260
00:11:56,850 --> 00:11:59,249
frequency is a new composition that

261
00:11:59,249 --> 00:12:01,799
takes an input and it passes it first to

262
00:12:01,799 --> 00:12:05,999
frequency and then to detune up so an

263
00:12:05,999 --> 00:12:10,290
input of a four will return 444 0.4 so

264
00:12:10,290 --> 00:12:15,179
passing through the 440 value and the

265
00:12:15,179 --> 00:12:18,419
pipeline operator is also in the stage 1

266
00:12:18,419 --> 00:12:21,179
of tc39 and it would also allow for easy

267
00:12:21,179 --> 00:12:23,579
function composition allow you the pipe

268
00:12:23,579 --> 00:12:26,879
of value through multiple functions here

269
00:12:26,879 --> 00:12:34,079
we got our a for our detuned a form all

270
00:12:34,079 --> 00:12:36,329
right putting it all together I promised

271
00:12:36,329 --> 00:12:38,160
we'd be composing music with composed

272
00:12:38,160 --> 00:12:40,319
functions well here we're gonna be

273
00:12:40,319 --> 00:12:42,059
writing a function that converts a

274
00:12:42,059 --> 00:12:44,999
human-readable shorthand into a computer

275
00:12:44,999 --> 00:12:48,209
readable array alright so can everybody

276
00:12:48,209 --> 00:12:52,110
read this alright so don't don't worry I

277
00:12:52,110 --> 00:12:54,649
will zoom in on the important parts

278
00:12:54,649 --> 00:12:56,879
first we're gonna be importing some

279
00:12:56,879 --> 00:12:59,430
dependencies from Ram de and tan Jaya

280
00:12:59,430 --> 00:13:03,180
Ram de is a utility library similar to

281
00:13:03,180 --> 00:13:06,060
lodash or underscores but with a more

282
00:13:06,060 --> 00:13:09,960
functional approach and you might note

283
00:13:09,960 --> 00:13:11,550
that there are a lot of functions I'm

284
00:13:11,550 --> 00:13:13,290
importing one of the cool things about

285
00:13:13,290 --> 00:13:14,670
functional programming is that you take

286
00:13:14,670 --> 00:13:16,590
lots of small functions and combine them

287
00:13:16,590 --> 00:13:20,580
together with composition so for example

288
00:13:20,580 --> 00:13:23,070
parse name here is a function it takes a

289
00:13:23,070 --> 00:13:25,530
shorthand note and it returns the name

290
00:13:25,530 --> 00:13:30,360
so c4 at a 10 would be a string where

291
00:13:30,360 --> 00:13:32,220
the C is the note name the fours are

292
00:13:32,220 --> 00:13:36,060
octave in the 8 n is the duration so

293
00:13:36,060 --> 00:13:38,640
pipes through first to this regex

294
00:13:38,640 --> 00:13:40,320
and that will return an array of

295
00:13:40,320 --> 00:13:44,100
matching strings so any valid note name

296
00:13:44,100 --> 00:13:47,040
and then it takes a head to return just

297
00:13:47,040 --> 00:13:49,740
the full string so when passing in c4 at

298
00:13:49,740 --> 00:13:52,170
a 10 the match function will return an

299
00:13:52,170 --> 00:13:55,050
array of C and then head function will

300
00:13:55,050 --> 00:13:58,830
take that and return just C so C for a

301
00:13:58,830 --> 00:14:01,680
day 10 becomes array of the string c2

302
00:14:01,680 --> 00:14:04,530
just the string seed parse octave is

303
00:14:04,530 --> 00:14:08,400
similar imagines it to digits and then

304
00:14:08,400 --> 00:14:10,980
we convert it to a number and parse

305
00:14:10,980 --> 00:14:13,530
duration similarly will split at the at

306
00:14:13,530 --> 00:14:16,470
symbol and it will take the last so c4

307
00:14:16,470 --> 00:14:19,260
at a 10 will bring an array of c4 comma

308
00:14:19,260 --> 00:14:23,040
a 10 and then just a 10 first time here

309
00:14:23,040 --> 00:14:25,080
is a little bit more complicated it

310
00:14:25,080 --> 00:14:28,830
takes a note and its context and it

311
00:14:28,830 --> 00:14:32,370
returns a scheduled time so here we have

312
00:14:32,370 --> 00:14:35,190
the array of notes we're slicing it to

313
00:14:35,190 --> 00:14:39,270
only those preceding in and then we map

314
00:14:39,270 --> 00:14:42,570
each of those to their length and we

315
00:14:42,570 --> 00:14:45,000
reduce those to a single value and

316
00:14:45,000 --> 00:14:47,910
overall this lets the Web Audio API know

317
00:14:47,910 --> 00:14:50,100
when to play each note you're taking the

318
00:14:50,100 --> 00:14:52,650
duration of all the notes before an

319
00:14:52,650 --> 00:14:55,860
individual note and you're taking the

320
00:14:55,860 --> 00:14:57,270
direction of them all and adding them

321
00:14:57,270 --> 00:14:58,800
together and that lets you know when to

322
00:14:58,800 --> 00:14:59,720
play the new note

323
00:14:59,720 --> 00:15:03,120
so here parse shorthand is a composition

324
00:15:03,120 --> 00:15:06,150
of compositions where it accepts a

325
00:15:06,150 --> 00:15:07,770
string and it will return an array of

326
00:15:07,770 --> 00:15:11,130
note objects so first it splits at all

327
00:15:11,130 --> 00:15:12,899
whitespace converting a string

328
00:15:12,899 --> 00:15:15,779
to an array of strings and an array map

329
00:15:15,779 --> 00:15:18,449
here works like the array da map but as

330
00:15:18,449 --> 00:15:20,009
a function so that allows us to pipe

331
00:15:20,009 --> 00:15:22,949
into it and apply spec here takes an

332
00:15:22,949 --> 00:15:25,589
object shape with functions each string

333
00:15:25,589 --> 00:15:28,230
in the in the array that we just split

334
00:15:28,230 --> 00:15:30,059
will be passed into each of these

335
00:15:30,059 --> 00:15:32,879
functions and it will be mapped to an

336
00:15:32,879 --> 00:15:35,369
object of the same shape so the string

337
00:15:35,369 --> 00:15:37,499
will be passed a parse name and that'll

338
00:15:37,499 --> 00:15:39,600
be the value for the key name the string

339
00:15:39,600 --> 00:15:41,519
we passed a part octave they'll be the

340
00:15:41,519 --> 00:15:46,170
value for the key octave and so on so

341
00:15:46,170 --> 00:15:48,089
overall with our purse shorthand

342
00:15:48,089 --> 00:15:50,660
function which takes an array of strings

343
00:15:50,660 --> 00:15:55,949
this input string will be split at

344
00:15:55,949 --> 00:15:58,050
whitespace become this array of strings

345
00:15:58,050 --> 00:16:00,689
which will become this array of note

346
00:16:00,689 --> 00:16:04,139
objects as that allows us to convert

347
00:16:04,139 --> 00:16:23,850
this into this or we can convert this

348
00:16:23,850 --> 00:16:27,420
into this

349
00:16:27,430 --> 00:16:40,300
[Music]

350
00:16:40,310 --> 00:16:43,350
[Applause]

351
00:16:43,350 --> 00:16:45,399
again I wish I could take credit for

352
00:16:45,399 --> 00:16:49,209
those melodies but so why do you want to

353
00:16:49,209 --> 00:16:50,920
use functional programming I've heard

354
00:16:50,920 --> 00:16:53,800
that it allows for easier easier reason

355
00:16:53,800 --> 00:16:56,560
ability easier debugging easier testing

356
00:16:56,560 --> 00:16:59,410
for me I find that functional

357
00:16:59,410 --> 00:17:02,050
programming is really nice because it

358
00:17:02,050 --> 00:17:04,030
forces you to break down problems into

359
00:17:04,030 --> 00:17:07,209
their smallest parts and by taking those

360
00:17:07,209 --> 00:17:11,140
small parts you can combine the tiny

361
00:17:11,140 --> 00:17:15,309
solutions into larger solutions so if

362
00:17:15,309 --> 00:17:17,169
you found this interesting and would

363
00:17:17,169 --> 00:17:19,929
like to go further a few great resources

364
00:17:19,929 --> 00:17:21,880
I would highly suggest professor

365
00:17:21,880 --> 00:17:23,589
frisbees mostly adequate guide to

366
00:17:23,589 --> 00:17:26,829
functional programming it's it's a great

367
00:17:26,829 --> 00:17:30,429
book available online for free it goes

368
00:17:30,429 --> 00:17:31,809
very in-depth into functional

369
00:17:31,809 --> 00:17:34,570
programming also I would suggest is

370
00:17:34,570 --> 00:17:36,010
looking into functional utility

371
00:17:36,010 --> 00:17:38,530
libraries looking into their functions

372
00:17:38,530 --> 00:17:40,900
Ramba is the one that I used here lo -

373
00:17:40,900 --> 00:17:43,929
FB is a similar uses similar functional

374
00:17:43,929 --> 00:17:47,830
techniques but with but is based on low

375
00:17:47,830 --> 00:17:50,980
- so if you're familiar with low - that

376
00:17:50,980 --> 00:17:53,140
that might be a better fit and just

377
00:17:53,140 --> 00:17:54,669
looking at these and asking yourself

378
00:17:54,669 --> 00:17:57,760
when might you use this function I found

379
00:17:57,760 --> 00:18:00,160
really is a great way to level up and

380
00:18:00,160 --> 00:18:02,910
also lambda cast is a great podcast for

381
00:18:02,910 --> 00:18:06,330
for all things functional programming

382
00:18:06,330 --> 00:18:08,950
thank you so much if you have any

383
00:18:08,950 --> 00:18:09,700
questions

384
00:18:09,700 --> 00:18:12,010
catch me afterwards or message me at

385
00:18:12,010 --> 00:18:14,559
Adam GC dev and the slides are available

386
00:18:14,559 --> 00:18:16,299
at compos'd

387
00:18:16,299 --> 00:18:19,010
Adam GC calm thank you

388
00:18:19,010 --> 00:18:21,910
[Applause]

