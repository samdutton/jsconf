1
00:00:00,380 --> 00:00:01,790
Well, our next talk is by Luke Herrington
on components as data, so a round of applause,

2
00:00:01,790 --> 00:00:02,790
please.

3
00:00:02,790 --> 00:00:03,790
[applause]

4
00:00:03,790 --> 00:00:05,070
All right, let's get started.

5
00:00:05,070 --> 00:00:09,400
Hey, everyone, my name is Luke Herrington,
I'm a senior JavaScript engineer at Four Kitchens,

6
00:00:09,400 --> 00:00:15,240
we're a digital agency and we make big websites.

7
00:00:15,240 --> 00:00:22,460
Actually my work on NBC.com and the apps that
inspired this talk, the API work.

8
00:00:22,460 --> 00:00:25,589
And the talk is components as data.

9
00:00:25,589 --> 00:00:31,789
Across-platform GraphQL powered component
API and if that's not a mouthful, we're going

10
00:00:31,789 --> 00:00:32,980
to unpack it, don't worry.

11
00:00:32,980 --> 00:00:39,280
I just threw a bunch of buzzwords in there
to get you all to come, all right?

12
00:00:39,280 --> 00:00:41,370
So let's start with components.

13
00:00:41,370 --> 00:00:46,920
Components are these things that show up in
our front ends and everyone across our industry

14
00:00:46,920 --> 00:00:49,030
is using them to build UIs.

15
00:00:49,030 --> 00:00:53,030
They're the fundamental building blocks of
a UI.

16
00:00:53,030 --> 00:00:59,470
Doesn't matter what framework, what platform
you're building on, you're using components

17
00:00:59,470 --> 00:01:02,310
to build it most likely.

18
00:01:02,310 --> 00:01:03,830
So I think components win.

19
00:01:03,830 --> 00:01:08,819
We found a really good abstraction for building
UI.

20
00:01:08,819 --> 00:01:12,120
But what is a component?

21
00:01:12,120 --> 00:01:14,070
So I like to define components this way.

22
00:01:14,070 --> 00:01:17,280
This is kind of like pseudomath here.

23
00:01:17,280 --> 00:01:21,520
A component is a function of rendering props
and state.

24
00:01:21,520 --> 00:01:28,409
And those words might sound familiar to you
if you've built a React app.

25
00:01:28,409 --> 00:01:32,159
Let's dig into those words a little bit more.

26
00:01:32,159 --> 00:01:37,079
So props, I think of, as read-only external
data.

27
00:01:37,079 --> 00:01:41,579
They're basically the parameters to your render
function.

28
00:01:41,579 --> 00:01:45,310
State is going to be local data that changes
over time.

29
00:01:45,310 --> 00:01:52,600
And your render is a declarative representation
of the UI based upon the current props and

30
00:01:52,600 --> 00:01:56,460
state.

31
00:01:56,460 --> 00:02:01,759
So let's start with just this simple example
of a component, and then we'll get on to the

32
00:02:01,759 --> 00:02:04,159
API stuff.

33
00:02:04,159 --> 00:02:06,079
So here we have a switch component.

34
00:02:06,079 --> 00:02:15,080
A switch component has a label, it has some
state, whether or not it's on or off, and

35
00:02:15,080 --> 00:02:17,220
it has some presentation to it.

36
00:02:17,220 --> 00:02:22,730
You know, when it's on, it's green, when it's
off it's white.

37
00:02:22,730 --> 00:02:29,080
So the thing about components is that they're
also composable, so we could take this switch

38
00:02:29,080 --> 00:02:34,940
component, and we could add it to a row, for
example.

39
00:02:34,940 --> 00:02:40,780
And say we take that row component, and we
add it to our settings screen and suddenly

40
00:02:40,780 --> 00:02:50,150
we have basically a screen in our application.

41
00:02:50,150 --> 00:02:52,450
So I love components.

42
00:02:52,450 --> 00:02:57,870
As a '90s kid, who grew up building LEGOs,
I can't help but love them, they feel like

43
00:02:57,870 --> 00:03:02,590
LEGOs, and they're genuinely fun to work with
and we see this happening in our industry,

44
00:03:02,590 --> 00:03:08,590
it doesn't matter if you're building with
something like SWIFT UI, or React, ReactNative,

45
00:03:08,590 --> 00:03:19,130
VUe, you're using this general abstraction
and I think it's because it's a good one.

46
00:03:19,130 --> 00:03:23,320
So I'm going to stop gushing about components
now because this is an API talk and you're

47
00:03:23,320 --> 00:03:26,390
thinking, OK, where do we get to this whole
GraphQL thing?

48
00:03:26,390 --> 00:03:33,530
So, but I just love components so much so
I'm going to leave this slide up for a second.

49
00:03:33,530 --> 00:03:34,530
No.

50
00:03:34,530 --> 00:03:35,980
Let's move on.

51
00:03:35,980 --> 00:03:45,350
So when you get into building an application,
there's these pieces to your app, to your

52
00:03:45,350 --> 00:03:53,470
architecture, and I'm going to use this throughout
the talk to kind of describe this API approach.

53
00:03:53,470 --> 00:03:57,250
So generally you're going to have some sort
of database or data store.

54
00:03:57,250 --> 00:04:02,340
You're going to have business logic, which
describes the rules that your business wants

55
00:04:02,340 --> 00:04:05,960
to accomplish and help the user.

56
00:04:05,960 --> 00:04:10,680
You're going to have some data fetching with
some third-party or external APIs, and you're

57
00:04:10,680 --> 00:04:15,820
going to be denormallizing your data from
your database with maybe some third party

58
00:04:15,820 --> 00:04:18,239
or other API data.

59
00:04:18,239 --> 00:04:24,420
And you're probably going solve some sort
of feature flags, A/B testing and then of

60
00:04:24,420 --> 00:04:28,350
course you're going to have some sort of component
library.

61
00:04:28,350 --> 00:04:33,690
And you're going to kind of stitch that all
together in a composable way into the pieces

62
00:04:33,690 --> 00:04:39,900
and the pages or screens for your application.

63
00:04:39,900 --> 00:04:46,750
So you can combine these things in countless
ways and it's basically our job to figure

64
00:04:46,750 --> 00:04:52,290
out how do we, you know, how do we put these
together?

65
00:04:52,290 --> 00:04:56,270
And as you're building these things, usually
there comes a point in the conversation where

66
00:04:56,270 --> 00:05:01,250
you're architecting an application of OK,
are we going to, you know, take more of a

67
00:05:01,250 --> 00:05:05,880
monolithic approach or are we going to decouple
and build an API?

68
00:05:05,880 --> 00:05:11,350
So when you're decoupling, we've had these
kind of conversations before.

69
00:05:11,350 --> 00:05:14,780
Who should use like a decoupled architecture?

70
00:05:14,780 --> 00:05:15,930
What is decoupling?

71
00:05:15,930 --> 00:05:17,600
Let's define the terms.

72
00:05:17,600 --> 00:05:20,750
When should you do that in a project life
cycle?

73
00:05:20,750 --> 00:05:21,750
Why?

74
00:05:21,750 --> 00:05:22,750
Why is it a good idea?

75
00:05:22,750 --> 00:05:25,340
Why is it a bad idea sometimes.

76
00:05:25,340 --> 00:05:26,460
And how?

77
00:05:26,460 --> 00:05:27,910
The how-to.

78
00:05:27,910 --> 00:05:32,120
But one thing that we generally neglect and
I don't think it's on purpose but I think

79
00:05:32,120 --> 00:05:35,680
it's assumed is where.

80
00:05:35,680 --> 00:05:41,300
Where do we decouple our applications?

81
00:05:41,300 --> 00:05:46,760
So in this talk, we're going to use our friend,
the decouple line, to kind of describe and

82
00:05:46,760 --> 00:05:52,580
explore this question of where do you decouple
your application.

83
00:05:52,580 --> 00:05:58,210
So as the decouple line moves around your
architecture, some really interesting features

84
00:05:58,210 --> 00:06:01,630
of your API are exposed.

85
00:06:01,630 --> 00:06:09,389
Some -- the format of your API is exposed
and the content of your API is different.

86
00:06:09,389 --> 00:06:14,340
So let's start by describing a typical decoupled
architecture.

87
00:06:14,340 --> 00:06:22,669
This is one that I think is basically assumed
in general when we build APIs for our apps.

88
00:06:22,669 --> 00:06:28,610
And that is, that you basically decouple right
before business logic, but right after the

89
00:06:28,610 --> 00:06:35,389
data store, and essentially you're building
an API that exposes the raw data of your data

90
00:06:35,389 --> 00:06:38,280
store, your database.

91
00:06:38,280 --> 00:06:45,400
And this API is going to have listing functionality,
it's going to have filtering functionality,

92
00:06:45,400 --> 00:06:50,270
sorting, including, or joining of some sort.

93
00:06:50,270 --> 00:06:51,770
It's pretty typical.

94
00:06:51,770 --> 00:07:00,050
And a good example of this approach is the
JSON API spec, which is an API format specification.

95
00:07:00,050 --> 00:07:06,639
In this format you're going to roughly map
CRUD operations to HTTP verbs and the queries

96
00:07:06,639 --> 00:07:14,810
are going to look pretty atomic and low-level
and almost like a SQL query.

97
00:07:14,810 --> 00:07:20,400
Where you're basically saying, give me the
authors and you better know there's an authors

98
00:07:20,400 --> 00:07:23,540
table somewhere in your database.

99
00:07:23,540 --> 00:07:27,699
And I want to get the posts for those authors
and there's probably a post, too, and you

100
00:07:27,699 --> 00:07:34,180
can see what I mean by kind of it being pretty
closely mapping to your data model.

101
00:07:34,180 --> 00:07:41,810
So I think this is what people usually mean
when they say that their API is RESTful, and

102
00:07:41,810 --> 00:07:49,900
let's be real: No one really knows what that
means except for our fearless leader Roy Fielding.

103
00:07:49,900 --> 00:07:50,900
But let's look back here.

104
00:07:50,900 --> 00:07:56,009
This leaves, if you look kind of on the other
side of the decouple line, this leaves a lot

105
00:07:56,009 --> 00:07:58,419
for API consumers to implement.

106
00:07:58,419 --> 00:08:00,580
This leaves them with business logic.

107
00:08:00,580 --> 00:08:08,350
Further API fetching and denormalization,
A/B testing, and the whole gamut.

108
00:08:08,350 --> 00:08:14,590
So let's move this line over a bit to here.

109
00:08:14,590 --> 00:08:22,330
So in this approach, you're exposing business
logic in your API, and this is a really common

110
00:08:22,330 --> 00:08:25,320
approach for product companies.

111
00:08:25,320 --> 00:08:31,330
You're still exposing the resources of your
data store, but you're also exposing operations

112
00:08:31,330 --> 00:08:37,490
upon that date Y
This is -- it's more than just resources or

113
00:08:37,490 --> 00:08:40,080
entities that you're exposing.

114
00:08:40,080 --> 00:08:44,120
A great example of something like this is
Stripe's API.

115
00:08:44,120 --> 00:08:50,380
Stripe is a payment as a service company and
they expose a really, really powerful API

116
00:08:50,380 --> 00:08:58,080
for working with things like charges and customers
and subscriptions, right?

117
00:08:58,080 --> 00:09:04,430
But you're not just simply going and getting
a subscriber and then deleting a subscriber.

118
00:09:04,430 --> 00:09:09,580
Stripe also exposes parts of their business
logic in the API.

119
00:09:09,580 --> 00:09:13,870
So you could dispute a charge.

120
00:09:13,870 --> 00:09:16,640
What HTTP verb does that map to?

121
00:09:16,640 --> 00:09:17,640
Not really any.

122
00:09:17,640 --> 00:09:23,870
Any of these kind of APIs can get really powerful.

123
00:09:23,870 --> 00:09:29,930
They're essentially exposing their business
logic to you and most of their customers are

124
00:09:29,930 --> 00:09:34,880
going to be developers that need to -- need
someone else to deal with the hard bits of

125
00:09:34,880 --> 00:09:39,390
payments, for example.

126
00:09:39,390 --> 00:09:47,490
So this format, and the prior, get really
powerful when you introduce something like

127
00:09:47,490 --> 00:09:52,880
HATEOAS, stands for hypermedia as the engine
of application state.

128
00:09:52,880 --> 00:09:57,550
So a big mouthful there.

129
00:09:57,550 --> 00:10:03,880
So let me give you an example of what HATEOAS
looks like in action and this is a very basic

130
00:10:03,880 --> 00:10:06,990
example in my opinion.

131
00:10:06,990 --> 00:10:14,970
I think pagination of resources in your API
is an example of HATEOAS.

132
00:10:14,970 --> 00:10:23,860
So imagine that we have this listing API where
we're going to get a list of things, and below

133
00:10:23,860 --> 00:10:29,620
our data, we're going to return this kind
of like metadata attribute in our response,

134
00:10:29,620 --> 00:10:31,250
called links.

135
00:10:31,250 --> 00:10:39,880
And the links are going to include these things
like self, next, previous, last, first.

136
00:10:39,880 --> 00:10:46,250
So if these links exist, the UI can know that
there's more to see or that there's something

137
00:10:46,250 --> 00:10:50,890
else before this page of the list.

138
00:10:50,890 --> 00:10:56,190
So what they can do is wire up their UI, to
based upon the existence of one of these properties,

139
00:10:56,190 --> 00:11:02,140
create a next button or a previous button,
and in that way the server is powering the

140
00:11:02,140 --> 00:11:03,330
state.

141
00:11:03,330 --> 00:11:11,100
We could do things like calculating the last
page, by dividing the total count of the number

142
00:11:11,100 --> 00:11:17,330
of items in this list, by the page size.

143
00:11:17,330 --> 00:11:24,750
If some links don't exist, then you simply
don't create the UI for that.

144
00:11:24,750 --> 00:11:29,290
And the other really powerful thing about
HATEOAS in hypermedia is that you can swap

145
00:11:29,290 --> 00:11:33,440
out the implementation without friends even
knowing.

146
00:11:33,440 --> 00:11:36,399
So in this example I've switched to an offset-based
pager.

147
00:11:36,399 --> 00:11:39,790
You can do the same for a cursor-based pager.

148
00:11:39,790 --> 00:11:48,070
And because they are running a git request
for it, they know no different.

149
00:11:48,070 --> 00:11:49,130
Super powerful.

150
00:11:49,130 --> 00:11:57,810
Imagine doing that for your users, if you're
working on a SaaS and expose an API.

151
00:11:57,810 --> 00:12:07,180
You're exposing all of these actions and operations
that they could basically generate and machine-read

152
00:12:07,180 --> 00:12:10,470
and work with.

153
00:12:10,470 --> 00:12:17,640
So there's kind of the explanation for this
architecture.

154
00:12:17,640 --> 00:12:22,880
So let's move the line all the way over to
this other side.

155
00:12:22,880 --> 00:12:26,580
And this one's a bit of a stretch, I'll admit
it.

156
00:12:26,580 --> 00:12:28,360
It's not really an API anymore.

157
00:12:28,360 --> 00:12:33,019
You're basically building a monolith where
you're sending HTML, CSS, JavaScript, down

158
00:12:33,019 --> 00:12:34,420
the wire.

159
00:12:34,420 --> 00:12:39,640
But it's a decision to make, nonetheless,
when you're choosing your application.

160
00:12:39,640 --> 00:12:44,430
And I want to kind of address the element
in the room here, that the room monolith has

161
00:12:44,430 --> 00:12:50,920
become this low-grade insult in our industry
and I think that's a shame.

162
00:12:50,920 --> 00:12:56,580
I think it's a case of guilt by association.

163
00:12:56,580 --> 00:13:01,060
There's folks in our industry that have been
in the industry for a long time and worked

164
00:13:01,060 --> 00:13:07,070
on these large codebases or joined a team
as a new member and had this legacy quote-unquote

165
00:13:07,070 --> 00:13:11,150
application that was really difficult to work
with and maybe it was poorly designed and

166
00:13:11,150 --> 00:13:14,990
it also happened to be a monolith, because
that's how everything was built for a very

167
00:13:14,990 --> 00:13:18,529
long time.

168
00:13:18,529 --> 00:13:24,980
But just because the different pieces of the
application don't communicate over the network

169
00:13:24,980 --> 00:13:27,040
doesn't mean that the app is poorly written.

170
00:13:27,040 --> 00:13:30,260
In fact, I would argue the opposite.

171
00:13:30,260 --> 00:13:36,399
You could take a poorly written monolith and
break it up into microservices, and now you

172
00:13:36,399 --> 00:13:37,830
have two problems.

173
00:13:37,830 --> 00:13:41,360
You have a poorly designed application that
communicates over the network and you have

174
00:13:41,360 --> 00:13:45,800
CAP theorem to deal with now and concurrency
and consistency issues.

175
00:13:45,800 --> 00:13:50,140
So don't go so hard on the monolith.

176
00:13:50,140 --> 00:13:55,930
I think it's a pretty good pattern.

177
00:13:55,930 --> 00:13:59,210
Monolith does not mean spaghetti code.

178
00:13:59,210 --> 00:14:01,230
OK.

179
00:14:01,230 --> 00:14:11,030
So let's move on to the next ... 
this one's interesting.

180
00:14:11,030 --> 00:14:18,150
What is an application that -- whose database
lives in the client?

181
00:14:18,150 --> 00:14:23,380
Well, it's an offline-first application or
it's a local-first application.

182
00:14:23,380 --> 00:14:30,140
And I'm really excited about this kind of
pattern right here, these days.

183
00:14:30,140 --> 00:14:37,350
In a world where people and their data, their
private data, has become a product, this pattern,

184
00:14:37,350 --> 00:14:40,709
I think, could be really helpful.

185
00:14:40,709 --> 00:14:47,700
OK, I'll get off my soapbox.

186
00:14:47,700 --> 00:14:52,339
There's some really interesting research happening
in distributed, local-first, offline-first

187
00:14:52,339 --> 00:14:53,350
applications.

188
00:14:53,350 --> 00:14:58,690
It's a hard problem, so you have an app that
has been offline for two weeks and connects

189
00:14:58,690 --> 00:15:03,260
to the network and needs to sync with other
nodes in the network?

190
00:15:03,260 --> 00:15:06,050
How do you solve that problem?

191
00:15:06,050 --> 00:15:08,690
It's a hard problem to solve.

192
00:15:08,690 --> 00:15:11,330
But it's a real problem.

193
00:15:11,330 --> 00:15:19,209
If you have a customer who's going to be out
in the field for two weeks or in low-latency

194
00:15:19,209 --> 00:15:25,181
and no internet connection, this might be
an API that you consider building, and it

195
00:15:25,181 --> 00:15:28,670
kind of takes the form of syncing.

196
00:15:28,670 --> 00:15:34,730
There's some really interesting research happening
in this spot with CRDTs, which stand for commutative

197
00:15:34,730 --> 00:15:36,120
replicated data types.

198
00:15:36,120 --> 00:15:44,529
Wherein you seepsly model the operations on
your data as commutative, so you can basically

199
00:15:44,529 --> 00:15:50,280
not worry about the order in which operations
happen, when you reconnect to the network.

200
00:15:50,280 --> 00:15:52,200
*
Really excited about this pattern and I think

201
00:15:52,200 --> 00:15:56,260
more apps should be built with data privacy
in mind.

202
00:15:56,260 --> 00:15:59,079
Data ownership.

203
00:15:59,079 --> 00:16:01,829
OK.

204
00:16:01,829 --> 00:16:07,870
So finally, let's move to components as data.

205
00:16:07,870 --> 00:16:15,320
In components as data, the back end has essentially
absorbed a lot more work, but leaves something

206
00:16:15,320 --> 00:16:16,860
for the frontends to do.

207
00:16:16,860 --> 00:16:26,829
And at this point, the backend kind of becomes
a frontend in its own right so what this looks

208
00:16:26,829 --> 00:16:33,769
like is an API that serves JSON, structured
in terms of a UI tree.

209
00:16:33,769 --> 00:16:39,880
And if that sounds confusing, we're going
to unpack it and get some examples here.

210
00:16:39,880 --> 00:16:47,690
So your components can be described as data.

211
00:16:47,690 --> 00:16:49,600
Hence the name components as data.

212
00:16:49,600 --> 00:16:51,730
So let's get to an example.

213
00:16:51,730 --> 00:16:53,670
Here's the most basic example I could think
of.

214
00:16:53,670 --> 00:16:55,450
A hero component.

215
00:16:55,450 --> 00:17:03,040
So here we have a JSON blob with a field called
component.

216
00:17:03,040 --> 00:17:12,040
That component field is going to map directly
to a component in your component library.

217
00:17:12,040 --> 00:17:13,900
And then you have the data.

218
00:17:13,900 --> 00:17:20,919
And the data is essentially going to represent
the props that are needed to render that component.

219
00:17:20,919 --> 00:17:28,950
Any state that the component might have is
going to be locally handled.

220
00:17:28,950 --> 00:17:30,850
So I wanted to address another thing.

221
00:17:30,850 --> 00:17:37,250
When React was first released, there was this
big conversation that happened about separation

222
00:17:37,250 --> 00:17:39,010
of concerns.

223
00:17:39,010 --> 00:17:46,040
In the creators of React's mind, I think there
was this ability to question best practices

224
00:17:46,040 --> 00:17:49,610
and I'm glad they did it.

225
00:17:49,610 --> 00:17:57,590
But then also, with the introduction of hooks,
which is a way of abstracting logic out of

226
00:17:57,590 --> 00:18:03,790
components, and suspense, which is going to
solve for data fetching and a couple other

227
00:18:03,790 --> 00:18:12,720
problems, I think we've seen that the component
as an abstraction isn't necessarily the best

228
00:18:12,720 --> 00:18:19,230
abstraction for expressing business logic,
or data fetching.

229
00:18:19,230 --> 00:18:26,049
So I think that this pattern kind of works
with that a little bit.

230
00:18:26,049 --> 00:18:29,840
So this is a scary part in the talk where
I need to load an iFrame.

231
00:18:29,840 --> 00:18:31,679
Oh, my gosh!

232
00:18:31,679 --> 00:18:32,900
It worked!

233
00:18:32,900 --> 00:18:33,900
OK.

234
00:18:33,900 --> 00:18:34,900
Whew!

235
00:18:34,900 --> 00:18:43,910
So we used this pattern to build out NBC.com
and all of its apps, Android, iOS, Roku, and

236
00:18:43,910 --> 00:18:47,290
the TV app Samsung video.

237
00:18:47,290 --> 00:18:57,580
So we used this component data to basically
render the slideshow here, some shelves, with

238
00:18:57,580 --> 00:19:02,670
your favorite shows, this is us, any it this
is Us fans out there?

239
00:19:02,670 --> 00:19:04,070
OK.

240
00:19:04,070 --> 00:19:07,130
How about Will and Grace?

241
00:19:07,130 --> 00:19:16,820
It's the '90s, OK!

242
00:19:16,820 --> 00:19:20,950
So we used this pattern at NBC.

243
00:19:20,950 --> 00:19:32,530
We started out kind of around here with a
very data-centric metric API.

244
00:19:32,530 --> 00:19:36,540
Including and joining kinds of logic.

245
00:19:36,540 --> 00:19:40,669
This left a lot fort frontends to do and they
were all reimplementing basically the same

246
00:19:40,669 --> 00:19:47,260
queries with basically the same business logic
and having to deal with all sorts of denormalization

247
00:19:47,260 --> 00:19:48,330
on sides.

248
00:19:48,330 --> 00:19:56,040
They were all doing similar AB tests, and
it didn't seem dry when ultimately we wanted

249
00:19:56,040 --> 00:19:58,880
a consistent experience across platforms.

250
00:19:58,880 --> 00:20:06,169
So we built this proxy of sorts where we're
including and denormallizing data from multiple

251
00:20:06,169 --> 00:20:14,910
sources, multiple APIs and giving the clients
much more to work with and much less responsibility.

252
00:20:14,910 --> 00:20:21,620
But then has we built this out, we found that
what the business wanted was a very powerful

253
00:20:21,620 --> 00:20:29,760
suite of A/B testing and very quick process-platform
A/B testing and feature flagging and reimplementing

254
00:20:29,760 --> 00:20:35,500
that across platforms was more work than it
needed to be.

255
00:20:35,500 --> 00:20:39,160
So what we did was moved toward components
as data where we absorbed that work and we

256
00:20:39,160 --> 00:20:45,360
absorbed the component library into the back
end.

257
00:20:45,360 --> 00:20:50,830
So some basic components that live in the
NBC data model would be, you know, a slideshow

258
00:20:50,830 --> 00:20:52,490
that contains slides.

259
00:20:52,490 --> 00:20:56,480
A shelf that might contain a series tile,
or a video tile.

260
00:20:56,480 --> 00:20:59,840
So those are what we're going to be working
with our examples here.

261
00:20:59,840 --> 00:21:05,270
It's a very basic example.

262
00:21:05,270 --> 00:21:09,630
So we chose GraphQL to implement this pattern,
and I think the reason we ultimately did it

263
00:21:09,630 --> 00:21:13,590
was because of the types and the queries.

264
00:21:13,590 --> 00:21:21,559
The coupling you of the queries and the types
in GraphQL is a perfect match, in my opinion.

265
00:21:21,559 --> 00:21:29,669
The way that these types need to be shared,
especially in the component library as data,

266
00:21:29,669 --> 00:21:34,420
it was just really powerful to be able to
describe those with GraphQL schema.

267
00:21:34,420 --> 00:21:38,350
And we'll show some benefits of doing that.

268
00:21:38,350 --> 00:21:43,530
So let's just do a quick overview of what
the GraphQL schema looks like for an application

269
00:21:43,530 --> 00:21:47,049
like this, and this is again a simplified
example.

270
00:21:47,049 --> 00:21:51,330
So we're going to have an interface called
component with a component field like we talked

271
00:21:51,330 --> 00:21:57,330
about earlier, and a treatment field and this
treatment field was essentially our quasi--like

272
00:21:57,330 --> 00:22:04,360
class name field, that works cross-platform,
so if we wanted a component to be, you know,

273
00:22:04,360 --> 00:22:10,500
the primary or the featured type of component,
we didn't have to create a whole new component

274
00:22:10,500 --> 00:22:11,500
for that.

275
00:22:11,500 --> 00:22:14,970
We could just augment it with this treatment
field, like a class.

276
00:22:14,970 --> 00:22:21,280
Then we have our video tile and the video
tile also has a component and treatment field

277
00:22:21,280 --> 00:22:25,130
and it's going to have a data field like we
talked about, and that data field will contain

278
00:22:25,130 --> 00:22:29,650
like an image, title, secondary title, and
percent viewed.

279
00:22:29,650 --> 00:22:35,580
We decoupled the data from the component for
use if another data type might need video

280
00:22:35,580 --> 00:22:39,200
data.

281
00:22:39,200 --> 00:22:43,010
So then we have our shelf and a shelf is going
to contain tiles.

282
00:22:43,010 --> 00:22:50,090
So we define a series tile in a similar manner
and we union the video and series tile together

283
00:22:50,090 --> 00:22:56,350
into this tile union and the shelf data, the
data for the shelf is going to contain this

284
00:22:56,350 --> 00:23:02,440
items field, which is basically a slot for
tiles to live.

285
00:23:02,440 --> 00:23:09,040
It's kind of like children, but it's more
specifically kind of tied to like a slot of

286
00:23:09,040 --> 00:23:13,830
components.

287
00:23:13,830 --> 00:23:18,100
So we're going to introduce this new interface
called section, right?

288
00:23:18,100 --> 00:23:26,380
And you'll see why in a bit, but this section
interface is going to kind of delineate a

289
00:23:26,380 --> 00:23:30,410
shelf component from other types of components.

290
00:23:30,410 --> 00:23:34,799
It's a component, but it's also a section.

291
00:23:34,799 --> 00:23:38,690
Same goes for featured: Slideshow is a different
type of component.

292
00:23:38,690 --> 00:23:40,620
It's like a featured component, right?

293
00:23:40,620 --> 00:23:44,360
And these things might have different properties,
different analytics, information, and metadata

294
00:23:44,360 --> 00:23:50,830
information, and so introducing a new interface
makes sense.

295
00:23:50,830 --> 00:23:52,559
So a slideshow contains slides.

296
00:23:52,559 --> 00:23:56,180
I think we get the picture there.

297
00:23:56,180 --> 00:23:59,480
And then finally we're going to have our page
type.

298
00:23:59,480 --> 00:24:03,380
The page type stitches this all together,
it takes a featured field, which is going

299
00:24:03,380 --> 00:24:08,230
to be, you know, like that slideshow up on
the top at the home page, for example and

300
00:24:08,230 --> 00:24:12,900
then the sections field which is essentially
going to represent all of the shelves in the

301
00:24:12,900 --> 00:24:21,340
UI and the query will obviously take the name,
user ID for personalization, and a platform.

302
00:24:21,340 --> 00:24:25,840
So that we can vary the same platform.

303
00:24:25,840 --> 00:24:27,900
So let's give another example.

304
00:24:27,900 --> 00:24:32,799
This is what it's going to look like in Apollo
Playground.

305
00:24:32,799 --> 00:24:35,059
So here we have our home page.

306
00:24:35,059 --> 00:24:38,230
We're using our page field.

307
00:24:38,230 --> 00:24:44,150
We're querying the home page for user ID loop
on platform web and you can see here that

308
00:24:44,150 --> 00:24:50,159
we're spreading our slideshow fragment into
featured, shelf into sections, and as we build

309
00:24:50,159 --> 00:24:55,289
out more and more components that are of the
section's interface, we would add more like

310
00:24:55,289 --> 00:25:00,039
a group or other types.

311
00:25:00,039 --> 00:25:06,900
So here we have our fragments that are going
to look as you would expect.

312
00:25:06,900 --> 00:25:11,980
And this is what it looks like to send back
a UI tree as JSON.

313
00:25:11,980 --> 00:25:17,580
We have our page, with our featured section
and our sections array.

314
00:25:17,580 --> 00:25:23,200
And we have our component, called slideshow
with items of slides.

315
00:25:23,200 --> 00:25:28,820
And sections are going to contain our shelf
and in this case we have a top picks for you

316
00:25:28,820 --> 00:25:36,360
shelf, personalized just for you.

317
00:25:36,360 --> 00:25:39,460
Let's show another example: You don't have
to just build out pages this way.

318
00:25:39,460 --> 00:25:44,860
There's nothing that is forcing you to build
out an entire page response.

319
00:25:44,860 --> 00:25:46,610
You can build out certain features.

320
00:25:46,610 --> 00:25:49,900
So when I talked about absorbing the business
logic, this is kind of what I meant.

321
00:25:49,900 --> 00:25:55,240
One of the features of NBC.com or really any
media-streaming kind of platform is some kind

322
00:25:55,240 --> 00:25:59,840
of continue watching feature where you can
pick up where you've left off the videos you've

323
00:25:59,840 --> 00:26:01,980
been watching.

324
00:26:01,980 --> 00:26:07,760
So here we've exposed a continue watching
field that just returns the continue watching

325
00:26:07,760 --> 00:26:14,570
shelf, a bunch of video tiles with some percent
viewed, some images, and the UI is going to

326
00:26:14,570 --> 00:26:28,220
map over this field and generically render
its contents.

327
00:26:28,220 --> 00:26:32,230
So let's talk about this -- I think that what
we're describing here is some sort of design

328
00:26:32,230 --> 00:26:38,970
schema, where your component libraries is
described in terms of GraphQL, in terms of

329
00:26:38,970 --> 00:26:40,100
a schema.

330
00:26:40,100 --> 00:26:46,780
And this is, I think, what we are trying to
accomplish often when we build a design system,

331
00:26:46,780 --> 00:26:53,300
is we want rules, we want structure, and this
type system ensures that.

332
00:26:53,300 --> 00:26:58,799
A great example of this is when you throw
in the schema and do an open source tool like

333
00:26:58,799 --> 00:27:06,210
GraphQL Voyager, and you can see kind of this
component library described as a graph.

334
00:27:06,210 --> 00:27:12,010
So let's look at page, which is going to contain
featured, and sections.

335
00:27:12,010 --> 00:27:23,840
So go to sections, where there's a shelf,
data, there's our tile union, and then a tile

336
00:27:23,840 --> 00:27:28,080
could be a video tile or a series tile.

337
00:27:28,080 --> 00:27:37,230
With their respective data.

338
00:27:37,230 --> 00:27:41,380
So what does it look like to actually implement
this on the front end?

339
00:27:41,380 --> 00:27:46,240
We showed kind of the back-end implementation
and we're going to use React to implement

340
00:27:46,240 --> 00:27:47,840
this.

341
00:27:47,840 --> 00:27:49,429
So we'll start with our component library.

342
00:27:49,429 --> 00:27:53,460
That's how most front-end projects begin and
we'll build out a slideshow.

343
00:27:53,460 --> 00:27:58,340
A slideshow is going to have some state, as
to which slide it's currently on.

344
00:27:58,340 --> 00:27:59,679
A slide number.

345
00:27:59,679 --> 00:28:05,150
And it's going to receive props and remember
that the props here is the data that comes

346
00:28:05,150 --> 00:28:06,919
from the API.

347
00:28:06,919 --> 00:28:11,320
So it's going to include this items field.

348
00:28:11,320 --> 00:28:16,970
So we could map over the items field, and
get slides.

349
00:28:16,970 --> 00:28:23,309
And we're going to generically render the
children using this dictionary.

350
00:28:23,309 --> 00:28:26,750
Passing the data through and the current state
of the slide member.

351
00:28:26,750 --> 00:28:31,240
Here is a boring slide component.

352
00:28:31,240 --> 00:28:37,430
These are just example snippets here.

353
00:28:37,430 --> 00:28:42,120
So these dictionaries are where kind of the
magic happens here.

354
00:28:42,120 --> 00:28:46,340
These dictionaries map to the interfaces ins
in our schema.

355
00:28:46,340 --> 00:28:51,970
So you remember our features interface and
our sections interface, so we add the respective

356
00:28:51,970 --> 00:28:58,600
components from the components library into
these dictionaries.

357
00:28:58,600 --> 00:29:05,029
Then when we want to go render a component,
we use the respective dictionary, we grab

358
00:29:05,029 --> 00:29:11,070
the component field, look up the component
in the dictionary, and generically render

359
00:29:11,070 --> 00:29:14,080
it with its data.

360
00:29:14,080 --> 00:29:19,970
Finally, here's an example of how we could
stitch together that full-page query that

361
00:29:19,970 --> 00:29:26,570
I showed you, where we're using the featured
section with the featured dictionary.

362
00:29:26,570 --> 00:29:33,470
Grabbing out the featured property, and then
rendering our sections array, and mapping

363
00:29:33,470 --> 00:29:39,150
over the sections and rendering whatever component
we have.

364
00:29:39,150 --> 00:29:48,110
So this is, I think, a pretty interesting
solution to a hard problem that NBC had.

365
00:29:48,110 --> 00:29:49,820
And maybe you have it too.

366
00:29:49,820 --> 00:29:57,220
Here are some of the hard parts: When business
logic gets fragmented and you're centralizing

367
00:29:57,220 --> 00:30:02,700
the business logic, you have to deal with
it in a centralized way, and that it can mean

368
00:30:02,700 --> 00:30:03,929
bloat.

369
00:30:03,929 --> 00:30:05,510
And something you tried to dry out.

370
00:30:05,510 --> 00:30:11,919
If you've ever tried to dry code with don't
repeat yourself and then it turned out that

371
00:30:11,919 --> 00:30:16,700
oh, actually, I kind of wanted to repeat myself.

372
00:30:16,700 --> 00:30:19,520
The same goes with variance across platforms.

373
00:30:19,520 --> 00:30:32,030
If Android wants that slight tweak or another
platform wants another tweak.

374
00:30:32,030 --> 00:30:39,539
So 
we solved those by creating this abstraction

375
00:30:39,539 --> 00:30:44,100
that we called the conditional resolver and
you saw maybe if you're here in the last talk

376
00:30:44,100 --> 00:30:49,230
what a resolver looks like and a conditional
resolver allows you to essentially compose

377
00:30:49,230 --> 00:30:54,730
an array of resolvers together with some basic
conditions that are going to be looking at

378
00:30:54,730 --> 00:31:02,299
the args off your query, a the variables off
your query and the context, as well, and choosing

379
00:31:02,299 --> 00:31:06,330
the time to run.

380
00:31:06,330 --> 00:31:08,250
Another thing was pagination.

381
00:31:08,250 --> 00:31:17,750
So we solved this by creating a lazy shelf
that tells the front end, hey, when you render

382
00:31:17,750 --> 00:31:23,520
this thing, there's not very much to do, but
we were able to tell them, hey, implement

383
00:31:23,520 --> 00:31:28,450
it like this, when you get a lazy shelf, use
this query that we're going to give you the

384
00:31:28,450 --> 00:31:34,059
query name in the lazy shelf data and then
use these variables that we're passing to

385
00:31:34,059 --> 00:31:39,100
you, and when you render, make this call and
when you get the callback and the response,

386
00:31:39,100 --> 00:31:41,760
you'll get a component and you'll swap it
out.

387
00:31:41,760 --> 00:31:47,480
So if you get a lazy shelf, you render it,
it fires off a request and returns a shelf

388
00:31:47,480 --> 00:31:49,690
and then you just swap in the shelf.

389
00:31:49,690 --> 00:31:55,029
There are some good parts, too.

390
00:31:55,029 --> 00:31:58,030
This led to vastly simpler front ends.

391
00:31:58,030 --> 00:32:00,960
it's a different problem set for them to solve.

392
00:32:00,960 --> 00:32:02,770
It's not easy, don't get me wrong.

393
00:32:02,770 --> 00:32:04,490
But it's simpler.

394
00:32:04,490 --> 00:32:11,720
We're also able to centralize business logic
which has a lot of pros, lets fragmentation

395
00:32:11,720 --> 00:32:14,280
and differences across platforms.

396
00:32:14,280 --> 00:32:28,250
Also, centralizing A/B testing and feature
flagging has been a huge boon. same goes for

397
00:32:28,250 --> 00:32:34,880
feature flagging and releases, we also get
this design consistency with a design schema.

398
00:32:34,880 --> 00:32:39,890
The documentation for a component library
for a front end is described in schema, and

399
00:32:39,890 --> 00:32:46,070
you can use all of these really interesting
GraphQL tools out there to document it and

400
00:32:46,070 --> 00:32:50,250
finally on the server side we're able to do
some query optimization and caching that you

401
00:32:50,250 --> 00:32:55,630
simply wouldn't have been able to do on the
front end.

402
00:32:55,630 --> 00:33:00,669
So here's what I'll leave you with: I'm not
saying that everyone should use this pattern.

403
00:33:00,669 --> 00:33:09,809
In fact, I would caution you against it if
you have a very transactional-heavy app or

404
00:33:09,809 --> 00:33:17,760
if you have a UI that is very form-based,
or I think you get what I'm saying.

405
00:33:17,760 --> 00:33:25,039
If you're serving content or media, and you
need to be very swift in *AB tests and you're

406
00:33:25,039 --> 00:33:28,309
doing that across platforms, this might be
a good fit for you.

407
00:33:28,309 --> 00:33:31,230
It's not for everyone, though.

408
00:33:31,230 --> 00:33:35,360
And I guess what I'm leaving you with, if
you're going to design an API, think outside

409
00:33:35,360 --> 00:33:36,360
the box.

410
00:33:36,360 --> 00:33:42,779
You never know what you might come up with
and you can have some fun doing it, as well.

411
00:33:42,779 --> 00:33:43,899
Thanks everyone for having me.

412
00:33:43,899 --> 00:33:45,110
It's been an honor speaking here.

413
00:33:45,110 --> 00:33:48,750
Thank you to the conference organizers and
come talk to me afterwards.

