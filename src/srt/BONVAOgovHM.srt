1
00:00:07,280 --> 00:00:09,290

[Applause]

2
00:00:09,290 --> 00:00:11,849
I'm really excited to be kicking us off

3
00:00:11,849 --> 00:00:14,219
today and I'm very excited because I'll

4
00:00:14,219 --> 00:00:16,619
be talking about tamagotchis and es6

5
00:00:16,619 --> 00:00:20,340
generators so quick recap I'm Jen I'm a

6
00:00:20,340 --> 00:00:22,380
front-end architect at a company called

7
00:00:22,380 --> 00:00:24,869
the wing we are based out of the United

8
00:00:24,869 --> 00:00:26,910
States and we build co-working spaces

9
00:00:26,910 --> 00:00:29,699
that are women first if you want to

10
00:00:29,699 --> 00:00:32,130
reach me the best place is twitter my

11
00:00:32,130 --> 00:00:35,700
handle is girl code girl with a u and at

12
00:00:35,700 --> 00:00:37,500
the end I'm definitely gonna post these

13
00:00:37,500 --> 00:00:39,600
slides so if you miss something do not

14
00:00:39,600 --> 00:00:42,239
worry the slides are gonna be posted ok

15
00:00:42,239 --> 00:00:47,889
how many of you had a tamagotchi

16
00:00:47,899 --> 00:00:52,170
ok a good number of you so if you aren't

17
00:00:52,170 --> 00:00:54,300
familiar with what a Tomahawk is it was

18
00:00:54,300 --> 00:00:56,940
a really popular digital pet in the

19
00:00:56,940 --> 00:00:59,879
1990s it was a handheld device like this

20
00:00:59,879 --> 00:01:03,149
and the game was that a Tamagotchi would

21
00:01:03,149 --> 00:01:05,970
appear on the screen in a shell it would

22
00:01:05,970 --> 00:01:08,640
break out of its egg and then you were

23
00:01:08,640 --> 00:01:10,740
responsible for raising the Tamagotchi

24
00:01:10,740 --> 00:01:12,780
to adulthood so it would go from a baby

25
00:01:12,780 --> 00:01:15,630
like this to a teenager to an adult and

26
00:01:15,630 --> 00:01:17,670
then when it became an adult you didn't

27
00:01:17,670 --> 00:01:19,500
know what type of Tamagotchi you were

28
00:01:19,500 --> 00:01:21,479
gonna get so that was like the fun

29
00:01:21,479 --> 00:01:24,330
surprise of it now I had a Tamagotchi

30
00:01:24,330 --> 00:01:26,400
growing up in fact they were even banned

31
00:01:26,400 --> 00:01:28,560
from my school because they made a

32
00:01:28,560 --> 00:01:30,090
beeping sound when they need something

33
00:01:30,090 --> 00:01:33,000
from you and unfortunately that meant a

34
00:01:33,000 --> 00:01:34,590
lot of my Tamagotchis didn't make it

35
00:01:34,590 --> 00:01:39,000
rest in peace but I really really love

36
00:01:39,000 --> 00:01:41,159
this game growing up and I decided I

37
00:01:41,159 --> 00:01:43,380
want to make a web based version of it

38
00:01:43,380 --> 00:01:47,040
so my web-based version includes an SVG

39
00:01:47,040 --> 00:01:50,100
shell for the game the controls are

40
00:01:50,100 --> 00:01:52,619
actually made out of divs and then the

41
00:01:52,619 --> 00:01:55,640
screen is made out of the canvas element

42
00:01:55,640 --> 00:01:57,659
now if you've never worked with the

43
00:01:57,659 --> 00:01:59,939
canvas element it's really easy to work

44
00:01:59,939 --> 00:02:02,700
with you're going to query the Dom for

45
00:02:02,700 --> 00:02:05,130
the canvas element and then to draw on

46
00:02:05,130 --> 00:02:06,930
the canvas you're going to request the

47
00:02:06,930 --> 00:02:09,000
type of context that you want so in this

48
00:02:09,000 --> 00:02:12,360
case we want to D not 3d and then you're

49
00:02:12,360 --> 00:02:12,790
gonna

50
00:02:12,790 --> 00:02:16,689
an image to draw and some XY coordinates

51
00:02:16,689 --> 00:02:17,890
that I'm really not going to get into

52
00:02:17,890 --> 00:02:18,970
right now because they don't matter as

53
00:02:18,970 --> 00:02:22,150
much and you're gonna do draw image that

54
00:02:22,150 --> 00:02:23,500
image to the screen so you can see that

55
00:02:23,500 --> 00:02:26,970
my Tamagotchi is drawn to the screen and

56
00:02:26,970 --> 00:02:30,220
then for the animations in the game I

57
00:02:30,220 --> 00:02:33,549
decided I want to use a sprite sheet so

58
00:02:33,549 --> 00:02:35,739
below is the sprite to bounce the

59
00:02:35,739 --> 00:02:37,900
Tamagotchi so if you go one two three

60
00:02:37,900 --> 00:02:41,739
I'll go up so if I need to animate this

61
00:02:41,739 --> 00:02:45,010
I need to draw it at zero and then 200

62
00:02:45,010 --> 00:02:48,040
and then 400 pixels so that's going to

63
00:02:48,040 --> 00:02:50,019
bounce the Tamagotchi up and then I

64
00:02:50,019 --> 00:02:51,609
would do those coordinates the opposite

65
00:02:51,609 --> 00:02:55,120
way to go down now you'll also notice

66
00:02:55,120 --> 00:02:57,970
that I'm using context clear between the

67
00:02:57,970 --> 00:02:59,980
drawings and that is to avoid this

68
00:02:59,980 --> 00:03:03,579
situation so if you don't clear between

69
00:03:03,579 --> 00:03:05,590
your drawings they just draw right on

70
00:03:05,590 --> 00:03:07,629
top of each other so you always draw and

71
00:03:07,629 --> 00:03:10,510
then clear and so the way this code is

72
00:03:10,510 --> 00:03:13,810
written this this isn't going to work so

73
00:03:13,810 --> 00:03:16,389
I'm pressing one of the controls and as

74
00:03:16,389 --> 00:03:18,970
you see the Tamagotchi is just one of

75
00:03:18,970 --> 00:03:21,160
the frames being drawn and that's

76
00:03:21,160 --> 00:03:22,870
because we're drawing and clearing the

77
00:03:22,870 --> 00:03:26,079
contact so quickly that you only see the

78
00:03:26,079 --> 00:03:28,120
last frame being drawn you're not gonna

79
00:03:28,120 --> 00:03:30,579
see the other ones so what I actually

80
00:03:30,579 --> 00:03:33,760
need to do with this animation is that I

81
00:03:33,760 --> 00:03:37,449
need to delay it so the original game

82
00:03:37,449 --> 00:03:39,669
has this really old school like choppy

83
00:03:39,669 --> 00:03:42,549
animation so that's what I want to do I

84
00:03:42,549 --> 00:03:45,340
want to delay it like that and I can use

85
00:03:45,340 --> 00:03:48,310
set timeout to do this and this works so

86
00:03:48,310 --> 00:03:50,470
now you can see the Tamagotchi is

87
00:03:50,470 --> 00:03:52,299
bouncing up and down I'm going from

88
00:03:52,299 --> 00:03:54,579
frame 1 2 3 and then back for a full

89
00:03:54,579 --> 00:03:58,090
bounce but you know this has actually

90
00:03:58,090 --> 00:04:01,000
created a problem for me because now all

91
00:04:01,000 --> 00:04:05,650
of my animations are async so you know

92
00:04:05,650 --> 00:04:07,629
how do I know when an animation has

93
00:04:07,629 --> 00:04:09,699
completed how do I know when I can

94
00:04:09,699 --> 00:04:11,590
safely kick off another animation

95
00:04:11,590 --> 00:04:14,500
without overwriting the previous one the

96
00:04:14,500 --> 00:04:16,090
truth is I don't I'd have to sort of

97
00:04:16,090 --> 00:04:18,280
measure and keep track of how long these

98
00:04:18,280 --> 00:04:20,709
animations take and that's just not

99
00:04:20,709 --> 00:04:23,229
sustainable for a game that is full of

100
00:04:23,229 --> 00:04:24,440
animations

101
00:04:24,440 --> 00:04:27,950
what I want is to resolve an animation

102
00:04:27,950 --> 00:04:31,100
and then handle another animation and

103
00:04:31,100 --> 00:04:33,710
this sounds a lot like a promise

104
00:04:33,710 --> 00:04:37,160
now promises represent eventual values

105
00:04:37,160 --> 00:04:40,160
so I can animate inside of a promise

106
00:04:40,160 --> 00:04:43,100
resolve it and because it's a venable I

107
00:04:43,100 --> 00:04:47,870
can then kick off another animation so

108
00:04:47,870 --> 00:04:49,730
for the first version of this game

109
00:04:49,730 --> 00:04:51,320
that's exactly what I did

110
00:04:51,320 --> 00:04:54,560
I used promises for every animation I

111
00:04:54,560 --> 00:04:57,310
made a general purpose animate function

112
00:04:57,310 --> 00:05:00,140
that takes in a draw function and the

113
00:05:00,140 --> 00:05:02,960
milliseconds for the delay so animate

114
00:05:02,960 --> 00:05:05,960
always returns a new promise and inside

115
00:05:05,960 --> 00:05:08,900
of that promise an inner function runs

116
00:05:08,900 --> 00:05:11,510
the draw function and we delegate

117
00:05:11,510 --> 00:05:13,280
resolving the promise to the draw

118
00:05:13,280 --> 00:05:16,040
function so if the draw resolves the

119
00:05:16,040 --> 00:05:18,340
promise and returns true we're done

120
00:05:18,340 --> 00:05:21,620
otherwise set timeout is called with the

121
00:05:21,620 --> 00:05:24,320
inner function and another loop of this

122
00:05:24,320 --> 00:05:28,370
occurs so here we're going to use the

123
00:05:28,370 --> 00:05:30,560
animate function to create a bounce up

124
00:05:30,560 --> 00:05:33,320
animation we're gonna pass a function

125
00:05:33,320 --> 00:05:35,120
that draws the correct frame it's gonna

126
00:05:35,120 --> 00:05:37,340
clear the context it's gonna increment

127
00:05:37,340 --> 00:05:39,860
the current frame and when the current

128
00:05:39,860 --> 00:05:41,810
frame is greater than the frame count

129
00:05:41,810 --> 00:05:44,419
the promise is resolved and we return

130
00:05:44,419 --> 00:05:47,240
true now this would stop the function

131
00:05:47,240 --> 00:05:49,160
from setting another loop via set

132
00:05:49,160 --> 00:05:52,880
timeout so now we can create a simple

133
00:05:52,880 --> 00:05:55,190
bounce function using our bounce up

134
00:05:55,190 --> 00:05:57,800
animation and it bounced down animation

135
00:05:57,800 --> 00:06:00,320
using the same animate function and as

136
00:06:00,320 --> 00:06:02,890
you can see our Tamagotchi is bouncing

137
00:06:02,890 --> 00:06:05,930
now with those animations out of the way

138
00:06:05,930 --> 00:06:08,210
what we need to work on is creating the

139
00:06:08,210 --> 00:06:11,240
main game loop so when you're not

140
00:06:11,240 --> 00:06:13,910
interacting with the Tamagotchi it goes

141
00:06:13,910 --> 00:06:15,830
through a loop it sort of bounces up and

142
00:06:15,830 --> 00:06:17,810
down moves a bit this way moves it that

143
00:06:17,810 --> 00:06:19,669
bit that way it bounces up and down and

144
00:06:19,669 --> 00:06:22,280
this is what it's doing when it's idling

145
00:06:22,280 --> 00:06:24,070
when you're not doing anything with it

146
00:06:24,070 --> 00:06:27,050
so to setup that we're going to create a

147
00:06:27,050 --> 00:06:29,000
loop function and we're going to call

148
00:06:29,000 --> 00:06:31,220
the idle animation and when that

149
00:06:31,220 --> 00:06:33,200
completes we're gonna call the loop

150
00:06:33,200 --> 00:06:34,550
function again

151
00:06:34,550 --> 00:06:38,090
and I thought this is great totally fine

152
00:06:38,090 --> 00:06:41,560
except I actually created more problems

153
00:06:41,560 --> 00:06:46,520
so the first issue that I noticed is

154
00:06:46,520 --> 00:06:50,659
what I refer to as Venable hell so once

155
00:06:50,659 --> 00:06:53,599
upon a time we used to use async calls

156
00:06:53,599 --> 00:06:56,479
on the front end with callbacks and this

157
00:06:56,479 --> 00:06:59,240
created the dreaded triangle of doom aka

158
00:06:59,240 --> 00:07:02,449
callback hell but one of the issues I

159
00:07:02,449 --> 00:07:04,699
noticed when creating this game was that

160
00:07:04,699 --> 00:07:06,979
promises actually don't alleviate

161
00:07:06,979 --> 00:07:10,789
callback hell you're still in hell it's

162
00:07:10,789 --> 00:07:14,330
just a different looking hell so you

163
00:07:14,330 --> 00:07:15,979
know the left side is a more realistic

164
00:07:15,979 --> 00:07:18,440
version of how these animations might

165
00:07:18,440 --> 00:07:21,349
work I mean might need to pass in some

166
00:07:21,349 --> 00:07:23,509
information to functions or check

167
00:07:23,509 --> 00:07:26,360
information to make a decision and this

168
00:07:26,360 --> 00:07:28,190
gets just as unwieldy and as

169
00:07:28,190 --> 00:07:30,770
unmanageable as callback hell you know

170
00:07:30,770 --> 00:07:32,719
this doesn't resolve that issue for me

171
00:07:32,719 --> 00:07:35,479
and you know I actually really love

172
00:07:35,479 --> 00:07:37,009
promises I think they're really great

173
00:07:37,009 --> 00:07:38,990
but when you're using them for very

174
00:07:38,990 --> 00:07:41,780
large-scale async work the ease of

175
00:07:41,780 --> 00:07:47,210
promises really tends to break down so

176
00:07:47,210 --> 00:07:49,520
you know the point of the tamagotchi is

177
00:07:49,520 --> 00:07:51,469
that the user can interact with it and

178
00:07:51,469 --> 00:07:53,870
this is where we come up with our second

179
00:07:53,870 --> 00:07:55,520
issue that I found because Venable hell

180
00:07:55,520 --> 00:07:57,050
is one thing this is a completely

181
00:07:57,050 --> 00:07:59,690
different thing now it's it's looping

182
00:07:59,690 --> 00:08:02,090
it's idling I need to interrupt that at

183
00:08:02,090 --> 00:08:03,979
some point because you're gonna have to

184
00:08:03,979 --> 00:08:06,020
feed the Tamagotchi at some point or

185
00:08:06,020 --> 00:08:07,580
play with the Tamagotchi to up its

186
00:08:07,580 --> 00:08:09,680
happiness the whole game is actually

187
00:08:09,680 --> 00:08:11,389
about you interacting with the

188
00:08:11,389 --> 00:08:14,330
Tamagotchi so what I need to do is I

189
00:08:14,330 --> 00:08:16,699
need to suspend the idle animation in

190
00:08:16,699 --> 00:08:20,240
favor of a user-generated event so if

191
00:08:20,240 --> 00:08:21,409
you want to feed the Tamagotchi I gotta

192
00:08:21,409 --> 00:08:23,449
stop idle and then you can feed the

193
00:08:23,449 --> 00:08:24,050
Tamagotchi

194
00:08:24,050 --> 00:08:26,840
so here I've added an array to hold

195
00:08:26,840 --> 00:08:29,840
pending events the loop function is

196
00:08:29,840 --> 00:08:31,580
going to check if there are any pending

197
00:08:31,580 --> 00:08:34,370
events and if there are the handle event

198
00:08:34,370 --> 00:08:36,349
function is run and the loop is

199
00:08:36,349 --> 00:08:39,589
terminated so handle event is going to

200
00:08:39,589 --> 00:08:41,479
take the first event off the queue and

201
00:08:41,479 --> 00:08:43,490
it's going to run it and when it's

202
00:08:43,490 --> 00:08:44,990
complete we're gonna restart the loop

203
00:08:44,990 --> 00:08:46,940
and if there's another event in the

204
00:08:46,940 --> 00:08:47,310
queue

205
00:08:47,310 --> 00:08:49,249
handle event will get called again

206
00:08:49,249 --> 00:08:51,389
otherwise we're gonna continue the loop

207
00:08:51,389 --> 00:08:55,139
until the next event and unfortunately

208
00:08:55,139 --> 00:08:57,120
the problem that I found was that this

209
00:08:57,120 --> 00:09:00,480
just doesn't work so I'm requesting to

210
00:09:00,480 --> 00:09:01,560
feed the Tamagotchi

211
00:09:01,560 --> 00:09:03,870
but the feed animation is actually

212
00:09:03,870 --> 00:09:06,050
delayed until the idle animation

213
00:09:06,050 --> 00:09:09,269
completes so this can be upwards of

214
00:09:09,269 --> 00:09:11,699
seven to eight seconds and this is not

215
00:09:11,699 --> 00:09:14,160
going to work what I actually need to do

216
00:09:14,160 --> 00:09:16,829
is cancel the promise that runs the idle

217
00:09:16,829 --> 00:09:19,680
animation except you can't cancel

218
00:09:19,680 --> 00:09:24,259
promises promises are unbreakable vows

219
00:09:24,259 --> 00:09:27,180
you can throw errors and promises and

220
00:09:27,180 --> 00:09:29,639
you can catch those errors but you can't

221
00:09:29,639 --> 00:09:32,670
actually cancel a promise all the

222
00:09:32,670 --> 00:09:35,249
attached then functions are going to

223
00:09:35,249 --> 00:09:39,509
fire what I want actually is to pause an

224
00:09:39,509 --> 00:09:42,300
animation and then yield to an event and

225
00:09:42,300 --> 00:09:45,600
this sounds a lot like a generator so

226
00:09:45,600 --> 00:09:47,699
generators are amazing because their

227
00:09:47,699 --> 00:09:50,879
code that can be paused all of the code

228
00:09:50,879 --> 00:09:52,829
that you write is run to completion

229
00:09:52,829 --> 00:09:56,309
except for generators all the code that

230
00:09:56,309 --> 00:09:58,079
you write usually once it starts it just

231
00:09:58,079 --> 00:10:00,480
goes from top down to the bottom even if

232
00:10:00,480 --> 00:10:02,879
you're doing async work it's thrown on

233
00:10:02,879 --> 00:10:04,980
to the event loop and it's going to come

234
00:10:04,980 --> 00:10:07,529
back around you can't cancel it or pause

235
00:10:07,529 --> 00:10:08,040
it

236
00:10:08,040 --> 00:10:11,790
but with generators you can do both so

237
00:10:11,790 --> 00:10:15,449
let's take a look at them this is a

238
00:10:15,449 --> 00:10:17,759
generator and I know it's a generator

239
00:10:17,759 --> 00:10:20,040
because of the asterisk next to the

240
00:10:20,040 --> 00:10:23,160
function keyword so that turns a

241
00:10:23,160 --> 00:10:26,129
function into a function generator now

242
00:10:26,129 --> 00:10:27,839
inside the function you're going to

243
00:10:27,839 --> 00:10:29,910
notice a special keyword called yield

244
00:10:29,910 --> 00:10:33,149
and yield means pause in the generator

245
00:10:33,149 --> 00:10:36,750
world to use the generator you're going

246
00:10:36,750 --> 00:10:38,759
to call it and that's going to return to

247
00:10:38,759 --> 00:10:41,850
you the generator object and on that

248
00:10:41,850 --> 00:10:45,120
object is a method called next and when

249
00:10:45,120 --> 00:10:46,860
you call next you're gonna get back an

250
00:10:46,860 --> 00:10:49,769
object with two keys on it value and

251
00:10:49,769 --> 00:10:53,279
done if there is a value to the right of

252
00:10:53,279 --> 00:10:55,620
the yield statement it's going to return

253
00:10:55,620 --> 00:10:58,559
that as the value done is going to tell

254
00:10:58,559 --> 00:11:00,100
you whether the generator is

255
00:11:00,100 --> 00:11:02,259
or not and in this case it's not because

256
00:11:02,259 --> 00:11:06,279
there are more lines to run okay so

257
00:11:06,279 --> 00:11:08,350
we're gonna call next again see now

258
00:11:08,350 --> 00:11:10,540
we're not actually yielding a number you

259
00:11:10,540 --> 00:11:12,699
don't have to yield a value if you don't

260
00:11:12,699 --> 00:11:15,459
want to yield just means pause generally

261
00:11:15,459 --> 00:11:18,040
so in this case the value is undefined

262
00:11:18,040 --> 00:11:20,949
and again we're not done yet so done is

263
00:11:20,949 --> 00:11:23,050
false we call again

264
00:11:23,050 --> 00:11:24,910
now we're yielding back three so the

265
00:11:24,910 --> 00:11:27,279
value is three but done is still not

266
00:11:27,279 --> 00:11:30,130
false because we've paused at yield

267
00:11:30,130 --> 00:11:33,610
three so once we call next again now the

268
00:11:33,610 --> 00:11:35,560
generator is gonna say yes we're

269
00:11:35,560 --> 00:11:37,420
actually done so we didn't yield a value

270
00:11:37,420 --> 00:11:41,470
and now done is actually true now you

271
00:11:41,470 --> 00:11:44,079
can also pass values into a generator

272
00:11:44,079 --> 00:11:48,279
and this seems a little bit weird at

273
00:11:48,279 --> 00:11:50,139
first because you'll notice that the

274
00:11:50,139 --> 00:11:51,970
first time we call next we're not

275
00:11:51,970 --> 00:11:54,490
passing in a value we're actually doing

276
00:11:54,490 --> 00:11:57,069
it in the second call now the reason

277
00:11:57,069 --> 00:11:59,500
that this happens is that inside of this

278
00:11:59,500 --> 00:12:01,930
generator function once it hits the

279
00:12:01,930 --> 00:12:05,110
yield statement it pauses and that

280
00:12:05,110 --> 00:12:07,930
includes assigning things to variables

281
00:12:07,930 --> 00:12:11,470
so Const num equals hasn't actually been

282
00:12:11,470 --> 00:12:14,500
called yet it actually yields it pauses

283
00:12:14,500 --> 00:12:17,079
before you actually assign the variable

284
00:12:17,079 --> 00:12:21,040
now when I call next again if I provide

285
00:12:21,040 --> 00:12:24,040
a value to it it's gonna take the place

286
00:12:24,040 --> 00:12:28,180
of the previous yield so now continum

287
00:12:28,180 --> 00:12:31,089
equals that yield is replaced with a2

288
00:12:31,089 --> 00:12:33,639
and now we've assigned the variable and

289
00:12:33,639 --> 00:12:37,360
then we also run yield 2 plus num it

290
00:12:37,360 --> 00:12:40,449
pauses there and gives us back the value

291
00:12:40,449 --> 00:12:44,949
for after that yield 4 plus num and now

292
00:12:44,949 --> 00:12:48,610
we're getting back the value 6 then we

293
00:12:48,610 --> 00:12:51,290
call next and we're done

294
00:12:51,290 --> 00:12:53,430
one of my favorite things about

295
00:12:53,430 --> 00:12:54,959
generators is that you can create

296
00:12:54,959 --> 00:12:59,309
infinite generators so here to avoid

297
00:12:59,309 --> 00:13:01,350
having to call next and the next again

298
00:13:01,350 --> 00:13:03,569
and passing the two we can just straight

299
00:13:03,569 --> 00:13:07,170
up pass in as an argument for the number

300
00:13:07,170 --> 00:13:09,449
two so right away when we're calling the

301
00:13:09,449 --> 00:13:11,540
generator we can pass something in and

302
00:13:11,540 --> 00:13:14,009
you'll notice that inside of this we

303
00:13:14,009 --> 00:13:16,920
have a while loop now normally doing

304
00:13:16,920 --> 00:13:20,490
while true is going to run continuously

305
00:13:20,490 --> 00:13:22,589
and crash our browser I know because

306
00:13:22,589 --> 00:13:24,860
I've made that mistake more than once

307
00:13:24,860 --> 00:13:28,199
and but in this case actually that's not

308
00:13:28,199 --> 00:13:29,040
going to happen

309
00:13:29,040 --> 00:13:30,600
so this is really interesting the

310
00:13:30,600 --> 00:13:32,459
generator is actually going to pause the

311
00:13:32,459 --> 00:13:35,249
while loop and it's not going to run

312
00:13:35,249 --> 00:13:37,550
continuously and crash our browser and

313
00:13:37,550 --> 00:13:40,439
every time that this gets called next on

314
00:13:40,439 --> 00:13:40,800
it

315
00:13:40,800 --> 00:13:43,800
we're running the while loop again so it

316
00:13:43,800 --> 00:13:45,689
pauses it and when we call next is going

317
00:13:45,689 --> 00:13:47,970
to resume and because while is true it's

318
00:13:47,970 --> 00:13:51,949
going to give us back the number now I

319
00:13:51,949 --> 00:13:55,139
can just keep calling next on this for

320
00:13:55,139 --> 00:13:58,290
as long as I want there we go

321
00:13:58,290 --> 00:14:01,709
it's just gonna keep generating numbers

322
00:14:01,709 --> 00:14:04,290
for me it's never going to stop until I

323
00:14:04,290 --> 00:14:07,350
explicitly tell it to stop but you can

324
00:14:07,350 --> 00:14:09,179
create infinite generators that always

325
00:14:09,179 --> 00:14:13,439
gave you something back now you can also

326
00:14:13,439 --> 00:14:15,749
call a generator from inside of another

327
00:14:15,749 --> 00:14:17,939
generator to do that you're gonna need

328
00:14:17,939 --> 00:14:23,399
the yield star expression to illustrate

329
00:14:23,399 --> 00:14:25,709
that I have a function a generator

330
00:14:25,709 --> 00:14:27,720
function called outer and a generator

331
00:14:27,720 --> 00:14:30,179
function called inner and you'll notice

332
00:14:30,179 --> 00:14:32,879
that outer is calling inner with the

333
00:14:32,879 --> 00:14:36,600
yield star expression in front of it so

334
00:14:36,600 --> 00:14:38,759
same as before I'm going to call the

335
00:14:38,759 --> 00:14:42,720
generator to get the generator object

336
00:14:42,730 --> 00:14:45,400
then I'm gonna call dot next on that

337
00:14:45,400 --> 00:14:48,280
generator and the first time this you

338
00:14:48,280 --> 00:14:50,170
know totally makes sense what we expect

339
00:14:50,170 --> 00:14:53,200
to happen happens we're yielding one so

340
00:14:53,200 --> 00:14:54,970
we're getting back the value one and of

341
00:14:54,970 --> 00:14:57,360
course we're not done yet

342
00:14:57,360 --> 00:15:00,400
but when I call next again you're gonna

343
00:15:00,400 --> 00:15:03,160
notice that we're not yielding back a

344
00:15:03,160 --> 00:15:05,350
function what we're actually doing is

345
00:15:05,350 --> 00:15:07,240
we're going inside of the inter

346
00:15:07,240 --> 00:15:10,600
generator so yield star is a delegate

347
00:15:10,600 --> 00:15:13,330
and that means when it encounters a

348
00:15:13,330 --> 00:15:15,730
yield star with a generator next to it

349
00:15:15,730 --> 00:15:17,590
it's actually going to start calling dot

350
00:15:17,590 --> 00:15:20,980
next as if that generator was part of

351
00:15:20,980 --> 00:15:22,000
the outer generator

352
00:15:22,000 --> 00:15:24,550
so now when I call dot next I'm actually

353
00:15:24,550 --> 00:15:27,580
getting yield a value a from the inner

354
00:15:27,580 --> 00:15:30,220
generator and this is going to continue

355
00:15:30,220 --> 00:15:32,800
until the inner generator is complete

356
00:15:32,800 --> 00:15:35,800
and then it's gonna go back to the outer

357
00:15:35,800 --> 00:15:38,410
generator so it's a seamless calling of

358
00:15:38,410 --> 00:15:39,970
dot next even though you're putting

359
00:15:39,970 --> 00:15:43,440
together two different generators now

360
00:15:43,440 --> 00:15:45,670
the other thing that's really cool and

361
00:15:45,670 --> 00:15:46,990
the thing that I really wanted out of

362
00:15:46,990 --> 00:15:48,910
the generators is that you can cancel

363
00:15:48,910 --> 00:15:52,200
them and you can do this one of two ways

364
00:15:52,200 --> 00:15:57,190
so the first is that you can call from

365
00:15:57,190 --> 00:16:03,910
the outside denied that's right sorry

366
00:16:03,910 --> 00:16:05,430
I'm having a hard time with the clicker

367
00:16:05,430 --> 00:16:09,910
so here again we have a while loop so it

368
00:16:09,910 --> 00:16:12,130
should say while true and it should run

369
00:16:12,130 --> 00:16:14,470
for forever but I'm actually going to

370
00:16:14,470 --> 00:16:16,630
cancel the generator from inside of the

371
00:16:16,630 --> 00:16:19,540
generator and I'm gonna do that with the

372
00:16:19,540 --> 00:16:22,150
return statement here so the first time

373
00:16:22,150 --> 00:16:24,580
I call next we get what we expect but as

374
00:16:24,580 --> 00:16:26,500
soon as it hits a return statement in a

375
00:16:26,500 --> 00:16:28,420
generator it's gonna cancel it and

376
00:16:28,420 --> 00:16:30,100
you'll notice that it just goes straight

377
00:16:30,100 --> 00:16:32,860
to done true and of course we're not

378
00:16:32,860 --> 00:16:36,820
yielding a value same thing when we call

379
00:16:36,820 --> 00:16:38,710
dot next we've cancelled this generator

380
00:16:38,710 --> 00:16:41,380
so there's no way for it to keep running

381
00:16:41,380 --> 00:16:44,490
anymore this is actually done completely

382
00:16:44,490 --> 00:16:48,160
now the second way to cancel a generator

383
00:16:48,160 --> 00:16:50,470
is from outside of that generator again

384
00:16:50,470 --> 00:16:52,900
a while loop this should run for forever

385
00:16:52,900 --> 00:16:56,019
but as soon as I call generator dot

386
00:16:56,019 --> 00:16:58,779
turn on it it's going to cancel it so

387
00:16:58,779 --> 00:17:00,759
you can see again that done is now true

388
00:17:00,759 --> 00:17:03,670
and this is really interesting that you

389
00:17:03,670 --> 00:17:06,760
can cancel a generator from inside or

390
00:17:06,760 --> 00:17:09,100
from outside of the generator because

391
00:17:09,100 --> 00:17:11,890
resuming the generator occurs on the

392
00:17:11,890 --> 00:17:15,309
outside of the generator only so

393
00:17:15,309 --> 00:17:17,939
generators are paused via yield and

394
00:17:17,939 --> 00:17:21,399
restarted via next but a generator

395
00:17:21,399 --> 00:17:24,819
cannot call next on itself if I never

396
00:17:24,819 --> 00:17:27,459
call next on this generator it will

397
00:17:27,459 --> 00:17:30,460
never yield to and this is something I

398
00:17:30,460 --> 00:17:32,590
really struggled with when I started to

399
00:17:32,590 --> 00:17:34,840
convert my game from promises to

400
00:17:34,840 --> 00:17:37,750
generators because I wanted to know who

401
00:17:37,750 --> 00:17:41,279
runs the generator if control happens

402
00:17:41,279 --> 00:17:44,140
outside of the generator something has

403
00:17:44,140 --> 00:17:46,899
to be telling it to resume itself who's

404
00:17:46,899 --> 00:17:50,409
pulling the strings and that tie learned

405
00:17:50,409 --> 00:17:51,929
about co-routines

406
00:17:51,929 --> 00:17:54,700
core genes are really cool I'm a big fan

407
00:17:54,700 --> 00:17:57,250
of them they are a general control

408
00:17:57,250 --> 00:17:59,649
structure whereby control flow is

409
00:17:59,649 --> 00:18:01,840
cooperatively passed between two

410
00:18:01,840 --> 00:18:04,659
different routines and this doesn't make

411
00:18:04,659 --> 00:18:07,330
a lot of sense but it will soon because

412
00:18:07,330 --> 00:18:11,110
the generator can't resume itself you

413
00:18:11,110 --> 00:18:13,570
need a cooperative partner to help out

414
00:18:13,570 --> 00:18:15,760
so something has to take control away

415
00:18:15,760 --> 00:18:18,100
from the generator but then also hand it

416
00:18:18,100 --> 00:18:19,720
back to the generator to run its own

417
00:18:19,720 --> 00:18:24,520
code so this function is a basic example

418
00:18:24,520 --> 00:18:27,070
of a Co routine so it's gonna take in a

419
00:18:27,070 --> 00:18:28,899
generator and it's going to call it

420
00:18:28,899 --> 00:18:31,500
which returns the generator object and

421
00:18:31,500 --> 00:18:34,690
then the inner function next response

422
00:18:34,690 --> 00:18:37,720
calls the generators next method so this

423
00:18:37,720 --> 00:18:39,159
is going to actually start up the

424
00:18:39,159 --> 00:18:41,110
generator which will run until it

425
00:18:41,110 --> 00:18:44,049
encounters a yield statement at that

426
00:18:44,049 --> 00:18:46,149
time the generator is going to return an

427
00:18:46,149 --> 00:18:48,190
object with the value key and the done

428
00:18:48,190 --> 00:18:50,679
key and next response is going to

429
00:18:50,679 --> 00:18:52,870
evaluate whether the generator is done

430
00:18:52,870 --> 00:18:55,929
or not and if it's not it's gonna call

431
00:18:55,929 --> 00:18:57,370
itself with the value from the

432
00:18:57,370 --> 00:18:59,529
generators response and the loop is

433
00:18:59,529 --> 00:19:01,870
going to continue until the generator is

434
00:19:01,870 --> 00:19:04,130
done so

435
00:19:04,130 --> 00:19:05,780
the co-routine is the cooperative

436
00:19:05,780 --> 00:19:08,210
partner to the generator the curb

437
00:19:08,210 --> 00:19:10,309
routine function passes control to the

438
00:19:10,309 --> 00:19:12,799
generator and when the generator pauses

439
00:19:12,799 --> 00:19:15,650
control goes back to the co routine and

440
00:19:15,650 --> 00:19:18,140
these two functions cooperatively pass

441
00:19:18,140 --> 00:19:25,309
control until completion so now I can

442
00:19:25,309 --> 00:19:27,740
rewrite the bounce up animation as a

443
00:19:27,740 --> 00:19:30,890
generator and use a KO routine to

444
00:19:30,890 --> 00:19:33,440
actually run it but this code actually

445
00:19:33,440 --> 00:19:35,330
suffers from the same problem I had in

446
00:19:35,330 --> 00:19:37,460
the beginning so it's just gonna go too

447
00:19:37,460 --> 00:19:41,990
fast there we go so you can see it's

448
00:19:41,990 --> 00:19:43,610
doing what it did in the beginning which

449
00:19:43,610 --> 00:19:46,159
is just it writes too fast and that's

450
00:19:46,159 --> 00:19:47,960
because generators aren't really gonna

451
00:19:47,960 --> 00:19:51,230
resolve my issues with set timeout and

452
00:19:51,230 --> 00:19:53,870
promises I actually still need them to

453
00:19:53,870 --> 00:19:57,950
be able to handle delays but generators

454
00:19:57,950 --> 00:19:59,270
don't really care if you're using

455
00:19:59,270 --> 00:20:02,210
promises so it's not gonna wait for each

456
00:20:02,210 --> 00:20:05,090
promise to resolve and then resume

457
00:20:05,090 --> 00:20:08,870
itself it can't resume itself but a

458
00:20:08,870 --> 00:20:13,130
cooperative partner could so I can amend

459
00:20:13,130 --> 00:20:15,530
the KO routine to handle async requests

460
00:20:15,530 --> 00:20:18,260
instead of calling next response we're

461
00:20:18,260 --> 00:20:20,270
gonna call it a handle async function

462
00:20:20,270 --> 00:20:22,610
we're gonna pass it the value of the

463
00:20:22,610 --> 00:20:24,440
generators response which is a promise

464
00:20:24,440 --> 00:20:27,620
and now we can actually prevent the

465
00:20:27,620 --> 00:20:29,659
generator from resuming until the

466
00:20:29,659 --> 00:20:31,880
promise is resolved and when it's

467
00:20:31,880 --> 00:20:34,039
resolved we're gonna call next response

468
00:20:34,039 --> 00:20:37,490
which will resume the generator so with

469
00:20:37,490 --> 00:20:39,799
our amended KO routine these functions

470
00:20:39,799 --> 00:20:42,740
are now equivalent previously we change

471
00:20:42,740 --> 00:20:44,929
promises together for the animation now

472
00:20:44,929 --> 00:20:47,480
we can yield promises and our

473
00:20:47,480 --> 00:20:49,460
cooperative partner the KO routine is

474
00:20:49,460 --> 00:20:51,350
going to handle resuming the generator

475
00:20:51,350 --> 00:20:54,770
when the promise is resolved now you can

476
00:20:54,770 --> 00:20:56,750
do more than yield promises with

477
00:20:56,750 --> 00:20:58,789
co-routines you can yield all sorts of

478
00:20:58,789 --> 00:21:00,770
async things including callback

479
00:21:00,770 --> 00:21:03,020
functions you can also yield generators

480
00:21:03,020 --> 00:21:04,970
themselves and there's a really great

481
00:21:04,970 --> 00:21:07,010
library called ko if you want to play

482
00:21:07,010 --> 00:21:10,070
around with this it's highly recommended

483
00:21:10,070 --> 00:21:14,030
Kuro jeans are very powerful and the

484
00:21:14,030 --> 00:21:15,980
reason that they're so powerful is that

485
00:21:15,980 --> 00:21:17,030
they allow you to think

486
00:21:17,030 --> 00:21:20,180
sequentially about async code so because

487
00:21:20,180 --> 00:21:21,800
the co-routine is your cooperative

488
00:21:21,800 --> 00:21:24,080
partner in handling the messy business

489
00:21:24,080 --> 00:21:27,050
of chaining promises together you can

490
00:21:27,050 --> 00:21:28,310
write your code as if it ran

491
00:21:28,310 --> 00:21:31,370
sequentially so for the second version

492
00:21:31,370 --> 00:21:33,260
of this game I rewrote all of the

493
00:21:33,260 --> 00:21:35,510
animations with promises and generators

494
00:21:35,510 --> 00:21:37,790
so what you're seeing here is the same

495
00:21:37,790 --> 00:21:40,280
idle animation but with generators and

496
00:21:40,280 --> 00:21:43,340
promises and it's run by a KO routine

497
00:21:43,340 --> 00:21:45,920
and I had two goals with the rewrite I

498
00:21:45,920 --> 00:21:48,050
wanted to be able to pause animations

499
00:21:48,050 --> 00:21:50,090
and I want to take advantage of thinking

500
00:21:50,090 --> 00:21:53,960
sequentially about async code so to do

501
00:21:53,960 --> 00:21:55,580
that I started with rewriting the

502
00:21:55,580 --> 00:21:58,070
function that delays the animation so

503
00:21:58,070 --> 00:22:00,050
this is our async function and it

504
00:22:00,050 --> 00:22:02,000
doesn't need to hold the animation

505
00:22:02,000 --> 00:22:04,310
itself it just needs to delay with a

506
00:22:04,310 --> 00:22:06,580
promise that's its sole responsibility

507
00:22:06,580 --> 00:22:09,260
so when this function is called it

508
00:22:09,260 --> 00:22:11,510
returns a new promise that resolves when

509
00:22:11,510 --> 00:22:16,610
the timeout is complete I also broke out

510
00:22:16,610 --> 00:22:18,140
the context clearing into its own

511
00:22:18,140 --> 00:22:20,960
function and the drawing of the image

512
00:22:20,960 --> 00:22:26,780
into its own function so now we can

513
00:22:26,780 --> 00:22:28,580
combine these new functions to replace

514
00:22:28,580 --> 00:22:30,620
the previous animation function and

515
00:22:30,620 --> 00:22:32,840
we're gonna do so inside of a generator

516
00:22:32,840 --> 00:22:35,210
so we'll clear whatever was previously

517
00:22:35,210 --> 00:22:37,130
on the canvas then we're gonna draw the

518
00:22:37,130 --> 00:22:39,260
new frame and these get to occur

519
00:22:39,260 --> 00:22:41,330
synchronously there's no problem with

520
00:22:41,330 --> 00:22:43,310
these needing to be a sync they can

521
00:22:43,310 --> 00:22:45,620
recur synchronously but what we is a

522
00:22:45,620 --> 00:22:47,540
think about this is the delay so we're

523
00:22:47,540 --> 00:22:49,610
gonna yield the delay that's the

524
00:22:49,610 --> 00:22:52,070
asynchronous part and then we're gonna

525
00:22:52,070 --> 00:22:54,470
pass off handing it to our co-routines

526
00:22:54,470 --> 00:22:56,840
so our ko routine will be handling the

527
00:22:56,840 --> 00:22:59,090
asynchronous part of this but this feels

528
00:22:59,090 --> 00:23:03,400
very synchronous

529
00:23:03,410 --> 00:23:05,990
and now I can redraw the dislike

530
00:23:05,990 --> 00:23:09,590
animation so this is an animation that

531
00:23:09,590 --> 00:23:11,720
has two frames so you can see this gets

532
00:23:11,720 --> 00:23:13,460
a lot cleaner than the code that I had

533
00:23:13,460 --> 00:23:16,130
previously and then here is our

534
00:23:16,130 --> 00:23:17,929
Tamagotchi saying like nope I don't like

535
00:23:17,929 --> 00:23:20,450
whatever's going on I'm running out of

536
00:23:20,450 --> 00:23:22,730
time but very quickly we're gonna

537
00:23:22,730 --> 00:23:25,580
rewrite the main game bloop so we're

538
00:23:25,580 --> 00:23:27,080
gonna take advantage of canceling the

539
00:23:27,080 --> 00:23:29,809
generator our loop generator function

540
00:23:29,809 --> 00:23:31,940
will be run by a KO routine so we can

541
00:23:31,940 --> 00:23:33,530
rely on that to handle the asynchronous

542
00:23:33,530 --> 00:23:35,809
stuff we're going to create a variable

543
00:23:35,809 --> 00:23:37,940
to save a status of the generator is it

544
00:23:37,940 --> 00:23:39,950
done or not and we're gonna preset the

545
00:23:39,950 --> 00:23:43,640
animation to idle we'll use a while loop

546
00:23:43,640 --> 00:23:46,309
to create a never-ending generator and

547
00:23:46,309 --> 00:23:48,380
this way the game loop can continue for

548
00:23:48,380 --> 00:23:50,900
forever if we have a pending user event

549
00:23:50,900 --> 00:23:52,730
we're going to delegate to the event

550
00:23:52,730 --> 00:23:55,100
using yield star and whatever the event

551
00:23:55,100 --> 00:23:57,880
yields will be passed to the co-routine

552
00:23:57,880 --> 00:24:00,740
otherwise a second while loop will

553
00:24:00,740 --> 00:24:03,320
handle running the animation so as long

554
00:24:03,320 --> 00:24:05,240
as the animation is not complete and

555
00:24:05,240 --> 00:24:07,370
there are no pending events this loop

556
00:24:07,370 --> 00:24:09,409
will yield to the generators values to

557
00:24:09,409 --> 00:24:11,659
the KO routine to handle and these are

558
00:24:11,659 --> 00:24:13,610
promises so the KO routine is going to

559
00:24:13,610 --> 00:24:16,820
handle the chaining but if the animation

560
00:24:16,820 --> 00:24:19,520
is done or there's a pending user event

561
00:24:19,520 --> 00:24:22,010
the loop is going to terminate stopping

562
00:24:22,010 --> 00:24:23,900
the animation generator from running

563
00:24:23,900 --> 00:24:25,940
again and we're going to reassign the

564
00:24:25,940 --> 00:24:27,770
animation to an idle generator so it

565
00:24:27,770 --> 00:24:29,570
starts from the beginning and we're

566
00:24:29,570 --> 00:24:32,210
gonna reset done to false so on the next

567
00:24:32,210 --> 00:24:34,460
iteration of this loop pending will be

568
00:24:34,460 --> 00:24:36,169
true and we'll handle the user event

569
00:24:36,169 --> 00:24:41,480
instead so this is the generator for the

570
00:24:41,480 --> 00:24:43,640
feed action it's going to evaluate if

571
00:24:43,640 --> 00:24:46,070
the Tamagotchi is hungry or not if it's

572
00:24:46,070 --> 00:24:47,960
not it's going to delegate future next

573
00:24:47,960 --> 00:24:49,940
calls to the dislike generator which

574
00:24:49,940 --> 00:24:52,640
will run the dislike animation otherwise

575
00:24:52,640 --> 00:24:54,289
we're gonna decrease the hunger count

576
00:24:54,289 --> 00:24:56,720
and use the yield star we delegate to

577
00:24:56,720 --> 00:24:58,250
the eat generator that runs the

578
00:24:58,250 --> 00:25:00,620
animation okay so now we need to see

579
00:25:00,620 --> 00:25:02,480
everything together so we're idling

580
00:25:02,480 --> 00:25:04,460
riding we're gonna feed the Tamagotchi

581
00:25:04,460 --> 00:25:06,890
give it a good burger and you can see it

582
00:25:06,890 --> 00:25:08,600
canceled the idle animation straight

583
00:25:08,600 --> 00:25:10,400
away and you got to see the time I got

584
00:25:10,400 --> 00:25:12,530
you eating right away then it goes back

585
00:25:12,530 --> 00:25:14,929
to idling and then we're going to feed

586
00:25:14,929 --> 00:25:15,730
it again

587
00:25:15,730 --> 00:25:17,450
and this time we're gonna give it some

588
00:25:17,450 --> 00:25:20,419
candy great immediately cancels the idle

589
00:25:20,419 --> 00:25:23,149
animation and runs the candy animation

590
00:25:23,149 --> 00:25:27,049
feeding it candy one more time we're

591
00:25:27,049 --> 00:25:28,279
gonna try and feed it one more time and

592
00:25:28,279 --> 00:25:30,529
it's not happy it does not want a food

593
00:25:30,529 --> 00:25:34,009
so you can see this now works and that

594
00:25:34,009 --> 00:25:35,990
is all I have for you the code is at

595
00:25:35,990 --> 00:25:37,669
this github if you want to check out the

596
00:25:37,669 --> 00:25:39,590
code itself I'm still in the process of

597
00:25:39,590 --> 00:25:42,679
writing the Tim Tamagotchi but you can

598
00:25:42,679 --> 00:25:44,840
check out what's there already and come

599
00:25:44,840 --> 00:25:45,919
see me at the break if you would like

600
00:25:45,919 --> 00:25:48,049
some stickers I have some use react and

601
00:25:48,049 --> 00:25:50,419
wing stickers that are react focused if

602
00:25:50,419 --> 00:25:53,500
you use react and thank you

603
00:25:53,500 --> 00:25:56,810
[Applause]

