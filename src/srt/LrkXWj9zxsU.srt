1
00:00:04,410 --> 00:00:11,630

Thank You Jacob good afternoon everyone

2
00:00:11,630 --> 00:00:14,730
I'd like to talk this session about ven

3
00:00:14,730 --> 00:00:18,740
sourcing Redux and react applications

4
00:00:18,740 --> 00:00:21,539
now decision is more about architecture

5
00:00:21,539 --> 00:00:25,170
I use redux and reacts as examples but

6
00:00:25,170 --> 00:00:28,500
this would basically apply to any Java

7
00:00:28,500 --> 00:00:30,840
scripts application or for that matter

8
00:00:30,840 --> 00:00:33,629
even any smart client server site

9
00:00:33,629 --> 00:00:37,020
application desktop application the

10
00:00:37,020 --> 00:00:40,010
architecture is universally applicable

11
00:00:40,010 --> 00:00:43,110
so who my name is waste buyer i'm from

12
00:00:43,110 --> 00:00:46,079
the netherlands I'm freelance instructor

13
00:00:46,079 --> 00:00:48,570
developer and I consoled to lots of

14
00:00:48,570 --> 00:00:52,140
companies doing stuff so if you want to

15
00:00:52,140 --> 00:00:53,940
learn more about react I've recently

16
00:00:53,940 --> 00:00:56,870
started the Kickstarter campaign and

17
00:00:56,870 --> 00:00:59,579
with any luck if it gets fun that I'm

18
00:00:59,579 --> 00:01:01,140
going to create a whole course about

19
00:01:01,140 --> 00:01:03,979
reacts where you can do learn much more

20
00:01:03,979 --> 00:01:06,780
so if you want to go there that's the

21
00:01:06,780 --> 00:01:12,030
link so why am i interested in event

22
00:01:12,030 --> 00:01:14,520
sourcing and these kind of our sticker

23
00:01:14,520 --> 00:01:16,470
things well I want to make better

24
00:01:16,470 --> 00:01:18,539
applications and that's a goal I've had

25
00:01:18,539 --> 00:01:20,399
for a long time and there is a lot

26
00:01:20,399 --> 00:01:22,440
involved with making better applications

27
00:01:22,440 --> 00:01:25,020
the front end has to be better and react

28
00:01:25,020 --> 00:01:27,630
helps me a lot there day that

29
00:01:27,630 --> 00:01:29,429
manipulation in the front end has to be

30
00:01:29,429 --> 00:01:31,920
better that's where Redux comes in helps

31
00:01:31,920 --> 00:01:34,289
me a lot put on the server side we have

32
00:01:34,289 --> 00:01:38,250
to do things a lot better as well and

33
00:01:38,250 --> 00:01:40,020
one of the reasons things need to be

34
00:01:40,020 --> 00:01:43,410
better is because of fire like this one

35
00:01:43,410 --> 00:01:47,130
of my main customers creates safety

36
00:01:47,130 --> 00:01:48,739
software for the oil and gas industry

37
00:01:48,739 --> 00:01:52,679
and we kind of try to prevent these

38
00:01:52,679 --> 00:01:55,140
accidents from happening now we don't

39
00:01:55,140 --> 00:01:56,610
control people we can't actually

40
00:01:56,610 --> 00:01:58,800
forcibly stop someone from doing

41
00:01:58,800 --> 00:02:01,229
something wrong but we do create so far

42
00:02:01,229 --> 00:02:03,209
where all the work is planned and we

43
00:02:03,209 --> 00:02:05,580
kind of evaluate well if someone is

44
00:02:05,580 --> 00:02:08,069
going to open up a gas main lying and

45
00:02:08,069 --> 00:02:09,770
someone else is going to do some welding

46
00:02:09,770 --> 00:02:15,120
then torches sparks free gas that's

47
00:02:15,120 --> 00:02:16,950
probably not a good combination you

48
00:02:16,950 --> 00:02:17,790
probably will

49
00:02:17,790 --> 00:02:19,890
to separate those in time so they don't

50
00:02:19,890 --> 00:02:22,260
happen at the same time or you will get

51
00:02:22,260 --> 00:02:26,400
accidents like this happen so

52
00:02:26,400 --> 00:02:29,280
traditionally people be storing data in

53
00:02:29,280 --> 00:02:32,040
all sorts of ways you might have been

54
00:02:32,040 --> 00:02:35,280
using relational data or an object

55
00:02:35,280 --> 00:02:40,290
database like MongoDB and typically in

56
00:02:40,290 --> 00:02:42,989
the traditional application architecture

57
00:02:42,989 --> 00:02:44,879
used to be quite simple with there's

58
00:02:44,879 --> 00:02:46,620
something like this at the very high

59
00:02:46,620 --> 00:02:49,139
level so the left we've got our database

60
00:02:49,139 --> 00:02:51,359
and in the middle we've got our server

61
00:02:51,359 --> 00:02:53,129
for application and that server

62
00:02:53,129 --> 00:02:55,290
application grabs data from the database

63
00:02:55,290 --> 00:02:58,859
whenever a client connects client is on

64
00:02:58,859 --> 00:03:01,019
the left hand side sorry the right hand

65
00:03:01,019 --> 00:03:03,000
side it's the browser running a react

66
00:03:03,000 --> 00:03:05,189
application in this case and it kind of

67
00:03:05,189 --> 00:03:08,430
passes that data to the clients and then

68
00:03:08,430 --> 00:03:09,959
whenever the client has made some kind

69
00:03:09,959 --> 00:03:12,450
of changes it passes the data back to do

70
00:03:12,450 --> 00:03:14,280
server the server probably does some

71
00:03:14,280 --> 00:03:16,799
sort of validation and stores it in the

72
00:03:16,799 --> 00:03:19,709
database this is the kind of system you

73
00:03:19,709 --> 00:03:23,010
might end up if you just use restful

74
00:03:23,010 --> 00:03:27,060
styles of working with data and that's

75
00:03:27,060 --> 00:03:28,919
fine if you've got a relatively simple

76
00:03:28,919 --> 00:03:31,199
application if you've got to do

77
00:03:31,199 --> 00:03:33,750
application you're not going to have lot

78
00:03:33,750 --> 00:03:36,060
of multi-user contention most people

79
00:03:36,060 --> 00:03:39,030
manage their own to-do list no one else

80
00:03:39,030 --> 00:03:40,829
is going to touch that maybe in the case

81
00:03:40,829 --> 00:03:42,750
of a manager he'll have a secretory

82
00:03:42,750 --> 00:03:45,239
managing his to-do list but in that case

83
00:03:45,239 --> 00:03:47,190
it's probably the secretary doing all

84
00:03:47,190 --> 00:03:50,190
the work and even if you create to the

85
00:03:50,190 --> 00:03:52,769
to do list to rule them all is the whole

86
00:03:52,769 --> 00:03:54,239
world is going to use it you'll have

87
00:03:54,239 --> 00:03:57,030
lots of small lists but there won't be

88
00:03:57,030 --> 00:03:59,310
much interaction and a relatively simple

89
00:03:59,310 --> 00:04:02,900
architecture is going to be just fine

90
00:04:02,900 --> 00:04:07,169
but if you want to create reacts

91
00:04:07,169 --> 00:04:09,389
component to render something like that

92
00:04:09,389 --> 00:04:10,979
in this case it's not for to do

93
00:04:10,979 --> 00:04:12,750
applications it's actually for work

94
00:04:12,750 --> 00:04:15,090
permits you might end up with a react

95
00:04:15,090 --> 00:04:17,759
component like this really simple it

96
00:04:17,759 --> 00:04:19,650
just takes in a list it's good no clue

97
00:04:19,650 --> 00:04:22,380
where it actually came from it knows

98
00:04:22,380 --> 00:04:25,139
there is something that it can do it can

99
00:04:25,139 --> 00:04:26,880
draft the permit which basically means

100
00:04:26,880 --> 00:04:29,550
we're building up a whole permit

101
00:04:29,550 --> 00:04:31,560
requests specifying what we want

102
00:04:31,560 --> 00:04:33,900
to do where we want to do it when what

103
00:04:33,900 --> 00:04:36,570
kind of tools we want to use etc but

104
00:04:36,570 --> 00:04:38,370
react component doesn't really know

105
00:04:38,370 --> 00:04:40,500
where it came from how its treated

106
00:04:40,500 --> 00:04:42,570
they're really simple and that's how

107
00:04:42,570 --> 00:04:44,520
your reactor components should typically

108
00:04:44,520 --> 00:04:48,960
be so if you've got a little more

109
00:04:48,960 --> 00:04:51,570
complex application which our

110
00:04:51,570 --> 00:04:53,820
application is you want to be a bit more

111
00:04:53,820 --> 00:04:56,430
explicit about updating things and

112
00:04:56,430 --> 00:04:59,250
that's where the CQ rest pattern or

113
00:04:59,250 --> 00:05:01,320
command the query responsibility

114
00:05:01,320 --> 00:05:05,729
segregation comes in and insecure s

115
00:05:05,729 --> 00:05:09,240
commands are very important commands are

116
00:05:09,240 --> 00:05:12,030
used from the client to update things so

117
00:05:12,030 --> 00:05:13,979
we're not taking a resource like in a

118
00:05:13,979 --> 00:05:15,900
restful system downloaded changing its

119
00:05:15,900 --> 00:05:18,000
ending that home resource back though

120
00:05:18,000 --> 00:05:20,280
we're very explicit about I've got a

121
00:05:20,280 --> 00:05:22,080
resource I want to make some changes to

122
00:05:22,080 --> 00:05:25,710
it this is why I want to do it if you

123
00:05:25,710 --> 00:05:27,960
take all your command names and you give

124
00:05:27,960 --> 00:05:29,790
those to some kind of say business

125
00:05:29,790 --> 00:05:33,300
analyst or end user he should be able to

126
00:05:33,300 --> 00:05:35,789
understand that so what commands like

127
00:05:35,789 --> 00:05:39,419
update fields is a lousy command it

128
00:05:39,419 --> 00:05:42,300
doesn't convey business value draft

129
00:05:42,300 --> 00:05:48,479
permits pay check check credits records

130
00:05:48,479 --> 00:05:51,090
those are valid commands and something

131
00:05:51,090 --> 00:05:54,479
which makes sense and if you use see

132
00:05:54,479 --> 00:05:57,240
caress the architecture will become

133
00:05:57,240 --> 00:06:00,360
somewhat more complex like this on the

134
00:06:00,360 --> 00:06:02,100
right and still site we still got our

135
00:06:02,100 --> 00:06:06,510
browser application using react if it

136
00:06:06,510 --> 00:06:08,280
wants to get some data from the surface

137
00:06:08,280 --> 00:06:10,740
it goes to the query surface at the top

138
00:06:10,740 --> 00:06:13,380
and the query surface is probably a

139
00:06:13,380 --> 00:06:15,990
restful service but all it does is get

140
00:06:15,990 --> 00:06:18,720
data it never responds to with boots or

141
00:06:18,720 --> 00:06:22,320
a post or a delete it only retrieves

142
00:06:22,320 --> 00:06:25,979
data purely redone so what if you want

143
00:06:25,979 --> 00:06:27,660
to change something well the client

144
00:06:27,660 --> 00:06:30,360
sends very explicit commands to the

145
00:06:30,360 --> 00:06:32,789
server so the commands go down to the

146
00:06:32,789 --> 00:06:35,160
bottom to the command surface it does

147
00:06:35,160 --> 00:06:37,470
all the validation it could potentially

148
00:06:37,470 --> 00:06:40,080
reject the command like you want to

149
00:06:40,080 --> 00:06:41,849
deposit or you want to withdraw some

150
00:06:41,849 --> 00:06:43,890
money from your bank account but you

151
00:06:43,890 --> 00:06:44,790
don't actually have

152
00:06:44,790 --> 00:06:46,590
enough money well in that case your

153
00:06:46,590 --> 00:06:49,350
request is rejected your command is not

154
00:06:49,350 --> 00:06:53,280
valid and the plan could get a 400 style

155
00:06:53,280 --> 00:06:57,390
error back but assuming the command is

156
00:06:57,390 --> 00:07:00,660
valid the database gets updated and the

157
00:07:00,660 --> 00:07:02,460
client or in the other connected clients

158
00:07:02,460 --> 00:07:04,440
could actually retrieve thread through

159
00:07:04,440 --> 00:07:08,820
the query surface so what does a command

160
00:07:08,820 --> 00:07:11,130
like that look like in JavaScript well

161
00:07:11,130 --> 00:07:12,900
it's really simple commands are really

162
00:07:12,900 --> 00:07:15,330
simple objects we try to keep them as

163
00:07:15,330 --> 00:07:18,150
flat as possible it's just back of data

164
00:07:18,150 --> 00:07:20,910
a couple of interesting things though

165
00:07:20,910 --> 00:07:24,600
first of all every command has an ID in

166
00:07:24,600 --> 00:07:27,600
some cases in more complex applications

167
00:07:27,600 --> 00:07:30,300
especially if you've not got the perfect

168
00:07:30,300 --> 00:07:32,700
connection like we do when we have to

169
00:07:32,700 --> 00:07:35,610
work with offshore platforms you might

170
00:07:35,610 --> 00:07:38,370
get commands which get sent twice after

171
00:07:38,370 --> 00:07:40,050
all if you've got a timeout from from

172
00:07:40,050 --> 00:07:42,600
HTTP requests you don't really know what

173
00:07:42,600 --> 00:07:44,940
happens did my command reach the server

174
00:07:44,940 --> 00:07:49,350
and what's the response timed out or did

175
00:07:49,350 --> 00:07:52,550
it never actually receive the server so

176
00:07:52,550 --> 00:07:55,350
every command has a unique ID if its

177
00:07:55,350 --> 00:07:58,200
recent for some reason then the server

178
00:07:58,200 --> 00:08:01,020
can check based on that command tidy am

179
00:08:01,020 --> 00:08:03,120
I duplicating the same month and if so

180
00:08:03,120 --> 00:08:05,100
get rejected because it's already done

181
00:08:05,100 --> 00:08:08,370
it the other important thing is the

182
00:08:08,370 --> 00:08:10,250
command name what are we actually

183
00:08:10,250 --> 00:08:12,690
intending to do there and based on the

184
00:08:12,690 --> 00:08:14,400
command name there will be a whole bunch

185
00:08:14,400 --> 00:08:17,700
of other data or maybe very little in

186
00:08:17,700 --> 00:08:20,190
case of delete apartment then all you

187
00:08:20,190 --> 00:08:22,020
would need to know the permit ID to

188
00:08:22,020 --> 00:08:24,090
delete and that's all but in this case

189
00:08:24,090 --> 00:08:25,860
with draft permits to raise a whole

190
00:08:25,860 --> 00:08:30,280
bunch of data about the permits there

191
00:08:30,290 --> 00:08:32,760
after a command like this has been

192
00:08:32,760 --> 00:08:35,130
successful we kind of need to update the

193
00:08:35,130 --> 00:08:38,250
reader store on the clients so we Redux

194
00:08:38,250 --> 00:08:40,680
you typically have actions to signify

195
00:08:40,680 --> 00:08:44,340
that something happens and an action is

196
00:08:44,340 --> 00:08:47,250
very strongly related to a command a

197
00:08:47,250 --> 00:08:49,200
command is ok I want to do something

198
00:08:49,200 --> 00:08:51,900
well the action is ok that's been done

199
00:08:51,900 --> 00:08:56,190
it was successful now go and update the

200
00:08:56,190 --> 00:08:57,910
data on the client

201
00:08:57,910 --> 00:09:00,940
so you see this action notice different

202
00:09:00,940 --> 00:09:04,090
the command was draft permit so

203
00:09:04,090 --> 00:09:06,610
commanding tense the action is permit

204
00:09:06,610 --> 00:09:09,160
drafted we know the draft command has

205
00:09:09,160 --> 00:09:12,240
been successful so it's past tense and

206
00:09:12,240 --> 00:09:14,620
the data in there is going to be pretty

207
00:09:14,620 --> 00:09:19,540
much the same thing so that's nice that

208
00:09:19,540 --> 00:09:22,030
gives us a much better our stature but

209
00:09:22,030 --> 00:09:23,920
it still leaves us with one big problem

210
00:09:23,920 --> 00:09:26,860
if we looked at the database it only has

211
00:09:26,860 --> 00:09:30,430
the current state in there and it's like

212
00:09:30,430 --> 00:09:33,790
how did we get there if you look at this

213
00:09:33,790 --> 00:09:35,440
rock formation which is in the west of

214
00:09:35,440 --> 00:09:37,900
France it's kind of like a beautiful

215
00:09:37,900 --> 00:09:40,630
rock formation but how did it get to be

216
00:09:40,630 --> 00:09:44,200
the way it is did we have a solid rock

217
00:09:44,200 --> 00:09:47,070
there once upon a time and it waves

218
00:09:47,070 --> 00:09:51,070
break a big hole into it or maybe was it

219
00:09:51,070 --> 00:09:54,190
deposited on top and did deposit grow up

220
00:09:54,190 --> 00:09:57,220
to form that arch you really can tell

221
00:09:57,220 --> 00:10:00,160
all we've got is the current state and

222
00:10:00,160 --> 00:10:03,370
if you think about databases you quite

223
00:10:03,370 --> 00:10:06,570
often experience problems like well

224
00:10:06,570 --> 00:10:08,920
something in the database is wrong like

225
00:10:08,920 --> 00:10:10,570
there is something which should not be

226
00:10:10,570 --> 00:10:14,290
the way it is it's invalid we know that

227
00:10:14,290 --> 00:10:16,630
but how did it get to be in that a valid

228
00:10:16,630 --> 00:10:19,810
state we don't know all we can say is

229
00:10:19,810 --> 00:10:22,090
well okay it's invalid now somehow that

230
00:10:22,090 --> 00:10:25,030
happens maybe we've got some logic error

231
00:10:25,030 --> 00:10:27,520
but we really don't know how it got to

232
00:10:27,520 --> 00:10:29,830
be that way but will write some kind of

233
00:10:29,830 --> 00:10:33,010
sequel script to patch it and we're good

234
00:10:33,010 --> 00:10:35,410
to go again and maybe a month later the

235
00:10:35,410 --> 00:10:38,230
same problem occurs again still no clue

236
00:10:38,230 --> 00:10:40,870
why it happens so we really want to know

237
00:10:40,870 --> 00:10:45,250
a bit more about how stuff got to be the

238
00:10:45,250 --> 00:10:49,270
way it is so that's where event sourcing

239
00:10:49,270 --> 00:10:53,080
comes in a fence or thing is really

240
00:10:53,080 --> 00:10:55,510
something which is theoretically quite

241
00:10:55,510 --> 00:10:57,820
old it's based on accounting and

242
00:10:57,820 --> 00:11:00,040
bookkeeping which is be used for ages

243
00:11:00,040 --> 00:11:03,580
and a guy called Greg young basically

244
00:11:03,580 --> 00:11:07,660
implemented that in data storage so he

245
00:11:07,660 --> 00:11:09,220
said well instead of destroying the

246
00:11:09,220 --> 00:11:11,130
current state we're going to store

247
00:11:11,130 --> 00:11:13,290
are everything that leads up to the

248
00:11:13,290 --> 00:11:17,310
current state all of those events and if

249
00:11:17,310 --> 00:11:18,780
you think about that draft permits

250
00:11:18,780 --> 00:11:21,690
command I showed a few minutes ago well

251
00:11:21,690 --> 00:11:24,660
if that was successful we would change

252
00:11:24,660 --> 00:11:26,730
some states well in an event source

253
00:11:26,730 --> 00:11:30,150
system we would store an event permit

254
00:11:30,150 --> 00:11:33,660
drafted and like the commands could be

255
00:11:33,660 --> 00:11:36,150
validated and rejected if it was invalid

256
00:11:36,150 --> 00:11:38,580
the event is store if it is successful

257
00:11:38,580 --> 00:11:42,000
so we know it's happened its history

258
00:11:42,000 --> 00:11:44,040
which also means it's never going to

259
00:11:44,040 --> 00:11:47,010
change we're only going to add more to

260
00:11:47,010 --> 00:11:50,940
or to the table of events so if someone

261
00:11:50,940 --> 00:11:53,400
makes it change through that permit does

262
00:11:53,400 --> 00:11:56,220
another draft the command it's not going

263
00:11:56,220 --> 00:11:58,770
to override the first permit drafted

264
00:11:58,770 --> 00:12:00,420
events no it's going to create a second

265
00:12:00,420 --> 00:12:03,180
one and they don't stack on top of each

266
00:12:03,180 --> 00:12:06,180
other and the current States is a result

267
00:12:06,180 --> 00:12:09,480
of applying all those commands or all

268
00:12:09,480 --> 00:12:11,910
those events i should say in functional

269
00:12:11,910 --> 00:12:14,130
terms the current state is a left fault

270
00:12:14,130 --> 00:12:18,590
of all stored events now turns out that

271
00:12:18,590 --> 00:12:21,780
something which is relatively new in

272
00:12:21,780 --> 00:12:24,390
computer terms but in real life is be

273
00:12:24,390 --> 00:12:27,630
used for ages and ages even back in the

274
00:12:27,630 --> 00:12:31,560
days of the Pharaohs bookkeeping always

275
00:12:31,560 --> 00:12:33,600
had to rule like we don't distort a

276
00:12:33,600 --> 00:12:36,480
current state we store transactions and

277
00:12:36,480 --> 00:12:38,700
even back then the far-out might have

278
00:12:38,700 --> 00:12:41,820
had ten cows and one will be born then

279
00:12:41,820 --> 00:12:44,520
they won't cross out to ten given that

280
00:12:44,520 --> 00:12:46,890
they use clay tablets and papyrus back

281
00:12:46,890 --> 00:12:48,390
then crossing that would probably be

282
00:12:48,390 --> 00:12:50,820
quite hard but they would add another

283
00:12:50,820 --> 00:12:53,670
line cow born on whatever date and

284
00:12:53,670 --> 00:12:56,280
number one and when they got to the

285
00:12:56,280 --> 00:12:58,080
bottom of the tie tablet they would kind

286
00:12:58,080 --> 00:13:00,390
of sum them up and start a new tablet

287
00:13:00,390 --> 00:13:02,910
they say at the top current status is

288
00:13:02,910 --> 00:13:07,110
the Pharaoh has 11 calves and then they

289
00:13:07,110 --> 00:13:09,660
would report sales their purchases etc

290
00:13:09,660 --> 00:13:14,760
and kind of keep tally that way now

291
00:13:14,760 --> 00:13:16,440
bookkeeping has been doing that for

292
00:13:16,440 --> 00:13:18,900
thousands and thousands of years even

293
00:13:18,900 --> 00:13:22,310
the model double entry bookkeeping is

294
00:13:22,310 --> 00:13:24,480
hundreds of years old it was

295
00:13:24,480 --> 00:13:27,060
invented around fifteen hundreds by an

296
00:13:27,060 --> 00:13:29,760
Italian monk and he created to double

297
00:13:29,760 --> 00:13:32,130
book entry bookkeeping system which

298
00:13:32,130 --> 00:13:34,889
basically prevents lots of mistakes and

299
00:13:34,889 --> 00:13:37,440
makes it really easy to detect errors if

300
00:13:37,440 --> 00:13:39,810
they've been made so in that respect

301
00:13:39,810 --> 00:13:43,350
it's really nothing new and one of the

302
00:13:43,350 --> 00:13:45,800
great things it's a perfect or that look

303
00:13:45,800 --> 00:13:49,410
we know exactly what happens when it

304
00:13:49,410 --> 00:13:53,820
happens how it happens usually by who it

305
00:13:53,820 --> 00:13:56,459
happens depending on what you store in

306
00:13:56,459 --> 00:13:58,320
the event but usually you store all

307
00:13:58,320 --> 00:14:00,300
those things so if you run into the

308
00:14:00,300 --> 00:14:02,490
database you detect some kind of anomaly

309
00:14:02,490 --> 00:14:04,769
dare you say well that state isn't what

310
00:14:04,769 --> 00:14:06,930
it should be it really should be

311
00:14:06,930 --> 00:14:08,430
something different instead of saying

312
00:14:08,430 --> 00:14:10,889
well don't know how it good to be there

313
00:14:10,889 --> 00:14:13,110
but it is there now we can actually go

314
00:14:13,110 --> 00:14:15,000
through all the events being store up

315
00:14:15,000 --> 00:14:17,519
for that item and track well okay these

316
00:14:17,519 --> 00:14:19,079
changes were made these changes were

317
00:14:19,079 --> 00:14:21,779
made and you can determine what changed

318
00:14:21,779 --> 00:14:24,060
actually caused the error maybe there is

319
00:14:24,060 --> 00:14:26,100
something wrong with c'mon validation

320
00:14:26,100 --> 00:14:27,959
maybe there is something wrong with

321
00:14:27,959 --> 00:14:30,420
updating the current state at least

322
00:14:30,420 --> 00:14:32,279
you've got a complete track of what

323
00:14:32,279 --> 00:14:37,110
happens so you can lock that so if we

324
00:14:37,110 --> 00:14:39,060
look at the high level architecture or

325
00:14:39,060 --> 00:14:41,250
for an event-driven system will see

326
00:14:41,250 --> 00:14:43,019
something like this so on the right hand

327
00:14:43,019 --> 00:14:44,279
side who still got our browser

328
00:14:44,279 --> 00:14:47,339
application using reactor redux and it

329
00:14:47,339 --> 00:14:48,990
still connects up to that same two

330
00:14:48,990 --> 00:14:51,060
services the commanding service and the

331
00:14:51,060 --> 00:14:54,120
query surface so as far as the client

332
00:14:54,120 --> 00:14:56,160
concerns there is really no difference

333
00:14:56,160 --> 00:14:57,870
all the difference here is at the back

334
00:14:57,870 --> 00:15:00,389
ends the command surface basically takes

335
00:15:00,389 --> 00:15:03,060
each command turns into an event it gets

336
00:15:03,060 --> 00:15:07,529
stored in its own database whatever you

337
00:15:07,529 --> 00:15:08,880
want to use there are different

338
00:15:08,880 --> 00:15:11,389
libraries implementations you can use

339
00:15:11,389 --> 00:15:13,800
there is a projector surface which

340
00:15:13,800 --> 00:15:15,449
basically picks up the whole stream of

341
00:15:15,449 --> 00:15:17,850
events coming in and it says well if

342
00:15:17,850 --> 00:15:19,829
this event happened and I want to show

343
00:15:19,829 --> 00:15:22,230
it in some way and it updates a

344
00:15:22,230 --> 00:15:25,050
projection database for it now I've said

345
00:15:25,050 --> 00:15:26,850
projection database but it could be

346
00:15:26,850 --> 00:15:28,649
plural you could actually project into

347
00:15:28,649 --> 00:15:30,720
different databases you might say well

348
00:15:30,720 --> 00:15:33,089
I've got a relational database for

349
00:15:33,089 --> 00:15:35,670
normal projections but I use elastic

350
00:15:35,670 --> 00:15:37,810
search for file searching

351
00:15:37,810 --> 00:15:42,400
and I might use MongoDB for documents

352
00:15:42,400 --> 00:15:47,350
database for yet other services and the

353
00:15:47,350 --> 00:15:49,330
query site actually queries that

354
00:15:49,330 --> 00:15:52,420
projection database so why do we need

355
00:15:52,420 --> 00:15:54,580
two different databases or projections

356
00:15:54,580 --> 00:15:56,830
and the event store well the event store

357
00:15:56,830 --> 00:15:58,930
is just a list of everything leading up

358
00:15:58,930 --> 00:16:01,120
to the current state which makes it very

359
00:16:01,120 --> 00:16:04,450
hard to query for lots of queries now

360
00:16:04,450 --> 00:16:05,830
they're actually some queries which are

361
00:16:05,830 --> 00:16:08,110
really efficient to do that like you

362
00:16:08,110 --> 00:16:10,990
could ask from well whoever drafted the

363
00:16:10,990 --> 00:16:13,330
permit and then deleted it within five

364
00:16:13,330 --> 00:16:15,940
minutes after that something you found

365
00:16:15,940 --> 00:16:18,970
really easily query in normal database

366
00:16:18,970 --> 00:16:22,000
but if you want to know about all

367
00:16:22,000 --> 00:16:24,760
permits for a given drilling platform or

368
00:16:24,760 --> 00:16:28,390
all customers that are overdraft that's

369
00:16:28,390 --> 00:16:30,400
a lot harder to do in an event database

370
00:16:30,400 --> 00:16:33,100
and that's very easy in a projection

371
00:16:33,100 --> 00:16:34,300
database because you can basically

372
00:16:34,300 --> 00:16:36,820
choose whatever you want and whatever is

373
00:16:36,820 --> 00:16:42,040
most suitable for your need but we can

374
00:16:42,040 --> 00:16:43,540
actually expand a bit on this

375
00:16:43,540 --> 00:16:46,180
architecture because if we've got a

376
00:16:46,180 --> 00:16:49,540
projector surface which receives every

377
00:16:49,540 --> 00:16:52,060
event we can also create another surface

378
00:16:52,060 --> 00:16:54,460
which says well I'll also receive all

379
00:16:54,460 --> 00:16:56,440
events and i'm going to use push

380
00:16:56,440 --> 00:16:59,050
notifications to all connected clients

381
00:16:59,050 --> 00:17:01,720
use something like web sockets or socket

382
00:17:01,720 --> 00:17:04,660
build io or whatever technology you want

383
00:17:04,660 --> 00:17:07,300
long polling could work but basically

384
00:17:07,300 --> 00:17:09,550
every client that's connected scan

385
00:17:09,550 --> 00:17:11,949
indicates whatever data it's interested

386
00:17:11,949 --> 00:17:14,380
in and it's gets notifications of

387
00:17:14,380 --> 00:17:16,720
whatever changed it will receive all

388
00:17:16,720 --> 00:17:20,170
those events now you can have as many

389
00:17:20,170 --> 00:17:22,569
clients connected as you want someone

390
00:17:22,569 --> 00:17:25,449
makes a change and everyone else sees

391
00:17:25,449 --> 00:17:28,300
that change and even if they're editing

392
00:17:28,300 --> 00:17:30,250
something as long as the two edits are

393
00:17:30,250 --> 00:17:34,740
not an actual conflict like the current

394
00:17:34,740 --> 00:17:37,450
bank account balance for a client might

395
00:17:37,450 --> 00:17:39,670
be updated through an event and another

396
00:17:39,670 --> 00:17:42,100
user is changing their address well

397
00:17:42,100 --> 00:17:44,679
we're both related to a customer but

398
00:17:44,679 --> 00:17:46,810
it's not really a conflict because it's

399
00:17:46,810 --> 00:17:49,780
different item would be affected by

400
00:17:49,780 --> 00:17:51,460
different events different commands

401
00:17:51,460 --> 00:17:53,980
so that would still be perfectly fine to

402
00:17:53,980 --> 00:17:58,330
update so what does that look on the

403
00:17:58,330 --> 00:18:00,940
client side well we've got our views

404
00:18:00,940 --> 00:18:02,950
which is basically what the user sees

405
00:18:02,950 --> 00:18:05,950
they're typically done with react at

406
00:18:05,950 --> 00:18:07,659
least in our application that's done

407
00:18:07,659 --> 00:18:10,270
with react but that could be angular it

408
00:18:10,270 --> 00:18:14,380
could be some simple view library J

409
00:18:14,380 --> 00:18:18,370
mustache or something like that we've

410
00:18:18,370 --> 00:18:20,590
got Redux which is by far the most

411
00:18:20,590 --> 00:18:24,490
popular flux implementation and it has

412
00:18:24,490 --> 00:18:27,070
its store which is basically the current

413
00:18:27,070 --> 00:18:29,169
states of whatever data you are working

414
00:18:29,169 --> 00:18:32,080
with that gets updated by actions and

415
00:18:32,080 --> 00:18:34,870
those actions are updated in part by

416
00:18:34,870 --> 00:18:38,200
user actions in view and imparts by

417
00:18:38,200 --> 00:18:41,620
server actions from as a result of other

418
00:18:41,620 --> 00:18:45,100
users being pushed back to web socket

419
00:18:45,100 --> 00:18:47,320
API so because a really nice

420
00:18:47,320 --> 00:18:49,110
architecture would really clean

421
00:18:49,110 --> 00:18:52,360
redefines data flows which makes

422
00:18:52,360 --> 00:18:54,669
everything very predictable very

423
00:18:54,669 --> 00:18:59,789
performance and very easy to understand

424
00:18:59,789 --> 00:19:03,850
now I mentioned projections and a lot of

425
00:19:03,850 --> 00:19:06,490
time when people start working with

426
00:19:06,490 --> 00:19:09,039
events or systems projection caused some

427
00:19:09,039 --> 00:19:11,799
issues what is a projection how shoot it

428
00:19:11,799 --> 00:19:14,260
look how should you shape your

429
00:19:14,260 --> 00:19:17,590
projection where should you project well

430
00:19:17,590 --> 00:19:20,169
it really depends on your needs like

431
00:19:20,169 --> 00:19:22,299
I've got a map here it's a map of the

432
00:19:22,299 --> 00:19:27,419
world it's a Mercator projection and I

433
00:19:27,419 --> 00:19:30,130
at least I assume it's an accurate map I

434
00:19:30,130 --> 00:19:32,529
haven't actually checked that they've

435
00:19:32,529 --> 00:19:34,809
got another map of the world here

436
00:19:34,809 --> 00:19:38,169
basically exactly the same data this is

437
00:19:38,169 --> 00:19:41,020
a more white projection so they're very

438
00:19:41,020 --> 00:19:43,450
different projections based on the same

439
00:19:43,450 --> 00:19:45,130
day that because there are different

440
00:19:45,130 --> 00:19:47,919
needs if you flip back to the Mercator

441
00:19:47,919 --> 00:19:50,049
projection if you take a look at

442
00:19:50,049 --> 00:19:52,570
Greenland the big white blob at the top

443
00:19:52,570 --> 00:19:56,220
it looks about the same size as Africa

444
00:19:56,220 --> 00:20:00,340
turns out that's not the case the more

445
00:20:00,340 --> 00:20:03,460
white projection is specifically made so

446
00:20:03,460 --> 00:20:05,140
you can compare areas

447
00:20:05,140 --> 00:20:07,540
so you can see that Greenland is not

448
00:20:07,540 --> 00:20:09,790
smaller than Africa and reality it's

449
00:20:09,790 --> 00:20:13,080
about the size of the Arabian Peninsula

450
00:20:13,080 --> 00:20:15,760
so what's the point of this map then

451
00:20:15,760 --> 00:20:18,250
well it turns out for navigation if

452
00:20:18,250 --> 00:20:20,410
you're moving the ship across the ocean

453
00:20:20,410 --> 00:20:22,450
ricotta projection is really nice

454
00:20:22,450 --> 00:20:24,700
because if you draw a straight line on a

455
00:20:24,700 --> 00:20:27,610
Mercator projection map you get a

456
00:20:27,610 --> 00:20:29,110
straight compass heading and if you

457
00:20:29,110 --> 00:20:31,240
follow that compass heading assuming

458
00:20:31,240 --> 00:20:32,650
there is no drift down wind than

459
00:20:32,650 --> 00:20:34,090
anything which you'll end up exactly

460
00:20:34,090 --> 00:20:37,480
where you want it to go and with the

461
00:20:37,480 --> 00:20:39,010
mall wide projection that's not the case

462
00:20:39,010 --> 00:20:41,620
so different projections based on the

463
00:20:41,620 --> 00:20:44,860
same data for different needs so it's

464
00:20:44,860 --> 00:20:47,050
actually fine if you want to start

465
00:20:47,050 --> 00:20:49,210
projecting out data and you're going to

466
00:20:49,210 --> 00:20:51,900
project it out in many many different

467
00:20:51,900 --> 00:20:55,690
shapes depending on your needs and the

468
00:20:55,690 --> 00:20:58,090
good thing with events or system the

469
00:20:58,090 --> 00:21:00,550
source of truth is not the projections

470
00:21:00,550 --> 00:21:04,090
the projections are just read only view

471
00:21:04,090 --> 00:21:06,910
of whatever the current state the source

472
00:21:06,910 --> 00:21:10,210
of truth is the stored events so if you

473
00:21:10,210 --> 00:21:12,100
come up with a new projection you need

474
00:21:12,100 --> 00:21:14,320
some time later well you can just create

475
00:21:14,320 --> 00:21:17,110
it based on all the store at events you

476
00:21:17,110 --> 00:21:19,540
just reread them again and create a new

477
00:21:19,540 --> 00:21:21,460
projection so you can throw away your

478
00:21:21,460 --> 00:21:23,920
projections and basically rebuild all of

479
00:21:23,920 --> 00:21:29,670
that whenever you want to so what does

480
00:21:29,670 --> 00:21:32,950
the Redux coat look like on the clients

481
00:21:32,950 --> 00:21:35,430
I've got there a simple example and you

482
00:21:35,430 --> 00:21:39,970
basically see redux producer which takes

483
00:21:39,970 --> 00:21:42,490
all the incoming actions like the one I

484
00:21:42,490 --> 00:21:45,730
see previously and it checks the type

485
00:21:45,730 --> 00:21:48,580
and it decides how it should handle the

486
00:21:48,580 --> 00:21:53,230
type by default it kind of says well the

487
00:21:53,230 --> 00:21:55,210
default action at the bottom I don't

488
00:21:55,210 --> 00:21:57,070
know anything to do about this action so

489
00:21:57,070 --> 00:21:58,960
I'm just going to return the state s is

490
00:21:58,960 --> 00:22:01,630
but in this case for the permit edit or

491
00:22:01,630 --> 00:22:03,340
permit drafted commands it actually

492
00:22:03,340 --> 00:22:06,190
knows how to handle those and does

493
00:22:06,190 --> 00:22:08,950
something and now this only handles the

494
00:22:08,950 --> 00:22:12,190
case of permits the collection of

495
00:22:12,190 --> 00:22:14,320
permits it doesn't worry about how to

496
00:22:14,320 --> 00:22:17,540
handle individual permits

497
00:22:17,540 --> 00:22:19,440
individual permits are done by a

498
00:22:19,440 --> 00:22:22,080
different producer so it knows if a

499
00:22:22,080 --> 00:22:24,810
single permits is drafted how the state

500
00:22:24,810 --> 00:22:28,160
inside of that permit actually changes

501
00:22:28,160 --> 00:22:31,380
now redux basically combines all those

502
00:22:31,380 --> 00:22:35,340
different producers into one complex

503
00:22:35,340 --> 00:22:38,130
tree and every time an action is fired

504
00:22:38,130 --> 00:22:40,590
that tree gets a chance to handle that

505
00:22:40,590 --> 00:22:45,090
and it decides how the current state

506
00:22:45,090 --> 00:22:48,210
should be so even though the terminology

507
00:22:48,210 --> 00:22:50,520
is very different than used in the vents

508
00:22:50,520 --> 00:22:53,880
or existence in reality it's really the

509
00:22:53,880 --> 00:22:56,820
same thing an action in redux is an

510
00:22:56,820 --> 00:22:58,890
event in the events or system it's

511
00:22:58,890 --> 00:23:01,200
something that happens we projected in

512
00:23:01,200 --> 00:23:03,870
the events or system well we reduce it

513
00:23:03,870 --> 00:23:07,950
in Redux end result is we've got some

514
00:23:07,950 --> 00:23:12,510
state to work with so how do we wire

515
00:23:12,510 --> 00:23:16,830
things up well inside of our react

516
00:23:16,830 --> 00:23:21,270
application we have a start-up so at the

517
00:23:21,270 --> 00:23:22,860
bottom you can see that react don't

518
00:23:22,860 --> 00:23:25,410
render which actually should be react do

519
00:23:25,410 --> 00:23:27,570
not render this code is slightly old

520
00:23:27,570 --> 00:23:30,330
sorry about that and you see that our

521
00:23:30,330 --> 00:23:32,790
application the app elements is wrapped

522
00:23:32,790 --> 00:23:35,400
inside the provider that provider is

523
00:23:35,400 --> 00:23:39,450
provided by reacts redux which basically

524
00:23:39,450 --> 00:23:42,960
connects Redux to react like I mentioned

525
00:23:42,960 --> 00:23:45,180
before Redux could be used anywhere

526
00:23:45,180 --> 00:23:47,940
without react but that connects it to up

527
00:23:47,940 --> 00:23:49,830
and that makes all the day they're

528
00:23:49,830 --> 00:23:53,160
stored inside our redux store available

529
00:23:53,160 --> 00:23:59,310
for all react components next thing is

530
00:23:59,310 --> 00:24:03,240
ok now we need that components to have

531
00:24:03,240 --> 00:24:05,670
data so one of the first components I

532
00:24:05,670 --> 00:24:09,480
showed that list of permits needs to

533
00:24:09,480 --> 00:24:12,500
have the list of permits to display and

534
00:24:12,500 --> 00:24:16,170
you do let using another thing react

535
00:24:16,170 --> 00:24:19,020
Redux provides the Kinect function which

536
00:24:19,020 --> 00:24:21,390
Bailey says will connect up some data

537
00:24:21,390 --> 00:24:24,240
from the store what well there's a map

538
00:24:24,240 --> 00:24:27,780
states to props so it map state from the

539
00:24:27,780 --> 00:24:30,300
store to properties in we have

540
00:24:30,300 --> 00:24:32,850
and in this case it just says well met

541
00:24:32,850 --> 00:24:36,420
all the permits from that store into the

542
00:24:36,420 --> 00:24:38,880
properties of the components so it has

543
00:24:38,880 --> 00:24:43,140
its list of permits the other thing the

544
00:24:43,140 --> 00:24:45,270
original component had was that draft

545
00:24:45,270 --> 00:24:49,050
permit commands so it needs to know how

546
00:24:49,050 --> 00:24:51,900
to handle that and the second function

547
00:24:51,900 --> 00:24:53,700
here on the slide is actually intended

548
00:24:53,700 --> 00:24:56,090
for that so map dates patch to props

549
00:24:56,090 --> 00:24:59,400
dispatching means dispatch in action so

550
00:24:59,400 --> 00:25:01,980
some thing in the back end producers

551
00:25:01,980 --> 00:25:06,510
api's etc get to handle that so with

552
00:25:06,510 --> 00:25:08,730
this we've basically completed the

553
00:25:08,730 --> 00:25:11,760
circle we've got reacts components which

554
00:25:11,760 --> 00:25:14,460
are completely unaware of how the day

555
00:25:14,460 --> 00:25:16,800
that works they are purely focused on

556
00:25:16,800 --> 00:25:20,040
rendering we've got Redux which is all

557
00:25:20,040 --> 00:25:22,860
about the client-side state which is fed

558
00:25:22,860 --> 00:25:26,100
on the one hand by user actions on the

559
00:25:26,100 --> 00:25:29,010
other hand by push notifications from

560
00:25:29,010 --> 00:25:32,070
the server you've got the server which

561
00:25:32,070 --> 00:25:34,770
stores all the events resulting in the

562
00:25:34,770 --> 00:25:37,620
commands being sent in a database and

563
00:25:37,620 --> 00:25:39,960
projects those out into a rig model or

564
00:25:39,960 --> 00:25:43,410
whatever shape we need and we've got a

565
00:25:43,410 --> 00:25:48,140
very scalable and very nice architektur

566
00:25:48,140 --> 00:25:51,480
so with that I'm slightly out of time

567
00:25:51,480 --> 00:25:55,350
but at the end of my presentation all my

568
00:25:55,350 --> 00:25:57,300
slides will be a SlideShare later this

569
00:25:57,300 --> 00:25:59,970
afternoon so on the right hand bottom

570
00:25:59,970 --> 00:26:02,400
you can see my Twitter accounts if you

571
00:26:02,400 --> 00:26:04,830
just check my Twitter accounts somewhere

572
00:26:04,830 --> 00:26:06,960
at the end of the afternoon you'll find

573
00:26:06,960 --> 00:26:09,420
a tweak there pointing to the slides and

574
00:26:09,420 --> 00:26:12,660
slide share and with that I would like

575
00:26:12,660 --> 00:26:15,540
to thank you for inviting me and

