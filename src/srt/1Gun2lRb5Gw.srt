1
00:00:10,060 --> 00:00:11,120
Hi, I'm Mike Samuel.

2
00:00:11,120 --> 00:00:16,119
I work on Google's security engineering team
where we try to improve programming languages,

3
00:00:16,119 --> 00:00:21,109
libraries, frameworks and other parts of our
software development tool chain to make it

4
00:00:21,109 --> 00:00:27,890
easier to secure robust software.

5
00:00:27,890 --> 00:00:33,039
Practice of programming has some of the best
advice on how to avoid bugs in your software.

6
00:00:33,039 --> 00:00:38,110
So, every bug you can find can teach you how
to prevent a similar bug from happening again,

7
00:00:38,110 --> 00:00:42,079
or to recognize if it does.

8
00:00:42,079 --> 00:00:47,500
And my colleagues and I put together a roadmap
for Node.js security.

9
00:00:47,500 --> 00:00:55,739
We want to understand what are the kinds of
bugs that have security consequences in Node.js.

10
00:00:55,739 --> 00:00:57,050
I'm not going to walk you through it.

11
00:00:57,050 --> 00:01:04,890
I would like to show you a little bit about
how security engineers go about our work.

12
00:01:04,890 --> 00:01:10,820
How we identify classes of vulnerabilities
and try to address them.

13
00:01:10,820 --> 00:01:16,610
What I would like to impress upon you, given
the right tools, we can address entire classes

14
00:01:16,610 --> 00:01:18,570
of vulnerabilities.

15
00:01:18,570 --> 00:01:24,500
Instead of just finding a particular instance,
we want to deal with all instances of a bug

16
00:01:24,500 --> 00:01:26,119
in a product.

17
00:01:26,119 --> 00:01:29,189
So, I'm going to show you some mediocre code.

18
00:01:29,189 --> 00:01:31,770
This is code that I've written.

19
00:01:31,770 --> 00:01:36,970
And I'm going to walk through it and show
you some bugs in it.

20
00:01:36,970 --> 00:01:44,890
Then I want to show you how we can comprehensively
address the root causes of those issues.

21
00:01:44,890 --> 00:01:52,140
Then I'll get into some of the human factors
and how web standards can help us advance

22
00:01:52,140 --> 00:01:53,140
security.

23
00:01:53,140 --> 00:01:57,810
So, let me show you some code.

24
00:01:57,810 --> 00:02:02,119
So, can you is this is this something that
people can see?

25
00:02:02,119 --> 00:02:05,750
If this is too small, you might want to move
forward.

26
00:02:05,750 --> 00:02:10,270
So, as you can see, this is a vanilla Node.js
server.

27
00:02:10,270 --> 00:02:13,980
I'm requiring a bunch of modules up top.

28
00:02:13,980 --> 00:02:20,360
The least popular of these modules has about
350,000 downloads per week.

29
00:02:20,360 --> 00:02:24,520
So, these are not uncommon modules to see.

30
00:02:24,520 --> 00:02:27,380
I'm setting some headers.

31
00:02:27,380 --> 00:02:34,470
And, well, the Chrome people would be unhappy
with me if I showed Chrome XSS protection

32
00:02:34,470 --> 00:02:36,120
bypasses.

33
00:02:36,120 --> 00:02:42,470
So, I'm putting in XSS zero for demo purposes.

34
00:02:42,470 --> 00:02:45,280
And then I've got a function that creates
a handler.

35
00:02:45,280 --> 00:02:47,980
So, it does some session management.

36
00:02:47,980 --> 00:02:52,440
Make sure there's a unique per client cookie.

37
00:02:52,440 --> 00:02:57,110
And then we get into the bulk of the handler
function.

38
00:02:57,110 --> 00:03:03,520
So, you can see here in the middle it's I've
defined the URL space.

39
00:03:03,520 --> 00:03:07,310
We have slash, which is our index page.

40
00:03:07,310 --> 00:03:11,840
Upload, which lets me upload a file.

41
00:03:11,840 --> 00:03:14,990
Calculate, which calculates an expression.

42
00:03:14,990 --> 00:03:16,130
And then we collect client errors.

43
00:03:16,130 --> 00:03:20,150
So, let me show you how this works in practice.

44
00:03:20,150 --> 00:03:26,340
So, the goal of this application is to let
people upload equations and then compute them

45
00:03:26,340 --> 00:03:27,710
with results.

46
00:03:27,710 --> 00:03:35,010
And so, I can choose XPY just as the text
X plus Y in it.

47
00:03:35,010 --> 00:03:37,770
I upload that file.

48
00:03:37,770 --> 00:03:42,830
It gives me something that I can share with
other users.

49
00:03:42,830 --> 00:03:45,990
And I can type some JSON into the box here.

50
00:03:45,990 --> 00:03:49,270
You see that I've got a radio button.

51
00:03:49,270 --> 00:03:56,140
And if I can type a line of JSON without screwing
up.

52
00:03:56,140 --> 00:03:58,480
I get one plus one is 42.

53
00:03:58,480 --> 00:04:03,710
This isn't particularly surprising, but I
have to wonder what it all means.

54
00:04:03,710 --> 00:04:12,470
So, we've got our URL space and then we get
into the handlers.

55
00:04:12,470 --> 00:04:20,530
So, you can see when we're serving the index
page, we spit out a bunch of HTML.

56
00:04:20,530 --> 00:04:27,850
And we spit out a form with our text area
and a radio button for each of our uploaded

57
00:04:27,850 --> 00:04:29,930
files.

58
00:04:29,930 --> 00:04:33,650
And at the bottom we have our upload form.

59
00:04:33,650 --> 00:04:43,850
So, once we've got our equation, once once
a user tries to upload forms, I use multi

60
00:04:43,850 --> 00:04:47,350
party to handle the upload.

61
00:04:47,350 --> 00:04:56,790
For each file I multi party gives us a random
file name for each file.

62
00:04:56,790 --> 00:04:59,830
It give uses a temporary file.

63
00:04:59,830 --> 00:05:02,150
And we're calling out to the shell.

64
00:05:02,150 --> 00:05:04,640
So, we see to the directory.

65
00:05:04,640 --> 00:05:09,930
We create a directory for the current session
if one doesn't exist.

66
00:05:09,930 --> 00:05:21,060
We move the temporary file into a shared path
which gives us which just has the same base

67
00:05:21,060 --> 00:05:22,460
name as the temporary file.

68
00:05:22,460 --> 00:05:24,970
That's an auto generated file name.

69
00:05:24,970 --> 00:05:29,930
And then we link the shared file into the
current user's directory.

70
00:05:29,930 --> 00:05:34,820
So, you're probably thinking, he's calling
out to the shell, this is a big security no

71
00:05:34,820 --> 00:05:35,960
no.

72
00:05:35,960 --> 00:05:43,070
This kind of thing happens in a lot of code
because the shell is so seductively simple.

73
00:05:43,070 --> 00:05:49,250
This is a very succinct piece of code that
does something that will probably require

74
00:05:49,250 --> 00:05:50,680
a dozen lines.

75
00:05:50,680 --> 00:05:56,480
In addition, all of the inputs, FS route is
controlled by the application.

76
00:05:56,480 --> 00:06:01,660
This directory is based on random numbers
generated by the application.

77
00:06:01,660 --> 00:06:03,160
They're not controlled by an attacker.

78
00:06:03,160 --> 00:06:05,880
The same for the rest of it.

79
00:06:05,880 --> 00:06:10,210
The attacker controls none of this none of
the inputs to this.

80
00:06:10,210 --> 00:06:13,650
Except as it turns out, the file extension
of the uploaded file.

81
00:06:13,650 --> 00:06:21,460
So, this seems like a very incontroversial
use of something that's known to be a hazard.

82
00:06:21,460 --> 00:06:34,740
And as it turns out, there is a subtle bug
in excuse me.

83
00:06:34,740 --> 00:06:43,400
So, I can send a crafted input, if I don't
fall off the stage.

84
00:06:43,400 --> 00:06:48,510
I can send a crafted input to the upload form.

85
00:06:48,510 --> 00:07:01,530
And it has this file name.

86
00:07:01,530 --> 00:07:02,530
And that works.

87
00:07:02,530 --> 00:07:05,820
You can see that it's generated the crafted
upload here.

88
00:07:05,820 --> 00:07:10,080
Based on this file extension.

89
00:07:10,080 --> 00:07:17,000
That file extension is X.Y followed by an
obscure Unicode new line.

90
00:07:17,000 --> 00:07:20,090
Followed by something which breaks out of
coded string.

91
00:07:20,090 --> 00:07:24,590
Then it does touch, and then it continues
on with something.

92
00:07:24,590 --> 00:07:32,400
It reopens the quote so that the whole form
is a valid shell string.

93
00:07:32,400 --> 00:07:43,180
And if I look for the file, it's now sitting
in the root directory of my application.

94
00:07:43,180 --> 00:07:55,840
So, what happened was we a very quite uncontroversial
use of the shell.

95
00:07:55,840 --> 00:08:02,810
Due to an obscure bug in a in a third party
library.

96
00:08:02,810 --> 00:08:03,880
One that has been fixed, by the way.

97
00:08:03,880 --> 00:08:08,510
So, I'm not reporting zero days here.

98
00:08:08,510 --> 00:08:16,949
An obscure bug in a third party library lets
me take offer the shell, get shell special

99
00:08:16,949 --> 00:08:24,960
characters into where the user thought that
there were only going to be alphanumerics

100
00:08:24,960 --> 00:08:28,300
from a randomly generated file name.

101
00:08:28,300 --> 00:08:34,800
And so, we need to have more consistent ways
to address this problem.

102
00:08:34,800 --> 00:08:38,260
And that's going to be a theme throughout
this talk.

103
00:08:38,260 --> 00:08:49,450
So, moving on, when we calculate the result,
we lead the uploaded file, including the text,

104
00:08:49,450 --> 00:08:51,760
plus one.

105
00:08:51,760 --> 00:08:55,270
We parse some JSON.

106
00:08:55,270 --> 00:09:00,770
When I showed you earlier, I showed you JSON
which said X was 1 and Y was 41.

107
00:09:00,770 --> 00:09:09,650
And then we get we use a library that checks
that the uploaded file only contains arithmetic

108
00:09:09,650 --> 00:09:11,020
operations.

109
00:09:11,020 --> 00:09:15,529
And then the result of that is probably going
to be a number.

110
00:09:15,529 --> 00:09:18,500
So, we output a string if everything is okay.

111
00:09:18,500 --> 00:09:23,040
If there's an error message, we tell you there's
an error message.

112
00:09:23,040 --> 00:09:24,700
We're careful to escape it.

113
00:09:24,700 --> 00:09:28,200
If not, we don't.

114
00:09:28,200 --> 00:09:32,790
There's a problem.

115
00:09:32,790 --> 00:09:43,830
Arithmetic expressions in JavaScript sometimes
produce strings.

116
00:09:43,830 --> 00:09:52,080
And so, that allows me to run arbitrary JavaScript.

117
00:09:52,080 --> 00:09:56,370
If you didn't catch that, there was an alert
which popped up.

118
00:09:56,370 --> 00:10:03,290
So, the payload is script alert, one script,
I ran that on the client.

119
00:10:03,290 --> 00:10:13,900
So, again, the this is the kind of error,
you know, that occurs in a lot of, for example,

120
00:10:13,900 --> 00:10:20,920
ad hock reporting software where you need
to report client side expressions.

121
00:10:20,920 --> 00:10:22,000
It's an easy mistake to make.

122
00:10:22,000 --> 00:10:32,830
You need a consistent way that the developer
has [audio breaking up] we need the best ways

123
00:10:32,830 --> 00:10:47,070
to our security catching all of our different
client and, you know, on the server side we

124
00:10:47,070 --> 00:10:51,430
also often want to figure out which one is
on the client.

125
00:10:51,430 --> 00:11:02,740
So, log client error is a receiver for for
messages from the client on the client I don't

126
00:11:02,740 --> 00:11:06,020
know if you can see this.

127
00:11:06,020 --> 00:11:13,000
We keep patch console.error so that it not
only dumps things to the developer console,

128
00:11:13,000 --> 00:11:18,400
it also phones home with error messages.

129
00:11:18,400 --> 00:11:24,190
And this is intriguing style little zebra.

130
00:11:24,190 --> 00:11:28,890
I don't know if you guys are familiar with
the colors module.

131
00:11:28,890 --> 00:11:36,940
Let me just show you what this looks like
in practice.

132
00:11:36,940 --> 00:11:44,810
So, let's try not to fall off this side either.

133
00:11:44,810 --> 00:11:48,940
So, I did console that error, zebras are so
fun.

134
00:11:48,940 --> 00:11:54,190
You see it shows up in the developer console.

135
00:11:54,190 --> 00:12:01,350
And you can see down here, zebras are so fun.

136
00:12:01,350 --> 00:12:11,730
And that happens because and the colors module
allows you to colorize your log output.

137
00:12:11,730 --> 00:12:16,500
This is the kind of thing that, you know,
an intern comes into your project.

138
00:12:16,500 --> 00:12:22,390
They decide, I'm having trouble trolling through
the logs to find what I'm going to do.

139
00:12:22,390 --> 00:12:24,550
I'm going to make their logs a little bit
more awesome.

140
00:12:24,550 --> 00:12:27,980
You know, zebras are so fun.

141
00:12:27,980 --> 00:12:29,910
Rainbows are awesome.

142
00:12:29,910 --> 00:12:34,010
And they're even more awesome when they're
in your log files.

143
00:12:34,010 --> 00:12:41,870
So, an attacker can obviously Spam your logs
now.

144
00:12:41,870 --> 00:12:49,420
But unless if you're going to accept telemetry
from the client at all, especially when the

145
00:12:49,420 --> 00:12:57,020
client isn't in a consistent state, you need
to, you know, accept that and filter it later.

146
00:12:57,020 --> 00:13:02,840
But there's another thing that an attacker
can do with this.

147
00:13:02,840 --> 00:13:17,580
Because of another subtle flaw that has since
been fixed in the color package, I can upload

148
00:13:17,580 --> 00:13:18,890
a file.

149
00:13:18,890 --> 00:13:30,110
So, I'm going to upload helloworld.js.

150
00:13:30,110 --> 00:13:32,740
It gives me this random string.

151
00:13:32,740 --> 00:13:41,810
So, I'm going to say nuance equals that random
string rather than trying to type out an entire

152
00:13:41,810 --> 00:13:46,590
tech.

153
00:13:46,590 --> 00:13:56,300
So, this attack code you can see over here.

154
00:13:56,300 --> 00:14:01,950
It does a post to client error, but with a
style that's equal to dot, dot, dot slash,

155
00:14:01,950 --> 00:14:06,870
dot, dot slash uploads, slash not.

156
00:14:06,870 --> 00:14:13,660
So, there is a subtle flaw in colors.js.

157
00:14:13,660 --> 00:14:23,020
Colors, if the type of the theme is string,
then it requires a theme.

158
00:14:23,020 --> 00:14:29,230
Which allows you to get an arbitrary string,
possibly attacker controlled, treated as a

159
00:14:29,230 --> 00:14:31,269
module name.

160
00:14:31,269 --> 00:14:41,910
So, you can see down here that the attacker
code ran, hello world, and then we've got

161
00:14:41,910 --> 00:14:49,920
the generic message that the attacker sent.

162
00:14:49,920 --> 00:14:58,470
So, we saw three different exploits.

163
00:14:58,470 --> 00:15:03,339
We saw exploits in, you know, this is contrived
code that I've put together.

164
00:15:03,339 --> 00:15:08,480
I wanted to put together, it's about 140 lines
of code that is vulnerable to three different

165
00:15:08,480 --> 00:15:13,910
kinds of three different classes of vulnerabilities.

166
00:15:13,910 --> 00:15:19,200
It is the kind of code that you might say
there's something dodgy going on in code review,

167
00:15:19,200 --> 00:15:23,899
but hopefully if I've done my job, you can't
quite put your finger on why.

168
00:15:23,899 --> 00:15:27,339
And yet it leave this is application wide
open.

169
00:15:27,339 --> 00:15:28,899
What we didn't see was malicious code.

170
00:15:28,899 --> 00:15:35,110
None of this code was written with the no
malicious code reached this until it was actually

171
00:15:35,110 --> 00:15:38,210
running in production.

172
00:15:38,210 --> 00:15:41,490
We saw that the developer tried to resist
attacks.

173
00:15:41,490 --> 00:15:44,950
So, they put escape.HTML in almost all the
right places.

174
00:15:44,950 --> 00:15:46,790
But not consistently.

175
00:15:46,790 --> 00:15:50,430
We saw widely used dependencies.

176
00:15:50,430 --> 00:15:55,390
We didn't see uncommon dependencies that have
probably not had enough eyeballs to catch

177
00:15:55,390 --> 00:15:57,709
the errors.

178
00:15:57,709 --> 00:16:02,220
And we saw the server side is still vulnerable.

179
00:16:02,220 --> 00:16:10,230
And an npm audit, it's awesome, by the way,
if you haven't come across it.

180
00:16:10,230 --> 00:16:14,860
Npm audit reports no problems with this code.

181
00:16:14,860 --> 00:16:21,360
So, what we need is we need a way these are
the common kind of errors that developers

182
00:16:21,360 --> 00:16:22,360
make.

183
00:16:22,360 --> 00:16:26,540
What we need is a way to make sure that even
when developers make common errors that we're

184
00:16:26,540 --> 00:16:27,540
not vulnerable.

185
00:16:27,540 --> 00:16:34,079
So, I'm going to show you how to fix these
in what I hope are comprehensive ways.

186
00:16:34,079 --> 00:16:35,970
The three problems.

187
00:16:35,970 --> 00:16:43,390
The abuse of require via the our client logs
collection.

188
00:16:43,390 --> 00:16:46,899
Shell injection when on a file upload.

189
00:16:46,899 --> 00:16:50,040
And cross site scripting.

190
00:16:50,040 --> 00:16:56,490
So, to fix access S, the first thing we do,
it's kind of ironic.

191
00:16:56,490 --> 00:17:01,600
We get rid of our dependency on escape.HTML.

192
00:17:01,600 --> 00:17:08,350
And we actually get rid of most of our code
that generates HTML and move it into templates.

193
00:17:08,350 --> 00:17:15,250
So, here we're requiring generated files that
are compiled from templates.

194
00:17:15,250 --> 00:17:20,009
So, all of this goes away.

195
00:17:20,009 --> 00:17:27,689
And we end up calling response.end with a
call to a template.

196
00:17:27,689 --> 00:17:30,609
That template is compiled from a pug file.

197
00:17:30,609 --> 00:17:34,379
If you're not familiar with pug, it's a template
language.

198
00:17:34,379 --> 00:17:37,619
It auto escapes content.

199
00:17:37,619 --> 00:17:43,379
So, in the case of let me see.

200
00:17:43,379 --> 00:17:47,100
I'm having a hard time reading this.

201
00:17:47,100 --> 00:17:50,970
So, here is a dynamic expression.

202
00:17:50,970 --> 00:17:52,660
The name of a radio button.

203
00:17:52,660 --> 00:17:55,789
It includes radio and a number.

204
00:17:55,789 --> 00:17:59,470
That will be automatically escaped.

205
00:17:59,470 --> 00:18:03,799
In this case, the session will be automatically
HTML escaped.

206
00:18:03,799 --> 00:18:08,909
So, this HTML escapes isn't perfect.

207
00:18:08,909 --> 00:18:18,279
It Pug templates are still vulnerable to URLs,
I'm working on a plugin to fix that.

208
00:18:18,279 --> 00:18:27,029
We have moved our HTML generation, generating
code, to something that is safe by default.

209
00:18:27,029 --> 00:18:29,009
Users can opt out of escaping.

210
00:18:29,009 --> 00:18:34,220
But security people like me can make scanners
that can find those kinds of problems.

211
00:18:34,220 --> 00:18:42,629
What we then do is take the templates and
wrap them in a function, so the result is

212
00:18:42,629 --> 00:18:44,090
a trusted HTML.

213
00:18:44,090 --> 00:18:50,619
A trusted HTML creates a trusted HTML value
from a string.

214
00:18:50,619 --> 00:18:52,179
We're using the type system.

215
00:18:52,179 --> 00:18:56,830
Instead of just passing strings around, we
want to distinguish strings that we know are

216
00:18:56,830 --> 00:19:03,980
safe from strings that we don't know where
they come from.

217
00:19:03,980 --> 00:19:09,570
Then we monkey patch response.right and response.end.

218
00:19:09,570 --> 00:19:18,190
And what this means is that if any plain old
string reaches response.end and response.right,

219
00:19:18,190 --> 00:19:21,620
it won't get written.

220
00:19:21,620 --> 00:19:23,279
You'll get an exception instead.

221
00:19:23,279 --> 00:19:30,480
This kind of guides developers towards using
tools that produce trusted HTML.

222
00:19:30,480 --> 00:19:32,510
And so, we've covered the two endpoints.

223
00:19:32,510 --> 00:19:34,609
We've got our sources for creating trusted
HTML.

224
00:19:34,609 --> 00:19:38,999
And we have our end point that only accepts
trusted HTML.

225
00:19:38,999 --> 00:19:42,690
This is not perfect.

226
00:19:42,690 --> 00:19:46,789
A malicious developer could probably work
around this by reaching into prototypes to

227
00:19:46,789 --> 00:19:51,019
get at the underlying response.right.

228
00:19:51,019 --> 00:19:55,529
But it's pretty good when you trust your developers
and work with them.

229
00:19:55,529 --> 00:19:59,559
And then what we need to do is we want to
make sure we still have the problem.

230
00:19:59,559 --> 00:20:00,850
What can create trusted HTML?

231
00:20:00,850 --> 00:20:03,490
Well, it turns out, anybody.

232
00:20:03,490 --> 00:20:08,610
Which means that the path for least resistance
for a developer is, I trust myself to make

233
00:20:08,610 --> 00:20:09,610
trusted HTML.

234
00:20:09,610 --> 00:20:13,029
So, I'll make trusted HTML.

235
00:20:13,029 --> 00:20:22,350
There's some machinery in this augmentable
tine, a super type of trusted HTML.

236
00:20:22,350 --> 00:20:27,690
There's some machinery in there which lets
us control who can create those values.

237
00:20:27,690 --> 00:20:30,639
So, this appears in package.JSON.

238
00:20:30,639 --> 00:20:40,019
It says we're granting the ability to create
trusted HTML to the following packages, trustedtemplate.js.

239
00:20:40,019 --> 00:20:44,149
That's the file to wrap the pug templates.

240
00:20:44,149 --> 00:20:51,190
There's one more to close the loop, but I'll
point that out later.

241
00:20:51,190 --> 00:20:57,789
And then as an additional security measure,
we put in a pretty strict content security

242
00:20:57,789 --> 00:20:58,789
policy.

243
00:20:58,789 --> 00:21:04,859
So, if you guys are unfamiliar with the content
security policy error, it allows you to specify

244
00:21:04,859 --> 00:21:07,470
what scripts can low.

245
00:21:07,470 --> 00:21:17,830
It receives the header and says I will only
allow in this case scripts that have the source

246
00:21:17,830 --> 00:21:23,979
CSP a nonce that is this CSP nonce value.

247
00:21:23,979 --> 00:21:34,940
That value is defined up there as a random
string that is scoped to the session.

248
00:21:34,940 --> 00:21:37,360
So, every sorry, scoped to the response.

249
00:21:37,360 --> 00:21:40,480
So, every response has a different CSP nonce.

250
00:21:40,480 --> 00:21:47,460
So, that means that only script tags that
are marked that way will run.

251
00:21:47,460 --> 00:21:55,129
And then if there are any violations, they
get reported and that show up in our logs.

252
00:21:55,129 --> 00:22:05,289
And in our pug template we mark our script
tag with the CSP nonce so that our form validation

253
00:22:05,289 --> 00:22:07,799
code runs.

254
00:22:07,799 --> 00:22:15,609
And so, we crafted a solution from save by
default tools, pug, auto escapes, unless you

255
00:22:15,609 --> 00:22:16,840
opt out.

256
00:22:16,840 --> 00:22:19,519
And we can control those opt out.

257
00:22:19,519 --> 00:22:25,710
It distinguishes safe from unsafe values for
particular context.

258
00:22:25,710 --> 00:22:32,350
In this case, the HTML that is allowed to
be a part of a response body.

259
00:22:32,350 --> 00:22:34,489
We checked the safety at run time.

260
00:22:34,489 --> 00:22:38,499
So, we guarded our response writer.

261
00:22:38,499 --> 00:22:42,059
Response.write doesn't take strings, only
trusted HTML.

262
00:22:42,059 --> 00:22:49,739
And we grant privilege the ability to make
trusted values are stored in source control

263
00:22:49,739 --> 00:22:53,519
and they're checked at run time.

264
00:22:53,519 --> 00:23:00,019
So, static linters like ESLint and TSLint,
they can catch it, but they are unsound.

265
00:23:00,019 --> 00:23:09,019
And 
on to the next vulnerability.

266
00:23:09,019 --> 00:23:11,119
You saw this code already.

267
00:23:11,119 --> 00:23:17,299
We were granting trusted HTML to trusted template.

268
00:23:17,299 --> 00:23:24,629
We also granted the ability to create to SH
template tag the ability to create something

269
00:23:24,629 --> 00:23:26,369
called SH fragment.

270
00:23:26,369 --> 00:23:31,960
And that's going to figure in our solution
to shell injection.

271
00:23:31,960 --> 00:23:39,409
It looks like I am running out of time, so
maybe I should move forward.

272
00:23:39,409 --> 00:23:43,190
Okay.

273
00:23:43,190 --> 00:23:52,309
So, what we end up doing is we end up replacing
our callout to the child process with the

274
00:23:52,309 --> 00:23:55,070
use of the SH template tag.

275
00:23:55,070 --> 00:23:57,710
And SH template tag is like pug.

276
00:23:57,710 --> 00:23:58,710
It auto escapes.

277
00:23:58,710 --> 00:24:03,590
It auto escapes for the SH and bash grammars.

278
00:24:03,590 --> 00:24:15,179
We use similar mechanisms to make sure that
only SH fragments can reach child process.

279
00:24:15,179 --> 00:24:23,860
And that involves hooking into require so
that, for example, the only thing that can

280
00:24:23,860 --> 00:24:28,799
require child process is the exec SH fragment.

281
00:24:28,799 --> 00:24:34,899
If anything else tries to, we block it.

282
00:24:34,899 --> 00:24:42,840
And then quickly, we can also use these require
hooks to do things like figure out what are

283
00:24:42,840 --> 00:24:44,809
all the production sources?

284
00:24:44,809 --> 00:24:48,970
So, I instrumented them with the test runner.

285
00:24:48,970 --> 00:24:55,880
After the tests run I walked the module graph
starting at the main module.

286
00:24:55,880 --> 00:24:56,880
Here is the main module.

287
00:24:56,880 --> 00:25:00,460
The gray modules sorry if this is entirely
unreadable.

288
00:25:00,460 --> 00:25:04,399
The gray modules are all things under known
modules.

289
00:25:04,399 --> 00:25:08,239
And the white modules are the actual source
code.

290
00:25:08,239 --> 00:25:14,019
What we ended up with is we found 58 JavaScript
files were needed out of the 114 installed

291
00:25:14,019 --> 00:25:22,609
when only = prod are available under the Node
modules.

292
00:25:22,609 --> 00:25:35,460
We can hash those, and we can make sure that
the block any requires of files that have

293
00:25:35,460 --> 00:25:37,690
unrecognized hashes.

294
00:25:37,690 --> 00:25:42,759
So, this solves or problem with the colors
module.

295
00:25:42,759 --> 00:25:51,919
And so, crafting strong security stories,
having secured by design tools is useful is

296
00:25:51,919 --> 00:25:57,039
great but they're only useful if people use
them.

297
00:25:57,039 --> 00:26:04,379
We can run our test code to establish a baseline
before code becomes available and open to

298
00:26:04,379 --> 00:26:07,259
attack.

299
00:26:07,259 --> 00:26:12,570
We can use lightweight dynamic enforcement
which actually solves the security problems.

300
00:26:12,570 --> 00:26:20,409
And if done right, it guides developers towards
these safe by design tools.

301
00:26:20,409 --> 00:26:29,320
And module linking hooks let us close a loop
and make guarantees about only these modules

302
00:26:29,320 --> 00:26:32,639
would result in these kinds of security vulnerabilities.

303
00:26:32,639 --> 00:26:38,759
Therefore, we can security people like me
can focus our attention on those particular

304
00:26:38,759 --> 00:26:40,450
modules.

305
00:26:40,450 --> 00:26:45,809
So, security's a team effort.

306
00:26:45,809 --> 00:26:51,009
With these techniques a team can opt into
security processes.

307
00:26:51,009 --> 00:26:56,070
They can record human judgments and source
control about which modules they trust to

308
00:26:56,070 --> 00:26:57,779
do what.

309
00:26:57,779 --> 00:27:01,489
And they can enforce those judgments dynamically.

310
00:27:01,489 --> 00:27:09,940
And I have lots of awesome froes diagrams,
but if you guys are interested in standards,

311
00:27:09,940 --> 00:27:15,070
here are four standards to keep an eye on
that I think will help us with security.

312
00:27:15,070 --> 00:27:16,599
The realm standard.

313
00:27:16,599 --> 00:27:23,330
That gives privilege separation within a Node
namespace and provides the kind of import

314
00:27:23,330 --> 00:27:25,840
hooks that I think are useful.

315
00:27:25,840 --> 00:27:30,809
Trusted types provides libraries for strings
that are not just strings.

316
00:27:30,809 --> 00:27:39,009
Strings that we trust to specify HTML or script
or URLs we might load into an origin.

317
00:27:39,009 --> 00:27:47,009
Module keys allows us to represent the identity
of a module in a way that's not spoofable.

318
00:27:47,009 --> 00:27:54,539
And decorators are not directly security relevant,
but they provide things like annotations in

319
00:27:54,539 --> 00:27:59,619
other languages which can improve the ergonomics
of a lot of this.

320
00:27:59,619 --> 00:28:06,129
And you can get the note security roadmap
at that URL at the top.

321
00:28:06,129 --> 00:28:11,369
The code for that I demoed is at that GitHub
URL.

322
00:28:11,369 --> 00:28:16,809
Here are some of the some of the standards
that I talked about.

323
00:28:16,809 --> 00:28:26,580
And if you like web security, I put together
a series much web security puzzles.

324
00:28:26,580 --> 00:28:28,700
And you can find me on Twitter @michaelsamuel.

