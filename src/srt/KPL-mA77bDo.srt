1
00:00:14,300 --> 00:00:17,220

hi everyone so yeah today I'm gonna talk

2
00:00:17,220 --> 00:00:19,560
about a couple of CSS fun facts that

3
00:00:19,560 --> 00:00:21,300
I've collected over the years the kind

4
00:00:21,300 --> 00:00:24,029
of things that were interesting to me

5
00:00:24,029 --> 00:00:25,950
when I finally did understand them or

6
00:00:25,950 --> 00:00:27,570
took me a very long time to figure out

7
00:00:27,570 --> 00:00:29,640
and it is my hope that some of these

8
00:00:29,640 --> 00:00:31,770
things are new to you or at least that

9
00:00:31,770 --> 00:00:33,480
they are entertaining in some way and

10
00:00:33,480 --> 00:00:35,550
I'm sure that at the end of the talk

11
00:00:35,550 --> 00:00:37,530
you'll agree that CSS is much more

12
00:00:37,530 --> 00:00:39,780
powerful and even more beautiful than

13
00:00:39,780 --> 00:00:41,580
what we end up using it for in our day

14
00:00:41,580 --> 00:00:46,230
to day jobs so first let me just quickly

15
00:00:46,230 --> 00:00:49,290
introduce myself hi I'm Matthias I work

16
00:00:49,290 --> 00:00:50,910
for Opera Software in developer

17
00:00:50,910 --> 00:00:52,829
relations and before that I used to

18
00:00:52,829 --> 00:00:54,780
freelance as a web developer a front-end

19
00:00:54,780 --> 00:00:56,610
web developer so you could say I have

20
00:00:56,610 --> 00:00:58,760
been dealing with CSS for a lot of years

21
00:00:58,760 --> 00:01:01,469
now I like web standards in general

22
00:01:01,469 --> 00:01:03,870
programming web security and working on

23
00:01:03,870 --> 00:01:06,630
open source projects now if you have any

24
00:01:06,630 --> 00:01:08,399
questions at all during this talk like

25
00:01:08,399 --> 00:01:09,960
if you're watching the live stream or

26
00:01:09,960 --> 00:01:11,759
whatever or watching this video later

27
00:01:11,759 --> 00:01:13,680
just send me a message on twitter my

28
00:01:13,680 --> 00:01:16,229
handle is just my first name Mattias and

29
00:01:16,229 --> 00:01:18,060
I'll be sure to get back to you of

30
00:01:18,060 --> 00:01:19,500
course if you're here today just come

31
00:01:19,500 --> 00:01:21,659
talk to me afterwards and I'll be happy

32
00:01:21,659 --> 00:01:24,750
to answer any questions you have now

33
00:01:24,750 --> 00:01:27,210
let's get started let's start off with

34
00:01:27,210 --> 00:01:28,560
everyone's favorite CSS feature

35
00:01:28,560 --> 00:01:32,790
important yeah I'm sure you're all

36
00:01:32,790 --> 00:01:34,560
familiar with what important does right

37
00:01:34,560 --> 00:01:36,689
in a situation like this for example all

38
00:01:36,689 --> 00:01:38,610
the elements with class bar get the

39
00:01:38,610 --> 00:01:40,860
green color but all the elements with

40
00:01:40,860 --> 00:01:42,750
class bar within an element with class

41
00:01:42,750 --> 00:01:45,960
foo get a red color I'm sure I'm not

42
00:01:45,960 --> 00:01:47,460
telling you anything new here and that

43
00:01:47,460 --> 00:01:49,439
looks something like this so whenever

44
00:01:49,439 --> 00:01:50,729
there is a conflict between two

45
00:01:50,729 --> 00:01:53,250
selectors in CSS then by default the

46
00:01:53,250 --> 00:01:55,590
last one in the source code wins but in

47
00:01:55,590 --> 00:01:57,540
this case the specificity for both

48
00:01:57,540 --> 00:01:59,939
selectors is different the one with the

49
00:01:59,939 --> 00:02:02,520
highest specificity wins regardless of

50
00:02:02,520 --> 00:02:04,650
the order in the source code so here the

51
00:02:04,650 --> 00:02:06,360
specificity of the first selector with

52
00:02:06,360 --> 00:02:07,890
the two class selectors in it is

53
00:02:07,890 --> 00:02:09,989
actually higher than the specificity of

54
00:02:09,989 --> 00:02:11,940
the last one and that's why the color is

55
00:02:11,940 --> 00:02:15,269
red and not green again I'm sure this is

56
00:02:15,269 --> 00:02:17,910
nothing new to you now in some

57
00:02:17,910 --> 00:02:19,860
situations you may need to override an

58
00:02:19,860 --> 00:02:22,470
earlier rule set so in this case you

59
00:02:22,470 --> 00:02:24,150
want all elements with class bar to be

60
00:02:24,150 --> 00:02:25,900
green despite of that other

61
00:02:25,900 --> 00:02:28,720
is rule at the top there and it's cases

62
00:02:28,720 --> 00:02:30,760
like this where important can be useful

63
00:02:30,760 --> 00:02:32,890
you can just add importance to that last

64
00:02:32,890 --> 00:02:34,750
statement there and it boosts that

65
00:02:34,750 --> 00:02:38,230
single declaration precedents in CSS so

66
00:02:38,230 --> 00:02:40,209
if you do that then the color in fact

67
00:02:40,209 --> 00:02:43,269
will become green and again I'm sure

68
00:02:43,269 --> 00:02:45,099
this is nothing new to you you know how

69
00:02:45,099 --> 00:02:46,390
important works right

70
00:02:46,390 --> 00:02:48,849
well what one surprised me here is that

71
00:02:48,849 --> 00:02:50,709
important actually has nothing to do at

72
00:02:50,709 --> 00:02:52,870
all with specificity it's actually a

73
00:02:52,870 --> 00:02:55,299
completely different thing it boosts a

74
00:02:55,299 --> 00:02:57,370
single declarations precedence without

75
00:02:57,370 --> 00:02:59,109
affecting the specificity for the whole

76
00:02:59,109 --> 00:03:03,430
selector now you may have heard that to

77
00:03:03,430 --> 00:03:04,900
use of important is actually a bad

78
00:03:04,900 --> 00:03:06,970
practice so you're not actually supposed

79
00:03:06,970 --> 00:03:09,159
to be using it even though sometimes we

80
00:03:09,159 --> 00:03:11,500
all do now the good news is now that we

81
00:03:11,500 --> 00:03:12,549
know that there's a difference between

82
00:03:12,549 --> 00:03:15,670
specificity and the use of importance we

83
00:03:15,670 --> 00:03:17,620
can actually fake importance we can use

84
00:03:17,620 --> 00:03:20,310
important without using importance and

85
00:03:20,310 --> 00:03:22,420
instead of boosting the declarations

86
00:03:22,420 --> 00:03:24,010
precedence we can just increase the

87
00:03:24,010 --> 00:03:26,560
selector specificity so all we have to

88
00:03:26,560 --> 00:03:28,720
do is just repeat the class name in the

89
00:03:28,720 --> 00:03:29,859
last lecture a couple of hundred times

90
00:03:29,859 --> 00:03:32,709
and every time you do that you boost the

91
00:03:32,709 --> 00:03:34,569
selector specificity so if you just do

92
00:03:34,569 --> 00:03:36,579
that enough times automatically this

93
00:03:36,579 --> 00:03:40,750
selector will eventually win and just to

94
00:03:40,750 --> 00:03:42,220
show you that this actually works it

95
00:03:42,220 --> 00:03:44,349
does and in this case we only need to

96
00:03:44,349 --> 00:03:47,319
repeat the class name once if it's twice

97
00:03:47,319 --> 00:03:49,629
there if it's there twice it will be the

98
00:03:49,629 --> 00:03:51,159
strongest one the specificity will be

99
00:03:51,159 --> 00:03:53,769
highest and it will win so there you

100
00:03:53,769 --> 00:03:55,000
have it I know it's still early in the

101
00:03:55,000 --> 00:03:56,379
morning but already we've established

102
00:03:56,379 --> 00:03:59,260
our new best practice of the day yay

103
00:03:59,260 --> 00:04:03,489
not really okay so let's talk about farm

104
00:04:03,489 --> 00:04:07,359
family names and CSS now let's do a show

105
00:04:07,359 --> 00:04:08,709
of hands if you've heard this one before

106
00:04:08,709 --> 00:04:10,870
if there's whitespace in the font family

107
00:04:10,870 --> 00:04:15,400
name it must be quoted no no one is

108
00:04:15,400 --> 00:04:17,199
certain before okay I got this off the

109
00:04:17,199 --> 00:04:20,650
w3c CSS validator it used to give this

110
00:04:20,650 --> 00:04:22,840
message to anywhere when you had some

111
00:04:22,840 --> 00:04:25,720
CSS like this one font family come comic

112
00:04:25,720 --> 00:04:27,760
sans ms and you forgot the quotes around

113
00:04:27,760 --> 00:04:29,919
it it would give you the warning hey you

114
00:04:29,919 --> 00:04:31,360
should you're supposed to be quoting

115
00:04:31,360 --> 00:04:34,240
this so for a very long time I was

116
00:04:34,240 --> 00:04:35,979
afraid of having white space in font

117
00:04:35,979 --> 00:04:37,450
family names without using quotes around

118
00:04:37,450 --> 00:04:38,139
it

119
00:04:38,139 --> 00:04:40,300
but a couple of years later I actually

120
00:04:40,300 --> 00:04:42,400
found out that this doesn't really make

121
00:04:42,400 --> 00:04:44,379
a lot of sense at all spaces are not

122
00:04:44,379 --> 00:04:46,030
problematic and found family names

123
00:04:46,030 --> 00:04:48,189
usually if the font family name is a

124
00:04:48,189 --> 00:04:50,439
space separated set of CSS identifiers

125
00:04:50,439 --> 00:04:51,939
there's no problem at all

126
00:04:51,939 --> 00:04:53,650
so if you want to use Comic Sans a mess

127
00:04:53,650 --> 00:04:55,360
you don't actually need the codes the

128
00:04:55,360 --> 00:04:57,249
CSS will still be valid and it will

129
00:04:57,249 --> 00:04:58,930
still work exactly the same way in all

130
00:04:58,930 --> 00:05:01,659
browsers now there's a lot of exact

131
00:05:01,659 --> 00:05:03,490
rules and description and exceptions

132
00:05:03,490 --> 00:05:05,379
here if you want you can check out the

133
00:05:05,379 --> 00:05:06,879
URL in the middle of this slide for all

134
00:05:06,879 --> 00:05:09,490
the details but trust me when I say that

135
00:05:09,490 --> 00:05:11,020
in this case we can simply omit the

136
00:05:11,020 --> 00:05:12,610
quotes and everything will still work

137
00:05:12,610 --> 00:05:15,009
exactly the same way in fact there are

138
00:05:15,009 --> 00:05:16,389
other things that are much more

139
00:05:16,389 --> 00:05:18,520
dangerous than whitespace in film family

140
00:05:18,520 --> 00:05:21,189
names here's an example let's say we

141
00:05:21,189 --> 00:05:24,849
have a Fonz named 4 5 6 . street now

142
00:05:24,849 --> 00:05:26,409
because this film family name starts

143
00:05:26,409 --> 00:05:28,509
with a digit it's no longer of valid CSS

144
00:05:28,509 --> 00:05:32,139
identifiers so this rule won't actually

145
00:05:32,139 --> 00:05:34,289
silently be ignored it's not valid CSS

146
00:05:34,289 --> 00:05:37,360
now the way to fix that is to make it a

147
00:05:37,360 --> 00:05:38,979
valid identifier and we can do that by

148
00:05:38,979 --> 00:05:41,169
escaping that first digit there and that

149
00:05:41,169 --> 00:05:44,229
will look something like this now we get

150
00:05:44,229 --> 00:05:47,349
backslash 3 4 5 6 . street and that's

151
00:05:47,349 --> 00:05:48,819
kind of weird right because the font

152
00:05:48,819 --> 00:05:51,339
family name is 4 5 6 birria street but

153
00:05:51,339 --> 00:05:54,669
now it says 3 4 5 6 and there's a space

154
00:05:54,669 --> 00:05:56,110
and there's a backslash and it's all

155
00:05:56,110 --> 00:05:58,060
just a little bit crazy and this is

156
00:05:58,060 --> 00:05:59,379
probably not code that you want to be

157
00:05:59,379 --> 00:06:03,490
writing or maintaining now how else can

158
00:06:03,490 --> 00:06:04,899
we resolve this problem well of course

159
00:06:04,899 --> 00:06:07,180
you guessed it we can just use quotes

160
00:06:07,180 --> 00:06:10,719
around the font family name so whenever

161
00:06:10,719 --> 00:06:12,699
you're in doubt I would say just always

162
00:06:12,699 --> 00:06:14,740
use the quotes it avoids a lot of

163
00:06:14,740 --> 00:06:17,139
problems and it's you know it that way

164
00:06:17,139 --> 00:06:18,370
you don't have to think about all these

165
00:06:18,370 --> 00:06:20,620
issues that might pop up but the thing I

166
00:06:20,620 --> 00:06:22,089
learned here is that there is no need to

167
00:06:22,089 --> 00:06:23,319
use the quotes just because of

168
00:06:23,319 --> 00:06:27,759
whitespace that's just not true now I

169
00:06:27,759 --> 00:06:29,349
really wanted to understand how all this

170
00:06:29,349 --> 00:06:32,169
works and so I ended up making a small

171
00:06:32,169 --> 00:06:34,330
tool for it so you can enter any font

172
00:06:34,330 --> 00:06:35,949
family name in there and it will tell

173
00:06:35,949 --> 00:06:38,229
you if it can be used without the quotes

174
00:06:38,229 --> 00:06:43,120
in CSS or not now let's take a closer

175
00:06:43,120 --> 00:06:45,550
look at attribute values in HTML and CSS

176
00:06:45,550 --> 00:06:49,839
as you probably know in both HTML CSS we

177
00:06:49,839 --> 00:06:51,000
can use quotes around

178
00:06:51,000 --> 00:06:53,520
tribute failures I'm sure that's not big

179
00:06:53,520 --> 00:06:54,210
news for you

180
00:06:54,210 --> 00:06:55,890
so here we have an anchor element with

181
00:06:55,890 --> 00:06:58,680
an HR f of foo and then in the CSS style

182
00:06:58,680 --> 00:07:00,930
block we select that same element based

183
00:07:00,930 --> 00:07:03,600
on its attribute value and then we give

184
00:07:03,600 --> 00:07:07,380
it a nice hot pink background now in

185
00:07:07,380 --> 00:07:09,240
some cases like in this example we can

186
00:07:09,240 --> 00:07:10,590
actually omit these quotes and

187
00:07:10,590 --> 00:07:12,780
everything still works fine the HTML is

188
00:07:12,780 --> 00:07:14,520
still valid the CSS is still valid and

189
00:07:14,520 --> 00:07:16,380
the result looks the same in every

190
00:07:16,380 --> 00:07:18,980
browser there's no problems whatsoever

191
00:07:18,980 --> 00:07:22,170
however it's important to note that the

192
00:07:22,170 --> 00:07:23,100
rules for unquoted

193
00:07:23,100 --> 00:07:24,840
attribute values actually differ between

194
00:07:24,840 --> 00:07:28,560
HTML and CSS in this example the HTML is

195
00:07:28,560 --> 00:07:30,600
valid the attribute value is through

196
00:07:30,600 --> 00:07:33,870
pipe bar but the CSS actually is invalid

197
00:07:33,870 --> 00:07:35,730
in this case and it won't work it will

198
00:07:35,730 --> 00:07:37,800
actually silently be ignored and there

199
00:07:37,800 --> 00:07:40,290
will no be no beautiful hot pink in this

200
00:07:40,290 --> 00:07:43,680
example at all so how do we resolve this

201
00:07:43,680 --> 00:07:45,750
again you guessed it all you have to do

202
00:07:45,750 --> 00:07:49,110
is just use the quotes and in this case

203
00:07:49,110 --> 00:07:51,210
it's only really necessary to use quotes

204
00:07:51,210 --> 00:07:54,450
for the CSS version but in general the

205
00:07:54,450 --> 00:07:56,190
same advice holds it's probably best to

206
00:07:56,190 --> 00:07:58,050
just always wrap your attribute values

207
00:07:58,050 --> 00:08:00,390
in quotes both in HTML and in CSS

208
00:08:00,390 --> 00:08:02,370
because it's that way you just don't

209
00:08:02,370 --> 00:08:03,750
have to think about all these potential

210
00:08:03,750 --> 00:08:05,490
issues and about the difference between

211
00:08:05,490 --> 00:08:10,050
HTML and CSS rules I really wanted to

212
00:08:10,050 --> 00:08:12,600
understand this as well so and all these

213
00:08:12,600 --> 00:08:15,060
real differences between HTML and CSS so

214
00:08:15,060 --> 00:08:17,340
I ended up making another tool and you

215
00:08:17,340 --> 00:08:18,930
can enter any value it will instantly

216
00:08:18,930 --> 00:08:20,400
tell you if it can be used as an

217
00:08:20,400 --> 00:08:21,030
uncrowded

218
00:08:21,030 --> 00:08:23,700
attribute value in HTML and in CSS and

219
00:08:23,700 --> 00:08:25,650
as you can see in some cases the result

220
00:08:25,650 --> 00:08:27,240
is actually different between these two

221
00:08:27,240 --> 00:08:31,830
languages okay another thing I learned

222
00:08:31,830 --> 00:08:35,839
something new about is CSS comment as

223
00:08:35,839 --> 00:08:38,849
you probably know this is the only

224
00:08:38,849 --> 00:08:41,099
common syntax that CSS sports it starts

225
00:08:41,099 --> 00:08:43,289
with a slash followed by an asterisk and

226
00:08:43,289 --> 00:08:44,850
then it ends with an asterisk followed

227
00:08:44,850 --> 00:08:46,770
by another slash and anything in between

228
00:08:46,770 --> 00:08:48,630
those two things will become part of a

229
00:08:48,630 --> 00:08:50,880
comment even if it's like a newline

230
00:08:50,880 --> 00:08:52,860
character so it becomes it can become a

231
00:08:52,860 --> 00:08:57,089
multi-line comments that way now that's

232
00:08:57,089 --> 00:08:58,500
why this example works the way you

233
00:08:58,500 --> 00:09:00,990
expect it to the color colon rats rule

234
00:09:00,990 --> 00:09:03,600
it won't up be affected

235
00:09:03,600 --> 00:09:05,190
it will silently big nor because it's

236
00:09:05,190 --> 00:09:10,079
part of a commons now lots of other

237
00:09:10,079 --> 00:09:11,490
programming language have another

238
00:09:11,490 --> 00:09:14,519
comment line syntax as well this is the

239
00:09:14,519 --> 00:09:16,980
single line comments index and it uses

240
00:09:16,980 --> 00:09:19,410
just two slashes and everything else on

241
00:09:19,410 --> 00:09:21,569
the same line will be ignored in that

242
00:09:21,569 --> 00:09:23,730
case however CSS doesn't support this

243
00:09:23,730 --> 00:09:25,470
syntax it doesn't have the concept of

244
00:09:25,470 --> 00:09:27,899
single line comments so this is actually

245
00:09:27,899 --> 00:09:29,040
invalid CSS

246
00:09:29,040 --> 00:09:31,470
however what surprised me about this is

247
00:09:31,470 --> 00:09:33,870
that this specific example would

248
00:09:33,870 --> 00:09:35,459
actually work the way we'd expect it to

249
00:09:35,459 --> 00:09:37,740
the line with color : rat

250
00:09:37,740 --> 00:09:40,230
will not have any effect so what's going

251
00:09:40,230 --> 00:09:42,839
on there well it turns out that property

252
00:09:42,839 --> 00:09:44,880
names in CSS are supposed to be valid

253
00:09:44,880 --> 00:09:49,500
CSS identifiers and identifiers cannot

254
00:09:49,500 --> 00:09:51,389
contain unescape slashes and because of

255
00:09:51,389 --> 00:09:53,579
that this one rule fails to parse and

256
00:09:53,579 --> 00:09:55,649
CSS just skips it moves on to the next

257
00:09:55,649 --> 00:09:58,949
one and then applies that now it would

258
00:09:58,949 --> 00:10:00,480
be different if the property name that

259
00:10:00,480 --> 00:10:02,430
we're using was a valid identifier

260
00:10:02,430 --> 00:10:04,199
because then the CSS would be parsed

261
00:10:04,199 --> 00:10:07,440
just fine however CSS grammar also

262
00:10:07,440 --> 00:10:09,630
states that rules for unknown properties

263
00:10:09,630 --> 00:10:11,910
are silently ignored so this gives us

264
00:10:11,910 --> 00:10:13,800
another way to fake a single line

265
00:10:13,800 --> 00:10:16,800
comment in CSS we could just use the

266
00:10:16,800 --> 00:10:18,930
British spelling or we could just make

267
00:10:18,930 --> 00:10:20,430
some typos in the property name and

268
00:10:20,430 --> 00:10:22,079
that's kind of crazy and you should

269
00:10:22,079 --> 00:10:24,029
never deliberately do this probably but

270
00:10:24,029 --> 00:10:26,009
it kind of works in the sense that the

271
00:10:26,009 --> 00:10:30,569
rule is silently ignored now tap Atkins

272
00:10:30,569 --> 00:10:32,939
has an excellent blog post that explains

273
00:10:32,939 --> 00:10:34,589
these tricks and it's a good way to

274
00:10:34,589 --> 00:10:36,689
learn a little bit about CSS grammar and

275
00:10:36,689 --> 00:10:39,720
about how CSS error handling works so

276
00:10:39,720 --> 00:10:43,560
check it out there's something else

277
00:10:43,560 --> 00:10:45,180
that's related to CSS that I would like

278
00:10:45,180 --> 00:10:46,889
to show you but before I can do that we

279
00:10:46,889 --> 00:10:48,750
need to talk about HTML tags for a

280
00:10:48,750 --> 00:10:50,759
little while now does anyone know the

281
00:10:50,759 --> 00:10:52,500
difference between HTML tags and

282
00:10:52,500 --> 00:10:54,569
elements let's do a quick show of hands

283
00:10:54,569 --> 00:10:56,759
okay not a lot of people are confident

284
00:10:56,759 --> 00:10:58,079
in the difference so I'll just briefly

285
00:10:58,079 --> 00:11:00,930
explain it tags are the things that you

286
00:11:00,930 --> 00:11:02,819
type into your code editor when you're

287
00:11:02,819 --> 00:11:05,250
editing an HTML page so for example if

288
00:11:05,250 --> 00:11:06,779
you have a paragraph element on your

289
00:11:06,779 --> 00:11:09,810
page you can have a star tag to open the

290
00:11:09,810 --> 00:11:11,970
paragraph element and an end tag to

291
00:11:11,970 --> 00:11:15,120
close that P elements those are tags but

292
00:11:15,120 --> 00:11:17,030
as soon as your document is part

293
00:11:17,030 --> 00:11:19,190
by the browser it becomes a Dom a

294
00:11:19,190 --> 00:11:20,960
document object model it becomes this

295
00:11:20,960 --> 00:11:22,640
tree based thing that you interact with

296
00:11:22,640 --> 00:11:26,270
in JavaScript or in CSS and once that

297
00:11:26,270 --> 00:11:28,010
happens we no longer think in terms of

298
00:11:28,010 --> 00:11:29,780
start and end tags we think in terms of

299
00:11:29,780 --> 00:11:33,170
elements so that's pretty much

300
00:11:33,170 --> 00:11:37,040
difference as soon as the page is open

301
00:11:37,040 --> 00:11:39,110
in the browser its elements and melt

302
00:11:39,110 --> 00:11:40,370
tags that we're thinking about and

303
00:11:40,370 --> 00:11:42,260
that's important to realize because if

304
00:11:42,260 --> 00:11:44,270
you're dealing with CSS or JavaScript

305
00:11:44,270 --> 00:11:45,860
you're always interacting with these

306
00:11:45,860 --> 00:11:48,410
elements not with tags or star tags or

307
00:11:48,410 --> 00:11:51,500
end tags so anyway here's an example

308
00:11:51,500 --> 00:11:54,710
this is a very simple HTML document so

309
00:11:54,710 --> 00:11:56,390
you see the HTML and the head and the

310
00:11:56,390 --> 00:11:58,970
body tags there well it turns out that

311
00:11:58,970 --> 00:12:01,220
they're closing tags their end tags are

312
00:12:01,220 --> 00:12:04,160
optional you can just omit them and the

313
00:12:04,160 --> 00:12:07,250
result is a compact but still valid HTML

314
00:12:07,250 --> 00:12:09,080
document that results in exactly the

315
00:12:09,080 --> 00:12:12,980
same Dom as the one before but it gets

316
00:12:12,980 --> 00:12:14,810
even better it turns out that you can

317
00:12:14,810 --> 00:12:18,110
also omit their start tags for these

318
00:12:18,110 --> 00:12:20,630
elements and that way you end up with

319
00:12:20,630 --> 00:12:23,300
this very minimal but still valid HTML

320
00:12:23,300 --> 00:12:25,100
document that still results in exactly

321
00:12:25,100 --> 00:12:27,740
the same Dom so that's really important

322
00:12:27,740 --> 00:12:29,360
here the HTML the hat and the body

323
00:12:29,360 --> 00:12:31,040
elements will still be there in the Dom

324
00:12:31,040 --> 00:12:32,950
even though they're Clark techs are

325
00:12:32,950 --> 00:12:35,870
omitted from the source code and that's

326
00:12:35,870 --> 00:12:37,250
because these elements are special

327
00:12:37,250 --> 00:12:38,990
they're kind of implied and the browser

328
00:12:38,990 --> 00:12:41,000
will automatically insert them into the

329
00:12:41,000 --> 00:12:42,650
document for you even if they're not

330
00:12:42,650 --> 00:12:45,890
part of the source code so with that in

331
00:12:45,890 --> 00:12:48,530
mind this is probably the most useless -

332
00:12:48,530 --> 00:12:50,780
to ever I mean if you're going to get an

333
00:12:50,780 --> 00:12:52,610
HTML - at least you should pick some

334
00:12:52,610 --> 00:12:56,150
tags that aren't implies right now

335
00:12:56,150 --> 00:12:58,910
anyway that minimal HTML document that I

336
00:12:58,910 --> 00:13:01,280
just showed you got me thinking how far

337
00:13:01,280 --> 00:13:03,020
can we really take this and what more

338
00:13:03,020 --> 00:13:05,150
can we remove from our HTML source code

339
00:13:05,150 --> 00:13:07,490
if we stop caring about what's valid and

340
00:13:07,490 --> 00:13:11,540
what isn't and then I came across Martin

341
00:13:11,540 --> 00:13:13,690
Cole's experiment called no JavaScript

342
00:13:13,690 --> 00:13:16,250
so he attempted to recreate a game using

343
00:13:16,250 --> 00:13:19,040
CSS only and his goal was to use no

344
00:13:19,040 --> 00:13:21,710
JavaScript at all and as little as HTML

345
00:13:21,710 --> 00:13:23,960
as little HTML as possible and in fact

346
00:13:23,960 --> 00:13:25,790
this is the full HTML source code for

347
00:13:25,790 --> 00:13:27,980
his project it's just one line that

348
00:13:27,980 --> 00:13:29,000
includes a stylesheet

349
00:13:29,000 --> 00:13:29,600
on to the page

350
00:13:29,600 --> 00:13:32,120
and really you should check this out for

351
00:13:32,120 --> 00:13:35,000
yourself the URL is right there but just

352
00:13:35,000 --> 00:13:36,260
to give you a quick idea of what it

353
00:13:36,260 --> 00:13:40,370
looks like well here it is so remember

354
00:13:40,370 --> 00:13:42,710
this is all CSS and I'm not sure if you

355
00:13:42,710 --> 00:13:44,810
can see this but the spaceship at the

356
00:13:44,810 --> 00:13:46,340
bottom is actually following my mouse

357
00:13:46,340 --> 00:13:48,800
cursor which sounds simple if you have

358
00:13:48,800 --> 00:13:50,900
the other script axis but if you want to

359
00:13:50,900 --> 00:13:53,450
do this using only CSS it's actually

360
00:13:53,450 --> 00:13:56,900
very tricky now the elements that are

361
00:13:56,900 --> 00:13:58,850
being styled here are the ones that

362
00:13:58,850 --> 00:14:00,650
we've talked about before the ones that

363
00:14:00,650 --> 00:14:02,300
the browser automatically creates for

364
00:14:02,300 --> 00:14:03,710
you even if they're not part of the

365
00:14:03,710 --> 00:14:04,460
source code

366
00:14:04,460 --> 00:14:07,970
so HTML hat and body and then there's

367
00:14:07,970 --> 00:14:09,860
also that one link element that he had

368
00:14:09,860 --> 00:14:13,340
there in the source code so of course

369
00:14:13,340 --> 00:14:14,900
the link and the hat elements are

370
00:14:14,900 --> 00:14:16,670
invisible by default but you can just

371
00:14:16,670 --> 00:14:18,710
apply this play block to them to make

372
00:14:18,710 --> 00:14:20,480
them visible then you can start styling

373
00:14:20,480 --> 00:14:22,250
them giving them a background image and

374
00:14:22,250 --> 00:14:25,130
all that stuff so anyway we have HTML

375
00:14:25,130 --> 00:14:28,400
hat link and body that's four different

376
00:14:28,400 --> 00:14:31,220
elements then we can also use the before

377
00:14:31,220 --> 00:14:33,530
and after pseudo elements on these

378
00:14:33,530 --> 00:14:35,180
elements and that totals up to twelve

379
00:14:35,180 --> 00:14:38,210
unique style blocks so what you're

380
00:14:38,210 --> 00:14:40,340
looking at here is just twelve unique

381
00:14:40,340 --> 00:14:42,500
style blocks and that's enough to create

382
00:14:42,500 --> 00:14:45,260
this apparently it's kind of crazy and

383
00:14:45,260 --> 00:14:47,200
it just really blew my mind still demo

384
00:14:47,200 --> 00:14:50,900
so I created a demo of my own it's not

385
00:14:50,900 --> 00:14:52,970
nearly as impressive as this one but I

386
00:14:52,970 --> 00:14:55,640
still want to talk about it this is what

387
00:14:55,640 --> 00:14:58,730
it looks like yeah I know right it's not

388
00:14:58,730 --> 00:14:59,990
nearly as impressive to look at that as

389
00:14:59,990 --> 00:15:01,790
the previous one but it looks fairly

390
00:15:01,790 --> 00:15:04,280
simple and if I were to see this on a

391
00:15:04,280 --> 00:15:06,140
random website I would probably think it

392
00:15:06,140 --> 00:15:08,180
was just some basic HTML like a

393
00:15:08,180 --> 00:15:10,730
paragraph element or something and with

394
00:15:10,730 --> 00:15:13,520
some very basic CSS to style it but in

395
00:15:13,520 --> 00:15:15,020
fact if you look at the source code for

396
00:15:15,020 --> 00:15:17,420
this page you'll see that it's

397
00:15:17,420 --> 00:15:19,940
completely empty so what is going on

398
00:15:19,940 --> 00:15:24,230
here well this is the trick that I used

399
00:15:24,230 --> 00:15:27,650
I'm using the link HTTP header here so

400
00:15:27,650 --> 00:15:29,270
in theory this header can be used

401
00:15:29,270 --> 00:15:30,970
instead of the link element in HTML

402
00:15:30,970 --> 00:15:32,810
anything you can do with the link

403
00:15:32,810 --> 00:15:34,850
element in HTML can also be done with

404
00:15:34,850 --> 00:15:37,280
the link HTTP header in browsers that

405
00:15:37,280 --> 00:15:39,410
support it and at the moment only

406
00:15:39,410 --> 00:15:42,350
Firefox supported supports it's Oprah I

407
00:15:42,350 --> 00:15:43,350
used to support it

408
00:15:43,350 --> 00:15:45,120
before we switch to blank but ever since

409
00:15:45,120 --> 00:15:48,060
we brought support so if you want to try

410
00:15:48,060 --> 00:15:52,380
this out visit this page in Firefox so

411
00:15:52,380 --> 00:15:53,970
anyway this gives us a completely empty

412
00:15:53,970 --> 00:15:55,800
HTML documents as you can see the

413
00:15:55,800 --> 00:15:57,360
content length is zero so I'm not

414
00:15:57,360 --> 00:15:58,920
cheating there I'm not using any special

415
00:15:58,920 --> 00:16:01,890
weird tricks it's really an empty HTML

416
00:16:01,890 --> 00:16:03,870
document but we still get a CSS file

417
00:16:03,870 --> 00:16:07,590
applied to it so the next step is to

418
00:16:07,590 --> 00:16:09,300
make the document look like it contains

419
00:16:09,300 --> 00:16:11,490
some actual text and for this I used two

420
00:16:11,490 --> 00:16:14,400
CSS content property so I select the

421
00:16:14,400 --> 00:16:15,570
body element which the browser

422
00:16:15,570 --> 00:16:17,820
automatically creates for me even though

423
00:16:17,820 --> 00:16:19,380
I don't have the tag for it in the

424
00:16:19,380 --> 00:16:21,450
source code then I target the after

425
00:16:21,450 --> 00:16:23,250
pseudo element and then I just give that

426
00:16:23,250 --> 00:16:25,080
some contents and that's how I made the

427
00:16:25,080 --> 00:16:27,930
texture up there so that is how this

428
00:16:27,930 --> 00:16:30,180
demo without any HTML source code at all

429
00:16:30,180 --> 00:16:33,810
works now is this really useful well I

430
00:16:33,810 --> 00:16:35,130
don't know maybe you can prank your

431
00:16:35,130 --> 00:16:36,840
colleagues with this knowledge a little

432
00:16:36,840 --> 00:16:39,150
bit or if you're really evil you could

433
00:16:39,150 --> 00:16:41,040
use it as part of an interview question

434
00:16:41,040 --> 00:16:44,430
imagine this so you give an interview

435
00:16:44,430 --> 00:16:46,620
candidate URL and tell them to open it

436
00:16:46,620 --> 00:16:49,200
in Firefox and this URL points to an

437
00:16:49,200 --> 00:16:51,270
HTML document that contains some inline

438
00:16:51,270 --> 00:16:54,480
SVG for example the SVG that displays a

439
00:16:54,480 --> 00:16:56,760
circle as you can see here now the

440
00:16:56,760 --> 00:16:59,160
circles fill attribute is set to red and

441
00:16:59,160 --> 00:17:00,420
that's when you ask the interview

442
00:17:00,420 --> 00:17:02,760
candidate why is the circle green

443
00:17:02,760 --> 00:17:06,030
instead of red and it will probably take

444
00:17:06,030 --> 00:17:07,350
them very long time to realize that

445
00:17:07,350 --> 00:17:09,540
there's a hidden CSS file that magically

446
00:17:09,540 --> 00:17:12,180
gets applied to these documents even

447
00:17:12,180 --> 00:17:13,380
though you can't see it in the source

448
00:17:13,380 --> 00:17:15,240
code I mean the Styles are not even

449
00:17:15,240 --> 00:17:17,579
visible if you inspect the elements in

450
00:17:17,579 --> 00:17:19,680
the dev tools so yeah good luck with

451
00:17:19,680 --> 00:17:22,170
that I hope none of that ever happens to

452
00:17:22,170 --> 00:17:26,910
you in an interview ok if you want to

453
00:17:26,910 --> 00:17:29,190
talk about Unicode in CSS we need to

454
00:17:29,190 --> 00:17:31,350
talk about Unicode in HTML too so let's

455
00:17:31,350 --> 00:17:34,620
start there the first thing you should

456
00:17:34,620 --> 00:17:36,780
know is that the class attribute accepts

457
00:17:36,780 --> 00:17:39,300
every possible character every possible

458
00:17:39,300 --> 00:17:41,610
unicode character is valid in a class

459
00:17:41,610 --> 00:17:44,760
attribute value and it will also work in

460
00:17:44,760 --> 00:17:48,810
every browser so for example 404 - ever

461
00:17:48,810 --> 00:17:50,700
is a valid class name which is probably

462
00:17:50,700 --> 00:17:52,950
not very surprising to you but you could

463
00:17:52,950 --> 00:17:54,660
also use the copyright sign as a class

464
00:17:54,660 --> 00:17:56,430
name for an element containing a legal

465
00:17:56,430 --> 00:17:57,159
disclaimer

466
00:17:57,159 --> 00:18:00,849
for example now in html5 in the standard

467
00:18:00,849 --> 00:18:02,830
there is this new feature that says that

468
00:18:02,830 --> 00:18:04,570
the same thing now finally goes for the

469
00:18:04,570 --> 00:18:06,999
ID attributes so this is new and aspect

470
00:18:06,999 --> 00:18:08,799
with browser as I've always supported

471
00:18:08,799 --> 00:18:09,399
this

472
00:18:09,399 --> 00:18:12,279
this means that IDs can contain any

473
00:18:12,279 --> 00:18:15,729
symbol at all except for whitespace but

474
00:18:15,729 --> 00:18:17,679
everything else is valid as part of an

475
00:18:17,679 --> 00:18:20,289
ID attribute so you could use the heart

476
00:18:20,289 --> 00:18:22,479
symbol as the ID for a paragraph for

477
00:18:22,479 --> 00:18:24,849
example or you could use curly quotes as

478
00:18:24,849 --> 00:18:27,129
a class name for block code elements you

479
00:18:27,129 --> 00:18:28,450
can do all kinds of stuff you can even

480
00:18:28,450 --> 00:18:30,580
use hidden emoji to passive-aggressively

481
00:18:30,580 --> 00:18:31,809
tell people you are using a shitty

482
00:18:31,809 --> 00:18:37,369
browser and all of this is valid HTML

483
00:18:37,379 --> 00:18:39,759
this also means that we can do stuff

484
00:18:39,759 --> 00:18:41,859
like this where you give an element an

485
00:18:41,859 --> 00:18:48,039
ID of hash ID or let's say a class of

486
00:18:48,039 --> 00:18:51,249
adult class or you can even combine it

487
00:18:51,249 --> 00:18:53,950
to an ad colon hover braces at the end

488
00:18:53,950 --> 00:18:56,109
or even use a value that resembles an

489
00:18:56,109 --> 00:18:58,119
attribute selector you see where this is

490
00:18:58,119 --> 00:19:00,039
going right all these classes and ID's

491
00:19:00,039 --> 00:19:01,869
already look like they're a CSS selector

492
00:19:01,869 --> 00:19:05,619
so how would you write as use a selector

493
00:19:05,619 --> 00:19:07,299
to select these elements based on these

494
00:19:07,299 --> 00:19:11,349
IDs and classes well the answer is we

495
00:19:11,349 --> 00:19:13,450
need to escape these values first so

496
00:19:13,450 --> 00:19:15,220
that they become valid identifier and

497
00:19:15,220 --> 00:19:17,679
only then we can use them as part of a

498
00:19:17,679 --> 00:19:20,259
CSS selector and this is what that will

499
00:19:20,259 --> 00:19:23,679
look like the hash symbol for example

500
00:19:23,679 --> 00:19:25,720
has special meaning in CSS so it cannot

501
00:19:25,720 --> 00:19:28,210
be used as it is we must escape it as

502
00:19:28,210 --> 00:19:31,389
backslash hash first and the same thing

503
00:19:31,389 --> 00:19:33,609
goes for the dot character has special

504
00:19:33,609 --> 00:19:35,619
meaning so that becomes backslash dot

505
00:19:35,619 --> 00:19:38,440
the colon character leads escaping too

506
00:19:38,440 --> 00:19:40,149
and theoretically you could escape that

507
00:19:40,149 --> 00:19:42,609
as backslash colon but that doesn't work

508
00:19:42,609 --> 00:19:44,830
in old versions of Internet Explorer so

509
00:19:44,830 --> 00:19:46,659
a more compatible way to escape it is to

510
00:19:46,659 --> 00:19:49,149
use backslash 3 a followed by a space

511
00:19:49,149 --> 00:19:52,090
and 3 a is the unicode code point that

512
00:19:52,090 --> 00:19:54,820
refers to this character so you could

513
00:19:54,820 --> 00:19:56,619
use this type of escape for any Unicode

514
00:19:56,619 --> 00:19:59,470
symbol if you want to anyway as you can

515
00:19:59,470 --> 00:20:01,509
see many characters need escaping but

516
00:20:01,509 --> 00:20:03,249
take a look at that last example the

517
00:20:03,249 --> 00:20:07,599
element with ID 404 - error because that

518
00:20:07,599 --> 00:20:09,549
ID starts with a digit it needs to be

519
00:20:09,549 --> 00:20:10,870
escaped as well

520
00:20:10,870 --> 00:20:12,490
and I remember that this really

521
00:20:12,490 --> 00:20:14,020
surprised me at some point because I was

522
00:20:14,020 --> 00:20:15,430
trying to figure out why it was

523
00:20:15,430 --> 00:20:17,380
impossible to style such an element

524
00:20:17,380 --> 00:20:19,720
using CSS well it turned out I just had

525
00:20:19,720 --> 00:20:22,059
to escape it and that looks like

526
00:20:22,059 --> 00:20:25,540
backslash three for space oh four dash

527
00:20:25,540 --> 00:20:27,490
error which is kind of weird if you

528
00:20:27,490 --> 00:20:28,510
think about it

529
00:20:28,510 --> 00:20:29,950
so if you'd ever need to style an

530
00:20:29,950 --> 00:20:32,200
element whose class or ID starts with a

531
00:20:32,200 --> 00:20:33,880
digit I'm sure you will think back on

532
00:20:33,880 --> 00:20:35,860
this moment because it took me a long

533
00:20:35,860 --> 00:20:39,790
time to figure this out now as for the

534
00:20:39,790 --> 00:20:41,140
other examples with the non ASCII

535
00:20:41,140 --> 00:20:43,540
Unicode symbols well those can just be

536
00:20:43,540 --> 00:20:44,830
used without escaping them at all

537
00:20:44,830 --> 00:20:46,390
because they don't have any special

538
00:20:46,390 --> 00:20:48,640
meaning in CSS now you could still

539
00:20:48,640 --> 00:20:50,290
escape them if you wanted to based on

540
00:20:50,290 --> 00:20:52,000
the Unicode code point value and that

541
00:20:52,000 --> 00:20:57,700
will look like this now to help me

542
00:20:57,700 --> 00:20:59,230
understand all this I built another one

543
00:20:59,230 --> 00:21:01,390
of those tools so it allows you to enter

544
00:21:01,390 --> 00:21:04,030
any ID or class name even the crazy ones

545
00:21:04,030 --> 00:21:05,950
and then it will automatically tell you

546
00:21:05,950 --> 00:21:07,929
how to select that element in CSS or

547
00:21:07,929 --> 00:21:10,540
using the selectors API in JavaScript so

548
00:21:10,540 --> 00:21:12,160
if you're using documental career

549
00:21:12,160 --> 00:21:14,200
selector or jQuery or something like

550
00:21:14,200 --> 00:21:14,559
that

551
00:21:14,559 --> 00:21:16,179
it will tell you what the selector would

552
00:21:16,179 --> 00:21:18,490
look like after the double escaping that

553
00:21:18,490 --> 00:21:22,809
you need for that nowadays there's a

554
00:21:22,809 --> 00:21:24,640
standardized utility method for this in

555
00:21:24,640 --> 00:21:27,100
the form of a JavaScript API called CSS

556
00:21:27,100 --> 00:21:29,500
escape and this is part of the CSS

557
00:21:29,500 --> 00:21:31,600
object model specification it's already

558
00:21:31,600 --> 00:21:33,309
two supported in Opera Chrome and

559
00:21:33,309 --> 00:21:35,050
Firefox so you can actually already

560
00:21:35,050 --> 00:21:36,910
start using this today if you need

561
00:21:36,910 --> 00:21:38,700
support for older browsers as well

562
00:21:38,700 --> 00:21:41,080
there's a polyfill available that you

563
00:21:41,080 --> 00:21:44,380
can use now the thing is you probably

564
00:21:44,380 --> 00:21:46,000
need this functionality much more often

565
00:21:46,000 --> 00:21:48,250
than you would think and here's some

566
00:21:48,250 --> 00:21:50,860
examples of that I'm sure many of you

567
00:21:50,860 --> 00:21:52,300
have just some I've done something like

568
00:21:52,300 --> 00:21:54,940
this at some point I know I have so you

569
00:21:54,940 --> 00:21:57,610
read the hash from the URL and then you

570
00:21:57,610 --> 00:21:59,350
use it to select an element in

571
00:21:59,350 --> 00:22:01,600
JavaScript this is fairly common if you

572
00:22:01,600 --> 00:22:03,580
use a taps widget on your page for

573
00:22:03,580 --> 00:22:06,940
example so look at this code and imagine

574
00:22:06,940 --> 00:22:08,620
what happens if the location hash

575
00:22:08,620 --> 00:22:11,230
contains a space for example now the

576
00:22:11,230 --> 00:22:12,940
entire meaning of the selector that we

577
00:22:12,940 --> 00:22:14,290
dynamically generate would suddenly

578
00:22:14,290 --> 00:22:16,210
change because instead of selecting an

579
00:22:16,210 --> 00:22:18,550
element based on that ID it would now

580
00:22:18,550 --> 00:22:22,990
become a descendant selector now here's

581
00:22:22,990 --> 00:22:24,280
another example

582
00:22:24,280 --> 00:22:26,870
very dynamically construct a CSS

583
00:22:26,870 --> 00:22:32,150
selector what if some value in this case

584
00:22:32,150 --> 00:22:35,300
contains double quotes the CSS selector

585
00:22:35,300 --> 00:22:37,130
would actually be broken because the

586
00:22:37,130 --> 00:22:39,140
attribute selector would be closed by

587
00:22:39,140 --> 00:22:41,960
the double quote this might throw a

588
00:22:41,960 --> 00:22:43,730
javascript error and otherwise break

589
00:22:43,730 --> 00:22:45,950
your site so this code is actually

590
00:22:45,950 --> 00:22:48,860
broken but it's not really obvious to

591
00:22:48,860 --> 00:22:53,929
see that now how can we avoid these

592
00:22:53,929 --> 00:22:55,970
problems well all we need to do is just

593
00:22:55,970 --> 00:22:57,679
wrap the variable parts of these

594
00:22:57,679 --> 00:22:59,900
selectors in a call to CSS dot escape

595
00:22:59,900 --> 00:23:02,059
and that magically makes it work and

596
00:23:02,059 --> 00:23:06,410
protects against these cases now that

597
00:23:06,410 --> 00:23:07,910
we're on the subject of breaking things

598
00:23:07,910 --> 00:23:10,400
using malformed CSS selectors let's take

599
00:23:10,400 --> 00:23:13,059
a look at how CSS can be used for evil

600
00:23:13,059 --> 00:23:15,230
now first we need to talk about

601
00:23:15,230 --> 00:23:18,110
cross-site scripting or XSS has anyone

602
00:23:18,110 --> 00:23:21,110
ever heard of that before okay yeah some

603
00:23:21,110 --> 00:23:23,440
people some evil hackers in the room

604
00:23:23,440 --> 00:23:25,429
even if you have heard of cross-site

605
00:23:25,429 --> 00:23:26,809
scripting I would recommend checking out

606
00:23:26,809 --> 00:23:28,850
Google's cross-site scripting game it's

607
00:23:28,850 --> 00:23:30,500
a really great way to learn about how

608
00:23:30,500 --> 00:23:32,059
these cross-site scripting attacks work

609
00:23:32,059 --> 00:23:34,010
and how you can exploit them yourself

610
00:23:34,010 --> 00:23:36,110
and actually if you give this a try you

611
00:23:36,110 --> 00:23:38,179
would be surprised how simple it is to

612
00:23:38,179 --> 00:23:42,620
perform these attacks yourself now most

613
00:23:42,620 --> 00:23:45,470
websites nowadays contain display or

614
00:23:45,470 --> 00:23:47,210
they display use of supplied contents in

615
00:23:47,210 --> 00:23:49,370
different contexts within an HTML

616
00:23:49,370 --> 00:23:52,730
document so here a custom user color is

617
00:23:52,730 --> 00:23:54,740
inserted in the context of a CSS value

618
00:23:54,740 --> 00:23:57,080
then the user name is inserted in an

619
00:23:57,080 --> 00:23:59,600
HTML text context as part of a paragraph

620
00:23:59,600 --> 00:24:02,990
element the user profile URL is injected

621
00:24:02,990 --> 00:24:05,809
in a quoted HTML attribute value the

622
00:24:05,809 --> 00:24:08,240
user ID is inserted in a JavaScript

623
00:24:08,240 --> 00:24:10,010
context on the right hand side of a

624
00:24:10,010 --> 00:24:12,290
variable declaration and finally some

625
00:24:12,290 --> 00:24:14,120
server generated debug information is

626
00:24:14,120 --> 00:24:15,950
inserted as part of a comments in HTML

627
00:24:15,950 --> 00:24:19,070
so all of these things are variable

628
00:24:19,070 --> 00:24:21,320
content which can somehow be controlled

629
00:24:21,320 --> 00:24:23,540
or at least influenced by the user and

630
00:24:23,540 --> 00:24:25,340
the website that displays this

631
00:24:25,340 --> 00:24:27,710
information in the HTML code needs to

632
00:24:27,710 --> 00:24:29,000
make sure that the user input is

633
00:24:29,000 --> 00:24:31,640
properly sanitized and escaped for the

634
00:24:31,640 --> 00:24:33,470
context that it gets inserted to and

635
00:24:33,470 --> 00:24:34,820
that is the main problem

636
00:24:34,820 --> 00:24:36,800
each of these five different contexts

637
00:24:36,800 --> 00:24:39,170
requires its own different escaping

638
00:24:39,170 --> 00:24:43,040
rules so usually web application hackers

639
00:24:43,040 --> 00:24:44,390
look for cross-site scripting

640
00:24:44,390 --> 00:24:46,160
vulnerabilities which enable them to

641
00:24:46,160 --> 00:24:48,740
execute custom JavaScript code in the

642
00:24:48,740 --> 00:24:51,560
context of the targeted website once

643
00:24:51,560 --> 00:24:53,360
they found such a vulnerability they can

644
00:24:53,360 --> 00:24:55,070
basically do anything they want in

645
00:24:55,070 --> 00:24:57,590
JavaScript to that website so the hacker

646
00:24:57,590 --> 00:24:59,420
could add a script that listens for

647
00:24:59,420 --> 00:25:01,340
keyboard events for example and then

648
00:25:01,340 --> 00:25:03,830
logs whatever you like it locks your

649
00:25:03,830 --> 00:25:06,020
keystrokes that the victim enters to

650
00:25:06,020 --> 00:25:07,880
their own server for example it would

651
00:25:07,880 --> 00:25:10,370
essentially be a key logger or it could

652
00:25:10,370 --> 00:25:12,620
just read sensitive information from the

653
00:25:12,620 --> 00:25:14,510
Dom and then leaked it to the attacker

654
00:25:14,510 --> 00:25:16,550
server so that they basically steal that

655
00:25:16,550 --> 00:25:21,110
data now that's using JavaScript but

656
00:25:21,110 --> 00:25:23,660
this is a CSS conference so let's shift

657
00:25:23,660 --> 00:25:28,340
our perspective here what can we do if

658
00:25:28,340 --> 00:25:31,430
we have full control over pages CSS but

659
00:25:31,430 --> 00:25:32,210
nothing else

660
00:25:32,210 --> 00:25:33,980
what's the worst thing we can do as an

661
00:25:33,980 --> 00:25:37,730
evil hacker in that case in other words

662
00:25:37,730 --> 00:25:39,800
what if all these injections that we

663
00:25:39,800 --> 00:25:41,500
talked about are all sanitized properly

664
00:25:41,500 --> 00:25:46,130
except for the first one this one so for

665
00:25:46,130 --> 00:25:48,050
the sake of the example assume that

666
00:25:48,050 --> 00:25:49,640
there is some sort of sanitation going

667
00:25:49,640 --> 00:25:51,260
on there that makes it impossible to

668
00:25:51,260 --> 00:25:54,020
close this tile element in the HTML but

669
00:25:54,020 --> 00:25:55,880
everything else is allowed to you can

670
00:25:55,880 --> 00:25:58,520
inject any CSS you want but you cannot

671
00:25:58,520 --> 00:26:01,640
inject arbitrary HTML what damage can

672
00:26:01,640 --> 00:26:04,820
you do with that well does anyone

673
00:26:04,820 --> 00:26:08,840
remember the CSS Zen garden yeah some

674
00:26:08,840 --> 00:26:12,260
people if you look this up you'll end up

675
00:26:12,260 --> 00:26:14,330
at this website it's just a very simple

676
00:26:14,330 --> 00:26:16,850
HTML document and it can be styled using

677
00:26:16,850 --> 00:26:19,940
CSS and anything is anyone is free to

678
00:26:19,940 --> 00:26:21,890
contribute a CSS file with a custom

679
00:26:21,890 --> 00:26:23,960
design and if it looks good it will be

680
00:26:23,960 --> 00:26:27,230
added to the site so here's a bunch of

681
00:26:27,230 --> 00:26:29,780
different designs designs there's over

682
00:26:29,780 --> 00:26:33,260
200 on this website already and they all

683
00:26:33,260 --> 00:26:35,000
look beautiful and completely different

684
00:26:35,000 --> 00:26:37,970
and the main thing here is that the only

685
00:26:37,970 --> 00:26:39,680
thing that is really changing between

686
00:26:39,680 --> 00:26:42,440
these designs is the CSS the HTML is

687
00:26:42,440 --> 00:26:44,960
exactly the same for every page that you

688
00:26:44,960 --> 00:26:47,540
see here so this is a very powerful

689
00:26:47,540 --> 00:26:51,300
demonstration of what CSS can do

690
00:26:51,300 --> 00:26:53,260
now if you look at this from the

691
00:26:53,260 --> 00:26:55,660
perspective of an evil hacker imagine

692
00:26:55,660 --> 00:26:57,430
having that kind of power over a website

693
00:26:57,430 --> 00:26:59,590
that you're targeting the obvious thing

694
00:26:59,590 --> 00:27:01,420
to do as an evil hacker is of course to

695
00:27:01,420 --> 00:27:03,640
completely deface the website you can

696
00:27:03,640 --> 00:27:05,830
make it look like at whatever you want

697
00:27:05,830 --> 00:27:08,980
basically so here's the original CSS

698
00:27:08,980 --> 00:27:11,590
comp website for example now if you had

699
00:27:11,590 --> 00:27:13,510
full control over the CSS but nothing

700
00:27:13,510 --> 00:27:15,220
else you could make it look like this

701
00:27:15,220 --> 00:27:18,400
and I'm not sure they would sell any

702
00:27:18,400 --> 00:27:19,990
tickets this way because it's a CSS

703
00:27:19,990 --> 00:27:21,700
conference and you have you know some

704
00:27:21,700 --> 00:27:24,250
certain expectations about their use of

705
00:27:24,250 --> 00:27:28,540
CSS so when an attacker is able to

706
00:27:28,540 --> 00:27:30,340
control the CSS of your page in such a

707
00:27:30,340 --> 00:27:32,040
way that's probably or not what you want

708
00:27:32,040 --> 00:27:34,900
it could be even worse I mean they could

709
00:27:34,900 --> 00:27:36,640
just hide all the existing content and

710
00:27:36,640 --> 00:27:38,470
then just apply a background image that

711
00:27:38,470 --> 00:27:40,120
contains some text of their own for

712
00:27:40,120 --> 00:27:42,340
example so they could basically replace

713
00:27:42,340 --> 00:27:44,020
all the existing content of the site

714
00:27:44,020 --> 00:27:47,170
with whatever they want there's

715
00:27:47,170 --> 00:27:48,400
something else that you could do and

716
00:27:48,400 --> 00:27:50,440
this is kind of similar to defacing but

717
00:27:50,440 --> 00:27:52,720
it's much more subtle you wouldn't touch

718
00:27:52,720 --> 00:27:54,730
the design but you would just inject

719
00:27:54,730 --> 00:27:56,860
some really annoying CSS rules and

720
00:27:56,860 --> 00:27:59,020
there's a project that collects CSS

721
00:27:59,020 --> 00:28:01,000
rules like that it's called evil dot CSS

722
00:28:01,000 --> 00:28:03,400
and it's just a CSS file basically with

723
00:28:03,400 --> 00:28:06,280
a bunch of really annoying CSS rules it

724
00:28:06,280 --> 00:28:08,170
also contains some rules that are just

725
00:28:08,170 --> 00:28:10,510
super bad for performance just for the

726
00:28:10,510 --> 00:28:13,630
fun of it and yeah again here's the

727
00:28:13,630 --> 00:28:17,460
original CSS deaf West web site and

728
00:28:17,460 --> 00:28:20,290
here's that same web site with evil dot

729
00:28:20,290 --> 00:28:22,960
CSS enables so there's no extra scroll

730
00:28:22,960 --> 00:28:24,940
bars everywhere the layout is slightly

731
00:28:24,940 --> 00:28:26,950
broken some of the content is flickering

732
00:28:26,950 --> 00:28:30,100
or missing the text is slightly blurry

733
00:28:30,100 --> 00:28:32,380
I'm not sure how easy to see that is

734
00:28:32,380 --> 00:28:34,240
yeah there's a lot of content just

735
00:28:34,240 --> 00:28:36,220
missing suddenly

736
00:28:36,220 --> 00:28:38,440
scrolling also feels really really slow

737
00:28:38,440 --> 00:28:40,150
because of all those terrible

738
00:28:40,150 --> 00:28:42,490
performance-wise CSS that is added to

739
00:28:42,490 --> 00:28:45,250
the page and my favorite part is the

740
00:28:45,250 --> 00:28:47,590
first letter in each element is slightly

741
00:28:47,590 --> 00:28:50,290
smaller than all the other ones so

742
00:28:50,290 --> 00:28:51,370
annoying

743
00:28:51,370 --> 00:28:53,980
anyway so both defacing and doing this

744
00:28:53,980 --> 00:28:55,480
sort of thing to web sites can be

745
00:28:55,480 --> 00:28:57,429
annoying for both the administrators and

746
00:28:57,429 --> 00:28:59,590
the visitors of the web site but it

747
00:28:59,590 --> 00:29:01,510
could be much worse right because if we

748
00:29:01,510 --> 00:29:03,820
look back at cross-site scripting

749
00:29:03,820 --> 00:29:05,529
well you could steal sensitive

750
00:29:05,529 --> 00:29:07,419
information that way and this is not

751
00:29:07,419 --> 00:29:10,619
possible using just TSS right or is it

752
00:29:10,619 --> 00:29:13,409
well let's see

753
00:29:13,409 --> 00:29:16,090
CSS kind of allows you to leak the value

754
00:29:16,090 --> 00:29:18,789
for any attribute value in the Dom so

755
00:29:18,789 --> 00:29:20,679
some attribute values contain security

756
00:29:20,679 --> 00:29:22,600
sensitive information like a CSRF token

757
00:29:22,600 --> 00:29:25,570
for example now if you were an attacker

758
00:29:25,570 --> 00:29:27,639
or a hacker you wanted to steal this

759
00:29:27,639 --> 00:29:29,799
value attribute here using nothing but

760
00:29:29,799 --> 00:29:33,149
CSS injection how would you go about it

761
00:29:33,149 --> 00:29:36,190
well one way to do it is to write a

762
00:29:36,190 --> 00:29:39,759
bunch of CSS like this you could use the

763
00:29:39,759 --> 00:29:41,889
CSS attribute starts with selector and

764
00:29:41,889 --> 00:29:44,259
that way it's trivial to figure out the

765
00:29:44,259 --> 00:29:46,330
first character of the CSRF token just

766
00:29:46,330 --> 00:29:48,340
by brute forcing it you just try every

767
00:29:48,340 --> 00:29:50,080
possible value for that first character

768
00:29:50,080 --> 00:29:54,009
and you include a unique background

769
00:29:54,009 --> 00:29:56,830
image URL on your own server for each

770
00:29:56,830 --> 00:29:59,259
character and when the browser makes the

771
00:29:59,259 --> 00:30:01,029
request to your server you know that

772
00:30:01,029 --> 00:30:03,190
that character matches and then you can

773
00:30:03,190 --> 00:30:05,080
start doing the same thing for the first

774
00:30:05,080 --> 00:30:06,909
two characters to guess the second

775
00:30:06,909 --> 00:30:09,340
character and so on until you have brute

776
00:30:09,340 --> 00:30:13,690
force the entire token so in the worst

777
00:30:13,690 --> 00:30:15,460
case scenario you could just enumerate

778
00:30:15,460 --> 00:30:17,349
all the possible values for the CSRF

779
00:30:17,349 --> 00:30:19,239
token but in practice you don't really

780
00:30:19,239 --> 00:30:21,279
need to test all of them it's a bit

781
00:30:21,279 --> 00:30:23,559
faster than that and here's an actual

782
00:30:23,559 --> 00:30:25,690
proof of concept for this sort of attack

783
00:30:25,690 --> 00:30:27,999
it doesn't use any JavaScript at all so

784
00:30:27,999 --> 00:30:30,759
only a lot of CSS rules and it's not

785
00:30:30,759 --> 00:30:33,309
very efficient or fast but it shows that

786
00:30:33,309 --> 00:30:35,200
it is possible to actually exfiltrate

787
00:30:35,200 --> 00:30:37,419
the sensitive data this way by using

788
00:30:37,419 --> 00:30:44,499
nothing but CSS now that was about

789
00:30:44,499 --> 00:30:46,359
stealing information that was hidden in

790
00:30:46,359 --> 00:30:48,700
an HTML attribute what if you want to

791
00:30:48,700 --> 00:30:50,619
steal data from the Dom that is part of

792
00:30:50,619 --> 00:30:55,869
a text node using nothing but CSS so

793
00:30:55,869 --> 00:30:57,460
let's say we have some HTML like this

794
00:30:57,460 --> 00:30:59,769
that contains let's say a username or

795
00:30:59,769 --> 00:31:01,629
something else that we want to find out

796
00:31:01,629 --> 00:31:03,549
or maybe it's the balance of your bank

797
00:31:03,549 --> 00:31:05,559
accounts something like that but you

798
00:31:05,559 --> 00:31:07,269
can't use JavaScript you can only use

799
00:31:07,269 --> 00:31:11,039
CSS injection how can we do this well

800
00:31:11,039 --> 00:31:14,320
you could use Unicode range to define

801
00:31:14,320 --> 00:31:16,690
web fonts to be used only for specific

802
00:31:16,690 --> 00:31:17,740
character

803
00:31:17,740 --> 00:31:19,870
so if you create a separate Fontes

804
00:31:19,870 --> 00:31:21,580
declaration for each individual

805
00:31:21,580 --> 00:31:24,220
character with a unique URL for each

806
00:31:24,220 --> 00:31:26,230
font you can essentially figure out

807
00:31:26,230 --> 00:31:28,060
which characters are being used as part

808
00:31:28,060 --> 00:31:32,980
of the CSS content and here's a proof of

809
00:31:32,980 --> 00:31:35,860
concept of that the demo was made by a

810
00:31:35,860 --> 00:31:38,530
guy named masato Kanagawa and as you can

811
00:31:38,530 --> 00:31:40,690
see the browser makes a request for each

812
00:31:40,690 --> 00:31:42,370
of the characters that is being used

813
00:31:42,370 --> 00:31:45,700
as part of this sensitive content now

814
00:31:45,700 --> 00:31:48,190
one downside is that it wouldn't show

815
00:31:48,190 --> 00:31:50,620
you the repeated characters like for

816
00:31:50,620 --> 00:31:52,540
example the letter a is being used three

817
00:31:52,540 --> 00:31:54,400
times in this case and of course the

818
00:31:54,400 --> 00:31:56,290
browser will only make one request for

819
00:31:56,290 --> 00:31:58,440
the font that is used for the letter A

820
00:31:58,440 --> 00:32:01,930
but in many cases like it really depends

821
00:32:01,930 --> 00:32:03,160
on the use case of course but in many

822
00:32:03,160 --> 00:32:05,140
cases just knowing which characters are

823
00:32:05,140 --> 00:32:10,730
being used is enough to guess the rest

824
00:32:10,740 --> 00:32:13,240
now still it could be worse there could

825
00:32:13,240 --> 00:32:17,590
be an easy way to steal sensitive data

826
00:32:17,590 --> 00:32:20,110
that is fast it's efficient that doesn't

827
00:32:20,110 --> 00:32:22,450
require us to write a lots of CSS and it

828
00:32:22,450 --> 00:32:24,190
turns out there is such a thing as well

829
00:32:24,190 --> 00:32:26,830
and CSS ie5 introduced this proprietary

830
00:32:26,830 --> 00:32:29,380
feature called CSS expressions to make

831
00:32:29,380 --> 00:32:31,540
it possibly to dynamically calculate the

832
00:32:31,540 --> 00:32:33,400
values for certain CSS properties and

833
00:32:33,400 --> 00:32:36,450
this feature was supported up until I 7

834
00:32:36,450 --> 00:32:38,560
now even if you've never seen this

835
00:32:38,560 --> 00:32:40,060
before if you just look at the syntax

836
00:32:40,060 --> 00:32:41,770
closely you'll note that the code

837
00:32:41,770 --> 00:32:43,360
wrapped in the expression part is

838
00:32:43,360 --> 00:32:46,480
actually JavaScript so yes these as

839
00:32:46,480 --> 00:32:48,370
expressions are basically a way to run

840
00:32:48,370 --> 00:32:52,030
JavaScript in your CSS it's a great idea

841
00:32:52,030 --> 00:32:53,620
I'm not sure what could possibly go

842
00:32:53,620 --> 00:32:56,210
wrong here

843
00:32:56,220 --> 00:32:59,530
anyway because it's all just JavaScript

844
00:32:59,530 --> 00:33:01,960
it means you can use browser specific

845
00:33:01,960 --> 00:33:04,090
JavaScript methods as well like alert

846
00:33:04,090 --> 00:33:06,460
for example this example would show an

847
00:33:06,460 --> 00:33:08,080
alert message and that looks something

848
00:33:08,080 --> 00:33:11,710
like this but it also means you can use

849
00:33:11,710 --> 00:33:15,190
Dom related methods like window that

850
00:33:15,190 --> 00:33:17,860
open so you can actually open a new

851
00:33:17,860 --> 00:33:20,440
window with the URL of our choice using

852
00:33:20,440 --> 00:33:22,450
nothing but CSS and that of course could

853
00:33:22,450 --> 00:33:24,550
be the URL for a malicious web site like

854
00:33:24,550 --> 00:33:27,010
a phishing website that pretends to be

855
00:33:27,010 --> 00:33:28,660
the original website and then asks you

856
00:33:28,660 --> 00:33:29,710
for your password

857
00:33:29,710 --> 00:33:31,299
soon as you enter it of course the

858
00:33:31,299 --> 00:33:33,159
attacker has stolen your password now

859
00:33:33,159 --> 00:33:36,549
you may be thinking okay this really

860
00:33:36,549 --> 00:33:39,279
sucks but if this only affects i7 and

861
00:33:39,279 --> 00:33:41,200
older versions of ie then what's the big

862
00:33:41,200 --> 00:33:42,940
deal no one really supports those

863
00:33:42,940 --> 00:33:45,309
browsers anymore and not a lot of people

864
00:33:45,309 --> 00:33:49,390
use IE 7 well that's true but the thing

865
00:33:49,390 --> 00:33:50,950
is Internet Explorer has this thing

866
00:33:50,950 --> 00:33:53,470
called browser modes and the last four

867
00:33:53,470 --> 00:33:56,289
major IE releases each shipped multiple

868
00:33:56,289 --> 00:33:58,330
rendering engines that emulated the bugs

869
00:33:58,330 --> 00:34:02,980
in their older IE versions their f12

870
00:34:02,980 --> 00:34:04,600
developer tools allow you to easily

871
00:34:04,600 --> 00:34:09,490
switch between them now that's all good

872
00:34:09,490 --> 00:34:12,220
but it's also possible to trigger a

873
00:34:12,220 --> 00:34:14,139
specific rendering mode for your website

874
00:34:14,139 --> 00:34:16,450
by using an HTTP header or an HTML meta

875
00:34:16,450 --> 00:34:18,639
elements the meta tag on this slide

876
00:34:18,639 --> 00:34:20,619
ensures that your document is rendered

877
00:34:20,619 --> 00:34:22,210
in the latest available rendering mode

878
00:34:22,210 --> 00:34:24,639
so this means that if someone using ie

879
00:34:24,639 --> 00:34:26,859
11 visits your site it will render it

880
00:34:26,859 --> 00:34:29,290
using the OEE 11 rendering mode which as

881
00:34:29,290 --> 00:34:30,820
a developer is probably what you want

882
00:34:30,820 --> 00:34:33,940
and I tend to use ie 10 mode in IE 9 to

883
00:34:33,940 --> 00:34:37,470
use ie 9 mode that makes sense however

884
00:34:37,470 --> 00:34:41,050
this meta tag would trigger i7 mode even

885
00:34:41,050 --> 00:34:44,260
in ie8 or I 9 or I 10 and the thing is

886
00:34:44,260 --> 00:34:46,240
this mode not only emulates the known

887
00:34:46,240 --> 00:34:48,760
bugs that i7 used to have but it also

888
00:34:48,760 --> 00:34:51,129
brings back the old deprecated or even

889
00:34:51,129 --> 00:34:53,109
removed features that i7 used to have

890
00:34:53,109 --> 00:34:57,700
such as CSS expressions so our initial

891
00:34:57,700 --> 00:34:59,530
example it only worked in i7 and older

892
00:34:59,530 --> 00:35:01,480
versions can be made to work even in IE

893
00:35:01,480 --> 00:35:05,080
8 9 and 10 just by adding a meta tag it

894
00:35:05,080 --> 00:35:07,150
even works in AI 11 if the site is in

895
00:35:07,150 --> 00:35:09,130
the so called trust its own so that's

896
00:35:09,130 --> 00:35:11,349
why I did I include ie 11 in the title

897
00:35:11,349 --> 00:35:13,080
here because it's a little bit trickier

898
00:35:13,080 --> 00:35:15,880
so okay that's pretty cool but in our

899
00:35:15,880 --> 00:35:17,530
attack scenario from before we could

900
00:35:17,530 --> 00:35:20,530
only inject CSS and we couldn't inject

901
00:35:20,530 --> 00:35:22,839
HTML so we had no way to add the meta

902
00:35:22,839 --> 00:35:25,390
tag there so how can we still make use

903
00:35:25,390 --> 00:35:29,109
of this trick well it turns out that the

904
00:35:29,109 --> 00:35:30,790
attacker can just create a web page of

905
00:35:30,790 --> 00:35:33,849
their own hosted on their own server at

906
00:35:33,849 --> 00:35:35,890
the meta tag there and trigger ie7

907
00:35:35,890 --> 00:35:38,050
compatibility mode and then they could

908
00:35:38,050 --> 00:35:40,150
embed the targeted website with their

909
00:35:40,150 --> 00:35:42,859
CSS payload inside of an iframe

910
00:35:42,859 --> 00:35:46,069
in that case the documents the document

911
00:35:46,069 --> 00:35:47,959
mode of the parent document is inherited

912
00:35:47,959 --> 00:35:50,089
by the targeted website in the iframe

913
00:35:50,089 --> 00:35:52,039
even if the targeted website would

914
00:35:52,039 --> 00:35:53,359
normally use the latest available

915
00:35:53,359 --> 00:35:55,849
rendering mode so this allows the

916
00:35:55,849 --> 00:35:57,920
attacker to use CSS expressions in the

917
00:35:57,920 --> 00:36:00,380
context of the target website even in

918
00:36:00,380 --> 00:36:01,209
ie10

919
00:36:01,209 --> 00:36:03,769
so just to recap there's two conditions

920
00:36:03,769 --> 00:36:06,140
here if a target website allows you to

921
00:36:06,140 --> 00:36:09,229
inject arbitrary CSS and it allows

922
00:36:09,229 --> 00:36:12,109
framing then this enables attackers to

923
00:36:12,109 --> 00:36:14,299
perform cross-site scripting attacks on

924
00:36:14,299 --> 00:36:16,099
your site and Internet Explorer using

925
00:36:16,099 --> 00:36:19,219
nothing but CSS I thought that was kind

926
00:36:19,219 --> 00:36:22,219
of crazy now what can you do about this

927
00:36:22,219 --> 00:36:24,979
how can we avoid these CSS expression

928
00:36:24,979 --> 00:36:27,380
vulnerabilities as a web web site

929
00:36:27,380 --> 00:36:29,420
administrator well of course all of this

930
00:36:29,420 --> 00:36:31,609
can be avoided if you just sanitize all

931
00:36:31,609 --> 00:36:33,799
your intrusted input before injecting it

932
00:36:33,799 --> 00:36:36,289
into your HTML responses all you have to

933
00:36:36,289 --> 00:36:38,180
do is never make a single mistake and

934
00:36:38,180 --> 00:36:41,420
everything will be fine sure like that's

935
00:36:41,420 --> 00:36:42,319
ever going to happen

936
00:36:42,319 --> 00:36:44,719
so failing that you could use the X

937
00:36:44,719 --> 00:36:47,359
frame options HTTP header to prohibit

938
00:36:47,359 --> 00:36:49,369
framing of your web page and this makes

939
00:36:49,369 --> 00:36:50,959
it impossible for an attacker to easily

940
00:36:50,959 --> 00:36:53,269
pick your page into i7 compatibility

941
00:36:53,269 --> 00:36:55,819
mode and thereby enable CSS expressions

942
00:36:55,819 --> 00:36:58,940
and last but not least and this is

943
00:36:58,940 --> 00:37:00,249
another thing that really surprised me

944
00:37:00,249 --> 00:37:02,959
you could use the so-called html5

945
00:37:02,959 --> 00:37:05,719
doctype you know the short one and it

946
00:37:05,719 --> 00:37:07,430
turns out that Internet Explorer uses

947
00:37:07,430 --> 00:37:09,979
this doctype as a heuristic whenever a

948
00:37:09,979 --> 00:37:11,930
page is rendered using this doctype it

949
00:37:11,930 --> 00:37:14,539
will automatically disable CSS

950
00:37:14,539 --> 00:37:16,369
expressions even if your page gets

951
00:37:16,369 --> 00:37:18,999
framed and inherits the i7 document mode

952
00:37:18,999 --> 00:37:21,499
CSS expressions won't work with this

953
00:37:21,499 --> 00:37:23,599
doctype and this is not true for any

954
00:37:23,599 --> 00:37:25,759
other dog type so if you have a lot of

955
00:37:25,759 --> 00:37:28,430
old HTML pages on your server lying

956
00:37:28,430 --> 00:37:29,809
around that you don't even maintain

957
00:37:29,809 --> 00:37:31,969
anymore it's definitely a good idea to

958
00:37:31,969 --> 00:37:33,769
just do a simple search replace on them

959
00:37:33,769 --> 00:37:35,690
and just update their doctype to use

960
00:37:35,690 --> 00:37:37,819
this one it won't break anything and

961
00:37:37,819 --> 00:37:39,499
will actually make your site more secure

962
00:37:39,499 --> 00:37:42,859
in Internet Explorer so to me this is

963
00:37:42,859 --> 00:37:44,509
really kind of crazy to think about

964
00:37:44,509 --> 00:37:46,699
because you need to add an HTTP header

965
00:37:46,699 --> 00:37:49,009
and use a specific duck type in your

966
00:37:49,009 --> 00:37:51,999
HTML just to prevent people from running

967
00:37:51,999 --> 00:37:56,360
JavaScript in your CSS well

968
00:37:56,360 --> 00:37:58,550
it's a bit too much for me really but

969
00:37:58,550 --> 00:38:01,940
that's the Internet Explorer I guess now

970
00:38:01,940 --> 00:38:04,730
it's not just ie there's other browsers

971
00:38:04,730 --> 00:38:07,220
that used to have books with JavaScript

972
00:38:07,220 --> 00:38:09,920
and CSS you can kind of execute

973
00:38:09,920 --> 00:38:11,510
JavaScript using nothing but CSS in

974
00:38:11,510 --> 00:38:13,370
other browsers like old versions of

975
00:38:13,370 --> 00:38:15,590
Firefox used to have a bug if you assign

976
00:38:15,590 --> 00:38:17,390
a background image to an element and

977
00:38:17,390 --> 00:38:20,150
point it to a JavaScript URL the script

978
00:38:20,150 --> 00:38:22,130
would be executed however it would be

979
00:38:22,130 --> 00:38:24,110
executed in a sandbox so it was not

980
00:38:24,110 --> 00:38:25,850
possible to actually steal any data from

981
00:38:25,850 --> 00:38:28,010
the Dom or do anything really malicious

982
00:38:28,010 --> 00:38:30,790
but what you could do is for example

983
00:38:30,790 --> 00:38:33,680
trigger an infinite loop and that would

984
00:38:33,680 --> 00:38:36,470
essentially hang Firefox so if someone

985
00:38:36,470 --> 00:38:38,330
was able to inject this CSS into your

986
00:38:38,330 --> 00:38:40,970
page someone would try to visit the site

987
00:38:40,970 --> 00:38:43,810
in Firefox they would basically just get

988
00:38:43,810 --> 00:38:46,640
this yeah well it would look like this

989
00:38:46,640 --> 00:38:53,600
and then if we just crash now fire from

990
00:38:53,600 --> 00:38:55,220
Mozilla has since fixed the bug so this

991
00:38:55,220 --> 00:38:57,110
is not a problem anymore but it really

992
00:38:57,110 --> 00:38:59,270
makes you think about how powerful CSS

993
00:38:59,270 --> 00:39:02,750
is okay and because I know it's still

994
00:39:02,750 --> 00:39:04,220
early and I've just been talking about a

995
00:39:04,220 --> 00:39:07,970
lot of random different things let's do

996
00:39:07,970 --> 00:39:11,330
a quick CSS quiz who is up for that yeah

997
00:39:11,330 --> 00:39:14,780
oh yeah that's the spirit okay so what

998
00:39:14,780 --> 00:39:21,020
band is this I hope you like music you

999
00:39:21,020 --> 00:39:24,310
can just shout if you want to guess

1000
00:39:24,310 --> 00:39:26,840
could be yeah that's the one the Black

1001
00:39:26,840 --> 00:39:31,490
Keys yeah these guys okay next one what

1002
00:39:31,490 --> 00:39:38,000
band is this you can just shout your

1003
00:39:38,000 --> 00:39:43,250
guesses it's fine to guess

1004
00:39:43,260 --> 00:39:50,700
what color is that foo fight oh that

1005
00:39:50,700 --> 00:39:53,060
would be good no it's not that

1006
00:39:53,060 --> 00:39:55,920
it's actually simply rat yeah it's just

1007
00:39:55,920 --> 00:39:59,040
ref that was a terrible one okay let's

1008
00:39:59,040 --> 00:40:03,780
try another one what band is this this

1009
00:40:03,780 --> 00:40:05,370
requires some knowledge of the Unicode

1010
00:40:05,370 --> 00:40:17,760
standard yeah its Radiohead okay one

1011
00:40:17,760 --> 00:40:18,150
more

1012
00:40:18,150 --> 00:40:21,450
what band is this I think someone said

1013
00:40:21,450 --> 00:40:27,980
it already yeah the white stripes

1014
00:40:27,980 --> 00:40:31,740
alright okay now let's try a song the

1015
00:40:31,740 --> 00:40:38,720
famous pop song what song is this yep

1016
00:40:38,720 --> 00:40:41,820
painted black by the Rolling Stones like

1017
00:40:41,820 --> 00:40:43,710
if you have a red door and CSS you want

1018
00:40:43,710 --> 00:40:45,480
to paint it black you can use CSS blend

1019
00:40:45,480 --> 00:40:51,300
modes for that turns out okay what band

1020
00:40:51,300 --> 00:40:57,420
is this yep Green Day wow that was quick

1021
00:40:57,420 --> 00:41:08,450
respect okay let's try some more

1022
00:41:08,460 --> 00:41:13,470
editor's yeah that one might have been a

1023
00:41:13,470 --> 00:41:16,230
little bit too geeky okay one last one

1024
00:41:16,230 --> 00:41:23,490
before I go what band is this yep it's

1025
00:41:23,490 --> 00:41:26,859
the Black Eyed Peas

1026
00:41:26,869 --> 00:41:28,380
there they are

1027
00:41:28,380 --> 00:41:31,230
okay so with that I'd like to thank you

1028
00:41:31,230 --> 00:41:32,010
for your attention

1029
00:41:32,010 --> 00:41:33,599
and thanks to everyone whose research

1030
00:41:33,599 --> 00:41:48,790
I've been using

