1
00:00:01,640 --> 00:00:22,570
I'm Sebastian, that thing there is my last
name.

2
00:00:22,570 --> 00:00:27,939
I live in California now, but, um, it's actually
really nice to be back in Europe where Umlauds

3
00:00:27,939 --> 00:00:36,590
and accents are normal occur answers. Sorry
for my bad voice, I think I'm allergic for

4
00:00:36,590 --> 00:00:46,420
bad API. I work for Facebook now, I'm not
an evangelist, I just code stuff, I'm just

5
00:00:46,420 --> 00:00:53,460
some dude. I also represent Facebook on TC
39 on standards committee on ECMAScript. Don't

6
00:00:53,460 --> 00:00:58,629
worry, the bad parts are not mine, they're
someone else's.

7
00:00:58,629 --> 00:01:05,750
I guess a lot of people here have a favorite
library. There was your favorite library\hâ€‘â€‘

8
00:01:05,750 --> 00:01:12,700
nothing? React that's a good call. (Laughing)
do you guys use libraries for everything,

9
00:01:12,700 --> 00:01:19,450
like the same library, like utility library,
like underscore in how many people use underscore?

10
00:01:19,450 --> 00:01:32,510
Cool. JQuery? Something like Angular High
Level YUY? Oooo ... sorry, guys (Laughing)

11
00:01:32,510 --> 00:01:38,100
well, this is the great part about JavaScript,
our community, if you look platforms like

12
00:01:38,100 --> 00:01:47,060
EEO, Andriod or proprietary. Do whatever the
platform owner tells you that's right to do.

13
00:01:47,060 --> 00:01:52,780
There's a stock secret black box you can't
touch, everyone tells you you can't do better

14
00:01:52,780 --> 00:01:59,290
than they did, which is not true, let's be
honest, it's not true in the Java committee.

15
00:01:59,290 --> 00:02:05,939
We have a vibrant community of framework,
we have discussion and fights about how many

16
00:02:05,939 --> 00:02:13,269
package managers we need manage all of our
libraries, I think a lot of them are called

17
00:02:13,269 --> 00:02:22,690
MPM actually. But do we really need this many
OA's, how many ways do we fled the accessDM

18
00:02:22,690 --> 00:02:28,959
attributes. You know all the APIs in Ember
data, do you know how many ways to filter

19
00:02:28,959 --> 00:02:35,959
an array just in underscore? Is it same as
well dash depending on which version you use

20
00:02:35,959 --> 00:02:43,471
and what you opt in to. Do you even know tall
APIs in the standard JavaScript library? What

21
00:02:43,471 --> 00:02:52,790
about VS 6? Job recruiters and job descriptions
are looking for experience with specific libraries,

22
00:02:52,790 --> 00:02:57,770
and if you know the same concept under different
name, you're actually not good enough, because

23
00:02:57,770 --> 00:03:03,970
like you're not going to get ramped up quick
enough before the company pivots, right. It's

24
00:03:03,970 --> 00:03:09,710
starting to get a little bit annoying with
all this proliferation, but, of course, you

25
00:03:09,710 --> 00:03:13,770
have a solution for this, you created your
own library and now there's only one thing

26
00:03:13,770 --> 00:03:19,170
you is to learn. It's probably super easy,
solves all the educations and all the names

27
00:03:19,170 --> 00:03:27,030
are super easy for you to understand. How
streamlined? JavaScript JS is really hard

28
00:03:27,030 --> 00:03:33,790
to learn. Imagine this is like the first day
and you get dropped into code based complicated

29
00:03:33,790 --> 00:03:37,920
weapon App, in the middle of the web App,
first day you have no idea how it works how

30
00:03:37,920 --> 00:03:44,489
many calls in to JavaScript libraries do you
see that you've never seen before. Imagine

31
00:03:44,489 --> 00:03:50,580
this is the life of thousands of your colleagues.
We had our own core libraries at Facebook

32
00:03:50,580 --> 00:03:51,580
as well.

33
00:03:51,580 --> 00:03:56,980
One of the most common questions we had was
so which Facebook specific module corresponds

34
00:03:56,980 --> 00:04:04,220
to this underscore or JQue arey function?
It's not that the library is too big, the

35
00:04:04,220 --> 00:04:09,020
library is pretty cool. It doesn't matter
if there's too many bytes, there's way to

36
00:04:09,020 --> 00:04:15,700
optimize and filter those, it's actually total
amount of APIs that you have to learn to be

37
00:04:15,700 --> 00:04:20,750
productive in this industry. That's really
difficult these days. And I don't think this

38
00:04:20,750 --> 00:04:27,940
is inherent to a diverse ecosystem. I don't
think it's inherent to programming in general.

39
00:04:27,940 --> 00:04:33,720
I think I found a process that can help us
minimize this problem. First of all, listen

40
00:04:33,720 --> 00:04:43,780
to slow moving standard organizations. Then
write some spaghetti code. Never abstract

41
00:04:43,780 --> 00:04:51,140
until it actually causes bugs. Once it does
cause a bug, subtract an abstraction and as

42
00:04:51,140 --> 00:05:00,050
as much surface area as you destruct if it.
This doesn't sound like best practices, and

43
00:05:00,050 --> 00:05:07,050
no one wants to listen to slow moving standards
story. Let me get back to that a little bit

44
00:05:07,050 --> 00:05:15,560
later. First, some history. 2005. Late 2005.
It was an interesting era for the web, it

45
00:05:15,560 --> 00:05:22,980
was before internet explorer 7, JavaScript
update for 6 years, ES 4 was being drafted,

46
00:05:22,980 --> 00:05:29,340
it was going to go into failure. But minimal
JavaScript, the line of library we had, the

47
00:05:29,340 --> 00:05:35,120
community had enough, we started to take things
into our own hands, and this was an era where

48
00:05:35,120 --> 00:05:42,430
all the libraries started to see proliferation.
A lot of them were like prototype, based JS,

49
00:05:42,430 --> 00:05:47,500
those two heavily inspired Moo tools, which
I kind of worked on a little bit. A lot of

50
00:05:47,500 --> 00:05:54,070
those bad things were my fault. But, of course
libraries couldn't agree on a standard way

51
00:05:54,070 --> 00:05:59,810
of extending prototypes and having global
name space so the best practice became like

52
00:05:59,810 --> 00:06:03,710
J curry and underscore because they had their
owne own separate name space.

53
00:06:03,710 --> 00:06:10,560
Then ES 5 came along and it became popular
to patch prototypes again, this time it's

54
00:06:10,560 --> 00:06:17,300
called poly fills. A lot of those poly fills
naturally replaced prototype and Moo tools

55
00:06:17,300 --> 00:06:22,460
because they were sharing the same name space.
But, the library in their own name space,

56
00:06:22,460 --> 00:06:30,410
like underscore and J query lived on. They
actually had better APIs at the time because

57
00:06:30,410 --> 00:06:35,440
there were better documented and it was easier
to learn because there was no standard that

58
00:06:35,440 --> 00:06:40,710
you can rely on. And the rational that they
still live on it's empowering to have an abstraction

59
00:06:40,710 --> 00:06:48,210
on top of the native feature, you with tweak
performance, fix thing Ms.\hThe speck without

60
00:06:48,210 --> 00:06:54,940
relying on a standards body to fix it for
you. Even TC 39 for JavaScript would even

61
00:06:54,940 --> 00:06:59,570
argue if you're not quite happy with this,
you should just use your own ten mow library

62
00:06:59,570 --> 00:07:05,140
and build something on top of the standards.
But which one do we use? There's at least

63
00:07:05,140 --> 00:07:09,550
two ways to do it now, there's the standard
way, and the library way, and there's multiple

64
00:07:09,550 --> 00:07:14,200
libraries, we asked ourselves because we got
this question a lot, should we adopt an API

65
00:07:14,200 --> 00:07:20,180
like popular library or underscore or maybe
a little dash, but which one of them, and

66
00:07:20,180 --> 00:07:27,130
which version and is this going to be maintained.
Do we even control the source? Is it community

67
00:07:27,130 --> 00:07:33,170
driven, or is it controlled by one person?
Do we require this library from all of our

68
00:07:33,170 --> 00:07:41,491
source, or do we decouple it with some other
dependency. So, let's take a minute to look

69
00:07:41,491 --> 00:07:46,630
at why we actually use JavaScript to begin
with. It's not best language in the world,

70
00:07:46,630 --> 00:07:50,870
whatever your favorite style is, there's at
least one Bert language out there that will

71
00:07:50,870 --> 00:07:56,690
compile down to JavaScript. We can just use
that instead, right? Well, we use JavaScript

72
00:07:56,690 --> 00:08:01,530
because it's ubiquitous, it's something that
people could agree on.

73
00:08:01,530 --> 00:08:09,410
This is why general purpose programming languages
keep winning out against DSLs and custom languages.

74
00:08:09,410 --> 00:08:14,440
And by introducing divergence in the library
community, we're actually undermining what

75
00:08:14,440 --> 00:08:23,770
JavaScript is great. So back at Facebook we
started building source trance filers for

76
00:08:23,770 --> 00:08:30,310
ES 6 features, we invested a lot in E 6, we
became very early adopters throughout our

77
00:08:30,310 --> 00:08:39,010
entire code base, we joined TC 39 to start
working on ES 7. There are some problems with

78
00:08:39,010 --> 00:08:43,140
this technique though, there's some native
functions that are shower than reimplementation

79
00:08:43,140 --> 00:08:48,690
of this, load ash shows this over and over
again. It's easy to solve just monkey batch

80
00:08:48,690 --> 00:08:55,440
it, just overwry native version with one that's
faster, this is a string of JavaScript that

81
00:08:55,440 --> 00:09:01,710
you can actually do this. Sometimes, don't
tell anyone, but you can actually use Shams

82
00:09:01,710 --> 00:09:07,080
as well that are not quite compatible just
to get the extra little performance boost,

83
00:09:07,080 --> 00:09:12,130
just make sure you're continuously try knoll
the standards as it mosting along and also

84
00:09:12,130 --> 00:09:20,990
try to not expose dependencies on nonâ€‘standard
behavior. There's a lot of compatibility problems

85
00:09:20,990 --> 00:09:28,770
with just relying on poly fills. In the early
day was Spec changes a lot you basically have

86
00:09:28,770 --> 00:09:36,000
to live with it as a library rather than a
final draft of a spec, you continuously upgrade,

87
00:09:36,000 --> 00:09:40,650
you can really only have one version in one
realm at a time, we have a lot of solutions

88
00:09:40,650 --> 00:09:45,640
to solve this, another problem is that you
mite have to load like a huge poly fill on

89
00:09:45,640 --> 00:09:50,700
an initial page load instead of doing the
modular loading.

90
00:09:50,700 --> 00:09:54,360
And all of this stuff is really difficult
to get right, but we, and a lot of our people

91
00:09:54,360 --> 00:09:58,990
are trying to build Open Source tooling, to
support your environment, stacked actually

92
00:09:58,990 --> 00:10:05,210
enable you do this. And this is all hard work,
but it allowstous have a very simple story,

93
00:10:05,210 --> 00:10:11,270
at Facebook, we use JavaScripts standard library.
There's one way to do things, and it's the

94
00:10:11,270 --> 00:10:20,420
standard way. And it's it avoids a very simple
problem. It avoids bike shedding, bike shedding

95
00:10:20,420 --> 00:10:28,180
is the biggest waist of all. We leave that
to standard mailing list. It reminds me the

96
00:10:28,180 --> 00:10:34,390
least intuitive lessons I learned from an
organization. The topâ€‘down authority is

97
00:10:34,390 --> 00:10:40,870
best used on the very least important decisions,
not the most important decisions. For example

98
00:10:40,870 --> 00:10:46,880
I really recommend you force a strict and
comprehensive style guide just because it

99
00:10:46,880 --> 00:10:53,710
avoids this discussion on every of pole request
or every DIsive which style you're going to

100
00:10:53,710 --> 00:11:00,750
use and every person isn't going to have to
fight to get their style (DIV) you might be

101
00:11:00,750 --> 00:11:04,880
asking yourself, JavaScript standard library
doesn't have all features of my library, so

102
00:11:04,880 --> 00:11:12,290
what do I replace this with? Well, often the
answer is just write some more boilerplate

103
00:11:12,290 --> 00:11:19,500
code. It'll take you a few seconds longer,
you don't take on dependency. The person coming

104
00:11:19,500 --> 00:11:23,720
to fix your code does haven't to know about
your obscure function and to pointing out

105
00:11:23,720 --> 00:11:28,162
their version with the same or different names
that someone else thought was better, and

106
00:11:28,162 --> 00:11:33,430
better looking. This can be really annoying
to have all this repetitive code that looks

107
00:11:33,430 --> 00:11:38,430
ugly when we all want beautiful code, right.

108
00:11:38,430 --> 00:11:45,210
Except, this process fundamentally has no
end, ever. We're simply never going to realize

109
00:11:45,210 --> 00:11:50,680
state of software anywhere van that where
everything is supremely satisfying. And that's

110
00:11:50,680 --> 00:11:59,790
an emotional realization. This was an early
quote from early Facebooker, but to put it

111
00:11:59,790 --> 00:12:06,080
another way, you're not going to find a perfect
library API, you have good looking code now

112
00:12:06,080 --> 00:12:10,941
will look bad in a year, and you or someone
else will have to go upgrade it. You might

113
00:12:10,941 --> 00:12:21,010
not remember what abstraction you found was
cool, today. However, it's not allGloomy.

114
00:12:21,010 --> 00:12:28,471
You write your code a little differently,
Ellen new patterns that allow you to structure

115
00:12:28,471 --> 00:12:38,190
your code a different way that achieve your
goal\hâ€‘â€‘ now, learning these patterns

116
00:12:38,190 --> 00:12:41,870
is quite difficult, and this is definitely
a learning curve, but that makes you a better

117
00:12:41,870 --> 00:12:48,720
programmer in general. Large frameworks they
usually is an API for every kind of use case

118
00:12:48,720 --> 00:12:53,490
you can just search for that API, like ask
for it on stack overflow and you can find

119
00:12:53,490 --> 00:12:59,850
a link to it. When you learn patterns you
have to read a book or tutorial or find different

120
00:12:59,850 --> 00:13:06,279
ways to express the same thing. It's a different
way to search for things, but, essentially

121
00:13:06,279 --> 00:13:12,160
it's the aim problem. It's just a slightly
different solution. And, if you structure

122
00:13:12,160 --> 00:13:18,160
a code in a way that uses patterns, instead
of black box libraries, it's mouchoirs for

123
00:13:18,160 --> 00:13:22,680
the next person to read your code, to actually
understand what's going on. And this is the

124
00:13:22,680 --> 00:13:26,840
most important lesson I've learned at Facebook.

125
00:13:26,840 --> 00:13:32,040
It's much easier to recover from no abstraction
than the wrong abstraction.

126
00:13:32,040 --> 00:13:38,050
So, this kind of says a spaghetti code can
be Bert than a structure code this is very

127
00:13:38,050 --> 00:13:45,170
counterintuitive to modern programmers, at
least. It's that the structure abadd overhead

128
00:13:45,170 --> 00:13:51,300
to what a new coder needs to learn just to
get up to speed with your code base. But,

129
00:13:51,300 --> 00:13:56,160
you know, like one little abstraction can't
hurt, but abstractions tend to spread, because

130
00:13:56,160 --> 00:14:01,520
toll is just a layer of abstractions, one
on top of the other, and everything you have

131
00:14:01,520 --> 00:14:08,420
on top of your abstraction will node the be
unwound. You have to unwind every layer with

132
00:14:08,420 --> 00:14:12,890
a total and complete understanding of the
intraquasis of that system to get back to

133
00:14:12,890 --> 00:14:18,730
the original layer and then rebuild it if
there. And, that means that it can actually

134
00:14:18,730 --> 00:14:27,660
be more\hâ€‘â€‘ a lot easier to upgrade verbose,
repetitive and explicit code than it is to

135
00:14:27,660 --> 00:14:36,661
upgrade an abstraction. Now I'm not saying
like bad code, spaghetti code is better. It's

136
00:14:36,661 --> 00:14:40,750
really like Fettucci ine code.

137
00:14:40,750 --> 00:14:49,640
Have you ever lived with like a large App
that was built on the wrong framework? And

138
00:14:49,640 --> 00:14:54,190
you tried to upgrade it but you never could,
because you could never understand how the

139
00:14:54,190 --> 00:15:00,160
underlying framework worked. Your had an existing
App that was just written in haste, it was

140
00:15:00,160 --> 00:15:04,830
all spaghetti code, maybe it was good spaghetti
code, maybe it was Fettuccine code. A lot

141
00:15:04,830 --> 00:15:13,300
of abstractions lots of repetition. Which
one left you with more of a usable code? Abstraction

142
00:15:13,300 --> 00:15:19,740
comes with a significant cost and significant
risk, so it's better to abstract to begin

143
00:15:19,740 --> 00:15:26,380
with and once you have a nice Feuccin e code
base start finding repeated patterns, if the

144
00:15:26,380 --> 00:15:32,750
pattern doesn't lead to bugs, don't fix it.
It might look ugly but it's not hurting anyone.

145
00:15:32,750 --> 00:15:40,560
Try to generalize it, and you only risk adding
bugs in the generalization. It only adds surface

146
00:15:40,560 --> 00:15:47,460
area to hurt everyone. But once it starts
causing bugs then it becomes a problem because

147
00:15:47,460 --> 00:15:53,240
it's repetition and some algorithms can be
difficult to get right and then it starts

148
00:15:53,240 --> 00:15:59,260
causing bugs then you generalize, you create
an abstraction, but make sure the abstraction

149
00:15:59,260 --> 00:16:07,310
can be used for wide variety of use cases
because it has to make it worth it's weight.

150
00:16:07,310 --> 00:16:11,720
It might even be subject for standardtion
if it's general enough. And this is where

151
00:16:11,720 --> 00:16:16,980
slow moving standards can actually help you.
If it convenience recall enough and useful

152
00:16:16,980 --> 00:16:21,730
enough, it will be accepted as a standard,
maybe it will be accepted as a draft and you

153
00:16:21,730 --> 00:16:24,460
can sort of continue from that.

154
00:16:24,460 --> 00:16:29,060
But if it's not, then maybe it's not actually
worth the weight it's adding, maybe you need

155
00:16:29,060 --> 00:16:38,839
to rethink or prove its value. Now let's talk
about the DOM. There are apparently 25 methods

156
00:16:38,839 --> 00:16:45,841
to work with attributes alone, you can also
access attributes throw properties. That's

157
00:16:45,841 --> 00:16:52,790
still no reason to use a J query, the browser
inconsistencies could be poly filled and the

158
00:16:52,790 --> 00:16:58,430
rest is just basically adding some sugar.
It's not solving the actual structural problem

159
00:16:58,430 --> 00:17:02,530
and the come Plaintiff's Exhibitty of the
actual DOM, the living DOM, and that thing

160
00:17:02,530 --> 00:17:08,720
is the thank that leads to bugs. No and Already
and Ember tries to address this by change

161
00:17:08,720 --> 00:17:14,440
tracking and adding\hâ€‘â€‘ bites on top of
the DOM, you adopt have to access it directly

162
00:17:14,440 --> 00:17:24,360
and solves the bugs. In theory web components
and similar efforts can actually work on standardizing

163
00:17:24,360 --> 00:17:30,300
these patterns then there's one thing you
have to learn and this data mining, web components

164
00:17:30,300 --> 00:17:37,211
world. Except, they don't actually remove
as much as they add. The surface area of the

165
00:17:37,211 --> 00:17:42,300
framework, these paradigms, it's huge, there's
a lot of things you have to learn. Learning

166
00:17:42,300 --> 00:17:49,240
how to use nit a fully structured way, and
the intraquasis of that is still huge. And

167
00:17:49,240 --> 00:17:55,370
that continues to be the case even when it's
standardized. But, with this paradigm it's

168
00:17:55,370 --> 00:17:59,340
all necessary. And that fende tends to happen
when you keep building straight on top of

169
00:17:59,340 --> 00:18:00,809
existing ideas.

170
00:18:00,809 --> 00:18:08,590
So, sometimes joust have to rethink the whole
stack. Come up with a smaller surface area.

171
00:18:08,590 --> 00:18:12,160
So we thought, mutation is actualry the hard
part of the DOM\hâ€‘â€‘ mutation is actually

172
00:18:12,160 --> 00:18:18,950
hard part of the D onlyM so what we through
it away and do it like a patriot load. We

173
00:18:18,950 --> 00:18:26,460
created react. We oar not trying to diverge
from standard, we think functional approach

174
00:18:26,460 --> 00:18:32,740
taken by react means we can drop so much more
of the surface area. And all we're trying

175
00:18:32,740 --> 00:18:38,520
to do is make it a lot easier to reason about
code, without having you to think about a

176
00:18:38,520 --> 00:18:44,800
lot of surface area. The remaining surface
area is things that you can spend time thinking

177
00:18:44,800 --> 00:18:53,030
about around your domain specific world. So
this is the API of react . Suppose to function

178
00:18:53,030 --> 00:18:59,500
that gets the initial state of component,
render function that you can read from the

179
00:18:59,500 --> 00:19:05,470
states. And a call back that sets state. You'll
notice that the set state is actually the

180
00:19:05,470 --> 00:19:11,210
only API in to react. This is really the only
API you have to understande understand in

181
00:19:11,210 --> 00:19:19,680
react. We also have this syntax sugar, basically
because braces are difficult to read. It looks

182
00:19:19,680 --> 00:19:27,800
like templates, but it's not really templates,
there's no repeaters. In's no special directives,

183
00:19:27,800 --> 00:19:32,450
there's no special conditionals, it's just
plain old JavaScript.

184
00:19:32,450 --> 00:19:41,550
Now, reacts internals are pretty come collated.
The differing algorithm can be fairly complicated.

185
00:19:41,550 --> 00:19:45,340
But the surface area that you have to face
as a developer to understand what's going

186
00:19:45,340 --> 00:19:52,790
on in React is very simple, no new APIs just
a simple concept. You can build an incredibly

187
00:19:52,790 --> 00:20:02,621
con next App but this, we did and up until
this point it sounds pretty good, right. But

188
00:20:02,621 --> 00:20:13,840
nothing is free. So what are we giving up?
Implicitness. React favors explicit APIs,

189
00:20:13,840 --> 00:20:20,640
and for you to write out your code as explicitly
as possible over builtâ€‘in Magic in many

190
00:20:20,640 --> 00:20:25,040
cases we get request for implicit bubbling
of events because it's teed use to pass a

191
00:20:25,040 --> 00:20:31,730
call back around or extra properties around,
well, turns out this is a terrible idea. It's

192
00:20:31,730 --> 00:20:38,040
really difficult to follow code that depends
on implicit bubbling of vents, it means that

193
00:20:38,040 --> 00:20:44,910
if either side disappears, you don't know
where it disappeared, let's say one call disappears

194
00:20:44,910 --> 00:20:50,830
from your stack and later we realize that
actually lead to a bug that we didn't anticipate,

195
00:20:50,830 --> 00:20:55,420
how do you find what? Do you have to go through
I have component and theirs of every component

196
00:20:55,420 --> 00:21:03,100
and extraction along the way to find where
that happened? This is just one example. If

197
00:21:03,100 --> 00:21:09,480
but it speaks to the idea that saving a little
bit of typing is actually not a good reason

198
00:21:09,480 --> 00:21:12,920
enough for an abstraction.

199
00:21:12,920 --> 00:21:19,580
It's much easier to recover from an explicit
API by adding some sugar than to undo an explicit

200
00:21:19,580 --> 00:21:25,210
API. And we take new abstractions in Direct
very, very seriously, while you is to live

201
00:21:25,210 --> 00:21:32,280
with a little bit of boilerplate (React) you
will probably understand and refactor your

202
00:21:32,280 --> 00:21:38,030
code in the future much easier. We make mistakes
too, of course.

203
00:21:38,030 --> 00:21:44,360
Um, if you're used to React you might have
noticed that's not actually how you write

204
00:21:44,360 --> 00:21:53,970
React right now we built our own class extraction.
It was perhaps convenient. But in the next

205
00:21:53,970 --> 00:21:59,741
version of React we're deprecate that and
going all in on the ES 6 class, it's not an

206
00:21:59,741 --> 00:22:08,160
extended verse of ES 6 classes just ES 6 classes,
because it's not a one to one mapping it means

207
00:22:08,160 --> 00:22:16,250
a little bit more boilerplate in some cases
but it means that since we're removing proprietary

208
00:22:16,250 --> 00:22:22,870
feature from the library, you can use whatever
abstraction you want. Preferably we'll just

209
00:22:22,870 --> 00:22:29,110
use standard JavaScripts so we don't add extra
weight to our industry. But, if you railly

210
00:22:29,110 --> 00:22:36,179
do want to use a third party library, since
we provide the standard class system it means

211
00:22:36,179 --> 00:22:41,980
that we can accept any kind of third party
class system as well. Because the standard

212
00:22:41,980 --> 00:22:47,110
represents an intermediate representation
that can be shared across libraries, this

213
00:22:47,110 --> 00:22:54,670
causes deâ€‘couping as a side effect. Now
think about that for a minute, React already

214
00:22:54,670 --> 00:23:04,450
has a small surface area, removing proprietary
features from the framework. Now, just because

215
00:23:04,450 --> 00:23:11,670
you should mostly use standard language, it
doesn't mean you have to use all of it. So,

216
00:23:11,670 --> 00:23:16,030
JavaScript already has a huge service area
if you want to keep adding more stuff to it,

217
00:23:16,030 --> 00:23:20,190
then we have to remove something, because
otherwise it will just keep growing and our

218
00:23:20,190 --> 00:23:29,340
industry will run out of head space. Or whatever.
But this is already being done through linters,

219
00:23:29,340 --> 00:23:37,860
strict mode, VMs only optimize certain patterns.
So, the next thing I want to work on is basically

220
00:23:37,860 --> 00:23:44,380
just formalizing this step of the process.
How do we remove features from existing language.

221
00:23:44,380 --> 00:23:49,490
I mean they'll never be removed from the web,
because you can't remove things from the web,

222
00:23:49,490 --> 00:23:54,530
but it can be removed from our industry's
mental service area.

223
00:23:54,530 --> 00:24:03,020
So, let's put JS on a diet. Use poly fills
instead of libraries, write explicit and repetitive

224
00:24:03,020 --> 00:24:10,200
code, only abstract to actually solve buttings,
not because it looks better. And rethink the

