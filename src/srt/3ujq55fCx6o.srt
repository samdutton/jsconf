1
00:00:15,269 --> 00:00:17,789

so I'll be completely level with you

2
00:00:17,789 --> 00:00:20,520
until two days ago I didn't have a talk

3
00:00:20,520 --> 00:00:24,869
and so I saw my slot in the schedule and

4
00:00:24,869 --> 00:00:32,099
what I had was not working a plan B so I

5
00:00:32,099 --> 00:00:34,739
had a plan B which was I'll show you

6
00:00:34,739 --> 00:00:38,910
this slide right I'll dim the lights if

7
00:00:38,910 --> 00:00:40,980
possible in this case probably

8
00:00:40,980 --> 00:00:51,700
compromised and I'll play this music

9
00:00:51,710 --> 00:00:57,690
I'll wait five minutes and everyone will

10
00:00:57,690 --> 00:01:03,329
be out so fortunately I geared up a bit

11
00:01:03,329 --> 00:01:05,899
and I can now switch back to plan a

12
00:01:05,899 --> 00:01:10,290
which is a talk about I guess functional

13
00:01:10,290 --> 00:01:16,740
programming so when you talk with people

14
00:01:16,740 --> 00:01:19,609
about what functional programming is

15
00:01:19,609 --> 00:01:22,679
it's actually remarkably vague everyone

16
00:01:22,679 --> 00:01:25,200
knows what they mean but it's really

17
00:01:25,200 --> 00:01:27,299
hard to put a deficient definition on it

18
00:01:27,299 --> 00:01:32,759
and actually I met the organizer of the

19
00:01:32,759 --> 00:01:34,799
functional programming meet up in Berlin

20
00:01:34,799 --> 00:01:37,740
at a party on Friday and she said

21
00:01:37,740 --> 00:01:39,240
ourselves they had a whole meet up on

22
00:01:39,240 --> 00:01:42,450
that very subject and basically the best

23
00:01:42,450 --> 00:01:44,969
it could come up with was well as much

24
00:01:44,969 --> 00:01:52,560
as possible like Haskell so yeah so so

25
00:01:52,560 --> 00:01:56,490
what what you could say is that well

26
00:01:56,490 --> 00:01:58,889
it's related to lambda calculus in a way

27
00:01:58,889 --> 00:02:02,069
lambda calculus was invented by Alonzo

28
00:02:02,069 --> 00:02:04,950
Church at the same time as during was

29
00:02:04,950 --> 00:02:06,979
coming out with this during machine and

30
00:02:06,979 --> 00:02:09,750
lambda calculus just like the Turing

31
00:02:09,750 --> 00:02:12,450
machine can be used to describe pretty

32
00:02:12,450 --> 00:02:16,380
much any program we can run so the

33
00:02:16,380 --> 00:02:18,720
difference I guess with functional

34
00:02:18,720 --> 00:02:22,170
programming is that the syntax is

35
00:02:22,170 --> 00:02:24,960
actually closer to what to the notation

36
00:02:24,960 --> 00:02:27,570
that church came out came out with

37
00:02:27,570 --> 00:02:29,040
originally

38
00:02:29,040 --> 00:02:32,489
and it's not a it's not an accident that

39
00:02:32,489 --> 00:02:34,909
this is the symbol for closure

40
00:02:34,909 --> 00:02:47,579
representing a lambda okay so what is it

41
00:02:47,579 --> 00:02:51,870
practically well it's all functions

42
00:02:51,870 --> 00:02:53,549
functions all the way down so your

43
00:02:53,549 --> 00:02:56,069
program is running a function which runs

44
00:02:56,069 --> 00:03:00,810
functions and that's it there is no

45
00:03:00,810 --> 00:03:04,409
global states or no global variables so

46
00:03:04,409 --> 00:03:06,900
obviously like all good JavaScript

47
00:03:06,900 --> 00:03:08,730
programmers you'll northern say are we

48
00:03:08,730 --> 00:03:10,590
don't use global variables that's very

49
00:03:10,590 --> 00:03:14,280
bad except we kind of do because when we

50
00:03:14,280 --> 00:03:16,709
use console or we use documents or we

51
00:03:16,709 --> 00:03:18,659
use window we're obviously using

52
00:03:18,659 --> 00:03:21,030
something that is not explicitly in the

53
00:03:21,030 --> 00:03:26,639
context of our function really no side

54
00:03:26,639 --> 00:03:29,510
effects so basically you're not

55
00:03:29,510 --> 00:03:33,870
technically allowed to do a console log

56
00:03:33,870 --> 00:03:35,370
in your function because that's like

57
00:03:35,370 --> 00:03:38,250
kind of veering away from the like

58
00:03:38,250 --> 00:03:40,530
straight path from input to output

59
00:03:40,530 --> 00:03:42,359
switch your function is supposed to

60
00:03:42,359 --> 00:03:48,750
follow and no destructive updates which

61
00:03:48,750 --> 00:03:50,489
may prove to be the hardest thing to

62
00:03:50,489 --> 00:03:54,060
work with because it means you cannot

63
00:03:54,060 --> 00:03:59,430
change any variables I guess you can

64
00:03:59,430 --> 00:04:03,979
return something different but yep

65
00:04:03,979 --> 00:04:07,760
basically that's it so who can point out

66
00:04:07,760 --> 00:04:12,560
what's not functional about this example

67
00:04:12,560 --> 00:04:24,659
not good enough yes so the side effects

68
00:04:24,659 --> 00:04:26,639
console.log is obviously wrong but also

69
00:04:26,639 --> 00:04:29,340
the facts that in the say gender

70
00:04:29,340 --> 00:04:34,710
function you're using data that comes

71
00:04:34,710 --> 00:04:38,250
from outside your function so you

72
00:04:38,250 --> 00:04:39,979
shouldn't actually be using that

73
00:04:39,979 --> 00:04:42,210
obviously this is not

74
00:04:42,210 --> 00:04:47,190
a functional programming so some

75
00:04:47,190 --> 00:04:53,130
patterns so actually javascript is

76
00:04:53,130 --> 00:04:56,449
pretty good because it's got obviously

77
00:04:56,449 --> 00:04:58,650
functions as first orders the

78
00:04:58,650 --> 00:05:01,410
first-class citizens and so you can

79
00:05:01,410 --> 00:05:02,699
create them and pass them around and

80
00:05:02,699 --> 00:05:05,190
everything so everyone uses higher-order

81
00:05:05,190 --> 00:05:06,930
functions whether they realize it or not

82
00:05:06,930 --> 00:05:09,780
one form of higher order function is

83
00:05:09,780 --> 00:05:14,900
taking a function as arguments and

84
00:05:14,900 --> 00:05:21,539
obviously we'll do that callbacks of any

85
00:05:21,539 --> 00:05:24,300
kind event handlers this is all taking

86
00:05:24,300 --> 00:05:29,280
functions as arguments then there's

87
00:05:29,280 --> 00:05:32,789
returning functions so we have functions

88
00:05:32,789 --> 00:05:35,340
that we turn functions and actually if

89
00:05:35,340 --> 00:05:37,020
you've been doing JavaScript for a

90
00:05:37,020 --> 00:05:39,060
little bit you're probably doing that as

91
00:05:39,060 --> 00:05:44,069
well this is like loosely based on a

92
00:05:44,069 --> 00:05:47,940
project I worked on and like one of the

93
00:05:47,940 --> 00:05:50,430
things we did was define like a more

94
00:05:50,430 --> 00:05:54,990
general validate function which would

95
00:05:54,990 --> 00:05:59,190
then call which would then get passed in

96
00:05:59,190 --> 00:06:01,500
the actual thing to validate actual

97
00:06:01,500 --> 00:06:06,870
function to validate and and so you

98
00:06:06,870 --> 00:06:08,759
could define more more precise

99
00:06:08,759 --> 00:06:11,990
validation functions by passing in

100
00:06:11,990 --> 00:06:14,190
functions that will would actually check

101
00:06:14,190 --> 00:06:18,479
your values later on so you can see

102
00:06:18,479 --> 00:06:25,600
required fields gets a function in and

103
00:06:25,610 --> 00:06:30,599
sorry I'm a bit confused and returns

104
00:06:30,599 --> 00:06:34,020
whether there's an error or not so that

105
00:06:34,020 --> 00:06:38,130
X that's an example of validates outputs

106
00:06:38,130 --> 00:06:39,719
a function which you can then use later

107
00:06:39,719 --> 00:06:46,590
on so utilities things you'll use quite

108
00:06:46,590 --> 00:06:49,469
a lot when you're doing functional

109
00:06:49,469 --> 00:06:54,750
programming map so when you do map on a

110
00:06:54,750 --> 00:06:55,860
collection or

111
00:06:55,860 --> 00:07:00,960
filter on a collection or reduce on the

112
00:07:00,960 --> 00:07:05,669
collection so out of the box javascript

113
00:07:05,669 --> 00:07:08,340
doesn't have anything very functional as

114
00:07:08,340 --> 00:07:10,110
such because what you've got is

115
00:07:10,110 --> 00:07:13,319
basically something defined on the air a

116
00:07:13,319 --> 00:07:16,770
prototype but there are libraries out

117
00:07:16,770 --> 00:07:18,629
there which will express things in a

118
00:07:18,629 --> 00:07:20,909
more functional way like underscore.js

119
00:07:20,909 --> 00:07:24,719
or slightly more esoteric ones like

120
00:07:24,719 --> 00:07:29,849
dysfunctional one I found so basically

121
00:07:29,849 --> 00:07:32,009
you can start throwing out some some

122
00:07:32,009 --> 00:07:34,110
things you may use on a daily basis out

123
00:07:34,110 --> 00:07:35,879
of the window like for instance the for

124
00:07:35,879 --> 00:07:42,930
loop so for is actually it's not very

125
00:07:42,930 --> 00:07:45,750
functional and it's also fairly clumsy

126
00:07:45,750 --> 00:07:49,680
because it actually combines three

127
00:07:49,680 --> 00:07:53,250
things so you could use a for loop to go

128
00:07:53,250 --> 00:07:55,919
over a collection and that's basically

129
00:07:55,919 --> 00:07:59,310
the same thing as wingham up or you

130
00:07:59,310 --> 00:08:02,789
could do a for loop to basically only

131
00:08:02,789 --> 00:08:06,150
change certain elements as basically

132
00:08:06,150 --> 00:08:10,740
like doing a filter and then you might

133
00:08:10,740 --> 00:08:13,680
want to calculate an end results by

134
00:08:13,680 --> 00:08:16,050
going over collection and that's just

135
00:08:16,050 --> 00:08:19,639
like doing reduce or left fold like the

136
00:08:19,639 --> 00:08:24,300
functional types call it so yeah the for

137
00:08:24,300 --> 00:08:27,449
loop is is is already pretty ugly to

138
00:08:27,449 --> 00:08:29,430
start with because it's like straight

139
00:08:29,430 --> 00:08:34,529
out of C but it's a it's also not super

140
00:08:34,529 --> 00:08:37,529
good functionally so we're ramping up

141
00:08:37,529 --> 00:08:39,779
slowly the difficulty started with very

142
00:08:39,779 --> 00:08:43,640
easy and going a little bit harder so

143
00:08:43,640 --> 00:08:47,370
currying so currying originally in

144
00:08:47,370 --> 00:08:50,160
haskell is like the concept of you take

145
00:08:50,160 --> 00:08:51,930
a function with several parameters and

146
00:08:51,930 --> 00:08:53,899
you can kind of decompose it in

147
00:08:53,899 --> 00:08:56,970
functions that take one parameter each

148
00:08:56,970 --> 00:09:00,060
so you run your particular function with

149
00:09:00,060 --> 00:09:01,860
the first parameter and then you had

150
00:09:01,860 --> 00:09:03,540
your second parameter and every time you

151
00:09:03,540 --> 00:09:05,699
output a function until you have the

152
00:09:05,699 --> 00:09:07,260
function you actually basically want to

153
00:09:07,260 --> 00:09:09,340
use

154
00:09:09,340 --> 00:09:16,240
and well toy example here so yes I see

155
00:09:16,240 --> 00:09:20,920
actually I have a bug already but so say

156
00:09:20,920 --> 00:09:23,080
you have a very simple function called

157
00:09:23,080 --> 00:09:26,410
phone listing if you try to run that

158
00:09:26,410 --> 00:09:28,570
with just one parameter you'll get

159
00:09:28,570 --> 00:09:31,330
undefined in Haskell this would actually

160
00:09:31,330 --> 00:09:34,240
work you can just take a function pass

161
00:09:34,240 --> 00:09:35,830
it one parameter and it will know you

162
00:09:35,830 --> 00:09:37,780
want to function back to to actually

163
00:09:37,780 --> 00:09:42,280
continue working you can kind of fake

164
00:09:42,280 --> 00:09:44,410
this in JavaScript as well by for

165
00:09:44,410 --> 00:09:47,490
instance defining a partial function

166
00:09:47,490 --> 00:09:50,830
which will take your original function

167
00:09:50,830 --> 00:09:52,990
and any any number of arguments you want

168
00:09:52,990 --> 00:09:55,300
to pass it and with a little bit of

169
00:09:55,300 --> 00:09:59,620
magic it will return a function that has

170
00:09:59,620 --> 00:10:01,870
already applied those first parameters

171
00:10:01,870 --> 00:10:05,550
so again to go back to the toy example

172
00:10:05,550 --> 00:10:08,860
say that some actually changes this

173
00:10:08,860 --> 00:10:11,590
phone every month you can decide that

174
00:10:11,590 --> 00:10:14,050
basically you want a function for just

175
00:10:14,050 --> 00:10:18,490
some Sam's phone number I see actually

176
00:10:18,490 --> 00:10:21,480
my original example involved girlfriends

177
00:10:21,480 --> 00:10:24,610
some girlfriends so I know it's some

178
00:10:24,610 --> 00:10:28,510
Sam's phone number and you can define a

179
00:10:28,510 --> 00:10:30,400
function for just Sam's phone numbers

180
00:10:30,400 --> 00:10:34,630
and just use that does that make any

181
00:10:34,630 --> 00:10:37,720
sense to you yeps not too not too hard I

182
00:10:37,720 --> 00:10:43,810
guess okay monads so Mona's even that is

183
00:10:43,810 --> 00:10:47,740
one of them words that make people's

184
00:10:47,740 --> 00:10:49,960
brain dribble out of their ears just by

185
00:10:49,960 --> 00:10:54,700
hearing it so actually wants to talk

186
00:10:54,700 --> 00:10:58,090
about yogurt so I'll tell you a story

187
00:10:58,090 --> 00:11:02,440
about yogurt so where I work we have

188
00:11:02,440 --> 00:11:04,360
this cafeteria or we can have free food

189
00:11:04,360 --> 00:11:08,320
and there's a big fridge where you have

190
00:11:08,320 --> 00:11:10,500
smoothies and yogurts and drinks and

191
00:11:10,500 --> 00:11:13,030
there's this particular type of yogurt

192
00:11:13,030 --> 00:11:15,970
which you see here the brand name hi

193
00:11:15,970 --> 00:11:19,210
hidden for you which actually is like

194
00:11:19,210 --> 00:11:21,490
the most unhealthy yogurt you've ever

195
00:11:21,490 --> 00:11:23,350
seen it's like

196
00:11:23,350 --> 00:11:24,970
beef flavored and it has bits of

197
00:11:24,970 --> 00:11:29,200
biscuits in it and and there's a very

198
00:11:29,200 --> 00:11:31,480
limited supply so it basically they're

199
00:11:31,480 --> 00:11:35,380
immediately gone and so right I'll do

200
00:11:35,380 --> 00:11:37,390
the multiple choice thing now so we

201
00:11:37,390 --> 00:11:39,040
remember those books you used to have as

202
00:11:39,040 --> 00:11:41,920
a child where they said like right if

203
00:11:41,920 --> 00:11:44,800
you want to find the Dragon go to page

204
00:11:44,800 --> 00:11:47,950
55 or if you want to flee and run away

205
00:11:47,950 --> 00:11:50,050
very very quickly then you go to page

206
00:11:50,050 --> 00:11:55,350
102 well well we can skip the Monad or

207
00:11:55,350 --> 00:11:58,120
we can do the mo nuts it's up to you so

208
00:11:58,120 --> 00:12:04,090
if people who want to do the nomads okay

209
00:12:04,090 --> 00:12:10,600
let's do the minutes so right yogurt so

210
00:12:10,600 --> 00:12:15,910
um basically the thing with the whole

211
00:12:15,910 --> 00:12:20,010
story around yogurt and mo nuts is that

212
00:12:20,010 --> 00:12:22,690
things are named pretty badly so it's

213
00:12:22,690 --> 00:12:24,280
normal that people don't understand

214
00:12:24,280 --> 00:12:25,800
things the first time around because

215
00:12:25,800 --> 00:12:29,080
it's really not that well explained I

216
00:12:29,080 --> 00:12:34,000
think so basically with with monads you

217
00:12:34,000 --> 00:12:37,270
create monadic values what is a monadic

218
00:12:37,270 --> 00:12:43,570
value it's um is basically creating a

219
00:12:43,570 --> 00:12:46,300
function which will enclose over a state

220
00:12:46,300 --> 00:12:49,660
or over a value and that's it it returns

221
00:12:49,660 --> 00:12:52,120
that function that's when you call it it

222
00:12:52,120 --> 00:12:54,520
will return a value this is actually the

223
00:12:54,520 --> 00:12:56,800
simplest function at the simplest Mona

224
00:12:56,800 --> 00:12:59,470
you can have magnetic values or you can

225
00:12:59,470 --> 00:13:02,980
have where it will just return the value

226
00:13:02,980 --> 00:13:05,350
you just bust in so you create a

227
00:13:05,350 --> 00:13:08,500
function which when cold will return the

228
00:13:08,500 --> 00:13:11,530
value that was original passed in so

229
00:13:11,530 --> 00:13:15,010
it's not that complicated and you can

230
00:13:15,010 --> 00:13:17,290
make it returned a structure that

231
00:13:17,290 --> 00:13:19,600
contains a little bit more like for

232
00:13:19,600 --> 00:13:21,640
instance now the states which is the

233
00:13:21,640 --> 00:13:27,079
number of our yogurt very important

234
00:13:27,089 --> 00:13:30,660
so 2x to illustrate so we make a model

235
00:13:30,660 --> 00:13:33,480
melodic value containing the value Joe

236
00:13:33,480 --> 00:13:35,879
Joe is in the kitchen watching the

237
00:13:35,879 --> 00:13:40,439
yogurt and you pass in the number of

238
00:13:40,439 --> 00:13:44,939
yogurt you have originally 10 so to go

239
00:13:44,939 --> 00:13:49,709
back here so you passed in Joe in the

240
00:13:49,709 --> 00:13:52,559
value and you passed it then in the

241
00:13:52,559 --> 00:13:56,430
states so what you get is this so so far

242
00:13:56,430 --> 00:14:02,129
so good right yep cool so now you want

243
00:14:02,129 --> 00:14:05,189
to start making the story evolved as

244
00:14:05,189 --> 00:14:08,040
such because Joe and the yogurt you know

245
00:14:08,040 --> 00:14:10,589
it's not it's not moving much so what

246
00:14:10,589 --> 00:14:12,449
you're going to do is to bind that

247
00:14:12,449 --> 00:14:15,470
magnetic value to a function and that

248
00:14:15,470 --> 00:14:18,680
bind action will itself return a

249
00:14:18,680 --> 00:14:22,019
magnetic value again so you can kind of

250
00:14:22,019 --> 00:14:27,059
continue chaining the story so it will

251
00:14:27,059 --> 00:14:30,809
it will also apply the function to the

252
00:14:30,809 --> 00:14:34,740
original value you passed in as you see

253
00:14:34,740 --> 00:14:39,870
at the end basically you pass the

254
00:14:39,870 --> 00:14:42,300
passing the original function and it

255
00:14:42,300 --> 00:14:44,459
will apply on the original value so

256
00:14:44,459 --> 00:14:46,769
return again a function doing something

257
00:14:46,769 --> 00:14:51,980
with state does it kind of make sense or

258
00:14:51,980 --> 00:14:59,370
do you want to yep so ok Tom comes into

259
00:14:59,370 --> 00:15:03,959
the kitchen I want to add a person so in

260
00:15:03,959 --> 00:15:06,509
your normal everyday kind of you know

261
00:15:06,509 --> 00:15:07,949
scripting you would probably do the

262
00:15:07,949 --> 00:15:11,339
function above there which is saying

263
00:15:11,339 --> 00:15:13,740
well whatever we have plus the new

264
00:15:13,740 --> 00:15:18,480
person well here's the monadic way to do

265
00:15:18,480 --> 00:15:20,579
it so you pass in the magnetic value and

266
00:15:20,579 --> 00:15:22,410
a new person that just walked into the

267
00:15:22,410 --> 00:15:29,610
room and you do a bind again returning a

268
00:15:29,610 --> 00:15:32,100
magnetic value adding the new person

269
00:15:32,100 --> 00:15:36,690
there

270
00:15:36,700 --> 00:15:42,200
so this is basically what happens you do

271
00:15:42,200 --> 00:15:45,410
at person with the magnetic value and

272
00:15:45,410 --> 00:15:47,480
Tom who just walked into the room with

273
00:15:47,480 --> 00:15:50,060
Joe and now with Joe and Tom and ten

274
00:15:50,060 --> 00:15:58,550
yogurts in the room but not much yogurt

275
00:15:58,550 --> 00:16:00,500
is getting eaten so far which is a good

276
00:16:00,500 --> 00:16:05,330
thing and so you want to start working

277
00:16:05,330 --> 00:16:08,480
on that act on the state's part of your

278
00:16:08,480 --> 00:16:11,120
of your equation so you're going to

279
00:16:11,120 --> 00:16:16,070
define take yogurt and take yogurt will

280
00:16:16,070 --> 00:16:18,410
do a bind of the magnetic value and a

281
00:16:18,410 --> 00:16:21,320
function which will again return a state

282
00:16:21,320 --> 00:16:24,340
function a function with sorry states as

283
00:16:24,340 --> 00:16:29,180
s-parameter and will act on on the

284
00:16:29,180 --> 00:16:32,270
states so it will take one yogurt out

285
00:16:32,270 --> 00:16:37,010
state minus one and so if we run the

286
00:16:37,010 --> 00:16:39,650
take yogurt on the original states with

287
00:16:39,650 --> 00:16:43,250
Joe then we have value Joe and state is

288
00:16:43,250 --> 00:16:48,590
nine

289
00:16:48,600 --> 00:16:56,590
okay so far still so so basically in

290
00:16:56,590 --> 00:16:59,650
this way we can construct a long story a

291
00:16:59,650 --> 00:17:04,330
chain of events which will be applied

292
00:17:04,330 --> 00:17:07,720
one by one and it will be applied in

293
00:17:07,720 --> 00:17:11,950
order and you can construct a coherent

294
00:17:11,950 --> 00:17:14,650
story with like like you see you can see

295
00:17:14,650 --> 00:17:18,550
a state the ten yogurt and it will lead

296
00:17:18,550 --> 00:17:21,959
to a coherent results without ever using

297
00:17:21,959 --> 00:17:26,350
like variables that you change so it's

298
00:17:26,350 --> 00:17:28,480
actually really a purely functional way

299
00:17:28,480 --> 00:17:31,270
to do what you've been doing what I've

300
00:17:31,270 --> 00:17:33,130
been doing as well with objects and

301
00:17:33,130 --> 00:17:37,990
variables but just using pure functions

302
00:17:37,990 --> 00:17:41,770
so that is that is what what yogurt is

303
00:17:41,770 --> 00:17:45,520
about really and I really really

304
00:17:45,520 --> 00:17:48,190
recommend I mean I recommend looking

305
00:17:48,190 --> 00:17:50,680
into it if you're interested and there

306
00:17:50,680 --> 00:17:52,600
are all kinds of monads the one I talked

307
00:17:52,600 --> 00:17:55,630
about was a statement but i really

308
00:17:55,630 --> 00:17:57,760
recommend this presentation which is

309
00:17:57,760 --> 00:18:01,120
like excellence and explains it with

310
00:18:01,120 --> 00:18:03,810
closure but in stories so it's not like

311
00:18:03,810 --> 00:18:06,070
completely hardcore it's actually really

312
00:18:06,070 --> 00:18:12,370
well well explained so one thing that is

313
00:18:12,370 --> 00:18:15,160
often associated with functional

314
00:18:15,160 --> 00:18:18,430
languages is also lazy evaluation so

315
00:18:18,430 --> 00:18:21,340
lazy evaluation you think of an infinite

316
00:18:21,340 --> 00:18:26,560
kind of how can i say i guess stream GS

317
00:18:26,560 --> 00:18:29,710
has been talked about here stream GS

318
00:18:29,710 --> 00:18:33,190
allows you to to for instance define the

319
00:18:33,190 --> 00:18:35,410
range of natural numbers and work on

320
00:18:35,410 --> 00:18:38,640
them and not calculate them right away

321
00:18:38,640 --> 00:18:42,070
now I put a question mark there because

322
00:18:42,070 --> 00:18:46,900
I'm not sure lazy and functional I think

323
00:18:46,900 --> 00:18:48,760
they are they may be orthogonal because

324
00:18:48,760 --> 00:18:51,250
you have eager and lazy functional

325
00:18:51,250 --> 00:18:52,990
languages and eager and lazy non

326
00:18:52,990 --> 00:18:55,600
functional languages but it's definitely

327
00:18:55,600 --> 00:18:59,350
an interesting thing to look into so

328
00:18:59,350 --> 00:19:01,900
what's good about

329
00:19:01,900 --> 00:19:07,000
programming it's easier to debug because

330
00:19:07,000 --> 00:19:09,400
when you have a stack trace you find

331
00:19:09,400 --> 00:19:12,970
your function you know you find out what

332
00:19:12,970 --> 00:19:14,770
the input and the output is and you can

333
00:19:14,770 --> 00:19:17,290
actually exactly reproduce what went on

334
00:19:17,290 --> 00:19:20,440
because there is no nothing no things

335
00:19:20,440 --> 00:19:22,270
being passed in that function or those

336
00:19:22,270 --> 00:19:23,740
things being done in that function

337
00:19:23,740 --> 00:19:26,230
outside of what you gave it so inputs

338
00:19:26,230 --> 00:19:28,150
and outputs and then the point in the

339
00:19:28,150 --> 00:19:32,560
stack is all you need it's easier to

340
00:19:32,560 --> 00:19:35,590
test because you can again account on

341
00:19:35,590 --> 00:19:37,480
the fact that all you have to test is

342
00:19:37,480 --> 00:19:40,540
input and output so you put your input

343
00:19:40,540 --> 00:19:42,640
in a function it gives you an output end

344
00:19:42,640 --> 00:19:51,820
of story that's what you test so it's

345
00:19:51,820 --> 00:19:55,300
also easier to refactor because again

346
00:19:55,300 --> 00:19:57,730
like what matters is the signature of

347
00:19:57,730 --> 00:20:01,600
your function so if you don't change the

348
00:20:01,600 --> 00:20:03,580
signature you can basically watch

349
00:20:03,580 --> 00:20:05,830
butcher the internals as much as you

350
00:20:05,830 --> 00:20:09,520
want because the outside world will only

351
00:20:09,520 --> 00:20:16,090
see the signature and some people say

352
00:20:16,090 --> 00:20:18,580
again that's it helps for

353
00:20:18,580 --> 00:20:21,550
parallelization now I think what's more

354
00:20:21,550 --> 00:20:24,760
important for parallelization is using

355
00:20:24,760 --> 00:20:26,710
the right concurrency primitives so I'm

356
00:20:26,710 --> 00:20:28,410
not one hundred percent sure that's

357
00:20:28,410 --> 00:20:32,110
parallelization functional programming

358
00:20:32,110 --> 00:20:37,360
is like all you need but it may help

359
00:20:37,360 --> 00:20:39,130
because at least you know there's no

360
00:20:39,130 --> 00:20:41,560
Global's shared state there that you

361
00:20:41,560 --> 00:20:43,930
should like that you will have problems

362
00:20:43,930 --> 00:20:49,840
with like Heisenberg's or whatever so

363
00:20:49,840 --> 00:20:52,420
it's functional programming I'm glad

364
00:20:52,420 --> 00:20:55,710
it's stopping raining or no it doesn't

365
00:20:55,710 --> 00:21:01,210
so it's functional programming heart so

366
00:21:01,210 --> 00:21:04,180
I feel it is and actually I would

367
00:21:04,180 --> 00:21:08,110
recommend you to try function purely

368
00:21:08,110 --> 00:21:10,180
functional languages because if you use

369
00:21:10,180 --> 00:21:13,210
just JavaScript or or whatever you're

370
00:21:13,210 --> 00:21:15,230
used to use using

371
00:21:15,230 --> 00:21:17,929
it may not force you to bend your minds

372
00:21:17,929 --> 00:21:21,230
in the ways that will help you do

373
00:21:21,230 --> 00:21:23,179
functional programming so I would

374
00:21:23,179 --> 00:21:26,450
encourage you to dip into a closure or

375
00:21:26,450 --> 00:21:28,940
even better has skill I've started to

376
00:21:28,940 --> 00:21:32,480
like look into Haskell because people

377
00:21:32,480 --> 00:21:35,660
who who are much smarter than me insure

378
00:21:35,660 --> 00:21:37,970
me that this is actually the only way to

379
00:21:37,970 --> 00:21:41,210
really you know take take on the right

380
00:21:41,210 --> 00:21:46,440
the right kind of patterns in your head

381
00:21:46,450 --> 00:21:50,630
so okay so I've been a while I've been

382
00:21:50,630 --> 00:21:53,780
around for a while in programming so I'm

383
00:21:53,780 --> 00:21:56,210
going to do a little rant a little bit

384
00:21:56,210 --> 00:22:03,080
is um ok functional programming is not

385
00:22:03,080 --> 00:22:08,809
new right I mean there was list in the

386
00:22:08,809 --> 00:22:12,140
70s and back then that was the business

387
00:22:12,140 --> 00:22:16,210
and the best thing ever invented and

388
00:22:16,210 --> 00:22:18,860
then object-oriented programming came

389
00:22:18,860 --> 00:22:22,040
along and suddenly that was all the hype

390
00:22:22,040 --> 00:22:24,169
everyone wanted to do object oriented

391
00:22:24,169 --> 00:22:31,400
and java and everything and so you kind

392
00:22:31,400 --> 00:22:37,430
of get what i mean right like

393
00:22:37,440 --> 00:22:39,519
programmers are like this right

394
00:22:39,519 --> 00:22:42,809
programmers are kids in a candy store

395
00:22:42,809 --> 00:22:46,029
basically they get a bit bored you know

396
00:22:46,029 --> 00:22:48,399
with the daily routine and and so they

397
00:22:48,399 --> 00:22:50,169
spot something new and shiny and they

398
00:22:50,169 --> 00:22:55,209
basically basically run towards that new

399
00:22:55,209 --> 00:23:00,539
thing and which is very understandable

400
00:23:00,539 --> 00:23:04,649
but the core of the business is that

401
00:23:04,649 --> 00:23:08,289
software is hard software of any size is

402
00:23:08,289 --> 00:23:11,440
like hard you'll have human error you'll

403
00:23:11,440 --> 00:23:14,709
have problems you'll have you know

404
00:23:14,709 --> 00:23:17,889
working with different people and what

405
00:23:17,889 --> 00:23:22,059
you need is is what you need is taking a

406
00:23:22,059 --> 00:23:24,190
step back and thinking you whatever

407
00:23:24,190 --> 00:23:27,129
paradigm you use if you don't apply it

408
00:23:27,129 --> 00:23:31,149
well if you make mistakes and if you if

409
00:23:31,149 --> 00:23:35,259
you don't double check yourself then I'm

410
00:23:35,259 --> 00:23:38,409
afraid functional programming want to

411
00:23:38,409 --> 00:23:41,529
help you and so so I'm always a little

412
00:23:41,529 --> 00:23:44,079
bit skeptical about the new best thing

413
00:23:44,079 --> 00:23:49,269
that came along however it might help in

414
00:23:49,269 --> 00:23:52,570
some ways and to be honest I'm in the

415
00:23:52,570 --> 00:23:55,869
same situation that's basically i'm also

416
00:23:55,869 --> 00:23:58,209
always interested in what's new and

417
00:23:58,209 --> 00:24:00,570
shiny and so I kind of gets the

418
00:24:00,570 --> 00:24:03,159
excitement and I can also kind of gets

419
00:24:03,159 --> 00:24:05,679
that there may be advantages when

420
00:24:05,679 --> 00:24:08,289
applied really well that make functional

421
00:24:08,289 --> 00:24:14,799
programming a really good thing to do so

422
00:24:14,799 --> 00:24:26,580
thank you for attention

423
00:24:26,590 --> 00:24:38,660
questions questions so if I understand

424
00:24:38,660 --> 00:24:39,680
stuff like the way the monads are

425
00:24:39,680 --> 00:24:41,510
implemented like in your example of how

426
00:24:41,510 --> 00:24:42,770
you do it in JavaScript it seems like

427
00:24:42,770 --> 00:24:44,090
that in that particular you're always

428
00:24:44,090 --> 00:24:46,070
returning new objects right so it's it's

429
00:24:46,070 --> 00:24:48,560
creating new objects every time you

430
00:24:48,560 --> 00:24:50,390
return from one of those state mutations

431
00:24:50,390 --> 00:24:52,880
is that right yeah i guess the essence

432
00:24:52,880 --> 00:24:54,530
the essence of it is that you don't

433
00:24:54,530 --> 00:24:58,520
return anything until you actually run

434
00:24:58,520 --> 00:25:01,280
the function I see so so there it only

435
00:25:01,280 --> 00:25:03,410
ever has one object allocated and never

436
00:25:03,410 --> 00:25:07,160
allocates more uh well I guess it goes

437
00:25:07,160 --> 00:25:09,080
kind of true the threat but eventually

438
00:25:09,080 --> 00:25:12,260
yeah it outputs one objects nothing okay

439
00:25:12,260 --> 00:25:14,480
yeah I guess my larger question is you

440
00:25:14,480 --> 00:25:15,860
know I seem functional languages like

441
00:25:15,860 --> 00:25:17,150
Haskell or closure or like really

442
00:25:17,150 --> 00:25:18,950
optimized for doing these kinds of

443
00:25:18,950 --> 00:25:21,410
things whereas I just seem javascript

444
00:25:21,410 --> 00:25:22,760
isn't necessarily optimized for doing so

445
00:25:22,760 --> 00:25:23,930
do you know like the kinds of parents

446
00:25:23,930 --> 00:25:25,340
you showed are they typically relatively

447
00:25:25,340 --> 00:25:27,350
efficient in JavaScript or I mean

448
00:25:27,350 --> 00:25:28,880
obviously things like map and whatever

449
00:25:28,880 --> 00:25:30,890
are fine but like monads are these more

450
00:25:30,890 --> 00:25:34,070
advanced things yeah so I think like

451
00:25:34,070 --> 00:25:36,430
what I should was obviously a

452
00:25:36,430 --> 00:25:38,210
handcrafted thing and there are

453
00:25:38,210 --> 00:25:40,130
libraries out there that allow you to

454
00:25:40,130 --> 00:25:43,580
have something that syntactic sugar and

455
00:25:43,580 --> 00:25:47,330
also I expect that if javascript evolves

456
00:25:47,330 --> 00:25:49,310
in the direction of being more

457
00:25:49,310 --> 00:25:52,100
functional you might have more inbuilt

458
00:25:52,100 --> 00:25:54,530
syntactic servic sugars like a better

459
00:25:54,530 --> 00:25:56,900
syntax for lambdas for instance so for

460
00:25:56,900 --> 00:25:59,170
anonymous functions then you have now

461
00:25:59,170 --> 00:26:02,930
but but but yes oh look into libraries

462
00:26:02,930 --> 00:26:05,800
if you want to apply such things I think

463
00:26:05,800 --> 00:26:09,260
so I like functional programming and I'm

464
00:26:09,260 --> 00:26:11,360
happy you're talking about it but it's

465
00:26:11,360 --> 00:26:13,790
actually a little slower then you if you

466
00:26:13,790 --> 00:26:15,560
just do mutations and mutated everything

467
00:26:15,560 --> 00:26:19,250
around and do you have any strategy how

468
00:26:19,250 --> 00:26:21,380
we can make JavaScript engines optimized

469
00:26:21,380 --> 00:26:24,470
for functional well i would i would

470
00:26:24,470 --> 00:26:27,740
recommend reading purely functional data

471
00:26:27,740 --> 00:26:31,840
structures like the

472
00:26:31,840 --> 00:26:35,169
the really functional languages they so

473
00:26:35,169 --> 00:26:38,169
like you say you never mutate anything

474
00:26:38,169 --> 00:26:39,940
so basically you dope legates any data

475
00:26:39,940 --> 00:26:42,250
structures your bass around so that may

476
00:26:42,250 --> 00:26:45,039
have a cost in memory so what the

477
00:26:45,039 --> 00:26:46,720
functional languages do is like they

478
00:26:46,720 --> 00:26:48,880
share these as much as possible so if

479
00:26:48,880 --> 00:26:50,890
you grow an array they'll reuse the area

480
00:26:50,890 --> 00:26:56,810
that is already there and then sorry I

481
00:26:56,820 --> 00:26:59,590
does it's already yeah yes sir so I'm

482
00:26:59,590 --> 00:27:03,010
not that well informed that's not yeah

483
00:27:03,010 --> 00:27:05,500
exactly well again like you one would

484
00:27:05,500 --> 00:27:07,419
hope that if it goes more in that

485
00:27:07,419 --> 00:27:09,399
direction that people would start

486
00:27:09,399 --> 00:27:14,559
hacking on on that as well yeah okay

