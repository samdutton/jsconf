1
00:00:00,000 --> 00:00:03,090

hey so thank you for having me the name

2
00:00:03,090 --> 00:00:06,330
of this talk is code without keywords I

3
00:00:06,330 --> 00:00:09,230
think this is like my third presentation

4
00:00:09,230 --> 00:00:13,259
ajla a little bit about myself my name's

5
00:00:13,259 --> 00:00:16,800
Sam let's call me a computer scientist

6
00:00:16,800 --> 00:00:18,480
because that makes me sound way smarter

7
00:00:18,480 --> 00:00:23,130
I am I organize another meetup called

8
00:00:23,130 --> 00:00:25,439
papers we love that meets the night

9
00:00:25,439 --> 00:00:27,810
before JSL a we talk about computer

10
00:00:27,810 --> 00:00:30,539
science papers and I do front-end

11
00:00:30,539 --> 00:00:36,360
eSports stuff at Yahoo so uh you've

12
00:00:36,360 --> 00:00:39,300
you've all done javascript I assume

13
00:00:39,300 --> 00:00:42,030
you've seen the new JavaScript been

14
00:00:42,030 --> 00:00:43,860
doing JavaScript for probably about

15
00:00:43,860 --> 00:00:47,910
seven years now you know I've seen the

16
00:00:47,910 --> 00:00:50,579
number of reserved keywords kind of go

17
00:00:50,579 --> 00:00:53,520
up and down not all of these are

18
00:00:53,520 --> 00:00:55,469
currently reserved keywords in

19
00:00:55,469 --> 00:00:58,710
JavaScript but a lot of them are some of

20
00:00:58,710 --> 00:01:01,680
them are historical there are a lot of

21
00:01:01,680 --> 00:01:04,290
these aren't there they're a lot or

22
00:01:04,290 --> 00:01:06,180
they're like too many does JavaScript

23
00:01:06,180 --> 00:01:10,590
have too many keywords now okay cuz you

24
00:01:10,590 --> 00:01:12,900
know I'm like keywords new keywords

25
00:01:12,900 --> 00:01:15,000
which ones you even use people are

26
00:01:15,000 --> 00:01:17,159
talking about VAR let some people talk

27
00:01:17,159 --> 00:01:21,780
about ELPS do people use eltz okay well

28
00:01:21,780 --> 00:01:24,110
anyways I think that we can do better

29
00:01:24,110 --> 00:01:28,259
and so you know when we talk about how

30
00:01:28,259 --> 00:01:30,930
many keywords does JavaScript have we

31
00:01:30,930 --> 00:01:33,630
should talk about like why do we use

32
00:01:33,630 --> 00:01:36,680
them where do we where do they come from

33
00:01:36,680 --> 00:01:39,900
we see them in places like bar a equals

34
00:01:39,900 --> 00:01:44,880
1 let B equals hello if hello return 5

35
00:01:44,880 --> 00:01:49,110
and so this comes from something that we

36
00:01:49,110 --> 00:01:52,020
call the great divorce or I've heard

37
00:01:52,020 --> 00:01:56,790
other terms but basically JavaScript the

38
00:01:56,790 --> 00:02:00,240
designers separated statements from

39
00:02:00,240 --> 00:02:03,299
expressions so when you save our equals

40
00:02:03,299 --> 00:02:07,469
1 you then have a variable and that's an

41
00:02:07,469 --> 00:02:09,539
expression and you have a value 1 and

42
00:02:09,539 --> 00:02:12,900
that's an expression but the the

43
00:02:12,900 --> 00:02:13,920
statement VAR

44
00:02:13,920 --> 00:02:16,050
k equals one doesn't actually have a

45
00:02:16,050 --> 00:02:21,360
value that's undefined and so you know

46
00:02:21,360 --> 00:02:24,720
keywords like to appear in statements if

47
00:02:24,720 --> 00:02:27,599
you think about like if that's a keyword

48
00:02:27,599 --> 00:02:29,910
return that doesn't have a value that's

49
00:02:29,910 --> 00:02:33,989
a keyword these are all these are all

50
00:02:33,989 --> 00:02:40,019
statements so let's not use them so I'd

51
00:02:40,019 --> 00:02:43,170
like to go through kind of keyword by

52
00:02:43,170 --> 00:02:45,780
keyword and see how we can use fewer of

53
00:02:45,780 --> 00:02:49,890
them so if we start with function as you

54
00:02:49,890 --> 00:02:53,489
probably know JavaScript es6 added the

55
00:02:53,489 --> 00:02:56,580
fat arrow function so where you would

56
00:02:56,580 --> 00:02:58,769
have had to say function add three

57
00:02:58,769 --> 00:03:02,489
return X plus 3 you can just skip the

58
00:03:02,489 --> 00:03:04,440
function put the X in parenthesis and

59
00:03:04,440 --> 00:03:06,360
this is actually sort of a twofer

60
00:03:06,360 --> 00:03:11,069
because if the body of your function is

61
00:03:11,069 --> 00:03:13,410
just an expression you don't even need a

62
00:03:13,410 --> 00:03:16,709
return and so you can just have add 3x

63
00:03:16,709 --> 00:03:21,900
in parenthesis X plus 3 bar and let you

64
00:03:21,900 --> 00:03:24,120
don't need them and i'm not talking

65
00:03:24,120 --> 00:03:27,810
about const how many of you know what

66
00:03:27,810 --> 00:03:31,079
let d sugaring is how many of you have

67
00:03:31,079 --> 00:03:34,410
ever heard the term let d sugaring I see

68
00:03:34,410 --> 00:03:40,160
a hand it's a lisp thing when you let

69
00:03:40,160 --> 00:03:43,560
variables to declare them in a scope or

70
00:03:43,560 --> 00:03:45,780
in a block scope like you would with

71
00:03:45,780 --> 00:03:48,600
JavaScript that is actually implemented

72
00:03:48,600 --> 00:03:50,970
in Lisp typically as a macro because it

73
00:03:50,970 --> 00:03:52,790
is not fundamental to the language

74
00:03:52,790 --> 00:03:55,680
there's a technique where anytime you

75
00:03:55,680 --> 00:03:58,560
are declaring a variable you can

76
00:03:58,560 --> 00:04:00,600
actually just wrap that whole thing in a

77
00:04:00,600 --> 00:04:02,819
function and that is its own scope and

78
00:04:02,819 --> 00:04:06,090
so any time you'd have VAR a equals B 15

79
00:04:06,090 --> 00:04:09,359
VAR b let's see you can just have an

80
00:04:09,359 --> 00:04:12,150
anonymous function have two parameters a

81
00:04:12,150 --> 00:04:14,970
and B those are accessible and then pass

82
00:04:14,970 --> 00:04:19,229
15 and 30 you're following wrong we're

83
00:04:19,229 --> 00:04:23,190
all on the same page ok cool so a little

84
00:04:23,190 --> 00:04:25,080
bit of a tangent because i love tangents

85
00:04:25,080 --> 00:04:27,270
and i'm terrible at segways

86
00:04:27,270 --> 00:04:32,819
so yeah so this is something I sort of

87
00:04:32,819 --> 00:04:34,410
discovered by accident with a co-worker

88
00:04:34,410 --> 00:04:36,360
a few years ago and we talked about it

89
00:04:36,360 --> 00:04:39,060
and then we both kind of looked at each

90
00:04:39,060 --> 00:04:41,370
other and we joked like oh yeah you

91
00:04:41,370 --> 00:04:43,020
could do this and then I looked it up

92
00:04:43,020 --> 00:04:45,030
and you you actually can do this so this

93
00:04:45,030 --> 00:04:48,389
is a real thing where you don't need

94
00:04:48,389 --> 00:04:51,690
variables to have data structures you

95
00:04:51,690 --> 00:04:55,409
can have basically closures and so we

96
00:04:55,409 --> 00:04:58,080
can declare like a fundamental data

97
00:04:58,080 --> 00:05:00,120
structure as a pair which is actually a

98
00:05:00,120 --> 00:05:03,419
function that takes two values returns a

99
00:05:03,419 --> 00:05:05,250
function that takes a function that

100
00:05:05,250 --> 00:05:09,090
takes two values if if you're confused

101
00:05:09,090 --> 00:05:10,710
by that it'll be more obvious as we're

102
00:05:10,710 --> 00:05:13,710
going along so basically to create a

103
00:05:13,710 --> 00:05:16,199
pair you would just call pair with two

104
00:05:16,199 --> 00:05:20,699
values and then pairs because they

105
00:05:20,699 --> 00:05:25,009
return functions we should have two

106
00:05:25,009 --> 00:05:29,669
functions to pass into it so we can have

107
00:05:29,669 --> 00:05:32,370
first and second and so if you pass

108
00:05:32,370 --> 00:05:34,949
first it'll always return the first

109
00:05:34,949 --> 00:05:36,750
parameter that's given second will

110
00:05:36,750 --> 00:05:39,090
always return the second so you can take

111
00:05:39,090 --> 00:05:42,509
a pair and you can create it and then

112
00:05:42,509 --> 00:05:44,610
pass first or second and that will

113
00:05:44,610 --> 00:05:45,990
return the value we're all on the same

114
00:05:45,990 --> 00:05:49,949
page okay great because we're just going

115
00:05:49,949 --> 00:05:51,779
to keep digging deeper this is pretty

116
00:05:51,779 --> 00:05:56,219
basic to this talk so then if you if you

117
00:05:56,219 --> 00:05:58,349
know any Lisp and you've heard of car

118
00:05:58,349 --> 00:06:02,009
cons cutter basically we want to have a

119
00:06:02,009 --> 00:06:04,590
function that we can pass a pair rather

120
00:06:04,590 --> 00:06:07,199
than have the pair be the function that

121
00:06:07,199 --> 00:06:10,020
we pass anything else so we can wrap

122
00:06:10,020 --> 00:06:12,060
that by saying car as a function that

123
00:06:12,060 --> 00:06:15,630
takes a pair and then applies that pair

124
00:06:15,630 --> 00:06:18,779
to first and cutter takes a pair and

125
00:06:18,779 --> 00:06:21,270
applies it to second and then we can

126
00:06:21,270 --> 00:06:24,900
just alias and this is basically you can

127
00:06:24,900 --> 00:06:27,960
build up a list of like 1 2 3 4 5 and

128
00:06:27,960 --> 00:06:30,750
then say give me the second of the

129
00:06:30,750 --> 00:06:32,550
second of the first of the first and

130
00:06:32,550 --> 00:06:34,469
we'll give you 3 or the first of the

131
00:06:34,469 --> 00:06:35,990
first of the second of the second and

132
00:06:35,990 --> 00:06:41,040
it'll give you a 3 is that makes sense

133
00:06:41,040 --> 00:06:43,290
mind blown I thought that this was

134
00:06:43,290 --> 00:06:45,930
absolutely crazy when I first found out

135
00:06:45,930 --> 00:06:50,460
about this so a quick aside on currying

136
00:06:50,460 --> 00:06:52,530
if you don't know what currying is

137
00:06:52,530 --> 00:06:54,390
basically instead of having a function

138
00:06:54,390 --> 00:06:56,700
that takes like five parameters you just

139
00:06:56,700 --> 00:06:58,950
keep having nested functions and they

140
00:06:58,950 --> 00:07:00,780
keep returning functions that take like

141
00:07:00,780 --> 00:07:03,210
one extra parameter so basically instead

142
00:07:03,210 --> 00:07:06,330
of having like pair a and B you have

143
00:07:06,330 --> 00:07:08,880
pair a return a function that takes be

144
00:07:08,880 --> 00:07:12,300
that takes f that makes sense we're

145
00:07:12,300 --> 00:07:17,970
going to be doing this notation a lot so

146
00:07:17,970 --> 00:07:22,290
yeah tangent number two if if we're

147
00:07:22,290 --> 00:07:25,950
trying to eliminate if statements it

148
00:07:25,950 --> 00:07:28,080
seems sort of difficult to remove

149
00:07:28,080 --> 00:07:30,330
control flow right from your programs

150
00:07:30,330 --> 00:07:32,760
that that's hard but you can kind of

151
00:07:32,760 --> 00:07:35,760
think of branching as like a data

152
00:07:35,760 --> 00:07:38,790
structure because you have a test you

153
00:07:38,790 --> 00:07:42,030
have like do this first thing and then

154
00:07:42,030 --> 00:07:44,430
you have do the second thing in formal

155
00:07:44,430 --> 00:07:46,920
logic we call it like the antecedent the

156
00:07:46,920 --> 00:07:49,320
consequent and an alternative but it

157
00:07:49,320 --> 00:07:51,420
kind of looks like a pair right it's a

158
00:07:51,420 --> 00:07:53,400
pair of things and then something that

159
00:07:53,400 --> 00:07:57,510
tells you which one to do and so this is

160
00:07:57,510 --> 00:08:00,510
just that more verbose lee tests can be

161
00:08:00,510 --> 00:08:02,400
a function that returns the first or

162
00:08:02,400 --> 00:08:05,250
second part of a pair and so true is

163
00:08:05,250 --> 00:08:09,480
like you know car and false is like

164
00:08:09,480 --> 00:08:12,710
Qatar and the pair is actually just is

165
00:08:12,710 --> 00:08:19,170
your program so void is just useful will

166
00:08:19,170 --> 00:08:20,910
you'll see it again it just takes an

167
00:08:20,910 --> 00:08:22,500
argument and passes it through and does

168
00:08:22,500 --> 00:08:24,510
nothing with it and then you can see

169
00:08:24,510 --> 00:08:26,670
that true basically takes a consequent

170
00:08:26,670 --> 00:08:30,090
and alternative and vert and invokes a

171
00:08:30,090 --> 00:08:32,130
consequent false does the opposite and

172
00:08:32,130 --> 00:08:35,370
then if takes you know a test a

173
00:08:35,370 --> 00:08:37,710
consequent and an alternative and then

174
00:08:37,710 --> 00:08:42,479
passes those through so if you say if as

175
00:08:42,479 --> 00:08:46,800
a function call if true and then you

176
00:08:46,800 --> 00:08:50,070
know two parameters this you know worked

177
00:08:50,070 --> 00:08:52,470
or if false it will return the second

178
00:08:52,470 --> 00:08:54,120
one

179
00:08:54,120 --> 00:08:56,010
is that is that crazy that you can do

180
00:08:56,010 --> 00:09:02,760
that okay so okay let's I'm moving on to

181
00:09:02,760 --> 00:09:05,339
numbers at this point you might say

182
00:09:05,339 --> 00:09:07,080
numbers aren't really a keyword I know

183
00:09:07,080 --> 00:09:10,920
they aren't but I'm having fun so but

184
00:09:10,920 --> 00:09:12,930
before we get to numbers we're going on

185
00:09:12,930 --> 00:09:17,010
there tangent about pno axioms do people

186
00:09:17,010 --> 00:09:20,670
know piano axioms okay well i will

187
00:09:20,670 --> 00:09:23,279
explain them basically these are a set

188
00:09:23,279 --> 00:09:25,410
of rules that define like natural

189
00:09:25,410 --> 00:09:27,000
numbers you know positive integers

190
00:09:27,000 --> 00:09:28,710
cardinal numbers ordinal numbers call

191
00:09:28,710 --> 00:09:30,690
them what you are we use them to count

192
00:09:30,690 --> 00:09:34,070
and so i think they're like a dozen

193
00:09:34,070 --> 00:09:37,290
dozen key axioms but they can all

194
00:09:37,290 --> 00:09:39,750
basically be boiled down to zero is a

195
00:09:39,750 --> 00:09:41,580
natural number and every natural number

196
00:09:41,580 --> 00:09:45,870
has a number that comes after it so you

197
00:09:45,870 --> 00:09:48,330
can think of numbers not as one two

198
00:09:48,330 --> 00:09:51,029
three four but as zero and the one that

199
00:09:51,029 --> 00:09:52,529
comes after that and the one that comes

200
00:09:52,529 --> 00:09:54,089
after that and the one that comes after

201
00:09:54,089 --> 00:09:59,520
that so back to numbers if you're

202
00:09:59,520 --> 00:10:01,650
wondering where we went with that little

203
00:10:01,650 --> 00:10:05,730
tangent on piano axioms because we're

204
00:10:05,730 --> 00:10:08,250
going to talk about church numerals this

205
00:10:08,250 --> 00:10:11,100
is named after Alonzo Church he was Alan

206
00:10:11,100 --> 00:10:13,980
Turing's doctoral advisor at Princeton

207
00:10:13,980 --> 00:10:17,070
he actually advised a lot of really

208
00:10:17,070 --> 00:10:20,370
famous you know foundational computer

209
00:10:20,370 --> 00:10:24,779
scientists and mathematicians so when

210
00:10:24,779 --> 00:10:28,620
you think of counting basically when you

211
00:10:28,620 --> 00:10:31,440
don't really use numbers apart from

212
00:10:31,440 --> 00:10:33,959
counting two things and so there isn't

213
00:10:33,959 --> 00:10:35,730
anything like inherently great about the

214
00:10:35,730 --> 00:10:38,580
number five except that it's like you

215
00:10:38,580 --> 00:10:41,130
know one more than than for right or

216
00:10:41,130 --> 00:10:43,200
it's the number that your product

217
00:10:43,200 --> 00:10:45,690
manager asked you to put items on the

218
00:10:45,690 --> 00:10:48,930
page but anyways you you just you keep

219
00:10:48,930 --> 00:10:50,910
iterating and that's really what you use

220
00:10:50,910 --> 00:10:54,209
numbers for is iteration so we can

221
00:10:54,209 --> 00:10:57,600
define zero as basically a function that

222
00:10:57,600 --> 00:11:02,730
takes a function and like a zero value

223
00:11:02,730 --> 00:11:07,560
and it just returns the 0 value so

224
00:11:07,560 --> 00:11:09,900
it's like don't do anything with that

225
00:11:09,900 --> 00:11:12,180
function just return whatever was passed

226
00:11:12,180 --> 00:11:16,830
in and then its successor can be defined

227
00:11:16,830 --> 00:11:18,660
as a function that takes a number and

228
00:11:18,660 --> 00:11:21,150
then returns a number that actually just

229
00:11:21,150 --> 00:11:26,040
applies that function to the number so

230
00:11:26,040 --> 00:11:28,320
this is actually a lot like reduce

231
00:11:28,320 --> 00:11:31,050
you'll it will make more sense so you

232
00:11:31,050 --> 00:11:33,240
can think of one is the successor of 0 2

233
00:11:33,240 --> 00:11:36,630
is this a successor of one so on so you

234
00:11:36,630 --> 00:11:40,080
can convert back to native numbers in

235
00:11:40,080 --> 00:11:45,270
JavaScript by basically passing a

236
00:11:45,270 --> 00:11:49,260
function that adds one to whatever it

237
00:11:49,260 --> 00:11:53,180
takes and then 0 so if you convert 0

238
00:11:53,180 --> 00:11:55,890
it'll skip this function and it'll just

239
00:11:55,890 --> 00:11:58,740
return 0 otherwise with one it'll add

240
00:11:58,740 --> 00:12:02,220
it'll pass in 0 it'll add one to that

241
00:12:02,220 --> 00:12:05,730
and then return 1 and you just keep keep

242
00:12:05,730 --> 00:12:07,800
wrapping it and it will keep unwrapping

243
00:12:07,800 --> 00:12:09,690
itself like an onion so that makes sense

244
00:12:09,690 --> 00:12:17,610
ok cool cool so because we know that the

245
00:12:17,610 --> 00:12:21,750
function isn't called for the case of 0

246
00:12:21,750 --> 00:12:24,030
this makes it very convenient to check

247
00:12:24,030 --> 00:12:26,670
through 0 because we can just pass in

248
00:12:26,670 --> 00:12:28,800
true and then have a function that

249
00:12:28,800 --> 00:12:31,200
returns false if it's ever called and so

250
00:12:31,200 --> 00:12:33,240
if you pass in 0 it'll always return

251
00:12:33,240 --> 00:12:35,850
true and if you pass in anything that

252
00:12:35,850 --> 00:12:39,480
iterates it'll always return false so

253
00:12:39,480 --> 00:12:42,839
given that we have represented numbers

254
00:12:42,839 --> 00:12:46,860
with functions we can actually add those

255
00:12:46,860 --> 00:12:48,630
because we're already we're already

256
00:12:48,630 --> 00:12:51,450
iterating right and what is what is math

257
00:12:51,450 --> 00:12:53,880
or what is arithmetic except for like

258
00:12:53,880 --> 00:12:56,400
iterating I'm sure a mathematician would

259
00:12:56,400 --> 00:13:01,260
disagree but we're simplifying things so

260
00:13:01,260 --> 00:13:03,660
basically addition is just do something

261
00:13:03,660 --> 00:13:05,990
n times and then do something M times

262
00:13:05,990 --> 00:13:09,390
and then multiplication is like do

263
00:13:09,390 --> 00:13:12,740
something n times but every time do em

264
00:13:12,740 --> 00:13:15,570
you guys know arithmetic right like

265
00:13:15,570 --> 00:13:20,850
we're all adults yeah so if if you think

266
00:13:20,850 --> 00:13:21,540
about success

267
00:13:21,540 --> 00:13:23,610
sir we already have a function that adds

268
00:13:23,610 --> 00:13:28,290
one so we can tweak that slightly to

269
00:13:28,290 --> 00:13:31,769
basically take two numbers and then do

270
00:13:31,769 --> 00:13:36,230
it do F end times and then do it m times

271
00:13:36,230 --> 00:13:39,389
so you can add one and three and then

272
00:13:39,389 --> 00:13:40,860
convert that back to a number and you'll

273
00:13:40,860 --> 00:13:43,740
get for this shouldn't be like

274
00:13:43,740 --> 00:13:46,740
surprising that like addition is you

275
00:13:46,740 --> 00:13:50,910
know a thing but then if if you want to

276
00:13:50,910 --> 00:13:52,620
multiply we can tweak it so that

277
00:13:52,620 --> 00:13:55,949
basically you can apply em to the

278
00:13:55,949 --> 00:13:58,649
function and then do that end times so

279
00:13:58,649 --> 00:14:01,680
you're just wrapping and so this is all

280
00:14:01,680 --> 00:14:03,329
you know valid JavaScript you can follow

281
00:14:03,329 --> 00:14:08,579
along and then we can add one more

282
00:14:08,579 --> 00:14:11,490
definition so subtraction is basically

283
00:14:11,490 --> 00:14:16,740
ends predecessor M times right but we

284
00:14:16,740 --> 00:14:18,180
haven't talked about finding a

285
00:14:18,180 --> 00:14:20,779
predecessor piano axioms don't really

286
00:14:20,779 --> 00:14:23,759
define a predecessor because everything

287
00:14:23,759 --> 00:14:26,610
starts at zero and goes up but we can

288
00:14:26,610 --> 00:14:30,060
basically add an axiom that says 0 is

289
00:14:30,060 --> 00:14:35,790
its own predecessor and every every

290
00:14:35,790 --> 00:14:37,980
natural number has a predecessor right

291
00:14:37,980 --> 00:14:41,940
so 4 is the successor of three but it's

292
00:14:41,940 --> 00:14:45,959
also the predecessor of 5 or yes 5 and

293
00:14:45,959 --> 00:14:48,360
so this is sort of complicated i didn't

294
00:14:48,360 --> 00:14:53,089
actually derive this i took this from

295
00:14:53,089 --> 00:14:57,529
matt mites blog he's a professor and at

296
00:14:57,529 --> 00:15:00,860
university of utah very smart guy but

297
00:15:00,860 --> 00:15:05,850
basically this will take a and return

298
00:15:05,850 --> 00:15:07,620
the function that represents the number

299
00:15:07,620 --> 00:15:11,189
before it and then when you want to

300
00:15:11,189 --> 00:15:13,130
subtract two you basically just have

301
00:15:13,130 --> 00:15:16,319
this predecessor function and you pass

302
00:15:16,319 --> 00:15:18,540
it to em and then pass that to end so

303
00:15:18,540 --> 00:15:22,889
the predecessor of 3 is 2 and then if

304
00:15:22,889 --> 00:15:25,199
you subtract 4 or subtract three from

305
00:15:25,199 --> 00:15:28,290
four that's one not surprising but

306
00:15:28,290 --> 00:15:32,910
following along ok so if we want to

307
00:15:32,910 --> 00:15:36,380
write code without any keywords

308
00:15:36,380 --> 00:15:40,350
then we can basically define a block

309
00:15:40,350 --> 00:15:43,020
scope and you know take all these

310
00:15:43,020 --> 00:15:45,620
parameters to find them down below and

311
00:15:45,620 --> 00:15:47,970
and then you know some of these

312
00:15:47,970 --> 00:15:50,339
functions depend on functions that we've

313
00:15:50,339 --> 00:15:52,970
already defined so you can't really do

314
00:15:52,970 --> 00:15:57,060
is zero until you have true or false

315
00:15:57,060 --> 00:16:00,600
like it one depends on the other and

316
00:16:00,600 --> 00:16:04,140
then once you execute all of this you

317
00:16:04,140 --> 00:16:07,860
can say like if one is zero then ask why

318
00:16:07,860 --> 00:16:11,250
otherwise send health and this

319
00:16:11,250 --> 00:16:17,070
definitely asks for you to send help but

320
00:16:17,070 --> 00:16:18,960
so you notice everything here is

321
00:16:18,960 --> 00:16:22,200
anonymous right nothing nothing can name

322
00:16:22,200 --> 00:16:25,740
itself which is a problem because they

323
00:16:25,740 --> 00:16:28,050
can't call themselves so you can't have

324
00:16:28,050 --> 00:16:30,360
a function that is totally anonymous

325
00:16:30,360 --> 00:16:32,970
that is unnamed that also somehow knows

326
00:16:32,970 --> 00:16:35,760
how to name itself and then call itself

327
00:16:35,760 --> 00:16:42,630
right they you know years ago this is

328
00:16:42,630 --> 00:16:44,370
sort of based on the lambda calculus

329
00:16:44,370 --> 00:16:46,680
which was developed like in the 20s and

330
00:16:46,680 --> 00:16:52,760
30s and it was it was meant to be a

331
00:16:52,760 --> 00:16:55,740
system of representing formal logic they

332
00:16:55,740 --> 00:16:58,529
wanted to perform proofs in the lambda

333
00:16:58,529 --> 00:17:01,860
calculus and so in order to do that they

334
00:17:01,860 --> 00:17:04,050
really needed to make sure that it was

335
00:17:04,050 --> 00:17:05,850
tried and true and tested and that it

336
00:17:05,850 --> 00:17:08,579
works and it turns out that they found a

337
00:17:08,579 --> 00:17:12,179
paradox in the lambda calculus that you

338
00:17:12,179 --> 00:17:19,199
actually can represent anonymously and

339
00:17:19,199 --> 00:17:21,660
it was sort of it was actually a huge

340
00:17:21,660 --> 00:17:24,870
con for controversy at the time it

341
00:17:24,870 --> 00:17:27,620
started with the you Combinator because

342
00:17:27,620 --> 00:17:31,620
this is very simple you you can wrap a

343
00:17:31,620 --> 00:17:34,470
function in a function and then just

344
00:17:34,470 --> 00:17:37,440
pass it to itself and so you might have

345
00:17:37,440 --> 00:17:39,240
a function add that takes a parameter

346
00:17:39,240 --> 00:17:41,429
called add and that might not be useful

347
00:17:41,429 --> 00:17:44,070
because you would want to probably add

348
00:17:44,070 --> 00:17:49,190
and not just call yourself but you can

349
00:17:49,190 --> 00:17:55,050
so they created so I won't go too far

350
00:17:55,050 --> 00:17:57,300
into the Y Combinator because it is

351
00:17:57,300 --> 00:17:58,650
probably one of the most beaten to death

352
00:17:58,650 --> 00:18:01,500
proved things in math and computer

353
00:18:01,500 --> 00:18:05,100
science but basically what they want to

354
00:18:05,100 --> 00:18:08,310
do is have a function that takes a

355
00:18:08,310 --> 00:18:10,380
function that when it keeps calling

356
00:18:10,380 --> 00:18:12,480
itself it doesn't return new values so

357
00:18:12,480 --> 00:18:15,630
if you keep like wrapping the the output

358
00:18:15,630 --> 00:18:18,510
and sending it back through you get like

359
00:18:18,510 --> 00:18:20,370
a fixed point it won't it won't

360
00:18:20,370 --> 00:18:25,440
fluctuate so you know when you this this

361
00:18:25,440 --> 00:18:28,230
function matches that requirement it's

362
00:18:28,230 --> 00:18:29,670
got a huge problem because it

363
00:18:29,670 --> 00:18:32,130
immediately calls itself and doesn't

364
00:18:32,130 --> 00:18:36,740
stop until your program dies so you can

365
00:18:36,740 --> 00:18:40,530
add a little bit of indirection so that

366
00:18:40,530 --> 00:18:42,330
it doesn't immediately call itself it

367
00:18:42,330 --> 00:18:44,570
returns a function that takes a function

368
00:18:44,570 --> 00:18:51,270
and so basically they you can expand

369
00:18:51,270 --> 00:18:55,170
that out and then you can't have Y in

370
00:18:55,170 --> 00:18:56,970
the definition because it needs to be

371
00:18:56,970 --> 00:18:59,460
anonymous right you can't you can't know

372
00:18:59,460 --> 00:19:01,380
your own name so using the you

373
00:19:01,380 --> 00:19:05,220
Combinator they they basically came up

374
00:19:05,220 --> 00:19:08,880
with this function that says you can you

375
00:19:08,880 --> 00:19:12,450
can wrap a function in this and it will

376
00:19:12,450 --> 00:19:16,980
it will pass in the function so that you

377
00:19:16,980 --> 00:19:20,040
can call itself and that will make more

378
00:19:20,040 --> 00:19:24,540
sense in just a second because we can

379
00:19:24,540 --> 00:19:28,980
put it all together and so this you've

380
00:19:28,980 --> 00:19:31,950
all you've seen before like the is 0 but

381
00:19:31,950 --> 00:19:34,680
up here we take a function called

382
00:19:34,680 --> 00:19:38,190
factorial and so factorial is passed in

383
00:19:38,190 --> 00:19:41,280
and it is defined as the Y Combinator

384
00:19:41,280 --> 00:19:47,100
wrapping a a function factorial or a

385
00:19:47,100 --> 00:19:50,760
parameter factorial and a parameter n

386
00:19:50,760 --> 00:19:54,900
and if n is 0 then return 1 otherwise

387
00:19:54,900 --> 00:19:58,110
multiply n by the factorial of ends

388
00:19:58,110 --> 00:20:02,160
predecessor right we all know and

389
00:20:02,160 --> 00:20:05,010
and at the very end just passing this

390
00:20:05,010 --> 00:20:10,230
this little number back to like back to

391
00:20:10,230 --> 00:20:13,290
the native number and then call call

392
00:20:13,290 --> 00:20:16,230
factorial of 5 and native does anybody

393
00:20:16,230 --> 00:20:19,320
know what factorial 5 is at the top of

394
00:20:19,320 --> 00:20:32,040
your head because it is 120 that's that

395
00:20:32,040 --> 00:20:38,310
is code without keywords there there's

396
00:20:38,310 --> 00:20:41,760
some some further reading on this the

397
00:20:41,760 --> 00:20:43,620
fixed-point combinator you can look up

398
00:20:43,620 --> 00:20:47,340
on Wikipedia Matt might wrote a really

399
00:20:47,340 --> 00:20:50,310
really good blog post that I used a lot

400
00:20:50,310 --> 00:20:54,570
of his code but upgraded cs6 I wrote a

401
00:20:54,570 --> 00:20:57,690
little blog post about this and then you

402
00:20:57,690 --> 00:21:00,330
can find all the slides here and follow

403
00:21:00,330 --> 00:21:09,900
me on on Twitter yeah cool it's a real

404
00:21:09,900 --> 00:21:15,990
website I promised I would love to

405
00:21:15,990 --> 00:21:22,170
answer questions yeah definitely okay

406
00:21:22,170 --> 00:21:24,030
Austin I to your questions that all

407
00:21:24,030 --> 00:21:26,010
right yeah all right oh god this one do

408
00:21:26,010 --> 00:21:28,370
you have all the additions in education

409
00:21:28,370 --> 00:21:34,530
i own none of them I know I know yeah

410
00:21:34,530 --> 00:21:36,240
someone actually told me yesterday that

411
00:21:36,240 --> 00:21:39,480
Gerry Sussman and like how Abelman did

412
00:21:39,480 --> 00:21:41,970
this in a talk and I didn't know it

413
00:21:41,970 --> 00:21:44,700
existed it's very similar okay and also

414
00:21:44,700 --> 00:21:47,580
second thing if you implement double as

415
00:21:47,580 --> 00:21:49,880
a function you can make your

416
00:21:49,880 --> 00:21:52,950
multiplication function blogging times

417
00:21:52,950 --> 00:21:55,140
and because we're doubling each time

418
00:21:55,140 --> 00:21:57,950
when it's an even number that's an odd

419
00:21:57,950 --> 00:22:02,760
oh okay that's that's a good idea yeah

420
00:22:02,760 --> 00:22:06,260
performance here by the way you are you

421
00:22:06,260 --> 00:22:10,080
you are adding in linear time so yeah

422
00:22:10,080 --> 00:22:31,020
it's don't do this Trotter yeah but

423
00:22:31,020 --> 00:22:33,390
you're did you have a question or so

424
00:22:33,390 --> 00:22:35,730
yeah well it's kind of also kind of a

425
00:22:35,730 --> 00:22:39,450
two-parter this is for fun thing right

426
00:22:39,450 --> 00:22:41,820
this is not really oh yeah no like

427
00:22:41,820 --> 00:22:45,240
really don't do this understand how it

428
00:22:45,240 --> 00:22:46,800
works and know that it's possible but

429
00:22:46,800 --> 00:22:50,550
don't like don't do this at home but not

430
00:22:50,550 --> 00:23:00,210
at work right like was there so here yes

431
00:23:00,210 --> 00:23:08,460
because it it ran I'm not sure in line

432
00:23:08,460 --> 00:23:12,120
12 you don't have to use like the plus

433
00:23:12,120 --> 00:23:14,190
you mean yeah the X plus 1 don't you

434
00:23:14,190 --> 00:23:16,950
have to do like suck of one or no no no

435
00:23:16,950 --> 00:23:19,410
so this is being passed in as my

436
00:23:19,410 --> 00:23:21,570
function native and so you compute

437
00:23:21,570 --> 00:23:24,600
factorial of 5 and then you convert it

438
00:23:24,600 --> 00:23:27,300
to a native function and return that and

439
00:23:27,300 --> 00:23:30,240
so that's how we get 120 at the bottom

440
00:23:30,240 --> 00:23:32,820
otherwise you would wind up with a huge

441
00:23:32,820 --> 00:23:34,680
function that nobody understands and

442
00:23:34,680 --> 00:23:36,360
would be very difficult for me to tell

443
00:23:36,360 --> 00:23:44,040
you all is 120 numbers not right but

444
00:23:44,040 --> 00:23:48,030
that's too kind of i'm going to native

445
00:23:48,030 --> 00:23:50,330
JavaScript land for this moment yeah

446
00:23:50,330 --> 00:23:54,510
yeah that that's that's to be fair

447
00:23:54,510 --> 00:23:55,900
though you could've

448
00:23:55,900 --> 00:23:58,660
this is like a subsequent calls to

449
00:23:58,660 --> 00:24:00,970
successor in which you printed one like

450
00:24:00,970 --> 00:24:02,800
the word one up to the word 120 or

451
00:24:02,800 --> 00:24:03,940
something and then didn't F using

452
00:24:03,940 --> 00:24:11,620
keywords that's all I see that that

453
00:24:11,620 --> 00:24:13,570
turns it into actually the number one

454
00:24:13,570 --> 00:24:15,700
yeah yeah and so that's how we get a

455
00:24:15,700 --> 00:24:19,810
result and not just like right right yes

456
00:24:19,810 --> 00:24:25,750
there any other questions okay cool I

457
00:24:25,750 --> 00:24:33,280
hope you had fun so Falkor is actually

458
00:24:33,280 --> 00:24:34,660
it's a it's a new framework that's out

459
00:24:34,660 --> 00:24:37,750
from netflix it's designed around a new

460
00:24:37,750 --> 00:24:39,400
concept is called Jason graph which

461
00:24:39,400 --> 00:24:41,530
we'll get into in a moment and it's all

462
00:24:41,530 --> 00:24:43,780
it's meant to be a way to simplify the

463
00:24:43,780 --> 00:24:46,540
data that's actually being sent to your

464
00:24:46,540 --> 00:24:48,430
client so whether that be a mobile phone

465
00:24:48,430 --> 00:24:51,400
a tablet a desktop only requesting the

466
00:24:51,400 --> 00:24:53,950
data that you need is the key component

467
00:24:53,950 --> 00:24:56,470
to what Falkor is really about and being

468
00:24:56,470 --> 00:24:59,080
able to request multiple attributes from

469
00:24:59,080 --> 00:25:01,390
multiple microservices at the same time

