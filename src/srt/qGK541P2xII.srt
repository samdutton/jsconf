1
00:00:00,320 --> 00:00:02,070

[Music]

2
00:00:02,070 --> 00:00:03,840
[Applause]

3
00:00:03,840 --> 00:00:05,660
[Music]

4
00:00:05,660 --> 00:00:07,410
[Applause]

5
00:00:07,410 --> 00:00:09,280
[Music]

6
00:00:09,280 --> 00:00:11,020
[Applause]

7
00:00:11,020 --> 00:00:12,780
[Music]

8
00:00:12,780 --> 00:00:16,860
[Applause]

9
00:00:16,870 --> 00:00:25,069
[Music]

10
00:00:25,079 --> 00:00:29,169
all right hello welcome

11
00:00:29,169 --> 00:00:31,419
as Erin mentioned I'm Nick and I see I'm

12
00:00:31,419 --> 00:00:33,250
a JavaScript developer like many of you

13
00:00:33,250 --> 00:00:35,320
and I work for a company called site

14
00:00:35,320 --> 00:00:41,350
Penn they're sorry and we're hiring

15
00:00:41,350 --> 00:00:44,260
I'm also on two podcasts j/s party and

16
00:00:44,260 --> 00:00:46,660
talk script both of which are here yes

17
00:00:46,660 --> 00:00:48,280
party just had the stage in the last

18
00:00:48,280 --> 00:00:50,500
over lunch in the last in the other room

19
00:00:50,500 --> 00:00:53,650
and come stop by either of those booths

20
00:00:53,650 --> 00:00:55,300
I'll be over at the talks crit booth

21
00:00:55,300 --> 00:00:57,700
throughout the day so please stop by and

22
00:00:57,700 --> 00:00:59,530
we're interviewing speakers and

23
00:00:59,530 --> 00:01:03,309
attendees so I am a dynamic language

24
00:01:03,309 --> 00:01:05,500
enthusiast I'm a full-stack JavaScript

25
00:01:05,500 --> 00:01:07,149
developer and this is how I would

26
00:01:07,149 --> 00:01:09,460
describe myself I really like JavaScript

27
00:01:09,460 --> 00:01:11,110
and I think I like it and I think I got

28
00:01:11,110 --> 00:01:12,369
into it because it was a dynamic

29
00:01:12,369 --> 00:01:14,740
language so I'd like to tell you a

30
00:01:14,740 --> 00:01:16,270
little bit about my story and how I got

31
00:01:16,270 --> 00:01:17,320
here

32
00:01:17,320 --> 00:01:21,970
I graduated from college in 2008 and the

33
00:01:21,970 --> 00:01:23,560
primary languages that were taught in my

34
00:01:23,560 --> 00:01:26,909
computer science classes were C and C++

35
00:01:26,909 --> 00:01:29,140
these were really nice languages I

36
00:01:29,140 --> 00:01:30,880
learned a lot from them and learned I

37
00:01:30,880 --> 00:01:32,320
think I became a better programmer I was

38
00:01:32,320 --> 00:01:34,450
actually the last class that took C and

39
00:01:34,450 --> 00:01:36,760
C++ they switched over to Java after

40
00:01:36,760 --> 00:01:38,500
that I think I got the better education

41
00:01:38,500 --> 00:01:40,030
so I'm happy about that

42
00:01:40,030 --> 00:01:43,270
I also took an elective Perl class and

43
00:01:43,270 --> 00:01:44,860
this is my first real introduction to a

44
00:01:44,860 --> 00:01:47,170
dynamic language and I loved how

45
00:01:47,170 --> 00:01:49,450
productive I could be quickly I didn't

46
00:01:49,450 --> 00:01:50,740
have to worry about a make file which I

47
00:01:50,740 --> 00:01:53,140
didn't understand at the time and I

48
00:01:53,140 --> 00:01:54,430
didn't have to worry about all of this

49
00:01:54,430 --> 00:01:56,080
setup and how I was gonna run and how

50
00:01:56,080 --> 00:01:58,330
like freeing memory and all of that I

51
00:01:58,330 --> 00:01:59,799
think that was the most freeing part I

52
00:01:59,799 --> 00:02:02,110
could just start writing code run it and

53
00:02:02,110 --> 00:02:03,580
if there was errors I'd get those thrown

54
00:02:03,580 --> 00:02:06,040
at me and then I could deal with them so

55
00:02:06,040 --> 00:02:08,500
that was my first real dynamic language

56
00:02:08,500 --> 00:02:11,890
I did experiment once in college with

57
00:02:11,890 --> 00:02:14,680
JavaScript but Perl was was the first

58
00:02:14,680 --> 00:02:17,470
real one I just loved how flexible it

59
00:02:17,470 --> 00:02:20,709
was so the the JavaScript that I wrote

60
00:02:20,709 --> 00:02:23,770
in college was just for one

61
00:02:23,770 --> 00:02:26,710
and it was just an add-on to a software

62
00:02:26,710 --> 00:02:28,600
engineering project that I was working

63
00:02:28,600 --> 00:02:30,610
on with a few other developers and this

64
00:02:30,610 --> 00:02:33,040
was probably around 2007 and this is

65
00:02:33,040 --> 00:02:35,460
what the code looked like it was

66
00:02:35,460 --> 00:02:38,140
exceptionally terrible I think I should

67
00:02:38,140 --> 00:02:39,460
get bonus points for how terrible it was

68
00:02:39,460 --> 00:02:41,200
if you look in there there is a with

69
00:02:41,200 --> 00:02:44,280
statement in there that's amazing and

70
00:02:44,280 --> 00:02:47,860
what this code did was we wanted to add

71
00:02:47,860 --> 00:02:50,560
a gmail style loading indicator like you

72
00:02:50,560 --> 00:02:52,120
see in the top right corner Gmail used

73
00:02:52,120 --> 00:02:55,150
to look like that in 2007 and we wanted

74
00:02:55,150 --> 00:02:56,560
to add that to our page but we weren't

75
00:02:56,560 --> 00:02:59,350
really doing any kind of xhr calls or

76
00:02:59,350 --> 00:03:00,460
anything like that we were just had

77
00:03:00,460 --> 00:03:03,670
serving PHP pages but we wanted to have

78
00:03:03,670 --> 00:03:06,970
this fancy look and feel so I found in a

79
00:03:06,970 --> 00:03:09,160
book some code that looked like this

80
00:03:09,160 --> 00:03:11,200
that was making the Gmail loading

81
00:03:11,200 --> 00:03:13,540
indicator happen and I wanted to make

82
00:03:13,540 --> 00:03:15,280
that happen I didn't really understand

83
00:03:15,280 --> 00:03:17,380
the code at all so I pretty much copied

84
00:03:17,380 --> 00:03:20,440
it verbatim as you do and that ended up

85
00:03:20,440 --> 00:03:22,900
with me in the page that I was

86
00:03:22,900 --> 00:03:25,330
requesting making Ajax requests for the

87
00:03:25,330 --> 00:03:27,250
page that I was on just so that I would

88
00:03:27,250 --> 00:03:28,630
have an asynchronous request in there

89
00:03:28,630 --> 00:03:29,800
that would take a little bit of time I

90
00:03:29,800 --> 00:03:32,260
even had a math dot random on there so

91
00:03:32,260 --> 00:03:33,970
that the URL was different each time and

92
00:03:33,970 --> 00:03:36,250
then it would load the page and then

93
00:03:36,250 --> 00:03:37,870
once that was actually loaded it would

94
00:03:37,870 --> 00:03:39,190
remove the loading indicator so the

95
00:03:39,190 --> 00:03:40,180
loading indicator didn't actually

96
00:03:40,180 --> 00:03:42,400
signify a loading of anything other than

97
00:03:42,400 --> 00:03:43,870
the page that you were already on so we

98
00:03:43,870 --> 00:03:46,600
were just wasting time but it was a lot

99
00:03:46,600 --> 00:03:49,000
of fun and I didn't touch that was good

100
00:03:49,000 --> 00:03:51,070
for a few years after this but it got me

101
00:03:51,070 --> 00:03:53,980
thinking it got me thinking do you

102
00:03:53,980 --> 00:03:55,270
remember the first lines of JavaScript

103
00:03:55,270 --> 00:03:57,010
that you might have written and so I

104
00:03:57,010 --> 00:03:59,650
asked this on Twitter last week and I

105
00:03:59,650 --> 00:04:01,540
got a few responses that came back and

106
00:04:01,540 --> 00:04:03,400
most of them were pretty much the same

107
00:04:03,400 --> 00:04:05,500
exact thing they were oh yeah I was just

108
00:04:05,500 --> 00:04:07,390
changing the color of something or as I

109
00:04:07,390 --> 00:04:09,910
was hovering over a link I wanted to

110
00:04:09,910 --> 00:04:12,490
change the opacity of it and a few of

111
00:04:12,490 --> 00:04:14,770
them were I wanted to modify the page

112
00:04:14,770 --> 00:04:16,720
with jQuery specifically so jQuery and

113
00:04:16,720 --> 00:04:19,510
JavaScript were synonymous back then in

114
00:04:19,510 --> 00:04:22,380
a lot of ways and so this was really

115
00:04:22,380 --> 00:04:24,460
most people's introduction to the

116
00:04:24,460 --> 00:04:26,550
language through this dhtml style

117
00:04:26,550 --> 00:04:29,169
modifying of the page and that's because

118
00:04:29,169 --> 00:04:31,180
javascript is just not really the best

119
00:04:31,180 --> 00:04:33,010
language we were using it the way that

120
00:04:33,010 --> 00:04:34,840
it was designed it's not really it never

121
00:04:34,840 --> 00:04:35,950
really was designed to be the

122
00:04:35,950 --> 00:04:37,660
to be used the way that we use it today

123
00:04:37,660 --> 00:04:41,080
and that's proven by this quote from

124
00:04:41,080 --> 00:04:42,610
Brendan Eich where he's talking about

125
00:04:42,610 --> 00:04:45,130
JavaScript being the glue language that

126
00:04:45,130 --> 00:04:46,870
part-time developers and designers would

127
00:04:46,870 --> 00:04:49,840
use to glue together the components that

128
00:04:49,840 --> 00:04:51,160
the real programmers who were writing

129
00:04:51,160 --> 00:04:54,130
Java would be writing and obviously

130
00:04:54,130 --> 00:04:55,630
we've moved past that but in a lot of

131
00:04:55,630 --> 00:04:57,520
ways this was how a lot of us got

132
00:04:57,520 --> 00:05:00,550
started including me my first job was

133
00:05:00,550 --> 00:05:02,890
writing Java I was working on a big java

134
00:05:02,890 --> 00:05:07,630
application and it was also a portable

135
00:05:07,630 --> 00:05:09,280
application so we were designing several

136
00:05:09,280 --> 00:05:10,840
portlets that would go into the page and

137
00:05:10,840 --> 00:05:12,820
it did have a lot of JavaScript on the

138
00:05:12,820 --> 00:05:14,860
pages that were doing things like event

139
00:05:14,860 --> 00:05:17,830
handling and some simple client-side

140
00:05:17,830 --> 00:05:20,380
validation things like that but we

141
00:05:20,380 --> 00:05:21,880
didn't really treat JavaScript like a

142
00:05:21,880 --> 00:05:23,380
real language and so we didn't test

143
00:05:23,380 --> 00:05:25,900
JavaScript we didn't architect it we

144
00:05:25,900 --> 00:05:27,280
just kind of threw it in wherever we

145
00:05:27,280 --> 00:05:28,930
wanted it and that meant that any

146
00:05:28,930 --> 00:05:31,420
portlet that was going to use some

147
00:05:31,420 --> 00:05:33,550
JavaScript method we would just use that

148
00:05:33,550 --> 00:05:35,050
to pollute the global namespace with

149
00:05:35,050 --> 00:05:37,600
whatever methods that it needed and that

150
00:05:37,600 --> 00:05:39,460
ended up being where we'd have like a

151
00:05:39,460 --> 00:05:40,960
click handler function that was

152
00:05:40,960 --> 00:05:43,810
duplicated on in every single portlet

153
00:05:43,810 --> 00:05:45,250
and it would just pollute the global

154
00:05:45,250 --> 00:05:46,330
namespace with all of that so it was

155
00:05:46,330 --> 00:05:48,910
really exceptionally terrible but that's

156
00:05:48,910 --> 00:05:51,720
just what we ended up doing on this also

157
00:05:51,720 --> 00:05:55,210
this application specifically only had

158
00:05:55,210 --> 00:05:56,860
to work in ie6 it did not work in

159
00:05:56,860 --> 00:05:58,570
Firefox and Chrome wasn't really a thing

160
00:05:58,570 --> 00:06:01,150
back then it only worked in ie6 and

161
00:06:01,150 --> 00:06:03,670
nothing else not a 7 or anything just

162
00:06:03,670 --> 00:06:04,360
ie6

163
00:06:04,360 --> 00:06:08,080
and it relied on some weird quirks mode

164
00:06:08,080 --> 00:06:11,380
bugs to get the the drop down navigation

165
00:06:11,380 --> 00:06:13,000
to work so if you tried to load it in

166
00:06:13,000 --> 00:06:14,440
another browser it actually wouldn't

167
00:06:14,440 --> 00:06:17,620
work at all and so I did a lot of Java

168
00:06:17,620 --> 00:06:21,490
and a lot of JavaScript and but it was

169
00:06:21,490 --> 00:06:23,830
just this simple JavaScript but then we

170
00:06:23,830 --> 00:06:26,440
got the opportunity to create the first

171
00:06:26,440 --> 00:06:28,030
real JavaScript component that we would

172
00:06:28,030 --> 00:06:30,580
use in this application but of course I

173
00:06:30,580 --> 00:06:32,950
didn't want to have to do this in ie6

174
00:06:32,950 --> 00:06:35,700
because ie6 was just terrible so I

175
00:06:35,700 --> 00:06:38,230
started looking at greasemonkey and

176
00:06:38,230 --> 00:06:40,390
writing a script that would modify the

177
00:06:40,390 --> 00:06:41,530
page in real time without actually

178
00:06:41,530 --> 00:06:43,330
changing our source code so that it

179
00:06:43,330 --> 00:06:45,130
would work in Firefox and we could

180
00:06:45,130 --> 00:06:47,620
navigate through the pages and use

181
00:06:47,620 --> 00:06:49,540
Firebug to actually do some testing

182
00:06:49,540 --> 00:06:51,100
and so the first real component that I

183
00:06:51,100 --> 00:06:55,510
created was a slide navigator so kind of

184
00:06:55,510 --> 00:06:56,740
like a PowerPoint in the browser a

185
00:06:56,740 --> 00:06:59,470
little bit but way way simpler and it

186
00:06:59,470 --> 00:07:01,000
was all written in JavaScript we started

187
00:07:01,000 --> 00:07:02,980
with prototype and then moved on to

188
00:07:02,980 --> 00:07:05,710
jQuery and it was awesome but it was

189
00:07:05,710 --> 00:07:08,590
terrible code but I really embraced that

190
00:07:08,590 --> 00:07:09,970
spaghetti code that I was writing it was

191
00:07:09,970 --> 00:07:12,640
a lot of fun to write not a lot of fun

192
00:07:12,640 --> 00:07:14,970
to test or to debug later on of course

193
00:07:14,970 --> 00:07:18,220
but I didn't know that at the time it's

194
00:07:18,220 --> 00:07:19,900
just a lot of fun to to be a part of

195
00:07:19,900 --> 00:07:23,650
that so there's this this quote from

196
00:07:23,650 --> 00:07:25,360
Brendan Eich always bet on JavaScript

197
00:07:25,360 --> 00:07:28,420
and this saying kind of accurately

198
00:07:28,420 --> 00:07:30,160
depicts the past present and future of

199
00:07:30,160 --> 00:07:32,590
the language since this is the language

200
00:07:32,590 --> 00:07:34,930
of the web the language is kind of set

201
00:07:34,930 --> 00:07:37,480
off at a disadvantage from the start I'm

202
00:07:37,480 --> 00:07:38,800
sorry at an advantage from the start

203
00:07:38,800 --> 00:07:40,360
over any other language because if you

204
00:07:40,360 --> 00:07:42,670
were writing code in the browser it is

205
00:07:42,670 --> 00:07:46,300
JavaScript so we're using this language

206
00:07:46,300 --> 00:07:49,660
that was never really designed to to

207
00:07:49,660 --> 00:07:52,300
have the role that it does but we can't

208
00:07:52,300 --> 00:07:54,520
really get away from it so I saw this on

209
00:07:54,520 --> 00:07:56,050
reddit last week and thought it was

210
00:07:56,050 --> 00:07:58,360
really funny

211
00:07:58,360 --> 00:08:00,250
the nice thing about this language

212
00:08:00,250 --> 00:08:03,630
though is that because of its unique

213
00:08:03,630 --> 00:08:06,430
position as the language of the web that

214
00:08:06,430 --> 00:08:08,020
means that if you're working on an

215
00:08:08,020 --> 00:08:09,760
application in another language like

216
00:08:09,760 --> 00:08:14,500
Java or Ruby or dotnet or named anything

217
00:08:14,500 --> 00:08:16,210
else if it's touching the web that

218
00:08:16,210 --> 00:08:17,920
project probably has JavaScript in it

219
00:08:17,920 --> 00:08:19,840
somewhere and that's a really cool thing

220
00:08:19,840 --> 00:08:21,570
because that means that these

221
00:08:21,570 --> 00:08:23,320
programmers that are programming in

222
00:08:23,320 --> 00:08:24,910
other languages get to bring all of

223
00:08:24,910 --> 00:08:28,300
their experiences and their design

224
00:08:28,300 --> 00:08:31,630
decisions and their ideas over to this

225
00:08:31,630 --> 00:08:33,430
language and try and influence it and so

226
00:08:33,430 --> 00:08:35,800
Java JavaScript really gets to grow out

227
00:08:35,800 --> 00:08:36,690
of that

228
00:08:36,690 --> 00:08:40,750
some ways better than others a lot of

229
00:08:40,750 --> 00:08:42,880
times people have tried to come in and

230
00:08:42,880 --> 00:08:44,400
change the language into something else

231
00:08:44,400 --> 00:08:47,520
that's true with flash or GWT or

232
00:08:47,520 --> 00:08:51,190
CoffeeScript Dart these languages that

233
00:08:51,190 --> 00:08:54,100
try to usurp JavaScript as the language

234
00:08:54,100 --> 00:08:55,360
of the web and change it into something

235
00:08:55,360 --> 00:08:58,480
else that it's clearly not they are all

236
00:08:58,480 --> 00:09:00,160
failures they're still around in a lot

237
00:09:00,160 --> 00:09:01,630
of way but their failure failures and

238
00:09:01,630 --> 00:09:02,470
that they don't really have a say

239
00:09:02,470 --> 00:09:04,360
get market share not in the way the

240
00:09:04,360 --> 00:09:06,400
JavaScript does and they never will and

241
00:09:06,400 --> 00:09:08,170
the reason is they didn't bet on

242
00:09:08,170 --> 00:09:11,920
JavaScript they instead tried to change

243
00:09:11,920 --> 00:09:13,150
it into something else they didn't

244
00:09:13,150 --> 00:09:15,310
embrace it we're kind of going through

245
00:09:15,310 --> 00:09:17,580
this again potentially with webassembly

246
00:09:17,580 --> 00:09:19,840
it's not trying to be a replacement for

247
00:09:19,840 --> 00:09:23,110
JavaScript but will it be time will tell

248
00:09:23,110 --> 00:09:25,000
I guess on that there's a lot of really

249
00:09:25,000 --> 00:09:26,110
cool stuff that you can do and I'm

250
00:09:26,110 --> 00:09:27,730
really excited for what's coming down

251
00:09:27,730 --> 00:09:30,460
with webassembly but from their own

252
00:09:30,460 --> 00:09:32,740
website it talks about it being a

253
00:09:32,740 --> 00:09:34,810
compliment to JavaScript where you can

254
00:09:34,810 --> 00:09:36,880
do the computationally intensive stuff

255
00:09:36,880 --> 00:09:38,530
in web assembly in a language that

256
00:09:38,530 --> 00:09:40,540
transpose to web assembly and then hand

257
00:09:40,540 --> 00:09:41,980
that off to JavaScript and work with it

258
00:09:41,980 --> 00:09:43,540
like that they also have this

259
00:09:43,540 --> 00:09:46,420
interesting quote that JavaScript has an

260
00:09:46,420 --> 00:09:48,160
incredible amount of momentum and will

261
00:09:48,160 --> 00:09:50,260
remain the single privileged dynamic

262
00:09:50,260 --> 00:09:52,870
language of the web and that's true

263
00:09:52,870 --> 00:09:54,220
but it makes me wonder if their

264
00:09:54,220 --> 00:09:57,280
intentions are to to bring forth another

265
00:09:57,280 --> 00:10:00,480
competitor that's not a dynamic language

266
00:10:00,480 --> 00:10:03,760
so there's a lot of benefits to both

267
00:10:03,760 --> 00:10:06,040
static and dynamic dynamically typed

268
00:10:06,040 --> 00:10:08,740
languages javascript obviously is a

269
00:10:08,740 --> 00:10:10,240
dynamically typed language and that

270
00:10:10,240 --> 00:10:13,120
means that it's very flexible it's less

271
00:10:13,120 --> 00:10:14,800
verbose there's not as much syntax or

272
00:10:14,800 --> 00:10:16,090
ceremony that we have to do to get

273
00:10:16,090 --> 00:10:18,100
things done and it's more tolerant to

274
00:10:18,100 --> 00:10:19,960
change because it does a lot of type

275
00:10:19,960 --> 00:10:21,700
coercion which is not necessarily a good

276
00:10:21,700 --> 00:10:23,980
thing but it's something that a lot of

277
00:10:23,980 --> 00:10:26,860
our code might do from time to time it

278
00:10:26,860 --> 00:10:29,230
also relies less on semantics and it's

279
00:10:29,230 --> 00:10:30,760
easier to test because we don't have

280
00:10:30,760 --> 00:10:32,650
these nominal types that we have to meet

281
00:10:32,650 --> 00:10:34,690
before we can mock things out for

282
00:10:34,690 --> 00:10:36,520
example and it does provide us with a

283
00:10:36,520 --> 00:10:38,500
console and a Ruppel statically typed

284
00:10:38,500 --> 00:10:40,330
languages do provide a lot of benefits

285
00:10:40,330 --> 00:10:43,060
as well though they will bubble the

286
00:10:43,060 --> 00:10:45,670
errors up to the top earlier we don't

287
00:10:45,670 --> 00:10:47,320
have to run our code or run our code in

288
00:10:47,320 --> 00:10:50,320
a specific way to see the error if there

289
00:10:50,320 --> 00:10:53,860
is a syntax error or a logic error the

290
00:10:53,860 --> 00:10:56,380
compiler can usually catch those we get

291
00:10:56,380 --> 00:10:58,030
better in code documentation through

292
00:10:58,030 --> 00:10:59,740
things like type definitions and

293
00:10:59,740 --> 00:11:03,040
interfaces and the compiler is a big a

294
00:11:03,040 --> 00:11:06,720
big advantage in that it allows for a

295
00:11:06,720 --> 00:11:08,470
disconnect between the language you're

296
00:11:08,470 --> 00:11:09,940
writing and the the code that's running

297
00:11:09,940 --> 00:11:13,270
and in there they can optimize the

298
00:11:13,270 --> 00:11:15,310
performance and runtime efficiency of

299
00:11:15,310 --> 00:11:16,120
the application

300
00:11:16,120 --> 00:11:18,220
and overall it can provide a better

301
00:11:18,220 --> 00:11:20,499
design time experience over time because

302
00:11:20,499 --> 00:11:23,649
you get a lot of benefits in tooling

303
00:11:23,649 --> 00:11:25,240
that you don't really get with dynamic

304
00:11:25,240 --> 00:11:28,569
languages so why I have there been all

305
00:11:28,569 --> 00:11:29,680
of these attempts to replace

306
00:11:29,680 --> 00:11:34,300
JavaScript's role in on the web well

307
00:11:34,300 --> 00:11:36,069
it's because JavaScript like we

308
00:11:36,069 --> 00:11:38,410
mentioned it's not an application or a

309
00:11:38,410 --> 00:11:39,819
language that was built to handle the

310
00:11:39,819 --> 00:11:41,920
responsibilities that it has and the

311
00:11:41,920 --> 00:11:43,449
responsibilities that it has are just

312
00:11:43,449 --> 00:11:44,829
too important now because the web is

313
00:11:44,829 --> 00:11:47,559
just huge and JavaScript projects are

314
00:11:47,559 --> 00:11:50,410
changing as well so we are continuing on

315
00:11:50,410 --> 00:11:52,240
with the language it's a great language

316
00:11:52,240 --> 00:11:54,610
it's had a lot of changes that I'll get

317
00:11:54,610 --> 00:11:57,490
to more recently but the way that it was

318
00:11:57,490 --> 00:12:00,579
designed it wasn't really an set up to

319
00:12:00,579 --> 00:12:02,920
handle these tasks but jeaious projects

320
00:12:02,920 --> 00:12:05,350
they do share a lot of similar

321
00:12:05,350 --> 00:12:07,899
characteristics as we use them more and

322
00:12:07,899 --> 00:12:10,209
more and create them the sizes of

323
00:12:10,209 --> 00:12:11,379
JavaScript projects are growing

324
00:12:11,379 --> 00:12:12,999
exponentially they're getting bigger and

325
00:12:12,999 --> 00:12:15,129
bigger and the amount of time that they

326
00:12:15,129 --> 00:12:17,949
survive is getting longer and longer so

327
00:12:17,949 --> 00:12:20,079
they survived several iterations with

328
00:12:20,079 --> 00:12:22,600
different frameworks different different

329
00:12:22,600 --> 00:12:24,009
developers that's a lifetime of the

330
00:12:24,009 --> 00:12:25,089
project so we might have several

331
00:12:25,089 --> 00:12:26,439
developers coming and going on the

332
00:12:26,439 --> 00:12:27,699
project and they're getting really

333
00:12:27,699 --> 00:12:30,249
complex to where you don't have just a

334
00:12:30,249 --> 00:12:31,870
single person that understands every

335
00:12:31,870 --> 00:12:33,790
intricacy of the application you have

336
00:12:33,790 --> 00:12:35,649
several people and then they may come

337
00:12:35,649 --> 00:12:39,279
and go over time so these these

338
00:12:39,279 --> 00:12:40,660
characteristics do introduce some

339
00:12:40,660 --> 00:12:43,089
bottlenecks to understanding the code

340
00:12:43,089 --> 00:12:45,040
and this leads to some increased risks

341
00:12:45,040 --> 00:12:46,749
as we try and change and refactor the

342
00:12:46,749 --> 00:12:48,939
code and in dynamic languages this can

343
00:12:48,939 --> 00:12:51,249
be a little difficult to to work with

344
00:12:51,249 --> 00:12:54,790
and JavaScript just wasn't designed for

345
00:12:54,790 --> 00:12:59,410
this so over the years we have worked

346
00:12:59,410 --> 00:13:01,329
out ways to mitigate this risk that's

347
00:13:01,329 --> 00:13:03,309
imposed by and not just in JavaScript

348
00:13:03,309 --> 00:13:05,980
but in several languages but we really

349
00:13:05,980 --> 00:13:08,649
try and follow key practices like

350
00:13:08,649 --> 00:13:11,230
encapsulation reuse module is a module

351
00:13:11,230 --> 00:13:14,170
organization error detection code style

352
00:13:14,170 --> 00:13:16,870
and annotation and we've done that

353
00:13:16,870 --> 00:13:19,329
through frameworks that have come out so

354
00:13:19,329 --> 00:13:21,129
the language itself doesn't provide us

355
00:13:21,129 --> 00:13:22,749
with a whole lot or it hasn't in the

356
00:13:22,749 --> 00:13:24,519
past so we had to fill that in and

357
00:13:24,519 --> 00:13:26,379
that's where frameworks like dojo

358
00:13:26,379 --> 00:13:28,480
originally filled in a lot of missing

359
00:13:28,480 --> 00:13:29,769
functionality with things like

360
00:13:29,769 --> 00:13:32,769
Jules and promises and things like that

361
00:13:32,769 --> 00:13:35,559
and then jQuery really redefined the way

362
00:13:35,559 --> 00:13:37,809
that we enter we interact with the Dom

363
00:13:37,809 --> 00:13:41,800
requirejs a whole module framework and

364
00:13:41,800 --> 00:13:44,920
then component libraries like backbone

365
00:13:44,920 --> 00:13:46,480
and angular really helped you define

366
00:13:46,480 --> 00:13:49,329
that so this has all been in userland

367
00:13:49,329 --> 00:13:50,829
where we've been innovating in

368
00:13:50,829 --> 00:13:52,449
JavaScript to make up for the

369
00:13:52,449 --> 00:13:55,059
shortcomings in the language but of

370
00:13:55,059 --> 00:13:57,279
course this is 2018 and I'm talking

371
00:13:57,279 --> 00:13:59,429
about JavaScript from from years ago

372
00:13:59,429 --> 00:14:01,899
2018 javascript is much much better and

373
00:14:01,899 --> 00:14:03,639
much much better equipped to handle a

374
00:14:03,639 --> 00:14:06,189
lot of the responsibilities that it has

375
00:14:06,189 --> 00:14:09,069
and that's because it has changed in a

376
00:14:09,069 --> 00:14:10,329
lot of ways we've had several new

377
00:14:10,329 --> 00:14:12,879
features to the language to make it has

378
00:14:12,879 --> 00:14:15,369
better syntactic sugar so that we can be

379
00:14:15,369 --> 00:14:17,049
more expressive in our code and adding

380
00:14:17,049 --> 00:14:18,519
new features that we need to do things

381
00:14:18,519 --> 00:14:21,220
like asynchronous code in a more

382
00:14:21,220 --> 00:14:22,769
readable way a more human readable way

383
00:14:22,769 --> 00:14:25,600
and introducing our own module syntax

384
00:14:25,600 --> 00:14:29,769
and so these things combined with newer

385
00:14:29,769 --> 00:14:32,980
features and tools things like NPM NPM

386
00:14:32,980 --> 00:14:35,160
being the the package manager for

387
00:14:35,160 --> 00:14:37,299
JavaScript meaning the package manager

388
00:14:37,299 --> 00:14:40,839
for the web really allows us to fulfill

389
00:14:40,839 --> 00:14:42,610
the encapsulation reuse and modular

390
00:14:42,610 --> 00:14:46,600
modular ization risk mitigators that are

391
00:14:46,600 --> 00:14:50,799
defined here others include static

392
00:14:50,799 --> 00:14:53,860
analysis tools like es lint for advanced

393
00:14:53,860 --> 00:14:55,990
error detection earlier with with

394
00:14:55,990 --> 00:14:57,519
javascript wherever we can we want to

395
00:14:57,519 --> 00:14:59,649
get that feedback back to the developer

396
00:14:59,649 --> 00:15:01,600
as fast as possible we also introduced a

397
00:15:01,600 --> 00:15:04,089
compile step with babel now because we

398
00:15:04,089 --> 00:15:05,439
want to run tomorrow's JavaScript today

399
00:15:05,439 --> 00:15:07,029
and the only way to do that is to

400
00:15:07,029 --> 00:15:08,889
transpile back to a link to a version of

401
00:15:08,889 --> 00:15:11,619
javascript that can run and then

402
00:15:11,619 --> 00:15:13,089
advanced testing frameworks javascript

403
00:15:13,089 --> 00:15:16,899
has really adopted a a community of

404
00:15:16,899 --> 00:15:19,809
testing and so that has really advanced

405
00:15:19,809 --> 00:15:21,639
the tooling around that as well and that

406
00:15:21,639 --> 00:15:24,249
really helps to get error messages back

407
00:15:24,249 --> 00:15:27,819
to developers quickly and then code

408
00:15:27,819 --> 00:15:30,129
style we've we've kind of standardized

409
00:15:30,129 --> 00:15:32,619
quite a bit on the language itself

410
00:15:32,619 --> 00:15:35,230
providing better syntactic sugar for us

411
00:15:35,230 --> 00:15:36,610
to be more expressive in the ways we

412
00:15:36,610 --> 00:15:38,379
want to do things that's things like D

413
00:15:38,379 --> 00:15:41,110
structuring arrow functions rest and

414
00:15:41,110 --> 00:15:42,990
spread and default values we don't

415
00:15:42,990 --> 00:15:44,459
have to have some obscure syntax to do

416
00:15:44,459 --> 00:15:46,260
that now our code is much more readable

417
00:15:46,260 --> 00:15:49,290
as a result but then beyond that whether

418
00:15:49,290 --> 00:15:53,100
we have spaces or tabs or single or

419
00:15:53,100 --> 00:15:55,200
double quotes or any of that we can kind

420
00:15:55,200 --> 00:15:56,580
of watch all of that away with a

421
00:15:56,580 --> 00:15:58,200
prettier config which is really great so

422
00:15:58,200 --> 00:15:59,970
we can rewrite the code we can write the

423
00:15:59,970 --> 00:16:01,320
code any way we want and then rewrite it

424
00:16:01,320 --> 00:16:04,380
to the way that everyone agrees on but

425
00:16:04,380 --> 00:16:06,570
the big missing thing is annotation and

426
00:16:06,570 --> 00:16:09,540
we can provide annotations in JavaScript

427
00:16:09,540 --> 00:16:11,160
by annotating our code with comments

428
00:16:11,160 --> 00:16:14,730
like J's comments or or other things but

429
00:16:14,730 --> 00:16:17,360
if we really want to take advantage of

430
00:16:17,360 --> 00:16:23,940
any real enforceable annotations we need

431
00:16:23,940 --> 00:16:25,620
to switch to something like flow or

432
00:16:25,620 --> 00:16:29,430
typescript and so ask code these code

433
00:16:29,430 --> 00:16:30,870
bases are getting bigger it's getting

434
00:16:30,870 --> 00:16:32,520
really difficult to rely on unit tests

435
00:16:32,520 --> 00:16:35,250
alone for any kind of large refactoring

436
00:16:35,250 --> 00:16:37,700
efforts and as this quote points out

437
00:16:37,700 --> 00:16:40,560
just relying on a test suite to do any

438
00:16:40,560 --> 00:16:42,839
kind of large refactoring it's a huge

439
00:16:42,839 --> 00:16:44,730
coefficient of friction on actually

440
00:16:44,730 --> 00:16:46,380
doing that because you don't really want

441
00:16:46,380 --> 00:16:47,880
to break the entire application in

442
00:16:47,880 --> 00:16:50,279
subtle ways that you may not realize and

443
00:16:50,279 --> 00:16:51,690
that your tests may not be catching and

444
00:16:51,690 --> 00:16:53,190
so unit tests really aren't cut out for

445
00:16:53,190 --> 00:16:54,899
that I'm not saying that the types

446
00:16:54,899 --> 00:16:57,600
should replace unit tests but they are a

447
00:16:57,600 --> 00:16:59,820
good complement to that and so that's

448
00:16:59,820 --> 00:17:02,160
where I start talking about typescript

449
00:17:02,160 --> 00:17:05,660
now so typescript was created in

450
00:17:05,660 --> 00:17:08,390
Microsoft by Andrew Salzburg who created

451
00:17:08,390 --> 00:17:11,660
c-sharp and turbo Pascal and Delfy and

452
00:17:11,660 --> 00:17:15,120
it was released publicly in 2012 and it

453
00:17:15,120 --> 00:17:17,579
adds type annotations interfaces and

454
00:17:17,579 --> 00:17:20,100
generics and more to the language so

455
00:17:20,100 --> 00:17:21,689
it's it's really a layer on top of

456
00:17:21,689 --> 00:17:24,569
JavaScript that adds all of this to give

457
00:17:24,569 --> 00:17:27,059
us these statically typed advantages in

458
00:17:27,059 --> 00:17:30,030
our dynamic JavaScript language it's

459
00:17:30,030 --> 00:17:32,010
very active community version 3 was just

460
00:17:32,010 --> 00:17:34,380
released and it's a strict superset of

461
00:17:34,380 --> 00:17:35,490
JavaScript and I think that that's

462
00:17:35,490 --> 00:17:37,500
probably the biggest take away with it

463
00:17:37,500 --> 00:17:40,110
is it's not a language like CoffeeScript

464
00:17:40,110 --> 00:17:42,210
or Dart that's trying to change

465
00:17:42,210 --> 00:17:43,920
javascript into something else it's

466
00:17:43,920 --> 00:17:46,070
fully embracing JavaScript and then

467
00:17:46,070 --> 00:17:49,020
extending it with types on top of it and

468
00:17:49,020 --> 00:17:51,630
so it's not changing that in any way and

469
00:17:51,630 --> 00:17:53,970
as long as that is one of its core

470
00:17:53,970 --> 00:17:54,800
design goals

471
00:17:54,800 --> 00:17:58,910
I'm a fan of that but the types are

472
00:17:58,910 --> 00:18:00,380
really the least interesting part of

473
00:18:00,380 --> 00:18:02,990
JavaScript of typescript it's really

474
00:18:02,990 --> 00:18:05,180
what they enable so bringing back that

475
00:18:05,180 --> 00:18:07,970
slide that I had the benefits of dynamic

476
00:18:07,970 --> 00:18:10,250
and Static languages we really get a lot

477
00:18:10,250 --> 00:18:13,130
of the static side over with Java so

478
00:18:13,130 --> 00:18:14,720
with all of the benefits of JavaScript

479
00:18:14,720 --> 00:18:17,630
as well we get a compile step so we get

480
00:18:17,630 --> 00:18:19,640
earlier detection of mistakes in real

481
00:18:19,640 --> 00:18:21,050
time we also get that with the language

482
00:18:21,050 --> 00:18:23,630
service we get better built in

483
00:18:23,630 --> 00:18:25,100
documentation because we can annotate

484
00:18:25,100 --> 00:18:26,990
our code with types so that we know

485
00:18:26,990 --> 00:18:28,760
exactly what method signatures look like

486
00:18:28,760 --> 00:18:32,690
and we can't really call methods in an

487
00:18:32,690 --> 00:18:34,930
incorrect way like we can in JavaScript

488
00:18:34,930 --> 00:18:37,490
and we also get a better design time

489
00:18:37,490 --> 00:18:39,560
developer experience through tooling so

490
00:18:39,560 --> 00:18:43,730
we get a lot of benefits through the the

491
00:18:43,730 --> 00:18:46,100
language server that it provides and so

492
00:18:46,100 --> 00:18:49,100
with that we now have this ability to

493
00:18:49,100 --> 00:18:52,040
easily refactor our code we get

494
00:18:52,040 --> 00:18:53,480
intellisense so we can have Auto

495
00:18:53,480 --> 00:18:55,220
completion that makes sense and that is

496
00:18:55,220 --> 00:18:56,840
accurate and we get a continuous

497
00:18:56,840 --> 00:18:59,240
feedback loop through that that language

498
00:18:59,240 --> 00:19:00,170
service that will give us back

499
00:19:00,170 --> 00:19:01,430
information about the code that we're

500
00:19:01,430 --> 00:19:04,550
running and how how we can use it and

501
00:19:04,550 --> 00:19:06,050
maybe what's wrong with it as we're

502
00:19:06,050 --> 00:19:09,380
typing it so the best part of all of

503
00:19:09,380 --> 00:19:11,660
this is the the best part of typescript

504
00:19:11,660 --> 00:19:13,760
I think is that you really don't have to

505
00:19:13,760 --> 00:19:15,350
switch to typescript to reap some

506
00:19:15,350 --> 00:19:18,410
benefits from it you can add in this

507
00:19:18,410 --> 00:19:20,630
comment this at TS check to your

508
00:19:20,630 --> 00:19:23,270
javascript file and anything that

509
00:19:23,270 --> 00:19:24,680
javascript are the type the type of

510
00:19:24,680 --> 00:19:26,270
language service can infer about your

511
00:19:26,270 --> 00:19:27,830
code it will warn you about so it will

512
00:19:27,830 --> 00:19:29,270
let you know if there are any problems

513
00:19:29,270 --> 00:19:32,360
in your code that you may that may be

514
00:19:32,360 --> 00:19:33,590
subtle enough that you're not seeing

515
00:19:33,590 --> 00:19:35,210
them all without changing anything

516
00:19:35,210 --> 00:19:36,710
except adding a single comment to the

517
00:19:36,710 --> 00:19:39,050
page or you can add a J's config dot

518
00:19:39,050 --> 00:19:41,450
JSON to your project and Visual Studio

519
00:19:41,450 --> 00:19:44,510
code embraces this and uses that on all

520
00:19:44,510 --> 00:19:45,710
of your JavaScript so you get that

521
00:19:45,710 --> 00:19:47,450
automatically but you can get it in any

522
00:19:47,450 --> 00:19:51,560
any editor as well so I've got an

523
00:19:51,560 --> 00:19:54,500
example some example code here that is

524
00:19:54,500 --> 00:19:55,970
just a JavaScript file that has two

525
00:19:55,970 --> 00:19:59,540
methods on it a add method and a to

526
00:19:59,540 --> 00:20:02,570
relative date method and we can just add

527
00:20:02,570 --> 00:20:05,900
in the TS check call a TS check comment

528
00:20:05,900 --> 00:20:08,210
at the top and when we do that

529
00:20:08,210 --> 00:20:10,100
it's not really going to do anything yet

530
00:20:10,100 --> 00:20:11,900
because there's nothing really wrong and

531
00:20:11,900 --> 00:20:13,520
that's because the way that we have it

532
00:20:13,520 --> 00:20:14,990
set up I'm telling it not to worry about

533
00:20:14,990 --> 00:20:19,340
implicit any's so if I disable that now

534
00:20:19,340 --> 00:20:21,350
it will warn me if it doesn't really

535
00:20:21,350 --> 00:20:22,970
know what a value is it's not just going

536
00:20:22,970 --> 00:20:24,140
to implicitly assume that these

537
00:20:24,140 --> 00:20:27,380
arguments are any instead I need to tell

538
00:20:27,380 --> 00:20:28,820
it what they are and I can do that

539
00:20:28,820 --> 00:20:30,650
through J s comments so now I can use

540
00:20:30,650 --> 00:20:33,590
these these comments and I get feedback

541
00:20:33,590 --> 00:20:35,300
from the compiler whether things are

542
00:20:35,300 --> 00:20:37,190
right or wrong so here I immediately can

543
00:20:37,190 --> 00:20:39,170
see that because I told it I pass in two

544
00:20:39,170 --> 00:20:41,330
numbers when I actually called it I was

545
00:20:41,330 --> 00:20:43,580
passing in a string it warned me about

546
00:20:43,580 --> 00:20:46,100
that now in here if I change that and

547
00:20:46,100 --> 00:20:48,530
say the J's comment is this argument is

548
00:20:48,530 --> 00:20:50,270
a date well date doesn't have a replace

549
00:20:50,270 --> 00:20:52,520
method on it so it's giving me a warning

550
00:20:52,520 --> 00:20:53,810
about that but if I change it to a

551
00:20:53,810 --> 00:20:56,390
string then everything is good I can

552
00:20:56,390 --> 00:20:58,340
also if I don't want to use J s comments

553
00:20:58,340 --> 00:21:00,500
I can just give JavaScript away or the

554
00:21:00,500 --> 00:21:01,700
typescript language service a way to

555
00:21:01,700 --> 00:21:04,220
infer about my code what the value

556
00:21:04,220 --> 00:21:07,010
should be and I did that through adding

557
00:21:07,010 --> 00:21:09,020
a default argument to it which is just

558
00:21:09,020 --> 00:21:12,620
an empty string implying that the iso

559
00:21:12,620 --> 00:21:15,500
string argument is going to be a string

560
00:21:15,500 --> 00:21:18,020
it's the JavaScript or typescript just

561
00:21:18,020 --> 00:21:20,420
immediately lets me see that and get

562
00:21:20,420 --> 00:21:22,100
feedback without even having to change

563
00:21:22,100 --> 00:21:24,530
over to JavaScript there are two types

564
00:21:24,530 --> 00:21:28,730
script the next best bar next best part

565
00:21:28,730 --> 00:21:31,460
is that JavaScript and typescript can

566
00:21:31,460 --> 00:21:33,740
co-exist together in the same project so

567
00:21:33,740 --> 00:21:35,570
if you decide that you want to rewrite

568
00:21:35,570 --> 00:21:38,720
over to a statically typed language like

569
00:21:38,720 --> 00:21:40,280
JavaScript or like Ted script you don't

570
00:21:40,280 --> 00:21:42,500
have to do it all at once you can

571
00:21:42,500 --> 00:21:44,630
incrementally do it slowly in any way

572
00:21:44,630 --> 00:21:46,430
that you like you can change one file or

573
00:21:46,430 --> 00:21:47,870
you can change all new files going

574
00:21:47,870 --> 00:21:50,210
forward or you can slowly convert

575
00:21:50,210 --> 00:21:53,620
everything over time and that is a huge

576
00:21:53,620 --> 00:21:56,570
that lessens the barrier to adoption of

577
00:21:56,570 --> 00:21:59,720
typescript which is really great so in

578
00:21:59,720 --> 00:22:01,970
this code I have a javascript file

579
00:22:01,970 --> 00:22:03,320
called article service and I'm just

580
00:22:03,320 --> 00:22:06,620
running my build step to show that it's

581
00:22:06,620 --> 00:22:08,900
all green and then I'm going to go in

582
00:22:08,900 --> 00:22:10,610
and rename the file to TS and

583
00:22:10,610 --> 00:22:12,200
immediately the build will fail and I

584
00:22:12,200 --> 00:22:15,050
will get a few errors because again it

585
00:22:15,050 --> 00:22:17,330
doesn't know what API key is so I can go

586
00:22:17,330 --> 00:22:18,770
ahead and type that and give it a string

587
00:22:18,770 --> 00:22:20,540
and then the article service doesn't

588
00:22:20,540 --> 00:22:21,100
have an ape

589
00:22:21,100 --> 00:22:22,870
Heike on it so I have to tell it that

590
00:22:22,870 --> 00:22:25,450
this class does have that kind of that

591
00:22:25,450 --> 00:22:27,190
property on it and that it's a string

592
00:22:27,190 --> 00:22:29,620
and then the fetch articles method has a

593
00:22:29,620 --> 00:22:32,380
string that you pass into it and then I

594
00:22:32,380 --> 00:22:34,299
can also do things like delete my

595
00:22:34,299 --> 00:22:35,980
command J s specific code and switch

596
00:22:35,980 --> 00:22:38,770
this over to the es module syntax

597
00:22:38,770 --> 00:22:41,200
because the compile step will convert it

598
00:22:41,200 --> 00:22:43,210
to common J's or whatever module format

599
00:22:43,210 --> 00:22:45,669
I'd like now here I'm changing that over

600
00:22:45,669 --> 00:22:47,860
from a string to be a new source type

601
00:22:47,860 --> 00:22:49,240
which is a type that I'm creating I'm

602
00:22:49,240 --> 00:22:50,950
actually creating an enum up here by

603
00:22:50,950 --> 00:22:53,919
converting this object into an enum

604
00:22:53,919 --> 00:22:55,630
because I don't want it to just be any

605
00:22:55,630 --> 00:22:57,820
string I want it to be explicitly these

606
00:22:57,820 --> 00:22:59,650
six strings one of these if it's

607
00:22:59,650 --> 00:23:01,659
anything other than those six then you

608
00:23:01,659 --> 00:23:04,330
should give me an error and then finally

609
00:23:04,330 --> 00:23:06,970
I'm creating an interface because the

610
00:23:06,970 --> 00:23:09,400
fetch article's method should return an

611
00:23:09,400 --> 00:23:11,169
array of articles but I don't really

612
00:23:11,169 --> 00:23:12,909
know what that looks like and so I can

613
00:23:12,909 --> 00:23:14,650
express that in my code you can't really

614
00:23:14,650 --> 00:23:16,120
see it on this projector but there's

615
00:23:16,120 --> 00:23:18,940
comments there that are showing exactly

616
00:23:18,940 --> 00:23:21,280
what values were on there and there were

617
00:23:21,280 --> 00:23:24,190
those values there but now instead of

618
00:23:24,190 --> 00:23:25,299
just having them in comments which

619
00:23:25,299 --> 00:23:26,559
aren't enforceable I have them in an

620
00:23:26,559 --> 00:23:29,320
enforceable way with this interface that

621
00:23:29,320 --> 00:23:31,480
I can type check against and I can

622
00:23:31,480 --> 00:23:32,980
specifically say that the fetch

623
00:23:32,980 --> 00:23:34,690
article's method now will return a

624
00:23:34,690 --> 00:23:38,580
promise that's going to resolve to a

625
00:23:38,580 --> 00:23:42,760
article array so that's a really great

626
00:23:42,760 --> 00:23:45,250
benefit and then another one is that the

627
00:23:45,250 --> 00:23:48,250
the type system can be subverted so one

628
00:23:48,250 --> 00:23:50,289
big benefit of dynamic languages is you

629
00:23:50,289 --> 00:23:52,210
don't have to worry about the exact way

630
00:23:52,210 --> 00:23:53,500
the API will look and you don't have to

631
00:23:53,500 --> 00:23:54,789
code all of that up and create these

632
00:23:54,789 --> 00:23:57,460
interfaces you can subvert the type

633
00:23:57,460 --> 00:23:59,590
system in any way that you at any time

634
00:23:59,590 --> 00:24:02,799
with these compiler checks but you can

635
00:24:02,799 --> 00:24:08,200
also do it by using aliases - custom

636
00:24:08,200 --> 00:24:10,030
types that you might create so in the

637
00:24:10,030 --> 00:24:11,470
previous example where I was using an

638
00:24:11,470 --> 00:24:12,760
article instead of defining that

639
00:24:12,760 --> 00:24:13,929
interface maybe I don't know exactly

640
00:24:13,929 --> 00:24:15,970
what an article will look like well I

641
00:24:15,970 --> 00:24:17,679
can still take advantage of that by

642
00:24:17,679 --> 00:24:21,760
aliasing article to be the any type and

643
00:24:21,760 --> 00:24:23,500
then use that throughout my code and

644
00:24:23,500 --> 00:24:25,480
when I want to change it over to be an

645
00:24:25,480 --> 00:24:28,270
article interface I can just replace

646
00:24:28,270 --> 00:24:29,620
that and import the interface from

647
00:24:29,620 --> 00:24:31,630
anywhere and use that and all of my code

648
00:24:31,630 --> 00:24:33,640
will line up and I'm not just littering

649
00:24:33,640 --> 00:24:34,260
it with any

650
00:24:34,260 --> 00:24:37,860
statements anywhere everywhere so

651
00:24:37,860 --> 00:24:39,950
typescript really encourages you to

652
00:24:39,950 --> 00:24:42,480
develop by exposing these interfaces

653
00:24:42,480 --> 00:24:44,910
really by creating these contracts that

654
00:24:44,910 --> 00:24:47,850
you adhere to and its really simple to

655
00:24:47,850 --> 00:24:49,770
introduce this type checking into your

656
00:24:49,770 --> 00:24:51,930
project as we've seen without really

657
00:24:51,930 --> 00:24:54,660
having to go fully into typescript and

658
00:24:54,660 --> 00:24:56,220
converting everything all at once you

659
00:24:56,220 --> 00:24:57,600
can do as much or as little as you like

660
00:24:57,600 --> 00:25:00,120
the more that you do the more advantages

661
00:25:00,120 --> 00:25:01,280
that you'll get from it though

662
00:25:01,280 --> 00:25:04,020
so it provides this better ergonomics

663
00:25:04,020 --> 00:25:05,910
story for developers on your project

664
00:25:05,910 --> 00:25:07,800
it's easier for everyone to understand

665
00:25:07,800 --> 00:25:10,290
what the API sar it's easier for new

666
00:25:10,290 --> 00:25:11,490
developers who come on to the project

667
00:25:11,490 --> 00:25:13,590
they get the smart tooling to help them

668
00:25:13,590 --> 00:25:16,100
navigate the codebase and learn it and

669
00:25:16,100 --> 00:25:18,720
it makes it easier to maintain that over

670
00:25:18,720 --> 00:25:21,140
time especially as you need to refactor

671
00:25:21,140 --> 00:25:23,820
so I work on an open source project

672
00:25:23,820 --> 00:25:26,130
called dojo which received a complete

673
00:25:26,130 --> 00:25:27,990
rewrite earlier this year completely

674
00:25:27,990 --> 00:25:30,000
over to typescript and specifically to

675
00:25:30,000 --> 00:25:32,400
strict typescript because one main focus

676
00:25:32,400 --> 00:25:35,610
is on developer experience and we think

677
00:25:35,610 --> 00:25:36,960
that typescript really helps us to

678
00:25:36,960 --> 00:25:39,750
deliver on that so it's a really cool

679
00:25:39,750 --> 00:25:41,280
project and I encourage you to check it

680
00:25:41,280 --> 00:25:43,710
out and so I'll leave you with should

681
00:25:43,710 --> 00:25:47,610
you use typescript probably yes but you

682
00:25:47,610 --> 00:25:49,380
can decide at which level you want to

683
00:25:49,380 --> 00:25:51,450
adopt it and then slowly increment that

684
00:25:51,450 --> 00:25:54,720
over time this quote from Ken wheeler

685
00:25:54,720 --> 00:25:57,120
these days if you aren't typing your JS

686
00:25:57,120 --> 00:25:58,860
you're driving without a seat belt on I

687
00:25:58,860 --> 00:26:01,380
think that that's totally totally

688
00:26:01,380 --> 00:26:04,980
realistic and I believe that and so I'll

689
00:26:04,980 --> 00:26:06,900
leave you with always bet on JavaScript

690
00:26:06,900 --> 00:26:11,010
or a strict superset so thank you again

691
00:26:11,010 --> 00:26:13,920
I'm going to be over at the the talk

692
00:26:13,920 --> 00:26:15,420
script podcast booth so come check us

693
00:26:15,420 --> 00:26:20,950
out and thank you very much

