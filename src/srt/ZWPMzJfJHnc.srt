1
00:00:01,700 --> 00:00:07,200

thank you although this Intex of CSS is

2
00:00:07,200 --> 00:00:09,030
relatively easy to learn and understand

3
00:00:09,030 --> 00:00:10,380
development teams around the world and

4
00:00:10,380 --> 00:00:12,360
especially large ones struggle to define

5
00:00:12,360 --> 00:00:14,790
and implement consistent maintainable

6
00:00:14,790 --> 00:00:17,880
and scalable CSS architecture now this

7
00:00:17,880 --> 00:00:19,500
isn't a new problem and in fact you

8
00:00:19,500 --> 00:00:20,880
probably know we have some fairly

9
00:00:20,880 --> 00:00:23,160
reliable and well tested solutions for

10
00:00:23,160 --> 00:00:25,109
these problems and you might even be

11
00:00:25,109 --> 00:00:26,400
surprised to learn that some of these

12
00:00:26,400 --> 00:00:28,529
solutions actually predates the SS

13
00:00:28,529 --> 00:00:31,500
itself but despite this unfortunately

14
00:00:31,500 --> 00:00:33,110
these solutions are often poorly applied

15
00:00:33,110 --> 00:00:35,280
or in the worst case they just simply

16
00:00:35,280 --> 00:00:37,320
disregarded in the context of modern

17
00:00:37,320 --> 00:00:40,140
JavaScript applications we're gonna

18
00:00:40,140 --> 00:00:41,579
discuss some of the reasons for this and

19
00:00:41,579 --> 00:00:43,230
what we can do about it and in the

20
00:00:43,230 --> 00:00:44,280
process of that we're going to take a

21
00:00:44,280 --> 00:00:46,530
look at some of the history of CSS

22
00:00:46,530 --> 00:00:48,239
architecture because I think that

23
00:00:48,239 --> 00:00:49,590
there'll be people in the audience today

24
00:00:49,590 --> 00:00:52,320
who don't have that context and sadly I

25
00:00:52,320 --> 00:00:53,879
think that the CSS community has done

26
00:00:53,879 --> 00:00:55,199
sometimes a pretty bad job at

27
00:00:55,199 --> 00:00:56,940
articulating this knowledge in ways that

28
00:00:56,940 --> 00:00:59,100
are relevant and accessible to new

29
00:00:59,100 --> 00:01:01,379
developers so let's try and do something

30
00:01:01,379 --> 00:01:03,840
about that today we're gonna start our

31
00:01:03,840 --> 00:01:08,010
story in 2009 yeah it was only ten years

32
00:01:08,010 --> 00:01:09,479
ago but it was a completely different

33
00:01:09,479 --> 00:01:11,970
time for front-end web development our

34
00:01:11,970 --> 00:01:13,590
chrome was virtually insignificant it

35
00:01:13,590 --> 00:01:16,650
had a market share of less than 1% the

36
00:01:16,650 --> 00:01:18,240
words responsive design didn't mean

37
00:01:18,240 --> 00:01:20,369
anything either support for media

38
00:01:20,369 --> 00:01:21,630
queries wasn't going to properly land

39
00:01:21,630 --> 00:01:24,450
until around 2010 and that would be the

40
00:01:24,450 --> 00:01:26,729
same year that even Marco would coin the

41
00:01:26,729 --> 00:01:29,009
words responsive web design in the

42
00:01:29,009 --> 00:01:29,549
now-famous

43
00:01:29,549 --> 00:01:32,280
a list a part article surprising to me

44
00:01:32,280 --> 00:01:34,350
when I did my research bootstrap was

45
00:01:34,350 --> 00:01:36,299
also yet to make its mark on the web

46
00:01:36,299 --> 00:01:38,130
it wasn't first published until early

47
00:01:38,130 --> 00:01:41,579
2011 and for the most part the few open

48
00:01:41,579 --> 00:01:43,079
source UI libraries that we had

49
00:01:43,079 --> 00:01:45,420
available to us at the time seemed to

50
00:01:45,420 --> 00:01:47,640
emulate the desktop interfaces of the

51
00:01:47,640 --> 00:01:50,729
early 2000s now shadow out if anyone

52
00:01:50,729 --> 00:01:52,740
remembers the Yui library it has an age

53
00:01:52,740 --> 00:01:55,680
particularly well but in 2006 it was

54
00:01:55,680 --> 00:01:58,710
absolutely indispensable the weather

55
00:01:58,710 --> 00:02:00,000
this time was also exceptionally

56
00:02:00,000 --> 00:02:03,180
fragmented between late 2009 and early

57
00:02:03,180 --> 00:02:05,610
2012 all of the major browsers were

58
00:02:05,610 --> 00:02:07,710
battling for market share we also had

59
00:02:07,710 --> 00:02:10,530
introduction of mobile browsers around

60
00:02:10,530 --> 00:02:12,810
this time as well and during that battle

61
00:02:12,810 --> 00:02:13,650
none of them really

62
00:02:13,650 --> 00:02:17,099
less than 10% of that market share the

63
00:02:17,099 --> 00:02:19,560
web was also maturing internet usage in

64
00:02:19,560 --> 00:02:20,579
developed countries had reached about

65
00:02:20,579 --> 00:02:23,790
70% of the population which was nice if

66
00:02:23,790 --> 00:02:25,230
you were living in a developed country I

67
00:02:25,230 --> 00:02:28,799
guess 2009 was also the year that we got

68
00:02:28,799 --> 00:02:30,510
preprocessors so we got less and sass

69
00:02:30,510 --> 00:02:32,250
and that's the old version of sass not

70
00:02:32,250 --> 00:02:34,739
the newest CSS one so anyway all this

71
00:02:34,739 --> 00:02:36,090
stuff was happening and I can't be sure

72
00:02:36,090 --> 00:02:37,739
which if any of these factors had

73
00:02:37,739 --> 00:02:39,030
anything to do with it but it was around

74
00:02:39,030 --> 00:02:40,170
this time too that there was this

75
00:02:40,170 --> 00:02:42,569
explosion of ideas and thinking around

76
00:02:42,569 --> 00:02:46,680
CSS architecture so in 2009 Nicole

77
00:02:46,680 --> 00:02:49,290
Sullivan introduced the idea of oo CSS

78
00:02:49,290 --> 00:02:51,389
or object-oriented CSS and this taught

79
00:02:51,389 --> 00:02:53,849
us a lot the main idea was to separate

80
00:02:53,849 --> 00:02:56,250
the layout styles from the visual styles

81
00:02:56,250 --> 00:02:58,379
which he called skins and the other

82
00:02:58,379 --> 00:03:01,049
really important idea of Ojo CSS was to

83
00:03:01,049 --> 00:03:02,639
treat class names like these objects

84
00:03:02,639 --> 00:03:04,950
that we can extend and modify in

85
00:03:04,950 --> 00:03:07,530
different ways as you might have guessed

86
00:03:07,530 --> 00:03:09,629
and as the name suggests one of the key

87
00:03:09,629 --> 00:03:11,370
influences for this concept was

88
00:03:11,370 --> 00:03:13,799
object-oriented programming now I don't

89
00:03:13,799 --> 00:03:15,569
know how many of you have done any

90
00:03:15,569 --> 00:03:17,310
object-oriented programming but for

91
00:03:17,310 --> 00:03:18,750
those that haven't it's a way of writing

92
00:03:18,750 --> 00:03:21,540
programs with properties and functions

93
00:03:21,540 --> 00:03:25,440
that can sort of emulate or represent

94
00:03:25,440 --> 00:03:27,959
objects in the real world so I want to

95
00:03:27,959 --> 00:03:30,449
give you an example of this so I might

96
00:03:30,449 --> 00:03:33,629
have a user object in an application and

97
00:03:33,629 --> 00:03:35,159
it might have properties like a user

98
00:03:35,159 --> 00:03:37,889
name and it might have a flag which says

99
00:03:37,889 --> 00:03:40,859
whether that user is logged in or not it

100
00:03:40,859 --> 00:03:42,510
might have functions as well so if I

101
00:03:42,510 --> 00:03:43,889
want to login a use of the functions

102
00:03:43,889 --> 00:03:46,079
would like typically change one of the

103
00:03:46,079 --> 00:03:49,500
values here so my logged in function

104
00:03:49,500 --> 00:03:51,150
just changed the value of logged in to

105
00:03:51,150 --> 00:03:52,620
true I should probably check a password

106
00:03:52,620 --> 00:03:53,190
or something

107
00:03:53,190 --> 00:03:55,919
but I think you get the example now when

108
00:03:55,919 --> 00:03:57,690
we group these together in an object

109
00:03:57,690 --> 00:04:00,269
like this many languages call this a

110
00:04:00,269 --> 00:04:02,940
class and this is how you write one in

111
00:04:02,940 --> 00:04:04,859
JavaScript and an interesting thing

112
00:04:04,859 --> 00:04:07,290
about a class is when we have a class we

113
00:04:07,290 --> 00:04:10,530
can instantiate a new object so I could

114
00:04:10,530 --> 00:04:13,680
say user Mike equals a new user and then

115
00:04:13,680 --> 00:04:15,120
I can call the login method for that

116
00:04:15,120 --> 00:04:16,709
specific user and that user will be

117
00:04:16,709 --> 00:04:19,139
logged in in my application so that's it

118
00:04:19,139 --> 00:04:21,359
that's sort of object-oriented

119
00:04:21,359 --> 00:04:23,099
programming in a little over two slides

120
00:04:23,099 --> 00:04:24,810
you're all experts now but you're

121
00:04:24,810 --> 00:04:26,370
probably thinking like this is great but

122
00:04:26,370 --> 00:04:27,000
what in

123
00:04:27,000 --> 00:04:28,110
in the world does this have to do with

124
00:04:28,110 --> 00:04:30,120
HTML and CSS right they're completely

125
00:04:30,120 --> 00:04:33,060
different but perhaps they're not so

126
00:04:33,060 --> 00:04:34,500
different I could give you a different

127
00:04:34,500 --> 00:04:37,830
type of example so I could have a button

128
00:04:37,830 --> 00:04:39,750
object and it might have properties like

129
00:04:39,750 --> 00:04:42,810
type and value and it might have methods

130
00:04:42,810 --> 00:04:45,630
or functions like on click now this is

131
00:04:45,630 --> 00:04:48,450
also a representation of an object now

132
00:04:48,450 --> 00:04:50,160
admittedly it is a slightly different

133
00:04:50,160 --> 00:04:51,900
example than the one I gave you before

134
00:04:51,900 --> 00:04:54,150
we're not writing a class we're creating

135
00:04:54,150 --> 00:04:56,550
a new instance of that object by writing

136
00:04:56,550 --> 00:04:59,760
HTML but somewhere in the browser's own

137
00:04:59,760 --> 00:05:02,130
source code is a representation of a

138
00:05:02,130 --> 00:05:05,010
button object and went once the HTML is

139
00:05:05,010 --> 00:05:06,240
passed and understood by the browser

140
00:05:06,240 --> 00:05:08,400
it's going to make a call to create a

141
00:05:08,400 --> 00:05:09,930
new button with the properties that we

142
00:05:09,930 --> 00:05:12,060
set in the HTML something probably looks

143
00:05:12,060 --> 00:05:15,090
exactly like this so what should be

144
00:05:15,090 --> 00:05:17,010
apparent here is elements in HTML or

145
00:05:17,010 --> 00:05:18,600
more specifically the Dom have this

146
00:05:18,600 --> 00:05:21,300
object oriented model it's inherently

147
00:05:21,300 --> 00:05:22,890
present and we can't really step outside

148
00:05:22,890 --> 00:05:24,390
of it so it probably should influence

149
00:05:24,390 --> 00:05:26,430
some of how we look at style

150
00:05:26,430 --> 00:05:28,740
architecture on the web so let's take a

151
00:05:28,740 --> 00:05:30,330
look at some other sort of like

152
00:05:30,330 --> 00:05:31,950
fundamental features of object-oriented

153
00:05:31,950 --> 00:05:33,540
programming and how they relate more

154
00:05:33,540 --> 00:05:37,800
directly to CSS so in object-oriented

155
00:05:37,800 --> 00:05:39,300
programming another really important

156
00:05:39,300 --> 00:05:40,380
feature that I want to mention is that

157
00:05:40,380 --> 00:05:42,960
classes can be extended when you extend

158
00:05:42,960 --> 00:05:44,970
a class it's going to inherit properties

159
00:05:44,970 --> 00:05:46,800
from the parent object so in this

160
00:05:46,800 --> 00:05:48,690
example the button component is going to

161
00:05:48,690 --> 00:05:50,220
inherit some properties from reacted or

162
00:05:50,220 --> 00:05:52,020
component that's if you've written any

163
00:05:52,020 --> 00:05:53,370
react this is where it gets its life

164
00:05:53,370 --> 00:05:54,990
cycle methods and other things all of

165
00:05:54,990 --> 00:05:56,610
this sort of like happens a little bit

166
00:05:56,610 --> 00:06:00,150
magically so most object-oriented

167
00:06:00,150 --> 00:06:01,890
languages support this kind of

168
00:06:01,890 --> 00:06:03,060
inheritance and you probably know that

169
00:06:03,060 --> 00:06:04,229
when you get something that you don't

170
00:06:04,229 --> 00:06:06,870
want you override it it turns out that

171
00:06:06,870 --> 00:06:09,570
CSS also supports something similar to

172
00:06:09,570 --> 00:06:11,250
this kind of inheritance so in this

173
00:06:11,250 --> 00:06:13,200
example here we've got background purple

174
00:06:13,200 --> 00:06:15,330
and text tomato classes applied to the

175
00:06:15,330 --> 00:06:17,010
paragraph and we know that it's going to

176
00:06:17,010 --> 00:06:18,510
have properties from both of those

177
00:06:18,510 --> 00:06:21,479
classes so this is kind of almost a

178
00:06:21,479 --> 00:06:23,220
little bit like saying text tomato

179
00:06:23,220 --> 00:06:25,500
extends background purple it's going to

180
00:06:25,500 --> 00:06:27,120
inherit all of the properties from the

181
00:06:27,120 --> 00:06:28,530
parent class unless we explicitly

182
00:06:28,530 --> 00:06:31,410
overwrite them in CSS and you'll all

183
00:06:31,410 --> 00:06:33,720
know how to do that and because CSS is

184
00:06:33,720 --> 00:06:35,610
decorative it's actually often harder to

185
00:06:35,610 --> 00:06:37,080
work out which is the parent class in

186
00:06:37,080 --> 00:06:38,880
this example that can depend on the

187
00:06:38,880 --> 00:06:40,950
Cascade and the HTML and other things

188
00:06:40,950 --> 00:06:43,770
so we all know that this can get pretty

189
00:06:43,770 --> 00:06:45,180
complicated right and when there's a

190
00:06:45,180 --> 00:06:46,500
risk of inheriting something that you

191
00:06:46,500 --> 00:06:48,510
didn't intend and you're probably

192
00:06:48,510 --> 00:06:50,130
thinking I'll CSS you scamp this

193
00:06:50,130 --> 00:06:52,580
wouldn't happen in any other language

194
00:06:52,580 --> 00:06:55,650
except it does and one of the challenges

195
00:06:55,650 --> 00:06:57,450
with object-oriented programming is that

196
00:06:57,450 --> 00:06:59,460
changes to the parent object can cascade

197
00:06:59,460 --> 00:07:01,920
down and have unintended consequences on

198
00:07:01,920 --> 00:07:04,950
child items does that sound familiar to

199
00:07:04,950 --> 00:07:09,360
anyone so coincidentally also in 2009

200
00:07:09,360 --> 00:07:11,130
computer scientist Joe Armstrong wrote

201
00:07:11,130 --> 00:07:12,870
in the book coders at work that the

202
00:07:12,870 --> 00:07:14,220
problem with object-oriented programming

203
00:07:14,220 --> 00:07:16,500
was you wanted a banana but what you got

204
00:07:16,500 --> 00:07:18,750
was a gorilla holding a banana and the

205
00:07:18,750 --> 00:07:20,850
entire jungle now there's many

206
00:07:20,850 --> 00:07:22,620
variations of this statement but what it

207
00:07:22,620 --> 00:07:24,780
means is when done badly classes in

208
00:07:24,780 --> 00:07:25,890
object-oriented programming and

209
00:07:25,890 --> 00:07:27,480
needlessly connected to all of these

210
00:07:27,480 --> 00:07:29,490
other things in the code you start

211
00:07:29,490 --> 00:07:31,080
having to override properties that you

212
00:07:31,080 --> 00:07:33,390
didn't intend to inherit and it starts

213
00:07:33,390 --> 00:07:34,560
to feel like you're carrying the legacy

214
00:07:34,560 --> 00:07:36,600
of the entire application any time you

215
00:07:36,600 --> 00:07:38,970
write something new once again that

216
00:07:38,970 --> 00:07:41,820
should be feeling familiar as it turns

217
00:07:41,820 --> 00:07:43,320
out there is also a well-established

218
00:07:43,320 --> 00:07:45,180
convention for avoiding this problem in

219
00:07:45,180 --> 00:07:46,950
object-oriented programming and you

220
00:07:46,950 --> 00:07:47,520
might have heard of the phrase

221
00:07:47,520 --> 00:07:49,710
composition over inheritance but what

222
00:07:49,710 --> 00:07:51,390
this means is that by combining these

223
00:07:51,390 --> 00:07:53,310
smaller independent and sometimes more

224
00:07:53,310 --> 00:07:55,740
abstract classes rather than just sort

225
00:07:55,740 --> 00:07:57,990
of in inheriting something and changing

226
00:07:57,990 --> 00:07:59,760
an existing object we end up with these

227
00:07:59,760 --> 00:08:02,070
smaller self-contained objects and this

228
00:08:02,070 --> 00:08:04,430
can help to reduce those unintended

229
00:08:04,430 --> 00:08:07,860
behaviors as a result of inheritance so

230
00:08:07,860 --> 00:08:10,260
in other words it's harder to turn

231
00:08:10,260 --> 00:08:11,880
something into something it's not

232
00:08:11,880 --> 00:08:14,010
than it is to build something new from a

233
00:08:14,010 --> 00:08:16,170
set of well considered and abstract

234
00:08:16,170 --> 00:08:18,570
building blocks that's how I like to

235
00:08:18,570 --> 00:08:20,100
think of it and that's how I like to

236
00:08:20,100 --> 00:08:23,250
think of CSS as well so object oriented

237
00:08:23,250 --> 00:08:26,460
CSS had this idea of abstract building

238
00:08:26,460 --> 00:08:28,170
blocks but I found that we're not really

239
00:08:28,170 --> 00:08:30,270
very good at considering what it is that

240
00:08:30,270 --> 00:08:31,650
makes an abstract building block in

241
00:08:31,650 --> 00:08:33,750
modern JavaScript applications and I

242
00:08:33,750 --> 00:08:35,520
want to ask the audience how reusable

243
00:08:35,520 --> 00:08:37,229
were the components in the last

244
00:08:37,229 --> 00:08:38,729
JavaScript application you've got to

245
00:08:38,729 --> 00:08:41,430
work on and I want to ask why is it so

246
00:08:41,430 --> 00:08:44,760
damn hard to make reusable components in

247
00:08:44,760 --> 00:08:47,970
JavaScript it really is so you might

248
00:08:47,970 --> 00:08:50,910
have seen this slide before the idea

249
00:08:50,910 --> 00:08:52,800
here is basically that we reject the

250
00:08:52,800 --> 00:08:53,750
separation of concern

251
00:08:53,750 --> 00:08:55,820
along these technology boundaries and

252
00:08:55,820 --> 00:08:57,230
instead that maybe components make a

253
00:08:57,230 --> 00:08:59,210
better separation of concerns and this

254
00:08:59,210 --> 00:09:01,370
idea resonated with a lot of people and

255
00:09:01,370 --> 00:09:03,350
I understand why I kind of agree with

256
00:09:03,350 --> 00:09:05,390
this and I've been co-locating a style

257
00:09:05,390 --> 00:09:06,770
sheets and JavaScript files for a long

258
00:09:06,770 --> 00:09:08,840
time but I feel like we've rushed to

259
00:09:08,840 --> 00:09:11,180
this without necessarily considering

260
00:09:11,180 --> 00:09:12,530
what is it about components that make

261
00:09:12,530 --> 00:09:15,560
them a good set or a good separation of

262
00:09:15,560 --> 00:09:17,810
concerns and when I think about that I

263
00:09:17,810 --> 00:09:20,030
think that good abstract building blocks

264
00:09:20,030 --> 00:09:22,430
for me the answer is not really as

265
00:09:22,430 --> 00:09:24,260
simple as the visual boundaries of a

266
00:09:24,260 --> 00:09:25,580
component you can't just draw a box

267
00:09:25,580 --> 00:09:26,870
around the design and be done with it

268
00:09:26,870 --> 00:09:29,270
and once again I feel like we have some

269
00:09:29,270 --> 00:09:32,750
answers to this problem in the history

270
00:09:32,750 --> 00:09:35,240
of CSS architecture so the meteor object

271
00:09:35,240 --> 00:09:37,640
was a classic example of this idea of an

272
00:09:37,640 --> 00:09:39,470
abstract building block and it was the

273
00:09:39,470 --> 00:09:40,670
probably the poster child of

274
00:09:40,670 --> 00:09:43,520
object-oriented CSS the idea is that you

275
00:09:43,520 --> 00:09:44,900
have like this title in this image and

276
00:09:44,900 --> 00:09:46,370
the image might be positioned to the

277
00:09:46,370 --> 00:09:48,170
left or the right and you might have a

278
00:09:48,170 --> 00:09:50,480
date or you might not it doesn't really

279
00:09:50,480 --> 00:09:52,310
matter the point is that the layout is

280
00:09:52,310 --> 00:09:53,720
separate from the content there's just

281
00:09:53,720 --> 00:09:54,890
these slots that the content gets

282
00:09:54,890 --> 00:09:56,510
rendered into and with these basic

283
00:09:56,510 --> 00:09:58,370
patterns and a few variations on this we

284
00:09:58,370 --> 00:09:59,480
can create a whole range of different

285
00:09:59,480 --> 00:10:01,880
types of content including user profiles

286
00:10:01,880 --> 00:10:04,160
comments it's the basic building block

287
00:10:04,160 --> 00:10:06,740
for sites like Twitter Facebook once you

288
00:10:06,740 --> 00:10:07,880
start looking for this on the web you'll

289
00:10:07,880 --> 00:10:10,190
see it absolutely everywhere and we can

290
00:10:10,190 --> 00:10:11,930
apply this concept to modern JavaScript

291
00:10:11,930 --> 00:10:13,580
applications too by thinking about the

292
00:10:13,580 --> 00:10:16,010
different types of responsibilities that

293
00:10:16,010 --> 00:10:19,880
UI components have so object oriented

294
00:10:19,880 --> 00:10:22,580
CSS gave us layouts and skins and I want

295
00:10:22,580 --> 00:10:23,870
to talk about some of some different

296
00:10:23,870 --> 00:10:25,370
types of components the first one I want

297
00:10:25,370 --> 00:10:28,040
to introduce you to is layout components

298
00:10:28,040 --> 00:10:30,020
now layout components are responsible

299
00:10:30,020 --> 00:10:31,550
for the positioning and spacing of

300
00:10:31,550 --> 00:10:33,620
themselves as well as the items inside

301
00:10:33,620 --> 00:10:35,660
them I have some tips for working with

302
00:10:35,660 --> 00:10:38,120
layout components so the first one is

303
00:10:38,120 --> 00:10:40,010
that layout components should own both

304
00:10:40,010 --> 00:10:42,190
sides of the parent-child relationship

305
00:10:42,190 --> 00:10:45,020
and what I mean by this is in modern CSS

306
00:10:45,020 --> 00:10:47,660
right in in layout in modern CSS there's

307
00:10:47,660 --> 00:10:50,150
usually a flex container and a flex item

308
00:10:50,150 --> 00:10:52,100
in a grid container and a grid item

309
00:10:52,100 --> 00:10:53,690
right there's these two things parent

310
00:10:53,690 --> 00:10:55,250
and child which together are responsible

311
00:10:55,250 --> 00:10:57,770
for layout and conflict arises when the

312
00:10:57,770 --> 00:10:59,630
Styles applied to these two things don't

313
00:10:59,630 --> 00:11:01,850
necessarily match and so when they're

314
00:11:01,850 --> 00:11:03,260
separate components that becomes very

315
00:11:03,260 --> 00:11:05,720
difficult so what you want to do is you

316
00:11:05,720 --> 00:11:06,940
want the layout components to own

317
00:11:06,940 --> 00:11:09,520
those concerns and there are a few

318
00:11:09,520 --> 00:11:13,480
different ways that we can do this so we

319
00:11:13,480 --> 00:11:15,400
can use the star selector to target all

320
00:11:15,400 --> 00:11:17,410
of the immediate children of a layout

321
00:11:17,410 --> 00:11:20,350
component this works even with CSS in

322
00:11:20,350 --> 00:11:21,670
jeaious libraries or at least all the

323
00:11:21,670 --> 00:11:23,740
ones that you should be using and you

324
00:11:23,740 --> 00:11:24,880
might be interested to know that the

325
00:11:24,880 --> 00:11:26,200
star selector doesn't increase

326
00:11:26,200 --> 00:11:27,790
specifically so if you need to actually

327
00:11:27,790 --> 00:11:31,750
override this with classic CSS that

328
00:11:31,750 --> 00:11:34,540
works as well this approach might seem a

329
00:11:34,540 --> 00:11:36,580
little bit simple but in most cases it

330
00:11:36,580 --> 00:11:37,870
just works and probably should be the

331
00:11:37,870 --> 00:11:39,760
first thing that you reach for in many

332
00:11:39,760 --> 00:11:46,030
situations another option is the layout

333
00:11:46,030 --> 00:11:47,440
component can be responsible for

334
00:11:47,440 --> 00:11:49,150
rendering the mark-up that wraps child

335
00:11:49,150 --> 00:11:52,690
items so this allows us to more directly

336
00:11:52,690 --> 00:11:54,580
own both sides of that parent-child

337
00:11:54,580 --> 00:11:56,710
relationship it also means that we can

338
00:11:56,710 --> 00:11:58,300
when we loop over something like a list

339
00:11:58,300 --> 00:12:00,700
we can ensure that those items have the

340
00:12:00,700 --> 00:12:02,140
right elements used and we can also

341
00:12:02,140 --> 00:12:04,000
ensure accessibility so this is a really

342
00:12:04,000 --> 00:12:05,980
great technique if you have a very

343
00:12:05,980 --> 00:12:08,200
structured thing and you want to insure

344
00:12:08,200 --> 00:12:11,250
specific accessible and semantic markup

345
00:12:11,250 --> 00:12:13,030
however this is a little bit problematic

346
00:12:13,030 --> 00:12:15,310
if we have like more items being passed

347
00:12:15,310 --> 00:12:17,650
down to that component we might have

348
00:12:17,650 --> 00:12:19,030
multiple slots that we want to render a

349
00:12:19,030 --> 00:12:21,010
things into they might be dynamic

350
00:12:21,010 --> 00:12:23,170
layouts and things like that so as a

351
00:12:23,170 --> 00:12:25,540
final escape hatch for more complicated

352
00:12:25,540 --> 00:12:28,300
components we can simply export these

353
00:12:28,300 --> 00:12:30,040
styles from the parent component from

354
00:12:30,040 --> 00:12:32,290
the layout component and then import

355
00:12:32,290 --> 00:12:34,930
these in child items where we want to

356
00:12:34,930 --> 00:12:37,000
use them so this allows you to co-locate

357
00:12:37,000 --> 00:12:39,550
those layout concerns but it also

358
00:12:39,550 --> 00:12:42,430
creates like a direct link or dependency

359
00:12:42,430 --> 00:12:44,980
between those two items which is always

360
00:12:44,980 --> 00:12:47,500
there but that actual link or that

361
00:12:47,500 --> 00:12:49,330
dependency in our code is usually absent

362
00:12:49,330 --> 00:12:50,950
and that's where a problem should have

363
00:12:50,950 --> 00:12:52,540
arise when we move things around and

364
00:12:52,540 --> 00:12:55,000
don't realize this dependency so that's

365
00:12:55,000 --> 00:12:56,920
that's my final tip for working with

366
00:12:56,920 --> 00:12:59,670
those in addition to layout components

367
00:12:59,670 --> 00:13:02,230
we also have these UI components which

368
00:13:02,230 --> 00:13:03,790
I've already sort of talked about and

369
00:13:03,790 --> 00:13:04,960
these are the things that get rendered

370
00:13:04,960 --> 00:13:07,210
inside of those layout slots now I have

371
00:13:07,210 --> 00:13:08,650
a few tips for working with those as

372
00:13:08,650 --> 00:13:11,410
well the first one is that UI components

373
00:13:11,410 --> 00:13:13,690
should be little more than decorated

374
00:13:13,690 --> 00:13:16,390
HTML elements and what I mean by this is

375
00:13:16,390 --> 00:13:18,100
you might have an input and a search

376
00:13:18,100 --> 00:13:20,260
button together like this I would call a

377
00:13:20,260 --> 00:13:20,740
structure

378
00:13:20,740 --> 00:13:24,100
like this layout but the button and the

379
00:13:24,100 --> 00:13:25,959
input individually are both UI

380
00:13:25,959 --> 00:13:28,570
components they might have styles like

381
00:13:28,570 --> 00:13:30,610
this that look absolutely ridiculous if

382
00:13:30,610 --> 00:13:31,959
they're not used together and they might

383
00:13:31,959 --> 00:13:34,630
always be used together but this this

384
00:13:34,630 --> 00:13:36,700
visual link is not the right reason to

385
00:13:36,700 --> 00:13:39,670
co-locate these Styles separately they

386
00:13:39,670 --> 00:13:42,700
make a far better set of reusable

387
00:13:42,700 --> 00:13:46,899
abstract building blocks my next tip is

388
00:13:46,899 --> 00:13:48,700
that UI components should be size

389
00:13:48,700 --> 00:13:51,190
agnostic and that means avoiding fixed

390
00:13:51,190 --> 00:13:52,649
widths and Heights wherever possible

391
00:13:52,649 --> 00:13:55,390
when UI components overflow the layout

392
00:13:55,390 --> 00:13:57,910
containers that means that something's

393
00:13:57,910 --> 00:14:00,670
probably not right with the layout and

394
00:14:00,670 --> 00:14:03,279
the solution is not to add CSS to the UI

395
00:14:03,279 --> 00:14:05,589
component to sort of fix that please

396
00:14:05,589 --> 00:14:08,110
please please please please

397
00:14:08,110 --> 00:14:10,209
fix this at the source because I've

398
00:14:10,209 --> 00:14:12,279
spent so much time on picking this in

399
00:14:12,279 --> 00:14:14,230
projects and the more patches we add the

400
00:14:14,230 --> 00:14:16,720
harder it becomes I know it's not always

401
00:14:16,720 --> 00:14:18,940
simple so if you need use utility

402
00:14:18,940 --> 00:14:22,089
classes utility components or props if

403
00:14:22,089 --> 00:14:24,839
you need to override specific components

404
00:14:24,839 --> 00:14:26,920
when you're working instead of like Java

405
00:14:26,920 --> 00:14:28,810
Script land here but whatever you do

406
00:14:28,810 --> 00:14:30,760
avoid hard coding fix widths and Heights

407
00:14:30,760 --> 00:14:34,690
wherever possible if nothing else other

408
00:14:34,690 --> 00:14:36,910
than visual consistency in the design

409
00:14:36,910 --> 00:14:38,170
it's important to know the number of

410
00:14:38,170 --> 00:14:40,440
variations that we have for UI component

411
00:14:40,440 --> 00:14:42,940
it sounds simple but it's actually

412
00:14:42,940 --> 00:14:44,890
incredibly hard to know when working

413
00:14:44,890 --> 00:14:46,690
with modern JavaScript applications and

414
00:14:46,690 --> 00:14:48,430
luckily again I feel like we have some

415
00:14:48,430 --> 00:14:50,529
solutions from CSS architecture that we

416
00:14:50,529 --> 00:14:56,380
can draw from in 2011 shortly after oCSS

417
00:14:56,380 --> 00:14:57,940
the wonderful Canadian gentleman

418
00:14:57,940 --> 00:15:01,270
Jonathan snook gave us max now Smacks

419
00:15:01,270 --> 00:15:02,890
taught us how to like categorize

420
00:15:02,890 --> 00:15:04,450
different parts of our stylesheet to

421
00:15:04,450 --> 00:15:08,100
deal with things like themes layouts

422
00:15:08,100 --> 00:15:10,329
global defaults but most importantly for

423
00:15:10,329 --> 00:15:14,079
my talk is application state jonathan

424
00:15:14,079 --> 00:15:15,850
reached many of the same conclusions as

425
00:15:15,850 --> 00:15:17,260
nicole did and i don't want to cover

426
00:15:17,260 --> 00:15:18,760
that ground again but unique to Smacks

427
00:15:18,760 --> 00:15:20,500
were these ideas of state in what he

428
00:15:20,500 --> 00:15:22,959
called modules I'm going to call them

429
00:15:22,959 --> 00:15:26,320
components so to paraphrase max we

430
00:15:26,320 --> 00:15:28,149
usually have or we can usually reduce

431
00:15:28,149 --> 00:15:30,630
the UI state down to three main types

432
00:15:30,630 --> 00:15:32,930
modifier states

433
00:15:32,930 --> 00:15:36,730
behavioral states and pseudo states

434
00:15:36,730 --> 00:15:39,189
typically you can only have one

435
00:15:39,189 --> 00:15:42,410
behavioral and one modifier state active

436
00:15:42,410 --> 00:15:43,850
at any time and smacks even had

437
00:15:43,850 --> 00:15:45,319
techniques for ensuring that we did this

438
00:15:45,319 --> 00:15:47,509
it suggested using data attributes so

439
00:15:47,509 --> 00:15:49,040
that selectors can only really target

440
00:15:49,040 --> 00:15:50,990
one item because the data attribute can

441
00:15:50,990 --> 00:15:53,600
only have one thing unlike a class the

442
00:15:53,600 --> 00:15:55,220
good thing is that like libraries like

443
00:15:55,220 --> 00:15:57,199
react and angular they actually make

444
00:15:57,199 --> 00:15:59,360
this even easier so when I when I'm

445
00:15:59,360 --> 00:16:01,009
trying to work this out right we should

446
00:16:01,009 --> 00:16:03,199
only have large say loading as a

447
00:16:03,199 --> 00:16:04,939
behavioral State and focus we should

448
00:16:04,939 --> 00:16:06,769
only have one of those columns active

449
00:16:06,769 --> 00:16:08,749
and when I start a project I like to map

450
00:16:08,749 --> 00:16:11,059
out the UI state for components like

451
00:16:11,059 --> 00:16:13,819
this if you find that it's possible to

452
00:16:13,819 --> 00:16:16,160
have two behavioral States active at any

453
00:16:16,160 --> 00:16:18,110
one time what you can do is you can

454
00:16:18,110 --> 00:16:19,610
split these into two categories say

455
00:16:19,610 --> 00:16:21,649
Network State and the red state if you

456
00:16:21,649 --> 00:16:23,470
can imagine for an article or something

457
00:16:23,470 --> 00:16:25,879
but be careful if you do this right

458
00:16:25,879 --> 00:16:28,309
because usually when I find this is the

459
00:16:28,309 --> 00:16:29,899
case I very quickly realized that I

460
00:16:29,899 --> 00:16:31,279
actually have two components here

461
00:16:31,279 --> 00:16:34,399
pretending to be one once I know how

462
00:16:34,399 --> 00:16:36,980
many components I have I can draw them

463
00:16:36,980 --> 00:16:39,470
like this because life's easier when

464
00:16:39,470 --> 00:16:40,939
that's not the case but this state is

465
00:16:40,939 --> 00:16:43,970
sometimes additive right behavioral

466
00:16:43,970 --> 00:16:45,709
states might change depending on the

467
00:16:45,709 --> 00:16:47,209
modifier state and the pseudo state

468
00:16:47,209 --> 00:16:48,499
might change depending on combination of

469
00:16:48,499 --> 00:16:52,639
the behavior and the modifier so if we

470
00:16:52,639 --> 00:16:54,050
think of these variations is kind of

471
00:16:54,050 --> 00:16:56,929
like one direction all right the

472
00:16:56,929 --> 00:16:58,999
behavior state becomes easy - sorry the

473
00:16:58,999 --> 00:17:00,529
total number of state becomes easy to

474
00:17:00,529 --> 00:17:03,980
work out it's just the total number of

475
00:17:03,980 --> 00:17:05,569
variations is that the number of state

476
00:17:05,569 --> 00:17:07,069
categories that you have times the

477
00:17:07,069 --> 00:17:09,079
number of possibilities for each so if

478
00:17:09,079 --> 00:17:10,399
we have three categories and three

479
00:17:10,399 --> 00:17:13,250
variations we can have 27 possible UI

480
00:17:13,250 --> 00:17:14,689
states for a component that's really

481
00:17:14,689 --> 00:17:17,059
important to know that it sounds like a

482
00:17:17,059 --> 00:17:18,470
lot right but obviously not every

483
00:17:18,470 --> 00:17:20,659
combination matters the disabled state

484
00:17:20,659 --> 00:17:22,549
might look the same for every single one

485
00:17:22,549 --> 00:17:25,699
of the modifiers and maybe the pseudo

486
00:17:25,699 --> 00:17:27,380
states are the same no matter what the

487
00:17:27,380 --> 00:17:28,909
the other state of the component is so

488
00:17:28,909 --> 00:17:30,200
you can just cross out items and you end

489
00:17:30,200 --> 00:17:33,380
up with a list like this now CSS

490
00:17:33,380 --> 00:17:35,179
actually forced us to flatten this state

491
00:17:35,179 --> 00:17:37,039
tree and to have usually a single

492
00:17:37,039 --> 00:17:39,260
selector that would represent every

493
00:17:39,260 --> 00:17:40,669
combination of state that we had

494
00:17:40,669 --> 00:17:42,289
available and although this was

495
00:17:42,289 --> 00:17:44,120
sometimes tedious this makes us acutely

496
00:17:44,120 --> 00:17:46,180
aware of how many different variations

497
00:17:46,180 --> 00:17:48,610
it has and assuming that the CSS is

498
00:17:48,610 --> 00:17:51,280
written well it's also fairly easy to

499
00:17:51,280 --> 00:17:52,990
see what styles were applied in any case

500
00:17:52,990 --> 00:17:54,940
you just sort of read the the selector

501
00:17:54,940 --> 00:17:57,160
that applies to the current state maybe

502
00:17:57,160 --> 00:17:58,990
you have to read to and add them in your

503
00:17:58,990 --> 00:18:00,280
head but that's not too bad

504
00:18:00,280 --> 00:18:02,770
now don't please don't read this but

505
00:18:02,770 --> 00:18:04,600
JavaScript doesn't force us to flatten

506
00:18:04,600 --> 00:18:06,640
the state tree in any way this concept

507
00:18:06,640 --> 00:18:08,620
of different categories of state is

508
00:18:08,620 --> 00:18:11,200
often completely lost and at worst and

509
00:18:11,200 --> 00:18:12,670
sadly on a lot of projects I've worked

510
00:18:12,670 --> 00:18:15,490
on the resolution of CSS properties

511
00:18:15,490 --> 00:18:18,460
comes down to business logic in the

512
00:18:18,460 --> 00:18:20,650
style function so you've probably all

513
00:18:20,650 --> 00:18:21,910
seen examples like that we can vastly

514
00:18:21,910 --> 00:18:24,970
improve this by giving a better

515
00:18:24,970 --> 00:18:26,560
resolution of props before we pass them

516
00:18:26,560 --> 00:18:28,750
to the style function and although this

517
00:18:28,750 --> 00:18:30,390
is an improvement and probably

518
00:18:30,390 --> 00:18:32,440
representative of the vast majority of

519
00:18:32,440 --> 00:18:34,690
large CSS and J's projects that I've

520
00:18:34,690 --> 00:18:37,810
worked on this is not ideal as this

521
00:18:37,810 --> 00:18:39,870
scales you need to consider how each

522
00:18:39,870 --> 00:18:42,280
individual property here affects each

523
00:18:42,280 --> 00:18:44,890
individual CSS property and if that is a

524
00:18:44,890 --> 00:18:46,840
complex set of logic that's really hard

525
00:18:46,840 --> 00:18:47,590
to work out

526
00:18:47,590 --> 00:18:49,150
you can't quickly know how many

527
00:18:49,150 --> 00:18:50,710
variations there are for a UI component

528
00:18:50,710 --> 00:18:54,040
and this makes Mike sad and that should

529
00:18:54,040 --> 00:18:57,610
be a goal to avoid on any project so

530
00:18:57,610 --> 00:18:59,830
furthermore if the props that we pass

531
00:18:59,830 --> 00:19:01,240
down to the style function don't

532
00:19:01,240 --> 00:19:04,420
represent a set of finite sort of state

533
00:19:04,420 --> 00:19:06,550
categories how do we know that the

534
00:19:06,550 --> 00:19:07,990
values that we resolving in that style

535
00:19:07,990 --> 00:19:09,730
function are valid and something that is

536
00:19:09,730 --> 00:19:12,220
intended by the design and this is not

537
00:19:12,220 --> 00:19:13,690
something that typescript is going to

538
00:19:13,690 --> 00:19:15,940
tell you right so being able to have

539
00:19:15,940 --> 00:19:18,430
these finite categories allows you to

540
00:19:18,430 --> 00:19:19,720
know that you're not going to end up

541
00:19:19,720 --> 00:19:21,040
with large and small active at the same

542
00:19:21,040 --> 00:19:22,900
time or loading an error if you can't

543
00:19:22,900 --> 00:19:24,160
read that thing if your stars aren't

544
00:19:24,160 --> 00:19:26,050
organ or make in that way that can be

545
00:19:26,050 --> 00:19:28,540
problematic I think David's going to

546
00:19:28,540 --> 00:19:30,760
touch more on state machines in in here

547
00:19:30,760 --> 00:19:32,650
or CSS state machines and his talk after

548
00:19:32,650 --> 00:19:34,690
me so I'm not going to go into much more

549
00:19:34,690 --> 00:19:38,050
detail there I do want to share a

550
00:19:38,050 --> 00:19:39,700
solution but it doesn't des matter

551
00:19:39,700 --> 00:19:41,200
matter to me whether you're sort of like

552
00:19:41,200 --> 00:19:42,910
composing these these states through

553
00:19:42,910 --> 00:19:47,290
class names template strings or objects

554
00:19:47,290 --> 00:19:48,880
in JavaScript what's important is that

555
00:19:48,880 --> 00:19:51,340
we have a single representation for each

556
00:19:51,340 --> 00:19:53,830
of the different UI States one of the

557
00:19:53,830 --> 00:19:56,040
challenges in modern JavaScript is that

558
00:19:56,040 --> 00:19:58,360
there's actually too many ways to try

559
00:19:58,360 --> 00:19:59,890
and do this

560
00:19:59,890 --> 00:20:01,080
I think that we need some better

561
00:20:01,080 --> 00:20:03,070
standardization around how we approach

562
00:20:03,070 --> 00:20:05,020
problems like this in CSS in jeaious

563
00:20:05,020 --> 00:20:07,420
because we kind of had that for CSS and

564
00:20:07,420 --> 00:20:09,070
then we've largely disregarded a lot of

565
00:20:09,070 --> 00:20:10,750
that knowledge and I'm not saying that

566
00:20:10,750 --> 00:20:13,540
this here should be the solution but I'm

567
00:20:13,540 --> 00:20:14,980
not saying that it shouldn't either so

568
00:20:14,980 --> 00:20:16,420
if you want to adopt this that's fine

569
00:20:16,420 --> 00:20:18,640
but what I like to do is I like to have

570
00:20:18,640 --> 00:20:21,630
a property that I passed to a style

571
00:20:21,630 --> 00:20:25,360
function a modifier and a behavior and I

572
00:20:25,360 --> 00:20:27,520
can only have one of those these values

573
00:20:27,520 --> 00:20:29,710
then get passed on to a function like

574
00:20:29,710 --> 00:20:31,960
this which will resolve the actual

575
00:20:31,960 --> 00:20:34,840
Styles so what's happening here is I've

576
00:20:34,840 --> 00:20:36,370
got some default Styles like font size

577
00:20:36,370 --> 00:20:38,350
and then I'm just kind of grabbed from

578
00:20:38,350 --> 00:20:41,680
an object here with the key that I

579
00:20:41,680 --> 00:20:44,740
passed a specific set of styles and I'm

580
00:20:44,740 --> 00:20:46,510
going to add those to this object that

581
00:20:46,510 --> 00:20:47,980
I'm building up in this function here

582
00:20:47,980 --> 00:20:50,010
and I'm gonna do the same for behaviors

583
00:20:50,010 --> 00:20:52,720
now what that means is we can quickly

584
00:20:52,720 --> 00:20:54,460
read sort of what's being added there's

585
00:20:54,460 --> 00:20:58,720
no resolution of state here so the real

586
00:20:58,720 --> 00:21:00,370
beauty in this approach is that using

587
00:21:00,370 --> 00:21:02,890
custom properties here we can set the

588
00:21:02,890 --> 00:21:04,930
modifier value so we can set the value

589
00:21:04,930 --> 00:21:07,390
in the modifier here that can then be

590
00:21:07,390 --> 00:21:08,950
used by the behavior so that gives you

591
00:21:08,950 --> 00:21:11,950
that branching capability that we had

592
00:21:11,950 --> 00:21:14,470
while keeping this this object flat and

593
00:21:14,470 --> 00:21:17,860
readable and I think like using modern

594
00:21:17,860 --> 00:21:20,560
features in CSS like this together with

595
00:21:20,560 --> 00:21:22,930
JavaScript applications can be really a

596
00:21:22,930 --> 00:21:24,640
useful pattern and that's the kind of

597
00:21:24,640 --> 00:21:26,890
thing that like probably most of us here

598
00:21:26,890 --> 00:21:29,170
should be bringing to our team so I want

599
00:21:29,170 --> 00:21:31,900
to encourage you to do that I absolutely

600
00:21:31,900 --> 00:21:33,370
love this pattern if you don't that's

601
00:21:33,370 --> 00:21:35,470
okay now you might notice some

602
00:21:35,470 --> 00:21:38,410
inspiration from the terms here from

603
00:21:38,410 --> 00:21:40,840
been things like modifiers and behaviors

604
00:21:40,840 --> 00:21:43,330
and it wouldn't be a CSS architecture

605
00:21:43,330 --> 00:21:46,870
talk really without mentioning Ben so

606
00:21:46,870 --> 00:21:48,340
the history of BEM is actually slightly

607
00:21:48,340 --> 00:21:50,680
harder to trace it started with the

608
00:21:50,680 --> 00:21:52,840
Russian tech company Yandex just a small

609
00:21:52,840 --> 00:21:55,480
company and it it might have been used

610
00:21:55,480 --> 00:21:57,010
internally before many of us

611
00:21:57,010 --> 00:21:58,930
particularly in the West became aware of

612
00:21:58,930 --> 00:22:00,940
it but I can say that it exploded in

613
00:22:00,940 --> 00:22:03,700
popularity around 2012 when people like

614
00:22:03,700 --> 00:22:05,530
Nicholas Gallagher and Harry Roberts

615
00:22:05,530 --> 00:22:07,950
started writing and talking about this

616
00:22:07,950 --> 00:22:11,490
so in 2012 Nicholas Gallagher wrote this

617
00:22:11,490 --> 00:22:13,560
article about HTML semantics and

618
00:22:13,560 --> 00:22:14,880
front-end architecture I encourage you

619
00:22:14,880 --> 00:22:16,770
to look it up I absolutely loved this

620
00:22:16,770 --> 00:22:18,870
article still nicolas doesn't mention

621
00:22:18,870 --> 00:22:21,270
CSS architecture once in the entire

622
00:22:21,270 --> 00:22:23,000
article but he mentions components and

623
00:22:23,000 --> 00:22:27,960
unbelievable 47 times in 2012 it's also

624
00:22:27,960 --> 00:22:29,550
in this article that Nicolas first talks

625
00:22:29,550 --> 00:22:32,010
about his experiences with Bam and what

626
00:22:32,010 --> 00:22:34,320
I think he realized that many don't is

627
00:22:34,320 --> 00:22:36,870
that many people think that Bam is just

628
00:22:36,870 --> 00:22:38,550
is like naming convention that that

629
00:22:38,550 --> 00:22:41,190
helps them to avoid specificity clashes

630
00:22:41,190 --> 00:22:43,170
in the terrifying global scope of CSS

631
00:22:43,170 --> 00:22:46,260
but the concepts of block element and

632
00:22:46,260 --> 00:22:48,090
modify are actually a really solid

633
00:22:48,090 --> 00:22:50,400
expression of different concerns

634
00:22:50,400 --> 00:22:52,350
relating to component architecture on

635
00:22:52,350 --> 00:22:54,390
the web so that should be really useful

636
00:22:54,390 --> 00:22:56,940
in modern JavaScript applications I

637
00:22:56,940 --> 00:22:59,430
think part of the reason for the success

638
00:22:59,430 --> 00:23:01,920
of BEM is that its strong and obvious

639
00:23:01,920 --> 00:23:03,660
naming conventions allowed developers to

640
00:23:03,660 --> 00:23:05,430
use this without necessarily

641
00:23:05,430 --> 00:23:09,060
understanding the reasons behind the

642
00:23:09,060 --> 00:23:10,890
principles and understanding everything

643
00:23:10,890 --> 00:23:14,160
behind the concept and that's okay so

644
00:23:14,160 --> 00:23:16,500
Ben gave semantic meaning to different

645
00:23:16,500 --> 00:23:19,020
parts of components and I think this is

646
00:23:19,020 --> 00:23:20,400
something that we sorely need in modern

647
00:23:20,400 --> 00:23:22,140
JavaScript applications they can be

648
00:23:22,140 --> 00:23:23,850
components can be so many things right

649
00:23:23,850 --> 00:23:24,870
but we don't have to make these

650
00:23:24,870 --> 00:23:27,270
distinctions and I've been like kind of

651
00:23:27,270 --> 00:23:28,860
drawing a few distinctions here which

652
00:23:28,860 --> 00:23:31,830
you may have picked up on and I think

653
00:23:31,830 --> 00:23:33,450
when we don't do this when we don't have

654
00:23:33,450 --> 00:23:34,830
these distinctions it leads to an

655
00:23:34,830 --> 00:23:36,240
unhealthy mix of different concerns

656
00:23:36,240 --> 00:23:40,110
within our UI components so to help us

657
00:23:40,110 --> 00:23:42,030
avoid this my final tip is consider

658
00:23:42,030 --> 00:23:45,090
naming some kind of naming conventions

659
00:23:45,090 --> 00:23:46,980
for your components I don't care what

660
00:23:46,980 --> 00:23:48,600
you use but it helps me to understand

661
00:23:48,600 --> 00:23:52,530
what your intentions are so for me what

662
00:23:52,530 --> 00:23:54,120
I do for you I components is I just call

663
00:23:54,120 --> 00:23:56,280
it by the component name and when I see

664
00:23:56,280 --> 00:23:57,720
this I immediately know that this is a

665
00:23:57,720 --> 00:23:59,430
UI component it should be just a visual

666
00:23:59,430 --> 00:24:01,740
element I know that it should have no

667
00:24:01,740 --> 00:24:03,090
width and height properties and it

668
00:24:03,090 --> 00:24:04,410
probably doesn't have many display

669
00:24:04,410 --> 00:24:06,630
properties either I should know that it

670
00:24:06,630 --> 00:24:08,910
can have state modifiers and I should

671
00:24:08,910 --> 00:24:10,680
know that it contains no business logic

672
00:24:10,680 --> 00:24:13,560
if I prefix a component with layout I

673
00:24:13,560 --> 00:24:16,020
should know immediately but again it has

674
00:24:16,020 --> 00:24:18,090
no visual styles I should know that it

675
00:24:18,090 --> 00:24:20,550
has state modifiers it might affect the

676
00:24:20,550 --> 00:24:22,139
layout of child

677
00:24:22,139 --> 00:24:23,609
but I know also that this component

678
00:24:23,609 --> 00:24:26,369
isn't going to contain business logic so

679
00:24:26,369 --> 00:24:27,419
I've talked about two types of

680
00:24:27,419 --> 00:24:28,979
components and I've said they both don't

681
00:24:28,979 --> 00:24:31,049
own business logic and this introduces

682
00:24:31,049 --> 00:24:32,820
you to the final type of component that

683
00:24:32,820 --> 00:24:34,229
I want to talk about today and that's a

684
00:24:34,229 --> 00:24:36,929
container component this is where the

685
00:24:36,929 --> 00:24:39,869
application logic lives so it resolves

686
00:24:39,869 --> 00:24:41,549
that modifier and behavior state before

687
00:24:41,549 --> 00:24:43,499
passing it off to to a style function or

688
00:24:43,499 --> 00:24:46,259
something a confection resolve data can

689
00:24:46,259 --> 00:24:48,089
set up callbacks events all of the

690
00:24:48,089 --> 00:24:49,889
things that applications need to do and

691
00:24:49,889 --> 00:24:51,659
this is what should wrap your layout and

692
00:24:51,659 --> 00:24:55,919
UI components you don't need to use the

693
00:24:55,919 --> 00:24:57,239
conventions that I'm mentioning here you

694
00:24:57,239 --> 00:24:59,070
don't need to prefix that with component

695
00:24:59,070 --> 00:25:00,899
or layout if you don't want you can

696
00:25:00,899 --> 00:25:02,129
group them in different folders you can

697
00:25:02,129 --> 00:25:04,829
add comments at the top of your source

698
00:25:04,829 --> 00:25:06,089
code if that's convenient for you

699
00:25:06,089 --> 00:25:07,889
whatever works for your team the

700
00:25:07,889 --> 00:25:09,419
important thing is to give semantic

701
00:25:09,419 --> 00:25:11,429
meaning to components just like BEM did

702
00:25:11,429 --> 00:25:13,709
for class names so that we can

703
00:25:13,709 --> 00:25:15,329
immediately transfer this knowledge of

704
00:25:15,329 --> 00:25:16,679
what our intentions are for this

705
00:25:16,679 --> 00:25:19,169
component as we build things together

706
00:25:19,169 --> 00:25:21,029
because that's what most projects are

707
00:25:21,029 --> 00:25:22,440
we're building things together and I

708
00:25:22,440 --> 00:25:23,249
think that's where a lot of the

709
00:25:23,249 --> 00:25:25,139
difficulty is and that's a lot of what

710
00:25:25,139 --> 00:25:28,889
CSS architecture was about so in summary

711
00:25:28,889 --> 00:25:31,200
it's the same problems that we've been

712
00:25:31,200 --> 00:25:33,869
trying to solve here the challenges that

713
00:25:33,869 --> 00:25:36,149
we face with style architecture in

714
00:25:36,149 --> 00:25:37,889
modern JavaScript applications

715
00:25:37,889 --> 00:25:41,219
component-based architecture are the

716
00:25:41,219 --> 00:25:42,539
same problems that we face with class

717
00:25:42,539 --> 00:25:44,249
names are the only difference is that

718
00:25:44,249 --> 00:25:47,429
the composition methods have changed so

719
00:25:47,429 --> 00:25:49,229
if you're a talented JavaScript

720
00:25:49,229 --> 00:25:50,639
developer and you're telling me that you

721
00:25:50,639 --> 00:25:54,389
know nothing about CSS then I'm sorry

722
00:25:54,389 --> 00:25:55,559
but you're not even trying and I know

723
00:25:55,559 --> 00:25:57,089
that's like a little bit mean but I'm

724
00:25:57,089 --> 00:25:58,799
gonna be mean to CSS people in a moment

725
00:25:58,799 --> 00:26:02,899
as well so so many of the architecture

726
00:26:02,899 --> 00:26:04,979
sorry many of the style architecture

727
00:26:04,979 --> 00:26:08,759
solutions applying knowledge and

728
00:26:08,759 --> 00:26:11,940
understanding from software architecture

729
00:26:11,940 --> 00:26:13,859
and and foundations in computer science

730
00:26:13,859 --> 00:26:15,779
right and I know many people who

731
00:26:15,779 --> 00:26:18,089
understand these complex problems but

732
00:26:18,089 --> 00:26:19,559
they fail to see similarities or worse

733
00:26:19,559 --> 00:26:21,419
yet they choose not to apply this

734
00:26:21,419 --> 00:26:23,369
knowledge to decorative front-end code

735
00:26:23,369 --> 00:26:26,339
and this disappoints me again should be

736
00:26:26,339 --> 00:26:28,049
a goal not to so my colleagues and

737
00:26:28,049 --> 00:26:29,789
friends who helped to establish some of

738
00:26:29,789 --> 00:26:31,529
these conventions in CSS architecture

739
00:26:31,529 --> 00:26:33,569
were skilled engineers with broad skills

740
00:26:33,569 --> 00:26:35,010
who applied knowledge

741
00:26:35,010 --> 00:26:36,870
different disciplines and I think that's

742
00:26:36,870 --> 00:26:38,910
what we should all be trying to do at

743
00:26:38,910 --> 00:26:41,010
the moment we're not the worlds apart

744
00:26:41,010 --> 00:26:43,799
that we pretend to be so I think the

745
00:26:43,799 --> 00:26:45,360
message here is to encourage us to start

746
00:26:45,360 --> 00:26:47,400
talking about these problems with with

747
00:26:47,400 --> 00:26:50,309
each of our understandings to the CSS

748
00:26:50,309 --> 00:26:52,950
people here in the audience we need to

749
00:26:52,950 --> 00:26:54,630
do better when we're engaging with these

750
00:26:54,630 --> 00:26:57,570
problems new tools like CSS nsj they can

751
00:26:57,570 --> 00:26:59,220
help us and they also bring about a

752
00:26:59,220 --> 00:27:01,410
whole bunch of new challenges and these

753
00:27:01,410 --> 00:27:03,299
are challenges that all of you people

754
00:27:03,299 --> 00:27:05,669
are really well positioned to understand

755
00:27:05,669 --> 00:27:08,429
and solve and we need to do better at

756
00:27:08,429 --> 00:27:10,200
articulating our experience and

757
00:27:10,200 --> 00:27:11,549
knowledge and ways that's relevant and

758
00:27:11,549 --> 00:27:13,950
accessible to to new developers or

759
00:27:13,950 --> 00:27:15,240
developers that come from from a

760
00:27:15,240 --> 00:27:18,240
different world to us and to that end I

761
00:27:18,240 --> 00:27:19,350
want to leave you with some practical

762
00:27:19,350 --> 00:27:20,970
suggestions for questions that you can

763
00:27:20,970 --> 00:27:24,630
ask on any project the first one is how

764
00:27:24,630 --> 00:27:26,700
many UI states can a component have this

765
00:27:26,700 --> 00:27:28,230
is a really important discussion point

766
00:27:28,230 --> 00:27:31,020
how can you easily validate which states

767
00:27:31,020 --> 00:27:33,660
are currently applied and that they're

768
00:27:33,660 --> 00:27:36,840
valid States intended by design how

769
00:27:36,840 --> 00:27:38,730
organ Amish are your stars this means

770
00:27:38,730 --> 00:27:40,950
how quickly can you read knowing that

771
00:27:40,950 --> 00:27:43,320
like the particular modifier or a

772
00:27:43,320 --> 00:27:45,090
particular behavior is currently active

773
00:27:45,090 --> 00:27:47,220
how quickly can you know and understand

774
00:27:47,220 --> 00:27:49,559
what CSS properties get applied in that

775
00:27:49,559 --> 00:27:51,570
case and if you can't do it in a few

776
00:27:51,570 --> 00:27:54,299
seconds then that's problematic are you

777
00:27:54,299 --> 00:27:56,309
creating sensible abstract building

778
00:27:56,309 --> 00:27:58,320
blocks or are you just drawing boxes

779
00:27:58,320 --> 00:27:59,790
around the design and building your

780
00:27:59,790 --> 00:28:01,830
components this way do they reflect a

781
00:28:01,830 --> 00:28:04,590
unit of visual design and if they do ask

782
00:28:04,590 --> 00:28:07,140
why are you separating the layout from

783
00:28:07,140 --> 00:28:08,820
the visual design where that is a

784
00:28:08,820 --> 00:28:11,910
sensible and appropriate are you

785
00:28:11,910 --> 00:28:13,830
separating application logic from UI

786
00:28:13,830 --> 00:28:16,080
components that's another big one even

787
00:28:16,080 --> 00:28:18,090
with how we pass props down even small

788
00:28:18,090 --> 00:28:20,640
bits of logic we've got to keep on top

789
00:28:20,640 --> 00:28:22,080
of those things

790
00:28:22,080 --> 00:28:24,000
and finally and probably the most

791
00:28:24,000 --> 00:28:25,590
important one how do we give semantic

792
00:28:25,590 --> 00:28:27,120
meaning how do we communicate our

793
00:28:27,120 --> 00:28:29,669
intentions and meanings to other

794
00:28:29,669 --> 00:28:31,860
developers on our team and I think

795
00:28:31,860 --> 00:28:33,150
that's really important and that's one

796
00:28:33,150 --> 00:28:34,710
that I'm gonna leave for all of us to

797
00:28:34,710 --> 00:28:36,570
discuss itself together thank you

798
00:28:36,570 --> 00:28:38,549
Budapest's I hope that you've left you

799
00:28:38,549 --> 00:28:39,900
with some practical tips or at least

800
00:28:39,900 --> 00:28:42,090
something to think about on your next

801
00:28:42,090 --> 00:28:43,260
project it was an absolute pleasure

802
00:28:43,260 --> 00:28:49,450
thank you so much

