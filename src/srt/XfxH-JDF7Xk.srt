1
00:00:34,449 --> 00:00:37,719

Oh everybody so max your aapke and I'll

2
00:00:37,719 --> 00:00:39,579
be talking about triplets

3
00:00:39,579 --> 00:00:41,199
before I start you want to mention that

4
00:00:41,199 --> 00:00:43,089
although I work at Google this is a

5
00:00:43,089 --> 00:00:44,829
project that I did before joining Google

6
00:00:44,829 --> 00:00:47,309
and I'll not be representing the company

7
00:00:47,309 --> 00:00:49,390
so let's start

8
00:00:49,390 --> 00:00:52,420
what is repli'd rep let's basically a

9
00:00:52,420 --> 00:00:53,739
web app for playing around with

10
00:00:53,739 --> 00:00:56,320
languages you can find it on rappel dot

11
00:00:56,320 --> 00:00:58,149
IT or if you like more traditional

12
00:00:58,149 --> 00:01:01,379
domains repli'd comm will work as well

13
00:01:01,379 --> 00:01:04,239
so the name comes from Apple the read

14
00:01:04,239 --> 00:01:06,819
eval print loop from languages like

15
00:01:06,819 --> 00:01:09,399
Python and lists that most of us know

16
00:01:09,399 --> 00:01:13,030
and love the idea behind repli'd is that

17
00:01:13,030 --> 00:01:15,159
you don't just want to compile and

18
00:01:15,159 --> 00:01:17,259
execute your program you want to

19
00:01:17,259 --> 00:01:19,690
interact with it in your browser you

20
00:01:19,690 --> 00:01:23,770
want to run snippets of code and build

21
00:01:23,770 --> 00:01:26,350
up state interact with it similar to

22
00:01:26,350 --> 00:01:27,729
what you would do in account in the

23
00:01:27,729 --> 00:01:31,000
console so what is special about repli'd

24
00:01:31,000 --> 00:01:36,220
first we support 17 languages all on the

25
00:01:36,220 --> 00:01:38,500
same web app so we have things like

26
00:01:38,500 --> 00:01:42,130
Python we have quick basic we have half

27
00:01:42,130 --> 00:01:43,539
a dozen entries from the JavaScript

28
00:01:43,539 --> 00:01:45,579
family things like CoffeeScript

29
00:01:45,579 --> 00:01:48,070
interests ER and others of course we

30
00:01:48,070 --> 00:01:50,289
also have rainfall control code because

31
00:01:50,289 --> 00:01:52,179
really if you don't support flow code

32
00:01:52,179 --> 00:01:58,750
kind of business are you so another

33
00:01:58,750 --> 00:02:01,359
special thing about droplet is all of

34
00:02:01,359 --> 00:02:03,640
this happens in a single you I use the

35
00:02:03,640 --> 00:02:05,590
same editor the same console for all the

36
00:02:05,590 --> 00:02:10,209
languages you have the same shortcuts

37
00:02:10,209 --> 00:02:12,670
same behavioral input output all that

38
00:02:12,670 --> 00:02:14,950
and what's more interesting it's not

39
00:02:14,950 --> 00:02:18,010
just one URI it's also one API so if you

40
00:02:18,010 --> 00:02:21,069
want to use repli'd as part of your web

41
00:02:21,069 --> 00:02:23,470
app you can execute code in all of these

42
00:02:23,470 --> 00:02:26,319
17 languages through a single simple API

43
00:02:26,319 --> 00:02:29,200
all you have to do is load language give

44
00:02:29,200 --> 00:02:31,150
the name of the language then call eval

45
00:02:31,150 --> 00:02:33,670
pass a string and you get the results

46
00:02:33,670 --> 00:02:36,910
and this also means that if you want to

47
00:02:36,910 --> 00:02:39,310
add the language to repli'd all you have

48
00:02:39,310 --> 00:02:41,560
to do is wrap it in a simple shim that

49
00:02:41,560 --> 00:02:43,510
provides the interface we're looking for

50
00:02:43,510 --> 00:02:45,470
you know once that's done

51
00:02:45,470 --> 00:02:48,680
that use uses repli'd can use that

52
00:02:48,680 --> 00:02:50,600
language as well for most of our

53
00:02:50,600 --> 00:02:54,260
interpreters the the shim is really 30

54
00:02:54,260 --> 00:02:56,330
or 40 lines of CoffeeScript so it's very

55
00:02:56,330 --> 00:03:00,110
simple and at this point you might be

56
00:03:00,110 --> 00:03:02,570
wondering why I'm talking about this at

57
00:03:02,570 --> 00:03:04,190
a JavaScript conference after all

58
00:03:04,190 --> 00:03:05,630
javascript is just one of the many

59
00:03:05,630 --> 00:03:08,210
languages we support so the secret

60
00:03:08,210 --> 00:03:10,400
behind repli'd is that all of this runs

61
00:03:10,400 --> 00:03:13,130
in the browser so we interpret Python

62
00:03:13,130 --> 00:03:14,690
and Ruby and all the other languages

63
00:03:14,690 --> 00:03:18,230
inside your browser on the client this

64
00:03:18,230 --> 00:03:20,680
of course gives us several advantages

65
00:03:20,680 --> 00:03:23,960
one of them is it's fast many other

66
00:03:23,960 --> 00:03:26,180
compilers on the web or interpreters on

67
00:03:26,180 --> 00:03:29,030
the web we'll send a your code to the

68
00:03:29,030 --> 00:03:31,040
server and there is a roundtrip there is

69
00:03:31,040 --> 00:03:33,770
a delay what we do is we load the

70
00:03:33,770 --> 00:03:36,710
interpreter on the client so there is a

71
00:03:36,710 --> 00:03:39,770
slightly higher delay when first loaded

72
00:03:39,770 --> 00:03:41,720
but then when you want to execute each

73
00:03:41,720 --> 00:03:44,890
line or each bit of code it's instant

74
00:03:44,890 --> 00:03:47,150
also there is the fact that there are no

75
00:03:47,150 --> 00:03:49,370
security issues because everything's on

76
00:03:49,370 --> 00:03:51,170
the client we don't have to execute

77
00:03:51,170 --> 00:03:53,720
arbitrary code in our server so that

78
00:03:53,720 --> 00:03:57,650
makes security much much simpler also of

79
00:03:57,650 --> 00:03:59,270
course it scales indefinitely we're

80
00:03:59,270 --> 00:04:00,560
serving static files

81
00:04:00,560 --> 00:04:03,160
there's nothing simpler than that and

82
00:04:03,160 --> 00:04:06,770
finally if you use html5 appcache or

83
00:04:06,770 --> 00:04:10,190
package it up as a Chrome App or Mozilla

84
00:04:10,190 --> 00:04:15,140
extension you can run it offline so this

85
00:04:15,140 --> 00:04:17,870
is how repli'd looks this is the

86
00:04:17,870 --> 00:04:20,810
language selector this is the workspace

87
00:04:20,810 --> 00:04:22,970
itself on the Left you have an editor on

88
00:04:22,970 --> 00:04:25,550
the right you have rapo where you can

89
00:04:25,550 --> 00:04:29,390
write code execute it on the fly because

90
00:04:29,390 --> 00:04:31,580
you can see there the variable values

91
00:04:31,580 --> 00:04:34,730
keep state everything works

92
00:04:34,730 --> 00:04:36,290
I won't dive too much into the UI

93
00:04:36,290 --> 00:04:38,780
because it's very simple and you can go

94
00:04:38,780 --> 00:04:42,650
and explore it yourself so let's go to

95
00:04:42,650 --> 00:04:44,060
the more interesting implementation

96
00:04:44,060 --> 00:04:48,230
details so what makes interpreter well

97
00:04:48,230 --> 00:04:50,840
not much turns out all we need is a

98
00:04:50,840 --> 00:04:52,730
constructor that won't realize a new

99
00:04:52,730 --> 00:04:55,130
copy of an interpreter a new instance

100
00:04:55,130 --> 00:04:57,680
with a fresh state and we need

101
00:04:57,680 --> 00:05:00,620
an evaluation function which takes a bit

102
00:05:00,620 --> 00:05:04,400
of code as a string runs it updates the

103
00:05:04,400 --> 00:05:06,470
interpreter state and returns the value

104
00:05:06,470 --> 00:05:10,430
of this bit of code and finally we need

105
00:05:10,430 --> 00:05:12,590
I or callbacks so we can do input and

106
00:05:12,590 --> 00:05:15,070
output interact with the outside world

107
00:05:15,070 --> 00:05:18,530
so once we do have an interpreter what

108
00:05:18,530 --> 00:05:22,580
do we do we we isolate it into its own

109
00:05:22,580 --> 00:05:25,430
world if we have a web worker below just

110
00:05:25,430 --> 00:05:27,620
in a web worker if not we use an iframe

111
00:05:27,620 --> 00:05:33,380
and of course this this makes us immune

112
00:05:33,380 --> 00:05:36,050
to the issues of global named scape so

113
00:05:36,050 --> 00:05:40,400
if an interpreter writes random very

114
00:05:40,400 --> 00:05:42,320
values or variables into the global

115
00:05:42,320 --> 00:05:45,139
namespace we don't care it's all

116
00:05:45,139 --> 00:05:47,830
isolated no two instances of

117
00:05:47,830 --> 00:05:52,070
interpreters can interact and switching

118
00:05:52,070 --> 00:05:54,080
languages in this case makes it very

119
00:05:54,080 --> 00:05:56,870
simple you delete the old web worker

120
00:05:56,870 --> 00:05:59,330
iframe you create a new one and you're

121
00:05:59,330 --> 00:06:00,349
free to go

122
00:06:00,349 --> 00:06:03,349
and once we guys the interpreter loaded

123
00:06:03,349 --> 00:06:06,020
we link it up to the console and it

124
00:06:06,020 --> 00:06:06,910
works

125
00:06:06,910 --> 00:06:09,169
so there are several types of

126
00:06:09,169 --> 00:06:11,360
interpreters that we use the first

127
00:06:11,360 --> 00:06:16,389
category is reused or interpreters for

128
00:06:16,389 --> 00:06:19,190
languages that existed before repli'd

129
00:06:19,190 --> 00:06:21,430
was created these include of course

130
00:06:21,430 --> 00:06:23,570
JavaScript CoffeeScript and all the

131
00:06:23,570 --> 00:06:26,479
syntax sugar languages for JavaScript

132
00:06:26,479 --> 00:06:29,810
this also includes the languages or the

133
00:06:29,810 --> 00:06:32,210
implementations of language standards in

134
00:06:32,210 --> 00:06:34,099
JavaScript to example the excellent

135
00:06:34,099 --> 00:06:35,960
viewer scheme project that implements

136
00:06:35,960 --> 00:06:39,740
most of schemes are 5 RS standard is

137
00:06:39,740 --> 00:06:43,570
included and used in repli'd the other

138
00:06:43,570 --> 00:06:48,169
category is interpreters that we created

139
00:06:48,169 --> 00:06:50,720
specifically for a repli'd these are not

140
00:06:50,720 --> 00:06:52,190
very exciting they're mostly for

141
00:06:52,190 --> 00:06:54,800
esoteric languages we have low coffee

142
00:06:54,800 --> 00:06:58,460
for low code we have unlearned the

143
00:06:58,460 --> 00:07:01,729
coffee for an lambda and we have a multi

144
00:07:01,729 --> 00:07:05,030
coffee for amore take a memo taken all

145
00:07:05,030 --> 00:07:07,210
of these are written in CoffeeScript

146
00:07:07,210 --> 00:07:10,429
they're not very interesting

147
00:07:10,429 --> 00:07:12,649
technically but if someone wants to

148
00:07:12,649 --> 00:07:15,589
learn programming and has never used

149
00:07:15,589 --> 00:07:17,899
wants to learn compiler programming and

150
00:07:17,899 --> 00:07:20,659
has never written a compiler before I

151
00:07:20,659 --> 00:07:22,069
advise you to start with something like

152
00:07:22,069 --> 00:07:23,989
this because that's a project you can

153
00:07:23,989 --> 00:07:26,569
finish in a few days maybe a week and

154
00:07:26,569 --> 00:07:28,459
you'll learn a lot about real compilers

155
00:07:28,459 --> 00:07:32,869
from toei project like that and finally

156
00:07:32,869 --> 00:07:35,179
the most interesting type of compilers

157
00:07:35,179 --> 00:07:37,369
or interpreters that we use is named

158
00:07:37,369 --> 00:07:40,909
scripted ones these are the compilers or

159
00:07:40,909 --> 00:07:43,819
the interpreters that were originally

160
00:07:43,819 --> 00:07:46,759
implemented in C or C++ and using

161
00:07:46,759 --> 00:07:47,360
Emscripten

162
00:07:47,360 --> 00:07:49,549
we ported them to JavaScript and run

163
00:07:49,549 --> 00:07:52,519
them in the browser these are for

164
00:07:52,519 --> 00:07:54,619
languages like Python Ruby and Lua for

165
00:07:54,619 --> 00:07:56,539
which writing an interpreter from

166
00:07:56,539 --> 00:07:58,279
scratch in JavaScript would be a lot of

167
00:07:58,279 --> 00:08:03,349
work so as I said one of the most

168
00:08:03,349 --> 00:08:04,939
interesting parts of this project is

169
00:08:04,939 --> 00:08:07,309
using inscription so for those who don't

170
00:08:07,309 --> 00:08:09,949
know Emscripten is a compiler from LLVM

171
00:08:09,949 --> 00:08:13,159
byte code to JavaScript LLVM is a

172
00:08:13,159 --> 00:08:16,549
compiler middleware it provides an IR

173
00:08:16,549 --> 00:08:22,189
bit code format which many C C++ and

174
00:08:22,189 --> 00:08:25,069
other language compilers can omit so

175
00:08:25,069 --> 00:08:29,089
once we have the LLVM byte code for a

176
00:08:29,089 --> 00:08:32,029
given program that was written in C or

177
00:08:32,029 --> 00:08:35,089
C++ we apply inscription to it and we

178
00:08:35,089 --> 00:08:38,930
get JavaScript so as the byte code is

179
00:08:38,930 --> 00:08:41,539
similar to assembly so what you do is

180
00:08:41,539 --> 00:08:44,480
you translate each assembly statement or

181
00:08:44,480 --> 00:08:47,180
bits code statement or bits construction

182
00:08:47,180 --> 00:08:49,879
to JavaScript statements so we get of

183
00:08:49,879 --> 00:08:52,459
course a whole huge heap of JavaScript

184
00:08:52,459 --> 00:08:56,569
for example the Python compiler without

185
00:08:56,569 --> 00:08:58,959
minification is about 30 Meg's of

186
00:08:58,959 --> 00:09:03,079
JavaScript so once we do get the

187
00:09:03,079 --> 00:09:05,750
JavaScript code out of the bytecode we

188
00:09:05,750 --> 00:09:09,019
are still missing two key parts that we

189
00:09:09,019 --> 00:09:11,480
need before we can run it first we need

190
00:09:11,480 --> 00:09:14,420
memory because obviously native memory

191
00:09:14,420 --> 00:09:16,639
is much different from JavaScript

192
00:09:16,639 --> 00:09:19,269
JavaScript memory model is really

193
00:09:19,269 --> 00:09:22,009
garbage collection garbage collected and

194
00:09:22,009 --> 00:09:23,060
abstracted

195
00:09:23,060 --> 00:09:24,830
so you don't have pointers you can't

196
00:09:24,830 --> 00:09:27,590
access addresses none of that so we have

197
00:09:27,590 --> 00:09:30,440
to emulate that and what we do is simply

198
00:09:30,440 --> 00:09:34,490
emulate it as I an array so if you have

199
00:09:34,490 --> 00:09:36,470
typed arrays we use that if not we use

200
00:09:36,470 --> 00:09:40,460
normal JavaScript arrays and that takes

201
00:09:40,460 --> 00:09:42,980
care of memory and then also there are

202
00:09:42,980 --> 00:09:44,480
system calls when you're writing C or

203
00:09:44,480 --> 00:09:47,390
C++ program you know that the US will

204
00:09:47,390 --> 00:09:49,730
provides a certain services memory

205
00:09:49,730 --> 00:09:52,310
allocation system time file system

206
00:09:52,310 --> 00:09:54,920
access all that kind of stuff and of

207
00:09:54,920 --> 00:09:56,630
course the script does not provide it in

208
00:09:56,630 --> 00:09:59,000
a similar way as C or C++

209
00:09:59,000 --> 00:10:01,460
so whatever scripting does is it

210
00:10:01,460 --> 00:10:03,980
implements all of these by hand in

211
00:10:03,980 --> 00:10:06,050
JavaScript so one of the biggest

212
00:10:06,050 --> 00:10:08,600
contributions that Triplette made to M

213
00:10:08,600 --> 00:10:12,170
scripting during our development is we

214
00:10:12,170 --> 00:10:14,990
created a virtual file system that

215
00:10:14,990 --> 00:10:16,910
implements most of the POSIX standard

216
00:10:16,910 --> 00:10:21,920
and can be backed by data inlined into

217
00:10:21,920 --> 00:10:24,650
the script or by files on the servers

218
00:10:24,650 --> 00:10:30,410
which are loaded and fetched lazily so

219
00:10:30,410 --> 00:10:33,020
with the memory taken care of with the

220
00:10:33,020 --> 00:10:35,810
system calls taking care of and with the

221
00:10:35,810 --> 00:10:40,660
program itself translated to JavaScript

222
00:10:40,660 --> 00:10:43,460
we're ready to run so we have a program

223
00:10:43,460 --> 00:10:48,620
that runs and it's it's working but many

224
00:10:48,620 --> 00:10:50,720
of you will say okay that's great but

225
00:10:50,720 --> 00:10:53,390
surely it's way too slow for practical

226
00:10:53,390 --> 00:10:55,810
purposes it turns out it isn't

227
00:10:55,810 --> 00:10:58,850
most of the scripted code runs within

228
00:10:58,850 --> 00:11:01,940
one order of magnitude of the native

229
00:11:01,940 --> 00:11:05,120
optimized code speed which is pretty

230
00:11:05,120 --> 00:11:09,200
impressive and some benchmarks even go

231
00:11:09,200 --> 00:11:10,790
as fast as three or four times slower

232
00:11:10,790 --> 00:11:14,300
than native so in our case we compile

233
00:11:14,300 --> 00:11:19,240
see python and ruby 1.8 both of those

234
00:11:19,240 --> 00:11:22,160
were good enough for Apple they weren't

235
00:11:22,160 --> 00:11:25,040
fast enough to run large programs really

236
00:11:25,040 --> 00:11:27,890
but again as we are really just a

237
00:11:27,890 --> 00:11:30,710
wrapper we we ran several lines of code

238
00:11:30,710 --> 00:11:34,350
at a time they're perfectly fine

239
00:11:34,350 --> 00:11:39,070
so I'd like to speak more about him

240
00:11:39,070 --> 00:11:42,340
scripting but of course this is about

241
00:11:42,340 --> 00:11:45,310
Triplett and not inscription there is a

242
00:11:45,310 --> 00:11:47,500
great talk that Alan Zaki the creator

243
00:11:47,500 --> 00:11:49,380
from scripting did at Gia's confit you

244
00:11:49,380 --> 00:11:52,240
you can search on google or on them

245
00:11:52,240 --> 00:11:54,160
script and wiki he goes into more detail

246
00:11:54,160 --> 00:11:58,770
about the various issues or

247
00:11:58,770 --> 00:12:01,510
peculiarities of inscription and he does

248
00:12:01,510 --> 00:12:05,470
some very very cool demos with it so go

249
00:12:05,470 --> 00:12:07,840
ahead and do that and if you have any

250
00:12:07,840 --> 00:12:09,750
questions I'll be happy to answer them

251
00:12:09,750 --> 00:12:15,520
about in scripting so of course once I

252
00:12:15,520 --> 00:12:17,170
get off the stage and don't expect you

253
00:12:17,170 --> 00:12:19,690
people to uninstall cpython and switch

254
00:12:19,690 --> 00:12:21,190
to repli'd that would be rather

255
00:12:21,190 --> 00:12:25,150
ridiculous but at the same time why why

256
00:12:25,150 --> 00:12:28,540
create this project at all so our

257
00:12:28,540 --> 00:12:31,450
original goal really was well first of

258
00:12:31,450 --> 00:12:33,070
course to have fun and prove that it's

259
00:12:33,070 --> 00:12:35,560
possible rather than that also to create

260
00:12:35,560 --> 00:12:37,690
an easily accessible place where we

261
00:12:37,690 --> 00:12:39,490
could experiment with little snippets of

262
00:12:39,490 --> 00:12:42,430
code in many languages and once we do

263
00:12:42,430 --> 00:12:44,650
that we can share them with other people

264
00:12:44,650 --> 00:12:49,180
and the code would be executable right

265
00:12:49,180 --> 00:12:51,190
in their browsers so for example if I'm

266
00:12:51,190 --> 00:12:52,990
answering a stack overflow question I

267
00:12:52,990 --> 00:12:57,280
want to post a code sample I could just

268
00:12:57,280 --> 00:12:58,960
post the code itself or I could link to

269
00:12:58,960 --> 00:13:01,600
repli'd where they will get the code

270
00:13:01,600 --> 00:13:04,330
itself plus they can run it in the

271
00:13:04,330 --> 00:13:06,160
browser without installing anything in

272
00:13:06,160 --> 00:13:08,110
their machine and they'll be running it

273
00:13:08,110 --> 00:13:10,120
in the same exact environment where you

274
00:13:10,120 --> 00:13:12,280
wrote it so you can be sure that the

275
00:13:12,280 --> 00:13:15,280
result is the exact same not only that

276
00:13:15,280 --> 00:13:19,810
you can also record an repple session so

277
00:13:19,810 --> 00:13:22,150
you can show your work step by step

278
00:13:22,150 --> 00:13:25,420
which can be very helpful when we did

279
00:13:25,420 --> 00:13:28,720
release the project what we found is a

280
00:13:28,720 --> 00:13:33,520
lot of interest was from the online

281
00:13:33,520 --> 00:13:35,410
education community people who were

282
00:13:35,410 --> 00:13:40,900
teaching programming online really were

283
00:13:40,900 --> 00:13:43,540
interested in repligen using it since

284
00:13:43,540 --> 00:13:46,630
one of the biggest turtles that and you

285
00:13:46,630 --> 00:13:48,070
someone new to program

286
00:13:48,070 --> 00:13:51,250
has to overcome is installing a compiler

287
00:13:51,250 --> 00:13:53,079
and setting up a development environment

288
00:13:53,079 --> 00:13:55,420
so with repli'd you eliminate that step

289
00:13:55,420 --> 00:13:59,290
so you can easily execute any code you

290
00:13:59,290 --> 00:14:01,389
want in any of the 17 languages in your

291
00:14:01,389 --> 00:14:02,680
browser without having anything

292
00:14:02,680 --> 00:14:05,079
installed just seconds after typing in

293
00:14:05,079 --> 00:14:11,519
the URL so several of these

294
00:14:11,519 --> 00:14:14,170
organizations or websites use gzip

295
00:14:14,170 --> 00:14:16,899
already one of the most notable is code

296
00:14:16,899 --> 00:14:20,410
Academy they currently use repli'd for

297
00:14:20,410 --> 00:14:22,750
their courses they provide gamified

298
00:14:22,750 --> 00:14:25,449
course courses aimed at beginners for

299
00:14:25,449 --> 00:14:27,310
JavaScript and now I think today they

300
00:14:27,310 --> 00:14:29,470
released HTML and CSS and all kind of

301
00:14:29,470 --> 00:14:33,040
web development courses so other than

302
00:14:33,040 --> 00:14:35,730
that of course there is the more general

303
00:14:35,730 --> 00:14:40,060
open source spirit goal so once we

304
00:14:40,060 --> 00:14:42,040
create a droplet who contributed all of

305
00:14:42,040 --> 00:14:43,959
this code to open source it's hosted on

306
00:14:43,959 --> 00:14:46,990
github it's available under the MIT

307
00:14:46,990 --> 00:14:49,449
license which is very permissive you can

308
00:14:49,449 --> 00:14:51,730
take any bit of code from this project

309
00:14:51,730 --> 00:14:53,889
use it for your own either the whole

310
00:14:53,889 --> 00:14:56,440
thing or each interpreter alone and so

311
00:14:56,440 --> 00:14:59,980
free and finally projects like I'm

312
00:14:59,980 --> 00:15:02,230
scripting and repli'd really push the

313
00:15:02,230 --> 00:15:05,260
boundaries of what browsers can do so

314
00:15:05,260 --> 00:15:08,350
while we were developing we found quite

315
00:15:08,350 --> 00:15:11,649
a few cases of bugs and v8 and spider

316
00:15:11,649 --> 00:15:14,819
monkey or inefficiencies that we then

317
00:15:14,819 --> 00:15:17,680
reported to the teams and they were

318
00:15:17,680 --> 00:15:19,990
eventually fixed and now everyone's

319
00:15:19,990 --> 00:15:25,899
happy so I'm getting close to the end so

320
00:15:25,899 --> 00:15:28,480
this project was created by my friend

321
00:15:28,480 --> 00:15:31,209
I'm Jade Mossad in myself I'd like to

322
00:15:31,209 --> 00:15:33,670
give him credit he is the one who came

323
00:15:33,670 --> 00:15:35,829
up with the idea originally he did have

324
00:15:35,829 --> 00:15:37,120
the word convinced me to do the other

325
00:15:37,120 --> 00:15:37,449
half

326
00:15:37,449 --> 00:15:39,750
he's currently working in code Academy

327
00:15:39,750 --> 00:15:43,930
they mentioned before and that's it

328
00:15:43,930 --> 00:15:47,929
thank you

