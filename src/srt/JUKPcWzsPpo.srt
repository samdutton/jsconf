1
00:00:16,039 --> 00:00:24,779

hello Berlin terrorist fist jab really

2
00:00:24,779 --> 00:00:29,970
happy to be here tonight the secret talk

3
00:00:29,970 --> 00:00:31,260
tonight is I'm going to be talking about

4
00:00:31,260 --> 00:00:33,840
the state of the JavaScript language and

5
00:00:33,840 --> 00:00:35,880
its specification how it got to be the

6
00:00:35,880 --> 00:00:38,040
way it's about to be and what it might

7
00:00:38,040 --> 00:00:40,640
be going forward but before I begin

8
00:00:40,640 --> 00:00:42,450
there's one thing I have to say about

9
00:00:42,450 --> 00:00:46,350
javascript javascript is a proprietary

10
00:00:46,350 --> 00:00:48,600
trademark that belongs to sun

11
00:00:48,600 --> 00:00:50,610
microsystems or possibly to oracle

12
00:00:50,610 --> 00:00:52,170
corporation i'm not sure where that deal

13
00:00:52,170 --> 00:00:56,100
is but we're only two open systems here

14
00:00:56,100 --> 00:00:59,039
and so it seems strange that we put this

15
00:00:59,039 --> 00:01:00,600
proprietary label on the stuff that we

16
00:01:00,600 --> 00:01:02,699
do and then fact there is an open label

17
00:01:02,699 --> 00:01:06,420
which is not proprietary which we can

18
00:01:06,420 --> 00:01:08,430
all use which is ECMO script which has

19
00:01:08,430 --> 00:01:10,590
actually become the true name of this

20
00:01:10,590 --> 00:01:12,720
language that's what it really is and we

21
00:01:12,720 --> 00:01:14,310
probably should call it xmas script

22
00:01:14,310 --> 00:01:18,180
except it's just an awful name it's it's

23
00:01:18,180 --> 00:01:23,759
really hard to say it and so so there's

24
00:01:23,759 --> 00:01:27,299
that so in describing the standard

25
00:01:27,299 --> 00:01:30,060
process that got us to the fifth edition

26
00:01:30,060 --> 00:01:32,070
which I hope will be published next

27
00:01:32,070 --> 00:01:35,820
month Brendan Eich the inventor of

28
00:01:35,820 --> 00:01:39,750
JavaScript described it as being similar

29
00:01:39,750 --> 00:01:42,630
to the motion picture the Fellowship of

30
00:01:42,630 --> 00:01:47,729
the Ring in which I was Gandalf standing

31
00:01:47,729 --> 00:01:51,060
on the bridge at Casa doom stopping the

32
00:01:51,060 --> 00:01:54,750
monstrous es for proposal of which he

33
00:01:54,750 --> 00:02:03,460
calls the es for raag

34
00:02:03,470 --> 00:02:05,700
my perception of it's a little bit

35
00:02:05,700 --> 00:02:07,200
different and so tonight I'm going to

36
00:02:07,200 --> 00:02:10,410
give you an extremely biased story my

37
00:02:10,410 --> 00:02:13,590
point of view of what happened and my

38
00:02:13,590 --> 00:02:14,910
point of view is a little different and

39
00:02:14,910 --> 00:02:16,530
and my movie is a little different my

40
00:02:16,530 --> 00:02:20,010
movie metaphor is 12 Angry Men this is a

41
00:02:20,010 --> 00:02:22,800
sidney lumet's wonderful climb courtroom

42
00:02:22,800 --> 00:02:24,930
drama we don't actually see the crime we

43
00:02:24,930 --> 00:02:26,610
don't see the courtroom we only see what

44
00:02:26,610 --> 00:02:28,590
happens in the jury room where these 12

45
00:02:28,590 --> 00:02:31,950
men get together and 11 of them are

46
00:02:31,950 --> 00:02:33,840
certain that it's an open-shut case the

47
00:02:33,840 --> 00:02:37,710
kids guilty let's cast our verdict and

48
00:02:37,710 --> 00:02:40,830
go home there's one juror juror number

49
00:02:40,830 --> 00:02:44,100
seven who says I'm not sure I think this

50
00:02:44,100 --> 00:02:46,830
is wrong and over the course of several

51
00:02:46,830 --> 00:02:50,130
hours they fight and argue and cry and

52
00:02:50,130 --> 00:02:52,470
eventually he changes everybody's minds

53
00:02:52,470 --> 00:02:55,860
and they acquit the kid so there you see

54
00:02:55,860 --> 00:02:59,130
juror number seven that that was me and

55
00:02:59,130 --> 00:03:01,470
the guy who was about to stab him with a

56
00:03:01,470 --> 00:03:03,120
knife every juror number three that's

57
00:03:03,120 --> 00:03:08,130
Brendan Eich and in fact we were all

58
00:03:08,130 --> 00:03:10,080
Angry Men there were no women involved

59
00:03:10,080 --> 00:03:11,940
in this I don't know why that I think

60
00:03:11,940 --> 00:03:14,370
there should be but there aren't it's

61
00:03:14,370 --> 00:03:15,780
hard enough to get men to come to these

62
00:03:15,780 --> 00:03:17,580
things there were occasions when I

63
00:03:17,580 --> 00:03:19,110
couldn't make the meeting so I send

64
00:03:19,110 --> 00:03:21,989
people from my team and I asked him to

65
00:03:21,989 --> 00:03:23,519
report when it was done and they said oh

66
00:03:23,519 --> 00:03:25,230
it was really interesting is that would

67
00:03:25,230 --> 00:03:29,840
you go again no no would not go again

68
00:03:29,840 --> 00:03:35,730
then there was the 13th juror know the

69
00:03:35,730 --> 00:03:37,980
alternate who kept saying can we speed

70
00:03:37,980 --> 00:03:39,180
this up you know I couldn't get down

71
00:03:39,180 --> 00:03:40,709
with this you know can we make this go

72
00:03:40,709 --> 00:03:44,700
faster so the place where this was all

73
00:03:44,700 --> 00:03:47,250
happening was at tc39 technical

74
00:03:47,250 --> 00:03:50,580
committee 39 of ECMO this is where the

75
00:03:50,580 --> 00:03:51,900
stewardship of the ECMO script

76
00:03:51,900 --> 00:03:54,330
programming language happens at the time

77
00:03:54,330 --> 00:03:57,420
that i joined tc39 which was about three

78
00:03:57,420 --> 00:03:59,459
and a half years ago there were no

79
00:03:59,459 --> 00:04:00,959
members of the committee who actually

80
00:04:00,959 --> 00:04:01,780
used the way

81
00:04:01,780 --> 00:04:04,090
which there was nobody who represented

82
00:04:04,090 --> 00:04:05,860
you know one who had ever written a web

83
00:04:05,860 --> 00:04:08,230
app nobody they all knew the language

84
00:04:08,230 --> 00:04:09,520
really well because they're all

85
00:04:09,520 --> 00:04:11,020
implementers of the language and the

86
00:04:11,020 --> 00:04:13,000
things that they wanted to do with it

87
00:04:13,000 --> 00:04:14,770
were things that were going to be fun to

88
00:04:14,770 --> 00:04:17,260
do in the implementation they really had

89
00:04:17,260 --> 00:04:19,150
no idea what you need it in order to

90
00:04:19,150 --> 00:04:21,850
make the language better for you at that

91
00:04:21,850 --> 00:04:23,980
time was a pretty small club there was

92
00:04:23,980 --> 00:04:26,500
Adobe Mozilla opera and Microsoft and

93
00:04:26,500 --> 00:04:27,970
opera actually shouldn't have been there

94
00:04:27,970 --> 00:04:29,770
because opera at that time was not a

95
00:04:29,770 --> 00:04:32,080
member of Vecna ineptness rules are very

96
00:04:32,080 --> 00:04:34,270
clear that only members of the

97
00:04:34,270 --> 00:04:35,500
organization are allowed to participate

98
00:04:35,500 --> 00:04:39,220
in the meetings what the committee was

99
00:04:39,220 --> 00:04:41,020
doing was pursuing a design that had

100
00:04:41,020 --> 00:04:44,860
begun at Netscape in 1999 and in 1999

101
00:04:44,860 --> 00:04:46,300
the problems that we had with the

102
00:04:46,300 --> 00:04:48,550
language as we perceived it in the way

103
00:04:48,550 --> 00:04:50,290
we used it were radically different than

104
00:04:50,290 --> 00:04:52,990
they are now for example at that time

105
00:04:52,990 --> 00:04:55,060
there was nobody using the language and

106
00:04:55,060 --> 00:04:57,490
so they were considering pretty drastic

107
00:04:57,490 --> 00:04:59,500
modifications to it in order to try to

108
00:04:59,500 --> 00:05:03,760
get somebody to like it that wasn't the

109
00:05:03,760 --> 00:05:04,990
case at the time that I joined the

110
00:05:04,990 --> 00:05:07,150
committee Ajax had already happened the

111
00:05:07,150 --> 00:05:08,710
language was taking off it was hugely

112
00:05:08,710 --> 00:05:11,620
popular and once something becomes

113
00:05:11,620 --> 00:05:15,310
hugely popular your license to make

114
00:05:15,310 --> 00:05:18,940
modifications to it is revoked you have

115
00:05:18,940 --> 00:05:20,860
to be much more cautious about what

116
00:05:20,860 --> 00:05:25,990
changes you can make so the design that

117
00:05:25,990 --> 00:05:28,270
they had begun in 1999 was abandoned

118
00:05:28,270 --> 00:05:33,820
early in the 21st century but when Ajax

119
00:05:33,820 --> 00:05:35,229
happened suddenly there were people

120
00:05:35,229 --> 00:05:37,150
using the language so was like oh okay

121
00:05:37,150 --> 00:05:39,400
there's reason to do this now so they

122
00:05:39,400 --> 00:05:42,400
picked it up again I wasn't convinced

123
00:05:42,400 --> 00:05:44,770
that we should finish this language I

124
00:05:44,770 --> 00:05:46,930
thought it had a lot of deep problems

125
00:05:46,930 --> 00:05:49,720
but first of most was that it didn't

126
00:05:49,720 --> 00:05:51,310
solve any of the problems that we had

127
00:05:51,310 --> 00:05:53,260
and in my view the most significant

128
00:05:53,260 --> 00:05:55,900
problem we had was on security that were

129
00:05:55,900 --> 00:05:57,669
we're constantly men asking with

130
00:05:57,669 --> 00:06:01,270
cross-site scripting attacks and my

131
00:06:01,270 --> 00:06:03,370
company and and pretty much all of your

132
00:06:03,370 --> 00:06:05,080
companies are very much at risk at that

133
00:06:05,080 --> 00:06:06,700
the consequences of those attacks are

134
00:06:06,700 --> 00:06:08,620
huge and they are facilitated by the

135
00:06:08,620 --> 00:06:09,510
design of the

136
00:06:09,510 --> 00:06:12,120
language and the es for design did

137
00:06:12,120 --> 00:06:13,530
absolutely nothing to correct any of

138
00:06:13,530 --> 00:06:17,370
those problems we also have problems

139
00:06:17,370 --> 00:06:22,050
with inter browser compatibility and the

140
00:06:22,050 --> 00:06:23,790
design that they were pursuing wasn't

141
00:06:23,790 --> 00:06:26,520
helping us there either there was strong

142
00:06:26,520 --> 00:06:28,080
interest in the web community to make

143
00:06:28,080 --> 00:06:30,750
the language suck less although nobody

144
00:06:30,750 --> 00:06:32,340
really knows what that means and there

145
00:06:32,340 --> 00:06:34,080
was not a good way to articulate that

146
00:06:34,080 --> 00:06:37,110
and so the committee's interpretation

147
00:06:37,110 --> 00:06:39,300
was any radical change we make is going

148
00:06:39,300 --> 00:06:42,420
to make it suck less which I wasn't

149
00:06:42,420 --> 00:06:43,920
confident that was the case I was

150
00:06:43,920 --> 00:06:45,120
concerned that it was actually going to

151
00:06:45,120 --> 00:06:47,370
make it suck more by making a language

152
00:06:47,370 --> 00:06:49,320
bigger and more complicated without

153
00:06:49,320 --> 00:06:52,830
producing any compensating value in

154
00:06:52,830 --> 00:06:55,200
return and we've seen lots of cases

155
00:06:55,200 --> 00:06:57,450
where good intentions have proven to be

156
00:06:57,450 --> 00:07:00,270
ineffective so I wanted to bring the

157
00:07:00,270 --> 00:07:03,150
committee back to doing good design but

158
00:07:03,150 --> 00:07:05,850
they did not want to hear it they refuse

159
00:07:05,850 --> 00:07:07,440
to argue about their system as a whole

160
00:07:07,440 --> 00:07:09,090
they refused to argue about the

161
00:07:09,090 --> 00:07:11,970
necessity of individual features they

162
00:07:11,970 --> 00:07:14,130
would consider arguments about errors

163
00:07:14,130 --> 00:07:16,020
and specific features but they wouldn't

164
00:07:16,020 --> 00:07:17,520
talk about whether or not we should even

165
00:07:17,520 --> 00:07:21,420
have it or not they claim that they'd

166
00:07:21,420 --> 00:07:23,190
been at work on this for many years and

167
00:07:23,190 --> 00:07:24,960
I just shown up and that they would be

168
00:07:24,960 --> 00:07:28,890
done in a year so essentially I'd missed

169
00:07:28,890 --> 00:07:32,820
the window for proposing changes to to

170
00:07:32,820 --> 00:07:35,760
the thing and so it was just done so

171
00:07:35,760 --> 00:07:37,110
that was very disappointing I was too

172
00:07:37,110 --> 00:07:39,660
late to affect the process but that was

173
00:07:39,660 --> 00:07:42,630
just the way it was however it turned

174
00:07:42,630 --> 00:07:44,190
out that the Microsoft member had

175
00:07:44,190 --> 00:07:47,610
similar concerns so I took him aside at

176
00:07:47,610 --> 00:07:48,870
one of the meetings and asked him what

177
00:07:48,870 --> 00:07:50,070
do you really think about this because

178
00:07:50,070 --> 00:07:51,660
at this point microsoft had been so

179
00:07:51,660 --> 00:07:55,110
cowed on by the web community and

180
00:07:55,110 --> 00:07:56,640
everybody that they were pretty much

181
00:07:56,640 --> 00:08:00,150
going along with everything but secretly

182
00:08:00,150 --> 00:08:02,070
they knew that this wasn't the right

183
00:08:02,070 --> 00:08:05,460
thing the guy talked to was concerned

184
00:08:05,460 --> 00:08:07,320
that if microsoft changed their position

185
00:08:07,320 --> 00:08:11,650
on it then they would be attacked for

186
00:08:11,650 --> 00:08:15,020
doing anti-competitive behavior which

187
00:08:15,020 --> 00:08:17,240
turned out to be correct that intact

188
00:08:17,240 --> 00:08:21,379
happened but the concern wasn't to be

189
00:08:21,379 --> 00:08:23,180
anti-competitive the concern was to try

190
00:08:23,180 --> 00:08:24,580
to do the right thing and I convinced

191
00:08:24,580 --> 00:08:27,199
him that Microsoft should do the right

192
00:08:27,199 --> 00:08:29,690
thing and to his credit he decided to do

193
00:08:29,690 --> 00:08:31,250
the right thing and convinced Microsoft

194
00:08:31,250 --> 00:08:34,550
to do the right thing um so we had this

195
00:08:34,550 --> 00:08:36,800
big showdown in redmond at one of our

196
00:08:36,800 --> 00:08:39,709
scheduled meetings it was the biggest

197
00:08:39,709 --> 00:08:41,719
meeting we ever had on everybody

198
00:08:41,719 --> 00:08:45,260
sandbagged it except me so microsoft

199
00:08:45,260 --> 00:08:46,910
brought in a whole lot of extra people

200
00:08:46,910 --> 00:08:51,410
including the IE team mozilla brought in

201
00:08:51,410 --> 00:08:53,209
a whole bunch of extra people adobe

202
00:08:53,209 --> 00:08:54,050
brought in a whole bunch of people

203
00:08:54,050 --> 00:08:55,610
people had never attended the meetings

204
00:08:55,610 --> 00:08:57,350
before they just wanted to have numbers

205
00:08:57,350 --> 00:08:59,600
around the table in case we voted on

206
00:08:59,600 --> 00:09:03,079
something but there'd be something to

207
00:09:03,079 --> 00:09:05,959
keep score about prior to the meeting

208
00:09:05,959 --> 00:09:08,660
Microsoft wanted to play hardball they

209
00:09:08,660 --> 00:09:10,160
want to set up a paper trail begin

210
00:09:10,160 --> 00:09:12,350
grievance procedures involving the

211
00:09:12,350 --> 00:09:14,029
secretary and a techna and all this

212
00:09:14,029 --> 00:09:15,709
stuff and I didn't want to have any part

213
00:09:15,709 --> 00:09:17,779
of that just its technical we're

214
00:09:17,779 --> 00:09:19,040
disagreeing with these people on

215
00:09:19,040 --> 00:09:20,899
technical grounds let's keep the

216
00:09:20,899 --> 00:09:22,930
argument technical and not try to

217
00:09:22,930 --> 00:09:26,329
escalate it into other areas and they

218
00:09:26,329 --> 00:09:29,480
agreed to go along with that but we were

219
00:09:29,480 --> 00:09:32,480
still polarized in committee basically

220
00:09:32,480 --> 00:09:35,209
as a consequence of us for group saying

221
00:09:35,209 --> 00:09:37,370
we're not interested in anything that

222
00:09:37,370 --> 00:09:38,810
you have to say about moderating what

223
00:09:38,810 --> 00:09:41,750
we're currently doing so Microsoft took

224
00:09:41,750 --> 00:09:44,570
an extreme position saying we refuse to

225
00:09:44,570 --> 00:09:45,920
accept what you're doing in whole or in

226
00:09:45,920 --> 00:09:47,690
part which i think was maybe a little

227
00:09:47,690 --> 00:09:49,790
stronger than what they should have said

228
00:09:49,790 --> 00:09:51,230
what I think they should have said was

229
00:09:51,230 --> 00:09:53,450
we need to reset we need to review

230
00:09:53,450 --> 00:09:54,920
individually every feature that's going

231
00:09:54,920 --> 00:09:57,860
on here based on some new criteria but

232
00:09:57,860 --> 00:09:59,270
they didn't say that and so that caused

233
00:09:59,270 --> 00:10:01,880
some bad feelings and so the committee

234
00:10:01,880 --> 00:10:03,589
was not in consensus now which was a

235
00:10:03,589 --> 00:10:05,720
really bad thing because as a Standards

236
00:10:05,720 --> 00:10:08,120
Committee has to be in consensus in

237
00:10:08,120 --> 00:10:10,699
order to do its work so the fellowship

238
00:10:10,699 --> 00:10:14,209
was now broken at this point so I

239
00:10:14,209 --> 00:10:16,820
proposed an alternative project which I

240
00:10:16,820 --> 00:10:20,540
called es 3.1 indicating that it would

241
00:10:20,540 --> 00:10:23,209
be a much smaller increment

242
00:10:23,209 --> 00:10:25,829
over es3 which was the current

243
00:10:25,829 --> 00:10:28,290
specification it would be a minimalist

244
00:10:28,290 --> 00:10:31,050
alternative to the maximal alternative

245
00:10:31,050 --> 00:10:34,350
that was es for unfortunately the

246
00:10:34,350 --> 00:10:37,230
argument went public and when it went

247
00:10:37,230 --> 00:10:40,110
public it went really nasty part of the

248
00:10:40,110 --> 00:10:42,779
reason why when public was that es for

249
00:10:42,779 --> 00:10:44,760
was positioned as the official new

250
00:10:44,760 --> 00:10:49,350
standard and that yes 3.1 was breaking

251
00:10:49,350 --> 00:10:51,720
the rules that es for had already been

252
00:10:51,720 --> 00:10:54,870
approved and 3.1 was trying to undo the

253
00:10:54,870 --> 00:10:56,640
system and that wasn't the case at all

254
00:10:56,640 --> 00:10:58,560
but that was the perception that had

255
00:10:58,560 --> 00:11:01,829
been given to the public there were a

256
00:11:01,829 --> 00:11:07,200
lot of accusations made at Microsoft and

257
00:11:07,200 --> 00:11:11,100
at Yahoo for example Yahoo and me in

258
00:11:11,100 --> 00:11:13,140
particular were accused of conspiring

259
00:11:13,140 --> 00:11:15,750
with Microsoft in order to protect IES

260
00:11:15,750 --> 00:11:17,730
dominance in the marketplace and if any

261
00:11:17,730 --> 00:11:19,860
of you know my position on ie you know

262
00:11:19,860 --> 00:11:23,550
that's absolutely not the case we were

263
00:11:23,550 --> 00:11:26,310
aligned on this because on the the

264
00:11:26,310 --> 00:11:29,370
technical arguments were right so I I

265
00:11:29,370 --> 00:11:30,959
was able to do one thing that Henry

266
00:11:30,959 --> 00:11:32,640
Fonda was not able to do and that was to

267
00:11:32,640 --> 00:11:35,850
bring more jurors into the jury room so

268
00:11:35,850 --> 00:11:38,310
I went out and started talking to other

269
00:11:38,310 --> 00:11:41,579
companies and I wasn't so concerned

270
00:11:41,579 --> 00:11:43,440
about what their positions were but that

271
00:11:43,440 --> 00:11:44,910
I wanted them to come and join the

272
00:11:44,910 --> 00:11:46,769
argument because my feeling was the more

273
00:11:46,769 --> 00:11:49,170
voices we had discussing this the more

274
00:11:49,170 --> 00:11:50,220
likely we were going to reach a

275
00:11:50,220 --> 00:11:52,230
consensus because right now we were

276
00:11:52,230 --> 00:11:54,180
divided into two extremes and that

277
00:11:54,180 --> 00:11:55,709
wasn't good we somehow had to get back

278
00:11:55,709 --> 00:11:57,870
to consensus and my hope was if I could

279
00:11:57,870 --> 00:11:59,310
get more parties to join the discussion

280
00:11:59,310 --> 00:12:02,519
we would be able to do that many of

281
00:12:02,519 --> 00:12:04,500
those companies sat on the sideline told

282
00:12:04,500 --> 00:12:06,120
me privately that they were glad that I

283
00:12:06,120 --> 00:12:08,519
was fighting the fight for them but they

284
00:12:08,519 --> 00:12:10,050
did not want to get involved because

285
00:12:10,050 --> 00:12:11,430
they didn't want to get tarnished the

286
00:12:11,430 --> 00:12:13,430
way that Microsoft was getting tarnished

287
00:12:13,430 --> 00:12:16,160
sorry

288
00:12:16,160 --> 00:12:19,950
so we continue to agree to disagree that

289
00:12:19,950 --> 00:12:21,840
was all we could do we had formally

290
00:12:21,840 --> 00:12:23,730
split into two committees but continue

291
00:12:23,730 --> 00:12:27,330
to hold joint meetings it was really

292
00:12:27,330 --> 00:12:29,510
uncomfortable and it was unproductive

293
00:12:29,510 --> 00:12:32,220
but through that process eventually

294
00:12:32,220 --> 00:12:35,300
other companies join including IBM Apple

295
00:12:35,300 --> 00:12:39,030
Google opera dojo and company 100 from

296
00:12:39,030 --> 00:12:41,760
Korea and it took a while to get all

297
00:12:41,760 --> 00:12:42,990
those companies to the table but

298
00:12:42,990 --> 00:12:45,150
eventually could we got them and things

299
00:12:45,150 --> 00:12:47,640
got a lot better all through this

300
00:12:47,640 --> 00:12:50,700
process ECMO was really worried ECMO

301
00:12:50,700 --> 00:12:53,100
script is their biggest product and it's

302
00:12:53,100 --> 00:12:56,070
their hit it's the anybody know of any

303
00:12:56,070 --> 00:13:00,720
other ekman standards and so ECMO script

304
00:13:00,720 --> 00:13:02,700
was going out of control and if they

305
00:13:02,700 --> 00:13:04,560
lost that that would be hugely

306
00:13:04,560 --> 00:13:05,850
embarrassing at least and perhaps

307
00:13:05,850 --> 00:13:10,170
monetarily embarrassing they could not

308
00:13:10,170 --> 00:13:13,140
tolerate two proposals if we went to the

309
00:13:13,140 --> 00:13:14,310
General Assembly with competing

310
00:13:14,310 --> 00:13:19,140
proposals both would have to fail and so

311
00:13:19,140 --> 00:13:22,290
we got into a race will tell you about

312
00:13:22,290 --> 00:13:24,810
that in a minute so akma's

313
00:13:24,810 --> 00:13:27,420
secretary-general and Edmonds president

314
00:13:27,420 --> 00:13:30,060
both began attending our meetings which

315
00:13:30,060 --> 00:13:32,160
was really good because everybody was a

316
00:13:32,160 --> 00:13:35,330
much better behavior now so a lot of the

317
00:13:35,330 --> 00:13:37,770
civility was returned to the process and

318
00:13:37,770 --> 00:13:41,400
and it got a whole lot nicer so with

319
00:13:41,400 --> 00:13:43,380
that new spirit of niceness we we

320
00:13:43,380 --> 00:13:45,870
started to try to agree to things to try

321
00:13:45,870 --> 00:13:48,090
to get back to some kind of consensus

322
00:13:48,090 --> 00:13:51,000
and all we could agree on was that 3.1

323
00:13:51,000 --> 00:13:53,100
and four should have some sort of subset

324
00:13:53,100 --> 00:13:55,770
relationship so that 3.1 should be a

325
00:13:55,770 --> 00:13:58,260
subset of four but we couldn't agree on

326
00:13:58,260 --> 00:14:00,480
what that meant the es poor people meant

327
00:14:00,480 --> 00:14:03,270
that the s3 team could only mine

328
00:14:03,270 --> 00:14:05,280
features from he s for that there are so

329
00:14:05,280 --> 00:14:07,050
many features in his for that anything

330
00:14:07,050 --> 00:14:08,880
we'd ever want to do is go to already be

331
00:14:08,880 --> 00:14:11,820
in there but from our perspective and

332
00:14:11,820 --> 00:14:15,510
3.1 we were trying to make the language

333
00:14:15,510 --> 00:14:17,400
more secure and that had not been a goal

334
00:14:17,400 --> 00:14:19,770
for es for and so we needed features

335
00:14:19,770 --> 00:14:21,840
that they have not considered so our

336
00:14:21,840 --> 00:14:22,860
position was they

337
00:14:22,860 --> 00:14:25,680
had to adopt anything that we added and

338
00:14:25,680 --> 00:14:27,060
they weren't real happy about that

339
00:14:27,060 --> 00:14:30,470
either so we're still not in consensus

340
00:14:30,470 --> 00:14:34,530
we were not converging is for it turned

341
00:14:34,530 --> 00:14:36,630
out it was one of those projects that

342
00:14:36,630 --> 00:14:38,970
was slipping a year every year when I

343
00:14:38,970 --> 00:14:41,040
joined the committee they were planning

344
00:14:41,040 --> 00:14:43,260
on having the thing be done and approved

345
00:14:43,260 --> 00:14:46,290
in a year they were planning on having

346
00:14:46,290 --> 00:14:48,540
it done well before adobe air shipped

347
00:14:48,540 --> 00:14:51,780
that was Adobe's motivation for why they

348
00:14:51,780 --> 00:14:53,580
wanted this new language standard it was

349
00:14:53,580 --> 00:14:55,320
going to be the one language in adobe

350
00:14:55,320 --> 00:14:58,020
air on adobe air shipped and it was

351
00:14:58,020 --> 00:15:00,240
still a year away from release and so on

352
00:15:00,240 --> 00:15:01,830
and eventually they got to the point

353
00:15:01,830 --> 00:15:03,270
where it was clear it was never going to

354
00:15:03,270 --> 00:15:06,540
finish so they began jetta singh

355
00:15:06,540 --> 00:15:08,700
features now when on an attempt to get

356
00:15:08,700 --> 00:15:11,460
back on schedule so they were finally

357
00:15:11,460 --> 00:15:13,020
doing the feature review that I'd asked

358
00:15:13,020 --> 00:15:15,090
for the first meeting but now the

359
00:15:15,090 --> 00:15:18,120
motivation was to fix the schedule not

360
00:15:18,120 --> 00:15:22,260
to fix the design however in looking at

361
00:15:22,260 --> 00:15:23,760
that they discovered that there were in

362
00:15:23,760 --> 00:15:25,710
fact deep problems and the things that

363
00:15:25,710 --> 00:15:27,150
they were proposing and in the

364
00:15:27,150 --> 00:15:28,710
interaction between those things so

365
00:15:28,710 --> 00:15:30,960
ultimately it was determined that the es

366
00:15:30,960 --> 00:15:33,480
for design had been unsound all along

367
00:15:33,480 --> 00:15:37,380
and so it was ultimately abandoned on he

368
00:15:37,380 --> 00:15:39,480
has 3.1 because it was a much more

369
00:15:39,480 --> 00:15:42,240
modest proposal was eventually completed

370
00:15:42,240 --> 00:15:44,550
and became a candidate for the fifth

371
00:15:44,550 --> 00:15:46,200
edition we decided not to call it the

372
00:15:46,200 --> 00:15:47,580
fourth edition because the fourth

373
00:15:47,580 --> 00:15:50,340
edition had already been pre-sold so

374
00:15:50,340 --> 00:15:52,170
there was an expectation as to what that

375
00:15:52,170 --> 00:15:54,300
was and this speck was not going to meet

376
00:15:54,300 --> 00:15:56,820
that expectation so we decided to pump

377
00:15:56,820 --> 00:15:59,820
the revision number ECMO was all

378
00:15:59,820 --> 00:16:01,710
confused by that smaller as a fourth

379
00:16:01,710 --> 00:16:05,250
edition but we got that through so it

380
00:16:05,250 --> 00:16:07,080
goes to expose General Assembly next

381
00:16:07,080 --> 00:16:10,260
month we have a meeting at Google in

382
00:16:10,260 --> 00:16:12,780
Mountain View California and I'm hoping

383
00:16:12,780 --> 00:16:14,580
that the general assembly will vote YES

384
00:16:14,580 --> 00:16:15,449
on this in

385
00:16:15,449 --> 00:16:17,309
we will have the first revision techno

386
00:16:17,309 --> 00:16:19,319
script in 10 years that'll be a good

387
00:16:19,319 --> 00:16:27,359
thing one company has stated its

388
00:16:27,359 --> 00:16:29,759
intention to vote against it in that

389
00:16:29,759 --> 00:16:33,720
company is IBM and the issue is decimal

390
00:16:33,720 --> 00:16:36,569
arithmetic you make me know what what

391
00:16:36,569 --> 00:16:38,279
what's that got to do with with declan

392
00:16:38,279 --> 00:16:41,399
script well it turns out the number one

393
00:16:41,399 --> 00:16:43,619
most reported bug in mozillas database

394
00:16:43,619 --> 00:16:45,989
is 0 point 1 plus point two is not

395
00:16:45,989 --> 00:16:48,089
exactly equal 2.3 and there are lots of

396
00:16:48,089 --> 00:16:49,619
variations on this but they all come

397
00:16:49,619 --> 00:16:51,299
down to the same fundamental problem

398
00:16:51,299 --> 00:16:53,009
which is that binary floating-point

399
00:16:53,009 --> 00:16:55,379
cannot accurately represent decimal

400
00:16:55,379 --> 00:16:57,329
numbers which is a problem because on

401
00:16:57,329 --> 00:17:00,480
our planet the dominant species uses

402
00:17:00,480 --> 00:17:05,610
decimal numbers and the number system in

403
00:17:05,610 --> 00:17:08,279
this language was designed for some

404
00:17:08,279 --> 00:17:10,409
other planet some other race of aliens

405
00:17:10,409 --> 00:17:13,649
they may be really nice creatures but

406
00:17:13,649 --> 00:17:17,010
they're not us say you would think if

407
00:17:17,010 --> 00:17:19,380
that is the most reported bug the most

408
00:17:19,380 --> 00:17:22,079
replicated bug that deserves fixing

409
00:17:22,079 --> 00:17:25,409
wouldn't you think and and it does and

410
00:17:25,409 --> 00:17:28,830
we should fix it so where did the bug

411
00:17:28,830 --> 00:17:30,750
come from it's actually not a bug in the

412
00:17:30,750 --> 00:17:35,039
design of ECMO script it's a an inherent

413
00:17:35,039 --> 00:17:38,159
problem in I triple you 750 for floating

414
00:17:38,159 --> 00:17:40,230
point which is a floating point system

415
00:17:40,230 --> 00:17:42,659
that's used in the whole world and it's

416
00:17:42,659 --> 00:17:45,539
used everywhere on it was a it came

417
00:17:45,539 --> 00:17:47,010
originally out of Intel out of the

418
00:17:47,010 --> 00:17:51,630
failed 432 project and it significantly

419
00:17:51,630 --> 00:17:54,120
improved the uniformity of

420
00:17:54,120 --> 00:17:56,159
floating-point results across different

421
00:17:56,159 --> 00:18:01,350
CPUs prior to 750 for every computer

422
00:18:01,350 --> 00:18:03,059
manufacturer and there used to be lots

423
00:18:03,059 --> 00:18:06,120
of them had several architectures and

424
00:18:06,120 --> 00:18:08,190
each architecture had a different scheme

425
00:18:08,190 --> 00:18:09,720
for doing floating-point different word

426
00:18:09,720 --> 00:18:12,179
sizes different mantissa sizes different

427
00:18:12,179 --> 00:18:13,830
encodings different exponent sizes

428
00:18:13,830 --> 00:18:15,809
different biases different on rounding

429
00:18:15,809 --> 00:18:18,450
loads all sorts of different rate X's

430
00:18:18,450 --> 00:18:21,929
and so writing a program saying Fortran

431
00:18:21,929 --> 00:18:24,400
that would get the same results on one

432
00:18:24,400 --> 00:18:25,720
another was really really difficult

433
00:18:25,720 --> 00:18:28,720
perhaps impossible so making it all

434
00:18:28,720 --> 00:18:32,560
common was a huge step forward and this

435
00:18:32,560 --> 00:18:33,700
was a really good thing for that

436
00:18:33,700 --> 00:18:35,920
although it turns out now everything's

437
00:18:35,920 --> 00:18:37,960
Intel so like you know who cares that

438
00:18:37,960 --> 00:18:40,600
but at that time it was an important

439
00:18:40,600 --> 00:18:43,990
advance and it is very well suited to

440
00:18:43,990 --> 00:18:47,170
some applications including applications

441
00:18:47,170 --> 00:18:49,630
we have both very large and very small

442
00:18:49,630 --> 00:18:51,430
members that interact with the Otago the

443
00:18:51,430 --> 00:18:53,770
other which includes astronomy chemistry

444
00:18:53,770 --> 00:18:57,190
and physics and lots of other things but

445
00:18:57,190 --> 00:18:59,650
not business applications or anything

446
00:18:59,650 --> 00:19:02,170
that involves the level of math that you

447
00:19:02,170 --> 00:19:05,400
might have learned in middle school

448
00:19:05,400 --> 00:19:07,780
binary floating-point is poorly suited

449
00:19:07,780 --> 00:19:10,030
for most other applications including

450
00:19:10,030 --> 00:19:16,090
everything that we do so ok so we ought

451
00:19:16,090 --> 00:19:18,880
to fix that and again the problem is

452
00:19:18,880 --> 00:19:20,410
that binary floating-point cannot

453
00:19:20,410 --> 00:19:22,990
exactly represent decimal fractions it

454
00:19:22,990 --> 00:19:25,480
can handle dollars and quarters but it

455
00:19:25,480 --> 00:19:27,460
accumulates errors on pennies nickels

456
00:19:27,460 --> 00:19:29,800
and dimes how to use an American

457
00:19:29,800 --> 00:19:34,000
metaphor if you type a number into your

458
00:19:34,000 --> 00:19:36,340
program and it has a decimal point in it

459
00:19:36,340 --> 00:19:38,470
you already have an error in your

460
00:19:38,470 --> 00:19:41,080
program because that number does not

461
00:19:41,080 --> 00:19:43,810
represent the value that you typed in it

462
00:19:43,810 --> 00:19:49,300
you're getting something else so given

463
00:19:49,300 --> 00:19:51,990
the applications that echo script runs I

464
00:19:51,990 --> 00:19:56,530
Triple E 754 was a really bad choice but

465
00:19:56,530 --> 00:19:58,360
it was also a popular choice because the

466
00:19:58,360 --> 00:20:00,400
same mistake was made in virtually every

467
00:20:00,400 --> 00:20:02,890
language design completed over the last

468
00:20:02,890 --> 00:20:05,140
20 years everybody adopted this thing

469
00:20:05,140 --> 00:20:08,170
because it was a standard just because

470
00:20:08,170 --> 00:20:09,430
something is a standard doesn't mean

471
00:20:09,430 --> 00:20:10,690
it's the right choice for every

472
00:20:10,690 --> 00:20:18,409
application

473
00:20:18,419 --> 00:20:22,000
so so that's a problem that we need to

474
00:20:22,000 --> 00:20:24,760
fix and IBM came up with a proposal for

475
00:20:24,760 --> 00:20:26,559
how to fix it something that had a

476
00:20:26,559 --> 00:20:30,220
working title of I Tripoli 754 r4 I

477
00:20:30,220 --> 00:20:33,820
think revision it adds decimal node

478
00:20:33,820 --> 00:20:40,480
modes or decimal radix is to some 54 it

479
00:20:40,480 --> 00:20:41,590
corrects the problems with

480
00:20:41,590 --> 00:20:45,250
representation of decimal fractions IBM

481
00:20:45,250 --> 00:20:46,899
tried to get this into the third edition

482
00:20:46,899 --> 00:20:50,049
in 1999 the committee at that time said

483
00:20:50,049 --> 00:20:53,139
oh we'd like to get it but we don't have

484
00:20:53,139 --> 00:20:54,549
time we'll put it in the next one will

485
00:20:54,549 --> 00:20:56,860
be coming up next year at that time they

486
00:20:56,860 --> 00:20:58,720
didn't know that es for was going to

487
00:20:58,720 --> 00:21:00,700
take ten years at that point they'd been

488
00:21:00,700 --> 00:21:02,350
on an annual schedule and they figured

489
00:21:02,350 --> 00:21:06,490
the next one will come so IBM's been

490
00:21:06,490 --> 00:21:08,380
waiting for it ever since and they think

491
00:21:08,380 --> 00:21:10,360
that they were promised this feature and

492
00:21:10,360 --> 00:21:15,010
that they should have it except that it

493
00:21:15,010 --> 00:21:16,990
was ultimately rejected by the es for

494
00:21:16,990 --> 00:21:20,440
group and by the es 3.1 group there was

495
00:21:20,440 --> 00:21:21,730
one of the few things we could agree on

496
00:21:21,730 --> 00:21:25,840
but we all agreed that the the decimal

497
00:21:25,840 --> 00:21:29,139
problem is a significant problem and 754

498
00:21:29,139 --> 00:21:31,389
are was not the solution to it at least

499
00:21:31,389 --> 00:21:34,899
not in the short term so let's look at

500
00:21:34,899 --> 00:21:37,630
the beast so this is 750 for this is

501
00:21:37,630 --> 00:21:40,149
what Java calls a float it's a 64-bit

502
00:21:40,149 --> 00:21:42,970
value made up of several fields there's

503
00:21:42,970 --> 00:21:47,230
a 56 bit mantissa there's an exponent

504
00:21:47,230 --> 00:21:50,139
which is biased on the reason it's

505
00:21:50,139 --> 00:21:52,299
biased is so that you can use integer

506
00:21:52,299 --> 00:21:54,850
comparisons for comparison comparing

507
00:21:54,850 --> 00:21:57,279
normalized numbers that's a value of

508
00:21:57,279 --> 00:22:00,010
value if floating-point subtract is

509
00:22:00,010 --> 00:22:02,350
significantly slower than integer

510
00:22:02,350 --> 00:22:06,039
subtract so you take the mantissa which

511
00:22:06,039 --> 00:22:09,929
is scaled to be a number between 0 and 1

512
00:22:09,929 --> 00:22:13,690
and multiply it by 2 raised to the

513
00:22:13,690 --> 00:22:15,789
unbiased exponent and

514
00:22:15,789 --> 00:22:17,649
and that's the source of the problem

515
00:22:17,649 --> 00:22:19,419
because we're raising to a power of 2

516
00:22:19,419 --> 00:22:23,080
and not a power of 10 so they came up

517
00:22:23,080 --> 00:22:26,519
with this to replace it what they call

518
00:22:26,519 --> 00:22:31,960
754 our deck 128 so it's now a 128-bit

519
00:22:31,960 --> 00:22:35,229
number so okay memory is cheap that's

520
00:22:35,229 --> 00:22:37,119
not a problem just doubling the size of

521
00:22:37,119 --> 00:22:40,359
everything but the encoding is really

522
00:22:40,359 --> 00:22:43,840
complicated it's divided into 11 10 bit

523
00:22:43,840 --> 00:22:46,119
fields each of those fields contains a

524
00:22:46,119 --> 00:22:50,950
number between 0 & 999 and then the

525
00:22:50,950 --> 00:22:52,929
exponent has some extra bits in it as

526
00:22:52,929 --> 00:22:54,729
well they couldn't fit them into another

527
00:22:54,729 --> 00:22:57,220
packet of 10 so the extra bits kind of

528
00:22:57,220 --> 00:23:00,489
floating around in there so unpacking

529
00:23:00,489 --> 00:23:02,169
all this stuff is really time consuming

530
00:23:02,169 --> 00:23:04,509
so say you want to add one to one of

531
00:23:04,509 --> 00:23:08,950
these you unpack the the first triple

532
00:23:08,950 --> 00:23:12,009
add one to it ask if it gets bigger than

533
00:23:12,009 --> 00:23:13,960
a thousand or a thousand or more if it

534
00:23:13,960 --> 00:23:16,059
does you subtract a thousand from its

535
00:23:16,059 --> 00:23:18,849
door to pack up next one had one to it

536
00:23:18,849 --> 00:23:25,450
and so on 11 times it's really slow it

537
00:23:25,450 --> 00:23:30,700
is really really slow now one problem

538
00:23:30,700 --> 00:23:32,799
with it is it will produce results that

539
00:23:32,799 --> 00:23:35,259
are more correct but some applications

540
00:23:35,259 --> 00:23:37,599
made to be dependent on incorrect

541
00:23:37,599 --> 00:23:39,639
results this happens in the web all the

542
00:23:39,639 --> 00:23:42,879
time this is why Microsoft cannot fix ie

543
00:23:42,879 --> 00:23:44,739
because everybody who's written

544
00:23:44,739 --> 00:23:47,499
applications on ie depends on them

545
00:23:47,499 --> 00:23:49,389
failing in a particular way and when

546
00:23:49,389 --> 00:23:51,879
they change the failure mode sometimes

547
00:23:51,879 --> 00:23:54,039
by eliminating the failure mode it

548
00:23:54,039 --> 00:23:57,070
causes our programs to break which is a

549
00:23:57,070 --> 00:23:59,229
hopeless situation and we anticipate

550
00:23:59,229 --> 00:24:02,799
there are similar problems in the number

551
00:24:02,799 --> 00:24:05,080
representation we think that it fixes

552
00:24:05,080 --> 00:24:07,539
more programs and it breaks but it does

553
00:24:07,539 --> 00:24:08,919
break some programs and we're trying

554
00:24:08,919 --> 00:24:11,320
really hard in the standard business not

555
00:24:11,320 --> 00:24:13,539
to break anything so we're very

556
00:24:13,539 --> 00:24:15,940
constrained there we considered adding a

557
00:24:15,940 --> 00:24:17,410
used decimal mode to

558
00:24:17,410 --> 00:24:20,230
language so that that would say I know

559
00:24:20,230 --> 00:24:21,490
the numbers are going to be different

560
00:24:21,490 --> 00:24:23,110
that the results are going to be more

561
00:24:23,110 --> 00:24:25,450
correct that's what I want I will accept

562
00:24:25,450 --> 00:24:27,670
the risk for that happening and then you

563
00:24:27,670 --> 00:24:29,590
can test for it before you put it in and

564
00:24:29,590 --> 00:24:32,200
then we'll know that's good we rejected

565
00:24:32,200 --> 00:24:34,840
that because the new format is literally

566
00:24:34,840 --> 00:24:37,000
hundreds of times slower than the old

567
00:24:37,000 --> 00:24:39,700
one and right and it was vetoed mainly

568
00:24:39,700 --> 00:24:41,230
by the browser makers who are now

569
00:24:41,230 --> 00:24:43,270
working really hard to all make their

570
00:24:43,270 --> 00:24:45,580
JavaScript engines go much faster they

571
00:24:45,580 --> 00:24:47,260
weren't willing to add something that

572
00:24:47,260 --> 00:24:49,350
was going to slow them way way down now

573
00:24:49,350 --> 00:24:52,780
I think in in practice it wouldn't have

574
00:24:52,780 --> 00:24:56,380
been that big a slow down because mostly

575
00:24:56,380 --> 00:24:57,940
we're doing integer arithmetic in this

576
00:24:57,940 --> 00:24:59,320
language and we could have a special

577
00:24:59,320 --> 00:25:01,450
case for integers you know if it's an

578
00:25:01,450 --> 00:25:04,060
integer we take the integer path and

579
00:25:04,060 --> 00:25:07,330
only if it's a float do we do this super

580
00:25:07,330 --> 00:25:09,880
slow thing but the browser maker said no

581
00:25:09,880 --> 00:25:11,290
that was a hardship to them they didn't

582
00:25:11,290 --> 00:25:13,600
want to have to do that and so that's

583
00:25:13,600 --> 00:25:17,830
not an option so we couldn't do that we

584
00:25:17,830 --> 00:25:19,930
considered adding a decimal library we'd

585
00:25:19,930 --> 00:25:21,730
say like new decimal and pass it a

586
00:25:21,730 --> 00:25:23,230
string which is what your number looks

587
00:25:23,230 --> 00:25:26,380
like when you call that value dot add

588
00:25:26,380 --> 00:25:29,470
and pass another one and so on it was

589
00:25:29,470 --> 00:25:31,630
really ugly and unlikely to solve any of

590
00:25:31,630 --> 00:25:33,690
the real problems natural use because

591
00:25:33,690 --> 00:25:35,770
existing programs are still going to

592
00:25:35,770 --> 00:25:39,220
fail in exactly the same way and I don't

593
00:25:39,220 --> 00:25:40,420
think we could get anybody to write

594
00:25:40,420 --> 00:25:42,250
programs in this new mode it's just too

595
00:25:42,250 --> 00:25:45,790
ugly so it was not a solution we

596
00:25:45,790 --> 00:25:47,850
considered adding another number type

597
00:25:47,850 --> 00:25:49,840
but one of the really good things about

598
00:25:49,840 --> 00:25:51,520
this language is there's only one number

599
00:25:51,520 --> 00:25:53,170
type and so there's a whole lot of

600
00:25:53,170 --> 00:25:55,750
complexity that's factored out in other

601
00:25:55,750 --> 00:25:57,070
languages you've got more primitive

602
00:25:57,070 --> 00:25:58,810
number types in which you have to be

603
00:25:58,810 --> 00:26:00,610
aware of what the potential range of the

604
00:26:00,610 --> 00:26:03,490
values are and so on and if you guess

605
00:26:03,490 --> 00:26:05,320
wrong then you're injecting terrible

606
00:26:05,320 --> 00:26:07,540
bugs into your program JavaScript

607
00:26:07,540 --> 00:26:09,400
completely avoids that by going to the

608
00:26:09,400 --> 00:26:11,020
top of the line number and saying that's

609
00:26:11,020 --> 00:26:12,880
the only one we've got it turns out to

610
00:26:12,880 --> 00:26:15,100
be really nice but now we're adding two

611
00:26:15,100 --> 00:26:16,750
of them so that adds a whole lot of

612
00:26:16,750 --> 00:26:18,340
complexity to a language which is

613
00:26:18,340 --> 00:26:20,530
currently extremely simple and in that

614
00:26:20,530 --> 00:26:21,120
ass

615
00:26:21,120 --> 00:26:24,460
and so that might be a desirable thing

616
00:26:24,460 --> 00:26:26,200
but we really want to make sure we get

617
00:26:26,200 --> 00:26:28,809
that right and we did not have time in

618
00:26:28,809 --> 00:26:31,720
the current process so we still want to

619
00:26:31,720 --> 00:26:37,269
consider that but not right now so we

620
00:26:37,269 --> 00:26:40,659
are looking at trying to seriously do

621
00:26:40,659 --> 00:26:42,010
something about decimal in a later

622
00:26:42,010 --> 00:26:44,049
edition because it is the most reported

623
00:26:44,049 --> 00:26:46,510
problem and we do want to fix it but

624
00:26:46,510 --> 00:26:51,399
there are real complexities in this now

625
00:26:51,399 --> 00:26:53,350
through all of this there's been no

626
00:26:53,350 --> 00:26:55,240
discussion of more suitable decimal

627
00:26:55,240 --> 00:26:58,330
formats IBM's position has been its 754

628
00:26:58,330 --> 00:27:00,639
are or nothing actually they didn't say

629
00:27:00,639 --> 00:27:02,830
nothing it's just it's 754 are and

630
00:27:02,830 --> 00:27:05,889
that's it so I did some thinking maybe

631
00:27:05,889 --> 00:27:08,169
there are some other options did I do

632
00:27:08,169 --> 00:27:13,830
that damn Firefox and all their updates

633
00:27:13,830 --> 00:27:17,889
so so i invented some more decimal

634
00:27:17,889 --> 00:27:20,110
floating-point formats because they're

635
00:27:20,110 --> 00:27:22,929
actually pretty simple so this is what i

636
00:27:22,929 --> 00:27:26,799
call 96 the numbers are 64-bit integers

637
00:27:26,799 --> 00:27:30,159
scaled by nine million so you take an

638
00:27:30,159 --> 00:27:32,470
integer x 9 million and you store it

639
00:27:32,470 --> 00:27:34,779
that's a number it has some really nice

640
00:27:34,779 --> 00:27:36,700
advantages addition and subtraction

641
00:27:36,700 --> 00:27:38,440
happen at integer speeds which is the

642
00:27:38,440 --> 00:27:40,480
fastest we can do arithmetic so and

643
00:27:40,480 --> 00:27:43,149
since most of what we're adding on or

644
00:27:43,149 --> 00:27:45,190
most of what we're doing numerically is

645
00:27:45,190 --> 00:27:47,139
adding and subtracting that's a really

646
00:27:47,139 --> 00:27:48,610
nice advantage you may actually speed up

647
00:27:48,610 --> 00:27:51,880
the current language it gives you six

648
00:27:51,880 --> 00:27:55,299
exact decimal digits which i think is

649
00:27:55,299 --> 00:27:56,649
for more than we need for most

650
00:27:56,649 --> 00:27:59,710
applications and it gives us a seventh

651
00:27:59,710 --> 00:28:02,860
decimal digit so that basically we

652
00:28:02,860 --> 00:28:05,830
represent anything any integer over nine

653
00:28:05,830 --> 00:28:08,169
million the nice thing about that set is

654
00:28:08,169 --> 00:28:11,500
it allows us exact representation of

655
00:28:11,500 --> 00:28:14,950
common fractions like 1 over 60 or 1

656
00:28:14,950 --> 00:28:20,769
over 360 or one-third so that 1/3 times

657
00:28:20,769 --> 00:28:23,200
3 will be exactly equal to 1 in this

658
00:28:23,200 --> 00:28:25,090
language which is a really nice property

659
00:28:25,090 --> 00:28:25,580
you'd think

660
00:28:25,580 --> 00:28:27,980
all languages all languages should do

661
00:28:27,980 --> 00:28:30,350
that no language does that but this one

662
00:28:30,350 --> 00:28:31,790
could if we have this number type which

663
00:28:31,790 --> 00:28:33,260
would be nice there are some

664
00:28:33,260 --> 00:28:35,780
disadvantages six or seven decimal

665
00:28:35,780 --> 00:28:37,490
digits might not be enough for some

666
00:28:37,490 --> 00:28:39,260
applications for example if you're doing

667
00:28:39,260 --> 00:28:41,510
trigonometry you want to get your signs

668
00:28:41,510 --> 00:28:43,310
and get a lot of bits in them so that

669
00:28:43,310 --> 00:28:46,190
your rotations come out smoothly six or

670
00:28:46,190 --> 00:28:48,440
seven decimal places might not be enough

671
00:28:48,440 --> 00:28:49,880
for that it's only 24 bits of

672
00:28:49,880 --> 00:28:53,030
significance you might want more also it

673
00:28:53,030 --> 00:28:54,710
doesn't have a lot of headroom the

674
00:28:54,710 --> 00:28:56,690
biggest number it can represent is just

675
00:28:56,690 --> 00:28:58,820
over a trillion which for most web

676
00:28:58,820 --> 00:29:00,920
applications is probably ok but if

677
00:29:00,920 --> 00:29:03,440
you're doing applications which say are

678
00:29:03,440 --> 00:29:07,270
about the United States federal budget

679
00:29:07,270 --> 00:29:10,970
they're not going to fit now most

680
00:29:10,970 --> 00:29:13,130
financial applications at that level are

681
00:29:13,130 --> 00:29:15,800
dealing in tens of thousands of dollars

682
00:29:15,800 --> 00:29:17,660
or even millions of dollars so when

683
00:29:17,660 --> 00:29:19,790
scaled that way they will fit but you

684
00:29:19,790 --> 00:29:22,150
know in whole dollars they won't so

685
00:29:22,150 --> 00:29:24,500
there are other things we can consider

686
00:29:24,500 --> 00:29:26,270
so here's another format i came up with

687
00:29:26,270 --> 00:29:29,540
they're called x64 again it's a 64-bit

688
00:29:29,540 --> 00:29:34,960
number the mantissa is a 56 bit integer

689
00:29:34,960 --> 00:29:39,290
and the low-order bite is a signed byte

690
00:29:39,290 --> 00:29:42,140
which is the exponent the nice thing

691
00:29:42,140 --> 00:29:44,210
about this is it's really easy to unpack

692
00:29:44,210 --> 00:29:47,150
on we get the mantissa simply by doing a

693
00:29:47,150 --> 00:29:51,170
left debt with sign extension and the

694
00:29:51,170 --> 00:29:52,910
exponent we don't even have to unpack on

695
00:29:52,910 --> 00:29:56,660
decimal on Intel architectures we can

696
00:29:56,660 --> 00:29:58,040
get out that bite directly we don't even

697
00:29:58,040 --> 00:30:01,700
have to move it out so it's really

698
00:30:01,700 --> 00:30:07,070
really fast it's much faster I expect

699
00:30:07,070 --> 00:30:08,630
hundreds of times faster than the I

700
00:30:08,630 --> 00:30:11,180
Triple E proposal and it's really easy

701
00:30:11,180 --> 00:30:13,460
to implement in software and if we can

702
00:30:13,460 --> 00:30:15,500
ever convince Intel to put into hardware

703
00:30:15,500 --> 00:30:16,310
it'll go

704
00:30:16,310 --> 00:30:19,660
really fast it has disadvantages it's

705
00:30:19,660 --> 00:30:22,490
going to be a little bit slower than 96

706
00:30:22,490 --> 00:30:25,250
because on scaling of the numbers is

707
00:30:25,250 --> 00:30:28,330
more difficult because you have to do

708
00:30:28,330 --> 00:30:30,650
repeated multiplication and division by

709
00:30:30,650 --> 00:30:33,920
10 which cpos know how to do but it's

710
00:30:33,920 --> 00:30:36,830
not as fast as shifting bits and the

711
00:30:36,830 --> 00:30:40,970
range is only ten or one with a hundred

712
00:30:40,970 --> 00:30:45,560
forty three zeros behind it which I

713
00:30:45,560 --> 00:30:47,210
think for most of our applications ought

714
00:30:47,210 --> 00:30:50,840
to be enough the current number format

715
00:30:50,840 --> 00:30:53,270
in in JavaScript life let's see go up to

716
00:30:53,270 --> 00:30:56,990
three hundred and eight zeros but I

717
00:30:56,990 --> 00:31:01,250
think 100 is so it ought to be fine okay

718
00:31:01,250 --> 00:31:03,560
so that the argument we're having with

719
00:31:03,560 --> 00:31:07,400
IBM now is over goals tc39 s goal is to

720
00:31:07,400 --> 00:31:10,070
repair the language not to add I

721
00:31:10,070 --> 00:31:13,630
tripley's 754 our IBM's goal is to add

722
00:31:13,630 --> 00:31:17,390
754 are not to repair the language IBM

723
00:31:17,390 --> 00:31:19,520
doesn't care about what damage we might

724
00:31:19,520 --> 00:31:21,710
be doing they want us to solve their

725
00:31:21,710 --> 00:31:26,150
chicken and egg problem so IBM has

726
00:31:26,150 --> 00:31:27,740
stated that they will vote against any

727
00:31:27,740 --> 00:31:29,510
language standard that does not include

728
00:31:29,510 --> 00:31:35,060
754 are including ECMO script so this is

729
00:31:35,060 --> 00:31:37,730
my appeal to IBM it is irresponsible to

730
00:31:37,730 --> 00:31:39,440
inflict damage on a language and its

731
00:31:39,440 --> 00:31:41,240
community to solve an unrelated chicken

732
00:31:41,240 --> 00:31:43,850
and egg problem if you're nave oat fails

733
00:31:43,850 --> 00:31:45,530
you will have done nothing except to

734
00:31:45,530 --> 00:31:47,000
show contempt for the web development

735
00:31:47,000 --> 00:31:49,970
community if you're nave oat succeeds

736
00:31:49,970 --> 00:31:52,160
you will cause a significant damage to

737
00:31:52,160 --> 00:31:54,550
the web and the open standards movement

738
00:31:54,550 --> 00:31:58,700
if any of you are employees of IBM or

739
00:31:58,700 --> 00:32:00,500
friends of the company please go back to

740
00:32:00,500 --> 00:32:02,810
the company in beg them please vote aye

741
00:32:02,810 --> 00:32:04,580
on the vote of the General Assembly next

742
00:32:04,580 --> 00:32:18,560
month um so assuming that arm that it

743
00:32:18,560 --> 00:32:21,130
prevails we will have a fifth edition on

744
00:32:21,130 --> 00:32:23,810
first new edition in 10 years and it

745
00:32:23,810 --> 00:32:27,620
defines two languages and that's just

746
00:32:27,620 --> 00:32:29,060
because of the way that we have to write

747
00:32:29,060 --> 00:32:31,070
the specs there's the default language

748
00:32:31,070 --> 00:32:33,110
which is a language which will be built

749
00:32:33,110 --> 00:32:34,550
into the browser and which you'll get if

750
00:32:34,550 --> 00:32:36,590
you do nothing and there will be the

751
00:32:36,590 --> 00:32:40,010
strict language I recommend that you use

752
00:32:40,010 --> 00:32:42,260
the strict language for reliability

753
00:32:42,260 --> 00:32:45,350
because it it says that you're opting

754
00:32:45,350 --> 00:32:47,390
into wanting a better language and some

755
00:32:47,390 --> 00:32:48,650
of the worst features of the language

756
00:32:48,650 --> 00:32:52,370
you want removed or modified so for

757
00:32:52,370 --> 00:32:54,260
example we take without we change the

758
00:32:54,260 --> 00:32:56,270
way this gets bound we change the way

759
00:32:56,270 --> 00:32:58,280
eval gets processed a lot of things

760
00:32:58,280 --> 00:33:00,080
which either cause a language to be

761
00:33:00,080 --> 00:33:03,080
slower or or less portable or more buggy

762
00:33:03,080 --> 00:33:06,320
we're taking those things out it's very

763
00:33:06,320 --> 00:33:08,900
difficult to change a standard which is

764
00:33:08,900 --> 00:33:11,630
as popular as ECMO script because every

765
00:33:11,630 --> 00:33:13,870
bad feature in it has been exploited on

766
00:33:13,870 --> 00:33:16,340
the problem with the bad features isn't

767
00:33:16,340 --> 00:33:18,050
that they're useless it's that they're

768
00:33:18,050 --> 00:33:20,000
occasionally useful but dangerous and

769
00:33:20,000 --> 00:33:22,100
they're want to be ninjas out there who

770
00:33:22,100 --> 00:33:23,870
found exploits for everything out there

771
00:33:23,870 --> 00:33:25,100
and we don't want to break their

772
00:33:25,100 --> 00:33:27,290
programs now you might argue they

773
00:33:27,290 --> 00:33:28,970
deserve to have their programs broken

774
00:33:28,970 --> 00:33:30,890
and I actually have some sympathy for

775
00:33:30,890 --> 00:33:33,170
that perspective but we have pledged not

776
00:33:33,170 --> 00:33:35,900
to do that so we require people to

777
00:33:35,900 --> 00:33:38,630
opt-in to the strict mode if they want

778
00:33:38,630 --> 00:33:42,200
these repairs so I'll not use the

779
00:33:42,200 --> 00:33:44,210
default language difficulty to the 3rd

780
00:33:44,210 --> 00:33:47,660
edition that and then don't write in the

781
00:33:47,660 --> 00:33:50,030
default language because hopefully it'll

782
00:33:50,030 --> 00:33:53,960
be abandoned in a few years so we have a

783
00:33:53,960 --> 00:33:56,570
new title for for the what we do it

784
00:33:56,570 --> 00:33:58,430
though the committee now we call it

785
00:33:58,430 --> 00:34:00,680
harmony the code name of the next

786
00:34:00,680 --> 00:34:03,740
proposal is harmony not es6 because we

787
00:34:03,740 --> 00:34:06,500
don't want to give a false impression or

788
00:34:06,500 --> 00:34:08,770
false promise about something

789
00:34:08,770 --> 00:34:12,700
and its likelihood of being or its sense

790
00:34:12,700 --> 00:34:15,220
of inevitability that would be an evil

791
00:34:15,220 --> 00:34:17,429
thing that'd be like having out an html5

792
00:34:17,429 --> 00:34:22,620
project we don't want to do that again

793
00:34:22,620 --> 00:34:25,630
so harmony will be built on top of the

794
00:34:25,630 --> 00:34:28,120
strict language and so that will be the

795
00:34:28,120 --> 00:34:30,970
core of the language going forward and

796
00:34:30,970 --> 00:34:32,950
harmony will probably have incompatible

797
00:34:32,950 --> 00:34:35,890
syntax so programs written in the

798
00:34:35,890 --> 00:34:38,440
Harmony language will fail hard with

799
00:34:38,440 --> 00:34:40,750
syntax errors they're from on pre

800
00:34:40,750 --> 00:34:44,080
harmony browsers hopefully the IE six

801
00:34:44,080 --> 00:34:46,030
problem will be solved by the time we

802
00:34:46,030 --> 00:34:49,120
get this Beck done if it's not this is

803
00:34:49,120 --> 00:34:51,899
going to be a real short trip because

804
00:34:51,899 --> 00:34:55,600
the language will not be usable so

805
00:34:55,600 --> 00:34:57,280
there's a lot of design pressure on it

806
00:34:57,280 --> 00:34:59,680
as always there's a lot of pressure to

807
00:34:59,680 --> 00:35:02,440
suck less for some meaning meaning of

808
00:35:02,440 --> 00:35:09,130
suck and some meaning of less again this

809
00:35:09,130 --> 00:35:12,670
is really difficult what some people

810
00:35:12,670 --> 00:35:14,800
mean by that is they want the Dom to be

811
00:35:14,800 --> 00:35:16,930
better which I absolutely agree with but

812
00:35:16,930 --> 00:35:18,310
that's not our business unfortunately

813
00:35:18,310 --> 00:35:22,240
that belongs to w3c I think today or

814
00:35:22,240 --> 00:35:28,090
yesterday tc39 had its first joint

815
00:35:28,090 --> 00:35:29,860
meeting in history with that mine are

816
00:35:29,860 --> 00:35:33,010
with what w3c this is long long overdue

817
00:35:33,010 --> 00:35:35,560
we need to get these organizations

818
00:35:35,560 --> 00:35:37,420
cooperating and working together on this

819
00:35:37,420 --> 00:35:40,240
stuff because our fixing the language in

820
00:35:40,240 --> 00:35:42,310
a way which doesn't anticipate what the

821
00:35:42,310 --> 00:35:44,350
further damage that are going to do to

822
00:35:44,350 --> 00:35:47,170
the DOM and it just doesn't fit so we

823
00:35:47,170 --> 00:35:50,200
have to reconcile those things there's a

824
00:35:50,200 --> 00:35:52,570
lot of demand that ECMO script to be

825
00:35:52,570 --> 00:35:54,220
more like other languages that would be

826
00:35:54,220 --> 00:35:56,320
more like Java or more like Ruby or more

827
00:35:56,320 --> 00:35:57,680
like pearl or

828
00:35:57,680 --> 00:36:00,230
or you know pick a language that's not

829
00:36:00,230 --> 00:36:01,910
going to happen if you want to be

830
00:36:01,910 --> 00:36:03,410
writing in any of those languages I

831
00:36:03,410 --> 00:36:05,060
strongly recommend you be writing in one

832
00:36:05,060 --> 00:36:07,340
of those languages I don't think it

833
00:36:07,340 --> 00:36:08,870
really accomplishes anything to try to

834
00:36:08,870 --> 00:36:12,110
impose those languages on this one it'll

835
00:36:12,110 --> 00:36:16,240
just make it complicated and buggy r

836
00:36:16,240 --> 00:36:18,980
surprisingly there is a pressure on

837
00:36:18,980 --> 00:36:22,180
making it a better compilation target

838
00:36:22,180 --> 00:36:24,770
years ago we thought that Java VM was

839
00:36:24,770 --> 00:36:26,450
going to become the vm of the internet

840
00:36:26,450 --> 00:36:28,310
but it turns out javascript is the vm of

841
00:36:28,310 --> 00:36:32,030
the internet because the a lot of things

842
00:36:32,030 --> 00:36:34,400
wrong with the JVM that aren't as wrong

843
00:36:34,400 --> 00:36:37,160
in javascript and so we've got google

844
00:36:37,160 --> 00:36:39,710
with with with GWT and lots of other

845
00:36:39,710 --> 00:36:41,210
people who are taking other languages

846
00:36:41,210 --> 00:36:43,910
and compiling in into javascript for

847
00:36:43,910 --> 00:36:46,250
execution in the browser and they've

848
00:36:46,250 --> 00:36:47,750
been asking for things to make that

849
00:36:47,750 --> 00:36:50,150
easier to do for example you might have

850
00:36:50,150 --> 00:36:52,700
a language which has control structures

851
00:36:52,700 --> 00:36:54,770
that are that work differently than Java

852
00:36:54,770 --> 00:36:56,870
scripts control structures and so to

853
00:36:56,870 --> 00:36:58,340
make it easier to generate code you like

854
00:36:58,340 --> 00:37:00,620
to have a go-to statement so hey can you

855
00:37:00,620 --> 00:37:04,070
put a go-to statement in JavaScript yeah

856
00:37:04,070 --> 00:37:06,880
so I hear some groans from the audience

857
00:37:06,880 --> 00:37:09,890
so the youngsters won't remember but on

858
00:37:09,890 --> 00:37:12,140
the computer industry spent 20 years

859
00:37:12,140 --> 00:37:14,750
literally arguing about whether or not

860
00:37:14,750 --> 00:37:16,460
the go-to statement was a good thing or

861
00:37:16,460 --> 00:37:18,860
a bad thing and eventually we figured

862
00:37:18,860 --> 00:37:20,180
out it was a bad thing and that we

863
00:37:20,180 --> 00:37:21,890
should stop putting in our languages and

864
00:37:21,890 --> 00:37:26,210
we did that so to put it back in I think

865
00:37:26,210 --> 00:37:27,890
would be a tragic mistake because the

866
00:37:27,890 --> 00:37:30,440
ninjas would get ahold of it and they go

867
00:37:30,440 --> 00:37:32,240
oh look I can make it go so much faster

868
00:37:32,240 --> 00:37:35,870
by doing a go to here and we don't want

869
00:37:35,870 --> 00:37:37,460
to be responsible for that kind of crowd

870
00:37:37,460 --> 00:37:41,770
so we're sympathetic with the idea of

871
00:37:41,770 --> 00:37:44,330
being a better compilation target but

872
00:37:44,330 --> 00:37:46,250
our first priority has to be to the

873
00:37:46,250 --> 00:37:49,250
users of the language as the language so

874
00:37:49,250 --> 00:37:50,870
we don't want to screw it up for us in

875
00:37:50,870 --> 00:37:54,350
order to make it better for them a goal

876
00:37:54,350 --> 00:37:56,210
that I have a lot of sympathy sympathy

877
00:37:56,210 --> 00:37:58,370
with is the goal to make it secure as I

878
00:37:58,370 --> 00:38:00,190
still think that's our biggest problem

879
00:38:00,190 --> 00:38:02,900
javascript it gets a lot of flack for it

880
00:38:02,900 --> 00:38:04,880
security problems it actually comes

881
00:38:04,880 --> 00:38:06,860
closer to being a secure language than

882
00:38:06,860 --> 00:38:08,100
virtually any other language

883
00:38:08,100 --> 00:38:11,370
current use there's just a small amount

884
00:38:11,370 --> 00:38:14,010
of stuff that we have to fix the caja

885
00:38:14,010 --> 00:38:16,650
experiment at Google proves that this is

886
00:38:16,650 --> 00:38:18,780
true my own work with add safe suggests

887
00:38:18,780 --> 00:38:22,350
the same thing Facebook's f bjs allows

888
00:38:22,350 --> 00:38:24,270
third-party code to run our Facebook

889
00:38:24,270 --> 00:38:27,240
pages not i framed or anything so we

890
00:38:27,240 --> 00:38:29,790
know that a small amount of effort can

891
00:38:29,790 --> 00:38:32,280
turn this into a secure language and I'm

892
00:38:32,280 --> 00:38:35,130
hopeful that we can factor that into the

893
00:38:35,130 --> 00:38:36,750
next editions of the language and

894
00:38:36,750 --> 00:38:38,520
there's also the goal to be better at

895
00:38:38,520 --> 00:38:41,970
math that we really do what to fix the

896
00:38:41,970 --> 00:38:44,010
decimal problem there are some people

897
00:38:44,010 --> 00:38:46,050
who want us to have support for general

898
00:38:46,050 --> 00:38:47,580
math so that you could have complex

899
00:38:47,580 --> 00:38:49,920
numbers anybody want complex numbers

900
00:38:49,920 --> 00:38:55,510
anybody anybody know what they are

901
00:38:55,510 --> 00:38:58,900
yeah a few yeah most of those who know

902
00:38:58,900 --> 00:39:00,850
what they are don't want those I

903
00:39:00,850 --> 00:39:04,900
understand that but again language

904
00:39:04,900 --> 00:39:06,820
designers they could be really neat if

905
00:39:06,820 --> 00:39:08,560
you could design it so that you could

906
00:39:08,560 --> 00:39:10,450
add complex numbers to the language and

907
00:39:10,450 --> 00:39:12,670
then have them work and maybe it would

908
00:39:12,670 --> 00:39:14,200
but I don't see a lot of value in it

909
00:39:14,200 --> 00:39:17,260
there's also a lot of demand for begins

910
00:39:17,260 --> 00:39:20,430
so you can have been sabar baterry

911
00:39:20,430 --> 00:39:24,060
precision that go on forever the primary

912
00:39:24,060 --> 00:39:26,950
use case for those is doing cryptography

913
00:39:26,950 --> 00:39:29,890
you can do public key stuff and about

914
00:39:29,890 --> 00:39:32,290
with using begins which i think is

915
00:39:32,290 --> 00:39:33,850
exactly the reason for why we shouldn't

916
00:39:33,850 --> 00:39:36,400
do it um if we make it easy to write

917
00:39:36,400 --> 00:39:38,230
crypto routines in JavaScript than

918
00:39:38,230 --> 00:39:40,150
people will and one thing we know about

919
00:39:40,150 --> 00:39:42,640
crypto routines is you should never be

920
00:39:42,640 --> 00:39:44,470
writing your own crypto routines because

921
00:39:44,470 --> 00:39:48,190
they're really hard to get right you

922
00:39:48,190 --> 00:39:49,600
want to be using stuff that other people

923
00:39:49,600 --> 00:39:51,310
have written that have been very well

924
00:39:51,310 --> 00:39:53,770
vetted so this is another attractive

925
00:39:53,770 --> 00:39:55,330
nuisance that we can add to the language

926
00:39:55,330 --> 00:39:58,720
that I think would be a mistake one

927
00:39:58,720 --> 00:40:00,730
thing we probably will do is correct the

928
00:40:00,730 --> 00:40:05,650
block scoped problem travel some

929
00:40:05,650 --> 00:40:07,800
enthusiastic applause over there on

930
00:40:07,800 --> 00:40:09,970
JavaScript does not have block scope

931
00:40:09,970 --> 00:40:11,590
which would not be a problem except that

932
00:40:11,590 --> 00:40:14,230
its syntax says that it does and so that

933
00:40:14,230 --> 00:40:16,380
is a big source of confusion for

934
00:40:16,380 --> 00:40:19,020
programmers coming from other languages

935
00:40:19,020 --> 00:40:21,250
for example it causes them to put their

936
00:40:21,250 --> 00:40:23,170
VAR statements in the wrong place and

937
00:40:23,170 --> 00:40:27,610
and so will probably fix that by adding

938
00:40:27,610 --> 00:40:30,010
a let statement and a constant statement

939
00:40:30,010 --> 00:40:34,390
which will replace the bar which will be

940
00:40:34,390 --> 00:40:38,290
blocked scoped so there you go we'll

941
00:40:38,290 --> 00:40:39,940
probably have better support for

942
00:40:39,940 --> 00:40:41,950
functions with variable numbers of

943
00:40:41,950 --> 00:40:45,070
arguments the arguments of ray thing is

944
00:40:45,070 --> 00:40:47,920
awful there's some new syntax that we

945
00:40:47,920 --> 00:40:49,630
could add which would make it much

946
00:40:49,630 --> 00:40:53,860
better we'll probably do that there's a

947
00:40:53,860 --> 00:40:55,540
lot of interest in adding some sort of

948
00:40:55,540 --> 00:40:58,120
syntactic language syntactic sugar to

949
00:40:58,120 --> 00:41:01,440
the language in order to

950
00:41:01,440 --> 00:41:05,970
add class like notation to things but

951
00:41:05,970 --> 00:41:08,010
have it mapped on to the current

952
00:41:08,010 --> 00:41:10,440
language it might be possible to do that

953
00:41:10,440 --> 00:41:12,599
with macros so you could define your own

954
00:41:12,599 --> 00:41:15,030
language at any level and that would be

955
00:41:15,030 --> 00:41:16,770
easy and then we get out of the way of

956
00:41:16,770 --> 00:41:20,550
that but the committee is wary of macros

957
00:41:20,550 --> 00:41:22,470
so we're probably not going to do that

958
00:41:22,470 --> 00:41:24,170
we'll try to figure out some other way

959
00:41:24,170 --> 00:41:28,460
one other way might be to use functions

960
00:41:28,460 --> 00:41:32,550
to wrap things so we use the classes as

961
00:41:32,550 --> 00:41:34,619
closures pattern but there is one

962
00:41:34,619 --> 00:41:37,589
problem with that which comes out of our

963
00:41:37,589 --> 00:41:40,170
d tenants book the principles of

964
00:41:40,170 --> 00:41:41,730
Correspondence that was published in

965
00:41:41,730 --> 00:41:43,710
nineteen eighty one which doesn't get a

966
00:41:43,710 --> 00:41:45,329
lot of attention today but there was one

967
00:41:45,329 --> 00:41:46,980
particular principle that he outlined

968
00:41:46,980 --> 00:41:50,400
which is very attractive and that is the

969
00:41:50,400 --> 00:41:52,230
principle of correspondence which shows

970
00:41:52,230 --> 00:41:54,240
the correspondence between variables and

971
00:41:54,240 --> 00:41:56,520
parameters so here we've got two

972
00:41:56,520 --> 00:41:59,940
functions booga and looga which do

973
00:41:59,940 --> 00:42:02,810
exactly the same thing except booga

974
00:42:02,810 --> 00:42:06,060
represents x and y as variables and woo

975
00:42:06,060 --> 00:42:09,210
God represents them as parameters but in

976
00:42:09,210 --> 00:42:10,680
all other respects they're exactly the

977
00:42:10,680 --> 00:42:14,069
same so that's sort of an interesting

978
00:42:14,069 --> 00:42:16,349
thing you know to a minimalist it might

979
00:42:16,349 --> 00:42:18,540
say well we don't need variables in the

980
00:42:18,540 --> 00:42:20,250
language we just need to keep nesting

981
00:42:20,250 --> 00:42:22,410
our functions which may or may not be

982
00:42:22,410 --> 00:42:26,540
the right thing to do but one of the

983
00:42:26,540 --> 00:42:28,800
attractive ideas that comes out of this

984
00:42:28,800 --> 00:42:32,010
is that maybe we could take anything and

985
00:42:32,010 --> 00:42:34,589
wrap it in an immediate function because

986
00:42:34,589 --> 00:42:35,849
there's some benefits that come from

987
00:42:35,849 --> 00:42:38,880
that except we don't have full

988
00:42:38,880 --> 00:42:40,319
correspondents because they're

989
00:42:40,319 --> 00:42:42,750
disruptive statements like break return

990
00:42:42,750 --> 00:42:45,119
continue and throw and implied

991
00:42:45,119 --> 00:42:48,089
parameters this in arguments whose

992
00:42:48,089 --> 00:42:50,250
behavior change if you put them inside

993
00:42:50,250 --> 00:42:52,440
another function and that change of

994
00:42:52,440 --> 00:42:53,880
behavior would cause

995
00:42:53,880 --> 00:42:56,460
an error so there's been argument that

996
00:42:56,460 --> 00:42:57,750
we should remove all of those things

997
00:42:57,750 --> 00:42:59,940
from the language which I don't think we

998
00:42:59,940 --> 00:43:03,900
can do tenant himself does not demand

999
00:43:03,900 --> 00:43:05,820
that the language have full

1000
00:43:05,820 --> 00:43:08,370
correspondence he just uses it as an

1001
00:43:08,370 --> 00:43:09,810
analytical tool in talking about

1002
00:43:09,810 --> 00:43:12,840
languages another proposal has been that

1003
00:43:12,840 --> 00:43:14,790
we add a second kind of function in

1004
00:43:14,790 --> 00:43:17,790
which the meaning of those things don't

1005
00:43:17,790 --> 00:43:22,260
change but I think that's adding way too

1006
00:43:22,260 --> 00:43:25,350
much complexity language I think that's

1007
00:43:25,350 --> 00:43:28,110
asking for trouble now tenant does say a

1008
00:43:28,110 --> 00:43:29,400
couple of specific things about

1009
00:43:29,400 --> 00:43:31,230
programming language design which I

1010
00:43:31,230 --> 00:43:33,840
think are really useful many existing

1011
00:43:33,840 --> 00:43:35,970
languages manage to combine countless

1012
00:43:35,970 --> 00:43:37,680
features into a jumble that is neither

1013
00:43:37,680 --> 00:43:39,930
easy to implement more pleasure to use

1014
00:43:39,930 --> 00:43:44,250
he said that an 81 we've kept that up

1015
00:43:44,250 --> 00:43:48,060
pretty well he also said side effects

1016
00:43:48,060 --> 00:43:49,830
are often confusing to program readers

1017
00:43:49,830 --> 00:43:52,100
because they are unexpected the familiar

1018
00:43:52,100 --> 00:43:54,330
expressions of conventional arithmetic

1019
00:43:54,330 --> 00:43:57,240
and algebra do not have side effects so

1020
00:43:57,240 --> 00:43:58,860
tenant might be saying that we should

1021
00:43:58,860 --> 00:44:00,780
not have put getters and setters into

1022
00:44:00,780 --> 00:44:05,640
es5 but we did so we don't always get it

1023
00:44:05,640 --> 00:44:09,270
right so ten years that anybody think

1024
00:44:09,270 --> 00:44:11,060
that was too long am I the only one

1025
00:44:11,060 --> 00:44:14,460
maybe I think actually five years was

1026
00:44:14,460 --> 00:44:17,640
about right the reason Ajax happened in

1027
00:44:17,640 --> 00:44:21,360
2005 and not in two thousand was it took

1028
00:44:21,360 --> 00:44:23,010
that long to flush the really bad

1029
00:44:23,010 --> 00:44:25,020
browsers out of the market did to get

1030
00:44:25,020 --> 00:44:28,110
Netscape for out and to reduce IE for

1031
00:44:28,110 --> 00:44:30,870
and I III to accept ibly small numbers

1032
00:44:30,870 --> 00:44:33,600
it was only when ie6 had absolute

1033
00:44:33,600 --> 00:44:37,740
dominance that Ajax became viable so a

1034
00:44:37,740 --> 00:44:39,990
lot of people in our community are angry

1035
00:44:39,990 --> 00:44:42,360
at Microsoft for having neglected the

1036
00:44:42,360 --> 00:44:45,780
browser for so long my view is it is the

1037
00:44:45,780 --> 00:44:48,240
best thing they have ever done doing

1038
00:44:48,240 --> 00:44:50,670
nothing for five years is the best thing

1039
00:44:50,670 --> 00:44:54,990
Microsoft has ever done maybe 10 years

1040
00:44:54,990 --> 00:44:57,150
was a little too long but I think five

1041
00:44:57,150 --> 00:44:59,069
years was about right

1042
00:44:59,069 --> 00:45:02,339
so let me wrap up with some lessons that

1043
00:45:02,339 --> 00:45:06,150
I derived from this standard experience

1044
00:45:06,150 --> 00:45:08,249
and and maybe these will make sense to

1045
00:45:08,249 --> 00:45:10,529
you we need a clear separation between

1046
00:45:10,529 --> 00:45:13,259
research and standard setting I'm a big

1047
00:45:13,259 --> 00:45:15,479
fan of research on a big fan of standard

1048
00:45:15,479 --> 00:45:17,039
setting I even believe that the same

1049
00:45:17,039 --> 00:45:19,079
people can do both but nobody should be

1050
00:45:19,079 --> 00:45:21,809
doing both at the same time on a

1051
00:45:21,809 --> 00:45:23,699
standard is the last place in the world

1052
00:45:23,699 --> 00:45:26,160
we want to see innovation we shouldn't

1053
00:45:26,160 --> 00:45:28,109
have any risks or uncertainty or doubt

1054
00:45:28,109 --> 00:45:30,630
we should be absolutely clear on what

1055
00:45:30,630 --> 00:45:32,309
we're doing because once you set a

1056
00:45:32,309 --> 00:45:34,410
standard in place you really shouldn't

1057
00:45:34,410 --> 00:45:38,309
be changing it um-hmm don't promise what

1058
00:45:38,309 --> 00:45:41,279
you can't deliver at this the fifth

1059
00:45:41,279 --> 00:45:43,319
edition is just a candidate and it may

1060
00:45:43,319 --> 00:45:45,660
fail next month so I'm not here

1061
00:45:45,660 --> 00:45:46,890
promising that that's what you're going

1062
00:45:46,890 --> 00:45:48,719
to get I think it's likely that it will

1063
00:45:48,719 --> 00:45:52,229
succeed but it could fail maybe IBM will

1064
00:45:52,229 --> 00:45:55,739
be successful in putting us down or

1065
00:45:55,739 --> 00:45:57,989
maybe between now and then some very

1066
00:45:57,989 --> 00:45:59,549
smart review or we'll find some

1067
00:45:59,549 --> 00:46:02,329
tragically horrible bug in the spec and

1068
00:46:02,329 --> 00:46:04,529
we'll have to withdraw it at the last

1069
00:46:04,529 --> 00:46:06,930
minute if in fact there is such a bug in

1070
00:46:06,930 --> 00:46:08,969
respect I hope in fact he finds it

1071
00:46:08,969 --> 00:46:10,619
before it goes to the General Assembly

1072
00:46:10,619 --> 00:46:12,509
so we can withdraw it because once

1073
00:46:12,509 --> 00:46:14,459
something gets approved as a standard

1074
00:46:14,459 --> 00:46:17,670
it's really hard to take it out I'm

1075
00:46:17,670 --> 00:46:19,109
pretty confident that we don't have that

1076
00:46:19,109 --> 00:46:20,940
bug in there but that's a possibility

1077
00:46:20,940 --> 00:46:26,069
and so we need to admit that a change to

1078
00:46:26,069 --> 00:46:28,140
a widely used standard is an act of

1079
00:46:28,140 --> 00:46:31,380
violence so any changes that we make

1080
00:46:31,380 --> 00:46:33,449
have got to be worth it changing a

1081
00:46:33,449 --> 00:46:36,089
standard should involve the same trade

1082
00:46:36,089 --> 00:46:39,900
offs as surgery you know we want to cut

1083
00:46:39,900 --> 00:46:41,999
somebody open you know that generally

1084
00:46:41,999 --> 00:46:44,160
isn't a good idea but you might do that

1085
00:46:44,160 --> 00:46:46,259
if there's some compensating benefit or

1086
00:46:46,259 --> 00:46:47,819
if the risks of not doing that or

1087
00:46:47,819 --> 00:46:49,799
greater than doing that those are the

1088
00:46:49,799 --> 00:46:51,869
sorts of difficult choices we need to

1089
00:46:51,869 --> 00:46:53,729
look at when we proposed changing the

1090
00:46:53,729 --> 00:46:54,080
stand

1091
00:46:54,080 --> 00:46:56,510
and anything which is a trivial or

1092
00:46:56,510 --> 00:46:58,610
cosmetic fix probably we shouldn't be

1093
00:46:58,610 --> 00:47:02,320
messing with if you have a great idea

1094
00:47:02,320 --> 00:47:07,550
don't tell a standards body instead

1095
00:47:07,550 --> 00:47:10,370
implement it show to the world and if

1096
00:47:10,370 --> 00:47:11,960
the world says yeah that's right then

1097
00:47:11,960 --> 00:47:13,700
obviously that should go into a standard

1098
00:47:13,700 --> 00:47:15,860
I see a lot of people trying to do that

1099
00:47:15,860 --> 00:47:19,130
in the opposite order and shouldn't do

1100
00:47:19,130 --> 00:47:21,650
it we don't want to be taking those

1101
00:47:21,650 --> 00:47:23,420
sorts of risks in the standards we need

1102
00:47:23,420 --> 00:47:27,530
proof first standards are hard they're

1103
00:47:27,530 --> 00:47:29,240
really hard work they require tremendous

1104
00:47:29,240 --> 00:47:33,110
care and precision and fortunately we

1105
00:47:33,110 --> 00:47:35,420
have amazing people working with us who

1106
00:47:35,420 --> 00:47:37,220
are able to read the specifications of

1107
00:47:37,220 --> 00:47:39,110
how machines work and run those machines

1108
00:47:39,110 --> 00:47:41,090
and their heads and figure out where we

1109
00:47:41,090 --> 00:47:42,860
got it wrong and we are blessed to have

1110
00:47:42,860 --> 00:47:46,220
people like not working with us we are

1111
00:47:46,220 --> 00:47:48,050
blessed to have people like Elmer's

1112
00:47:48,050 --> 00:47:50,000
block of Microsoft who's our editor

1113
00:47:50,000 --> 00:47:51,680
whose diary Norma's amount of work and

1114
00:47:51,680 --> 00:47:54,560
cleaning up the specification it's a

1115
00:47:54,560 --> 00:47:56,720
significantly higher quality document

1116
00:47:56,720 --> 00:47:58,940
from the third edition was we're hoping

1117
00:47:58,940 --> 00:48:00,650
that the next edition will be even

1118
00:48:00,650 --> 00:48:05,900
better you can't please everybody this

1119
00:48:05,900 --> 00:48:07,760
gets back to that the hard thing they're

1120
00:48:07,760 --> 00:48:09,440
going to be expansionists who have

1121
00:48:09,440 --> 00:48:11,270
really good reasons for why they want to

1122
00:48:11,270 --> 00:48:14,360
grow the language and the reasons are

1123
00:48:14,360 --> 00:48:17,180
good but at the same time they're going

1124
00:48:17,180 --> 00:48:19,430
to be minimalists like me who say no we

1125
00:48:19,430 --> 00:48:21,440
should not be changing at all unless we

1126
00:48:21,440 --> 00:48:23,750
have profound compelling need to do so

1127
00:48:23,750 --> 00:48:26,180
and somehow we have to find consensus

1128
00:48:26,180 --> 00:48:30,110
and that's hard but that's sort of the

1129
00:48:30,110 --> 00:48:31,640
core about what the whole standards

1130
00:48:31,640 --> 00:48:33,920
process is about I see a lot of

1131
00:48:33,920 --> 00:48:35,810
standards bodies that don't do that

1132
00:48:35,810 --> 00:48:38,600
adequately instead they do a pork barrel

1133
00:48:38,600 --> 00:48:40,820
thing where if you support my stupid

1134
00:48:40,820 --> 00:48:42,260
feature if you agree not to argue about

1135
00:48:42,260 --> 00:48:44,680
it I'll support your stupid feature and

1136
00:48:44,680 --> 00:48:47,060
we'll both get our stupid features in

1137
00:48:47,060 --> 00:48:48,620
and we can both feel proud that we got

1138
00:48:48,620 --> 00:48:51,560
something done I'm very happy to say

1139
00:48:51,560 --> 00:48:54,020
that tc39 currently is not acting in

1140
00:48:54,020 --> 00:48:54,760
that mode

1141
00:48:54,760 --> 00:49:00,320
but I see other bodies that do check

1142
00:49:00,320 --> 00:49:04,850
your expectations of the process can

1143
00:49:04,850 --> 00:49:06,140
produce heartbreak and disappointment

1144
00:49:06,140 --> 00:49:09,410
I've talked to people at IBM and at

1145
00:49:09,410 --> 00:49:11,150
Adobe who both described their

1146
00:49:11,150 --> 00:49:15,320
experience with tc39 as betrayal I've

1147
00:49:15,320 --> 00:49:17,180
heard people say they were betrayed

1148
00:49:17,180 --> 00:49:20,060
there was betrayal there was no betrayal

1149
00:49:20,060 --> 00:49:22,760
um they came in with incorrect

1150
00:49:22,760 --> 00:49:25,130
expectations they thought that they

1151
00:49:25,130 --> 00:49:27,740
could get a specific outcome and you

1152
00:49:27,740 --> 00:49:29,600
can't you can't have that expectation

1153
00:49:29,600 --> 00:49:32,180
the best you can hope for is that you

1154
00:49:32,180 --> 00:49:34,190
can get a consensus on what you ought to

1155
00:49:34,190 --> 00:49:37,550
do and that's not necessarily going to

1156
00:49:37,550 --> 00:49:38,780
be the thing that you wanted everybody

1157
00:49:38,780 --> 00:49:40,820
else to do are there going to be some

1158
00:49:40,820 --> 00:49:43,400
trade-offs arm and there's going to be

1159
00:49:43,400 --> 00:49:45,560
disappointment and you need to

1160
00:49:45,560 --> 00:49:47,320
understand that going into the process

1161
00:49:47,320 --> 00:49:49,970
are you also need to check your motives

1162
00:49:49,970 --> 00:49:51,980
I see sometimes people wanting to get

1163
00:49:51,980 --> 00:49:54,470
into the standards process in order to

1164
00:49:54,470 --> 00:49:57,440
show off you know if I can come up with

1165
00:49:57,440 --> 00:49:59,090
this really complicated feature and get

1166
00:49:59,090 --> 00:50:00,920
it into the spec that I'll be famous I'm

1167
00:50:00,920 --> 00:50:02,270
the guy who put that feature and that's

1168
00:50:02,270 --> 00:50:06,350
my feature we really don't that's not

1169
00:50:06,350 --> 00:50:07,820
how we should be doing things I've also

1170
00:50:07,820 --> 00:50:09,920
seen people who get into power trips

1171
00:50:09,920 --> 00:50:13,760
like if my future gets adopted Microsoft

1172
00:50:13,760 --> 00:50:15,080
will have to implement it they will have

1173
00:50:15,080 --> 00:50:19,370
to bow to my will

1174
00:50:19,380 --> 00:50:21,730
and we shouldn't be doing that stuff

1175
00:50:21,730 --> 00:50:25,060
either um we've also seen cases not a

1176
00:50:25,060 --> 00:50:27,820
tech not but in other standards where

1177
00:50:27,820 --> 00:50:30,850
one of the parties to making the

1178
00:50:30,850 --> 00:50:33,490
standard is holding a patent on the

1179
00:50:33,490 --> 00:50:35,260
thing that he's proposing be adopted and

1180
00:50:35,260 --> 00:50:38,500
does not disclose that on and the patent

1181
00:50:38,500 --> 00:50:40,540
gets approved and now everybody uses the

1182
00:50:40,540 --> 00:50:43,360
patent is snagged by that and is on the

1183
00:50:43,360 --> 00:50:44,860
hook it has to pay them off and that's

1184
00:50:44,860 --> 00:50:46,920
that should be criminal but it's not a

1185
00:50:46,920 --> 00:50:53,350
lot of patent or standards bodies now

1186
00:50:53,350 --> 00:50:55,600
have rules against that unfortunately

1187
00:50:55,600 --> 00:50:58,390
they only apply to the members they

1188
00:50:58,390 --> 00:50:59,950
don't apply to the world so the rest of

1189
00:50:59,950 --> 00:51:02,650
us might put a feature into the standard

1190
00:51:02,650 --> 00:51:05,410
in good faith and it might turn out that

1191
00:51:05,410 --> 00:51:07,300
some third-party unrelated to any of us

1192
00:51:07,300 --> 00:51:09,430
has a patent and everybody gets screwed

1193
00:51:09,430 --> 00:51:12,630
and there is no solution to that problem

1194
00:51:12,630 --> 00:51:14,740
patents and open standards are

1195
00:51:14,740 --> 00:51:17,080
fundamentally incompatible and I think

1196
00:51:17,080 --> 00:51:19,600
the solution to that is to close the

1197
00:51:19,600 --> 00:51:31,670
Patent Office

1198
00:51:31,680 --> 00:51:34,390
I believe that the success of an

1199
00:51:34,390 --> 00:51:35,680
enterprise should depend on the quality

1200
00:51:35,680 --> 00:51:37,780
of its goods and services and stability

1201
00:51:37,780 --> 00:51:39,580
to execute efficiently and not on a

1202
00:51:39,580 --> 00:51:42,099
capricious government office which is

1203
00:51:42,099 --> 00:51:45,400
how it currently works so some companies

1204
00:51:45,400 --> 00:51:46,990
think it's attractive well if we can get

1205
00:51:46,990 --> 00:51:49,210
a patent and if we can snag one of her

1206
00:51:49,210 --> 00:51:51,339
competitors it's free money and who

1207
00:51:51,339 --> 00:51:53,680
would say no to free money except it's

1208
00:51:53,680 --> 00:51:55,330
likely that your competitor is also

1209
00:51:55,330 --> 00:51:57,460
going to snag you on something and maybe

1210
00:51:57,460 --> 00:52:00,310
some patent troll is going to get both

1211
00:52:00,310 --> 00:52:03,940
of you so it's it's like gambling and

1212
00:52:03,940 --> 00:52:05,200
you hope that in the long term you're

1213
00:52:05,200 --> 00:52:07,210
going to win but actually in the long

1214
00:52:07,210 --> 00:52:10,780
term you're probably going to lose the

1215
00:52:10,780 --> 00:52:12,190
patent system made sense in the

1216
00:52:12,190 --> 00:52:14,140
eighteenth and nineteenth century it

1217
00:52:14,140 --> 00:52:17,200
really had a fundamental impact on the

1218
00:52:17,200 --> 00:52:19,030
industry and the sharing of ideas and

1219
00:52:19,030 --> 00:52:20,650
helping us to develop the world that we

1220
00:52:20,650 --> 00:52:22,680
live in now and it was a good thing then

1221
00:52:22,680 --> 00:52:26,410
but it is long out used outlived its

1222
00:52:26,410 --> 00:52:28,869
usefulness and it is now a detriment and

1223
00:52:28,869 --> 00:52:32,680
a barrier to progress so in the patent

1224
00:52:32,680 --> 00:52:35,500
system nobody wins except the lawyers so

1225
00:52:35,500 --> 00:52:39,430
I want to get rid of it one of the other

1226
00:52:39,430 --> 00:52:42,660
one of the main reasons to be in

1227
00:52:42,660 --> 00:52:45,760
standards process is the satisfaction

1228
00:52:45,760 --> 00:52:47,320
that comes from getting a lot of people

1229
00:52:47,320 --> 00:52:50,109
to agree on anything particularly on

1230
00:52:50,109 --> 00:52:52,119
something good that is a wonderful and

1231
00:52:52,119 --> 00:52:55,540
add valuable thing and so that's that's

1232
00:52:55,540 --> 00:52:56,530
the good thing that comes out

1233
00:52:56,530 --> 00:53:00,730
accountants so ECMO script to the fifth

1234
00:53:00,730 --> 00:53:03,490
edition it's coming soon it will be the

1235
00:53:03,490 --> 00:53:06,040
best web standard in the history of the

1236
00:53:06,040 --> 00:53:09,940
world there's still lots and lots of

1237
00:53:09,940 --> 00:53:14,230
room for improvement so what we're my no

1238
00:53:14,230 --> 00:53:16,599
means done yet but I think we've made a

1239
00:53:16,599 --> 00:53:19,060
good start on it and I hope that we can

1240
00:53:19,060 --> 00:53:20,800
be an influence to other projects as

1241
00:53:20,800 --> 00:53:23,680
well I expect that the future editions

1242
00:53:23,680 --> 00:53:25,920
of Ekron script will be even better even

1243
00:53:25,920 --> 00:53:28,920
if they still suck a little

1244
00:53:28,920 --> 00:53:45,670
thank you and good night

1245
00:53:45,680 --> 00:53:47,940
so I think we have time for some

1246
00:53:47,940 --> 00:53:56,140
questions yeah okay anybody yes but

1247
00:53:56,140 --> 00:54:07,090
I have not these are paper proposals at

1248
00:54:07,090 --> 00:54:08,380
this point just to suggest the

1249
00:54:08,380 --> 00:54:10,470
possibility of considering other formats

1250
00:54:10,470 --> 00:54:13,450
there may be more mature better thought

1251
00:54:13,450 --> 00:54:14,950
through formats that I'm not aware of

1252
00:54:14,950 --> 00:54:17,050
and I'm hoping that by starting this

1253
00:54:17,050 --> 00:54:19,540
discussion will find those so I'm not

1254
00:54:19,540 --> 00:54:21,280
advocating any particular type I'm

1255
00:54:21,280 --> 00:54:23,740
advocating opening the debate to better

1256
00:54:23,740 --> 00:54:25,990
possibilities if it turns out that we

1257
00:54:25,990 --> 00:54:28,210
can't find any than the next obligation

1258
00:54:28,210 --> 00:54:29,740
on me is to start implementing these

1259
00:54:29,740 --> 00:54:31,210
things and trying to prove they could

1260
00:54:31,210 --> 00:54:37,480
actually work in this environment anyone

1261
00:54:37,480 --> 00:54:42,099
else over there

1262
00:54:42,109 --> 00:54:51,200
yes

1263
00:54:51,210 --> 00:54:54,839
why did we remove arguments khali we

1264
00:54:54,839 --> 00:54:57,420
wanted to remove the whole thing but we

1265
00:54:57,420 --> 00:55:01,770
couldn't do that the caja team at Google

1266
00:55:01,770 --> 00:55:03,869
was concerned about the potential for

1267
00:55:03,869 --> 00:55:05,849
capability leakage through arguments

1268
00:55:05,849 --> 00:55:10,170
collie one of the reasons we're adding

1269
00:55:10,170 --> 00:55:14,700
the strict mode is to reduce the the

1270
00:55:14,700 --> 00:55:16,830
cost of kaha and to reduce the

1271
00:55:16,830 --> 00:55:18,839
likelihood that you're going to somehow

1272
00:55:18,839 --> 00:55:21,210
get access to some capability that you

1273
00:55:21,210 --> 00:55:23,700
should not be getting at so removing

1274
00:55:23,700 --> 00:55:26,339
arguments collie was an important step

1275
00:55:26,339 --> 00:55:29,070
in doing that the language does provide

1276
00:55:29,070 --> 00:55:32,070
a way of several other ways of

1277
00:55:32,070 --> 00:55:34,470
supporting recursive functions and

1278
00:55:34,470 --> 00:55:44,520
you'll just have to use one of those

1279
00:55:44,530 --> 00:55:54,299
right yes

1280
00:55:54,309 --> 00:56:00,620
hmm

1281
00:56:00,630 --> 00:56:13,850
I don't know

1282
00:56:13,860 --> 00:56:15,900
that's not an option that IBM has been

1283
00:56:15,900 --> 00:56:19,530
presenting to us IBM has not been

1284
00:56:19,530 --> 00:56:22,650
presenting that option to us the only

1285
00:56:22,650 --> 00:56:24,480
the only option they gave us was the

1286
00:56:24,480 --> 00:56:39,540
128-bit format

1287
00:56:39,550 --> 00:56:45,520
good that's very encouraging

1288
00:56:45,530 --> 00:57:01,300
anybody else yes

1289
00:57:01,310 --> 00:57:05,360
um actually es5 strict mode looks a lot

1290
00:57:05,360 --> 00:57:08,810
like the good parts the good parts turn

1291
00:57:08,810 --> 00:57:12,260
out have a lot of synergy with kaha and

1292
00:57:12,260 --> 00:57:17,900
with the new design of vs five so the

1293
00:57:17,900 --> 00:57:20,060
the struggle for us was how many bad

1294
00:57:20,060 --> 00:57:22,880
parts could be removed and we didn't

1295
00:57:22,880 --> 00:57:24,680
remove nearly as much as we wanted for

1296
00:57:24,680 --> 00:57:26,240
example we still have semicolon

1297
00:57:26,240 --> 00:57:28,880
insertion the browser makers told us

1298
00:57:28,880 --> 00:57:31,310
that it would be a hardship for them to

1299
00:57:31,310 --> 00:57:45,180
fix that so watch your semicolons yes

1300
00:57:45,190 --> 00:57:49,030
so when will it hit the streets on parts

1301
00:57:49,030 --> 00:57:50,530
of it have already hit the streets for

1302
00:57:50,530 --> 00:57:53,200
example high-speed JSON parsing is now

1303
00:57:53,200 --> 00:57:56,380
built into ie8 and to firefox firefox

1304
00:57:56,380 --> 00:58:00,339
already has the new array methods and a

1305
00:58:00,339 --> 00:58:02,770
few other features we don't know yet

1306
00:58:02,770 --> 00:58:04,119
who's going to be the first to market

1307
00:58:04,119 --> 00:58:07,240
with the whole language my guess is that

1308
00:58:07,240 --> 00:58:09,339
Microsoft is probably a little bit ahead

1309
00:58:09,339 --> 00:58:13,540
right now but they can't ship until IE 9

1310
00:58:13,540 --> 00:58:14,770
and who knows when that's going to

1311
00:58:14,770 --> 00:58:16,930
happen so they're pretty constrained in

1312
00:58:16,930 --> 00:58:21,490
that my guess is that Firefox is going

1313
00:58:21,490 --> 00:58:23,740
to play tortoise in here with Microsoft

1314
00:58:23,740 --> 00:58:25,839
so they're going to wait until it looks

1315
00:58:25,839 --> 00:58:27,730
like Microsoft is getting to the end and

1316
00:58:27,730 --> 00:58:29,170
then they're going to go really fast and

1317
00:58:29,170 --> 00:58:30,849
try to beat him to market we're trying

1318
00:58:30,849 --> 00:58:32,800
to convince them that they should beat

1319
00:58:32,800 --> 00:58:35,890
him really really good but we haven't

1320
00:58:35,890 --> 00:58:38,619
seen that Apple was involved in all this

1321
00:58:38,619 --> 00:58:41,589
stuff and when I asked them what their

1322
00:58:41,589 --> 00:58:44,079
intentions are they say we can't comment

1323
00:58:44,079 --> 00:58:51,569
on future product directions and the

1324
00:58:51,569 --> 00:58:53,980
Google team has been telling us will do

1325
00:58:53,980 --> 00:58:57,650
whatever Apple does so

1326
00:58:57,650 --> 00:59:00,059
we're trying to get them to hurry it up

1327
00:59:00,059 --> 00:59:08,580
to yes

1328
00:59:08,590 --> 00:59:11,720
jslint should look exactly the same if

1329
00:59:11,720 --> 00:59:15,710
you're in the good parts then that

1330
00:59:15,710 --> 00:59:17,360
should work really well in the strict

1331
00:59:17,360 --> 00:59:22,070
mode there's one of the things that we

1332
00:59:22,070 --> 00:59:24,230
try to do in the design of this language

1333
00:59:24,230 --> 00:59:27,590
is not add any new syntax because if we

1334
00:59:27,590 --> 00:59:29,660
have new syntax your programs will fail

1335
00:59:29,660 --> 00:59:33,020
on the older browsers and so that

1336
00:59:33,020 --> 00:59:34,580
doesn't really do you any good look at

1337
00:59:34,580 --> 00:59:36,290
this new feature that you can't use for

1338
00:59:36,290 --> 00:59:38,960
five years so we tried to put in

1339
00:59:38,960 --> 00:59:41,000
features such that you could either test

1340
00:59:41,000 --> 00:59:43,700
for their omission or in most cases you

1341
00:59:43,700 --> 00:59:45,650
could your Ajax library could fill them

1342
00:59:45,650 --> 00:59:49,100
in for you so for example if you're

1343
00:59:49,100 --> 00:59:52,010
using the JSON to jas for your JSON

1344
00:59:52,010 --> 00:59:55,670
parsing when you're running on one of

1345
00:59:55,670 --> 00:59:57,920
the newer browsers there's no change

1346
00:59:57,920 --> 01:00:00,110
except you're Jason parson gets really

1347
01:00:00,110 --> 01:00:03,830
fast and we can do similar things for a

1348
01:00:03,830 --> 01:00:08,880
lot of the other array methods and so on

1349
01:00:08,890 --> 01:00:12,860
okay well done all right good night

