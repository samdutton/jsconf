1
00:00:00,320 --> 00:00:02,070

[Music]

2
00:00:02,070 --> 00:00:03,840
[Applause]

3
00:00:03,840 --> 00:00:05,660
[Music]

4
00:00:05,660 --> 00:00:07,410
[Applause]

5
00:00:07,410 --> 00:00:09,280
[Music]

6
00:00:09,280 --> 00:00:11,020
[Applause]

7
00:00:11,020 --> 00:00:12,780
[Music]

8
00:00:12,780 --> 00:00:16,860
[Applause]

9
00:00:16,870 --> 00:00:23,439
[Music]

10
00:00:23,439 --> 00:00:25,570
so without further ado I present to you

11
00:00:25,570 --> 00:00:34,510
one Chi Saito thank you I had to ask you

12
00:00:34,510 --> 00:00:36,910
yeah you told us about something really

13
00:00:36,910 --> 00:00:40,809
special about your your socks yeah so

14
00:00:40,809 --> 00:00:42,340
I'm actually wearing brand new ones I

15
00:00:42,340 --> 00:00:44,170
got those ones from the lorry yesterday

16
00:00:44,170 --> 00:00:47,170
these are new and PM socks I had an old

17
00:00:47,170 --> 00:00:48,640
pair of NPM socks and they're like

18
00:00:48,640 --> 00:00:54,540
getting a little old so thank you for

19
00:00:54,540 --> 00:00:57,489
another like quick clarifying thing I

20
00:00:57,489 --> 00:00:59,530
actually I'm mostly like deaf punks

21
00:00:59,530 --> 00:01:02,110
newest album but when I say that I like

22
00:01:02,110 --> 00:01:03,700
it I mean like I listened to it two

23
00:01:03,700 --> 00:01:05,229
times yesterday while I was working on

24
00:01:05,229 --> 00:01:08,799
my slides so I really really like it and

25
00:01:08,799 --> 00:01:10,930
thank you all for coming today

26
00:01:10,930 --> 00:01:14,799
and I it means a lot for me that you're

27
00:01:14,799 --> 00:01:17,740
here because my fellow web developers I

28
00:01:17,740 --> 00:01:22,659
am angry and I am angry because for

29
00:01:22,659 --> 00:01:25,180
years us JavaScript errs have been told

30
00:01:25,180 --> 00:01:28,869
to never ever ever ever use switch

31
00:01:28,869 --> 00:01:32,140
statements and you know I mean there's

32
00:01:32,140 --> 00:01:34,240
there's reasons all over for it and

33
00:01:34,240 --> 00:01:35,979
today I'd like to talk about some of

34
00:01:35,979 --> 00:01:38,530
those particularly I'd like to to recap

35
00:01:38,530 --> 00:01:41,680
a bit of that that awful tragedy tragedy

36
00:01:41,680 --> 00:01:44,650
and then talk about the the brave web

37
00:01:44,650 --> 00:01:46,750
developers who've come before us and the

38
00:01:46,750 --> 00:01:49,299
ways that they've come up with skirting

39
00:01:49,299 --> 00:01:51,460
around switch statements and then I'd

40
00:01:51,460 --> 00:01:54,340
like to introduce you to a tc39 proposal

41
00:01:54,340 --> 00:01:57,159
for a new incarnation of switch

42
00:01:57,159 --> 00:01:58,780
statements that would leverage pattern

43
00:01:58,780 --> 00:02:01,119
matching inside of JavaScript so with

44
00:02:01,119 --> 00:02:03,100
all that being said my name is Juan

45
00:02:03,100 --> 00:02:05,290
cocido I am a Canadian

46
00:02:05,290 --> 00:02:08,860
colombian-american developer and I am

47
00:02:08,860 --> 00:02:10,869
working for a company called testable

48
00:02:10,869 --> 00:02:13,239
which is a consulting company where we

49
00:02:13,239 --> 00:02:15,069
go to other people's teams and we help

50
00:02:15,069 --> 00:02:16,810
them write nice code and we try to be

51
00:02:16,810 --> 00:02:18,760
nice about writing code we try to help

52
00:02:18,760 --> 00:02:19,930
people be nice to each other about

53
00:02:19,930 --> 00:02:22,690
writing code I really like playing

54
00:02:22,690 --> 00:02:24,910
guitar and speaking foreign languages

55
00:02:24,910 --> 00:02:26,860
and traveling so if those are all things

56
00:02:26,860 --> 00:02:28,600
that urine to come chat with me about it

57
00:02:28,600 --> 00:02:32,020
sometime here is a picture of me then

58
00:02:32,020 --> 00:02:34,780
here's a picture of me as a child here's

59
00:02:34,780 --> 00:02:36,130
a picture of me with bleached blonde

60
00:02:36,130 --> 00:02:39,310
hair and here is a picture of me that my

61
00:02:39,310 --> 00:02:41,290
co-workers drew at our company retreat

62
00:02:41,290 --> 00:02:43,030
last week I'm not sure why so I'm

63
00:02:43,030 --> 00:02:45,370
wearing at Columbia soccer jersey I also

64
00:02:45,370 --> 00:02:48,880
have my guitar but I'm Abraham Lincoln

65
00:02:48,880 --> 00:02:52,030
which which makes sense right we're both

66
00:02:52,030 --> 00:02:52,900
seven feet tall

67
00:02:52,900 --> 00:02:55,560
we're very similar people all in all and

68
00:02:55,560 --> 00:02:58,240
so let's get back to switch statements

69
00:02:58,240 --> 00:03:01,420
so what is wrong with switch statements

70
00:03:01,420 --> 00:03:04,780
why shouldn't we use them well if you

71
00:03:04,780 --> 00:03:08,410
believe Google there's approximately 903

72
00:03:08,410 --> 00:03:10,150
million reasons why we shouldn't reuse

73
00:03:10,150 --> 00:03:12,880
them my personal favorite of them is

74
00:03:12,880 --> 00:03:16,840
that switch statements are evil so I'd

75
00:03:16,840 --> 00:03:19,150
honestly I'd heard this when I started

76
00:03:19,150 --> 00:03:21,340
programming that we should avoid switch

77
00:03:21,340 --> 00:03:23,110
statements in JavaScript and I didn't

78
00:03:23,110 --> 00:03:25,210
have a lot of reasons why until I

79
00:03:25,210 --> 00:03:27,550
started researching for this talk and

80
00:03:27,550 --> 00:03:29,370
really putting this together and

81
00:03:29,370 --> 00:03:33,160
morality of switch statements aside the

82
00:03:33,160 --> 00:03:36,910
main reasons I could find were two the

83
00:03:36,910 --> 00:03:39,160
first revolve so here's just a basic

84
00:03:39,160 --> 00:03:41,200
switch statement it's a function that

85
00:03:41,200 --> 00:03:43,510
takes in a number and then it switches

86
00:03:43,510 --> 00:03:45,880
over that number and just has three

87
00:03:45,880 --> 00:03:48,640
cases for the possible values of it each

88
00:03:48,640 --> 00:03:52,450
one logs out the word of that number

89
00:03:52,450 --> 00:03:54,370
you've passed in if none of them match

90
00:03:54,370 --> 00:03:56,620
we hit a default statement so the main

91
00:03:56,620 --> 00:03:59,350
reason domain of two reasons I could

92
00:03:59,350 --> 00:04:00,790
find for where people say not to use

93
00:04:00,790 --> 00:04:03,160
switch statements one is about their

94
00:04:03,160 --> 00:04:07,120
syntax so in JavaScript almost all types

95
00:04:07,120 --> 00:04:10,780
of control flow we do has braces curly

96
00:04:10,780 --> 00:04:13,180
braces for matching them case is one of

97
00:04:13,180 --> 00:04:14,650
the very few things that users colons

98
00:04:14,650 --> 00:04:16,660
and because of that people get really

99
00:04:16,660 --> 00:04:19,390
upset so not good in case you're ever

100
00:04:19,390 --> 00:04:22,060
designing a language avoid colons the

101
00:04:22,060 --> 00:04:24,910
other one that I could find is one that

102
00:04:24,910 --> 00:04:26,860
I find a lot more of an actual complaint

103
00:04:26,860 --> 00:04:28,750
which is that case statements have kind

104
00:04:28,750 --> 00:04:31,750
of tricky semantics so in the side of a

105
00:04:31,750 --> 00:04:34,600
case after you've matched you have to be

106
00:04:34,600 --> 00:04:36,190
sure to explicitly

107
00:04:36,190 --> 00:04:38,889
break out of that case

108
00:04:38,889 --> 00:04:41,639
so for example in this example if you

109
00:04:41,639 --> 00:04:44,050
say you have the number 1 we're gonna

110
00:04:44,050 --> 00:04:46,300
hit the console dot log for 1 and then

111
00:04:46,300 --> 00:04:47,830
we're gonna break out of it so that's

112
00:04:47,830 --> 00:04:51,159
good however if we don't do that and we

113
00:04:51,159 --> 00:04:54,999
do the 2 or the 3 so what's gonna happen

114
00:04:54,999 --> 00:04:57,550
here is that when we enter the case

115
00:04:57,550 --> 00:04:59,589
statement for the two we're gonna log

116
00:04:59,589 --> 00:05:02,949
out 2 however then executions gonna

117
00:05:02,949 --> 00:05:05,319
continue and it's also gonna log out the

118
00:05:05,319 --> 00:05:07,989
value for 3 and the value for default

119
00:05:07,989 --> 00:05:10,289
because since none of those have told

120
00:05:10,289 --> 00:05:12,610
JavaScript exit out of the switch

121
00:05:12,610 --> 00:05:14,289
statement it's is gonna match all those

122
00:05:14,289 --> 00:05:18,509
cases even though the number isn't 3 and

123
00:05:18,509 --> 00:05:21,129
it's already been matched so this is

124
00:05:21,129 --> 00:05:22,809
something that I think definitely could

125
00:05:22,809 --> 00:05:24,610
lead to some unexpected bugs and is is

126
00:05:24,610 --> 00:05:26,889
worth avoiding switch at least to avoid

127
00:05:26,889 --> 00:05:32,379
these type of headaches so how do people

128
00:05:32,379 --> 00:05:34,329
manage to avoid switch statements what

129
00:05:34,329 --> 00:05:36,939
else do we use so I found two main

130
00:05:36,939 --> 00:05:39,629
techniques the first is to use nested

131
00:05:39,629 --> 00:05:42,669
ternary statements so ternary statements

132
00:05:42,669 --> 00:05:44,889
are if-else there this question mark

133
00:05:44,889 --> 00:05:47,259
colon operator so what that does is that

134
00:05:47,259 --> 00:05:49,269
at first evaluates the condition on the

135
00:05:49,269 --> 00:05:50,829
left so we would evaluate whether the

136
00:05:50,829 --> 00:05:54,159
number is equal to one and then if that

137
00:05:54,159 --> 00:05:56,800
evaluates to true we execute the second

138
00:05:56,800 --> 00:05:59,529
statement however if it evaluates to

139
00:05:59,529 --> 00:06:01,929
false then we would evaluate the

140
00:06:01,929 --> 00:06:05,259
statement after the colon so what this

141
00:06:05,259 --> 00:06:07,269
technique does is it just does a chain

142
00:06:07,269 --> 00:06:08,889
of them so that if the first condition

143
00:06:08,889 --> 00:06:10,449
doesn't match then you evaluate the

144
00:06:10,449 --> 00:06:12,339
second dition if that doesn't match you

145
00:06:12,339 --> 00:06:14,229
evaluate the third condition and it

146
00:06:14,229 --> 00:06:18,399
works and my main issue with it is that

147
00:06:18,399 --> 00:06:20,649
I think that it looks ok when you put it

148
00:06:20,649 --> 00:06:23,289
like this but it's relying on some code

149
00:06:23,289 --> 00:06:25,149
style that isn't very normal in

150
00:06:25,149 --> 00:06:27,309
JavaScript and JavaScript this just

151
00:06:27,309 --> 00:06:28,989
isn't how we would indent things so I

152
00:06:28,989 --> 00:06:30,699
took this function and I ran it through

153
00:06:30,699 --> 00:06:32,919
prettier which I think for most of us is

154
00:06:32,919 --> 00:06:34,539
kind of like the industry standard on

155
00:06:34,539 --> 00:06:36,639
how to format code nowadays and it comes

156
00:06:36,639 --> 00:06:39,849
out of something more like this and here

157
00:06:39,849 --> 00:06:41,860
you can really see that like it's not as

158
00:06:41,860 --> 00:06:43,269
straightforward of a statement as we

159
00:06:43,269 --> 00:06:45,909
were looking at it before this also to

160
00:06:45,909 --> 00:06:48,039
me highlights one other thing that I'm

161
00:06:48,039 --> 00:06:50,619
no performance expert but I have the

162
00:06:50,619 --> 00:06:51,760
feeling that this is

163
00:06:51,760 --> 00:06:55,420
very performant code because to hit the

164
00:06:55,420 --> 00:06:57,580
default statement you would actually end

165
00:06:57,580 --> 00:06:59,290
up going through and have one by one

166
00:06:59,290 --> 00:07:01,390
evaluating all of the statements above

167
00:07:01,390 --> 00:07:04,480
it so this type of deep nesting is not

168
00:07:04,480 --> 00:07:07,600
something that won me over so the next

169
00:07:07,600 --> 00:07:09,520
approach that I found is one that I'm

170
00:07:09,520 --> 00:07:12,490
more of a fan of so this is to use an

171
00:07:12,490 --> 00:07:14,920
object literal which is very common in

172
00:07:14,920 --> 00:07:17,950
JavaScript and idiomatic and use that to

173
00:07:17,950 --> 00:07:20,650
control all of our cases so we would

174
00:07:20,650 --> 00:07:22,630
have an object here I called it the

175
00:07:22,630 --> 00:07:24,760
values object and you would have a key

176
00:07:24,760 --> 00:07:27,190
on that for all over the different cases

177
00:07:27,190 --> 00:07:30,460
that we could match and then the value

178
00:07:30,460 --> 00:07:31,900
from that is what we would want to

179
00:07:31,900 --> 00:07:33,820
return so then at the bottom what we

180
00:07:33,820 --> 00:07:35,470
would do is just take the type that

181
00:07:35,470 --> 00:07:37,870
we've passed in and then we would pull

182
00:07:37,870 --> 00:07:40,450
out a value from this object that we've

183
00:07:40,450 --> 00:07:42,220
defined before and then we'll return

184
00:07:42,220 --> 00:07:45,490
that if we've passed in a type that

185
00:07:45,490 --> 00:07:47,200
isn't one of the cases that were set up

186
00:07:47,200 --> 00:07:49,450
to handle then we're gonna get an

187
00:07:49,450 --> 00:07:51,550
undefined value back from that object

188
00:07:51,550 --> 00:07:54,460
which is false II so then what we can do

189
00:07:54,460 --> 00:07:58,210
is go ahead and get the default value

190
00:07:58,210 --> 00:08:01,030
and return that instead so this works I

191
00:08:01,030 --> 00:08:03,520
have a little bit of a gripe with the

192
00:08:03,520 --> 00:08:05,770
fact that we have to explicitly call a

193
00:08:05,770 --> 00:08:08,350
default statement to me it seems a

194
00:08:08,350 --> 00:08:09,820
little weird but maybe I'm just

195
00:08:09,820 --> 00:08:12,550
nitpicking here I think a concern that

196
00:08:12,550 --> 00:08:14,890
is much more valid is that any of the

197
00:08:14,890 --> 00:08:19,000
cases have a false e value so false null

198
00:08:19,000 --> 00:08:21,550
undefined then when you pull them out of

199
00:08:21,550 --> 00:08:23,770
the object and Brun them through this or

200
00:08:23,770 --> 00:08:26,290
check for the default value they would

201
00:08:26,290 --> 00:08:28,180
evaluate to false so then we would

202
00:08:28,180 --> 00:08:30,760
return the default and you're all

203
00:08:30,760 --> 00:08:32,320
probably smarter than me but I would hit

204
00:08:32,320 --> 00:08:35,500
a bug here for sure so I'm not not a

205
00:08:35,500 --> 00:08:39,250
hundred percent on this approach ya

206
00:08:39,250 --> 00:08:42,729
value false e not good so then we would

207
00:08:42,729 --> 00:08:44,830
hit this default statement so then let's

208
00:08:44,830 --> 00:08:47,020
look at another example so this is where

209
00:08:47,020 --> 00:08:49,270
I think switch statements are most used

210
00:08:49,270 --> 00:08:52,120
in JavaScript today which is inside of

211
00:08:52,120 --> 00:08:55,450
Redux reducers so inside of this simple

212
00:08:55,450 --> 00:08:58,810
example sorry to back up if any of you

213
00:08:58,810 --> 00:09:01,750
haven't used redux in redux a common

214
00:09:01,750 --> 00:09:03,970
pattern like how Redux reducers work is

215
00:09:03,970 --> 00:09:05,649
that it's a function that take

216
00:09:05,649 --> 00:09:08,319
State and it takes some instructions

217
00:09:08,319 --> 00:09:10,660
about how to update that state and then

218
00:09:10,660 --> 00:09:13,899
the function is in charge of calculating

219
00:09:13,899 --> 00:09:15,730
all of the pauses like the updates to

220
00:09:15,730 --> 00:09:17,680
that state and returning back a new

221
00:09:17,680 --> 00:09:20,800
state so here we have a counter you know

222
00:09:20,800 --> 00:09:22,329
the counter would be a number and then

223
00:09:22,329 --> 00:09:24,519
we can either increment that decrement

224
00:09:24,519 --> 00:09:27,160
that or reset it so what we would do is

225
00:09:27,160 --> 00:09:29,889
that in redux you have an action and an

226
00:09:29,889 --> 00:09:32,439
action has a type which tells you how to

227
00:09:32,439 --> 00:09:35,050
go through this update statement so if

228
00:09:35,050 --> 00:09:36,850
that type is increment we would push up

229
00:09:36,850 --> 00:09:38,769
our state if it's d comment will push it

230
00:09:38,769 --> 00:09:41,110
down if it's reset we would return 0 and

231
00:09:41,110 --> 00:09:43,360
then if for some reason it's not any of

232
00:09:43,360 --> 00:09:44,949
those predetermined ones we want to just

233
00:09:44,949 --> 00:09:47,769
keep the state the way it is so there's

234
00:09:47,769 --> 00:09:53,709
a there's a tricky thing here which well

235
00:09:53,709 --> 00:09:55,059
so let's take the switch statement and

236
00:09:55,059 --> 00:09:56,230
first let's switch it over to this

237
00:09:56,230 --> 00:09:57,579
object approach that we were discussing

238
00:09:57,579 --> 00:10:00,040
before so if we were to do that what we

239
00:10:00,040 --> 00:10:01,179
would do is cut out that switch

240
00:10:01,179 --> 00:10:03,129
statement have an object that's all of

241
00:10:03,129 --> 00:10:06,069
the different cases so it has a key for

242
00:10:06,069 --> 00:10:07,720
all of the different types of actions

243
00:10:07,720 --> 00:10:09,459
and then on the right hand it has the

244
00:10:09,459 --> 00:10:12,220
how we want to update the state then at

245
00:10:12,220 --> 00:10:13,420
the bottom we would go ahead and pull

246
00:10:13,420 --> 00:10:14,800
out that case or we would return the

247
00:10:14,800 --> 00:10:19,240
default so here we run into concern

248
00:10:19,240 --> 00:10:22,720
which is to illustrate it a little more

249
00:10:22,720 --> 00:10:25,389
let's think about what if we could

250
00:10:25,389 --> 00:10:28,389
change instead of always updating or

251
00:10:28,389 --> 00:10:30,610
decrementing by one what if we can make

252
00:10:30,610 --> 00:10:33,519
that an arbitrary amount so now the

253
00:10:33,519 --> 00:10:35,050
amount that we're gonna increment or

254
00:10:35,050 --> 00:10:37,149
decrement by is also going to flow in

255
00:10:37,149 --> 00:10:40,809
with this action so here at the very top

256
00:10:40,809 --> 00:10:43,300
we have just a little bit of

257
00:10:43,300 --> 00:10:44,649
destructuring if it's not something

258
00:10:44,649 --> 00:10:46,179
you're familiar with we'll talk about it

259
00:10:46,179 --> 00:10:48,189
a little later so we're gonna reach into

260
00:10:48,189 --> 00:10:49,779
that action and we're gonna pull out the

261
00:10:49,779 --> 00:10:51,699
type of the action we're also going to

262
00:10:51,699 --> 00:10:53,589
pull out the data of the action and as

263
00:10:53,589 --> 00:10:55,470
we do that we'll rename it to the amount

264
00:10:55,470 --> 00:10:58,179
then inside of our case is what we want

265
00:10:58,179 --> 00:11:00,220
to do is increment state by the amount

266
00:11:00,220 --> 00:11:03,369
and decrement state by amount so here we

267
00:11:03,369 --> 00:11:06,369
run into a bug and the bug is that if

268
00:11:06,369 --> 00:11:10,029
we're in the case of reset all we want

269
00:11:10,029 --> 00:11:11,920
to do is reset the state to zero so

270
00:11:11,920 --> 00:11:13,119
we're not incrementing or decrementing

271
00:11:13,119 --> 00:11:16,029
by any amount so it would make perfect

272
00:11:16,029 --> 00:11:19,360
sense for amount to be undefined how

273
00:11:19,360 --> 00:11:22,779
as soon as we hit this skate statement

274
00:11:22,779 --> 00:11:24,250
definition as soon as we call this

275
00:11:24,250 --> 00:11:26,800
function we're eagerly gonna evaluate

276
00:11:26,800 --> 00:11:30,310
what state plus amount means and that

277
00:11:30,310 --> 00:11:31,660
means that we're either gonna get state

278
00:11:31,660 --> 00:11:34,209
plus undefined state plus null state -

279
00:11:34,209 --> 00:11:36,790
no this is bad i I didn't run this to be

280
00:11:36,790 --> 00:11:38,050
sure but I'm pretty sure this would

281
00:11:38,050 --> 00:11:40,890
result in your program just blowing up

282
00:11:40,890 --> 00:11:44,589
so the way to avoid this is that instead

283
00:11:44,589 --> 00:11:47,350
of just having cases the return of value

284
00:11:47,350 --> 00:11:50,410
we would instead make the cases return a

285
00:11:50,410 --> 00:11:53,110
function so that when you evaluate the

286
00:11:53,110 --> 00:11:55,899
function at that point we do that math

287
00:11:55,899 --> 00:11:57,519
and this would make sure that when you

288
00:11:57,519 --> 00:12:00,279
hit the reset case it hasn't evaluated

289
00:12:00,279 --> 00:12:02,740
the other two cases and it would avoid

290
00:12:02,740 --> 00:12:06,100
this bug so this means that you know at

291
00:12:06,100 --> 00:12:08,170
the bottom now we're gonna be having to

292
00:12:08,170 --> 00:12:11,350
call will pull out our case from the

293
00:12:11,350 --> 00:12:13,180
object and then we'll have to evaluate

294
00:12:13,180 --> 00:12:15,010
it and we'll do that again for the

295
00:12:15,010 --> 00:12:18,370
default case and this isn't I mean it's

296
00:12:18,370 --> 00:12:20,620
not terrible it just seems to me like a

297
00:12:20,620 --> 00:12:22,810
lot of ceremony for something that a

298
00:12:22,810 --> 00:12:25,600
language could and should be able to

299
00:12:25,600 --> 00:12:28,540
handle for you and a lot of languages do

300
00:12:28,540 --> 00:12:30,610
so let's backtrack now and talk about a

301
00:12:30,610 --> 00:12:32,470
couple other ones so here's for example

302
00:12:32,470 --> 00:12:35,199
elm Elm is a language that embraces

303
00:12:35,199 --> 00:12:37,510
switch statements a lot in fact so much

304
00:12:37,510 --> 00:12:39,519
so that in Elm it's considered a code

305
00:12:39,519 --> 00:12:42,250
smell to use an if statement or any

306
00:12:42,250 --> 00:12:45,220
other type of evaluation if a case would

307
00:12:45,220 --> 00:12:49,779
do so here in Elm and an action is a

308
00:12:49,779 --> 00:12:53,620
data type and the data type would be one

309
00:12:53,620 --> 00:12:55,990
of a bunch of different cases then when

310
00:12:55,990 --> 00:12:59,199
a case could involve with it some data

311
00:12:59,199 --> 00:13:01,690
attached to it so here when we're in the

312
00:13:01,690 --> 00:13:03,820
increment case will automatically get

313
00:13:03,820 --> 00:13:05,980
another bit of data with it which is the

314
00:13:05,980 --> 00:13:08,010
amount and when we hit the reset case

315
00:13:08,010 --> 00:13:10,600
reset has no amount so it just wouldn't

316
00:13:10,600 --> 00:13:13,709
be a part of that data type at all in

317
00:13:13,709 --> 00:13:16,899
rust there's something very similar so

318
00:13:16,899 --> 00:13:19,060
we would have an action which is a

319
00:13:19,060 --> 00:13:21,610
struct which has two different type in

320
00:13:21,610 --> 00:13:23,320
an amount to find on it and then we

321
00:13:23,320 --> 00:13:25,149
would have a function that matches over

322
00:13:25,149 --> 00:13:27,220
that type and then lets you do different

323
00:13:27,220 --> 00:13:29,649
stuff based on it if you actually know

324
00:13:29,649 --> 00:13:31,480
any rust don't look at this too closely

325
00:13:31,480 --> 00:13:33,250
because I don't and I have a

326
00:13:33,250 --> 00:13:36,460
this actually doesn't compile and then

327
00:13:36,460 --> 00:13:37,660
the one that we're gonna focus on the

328
00:13:37,660 --> 00:13:40,030
most is elixir the reason why we're

329
00:13:40,030 --> 00:13:42,280
gonna do that is because elixir has the

330
00:13:42,280 --> 00:13:44,380
closest semantics out of these languages

331
00:13:44,380 --> 00:13:47,140
to JavaScript so in elixir we would

332
00:13:47,140 --> 00:13:49,270
define a function the function would

333
00:13:49,270 --> 00:13:51,370
take a state and in action we would case

334
00:13:51,370 --> 00:13:54,270
over that action and then if it matched

335
00:13:54,270 --> 00:13:56,830
whether we wanted to increment decrement

336
00:13:56,830 --> 00:14:00,550
or reset we would do we would take the

337
00:14:00,550 --> 00:14:02,230
amount calculate a new state based off

338
00:14:02,230 --> 00:14:06,850
of it and this leaves us with a question

339
00:14:06,850 --> 00:14:09,040
of if all these other languages have a

340
00:14:09,040 --> 00:14:12,790
way of doing robust handling of cases

341
00:14:12,790 --> 00:14:14,830
why can't we have something like that in

342
00:14:14,830 --> 00:14:18,670
JavaScript so at this point actually

343
00:14:18,670 --> 00:14:20,140
want to take a quick intermission to

344
00:14:20,140 --> 00:14:21,940
show off my water bottle for all of you

345
00:14:21,940 --> 00:14:24,640
cuz I'm super proud of my water bottle

346
00:14:24,640 --> 00:14:26,020
we were talking about it backstage

347
00:14:26,020 --> 00:14:28,090
actually I have all of these stickers

348
00:14:28,090 --> 00:14:29,290
from different conferences that I've

349
00:14:29,290 --> 00:14:31,930
gone to and some of them like this one

350
00:14:31,930 --> 00:14:33,880
for example is the the most famous

351
00:14:33,880 --> 00:14:36,850
soccer player in Colombian history but

352
00:14:36,850 --> 00:14:39,100
it's actually the MPM wombat dressed up

353
00:14:39,100 --> 00:14:41,860
as him so this is fantastic and if I

354
00:14:41,860 --> 00:14:43,510
were to lose this water bottle I'm

355
00:14:43,510 --> 00:14:45,430
really confident that I'd never be able

356
00:14:45,430 --> 00:14:48,100
to get this sticker again so if you have

357
00:14:48,100 --> 00:14:49,270
a lot of stickers and don't know what to

358
00:14:49,270 --> 00:14:50,650
do with them I really encourage you to

359
00:14:50,650 --> 00:14:52,510
find other things that aren't your

360
00:14:52,510 --> 00:14:54,130
laptop to put them on because I'm a

361
00:14:54,130 --> 00:14:55,780
little too anxious to put them on my

362
00:14:55,780 --> 00:14:57,700
laptop but my water bottle is now my

363
00:14:57,700 --> 00:15:00,790
favourite object so with that little

364
00:15:00,790 --> 00:15:02,260
intermission to kind of give you all a

365
00:15:02,260 --> 00:15:03,520
breath of fresh air let's talk about

366
00:15:03,520 --> 00:15:05,530
JavaScript so why can't we have this in

367
00:15:05,530 --> 00:15:08,980
JavaScript because we can actually so

368
00:15:08,980 --> 00:15:10,720
there's right now a proposal in front of

369
00:15:10,720 --> 00:15:13,120
tc39 that's reached stage 1 for

370
00:15:13,120 --> 00:15:15,370
introducing pattern matching into

371
00:15:15,370 --> 00:15:18,190
JavaScript so what pattern matching

372
00:15:18,190 --> 00:15:19,740
would be doing is it would be taking

373
00:15:19,740 --> 00:15:23,050
semantic close to what we have for for

374
00:15:23,050 --> 00:15:25,180
switch statements now but then it would

375
00:15:25,180 --> 00:15:27,010
be taking all of the semantics of

376
00:15:27,010 --> 00:15:29,050
destructuring and it would be filling

377
00:15:29,050 --> 00:15:32,860
them into that language feature so let's

378
00:15:32,860 --> 00:15:34,839
take a step back and let's talk about

379
00:15:34,839 --> 00:15:36,040
what I just mentioned about

380
00:15:36,040 --> 00:15:38,920
destructuring so destructuring is a

381
00:15:38,920 --> 00:15:40,210
feature you can use whenever you're

382
00:15:40,210 --> 00:15:42,430
defining variables with like const or

383
00:15:42,430 --> 00:15:44,770
virus and what it allows you to do is

384
00:15:44,770 --> 00:15:47,139
that it allows you to not just define

385
00:15:47,139 --> 00:15:49,600
a simple variable by variable on the

386
00:15:49,600 --> 00:15:51,339
left value on the right but to actually

387
00:15:51,339 --> 00:15:53,889
do some logic as you do that so in this

388
00:15:53,889 --> 00:15:56,259
simple case on the right hand side we

389
00:15:56,259 --> 00:15:58,449
have an object and the object has an X

390
00:15:58,449 --> 00:16:01,749
property and a Y property then when we

391
00:16:01,749 --> 00:16:04,209
create a variable we can use the curly

392
00:16:04,209 --> 00:16:06,160
brace object syntax on the left hand

393
00:16:06,160 --> 00:16:08,889
side and what we can tell it is go ahead

394
00:16:08,889 --> 00:16:11,079
and make two new variables for me x and

395
00:16:11,079 --> 00:16:13,419
y and make the value of each of them

396
00:16:13,419 --> 00:16:16,389
equal to the value of that property and

397
00:16:16,389 --> 00:16:18,999
the object on the right this is really

398
00:16:18,999 --> 00:16:21,819
cool because it's so if we were to do

399
00:16:21,819 --> 00:16:24,459
this we would get like we would just

400
00:16:24,459 --> 00:16:26,169
have like a easier way to pull things

401
00:16:26,169 --> 00:16:27,999
out of objects we can also do other

402
00:16:27,999 --> 00:16:29,439
things on top of it like we can do

403
00:16:29,439 --> 00:16:31,480
default values so here what we're doing

404
00:16:31,480 --> 00:16:33,869
is that when we define these variables

405
00:16:33,869 --> 00:16:36,549
we can give them default values so we

406
00:16:36,549 --> 00:16:39,009
can say that the default value for X if

407
00:16:39,009 --> 00:16:40,359
we don't find it on the right-hand side

408
00:16:40,359 --> 00:16:42,910
will be the poop emoji and the value for

409
00:16:42,910 --> 00:16:45,730
Y will be the ghost emoji so the the

410
00:16:45,730 --> 00:16:47,649
results of this is interesting so the

411
00:16:47,649 --> 00:16:50,199
object on the right does have both of

412
00:16:50,199 --> 00:16:52,989
these properties but for the first one

413
00:16:52,989 --> 00:16:57,279
the value of x is undefined so to back

414
00:16:57,279 --> 00:16:59,169
up if we were to ask for a variable that

415
00:16:59,169 --> 00:17:00,970
isn't in that object at all let's say if

416
00:17:00,970 --> 00:17:04,209
we were asked for a Z then Z pulled out

417
00:17:04,209 --> 00:17:06,159
of that object would be undefined so we

418
00:17:06,159 --> 00:17:08,559
would get it's a default value with X

419
00:17:08,559 --> 00:17:10,480
even though the X property does exist

420
00:17:10,480 --> 00:17:12,039
because its values undefined

421
00:17:12,039 --> 00:17:14,769
we'll also get the default value however

422
00:17:14,769 --> 00:17:17,559
this isn't the case for Y because Y has

423
00:17:17,559 --> 00:17:20,230
a value of null we will actually get

424
00:17:20,230 --> 00:17:23,230
that value out of the destructuring but

425
00:17:23,230 --> 00:17:24,789
I'm gonna convince you that this is

426
00:17:24,789 --> 00:17:27,840
actually a good thing it's not a problem

427
00:17:27,840 --> 00:17:30,100
other things that you can do with the

428
00:17:30,100 --> 00:17:31,809
structuring it's not just for objects

429
00:17:31,809 --> 00:17:33,880
you can do it with arrays so what we can

430
00:17:33,880 --> 00:17:36,519
do is we can go ahead and define x and y

431
00:17:36,519 --> 00:17:39,340
to the first and second values of an

432
00:17:39,340 --> 00:17:41,470
array just by applying the same array

433
00:17:41,470 --> 00:17:43,929
syntax on the left this is really cool

434
00:17:43,929 --> 00:17:46,690
it allows you a way of doing much easier

435
00:17:46,690 --> 00:17:49,510
variable assignment it also allows you

436
00:17:49,510 --> 00:17:52,360
to ignore parts of an array as you're

437
00:17:52,360 --> 00:17:54,309
pulling stuff out so let's say that we

438
00:17:54,309 --> 00:17:56,260
only care about the second value we

439
00:17:56,260 --> 00:17:58,450
don't care about the first all we can do

440
00:17:58,450 --> 00:18:00,549
is leave in the assignment will leave

441
00:18:00,549 --> 00:18:00,850
the

442
00:18:00,850 --> 00:18:03,010
first slot open and then have the second

443
00:18:03,010 --> 00:18:05,530
slot then we're never gonna pull

444
00:18:05,530 --> 00:18:07,720
anything out for that GS comp string

445
00:18:07,720 --> 00:18:09,190
instead we're only gonna pull out the

446
00:18:09,190 --> 00:18:12,820
second value into the Y this also allows

447
00:18:12,820 --> 00:18:14,890
you to do really cool things like to

448
00:18:14,890 --> 00:18:18,310
leverage rest argument or sprit sorry I

449
00:18:18,310 --> 00:18:20,110
get confused of this so spread is when

450
00:18:20,110 --> 00:18:22,120
your you have an arranger spreading it

451
00:18:22,120 --> 00:18:23,860
apart here what we're doing is rest

452
00:18:23,860 --> 00:18:26,050
arguments so let's say that we have an

453
00:18:26,050 --> 00:18:28,510
array with four things in it we're gonna

454
00:18:28,510 --> 00:18:30,250
take the first out of it and put it into

455
00:18:30,250 --> 00:18:32,830
a variable X but then this triple dot

456
00:18:32,830 --> 00:18:34,840
syntax what it's gonna do is it's gonna

457
00:18:34,840 --> 00:18:36,970
take all the rest of the contents of

458
00:18:36,970 --> 00:18:38,710
that array and it's gonna put them

459
00:18:38,710 --> 00:18:41,020
together into the variable rest so now

460
00:18:41,020 --> 00:18:43,570
we have one variable of the first and

461
00:18:43,570 --> 00:18:45,340
another variable which is the entire

462
00:18:45,340 --> 00:18:49,180
tail this is really cool and so having

463
00:18:49,180 --> 00:18:51,790
covered all of that 4d structuring let's

464
00:18:51,790 --> 00:18:53,650
talk about how this would fit into the

465
00:18:53,650 --> 00:18:58,590
pattern matching proposal so here is the

466
00:18:58,590 --> 00:19:01,750
update state or the update counter that

467
00:19:01,750 --> 00:19:03,850
we discussed earlier with Redux handlers

468
00:19:03,850 --> 00:19:06,130
and how we would do this if we had

469
00:19:06,130 --> 00:19:08,800
pattern matching available so we will do

470
00:19:08,800 --> 00:19:11,080
a case statement and the case statement

471
00:19:11,080 --> 00:19:13,930
will switch over the type of the action

472
00:19:13,930 --> 00:19:16,630
then the proposed semantics right now

473
00:19:16,630 --> 00:19:21,220
have this new keyword when and with when

474
00:19:21,220 --> 00:19:23,500
you would put the value that you want to

475
00:19:23,500 --> 00:19:25,900
match against next to it and then an

476
00:19:25,900 --> 00:19:28,210
arrow and afterwards whatever you want

477
00:19:28,210 --> 00:19:30,220
to do so here would be saying that if

478
00:19:30,220 --> 00:19:33,220
the type of action directly matches the

479
00:19:33,220 --> 00:19:35,470
string increment then we can go ahead

480
00:19:35,470 --> 00:19:38,740
and evaluate the state with +1 so this

481
00:19:38,740 --> 00:19:41,650
is this is cool however that's not where

482
00:19:41,650 --> 00:19:44,290
we stopped so because we can use all of

483
00:19:44,290 --> 00:19:46,570
this destructuring semantics we can go

484
00:19:46,570 --> 00:19:48,520
ahead and just case over the entire

485
00:19:48,520 --> 00:19:51,700
action when we case over the action we

486
00:19:51,700 --> 00:19:55,030
can on the right hand of then do a D

487
00:19:55,030 --> 00:19:57,460
structuring so we can say that if the

488
00:19:57,460 --> 00:20:01,570
action has a type property and that type

489
00:20:01,570 --> 00:20:03,670
property matches the string increment

490
00:20:03,670 --> 00:20:06,790
then what we want to do is pull out the

491
00:20:06,790 --> 00:20:09,880
property data but rename that to amount

492
00:20:09,880 --> 00:20:12,490
and now the variables that we've decided

493
00:20:12,490 --> 00:20:14,740
to find inside of that destructor

494
00:20:14,740 --> 00:20:18,070
are available to the other side of that

495
00:20:18,070 --> 00:20:19,720
arrow so we can just go ahead and say

496
00:20:19,720 --> 00:20:21,880
state plus amount which we've received

497
00:20:21,880 --> 00:20:24,159
from that destructuring this is really

498
00:20:24,159 --> 00:20:25,899
cool and we can do it with a raise as

499
00:20:25,899 --> 00:20:28,000
well so another way to do this would be

500
00:20:28,000 --> 00:20:30,610
that we could do a case statement over a

501
00:20:30,610 --> 00:20:33,490
new array and the array could have the

502
00:20:33,490 --> 00:20:35,500
type of the action and the data of the

503
00:20:35,500 --> 00:20:38,049
action and then all we would do is we

504
00:20:38,049 --> 00:20:40,809
would match against the first value

505
00:20:40,809 --> 00:20:43,240
being increment and then we would just

506
00:20:43,240 --> 00:20:44,919
put the second value into a variable

507
00:20:44,919 --> 00:20:47,049
amount we could do that the same with

508
00:20:47,049 --> 00:20:49,870
decrement and this is okay another one

509
00:20:49,870 --> 00:20:52,330
that I skipped over before but when we

510
00:20:52,330 --> 00:20:54,460
get to the bottom we're doing variable

511
00:20:54,460 --> 00:20:56,620
assignment so any variable that we put

512
00:20:56,620 --> 00:20:59,980
here will get assigned into there so the

513
00:20:59,980 --> 00:21:02,320
effect of this of this when underscore

514
00:21:02,320 --> 00:21:05,289
is the same effect as a default case so

515
00:21:05,289 --> 00:21:07,450
what we'll do is we'll say if we get to

516
00:21:07,450 --> 00:21:08,890
this point in the function and we

517
00:21:08,890 --> 00:21:10,360
haven't matched any previous case

518
00:21:10,360 --> 00:21:13,570
whatever we've put in the case we'll

519
00:21:13,570 --> 00:21:15,010
just instead be a sign into this

520
00:21:15,010 --> 00:21:17,200
variable and we'll match this instead so

521
00:21:17,200 --> 00:21:19,299
this is a really cool really easy way to

522
00:21:19,299 --> 00:21:22,000
do default arguments or to do default

523
00:21:22,000 --> 00:21:25,149
cases other places where this could

524
00:21:25,149 --> 00:21:27,309
apply could be in nodejs

525
00:21:27,309 --> 00:21:30,039
so in node a really common thing is to

526
00:21:30,039 --> 00:21:33,669
have air backs or error first call backs

527
00:21:33,669 --> 00:21:36,909
so here we could be reading a file we

528
00:21:36,909 --> 00:21:38,679
passed the first argument is the name of

529
00:21:38,679 --> 00:21:40,450
the file the second is the encoding we

530
00:21:40,450 --> 00:21:42,669
want to read out of and then inside of

531
00:21:42,669 --> 00:21:44,559
our callback we could do a case

532
00:21:44,559 --> 00:21:46,690
statement over the error that we could

533
00:21:46,690 --> 00:21:50,049
possibly get back and the contents so

534
00:21:50,049 --> 00:21:52,390
here the first step that we would do is

535
00:21:52,390 --> 00:21:55,179
we could say if the error is explicitly

536
00:21:55,179 --> 00:21:57,820
null which is idiomatically where you'll

537
00:21:57,820 --> 00:22:00,250
always get back a node then we can go

538
00:22:00,250 --> 00:22:02,110
ahead and match this case because we

539
00:22:02,110 --> 00:22:03,429
know that the error is null and

540
00:22:03,429 --> 00:22:05,080
therefore we have some data we can do

541
00:22:05,080 --> 00:22:08,140
stuff with it then in the next statement

542
00:22:08,140 --> 00:22:09,520
we could do is alright if the error

543
00:22:09,520 --> 00:22:12,130
isn't null and we have an error let's go

544
00:22:12,130 --> 00:22:13,659
ahead and pull that out and then we'll

545
00:22:13,659 --> 00:22:15,100
do some error handling something went

546
00:22:15,100 --> 00:22:16,899
wrong and then we could have another

547
00:22:16,899 --> 00:22:19,000
statement after that saying for some

548
00:22:19,000 --> 00:22:21,730
reason the error isn't no but it's also

549
00:22:21,730 --> 00:22:24,580
not true T value so something went wrong

550
00:22:24,580 --> 00:22:26,320
here I think that case would actually be

551
00:22:26,320 --> 00:22:28,540
impossible and node unless someone it

552
00:22:28,540 --> 00:22:31,330
explicitly returned false to you I guess

553
00:22:31,330 --> 00:22:34,170
is the only way that it would happen but

554
00:22:34,170 --> 00:22:36,340
yeah it's cool that basically we could

555
00:22:36,340 --> 00:22:39,100
take apart which is very idiomatic and

556
00:22:39,100 --> 00:22:41,290
node and done everywhere but handle it

557
00:22:41,290 --> 00:22:45,520
in in a really nice concise new way this

558
00:22:45,520 --> 00:22:47,350
could also be used in JSX was actually

559
00:22:47,350 --> 00:22:49,240
one of the motivating examples I don't

560
00:22:49,240 --> 00:22:50,470
know how many of you have tried to in

561
00:22:50,470 --> 00:22:53,560
JSX do any type of conditionals but you

562
00:22:53,560 --> 00:22:55,720
have to do you have to return something

563
00:22:55,720 --> 00:22:59,500
and usually you do a condition and and

564
00:22:59,500 --> 00:23:02,140
the value that you want to return and if

565
00:23:02,140 --> 00:23:03,790
you want to do turn Aries then you have

566
00:23:03,790 --> 00:23:06,400
to do the condition question mark and do

567
00:23:06,400 --> 00:23:08,470
a few of them if you have multiple cases

568
00:23:08,470 --> 00:23:10,180
there's no nice way to do that you have

569
00:23:10,180 --> 00:23:12,490
to do the nested turn Aries so here what

570
00:23:12,490 --> 00:23:13,780
it would look like is that we could have

571
00:23:13,780 --> 00:23:15,760
a component and let's say that the

572
00:23:15,760 --> 00:23:18,010
component inside of its props could

573
00:23:18,010 --> 00:23:20,320
either be in a loading state or it could

574
00:23:20,320 --> 00:23:23,050
have some errors or it could have none

575
00:23:23,050 --> 00:23:24,490
of those and then it just gives you the

576
00:23:24,490 --> 00:23:26,320
data back so instead what we would do is

577
00:23:26,320 --> 00:23:27,760
we would just do a case over the props

578
00:23:27,760 --> 00:23:30,040
and we would tell it how to handle each

579
00:23:30,040 --> 00:23:31,720
of those and what to return in each of

580
00:23:31,720 --> 00:23:34,030
those cases I encourage you to write the

581
00:23:34,030 --> 00:23:35,380
same example in JSX

582
00:23:35,380 --> 00:23:36,700
and then see what you think about this

583
00:23:36,700 --> 00:23:38,290
proposal afterwards cuz this this is

584
00:23:38,290 --> 00:23:42,820
super nice so having talked about all of

585
00:23:42,820 --> 00:23:44,410
that let's talk about where pattern

586
00:23:44,410 --> 00:23:46,000
matching is because like I mentioned

587
00:23:46,000 --> 00:23:49,330
it's not reality right now so right now

588
00:23:49,330 --> 00:23:53,620
it's a proposal in stage one of tc39 so

589
00:23:53,620 --> 00:23:55,990
stage one is that it's been evaluated

590
00:23:55,990 --> 00:23:57,550
it's been talked about and it's

591
00:23:57,550 --> 00:23:59,830
interesting enough that tc39 is

592
00:23:59,830 --> 00:24:03,100
interested in pursuing pursuing it more

593
00:24:03,100 --> 00:24:04,360
and figuring out what it would take to

594
00:24:04,360 --> 00:24:06,550
make this a part of the language so this

595
00:24:06,550 --> 00:24:08,260
means that the semantics are being

596
00:24:08,260 --> 00:24:10,060
discussed a lot more all of the edge

597
00:24:10,060 --> 00:24:11,860
cases are trying to be identified so

598
00:24:11,860 --> 00:24:13,870
that we can define how would this fit

599
00:24:13,870 --> 00:24:17,100
into the language what's really cool I

600
00:24:17,100 --> 00:24:19,390
didn't know a lot about this until

601
00:24:19,390 --> 00:24:22,750
researching this talk tc39 is a github

602
00:24:22,750 --> 00:24:25,810
organization and basically all of the

603
00:24:25,810 --> 00:24:27,970
documents that go into the language that

604
00:24:27,970 --> 00:24:31,120
all of us use are just documents on

605
00:24:31,120 --> 00:24:34,540
github so the the repository for pattern

606
00:24:34,540 --> 00:24:37,210
matching is right now just some readme

607
00:24:37,210 --> 00:24:39,250
files that you can go through you can in

608
00:24:39,250 --> 00:24:41,440
your head kind of say oh what what would

609
00:24:41,440 --> 00:24:42,279
it mean in this case

610
00:24:42,279 --> 00:24:43,509
what would it mean in this other case

611
00:24:43,509 --> 00:24:45,849
you can open up issues saying I'm not

612
00:24:45,849 --> 00:24:47,289
sure it would work the way that I would

613
00:24:47,289 --> 00:24:49,960
expect it in here what does that mean so

614
00:24:49,960 --> 00:24:51,759
this means that right now contributing

615
00:24:51,759 --> 00:24:53,649
to the proposal is really easy it's all

616
00:24:53,649 --> 00:24:56,200
just thought experiments the next step

617
00:24:56,200 --> 00:24:58,059
after this would be to figure out how to

618
00:24:58,059 --> 00:24:59,590
actually play around with it and how to

619
00:24:59,590 --> 00:25:01,809
get it in the wild so right now let's

620
00:25:01,809 --> 00:25:04,090
skip to the bottom there's this library

621
00:25:04,090 --> 00:25:07,570
called sweet j/s which enables you to do

622
00:25:07,570 --> 00:25:09,669
macros so basically to extend the

623
00:25:09,669 --> 00:25:12,179
JavaScript language however you want I

624
00:25:12,179 --> 00:25:14,139
generally don't think the macros are a

625
00:25:14,139 --> 00:25:16,570
good idea but they're fun and they

626
00:25:16,570 --> 00:25:17,950
enable you to play out with things like

627
00:25:17,950 --> 00:25:19,749
that before with this before they're

628
00:25:19,749 --> 00:25:22,479
ready so sweet J's right now has a macro

629
00:25:22,479 --> 00:25:24,009
that enables you to do this style of

630
00:25:24,009 --> 00:25:25,599
pattern matching it's actually where a

631
00:25:25,599 --> 00:25:27,129
lot of the inspiration for this proposal

632
00:25:27,129 --> 00:25:29,799
comes from there's also in the works a

633
00:25:29,799 --> 00:25:32,559
babel plugin that is going to enable you

634
00:25:32,559 --> 00:25:35,649
to use this syntax and try it out so if

635
00:25:35,649 --> 00:25:38,169
this all sounds interesting there's a

636
00:25:38,169 --> 00:25:39,549
couple different things you can do one

637
00:25:39,549 --> 00:25:42,399
is you could go to TC 39 and follow the

638
00:25:42,399 --> 00:25:44,139
pattern matching repo then whenever

639
00:25:44,139 --> 00:25:45,219
anything happens there you'll be

640
00:25:45,219 --> 00:25:48,460
notified of it too is that you can find

641
00:25:48,460 --> 00:25:50,649
the pull request for the babel plugin

642
00:25:50,649 --> 00:25:53,139
and then follow that I can tweet out a

643
00:25:53,139 --> 00:25:54,519
link to that so that if that's what

644
00:25:54,519 --> 00:25:55,809
you're interested in you can just follow

645
00:25:55,809 --> 00:25:57,279
that pull request and see what's

646
00:25:57,279 --> 00:25:59,440
happening there and the last option

647
00:25:59,440 --> 00:26:01,509
would be I'm doing another talk about

648
00:26:01,509 --> 00:26:04,149
this in Argentina in October so if you

649
00:26:04,149 --> 00:26:05,950
just follow me this is my Twitter handle

650
00:26:05,950 --> 00:26:07,989
I'll be tweeting out a lot more about it

651
00:26:07,989 --> 00:26:09,460
and I can be sure that you get all the

652
00:26:09,460 --> 00:26:10,989
information about pattern matching that

653
00:26:10,989 --> 00:26:13,509
you could want so if that sounds

654
00:26:13,509 --> 00:26:16,899
interesting I have my blog that I put

655
00:26:16,899 --> 00:26:18,969
some stuff up on the company that I work

656
00:26:18,969 --> 00:26:20,919
for testable also has a ton of great

657
00:26:20,919 --> 00:26:23,139
articles on our blog I encourage you to

658
00:26:23,139 --> 00:26:25,179
go look at both of them here's a picture

659
00:26:25,179 --> 00:26:27,399
of me and my sister during the World Cup

660
00:26:27,399 --> 00:26:28,869
wearing our Colombia jerseys because

661
00:26:28,869 --> 00:26:32,019
we're very patriotic and like I

662
00:26:32,019 --> 00:26:33,609
mentioned earlier I work for a

663
00:26:33,609 --> 00:26:36,309
consulting company called testable what

664
00:26:36,309 --> 00:26:39,099
we do is we go into other companies that

665
00:26:39,099 --> 00:26:40,960
already have their established

666
00:26:40,960 --> 00:26:43,269
development teams and we're all

667
00:26:43,269 --> 00:26:45,039
experienced engineers that can fit into

668
00:26:45,039 --> 00:26:46,929
the team and help you work on whatever

669
00:26:46,929 --> 00:26:48,279
it is you're trying to work on at the

670
00:26:48,279 --> 00:26:51,099
time our goal from doing that is to of

671
00:26:51,099 --> 00:26:52,570
course help you deliver whatever it is

672
00:26:52,570 --> 00:26:54,669
you're trying to deliver but also to do

673
00:26:54,669 --> 00:26:55,990
some coaching on how

674
00:26:55,990 --> 00:26:57,970
do remote work we're a fully remote

675
00:26:57,970 --> 00:26:59,860
company so we help companies that are

676
00:26:59,860 --> 00:27:01,390
trying to make a transition over to

677
00:27:01,390 --> 00:27:04,090
doing that we help companies with agile

678
00:27:04,090 --> 00:27:06,160
practices and with testing practices to

679
00:27:06,160 --> 00:27:07,900
help them better deliver code in the

680
00:27:07,900 --> 00:27:10,540
future and like I said we try to just be

681
00:27:10,540 --> 00:27:11,860
really nice with everyone we interact

682
00:27:11,860 --> 00:27:13,960
with so if that sounds like people you'd

683
00:27:13,960 --> 00:27:15,610
like to work with you can go ahead and

684
00:27:15,610 --> 00:27:18,220
go to test double slash contact to ask

685
00:27:18,220 --> 00:27:19,630
us what that would look like for your

686
00:27:19,630 --> 00:27:21,490
company or if that sounds like some

687
00:27:21,490 --> 00:27:23,590
place you'd like to work at I'd love to

688
00:27:23,590 --> 00:27:24,940
have you as my coworker so you can go to

689
00:27:24,940 --> 00:27:28,000
test double comm /join thank you all

690
00:27:28,000 --> 00:27:29,290
very much for joining I hope you have a

691
00:27:29,290 --> 00:27:30,640
great time at the rest of this

692
00:27:30,640 --> 00:27:32,770
conference and come say hi to me if you

693
00:27:32,770 --> 00:27:34,310
see me around Thanks

