1
00:00:31,930 --> 00:00:36,440

yeah so I realized that JS conf was sold

2
00:00:36,440 --> 00:00:38,750
out and I panicked and I thought oh crap

3
00:00:38,750 --> 00:00:40,160
the only way I'm actually going to get

4
00:00:40,160 --> 00:00:42,559
to go it's I've got to propose some kind

5
00:00:42,559 --> 00:00:44,930
of talk and in all my panic I came up

6
00:00:44,930 --> 00:00:48,050
with the most ridiculously crap name for

7
00:00:48,050 --> 00:00:51,739
a talk ever so I'm gonna have to change

8
00:00:51,739 --> 00:00:54,019
that I want something really respectable

9
00:00:54,019 --> 00:00:55,909
something that might get me a book deal

10
00:00:55,909 --> 00:00:57,470
you know something really solid so

11
00:00:57,470 --> 00:01:00,409
instead of pimp your j/s library the new

12
00:01:00,409 --> 00:01:04,100
name for the talk is a designing non

13
00:01:04,100 --> 00:01:09,920
shit api's with javascript so i'm gonna

14
00:01:09,920 --> 00:01:13,759
start at the beginning in the beginning

15
00:01:13,759 --> 00:01:16,009
I say the beginning the real beginning

16
00:01:16,009 --> 00:01:20,479
of JavaScript it was all Netscape 4.6 ie

17
00:01:20,479 --> 00:01:22,970
4.5 format you know it was Babylon so

18
00:01:22,970 --> 00:01:25,340
let's not ignore that whole stage and

19
00:01:25,340 --> 00:01:29,299
start when things actually became where

20
00:01:29,299 --> 00:01:31,070
the community started to organize itself

21
00:01:31,070 --> 00:01:33,439
it started to organize itself around

22
00:01:33,439 --> 00:01:35,299
these sort of three main libraries

23
00:01:35,299 --> 00:01:38,450
prototype dojo and one that is still

24
00:01:38,450 --> 00:01:40,790
around but does it get mentioned very

25
00:01:40,790 --> 00:01:43,580
often machi kit they all had their

26
00:01:43,580 --> 00:01:46,490
strengths and weaknesses prototype was

27
00:01:46,490 --> 00:01:47,890
probably the most popular at least

28
00:01:47,890 --> 00:01:53,450
around this time about 2004-2005 it was

29
00:01:53,450 --> 00:01:56,479
good general purpose library it shipped

30
00:01:56,479 --> 00:01:59,780
with Ruby on Rails dojo dojo have been

31
00:01:59,780 --> 00:02:01,400
around in sort of several forms for a

32
00:02:01,400 --> 00:02:05,150
really long time by that point so it it

33
00:02:05,150 --> 00:02:07,549
probably still is but was then the most

34
00:02:07,549 --> 00:02:08,869
fully featured and probably most

35
00:02:08,869 --> 00:02:10,879
advanced in terms of functionality and

36
00:02:10,879 --> 00:02:13,250
the market just had some really

37
00:02:13,250 --> 00:02:16,220
interesting ideas such as the concept of

38
00:02:16,220 --> 00:02:18,920
deferred switch is only just made it

39
00:02:18,920 --> 00:02:24,230
into jquery now but then this newcomer

40
00:02:24,230 --> 00:02:25,819
came along and I remember sort of you

41
00:02:25,819 --> 00:02:28,069
know that this turned up on a Jackson

42
00:02:28,069 --> 00:02:31,519
one today one day click through and it

43
00:02:31,519 --> 00:02:34,010
was a really simple site and sort of

44
00:02:34,010 --> 00:02:36,080
right front and center was with this

45
00:02:36,080 --> 00:02:39,799
code example and I think I'm probably

46
00:02:39,799 --> 00:02:41,329
not the only person in this room that as

47
00:02:41,329 --> 00:02:43,790
soon as they saw this it kind of changed

48
00:02:43,790 --> 00:02:44,880
things for them

49
00:02:44,880 --> 00:02:47,490
and I think you know we all know what

50
00:02:47,490 --> 00:02:50,640
happened next it went from zero to

51
00:02:50,640 --> 00:02:52,320
everything has had this sort of

52
00:02:52,320 --> 00:02:55,350
skyrocketing growth and almost has got

53
00:02:55,350 --> 00:02:57,780
to the point now where it's almost the

54
00:02:57,780 --> 00:03:01,560
default choice of library fur bracelet

55
00:03:01,560 --> 00:03:04,830
browser programming so what I want to

56
00:03:04,830 --> 00:03:07,700
look at is sort of why did that happen

57
00:03:07,700 --> 00:03:14,580
well at least initially jquery from the

58
00:03:14,580 --> 00:03:18,000
the internals was was not actually that

59
00:03:18,000 --> 00:03:22,200
in that sort of important it was it was

60
00:03:22,200 --> 00:03:24,150
a lot of a cobbled together thing so it

61
00:03:24,150 --> 00:03:27,750
had Dean Edwards event utilities it has

62
00:03:27,750 --> 00:03:30,840
a Simon Wilson selector engine and a

63
00:03:30,840 --> 00:03:32,070
load of other stuff that was just sort

64
00:03:32,070 --> 00:03:35,130
of cobbled together but what made it

65
00:03:35,130 --> 00:03:37,080
really really important and what was

66
00:03:37,080 --> 00:03:38,970
responsible for the explosive growth is

67
00:03:38,970 --> 00:03:40,590
that John had created this amazing

68
00:03:40,590 --> 00:03:42,960
interface and you could just imagine it

69
00:03:42,960 --> 00:03:44,340
when he was designing this he didn't

70
00:03:44,340 --> 00:03:46,920
design what it was going to do he

71
00:03:46,920 --> 00:03:48,420
designed how he was going to do it

72
00:03:48,420 --> 00:03:50,550
before starting you even writing the

73
00:03:50,550 --> 00:03:58,140
code and I've sort of want to sort of

74
00:03:58,140 --> 00:04:01,440
make you think about that that the fact

75
00:04:01,440 --> 00:04:04,230
there as programmers we're all designers

76
00:04:04,230 --> 00:04:06,000
where designers of the API of the code

77
00:04:06,000 --> 00:04:08,670
that we write and it's one of them most

78
00:04:08,670 --> 00:04:10,140
important things that we need to think

79
00:04:10,140 --> 00:04:12,930
about it's what John thought about as a

80
00:04:12,930 --> 00:04:15,870
number one priority and it's what made

81
00:04:15,870 --> 00:04:18,239
jquery and several other pieces of

82
00:04:18,239 --> 00:04:20,700
software really really successful and we

83
00:04:20,700 --> 00:04:22,230
should be thinking about this every time

84
00:04:22,230 --> 00:04:26,640
we write some code there's a three

85
00:04:26,640 --> 00:04:27,990
things I'm going to discuss which I

86
00:04:27,990 --> 00:04:30,950
think make really good usable api's

87
00:04:30,950 --> 00:04:33,750
predictability simplicity and

88
00:04:33,750 --> 00:04:37,080
flexibility so we'll dig in to the first

89
00:04:37,080 --> 00:04:41,040
one predictability when I'm thinking

90
00:04:41,040 --> 00:04:44,190
about this I think of you know when when

91
00:04:44,190 --> 00:04:46,380
you're a kid and it was Christmas Day

92
00:04:46,380 --> 00:04:49,920
you were running into the lounge to get

93
00:04:49,920 --> 00:04:53,070
your presence rip open the box it's it's

94
00:04:53,070 --> 00:04:54,720
like a transformer that you've always

95
00:04:54,720 --> 00:04:57,510
wanted rip open the box really excited

96
00:04:57,510 --> 00:04:58,770
to get it out and stop playing

97
00:04:58,770 --> 00:05:00,330
with it but what you're actually greeted

98
00:05:00,330 --> 00:05:03,720
with is a very complex looking manual

99
00:05:03,720 --> 00:05:05,610
and stuff in loads of different parts

100
00:05:05,610 --> 00:05:08,159
and you can't play with immediately so

101
00:05:08,159 --> 00:05:10,770
I'm sure many of you alike like me when

102
00:05:10,770 --> 00:05:12,710
I was that age I just immediately

103
00:05:12,710 --> 00:05:14,940
thought I don't know what to do with

104
00:05:14,940 --> 00:05:17,580
this light handed it over to my dad made

105
00:05:17,580 --> 00:05:19,530
him work it out will I ran off to the

106
00:05:19,530 --> 00:05:21,150
other side of the room with the box and

107
00:05:21,150 --> 00:05:25,349
made a robot outfit and I think it's

108
00:05:25,349 --> 00:05:27,000
developers when we're actually sort of

109
00:05:27,000 --> 00:05:30,840
choosing to solve a higher-order problem

110
00:05:30,840 --> 00:05:33,120
we don't want to have to think about how

111
00:05:33,120 --> 00:05:35,130
the smaller things work which is why we

112
00:05:35,130 --> 00:05:38,759
go seeking libraries and we want to be

113
00:05:38,759 --> 00:05:40,050
able to make our libraries as

114
00:05:40,050 --> 00:05:42,289
predictable as possible so as soon as

115
00:05:42,289 --> 00:05:44,789
you the developer light looks at the

116
00:05:44,789 --> 00:05:47,370
code and they can almost infer how it

117
00:05:47,370 --> 00:05:49,259
works rather than have to spend all of

118
00:05:49,259 --> 00:05:50,340
this time digging through the

119
00:05:50,340 --> 00:05:54,630
documentation so how do we get to this

120
00:05:54,630 --> 00:05:58,409
sort of level of being predictable well

121
00:05:58,409 --> 00:06:00,360
you need to think about your audience

122
00:06:00,360 --> 00:06:05,400
like you do with any design task the

123
00:06:05,400 --> 00:06:08,699
audience in our case is really easy the

124
00:06:08,699 --> 00:06:10,889
we know the audience really well it's

125
00:06:10,889 --> 00:06:14,039
all the JavaScript programmers and that

126
00:06:14,039 --> 00:06:18,449
means we can infer a lot about what the

127
00:06:18,449 --> 00:06:20,639
our audience knows about and we can use

128
00:06:20,639 --> 00:06:23,340
those Prevention's within a code to kind

129
00:06:23,340 --> 00:06:25,979
of add that familiar familiarity the

130
00:06:25,979 --> 00:06:29,039
first port of call you can go to is is

131
00:06:29,039 --> 00:06:32,039
the actual conventions and that exists

132
00:06:32,039 --> 00:06:33,990
within the library the language itself

133
00:06:33,990 --> 00:06:38,130
and the standard library so you can if

134
00:06:38,130 --> 00:06:40,409
if we're writing a JavaScript library

135
00:06:40,409 --> 00:06:42,449
you can pretty much always be sure that

136
00:06:42,449 --> 00:06:45,180
this person knows JavaScript and knows

137
00:06:45,180 --> 00:06:47,639
others work with the standard library so

138
00:06:47,639 --> 00:06:51,029
definitely you know stick with with that

139
00:06:51,029 --> 00:06:53,909
and just get this bonus predictability

140
00:06:53,909 --> 00:06:59,729
is whoo-hoo snake cases their code in

141
00:06:59,729 --> 00:07:03,930
the room does anyone know that's good I

142
00:07:03,930 --> 00:07:05,880
was going to ask the note the person

143
00:07:05,880 --> 00:07:10,469
next to you to our slappy I think you

144
00:07:10,469 --> 00:07:12,520
see a lot of code front

145
00:07:12,520 --> 00:07:16,199
time that doesn't use camelcase

146
00:07:16,199 --> 00:07:18,310
JavaScript should always be camelcase

147
00:07:18,310 --> 00:07:21,490
the standard library is in cal is camel

148
00:07:21,490 --> 00:07:23,470
cased it's definitely something that

149
00:07:23,470 --> 00:07:25,690
there should be no debate about at this

150
00:07:25,690 --> 00:07:29,379
point so first off really easy don't

151
00:07:29,379 --> 00:07:32,979
deviate from camel case and also adopt

152
00:07:32,979 --> 00:07:34,300
all of the other conventions that come

153
00:07:34,300 --> 00:07:36,729
from the standard library constrictors

154
00:07:36,729 --> 00:07:41,080
should start with uppercase and and so

155
00:07:41,080 --> 00:07:46,180
on now one thing that you sort of might

156
00:07:46,180 --> 00:07:47,800
think would be a good idea to sort of

157
00:07:47,800 --> 00:07:50,440
gain a sort of level of predictability

158
00:07:50,440 --> 00:07:52,870
and probably is good from this point of

159
00:07:52,870 --> 00:07:54,819
view is you might want to actually start

160
00:07:54,819 --> 00:07:56,590
by kind of poly filling missing

161
00:07:56,590 --> 00:07:57,880
functionality like we heard about

162
00:07:57,880 --> 00:08:03,220
yesterday i I'm not outright against

163
00:08:03,220 --> 00:08:05,469
that but all I need would like say that

164
00:08:05,469 --> 00:08:08,469
is be careful with that firstly for the

165
00:08:08,469 --> 00:08:12,460
reasons that Andrew pointed out your

166
00:08:12,460 --> 00:08:14,050
little library that solves a certain

167
00:08:14,050 --> 00:08:16,500
problem isn't the right place to fix

168
00:08:16,500 --> 00:08:20,110
array for each there should be if it's

169
00:08:20,110 --> 00:08:21,190
going to be done anywhere it should be a

170
00:08:21,190 --> 00:08:25,960
lower level library but also I think you

171
00:08:25,960 --> 00:08:27,580
you start to get into the situation

172
00:08:27,580 --> 00:08:29,800
where you can surprise developers it's

173
00:08:29,800 --> 00:08:31,890
pretty easy to write what you think is a

174
00:08:31,890 --> 00:08:34,029
polyfill that fixes for missing

175
00:08:34,029 --> 00:08:36,279
functionality but it works in quite a

176
00:08:36,279 --> 00:08:38,169
different way from the real

177
00:08:38,169 --> 00:08:39,659
functionality that your poly filling

178
00:08:39,659 --> 00:08:42,729
even in like a small way for instance if

179
00:08:42,729 --> 00:08:45,490
the native thing will return like a live

180
00:08:45,490 --> 00:08:48,399
node list that where new nodes will

181
00:08:48,399 --> 00:08:50,680
appear in it and then your polyfill just

182
00:08:50,680 --> 00:08:52,750
returns an array you've got that

183
00:08:52,750 --> 00:08:54,070
slightly different behavior which

184
00:08:54,070 --> 00:08:56,890
introduces a whole level of

185
00:08:56,890 --> 00:09:00,850
unpredictability another place you can

186
00:09:00,850 --> 00:09:03,100
go to sort of seat conventions you can

187
00:09:03,100 --> 00:09:07,120
rely upon is is popular libraries talked

188
00:09:07,120 --> 00:09:09,520
before about how how ubiquitous jQuery

189
00:09:09,520 --> 00:09:12,399
is I think even if you're not a jQuery

190
00:09:12,399 --> 00:09:15,730
guy you can almost you you're familiar

191
00:09:15,730 --> 00:09:18,550
with how it works and so we can we can

192
00:09:18,550 --> 00:09:21,550
use that and we can use conventions from

193
00:09:21,550 --> 00:09:23,140
other popular libraries depending on the

194
00:09:23,140 --> 00:09:25,660
on the domain your end so

195
00:09:25,660 --> 00:09:27,700
for instance I think a really nice

196
00:09:27,700 --> 00:09:30,060
example of this is is Raphael Raphael

197
00:09:30,060 --> 00:09:33,250
has got really popular really quickly it

198
00:09:33,250 --> 00:09:36,580
it's and it's just incredibly easy to

199
00:09:36,580 --> 00:09:38,230
use you you're you're sort of they're

200
00:09:38,230 --> 00:09:40,390
doing stuff with it within minutes of

201
00:09:40,390 --> 00:09:42,370
just arriving on the site and seen in

202
00:09:42,370 --> 00:09:44,800
one or two code examples one of the nice

203
00:09:44,800 --> 00:09:47,380
things that is it that it does to um

204
00:09:47,380 --> 00:09:49,900
kind of add this predictability is it

205
00:09:49,900 --> 00:09:51,550
doesn't try to make new names up for

206
00:09:51,550 --> 00:09:53,290
things so if you want to set an

207
00:09:53,290 --> 00:09:55,810
attribute then it's got a very similar

208
00:09:55,810 --> 00:09:58,090
method to jQuery it just acts exactly

209
00:09:58,090 --> 00:10:00,520
like jQuery so if you're a jQuery

210
00:10:00,520 --> 00:10:02,560
programmer you don't ever have to look

211
00:10:02,560 --> 00:10:04,870
this method up it's just the same as

212
00:10:04,870 --> 00:10:06,940
what you already know and similarly it

213
00:10:06,940 --> 00:10:10,120
adds a load of others that have adopt

214
00:10:10,120 --> 00:10:13,150
jQuery conventions and it's just sort of

215
00:10:13,150 --> 00:10:15,970
mess less mental overhead for the

216
00:10:15,970 --> 00:10:18,670
programmer we have show and hide and

217
00:10:18,670 --> 00:10:21,910
various other things in there another

218
00:10:21,910 --> 00:10:24,760
area you can go to is is the problem

219
00:10:24,760 --> 00:10:26,470
domain if you try to tackle a certain

220
00:10:26,470 --> 00:10:29,380
problem or your library is dealing with

221
00:10:29,380 --> 00:10:33,480
a certain thing like HTTP or maybe CSS

222
00:10:33,480 --> 00:10:36,910
you you can you can basically model your

223
00:10:36,910 --> 00:10:38,920
API around that and use some of the

224
00:10:38,920 --> 00:10:40,870
conventions from it and get this kind of

225
00:10:40,870 --> 00:10:43,630
added level of predictably really nice

226
00:10:43,630 --> 00:10:48,520
example of that is is the jquery CSS

227
00:10:48,520 --> 00:10:51,450
manipulation so you can see here that

228
00:10:51,450 --> 00:10:54,340
there's such a lot of large amount of

229
00:10:54,340 --> 00:10:57,370
sort of mapping between how you would

230
00:10:57,370 --> 00:11:00,880
manipulate jquery CSS and jquery is how

231
00:11:00,880 --> 00:11:02,740
you would actually write a CSS

232
00:11:02,740 --> 00:11:05,200
decoration that you're never going to

233
00:11:05,200 --> 00:11:07,210
have to be looked at the documents to

234
00:11:07,210 --> 00:11:09,070
work out how to do this you you almost

235
00:11:09,070 --> 00:11:14,620
in infer how that works so to start

236
00:11:14,620 --> 00:11:16,120
putting a few these ideas into practice

237
00:11:16,120 --> 00:11:21,760
will start an example the example is

238
00:11:21,760 --> 00:11:23,890
going to be a dom builder it's kind of

239
00:11:23,890 --> 00:11:25,750
an interesting problem to tackle from an

240
00:11:25,750 --> 00:11:28,990
API point of view because everything

241
00:11:28,990 --> 00:11:32,230
that you get given in JavaScript to do

242
00:11:32,230 --> 00:11:33,550
this is pretty raw you've you've

243
00:11:33,550 --> 00:11:36,160
obviously got the inner HTML way that's

244
00:11:36,160 --> 00:11:38,200
kind of pretty ugly but especially when

245
00:11:38,200 --> 00:11:39,430
you start interpolating

246
00:11:39,430 --> 00:11:41,230
variables because JavaScript's not that

247
00:11:41,230 --> 00:11:43,690
good at working with strings so you just

248
00:11:43,690 --> 00:11:45,399
end up with a massive pluses and quotes

249
00:11:45,399 --> 00:11:47,620
and then even worse you've got the Dom

250
00:11:47,620 --> 00:11:49,899
API which you can barely do anything

251
00:11:49,899 --> 00:11:52,450
useful with in its raw form like this so

252
00:11:52,450 --> 00:11:54,850
it's definitely something that needs

253
00:11:54,850 --> 00:11:57,279
masking so we'll try and create a nice

254
00:11:57,279 --> 00:12:01,450
API around creating Dom nodes so the

255
00:12:01,450 --> 00:12:04,450
first thing to do is we'll just create

256
00:12:04,450 --> 00:12:07,120
the nuts and bolts of this thing will

257
00:12:07,120 --> 00:12:09,850
have this function called element takes

258
00:12:09,850 --> 00:12:11,920
name it takes an object with the

259
00:12:11,920 --> 00:12:14,440
attributes for that for that node and it

260
00:12:14,440 --> 00:12:16,750
takes an array of children and does the

261
00:12:16,750 --> 00:12:20,200
very basic thing obviously there's a lot

262
00:12:20,200 --> 00:12:21,880
of optimizations you could do on this

263
00:12:21,880 --> 00:12:23,920
but this is just you know simplest

264
00:12:23,920 --> 00:12:26,230
possible for clarity it just creates

265
00:12:26,230 --> 00:12:28,510
that note sets the attributes append

266
00:12:28,510 --> 00:12:29,950
trails of children and then return to

267
00:12:29,950 --> 00:12:31,990
that node so if you want to use that

268
00:12:31,990 --> 00:12:35,440
code this is that after our first pass

269
00:12:35,440 --> 00:12:36,880
it looks something like this I've tried

270
00:12:36,880 --> 00:12:39,820
to kind of creatively indent it to make

271
00:12:39,820 --> 00:12:42,820
it make a little bit of sense but as you

272
00:12:42,820 --> 00:12:44,410
can see in its in its raw state it

273
00:12:44,410 --> 00:12:46,930
doesn't really match to our to our

274
00:12:46,930 --> 00:12:49,330
problem too many doesn't look like HTML

275
00:12:49,330 --> 00:12:51,130
let's like try and make it look like

276
00:12:51,130 --> 00:12:56,020
HTML so thinking about the API come up

277
00:12:56,020 --> 00:12:58,540
with something like this where instead

278
00:12:58,540 --> 00:13:01,420
of having a single method called element

279
00:13:01,420 --> 00:13:04,870
will create a method for each element in

280
00:13:04,870 --> 00:13:09,000
the HTML spec so we can do HTML form and

281
00:13:09,000 --> 00:13:11,560
you can already see that if we do that

282
00:13:11,560 --> 00:13:15,220
then we've we're moving a lot closer to

283
00:13:15,220 --> 00:13:18,700
it actually looking like something that

284
00:13:18,700 --> 00:13:21,790
like an HTML document so how do we do

285
00:13:21,790 --> 00:13:24,520
that well we can basically sort of layer

286
00:13:24,520 --> 00:13:27,520
a little bit of of job of a sort of

287
00:13:27,520 --> 00:13:29,890
intervene to face veneer on top of our

288
00:13:29,890 --> 00:13:33,010
our basic element function and this is

289
00:13:33,010 --> 00:13:34,390
how you do it i don't think it's worth

290
00:13:34,390 --> 00:13:36,610
going through the code and everything

291
00:13:36,610 --> 00:13:40,149
will be on SlideShare but essentially we

292
00:13:40,149 --> 00:13:42,579
create a function for all of the for

293
00:13:42,579 --> 00:13:45,790
every tag and then it just creates a

294
00:13:45,790 --> 00:13:48,400
function that eventually calls HTML

295
00:13:48,400 --> 00:13:51,190
element and we've got like a little bit

296
00:13:51,190 --> 00:13:53,350
better there

297
00:13:53,350 --> 00:13:59,950
okay so next up sim simplicity now from

298
00:13:59,950 --> 00:14:01,570
from the sort of web design world there

299
00:14:01,570 --> 00:14:04,930
was a really sort of classic book that

300
00:14:04,930 --> 00:14:07,300
I'm sure most of you heard of many of

301
00:14:07,300 --> 00:14:09,610
you will have read called don't make me

302
00:14:09,610 --> 00:14:14,080
think bye bye Steve Krug it's actually

303
00:14:14,080 --> 00:14:15,940
about you know creating interfaces for

304
00:14:15,940 --> 00:14:17,950
the UI but I think the basic concepts in

305
00:14:17,950 --> 00:14:20,800
it you can directly apply to to API

306
00:14:20,800 --> 00:14:25,660
design the the basic crux of it is don't

307
00:14:25,660 --> 00:14:27,610
make the user think about anything more

308
00:14:27,610 --> 00:14:29,650
than they necessarily have to do to get

309
00:14:29,650 --> 00:14:31,750
this solution don't don't don't make

310
00:14:31,750 --> 00:14:33,160
them make decisions that they don't need

311
00:14:33,160 --> 00:14:36,400
to make and and don't confuse them with

312
00:14:36,400 --> 00:14:38,830
things that don't make sense to actually

313
00:14:38,830 --> 00:14:43,180
solving the problem in hand and the

314
00:14:43,180 --> 00:14:44,920
problem with this is it if if you do

315
00:14:44,920 --> 00:14:48,100
present all of these options to your API

316
00:14:48,100 --> 00:14:49,930
all of the time you end up with like a

317
00:14:49,930 --> 00:14:53,020
very very big very complex and very hard

318
00:14:53,020 --> 00:14:56,950
to remember API and you know you at you

319
00:14:56,950 --> 00:15:00,070
end up forcing your users to like read

320
00:15:00,070 --> 00:15:01,930
the mail over and over and over again

321
00:15:01,930 --> 00:15:03,640
because it you've created something

322
00:15:03,640 --> 00:15:06,400
which is too big to fit in a programmers

323
00:15:06,400 --> 00:15:09,910
brain so we want to avoid this and so

324
00:15:09,910 --> 00:15:12,520
that the time-honored way of doing this

325
00:15:12,520 --> 00:15:14,470
is by the use of sensible defaults you

326
00:15:14,470 --> 00:15:18,160
just decide on things that need to be

327
00:15:18,160 --> 00:15:22,330
optional and just if if if an argument

328
00:15:22,330 --> 00:15:24,220
is the same way ninety percent of the

329
00:15:24,220 --> 00:15:28,240
time they just don't show that option to

330
00:15:28,240 --> 00:15:29,710
the programmer at all unless they

331
00:15:29,710 --> 00:15:32,070
actually need it this is obviously been

332
00:15:32,070 --> 00:15:36,520
exemplified buyer bye-bye rails that as

333
00:15:36,520 --> 00:15:38,980
a had a long history of sensible

334
00:15:38,980 --> 00:15:48,520
defaults um something I really need some

335
00:15:48,520 --> 00:15:51,870
sensible defaults is this particularly

336
00:15:51,870 --> 00:15:56,500
laughably bad method from the the Dom

337
00:15:56,500 --> 00:15:59,680
API and it's just to create a mouse

338
00:15:59,680 --> 00:16:01,450
event that you can then dispatch on a

339
00:16:01,450 --> 00:16:03,130
certain element but look at that

340
00:16:03,130 --> 00:16:05,320
argument list how would you ever

341
00:16:05,320 --> 00:16:07,329
remember that if you ever want to call

342
00:16:07,329 --> 00:16:09,519
function it's basically mandatory for

343
00:16:09,519 --> 00:16:10,920
you to go and look at this page

344
00:16:10,920 --> 00:16:13,179
similarly if once you've used that and

345
00:16:13,179 --> 00:16:14,589
you have this thing lying around in your

346
00:16:14,589 --> 00:16:17,350
code no one will know what the hell that

347
00:16:17,350 --> 00:16:21,910
stuff means zeros forces nulls in some

348
00:16:21,910 --> 00:16:24,639
kind of arbitrary order that could

349
00:16:24,639 --> 00:16:26,470
definitely do with tidying up we don't

350
00:16:26,470 --> 00:16:28,389
need to make the have the design to make

351
00:16:28,389 --> 00:16:34,269
those decisions and another sort of less

352
00:16:34,269 --> 00:16:36,279
extreme example but also annoying and

353
00:16:36,279 --> 00:16:38,649
also from the Dom API is the add event

354
00:16:38,649 --> 00:16:41,139
listener we use it all the time or poet

355
00:16:41,139 --> 00:16:44,170
well I end up doing sex I don't after

356
00:16:44,170 --> 00:16:45,970
you can't use libraries most of the time

357
00:16:45,970 --> 00:16:49,209
but it's it's it's fairly

358
00:16:49,209 --> 00:16:52,290
straightforward you have the type of a

359
00:16:52,290 --> 00:16:54,819
type of event then you have a handler

360
00:16:54,819 --> 00:16:56,949
which is your function and then you have

361
00:16:56,949 --> 00:16:58,540
this hanging bulleen on the end and

362
00:16:58,540 --> 00:17:00,819
which tells the that which says whether

363
00:17:00,819 --> 00:17:02,739
you want to use capture or not the other

364
00:17:02,739 --> 00:17:06,279
thing is is 99.9 percent of the time you

365
00:17:06,279 --> 00:17:09,669
don't want to use capture so why do I

366
00:17:09,669 --> 00:17:11,169
have to worry about that and put false

367
00:17:11,169 --> 00:17:12,760
on the end if you actually emit that

368
00:17:12,760 --> 00:17:14,470
false from the end then you get an error

369
00:17:14,470 --> 00:17:17,829
why don't we just like only let people

370
00:17:17,829 --> 00:17:20,079
specify true on the end if they need

371
00:17:20,079 --> 00:17:21,880
capture and then otherwise don't worry

372
00:17:21,880 --> 00:17:27,279
about it so let's go back to this really

373
00:17:27,279 --> 00:17:29,169
hideous example what would what could we

374
00:17:29,169 --> 00:17:31,240
do to if we were writing the Dom API

375
00:17:31,240 --> 00:17:32,919
what could we do to make this in any way

376
00:17:32,919 --> 00:17:36,789
sensible well sort of well adopted thing

377
00:17:36,789 --> 00:17:40,659
to do is use optional hat hashes foot

378
00:17:40,659 --> 00:17:42,669
for the optional arguments there's

379
00:17:42,669 --> 00:17:43,840
definitely a few things that we need

380
00:17:43,840 --> 00:17:45,940
there we need the event type but then

381
00:17:45,940 --> 00:17:47,950
probably from that point on all of the

382
00:17:47,950 --> 00:17:50,740
other arguments for keyboard modifiers

383
00:17:50,740 --> 00:17:53,019
and whether it where it whether it's

384
00:17:53,019 --> 00:17:55,059
bubbles whether it's cancellable and so

385
00:17:55,059 --> 00:17:57,789
on are all things that we don't really

386
00:17:57,789 --> 00:18:00,039
need to worry about and for most cases

387
00:18:00,039 --> 00:18:02,110
so why don't we wrap all of those up

388
00:18:02,110 --> 00:18:05,049
into a hash so we'll have something like

389
00:18:05,049 --> 00:18:08,409
this where the the event type is

390
00:18:08,409 --> 00:18:09,880
required so that's just a normal

391
00:18:09,880 --> 00:18:12,309
argument and then put everything else in

392
00:18:12,309 --> 00:18:16,450
cider and yeah options hash and this is

393
00:18:16,450 --> 00:18:18,309
something that you know like its

394
00:18:18,309 --> 00:18:19,879
bread-and-butter stuff

395
00:18:19,879 --> 00:18:24,529
an interesting article came out the

396
00:18:24,529 --> 00:18:26,749
other day Rebecca Murphy rate which is

397
00:18:26,749 --> 00:18:30,709
really well timed for me she sort of

398
00:18:30,709 --> 00:18:33,919
asked around on Twitter about people's

399
00:18:33,919 --> 00:18:36,289
opinions on where up when options hashes

400
00:18:36,289 --> 00:18:37,729
were appropriate and when they weren't

401
00:18:37,729 --> 00:18:40,309
and wrote up a really good article on it

402
00:18:40,309 --> 00:18:42,889
so it kind of meant that I don't really

403
00:18:42,889 --> 00:18:44,509
need to talk about it but this article

404
00:18:44,509 --> 00:18:46,639
is a great read for that and it's worth

405
00:18:46,639 --> 00:18:48,649
just reading it through and thinking

406
00:18:48,649 --> 00:18:51,019
about it and and you know formulating an

407
00:18:51,019 --> 00:18:55,699
opinion on it next up function calls

408
00:18:55,699 --> 00:18:57,499
should read well if you if you're trying

409
00:18:57,499 --> 00:18:58,819
to solve a problem you normally have

410
00:18:58,819 --> 00:19:00,499
some kind of sentence in your head that

411
00:19:00,499 --> 00:19:02,659
describes what you want to do for

412
00:19:02,659 --> 00:19:04,969
instance I want to replace this node

413
00:19:04,969 --> 00:19:08,389
with another node so when you're writing

414
00:19:08,389 --> 00:19:10,879
your API is try and you can gain some

415
00:19:10,879 --> 00:19:13,099
sort of memorability and simplicity by

416
00:19:13,099 --> 00:19:15,379
trying to map that I'm not really

417
00:19:15,379 --> 00:19:18,139
talking about going over the top and you

418
00:19:18,139 --> 00:19:21,709
know going COBOL an applescript style

419
00:19:21,709 --> 00:19:23,239
and making it read like English but

420
00:19:23,239 --> 00:19:25,039
there's definitely some gains you can

421
00:19:25,039 --> 00:19:28,339
get so here's three examples of sort of

422
00:19:28,339 --> 00:19:33,199
doing the same thing wait and to me it's

423
00:19:33,199 --> 00:19:35,329
fairly obvious which of the one which

424
00:19:35,329 --> 00:19:37,519
one is the most memorable here we've got

425
00:19:37,519 --> 00:19:39,979
the top one which is from the Dom API

426
00:19:39,979 --> 00:19:42,559
again I trying to pick examples that

427
00:19:42,559 --> 00:19:44,299
from the Dom API because I'm assuming

428
00:19:44,299 --> 00:19:47,179
that no one's here who worked on that to

429
00:19:47,179 --> 00:19:52,399
get offended but so the Dom API has

430
00:19:52,399 --> 00:19:55,399
probably the least intuitive thing here

431
00:19:55,399 --> 00:19:57,559
that probably annoys a lot of us on a

432
00:19:57,559 --> 00:20:00,349
regular basis where you can't there

433
00:20:00,349 --> 00:20:01,789
isn't a replace method on the note

434
00:20:01,789 --> 00:20:04,069
itself you have to go to its parent node

435
00:20:04,069 --> 00:20:08,029
and then you have to pass in the new

436
00:20:08,029 --> 00:20:09,949
node and then the old node but really

437
00:20:09,949 --> 00:20:11,659
what you're thinking in your head is I

438
00:20:11,659 --> 00:20:13,909
want to replace old node with new nodes

439
00:20:13,909 --> 00:20:16,159
so the method order there is the thing

440
00:20:16,159 --> 00:20:19,029
that really gets me and it's just

441
00:20:19,029 --> 00:20:22,729
counterintuitive and which leads me to

442
00:20:22,729 --> 00:20:24,619
look at the documentation for that

443
00:20:24,619 --> 00:20:26,539
method for more times i got i kind of

444
00:20:26,539 --> 00:20:27,919
end up double bluffing myself and

445
00:20:27,919 --> 00:20:30,529
thinking I know that it's the wrong way

446
00:20:30,529 --> 00:20:32,449
round to how I think it should be but

447
00:20:32,449 --> 00:20:33,799
then I get used to it

448
00:20:33,799 --> 00:20:35,360
being that way around and then I think

449
00:20:35,360 --> 00:20:38,659
it's what about i'm getting a mess dojo

450
00:20:38,659 --> 00:20:42,289
is kind of got the middle ground it's in

451
00:20:42,289 --> 00:20:45,379
dojo style it's the way that you achieve

452
00:20:45,379 --> 00:20:47,090
these kind of things is a sort of much

453
00:20:47,090 --> 00:20:49,489
more generic powerful method called

454
00:20:49,489 --> 00:20:53,360
place that enables you to place a new

455
00:20:53,360 --> 00:20:56,659
element in relation to reference element

456
00:20:56,659 --> 00:21:00,499
in all kinds of different ways so it

457
00:21:00,499 --> 00:21:03,470
again is like I would say that the place

458
00:21:03,470 --> 00:21:05,450
of method is a little bit due to generic

459
00:21:05,450 --> 00:21:08,869
to be to be easily noticeable you're

460
00:21:08,869 --> 00:21:10,279
thinking replacing your head and then

461
00:21:10,279 --> 00:21:11,779
you have to find place but i'm sure

462
00:21:11,779 --> 00:21:13,690
that's that's not too much of a problem

463
00:21:13,690 --> 00:21:17,149
again though it's suffering from an

464
00:21:17,149 --> 00:21:19,700
unusual sort of argument ordering here

465
00:21:19,700 --> 00:21:21,919
it's new node and all node again and

466
00:21:21,919 --> 00:21:24,109
then the last argument which is the verb

467
00:21:24,109 --> 00:21:27,529
is right at the end so it doesn't read

468
00:21:27,529 --> 00:21:30,080
anything like replace old mode with new

469
00:21:30,080 --> 00:21:33,080
note it's kind of in reverse and then

470
00:21:33,080 --> 00:21:35,720
jquery obviously i think got this really

471
00:21:35,720 --> 00:21:37,639
work right because it just reads so well

472
00:21:37,639 --> 00:21:41,059
old node replaced with new note it's you

473
00:21:41,059 --> 00:21:42,739
just get that simplicity in

474
00:21:42,739 --> 00:21:46,279
predictability another thing you can try

475
00:21:46,279 --> 00:21:49,879
and this is possibly on the side of

476
00:21:49,879 --> 00:21:52,850
dangerous but works in some cases is try

477
00:21:52,850 --> 00:21:55,039
and mask a little bit of the complexity

478
00:21:55,039 --> 00:21:58,549
that in the sort of is within the nuts

479
00:21:58,549 --> 00:22:01,220
and bolts of your library from from the

480
00:22:01,220 --> 00:22:04,759
from the actual API user this is you

481
00:22:04,759 --> 00:22:06,529
know often kind of lead you down the

482
00:22:06,529 --> 00:22:10,399
path of magic and magic can often be a

483
00:22:10,399 --> 00:22:12,259
bad thing because it introduces all

484
00:22:12,259 --> 00:22:14,330
kinds of uncertainty into the code but

485
00:22:14,330 --> 00:22:17,149
in some cases if you think about how

486
00:22:17,149 --> 00:22:18,590
your interface is going to work before

487
00:22:18,590 --> 00:22:20,029
you actually embark on solving the

488
00:22:20,029 --> 00:22:21,619
problem you can you can come up with

489
00:22:21,619 --> 00:22:25,669
some really nice simple things an

490
00:22:25,669 --> 00:22:29,090
example is something we worked on a

491
00:22:29,090 --> 00:22:32,239
Twitter recently which is across the

492
00:22:32,239 --> 00:22:34,549
main communication library it's

493
00:22:34,549 --> 00:22:36,769
basically all we do is come up with

494
00:22:36,769 --> 00:22:38,749
various permutations of cross domain

495
00:22:38,749 --> 00:22:41,720
communication libraries but so we set

496
00:22:41,720 --> 00:22:43,519
about before we even started writing the

497
00:22:43,519 --> 00:22:46,340
code we set about just designing the API

498
00:22:46,340 --> 00:22:47,570
and writing code

499
00:22:47,570 --> 00:22:49,580
samples and and getting a feel for how

500
00:22:49,580 --> 00:22:51,830
it might work before we even knew you

501
00:22:51,830 --> 00:22:52,940
know whether we were going to use

502
00:22:52,940 --> 00:22:55,100
postmessage or whatever you know just

503
00:22:55,100 --> 00:22:56,870
ignore that and get a text editor out

504
00:22:56,870 --> 00:22:59,600
and start writing the code this is our

505
00:22:59,600 --> 00:23:01,970
first permutation you sort of create a

506
00:23:01,970 --> 00:23:04,970
connection object and then under the

507
00:23:04,970 --> 00:23:07,970
hood we knew that an iframe would have

508
00:23:07,970 --> 00:23:09,830
to be created and several things would

509
00:23:09,830 --> 00:23:11,390
have to be initializing you have to wait

510
00:23:11,390 --> 00:23:13,220
for them all to load before the

511
00:23:13,220 --> 00:23:15,320
connection was ready to actually send a

512
00:23:15,320 --> 00:23:17,360
signal so the obvious thing to do in

513
00:23:17,360 --> 00:23:18,980
that case is have connection fire

514
00:23:18,980 --> 00:23:20,930
already event and then before you

515
00:23:20,930 --> 00:23:24,020
actually send any date or over this

516
00:23:24,020 --> 00:23:27,440
connection you you just wait for the

517
00:23:27,440 --> 00:23:29,360
ready event and then you can do your

518
00:23:29,360 --> 00:23:32,260
thing but we looked at it and thought

519
00:23:32,260 --> 00:23:35,990
yeah that makes sense but it's still

520
00:23:35,990 --> 00:23:37,640
sort of a little bit messy what we what

521
00:23:37,640 --> 00:23:40,130
can we do to sort of clean that that

522
00:23:40,130 --> 00:23:42,860
interaction up a little bit so our

523
00:23:42,860 --> 00:23:44,630
second iteration was something like this

524
00:23:44,630 --> 00:23:47,150
where we had a connect method that

525
00:23:47,150 --> 00:23:50,570
actually took a function which which has

526
00:23:50,570 --> 00:23:52,250
the the connection pass to it and we

527
00:23:52,250 --> 00:23:54,500
only call that function when the

528
00:23:54,500 --> 00:23:57,410
infrastructure is is set up and that

529
00:23:57,410 --> 00:24:00,380
kind of reads quite nicely but then we

530
00:24:00,380 --> 00:24:03,440
notice that the the calls we make across

531
00:24:03,440 --> 00:24:04,640
the cross domain bridge you are actually

532
00:24:04,640 --> 00:24:08,180
asynchronous anyway so the the developer

533
00:24:08,180 --> 00:24:10,160
is making a call and not expecting an

534
00:24:10,160 --> 00:24:11,720
answer back for some time in the future

535
00:24:11,720 --> 00:24:14,480
so why are you why are we introducing

536
00:24:14,480 --> 00:24:17,210
two levels of a synchronicity why can't

537
00:24:17,210 --> 00:24:20,270
we like sort of factor that out in the

538
00:24:20,270 --> 00:24:22,730
API in simplifier so what we finally

539
00:24:22,730 --> 00:24:24,140
came up with was something like this

540
00:24:24,140 --> 00:24:26,750
where you you get the connection object

541
00:24:26,750 --> 00:24:28,550
and then you can immediately start

542
00:24:28,550 --> 00:24:32,270
calling methods on it under the hood we

543
00:24:32,270 --> 00:24:33,950
actually just wait for the ready event

544
00:24:33,950 --> 00:24:35,990
and then call all of the calls that have

545
00:24:35,990 --> 00:24:39,860
happened that have been that have been

546
00:24:39,860 --> 00:24:43,250
queued up since then and we sort of mask

547
00:24:43,250 --> 00:24:45,080
away that a synchronicity which makes

548
00:24:45,080 --> 00:24:47,360
for a much nicer interface and I think

549
00:24:47,360 --> 00:24:49,220
if we would have actually started

550
00:24:49,220 --> 00:24:52,730
writing the code to for the for the nuts

551
00:24:52,730 --> 00:24:54,110
and bolts of the library before we

552
00:24:54,110 --> 00:24:55,280
design the interface we probably

553
00:24:55,280 --> 00:24:57,140
wouldn't have got here but the fact that

554
00:24:57,140 --> 00:24:58,550
we were thinking about how it would be

555
00:24:58,550 --> 00:25:00,830
nice to use before we started them

556
00:25:00,830 --> 00:25:02,330
you know made a lot of difference in

557
00:25:02,330 --> 00:25:10,010
this case back to the dom builder so we

558
00:25:10,010 --> 00:25:11,929
this was how this out how far we got

559
00:25:11,929 --> 00:25:15,049
last time and we want to be able to

560
00:25:15,049 --> 00:25:16,640
simplify this there's a few things in

561
00:25:16,640 --> 00:25:18,440
there that that are just hanging around

562
00:25:18,440 --> 00:25:20,539
and they're kind of line noise so we

563
00:25:20,539 --> 00:25:23,539
want to simplify this there's for

564
00:25:23,539 --> 00:25:26,059
instance if if a node doesn't have any

565
00:25:26,059 --> 00:25:28,399
attributes then you end up throwing in

566
00:25:28,399 --> 00:25:32,120
an empty object if a node doesn't have

567
00:25:32,120 --> 00:25:34,220
any children like the input tag you end

568
00:25:34,220 --> 00:25:37,809
up having to always throw in an empty

569
00:25:37,809 --> 00:25:40,880
array for the children and what we

570
00:25:40,880 --> 00:25:42,440
really want to do is clean all of that

571
00:25:42,440 --> 00:25:44,990
away so it looks more like this and it

572
00:25:44,990 --> 00:25:47,299
and it starts to look a hell of a lot

573
00:25:47,299 --> 00:25:49,789
more Oh another thing that I've got to

574
00:25:49,789 --> 00:25:51,409
point out is if you want to just put

575
00:25:51,409 --> 00:25:53,600
some text in at the moment you'd have to

576
00:25:53,600 --> 00:25:55,669
do a document dot create text element

577
00:25:55,669 --> 00:25:57,710
and have that in line and that's kind of

578
00:25:57,710 --> 00:26:00,080
noisy as well what we want to be able to

579
00:26:00,080 --> 00:26:02,090
do is get to this something that looks

580
00:26:02,090 --> 00:26:04,070
that's starting to look quite a lot like

581
00:26:04,070 --> 00:26:06,740
the actual Dom fragment that it's going

582
00:26:06,740 --> 00:26:09,409
to create and just like move out all of

583
00:26:09,409 --> 00:26:12,590
that line noise and basically default

584
00:26:12,590 --> 00:26:16,820
some of the arguments we can we can do

585
00:26:16,820 --> 00:26:20,539
that by actually and changing the the

586
00:26:20,539 --> 00:26:25,309
sort of API sugar function we don't know

587
00:26:25,309 --> 00:26:27,710
we're still calling HTML element with

588
00:26:27,710 --> 00:26:29,389
the name attributes and children so that

589
00:26:29,389 --> 00:26:31,580
remains solid but we're actually using

590
00:26:31,580 --> 00:26:35,179
our sort of with veneering this this

591
00:26:35,179 --> 00:26:37,970
sort of sugar layer on top of the solid

592
00:26:37,970 --> 00:26:41,330
base and all of this code is basically

593
00:26:41,330 --> 00:26:43,250
examining the audience or arguments

594
00:26:43,250 --> 00:26:45,380
array and the types that are in it and

595
00:26:45,380 --> 00:26:47,240
basically sorting things out and making

596
00:26:47,240 --> 00:26:50,389
making things much nicer so for instance

597
00:26:50,389 --> 00:26:53,110
at the bottom when we look through the

598
00:26:53,110 --> 00:26:56,330
the children and then if it's a string

599
00:26:56,330 --> 00:26:57,200
then we know to do a

600
00:26:57,200 --> 00:26:59,690
document.createelement on it so so then

601
00:26:59,690 --> 00:27:00,889
you're just passing a string in rather

602
00:27:00,889 --> 00:27:02,539
than having to worry about the Dom API

603
00:27:02,539 --> 00:27:08,960
at all the the final and probably most

604
00:27:08,960 --> 00:27:11,899
interesting part is it's sort of how do

605
00:27:11,899 --> 00:27:14,029
you build a library that that remains

606
00:27:14,029 --> 00:27:14,750
flexible

607
00:27:14,750 --> 00:27:19,160
and allows and fulfills as many use

608
00:27:19,160 --> 00:27:22,870
cases as possible and I suppose the

609
00:27:22,870 --> 00:27:25,910
comparison here is and I think that you

610
00:27:25,910 --> 00:27:27,530
know this is the trajectory of nearly

611
00:27:27,530 --> 00:27:30,740
all open source projects as they start

612
00:27:30,740 --> 00:27:32,150
out with something really lean and mean

613
00:27:32,150 --> 00:27:34,820
and a great idea so you know we've got

614
00:27:34,820 --> 00:27:36,770
this pen knife it's got a knife in it

615
00:27:36,770 --> 00:27:39,050
and it's also got a bottle opener so you

616
00:27:39,050 --> 00:27:40,340
know what else you need when you go

617
00:27:40,340 --> 00:27:42,140
camping you can cut things you can open

618
00:27:42,140 --> 00:27:44,240
cans it's great but then someone comes

619
00:27:44,240 --> 00:27:46,190
along and says yeah but wouldn't it be

620
00:27:46,190 --> 00:27:48,320
great if like it had a compass and a

621
00:27:48,320 --> 00:27:50,870
toothpick and make you know and and so

622
00:27:50,870 --> 00:27:52,730
you go okay yeah i'll add a compass and

623
00:27:52,730 --> 00:27:53,780
a toothpick that would be a good idea

624
00:27:53,780 --> 00:27:55,970
and then so you know you're adding more

625
00:27:55,970 --> 00:27:57,620
and more things on there more and more

626
00:27:57,620 --> 00:27:59,870
pull requests coming and they think yeah

627
00:27:59,870 --> 00:28:01,940
but i've got all of these other ideas

628
00:28:01,940 --> 00:28:04,940
for features yeah if you know if you if

629
00:28:04,940 --> 00:28:07,580
you write your libraries in in that way

630
00:28:07,580 --> 00:28:09,830
you know then it can easily get way way

631
00:28:09,830 --> 00:28:13,610
out of hand and i think the thing is is

632
00:28:13,610 --> 00:28:16,100
you need to always keep in mind that

633
00:28:16,100 --> 00:28:17,780
when you write a piece of code you're

634
00:28:17,780 --> 00:28:19,160
never ever going to be able to please

635
00:28:19,160 --> 00:28:21,290
everyone you know you shouldn't even

636
00:28:21,290 --> 00:28:23,540
like try to second-guess every use case

637
00:28:23,540 --> 00:28:24,590
and you shouldn't even try to

638
00:28:24,590 --> 00:28:28,970
accommodate every use case and end up

639
00:28:28,970 --> 00:28:32,120
with this kind of bloated feature set 1

640
00:28:32,120 --> 00:28:35,180
think plan that you see a lot in lots of

641
00:28:35,180 --> 00:28:36,800
different libraries and i think it's

642
00:28:36,800 --> 00:28:39,500
kind of like a sort of an anti-pattern

643
00:28:39,500 --> 00:28:41,990
that leads to software boat is is

644
00:28:41,990 --> 00:28:44,000
actually with option Hassett the hashes

645
00:28:44,000 --> 00:28:45,920
having an option hat is your only

646
00:28:45,920 --> 00:28:48,500
argument is not flexibility yes you can

647
00:28:48,500 --> 00:28:50,750
add new properties but it gets really

648
00:28:50,750 --> 00:28:54,440
out of hand this is there's many

649
00:28:54,440 --> 00:28:56,510
libraries that i could have picked on

650
00:28:56,510 --> 00:28:58,160
for this it's not like so I'm not

651
00:28:58,160 --> 00:28:59,720
singling out but this is something from

652
00:28:59,720 --> 00:29:02,810
jQuery UI and this is the documentation

653
00:29:02,810 --> 00:29:08,030
for the draggable component it has 28

654
00:29:08,030 --> 00:29:12,470
options I mean how how and you know

655
00:29:12,470 --> 00:29:14,360
that's probably likely to grow because

656
00:29:14,360 --> 00:29:15,710
everyone's going to go oh yeah but with

657
00:29:15,710 --> 00:29:16,880
my Dragon will object I want to be able

658
00:29:16,880 --> 00:29:18,950
to do this and that and if you look down

659
00:29:18,950 --> 00:29:21,320
then there for like kind of niche cases

660
00:29:21,320 --> 00:29:24,920
like adding classes or being in a

661
00:29:24,920 --> 00:29:27,050
certain container it's just all of it

662
00:29:27,050 --> 00:29:28,060
you know

663
00:29:28,060 --> 00:29:29,980
people are coming with feature requests

664
00:29:29,980 --> 00:29:31,930
and then the concrete features are built

665
00:29:31,930 --> 00:29:35,290
into this thing well I would suggest is

666
00:29:35,290 --> 00:29:37,150
instead of doing that you actually think

667
00:29:37,150 --> 00:29:40,030
about how you can add hack ability into

668
00:29:40,030 --> 00:29:43,360
your code and your API so that you don't

669
00:29:43,360 --> 00:29:46,510
have to accommodate every single niche

670
00:29:46,510 --> 00:29:49,090
use but you provide the framework with

671
00:29:49,090 --> 00:29:50,500
which people can sort of build their

672
00:29:50,500 --> 00:29:55,030
their things on top a really sort of

673
00:29:55,030 --> 00:29:56,530
first port of call thing that you could

674
00:29:56,530 --> 00:30:01,300
do to fix that is this idea of there's

675
00:30:01,300 --> 00:30:04,240
kind of this I think I first saw it in

676
00:30:04,240 --> 00:30:06,640
in murbad chili but the idea of there

677
00:30:06,640 --> 00:30:09,840
being a public API an internal API that

678
00:30:09,840 --> 00:30:12,820
that's still accessible but you kind of

679
00:30:12,820 --> 00:30:15,130
suggest people don't mess with and then

680
00:30:15,130 --> 00:30:16,840
a protected API which you just basically

681
00:30:16,840 --> 00:30:20,940
can't even get out I think at the moment

682
00:30:20,940 --> 00:30:23,050
especially since the module pattern has

683
00:30:23,050 --> 00:30:24,670
been around in JavaScript you see a lot

684
00:30:24,670 --> 00:30:26,880
of stuff made private in JavaScript

685
00:30:26,880 --> 00:30:29,560
libraries that don't need to be and then

686
00:30:29,560 --> 00:30:32,260
you and once you've got truly private

687
00:30:32,260 --> 00:30:35,260
things that you people just can't dig

688
00:30:35,260 --> 00:30:36,850
into there and actually do their own

689
00:30:36,850 --> 00:30:40,540
thing on top of it so i suppose what i'm

690
00:30:40,540 --> 00:30:43,570
talking about is in a sort of you know

691
00:30:43,570 --> 00:30:45,700
old school module pattern way you've got

692
00:30:45,700 --> 00:30:47,620
your private methods that just existed

693
00:30:47,620 --> 00:30:51,640
in the closure you absolutely can't be

694
00:30:51,640 --> 00:30:55,840
messed with I think trying I I think

695
00:30:55,840 --> 00:30:57,370
it's best to try and keep those as a as

696
00:30:57,370 --> 00:31:00,880
a minimum really and probably only like

697
00:31:00,880 --> 00:31:03,040
really really low level stuff but then

698
00:31:03,040 --> 00:31:04,270
the other thing you can do is have this

699
00:31:04,270 --> 00:31:06,730
idea of internal methods and and and the

700
00:31:06,730 --> 00:31:10,240
the convention that I stole from herb is

701
00:31:10,240 --> 00:31:12,310
is to underscore them so they're there

702
00:31:12,310 --> 00:31:15,190
and if you actually looked at the this

703
00:31:15,190 --> 00:31:17,110
lib module you'd see on the score

704
00:31:17,110 --> 00:31:19,210
whatever and if you wanted to if you

705
00:31:19,210 --> 00:31:21,910
really really needed to a developer

706
00:31:21,910 --> 00:31:24,370
could actually override that and change

707
00:31:24,370 --> 00:31:27,220
it and work with it and and then you've

708
00:31:27,220 --> 00:31:29,350
obviously got your public API and you're

709
00:31:29,350 --> 00:31:32,140
basically saying to the contract with

710
00:31:32,140 --> 00:31:35,470
the programmer is you shouldn't really

711
00:31:35,470 --> 00:31:38,650
mess with the underscore methods because

712
00:31:38,650 --> 00:31:40,360
they are internal and they'll probably

713
00:31:40,360 --> 00:31:41,980
change from version to version

714
00:31:41,980 --> 00:31:43,450
so on your own head be it but if you

715
00:31:43,450 --> 00:31:47,010
really really need to then it's there a

716
00:31:47,010 --> 00:31:50,500
night and slightly more sort of complex

717
00:31:50,500 --> 00:31:52,360
but a much much nicer way to build in

718
00:31:52,360 --> 00:31:54,610
hack ability is actually by using the

719
00:31:54,610 --> 00:31:56,559
fact that javascript has high order

720
00:31:56,559 --> 00:31:59,290
functions wherever you accept a value

721
00:31:59,290 --> 00:32:02,080
for for configuration you can accept a

722
00:32:02,080 --> 00:32:04,150
function and that adds this whole level

723
00:32:04,150 --> 00:32:07,410
of hack ability straightaway a really

724
00:32:07,410 --> 00:32:10,440
really sort of nice simple example is

725
00:32:10,440 --> 00:32:13,360
Kirk comes from from Endor which is a

726
00:32:13,360 --> 00:32:14,950
library that's come out quite recently

727
00:32:14,950 --> 00:32:18,490
they have this idea of they have this

728
00:32:18,490 --> 00:32:20,290
this this method called underscore

729
00:32:20,290 --> 00:32:22,990
select and the contract is for that

730
00:32:22,990 --> 00:32:25,059
method that it takes a selector and the

731
00:32:25,059 --> 00:32:26,890
root node and then it returns an array

732
00:32:26,890 --> 00:32:28,900
of matching nodes now the cool thing

733
00:32:28,900 --> 00:32:30,640
about that is it comes with its own

734
00:32:30,640 --> 00:32:33,820
thing like a limited select selector

735
00:32:33,820 --> 00:32:35,740
engine but it's really easy to just

736
00:32:35,740 --> 00:32:38,260
overwrite that function with a function

737
00:32:38,260 --> 00:32:40,510
that fulfills the same contract and uses

738
00:32:40,510 --> 00:32:41,919
sizzle and then you've got all of the

739
00:32:41,919 --> 00:32:46,030
extra jQuery style stuff in there or if

740
00:32:46,030 --> 00:32:47,980
you're using the same thing on a mobile

741
00:32:47,980 --> 00:32:50,860
platform then all you need to do is over

742
00:32:50,860 --> 00:32:52,299
right that and there is something that

743
00:32:52,299 --> 00:32:53,919
just use quick quick users query

744
00:32:53,919 --> 00:32:57,460
selector all so just them having this

745
00:32:57,460 --> 00:32:59,169
one foot function that allows you to

746
00:32:59,169 --> 00:33:01,330
overwrite it is it sort of opened up

747
00:33:01,330 --> 00:33:03,429
this whole sort of sphere of

748
00:33:03,429 --> 00:33:06,669
possibilities in in this code and you

749
00:33:06,669 --> 00:33:09,669
can imagine this kind of technique can

750
00:33:09,669 --> 00:33:12,400
be used to add of like a really huge

751
00:33:12,400 --> 00:33:17,260
degree of vaca bility another way you

752
00:33:17,260 --> 00:33:19,480
can do it is by using inheritance you

753
00:33:19,480 --> 00:33:21,880
can actually sort of use prototypal

754
00:33:21,880 --> 00:33:26,559
inheritance and and build a set of base

755
00:33:26,559 --> 00:33:29,559
objects in that basically you know map

756
00:33:29,559 --> 00:33:31,780
to the problems in your library and then

757
00:33:31,780 --> 00:33:34,059
you can build on top of them with the

758
00:33:34,059 --> 00:33:36,070
core features but then they're also

759
00:33:36,070 --> 00:33:39,179
there and you can own to expose to the

760
00:33:39,179 --> 00:33:41,710
two other developers to build their own

761
00:33:41,710 --> 00:33:44,830
features on top and kind of a slightly

762
00:33:44,830 --> 00:33:48,429
more concrete example of that is in in a

763
00:33:48,429 --> 00:33:50,080
library of mine called loadrunner load

764
00:33:50,080 --> 00:33:54,269
runners a dependency manager and so the

765
00:33:54,269 --> 00:33:56,070
the sort of central part of the library

766
00:33:56,070 --> 00:33:59,940
is this this base constructor called

767
00:33:59,940 --> 00:34:04,229
dependency and the way and what you can

768
00:34:04,229 --> 00:34:07,049
do with that is all of the module

769
00:34:07,049 --> 00:34:08,760
loading and the script loading stuff is

770
00:34:08,760 --> 00:34:12,809
is built on top of is a subclass of

771
00:34:12,809 --> 00:34:16,500
dependency but then any other developer

772
00:34:16,500 --> 00:34:18,149
can make any other dependency on

773
00:34:18,149 --> 00:34:19,829
anything else they like and all they

774
00:34:19,829 --> 00:34:22,379
have to do is create a new constructor

775
00:34:22,379 --> 00:34:24,629
that inherits from the base dependency

776
00:34:24,629 --> 00:34:26,789
and then override any bits that need to

777
00:34:26,789 --> 00:34:31,020
change so in this case it's a we want to

778
00:34:31,020 --> 00:34:32,579
create a dependency on a mustache

779
00:34:32,579 --> 00:34:35,639
template being loaded so we create this

780
00:34:35,639 --> 00:34:37,980
new constructor inherit from dependency

781
00:34:37,980 --> 00:34:40,109
and then all we have to do is override

782
00:34:40,109 --> 00:34:41,819
the start method which is the method

783
00:34:41,819 --> 00:34:44,849
that kicks off fulfilling this

784
00:34:44,849 --> 00:34:47,129
dependency and in there you know we go

785
00:34:47,129 --> 00:34:49,260
and get the template we pass it and then

786
00:34:49,260 --> 00:34:51,029
we call complete which is the other part

787
00:34:51,029 --> 00:34:53,579
of the contract once we've built this

788
00:34:53,579 --> 00:34:57,180
thing we can use it at any place in the

789
00:34:57,180 --> 00:34:58,829
library where you can use a dependency

790
00:34:58,829 --> 00:35:00,539
so at the bottom there's a using

791
00:35:00,539 --> 00:35:04,260
function that says I depend on this item

792
00:35:04,260 --> 00:35:08,160
and then when it's done then the results

793
00:35:08,160 --> 00:35:12,779
get past him and and so this one thing

794
00:35:12,779 --> 00:35:14,490
that sort of built into loadrunner

795
00:35:14,490 --> 00:35:16,740
enables anyone to build pretty much any

796
00:35:16,740 --> 00:35:18,539
kind of dependency management on top of

797
00:35:18,539 --> 00:35:20,279
it it doesn't have to be a script it

798
00:35:20,279 --> 00:35:21,450
doesn't have to load over the network

799
00:35:21,450 --> 00:35:23,700
doesn't have to be anything in

800
00:35:23,700 --> 00:35:28,410
particular a sort of like a weight form

801
00:35:28,410 --> 00:35:29,940
of doing a similar thing is by using

802
00:35:29,940 --> 00:35:32,730
duck typing which I'm sure may see you

803
00:35:32,730 --> 00:35:33,980
have come across sort of the idea that

804
00:35:33,980 --> 00:35:37,619
if if an object fulfills a certain

805
00:35:37,619 --> 00:35:40,950
contract it has a certain method then

806
00:35:40,950 --> 00:35:45,569
we'll use that method implicitly we can

807
00:35:45,569 --> 00:35:48,839
demonstrate that by adding a feature to

808
00:35:48,839 --> 00:35:53,069
the Dom builder so what we'll what we do

809
00:35:53,069 --> 00:35:54,779
here in our element builder function is

810
00:35:54,779 --> 00:35:56,940
what we want to say is any object that

811
00:35:56,940 --> 00:35:59,760
has a to DOM method then if it's there

812
00:35:59,760 --> 00:36:03,660
will call that expect it to return a Dom

813
00:36:03,660 --> 00:36:05,700
structure representing that object and

814
00:36:05,700 --> 00:36:07,950
then we'll implicitly add it as a child

815
00:36:07,950 --> 00:36:11,460
so we're just doing you know type of the

816
00:36:11,460 --> 00:36:15,060
argument to da y equals function then

817
00:36:15,060 --> 00:36:16,440
we'll call that function and that's

818
00:36:16,440 --> 00:36:18,330
going to be the child instead of the

819
00:36:18,330 --> 00:36:21,510
object itself which allows us to write

820
00:36:21,510 --> 00:36:23,970
some really nice things so here's an

821
00:36:23,970 --> 00:36:25,650
example we've got an object which

822
00:36:25,650 --> 00:36:28,200
represents a tweet all we need to do is

823
00:36:28,200 --> 00:36:30,840
add the two damn method to it that and

824
00:36:30,840 --> 00:36:33,060
general and use the no builder again to

825
00:36:33,060 --> 00:36:35,520
generate the Dom structure that

826
00:36:35,520 --> 00:36:37,710
represents a single tweet and then we

827
00:36:37,710 --> 00:36:40,530
can just drop it in and say if we had an

828
00:36:40,530 --> 00:36:42,360
array of those then we drop that in as

829
00:36:42,360 --> 00:36:46,200
the chapter in the child and then

830
00:36:46,200 --> 00:36:50,300
they'll it'll do all of the work for you

831
00:36:50,300 --> 00:36:54,480
so space the the crux of the matter is

832
00:36:54,480 --> 00:36:55,890
when you're thinking about solving a

833
00:36:55,890 --> 00:36:59,340
problem try not to write a code to solve

834
00:36:59,340 --> 00:37:02,370
the problem think more about developing

835
00:37:02,370 --> 00:37:04,080
a set of tools that will enable you to

836
00:37:04,080 --> 00:37:08,150
solve that that class of problem and

837
00:37:08,150 --> 00:37:10,890
then once you've got these tools that

838
00:37:10,890 --> 00:37:13,170
sort of model the problem space then you

839
00:37:13,170 --> 00:37:15,080
build your core features on top of that

840
00:37:15,080 --> 00:37:18,540
the nice thing about that is because

841
00:37:18,540 --> 00:37:20,460
you've built this sort of bag of tools

842
00:37:20,460 --> 00:37:22,290
for solving different things you've

843
00:37:22,290 --> 00:37:23,670
basically made yourself a plug-in

844
00:37:23,670 --> 00:37:26,790
framework just by designing your code in

845
00:37:26,790 --> 00:37:30,210
a certain way and I think you shouldn't

846
00:37:30,210 --> 00:37:33,930
build any non-trivial piece of reusable

847
00:37:33,930 --> 00:37:37,560
code that that doesn't have a sort of

848
00:37:37,560 --> 00:37:39,570
plug-in system of some type everything

849
00:37:39,570 --> 00:37:42,090
should be hackable because everyone has

850
00:37:42,090 --> 00:37:44,250
different needs and if if you can

851
00:37:44,250 --> 00:37:46,140
provide a framework for other people to

852
00:37:46,140 --> 00:37:47,520
solve their niche problems then you

853
00:37:47,520 --> 00:37:51,510
don't have to get that feature blow yeah

854
00:37:51,510 --> 00:37:53,460
so it's a case of you know you build

855
00:37:53,460 --> 00:38:00,810
tools to solve the problem so yeah now I

856
00:38:00,810 --> 00:38:02,250
just showed you loads of things and

857
00:38:02,250 --> 00:38:05,550
there's definitely some personal

858
00:38:05,550 --> 00:38:06,840
preferences in there and there's

859
00:38:06,840 --> 00:38:08,370
definitely ups and downsize to a lot of

860
00:38:08,370 --> 00:38:10,200
the techniques that I showed you and you

861
00:38:10,200 --> 00:38:13,170
know you are going to need to you know

862
00:38:13,170 --> 00:38:15,000
make your own minds of depending on the

863
00:38:15,000 --> 00:38:16,950
particular problem you're creating as

864
00:38:16,950 --> 00:38:20,460
what to do but my main thing is that

865
00:38:20,460 --> 00:38:23,700
you really need to think about the the

866
00:38:23,700 --> 00:38:26,130
the your API design right up front and

867
00:38:26,130 --> 00:38:27,690
design it like you're designing a

868
00:38:27,690 --> 00:38:30,270
website make sure that it's really

869
00:38:30,270 --> 00:38:32,540
usable it's as simple as it can be and

870
00:38:32,540 --> 00:38:36,599
it it's predictable and not making the

871
00:38:36,599 --> 00:38:38,130
programmer think about things that they

872
00:38:38,130 --> 00:38:41,550
shouldn't do make use of the conventions

873
00:38:41,550 --> 00:38:45,869
and yeah and lastly build in some hack

874
00:38:45,869 --> 00:38:47,700
ability so you you're not responsible

875
00:38:47,700 --> 00:38:52,849
for all of the niche features and so

876
00:38:52,849 --> 00:38:55,619
we're sort of overtime because of my

877
00:38:55,619 --> 00:38:58,410
messenger out with the display settings

878
00:38:58,410 --> 00:39:02,010
but if there's no time for questions you

879
00:39:02,010 --> 00:39:04,500
can heckle me on twitter at damn wrong

880
00:39:04,500 --> 00:39:07,320
you can hassle me in the corridor or

881
00:39:07,320 --> 00:39:09,330
better still talk to me when i'm drunk

882
00:39:09,330 --> 00:39:10,710
cause i like arguing about things more

883
00:39:10,710 --> 00:39:13,560
that way and yeah work for twitter and

884
00:39:13,560 --> 00:39:16,670
they're hiring and that kind of thing

885
00:39:16,670 --> 00:39:23,700
there you go

886
00:39:23,710 --> 00:39:26,930
uh you know there are planes Chris we

