1
00:00:20,829 --> 00:00:21,859
Welcome to my talk.

2
00:00:21,859 --> 00:00:28,909
As you see it is called, we are struggling
to keep up.

3
00:00:28,909 --> 00:00:30,499
Something brief about me.

4
00:00:30,499 --> 00:00:32,960
My name is Frederik.

5
00:00:32,960 --> 00:00:35,940
I work for Mozilla in Berlin.

6
00:00:35,940 --> 00:00:40,510
I have an email address and so on if you are
interested.

7
00:00:40,510 --> 00:00:42,070
Why am I here?

8
00:00:42,070 --> 00:00:44,390
I want to make the web more secure.

9
00:00:44,390 --> 00:00:49,450
I hope by educating about security.

10
00:00:49,450 --> 00:00:54,570
As it reads in the Mozilla manifesto number
5.

11
00:00:54,570 --> 00:01:01,929
Individuals security and privacy on the internet
are fundamental and must not be optional.

12
00:01:01,929 --> 00:01:03,440
What will I talk about?

13
00:01:03,440 --> 00:01:05,280
An introduction.

14
00:01:05,280 --> 00:01:10,950
Then past, present and future of security
features in the browser.

15
00:01:10,950 --> 00:01:14,159
For you as developers.

16
00:01:14,159 --> 00:01:17,030
First of all the web and the browser.

17
00:01:17,030 --> 00:01:18,259
I work for Mozilla.

18
00:01:18,259 --> 00:01:23,230
Everybody says and keeps on saying in meetings.

19
00:01:23,230 --> 00:01:26,280
The web is the platform.

20
00:01:26,280 --> 00:01:27,849
It is true.

21
00:01:27,849 --> 00:01:29,369
The web is not going away.

22
00:01:29,369 --> 00:01:32,960
And it is becoming more and more featurish.

23
00:01:32,960 --> 00:01:42,250
I don't know if you recall Html 4, hypertext,
linking to text.

24
00:01:42,250 --> 00:01:44,740
That's not what is the web today.

25
00:01:44,740 --> 00:01:50,750
The web is experienced through rich applications
like Gmail, Twitter, Facebook.

26
00:01:50,750 --> 00:01:56,380
There is a graph how it developed.

27
00:01:56,380 --> 00:01:59,929
I don't need you to read it.

28
00:01:59,929 --> 00:02:06,159
The high level picture you should get is,
it has developed and evolved a lot.

29
00:02:06,159 --> 00:02:09,259
So for example, Html 5.

30
00:02:09,259 --> 00:02:15,580
Which contains stuff like canvas, full screen,
Xml requests.

31
00:02:15,580 --> 00:02:19,780
And all these things that you need for rich
applications on the web.

32
00:02:19,780 --> 00:02:25,330
That of course lives us with the topic Xss.

33
00:02:25,330 --> 00:02:32,880
It is what the buffer overflow was in the
1990's.

34
00:02:32,880 --> 00:02:41,550
Every application or service application was
vulnerable to buffer overflow.

35
00:02:41,550 --> 00:02:48,560
But since 2007, the most common vulnerability
in applications seems overall vulnerabilities

36
00:02:48,560 --> 00:02:54,090
are Xss applications.

37
00:02:54,090 --> 00:02:55,920
Not for a reason.

38
00:02:55,920 --> 00:03:01,280
Because the most popular applications are
web applications.

39
00:03:01,280 --> 00:03:06,790
It doesn't leave us with something small.

40
00:03:06,790 --> 00:03:08,750
It is also in your phone.

41
00:03:08,750 --> 00:03:09,840
On your tv.

42
00:03:09,840 --> 00:03:12,830
And maybe on the plane if you came here.

43
00:03:12,830 --> 00:03:18,650
And given all these applications platforms.

44
00:03:18,650 --> 00:03:19,650
And extensions.

45
00:03:19,650 --> 00:03:27,830
Xss is more than these alert box, but some
way to control all these devices.

46
00:03:27,830 --> 00:03:32,090
Hopefully not on a plane though.

47
00:03:32,090 --> 00:03:34,580
I do know it can make your phone ring.

48
00:03:34,580 --> 00:03:40,930
There are phones that make it do.

49
00:03:40,930 --> 00:03:45,650
I want to talk about authentication, authorisation,
frames.

50
00:03:45,650 --> 00:03:49,620
Http was stateless.

51
00:03:49,620 --> 00:03:56,200
You issue a request to a server and you get
a response and you may do that again and get

52
00:03:56,200 --> 00:03:57,200
another response.

53
00:03:57,200 --> 00:03:59,110
The server doesn't know and care who you are.

54
00:03:59,110 --> 00:04:05,770
And will not remember you are the same person
as previously.

55
00:04:05,770 --> 00:04:07,470
This was solved with cookies.

56
00:04:07,470 --> 00:04:09,900
As you hopefully all know.

57
00:04:09,900 --> 00:04:13,239
The server generates an ID.

58
00:04:13,239 --> 00:04:20,150
And keeps track what you are doing.

59
00:04:20,150 --> 00:04:24,009
One of the problems here is, everything is
sent in the clear.

60
00:04:24,009 --> 00:04:25,940
Of plain text.

61
00:04:25,940 --> 00:04:33,040
If you use public wifi in a coffeeshop for
example, it exposes al the authentication

62
00:04:33,040 --> 00:04:34,040
data.

63
00:04:34,040 --> 00:04:35,490
And even more.

64
00:04:35,490 --> 00:04:38,699
And bankstatements.

65
00:04:38,699 --> 00:04:42,889
As we know, Https is the solution.

66
00:04:42,889 --> 00:04:46,240
Some say it is example.

67
00:04:46,240 --> 00:04:53,740
I have a website with Https.

68
00:04:53,740 --> 00:04:57,919
There are certificates for free.

69
00:04:57,919 --> 00:05:01,599
Also Google will rank you higher if you use
Https.

70
00:05:01,599 --> 00:05:07,169
It is in.

71
00:05:07,169 --> 00:05:12,999
When you type in the domain, it will go to
Http.

72
00:05:12,999 --> 00:05:14,879
And that is even more or less undetected.

73
00:05:14,879 --> 00:05:25,240
The user is not supposed to know if there
is a lock or green lock or something different.

74
00:05:25,240 --> 00:05:29,240
Also Https doesn't give full guarantee.

75
00:05:29,240 --> 00:05:35,110
You may have ads or widgets.

76
00:05:35,110 --> 00:05:40,099
Not everything is protected.

77
00:05:40,099 --> 00:05:41,529
We'll come back to this.

78
00:05:41,529 --> 00:05:48,020
I want to introduce you to something that
is the same origin policy.

79
00:05:48,020 --> 00:05:55,550
In 1996, when Javascript was invented and
Frames, the idea was to have something in

80
00:05:55,550 --> 00:06:01,449
the web and include as a component in the
webpage.

81
00:06:01,449 --> 00:06:03,820
Reusing existing code, which is good.

82
00:06:03,820 --> 00:06:11,430
It was realised it is a bad idea if you are
able to include something and read everything

83
00:06:11,430 --> 00:06:12,430
within it.

84
00:06:12,430 --> 00:06:17,440
Imagine go to a webpage that reads the bankstatements.

85
00:06:17,440 --> 00:06:19,789
It was forbidden.

86
00:06:19,789 --> 00:06:25,499
We shouldn't allow that from other origins.

87
00:06:25,499 --> 00:06:27,449
So you have to be on the same origin.

88
00:06:27,449 --> 00:06:28,449
What is an origin?

89
00:06:28,449 --> 00:06:30,949
It is more than just the domain.

90
00:06:30,949 --> 00:06:36,729
It is the scheme and the host and the port
of a Url.

91
00:06:36,729 --> 00:06:40,349
And we take that as a criterium to compare
to things.

92
00:06:40,349 --> 00:06:43,029
The frame.

93
00:06:43,029 --> 00:06:46,919
Just to make it clear, I want to walk through
examples.

94
00:06:46,919 --> 00:06:48,759
I want it to be interactive.

95
00:06:48,759 --> 00:06:57,169
Knod or shake your head.

96
00:06:57,169 --> 00:06:59,449
Example.Com.

97
00:06:59,449 --> 00:07:02,060
And there is another Url in the table.

98
00:07:02,060 --> 00:07:03,409
I hope it is big enough.

99
00:07:03,409 --> 00:07:04,949
Is it the same origin?

100
00:07:04,949 --> 00:07:07,409
A lot are nodding.

101
00:07:07,409 --> 00:07:09,860
It is the same.

102
00:07:09,860 --> 00:07:13,279
What about this one?

103
00:07:13,279 --> 00:07:14,319
Everybody shaking.

104
00:07:14,319 --> 00:07:17,029
Https is not Http.

105
00:07:17,029 --> 00:07:23,409
Http is using a different port than https.

106
00:07:23,409 --> 00:07:25,720
What about this one?

107
00:07:25,720 --> 00:07:27,669
About:blank.

108
00:07:27,669 --> 00:07:28,710
The domain is not blank.

109
00:07:28,710 --> 00:07:32,689
What is the port?

110
00:07:32,689 --> 00:07:33,689
What are we doing?

111
00:07:33,689 --> 00:07:36,460
What do you think?

112
00:07:36,460 --> 00:07:38,490
Some people shake their head.

113
00:07:38,490 --> 00:07:44,419
A lot of people are not doing anything.

114
00:07:44,419 --> 00:07:47,990
It is mostly allowed.

115
00:07:47,990 --> 00:07:55,580
If you open a popup you have done access granted.

116
00:07:55,580 --> 00:07:58,899
By reading things.

117
00:07:58,899 --> 00:08:05,229
Everything in there is basically, has been
written by you or an empty page.

118
00:08:05,229 --> 00:08:11,169
It is not going to contain bank statements.

119
00:08:11,169 --> 00:08:14,460
What about the next one?

120
00:08:14,460 --> 00:08:16,400
I see thumbs down there.

121
00:08:16,400 --> 00:08:19,099
I have been tricking you.

122
00:08:19,099 --> 00:08:23,029
Internet Explorer doesn't care about the port.

123
00:08:23,029 --> 00:08:31,229
If you change document.Domain, all browners
will stop looking at ports.

124
00:08:31,229 --> 00:08:40,260
So, to summarize the same origin policy, it
is not as strict as we think.

125
00:08:40,260 --> 00:08:41,320
It is a bit weird.

126
00:08:41,320 --> 00:08:46,350
It behaves differently.

127
00:08:46,350 --> 00:08:50,070
You wouldn't do it to about:blank.

128
00:08:50,070 --> 00:08:54,720
There is not just 1 same origin policy.

129
00:08:54,720 --> 00:08:58,970
There are multiple scenarios.

130
00:08:58,970 --> 00:09:03,710
The policy says, port, domain, scheme.

131
00:09:03,710 --> 00:09:05,830
And there are also so many bypasses.

132
00:09:05,830 --> 00:09:11,340
Out of the same policy.

133
00:09:11,340 --> 00:09:17,220
And then there is a hack that is meant to
bypass the same origin policy.

134
00:09:17,220 --> 00:09:19,770
Which I don't recommend you to use.

135
00:09:19,770 --> 00:09:29,170
If you want to learn more, I can suggest one
of these talks.

136
00:09:29,170 --> 00:09:30,610
From 2012.

137
00:09:30,610 --> 00:09:31,610
The other one is from me.

138
00:09:31,610 --> 00:09:37,300
I had to write a very long thesis about the
same origin policy.

139
00:09:37,300 --> 00:09:41,830
Presented in Hamburg 2013.

140
00:09:41,830 --> 00:09:46,810
We'll come back to the topic of frames.

141
00:09:46,810 --> 00:09:48,180
But let's go on to the present.

142
00:09:48,180 --> 00:09:53,540
I want to talk about Https and frames.

143
00:09:53,540 --> 00:09:57,090
It was opt in.

144
00:09:57,090 --> 00:10:02,520
There is Http strict transport security.

145
00:10:02,520 --> 00:10:07,330
It was invinted in 1994.

146
00:10:07,330 --> 00:10:09,200
And this year is from 2012.

147
00:10:09,200 --> 00:10:16,320
We have realised it is a bad idea to have
Https.

148
00:10:16,320 --> 00:10:20,600
There is a way to enforce, the browser will
always use https.

149
00:10:20,600 --> 00:10:26,610
It works like this.

150
00:10:26,610 --> 00:10:29,340
You do start off with http.

151
00:10:29,340 --> 00:10:30,720
And the client sends a request.

152
00:10:30,720 --> 00:10:32,910
Server responds.

153
00:10:32,910 --> 00:10:34,830
Hopefully forwarding to https.

154
00:10:34,830 --> 00:10:42,550
And once it is established, strict transport
security.

155
00:10:42,550 --> 00:10:45,920
It comes with a time to live.

156
00:10:45,920 --> 00:10:48,640
Cash this for an amount of time.

157
00:10:48,640 --> 00:10:54,620
When it has not elapsed, continue using https.

158
00:10:54,620 --> 00:10:56,010
That's neat.

159
00:10:56,010 --> 00:10:58,970
The browser will always use https.

160
00:10:58,970 --> 00:11:00,480
What about this one?

161
00:11:00,480 --> 00:11:02,410
Plaintext again.

162
00:11:02,410 --> 00:11:08,810
A network that is stripping off the forward.

163
00:11:08,810 --> 00:11:13,050
There are a lot of tools that are easy to
use that are doing that.

164
00:11:13,050 --> 00:11:16,800
They setup a proxy.

165
00:11:16,800 --> 00:11:19,090
And the user isn't using it.

166
00:11:19,090 --> 00:11:26,110
There is a proload list.

167
00:11:26,110 --> 00:11:32,560
Firefox and Chrome share the list and synchronise.

168
00:11:32,560 --> 00:11:38,380
This contains the bit here, let's cache this.

169
00:11:38,380 --> 00:11:44,610
The browser will always use https, without
requiring the first header.

170
00:11:44,610 --> 00:11:45,900
This list we have in the browsers.

171
00:11:45,900 --> 00:11:52,370
They are opt in.

172
00:11:52,370 --> 00:12:00,470
So to fill this list, security engineer Adam
Langly working at Google went around security

173
00:12:00,470 --> 00:12:04,530
conferences and said, people, do you want
to be on the list?

174
00:12:04,530 --> 00:12:07,250
It is better than what you have now.

175
00:12:07,250 --> 00:12:09,750
Send me an email.

176
00:12:09,750 --> 00:12:13,790
And you know, this method to maintain the
list is failed.

177
00:12:13,790 --> 00:12:21,090
Nobody 
sent an email.

178
00:12:21,090 --> 00:12:24,090
It is sad.

179
00:12:24,090 --> 00:12:30,260
I hope, the mails coming in have increased.

180
00:12:30,260 --> 00:12:34,900
Now there is a google form you can do it automated.

181
00:12:34,900 --> 00:12:39,490
If you are using web applications and providing
them to somebody.

182
00:12:39,490 --> 00:12:46,240
And you are using https, consider using script
transport security header.

183
00:12:46,240 --> 00:12:50,860
Or get into the preload list.

184
00:12:50,860 --> 00:12:54,620
Now I'm come back to it.

185
00:12:54,620 --> 00:12:58,570
The threat model here is being framed.

186
00:12:58,570 --> 00:13:02,850
What we had before.

187
00:13:02,850 --> 00:13:09,800
An innocent user goes to a website and the
website is evil.

188
00:13:09,800 --> 00:13:13,240
It does include an iframe.

189
00:13:13,240 --> 00:13:15,890
He is clicking around things.

190
00:13:15,890 --> 00:13:16,890
You may have hoard about this.

191
00:13:16,890 --> 00:13:19,000
This is click jacking.

192
00:13:19,000 --> 00:13:23,540
A non transparent thing on top.

193
00:13:23,540 --> 00:13:25,570
He thinks he is clicking a game.

194
00:13:25,570 --> 00:13:31,140
He is clicking on the website and liking stuff.

195
00:13:31,140 --> 00:13:33,670
And there are much more evil things.

196
00:13:33,670 --> 00:13:36,290
When they frame your website.

197
00:13:36,290 --> 00:13:41,030
Here is the funny thing from when the user
is using IE.

198
00:13:41,030 --> 00:13:48,370
It is forcing the browser into a rendering
mode.

199
00:13:48,370 --> 00:13:52,830
And potentially legacy vulnerabilities.

200
00:13:52,830 --> 00:13:56,280
Whenever there is somebody going in the website
with this.

201
00:13:56,280 --> 00:13:59,180
IE will say, this is an old website.

202
00:13:59,180 --> 00:14:06,760
I will use IE 7, which is about 7 years.

203
00:14:06,760 --> 00:14:10,020
And of course, this is inherited to the frames.

204
00:14:10,020 --> 00:14:15,240
If somebody goes to a website framing your
website.

205
00:14:15,240 --> 00:14:19,220
Your website will behave differently.

206
00:14:19,220 --> 00:14:20,440
Which is bad potentially.

207
00:14:20,440 --> 00:14:23,430
It will look bad.

208
00:14:23,430 --> 00:14:27,640
And there is more we can do with frames.

209
00:14:27,640 --> 00:14:32,820
I don't know if you have Xss filters and know
how they work.

210
00:14:32,820 --> 00:14:36,090
It is built into the browser, can help an
attacker.

211
00:14:36,090 --> 00:14:40,900
How do they work?

212
00:14:40,900 --> 00:14:45,921
The filter is looking at the request and response.

213
00:14:45,921 --> 00:14:51,610
If there is something smuggled into the webpage.

214
00:14:51,610 --> 00:14:55,290
The filter will say, the script has been in
the response.

215
00:14:55,290 --> 00:14:58,850
I'm sure this is an attack.

216
00:14:58,850 --> 00:15:02,780
It is not passed as script.

217
00:15:02,780 --> 00:15:04,960
The user is secure.

218
00:15:04,960 --> 00:15:13,390
What if there was static Html or Javascript
in the page.

219
00:15:13,390 --> 00:15:16,820
But it doesn't have value.

220
00:15:16,820 --> 00:15:18,420
Making up a fake.

221
00:15:18,420 --> 00:15:20,230
And sending it to the server.

222
00:15:20,230 --> 00:15:22,040
The server doesn't work with it.

223
00:15:22,040 --> 00:15:24,790
It ignores it.

224
00:15:24,790 --> 00:15:29,320
The browser will think, this is the same,
I'm going to remove it.

225
00:15:29,320 --> 00:15:35,130
What if it is a security?

226
00:15:35,130 --> 00:15:40,420
You don't want your website to be framed.

227
00:15:40,420 --> 00:15:47,170
Key is to send a header that sends: Deny.

228
00:15:47,170 --> 00:15:48,820
If you do need it.

229
00:15:48,820 --> 00:15:55,190
Allow from this or same origin.

230
00:15:55,190 --> 00:15:59,440
You know what same origin means.

231
00:15:59,440 --> 00:16:09,510
It is a security problem we had for 12 years.

232
00:16:09,510 --> 00:16:11,190
It was implemented in 2008.

233
00:16:11,190 --> 00:16:15,650
It was only published last year.

234
00:16:15,650 --> 00:16:16,820
There is much more.

235
00:16:16,820 --> 00:16:20,740
A person could do to your website and the
users.

236
00:16:20,740 --> 00:16:22,770
If you allow it to be displayed in a frame.

237
00:16:22,770 --> 00:16:26,970
I wrote a long p paper.

238
00:16:26,970 --> 00:16:29,080
There will be links on the slides.

239
00:16:29,080 --> 00:16:35,040
If you are interested, I recommend you look
into that.

240
00:16:35,040 --> 00:16:38,420
I want to jump into the future of browser
security.

241
00:16:38,420 --> 00:16:41,770
I have to talk about frames again.

242
00:16:41,770 --> 00:16:42,770
Cross site scripting.

243
00:16:42,770 --> 00:16:47,980
And I want to talk about content delivery.

244
00:16:47,980 --> 00:16:51,260
Which are so useful.

245
00:16:51,260 --> 00:16:53,860
How do we include untrusted content?

246
00:16:53,860 --> 00:17:00,940
The threat is, we have to show something,
a user upload or from third party, what we

247
00:17:00,940 --> 00:17:05,980
can't control, but we are going to show it.

248
00:17:05,980 --> 00:17:09,329
Or general things.

249
00:17:09,329 --> 00:17:15,980
The man in the middle, could mess with it.

250
00:17:15,980 --> 00:17:20,880
And we all know that cross site scripting
can redirect.

251
00:17:20,880 --> 00:17:24,790
To explain how to do it.

252
00:17:24,790 --> 00:17:29,970
I'll introduce you to Not so much authority.

253
00:17:29,970 --> 00:17:36,009
Access to the frames that are necessary.

254
00:17:36,009 --> 00:17:41,250
In system security theory, we talk about the
principle of least authority.

255
00:17:41,250 --> 00:17:46,529
Only access to the resources that it needs,
nothing more.

256
00:17:46,529 --> 00:17:49,440
The least possible resources.

257
00:17:49,440 --> 00:17:53,299
But least authority in a browser is weird.

258
00:17:53,299 --> 00:18:00,240
It has been proven that Html 5, without Javascript...

259
00:18:00,240 --> 00:18:02,779
I wouldn't say.

260
00:18:02,779 --> 00:18:03,820
To solve this.

261
00:18:03,820 --> 00:18:07,320
There is a feature, iframe Sandbox.

262
00:18:07,320 --> 00:18:12,320
This attribute makes it safe by default.

263
00:18:12,320 --> 00:18:17,799
It forbids scripts, disallows forwarding of
the outer window.

264
00:18:17,799 --> 00:18:19,710
No forms.

265
00:18:19,710 --> 00:18:21,639
No plugins.

266
00:18:21,639 --> 00:18:26,809
And no matter what the origin of the content
of the frame to the outer window.

267
00:18:26,809 --> 00:18:31,039
It is a unique and different origin.

268
00:18:31,039 --> 00:18:34,269
No matter what they are in real life.

269
00:18:34,269 --> 00:18:40,950
If you want to mess with Sandbox and you need
scripts, you can make it weaker.

270
00:18:40,950 --> 00:18:42,450
I'm not going through the keywords.

271
00:18:42,450 --> 00:18:43,850
It is straight forward.

272
00:18:43,850 --> 00:18:48,700
Let's go on to Xss and fixing it.

273
00:18:48,700 --> 00:18:50,080
Who knows about Csp?

274
00:18:50,080 --> 00:18:54,110
Who is using Csp?

275
00:18:54,110 --> 00:18:55,610
Yes.

276
00:18:55,610 --> 00:18:57,539
That's the problem.

277
00:18:57,539 --> 00:18:59,409
Nobody is.

278
00:18:59,409 --> 00:19:03,779
There are great introductions how to make
it work for your web application without having

279
00:19:03,779 --> 00:19:05,700
to rewrite.

280
00:19:05,700 --> 00:19:08,100
There are 2 really good talks.

281
00:19:08,100 --> 00:19:12,190
If you are interested.

282
00:19:12,190 --> 00:19:13,919
First one is last year, Mike West.

283
00:19:13,919 --> 00:19:18,029
It was referenced by Tim.

284
00:19:18,029 --> 00:19:20,600
Previously before me.

285
00:19:20,600 --> 00:19:26,179
It explains it in a very long way.

286
00:19:26,179 --> 00:19:33,690
A colleague Mark Goodwin went to Sheffield
a few months ago.

287
00:19:33,690 --> 00:19:39,179
And tried to focus on not how it works, but
how to make it work for you.

288
00:19:39,179 --> 00:19:44,620
How to make sure your web application is more
secure without having to rewrite.

289
00:19:44,620 --> 00:19:47,950
A few developer tools as well.

290
00:19:47,950 --> 00:19:51,789
I just want to say, look into the talks.

291
00:19:51,789 --> 00:19:53,100
It is good.

292
00:19:53,100 --> 00:19:55,150
It doesn't make sense for me to repeat.

293
00:19:55,150 --> 00:20:03,350
As I said, I do want to talk about content
delivery.

294
00:20:03,350 --> 00:20:10,110
You include a script from something that is
not under your control.

295
00:20:10,110 --> 00:20:13,070
It is highly convenient.

296
00:20:13,070 --> 00:20:20,580
There is something that is most likely in
the browser cache.

297
00:20:20,580 --> 00:20:22,269
Other people are using the same content delivery
network.

298
00:20:22,269 --> 00:20:28,090
The website is nice and faster.

299
00:20:28,090 --> 00:20:30,230
But what if someone changes the file?

300
00:20:30,230 --> 00:20:36,749
It means, they can execute script and change
everything.

301
00:20:36,749 --> 00:20:42,179
It doesn't mean just for this webpage, but
all in the same origin.

302
00:20:42,179 --> 00:20:49,539
So, the plan is, the idea for the future is
to lock it down with sub resource integrity.

303
00:20:49,539 --> 00:20:51,759
It is yet to be a W3C application.

304
00:20:51,759 --> 00:20:58,419
This is how it looks like.

305
00:20:58,419 --> 00:20:59,600
It doesn't look pretty.

306
00:20:59,600 --> 00:21:01,549
What you do is, your computer hash.

307
00:21:01,549 --> 00:21:08,309
If the file changes, you don't load it.

308
00:21:08,309 --> 00:21:17,019
Problem might be, the whole web application
doesn't work.

309
00:21:17,019 --> 00:21:18,700
It doesn't look much more pretty.

310
00:21:18,700 --> 00:21:22,230
But there is some source.

311
00:21:22,230 --> 00:21:24,029
The fast bit.

312
00:21:24,029 --> 00:21:25,029
To be in the cache.

313
00:21:25,029 --> 00:21:29,590
It is tried to load by the browser and the
browser does all the checks.

314
00:21:29,590 --> 00:21:31,299
Loads the script.

315
00:21:31,299 --> 00:21:32,299
And checks if it matches.

316
00:21:32,299 --> 00:21:35,789
It is not going to break.

317
00:21:35,789 --> 00:21:44,210
It is going to use the source from your domain,
which is probably not in the cache.

318
00:21:44,210 --> 00:21:48,740
But the website keeps on working.

319
00:21:48,740 --> 00:21:49,740
As I said, feedback is appreciated.

320
00:21:49,740 --> 00:21:55,960
We can talk about it later.

321
00:21:55,960 --> 00:21:57,210
There is much more into it.

322
00:21:57,210 --> 00:21:59,059
I don't want go through the details.

323
00:21:59,059 --> 00:22:03,840
This may be an option for you.

324
00:22:03,840 --> 00:22:06,019
Now I am going to conclude.

325
00:22:06,019 --> 00:22:10,480
And say the browser can help the web application.

326
00:22:10,480 --> 00:22:17,929
There are more improvements on the horizon.

327
00:22:17,929 --> 00:22:22,059
I might want to call it chaotic.

328
00:22:22,059 --> 00:22:29,399
There were basic security checks.

329
00:22:29,399 --> 00:22:34,279
Provide encryption.

330
00:22:34,279 --> 00:22:36,450
There are cookies, that works.

331
00:22:36,450 --> 00:22:44,549
And then the web as a platform, rich application
platform, was adopted between 1995 and now,

332
00:22:44,549 --> 00:22:50,169
everyone is using a website for something.

333
00:22:50,169 --> 00:22:57,429
Maybe we shouldn't put the patches on top
and try to think about it when we develop

334
00:22:57,429 --> 00:22:59,470
new things.

335
00:22:59,470 --> 00:23:09,159
If you are concerned about your website, that's
a nice dashboard.

336
00:23:09,159 --> 00:23:15,309
Gives an overview of the security features.

337
00:23:15,309 --> 00:23:23,279
If your website looks red, don't feel too
bad.

338
00:23:23,279 --> 00:23:25,010
Thank you for listening.

339
00:23:25,010 --> 00:23:29,619
If you have questions, I will be at the Mozilla
hacklounge after this talk.

340
00:23:29,619 --> 00:23:33,179
I don't think there will be time for questions.

341
00:23:33,179 --> 00:23:34,179
Thanks for listening.

