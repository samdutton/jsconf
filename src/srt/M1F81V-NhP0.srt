1
00:00:00,760 --> 00:00:10,089

[Music]

2
00:00:10,099 --> 00:00:14,940
hello when I star this hi everyone I'm

3
00:00:14,940 --> 00:00:17,850
so excited to be here I hope you like my

4
00:00:17,850 --> 00:00:19,590
talk is the last one we had everyone a

5
00:00:19,590 --> 00:00:22,380
little bit tired but - today I'm going

6
00:00:22,380 --> 00:00:24,240
to talk about the stencil which is this

7
00:00:24,240 --> 00:00:26,010
open-source project we have been working

8
00:00:26,010 --> 00:00:29,220
for the last few years and in general I

9
00:00:29,220 --> 00:00:31,830
have a compiler can help you build

10
00:00:31,830 --> 00:00:34,530
better applications and in general most

11
00:00:34,530 --> 00:00:37,469
specifically based design systems so my

12
00:00:37,469 --> 00:00:39,090
name is manu and i work as a server

13
00:00:39,090 --> 00:00:42,030
engineer at ionic which is the the team

14
00:00:42,030 --> 00:00:43,440
that builds ionic framework and a

15
00:00:43,440 --> 00:00:46,980
stencil itself so we basically are a

16
00:00:46,980 --> 00:00:48,719
company a tooling company at one - bill

17
00:00:48,719 --> 00:00:51,149
to help web developers build

18
00:00:51,149 --> 00:00:54,800
applications 100% based in western ology

19
00:00:54,800 --> 00:00:57,750
so okay so before getting into much

20
00:00:57,750 --> 00:01:00,570
detail I want to start with true history

21
00:01:00,570 --> 00:01:03,719
is that 12 years ago JavaScript was not

22
00:01:03,719 --> 00:01:05,760
what it is today it was a mess

23
00:01:05,760 --> 00:01:07,260
different browsers have different

24
00:01:07,260 --> 00:01:10,260
behavior Internet Explorer an escape and

25
00:01:10,260 --> 00:01:13,680
JavaScript itself like the high level

26
00:01:13,680 --> 00:01:16,320
API is that today we consider basic so

27
00:01:16,320 --> 00:01:17,700
it was really hard to break complex

28
00:01:17,700 --> 00:01:21,930
application on top of it then something

29
00:01:21,930 --> 00:01:23,880
happened chicory appear and he came to

30
00:01:23,880 --> 00:01:25,560
solve all the problems that JavaScript

31
00:01:25,560 --> 00:01:27,509
had at that time it normalized the

32
00:01:27,509 --> 00:01:29,250
behavior between browsers and provide a

33
00:01:29,250 --> 00:01:32,939
higher set of API so that actually some

34
00:01:32,939 --> 00:01:34,619
of them are part of the of the web today

35
00:01:34,619 --> 00:01:37,290
like curry selector so but the biggest

36
00:01:37,290 --> 00:01:39,090
innovation is that it allows Java Script

37
00:01:39,090 --> 00:01:41,790
to grow as a language and allowed to to

38
00:01:41,790 --> 00:01:43,409
be used for more complex application

39
00:01:43,409 --> 00:01:45,750
that just like some simple formalization

40
00:01:45,750 --> 00:01:48,810
and in fact my company bill Kodaka was

41
00:01:48,810 --> 00:01:50,899
one was one of the first Design Systems

42
00:01:50,899 --> 00:01:53,640
sorry drag and drop tools for UI

43
00:01:53,640 --> 00:01:56,280
components and it was based in jQuery

44
00:01:56,280 --> 00:01:58,979
Mobile so in order to instantiate and

45
00:01:58,979 --> 00:02:01,079
create these components you will have to

46
00:02:01,079 --> 00:02:04,649
use the imperative API of query so it

47
00:02:04,649 --> 00:02:08,310
work but it was not great and some years

48
00:02:08,310 --> 00:02:08,700
later

49
00:02:08,700 --> 00:02:11,489
ungulate years appear and the geo versus

50
00:02:11,489 --> 00:02:13,350
Java JavaScript

51
00:02:13,350 --> 00:02:15,450
system was a little bit healthier so the

52
00:02:15,450 --> 00:02:18,570
problem is that JavaScript had angularjs

53
00:02:18,570 --> 00:02:21,690
had to solve was not the same ones it

54
00:02:21,690 --> 00:02:23,070
doesn't only provide a higher layer of

55
00:02:23,070 --> 00:02:25,890
higher-level ap is by the way of working

56
00:02:25,890 --> 00:02:27,690
now we are organizing a set of good

57
00:02:27,690 --> 00:02:29,550
defaults but today we know has a

58
00:02:29,550 --> 00:02:32,370
framework so that help javascript to

59
00:02:32,370 --> 00:02:34,830
grow even more and introduce the country

60
00:02:34,830 --> 00:02:36,480
of directives that that was mine lying

61
00:02:36,480 --> 00:02:39,180
to us and it was closer at our idea of

62
00:02:39,180 --> 00:02:41,400
components so we were so excited about

63
00:02:41,400 --> 00:02:44,430
it that we decided to port everything we

64
00:02:44,430 --> 00:02:47,820
got into into this new system because it

65
00:02:47,820 --> 00:02:50,430
was a big step forward and that's how

66
00:02:50,430 --> 00:02:54,450
ionic was born then angular ideas the

67
00:02:54,450 --> 00:02:56,340
angular team announced angular 2 and it

68
00:02:56,340 --> 00:02:58,680
was going to be faster smaller mobile

69
00:02:58,680 --> 00:03:01,500
first everything so angularjs worked so

70
00:03:01,500 --> 00:03:03,060
great for us that we just decided to

71
00:03:03,060 --> 00:03:06,090
make the investment and that's how ionic

72
00:03:06,090 --> 00:03:09,750
2 ionic 3 bounce poor so even though the

73
00:03:09,750 --> 00:03:11,670
name is the same it will require a

74
00:03:11,670 --> 00:03:14,010
complete refactor and think about that

75
00:03:14,010 --> 00:03:16,140
this is already the third time that we

76
00:03:16,140 --> 00:03:19,800
have to go the same components and today

77
00:03:19,800 --> 00:03:22,560
well the ecosystem is completely

78
00:03:22,560 --> 00:03:23,820
different there are many frameworks and

79
00:03:23,820 --> 00:03:25,800
alternatives and all of them are great

80
00:03:25,800 --> 00:03:28,080
it just depends on your own preferences

81
00:03:28,080 --> 00:03:30,900
your team your team your skills your

82
00:03:30,900 --> 00:03:33,180
product or even was just easier for

83
00:03:33,180 --> 00:03:36,360
hiring in a specific country so going

84
00:03:36,360 --> 00:03:38,370
back to our mission as a company that we

85
00:03:38,370 --> 00:03:41,250
want to help all the web developers not

86
00:03:41,250 --> 00:03:44,700
the ones using a specific framework so

87
00:03:44,700 --> 00:03:46,050
we start thinking about how we could

88
00:03:46,050 --> 00:03:48,780
achieve that how we could if we have to

89
00:03:48,780 --> 00:03:51,930
port this 100 components through every

90
00:03:51,930 --> 00:03:53,850
popular framework of today and maybe

91
00:03:53,850 --> 00:03:56,250
tomorrow and of course the answer is not

92
00:03:56,250 --> 00:03:58,290
we know that we have to go through this

93
00:03:58,290 --> 00:04:00,360
refactor many many times and we know

94
00:04:00,360 --> 00:04:01,890
that that's not going to happen it's so

95
00:04:01,890 --> 00:04:03,570
time consuming it's and we quickly

96
00:04:03,570 --> 00:04:04,920
realize this is not going to be the

97
00:04:04,920 --> 00:04:06,690
solution so we have to think about

98
00:04:06,690 --> 00:04:10,560
something else and think like frameworks

99
00:04:10,560 --> 00:04:14,340
are great for building final products

100
00:04:14,340 --> 00:04:16,680
even if you say that reacts not a

101
00:04:16,680 --> 00:04:18,930
framework it is they built a framework

102
00:04:18,930 --> 00:04:20,520
on around it and that's not a bad thing

103
00:04:20,520 --> 00:04:24,300
it's inclusive create react app a router

104
00:04:24,300 --> 00:04:26,730
away of organized in a way of testing

105
00:04:26,730 --> 00:04:28,320
a set of good defaults and that makes

106
00:04:28,320 --> 00:04:31,320
sense because that allows you to focus

107
00:04:31,320 --> 00:04:33,660
into building your product you don't

108
00:04:33,660 --> 00:04:35,520
have to make these hundreds of micro

109
00:04:35,520 --> 00:04:40,500
decisions every single time so so yeah

110
00:04:40,500 --> 00:04:42,240
I'm not remain tabled in the wheel every

111
00:04:42,240 --> 00:04:44,250
time so but at the same time they are

112
00:04:44,250 --> 00:04:46,710
terrible for building reusable

113
00:04:46,710 --> 00:04:48,660
components and you might say that this

114
00:04:48,660 --> 00:04:51,150
is working for you today I mean it did

115
00:04:51,150 --> 00:04:53,880
for us but at some point you might want

116
00:04:53,880 --> 00:04:56,550
to use a different technology or the use

117
00:04:56,550 --> 00:04:59,010
cases change or you just want to serve

118
00:04:59,010 --> 00:05:01,740
your component with more people and not

119
00:05:01,740 --> 00:05:04,010
only people will use the same framework

120
00:05:04,010 --> 00:05:08,100
so the point of building reusable

121
00:05:08,100 --> 00:05:10,380
components is to last in time right so

122
00:05:10,380 --> 00:05:12,870
it's pretty much like investment you

123
00:05:12,870 --> 00:05:15,000
make to allow you to build faster in the

124
00:05:15,000 --> 00:05:17,760
future so you should build them on top

125
00:05:17,760 --> 00:05:19,440
of future proof technology as the web

126
00:05:19,440 --> 00:05:21,840
there's the web that doesn't change so

127
00:05:21,840 --> 00:05:23,880
the solution of this problem of course

128
00:05:23,880 --> 00:05:25,650
is where components but again this is

129
00:05:25,650 --> 00:05:27,420
very important web component doesn't not

130
00:05:27,420 --> 00:05:29,310
not solve any other problem yes

131
00:05:29,310 --> 00:05:31,800
universal model of components and even

132
00:05:31,800 --> 00:05:34,350
if you like it or not it will work so

133
00:05:34,350 --> 00:05:36,420
I'm sorry for real kites sometimes but

134
00:05:36,420 --> 00:05:38,730
this is will work you can go around it

135
00:05:38,730 --> 00:05:43,500
so but I'd say it doesn't handle

136
00:05:43,500 --> 00:05:44,190
anything else

137
00:05:44,190 --> 00:05:47,070
so you still I believe that frameworks

138
00:05:47,070 --> 00:05:48,450
policies forever they will not be

139
00:05:48,450 --> 00:05:51,060
replaced in the same way that angular

140
00:05:51,060 --> 00:05:53,400
and react and view does not replace the

141
00:05:53,400 --> 00:05:55,890
API is the Web API of today we just live

142
00:05:55,890 --> 00:05:59,010
together and of course we know in the

143
00:05:59,010 --> 00:06:02,310
past that some API is web api they break

144
00:06:02,310 --> 00:06:04,710
they remove sometimes but there is

145
00:06:04,710 --> 00:06:07,140
something in common for APS that have a

146
00:06:07,140 --> 00:06:10,440
full consensus across browsers as is

147
00:06:10,440 --> 00:06:13,080
that they will be around forever so even

148
00:06:13,080 --> 00:06:16,650
if yeah so think about the website you

149
00:06:16,650 --> 00:06:18,840
build 20 years ago is still worse today

150
00:06:18,840 --> 00:06:20,820
because the web can break I mean a

151
00:06:20,820 --> 00:06:23,970
banker can break but the web can't so if

152
00:06:23,970 --> 00:06:26,040
you will a web component with it it will

153
00:06:26,040 --> 00:06:29,490
still work in the future framework so

154
00:06:29,490 --> 00:06:34,230
around that idea of we want we don't

155
00:06:34,230 --> 00:06:35,970
want to make the decision of the frame

156
00:06:35,970 --> 00:06:37,830
where you have to use because you we

157
00:06:37,830 --> 00:06:39,330
don't know your product we just build

158
00:06:39,330 --> 00:06:40,319
the components

159
00:06:40,319 --> 00:06:43,050
so I run that idea we create ironically

160
00:06:43,050 --> 00:06:45,629
to the lightest ionic ionic for is based

161
00:06:45,629 --> 00:06:47,999
on web components and this fourth

162
00:06:47,999 --> 00:06:50,460
refactor is very different because this

163
00:06:50,460 --> 00:06:52,919
time we didn't build on top of the

164
00:06:52,919 --> 00:06:55,050
angularjs directives or the angular

165
00:06:55,050 --> 00:06:58,110
components this time is built on top of

166
00:06:58,110 --> 00:07:00,089
a standard way ap is they are just web

167
00:07:00,089 --> 00:07:05,219
components that stay in the HTML so but

168
00:07:05,219 --> 00:07:07,349
when before doing that we found that as

169
00:07:07,349 --> 00:07:09,389
I said like web components a very little

170
00:07:09,389 --> 00:07:11,189
label API that says it doesn't solve any

171
00:07:11,189 --> 00:07:14,669
other thing so what happens when a sober

172
00:07:14,669 --> 00:07:18,089
engineer has to deal with a you know

173
00:07:18,089 --> 00:07:20,009
with a low-level API well they just

174
00:07:20,009 --> 00:07:22,469
create an abstraction and that usually

175
00:07:22,469 --> 00:07:25,589
comes with a new problem and the safe of

176
00:07:25,589 --> 00:07:27,180
overhead but I'm not saying is a

177
00:07:27,180 --> 00:07:28,080
performance overhead

178
00:07:28,080 --> 00:07:31,529
it's a knowledge is a runtime locking

179
00:07:31,529 --> 00:07:33,330
you are not reading you are not longer

180
00:07:33,330 --> 00:07:35,639
building on top of this fix it

181
00:07:35,639 --> 00:07:37,589
Web API you are building on top of

182
00:07:37,589 --> 00:07:39,919
something else that can break and change

183
00:07:39,919 --> 00:07:42,719
so we are start thinking about what will

184
00:07:42,719 --> 00:07:44,909
be the sweet spot here

185
00:07:44,909 --> 00:07:47,399
what if the obstruction is a compiler

186
00:07:47,399 --> 00:07:49,169
time meaning that there is not any

187
00:07:49,169 --> 00:07:51,779
specific framework any specific runtime

188
00:07:51,779 --> 00:07:53,610
so you sip your component but the design

189
00:07:53,610 --> 00:07:56,099
comes with a well-defined runtime

190
00:07:56,099 --> 00:07:57,809
instead the compiler will take your

191
00:07:57,809 --> 00:07:59,729
components and generate the best

192
00:07:59,729 --> 00:08:02,309
possible source code I mean and it will

193
00:08:02,309 --> 00:08:04,069
generate the best possible component

194
00:08:04,069 --> 00:08:06,269
this has worked for decades like

195
00:08:06,269 --> 00:08:09,050
compiled languages like C and rest and

196
00:08:09,050 --> 00:08:12,240
they they don't have to care when

197
00:08:12,240 --> 00:08:14,969
interval this is a new CPU or they have

198
00:08:14,969 --> 00:08:17,879
to target a different CPU architecture

199
00:08:17,879 --> 00:08:19,860
instead they just use a different

200
00:08:19,860 --> 00:08:22,649
compiler or they upgrade the existing

201
00:08:22,649 --> 00:08:26,580
one and that exactly will stem sleights

202
00:08:26,580 --> 00:08:29,459
it's a build time abstraction it's a

203
00:08:29,459 --> 00:08:33,689
compiler for the well as knology the web

204
00:08:33,689 --> 00:08:35,849
will be this always moving target

205
00:08:35,849 --> 00:08:39,630
sorry the the web will be the hardware

206
00:08:39,630 --> 00:08:41,639
this always moving target and stencil

207
00:08:41,639 --> 00:08:44,519
the compiler taking your components and

208
00:08:44,519 --> 00:08:47,480
using the newest new newest api's

209
00:08:47,480 --> 00:08:49,500
without developers having to make any

210
00:08:49,500 --> 00:08:52,980
single change so the idea is that we are

211
00:08:52,980 --> 00:08:54,150
not only able to

212
00:08:54,150 --> 00:08:55,920
highly optimized components we will see

213
00:08:55,920 --> 00:08:58,620
later but avoid making any kind of

214
00:08:58,620 --> 00:09:00,960
breaking change and this is really

215
00:09:00,960 --> 00:09:03,660
important for us its main use case

216
00:09:03,660 --> 00:09:06,750
because we are we have already go

217
00:09:06,750 --> 00:09:10,020
through all these three factors and our

218
00:09:10,020 --> 00:09:11,700
main use case is to build reusable

219
00:09:11,700 --> 00:09:13,740
components decided implement design

220
00:09:13,740 --> 00:09:16,200
systems and being future proof so we

221
00:09:16,200 --> 00:09:19,290
have the same design the API a compiler

222
00:09:19,290 --> 00:09:22,910
of stencil to restrict ourselves to

223
00:09:22,910 --> 00:09:26,040
stand our interfaces like classes

224
00:09:26,040 --> 00:09:28,950
properties HTML attributes and Dom

225
00:09:28,950 --> 00:09:31,080
events we are don't try to have a

226
00:09:31,080 --> 00:09:37,350
stencil way of doing things so this way

227
00:09:37,350 --> 00:09:39,210
we can keep changing how the compiler

228
00:09:39,210 --> 00:09:42,810
works the mutations we apply and using

229
00:09:42,810 --> 00:09:45,810
new new API s without requiring

230
00:09:45,810 --> 00:09:47,280
developers to make any change so for

231
00:09:47,280 --> 00:09:49,920
example let's say that next year Chrome

232
00:09:49,920 --> 00:09:52,500
zips a new feature that this a built-in

233
00:09:52,500 --> 00:09:55,440
baton or some kind of template system

234
00:09:55,440 --> 00:09:57,450
this is going to be built into the

235
00:09:57,450 --> 00:09:59,490
browser and it's going to be much faster

236
00:09:59,490 --> 00:10:03,000
because well it's probably programming

237
00:10:03,000 --> 00:10:07,320
in C++ or wherever it is and you don't

238
00:10:07,320 --> 00:10:09,900
have to see any other script right so in

239
00:10:09,900 --> 00:10:12,450
a stencil that could happen and you will

240
00:10:12,450 --> 00:10:13,920
not have to make any change we will just

241
00:10:13,920 --> 00:10:17,070
tell your component and change how that

242
00:10:17,070 --> 00:10:19,530
thing works so even there is not a

243
00:10:19,530 --> 00:10:21,900
specific render like even you know like

244
00:10:21,900 --> 00:10:23,610
we are using some a specific rental

245
00:10:23,610 --> 00:10:29,190
render we could change it so in addition

246
00:10:29,190 --> 00:10:30,900
we can support our browsers in the same

247
00:10:30,900 --> 00:10:34,530
the same idea like like a cig compiler

248
00:10:34,530 --> 00:10:36,240
can different can generate different

249
00:10:36,240 --> 00:10:38,370
targets for a different browser after a

250
00:10:38,370 --> 00:10:40,500
sec Impaler can differ can generate code

251
00:10:40,500 --> 00:10:42,540
for different architectures we can do

252
00:10:42,540 --> 00:10:44,540
the same for different browsers without

253
00:10:44,540 --> 00:10:46,740
developers having to think about it

254
00:10:46,740 --> 00:10:49,350
so for example the molar bill the most

255
00:10:49,350 --> 00:10:51,390
of your users actually using Chrome

256
00:10:51,390 --> 00:10:55,380
Firefox Safari modern browsers will get

257
00:10:55,380 --> 00:10:57,450
the smallest bundle without any kind of

258
00:10:57,450 --> 00:11:00,750
polyfill without using modern JavaScript

259
00:11:00,750 --> 00:11:04,320
features like native async/await or ES

260
00:11:04,320 --> 00:11:07,769
modules and all browsers well if you had

261
00:11:07,769 --> 00:11:10,290
to support them like inference floor

262
00:11:10,290 --> 00:11:12,509
dibbles I get a little bit bigger es5

263
00:11:12,509 --> 00:11:14,699
angles and this is an example of the

264
00:11:14,699 --> 00:11:17,639
same component it's I am button

265
00:11:17,639 --> 00:11:20,160
it's Batum as a button with material

266
00:11:20,160 --> 00:11:23,819
design and iOS styles the stencil the

267
00:11:23,819 --> 00:11:25,739
compiler generates up to eight different

268
00:11:25,739 --> 00:11:29,480
versions but that doesn't mean that the

269
00:11:29,480 --> 00:11:31,529
that the client will have to download

270
00:11:31,529 --> 00:11:33,540
all these six files in fat is just going

271
00:11:33,540 --> 00:11:35,759
to download one of them so we can see

272
00:11:35,759 --> 00:11:39,059
that some files have the es5 prefix or

273
00:11:39,059 --> 00:11:42,029
yeah so that means that it's cs5 is all

274
00:11:42,029 --> 00:11:46,139
the code SC means that for browser that

275
00:11:46,139 --> 00:11:48,209
doesn't support out on but in any case

276
00:11:48,209 --> 00:11:50,100
this way we can cover the whole spectrum

277
00:11:50,100 --> 00:11:52,350
of browsers in the most efficient way

278
00:11:52,350 --> 00:11:56,040
and we can provide that and we can do it

279
00:11:56,040 --> 00:11:58,739
with the vests developer experience the

280
00:11:58,739 --> 00:12:00,509
one you are used to it because think

281
00:12:00,509 --> 00:12:02,429
about it we build a stencil for us and

282
00:12:02,429 --> 00:12:05,189
obviously we use frameworks before so we

283
00:12:05,189 --> 00:12:06,720
wanted to be productive in the same way

284
00:12:06,720 --> 00:12:07,589
we are not yet

285
00:12:07,589 --> 00:12:09,360
tell me now we're engineers too bright

286
00:12:09,360 --> 00:12:13,040
you know like assembly you know like

287
00:12:13,040 --> 00:12:14,939
assembly free well that will be that

288
00:12:14,939 --> 00:12:18,689
about components but having this this

289
00:12:18,689 --> 00:12:20,220
services like serviceworker generation

290
00:12:20,220 --> 00:12:23,100
pre-rendering fast incremental builds

291
00:12:23,100 --> 00:12:24,540
like a deep integration with typescript

292
00:12:24,540 --> 00:12:27,749
and their types and you know dogs

293
00:12:27,749 --> 00:12:29,759
generation we take the static analysis

294
00:12:29,759 --> 00:12:32,009
of this component and we can even

295
00:12:32,009 --> 00:12:33,480
generate outer regenerate that read me

296
00:12:33,480 --> 00:12:35,939
that you know yes deployed your ducks in

297
00:12:35,939 --> 00:12:38,519
the in github having to make any change

298
00:12:38,519 --> 00:12:41,939
or we have valuation output where we can

299
00:12:41,939 --> 00:12:44,540
integrate with things like storybook or

300
00:12:44,540 --> 00:12:46,980
your houston web generator so for

301
00:12:46,980 --> 00:12:50,669
example for the ducts of ionic in the

302
00:12:50,669 --> 00:12:53,309
web site we use a JSON target that puts

303
00:12:53,309 --> 00:12:56,309
all the information and even like as a

304
00:12:56,309 --> 00:12:59,160
bonus we even part the CSS and we

305
00:12:59,160 --> 00:13:01,410
extract the CSS variables that you might

306
00:13:01,410 --> 00:13:03,569
use because this was a big deal for us

307
00:13:03,569 --> 00:13:06,929
and you know like we have peaceful DF

308
00:13:06,929 --> 00:13:09,269
testing we use puppeteer under the hood

309
00:13:09,269 --> 00:13:11,339
everything this is already done you

310
00:13:11,339 --> 00:13:14,549
don't have to implement these things and

311
00:13:14,549 --> 00:13:16,740
configure these things so we have built

312
00:13:16,740 --> 00:13:20,009
this in the example Michael eat Randy

313
00:13:20,009 --> 00:13:20,920
they

314
00:13:20,920 --> 00:13:24,560
some issues with that I am an input and

315
00:13:24,560 --> 00:13:26,510
here's the diff and we can review that

316
00:13:26,510 --> 00:13:29,420
previously and but the idea is that we

317
00:13:29,420 --> 00:13:31,279
can have web components and still have

318
00:13:31,279 --> 00:13:34,790
framework level features today I'm

319
00:13:34,790 --> 00:13:36,740
announcing a big milestone in

320
00:13:36,740 --> 00:13:38,980
development or development of a stencil

321
00:13:38,980 --> 00:13:42,589
stencil one and you might have II wonder

322
00:13:42,589 --> 00:13:45,170
we are using we are not using numbers

323
00:13:45,170 --> 00:13:49,010
just like 1.0 but because essential one

324
00:13:49,010 --> 00:13:50,900
is a sanction mental it's not an

325
00:13:50,900 --> 00:13:53,660
incremental release it's a consolidation

326
00:13:53,660 --> 00:13:55,940
consolidation of the API since L was

327
00:13:55,940 --> 00:13:58,430
initially built to solve the problems at

328
00:13:58,430 --> 00:14:01,190
ionic but it an app solving a lot more

329
00:14:01,190 --> 00:14:03,350
problems for a lot more people so during

330
00:14:03,350 --> 00:14:04,490
the last six months we have been

331
00:14:04,490 --> 00:14:06,230
collecting all this big pad for

332
00:14:06,230 --> 00:14:08,900
thousands of developers and use need to

333
00:14:08,900 --> 00:14:11,480
consolidate this API that we that we are

334
00:14:11,480 --> 00:14:13,910
proud of in addition we have a new

335
00:14:13,910 --> 00:14:19,450
random new compiler so one of the most

336
00:14:19,450 --> 00:14:21,740
interesting things about the stencil is

337
00:14:21,740 --> 00:14:24,770
that when you instance this about

338
00:14:24,770 --> 00:14:26,540
components right so you're not using it

339
00:14:26,540 --> 00:14:30,680
muscle time to create an app right so

340
00:14:30,680 --> 00:14:32,240
how will you handle the list logging

341
00:14:32,240 --> 00:14:33,350
because most of the time is about

342
00:14:33,350 --> 00:14:36,290
routing it's a routing based list loaded

343
00:14:36,290 --> 00:14:39,200
but here we can have that so instead we

344
00:14:39,200 --> 00:14:40,700
took a different approach is a component

345
00:14:40,700 --> 00:14:43,310
based lazy loading because we want to

346
00:14:43,310 --> 00:14:45,350
use a stencil to build this components

347
00:14:45,350 --> 00:14:46,640
but they will be used in different

348
00:14:46,640 --> 00:14:49,310
places they will may be used in react we

349
00:14:49,310 --> 00:14:50,410
have Bionic react

350
00:14:50,410 --> 00:14:53,870
Yanik angular they have different ways

351
00:14:53,870 --> 00:14:56,900
of lace noise so in order to do that in

352
00:14:56,900 --> 00:14:58,850
stencil is able to perform the static

353
00:14:58,850 --> 00:15:01,670
analysis of how the components depend on

354
00:15:01,670 --> 00:15:03,860
each other and apply the best

355
00:15:03,860 --> 00:15:05,630
optimizations and the real person things

356
00:15:05,630 --> 00:15:10,430
have to deal with it so in sensor one we

357
00:15:10,430 --> 00:15:12,440
have a new algorithm in spiral a

358
00:15:12,440 --> 00:15:14,240
matching learning technique called war

359
00:15:14,240 --> 00:15:15,470
embeddings and I'm going to explain

360
00:15:15,470 --> 00:15:17,839
because kind of weird but the thing is

361
00:15:17,839 --> 00:15:21,950
that our use case all the components are

362
00:15:21,950 --> 00:15:24,500
entry points because we don't know how

363
00:15:24,500 --> 00:15:28,190
they are going to be used so like

364
00:15:28,190 --> 00:15:30,890
traditional tacking algorithms like the

365
00:15:30,890 --> 00:15:33,860
one using webpack or or OLAP give

366
00:15:33,860 --> 00:15:35,360
generate a different bundle for this

367
00:15:35,360 --> 00:15:36,920
application for each component if you

368
00:15:36,920 --> 00:15:39,410
want to lazy low them so if you have 20

369
00:15:39,410 --> 00:15:41,060
different components at the same time

370
00:15:41,060 --> 00:15:42,860
you will have to download 20 different

371
00:15:42,860 --> 00:15:46,730
files so we come up with a new guram to

372
00:15:46,730 --> 00:15:50,269
to make this feature so in this image we

373
00:15:50,269 --> 00:15:52,220
have nine components and we use numbers

374
00:15:52,220 --> 00:15:54,589
to name them but you could imagine Deng

375
00:15:54,589 --> 00:15:56,269
has paid login base tutorial I button

376
00:15:56,269 --> 00:15:59,120
wherever so thanks to the static

377
00:15:59,120 --> 00:16:01,100
analysis I said before like of how

378
00:16:01,100 --> 00:16:03,050
components depend of each other like how

379
00:16:03,050 --> 00:16:04,700
they are using the templates we can

380
00:16:04,700 --> 00:16:07,190
extract information of the dependencies

381
00:16:07,190 --> 00:16:09,170
which are components and that's what

382
00:16:09,170 --> 00:16:12,589
these lines represent alright so the

383
00:16:12,589 --> 00:16:14,870
next step is to resolve the transitive

384
00:16:14,870 --> 00:16:17,990
dependencies so for example if we know

385
00:16:17,990 --> 00:16:21,170
that the component 1 depends on 3 and if

386
00:16:21,170 --> 00:16:23,450
3 depends on 6 that means that by the

387
00:16:23,450 --> 00:16:26,390
transitive property that 1 also depends

388
00:16:26,390 --> 00:16:29,649
on 6 oh damn it

389
00:16:29,649 --> 00:16:33,820
ok make sense everyone yes

390
00:16:33,820 --> 00:16:38,570
ok so we keep we basically do the same

391
00:16:38,570 --> 00:16:42,170
with all the components ok so let's

392
00:16:42,170 --> 00:16:44,060
focus and then a component number 9 it

393
00:16:44,060 --> 00:16:46,760
has a lot of arrows pointing to it that

394
00:16:46,760 --> 00:16:48,640
means that it has a lot of dependence

395
00:16:48,640 --> 00:16:51,769
but some component like 5 doesn't have

396
00:16:51,769 --> 00:16:55,399
any okay let's focus again in the

397
00:16:55,399 --> 00:16:57,800
component 9 as I said each arrow

398
00:16:57,800 --> 00:17:01,220
represents dependent so in this case we

399
00:17:01,220 --> 00:17:03,529
collect the dependence of nine so in

400
00:17:03,529 --> 00:17:05,620
yeah it's three one six four and two

401
00:17:05,620 --> 00:17:09,079
right where these lines are coming from

402
00:17:09,079 --> 00:17:12,709
and we do the same with all of them

403
00:17:12,709 --> 00:17:15,919
understood yeah yes

404
00:17:15,919 --> 00:17:20,689
ok so let's focus again in the component

405
00:17:20,689 --> 00:17:22,579
number nine there were just four

406
00:17:22,579 --> 00:17:26,449
examples so we have let's get the

407
00:17:26,449 --> 00:17:31,309
dependencies so we go we get already all

408
00:17:31,309 --> 00:17:33,559
the data but we just have to encode it

409
00:17:33,559 --> 00:17:35,960
in different data structure so what if

410
00:17:35,960 --> 00:17:38,630
we could what if we can convert these

411
00:17:38,630 --> 00:17:40,730
dependencies of each component into a

412
00:17:40,730 --> 00:17:42,890
vector just like word embeddings will do

413
00:17:42,890 --> 00:17:47,130
with words so we have

414
00:17:47,130 --> 00:17:49,410
so for example the component number

415
00:17:49,410 --> 00:17:52,200
let's let's encode one let's put a 1

416
00:17:52,200 --> 00:17:54,390
when it's a dependent and nasarah when

417
00:17:54,390 --> 00:17:58,380
it's not so 1 it's a component it's a

418
00:17:58,380 --> 00:18:02,429
dependent or not it is right yeah ok so

419
00:18:02,429 --> 00:18:07,289
one two three four years or well but

420
00:18:07,289 --> 00:18:10,679
five five is not we don't have any arrow

421
00:18:10,679 --> 00:18:14,580
pointing to 6 so we linked all with 0 6

422
00:18:14,580 --> 00:18:20,669
it is and 7 8 9 is not okay well we do

423
00:18:20,669 --> 00:18:22,350
the same with all the components and we

424
00:18:22,350 --> 00:18:27,059
get an array of vectors so what we had

425
00:18:27,059 --> 00:18:29,070
friends file and transfer our components

426
00:18:29,070 --> 00:18:30,539
director of coordinates we could imagine

427
00:18:30,539 --> 00:18:33,059
their hands points in a space in here is

428
00:18:33,059 --> 00:18:35,059
a 3d space but you could imagine then as

429
00:18:35,059 --> 00:18:38,429
you know with more dimensions the core

430
00:18:38,429 --> 00:18:40,320
idea is to group together the components

431
00:18:40,320 --> 00:18:43,320
that are close enough in this space but

432
00:18:43,320 --> 00:18:44,340
in order to know if they are close

433
00:18:44,340 --> 00:18:45,750
enough or not we just have to calculate

434
00:18:45,750 --> 00:18:48,000
the distance and how do we calculate the

435
00:18:48,000 --> 00:18:50,309
distance well here's my friend guitarist

436
00:18:50,309 --> 00:18:52,110
philosopher mathematician the answering

437
00:18:52,110 --> 00:18:54,299
trick used to following hims really

438
00:18:54,299 --> 00:18:57,000
smart guy came up with this famous

439
00:18:57,000 --> 00:18:59,250
algorithm that you probably remember

440
00:18:59,250 --> 00:19:02,940
from school that relates the legs of a

441
00:19:02,940 --> 00:19:04,650
triangle with hypotenuse I have

442
00:19:04,650 --> 00:19:07,559
practiced this war a lot so in this in

443
00:19:07,559 --> 00:19:09,690
this example the hypothenuse is exactly

444
00:19:09,690 --> 00:19:11,730
a distance between the two blue circles

445
00:19:11,730 --> 00:19:15,630
okay well I'm not here to scare you

446
00:19:15,630 --> 00:19:17,460
promise but in our case I leave it more

447
00:19:17,460 --> 00:19:19,770
complicated well there's more than two

448
00:19:19,770 --> 00:19:22,230
dimensions by the ideas the same turns

449
00:19:22,230 --> 00:19:25,140
out we can use the generalization of the

450
00:19:25,140 --> 00:19:26,549
Pythagorean theorem to solve this

451
00:19:26,549 --> 00:19:28,650
problem and that's exactly where this

452
00:19:28,650 --> 00:19:32,370
 is sorry so we calculate the

453
00:19:32,370 --> 00:19:35,400
is sorry so we calculate the
distance between all the points even if

454
00:19:35,400 --> 00:19:37,980
it runs 100 dimensions so going back

455
00:19:37,980 --> 00:19:41,429
here we just bundle everything and this

456
00:19:41,429 --> 00:19:43,049
we had test this approach in both

457
00:19:43,049 --> 00:19:44,850
internal and external apps and we have

458
00:19:44,850 --> 00:19:46,230
found that it's much better than

459
00:19:46,230 --> 00:19:48,450
anything we have try in the past in in

460
00:19:48,450 --> 00:19:49,740
big app generates

461
00:19:49,740 --> 00:19:51,690
bundles better that if a developer will

462
00:19:51,690 --> 00:19:54,539
have to try to bundle this 100

463
00:19:54,539 --> 00:19:55,770
components in most efficient way because

464
00:19:55,770 --> 00:19:57,990
most of the things such the conditions

465
00:19:57,990 --> 00:19:59,990
are changing

466
00:19:59,990 --> 00:20:03,870
so this time in addition you know like

467
00:20:03,870 --> 00:20:05,880
now emerging that preferably optimized

468
00:20:05,880 --> 00:20:08,880
bundles and we can even generate hints

469
00:20:08,880 --> 00:20:12,929
so browser can download and parts all

470
00:20:12,929 --> 00:20:16,340
the assets that your application need

471
00:20:16,340 --> 00:20:18,600
yeah in the critical path so in this

472
00:20:18,600 --> 00:20:21,419
example we have the module preload for

473
00:20:21,419 --> 00:20:22,710
all the JavaScript because we use

474
00:20:22,710 --> 00:20:26,279
modules natively so all the JavaScript

475
00:20:26,279 --> 00:20:29,149
require in a critical path is download

476
00:20:29,149 --> 00:20:31,860
read like yeah in parallel I was saying

477
00:20:31,860 --> 00:20:36,539
yeah so nothing is a faster random we

478
00:20:36,539 --> 00:20:38,909
have profile and refactor to random to

479
00:20:38,909 --> 00:20:41,009
be much smaller and faster institution

480
00:20:41,009 --> 00:20:44,399
time so the new ran time about pattern

481
00:20:44,399 --> 00:20:46,470
like optimization killers and pro the

482
00:20:46,470 --> 00:20:50,220
async away racing schedule we use new

483
00:20:50,220 --> 00:20:52,740
API like constructible stylesheet we use

484
00:20:52,740 --> 00:20:56,970
native insuk SE modules async await so

485
00:20:56,970 --> 00:20:59,039
in this benchmark we have eight hundred

486
00:20:59,039 --> 00:21:01,710
eight thousand item buttons component

487
00:21:01,710 --> 00:21:03,870
and you might look like it's a simple

488
00:21:03,870 --> 00:21:06,240
component but in the hood it has a lot

489
00:21:06,240 --> 00:21:07,559
of classes a lot of nested components

490
00:21:07,559 --> 00:21:09,539
that will try to replicate them at

491
00:21:09,539 --> 00:21:11,490
release on an iOS designs

492
00:21:11,490 --> 00:21:13,220
so in this stress test we actually

493
00:21:13,220 --> 00:21:16,190
having two hundred thousand nodes at all

494
00:21:16,190 --> 00:21:18,629
historically it took six seconds to

495
00:21:18,629 --> 00:21:21,230
fully initialize that withstands e1 it's

496
00:21:21,230 --> 00:21:23,940
three seconds and it uses pretty much

497
00:21:23,940 --> 00:21:27,430
half a memory which is yeah

498
00:21:27,430 --> 00:21:32,700
[Applause]

499
00:21:32,700 --> 00:21:36,030
so 2 times faster and yeah hologram

500
00:21:36,030 --> 00:21:39,210
okay let's continue another advantage of

501
00:21:39,210 --> 00:21:40,890
fusion a compiler is that we are not

502
00:21:40,890 --> 00:21:43,650
longer limited by our by the you know by

503
00:21:43,650 --> 00:21:45,540
3 second to remove part of self code

504
00:21:45,540 --> 00:21:48,510
that are not required so instead we can

505
00:21:48,510 --> 00:21:50,370
compile all this metadata that we have

506
00:21:50,370 --> 00:21:52,920
with 3 second in order to heavy

507
00:21:52,920 --> 00:21:56,880
optimized components so a hello world

508
00:21:56,880 --> 00:21:59,490
app compiled with a stencil it's so a

509
00:21:59,490 --> 00:22:03,360
small you can barely see it it's yes 133

510
00:22:03,360 --> 00:22:06,930
bytes and compress well why it's so

511
00:22:06,930 --> 00:22:08,460
small because it doesn't have any I mean

512
00:22:08,460 --> 00:22:10,350
what it's a hello world right it doesn't

513
00:22:10,350 --> 00:22:14,460
need any random so the the compress is

514
00:22:14,460 --> 00:22:18,450
even smaller but here the important idea

515
00:22:18,450 --> 00:22:20,690
is that while a hello world example

516
00:22:20,690 --> 00:22:24,120
isn't really an artificial example we

517
00:22:24,120 --> 00:22:25,830
are really proud about the power of a

518
00:22:25,830 --> 00:22:27,750
compiler can do applying heavy

519
00:22:27,750 --> 00:22:30,150
optimizations and completely remove what

520
00:22:30,150 --> 00:22:32,160
is not needed in a specific route

521
00:22:32,160 --> 00:22:34,020
brushes if it's needing some brush it

522
00:22:34,020 --> 00:22:38,700
will also include that so these

523
00:22:38,700 --> 00:22:40,760
optimizations can also apply to bigger

524
00:22:40,760 --> 00:22:44,070
use cases like a complex application

525
00:22:44,070 --> 00:22:47,280
built with ionic or the like almost like

526
00:22:47,280 --> 00:22:51,660
a stander to do MVC so in our case it's

527
00:22:51,660 --> 00:22:56,430
just two point four kilobytes and to put

528
00:22:56,430 --> 00:22:59,970
a little bit more context well in the

529
00:22:59,970 --> 00:23:01,560
same application with with different

530
00:23:01,560 --> 00:23:03,750
technology we feel really proud about

531
00:23:03,750 --> 00:23:07,110
what we have achieved and all of this

532
00:23:07,110 --> 00:23:10,500
without messing with your no modules you

533
00:23:10,500 --> 00:23:11,910
probably have seen this image before I

534
00:23:11,910 --> 00:23:13,560
think yeah and the first talk we also

535
00:23:13,560 --> 00:23:16,380
see it but you know it's a good example

536
00:23:16,380 --> 00:23:19,440
it's usually no modules is heavier than

537
00:23:19,440 --> 00:23:21,210
a supermassive level when you're

538
00:23:21,210 --> 00:23:23,370
installing it we might take a couple of

539
00:23:23,370 --> 00:23:26,040
minutes okay so this is but in general

540
00:23:26,040 --> 00:23:28,260
it's a big trial today not only because

541
00:23:28,260 --> 00:23:30,420
there is a dependency help in every

542
00:23:30,420 --> 00:23:32,130
campaign every project you don't know

543
00:23:32,130 --> 00:23:34,680
which code is running actually there

544
00:23:34,680 --> 00:23:37,350
isn't healthy dependency in practice in

545
00:23:37,350 --> 00:23:40,980
package package manager like I'm I have

546
00:23:40,980 --> 00:23:43,860
nightmares with like npm apocalypse or

547
00:23:43,860 --> 00:23:46,380
something like you can download anymore

548
00:23:46,380 --> 00:23:48,630
so yeah there is many things moving on

549
00:23:48,630 --> 00:23:50,370
like moving parts in our web projects

550
00:23:50,370 --> 00:23:53,730
and developers already find creative

551
00:23:53,730 --> 00:23:55,890
ways to get around and get some space in

552
00:23:55,890 --> 00:23:59,760
their computer so sorry

553
00:23:59,760 --> 00:24:01,680
so one of the design principles have a

554
00:24:01,680 --> 00:24:04,320
stencil is to keep dependencies to the

555
00:24:04,320 --> 00:24:07,110
minimum so it doesn't not only make the

556
00:24:07,110 --> 00:24:09,750
Italians installing Sprint's much faster

557
00:24:09,750 --> 00:24:12,750
but your project more future-proof and

558
00:24:12,750 --> 00:24:16,440
stable it's not if it's not the first

559
00:24:16,440 --> 00:24:18,960
time at least for us that a dependency

560
00:24:18,960 --> 00:24:21,720
of that dependency change and finding a

561
00:24:21,720 --> 00:24:23,880
solution becomes a problem for example I

562
00:24:23,880 --> 00:24:28,470
think for notes as you update to note 12

563
00:24:28,470 --> 00:24:30,330
and indeed stopped working so yeah it's

564
00:24:30,330 --> 00:24:31,770
this kind of thing like don't see

565
00:24:31,770 --> 00:24:34,260
dependencies so for instance if you open

566
00:24:34,260 --> 00:24:36,300
node modules in a stems your starter you

567
00:24:36,300 --> 00:24:39,150
will define two folders a stencil and

568
00:24:39,150 --> 00:24:42,690
I've escaped here at the line' we have

569
00:24:42,690 --> 00:24:45,360
the largest stencil drawing the world

570
00:24:45,360 --> 00:24:49,260
the cosmonaut stencil is a tool you use

571
00:24:49,260 --> 00:24:52,230
to paint something but it's not longer

572
00:24:52,230 --> 00:24:54,440
there right you can use the same stencil

573
00:24:54,440 --> 00:24:57,300
many times but it's never part of the

574
00:24:57,300 --> 00:24:59,460
final product and that's why a stencil

575
00:24:59,460 --> 00:25:01,800
has the name it has it's like treat me

576
00:25:01,800 --> 00:25:07,650
my max my CEO said it's like written in

577
00:25:07,650 --> 00:25:10,230
stencil four components and we said

578
00:25:10,230 --> 00:25:14,040
that's it when you build a component

579
00:25:14,040 --> 00:25:16,740
with their stencil I mean sorry when you

580
00:25:16,740 --> 00:25:18,990
build a component with a delivery lead

581
00:25:18,990 --> 00:25:21,600
element react angular view your

582
00:25:21,600 --> 00:25:24,270
components you upload to MPN have a

583
00:25:24,270 --> 00:25:26,130
strong dependency in this in this

584
00:25:26,130 --> 00:25:28,470
framework and in this particular person

585
00:25:28,470 --> 00:25:31,320
of the framework right but the

586
00:25:31,320 --> 00:25:33,930
components you generate with the stencil

587
00:25:33,930 --> 00:25:36,180
they are not essential components they

588
00:25:36,180 --> 00:25:39,110
don't have a dependency on in stencil so

589
00:25:39,110 --> 00:25:42,810
they so they don't even depend on it now

590
00:25:42,810 --> 00:25:46,500
I if I have time I really with everyone

591
00:25:46,500 --> 00:25:49,050
yeah so I have a quick demo of how easy

592
00:25:49,050 --> 00:25:56,130
it is let's see if I can

593
00:25:56,130 --> 00:26:05,910
see very quickly I know no meat love it

594
00:26:05,910 --> 00:26:09,870
okay

595
00:26:09,880 --> 00:26:16,960
all right okay so uh yeah so we have the

596
00:26:16,960 --> 00:26:22,419
terminal we just run MP in it stencil we

597
00:26:22,419 --> 00:26:25,780
run it we select we're going to create a

598
00:26:25,780 --> 00:26:27,400
simple app but most of the times is

599
00:26:27,400 --> 00:26:29,110
component a nap

600
00:26:29,110 --> 00:26:32,679
yes humph done

601
00:26:32,679 --> 00:26:35,110
yes it's already downloaded you don't

602
00:26:35,110 --> 00:26:36,700
have to it's already downloaded the

603
00:26:36,700 --> 00:26:38,830
started and we run npm install for you

604
00:26:38,830 --> 00:26:41,919
so when you'd select the start there we

605
00:26:41,919 --> 00:26:43,780
also you start so while you was typing

606
00:26:43,780 --> 00:26:45,429
the name we already start downloading

607
00:26:45,429 --> 00:26:50,650
everything so now we just go here MPM

608
00:26:50,650 --> 00:27:00,880
start I'm using it actually so uh so for

609
00:27:00,880 --> 00:27:02,650
example I hear we have a very simple

610
00:27:02,650 --> 00:27:05,919
application we can we have this these

611
00:27:05,919 --> 00:27:08,799
features I talked before about I like

612
00:27:08,799 --> 00:27:11,080
thing more level features so if I open

613
00:27:11,080 --> 00:27:12,909
the code and I try to make any change

614
00:27:12,909 --> 00:27:14,799
even though these are web components I

615
00:27:14,799 --> 00:27:19,659
can have like code mode module

616
00:27:19,659 --> 00:27:23,830
replacement so for example here I'm just

617
00:27:23,830 --> 00:27:25,570
going to make a GUI just going to make

618
00:27:25,570 --> 00:27:28,650
the change button from profile page to

619
00:27:28,650 --> 00:27:36,309
hallow page safe and you know you may

620
00:27:36,309 --> 00:27:38,409
want to run the the docs

621
00:27:38,409 --> 00:27:42,159
well you yes we'll go here and in the

622
00:27:42,159 --> 00:27:45,610
configuration and you will create an

623
00:27:45,610 --> 00:27:50,980
output target like type ducks I say we

624
00:27:50,980 --> 00:27:53,559
have dogs Jason job read mean so if you

625
00:27:53,559 --> 00:27:55,570
have that and you run the bill it will

626
00:27:55,570 --> 00:27:58,630
generate as a readme file in every like

627
00:27:58,630 --> 00:28:00,520
in here in this folder in this folder in

628
00:28:00,520 --> 00:28:02,530
this folder with study and analysis of

629
00:28:02,530 --> 00:28:04,780
these components let's say you want to

630
00:28:04,780 --> 00:28:08,140
pre render the page well this is this is

631
00:28:08,140 --> 00:28:09,309
something that you will not spec with

632
00:28:09,309 --> 00:28:11,350
five components but here you will just

633
00:28:11,350 --> 00:28:14,500
let me see if I this is running

634
00:28:14,500 --> 00:28:16,570
no it's stopped all right here okay

635
00:28:16,570 --> 00:28:19,299
let's stop it so it will say NPN van

636
00:28:19,299 --> 00:28:25,090
built pre-render in this case it will

637
00:28:25,090 --> 00:28:26,530
run out drop bill and it will yes

638
00:28:26,530 --> 00:28:29,200
actually create different readme file

639
00:28:29,200 --> 00:28:31,690
and it retains two pages well we have

640
00:28:31,690 --> 00:28:33,970
remember that profile page another one

641
00:28:33,970 --> 00:28:38,799
and yeah I I think that's pretty much it

642
00:28:38,799 --> 00:28:42,520
okay yeah so you I really encourage you

643
00:28:42,520 --> 00:28:46,210
to check it out the stencil yes calm or

644
00:28:46,210 --> 00:28:48,010
just npm in it the stencil I'll give you

645
00:28:48,010 --> 00:28:52,450
a try yeah it's like magic

646
00:28:52,450 --> 00:28:58,510
so thank you

