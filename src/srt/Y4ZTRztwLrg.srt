1
00:00:14,870 --> 00:00:15,870
Hi.

2
00:00:15,870 --> 00:00:16,870
Everybody hear me okay?

3
00:00:16,870 --> 00:00:17,870
Yes?

4
00:00:17,870 --> 00:00:18,870
Awesome.

5
00:00:18,870 --> 00:00:19,870
So I'm a web developer at
Mozilla, I'm the lead engineer on the Webmaker

6
00:00:19,870 --> 00:00:24,570
for Android project, and I want
to start off on a high note here.

7
00:00:24,570 --> 00:00:25,570
The web is broken.

8
00:00:25,570 --> 00:00:27,250
And I don't mean the
Wi-Fi.

9
00:00:27,250 --> 00:00:30,810
Although the Wi-Fi is totally broken right
now.

10
00:00:30,810 --> 00:00:32,560
So I'm not going to
demo some of the stuff I was going to show

11
00:00:32,560 --> 00:00:33,560
you.

12
00:00:33,560 --> 00:00:35,450
But that's okay.

13
00:00:35,450 --> 00:00:38,290
It's not
actually broken for most of you JavaScript

14
00:00:38,290 --> 00:00:39,290
developers, right?

15
00:00:39,290 --> 00:00:43,870
On Firefox and
Chrome and Edge, for you, the web is probably

16
00:00:43,870 --> 00:00:44,870
still pretty awesome.

17
00:00:44,870 --> 00:00:46,860
But for
the rest of the world coming online right

18
00:00:46,860 --> 00:00:51,839
now, and that's like 2 billion
people over the next few years, it really

19
00:00:51,839 --> 00:00:54,260
kind of sucks.

20
00:00:54,260 --> 00:00:56,730
And that's just
because for more and more people, the first

21
00:00:56,730 --> 00:01:01,230
and only experience they're ever
going to have of the web is mobile.

22
00:01:01,230 --> 00:01:05,070
And the mobile web is not good enough.

23
00:01:05,070 --> 00:01:07,370
So
let's talk about why the mobile web is not

24
00:01:07,370 --> 00:01:08,370
good enough.

25
00:01:08,370 --> 00:01:10,540
You probably know most
of this already.

26
00:01:10,540 --> 00:01:14,660
The one that you are probably feeling a lot
right now is UI

27
00:01:14,660 --> 00:01:15,970
perf.

28
00:01:15,970 --> 00:01:19,980
Particularly when you're doing things like
gestures and lots of layout

29
00:01:19,980 --> 00:01:23,160
panes -- not great.

30
00:01:23,160 --> 00:01:24,570
Not as good as we'd like.

31
00:01:24,570 --> 00:01:27,160
But there's lots of other things
that are broken.

32
00:01:27,160 --> 00:01:31,160
The auth model that's based on email doesn't
make any sense

33
00:01:31,160 --> 00:01:34,310
for new users of the web who don't even have
emails.

34
00:01:34,310 --> 00:01:38,790
The experience when you
go offline or you're on a 3G or less connection

35
00:01:38,790 --> 00:01:41,550
is really pretty terrible for
most of the web.

36
00:01:41,550 --> 00:01:44,330
And of course, all of the access to the OS
level device

37
00:01:44,330 --> 00:01:49,820
integrations, like push notifications, and
camera.

38
00:01:49,820 --> 00:01:52,280
And on the one hand, that's
okay.

39
00:01:52,280 --> 00:01:55,850
The web was built for a completely different
desktop-based paradigm,

40
00:01:55,850 --> 00:01:56,850
right?

41
00:01:56,850 --> 00:01:59,340
And it's going to take some time for browsers
to work on solutions.

42
00:01:59,340 --> 00:02:00,340
Right?

43
00:02:00,340 --> 00:02:01,340
That's fine.

44
00:02:01,340 --> 00:02:03,990
But on the other hand, it's kind of not okay,
because not

45
00:02:03,990 --> 00:02:07,900
only does the web kind of suck at all these
things right now, native platforms

46
00:02:07,900 --> 00:02:10,170
are actually really good at them.

47
00:02:10,170 --> 00:02:13,450
And there's some technical reasons why
performance and other things are easy to get

48
00:02:13,450 --> 00:02:15,450
right on native platforms.

49
00:02:15,450 --> 00:02:19,160
But
the thing with native is it was built with

50
00:02:19,160 --> 00:02:25,250
these problems at the center of its
business model, and the web was not.

51
00:02:25,250 --> 00:02:28,620
So I was actually kind of wondering --
you know, is this still something that people

52
00:02:28,620 --> 00:02:29,620
care about?

53
00:02:29,620 --> 00:02:30,859
Are we still talking
about this?

54
00:02:30,859 --> 00:02:33,530
And it turns out it is.

55
00:02:33,530 --> 00:02:38,099
Just yesterday, actually, one of the
leading authorities on browser quirks and

56
00:02:38,099 --> 00:02:43,129
compatibility since the '90s, I
think -- he wrote an article on his blog,

57
00:02:43,129 --> 00:02:45,560
and it was called web versus native.

58
00:02:45,560 --> 00:02:46,560
Let's concede defeat.

59
00:02:46,560 --> 00:02:49,069
I want to read this out, because it's important.

60
00:02:49,069 --> 00:02:51,760
I feel
like it's time to revisit the web versus native

61
00:02:51,760 --> 00:02:57,030
debate and concede defeat,
that the web should not and cannot compete

62
00:02:57,030 --> 00:03:02,010
with native when it comes to
complex app-like structures.

63
00:03:02,010 --> 00:03:04,349
His argument essentially is that because of
the

64
00:03:04,349 --> 00:03:08,120
fundamental architectural limitations of how
the web was built, we're just

65
00:03:08,120 --> 00:03:12,889
going to have to give up on building these
rich client app-like experiences

66
00:03:12,889 --> 00:03:17,450
and go back to the true strengths of the web,
which is URLs, universal

67
00:03:17,450 --> 00:03:20,150
accessibility, et cetera.

68
00:03:20,150 --> 00:03:21,560
And you know what?

69
00:03:21,560 --> 00:03:23,279
He has a point.

70
00:03:23,279 --> 00:03:25,700
You know,
overlooking the fact that there's a few things

71
00:03:25,700 --> 00:03:30,739
like offline that still affects
the overall interoperability of the web, this

72
00:03:30,739 --> 00:03:35,609
is a totally reasonable,
rational argument, when you look at the current

73
00:03:35,609 --> 00:03:37,209
state of affairs.

74
00:03:37,209 --> 00:03:40,099
And it might
actually even be a popular one.

75
00:03:40,099 --> 00:03:45,569
Honestly, if what you really want to do right
now today is to build the fastest, coolest,

76
00:03:45,569 --> 00:03:51,779
most awesome UI, with 3D and games
and whatever, I would have to tell you -- you

77
00:03:51,779 --> 00:03:52,779
know what?

78
00:03:52,779 --> 00:03:56,290
You should consider
building for Android or iOS.

79
00:03:56,290 --> 00:03:58,469
But if what we're saying -- that this is the
way

80
00:03:58,469 --> 00:04:02,879
to fix the mobile web, it's to give up and
abandon app-like experiences for

81
00:04:02,879 --> 00:04:07,239
something that, you know, works better with
our original model of the web, I

82
00:04:07,239 --> 00:04:08,359
couldn't disagree more.

83
00:04:08,359 --> 00:04:13,790
But to do that, first, I want to take a look
back at the year 2004.

84
00:04:13,790 --> 00:04:16,620
How many
of you were doing web development back in

85
00:04:16,620 --> 00:04:17,620
2004?

86
00:04:17,620 --> 00:04:18,620
Wow.

87
00:04:18,620 --> 00:04:19,620
That's a lot of you.

88
00:04:19,620 --> 00:04:20,620
This
is awesome.

89
00:04:20,620 --> 00:04:23,860
So you're totally going to remember some of
the stuff I'm going to

90
00:04:23,860 --> 00:04:25,850
talk about here.

91
00:04:25,850 --> 00:04:26,850
So...

92
00:04:26,850 --> 00:04:30,330
Yeah, I was a big fan, actually, of both Britney
Spears

93
00:04:30,330 --> 00:04:32,150
and Orlando Bloom.

94
00:04:32,150 --> 00:04:36,610
According to Google's zeitgeist of the year,
they were the

95
00:04:36,610 --> 00:04:42,750
two most popular people.

96
00:04:42,750 --> 00:04:48,660
The top two tech topics, according to Google
analytics, number one was wallpaper.

97
00:04:48,660 --> 00:04:52,160
Number two was Kazaa.

98
00:04:52,160 --> 00:04:53,210
Yeah.

99
00:04:53,210 --> 00:04:57,050
If we were
doing JSConf in 2004, that's what we would

100
00:04:57,050 --> 00:04:58,590
be talking about.

101
00:04:58,590 --> 00:04:59,810
Pretty awesome.

102
00:04:59,810 --> 00:05:07,650
So also -- PHP5 was released that year, Ruby
on Rails was at 0.5.0, and Google

103
00:05:07,650 --> 00:05:10,530
had been around for about six years already.

104
00:05:10,530 --> 00:05:12,710
So that's cool.

105
00:05:12,710 --> 00:05:17,000
So something else
happened in 2004.

106
00:05:17,000 --> 00:05:18,590
It was the year -- actually, it was the year
that Facebook

107
00:05:18,590 --> 00:05:19,590
was released as well.

108
00:05:19,590 --> 00:05:21,670
Although I don't actually remember that.

109
00:05:21,670 --> 00:05:23,590
But it was
actually the year that Google first released

110
00:05:23,590 --> 00:05:25,310
Gmail.

111
00:05:25,310 --> 00:05:27,919
And at first, because it
was released in April and Google had this

112
00:05:27,919 --> 00:05:31,951
reputation for being notorious for
April fool's jokes, people thought it was

113
00:05:31,951 --> 00:05:33,699
maybe a joke.

114
00:05:33,699 --> 00:05:37,740
Does anybody remember
when Gmail came out?

115
00:05:37,740 --> 00:05:39,569
Were you signed up for Gmail?

116
00:05:39,569 --> 00:05:40,659
Yeah.

117
00:05:40,659 --> 00:05:43,640
I don't remember it
being as cool as people said it was.

118
00:05:43,640 --> 00:05:44,640
But it was...

119
00:05:44,640 --> 00:05:46,110
I guess was pretty cool.

120
00:05:46,110 --> 00:05:50,169
It
was a real thing, and it was cool for two

121
00:05:50,169 --> 00:05:51,169
reasons.

122
00:05:51,169 --> 00:05:52,169
Okay?

123
00:05:52,169 --> 00:05:54,110
One was that it
offered a gig of storage.

124
00:05:54,110 --> 00:05:57,069
Where all the other online competitors like
Hotmail

125
00:05:57,069 --> 00:06:02,020
and Yahoo offered way less than that, and
the second thing was that Gmail had

126
00:06:02,020 --> 00:06:07,130
this super neat interface that could actually
live update when you received a

127
00:06:07,130 --> 00:06:10,389
new email, without requiring a page refresh.

128
00:06:10,389 --> 00:06:13,699
That was super awesome, right?

129
00:06:13,699 --> 00:06:18,930
And in 2004, the idea of re-rendering the
DOM with new data, after the page had

130
00:06:18,930 --> 00:06:20,610
loaded, so like...

131
00:06:20,610 --> 00:06:24,480
AJAX, was not at all common on the web, nor
was it even

132
00:06:24,480 --> 00:06:25,949
expected.

133
00:06:25,949 --> 00:06:29,889
All the other web email clients were terrible
and clunky and

134
00:06:29,889 --> 00:06:34,629
required lots of page refreshes, but that
was just the way things were.

135
00:06:34,629 --> 00:06:37,330
If you
wanted an app-like experience, you were expected

136
00:06:37,330 --> 00:06:39,330
to use a Windows email
client.

137
00:06:39,330 --> 00:06:40,330
Right?

138
00:06:40,330 --> 00:06:41,909
Pretty reasonable.

139
00:06:41,909 --> 00:06:46,039
So when the lead developer of Gmail told his
co-workers he was going to write the entire

140
00:06:46,039 --> 00:06:52,270
app totally in the browser and
almost entirely in JavaScript, they were like...

141
00:06:52,270 --> 00:06:53,270
What?

142
00:06:53,270 --> 00:06:54,270
Really?

143
00:06:54,270 --> 00:06:56,159
You know, in
fact, almost everybody he talked to, even

144
00:06:56,159 --> 00:07:01,710
internally at Google, especially
people who considered themselves to be experts

145
00:07:01,710 --> 00:07:05,889
at JavaScript and the web,
thought his idea was totally naive, it was

146
00:07:05,889 --> 00:07:09,280
never going to work, because people
had tried to write complex things in JavaScript

147
00:07:09,280 --> 00:07:14,990
before, and they knew the web
was just not made to do that kind of stuff.

148
00:07:14,990 --> 00:07:17,580
And this was a really common
opinion at the time.

149
00:07:17,580 --> 00:07:19,280
JavaScript was at best a thing that...

150
00:07:19,280 --> 00:07:22,650
You know, could
decorate your pages or enhance them a little

151
00:07:22,650 --> 00:07:27,360
bit, and at worst, it was a
security flaw, it was non-standards compliant,

152
00:07:27,360 --> 00:07:30,330
it was disruptive and pretty
terrible, right?

153
00:07:30,330 --> 00:07:32,860
So I want to show you some things that people
were actually

154
00:07:32,860 --> 00:07:33,860
writing.

155
00:07:33,860 --> 00:07:38,819
I was digging back into the Wayback Machine
and some old blogs circa

156
00:07:38,819 --> 00:07:40,439
2004.

157
00:07:40,439 --> 00:07:42,770
This was from the anti-JavaScript FAQ.

158
00:07:42,770 --> 00:07:47,039
While I am personally opposed to
all JavaScript, I understand it can do some

159
00:07:47,039 --> 00:07:49,250
things that you can't do with
normal html.

160
00:07:49,250 --> 00:07:53,020
But just remember -- if Amazon can do without
JavaScript, so can

161
00:07:53,020 --> 00:07:55,960
you.

162
00:07:55,960 --> 00:07:58,979
So this was from a post titled JavaScript
is evil.

163
00:07:58,979 --> 00:08:01,740
A lot of designers
think it's their god-given right to annoy

164
00:08:01,740 --> 00:08:05,960
the hell out of visitors with bulky
JavaScript effects, so turning off JavaScript

165
00:08:05,960 --> 00:08:10,259
is almost a requirement when
visiting some websites.

166
00:08:10,259 --> 00:08:15,099
It was true at the time.

167
00:08:15,099 --> 00:08:17,820
This is from stupid
JavaScript security tricks.

168
00:08:17,820 --> 00:08:20,150
A little bit older, but still relevant.

169
00:08:20,150 --> 00:08:22,729
Blindly
accepting a high level of security risk on

170
00:08:22,729 --> 00:08:27,110
the web by enabling JavaScript is
as shaky as a ride on the Canadian space shuttle

171
00:08:27,110 --> 00:08:28,370
made of birch bark and gum.

172
00:08:28,370 --> 00:08:29,370
I'm Canadian, so this really resonated with
me.

173
00:08:29,370 --> 00:08:30,370
Woo, represent.

174
00:08:30,370 --> 00:08:31,370
So this is
what people were saying.

175
00:08:31,370 --> 00:08:32,370
JavaScript was not a thing.

176
00:08:32,370 --> 00:08:33,370
But despite the fact that
it took years for Gmail to...

177
00:08:33,370 --> 00:08:34,370
Whoops.

178
00:08:34,370 --> 00:08:35,370
Uh-oh.

179
00:08:35,370 --> 00:08:36,370
My computer died.

180
00:08:36,370 --> 00:08:37,370
I'm going to
have to plug in.

181
00:08:37,370 --> 00:08:38,370
Okay.

182
00:08:38,370 --> 00:08:39,370
I don't need internet.

183
00:08:39,370 --> 00:08:40,370
But...

184
00:08:40,370 --> 00:08:41,370
Sorry about that.

185
00:08:41,370 --> 00:08:42,370
So...

186
00:08:42,370 --> 00:08:43,370
Computers fail sometimes.

187
00:08:43,370 --> 00:08:44,370
Not only is the mobile web broken.

188
00:08:44,370 --> 00:08:45,370
Batteries are
broken too.

189
00:08:45,370 --> 00:08:46,370
Yeah.

190
00:08:46,370 --> 00:08:47,370
Oh, thanks.

191
00:08:47,370 --> 00:08:48,370
You're the best.

192
00:08:48,370 --> 00:08:49,370
See?

193
00:08:49,370 --> 00:08:50,370
Community.

194
00:08:50,370 --> 00:08:51,370
This is what
makes JavaScript better.

195
00:08:51,370 --> 00:08:52,370
All right.

196
00:08:52,370 --> 00:08:53,370
Let's boot up.

197
00:08:53,370 --> 00:08:54,370
Sorry.

198
00:08:54,370 --> 00:08:55,370
It was the Gmail
curse, honestly.

199
00:08:55,370 --> 00:08:56,370
(Never Going to Give You Up playing)

200
00:08:56,370 --> 00:08:57,370
Oh, gosh.

201
00:08:57,370 --> 00:08:58,370
All right, we're booting, we're booting.

202
00:08:58,370 --> 00:08:59,370
I'm really sorry.

203
00:08:59,370 --> 00:09:00,370
Phones
were super different?

204
00:09:00,370 --> 00:09:01,370
Phones were super different in the '80s than
they are today.

205
00:09:01,370 --> 00:09:02,370
Yeah, they were.

206
00:09:02,370 --> 00:09:03,370
In the '80s, I had Jenny's number, and now
I have 8675309 apps on my phone.

207
00:09:03,370 --> 00:09:04,370
It's true.

208
00:09:04,370 --> 00:09:05,370
It was really different back in the 2000s
too -- people assumed

209
00:09:05,370 --> 00:09:06,370
email could only be done native.

210
00:09:06,370 --> 00:09:07,370
But we're about to find out why...

211
00:09:07,370 --> 00:09:08,370
Yeah, it's
just going to take a minute.

212
00:09:08,370 --> 00:09:09,370
Okay.

213
00:09:09,370 --> 00:09:10,370
Should have plugged in.

214
00:09:10,370 --> 00:09:11,370
Yeah, it's true.

215
00:09:11,370 --> 00:09:12,370
Oh, we're good, we're good, we're good.

216
00:09:12,370 --> 00:09:13,370
Sorry, sorry.

217
00:09:13,370 --> 00:09:14,370
All right.

218
00:09:14,370 --> 00:09:15,370
We're back.

219
00:09:15,370 --> 00:09:16,370
Let's hear it for the hibernate feature on
computers, everybody.

220
00:09:16,370 --> 00:09:17,370
As opposed
to rebooting from scratch.

221
00:09:17,370 --> 00:09:18,370
(Never Going to Give You Up playing)

222
00:09:18,370 --> 00:09:19,370
We're back.

223
00:09:19,370 --> 00:09:20,370
No, we're not back.

224
00:09:20,370 --> 00:09:21,370
Now...

225
00:09:21,370 --> 00:09:22,370
Which one was the right one?

226
00:09:22,370 --> 00:09:23,370
Probably this one.

227
00:09:23,370 --> 00:09:24,370
Let's find out.

228
00:09:24,370 --> 00:09:25,370
Yes!

229
00:09:25,370 --> 00:09:26,370
Okay!

230
00:09:26,370 --> 00:09:27,370
So...

231
00:09:27,370 --> 00:09:28,370
We're back.

232
00:09:28,370 --> 00:09:29,370
We're back in
the immersive interactive web.

233
00:09:29,370 --> 00:09:30,370
Awesome.

234
00:09:30,370 --> 00:09:31,370
Still in 2004.

235
00:09:31,370 --> 00:09:32,370
So despite all of this
weird stuff, and the fact that JavaScript

236
00:09:32,370 --> 00:09:33,370
was terrible, and it was a total
hack, Gmail was a total hack, it was living

237
00:09:33,370 --> 00:09:34,370
proof that you could write
something in JavaScript that people actually

238
00:09:34,370 --> 00:09:35,370
loved.

239
00:09:35,370 --> 00:09:36,370
And that's awesome.

240
00:09:36,370 --> 00:09:37,370
And,
you know, it wasn't long after this that developers

241
00:09:37,370 --> 00:09:38,370
started getting excited
about the XML-HTTP thing and using it all

242
00:09:38,370 --> 00:09:39,370
over the place, and before we knew
it, great rich client experiences became something

243
00:09:39,370 --> 00:09:40,370
that was essential to the
web, as the promise of interoperability itself.

244
00:09:40,370 --> 00:09:41,370
Fast-forward to 2006, and all
of a sudden XML-HTTP thing has now been standardized

245
00:09:41,370 --> 00:09:42,370
by the W3C, and
JavaScript is moving towards the process of

246
00:09:42,370 --> 00:09:43,370
standardization and universal
acceptance.

247
00:09:43,370 --> 00:09:44,370
Hurray!

248
00:09:44,370 --> 00:09:45,370
Clap for JavaScript!

249
00:09:45,370 --> 00:09:46,370
So the point is this: you're not here
at this conference about to learn about knitting

250
00:09:46,370 --> 00:09:47,370
and making music and driving
robots because someone intended or designed

251
00:09:47,370 --> 00:09:48,370
to make JavaScript or the web to
do these things.

252
00:09:48,370 --> 00:09:49,370
You're not here because of the standards body.

253
00:09:49,370 --> 00:09:50,370
You're not
even here because of a browser.

254
00:09:50,370 --> 00:09:51,370
Well, you're kind of here because of a
browser.

255
00:09:51,370 --> 00:09:53,410
But not entirely because of a browser.

256
00:09:53,410 --> 00:09:56,959
You're here because someone
wanted to do something cool and found a super

257
00:09:56,959 --> 00:10:01,810
hacky but somewhat compelling
way to make it happen.

258
00:10:01,810 --> 00:10:05,800
So my proposal to fix the mobile web is this:
stop

259
00:10:05,800 --> 00:10:10,910
relying on browsers to reimplement the DOM
or land device APIs or do whatever

260
00:10:10,910 --> 00:10:12,870
it is you want.

261
00:10:12,870 --> 00:10:16,880
Stop thinking about what the web is or what
the web was.

262
00:10:16,880 --> 00:10:20,230
Maybe
this is totally naive, but I don't think that

263
00:10:20,230 --> 00:10:24,330
rich app-like experiences are
something we're going to be able to pass over,

264
00:10:24,330 --> 00:10:27,300
no matter how compelling and
awesome the URL is.

265
00:10:27,300 --> 00:10:29,691
And if you want to talk to me about URLs,
I will talk you

266
00:10:29,691 --> 00:10:32,010
to about URLs.

267
00:10:32,010 --> 00:10:34,620
If you want to be here, talking about JavaScript,
in five

268
00:10:34,620 --> 00:10:38,720
years, it's time to hack.

269
00:10:38,720 --> 00:10:40,480
So in order to demonstrate some of the ways
you

270
00:10:40,480 --> 00:10:43,639
might do this today, I would like to use a
model I've devised called the three

271
00:10:43,639 --> 00:10:45,829
levels of hack.

272
00:10:45,829 --> 00:10:47,980
Where we start in a place that most people
would kind of agree

273
00:10:47,980 --> 00:10:52,880
is not that weird, and then end up with something
that's really weird.

274
00:10:52,880 --> 00:10:54,380
So
start small.

275
00:10:54,380 --> 00:10:55,560
First level of hack.

276
00:10:55,560 --> 00:10:57,230
Test new features before their time.

277
00:10:57,230 --> 00:10:59,449
That's
a great way to push the platform a little

278
00:10:59,449 --> 00:11:00,449
bit.

279
00:11:00,449 --> 00:11:02,430
To use new browser language
features, right?

280
00:11:02,430 --> 00:11:05,310
That haven't made it into production.

281
00:11:05,310 --> 00:11:08,740
So one way to do that
is to turn on stuff that's there and use it.

282
00:11:08,740 --> 00:11:10,050
Easy, right?

283
00:11:10,050 --> 00:11:12,140
One thing I'm
personally really excited about is the service

284
00:11:12,140 --> 00:11:16,390
worker -- which is going to
help out with offline in a huge way.

285
00:11:16,390 --> 00:11:20,089
And I'm not going to talk about it in
detail, but if you've ever used AppCache or

286
00:11:20,089 --> 00:11:24,510
are thinking about taking your app
online, you should definitely check it out.

287
00:11:24,510 --> 00:11:25,820
There's already an implementation.

288
00:11:25,820 --> 00:11:29,180
Chrome, you can check it out today, and I
think the Firefox implementation is

289
00:11:29,180 --> 00:11:31,160
coming out in the summer sometime.

290
00:11:31,160 --> 00:11:34,830
So that's super cool.

291
00:11:34,830 --> 00:11:38,649
You can also polyfill
the features that you want to make them work

292
00:11:38,649 --> 00:11:39,649
for features today.

293
00:11:39,649 --> 00:11:43,980
One of the
things we do on my team is transpile ES6 using

294
00:11:43,980 --> 00:11:45,550
Babel.

295
00:11:45,550 --> 00:11:50,740
And Sebastian is
speaking about that later this afternoon.

296
00:11:50,740 --> 00:11:53,820
So I highly recommend you attend
that session.

297
00:11:53,820 --> 00:11:57,710
And doing this kind of stuff is not controversial.

298
00:11:57,710 --> 00:11:59,440
But I'm
mentioning it because if you're not doing

299
00:11:59,440 --> 00:12:00,440
it, you should.

300
00:12:00,440 --> 00:12:03,040
And the other thing
you should do is -- if you find bugs, or you

301
00:12:03,040 --> 00:12:07,810
have opinions about how things
should be changed, you know, the implementation

302
00:12:07,810 --> 00:12:10,200
teams that are building them
really want to hear from you.

303
00:12:10,200 --> 00:12:12,870
The Gecko team, for example, working really
hard

304
00:12:12,870 --> 00:12:17,399
on service workers right now, is really interested
on getting feedback on the

305
00:12:17,399 --> 00:12:19,709
service worker and how you want to use it.

306
00:12:19,709 --> 00:12:22,500
So if you're interested in joining
that conversation, just talk to me after and

307
00:12:22,500 --> 00:12:25,230
I can hook you up with the right
people.

308
00:12:25,230 --> 00:12:27,160
Okay.

309
00:12:27,160 --> 00:12:29,949
So let's do the second level of hack.

310
00:12:29,949 --> 00:12:31,940
Building new abstractions.

311
00:12:31,940 --> 00:12:34,720
So beyond things that are being implemented
-- cool

312
00:12:34,720 --> 00:12:37,750
stuff really comes out of people thinking
in completely different ways with

313
00:12:37,750 --> 00:12:39,360
the tools that are there.

314
00:12:39,360 --> 00:12:41,690
So, you know, one area we're seeing a lot
of

315
00:12:41,690 --> 00:12:45,200
innovation -- I'm sure all of you are aware,
probably using this stuff -- is

316
00:12:45,200 --> 00:12:51,699
DOM abstractions, like Reacts, virtual DOM,
famous engines DOM and web GL

317
00:12:51,699 --> 00:12:53,920
abstraction, flip board did a cool thing with
react and canvas.

318
00:12:53,920 --> 00:12:57,350
For the most
part, they don't replace the DOM.

319
00:12:57,350 --> 00:13:04,050
They augment and reoptimize particular areas
of it by building an abstraction, and that's

320
00:13:04,050 --> 00:13:05,050
pretty cool.

321
00:13:05,050 --> 00:13:06,050
It's a total hack.

322
00:13:06,050 --> 00:13:07,050
Let's be honest.

323
00:13:07,050 --> 00:13:10,050
But it's awesome.

324
00:13:10,050 --> 00:13:14,570
Another thing you can do with abstractions
is build things that already exist, but don't

325
00:13:14,570 --> 00:13:17,440
yet exist -- have a counterpart
on the web.

326
00:13:17,440 --> 00:13:20,550
So going back to the offline use case, a pretty
cool example I've

327
00:13:20,550 --> 00:13:25,231
seen in the last few months is some colleagues
of mine have been working on

328
00:13:25,231 --> 00:13:30,329
something called Filer, which is basically
a POSIX compliant file system

329
00:13:30,329 --> 00:13:31,690
interface in the browser.

330
00:13:31,690 --> 00:13:33,720
It doesn't actually use a file system.

331
00:13:33,720 --> 00:13:38,290
It just
abstracts one on top of index DB or web SQL

332
00:13:38,290 --> 00:13:41,160
or even in memory.

333
00:13:41,160 --> 00:13:44,139
So that means
that any modern browser who has access to

334
00:13:44,139 --> 00:13:48,190
those things can actually do file
operations and store them offline, which is

335
00:13:48,190 --> 00:13:49,190
amazing.

336
00:13:49,190 --> 00:13:53,110
There's a group of super
smart people working on a code editor that

337
00:13:53,110 --> 00:13:57,630
takes advantage of Filer at Seneca
College in Toronto, so you should check that

338
00:13:57,630 --> 00:14:00,920
out if you're interested in
Filer.

339
00:14:00,920 --> 00:14:04,370
It's super cool.

340
00:14:04,370 --> 00:14:06,320
So...

341
00:14:06,320 --> 00:14:08,269
Okay.

342
00:14:08,269 --> 00:14:09,649
We talked about some fairly...

343
00:14:09,649 --> 00:14:12,290
You know, things that are exciting.

344
00:14:12,290 --> 00:14:13,930
But not exactly controversial.

345
00:14:13,930 --> 00:14:18,180
Because we're still building on top of existing
APIs, and mostly doing things in a web-like

346
00:14:18,180 --> 00:14:19,680
way.

347
00:14:19,680 --> 00:14:24,370
But what if we could go
actually further than that?

348
00:14:24,370 --> 00:14:26,510
You know, if the browser is the thing that
holds

349
00:14:26,510 --> 00:14:29,240
you back, why not just hack on that?

350
00:14:29,240 --> 00:14:30,720
Cool, right?

351
00:14:30,720 --> 00:14:34,029
And in this case, I'm not
talking about, like, submitting a patch to

352
00:14:34,029 --> 00:14:38,209
Firefox for Android, although if
you would like to do that, there's a link.

353
00:14:38,209 --> 00:14:39,270
You know, totally awesome.

354
00:14:39,270 --> 00:14:42,290
You
totally can and should.

355
00:14:42,290 --> 00:14:44,160
What I'm talking about is basically hacking
together

356
00:14:44,160 --> 00:14:47,839
your own user agent inside of a native environment.

357
00:14:47,839 --> 00:14:50,130
And this is also known as
hybrid app development.

358
00:14:50,130 --> 00:14:51,130
Right?

359
00:14:51,130 --> 00:14:55,480
And maybe you haven't heard hybrid app
development described quite like that.

360
00:14:55,480 --> 00:14:57,690
Hacking together your own user agent.

361
00:14:57,690 --> 00:14:59,509
That's essentially what it is.

362
00:14:59,509 --> 00:15:00,920
And there's some frameworks out there that
can

363
00:15:00,920 --> 00:15:03,350
take care of the dirtiest part of that hack.

364
00:15:03,350 --> 00:15:07,041
If you want to try them out, I
would highly recommend Cordova, which is a

365
00:15:07,041 --> 00:15:11,149
really brilliant project that feels
the closest to actually still developing with

366
00:15:11,149 --> 00:15:15,709
the web, but getting APIs from
the native device.

367
00:15:15,709 --> 00:15:18,630
But I do actually think it's valuable to do
yourself.

368
00:15:18,630 --> 00:15:20,830
You
know, are you going to implement a better

369
00:15:20,830 --> 00:15:23,519
browser for all mobile users?

370
00:15:23,519 --> 00:15:25,040
You
know, are you smarter than the people who

371
00:15:25,040 --> 00:15:28,430
work on Firefox and Chrome, and
Windows?

372
00:15:28,430 --> 00:15:30,339
Absolutely not.

373
00:15:30,339 --> 00:15:31,339
You're not.

374
00:15:31,339 --> 00:15:32,339
I'm sorry.

375
00:15:32,339 --> 00:15:33,339
Maybe you are.

376
00:15:33,339 --> 00:15:34,339
I don't know.

377
00:15:34,339 --> 00:15:35,339
Come work for us if you are.

378
00:15:35,339 --> 00:15:36,339
But you're probably not.

379
00:15:36,339 --> 00:15:37,339
But...

380
00:15:37,339 --> 00:15:38,540
You know,
personally, for what I'm working on...

381
00:15:38,540 --> 00:15:39,899
No, seriously.

382
00:15:39,899 --> 00:15:42,610
Come talk to me.

383
00:15:42,610 --> 00:15:45,199
For
what I'm working on, I found that building

384
00:15:45,199 --> 00:15:50,480
a custom hybrid architecture, while
it's not the solution for all of the web's

385
00:15:50,480 --> 00:15:54,259
problems, it allowed me to
experiment with solving the exact problems

386
00:15:54,259 --> 00:15:57,830
that we were having with the mobile
web, and understanding that connection much

387
00:15:57,830 --> 00:16:01,709
better than I would, you know,
using something like Cordova, or just building

388
00:16:01,709 --> 00:16:04,220
within the browser.

389
00:16:04,220 --> 00:16:06,280
So to put
this into perspective, I'm going to talk a

390
00:16:06,280 --> 00:16:09,800
little bit about what my team at
Mozilla is working on.

391
00:16:09,800 --> 00:16:13,180
We're interested in what web authoring tools
might look

392
00:16:13,180 --> 00:16:19,290
like, primarily for new users of the web in
Bangladesh, Brazil, India, and

393
00:16:19,290 --> 00:16:21,139
Kenya, using only a mobile phone.

394
00:16:21,139 --> 00:16:23,930
So that's, like, what our problem is.

395
00:16:23,930 --> 00:16:28,579
And the first iteration we experimented with
was a client side single page

396
00:16:28,579 --> 00:16:29,579
app.

397
00:16:29,579 --> 00:16:38,839
We didn't target iOS, because it's not a huge
part of our market.

398
00:16:38,839 --> 00:16:43,170
But we
had specific issues that were major blockers.

399
00:16:43,170 --> 00:16:48,890
Obviously we needed to make
something work really, really well offline,

400
00:16:48,890 --> 00:16:50,040
and in 3G or less.

401
00:16:50,040 --> 00:16:54,160
That was a huge
requirement for us.

402
00:16:54,160 --> 00:16:56,740
We tried using AppCache, but it wasn't doing
what we

403
00:16:56,740 --> 00:16:57,740
needed it to do.

404
00:16:57,740 --> 00:17:01,160
We were seeing a lot of issues with memory
leaks popping up

405
00:17:01,160 --> 00:17:04,900
in client side memory architectures, particularly
when building or destroying

406
00:17:04,900 --> 00:17:08,260
new views.

407
00:17:08,260 --> 00:17:11,150
Especially when people are idling the apps
on their phone for three

408
00:17:11,150 --> 00:17:12,150
or four hours.

409
00:17:12,150 --> 00:17:14,130
That was a huge issue for us.

410
00:17:14,130 --> 00:17:17,040
Another big issue was UI perf.

411
00:17:17,040 --> 00:17:19,309
It's an editing interface when you touch.

412
00:17:19,309 --> 00:17:28,490
And 50% of our user were still using
Android phones before 4.4.

413
00:17:28,490 --> 00:17:30,620
Anybody develop for the stock Android browser?

414
00:17:30,620 --> 00:17:31,620
Nobody?

415
00:17:31,620 --> 00:17:33,240
Oh my goodness.

416
00:17:33,240 --> 00:17:35,470
You think IE is bad.

417
00:17:35,470 --> 00:17:39,299
You should try developing for the
Android soft browser.

418
00:17:39,299 --> 00:17:41,570
It does not autoupdate.

419
00:17:41,570 --> 00:17:42,570
It's pretty horrible.

420
00:17:42,570 --> 00:17:46,570
So these
were problems.

421
00:17:46,570 --> 00:17:49,610
Let's figure out how we fix some of these
things in a custom Android

422
00:17:49,610 --> 00:17:50,670
environment.

423
00:17:50,670 --> 00:17:51,740
So...

424
00:17:51,740 --> 00:17:54,550
Actually, any Android developers here?

425
00:17:54,550 --> 00:17:55,550
No?

426
00:17:55,550 --> 00:17:57,280
Oh, we've got
one.

427
00:17:57,280 --> 00:17:58,280
This is good.

428
00:17:58,280 --> 00:17:59,280


429
00:17:59,280 --> 00:18:00,280
All right.

430
00:18:00,280 --> 00:18:02,370
This is going to be interesting to
you.

431
00:18:02,370 --> 00:18:04,120
So I was going to skip past this part.

432
00:18:04,120 --> 00:18:06,230
If you guys all do Android.

433
00:18:06,230 --> 00:18:07,230
But...

434
00:18:07,230 --> 00:18:08,230
All right.

435
00:18:08,230 --> 00:18:11,900
So the basic architecture -- how do we build
this custom hybrid

436
00:18:11,900 --> 00:18:12,900
app?

437
00:18:12,900 --> 00:18:16,620
And by the way, this is really similar to
how Cordova works or any other

438
00:18:16,620 --> 00:18:17,980
hybrid architecture.

439
00:18:17,980 --> 00:18:20,690
I want you to understand how you do it yourself.

440
00:18:20,690 --> 00:18:23,480
So the
first thing we do is we start with an Android

441
00:18:23,480 --> 00:18:26,580
activity, which is like a basic
view in Android.

442
00:18:26,580 --> 00:18:30,030
And that may or may not contain some UI, like
a back button

443
00:18:30,030 --> 00:18:31,960
or a header.

444
00:18:31,960 --> 00:18:34,030
Or it might just be like a frame to hold the
web view.

445
00:18:34,030 --> 00:18:35,100
All right?

446
00:18:35,100 --> 00:18:36,289
So how do we do that?

447
00:18:36,289 --> 00:18:37,810
We write some Java.

448
00:18:37,810 --> 00:18:38,930
We create an activity.

449
00:18:38,930 --> 00:18:41,289
We create the
layout in XML.

450
00:18:41,289 --> 00:18:43,909
Then we add it to the manifest, where we can
specify things

451
00:18:43,909 --> 00:18:47,880
like the name and the parent view, the view
hierarchy, stuff like that.

452
00:18:47,880 --> 00:18:52,510
It's
kind of weird, but not so weird.

453
00:18:52,510 --> 00:18:54,780
Inside that, we instantiate a web runtime.

454
00:18:54,780 --> 00:18:59,580
That can be Chromium or even Gecko.

455
00:18:59,580 --> 00:19:04,920
There's a project to do that, but it's not
ready yet.

456
00:19:04,920 --> 00:19:07,010
That's super cool.

457
00:19:07,010 --> 00:19:12,390
And Android makes it easy to do.

458
00:19:12,390 --> 00:19:20,550
In 4.4 plus or
web kit -- you just implement the class instantiate.

459
00:19:20,550 --> 00:19:25,840
Super easies, right?

460
00:19:25,840 --> 00:19:28,080
Like
us, you probably want to support the most

461
00:19:28,080 --> 00:19:30,600
modern version of browsers.

462
00:19:30,600 --> 00:19:33,180
Instead
of using the built in Webkit, you can use

463
00:19:33,180 --> 00:19:36,820
this, which is crosswalk.

464
00:19:36,820 --> 00:19:41,100
Lets you
embed the latest version of Android as far

465
00:19:41,100 --> 00:19:43,409
back as 4.0.

466
00:19:43,409 --> 00:19:49,850
And it exposes the
same JavaScript Java bindings -- it's great.

467
00:19:49,850 --> 00:19:53,510
Crosswalk project.org.

468
00:19:53,510 --> 00:19:55,780
So the
last thing we're going to need in this architecture

469
00:19:55,780 --> 00:19:58,820
is a communication layer
that binds our JavaScript and our Android

470
00:19:58,820 --> 00:20:00,450
code together.

471
00:20:00,450 --> 00:20:03,840
Some of that is
provided by the web view class or the crosswalk

472
00:20:03,840 --> 00:20:08,970
class, so you can load
external URLs, you can load packaged assets

473
00:20:08,970 --> 00:20:09,990
inside your app.

474
00:20:09,990 --> 00:20:12,070
And if you're
wondering -- yes, even if you're using the

475
00:20:12,070 --> 00:20:17,130
file protocol, you can do XHR,
because this is your own user agent, and you

476
00:20:17,130 --> 00:20:18,929
can do what you want.

477
00:20:18,929 --> 00:20:20,990
All right.

478
00:20:20,990 --> 00:20:25,190
But the real magic that happens, though, is
you can expose a custom

479
00:20:25,190 --> 00:20:29,309
Java interface into your JavaScript by attaching
it to the window object, and

480
00:20:29,309 --> 00:20:32,380
that kind of lets you do whatever you want.

481
00:20:32,380 --> 00:20:34,110
So what does that look like?

482
00:20:34,110 --> 00:20:37,059
We've
got -- we add JavaScript interface to our

483
00:20:37,059 --> 00:20:41,100
web view, we basically attach a
class to it, and we can add some methods on

484
00:20:41,100 --> 00:20:42,740
that class.

485
00:20:42,740 --> 00:20:46,340
And those methods that
are declared actually show up on window.Android,

486
00:20:46,340 --> 00:20:48,809
or whatever -- we can call it
whatever we want.

487
00:20:48,809 --> 00:20:50,260
I called it Android.

488
00:20:50,260 --> 00:20:53,410
We can just call those Java functions.

489
00:20:53,410 --> 00:20:57,779
Of course, you're fairly limited in what kind
of data structures you can pass

490
00:20:57,779 --> 00:20:58,779
through.

491
00:20:58,779 --> 00:21:00,210
You're going to want to use primitives like
strings and stuff.

492
00:21:00,210 --> 00:21:03,029
You
can't pass full objects or functions around.

493
00:21:03,029 --> 00:21:04,029
Sorry.

494
00:21:04,029 --> 00:21:05,029
But...

495
00:21:05,029 --> 00:21:06,029
It's still pretty
powerful.

496
00:21:06,029 --> 00:21:08,790
And that's basically it.

497
00:21:08,790 --> 00:21:09,790
So...

498
00:21:09,790 --> 00:21:10,790
Yeah.

499
00:21:10,790 --> 00:21:11,790
That's how it works.

500
00:21:11,790 --> 00:21:15,900
If you remember from
our example, one of the major issues we had

501
00:21:15,900 --> 00:21:20,190
was that the client side routing
caused a lot of unexpected memory leaks.

502
00:21:20,190 --> 00:21:25,429
Long lived processes were kind of not
so great in our client side app.

503
00:21:25,429 --> 00:21:28,920
So what we did -- and this is something you
couldn't do in Cordova, but we could, because

504
00:21:28,920 --> 00:21:32,929
we were hacking something
together -- in order to fix the issue we had,

505
00:21:32,929 --> 00:21:36,040
we actually moved the routing
into Android, so we could take advantage of

506
00:21:36,040 --> 00:21:40,700
the more sophisticated memory
management and life cycle events, and we instantiated

507
00:21:40,700 --> 00:21:46,659
each page of the app as
an isolated view with its own activity.

508
00:21:46,659 --> 00:21:51,660
That's really similar to server side
routing, and it actually has the same benefits,

509
00:21:51,660 --> 00:21:55,250
like encapsulation of each
page, but in Android, we also get the added

510
00:21:55,250 --> 00:22:00,279
benefit of super smooth
transitions, layout hierarchies, we can get

511
00:22:00,279 --> 00:22:04,830
the back button to do what we
want, so we get the best of both worlds.

512
00:22:04,830 --> 00:22:06,750
Pretty cool.

513
00:22:06,750 --> 00:22:09,559
What did we do about
shared state?

514
00:22:09,559 --> 00:22:12,559
This is where the JS Java bindings come in.

515
00:22:12,559 --> 00:22:16,799
Because we're using
React to render the web UI, it's pretty trivial

516
00:22:16,799 --> 00:22:21,110
to send parameters into React
and take the state out of React and cache

517
00:22:21,110 --> 00:22:23,059
in Android.

518
00:22:23,059 --> 00:22:26,970
So what does passing
rooted params look like?

519
00:22:26,970 --> 00:22:32,340
You stringify the router params, get an initial
state

520
00:22:32,340 --> 00:22:35,500
function, and all of a sudden you have all
the information from your router.

521
00:22:35,500 --> 00:22:37,640
That's pretty simple.

522
00:22:37,640 --> 00:22:43,539
And to cache state, we create a JavaScript
interface

523
00:22:43,539 --> 00:22:48,871
called setState, that allows us to pass in
a stringified JSON object, so it

524
00:22:48,871 --> 00:22:54,030
can be cached in the shared preferences in
Android.

525
00:22:54,030 --> 00:22:57,290
And our React code, we
just need to hook into it.

526
00:22:57,290 --> 00:23:00,860
So every time our component updates, we set
the

527
00:23:00,860 --> 00:23:05,340
state in Android, so it's cached, and when
the component mounts, we just pull

528
00:23:05,340 --> 00:23:07,400
it down and then restore the state.

529
00:23:07,400 --> 00:23:09,020
So super simple.

530
00:23:09,020 --> 00:23:13,320
But it solves a problem
-- we can restore things in an offline context,

531
00:23:13,320 --> 00:23:19,370
we can get around using that
Android-based routing, without having to sacrifice

532
00:23:19,370 --> 00:23:22,440
our User Experience.

533
00:23:22,440 --> 00:23:23,970
So
what about device integration?

534
00:23:23,970 --> 00:23:25,289
This is something actually if you're going
to

535
00:23:25,289 --> 00:23:27,250
do it, you should look at the Cordova code
base.

536
00:23:27,250 --> 00:23:31,790
There's a lot of things that
looked at device integration.

537
00:23:31,790 --> 00:23:36,260
Here we write some of the typical code you
would

538
00:23:36,260 --> 00:23:40,720
write in an Android app for dispatching the
camera intent, looking at whether

539
00:23:40,720 --> 00:23:49,020
you want a camera or gallery, we create a
URI out of our image, or we could do

540
00:23:49,020 --> 00:23:52,070
something like upload it at that point in
time.

541
00:23:52,070 --> 00:23:56,480
And then we actually post it
in this super awesome hacky JavaScript window

542
00:23:56,480 --> 00:23:57,990
thing.

543
00:23:57,990 --> 00:24:02,762
We actually post it to a method in JavaScript,
we post the URI, and then all

544
00:24:02,762 --> 00:24:06,140
of a sudden we can use it in our JavaScript.

545
00:24:06,140 --> 00:24:11,640
So it seems totally terrible, but
hey -- you get an understanding of how Android

546
00:24:11,640 --> 00:24:14,360
is receiving the camera intent.

547
00:24:14,360 --> 00:24:17,929
You get an understanding of what you can do
in terms of compression.

548
00:24:17,929 --> 00:24:20,409
You get
to be a lot closer to your device than you

549
00:24:20,409 --> 00:24:23,630
ever would be using some web API or
just saying...

550
00:24:23,630 --> 00:24:27,140
Well, we can't support camera.

551
00:24:27,140 --> 00:24:28,210
So what else?

552
00:24:28,210 --> 00:24:30,510
There's lots of
things you can do.

553
00:24:30,510 --> 00:24:32,830
You can bind to Android's offline network
caching

554
00:24:32,830 --> 00:24:33,830
utilities.

555
00:24:33,830 --> 00:24:37,190
You know, if you want to do that -- before
service workers are

556
00:24:37,190 --> 00:24:38,190
available.

557
00:24:38,190 --> 00:24:41,559
You can hook into some native gestures, so
you could actually read

558
00:24:41,559 --> 00:24:44,900
gestures on the Android side and post them
into JavaScript.

559
00:24:44,900 --> 00:24:47,240
If you want to do
things like pinch zooms or swipes that are

560
00:24:47,240 --> 00:24:49,720
much better architected in the
Android platform.

561
00:24:49,720 --> 00:24:53,360
And of course, you can do lots of device integration,
like

562
00:24:53,360 --> 00:24:54,840
push notifications or whatever you want.

563
00:24:54,840 --> 00:24:56,159
And really, it's up to you.

564
00:24:56,159 --> 00:24:57,600
Because
it's your browser.

565
00:24:57,600 --> 00:24:59,480
Well, it's your user agent.

566
00:24:59,480 --> 00:25:00,480
So...

567
00:25:00,480 --> 00:25:05,610
The truth is I'm not really sure any of this
is going to be actually

568
00:25:05,610 --> 00:25:07,080
successful.

569
00:25:07,080 --> 00:25:10,260
Or even that it's reasonable or possible to
make fundamental

570
00:25:10,260 --> 00:25:14,490
changes to the mobile web in this way that
works.

571
00:25:14,490 --> 00:25:20,220
But what I am certain of is
if you don't try bold, native things -- naive

572
00:25:20,220 --> 00:25:23,350
things, and develop a better
understanding of the platform you're building

573
00:25:23,350 --> 00:25:26,549
for, you know, if all you're
doing is pushing up against the edges of the

574
00:25:26,549 --> 00:25:29,520
browser, things are not going to
change.

575
00:25:29,520 --> 00:25:33,270
No one is going to fix the web but you, and
your understanding of your

576
00:25:33,270 --> 00:25:36,799
real problems.

577
00:25:36,799 --> 00:25:41,320
So I want to end with something inspired by
my dad.

578
00:25:41,320 --> 00:25:43,440
This is my
dad.

579
00:25:43,440 --> 00:25:47,149
Because one, he was pretty much the coolest
engineer I've ever met in my

580
00:25:47,149 --> 00:25:48,419
life.

581
00:25:48,419 --> 00:25:53,120
And two, because Friday would have been his
71st birthday.

582
00:25:53,120 --> 00:25:58,090
So happy
birthday, dad.

583
00:25:58,090 --> 00:25:59,720
Thanks.

584
00:25:59,720 --> 00:26:02,490
So my dad was totally self-taught.

585
00:26:02,490 --> 00:26:05,799
He was an amateur
radio hacker, and he also designed some really,

586
00:26:05,799 --> 00:26:10,720
really cool radical
electronics equipment back in the '60s, '70s,

587
00:26:10,720 --> 00:26:11,980
and '80s.

588
00:26:11,980 --> 00:26:14,630
He worked with a lot
of people who had engineering degrees, and

589
00:26:14,630 --> 00:26:18,559
one of the things he said all the
time was -- for all their education and understanding

590
00:26:18,559 --> 00:26:22,250
of theory, a lot of
people just didn't really get what good engineering

591
00:26:22,250 --> 00:26:24,270
was.

592
00:26:24,270 --> 00:26:26,370
Good engineering.

593
00:26:26,370 --> 00:26:31,090
Because to my dad, really good engineering
was finding adequate solutions to

594
00:26:31,090 --> 00:26:32,970
problems that really matter to people.

595
00:26:32,970 --> 00:26:37,740
In a way that someone in the future,
who's smarter and better than you can understand

596
00:26:37,740 --> 00:26:39,710
and improve on.

597
00:26:39,710 --> 00:26:42,250
And as long
as you're okay with the fact that the web

598
00:26:42,250 --> 00:26:46,940
is always going to be this
patchwork, open, weird, somewhat hacky, totally

599
00:26:46,940 --> 00:26:50,440
imperfect thing, as long as
you're willing to think about it and build

600
00:26:50,440 --> 00:26:55,929
for the real world around you, and
not for what the platform tells you to do,

601
00:26:55,929 --> 00:26:58,000
you're probably going to make
something great.

602
00:26:58,000 --> 00:27:00,960
You know, for the 500 things that suck and
are terrible,

603
00:27:00,960 --> 00:27:03,680
you're going to make something great.

604
00:27:03,680 --> 00:27:05,370
And if the talks we have lined up...

605
00:27:05,370 --> 00:27:07,860
You
know, in the next few days, are any indication

606
00:27:07,860 --> 00:27:10,929
of what people think about
that, I think we're going to be fine.

607
00:27:10,929 --> 00:27:13,220
So hack the good hack, my friends.

