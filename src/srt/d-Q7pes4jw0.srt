1
00:00:17,230 --> 00:00:19,570

I'm going to talk about three very

2
00:00:19,570 --> 00:00:22,330
specific use cases or like problem areas

3
00:00:22,330 --> 00:00:25,210
which are really well addressable in the

4
00:00:25,210 --> 00:00:26,560
mobile space but of course also in

5
00:00:26,560 --> 00:00:29,050
normal desktop browsers and everything

6
00:00:29,050 --> 00:00:31,900
but first of all my name is Nicola

7
00:00:31,900 --> 00:00:35,379
lankan this is my twitter handle and I

8
00:00:35,379 --> 00:00:38,620
write JavaScript every day I'm from the

9
00:00:38,620 --> 00:00:41,050
company's evil we beer based in Germany

10
00:00:41,050 --> 00:00:43,750
I live in Amsterdam we do javascript

11
00:00:43,750 --> 00:00:47,500
mobile for two years now and yeah the

12
00:00:47,500 --> 00:00:48,790
mobile space is pretty pretty

13
00:00:48,790 --> 00:00:50,079
interesting and there's a lot of stuff

14
00:00:50,079 --> 00:00:52,360
happening so I really just can recommend

15
00:00:52,360 --> 00:00:55,570
to anyone who writes JavaScript to check

16
00:00:55,570 --> 00:00:57,010
out as much as possible over there I

17
00:00:57,010 --> 00:00:58,359
mean just the fact that you can write

18
00:00:58,359 --> 00:01:00,730
with new browsers and just the fact that

19
00:01:00,730 --> 00:01:02,680
the browser lifetime is so much shorter

20
00:01:02,680 --> 00:01:05,199
than we used to it's argument enough to

21
00:01:05,199 --> 00:01:07,060
just say okay I'm going to check that

22
00:01:07,060 --> 00:01:12,460
out so I guess the the most important

23
00:01:12,460 --> 00:01:14,619
thing I think is the fact that because

24
00:01:14,619 --> 00:01:16,869
we're in mobile we can actually you know

25
00:01:16,869 --> 00:01:18,490
throw away all the baggage we have and

26
00:01:18,490 --> 00:01:20,950
really really start thinking about new

27
00:01:20,950 --> 00:01:22,990
patterns and better ways of writing

28
00:01:22,990 --> 00:01:25,179
mobile apps so this is something I'm

29
00:01:25,179 --> 00:01:26,830
going to look at now in these three

30
00:01:26,830 --> 00:01:29,050
really specific use cases and the first

31
00:01:29,050 --> 00:01:32,520
point is that i'm going to use mix-ins

32
00:01:32,520 --> 00:01:35,759
i'm i'm personally coming from the dojo

33
00:01:35,759 --> 00:01:38,649
background and you know we are all used

34
00:01:38,649 --> 00:01:40,950
to do object-oriented inheritance and

35
00:01:40,950 --> 00:01:43,690
you know fighting really nested code and

36
00:01:43,690 --> 00:01:45,069
all that kind of stuff so i'm going to

37
00:01:45,069 --> 00:01:46,660
show a couple of examples how you can

38
00:01:46,660 --> 00:01:48,610
use mix-ins in a really really useful

39
00:01:48,610 --> 00:01:52,989
way so the first problem you see a lot

40
00:01:52,989 --> 00:01:55,270
of times when writing mobile apps and

41
00:01:55,270 --> 00:01:57,130
apps of course in general is how do you

42
00:01:57,130 --> 00:02:00,069
communicate between objects so if my

43
00:02:00,069 --> 00:02:02,379
state in one object state changes how to

44
00:02:02,379 --> 00:02:03,940
reflect that state in a different object

45
00:02:03,940 --> 00:02:05,709
or how do I react to that state and

46
00:02:05,709 --> 00:02:07,360
different JavaScript libraries provide

47
00:02:07,360 --> 00:02:09,190
different ways of doing that for example

48
00:02:09,190 --> 00:02:11,260
daughter allows you to do to use Total

49
00:02:11,260 --> 00:02:13,780
Connect but the thing is with using

50
00:02:13,780 --> 00:02:15,160
something like those who connect you

51
00:02:15,160 --> 00:02:16,360
don't really understand what's happening

52
00:02:16,360 --> 00:02:18,790
in the or behind the scenes and there's

53
00:02:18,790 --> 00:02:22,030
happening a lot and in mobile I'm not

54
00:02:22,030 --> 00:02:23,920
sure if you really want to do that so

55
00:02:23,920 --> 00:02:25,750
we're going to look at how to use a

56
00:02:25,750 --> 00:02:27,909
different approach on communicating

57
00:02:27,909 --> 00:02:30,580
between objects this

58
00:02:30,580 --> 00:02:32,710
thing which is really I guess something

59
00:02:32,710 --> 00:02:34,810
everybody has to address on a daily base

60
00:02:34,810 --> 00:02:36,700
is how do I reflect the state of my

61
00:02:36,700 --> 00:02:38,860
object in the Dom what do I do if my

62
00:02:38,860 --> 00:02:41,920
object property changes and how do I

63
00:02:41,920 --> 00:02:43,990
reflect that within the Dom which is

64
00:02:43,990 --> 00:02:47,020
something i think really almost browsers

65
00:02:47,020 --> 00:02:49,480
should just support in some way or the

66
00:02:49,480 --> 00:02:51,700
other anyways but right now you see all

67
00:02:51,700 --> 00:02:52,960
kinds of libraries just working around

68
00:02:52,960 --> 00:02:54,190
dead and I'm going I'm going to show one

69
00:02:54,190 --> 00:02:57,340
way which might inspire you to use a

70
00:02:57,340 --> 00:02:58,930
similar way to communicate between

71
00:02:58,930 --> 00:03:03,220
object state or using object state and

72
00:03:03,220 --> 00:03:04,600
reflecting changes of that state within

73
00:03:04,600 --> 00:03:06,910
the DOM and then the last thing I'm

74
00:03:06,910 --> 00:03:11,290
going to show you is how i can use Tom

75
00:03:11,290 --> 00:03:13,900
events and reflect and map these two two

76
00:03:13,900 --> 00:03:19,300
methods on objects so stephanie was

77
00:03:19,300 --> 00:03:20,590
sitting over there I've been hacking

78
00:03:20,590 --> 00:03:23,410
with 74 for a while on a really really

79
00:03:23,410 --> 00:03:25,890
little library called delegate and

80
00:03:25,890 --> 00:03:28,660
basically this is exactly what it's

81
00:03:28,660 --> 00:03:29,830
trying to do it starting to allow you to

82
00:03:29,830 --> 00:03:31,390
communicate between between different

83
00:03:31,390 --> 00:03:34,510
objects and the first first thing and

84
00:03:34,510 --> 00:03:35,739
the important thing is different than

85
00:03:35,739 --> 00:03:37,959
you know traditional event handling as

86
00:03:37,959 --> 00:03:39,670
we know it in the inner javascript

87
00:03:39,670 --> 00:03:42,850
libraries we use then the implementation

88
00:03:42,850 --> 00:03:44,739
is very very simple I think it's about

89
00:03:44,739 --> 00:03:47,350
20 lines of code it's it's just a very

90
00:03:47,350 --> 00:03:48,940
very short snippet it's almost a stupid

91
00:03:48,940 --> 00:03:50,290
which you could just fight yourself and

92
00:03:50,290 --> 00:03:52,660
then have a helper method which allows

93
00:03:52,660 --> 00:03:53,980
you or mixing which allows you to

94
00:03:53,980 --> 00:03:57,010
communicate between objects there's

95
00:03:57,010 --> 00:03:58,750
definitely definitely definitely less

96
00:03:58,750 --> 00:04:01,360
overhead than the overhead which you

97
00:04:01,360 --> 00:04:03,220
have when you use Total Connect because

98
00:04:03,220 --> 00:04:05,950
connect allows you to handle Dom events

99
00:04:05,950 --> 00:04:08,019
but also allows you to connect to method

100
00:04:08,019 --> 00:04:11,110
calls and in a way it's more explicit

101
00:04:11,110 --> 00:04:13,750
than pops up pops up is it's very close

102
00:04:13,750 --> 00:04:16,510
to this kind of concept but with pops up

103
00:04:16,510 --> 00:04:19,330
you never know where your topic or your

104
00:04:19,330 --> 00:04:21,880
your published topic comes from and this

105
00:04:21,880 --> 00:04:23,979
also sort of includes a lot of dangers

106
00:04:23,979 --> 00:04:26,050
when you use pops up because your code

107
00:04:26,050 --> 00:04:28,210
can get really really undie bugaboo you

108
00:04:28,210 --> 00:04:29,740
just don't know where all these topics

109
00:04:29,740 --> 00:04:33,520
get fired from you can check the code at

110
00:04:33,520 --> 00:04:38,520
this address github et vous delegate and

111
00:04:38,520 --> 00:04:40,690
I'm going to just start showing you a

112
00:04:40,690 --> 00:04:43,569
very simple example

113
00:04:43,569 --> 00:04:51,919
so let's look at the source code okay so

114
00:04:51,919 --> 00:04:53,449
this is the the entire source code

115
00:04:53,449 --> 00:04:55,189
basically delegated to mix in so we can

116
00:04:55,189 --> 00:04:57,919
mix that in into object instances and we

117
00:04:57,919 --> 00:05:00,710
have two methods delegate and emit so

118
00:05:00,710 --> 00:05:05,539
when I say object one delegate I pass

119
00:05:05,539 --> 00:05:07,580
another object into that method call and

120
00:05:07,580 --> 00:05:09,919
then I can map the functions or the

121
00:05:09,919 --> 00:05:13,789
methods within the object one onto the

122
00:05:13,789 --> 00:05:16,819
same named methods of the object to does

123
00:05:16,819 --> 00:05:19,039
it make sense so whenever whenever I

124
00:05:19,039 --> 00:05:22,400
call for instance object one show the

125
00:05:22,400 --> 00:05:24,710
method object to dot show will be called

126
00:05:24,710 --> 00:05:36,169
as well so let's take a look this is I

127
00:05:36,169 --> 00:05:37,879
mean it's a really really simple example

128
00:05:37,879 --> 00:05:40,339
so here I have a ticket ocker which

129
00:05:40,339 --> 00:05:43,550
basically you see the consoler it's it's

130
00:05:43,550 --> 00:05:46,909
a clock ticking and tocking it's amazing

131
00:05:46,909 --> 00:05:51,949
and I can change the interval now it's

132
00:05:51,949 --> 00:05:55,789
faster make it store again that's going

133
00:05:55,789 --> 00:05:57,529
to take too long let's take a look at

134
00:05:57,529 --> 00:06:07,730
the source

135
00:06:07,740 --> 00:06:11,789
so what you see here is I've I have a

136
00:06:11,789 --> 00:06:15,660
ticker constructor and most importantly

137
00:06:15,660 --> 00:06:20,910
a method called tick when I call the

138
00:06:20,910 --> 00:06:22,410
constructor I'm setting a default

139
00:06:22,410 --> 00:06:24,539
interval of one second or thousand

140
00:06:24,539 --> 00:06:29,160
milliseconds and then this line of code

141
00:06:29,160 --> 00:06:32,550
here emits the ticked event it's it's a

142
00:06:32,550 --> 00:06:35,009
synthetic event so after one second I'm

143
00:06:35,009 --> 00:06:37,770
emitting the ticked event then here i

144
00:06:37,770 --> 00:06:39,240
have the talker which is the constructor

145
00:06:39,240 --> 00:06:41,190
again same it's basically the exact same

146
00:06:41,190 --> 00:06:45,720
thing and whenever whenever I call talk

147
00:06:45,720 --> 00:06:48,750
after the interval I'm emitting the

148
00:06:48,750 --> 00:06:52,949
talked synthetic event and then I have a

149
00:06:52,949 --> 00:06:55,259
tuner the tuner is basically reading the

150
00:06:55,259 --> 00:06:59,789
value of the text input and now all i do

151
00:06:59,789 --> 00:07:02,400
is i instantiate or I call the

152
00:07:02,400 --> 00:07:04,319
constructor so I have a thicker instance

153
00:07:04,319 --> 00:07:06,389
and a talker instance and then i

154
00:07:06,389 --> 00:07:09,509
delegate the event of the ticker to the

155
00:07:09,509 --> 00:07:14,009
talker so whenever a ticked gets called

156
00:07:14,009 --> 00:07:15,840
talk of the other one gets called and

157
00:07:15,840 --> 00:07:17,639
then I do the other way around whenever

158
00:07:17,639 --> 00:07:20,370
talked got that called I call take on

159
00:07:20,370 --> 00:07:23,699
the other one so you see I mean I'm

160
00:07:23,699 --> 00:07:27,330
having a very few lines of code here the

161
00:07:27,330 --> 00:07:30,330
mix in itself is as I said 20 lines of

162
00:07:30,330 --> 00:07:35,280
code and I'm just doing this year I'm

163
00:07:35,280 --> 00:07:37,949
mixing in the delegate into the

164
00:07:37,949 --> 00:07:44,880
constructor and then I'm incensed rating

165
00:07:44,880 --> 00:07:46,229
the tuner which is basically listening

166
00:07:46,229 --> 00:07:48,030
to the text input whenever the text

167
00:07:48,030 --> 00:07:49,830
input changes i'm setting the interval

168
00:07:49,830 --> 00:07:52,139
on both instances so again i'm just

169
00:07:52,139 --> 00:07:54,389
emitting events and it's a super simple

170
00:07:54,389 --> 00:07:58,949
way to communicate between objects the

171
00:07:58,949 --> 00:08:00,930
next next example is a little bit more

172
00:08:00,930 --> 00:08:02,789
interesting it's a it's a use case we

173
00:08:02,789 --> 00:08:04,620
use basically all the time and where we

174
00:08:04,620 --> 00:08:07,050
kind of tend to use flash components

175
00:08:07,050 --> 00:08:09,630
it's file uploading so when you upload a

176
00:08:09,630 --> 00:08:12,210
large file we really like to have a

177
00:08:12,210 --> 00:08:14,639
progress event so let me show you some

178
00:08:14,639 --> 00:08:32,140
code here

179
00:08:32,150 --> 00:08:34,190
okay i'm going to skip a couple of lines

180
00:08:34,190 --> 00:08:35,990
here because the most important thing

181
00:08:35,990 --> 00:08:40,220
here are the event emitters basically so

182
00:08:40,220 --> 00:08:42,470
i implemented the file uploader using

183
00:08:42,470 --> 00:08:44,780
dojo I oh I frame to actually upload the

184
00:08:44,780 --> 00:08:47,150
file content and then I'm pulling the

185
00:08:47,150 --> 00:08:48,980
server to retrieve the status of the

186
00:08:48,980 --> 00:08:51,260
file upload so I know how far my file

187
00:08:51,260 --> 00:08:53,180
upload gold and when went and whenever

188
00:08:53,180 --> 00:08:55,550
whenever I have an update I'm going to

189
00:08:55,550 --> 00:09:17,079
omit the progress event

190
00:09:17,089 --> 00:09:19,759
and I'll basically what i say i know my

191
00:09:19,759 --> 00:09:22,610
file uploader is emitting these certain

192
00:09:22,610 --> 00:09:24,319
types of events so I'm uploaded I'm

193
00:09:24,319 --> 00:09:29,139
emitting progress starred complete and

194
00:09:29,139 --> 00:09:32,600
then you see the the third last line i'm

195
00:09:32,600 --> 00:09:34,579
seeing uploaded a delegate and I'm

196
00:09:34,579 --> 00:09:36,410
basically delegating all the events

197
00:09:36,410 --> 00:09:38,089
happening in the file uploader to a

198
00:09:38,089 --> 00:09:40,999
visual component so binding the state of

199
00:09:40,999 --> 00:09:42,649
the visual component to the status of

200
00:09:42,649 --> 00:09:44,749
the file uploader is super easy it's

201
00:09:44,749 --> 00:09:50,600
just one line of code and I mean you

202
00:09:50,600 --> 00:09:51,649
know it's a standard example but

203
00:09:51,649 --> 00:09:55,639
basically you select the file we load

204
00:09:55,639 --> 00:10:00,980
that are there we are and the upload is

205
00:10:00,980 --> 00:10:03,399
complete if you would use a larger file

206
00:10:03,399 --> 00:10:05,720
then we would actually see the upload

207
00:10:05,720 --> 00:10:08,509
state reflect in the UI component of the

208
00:10:08,509 --> 00:10:10,999
part so I have a sort of low-level file

209
00:10:10,999 --> 00:10:13,730
uploader it just emits synthetic events

210
00:10:13,730 --> 00:10:17,240
and whenever these events are emitted to

211
00:10:17,240 --> 00:10:19,759
delegate the delegates methods will be

212
00:10:19,759 --> 00:10:22,300
called and that way that way i don't use

213
00:10:22,300 --> 00:10:24,769
stuff like daughter connect on a method

214
00:10:24,769 --> 00:10:26,470
and have a really really lightweight

215
00:10:26,470 --> 00:10:32,309
object to object communication channel

216
00:10:32,319 --> 00:10:40,040
do you have a question so far you can

217
00:10:40,040 --> 00:10:41,990
use it in isolation the only only reason

218
00:10:41,990 --> 00:10:43,790
why I'm using daughter here is because I

219
00:10:43,790 --> 00:10:45,470
want to use hitch and for each and kind

220
00:10:45,470 --> 00:10:49,399
of you know keep costs browser compliant

221
00:10:49,399 --> 00:10:50,809
in a way but I mean if you really think

222
00:10:50,809 --> 00:10:52,670
about it for each you can use in most

223
00:10:52,670 --> 00:10:54,230
browsers anyways already hitch you can

224
00:10:54,230 --> 00:10:56,240
build yourself in a couple of lines so

225
00:10:56,240 --> 00:10:59,389
it is completely agnostic and it's kind

226
00:10:59,389 --> 00:11:02,300
of also the also a really important part

227
00:11:02,300 --> 00:11:04,399
of this that you know when writing for

228
00:11:04,399 --> 00:11:06,470
mobile I I mean I don't want to say you

229
00:11:06,470 --> 00:11:07,819
should write everything from scratch

230
00:11:07,819 --> 00:11:10,970
again but at the other at the other hand

231
00:11:10,970 --> 00:11:12,470
you really have to watch out for the

232
00:11:12,470 --> 00:11:14,540
libraries you use and the overhead they

233
00:11:14,540 --> 00:11:22,780
bring you know with using them

234
00:11:22,790 --> 00:11:24,650
right so the next thing is data by data

235
00:11:24,650 --> 00:11:27,110
binding so how do i bind object state to

236
00:11:27,110 --> 00:11:29,660
the dom and basically what i'm doing

237
00:11:29,660 --> 00:11:31,730
here is i'm using again delegate so you

238
00:11:31,730 --> 00:11:33,770
have to imagine you have some kind of

239
00:11:33,770 --> 00:11:36,620
model or object and whenever a property

240
00:11:36,620 --> 00:11:39,140
of that object changes I'm just emitting

241
00:11:39,140 --> 00:11:42,290
the change event and therefore i can

242
00:11:42,290 --> 00:11:44,600
easily bind the change event to a dom

243
00:11:44,600 --> 00:11:48,170
node the other thing it's which I kind

244
00:11:48,170 --> 00:11:49,250
of found interesting to think about is

245
00:11:49,250 --> 00:11:51,710
the fact that it's you don't really need

246
00:11:51,710 --> 00:11:53,900
to use a templating language anymore and

247
00:11:53,900 --> 00:11:55,070
I think templating languages are

248
00:11:55,070 --> 00:11:58,730
something really difficult a lot of

249
00:11:58,730 --> 00:12:00,530
times because either the language

250
00:12:00,530 --> 00:12:02,750
doesn't support enough things you need

251
00:12:02,750 --> 00:12:05,150
or it just supports so much that the

252
00:12:05,150 --> 00:12:07,340
overhead is just too big again and and

253
00:12:07,340 --> 00:12:09,830
that you again you know deliver a lot of

254
00:12:09,830 --> 00:12:11,630
code and at the same time probably a

255
00:12:11,630 --> 00:12:13,250
templating language will still not

256
00:12:13,250 --> 00:12:18,080
support exactly what you need so let's

257
00:12:18,080 --> 00:12:19,490
take a look at some source there so what

258
00:12:19,490 --> 00:12:22,720
I did here I took the jas Khan website

259
00:12:22,720 --> 00:12:27,550
stored the speaker events in a JSON file

260
00:12:27,550 --> 00:12:29,450
let's just take a look at the source i

261
00:12:29,450 --> 00:12:34,490
think it's going to be easier so you can

262
00:12:34,490 --> 00:12:42,090
find this also on github

263
00:12:42,100 --> 00:12:43,509
so what a built here is basically I've

264
00:12:43,509 --> 00:12:46,630
I've my lip directory where I have the

265
00:12:46,630 --> 00:12:49,990
delegate jas a couple of helpers the

266
00:12:49,990 --> 00:12:51,910
DOJ's which again you don't really need

267
00:12:51,910 --> 00:12:54,370
only for real i only use it for stuff

268
00:12:54,370 --> 00:12:57,490
like for each and mix and hitch so you

269
00:12:57,490 --> 00:12:59,290
definitely can just exchange it with

270
00:12:59,290 --> 00:13:04,959
another library then i have something

271
00:13:04,959 --> 00:13:07,720
called the models folder which is really

272
00:13:07,720 --> 00:13:15,860
a very very basic model representation

273
00:13:15,870 --> 00:13:20,079
and the in part the important thing here

274
00:13:20,079 --> 00:13:23,350
is it's just pseudocode really but my

275
00:13:23,350 --> 00:13:25,300
model instance has a couple of methods

276
00:13:25,300 --> 00:13:28,660
such a safe set up date get refresh or

277
00:13:28,660 --> 00:13:30,399
whatever you can also do push and pull

278
00:13:30,399 --> 00:13:32,440
and which I think I like more but

279
00:13:32,440 --> 00:13:35,170
whatever and when whenever the update

280
00:13:35,170 --> 00:13:40,959
happens you omit the event changed so in

281
00:13:40,959 --> 00:13:42,370
my little application i will show you

282
00:13:42,370 --> 00:13:46,360
the app first so it's really really a

283
00:13:46,360 --> 00:13:52,389
simple list of all the talks basically i

284
00:13:52,389 --> 00:13:57,220
mean nothing fancy about it will close

285
00:13:57,220 --> 00:14:04,340
this

286
00:14:04,350 --> 00:14:06,270
well the kind of gets interesting in the

287
00:14:06,270 --> 00:14:10,050
views part so we have the JSON the jason

288
00:14:10,050 --> 00:14:12,270
has all the speaker events in there and

289
00:14:12,270 --> 00:14:14,280
I have two views the page view which

290
00:14:14,280 --> 00:14:16,710
basically is the entire the entire page

291
00:14:16,710 --> 00:14:18,540
and then I have an item view and the

292
00:14:18,540 --> 00:14:20,790
item view is one single item of the

293
00:14:20,790 --> 00:14:23,580
application and if you look at the

294
00:14:23,580 --> 00:14:26,880
source code here I'm only using mix-ins

295
00:14:26,880 --> 00:14:30,570
in this case and it's I think if I think

296
00:14:30,570 --> 00:14:31,590
when you look at the code it's really

297
00:14:31,590 --> 00:14:33,150
really easy to understand so the first

298
00:14:33,150 --> 00:14:35,940
thing I'm mixing in is a template helper

299
00:14:35,940 --> 00:14:37,830
the only thing the template help it does

300
00:14:37,830 --> 00:14:39,360
is it basically renders the template

301
00:14:39,360 --> 00:14:41,910
into the Dom node which you specify so

302
00:14:41,910 --> 00:14:44,160
nothing really really fancy the next

303
00:14:44,160 --> 00:14:46,260
thing I mix in is the data max mixin

304
00:14:46,260 --> 00:14:48,060
which basically provides the method to

305
00:14:48,060 --> 00:14:51,270
bind the object to the DOM and then

306
00:14:51,270 --> 00:14:52,680
another thing i'm going to call i'm

307
00:14:52,680 --> 00:14:54,060
going to talk about in a little bit as

308
00:14:54,060 --> 00:14:57,240
the events mix in so now if you look at

309
00:14:57,240 --> 00:15:01,140
the bind object to dom method when

310
00:15:01,140 --> 00:15:03,000
instantiate the item i actually get a

311
00:15:03,000 --> 00:15:05,430
item instance of that of that model

312
00:15:05,430 --> 00:15:08,370
passed into the constructor and then

313
00:15:08,370 --> 00:15:11,730
here I'm doing bind object to DOM and as

314
00:15:11,730 --> 00:15:14,670
the first parameter I pass the model and

315
00:15:14,670 --> 00:15:18,090
it's a second I pass the properties of

316
00:15:18,090 --> 00:15:19,740
the model which I want to render into

317
00:15:19,740 --> 00:15:23,430
the DOM and the bind object to DOM

318
00:15:23,430 --> 00:15:27,020
method basically queries the Dom node

319
00:15:27,020 --> 00:15:30,030
bike last name so if i say title Tyler

320
00:15:30,030 --> 00:15:32,400
Lee reflects actually the adjacent

321
00:15:32,400 --> 00:15:35,930
property of the of the events Jason and

322
00:15:35,930 --> 00:15:40,700
at the same time queries where is it

323
00:15:40,700 --> 00:15:43,950
queries that Dom snippet for the title

324
00:15:43,950 --> 00:15:48,840
class so whenever my object emits the

325
00:15:48,840 --> 00:15:52,440
change event I'm calling this into dot

326
00:15:52,440 --> 00:15:55,110
HTML helper method which basically sets

327
00:15:55,110 --> 00:15:58,620
in inner HTML if you have formed values

328
00:15:58,620 --> 00:16:01,770
or input inputs you could have into dot

329
00:16:01,770 --> 00:16:03,690
value and just you know right a little

330
00:16:03,690 --> 00:16:05,670
helper which does exactly what you need

331
00:16:05,670 --> 00:16:08,100
for that case so what is it here I bound

332
00:16:08,100 --> 00:16:11,100
basically the title time and speaker to

333
00:16:11,100 --> 00:16:13,830
the DOM and now whenever I change the

334
00:16:13,830 --> 00:16:16,560
property of that object it gets

335
00:16:16,560 --> 00:16:18,300
reflected within the Dom

336
00:16:18,300 --> 00:16:23,280
does it make sense so I have an example

337
00:16:23,280 --> 00:16:26,520
here I'm going to explain it in a second

338
00:16:26,520 --> 00:16:29,190
but basically i'm i'm attaching a Dom

339
00:16:29,190 --> 00:16:30,840
event when whenever the Dom event gets

340
00:16:30,840 --> 00:16:33,120
fired I'm calling the change method and

341
00:16:33,120 --> 00:16:35,460
here I'm changing the property speaker

342
00:16:35,460 --> 00:16:39,810
to dude and then i'm updating the item

343
00:16:39,810 --> 00:16:46,890
so when i open the example i can just

344
00:16:46,890 --> 00:16:51,060
click here and it updates the Dom on the

345
00:16:51,060 --> 00:16:53,070
fly without rear ndering everything it

346
00:16:53,070 --> 00:16:56,790
just has that exact download it uses in

347
00:16:56,790 --> 00:16:58,320
HTML in that case depending on your

348
00:16:58,320 --> 00:16:59,910
helper again which you can write and

349
00:16:59,910 --> 00:17:02,940
replaces the value with a new value so a

350
00:17:02,940 --> 00:17:04,680
really really simple way of you know

351
00:17:04,680 --> 00:17:15,140
reflecting object stayed within the Dom

352
00:17:15,150 --> 00:17:17,640
and the last thing which we also have to

353
00:17:17,640 --> 00:17:19,710
which I think we always address every

354
00:17:19,710 --> 00:17:21,870
time we write mobile or desktop apps is

355
00:17:21,870 --> 00:17:26,210
how do we find Dom events to objects so

356
00:17:26,210 --> 00:17:28,860
I mean again you can use something like

357
00:17:28,860 --> 00:17:32,400
Total Connect and then you say which

358
00:17:32,400 --> 00:17:34,080
download and what event and then you can

359
00:17:34,080 --> 00:17:36,120
define an object and the method which

360
00:17:36,120 --> 00:17:44,200
gets called but what we did here is

361
00:17:44,210 --> 00:17:46,620
another really really lightweight mix in

362
00:17:46,620 --> 00:17:50,280
the events mix in and I mean it really

363
00:17:50,280 --> 00:17:52,800
doesn't do anything else but it carries

364
00:17:52,800 --> 00:17:55,920
the Dom for the speaker class and

365
00:17:55,920 --> 00:17:58,110
whenever the click event gets fired it

366
00:17:58,110 --> 00:18:00,390
calls the change method of the object

367
00:18:00,390 --> 00:18:13,250
and that's what you just saw here

368
00:18:13,260 --> 00:18:16,120
so I mean that's that's already kind of

369
00:18:16,120 --> 00:18:19,780
everything you just can really see that

370
00:18:19,780 --> 00:18:21,550
you can write a lot of functionality

371
00:18:21,550 --> 00:18:24,400
with a couple of mix-ins the code base

372
00:18:24,400 --> 00:18:26,320
is very very small you don't need to

373
00:18:26,320 --> 00:18:28,930
rely on any major JavaScript library or

374
00:18:28,930 --> 00:18:31,360
include any big like big library really

375
00:18:31,360 --> 00:18:33,460
again as I said the dojo Jas is just

376
00:18:33,460 --> 00:18:35,500
there because for because of convenience

377
00:18:35,500 --> 00:18:38,260
I was just too lazy to you know write

378
00:18:38,260 --> 00:18:40,930
these methods myself but it's a very

379
00:18:40,930 --> 00:18:43,500
very lightweight approach to fighting

380
00:18:43,500 --> 00:18:46,060
basically a very simple model view sort

381
00:18:46,060 --> 00:18:48,430
of controller and then the last thing I

382
00:18:48,430 --> 00:18:51,220
mean you can just push that on github

383
00:18:51,220 --> 00:18:54,280
build it using a build service like

384
00:18:54,280 --> 00:18:56,290
operator dial or built up fungus from

385
00:18:56,290 --> 00:18:59,800
Capcom and I I just actually built was

386
00:18:59,800 --> 00:19:01,450
building it and I mean it runs on the

387
00:19:01,450 --> 00:19:03,250
phone it's super fast it's a very very

388
00:19:03,250 --> 00:19:05,800
simple app but it really took like I

389
00:19:05,800 --> 00:19:07,780
don't know max an hour to write the

390
00:19:07,780 --> 00:19:09,340
whole thing and if you compare the two

391
00:19:09,340 --> 00:19:11,590
you know what we have here is we have

392
00:19:11,590 --> 00:19:13,690
object to DOM binding which is something

393
00:19:13,690 --> 00:19:15,790
not really simple all the time we have

394
00:19:15,790 --> 00:19:18,100
event bindings and we have a very simple

395
00:19:18,100 --> 00:19:19,930
templating sort of it's a really

396
00:19:19,930 --> 00:19:21,520
templating language but it's just a way

397
00:19:21,520 --> 00:19:24,400
to you know define it HTML snippet and

398
00:19:24,400 --> 00:19:26,050
put it at a very specific location in

399
00:19:26,050 --> 00:19:35,140
your in your DOM questions anyone nope

