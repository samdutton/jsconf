1
00:00:09,530 --> 00:00:12,599

so I made a bit of a silly application

2
00:00:12,599 --> 00:00:14,940
really and there's a bit of a story

3
00:00:14,940 --> 00:00:16,379
behind it and I've got a few practical

4
00:00:16,379 --> 00:00:19,259
tips to share that might be useful if

5
00:00:19,259 --> 00:00:20,550
you want to squeeze every single

6
00:00:20,550 --> 00:00:23,840
millisecond out of your application a

7
00:00:23,840 --> 00:00:25,920
couple of years ago I stumbled across

8
00:00:25,920 --> 00:00:29,250
Matt Westcott's Jes Becky which was a

9
00:00:29,250 --> 00:00:30,810
Sinclair spectrum emulator written in

10
00:00:30,810 --> 00:00:33,059
JavaScript and I thought this was

11
00:00:33,059 --> 00:00:34,860
awesome but I didn't really know any of

12
00:00:34,860 --> 00:00:37,559
the spectrum games so I kind of wanted

13
00:00:37,559 --> 00:00:39,230
to recreate it for one of my childhoods

14
00:00:39,230 --> 00:00:41,280
consoles which was the Nintendo

15
00:00:41,280 --> 00:00:45,239
Entertainment System and this was my

16
00:00:45,239 --> 00:00:47,119
first big JavaScript project really

17
00:00:47,119 --> 00:00:49,769
before I only done sort of little jQuery

18
00:00:49,769 --> 00:00:53,879
hacks and you know done some closure sin

19
00:00:53,879 --> 00:00:55,530
where you know I put millions of things

20
00:00:55,530 --> 00:00:56,549
in the closures and I didn't really

21
00:00:56,549 --> 00:00:58,879
understand how JavaScript really worked

22
00:00:58,879 --> 00:01:00,570
but I suppose you've got to start

23
00:01:00,570 --> 00:01:05,100
somewhere and I'd know how to make an

24
00:01:05,100 --> 00:01:07,770
emulator so I thought I'd find an

25
00:01:07,770 --> 00:01:09,630
existing one to pause or to at least get

26
00:01:09,630 --> 00:01:12,060
some inspiration from unfortunately most

27
00:01:12,060 --> 00:01:14,399
of the existing emulators are written in

28
00:01:14,399 --> 00:01:17,310
C and they use loads of sort of pointer

29
00:01:17,310 --> 00:01:20,640
magic to map bits of memory around now

30
00:01:20,640 --> 00:01:21,890
this could be implemented in JavaScript

31
00:01:21,890 --> 00:01:25,409
but it'd be incredibly inefficient so I

32
00:01:25,409 --> 00:01:27,509
tried to look around for one that was in

33
00:01:27,509 --> 00:01:30,119
a sort of higher level language luck

34
00:01:30,119 --> 00:01:31,289
would have it someone had written one

35
00:01:31,289 --> 00:01:33,479
and written in SML is written in Java

36
00:01:33,479 --> 00:01:36,119
which was called Venus and it's

37
00:01:36,119 --> 00:01:39,329
available at virtual maze comm where he

38
00:01:39,329 --> 00:01:40,679
has a big library of games and it runs

39
00:01:40,679 --> 00:01:45,060
inside the browser as an applet now the

40
00:01:45,060 --> 00:01:47,729
nice thing about Java is that well the

41
00:01:47,729 --> 00:01:49,859
syntax of Java is actually fairly

42
00:01:49,859 --> 00:01:52,259
different but the semantics of the two

43
00:01:52,259 --> 00:01:53,909
languages as in what the code actually

44
00:01:53,909 --> 00:01:56,100
means is actually remarkably similar

45
00:01:56,100 --> 00:01:58,350
and this makes translating Java to

46
00:01:58,350 --> 00:02:02,340
JavaScript really straightforward for

47
00:02:02,340 --> 00:02:06,530
example this is a class in Java with a

48
00:02:06,530 --> 00:02:08,819
constructor function and this is

49
00:02:08,819 --> 00:02:09,990
basically the same thing in JavaScript

50
00:02:09,990 --> 00:02:12,000
we've just removed the remove the

51
00:02:12,000 --> 00:02:13,560
constructor function and made it part of

52
00:02:13,560 --> 00:02:14,910
the function which if you like is the

53
00:02:14,910 --> 00:02:18,270
class this sort of thing which is a

54
00:02:18,270 --> 00:02:21,030
class method I basically did this by

55
00:02:21,030 --> 00:02:22,420
just writing a regex

56
00:02:22,420 --> 00:02:26,110
it's really quite simple breathing as

57
00:02:26,110 --> 00:02:35,910
Mike this sort of thing again thank you

58
00:02:35,910 --> 00:02:40,030
this sort of thing which is class class

59
00:02:40,030 --> 00:02:42,190
properties again it was basically a big

60
00:02:42,190 --> 00:02:44,380
regex to go through and replace all the

61
00:02:44,380 --> 00:02:46,840
sort of publicans with just VAR sorry

62
00:02:46,840 --> 00:02:50,880
this dot because it's on a on a function

63
00:02:50,880 --> 00:02:52,930
and there were a couple of semantic

64
00:02:52,930 --> 00:02:54,580
differences like this sort of thing

65
00:02:54,580 --> 00:02:56,800
where javascript doesn't have inter

66
00:02:56,800 --> 00:02:59,170
digital division so you have to

67
00:02:59,170 --> 00:03:00,549
explicitly say you wanted an integer

68
00:03:00,549 --> 00:03:03,850
because in in java being just typecast

69
00:03:03,850 --> 00:03:10,150
it as an integer now on top of this I

70
00:03:10,150 --> 00:03:12,340
just had to write the pixel where the

71
00:03:12,340 --> 00:03:15,370
pixel buffer to a canvas instead of some

72
00:03:15,370 --> 00:03:17,950
Java applet thing and attach a few

73
00:03:17,950 --> 00:03:19,840
keyboard events and add a set interval

74
00:03:19,840 --> 00:03:23,200
to trigger the frame function sixty

75
00:03:23,200 --> 00:03:25,299
times a second and that was pretty much

76
00:03:25,299 --> 00:03:26,829
it I mean most of those bits I just

77
00:03:26,829 --> 00:03:28,870
borrowed straight off Jess Becky because

78
00:03:28,870 --> 00:03:31,780
it's the same kind of thing and within a

79
00:03:31,780 --> 00:03:37,000
few days I had a working emulator now

80
00:03:37,000 --> 00:03:40,930
Jeff spec he ran at full speed but from

81
00:03:40,930 --> 00:03:42,370
the start I knew that the Menezes was

82
00:03:42,370 --> 00:03:45,489
far more complicated for example the

83
00:03:45,489 --> 00:03:46,930
spectrum doesn't have a dedicated

84
00:03:46,930 --> 00:03:50,290
graphics chip but they the nez does to

85
00:03:50,290 --> 00:03:53,049
generate sprites and stuff so I really

86
00:03:53,049 --> 00:03:54,850
had no idea how fast it was going to run

87
00:03:54,850 --> 00:03:57,250
and when I was writing it there was no

88
00:03:57,250 --> 00:03:59,380
scientific process at all I was just

89
00:03:59,380 --> 00:04:03,579
coding and praying say I've got it

90
00:04:03,579 --> 00:04:06,730
running at the time I was developing on

91
00:04:06,730 --> 00:04:09,519
Firefox 3 because at the time Firebug

92
00:04:09,519 --> 00:04:13,239
was the best thing around and it kind of

93
00:04:13,239 --> 00:04:19,359
works get married to move it kind of

94
00:04:19,359 --> 00:04:22,030
works but it was a bit like Mario's on

95
00:04:22,030 --> 00:04:25,139
the moon it wasn't really playable

96
00:04:25,139 --> 00:04:27,460
this was supposed to be running at 60fps

97
00:04:27,460 --> 00:04:30,460
and it was barely managing ten now

98
00:04:30,460 --> 00:04:33,250
really interestingly actually it was

99
00:04:33,250 --> 00:04:35,050
like this across all the browsers

100
00:04:35,050 --> 00:04:36,819
although all the modern browsers at the

101
00:04:36,819 --> 00:04:39,879
time anyway Safari and Chrome both ran

102
00:04:39,879 --> 00:04:43,419
it about this feat and being just a

103
00:04:43,419 --> 00:04:45,310
naive JavaScript developer I just

104
00:04:45,310 --> 00:04:46,960
assumed that all JavaScript engines were

105
00:04:46,960 --> 00:04:49,300
built equal and this was the fastest it

106
00:04:49,300 --> 00:04:51,190
could run so I just sort of gave up I

107
00:04:51,190 --> 00:04:52,449
actually didn't release it for six

108
00:04:52,449 --> 00:04:53,470
months because I thought nobody would

109
00:04:53,470 --> 00:05:01,659
want to play this but anyway so going

110
00:05:01,659 --> 00:05:04,750
back in time a bit I first started this

111
00:05:04,750 --> 00:05:07,030
in December 2008 and then I released it

112
00:05:07,030 --> 00:05:11,830
onto the Internet in June last year and

113
00:05:11,830 --> 00:05:13,240
then a few months later somebody I went

114
00:05:13,240 --> 00:05:17,500
to uni with sent me a patch and all it

115
00:05:17,500 --> 00:05:20,650
did was replaced this bit of code which

116
00:05:20,650 --> 00:05:22,599
goes through every pixel in the buffer

117
00:05:22,599 --> 00:05:25,419
and writes it to the canvas element and

118
00:05:25,419 --> 00:05:29,830
see the screen is 256 by 240 pixels and

119
00:05:29,830 --> 00:05:33,310
it replaced this with this which all

120
00:05:33,310 --> 00:05:34,990
it's doing is exactly the same thing

121
00:05:34,990 --> 00:05:36,789
except it remembers what the previous

122
00:05:36,789 --> 00:05:39,219
buffer was and only writes pixels to the

123
00:05:39,219 --> 00:05:42,300
buffer which have actually changed and

124
00:05:42,300 --> 00:05:44,949
when you applied this patch and ran it

125
00:05:44,949 --> 00:05:52,180
in Chrome it did this it was running at

126
00:05:52,180 --> 00:05:58,170
full speed

127
00:05:58,180 --> 00:06:00,669
and this is not the incredible bit I

128
00:06:00,669 --> 00:06:02,350
mean this is with a frame limiter that

129
00:06:02,350 --> 00:06:04,960
limits it to 60fps or almost 60 P FPS

130
00:06:04,960 --> 00:06:08,530
anyway without the frame limiter on it

131
00:06:08,530 --> 00:06:10,800
was always running double that speed I

132
00:06:10,800 --> 00:06:13,330
had basically a ten times performance

133
00:06:13,330 --> 00:06:17,810
increase just from this one tiny patch

134
00:06:17,820 --> 00:06:19,870
and I mean initially I couldn't

135
00:06:19,870 --> 00:06:22,090
understand what the hell was going on I

136
00:06:22,090 --> 00:06:23,830
mean for starters my assumption that all

137
00:06:23,830 --> 00:06:25,900
the JavaScript engines were built equal

138
00:06:25,900 --> 00:06:28,810
was just wrong and not only that I

139
00:06:28,810 --> 00:06:30,400
couldn't stand why chrome was the one

140
00:06:30,400 --> 00:06:34,210
that when obscenely fast say with a

141
00:06:34,210 --> 00:06:35,889
little help quite ironically from a

142
00:06:35,889 --> 00:06:41,680
mozilla developer we basically found I'm

143
00:06:41,680 --> 00:06:44,260
just gonna stop these we basically found

144
00:06:44,260 --> 00:06:46,960
that chrome is just really really really

145
00:06:46,960 --> 00:06:52,539
fast and at least at the time it was at

146
00:06:52,539 --> 00:06:53,860
the time it was streets ahead of

147
00:06:53,860 --> 00:06:58,000
everything else and the problem was that

148
00:06:58,000 --> 00:07:00,280
chrome had a bug in writing stuff to the

149
00:07:00,280 --> 00:07:03,099
canvas which is now fixed but

150
00:07:03,099 --> 00:07:04,900
essentially by only changing what's

151
00:07:04,900 --> 00:07:07,120
changed from the last buffer it was

152
00:07:07,120 --> 00:07:08,889
minimizing the number of writes it made

153
00:07:08,889 --> 00:07:10,780
to the canvas elements which essentially

154
00:07:10,780 --> 00:07:12,700
worked around this bug that made the

155
00:07:12,700 --> 00:07:14,620
canvas element really slow and let v8

156
00:07:14,620 --> 00:07:16,720
just steam ahead and run at full speed

157
00:07:16,720 --> 00:07:21,580
now these sort of micro optimize a these

158
00:07:21,580 --> 00:07:22,810
sort of things are micro optimizations

159
00:07:22,810 --> 00:07:25,780
so they usually don't really matter for

160
00:07:25,780 --> 00:07:27,490
your applications but when you have

161
00:07:27,490 --> 00:07:30,669
really really tight inner loops where

162
00:07:30,669 --> 00:07:34,330
every optimization counts they really

163
00:07:34,330 --> 00:07:35,770
make a big difference like for example

164
00:07:35,770 --> 00:07:37,780
the nez runs at 60 frames a second and

165
00:07:37,780 --> 00:07:40,570
for each frame it's emulating ten

166
00:07:40,570 --> 00:07:45,010
thousands CPU instructions and you can

167
00:07:45,010 --> 00:07:46,599
imagine how much that photo how many

168
00:07:46,599 --> 00:07:48,250
times that function gets called almost

169
00:07:48,250 --> 00:07:51,580
3/4 of a million times a second so that

170
00:07:51,580 --> 00:07:52,960
function really has to be super

171
00:07:52,960 --> 00:07:58,300
optimized now once it was actually

172
00:07:58,300 --> 00:07:59,620
playable and it was aptly on the

173
00:07:59,620 --> 00:08:01,389
internet it got a bit of attention on

174
00:08:01,389 --> 00:08:03,430
Twitter and the blogosphere and stuff

175
00:08:03,430 --> 00:08:06,070
like that and somebody from Apple came

176
00:08:06,070 --> 00:08:08,229
along to try and figure out why it was

177
00:08:08,229 --> 00:08:10,050
so slow in Safari

178
00:08:10,050 --> 00:08:12,100
it turns out it was actually a really

179
00:08:12,100 --> 00:08:14,590
simple problem safari had a problem

180
00:08:14,590 --> 00:08:18,520
caching really large objects which Jess

181
00:08:18,520 --> 00:08:21,010
knows was full of but I'm happy to say

182
00:08:21,010 --> 00:08:24,190
that this is now fixed it's not quite as

183
00:08:24,190 --> 00:08:26,440
fast as chrome but it's but it still

184
00:08:26,440 --> 00:08:29,440
runs the emulator at full speed and a

185
00:08:29,440 --> 00:08:30,820
few opera people have pointed out that

186
00:08:30,820 --> 00:08:33,479
their browsers pretty fast too

187
00:08:33,479 --> 00:08:37,360
but unfortunately Firefox is still

188
00:08:37,360 --> 00:08:42,490
really slow and you saw how how fast it

189
00:08:42,490 --> 00:08:44,950
ran in an old version earlier and it

190
00:08:44,950 --> 00:08:46,720
isn't much better on a recent stable

191
00:08:46,720 --> 00:08:49,630
version and it's basically a problem

192
00:08:49,630 --> 00:08:55,750
with how Firefox traces code where it

193
00:08:55,750 --> 00:08:57,550
tries to sort of tracing is where it

194
00:08:57,550 --> 00:08:59,050
tries to figure out how a path of code

195
00:08:59,050 --> 00:09:01,660
is going to run because with an emulator

196
00:09:01,660 --> 00:09:03,340
there's so much branching where it

197
00:09:03,340 --> 00:09:04,270
branches the different things for

198
00:09:04,270 --> 00:09:05,890
different instructions you have what's

199
00:09:05,890 --> 00:09:07,240
called I think it's a branching

200
00:09:07,240 --> 00:09:08,530
explosion or something where it just

201
00:09:08,530 --> 00:09:10,180
can't figure out what's going to happen

202
00:09:10,180 --> 00:09:11,710
in these branches and then it just gives

203
00:09:11,710 --> 00:09:13,540
up and falls back to interruption in the

204
00:09:13,540 --> 00:09:15,730
instructions one by one that might be

205
00:09:15,730 --> 00:09:18,090
wrong but that's the impression I got

206
00:09:18,090 --> 00:09:20,170
but credit to them though they're trying

207
00:09:20,170 --> 00:09:21,940
to fix this and on their jaegerman

208
00:09:21,940 --> 00:09:23,680
creating the eager monkey engine this is

209
00:09:23,680 --> 00:09:26,590
a recent build of it it actually at

210
00:09:26,590 --> 00:09:28,030
least on my little laptop it's almost

211
00:09:28,030 --> 00:09:29,590
full speed and I've heard it runs at

212
00:09:29,590 --> 00:09:32,890
full speed on faster computers and

213
00:09:32,890 --> 00:09:34,390
they've yet to improve on this I think

214
00:09:34,390 --> 00:09:35,650
they're gonna merge two branches or

215
00:09:35,650 --> 00:09:37,690
something to make it doubly fast but I'm

216
00:09:37,690 --> 00:09:38,680
not sure what's going on but it's gonna

217
00:09:38,680 --> 00:09:46,270
be really fast now I I did try it on

218
00:09:46,270 --> 00:09:51,520
explorer 9 and it it did run but I left

219
00:09:51,520 --> 00:09:53,170
it running for about an hour on my

220
00:09:53,170 --> 00:09:56,200
benchmark and it just didn't do anything

221
00:09:56,200 --> 00:09:57,910
so I'm not sure whether that's a problem

222
00:09:57,910 --> 00:09:59,440
with Internet Explorer or my benchmark

223
00:09:59,440 --> 00:10:00,970
can it be great to talk some people from

224
00:10:00,970 --> 00:10:03,040
my class about this but in theory it

225
00:10:03,040 --> 00:10:04,300
could work on in Explorer I'm just not

226
00:10:04,300 --> 00:10:08,680
sure how fast it is now a useful perform

227
00:10:08,680 --> 00:10:10,060
step which you probably already know

228
00:10:10,060 --> 00:10:10,330
about

229
00:10:10,330 --> 00:10:12,250
it's another micro optimization thing

230
00:10:12,250 --> 00:10:16,870
which is using prototypes for example in

231
00:10:16,870 --> 00:10:19,180
this top one every time that a new

232
00:10:19,180 --> 00:10:21,700
instance of tile is braces it creates a

233
00:10:21,700 --> 00:10:23,089
new render form

234
00:10:23,089 --> 00:10:26,269
but this is in the second example it

235
00:10:26,269 --> 00:10:27,829
always uses the same render function

236
00:10:27,829 --> 00:10:29,540
from the prototype and this can be

237
00:10:29,540 --> 00:10:30,740
significant faster when you're creating

238
00:10:30,740 --> 00:10:33,999
loads and loads and loads of objects I

239
00:10:33,999 --> 00:10:36,019
put this code up on the web sometime

240
00:10:36,019 --> 00:10:37,160
afterwards if you want a copy and paste

241
00:10:37,160 --> 00:10:40,249
code now when I was cleaning up my code

242
00:10:40,249 --> 00:10:42,519
to put everything into prototypes I

243
00:10:42,519 --> 00:10:46,610
stumbled on a really really annoying bug

244
00:10:46,610 --> 00:10:49,550
in Chrome and this one took me days to

245
00:10:49,550 --> 00:10:55,610
fix essentially as I sort of hangover

246
00:10:55,610 --> 00:10:58,550
from the Java port I had a load of

247
00:10:58,550 --> 00:11:02,269
variables declared in the constructor

248
00:11:02,269 --> 00:11:05,059
like this and then I called a reset

249
00:11:05,059 --> 00:11:06,379
function which actually assigned them a

250
00:11:06,379 --> 00:11:09,290
value so I could reset the object

251
00:11:09,290 --> 00:11:11,120
without having Theory instantiate it and

252
00:11:11,120 --> 00:11:11,839
obviously this is a bit pointless

253
00:11:11,839 --> 00:11:14,240
because I'm declaring those I'm defining

254
00:11:14,240 --> 00:11:16,399
those properties anyway so surely I

255
00:11:16,399 --> 00:11:19,009
might as well just take away those you

256
00:11:19,009 --> 00:11:20,629
know properties that equal no and it'll

257
00:11:20,629 --> 00:11:24,110
do exactly the same thing it doesn't at

258
00:11:24,110 --> 00:11:27,620
all Chrome the forms in Chrome drops

259
00:11:27,620 --> 00:11:31,399
around 20 fps just Chrome none of the

260
00:11:31,399 --> 00:11:33,019
other browsers I mean even Safari ran at

261
00:11:33,019 --> 00:11:36,949
full speed I'd somehow kill this bit of

262
00:11:36,949 --> 00:11:38,809
magic that made chrome run really fast

263
00:11:38,809 --> 00:11:40,639
because I was doing it as part of this

264
00:11:40,639 --> 00:11:42,019
sort of big refactoring of the

265
00:11:42,019 --> 00:11:43,579
prototypes I was convinced it was

266
00:11:43,579 --> 00:11:44,600
something to do with this and I just

267
00:11:44,600 --> 00:11:46,129
didn't like didn't consider removing

268
00:11:46,129 --> 00:11:48,579
those nulls would actually do anything

269
00:11:48,579 --> 00:11:51,199
and it turns out to do with how v8

270
00:11:51,199 --> 00:11:57,889
represents objects objects in v8 are

271
00:11:57,889 --> 00:11:59,509
backed by things called hidden classes

272
00:11:59,509 --> 00:12:02,559
which are a bit like classes in Java

273
00:12:02,559 --> 00:12:04,999
they essentially define what properties

274
00:12:04,999 --> 00:12:07,910
are on an object so when you need to

275
00:12:07,910 --> 00:12:10,309
look up a property in in from an

276
00:12:10,309 --> 00:12:13,040
object's it knows the position of that

277
00:12:13,040 --> 00:12:15,139
property from the start of the object in

278
00:12:15,139 --> 00:12:16,970
memory and it can do a really fast

279
00:12:16,970 --> 00:12:18,800
lookup like I think it's sort of three

280
00:12:18,800 --> 00:12:22,639
lines of machine code or something but

281
00:12:22,639 --> 00:12:24,679
Java scripts are dynamic language so you

282
00:12:24,679 --> 00:12:26,990
can add remove properties any time so

283
00:12:26,990 --> 00:12:29,449
when you add a property to an object in

284
00:12:29,449 --> 00:12:32,149
v8 it takes away the hidden class that's

285
00:12:32,149 --> 00:12:33,679
already on the object and a new hidden

286
00:12:33,679 --> 00:12:36,519
class with that new property had it

287
00:12:36,519 --> 00:12:39,709
so I'm guessing by not defining these

288
00:12:39,709 --> 00:12:43,430
properties in the constructor it was

289
00:12:43,430 --> 00:12:46,399
just sort of switching in and out hidden

290
00:12:46,399 --> 00:12:48,250
classes and I had as I added extra

291
00:12:48,250 --> 00:12:50,899
properties or maybe even wasn't using

292
00:12:50,899 --> 00:12:52,100
hidden classes at all and just doing

293
00:12:52,100 --> 00:12:53,329
slow lookups on the properties I don't

294
00:12:53,329 --> 00:12:55,040
know but it was something to do that it

295
00:12:55,040 --> 00:12:56,360
was something to do with Chrome's

296
00:12:56,360 --> 00:12:59,449
hidden classes so the lesson is I

297
00:12:59,449 --> 00:13:01,490
suppose always declare your properties

298
00:13:01,490 --> 00:13:02,870
in the constructor otherwise Chrome

299
00:13:02,870 --> 00:13:07,880
might do something weird you know

300
00:13:07,880 --> 00:13:09,470
another neat thing which might be

301
00:13:09,470 --> 00:13:14,870
helpful is a benchmark I wrote that it

302
00:13:14,870 --> 00:13:17,750
essentially runs 50 frames of an open

303
00:13:17,750 --> 00:13:20,480
source home Buriram and times it and

304
00:13:20,480 --> 00:13:22,339
here are some completely unscientific

305
00:13:22,339 --> 00:13:24,829
results that I put to get on the plane

306
00:13:24,829 --> 00:13:28,310
here if some of the latest browsers you

307
00:13:28,310 --> 00:13:30,199
can see Chrome on the left is really

308
00:13:30,199 --> 00:13:30,740
really fast

309
00:13:30,740 --> 00:13:33,259
I'm sorry slightly slower and they're

310
00:13:33,259 --> 00:13:35,769
not pretend is about twice as slow as

311
00:13:35,769 --> 00:13:39,199
Safari and then Firefox is a lot slower

312
00:13:39,199 --> 00:13:40,670
but this is kind of unfair because

313
00:13:40,670 --> 00:13:42,079
Firefox are going to improve their

314
00:13:42,079 --> 00:13:43,399
engine a lot this is actually the latest

315
00:13:43,399 --> 00:13:47,899
build the Egger monkey stuff but I think

316
00:13:47,899 --> 00:13:49,190
they've yet to get this faster before

317
00:13:49,190 --> 00:13:52,420
the actual official release of Firefox 4

318
00:13:52,420 --> 00:13:54,760
this is available on my github account

319
00:13:54,760 --> 00:13:56,839
and I think it's being used on the Yaga

320
00:13:56,839 --> 00:13:58,399
magic monkey engine at the moment on

321
00:13:58,399 --> 00:14:00,829
there are we fast yet calm or something

322
00:14:00,829 --> 00:14:03,130
like that and if anybody else wants to

323
00:14:03,130 --> 00:14:06,319
use it please see find me afterwards

324
00:14:06,319 --> 00:14:07,579
because I'd love to make it you know

325
00:14:07,579 --> 00:14:13,880
something that's useful one of the

326
00:14:13,880 --> 00:14:15,500
things that was really really hard to

327
00:14:15,500 --> 00:14:19,850
get right was accurate timing in Firefox

328
00:14:19,850 --> 00:14:22,360
which is quite important for an emulator

329
00:14:22,360 --> 00:14:24,170
originally I was just using a set

330
00:14:24,170 --> 00:14:26,300
timeout that called the frame function

331
00:14:26,300 --> 00:14:29,029
of like 60 times a second but this is

332
00:14:29,029 --> 00:14:31,519
incredibly an accuracy and all the games

333
00:14:31,519 --> 00:14:33,079
were just really jerky as the browser

334
00:14:33,079 --> 00:14:35,060
you know sort of decided I'm going to

335
00:14:35,060 --> 00:14:36,380
take up some more CPU time and the

336
00:14:36,380 --> 00:14:37,699
emulator just sort of stalled for a

337
00:14:37,699 --> 00:14:40,699
little bit the method I eventually

338
00:14:40,699 --> 00:14:42,500
settled them after trying a few other

339
00:14:42,500 --> 00:14:45,230
ones is using a set timeouts but making

340
00:14:45,230 --> 00:14:47,839
it fire really early and then just

341
00:14:47,839 --> 00:14:49,310
sitting in a while loop until

342
00:14:49,310 --> 00:14:50,920
right time to display the function add

343
00:14:50,920 --> 00:14:56,029
display the frame sorry it's really

344
00:14:56,029 --> 00:14:59,140
really inefficient but it kind of works

345
00:14:59,140 --> 00:15:02,350
it's incredibly accurate actually

346
00:15:02,350 --> 00:15:04,070
essentially what it does is it renders

347
00:15:04,070 --> 00:15:05,960
the frame and then waits until the right

348
00:15:05,960 --> 00:15:07,700
time to actually display the frame then

349
00:15:07,700 --> 00:15:09,440
writes it to the canvas and then

350
00:15:09,440 --> 00:15:11,630
triggers the next frame sort of half the

351
00:15:11,630 --> 00:15:13,010
time too early so it can render in the

352
00:15:13,010 --> 00:15:15,770
next frame if somebody has a better

353
00:15:15,770 --> 00:15:17,029
solution I'd really love to hear it

354
00:15:17,029 --> 00:15:20,680
because I don't like the solution at all

355
00:15:20,680 --> 00:15:22,730
one of the other shiny things I worked

356
00:15:22,730 --> 00:15:26,690
on was sound and this is really cool for

357
00:15:26,690 --> 00:15:28,130
a while you can write dynamically sound

358
00:15:28,130 --> 00:15:30,050
dynamically generated sound to an audio

359
00:15:30,050 --> 00:15:32,930
elements so I wrote a tiny little one

360
00:15:32,930 --> 00:15:35,180
pixel flash application oh it's red a

361
00:15:35,180 --> 00:15:37,190
buffer from JavaScript and then write it

362
00:15:37,190 --> 00:15:40,060
and then wrote it out to the speakers

363
00:15:40,060 --> 00:15:43,339
more recently Mozilla have developed

364
00:15:43,339 --> 00:15:45,650
their audio data API which is only

365
00:15:45,650 --> 00:15:46,790
supported in Firefox which is

366
00:15:46,790 --> 00:15:49,700
frustrating but it lets you read and

367
00:15:49,700 --> 00:15:52,610
write audio samples directly to the

368
00:15:52,610 --> 00:15:54,290
audio elements as you do cool

369
00:15:54,290 --> 00:15:56,060
visualizations and synthesizers and

370
00:15:56,060 --> 00:15:59,180
stuff like that so I wrote this little

371
00:15:59,180 --> 00:16:00,560
using the flash application I had

372
00:16:00,560 --> 00:16:01,780
written before I wrote this little

373
00:16:01,780 --> 00:16:06,410
library essentially it uses Firefox as

374
00:16:06,410 --> 00:16:08,060
API if it's available but it falls back

375
00:16:08,060 --> 00:16:10,370
to a flash little flash widget if it

376
00:16:10,370 --> 00:16:10,700
needs to

377
00:16:10,700 --> 00:16:13,120
so it's essentially backwards compatible

378
00:16:13,120 --> 00:16:15,470
Baxter I haven't tested it back through

379
00:16:15,470 --> 00:16:16,520
sort of Internet Explorer but it'll

380
00:16:16,520 --> 00:16:20,420
probably work on really old versions and

381
00:16:20,420 --> 00:16:23,480
that's pretty much it I suppose this

382
00:16:23,480 --> 00:16:24,860
time the questions because Tobias can

383
00:16:24,860 --> 00:16:34,900
make it

384
00:16:34,910 --> 00:16:46,280
yep

385
00:16:46,290 --> 00:17:04,750
oh right oh that's interesting yeah I

386
00:17:04,760 --> 00:17:12,049
see

387
00:17:12,059 --> 00:17:18,069
okay yeah cuz you could tell when you

388
00:17:18,069 --> 00:17:19,839
were playing the game that it just sort

389
00:17:19,839 --> 00:17:21,879
of sped up and then slowed down and sped

390
00:17:21,879 --> 00:17:25,329
up and slowed down that becomes I heard

391
00:17:25,329 --> 00:17:27,159
there's a hack where you could attach

392
00:17:27,159 --> 00:17:29,259
something to the window objects to get

393
00:17:29,259 --> 00:17:31,480
round set timeout zero not actually

394
00:17:31,480 --> 00:17:33,580
being set timeout zero I don't know if

395
00:17:33,580 --> 00:17:36,009
that works but not very interesting

396
00:17:36,009 --> 00:17:46,840
thank you yes it didn't really make much

397
00:17:46,840 --> 00:17:48,639
of a difference in my case because I

398
00:17:48,639 --> 00:17:50,379
instantiate all the objects before I

399
00:17:50,379 --> 00:17:53,080
started but I've run a few benchmarks in

400
00:17:53,080 --> 00:17:54,820
that about that and it's about three or

401
00:17:54,820 --> 00:17:57,759
four times faster I think so if on an

402
00:17:57,759 --> 00:17:58,990
inner inner loop if you're creating

403
00:17:58,990 --> 00:18:01,149
loads and loads of objects it's probably

404
00:18:01,149 --> 00:18:04,289
worth it I just did it to make tidy code

405
00:18:04,289 --> 00:18:23,560
but yeah that's yes

406
00:18:23,570 --> 00:18:25,500
but there was who

407
00:18:25,500 --> 00:18:52,720
oh yes

408
00:18:52,730 --> 00:18:57,929
okay what should I use and said okay

409
00:18:57,929 --> 00:19:06,909
yeah thanks for the tip anything else

