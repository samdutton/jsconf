1
00:00:37,380 --> 00:00:40,210

hey everybody welcome to my talk on

2
00:00:40,210 --> 00:00:42,160
campus performance tips you will learn

3
00:00:42,160 --> 00:00:46,180
how to pixels well as Adam mentioned my

4
00:00:46,180 --> 00:00:48,400
name is Angelina if you are interested

5
00:00:48,400 --> 00:00:50,980
in complaining about code sometimes

6
00:00:50,980 --> 00:00:53,260
retweeted articles about code a curated

7
00:00:53,260 --> 00:00:55,090
selection of red panda gifts or perhaps

8
00:00:55,090 --> 00:00:56,260
you're just interested in the slides

9
00:00:56,260 --> 00:00:58,329
from this talk afterwards you can follow

10
00:00:58,329 --> 00:01:02,100
me as Angelina Magnum on Twitter so

11
00:01:02,100 --> 00:01:04,659
whenever I start writing code on the

12
00:01:04,659 --> 00:01:05,409
Internet

13
00:01:05,409 --> 00:01:08,039
which is basically all that we do

14
00:01:08,039 --> 00:01:09,909
invariably when I'm learning something

15
00:01:09,909 --> 00:01:12,460
new I come across this idea you know

16
00:01:12,460 --> 00:01:14,259
that you should just write code worried

17
00:01:14,259 --> 00:01:16,810
about performance later and in essence

18
00:01:16,810 --> 00:01:18,219
this is actually mostly true you don't

19
00:01:18,219 --> 00:01:21,069
want to try and over optimize too early

20
00:01:21,069 --> 00:01:22,590
otherwise you're spending a lot of time

21
00:01:22,590 --> 00:01:24,759
tweaking things which may not have a

22
00:01:24,759 --> 00:01:26,319
larger impact on the project you're

23
00:01:26,319 --> 00:01:29,710
working on but more importantly in my

24
00:01:29,710 --> 00:01:31,450
opinion you'll get distracted from all

25
00:01:31,450 --> 00:01:32,920
the code that you should be writing to

26
00:01:32,920 --> 00:01:34,959
get the project done so the person that

27
00:01:34,959 --> 00:01:36,490
wrote this or that writes quote quotes

28
00:01:36,490 --> 00:01:37,780
like this on the internet and you often

29
00:01:37,780 --> 00:01:39,249
find this attached to performance

30
00:01:39,249 --> 00:01:41,499
related articles I think is mostly

31
00:01:41,499 --> 00:01:44,740
correct but I don't think entirely I

32
00:01:44,740 --> 00:01:45,880
think we should think about this just a

33
00:01:45,880 --> 00:01:49,539
little bit differently so I like to say

34
00:01:49,539 --> 00:01:52,179
now as of yesterday optimizations are a

35
00:01:52,179 --> 00:01:54,429
last step best practices should be every

36
00:01:54,429 --> 00:01:56,380
step so I'm hoping today that I give you

37
00:01:56,380 --> 00:01:58,420
some ideas about best practices working

38
00:01:58,420 --> 00:01:59,979
with canvas that are easy for people

39
00:01:59,979 --> 00:02:02,469
that are both new to canvas and maybe

40
00:02:02,469 --> 00:02:03,909
seasoned people I hope that I teach you

41
00:02:03,909 --> 00:02:05,560
one or two things that you you didn't

42
00:02:05,560 --> 00:02:08,740
already know so first of all let's

43
00:02:08,740 --> 00:02:13,000
travel back in time to the 1990s so once

44
00:02:13,000 --> 00:02:15,290
upon a time in the 1990s

45
00:02:15,290 --> 00:02:17,150
we had some limitations in our browser

46
00:02:17,150 --> 00:02:18,530
right there wasn't a lot we could do

47
00:02:18,530 --> 00:02:20,810
with a drawing we had HTML which you

48
00:02:20,810 --> 00:02:22,519
know before the word web application was

49
00:02:22,519 --> 00:02:24,799
even a thing we could create you know

50
00:02:24,799 --> 00:02:26,659
documents that were just mostly like

51
00:02:26,659 --> 00:02:28,519
documents we got introduced to CSS which

52
00:02:28,519 --> 00:02:30,859
provided some styling for said documents

53
00:02:30,859 --> 00:02:32,180
and it actually took quite a while till

54
00:02:32,180 --> 00:02:33,950
we could do sophisticated drawing these

55
00:02:33,950 --> 00:02:35,989
days in 2014 you can do really

56
00:02:35,989 --> 00:02:38,510
sophisticated CSS transforms and

57
00:02:38,510 --> 00:02:40,790
animations and there's like if you ever

58
00:02:40,790 --> 00:02:43,700
go over onto a code pen there's some

59
00:02:43,700 --> 00:02:45,349
really fantastic examples of the stuff

60
00:02:45,349 --> 00:02:46,340
that people are doing there

61
00:02:46,340 --> 00:02:49,879
so when early programmers of the 1990s

62
00:02:49,879 --> 00:02:51,739
came up against the limitations of the

63
00:02:51,739 --> 00:02:53,239
browser and thought like well I want to

64
00:02:53,239 --> 00:02:54,919
make a I want to make a game and keep in

65
00:02:54,919 --> 00:02:57,290
mind javascript wasn't cool yet it was

66
00:02:57,290 --> 00:02:59,180
still you know like a new kid on the

67
00:02:59,180 --> 00:02:59,659
block

68
00:02:59,659 --> 00:03:03,530
and when people were met up against the

69
00:03:03,530 --> 00:03:05,060
boundary of the browser they sought to

70
00:03:05,060 --> 00:03:07,909
extend the browser using plugins so a

71
00:03:07,909 --> 00:03:09,409
couple of the early things that we had

72
00:03:09,409 --> 00:03:11,810
for drawing the web was VRML or ver

73
00:03:11,810 --> 00:03:14,389
Mille which was a standardized markup

74
00:03:14,389 --> 00:03:16,609
language for describing objects in 3d

75
00:03:16,609 --> 00:03:18,340
space and applying textures to them and

76
00:03:18,340 --> 00:03:21,199
that kind of was a thing but then it

77
00:03:21,199 --> 00:03:22,760
really wasn't it was superseded by

78
00:03:22,760 --> 00:03:24,260
something called X 3d and then it was

79
00:03:24,260 --> 00:03:26,049
superseded by like everything else and

80
00:03:26,049 --> 00:03:28,159
then there were these things Java

81
00:03:28,159 --> 00:03:30,470
applets this one still exists you can

82
00:03:30,470 --> 00:03:33,739
play it on the internet and you should

83
00:03:33,739 --> 00:03:35,239
check it out because it's really a blast

84
00:03:35,239 --> 00:03:35,959
from the past

85
00:03:35,959 --> 00:03:38,359
although the Java like the latest Java

86
00:03:38,359 --> 00:03:40,069
Runtime for the browser will warn you

87
00:03:40,069 --> 00:03:41,090
that there's like tons of security

88
00:03:41,090 --> 00:03:42,859
exceptions I can leave out that this

89
00:03:42,859 --> 00:03:44,750
didn't install viruses on my computer so

90
00:03:44,750 --> 00:03:46,220
if you do feel like going into the past

91
00:03:46,220 --> 00:03:51,979
at your own risk so at least there's at

92
00:03:51,979 --> 00:03:52,909
least two and I mean there's there's

93
00:03:52,909 --> 00:03:53,840
more than just the three I'm going to

94
00:03:53,840 --> 00:03:54,769
talk about but of course there's also

95
00:03:54,769 --> 00:03:56,810
Macromedia Flash which eventually went

96
00:03:56,810 --> 00:03:59,269
on to become and Dobey product and flash

97
00:03:59,269 --> 00:04:01,129
is still around

98
00:04:01,129 --> 00:04:03,739
I don't know for how long and that's for

99
00:04:03,739 --> 00:04:05,299
good reason because we have some better

100
00:04:05,299 --> 00:04:07,220
methods for drawing in the browser we

101
00:04:07,220 --> 00:04:09,319
have AP eyes in the browser for doing

102
00:04:09,319 --> 00:04:11,509
drawing and creating animations so we've

103
00:04:11,509 --> 00:04:13,129
got this canvas tag which is basically

104
00:04:13,129 --> 00:04:14,209
all you need for drawing but then

105
00:04:14,209 --> 00:04:16,940
there's also this SVG thing too so when

106
00:04:16,940 --> 00:04:18,859
do you use SVG and when to use canvas

107
00:04:18,859 --> 00:04:20,769
we'll explore that in just a little bit

108
00:04:20,769 --> 00:04:23,060
first of all let's take a look at a

109
00:04:23,060 --> 00:04:24,919
simple animation with canvas and I've

110
00:04:24,919 --> 00:04:26,960
got like a little code pen up here that

111
00:04:26,960 --> 00:04:29,060
I whipped up you can see on the

112
00:04:29,060 --> 00:04:30,080
t'ayn said I guess that's a little bit

113
00:04:30,080 --> 00:04:31,370
small and see if I can zoom in and not

114
00:04:31,370 --> 00:04:33,970
have this be terrible it's kind of okay

115
00:04:33,970 --> 00:04:36,800
collapse of pain alright so we've got

116
00:04:36,800 --> 00:04:38,600
just a canvas element there and over on

117
00:04:38,600 --> 00:04:39,860
the right hand side I'm grabbing the

118
00:04:39,860 --> 00:04:41,840
canvas element throw it into a variable

119
00:04:41,840 --> 00:04:43,850
set some other variables like width and

120
00:04:43,850 --> 00:04:44,750
height so don't have to recalculate

121
00:04:44,750 --> 00:04:46,669
those times that recalculate those every

122
00:04:46,669 --> 00:04:49,610
time I need them and then there's this

123
00:04:49,610 --> 00:04:52,430
thing called the context as I call I use

124
00:04:52,430 --> 00:04:54,290
canvas like get context I tell it using

125
00:04:54,290 --> 00:04:55,430
this string that I would like a 2d

126
00:04:55,430 --> 00:04:58,400
context as opposed to a WebGL context

127
00:04:58,400 --> 00:05:00,110
which we will get to and if you're

128
00:05:00,110 --> 00:05:01,910
unfamiliar with canvas you can think of

129
00:05:01,910 --> 00:05:04,220
a context kind of like a toolbox in a

130
00:05:04,220 --> 00:05:06,020
sense much like a traditional artist

131
00:05:06,020 --> 00:05:07,610
that's drawing on a canvas you will have

132
00:05:07,610 --> 00:05:09,320
a toolbox that's filled with things like

133
00:05:09,320 --> 00:05:12,380
paints and colors you know you know

134
00:05:12,380 --> 00:05:14,180
brushes that can draw lines of various

135
00:05:14,180 --> 00:05:16,280
widths and so I find that for people who

136
00:05:16,280 --> 00:05:18,229
are beginners the best metaphor that

137
00:05:18,229 --> 00:05:19,970
I've found and this is thanks to a

138
00:05:19,970 --> 00:05:21,260
friend of mine is actually that you

139
00:05:21,260 --> 00:05:22,820
should think of the context kind of like

140
00:05:22,820 --> 00:05:26,690
a toolbox we're not just doing simple

141
00:05:26,690 --> 00:05:27,919
drawing here right this is actually a

142
00:05:27,919 --> 00:05:30,110
really fabulous animating Red Square

143
00:05:30,110 --> 00:05:32,300
it's basically the best animating Red

144
00:05:32,300 --> 00:05:33,860
Square and what we're doing here is

145
00:05:33,860 --> 00:05:34,970
we've got this function called draw

146
00:05:34,970 --> 00:05:37,400
where we call requestanimationframe and

147
00:05:37,400 --> 00:05:38,600
then we call draw there and although

148
00:05:38,600 --> 00:05:40,970
that does look like recursion what we're

149
00:05:40,970 --> 00:05:42,979
doing the first time we call it is we're

150
00:05:42,979 --> 00:05:44,030
actually basically saying in the browser

151
00:05:44,030 --> 00:05:45,590
please the next time you have a frame

152
00:05:45,590 --> 00:05:47,750
for animating give it to me and then do

153
00:05:47,750 --> 00:05:49,820
all this stuff and then we're telling

154
00:05:49,820 --> 00:05:50,870
our context that we're kind of like

155
00:05:50,870 --> 00:05:53,060
dipping our brush in this bright blue

156
00:05:53,060 --> 00:05:54,650
color and then drawing from the origin

157
00:05:54,650 --> 00:05:56,450
of zero zero on the top left we did we

158
00:05:56,450 --> 00:05:58,990
draw and paint the whole canvas blue and

159
00:05:58,990 --> 00:06:01,430
then we hold on to that we save it and

160
00:06:01,430 --> 00:06:03,889
then we actually translate our origin

161
00:06:03,889 --> 00:06:05,660
points for where we're drawing from and

162
00:06:05,660 --> 00:06:08,840
then we rotate and we do the same thing

163
00:06:08,840 --> 00:06:10,669
again we dip our brush in this really

164
00:06:10,669 --> 00:06:13,070
bright red color and we do a fill rect

165
00:06:13,070 --> 00:06:15,050
which is painting a rectangle and then

166
00:06:15,050 --> 00:06:16,460
we restore it and bam you've got this

167
00:06:16,460 --> 00:06:18,680
animation so I mean we did that and you

168
00:06:18,680 --> 00:06:19,820
know I mean there's a lot of comments in

169
00:06:19,820 --> 00:06:21,320
here but less than less than 50 lines

170
00:06:21,320 --> 00:06:24,590
with really verbose comments for for you

171
00:06:24,590 --> 00:06:26,780
know beginners so that's you know kind

172
00:06:26,780 --> 00:06:28,280
of okay oh wait that's a terminal you

173
00:06:28,280 --> 00:06:31,430
don't want that where's my talk all

174
00:06:31,430 --> 00:06:33,860
right so that's pretty simple the

175
00:06:33,860 --> 00:06:35,150
interesting corollary here is that

176
00:06:35,150 --> 00:06:37,190
there's a simple loop that's updating

177
00:06:37,190 --> 00:06:38,510
the canvas and one of the things I've

178
00:06:38,510 --> 00:06:40,789
noticed is that if people do not have a

179
00:06:40,789 --> 00:06:42,590
computer science graphics background

180
00:06:42,590 --> 00:06:43,970
or they've never messed around with

181
00:06:43,970 --> 00:06:46,580
canvas and some of you some people just

182
00:06:46,580 --> 00:06:47,810
actually never thought like well how

183
00:06:47,810 --> 00:06:49,100
does the video game work and actually

184
00:06:49,100 --> 00:06:50,960
video game works in the simplest sense

185
00:06:50,960 --> 00:06:53,210
of by updating the screen in a loop and

186
00:06:53,210 --> 00:06:54,919
then you add you know gameplay and game

187
00:06:54,919 --> 00:06:56,510
state to that and that's how a game is

188
00:06:56,510 --> 00:06:57,860
made so if you've ever wondered like how

189
00:06:57,860 --> 00:06:59,450
are your video video games are made even

190
00:06:59,450 --> 00:07:01,820
at you know the highest level of Triple

191
00:07:01,820 --> 00:07:03,560
A games this is essentially a core part

192
00:07:03,560 --> 00:07:06,290
of how games work so we did that with

193
00:07:06,290 --> 00:07:09,050
canvas now let's take a look at this

194
00:07:09,050 --> 00:07:11,960
thing called WebGL and let's try it

195
00:07:11,960 --> 00:07:12,950
lecture what we're going to do is we're

196
00:07:12,950 --> 00:07:14,150
going to take a look an example that

197
00:07:14,150 --> 00:07:17,080
draws and animates the exact same square

198
00:07:17,080 --> 00:07:19,639
okay so over on the nope that's not the

199
00:07:19,639 --> 00:07:21,200
one okay over on the left hand side here

200
00:07:21,200 --> 00:07:24,200
we have see we've got canvas okay but

201
00:07:24,200 --> 00:07:25,220
there's some other stuff here we've got

202
00:07:25,220 --> 00:07:27,710
this thing that's called in some script

203
00:07:27,710 --> 00:07:31,100
tag here on its own a GL frag color and

204
00:07:31,100 --> 00:07:32,389
that doesn't look like something I've

205
00:07:32,389 --> 00:07:34,280
seen in JavaScript then we've got this

206
00:07:34,280 --> 00:07:38,210
other thing GL position never seen that

207
00:07:38,210 --> 00:07:40,490
before and over on the right hand side

208
00:07:40,490 --> 00:07:47,279
here yeah we it's pretty short right oh

209
00:07:47,289 --> 00:07:50,060
this is all the draw one animating

210
00:07:50,060 --> 00:07:51,500
square oh no I'm not done yet look keeps

211
00:07:51,500 --> 00:07:54,979
going whoo okay okay so there's this

212
00:07:54,979 --> 00:07:57,080
WebGL thing it's considerably more of a

213
00:07:57,080 --> 00:07:58,669
boasts in the canvas API that's an

214
00:07:58,669 --> 00:08:01,130
observation we can make so far and WebGL

215
00:08:01,130 --> 00:08:03,650
for the uninitiated I assume that most

216
00:08:03,650 --> 00:08:05,210
people probably heard about WebGL and

217
00:08:05,210 --> 00:08:08,120
passing at least it's using basically

218
00:08:08,120 --> 00:08:10,070
the OpenGL language on the web's like

219
00:08:10,070 --> 00:08:12,320
almost like a port of that to basically

220
00:08:12,320 --> 00:08:14,570
get closer to the metal push off a bunch

221
00:08:14,570 --> 00:08:16,010
of calculations and graphics work onto

222
00:08:16,010 --> 00:08:17,780
the GPU and so it has significant

223
00:08:17,780 --> 00:08:20,930
advantages over just the 2d canvas API

224
00:08:20,930 --> 00:08:22,160
which I introduced we're going to talk a

225
00:08:22,160 --> 00:08:25,820
little bit more about that so yeah that

226
00:08:25,820 --> 00:08:28,370
was a simple animation with WebGL and

227
00:08:28,370 --> 00:08:31,100
honestly that thing was so long that I

228
00:08:31,100 --> 00:08:32,570
mean I we just can't even really go

229
00:08:32,570 --> 00:08:34,700
through all of it that didn't scale well

230
00:08:34,700 --> 00:08:36,409
but you get the point I love this guy

231
00:08:36,409 --> 00:08:40,130
looks so much alright so if you're not

232
00:08:40,130 --> 00:08:41,959
coming from an OpenGL background like

233
00:08:41,959 --> 00:08:43,279
and you want to use WebGL you basically

234
00:08:43,279 --> 00:08:46,400
got to learn a new language and you've

235
00:08:46,400 --> 00:08:47,660
got to be introduced these things called

236
00:08:47,660 --> 00:08:50,029
shaders which are kind of an important

237
00:08:50,029 --> 00:08:51,440
concept you can't really get around that

238
00:08:51,440 --> 00:08:54,440
either so shaders simplified almost too

239
00:08:54,440 --> 00:08:56,030
much and anybody who's a pro and hearing

240
00:08:56,030 --> 00:08:56,450
me say the

241
00:08:56,450 --> 00:08:58,190
stuff is gonna be like but but not but

242
00:08:58,190 --> 00:09:01,220
not actually but not all shaders and oh

243
00:09:01,220 --> 00:09:03,110
no this didn't scale well I wonder if I

244
00:09:03,110 --> 00:09:07,180
can refresh this give me a sec here

245
00:09:07,180 --> 00:09:10,610
let's see yeah there we go

246
00:09:10,610 --> 00:09:12,950
so shaders simplified almost too much

247
00:09:12,950 --> 00:09:14,930
are basically individual programs that

248
00:09:14,930 --> 00:09:17,000
run on the GPU and give your 3d drawings

249
00:09:17,000 --> 00:09:19,040
life and what I mean by that very simply

250
00:09:19,040 --> 00:09:21,650
we've got two kinds vertex rate vertex

251
00:09:21,650 --> 00:09:23,840
shaders they transform position they run

252
00:09:23,840 --> 00:09:25,850
once per vertex in a mesh before these

253
00:09:25,850 --> 00:09:27,620
other things called fragment shaders and

254
00:09:27,620 --> 00:09:30,200
a mesh you can think of as a bunch of

255
00:09:30,200 --> 00:09:34,040
connected vertices fragment shaders run

256
00:09:34,040 --> 00:09:36,440
once per pixel between vertices to

257
00:09:36,440 --> 00:09:39,230
essentially paint your 3d objects you

258
00:09:39,230 --> 00:09:41,210
can't make 3d stuff with WebGL with

259
00:09:41,210 --> 00:09:45,110
without using shaders so I'm just

260
00:09:45,110 --> 00:09:46,520
sitting here talking about canvas and

261
00:09:46,520 --> 00:09:47,870
WebGL and then I mentioned this thing

262
00:09:47,870 --> 00:09:50,060
called SVG scalable vector graphics and

263
00:09:50,060 --> 00:09:51,110
you're probably wondering like how do I

264
00:09:51,110 --> 00:09:53,000
know when to use which of those so let's

265
00:09:53,000 --> 00:09:55,580
go through like some of the reasons you

266
00:09:55,580 --> 00:09:57,680
might want to use one or the other so

267
00:09:57,680 --> 00:09:59,300
scalable vector graphics are pretty

268
00:09:59,300 --> 00:10:00,770
interesting so you want to use scalable

269
00:10:00,770 --> 00:10:02,990
vector graphics when you want something

270
00:10:02,990 --> 00:10:06,440
with a Dom like internal hierarchy SVG

271
00:10:06,440 --> 00:10:08,120
has the ability to have these nodes that

272
00:10:08,120 --> 00:10:09,470
behave very Dom like and they'll fire

273
00:10:09,470 --> 00:10:11,120
events for you so if you're looking for

274
00:10:11,120 --> 00:10:12,380
something with simple interactions a

275
00:10:12,380 --> 00:10:15,410
Plus SVG is pretty cool you want to be

276
00:10:15,410 --> 00:10:16,880
able to easily draw non square shapes

277
00:10:16,880 --> 00:10:18,080
because that's vector based it does a

278
00:10:18,080 --> 00:10:19,850
really really nice smooth curve so

279
00:10:19,850 --> 00:10:21,010
that's pretty awesome

280
00:10:21,010 --> 00:10:23,540
if you're scaling dimensions is

281
00:10:23,540 --> 00:10:25,880
important then this is actually pretty

282
00:10:25,880 --> 00:10:28,130
fantastic again being vector based we'll

283
00:10:28,130 --> 00:10:30,740
talk about what to do to properly scale

284
00:10:30,740 --> 00:10:32,180
a canvas if you need to and still keep

285
00:10:32,180 --> 00:10:34,340
things performant but if possible just

286
00:10:34,340 --> 00:10:37,090
don't resize your canvas depending on

287
00:10:37,090 --> 00:10:38,780
implementation and stuff the

288
00:10:38,780 --> 00:10:40,100
interpolation can make it look really

289
00:10:40,100 --> 00:10:45,170
goofy if you don't need if you don't

290
00:10:45,170 --> 00:10:48,200
need a billion nodes because depending

291
00:10:48,200 --> 00:10:50,720
again on SVG implementation having lots

292
00:10:50,720 --> 00:10:52,790
and lots of nodes in SVG can degrade

293
00:10:52,790 --> 00:10:55,700
performance I did talk to some people

294
00:10:55,700 --> 00:10:58,220
and someone on platform mentioned that

295
00:10:58,220 --> 00:11:00,200
it really does vary by implementation in

296
00:11:00,200 --> 00:11:01,910
fact there's some stuff that seems to be

297
00:11:01,910 --> 00:11:03,800
for some SVG implementations that could

298
00:11:03,800 --> 00:11:05,810
be pushed onto the GPU but isn't it's on

299
00:11:05,810 --> 00:11:08,330
the CPU and rendering like lots of

300
00:11:08,330 --> 00:11:11,180
curves and gets to be a pain so

301
00:11:11,180 --> 00:11:15,589
no to you speedy judicious if you want

302
00:11:15,589 --> 00:11:17,480
to display a mostly static chart or

303
00:11:17,480 --> 00:11:19,310
create a simple point-and-click game

304
00:11:19,310 --> 00:11:21,410
simple user interactions with really

305
00:11:21,410 --> 00:11:22,940
smooth nice graphics that you want to

306
00:11:22,940 --> 00:11:24,320
scale well that's when you want to use

307
00:11:24,320 --> 00:11:27,740
SVG so a cool idea is rather using SVG

308
00:11:27,740 --> 00:11:29,420
for game you could build like a games

309
00:11:29,420 --> 00:11:31,580
level editor using SVG and that's

310
00:11:31,580 --> 00:11:34,520
probably a pretty good use so when do

311
00:11:34,520 --> 00:11:35,870
you want to use canvas and we mean the

312
00:11:35,870 --> 00:11:38,480
2d canvas API the very first example

313
00:11:38,480 --> 00:11:41,270
that we use so maybe you don't want an

314
00:11:41,270 --> 00:11:43,220
internal structure a Dom like structure

315
00:11:43,220 --> 00:11:44,690
handling events for you you want control

316
00:11:44,690 --> 00:11:47,870
over which pixels exactly fire events so

317
00:11:47,870 --> 00:11:49,399
you can have ultimate precision by

318
00:11:49,399 --> 00:11:51,190
controlling each individual pixel

319
00:11:51,190 --> 00:11:53,390
probably you want something maybe retro

320
00:11:53,390 --> 00:11:55,370
fabulous because 8-bit style art it

321
00:11:55,370 --> 00:11:57,200
turns out kind of hard to do with canvas

322
00:11:57,200 --> 00:11:59,180
but doing or probably kind of hard to do

323
00:11:59,180 --> 00:12:01,520
with SVG but much easier to do with

324
00:12:01,520 --> 00:12:03,320
canvas so recommend if you that's the

325
00:12:03,320 --> 00:12:04,459
style you're going forward that you're

326
00:12:04,459 --> 00:12:06,380
going to want to use canvas and if you

327
00:12:06,380 --> 00:12:07,850
want to make a fast paced game not just

328
00:12:07,850 --> 00:12:09,770
a point-and-click something that's a

329
00:12:09,770 --> 00:12:11,600
shoot-'em-up FPS or if you want to

330
00:12:11,600 --> 00:12:13,160
display real time visualizations and

331
00:12:13,160 --> 00:12:15,430
charts canvas is going to be your friend

332
00:12:15,430 --> 00:12:18,740
now WebGL this magic thing I was telling

333
00:12:18,740 --> 00:12:20,480
you about they can offload stuff onto

334
00:12:20,480 --> 00:12:23,360
the GPU gets you better performance when

335
00:12:23,360 --> 00:12:25,250
performance is the most important thing

336
00:12:25,250 --> 00:12:27,860
you want to you want to use WebGL and in

337
00:12:27,860 --> 00:12:31,399
fact you can still draw with you know

338
00:12:31,399 --> 00:12:33,230
WebGL in 2d which was the example I

339
00:12:33,230 --> 00:12:34,940
showed you obviously the most popular

340
00:12:34,940 --> 00:12:37,160
thing to do is draw on 3d with it but if

341
00:12:37,160 --> 00:12:38,990
you drew on 2d with WebGL and you deal

342
00:12:38,990 --> 00:12:40,760
with all that for both Ness you can

343
00:12:40,760 --> 00:12:43,100
actually get much more performant 2d

344
00:12:43,100 --> 00:12:44,959
animations 2d games than just drawing

345
00:12:44,959 --> 00:12:46,760
with the canvas API so that's something

346
00:12:46,760 --> 00:12:48,410
to consider if you know performance is

347
00:12:48,410 --> 00:12:51,589
an issue and if you want to draw loss of

348
00:12:51,589 --> 00:12:53,510
3d shapes I'm comparing this here

349
00:12:53,510 --> 00:12:55,640
actually as well to a lot of three 3d

350
00:12:55,640 --> 00:12:58,190
CSS transforms animations not because

351
00:12:58,190 --> 00:13:00,140
like one or two of those aren't terribly

352
00:13:00,140 --> 00:13:01,910
performant in fact our browsers are

353
00:13:01,910 --> 00:13:03,770
pretty fast these days right but if you

354
00:13:03,770 --> 00:13:05,690
have lots and lots and lots of 3d shapes

355
00:13:05,690 --> 00:13:07,250
and lots and lots and lots of layers and

356
00:13:07,250 --> 00:13:08,990
transparency and effects and you've got

357
00:13:08,990 --> 00:13:11,510
tons of dom nodes well things are going

358
00:13:11,510 --> 00:13:12,950
to actually slow down quite a bit so I

359
00:13:12,950 --> 00:13:15,260
would recommend using WebGL instead of

360
00:13:15,260 --> 00:13:17,810
doing that although I think the 3d CSS

361
00:13:17,810 --> 00:13:20,660
stuff we can do now is pretty wicked so

362
00:13:20,660 --> 00:13:22,490
often you know you think like you saw

363
00:13:22,490 --> 00:13:24,200
that you saw this like in Angelina

364
00:13:24,200 --> 00:13:27,890
like an example of WebGL and I showed

365
00:13:27,890 --> 00:13:29,480
you how to simply draw so it's basically

366
00:13:29,480 --> 00:13:30,680
simple now that you know one or two

367
00:13:30,680 --> 00:13:33,380
things about WebGL you can basically

368
00:13:33,380 --> 00:13:34,760
that's it you know just there you go

369
00:13:34,760 --> 00:13:36,260
that was how to draw square now go make

370
00:13:36,260 --> 00:13:38,720
a game right so it's not that simple but

371
00:13:38,720 --> 00:13:39,860
there are lots of really excellent

372
00:13:39,860 --> 00:13:42,260
tutorials on the internet that will that

373
00:13:42,260 --> 00:13:45,470
will help you out with that so I just

374
00:13:45,470 --> 00:13:47,600
wanted to make sure people sort of knew

375
00:13:47,600 --> 00:13:50,930
the appropriate uses of canvas SVG WebGL

376
00:13:50,930 --> 00:13:52,100
before we actually get onto the meat of

377
00:13:52,100 --> 00:13:54,110
everything which is of course talking

378
00:13:54,110 --> 00:13:55,850
about canvas performance and WebGL

379
00:13:55,850 --> 00:13:58,340
performance so you might say to yourself

380
00:13:58,340 --> 00:14:00,560
but I want to write JavaScript I don't

381
00:14:00,560 --> 00:14:02,030
want to learn a new language I mean

382
00:14:02,030 --> 00:14:03,110
those shades were cool but I don't

383
00:14:03,110 --> 00:14:04,520
really want to be writing shaders

384
00:14:04,520 --> 00:14:06,050
explicitly that was just like a lot of

385
00:14:06,050 --> 00:14:08,450
code just to make us square I mean oh my

386
00:14:08,450 --> 00:14:09,650
gosh

387
00:14:09,650 --> 00:14:10,700
but there are some libraries that will

388
00:14:10,700 --> 00:14:12,140
help you the most popular one and of

389
00:14:12,140 --> 00:14:13,250
course that a lot of you might be

390
00:14:13,250 --> 00:14:15,200
familiar with is three J's which

391
00:14:15,200 --> 00:14:17,240
abstract way working with 3d and web

392
00:14:17,240 --> 00:14:19,730
with WebGL tween jeaious is an excellent

393
00:14:19,730 --> 00:14:21,530
library for basically animating between

394
00:14:21,530 --> 00:14:23,840
smoothly and then I found this other one

395
00:14:23,840 --> 00:14:25,040
that I think is really really excellent

396
00:14:25,040 --> 00:14:27,110
for if you're doing 2d rendering it's

397
00:14:27,110 --> 00:14:29,630
called pix ejs and it's a it's like I

398
00:14:29,630 --> 00:14:31,610
said a 2d WebGL render but they're all

399
00:14:31,610 --> 00:14:33,170
some thing is it has a canvas fallback

400
00:14:33,170 --> 00:14:35,540
if you can't shove stuff onto the GPU so

401
00:14:35,540 --> 00:14:36,920
that's really nice if you're doing 2d

402
00:14:36,920 --> 00:14:39,550
games and you're going cross-platform

403
00:14:39,550 --> 00:14:43,100
right so when you're using a library if

404
00:14:43,100 --> 00:14:44,420
it's written by somebody else and it's

405
00:14:44,420 --> 00:14:46,520
not something that has you know a lot of

406
00:14:46,520 --> 00:14:48,080
community support you know maybe it's

407
00:14:48,080 --> 00:14:49,520
like a new game framework or something

408
00:14:49,520 --> 00:14:51,110
that you found you're kind of like well

409
00:14:51,110 --> 00:14:52,850
the screenshots look really cool and the

410
00:14:52,850 --> 00:14:54,260
demos are really cool maybe I'll use

411
00:14:54,260 --> 00:14:57,050
this you know something like 3GS is I

412
00:14:57,050 --> 00:14:58,310
guess a little bit battle-hardened

413
00:14:58,310 --> 00:14:59,480
because there are a lot of people that

414
00:14:59,480 --> 00:15:02,720
work on it my friend Sola is here she's

415
00:15:02,720 --> 00:15:04,430
actually the author of tween J's we were

416
00:15:04,430 --> 00:15:06,050
talking about three J's last night

417
00:15:06,050 --> 00:15:07,760
really yeah there's this guy in Slovenia

418
00:15:07,760 --> 00:15:09,590
who's amazing he spends like hours

419
00:15:09,590 --> 00:15:11,810
optimizing all the shaders and in every

420
00:15:11,810 --> 00:15:14,140
browser so to that guy hats off to you

421
00:15:14,140 --> 00:15:16,130
so he's done a lot of the hard work for

422
00:15:16,130 --> 00:15:18,530
you making sure that the you know your

423
00:15:18,530 --> 00:15:20,930
CPU and GPU are not doing extra work

424
00:15:20,930 --> 00:15:23,930
however imagine a situation where you

425
00:15:23,930 --> 00:15:26,030
have you know a set of functions

426
00:15:26,030 --> 00:15:27,320
someone's created like a nice API to

427
00:15:27,320 --> 00:15:29,060
abstract away some of this work for you

428
00:15:29,060 --> 00:15:31,340
and you have a phone you call a canvas

429
00:15:31,340 --> 00:15:33,620
like clear the canvas yourself and then

430
00:15:33,620 --> 00:15:35,480
maybe you call a function that you know

431
00:15:35,480 --> 00:15:36,920
is opaque to you because you haven't

432
00:15:36,920 --> 00:15:37,970
looked at the source code and

433
00:15:37,970 --> 00:15:40,250
called prepare canvas so intuitive you

434
00:15:40,250 --> 00:15:41,629
might be like okay first I'm gonna clear

435
00:15:41,629 --> 00:15:43,579
the canvas and then I'm gonna prepare it

436
00:15:43,579 --> 00:15:45,439
and then I do some work sure that sounds

437
00:15:45,439 --> 00:15:47,029
intuitive to me but what happens you

438
00:15:47,029 --> 00:15:49,579
know if prepare canvas also calls a

439
00:15:49,579 --> 00:15:51,500
clear canvas then you're doing what's

440
00:15:51,500 --> 00:15:53,899
called redundant draw calls so and

441
00:15:53,899 --> 00:15:55,699
that's just doing work twice like come

442
00:15:55,699 --> 00:15:57,079
on we don't want to do that so let's

443
00:15:57,079 --> 00:16:00,290
actually take a look at that one good

444
00:16:00,290 --> 00:16:01,819
way to inspect this is using the canvas

445
00:16:01,819 --> 00:16:03,920
inspector in Firefox which we landed I

446
00:16:03,920 --> 00:16:05,629
think just a couple months ago we

447
00:16:05,629 --> 00:16:07,009
actually announced it at GDC and

448
00:16:07,009 --> 00:16:09,560
actually um use the shader editor to

449
00:16:09,560 --> 00:16:11,360
which will actually pull up WebGL

450
00:16:11,360 --> 00:16:12,680
shaders I'll show you in a moment

451
00:16:12,680 --> 00:16:14,300
because if you are somebody who is a

452
00:16:14,300 --> 00:16:15,769
little bit curious abut under the hood

453
00:16:15,769 --> 00:16:17,810
you can actually live edit those shaders

454
00:16:17,810 --> 00:16:19,910
in the browser and see them update in

455
00:16:19,910 --> 00:16:21,439
real time it's an excellent learning to

456
00:16:21,439 --> 00:16:22,939
like when I was diving into this stuff I

457
00:16:22,939 --> 00:16:24,769
was like oh okay this isn't so bad

458
00:16:24,769 --> 00:16:26,509
having that immediate feedback is really

459
00:16:26,509 --> 00:16:28,420
great kind of like using a ripple

460
00:16:28,420 --> 00:16:31,310
alright so let's go through this step by

461
00:16:31,310 --> 00:16:35,329
step frame by frame so this is an

462
00:16:35,329 --> 00:16:37,939
example here of inefficient canvas usage

463
00:16:37,939 --> 00:16:40,129
actually and it's a very simple example

464
00:16:40,129 --> 00:16:43,220
so it's deceptive but will actually take

465
00:16:43,220 --> 00:16:44,870
a look here with the canvas inspector

466
00:16:44,870 --> 00:16:47,350
let me see if I can make this bigger so

467
00:16:47,350 --> 00:16:49,430
that's kind of getting bigger maybe a

468
00:16:49,430 --> 00:16:51,139
bit bigger okay we'll see how it will

469
00:16:51,139 --> 00:16:52,309
see how the inspector responds to that

470
00:16:52,309 --> 00:16:55,009
let's scroll up here a bit and I got to

471
00:16:55,009 --> 00:16:57,889
reload the page click on this to record

472
00:16:57,889 --> 00:17:00,199
animation frames call stack okay so what

473
00:17:00,199 --> 00:17:03,410
we have here is basically the canvas

474
00:17:03,410 --> 00:17:05,510
inspector when you grab a snapshot of it

475
00:17:05,510 --> 00:17:07,370
will show you basically all the draw

476
00:17:07,370 --> 00:17:10,039
calls that are going to be executed in

477
00:17:10,039 --> 00:17:12,140
order to implement like the next step of

478
00:17:12,140 --> 00:17:14,059
animation so I mean this is a really

479
00:17:14,059 --> 00:17:15,049
simple one so at the bottom we've

480
00:17:15,049 --> 00:17:16,370
rolling about these like three frames

481
00:17:16,370 --> 00:17:18,530
right here for more sophisticated stuff

482
00:17:18,530 --> 00:17:20,480
like if you go to the WebGL playground

483
00:17:20,480 --> 00:17:23,030
and take a look at some of the examples

484
00:17:23,030 --> 00:17:24,589
there and that's like on Heroku I

485
00:17:24,589 --> 00:17:27,350
believe then you can actually you know

486
00:17:27,350 --> 00:17:28,789
run some of these in the canvas

487
00:17:28,789 --> 00:17:30,409
inspector you can go into the shade or

488
00:17:30,409 --> 00:17:31,669
editor and play with them and then

489
00:17:31,669 --> 00:17:33,049
really see what's going on under the

490
00:17:33,049 --> 00:17:34,460
hood and the canvas are supporting the

491
00:17:34,460 --> 00:17:35,780
WebGL playground on heroic is actually

492
00:17:35,780 --> 00:17:36,740
pretty good because it's got like the

493
00:17:36,740 --> 00:17:38,059
live code that you can edit in the page

494
00:17:38,059 --> 00:17:39,950
anyway but this is really good for

495
00:17:39,950 --> 00:17:41,630
seeing performance so if we look

496
00:17:41,630 --> 00:17:44,690
actually at the code here is my bad cams

497
00:17:44,690 --> 00:17:46,159
example I've got this all stuffed in the

498
00:17:46,159 --> 00:17:48,470
head don't actually do this we've got

499
00:17:48,470 --> 00:17:51,049
here C requestanimationframe looks kind

500
00:17:51,049 --> 00:17:51,559
of similar

501
00:17:51,559 --> 00:17:52,940
to our example when we're animating

502
00:17:52,940 --> 00:17:54,559
there you can see that we're doing a

503
00:17:54,559 --> 00:17:57,470
fill style right here and a fill rekts

504
00:17:57,470 --> 00:17:59,090
and then we're calling this function I

505
00:17:59,090 --> 00:18:00,080
was kind of using this example of

506
00:18:00,080 --> 00:18:02,299
prepare frame if we go over into the

507
00:18:02,299 --> 00:18:03,679
canvas inspector you'll see that we've

508
00:18:03,679 --> 00:18:05,509
got some duplicated calls your fill rect

509
00:18:05,509 --> 00:18:08,269
is being called twice and stroke style

510
00:18:08,269 --> 00:18:09,830
is being called twice there's no reason

511
00:18:09,830 --> 00:18:11,749
to duplicate effort if we go back into

512
00:18:11,749 --> 00:18:13,340
our code and we take a look and we'll

513
00:18:13,340 --> 00:18:15,919
see that when we're calling prepare

514
00:18:15,919 --> 00:18:18,019
frame there we go that fill rect is

515
00:18:18,019 --> 00:18:20,029
called and drawcircle also sets a stroke

516
00:18:20,029 --> 00:18:21,740
style as well so this is a really

517
00:18:21,740 --> 00:18:24,769
obvious example of duplicated draw calls

518
00:18:24,769 --> 00:18:27,619
and from inspecting a couple games over

519
00:18:27,619 --> 00:18:29,210
the last while I recognized that there

520
00:18:29,210 --> 00:18:30,679
are often cases where things look like

521
00:18:30,679 --> 00:18:34,129
repeat draw calls but sometimes there is

522
00:18:34,129 --> 00:18:36,200
like some meaning towards you know

523
00:18:36,200 --> 00:18:38,059
behind the scenes that's not obvious to

524
00:18:38,059 --> 00:18:39,889
why that might be there but when you do

525
00:18:39,889 --> 00:18:41,600
see those in you know the canvas

526
00:18:41,600 --> 00:18:43,190
inspector it's a pretty good indication

527
00:18:43,190 --> 00:18:45,529
that you might want to take a look at

528
00:18:45,529 --> 00:18:47,749
that in your code or look at the library

529
00:18:47,749 --> 00:18:49,460
that's you picked up and didn't really

530
00:18:49,460 --> 00:18:50,899
vet very hard on the internet and

531
00:18:50,899 --> 00:18:52,999
because reducing the number of these

532
00:18:52,999 --> 00:18:54,649
redundant draw calls can actually make a

533
00:18:54,649 --> 00:18:55,279
difference

534
00:18:55,279 --> 00:18:58,249
now this example isn't using shaders I

535
00:18:58,249 --> 00:19:00,860
do have that WebGL example again the one

536
00:19:00,860 --> 00:19:02,330
that we were using the code pens if we

537
00:19:02,330 --> 00:19:04,460
inspect that and we pop over to oh I

538
00:19:04,460 --> 00:19:07,429
don't have the shader editor so let's

539
00:19:07,429 --> 00:19:08,929
turn that on if you're all looking for

540
00:19:08,929 --> 00:19:10,369
the canvas in spectrum the shader editor

541
00:19:10,369 --> 00:19:11,600
just got to click on like the sprocket

542
00:19:11,600 --> 00:19:13,159
II thing the Firefox dev tools and

543
00:19:13,159 --> 00:19:15,740
enable the shader editor there we go

544
00:19:15,740 --> 00:19:19,850
awesome reload the page and so what's

545
00:19:19,850 --> 00:19:21,559
going on here is when we were taking a

546
00:19:21,559 --> 00:19:22,879
look in that code pen earlier we had

547
00:19:22,879 --> 00:19:23,990
some script tags at how these things

548
00:19:23,990 --> 00:19:27,039
called you know GL position and GL frag

549
00:19:27,039 --> 00:19:29,600
and these things of course are our

550
00:19:29,600 --> 00:19:31,730
vertex shaders and our fragment shaders

551
00:19:31,730 --> 00:19:33,769
so actually what we can do is we can

552
00:19:33,769 --> 00:19:35,570
actually go in here and we can modify

553
00:19:35,570 --> 00:19:37,369
some of the stuff and what happens if I

554
00:19:37,369 --> 00:19:39,740
show you just do it - that's not gonna

555
00:19:39,740 --> 00:19:44,840
do anything there we go yeah pink square

556
00:19:44,840 --> 00:19:46,279
so you can see that that updates in real

557
00:19:46,279 --> 00:19:47,899
time for you which makes debugging and

558
00:19:47,899 --> 00:19:49,429
learning I think this stuff a whole lot

559
00:19:49,429 --> 00:19:51,440
better let's get those out of the way

560
00:19:51,440 --> 00:19:54,379
keep on going step by step frame by

561
00:19:54,379 --> 00:19:56,419
frame everybody so now let's dive right

562
00:19:56,419 --> 00:19:57,950
into those performance best practices

563
00:19:57,950 --> 00:20:00,619
that people are you know here for the

564
00:20:00,619 --> 00:20:01,850
first thing is you want to make sure use

565
00:20:01,850 --> 00:20:03,679
whole pixel rendering and what that

566
00:20:03,679 --> 00:20:05,360
means is when you're specifying

567
00:20:05,360 --> 00:20:07,340
you know like a draw operation don't use

568
00:20:07,340 --> 00:20:08,870
floats if you don't have to if for some

569
00:20:08,870 --> 00:20:09,950
reason your calculating something

570
00:20:09,950 --> 00:20:11,960
dynamically and you get a float call

571
00:20:11,960 --> 00:20:13,940
math dot floor or use bitwise operations

572
00:20:13,940 --> 00:20:15,620
on it in order to make nice round

573
00:20:15,620 --> 00:20:18,559
numbers because the cpu ends up having

574
00:20:18,559 --> 00:20:20,000
to do a whole bunch of extra calculators

575
00:20:20,000 --> 00:20:21,500
to ramp calculations to round them

576
00:20:21,500 --> 00:20:23,270
anyway to give you a nice anti-aliasing

577
00:20:23,270 --> 00:20:25,220
effect so just try and stay away from

578
00:20:25,220 --> 00:20:27,950
that where possible cache your drawing

579
00:20:27,950 --> 00:20:30,530
in an off-screen canvas image copying is

580
00:20:30,530 --> 00:20:32,120
actually cheaper than redrawing pixels

581
00:20:32,120 --> 00:20:34,549
so what you can do is something kind of

582
00:20:34,549 --> 00:20:37,400
like this just create a canvas don't add

583
00:20:37,400 --> 00:20:40,100
it to the DOM and then render some stuff

584
00:20:40,100 --> 00:20:41,750
there and then render it onto the canvas

585
00:20:41,750 --> 00:20:43,160
and that actually is a really great way

586
00:20:43,160 --> 00:20:48,110
to to deal with deals performance so if

587
00:20:48,110 --> 00:20:49,460
you're doing something has multiple

588
00:20:49,460 --> 00:20:50,450
layers maybe you're doing kind of like a

589
00:20:50,450 --> 00:20:52,520
parallax background if you've ever seen

590
00:20:52,520 --> 00:20:54,140
like if you ever pulled apart old like

591
00:20:54,140 --> 00:20:55,669
Super Nintendo games and stuff and seen

592
00:20:55,669 --> 00:20:57,890
all the layers that go into the and into

593
00:20:57,890 --> 00:20:59,750
that use kind of the same principle use

594
00:20:59,750 --> 00:21:01,760
like sort of transparency and move the

595
00:21:01,760 --> 00:21:03,440
layers a little bit and you can you can

596
00:21:03,440 --> 00:21:05,900
that's actually a lot better than using

597
00:21:05,900 --> 00:21:07,549
just one canvas because often you know

598
00:21:07,549 --> 00:21:09,710
you're just using part of each canvas to

599
00:21:09,710 --> 00:21:11,240
create a whole scene and you're drawing

600
00:21:11,240 --> 00:21:12,590
just little portions of the candidates

601
00:21:12,590 --> 00:21:14,390
rather than one big thing all over and

602
00:21:14,390 --> 00:21:16,700
over again that being said only draw

603
00:21:16,700 --> 00:21:18,200
what you have to there there's some

604
00:21:18,200 --> 00:21:19,700
tutorials out there that I recommend you

605
00:21:19,700 --> 00:21:22,549
poke around and find that will show you

606
00:21:22,549 --> 00:21:24,350
how to only draw what you have to that

607
00:21:24,350 --> 00:21:26,210
is to say don't redraw the entire canvas

608
00:21:26,210 --> 00:21:28,250
only draw pixels that have changed like

609
00:21:28,250 --> 00:21:29,330
basically though you can see the

610
00:21:29,330 --> 00:21:30,890
recurring theme here's don't do any more

611
00:21:30,890 --> 00:21:33,679
work than you absolutely have to if you

612
00:21:33,679 --> 00:21:35,360
have a large unchanging background

613
00:21:35,360 --> 00:21:36,950
behind your game like it literally is a

614
00:21:36,950 --> 00:21:39,080
static thing then just apply it using

615
00:21:39,080 --> 00:21:41,330
CSS don't draw it in canvas there's just

616
00:21:41,330 --> 00:21:43,250
no reason to do that so that's a pretty

617
00:21:43,250 --> 00:21:45,080
simple one I'm confident that most of

618
00:21:45,080 --> 00:21:47,030
you I hope know how to use CSS you guys

619
00:21:47,030 --> 00:21:49,419
are JavaScript developers so yeah but

620
00:21:49,419 --> 00:21:55,429
and yeah large unchanging background

621
00:21:55,429 --> 00:21:57,080
apply with CSS and here's just an

622
00:21:57,080 --> 00:21:58,820
example of using multiple layers

623
00:21:58,820 --> 00:22:00,260
actually with multiple canvases which

624
00:22:00,260 --> 00:22:01,460
totally should have been with the

625
00:22:01,460 --> 00:22:04,970
previous example but haha and then so

626
00:22:04,970 --> 00:22:06,260
this is actually mostly applicable to

627
00:22:06,260 --> 00:22:07,910
charts or maybe a game where you're

628
00:22:07,910 --> 00:22:10,790
dealing with real time data so latency

629
00:22:10,790 --> 00:22:12,200
is a thing right that's kind of a

630
00:22:12,200 --> 00:22:13,850
problem I've seen people do real-time

631
00:22:13,850 --> 00:22:15,380
charts and like the data will kind of

632
00:22:15,380 --> 00:22:17,090
come in and it stutters and I know

633
00:22:17,090 --> 00:22:18,470
immediately that they're not using a

634
00:22:18,470 --> 00:22:19,010
queue

635
00:22:19,010 --> 00:22:20,900
to deal with that so what you want to do

636
00:22:20,900 --> 00:22:23,390
- you know animate smoothly and you know

637
00:22:23,390 --> 00:22:25,460
avoid these latency issues as don't just

638
00:22:25,460 --> 00:22:27,500
animate stuff when it comes in when you

639
00:22:27,500 --> 00:22:29,450
get your data put it in a queue and then

640
00:22:29,450 --> 00:22:31,220
it's some regular interval that you've

641
00:22:31,220 --> 00:22:33,590
determined you know mitigate some of

642
00:22:33,590 --> 00:22:36,290
your latency effects then then pull that

643
00:22:36,290 --> 00:22:38,090
and pull off the next bit of data

644
00:22:38,090 --> 00:22:39,890
animate that onto your off-screen canvas

645
00:22:39,890 --> 00:22:41,900
and then when ready animate that onto

646
00:22:41,900 --> 00:22:44,540
your your your canvas that your user can

647
00:22:44,540 --> 00:22:48,050
see if you scale the canvas that all use

648
00:22:48,050 --> 00:22:50,780
a css3 transform because those are GPU

649
00:22:50,780 --> 00:22:52,250
accelerated when done right and that's

650
00:22:52,250 --> 00:22:53,450
what we're looking for here so that's

651
00:22:53,450 --> 00:22:54,940
pretty fantastic

652
00:22:54,940 --> 00:22:57,380
and here's just an example right here of

653
00:22:57,380 --> 00:22:59,120
doing that so you can actually do that

654
00:22:59,120 --> 00:23:01,700
in JavaScript or you can apply it using

655
00:23:01,700 --> 00:23:03,740
CSS and maybe it'll just scale Boop to

656
00:23:03,740 --> 00:23:05,270
the viewport that you're looking for I

657
00:23:05,270 --> 00:23:06,890
figure this stuff is actually pretty

658
00:23:06,890 --> 00:23:10,160
simple for you so don't write your own

659
00:23:10,160 --> 00:23:12,080
matrix operations library there's a

660
00:23:12,080 --> 00:23:13,370
bunch of libraries out there that have

661
00:23:13,370 --> 00:23:14,690
been already written and already

662
00:23:14,690 --> 00:23:16,250
obsessed over for those optimizations

663
00:23:16,250 --> 00:23:18,410
and at some point you might be like well

664
00:23:18,410 --> 00:23:20,150
I don't know I don't like the API

665
00:23:20,150 --> 00:23:21,950
surface of this library so I'm just

666
00:23:21,950 --> 00:23:25,310
gonna write my own just don't like just

667
00:23:25,310 --> 00:23:27,740
just don't because honestly it takes a

668
00:23:27,740 --> 00:23:29,150
lot of time and debugging to get right

669
00:23:29,150 --> 00:23:30,710
and unless you're somebody with the with

670
00:23:30,710 --> 00:23:32,300
extensive background you're probably

671
00:23:32,300 --> 00:23:33,410
going to mess it up get some of the

672
00:23:33,410 --> 00:23:34,280
calculations

673
00:23:34,280 --> 00:23:36,080
you know use an algorithm that's not

674
00:23:36,080 --> 00:23:38,120
super optimized and impact your own

675
00:23:38,120 --> 00:23:39,920
performance because you were you know

676
00:23:39,920 --> 00:23:41,690
ambitious I mean that being said maybe

677
00:23:41,690 --> 00:23:43,070
don't ship it in production for like

678
00:23:43,070 --> 00:23:44,630
something you want and users to use and

679
00:23:44,630 --> 00:23:46,280
make it a side project you can be

680
00:23:46,280 --> 00:23:47,270
ambitious and write your own matrix

681
00:23:47,270 --> 00:23:49,790
operation library but okay lots of peer

682
00:23:49,790 --> 00:23:51,410
feedback on that sort of stuff and just

683
00:23:51,410 --> 00:23:54,680
mostly don't do it so here's some other

684
00:23:54,680 --> 00:23:56,180
stuff that affects performance that

685
00:23:56,180 --> 00:23:58,370
might that's not necessarily directly a

686
00:23:58,370 --> 00:24:00,800
canvas thing but definitely causes

687
00:24:00,800 --> 00:24:03,740
problems avoid frequent calls to local

688
00:24:03,740 --> 00:24:05,570
storage every time you do that it can

689
00:24:05,570 --> 00:24:08,240
actually be a performance hit so do

690
00:24:08,240 --> 00:24:09,590
those at particular intervals like for

691
00:24:09,590 --> 00:24:10,910
example if you've got a game with levels

692
00:24:10,910 --> 00:24:13,100
do that it like the score screen in

693
00:24:13,100 --> 00:24:15,230
between levels if it's a game that

694
00:24:15,230 --> 00:24:16,700
involves like a lot of real time stuff

695
00:24:16,700 --> 00:24:18,830
and you want to somehow save state so

696
00:24:18,830 --> 00:24:20,360
that like if you user gets disconnected

697
00:24:20,360 --> 00:24:23,780
they can reconnect you know do that in

698
00:24:23,780 --> 00:24:25,730
between turns somehow just find an

699
00:24:25,730 --> 00:24:26,870
appropriate time to do it when things

700
00:24:26,870 --> 00:24:28,340
like aren't animating and you're not

701
00:24:28,340 --> 00:24:29,990
doing like a major draw or update

702
00:24:29,990 --> 00:24:32,320
basically so just choose where

703
00:24:32,320 --> 00:24:34,509
or you or when and where you call to

704
00:24:34,509 --> 00:24:38,490
store things to local storage carefully

705
00:24:38,490 --> 00:24:41,610
so really when you're when you're

706
00:24:41,610 --> 00:24:43,690
creating something and doing stuff with

707
00:24:43,690 --> 00:24:44,230
canvas

708
00:24:44,230 --> 00:24:46,809
don't just keep creating new objects

709
00:24:46,809 --> 00:24:51,330
willy-nilly reuse them from a pool

710
00:24:51,330 --> 00:24:58,299
because if you don't if you don't you're

711
00:24:58,299 --> 00:25:00,039
gonna get a graph in the chrome timeline

712
00:25:00,039 --> 00:25:02,409
that looks something like this so a few

713
00:25:02,409 --> 00:25:03,460
of you might know of course what's

714
00:25:03,460 --> 00:25:07,409
what's going on here it's so like uh-oh

715
00:25:07,409 --> 00:25:10,090
and it kind of drops off and this is a

716
00:25:10,090 --> 00:25:11,860
game I found actually there's a really

717
00:25:11,860 --> 00:25:14,080
simple person of course they're really

718
00:25:14,080 --> 00:25:16,240
popular 2048 which by the way you guys

719
00:25:16,240 --> 00:25:17,470
should check out threes I think it's a

720
00:25:17,470 --> 00:25:18,759
way cooler implementation but somebody

721
00:25:18,759 --> 00:25:20,019
here has gone and implemented a 3d

722
00:25:20,019 --> 00:25:22,179
version of it and it's pretty simple

723
00:25:22,179 --> 00:25:23,470
right like I started playing this was

724
00:25:23,470 --> 00:25:25,629
like oh yeah this is really fun animated

725
00:25:25,629 --> 00:25:27,789
nicely but the first time I started

726
00:25:27,789 --> 00:25:29,799
playing it I mean my macbook air can

727
00:25:29,799 --> 00:25:31,330
actually handle some pretty decent games

728
00:25:31,330 --> 00:25:33,250
on steam without chugging and heating up

729
00:25:33,250 --> 00:25:35,529
this game it looks really simple it was

730
00:25:35,529 --> 00:25:37,600
like oh my god what are you doing to me

731
00:25:37,600 --> 00:25:39,100
and it like got really really warm and

732
00:25:39,100 --> 00:25:40,779
so I mean looking in the code was

733
00:25:40,779 --> 00:25:42,340
actually if the code is actually not all

734
00:25:42,340 --> 00:25:43,600
that straightforward it's it's up on

735
00:25:43,600 --> 00:25:46,509
github and you know there's a couple

736
00:25:46,509 --> 00:25:47,710
things that look like we're done and

737
00:25:47,710 --> 00:25:49,570
draw calls but they were in three.js so

738
00:25:49,570 --> 00:25:50,620
I'm not going to kind of trust the three

739
00:25:50,620 --> 00:25:52,690
J's people but you know looking at this

740
00:25:52,690 --> 00:25:55,840
timeline in in chrome you see this and

741
00:25:55,840 --> 00:25:58,690
what's happening there is when it looked

742
00:25:58,690 --> 00:25:59,620
in the code this person is actually

743
00:25:59,620 --> 00:26:01,870
creating new tween objects all the time

744
00:26:01,870 --> 00:26:03,700
rather than reusing them so it's like a

745
00:26:03,700 --> 00:26:05,529
new object new object no garbage

746
00:26:05,529 --> 00:26:07,360
collection and garbage collection is a

747
00:26:07,360 --> 00:26:09,639
performance hit so please reuse objects

748
00:26:09,639 --> 00:26:12,549
from an object pool you want to keep the

749
00:26:12,549 --> 00:26:14,529
garbage collector board I know it's that

750
00:26:14,529 --> 00:26:16,779
awesome feature to have but keep it as

751
00:26:16,779 --> 00:26:18,909
bored as possible and so this here is

752
00:26:18,909 --> 00:26:20,110
like the biggest wall of text you're

753
00:26:20,110 --> 00:26:21,429
going to get in the presentation but

754
00:26:21,429 --> 00:26:23,019
it's a simple example and of course I'll

755
00:26:23,019 --> 00:26:24,220
give it the slides afterwards because

756
00:26:24,220 --> 00:26:26,230
this is a little bit longer but you want

757
00:26:26,230 --> 00:26:28,029
to basically initialize a pool of Woking

758
00:26:28,029 --> 00:26:30,580
common objects and then you know pull

759
00:26:30,580 --> 00:26:32,169
out an object use it for something put

760
00:26:32,169 --> 00:26:33,490
it back in the pool and then you know

761
00:26:33,490 --> 00:26:35,320
initialize it for something else and

762
00:26:35,320 --> 00:26:37,120
that actually will be a lot better

763
00:26:37,120 --> 00:26:38,559
because you're not doing a whole bunch

764
00:26:38,559 --> 00:26:40,510
of garbage collection at these various

765
00:26:40,510 --> 00:26:41,830
intervals that will then make your

766
00:26:41,830 --> 00:26:43,690
animation and your game stutter if I

767
00:26:43,690 --> 00:26:45,700
keep going with that 2048 game and we

768
00:26:45,700 --> 00:26:45,910
start

769
00:26:45,910 --> 00:26:47,290
getting more and more cubes and I just

770
00:26:47,290 --> 00:26:48,940
keep going and flipping it around it

771
00:26:48,940 --> 00:26:51,370
will start to stutter another another

772
00:26:51,370 --> 00:26:53,320
tool to use as an FPS counter you can

773
00:26:53,320 --> 00:26:55,240
actually find stats j/s which I believe

774
00:26:55,240 --> 00:26:58,210
is I think I was talking to John John

775
00:26:58,210 --> 00:27:00,100
David Dalton yesterday he made that and

776
00:27:00,100 --> 00:27:01,660
then like now it's kind of in three J s

777
00:27:01,660 --> 00:27:03,460
or mr. doob uses it so there's like a

778
00:27:03,460 --> 00:27:04,840
little like JavaScript implementation

779
00:27:04,840 --> 00:27:06,490
Chrome if you go into the dev tools

780
00:27:06,490 --> 00:27:08,410
press escape while you're in there

781
00:27:08,410 --> 00:27:10,000
you'll see a little rendering tab and

782
00:27:10,000 --> 00:27:11,500
they have an FPS tool as well that's

783
00:27:11,500 --> 00:27:12,490
that's really cool it actually it's

784
00:27:12,490 --> 00:27:13,840
really badass it makes me feel like I'm

785
00:27:13,840 --> 00:27:15,100
in the future it's like red and black

786
00:27:15,100 --> 00:27:18,730
moving lines and then Firefox has got a

787
00:27:18,730 --> 00:27:20,800
really nice integrated FPS widget that's

788
00:27:20,800 --> 00:27:22,180
going to be shipping with our profiler

789
00:27:22,180 --> 00:27:24,460
once we ship our brand-new profiler so

790
00:27:24,460 --> 00:27:26,440
that's a thing so you know another part

791
00:27:26,440 --> 00:27:28,210
about basically as another good metric

792
00:27:28,210 --> 00:27:30,040
is to like you know look at your game

793
00:27:30,040 --> 00:27:32,740
and see when your frame rate really

794
00:27:32,740 --> 00:27:35,230
fluctuates or when it just like drops

795
00:27:35,230 --> 00:27:37,080
down to ten like if I keep going in this

796
00:27:37,080 --> 00:27:38,320
2048 game

797
00:27:38,320 --> 00:27:39,850
I've got limited time so I'm not going

798
00:27:39,850 --> 00:27:41,170
to pull it up but trust me if you just

799
00:27:41,170 --> 00:27:44,170
find this game it's if you look for

800
00:27:44,170 --> 00:27:46,930
cubics 2048 you'll find it and just run

801
00:27:46,930 --> 00:27:48,760
an FPS counters you keep doing this and

802
00:27:48,760 --> 00:27:50,500
you'll watch it go pew all the way down

803
00:27:50,500 --> 00:27:52,930
so very fun game to play regardless

804
00:27:52,930 --> 00:27:56,950
though so I'm some miscellaneous micro

805
00:27:56,950 --> 00:27:59,170
optimizations remember I said like these

806
00:27:59,170 --> 00:28:00,610
up until now these are mostly best

807
00:28:00,610 --> 00:28:03,580
practices for doing your canvas stuff if

808
00:28:03,580 --> 00:28:04,840
you get to the end and you really do

809
00:28:04,840 --> 00:28:06,100
want to try and get a little bit more

810
00:28:06,100 --> 00:28:07,630
bang for your buck out of performance

811
00:28:07,630 --> 00:28:09,070
these are a few tips that I picked up

812
00:28:09,070 --> 00:28:12,580
from really great articles on Mozilla

813
00:28:12,580 --> 00:28:14,440
hacks talking to my friends who are from

814
00:28:14,440 --> 00:28:16,270
like higher level wizards than I am at

815
00:28:16,270 --> 00:28:18,160
canvas and there's also some good stuff

816
00:28:18,160 --> 00:28:20,170
on html5 rocks as well from people at

817
00:28:20,170 --> 00:28:23,770
Google use bitwise operators instead of

818
00:28:23,770 --> 00:28:25,420
math dot floor a little bit more

819
00:28:25,420 --> 00:28:28,120
performant clear arrays with length zero

820
00:28:28,120 --> 00:28:30,640
to avoid creating a new array use

821
00:28:30,640 --> 00:28:32,680
if-else over switch and actually I have

822
00:28:32,680 --> 00:28:34,930
an article that I I can link to when I

823
00:28:34,930 --> 00:28:37,060
send these out that has J s perfs for

824
00:28:37,060 --> 00:28:40,830
for these use date now over new date a

825
00:28:40,830 --> 00:28:43,360
voyage shadow blur you can do that to a

826
00:28:43,360 --> 00:28:45,370
praia playa FEX two primitives but that

827
00:28:45,370 --> 00:28:46,570
can actually be a performance hit as

828
00:28:46,570 --> 00:28:49,180
well so oh my god this is so much stuff

829
00:28:49,180 --> 00:28:50,830
right so everybody's like either really

830
00:28:50,830 --> 00:28:52,450
quiet cuz they're like oh my god I'm in

831
00:28:52,450 --> 00:28:54,910
are holy I'm totally confused but

832
00:28:54,910 --> 00:28:56,410
that's good hopefully whatever I've said

833
00:28:56,410 --> 00:28:58,430
you today makes you think like hmm

834
00:28:58,430 --> 00:28:59,930
and now I've got like this handy bag of

835
00:28:59,930 --> 00:29:01,760
tricks for working with canvas I don't

836
00:29:01,760 --> 00:29:03,110
need to be afraid about going out there

837
00:29:03,110 --> 00:29:04,340
and experimenting because you've got

838
00:29:04,340 --> 00:29:06,170
like these ideas you can keep in the

839
00:29:06,170 --> 00:29:08,120
back of your mind so that your canvas

840
00:29:08,120 --> 00:29:09,530
stuff ends up being really fun for your

841
00:29:09,530 --> 00:29:11,450
plans to favorite part of me ends up

842
00:29:11,450 --> 00:29:13,010
being really fun for your friends to

843
00:29:13,010 --> 00:29:15,320
play with on probably most devices in

844
00:29:15,320 --> 00:29:17,500
fact a lot of these tips came from

845
00:29:17,500 --> 00:29:19,700
tactics that people use for shipping

846
00:29:19,700 --> 00:29:22,850
games on Firefox OS which the phones

847
00:29:22,850 --> 00:29:25,730
that were shipping are you know they're

848
00:29:25,730 --> 00:29:27,530
not your iPhone 5 and that's on purpose

849
00:29:27,530 --> 00:29:29,990
actually they have much less power much

850
00:29:29,990 --> 00:29:31,970
less memory than the fancy phones that

851
00:29:31,970 --> 00:29:33,920
probably you or I have the ideas that

852
00:29:33,920 --> 00:29:35,090
we're shipping these to emerging and

853
00:29:35,090 --> 00:29:37,100
developing markets and pricing them

854
00:29:37,100 --> 00:29:38,570
competitively so that people that would

855
00:29:38,570 --> 00:29:40,820
buy a future phone will instead maybe be

856
00:29:40,820 --> 00:29:42,530
introduced to smartphones and spend more

857
00:29:42,530 --> 00:29:44,090
time on the web and stuff like that but

858
00:29:44,090 --> 00:29:45,830
actually a really great metric is

859
00:29:45,830 --> 00:29:48,290
Firefox list phones are super cheap you

860
00:29:48,290 --> 00:29:49,790
can buy own for under 100 bucks if your

861
00:29:49,790 --> 00:29:51,410
game runs really well on one of these

862
00:29:51,410 --> 00:29:53,900
like less powerful like memory

863
00:29:53,900 --> 00:29:55,730
constrained phones you can be pretty

864
00:29:55,730 --> 00:29:57,380
confident it's gonna run really well in

865
00:29:57,380 --> 00:29:59,270
other devices actually because you're

866
00:29:59,270 --> 00:30:01,040
only ever as best as your worst

867
00:30:01,040 --> 00:30:04,490
performing case in my opinion so that's

868
00:30:04,490 --> 00:30:06,500
basically it I hope you enjoyed this

