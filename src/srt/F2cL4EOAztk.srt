1
00:00:01,640 --> 00:00:13,500
Thank you, thank you.

2
00:00:13,500 --> 00:00:27,180
Welcome everyone, it's great to be in Berlin,
I like how this powerful the community is.

3
00:00:27,180 --> 00:00:31,929
This is my second year, and it's not just
a pleasure, it's a get honor to be on this

4
00:00:31,929 --> 00:00:37,059
side of the room as a speaker, and, well,
it's amazing.

5
00:00:37,059 --> 00:00:41,600
First of all, let me tell you that I have
not watched inception.

6
00:00:41,600 --> 00:00:48,250
You're thinking, what kind of person has not
watched that movie and why is he using that

7
00:00:48,250 --> 00:00:49,430
title then.

8
00:00:49,430 --> 00:00:57,079
It's just a coincidence, it's just that for
this particular talk I like how JS inception

9
00:00:57,079 --> 00:01:03,460
sounded because this talk is about implementing
things in script engine in I didn't want I

10
00:01:03,460 --> 00:01:09,210
wanted to use this very nice logo\h‑‑
I wanted to use this very nice low go, that

11
00:01:09,210 --> 00:01:17,600
I wanted to use for a wile that is all CSS,
that I have been tweaking a bit after CSS

12
00:01:17,600 --> 00:01:19,720
conference the other day.

13
00:01:19,720 --> 00:01:22,270
So well, this is all HTML.

14
00:01:22,270 --> 00:01:30,850
But, let me introduce myself, as you know,
I'm Adrian, I'm from Spain, I live in Helsinki.

15
00:01:30,850 --> 00:01:36,820
It's a bit strange, I enjoy the winter, it's
cold.

16
00:01:36,820 --> 00:01:43,720
I love free software and getting into travel.

17
00:01:43,720 --> 00:01:49,500
The first one, free software, Igalia a few
years ago, and I working this still, and hopefully

18
00:01:49,500 --> 00:01:57,880
for years to come, and the second part is
to build machines and Compilers, it's not

19
00:01:57,880 --> 00:02:03,880
the most useful thing for people to like,
it's also a bit of low level for JSConf, no

20
00:02:03,880 --> 00:02:10,440
worries, we're not going to touch almost C
+ + code today.

21
00:02:10,440 --> 00:02:17,349
Yeah, I said travel those\h‑‑ can be quite
complex.

22
00:02:17,349 --> 00:02:27,000
And lastly the last year we have been collaborating
with Bloomberg to bring ES features into JavaScript

23
00:02:27,000 --> 00:02:34,739
engine, also spider monkey, and also modern
layout to CSS.

24
00:02:34,739 --> 00:02:40,989
And if you have not watched it in CSS Conf,
I would suggest you to look at the grid layout

25
00:02:40,989 --> 00:02:45,710
from Friday, it was very nice, and it was
great to see all the positive responses on

26
00:02:45,710 --> 00:02:49,120
Twitter while the talk was going on.

27
00:02:49,120 --> 00:02:50,569
That's very nice.

28
00:02:50,569 --> 00:02:59,480
So, I'm going to explain what this inception
is about, how do we get the JavaScript into

29
00:02:59,480 --> 00:03:07,069
our engine, V8, and we have time from the
talk, we will keep trying to come up with

30
00:03:07,069 --> 00:03:13,090
a small implementation for feature of ES 6,
try to add it in the 8 and refine it a bit

31
00:03:13,090 --> 00:03:15,879
as long as\h‑‑ as much as the time allows.

32
00:03:15,879 --> 00:03:20,819
So, there's going to be live coding, I hope
nothing blows, because this is the endt kind

33
00:03:20,819 --> 00:03:24,069
of thing that can go wrong.

34
00:03:24,069 --> 00:03:34,349
Well, to make things even clearer this is
not about trance piling, this is not about

35
00:03:34,349 --> 00:03:37,879
changing JavaScript and trans piling it from
ES 6‑ES 8 or current engine.

36
00:03:37,879 --> 00:03:43,810
It's not about explaining other languages
into JavaScript.

37
00:03:43,810 --> 00:03:50,120
It is not about implementing a JavaScript
engine in JavaScript itself, that can be done,

38
00:03:50,120 --> 00:03:55,500
it's surely a lot of fun, and, it's the kind
of thing you do when you have a lot of time,

39
00:03:55,500 --> 00:04:00,739
but, we oar more interested in getting our
things into actual process, and getting them

40
00:04:00,739 --> 00:04:08,519
in OGS, getting them in places where people
could use them, established process, so, this

41
00:04:08,519 --> 00:04:17,410
is more about adding feature in the JavaScript
engine, trying to touch less of C + + as possible.

42
00:04:17,410 --> 00:04:23,920
Because, the thing is, once the basic built\h‑‑
machine, the basics are impresented, there's

43
00:04:23,920 --> 00:04:28,920
not much to prevent using the language itself
to implement things.

44
00:04:28,920 --> 00:04:34,420
This is the same that happen was CRC + +,
you is the C Compiler, the C Compiler you

45
00:04:34,420 --> 00:04:39,950
can use it to build a C library or C + + library
and use that in our program, why couldn't

46
00:04:39,950 --> 00:04:45,750
we use JavaScript to impresent parts of JavaScript
or parts of the standard library or at least

47
00:04:45,750 --> 00:04:52,440
as much as we can and then use then in our
own engine? Well, actually we can, and there's

48
00:04:52,440 --> 00:04:58,880
a good number of reasons to do that, I think
we can all agree at JSConf we prefer to use

49
00:04:58,880 --> 00:05:05,490
JavaScript in C + +, it's easier, faster to
develop, we don't have to go with all this

50
00:05:05,490 --> 00:05:12,940
code compiled real test check cycle, so that
gets faster.

51
00:05:12,940 --> 00:05:18,740
It makes us more productive, and very often
the algorithms are more easily understandable

52
00:05:18,740 --> 00:05:24,120
and more maintainable if we just write it
down in JavaScript, and any way there's another

53
00:05:24,120 --> 00:05:26,480
reason we oar not doing it.

54
00:05:26,480 --> 00:05:29,130
I can do it well, I can do it just because.

55
00:05:29,130 --> 00:05:36,880
And this one or two not so obvious reasons,
and one of them is that the modern jus in

56
00:05:36,880 --> 00:05:44,620
time Compilers are really really good at generating
machine code, they're so good that they can't

57
00:05:44,620 --> 00:05:53,090
make faster code than our hand made\h‑‑
they can make faster code than C + + code.

58
00:05:53,090 --> 00:05:54,640
How is that possible? It's amazing.

59
00:05:54,640 --> 00:05:58,970
The thing is, the Runtime in C + + there's
still going to be a moment in which the JavaScript

60
00:05:58,970 --> 00:06:01,470
code is going to have to call into the C +
+ Runtime

61
00:06:01,470 --> 00:06:08,720
's two worlds, JavaScript world and C + +
world, whatever you use in JavaScript world

62
00:06:08,720 --> 00:06:15,250
you have to convert to C + + values, arrange
the tags, arrange other things, make sure

63
00:06:15,250 --> 00:06:21,630
you call into C + + with proper calling conventions,
this takes time.

64
00:06:21,630 --> 00:06:27,670
This layer of batter in the JavaScript world
and C + + takes time.

65
00:06:27,670 --> 00:06:35,780
If the functions are likely to be well implemented
by the JavaScript engine, we'd rather implement

66
00:06:35,780 --> 00:06:41,010
them in JavaScript, we have all the jumping
from JavaScript to C plus plus and that's

67
00:06:41,010 --> 00:06:43,610
what makes it faster.

68
00:06:43,610 --> 00:06:50,200
Also, engines make very good guesses about
types of things, so you can just\h‑‑ most

69
00:06:50,200 --> 00:06:55,490
of the time, well, let's just generate perfect
code for integrals, so, yeah, they make very

70
00:06:55,490 --> 00:07:02,100
good code, so there's no reason to not to
say yeah, let's make it in C + + of because

71
00:07:02,100 --> 00:07:07,600
it's faster, it may with slower in C + +.

72
00:07:07,600 --> 00:07:11,700
Then, any way again, just because and it's
fun.

73
00:07:11,700 --> 00:07:18,790
To give you an idea of how much JavaScript
is using engines, this is from yesterday,

74
00:07:18,790 --> 00:07:28,210
I made the numbers yesterday, having checked
with total count of lines of code, there's\h‑‑

75
00:07:28,210 --> 00:07:32,580
there's most of the JavaScript code is used
in V8.

76
00:07:32,580 --> 00:07:38,340
That's the spider monkey following very JavaScript
code one kilo byte, maybe they're trying to

77
00:07:38,340 --> 00:07:43,650
make one of those one kilo byte JavaScript
contest.

78
00:07:43,650 --> 00:07:48,960
There's a reason for that, the JavaScript
core can revert to an interpreter, so it doesn't

79
00:07:48,960 --> 00:07:55,580
always generate machine code in that case
it's faster to use C + + Runtime that you

80
00:07:55,580 --> 00:07:57,750
have to call in to.

81
00:07:57,750 --> 00:08:03,900
So it's my guess about why JavaScript core
is not using more JavaScript.

82
00:08:03,900 --> 00:08:11,130
Of course, these numbers are not counting
test suites or tools, it's the Runtime or

83
00:08:11,130 --> 00:08:12,760
parts of time in JavaScript.

84
00:08:12,760 --> 00:08:21,210
V8 looks like the perfect match for this kind
of task, that's one of the reasons I use V8

85
00:08:21,210 --> 00:08:23,020
for this demo today.

86
00:08:23,020 --> 00:08:31,700
So, I was saying, implement ES 6 feature,
so, I've been checking, until last week, which

87
00:08:31,700 --> 00:08:38,010
features from ES 6 are not just in V8 that
also they can be implement in the JavaScript,

88
00:08:38,010 --> 00:08:43,390
also that nobody else is really trying to
impresent them, to try to come up with something

89
00:08:43,390 --> 00:08:46,460
new, it's not done by anyone.

90
00:08:46,460 --> 00:08:52,950
And, there's one thing that's not done and
it's a lot of methods from type arrays.

91
00:08:52,950 --> 00:08:59,220
Well, similar to the ones in normal arrays,
but they just work with type arrays, this

92
00:08:59,220 --> 00:09:02,090
kind of Int array, Int 32 array.

93
00:09:02,090 --> 00:09:13,870
That have continue use memory baking, for
example those are used by ASMGS, etc..

94
00:09:13,870 --> 00:09:26,330
So, for today let's implement t Int array\h‑‑
while it ease easy, if we were patching the

95
00:09:26,330 --> 00:09:34,030
poet type ourselves, there's one slide, small
thing that is not handled by this function,

96
00:09:34,030 --> 00:09:37,120
so let's see a more spec compliant version.

97
00:09:37,120 --> 00:09:42,390
And this is the second argument for each\h‑‑
we can change the binding of these for call

98
00:09:42,390 --> 00:09:48,580
back that is called for each of the elements,
this is actual lay version that we can go

99
00:09:48,580 --> 00:09:49,780
and implement now.

100
00:09:49,780 --> 00:09:52,830
So, let's do that.

101
00:09:52,830 --> 00:09:57,810
Of\h‑‑ some music for this.

102
00:09:57,810 --> 00:10:13,920
(Jazz lounge music) so you can see the SRC
inside the 8, there's JavaScript file, there's

103
00:10:13,920 --> 00:10:17,020
one called type array that looks very good.

104
00:10:17,020 --> 00:10:19,860
Will it's go there.

105
00:10:19,860 --> 00:10:22,000
\h‑‑ let's go there.

106
00:10:22,000 --> 00:10:29,380
Oh, JavaScript, surprise, great, well, several
things that look a bit not so much like JavaScript,

107
00:10:29,380 --> 00:10:34,860
let's just go to the end and patch in our
prototype.

108
00:10:34,860 --> 00:10:45,690
So for each is the function we oar implementing,
Coltbolt, function keyboard, that's important.

109
00:10:45,690 --> 00:10:55,360
Well if this is undefined, then,\h‑‑ not
this, but this, the argument past is undefined,

110
00:10:55,360 --> 00:11:01,620
then spec says that these arguments should
be implicit this, use of one for this function,

111
00:11:01,620 --> 00:11:05,060
so, it goes that way, let's make a loop.

112
00:11:05,060 --> 00:11:09,180
This is like almost of the loops that go over
arrays.

113
00:11:09,180 --> 00:11:14,610
This is this length.

114
00:11:14,610 --> 00:11:15,970
There.

115
00:11:15,970 --> 00:11:23,550
So, we call the callback, we use this call
function to change the binding of this, and,

116
00:11:23,550 --> 00:11:26,870
we pass data in the position there.

117
00:11:26,870 --> 00:11:30,720
Can this really be this easy.

118
00:11:30,720 --> 00:11:33,370
Let's check it.

119
00:11:33,370 --> 00:11:36,030
Let's build it.

120
00:11:36,030 --> 00:11:40,920
It's of course only generating some stuff,
"building" including the JavaScript into V8,

121
00:11:40,920 --> 00:11:48,830
I'm going to talk in a moment about how the
works\h‑‑ Ooops, extension internal complylation

122
00:11:48,830 --> 00:11:49,830
error.

123
00:11:49,830 --> 00:11:51,460
That doesn't look for good.

124
00:11:51,460 --> 00:11:57,640
Maybe the JavaScript is not as JavaScriptty
as expected.

125
00:11:57,640 --> 00:12:01,380
Let's look at data view there.

126
00:12:01,380 --> 00:12:04,440
More things here, let's see what it does.

127
00:12:04,440 --> 00:12:06,100
Oh, that's a bit funny.

128
00:12:06,100 --> 00:12:07,100
Oh, maybe\h‑‑ ...

129
00:12:07,100 --> 00:12:12,060
while we impresenting thing in the Runtime,
maybe, maybe.

130
00:12:12,060 --> 00:12:16,680
Let's see if there's any other ...

131
00:12:16,680 --> 00:12:17,680
function.

132
00:12:17,680 --> 00:12:21,770
Subtype array, maybe we should move our code
here.

133
00:12:21,770 --> 00:12:25,750
Well, install functions, that looks good.

134
00:12:25,750 --> 00:12:34,070
But look at this, it acts as prototype here
and uses global Hlmmm, probably some kind

135
00:12:34,070 --> 00:12:41,460
of module system thing work here, let's try
the global in the front and make maybe it

136
00:12:41,460 --> 00:12:43,220
works.

137
00:12:43,220 --> 00:12:47,640
Again the build phase is fast, let's see if
it compiles this time.

138
00:12:47,640 --> 00:12:54,150
Blah, blah, blah, this time it works.

139
00:12:54,150 --> 00:12:56,550
That's great.

140
00:12:56,550 --> 00:12:58,950
So, amazing.

141
00:12:58,950 --> 00:13:07,290
We have just became V8 hackers, ten minutes,
who wants a full CS degree on a Compilers

142
00:13:07,290 --> 00:13:08,290
master.

143
00:13:08,290 --> 00:13:17,720
Let's just go fetch V8 now of start hacking
V8 JavaScript in there and make the engine

144
00:13:17,720 --> 00:13:23,279
do what you want it to do.

145
00:13:23,279 --> 00:13:33,190
I actually want to show that it works.

146
00:13:33,190 --> 00:13:38,660
Oh rings it sounds a bit strange that duringing
the compilation phase, splits the error, well,

147
00:13:38,660 --> 00:13:46,110
I compile the JavaScript, it actually is,
because, it makes sure that it's not going

148
00:13:46,110 --> 00:13:54,020
to generate errors later at Runtime, and kind
of compile version is included in the V8 library.

149
00:13:54,020 --> 00:13:56,550
Ah, there it is.

150
00:13:56,550 --> 00:14:02,520
Now, let's make an array.

151
00:14:02,520 --> 00:14:05,920
Three elements for example.

152
00:14:05,920 --> 00:14:11,110
And we have from each.

153
00:14:11,110 --> 00:14:18,110
But, hey we have to see if it works, maybe
it doesn't work.

154
00:14:18,110 --> 00:14:24,600
For example we can change one of the elements,
that's usual in semantics, for each function\h‑‑

155
00:14:24,600 --> 00:14:26,720
do for print.

156
00:14:26,720 --> 00:14:28,830
Hey, it works.

157
00:14:28,830 --> 00:14:36,080
Wow! So we have now V8 works implement in
the JavaScript, it was previewed into machine

158
00:14:36,080 --> 00:14:41,860
code when building, what else can we ask for?
Well, there are a couple of things that we

159
00:14:41,860 --> 00:14:43,380
could improve here.

160
00:14:43,380 --> 00:14:47,770
Let me stop the music.

161
00:14:47,770 --> 00:14:49,780
There.

162
00:14:49,780 --> 00:14:56,610
So, of just a couple of things that we'll
be tempted to do now because there is not

163
00:14:56,610 --> 00:15:04,740
only INT 8 array, Int 32 array, all of those
array that are type arrays, so we would be

164
00:15:04,740 --> 00:15:06,830
tempted to do this.

165
00:15:06,830 --> 00:15:08,670
This would actually work.

166
00:15:08,670 --> 00:15:12,240
We could patch all the prototypes.

167
00:15:12,240 --> 00:15:15,990
A bit of work, we have to duplicate those
lines in there.

168
00:15:15,990 --> 00:15:22,150
But, of course we can do I but these, it's
not necessarily a good idea, remember that

169
00:15:22,150 --> 00:15:28,000
the Compiler doesn't\h‑‑ is not specialized
in one version of the code for each function,

170
00:15:28,000 --> 00:15:36,110
so ited may fail its guess for the types,
so what we want to do is rather have a copy

171
00:15:36,110 --> 00:15:42,220
of each of the function that is of\h‑‑
the same code inside, but it's one of the

172
00:15:42,220 --> 00:15:48,170
arrays gets it's own version, when the Compiler
makes an optimized version guessing the types,

173
00:15:48,170 --> 00:15:53,020
it can do a perfect version matching each
one of the types.

174
00:15:53,020 --> 00:15:58,510
And, now, this is a really starting to get
a bit tedious and a bit boring to write all

175
00:15:58,510 --> 00:15:59,510
those.

176
00:15:59,510 --> 00:16:05,160
So fortunately I was saying some strange things
in the JavaScript code that V8 uses, they

177
00:16:05,160 --> 00:16:11,630
have a kind of macro expansion thing that
we can use to, well, to make one implementation

178
00:16:11,630 --> 00:16:17,910
that generates one copy for each of the\h‑‑
for each of the functions.

179
00:16:17,910 --> 00:16:20,839
For each of the array types.

180
00:16:20,839 --> 00:16:25,050
And this is going to be good because the co‑generator
for each one of the versions once they get

181
00:16:25,050 --> 00:16:28,340
hot and have been used for a while and types
having guessed.

182
00:16:28,340 --> 00:16:32,860
The code will generate the best it can.

183
00:16:32,860 --> 00:16:35,960
Let's see how we can use that.

184
00:16:35,960 --> 00:16:38,580
I'm going to have the same music.

185
00:16:38,580 --> 00:16:45,589
Okay, so let's go back.

186
00:16:45,589 --> 00:16:56,080
Type in array\h‑‑ type array thereupon,
let's cutlet's go, up, up, up.

187
00:16:56,080 --> 00:17:03,330
Macro type array,ID element size, it looks
like it's generating copy of things, and this

188
00:17:03,330 --> 00:17:07,300
name thing here must be replaced.

189
00:17:07,300 --> 00:17:17,600
For what? Well, for name is 8 array, it can
be in 16 array, let's move our version here.

190
00:17:17,600 --> 00:17:27,630
So based\h‑‑ let's be nice, so, instead
of Int array, we write name, Hmm ...

191
00:17:27,630 --> 00:17:34,080
is that enough? It seems, so, well, now, it's
version of type array supported by V8, automatically

192
00:17:34,080 --> 00:17:42,010
gets 4 H function had it's prototype, each
one gets it's unique version.

193
00:17:42,010 --> 00:17:48,580
So this should make it that in each one of
the type array classes their prototype has

194
00:17:48,580 --> 00:17:51,240
of reach, that's super.

195
00:17:51,240 --> 00:17:56,440
Let's see if any syntax errors or things.

196
00:17:56,440 --> 00:18:00,180
Ooop, there's an error again.

197
00:18:00,180 --> 00:18:01,190
This was not planned.

198
00:18:01,190 --> 00:18:05,030
The other one was.

199
00:18:05,030 --> 00:18:10,680
So what's the problem here? Maybe it's not\h‑‑
it's a little bit picky because the macro

200
00:18:10,680 --> 00:18:20,340
extension is not very smart, so times it will
appear in places where one doesn't expect.

201
00:18:20,340 --> 00:18:25,760
So let's see.

202
00:18:25,760 --> 00:18:34,429
Now it seems to work.

203
00:18:34,429 --> 00:18:42,810
Be sure to put colons and semi colons, you
never know how the macro processor is working,

204
00:18:42,810 --> 00:18:48,340
I have not checked the code, it just works,
sometimes makes thing\h‑‑ things work

205
00:18:48,340 --> 00:18:49,780
again.

206
00:18:49,780 --> 00:18:58,760
Oh, it's a lot of time.

207
00:18:58,760 --> 00:19:06,130
If it sounds like elevator music, it's because
it's almost elevator music.

208
00:19:06,130 --> 00:19:17,790
I have to make sure I have was picking something
with clear rights and those kind of things.

209
00:19:17,790 --> 00:19:23,909
V8 is already revealed, maybe I can just run
the V8.

210
00:19:23,909 --> 00:19:25,670
\h‑‑ harmony also.

211
00:19:25,670 --> 00:19:29,290
Probably is not ...

212
00:19:29,290 --> 00:19:36,530
that's a bit of a bummer.

213
00:19:36,530 --> 00:19:41,980
If you want to hack in to Compilers get a
fast machine for lots of memory for the linking.

214
00:19:41,980 --> 00:19:43,120
There we go.

215
00:19:43,120 --> 00:19:46,679
I go on harmony this time
we are.

216
00:19:46,679 --> 00:19:53,850
Let's see N 16 array of prototype for each.

217
00:19:53,850 --> 00:19:55,250
Oh, yeah, it's there.

218
00:19:55,250 --> 00:20:03,340
Will it work this time, let's try again with
Int for each.

219
00:20:03,340 --> 00:20:05,720
Let's make another one.

220
00:20:05,720 --> 00:20:07,840
This time Uint 32 array, two elements.

221
00:20:07,840 --> 00:20:15,510
For example, B for each.

222
00:20:15,510 --> 00:20:21,679
Let's try this argument handling works the
second parameter.

223
00:20:21,679 --> 00:20:28,510
To make it even nicer, let's make this an
arrow function.

224
00:20:28,510 --> 00:20:40,510
So let's print these plus X\h‑‑ let's
process stream for example.

225
00:20:40,510 --> 00:20:41,510
Why not.

226
00:20:41,510 --> 00:20:43,170
Hey, it works, wow! Amazing, and functions
are starting to work.

227
00:20:43,170 --> 00:20:44,170
So cool.

228
00:20:44,170 --> 00:20:52,590
Don't rely on the scoping of arguments on
this so far, but it works, and we got automatically

229
00:20:52,590 --> 00:21:01,730
from a simple\h‑‑ just one implementation
a copy of the function in each one of the

230
00:21:01,730 --> 00:21:05,220
prototypes of all the type of array classes.

231
00:21:05,220 --> 00:21:11,700
We could make it a bit nicer, we could use
install functions we saw over there, and then

232
00:21:11,700 --> 00:21:15,690
once it's nice enough we could send it for
review and get it to V8.

233
00:21:15,690 --> 00:21:25,590
We're just one step far from being a person
that has a co‑meet in JavaScript engine,

234
00:21:25,590 --> 00:21:29,870
so, I hope after this talk you all go hacking
your laptops to start implementing all those

235
00:21:29,870 --> 00:21:32,960
missing type array methods.

236
00:21:32,960 --> 00:21:39,730
It will get a bit tough with the review process,
but it's going to be nice, and you'll be also

237
00:21:39,730 --> 00:21:41,520
Compiler hackers.

238
00:21:41,520 --> 00:21:49,740
There was those funny thing in the V8 code,
this is not the type array, I can actually

239
00:21:49,740 --> 00:21:51,470
show this one.

240
00:21:51,470 --> 00:21:53,150
This is from normal array\h‑‑ (Chuckles
...

241
00:21:53,150 --> 00:21:54,150
normal ray...

242
00:21:54,150 --> 00:22:07,070
) we have the code for each're\h‑‑ we
have this things that are ruersble, to UINT

243
00:22:07,070 --> 00:22:13,260
32, but what is this, JavaScript without types?
It's a Spec function.

244
00:22:13,260 --> 00:22:17,929
Wow! Person sign get the follow\h‑‑ percent
sign get default receiver.

245
00:22:17,929 --> 00:22:24,070
Those things are there for a reason
are certain things that we should know about

246
00:22:24,070 --> 00:22:28,490
the V8 Runtime and similarly happens to spider
monkey just that it's different.

247
00:22:28,490 --> 00:22:35,530
There's a different approach to certain things
because it's not as fast to do everything

248
00:22:35,530 --> 00:22:40,800
in JavaScript or it's not possible to do all,
all of everything in JavaScript, because just

249
00:22:40,800 --> 00:22:47,240
as I was saying the initiallytion of the Runtime
is done early during the initiallytion of

250
00:22:47,240 --> 00:22:52,309
the JavaScript engine\h‑‑ so there are
certain features that my not be available.

251
00:22:52,309 --> 00:22:58,851
Also, to impresent certain parts of the JavaScript
specification, we need more information, we

252
00:22:58,851 --> 00:23:04,110
may need to know if a function is anker report
function or if\h‑‑ an Error function or

253
00:23:04,110 --> 00:23:13,500
amore malfunction, we know if it's an Error
function it will throw and normal one doesn't,

254
00:23:13,500 --> 00:23:18,720
but throwing\h‑‑ is slow, slower than
just checking a flag, actually the Runtime

255
00:23:18,720 --> 00:23:25,600
the "so‑called" not native functions which
allow the introspect the Runtime and the JavaScript

256
00:23:25,600 --> 00:23:29,140
can manipulate and know more about internals
of the Runtime.

257
00:23:29,140 --> 00:23:34,530
So, of course, this is all implementation
dependent, that's why it's different in V8

258
00:23:34,530 --> 00:23:36,429
and different in spider monkey.

259
00:23:36,429 --> 00:23:44,120
And the parser actually knows about this,
there's a low native syntax flag, we can try

260
00:23:44,120 --> 00:23:48,440
nit the V8 interpreter, there's a lot of functions.

261
00:23:48,440 --> 00:23:54,290
There's some helper functions done in JavaScript,\h‑‑
wants to check, so these helper functions

262
00:23:54,290 --> 00:24:02,299
are ones that don't have the percent sign,
and the functions correspond, roughly, to

263
00:24:02,299 --> 00:24:06,559
operations as specified in the language specification.

264
00:24:06,559 --> 00:24:12,169
So, for example, in the specification there's
other finishing of what\h‑‑ is expected

265
00:24:12,169 --> 00:24:18,990
to do and the algorithms in the specification
are written down using the reference those

266
00:24:18,990 --> 00:24:25,360
basic operations that are impresented as helpers
here, so the algorithms that exist in V8,

267
00:24:25,360 --> 00:24:32,640
most of them try to mimic the algorithm if
way it's written in the algorithm specification,

268
00:24:32,640 --> 00:24:40,380
it's easier to do, easier to correspond to
the spec, but it makes it harder time me meant

269
00:24:40,380 --> 00:24:52,500
on JavaScript engines, I would recommend to
check this navetives yes, Runtime yes, macro,

270
00:24:52,500 --> 00:25:00,360
V I, and there's alsod the C + + functionses
like this, get the full receiver, this gets

271
00:25:00,360 --> 00:25:07,510
what would be the "this" target function,
so it checks change and other things that

272
00:25:07,510 --> 00:25:12,610
we have known implicitly when we were doing
the first implementation of forage, you can

273
00:25:12,610 --> 00:25:23,270
check those in Runtime C C and, there should
be Runtime function\h‑‑ there, Runtime

274
00:25:23,270 --> 00:25:28,930
function is declared with this macro, this
gets scope count, it counts how many scope

275
00:25:28,930 --> 00:25:30,610
there is are.

276
00:25:30,610 --> 00:25:37,049
You actually know\h‑‑ the engine to go
over those, but with a little time and checking

277
00:25:37,049 --> 00:25:43,640
code examples from the rest of V8 is not that
difficult to get the use the same constructs

278
00:25:43,640 --> 00:25:50,650
as the engine\h‑‑ so just check the code
and the other GS files and try to follow the

279
00:25:50,650 --> 00:25:53,320
same style and check the specification.

280
00:25:53,320 --> 00:25:58,650
The specification of JavaScript is quite big,
it's something that may get into your way.

281
00:25:58,650 --> 00:26:02,850
It may look like it's difficult to go over
because it's not written in a very accessible

282
00:26:02,850 --> 00:26:09,000
language, looking for examples in the rest
of the JavaScript code is better and of course,

283
00:26:09,000 --> 00:26:14,990
at some point you will need to check the spec
to make sure things work as expected.

284
00:26:14,990 --> 00:26:17,970
About V8 and how it's built, it took a bit.

285
00:26:17,970 --> 00:26:27,600
Actually it picks all the GS code, puts it
in to C + + file as bytes, that is linked

286
00:26:27,600 --> 00:26:37,960
into V8 node nap shot, it's a small utility
that comes with V8 that is built with V8 base

287
00:26:37,960 --> 00:26:42,840
that doesn't include the Runtime, and what
it does is it generates the code for it by

288
00:26:42,840 --> 00:26:45,710
loading those JavaScripts and running them.

289
00:26:45,710 --> 00:26:53,610
And, dumps\h‑‑ makes a dump of the JavaScript
heap where the code is and variables and in

290
00:26:53,610 --> 00:27:04,600
a V8\h‑‑ Lib format that is snapshot and\h‑‑
library, so it's much faster to load, so if

291
00:27:04,600 --> 00:27:11,600
you have\h‑‑ your stand alone application
that uses V8 you can modify the bootstrap.CC

292
00:27:11,600 --> 00:27:17,650
file and include other scripts of JavaScript
that you have me loaded and precompiled that

293
00:27:17,650 --> 00:27:21,620
are always available as soon as the application
starts.

294
00:27:21,620 --> 00:27:27,120
So, that's something that is quite nice to
have.

295
00:27:27,120 --> 00:27:35,330
So, well, we're running out of time, but I
tell have a couple of remarks: As results

296
00:27:35,330 --> 00:27:42,080
of being here today with me, what I want you
to be aware is that it's not only C + + and

297
00:27:42,080 --> 00:27:49,251
JavaScript engines, it's a way to start hacking
engines speaking\h‑‑ INT task that we

298
00:27:49,251 --> 00:27:55,309
may know better, like JavaScript, and you
can pick your favorite engine and hack on

299
00:27:55,309 --> 00:27:56,309
them.

300
00:27:56,309 --> 00:28:00,950
Don't be\h‑‑ don't be squared of the spec.

301
00:28:00,950 --> 00:28:07,020
Ask, go to the ES discuss mailing list, ask
for clarifications, sometimes a spec is not

302
00:28:07,020 --> 00:28:10,710
clear, especially ES 6 parts that are still
changing a bit.

303
00:28:10,710 --> 00:28:15,440
Sometimes you ask for a clarification and
goes, oh, this is not very well specified,

304
00:28:15,440 --> 00:28:17,630
let's give it another try.

305
00:28:17,630 --> 00:28:24,049
So, well, I hope\h‑‑ I hope you are now
all encouraged to go hack on engines, we need

306
00:28:24,049 --> 00:28:28,750
more people like you to implement this.

