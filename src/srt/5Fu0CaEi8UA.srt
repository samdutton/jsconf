1
00:00:00,000 --> 00:00:26,160

whoo that's it come on come on all right

2
00:00:26,160 --> 00:00:28,859
test oh that's loud welcome everybody my

3
00:00:28,859 --> 00:00:31,019
name is Justin Meyer and today I'm going

4
00:00:31,019 --> 00:00:33,870
to talk about done Jas which is new

5
00:00:33,870 --> 00:00:35,910
JavaScript framework we built be going

6
00:00:35,910 --> 00:00:39,210
over why we built it and what I think it

7
00:00:39,210 --> 00:00:40,620
does really well and why you might want

8
00:00:40,620 --> 00:00:43,170
to leave here right now abandon all your

9
00:00:43,170 --> 00:00:44,789
angular and react apps and start

10
00:00:44,789 --> 00:00:46,680
building done Jas if you don't feel that

11
00:00:46,680 --> 00:00:48,960
way please talk to me afterwards I'm

12
00:00:48,960 --> 00:00:51,539
really wanting to learn how to I really

13
00:00:51,539 --> 00:00:53,940
believe in the product I hopefully will

14
00:00:53,940 --> 00:00:57,329
convince you to too but if not come talk

15
00:00:57,329 --> 00:01:00,719
to me because I want to argue it out so

16
00:01:00,719 --> 00:01:02,879
a few things because I've given this

17
00:01:02,879 --> 00:01:05,780
talk once before some fa cues that

18
00:01:05,780 --> 00:01:07,619
everybody has in the back of their mind

19
00:01:07,619 --> 00:01:09,630
the whole time I'm talking it's a

20
00:01:09,630 --> 00:01:11,070
JavaScript framework it's open source

21
00:01:11,070 --> 00:01:13,710
it's really for the front end the it's

22
00:01:13,710 --> 00:01:15,689
back in agnostic so you can write you

23
00:01:15,689 --> 00:01:18,150
can use it on top of your Python Ruby on

24
00:01:18,150 --> 00:01:22,860
Rails application it's built on these

25
00:01:22,860 --> 00:01:25,439
technologies it does have used node to

26
00:01:25,439 --> 00:01:28,490
do things like server-side rendering and

27
00:01:28,490 --> 00:01:32,610
and it's build system but like again you

28
00:01:32,610 --> 00:01:34,860
can use it on anything you want it

29
00:01:34,860 --> 00:01:37,950
supports ie8 works on every you know

30
00:01:37,950 --> 00:01:40,740
major operating system we're just about

31
00:01:40,740 --> 00:01:45,360
we've got a the pre version 6 has note

32
00:01:45,360 --> 00:01:48,390
for note 3 support which should be

33
00:01:48,390 --> 00:01:50,490
product production ready in about two

34
00:01:50,490 --> 00:01:53,070
weeks and it's not a new framework we

35
00:01:53,070 --> 00:01:54,869
recycle so this is part of the

36
00:01:54,869 --> 00:01:56,880
JavaScript MVC anybody heard of

37
00:01:56,880 --> 00:01:59,340
JavaScript MVC here you a few people

38
00:01:59,340 --> 00:02:01,850
good so this is the rebirth of

39
00:02:01,850 --> 00:02:04,979
JavaScript MVC so I work from a Toby

40
00:02:04,979 --> 00:02:07,200
we're a JavaScript consulting company

41
00:02:07,200 --> 00:02:09,440
and we built some of the biggest

42
00:02:09,440 --> 00:02:12,239
high-profile ecommerce sites there are

43
00:02:12,239 --> 00:02:13,890
not the biggest butt

44
00:02:13,890 --> 00:02:17,850
whew in in the top 10 and even using our

45
00:02:17,850 --> 00:02:21,180
own technology we would constantly find

46
00:02:21,180 --> 00:02:24,870
how much other stuff had to be done to

47
00:02:24,870 --> 00:02:27,650
build like these big powerful

48
00:02:27,650 --> 00:02:31,590
sophisticated client apps um a list of a

49
00:02:31,590 --> 00:02:35,700
lot of the things here um and it was so

50
00:02:35,700 --> 00:02:39,209
much beyond what JavaScript MVC did and

51
00:02:39,209 --> 00:02:40,440
we wanted to make it possible for

52
00:02:40,440 --> 00:02:43,880
everybody to do everything to build that

53
00:02:43,880 --> 00:02:46,920
modern web app that can compete in you

54
00:02:46,920 --> 00:02:50,040
know today's JavaScript world so we

55
00:02:50,040 --> 00:02:52,500
added a bunch of things and kind of

56
00:02:52,500 --> 00:02:55,530
totally rewrote JavaScript MVC to

57
00:02:55,530 --> 00:02:58,080
include things like real-time data

58
00:02:58,080 --> 00:02:59,160
caching these are the ones I'm gonna

59
00:02:59,160 --> 00:03:00,360
talk about today it includes all of

60
00:03:00,360 --> 00:03:02,220
these but the one's going to focus on

61
00:03:02,220 --> 00:03:04,739
today or how it does real-time data

62
00:03:04,739 --> 00:03:08,130
caching progressive loading with CBN

63
00:03:08,130 --> 00:03:12,450
deploys server-side rendering think and

64
00:03:12,450 --> 00:03:14,660
hot and show off its hot module swapping

65
00:03:14,660 --> 00:03:19,200
um and to do it I'm going to show

66
00:03:19,200 --> 00:03:22,530
building a the hello world of real-time

67
00:03:22,530 --> 00:03:23,940
applications a real-time chat

68
00:03:23,940 --> 00:03:27,810
application and before I start building

69
00:03:27,810 --> 00:03:32,070
this I think it's quickly it's useful to

70
00:03:32,070 --> 00:03:34,140
quickly talk about the performance

71
00:03:34,140 --> 00:03:36,810
features of done j/s and how important

72
00:03:36,810 --> 00:03:38,250
they are when you're building a single

73
00:03:38,250 --> 00:03:40,500
page application because when people

74
00:03:40,500 --> 00:03:42,600
traditionally build a single page

75
00:03:42,600 --> 00:03:44,549
application they build it like this it's

76
00:03:44,549 --> 00:03:46,890
a skeleton HTML page that they just send

77
00:03:46,890 --> 00:03:50,010
back to the user that downloads all the

78
00:03:50,010 --> 00:03:51,959
JavaScript and once the javascript is is

79
00:03:51,959 --> 00:03:55,049
there it makes a jest request to get the

80
00:03:55,049 --> 00:03:57,030
data and it finally draws the view to

81
00:03:57,030 --> 00:03:59,579
present that to the user how many people

82
00:03:59,579 --> 00:04:02,190
have built a single page application

83
00:04:02,190 --> 00:04:03,450
like that yeah we've we've all done it

84
00:04:03,450 --> 00:04:05,100
right the reasons why we do that is

85
00:04:05,100 --> 00:04:07,079
because building apps this way is

86
00:04:07,079 --> 00:04:09,150
awesome you your front-end team doesn't

87
00:04:09,150 --> 00:04:10,920
have to really talk to the backend team

88
00:04:10,920 --> 00:04:12,630
there's a lot of good good

89
00:04:12,630 --> 00:04:16,019
maintainability advantages but there's a

90
00:04:16,019 --> 00:04:18,600
lot of performance problems so i'm going

91
00:04:18,600 --> 00:04:20,579
to quickly break them down the big

92
00:04:20,579 --> 00:04:23,760
problem with this is yes you when the

93
00:04:23,760 --> 00:04:26,490
user goes to the page it's going to send

94
00:04:26,490 --> 00:04:28,090
back that

95
00:04:28,090 --> 00:04:30,940
HTML skeleton and then if you're lucky

96
00:04:30,940 --> 00:04:32,470
you'll see a loading screen maybe a

97
00:04:32,470 --> 00:04:35,410
little bit more as the just CSS and the

98
00:04:35,410 --> 00:04:37,750
JavaScript down download for the page

99
00:04:37,750 --> 00:04:41,500
now a big problem is that a lot of

100
00:04:41,500 --> 00:04:43,840
people don't aren't doing or what what's

101
00:04:43,840 --> 00:04:45,040
wrong at first when they're building

102
00:04:45,040 --> 00:04:47,260
application is their site is downloading

103
00:04:47,260 --> 00:04:50,729
too much JavaScript and CSS to slowly

104
00:04:50,729 --> 00:04:53,530
but it's too much javascript because in

105
00:04:53,530 --> 00:04:55,419
a single page application a lot of

106
00:04:55,419 --> 00:04:58,270
people will bundle their entire app into

107
00:04:58,270 --> 00:05:01,570
one big JavaScript and CSS file and then

108
00:05:01,570 --> 00:05:03,040
it's too slow because they're not using

109
00:05:03,040 --> 00:05:05,889
a CDN to distribute their files to make

110
00:05:05,889 --> 00:05:09,280
downloading more local and therefore

111
00:05:09,280 --> 00:05:12,610
faster and then once JavaScript and CSS

112
00:05:12,610 --> 00:05:14,950
have loaded well now you need to get the

113
00:05:14,950 --> 00:05:16,960
data for your page so you still might

114
00:05:16,960 --> 00:05:19,810
see spinners while the page is loading

115
00:05:19,810 --> 00:05:21,310
data and then finally the data comes

116
00:05:21,310 --> 00:05:26,020
back and you render the page now what we

117
00:05:26,020 --> 00:05:28,000
want and hopefully everybody here wants

118
00:05:28,000 --> 00:05:31,479
is a much faster user experience where

119
00:05:31,479 --> 00:05:34,690
the user sees right away what they want

120
00:05:34,690 --> 00:05:36,400
to look at and then eventually and then

121
00:05:36,400 --> 00:05:38,260
shortly after the page becomes

122
00:05:38,260 --> 00:05:41,470
interactive and this is how done j/s

123
00:05:41,470 --> 00:05:44,139
works it works by when the user goes to

124
00:05:44,139 --> 00:05:47,530
the page it packages up it totally

125
00:05:47,530 --> 00:05:49,450
server-side renders the single page

126
00:05:49,450 --> 00:05:51,789
application sends that back but also is

127
00:05:51,789 --> 00:05:54,039
able to identify what data that page is

128
00:05:54,039 --> 00:05:55,990
loading and will package that up with

129
00:05:55,990 --> 00:05:58,030
the page response so that when

130
00:05:58,030 --> 00:06:01,060
javascript and CSS download fast and

131
00:06:01,060 --> 00:06:04,000
just the right amount when javascript

132
00:06:04,000 --> 00:06:06,760
becomes alive it'll say okay i'm going

133
00:06:06,760 --> 00:06:08,110
to start making my ajax request but

134
00:06:08,110 --> 00:06:10,450
we'll trap that and use the data that

135
00:06:10,450 --> 00:06:12,639
was sent back with the initial page

136
00:06:12,639 --> 00:06:17,440
response so the result of this is a much

137
00:06:17,440 --> 00:06:19,270
much better user experience and I think

138
00:06:19,270 --> 00:06:21,070
everybody is talk forever about how

139
00:06:21,070 --> 00:06:23,110
performance is one of those things that

140
00:06:23,110 --> 00:06:25,660
just drives you know makes users very

141
00:06:25,660 --> 00:06:29,139
happy so that was a big part of the goal

142
00:06:29,139 --> 00:06:33,490
for done Jas and with that i'm going to

143
00:06:33,490 --> 00:06:34,990
show how to actually build that real

144
00:06:34,990 --> 00:06:37,690
time application so the app is actually

145
00:06:37,690 --> 00:06:41,229
two pages it's a home page that has just

146
00:06:41,229 --> 00:06:41,920
this little

147
00:06:41,920 --> 00:06:45,550
idiot and a link to the chat page and

148
00:06:45,550 --> 00:06:48,220
the chat page just lists messages allows

149
00:06:48,220 --> 00:06:50,520
people to create it and works real time

150
00:06:50,520 --> 00:06:53,530
so this is going to show off a subset of

151
00:06:53,530 --> 00:06:56,290
dung jss features and I think it's going

152
00:06:56,290 --> 00:06:58,360
to show off a lot like some of the most

153
00:06:58,360 --> 00:07:00,850
important and unique features which are

154
00:07:00,850 --> 00:07:04,660
the ones under lined up here the steps

155
00:07:04,660 --> 00:07:06,250
to build the application we're going to

156
00:07:06,250 --> 00:07:09,010
set up the app we're going just kind of

157
00:07:09,010 --> 00:07:10,690
set up a new done jas application i'm

158
00:07:10,690 --> 00:07:12,700
going to add bootstrap and just show off

159
00:07:12,700 --> 00:07:15,070
that hot module swapping is working and

160
00:07:15,070 --> 00:07:17,650
server-side rendered i'm going to add

161
00:07:17,650 --> 00:07:19,510
routing that routes between two

162
00:07:19,510 --> 00:07:21,370
different pages and then i'll finish the

163
00:07:21,370 --> 00:07:23,980
actual message isn't home page ad real

164
00:07:23,980 --> 00:07:26,020
time to the messages page and then i'll

165
00:07:26,020 --> 00:07:29,710
build and deploy it to a CDN and then

166
00:07:29,710 --> 00:07:34,380
launch it so step one setting up a

167
00:07:34,380 --> 00:07:38,170
dungeon hopefully you all can read that

168
00:07:38,170 --> 00:07:40,060
but it's really easy it's the standard

169
00:07:40,060 --> 00:07:43,600
way of installing every CLI ever which

170
00:07:43,600 --> 00:07:46,840
is npm install done j/s once you do that

171
00:07:46,840 --> 00:07:52,720
I'm going to create a project what's my

172
00:07:52,720 --> 00:08:02,920
video runs ok so I'm going to create a

173
00:08:02,920 --> 00:08:04,750
folder and then I'm just going to run I

174
00:08:04,750 --> 00:08:06,610
can actually can't see the video here

175
00:08:06,610 --> 00:08:09,490
but I can't up there I'm gonna run done

176
00:08:09,490 --> 00:08:11,620
Jason it and this is just the standard

177
00:08:11,620 --> 00:08:13,930
yeoman generator that will ask me a few

178
00:08:13,930 --> 00:08:15,850
questions about my project install all

179
00:08:15,850 --> 00:08:18,610
of its dependencies so here i'ma call it

180
00:08:18,610 --> 00:08:27,310
Dungey has chat say I want all my main

181
00:08:27,310 --> 00:08:29,430
source files in that source folder and

182
00:08:29,430 --> 00:08:32,940
everything else is just the standard

183
00:08:32,940 --> 00:08:37,300
fare it generated this file structure so

184
00:08:37,300 --> 00:08:45,460
once and installed the dependencies

185
00:08:45,470 --> 00:08:47,370
which takes a while there's a lot of

186
00:08:47,370 --> 00:08:49,140
dependencies and this is actually like

187
00:08:49,140 --> 00:08:52,440
double time so I don't have a very fast

188
00:08:52,440 --> 00:08:55,620
internet connection alright so once all

189
00:08:55,620 --> 00:08:57,840
the dependencies are installed it

190
00:08:57,840 --> 00:09:00,000
creates a development server that hosts

191
00:09:00,000 --> 00:09:01,860
the static files sets up server-side

192
00:09:01,860 --> 00:09:03,690
rendering does little hot module

193
00:09:03,690 --> 00:09:05,910
swapping pretty much everything you know

194
00:09:05,910 --> 00:09:10,350
you want in an application its bundle so

195
00:09:10,350 --> 00:09:11,670
I'm setting it up I'm starting the

196
00:09:11,670 --> 00:09:19,400
development server and I'm going to go

197
00:09:19,400 --> 00:09:21,840
to and it just sets up the very basic

198
00:09:21,840 --> 00:09:27,630
hello world so with the hello world i'm

199
00:09:27,630 --> 00:09:29,400
going to add bootstrap and then i'll

200
00:09:29,400 --> 00:09:31,380
show that hot module swapping and

201
00:09:31,380 --> 00:09:34,770
server-side rendering or working so to

202
00:09:34,770 --> 00:09:37,260
add bootstrap to this page is actually

203
00:09:37,260 --> 00:09:41,820
very simple so dont je s comes with

204
00:09:41,820 --> 00:09:43,980
steel je s which is kind of like web

205
00:09:43,980 --> 00:09:45,630
pack if you've used that dependency

206
00:09:45,630 --> 00:09:49,310
management solution it you can load

207
00:09:49,310 --> 00:09:54,600
modules in any format from NPM oh and

208
00:09:54,600 --> 00:09:55,800
also sorry one thing I forgot to mention

209
00:09:55,800 --> 00:09:57,660
our index that's ash here this is the

210
00:09:57,660 --> 00:09:59,960
template that the page is rendered with

211
00:09:59,960 --> 00:10:03,090
so the server-side rendering renders

212
00:10:03,090 --> 00:10:06,210
this it's also sent to the client but

213
00:10:06,210 --> 00:10:07,500
here I'll just show up live reload

214
00:10:07,500 --> 00:10:08,880
working so I forgot them doing that

215
00:10:08,880 --> 00:10:12,150
first so this is actually hot module

216
00:10:12,150 --> 00:10:13,410
swapping but you can see me just

217
00:10:13,410 --> 00:10:16,320
changing it updates the page without

218
00:10:16,320 --> 00:10:20,460
having a refresh or anything and now I'm

219
00:10:20,460 --> 00:10:23,160
going to install bootstrap and you'll

220
00:10:23,160 --> 00:10:25,740
notice those can imports that will

221
00:10:25,740 --> 00:10:32,290
become important in a second

222
00:10:32,300 --> 00:10:41,690
oh so like I said steel can and done Jes

223
00:10:41,690 --> 00:10:43,610
using steel can load pretty much

224
00:10:43,610 --> 00:10:45,380
anything from anywhere including from

225
00:10:45,380 --> 00:10:48,140
nvm so I just have to install bootstrap

226
00:10:48,140 --> 00:10:51,770
into my dungeons project and save it to

227
00:10:51,770 --> 00:10:58,490
its package that Jason and then I can

228
00:10:58,490 --> 00:11:00,380
use those can imports which are kind of

229
00:11:00,380 --> 00:11:02,330
like HTML imports but can import modules

230
00:11:02,330 --> 00:11:05,630
with any JavaScript or CSS any kind of

231
00:11:05,630 --> 00:11:09,710
module so I'm just going to add a can

232
00:11:09,710 --> 00:11:13,910
import for bootstrap and bootstraps less

233
00:11:13,910 --> 00:11:32,430
file

234
00:11:32,440 --> 00:11:35,860
and then I'm going to change the HTML at

235
00:11:35,860 --> 00:11:40,700
the right here to actually use bootstrap

236
00:11:40,710 --> 00:11:43,180
to say hello world and when I save this

237
00:11:43,180 --> 00:11:45,310
you'll see the page automatically update

238
00:11:45,310 --> 00:11:48,010
to a hello world that uses bootstrap

239
00:11:48,010 --> 00:11:57,010
sponsored yeah yay live reload so once

240
00:11:57,010 --> 00:12:01,660
I've done that now I'm going to show off

241
00:12:01,660 --> 00:12:11,230
server-side rendering so I'm just going

242
00:12:11,230 --> 00:12:14,200
to open up the devtools show the page

243
00:12:14,200 --> 00:12:15,970
response and just kind of prove that

244
00:12:15,970 --> 00:12:17,800
this template is actually being

245
00:12:17,800 --> 00:12:19,330
server-side render that's being sent

246
00:12:19,330 --> 00:12:29,170
back so if we scroll the bottom now you

247
00:12:29,170 --> 00:12:31,870
can see that hello world now I can talk

248
00:12:31,870 --> 00:12:35,410
for hours about how good our server side

249
00:12:35,410 --> 00:12:36,910
rendering solution is I highly encourage

250
00:12:36,910 --> 00:12:39,880
people to look it up on Sanjay's calm

251
00:12:39,880 --> 00:12:42,850
but it solves like every conceivable

252
00:12:42,850 --> 00:12:45,310
problem of you know if you're loading

253
00:12:45,310 --> 00:12:46,780
styles and it was to move those that up

254
00:12:46,780 --> 00:12:48,310
at the top so there's no flash of

255
00:12:48,310 --> 00:12:50,710
unstyled content it knows how to wait

256
00:12:50,710 --> 00:12:53,140
for all your Ajax requests to finish

257
00:12:53,140 --> 00:12:55,360
before rendering the entire page if

258
00:12:55,360 --> 00:12:56,860
there's any set time outs we can track

259
00:12:56,860 --> 00:13:00,220
those and it's pretty nifty solution I

260
00:13:00,220 --> 00:13:03,880
say so myself and I am biased okay so

261
00:13:03,880 --> 00:13:06,940
next step I'm going to add routing so in

262
00:13:06,940 --> 00:13:11,280
the dungeon different pages are

263
00:13:11,280 --> 00:13:14,440
represented by custom elements so I'm

264
00:13:14,440 --> 00:13:16,150
going to have a chat home custom element

265
00:13:16,150 --> 00:13:18,520
that represents the home page and a chat

266
00:13:18,520 --> 00:13:20,950
messages custom element that represents

267
00:13:20,950 --> 00:13:23,140
the messages page and I'm going to route

268
00:13:23,140 --> 00:13:25,060
between these two so the first one I'm

269
00:13:25,060 --> 00:13:27,190
going to build is the home I need to

270
00:13:27,190 --> 00:13:35,290
build a home custom element and what to

271
00:13:35,290 --> 00:13:36,730
do this with done j/s there's two ways

272
00:13:36,730 --> 00:13:38,320
of creating custom elements Beaufort

273
00:13:38,320 --> 00:13:40,360
custom elements are built as components

274
00:13:40,360 --> 00:13:41,860
but there's two ways of building

275
00:13:41,860 --> 00:13:43,930
components one is for very lightweight

276
00:13:43,930 --> 00:13:46,000
components which are in done in these

277
00:13:46,000 --> 00:13:48,010
opponent files that look very much like

278
00:13:48,010 --> 00:13:50,860
a web component file so that's the first

279
00:13:50,860 --> 00:13:52,090
one to create I'm gonna create our home

280
00:13:52,090 --> 00:13:55,860
page as a single home component module

281
00:13:55,860 --> 00:13:59,200
and I just ran the generator to do that

282
00:13:59,200 --> 00:14:02,110
and you can see what it made here so

283
00:14:02,110 --> 00:14:03,550
this is kind of a self-contained

284
00:14:03,550 --> 00:14:05,980
description of a custom element it has

285
00:14:05,980 --> 00:14:09,540
you know the name the tag name it has

286
00:14:09,540 --> 00:14:12,610
styles for this custom element and as a

287
00:14:12,610 --> 00:14:14,350
template that gets rendered inside this

288
00:14:14,350 --> 00:14:16,180
custom element it has a view model that

289
00:14:16,180 --> 00:14:18,250
controls the behavior of this custom

290
00:14:18,250 --> 00:14:24,430
element and this doesn't need a

291
00:14:24,430 --> 00:14:25,810
viewmodel so I'm going to get rid of it

292
00:14:25,810 --> 00:14:28,840
all it really needs to do is show a

293
00:14:28,840 --> 00:14:32,230
image that says done j/s chat and then a

294
00:14:32,230 --> 00:14:37,510
link from this page to the chat messages

295
00:14:37,510 --> 00:14:41,050
page so here I'm just creating that link

296
00:14:41,050 --> 00:14:53,460
or the image

297
00:14:53,470 --> 00:14:57,100
and now i'm going to create the link so

298
00:14:57,100 --> 00:14:59,500
rowdy works a little different in in

299
00:14:59,500 --> 00:15:01,510
done Jas versus other frameworks it's

300
00:15:01,510 --> 00:15:04,180
two-way routing rules so what you say is

301
00:15:04,180 --> 00:15:07,750
I want a URL that will set the page

302
00:15:07,750 --> 00:15:09,790
property of the applications view model

303
00:15:09,790 --> 00:15:14,680
to chat so this will figure out the best

304
00:15:14,680 --> 00:15:19,210
routing rule for studying that state of

305
00:15:19,210 --> 00:15:21,400
the application and will actually write

306
00:15:21,400 --> 00:15:25,030
a / chat in this case so that's how you

307
00:15:25,030 --> 00:15:27,460
create a it's all state-based you set

308
00:15:27,460 --> 00:15:29,710
your which is what the state you want

309
00:15:29,710 --> 00:15:31,420
and it will figure out what the URL

310
00:15:31,420 --> 00:15:34,900
needs to look like and I'm just gonna

311
00:15:34,900 --> 00:15:44,740
add some style just so things look right

312
00:15:44,740 --> 00:15:50,650
so this is our home page and now i'm

313
00:15:50,650 --> 00:15:56,710
going to create the chat messages page

314
00:15:56,710 --> 00:15:58,870
i'm just going to I'm going to create a

315
00:15:58,870 --> 00:16:00,310
dummy one so we can switch back and

316
00:16:00,310 --> 00:16:02,770
forth between two pages so this I'm

317
00:16:02,770 --> 00:16:04,660
going to add a component where every

318
00:16:04,660 --> 00:16:06,640
single like its styles its template

319
00:16:06,640 --> 00:16:08,170
everything split out into its own file

320
00:16:08,170 --> 00:16:09,850
that's how we generally develop stuff we

321
00:16:09,850 --> 00:16:13,360
call it the mod lit a folder structure

322
00:16:13,360 --> 00:16:15,040
and on a file structure how we organize

323
00:16:15,040 --> 00:16:16,810
things so we have a folder with

324
00:16:16,810 --> 00:16:18,760
everything inside of it so this

325
00:16:18,760 --> 00:16:21,330
generated the tests documentation

326
00:16:21,330 --> 00:16:24,100
everything start like starter everything

327
00:16:24,100 --> 00:16:26,620
for what a module should be so in this

328
00:16:26,620 --> 00:16:28,150
case I'm just going to change the

329
00:16:28,150 --> 00:16:31,270
template for my custom element to have a

330
00:16:31,270 --> 00:16:34,150
link back to the homepage eventually I'm

331
00:16:34,150 --> 00:16:35,560
going to come and make it lists all the

332
00:16:35,560 --> 00:16:44,610
messages

333
00:16:44,620 --> 00:16:47,330
so here I just want the state when

334
00:16:47,330 --> 00:16:49,190
someone clicks on this link of the

335
00:16:49,190 --> 00:16:52,870
applications view model to be page home

336
00:16:52,870 --> 00:16:55,040
we're going to use this in a second to

337
00:16:55,040 --> 00:16:56,420
switch between these two different

338
00:16:56,420 --> 00:17:02,840
custom elements now one final thing I

339
00:17:02,840 --> 00:17:04,640
want to do is make a pretty routing rule

340
00:17:04,640 --> 00:17:06,260
that I talked about so this is how i

341
00:17:06,260 --> 00:17:07,910
create those pretty routing rules that

342
00:17:07,910 --> 00:17:11,510
map a certain state to a certain URL so

343
00:17:11,510 --> 00:17:13,400
i want to say if the URL ever looks like

344
00:17:13,400 --> 00:17:17,150
/ word that's the page and i want a

345
00:17:17,150 --> 00:17:30,480
default page value of home

346
00:17:30,490 --> 00:17:35,130
so with that when I want to check the

347
00:17:35,130 --> 00:17:37,780
applications view models page state at

348
00:17:37,780 --> 00:17:40,540
page property and if it's i think i'm

349
00:17:40,540 --> 00:17:44,140
going to do if it's chat so if the page

350
00:17:44,140 --> 00:17:46,600
property is chat what i want to do is

351
00:17:46,600 --> 00:17:51,970
progressively load the chat module so

352
00:17:51,970 --> 00:17:53,950
i'm going to use a can import and this

353
00:17:53,950 --> 00:17:56,230
is to me the coolest stuff that done Jas

354
00:17:56,230 --> 00:18:00,610
does or nobody else does this i can say

355
00:18:00,610 --> 00:18:02,380
i want to progressively import that chat

356
00:18:02,380 --> 00:18:05,230
messages module and inside that custom

357
00:18:05,230 --> 00:18:07,090
element it's rendered with the promise

358
00:18:07,090 --> 00:18:09,700
of that module loading so i can check

359
00:18:09,700 --> 00:18:12,309
all that module is being progressively

360
00:18:12,309 --> 00:18:15,059
loaded i want to write to the user

361
00:18:15,059 --> 00:18:22,300
loading and then once it's resolved once

362
00:18:22,300 --> 00:18:23,830
we actually have that module in the page

363
00:18:23,830 --> 00:18:28,570
i want to write i can actually use the

364
00:18:28,570 --> 00:18:31,570
chat custom element i can put it in the

365
00:18:31,570 --> 00:18:38,710
page so i'll close the tag and i'm going

366
00:18:38,710 --> 00:18:40,720
to do something very gonna assume if the

367
00:18:40,720 --> 00:18:43,240
page for this app isn't chat it's going

368
00:18:43,240 --> 00:18:45,040
to be the home page and i'm just gonna

369
00:18:45,040 --> 00:18:54,230
kind of copy and paste this code

370
00:18:54,240 --> 00:18:57,160
one really cool thing about done j/s is

371
00:18:57,160 --> 00:18:58,870
that it's build system actually picks up

372
00:18:58,870 --> 00:19:00,630
on these and we'll build individual

373
00:19:00,630 --> 00:19:03,070
modules for every single different page

374
00:19:03,070 --> 00:19:05,710
because it can actually see these and

375
00:19:05,710 --> 00:19:07,990
identify oh I need to build a separate

376
00:19:07,990 --> 00:19:09,700
bundle for messages in a separate bundle

377
00:19:09,700 --> 00:19:14,830
for everything home component loads so

378
00:19:14,830 --> 00:19:16,690
with that now I can go back and forth

379
00:19:16,690 --> 00:19:19,620
between these two pages and it's

380
00:19:19,620 --> 00:19:22,090
progressive loading just what's needed

381
00:19:22,090 --> 00:19:26,890
when it's needed so now I'm going to

382
00:19:26,890 --> 00:19:28,210
finish the messages page so we can

383
00:19:28,210 --> 00:19:31,540
actually create messages so this is what

384
00:19:31,540 --> 00:19:34,860
we want to be able to type a message and

385
00:19:34,860 --> 00:19:44,090
actually get it foot in the page oh

386
00:19:44,100 --> 00:19:52,950
sorry I should have to replay that sorry

387
00:19:52,950 --> 00:19:55,240
forgot the vid it's not letting me

388
00:19:55,240 --> 00:19:57,460
unfortunately control the video in here

389
00:19:57,460 --> 00:19:59,430
I'm not sure why maybe because it's

390
00:19:59,430 --> 00:20:04,510
screen sharing so the way to do this is

391
00:20:04,510 --> 00:20:07,270
you create a model with what we call

392
00:20:07,270 --> 00:20:09,520
super model because done Jessa's models

393
00:20:09,520 --> 00:20:11,500
andale real time automatically they

394
00:20:11,500 --> 00:20:13,180
handle have a fall through cash that

395
00:20:13,180 --> 00:20:16,570
hits local storage which is really cool

396
00:20:16,570 --> 00:20:19,390
technique if you've never used it but

397
00:20:19,390 --> 00:20:20,530
I'm not gonna have time to go into it

398
00:20:20,530 --> 00:20:22,930
today is I'm going to generate a super

399
00:20:22,930 --> 00:20:25,300
message supermodel and I'm going to save

400
00:20:25,300 --> 00:20:27,280
the I have a restful end point I wanted

401
00:20:27,280 --> 00:20:34,510
to connect to and give it the unique ID

402
00:20:34,510 --> 00:20:37,420
of the data type and I'll generate some

403
00:20:37,420 --> 00:20:39,720
tests and the fixture so we can simulate

404
00:20:39,720 --> 00:20:42,370
without a service if we didn't have one

405
00:20:42,370 --> 00:20:44,050
but we do have one and it generates a

406
00:20:44,050 --> 00:20:48,190
file like this can j has kind of split

407
00:20:48,190 --> 00:20:50,920
its model logic into the connection part

408
00:20:50,920 --> 00:20:52,750
and actually the type definition so

409
00:20:52,750 --> 00:20:54,040
that's why there's a type definition on

410
00:20:54,040 --> 00:20:56,170
top and a connection below where we

411
00:20:56,170 --> 00:21:01,090
connect that data type to a to a URL and

412
00:21:01,090 --> 00:21:02,920
finally see this tag this custom tag

413
00:21:02,920 --> 00:21:04,450
message model that's actually make a

414
00:21:04,450 --> 00:21:07,120
custom element called message model that

415
00:21:07,120 --> 00:21:07,660
we can

416
00:21:07,660 --> 00:21:11,200
choose to retrieve data so I'm going to

417
00:21:11,200 --> 00:21:13,060
actually use that custom element to get

418
00:21:13,060 --> 00:21:15,930
a list of all messages on the server

419
00:21:15,930 --> 00:21:18,250
first to do that I'd actually need to

420
00:21:18,250 --> 00:21:20,950
import that module into my template

421
00:21:20,950 --> 00:21:31,360
again we can't import so i'll use that

422
00:21:31,360 --> 00:21:32,980
message model custom element that's

423
00:21:32,980 --> 00:21:35,470
using our supermodel behind the scenes

424
00:21:35,470 --> 00:21:40,180
to get a list of all data and that class

425
00:21:40,180 --> 00:21:43,780
is there just for bootstrap make sure

426
00:21:43,780 --> 00:21:45,480
everything looks nice for bootstrap and

427
00:21:45,480 --> 00:21:49,030
the content of this element is rendered

428
00:21:49,030 --> 00:21:51,370
with a promise that represents the data

429
00:21:51,370 --> 00:21:52,840
that's being resolved and I could do

430
00:21:52,840 --> 00:21:54,970
that is pending is resolved is rejected

431
00:21:54,970 --> 00:21:57,340
but I'm not instead I'm just once the

432
00:21:57,340 --> 00:21:58,960
value there is a value that's resolved

433
00:21:58,960 --> 00:22:01,210
I'm gonna go through every item and i'm

434
00:22:01,210 --> 00:22:11,620
just going to list each message so each

435
00:22:11,620 --> 00:22:15,400
message has a name and a body so I'm

436
00:22:15,400 --> 00:22:22,840
just listing each name body and then if

437
00:22:22,840 --> 00:22:24,460
there are no messages i'm just going to

438
00:22:24,460 --> 00:22:26,440
do an else case and say there no

439
00:22:26,440 --> 00:22:36,490
messages so with this that's everything

440
00:22:36,490 --> 00:22:39,040
we needed to actually be able to list

441
00:22:39,040 --> 00:22:42,360
messages from the server which is cool

442
00:22:42,360 --> 00:22:45,850
no javascript is HTML that we had a

443
00:22:45,850 --> 00:22:50,020
right so the next thing i want to make

444
00:22:50,020 --> 00:22:52,300
the form actually able to create

445
00:22:52,300 --> 00:22:58,750
messages so i'm gonna create a form with

446
00:22:58,750 --> 00:23:01,630
a three in two inputs one for the name

447
00:23:01,630 --> 00:23:05,950
one for the body and one for a submit

448
00:23:05,950 --> 00:23:08,050
button and i'm just going to add all the

449
00:23:08,050 --> 00:23:12,100
bootstrap stuff around it so make sure

450
00:23:12,100 --> 00:23:17,430
bootstrap lines up everything nicely and

451
00:23:17,440 --> 00:23:20,870
I'm going to two-way bind my inputs

452
00:23:20,870 --> 00:23:24,830
value to my view model which we'll see

453
00:23:24,830 --> 00:23:26,929
in a second view model of this templates

454
00:23:26,929 --> 00:23:30,470
its name property so this is what to a

455
00:23:30,470 --> 00:23:35,299
bindings look like in done Jes and if

456
00:23:35,299 --> 00:23:37,250
you if you hate to a bindings because

457
00:23:37,250 --> 00:23:39,440
you're a big fan of react you can not do

458
00:23:39,440 --> 00:23:40,610
it with two-way bindings you can do the

459
00:23:40,610 --> 00:23:42,080
exact same kind of architectural stuff

460
00:23:42,080 --> 00:23:48,289
if you want to waste your time so here's

461
00:23:48,289 --> 00:23:50,919
the here's the two-way binding for the

462
00:23:50,919 --> 00:23:58,039
input binding to the body and here's a

463
00:23:58,039 --> 00:24:03,620
submit button and the final thing I need

464
00:24:03,620 --> 00:24:05,510
is that when we actually submit the form

465
00:24:05,510 --> 00:24:08,750
i need to call a method on my view model

466
00:24:08,750 --> 00:24:11,270
so i'm going to call this how you listen

467
00:24:11,270 --> 00:24:13,190
to events on submit you want to call

468
00:24:13,190 --> 00:24:16,309
send with the event so that we can

469
00:24:16,309 --> 00:24:19,190
prevent the foul tip so this is what my

470
00:24:19,190 --> 00:24:21,860
view model looks like and my component

471
00:24:21,860 --> 00:24:23,690
which kind of connects the view model to

472
00:24:23,690 --> 00:24:26,330
the template and i'm just going to

473
00:24:26,330 --> 00:24:29,480
create that send message and this isn't

474
00:24:29,480 --> 00:24:33,590
raining es6 so the first thing I'm gonna

475
00:24:33,590 --> 00:24:35,600
do is prevent default then what my form

476
00:24:35,600 --> 00:24:40,520
submitted and then i'm going to import

477
00:24:40,520 --> 00:24:47,570
my my supermodel my message is model

478
00:24:47,580 --> 00:24:49,750
so that I can use that to actually

479
00:24:49,750 --> 00:24:52,990
create data and persist it to the

480
00:24:52,990 --> 00:24:56,860
restful service so here I just create a

481
00:24:56,860 --> 00:24:58,930
new message and I'll create a message

482
00:24:58,930 --> 00:25:01,630
with a name and body that come from the

483
00:25:01,630 --> 00:25:05,800
view model but read things from the new

484
00:25:05,800 --> 00:25:10,450
model use just I happen and then I'll

485
00:25:10,450 --> 00:25:12,760
save this to the server and then when

486
00:25:12,760 --> 00:25:15,820
the server has successfully responded i

487
00:25:15,820 --> 00:25:19,690
will i'll just update the body remove

488
00:25:19,690 --> 00:25:21,580
the text of the body so the user can

489
00:25:21,580 --> 00:25:32,950
enter another message

490
00:25:32,960 --> 00:25:42,890
and with that you can create messages so

491
00:25:42,890 --> 00:25:45,620
a really good observer would be very

492
00:25:45,620 --> 00:25:48,080
surprised by what just happened right

493
00:25:48,080 --> 00:25:51,440
there somehow with no code that new

494
00:25:51,440 --> 00:25:53,090
message got put into the list of

495
00:25:53,090 --> 00:25:55,820
messages how I didn't write any code

496
00:25:55,820 --> 00:25:58,100
that did that well it's with set logic

497
00:25:58,100 --> 00:26:00,020
and I might have time to explain it i

498
00:26:00,020 --> 00:26:05,059
don't think i will actually um so i'm

499
00:26:05,059 --> 00:26:07,159
gonna show it i do real time real quick

500
00:26:07,159 --> 00:26:16,870
which is really easy so to do real time

501
00:26:16,870 --> 00:26:20,210
you set logic to kind of automatically

502
00:26:20,210 --> 00:26:22,070
manage the list that you've loaded and

503
00:26:22,070 --> 00:26:24,399
know how to add things and remove them

504
00:26:24,399 --> 00:26:26,539
but it's really easy to integrate with

505
00:26:26,539 --> 00:26:28,460
i'm gonna install steel socket i/o but

506
00:26:28,460 --> 00:26:29,840
it's really just socket i/o with a

507
00:26:29,840 --> 00:26:32,090
rapper that makes it not run when you're

508
00:26:32,090 --> 00:26:35,450
doing server-side rendering you can use

509
00:26:35,450 --> 00:26:36,799
the normal socket i/o you just have to

510
00:26:36,799 --> 00:26:38,120
make sure you have ifs to make sure

511
00:26:38,120 --> 00:26:41,149
don't do this on when you're running all

512
00:26:41,149 --> 00:26:44,840
this code on the server but if you don't

513
00:26:44,840 --> 00:26:45,890
want to do that you could just use steel

514
00:26:45,890 --> 00:26:54,510
socket i/o and all you have to do is

515
00:26:54,520 --> 00:26:56,840
especially if you forevers here on the

516
00:26:56,840 --> 00:26:58,460
last talk you know that like there can

517
00:26:58,460 --> 00:26:59,960
be a lot of different ways to update a

518
00:26:59,960 --> 00:27:03,860
client cool thing about done Jes is it

519
00:27:03,860 --> 00:27:06,200
doesn't matter how what mechanism you're

520
00:27:06,200 --> 00:27:07,520
using to actually update the client

521
00:27:07,520 --> 00:27:09,860
socket i/o anything as long as you can

522
00:27:09,860 --> 00:27:12,590
call the connect message connection and

523
00:27:12,590 --> 00:27:14,320
tell it when something is updated

524
00:27:14,320 --> 00:27:19,220
deleted or created we will update all

525
00:27:19,220 --> 00:27:21,919
the lists for you automatically so

526
00:27:21,919 --> 00:27:23,510
that's what I'm doing he right here I've

527
00:27:23,510 --> 00:27:25,370
created my socket connection I'm

528
00:27:25,370 --> 00:27:27,020
listening on when it's messages are

529
00:27:27,020 --> 00:27:28,820
created and I'm just calling message

530
00:27:28,820 --> 00:27:31,370
connection create instance with raw data

531
00:27:31,370 --> 00:27:45,740
and the system handles everything else

532
00:27:45,750 --> 00:27:48,400
so when message is created i'm going to

533
00:27:48,400 --> 00:27:50,230
create messages are updated i'm an

534
00:27:50,230 --> 00:27:52,210
update and when messages are removed i'm

535
00:27:52,210 --> 00:28:02,530
at all destroy instance and i can open

536
00:28:02,530 --> 00:28:06,300
up to browser windows and have them chat

537
00:28:06,300 --> 00:28:08,650
I'll just going to skip this just take

538
00:28:08,650 --> 00:28:10,540
well it'll show it but I so want you to

539
00:28:10,540 --> 00:28:25,180
talk about everything

540
00:28:25,190 --> 00:28:27,929
work school so this works with real-time

541
00:28:27,929 --> 00:28:30,389
behavior I don't have time to really go

542
00:28:30,389 --> 00:28:32,809
into it but the short answer is

543
00:28:32,809 --> 00:28:38,630
essentially we store only when necessary

544
00:28:38,630 --> 00:28:41,039
we know what parameters were used to

545
00:28:41,039 --> 00:28:44,039
request data and we know and we can look

546
00:28:44,039 --> 00:28:46,259
at when new data comes in or is

547
00:28:46,259 --> 00:28:48,659
destroyed and we can see which lists it

548
00:28:48,659 --> 00:28:50,490
belongs to based on the parameters used

549
00:28:50,490 --> 00:28:54,419
to retrieve those lists it's pretty I

550
00:28:54,419 --> 00:28:56,759
think innovative way of getting real

551
00:28:56,759 --> 00:29:00,840
time for free don't have time to really

552
00:29:00,840 --> 00:29:03,179
show how it works right now so next I'm

553
00:29:03,179 --> 00:29:04,799
going to finish the homepage and I'm

554
00:29:04,799 --> 00:29:06,029
actually going to skip that too because

555
00:29:06,029 --> 00:29:08,190
of time which I just going to add a chat

556
00:29:08,190 --> 00:29:11,580
widget to but not important now I'm

557
00:29:11,580 --> 00:29:19,350
going to show how to build this actually

558
00:29:19,350 --> 00:29:23,250
so when done j/s apps okay I'm actually

559
00:29:23,250 --> 00:29:26,549
to skip the build just done GS is able

560
00:29:26,549 --> 00:29:28,320
to do this thing where it figures out

561
00:29:28,320 --> 00:29:31,139
your dependencies and or your which

562
00:29:31,139 --> 00:29:32,580
pages are loading like I already talked

563
00:29:32,580 --> 00:29:35,820
about and build highly optimized bundles

564
00:29:35,820 --> 00:29:37,350
for each page now some people might be

565
00:29:37,350 --> 00:29:39,120
thinking like web pack already does this

566
00:29:39,120 --> 00:29:41,669
it doesn't do what this does we're able

567
00:29:41,669 --> 00:29:44,759
to like balance caching versus

568
00:29:44,759 --> 00:29:46,649
dependency or number of scripts that

569
00:29:46,649 --> 00:29:49,620
have to load with this cool waste

570
00:29:49,620 --> 00:29:51,659
function but another talk for another

571
00:29:51,659 --> 00:29:54,149
day let's say we got our build to work

572
00:29:54,149 --> 00:29:57,269
which is one step just done JS build you

573
00:29:57,269 --> 00:30:01,259
want to push that to a CDN don't chase

574
00:30:01,259 --> 00:30:02,549
makes this really easy i'm going to use

575
00:30:02,549 --> 00:30:05,730
firebase as an example if you sign up

576
00:30:05,730 --> 00:30:15,540
for firebase

577
00:30:15,550 --> 00:30:18,230
you can create a new firebase account

578
00:30:18,230 --> 00:30:20,420
and in a container for your application

579
00:30:20,420 --> 00:30:23,690
so this is solving me your code

580
00:30:23,690 --> 00:30:25,160
downloading your coat you want to

581
00:30:25,160 --> 00:30:26,900
download your code faster you want your

582
00:30:26,900 --> 00:30:29,540
users to download code from a CDN this

583
00:30:29,540 --> 00:30:32,330
is how easy it is with done j/s create a

584
00:30:32,330 --> 00:30:37,700
new container on firebase and then all

585
00:30:37,700 --> 00:30:42,290
you have to do is specify the Dungey has

586
00:30:42,290 --> 00:30:43,520
to get the fill out the Dungey has

587
00:30:43,520 --> 00:30:59,680
deployed configuration

588
00:30:59,690 --> 00:31:02,279
so this is what the configuration for

589
00:31:02,279 --> 00:31:03,990
firebase looks like it's kind of not

590
00:31:03,990 --> 00:31:05,130
something you could come up with on your

591
00:31:05,130 --> 00:31:08,940
own but they're documented so I just

592
00:31:08,940 --> 00:31:11,789
give the name of my app and then there's

593
00:31:11,789 --> 00:31:13,140
one other piece of configuration you

594
00:31:13,140 --> 00:31:19,320
have to change which is when you're

595
00:31:19,320 --> 00:31:21,179
doing server-side rendering you need to

596
00:31:21,179 --> 00:31:23,309
make sure that all the JavaScript of the

597
00:31:23,309 --> 00:31:25,140
script tags instead of pointing like

598
00:31:25,140 --> 00:31:27,419
from localhost or whatever whatever the

599
00:31:27,419 --> 00:31:29,270
current server is they need a point at

600
00:31:29,270 --> 00:31:32,490
Heroku so you give you change the base

601
00:31:32,490 --> 00:31:38,940
URL for when you're in that one mode so

602
00:31:38,940 --> 00:31:41,250
this is one nice feature done jess's how

603
00:31:41,250 --> 00:31:42,809
it helps manage you through like

604
00:31:42,809 --> 00:31:44,880
development to production life cycles

605
00:31:44,880 --> 00:31:48,720
and with that you just run your build

606
00:31:48,720 --> 00:31:51,210
and this is that high performance build

607
00:31:51,210 --> 00:31:52,980
where it kind of figures out every page

608
00:31:52,980 --> 00:31:56,850
and try some bundle things perfectly so

609
00:31:56,850 --> 00:31:58,799
you just downloading what you need but

610
00:31:58,799 --> 00:32:03,990
not a million scripts and then I ran the

611
00:32:03,990 --> 00:32:06,270
Dungey has deploy and that just pushed

612
00:32:06,270 --> 00:32:08,929
everything to firebase I can start my

613
00:32:08,929 --> 00:32:13,289
done GS server in development first our

614
00:32:13,289 --> 00:32:16,679
introduction and Rhys load my page and

615
00:32:16,679 --> 00:32:21,200
now we get nine combined CSS image and

616
00:32:21,200 --> 00:32:24,419
script requests and you can see they're

617
00:32:24,419 --> 00:32:29,669
all loading from firebase cool ok so at

618
00:32:29,669 --> 00:32:31,890
this point we have that very fast app

619
00:32:31,890 --> 00:32:34,080
that server-side rendered has hot model

620
00:32:34,080 --> 00:32:35,370
swapping all the cool stuff something to

621
00:32:35,370 --> 00:32:39,330
be very proud of but there's two other

622
00:32:39,330 --> 00:32:41,970
things done j/s does it can build to iOS

623
00:32:41,970 --> 00:32:45,570
and Android and build to desktop so I'm

624
00:32:45,570 --> 00:32:47,010
going to show that off real quick and

625
00:32:47,010 --> 00:32:53,309
then I'm done so to build to iOS to take

626
00:32:53,309 --> 00:32:55,700
this application and build at iOS I'm

627
00:32:55,700 --> 00:32:59,100
going to install the iOS simulator so

628
00:32:59,100 --> 00:33:05,270
you guys can actually see it work

629
00:33:05,280 --> 00:33:09,370
and this is using cordova and then i'm

630
00:33:09,370 --> 00:33:13,870
going to run npm ad chord on Jas ad

631
00:33:13,870 --> 00:33:17,110
cordova so this will just add cordova

632
00:33:17,110 --> 00:33:18,790
but it'll also rewrite the build script

633
00:33:18,790 --> 00:33:20,830
so it knows how to bundle up all those

634
00:33:20,830 --> 00:33:22,930
JavaScript files and put them in a

635
00:33:22,930 --> 00:33:31,840
Cordova applications and I'll ask you

636
00:33:31,840 --> 00:33:35,650
some questions at cordova once so we

637
00:33:35,650 --> 00:33:37,059
want to build for iOS because i'm on a

638
00:33:37,059 --> 00:33:39,910
mac you can build to any of the other

639
00:33:39,910 --> 00:33:41,559
platforms provide you have the right

640
00:33:41,559 --> 00:33:54,649
computer

641
00:33:54,659 --> 00:33:56,849
and then you just run Dungey as build

642
00:33:56,849 --> 00:33:59,190
and it changed the build script so if

643
00:33:59,190 --> 00:34:01,049
you write Dungey has build Cordova it

644
00:34:01,049 --> 00:34:03,359
will build your whatever Cordova you

645
00:34:03,359 --> 00:34:06,749
configured to build so it's going to run

646
00:34:06,749 --> 00:34:10,349
the build again and then ship that off

647
00:34:10,349 --> 00:34:15,299
to Cordova and actually launch the

648
00:34:15,299 --> 00:34:24,179
simulator so you can see it running cool

649
00:34:24,179 --> 00:34:26,879
I'm going to skip over showing the two

650
00:34:26,879 --> 00:34:28,319
things chatting because now i just want

651
00:34:28,319 --> 00:34:34,909
to show desktop and why did it too fast

652
00:34:34,909 --> 00:34:37,559
desktop is even easier i'm going to i'm

653
00:34:37,559 --> 00:34:41,579
using n wjs to build a desktop app so

654
00:34:41,579 --> 00:34:47,039
I'm going to add done GS add NW this

655
00:34:47,039 --> 00:34:49,309
will rewrite the build script again

656
00:34:49,309 --> 00:34:57,119
install some of NWS dependencies again

657
00:34:57,119 --> 00:35:00,150
all this stuff works on linux mac and

658
00:35:00,150 --> 00:35:05,819
windows a lot of testing there so the

659
00:35:05,819 --> 00:35:07,380
only thing you have to be wary of with

660
00:35:07,380 --> 00:35:09,240
NW is not all of their versions support

661
00:35:09,240 --> 00:35:12,510
every version of mac and like two ppl

662
00:35:12,510 --> 00:35:14,099
actually build a mac app so that's why i

663
00:35:14,099 --> 00:35:18,539
put in 0 1 2 3 because their latest

664
00:35:18,539 --> 00:35:19,890
version doesn't actually support

665
00:35:19,890 --> 00:35:22,020
building come back at least not at the

666
00:35:22,020 --> 00:35:23,910
time where i'm in this video which is

667
00:35:23,910 --> 00:35:29,490
like two weeks ago so i wrote the

668
00:35:29,490 --> 00:35:30,839
platform's i want to support in the

669
00:35:30,839 --> 00:35:33,599
height of our application and now having

670
00:35:33,599 --> 00:35:37,740
done that I just run done j/s build and

671
00:35:37,740 --> 00:35:41,460
W then NW is really cool that it only

672
00:35:41,460 --> 00:35:43,319
the first time you run it it downloads a

673
00:35:43,319 --> 00:35:45,180
lot of its dependencies which is really

674
00:35:45,180 --> 00:35:47,130
nice so if you're not having to not

675
00:35:47,130 --> 00:35:49,740
everybody on your team who's not built

676
00:35:49,740 --> 00:35:51,299
if they're not building NW app they

677
00:35:51,299 --> 00:35:53,579
don't have to like install it when

678
00:35:53,579 --> 00:35:54,839
they're just trying to work on some the

679
00:35:54,839 --> 00:35:58,430
jet with a web part

680
00:35:58,440 --> 00:36:01,900
so then I'm just going to made those

681
00:36:01,900 --> 00:36:03,940
builds those executables I'm going to

682
00:36:03,940 --> 00:36:08,799
open them and I get my desktop app and

683
00:36:08,799 --> 00:36:13,480
then I can pull up the web app and the

684
00:36:13,480 --> 00:36:17,650
iOS app and then I can have them all

685
00:36:17,650 --> 00:36:28,609
chatting together

686
00:36:28,619 --> 00:36:38,020
one big steps up to one big Capitan

687
00:36:38,030 --> 00:36:41,660
so we have enough so part of the reason

688
00:36:41,660 --> 00:36:43,550
why we built like I said built on jess's

689
00:36:43,550 --> 00:36:45,320
like I wanted an application like a one

690
00:36:45,320 --> 00:36:47,120
of the framework we could take you

691
00:36:47,120 --> 00:36:49,600
through everything that you needed to do

692
00:36:49,600 --> 00:36:52,010
so we have a more comprehensive guide

693
00:36:52,010 --> 00:36:53,720
that actually walks through setting up

694
00:36:53,720 --> 00:36:58,670
tests documentation like continuous

695
00:36:58,670 --> 00:37:01,400
integration continuous deploys really

696
00:37:01,400 --> 00:37:02,810
good to look at for more information

697
00:37:02,810 --> 00:37:05,270
there's so much in done Jes that I could

698
00:37:05,270 --> 00:37:08,480
spend hours on it but it's all actually

699
00:37:08,480 --> 00:37:10,220
pretty well documented the features and

700
00:37:10,220 --> 00:37:11,780
why they're important you can go to the

701
00:37:11,780 --> 00:37:15,350
website I'm doing like free trainings

702
00:37:15,350 --> 00:37:18,050
all across the u.s. that's it thank you

