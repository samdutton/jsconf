1
00:00:15,260 --> 00:00:18,320

my name is accelerometer and Yuki down

2
00:00:18,320 --> 00:00:21,200
here you can see the URL of the slides

3
00:00:21,200 --> 00:00:23,420
so you can download those if you want to

4
00:00:23,420 --> 00:00:26,810
and the URL is not just here it's at the

5
00:00:26,810 --> 00:00:29,900
bottom of every slide down here so you

6
00:00:29,900 --> 00:00:31,720
can't miss it

7
00:00:31,720 --> 00:00:35,360
what will you learn if you make it

8
00:00:35,360 --> 00:00:40,870
through to the end of this talk first

9
00:00:40,870 --> 00:00:43,640
let's look at the snippet and I'm

10
00:00:43,640 --> 00:00:47,090
guessing that most of you have written

11
00:00:47,090 --> 00:00:51,380
similar code and it's ugly can we do

12
00:00:51,380 --> 00:00:55,400
better yes we can and in this talk I'm

13
00:00:55,400 --> 00:00:58,160
gonna look at a library for echo script

14
00:00:58,160 --> 00:01:01,730
5 that is going to be purely object

15
00:01:01,730 --> 00:01:02,900
based there not going to be any

16
00:01:02,900 --> 00:01:06,079
functions and that will make things very

17
00:01:06,079 --> 00:01:06,560
pretty

18
00:01:06,560 --> 00:01:11,600
and we're also gonna look at echo script

19
00:01:11,600 --> 00:01:15,409
6 that brings a lot of very cool goodies

20
00:01:15,409 --> 00:01:17,899
with it so we have classes and you have

21
00:01:17,899 --> 00:01:24,619
even more let's first take a very quick

22
00:01:24,619 --> 00:01:27,200
look at the JavaScript inheritance

23
00:01:27,200 --> 00:01:31,579
basics and you should already know those

24
00:01:31,579 --> 00:01:35,060
basics but it never harms to take

25
00:01:35,060 --> 00:01:38,990
another look in class-based languages

26
00:01:38,990 --> 00:01:42,139
you have two relationships you have the

27
00:01:42,139 --> 00:01:45,049
instance of relationship between classes

28
00:01:45,049 --> 00:01:48,259
and instances and you have the subclass

29
00:01:48,259 --> 00:01:51,819
of relationship between classes and

30
00:01:51,819 --> 00:01:55,569
JavaScript makes do with only one

31
00:01:55,569 --> 00:02:00,349
relationship and with only objects so

32
00:02:00,349 --> 00:02:02,029
you only have the house prototype

33
00:02:02,029 --> 00:02:04,639
relationship and that relationship is

34
00:02:04,639 --> 00:02:09,890
always between two objects so this is

35
00:02:09,890 --> 00:02:11,599
what it looks like if you use a

36
00:02:11,599 --> 00:02:14,510
constructor to create an instance you

37
00:02:14,510 --> 00:02:17,360
get this kind of this structure that's

38
00:02:17,360 --> 00:02:21,590
depicted here you have a person and a

39
00:02:21,590 --> 00:02:25,099
person has been created by the

40
00:02:25,099 --> 00:02:27,730
constructor person the constructor

41
00:02:27,730 --> 00:02:29,240
points

42
00:02:29,240 --> 00:02:33,110
- its prototype and the prototype by

43
00:02:33,110 --> 00:02:36,710
default points back to its constructor

44
00:02:36,710 --> 00:02:39,920
and then you have the Haas prototype

45
00:02:39,920 --> 00:02:41,620
relationship between the instance and

46
00:02:41,620 --> 00:02:47,840
the prototype things get more tricky as

47
00:02:47,840 --> 00:02:52,340
soon as you use subtyping then you have

48
00:02:52,340 --> 00:02:55,610
a lot more wiring you have a relatively

49
00:02:55,610 --> 00:02:57,940
feeble relationship between a

50
00:02:57,940 --> 00:03:00,410
constructor between the constructor and

51
00:03:00,410 --> 00:03:04,100
the super constructor but you especially

52
00:03:04,100 --> 00:03:06,890
have a Haas prototype relationship

53
00:03:06,890 --> 00:03:08,300
between the prototypes which is

54
00:03:08,300 --> 00:03:11,870
interesting and obviously again you have

55
00:03:11,870 --> 00:03:14,960
the instance and thanks to this house

56
00:03:14,960 --> 00:03:18,050
prototype relationship employee

57
00:03:18,050 --> 00:03:21,440
prototype gets all the methods from

58
00:03:21,440 --> 00:03:25,490
person to prototype and thus you have

59
00:03:25,490 --> 00:03:31,430
the the typical subtyping thing next

60
00:03:31,430 --> 00:03:33,410
object exam + that's the library I

61
00:03:33,410 --> 00:03:37,310
alluded to at the beginning javascript

62
00:03:37,310 --> 00:03:40,610
has several kinds of object factories

63
00:03:40,610 --> 00:03:44,480
two examples are you can produce an

64
00:03:44,480 --> 00:03:47,630
instance via a function and those

65
00:03:47,630 --> 00:03:49,820
functions are there's other

66
00:03:49,820 --> 00:03:51,500
possibilities those functions are

67
00:03:51,500 --> 00:03:54,950
usually the Constructors other than that

68
00:03:54,950 --> 00:04:00,200
you have objects and you can use those

69
00:04:00,200 --> 00:04:03,410
and object create to produce an instance

70
00:04:03,410 --> 00:04:08,030
- but then the question arises how do we

71
00:04:08,030 --> 00:04:11,060
call all of that what's the the common

72
00:04:11,060 --> 00:04:13,310
word for what's going on what's what's a

73
00:04:13,310 --> 00:04:15,860
good word for object Factory and Alan

74
00:04:15,860 --> 00:04:19,820
where sprach one of the tc39 people he

75
00:04:19,820 --> 00:04:22,790
suggested the term exemplar and if you

76
00:04:22,790 --> 00:04:24,980
use that term then you can call

77
00:04:24,980 --> 00:04:27,470
constructors function exemplars and

78
00:04:27,470 --> 00:04:30,080
whatever is going on here you can call

79
00:04:30,080 --> 00:04:36,890
that object exemplars so let's look at

80
00:04:36,890 --> 00:04:40,630
two examples this is the almost

81
00:04:40,630 --> 00:04:43,110
canonical example of a person

82
00:04:43,110 --> 00:04:45,850
you have the constructor function and

83
00:04:45,850 --> 00:04:49,930
you have the prototype and to create an

84
00:04:49,930 --> 00:04:54,130
instance let's call the instance Joe and

85
00:04:54,130 --> 00:04:58,150
this is kind of wrong name so should be

86
00:04:58,150 --> 00:04:59,740
called Joe but doesn't matter

87
00:04:59,740 --> 00:05:03,730
inconsistent data if you create an

88
00:05:03,730 --> 00:05:07,090
instance then you use the new operator

89
00:05:07,090 --> 00:05:09,970
and that's like the standard way of

90
00:05:09,970 --> 00:05:12,580
doing it but you can also create the

91
00:05:12,580 --> 00:05:17,410
exact same instance by just using an

92
00:05:17,410 --> 00:05:19,720
object if you use object.create you

93
00:05:19,720 --> 00:05:23,230
create a fresh object whose prototype is

94
00:05:23,230 --> 00:05:25,390
person dot prototype then you have Joe

95
00:05:25,390 --> 00:05:29,920
who sometimes crossdressers and then to

96
00:05:29,920 --> 00:05:33,340
instance to instantiate to to fill that

97
00:05:33,340 --> 00:05:38,110
with data you invoke the constructor but

98
00:05:38,110 --> 00:05:43,180
you do so as a method and then what you

99
00:05:43,180 --> 00:05:47,260
end up with you have like the instance

100
00:05:47,260 --> 00:05:49,720
show you end up with is exactly the same

101
00:05:49,720 --> 00:05:52,330
as if you had created it by a new new

102
00:05:52,330 --> 00:06:00,220
person and then let's further examine

103
00:06:00,220 --> 00:06:03,040
function exemplars and there you have

104
00:06:03,040 --> 00:06:06,190
two main entities you have the

105
00:06:06,190 --> 00:06:08,970
constructor and you have its prototype

106
00:06:08,970 --> 00:06:13,080
what do those entities do the

107
00:06:13,080 --> 00:06:15,700
constructor is there for instantiation

108
00:06:15,700 --> 00:06:18,880
and the prototype is there for

109
00:06:18,880 --> 00:06:22,720
everything else so here are a few

110
00:06:22,720 --> 00:06:24,700
examples if you make an instance of

111
00:06:24,700 --> 00:06:27,940
check internally what you actually do is

112
00:06:27,940 --> 00:06:31,030
if you if we want to see is X and

113
00:06:31,030 --> 00:06:33,250
instance of see what you actually do is

114
00:06:33,250 --> 00:06:37,000
you check whether C dot prototype is in

115
00:06:37,000 --> 00:06:41,230
the prototype chain of X so there it's

116
00:06:41,230 --> 00:06:43,720
just the prototype that matters here

117
00:06:43,720 --> 00:06:46,480
again if you if you subtype if you

118
00:06:46,480 --> 00:06:48,490
create a sub constructor if you extend

119
00:06:48,490 --> 00:06:52,240
an existing constructor also what you

120
00:06:52,240 --> 00:06:56,230
mostly connect is the sub prototype with

121
00:06:56,230 --> 00:06:56,470
the

122
00:06:56,470 --> 00:07:00,570
super prototype if you do a super call

123
00:07:00,570 --> 00:07:03,340
obviously you need to refer to the super

124
00:07:03,340 --> 00:07:05,560
method via the prototype so it's again

125
00:07:05,560 --> 00:07:09,550
the prototype and if you use generic

126
00:07:09,550 --> 00:07:13,420
methods it's the same principle so what

127
00:07:13,420 --> 00:07:15,880
you have is prototype is used all the

128
00:07:15,880 --> 00:07:21,760
time the constructor only once but then

129
00:07:21,760 --> 00:07:25,390
you have to ask the question what do we

130
00:07:25,390 --> 00:07:27,220
need to construct us for why wouldn't

131
00:07:27,220 --> 00:07:31,630
things be neater if we only worked with

132
00:07:31,630 --> 00:07:34,720
the the prototypes and then we'd always

133
00:07:34,720 --> 00:07:37,900
have in we wouldn't have this relatively

134
00:07:37,900 --> 00:07:39,250
complicated wiring

135
00:07:39,250 --> 00:07:42,750
we'd only have a single very nice

136
00:07:42,750 --> 00:07:50,500
prototype chain and this is what such an

137
00:07:50,500 --> 00:07:52,990
approach would look if you created a

138
00:07:52,990 --> 00:07:56,260
noun and here everything is proper here

139
00:07:56,260 --> 00:07:59,710
you have Jane whose name is Jane and who

140
00:07:59,710 --> 00:08:03,100
has a title and that instance is an

141
00:08:03,100 --> 00:08:05,860
instance of its prototype of the

142
00:08:05,860 --> 00:08:08,470
employee and that prototype is a sub

143
00:08:08,470 --> 00:08:13,860
prototype of person and that object is

144
00:08:13,860 --> 00:08:19,030
again a prototype ee of the library

145
00:08:19,030 --> 00:08:24,880
object that contains kind of the it's

146
00:08:24,880 --> 00:08:27,430
kind of the metal object protocol up

147
00:08:27,430 --> 00:08:30,010
there so this is the library

148
00:08:30,010 --> 00:08:32,260
functionality and it is in and the neat

149
00:08:32,260 --> 00:08:35,440
thing is that that is inherited these

150
00:08:35,440 --> 00:08:39,250
are extend and new methods that you

151
00:08:39,250 --> 00:08:43,030
should be able to invoke on a type on an

152
00:08:43,030 --> 00:08:48,870
object exemplar extend says if I have an

153
00:08:48,870 --> 00:08:52,839
existing object exemplar such as person

154
00:08:52,839 --> 00:08:56,920
I want to extend it and new says I have

155
00:08:56,920 --> 00:08:59,140
an object exemplar such as say employee

156
00:08:59,140 --> 00:09:01,980
and I want to create an instance from it

157
00:09:01,980 --> 00:09:07,060
or of it so this kind of inheritance is

158
00:09:07,060 --> 00:09:09,760
neat because the whole library sits up

159
00:09:09,760 --> 00:09:11,730
here

160
00:09:11,730 --> 00:09:14,020
so this is what it looks like in code

161
00:09:14,020 --> 00:09:17,860
you see that person is created by

162
00:09:17,860 --> 00:09:21,880
extending proto and it it's basically it

163
00:09:21,880 --> 00:09:27,760
is the prototype and then you it has a

164
00:09:27,760 --> 00:09:30,190
constructor that sets up the instance it

165
00:09:30,190 --> 00:09:33,040
has a method and then you create the

166
00:09:33,040 --> 00:09:36,450
employee by extending person again

167
00:09:36,450 --> 00:09:39,160
prototype there's some weird stuff down

168
00:09:39,160 --> 00:09:42,660
here that we're gonna look at later and

169
00:09:42,660 --> 00:09:46,750
so that's it and I think that looks a

170
00:09:46,750 --> 00:09:50,290
lot nicer than the snippet we've seen at

171
00:09:50,290 --> 00:09:53,020
the beginning and it's easier to picture

172
00:09:53,020 --> 00:09:56,790
in your head - it's easier to visualize

173
00:09:56,790 --> 00:10:00,730
so this is how you use it and when it

174
00:10:00,730 --> 00:10:03,730
comes to creating an instance we're a

175
00:10:03,730 --> 00:10:08,589
bit tiny bit different we just call

176
00:10:08,589 --> 00:10:11,230
employee dot new we're whereas with

177
00:10:11,230 --> 00:10:14,620
function exemplars you would use the new

178
00:10:14,620 --> 00:10:19,020
operator and if we want to check whether

179
00:10:19,020 --> 00:10:24,579
Jane is an instance of employee what we

180
00:10:24,579 --> 00:10:27,820
do is we just check is employee in the

181
00:10:27,820 --> 00:10:32,200
prototype chain of Jane so really nice

182
00:10:32,200 --> 00:10:34,570
and and if you if you visualized this

183
00:10:34,570 --> 00:10:39,670
kind of the chain then just to find out

184
00:10:39,670 --> 00:10:42,520
is the object exemplar in the processor

185
00:10:42,520 --> 00:10:45,940
time chain that works very nicely I

186
00:10:45,940 --> 00:10:48,880
think afterwards after you've created

187
00:10:48,880 --> 00:10:52,060
the instance everything is the same you

188
00:10:52,060 --> 00:10:55,839
have a the same old instance of you can

189
00:10:55,839 --> 00:10:58,690
invoke methods on it so there nothing

190
00:10:58,690 --> 00:11:03,550
much changes how many lines of code do

191
00:11:03,550 --> 00:11:06,790
you think that is like raise your hands

192
00:11:06,790 --> 00:11:11,200
above 50 more than 50 lines of code less

193
00:11:11,200 --> 00:11:16,300
raise your hands less so it's

194
00:11:16,300 --> 00:11:20,140
the thing is that's everything so

195
00:11:20,140 --> 00:11:23,140
slightly cheated down here because if

196
00:11:23,140 --> 00:11:27,250
used proto here which we're gonna look

197
00:11:27,250 --> 00:11:31,029
at later but it's it's basically already

198
00:11:31,029 --> 00:11:33,790
there you don't need a lot of code and

199
00:11:33,790 --> 00:11:35,920
this whole idea of prototype chains

200
00:11:35,920 --> 00:11:38,860
that's very that's like an incredibly

201
00:11:38,860 --> 00:11:45,130
elegant core of JavaScript so let's look

202
00:11:45,130 --> 00:11:48,700
at Eggman script six next echo script

203
00:11:48,700 --> 00:11:52,779
six we'll have classes but those are

204
00:11:52,779 --> 00:11:55,779
classes by name only and I really like

205
00:11:55,779 --> 00:11:58,120
the the Brendan Eich video explaining

206
00:11:58,120 --> 00:12:01,990
the design of it the so what they're

207
00:12:01,990 --> 00:12:05,770
actually are is syntactic sugar for a

208
00:12:05,770 --> 00:12:07,570
constructor syntactic sugar for a

209
00:12:07,570 --> 00:12:10,060
function so in echo script six you're

210
00:12:10,060 --> 00:12:12,880
going to write class and some stuff

211
00:12:12,880 --> 00:12:16,240
behind it after it but what you get back

212
00:12:16,240 --> 00:12:18,640
is a function so it's only syntactic

213
00:12:18,640 --> 00:12:22,630
sugar but the benefits are quite

214
00:12:22,630 --> 00:12:26,130
impressive because you get ease of use

215
00:12:26,130 --> 00:12:28,589
especially when it comes to subtyping

216
00:12:28,589 --> 00:12:32,020
you get increased compatibility between

217
00:12:32,020 --> 00:12:36,910
frameworks and at the moment the kind of

218
00:12:36,910 --> 00:12:40,270
it's kind of a trend or or a rule that

219
00:12:40,270 --> 00:12:42,220
if you have a framework it usually comes

220
00:12:42,220 --> 00:12:45,279
with its own inheritance API and that's

221
00:12:45,279 --> 00:12:47,880
a bit sad but sometimes unavoidable and

222
00:12:47,880 --> 00:12:50,230
thanks to the increased compatibility

223
00:12:50,230 --> 00:12:53,410
tool support will be easier currently

224
00:12:53,410 --> 00:12:54,970
you have to little do a lot of tricks to

225
00:12:54,970 --> 00:12:59,649
get that and classes will be the

226
00:12:59,649 --> 00:13:02,040
foundation for future extensions and

227
00:13:02,040 --> 00:13:09,250
mix-ins are one example so this is what

228
00:13:09,250 --> 00:13:12,190
it looks like and curiously it looks

229
00:13:12,190 --> 00:13:16,660
almost like object exemplars very nice

230
00:13:16,660 --> 00:13:20,589
very clean syntax and what tremendously

231
00:13:20,589 --> 00:13:24,190
helps us is that we have the super

232
00:13:24,190 --> 00:13:27,459
keyword down here so this lengthy thing

233
00:13:27,459 --> 00:13:30,190
that we needed to call the soup

234
00:13:30,190 --> 00:13:32,380
method that is gone and all we have is

235
00:13:32,380 --> 00:13:35,560
super down here so that's very nice so

236
00:13:35,560 --> 00:13:39,970
let's look at that no not yet hmm let's

237
00:13:39,970 --> 00:13:44,430
look at how classes are translated the

238
00:13:44,430 --> 00:13:47,260
first this should be fairly

239
00:13:47,260 --> 00:13:48,070
straightforward

240
00:13:48,070 --> 00:13:50,470
you have a class person and that is

241
00:13:50,470 --> 00:13:52,420
translated to a constructor function and

242
00:13:52,420 --> 00:13:57,690
a prototype so far not that impressive

243
00:13:57,690 --> 00:13:59,790
but it gets better

244
00:13:59,790 --> 00:14:03,820
because here you exchange ugliness for

245
00:14:03,820 --> 00:14:06,640
beauty and everything is fairly compact

246
00:14:06,640 --> 00:14:09,400
and this is the scary snippet at the

247
00:14:09,400 --> 00:14:12,400
beginning and it's things are really a

248
00:14:12,400 --> 00:14:14,440
lot easier to understand all you do here

249
00:14:14,440 --> 00:14:16,720
you clearly see that employee extends

250
00:14:16,720 --> 00:14:19,720
person you have super and it's just a

251
00:14:19,720 --> 00:14:26,860
lot neater so now we look at super

252
00:14:26,860 --> 00:14:30,330
references how those work internally and

253
00:14:30,330 --> 00:14:35,670
you will have four ways of referencing

254
00:14:35,670 --> 00:14:40,990
super properties in eco script six to

255
00:14:40,990 --> 00:14:44,200
our two reference properties fairly

256
00:14:44,200 --> 00:14:47,680
obvious then you can call super methods

257
00:14:47,680 --> 00:14:51,370
but you can also omit the name of the

258
00:14:51,370 --> 00:14:53,350
method and then what's going to be

259
00:14:53,350 --> 00:14:54,970
filled in is the name of the current

260
00:14:54,970 --> 00:14:57,910
method so that allows you to it's a more

261
00:14:57,910 --> 00:15:03,500
concise way of calling the super method

262
00:15:03,510 --> 00:15:07,630
so this is how you currently do it if

263
00:15:07,630 --> 00:15:12,220
you wanna make a super call so super dot

264
00:15:12,220 --> 00:15:14,350
method becomes this whole lengthy thing

265
00:15:14,350 --> 00:15:19,050
here if you look at it more closely

266
00:15:19,050 --> 00:15:22,210
there are actually three steps that are

267
00:15:22,210 --> 00:15:25,630
performed step one is super constructed

268
00:15:25,630 --> 00:15:29,200
of prototype this is where the search

269
00:15:29,200 --> 00:15:32,980
for the property starts next is method

270
00:15:32,980 --> 00:15:35,320
that's the property we are looking for

271
00:15:35,320 --> 00:15:40,030
and we look for it in this object and in

272
00:15:40,030 --> 00:15:43,420
all of its prototypes

273
00:15:43,420 --> 00:15:47,570
lastly we invoke the method but we keep

274
00:15:47,570 --> 00:15:51,200
the current this and that's a bit

275
00:15:51,200 --> 00:15:53,660
counterintuitive initially maybe we'll

276
00:15:53,660 --> 00:15:57,860
see why it makes sense on the next slide

277
00:15:57,860 --> 00:16:03,380
so one thing we would like to do we

278
00:16:03,380 --> 00:16:05,990
would like to avoid avoid hard coding in

279
00:16:05,990 --> 00:16:09,350
step one the super constructed up

280
00:16:09,350 --> 00:16:11,300
prototype we don't want a hard code

281
00:16:11,300 --> 00:16:14,810
somewhere inside of the code what the

282
00:16:14,810 --> 00:16:18,200
super type is and to do that we

283
00:16:18,200 --> 00:16:20,089
introduce a special variable that's very

284
00:16:20,089 --> 00:16:22,820
similar to this and this special

285
00:16:22,820 --> 00:16:26,779
variable home object points to the home

286
00:16:26,779 --> 00:16:30,260
of the methods it points to the object

287
00:16:30,260 --> 00:16:32,420
where the current method is located in

288
00:16:32,420 --> 00:16:35,690
and if you use home object you start

289
00:16:35,690 --> 00:16:37,730
your search obviously in the prototype

290
00:16:37,730 --> 00:16:39,920
of the home object not in the home

291
00:16:39,920 --> 00:16:42,589
object itself you look for method just

292
00:16:42,589 --> 00:16:45,650
as before and you invoke it so what you

293
00:16:45,650 --> 00:16:49,610
have here this is internally this is the

294
00:16:49,610 --> 00:16:55,910
semantics of a super call and then you

295
00:16:55,910 --> 00:16:59,570
have here's an illustration just to look

296
00:16:59,570 --> 00:17:03,610
at it again what goes on you if

297
00:17:03,610 --> 00:17:06,860
described makes a super call you start

298
00:17:06,860 --> 00:17:09,620
your search in the prototype of the home

299
00:17:09,620 --> 00:17:15,199
object you look for the method described

300
00:17:15,199 --> 00:17:19,130
and when you call it that this that this

301
00:17:19,130 --> 00:17:21,860
method gets has to be the same place

302
00:17:21,860 --> 00:17:25,520
because this overridden method that gets

303
00:17:25,520 --> 00:17:28,730
called it has to have it has to have

304
00:17:28,730 --> 00:17:32,480
access to the instance properties so

305
00:17:32,480 --> 00:17:35,570
that is why this has to stay the same

306
00:17:35,570 --> 00:17:37,550
you don't want to lose that object down

307
00:17:37,550 --> 00:17:39,770
here you want to keep that that's where

308
00:17:39,770 --> 00:17:43,040
the instance data is and if a function

309
00:17:43,040 --> 00:17:45,950
up here accesses name or title you want

310
00:17:45,950 --> 00:17:47,890
to make sure that the method up here

311
00:17:47,890 --> 00:17:51,140
finds it and it has to find it via this

312
00:17:51,140 --> 00:17:56,690
so these two values are crucial

313
00:17:56,700 --> 00:17:58,530
then there's one remaining question

314
00:17:58,530 --> 00:18:01,710
where does the home object come form

315
00:18:01,710 --> 00:18:04,170
from if I say that it's a local variable

316
00:18:04,170 --> 00:18:07,380
how do we fill in that local variable

317
00:18:07,380 --> 00:18:11,460
and in order to enable that there will

318
00:18:11,460 --> 00:18:14,190
be two new internal properties that

319
00:18:14,190 --> 00:18:18,450
methods have one will be home object and

320
00:18:18,450 --> 00:18:20,970
the other one will be method name which

321
00:18:20,970 --> 00:18:23,820
allows you to do to omit the name of the

322
00:18:23,820 --> 00:18:25,980
method and to do this unqualified super

323
00:18:25,980 --> 00:18:30,390
call in echo script six super is allowed

324
00:18:30,390 --> 00:18:33,360
only in classes but in principle nothing

325
00:18:33,360 --> 00:18:36,420
would prevent the scheme from working in

326
00:18:36,420 --> 00:18:38,610
any kind of a prototype chain and it

327
00:18:38,610 --> 00:18:40,950
would work just perfectly with object

328
00:18:40,950 --> 00:18:49,140
exemplars how are we timewise okay

329
00:18:49,140 --> 00:18:53,280
excellent next another new goodie that

330
00:18:53,280 --> 00:18:56,750
echo script six brings us is proto and

331
00:18:56,750 --> 00:19:00,690
if you look at how to written the first

332
00:19:00,690 --> 00:19:03,060
you have to solve the problem of how am

333
00:19:03,060 --> 00:19:04,560
I gonna pronounce that you don't want to

334
00:19:04,560 --> 00:19:05,730
say underscore underscore proto

335
00:19:05,730 --> 00:19:08,100
underscore underscore so the the the

336
00:19:08,100 --> 00:19:11,520
Python world has a lot of these double

337
00:19:11,520 --> 00:19:13,710
underscore variables and they call it

338
00:19:13,710 --> 00:19:16,680
thunder proto so that comes from the

339
00:19:16,680 --> 00:19:18,990
double underscore so that's a good way

340
00:19:18,990 --> 00:19:21,120
of pronouncing it and Brendan Eich seems

341
00:19:21,120 --> 00:19:23,820
to like it so it'll be it's become

342
00:19:23,820 --> 00:19:28,110
popular for JavaScript dunder proto what

343
00:19:28,110 --> 00:19:30,600
this special property allows you to do

344
00:19:30,600 --> 00:19:34,560
is you get you can get and set the

345
00:19:34,560 --> 00:19:37,740
prototype of an object in echo script

346
00:19:37,740 --> 00:19:41,010
five its non-standard and it's actually

347
00:19:41,010 --> 00:19:43,710
and ironically been discouraged for a

348
00:19:43,710 --> 00:19:46,740
while but it will become part of a comma

349
00:19:46,740 --> 00:19:51,510
script six and well as that'd be a nice

350
00:19:51,510 --> 00:19:54,450
feature to have it first appeared in

351
00:19:54,450 --> 00:19:57,180
Firefox quite a while ago and it became

352
00:19:57,180 --> 00:20:00,720
so popular that there was pressure to

353
00:20:00,720 --> 00:20:03,830
add it elsewhere we currently have

354
00:20:03,830 --> 00:20:07,470
support in Firefox and in v8 that means

355
00:20:07,470 --> 00:20:09,150
you can use it in no chance which is

356
00:20:09,150 --> 00:20:10,220
cool

357
00:20:10,220 --> 00:20:14,809
and it's also available in Safari so

358
00:20:14,809 --> 00:20:18,700
what are the use cases for dunder proto

359
00:20:18,700 --> 00:20:23,179
without proto you have to use this ECMO

360
00:20:23,179 --> 00:20:27,049
script v function object get prototype

361
00:20:27,049 --> 00:20:30,799
of to access the prototype of an object

362
00:20:30,799 --> 00:20:34,309
with proto it's a little bit nicer but

363
00:20:34,309 --> 00:20:35,860
it's not that much of an improvement

364
00:20:35,860 --> 00:20:39,470
where you do get quite a lot of an

365
00:20:39,470 --> 00:20:43,070
improvement is if you want to create a

366
00:20:43,070 --> 00:20:47,900
new object that has a given prototype so

367
00:20:47,900 --> 00:20:51,559
here we use object.create create an

368
00:20:51,559 --> 00:20:54,710
empty object whose prototype is my proto

369
00:20:54,710 --> 00:20:58,100
and then and then fill it via assignment

370
00:20:58,100 --> 00:21:03,020
and obviously the alternative you have

371
00:21:03,020 --> 00:21:06,830
is to use object descriptors in the

372
00:21:06,830 --> 00:21:09,799
second argument who've used used object

373
00:21:09,799 --> 00:21:15,380
descriptors already it's it's scary so

374
00:21:15,380 --> 00:21:16,940
you're better off not knowing about them

375
00:21:16,940 --> 00:21:19,010
no I'm kidding but it's still it's not

376
00:21:19,010 --> 00:21:22,400
pretty it's a lot of noise so it's it's

377
00:21:22,400 --> 00:21:25,700
really sometimes you need property

378
00:21:25,700 --> 00:21:28,880
descriptors but with Donda proto you'll

379
00:21:28,880 --> 00:21:31,640
have a very nice alternative that works

380
00:21:31,640 --> 00:21:34,520
for the most use cases with proto you

381
00:21:34,520 --> 00:21:36,650
get to use object literals which is

382
00:21:36,650 --> 00:21:39,770
always good and everything becomes more

383
00:21:39,770 --> 00:21:45,980
compact then there's one more use case

384
00:21:45,980 --> 00:21:50,630
if you want built-ins in JavaScript are

385
00:21:50,630 --> 00:21:54,590
notoriously difficult to subtype so the

386
00:21:54,590 --> 00:21:57,460
problem with array for example is that

387
00:21:57,460 --> 00:22:01,309
array instances are special so if you

388
00:22:01,309 --> 00:22:04,460
want to subtype array then you can't or

389
00:22:04,460 --> 00:22:07,340
at least no you can't you can't create

390
00:22:07,340 --> 00:22:10,250
those special instances so what you do

391
00:22:10,250 --> 00:22:13,159
is and what you can do things to proto

392
00:22:13,159 --> 00:22:15,890
is you just initially you create an

393
00:22:15,890 --> 00:22:19,820
array and then you swap the prototype of

394
00:22:19,820 --> 00:22:23,980
this instance with your own prototype

395
00:22:23,980 --> 00:22:27,010
and that's how you create how you turn

396
00:22:27,010 --> 00:22:29,409
the initial array the the special

397
00:22:29,409 --> 00:22:31,840
instance into an instance of your own

398
00:22:31,840 --> 00:22:34,809
prototype and then you return it that's

399
00:22:34,809 --> 00:22:37,450
a tiny hack that's I think is used by

400
00:22:37,450 --> 00:22:42,730
Bizet 2:04 so this is the interaction

401
00:22:42,730 --> 00:22:44,620
and you notice that if you add an

402
00:22:44,620 --> 00:22:46,440
element length is automatically

403
00:22:46,440 --> 00:22:49,090
increased that is not something that you

404
00:22:49,090 --> 00:22:53,799
can do by hand you can check whether

405
00:22:53,799 --> 00:22:59,740
dhanda proto is support it and you do

406
00:22:59,740 --> 00:23:01,929
that by creating an object that uses

407
00:23:01,929 --> 00:23:05,200
down the proto and then check has the

408
00:23:05,200 --> 00:23:07,450
prototype I've actually been changed and

409
00:23:07,450 --> 00:23:09,760
if not you know that Thunder proto is

410
00:23:09,760 --> 00:23:16,169
not support it there's one caveat with

411
00:23:16,169 --> 00:23:19,720
underscore with down the proto you have

412
00:23:19,720 --> 00:23:23,169
to be even more careful when it comes to

413
00:23:23,169 --> 00:23:25,419
what keys you allow so if you allow

414
00:23:25,419 --> 00:23:28,659
arbitrary keys then you have to be

415
00:23:28,659 --> 00:23:30,760
careful because you can really wreak

416
00:23:30,760 --> 00:23:34,240
havoc if you if you use Donda proto here

417
00:23:34,240 --> 00:23:38,260
and there has been a bug in in Google

418
00:23:38,260 --> 00:23:41,889
Docs for a while and a while ago where

419
00:23:41,889 --> 00:23:44,230
if you if the first word in a Google Doc

420
00:23:44,230 --> 00:23:46,779
if if that word if you type that word

421
00:23:46,779 --> 00:23:51,010
and if it was done the proto then Google

422
00:23:51,010 --> 00:23:55,450
Docs would crash so they can invent your

423
00:23:55,450 --> 00:23:56,980
own reason why that happened internally

424
00:23:56,980 --> 00:23:58,870
but they probably stored something in an

425
00:23:58,870 --> 00:24:01,419
object so typing down the proto crashed

426
00:24:01,419 --> 00:24:03,309
Google Docs for a while until they fix

427
00:24:03,309 --> 00:24:06,509
it

428
00:24:06,519 --> 00:24:08,429
Thunder proto will be an echo script 6

429
00:24:08,429 --> 00:24:10,720
you will be able to use it as a getter

430
00:24:10,720 --> 00:24:13,000
you will be able to use it as a nicer

431
00:24:13,000 --> 00:24:16,389
object create you might be able to use

432
00:24:16,389 --> 00:24:19,269
it as a setter but it might be enough to

433
00:24:19,269 --> 00:24:23,710
just make subtyping built-in it's easier

434
00:24:23,710 --> 00:24:26,200
that's another possibility because other

435
00:24:26,200 --> 00:24:28,830
than that there's not a lot of use cases

436
00:24:28,830 --> 00:24:33,039
for making Donda proto immutable you

437
00:24:33,039 --> 00:24:34,990
will be able to switch it off at the

438
00:24:34,990 --> 00:24:36,990
very least for some objects

439
00:24:36,990 --> 00:24:39,090
possibly for all objects that's not yet

440
00:24:39,090 --> 00:24:44,100
been decided conclusion there are a few

441
00:24:44,100 --> 00:24:47,340
takeaways the core of JavaScript

442
00:24:47,340 --> 00:24:49,470
inheritance is simple and elegant it's

443
00:24:49,470 --> 00:24:49,980
just

444
00:24:49,980 --> 00:24:52,620
objects and the has prototype

445
00:24:52,620 --> 00:24:56,540
relationship I think object exemplars

446
00:24:56,540 --> 00:24:59,970
underline that simplicity and that

447
00:24:59,970 --> 00:25:03,059
elegance so they are instructive they

448
00:25:03,059 --> 00:25:05,190
teach you something about Chavez about

449
00:25:05,190 --> 00:25:07,530
how JavaScript inheritance works but

450
00:25:07,530 --> 00:25:09,720
they're not really for the mainstream

451
00:25:09,720 --> 00:25:11,910
because you want to be compatible with

452
00:25:11,910 --> 00:25:18,780
other code but you still can have nicer

453
00:25:18,780 --> 00:25:22,260
ways for implementing types because or

454
00:25:22,260 --> 00:25:25,040
in the future because in ACMA script six

455
00:25:25,040 --> 00:25:28,890
you get classes you get super and you

456
00:25:28,890 --> 00:25:32,720
get done two protos so those will help

457
00:25:32,720 --> 00:25:44,090
thank you

458
00:25:44,100 --> 00:25:46,780
awesome Wow lots of questions let's do

459
00:25:46,780 --> 00:25:49,490
it

460
00:25:49,500 --> 00:25:53,170
what is the reason for keeping Thunder

461
00:25:53,170 --> 00:25:55,150
Pro to separate from the normal

462
00:25:55,150 --> 00:25:58,720
prototype I mean the idea is close to to

463
00:25:58,720 --> 00:26:02,070
reuse the existing prototype property

464
00:26:02,070 --> 00:26:05,140
instead of dangle Pro to wiesen why is

465
00:26:05,140 --> 00:26:07,330
it important to keep it aside those are

466
00:26:07,330 --> 00:26:09,100
different things I mean once you have

467
00:26:09,100 --> 00:26:13,630
the prototype object that lets inside

468
00:26:13,630 --> 00:26:18,790
that points to the prototypical object

469
00:26:18,790 --> 00:26:23,620
for for the instances and if you have

470
00:26:23,620 --> 00:26:25,420
with Thunder proto you have the link

471
00:26:25,420 --> 00:26:28,180
between objects in in prototype chains

472
00:26:28,180 --> 00:26:29,830
so those are completely different

473
00:26:29,830 --> 00:26:33,460
there's an unfortunate overload of names

474
00:26:33,460 --> 00:26:37,060
in JavaScript you have the the prototype

475
00:26:37,060 --> 00:26:39,700
relationship between two objects on one

476
00:26:39,700 --> 00:26:42,400
hand and then you have the prototype

477
00:26:42,400 --> 00:26:45,340
property of a constructor function and

478
00:26:45,340 --> 00:26:46,900
that is something completely different

479
00:26:46,900 --> 00:26:49,270
even though that object eventually

480
00:26:49,270 --> 00:26:52,170
becomes the prototype of the instances

481
00:26:52,170 --> 00:26:55,360
but that naming overloading is just it's

482
00:26:55,360 --> 00:26:57,460
terrible and but those are completely

483
00:26:57,460 --> 00:27:08,050
different things all right sorry I

484
00:27:08,050 --> 00:27:09,790
really liked the years six classes and

485
00:27:09,790 --> 00:27:11,260
having a constructor Kay that's the

486
00:27:11,260 --> 00:27:12,340
equivalent of the old constructor

487
00:27:12,340 --> 00:27:15,640
function is there a shim for is five and

488
00:27:15,640 --> 00:27:18,880
where can I get it is there a can you

489
00:27:18,880 --> 00:27:20,680
repeat that shim something little by

490
00:27:20,680 --> 00:27:23,200
thought that run in an as5 and the

491
00:27:23,200 --> 00:27:25,600
problem with syntax is new synthesis you

492
00:27:25,600 --> 00:27:28,930
can't really back port it there are a

493
00:27:28,930 --> 00:27:31,240
few lightweight libraries out there that

494
00:27:31,240 --> 00:27:35,650
look almost the same so and they're

495
00:27:35,650 --> 00:27:37,690
really just syntactic sugar for so you

496
00:27:37,690 --> 00:27:39,280
don't get really a new feature it's just

497
00:27:39,280 --> 00:27:41,290
nicer syntax I was just having some

498
00:27:41,290 --> 00:27:46,210
future I forgot and there are a few have

499
00:27:46,210 --> 00:27:48,400
you heard of traceur it's it's a Google

500
00:27:48,400 --> 00:27:53,260
project that on the fly it compiles what

501
00:27:53,260 --> 00:27:56,830
you have so you can use X

502
00:27:56,830 --> 00:27:59,640
six syntax and it compiles it on the fly

503
00:27:59,640 --> 00:28:02,649
to ACMA script three I think and

504
00:28:02,649 --> 00:28:04,899
obviously you have typescript that is

505
00:28:04,899 --> 00:28:06,669
largely based on the echo script six

506
00:28:06,669 --> 00:28:08,890
especially when it comes to two classes

507
00:28:08,890 --> 00:28:10,840
and then has additionally has type

508
00:28:10,840 --> 00:28:12,820
annotations great thank you so there are

509
00:28:12,820 --> 00:28:19,570
a few solutions out there else okay cool

