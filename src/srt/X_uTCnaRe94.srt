1
00:00:00,750 --> 00:00:10,260

[Music]

2
00:00:10,260 --> 00:00:11,910
thank you so as you heard my name is

3
00:00:11,910 --> 00:00:13,440
Marco Alicia I'm here all the way from

4
00:00:13,440 --> 00:00:15,990
Melbourne Australia and believe it or

5
00:00:15,990 --> 00:00:18,570
not my clicker isn't working yes it is

6
00:00:18,570 --> 00:00:21,320
I've been working the web since 1999

7
00:00:21,320 --> 00:00:24,090
where I first got my start with HTML and

8
00:00:24,090 --> 00:00:26,939
of course very soon after CSS and it

9
00:00:26,939 --> 00:00:28,410
probably goes without saying

10
00:00:28,410 --> 00:00:30,000
given that I'm here that I really love

11
00:00:30,000 --> 00:00:33,300
CSS but I've also been a big part of the

12
00:00:33,300 --> 00:00:34,920
react community the last few years I'm a

13
00:00:34,920 --> 00:00:36,570
huge fan of the react model and what

14
00:00:36,570 --> 00:00:40,410
allows us to do with our product and out

15
00:00:40,410 --> 00:00:42,690
of the reactor mmunity came my work with

16
00:00:42,690 --> 00:00:44,579
CSS module something many of you are

17
00:00:44,579 --> 00:00:46,710
probably familiar with and it's a very

18
00:00:46,710 --> 00:00:49,379
popular alternative to CSS nsj it brings

19
00:00:49,379 --> 00:00:52,949
the component scoping model to CSS and

20
00:00:52,949 --> 00:00:54,719
given that you might be surprised that

21
00:00:54,719 --> 00:00:55,980
I'm not actually here today to talk to

22
00:00:55,980 --> 00:00:58,320
you about CSS modules I am here today to

23
00:00:58,320 --> 00:01:01,260
talk to you about CSS nsj please don't

24
00:01:01,260 --> 00:01:02,789
all leave immediately

25
00:01:02,789 --> 00:01:05,159
I think CSS and J yes even though I

26
00:01:05,159 --> 00:01:06,810
don't use it in my own work is is a

27
00:01:06,810 --> 00:01:11,100
really interesting thing to look at what

28
00:01:11,100 --> 00:01:12,780
I find frustrating though is that I've

29
00:01:12,780 --> 00:01:14,310
been part of the react community and

30
00:01:14,310 --> 00:01:16,740
seeing all this work often what's said

31
00:01:16,740 --> 00:01:18,090
to these people is that they should just

32
00:01:18,090 --> 00:01:20,009
learn CSS that they're just avoiding it

33
00:01:20,009 --> 00:01:21,299
that they're trying to do everything in

34
00:01:21,299 --> 00:01:24,000
JavaScript and what I think is that the

35
00:01:24,000 --> 00:01:26,640
core of this is you know there's a

36
00:01:26,640 --> 00:01:29,310
separation here going on I think that

37
00:01:29,310 --> 00:01:31,680
people think is there but for me it's

38
00:01:31,680 --> 00:01:33,420
not there I'm a big part of the react

39
00:01:33,420 --> 00:01:35,100
community as I said and I love component

40
00:01:35,100 --> 00:01:36,990
systems but I've been around the web for

41
00:01:36,990 --> 00:01:38,100
a long time and I'm a big fan of

42
00:01:38,100 --> 00:01:39,600
progressive enhancement that's actually

43
00:01:39,600 --> 00:01:40,829
what brought me to react in the first

44
00:01:40,829 --> 00:01:45,299
place and I bring this to my own work so

45
00:01:45,299 --> 00:01:47,040
this right here is a video of what I've

46
00:01:47,040 --> 00:01:49,680
been working on the past few years in

47
00:01:49,680 --> 00:01:51,360
Melbourne at seek which is the leading

48
00:01:51,360 --> 00:01:53,610
job site now what you're looking at is a

49
00:01:53,610 --> 00:01:55,770
single page app built in react it's

50
00:01:55,770 --> 00:01:57,810
responsive it's fast it's a single page

51
00:01:57,810 --> 00:01:59,340
app so it's all rendered in the client

52
00:01:59,340 --> 00:02:01,049
hitting api's and rendering in your

53
00:02:01,049 --> 00:02:03,420
browser but the catch is that everything

54
00:02:03,420 --> 00:02:05,189
you're seeing here I actually disable

55
00:02:05,189 --> 00:02:07,469
JavaScript in my browser so despite

56
00:02:07,469 --> 00:02:08,819
being a single page app written in

57
00:02:08,819 --> 00:02:10,379
JavaScript you can run it without

58
00:02:10,379 --> 00:02:11,630
JavaScript

59
00:02:11,630 --> 00:02:15,180
and that's what reactor allows us to do

60
00:02:15,190 --> 00:02:19,450
so I'm very interested in CSS and j/s

61
00:02:19,450 --> 00:02:21,470
again even though I'm not using it in my

62
00:02:21,470 --> 00:02:23,000
own work I'm keeping a close eye on it

63
00:02:23,000 --> 00:02:26,690
and I think you should be too that's the

64
00:02:26,690 --> 00:02:27,980
that's the important point I think

65
00:02:27,980 --> 00:02:31,100
that's why I'm here today but why why

66
00:02:31,100 --> 00:02:32,930
are people doing this and why should you

67
00:02:32,930 --> 00:02:36,830
be interested as well there's five key

68
00:02:36,830 --> 00:02:38,360
reasons I want to cover today there's

69
00:02:38,360 --> 00:02:39,800
there's more to it than this but I think

70
00:02:39,800 --> 00:02:41,480
these are the practical benefits you get

71
00:02:41,480 --> 00:02:43,490
from taking on this approach and even if

72
00:02:43,490 --> 00:02:44,600
you're not going to bring this into your

73
00:02:44,600 --> 00:02:45,920
own work I think it will help you get a

74
00:02:45,920 --> 00:02:47,900
sense of why people are doing something

75
00:02:47,900 --> 00:02:49,880
that seems maybe ridiculous from the

76
00:02:49,880 --> 00:02:51,680
outside so we're going to look at scope

77
00:02:51,680 --> 00:02:53,290
styles are going to look at critical CSS

78
00:02:53,290 --> 00:02:56,180
smarter optimizations package management

79
00:02:56,180 --> 00:02:59,870
and finally non browser styling so the

80
00:02:59,870 --> 00:03:03,530
first one is scope styles now I guess I

81
00:03:03,530 --> 00:03:04,940
don't have to convince you of the fact

82
00:03:04,940 --> 00:03:07,640
that managing CSS at scale is really

83
00:03:07,640 --> 00:03:11,060
hard so much so that I say that it's the

84
00:03:11,060 --> 00:03:12,950
hardest problem in front end because if

85
00:03:12,950 --> 00:03:14,780
you think about working with multiple

86
00:03:14,780 --> 00:03:16,790
people on a large project over a long

87
00:03:16,790 --> 00:03:19,130
period of time if you don't have much

88
00:03:19,130 --> 00:03:21,350
structure what's the technology that

89
00:03:21,350 --> 00:03:23,600
goes downhill the fastest and becomes

90
00:03:23,600 --> 00:03:26,030
unmaintainable it's CSS and that's

91
00:03:26,030 --> 00:03:28,100
that's something that the CSS community

92
00:03:28,100 --> 00:03:29,480
has known for a long time and we've been

93
00:03:29,480 --> 00:03:32,210
working hard to solve it the big entries

94
00:03:32,210 --> 00:03:35,590
in this is io CSS from the core sullivan

95
00:03:35,590 --> 00:03:38,330
we've got snacks from jonathan snook and

96
00:03:38,330 --> 00:03:40,850
we've also got been from Yandex which I

97
00:03:40,850 --> 00:03:42,620
from my experience seems to be the one

98
00:03:42,620 --> 00:03:46,010
most popular in the wild now Ben is a

99
00:03:46,010 --> 00:03:47,750
naming convention for your classes that

100
00:03:47,750 --> 00:03:50,030
I'm sure you're all familiar with but at

101
00:03:50,030 --> 00:03:51,350
the end of the day BEM is just a

102
00:03:51,350 --> 00:03:52,850
convention there's nothing stopping you

103
00:03:52,850 --> 00:03:55,520
from not writing your classes in the bed

104
00:03:55,520 --> 00:03:58,220
style at any given moment but even so

105
00:03:58,220 --> 00:04:00,440
it's a fantastic way to manage

106
00:04:00,440 --> 00:04:02,420
complexity at scale and our code bases

107
00:04:02,420 --> 00:04:04,160
in fact I'd say that if you're working

108
00:04:04,160 --> 00:04:06,650
in CSS at scale an approach like this is

109
00:04:06,650 --> 00:04:10,340
invaluable but if it's so central to

110
00:04:10,340 --> 00:04:12,830
managing CSS at scale well why is it

111
00:04:12,830 --> 00:04:14,840
just a convention this is something that

112
00:04:14,840 --> 00:04:17,390
I wrestled with quite heavily but when

113
00:04:17,390 --> 00:04:18,530
you think of it when you look at it

114
00:04:18,530 --> 00:04:19,970
closely particularly in a component

115
00:04:19,970 --> 00:04:22,040
system Ben blocks are essentially

116
00:04:22,040 --> 00:04:24,470
components it's the same abstraction and

117
00:04:24,470 --> 00:04:25,520
when you're working with

118
00:04:25,520 --> 00:04:27,410
single page app framework or library

119
00:04:27,410 --> 00:04:29,990
like react your components are defined

120
00:04:29,990 --> 00:04:32,780
in JavaScript so having your CSS follow

121
00:04:32,780 --> 00:04:34,099
the same scoping rules as your

122
00:04:34,099 --> 00:04:37,490
components is really valuable what we're

123
00:04:37,490 --> 00:04:38,539
going to do from now is going to take

124
00:04:38,539 --> 00:04:39,800
we're going to take a quick look at a

125
00:04:39,800 --> 00:04:41,900
library that does this this is glamour

126
00:04:41,900 --> 00:04:45,199
from sunil pi and basically what it does

127
00:04:45,199 --> 00:04:47,330
is it allows you to define your CSS in

128
00:04:47,330 --> 00:04:49,159
JavaScript but the key thing is that

129
00:04:49,159 --> 00:04:51,289
whenever you define a rule or set of

130
00:04:51,289 --> 00:04:53,449
rules like this it generates a class for

131
00:04:53,449 --> 00:04:54,949
you automatically so that means that you

132
00:04:54,949 --> 00:04:56,360
don't have to worry about scoping it in

133
00:04:56,360 --> 00:04:57,919
the global namespace that's handled for

134
00:04:57,919 --> 00:05:01,699
you and so that the hashing classes is

135
00:05:01,699 --> 00:05:04,159
done for you rather than by name by hand

136
00:05:04,159 --> 00:05:05,990
and so we're enforcing that scoping at

137
00:05:05,990 --> 00:05:09,169
development time one thing I really have

138
00:05:09,169 --> 00:05:10,849
to address early on it's kind of the

139
00:05:10,849 --> 00:05:13,520
elephant in the room these libraries or

140
00:05:13,520 --> 00:05:15,830
at least the most recent ones they don't

141
00:05:15,830 --> 00:05:17,780
do inline Styles they are all about

142
00:05:17,780 --> 00:05:20,090
generating real CSS and inserting it

143
00:05:20,090 --> 00:05:21,830
into the document exactly what you would

144
00:05:21,830 --> 00:05:24,919
have written by hand another entry in

145
00:05:24,919 --> 00:05:28,159
the CSS andreas space is jss Biola

146
00:05:28,159 --> 00:05:30,440
Oleg's solar Budd ski and he's actually

147
00:05:30,440 --> 00:05:34,069
from here in Berlin but like I said

148
00:05:34,069 --> 00:05:36,289
because it's not inline Styles it's real

149
00:05:36,289 --> 00:05:38,210
CSS we can do things like add hover

150
00:05:38,210 --> 00:05:40,039
stylings we can add media queries and

151
00:05:40,039 --> 00:05:41,360
these will all work the way you would

152
00:05:41,360 --> 00:05:46,009
expect when you attach these styles to

153
00:05:46,009 --> 00:05:47,930
the document that's the moment at which

154
00:05:47,930 --> 00:05:49,460
it hands the classes to you so now you

155
00:05:49,460 --> 00:05:52,310
have a reference to those classes and

156
00:05:52,310 --> 00:05:54,259
when you insert some markup into the

157
00:05:54,259 --> 00:05:55,819
document whether it's by some fancy

158
00:05:55,819 --> 00:05:58,759
framework or even just inner HTML you

159
00:05:58,759 --> 00:06:01,340
can now interpolate those classes into

160
00:06:01,340 --> 00:06:03,409
the HTML like so so here our class is

161
00:06:03,409 --> 00:06:05,120
classes about heading and that evaluates

162
00:06:05,120 --> 00:06:06,650
to a string that was generated by the

163
00:06:06,650 --> 00:06:08,889
library not by us

164
00:06:08,889 --> 00:06:12,199
so scopes CSS is all about scoping to

165
00:06:12,199 --> 00:06:13,699
components that's what this is all about

166
00:06:13,699 --> 00:06:15,409
and that's why you see this work coming

167
00:06:15,409 --> 00:06:17,090
out of the reactor mmunity and similar

168
00:06:17,090 --> 00:06:20,360
libraries so much so that there's often

169
00:06:20,360 --> 00:06:22,159
bindings for the libraries like react

170
00:06:22,159 --> 00:06:25,460
jss so here what you're seeing is that

171
00:06:25,460 --> 00:06:27,440
we're injecting the styles at the bottom

172
00:06:27,440 --> 00:06:28,789
there we're injecting them into the

173
00:06:28,789 --> 00:06:30,740
component and then within the component

174
00:06:30,740 --> 00:06:32,690
we have access to those classes so in a

175
00:06:32,690 --> 00:06:33,620
sense what we're doing is we're

176
00:06:33,620 --> 00:06:35,330
generating a little stylesheet for every

177
00:06:35,330 --> 00:06:37,150
single component

178
00:06:37,150 --> 00:06:38,949
and if you're looking at this and

179
00:06:38,949 --> 00:06:40,690
wondering what about separating concerns

180
00:06:40,690 --> 00:06:42,820
do I have to put my styles in the same

181
00:06:42,820 --> 00:06:45,490
file as my JavaScript as my components

182
00:06:45,490 --> 00:06:46,990
and even though a lot of people do

183
00:06:46,990 --> 00:06:48,340
there's nothing stopping you from

184
00:06:48,340 --> 00:06:50,680
architecting your app differently you

185
00:06:50,680 --> 00:06:51,910
could extract your styles into a

186
00:06:51,910 --> 00:06:54,340
separate file and export them and then

187
00:06:54,340 --> 00:06:55,600
where you want to use it you can just

188
00:06:55,600 --> 00:06:57,490
import them at the top of that file but

189
00:06:57,490 --> 00:06:58,389
what you're doing is you make an

190
00:06:58,389 --> 00:07:00,790
explicit reference from where you define

191
00:07:00,790 --> 00:07:02,710
the styles to where you use them the

192
00:07:02,710 --> 00:07:04,180
maintainability of your Styles is

193
00:07:04,180 --> 00:07:07,030
greatly increased at this point but

194
00:07:07,030 --> 00:07:08,500
what's important here is your Styles are

195
00:07:08,500 --> 00:07:10,270
now passed around like regular code it's

196
00:07:10,270 --> 00:07:11,919
not something that that sits in the

197
00:07:11,919 --> 00:07:13,539
global scope implicitly it's something

198
00:07:13,539 --> 00:07:14,889
that you have to hand around your

199
00:07:14,889 --> 00:07:16,600
application to the components that need

200
00:07:16,600 --> 00:07:19,870
it and component scoping is now

201
00:07:19,870 --> 00:07:23,050
automated for us this is the basis of

202
00:07:23,050 --> 00:07:25,060
working in an environment like atomic

203
00:07:25,060 --> 00:07:27,190
design where it's all about components

204
00:07:27,190 --> 00:07:29,410
all the way down and to do this at scale

205
00:07:29,410 --> 00:07:31,120
effectively with multiple people we need

206
00:07:31,120 --> 00:07:34,840
to scope our CSS the key thing here is

207
00:07:34,840 --> 00:07:36,669
that been a best practice in the CSS

208
00:07:36,669 --> 00:07:38,830
community is now baked in it's not

209
00:07:38,830 --> 00:07:40,060
opt-in it's not something you have to

210
00:07:40,060 --> 00:07:43,660
remember to do it's done for you now at

211
00:07:43,660 --> 00:07:44,620
this point you might be looking at it

212
00:07:44,620 --> 00:07:46,270
and thinking if you're familiar with CSS

213
00:07:46,270 --> 00:07:48,190
modules that's exactly what CSS modules

214
00:07:48,190 --> 00:07:50,320
does for you and that's right so if

215
00:07:50,320 --> 00:07:51,610
that's all you want

216
00:07:51,610 --> 00:07:53,380
CSS modules will do that for you and

217
00:07:53,380 --> 00:07:56,289
it's really great but another feature

218
00:07:56,289 --> 00:07:57,729
came along that people are experiment

219
00:07:57,729 --> 00:07:59,349
experimenting with that really opened my

220
00:07:59,349 --> 00:08:01,180
eyes for the possibility of doing scales

221
00:08:01,180 --> 00:08:03,270
in JavaScript and that's critical CSS

222
00:08:03,270 --> 00:08:05,530
now Patrick's already covered a little

223
00:08:05,530 --> 00:08:07,389
bit of this earlier today but just for a

224
00:08:07,389 --> 00:08:09,400
quick recap this is something that

225
00:08:09,400 --> 00:08:11,770
Google PageSpeed have been talking about

226
00:08:11,770 --> 00:08:14,410
for a while now and recommending that

227
00:08:14,410 --> 00:08:15,970
you do in your applications and that's

228
00:08:15,970 --> 00:08:18,010
inlining styles for the current page in

229
00:08:18,010 --> 00:08:19,780
the head of the document to improve that

230
00:08:19,780 --> 00:08:23,020
that initial rendering speed so it looks

231
00:08:23,020 --> 00:08:24,460
something like this as we've seen before

232
00:08:24,460 --> 00:08:26,169
your your inlining the styles that are

233
00:08:26,169 --> 00:08:28,090
relevant to this page in the head and

234
00:08:28,090 --> 00:08:29,680
then the rest of your stylesheet can

235
00:08:29,680 --> 00:08:30,940
safely set at the bottom of the page

236
00:08:30,940 --> 00:08:33,880
delaying the full stylesheet until later

237
00:08:33,880 --> 00:08:36,520
when it's when it's needed there's some

238
00:08:36,520 --> 00:08:37,570
really great tooling up there for

239
00:08:37,570 --> 00:08:39,669
automating this but a project called

240
00:08:39,669 --> 00:08:41,320
critical from addy Osmani that does this

241
00:08:41,320 --> 00:08:43,779
for us and it's really great to do this

242
00:08:43,779 --> 00:08:45,339
of course for obvious reasons speeding

243
00:08:45,339 --> 00:08:47,230
up that initial render but the problem

244
00:08:47,230 --> 00:08:48,550
is that well first of all it's an

245
00:08:48,550 --> 00:08:49,990
optional optimization

246
00:08:49,990 --> 00:08:52,870
you have to add in later but as Patrick

247
00:08:52,870 --> 00:08:56,230
said as well my clique is playing up

248
00:08:56,230 --> 00:08:58,450
it's hard to maintain and it's hard to

249
00:08:58,450 --> 00:09:00,190
automate and I completely agree with

250
00:09:00,190 --> 00:09:02,170
this it's quite a heavyweight system is

251
00:09:02,170 --> 00:09:03,670
powered by phantom Jo so it's not

252
00:09:03,670 --> 00:09:05,170
something you'd want to do on every

253
00:09:05,170 --> 00:09:08,110
request on the server for example if you

254
00:09:08,110 --> 00:09:10,120
look at CSS and JSO in a server rendered

255
00:09:10,120 --> 00:09:11,709
environment it's a complete opposite

256
00:09:11,709 --> 00:09:14,920
because with CSS and J is critical CSS

257
00:09:14,920 --> 00:09:18,130
is not just an optimization server-side

258
00:09:18,130 --> 00:09:20,560
CSS and J's actually depends on critical

259
00:09:20,560 --> 00:09:24,040
CSS to work a good example of this is

260
00:09:24,040 --> 00:09:25,510
the library Aphrodite from Khan Academy

261
00:09:25,510 --> 00:09:28,300
and it looks something like this so at

262
00:09:28,300 --> 00:09:29,800
the top there you can see we're defining

263
00:09:29,800 --> 00:09:32,170
our Styles next to our component as

264
00:09:32,170 --> 00:09:34,300
we've already seen but what I want you

265
00:09:34,300 --> 00:09:36,160
to pay attention to is inside the render

266
00:09:36,160 --> 00:09:37,480
function for that heading component

267
00:09:37,480 --> 00:09:39,760
every time we reference our Styles we're

268
00:09:39,760 --> 00:09:41,440
wrapping them in a call to the CSS

269
00:09:41,440 --> 00:09:43,060
function and what this function is doing

270
00:09:43,060 --> 00:09:45,550
is its allowing aphrodite to keep track

271
00:09:45,550 --> 00:09:47,980
of every style that's being used at any

272
00:09:47,980 --> 00:09:49,720
moment in time so if you do a full

273
00:09:49,720 --> 00:09:51,550
render of the application Aphrodite

274
00:09:51,550 --> 00:09:53,380
knows exactly which Styles you need

275
00:09:53,380 --> 00:09:56,470
exactly which Styles you don't need so

276
00:09:56,470 --> 00:09:58,420
that means that on a server when you're

277
00:09:58,420 --> 00:10:00,420
rendering server-side for every request

278
00:10:00,420 --> 00:10:03,160
you can hook into Aphrodite and render

279
00:10:03,160 --> 00:10:05,050
your application to a string and part of

280
00:10:05,050 --> 00:10:07,000
that is getting both the HTML and the

281
00:10:07,000 --> 00:10:10,329
CSS for that for that render so now

282
00:10:10,329 --> 00:10:12,010
getting the critical CSS is something

283
00:10:12,010 --> 00:10:13,750
that's automated for us on every render

284
00:10:13,750 --> 00:10:15,579
here we're generating a string of a

285
00:10:15,579 --> 00:10:17,890
style tag and inside of it we're

286
00:10:17,890 --> 00:10:19,810
inserting the CSS content that was

287
00:10:19,810 --> 00:10:22,510
generated for us by Aphrodite and if

288
00:10:22,510 --> 00:10:24,310
you've worked with react on the server

289
00:10:24,310 --> 00:10:26,440
or seen what how it works before you'll

290
00:10:26,440 --> 00:10:27,820
see that this is very familiar because

291
00:10:27,820 --> 00:10:29,290
this is exactly what you do with react

292
00:10:29,290 --> 00:10:31,060
as well so even though react can run in

293
00:10:31,060 --> 00:10:32,860
the browser we can also render it on the

294
00:10:32,860 --> 00:10:34,600
server and all the HTML that react

295
00:10:34,600 --> 00:10:36,100
generates for us we can insert it into

296
00:10:36,100 --> 00:10:38,050
the string so now we have static HTML

297
00:10:38,050 --> 00:10:42,459
and static CSS so the key thing here is

298
00:10:42,459 --> 00:10:44,200
that even though we're defining

299
00:10:44,200 --> 00:10:46,450
everything in JavaScript you might think

300
00:10:46,450 --> 00:10:48,160
that javascript is required but this is

301
00:10:48,160 --> 00:10:49,779
built for progressive enhancement the

302
00:10:49,779 --> 00:10:51,279
browser can completely shut off

303
00:10:51,279 --> 00:10:53,020
JavaScript and things will still work as

304
00:10:53,020 --> 00:10:58,000
expected so even if your server rendered

305
00:10:58,000 --> 00:11:00,160
or if like what we do at seek sometimes

306
00:11:00,160 --> 00:11:02,440
is statically pre-rendered to HTML so

307
00:11:02,440 --> 00:11:04,179
even for simplest static

308
00:11:04,179 --> 00:11:06,069
we can leverage the same components and

309
00:11:06,069 --> 00:11:07,599
we can render the static HTML and CSS

310
00:11:07,599 --> 00:11:10,659
and again there's a bit of a theme here

311
00:11:10,659 --> 00:11:12,220
which is that the best practice of

312
00:11:12,220 --> 00:11:15,549
critical CSS is built-in it's not opt-in

313
00:11:15,549 --> 00:11:17,639
when you work in this environment the

314
00:11:17,639 --> 00:11:19,929
third point I want to cover is smarter

315
00:11:19,929 --> 00:11:21,699
optimizations and this is all based on

316
00:11:21,699 --> 00:11:23,979
the fact that CSS and J's has better

317
00:11:23,979 --> 00:11:25,479
integration with your markup as we'll

318
00:11:25,479 --> 00:11:28,509
see now in the CSS community there's

319
00:11:28,509 --> 00:11:30,099
been a big focus on how we can reduce

320
00:11:30,099 --> 00:11:32,379
our CSS bundle to the absolute minimum

321
00:11:32,379 --> 00:11:34,299
as we add more and more styles to our

322
00:11:34,299 --> 00:11:36,429
application our style sheets grow larger

323
00:11:36,429 --> 00:11:37,839
and larger over time and how do we deal

324
00:11:37,839 --> 00:11:39,819
with that there's been some really

325
00:11:39,819 --> 00:11:41,709
interesting work from Yahoo and atomic

326
00:11:41,709 --> 00:11:43,929
CSS they use a really interesting

327
00:11:43,929 --> 00:11:45,999
somewhat controversial function call

328
00:11:45,999 --> 00:11:48,339
style syntax in their classes and from

329
00:11:48,339 --> 00:11:49,839
this they can use some tooling to

330
00:11:49,839 --> 00:11:51,599
generate a style sheet for you

331
00:11:51,599 --> 00:11:54,699
there's also tachyons from Adam Moss

332
00:11:54,699 --> 00:11:57,039
that does something similar it's a

333
00:11:57,039 --> 00:11:58,239
slightly more opinionated framework

334
00:11:58,239 --> 00:11:59,739
style and it gives you a suite of

335
00:11:59,739 --> 00:12:02,079
classes to choose from and apply the

336
00:12:02,079 --> 00:12:03,669
idea is that once you get familiar with

337
00:12:03,669 --> 00:12:04,959
the library you'd be able to read these

338
00:12:04,959 --> 00:12:07,869
of course and the key idea that they're

339
00:12:07,869 --> 00:12:09,189
pushing here is that they're treating

340
00:12:09,189 --> 00:12:11,559
classes like inline styles to try and

341
00:12:11,559 --> 00:12:14,979
reduce the CSS in that final bundle now

342
00:12:14,979 --> 00:12:17,049
to me this one is a little bit of a

343
00:12:17,049 --> 00:12:19,479
mixed bag in the sense that I value the

344
00:12:19,479 --> 00:12:21,339
output I think it's worth trying to cut

345
00:12:21,339 --> 00:12:23,259
down the CSS bundle but it comes at

346
00:12:23,259 --> 00:12:24,849
quite a cost at development time you

347
00:12:24,849 --> 00:12:26,529
have to buy into a framework or you're

348
00:12:26,529 --> 00:12:28,839
using obscure syntax and these sorts of

349
00:12:28,839 --> 00:12:30,220
things are hard to use in a team

350
00:12:30,220 --> 00:12:31,599
environment where maybe not everyone

351
00:12:31,599 --> 00:12:33,609
familiar not everyone is bought in so

352
00:12:33,609 --> 00:12:36,669
I'm not so sure on this one but if you

353
00:12:36,669 --> 00:12:38,679
look at the way CSS and j/s works and

354
00:12:38,679 --> 00:12:41,979
surface modules as well you never

355
00:12:41,979 --> 00:12:44,169
hard-code a string to a class it's

356
00:12:44,169 --> 00:12:45,970
always a reference to a string that's

357
00:12:45,970 --> 00:12:47,919
provided to you either from the library

358
00:12:47,919 --> 00:12:49,689
from the tooling so here we're saying

359
00:12:49,689 --> 00:12:52,389
that this aside uses the Styles dot side

360
00:12:52,389 --> 00:12:54,309
by class but because that's a reference

361
00:12:54,309 --> 00:12:56,709
with string it might resolve to a simple

362
00:12:56,709 --> 00:12:59,679
string like sidebar after all we know it

363
00:12:59,679 --> 00:13:01,269
could be made up of several classes

364
00:13:01,269 --> 00:13:03,639
dozens of classes it's actually not out

365
00:13:03,639 --> 00:13:05,139
of our control it's the tooling that

366
00:13:05,139 --> 00:13:07,599
takes care of this for us so that opens

367
00:13:07,599 --> 00:13:09,249
up some really interesting possibilities

368
00:13:09,249 --> 00:13:11,349
the perfect example of this is a really

369
00:13:11,349 --> 00:13:13,389
great library called style Tron by Ryan

370
00:13:13,389 --> 00:13:16,029
Zhou and this one really to me shows

371
00:13:16,029 --> 00:13:17,620
where we can start to do red

372
00:13:17,620 --> 00:13:19,570
clean new things once we blow the lines

373
00:13:19,570 --> 00:13:23,560
between CSS and JavaScript because what

374
00:13:23,560 --> 00:13:25,690
it brings to the table is dynamic zero

375
00:13:25,690 --> 00:13:28,180
config atomic CSS all the benefits of

376
00:13:28,180 --> 00:13:30,430
reducing that final payload without the

377
00:13:30,430 --> 00:13:32,170
development time cost without having to

378
00:13:32,170 --> 00:13:36,310
buy into a framework in the same way so

379
00:13:36,310 --> 00:13:38,560
what I want to show you here is is what

380
00:13:38,560 --> 00:13:40,420
it kind of looks like in practice so on

381
00:13:40,420 --> 00:13:42,610
the left there what you've got is three

382
00:13:42,610 --> 00:13:43,930
different sets of rules being defined

383
00:13:43,930 --> 00:13:45,460
and on the right there you've got the

384
00:13:45,460 --> 00:13:48,070
final generated CSS the first thing

385
00:13:48,070 --> 00:13:49,839
you'll notice is that the generated CSS

386
00:13:49,839 --> 00:13:51,790
is half the size and why is that

387
00:13:51,790 --> 00:13:53,410
it's because there's a lot of repetition

388
00:13:53,410 --> 00:13:56,860
going on so font size of 1.6 M is in the

389
00:13:56,860 --> 00:13:59,110
first and the last one a height of 32

390
00:13:59,110 --> 00:14:01,420
pixels is in the top and middle set of

391
00:14:01,420 --> 00:14:03,610
rules and display:inline-block block is

392
00:14:03,610 --> 00:14:06,220
in the last two so that means in effect

393
00:14:06,220 --> 00:14:07,980
we've really only got three unique

394
00:14:07,980 --> 00:14:10,210
combinations with so we only need three

395
00:14:10,210 --> 00:14:12,580
classes and this is something that style

396
00:14:12,580 --> 00:14:15,040
Tron can take care of that for for us

397
00:14:15,040 --> 00:14:16,690
automatically by generating these

398
00:14:16,690 --> 00:14:18,640
virtual class strings in the middle so

399
00:14:18,640 --> 00:14:20,529
you notice we've got classes of a b a c

400
00:14:20,529 --> 00:14:21,670
bc

401
00:14:21,670 --> 00:14:23,410
that's encapsulating what's in common

402
00:14:23,410 --> 00:14:25,839
between these different styles for us so

403
00:14:25,839 --> 00:14:28,000
that that atomic CSS style string can

404
00:14:28,000 --> 00:14:31,660
actually be generated for us so in code

405
00:14:31,660 --> 00:14:33,400
what that looks like at its lowest level

406
00:14:33,400 --> 00:14:36,670
is style Tron gives us an API to inject

407
00:14:36,670 --> 00:14:39,130
a single declaration of a property value

408
00:14:39,130 --> 00:14:41,440
and media query combination again this

409
00:14:41,440 --> 00:14:43,120
is not inline style this is generating

410
00:14:43,120 --> 00:14:45,730
real CSS and for this what we get is the

411
00:14:45,730 --> 00:14:47,860
class a this is the first class we've

412
00:14:47,860 --> 00:14:50,459
generated so once we start to generate

413
00:14:50,459 --> 00:14:52,690
classes for multiple rules what you'll

414
00:14:52,690 --> 00:14:54,490
start to see is what we saw before so

415
00:14:54,490 --> 00:14:56,620
here the color red is used in both the

416
00:14:56,620 --> 00:14:58,630
first and second sets so we get the

417
00:14:58,630 --> 00:15:01,540
class a but display:inline-block in font

418
00:15:01,540 --> 00:15:03,610
size 1.6 m/s they're different so we get

419
00:15:03,610 --> 00:15:05,410
different classes so all the common

420
00:15:05,410 --> 00:15:07,690
styles are factored out for us but it's

421
00:15:07,690 --> 00:15:09,339
hidden away behind this abstraction of

422
00:15:09,339 --> 00:15:13,420
generating the class names for us so

423
00:15:13,420 --> 00:15:14,950
what that means when we generate our

424
00:15:14,950 --> 00:15:17,170
final bundle is that when you can pierce

425
00:15:17,170 --> 00:15:19,390
the Ultron to other CSS and Jas

426
00:15:19,390 --> 00:15:22,330
approaches you get you get half the size

427
00:15:22,330 --> 00:15:24,250
of a bundle basically because it's able

428
00:15:24,250 --> 00:15:26,350
to aggressively optimize down to the

429
00:15:26,350 --> 00:15:28,930
minimum set of combinations of property

430
00:15:28,930 --> 00:15:31,730
value and media query

431
00:15:31,730 --> 00:15:33,170
and just to be clear as well this is

432
00:15:33,170 --> 00:15:34,790
real-world CSS this is actually from

433
00:15:34,790 --> 00:15:38,840
Airbnb this set of CSS and again the

434
00:15:38,840 --> 00:15:41,450
trend continues that the best practice

435
00:15:41,450 --> 00:15:43,070
in terms of generating the smallest

436
00:15:43,070 --> 00:15:45,680
output of atomic CSS it's now baked in

437
00:15:45,680 --> 00:15:47,810
it's not opt-in and we can only do this

438
00:15:47,810 --> 00:15:49,250
because now we have closer integration

439
00:15:49,250 --> 00:15:53,330
between our markup and our Styles the

440
00:15:53,330 --> 00:15:55,460
fourth point I think is where I really

441
00:15:55,460 --> 00:15:57,650
start to be sold on this idea and that's

442
00:15:57,650 --> 00:16:02,120
around package management I want you to

443
00:16:02,120 --> 00:16:04,550
think about how we share CSS we've been

444
00:16:04,550 --> 00:16:07,060
doing it for a long time how do we do it

445
00:16:07,060 --> 00:16:09,260
you might think that we've had package

446
00:16:09,260 --> 00:16:10,700
managers that are friendly to the front

447
00:16:10,700 --> 00:16:14,120
end like valor and that's true but even

448
00:16:14,120 --> 00:16:15,920
when you're using package managers like

449
00:16:15,920 --> 00:16:18,470
NPM when you're including CSS into your

450
00:16:18,470 --> 00:16:20,000
application from a third-party package

451
00:16:20,000 --> 00:16:22,670
the inclusion step is generally a manual

452
00:16:22,670 --> 00:16:24,080
step it's something that you have to go

453
00:16:24,080 --> 00:16:25,430
out of your way to wire into your

454
00:16:25,430 --> 00:16:27,050
application which is completely

455
00:16:27,050 --> 00:16:28,550
different from the code that you're

456
00:16:28,550 --> 00:16:32,030
installing and I think the key reason

457
00:16:32,030 --> 00:16:34,700
why this is happening is because our CSS

458
00:16:34,700 --> 00:16:36,620
and the package managers that provide it

459
00:16:36,620 --> 00:16:38,510
are not coupled to a module system in

460
00:16:38,510 --> 00:16:40,550
the way that we've seen with NPM and

461
00:16:40,550 --> 00:16:44,060
commonjs modules because when you think

462
00:16:44,060 --> 00:16:45,890
about what happens on NPM for example

463
00:16:45,890 --> 00:16:47,750
and how it deals with packages that have

464
00:16:47,750 --> 00:16:49,580
dependencies of dependencies of

465
00:16:49,580 --> 00:16:51,890
dependencies they're easily able to

466
00:16:51,890 --> 00:16:54,620
manage that fact but with CSS it's

467
00:16:54,620 --> 00:16:55,910
something that we can't really do very

468
00:16:55,910 --> 00:16:57,830
well we can't build CSS built up of

469
00:16:57,830 --> 00:17:01,010
other CSS and I think you see this trend

470
00:17:01,010 --> 00:17:02,450
play out in terms of the different

471
00:17:02,450 --> 00:17:04,730
styles of package managers so Bower as a

472
00:17:04,730 --> 00:17:06,500
package manager had this problem as well

473
00:17:06,500 --> 00:17:08,420
is very much about flat dependencies

474
00:17:08,420 --> 00:17:10,790
whereas NPM is more about a web of

475
00:17:10,790 --> 00:17:13,160
dependencies small libraries that that

476
00:17:13,160 --> 00:17:15,680
many many people provide and it plays

477
00:17:15,680 --> 00:17:17,959
out I think in in in the exponential

478
00:17:17,959 --> 00:17:19,580
growth of the number of packages being

479
00:17:19,580 --> 00:17:24,320
created when you have this flat set of

480
00:17:24,320 --> 00:17:25,730
dependencies like we've seen with Bower

481
00:17:25,730 --> 00:17:28,310
or like we see in the CSS community what

482
00:17:28,310 --> 00:17:29,990
you end up having is monolithic

483
00:17:29,990 --> 00:17:32,480
dependencies big big libraries this is

484
00:17:32,480 --> 00:17:34,700
what leads to things like in the older

485
00:17:34,700 --> 00:17:37,040
world of front-end single page

486
00:17:37,040 --> 00:17:38,810
applications you might install jQuery

487
00:17:38,810 --> 00:17:40,910
you might have saw underscore you - all

488
00:17:40,910 --> 00:17:43,250
backbone and then you were done because

489
00:17:43,250 --> 00:17:44,150
you didn't really

490
00:17:44,150 --> 00:17:46,370
a good way to manage much more code than

491
00:17:46,370 --> 00:17:48,200
that and in the CSS world we've seen the

492
00:17:48,200 --> 00:17:49,970
same things with where you would pick a

493
00:17:49,970 --> 00:17:54,110
framework like a like tachyons for

494
00:17:54,110 --> 00:17:57,950
example and then that was it so where's

495
00:17:57,950 --> 00:18:00,380
our package manager for CSS for sass for

496
00:18:00,380 --> 00:18:03,140
less we we don't really have one that's

497
00:18:03,140 --> 00:18:05,060
catered to that specific needs that

498
00:18:05,060 --> 00:18:06,860
really tackles it in the same way that

499
00:18:06,860 --> 00:18:09,650
we've seen elsewhere but what I want you

500
00:18:09,650 --> 00:18:11,300
to do is think a little bit differently

501
00:18:11,300 --> 00:18:12,800
about the web platform for a second and

502
00:18:12,800 --> 00:18:13,940
you think about where's our package

503
00:18:13,940 --> 00:18:15,470
manager for HTML we're putting all this

504
00:18:15,470 --> 00:18:18,860
focus on CSS what do you think about it

505
00:18:18,860 --> 00:18:21,860
we already share HTML a lot but we share

506
00:18:21,860 --> 00:18:25,850
it via JavaScript so you install jQuery

507
00:18:25,850 --> 00:18:27,350
components you install backbone

508
00:18:27,350 --> 00:18:29,210
components angular directives react

509
00:18:29,210 --> 00:18:31,370
components these are all encapsulating

510
00:18:31,370 --> 00:18:33,170
HTML in JavaScript and that's what

511
00:18:33,170 --> 00:18:35,000
enables us to share and build on top of

512
00:18:35,000 --> 00:18:36,500
each other in a way that wouldn't be

513
00:18:36,500 --> 00:18:38,240
possible if we were just using static

514
00:18:38,240 --> 00:18:41,270
HTML so the question is what if we

515
00:18:41,270 --> 00:18:43,820
started sharing CSS via JavaScript and

516
00:18:43,820 --> 00:18:46,940
NPM in the same way packaging up our CSS

517
00:18:46,940 --> 00:18:48,800
behind JavaScript in the way our HTML

518
00:18:48,800 --> 00:18:51,830
templates are as well instead of mix-ins

519
00:18:51,830 --> 00:18:53,600
we have functions that operate on plain

520
00:18:53,600 --> 00:18:56,300
data strings and objects instead of

521
00:18:56,300 --> 00:18:58,780
extending rules we just use built-in

522
00:18:58,780 --> 00:19:02,420
syntax like the new object spread syntax

523
00:19:02,420 --> 00:19:04,700
for spreading our rules objects of rules

524
00:19:04,700 --> 00:19:07,910
together now this means that we can

525
00:19:07,910 --> 00:19:10,640
compose and share our Styles like any

526
00:19:10,640 --> 00:19:12,470
other code in our application and we can

527
00:19:12,470 --> 00:19:14,680
leverage package managers to do this a

528
00:19:14,680 --> 00:19:17,330
good example of how this plays out is a

529
00:19:17,330 --> 00:19:19,220
really great library called polish by

530
00:19:19,220 --> 00:19:20,870
Max turbo who couldn't be here today and

531
00:19:20,870 --> 00:19:24,680
nikrif and polished is really the lodash

532
00:19:24,680 --> 00:19:27,650
of CSS and J's it's it's a whole suite

533
00:19:27,650 --> 00:19:30,080
of utility functions for operating on

534
00:19:30,080 --> 00:19:32,390
CSS in a JavaScript environment but more

535
00:19:32,390 --> 00:19:34,940
importantly it's not relegated to the

536
00:19:34,940 --> 00:19:36,530
style part of your application you can

537
00:19:36,530 --> 00:19:39,050
use this anywhere and this is

538
00:19:39,050 --> 00:19:40,160
particularly useful if you're doing

539
00:19:40,160 --> 00:19:41,570
things like building style guides and

540
00:19:41,570 --> 00:19:43,100
you want to programmatically have access

541
00:19:43,100 --> 00:19:45,050
to the logic behind your CSS this is a

542
00:19:45,050 --> 00:19:46,520
problem we face all the time where I

543
00:19:46,520 --> 00:19:48,800
work and having the logic in JavaScript

544
00:19:48,800 --> 00:19:51,400
neatly solves this problem

545
00:19:51,400 --> 00:19:53,800
so the hope is that once you move

546
00:19:53,800 --> 00:19:56,980
towards expressing CSS in JavaScript we

547
00:19:56,980 --> 00:19:59,470
can start to see open source CSS look

548
00:19:59,470 --> 00:20:03,010
more like the NPM chart there where more

549
00:20:03,010 --> 00:20:05,140
and more Styles are built upon shared

550
00:20:05,140 --> 00:20:06,970
low-level functions are written and

551
00:20:06,970 --> 00:20:08,380
built upon and shared in a way that we

552
00:20:08,380 --> 00:20:11,980
haven't done before and ironically

553
00:20:11,980 --> 00:20:13,990
enough we can do this by embracing

554
00:20:13,990 --> 00:20:15,880
JavaScript modules of module format

555
00:20:15,880 --> 00:20:19,840
that's in it widely supported today the

556
00:20:19,840 --> 00:20:21,670
final point I want to cover is much more

557
00:20:21,670 --> 00:20:23,710
future facing this is not necessarily

558
00:20:23,710 --> 00:20:25,630
something that the CSS and J's community

559
00:20:25,630 --> 00:20:28,000
is particularly particularly big on but

560
00:20:28,000 --> 00:20:29,650
I think it's something that really is

561
00:20:29,650 --> 00:20:31,990
not possible today in the CSS community

562
00:20:31,990 --> 00:20:33,040
and it's really interesting and that's

563
00:20:33,040 --> 00:20:35,950
non browsers filing now again like I

564
00:20:35,950 --> 00:20:37,330
said I've been a big part of the react

565
00:20:37,330 --> 00:20:39,250
community and reacts really interesting

566
00:20:39,250 --> 00:20:41,860
for a number of reasons but one of the

567
00:20:41,860 --> 00:20:43,360
big reasons is the fact that you don't

568
00:20:43,360 --> 00:20:45,429
deal with Dom manipulation directly you

569
00:20:45,429 --> 00:20:48,000
deal with virtual Dom you deal with a

570
00:20:48,000 --> 00:20:49,750
representation of what the final Dom

571
00:20:49,750 --> 00:20:51,040
will be rather than touching it directly

572
00:20:51,040 --> 00:20:53,650
and what that means is that when it

573
00:20:53,650 --> 00:20:55,510
comes time to render you actually use a

574
00:20:55,510 --> 00:20:57,010
renderer for that environment that

575
00:20:57,010 --> 00:20:58,720
you're dealing with so here when you

576
00:20:58,720 --> 00:21:00,070
when you render your react up on the

577
00:21:00,070 --> 00:21:02,260
server you're in a client you're pulling

578
00:21:02,260 --> 00:21:03,790
in from react Dom something that's built

579
00:21:03,790 --> 00:21:06,580
for dealing with the Dom but the fact is

580
00:21:06,580 --> 00:21:08,590
that react cor can actually have

581
00:21:08,590 --> 00:21:10,840
different renderers you don't just have

582
00:21:10,840 --> 00:21:13,420
to target the Dom it's not just virtual

583
00:21:13,420 --> 00:21:15,190
Dom its virtual whatever it is whatever

584
00:21:15,190 --> 00:21:16,870
the primitives are of the environment

585
00:21:16,870 --> 00:21:18,460
that you're working in so you would have

586
00:21:18,460 --> 00:21:20,110
seen that play out with react native

587
00:21:20,110 --> 00:21:21,670
something that I'm sure you've all seen

588
00:21:21,670 --> 00:21:23,500
before and react native is about

589
00:21:23,500 --> 00:21:26,050
bringing this idea of working with

590
00:21:26,050 --> 00:21:28,210
virtual representations of the final

591
00:21:28,210 --> 00:21:30,100
components in this case you're dealing

592
00:21:30,100 --> 00:21:32,530
with native components but what's

593
00:21:32,530 --> 00:21:34,030
interesting about react native is they

594
00:21:34,030 --> 00:21:35,260
wanted to make it friendly to people

595
00:21:35,260 --> 00:21:38,020
like us web developers who know CSS in

596
00:21:38,020 --> 00:21:39,670
and out and it comes with its own

597
00:21:39,670 --> 00:21:41,110
stylesheet abstraction so even though

598
00:21:41,110 --> 00:21:43,270
you're working in a native app you style

599
00:21:43,270 --> 00:21:45,400
your apps with what appears to be CSS

600
00:21:45,400 --> 00:21:46,990
here we're creating a style sheet with

601
00:21:46,990 --> 00:21:48,670
very familiar properties border-radius

602
00:21:48,670 --> 00:21:51,750
and with color font size and font weight

603
00:21:51,750 --> 00:21:53,980
but what's really interesting about it

604
00:21:53,980 --> 00:21:55,929
is the fact that you can use flexbox

605
00:21:55,929 --> 00:21:57,850
this is an environment that's completely

606
00:21:57,850 --> 00:21:59,710
outside of a browser doesn't natively

607
00:21:59,710 --> 00:22:01,360
have flexbox and yet here we are using

608
00:22:01,360 --> 00:22:04,110
flexbox in an iOS or android application

609
00:22:04,110 --> 00:22:06,150
the way they achieve this was actually

610
00:22:06,150 --> 00:22:09,059
by re-implementing flexbox in javascript

611
00:22:09,059 --> 00:22:11,280
in a project called CSS layout and there

612
00:22:11,280 --> 00:22:13,020
was a massive test suite making sure

613
00:22:13,020 --> 00:22:14,700
that it followed the spec correctly and

614
00:22:14,700 --> 00:22:16,530
this allowed them to bring the world of

615
00:22:16,530 --> 00:22:19,559
flex box into their native apps it's now

616
00:22:19,559 --> 00:22:21,559
been formalized in a project called yoga

617
00:22:21,559 --> 00:22:24,059
that's targeting a lot more environment

618
00:22:24,059 --> 00:22:25,500
so now it's actually no longer written

619
00:22:25,500 --> 00:22:27,150
in JavaScript it's written in C it

620
00:22:27,150 --> 00:22:29,790
targets Java c-sharp Objective C and C

621
00:22:29,790 --> 00:22:31,590
as well but what's really interesting

622
00:22:31,590 --> 00:22:33,750
about yoga is they've said that their

623
00:22:33,750 --> 00:22:35,280
focus is on creating an expressive

624
00:22:35,280 --> 00:22:37,799
layout library not implementing all of

625
00:22:37,799 --> 00:22:39,840
CSS so in a sense that might seem like

626
00:22:39,840 --> 00:22:41,820
it's being somewhat restrictive but I

627
00:22:41,820 --> 00:22:43,470
think if you think about our own work

628
00:22:43,470 --> 00:22:46,049
managing CSS at scale is all about

629
00:22:46,049 --> 00:22:48,240
picking a reasonable subset of the

630
00:22:48,240 --> 00:22:50,340
language you think about BEM you are you

631
00:22:50,340 --> 00:22:52,559
are deciding to not do a whole lot of

632
00:22:52,559 --> 00:22:54,540
things that CSS can do but you do this

633
00:22:54,540 --> 00:22:56,160
to make your app more maintainable to

634
00:22:56,160 --> 00:22:58,740
unlock further abilities in your team

635
00:22:58,740 --> 00:23:01,650
and to make your product more resilient

636
00:23:01,650 --> 00:23:05,400
over time so that means that if you're

637
00:23:05,400 --> 00:23:06,720
working react native you're not dealing

638
00:23:06,720 --> 00:23:07,980
with table layouts you're not dealing

639
00:23:07,980 --> 00:23:09,690
with floats you're dealing with flexbox

640
00:23:09,690 --> 00:23:11,220
and again because we're working outside

641
00:23:11,220 --> 00:23:12,929
of the browser environment we don't have

642
00:23:12,929 --> 00:23:15,390
the Cascade we have scope styles but in

643
00:23:15,390 --> 00:23:16,559
some ways this makes our app more

644
00:23:16,559 --> 00:23:20,429
maintainable and more portable what this

645
00:23:20,429 --> 00:23:22,020
unlocks now is the ability for us to

646
00:23:22,020 --> 00:23:24,030
finally have cross-platform components

647
00:23:24,030 --> 00:23:25,890
with embedded styles styles that are

648
00:23:25,890 --> 00:23:27,360
tightly coupled to the component in a

649
00:23:27,360 --> 00:23:28,770
way that makes them available to

650
00:23:28,770 --> 00:23:31,500
different platforms a really good

651
00:23:31,500 --> 00:23:33,419
example of what this allows us to do is

652
00:23:33,419 --> 00:23:35,040
a project called react native web from

653
00:23:35,040 --> 00:23:37,620
Nicholas Gallagher at Twitter and what

654
00:23:37,620 --> 00:23:39,330
react native web is it basically allows

655
00:23:39,330 --> 00:23:41,040
us to have a drop-in replacement where

656
00:23:41,040 --> 00:23:43,049
you can alias react native with react

657
00:23:43,049 --> 00:23:44,820
native web and everything you've written

658
00:23:44,820 --> 00:23:46,110
for your react native app can actually

659
00:23:46,110 --> 00:23:48,090
run in a browser and this is what

660
00:23:48,090 --> 00:23:49,320
they're experimenting with at Twitter

661
00:23:49,320 --> 00:23:52,799
today a similar project along the same

662
00:23:52,799 --> 00:23:54,630
lines as react primitives by Leland

663
00:23:54,630 --> 00:23:56,929
Richardson he works at Airbnb and

664
00:23:56,929 --> 00:24:00,030
recently we've seen funnily enough react

665
00:24:00,030 --> 00:24:02,010
XP from Microsoft which is a

666
00:24:02,010 --> 00:24:04,620
cross-platform component abstraction

667
00:24:04,620 --> 00:24:06,660
which again includes its own stylesheet

668
00:24:06,660 --> 00:24:10,110
system but can we take our components

669
00:24:10,110 --> 00:24:12,000
even further not all of us a building

670
00:24:12,000 --> 00:24:14,640
native apps is there much value beyond

671
00:24:14,640 --> 00:24:17,100
that we've seen a really interesting

672
00:24:17,100 --> 00:24:17,789
answer

673
00:24:17,789 --> 00:24:19,229
recently I'm sure a few of you have seen

674
00:24:19,229 --> 00:24:21,960
this react Sketchup by John Gould from

675
00:24:21,960 --> 00:24:25,109
from Airbnb as well and this is to me is

676
00:24:25,109 --> 00:24:27,419
really key not just to the future of

677
00:24:27,419 --> 00:24:29,220
components but to the future of design

678
00:24:29,220 --> 00:24:30,539
and how designers and developers

679
00:24:30,539 --> 00:24:34,289
interact because what reacts Sketchup

680
00:24:34,289 --> 00:24:36,960
lets you do is write react code with

681
00:24:36,960 --> 00:24:39,090
Styles co-located with your components

682
00:24:39,090 --> 00:24:41,580
but render not into a native app not

683
00:24:41,580 --> 00:24:43,979
into a browser but into sketch I'm sure

684
00:24:43,979 --> 00:24:45,960
most of you are probably not aware as I

685
00:24:45,960 --> 00:24:47,789
wasn't but sketch actually has a

686
00:24:47,789 --> 00:24:49,679
JavaScript API or actually a cocoa

687
00:24:49,679 --> 00:24:51,690
script API and that's what allows them

688
00:24:51,690 --> 00:24:53,759
to run this code in an environment

689
00:24:53,759 --> 00:24:56,099
that's typically targeting designers we

690
00:24:56,099 --> 00:24:58,109
can bridge a gap in a really interesting

691
00:24:58,109 --> 00:25:01,080
way and if like me you work day in day

692
00:25:01,080 --> 00:25:03,330
out on design systems in the browser

693
00:25:03,330 --> 00:25:05,129
this unlocks a really interesting

694
00:25:05,129 --> 00:25:06,779
potential of how we interact with our

695
00:25:06,779 --> 00:25:09,749
designers and we can do really

696
00:25:09,749 --> 00:25:11,039
interesting things like this here's a

697
00:25:11,039 --> 00:25:13,460
video that John posted which is showing

698
00:25:13,460 --> 00:25:16,440
responsive design style rendering into

699
00:25:16,440 --> 00:25:18,929
sketch all driven by code and this is

700
00:25:18,929 --> 00:25:20,879
only possible because we've been able to

701
00:25:20,879 --> 00:25:24,029
write our our markup and our Styles in a

702
00:25:24,029 --> 00:25:27,019
way that's portable outside of a browser

703
00:25:27,019 --> 00:25:29,279
what we're looking at here is finally

704
00:25:29,279 --> 00:25:31,979
cross-platform cross-disciplinary Design

705
00:25:31,979 --> 00:25:33,979
Systems

706
00:25:33,979 --> 00:25:36,960
we're having cross-platform code as the

707
00:25:36,960 --> 00:25:39,299
source of truth in our design systems so

708
00:25:39,299 --> 00:25:40,950
instead of sketching the source of truth

709
00:25:40,950 --> 00:25:44,909
or Photoshop or PDFs code is now the

710
00:25:44,909 --> 00:25:46,559
source of truth but we can move that

711
00:25:46,559 --> 00:25:48,450
code back into an environment where the

712
00:25:48,450 --> 00:25:54,200
designers can also make use of it so

713
00:25:54,200 --> 00:25:56,909
it's been a whirlwind tour of why people

714
00:25:56,909 --> 00:25:59,070
want to do CSS and j/s or at least why

715
00:25:59,070 --> 00:26:00,629
you want to be interested in it at the

716
00:26:00,629 --> 00:26:03,179
very least and just to recap all of this

717
00:26:03,179 --> 00:26:05,099
it's all about scoping our Styles to the

718
00:26:05,099 --> 00:26:07,049
component so that we can scale up to

719
00:26:07,049 --> 00:26:09,149
large systems and make them maintainable

720
00:26:09,149 --> 00:26:11,009
in a way that doesn't require so much

721
00:26:11,009 --> 00:26:12,899
careful hand-holding it's about

722
00:26:12,899 --> 00:26:14,669
optimizing our apps in ways that we

723
00:26:14,669 --> 00:26:16,229
couldn't before and then it's about

724
00:26:16,229 --> 00:26:18,509
taking our work and sharing it through

725
00:26:18,509 --> 00:26:20,399
package managers again in ways that we

726
00:26:20,399 --> 00:26:21,269
couldn't do before

727
00:26:21,269 --> 00:26:24,239
it's about composing large applications

728
00:26:24,239 --> 00:26:25,649
out of that shared code and being able

729
00:26:25,649 --> 00:26:27,029
to build a community that we haven't

730
00:26:27,029 --> 00:26:28,830
been able to build before and it's about

731
00:26:28,830 --> 00:26:30,309
unifying on

732
00:26:30,309 --> 00:26:32,649
on a portable platform that can target

733
00:26:32,649 --> 00:26:35,409
multiple environments it's about moving

734
00:26:35,409 --> 00:26:37,869
us towards a unified styling language

735
00:26:37,869 --> 00:26:39,609
and it's doing it in a way that I never

736
00:26:39,609 --> 00:26:41,619
would have expected and it's taken me a

737
00:26:41,619 --> 00:26:43,690
while to admit that this might very well

738
00:26:43,690 --> 00:26:46,210
be the future of how we do styling for

739
00:26:46,210 --> 00:26:49,299
the web and beyond and this is what I'm

740
00:26:49,299 --> 00:26:51,070
bringing into my work day in and day out

741
00:26:51,070 --> 00:26:53,259
because I work on a component system and

742
00:26:53,259 --> 00:26:55,719
it's all about components it's all about

743
00:26:55,719 --> 00:26:57,969
abstracting the styles behind a clean

744
00:26:57,969 --> 00:27:00,039
component interface and I think this is

745
00:27:00,039 --> 00:27:01,359
the basis of how we're going to build

746
00:27:01,359 --> 00:27:03,129
better and better systems into the

747
00:27:03,129 --> 00:27:06,849
future critically I want to do this

748
00:27:06,849 --> 00:27:08,169
without breaking in a progressive

749
00:27:08,169 --> 00:27:11,830
enhancement I've come from a deep web

750
00:27:11,830 --> 00:27:13,539
background and I really love what the

751
00:27:13,539 --> 00:27:15,279
web platform provides and I think we can

752
00:27:15,279 --> 00:27:20,349
have the best of both worlds here so

753
00:27:20,349 --> 00:27:22,299
when we think about learning CSS and we

754
00:27:22,299 --> 00:27:23,499
think about everything that we've just

755
00:27:23,499 --> 00:27:26,589
seen all of this stuff nothing prevents

756
00:27:26,589 --> 00:27:28,629
you from the fact that you have still

757
00:27:28,629 --> 00:27:30,669
have to learn CSS you still have to

758
00:27:30,669 --> 00:27:33,909
learn CSS and that's where we all come

759
00:27:33,909 --> 00:27:36,909
in the CSS in just J's community is not

760
00:27:36,909 --> 00:27:38,619
done yet there's still a whole lot of

761
00:27:38,619 --> 00:27:40,599
innovation happening and that's where we

762
00:27:40,599 --> 00:27:43,059
need to get involved because there's a

763
00:27:43,059 --> 00:27:45,099
bunch of problems that are still being

764
00:27:45,099 --> 00:27:46,719
worked on there's a lot of room for

765
00:27:46,719 --> 00:27:49,119
improvement and and that the the one

766
00:27:49,119 --> 00:27:50,889
library to rule them all has not been

767
00:27:50,889 --> 00:27:52,359
written yet so we're looking at

768
00:27:52,359 --> 00:27:53,919
improving performance we're looking at

769
00:27:53,919 --> 00:27:56,229
extracting static CSS where possible

770
00:27:56,229 --> 00:27:58,659
hopefully as much as possible we've seen

771
00:27:58,659 --> 00:28:00,580
people experiment with targeting CSS

772
00:28:00,580 --> 00:28:02,950
variables rather than targeting the web

773
00:28:02,950 --> 00:28:06,039
of several years ago and finally the

774
00:28:06,039 --> 00:28:07,450
most important thing and I think this is

775
00:28:07,450 --> 00:28:08,950
where the people in this room can help

776
00:28:08,950 --> 00:28:11,019
the most of all is making developers

777
00:28:11,019 --> 00:28:13,049
happy because what we're seeing here is

778
00:28:13,049 --> 00:28:15,609
potentially the future of CSS tooling

779
00:28:15,609 --> 00:28:17,200
and we want to make sure that we get it

780
00:28:17,200 --> 00:28:19,899
right and I really hope that that from

781
00:28:19,899 --> 00:28:22,869
this you you take the message that this

782
00:28:22,869 --> 00:28:25,509
isn't as as ridiculous as it sounds

783
00:28:25,509 --> 00:28:26,589
there's actually some very sound

784
00:28:26,589 --> 00:28:28,359
thinking behind it and your input is

785
00:28:28,359 --> 00:28:29,349
going to be really valuable and

786
00:28:29,349 --> 00:28:31,089
hopefully maybe you've come around to

787
00:28:31,089 --> 00:28:32,379
the fact that there's something to this

788
00:28:32,379 --> 00:28:34,389
and something worth checking out so

789
00:28:34,389 --> 00:28:36,399
that's it for me thank you so much for

790
00:28:36,399 --> 00:28:37,550
listening

791
00:28:37,550 --> 00:28:39,520
[Applause]

