1
00:00:00,180 --> 00:00:13,570

[Music]

2
00:00:13,580 --> 00:00:21,810
everybody I'm with Adobe I Oh quick show

3
00:00:21,810 --> 00:00:26,410
of hands who hasn't heard of service

4
00:00:26,420 --> 00:00:31,250
just a few who is a vegan or vegetarian

5
00:00:31,250 --> 00:00:37,079
here I'll have to apologize in advance

6
00:00:37,079 --> 00:00:39,930
because I'll be showing some some things

7
00:00:39,930 --> 00:00:45,629
might be upsetting so my talk is about

8
00:00:45,629 --> 00:00:48,239
Apache open whisk it's a service

9
00:00:48,239 --> 00:00:53,430
platform also known as FAS which is

10
00:00:53,430 --> 00:00:57,570
functions as a service forgive the corny

11
00:00:57,570 --> 00:01:03,000
pun Who am I I'm part of the Adobe io

12
00:01:03,000 --> 00:01:05,580
team and I'm a longtime PhoneGap in

13
00:01:05,580 --> 00:01:08,640
Apache Cordova contributor you can find

14
00:01:08,640 --> 00:01:10,680
me at twitter or email me directly if

15
00:01:10,680 --> 00:01:18,030
you have questions after this so the

16
00:01:18,030 --> 00:01:23,040
major server server providers i'm just

17
00:01:23,040 --> 00:01:25,740
showcasing four of them here for my

18
00:01:25,740 --> 00:01:29,700
presentations purposes are I like farms

19
00:01:29,700 --> 00:01:32,610
right when you you provision a server is

20
00:01:32,610 --> 00:01:35,549
like buying a whole cow at the end of

21
00:01:35,549 --> 00:01:37,560
the month you get a new cow no matter

22
00:01:37,560 --> 00:01:41,790
what so no matter what if you don't like

23
00:01:41,790 --> 00:01:43,729
the steak or you don't even wanna meet

24
00:01:43,729 --> 00:01:48,030
it's still still wasteful so where the

25
00:01:48,030 --> 00:01:49,439
weather's function says the server's

26
00:01:49,439 --> 00:01:53,369
coming so function says service

27
00:01:53,369 --> 00:01:58,469
landscape right now consists of mainly

28
00:01:58,469 --> 00:02:01,700
Amazon because they're bigger gherla

29
00:02:01,700 --> 00:02:04,770
Microsoft Azure has your functions and

30
00:02:04,770 --> 00:02:09,330
Google platform has their club functions

31
00:02:09,330 --> 00:02:13,110
and at the top there you'll see two

32
00:02:13,110 --> 00:02:17,500
to serverless platforms based on open

33
00:02:17,500 --> 00:02:19,900
Wisc open with the logo on the right

34
00:02:19,900 --> 00:02:22,690
Adobe IO and IBM cloud functions are

35
00:02:22,690 --> 00:02:30,640
based on open risk here's the quick

36
00:02:30,640 --> 00:02:33,370
table about what these serverless

37
00:02:33,370 --> 00:02:36,520
platforms languages they cover as you

38
00:02:36,520 --> 00:02:41,860
can see open Wisc supports the most but

39
00:02:41,860 --> 00:02:43,660
it's an illusion because their market

40
00:02:43,660 --> 00:02:48,310
share is not as big as Amazon so would

41
00:02:48,310 --> 00:02:50,739
the one big thing about open risk is it

42
00:02:50,739 --> 00:02:54,100
can support any compiled language such

43
00:02:54,100 --> 00:02:57,970
as go or C or even rust in a docker

44
00:02:57,970 --> 00:03:01,930
container and they can run it as you can

45
00:03:01,930 --> 00:03:06,640
see here docker is in gray which is for

46
00:03:06,640 --> 00:03:09,100
go so it's not a first-class support but

47
00:03:09,100 --> 00:03:13,030
true a docker container Google only

48
00:03:13,030 --> 00:03:17,859
scores note for now and as your only

49
00:03:17,859 --> 00:03:22,480
supports a few this list is current as

50
00:03:22,480 --> 00:03:26,079
of a few days ago so maybe Amazonas

51
00:03:26,079 --> 00:03:29,670
supports something new there right so

52
00:03:29,670 --> 00:03:36,940
what I'm talking about is sausages so

53
00:03:36,940 --> 00:03:39,549
you don't care what where all the meat

54
00:03:39,549 --> 00:03:40,959
comes from you care about a sausage

55
00:03:40,959 --> 00:03:42,760
that's essentially what server list is

56
00:03:42,760 --> 00:03:45,730
it's not a perfect metaphor but I work

57
00:03:45,730 --> 00:03:49,780
with me so you pay money you get what

58
00:03:49,780 --> 00:03:51,519
you want sausages you don't care about

59
00:03:51,519 --> 00:03:53,290
other parts of the meat are wasted all

60
00:03:53,290 --> 00:03:56,910
that waste becomes sausage so I mean

61
00:03:56,910 --> 00:04:00,280
that's a metaphor I'm going for so as

62
00:04:00,280 --> 00:04:05,319
you probably see how Amazon does lambda

63
00:04:05,319 --> 00:04:07,239
Google does lambda but you don't know

64
00:04:07,239 --> 00:04:09,780
how the sausage is made

65
00:04:09,780 --> 00:04:14,019
I'm gonna go into a little bit of how

66
00:04:14,019 --> 00:04:19,120
open waste works so a little bit of

67
00:04:19,120 --> 00:04:24,640
trivia about open risk it was code named

68
00:04:24,640 --> 00:04:27,120
Wisc from IBM research

69
00:04:27,120 --> 00:04:32,560
but why whisk whisk is being moved

70
00:04:32,560 --> 00:04:36,490
nimbly and quickly and the code runs

71
00:04:36,490 --> 00:04:38,680
quickly and guest gets whisked away

72
00:04:38,680 --> 00:04:42,340
that's essentially what surrealist says

73
00:04:42,340 --> 00:04:45,189
in the open west context it runs a

74
00:04:45,189 --> 00:04:47,830
docker container and it quickly goes

75
00:04:47,830 --> 00:04:51,520
away and also it was chosen for an easy

76
00:04:51,520 --> 00:04:55,330
three letter CLI and of course open

77
00:04:55,330 --> 00:04:59,409
means open source and open risk so let's

78
00:04:59,409 --> 00:05:04,389
see the what open waste is made of so as

79
00:05:04,389 --> 00:05:05,620
you can see there's a lot of open source

80
00:05:05,620 --> 00:05:08,379
technologies concerned that open risk

81
00:05:08,379 --> 00:05:12,069
consists of nginx which in simple terms

82
00:05:12,069 --> 00:05:15,759
is just a web server Kafka simple terms

83
00:05:15,759 --> 00:05:19,060
message queue cache Libby as a database

84
00:05:19,060 --> 00:05:22,180
and docker is a container the docker

85
00:05:22,180 --> 00:05:29,259
container let me go back so you see the

86
00:05:29,259 --> 00:05:32,560
top right there's that the golang mascot

87
00:05:32,560 --> 00:05:38,680
and skaila people developers develop in

88
00:05:38,680 --> 00:05:42,279
Scylla to implement a lot of

89
00:05:42,279 --> 00:05:44,289
functionality and open whisk and the

90
00:05:44,289 --> 00:05:48,099
goal part is the go CL the risk CLI is

91
00:05:48,099 --> 00:05:53,349
implemented and go so if any of you are

92
00:05:53,349 --> 00:05:55,029
proficient in any of these technologies

93
00:05:55,029 --> 00:05:57,909
I welcome you to contribute to the open

94
00:05:57,909 --> 00:06:00,819
source project so who are the

95
00:06:00,819 --> 00:06:03,819
contributors to open whisk the biggest

96
00:06:03,819 --> 00:06:08,349
four are of course IBM who who donated

97
00:06:08,349 --> 00:06:12,639
project to Apache and the project is not

98
00:06:12,639 --> 00:06:14,469
a top-level project yet but it's in

99
00:06:14,469 --> 00:06:17,919
incubation and of course the Bilby who I

100
00:06:17,919 --> 00:06:18,430
work for

101
00:06:18,430 --> 00:06:22,150
and Red Hat and Samsung to a limited

102
00:06:22,150 --> 00:06:24,129
part and a lot of other independent

103
00:06:24,129 --> 00:06:29,520
consultants

104
00:06:29,530 --> 00:06:32,200
so open within a nutshell let's describe

105
00:06:32,200 --> 00:06:34,050
how it works

106
00:06:34,050 --> 00:06:37,020
take for example an invent that comes in

107
00:06:37,020 --> 00:06:39,970
so you see in the top left for example

108
00:06:39,970 --> 00:06:42,880
from a device like a rain sensor the

109
00:06:42,880 --> 00:06:45,160
invent source which is a rain sensor

110
00:06:45,160 --> 00:06:50,170
we'll call a trigger the trigger is for

111
00:06:50,170 --> 00:06:52,540
example it's called you know rain is

112
00:06:52,540 --> 00:06:55,420
falling which is associated to a rule

113
00:06:55,420 --> 00:06:58,120
which is a one-to-one mapping between a

114
00:06:58,120 --> 00:07:02,770
trigger and a rule but each rule maps to

115
00:07:02,770 --> 00:07:05,740
multiple actions so the action could be

116
00:07:05,740 --> 00:07:07,930
logging rainfall for example and each

117
00:07:07,930 --> 00:07:10,120
layer is designed to scale independently

118
00:07:10,120 --> 00:07:14,540
and that's open within a nutshell

119
00:07:14,550 --> 00:07:17,140
so what are the benefits of the open

120
00:07:17,140 --> 00:07:21,280
whisk this is not just specific to open

121
00:07:21,280 --> 00:07:24,760
waste but to functions and as a service

122
00:07:24,760 --> 00:07:27,550
in general the first thing is to pay as

123
00:07:27,550 --> 00:07:31,860
you go so you pay only for what you use

124
00:07:31,860 --> 00:07:34,840
efficient use of resources for both for

125
00:07:34,840 --> 00:07:39,070
you and the vendor elasticity auto

126
00:07:39,070 --> 00:07:40,300
scaling you don't have to worry about

127
00:07:40,300 --> 00:07:46,180
spinning more servers heterogeneous

128
00:07:46,180 --> 00:07:47,680
development so your team can use

129
00:07:47,680 --> 00:07:49,840
multiple languages and skill sets so you

130
00:07:49,840 --> 00:07:54,490
don't have to get for example someone

131
00:07:54,490 --> 00:07:56,250
that knows that certain language only

132
00:07:56,250 --> 00:08:00,040
for example open with support swift so

133
00:08:00,040 --> 00:08:04,390
if your team is heavy and iOS Swift they

134
00:08:04,390 --> 00:08:07,440
can do service it's with an open risk

135
00:08:07,440 --> 00:08:10,690
and one of the biggest things is

136
00:08:10,690 --> 00:08:12,640
on-premise deployment and testing

137
00:08:12,640 --> 00:08:13,450
offline

138
00:08:13,450 --> 00:08:16,660
so you don't have to have it hosted by

139
00:08:16,660 --> 00:08:18,490
Amazon you can host it in your own data

140
00:08:18,490 --> 00:08:23,410
center and also one of the big things is

141
00:08:23,410 --> 00:08:25,210
you can chain actions without extra

142
00:08:25,210 --> 00:08:28,030
coding so you from inputs and outputs

143
00:08:28,030 --> 00:08:30,790
for each action you can chain them

144
00:08:30,790 --> 00:08:32,140
together through the command line to

145
00:08:32,140 --> 00:08:36,290
link them without writing any extra code

146
00:08:36,300 --> 00:08:38,950
you can chain actions for example if

147
00:08:38,950 --> 00:08:41,260
action one does a video upload

148
00:08:41,260 --> 00:08:44,020
input is some video data and output is a

149
00:08:44,020 --> 00:08:46,690
URL the second action will get your URL

150
00:08:46,690 --> 00:08:49,480
and it will output analysis for example

151
00:08:49,480 --> 00:08:56,320
for machine learning learning and

152
00:08:56,320 --> 00:08:58,900
finally the biggest thing that I care

153
00:08:58,900 --> 00:09:00,880
about is it's open source and there's no

154
00:09:00,880 --> 00:09:07,270
vendor lock-in there's a quick start of

155
00:09:07,270 --> 00:09:10,540
how does you run open risk that's a QR

156
00:09:10,540 --> 00:09:12,730
code if you want to go to it's not

157
00:09:12,730 --> 00:09:15,730
particularly quick for you to run it but

158
00:09:15,730 --> 00:09:23,860
uh so James Thomas from IBM wrote a blog

159
00:09:23,860 --> 00:09:27,010
post how to run open ways quickly so

160
00:09:27,010 --> 00:09:32,230
first you gotta install doctor and then

161
00:09:32,230 --> 00:09:34,300
you run this make file and it will

162
00:09:34,300 --> 00:09:36,220
install everything that you saw there

163
00:09:36,220 --> 00:09:42,760
there I did I show you nginx Kafka and

164
00:09:42,760 --> 00:09:45,640
everything so once you run it you use a

165
00:09:45,640 --> 00:09:47,560
make file again to control it stop and

166
00:09:47,560 --> 00:09:52,500
run so after you've done the open wisk

167
00:09:52,500 --> 00:09:54,790
QuickStart you can run the open waste

168
00:09:54,790 --> 00:09:59,680
workshop it's a simple npm install as

169
00:09:59,680 --> 00:10:03,400
you can see it covers all the features

170
00:10:03,400 --> 00:10:06,070
of open risk that will take you a few

171
00:10:06,070 --> 00:10:08,710
hours which we don't have time to cover

172
00:10:08,710 --> 00:10:14,710
today so i'm gonna show you how to

173
00:10:14,710 --> 00:10:18,010
create an action quickly since i'm not

174
00:10:18,010 --> 00:10:21,370
gonna be doing a demo so the open way

175
00:10:21,370 --> 00:10:24,790
CLI is called wsk so it's a simple wrist

176
00:10:24,790 --> 00:10:27,010
action create action name

177
00:10:27,010 --> 00:10:32,200
that's your javascript file and update

178
00:10:32,200 --> 00:10:35,320
and finally an invoke and invoke you

179
00:10:35,320 --> 00:10:38,710
pass parameters to it and you receive

180
00:10:38,710 --> 00:10:42,880
something back and standard out so that

181
00:10:42,880 --> 00:10:47,860
just creates the action on your local

182
00:10:47,860 --> 00:10:49,120
server but you want to expose it to the

183
00:10:49,120 --> 00:10:52,360
web so how do you do that create a

184
00:10:52,360 --> 00:10:54,880
package and you do to see the same

185
00:10:54,880 --> 00:10:59,080
a method but you pass a path and some

186
00:10:59,080 --> 00:11:03,900
some parameters and annotation web true

187
00:11:03,900 --> 00:11:07,060
so and once you create that you press

188
00:11:07,060 --> 00:11:10,770
get and - - URL and you'll get that URL

189
00:11:10,770 --> 00:11:16,870
that is exposed to external users so

190
00:11:16,870 --> 00:11:18,910
what's in an action file if you've done

191
00:11:18,910 --> 00:11:22,930
C or Java you know there's a main

192
00:11:22,930 --> 00:11:25,420
function that's called as the main part

193
00:11:25,420 --> 00:11:27,940
of your program is the same in your

194
00:11:27,940 --> 00:11:31,360
JavaScript for open risk so the main

195
00:11:31,360 --> 00:11:34,600
main function takes prompt parameter

196
00:11:34,600 --> 00:11:40,510
object and you can use that and when you

197
00:11:40,510 --> 00:11:43,140
return from the web action the main

198
00:11:43,140 --> 00:11:49,300
important part is the body and the

199
00:11:49,300 --> 00:11:51,310
params also contain metadata for the

200
00:11:51,310 --> 00:11:54,880
running task so if you're doing an

201
00:11:54,880 --> 00:11:58,420
action file what about NPM packages if

202
00:11:58,420 --> 00:12:01,180
you've done any aw slap in your it WS

203
00:12:01,180 --> 00:12:04,390
lambda you'll you'll know that you npm

204
00:12:04,390 --> 00:12:06,160
install your package with your action

205
00:12:06,160 --> 00:12:08,530
code and you zip the whole folder up and

206
00:12:08,530 --> 00:12:11,070
upload the zip instead of action j s

207
00:12:11,070 --> 00:12:13,780
however for native code and PM packages

208
00:12:13,780 --> 00:12:16,000
you have to npm install to a docker

209
00:12:16,000 --> 00:12:18,400
container that's the same environment as

210
00:12:18,400 --> 00:12:21,220
your server aslam runtime so they can it

211
00:12:21,220 --> 00:12:23,530
can get the same same architecture

212
00:12:23,530 --> 00:12:27,220
before you upload it and open waste as a

213
00:12:27,220 --> 00:12:30,730
48 Meg upload limit but there's this

214
00:12:30,730 --> 00:12:34,840
workarounds available that you can do

215
00:12:34,840 --> 00:12:37,090
where you can package your NPM packages

216
00:12:37,090 --> 00:12:39,880
in a docker container that your server

217
00:12:39,880 --> 00:12:42,460
can reference so what you work around

218
00:12:42,460 --> 00:12:48,250
that for you my limit so you've you've

219
00:12:48,250 --> 00:12:50,110
defined all your actions and how do you

220
00:12:50,110 --> 00:12:56,540
deploy it right so open with recently

221
00:12:56,550 --> 00:12:59,610
helped contribute to a plugin to the

222
00:12:59,610 --> 00:13:03,339
serverless framework Cerberus framework

223
00:13:03,339 --> 00:13:07,360
is a not affiliated with open ways it's

224
00:13:07,360 --> 00:13:08,230
an in-depth

225
00:13:08,230 --> 00:13:11,440
project and it helps people abstract the

226
00:13:11,440 --> 00:13:14,560
deployment to all the different server

227
00:13:14,560 --> 00:13:17,590
list platforms I encourage you to check

228
00:13:17,590 --> 00:13:19,960
it out so you can use that to deploy to

229
00:13:19,960 --> 00:13:24,930
open whisk or lambda or a Google or zero

230
00:13:24,930 --> 00:13:28,960
so final part I want to talk about it

231
00:13:28,960 --> 00:13:32,320
maybe I'll run time WI writing time is

232
00:13:32,320 --> 00:13:36,610
based on open whisk it's just like IBM

233
00:13:36,610 --> 00:13:37,960
platform since it's based on open waste

234
00:13:37,960 --> 00:13:41,680
like the way PhoneGap or ionic is based

235
00:13:41,680 --> 00:13:44,170
on Apache Cordova like a browser has its

236
00:13:44,170 --> 00:13:47,380
engine so I don't we have you run times

237
00:13:47,380 --> 00:13:50,110
engine is open whisk it's built on open

238
00:13:50,110 --> 00:13:54,010
waste and it uses the same tools it

239
00:13:54,010 --> 00:13:55,810
helps our internal themes leverage

240
00:13:55,810 --> 00:13:59,860
server lists to other functions within

241
00:13:59,860 --> 00:14:03,910
the enterprise unless our customers and

242
00:14:03,910 --> 00:14:05,710
devs extend and build interesting things

243
00:14:05,710 --> 00:14:07,660
based on our data because we have a lot

244
00:14:07,660 --> 00:14:09,790
of data adobe is known for their

245
00:14:09,790 --> 00:14:11,890
creative products but we were also known

246
00:14:11,890 --> 00:14:17,770
for our analytics and marketing cloud so

247
00:14:17,770 --> 00:14:19,630
it's pre integrated with the way io

248
00:14:19,630 --> 00:14:22,360
events an api gateway and you will have

249
00:14:22,360 --> 00:14:24,760
the easy and your access to all adobe

250
00:14:24,760 --> 00:14:27,310
api's if you go to Adobe that I you will

251
00:14:27,310 --> 00:14:30,760
see all the API is available to all

252
00:14:30,760 --> 00:14:36,940
users finally thank you thank you to

253
00:14:36,940 --> 00:14:39,760
everyone for listening to the desktop

254
00:14:39,760 --> 00:14:41,440
it's a quick server your own server list

255
00:14:41,440 --> 00:14:43,190
thank you

