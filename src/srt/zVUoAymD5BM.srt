1
00:00:32,020 --> 00:00:35,180

alright so this is our final talk of the

2
00:00:35,180 --> 00:00:38,449
evening in case it wasn't incredibly

3
00:00:38,449 --> 00:00:42,140
obvious this has been a lie this is not

4
00:00:42,140 --> 00:00:44,899
alex russell or fake alex russell or

5
00:00:44,899 --> 00:00:47,089
anybody like that or maybe it is fake

6
00:00:47,089 --> 00:00:49,280
alex for us as it they it is actually

7
00:00:49,280 --> 00:00:51,110
fake alex russell so it isn't actually

8
00:00:51,110 --> 00:00:55,809
technically a lie Pete's got a little

9
00:00:55,809 --> 00:00:58,220
wonderful announcement hot on the heels

10
00:00:58,220 --> 00:01:00,860
of another announcement this is our

11
00:01:00,860 --> 00:01:03,559
final talk this is what some of us would

12
00:01:03,559 --> 00:01:05,950
like to call the PS de resistance of

13
00:01:05,950 --> 00:01:08,930
JavaScript in jazz comp if Andrew Lonnie

14
00:01:08,930 --> 00:01:15,200
would be a little bit quieter oh nice

15
00:01:15,200 --> 00:01:22,810
pants short it short it short it so is

16
00:01:22,810 --> 00:01:34,720
the projector working it's not o net I

17
00:01:34,720 --> 00:01:36,800
can just actually give my talk in front

18
00:01:36,800 --> 00:01:38,270
of a blank screen because it's all in my

19
00:01:38,270 --> 00:01:43,430
head sorry about the technical

20
00:01:43,430 --> 00:01:46,880
difficulties it must use dojo back there

21
00:01:46,880 --> 00:01:51,049
in the back end um which actually brings

22
00:01:51,049 --> 00:01:53,540
me to to my announcement I am in case

23
00:01:53,540 --> 00:01:55,610
you do not know or not aware of this i

24
00:01:55,610 --> 00:01:58,100
am peter higgins a project lead of the

25
00:01:58,100 --> 00:02:02,900
dojo toolkit yeah there's got mixed

26
00:02:02,900 --> 00:02:06,229
emotions on that one um so and I

27
00:02:06,229 --> 00:02:08,509
actually inherited it from alex russell

28
00:02:08,509 --> 00:02:12,170
fake alex russell was fallax he he left

29
00:02:12,170 --> 00:02:16,730
and i have since decided kind of falling

30
00:02:16,730 --> 00:02:19,159
on the the shirt tales of john leaving

31
00:02:19,159 --> 00:02:21,049
mozilla everyone knows about that John's

32
00:02:21,049 --> 00:02:23,180
left Mozilla for the Khan Academy yeah

33
00:02:23,180 --> 00:02:28,250
good good good stuff I'm actually taking

34
00:02:28,250 --> 00:02:30,049
over his project lead of the jQuery

35
00:02:30,049 --> 00:02:34,350
project

36
00:02:34,360 --> 00:02:37,159
it's a very very exciting time for all

37
00:02:37,159 --> 00:02:42,939
of us I'm renaming the tagline to the

38
00:02:42,939 --> 00:02:54,140
right more do less library and we're

39
00:02:54,140 --> 00:02:56,540
going with we're going with the

40
00:02:56,540 --> 00:03:05,490
synchronous module system for node so

41
00:03:05,500 --> 00:03:08,180
this is actually it was going to be my I

42
00:03:08,180 --> 00:03:11,209
have a whole slide deck on my my

43
00:03:11,209 --> 00:03:13,670
thoughts on the greatness that this

44
00:03:13,670 --> 00:03:16,250
transition will be and just the whole

45
00:03:16,250 --> 00:03:17,659
common brow if I don't know if anybody

46
00:03:17,659 --> 00:03:19,579
was here for the the Berlin talk that I

47
00:03:19,579 --> 00:03:21,260
did the same exact talk who's ultimately

48
00:03:21,260 --> 00:03:24,319
the same exact talk in Berlin the common

49
00:03:24,319 --> 00:03:27,290
browser j/s and how we need to kind of

50
00:03:27,290 --> 00:03:30,319
unify and agree on a loader and agree on

51
00:03:30,319 --> 00:03:32,000
a micro framework that we can start from

52
00:03:32,000 --> 00:03:35,689
or I'll you didn't laugh at that one you

53
00:03:35,689 --> 00:03:37,010
guys really like the micro framework

54
00:03:37,010 --> 00:03:41,120
thing don't you ok that's good that's

55
00:03:41,120 --> 00:03:44,569
good i'm having a tough crowd Chris why

56
00:03:44,569 --> 00:03:45,859
can't I get my slides up there's all

57
00:03:45,859 --> 00:03:51,290
sorts of funny in my slides gonna

58
00:03:51,290 --> 00:03:56,340
need that back thanks

59
00:03:56,340 --> 00:04:06,880
thank you for your time

60
00:04:06,890 --> 00:04:12,610
hey everybody I'm the real out Russell

61
00:04:12,620 --> 00:04:20,190
get a lot of that uh awesome so last

62
00:04:20,190 --> 00:04:22,910
year they had Chris our inimitable

63
00:04:22,910 --> 00:04:26,220
organizer had me followed Brendan which

64
00:04:26,220 --> 00:04:27,509
was an incredibly tough act to follow

65
00:04:27,509 --> 00:04:30,030
and many including myself will say I

66
00:04:30,030 --> 00:04:32,070
didn't actually live up to the task so I

67
00:04:32,070 --> 00:04:34,080
think as penance he decided to make him

68
00:04:34,080 --> 00:04:35,400
do it again this year to see if I can do

69
00:04:35,400 --> 00:04:40,039
better and we'll find out so uh

70
00:04:40,039 --> 00:04:44,580
something like 3-4 months ago I started

71
00:04:44,580 --> 00:04:48,240
something of a blog fight about our

72
00:04:48,240 --> 00:04:52,830
favorite new Debbie God feature

73
00:04:52,830 --> 00:04:55,199
detection which we've sort of all taken

74
00:04:55,199 --> 00:04:58,139
as on the client side anyway the way to

75
00:04:58,139 --> 00:04:59,639
do it right you know we want to build

76
00:04:59,639 --> 00:05:04,710
robust sustainable web apps and

77
00:05:04,710 --> 00:05:05,910
JavaScript frameworks that are going to

78
00:05:05,910 --> 00:05:07,229
stand the test of time that aren't going

79
00:05:07,229 --> 00:05:09,060
to be subject to significant drift as

80
00:05:09,060 --> 00:05:11,039
the browser population upgrades as new

81
00:05:11,039 --> 00:05:13,020
things get introduced into the world

82
00:05:13,020 --> 00:05:14,430
like we want the future to look

83
00:05:14,430 --> 00:05:16,680
different so we wanted to involve a lot

84
00:05:16,680 --> 00:05:18,419
of new and different user agents we

85
00:05:18,419 --> 00:05:19,620
don't want to just have the same ones

86
00:05:19,620 --> 00:05:20,520
that we've always had we want

87
00:05:20,520 --> 00:05:21,690
competition to work and we want to be

88
00:05:21,690 --> 00:05:23,699
able to have the code that we write live

89
00:05:23,699 --> 00:05:25,530
inside that world the way everything

90
00:05:25,530 --> 00:05:29,729
else does so I posited that you don't

91
00:05:29,729 --> 00:05:32,610
want to make Steve Souders mad Steve's a

92
00:05:32,610 --> 00:05:34,289
really nice guy if you know him but you

93
00:05:34,289 --> 00:05:36,810
don't really want to make him mad a

94
00:05:36,810 --> 00:05:38,729
nicer don't because I work with him and

95
00:05:38,729 --> 00:05:40,259
he can actually walk over to my desk and

96
00:05:40,259 --> 00:05:42,000
sort of you know like look very

97
00:05:42,000 --> 00:05:43,560
disappointed in me and that's that's

98
00:05:43,560 --> 00:05:49,349
hard to take so Steve wrote a last fall

99
00:05:49,349 --> 00:05:51,479
that the key to creating fast user

100
00:05:51,479 --> 00:05:53,130
experience in today's web sites is to

101
00:05:53,130 --> 00:05:55,169
render pages as quickly as possible and

102
00:05:55,169 --> 00:05:57,030
to achieve this JavaScript loading an

103
00:05:57,030 --> 00:05:59,669
execution have to be deferred right my

104
00:05:59,669 --> 00:06:02,430
bad paraphrase uh but but his point here

105
00:06:02,430 --> 00:06:04,229
is that in order to make anything fast

106
00:06:04,229 --> 00:06:06,300
in the web today javascript winds up in

107
00:06:06,300 --> 00:06:07,380
the way and it winds up in the way in a

108
00:06:07,380 --> 00:06:11,520
couple of different different ways so I

109
00:06:11,520 --> 00:06:14,969
tried to paint the picture for how we

110
00:06:14,969 --> 00:06:16,560
might get around this right how we might

111
00:06:16,560 --> 00:06:19,889
use some sort of a cache on

112
00:06:19,889 --> 00:06:21,479
client-side to help us determine whether

113
00:06:21,479 --> 00:06:23,400
or not we can do this and I think my

114
00:06:23,400 --> 00:06:24,780
point was lost because what I didn't

115
00:06:24,780 --> 00:06:26,789
discuss necessarily was enough of the

116
00:06:26,789 --> 00:06:28,969
ways that the core of the browser

117
00:06:28,969 --> 00:06:31,379
rendering pipeline makes life difficult

118
00:06:31,379 --> 00:06:32,909
if you're going to be relying on

119
00:06:32,909 --> 00:06:33,900
JavaScript for everything this is

120
00:06:33,900 --> 00:06:35,759
JavaScript conference and for the second

121
00:06:35,759 --> 00:06:37,590
year in a row in a row I'm here to tell

122
00:06:37,590 --> 00:06:38,909
you to use a little bit less javascript

123
00:06:38,909 --> 00:06:40,460
in places where it might be problematic

124
00:06:40,460 --> 00:06:43,139
so things that blocks up right and those

125
00:06:43,139 --> 00:06:44,819
include in a browser environment DNS

126
00:06:44,819 --> 00:06:46,229
lookup right you can't go fetch any

127
00:06:46,229 --> 00:06:48,270
resource until you actually go figure

128
00:06:48,270 --> 00:06:49,979
out we're going to get it from you can't

129
00:06:49,979 --> 00:06:51,659
necessarily do anything while javascript

130
00:06:51,659 --> 00:06:53,159
is parsing and compiling if you're

131
00:06:53,159 --> 00:06:54,360
actually counting on the result of that

132
00:06:54,360 --> 00:06:57,810
of that evaluation script downloads

133
00:06:57,810 --> 00:07:00,810
block rendering synchronous ex hrs block

134
00:07:00,810 --> 00:07:02,400
everything of course and jobs to

135
00:07:02,400 --> 00:07:04,620
execution again like synchronous xhr

136
00:07:04,620 --> 00:07:06,120
blocks everything because there's the

137
00:07:06,120 --> 00:07:08,189
you know run a completion model of

138
00:07:08,189 --> 00:07:10,050
javascript in the browser so this

139
00:07:10,050 --> 00:07:11,990
presents a series of challenges and

140
00:07:11,990 --> 00:07:15,569
feature detection can really hurt you in

141
00:07:15,569 --> 00:07:16,740
a bunch of these places so if you're

142
00:07:16,740 --> 00:07:17,849
relying if you're building your

143
00:07:17,849 --> 00:07:20,849
application based on a tall stack of

144
00:07:20,849 --> 00:07:22,439
stuff that's going to have at the core

145
00:07:22,439 --> 00:07:23,669
of it at the very front of it so I'm

146
00:07:23,669 --> 00:07:25,469
feature detection to add classes or to

147
00:07:25,469 --> 00:07:29,310
go set up the world for CSS or for other

148
00:07:29,310 --> 00:07:31,800
parts of your application to go start to

149
00:07:31,800 --> 00:07:33,449
play you're putting javascript in the

150
00:07:33,449 --> 00:07:34,800
way in front of everything else and this

151
00:07:34,800 --> 00:07:36,270
turns into a real problem specifically

152
00:07:36,270 --> 00:07:38,279
when you're trying to get to a rich you

153
00:07:38,279 --> 00:07:40,199
I in a constrained environment so let's

154
00:07:40,199 --> 00:07:41,339
talk about those constraints because

155
00:07:41,339 --> 00:07:43,649
this is the this is the new world right

156
00:07:43,649 --> 00:07:45,599
this is the new promised land the mobile

157
00:07:45,599 --> 00:07:47,699
web is where it's at and if you don't

158
00:07:47,699 --> 00:07:48,779
think that that's where it's at then

159
00:07:48,779 --> 00:07:49,860
you're probably not paying close enough

160
00:07:49,860 --> 00:07:53,279
attention so um at the high end we're

161
00:07:53,279 --> 00:07:54,659
getting significantly better hardware

162
00:07:54,659 --> 00:07:56,039
every day the networks are getting

163
00:07:56,039 --> 00:07:58,589
somewhat better but we're still limited

164
00:07:58,589 --> 00:08:00,300
right we've got single core as the top

165
00:08:00,300 --> 00:08:01,500
of the line right now we're about to get

166
00:08:01,500 --> 00:08:03,659
to a core we've got limited RAM and it's

167
00:08:03,659 --> 00:08:04,800
shared ram across everything in the

168
00:08:04,800 --> 00:08:06,270
system right it's significantly better

169
00:08:06,270 --> 00:08:08,039
than what I took to college with me but

170
00:08:08,039 --> 00:08:11,430
um and that's how old I am but it's

171
00:08:11,430 --> 00:08:12,810
still not great right compared to what

172
00:08:12,810 --> 00:08:14,129
you're doing in your desktop where I

173
00:08:14,129 --> 00:08:16,800
just got like dual quad core xeons with

174
00:08:16,800 --> 00:08:19,379
16 gig of ram the other day okay that's

175
00:08:19,379 --> 00:08:21,389
pretty good and it looks nothing like my

176
00:08:21,389 --> 00:08:23,879
phone so the same sorts of techniques

177
00:08:23,879 --> 00:08:25,349
that we're using might have to adapt a

178
00:08:25,349 --> 00:08:28,259
little bit so there's a lot more that's

179
00:08:28,259 --> 00:08:29,519
different right some of these things are

180
00:08:29,519 --> 00:08:30,899
good some of these things are bad but

181
00:08:30,899 --> 00:08:32,760
effectively if we think about the single

182
00:08:32,760 --> 00:08:33,760
threaded rendering

183
00:08:33,760 --> 00:08:36,160
execution model of the browser none of

184
00:08:36,160 --> 00:08:37,330
these things do is a big favor when

185
00:08:37,330 --> 00:08:39,010
they're better and a lot of them are

186
00:08:39,010 --> 00:08:40,270
worse when they're not we don't have

187
00:08:40,270 --> 00:08:42,580
better speculative execution on top of

188
00:08:42,580 --> 00:08:45,520
ARM processors the bus bandwidth is

189
00:08:45,520 --> 00:08:48,640
relatively lower we're in a world of

190
00:08:48,640 --> 00:08:51,460
hurt um okay I'm sorry I can't do this

191
00:08:51,460 --> 00:08:54,820
anymore this is really freaking boring I

192
00:08:54,820 --> 00:08:59,290
can't be good yeah so um let's not talk

193
00:08:59,290 --> 00:09:01,270
about that let's talk about something

194
00:09:01,270 --> 00:09:09,940
much better and I want to apologize to

195
00:09:09,940 --> 00:09:11,260
everyone who came here to hear the

196
00:09:11,260 --> 00:09:12,760
feature detection talk we can do that

197
00:09:12,760 --> 00:09:15,070
over beer later but future detection

198
00:09:15,070 --> 00:09:17,260
like just ask Steve what'll make your

199
00:09:17,260 --> 00:09:18,910
web app fast he'll he'll be happy to

200
00:09:18,910 --> 00:09:22,200
tell you I don't need to do that for him

201
00:09:22,200 --> 00:09:24,700
don't don't make stuff slow all right

202
00:09:24,700 --> 00:09:26,430
but what I really want to talk about is

203
00:09:26,430 --> 00:09:29,620
JavaScript and how we can get to a place

204
00:09:29,620 --> 00:09:31,960
where when you write javascript in your

205
00:09:31,960 --> 00:09:35,050
application it can sort of read like the

206
00:09:35,050 --> 00:09:38,080
way you wanted to say what you met the

207
00:09:38,080 --> 00:09:39,940
last several talks and a bunch of the

208
00:09:39,940 --> 00:09:41,530
stuff that's talked about new features

209
00:09:41,530 --> 00:09:43,030
for the language in the last couple of

210
00:09:43,030 --> 00:09:44,710
days have been incredibly inspiring

211
00:09:44,710 --> 00:09:46,510
about how we can move the language

212
00:09:46,510 --> 00:09:48,190
forward about what sorts of things are

213
00:09:48,190 --> 00:09:49,630
coming and teach 39 what sorts of things

214
00:09:49,630 --> 00:09:51,670
are coming at the hest of libraries and

215
00:09:51,670 --> 00:09:53,740
you know me right like the joke about

216
00:09:53,740 --> 00:09:57,670
the the right more do less library is

217
00:09:57,670 --> 00:10:00,160
not a so subtle dig at me in part

218
00:10:00,160 --> 00:10:02,050
because I've attempted to work in this

219
00:10:02,050 --> 00:10:05,860
world to try to make libraries a way to

220
00:10:05,860 --> 00:10:08,500
get what we want right but they have

221
00:10:08,500 --> 00:10:10,060
these constraints put on them so if your

222
00:10:10,060 --> 00:10:12,520
library happens to live you know at the

223
00:10:12,520 --> 00:10:14,800
top level in a page you know is it the

224
00:10:14,800 --> 00:10:18,850
thing that's blessed you know the talk

225
00:10:18,850 --> 00:10:20,800
we had yesterday about scope objects

226
00:10:20,800 --> 00:10:23,560
extensions was amazing because it's set

227
00:10:23,560 --> 00:10:25,600
up this incredible narrative about the

228
00:10:25,600 --> 00:10:27,160
limited power of libraries to solve a

229
00:10:27,160 --> 00:10:28,540
lot of the questions that we've got and

230
00:10:28,540 --> 00:10:30,910
it set up the language as the only place

231
00:10:30,910 --> 00:10:32,530
to necessarily solve the Tower of Babel

232
00:10:32,530 --> 00:10:34,750
problem and this continues to this day

233
00:10:34,750 --> 00:10:38,920
so I want to now you know bring out my

234
00:10:38,920 --> 00:10:40,300
good friend and colleague Peter Hallam

235
00:10:40,300 --> 00:10:42,310
to help fill us in on the rest of the

236
00:10:42,310 --> 00:10:45,160
story and give you a sense for what it

237
00:10:45,160 --> 00:10:46,120
is that we're doing on the chrome team

238
00:10:46,120 --> 00:10:47,130
to help

239
00:10:47,130 --> 00:10:48,990
you be able to say what you mean in

240
00:10:48,990 --> 00:10:59,730
JavaScript thanks Alex everyone all

241
00:10:59,730 --> 00:11:03,000
right um my name is Peter Hallam I work

242
00:11:03,000 --> 00:11:08,940
at Google and a few months ago Alex kind

243
00:11:08,940 --> 00:11:10,140
of put the word out that he was looking

244
00:11:10,140 --> 00:11:14,250
for people to help him with the future

245
00:11:14,250 --> 00:11:17,030
of JavaScript and I'm a language guy

246
00:11:17,030 --> 00:11:19,470
spent 10 years at Microsoft working on C

247
00:11:19,470 --> 00:11:22,890
sharp and when I heard that he was

248
00:11:22,890 --> 00:11:24,180
looking for someone to work on languages

249
00:11:24,180 --> 00:11:26,220
that was an offer that I just could not

250
00:11:26,220 --> 00:11:35,460
refuse so that sort of brings me here it

251
00:11:35,460 --> 00:11:38,220
continually amazes me what people can do

252
00:11:38,220 --> 00:11:41,220
in the browser you know it's not just a

253
00:11:41,220 --> 00:11:44,220
little event handlers anymore people are

254
00:11:44,220 --> 00:11:46,740
actually writing real applications this

255
00:11:46,740 --> 00:11:51,150
is a favorite of mine pac-man had a game

256
00:11:51,150 --> 00:11:53,780
of that last night at the at the arcade

257
00:11:53,780 --> 00:11:57,720
and you know as people are writing

258
00:11:57,720 --> 00:11:59,880
larger and larger applications you're

259
00:11:59,880 --> 00:12:01,890
seeing all these libraries that are

260
00:12:01,890 --> 00:12:03,930
getting written to help to help people

261
00:12:03,930 --> 00:12:09,330
write these large applications and and

262
00:12:09,330 --> 00:12:11,160
over and over again you're seeing that

263
00:12:11,160 --> 00:12:13,110
these libraries are solving the same

264
00:12:13,110 --> 00:12:18,600
kinds of problems and when we're talking

265
00:12:18,600 --> 00:12:21,080
about the future of length of JavaScript

266
00:12:21,080 --> 00:12:23,640
you know this is kind of where we need

267
00:12:23,640 --> 00:12:27,060
to start for finding you know what we

268
00:12:27,060 --> 00:12:29,670
should be doing to the language this is

269
00:12:29,670 --> 00:12:31,620
a quote by another famous language

270
00:12:31,620 --> 00:12:35,520
designer Sharon's true strip library is

271
00:12:35,520 --> 00:12:37,440
a language design is library design and

272
00:12:37,440 --> 00:12:40,140
library design is language design so

273
00:12:40,140 --> 00:12:42,150
everybody out there who's been working

274
00:12:42,150 --> 00:12:46,290
on your favorite JavaScript library you

275
00:12:46,290 --> 00:12:48,060
know you've really been taking the first

276
00:12:48,060 --> 00:12:50,940
steps to basically designing the future

277
00:12:50,940 --> 00:12:57,000
of JavaScript so I want to talk a little

278
00:12:57,000 --> 00:12:58,800
bit I'm going to make this kind of short

279
00:12:58,800 --> 00:13:00,330
cuz I'm we're going over time but a

280
00:13:00,330 --> 00:13:00,960
little

281
00:13:00,960 --> 00:13:03,060
but just a couple of things that you

282
00:13:03,060 --> 00:13:05,430
know we're thinking of in terms of the

283
00:13:05,430 --> 00:13:07,320
future of JavaScript you know obviously

284
00:13:07,320 --> 00:13:09,960
we're working together with the folks at

285
00:13:09,960 --> 00:13:12,510
Mozilla and everyone else in the

286
00:13:12,510 --> 00:13:14,310
JavaScript community to move the

287
00:13:14,310 --> 00:13:17,190
language forward but specifically we

288
00:13:17,190 --> 00:13:19,590
want to talk about writing large

289
00:13:19,590 --> 00:13:27,240
applications in JavaScript so when

290
00:13:27,240 --> 00:13:28,350
you're talking about large applications

291
00:13:28,350 --> 00:13:34,740
JavaScript I'm you know one of the

292
00:13:34,740 --> 00:13:36,120
differentiating factors being small apps

293
00:13:36,120 --> 00:13:39,180
and large apps is that you want to have

294
00:13:39,180 --> 00:13:42,000
components you know and when we talk

295
00:13:42,000 --> 00:13:42,930
about components we really mean is

296
00:13:42,930 --> 00:13:46,500
reusable pieces of software we know with

297
00:13:46,500 --> 00:13:49,020
strong boundaries that that that you can

298
00:13:49,020 --> 00:13:51,570
reuse and you know one of the things

299
00:13:51,570 --> 00:13:54,510
they're one of the smallest order units

300
00:13:54,510 --> 00:13:58,750
of components in software's classes

301
00:13:58,760 --> 00:14:02,910
today in in JavaScript if you want to

302
00:14:02,910 --> 00:14:05,460
have a class you know you obviously

303
00:14:05,460 --> 00:14:07,050
described described as a constructor

304
00:14:07,050 --> 00:14:10,260
function and really this these two

305
00:14:10,260 --> 00:14:11,670
things together the both a constructor

306
00:14:11,670 --> 00:14:13,740
function and the prototype together are

307
00:14:13,740 --> 00:14:16,050
the sort of reasonable component and yet

308
00:14:16,050 --> 00:14:17,190
it doesn't really look like that when

309
00:14:17,190 --> 00:14:18,150
you're right when you're writing your

310
00:14:18,150 --> 00:14:21,080
code and of course you can use

311
00:14:21,080 --> 00:14:24,030
prototypal inheritance you know this is

312
00:14:24,030 --> 00:14:25,980
how you do a derived class which works

313
00:14:25,980 --> 00:14:27,690
great until your constructor function

314
00:14:27,690 --> 00:14:30,090
for your base class actually you know

315
00:14:30,090 --> 00:14:32,280
take some parameters or or uses some

316
00:14:32,280 --> 00:14:34,740
state or mutate some state and then all

317
00:14:34,740 --> 00:14:37,080
of a sudden this really breaks down but

318
00:14:37,080 --> 00:14:39,000
it does allow you to you know create a

319
00:14:39,000 --> 00:14:41,670
create an instance of an object you know

320
00:14:41,670 --> 00:14:43,230
inserting pac-man object is actually an

321
00:14:43,230 --> 00:14:50,040
instance of the base class actor so the

322
00:14:50,040 --> 00:14:51,510
problem with you know solution to that

323
00:14:51,510 --> 00:14:54,000
of course is to do something like this

324
00:14:54,000 --> 00:14:55,920
which was actually lifted from one of

325
00:14:55,920 --> 00:14:59,610
the favorite libraries unfortunately you

326
00:14:59,610 --> 00:15:01,170
know that actually does what you want

327
00:15:01,170 --> 00:15:04,560
but it doesn't really read like pac-man

328
00:15:04,560 --> 00:15:08,550
you know derives from actor and and we

329
00:15:08,550 --> 00:15:10,500
really want to try and try and change

330
00:15:10,500 --> 00:15:13,190
that

331
00:15:13,200 --> 00:15:16,450
and of course you know the library

332
00:15:16,450 --> 00:15:20,020
library author is already taken you know

333
00:15:20,020 --> 00:15:21,370
the first steps to trying to solve this

334
00:15:21,370 --> 00:15:23,260
problem and so you see all the libraries

335
00:15:23,260 --> 00:15:25,780
doing that so you see closure library I

336
00:15:25,780 --> 00:15:29,920
think that's prototype and of course

337
00:15:29,920 --> 00:15:35,890
base to whoops and so I know all these

338
00:15:35,890 --> 00:15:39,360
library authors you know have have you

339
00:15:39,360 --> 00:15:41,470
know solved this problem but they all

340
00:15:41,470 --> 00:15:45,000
solve it in a way that is not compose

341
00:15:45,000 --> 00:15:47,650
it's not composable right they're not

342
00:15:47,650 --> 00:15:50,050
compatible so you can't you can't take a

343
00:15:50,050 --> 00:15:52,240
classic layer in one place and use it

344
00:15:52,240 --> 00:15:55,510
another and that's really the you know I

345
00:15:55,510 --> 00:15:58,390
think one of the benefits for what we'd

346
00:15:58,390 --> 00:16:00,250
like to see is a syntax that actually

347
00:16:00,250 --> 00:16:03,400
describes I'm reads like what the

348
00:16:03,400 --> 00:16:13,920
intention that you want to express okay

349
00:16:13,920 --> 00:16:17,220
you know another big issue for

350
00:16:17,220 --> 00:16:20,950
components is modules and dave herman

351
00:16:20,950 --> 00:16:23,500
did a great talk yesterday on on modules

352
00:16:23,500 --> 00:16:26,050
and the benefits of modules again this

353
00:16:26,050 --> 00:16:28,180
is something that you know all the

354
00:16:28,180 --> 00:16:31,510
library authors have have solved you

355
00:16:31,510 --> 00:16:32,950
know whether its closure whether it's

356
00:16:32,950 --> 00:16:36,640
dojo and again once you put the syntax

357
00:16:36,640 --> 00:16:40,620
in the language you get a lab you get

358
00:16:40,620 --> 00:16:43,510
real reuse and you don't have to opt

359
00:16:43,510 --> 00:16:45,400
into a single framework you can actually

360
00:16:45,400 --> 00:16:47,470
use code from multiple frameworks once

361
00:16:47,470 --> 00:16:52,750
you have this again this is another one

362
00:16:52,750 --> 00:16:56,680
where we had a great talk by andrew de

363
00:16:56,680 --> 00:17:00,550
pont on scoped object extensions again

364
00:17:00,550 --> 00:17:04,000
it's a question of monkey patching is a

365
00:17:04,000 --> 00:17:07,690
place you know where you get friction

366
00:17:07,690 --> 00:17:16,750
with large application development you

367
00:17:16,750 --> 00:17:19,240
know once you because all these shared

368
00:17:19,240 --> 00:17:21,340
objects are mutable you can attach new

369
00:17:21,340 --> 00:17:23,290
things to the new methods to them which

370
00:17:23,290 --> 00:17:24,490
is great because it allows you to write

371
00:17:24,490 --> 00:17:26,670
code like this

372
00:17:26,670 --> 00:17:29,170
but the problem with that is is that

373
00:17:29,170 --> 00:17:30,460
once you get into large software

374
00:17:30,460 --> 00:17:33,730
development these monkey patches can

375
00:17:33,730 --> 00:17:36,250
conflict and so some libraries take

376
00:17:36,250 --> 00:17:38,410
great pains to not do any monkey

377
00:17:38,410 --> 00:17:40,600
patching at all they provide the same

378
00:17:40,600 --> 00:17:42,160
functionality but as you can see it

379
00:17:42,160 --> 00:17:44,320
comes at a real syntactic cost you know

380
00:17:44,320 --> 00:17:46,900
I think we'd all prefer to be able to

381
00:17:46,900 --> 00:17:48,610
write the first one the first example

382
00:17:48,610 --> 00:17:52,630
rather than the second but you know but

383
00:17:52,630 --> 00:17:55,270
in today's JavaScript that's prohibitive

384
00:17:55,270 --> 00:17:59,650
in large applications so what we'd like

385
00:17:59,650 --> 00:18:01,840
to see is scoped object extensions which

386
00:18:01,840 --> 00:18:04,690
is piggy backs off of a Foreman's

387
00:18:04,690 --> 00:18:07,570
modulus proposal a scoped object

388
00:18:07,570 --> 00:18:10,060
extension is like a monkey patch may

389
00:18:10,060 --> 00:18:12,160
declare inside of a module and it's

390
00:18:12,160 --> 00:18:16,420
available inside the module but outside

391
00:18:16,420 --> 00:18:18,580
the module it's as if it wasn't even

392
00:18:18,580 --> 00:18:24,310
there and because we want reusability we

393
00:18:24,310 --> 00:18:25,330
want to be able to import them across

394
00:18:25,330 --> 00:18:28,390
modules so that you can import these

395
00:18:28,390 --> 00:18:30,400
monkey patches into your own into your

396
00:18:30,400 --> 00:18:36,550
own source code another one I think this

397
00:18:36,550 --> 00:18:38,680
that when we talk about is asynchronous

398
00:18:38,680 --> 00:18:39,970
programming this is another situation

399
00:18:39,970 --> 00:18:46,600
where you know this is a common program

400
00:18:46,600 --> 00:18:52,060
pattern in JavaScript which is the

401
00:18:52,060 --> 00:18:53,800
callback pattern you know because of

402
00:18:53,800 --> 00:18:56,770
because most javascript javascript

403
00:18:56,770 --> 00:18:58,800
embedded in single-threaded environments

404
00:18:58,800 --> 00:19:02,170
you know we have the callback pattern

405
00:19:02,170 --> 00:19:05,500
all long-running API calls take

406
00:19:05,500 --> 00:19:07,570
callbacks so that we don't ever block

407
00:19:07,570 --> 00:19:10,360
the main thread the problem with this is

408
00:19:10,360 --> 00:19:14,430
that is that the that the callback

409
00:19:14,430 --> 00:19:17,680
callbacks infect your API and they're

410
00:19:17,680 --> 00:19:19,510
really not composable because you have

411
00:19:19,510 --> 00:19:20,560
to pass these callbacks around

412
00:19:20,560 --> 00:19:22,750
everywhere and so again this is a

413
00:19:22,750 --> 00:19:25,180
situation where library authors have

414
00:19:25,180 --> 00:19:29,860
taken the lead and to help alleviate

415
00:19:29,860 --> 00:19:31,900
this problem with a deferred pattern

416
00:19:31,900 --> 00:19:35,100
some folks also call it promises

417
00:19:35,100 --> 00:19:38,100
basically a deferred object or

418
00:19:38,100 --> 00:19:41,910
a deferred function represents a unit of

419
00:19:41,910 --> 00:19:45,660
computation that allows you to attach a

420
00:19:45,660 --> 00:19:49,740
call back to it once it completes and so

421
00:19:49,740 --> 00:19:53,299
with with deferred you see this which

422
00:19:53,299 --> 00:19:57,390
moves the call back out of the out of

423
00:19:57,390 --> 00:19:59,970
the the parameter list of the animate

424
00:19:59,970 --> 00:20:03,330
function but it's still really hard to

425
00:20:03,330 --> 00:20:04,830
see what animate is actually trying to

426
00:20:04,830 --> 00:20:09,179
do and the reason why is that you've

427
00:20:09,179 --> 00:20:10,620
actually got to turn your your code

428
00:20:10,620 --> 00:20:13,230
inside out into what's called a CPS

429
00:20:13,230 --> 00:20:14,880
transformer or a continuation passing

430
00:20:14,880 --> 00:20:18,030
transform can you ask and it turns out

431
00:20:18,030 --> 00:20:20,190
that this is something that is actually

432
00:20:20,190 --> 00:20:21,990
really tough to do by hand but is

433
00:20:21,990 --> 00:20:23,730
actually something that the compiler can

434
00:20:23,730 --> 00:20:27,210
automate for you and so what we really

435
00:20:27,210 --> 00:20:28,679
like to be able to do is is allow you to

436
00:20:28,679 --> 00:20:30,030
write code and instead of looking like

437
00:20:30,030 --> 00:20:32,280
this looks a little bit more like this

438
00:20:32,280 --> 00:20:34,919
where you've got what you're really

439
00:20:34,919 --> 00:20:39,140
doing here is you're just you're just

440
00:20:39,140 --> 00:20:42,570
iterating through a for loop setting the

441
00:20:42,570 --> 00:20:47,220
margin on your element and then saying

442
00:20:47,220 --> 00:20:48,870
hey I want to wait for five milliseconds

443
00:20:48,870 --> 00:20:52,230
before I go through this again and of

444
00:20:52,230 --> 00:20:54,150
course and this is the kind of this is

445
00:20:54,150 --> 00:20:55,799
kind of code that we want to we'd like

446
00:20:55,799 --> 00:20:57,809
we love to be able to see in billa

447
00:20:57,809 --> 00:21:02,010
writing JavaScript and the question so

448
00:21:02,010 --> 00:21:05,190
is that it answers no there's a whole

449
00:21:05,190 --> 00:21:09,360
lot of things that are in sort of that

450
00:21:09,360 --> 00:21:10,169
have been talked about in sort of

451
00:21:10,169 --> 00:21:13,650
JavaScript next these are I think most

452
00:21:13,650 --> 00:21:16,049
of the things that are I've been talked

453
00:21:16,049 --> 00:21:19,679
about either in tc39 talked a lot about

454
00:21:19,679 --> 00:21:23,159
a lot of these today and so we're hoping

455
00:21:23,159 --> 00:21:25,710
that that you know there's a lot of

456
00:21:25,710 --> 00:21:27,240
things you can do to JavaScript to to

457
00:21:27,240 --> 00:21:30,900
make it better again we've talked about

458
00:21:30,900 --> 00:21:33,330
this Brendan mentioned this issue of the

459
00:21:33,330 --> 00:21:35,280
you know when can we use this stuff em

460
00:21:35,280 --> 00:21:37,590
and and sort of when can you try this

461
00:21:37,590 --> 00:21:40,890
out and the short answer is we really

462
00:21:40,890 --> 00:21:43,559
want to we we really want to be able to

463
00:21:43,559 --> 00:21:47,190
get feedback from library authors as

464
00:21:47,190 --> 00:21:50,370
soon as possible into into the language

465
00:21:50,370 --> 00:21:51,720
design process

466
00:21:51,720 --> 00:21:54,360
because at the end of the day the leg

467
00:21:54,360 --> 00:21:57,419
design only is successful if it lets you

468
00:21:57,419 --> 00:22:00,090
write code that you want to write so

469
00:22:00,090 --> 00:22:02,309
what I'm going to do here is I'm going

470
00:22:02,309 --> 00:22:03,539
to come back to our deferred function

471
00:22:03,539 --> 00:22:16,120
example one minute here

472
00:22:16,130 --> 00:22:21,200
and so what we did is we actually wrote

473
00:22:21,200 --> 00:22:23,750
a compiler for most of these new

474
00:22:23,750 --> 00:22:28,130
features that translates it from the new

475
00:22:28,130 --> 00:22:34,670
feature syntax into standard browser

476
00:22:34,670 --> 00:22:38,660
JavaScript and actually this where I

477
00:22:38,660 --> 00:22:40,160
want to do a shout out to some of the

478
00:22:40,160 --> 00:22:44,240
guys that helped that wrote this other

479
00:22:44,240 --> 00:22:46,840
other folks at Google Chris burrows

480
00:22:46,840 --> 00:22:49,430
martin O'Malley John nester Lee Bob

481
00:22:49,430 --> 00:22:51,590
Nystrom and of course someone you folks

482
00:22:51,590 --> 00:22:55,330
all know Eric arvidson as you can see

483
00:22:55,330 --> 00:22:58,880
you know the code that this compiler is

484
00:22:58,880 --> 00:23:01,390
translate translating this into is

485
00:23:01,390 --> 00:23:04,610
pretty wonky you wouldn't actually want

486
00:23:04,610 --> 00:23:06,410
to write this stuff yourself but at the

487
00:23:06,410 --> 00:23:07,370
end of the day this is the kind of thing

488
00:23:07,370 --> 00:23:09,170
that callbacks actually forces you to do

489
00:23:09,170 --> 00:23:11,330
now obviously you're not a compiler so

490
00:23:11,330 --> 00:23:12,320
you're not going to write it quite like

491
00:23:12,320 --> 00:23:14,270
this but at end of the day this is the

492
00:23:14,270 --> 00:23:16,060
kind of thing that it forces you to do

493
00:23:16,060 --> 00:23:20,060
and so we actually have this hooked up

494
00:23:20,060 --> 00:23:22,580
so you can run it inside the browser and

495
00:23:22,580 --> 00:23:25,760
get it working right now and so what we

496
00:23:25,760 --> 00:23:32,000
really love is for everyone here to give

497
00:23:32,000 --> 00:23:33,650
this a try give these new features a try

498
00:23:33,650 --> 00:23:38,650
and give us feedback on whether this

499
00:23:38,650 --> 00:23:40,640
whether this stuff is actually going to

500
00:23:40,640 --> 00:23:48,590
solve your problems so what what we've

501
00:23:48,590 --> 00:23:52,520
done we're so Google is open sourcing

502
00:23:52,520 --> 00:23:55,900
tracer which is our in-browser

503
00:23:55,900 --> 00:23:58,130
JavaScript to JavaScript compiler that

504
00:23:58,130 --> 00:24:01,010
compiles from a sort of JavaScript next

505
00:24:01,010 --> 00:24:07,820
down to browser JavaScript and it's yeah

506
00:24:07,820 --> 00:24:09,680
so just open sourced it on code that

507
00:24:09,680 --> 00:24:12,950
google com and the first short link is a

508
00:24:12,950 --> 00:24:15,860
rep a loop that you can use to actually

509
00:24:15,860 --> 00:24:18,410
try out this stuff in the browser right

510
00:24:18,410 --> 00:24:22,730
now and the second link is is a link

511
00:24:22,730 --> 00:24:24,590
that you can use to actually for the

512
00:24:24,590 --> 00:24:26,060
slides themselves and you can actually

513
00:24:26,060 --> 00:24:31,299
see the compiler running in the talk

514
00:24:31,309 --> 00:24:36,500
all right I think that's it for me

515
00:24:36,500 --> 00:24:47,520
thanks folks

516
00:24:47,530 --> 00:24:50,960
so yeah we're really excited about

517
00:24:50,960 --> 00:24:53,060
tracer and we're hoping that you'll try

518
00:24:53,060 --> 00:24:54,290
it out and give us your feedback

519
00:24:54,290 --> 00:24:56,780
especially about the new features it

520
00:24:56,780 --> 00:24:58,490
can't implement everything as we've

521
00:24:58,490 --> 00:25:01,190
mentioned and we hope that you'll give

522
00:25:01,190 --> 00:25:02,630
it a shot let us know how it goes so

523
00:25:02,630 --> 00:25:05,090
that we can get what you think is good

524
00:25:05,090 --> 00:25:06,950
and bad fed back into the standards

525
00:25:06,950 --> 00:25:10,250
process you can try it out today give it

526
00:25:10,250 --> 00:25:16,460
a go and uh questions no questions about

527
00:25:16,460 --> 00:25:20,510
any of that really come on okay beer all

528
00:25:20,510 --> 00:25:24,890
right I get it all right here all right

529
00:25:24,890 --> 00:25:34,060
well thanks did you remember the baby oh

530
00:25:34,060 --> 00:25:40,880
no

