1
00:00:02,370 --> 00:00:09,430

[Music]

2
00:00:09,440 --> 00:00:11,880
hello everyone we're going to talk about

3
00:00:11,880 --> 00:00:14,519
microphones I'm Christian I do IOT stuff

4
00:00:14,519 --> 00:00:16,740
react stuff I think that's enough about

5
00:00:16,740 --> 00:00:18,180
me I'm Chris Young

6
00:00:18,180 --> 00:00:19,529
just call me Christian or moody COO

7
00:00:19,529 --> 00:00:23,519
whatever I'm Almer I am from the

8
00:00:23,519 --> 00:00:25,500
developer at Brandel you can check it

9
00:00:25,500 --> 00:00:26,699
out there you can read articles online

10
00:00:26,699 --> 00:00:28,439
there you can reach me with via

11
00:00:28,439 --> 00:00:30,330
different channels but we have not said

12
00:00:30,330 --> 00:00:31,579
that you have time

13
00:00:31,579 --> 00:00:35,219
Grendel is cool check Len loud ok let's

14
00:00:35,219 --> 00:00:36,780
talk about micro front ends and reasons

15
00:00:36,780 --> 00:00:38,640
why you might want to introduce micro

16
00:00:38,640 --> 00:00:39,989
front ends and what microphone that's

17
00:00:39,989 --> 00:00:41,790
are and how to implement them and who

18
00:00:41,790 --> 00:00:43,800
else you had ever heard of micro front

19
00:00:43,800 --> 00:00:47,280
ends and is interested in it that's

20
00:00:47,280 --> 00:00:49,460
quite a few is one of you working with

21
00:00:49,460 --> 00:00:53,219
Nylund holy that's like for people

22
00:00:53,219 --> 00:00:57,870
you're gonna recognize some stuff ok why

23
00:00:57,870 --> 00:01:00,170
are we talking about micro front ends

24
00:01:00,170 --> 00:01:03,539
micro front ends our topic - or an

25
00:01:03,539 --> 00:01:05,100
answer to the question how do we

26
00:01:05,100 --> 00:01:06,720
structure the development of our web

27
00:01:06,720 --> 00:01:08,820
applications there's some traditional

28
00:01:08,820 --> 00:01:10,770
approaches on how to do that the most

29
00:01:10,770 --> 00:01:13,770
traditional and most common or oldest or

30
00:01:13,770 --> 00:01:16,020
whatever approach is this if we develop

31
00:01:16,020 --> 00:01:17,970
an online shop we have one monolithic

32
00:01:17,970 --> 00:01:20,100
application that handles everything it

33
00:01:20,100 --> 00:01:23,189
contains our HTML or JavaScript CSS PHP

34
00:01:23,189 --> 00:01:24,990
Java whatever you do in the backend

35
00:01:24,990 --> 00:01:27,479
that's just one team that develops this

36
00:01:27,479 --> 00:01:30,420
application at some point someone might

37
00:01:30,420 --> 00:01:31,590
have realized ok the team is getting

38
00:01:31,590 --> 00:01:33,869
bigger and structuring it as one team

39
00:01:33,869 --> 00:01:35,310
and one application doesn't really work

40
00:01:35,310 --> 00:01:37,920
out so well so people start to split it

41
00:01:37,920 --> 00:01:40,259
up and the easiest way and the most

42
00:01:40,259 --> 00:01:42,689
obvious way to structure or just split

43
00:01:42,689 --> 00:01:44,520
up a development team is to realize okay

44
00:01:44,520 --> 00:01:46,590
we have back-end developers we have

45
00:01:46,590 --> 00:01:48,600
front-end developers let's make it back

46
00:01:48,600 --> 00:01:50,340
and team in a front-end team who of you

47
00:01:50,340 --> 00:01:55,229
is working in this team setting it's the

48
00:01:55,229 --> 00:01:59,939
most ok interesting at some point some

49
00:01:59,939 --> 00:02:01,979
of the back-end problems might become

50
00:02:01,979 --> 00:02:03,930
bigger and the back-end team quite often

51
00:02:03,930 --> 00:02:05,700
becomes the bigger team and at someone

52
00:02:05,700 --> 00:02:08,099
you have like 500 developers and 25

53
00:02:08,099 --> 00:02:09,780
back-end developers and then you realize

54
00:02:09,780 --> 00:02:11,760
them again we're having a team of 25

55
00:02:11,760 --> 00:02:13,770
people and that doesn't scale so

56
00:02:13,770 --> 00:02:15,480
you start to split up the back end and

57
00:02:15,480 --> 00:02:17,040
there's this microservice thing that

58
00:02:17,040 --> 00:02:18,720
people have been doing for ages now or

59
00:02:18,720 --> 00:02:20,250
even before that they call it

60
00:02:20,250 --> 00:02:21,990
service-oriented architecture and that

61
00:02:21,990 --> 00:02:24,420
was basically the same but hmm okay so

62
00:02:24,420 --> 00:02:26,430
this is a very very naive approach to

63
00:02:26,430 --> 00:02:27,780
say okay the back-end team becomes

64
00:02:27,780 --> 00:02:33,180
bigger so let's split it up but I don't

65
00:02:33,180 --> 00:02:35,700
know if you know the year but it's 2018

66
00:02:35,700 --> 00:02:37,410
and maybe we're having a front-end

67
00:02:37,410 --> 00:02:38,730
application that requires more than

68
00:02:38,730 --> 00:02:41,280
three or five developers but maybe we

69
00:02:41,280 --> 00:02:43,110
have a front-end team of like 20

70
00:02:43,110 --> 00:02:45,630
developers or maybe we've heard of the

71
00:02:45,630 --> 00:02:47,610
term that was called cross-functional

72
00:02:47,610 --> 00:02:49,980
teams where we say we should not split

73
00:02:49,980 --> 00:02:51,300
up the team and a product management

74
00:02:51,300 --> 00:02:53,610
team and a designer team in a front-end

75
00:02:53,610 --> 00:02:54,990
team and a back-end team but instead

76
00:02:54,990 --> 00:02:57,390
have a team for every part of our

77
00:02:57,390 --> 00:02:58,650
application for every part of our

78
00:02:58,650 --> 00:03:02,310
business domain and that's why in some

79
00:03:02,310 --> 00:03:06,120
at some point people started to use a

80
00:03:06,120 --> 00:03:07,980
different approach this is sometimes

81
00:03:07,980 --> 00:03:10,220
referred to as self-contained systems

82
00:03:10,220 --> 00:03:12,630
which comes from the DDD world

83
00:03:12,630 --> 00:03:14,340
never mind that part but the approach

84
00:03:14,340 --> 00:03:17,070
here is to say okay we have a team for

85
00:03:17,070 --> 00:03:18,480
instance if we were talking about a web

86
00:03:18,480 --> 00:03:21,000
shop team inspire they are responsible

87
00:03:21,000 --> 00:03:23,070
for suggestions of new products we have

88
00:03:23,070 --> 00:03:24,780
a team search they're responsible for

89
00:03:24,780 --> 00:03:26,790
the search team check out obvious what

90
00:03:26,790 --> 00:03:29,100
they do and the team is responsible for

91
00:03:29,100 --> 00:03:31,470
both the front-end part the backend part

92
00:03:31,470 --> 00:03:34,260
the everything that's there the product

93
00:03:34,260 --> 00:03:36,930
management part that's one team by the

94
00:03:36,930 --> 00:03:39,060
way I asked about Nolan before Nolan did

95
00:03:39,060 --> 00:03:41,580
this website micro front-ends org this

96
00:03:41,580 --> 00:03:43,440
picture is from microfarad and ster org

97
00:03:43,440 --> 00:03:45,720
didn't it say it's on when the slides it

98
00:03:45,720 --> 00:03:47,640
was on the first slide well sorry I

99
00:03:47,640 --> 00:03:49,860
forgot to mention mentioned that it's an

100
00:03:49,860 --> 00:03:51,810
open license that why we can use it it's

101
00:03:51,810 --> 00:03:55,350
cool website so we didn't make up the

102
00:03:55,350 --> 00:03:57,510
term micro front and I think Nolan

103
00:03:57,510 --> 00:03:59,490
didn't either but yeah they made this

104
00:03:59,490 --> 00:04:04,080
cool website the question is why do we

105
00:04:04,080 --> 00:04:05,280
want to do something like this I

106
00:04:05,280 --> 00:04:07,020
mentioned reasons for it but there are

107
00:04:07,020 --> 00:04:08,780
several reasons why you want to do this

108
00:04:08,780 --> 00:04:11,940
exactly one reason is that what you

109
00:04:11,940 --> 00:04:13,739
mentions the team is growing and you

110
00:04:13,739 --> 00:04:15,720
have too much developers in one team and

111
00:04:15,720 --> 00:04:17,850
you have to split up to work you can do

112
00:04:17,850 --> 00:04:19,830
it by either making a lot of Trello

113
00:04:19,830 --> 00:04:22,500
cards or JIRA tickets or something like

114
00:04:22,500 --> 00:04:24,240
that and let developers work on

115
00:04:24,240 --> 00:04:25,710
different domains but this don't often

116
00:04:25,710 --> 00:04:27,639
work out very well because you have

117
00:04:27,639 --> 00:04:32,199
all domain knowledge needed another

118
00:04:32,199 --> 00:04:35,050
reason could be that you want to deploy

119
00:04:35,050 --> 00:04:37,749
your product or your front-end or your

120
00:04:37,749 --> 00:04:40,870
product separately this could be a

121
00:04:40,870 --> 00:04:43,719
reason that you have differents vzf

122
00:04:43,719 --> 00:04:46,120
different sprints times and you want to

123
00:04:46,120 --> 00:04:48,009
release more often for example but your

124
00:04:48,009 --> 00:04:50,499
main product is released once in a month

125
00:04:50,499 --> 00:04:52,990
then you can split up the front ends and

126
00:04:52,990 --> 00:04:55,349
you can deploy the products separately

127
00:04:55,349 --> 00:04:59,499
another idea could be that you want to

128
00:04:59,499 --> 00:05:02,919
isolate your run time this could be very

129
00:05:02,919 --> 00:05:04,509
different reasons for example you have a

130
00:05:04,509 --> 00:05:06,129
payment service and you have to collect

131
00:05:06,129 --> 00:05:08,219
special day to form a payments of

132
00:05:08,219 --> 00:05:12,270
payment service provider and you have

133
00:05:12,270 --> 00:05:15,729
conflicts with normal us privacy but for

134
00:05:15,729 --> 00:05:17,770
a payment you have to do it so this

135
00:05:17,770 --> 00:05:21,759
could be also a valid approach and the

136
00:05:21,759 --> 00:05:27,430
most or I think the most important i've

137
00:05:27,430 --> 00:05:29,889
reason to to split up michael front-ends

138
00:05:29,889 --> 00:05:32,199
is that you have one legacy application

139
00:05:32,199 --> 00:05:34,150
and you want to modernize it but you

140
00:05:34,150 --> 00:05:36,219
don't want to do a big band migration

141
00:05:36,219 --> 00:05:38,020
that you have to throw away all the code

142
00:05:38,020 --> 00:05:40,240
and rewrite everything with the

143
00:05:40,240 --> 00:05:41,770
microphones and you can modernize the

144
00:05:41,770 --> 00:05:44,020
application piece by piece and then you

145
00:05:44,020 --> 00:05:47,800
have one small part that is new and the

146
00:05:47,800 --> 00:05:50,319
big legacy part and you can migrate this

147
00:05:50,319 --> 00:05:54,849
big application step by step but the

148
00:05:54,849 --> 00:05:57,520
question is if we have reasons how to do

149
00:05:57,520 --> 00:05:59,139
it how do we actually do that there are

150
00:05:59,139 --> 00:06:01,089
several approaches that we want to

151
00:06:01,089 --> 00:06:05,289
mention but the question is we now have

152
00:06:05,289 --> 00:06:07,139
a problem what's the obvious solution

153
00:06:07,139 --> 00:06:09,789
these days always the same blockchain is

154
00:06:09,789 --> 00:06:10,930
always the solution to every problem

155
00:06:10,930 --> 00:06:13,300
right we're missing a blockchain talk at

156
00:06:13,300 --> 00:06:14,379
this conference I mentioned it before

157
00:06:14,379 --> 00:06:17,560
not that I'm a fan of it ok no getting

158
00:06:17,560 --> 00:06:19,120
serious again what are solutions on how

159
00:06:19,120 --> 00:06:21,849
to implement micro front-ends one way is

160
00:06:21,849 --> 00:06:23,560
to have a short shared we run time where

161
00:06:23,560 --> 00:06:25,839
many front ends run within the same

162
00:06:25,839 --> 00:06:28,659
runtime or we can I say every front-end

163
00:06:28,659 --> 00:06:31,509
has its own runtime there's also like a

164
00:06:31,509 --> 00:06:32,949
mixed approach that we're going to talk

165
00:06:32,949 --> 00:06:35,140
about

166
00:06:35,150 --> 00:06:38,860
let's get started with the own runtime

167
00:06:38,860 --> 00:06:41,570
how do we separate rent times of

168
00:06:41,570 --> 00:06:44,000
applications well we're in the web and

169
00:06:44,000 --> 00:06:45,650
there's a technology that's pretty cool

170
00:06:45,650 --> 00:06:48,320
we just reinvent the wheel and yeah use

171
00:06:48,320 --> 00:06:50,199
hyperlinks so we have one application

172
00:06:50,199 --> 00:06:54,650
that is called in our shop example the

173
00:06:54,650 --> 00:06:57,410
inspire page so we have a website let's

174
00:06:57,410 --> 00:07:00,380
say inspired the shop calm and on that

175
00:07:00,380 --> 00:07:02,449
page we can see new products than we

176
00:07:02,449 --> 00:07:04,970
have searched the shop comm and we can

177
00:07:04,970 --> 00:07:06,889
find products there and then there's the

178
00:07:06,889 --> 00:07:08,900
product website products dot the shop

179
00:07:08,900 --> 00:07:11,690
comm the first two just link to these

180
00:07:11,690 --> 00:07:15,740
products that the shop comm one approach

181
00:07:15,740 --> 00:07:17,690
the you see very often in web shops is

182
00:07:17,690 --> 00:07:19,190
that you also have a payment page

183
00:07:19,190 --> 00:07:21,110
separately because you ran through the

184
00:07:21,110 --> 00:07:23,060
checkout process you come to the payment

185
00:07:23,060 --> 00:07:25,400
point and then you do one special thing

186
00:07:25,400 --> 00:07:27,260
in one of these runtimes in one of these

187
00:07:27,260 --> 00:07:29,270
front ends and that's actually pretty

188
00:07:29,270 --> 00:07:31,310
cool because the runtimes are completely

189
00:07:31,310 --> 00:07:33,919
separated I mean in a case of an online

190
00:07:33,919 --> 00:07:35,900
shop let's be honest that probably

191
00:07:35,900 --> 00:07:38,750
doesn't work that well I can tell you we

192
00:07:38,750 --> 00:07:40,580
at blend will have done exam it's

193
00:07:40,580 --> 00:07:43,639
exactly this example we have put out our

194
00:07:43,639 --> 00:07:46,190
payment service into our payment page

195
00:07:46,190 --> 00:07:49,940
into a different front end it was quite

196
00:07:49,940 --> 00:07:53,570
a big work but now it's a huge benefit

197
00:07:53,570 --> 00:07:56,810
to half exactly this set up again for

198
00:07:56,810 --> 00:07:58,490
blender it makes sense I think it's a

199
00:07:58,490 --> 00:08:00,530
payment you said also landing pages

200
00:08:00,530 --> 00:08:01,130
right

201
00:08:01,130 --> 00:08:02,660
are separate exactly they're completely

202
00:08:02,660 --> 00:08:03,770
separate from the rest of the

203
00:08:03,770 --> 00:08:05,270
application so it makes sense to take

204
00:08:05,270 --> 00:08:07,699
them out because then it's easier to to

205
00:08:07,699 --> 00:08:09,650
decide okay with the landing pages we

206
00:08:09,650 --> 00:08:11,360
want to use the next big thing in web

207
00:08:11,360 --> 00:08:13,490
technology and that's what you exactly

208
00:08:13,490 --> 00:08:15,770
did right yeah we used next yes so the

209
00:08:15,770 --> 00:08:18,590
next yes you have different approaches

210
00:08:18,590 --> 00:08:19,849
and you have different goals to achieve

211
00:08:19,849 --> 00:08:21,680
with each project for a landing page

212
00:08:21,680 --> 00:08:23,210
project for example you want to achieve

213
00:08:23,210 --> 00:08:25,190
the best marketing possible so you want

214
00:08:25,190 --> 00:08:27,500
fast patron rings you want server-side

215
00:08:27,500 --> 00:08:29,360
rendered server-side rendering but you

216
00:08:29,360 --> 00:08:31,010
don't want it in your big application

217
00:08:31,010 --> 00:08:33,260
very users authenticate because it makes

218
00:08:33,260 --> 00:08:35,209
so much headache to implement this and

219
00:08:35,209 --> 00:08:37,400
then you can skip it for a payment

220
00:08:37,400 --> 00:08:39,080
service you have completely different

221
00:08:39,080 --> 00:08:42,680
things you want to use so different

222
00:08:42,680 --> 00:08:45,610
projects and different goals to achieve

223
00:08:45,610 --> 00:08:48,560
but again the reality is not always like

224
00:08:48,560 --> 00:08:48,950
this

225
00:08:48,950 --> 00:08:50,990
right so there might be situations where

226
00:08:50,990 --> 00:08:52,310
we have different teams developing

227
00:08:52,310 --> 00:08:54,740
different micro front-ends and this all

228
00:08:54,740 --> 00:08:56,900
should be on the same page so we want to

229
00:08:56,900 --> 00:08:58,730
have multiple applications running

230
00:08:58,730 --> 00:09:00,920
within the same page and again thanks to

231
00:09:00,920 --> 00:09:02,540
Nolan for that image

232
00:09:02,540 --> 00:09:05,390
what we have here is a webshop and let's

233
00:09:05,390 --> 00:09:07,580
say that this webshop is developed

234
00:09:07,580 --> 00:09:10,100
consists of multiple microphones we have

235
00:09:10,100 --> 00:09:12,170
the Buy button here that's from one a

236
00:09:12,170 --> 00:09:14,090
flip application the green box is

237
00:09:14,090 --> 00:09:15,860
obviously from team inspire because

238
00:09:15,860 --> 00:09:17,360
they're responsible for the gist

239
00:09:17,360 --> 00:09:20,450
suggesting new products to customers and

240
00:09:20,450 --> 00:09:24,590
then the outside is well team product

241
00:09:24,590 --> 00:09:27,740
again I think you're not supposed to

242
00:09:27,740 --> 00:09:31,940
retweets why we do talk sorry if we have

243
00:09:31,940 --> 00:09:34,070
an approach like this if we have a

244
00:09:34,070 --> 00:09:35,480
website like this and we split our

245
00:09:35,480 --> 00:09:37,340
team's like we suggest it before all

246
00:09:37,340 --> 00:09:39,850
these teams have to run within the same

247
00:09:39,850 --> 00:09:43,430
scope of the other website and this

248
00:09:43,430 --> 00:09:45,500
might work if we have for instance a

249
00:09:45,500 --> 00:09:47,480
team that does react the team that does

250
00:09:47,480 --> 00:09:50,390
angular a team that does view Jas then

251
00:09:50,390 --> 00:09:52,490
we could run this all in the same

252
00:09:52,490 --> 00:09:55,460
application in the same Dom in the same

253
00:09:55,460 --> 00:09:57,200
JavaScript scope and it might actually

254
00:09:57,200 --> 00:09:59,630
work there might be some obvious

255
00:09:59,630 --> 00:10:00,920
problems that we're going to talk about

256
00:10:00,920 --> 00:10:03,380
later but you could do that if you

257
00:10:03,380 --> 00:10:08,570
instead have multiple versions of the

258
00:10:08,570 --> 00:10:11,420
same framework say react 14 15 and 16

259
00:10:11,420 --> 00:10:13,520
and you run them on the same page you

260
00:10:13,520 --> 00:10:16,430
might run into problems because they all

261
00:10:16,430 --> 00:10:18,890
want to define the global called react

262
00:10:18,890 --> 00:10:21,620
or some libraries they're used the same

263
00:10:21,620 --> 00:10:23,840
global variables that actually happen to

264
00:10:23,840 --> 00:10:25,880
us with a react multi-micro from an

265
00:10:25,880 --> 00:10:27,470
application and they had the same

266
00:10:27,470 --> 00:10:30,080
version of react but still have problems

267
00:10:30,080 --> 00:10:33,980
and then there's a way on how we could

268
00:10:33,980 --> 00:10:36,110
actually implement such a page that

269
00:10:36,110 --> 00:10:39,560
consists of multiple front micro

270
00:10:39,560 --> 00:10:42,680
front-end applications by just putting

271
00:10:42,680 --> 00:10:47,600
iframes there that's something I was

272
00:10:47,600 --> 00:10:50,020
expecting laughter that's fine

273
00:10:50,020 --> 00:10:52,820
the thing is high friends might not be

274
00:10:52,820 --> 00:10:53,660
as bad as you think

275
00:10:53,660 --> 00:10:56,210
i frames used to be very bad and we

276
00:10:56,210 --> 00:10:57,860
hated them I mean frames used to be even

277
00:10:57,860 --> 00:11:00,290
worse right but there might be reasons

278
00:11:00,290 --> 00:11:02,350
why we would want to use my iframes here

279
00:11:02,350 --> 00:11:04,120
they're perfect because they give us the

280
00:11:04,120 --> 00:11:06,490
separation of if like if we would run on

281
00:11:06,490 --> 00:11:08,500
multiple domains we can actually run on

282
00:11:08,500 --> 00:11:10,090
multiple domains but just include them

283
00:11:10,090 --> 00:11:13,600
with the iframes so it feels to the user

284
00:11:13,600 --> 00:11:16,000
like they're using one big application

285
00:11:16,000 --> 00:11:17,140
but in truth you have multiple

286
00:11:17,140 --> 00:11:19,630
applications of course if you have like

287
00:11:19,630 --> 00:11:22,870
20 iframes that include 20 other iframes

288
00:11:22,870 --> 00:11:25,210
that include ten other iframes you might

289
00:11:25,210 --> 00:11:27,790
run into problems of course but if it's

290
00:11:27,790 --> 00:11:29,350
just what you mentioned before the

291
00:11:29,350 --> 00:11:31,990
payment and you have the payment button

292
00:11:31,990 --> 00:11:33,520
that should be included with one other

293
00:11:33,520 --> 00:11:36,130
application then it's totally fine at

294
00:11:36,130 --> 00:11:38,110
least if they don't have bundle sizes of

295
00:11:38,110 --> 00:11:41,800
20 megabytes no application should have

296
00:11:41,800 --> 00:11:44,110
that of course right so again if you can

297
00:11:44,110 --> 00:11:45,640
do the iframes that's a super cool

298
00:11:45,640 --> 00:11:47,140
approach because you can integrate it's

299
00:11:47,140 --> 00:11:48,490
for the user it feels like it's one

300
00:11:48,490 --> 00:11:49,930
application but in truth we have

301
00:11:49,930 --> 00:11:55,750
completely separate runtimes that's you

302
00:11:55,750 --> 00:12:00,670
okay yeah so if we want to achieve

303
00:12:00,670 --> 00:12:02,980
exciting is this example of different

304
00:12:02,980 --> 00:12:07,860
versions of on tools on one page this is

305
00:12:07,860 --> 00:12:10,480
possible actually right now in the

306
00:12:10,480 --> 00:12:10,950
browser

307
00:12:10,950 --> 00:12:14,170
imagine we use a tool that we all have

308
00:12:14,170 --> 00:12:17,020
in our hands or on our laps like a

309
00:12:17,020 --> 00:12:21,190
browser and we all know HTML or at least

310
00:12:21,190 --> 00:12:25,270
we know a little bit of HTML and in HTML

311
00:12:25,270 --> 00:12:27,670
we have something that is called input

312
00:12:27,670 --> 00:12:30,760
input with a type date/time local will

313
00:12:30,760 --> 00:12:32,830
cause I couldn't make a screenshot of it

314
00:12:32,830 --> 00:12:35,380
but it will make a calendar to choose a

315
00:12:35,380 --> 00:12:40,000
time and a date with this tiny piece of

316
00:12:40,000 --> 00:12:42,910
code it will look like something like

317
00:12:42,910 --> 00:12:45,430
that what if we can take this approach

318
00:12:45,430 --> 00:12:49,630
to something for our micro front-end

319
00:12:49,630 --> 00:12:52,120
idea that we just have an element we can

320
00:12:52,120 --> 00:12:54,760
play somewhere for example check out

321
00:12:54,760 --> 00:12:57,940
button and use it in the place we want

322
00:12:57,940 --> 00:13:03,220
to use it in the shared runtime so we

323
00:13:03,220 --> 00:13:05,740
can define our own elements with an I

324
00:13:05,740 --> 00:13:08,320
hope it is a little bit readable with an

325
00:13:08,320 --> 00:13:10,660
API that is called custom element

326
00:13:10,660 --> 00:13:13,720
actually the custom element version one

327
00:13:13,720 --> 00:13:14,940
is most

328
00:13:14,940 --> 00:13:17,430
it's implemented in Chrome and in Safari

329
00:13:17,430 --> 00:13:20,520
also on iOS and it's about to be

330
00:13:20,520 --> 00:13:24,030
implemented or nearly ready it's hidden

331
00:13:24,030 --> 00:13:26,730
behind a flag for Firefox and it will be

332
00:13:26,730 --> 00:13:29,480
implemented in etch you can define

333
00:13:29,480 --> 00:13:32,130
elements by yourself if you ever have

334
00:13:32,130 --> 00:13:35,040
done angular version one you maybe know

335
00:13:35,040 --> 00:13:37,860
how to define an element it's nearly the

336
00:13:37,860 --> 00:13:40,020
same here you define a class with a

337
00:13:40,020 --> 00:13:43,830
constructor which will be which will be

338
00:13:43,830 --> 00:13:46,620
called one year when you use the element

339
00:13:46,620 --> 00:13:48,900
and you just define the elements that

340
00:13:48,900 --> 00:13:53,580
you want to that you want be used with

341
00:13:53,580 --> 00:13:55,590
this you can it's nearly not readable

342
00:13:55,590 --> 00:13:57,960
you can put properties into it

343
00:13:57,960 --> 00:14:01,140
and just use the HTML element and that

344
00:14:01,140 --> 00:14:03,480
means behind that okay now I know why

345
00:14:03,480 --> 00:14:06,030
you wanted to fall down here behind this

346
00:14:06,030 --> 00:14:07,440
element you can hide whether it's a

347
00:14:07,440 --> 00:14:09,300
react application whether it's a angular

348
00:14:09,300 --> 00:14:10,890
application whether that's you element

349
00:14:10,890 --> 00:14:12,960
whatever you can just encapsulate it in

350
00:14:12,960 --> 00:14:15,270
a custom element and then no one will

351
00:14:15,270 --> 00:14:16,890
know what you use behind the scenes and

352
00:14:16,890 --> 00:14:18,050
you can change the implementation

353
00:14:18,050 --> 00:14:20,280
completely as long as you stick with

354
00:14:20,280 --> 00:14:23,730
this contract and the good thing is you

355
00:14:23,730 --> 00:14:26,460
can hide everything behind this element

356
00:14:26,460 --> 00:14:27,840
is that you can use a completely

357
00:14:27,840 --> 00:14:30,420
different at the framework I mean we all

358
00:14:30,420 --> 00:14:32,810
do JavaScript and we all use plenty of

359
00:14:32,810 --> 00:14:35,820
frameworks so I want to introduce a new

360
00:14:35,820 --> 00:14:37,950
framework that's called stencil stencil

361
00:14:37,950 --> 00:14:40,350
j/s is built by the ionic team and it's

362
00:14:40,350 --> 00:14:43,920
exactly what it it's exactly for custom

363
00:14:43,920 --> 00:14:45,930
elements made so it uses the web

364
00:14:45,930 --> 00:14:48,260
component or the custom element api

365
00:14:48,260 --> 00:14:50,880
under the hood with the concepts that

366
00:14:50,880 --> 00:14:53,160
look like angular and that looks like

367
00:14:53,160 --> 00:14:55,710
react so if you have angular if you have

368
00:14:55,710 --> 00:14:57,540
done angular this code will look like

369
00:14:57,540 --> 00:14:59,310
angular for you and if you have done

370
00:14:59,310 --> 00:15:00,930
react it will look like react for you

371
00:15:00,930 --> 00:15:03,510
you define the tag and you can define

372
00:15:03,510 --> 00:15:05,310
styles and everything and everything is

373
00:15:05,310 --> 00:15:08,130
included it's also fully reactive so if

374
00:15:08,130 --> 00:15:09,750
you change the property it will react to

375
00:15:09,750 --> 00:15:11,400
it it has a virtual Dom implementation

376
00:15:11,400 --> 00:15:14,310
all the cool implemented it is

377
00:15:14,310 --> 00:15:15,960
written in typescript and you can

378
00:15:15,960 --> 00:15:17,700
compile it it's really awesome we have

379
00:15:17,700 --> 00:15:20,010
it in production since yesterday at

380
00:15:20,010 --> 00:15:25,860
Lendl so I can really recommend this

381
00:15:25,860 --> 00:15:27,790
tool it also has is it

382
00:15:27,790 --> 00:15:29,380
also can come with server-side rendered

383
00:15:29,380 --> 00:15:34,900
for applications but you don't have to

384
00:15:34,900 --> 00:15:38,980
use something like stand so for this

385
00:15:38,980 --> 00:15:40,330
component things you just can use the

386
00:15:40,330 --> 00:15:42,790
tools you have already like Christian

387
00:15:42,790 --> 00:15:44,940
said you can use react or angular

388
00:15:44,940 --> 00:15:49,990
angular version greater to house will

389
00:15:49,990 --> 00:15:51,850
come with angular element that use

390
00:15:51,850 --> 00:15:59,260
completely the same ok so we mentioned

391
00:15:59,260 --> 00:16:01,360
on why would you do that how do we do

392
00:16:01,360 --> 00:16:03,910
that what our implementation details but

393
00:16:03,910 --> 00:16:06,130
for us it's always important if we talk

394
00:16:06,130 --> 00:16:08,320
about something to mention what are the

395
00:16:08,320 --> 00:16:10,930
downsides because even if we have to

396
00:16:10,930 --> 00:16:13,180
scale a team and micro fragments might

397
00:16:13,180 --> 00:16:17,410
help us everything comes at a cost one

398
00:16:17,410 --> 00:16:19,330
obvious thing which you probably got

399
00:16:19,330 --> 00:16:20,470
when I was talking about the iframe

400
00:16:20,470 --> 00:16:22,300
within the iframe within the iframe a

401
00:16:22,300 --> 00:16:26,860
bundle sizes it might be a problem

402
00:16:26,860 --> 00:16:28,930
obviously if you start rendering within

403
00:16:28,930 --> 00:16:31,030
one page multiple applications in

404
00:16:31,030 --> 00:16:36,640
iframes or using using custom elements

405
00:16:36,640 --> 00:16:38,440
but one of them uses react and the other

406
00:16:38,440 --> 00:16:42,270
uses angular you have big bundle sizes

407
00:16:42,270 --> 00:16:45,310
that might be a problem it might be okay

408
00:16:45,310 --> 00:16:47,110
if you're like developing Spotify and

409
00:16:47,110 --> 00:16:48,790
you have to download it Spotify up

410
00:16:48,790 --> 00:16:50,290
anyways it doesn't matter whether it's

411
00:16:50,290 --> 00:16:52,510
contains five megabytes of react and

412
00:16:52,510 --> 00:16:54,070
five megabytes of angular because people

413
00:16:54,070 --> 00:16:55,390
are going to stream a lot of music with

414
00:16:55,390 --> 00:16:59,170
it anyway so who cares it also depends

415
00:16:59,170 --> 00:17:00,460
on the approach that you take if you

416
00:17:00,460 --> 00:17:02,470
have like Lendl does that the shared

417
00:17:02,470 --> 00:17:04,600
runtimes the payment page that you

418
00:17:04,600 --> 00:17:07,360
wizard like once a month maybe and the

419
00:17:07,360 --> 00:17:10,300
landing page that you only visit once in

420
00:17:10,300 --> 00:17:12,790
your lifetime probably and then the real

421
00:17:12,790 --> 00:17:14,320
blender application it doesn't really

422
00:17:14,320 --> 00:17:16,300
matter if all of them have a bundle size

423
00:17:16,300 --> 00:17:17,710
of five megabytes because you usually

424
00:17:17,710 --> 00:17:22,330
only use one of them it does matter

425
00:17:22,330 --> 00:17:24,160
especially for a landing page for

426
00:17:24,160 --> 00:17:26,560
marketing but it's sorry if you have

427
00:17:26,560 --> 00:17:28,450
something like serviceworker for your

428
00:17:28,450 --> 00:17:29,560
main application for your core

429
00:17:29,560 --> 00:17:32,220
application it doesn't matter that much

430
00:17:32,220 --> 00:17:34,900
also if you're doing one of this shared

431
00:17:34,900 --> 00:17:36,670
runtime approaches one thing that I

432
00:17:36,670 --> 00:17:37,840
mentioned before we are having this

433
00:17:37,840 --> 00:17:40,150
react application that actually consists

434
00:17:40,150 --> 00:17:41,870
of multiple react

435
00:17:41,870 --> 00:17:43,910
what we do there is that most of the

436
00:17:43,910 --> 00:17:46,429
react libraries are only loaded once

437
00:17:46,429 --> 00:17:48,710
because we just used the same version of

438
00:17:48,710 --> 00:17:52,250
react or a router react whatever so we

439
00:17:52,250 --> 00:17:53,630
only have to load them once so that

440
00:17:53,630 --> 00:17:55,970
makes stuff better you can you can

441
00:17:55,970 --> 00:17:57,590
improve stuff there but you should take

442
00:17:57,590 --> 00:18:00,950
a lot of care obviously and yeah I

443
00:18:00,950 --> 00:18:02,720
mention it before if you're doing the

444
00:18:02,720 --> 00:18:04,940
iframe approach things might get very

445
00:18:04,940 --> 00:18:07,700
very dirty very very early because if

446
00:18:07,700 --> 00:18:10,220
you're bootstrap multiple applications

447
00:18:10,220 --> 00:18:13,070
on the same page that's gonna be a lot

448
00:18:13,070 --> 00:18:14,990
of bundles also it's gonna be a lot of

449
00:18:14,990 --> 00:18:17,000
memory because you're gonna have ten

450
00:18:17,000 --> 00:18:19,130
instances of react and five instances of

451
00:18:19,130 --> 00:18:20,960
angular and five instances of you

452
00:18:20,960 --> 00:18:23,600
running on the same page so I don't know

453
00:18:23,600 --> 00:18:27,049
old cheap Android phones and all cheap

454
00:18:27,049 --> 00:18:32,250
iPhones might might have problems there

455
00:18:32,260 --> 00:18:35,150
again there might be situations where it

456
00:18:35,150 --> 00:18:37,130
works like the Spotify player I

457
00:18:37,130 --> 00:18:38,660
mentioned before all these service

458
00:18:38,660 --> 00:18:42,440
workers which might have as well one big

459
00:18:42,440 --> 00:18:45,770
problem is consistent look and feel if

460
00:18:45,770 --> 00:18:47,870
you have like ten teams they're

461
00:18:47,870 --> 00:18:49,940
developing ten front-ends and they're

462
00:18:49,940 --> 00:18:52,850
somehow integrated like with iframes or

463
00:18:52,850 --> 00:18:54,530
however they however you want to

464
00:18:54,530 --> 00:18:56,900
integrate them even with a shared

465
00:18:56,900 --> 00:18:59,840
runtime approach if team a decides okay

466
00:18:59,840 --> 00:19:02,059
that button becomes green now and has

467
00:19:02,059 --> 00:19:03,169
been blue forever

468
00:19:03,169 --> 00:19:05,390
the rest of the replication probably

469
00:19:05,390 --> 00:19:07,610
still has the blue one that might be a

470
00:19:07,610 --> 00:19:12,500
problem so the question is now what do

471
00:19:12,500 --> 00:19:13,730
we do to make sure that the button

472
00:19:13,730 --> 00:19:16,460
always has the same color

473
00:19:16,460 --> 00:19:18,950
one approach that actually in a ten yet

474
00:19:18,950 --> 00:19:20,750
a conference mentioned to us like two

475
00:19:20,750 --> 00:19:22,790
weeks ago three weeks ago it's pretty

476
00:19:22,790 --> 00:19:25,100
straightforward we just don't care

477
00:19:25,100 --> 00:19:27,980
because the user won't care if the okay

478
00:19:27,980 --> 00:19:29,809
button is sometimes green and sometimes

479
00:19:29,809 --> 00:19:32,600
blue there's this American startup in

480
00:19:32,600 --> 00:19:33,830
e-commerce there called something like

481
00:19:33,830 --> 00:19:36,620
Amazon I don't know if it's a river yeah

482
00:19:36,620 --> 00:19:39,860
yeah sorry if you look at their webpage

483
00:19:39,860 --> 00:19:43,190
it's unbelievable inconsistent go to the

484
00:19:43,190 --> 00:19:45,140
settings or even worse go to Amazon

485
00:19:45,140 --> 00:19:46,970
business settings and everything looks I

486
00:19:46,970 --> 00:19:48,919
don't know like an HTML page that's 15

487
00:19:48,919 --> 00:19:51,799
years old so there might be reasons

488
00:19:51,799 --> 00:19:53,570
might be situations where you just have

489
00:19:53,570 --> 00:19:55,190
to you can ignore it and maybe

490
00:19:55,190 --> 00:19:57,230
you make the button green at the other

491
00:19:57,230 --> 00:19:59,450
applications five month later that's

492
00:19:59,450 --> 00:20:00,560
fine yes

493
00:20:00,560 --> 00:20:04,180
some different start apps like face

494
00:20:04,180 --> 00:20:07,550
Facebook weather also change buttons

495
00:20:07,550 --> 00:20:09,920
often or or glasses no Google is it

496
00:20:09,920 --> 00:20:13,160
Google also have different buttons on

497
00:20:13,160 --> 00:20:15,620
different pages if you dive deeper into

498
00:20:15,620 --> 00:20:17,840
an UI I mean if you ever have used

499
00:20:17,840 --> 00:20:20,690
analytics Google Analytics page it's the

500
00:20:20,690 --> 00:20:23,390
hell of inconsistence UI but it just

501
00:20:23,390 --> 00:20:26,690
works and it makes a lot of money right

502
00:20:26,690 --> 00:20:30,260
so it can't be that bad but of course we

503
00:20:30,260 --> 00:20:31,910
have like real solutions that are not

504
00:20:31,910 --> 00:20:37,280
saying ignore it another projection we

505
00:20:37,280 --> 00:20:39,290
skip that shared CSS thing right yeah

506
00:20:39,290 --> 00:20:41,960
I'm gonna say that you can have one big

507
00:20:41,960 --> 00:20:43,640
CSS file for all your microphone that's

508
00:20:43,640 --> 00:20:45,230
if you're good at CSS I'm not but if

509
00:20:45,230 --> 00:20:46,960
you're good at it you can do that

510
00:20:46,960 --> 00:20:49,310
something just like bootstrap is doing

511
00:20:49,310 --> 00:20:51,080
you have one CSS and we use the class

512
00:20:51,080 --> 00:20:56,030
names everywhere but another approach is

513
00:20:56,030 --> 00:20:58,130
to have a component library a UI

514
00:20:58,130 --> 00:21:01,670
component library you can use the

515
00:21:01,670 --> 00:21:03,140
microphone that idea and the custom

516
00:21:03,140 --> 00:21:05,030
element idea to build reusable

517
00:21:05,030 --> 00:21:07,670
components just we saw earlier with the

518
00:21:07,670 --> 00:21:11,840
input element you can build your your

519
00:21:11,840 --> 00:21:13,970
your check out button your company check

520
00:21:13,970 --> 00:21:16,520
out button in a shared component library

521
00:21:16,520 --> 00:21:18,470
and reuse the same UI everywhere in

522
00:21:18,470 --> 00:21:20,300
every project the nice thing is you

523
00:21:20,300 --> 00:21:21,590
don't have to reinvent the wheel every

524
00:21:21,590 --> 00:21:24,260
time you have a dialog component any of

525
00:21:24,260 --> 00:21:25,970
your main components your main UI

526
00:21:25,970 --> 00:21:28,810
components somebody find also this helps

527
00:21:28,810 --> 00:21:31,520
to communicate with designers then you

528
00:21:31,520 --> 00:21:34,310
have one file a kind of style guide

529
00:21:34,310 --> 00:21:36,290
where everything is defined and if a

530
00:21:36,290 --> 00:21:38,480
designer comes around with a new design

531
00:21:38,480 --> 00:21:42,290
you just can use the existing ones and

532
00:21:42,290 --> 00:21:44,840
check with him maybe to use existing

533
00:21:44,840 --> 00:21:51,920
ones that's actually something that's

534
00:21:51,920 --> 00:21:53,600
very very easy if you use the same

535
00:21:53,600 --> 00:21:55,750
framework within every of your micro

536
00:21:55,750 --> 00:21:58,370
micro front-ends because then you can

537
00:21:58,370 --> 00:22:00,410
just like expose react components in

538
00:22:00,410 --> 00:22:02,870
your UI component library or you can

539
00:22:02,870 --> 00:22:05,540
expose angular elements in the UI

540
00:22:05,540 --> 00:22:07,670
component library if you're mixing it

541
00:22:07,670 --> 00:22:08,840
again it gets more complicated

542
00:22:08,840 --> 00:22:11,059
but we heard about the custom elements

543
00:22:11,059 --> 00:22:14,600
API before so I think you can do it even

544
00:22:14,600 --> 00:22:17,179
if you have different libraries just

545
00:22:17,179 --> 00:22:19,279
keep in mind that if you have a shared

546
00:22:19,279 --> 00:22:21,320
libraries that you want to be sure that

547
00:22:21,320 --> 00:22:22,879
the version of your library we don't

548
00:22:22,879 --> 00:22:24,350
have breaking changes because when it

549
00:22:24,350 --> 00:22:26,120
wants you change the API of your UI

550
00:22:26,120 --> 00:22:29,210
elements every other microphone and will

551
00:22:29,210 --> 00:22:31,669
break and you have to fix it manually

552
00:22:31,669 --> 00:22:33,590
that's why I would always say if you're

553
00:22:33,590 --> 00:22:36,080
developing such a component library have

554
00:22:36,080 --> 00:22:37,669
like the strictest code review process

555
00:22:37,669 --> 00:22:41,299
in place for this library and just like

556
00:22:41,299 --> 00:22:43,249
an open-source library use semantic

557
00:22:43,249 --> 00:22:45,860
versioning do not break PC like ever and

558
00:22:45,860 --> 00:22:47,299
if you do talk to every team that uses

559
00:22:47,299 --> 00:22:48,860
the library that's the only place where

560
00:22:48,860 --> 00:22:50,809
you're allowed to break PC in these in

561
00:22:50,809 --> 00:22:53,119
these component libraries and use tools

562
00:22:53,119 --> 00:22:54,440
to automatically update your

563
00:22:54,440 --> 00:22:56,119
dependencies and to check the

564
00:22:56,119 --> 00:22:57,710
dependencies I've heard it in every talk

565
00:22:57,710 --> 00:23:00,619
I was today it was - is you something

566
00:23:00,619 --> 00:23:02,360
like greenkeeper or something like

567
00:23:02,360 --> 00:23:04,879
renovate to automatically check put in

568
00:23:04,879 --> 00:23:07,549
pull requests into your codebase once

569
00:23:07,549 --> 00:23:09,049
the dependency updates it's also the

570
00:23:09,049 --> 00:23:11,389
same for own dependencies use a UI

571
00:23:11,389 --> 00:23:13,220
component for as a module and

572
00:23:13,220 --> 00:23:15,590
automatically update them one thing I

573
00:23:15,590 --> 00:23:17,480
want to mention I said take care of that

574
00:23:17,480 --> 00:23:19,580
it's that there's a strict code review

575
00:23:19,580 --> 00:23:21,230
process in place for changes to the

576
00:23:21,230 --> 00:23:23,659
component library there's a problem if

577
00:23:23,659 --> 00:23:25,940
you make it too hard to update the

578
00:23:25,940 --> 00:23:27,649
component library to add new stuff to

579
00:23:27,649 --> 00:23:29,539
the component library people would just

580
00:23:29,539 --> 00:23:30,950
implement the components within their

581
00:23:30,950 --> 00:23:32,629
micro front end and not contribute it

582
00:23:32,629 --> 00:23:34,669
back to your shared component library so

583
00:23:34,669 --> 00:23:35,840
that's really something that's not gonna

584
00:23:35,840 --> 00:23:41,749
be easy once you have a component

585
00:23:41,749 --> 00:23:44,179
library you should build something like

586
00:23:44,179 --> 00:23:46,879
a kitchen sink a component library

587
00:23:46,879 --> 00:23:49,549
example page you can use something like

588
00:23:49,549 --> 00:23:51,919
style guide is if you're using react or

589
00:23:51,919 --> 00:23:55,330
you can use storybook if you're using

590
00:23:55,330 --> 00:23:58,190
polymer or web components react or

591
00:23:58,190 --> 00:24:01,730
angular Union or view is also you think

592
00:24:01,730 --> 00:24:04,159
it's okay if you use one of the major

593
00:24:04,159 --> 00:24:06,379
frameworks then your storybook both of

594
00:24:06,379 --> 00:24:08,450
these tools are awesome and can help in

595
00:24:08,450 --> 00:24:11,360
the progress a process also you can show

596
00:24:11,360 --> 00:24:14,059
every case that is possible with your

597
00:24:14,059 --> 00:24:16,490
component one thing we're talking about

598
00:24:16,490 --> 00:24:18,049
sharing code here between multiple

599
00:24:18,049 --> 00:24:19,549
microphone that's using a component

600
00:24:19,549 --> 00:24:22,100
library and some people will tell you if

601
00:24:22,100 --> 00:24:22,310
you

602
00:24:22,310 --> 00:24:24,650
doing micro front ends or micro-services

603
00:24:24,650 --> 00:24:26,690
or self-contained systems or whatever do

604
00:24:26,690 --> 00:24:28,820
not share code between them so do not

605
00:24:28,820 --> 00:24:31,160
create a component library like this we

606
00:24:31,160 --> 00:24:34,460
disagree with this there are things that

607
00:24:34,460 --> 00:24:36,560
you shouldn't care share I think in the

608
00:24:36,560 --> 00:24:38,630
self-contained system world people are

609
00:24:38,630 --> 00:24:40,550
very agree on the fact that you should

610
00:24:40,550 --> 00:24:45,410
not share business code but stuff like

611
00:24:45,410 --> 00:24:47,390
UI components as long as they don't

612
00:24:47,390 --> 00:24:49,520
contain business logic that's fine or

613
00:24:49,520 --> 00:24:53,300
tooling that should be fine as well you

614
00:24:53,300 --> 00:24:56,150
don't want to implement uses a user

615
00:24:56,150 --> 00:24:58,580
query every time in every project in

616
00:24:58,580 --> 00:25:00,290
every microphone that you have you want

617
00:25:00,290 --> 00:25:05,150
reusable stuff for this yes there's one

618
00:25:05,150 --> 00:25:06,860
thing my favorite topic that I always

619
00:25:06,860 --> 00:25:09,070
rage about when I talk about JavaScript

620
00:25:09,070 --> 00:25:14,180
who a few likes to maintain web page

621
00:25:14,180 --> 00:25:17,420
configuration files there are people who

622
00:25:17,420 --> 00:25:20,060
like that like four of them or five

623
00:25:20,060 --> 00:25:23,030
sorry yeah the thing is if you hate

624
00:25:23,030 --> 00:25:25,040
configuring them maintaining them like I

625
00:25:25,040 --> 00:25:26,630
do I really hate that you know I have to

626
00:25:26,630 --> 00:25:28,610
do that like 17 times right because you

627
00:25:28,610 --> 00:25:30,790
know I have seventeen microphone ends so

628
00:25:30,790 --> 00:25:33,290
you really have to invest into cheap

629
00:25:33,290 --> 00:25:35,060
tooling you mentioned greenkeeper before

630
00:25:35,060 --> 00:25:38,180
that's very very good to have that also

631
00:25:38,180 --> 00:25:40,310
if you don't use maybe you use different

632
00:25:40,310 --> 00:25:42,350
package manager in different projects

633
00:25:42,350 --> 00:25:43,790
maybe you have got maybe you have roll

634
00:25:43,790 --> 00:25:45,940
up maybe you have grunt maybe you have

635
00:25:45,940 --> 00:25:50,110
next big thing JSP parcel I don't know

636
00:25:50,110 --> 00:25:53,320
you can use all of them belt make

637
00:25:53,320 --> 00:25:56,150
contracts between teams that you use the

638
00:25:56,150 --> 00:25:59,060
same tools for every project you have

639
00:25:59,060 --> 00:26:01,220
that might make sense because otherwise

640
00:26:01,220 --> 00:26:02,060
yeah

641
00:26:02,060 --> 00:26:03,560
knowledge will be spread completely

642
00:26:03,560 --> 00:26:06,560
weird one important thing you have to

643
00:26:06,560 --> 00:26:08,450
think about is routing between front

644
00:26:08,450 --> 00:26:10,040
ends we just mentions that you have to

645
00:26:10,040 --> 00:26:12,550
that we reinvented hyperlinks between

646
00:26:12,550 --> 00:26:17,320
different Dom States also if you

647
00:26:17,320 --> 00:26:21,580
navigate from one to another

648
00:26:21,590 --> 00:26:23,180
Micro front-end you want to preload

649
00:26:23,180 --> 00:26:25,100
stuff so you want to make sure that it

650
00:26:25,100 --> 00:26:27,170
is working in a correct way just on the

651
00:26:27,170 --> 00:26:29,630
client side but also you have you want

652
00:26:29,630 --> 00:26:31,130
to have something on the server sides

653
00:26:31,130 --> 00:26:33,950
that make routing to different front

654
00:26:33,950 --> 00:26:35,510
ends on different paths it's much more

655
00:26:35,510 --> 00:26:36,130
easily

656
00:26:36,130 --> 00:26:38,530
easier you can use something simple like

657
00:26:38,530 --> 00:26:41,050
engine eggs or an express server for

658
00:26:41,050 --> 00:26:42,610
that but they are complicated more

659
00:26:42,610 --> 00:26:44,740
complicated stuff out there you can use

660
00:26:44,740 --> 00:26:46,570
that you find it if you search for

661
00:26:46,570 --> 00:26:48,910
routing or microformats and obviously if

662
00:26:48,910 --> 00:26:50,320
you're using like a shared runtime

663
00:26:50,320 --> 00:26:52,120
approach where you're using react view

664
00:26:52,120 --> 00:26:54,310
and angular on the same page you can't

665
00:26:54,310 --> 00:26:56,440
just use angular router because yeah you

666
00:26:56,440 --> 00:26:57,760
also need to support direct route to

667
00:26:57,760 --> 00:26:59,410
somehow or you develop your own router

668
00:26:59,410 --> 00:27:00,940
because developing your own library is

669
00:27:00,940 --> 00:27:05,760
always a good idea right irony Thanks

670
00:27:05,760 --> 00:27:09,760
okay so again the conclusion microphone

671
00:27:09,760 --> 00:27:11,530
ends might help you big time we have

672
00:27:11,530 --> 00:27:16,000
kind of different opinions on one when

673
00:27:16,000 --> 00:27:17,650
you want to introduce micro fragments

674
00:27:17,650 --> 00:27:19,570
for me it's always a question of if your

675
00:27:19,570 --> 00:27:21,640
team is getting too big then they might

676
00:27:21,640 --> 00:27:23,730
really really help you if you're

677
00:27:23,730 --> 00:27:26,920
modernizing applications like mi just

678
00:27:26,920 --> 00:27:28,990
mentioned then it's really a big help we

679
00:27:28,990 --> 00:27:31,060
can because even if you have this big

680
00:27:31,060 --> 00:27:33,490
old XJ s3 application that some

681
00:27:33,490 --> 00:27:36,520
companies still have you can someone is

682
00:27:36,520 --> 00:27:38,980
laughing not the one I was talking to

683
00:27:38,980 --> 00:27:40,840
actually he didn't start laughing okay

684
00:27:40,840 --> 00:27:42,820
then you can just start developing your

685
00:27:42,820 --> 00:27:44,740
new components with react and integrate

686
00:27:44,740 --> 00:27:46,870
them to your old application or do it

687
00:27:46,870 --> 00:27:49,150
the way that blender does this all works

688
00:27:49,150 --> 00:27:51,130
and it helps you a lot but it comes at a

689
00:27:51,130 --> 00:27:55,030
cost again 17 webpack configs right so

690
00:27:55,030 --> 00:27:58,060
always introduce new micro front ends

691
00:27:58,060 --> 00:28:00,820
with care I've seen projects that have

692
00:28:00,820 --> 00:28:03,760
like 10 to 15 micro front ends for like

693
00:28:03,760 --> 00:28:07,090
three front end developers that usually

694
00:28:07,090 --> 00:28:09,760
hurts a lot so take care when you

695
00:28:09,760 --> 00:28:11,860
introduce new micro front ends just be

696
00:28:11,860 --> 00:28:14,200
sure that you don't implement or just

697
00:28:14,200 --> 00:28:16,600
adds new complexity too because it's

698
00:28:16,600 --> 00:28:18,540
cool to have micro front ends right now

699
00:28:18,540 --> 00:28:22,360
always check if it's needed and mostly

700
00:28:22,360 --> 00:28:24,150
it's when you want to modernize your

701
00:28:24,150 --> 00:28:26,230
applications then it's a really good way

702
00:28:26,230 --> 00:28:28,810
to add new micro front ends don't forget

703
00:28:28,810 --> 00:28:30,880
if you modernize to throw away old code

704
00:28:30,880 --> 00:28:33,520
that's the most important thing always

705
00:28:33,520 --> 00:28:35,260
keep in mind that throwing away code

706
00:28:35,260 --> 00:28:37,990
should be the best way when you review a

707
00:28:37,990 --> 00:28:39,820
code make sure that the code is

708
00:28:39,820 --> 00:28:43,090
removable later on this will help if you

709
00:28:43,090 --> 00:28:44,860
want to implement micro front ends once

710
00:28:44,860 --> 00:28:47,080
in a time maybe in five years so if you

711
00:28:47,080 --> 00:28:49,330
use microphones for like you mentioned

712
00:28:49,330 --> 00:28:50,020
the

713
00:28:50,020 --> 00:28:51,730
legacy or the modernizing of legacy

714
00:28:51,730 --> 00:28:53,980
applications and you start with the

715
00:28:53,980 --> 00:28:56,740
extras monolith and start the new react

716
00:28:56,740 --> 00:28:58,540
application there if you then decide

717
00:28:58,540 --> 00:29:00,250
okay we want to go with view jeaious

718
00:29:00,250 --> 00:29:02,350
then maybe don't set up the third

719
00:29:02,350 --> 00:29:04,360
microphone and with view J's but try to

720
00:29:04,360 --> 00:29:07,240
get rid of one of the others first I'll

721
00:29:07,240 --> 00:29:08,740
just start a new micro front-end with

722
00:29:08,740 --> 00:29:11,080
react because you have it already all

723
00:29:11,080 --> 00:29:16,240
right miss x3 s3 that's actually all of

724
00:29:16,240 --> 00:29:17,680
our content I think we have like three

725
00:29:17,680 --> 00:29:19,810
four minutes left for questions are

726
00:29:19,810 --> 00:29:23,610
there any questions about this topic

727
00:29:23,610 --> 00:29:31,570
there's one yes I didn't get that word

728
00:29:31,570 --> 00:29:35,590
how do you synchronize what yes that's

729
00:29:35,590 --> 00:29:36,610
an interesting thing that's actually

730
00:29:36,610 --> 00:29:38,170
something that I just experienced in an

731
00:29:38,170 --> 00:29:39,190
application where people had problems

732
00:29:39,190 --> 00:29:42,460
with that so what we do is we have quite

733
00:29:42,460 --> 00:29:44,050
a lot of events flowing between the

734
00:29:44,050 --> 00:29:46,240
iframe and the outer regions so we have

735
00:29:46,240 --> 00:29:48,310
for this this placeholder image that's

736
00:29:48,310 --> 00:29:50,860
rendered before the actual content of

737
00:29:50,860 --> 00:29:52,450
the four iframes rendered and at some

738
00:29:52,450 --> 00:29:54,310
point the iframe is gonna send a okay

739
00:29:54,310 --> 00:29:55,960
I'm done rendering and then the image is

740
00:29:55,960 --> 00:29:57,160
replaced with the content of the real

741
00:29:57,160 --> 00:29:59,740
iframe does that somehow answer your

742
00:29:59,740 --> 00:30:04,540
question great other questions or do you

743
00:30:04,540 --> 00:30:12,100
want to add something sorry no how do

744
00:30:12,100 --> 00:30:19,120
you share what state state yeah if you

745
00:30:19,120 --> 00:30:21,640
want to share a state you always want to

746
00:30:21,640 --> 00:30:23,320
make sure that it's the lowest level

747
00:30:23,320 --> 00:30:23,830
possible

748
00:30:23,830 --> 00:30:25,540
mostly it's something like a refresh

749
00:30:25,540 --> 00:30:27,310
token or a jpg and you want to build up

750
00:30:27,310 --> 00:30:28,690
the state by your own because you have

751
00:30:28,690 --> 00:30:30,430
your own state management library in

752
00:30:30,430 --> 00:30:34,210
every other language if you have one

753
00:30:34,210 --> 00:30:36,370
state management library for multiple

754
00:30:36,370 --> 00:30:38,920
languages something like Redux or

755
00:30:38,920 --> 00:30:40,510
something like mopix

756
00:30:40,510 --> 00:30:42,730
then it's possible to use the same state

757
00:30:42,730 --> 00:30:45,580
library and just swap out the UI part it

758
00:30:45,580 --> 00:30:49,060
heavily depends but mostly you want to

759
00:30:49,060 --> 00:30:52,030
go down as much as possible and don't

760
00:30:52,030 --> 00:30:53,740
share any stage between them that's

761
00:30:53,740 --> 00:30:55,210
exactly exactly what I wanted to say so

762
00:30:55,210 --> 00:30:57,370
you mentioned JSON web tokens or let's

763
00:30:57,370 --> 00:30:58,780
say the information has to be about the

764
00:30:58,780 --> 00:31:01,150
current user you may share that state if

765
00:31:01,150 --> 00:31:02,890
you want to share more state then

766
00:31:02,890 --> 00:31:03,970
probably these

767
00:31:03,970 --> 00:31:06,009
should not be two different microphones

768
00:31:06,009 --> 00:31:07,840
because they're responsible for the same

769
00:31:07,840 --> 00:31:10,360
business domain so they should actually

770
00:31:10,360 --> 00:31:25,509
be one application how do you make them

771
00:31:25,509 --> 00:31:27,309
communicate with each other it totally

772
00:31:27,309 --> 00:31:29,590
depends on the approach so if it's the

773
00:31:29,590 --> 00:31:31,990
iframe approach you can just use this

774
00:31:31,990 --> 00:31:34,090
postmessage api is that the name I think

775
00:31:34,090 --> 00:31:36,519
it's the name yes if it's in the shared

776
00:31:36,519 --> 00:31:38,590
runtime you can have them Central even

777
00:31:38,590 --> 00:31:40,889
passed there what we're doing with a

778
00:31:40,889 --> 00:31:42,879
separate runtime thing is that we have a

779
00:31:42,879 --> 00:31:45,039
even pass in the backend and some of the

780
00:31:45,039 --> 00:31:47,590
events are actually transferred to the

781
00:31:47,590 --> 00:31:50,110
front end using WebSockets so that I can

782
00:31:50,110 --> 00:31:52,690
communicate using that what's important

783
00:31:52,690 --> 00:31:54,100
there from my point of view is have a

784
00:31:54,100 --> 00:31:57,039
defined contract on what is allowed as a

785
00:31:57,039 --> 00:31:59,590
communication I experience one project

786
00:31:59,590 --> 00:32:02,259
they just through Redux messages Redux

787
00:32:02,259 --> 00:32:04,919
actions into the Redux message bus and

788
00:32:04,919 --> 00:32:06,970
nowhere there was any documentation

789
00:32:06,970 --> 00:32:09,190
about the messages someone just assumed

790
00:32:09,190 --> 00:32:10,779
okay if the message is called

791
00:32:10,779 --> 00:32:12,669
at user then there's probably this

792
00:32:12,669 --> 00:32:15,940
property that's gonna be a hell so if

793
00:32:15,940 --> 00:32:17,889
you communicate with each other define a

794
00:32:17,889 --> 00:32:19,690
contract there there is also a good

795
00:32:19,690 --> 00:32:21,039
library from Zendesk

796
00:32:21,039 --> 00:32:24,009
it's called shared shared storage it's

797
00:32:24,009 --> 00:32:25,600
something like local storage but for

798
00:32:25,600 --> 00:32:28,720
different domains x''b all which works

799
00:32:28,720 --> 00:32:30,399
very good for if you have different

800
00:32:30,399 --> 00:32:34,090
runtimes I think and there's one last

801
00:32:34,090 --> 00:32:44,620
question

802
00:32:44,630 --> 00:32:47,040
what is Universal renderings that back

803
00:32:47,040 --> 00:32:48,600
into the server-side rendering in front

804
00:32:48,600 --> 00:32:49,500
and rendering I'm not sure right now

805
00:32:49,500 --> 00:32:52,230
yeah if you have I want to have

806
00:32:52,230 --> 00:32:53,850
universal rendering you have to say with

807
00:32:53,850 --> 00:32:56,640
one framework and you can't mix the

808
00:32:56,640 --> 00:32:58,290
different front ends in between that's

809
00:32:58,290 --> 00:33:00,150
more integrated in the web server like

810
00:33:00,150 --> 00:33:01,770
if you have an express server then you

811
00:33:01,770 --> 00:33:04,380
could do weird stuff there you can do

812
00:33:04,380 --> 00:33:06,180
weird stuff but it's hard and yet it's

813
00:33:06,180 --> 00:33:08,310
minimal work it's not really something

814
00:33:08,310 --> 00:33:10,860
that that works out of the boxes like

815
00:33:10,860 --> 00:33:14,430
react render or view of angular or I

816
00:33:14,430 --> 00:33:16,020
don't know if there are further

817
00:33:16,020 --> 00:33:17,370
questions we're gonna be here the whole

818
00:33:17,370 --> 00:33:18,750
day we're gonna be at the party tonight

819
00:33:18,750 --> 00:33:21,180
just come to us talk to us talk to us on

820
00:33:21,180 --> 00:33:22,470
Twitter I think our names are there yes

821
00:33:22,470 --> 00:33:24,930
they are so thanks a lot and have a lot

822
00:33:24,930 --> 00:33:26,730
of fun at the JSON conf

823
00:33:26,730 --> 00:33:29,170
[Applause]

