1
00:00:04,980 --> 00:00:08,309

so this is actually my first crew do

2
00:00:08,309 --> 00:00:09,900
conference talk every other talk I've

3
00:00:09,900 --> 00:00:13,500
given has been internal or to small

4
00:00:13,500 --> 00:00:16,289
meetups or just groups of friends so

5
00:00:16,289 --> 00:00:17,990
this is actually kind of exciting for me

6
00:00:17,990 --> 00:00:22,710
thank you thank you so I am a developer

7
00:00:22,710 --> 00:00:24,779
advocate with the Google Chrome team and

8
00:00:24,779 --> 00:00:27,359
my explicit focus is Chrome extensions

9
00:00:27,359 --> 00:00:31,439
and the the Chrome Web Store so today

10
00:00:31,439 --> 00:00:32,960
I'd like to talk to you a bit about how

11
00:00:32,960 --> 00:00:35,340
Chrome is trying to evolve the

12
00:00:35,340 --> 00:00:37,680
extensions platform in order to make it

13
00:00:37,680 --> 00:00:40,350
more secure stable and reliable friend

14
00:00:40,350 --> 00:00:44,460
users so the high-level overview of what

15
00:00:44,460 --> 00:00:46,260
I'm going to be talking about is a broad

16
00:00:46,260 --> 00:00:49,489
history of an abbreviated history of

17
00:00:49,489 --> 00:00:52,050
browser extensions and custom is a

18
00:00:52,050 --> 00:00:54,170
customized ability in the browser

19
00:00:54,170 --> 00:00:57,230
Chrome's approach to extensions and

20
00:00:57,230 --> 00:01:00,390
finally what is changing in manifest v3

21
00:01:00,390 --> 00:01:04,739
so onto the browser history browser

22
00:01:04,739 --> 00:01:06,450
history is very long very complicated

23
00:01:06,450 --> 00:01:07,770
there's a ton of different stuff so I'm

24
00:01:07,770 --> 00:01:10,080
gonna be giving a vastly oversimplified

25
00:01:10,080 --> 00:01:12,990
history here and if you're expecting

26
00:01:12,990 --> 00:01:14,729
something exciting here don't be because

27
00:01:14,729 --> 00:01:17,119
it is literally these bullet points so

28
00:01:17,119 --> 00:01:19,159
first up we have Netscape Navigator

29
00:01:19,159 --> 00:01:21,840
Internet Explorer and then Firefox v1

30
00:01:21,840 --> 00:01:24,420
each of these kind of introduces a new

31
00:01:24,420 --> 00:01:26,909
concept to browser extension and

32
00:01:26,909 --> 00:01:29,100
customization and obviously finally

33
00:01:29,100 --> 00:01:31,799
Chrome with its own special take so

34
00:01:31,799 --> 00:01:34,079
Netscape Navigator wait before I go on

35
00:01:34,079 --> 00:01:35,790
one of my favorite things about this

36
00:01:35,790 --> 00:01:39,420
slide is the the animation in the

37
00:01:39,420 --> 00:01:41,490
Navigator logo I totally forgot it's

38
00:01:41,490 --> 00:01:43,470
been long enough that but when I was

39
00:01:43,470 --> 00:01:45,090
doing research for this and looking into

40
00:01:45,090 --> 00:01:47,750
the history of browsers I forgot how

41
00:01:47,750 --> 00:01:50,189
common these kind of throb animations

42
00:01:50,189 --> 00:01:52,500
were and it's an artifact of web history

43
00:01:52,500 --> 00:01:56,159
that I kind of miss anyway Netscape

44
00:01:56,159 --> 00:01:58,530
Navigator was the first browser that

45
00:01:58,530 --> 00:02:01,890
allowed third-party developers to modify

46
00:02:01,890 --> 00:02:04,490
what the browser could do post

47
00:02:04,490 --> 00:02:06,420
installation after it was actually on

48
00:02:06,420 --> 00:02:07,979
the user's machine and they did this

49
00:02:07,979 --> 00:02:10,440
through the introduction of a NPAPI or

50
00:02:10,440 --> 00:02:12,360
Netscape plug-in application programming

51
00:02:12,360 --> 00:02:12,930
interface

52
00:02:12,930 --> 00:02:16,220
NPAPI was cool because it allowed

53
00:02:16,220 --> 00:02:18,510
third-party developers to register new

54
00:02:18,510 --> 00:02:20,420
content types that the browser could

55
00:02:20,420 --> 00:02:23,580
display and the user could interact with

56
00:02:23,580 --> 00:02:25,580
so this was originally introduced

57
00:02:25,580 --> 00:02:28,739
specifically for Java applets but later

58
00:02:28,739 --> 00:02:32,459
on folks like Mozilla used this

59
00:02:32,459 --> 00:02:35,819
capability to add the ability to for

60
00:02:35,819 --> 00:02:38,280
application PDF work to display PDFs in

61
00:02:38,280 --> 00:02:42,150
a browser so this capability was reverse

62
00:02:42,150 --> 00:02:44,819
engineer able and ultimately extendable

63
00:02:44,819 --> 00:02:47,640
by third other third parties but one of

64
00:02:47,640 --> 00:02:50,760
the disadvantages of this approach is

65
00:02:50,760 --> 00:02:52,769
that fundamentally they didn't really

66
00:02:52,769 --> 00:02:54,569
have a security model this was just a

67
00:02:54,569 --> 00:02:56,519
some native code running in the browser

68
00:02:56,519 --> 00:02:58,620
executed in the browser's process and it

69
00:02:58,620 --> 00:03:00,569
had the same capabilities the threat

70
00:03:00,569 --> 00:03:01,709
model at the time was very different

71
00:03:01,709 --> 00:03:03,780
than we have today so that wasn't too

72
00:03:03,780 --> 00:03:06,390
much of a concern but it was something

73
00:03:06,390 --> 00:03:09,180
to be aware of the most practical side

74
00:03:09,180 --> 00:03:12,560
effect of this is if you had an unstable

75
00:03:12,560 --> 00:03:15,569
plugin let's say maybe it was something

76
00:03:15,569 --> 00:03:18,540
like a PDF displayer it might crash your

77
00:03:18,540 --> 00:03:21,329
browser unexpectedly that was pretty not

78
00:03:21,329 --> 00:03:24,599
great as an end user experience the next

79
00:03:24,599 --> 00:03:26,459
major phase we have here is internet

80
00:03:26,459 --> 00:03:28,379
explorer floor Internet Explorer

81
00:03:28,379 --> 00:03:32,129
introduced the first this was the first

82
00:03:32,129 --> 00:03:37,200
time a a browser allowed third parties

83
00:03:37,200 --> 00:03:38,609
to actually modify the browser's

84
00:03:38,609 --> 00:03:40,919
behavior rather than just the the

85
00:03:40,919 --> 00:03:43,139
content that it could display and before

86
00:03:43,139 --> 00:03:46,470
I go on again logo stuff this in my head

87
00:03:46,470 --> 00:03:47,730
is what I think of when I think of

88
00:03:47,730 --> 00:03:50,010
Internet Explorer 4 it turns out this is

89
00:03:50,010 --> 00:03:52,769
actually like the eye 6 and 7 logo in

90
00:03:52,769 --> 00:03:56,129
loading animation ie 4 actually had this

91
00:03:56,129 --> 00:03:59,489
modern style logo which I find kind of

92
00:03:59,489 --> 00:04:01,980
funny that we started here and then

93
00:04:01,980 --> 00:04:03,930
moved away and went skeuomorphic and

94
00:04:03,930 --> 00:04:05,639
then came back to this super reduced

95
00:04:05,639 --> 00:04:06,900
minimal thing anyway none of that's

96
00:04:06,900 --> 00:04:11,010
important so one of the capabilities

97
00:04:11,010 --> 00:04:13,650
that they introduced from 94 was this

98
00:04:13,650 --> 00:04:15,750
shortcuts menu or context menu when you

99
00:04:15,750 --> 00:04:17,430
right-click you were able to go to a

100
00:04:17,430 --> 00:04:20,039
menu and take an action that would be

101
00:04:20,039 --> 00:04:24,430
invoked in your extension

102
00:04:24,440 --> 00:04:26,970
this was a nice bit of functionality but

103
00:04:26,970 --> 00:04:28,320
not I don't know

104
00:04:28,320 --> 00:04:30,540
the end-all-be-all internet explorer

105
00:04:30,540 --> 00:04:33,360
also introduced Explorer VARs or in what

106
00:04:33,360 --> 00:04:36,360
some modern browsers call sidebars so

107
00:04:36,360 --> 00:04:39,270
this is persistent content that frames

108
00:04:39,270 --> 00:04:44,200
the web UI that you're interacting with

109
00:04:44,210 --> 00:04:47,730
next up we have toolbars and you can see

110
00:04:47,730 --> 00:04:50,370
Google is one of the many providers of

111
00:04:50,370 --> 00:04:53,460
toolbars this would typically be things

112
00:04:53,460 --> 00:04:56,300
like overriding your search provider

113
00:04:56,300 --> 00:04:59,160
adding customization - I don't know

114
00:04:59,160 --> 00:05:01,320
common behaviors that you might have or

115
00:05:01,320 --> 00:05:05,150
maybe even tabs or uh what do they call

116
00:05:05,150 --> 00:05:10,260
bookmarks of course this could be pretty

117
00:05:10,260 --> 00:05:11,760
terrible and you ended up with stuff

118
00:05:11,760 --> 00:05:14,370
like this where of course Google is a

119
00:05:14,370 --> 00:05:17,550
contributor to this mess now one of the

120
00:05:17,550 --> 00:05:18,660
reasons that we ended up in this

121
00:05:18,660 --> 00:05:22,650
situation is that it in order to install

122
00:05:22,650 --> 00:05:24,540
an extension you had to execute an

123
00:05:24,540 --> 00:05:27,930
installer and that would drop a binary

124
00:05:27,930 --> 00:05:30,000
in your file system and that would

125
00:05:30,000 --> 00:05:32,850
register you would add a registry

126
00:05:32,850 --> 00:05:35,220
interest entry so that I would know

127
00:05:35,220 --> 00:05:37,230
where to look - in order to load your

128
00:05:37,230 --> 00:05:40,920
extension which made it kind of hard for

129
00:05:40,920 --> 00:05:43,530
non tech savvy users to get rid of stuff

130
00:05:43,530 --> 00:05:45,930
and with the capabilities of running in

131
00:05:45,930 --> 00:05:50,610
a binary it also made it so extension

132
00:05:50,610 --> 00:05:52,740
developers could make some bad

133
00:05:52,740 --> 00:05:53,730
not-so-great

134
00:05:53,730 --> 00:05:55,380
user interface decisions that made it

135
00:05:55,380 --> 00:05:58,610
hard to get rid of there their tools

136
00:05:58,610 --> 00:06:03,900
their tools and finally the third major

137
00:06:03,900 --> 00:06:05,820
or fourth major thing that Internet

138
00:06:05,820 --> 00:06:08,070
Explorer introduced was this concept of

139
00:06:08,070 --> 00:06:11,130
browser helper objects or be a chose by

140
00:06:11,130 --> 00:06:15,030
and large the entire extension feature

141
00:06:15,030 --> 00:06:17,850
is commonly referred to as be a chose or

142
00:06:17,850 --> 00:06:19,710
in extension was commonly referred to as

143
00:06:19,710 --> 00:06:21,860
a Pho even though the first things

144
00:06:21,860 --> 00:06:23,790
shortcuts Explorer VARs and toolbars

145
00:06:23,790 --> 00:06:26,250
could be provided without a BHO that's

146
00:06:26,250 --> 00:06:27,540
kind of an implementation detail but

147
00:06:27,540 --> 00:06:31,320
whatever so the way the system worked is

148
00:06:31,320 --> 00:06:33,840
you would compile a native dll that used

149
00:06:33,840 --> 00:06:36,360
a kind of standardized comm interface in

150
00:06:36,360 --> 00:06:37,590
order to communicate with

151
00:06:37,590 --> 00:06:40,919
Internet Explorer and BA chose could

152
00:06:40,919 --> 00:06:43,740
then have this full set of native

153
00:06:43,740 --> 00:06:46,530
capabilities and file system access and

154
00:06:46,530 --> 00:06:49,380
you know potentially owning a user's

155
00:06:49,380 --> 00:06:52,770
machine not not the best security

156
00:06:52,770 --> 00:06:55,169
capabilities anyway this one that we're

157
00:06:55,169 --> 00:06:56,880
looking at right now the web accessible

158
00:06:56,880 --> 00:06:59,190
web accessibility toolbar produced by

159
00:06:59,190 --> 00:07:01,620
Vision Australia it would let you do

160
00:07:01,620 --> 00:07:04,970
things like preview a grayscale mode or

161
00:07:04,970 --> 00:07:07,260
see what your web experience would be

162
00:07:07,260 --> 00:07:09,800
like with for color Brian blind users or

163
00:07:09,800 --> 00:07:12,780
expose in a visual way the accessibility

164
00:07:12,780 --> 00:07:14,220
tree it was actually a pretty cool

165
00:07:14,220 --> 00:07:16,200
extension that helped a lot of

166
00:07:16,200 --> 00:07:21,300
developers Firefox is kind of the next

167
00:07:21,300 --> 00:07:24,330
major step in the customization of

168
00:07:24,330 --> 00:07:27,540
browser extensions in that this was the

169
00:07:27,540 --> 00:07:30,150
first time well there were a couple of

170
00:07:30,150 --> 00:07:34,650
interesting first with Firefox predating

171
00:07:34,650 --> 00:07:38,520
Firefox is a application suite that was

172
00:07:38,520 --> 00:07:39,870
produced by Mozilla called Mozilla

173
00:07:39,870 --> 00:07:44,100
application suite clever name they they

174
00:07:44,100 --> 00:07:46,260
basically had an email client in an RSS

175
00:07:46,260 --> 00:07:49,080
reader and a web browser in this package

176
00:07:49,080 --> 00:07:51,240
and I think a calendar - of all of this

177
00:07:51,240 --> 00:07:54,960
package of tools that a user can use to

178
00:07:54,960 --> 00:07:56,780
you know accomplish their day to day

179
00:07:56,780 --> 00:08:01,500
native work on their desktop what was

180
00:08:01,500 --> 00:08:04,100
really cool about this is they used an

181
00:08:04,100 --> 00:08:07,830
user interface language called Zul XML

182
00:08:07,830 --> 00:08:10,830
user interface language and it could be

183
00:08:10,830 --> 00:08:13,650
scripted or programmed scripted with

184
00:08:13,650 --> 00:08:15,780
JavaScript or programmed with xpcom

185
00:08:15,780 --> 00:08:18,990
which is a cross-platform component

186
00:08:18,990 --> 00:08:21,080
object model basically the same thing as

187
00:08:21,080 --> 00:08:23,910
the com model that ie was using except

188
00:08:23,910 --> 00:08:27,389
now it's cross platform and you can do

189
00:08:27,389 --> 00:08:29,280
more languages rather than just the

190
00:08:29,280 --> 00:08:31,470
specific things that would compile to

191
00:08:31,470 --> 00:08:38,729
the common interface later on oh right I

192
00:08:38,729 --> 00:08:41,190
was talking about Mozilla application

193
00:08:41,190 --> 00:08:43,140
suite that's also known as sea monkey if

194
00:08:43,140 --> 00:08:45,540
you might have heard that term sea

195
00:08:45,540 --> 00:08:46,680
monkey was interesting because the

196
00:08:46,680 --> 00:08:48,600
entire thing was scriptable using Zul

197
00:08:48,600 --> 00:08:50,930
and one of these languages

198
00:08:50,930 --> 00:08:53,330
so they were using web technologies to

199
00:08:53,330 --> 00:08:56,180
build an entire web browser an

200
00:08:56,180 --> 00:09:01,100
application suite what happened with

201
00:09:01,100 --> 00:09:03,080
Firefox is they took those capabilities

202
00:09:03,080 --> 00:09:05,480
and formalized them and expose them as

203
00:09:05,480 --> 00:09:07,430
the extension platform so it was

204
00:09:07,430 --> 00:09:10,460
possible in to use web technologies to

205
00:09:10,460 --> 00:09:12,710
build the web browser it was possible to

206
00:09:12,710 --> 00:09:14,270
use web technologies to customize the

207
00:09:14,270 --> 00:09:15,860
web browser they also tried to do some

208
00:09:15,860 --> 00:09:18,740
sandboxing here to limit the nefarious

209
00:09:18,740 --> 00:09:20,750
things that extensions could do but

210
00:09:20,750 --> 00:09:24,260
ultimately it wasn't that hard to get

211
00:09:24,260 --> 00:09:28,400
full control of the browser with xpcom

212
00:09:28,400 --> 00:09:32,210
and therefore do terrible things with to

213
00:09:32,210 --> 00:09:34,340
the user's machine part of what was

214
00:09:34,340 --> 00:09:36,560
novel with Firefox here though is they

215
00:09:36,560 --> 00:09:38,030
introduced for the first time the

216
00:09:38,030 --> 00:09:40,130
ability to install extensions from the

217
00:09:40,130 --> 00:09:43,040
web so this is a whole interesting

218
00:09:43,040 --> 00:09:45,980
potential vector for a new class of

219
00:09:45,980 --> 00:09:49,250
attacks and again like the previous ones

220
00:09:49,250 --> 00:09:53,630
this is the the app the X become DLL

221
00:09:53,630 --> 00:09:55,130
that is being loaded in the browser is

222
00:09:55,130 --> 00:09:57,140
arbitrary binary so you again you could

223
00:09:57,140 --> 00:10:01,010
do some pretty terrible stuff so inter

224
00:10:01,010 --> 00:10:03,530
chrome extensions chrome extensions were

225
00:10:03,530 --> 00:10:06,590
introduced in chrome 4.0 which is very

226
00:10:06,590 --> 00:10:08,750
very early on I think maybe a year or

227
00:10:08,750 --> 00:10:11,930
two after chrome was first released the

228
00:10:11,930 --> 00:10:14,600
main the goals are listed here the of

229
00:10:14,600 --> 00:10:16,370
the Chrome extension platform but the

230
00:10:16,370 --> 00:10:18,400
main thing I want to call out is that

231
00:10:18,400 --> 00:10:21,860
chrome is Webby it is stable and our

232
00:10:21,860 --> 00:10:23,510
Chrome extensions are Webby stable and

233
00:10:23,510 --> 00:10:25,310
secure so it's webby in that they're

234
00:10:25,310 --> 00:10:26,900
built with web technologies HTML

235
00:10:26,900 --> 00:10:31,240
Javascript and CSS it's stable in that a

236
00:10:31,240 --> 00:10:33,560
Fault in the extension isn't going to

237
00:10:33,560 --> 00:10:35,180
bring down the whole browser process the

238
00:10:35,180 --> 00:10:38,420
worst case is the unstable extension

239
00:10:38,420 --> 00:10:40,820
will take itself down and you know it'll

240
00:10:40,820 --> 00:10:43,070
die on its own in the corner and it's

241
00:10:43,070 --> 00:10:45,830
secure in that it adopts the web

242
00:10:45,830 --> 00:10:47,740
security model with some additional

243
00:10:47,740 --> 00:10:50,690
modifications specific to the extension

244
00:10:50,690 --> 00:10:52,700
platform in order to increase the

245
00:10:52,700 --> 00:10:54,650
security of the additional capabilities

246
00:10:54,650 --> 00:10:57,170
that are exposed there this is a

247
00:10:57,170 --> 00:11:00,890
fundamental shift from how everything I

248
00:11:00,890 --> 00:11:02,990
guess pre Firefox Firefox had a little

249
00:11:02,990 --> 00:11:04,310
bit of ability to do this but

250
00:11:04,310 --> 00:11:06,259
they were still something different they

251
00:11:06,259 --> 00:11:07,759
were using special technologies to build

252
00:11:07,759 --> 00:11:10,279
the extensions platform where Chrome

253
00:11:10,279 --> 00:11:11,959
extensions are all just web technologies

254
00:11:11,959 --> 00:11:15,589
with some additional api's and I wanted

255
00:11:15,589 --> 00:11:17,089
to call out it this breaks away from

256
00:11:17,089 --> 00:11:19,759
native api's with the small Astra that

257
00:11:19,759 --> 00:11:23,689
content displaying capabilities like we

258
00:11:23,689 --> 00:11:27,379
originally discussed with Netscape it

259
00:11:27,379 --> 00:11:29,870
still supports it still supported NPAPI

260
00:11:29,870 --> 00:11:32,480
and some additional Chrome specific

261
00:11:32,480 --> 00:11:35,269
stuff Knakal and pinochle but those are

262
00:11:35,269 --> 00:11:37,819
going away in favor of wasm so let's

263
00:11:37,819 --> 00:11:39,470
pretend they don't exist I only care

264
00:11:39,470 --> 00:11:42,639
about extensions anywhere so moving on

265
00:11:42,639 --> 00:11:45,680
no extension platform no software

266
00:11:45,680 --> 00:11:49,610
platform is perfect so in the

267
00:11:49,610 --> 00:11:52,910
intervening years between the original

268
00:11:52,910 --> 00:11:55,699
release of extensions and the current

269
00:11:55,699 --> 00:11:58,579
platform as we know it today we started

270
00:11:58,579 --> 00:12:01,160
to see some patterns in the extension

271
00:12:01,160 --> 00:12:04,339
ecosystem of both abuse and user error

272
00:12:04,339 --> 00:12:07,329
on the part of developers where

273
00:12:07,329 --> 00:12:11,870
developers would do things that weren't

274
00:12:11,870 --> 00:12:14,300
in their best interest they would have

275
00:12:14,300 --> 00:12:17,420
accidental vulnerabilities so in order

276
00:12:17,420 --> 00:12:19,579
to address some of those we introduced

277
00:12:19,579 --> 00:12:22,430
some stuff like a web accessible

278
00:12:22,430 --> 00:12:24,559
resources field in your manifest JSON oh

279
00:12:24,559 --> 00:12:27,620
I just realized I didn't actually go

280
00:12:27,620 --> 00:12:29,029
over all the contents of a Chrome

281
00:12:29,029 --> 00:12:30,769
extension we'll get into some details

282
00:12:30,769 --> 00:12:31,639
later

283
00:12:31,639 --> 00:12:33,980
so the main entry point of a Chrome

284
00:12:33,980 --> 00:12:35,629
extension is manifest.json there's a

285
00:12:35,629 --> 00:12:38,120
JSON file that defines the name of your

286
00:12:38,120 --> 00:12:39,970
extension the current version what files

287
00:12:39,970 --> 00:12:42,410
to run in the background what files to

288
00:12:42,410 --> 00:12:48,110
inject into the page etc in manifest v2

289
00:12:48,110 --> 00:12:50,269
it introduced this web accessible

290
00:12:50,269 --> 00:12:53,300
resources so only resources that you

291
00:12:53,300 --> 00:12:56,329
want to expose to the web context or

292
00:12:56,329 --> 00:13:00,379
other places would actually appear or be

293
00:13:00,379 --> 00:13:03,290
accessible and this was addressing a

294
00:13:03,290 --> 00:13:05,629
common attack vector where people were

295
00:13:05,629 --> 00:13:09,679
able to use signals that are leaked by

296
00:13:09,679 --> 00:13:11,149
the extension in order to figure out

297
00:13:11,149 --> 00:13:13,879
which extension is running and if

298
00:13:13,879 --> 00:13:15,709
knowing the exploits available on that

299
00:13:15,709 --> 00:13:16,940
extension could then

300
00:13:16,940 --> 00:13:18,860
hook in and didn't do bad things to the

301
00:13:18,860 --> 00:13:23,340
user

302
00:13:23,350 --> 00:13:25,100
anything else I wanted to cover in that

303
00:13:25,100 --> 00:13:30,020
nah again no platform is perfect there

304
00:13:30,020 --> 00:13:33,770
were some issues here even as we tried

305
00:13:33,770 --> 00:13:36,620
to plug some of these issues are some of

306
00:13:36,620 --> 00:13:38,930
the exploits that existed one of which

307
00:13:38,930 --> 00:13:41,750
was that if an extension in its

308
00:13:41,750 --> 00:13:43,730
background page loaded an iframe of a

309
00:13:43,730 --> 00:13:45,590
third-party website that third-party

310
00:13:45,590 --> 00:13:48,110
website could use browser exploits to

311
00:13:48,110 --> 00:13:49,640
gain control of the extension and

312
00:13:49,640 --> 00:13:51,650
therefore have elevated privileges to do

313
00:13:51,650 --> 00:13:54,920
bad things to the user the way that the

314
00:13:54,920 --> 00:13:56,120
chrome team addressed this was by

315
00:13:56,120 --> 00:13:57,890
separating the iframe process from the

316
00:13:57,890 --> 00:14:00,740
extension process so they no longer

317
00:14:00,740 --> 00:14:02,180
share the same memory and can't be

318
00:14:02,180 --> 00:14:05,120
directly accessed more broadly site

319
00:14:05,120 --> 00:14:07,280
isolation is something the extension

320
00:14:07,280 --> 00:14:10,700
team and chrome team are very concerned

321
00:14:10,700 --> 00:14:15,080
about we removed the ability to perform

322
00:14:15,080 --> 00:14:17,660
inline installation so previously it was

323
00:14:17,660 --> 00:14:19,850
possible to visit some website let's say

324
00:14:19,850 --> 00:14:23,660
AFRICOM and to click the install Chrome

325
00:14:23,660 --> 00:14:25,490
extension button and then suddenly you

326
00:14:25,490 --> 00:14:27,410
would have the buffer extension

327
00:14:27,410 --> 00:14:29,150
installed in your web browser of course

328
00:14:29,150 --> 00:14:31,910
a malicious actor could have buffer with

329
00:14:31,910 --> 00:14:35,330
three FS rather than to directly clone

330
00:14:35,330 --> 00:14:37,400
their website clone their extension and

331
00:14:37,400 --> 00:14:38,810
then add a little bit of more code that

332
00:14:38,810 --> 00:14:41,330
allowed them to exploit the user and the

333
00:14:41,330 --> 00:14:43,460
end user would be none the wiser

334
00:14:43,460 --> 00:14:45,200
the end user thinks they're doing

335
00:14:45,200 --> 00:14:46,460
everything correctly it appears that

336
00:14:46,460 --> 00:14:48,220
they're doing everything correctly but

337
00:14:48,220 --> 00:14:49,970
unfortunately they've just given

338
00:14:49,970 --> 00:14:53,520
somebody else the keys to the kingdom

339
00:14:53,530 --> 00:14:55,850
the final thing that I want to call out

340
00:14:55,850 --> 00:14:57,230
in improvements that we've made to the

341
00:14:57,230 --> 00:15:00,140
current extension platform is changing

342
00:15:00,140 --> 00:15:01,880
it so that extensions that are loaded in

343
00:15:01,880 --> 00:15:04,160
the browser the user has more control

344
00:15:04,160 --> 00:15:07,730
over when and how they run so right here

345
00:15:07,730 --> 00:15:11,420
I'm interacting with the posit google

346
00:15:11,420 --> 00:15:14,030
dictionary extension which lets you

347
00:15:14,030 --> 00:15:17,930
define terms on a page and I know that I

348
00:15:17,930 --> 00:15:19,730
work with some sensitive data so I don't

349
00:15:19,730 --> 00:15:21,740
want to expose every page that I visit

350
00:15:21,740 --> 00:15:23,720
to it I only want to say expose

351
00:15:23,720 --> 00:15:25,550
google.com in that case I can

352
00:15:25,550 --> 00:15:27,800
right-click the extension go to this can

353
00:15:27,800 --> 00:15:30,290
read and change data cite data and

354
00:15:30,290 --> 00:15:33,110
then select the specific sites where I

355
00:15:33,110 --> 00:15:35,180
want the extension to run or only run

356
00:15:35,180 --> 00:15:36,680
the extension in response to clicking

357
00:15:36,680 --> 00:15:39,410
the extensions browser action the icon

358
00:15:39,410 --> 00:15:41,470
in the toolbar

359
00:15:41,470 --> 00:15:43,820
the ultimate goal here is that we're

360
00:15:43,820 --> 00:15:46,279
giving users more control this change

361
00:15:46,279 --> 00:15:50,180
was made in chrome 70 and in the future

362
00:15:50,180 --> 00:15:51,589
we're planning to change it so by

363
00:15:51,589 --> 00:15:53,810
default when you install an extension it

364
00:15:53,810 --> 00:15:56,480
will not default to all sites that will

365
00:15:56,480 --> 00:15:58,160
default to the most limited set of

366
00:15:58,160 --> 00:16:03,199
capabilities now I talked about some of

367
00:16:03,199 --> 00:16:04,970
the things that we've done to address

368
00:16:04,970 --> 00:16:07,279
limitations of manifest v2 but there are

369
00:16:07,279 --> 00:16:09,110
other things that we can't quite address

370
00:16:09,110 --> 00:16:12,230
here for one there's not enough focus on

371
00:16:12,230 --> 00:16:15,319
usability when the chrome team designed

372
00:16:15,319 --> 00:16:18,380
the extension interaction patterns the

373
00:16:18,380 --> 00:16:21,170
the platform there was a fundamental

374
00:16:21,170 --> 00:16:23,839
assumption about how users interact with

375
00:16:23,839 --> 00:16:28,130
install prompts and I think in the

376
00:16:28,130 --> 00:16:29,660
assumption that people read all the

377
00:16:29,660 --> 00:16:32,209
words and understand them and make

378
00:16:32,209 --> 00:16:35,480
informed decisions that's not always

379
00:16:35,480 --> 00:16:39,290
true unfortunately I think in the

380
00:16:39,290 --> 00:16:41,209
intervening years we've seen that users

381
00:16:41,209 --> 00:16:45,170
don't quite understand what read and

382
00:16:45,170 --> 00:16:47,420
modify all site data means for example

383
00:16:47,420 --> 00:16:50,720
and that's an extremely common thing

384
00:16:50,720 --> 00:16:53,209
because all URLs is extremely common in

385
00:16:53,209 --> 00:16:55,970
the extension ecosystem the all URLs

386
00:16:55,970 --> 00:16:58,730
permission allows an extension to eject

387
00:16:58,730 --> 00:17:01,699
content scripts on any site that you

388
00:17:01,699 --> 00:17:04,640
visit and in some cases to kind of

389
00:17:04,640 --> 00:17:06,409
supercharge other api's that the browser

390
00:17:06,409 --> 00:17:10,720
exposes so the tabs API for example

391
00:17:10,720 --> 00:17:13,819
actually tabs is a bad example ignore

392
00:17:13,819 --> 00:17:17,299
that pretend I didn't say that but in

393
00:17:17,299 --> 00:17:18,890
general all URLs is too common it is

394
00:17:18,890 --> 00:17:20,949
very powerful permission it is

395
00:17:20,949 --> 00:17:23,419
unfortunately currently the only way to

396
00:17:23,419 --> 00:17:25,429
do some things like passively inject UI

397
00:17:25,429 --> 00:17:29,960
into a page and when it's too common

398
00:17:29,960 --> 00:17:32,179
that means that we can't detect

399
00:17:32,179 --> 00:17:34,820
anomalous use of this permission because

400
00:17:34,820 --> 00:17:39,799
everybody requests it one of the major

401
00:17:39,799 --> 00:17:42,049
things that has been in the news and the

402
00:17:42,049 --> 00:17:44,539
recently is that remote code injection

403
00:17:44,539 --> 00:17:46,759
in an extension is currently allowed and

404
00:17:46,759 --> 00:17:49,309
it's kind of a problem but it's a

405
00:17:49,309 --> 00:17:50,629
problem that we don't think we can

406
00:17:50,629 --> 00:17:54,019
address on the manifest v2 platform

407
00:17:54,019 --> 00:17:55,849
because it breaks some fundamental

408
00:17:55,849 --> 00:17:57,619
assumptions about how extensions work so

409
00:17:57,619 --> 00:18:00,289
that's why it's going into this this

410
00:18:00,289 --> 00:18:06,559
platform version bump if effectively if

411
00:18:06,559 --> 00:18:08,719
a code if an extension loads code that

412
00:18:08,719 --> 00:18:10,249
isn't bundled in the extensions

413
00:18:10,249 --> 00:18:13,549
executable then it can do anything at

414
00:18:13,549 --> 00:18:15,919
any time and we can't know about it or

415
00:18:15,919 --> 00:18:20,269
react to it very well in fact the thing

416
00:18:20,269 --> 00:18:21,649
that it does today might not be the same

417
00:18:21,649 --> 00:18:22,879
thing as it does tomorrow or the thing

418
00:18:22,879 --> 00:18:24,529
that it does for me might be the same as

419
00:18:24,529 --> 00:18:26,419
it does for you which is I think a

420
00:18:26,419 --> 00:18:29,690
pretty bad world to be in I mentioned

421
00:18:29,690 --> 00:18:31,879
this a bit in discussion of all URLs

422
00:18:31,879 --> 00:18:34,580
powerful api's are currently your only

423
00:18:34,580 --> 00:18:37,599
option for a lot of capabilities that is

424
00:18:37,599 --> 00:18:40,759
for a content blocker say in order to

425
00:18:40,759 --> 00:18:42,889
allow a content blocker to block a

426
00:18:42,889 --> 00:18:46,399
website I have to give that that content

427
00:18:46,399 --> 00:18:49,129
blocker access to the websites that I

428
00:18:49,129 --> 00:18:52,190
want to block which means that it could

429
00:18:52,190 --> 00:18:54,889
potentially perform who-knows-what

430
00:18:54,889 --> 00:18:57,349
actions on those sites without my

431
00:18:57,349 --> 00:19:02,779
knowledge or consent this is more of a

432
00:19:02,779 --> 00:19:04,669
chrome issue but extensions can tank

433
00:19:04,669 --> 00:19:06,379
performance and in tank it in a way

434
00:19:06,379 --> 00:19:07,729
that's not terribly obvious to the

435
00:19:07,729 --> 00:19:12,019
end-user so by a developer not coding an

436
00:19:12,019 --> 00:19:15,399
extension in a performant way they can

437
00:19:15,399 --> 00:19:17,539
unintentionally make the entire browser

438
00:19:17,539 --> 00:19:19,009
experience significantly worse and

439
00:19:19,009 --> 00:19:22,009
finally users don't have enough control

440
00:19:22,009 --> 00:19:24,589
over their experience we address some of

441
00:19:24,589 --> 00:19:26,239
this or now trying to work through this

442
00:19:26,239 --> 00:19:29,179
with the upcoming change I mentioned to

443
00:19:29,179 --> 00:19:32,979
default to restricting all URLs to only

444
00:19:32,979 --> 00:19:37,700
unclick but that that again is going to

445
00:19:37,700 --> 00:19:39,259
require a version font in order to

446
00:19:39,259 --> 00:19:42,649
actually tackle so I think it's fair to

447
00:19:42,649 --> 00:19:45,559
say that we are not in a situation that

448
00:19:45,559 --> 00:19:47,629
we want to be that the extension

449
00:19:47,629 --> 00:19:50,869
platform is more vulnerable kind of by

450
00:19:50,869 --> 00:19:53,479
design than it should be and to that end

451
00:19:53,479 --> 00:19:55,730
we're introducing manifest weak

452
00:19:55,730 --> 00:19:58,370
which will shift some of these basic

453
00:19:58,370 --> 00:20:00,039
assumptions about how the platform works

454
00:20:00,039 --> 00:20:03,980
so the broad strokes the goals of

455
00:20:03,980 --> 00:20:06,139
manifest v3 are to improve the security

456
00:20:06,139 --> 00:20:08,120
privacy and performance of the Chrome

457
00:20:08,120 --> 00:20:11,450
extensions platform for security we want

458
00:20:11,450 --> 00:20:13,610
to improve the security guarantees that

459
00:20:13,610 --> 00:20:16,940
is we want to be able to say with

460
00:20:16,940 --> 00:20:19,190
confidence that it is significantly

461
00:20:19,190 --> 00:20:20,990
harder or impossible for a malicious

462
00:20:20,990 --> 00:20:22,940
site or extension to gain control of

463
00:20:22,940 --> 00:20:26,149
these privileged execution environments

464
00:20:26,149 --> 00:20:29,269
and by extension to increase end-user

465
00:20:29,269 --> 00:20:31,610
trust that when they extol in an

466
00:20:31,610 --> 00:20:33,049
extension it isn't going to do anything

467
00:20:33,049 --> 00:20:35,659
harmful to them without their without

468
00:20:35,659 --> 00:20:39,080
their direct involvement and that they

469
00:20:39,080 --> 00:20:40,789
can easily remove an extension and it

470
00:20:40,789 --> 00:20:44,019
won't cause any lasting harm for privacy

471
00:20:44,019 --> 00:20:46,370
we want users to have more control over

472
00:20:46,370 --> 00:20:50,990
their experience so for privacy we we

473
00:20:50,990 --> 00:20:52,460
want the user to have more control over

474
00:20:52,460 --> 00:20:55,159
what sites and extension is executing on

475
00:20:55,159 --> 00:20:58,010
and part of that is going to be a shift

476
00:20:58,010 --> 00:21:00,620
in or trying to encourage developers to

477
00:21:00,620 --> 00:21:04,010
shift how they expect their extensions

478
00:21:04,010 --> 00:21:06,049
to run rather than passively running all

479
00:21:06,049 --> 00:21:08,600
the time we want extensions to move to a

480
00:21:08,600 --> 00:21:10,549
model where they're running in response

481
00:21:10,549 --> 00:21:12,889
to user action so the user is ultimately

482
00:21:12,889 --> 00:21:15,289
the one that's in control and for

483
00:21:15,289 --> 00:21:18,169
performance extensions we want

484
00:21:18,169 --> 00:21:19,730
extensions to be performed by default we

485
00:21:19,730 --> 00:21:20,990
want developers to fall into a pit of

486
00:21:20,990 --> 00:21:23,000
success where even if they don't know

487
00:21:23,000 --> 00:21:24,350
what they're doing and they do some

488
00:21:24,350 --> 00:21:27,159
anti-patterns worst case scenario that

489
00:21:27,159 --> 00:21:29,570
things will kind of work out for them

490
00:21:29,570 --> 00:21:34,490
anyway and by extension reducing the

491
00:21:34,490 --> 00:21:36,019
amount of resources that an extension is

492
00:21:36,019 --> 00:21:40,500
using over over the course of its life

493
00:21:40,510 --> 00:21:44,179
so at this point I want to get a bit

494
00:21:44,179 --> 00:21:46,279
into the specifics of some of these

495
00:21:46,279 --> 00:21:49,360
changes runtime host permissions that is

496
00:21:49,360 --> 00:21:53,919
the ability to inject script into a site

497
00:21:53,919 --> 00:21:57,980
we want to as I said move to clicked by

498
00:21:57,980 --> 00:22:00,289
default we have a permissions in the

499
00:22:00,289 --> 00:22:02,269
Chrome extension platform called active

500
00:22:02,269 --> 00:22:03,909
tab that

501
00:22:03,909 --> 00:22:06,129
browser can or an extension can

502
00:22:06,129 --> 00:22:10,179
currently choose to opt into active tab

503
00:22:10,179 --> 00:22:12,579
style permissions where when somebody

504
00:22:12,579 --> 00:22:14,619
clicks a browser action or hits a global

505
00:22:14,619 --> 00:22:16,659
keyboard shortcut or hits the omnibox

506
00:22:16,659 --> 00:22:17,979
shortcut that they've read in a store

507
00:22:17,979 --> 00:22:20,229
Tory triggers the context menu entry

508
00:22:20,229 --> 00:22:22,389
those are the four ways that you can get

509
00:22:22,389 --> 00:22:25,329
active tab only then does the extension

510
00:22:25,329 --> 00:22:27,909
have the ability to run and for

511
00:22:27,909 --> 00:22:30,999
extensions that do require or need to

512
00:22:30,999 --> 00:22:32,859
passively inject there will be a way to

513
00:22:32,859 --> 00:22:34,629
do that but it isn't going to be the

514
00:22:34,629 --> 00:22:36,369
primary way that most extensions are

515
00:22:36,369 --> 00:22:39,129
expected to operate this is challenging

516
00:22:39,129 --> 00:22:41,499
though because it is a shift in the

517
00:22:41,499 --> 00:22:45,339
extension architecture it will require

518
00:22:45,339 --> 00:22:46,839
developers to make it a shift in their

519
00:22:46,839 --> 00:22:48,999
architecture in order to be more evented

520
00:22:48,999 --> 00:22:51,819
and more contextual so again in the

521
00:22:51,819 --> 00:22:53,889
future when you click the extension will

522
00:22:53,889 --> 00:22:56,619
be the default option at install time

523
00:22:56,619 --> 00:22:58,659
they're still working on the UI for this

524
00:22:58,659 --> 00:23:01,359
but at install time it will have an

525
00:23:01,359 --> 00:23:04,989
option it will present the user with an

526
00:23:04,989 --> 00:23:06,099
option that says when you click the

527
00:23:06,099 --> 00:23:07,659
extension and they will have a way of

528
00:23:07,659 --> 00:23:10,509
changing that to to automatically run on

529
00:23:10,509 --> 00:23:13,089
all sites or on specific sites and then

530
00:23:13,089 --> 00:23:14,919
developers will also have a way of

531
00:23:14,919 --> 00:23:16,659
checking their current permissions and

532
00:23:16,659 --> 00:23:19,539
then re prompting the user if they don't

533
00:23:19,539 --> 00:23:21,459
have enough if they can't do their job

534
00:23:21,459 --> 00:23:25,389
basically another significant change

535
00:23:25,389 --> 00:23:27,519
that we're making is replacing the web

536
00:23:27,519 --> 00:23:29,559
request block the blocking version of

537
00:23:29,559 --> 00:23:31,389
the web request API with a new API

538
00:23:31,389 --> 00:23:34,929
called declarative net request for the

539
00:23:34,929 --> 00:23:37,679
most part most of the capabilities of

540
00:23:37,679 --> 00:23:40,509
declarative net request api don't

541
00:23:40,509 --> 00:23:42,039
actually require host permissions so

542
00:23:42,039 --> 00:23:44,229
again we're limiting the potential

543
00:23:44,229 --> 00:23:46,269
vulnerabilities and attack vectors by

544
00:23:46,269 --> 00:23:48,879
just giving extensions less right out of

545
00:23:48,879 --> 00:23:52,629
the gate but fundamentally web request

546
00:23:52,629 --> 00:23:54,009
is more capable because it's a

547
00:23:54,009 --> 00:23:56,049
imperative API you can literally what

548
00:23:56,049 --> 00:23:59,169
write whatever code you want and it will

549
00:23:59,169 --> 00:24:00,999
do it whereas the declarative net

550
00:24:00,999 --> 00:24:03,249
request API it's declarative so there's

551
00:24:03,249 --> 00:24:04,869
a limited set of capabilities that you

552
00:24:04,869 --> 00:24:09,219
can actually execute one of the benefits

553
00:24:09,219 --> 00:24:10,749
to this from a performance point of view

554
00:24:10,749 --> 00:24:13,449
is we're getting extensions out of the

555
00:24:13,449 --> 00:24:15,429
web request flow which means we can

556
00:24:15,429 --> 00:24:17,930
heavily optimize how

557
00:24:17,930 --> 00:24:22,080
how network requests are processed by

558
00:24:22,080 --> 00:24:24,690
extensions currently it takes several

559
00:24:24,690 --> 00:24:26,940
process hops in order for an extension

560
00:24:26,940 --> 00:24:30,690
to even get notified that that a request

561
00:24:30,690 --> 00:24:32,130
is being made and then they have to

562
00:24:32,130 --> 00:24:35,610
exceed some logic and then pass it back

563
00:24:35,610 --> 00:24:36,930
to Chrome which takes a couple more

564
00:24:36,930 --> 00:24:39,600
process hops all of this is potentially

565
00:24:39,600 --> 00:24:41,370
you know depending on the implementation

566
00:24:41,370 --> 00:24:43,440
details potentially all able to be

567
00:24:43,440 --> 00:24:45,240
executed on the network thread meaning

568
00:24:45,240 --> 00:24:46,950
there's no additional hops that just

569
00:24:46,950 --> 00:24:48,840
happens immediately as soon as chrome

570
00:24:48,840 --> 00:24:52,590
executes side so a quick example I'm

571
00:24:52,590 --> 00:24:55,380
gonna say I have been known to spend too

572
00:24:55,380 --> 00:24:56,850
much time on Facebook so when I'm at

573
00:24:56,850 --> 00:24:58,680
work I just don't want it to be

574
00:24:58,680 --> 00:25:00,450
available at all so I'm going to have a

575
00:25:00,450 --> 00:25:03,390
simple extension here that requires the

576
00:25:03,390 --> 00:25:06,120
web request API the request blocking API

577
00:25:06,120 --> 00:25:10,950
and access to facebook.com so this is

578
00:25:10,950 --> 00:25:12,390
the manifest.json i mentioned earlier

579
00:25:12,390 --> 00:25:13,920
and you can see I have a background

580
00:25:13,920 --> 00:25:16,410
script that I'm going to passively load

581
00:25:16,410 --> 00:25:19,200
and have running my background script is

582
00:25:19,200 --> 00:25:22,230
going to receive a details object or a

583
00:25:22,230 --> 00:25:24,450
request object that contains details

584
00:25:24,450 --> 00:25:27,150
about the request so this is kind of the

585
00:25:27,150 --> 00:25:29,190
passive data that's being exposed to the

586
00:25:29,190 --> 00:25:33,660
extension so any in in this simple

587
00:25:33,660 --> 00:25:36,360
example anytime I see a request going to

588
00:25:36,360 --> 00:25:39,420
facebook.com I'm gonna return a object

589
00:25:39,420 --> 00:25:41,550
that says cancel so the can't request

590
00:25:41,550 --> 00:25:44,100
will be blocked and otherwise don't do

591
00:25:44,100 --> 00:25:46,230
any special modification and that's the

592
00:25:46,230 --> 00:25:48,180
super simple extension the way this

593
00:25:48,180 --> 00:25:49,650
would look in the declarative net

594
00:25:49,650 --> 00:25:51,810
requests world is we replace all those

595
00:25:51,810 --> 00:25:53,430
permissions with a simple one

596
00:25:53,430 --> 00:25:54,930
declarative net request with no

597
00:25:54,930 --> 00:25:57,750
additional host permissions no

598
00:25:57,750 --> 00:26:00,800
additional ability to inject content and

599
00:26:00,800 --> 00:26:04,770
we're we now have a rules JSON which

600
00:26:04,770 --> 00:26:07,350
will define the network request

601
00:26:07,350 --> 00:26:09,390
modification rules that Chrome will

602
00:26:09,390 --> 00:26:12,960
execute our rules list is pretty simple

603
00:26:12,960 --> 00:26:15,060
all we're gonna do is if we see a

604
00:26:15,060 --> 00:26:16,800
request for facebook.com we're gonna

605
00:26:16,800 --> 00:26:20,750
take the action block that's it

606
00:26:20,760 --> 00:26:22,560
another major change that is happening

607
00:26:22,560 --> 00:26:25,020
in chrome manifest v3 is the migration

608
00:26:25,020 --> 00:26:29,250
from background pages to serviceworkers

609
00:26:29,250 --> 00:26:30,930
so if you're not familiar with the exten

610
00:26:30,930 --> 00:26:32,640
and platform the way it currently works

611
00:26:32,640 --> 00:26:35,430
is if you have when you create an

612
00:26:35,430 --> 00:26:37,560
extension one of the core pieces that

613
00:26:37,560 --> 00:26:39,390
you have is a background page or

614
00:26:39,390 --> 00:26:41,160
background script which has a page

615
00:26:41,160 --> 00:26:42,690
environment so you you're literally

616
00:26:42,690 --> 00:26:44,850
running an entire web page headless it

617
00:26:44,850 --> 00:26:47,370
just doesn't render anything which means

618
00:26:47,370 --> 00:26:48,600
that you have the full capabilities of

619
00:26:48,600 --> 00:26:50,040
the web in terms of being able to place

620
00:26:50,040 --> 00:26:54,450
a audio or being able to use event

621
00:26:54,450 --> 00:26:57,900
propagation natively in your background

622
00:26:57,900 --> 00:27:00,180
page in the future we're moving to

623
00:27:00,180 --> 00:27:03,330
service workers which are web technology

624
00:27:03,330 --> 00:27:04,530
that's emerging kind of under the

625
00:27:04,530 --> 00:27:08,040
progressive Web App banner and it allows

626
00:27:08,040 --> 00:27:11,730
you to have a more ephemeral execution

627
00:27:11,730 --> 00:27:14,280
environment where your service worker

628
00:27:14,280 --> 00:27:16,470
gets woken up in response to events it

629
00:27:16,470 --> 00:27:18,060
has some time that it can execute and

630
00:27:18,060 --> 00:27:19,350
then when it's no longer doing anything

631
00:27:19,350 --> 00:27:22,110
it just gets terminated and then frees

632
00:27:22,110 --> 00:27:27,690
up the resources so this service worker

633
00:27:27,690 --> 00:27:30,300
environment is extremely similar to the

634
00:27:30,300 --> 00:27:33,140
current event page system you can have

635
00:27:33,140 --> 00:27:35,640
today in manifest v2 you can have two

636
00:27:35,640 --> 00:27:37,140
types of background pages you can have a

637
00:27:37,140 --> 00:27:39,690
persistent page which lives forever or

638
00:27:39,690 --> 00:27:41,670
you can have an event page which is only

639
00:27:41,670 --> 00:27:44,840
woken up in response to events in

640
00:27:44,840 --> 00:27:46,890
general this is kind of a pattern of

641
00:27:46,890 --> 00:27:49,170
chrome trying to provide more performant

642
00:27:49,170 --> 00:27:51,540
options but most people fall back on the

643
00:27:51,540 --> 00:27:53,730
less performant version so event pages

644
00:27:53,730 --> 00:27:55,440
have not been as well adopted as we

645
00:27:55,440 --> 00:27:58,620
would like part of the move to service

646
00:27:58,620 --> 00:28:00,330
workers is just cleaning up to hit use a

647
00:28:00,330 --> 00:28:02,580
standardized use the standards that the

648
00:28:02,580 --> 00:28:04,500
web platform exposes since Chrome

649
00:28:04,500 --> 00:28:06,180
extensions are webby we want to use the

650
00:28:06,180 --> 00:28:08,370
web as our default environment with only

651
00:28:08,370 --> 00:28:10,080
the modifications required to enable

652
00:28:10,080 --> 00:28:12,600
extensions so some of the challenges

653
00:28:12,600 --> 00:28:14,370
that this move is going to present to

654
00:28:14,370 --> 00:28:16,410
developers is they don't have access to

655
00:28:16,410 --> 00:28:18,150
dom with all of the capabilities that

656
00:28:18,150 --> 00:28:22,320
involves it requires a more event based

657
00:28:22,320 --> 00:28:24,270
approach to application development

658
00:28:24,270 --> 00:28:26,900
which you may or may not currently be

659
00:28:26,900 --> 00:28:30,930
doing and given that you no longer have

660
00:28:30,930 --> 00:28:32,910
a persistent global environment you can

661
00:28:32,910 --> 00:28:35,790
no longer have state sitting there

662
00:28:35,790 --> 00:28:39,870
passively exposed so let's take a look

663
00:28:39,870 --> 00:28:43,950
at a couple of examples i am i have a

664
00:28:43,950 --> 00:28:45,309
simple

665
00:28:45,309 --> 00:28:48,860
X I have a simple extension here that

666
00:28:48,860 --> 00:28:50,990
basically is just gonna pass a message

667
00:28:50,990 --> 00:28:52,490
to the content script that will display

668
00:28:52,490 --> 00:28:55,130
somebody's name I think in this these

669
00:28:55,130 --> 00:28:56,660
code samples I left out the content

670
00:28:56,660 --> 00:28:57,770
script because it's not that important

671
00:28:57,770 --> 00:28:59,720
but basically it just has a message

672
00:28:59,720 --> 00:29:01,940
handler that receives a name and then

673
00:29:01,940 --> 00:29:03,590
logs it nothing fancy

674
00:29:03,590 --> 00:29:07,190
so here the extension currently has

675
00:29:07,190 --> 00:29:09,530
persistent persistent true if you don't

676
00:29:09,530 --> 00:29:11,990
explicitly specify persistent false it

677
00:29:11,990 --> 00:29:15,860
is by default true and then our

678
00:29:15,860 --> 00:29:18,980
background script basically if we get a

679
00:29:18,980 --> 00:29:23,090
message that that sets the user's name

680
00:29:23,090 --> 00:29:25,870
then we'll set the global name variable

681
00:29:25,870 --> 00:29:28,160
to whatever them name is that we

682
00:29:28,160 --> 00:29:31,010
received and then when you click the

683
00:29:31,010 --> 00:29:32,900
browser action button the icon in your

684
00:29:32,900 --> 00:29:36,320
the Chrome window then we will send the

685
00:29:36,320 --> 00:29:38,270
name to the the content script that's

686
00:29:38,270 --> 00:29:39,799
all that's happening here it's not

687
00:29:39,799 --> 00:29:42,410
terribly fancy the problem that we're

688
00:29:42,410 --> 00:29:44,540
gonna have with this in the migration to

689
00:29:44,540 --> 00:29:46,340
manifest b3 is we're not gonna have

690
00:29:46,340 --> 00:29:48,440
global state anymore so in order to work

691
00:29:48,440 --> 00:29:50,240
around that we need to tweak it a little

692
00:29:50,240 --> 00:29:52,490
bit here we're explicitly calling out

693
00:29:52,490 --> 00:29:54,320
that persistent is false so now we're

694
00:29:54,320 --> 00:29:58,130
using an event page and rather than

695
00:29:58,130 --> 00:29:59,660
having a global variable that we're

696
00:29:59,660 --> 00:30:01,549
reading and writing we're using chrome

697
00:30:01,549 --> 00:30:04,580
storage sync to set the user's name when

698
00:30:04,580 --> 00:30:07,700
they pass it in and we're using criminal

699
00:30:07,700 --> 00:30:09,590
storage that same tacit to retrieve the

700
00:30:09,590 --> 00:30:12,530
user's name when when we want to send

701
00:30:12,530 --> 00:30:15,500
the message to the background page so

702
00:30:15,500 --> 00:30:18,980
this is basically shifting from global

703
00:30:18,980 --> 00:30:21,620
state sort in JavaScript to state stored

704
00:30:21,620 --> 00:30:26,090
in a persistent place the next step in

705
00:30:26,090 --> 00:30:28,730
the migration is going to be changing

706
00:30:28,730 --> 00:30:32,570
from an event page to a serviceworker so

707
00:30:32,570 --> 00:30:35,630
here we have a script it's a single

708
00:30:35,630 --> 00:30:37,490
person a background page or a single non

709
00:30:37,490 --> 00:30:39,650
persistent background page here we're

710
00:30:39,650 --> 00:30:41,419
explicitly declaring a serviceworker and

711
00:30:41,419 --> 00:30:43,850
it's worth noting here that in the

712
00:30:43,850 --> 00:30:47,240
introduction of serviceworkers you will

713
00:30:47,240 --> 00:30:48,380
be able to use service workers with

714
00:30:48,380 --> 00:30:52,400
manifest v2 this is intended to help

715
00:30:52,400 --> 00:30:54,559
developers migrate from the current

716
00:30:54,559 --> 00:30:56,210
platform to the the new version that

717
00:30:56,210 --> 00:30:58,790
we're going to be using

718
00:30:58,790 --> 00:31:01,730
the third and I think final change that

719
00:31:01,730 --> 00:31:02,900
I want to call out is remotely hosted

720
00:31:02,900 --> 00:31:06,770
code as I said we're not going to allow

721
00:31:06,770 --> 00:31:09,620
you to execute code that isn't part of

722
00:31:09,620 --> 00:31:10,730
your extension bundle in the

723
00:31:10,730 --> 00:31:13,280
not-too-distant future one of the

724
00:31:13,280 --> 00:31:15,140
challenges that this is going to prevent

725
00:31:15,140 --> 00:31:17,570
to developers is that it limits the

726
00:31:17,570 --> 00:31:20,090
dynamism that you can have some people

727
00:31:20,090 --> 00:31:22,040
are currently using this to not ill

728
00:31:22,040 --> 00:31:24,500
affect like they're doing good things by

729
00:31:24,500 --> 00:31:26,450
delivering updates very quickly to users

730
00:31:26,450 --> 00:31:30,650
or to a be test and make sure that their

731
00:31:30,650 --> 00:31:32,420
extension is performing as well as it

732
00:31:32,420 --> 00:31:38,150
can in order to adapt to this developers

733
00:31:38,150 --> 00:31:39,710
are essentially going to need to bundle

734
00:31:39,710 --> 00:31:42,970
their third-party code into the art

735
00:31:42,970 --> 00:31:44,990
bundle the resources that they want to

736
00:31:44,990 --> 00:31:46,580
load at runtime bundle that into the

737
00:31:46,580 --> 00:31:48,160
extension and load it from the extension

738
00:31:48,160 --> 00:31:52,700
so here we're doing a simple incredibly

739
00:31:52,700 --> 00:31:54,380
simple thing where we have a content

740
00:31:54,380 --> 00:31:56,510
script that is just going to inject

741
00:31:56,510 --> 00:31:59,930
jQuery onto the page and as you could

742
00:31:59,930 --> 00:32:01,730
see we're loading jQuery from the

743
00:32:01,730 --> 00:32:06,050
official jQuery website all this content

744
00:32:06,050 --> 00:32:08,300
script does is create an element assign

745
00:32:08,300 --> 00:32:10,250
the appropriate attributes and then

746
00:32:10,250 --> 00:32:13,700
append it to the parent document in the

747
00:32:13,700 --> 00:32:15,980
new world we're going to need to

748
00:32:15,980 --> 00:32:18,320
explicitly expose the jQuery library

749
00:32:18,320 --> 00:32:20,600
using web accessible resources and we're

750
00:32:20,600 --> 00:32:22,100
bundling the library with our extension

751
00:32:22,100 --> 00:32:25,070
and then when we want to inject it we

752
00:32:25,070 --> 00:32:28,130
just use chrome runtime get URL to

753
00:32:28,130 --> 00:32:32,900
retrieve a a URL in order to load the

754
00:32:32,900 --> 00:32:35,120
specific file the rest is basically the

755
00:32:35,120 --> 00:32:39,200
same and with that I just want to

756
00:32:39,200 --> 00:32:41,570
quickly go through the the major changes

757
00:32:41,570 --> 00:32:44,030
again to the extension platform we're

758
00:32:44,030 --> 00:32:45,710
trying to move towards an active tab

759
00:32:45,710 --> 00:32:48,440
style set of permissions so users are in

760
00:32:48,440 --> 00:32:50,740
control of when the extension is running

761
00:32:50,740 --> 00:32:54,620
we're moving away from API is that

762
00:32:54,620 --> 00:32:56,840
leaked data like web requests in order

763
00:32:56,840 --> 00:33:00,410
to make sure that as little information

764
00:33:00,410 --> 00:33:02,150
as being exposed to the extension as

765
00:33:02,150 --> 00:33:04,490
reasonably possible the web requests

766
00:33:04,490 --> 00:33:06,740
change here is the first of many steps

767
00:33:06,740 --> 00:33:09,770
in this direction but I think in future

768
00:33:09,770 --> 00:33:10,880
versions of the

769
00:33:10,880 --> 00:33:12,380
platform and additional changes in

770
00:33:12,380 --> 00:33:14,930
manifest v2 or manifest v3 you can

771
00:33:14,930 --> 00:33:16,880
expect that we're gonna be trying to

772
00:33:16,880 --> 00:33:17,720
tighten up

773
00:33:17,720 --> 00:33:19,790
how and when extensions are running and

774
00:33:19,790 --> 00:33:21,520
what data they're getting access to and

775
00:33:21,520 --> 00:33:25,550
finally we're replacing a weight this

776
00:33:25,550 --> 00:33:28,430
there is a fourth one we're replacing

777
00:33:28,430 --> 00:33:29,930
background pages with service workers

778
00:33:29,930 --> 00:33:32,150
and that's going to have some impact on

779
00:33:32,150 --> 00:33:34,910
how extensions are architected and how

780
00:33:34,910 --> 00:33:36,620
they approach the job that they're doing

781
00:33:36,620 --> 00:33:39,140
and finally we're removing the ability

782
00:33:39,140 --> 00:33:40,880
to run remotely hosted code through a

783
00:33:40,880 --> 00:33:42,530
combination of platform API level

784
00:33:42,530 --> 00:33:45,730
changes and chrome Chrome Web Store

785
00:33:45,730 --> 00:33:50,990
policy changes if you are interested in

786
00:33:50,990 --> 00:33:52,430
continuing to dig into the extension

787
00:33:52,430 --> 00:33:54,080
ecosystem I'd recommend checking out the

788
00:33:54,080 --> 00:33:57,530
Google Chrome or Chrome extensions

789
00:33:57,530 --> 00:34:00,800
google group and also checking out the

790
00:34:00,800 --> 00:34:03,410
manifest v3 design document the design

791
00:34:03,410 --> 00:34:05,630
document is public like almost all

792
00:34:05,630 --> 00:34:07,850
chrome design documents and the

793
00:34:07,850 --> 00:34:10,310
intention is to this is the launching

794
00:34:10,310 --> 00:34:11,600
off point this isn't a definitive

795
00:34:11,600 --> 00:34:13,520
document but it's the starting point

796
00:34:13,520 --> 00:34:14,929
from which the team is starting to work

797
00:34:14,929 --> 00:34:18,720
to actually implement these features

798
00:34:18,730 --> 00:34:21,500
finally if you have any feedback on this

799
00:34:21,500 --> 00:34:23,659
stuff as the extensions developer

800
00:34:23,659 --> 00:34:24,139
advocate

801
00:34:24,139 --> 00:34:25,669
I am extremely interested in it so

802
00:34:25,669 --> 00:34:28,250
please tell me so I can help make the

803
00:34:28,250 --> 00:34:30,020
extensions platform as good as possible

804
00:34:30,020 --> 00:34:31,810
for you and for everyone else

805
00:34:31,810 --> 00:34:33,889
again the chromium extension Google

806
00:34:33,889 --> 00:34:35,000
group or if you want to reach out to me

807
00:34:35,000 --> 00:34:35,419
directly

808
00:34:35,419 --> 00:34:38,210
I'm dot proto on Twitter and you can

809
00:34:38,210 --> 00:34:40,460
also schedule office hours to do a one

810
00:34:40,460 --> 00:34:44,060
on one video based session or phone call

811
00:34:44,060 --> 00:34:47,629
with me using the bitly link here and

812
00:34:47,629 --> 00:34:49,730
that is it thank you very much

813
00:34:49,730 --> 00:34:53,300
[Applause]

