1
00:00:07,790 --> 00:00:17,670

all right what's good Budapest oh we are

2
00:00:17,670 --> 00:00:22,840
do that again how's it going Budapest

3
00:00:22,850 --> 00:00:30,679
better b-plus good job all right

4
00:00:30,679 --> 00:00:36,360
hi my name is Vita he um and I want to

5
00:00:36,360 --> 00:00:40,469
kind of get a sense of the room how many

6
00:00:40,469 --> 00:00:44,309
of you grew up hearing oh this is good I

7
00:00:44,309 --> 00:00:45,899
was not used I'm not used to like

8
00:00:45,899 --> 00:00:47,940
looking up but I you are all here I'm

9
00:00:47,940 --> 00:00:49,980
gonna look up more often all right how

10
00:00:49,980 --> 00:00:52,680
many of you grew up hearing fairy tales

11
00:00:52,680 --> 00:00:55,620
as a kid all right

12
00:00:55,620 --> 00:00:58,500
good that's good because this talk

13
00:00:58,500 --> 00:01:00,329
probably is not gonna make sense if you

14
00:01:00,329 --> 00:01:03,480
didn't so I'm glad I bet on that

15
00:01:03,480 --> 00:01:06,090
how many of you have heard the fairy

16
00:01:06,090 --> 00:01:10,860
tale Goldilocks and the three bears okay

17
00:01:10,860 --> 00:01:14,159
most everybody for those of you who

18
00:01:14,159 --> 00:01:19,020
haven't a quick plot summary the story

19
00:01:19,020 --> 00:01:20,759
of Goldilocks and the three bears is

20
00:01:20,759 --> 00:01:22,560
basically that there's this girl named

21
00:01:22,560 --> 00:01:26,430
Goldilocks and she breaks into a house

22
00:01:26,430 --> 00:01:29,460
in the woods I don't know why she's in

23
00:01:29,460 --> 00:01:32,189
the woods but she's there and she breaks

24
00:01:32,189 --> 00:01:35,130
into this house and she like it's

25
00:01:35,130 --> 00:01:37,369
totally abandoned like nobody is at home

26
00:01:37,369 --> 00:01:40,200
and it turns out this is the house of

27
00:01:40,200 --> 00:01:43,920
three bears and she like tries out all

28
00:01:43,920 --> 00:01:46,140
their stuff like she sleeps in their bed

29
00:01:46,140 --> 00:01:50,189
and she eats their porridge and like the

30
00:01:50,189 --> 00:01:52,290
Papa bear's porridge is too hot and the

31
00:01:52,290 --> 00:01:54,060
mama bears porridge is too cold and the

32
00:01:54,060 --> 00:01:56,159
whole story is like her basically going

33
00:01:56,159 --> 00:01:59,670
through people's stuff or bear stuff and

34
00:01:59,670 --> 00:02:02,969
it's like in retrospect as an adult I

35
00:02:02,969 --> 00:02:05,159
realize it's probably not a wise thing

36
00:02:05,159 --> 00:02:08,129
to teach children like if it was

37
00:02:08,129 --> 00:02:09,890
Goldilocks and the three bunny rabbits

38
00:02:09,890 --> 00:02:12,819
probably better but three bears

39
00:02:12,819 --> 00:02:14,260
feel like I don't know I don't think

40
00:02:14,260 --> 00:02:17,620
that's the best thing but needless to

41
00:02:17,620 --> 00:02:21,310
say I did some research on Goldilocks

42
00:02:21,310 --> 00:02:22,930
and the three bears and it turns out

43
00:02:22,930 --> 00:02:26,319
that this fairytale dates back to the

44
00:02:26,319 --> 00:02:31,620
year 1837 so it's over 150 years old and

45
00:02:31,620 --> 00:02:35,590
I got to thinking about what Goldilocks

46
00:02:35,590 --> 00:02:38,290
and the three bears would be like with a

47
00:02:38,290 --> 00:02:40,840
modern day twist if we were to tell that

48
00:02:40,840 --> 00:02:45,180
same story what would that story be like

49
00:02:45,180 --> 00:02:47,669
and that's what we're gonna do today

50
00:02:47,669 --> 00:02:52,930
so modern-day Goldilocks she doesn't

51
00:02:52,930 --> 00:02:54,400
break into houses anymore she's over

52
00:02:54,400 --> 00:02:57,719
that she learned her lesson instead

53
00:02:57,719 --> 00:03:01,629
modern-day Goldilocks is a JavaScript

54
00:03:01,629 --> 00:03:04,930
available developer obviously cuz why

55
00:03:04,930 --> 00:03:07,569
wouldn't she be and modern-day

56
00:03:07,569 --> 00:03:09,849
Goldilocks is working at her first dev

57
00:03:09,849 --> 00:03:15,189
job and she loves it so she's writing

58
00:03:15,189 --> 00:03:16,719
JavaScript she's like working with

59
00:03:16,719 --> 00:03:19,569
frameworks like angular and ember and

60
00:03:19,569 --> 00:03:23,530
even a little react and she's having a

61
00:03:23,530 --> 00:03:25,180
great time because she's learning a lot

62
00:03:25,180 --> 00:03:26,889
from the other developers on her team

63
00:03:26,889 --> 00:03:30,030
and this company that she's working at

64
00:03:30,030 --> 00:03:32,949
it's pretty small she's the first junior

65
00:03:32,949 --> 00:03:35,590
developer that they have and she gets to

66
00:03:35,590 --> 00:03:37,449
ask a lot of questions and learn a lot

67
00:03:37,449 --> 00:03:39,489
from these other developers by writing

68
00:03:39,489 --> 00:03:42,069
code that's in production which is the

69
00:03:42,069 --> 00:03:44,139
first time she's ever done that so

70
00:03:44,139 --> 00:03:50,049
that's really exciting but after like

71
00:03:50,049 --> 00:03:53,349
six months of being at this company she

72
00:03:53,349 --> 00:03:56,169
realizes that they're definitely some

73
00:03:56,169 --> 00:03:58,049
places where this company has drawbacks

74
00:03:58,049 --> 00:04:02,949
so after about six months she starts

75
00:04:02,949 --> 00:04:06,099
wondering am I actually getting better

76
00:04:06,099 --> 00:04:07,299
at writing code

77
00:04:07,299 --> 00:04:10,629
I don't know and she talks to other

78
00:04:10,629 --> 00:04:13,120
developer friends of hers and she finds

79
00:04:13,120 --> 00:04:15,969
out that at other companies one of the

80
00:04:15,969 --> 00:04:17,650
ways that a lot of junior developers

81
00:04:17,650 --> 00:04:19,840
realize that they're getting better or

82
00:04:19,840 --> 00:04:21,940
learn what they can improve on and get

83
00:04:21,940 --> 00:04:26,150
feedback is through the process of code

84
00:04:26,150 --> 00:04:29,550
so Goldilocks gets to thinking and she

85
00:04:29,550 --> 00:04:32,580
realizes we don't actually have any

86
00:04:32,580 --> 00:04:34,910
formal code review process at my company

87
00:04:34,910 --> 00:04:38,730
in fact whenever I want review I have to

88
00:04:38,730 --> 00:04:41,570
ask another engineer to look at my code

89
00:04:41,570 --> 00:04:47,640
and if I forget what I did wrong on like

90
00:04:47,640 --> 00:04:49,170
a feature or like something that I could

91
00:04:49,170 --> 00:04:51,240
have improved on I don't have that

92
00:04:51,240 --> 00:04:53,520
feedback written down or documented

93
00:04:53,520 --> 00:04:57,510
anywhere and she starts to think about

94
00:04:57,510 --> 00:05:00,240
whether this is like going to be a

95
00:05:00,240 --> 00:05:01,890
long-term sustainable place for her to

96
00:05:01,890 --> 00:05:05,790
stay and she realizes after talking to

97
00:05:05,790 --> 00:05:08,640
other developers that even junior

98
00:05:08,640 --> 00:05:11,700
developers on other teams can understand

99
00:05:11,700 --> 00:05:13,530
and learn from what senior developers

100
00:05:13,530 --> 00:05:15,330
are working on by reviewing their code

101
00:05:15,330 --> 00:05:18,030
and at her company they're not doing any

102
00:05:18,030 --> 00:05:23,730
of that so it's not great and after

103
00:05:23,730 --> 00:05:25,170
about a year or so

104
00:05:25,170 --> 00:05:28,140
Goldilocks decides I've learned a lot

105
00:05:28,140 --> 00:05:31,010
here but it's time for me to move on and

106
00:05:31,010 --> 00:05:35,880
she goes to her second dev job so at her

107
00:05:35,880 --> 00:05:38,960
second dev job things are different and

108
00:05:38,960 --> 00:05:41,820
one of the things that's very very

109
00:05:41,820 --> 00:05:43,680
different from her first step' job is

110
00:05:43,680 --> 00:05:46,860
the fact that they take code reviews

111
00:05:46,860 --> 00:05:51,390
pretty seriously every single PR that is

112
00:05:51,390 --> 00:05:53,610
made at this company on this engineering

113
00:05:53,610 --> 00:05:57,000
team is reviewed which she's like that's

114
00:05:57,000 --> 00:05:59,250
awesome that's exactly what I was

115
00:05:59,250 --> 00:06:01,200
looking for now I'll finally get like

116
00:06:01,200 --> 00:06:02,910
the feedback that I need and I'll learn

117
00:06:02,910 --> 00:06:04,800
and I'll make fewer mistakes and I'm

118
00:06:04,800 --> 00:06:10,710
gonna grow it's gonna be great on her

119
00:06:10,710 --> 00:06:13,800
first week at this new job she's super

120
00:06:13,800 --> 00:06:15,510
excited because she gets to review the

121
00:06:15,510 --> 00:06:18,510
CTOs code so now she's doing things that

122
00:06:18,510 --> 00:06:21,690
she couldn't do before and this is

123
00:06:21,690 --> 00:06:29,010
really exciting but after about 6 or 7

124
00:06:29,010 --> 00:06:32,490
months again she realizes that even this

125
00:06:32,490 --> 00:06:34,100
company has its drawbacks

126
00:06:34,100 --> 00:06:37,290
they have code review processes but it's

127
00:06:37,290 --> 00:06:38,410
small

128
00:06:38,410 --> 00:06:40,420
it's a small team it's a small start-up

129
00:06:40,420 --> 00:06:44,890
and really their process is just as long

130
00:06:44,890 --> 00:06:48,550
as one person gives it a thumbs up that

131
00:06:48,550 --> 00:06:51,520
code can be merged in and like sometimes

132
00:06:51,520 --> 00:06:55,330
those PRS will devolve intellect long

133
00:06:55,330 --> 00:06:59,410
discussions or many comments and

134
00:06:59,410 --> 00:07:01,900
sometimes they're debating like do we

135
00:07:01,900 --> 00:07:03,730
want to put a semicolon here she'll use

136
00:07:03,730 --> 00:07:07,060
tabs and spaces you know those types of

137
00:07:07,060 --> 00:07:09,820
discussions but the code review process

138
00:07:09,820 --> 00:07:12,970
is working fine and they're merging code

139
00:07:12,970 --> 00:07:18,240
in there merging a lot of code in and

140
00:07:18,240 --> 00:07:22,360
everything is fine and it seems to be ok

141
00:07:22,360 --> 00:07:27,880
until one day so one day Goldilocks

142
00:07:27,880 --> 00:07:29,710
decides that she's finally ready to

143
00:07:29,710 --> 00:07:31,120
merge in this feature that she's been

144
00:07:31,120 --> 00:07:33,340
working on and she's been working on it

145
00:07:33,340 --> 00:07:35,770
for like three weeks and she's like okay

146
00:07:35,770 --> 00:07:39,220
good to go she merges it in and before

147
00:07:39,220 --> 00:07:41,320
she merges it it's reviewed it's

148
00:07:41,320 --> 00:07:42,940
reviewed by two other engineers on the

149
00:07:42,940 --> 00:07:47,620
team and then she's like okay I'm gonna

150
00:07:47,620 --> 00:07:49,780
push this to staging and I'm gonna go

151
00:07:49,780 --> 00:07:54,580
get a coffee she gets back from getting

152
00:07:54,580 --> 00:07:57,460
her coffee and 20 minutes later she

153
00:07:57,460 --> 00:08:01,900
walks into the office and everyone is

154
00:08:01,900 --> 00:08:05,800
having a minor panic attack because the

155
00:08:05,800 --> 00:08:08,680
code that she merged in totally broke

156
00:08:08,680 --> 00:08:12,370
staging and the entire environment is

157
00:08:12,370 --> 00:08:17,500
down so everybody's like Goldilocks what

158
00:08:17,500 --> 00:08:22,270
did you do what did you deploy and she's

159
00:08:22,270 --> 00:08:24,250
like I mean you looked at the code I

160
00:08:24,250 --> 00:08:26,080
don't know what I did wrong we all

161
00:08:26,080 --> 00:08:31,080
reviewed it but not to be deterred

162
00:08:31,080 --> 00:08:32,380
Goldilocks

163
00:08:32,380 --> 00:08:34,590
sets out to try to put out this fire and

164
00:08:34,590 --> 00:08:38,860
figure out what she did wrong as it

165
00:08:38,860 --> 00:08:43,270
turns out she made a pull request with

166
00:08:43,270 --> 00:08:45,600
two files that were named the same and

167
00:08:45,600 --> 00:08:47,980
one of them had code in it and one of

168
00:08:47,980 --> 00:08:49,880
them was totally empty and she

169
00:08:49,880 --> 00:08:52,310
Adelita except she forgot to delete it

170
00:08:52,310 --> 00:08:57,230
and nobody caught that and then a whole

171
00:08:57,230 --> 00:08:58,910
of staging went down and everybody

172
00:08:58,910 --> 00:09:03,140
freaked out and when she sees this

173
00:09:03,140 --> 00:09:05,030
mistake and she sees that nobody on her

174
00:09:05,030 --> 00:09:07,220
team caught this mistake she gets to

175
00:09:07,220 --> 00:09:12,980
thinking and she's like oh no we really

176
00:09:12,980 --> 00:09:14,750
thought that we had this code review

177
00:09:14,750 --> 00:09:22,250
thing down but maybe we don't and she

178
00:09:22,250 --> 00:09:24,590
realizes that these two teams that she's

179
00:09:24,590 --> 00:09:27,170
worked on she's been looking for this

180
00:09:27,170 --> 00:09:29,540
perfect balance of which code review

181
00:09:29,540 --> 00:09:32,990
workflow works the best and she doesn't

182
00:09:32,990 --> 00:09:37,850
really know if she's found it yet so she

183
00:09:37,850 --> 00:09:39,860
does what probably all of us in this

184
00:09:39,860 --> 00:09:44,180
room would do in this situation she

185
00:09:44,180 --> 00:09:46,700
asked the internet and she does some

186
00:09:46,700 --> 00:09:50,120
googling and she hears about this really

187
00:09:50,120 --> 00:09:54,490
ancient book called

188
00:09:54,490 --> 00:09:57,680
code complete and she starts thinking oh

189
00:09:57,680 --> 00:09:59,560
my god there must be a better way of

190
00:09:59,560 --> 00:10:04,730
doing code reviews right so she decides

191
00:10:04,730 --> 00:10:09,440
to dive into the theory of code reviews

192
00:10:09,440 --> 00:10:13,220
and she opens up this book called code

193
00:10:13,220 --> 00:10:16,280
complete which is so old it dates back

194
00:10:16,280 --> 00:10:19,610
to the Year 1993 so I mean like really

195
00:10:19,610 --> 00:10:26,300
old and she reads a lot of the theory

196
00:10:26,300 --> 00:10:29,600
and research behind code reviews code

197
00:10:29,600 --> 00:10:31,490
complete was written by a man named

198
00:10:31,490 --> 00:10:33,320
Steve McConnell it's a really great book

199
00:10:33,320 --> 00:10:36,350
and I recommend it to all of you to pick

200
00:10:36,350 --> 00:10:39,350
up and he's done a lot of research in

201
00:10:39,350 --> 00:10:43,610
this book Goldilocks Pines and it turns

202
00:10:43,610 --> 00:10:47,090
out that there are three different types

203
00:10:47,090 --> 00:10:50,120
of code reviews that came about in about

204
00:10:50,120 --> 00:10:52,970
the late 80s and they're kind of the

205
00:10:52,970 --> 00:10:54,650
fundamental core of the code reviews

206
00:10:54,650 --> 00:10:56,480
that we do today theoretically

207
00:10:56,480 --> 00:11:01,550
and so she seeks to understand why did

208
00:11:01,550 --> 00:11:03,080
we start doing code reviews and what are

209
00:11:03,080 --> 00:11:03,209
they

210
00:11:03,209 --> 00:11:05,429
good for what is the ideal code review

211
00:11:05,429 --> 00:11:08,100
process supposed to be like because if I

212
00:11:08,100 --> 00:11:09,779
can understand that then maybe I can

213
00:11:09,779 --> 00:11:11,670
bring it to my team and try to improve

214
00:11:11,670 --> 00:11:17,970
our process so encode complete Steve

215
00:11:17,970 --> 00:11:22,759
McConnell writes this one part of

216
00:11:22,759 --> 00:11:25,110
managing a software engineering process

217
00:11:25,110 --> 00:11:29,490
is catching problems at the lowest value

218
00:11:29,490 --> 00:11:33,689
stage that is at the time at which the

219
00:11:33,689 --> 00:11:36,079
least investment has been made and

220
00:11:36,079 --> 00:11:41,550
problems cost the least to correct the

221
00:11:41,550 --> 00:11:44,369
idea that Steve McConnell try it kind of

222
00:11:44,369 --> 00:11:47,069
gets that in this book is that code

223
00:11:47,069 --> 00:11:49,589
reviews should act as quality gates for

224
00:11:49,589 --> 00:11:53,670
our code code bases similar to if we

225
00:11:53,670 --> 00:11:57,269
create a product and we test it and we

226
00:11:57,269 --> 00:12:01,170
check its quality through QA or generic

227
00:12:01,170 --> 00:12:04,800
testing in general code reviews should

228
00:12:04,800 --> 00:12:10,389
act as similar gates for our code bases

229
00:12:10,399 --> 00:12:12,720
so she starts thinking about this and

230
00:12:12,720 --> 00:12:15,540
she's like I don't know if our team's

231
00:12:15,540 --> 00:12:18,480
code review process like if our code

232
00:12:18,480 --> 00:12:21,119
review our quality gates are actually of

233
00:12:21,119 --> 00:12:23,459
good quality sometimes it feels like

234
00:12:23,459 --> 00:12:28,170
we're just doing it as a formality so

235
00:12:28,170 --> 00:12:33,720
she keeps reading and she finds that the

236
00:12:33,720 --> 00:12:36,119
most effective code reviews according to

237
00:12:36,119 --> 00:12:39,299
research are the ones that are based on

238
00:12:39,299 --> 00:12:42,119
this idea of the collective ownership of

239
00:12:42,119 --> 00:12:44,790
construction which is the idea that if

240
00:12:44,790 --> 00:12:47,160
all of us have a hand and all of us have

241
00:12:47,160 --> 00:12:49,860
an investment in our code base and we

242
00:12:49,860 --> 00:12:52,040
feel like we're building it together

243
00:12:52,040 --> 00:12:57,179
then code reviews actually improve the

244
00:12:57,179 --> 00:13:00,360
lifespan of our code base so one of the

245
00:13:00,360 --> 00:13:02,279
examples that Steve McConnell gives is

246
00:13:02,279 --> 00:13:05,069
that if you have more sets of eyes on

247
00:13:05,069 --> 00:13:08,339
your code base through code reviews this

248
00:13:08,339 --> 00:13:11,249
might seem obvious but your code base

249
00:13:11,249 --> 00:13:12,509
will actually get better because you

250
00:13:12,509 --> 00:13:15,660
have more people looking at it another

251
00:13:15,660 --> 00:13:16,560
great benefit

252
00:13:16,560 --> 00:13:18,960
is the fact that if someone leaves your

253
00:13:18,960 --> 00:13:22,950
team the rest of the team can still pick

254
00:13:22,950 --> 00:13:25,830
up and function because even if they

255
00:13:25,830 --> 00:13:27,510
haven't written the code that that

256
00:13:27,510 --> 00:13:30,360
person wrote who left they've at least

257
00:13:30,360 --> 00:13:33,390
reviewed it so they're somewhat familiar

258
00:13:33,390 --> 00:13:35,940
with the problems that they were working

259
00:13:35,940 --> 00:13:39,720
on and the features that they built in a

260
00:13:39,720 --> 00:13:43,440
similar vein being able to detect bugs

261
00:13:43,440 --> 00:13:46,800
and solve them is a lot easier for

262
00:13:46,800 --> 00:13:49,290
anyone on the team if you've reviewed

263
00:13:49,290 --> 00:13:51,180
code that you might have not necessarily

264
00:13:51,180 --> 00:13:54,810
written these are cycles of defect

265
00:13:54,810 --> 00:13:56,970
correction so when you identify

266
00:13:56,970 --> 00:13:59,100
something that's problematic in the code

267
00:13:59,100 --> 00:14:01,290
whether it's a bug or a design flaw and

268
00:14:01,290 --> 00:14:04,550
you can actually fix those things faster

269
00:14:04,550 --> 00:14:09,180
through code reviews but what are the

270
00:14:09,180 --> 00:14:10,610
different types of code reviews

271
00:14:10,610 --> 00:14:13,170
Goldilocks is sold she's like okay

272
00:14:13,170 --> 00:14:15,290
all this theory seems great but like

273
00:14:15,290 --> 00:14:17,610
what different types of code reviews

274
00:14:17,610 --> 00:14:21,540
were created because she doesn't really

275
00:14:21,540 --> 00:14:25,160
know about the history of code reviews

276
00:14:25,160 --> 00:14:29,040
as it turns out one of the earliest

277
00:14:29,040 --> 00:14:31,410
instances of code reviews dates back to

278
00:14:31,410 --> 00:14:35,820
the 70s and there was a small team at

279
00:14:35,820 --> 00:14:38,610
IBM that started implementing something

280
00:14:38,610 --> 00:14:43,350
called inspections this was basically a

281
00:14:43,350 --> 00:14:47,660
kind of long form code review where

282
00:14:47,660 --> 00:14:50,850
three people would come into a room the

283
00:14:50,850 --> 00:14:53,130
person who wrote the code the person who

284
00:14:53,130 --> 00:14:54,900
was reviewing the code and a moderator

285
00:14:54,900 --> 00:14:57,690
and all three of them would come in with

286
00:14:57,690 --> 00:14:59,550
this checklist of things that they had

287
00:14:59,550 --> 00:15:01,380
looked for and things that they were

288
00:15:01,380 --> 00:15:05,209
accountable while reviewing the code and

289
00:15:05,209 --> 00:15:09,060
the idea was that you would look at the

290
00:15:09,060 --> 00:15:11,700
code and look for possible defects

291
00:15:11,700 --> 00:15:14,430
within it so it might be design flaws or

292
00:15:14,430 --> 00:15:17,160
bugs or other things that might be

293
00:15:17,160 --> 00:15:18,810
problematic when you merge that code

294
00:15:18,810 --> 00:15:22,800
into the larger code base and the idea

295
00:15:22,800 --> 00:15:24,240
was that you weren't trying to

296
00:15:24,240 --> 00:15:26,280
necessarily fix the code in that moment

297
00:15:26,280 --> 00:15:28,320
you are just trying to look for gaping

298
00:15:28,320 --> 00:15:30,540
holes

299
00:15:30,540 --> 00:15:35,370
so inspections were very long types of

300
00:15:35,370 --> 00:15:38,090
code reviews that took 30 to 60 minutes

301
00:15:38,090 --> 00:15:42,030
but as Goldilocks found there is another

302
00:15:42,030 --> 00:15:44,970
type of code review as well and these

303
00:15:44,970 --> 00:15:49,820
are short reviews short reviews

304
00:15:49,820 --> 00:15:53,970
basically hinge on the idea that back in

305
00:15:53,970 --> 00:15:57,480
the 70s and even early 80s a lot of

306
00:15:57,480 --> 00:15:59,190
teams were not reviewing code and

307
00:15:59,190 --> 00:16:01,500
especially not reviewing code that was

308
00:16:01,500 --> 00:16:06,060
like one or two line changes and Steve

309
00:16:06,060 --> 00:16:07,650
McConnell did some research on this and

310
00:16:07,650 --> 00:16:09,480
encode complete he writes about how

311
00:16:09,480 --> 00:16:13,290
teams that started checking code and

312
00:16:13,290 --> 00:16:15,390
reviewing it when it was under a five

313
00:16:15,390 --> 00:16:20,160
line change saw drastic results so one

314
00:16:20,160 --> 00:16:22,170
of the examples he gives is that there

315
00:16:22,170 --> 00:16:24,930
was a team that had a 55% error rate in

316
00:16:24,930 --> 00:16:27,660
their code base and they started

317
00:16:27,660 --> 00:16:30,300
implementing short reviews where even if

318
00:16:30,300 --> 00:16:32,670
he was a one line change they would make

319
00:16:32,670 --> 00:16:34,400
sure that code was reviewed and that

320
00:16:34,400 --> 00:16:36,630
team went from a fifty five percent

321
00:16:36,630 --> 00:16:39,270
error rate to a two percent error rate

322
00:16:39,270 --> 00:16:41,790
which is kind of wild if you think about

323
00:16:41,790 --> 00:16:45,480
it in a similar vein there was another

324
00:16:45,480 --> 00:16:48,780
engineering team that had an 86 percent

325
00:16:48,780 --> 00:16:51,060
correctness rate and once they

326
00:16:51,060 --> 00:16:54,540
implemented short code reviews they went

327
00:16:54,540 --> 00:16:56,820
from an 86 percent correctness rate to

328
00:16:56,820 --> 00:17:00,330
ninety nine point six so this was kind

329
00:17:00,330 --> 00:17:03,300
of a game changer in the world and the

330
00:17:03,300 --> 00:17:06,990
theory of code reviews like 30 or so

331
00:17:06,990 --> 00:17:12,810
years ago the third type of code review

332
00:17:12,810 --> 00:17:15,030
that she reads about sounds similar to

333
00:17:15,030 --> 00:17:16,440
things that she's experienced with

334
00:17:16,440 --> 00:17:18,930
senior engineers on her team and this is

335
00:17:18,930 --> 00:17:21,740
something called a walkthrough

336
00:17:21,740 --> 00:17:24,000
walkthroughs are basically working

337
00:17:24,000 --> 00:17:26,250
meetings so the idea is that you have

338
00:17:26,250 --> 00:17:28,199
like a senior engineer and maybe a more

339
00:17:28,199 --> 00:17:30,690
junior a mid-level engineer and the two

340
00:17:30,690 --> 00:17:34,950
of them sit down and they talk about the

341
00:17:34,950 --> 00:17:36,990
design decisions made in the code in a

342
00:17:36,990 --> 00:17:39,630
code change and things that could

343
00:17:39,630 --> 00:17:42,990
possibly go wrong or things that maybe

344
00:17:42,990 --> 00:17:44,240
could be reconsidered

345
00:17:44,240 --> 00:17:48,260
refactored in a different way in Steve

346
00:17:48,260 --> 00:17:49,730
McConnell's research he found that

347
00:17:49,730 --> 00:17:52,399
walkthroughs aren't as effective but

348
00:17:52,399 --> 00:17:56,809
they can have some benefits they can

349
00:17:56,809 --> 00:17:59,120
reduce up to 30% of errors and programs

350
00:17:59,120 --> 00:18:01,149
but they're more learning opportunities

351
00:18:01,149 --> 00:18:05,000
then opportunities to actually find tons

352
00:18:05,000 --> 00:18:10,100
and tons of bugs in your code and as

353
00:18:10,100 --> 00:18:12,740
she's reading Goldilocks stumbles upon

354
00:18:12,740 --> 00:18:14,210
something called the peer-review

355
00:18:14,210 --> 00:18:17,120
sophistication scale and this is

356
00:18:17,120 --> 00:18:20,539
something that has been around since the

357
00:18:20,539 --> 00:18:23,750
late 70s and early 80s back when code

358
00:18:23,750 --> 00:18:25,370
reviews were kind of getting formulated

359
00:18:25,370 --> 00:18:28,700
and the idea was that any engineering

360
00:18:28,700 --> 00:18:31,880
team could look at this and kind of self

361
00:18:31,880 --> 00:18:35,570
assess where they fell on this review

362
00:18:35,570 --> 00:18:39,740
sophistication scale and as Goldilocks

363
00:18:39,740 --> 00:18:42,669
looks at this she starts thinking I

364
00:18:42,669 --> 00:18:45,200
don't think I've ever worked on a team

365
00:18:45,200 --> 00:18:48,830
that's been a for probably not even a

366
00:18:48,830 --> 00:18:54,169
three and she's like is it just me has

367
00:18:54,169 --> 00:18:55,820
everybody else got code reviews down or

368
00:18:55,820 --> 00:18:58,789
is like is everyone else feeling the

369
00:18:58,789 --> 00:19:00,980
same discontentment with code reviews

370
00:19:00,980 --> 00:19:05,330
and she's read a lot of the theory but

371
00:19:05,330 --> 00:19:06,919
she doesn't feel like she's able to

372
00:19:06,919 --> 00:19:08,899
debug what went wrong in her team's code

373
00:19:08,899 --> 00:19:12,350
review process so she decides to take

374
00:19:12,350 --> 00:19:17,409
theory and build on it one level further

375
00:19:17,409 --> 00:19:21,620
she decides to actually figure out what

376
00:19:21,620 --> 00:19:23,840
code reviews are like in the industry in

377
00:19:23,840 --> 00:19:29,929
practice so she does what most of us

378
00:19:29,929 --> 00:19:33,279
would do she asked the internet

379
00:19:33,279 --> 00:19:35,720
specifically she asked Twitter which

380
00:19:35,720 --> 00:19:38,029
sometimes goes well and sometimes does

381
00:19:38,029 --> 00:19:41,990
not go well but she basically asked

382
00:19:41,990 --> 00:19:44,149
everyone hey I'm collecting data on code

383
00:19:44,149 --> 00:19:46,029
reviews can you tell me what you think

384
00:19:46,029 --> 00:19:51,130
and what she finds is really interesting

385
00:19:51,130 --> 00:19:53,670
so she starts

386
00:19:53,670 --> 00:19:56,940
looking at this data and a quick

387
00:19:56,940 --> 00:20:00,299
disclaimer about this data she is not a

388
00:20:00,299 --> 00:20:03,630
data scientist so it's obviously not a

389
00:20:03,630 --> 00:20:05,100
great representation of the entire

390
00:20:05,100 --> 00:20:09,120
industry for one thing people who

391
00:20:09,120 --> 00:20:11,340
answered the survey are only gonna be

392
00:20:11,340 --> 00:20:13,280
people who saw her tweet and

393
00:20:13,280 --> 00:20:16,170
self-selected into it but it's still

394
00:20:16,170 --> 00:20:18,179
better than nothing so she decides to

395
00:20:18,179 --> 00:20:19,799
see what she can learn from this data

396
00:20:19,799 --> 00:20:21,390
even if it might not be the most

397
00:20:21,390 --> 00:20:26,520
accurate it's a start so the first

398
00:20:26,520 --> 00:20:28,380
things she finds is that the majority of

399
00:20:28,380 --> 00:20:31,230
people who answered her survey worked in

400
00:20:31,230 --> 00:20:35,690
Java in Ruby and rails and in JavaScript

401
00:20:35,690 --> 00:20:40,620
and she asked them a few quality dove

402
00:20:40,620 --> 00:20:42,090
questions and a few quantitative

403
00:20:42,090 --> 00:20:45,840
questions so the first thing she asked

404
00:20:45,840 --> 00:20:49,950
was half code reviews personally made

405
00:20:49,950 --> 00:20:52,350
you a better developer because you can't

406
00:20:52,350 --> 00:20:54,480
really assume that it's helped everybody

407
00:20:54,480 --> 00:20:58,860
so she wants to be sure and it turns out

408
00:20:58,860 --> 00:21:01,140
most people tend to tended to agree with

409
00:21:01,140 --> 00:21:04,500
her the average answer for code reviews

410
00:21:04,500 --> 00:21:06,179
have made me a personal developer on a

411
00:21:06,179 --> 00:21:08,970
scale of one to ten was about an eight

412
00:21:08,970 --> 00:21:11,520
point six so it seemed like most people

413
00:21:11,520 --> 00:21:13,559
felt like code reviews were a good thing

414
00:21:13,559 --> 00:21:19,549
for them personally and she saw that

415
00:21:19,549 --> 00:21:21,660
most people found code reviews

416
00:21:21,660 --> 00:21:24,690
beneficial to their entire team and the

417
00:21:24,690 --> 00:21:26,760
interesting thing about this was that it

418
00:21:26,760 --> 00:21:29,309
wasn't like just JavaScript developers

419
00:21:29,309 --> 00:21:31,080
or just Java developers or Swift

420
00:21:31,080 --> 00:21:34,080
developers everybody seemed to agree

421
00:21:34,080 --> 00:21:36,510
that having code reviews on their team

422
00:21:36,510 --> 00:21:39,179
was a good thing for the entire team and

423
00:21:39,179 --> 00:21:46,140
their codebase however she did notice

424
00:21:46,140 --> 00:21:49,440
that most people have engineering teams

425
00:21:49,440 --> 00:21:51,799
that had code reviews as a requirement

426
00:21:51,799 --> 00:21:56,460
but there was still about around 10% of

427
00:21:56,460 --> 00:22:01,380
people who had to request review so it's

428
00:22:01,380 --> 00:22:03,540
not like all teams had code reviews as a

429
00:22:03,540 --> 00:22:06,909
formality there were still some team

430
00:22:06,909 --> 00:22:08,859
that were merging code without ever

431
00:22:08,859 --> 00:22:14,109
actually having it reviewed but it was

432
00:22:14,109 --> 00:22:16,359
interesting because her data seemed to

433
00:22:16,359 --> 00:22:20,139
suggest that it didn't really matter

434
00:22:20,139 --> 00:22:22,769
what language or framework you worked in

435
00:22:22,769 --> 00:22:26,590
rather whether your team implemented

436
00:22:26,590 --> 00:22:29,799
code reviews as a actual part of your

437
00:22:29,799 --> 00:22:32,529
workflow or whether they didn't had

438
00:22:32,529 --> 00:22:34,049
nothing to do with your language and

439
00:22:34,049 --> 00:22:36,729
instead everything to do with your team

440
00:22:36,729 --> 00:22:40,629
dynamics your framework has nothing to

441
00:22:40,629 --> 00:22:42,489
do with how well your code review

442
00:22:42,489 --> 00:22:45,369
process is actually contributing to your

443
00:22:45,369 --> 00:22:48,279
codebase but rather it's you and your

444
00:22:48,279 --> 00:22:53,690
teammates was Goldilocks his guess

445
00:22:53,700 --> 00:22:57,070
interestingly she found that most teams

446
00:22:57,070 --> 00:22:59,440
only required one person to actually

447
00:22:59,440 --> 00:23:03,159
review the code there were some team may

448
00:23:03,159 --> 00:23:05,769
be around 20% 7% that said I need two to

449
00:23:05,769 --> 00:23:07,899
three people to review my code but for

450
00:23:07,899 --> 00:23:12,220
the most part one person was enough but

451
00:23:12,220 --> 00:23:15,190
people could wait up to five to twenty

452
00:23:15,190 --> 00:23:18,279
minutes or even sometimes like up to an

453
00:23:18,279 --> 00:23:21,549
hour spending that time to actually

454
00:23:21,549 --> 00:23:25,179
review code for the most part though no

455
00:23:25,179 --> 00:23:27,159
one was spending more than an hour

456
00:23:27,159 --> 00:23:29,859
really reviewing a pull request people

457
00:23:29,859 --> 00:23:31,090
didn't really want to spend too much

458
00:23:31,090 --> 00:23:33,009
time they wanted to like do it very

459
00:23:33,009 --> 00:23:37,840
quickly and it seemed like most people

460
00:23:37,840 --> 00:23:42,669
had to wait a few hours until code was

461
00:23:42,669 --> 00:23:44,619
actually reviewed by one of their peers

462
00:23:44,619 --> 00:23:49,239
so people weren't spending too much time

463
00:23:49,239 --> 00:23:51,489
reviewing what people had to spend a

464
00:23:51,489 --> 00:23:52,869
decent amount of time waiting for

465
00:23:52,869 --> 00:23:59,710
someone else to review this COIs all of

466
00:23:59,710 --> 00:24:02,229
this qualitative data or quantitative

467
00:24:02,229 --> 00:24:05,080
data was fine but Goldilocks was really

468
00:24:05,080 --> 00:24:08,830
interested in reading the results of her

469
00:24:08,830 --> 00:24:12,429
qualitative data so part of her survey

470
00:24:12,429 --> 00:24:15,009
was asking very broad open-ended

471
00:24:15,009 --> 00:24:19,119
questions and the responses that she got

472
00:24:19,119 --> 00:24:21,000
from other developed

473
00:24:21,000 --> 00:24:24,909
we're really interesting she started

474
00:24:24,909 --> 00:24:26,980
reading through the responses and she

475
00:24:26,980 --> 00:24:30,580
saw that there were two main things two

476
00:24:30,580 --> 00:24:33,190
main characteristics that would either

477
00:24:33,190 --> 00:24:37,000
make or break a code review and these

478
00:24:37,000 --> 00:24:40,149
two characteristics can kind of be

479
00:24:40,149 --> 00:24:47,039
summarized as energy and substance so

480
00:24:47,039 --> 00:24:50,370
when we say energy what do we mean well

481
00:24:50,370 --> 00:24:53,440
energy really boils down to who is doing

482
00:24:53,440 --> 00:24:58,210
the code review and how much time are

483
00:24:58,210 --> 00:25:01,539
they spending on it it seemed like a lot

484
00:25:01,539 --> 00:25:05,110
of people would either hate their code

485
00:25:05,110 --> 00:25:07,419
review process or love it based on the

486
00:25:07,419 --> 00:25:09,760
amount of energy that was spent on the

487
00:25:09,760 --> 00:25:15,580
code review workflow one developer Roden

488
00:25:15,580 --> 00:25:20,470
and they said it's not just the act of

489
00:25:20,470 --> 00:25:24,880
doing a code review everyone on the team

490
00:25:24,880 --> 00:25:28,360
should receive equal review I feel like

491
00:25:28,360 --> 00:25:30,789
it's so common for senior people to get

492
00:25:30,789 --> 00:25:33,610
no feedback because people assume they

493
00:25:33,610 --> 00:25:39,090
can do no wrong they totally can and

494
00:25:39,090 --> 00:25:43,059
senior people might want feedback junior

495
00:25:43,059 --> 00:25:45,850
people get nitpick to death and people

496
00:25:45,850 --> 00:25:50,289
forget that self-esteem is likely to be

497
00:25:50,289 --> 00:25:52,950
affected and people are being vulnerable

498
00:25:52,950 --> 00:25:59,649
when they submit a code review someone

499
00:25:59,649 --> 00:26:01,720
else wrote in and they said code reviews

500
00:26:01,720 --> 00:26:03,610
need to be acknowledged as first-class

501
00:26:03,610 --> 00:26:07,360
citizens in a dev team they need to be a

502
00:26:07,360 --> 00:26:09,789
legitimate activity that requires time

503
00:26:09,789 --> 00:26:17,260
and focus and it was interesting because

504
00:26:17,260 --> 00:26:20,200
it seemed like some people on certain

505
00:26:20,200 --> 00:26:22,450
teams really felt strongly about code

506
00:26:22,450 --> 00:26:25,539
reviews and other people didn't and that

507
00:26:25,539 --> 00:26:27,970
would very much leave a sour taste in

508
00:26:27,970 --> 00:26:30,890
their colleagues mouths

509
00:26:30,900 --> 00:26:34,140
one person wrote in and said we have one

510
00:26:34,140 --> 00:26:36,840
developer who blindly thumbs up every

511
00:26:36,840 --> 00:26:40,790
pull request and rarely leaves comments

512
00:26:40,790 --> 00:26:43,980
they're trying to game the rule of at

513
00:26:43,980 --> 00:26:46,559
least two approvals and it's easy to

514
00:26:46,559 --> 00:26:48,450
tell because inside of one minute

515
00:26:48,450 --> 00:26:50,700
they've approved two to three pull

516
00:26:50,700 --> 00:26:56,340
requests someone else said the second

517
00:26:56,340 --> 00:26:59,250
and third people to review a PR are more

518
00:26:59,250 --> 00:27:02,040
likely to have a rubber stamp of

519
00:27:02,040 --> 00:27:04,020
approval after seeing someone else

520
00:27:04,020 --> 00:27:08,900
without actually reading the code so

521
00:27:08,900 --> 00:27:11,100
some of the overarching themes that

522
00:27:11,100 --> 00:27:14,640
Goldilocks notice was that things like

523
00:27:14,640 --> 00:27:21,200
very large commits or very large PRS

524
00:27:21,200 --> 00:27:24,929
with no context would make people more

525
00:27:24,929 --> 00:27:26,429
likely to give a thumbs up without

526
00:27:26,429 --> 00:27:30,540
actually reading the code and things

527
00:27:30,540 --> 00:27:32,520
that really really got under some

528
00:27:32,520 --> 00:27:35,070
developers skin was the fact that not

529
00:27:35,070 --> 00:27:36,750
everybody on the team was reviewed

530
00:27:36,750 --> 00:27:41,880
equally unequal reviews seem to be a

531
00:27:41,880 --> 00:27:44,100
theme that came up again and again in

532
00:27:44,100 --> 00:27:48,750
her survey data and there were a lot of

533
00:27:48,750 --> 00:27:50,580
developers who wrote in and said I want

534
00:27:50,580 --> 00:27:52,650
to do code reviews more but our upper

535
00:27:52,650 --> 00:27:54,150
management doesn't think that they're

536
00:27:54,150 --> 00:27:56,010
important when they're like second-class

537
00:27:56,010 --> 00:27:58,410
citizens so we can't spend the time that

538
00:27:58,410 --> 00:28:02,710
we want to spend reviewing code

539
00:28:02,720 --> 00:28:06,679
Goldilocks kept reading and she saw that

540
00:28:06,679 --> 00:28:09,870
the idea of substance was something else

541
00:28:09,870 --> 00:28:12,150
that came up a lot so when we say

542
00:28:12,150 --> 00:28:14,850
substance what we mean is what exactly

543
00:28:14,850 --> 00:28:17,880
are people saying or doing while

544
00:28:17,880 --> 00:28:21,450
reviewing it's fine if everybody reviews

545
00:28:21,450 --> 00:28:23,820
and is reviewed equally but what they're

546
00:28:23,820 --> 00:28:26,130
saying and how they're saying those

547
00:28:26,130 --> 00:28:32,910
things really matters so one developer

548
00:28:32,910 --> 00:28:36,470
answered her survey and they said this

549
00:28:36,470 --> 00:28:39,960
if I ever find myself going back and

550
00:28:39,960 --> 00:28:42,630
forth on something in comments on a pull

551
00:28:42,630 --> 00:28:43,510
request

552
00:28:43,510 --> 00:28:45,820
I'll ping the other person and ask them

553
00:28:45,820 --> 00:28:49,060
to pair sometimes it's just really hard

554
00:28:49,060 --> 00:28:53,860
to talk to someone another developer

555
00:28:53,860 --> 00:28:57,610
wrote this we need to review the code

556
00:28:57,610 --> 00:29:01,240
and not the person we should let tools

557
00:29:01,240 --> 00:29:04,330
handle styling changes for us so that we

558
00:29:04,330 --> 00:29:06,520
as a team don't need to spend time on

559
00:29:06,520 --> 00:29:11,170
this and another developer wrote in and

560
00:29:11,170 --> 00:29:13,690
said that on their team people actually

561
00:29:13,690 --> 00:29:15,820
trolled each other's code in pull

562
00:29:15,820 --> 00:29:18,160
requests and there is no code of conduct

563
00:29:18,160 --> 00:29:20,140
so there was no way to enforce if people

564
00:29:20,140 --> 00:29:21,700
were actually being kind to one another

565
00:29:21,700 --> 00:29:26,920
or not and what was really interesting

566
00:29:26,920 --> 00:29:28,540
was as she read through some of these

567
00:29:28,540 --> 00:29:32,530
comments she just did like a quick find

568
00:29:32,530 --> 00:29:34,870
and file through all of her survey data

569
00:29:34,870 --> 00:29:39,730
and she saw that around 5% of people who

570
00:29:39,730 --> 00:29:42,580
responded actually used the word nitpick

571
00:29:42,580 --> 00:29:45,520
when talking about code reviews they had

572
00:29:45,520 --> 00:29:48,700
such a negative reaction to people

573
00:29:48,700 --> 00:29:51,100
picking on their code and doing it in a

574
00:29:51,100 --> 00:29:55,480
really unkind way so some of the themes

575
00:29:55,480 --> 00:29:58,300
that she took away was that people got

576
00:29:58,300 --> 00:30:01,420
really really frustrated and irritated

577
00:30:01,420 --> 00:30:04,240
when pull requests would turn into lots

578
00:30:04,240 --> 00:30:06,970
and lots of comments and it seemed like

579
00:30:06,970 --> 00:30:08,020
people would rather just have a

580
00:30:08,020 --> 00:30:10,000
conversation with another human rather

581
00:30:10,000 --> 00:30:14,930
than leaving comments on a pull request

582
00:30:14,940 --> 00:30:17,650
the nitpicking thing came up again and

583
00:30:17,650 --> 00:30:20,380
again and it seemed like pull requests

584
00:30:20,380 --> 00:30:23,920
that turned into a free-for-all where

585
00:30:23,920 --> 00:30:27,300
everybody's focusing on style and syntax

586
00:30:27,300 --> 00:30:30,220
was just generally something that was

587
00:30:30,220 --> 00:30:31,990
going to lead to a really negative code

588
00:30:31,990 --> 00:30:34,180
review experience and this was

589
00:30:34,180 --> 00:30:36,310
particularly the case for people who

590
00:30:36,310 --> 00:30:41,740
were more junior or new in the field but

591
00:30:41,740 --> 00:30:45,490
the biggest one was developers who wrote

592
00:30:45,490 --> 00:30:48,850
in anonymously and said all of my

593
00:30:48,850 --> 00:30:50,950
negative experiences with code reviews

594
00:30:50,950 --> 00:30:53,590
have stemmed from situations when

595
00:30:53,590 --> 00:30:56,559
someone has been egotistical and

596
00:30:56,559 --> 00:30:59,080
see empathy whether they were the one

597
00:30:59,080 --> 00:31:01,929
being reviewed or they were the one

598
00:31:01,929 --> 00:31:10,299
doing the reviewing so as Goldilocks

599
00:31:10,299 --> 00:31:13,509
look through all this data she realized

600
00:31:13,509 --> 00:31:16,029
that there was kind of a disconnect

601
00:31:16,029 --> 00:31:18,190
between the theory of code reviews and

602
00:31:18,190 --> 00:31:19,629
what was actually happening in practice

603
00:31:19,629 --> 00:31:24,190
and the disconnect was that nobody was

604
00:31:24,190 --> 00:31:27,940
talking about what was being done in

605
00:31:27,940 --> 00:31:29,889
practice and whether it was actually

606
00:31:29,889 --> 00:31:32,679
working people were going through the

607
00:31:32,679 --> 00:31:34,950
actions and a lot of teams were

608
00:31:34,950 --> 00:31:37,720
implementing code reviews but based on

609
00:31:37,720 --> 00:31:39,820
all of this data from engineers who

610
00:31:39,820 --> 00:31:43,659
worked in all these languages a lot of

611
00:31:43,659 --> 00:31:48,909
people weren't happy with it so there

612
00:31:48,909 --> 00:31:51,340
was this strange disconnect between what

613
00:31:51,340 --> 00:31:53,200
code reviews were meant to be and how

614
00:31:53,200 --> 00:31:54,669
they were actually functioning in the

615
00:31:54,669 --> 00:31:57,309
industry today and the biggest problem

616
00:31:57,309 --> 00:31:59,139
she saw was that nobody was talking

617
00:31:59,139 --> 00:32:01,600
about it she had felt so alone in her

618
00:32:01,600 --> 00:32:03,100
own team that she thought it was just

619
00:32:03,100 --> 00:32:06,369
her but now she realized it wasn't it

620
00:32:06,369 --> 00:32:13,740
was all the people around her too so I

621
00:32:13,740 --> 00:32:15,789
started this talk by saying that this is

622
00:32:15,789 --> 00:32:18,669
a fairy tale and this is modern-day

623
00:32:18,669 --> 00:32:22,749
Goldilocks I haven't been entirely

624
00:32:22,749 --> 00:32:28,470
honest with you because I'm Goldilocks

625
00:32:28,470 --> 00:32:35,679
surprised these days I actually don't

626
00:32:35,679 --> 00:32:37,990
work at either of those two companies I

627
00:32:37,990 --> 00:32:39,909
work at a company called tilde in

628
00:32:39,909 --> 00:32:42,730
Portland and we build a product called

629
00:32:42,730 --> 00:32:46,119
sky life which is a profiler for rails

630
00:32:46,119 --> 00:32:49,269
applications but some of you might know

631
00:32:49,269 --> 00:32:57,639
tilde as the creators of ember and to

632
00:32:57,639 --> 00:32:59,320
tell you the truth since we're being

633
00:32:59,320 --> 00:33:02,740
honest I don't actually know if we've

634
00:33:02,740 --> 00:33:05,220
got our code review process down I'm

635
00:33:05,220 --> 00:33:07,210
sure there are things about it that are

636
00:33:07,210 --> 00:33:10,570
still problematic

637
00:33:10,580 --> 00:33:13,039
but what I do know is that every single

638
00:33:13,039 --> 00:33:15,440
person on our team feels comfortable

639
00:33:15,440 --> 00:33:18,230
talking about it in fact one of my

640
00:33:18,230 --> 00:33:20,929
colleagues actually submitted an RFC to

641
00:33:20,929 --> 00:33:22,720
totally change our code review process

642
00:33:22,720 --> 00:33:25,640
because they were so frustrated with the

643
00:33:25,640 --> 00:33:26,899
way that I was working they were like we

644
00:33:26,899 --> 00:33:28,610
should do this differently and they

645
00:33:28,610 --> 00:33:30,559
wrote a proposal and everybody in our

646
00:33:30,559 --> 00:33:34,360
company looked at it and reviewed it and

647
00:33:34,360 --> 00:33:36,769
we ended up changing how we did code

648
00:33:36,769 --> 00:33:38,630
reviews and it's something that we still

649
00:33:38,630 --> 00:33:40,970
discuss often whenever it comes up as a

650
00:33:40,970 --> 00:33:47,299
point of contention so based on all of

651
00:33:47,299 --> 00:33:49,820
this research that I collected and all

652
00:33:49,820 --> 00:33:51,139
of the things that I've learned about

653
00:33:51,139 --> 00:33:53,210
code reviews over this past year I

654
00:33:53,210 --> 00:33:55,460
wanted to share a couple things that

655
00:33:55,460 --> 00:33:57,620
I've learned are small wins that you can

656
00:33:57,620 --> 00:33:59,720
do that you can take back to your team

657
00:33:59,720 --> 00:34:03,799
and a couple big ones too so let's start

658
00:34:03,799 --> 00:34:09,050
with a small stuff first a really easy

659
00:34:09,050 --> 00:34:11,030
way to make your code review process

660
00:34:11,030 --> 00:34:14,629
better is by using commit hooks so I

661
00:34:14,629 --> 00:34:16,010
recently learned about something called

662
00:34:16,010 --> 00:34:18,440
Huskie which I haven't actually used but

663
00:34:18,440 --> 00:34:20,750
I've heard good things about which

664
00:34:20,750 --> 00:34:22,460
allows you to basically create commit

665
00:34:22,460 --> 00:34:24,830
hooks so that things like running tests

666
00:34:24,830 --> 00:34:27,290
or linters or anything that needs to

667
00:34:27,290 --> 00:34:28,780
happen before creating a pull request

668
00:34:28,780 --> 00:34:31,399
even before making the plural requests

669
00:34:31,399 --> 00:34:33,560
before you commit you can make sure all

670
00:34:33,560 --> 00:34:35,270
of those little things are taken care of

671
00:34:35,270 --> 00:34:37,580
so that you never have a pull request

672
00:34:37,580 --> 00:34:40,129
that devolves into comments about how

673
00:34:40,129 --> 00:34:41,690
something didn't happen that should have

674
00:34:41,690 --> 00:34:43,369
happened before the pull request was

675
00:34:43,369 --> 00:34:48,740
made another small win github has an

676
00:34:48,740 --> 00:34:50,480
amazing feature where you can actually

677
00:34:50,480 --> 00:34:54,649
create PR templates so here's our PR

678
00:34:54,649 --> 00:34:59,660
template that we use and sidenote

679
00:34:59,660 --> 00:35:02,089
awesome full request is a terrible name

680
00:35:02,089 --> 00:35:03,109
don't have our name your pull request

681
00:35:03,109 --> 00:35:05,869
that there's no context in that but

682
00:35:05,869 --> 00:35:08,030
basically all of the things that we

683
00:35:08,030 --> 00:35:10,130
expect every single pull request to have

684
00:35:10,130 --> 00:35:12,589
we create that and add it as part of the

685
00:35:12,589 --> 00:35:15,890
template my favorite thing about our

686
00:35:15,890 --> 00:35:19,160
template is the section that says this

687
00:35:19,160 --> 00:35:21,650
pull request is required before you can

688
00:35:21,650 --> 00:35:23,569
merge it the authors have to be proud of

689
00:35:23,569 --> 00:35:24,060
it

690
00:35:24,060 --> 00:35:25,370
which i think is really important

691
00:35:25,370 --> 00:35:28,020
acknowledging the positive things in a

692
00:35:28,020 --> 00:35:29,760
code review and in the code that's being

693
00:35:29,760 --> 00:35:32,970
added not just the things that you know

694
00:35:32,970 --> 00:35:36,820
could use some constructive criticism

695
00:35:36,830 --> 00:35:39,630
another great thing is using screenshots

696
00:35:39,630 --> 00:35:44,040
or gifs if you give your colleagues

697
00:35:44,040 --> 00:35:47,280
context of what's happening in your pull

698
00:35:47,280 --> 00:35:49,160
request whether it's fixing a bug or

699
00:35:49,160 --> 00:35:51,840
adding a new feature they're less likely

700
00:35:51,840 --> 00:35:54,120
to look like confused puppies when

701
00:35:54,120 --> 00:35:56,250
they're looking at your code because

702
00:35:56,250 --> 00:35:57,870
you've given them all the context that

703
00:35:57,870 --> 00:36:04,980
they need linters

704
00:36:04,990 --> 00:36:08,550
you should just use them they're awesome

705
00:36:08,550 --> 00:36:12,130
and you will never have a discussion

706
00:36:12,130 --> 00:36:15,640
about what syntax your team wants in a

707
00:36:15,640 --> 00:36:17,560
pull request because you've already

708
00:36:17,560 --> 00:36:20,380
agreed upon what linter styles and what

709
00:36:20,380 --> 00:36:23,110
you want to adopt and not use ahead of

710
00:36:23,110 --> 00:36:24,970
time so nobody ever needs to feel

711
00:36:24,970 --> 00:36:27,610
nitpicked and your code review process

712
00:36:27,610 --> 00:36:31,420
can actually focus on larger things that

713
00:36:31,420 --> 00:36:33,250
don't involve things that could be fixed

714
00:36:33,250 --> 00:36:37,410
with a linter another great thing is

715
00:36:37,410 --> 00:36:40,080
encapsulating pull requests into smaller

716
00:36:40,080 --> 00:36:45,850
bite-sized things I like to think of how

717
00:36:45,850 --> 00:36:48,160
we're always talking about encapsulating

718
00:36:48,160 --> 00:36:50,380
code into like little you know packages

719
00:36:50,380 --> 00:36:53,980
that are like small contained don't

720
00:36:53,980 --> 00:36:55,420
necessarily lean on a lot of other

721
00:36:55,420 --> 00:36:58,540
things in a similar way if you make a

722
00:36:58,540 --> 00:37:00,460
pull request that is encapsulated and

723
00:37:00,460 --> 00:37:03,369
provides context it's a lot easier for

724
00:37:03,369 --> 00:37:05,260
people to look at this isolated thing

725
00:37:05,260 --> 00:37:08,350
and then the barrier to entry for

726
00:37:08,350 --> 00:37:10,090
reviewing your pull request is a lot

727
00:37:10,090 --> 00:37:12,369
lower people are gonna be less likely to

728
00:37:12,369 --> 00:37:14,560
wait until the end of the day because

729
00:37:14,560 --> 00:37:17,560
it's an encapsulated small pull request

730
00:37:17,560 --> 00:37:20,260
with obvious commits and it's a lot

731
00:37:20,260 --> 00:37:21,820
clearer for someone to see what you're

732
00:37:21,820 --> 00:37:27,670
trying to do if you have a team that

733
00:37:27,670 --> 00:37:30,400
this actually can work for having

734
00:37:30,400 --> 00:37:32,790
specific reviewers can be really awesome

735
00:37:32,790 --> 00:37:35,560
so if you have specific reviewers you

736
00:37:35,560 --> 00:37:37,750
can ensure that everybody on the team is

737
00:37:37,750 --> 00:37:40,630
actually getting reviewed and is being

738
00:37:40,630 --> 00:37:43,030
reviewed equally and it helps distribute

739
00:37:43,030 --> 00:37:45,070
the workloads so that it's never just

740
00:37:45,070 --> 00:37:46,800
one or two people reviewing code

741
00:37:46,800 --> 00:37:49,210
everybody is taking that on and it

742
00:37:49,210 --> 00:37:51,880
really helps the idea of collective

743
00:37:51,880 --> 00:37:58,710
ownership of a codebase so big ones a

744
00:37:58,710 --> 00:38:00,730
lot of little things you can do but

745
00:38:00,730 --> 00:38:03,609
these take a little bit more time but in

746
00:38:03,609 --> 00:38:09,430
my opinion they're really worth it so in

747
00:38:09,430 --> 00:38:12,910
reviewing everyone equally part of that

748
00:38:12,910 --> 00:38:15,040
is pushing for a larger culture on your

749
00:38:15,040 --> 00:38:17,440
team we're gonna bill 'ti is actually

750
00:38:17,440 --> 00:38:18,210
valued

751
00:38:18,210 --> 00:38:21,090
this is hard to do because it involves

752
00:38:21,090 --> 00:38:23,860
changing the languages you use in pull

753
00:38:23,860 --> 00:38:26,290
requests and in you know even in

754
00:38:26,290 --> 00:38:28,270
conversations about code and slack or

755
00:38:28,270 --> 00:38:30,460
something like that it involves changing

756
00:38:30,460 --> 00:38:32,200
how you talk to each other on the team

757
00:38:32,200 --> 00:38:36,400
and perhaps that it involves refocusing

758
00:38:36,400 --> 00:38:38,470
on reviewing a person to reviewing the

759
00:38:38,470 --> 00:38:40,780
code which can be hard to do and takes

760
00:38:40,780 --> 00:38:43,900
time but it's really worth it and can

761
00:38:43,900 --> 00:38:46,480
totally change the dynamic for everybody

762
00:38:46,480 --> 00:38:51,680
on the team regardless of skill level

763
00:38:51,690 --> 00:38:55,720
developing empathy so you saw an example

764
00:38:55,720 --> 00:39:00,970
of this in our RP our template but

765
00:39:00,970 --> 00:39:02,980
making a habit of calling out the good

766
00:39:02,980 --> 00:39:06,670
stuff in a code review is super

767
00:39:06,670 --> 00:39:09,940
important a lot of the times people feel

768
00:39:09,940 --> 00:39:11,590
that code reviews are just really

769
00:39:11,590 --> 00:39:13,840
negative and that you're putting

770
00:39:13,840 --> 00:39:15,700
yourself out there to be vulnerable that

771
00:39:15,700 --> 00:39:17,500
people are gonna jump on and attack all

772
00:39:17,500 --> 00:39:19,930
the things you did but if you changed

773
00:39:19,930 --> 00:39:23,170
the paradigm of your code review flow so

774
00:39:23,170 --> 00:39:25,990
that people are also equally calling out

775
00:39:25,990 --> 00:39:27,910
all the awesome things that someone did

776
00:39:27,910 --> 00:39:30,760
they're gonna feel more confident in

777
00:39:30,760 --> 00:39:33,840
being vulnerable with their team mates

778
00:39:33,840 --> 00:39:40,120
again hard to do but worth it this one

779
00:39:40,120 --> 00:39:44,920
was the most important iterate it's so

780
00:39:44,920 --> 00:39:47,080
important I'll say it again it's her

781
00:39:47,080 --> 00:39:51,400
rate and what I mean by this is start a

782
00:39:51,400 --> 00:39:53,380
conversation if you feel like your code

783
00:39:53,380 --> 00:39:55,900
review flow isn't working well and if

784
00:39:55,900 --> 00:39:57,970
it's not working well after six months

785
00:39:57,970 --> 00:40:01,570
or things are going maybe not as

786
00:40:01,570 --> 00:40:02,860
smoothly as you'd like have a

787
00:40:02,860 --> 00:40:04,990
conversation about it again maybe

788
00:40:04,990 --> 00:40:06,670
introduce a process where someone can

789
00:40:06,670 --> 00:40:09,850
write an RFC or someone can anonymously

790
00:40:09,850 --> 00:40:12,580
send a message in slack about something

791
00:40:12,580 --> 00:40:14,410
that might not be working for them in

792
00:40:14,410 --> 00:40:16,960
the code review process or discuss it in

793
00:40:16,960 --> 00:40:20,170
your retros if you have them the most

794
00:40:20,170 --> 00:40:22,630
important thing you can do and the thing

795
00:40:22,630 --> 00:40:23,950
that I hope all of you will take away

796
00:40:23,950 --> 00:40:26,230
from this talk is to have a conversation

797
00:40:26,230 --> 00:40:29,410
about whether your code review process

798
00:40:29,410 --> 00:40:31,480
is actually working

799
00:40:31,480 --> 00:40:34,810
I hope you'll reflect on whether your

800
00:40:34,810 --> 00:40:37,300
quality gates are actually of good

801
00:40:37,300 --> 00:40:39,780
quality because if I've learned anything

802
00:40:39,780 --> 00:40:42,760
in researching and talking to other

803
00:40:42,760 --> 00:40:46,090
developers about code reviews it's that

804
00:40:46,090 --> 00:40:49,450
a lot of us are unhappy and we're just

805
00:40:49,450 --> 00:40:52,080
not talking about it hopefully we will

806
00:40:52,080 --> 00:40:57,550
and I think this quote which somebody

807
00:40:57,550 --> 00:40:59,950
wrote in to the survey really summarizes

808
00:40:59,950 --> 00:41:02,100
it better than I ever could

809
00:41:02,100 --> 00:41:05,710
they said I love code reviews in theory

810
00:41:05,710 --> 00:41:10,750
in practice they are only as good as the

811
00:41:10,750 --> 00:41:13,630
group that's responsible for conducting

812
00:41:13,630 --> 00:41:18,910
them in the right manner the hard stuff

813
00:41:18,910 --> 00:41:22,540
about code isn't the code it's the

814
00:41:22,540 --> 00:41:25,660
people who write the code and code

815
00:41:25,660 --> 00:41:27,400
reviews are kind of the intersect

816
00:41:27,400 --> 00:41:30,430
intersection of the humans who write the

817
00:41:30,430 --> 00:41:33,760
code and the code that they write we

818
00:41:33,760 --> 00:41:35,670
could all do a little bit better job of

819
00:41:35,670 --> 00:41:39,670
making sure that we respect the humans

820
00:41:39,670 --> 00:41:41,680
that are involved in making software

821
00:41:41,680 --> 00:41:47,020
that we all consume and use so if you

822
00:41:47,020 --> 00:41:48,220
are interested in learning more about

823
00:41:48,220 --> 00:41:50,590
code reviews or if you'd like to

824
00:41:50,590 --> 00:41:52,780
contribute to the survey you can go to

825
00:41:52,780 --> 00:41:55,630
better code reviews and there's also a

826
00:41:55,630 --> 00:41:58,390
much longer in-depth written version of

827
00:41:58,390 --> 00:42:00,970
this talk that you can go to and fitly

828
00:42:00,970 --> 00:42:05,080
better code reviews and thank you so

829
00:42:05,080 --> 00:42:06,760
very much for your time you've been an

