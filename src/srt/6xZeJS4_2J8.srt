1
00:00:13,929 --> 00:00:17,510

hi everybody I just like to say as we

2
00:00:17,510 --> 00:00:19,189
start you haven't really given a talk at

3
00:00:19,189 --> 00:00:20,419
a tech conference until you've had a

4
00:00:20,419 --> 00:00:23,020
kernel panic setting up your displays

5
00:00:23,020 --> 00:00:25,640
well yeah anyway we're from pebble we're

6
00:00:25,640 --> 00:00:26,779
here today to talk about the pebble

7
00:00:26,779 --> 00:00:30,140
timeline I'm Charlie McConnell and I'm

8
00:00:30,140 --> 00:00:32,390
lands Vic and we're a retired magician

9
00:00:32,390 --> 00:00:34,730
retired actor and we've been playing

10
00:00:34,730 --> 00:00:36,410
with linux stuff for a long time and now

11
00:00:36,410 --> 00:00:38,120
we do that professionally we are the

12
00:00:38,120 --> 00:00:39,800
resident linux weirdos on the pebble dev

13
00:00:39,800 --> 00:00:44,600
ops team yep so pebble first of all by a

14
00:00:44,600 --> 00:00:45,799
show of hands how many of you are

15
00:00:45,799 --> 00:00:48,350
already familiar with double suite how

16
00:00:48,350 --> 00:00:51,199
many of you actually have a pebble also

17
00:00:51,199 --> 00:00:53,540
sweet all right so for anyone not

18
00:00:53,540 --> 00:00:55,820
already familiar what is pebble we make

19
00:00:55,820 --> 00:00:59,809
watches the core mission of pebble is to

20
00:00:59,809 --> 00:01:01,940
just make a damn good watch I'm directly

21
00:01:01,940 --> 00:01:04,489
quoting the CEO when I say that so since

22
00:01:04,489 --> 00:01:06,740
it's 2015 these watches are pretty smart

23
00:01:06,740 --> 00:01:09,320
I'm told some people have gone as far as

24
00:01:09,320 --> 00:01:13,820
to call them smart watches all right so

25
00:01:13,820 --> 00:01:16,399
the original pebble in 2012 was a

26
00:01:16,399 --> 00:01:18,649
started out as a Kickstarter project it

27
00:01:18,649 --> 00:01:21,079
got a whole lot more interest than

28
00:01:21,079 --> 00:01:23,270
anyone actually expected and at the time

29
00:01:23,270 --> 00:01:25,640
it was a record-breaking more than 10

30
00:01:25,640 --> 00:01:29,060
million dollar Kickstarter this this is

31
00:01:29,060 --> 00:01:30,619
a picture of the Kickstarter from the

32
00:01:30,619 --> 00:01:32,570
first pebble as you can see it's it's a

33
00:01:32,570 --> 00:01:34,820
very simple watch it's black and white

34
00:01:34,820 --> 00:01:36,920
screen all plastic just a really simple

35
00:01:36,920 --> 00:01:39,560
device but a ton of interest at the 10.2

36
00:01:39,560 --> 00:01:41,090
million dollars in kickstarter backing

37
00:01:41,090 --> 00:01:42,950
for a long time we were the record

38
00:01:42,950 --> 00:01:46,210
holders then i think it was 2013

39
00:01:46,210 --> 00:01:48,229
somebody made a really cool looking

40
00:01:48,229 --> 00:01:50,929
cooler and this this beat the original

41
00:01:50,929 --> 00:01:53,149
pebble now i'm not really i don't really

42
00:01:53,149 --> 00:01:54,679
know much about this cooler but it looks

43
00:01:54,679 --> 00:01:56,840
kind of awesome oh that guy i hope lots

44
00:01:56,840 --> 00:01:57,889
of people are having fun with their

45
00:01:57,889 --> 00:02:01,130
margaritas and their coolers but uh you

46
00:02:01,130 --> 00:02:02,630
know fast forward a couple of years and

47
00:02:02,630 --> 00:02:04,460
then this year a few months ago we

48
00:02:04,460 --> 00:02:06,799
released pebble released their newer

49
00:02:06,799 --> 00:02:08,780
announced their new watch the pebble

50
00:02:08,780 --> 00:02:11,330
time on kickstarter this is a revamp

51
00:02:11,330 --> 00:02:14,180
design we've got a color display we've

52
00:02:14,180 --> 00:02:15,770
also got added a microphone for voice

53
00:02:15,770 --> 00:02:19,280
capabilities and this you know we did a

54
00:02:19,280 --> 00:02:21,440
little bit better this time I hear we

55
00:02:21,440 --> 00:02:22,910
gave Kickstarter a couple of bad days

56
00:02:22,910 --> 00:02:25,050
sorry about that

57
00:02:25,050 --> 00:02:27,730
but yeah so why would I want to pebble

58
00:02:27,730 --> 00:02:29,410
for starters the thing that I like about

59
00:02:29,410 --> 00:02:31,060
it best actually being kind of a

60
00:02:31,060 --> 00:02:32,650
curmudgeon about technology is that it

61
00:02:32,650 --> 00:02:35,020
is always accurate the time is synced

62
00:02:35,020 --> 00:02:36,700
via its connection to your mobile device

63
00:02:36,700 --> 00:02:38,650
so it's literally the most accurate

64
00:02:38,650 --> 00:02:40,930
watch I've ever owned it's also got an

65
00:02:40,930 --> 00:02:42,640
always-on screen which is what they

66
00:02:42,640 --> 00:02:44,590
would call an e-paper display the idea

67
00:02:44,590 --> 00:02:46,060
with this is that it reflects light

68
00:02:46,060 --> 00:02:47,620
instead of emitting light so it's big

69
00:02:47,620 --> 00:02:49,420
power savings and it's often times

70
00:02:49,420 --> 00:02:51,760
easier to see in sunlight because of

71
00:02:51,760 --> 00:02:53,260
this and other things you'll get up to a

72
00:02:53,260 --> 00:02:54,790
week of battery life now that this is

73
00:02:54,790 --> 00:02:56,770
dependent on how many active like button

74
00:02:56,770 --> 00:02:57,940
pressing games you're playing on your

75
00:02:57,940 --> 00:02:59,260
watch obviously but you'll get up to a

76
00:02:59,260 --> 00:03:01,390
week of battery life and there are tons

77
00:03:01,390 --> 00:03:02,920
of cool apps cool watch faces

78
00:03:02,920 --> 00:03:04,660
integrations with companies all sorts of

79
00:03:04,660 --> 00:03:09,400
stuff like this so what it isn't is you

80
00:03:09,400 --> 00:03:11,110
know the pebble is a relatively simple

81
00:03:11,110 --> 00:03:13,090
device it's not a heart or health

82
00:03:13,090 --> 00:03:15,730
monitor it is not a payment system it is

83
00:03:15,730 --> 00:03:18,490
not a smartphone on your wrist it is not

84
00:03:18,490 --> 00:03:21,730
a new pile of virtual distractions or in

85
00:03:21,730 --> 00:03:24,430
other words and overpriced trophy watch

86
00:03:24,430 --> 00:03:30,160
was not on our to-do list so yeah along

87
00:03:30,160 --> 00:03:31,750
with the pebble time we've come out with

88
00:03:31,750 --> 00:03:34,600
a new idea for an operating system for

89
00:03:34,600 --> 00:03:36,930
the watch this is the pebble timeline

90
00:03:36,930 --> 00:03:39,430
the whole idea when you think about an

91
00:03:39,430 --> 00:03:41,530
operating system what you want is to

92
00:03:41,530 --> 00:03:42,910
have something where the information

93
00:03:42,910 --> 00:03:44,050
that you really want the information

94
00:03:44,050 --> 00:03:45,700
that you're really after is very readily

95
00:03:45,700 --> 00:03:48,310
accessible for you and in the case of a

96
00:03:48,310 --> 00:03:51,310
watch what you care about is time so

97
00:03:51,310 --> 00:03:53,350
what this gives you is the the basic

98
00:03:53,350 --> 00:03:55,510
like the the most basic service

99
00:03:55,510 --> 00:03:57,160
interface for this operating system is

100
00:03:57,160 --> 00:03:59,320
just the timeline you can hit one button

101
00:03:59,320 --> 00:04:00,850
to get to your recent past and another

102
00:04:00,850 --> 00:04:01,959
button to get to your recent future

103
00:04:01,959 --> 00:04:06,040
upcoming events so yeah an interface for

104
00:04:06,040 --> 00:04:07,750
upcoming and past life events it's

105
00:04:07,750 --> 00:04:10,030
designed to be really simple and to save

106
00:04:10,030 --> 00:04:11,739
you time as opposed to being another

107
00:04:11,739 --> 00:04:12,850
thing that you're taking out of your

108
00:04:12,850 --> 00:04:14,230
pocket to press buttons with and stuff

109
00:04:14,230 --> 00:04:17,520
like that each event is called a pin it

110
00:04:17,520 --> 00:04:20,350
can be easily created by our API is all

111
00:04:20,350 --> 00:04:21,760
of these things are just JSON objects

112
00:04:21,760 --> 00:04:24,460
and for starters without you having to

113
00:04:24,460 --> 00:04:26,440
do anything your phone's calendar app is

114
00:04:26,440 --> 00:04:29,760
automatically synced with your timeline

115
00:04:29,760 --> 00:04:32,979
so what can I use it for we're sitting

116
00:04:32,979 --> 00:04:34,840
here at a conference there's talks going

117
00:04:34,840 --> 00:04:36,789
on all day left right and sideways let's

118
00:04:36,789 --> 00:04:38,129
put the talk schedule

119
00:04:38,129 --> 00:04:42,190
Lance yeah so let's let's try to do that

120
00:04:42,190 --> 00:04:44,860
um so to get started with the timeline

121
00:04:44,860 --> 00:04:48,039
API you have a couple things get a

122
00:04:48,039 --> 00:04:51,129
script which is actually using a pebble

123
00:04:51,129 --> 00:04:52,840
API to post pains this is just a nodejs

124
00:04:52,840 --> 00:04:56,169
module you can grab off NPM and a small

125
00:04:56,169 --> 00:04:57,849
watch app to handle the sinking of those

126
00:04:57,849 --> 00:05:00,159
pins that's that's really it so let's

127
00:05:00,159 --> 00:05:04,690
take a look at an example here is the no

128
00:05:04,690 --> 00:05:07,750
Jess library peple API node and you can

129
00:05:07,750 --> 00:05:10,060
create pins send a pin to a user pretty

130
00:05:10,060 --> 00:05:12,250
straightforward so let's go look at an

131
00:05:12,250 --> 00:05:14,110
example we get this J Escom 2015

132
00:05:14,110 --> 00:05:16,090
schedule there's no read me because I

133
00:05:16,090 --> 00:05:18,159
did this like 3am last night or

134
00:05:18,159 --> 00:05:22,180
something but we got a year so you've

135
00:05:22,180 --> 00:05:23,710
got to populate dodge yes this is the

136
00:05:23,710 --> 00:05:25,180
bit that actually matters and it is very

137
00:05:25,180 --> 00:05:28,360
quick to put together and hurry you've

138
00:05:28,360 --> 00:05:30,550
got all sorts of stuff here at the top

139
00:05:30,550 --> 00:05:33,099
which I'll show you this is to get the

140
00:05:33,099 --> 00:05:34,930
schedule it's just parses the GS comp

141
00:05:34,930 --> 00:05:36,580
schedule web page and pulls out all of

142
00:05:36,580 --> 00:05:39,909
the data and whatnot kind of rage roots

143
00:05:39,909 --> 00:05:42,669
and regex here but it does the job lance

144
00:05:42,669 --> 00:05:44,919
has that habit sometimes it's true but

145
00:05:44,919 --> 00:05:46,719
so if you need to make a quick j/s comp

146
00:05:46,719 --> 00:05:48,400
app you can come steal this function and

147
00:05:48,400 --> 00:05:50,289
it does the right thing at least as long

148
00:05:50,289 --> 00:05:51,520
as this change format doesn't change

149
00:05:51,520 --> 00:05:53,259
around but any of it so we skipped down

150
00:05:53,259 --> 00:05:54,729
to the part that it's actually really

151
00:05:54,729 --> 00:05:57,430
relevant here to get scheduled magic it

152
00:05:57,430 --> 00:05:58,750
all to worry about alright we've got a

153
00:05:58,750 --> 00:06:01,810
schedule we come down here for each and

154
00:06:01,810 --> 00:06:04,719
we just have pins you create a pin you

155
00:06:04,719 --> 00:06:08,199
have a topic you have a generic pan

156
00:06:08,199 --> 00:06:10,389
layout to notification it's got a title

157
00:06:10,389 --> 00:06:12,880
that's all you need then you send the

158
00:06:12,880 --> 00:06:14,949
shared pin to the j s compu doesn't 15

159
00:06:14,949 --> 00:06:18,729
schedule topic and you can log it if you

160
00:06:18,729 --> 00:06:21,130
want that's it that's all it takes to

161
00:06:21,130 --> 00:06:22,210
make a basic out the nice thing about

162
00:06:22,210 --> 00:06:23,770
this is that there's no server involved

163
00:06:23,770 --> 00:06:26,469
here you just run this once Oh or run it

164
00:06:26,469 --> 00:06:28,360
periodically if you want to update so

165
00:06:28,360 --> 00:06:29,650
that's your data source up doing the

166
00:06:29,650 --> 00:06:31,659
pins those pans are then posted to our

167
00:06:31,659 --> 00:06:34,000
server and the watches then pull those

168
00:06:34,000 --> 00:06:36,009
pins from our servers and keep in sync

169
00:06:36,009 --> 00:06:43,609
for you so let's jump back

170
00:06:43,619 --> 00:06:45,779
there's actually what that looks like

171
00:06:45,779 --> 00:06:48,339
got a couple things in the timeline

172
00:06:48,339 --> 00:06:51,009
there to show what the next things are

173
00:06:51,009 --> 00:06:53,019
to do so what I looked at to realize oh

174
00:06:53,019 --> 00:06:54,159
hey we have a talk that we're supposed

175
00:06:54,159 --> 00:06:57,849
to be at so we did make it here yeah

176
00:06:57,849 --> 00:07:01,869
thnkx Bibble yeah so very basic we

177
00:07:01,869 --> 00:07:04,179
provide an API we have the no Jess

178
00:07:04,179 --> 00:07:06,339
library you make content and then you

179
00:07:06,339 --> 00:07:09,039
make apps that you know make the watch

180
00:07:09,039 --> 00:07:10,269
gets notified when that content has

181
00:07:10,269 --> 00:07:13,449
changed so pretty straightforward here

182
00:07:13,449 --> 00:07:15,399
you can actually create update delete

183
00:07:15,399 --> 00:07:17,649
pins pins are attached to either topics

184
00:07:17,649 --> 00:07:19,239
or users so you can either attach a pen

185
00:07:19,239 --> 00:07:21,039
directly to a user and that goes to only

186
00:07:21,039 --> 00:07:23,229
their timeline or to a topic which goes

187
00:07:23,229 --> 00:07:25,360
to many users apps subscribe to the

188
00:07:25,360 --> 00:07:28,599
topics the watch passively updates that

189
00:07:28,599 --> 00:07:31,029
and you can notify the user if it's

190
00:07:31,029 --> 00:07:32,499
something that matters right now you

191
00:07:32,499 --> 00:07:34,029
give them a notification else with

192
00:07:34,029 --> 00:07:36,809
something they can just passively check

193
00:07:36,809 --> 00:07:39,249
all right so let's let's go over some of

194
00:07:39,249 --> 00:07:41,229
the tools we've used here it's all

195
00:07:41,229 --> 00:07:43,779
pretty standard stuff we use MongoDB is

196
00:07:43,779 --> 00:07:46,689
our primary data store it's all built-in

197
00:07:46,689 --> 00:07:48,579
nodejs & Co ajs as far as our

198
00:07:48,579 --> 00:07:51,369
application runtimes concerned we've got

199
00:07:51,369 --> 00:07:54,069
red is in place as a cache and to handle

200
00:07:54,069 --> 00:07:56,409
rate limiting for the timeline api's and

201
00:07:56,409 --> 00:07:58,689
the actual notifications are handled by

202
00:07:58,689 --> 00:08:00,249
a pool of workers which are pulling

203
00:08:00,249 --> 00:08:02,919
messages off of amazon SQS no real

204
00:08:02,919 --> 00:08:04,329
rocket science here just good solid

205
00:08:04,329 --> 00:08:07,179
stuff so let's talk about our web

206
00:08:07,179 --> 00:08:08,379
infrastructure let's talk about how

207
00:08:08,379 --> 00:08:09,909
we've actually built and deployed this

208
00:08:09,909 --> 00:08:13,089
whole thing so the the philosophy that

209
00:08:13,089 --> 00:08:15,579
we have is best summed up as version

210
00:08:15,579 --> 00:08:18,399
control the immutable deployments now

211
00:08:18,399 --> 00:08:20,319
what this means is the idea that if

212
00:08:20,319 --> 00:08:21,729
you're making a change to your

213
00:08:21,729 --> 00:08:24,219
infrastructure that is actually even

214
00:08:24,219 --> 00:08:25,419
more something that you should be

215
00:08:25,419 --> 00:08:27,009
tracking in version control compared to

216
00:08:27,009 --> 00:08:29,559
your coat the idea is that if you're

217
00:08:29,559 --> 00:08:31,539
making a change it's getting tracked an

218
00:08:31,539 --> 00:08:32,919
immutable deployment is the idea that

219
00:08:32,919 --> 00:08:34,870
you are deploying and artifacts that is

220
00:08:34,870 --> 00:08:36,579
the result of something is the output of

221
00:08:36,579 --> 00:08:39,339
a program and if you are then going in

222
00:08:39,339 --> 00:08:41,110
there and making manual changes to it

223
00:08:41,110 --> 00:08:43,000
afterwards you're doing it wrong and you

224
00:08:43,000 --> 00:08:44,559
should actually be fixing the program so

225
00:08:44,559 --> 00:08:46,209
that you always have correct state as

226
00:08:46,209 --> 00:08:47,620
the output of something this is the

227
00:08:47,620 --> 00:08:50,259
whole idea of this so version control

228
00:08:50,259 --> 00:08:52,000
deployment let's start there you're

229
00:08:52,000 --> 00:08:53,380
going to deploy you're going to make a

230
00:08:53,380 --> 00:08:56,170
good commit if you're going to alter the

231
00:08:56,170 --> 00:08:56,950
infrastructure

232
00:08:56,950 --> 00:08:58,780
alter the size of a cluster or the size

233
00:08:58,780 --> 00:09:00,280
of an auto scaling group you're going to

234
00:09:00,280 --> 00:09:01,840
make a git commit into the files the

235
00:09:01,840 --> 00:09:04,140
track that information if you have

236
00:09:04,140 --> 00:09:06,430
configuration data environment variables

237
00:09:06,430 --> 00:09:07,900
configuration files however you're

238
00:09:07,900 --> 00:09:09,310
tracking that and you're going to make a

239
00:09:09,310 --> 00:09:10,930
change to it it's really important to

240
00:09:10,930 --> 00:09:13,150
keep it in version control because that

241
00:09:13,150 --> 00:09:15,430
way when someone fat finger is a value

242
00:09:15,430 --> 00:09:16,900
and things are broken all of a sudden

243
00:09:16,900 --> 00:09:18,940
you can be like oh I see what happened

244
00:09:18,940 --> 00:09:20,770
now that thing was mistakenly edited

245
00:09:20,770 --> 00:09:24,850
okay and then it's it's extremely wise

246
00:09:24,850 --> 00:09:27,670
to back this up somewhere we've we

247
00:09:27,670 --> 00:09:30,190
personally use an encrypted s3 storage

248
00:09:30,190 --> 00:09:32,530
for this and the base of our deployment

249
00:09:32,530 --> 00:09:34,390
system is actually available at on

250
00:09:34,390 --> 00:09:39,640
github at pebble / get to play so to

251
00:09:39,640 --> 00:09:41,680
achieve the immutable deployment side of

252
00:09:41,680 --> 00:09:44,560
this we use containers the advantages of

253
00:09:44,560 --> 00:09:46,270
containers is that you get a clean

254
00:09:46,270 --> 00:09:49,600
system slate on every service run you

255
00:09:49,600 --> 00:09:51,580
you know it's it's a like a subdivision

256
00:09:51,580 --> 00:09:53,320
of an operating system so you don't have

257
00:09:53,320 --> 00:09:55,270
things cluttering each other's spaces

258
00:09:55,270 --> 00:09:57,220
they can't see anything else running on

259
00:09:57,220 --> 00:10:00,430
the system you use namespaces to make

260
00:10:00,430 --> 00:10:02,860
sure that everything like the first app

261
00:10:02,860 --> 00:10:04,420
running in a container usually thinks it

262
00:10:04,420 --> 00:10:06,100
speed one and it can't see anything else

263
00:10:06,100 --> 00:10:07,240
if you're doing it right it can't see

264
00:10:07,240 --> 00:10:09,670
anything else on the on the system you

265
00:10:09,670 --> 00:10:11,860
can also use also on Linux these are

266
00:10:11,860 --> 00:10:13,450
built out of namespaces and control

267
00:10:13,450 --> 00:10:14,920
groups which are kernel level features

268
00:10:14,920 --> 00:10:16,240
for keeping things separate from each

269
00:10:16,240 --> 00:10:18,670
other one of the big advantages to this

270
00:10:18,670 --> 00:10:20,650
is if you've ever worked with Python and

271
00:10:20,650 --> 00:10:22,240
used virtual land of you will never have

272
00:10:22,240 --> 00:10:28,060
to do that again so yeah specifically we

273
00:10:28,060 --> 00:10:30,610
are using docker for this as of today

274
00:10:30,610 --> 00:10:32,440
it's the most mature containerisation

275
00:10:32,440 --> 00:10:35,350
solution it allows you to very very

276
00:10:35,350 --> 00:10:37,300
easily create containers from a

277
00:10:37,300 --> 00:10:40,510
blueprint namely a docker file and the

278
00:10:40,510 --> 00:10:42,730
docker file is just think package.json

279
00:10:42,730 --> 00:10:44,650
for servers it's it's a very simple

280
00:10:44,650 --> 00:10:46,240
concept relatively straightforward

281
00:10:46,240 --> 00:10:49,210
configuration file now there's a lot of

282
00:10:49,210 --> 00:10:51,160
really good things about docker as a

283
00:10:51,160 --> 00:10:53,110
really really big really active

284
00:10:53,110 --> 00:10:55,930
ecosystem if you are you know if you

285
00:10:55,930 --> 00:10:57,220
want to experiment with something you

286
00:10:57,220 --> 00:10:59,290
haven't deployed before the odds that

287
00:10:59,290 --> 00:11:00,970
someone else has a ready-made docker

288
00:11:00,970 --> 00:11:03,130
container for it are really high now you

289
00:11:03,130 --> 00:11:04,360
may not want to deploy that straight to

290
00:11:04,360 --> 00:11:05,890
production but if you just need a quick

291
00:11:05,890 --> 00:11:07,360
setup for something it's really great

292
00:11:07,360 --> 00:11:09,370
for that it's also really easy to get

293
00:11:09,370 --> 00:11:10,250
started building your own

294
00:11:10,250 --> 00:11:12,590
containers docker is you know the

295
00:11:12,590 --> 00:11:14,990
dockerfile syntax mostly not rocket

296
00:11:14,990 --> 00:11:16,910
science not too many surprises it's an

297
00:11:16,910 --> 00:11:19,550
easy thing to work with and docker also

298
00:11:19,550 --> 00:11:21,230
gives you really easy interfaces to

299
00:11:21,230 --> 00:11:24,230
things like by default docker containers

300
00:11:24,230 --> 00:11:26,270
use this virtual networking bridge so

301
00:11:26,270 --> 00:11:27,590
that they all have their own virtual IP

302
00:11:27,590 --> 00:11:29,210
addresses and stuff like that setting

303
00:11:29,210 --> 00:11:31,490
that up manually not so much fun dealing

304
00:11:31,490 --> 00:11:33,080
with C group resource limits manually

305
00:11:33,080 --> 00:11:34,700
not really all that much fun with docker

306
00:11:34,700 --> 00:11:36,050
it's just command line options and

307
00:11:36,050 --> 00:11:38,930
everything's pretty easy now as you

308
00:11:38,930 --> 00:11:40,790
might imagine it's not without its it's

309
00:11:40,790 --> 00:11:43,310
not without its hardships and faults the

310
00:11:43,310 --> 00:11:45,620
dockerfile syntax can be kind of quirky

311
00:11:45,620 --> 00:11:47,930
and surprising if you're copying a

312
00:11:47,930 --> 00:11:50,060
directory you can't forget the trailing

313
00:11:50,060 --> 00:11:52,910
slash or you'll have an unreadable file

314
00:11:52,910 --> 00:11:54,290
containing all of the contents of your

315
00:11:54,290 --> 00:11:57,830
directory it's also really really easy

316
00:11:57,830 --> 00:12:00,200
to make really really big docker images

317
00:12:00,200 --> 00:12:02,150
if you're starting your files with from

318
00:12:02,150 --> 00:12:04,040
ubuntu if anyone who is part of your

319
00:12:04,040 --> 00:12:05,690
base image is starting with from ubuntu

320
00:12:05,690 --> 00:12:08,150
you're starting out with a quarter of a

321
00:12:08,150 --> 00:12:11,540
gig on disk and then it's real easy for

322
00:12:11,540 --> 00:12:13,190
apps to get way bigger than that we have

323
00:12:13,190 --> 00:12:14,810
a couple of things that are over a gig

324
00:12:14,810 --> 00:12:17,260
and it's really kind of surprising

325
00:12:17,260 --> 00:12:19,520
logging also unless you are handling

326
00:12:19,520 --> 00:12:21,620
things yourself out of the box docker

327
00:12:21,620 --> 00:12:24,350
only knows how to pull standard IO out

328
00:12:24,350 --> 00:12:25,910
of these processes and it tends to hang

329
00:12:25,910 --> 00:12:27,830
it around in memory all of a sudden if

330
00:12:27,830 --> 00:12:29,240
you've had a busy process you'll notice

331
00:12:29,240 --> 00:12:31,010
that the host is slow because the doctor

332
00:12:31,010 --> 00:12:32,450
daemon is using like forty percent of

333
00:12:32,450 --> 00:12:33,800
your RAM and not really behaving very

334
00:12:33,800 --> 00:12:37,250
well doctor also it doesn't tend to

335
00:12:37,250 --> 00:12:38,720
clean up after itself when you pull

336
00:12:38,720 --> 00:12:40,610
changes so if you don't pay attention to

337
00:12:40,610 --> 00:12:42,470
it you'll have your disks filling up for

338
00:12:42,470 --> 00:12:45,430
lots of dangling image layers in

339
00:12:45,430 --> 00:12:48,200
addition probably the most important

340
00:12:48,200 --> 00:12:49,670
thing to remember about docker is that

341
00:12:49,670 --> 00:12:51,140
if you are root inside of a container

342
00:12:51,140 --> 00:12:53,570
you are root on the host they do not

343
00:12:53,570 --> 00:12:55,400
have a separate UID space for these

344
00:12:55,400 --> 00:12:58,280
containers so it's super super important

345
00:12:58,280 --> 00:13:00,500
that you drop privileges always there's

346
00:13:00,500 --> 00:13:02,270
lots of advice in the community that you

347
00:13:02,270 --> 00:13:03,560
don't need to worry about this you're in

348
00:13:03,560 --> 00:13:04,760
a container it doesn't work like that

349
00:13:04,760 --> 00:13:06,950
it's not really true it's kind of

350
00:13:06,950 --> 00:13:09,260
dangerous in the sense you absolutely

351
00:13:09,260 --> 00:13:11,900
have to drop privileges and if you're in

352
00:13:11,900 --> 00:13:13,339
a position where the only thing you need

353
00:13:13,339 --> 00:13:15,170
you only need one specific thing that

354
00:13:15,170 --> 00:13:16,730
you might otherwise use sudo for like

355
00:13:16,730 --> 00:13:18,290
binding to port 80 they have these

356
00:13:18,290 --> 00:13:20,959
things called Linux capabilities the one

357
00:13:20,959 --> 00:13:23,089
in particular cap net bind will let you

358
00:13:23,089 --> 00:13:23,450
bind

359
00:13:23,450 --> 00:13:26,270
port 80 there are lots of these further

360
00:13:26,270 --> 00:13:28,280
further investigation here is left as an

361
00:13:28,280 --> 00:13:32,930
exercise to the viewer so yeah after a

362
00:13:32,930 --> 00:13:35,840
pair of slides full of full of hardship

363
00:13:35,840 --> 00:13:37,940
there are there alternatives to docker

364
00:13:37,940 --> 00:13:40,790
well there's a couple the first one the

365
00:13:40,790 --> 00:13:42,290
one that interests me the most is system

366
00:13:42,290 --> 00:13:46,130
DN spawn now systemd made this over the

367
00:13:46,130 --> 00:13:47,300
last over the course of the last few

368
00:13:47,300 --> 00:13:48,860
years they made it pretty quietly

369
00:13:48,860 --> 00:13:51,110
because it was not really intended to be

370
00:13:51,110 --> 00:13:52,760
a like a publicly advertised product

371
00:13:52,760 --> 00:13:54,160
they built it as their test harness

372
00:13:54,160 --> 00:13:56,330
because if you're if you're an init

373
00:13:56,330 --> 00:13:57,830
system you always need to be paid one

374
00:13:57,830 --> 00:14:00,860
make a container all of a sudden they

375
00:14:00,860 --> 00:14:02,030
started to realize this had actually

376
00:14:02,030 --> 00:14:04,220
become pretty solid and as of the last

377
00:14:04,220 --> 00:14:06,200
version they quietly edit the ability to

378
00:14:06,200 --> 00:14:09,050
pull and run docker containers so that's

379
00:14:09,050 --> 00:14:11,300
brand new and it only works on btrfs but

380
00:14:11,300 --> 00:14:12,820
I'm really interested in watching that

381
00:14:12,820 --> 00:14:15,230
there's also a product being made by

382
00:14:15,230 --> 00:14:17,990
core OS called rocket they are trying to

383
00:14:17,990 --> 00:14:19,640
gather lots of people together to create

384
00:14:19,640 --> 00:14:21,740
an application container spec and I'm

385
00:14:21,740 --> 00:14:23,210
very excited about the direction this is

386
00:14:23,210 --> 00:14:25,460
going but they're not as mature as

387
00:14:25,460 --> 00:14:27,230
docker these are in progress things

388
00:14:27,230 --> 00:14:29,150
rocket i think is version 2.5 or

389
00:14:29,150 --> 00:14:31,280
something like that you watch them in

390
00:14:31,280 --> 00:14:35,300
the long run as my personal opinion all

391
00:14:35,300 --> 00:14:37,370
right so you're going to deploy with

392
00:14:37,370 --> 00:14:39,830
docker it's it's it's easy and

393
00:14:39,830 --> 00:14:41,120
convenient because the only thing you

394
00:14:41,120 --> 00:14:42,470
really need on the server is the dr.

395
00:14:42,470 --> 00:14:44,540
Damon the containers themselves will

396
00:14:44,540 --> 00:14:46,490
contain all of the kinds of dependencies

397
00:14:46,490 --> 00:14:47,840
you might need so all you need is

398
00:14:47,840 --> 00:14:49,820
something to run your containers there's

399
00:14:49,820 --> 00:14:51,740
several modern distros that already ship

400
00:14:51,740 --> 00:14:53,390
with sucker Red Hat in particular will

401
00:14:53,390 --> 00:14:55,760
ship with docker however not all of them

402
00:14:55,760 --> 00:14:57,410
actually ship with a recent docker and

403
00:14:57,410 --> 00:15:00,560
so you'll need to pay attention to how

404
00:15:00,560 --> 00:15:02,300
old is if there's any outstanding

405
00:15:02,300 --> 00:15:04,970
security issues things like that I would

406
00:15:04,970 --> 00:15:06,170
say the bottom line though with all of

407
00:15:06,170 --> 00:15:07,850
this you should choose a distribution

408
00:15:07,850 --> 00:15:09,020
that you're already comfortable with

409
00:15:09,020 --> 00:15:11,180
because it's just not going to matter

410
00:15:11,180 --> 00:15:13,010
all that much in the long run if you

411
00:15:13,010 --> 00:15:14,900
spent your whole career using app to get

412
00:15:14,900 --> 00:15:16,610
on a bun to in debian you're going to

413
00:15:16,610 --> 00:15:17,840
have a bad time with red hat because

414
00:15:17,840 --> 00:15:18,890
it's really different in ways that

415
00:15:18,890 --> 00:15:20,780
aren't going to make sense to you so

416
00:15:20,780 --> 00:15:23,750
yeah for us the distro that we've chosen

417
00:15:23,750 --> 00:15:27,650
to use is core OS it is a minimalistic

418
00:15:27,650 --> 00:15:29,690
distro it is designed for containers it

419
00:15:29,690 --> 00:15:31,730
ships with Dochart with the dr. Damon it

420
00:15:31,730 --> 00:15:34,220
is designed as a clustered container

421
00:15:34,220 --> 00:15:37,130
deployment target car OS is also

422
00:15:37,130 --> 00:15:39,380
curated rolling release we get the

423
00:15:39,380 --> 00:15:40,820
latest versions of everything after

424
00:15:40,820 --> 00:15:43,250
they've hit some testing and for us that

425
00:15:43,250 --> 00:15:46,580
means we're on the 403 Colonel I think

426
00:15:46,580 --> 00:15:49,400
we're on dr. 1.62 it's very recent stuff

427
00:15:49,400 --> 00:15:54,170
and so core OS is based on Chrome OS

428
00:15:54,170 --> 00:15:56,660
which is itself based on gentoo so what

429
00:15:56,660 --> 00:15:57,920
we're basically dealing with here is a

430
00:15:57,920 --> 00:16:00,380
source distribution that was curated

431
00:16:00,380 --> 00:16:02,300
than locked gown by Google and then that

432
00:16:02,300 --> 00:16:04,160
was taken and curated and locked down by

433
00:16:04,160 --> 00:16:05,420
the core OS guys and now you have a

434
00:16:05,420 --> 00:16:08,510
server operating system there's a lot of

435
00:16:08,510 --> 00:16:09,590
things that are really good about this

436
00:16:09,590 --> 00:16:11,990
as I said it is ready-made for deploying

437
00:16:11,990 --> 00:16:14,240
with docker you're you're the distance

438
00:16:14,240 --> 00:16:16,940
from 0 to 60 doing this with core OS is

439
00:16:16,940 --> 00:16:19,190
it's just really easy you don't have to

440
00:16:19,190 --> 00:16:21,620
install anything it's also a system d

441
00:16:21,620 --> 00:16:23,900
distribution I have a big fan of system

442
00:16:23,900 --> 00:16:26,990
date systemd adds consistency where none

443
00:16:26,990 --> 00:16:29,420
existed before and the dependency

444
00:16:29,420 --> 00:16:30,740
management that you are able to have

445
00:16:30,740 --> 00:16:32,870
between services and mount points and

446
00:16:32,870 --> 00:16:34,400
parts of the operating system is not

447
00:16:34,400 --> 00:16:36,650
something that you get otherwise unless

448
00:16:36,650 --> 00:16:37,970
you feel like writing a couple thousand

449
00:16:37,970 --> 00:16:39,770
lines of bass yourself which a lot of

450
00:16:39,770 --> 00:16:41,860
people who don't like it appeared to do

451
00:16:41,860 --> 00:16:46,250
core OS also it ships with that CD at CD

452
00:16:46,250 --> 00:16:47,570
if any of you are familiar it is a

453
00:16:47,570 --> 00:16:49,840
strongly consistent key value store it

454
00:16:49,840 --> 00:16:53,180
is it's a lot like Redis except its

455
00:16:53,180 --> 00:16:55,700
emphasis is on consistency as opposed to

456
00:16:55,700 --> 00:16:58,520
high availability in performance it is

457
00:16:58,520 --> 00:17:00,680
it's designed for keeping things safe as

458
00:17:00,680 --> 00:17:04,100
opposed to being a fast cash core OS

459
00:17:04,100 --> 00:17:05,870
also comes with a neat tool called fleet

460
00:17:05,870 --> 00:17:08,569
it is designed as a distributed wrapper

461
00:17:08,569 --> 00:17:11,480
around the the systemd instances that

462
00:17:11,480 --> 00:17:12,620
are running on all the notes in your

463
00:17:12,620 --> 00:17:14,420
cluster there's a lot of really cool

464
00:17:14,420 --> 00:17:16,880
things about fleet as nodes come and go

465
00:17:16,880 --> 00:17:18,589
from the cluster fleet will just say oh

466
00:17:18,589 --> 00:17:20,540
ok I'm this type of note that means I

467
00:17:20,540 --> 00:17:21,949
need these services let me pull those

468
00:17:21,949 --> 00:17:24,079
services from etsy t let me start those

469
00:17:24,079 --> 00:17:25,640
things pull the docker containers from

470
00:17:25,640 --> 00:17:27,560
where they come from and then when

471
00:17:27,560 --> 00:17:29,120
you're you know when your cluster

472
00:17:29,120 --> 00:17:30,410
autoscale in the middle of the night

473
00:17:30,410 --> 00:17:31,580
everything started like it was supposed

474
00:17:31,580 --> 00:17:32,900
to because you've got to distribute it

475
00:17:32,900 --> 00:17:37,310
in its system now there's also core OS

476
00:17:37,310 --> 00:17:39,590
also has a really cool automated rolling

477
00:17:39,590 --> 00:17:41,810
updates feature they actually have this

478
00:17:41,810 --> 00:17:43,670
thing where you've got two separate root

479
00:17:43,670 --> 00:17:45,530
partitions and they'll update one while

480
00:17:45,530 --> 00:17:48,890
the other ones running it's yeah it's

481
00:17:48,890 --> 00:17:50,290
good stuff but

482
00:17:50,290 --> 00:17:52,420
thing about this is that if you leave it

483
00:17:52,420 --> 00:17:54,490
with the default configuration it will

484
00:17:54,490 --> 00:17:57,790
reboot to apply those updates which is

485
00:17:57,790 --> 00:17:59,590
cool and really fast because of that

486
00:17:59,590 --> 00:18:01,210
thing with the two root partitions but I

487
00:18:01,210 --> 00:18:03,010
promise you you don't want this

488
00:18:03,010 --> 00:18:04,690
happening in the middle of the night you

489
00:18:04,690 --> 00:18:06,220
might think you do you don't want this

490
00:18:06,220 --> 00:18:07,150
happening in the middle of the night

491
00:18:07,150 --> 00:18:09,280
luckily it's easy to turn off and the

492
00:18:09,280 --> 00:18:10,750
updates still download you can do it

493
00:18:10,750 --> 00:18:13,540
yourself with one command in addition to

494
00:18:13,540 --> 00:18:16,270
this the current default version of Etsy

495
00:18:16,270 --> 00:18:18,790
d at sea do point for is problematic

496
00:18:18,790 --> 00:18:20,980
they've got a new version it ships with

497
00:18:20,980 --> 00:18:23,560
core OS but it's the binary is named at

498
00:18:23,560 --> 00:18:25,030
CD too because they don't want to be

499
00:18:25,030 --> 00:18:27,520
pulling the rug out from under people at

500
00:18:27,520 --> 00:18:29,650
sea do for is problematic and is

501
00:18:29,650 --> 00:18:31,030
definitely something that you should be

502
00:18:31,030 --> 00:18:33,100
careful about using new deployments

503
00:18:33,100 --> 00:18:35,620
should not go anywhere near it another

504
00:18:35,620 --> 00:18:37,690
another issue is that fleet sounds like

505
00:18:37,690 --> 00:18:39,550
it's really awesome but it's super super

506
00:18:39,550 --> 00:18:42,580
simple and not really a not a complete

507
00:18:42,580 --> 00:18:44,950
deployment system and additionally a

508
00:18:44,950 --> 00:18:46,870
number of the quick easy fixes to these

509
00:18:46,870 --> 00:18:48,700
problems involve subscription services

510
00:18:48,700 --> 00:18:52,840
from core OS which is what it is anyway

511
00:18:52,840 --> 00:18:55,900
back to pebble our deployment pipeline

512
00:18:55,900 --> 00:18:58,000
starts out we have our own we have a

513
00:18:58,000 --> 00:19:00,040
private doctor registry we use that to

514
00:19:00,040 --> 00:19:02,230
build images based on get pushes and to

515
00:19:02,230 --> 00:19:03,730
host the images for us to pull to our

516
00:19:03,730 --> 00:19:06,520
infrastructure we've got a in our

517
00:19:06,520 --> 00:19:08,020
staging in development environments

518
00:19:08,020 --> 00:19:10,810
we've got a web book server docker

519
00:19:10,810 --> 00:19:12,550
registry will give us a web hook for

520
00:19:12,550 --> 00:19:14,140
this when the builds are complete and

521
00:19:14,140 --> 00:19:16,360
then in staging we automatically restart

522
00:19:16,360 --> 00:19:18,520
services in production we're a little

523
00:19:18,520 --> 00:19:19,690
more careful in that and we run

524
00:19:19,690 --> 00:19:21,280
everything off of a custom git repo as

525
00:19:21,280 --> 00:19:22,690
we were talking about before with this

526
00:19:22,690 --> 00:19:25,960
the pebble get deploy and we base

527
00:19:25,960 --> 00:19:28,240
everything on just post receive hooks

528
00:19:28,240 --> 00:19:33,580
and all that so yeah at pebble we are

529
00:19:33,580 --> 00:19:35,050
firm believers in using the right tool

530
00:19:35,050 --> 00:19:37,030
for the job because most of this stuff

531
00:19:37,030 --> 00:19:40,600
is get hooks we are about 90% bash where

532
00:19:40,600 --> 00:19:42,520
the deploy pipeline is concerned we've

533
00:19:42,520 --> 00:19:44,350
also used little bits of go here and

534
00:19:44,350 --> 00:19:46,210
there because with go you can make a

535
00:19:46,210 --> 00:19:48,430
really tiny binary fairly

536
00:19:48,430 --> 00:19:49,600
straightforward language you can make

537
00:19:49,600 --> 00:19:51,940
really really tiny binaries like a five

538
00:19:51,940 --> 00:19:53,650
megabyte docker container and stuff like

539
00:19:53,650 --> 00:19:57,460
that it's pretty cool for us these

540
00:19:57,460 --> 00:19:59,140
docker images are the immutable

541
00:19:59,140 --> 00:20:00,900
deployment artifacts that I talked about

542
00:20:00,900 --> 00:20:03,260
every server every state of it

543
00:20:03,260 --> 00:20:04,940
you stayin of every service should be

544
00:20:04,940 --> 00:20:06,770
the output of the program if it's miss

545
00:20:06,770 --> 00:20:09,340
if it's misconfigured to fix the program

546
00:20:09,340 --> 00:20:11,390
finally a quote from an old friend of

547
00:20:11,390 --> 00:20:15,350
mine redundancy resiliency scale this is

548
00:20:15,350 --> 00:20:17,090
how you this is how you survive

549
00:20:17,090 --> 00:20:19,040
unexpected things you've always make

550
00:20:19,040 --> 00:20:20,390
sure you have backups you make sure that

551
00:20:20,390 --> 00:20:21,920
things can be deployed automatically and

552
00:20:21,920 --> 00:20:24,230
you make sure that if servers suddenly

553
00:20:24,230 --> 00:20:25,880
start exploding there's something that

554
00:20:25,880 --> 00:20:27,290
you can do about it without a ton of

555
00:20:27,290 --> 00:20:31,670
fretting and head-scratching alright so

556
00:20:31,670 --> 00:20:33,800
yeah we're here to solve real world

557
00:20:33,800 --> 00:20:36,530
problems with watches and a lot of these

558
00:20:36,530 --> 00:20:39,740
real problems uh you know what's was

559
00:20:39,740 --> 00:20:41,300
their food around me I'm hungry you know

560
00:20:41,300 --> 00:20:42,440
and I want to be able to see that

561
00:20:42,440 --> 00:20:45,800
quickly at a glance where's my train you

562
00:20:45,800 --> 00:20:46,880
know rather than pulling my phone out

563
00:20:46,880 --> 00:20:48,500
and checking constantly is it here yet

564
00:20:48,500 --> 00:20:50,420
is it going to be here what's going on

565
00:20:50,420 --> 00:20:52,430
or where's my you know driver or

566
00:20:52,430 --> 00:20:55,730
whatever when's my next talk has imaged

567
00:20:55,730 --> 00:20:57,590
with a Jas comp demo you could totally

568
00:20:57,590 --> 00:20:59,870
add those events to your timeline and

569
00:20:59,870 --> 00:21:02,570
actually know in your next talk is it is

570
00:21:02,570 --> 00:21:04,580
the restroom free yet all right I need

571
00:21:04,580 --> 00:21:07,660
to on a show of hands here how many have

572
00:21:07,660 --> 00:21:09,800
really need to use the restroom at your

573
00:21:09,800 --> 00:21:11,960
office and you found out that

574
00:21:11,960 --> 00:21:15,050
everything's full anybody if you honest

575
00:21:15,050 --> 00:21:18,110
people okay all right yeah it's actually

576
00:21:18,110 --> 00:21:19,960
really inconvenient it's a time sink um

577
00:21:19,960 --> 00:21:24,830
in fact I would a that's uh yeah it's

578
00:21:24,830 --> 00:21:27,890
it's very convenient it's probably our

579
00:21:27,890 --> 00:21:31,940
biggest problem as a company so you

580
00:21:31,940 --> 00:21:33,920
think about right so fast growth 180

581
00:21:33,920 --> 00:21:36,470
employees catered lunches right for

582
00:21:36,470 --> 00:21:39,710
toilets um so you know haven't got the

583
00:21:39,710 --> 00:21:41,540
we have to rethink the office situation

584
00:21:41,540 --> 00:21:44,090
obviously but yeah so at the moment it's

585
00:21:44,090 --> 00:21:45,830
it's a problem so you know we have to

586
00:21:45,830 --> 00:21:47,840
solve this problem so a solution for

587
00:21:47,840 --> 00:21:51,920
that a lock state sensor arduino a

588
00:21:51,920 --> 00:21:54,110
nodejs server we emerged javascript

589
00:21:54,110 --> 00:21:59,000
conference right na pebbles so we can

590
00:21:59,000 --> 00:22:01,600
take a look at what that looks like here

591
00:22:01,600 --> 00:22:07,760
so I've got the toilet time repo here so

592
00:22:07,760 --> 00:22:10,610
and actually let's just go through and

593
00:22:10,610 --> 00:22:13,520
see actually read me shows you some of

594
00:22:13,520 --> 00:22:14,660
the things that are going on here you

595
00:22:14,660 --> 00:22:16,490
can play around with let's actually dive

596
00:22:16,490 --> 00:22:17,260
into the code so

597
00:22:17,260 --> 00:22:23,290
three parts to this we've got a locket

598
00:22:23,290 --> 00:22:24,730
clients this is actually some Arduino

599
00:22:24,730 --> 00:22:26,980
code this just shows you that there's a

600
00:22:26,980 --> 00:22:29,460
lock pin there's an LED pen there is

601
00:22:29,460 --> 00:22:33,340
ether nets in this case it's you know

602
00:22:33,340 --> 00:22:36,490
listening on a lock penn state whether

603
00:22:36,490 --> 00:22:39,880
it changes to on or off and it sends a

604
00:22:39,880 --> 00:22:44,950
manual post to a server and you should

605
00:22:44,950 --> 00:22:46,630
actually give you a look look at what

606
00:22:46,630 --> 00:22:50,170
that looks like there yeah something

607
00:22:50,170 --> 00:22:53,890
like that so um I don't know about you

608
00:22:53,890 --> 00:22:55,150
guys I'm pretty sure this is production

609
00:22:55,150 --> 00:22:57,160
ready you know or we're getting a bit

610
00:22:57,160 --> 00:23:00,610
yeah exactly okay we got the the lock

611
00:23:00,610 --> 00:23:02,200
sensor there it goes down to Arduino

612
00:23:02,200 --> 00:23:05,730
update server you know we're good to go

613
00:23:05,730 --> 00:23:10,020
so we go through the posting of JSON

614
00:23:10,020 --> 00:23:13,030
let's go look at the JavaScript so for

615
00:23:13,030 --> 00:23:16,750
the JavaScript we've got got khoa joy

616
00:23:16,750 --> 00:23:18,730
router which is actually an in-house

617
00:23:18,730 --> 00:23:22,000
project to make a nice validated router

618
00:23:22,000 --> 00:23:27,610
for for khoa here we've got a route v1

619
00:23:27,610 --> 00:23:30,730
update it's a post route going a little

620
00:23:30,730 --> 00:23:33,100
more catch the body if there's not

621
00:23:33,100 --> 00:23:36,250
anything and we checked the state's

622
00:23:36,250 --> 00:23:38,830
coming in and the state coming in is

623
00:23:38,830 --> 00:23:42,340
either going to be locked or unlocked we

624
00:23:42,340 --> 00:23:43,750
say if it's either occupied or vacant

625
00:23:43,750 --> 00:23:46,090
based on a 01 that we're receiving and

626
00:23:46,090 --> 00:23:48,580
here's the bit that is again very simple

627
00:23:48,580 --> 00:23:51,400
we're creating a pin and this is just a

628
00:23:51,400 --> 00:23:54,190
generic pin bathroom is either vacant or

629
00:23:54,190 --> 00:23:57,930
occupied and we post it to the timeline

630
00:23:57,930 --> 00:24:00,400
that's really it that's that's that's

631
00:24:00,400 --> 00:24:01,690
all it takes and these three parts work

632
00:24:01,690 --> 00:24:03,760
together and you could actually refactor

633
00:24:03,760 --> 00:24:05,080
this to be something a little different

634
00:24:05,080 --> 00:24:06,460
perhaps you want to know on your

635
00:24:06,460 --> 00:24:08,320
timeline you know what the temperature

636
00:24:08,320 --> 00:24:09,730
is of your very tightly controlled

637
00:24:09,730 --> 00:24:11,380
aquarium at home or anything to get data

638
00:24:11,380 --> 00:24:14,050
from a source at get it to a server and

639
00:24:14,050 --> 00:24:16,540
then project it to as many watches as

640
00:24:16,540 --> 00:24:17,620
people care about that piece of

641
00:24:17,620 --> 00:24:21,760
information so let's just jump back here

642
00:24:21,760 --> 00:24:25,480
and show you that looks like here I've

643
00:24:25,480 --> 00:24:27,910
got a bathroom vacants and it's actually

644
00:24:27,910 --> 00:24:29,620
working right now and I can actually

645
00:24:29,620 --> 00:24:30,730
find out the status

646
00:24:30,730 --> 00:24:33,790
of the Palo Alto bathroom and whether or

647
00:24:33,790 --> 00:24:35,110
not it's free because that's what's

648
00:24:35,110 --> 00:24:37,360
really relevant at the moment I have

649
00:24:37,360 --> 00:24:38,830
never been more disappointed to be a

650
00:24:38,830 --> 00:24:45,250
remote employee yes so yeah that's a fun

651
00:24:45,250 --> 00:24:46,630
demo and hopefully gets you thinking

652
00:24:46,630 --> 00:24:48,040
about the things you can build with

653
00:24:48,040 --> 00:24:51,429
pebble and go grab the node library and

654
00:24:51,429 --> 00:24:59,919
try it out thanks thanks in closing

655
00:24:59,919 --> 00:25:02,440
pebble is hiring like crazy so if you do

656
00:25:02,440 --> 00:25:04,720
any of these things you might have to

657
00:25:04,720 --> 00:25:06,460
squid that right now by all means come

