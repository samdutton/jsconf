1
00:00:06,259 --> 00:00:10,380

all right five minutes for Simon all

2
00:00:10,380 --> 00:00:11,120
right

3
00:00:11,120 --> 00:00:13,440
this animation is called minimum viable

4
00:00:13,440 --> 00:00:15,210
warfare at the bottom we have a base it

5
00:00:15,210 --> 00:00:16,830
can fire a single shot in its defense

6
00:00:16,830 --> 00:00:18,539
raining down from the sky and the stars

7
00:00:18,539 --> 00:00:20,400
their sole intent is to destroy the base

8
00:00:20,400 --> 00:00:22,560
this is it this is the foundation of

9
00:00:22,560 --> 00:00:23,939
some kind of game of simulation but I've

10
00:00:23,939 --> 00:00:25,039
only got five minutes

11
00:00:25,039 --> 00:00:27,570
so let's tweak the parameters here the

12
00:00:27,570 --> 00:00:29,130
scar can fire two missiles at a time to

13
00:00:29,130 --> 00:00:31,289
try and destroy the base this is wings

14
00:00:31,289 --> 00:00:33,300
heavily in the skies favor it's gonna

15
00:00:33,300 --> 00:00:35,130
win quickly every time

16
00:00:35,130 --> 00:00:37,469
so let's tweak again this is more like

17
00:00:37,469 --> 00:00:39,120
it here the bases can fire as many shots

18
00:00:39,120 --> 00:00:40,410
as they want to try and defend

19
00:00:40,410 --> 00:00:41,969
themselves from their missiles raining

20
00:00:41,969 --> 00:00:44,100
down from the sky and impregnable

21
00:00:44,100 --> 00:00:47,910
defense and then it's just a matter of

22
00:00:47,910 --> 00:00:49,590
time but I have not got much time so

23
00:00:49,590 --> 00:00:52,379
let's tweak again full blaze everybody

24
00:00:52,379 --> 00:00:53,969
can fire as many things as they want to

25
00:00:53,969 --> 00:00:55,649
try and defeat their enemy it's amazing

26
00:00:55,649 --> 00:00:57,600
it looks like fireworks but the astute

27
00:00:57,600 --> 00:01:00,090
JavaScript will observe the browser is

28
00:01:00,090 --> 00:01:02,160
starting to Jiang what's the jig is

29
00:01:02,160 --> 00:01:03,899
nearly tweeted 16 and you should own our

30
00:01:03,899 --> 00:01:06,150
water tankers by now tanking is when we

31
00:01:06,150 --> 00:01:07,439
ask the browser to do too many things

32
00:01:07,439 --> 00:01:09,570
and too little time everything gets a

33
00:01:09,570 --> 00:01:11,340
little bit shaky let's see some

34
00:01:11,340 --> 00:01:12,840
Diagnostics there are two things going

35
00:01:12,840 --> 00:01:14,760
on we have an update phase and a paint

36
00:01:14,760 --> 00:01:16,680
phase in the update phase we do all the

37
00:01:16,680 --> 00:01:18,210
mess required to work out where our

38
00:01:18,210 --> 00:01:20,280
things should be on the screen and the

39
00:01:20,280 --> 00:01:21,720
paint waves we draw them to the screen

40
00:01:21,720 --> 00:01:24,450
to achieve smooth animation we need to

41
00:01:24,450 --> 00:01:26,640
do this 60 times a second this gives us

42
00:01:26,640 --> 00:01:28,380
a time budget of approximately 16

43
00:01:28,380 --> 00:01:30,630
milliseconds to do all of our work if we

44
00:01:30,630 --> 00:01:32,520
exceed this time budget the Diagnostics

45
00:01:32,520 --> 00:01:34,890
go red and the browser starts to jam but

46
00:01:34,890 --> 00:01:35,939
not all hope is lost

47
00:01:35,939 --> 00:01:37,650
we're getting nearly 2000 things on the

48
00:01:37,650 --> 00:01:39,869
screen 60 times a second before the

49
00:01:39,869 --> 00:01:41,280
browser even starts the breaker switch

50
00:01:41,280 --> 00:01:43,470
in more detail this is what we're doing

51
00:01:43,470 --> 00:01:45,450
forever and ever we go update painting

52
00:01:45,450 --> 00:01:47,820
this is called the game loop but do not

53
00:01:47,820 --> 00:01:49,530
do it like this because you will burn

54
00:01:49,530 --> 00:01:51,869
out your CPU so instead we use window

55
00:01:51,869 --> 00:01:53,790
don't requestanimationframe here we ask

56
00:01:53,790 --> 00:01:55,350
the rounds of the court us when it's

57
00:01:55,350 --> 00:01:56,909
ready to draw a frame on the screen we

58
00:01:56,909 --> 00:01:59,100
update we paint and the process repeats

59
00:01:59,100 --> 00:02:01,200
in an ideal world the browser will call

60
00:02:01,200 --> 00:02:03,299
us 60 times a second and we will get

61
00:02:03,299 --> 00:02:05,180
smooth animations

62
00:02:05,180 --> 00:02:07,100
we have a set of variables we use to

63
00:02:07,100 --> 00:02:08,840
represent the universe we have created

64
00:02:08,840 --> 00:02:10,250
we update these variables according to

65
00:02:10,250 --> 00:02:11,630
some rules we use the values of the

66
00:02:11,630 --> 00:02:13,280
variables to tell us where the toss up

67
00:02:13,280 --> 00:02:15,080
on the screen with clear I painted

68
00:02:15,080 --> 00:02:17,240
surface we draw stuff to it easy job

69
00:02:17,240 --> 00:02:19,550
done but real life is never easy there's

70
00:02:19,550 --> 00:02:21,620
no guarantee the browser will call us 60

71
00:02:21,620 --> 00:02:22,850
times a second to do there's other

72
00:02:22,850 --> 00:02:24,230
things to do and we are not that

73
00:02:24,230 --> 00:02:25,940
important so we have to work out the

74
00:02:25,940 --> 00:02:27,410
time difference between now and the last

75
00:02:27,410 --> 00:02:29,180
time the browser called us and use that

76
00:02:29,180 --> 00:02:30,800
to create a scaling factor for all of

77
00:02:30,800 --> 00:02:32,150
our physics if we do this right along

78
00:02:32,150 --> 00:02:34,130
the edge cases are covered here we will

79
00:02:34,130 --> 00:02:36,710
get smooth animation when it's time to

80
00:02:36,710 --> 00:02:38,540
draw a mutation our 5 canvas we have an

81
00:02:38,540 --> 00:02:40,250
HTML tag we get a reference to they take

82
00:02:40,250 --> 00:02:41,630
from the Dom we get a drawing context

83
00:02:41,630 --> 00:02:42,920
from that reference we call methods or

84
00:02:42,920 --> 00:02:44,360
make context to draw stuff in your

85
00:02:44,360 --> 00:02:46,510
canvas in your browser on your screen

86
00:02:46,510 --> 00:02:49,580
but to truly understand html5 canvas we

87
00:02:49,580 --> 00:02:51,140
must understand how a computer display

88
00:02:51,140 --> 00:02:53,630
works back when the first Star Wars

89
00:02:53,630 --> 00:02:55,580
movie came out computer displays were

90
00:02:55,580 --> 00:02:56,930
made out of a glass tube when in the

91
00:02:56,930 --> 00:02:58,130
back glass roof was larger rectangular

92
00:02:58,130 --> 00:02:59,780
on the interior surface of a cloud

93
00:02:59,780 --> 00:03:03,340
rectangle was painted a token phosphor

94
00:03:03,340 --> 00:03:05,630
at the rear end of the tube there was an

95
00:03:05,630 --> 00:03:07,100
electron gun it would fire a stream of

96
00:03:07,100 --> 00:03:08,390
electrons down the tube towards the

97
00:03:08,390 --> 00:03:09,560
phosphor coated surface when the

98
00:03:09,560 --> 00:03:10,820
electrons strike the fossil they will

99
00:03:10,820 --> 00:03:12,650
cause it to glow temporarily red around

100
00:03:12,650 --> 00:03:14,390
the stream of electrons was a set of

101
00:03:14,390 --> 00:03:15,800
maintenance these magnets can cause the

102
00:03:15,800 --> 00:03:17,540
beam to be deflected to any location on

103
00:03:17,540 --> 00:03:19,550
the front of the glass tube now if you

104
00:03:19,550 --> 00:03:20,690
have a region of memory and you

105
00:03:20,690 --> 00:03:22,040
sequentially read the values of their

106
00:03:22,040 --> 00:03:23,450
bits from that memory news the bellies

107
00:03:23,450 --> 00:03:24,920
of those fits to modulate the electron

108
00:03:24,920 --> 00:03:26,450
beam on and off this is Canada crossing

109
00:03:26,450 --> 00:03:28,130
down the front of the glass tube you can

110
00:03:28,130 --> 00:03:29,840
go as a representation of Aviles helping

111
00:03:29,840 --> 00:03:31,190
those fists to be painted to the front

112
00:03:31,190 --> 00:03:32,900
of your screen this is how a bitmap

113
00:03:32,900 --> 00:03:35,390
display works we call this a raster scan

114
00:03:35,390 --> 00:03:36,769
display the foundation of all could be

115
00:03:36,769 --> 00:03:38,930
the displays in use today but there is

116
00:03:38,930 --> 00:03:40,850
another way to do it back in the dawn of

117
00:03:40,850 --> 00:03:42,860
continued back in the dawn of computing

118
00:03:42,860 --> 00:03:44,840
history computers a file is powerful you

119
00:03:44,840 --> 00:03:46,370
would implement your display in hardware

120
00:03:46,370 --> 00:03:47,330
you would see the list of foreign

121
00:03:47,330 --> 00:03:48,920
instructions to your display circuitry

122
00:03:48,920 --> 00:03:50,870
these instructions will cause a Lincoln

123
00:03:50,870 --> 00:03:52,489
beam to be deflected around of the front

124
00:03:52,489 --> 00:03:53,510
of the screen much like you would

125
00:03:53,510 --> 00:03:55,010
reliance on a piece of paper with a

126
00:03:55,010 --> 00:03:57,170
pencil this technique is called Victor

127
00:03:57,170 --> 00:03:59,000
display Victor the splicer one amazing

128
00:03:59,000 --> 00:04:00,350
properties simply by multiplying the

129
00:04:00,350 --> 00:04:01,640
intensity of the magnet set the flick

130
00:04:01,640 --> 00:04:02,780
the beam as I scanned it around the

131
00:04:02,780 --> 00:04:04,670
front of the classroom you can cause the

132
00:04:04,670 --> 00:04:06,049
image to be scaled up and down with

133
00:04:06,049 --> 00:04:07,700
incredible ease just for modifying the

134
00:04:07,700 --> 00:04:09,410
value of one is 2 bytes of memory to do

135
00:04:09,410 --> 00:04:10,580
the same thing with a raster scan

136
00:04:10,580 --> 00:04:12,230
display requires of art of convex nest

137
00:04:12,230 --> 00:04:14,209
you have to calculate the position of

138
00:04:14,209 --> 00:04:15,709
every pixel you want to draw on the

139
00:04:15,709 --> 00:04:17,540
screen tragically the technique of

140
00:04:17,540 --> 00:04:18,560
victor displays be

141
00:04:18,560 --> 00:04:21,079
lost to the sands of time but html5

142
00:04:21,079 --> 00:04:22,520
canvas gives us the best of both worlds

143
00:04:22,520 --> 00:04:24,680
we can rotate the scale and translate as

144
00:04:24,680 --> 00:04:26,419
was incredibly safe it Nets around the

145
00:04:26,419 --> 00:04:28,400
screen with abandon and if you look

146
00:04:28,400 --> 00:04:30,530
closely you will see vestigial move two

147
00:04:30,530 --> 00:04:32,120
lines you can I said either your direct

148
00:04:32,120 --> 00:04:33,770
descendants of the original instructions

149
00:04:33,770 --> 00:04:35,690
used to deflect an electron beam around

150
00:04:35,690 --> 00:04:38,419
the front of a glass tube just how much

151
00:04:38,419 --> 00:04:39,770
while the band oh no here you ask

152
00:04:39,770 --> 00:04:41,960
here we try and draw as many shapes as

153
00:04:41,960 --> 00:04:43,310
we can we fill up the screen with shapes

154
00:04:43,310 --> 00:04:45,080
60 times a second before destroying each

155
00:04:45,080 --> 00:04:47,470
type is translated and rotated weakening

156
00:04:47,470 --> 00:04:49,700
2700 shapes on the screen a 5.5

157
00:04:49,700 --> 00:04:51,830
milliseconds if you're trying to do 65 a

158
00:04:51,830 --> 00:04:53,810
second animation you still have 10

159
00:04:53,810 --> 00:04:55,820
milliseconds left every frame to do all

160
00:04:55,820 --> 00:04:58,639
of your math and JavaScript can do a lot

161
00:04:58,639 --> 00:05:07,760
of man in 10 milliseconds thank you with

