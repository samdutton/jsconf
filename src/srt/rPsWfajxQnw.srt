1
00:00:06,370 --> 00:00:08,680

I guess so first off like how many of

2
00:00:08,680 --> 00:00:11,830
you guys have heard about Falcor okay

3
00:00:11,830 --> 00:00:14,019
decent number of you I know some of you

4
00:00:14,019 --> 00:00:15,549
work with me so you've already heard a

5
00:00:15,549 --> 00:00:17,980
lot of what I'm about to say anyway but

6
00:00:17,980 --> 00:00:19,930
yeah so Falkor is actually it's a it's a

7
00:00:19,930 --> 00:00:22,210
new framework this out from netflix it's

8
00:00:22,210 --> 00:00:24,669
designed around a new concept is called

9
00:00:24,669 --> 00:00:26,259
Jason graph which we'll get into in a

10
00:00:26,259 --> 00:00:28,660
moment and it's all it's meant to be a

11
00:00:28,660 --> 00:00:31,300
way to simplify the data that's actually

12
00:00:31,300 --> 00:00:33,610
being sent to your client so whether

13
00:00:33,610 --> 00:00:35,620
that be a mobile phone a tablet a

14
00:00:35,620 --> 00:00:37,989
desktop only requesting the data that

15
00:00:37,989 --> 00:00:40,210
you need is the key component to what

16
00:00:40,210 --> 00:00:43,089
Falkor is really about and being able to

17
00:00:43,089 --> 00:00:45,219
request multiple attributes from

18
00:00:45,219 --> 00:00:47,530
multiple microservices at the same time

19
00:00:47,530 --> 00:00:50,260
so no more like being able to just go to

20
00:00:50,260 --> 00:00:51,940
one endpoint way and do everything

21
00:00:51,940 --> 00:00:54,519
synchronously now through JavaScript

22
00:00:54,519 --> 00:00:56,769
promises you can actually deploy and go

23
00:00:56,769 --> 00:00:59,409
out to multiple microservices at the

24
00:00:59,409 --> 00:01:01,059
same time wait for those payloads to

25
00:01:01,059 --> 00:01:03,010
come back and be able to deliver only

26
00:01:03,010 --> 00:01:04,989
the information that you need to deliver

27
00:01:04,989 --> 00:01:08,890
to your front-end code so just real

28
00:01:08,890 --> 00:01:11,200
quick a little bit about me you can find

29
00:01:11,200 --> 00:01:12,580
me pretty much everywhere on the

30
00:01:12,580 --> 00:01:15,850
internet at DB Sloan and I'm also an

31
00:01:15,850 --> 00:01:20,710
engineer at Laurel and wolf but kind of

32
00:01:20,710 --> 00:01:22,000
going on from there first we got to have

33
00:01:22,000 --> 00:01:23,140
a little bit of a history lesson if

34
00:01:23,140 --> 00:01:24,310
we're going to talk about data we're

35
00:01:24,310 --> 00:01:26,320
going to talk about the way that data is

36
00:01:26,320 --> 00:01:28,630
delivered on the web we've got to go

37
00:01:28,630 --> 00:01:30,670
back a little bit and we got to go talk

38
00:01:30,670 --> 00:01:32,740
about soap api's how many people

39
00:01:32,740 --> 00:01:36,190
remember this it was terrible we hated

40
00:01:36,190 --> 00:01:38,410
it let me look at this like there's so

41
00:01:38,410 --> 00:01:40,990
much code just so much excess about the

42
00:01:40,990 --> 00:01:42,870
way that we need to deliver data like

43
00:01:42,870 --> 00:01:46,000
nobody wants to do this it had a there

44
00:01:46,000 --> 00:01:47,290
are people that will give its valid

45
00:01:47,290 --> 00:01:49,540
reasons and it had a small use case I

46
00:01:49,540 --> 00:01:52,030
hated it so then we moved on we got

47
00:01:52,030 --> 00:01:54,340
Jason API that was like this whole new

48
00:01:54,340 --> 00:01:56,530
revolutionary world about how we can

49
00:01:56,530 --> 00:01:59,020
actually start doing related resources

50
00:01:59,020 --> 00:02:01,660
in relationships and like you can see

51
00:02:01,660 --> 00:02:03,640
from the from this example here like

52
00:02:03,640 --> 00:02:05,440
from set up like everything is

53
00:02:05,440 --> 00:02:08,890
simplified a whole lot now and it's

54
00:02:08,890 --> 00:02:10,750
great you can do I mean you can do

55
00:02:10,750 --> 00:02:12,849
things like sports field sets and a lot

56
00:02:12,849 --> 00:02:14,469
of things that Jason API allows you to

57
00:02:14,469 --> 00:02:17,709
do but you're still going to one single

58
00:02:17,709 --> 00:02:19,960
server to get all the data

59
00:02:19,960 --> 00:02:25,000
and so over time just through watching

60
00:02:25,000 --> 00:02:27,100
some of the videos from the team over at

61
00:02:27,100 --> 00:02:29,830
netflix and talking about Falcor they

62
00:02:29,830 --> 00:02:31,570
started really looking at this paradigm

63
00:02:31,570 --> 00:02:33,820
and really just going okay how can we

64
00:02:33,820 --> 00:02:35,320
make this better like we're delivering

65
00:02:35,320 --> 00:02:37,630
so much extra data that we don't need to

66
00:02:37,630 --> 00:02:40,750
deliver and what if we only if I wanted

67
00:02:40,750 --> 00:02:45,220
to know about a an article and I only

68
00:02:45,220 --> 00:02:47,170
want it like and of course I paired this

69
00:02:47,170 --> 00:02:50,050
one down like I wanted I just wanted a

70
00:02:50,050 --> 00:02:53,500
title like it's pretty you know there's

71
00:02:53,500 --> 00:02:55,420
still so much excess data that you end

72
00:02:55,420 --> 00:02:57,610
up getting because of related resources

73
00:02:57,610 --> 00:03:01,000
in the way that Jason API works so now

74
00:03:01,000 --> 00:03:04,540
let's talk about the future so we move

75
00:03:04,540 --> 00:03:07,240
into Jason graph and the thing that

76
00:03:07,240 --> 00:03:09,070
makes Jason graphs so valuable is the

77
00:03:09,070 --> 00:03:12,670
fact that you can share and I will not

78
00:03:12,670 --> 00:03:16,150
share so you can reference different

79
00:03:16,150 --> 00:03:17,950
objects throughout the graph that's

80
00:03:17,950 --> 00:03:21,490
being delivered back so for example here

81
00:03:21,490 --> 00:03:23,350
with this like if we look at the bottom

82
00:03:23,350 --> 00:03:26,590
here here am I to do's and I see here

83
00:03:26,590 --> 00:03:28,690
that this is a type of reference that

84
00:03:28,690 --> 00:03:32,110
has a value and it says to dues by ID

85
00:03:32,110 --> 00:03:34,930
and it gives us an integer value here of

86
00:03:34,930 --> 00:03:37,330
44 and the same thing is repeated below

87
00:03:37,330 --> 00:03:40,570
as we're looking at an integer value of

88
00:03:40,570 --> 00:03:46,480
54 so now we look back up to our graph

89
00:03:46,480 --> 00:03:48,340
here and we see you to do is by ID and

90
00:03:48,340 --> 00:03:50,410
now we see the actual object graph is

91
00:03:50,410 --> 00:03:52,510
being stored and it's just JavaScript

92
00:03:52,510 --> 00:03:54,220
objects down like that's what we're

93
00:03:54,220 --> 00:03:55,780
talking about with Falkor is just

94
00:03:55,780 --> 00:03:57,370
JavaScript objects we're simplifying

95
00:03:57,370 --> 00:03:59,740
everything we're taking out needing to

96
00:03:59,740 --> 00:04:02,620
go you know relationships and resource

97
00:04:02,620 --> 00:04:05,470
ID and drilling down through the graph

98
00:04:05,470 --> 00:04:08,320
like so drastically now everything is

99
00:04:08,320 --> 00:04:11,530
just passed through x references and so

100
00:04:11,530 --> 00:04:16,210
each time that I want to so imagine for

101
00:04:16,210 --> 00:04:18,450
example like with my two dues here

102
00:04:18,450 --> 00:04:22,840
imagine there was a another field that

103
00:04:22,840 --> 00:04:26,410
was called created act and I needed to

104
00:04:26,410 --> 00:04:28,120
know when the window to do was created

105
00:04:28,120 --> 00:04:31,060
at I can easily make a request that will

106
00:04:31,060 --> 00:04:33,180
only bring back the creative that

107
00:04:33,180 --> 00:04:35,729
it will just append it into this object

108
00:04:35,729 --> 00:04:39,479
here making it very simple so this is

109
00:04:39,479 --> 00:04:41,370
just a quick overview there's a lot of

110
00:04:41,370 --> 00:04:43,979
things that are kind of going on in here

111
00:04:43,979 --> 00:04:46,650
but as we start looking at the way that

112
00:04:46,650 --> 00:04:48,389
the requests and the responses are made

113
00:04:48,389 --> 00:04:51,180
from Falkor it actually becomes much

114
00:04:51,180 --> 00:04:53,100
simpler and you start really getting to

115
00:04:53,100 --> 00:04:56,039
see the power of this and so this is

116
00:04:56,039 --> 00:04:58,110
kind of the client side of things where

117
00:04:58,110 --> 00:04:59,370
we're going to actually build a cash

118
00:04:59,370 --> 00:05:04,770
will Falkor and so you know like it's

119
00:05:04,770 --> 00:05:06,599
just very simple you know we say Falkor

120
00:05:06,599 --> 00:05:09,870
top model and then we give it an object

121
00:05:09,870 --> 00:05:11,639
structure here and the first thing that

122
00:05:11,639 --> 00:05:13,889
we can give it is a data source the data

123
00:05:13,889 --> 00:05:16,470
source actually isn't required we can

124
00:05:16,470 --> 00:05:18,720
actually do Falkor completely just on

125
00:05:18,720 --> 00:05:21,599
the cash and the and using setters and

126
00:05:21,599 --> 00:05:23,520
getters inside of our code and never

127
00:05:23,520 --> 00:05:27,419
touch an external server but in this

128
00:05:27,419 --> 00:05:29,130
particular instance we are going to

129
00:05:29,130 --> 00:05:31,590
define a cache and our cash here we can

130
00:05:31,590 --> 00:05:34,590
see that we have our users and sorry

131
00:05:34,590 --> 00:05:36,599
this doesn't relate to this previous

132
00:05:36,599 --> 00:05:38,340
slide I didn't have time to make all the

133
00:05:38,340 --> 00:05:39,780
data marry up and everything this was

134
00:05:39,780 --> 00:05:41,220
just a quicker code example for me to

135
00:05:41,220 --> 00:05:45,510
put together but so you know we see in

136
00:05:45,510 --> 00:05:47,159
our cash we have our users we have a

137
00:05:47,159 --> 00:05:50,909
user ID of one and we see this new

138
00:05:50,909 --> 00:05:52,530
syntax here that's kind of interesting

139
00:05:52,530 --> 00:05:55,680
is dollar sign rut well what is dollar

140
00:05:55,680 --> 00:05:59,520
sign ref if we go back and we look at

141
00:05:59,520 --> 00:06:01,590
this slide essentially dollar sign ref

142
00:06:01,590 --> 00:06:04,259
is just a foul coarse sugar syntax that

143
00:06:04,259 --> 00:06:06,539
actually just lets us do type ref here

144
00:06:06,539 --> 00:06:10,320
and Jason graph is designed in a way

145
00:06:10,320 --> 00:06:13,440
that when it sees an object and it sees

146
00:06:13,440 --> 00:06:16,380
a type whether it be reference or Adam

147
00:06:16,380 --> 00:06:20,849
or error it knows what to do and sorry

148
00:06:20,849 --> 00:06:22,500
I'm throwing a lot of things out there

149
00:06:22,500 --> 00:06:25,050
very fast this is a massive framework

150
00:06:25,050 --> 00:06:27,030
Netflix has made tons of great

151
00:06:27,030 --> 00:06:29,520
documentation go read it go watch the

152
00:06:29,520 --> 00:06:31,530
videos the videos are fantastic like

153
00:06:31,530 --> 00:06:32,909
there's so much more information you can

154
00:06:32,909 --> 00:06:34,590
gain from this I just really want to

155
00:06:34,590 --> 00:06:36,300
give you guys a high-level overview so

156
00:06:36,300 --> 00:06:37,650
that you can see and understand what

157
00:06:37,650 --> 00:06:40,289
this framework is capable of because you

158
00:06:40,289 --> 00:06:42,120
know so many times when it comes to new

159
00:06:42,120 --> 00:06:44,849
frameworks we don't fully like we're not

160
00:06:44,849 --> 00:06:46,620
fully enticed to be one

161
00:06:46,620 --> 00:06:48,270
go down that route just because well we

162
00:06:48,270 --> 00:06:50,280
have this massive application it's going

163
00:06:50,280 --> 00:06:52,110
to take so much extra engineering effort

164
00:06:52,110 --> 00:06:54,630
to be able to do this well if we can

165
00:06:54,630 --> 00:06:56,940
simplify the way that we evolve the

166
00:06:56,940 --> 00:06:59,430
future of being able to write our code

167
00:06:59,430 --> 00:07:02,400
and receiving the data then you know you

168
00:07:02,400 --> 00:07:05,340
really start to see the power of this so

169
00:07:05,340 --> 00:07:09,360
going back to the next slide here so now

170
00:07:09,360 --> 00:07:10,919
we're looking at so this is just our

171
00:07:10,919 --> 00:07:13,500
cash this is the way that Falkor will

172
00:07:13,500 --> 00:07:18,479
locally store all of our data and so you

173
00:07:18,479 --> 00:07:20,039
know it's it's just very simple

174
00:07:20,039 --> 00:07:22,050
JavaScript objects and that's the beauty

175
00:07:22,050 --> 00:07:24,360
of this is it's just dot notation to be

176
00:07:24,360 --> 00:07:25,949
able to go and find anything that you

177
00:07:25,949 --> 00:07:29,550
want to find so here i can see that i

178
00:07:29,550 --> 00:07:32,190
have a user of zero who has a name and i

179
00:07:32,190 --> 00:07:34,490
have a user of one who has a name now

180
00:07:34,490 --> 00:07:37,530
imagine if i wanted to inside of this

181
00:07:37,530 --> 00:07:40,560
users by ID here and and will do maybe

182
00:07:40,560 --> 00:07:42,210
some examples a little bit later of this

183
00:07:42,210 --> 00:07:45,000
but I could also have a attribute in

184
00:07:45,000 --> 00:07:47,880
here called of friends that's an array

185
00:07:47,880 --> 00:07:51,060
and that array would actually have a

186
00:07:51,060 --> 00:07:54,900
reference to user 1 so now I didn't have

187
00:07:54,900 --> 00:07:56,940
to go request user one because user one

188
00:07:56,940 --> 00:07:59,039
is already in my cash and I know that

189
00:07:59,039 --> 00:08:01,080
because I'm just following reference

190
00:08:01,080 --> 00:08:03,450
links and what Falco would do is when

191
00:08:03,450 --> 00:08:05,849
it's see like imagine now that there's

192
00:08:05,849 --> 00:08:08,370
this imaginary friends list here and I

193
00:08:08,370 --> 00:08:12,150
say user 55 well user 55 isn't in my

194
00:08:12,150 --> 00:08:14,340
cash so it's going to go to my data

195
00:08:14,340 --> 00:08:18,090
source and it's going to go and build a

196
00:08:18,090 --> 00:08:20,820
query that goes out to my server and

197
00:08:20,820 --> 00:08:23,580
it's going to say for user 55 give me

198
00:08:23,580 --> 00:08:25,020
the name because that's all that I

199
00:08:25,020 --> 00:08:32,010
requested so now the other piece of this

200
00:08:32,010 --> 00:08:33,779
that it's really worth understanding is

201
00:08:33,779 --> 00:08:36,900
the router inside a foul core because

202
00:08:36,900 --> 00:08:39,810
this is where we start now dividing and

203
00:08:39,810 --> 00:08:41,310
conquering and that's kind of where the

204
00:08:41,310 --> 00:08:42,659
whole reason of the name from this is

205
00:08:42,659 --> 00:08:45,570
destroy your model if api's is you know

206
00:08:45,570 --> 00:08:48,450
we can have multiple microservices so I

207
00:08:48,450 --> 00:08:50,700
can have one that's going to like so

208
00:08:50,700 --> 00:08:53,279
deliver me users one that's going to

209
00:08:53,279 --> 00:08:55,020
deliver me friends one that's going to

210
00:08:55,020 --> 00:08:59,010
deliver me recommendations like there's

211
00:08:59,010 --> 00:08:59,820
so

212
00:08:59,820 --> 00:09:01,980
different ways in all of the different

213
00:09:01,980 --> 00:09:03,510
companies that I'm sure we're all at

214
00:09:03,510 --> 00:09:06,060
that we can start devaluing are our

215
00:09:06,060 --> 00:09:08,070
object graphs that come back and being

216
00:09:08,070 --> 00:09:11,190
able to really utilize smaller servers

217
00:09:11,190 --> 00:09:13,380
that are more maintainable code so that

218
00:09:13,380 --> 00:09:16,050
we can start really returning massive

219
00:09:16,050 --> 00:09:18,990
object graphs back to the client and so

220
00:09:18,990 --> 00:09:22,260
kind of taking a look here at this we

221
00:09:22,260 --> 00:09:25,170
can see the first thing that is inside

222
00:09:25,170 --> 00:09:28,320
of the Falkor router is we have a route

223
00:09:28,320 --> 00:09:31,920
and we see projects and then the syntax

224
00:09:31,920 --> 00:09:33,960
starts getting really weird and we

225
00:09:33,960 --> 00:09:36,180
probably we don't see this in JavaScript

226
00:09:36,180 --> 00:09:39,210
dot notation and the way that Jason

227
00:09:39,210 --> 00:09:42,600
graph treats dot notation is it also

228
00:09:42,600 --> 00:09:44,070
kind of treats it like a string so that

229
00:09:44,070 --> 00:09:45,960
it can do interpolation and understand

230
00:09:45,960 --> 00:09:48,930
what you're wanting so here we see that

231
00:09:48,930 --> 00:09:51,720
in the middle like we see integers colon

232
00:09:51,720 --> 00:09:54,750
indices well what does that mean well

233
00:09:54,750 --> 00:09:57,000
what that means is i can write a request

234
00:09:57,000 --> 00:10:01,500
that says give me projects 5 through 50

235
00:10:01,500 --> 00:10:03,900
and i only want the titles of those

236
00:10:03,900 --> 00:10:06,420
projects so it's you know instead of

237
00:10:06,420 --> 00:10:08,970
having to write like queries and you

238
00:10:08,970 --> 00:10:11,970
know i mean to do that in json api it's

239
00:10:11,970 --> 00:10:13,530
a single resource so i would have to

240
00:10:13,530 --> 00:10:16,410
make 50 request to get just the title

241
00:10:16,410 --> 00:10:19,290
from 50 records well now I make one

242
00:10:19,290 --> 00:10:21,630
request to get the title for 50 records

243
00:10:21,630 --> 00:10:26,490
and so you know this is kind of some

244
00:10:26,490 --> 00:10:28,350
some code that I pared down from what we

245
00:10:28,350 --> 00:10:31,920
were using before but we see here with

246
00:10:31,920 --> 00:10:34,470
this you know promise also i'm able to

247
00:10:34,470 --> 00:10:37,110
do simultaneous requests to projects to

248
00:10:37,110 --> 00:10:38,970
be able to retrieve that so our back end

249
00:10:38,970 --> 00:10:41,040
is actually consisted of json api so

250
00:10:41,040 --> 00:10:43,140
this example is kind of working

251
00:10:43,140 --> 00:10:46,110
concurrently with json api as well to be

252
00:10:46,110 --> 00:10:50,160
able to return the data that we want but

253
00:10:50,160 --> 00:10:51,660
it just it makes it really simple to

254
00:10:51,660 --> 00:10:55,200
just go to go grab all the data process

255
00:10:55,200 --> 00:10:57,660
it and bring it back and so the next

256
00:10:57,660 --> 00:11:01,620
thing in here that's really worth noting

257
00:11:01,620 --> 00:11:05,010
about this is so we look at the return

258
00:11:05,010 --> 00:11:07,950
value here that's coming back so now we

259
00:11:07,950 --> 00:11:10,260
see another piece of new syntax that we

260
00:11:10,260 --> 00:11:12,690
haven't seen before which is dollar sign

261
00:11:12,690 --> 00:11:13,710
value

262
00:11:13,710 --> 00:11:16,830
and essentially what dollar sign value

263
00:11:16,830 --> 00:11:19,500
is doing is it's going to bring back

264
00:11:19,500 --> 00:11:26,280
this user here and so we define so the

265
00:11:26,280 --> 00:11:28,740
same way that our routes up here define

266
00:11:28,740 --> 00:11:32,160
a project with an ID and the attribute

267
00:11:32,160 --> 00:11:35,690
that I want to bring back down here I

268
00:11:35,690 --> 00:11:39,510
redefine that route and now I'm actually

269
00:11:39,510 --> 00:11:42,390
doing it in an array so i'm going to say

270
00:11:42,390 --> 00:11:45,150
i want so this the data that's coming

271
00:11:45,150 --> 00:11:47,520
back from Falkor is a project with a

272
00:11:47,520 --> 00:11:51,240
project ID that also has a floor plan

273
00:11:51,240 --> 00:11:56,310
and so then now we move on a little bit

274
00:11:56,310 --> 00:11:58,920
further down the line and we see another

275
00:11:58,920 --> 00:12:01,560
new piece of sugar like syntax sugar and

276
00:12:01,560 --> 00:12:04,860
that is dollar sign Adam well dollar

277
00:12:04,860 --> 00:12:09,390
sign Adam is it's another way of kind of

278
00:12:09,390 --> 00:12:15,170
the same way that we see the ref here

279
00:12:15,170 --> 00:12:19,290
the atom will be type Adam and what that

280
00:12:19,290 --> 00:12:23,520
means is the Falkor model will say this

281
00:12:23,520 --> 00:12:26,460
is a literal object that I'm going to

282
00:12:26,460 --> 00:12:28,590
store whether that be a string whether

283
00:12:28,590 --> 00:12:30,120
it be an array although you're not

284
00:12:30,120 --> 00:12:31,800
supposed to store raised with Falkor

285
00:12:31,800 --> 00:12:33,480
there's you know that's kind of the

286
00:12:33,480 --> 00:12:36,690
whole point of our routes and just being

287
00:12:36,690 --> 00:12:38,340
able to request only the information

288
00:12:38,340 --> 00:12:40,680
that we need but we all know sometimes

289
00:12:40,680 --> 00:12:42,150
you gotta break spec just to be able to

290
00:12:42,150 --> 00:12:46,530
do what you need to do and you know in

291
00:12:46,530 --> 00:12:48,120
this particular example like I'm

292
00:12:48,120 --> 00:12:52,320
returning an array and you know just

293
00:12:52,320 --> 00:12:56,120
kind of finishing out the the promise

294
00:12:56,120 --> 00:12:59,760
here actually that code is kind of weird

295
00:12:59,760 --> 00:13:02,550
oh that's for my promise all sorry i was

296
00:13:02,550 --> 00:13:06,960
just looking back at my coat so that's

297
00:13:06,960 --> 00:13:11,250
kind of the basics of the foul core

298
00:13:11,250 --> 00:13:14,910
router and the model itself so let's

299
00:13:14,910 --> 00:13:23,480
actually take a look at that and I

300
00:13:23,490 --> 00:13:30,180
oh I forgot to open this up sorry about

301
00:13:30,180 --> 00:13:45,460
that

302
00:13:45,470 --> 00:13:48,680
so this is actually a github repo that I

303
00:13:48,680 --> 00:13:52,400
created as well and I can share the link

304
00:13:52,400 --> 00:13:54,080
with anybody that wants to take a look

305
00:13:54,080 --> 00:13:56,030
at it and so it's actually it's using

306
00:13:56,030 --> 00:14:00,620
happy as the node engine and then Falkor

307
00:14:00,620 --> 00:14:02,540
is all implemented and there's a little

308
00:14:02,540 --> 00:14:04,580
bit of testing still kind of working on

309
00:14:04,580 --> 00:14:07,310
I'm getting this to to where I want it

310
00:14:07,310 --> 00:14:14,690
to be but so let's see ya so here is

311
00:14:14,690 --> 00:14:18,140
kind of the the routes actually that's

312
00:14:18,140 --> 00:14:26,350
kind of small let me make that bigger so

313
00:14:26,350 --> 00:14:28,880
you know the same the same idea applies

314
00:14:28,880 --> 00:14:32,840
here like we see our users and we can

315
00:14:32,840 --> 00:14:37,580
define our integers here and so the way

316
00:14:37,580 --> 00:14:47,930
that that request looks is order here so

317
00:14:47,930 --> 00:14:50,930
i say user dot get value and get value

318
00:14:50,930 --> 00:14:52,250
as a way of saying that i'm only

319
00:14:52,250 --> 00:14:56,060
requesting for one resource and I say

320
00:14:56,060 --> 00:14:58,730
users the ID of the user and then the

321
00:14:58,730 --> 00:15:01,160
attribute that I'm requesting well but

322
00:15:01,160 --> 00:15:03,830
what if I also wanted to request

323
00:15:03,830 --> 00:15:07,490
multiple users well the syntax only

324
00:15:07,490 --> 00:15:11,180
changes slightly in the fact that I can

325
00:15:11,180 --> 00:15:17,990
just say from 0 to 1 or I can even come

326
00:15:17,990 --> 00:15:20,360
in here and i'll write this above here

327
00:15:20,360 --> 00:15:22,490
so you can see an example of it i will

328
00:15:22,490 --> 00:15:39,390
say user duck

329
00:15:39,400 --> 00:15:43,600
so now I was able to do the same thing

330
00:15:43,600 --> 00:15:45,730
that I did here but I was actually able

331
00:15:45,730 --> 00:15:47,560
to use the JavaScript object and just

332
00:15:47,560 --> 00:15:50,890
say from this index to this index and

333
00:15:50,890 --> 00:15:59,350
both of these are equal and so I mean

334
00:15:59,350 --> 00:16:02,440
that's that's kind of the basic overview

335
00:16:02,440 --> 00:16:05,470
of this and the power that Falkor house

336
00:16:05,470 --> 00:16:07,780
this is a lot of information I skimmed

337
00:16:07,780 --> 00:16:10,110
through a lot of things just because

338
00:16:10,110 --> 00:16:12,550
there's not a whole lot of time to be

339
00:16:12,550 --> 00:16:14,320
able to really go in depth and I'm still

340
00:16:14,320 --> 00:16:15,940
learning it as well as I'm going through

341
00:16:15,940 --> 00:16:22,570
this and yeah so kind of going back and

342
00:16:22,570 --> 00:16:26,710
looking at the client requests here you

343
00:16:26,710 --> 00:16:28,150
know this is my data source so it's

344
00:16:28,150 --> 00:16:31,270
using just a library from HTTP data

345
00:16:31,270 --> 00:16:34,240
source and I can give it a URL of a

346
00:16:34,240 --> 00:16:36,640
server you know anywhere in the world or

347
00:16:36,640 --> 00:16:41,260
local host you know I can even take out

348
00:16:41,260 --> 00:16:47,590
my source and I could say you know user

349
00:16:47,590 --> 00:16:55,060
dot is it I forget the syntax for it

350
00:16:55,060 --> 00:17:05,410
right now I won't do that example so we

351
00:17:05,410 --> 00:17:08,110
go I mean that's kind of a very quick

352
00:17:08,110 --> 00:17:11,110
overview of just that the power that

353
00:17:11,110 --> 00:17:14,050
Falkor can actually provide to you as a

354
00:17:14,050 --> 00:17:18,190
developer and also to to your users in

355
00:17:18,190 --> 00:17:20,620
your client side code and you know

356
00:17:20,620 --> 00:17:22,120
recently like I've been you know

357
00:17:22,120 --> 00:17:24,010
starting to talk more and more about

358
00:17:24,010 --> 00:17:26,410
this framework to people that are in a

359
00:17:26,410 --> 00:17:28,450
non technical background as well and and

360
00:17:28,450 --> 00:17:29,740
one of the things that I've really found

361
00:17:29,740 --> 00:17:32,980
in being able to shorten down a way to

362
00:17:32,980 --> 00:17:35,670
make it explainable to them is that

363
00:17:35,670 --> 00:17:40,870
Falkor will provide a faster response

364
00:17:40,870 --> 00:17:43,300
time for your users by limiting the

365
00:17:43,300 --> 00:17:44,530
amount of data that you have to transfer

366
00:17:44,530 --> 00:17:47,050
over the wire and it actually will speed

367
00:17:47,050 --> 00:17:51,460
up your your development process you

368
00:17:51,460 --> 00:17:54,970
and it works well with inside of Redux

369
00:17:54,970 --> 00:17:58,659
or Redux react it also works with

370
00:17:58,659 --> 00:18:01,630
angular the libraries it's just a

371
00:18:01,630 --> 00:18:03,549
JavaScript SDK so you can use it with

372
00:18:03,549 --> 00:18:05,140
inside of anything that you're working

373
00:18:05,140 --> 00:18:21,889
with currently yeah and so that's it

374
00:18:21,899 --> 00:18:24,159
yeah I'm not sure we'll just go to the

375
00:18:24,159 --> 00:18:29,020
line here so you mentioned like getting

376
00:18:29,020 --> 00:18:32,260
you know users 0 through on and dot name

377
00:18:32,260 --> 00:18:34,899
how does that look if your back end

378
00:18:34,899 --> 00:18:38,559
stores like my sequel or like a view how

379
00:18:38,559 --> 00:18:41,850
do you translate that request into a

380
00:18:41,850 --> 00:18:47,230
sequel query um yeah so I mean the way

381
00:18:47,230 --> 00:18:49,450
like so if you were going from my sequel

382
00:18:49,450 --> 00:18:51,010
and bringing this into Falkor you would

383
00:18:51,010 --> 00:18:52,720
still have kind of an intermediary

384
00:18:52,720 --> 00:18:56,260
server or you know something set up in

385
00:18:56,260 --> 00:18:59,289
or you would you know even have post

386
00:18:59,289 --> 00:19:01,899
grass or my sequel connector built into

387
00:19:01,899 --> 00:19:07,330
your Falkor application so also threw it

388
00:19:07,330 --> 00:19:09,429
through node there's adapters to connect

389
00:19:09,429 --> 00:19:11,649
to my sequel and and post grads and

390
00:19:11,649 --> 00:19:14,020
Redis and different things so I believe

391
00:19:14,020 --> 00:19:15,940
there's actually I for certain databases

392
00:19:15,940 --> 00:19:18,130
there overlays because of my clothes

393
00:19:18,130 --> 00:19:21,309
dress for Valcourt and graph ql so you

394
00:19:21,309 --> 00:19:23,470
can get the table schema and like some

395
00:19:23,470 --> 00:19:24,909
representation you can start doing

396
00:19:24,909 --> 00:19:26,490
user-defined queries

397
00:19:26,490 --> 00:19:29,880
cool yeah thanks yep that's was

398
00:19:29,880 --> 00:19:33,840
wondering mongo DB query language has

399
00:19:33,840 --> 00:19:36,390
kind of the same function you know I

400
00:19:36,390 --> 00:19:38,520
haven't used Mongo so I'm not as

401
00:19:38,520 --> 00:19:40,830
familiar with it you can specify the

402
00:19:40,830 --> 00:19:43,260
search and what fields you want back and

403
00:19:43,260 --> 00:19:45,240
you can do a lot of things that you can

404
00:19:45,240 --> 00:19:48,200
do here oh cool yeah but this is like

405
00:19:48,200 --> 00:19:50,280
this is different right this is for like

406
00:19:50,280 --> 00:19:51,660
the API you don't want to necessarily

407
00:19:51,660 --> 00:19:53,940
change the entire way that your data is

408
00:19:53,940 --> 00:19:56,160
laid out on your date with your entire

409
00:19:56,160 --> 00:19:57,690
database management system because you

410
00:19:57,690 --> 00:20:01,620
want to have your yeah I mean and

411
00:20:01,620 --> 00:20:04,440
there's a lot of advantages between the

412
00:20:04,440 --> 00:20:06,480
caching and the fetching that happen

413
00:20:06,480 --> 00:20:09,770
with Falkor as well so you know as I'm

414
00:20:09,770 --> 00:20:12,750
always retrieving things and then even

415
00:20:12,750 --> 00:20:15,630
so like imagine like so I'm primarily

416
00:20:15,630 --> 00:20:18,390
familiar with a react application right

417
00:20:18,390 --> 00:20:21,330
now and so as I have multiple components

418
00:20:21,330 --> 00:20:25,280
that are all needing data to be filled

419
00:20:25,280 --> 00:20:28,740
Falkor will actually batch as well so

420
00:20:28,740 --> 00:20:31,410
you know I'll periodically be making a

421
00:20:31,410 --> 00:20:33,240
request and I'll grab you know the first

422
00:20:33,240 --> 00:20:35,070
half of what i need and then the other

423
00:20:35,070 --> 00:20:36,720
components will make it into the second

424
00:20:36,720 --> 00:20:37,950
batch and it will go out and it will

425
00:20:37,950 --> 00:20:38,820
bring back what you need and I know

426
00:20:38,820 --> 00:20:40,830
that's kind of I mean a little bit off

427
00:20:40,830 --> 00:20:42,179
from what you were talking about with

428
00:20:42,179 --> 00:20:44,670
MongoDB I mean there's definitely

429
00:20:44,670 --> 00:20:46,740
something i'll look into and just being

430
00:20:46,740 --> 00:20:48,510
able to understand like what some of the

431
00:20:48,510 --> 00:20:50,190
key differences are between this and

432
00:20:50,190 --> 00:21:05,460
what manga is doing yeah so that's

433
00:21:05,460 --> 00:21:08,220
that's kind of the other piece of like

434
00:21:08,220 --> 00:21:10,170
if I've noticed that Falkor has started

435
00:21:10,170 --> 00:21:11,670
like they've thought about this and and

436
00:21:11,670 --> 00:21:14,490
my interpretation this is probably not

437
00:21:14,490 --> 00:21:16,890
as good as Jafar's but you know I'm

438
00:21:16,890 --> 00:21:18,480
trying to do my best with it but

439
00:21:18,480 --> 00:21:20,010
essentially the way that it works

440
00:21:20,010 --> 00:21:21,390
because of the way that things are being

441
00:21:21,390 --> 00:21:25,190
referenced to each other so if we go

442
00:21:25,190 --> 00:21:36,740
back to this so and I lost it

443
00:21:36,750 --> 00:21:42,720
I think it might come back now but

444
00:21:42,720 --> 00:21:45,930
anyway so essentially what happens is

445
00:21:45,930 --> 00:21:50,430
through those references as I do a set

446
00:21:50,430 --> 00:21:52,950
value it will update my local cache and

447
00:21:52,950 --> 00:21:56,100
then in the background it will do a

448
00:21:56,100 --> 00:21:58,140
dispatch out to the server to actually

449
00:21:58,140 --> 00:22:00,480
be able to update the database store

450
00:22:00,480 --> 00:22:02,220
there as well so everything stays in

451
00:22:02,220 --> 00:22:04,710
sync Falkor just kind of manages a lot

452
00:22:04,710 --> 00:22:06,120
more of that like kind of behind the

453
00:22:06,120 --> 00:22:16,980
scenes like you're using HP caching it's

454
00:22:16,980 --> 00:22:18,780
like very obvious when do we come on

455
00:22:18,780 --> 00:22:21,000
exactly oh well okay so they can do some

456
00:22:21,000 --> 00:22:28,440
like oh yeah although you want to do it

457
00:22:28,440 --> 00:22:32,820
like I think the insurance I read about

458
00:22:32,820 --> 00:22:35,250
it on a global stuff like okay here's

459
00:22:35,250 --> 00:22:37,380
this specific like here's my main

460
00:22:37,380 --> 00:22:39,570
application API here's how it anal thing

461
00:22:39,570 --> 00:22:41,130
okay I couldn't remember reading

462
00:22:41,130 --> 00:22:43,050
anything about resource level fashion

463
00:22:43,050 --> 00:22:47,760
but I get the feeling my place yeah and

464
00:22:47,760 --> 00:22:50,670
in Falkor like so as we were seeing on

465
00:22:50,670 --> 00:22:52,710
the router I can actually say that if

466
00:22:52,710 --> 00:22:54,840
you made a request that I want you to

467
00:22:54,840 --> 00:22:56,910
invalidate other different things that

468
00:22:56,910 --> 00:22:58,500
are being stored locally in the cash as

469
00:22:58,500 --> 00:23:00,270
well so from the server I can dictate

470
00:23:00,270 --> 00:23:01,800
locally on the client what's actually

471
00:23:01,800 --> 00:23:05,790
invalidated yeah so from one of your

472
00:23:05,790 --> 00:23:09,210
first examples obviously if you want to

473
00:23:09,210 --> 00:23:10,380
get a list of all the articles available

474
00:23:10,380 --> 00:23:13,830
you don't and the API gives you the

475
00:23:13,830 --> 00:23:16,470
article the title the article and the

476
00:23:16,470 --> 00:23:18,240
entire content of the article that would

477
00:23:18,240 --> 00:23:19,350
be incredibly inefficient would be a

478
00:23:19,350 --> 00:23:21,810
giant terrible amount of data that

479
00:23:21,810 --> 00:23:23,520
you're getting just gonna list of titles

480
00:23:23,520 --> 00:23:25,320
seems like this is kind of doing the

481
00:23:25,320 --> 00:23:26,760
opposite where you're only getting the

482
00:23:26,760 --> 00:23:33,210
stuff that you want however it worries

483
00:23:33,210 --> 00:23:35,490
me and may have misunderstood how it

484
00:23:35,490 --> 00:23:37,440
works but it seems like when you have a

485
00:23:37,440 --> 00:23:39,180
bunch of things as microservices now if

486
00:23:39,180 --> 00:23:41,430
I want to get title and the author and

487
00:23:41,430 --> 00:23:43,680
the content I have to do three separate

488
00:23:43,680 --> 00:23:45,270
requests for

489
00:23:45,270 --> 00:23:50,540
the author and the title and the content

490
00:23:50,540 --> 00:23:54,750
so that would suck yeah so look there's

491
00:23:54,750 --> 00:23:57,180
uh there you can through the routing you

492
00:23:57,180 --> 00:23:58,980
can group what comes from each

493
00:23:58,980 --> 00:24:04,800
microservice so so yeah so i can say

494
00:24:04,800 --> 00:24:15,300
like um where the remote go oh no that

495
00:24:15,300 --> 00:24:18,330
one's the clicker is this the one for

496
00:24:18,330 --> 00:24:19,950
the projector is it did it go back off

497
00:24:19,950 --> 00:24:31,530
or okay um well sorry yeah so the way

498
00:24:31,530 --> 00:24:33,060
that it works so we would like where we

499
00:24:33,060 --> 00:24:34,920
saw like the the route for the floor

500
00:24:34,920 --> 00:24:36,960
plans I can actually instead of just

501
00:24:36,960 --> 00:24:39,030
saying floor plans there I can turn that

502
00:24:39,030 --> 00:24:41,250
into an array and I can say that it's

503
00:24:41,250 --> 00:24:43,500
anything that I pass into it and it's a

504
00:24:43,500 --> 00:24:45,360
catch-all and then the floor plans is

505
00:24:45,360 --> 00:24:47,610
only the one that gets called if I

506
00:24:47,610 --> 00:24:50,940
specify floor plan so my graph request

507
00:24:50,940 --> 00:24:54,690
itself I could say project one that and

508
00:24:54,690 --> 00:24:59,510
give me name give me the user give me

509
00:24:59,510 --> 00:25:02,640
the floor plans give me the photos floor

510
00:25:02,640 --> 00:25:04,320
plans and photos could come from a

511
00:25:04,320 --> 00:25:06,510
separate service while all the other

512
00:25:06,510 --> 00:25:08,250
project information would actually come

513
00:25:08,250 --> 00:25:11,460
from one single life you know in our

514
00:25:11,460 --> 00:25:12,780
particular case thing it would be like a

515
00:25:12,780 --> 00:25:14,670
JSON API response that comes back and

516
00:25:14,670 --> 00:25:16,020
delivers me all the information about

517
00:25:16,020 --> 00:25:18,810
the project does that help clarify the

518
00:25:18,810 --> 00:25:22,440
like your thoughts are I I just don't

519
00:25:22,440 --> 00:25:24,930
want to be do it it's a bunch of

520
00:25:24,930 --> 00:25:26,490
microservices I don't want to be sending

521
00:25:26,490 --> 00:25:30,120
a bunch of different requests I didn't

522
00:25:30,120 --> 00:25:31,620
really honestly I didn't really

523
00:25:31,620 --> 00:25:36,419
understand

524
00:25:36,429 --> 00:25:38,399
returning various bits that any you need

525
00:25:38,399 --> 00:25:41,619
you may have microservice too far for

526
00:25:41,619 --> 00:25:43,090
you may well sounds like you might want

527
00:25:43,090 --> 00:25:45,700
have a unifying layer in front of them

528
00:25:45,700 --> 00:25:47,289
on the server side that does not

529
00:25:47,289 --> 00:25:48,909
fetching 30 armed services so your

530
00:25:48,909 --> 00:25:50,740
clients I could hang the one ancient

531
00:25:50,740 --> 00:25:52,179
gear class call me look at the thing is

532
00:25:52,179 --> 00:25:53,230
that this doesn't really wrong with

533
00:25:53,230 --> 00:25:54,940
multiple requests like Browns pretty

534
00:25:54,940 --> 00:25:57,340
good well it's about somebody you know

535
00:25:57,340 --> 00:25:59,169
it's not going to certain point well I

536
00:25:59,169 --> 00:26:00,909
mean you'll hit a big performance it

537
00:26:00,909 --> 00:26:03,580
right if you're doing a bunch of HTTP

538
00:26:03,580 --> 00:26:05,350
requests just for like a couple bits of

539
00:26:05,350 --> 00:26:06,669
data like for the title and the author

540
00:26:06,669 --> 00:26:08,619
gives you two separate HTTP requests for

541
00:26:08,619 --> 00:26:11,019
like you know a couple characters and

542
00:26:11,019 --> 00:26:16,389
that's okay given far i think i would

543
00:26:16,389 --> 00:26:18,820
like to his example look like a sequel

544
00:26:18,820 --> 00:26:21,009
select you list the columns i thought

545
00:26:21,009 --> 00:26:23,080
you could you specify more than one

546
00:26:23,080 --> 00:26:25,059
column more than one yeah you can

547
00:26:25,059 --> 00:26:26,889
specify multiple columns that come from

548
00:26:26,889 --> 00:26:29,019
one sir it's sort of decomposing it to

549
00:26:29,019 --> 00:26:30,669
me it seems like the opposing into flat

550
00:26:30,669 --> 00:26:34,389
relations and you can choose the columns

551
00:26:34,389 --> 00:26:36,279
you want from a given relation so it

552
00:26:36,279 --> 00:26:37,869
seems like you're doing one query /

553
00:26:37,869 --> 00:26:40,539
relation right I just want to know that

554
00:26:40,539 --> 00:26:41,889
what I just want to make sure that on

555
00:26:41,889 --> 00:26:44,259
the how it works it's just sending one

556
00:26:44,259 --> 00:26:46,269
request and instead of if you have it as

557
00:26:46,269 --> 00:26:48,850
multiple services radios so like these

558
00:26:48,850 --> 00:26:50,320
things at the same time and get the

559
00:26:50,320 --> 00:26:52,960
upper back all the data at the same time

560
00:26:52,960 --> 00:26:55,360
so that we're not doing most for HTTP

561
00:26:55,360 --> 00:27:03,310
requests for work that's data

562
00:27:03,320 --> 00:27:06,240
so the trick if you have these servers

563
00:27:06,240 --> 00:27:08,910
in close proximity there's actually a

564
00:27:08,910 --> 00:27:13,640
fairly low cost to doing aren't actually

565
00:27:13,640 --> 00:27:16,020
restricted by some browser restrictions

566
00:27:16,020 --> 00:27:18,030
for multiple is right that's like behind

567
00:27:18,030 --> 00:27:19,890
my feet I mean you get into a situation

568
00:27:19,890 --> 00:27:21,240
where we start preparing a public

569
00:27:21,240 --> 00:27:22,980
database queries work yeah they are

570
00:27:22,980 --> 00:27:25,530
technically an ax plus 1 degrees but you

571
00:27:25,530 --> 00:27:27,240
know they're serving servers that are

572
00:27:27,240 --> 00:27:29,580
that are next to each other in the three

573
00:27:29,580 --> 00:27:31,740
categories and live in parallel right so

574
00:27:31,740 --> 00:27:34,800
there's some you know some wasted server

575
00:27:34,800 --> 00:27:36,809
time but let's in terms of the user time

576
00:27:36,809 --> 00:27:38,580
it's much less you're also banking on

577
00:27:38,580 --> 00:27:39,870
the fact that they're all the same sort

578
00:27:39,870 --> 00:27:41,130
of data structure though because I'm

579
00:27:41,130 --> 00:27:43,110
like I'm going to a bicycle Monica

580
00:27:43,110 --> 00:27:44,940
Sandra database of am I supposed

581
00:27:44,940 --> 00:27:46,500
probably spent the longest with your

582
00:27:46,500 --> 00:27:48,600
complex query right so it's a gift away

583
00:27:48,600 --> 00:27:54,570
converge so yeah no yeah but we probably

584
00:27:54,570 --> 00:27:57,090
have not like five more minutes okay all

585
00:27:57,090 --> 00:27:59,880
right I'm in this example you are

586
00:27:59,880 --> 00:28:02,340
awaiting for everything in your path or

587
00:28:02,340 --> 00:28:04,160
request

588
00:28:04,160 --> 00:28:05,930
yeah actually fell court house web

589
00:28:05,930 --> 00:28:08,570
socket adapter okay you can connect over

590
00:28:08,570 --> 00:28:10,310
open connection and you start receiving

591
00:28:10,310 --> 00:28:11,750
that dated back as it's available in

592
00:28:11,750 --> 00:28:16,880
that case you'd start getting so if you

593
00:28:16,880 --> 00:28:19,280
guys have any more like details for that

594
00:28:19,280 --> 00:28:21,140
particular discussion guys always

595
00:28:21,140 --> 00:28:23,360
welcome to join the select channel and

596
00:28:23,360 --> 00:28:24,890
then your best can connect it's awesome

597
00:28:24,890 --> 00:28:27,860
places everyone's here any other

598
00:28:27,860 --> 00:28:32,210
questions for it yeah so validation any

599
00:28:32,210 --> 00:28:34,910
question I had so I know with all these

600
00:28:34,910 --> 00:28:37,160
graph Jason api's you can specify like

601
00:28:37,160 --> 00:28:38,480
what types you're bringing you know that

602
00:28:38,480 --> 00:28:41,450
when reflecting back out but what does

603
00:28:41,450 --> 00:28:44,570
it do when I provide safe ever like

604
00:28:44,570 --> 00:28:46,550
required fields on the face of a PR like

605
00:28:46,550 --> 00:28:48,680
the jason crabb or be right too many or

606
00:28:48,680 --> 00:28:51,830
by too few does it how does that handle

607
00:28:51,830 --> 00:28:53,630
that the situations like is there like a

608
00:28:53,630 --> 00:28:58,400
JSON schema validator so I guess as far

609
00:28:58,400 --> 00:29:00,380
as the validation we're talking about

610
00:29:00,380 --> 00:29:02,960
between Falkor and the micro service or

611
00:29:02,960 --> 00:29:04,760
between the client and Falkor it's

612
00:29:04,760 --> 00:29:08,090
really Falkor in the micro service so in

613
00:29:08,090 --> 00:29:10,580
the promise like from making the request

614
00:29:10,580 --> 00:29:13,550
out to the micro service you then

615
00:29:13,550 --> 00:29:16,250
structure your data like you know you do

616
00:29:16,250 --> 00:29:18,190
whatever manipulation you need to do

617
00:29:18,190 --> 00:29:22,250
before you do the return and then so

618
00:29:22,250 --> 00:29:24,800
like you can weed out anything that may

619
00:29:24,800 --> 00:29:27,140
come back that you don't need and then

620
00:29:27,140 --> 00:29:29,660
you only send back and Falkor even yell

621
00:29:29,660 --> 00:29:32,840
at you too if you like try to send back

622
00:29:32,840 --> 00:29:35,960
more fields then was actually requested

623
00:29:35,960 --> 00:29:44,160
from from the client requests yeah cool

624
00:29:44,170 --> 00:29:50,890
thank you

625
00:29:50,900 --> 00:29:54,630
Thanks you've you've all done javascript

626
00:29:54,630 --> 00:29:57,330
I assume you've seen the new JavaScript

627
00:29:57,330 --> 00:29:59,700
I've been doing JavaScript for probably

628
00:29:59,700 --> 00:30:03,180
about seven years now you know I've seen

629
00:30:03,180 --> 00:30:06,360
the number of reserved keywords kind of

630
00:30:06,360 --> 00:30:09,450
go up and down not all of these are

631
00:30:09,450 --> 00:30:11,400
currently reserved keywords in

632
00:30:11,400 --> 00:30:14,640
JavaScript but a lot of them are some of

633
00:30:14,640 --> 00:30:17,610
them are historical there are a lot of

634
00:30:17,610 --> 00:30:20,220
these aren't there they're a lot or

