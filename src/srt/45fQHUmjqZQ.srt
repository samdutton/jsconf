1
00:00:00,000 --> 00:00:03,960

[Music]

2
00:00:03,960 --> 00:00:09,570
hello everyone thanks for having me here

3
00:00:09,570 --> 00:00:13,500
so my name is villian I'm Brazilian and

4
00:00:13,500 --> 00:00:17,730
Mozilla tech speaker and I work for eBay

5
00:00:17,730 --> 00:00:21,130
I like to play video games

6
00:00:21,130 --> 00:00:24,009
I'm big monster hunter for fun so if

7
00:00:24,009 --> 00:00:26,050
wanna talk about Monster Hunter sing

8
00:00:26,050 --> 00:00:28,929
racy games or football please reach me

9
00:00:28,929 --> 00:00:33,550
out of this talk before I start my

10
00:00:33,550 --> 00:00:36,280
presentation just a small disclaimer all

11
00:00:36,280 --> 00:00:38,050
the proposal wouldn't show here are

12
00:00:38,050 --> 00:00:40,840
under construction the main intention

13
00:00:40,840 --> 00:00:42,430
here is to give you a sneak peek about

14
00:00:42,430 --> 00:00:45,910
the future of JavaScript and try to help

15
00:00:45,910 --> 00:00:48,190
you to understand the use case and the

16
00:00:48,190 --> 00:00:51,550
pros accounts and of all of these

17
00:00:51,550 --> 00:00:54,850
features and show there are mazing

18
00:00:54,850 --> 00:00:58,239
amazing work that the ct-9 community is

19
00:00:58,239 --> 00:01:01,050
doing to improve the language we love

20
00:01:01,050 --> 00:01:03,820
some of some of these feature may or may

21
00:01:03,820 --> 00:01:06,490
not be present on JavaScript if you like

22
00:01:06,490 --> 00:01:09,100
on of this proposal if you have some

23
00:01:09,100 --> 00:01:12,820
concern if you want to express your your

24
00:01:12,820 --> 00:01:14,650
support with some of these proposals

25
00:01:14,650 --> 00:01:17,560
please use this link below and open

26
00:01:17,560 --> 00:01:19,870
issue put a star and getting getting

27
00:01:19,870 --> 00:01:23,890
engaged so the agenda for today

28
00:01:23,890 --> 00:01:26,200
we are talk about parent matching

29
00:01:26,200 --> 00:01:29,740
pipeline operator binary AST and a gives

30
00:01:29,740 --> 00:01:32,950
an opinion so whenever you see a red

31
00:01:32,950 --> 00:01:35,650
border and the slide is just my opinion

32
00:01:35,650 --> 00:01:38,980
if you disagree just ignore or talk to

33
00:01:38,980 --> 00:01:41,650
me afterwards that said

34
00:01:41,650 --> 00:01:51,580
[Music]

35
00:01:51,590 --> 00:01:54,630
so to give up a quick background

36
00:01:54,630 --> 00:01:58,650
motivation of the first feature I want

37
00:01:58,650 --> 00:02:00,180
to talk about a bit more about a

38
00:02:00,180 --> 00:02:02,880
condition on JavaScript nowadays we have

39
00:02:02,880 --> 00:02:04,650
only three ways to do condition service

40
00:02:04,650 --> 00:02:07,920
in JavaScript we need to will we have an

41
00:02:07,920 --> 00:02:10,560
if-else statement switch statement and

42
00:02:10,560 --> 00:02:14,130
for an ternary expression just to setup

43
00:02:14,130 --> 00:02:17,430
common ground so everyone an expression

44
00:02:17,430 --> 00:02:19,680
is something that evaluates down to an

45
00:02:19,680 --> 00:02:23,070
value and in a statement is just

46
00:02:23,070 --> 00:02:26,489
something that does something so an

47
00:02:26,489 --> 00:02:28,500
if-else statement requires a condition

48
00:02:28,500 --> 00:02:31,230
which evaluates to true fee or false e

49
00:02:31,230 --> 00:02:34,890
value if the condition is true it

50
00:02:34,890 --> 00:02:38,790
executes the adjacent block and if it's

51
00:02:38,790 --> 00:02:40,920
not it tries to syke deathblow else

52
00:02:40,920 --> 00:02:44,370
block if you have one but it can get

53
00:02:44,370 --> 00:02:46,380
complicated let's check it out

54
00:02:46,380 --> 00:02:49,620
for this section I'm using this a simple

55
00:02:49,620 --> 00:02:55,290
function that just tries to return emoji

56
00:02:55,290 --> 00:02:57,420
that tries to reflect the chimp the

57
00:02:57,420 --> 00:03:01,799
current temperature as you can see here

58
00:03:01,799 --> 00:03:04,709
this function it's just an if statement

59
00:03:04,709 --> 00:03:08,040
that if it's true just return the demo G

60
00:03:08,040 --> 00:03:10,500
but else statement it's again another if

61
00:03:10,500 --> 00:03:11,910
statement so this is a way to

62
00:03:11,910 --> 00:03:14,549
concatenate and chain one if statement

63
00:03:14,549 --> 00:03:18,209
after the order it can get it can get

64
00:03:18,209 --> 00:03:21,660
really tricky because I'm not even talk

65
00:03:21,660 --> 00:03:29,630
about chain s the first statement right

66
00:03:29,640 --> 00:03:32,520
for this kind of special special checks

67
00:03:32,520 --> 00:03:37,200
when I have a lot of small lot of

68
00:03:37,200 --> 00:03:39,150
options in the small code to react to

69
00:03:39,150 --> 00:03:42,210
I think switch statements handy too so

70
00:03:42,210 --> 00:03:46,150
let's check how switch statement works

71
00:03:46,160 --> 00:03:49,710
so if statement is a it's good whenever

72
00:03:49,710 --> 00:03:53,550
you have you need to react to a couple

73
00:03:53,550 --> 00:03:56,820
of choice or you have a lot of a lot of

74
00:03:56,820 --> 00:04:00,690
chunk of code to execute but when you

75
00:04:00,690 --> 00:04:02,700
have a multiple choices and I just a

76
00:04:02,700 --> 00:04:05,390
small a small set of comments I think

77
00:04:05,390 --> 00:04:07,590
sweet statement could be a good choice

78
00:04:07,590 --> 00:04:10,440
the switch statement works as the

79
00:04:10,440 --> 00:04:13,590
following are given an expression inside

80
00:04:13,590 --> 00:04:16,950
the parentheses and switch it tries to

81
00:04:16,950 --> 00:04:21,390
match with each one of this case

82
00:04:21,390 --> 00:04:23,490
statement and when it matches with the

83
00:04:23,490 --> 00:04:26,130
first one it yep that's the starting

84
00:04:26,130 --> 00:04:29,520
point or point of this block statement

85
00:04:29,520 --> 00:04:32,970
and then that's why we have the break

86
00:04:32,970 --> 00:04:40,390
statement just to finalize the the block

87
00:04:40,400 --> 00:04:45,120
so come back to our initial example this

88
00:04:45,120 --> 00:04:48,720
is how we would write something using

89
00:04:48,720 --> 00:04:50,880
switch statement there are two things I

90
00:04:50,880 --> 00:04:53,190
want to highlight here first I'm not

91
00:04:53,190 --> 00:04:56,280
used using a break statement because

92
00:04:56,280 --> 00:05:00,419
just by using a return I have my

93
00:05:00,419 --> 00:05:02,940
function stopping at that at that line

94
00:05:02,940 --> 00:05:04,500
so that's why I don't need to use break

95
00:05:04,500 --> 00:05:08,520
and the second thing is people may not

96
00:05:08,520 --> 00:05:13,200
get it but the case Staton accepts

97
00:05:13,200 --> 00:05:15,690
expression as well so I can put instead

98
00:05:15,690 --> 00:05:17,610
of just a constant that this is not most

99
00:05:17,610 --> 00:05:21,240
used used use case there you just put a

100
00:05:21,240 --> 00:05:23,100
constant and you put this expression in

101
00:05:23,100 --> 00:05:25,680
switch so then I swap like I use the X

102
00:05:25,680 --> 00:05:28,290
and the constant in switch and I use the

103
00:05:28,290 --> 00:05:30,660
expression there

104
00:05:30,660 --> 00:05:33,930
so the ternary operator become popular

105
00:05:33,930 --> 00:05:36,930
recently because more for the functional

106
00:05:36,930 --> 00:05:40,380
developer fan and who tried to write the

107
00:05:40,380 --> 00:05:42,090
the code with as much expression as

108
00:05:42,090 --> 00:05:44,910
possible it basically works as the

109
00:05:44,910 --> 00:05:48,390
following given a condition if this if

110
00:05:48,390 --> 00:05:49,500
this condition is true

111
00:05:49,500 --> 00:05:51,840
it runs the first first block after the

112
00:05:51,840 --> 00:05:55,230
question mark if it's not it's false it

113
00:05:55,230 --> 00:06:00,990
runs what we have after column and since

114
00:06:00,990 --> 00:06:03,090
ternary expression eternal is a

115
00:06:03,090 --> 00:06:06,000
expression we can write that function

116
00:06:06,000 --> 00:06:09,540
using error function and that tries to

117
00:06:09,540 --> 00:06:10,950
make everything more concise

118
00:06:10,950 --> 00:06:14,510
but then you have a code like this and I

119
00:06:14,510 --> 00:06:16,950
don't know if you like I don't like but

120
00:06:16,950 --> 00:06:18,240
there are a lot of people that like this

121
00:06:18,240 --> 00:06:19,890
kind of code I'm not here to judge I'm

122
00:06:19,890 --> 00:06:22,980
just showing you and as you can see we

123
00:06:22,980 --> 00:06:24,600
have three ways to do conditions

124
00:06:24,600 --> 00:06:27,030
nowadays in JavaScript but what's the

125
00:06:27,030 --> 00:06:27,330
matter

126
00:06:27,330 --> 00:06:31,140
the fourth one could we imagine what

127
00:06:31,140 --> 00:06:33,660
could happen if you mix if statement

128
00:06:33,660 --> 00:06:36,030
with switch statement and the power of

129
00:06:36,030 --> 00:06:38,850
destruction destroy the structure in

130
00:06:38,850 --> 00:06:48,570
pattern variant matching to understand

131
00:06:48,570 --> 00:06:51,360
how parent match works I need to use a

132
00:06:51,360 --> 00:06:54,080
try example to be able to explore the

133
00:06:54,080 --> 00:06:58,650
parent matching statement so let's

134
00:06:58,650 --> 00:07:00,900
suppose I have a list of shapes and I

135
00:07:00,900 --> 00:07:04,140
need to log in detect all these circles

136
00:07:04,140 --> 00:07:07,760
Red Square Square and big blob try goes

137
00:07:07,760 --> 00:07:10,860
how could they do this nowadays with if

138
00:07:10,860 --> 00:07:15,950
statement just to give a small context

139
00:07:15,950 --> 00:07:21,240
this is the sample entry and this is one

140
00:07:21,240 --> 00:07:23,190
of potential a solution for the problem

141
00:07:23,190 --> 00:07:26,910
it's tricky because it can grow as the

142
00:07:26,910 --> 00:07:29,100
requirements grows right you can keep

143
00:07:29,100 --> 00:07:32,190
put if in there as more the more you

144
00:07:32,190 --> 00:07:36,810
have further requirements and as this is

145
00:07:36,810 --> 00:07:39,960
how we can do this using pattern

146
00:07:39,960 --> 00:07:42,660
matching because of the time here I will

147
00:07:42,660 --> 00:07:43,800
just explain the car

148
00:07:43,800 --> 00:07:46,169
concepts and if you are interested in it

149
00:07:46,169 --> 00:07:48,569
you can either check the documentation

150
00:07:48,569 --> 00:07:51,150
on the github repository talk to me

151
00:07:51,150 --> 00:07:55,639
afterwards this is the case statement

152
00:07:55,639 --> 00:07:58,169
which defines the start of the pattern

153
00:07:58,169 --> 00:08:03,090
matching block it receives only one

154
00:08:03,090 --> 00:08:05,879
value as input and this value is called

155
00:08:05,879 --> 00:08:10,199
case expression then we have the Wayne

156
00:08:10,199 --> 00:08:12,720
cause which is divine some parts I will

157
00:08:12,720 --> 00:08:16,949
just show two up then today again you

158
00:08:16,949 --> 00:08:19,229
can have more in the spec in a

159
00:08:19,229 --> 00:08:21,930
repository okay

160
00:08:21,930 --> 00:08:25,560
in this first wing close we are we have

161
00:08:25,560 --> 00:08:27,930
split into like the first part before

162
00:08:27,930 --> 00:08:32,039
the error is the match pattern and the

163
00:08:32,039 --> 00:08:35,570
second part is the Wayne cross body so

164
00:08:35,570 --> 00:08:38,579
the match parent pattern will execute

165
00:08:38,579 --> 00:08:41,159
the body whenever the shape of the

166
00:08:41,159 --> 00:08:43,440
pattern match the shape effects

167
00:08:43,440 --> 00:08:46,320
expression in this case every single

168
00:08:46,320 --> 00:08:50,779
object that has the type of sorry circle

169
00:08:50,779 --> 00:08:54,540
and then to achieve the second use a use

170
00:08:54,540 --> 00:08:57,149
case I can just create another pattern

171
00:08:57,149 --> 00:09:04,170
which is type square color red and and

172
00:09:04,170 --> 00:09:06,270
this step you see a if statement in the

173
00:09:06,270 --> 00:09:08,910
middle this is called match word it

174
00:09:08,910 --> 00:09:12,600
means that even though the the match

175
00:09:12,600 --> 00:09:16,829
match with the the object if the if

176
00:09:16,829 --> 00:09:19,560
statement which is called match world

177
00:09:19,560 --> 00:09:22,529
returns false it will not execute the

178
00:09:22,529 --> 00:09:28,579
the block and the last case is whenever

179
00:09:28,579 --> 00:09:32,250
we have a standalone variable it matched

180
00:09:32,250 --> 00:09:35,579
everything so it's kind of the full

181
00:09:35,579 --> 00:09:39,060
statement for for switch case but a bit

182
00:09:39,060 --> 00:09:44,730
different checking our checking our

183
00:09:44,730 --> 00:09:48,120
Nisha example this is how we should work

184
00:09:48,120 --> 00:09:50,360
with parent matching

185
00:09:50,360 --> 00:09:56,420
it's nice and if somehow we saw this

186
00:09:56,420 --> 00:09:59,329
talk before this would be the part that

187
00:09:59,329 --> 00:10:00,829
will start to complain why parent

188
00:10:00,829 --> 00:10:03,319
matching this is a statement but then

189
00:10:03,319 --> 00:10:05,600
the deceit or noncom he just changed

190
00:10:05,600 --> 00:10:09,439
this so very much in all languages is an

191
00:10:09,439 --> 00:10:11,389
expression and being a statement in

192
00:10:11,389 --> 00:10:13,129
JavaScript will be tricky because we

193
00:10:13,129 --> 00:10:15,769
wouldn't know we will it will be

194
00:10:15,769 --> 00:10:18,559
difficult to decide whether to use

195
00:10:18,559 --> 00:10:20,660
pattern matching or just a bunch of

196
00:10:20,660 --> 00:10:21,889
if-else statement

197
00:10:21,889 --> 00:10:24,769
but then if now that parent match is

198
00:10:24,769 --> 00:10:27,860
just an expression it's become as a

199
00:10:27,860 --> 00:10:33,410
powerful tool as a substitute for

200
00:10:33,410 --> 00:10:37,189
Fortran and expression and now they are

201
00:10:37,189 --> 00:10:39,410
trying to assess if we need to use if

202
00:10:39,410 --> 00:10:40,699
you need to have the when at the

203
00:10:40,699 --> 00:10:43,279
beginning of the wine clause or we just

204
00:10:43,279 --> 00:10:46,759
need to use the let Const or var so to

205
00:10:46,759 --> 00:10:49,480
give an example this is the way they're

206
00:10:49,480 --> 00:10:54,619
discussing that the syntax may look like

207
00:10:54,619 --> 00:10:58,100
do you like it you don't like it do you

208
00:10:58,100 --> 00:11:00,619
have a better idea again go to the

209
00:11:00,619 --> 00:11:05,269
repository and calm down okay before

210
00:11:05,269 --> 00:11:06,949
introduce the next proposal a last check

211
00:11:06,949 --> 00:11:09,709
whole function composition what is

212
00:11:09,709 --> 00:11:11,299
function composition how it works in

213
00:11:11,299 --> 00:11:14,360
JavaScript nowadays so function

214
00:11:14,360 --> 00:11:15,850
compositions are Mary mark my

215
00:11:15,850 --> 00:11:19,009
mathematical concept that allows you to

216
00:11:19,009 --> 00:11:22,549
combine multiple functions to create a

217
00:11:22,549 --> 00:11:25,850
new function so to help you to get the

218
00:11:25,850 --> 00:11:28,549
picture let's cook a bento I came up

219
00:11:28,549 --> 00:11:30,619
with this example because it's easy to

220
00:11:30,619 --> 00:11:33,019
easier to reason about food and I like

221
00:11:33,019 --> 00:11:36,649
to use emoji so this is just a function

222
00:11:36,649 --> 00:11:38,480
that creates a bento following sake with

223
00:11:38,480 --> 00:11:41,509
a sequential series of steps and where

224
00:11:41,509 --> 00:11:44,600
the next steps needs to receive the

225
00:11:44,600 --> 00:11:46,369
result from the previous steps so in

226
00:11:46,369 --> 00:11:48,589
this case to achieve this I need to have

227
00:11:48,589 --> 00:11:50,779
this intermediate intermediary variables

228
00:11:50,779 --> 00:11:52,639
just to hold the data to pass to the

229
00:11:52,639 --> 00:11:55,910
next function but I don't I don't want

230
00:11:55,910 --> 00:11:57,649
to use this intermediate variable just

231
00:11:57,649 --> 00:12:00,529
for this right but I can go I can go and

232
00:12:00,529 --> 00:12:02,850
write this kind of

233
00:12:02,850 --> 00:12:05,970
code which is not so easy to reason

234
00:12:05,970 --> 00:12:09,119
about because the more we compose the

235
00:12:09,119 --> 00:12:12,269
bigger is the invitation we have and the

236
00:12:12,269 --> 00:12:13,799
way we read the code is different the

237
00:12:13,799 --> 00:12:15,539
way the data flow because the data flow

238
00:12:15,539 --> 00:12:18,119
for the from the innermost function to

239
00:12:18,119 --> 00:12:20,429
the outermost function and we read this

240
00:12:20,429 --> 00:12:22,709
data usually top down that left and

241
00:12:22,709 --> 00:12:27,660
right right but I can use lodash flow

242
00:12:27,660 --> 00:12:31,109
for achieving a similar effect and make

243
00:12:31,109 --> 00:12:35,100
this more readable or use ram the pipe

244
00:12:35,100 --> 00:12:38,549
for this or even create my custom

245
00:12:38,549 --> 00:12:42,359
vanilla JavaScript function so wouldn't

246
00:12:42,359 --> 00:12:44,189
be nice to have all of this capability

247
00:12:44,189 --> 00:12:46,049
somehow incorporate to JavaScript

248
00:12:46,049 --> 00:12:48,209
without having to rely on this external

249
00:12:48,209 --> 00:12:50,699
library or create a custom homemade

250
00:12:50,699 --> 00:12:53,129
functions so let's bring the second

251
00:12:53,129 --> 00:12:57,689
javascript purpose of this talk pipeline

252
00:12:57,689 --> 00:13:03,989
operator so pipeline operate is as

253
00:13:03,989 --> 00:13:07,079
syntax sugar for creating streamlines

254
00:13:07,079 --> 00:13:10,559
chain of function in a readable in a

255
00:13:10,559 --> 00:13:11,429
functional manner

256
00:13:11,429 --> 00:13:14,100
it's backward compatible and provides

257
00:13:14,100 --> 00:13:15,720
alternative for extend building

258
00:13:15,720 --> 00:13:20,039
prototypes so our initial example was

259
00:13:20,039 --> 00:13:22,350
written and I like this snippet but

260
00:13:22,350 --> 00:13:25,319
using pipeline operator this will look

261
00:13:25,319 --> 00:13:26,639
more like this

262
00:13:26,639 --> 00:13:30,769
and then this will be the sugar to this

263
00:13:30,769 --> 00:13:36,209
it's nice right but what if one of my

264
00:13:36,209 --> 00:13:38,189
chaining functions needs one extra

265
00:13:38,189 --> 00:13:40,589
parameter let's suppose that the add

266
00:13:40,589 --> 00:13:43,559
fish function needs to receive a second

267
00:13:43,559 --> 00:13:45,809
parameter which is the type of fish I

268
00:13:45,809 --> 00:13:47,549
want to add them to my two great men

269
00:13:47,549 --> 00:13:51,329
agree how should we add this to the

270
00:13:51,329 --> 00:13:54,179
pipeline chain so to achieve this we can

271
00:13:54,179 --> 00:13:56,759
wrap this function with an arrow

272
00:13:56,759 --> 00:13:59,579
function so then we received only the

273
00:13:59,579 --> 00:14:01,019
result for the previous step and then

274
00:14:01,019 --> 00:14:04,919
add this to the next step and note that

275
00:14:04,919 --> 00:14:06,269
in the minimum propose the arrow

276
00:14:06,269 --> 00:14:08,189
function has to be wrapped with

277
00:14:08,189 --> 00:14:09,509
parentheses otherwise we will have a

278
00:14:09,509 --> 00:14:13,529
syntax error but the bento is not only

279
00:14:13,529 --> 00:14:16,380
about Nigri we need to put some stuff

280
00:14:16,380 --> 00:14:19,860
we need right I know how to do a agree

281
00:14:19,860 --> 00:14:23,400
it's kind of just like smash some rice

282
00:14:23,400 --> 00:14:26,130
and put a fish on top of it but it's

283
00:14:26,130 --> 00:14:28,170
simple but I just realized that I don't

284
00:14:28,170 --> 00:14:31,760
know how to toss my bento and I need to

285
00:14:31,760 --> 00:14:36,370
somehow delegate is to another function

286
00:14:36,380 --> 00:14:38,460
just figure out that I don't know how to

287
00:14:38,460 --> 00:14:42,990
semi the bento so I will delegate to

288
00:14:42,990 --> 00:14:45,660
this to a nursing function that will

289
00:14:45,660 --> 00:14:47,940
creating the assembly been tough for me

290
00:14:47,940 --> 00:14:50,280
but how can I do this using pipeline

291
00:14:50,280 --> 00:14:53,730
operator it's tricky right I could use a

292
00:14:53,730 --> 00:14:57,030
weight to await this function but there

293
00:14:57,030 --> 00:14:59,850
is a problem in it and note that the

294
00:14:59,850 --> 00:15:02,190
line for is ambiguous in explaining why

295
00:15:02,190 --> 00:15:07,050
now if the implementation add add mental

296
00:15:07,050 --> 00:15:09,600
it's just as straightforward async

297
00:15:09,600 --> 00:15:12,630
function I want to have this line this

298
00:15:12,630 --> 00:15:15,590
sugar to the line six like this one but

299
00:15:15,590 --> 00:15:18,540
if I have uncommon implementation which

300
00:15:18,540 --> 00:15:20,970
behaves like a factory that returns me a

301
00:15:20,970 --> 00:15:23,100
function that I need to call passing

302
00:15:23,100 --> 00:15:25,680
that the then agree to create the bento

303
00:15:25,680 --> 00:15:30,900
I would like to have this line BD sugar

304
00:15:30,900 --> 00:15:35,520
to this line six the problem is in the

305
00:15:35,520 --> 00:15:36,960
minimum proposal there is no guarantee

306
00:15:36,960 --> 00:15:39,750
that I can that that a weight step could

307
00:15:39,750 --> 00:15:41,670
be the sugar neither to the line fiber C

308
00:15:41,670 --> 00:15:46,710
or three or five as you can see the

309
00:15:46,710 --> 00:15:48,390
minimum proposal has some caveats that

310
00:15:48,390 --> 00:15:50,520
me we need to address in order to have

311
00:15:50,520 --> 00:15:55,080
this proposal progress in the tc39

312
00:15:55,080 --> 00:15:58,440
proposal pipeline currently we have two

313
00:15:58,440 --> 00:16:00,750
comparing proposal that tries to solve

314
00:16:00,750 --> 00:16:03,840
this in different ways so a one I want

315
00:16:03,840 --> 00:16:06,150
to explain first the smart pipeline

316
00:16:06,150 --> 00:16:10,140
proposal so as you can see here this is

317
00:16:10,140 --> 00:16:11,910
how I could solve this use this mattress

318
00:16:11,910 --> 00:16:16,440
is my pipeline and you can see that we

319
00:16:16,440 --> 00:16:18,150
have two styles there whenever you have

320
00:16:18,150 --> 00:16:20,130
like a just a straightforward function

321
00:16:20,130 --> 00:16:23,460
call you use the berry berry style and

322
00:16:23,460 --> 00:16:27,450
we never need to do like X passing extra

323
00:16:27,450 --> 00:16:30,390
parameters or user weights or

324
00:16:30,390 --> 00:16:33,130
use this in a different way you can use

325
00:16:33,130 --> 00:16:35,760
top Castillo there are some rules

326
00:16:35,760 --> 00:16:38,530
whenever you need to use parentheses and

327
00:16:38,530 --> 00:16:41,320
square brackets you have to use top

328
00:16:41,320 --> 00:16:43,420
Castillo otherwise you will have a

329
00:16:43,420 --> 00:16:46,150
single seatbacks error and the sharp is

330
00:16:46,150 --> 00:16:49,480
you saw in the previous step this sharp

331
00:16:49,480 --> 00:16:51,430
tokens is just a placeholder for the

332
00:16:51,430 --> 00:16:53,860
result of the previous step and it's not

333
00:16:53,860 --> 00:16:56,100
finally sharp it's subject to change

334
00:16:56,100 --> 00:16:58,810
there discuss if the short talk is the

335
00:16:58,810 --> 00:17:02,980
best way okay if I have a career donk

336
00:17:02,980 --> 00:17:05,560
ssin you have to use popke style

337
00:17:05,560 --> 00:17:07,570
otherwise again you have a syntax error

338
00:17:07,570 --> 00:17:10,120
because you're using parenthesis this

339
00:17:10,120 --> 00:17:12,670
proposal has extensive documentation for

340
00:17:12,670 --> 00:17:15,130
further enhancements over this card

341
00:17:15,130 --> 00:17:18,220
proposal again check that out and and

342
00:17:18,220 --> 00:17:22,180
and see what you think about it and as a

343
00:17:22,180 --> 00:17:24,610
counterpart we have the F sharp proposal

344
00:17:24,610 --> 00:17:26,440
that tries to address the this ambiguity

345
00:17:26,440 --> 00:17:29,680
of as a sinc function using one thing

346
00:17:29,680 --> 00:17:34,090
called a wait step it's sink it's in

347
00:17:34,090 --> 00:17:36,190
simpler but still we need to rap

348
00:17:36,190 --> 00:17:38,050
whenever you need to use extra

349
00:17:38,050 --> 00:17:39,670
parameters we need to wrap this function

350
00:17:39,670 --> 00:17:41,740
with an arrow function and this too we

351
00:17:41,740 --> 00:17:45,730
have the overhead of have these

352
00:17:45,730 --> 00:17:49,600
parentheses there but this could be a

353
00:17:49,600 --> 00:17:57,100
softening and enough food or proposal so

354
00:17:57,100 --> 00:17:59,470
just to summarize it's a nice addition

355
00:17:59,470 --> 00:18:01,210
to JavaScript to create an a

356
00:18:01,210 --> 00:18:03,720
streamlining way of composite functions

357
00:18:03,720 --> 00:18:08,140
the minimum proposed has two caveats the

358
00:18:08,140 --> 00:18:10,720
smart pipe line traces of that using a

359
00:18:10,720 --> 00:18:13,240
token and I have shark tries to solve

360
00:18:13,240 --> 00:18:16,900
that using a wedge step which brings to

361
00:18:16,900 --> 00:18:20,830
my rent my point is I really really like

362
00:18:20,830 --> 00:18:22,480
prattle on operator and I'm gonna have

363
00:18:22,480 --> 00:18:25,480
this shipped so JavaScript as soon as

364
00:18:25,480 --> 00:18:29,590
possible so then I have a proposal here

365
00:18:29,590 --> 00:18:33,730
I think F sharp proposes great and this

366
00:18:33,730 --> 00:18:35,500
only extends the minimum proposed with

367
00:18:35,500 --> 00:18:38,200
their weight step I think we should try

368
00:18:38,200 --> 00:18:39,970
to ship this as much as possible then

369
00:18:39,970 --> 00:18:41,620
afterwards we could have another

370
00:18:41,620 --> 00:18:43,660
proposal try to others

371
00:18:43,660 --> 00:18:46,330
they users you have the sharp token or

372
00:18:46,330 --> 00:18:50,110
not nevertheless Bobo has a plugin for

373
00:18:50,110 --> 00:18:54,160
using a smart pad planning proposal you

374
00:18:54,160 --> 00:18:59,680
can check that out and use on your to

375
00:18:59,680 --> 00:19:03,010
play a bit and then you have a formula

376
00:19:03,010 --> 00:19:07,330
or opinion okay before are we going to

377
00:19:07,330 --> 00:19:08,950
know or less proposal this presentation

378
00:19:08,950 --> 00:19:10,750
I would like to mention some performance

379
00:19:10,750 --> 00:19:13,690
tips have you ever heard about any of

380
00:19:13,690 --> 00:19:15,610
this JavaScript performance chips here

381
00:19:15,610 --> 00:19:18,880
do ever wonder why they are so important

382
00:19:18,880 --> 00:19:21,460
for the perceived performance of your

383
00:19:21,460 --> 00:19:25,960
application so 2010 this practice and

384
00:19:25,960 --> 00:19:29,200
and understand why they are important

385
00:19:29,200 --> 00:19:31,480
and why our next proposal is to relate

386
00:19:31,480 --> 00:19:34,270
to that we need first to check how

387
00:19:34,270 --> 00:19:38,770
javascript engine is generally words to

388
00:19:38,770 --> 00:19:42,300
roughly explain how the JavaScript works

389
00:19:42,300 --> 00:19:45,550
I would show this is I would use this

390
00:19:45,550 --> 00:19:47,740
illustrates terrible phone an excellent

391
00:19:47,740 --> 00:19:49,350
article from lenders money

392
00:19:49,350 --> 00:19:51,250
regarding the extractor extractor

393
00:19:51,250 --> 00:19:54,040
performance of JavaScript so whenever

394
00:19:54,040 --> 00:19:56,260
the browser's of writing script tag they

395
00:19:56,260 --> 00:19:58,920
try to download the text content of it

396
00:19:58,920 --> 00:20:01,960
then it tries to parse this text content

397
00:20:01,960 --> 00:20:04,090
and the result of this text content

398
00:20:04,090 --> 00:20:07,240
would be abstract syntax tree or ast

399
00:20:07,240 --> 00:20:12,100
which is 3 a tree representation of your

400
00:20:12,100 --> 00:20:16,330
code and then after this ast is done the

401
00:20:16,330 --> 00:20:18,640
browser starts to compile and create the

402
00:20:18,640 --> 00:20:22,390
bytecode so this last part is regarding

403
00:20:22,390 --> 00:20:24,910
a runtime opposite of optimizations that

404
00:20:24,910 --> 00:20:28,060
the browser does to make the JavaScript

405
00:20:28,060 --> 00:20:30,850
is the Kishin faster but this is not the

406
00:20:30,850 --> 00:20:32,860
the the their targets of this

407
00:20:32,860 --> 00:20:36,400
presentation okay to put in short

408
00:20:36,400 --> 00:20:38,560
javascript lifestyle lifestyle could be

409
00:20:38,560 --> 00:20:41,050
described generally as download parse

410
00:20:41,050 --> 00:20:43,720
compilation run optimization the

411
00:20:43,720 --> 00:20:46,950
optimization and the garbage collector

412
00:20:46,950 --> 00:20:49,630
but here I want to focus on on the

413
00:20:49,630 --> 00:20:52,490
parsing phase why

414
00:20:52,500 --> 00:20:54,970
thinking about the the code startup in

415
00:20:54,970 --> 00:20:58,270
JavaScript we can see that this is

416
00:20:58,270 --> 00:21:00,190
crucial for the perceived performance of

417
00:21:00,190 --> 00:21:03,490
an application so to make an application

418
00:21:03,490 --> 00:21:05,680
start faster we end up doing those

419
00:21:05,680 --> 00:21:07,540
things I mentioned the first slide of

420
00:21:07,540 --> 00:21:11,350
this section but one thing doesn't

421
00:21:11,350 --> 00:21:14,950
change the parsing time parsing the

422
00:21:14,950 --> 00:21:17,080
initial compilation of JavaScript can

423
00:21:17,080 --> 00:21:19,510
take up to 30 percent of the main thread

424
00:21:19,510 --> 00:21:22,900
time and 1 megabytes of uncompressed

425
00:21:22,900 --> 00:21:25,180
JavaScript can easily take a whole

426
00:21:25,180 --> 00:21:28,270
section second to be parsing an average

427
00:21:28,270 --> 00:21:30,820
mobile cell phone normally the browser

428
00:21:30,820 --> 00:21:33,010
needs to parse the whole fire before I

429
00:21:33,010 --> 00:21:37,420
start start compiling it and these are

430
00:21:37,420 --> 00:21:38,980
the motivation for the last propose of

431
00:21:38,980 --> 00:21:45,910
this talk binary AST the bunny HT

432
00:21:45,910 --> 00:21:48,400
proposal proposes a new over the wire

433
00:21:48,400 --> 00:21:51,970
format for the JavaScript based on the

434
00:21:51,970 --> 00:21:55,800
binary representation of the custom ast

435
00:21:55,800 --> 00:21:58,600
this could petition decrease this the

436
00:21:58,600 --> 00:22:00,490
code startup of a large JavaScript

437
00:22:00,490 --> 00:22:03,910
application and the browser that doesn't

438
00:22:03,910 --> 00:22:05,890
support it just load the normal

439
00:22:05,890 --> 00:22:09,610
javascript file so this is how it may

440
00:22:09,610 --> 00:22:11,740
work first you need to write your

441
00:22:11,740 --> 00:22:13,540
beautiful and delightful piece of

442
00:22:13,540 --> 00:22:19,480
JavaScript then you compile or bundle it

443
00:22:19,480 --> 00:22:23,560
user best flavor of bonder to spiral

444
00:22:23,560 --> 00:22:26,460
like that provides such a feature and

445
00:22:26,460 --> 00:22:29,530
this process will give not only the

446
00:22:29,530 --> 00:22:33,940
media's file but it will give you as

447
00:22:33,940 --> 00:22:36,580
well the binary representation of your

448
00:22:36,580 --> 00:22:39,130
javascript file so the browsers that

449
00:22:39,130 --> 00:22:41,110
support this formant could have the

450
00:22:41,110 --> 00:22:43,870
parsing their mask Lee domestically

451
00:22:43,870 --> 00:22:48,610
decreased since the majority of this

452
00:22:48,610 --> 00:22:52,180
tile task is done in build time so the

453
00:22:52,180 --> 00:22:54,190
chance of this proposal crater PLC on

454
00:22:54,190 --> 00:22:57,700
spider monkey using the JavaScript chess

455
00:22:57,700 --> 00:22:59,750
engine II and

456
00:22:59,750 --> 00:23:03,740
and they try to compile some JavaScript

457
00:23:03,740 --> 00:23:06,380
into binary st and measure the

458
00:23:06,380 --> 00:23:08,630
performance and this is the follow of

459
00:23:08,630 --> 00:23:12,380
the the following outcomes the result

460
00:23:12,380 --> 00:23:15,110
was the following they try they they use

461
00:23:15,110 --> 00:23:21,310
the static news feed from Facebook and

462
00:23:21,310 --> 00:23:24,830
the size of the binary st was slightly

463
00:23:24,830 --> 00:23:27,740
smaller than the original javascript the

464
00:23:27,740 --> 00:23:29,480
timing for create DST from plain

465
00:23:29,480 --> 00:23:32,230
JavaScript was between 500 800

466
00:23:32,230 --> 00:23:35,420
milliseconds but the time for create the

467
00:23:35,420 --> 00:23:39,800
binary st was twice as fast as before so

468
00:23:39,800 --> 00:23:41,510
the POC showed some evidence that

469
00:23:41,510 --> 00:23:44,660
shipping playing binary AST was a good

470
00:23:44,660 --> 00:23:47,240
performance wing and the extra

471
00:23:47,240 --> 00:23:49,760
annotation that the binary st is will

472
00:23:49,760 --> 00:23:53,750
have can enable enable Derrick that

473
00:23:53,750 --> 00:23:56,630
coordination without relying on plugins

474
00:23:56,630 --> 00:23:59,330
such tree shaking and this anotation

475
00:23:59,330 --> 00:24:01,520
Quinn could improve to the point that's

476
00:24:01,520 --> 00:24:04,010
possible to enable string compilation

477
00:24:04,010 --> 00:24:06,830
and if the performance of this

478
00:24:06,830 --> 00:24:09,620
hypothetical string compilation was

479
00:24:09,620 --> 00:24:11,440
close to the current it wasn't

480
00:24:11,440 --> 00:24:14,870
webassembly string compilation we can

481
00:24:14,870 --> 00:24:17,150
reach to the point that the compilation

482
00:24:17,150 --> 00:24:19,490
time for your JavaScript using this

483
00:24:19,490 --> 00:24:21,440
binary St could be faster than the data

484
00:24:21,440 --> 00:24:23,990
load time so you can start your

485
00:24:23,990 --> 00:24:25,370
application right after downloaded

486
00:24:25,370 --> 00:24:31,970
amazing right so these are footer read

487
00:24:31,970 --> 00:24:33,650
for you if we want to check that out

488
00:24:33,650 --> 00:24:36,470
like there's plenty more information

489
00:24:36,470 --> 00:24:40,940
these links these are my links if you

490
00:24:40,940 --> 00:24:44,240
want to reach me out if you wanna follow

491
00:24:44,240 --> 00:24:46,520
me on Twitter I don't do it so much but

492
00:24:46,520 --> 00:24:47,990
we need we tight with some JavaScript

