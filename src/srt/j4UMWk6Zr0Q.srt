1
00:00:03,890 --> 00:00:08,309

thank you for the grin welcome this is

2
00:00:08,309 --> 00:00:10,590
not my first dog but still it feels like

3
00:00:10,590 --> 00:00:12,300
I'm giving for the first time this

4
00:00:12,300 --> 00:00:16,289
awkward feeling is undescribable but

5
00:00:16,289 --> 00:00:19,710
let's get started so let's team get

6
00:00:19,710 --> 00:00:22,590
ulcers I just wanted to give it the get

7
00:00:22,590 --> 00:00:24,390
workflow we deal with every day as

8
00:00:24,390 --> 00:00:27,599
ketosis because it's yeah it's just

9
00:00:27,599 --> 00:00:31,380
crazy so why I talk on Kate I'm pretty

10
00:00:31,380 --> 00:00:34,260
sure like many of you want to know why

11
00:00:34,260 --> 00:00:36,329
because we have a lot of resources

12
00:00:36,329 --> 00:00:38,940
online and we have a lot of thoughts but

13
00:00:38,940 --> 00:00:41,670
I have certain incidents which I wanted

14
00:00:41,670 --> 00:00:44,309
to share I have seen a lot of developers

15
00:00:44,309 --> 00:00:46,710
and some of the students have mentored

16
00:00:46,710 --> 00:00:48,899
in the past they have a set of three to

17
00:00:48,899 --> 00:00:51,210
four get commands written on a text file

18
00:00:51,210 --> 00:00:53,460
and that they just use them so that they

19
00:00:53,460 --> 00:00:55,500
can create a protic West something which

20
00:00:55,500 --> 00:00:58,590
goes bi beyond those commands that's it

21
00:00:58,590 --> 00:01:00,329
they try to delete there and I'll clone

22
00:01:00,329 --> 00:01:02,219
for whatever it is and redo everything

23
00:01:02,219 --> 00:01:04,619
and we have to admit it we must have

24
00:01:04,619 --> 00:01:06,540
started off like that and not only that

25
00:01:06,540 --> 00:01:09,990
um one of my friends said that I just

26
00:01:09,990 --> 00:01:11,610
are like can you explain me what get is

27
00:01:11,610 --> 00:01:13,560
the first time I was trying to learn

28
00:01:13,560 --> 00:01:16,799
about git git is a magical tool and

29
00:01:16,799 --> 00:01:19,740
there's something magic happening yes

30
00:01:19,740 --> 00:01:22,740
it's a magical tool but it's what's

31
00:01:22,740 --> 00:01:24,060
happening behind the scenes is not

32
00:01:24,060 --> 00:01:26,430
really magic we can understand what's

33
00:01:26,430 --> 00:01:29,220
happening there so with that let's get

34
00:01:29,220 --> 00:01:34,350
started okay so a small introduction

35
00:01:34,350 --> 00:01:35,790
about myself I am a software engineer

36
00:01:35,790 --> 00:01:38,670
Salesforce a disclaimer I'm not a friend

37
00:01:38,670 --> 00:01:43,049
and developer written at the end and I'm

38
00:01:43,049 --> 00:01:44,790
a released lead for documentation and

39
00:01:44,790 --> 00:01:48,090
communities if you have any complaints

40
00:01:48,090 --> 00:01:51,479
about Docs related to humanities come to

41
00:01:51,479 --> 00:01:54,540
me and I'm an ardent open source

42
00:01:54,540 --> 00:01:57,149
contributor if you want to know how to

43
00:01:57,149 --> 00:01:59,369
get started with any open source project

44
00:01:59,369 --> 00:02:01,259
and there and that's my twitter handle

45
00:02:01,259 --> 00:02:03,630
if you want to just say hello my teams

46
00:02:03,630 --> 00:02:08,280
are open that's about me so some quick

47
00:02:08,280 --> 00:02:09,989
things to understand about it so I don't

48
00:02:09,989 --> 00:02:11,879
want to give a definition but some

49
00:02:11,879 --> 00:02:13,350
things which I feel like we need

50
00:02:13,350 --> 00:02:16,800
to know about get so yes we know it's a

51
00:02:16,800 --> 00:02:19,830
version control system but first get

52
00:02:19,830 --> 00:02:22,440
what it does it simply tracks your

53
00:02:22,440 --> 00:02:25,500
content it's a simple content tracker it

54
00:02:25,500 --> 00:02:27,600
tracks all the files and folders you

55
00:02:27,600 --> 00:02:29,760
have in your repository that's it

56
00:02:29,760 --> 00:02:33,900
and just remember that and the second

57
00:02:33,900 --> 00:02:35,880
part is the dot git folder

58
00:02:35,880 --> 00:02:38,490
it's a magical folder because it's

59
00:02:38,490 --> 00:02:42,360
hidden but you can still find it so it

60
00:02:42,360 --> 00:02:44,460
is the heart and soul of your git

61
00:02:44,460 --> 00:02:47,400
repository so when you initialize a git

62
00:02:47,400 --> 00:02:50,310
repository either by cloning an existing

63
00:02:50,310 --> 00:02:52,470
one or initiating an empty repository

64
00:02:52,470 --> 00:02:55,440
the first thing it does is create this

65
00:02:55,440 --> 00:02:58,530
dot git folder and this is the folder

66
00:02:58,530 --> 00:03:00,930
that stores all the data history

67
00:03:00,930 --> 00:03:02,490
everything related to your repository

68
00:03:02,490 --> 00:03:07,140
and when you when I say that when you

69
00:03:07,140 --> 00:03:09,120
clone someone else's repository so what

70
00:03:09,120 --> 00:03:10,950
exactly is happening there is it just

71
00:03:10,950 --> 00:03:13,320
copies all the contents which are inside

72
00:03:13,320 --> 00:03:18,000
that git folder that's it and try to

73
00:03:18,000 --> 00:03:20,160
open the get folder which you have your

74
00:03:20,160 --> 00:03:22,650
any of the repository and just explore

75
00:03:22,650 --> 00:03:24,840
what's happening there going further

76
00:03:24,840 --> 00:03:25,980
we'll be talking about some of the

77
00:03:25,980 --> 00:03:31,050
important files we need to know and the

78
00:03:31,050 --> 00:03:33,210
third important point which I wanted to

79
00:03:33,210 --> 00:03:36,510
make sure is git is a tool which wants

80
00:03:36,510 --> 00:03:37,800
to make your distributed development

81
00:03:37,800 --> 00:03:41,130
workflow life simpler like every

82
00:03:41,130 --> 00:03:43,230
repository in your workflow is important

83
00:03:43,230 --> 00:03:45,660
and it have the capability to replace

84
00:03:45,660 --> 00:03:47,730
the other one at any given point of time

85
00:03:47,730 --> 00:03:51,170
so no repository is central over here

86
00:03:51,170 --> 00:03:54,960
with that I want to discuss some of the

87
00:03:54,960 --> 00:03:58,830
important terminology we we kind of come

88
00:03:58,830 --> 00:04:00,840
across these different terms whenever we

89
00:04:00,840 --> 00:04:02,670
get to see some get errors or whenever

90
00:04:02,670 --> 00:04:06,180
BDD read some good documentation often

91
00:04:06,180 --> 00:04:07,680
get confused with some of these so I

92
00:04:07,680 --> 00:04:10,290
just want to clarify or give a clear

93
00:04:10,290 --> 00:04:14,760
definition remote repository local

94
00:04:14,760 --> 00:04:19,560
repository index working tree stash so I

95
00:04:19,560 --> 00:04:21,600
will explain these files terms together

96
00:04:21,600 --> 00:04:26,400
so that this diagram it it all it

97
00:04:26,400 --> 00:04:27,150
actually define

98
00:04:27,150 --> 00:04:30,419
your get workflow so let's start with

99
00:04:30,419 --> 00:04:35,400
the first one remote repository people

100
00:04:35,400 --> 00:04:37,050
also say it's a upstream repository or

101
00:04:37,050 --> 00:04:41,280
an origin so in most of the cases your

102
00:04:41,280 --> 00:04:43,289
remote repository is to which all your

103
00:04:43,289 --> 00:04:45,900
team members push changes or FET changes

104
00:04:45,900 --> 00:04:48,620
from and such a remote repository

105
00:04:48,620 --> 00:04:51,180
actually exists on some cold hosting

106
00:04:51,180 --> 00:04:53,389
sites like github gate lab or whatever

107
00:04:53,389 --> 00:04:55,680
if you have an internal server forcing

108
00:04:55,680 --> 00:04:58,650
yes it exists and that is called as that

109
00:04:58,650 --> 00:05:01,770
is known as report remote repository now

110
00:05:01,770 --> 00:05:03,720
coming to the second term local

111
00:05:03,720 --> 00:05:08,250
repository git local repository is the

112
00:05:08,250 --> 00:05:10,410
one which we make all the local changes

113
00:05:10,410 --> 00:05:13,289
to it is in simple terms it's nothing

114
00:05:13,289 --> 00:05:15,560
but your dot git folder in your computer

115
00:05:15,560 --> 00:05:20,490
that's it and the third reporting term

116
00:05:20,490 --> 00:05:24,570
index kit index is used as a staging

117
00:05:24,570 --> 00:05:27,690
area we have we might have heard the

118
00:05:27,690 --> 00:05:30,690
term staged staged area right so that's

119
00:05:30,690 --> 00:05:33,030
nothing but the index area it actually

120
00:05:33,030 --> 00:05:36,210
sits between your working tree and the

121
00:05:36,210 --> 00:05:38,880
local repository so the significance of

122
00:05:38,880 --> 00:05:42,060
this particular area is whatever file

123
00:05:42,060 --> 00:05:44,940
you add into your staging area come

124
00:05:44,940 --> 00:05:47,909
whenever you commit the file or whenever

125
00:05:47,909 --> 00:05:49,710
you want to make a commit it will pick

126
00:05:49,710 --> 00:05:51,120
the files which are there in the index

127
00:05:51,120 --> 00:05:53,250
area it won't pick the files which are

128
00:05:53,250 --> 00:05:55,020
in your working tree or your local

129
00:05:55,020 --> 00:05:56,669
repository now it will just touch the

130
00:05:56,669 --> 00:05:57,960
files which are sitting in your index

131
00:05:57,960 --> 00:06:03,930
and it plays a very significant role for

132
00:06:03,930 --> 00:06:07,260
example when you run git status you

133
00:06:07,260 --> 00:06:09,900
usually see files in your staging area

134
00:06:09,900 --> 00:06:14,070
and green text that means you can only

135
00:06:14,070 --> 00:06:16,620
commit the file which is in green text

136
00:06:16,620 --> 00:06:20,639
and also get status is a very helpful

137
00:06:20,639 --> 00:06:22,949
command when you actually sit and read

138
00:06:22,949 --> 00:06:24,750
what's going on there it will give you

139
00:06:24,750 --> 00:06:26,400
all the details it will give you

140
00:06:26,400 --> 00:06:27,900
instructions on how you can stay your

141
00:06:27,900 --> 00:06:30,199
file and stage your file or check out

142
00:06:30,199 --> 00:06:36,599
it's a very helpful command and also

143
00:06:36,599 --> 00:06:38,729
when you expand the dot git folder and

144
00:06:38,729 --> 00:06:41,430
see look out for the index file

145
00:06:41,430 --> 00:06:43,979
it's it exists there whenever you add a

146
00:06:43,979 --> 00:06:46,530
new file it will be making some changes

147
00:06:46,530 --> 00:06:49,199
to that index file and if you want to

148
00:06:49,199 --> 00:06:50,759
open this particular file and see what's

149
00:06:50,759 --> 00:06:54,389
getting edited it's actually some weird

150
00:06:54,389 --> 00:06:57,860
code I will not be understanding but yes

151
00:06:57,860 --> 00:07:00,210
there'll be something in that particular

152
00:07:00,210 --> 00:07:05,400
file now coming to the food term working

153
00:07:05,400 --> 00:07:08,310
tree okay so this is also a very

154
00:07:08,310 --> 00:07:12,000
important term it consists of what your

155
00:07:12,000 --> 00:07:15,150
current your current working snapshot

156
00:07:15,150 --> 00:07:17,099
when I say that if you have two

157
00:07:17,099 --> 00:07:18,539
different branches if you have a feature

158
00:07:18,539 --> 00:07:20,970
branch and you're working on that your

159
00:07:20,970 --> 00:07:22,889
working tree will just contain the files

160
00:07:22,889 --> 00:07:24,030
which are there in that particular

161
00:07:24,030 --> 00:07:25,949
feature branch it won't contain the

162
00:07:25,949 --> 00:07:27,090
files which are in the master branch

163
00:07:27,090 --> 00:07:29,130
unless you switch so this context

164
00:07:29,130 --> 00:07:31,680
switching is taken by they can take

165
00:07:31,680 --> 00:07:36,569
taken care of the working tree area now

166
00:07:36,569 --> 00:07:40,500
coming to the fifth the most term if

167
00:07:40,500 --> 00:07:45,509
node area or terms - the only one the

168
00:07:45,509 --> 00:07:47,729
only duty of stash is to keep your

169
00:07:47,729 --> 00:07:51,840
working tree area a little clean so

170
00:07:51,840 --> 00:07:53,400
there are certain situations where you

171
00:07:53,400 --> 00:07:55,590
try to switch a branch or make some

172
00:07:55,590 --> 00:07:58,349
changes when you have certain

173
00:07:58,349 --> 00:08:00,240
uncommitted files in your working tree

174
00:08:00,240 --> 00:08:02,940
it won't let you do that and in that

175
00:08:02,940 --> 00:08:04,680
scenario you can actually save those

176
00:08:04,680 --> 00:08:06,479
files into your stash area and then

177
00:08:06,479 --> 00:08:08,400
reapply them whenever you want them in

178
00:08:08,400 --> 00:08:10,949
your working tree and it's actually a

179
00:08:10,949 --> 00:08:16,139
very helpful area it comes in handy ok

180
00:08:16,139 --> 00:08:19,849
now comes another important term head

181
00:08:19,849 --> 00:08:23,310
the question now is when you run git

182
00:08:23,310 --> 00:08:25,469
branch some branch name

183
00:08:25,469 --> 00:08:28,289
how does get know the SHA of the last

184
00:08:28,289 --> 00:08:31,110
commit a it's because of the contents in

185
00:08:31,110 --> 00:08:34,860
this file um head is a reference to the

186
00:08:34,860 --> 00:08:36,930
last commit in the currently checked out

187
00:08:36,930 --> 00:08:39,839
branch and other useful in forensics you

188
00:08:39,839 --> 00:08:41,459
can get from this particular head

189
00:08:41,459 --> 00:08:43,800
pointer is it determines your current

190
00:08:43,800 --> 00:08:47,310
working branch so normally when you

191
00:08:47,310 --> 00:08:49,500
check out to a proper branch name it

192
00:08:49,500 --> 00:08:51,630
automatically moves the head pointer

193
00:08:51,630 --> 00:08:54,120
along whenever you create a new comment

194
00:08:54,120 --> 00:08:55,020
in that

195
00:08:55,020 --> 00:08:57,420
so we will actually um see the

196
00:08:57,420 --> 00:08:58,890
significance of this pointer when we

197
00:08:58,890 --> 00:09:03,570
learn about branching and if you want to

198
00:09:03,570 --> 00:09:05,460
know more about this particular pointer

199
00:09:05,460 --> 00:09:17,490
you can simply run git log and so that's

200
00:09:17,490 --> 00:09:20,280
a commit hash and beside you always see

201
00:09:20,280 --> 00:09:24,660
some thumbs so what you can infer from

202
00:09:24,660 --> 00:09:27,270
this is that head is actually pointing

203
00:09:27,270 --> 00:09:29,220
to your master branch and your current

204
00:09:29,220 --> 00:09:32,040
branch is master and there are also

205
00:09:32,040 --> 00:09:34,050
other terms like origin master and

206
00:09:34,050 --> 00:09:35,460
origin head

207
00:09:35,460 --> 00:09:38,190
they are the pointers which are in your

208
00:09:38,190 --> 00:09:41,340
upstream repository and that's where you

209
00:09:41,340 --> 00:09:43,350
option repository is there so if I

210
00:09:43,350 --> 00:09:45,150
actually show you a visualization of

211
00:09:45,150 --> 00:09:48,780
this the box above is option depository

212
00:09:48,780 --> 00:09:50,730
if you assume that it's name is origin

213
00:09:50,730 --> 00:09:53,580
and those are the pointers in they're

214
00:09:53,580 --> 00:09:56,280
pointing to the commits III and the box

215
00:09:56,280 --> 00:09:58,080
below is what is there in your local

216
00:09:58,080 --> 00:10:00,510
repository so it always carries those

217
00:10:00,510 --> 00:10:02,760
remote pointers so that it will let you

218
00:10:02,760 --> 00:10:05,010
know whenever your local repository is

219
00:10:05,010 --> 00:10:07,080
not up to date with the option for

220
00:10:07,080 --> 00:10:08,970
Satori and that's so didn't knows that

221
00:10:08,970 --> 00:10:14,070
and also when you are expand and see

222
00:10:14,070 --> 00:10:16,860
what's there in the head head file it

223
00:10:16,860 --> 00:10:18,390
actually exists inside the dot git

224
00:10:18,390 --> 00:10:21,810
folder it actually tells gate what is

225
00:10:21,810 --> 00:10:23,990
the parent for your next commit and

226
00:10:23,990 --> 00:10:27,420
that's how it tracks the branching and

227
00:10:27,420 --> 00:10:30,870
all the magical stuff but don't worry

228
00:10:30,870 --> 00:10:33,090
I'll be clearly explaining with examples

229
00:10:33,090 --> 00:10:36,390
going further um and not only of

230
00:10:36,390 --> 00:10:38,790
guitarists so some of the important

231
00:10:38,790 --> 00:10:41,270
internals of gate which we need to know

232
00:10:41,270 --> 00:10:44,400
it's nothing but the contents which are

233
00:10:44,400 --> 00:10:46,500
inside the dot git folder we have

234
00:10:46,500 --> 00:10:49,320
already seen what head file is index

235
00:10:49,320 --> 00:10:51,570
file is there some other important

236
00:10:51,570 --> 00:10:52,860
folders and files which I want to

237
00:10:52,860 --> 00:10:58,800
discuss dot git slash config we how many

238
00:10:58,800 --> 00:11:03,750
of you are familiar with this ok ok ok

239
00:11:03,750 --> 00:11:07,230
lot of them so this is the first

240
00:11:07,230 --> 00:11:08,520
internal file we

241
00:11:08,520 --> 00:11:10,200
I would like to talk about because this

242
00:11:10,200 --> 00:11:12,390
is where all your git configurations

243
00:11:12,390 --> 00:11:14,700
related to your git goes in over here

244
00:11:14,700 --> 00:11:16,770
you can define what is your option

245
00:11:16,770 --> 00:11:18,660
repository is what your origin

246
00:11:18,660 --> 00:11:21,240
repository is do some branch

247
00:11:21,240 --> 00:11:23,100
configuration push configurations

248
00:11:23,100 --> 00:11:24,660
everything goes in there this is the

249
00:11:24,660 --> 00:11:28,590
central configuration file and and this

250
00:11:28,590 --> 00:11:30,120
is quite important it actually sits

251
00:11:30,120 --> 00:11:34,590
Center inside the target folder and now

252
00:11:34,590 --> 00:11:36,720
coming to the next important folder that

253
00:11:36,720 --> 00:11:40,740
is dot get slash rest so what exactly is

254
00:11:40,740 --> 00:11:43,770
a ref a ref is an indirect way of

255
00:11:43,770 --> 00:11:47,040
referring to a commit and you can think

256
00:11:47,040 --> 00:11:49,890
of it as a user friendly alias for

257
00:11:49,890 --> 00:11:52,830
commit hash we need not really remember

258
00:11:52,830 --> 00:11:54,900
thee it doesn't really have to remember

259
00:11:54,900 --> 00:11:59,610
the entire 40 character hash so it it

260
00:11:59,610 --> 00:12:02,130
simply keeps a track of the files under

261
00:12:02,130 --> 00:12:05,730
this folder and riffs are stored in a

262
00:12:05,730 --> 00:12:08,460
normal text files and the dot git slash

263
00:12:08,460 --> 00:12:11,190
refs directory for example if you open

264
00:12:11,190 --> 00:12:14,490
the head directory the head directory

265
00:12:14,490 --> 00:12:18,180
inside the refs you will have the list

266
00:12:18,180 --> 00:12:20,490
of files which are nothing but your

267
00:12:20,490 --> 00:12:23,070
local branches so suppose I have master

268
00:12:23,070 --> 00:12:24,840
branch in my local repository I will be

269
00:12:24,840 --> 00:12:27,090
seeing over there and if I actually open

270
00:12:27,090 --> 00:12:29,940
what's inside the master folder there'll

271
00:12:29,940 --> 00:12:32,130
be another file which contains the

272
00:12:32,130 --> 00:12:34,590
latest commits in my master branch and

273
00:12:34,590 --> 00:12:38,070
that's how it keeps track of branching

274
00:12:38,070 --> 00:12:41,370
even this particular folder plays a role

275
00:12:41,370 --> 00:12:46,170
in branching now comes to the dot git

276
00:12:46,170 --> 00:12:49,530
slash objects folder this this is the

277
00:12:49,530 --> 00:12:52,440
meat of the entire target or your gate

278
00:12:52,440 --> 00:12:54,540
apposite ori i say that because it

279
00:12:54,540 --> 00:12:57,240
contains all the files and folders which

280
00:12:57,240 --> 00:12:59,510
are present in your local repository and

281
00:12:59,510 --> 00:13:01,890
the files are actually stored by the

282
00:13:01,890 --> 00:13:03,930
char values over here

283
00:13:03,930 --> 00:13:08,270
you can see those weird characters so

284
00:13:08,270 --> 00:13:10,860
the way it arranges them is like in

285
00:13:10,860 --> 00:13:12,630
folder structures so you need not really

286
00:13:12,630 --> 00:13:16,770
worry about that and so I would like to

287
00:13:16,770 --> 00:13:18,720
discuss more about git objects because

288
00:13:18,720 --> 00:13:22,120
all your data actually goes into it so

289
00:13:22,120 --> 00:13:25,629
first thing it's the meat of your local

290
00:13:25,629 --> 00:13:28,120
repository so that means it contains the

291
00:13:28,120 --> 00:13:30,939
actual data of your get repository and

292
00:13:30,939 --> 00:13:34,689
the second thing is how does get tract

293
00:13:34,689 --> 00:13:37,569
or stole all your files and folders in

294
00:13:37,569 --> 00:13:40,120
the form of objects and in the form of

295
00:13:40,120 --> 00:13:41,740
those four different types of objects

296
00:13:41,740 --> 00:13:45,160
blob tree commit and tag so I will be

297
00:13:45,160 --> 00:13:47,170
talking about the first three object

298
00:13:47,170 --> 00:13:51,490
four three object types and yes they are

299
00:13:51,490 --> 00:13:54,730
stored by the char values as you have

300
00:13:54,730 --> 00:13:56,129
seen before

301
00:13:56,129 --> 00:13:58,990
okay let's take an example that we have

302
00:13:58,990 --> 00:14:00,819
this particular repository and folder

303
00:14:00,819 --> 00:14:02,949
structure in your local repository so we

304
00:14:02,949 --> 00:14:06,100
have a root folder we have two text

305
00:14:06,100 --> 00:14:08,499
files readme and make file and a slash

306
00:14:08,499 --> 00:14:11,439
SRC folder and a dot C folder file

307
00:14:11,439 --> 00:14:14,399
inside the SRC folder so let's see how

308
00:14:14,399 --> 00:14:16,839
it actually stores them in the form of

309
00:14:16,839 --> 00:14:21,269
objects so coming to the first basic

310
00:14:21,269 --> 00:14:24,639
object type git stores your file

311
00:14:24,639 --> 00:14:28,089
contents as blocks so it is important to

312
00:14:28,089 --> 00:14:30,370
know that it just tows the contents of

313
00:14:30,370 --> 00:14:33,519
your files but not the file name so the

314
00:14:33,519 --> 00:14:35,889
names and modes of the files are not

315
00:14:35,889 --> 00:14:38,050
stored within the block I am just trying

316
00:14:38,050 --> 00:14:42,129
to repeat it again and get will only

317
00:14:42,129 --> 00:14:45,370
store our blob only once so when I say

318
00:14:45,370 --> 00:14:47,800
that what it means is if you have two

319
00:14:47,800 --> 00:14:50,620
different file names but with same file

320
00:14:50,620 --> 00:14:53,379
content block kit will be storing that

321
00:14:53,379 --> 00:14:55,179
particular file as one single blob

322
00:14:55,179 --> 00:14:57,329
because the file contents are saying and

323
00:14:57,329 --> 00:15:00,610
what does what it also means is whenever

324
00:15:00,610 --> 00:15:03,309
you try to transfer some of the blobs

325
00:15:03,309 --> 00:15:05,529
from your repository to to the other

326
00:15:05,529 --> 00:15:09,480
repository if it's the same blob but

327
00:15:09,480 --> 00:15:11,860
coming from two different file names it

328
00:15:11,860 --> 00:15:13,629
will just transfer that single blob and

329
00:15:13,629 --> 00:15:15,850
then it will expand it into a different

330
00:15:15,850 --> 00:15:23,370
different files and for our example

331
00:15:23,370 --> 00:15:26,679
repository those files those files are

332
00:15:26,679 --> 00:15:29,459
being stored as blob with different

333
00:15:29,459 --> 00:15:34,269
shards now coming to the next type of

334
00:15:34,269 --> 00:15:35,800
gate object

335
00:15:35,800 --> 00:15:38,589
three it's all the problem of storing

336
00:15:38,589 --> 00:15:40,990
the filename and it also allows you to

337
00:15:40,990 --> 00:15:43,510
store the group of files together that

338
00:15:43,510 --> 00:15:46,959
is the directory or folder and a tree is

339
00:15:46,959 --> 00:15:48,880
nothing but a simple list of trees and

340
00:15:48,880 --> 00:15:52,660
blobs combined together along with the

341
00:15:52,660 --> 00:15:55,420
names and the file modes of those blobs

342
00:15:55,420 --> 00:15:58,600
entries and when you actually go and

343
00:15:58,600 --> 00:16:01,269
expand one of the tree object you get to

344
00:16:01,269 --> 00:16:03,850
see something like this if you um it

345
00:16:03,850 --> 00:16:07,029
actually contains entries of the blog

346
00:16:07,029 --> 00:16:10,920
under that particular tree the file mode

347
00:16:10,920 --> 00:16:12,040
charcoaled

348
00:16:12,040 --> 00:16:17,440
and the file name and just try to you

349
00:16:17,440 --> 00:16:19,269
know experiment with some of the tree

350
00:16:19,269 --> 00:16:22,089
objects you will definitely get a get I

351
00:16:22,089 --> 00:16:24,940
get an idea about it and for the same

352
00:16:24,940 --> 00:16:27,579
example if you see every folder is

353
00:16:27,579 --> 00:16:30,579
actually stored as a tree with whatever

354
00:16:30,579 --> 00:16:35,260
file it have within it okay now coming

355
00:16:35,260 --> 00:16:39,220
to the third object type commit um so we

356
00:16:39,220 --> 00:16:41,410
are storing the files and folders where

357
00:16:41,410 --> 00:16:43,480
exactly does the history part comes in

358
00:16:43,480 --> 00:16:46,180
this is where commit objects are coming

359
00:16:46,180 --> 00:16:48,640
handy so the commit object is very

360
00:16:48,640 --> 00:16:50,709
simple is much like a tree it simply

361
00:16:50,709 --> 00:16:52,959
points to a tree and keeps a track of

362
00:16:52,959 --> 00:16:56,170
the author the the commit message and

363
00:16:56,170 --> 00:16:59,140
some time stamp around it along with

364
00:16:59,140 --> 00:17:02,490
that any parent commit it's pointing to

365
00:17:02,490 --> 00:17:05,620
so if you if you actually open a commit

366
00:17:05,620 --> 00:17:11,020
object you will get to see the snapshot

367
00:17:11,020 --> 00:17:14,740
of that particular commit suppose it's a

368
00:17:14,740 --> 00:17:18,010
tree and the hash along with that and if

369
00:17:18,010 --> 00:17:20,439
there is any parent commit it's pointing

370
00:17:20,439 --> 00:17:23,949
to the hash of that particular previous

371
00:17:23,949 --> 00:17:26,290
commit along with the author committed

372
00:17:26,290 --> 00:17:29,350
information and the commit message so

373
00:17:29,350 --> 00:17:31,600
you will you will actually see all these

374
00:17:31,600 --> 00:17:32,950
things when you try to open up these

375
00:17:32,950 --> 00:17:37,300
objects and see alright done with the

376
00:17:37,300 --> 00:17:41,500
boring stuff we have understood how file

377
00:17:41,500 --> 00:17:44,260
stores are your data and some of the

378
00:17:44,260 --> 00:17:46,690
important terms let's discuss with

379
00:17:46,690 --> 00:17:48,910
discuss about some of the scenarios and

380
00:17:48,910 --> 00:17:49,780
concepts with

381
00:17:49,780 --> 00:17:52,450
with which we struggle every day first

382
00:17:52,450 --> 00:17:56,110
thing is branching um as developers we

383
00:17:56,110 --> 00:17:58,270
all know how important branching is um

384
00:17:58,270 --> 00:18:00,280
in order to maintain a cleaner workflow

385
00:18:00,280 --> 00:18:03,340
and if you're open-source maintainer for

386
00:18:03,340 --> 00:18:05,289
any big project you definitely know the

387
00:18:05,289 --> 00:18:09,280
pain of merging branches and sometimes

388
00:18:09,280 --> 00:18:10,960
you know it's very important to know how

389
00:18:10,960 --> 00:18:13,210
exactly get does this patching it will

390
00:18:13,210 --> 00:18:14,799
definitely make your life little easier

391
00:18:14,799 --> 00:18:18,070
so let's understand what how branching

392
00:18:18,070 --> 00:18:21,850
is done in gating okay let's say we have

393
00:18:21,850 --> 00:18:25,360
these three commits on your master

394
00:18:25,360 --> 00:18:28,570
branch where my head is pointing to the

395
00:18:28,570 --> 00:18:32,440
latest commit c3 let's examine the state

396
00:18:32,440 --> 00:18:35,260
of a branch so how can I do that I

397
00:18:35,260 --> 00:18:38,370
simply run git log so that I can see

398
00:18:38,370 --> 00:18:41,740
what is exactly happening in my work

399
00:18:41,740 --> 00:18:44,980
working tree so what I do I don't get

400
00:18:44,980 --> 00:18:47,440
log and I get to see the list of three

401
00:18:47,440 --> 00:18:49,570
commits and some important details

402
00:18:49,570 --> 00:18:52,500
beside the latest commit the top one

403
00:18:52,500 --> 00:18:55,600
this is the J's count for Budapest

404
00:18:55,600 --> 00:18:58,000
official website app I have cloned it

405
00:18:58,000 --> 00:19:04,480
and it's exposing some email ids and so

406
00:19:04,480 --> 00:19:06,250
what exactly you can infer from this it

407
00:19:06,250 --> 00:19:09,010
says that the head is pointing to the

408
00:19:09,010 --> 00:19:10,600
master branch and you can also see your

409
00:19:10,600 --> 00:19:12,789
upstream pointers along with the latest

410
00:19:12,789 --> 00:19:17,559
commit hash as we have already seen now

411
00:19:17,559 --> 00:19:21,159
what do I want to do next I want to

412
00:19:21,159 --> 00:19:25,559
create a new branch called reactor meter

413
00:19:25,559 --> 00:19:28,240
so that's the only branch name I got it

414
00:19:28,240 --> 00:19:29,860
to my mind when I was preparing the

415
00:19:29,860 --> 00:19:32,280
slides a sensible name so I just used it

416
00:19:32,280 --> 00:19:34,929
so we can do so by running the command

417
00:19:34,929 --> 00:19:37,299
as you can see git branch and the branch

418
00:19:37,299 --> 00:19:41,530
name now if you want to see the list of

419
00:19:41,530 --> 00:19:43,120
branches you have in your local

420
00:19:43,120 --> 00:19:45,370
repository and also some important

421
00:19:45,370 --> 00:19:47,669
details on what is your current branch

422
00:19:47,669 --> 00:19:50,650
you can run git branch and then it will

423
00:19:50,650 --> 00:19:52,870
clearly tell you that hey you're on

424
00:19:52,870 --> 00:19:58,990
master branch I'm making it in green ok

425
00:19:58,990 --> 00:20:03,910
now I have created a new branch

426
00:20:03,910 --> 00:20:07,220
what has happened held my head pointer

427
00:20:07,220 --> 00:20:09,950
is still pointing to the master but

428
00:20:09,950 --> 00:20:12,350
because I haven't switched to the newly

429
00:20:12,350 --> 00:20:16,130
created branch yet so let's so let's

430
00:20:16,130 --> 00:20:19,040
just see what get log talks about this

431
00:20:19,040 --> 00:20:22,160
workflow so when I run git git log it

432
00:20:22,160 --> 00:20:24,680
still shows that the latest commit is

433
00:20:24,680 --> 00:20:27,490
pointing to master we still have our

434
00:20:27,490 --> 00:20:30,140
origin or upstream repository pointers

435
00:20:30,140 --> 00:20:32,600
pointing to the latest commit and we

436
00:20:32,600 --> 00:20:35,030
have the reactor meter the newly created

437
00:20:35,030 --> 00:20:37,400
branch still pointing to the let us

438
00:20:37,400 --> 00:20:40,670
commit okay

439
00:20:40,670 --> 00:20:43,130
now let's switch to the newly created

440
00:20:43,130 --> 00:20:45,380
branch how can I do that I'll just run

441
00:20:45,380 --> 00:20:47,840
git checkout the branch name which I

442
00:20:47,840 --> 00:20:51,680
have already created and you can verify

443
00:20:51,680 --> 00:20:55,220
it by running it branch okay now I am

444
00:20:55,220 --> 00:20:57,620
going to react to meter branch so what

445
00:20:57,620 --> 00:21:01,460
has happened the head has moved to the

446
00:21:01,460 --> 00:21:03,950
newly created branch so it's pointing

447
00:21:03,950 --> 00:21:04,340
now

448
00:21:04,340 --> 00:21:07,370
to the reactive meter now your working

449
00:21:07,370 --> 00:21:10,040
tree will will be whatever you whatever

450
00:21:10,040 --> 00:21:11,690
changes you make from now on will be

451
00:21:11,690 --> 00:21:14,990
going into your reactor meter branch now

452
00:21:14,990 --> 00:21:18,110
if I run lick git git log for this

453
00:21:18,110 --> 00:21:20,240
particular workflow what what exactly it

454
00:21:20,240 --> 00:21:24,470
shows you can see the difference right

455
00:21:24,470 --> 00:21:26,450
so the head is actually pointing to the

456
00:21:26,450 --> 00:21:27,980
reactor meet up the newly create a

457
00:21:27,980 --> 00:21:31,430
branch and my master is still having

458
00:21:31,430 --> 00:21:34,400
this latest commit in its workflow and

459
00:21:34,400 --> 00:21:37,840
my upstream pointers are still on the

460
00:21:37,840 --> 00:21:41,420
latest commits the last commit okay

461
00:21:41,420 --> 00:21:43,370
awesome now we are able to create branch

462
00:21:43,370 --> 00:21:45,860
we have understood how git actually

463
00:21:45,860 --> 00:21:49,130
moves the pointers the significance of

464
00:21:49,130 --> 00:21:50,510
the head pointer when it comes to

465
00:21:50,510 --> 00:21:53,090
branching okay let's let's do something

466
00:21:53,090 --> 00:21:55,400
more to it let's add some more commits

467
00:21:55,400 --> 00:21:58,280
to the reactor meter branch so have

468
00:21:58,280 --> 00:22:00,770
added some commits and this is how my

469
00:22:00,770 --> 00:22:02,990
workflow would look look like now so I

470
00:22:02,990 --> 00:22:05,810
have added C 4 and C 5 commits to my

471
00:22:05,810 --> 00:22:08,060
reactor meter branch and my head is

472
00:22:08,060 --> 00:22:09,740
still pointing to reactive meter branch

473
00:22:09,740 --> 00:22:12,230
everything is awesome now I'll run git

474
00:22:12,230 --> 00:22:15,330
log what it actually tells

475
00:22:15,330 --> 00:22:17,940
it tells that my head have actually

476
00:22:17,940 --> 00:22:19,650
moved little forward it's actually

477
00:22:19,650 --> 00:22:21,240
diverged

478
00:22:21,240 --> 00:22:23,010
it's pointing to the reactive meter

479
00:22:23,010 --> 00:22:25,290
branch the LA the top commit is nothing

480
00:22:25,290 --> 00:22:27,990
but the c5 which have which have shown

481
00:22:27,990 --> 00:22:31,020
you in the previous diagram and if you

482
00:22:31,020 --> 00:22:32,940
go to commits below you will see the

483
00:22:32,940 --> 00:22:36,270
master branch it's it's somewhere behind

484
00:22:36,270 --> 00:22:40,130
right so now you can we can read git log

485
00:22:40,130 --> 00:22:45,150
clearly alright um now let's switch back

486
00:22:45,150 --> 00:22:48,960
to master branch and see what else we

487
00:22:48,960 --> 00:22:51,660
can do so have switched back ironically

488
00:22:51,660 --> 00:22:54,480
check out master and I'm back on master

489
00:22:54,480 --> 00:22:56,490
branch I have verified it by running git

490
00:22:56,490 --> 00:23:00,210
branch command so what exactly that

491
00:23:00,210 --> 00:23:03,240
commanded the check out master it

492
00:23:03,240 --> 00:23:05,490
actually did two things in move the head

493
00:23:05,490 --> 00:23:08,760
pointer back to the master master branch

494
00:23:08,760 --> 00:23:11,250
and it reverted the files in your local

495
00:23:11,250 --> 00:23:14,100
or in your working directory back to the

496
00:23:14,100 --> 00:23:16,890
snapshot the master is pointing to so

497
00:23:16,890 --> 00:23:18,810
this also means that the changes you

498
00:23:18,810 --> 00:23:21,090
make from this point forward will get

499
00:23:21,090 --> 00:23:24,110
diverged from your reactor meter branch

500
00:23:24,110 --> 00:23:27,690
okay let's let's see what git log tells

501
00:23:27,690 --> 00:23:30,540
now so I run git log in this current

502
00:23:30,540 --> 00:23:34,680
situation hey it's bad now I won't be

503
00:23:34,680 --> 00:23:36,570
seeing those top two newly added

504
00:23:36,570 --> 00:23:38,160
comments on reactor meter because I have

505
00:23:38,160 --> 00:23:40,560
switched completely to master and my

506
00:23:40,560 --> 00:23:42,240
head is clearly pointing to the master

507
00:23:42,240 --> 00:23:46,140
branch awesome now I'll go ahead and add

508
00:23:46,140 --> 00:23:49,590
some commits on master branch you can

509
00:23:49,590 --> 00:23:52,470
clearly see it has diverged from the

510
00:23:52,470 --> 00:23:54,930
reactor meter branch and the head

511
00:23:54,930 --> 00:23:57,690
pointer is yes it moved to my late newly

512
00:23:57,690 --> 00:24:01,890
added commit okay awesome so far now

513
00:24:01,890 --> 00:24:04,560
where exactly is my origin slash master

514
00:24:04,560 --> 00:24:08,580
the are stream repository markers it's

515
00:24:08,580 --> 00:24:12,210
still behind because that's where it is

516
00:24:12,210 --> 00:24:14,100
in the upstream repository and the newly

517
00:24:14,100 --> 00:24:16,470
added changes are in my local repository

518
00:24:16,470 --> 00:24:19,230
so if you actually run git log for this

519
00:24:19,230 --> 00:24:22,020
scenario you will clearly see it will

520
00:24:22,020 --> 00:24:23,790
clearly tell you that hair head is

521
00:24:23,790 --> 00:24:24,850
pointing to master

522
00:24:24,850 --> 00:24:26,920
and the top one is a newly added commit

523
00:24:26,920 --> 00:24:29,440
and my upstream markers are somewhere

524
00:24:29,440 --> 00:24:34,270
behind the latest commit so awesome

525
00:24:34,270 --> 00:24:38,800
everything is like going great now let's

526
00:24:38,800 --> 00:24:41,740
come back to our current working state

527
00:24:41,740 --> 00:24:44,410
of our working directory now if I just

528
00:24:44,410 --> 00:24:49,990
want to UM change the commit c6 I mean I

529
00:24:49,990 --> 00:24:52,870
just want to move the commit c6 into my

530
00:24:52,870 --> 00:24:55,930
reactor meter branch I don't want to

531
00:24:55,930 --> 00:24:57,790
merge them or do anything else I just

532
00:24:57,790 --> 00:25:00,640
want that single commit into my reactor

533
00:25:00,640 --> 00:25:03,370
meter something like this like I just

534
00:25:03,370 --> 00:25:05,320
want to move it into my reactor meter

535
00:25:05,320 --> 00:25:08,490
branch um here comes the concept

536
00:25:08,490 --> 00:25:11,350
cherry-picking who doesn't love

537
00:25:11,350 --> 00:25:14,320
cherry-picking yeah and get it's more

538
00:25:14,320 --> 00:25:18,010
fun so what exactly is cherry-picking is

539
00:25:18,010 --> 00:25:20,800
the act of picking a commit from a back

540
00:25:20,800 --> 00:25:23,320
branch and applying it to another branch

541
00:25:23,320 --> 00:25:25,840
that's it and get cherry-pick can be

542
00:25:25,840 --> 00:25:30,280
very useful for undoing changes so these

543
00:25:30,280 --> 00:25:32,590
are the steps how exactly can do it copy

544
00:25:32,590 --> 00:25:35,470
the commit ID the commit hash switch to

545
00:25:35,470 --> 00:25:37,060
the branch to which you want to apply

546
00:25:37,060 --> 00:25:40,030
the commit so in my case I want to

547
00:25:40,030 --> 00:25:42,030
switch to the reactor meter branch and

548
00:25:42,030 --> 00:25:47,170
I'll run cherry-pick so here I do I

549
00:25:47,170 --> 00:25:49,630
check out to the reactor meter branch

550
00:25:49,630 --> 00:25:51,910
that's where I want to add the commit to

551
00:25:51,910 --> 00:25:55,080
and then I will do the cherry picking of

552
00:25:55,080 --> 00:25:57,640
the comment which is there in the master

553
00:25:57,640 --> 00:25:59,760
branch okay awesome

554
00:25:59,760 --> 00:26:04,470
awesome but hey I got too much conflict

555
00:26:04,470 --> 00:26:05,850
yeah

556
00:26:05,850 --> 00:26:10,210
when you see this message first thing do

557
00:26:10,210 --> 00:26:14,410
not panic okay don't panic don't even

558
00:26:14,410 --> 00:26:17,410
try to delete anything it's okay

559
00:26:17,410 --> 00:26:20,680
and always remember git status is your

560
00:26:20,680 --> 00:26:23,470
friend so whenever you see a merge

561
00:26:23,470 --> 00:26:26,860
conflict doing something just type git

562
00:26:26,860 --> 00:26:28,930
status and see what it tells it will

563
00:26:28,930 --> 00:26:30,460
give you some helpful commands and

564
00:26:30,460 --> 00:26:33,460
helpful steps you can do so when when I

565
00:26:33,460 --> 00:26:37,000
language status for this workflow I have

566
00:26:37,000 --> 00:26:38,200
clearly seen

567
00:26:38,200 --> 00:26:40,540
clearly says that hey your readme dot MD

568
00:26:40,540 --> 00:26:44,350
file have a conflict and what you can do

569
00:26:44,350 --> 00:26:47,140
is resolve those conflict

570
00:26:47,140 --> 00:26:49,660
add your file to the index area and

571
00:26:49,660 --> 00:26:52,000
simply continue the cherry-picking

572
00:26:52,000 --> 00:26:54,490
command so it clearly gives you the

573
00:26:54,490 --> 00:26:56,170
instructions saying fix the conflicts

574
00:26:56,170 --> 00:26:59,710
and run git cherry-pick - - continue

575
00:26:59,710 --> 00:27:01,060
super helpful

576
00:27:01,060 --> 00:27:05,620
okay never forget this command so okay

577
00:27:05,620 --> 00:27:08,020
fine that's fine but how do I convert

578
00:27:08,020 --> 00:27:11,680
resolve the conflict yes um using some

579
00:27:11,680 --> 00:27:12,790
of the tools with which you are

580
00:27:12,790 --> 00:27:16,810
comfortable is it's great but it's still

581
00:27:16,810 --> 00:27:19,150
important to know how to read the

582
00:27:19,150 --> 00:27:25,060
commits conflict markers so first thing

583
00:27:25,060 --> 00:27:27,550
is we need to understand what git is

584
00:27:27,550 --> 00:27:30,010
trying to say so anything between the

585
00:27:30,010 --> 00:27:36,160
first two markers I wish this work okay

586
00:27:36,160 --> 00:27:40,000
yes awesome so anything between this and

587
00:27:40,000 --> 00:27:44,410
this two markers it it these changes are

588
00:27:44,410 --> 00:27:46,360
actually what are present in your

589
00:27:46,360 --> 00:27:48,240
currently checked out branch and

590
00:27:48,240 --> 00:27:52,030
anything between these two markers are

591
00:27:52,030 --> 00:27:54,670
the changes which are present in your

592
00:27:54,670 --> 00:27:56,170
master branch from the cherry-picking

593
00:27:56,170 --> 00:27:58,390
Komaki or cherry-picking

594
00:27:58,390 --> 00:28:02,110
commit changes this these are this so

595
00:28:02,110 --> 00:28:04,120
always remember anything which goes in

596
00:28:04,120 --> 00:28:06,670
these two are the changes which are

597
00:28:06,670 --> 00:28:09,730
locally you are on so these changes are

598
00:28:09,730 --> 00:28:12,010
the first to chair this particular line

599
00:28:12,010 --> 00:28:14,020
is present on a reactive meter branch

600
00:28:14,020 --> 00:28:16,530
and these changes are actually present

601
00:28:16,530 --> 00:28:19,510
in in the commit which is present on the

602
00:28:19,510 --> 00:28:23,110
master branch okay once you know what

603
00:28:23,110 --> 00:28:24,940
change you want to make sure you delete

604
00:28:24,940 --> 00:28:33,190
those beard markers and also the make

605
00:28:33,190 --> 00:28:35,320
sure you delete the extra all these

606
00:28:35,320 --> 00:28:38,560
extra markers and also the unnecessary

607
00:28:38,560 --> 00:28:42,190
change use your best knowledge and

608
00:28:42,190 --> 00:28:46,390
judgment when to make to have what you

609
00:28:46,390 --> 00:28:50,680
want - okay awesome now I have resolved

610
00:28:50,680 --> 00:28:51,940
my conflict

611
00:28:51,940 --> 00:28:54,039
continue with the cherry pick and this

612
00:28:54,039 --> 00:28:57,450
is what my current workflow contains

613
00:28:57,450 --> 00:29:00,820
okay so I have successfully cherry

614
00:29:00,820 --> 00:29:03,399
picked this particular c6 commit into my

615
00:29:03,399 --> 00:29:06,009
reactive meetup commit my head pointer

616
00:29:06,009 --> 00:29:07,539
is automatically moved to the latest

617
00:29:07,539 --> 00:29:10,240
commit awesome so I have all these

618
00:29:10,240 --> 00:29:12,330
commits in my current working directory

619
00:29:12,330 --> 00:29:14,529
okay one more thing which we need to

620
00:29:14,529 --> 00:29:16,629
remember is whenever you do run

621
00:29:16,629 --> 00:29:20,110
cherry-pick come command it won't delete

622
00:29:20,110 --> 00:29:25,870
the this old oil commit so I don't want

623
00:29:25,870 --> 00:29:27,730
that to be on master branch what can I

624
00:29:27,730 --> 00:29:35,470
do first thing I will um switch back to

625
00:29:35,470 --> 00:29:39,179
the master branch so if you remember I

626
00:29:39,179 --> 00:29:41,710
was on the reactor meter branch I'll

627
00:29:41,710 --> 00:29:43,389
switch back to the master branch because

628
00:29:43,389 --> 00:29:45,100
the comment which I want to delete is on

629
00:29:45,100 --> 00:29:47,860
master branch c6 so I'll switch back to

630
00:29:47,860 --> 00:29:50,259
master as you can see the head is

631
00:29:50,259 --> 00:29:53,230
pointing to a master branch and also

632
00:29:53,230 --> 00:29:56,740
note the parent commit for c6 the

633
00:29:56,740 --> 00:29:58,600
comment which I want to delete is c3

634
00:29:58,600 --> 00:30:04,240
okay I run the reset command very very

635
00:30:04,240 --> 00:30:05,919
helpful you know sometimes when you want

636
00:30:05,919 --> 00:30:08,320
to just undo your commits you're you're

637
00:30:08,320 --> 00:30:09,850
embarrassed of the commit message you

638
00:30:09,850 --> 00:30:12,879
have done just run git reset so I don't

639
00:30:12,879 --> 00:30:16,090
get reset - - hard head till one so I'm

640
00:30:16,090 --> 00:30:19,809
saying what I'm saying is I'm telling it

641
00:30:19,809 --> 00:30:22,450
to move the head pointer of one commit

642
00:30:22,450 --> 00:30:24,580
backward that is moved to the pedal

643
00:30:24,580 --> 00:30:26,019
commit of the command which I want to

644
00:30:26,019 --> 00:30:29,049
delete and yeah that's it you will not

645
00:30:29,049 --> 00:30:31,299
have the changes in your local working

646
00:30:31,299 --> 00:30:33,730
directory so they are getting a lot of

647
00:30:33,730 --> 00:30:36,159
arguments related to it but I will not

648
00:30:36,159 --> 00:30:40,659
go further from here again one thing you

649
00:30:40,659 --> 00:30:42,730
need to remember whenever you delete

650
00:30:42,730 --> 00:30:46,600
this c6 commit it's it is deleted from

651
00:30:46,600 --> 00:30:50,139
your branching the pointer is like

652
00:30:50,139 --> 00:30:53,139
removed from it but the get arm but the

653
00:30:53,139 --> 00:30:55,259
commit will be still existing in your

654
00:30:55,259 --> 00:30:58,809
local directory if you actually open the

655
00:30:58,809 --> 00:31:00,399
get object folder you will still see

656
00:31:00,399 --> 00:31:02,110
that hanging around there so that's

657
00:31:02,110 --> 00:31:04,690
where the gate GC command comes in handy

658
00:31:04,690 --> 00:31:05,960
it's a garbage collector come

659
00:31:05,960 --> 00:31:08,559
but get just running it removes all the

660
00:31:08,559 --> 00:31:10,789
commits which are hanging around there

661
00:31:10,789 --> 00:31:16,639
pointing to nothing okay the time but

662
00:31:16,639 --> 00:31:19,690
this is the last one okay two minutes

663
00:31:19,690 --> 00:31:23,119
merging a I won't talk about it so I

664
00:31:23,119 --> 00:31:24,409
will not leave the stage without

665
00:31:24,409 --> 00:31:27,980
completing this so so if you are a

666
00:31:27,980 --> 00:31:30,080
maintainer of any project I feel you

667
00:31:30,080 --> 00:31:34,159
okay merging is not easy so let's assume

668
00:31:34,159 --> 00:31:37,039
that this is my current workflow okay I

669
00:31:37,039 --> 00:31:39,289
have these comments on my reactor meter

670
00:31:39,289 --> 00:31:41,749
branch and that's my master branch so

671
00:31:41,749 --> 00:31:45,019
now I want to merge the reactive meter

672
00:31:45,019 --> 00:31:48,470
branch into my master branch okay so how

673
00:31:48,470 --> 00:31:51,080
do I do it I switch to the master branch

674
00:31:51,080 --> 00:31:52,820
because that's where I want to merge the

675
00:31:52,820 --> 00:31:57,110
changes into so I switched back the head

676
00:31:57,110 --> 00:32:00,429
is pointing to my master branch now and

677
00:32:00,429 --> 00:32:04,399
I run git merge react to meet up that's

678
00:32:04,399 --> 00:32:06,619
the branch which I want to merging much

679
00:32:06,619 --> 00:32:10,549
the changes from and again I warn you if

680
00:32:10,549 --> 00:32:12,289
there are any merge conflicts it will

681
00:32:12,289 --> 00:32:14,240
tell you and you know what to do if you

682
00:32:14,240 --> 00:32:16,580
see a merge conflict right I'm sure

683
00:32:16,580 --> 00:32:20,389
you're confident now and what exactly

684
00:32:20,389 --> 00:32:23,629
good does is it creates a new snapshot

685
00:32:23,629 --> 00:32:26,539
and it automatically creates a new

686
00:32:26,539 --> 00:32:30,710
commit pointing to both of these commits

687
00:32:30,710 --> 00:32:35,200
over here the commit c6 and c7 and

688
00:32:35,200 --> 00:32:37,700
something which is special about c8 is

689
00:32:37,700 --> 00:32:40,129
it's known as much commit it points it

690
00:32:40,129 --> 00:32:42,679
has two parent commits that c7 and c6

691
00:32:42,679 --> 00:32:47,509
and this once the merge is successful

692
00:32:47,509 --> 00:32:49,399
the head pointer is automatically moved

693
00:32:49,399 --> 00:32:52,369
to c8 and always remember if you are

694
00:32:52,369 --> 00:32:53,809
done with the branch please please

695
00:32:53,809 --> 00:32:56,769
PLEASE delete it it will just makes your

696
00:32:56,769 --> 00:32:59,990
log looks the branching workflow looks

697
00:32:59,990 --> 00:33:02,840
shitty so please remember that and the

698
00:33:02,840 --> 00:33:04,549
merge which I have just shown you is a

699
00:33:04,549 --> 00:33:06,769
three-way merge there there's another

700
00:33:06,769 --> 00:33:08,360
type of a merge which I don't which I

701
00:33:08,360 --> 00:33:10,460
don't want to talk about right now but

702
00:33:10,460 --> 00:33:13,999
yeah that's about merging as a final

703
00:33:13,999 --> 00:33:16,220
conclusion get is not has Gary as you

704
00:33:16,220 --> 00:33:19,500
think like if you just sit some arm

705
00:33:19,500 --> 00:33:21,990
sit on some git workflow and spend some

706
00:33:21,990 --> 00:33:24,180
time to understand no branching and

707
00:33:24,180 --> 00:33:26,700
these all day-to-day commands we run you

708
00:33:26,700 --> 00:33:29,670
will become a professor and some of the

709
00:33:29,670 --> 00:33:34,290
important resources yes the

710
00:33:34,290 --> 00:33:36,570
documentation we are scared of it

711
00:33:36,570 --> 00:33:39,000
but it's it's very useful if you

712
00:33:39,000 --> 00:33:40,770
actually understand some of the terms

713
00:33:40,770 --> 00:33:43,290
it's it's very useful and also the GUID

714
00:33:43,290 --> 00:33:46,890
Pro book is amazing ok just Google

715
00:33:46,890 --> 00:33:48,810
forget Pro book it's it's open source

716
00:33:48,810 --> 00:33:50,870
it's it talks about different scenarios

717
00:33:50,870 --> 00:33:53,370
merging rebasing all these different

718
00:33:53,370 --> 00:33:54,630
concepts it's amazing

719
00:33:54,630 --> 00:33:57,120
give it a try and hey that's how you can

720
00:33:57,120 --> 00:33:59,760
tame the guitar Souris be confident in

721
00:33:59,760 --> 00:34:01,670
what your command you run you can

722
00:34:01,670 --> 00:34:04,350
definitely do it and that's the end

723
00:34:04,350 --> 00:34:05,950
thank you

