1
00:00:00,320 --> 00:00:02,070

[Music]

2
00:00:02,070 --> 00:00:03,840
[Applause]

3
00:00:03,840 --> 00:00:05,660
[Music]

4
00:00:05,660 --> 00:00:07,410
[Applause]

5
00:00:07,410 --> 00:00:09,280
[Music]

6
00:00:09,280 --> 00:00:11,020
[Applause]

7
00:00:11,020 --> 00:00:12,780
[Music]

8
00:00:12,780 --> 00:00:16,860
[Applause]

9
00:00:16,870 --> 00:00:25,939
[Music]

10
00:00:25,949 --> 00:00:29,380
all right thank you very much

11
00:00:29,380 --> 00:00:31,329
where should I put this I'm gonna put it

12
00:00:31,329 --> 00:00:33,550
up here y'all can check that out all

13
00:00:33,550 --> 00:00:34,629
right so welcome to my talk

14
00:00:34,629 --> 00:00:37,180
this is universal react applications

15
00:00:37,180 --> 00:00:40,930
with redux which is the most buzzword II

16
00:00:40,930 --> 00:00:43,270
title I can think of in the 5 seconds I

17
00:00:43,270 --> 00:00:46,690
was trying to sign up for a talk what

18
00:00:46,690 --> 00:00:49,890
happened oh we went to sleep

19
00:00:49,890 --> 00:00:55,570
are we back yet alright we're back I'll

20
00:00:55,570 --> 00:00:59,230
try to remember to poke that thing okay

21
00:00:59,230 --> 00:01:01,870
so by way of introduction my name is

22
00:01:01,870 --> 00:01:04,089
Brad I build things with react and redux

23
00:01:04,089 --> 00:01:06,490
at spread fast which is based in Austin

24
00:01:06,490 --> 00:01:09,570
Texas anyone from Austin shout out

25
00:01:09,570 --> 00:01:13,030
excellent yes it's too hot there though

26
00:01:13,030 --> 00:01:17,110
so but good on you my first passion is

27
00:01:17,110 --> 00:01:19,479
actually music that's the most

28
00:01:19,479 --> 00:01:20,799
embarrassing photo I've ever shown this

29
00:01:20,799 --> 00:01:23,229
many people you can't really see it but

30
00:01:23,229 --> 00:01:24,490
that is a true mullet

31
00:01:24,490 --> 00:01:26,220
there there's a little bit you can see

32
00:01:26,220 --> 00:01:28,090
and I obviously know what I'm doing

33
00:01:28,090 --> 00:01:30,240
because the guitar is upside down I

34
00:01:30,240 --> 00:01:32,590
promise you I know more now so if you're

35
00:01:32,590 --> 00:01:34,000
into like guitar shredding videos

36
00:01:34,000 --> 00:01:37,000
there's an Instagram shameless plug and

37
00:01:37,000 --> 00:01:41,470
I'm also recently a dad this is my son

38
00:01:41,470 --> 00:01:44,680
Remington thank you

39
00:01:44,680 --> 00:01:48,189
as of July 1st so if my talk seems

40
00:01:48,189 --> 00:01:52,570
underprepared it's his fault so I just

41
00:01:52,570 --> 00:01:54,580
want to start out by saying I love Redux

42
00:01:54,580 --> 00:01:57,220
how many of you use Redux at work I'm

43
00:01:57,220 --> 00:01:58,780
assuming most of you because you came to

44
00:01:58,780 --> 00:02:00,970
this talk hopefully but I just want to

45
00:02:00,970 --> 00:02:02,140
say that because I feel like it gets a

46
00:02:02,140 --> 00:02:04,030
lot of crap and I think it's awesome and

47
00:02:04,030 --> 00:02:06,329
it has made my day job a lot easier

48
00:02:06,329 --> 00:02:12,849
so why this talk I saw this tweet when

49
00:02:12,849 --> 00:02:13,480
did this happen

50
00:02:13,480 --> 00:02:16,829
I don't know a little bit ago mid-july

51
00:02:16,829 --> 00:02:19,090
was asking is anyone doing this is

52
00:02:19,090 --> 00:02:20,860
anyone using Redux on the web and

53
00:02:20,860 --> 00:02:22,510
sharing their Redux code with react

54
00:02:22,510 --> 00:02:25,360
native project but not sharing you

55
00:02:25,360 --> 00:02:28,300
and we've been doing this for years and

56
00:02:28,300 --> 00:02:29,770
I thought is this interesting for people

57
00:02:29,770 --> 00:02:31,690
to know maybe actually give an

58
00:02:31,690 --> 00:02:33,580
experience report and just talk about

59
00:02:33,580 --> 00:02:34,570
some of the challenges and what works

60
00:02:34,570 --> 00:02:37,450
well and what doesn't so this talk might

61
00:02:37,450 --> 00:02:39,190
be interesting to you if you have a

62
00:02:39,190 --> 00:02:40,810
Redux app and you're looking about

63
00:02:40,810 --> 00:02:42,310
thinking about making a mobile app

64
00:02:42,310 --> 00:02:44,740
you're looking at react native maybe

65
00:02:44,740 --> 00:02:46,780
you're just curious about mobile or

66
00:02:46,780 --> 00:02:48,010
maybe for some other reason you're

67
00:02:48,010 --> 00:02:50,170
looking to recompose your Redux

68
00:02:50,170 --> 00:02:51,910
applications together into other

69
00:02:51,910 --> 00:02:56,410
applications so this is kind of what's

70
00:02:56,410 --> 00:02:58,030
going to be important is to understand

71
00:02:58,030 --> 00:02:59,380
the decisions that we've made is to

72
00:02:59,380 --> 00:03:00,880
understand the organizational structure

73
00:03:00,880 --> 00:03:02,800
so for us our org kind of looks like

74
00:03:02,800 --> 00:03:05,170
this we have many different web apps

75
00:03:05,170 --> 00:03:07,300
that are all standardized on react and

76
00:03:07,300 --> 00:03:10,000
redux and there's a lot of different

77
00:03:10,000 --> 00:03:12,120
teams and they're basically independent

78
00:03:12,120 --> 00:03:15,100
we have to or in the past we've had two

79
00:03:15,100 --> 00:03:17,380
mobile developers a native iOS developer

80
00:03:17,380 --> 00:03:19,620
and a native Android developer and they

81
00:03:19,620 --> 00:03:21,760
try to keep up you can see they're very

82
00:03:21,760 --> 00:03:24,610
worried about keeping up with features

83
00:03:24,610 --> 00:03:26,530
that are being deployed on the web apps

84
00:03:26,530 --> 00:03:29,500
and so what we've done is added a few

85
00:03:29,500 --> 00:03:32,140
people like myself who are comfortable

86
00:03:32,140 --> 00:03:34,720
with JavaScript also mildly comfortable

87
00:03:34,720 --> 00:03:37,450
with doing native stuff and also told

88
00:03:37,450 --> 00:03:39,640
the native developers they will be

89
00:03:39,640 --> 00:03:41,170
writing JavaScript which you can see

90
00:03:41,170 --> 00:03:45,160
they're super excited about so how does

91
00:03:45,160 --> 00:03:49,540
this work here's an example here's the

92
00:03:49,540 --> 00:03:51,700
web app we're using react and redux that

93
00:03:51,700 --> 00:03:53,680
stuff goes through web pack there's a

94
00:03:53,680 --> 00:03:55,360
bundle that gets deployed perfect you

95
00:03:55,360 --> 00:03:57,850
guys know that part what we chose to do

96
00:03:57,850 --> 00:04:01,840
is I'll go in and drop a rollup config

97
00:04:01,840 --> 00:04:03,880
in each of those repos and make a

98
00:04:03,880 --> 00:04:05,560
separate bundle that's just the stuff

99
00:04:05,560 --> 00:04:07,870
that we want to consume so we'll see

100
00:04:07,870 --> 00:04:09,190
what's in that bundle is just your your

101
00:04:09,190 --> 00:04:11,770
reducers your actions your selectors and

102
00:04:11,770 --> 00:04:13,510
there's an asterisk which we'll talk

103
00:04:13,510 --> 00:04:19,359
about later so how to make a bundle it

104
00:04:19,359 --> 00:04:22,240
looks something like this you create a

105
00:04:22,240 --> 00:04:25,150
new entry point and then just import

106
00:04:25,150 --> 00:04:27,850
just the things that you need so here

107
00:04:27,850 --> 00:04:29,440
we're importing everything from this

108
00:04:29,440 --> 00:04:31,210
widget reducer and we're kind of giving

109
00:04:31,210 --> 00:04:32,650
ourselves some kind of standard

110
00:04:32,650 --> 00:04:34,180
structure for this package is going to

111
00:04:34,180 --> 00:04:35,770
export reducers and actions and

112
00:04:35,770 --> 00:04:38,020
selectors you can use whatever

113
00:04:38,020 --> 00:04:39,580
format organization works for you this

114
00:04:39,580 --> 00:04:44,229
is just what we do and you will not want

115
00:04:44,229 --> 00:04:46,419
to import everything there's going to be

116
00:04:46,419 --> 00:04:47,949
stuff that's web specific like your

117
00:04:47,949 --> 00:04:50,550
router reducer if you're doing that

118
00:04:50,550 --> 00:04:53,889
things that are web specific that you

119
00:04:53,889 --> 00:04:57,460
will not want to import so I want to

120
00:04:57,460 --> 00:04:59,530
take a second and talk about why you

121
00:04:59,530 --> 00:05:01,960
should bundle or why do that because

122
00:05:01,960 --> 00:05:04,539
it's not actually the standard in react

123
00:05:04,539 --> 00:05:06,729
native applications to bundle your

124
00:05:06,729 --> 00:05:08,560
JavaScript most react native libraries

125
00:05:08,560 --> 00:05:12,880
just ship JavaScript source why would

126
00:05:12,880 --> 00:05:15,370
you do that that sounds insane it kind

127
00:05:15,370 --> 00:05:18,610
of is but the reasons we chose to do a

128
00:05:18,610 --> 00:05:20,860
bundle is because hey it provides us a

129
00:05:20,860 --> 00:05:23,380
chance to catch things at compile time

130
00:05:23,380 --> 00:05:27,190
so these are things like there was one

131
00:05:27,190 --> 00:05:29,650
project that had a selector that was

132
00:05:29,650 --> 00:05:32,710
returning SPG's based on some state

133
00:05:32,710 --> 00:05:34,300
that's obviously not something we can

134
00:05:34,300 --> 00:05:36,490
use on mobile so that had to get

135
00:05:36,490 --> 00:05:38,830
reflected out into the component and so

136
00:05:38,830 --> 00:05:40,449
this you have a chance now to catch

137
00:05:40,449 --> 00:05:41,590
things like that that aren't going to

138
00:05:41,590 --> 00:05:43,240
work on mobile at compile time

139
00:05:43,240 --> 00:05:45,699
the second reason which is really the

140
00:05:45,699 --> 00:05:48,880
bigger reason is that a single point of

141
00:05:48,880 --> 00:05:52,000
entry provides you some encapsulation so

142
00:05:52,000 --> 00:05:54,849
that a developer can't just go require

143
00:05:54,849 --> 00:05:56,529
into source of your application that you

144
00:05:56,529 --> 00:05:57,909
shipped and use something you didn't

145
00:05:57,909 --> 00:05:59,889
intend to be used in your mobile

146
00:05:59,889 --> 00:06:01,719
application so I think those two things

147
00:06:01,719 --> 00:06:05,099
were enough to make that choice for us

148
00:06:05,099 --> 00:06:08,169
some of the issues with bundling the ES

149
00:06:08,169 --> 00:06:12,009
target is weird but it's not that weird

150
00:06:12,009 --> 00:06:15,580
there's react native implements its own

151
00:06:15,580 --> 00:06:19,090
version of Babel helpers and so you want

152
00:06:19,090 --> 00:06:20,710
to use external helpers it also

153
00:06:20,710 --> 00:06:23,139
implements async/await natively and

154
00:06:23,139 --> 00:06:25,690
that's because of performance and

155
00:06:25,690 --> 00:06:28,960
reasons and so you don't want you want

156
00:06:28,960 --> 00:06:30,279
to use external helpers and you don't

157
00:06:30,279 --> 00:06:32,710
want to compile async/await

158
00:06:32,710 --> 00:06:34,300
and so it's actually really easy to do

159
00:06:34,300 --> 00:06:36,699
that if you're using roll-up at least

160
00:06:36,699 --> 00:06:38,560
you say I want external helpers this is

161
00:06:38,560 --> 00:06:40,449
your babel config and roll up and you

162
00:06:40,449 --> 00:06:42,759
say transform syntax async functions so

163
00:06:42,759 --> 00:06:43,719
the battle knows what you're talking

164
00:06:43,719 --> 00:06:46,509
about but it won't touch it and then you

165
00:06:46,509 --> 00:06:47,889
have something that you can consume in

166
00:06:47,889 --> 00:06:51,669
your react native application some other

167
00:06:51,669 --> 00:06:52,300
gotchas

168
00:06:52,300 --> 00:06:54,220
you're obviously if you're not familiar

169
00:06:54,220 --> 00:06:56,740
I'll just do a quick review the react

170
00:06:56,740 --> 00:06:58,990
native is running in a JavaScript

171
00:06:58,990 --> 00:07:02,620
context that does not have any access to

172
00:07:02,620 --> 00:07:06,100
Dom api's or any other wave api's that

173
00:07:06,100 --> 00:07:07,600
you're normally used to it is a

174
00:07:07,600 --> 00:07:08,410
bare-bones

175
00:07:08,410 --> 00:07:10,930
like JavaScript interpreter environment

176
00:07:10,930 --> 00:07:13,660
so anything in your web code that is

177
00:07:13,660 --> 00:07:16,330
referencing window or Dom like if you're

178
00:07:16,330 --> 00:07:19,510
doing local storage get item as the

179
00:07:19,510 --> 00:07:21,340
default value in your reducer which you

180
00:07:21,340 --> 00:07:22,630
shouldn't do but if you're doing that

181
00:07:22,630 --> 00:07:26,500
and I've seen that move that out just

182
00:07:26,500 --> 00:07:27,790
move that into your components anything

183
00:07:27,790 --> 00:07:29,320
that's web specific should probably live

184
00:07:29,320 --> 00:07:33,330
in your components anyways so that's my

185
00:07:33,330 --> 00:07:35,560
thought there the other part of this

186
00:07:35,560 --> 00:07:37,060
which is really sort of the same thing

187
00:07:37,060 --> 00:07:40,000
is if you have some static config so

188
00:07:40,000 --> 00:07:43,660
most web projects can just generate a

189
00:07:43,660 --> 00:07:45,250
bundle with some static config and

190
00:07:45,250 --> 00:07:48,460
that's going to be the same for each

191
00:07:48,460 --> 00:07:49,750
host you just make a different bundle

192
00:07:49,750 --> 00:07:51,430
for each host that you deploy to right

193
00:07:51,430 --> 00:07:53,830
so you can do all that at compile time

194
00:07:53,830 --> 00:07:58,840
and that's easy at on mobile you're

195
00:07:58,840 --> 00:08:01,180
probably going to want to hit multiple

196
00:08:01,180 --> 00:08:02,260
different environments and switch

197
00:08:02,260 --> 00:08:04,330
between them at runtime right you're

198
00:08:04,330 --> 00:08:05,560
going to want to have some kind of like

199
00:08:05,560 --> 00:08:07,180
dev settings interface where you say

200
00:08:07,180 --> 00:08:09,700
okay go look at this other environment

201
00:08:09,700 --> 00:08:11,950
or just for the pure effect that you

202
00:08:11,950 --> 00:08:15,190
might hit you might be doing like third

203
00:08:15,190 --> 00:08:16,900
tier domain stuff where this company is

204
00:08:16,900 --> 00:08:18,040
on this domain this company is on that

205
00:08:18,040 --> 00:08:19,600
domain and you might need to switch

206
00:08:19,600 --> 00:08:22,180
between them and that's now needs to

207
00:08:22,180 --> 00:08:23,770
happen at runtime rather than on at

208
00:08:23,770 --> 00:08:25,300
compile time so you have to care about

209
00:08:25,300 --> 00:08:27,340
that and so the solution for that is

210
00:08:27,340 --> 00:08:28,720
really simple you just move it to your

211
00:08:28,720 --> 00:08:30,550
components this is one possible solution

212
00:08:30,550 --> 00:08:34,900
that we do is to just do the same static

213
00:08:34,900 --> 00:08:36,460
config but then dispatch that from your

214
00:08:36,460 --> 00:08:38,440
components and move that stuff to state

215
00:08:38,440 --> 00:08:41,080
and then in your actions later on you

216
00:08:41,080 --> 00:08:42,700
can select that information out of state

217
00:08:42,700 --> 00:08:45,700
and it's all in sync and nice there's

218
00:08:45,700 --> 00:08:46,660
probably some other ways you can solve

219
00:08:46,660 --> 00:08:50,170
that but that's how we did it another

220
00:08:50,170 --> 00:08:52,690
thing declaring externals this is not

221
00:08:52,690 --> 00:08:55,420
really an issue so much as just a

222
00:08:55,420 --> 00:08:56,890
reality so it's something to be aware of

223
00:08:56,890 --> 00:08:58,450
and you should probably be aware of this

224
00:08:58,450 --> 00:09:02,080
with your web bundles anyways is do you

225
00:09:02,080 --> 00:09:03,310
want to declare all of your period

226
00:09:03,310 --> 00:09:04,870
appendices to be external because you

227
00:09:04,870 --> 00:09:06,100
can definitely end up ship

228
00:09:06,100 --> 00:09:09,220
like react Tom and you didn't mean to in

229
00:09:09,220 --> 00:09:11,350
your bundle and you don't want to do

230
00:09:11,350 --> 00:09:13,110
that so just a friendly reminder

231
00:09:13,110 --> 00:09:17,470
probably the biggest well this is not

232
00:09:17,470 --> 00:09:19,720
really a huge issue at the end of the

233
00:09:19,720 --> 00:09:22,240
day you can't use NPM link with the

234
00:09:22,240 --> 00:09:23,769
react native packager it just doesn't

235
00:09:23,769 --> 00:09:25,180
work so if you were thinking that you

236
00:09:25,180 --> 00:09:27,610
could debug creating your entry point

237
00:09:27,610 --> 00:09:30,339
file and your bundle and use NPM link to

238
00:09:30,339 --> 00:09:32,170
nicely do that while you're consuming it

239
00:09:32,170 --> 00:09:34,110
and test it in the consuming application

240
00:09:34,110 --> 00:09:36,339
you can't do that and you're gonna end

241
00:09:36,339 --> 00:09:37,959
up copying files on the file system

242
00:09:37,959 --> 00:09:40,959
that's you'll notice this is issue

243
00:09:40,959 --> 00:09:42,730
number one when they moved to Metro

244
00:09:42,730 --> 00:09:45,069
bundler it was copied over from the old

245
00:09:45,069 --> 00:09:48,850
react native repo so I guess you could

246
00:09:48,850 --> 00:09:50,110
be a hero if you want to fix this I'm

247
00:09:50,110 --> 00:09:51,940
sure there's many people who would give

248
00:09:51,940 --> 00:09:57,350
you beer ah let's take a break

249
00:09:57,360 --> 00:10:00,100
you will see him twice more I apologize

250
00:10:00,100 --> 00:10:04,480
if you don't think he's cute he's pretty

251
00:10:04,480 --> 00:10:06,240
cute though

252
00:10:06,240 --> 00:10:13,600
alright so using the bundle so now we've

253
00:10:13,600 --> 00:10:16,300
moved from your web application who's

254
00:10:16,300 --> 00:10:17,980
making a bundle and publishing some code

255
00:10:17,980 --> 00:10:20,529
to your mobile application that's trying

256
00:10:20,529 --> 00:10:23,829
to consume it and so you may have only

257
00:10:23,829 --> 00:10:24,939
one application that you're trying to

258
00:10:24,939 --> 00:10:26,529
share in our case we were trying to

259
00:10:26,529 --> 00:10:28,689
compose multiple web applications down

260
00:10:28,689 --> 00:10:30,730
into one mobile application that is

261
00:10:30,730 --> 00:10:32,439
trying to implement all of them in one

262
00:10:32,439 --> 00:10:36,430
native app and so here you can see we're

263
00:10:36,430 --> 00:10:39,699
importing reducers we're aliasing them

264
00:10:39,699 --> 00:10:42,130
and we're combining them into one

265
00:10:42,130 --> 00:10:43,810
reducer and you notice we export

266
00:10:43,810 --> 00:10:46,089
selectors to get at each of those pieces

267
00:10:46,089 --> 00:10:48,630
of state which will be important later

268
00:10:48,630 --> 00:10:51,670
and then this is what a container would

269
00:10:51,670 --> 00:10:53,139
look like basically what you're doing

270
00:10:53,139 --> 00:10:55,620
most of your work in the mobile app is

271
00:10:55,620 --> 00:10:57,850
wiring up new containers and creating

272
00:10:57,850 --> 00:11:01,600
new user interface in components and

273
00:11:01,600 --> 00:11:03,579
you're reusing the same actions and

274
00:11:03,579 --> 00:11:05,199
selectors that you would use so here

275
00:11:05,199 --> 00:11:07,360
we're importing some actions we're

276
00:11:07,360 --> 00:11:10,839
importing some selectors and we create a

277
00:11:10,839 --> 00:11:12,790
container and this is too much code for

278
00:11:12,790 --> 00:11:14,589
one slide I apologize this is the

279
00:11:14,589 --> 00:11:17,889
important bit you'll notice here we're

280
00:11:17,889 --> 00:11:19,450
using reselect as anyone

281
00:11:19,450 --> 00:11:21,130
use reselect how many of you are

282
00:11:21,130 --> 00:11:23,980
familiar with reselect have used it okay

283
00:11:23,980 --> 00:11:28,180
some hands not a ton of hands basically

284
00:11:28,180 --> 00:11:30,040
the important thing to know is that a

285
00:11:30,040 --> 00:11:32,650
selector is doing something to get State

286
00:11:32,650 --> 00:11:34,570
right it's it's grabbing your state and

287
00:11:34,570 --> 00:11:36,160
it's going dot whatever it out whatever

288
00:11:36,160 --> 00:11:37,950
that whatever to get you some value out

289
00:11:37,950 --> 00:11:40,630
and it does fancier things because

290
00:11:40,630 --> 00:11:44,020
performance so what we're doing here you

291
00:11:44,020 --> 00:11:46,900
notice we're wrapping our selectors that

292
00:11:46,900 --> 00:11:49,720
we imported in a transform to get at the

293
00:11:49,720 --> 00:11:52,480
state and that's because we moved State

294
00:11:52,480 --> 00:11:54,700
around right those selectors would be

295
00:11:54,700 --> 00:11:56,620
looking at the wrong state shape if we

296
00:11:56,620 --> 00:11:58,360
didn't do this but this is an easy

297
00:11:58,360 --> 00:12:01,420
solution and this that selector that we

298
00:12:01,420 --> 00:12:04,480
exported before it can be a simple just

299
00:12:04,480 --> 00:12:06,970
property access like it is here and it

300
00:12:06,970 --> 00:12:08,860
might actually be more complex and we'll

301
00:12:08,860 --> 00:12:12,070
see an example of why later on so great

302
00:12:12,070 --> 00:12:16,620
this works we're done thank you bye

303
00:12:16,620 --> 00:12:21,190
could this be a trap maybe there's some

304
00:12:21,190 --> 00:12:24,850
gotchas so like we were just talking

305
00:12:24,850 --> 00:12:28,000
about how many of you use Redux func to

306
00:12:28,000 --> 00:12:32,100
do your async stuff so a lot of people

307
00:12:32,100 --> 00:12:37,260
quick survey redux promise no no means

308
00:12:37,260 --> 00:12:41,290
Sagas okay I think you have this problem

309
00:12:41,290 --> 00:12:42,820
everywhere if you're changing your state

310
00:12:42,820 --> 00:12:44,560
shape this is how we solved it with

311
00:12:44,560 --> 00:12:47,890
thunks because we use thunks so the

312
00:12:47,890 --> 00:12:49,300
selectors that are in your thunks

313
00:12:49,300 --> 00:12:50,560
remember they're in your web app code

314
00:12:50,560 --> 00:12:52,840
they depend on the shape of the state

315
00:12:52,840 --> 00:12:55,000
that your web app expected in the first

316
00:12:55,000 --> 00:12:56,920
place when it was written and so it's

317
00:12:56,920 --> 00:12:58,900
coupled to that state shape so just an

318
00:12:58,900 --> 00:13:00,550
example here let's pretend that load

319
00:13:00,550 --> 00:13:02,800
which widgets uses the get page number

320
00:13:02,800 --> 00:13:04,810
selector right this is going to blow up

321
00:13:04,810 --> 00:13:05,980
when you try to run it in your mobile

322
00:13:05,980 --> 00:13:07,870
application if you move that state

323
00:13:07,870 --> 00:13:10,450
around like we did so how do you fix

324
00:13:10,450 --> 00:13:14,500
this this is a bad name for a thing I'm

325
00:13:14,500 --> 00:13:16,480
sorry naming is hard but this is the

326
00:13:16,480 --> 00:13:19,440
name that I came up with a func adaptor

327
00:13:19,440 --> 00:13:22,000
basically what it does is it wraps your

328
00:13:22,000 --> 00:13:24,250
thunk it returns you another thunk you

329
00:13:24,250 --> 00:13:26,290
give it a transform and it'll make sure

330
00:13:26,290 --> 00:13:28,090
that when your thunk calls get state and

331
00:13:28,090 --> 00:13:31,150
any it gets the transformed state and

332
00:13:31,150 --> 00:13:33,430
not your original station

333
00:13:33,430 --> 00:13:34,840
and then it also makes sure that when

334
00:13:34,840 --> 00:13:36,430
you dispatch other thunks from that

335
00:13:36,430 --> 00:13:38,890
thunk that those also get the transform

336
00:13:38,890 --> 00:13:42,790
state and this works this is an example

337
00:13:42,790 --> 00:13:45,610
of usage pretend that that create func

338
00:13:45,610 --> 00:13:47,590
adapter exists and it does that what I

339
00:13:47,590 --> 00:13:50,260
just described so you can it works kind

340
00:13:50,260 --> 00:13:52,000
of like connect where you call it with

341
00:13:52,000 --> 00:13:53,380
the transform it gives you a function

342
00:13:53,380 --> 00:13:55,810
that you can then use to wrap your

343
00:13:55,810 --> 00:13:58,690
thunks and so that's what that looks

344
00:13:58,690 --> 00:14:01,300
like you can just copy this code if you

345
00:14:01,300 --> 00:14:03,190
want it's just it's a small function

346
00:14:03,190 --> 00:14:06,100
it's not a big deal but that exists okay

347
00:14:06,100 --> 00:14:10,420
so if you we we survived that our app

348
00:14:10,420 --> 00:14:13,210
can now run it can be compiled consumed

349
00:14:13,210 --> 00:14:15,070
and we can actually run and dispatch

350
00:14:15,070 --> 00:14:24,070
actions and things work okay so Q he's

351
00:14:24,070 --> 00:14:30,370
so fat all right so this next section of

352
00:14:30,370 --> 00:14:33,490
things is going to be more less like

353
00:14:33,490 --> 00:14:34,900
issues and fixing things because we

354
00:14:34,900 --> 00:14:36,940
already got our app working there's

355
00:14:36,940 --> 00:14:38,320
going to be situations where either

356
00:14:38,320 --> 00:14:40,480
because of design or because of what you

357
00:14:40,480 --> 00:14:43,890
want to achieve you're going to want to

358
00:14:43,890 --> 00:14:45,970
augment the behavior or enhance the

359
00:14:45,970 --> 00:14:47,890
behavior that the web application gave

360
00:14:47,890 --> 00:14:49,420
you to do something that's more specific

361
00:14:49,420 --> 00:14:51,700
to what you want on mobile and you want

362
00:14:51,700 --> 00:14:54,400
to try to do that in as least as little

363
00:14:54,400 --> 00:14:57,870
obtrusive not intrusive ly as possible

364
00:14:57,870 --> 00:15:00,190
so that these are the there's an example

365
00:15:00,190 --> 00:15:04,120
of that so on your web application you

366
00:15:04,120 --> 00:15:05,790
might have like a search and filter and

367
00:15:05,790 --> 00:15:07,930
those changes are happening live you

368
00:15:07,930 --> 00:15:10,180
click the buttons the request has made

369
00:15:10,180 --> 00:15:12,790
it you see the results it's all changing

370
00:15:12,790 --> 00:15:14,680
live but on mobile your designs maybe

371
00:15:14,680 --> 00:15:17,170
have like a cancel apply pattern where

372
00:15:17,170 --> 00:15:18,490
you don't want to actually make the

373
00:15:18,490 --> 00:15:19,839
request until later and you want to be

374
00:15:19,839 --> 00:15:23,550
able to cancel back to some old state

375
00:15:23,550 --> 00:15:25,930
that's not functionality that your web

376
00:15:25,930 --> 00:15:28,330
app built and you shouldn't necessarily

377
00:15:28,330 --> 00:15:30,310
have to refactor your entire web app

378
00:15:30,310 --> 00:15:33,760
just to get this on mobile right so how

379
00:15:33,760 --> 00:15:37,300
could we do this we can use a

380
00:15:37,300 --> 00:15:39,370
higher-order reducer reducer enhancer or

381
00:15:39,370 --> 00:15:41,800
whatever word you want to call that this

382
00:15:41,800 --> 00:15:45,010
function takes this is imaginary this is

383
00:15:45,010 --> 00:15:45,850
something that we've written in our

384
00:15:45,850 --> 00:15:46,990
application but here it's

385
00:15:46,990 --> 00:15:49,510
imaginary we're passing in a reducer

386
00:15:49,510 --> 00:15:51,310
that controls some state that we want to

387
00:15:51,310 --> 00:15:53,320
be able to cancel back to and it takes

388
00:15:53,320 --> 00:15:56,350
an action type to mark the value of

389
00:15:56,350 --> 00:15:58,149
state that you want to potentially go

390
00:15:58,149 --> 00:16:00,459
back to so like this would be the action

391
00:16:00,459 --> 00:16:01,870
that you fire when you navigate to that

392
00:16:01,870 --> 00:16:04,510
modal screen and then it also takes a

393
00:16:04,510 --> 00:16:06,520
cancel action which tells it yeah we

394
00:16:06,520 --> 00:16:07,990
actually do want to cancel back please

395
00:16:07,990 --> 00:16:09,580
restore the state that you marked

396
00:16:09,580 --> 00:16:13,089
previously and then your state is going

397
00:16:13,089 --> 00:16:15,279
to look like this right here this is it

398
00:16:15,279 --> 00:16:16,930
was flow I changed it to typescript

399
00:16:16,930 --> 00:16:18,610
because of the NPM talk I guess more

400
00:16:18,610 --> 00:16:21,070
people use typescript and flow but

401
00:16:21,070 --> 00:16:22,870
that's okay your state's gonna look

402
00:16:22,870 --> 00:16:25,000
something like this right where your

403
00:16:25,000 --> 00:16:26,830
state is now wrapped into properties

404
00:16:26,830 --> 00:16:28,959
mark state and state and you just want

405
00:16:28,959 --> 00:16:31,089
to select out the current state and

406
00:16:31,089 --> 00:16:33,640
that's the situation where remember

407
00:16:33,640 --> 00:16:35,980
earlier we talked about your state

408
00:16:35,980 --> 00:16:37,649
selectors when you change state around

409
00:16:37,649 --> 00:16:40,029
may just be simple or they may be more

410
00:16:40,029 --> 00:16:41,470
complex this is a case where it may be

411
00:16:41,470 --> 00:16:43,420
more complex where you want to be able

412
00:16:43,420 --> 00:16:47,470
to present the web applications code the

413
00:16:47,470 --> 00:16:49,810
actual pass-through state and not this

414
00:16:49,810 --> 00:16:53,860
cancelable State thing cool so we fixed

415
00:16:53,860 --> 00:16:54,040
that

416
00:16:54,040 --> 00:16:57,160
what's another use case maybe you want

417
00:16:57,160 --> 00:17:01,300
to be able to reset data here I'm

418
00:17:01,300 --> 00:17:02,790
talking about pagination this could be

419
00:17:02,790 --> 00:17:05,110
any other type of situation where you

420
00:17:05,110 --> 00:17:08,770
need to reset data say you have your web

421
00:17:08,770 --> 00:17:10,660
app is has an interface where it's

422
00:17:10,660 --> 00:17:13,120
paging data and because that's all they

423
00:17:13,120 --> 00:17:14,500
were doing they're throwing the data

424
00:17:14,500 --> 00:17:18,069
away every time you change the page but

425
00:17:18,069 --> 00:17:19,750
on mobile the designs are that you have

426
00:17:19,750 --> 00:17:21,339
an infinite scroll and you need to keep

427
00:17:21,339 --> 00:17:23,410
that data around do you have to refactor

428
00:17:23,410 --> 00:17:25,540
you could refactor your web application

429
00:17:25,540 --> 00:17:29,190
to instead like window into that data

430
00:17:29,190 --> 00:17:31,179
but remember we're trying to be

431
00:17:31,179 --> 00:17:33,820
unobtrusive can we do this we can do

432
00:17:33,820 --> 00:17:36,400
this in a similar way by in having a

433
00:17:36,400 --> 00:17:41,080
higher-order reducer here we're here is

434
00:17:41,080 --> 00:17:42,790
the case where we want to keep data

435
00:17:42,790 --> 00:17:45,220
around but the consuming reducer is

436
00:17:45,220 --> 00:17:46,900
throwing it away you know we can

437
00:17:46,900 --> 00:17:49,420
intercept this data loaded imaginary

438
00:17:49,420 --> 00:17:51,429
data loaded action we can get the old

439
00:17:51,429 --> 00:17:53,710
value from state and then we can call

440
00:17:53,710 --> 00:17:55,929
the reducer that we're consuming and do

441
00:17:55,929 --> 00:17:57,730
some glue code to merge those together

442
00:17:57,730 --> 00:17:59,980
which Java is pretty simple to do right

443
00:17:59,980 --> 00:18:00,310
you

444
00:18:00,310 --> 00:18:01,660
you're using like an immutable

445
00:18:01,660 --> 00:18:05,500
collection you just merge those or go

446
00:18:05,500 --> 00:18:06,280
the opposite way

447
00:18:06,280 --> 00:18:08,650
right you could instead before you call

448
00:18:08,650 --> 00:18:10,840
the reducer you're consuming clear out

449
00:18:10,840 --> 00:18:14,860
the data that's there to get the paging

450
00:18:14,860 --> 00:18:18,220
behavior and obviously you can solve

451
00:18:18,220 --> 00:18:19,330
those in multiple different ways these

452
00:18:19,330 --> 00:18:21,280
are examples of ways in which you can do

453
00:18:21,280 --> 00:18:22,720
it without refactoring your web

454
00:18:22,720 --> 00:18:24,370
application which for us was important

455
00:18:24,370 --> 00:18:26,230
because those teams are independent of

456
00:18:26,230 --> 00:18:28,360
the mobile team and we can't just go

457
00:18:28,360 --> 00:18:29,710
stomping all over their code for no

458
00:18:29,710 --> 00:18:32,170
reason even if we have what we think is

459
00:18:32,170 --> 00:18:36,150
a good reason so this in the last part

460
00:18:36,150 --> 00:18:38,500
just a friendly reminder that middleware

461
00:18:38,500 --> 00:18:40,930
is cool I know some developers on my

462
00:18:40,930 --> 00:18:42,430
team are kind of reticent to like write

463
00:18:42,430 --> 00:18:44,920
custom middleware they think it's scary

464
00:18:44,920 --> 00:18:46,660
it's not that scary

465
00:18:46,660 --> 00:18:48,430
you should be using it in fact these

466
00:18:48,430 --> 00:18:49,990
examples analytics and crash reporting

467
00:18:49,990 --> 00:18:53,650
are right on the tutorial so friendly

468
00:18:53,650 --> 00:18:55,900
reminder there but also you can use them

469
00:18:55,900 --> 00:18:58,810
to implement integration with native

470
00:18:58,810 --> 00:19:02,770
features like handoff and linking and so

471
00:19:02,770 --> 00:19:05,260
we'll look at an example of handoff now

472
00:19:05,260 --> 00:19:08,560
how that might work so does anyone

473
00:19:08,560 --> 00:19:09,970
actually know what handoff is have you

474
00:19:09,970 --> 00:19:14,350
ever actually used this feature like two

475
00:19:14,350 --> 00:19:19,840
hands so handoff just for context is an

476
00:19:19,840 --> 00:19:22,750
iOS feature where you can pass data

477
00:19:22,750 --> 00:19:25,620
between your running applications and

478
00:19:25,620 --> 00:19:28,720
generally it's for going from iOS to Mac

479
00:19:28,720 --> 00:19:33,760
or iOS to iOS or vice versa but perhaps

480
00:19:33,760 --> 00:19:35,260
a little-known feature of handoff is

481
00:19:35,260 --> 00:19:37,540
that you can actually handoff from a

482
00:19:37,540 --> 00:19:40,900
website from your domain to your native

483
00:19:40,900 --> 00:19:43,570
application and vice versa so that if

484
00:19:43,570 --> 00:19:46,090
someone is using your web app and they

485
00:19:46,090 --> 00:19:47,770
pull up their phone they can actually

486
00:19:47,770 --> 00:19:49,270
get a handoff recommendation says Oh

487
00:19:49,270 --> 00:19:52,780
open this in my app and vice versa they

488
00:19:52,780 --> 00:19:54,310
can be using your app on their phone and

489
00:19:54,310 --> 00:19:55,870
then get a handoff recommendation on

490
00:19:55,870 --> 00:19:57,460
their laptop that says go to this web

491
00:19:57,460 --> 00:20:01,090
URL and that is pretty cool I think I

492
00:20:01,090 --> 00:20:03,570
don't know why more apps don't use that

493
00:20:03,570 --> 00:20:05,830
but we can imagine we could do this in

494
00:20:05,830 --> 00:20:07,600
middleware without changing any of the

495
00:20:07,600 --> 00:20:11,740
application logic code at all if we have

496
00:20:11,740 --> 00:20:13,960
this what here is an imaginary custom

497
00:20:13,960 --> 00:20:15,640
that we wrote just pretend this API

498
00:20:15,640 --> 00:20:19,149
exists it basically looks like this and

499
00:20:19,149 --> 00:20:21,070
are in our hand off middleware we could

500
00:20:21,070 --> 00:20:23,320
you know subscribe to a hook that says

501
00:20:23,320 --> 00:20:25,270
okay when we get a hand off event we get

502
00:20:25,270 --> 00:20:27,520
some data in this case handing off from

503
00:20:27,520 --> 00:20:29,289
the web will just get a URL that's the

504
00:20:29,289 --> 00:20:31,419
only thing we'll get unfortunately but

505
00:20:31,419 --> 00:20:33,159
we should be able to take that URL and

506
00:20:33,159 --> 00:20:35,529
transform it into some navigation state

507
00:20:35,529 --> 00:20:37,360
in our application which we can do just

508
00:20:37,360 --> 00:20:39,580
by in our case we have all of our

509
00:20:39,580 --> 00:20:42,940
navigation state inside of Redux but if

510
00:20:42,940 --> 00:20:45,159
you were using some sort of navigator

511
00:20:45,159 --> 00:20:46,630
pattern you could also just call

512
00:20:46,630 --> 00:20:48,159
functions on the navigator you know do

513
00:20:48,159 --> 00:20:49,419
whatever you need to do to restore that

514
00:20:49,419 --> 00:20:52,270
URL presumably you have an analogue to

515
00:20:52,270 --> 00:20:53,740
that URL state in your native

516
00:20:53,740 --> 00:20:58,270
application and then going the other way

517
00:20:58,270 --> 00:21:01,809
you can observe either you know methods

518
00:21:01,809 --> 00:21:03,220
on your navigator hook into those calls

519
00:21:03,220 --> 00:21:05,320
or observe navigation actions if you're

520
00:21:05,320 --> 00:21:07,110
just dispatching navigation actions and

521
00:21:07,110 --> 00:21:10,690
let your the handoff native module know

522
00:21:10,690 --> 00:21:13,179
this is this is a URL you know you build

523
00:21:13,179 --> 00:21:15,220
a URL that represents the current

524
00:21:15,220 --> 00:21:16,779
navigation state and say that's the

525
00:21:16,779 --> 00:21:18,640
current URL I would want the user to

526
00:21:18,640 --> 00:21:20,770
resume - if they chose to do so

527
00:21:20,770 --> 00:21:23,020
and that's it we didn't change any of

528
00:21:23,020 --> 00:21:25,240
the web code we didn't write wrap any

529
00:21:25,240 --> 00:21:27,940
actions or anything like that so use

530
00:21:27,940 --> 00:21:31,929
middleware it's great cool

531
00:21:31,929 --> 00:21:35,710
so in summary this has been a pretty big

532
00:21:35,710 --> 00:21:38,740
success for us so far you might look at

533
00:21:38,740 --> 00:21:40,210
the thunk adapter thing and say that's

534
00:21:40,210 --> 00:21:42,419
crazy I can't believe you're doing that

535
00:21:42,419 --> 00:21:44,830
and that it's a heck it probably is

536
00:21:44,830 --> 00:21:47,260
that's okay it's working for us and

537
00:21:47,260 --> 00:21:49,059
we're shipping a lot of code on mobile

538
00:21:49,059 --> 00:21:49,690
really fast

539
00:21:49,690 --> 00:21:53,350
so that's valuable some of the

540
00:21:53,350 --> 00:21:55,960
challenges are keeping up to date with

541
00:21:55,960 --> 00:21:59,020
the web projects there's a lot of things

542
00:21:59,020 --> 00:22:00,490
that aren't caught in that compile step

543
00:22:00,490 --> 00:22:02,919
that only get caught at runtime like

544
00:22:02,919 --> 00:22:05,169
right now if they added a new if someone

545
00:22:05,169 --> 00:22:06,820
again went into a reducer and said local

546
00:22:06,820 --> 00:22:09,820
storage docket item it would not blow up

547
00:22:09,820 --> 00:22:11,350
until we pulled in the new version of

548
00:22:11,350 --> 00:22:12,850
the package and then we would have to go

549
00:22:12,850 --> 00:22:17,470
back and fix it and then do it again so

550
00:22:17,470 --> 00:22:19,600
that's kind of an annoying thing and is

551
00:22:19,600 --> 00:22:21,700
just kind of a manual process of talking

552
00:22:21,700 --> 00:22:22,809
to the teams and seeing what they're

553
00:22:22,809 --> 00:22:25,419
working on so that could be better also

554
00:22:25,419 --> 00:22:27,250
training I don't know if you guys have

555
00:22:27,250 --> 00:22:27,790
found this

556
00:22:27,790 --> 00:22:30,070
training people in react and redux if

557
00:22:30,070 --> 00:22:32,170
they are not familiar with functional

558
00:22:32,170 --> 00:22:34,930
programming is hard it takes a little

559
00:22:34,930 --> 00:22:36,760
bit longer than I would assume it does

560
00:22:36,760 --> 00:22:41,020
and that's especially true for remember

561
00:22:41,020 --> 00:22:42,610
our excited mobile developers who were

562
00:22:42,610 --> 00:22:45,330
thrilled to be riding with Jas before

563
00:22:45,330 --> 00:22:47,770
it's especially true for them because if

564
00:22:47,770 --> 00:22:49,570
you've been in that world that's a very

565
00:22:49,570 --> 00:22:51,880
object oriented this is very very

566
00:22:51,880 --> 00:22:52,510
different

567
00:22:52,510 --> 00:22:55,690
and it is hard for them to learn they're

568
00:22:55,690 --> 00:22:58,930
smart people obviously but it's just a

569
00:22:58,930 --> 00:23:00,250
hard thing it's a complete paradigm

570
00:23:00,250 --> 00:23:02,470
shift and so that is a challenge not

571
00:23:02,470 --> 00:23:05,500
insurmountable but is a challenge some

572
00:23:05,500 --> 00:23:08,980
future things that we would like to do

573
00:23:08,980 --> 00:23:12,670
have automatic pull requests when new

574
00:23:12,670 --> 00:23:14,110
packages are deployed this is just kind

575
00:23:14,110 --> 00:23:15,790
of like a nice logistical thing that

576
00:23:15,790 --> 00:23:17,920
could be great and this means we could

577
00:23:17,920 --> 00:23:19,600
also write integration tests with their

578
00:23:19,600 --> 00:23:21,520
thunks and make sure that everything

579
00:23:21,520 --> 00:23:23,160
works right

580
00:23:23,160 --> 00:23:25,450
then there's acceptance testing going

581
00:23:25,450 --> 00:23:27,070
one step further acceptance testing on

582
00:23:27,070 --> 00:23:30,520
mobile is hard because there at least

583
00:23:30,520 --> 00:23:33,300
with react native there isn't a way to

584
00:23:33,300 --> 00:23:36,430
do this headless Lee you have to use a

585
00:23:36,430 --> 00:23:39,160
simulator or you'd have to go like use

586
00:23:39,160 --> 00:23:41,200
react native web and render your mobile

587
00:23:41,200 --> 00:23:43,630
application in a webview and then use

588
00:23:43,630 --> 00:23:45,610
the web tools to do acceptance testing

589
00:23:45,610 --> 00:23:49,630
which is seems to me too much work to

590
00:23:49,630 --> 00:23:51,820
maintain just to get acceptance testing

591
00:23:51,820 --> 00:23:54,010
on your mobile application so you're

592
00:23:54,010 --> 00:23:55,930
stuck with like running in simulator and

593
00:23:55,930 --> 00:24:00,820
using those api's which is hard that's

594
00:24:00,820 --> 00:24:02,050
just a challenge but something that we

595
00:24:02,050 --> 00:24:05,080
would like to solve and like I mentioned

596
00:24:05,080 --> 00:24:07,450
before catching more things at bundle

597
00:24:07,450 --> 00:24:10,360
time caching references to window

598
00:24:10,360 --> 00:24:12,850
objects or Dom API is that or SVG's

599
00:24:12,850 --> 00:24:15,580
things that we don't that are going to

600
00:24:15,580 --> 00:24:17,530
fail at runtime we'd like to move that

601
00:24:17,530 --> 00:24:19,900
catch to compile time if possible and

602
00:24:19,900 --> 00:24:25,450
and then lastly I'm going to go next

603
00:24:25,450 --> 00:24:26,380
door and learn about how I should

604
00:24:26,380 --> 00:24:28,420
replace Redux with rxjs because

605
00:24:28,420 --> 00:24:31,960
apparently that's the new hotness that's

606
00:24:31,960 --> 00:24:34,000
it for me and a little bit early please

607
00:24:34,000 --> 00:24:36,370
if you have questions I really want to

608
00:24:36,370 --> 00:24:37,750
talk about all this stuff and if there

609
00:24:37,750 --> 00:24:39,040
are better ways to do it please come

610
00:24:39,040 --> 00:24:40,540
tell me if you're doing this I would

611
00:24:40,540 --> 00:24:41,470
love to hear about that thing

612
00:24:41,470 --> 00:24:42,850
to you very much

