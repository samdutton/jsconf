1
00:00:04,620 --> 00:00:05,620
>> Hello, everyone.

2
00:00:05,620 --> 00:00:08,470
Welcome to the third and final, for the time
being, TC39 panel we are doing at JSConf.

3
00:00:08,470 --> 00:00:09,880
It's always a pleasure to come back.

4
00:00:09,880 --> 00:00:10,930
We will introduce ourselves as we speak.

5
00:00:10,930 --> 00:00:11,930
We collected your questions in the last couple
of weeks.

6
00:00:11,930 --> 00:00:12,930
A little bit differently, we are going to
ask questions from the past years, so, that's

7
00:00:12,930 --> 00:00:13,930
how the panel's going to work.

8
00:00:13,930 --> 00:00:14,930
Let's give a round of applause for the panel
members.

9
00:00:14,930 --> 00:00:15,930
[Applause].

10
00:00:15,930 --> 00:00:16,930
As we get started, not everyone knows how
the committee works or what the committee

11
00:00:16,930 --> 00:00:17,930
is.

12
00:00:17,930 --> 00:00:21,390
There was a question that was asked in person
at one of our prep events that seemed quite

13
00:00:21,390 --> 00:00:28,220
obvious, but it is a great question to start
with: what is the organisation behind TC39

14
00:00:28,220 --> 00:00:43,739
in ?
>> Hi, I'm Aki, part of the chair group for

15
00:00:43,739 --> 00:00:44,739
TC39.

16
00:00:44,739 --> 00:00:48,980
I work for PayPal in Braintree.

17
00:00:48,980 --> 00:00:56,260
TC39 is the 39th technical committee by the
name of a committee called Ecma International,

18
00:00:56,260 --> 00:01:01,899
a standards body, like ISO, or that sort of
thing, and they publish the standard that

19
00:01:01,899 --> 00:01:05,590
we work on as a committee.

20
00:01:05,590 --> 00:01:09,330
That's the organisation behind TC39.

21
00:01:09,330 --> 00:01:15,750
The committee itself is made up of people
who are sent by member organisations that

22
00:01:15,750 --> 00:01:19,480
are companies and non-profits who are part
of Ecma.

23
00:01:19,480 --> 00:01:22,390
We are considered delegates.

24
00:01:22,390 --> 00:01:28,560
We either work for or are associated with
these companies that are part of Ecma International.

25
00:01:28,560 --> 00:01:35,250
We work together and collaborate on what goes
into the spec, and how we are going to be

26
00:01:35,250 --> 00:01:42,910
able to make improvements and changes, and
support all these different ways that JavaScript

27
00:01:42,910 --> 00:01:45,320
is used.

28
00:01:45,320 --> 00:01:47,220
>> Thank you, Aki.

29
00:01:47,220 --> 00:01:53,410
And the next question that we are going to
do to set up the stage what TC 39 is and does

30
00:01:53,410 --> 00:01:59,860
is how does a proposal move through the committee.

31
00:01:59,860 --> 00:02:07,620
We have Jase here on stage who did a wonderful
talk about his Rust engine in JavaScript,

32
00:02:07,620 --> 00:02:12,360
and he's been doing more work with the TC39,
specifically, he's been getting a proposal

33
00:02:12,360 --> 00:02:13,379
through called All Settled.

34
00:02:13,379 --> 00:02:24,950
Can you tell us about getting a proposal through
such a committee?

35
00:02:24,950 --> 00:02:30,690
>> Yeah, I was quite lucky to meet a lot of
people on the committee last year in London.

36
00:02:30,690 --> 00:02:35,959
I felt a lot started off with a conversation,
and talking to various members of the committee,

37
00:02:35,959 --> 00:02:38,569
if there was an appetite for such a proposal.

38
00:02:38,569 --> 00:02:40,439
It turns out there was.

39
00:02:40,439 --> 00:02:41,719
That was a good thing.

40
00:02:41,719 --> 00:02:48,709
Daniel, he has been helpful in putting me
in contact with the right people.

41
00:02:48,709 --> 00:02:50,970
Not only that, but people who come from different
backgrounds as well.

42
00:02:50,970 --> 00:02:52,469
That really helped.

43
00:02:52,469 --> 00:02:58,920
It started off by a "straw person proposal"
which is a state zero which is a GIT repo

44
00:02:58,920 --> 00:03:02,879
with identifying the problem space.

45
00:03:02,879 --> 00:03:12,299
Then we managed to get a champion here, Matthias,
V8 - and stage one is identifying what is

46
00:03:12,299 --> 00:03:13,299
the problem here?

47
00:03:13,299 --> 00:03:16,010
What is the limitation and you and how we
can fix it.

48
00:03:16,010 --> 00:03:19,180
It's not too important to have a solution
at this point.

49
00:03:19,180 --> 00:03:21,450
We managed to craft something up that worked.

50
00:03:21,450 --> 00:03:27,029
We had a small proposal that went through
- Matthias championed it.

51
00:03:27,029 --> 00:03:35,590
For stage 2, myself and Rob from Bloomberg
both worked together on some of the specification,

52
00:03:35,590 --> 00:03:38,790
and also getting more ideas from people as
well.

53
00:03:38,790 --> 00:03:43,440
Also, another good thing is after stage 1,
we had implementation from Babel which is

54
00:03:43,440 --> 00:03:47,730
really good which helps as well when you get
feedback.

55
00:03:47,730 --> 00:03:52,420
Stage 3 is getting even more feedback and
thinking about a candidate release, and luckily,

56
00:03:52,420 --> 00:03:57,169
I don't think there were too many sort of
rejections or limitations, and most people

57
00:03:57,169 --> 00:04:04,209
seemed happy with it, and very recently, we
made stage 3 as well, and so now, I think

58
00:04:04,209 --> 00:04:09,219
it's just getting some implementations in
browsers, and people can try it in Chrome

59
00:04:09,219 --> 00:04:12,499
and Canary, and nightly.

60
00:04:12,499 --> 00:04:15,760
Yes, hopefully stage 4.

61
00:04:15,760 --> 00:04:20,070
>> You made this proposal not as a member
of the committee but as an independent contributor,

62
00:04:20,070 --> 00:04:21,070
right?

63
00:04:21,070 --> 00:04:22,070
>> Yes, absolutely.

64
00:04:22,070 --> 00:04:23,270
I was become at the BBC at the time.

65
00:04:23,270 --> 00:04:26,790
It was a limitation for me as a JavaScript
developer, and I thought if it's a limitation

66
00:04:26,790 --> 00:04:30,110
for me, how many other people have this limitation?

67
00:04:30,110 --> 00:04:35,240
One of those ways of working that out was
going to npm seeing how many people download

68
00:04:35,240 --> 00:04:38,349
these packages, others languages have this
natively.

69
00:04:38,349 --> 00:04:42,700
Can we do it in JavaScript?

70
00:04:42,700 --> 00:04:44,880
Everyone here was friendly.

71
00:04:44,880 --> 00:04:50,039
I had a conversation with members of the panel,
and they were very happy to champion it, and

72
00:04:50,039 --> 00:04:51,659
we went from there.

73
00:04:51,659 --> 00:04:53,830
>> And I'm going to ask you to introduce yourself?

74
00:04:53,830 --> 00:04:58,340
>> Yes, Jason Williams, software engineer
at Bloomberg.

75
00:04:58,340 --> 00:05:04,569
>> So, another question that we get sometimes
is we've got this whole proposal structure,

76
00:05:04,569 --> 00:05:07,669
but how do we know it's implemented correctly
in browsers?

77
00:05:07,669 --> 00:05:09,720
What is going on there?

78
00:05:09,720 --> 00:05:23,069
I'm going to hand this over to Valerie, and,
if you could introduce yourself, and how we

79
00:05:23,069 --> 00:05:24,069
do that?

80
00:05:24,069 --> 00:05:28,180
>> I'm an open-web engineer.

81
00:05:28,180 --> 00:05:35,720
I'm also the editor - the extension to JavaScript
called Ecma 402, the object that does pluralisation

82
00:05:35,720 --> 00:05:38,880
and daytime formatting.

83
00:05:38,880 --> 00:05:48,250
I help to maintain the test 262 test suite
which is ECMAScript implementations.

84
00:05:48,250 --> 00:05:59,280
The test suite is about 35,000 tests which
test the individual tests, which test JavaScript.

85
00:05:59,280 --> 00:06:06,819
Each test is a test file which has some metadata
about what line it tests in ECMAScript itself.

86
00:06:06,819 --> 00:06:07,819
Each test is run twice.

87
00:06:07,819 --> 00:06:14,259
There are really 70,000 tests, once in strict
and this is non-strict mode.

88
00:06:14,259 --> 00:06:25,129
This report is showing how well the tests
are doing on all of the four four JavaScript

89
00:06:25,129 --> 00:06:31,500
engines, and the tests are each in individual
tests files, so this is a directory structure

90
00:06:31,500 --> 00:06:37,030
which shows the test structure that you can
find, and, if you want to look at the source,

91
00:06:37,030 --> 00:06:40,919
you can drill down and look at individual
tests and whether or not they're passing,

92
00:06:40,919 --> 00:06:42,919
and see the source code on the page of this
website.

93
00:06:42,919 --> 00:06:53,470
Or you can go to our GitHub, TC39/test 2662,
and to get a standard in ECMAScript or a new

94
00:06:53,470 --> 00:07:02,129
proposal in Ecma script, the last test is
to add to test 662 as well as the browser

95
00:07:02,129 --> 00:07:03,129
implementation.

96
00:07:03,129 --> 00:07:07,699
There are tests beak contributed, and all
the browsers can make sure they're in compliance

97
00:07:07,699 --> 00:07:09,219
and passing the same tests.

98
00:07:09,219 --> 00:07:11,419
It's a fun project.

99
00:07:11,419 --> 00:07:12,419
[Applause].

100
00:07:12,419 --> 00:07:14,080
>> Thank you, Valerie.

101
00:07:14,080 --> 00:07:17,759
>> If I could add to that.

102
00:07:17,759 --> 00:07:20,270
This is actually really an awesome resource.

103
00:07:20,270 --> 00:07:25,840
Jason talked about implementing a JavaScript
engine, but for our major JavaScript engines

104
00:07:25,840 --> 00:07:32,599
having something like this to be able to say
very easily when are we not being spec-conformant

105
00:07:32,599 --> 00:07:36,540
is such an immense resource.

106
00:07:36,540 --> 00:07:37,569
>> And can you introduce yourself?

107
00:07:37,569 --> 00:07:43,979
>> Oh, yes, I'm Ross Kersling and I work at
PlayStation on our WebKit team.

108
00:07:43,979 --> 00:07:45,639
>> Thank you.

109
00:07:45,639 --> 00:07:51,919
So, this sort of rounds off our introduction
to how TC39 works, and we're going to be moving

110
00:07:51,919 --> 00:07:55,830
on with community questions that you folks
asked, and we will start with one from last

111
00:07:55,830 --> 00:07:58,370
year, asked by Sam Basson.

112
00:07:58,370 --> 00:08:06,100
He asked, "I notice the committee's very heavily
dominated by Americans and American companies,

113
00:08:06,100 --> 00:08:07,100
particularly Google.

114
00:08:07,100 --> 00:08:11,689
Do you have any plans to become more representative
of the world, and only give certain companies

115
00:08:11,689 --> 00:08:14,689
so much power?"

116
00:08:14,689 --> 00:08:24,509
>> We're looking at how individual companies
and specifically individual spaces where we

117
00:08:24,509 --> 00:08:31,970
get together in person are impacting those
contributions, and Ecma International, which

118
00:08:31,970 --> 00:08:37,740
is the organisation we're part of, in fact,
is currently put an effort into helping us

119
00:08:37,740 --> 00:08:42,630
find a way to be more inclusive internationally
in future years.

120
00:08:42,630 --> 00:08:47,850
The 2019 meetings are already scheduled, but
2020 is being scheduled right now, and we

121
00:08:47,850 --> 00:08:51,370
are going to work on finding a way of being
more inclusive.

122
00:08:51,370 --> 00:08:52,370
>> Thank you.

123
00:08:52,370 --> 00:08:56,230
That was a nice answer.

124
00:08:56,230 --> 00:09:06,060
>> Hi, I'm Daniel Aaronberg, I work in our
compiler's team.

125
00:09:06,060 --> 00:09:12,540
I think there is a real issue of this particular
kind of bias, that was identified, but I just

126
00:09:12,540 --> 00:09:17,730
also want to point out there is heavy European
involvement in the development of the JavaScript

127
00:09:17,730 --> 00:09:27,029
specification, both from people in Munich
V8 office, V8 from Bloomberg, and my company

128
00:09:27,029 --> 00:09:33,700
based in Spain, and several others also.

129
00:09:33,700 --> 00:09:36,610
We can build on that success, of course.

130
00:09:36,610 --> 00:09:38,960
Julia based in Germany.

131
00:09:38,960 --> 00:09:42,720
>> I'm based in Germany and Berlin, so, if
you have any complaints, you know where to

132
00:09:42,720 --> 00:09:44,640
find me!

133
00:09:44,640 --> 00:09:48,010
Thanks for that answer.

134
00:09:48,010 --> 00:09:54,370
Moving along into more specific questions
about the standard, we have had several questions

135
00:09:54,370 --> 00:09:58,230
about how long it takes to standardise things
and when do things come out?

136
00:09:58,230 --> 00:10:02,850
Like how long does it take for a proposal
to go from stage zero to stage four?

137
00:10:02,850 --> 00:10:06,950
>> I will take that one.

138
00:10:06,950 --> 00:10:09,560
It can take a very long time.

139
00:10:09,560 --> 00:10:12,829
The simple answer is years.

140
00:10:12,829 --> 00:10:18,060
If you were to essentially - essentially,
you wouldn't really expecting to through our

141
00:10:18,060 --> 00:10:25,980
staging process more than one per meeting,
and we do meet every other month, but, you

142
00:10:25,980 --> 00:10:29,639
know, there's a lot to do in that time frame.

143
00:10:29,639 --> 00:10:33,680
Implementing in Babel may take time, for instance.

144
00:10:33,680 --> 00:10:39,310
The problem space you're addressing might
be quite clear but the solution may not be.

145
00:10:39,310 --> 00:10:42,160
Maybe you need to revise that ultimate times.

146
00:10:42,160 --> 00:10:45,079
Decorators might be a great example.

147
00:10:45,079 --> 00:10:50,580
Finally, at the end of it all, before we can
say that we are all said and done, we need

148
00:10:50,580 --> 00:10:56,260
this to be implemented - and shipping - in
at least two of the major engines, and you,

149
00:10:56,260 --> 00:11:00,760
unless you want to implement that yourself,
might not have control over that time frame.

150
00:11:00,760 --> 00:11:06,410
It can take a very lock time, and discussions
can get very heated, and so unless you have

151
00:11:06,410 --> 00:11:14,840
a very simple, very uncontroversial proposal,
it will probably take on the order of years.

152
00:11:14,840 --> 00:11:30,380
>> The next question we have is about when
are we going to get a standard library for

153
00:11:30,380 --> 00:11:34,250
JavaScript?

154
00:11:34,250 --> 00:11:41,200
>> So, from the way I see it, we already have
a standard library in JavaScript.

155
00:11:41,200 --> 00:11:45,889
We have a bunch of functions, map, JSON, array,
a map set.

156
00:11:45,889 --> 00:11:50,470
JavaScript has a pretty - well, I was going
to say a pretty big standard library but that's

157
00:11:50,470 --> 00:11:52,160
not true.

158
00:11:52,160 --> 00:11:58,011
That's what this question is really getting
at, is can we have a bigger and more standard

159
00:11:58,011 --> 00:12:03,810
things in the library for JavaScript?

160
00:12:03,810 --> 00:12:07,209
Should we put the standard library in modules
instead of where we are currently putting

161
00:12:07,209 --> 00:12:09,880
it which is in globals?

162
00:12:09,880 --> 00:12:15,459
And these are pretty interesting questions,
and I'm definitely supportive of exploring

163
00:12:15,459 --> 00:12:16,459
them.

164
00:12:16,459 --> 00:12:19,320
I've been working on them myself partially
from the website.

165
00:12:19,320 --> 00:12:23,360
I am Dominic from the Chrome Team at Google.

166
00:12:23,360 --> 00:12:24,570
Thank you.

167
00:12:24,570 --> 00:12:35,360
And I want to mention our colleagues at Apple
have focused, adding these new standard library

168
00:12:35,360 --> 00:12:41,860
features as built-in modules rather than built-in
globals.

169
00:12:41,860 --> 00:12:46,709
>> We're looking into several concrete proposals
in TC39 about features to add to the standard

170
00:12:46,709 --> 00:12:47,709
library.

171
00:12:47,709 --> 00:12:54,180
You heard in Tara's talk earlier today about
recent additions like object from entries,

172
00:12:54,180 --> 00:12:59,180
and there are other things that we are considering
putting in maybe built-in modules, or maybe

173
00:12:59,180 --> 00:13:04,970
in the traditional way as properties of objects
that are connected to the global.

174
00:13:04,970 --> 00:13:11,350
We're looking into Temporal which is a date-time
library which could make it so that you don't

175
00:13:11,350 --> 00:13:19,279
need to use moment, looking into possibly
new ID standard library, or a library for

176
00:13:19,279 --> 00:13:29,009
iterator helper methods, as well as methods
on set and math.

177
00:13:29,009 --> 00:13:33,510
I think we are missing a bunch of things that
would be useful to have in the standard library,

178
00:13:33,510 --> 00:13:38,340
so it would be great to have more help from
contributors about this.

179
00:13:38,340 --> 00:13:43,991
>> Yes, I want to mention that some of these
library-type features have been some of the

180
00:13:43,991 --> 00:13:49,470
most successful proposals in getting through
the process more quickly, so I mentioned that

181
00:13:49,470 --> 00:13:54,500
features can take years, but we've also had
years that take six months or eight months,

182
00:13:54,500 --> 00:14:00,470
because they're kind of just, oh, yes, everybody
agrees we should have a finally method on

183
00:14:00,470 --> 00:14:02,990
promise, that kind of thing.

184
00:14:02,990 --> 00:14:11,420
When we talk about the JavaScript standard
library, it's important to look at things

185
00:14:11,420 --> 00:14:16,190
that are available across the ecosystem and
that ship with JavaScript run times everywhere,

186
00:14:16,190 --> 00:14:22,080
and that include things like URL and text
browser which are in Node and other run times

187
00:14:22,080 --> 00:14:23,220
if they wish to implement them.

188
00:14:23,220 --> 00:14:25,490
There are a bunch of examples like that.

189
00:14:25,490 --> 00:14:31,950
>> You will hear more about the integration
of URL and texting coder and browser web API

190
00:14:31,950 --> 00:14:35,560
s in a talk later today.

191
00:14:35,560 --> 00:14:40,980
We are trying to break down the barriers of
different standards groups and make sure we

192
00:14:40,980 --> 00:14:48,860
can all work together to build a good JavaScript-centred
library.

193
00:14:48,860 --> 00:14:51,790
[Applause].

194
00:14:51,790 --> 00:14:54,110
>> Thank you, Dominic and Dan.

195
00:14:54,110 --> 00:14:56,180
Moving on to our next question.

196
00:14:56,180 --> 00:15:04,430
we have a question that's been given to us
anonymously, asking: often we are having discussion

197
00:15:04,430 --> 00:15:10,509
that are related to proposals and larger questions
than TC39.

198
00:15:10,509 --> 00:15:14,030
Yet Discuss is not being used.

199
00:15:14,030 --> 00:15:18,170
Is there any plan to improve this?

200
00:15:18,170 --> 00:15:19,990
>> Funny you should mention!

201
00:15:19,990 --> 00:15:24,950
We are currently working on having a new discourse
instance.

202
00:15:24,950 --> 00:15:30,790
It gives us an opportunity to be able to figure
out what people really are talking about so

203
00:15:30,790 --> 00:15:37,089
that delegates who have limited time - and
we also have day jobs, we do this in addition

204
00:15:37,089 --> 00:15:41,569
- can really engage with what the community
wants to talk about, and it will give us the

205
00:15:41,569 --> 00:15:49,000
ability to have those conversations in public,
and hopefully be less of a black box to people,

206
00:15:49,000 --> 00:15:52,370
because we really do want to engage with people.

207
00:15:52,370 --> 00:16:02,910
It's just hard to find each other when what
we talk about can be so esoteric.

208
00:16:02,910 --> 00:16:07,569
>> Actually, we have another slide here.

209
00:16:07,569 --> 00:16:10,819
If you want to check that out, here's a QR
code, and you can go to that directly.

210
00:16:10,819 --> 00:16:15,589
I will leave that on for a second.

211
00:16:15,589 --> 00:16:17,250
Thank you, Aki.

212
00:16:17,250 --> 00:16:21,029
Moving on to the next question, and we have
had this the last two years, which is on the

213
00:16:21,029 --> 00:16:27,379
pattern-matching proposal.: I've not seen
any movement on the pattern-matching proposal.

214
00:16:27,379 --> 00:16:29,420
Is it in an idle state?

215
00:16:29,420 --> 00:16:36,420
If it lands as a statement, what will be the
heuristics to decide when using it or a chain

216
00:16:36,420 --> 00:16:37,870
of if-else?

217
00:16:37,870 --> 00:16:42,189
Do you think having pattern-matching as an
expression would be more beneficial?

218
00:16:42,189 --> 00:16:45,100
>> That's a big question.

219
00:16:45,100 --> 00:16:54,820
I'm Cat and one of the co-champions and co-authors
of the pattern-matching proposal.

220
00:16:54,820 --> 00:16:57,639
The proposal has stalled right now.

221
00:16:57,639 --> 00:17:00,629
These things take a lot of time right now.

222
00:17:00,629 --> 00:17:06,100
Sometimes, what is hot right now - what is
at right now, it's waiting to be proposed

223
00:17:06,100 --> 00:17:07,339
for a stage 2.

224
00:17:07,339 --> 00:17:16,740
As soon as I get lead to show up for a meeting
and - get is ready for a stage 2.

225
00:17:16,740 --> 00:17:23,730
As far as the statement versus expression
thing, that's a much harder problem.

226
00:17:23,730 --> 00:17:30,860
We have Dan, actually, proposed a really interesting
solution to the statement and expression problem.

227
00:17:30,860 --> 00:17:36,980
For those of you who don't know, like the
pattern-matching proposal currently is only

228
00:17:36,980 --> 00:17:41,780
a statement, so it doesn't allow you to directly
assign from the pattern-matching theme because

229
00:17:41,780 --> 00:17:48,179
it was it has ergonomics that are more spectacular
to other things like if, and else, and that

230
00:17:48,179 --> 00:17:49,179
stuff.

231
00:17:49,179 --> 00:17:53,250
>> It's hard to evolve the grammar of JavaScript.

232
00:17:53,250 --> 00:17:59,000
There's a lot of things in it already, and
there are a lot of things that sort of happen

233
00:17:59,000 --> 00:18:08,440
implicitly so, to sort of work through this,
there are various different solutions, and

234
00:18:08,440 --> 00:18:13,530
that's sort of why a lot of these proposals
take time at TC39 because, for a big proposal

235
00:18:13,530 --> 00:18:17,750
like pattern-matching, we need to consider
a lot of different alternatives to work through

236
00:18:17,750 --> 00:18:28,480
these kind of technical issues, and find something
that's really going to be good again.

237
00:18:28,480 --> 00:18:30,980
>> We have a second question about this from
last year.

238
00:18:30,980 --> 00:18:36,500
Leonard Koch asks what are your thoughts on
reducing the capabilities of the pattern-matching

239
00:18:36,500 --> 00:18:40,340
proposal expression to statement in favour
of cohesion?

240
00:18:40,340 --> 00:18:49,130
>> So, I guess I kind of answered this already,
didn't I?

241
00:18:49,130 --> 00:18:50,130
>> You might have.

242
00:18:50,130 --> 00:18:51,130
Sorry.

243
00:18:51,130 --> 00:18:52,490
>> I think I might have answered this already.

244
00:18:52,490 --> 00:18:58,010
You know, the idea is I don't like the idea
that it's a statement.

245
00:18:58,010 --> 00:19:02,580
I want to get something out there because
I would rather have a statement than no pattern-matching

246
00:19:02,580 --> 00:19:07,500
at all, and my hope is that once we have it
as a statement, we can use that as justification

247
00:19:07,500 --> 00:19:14,590
to bring more conditionals into expressions,
so that maybe we can start discussing, say,

248
00:19:14,590 --> 00:19:20,790
bringing if-else into bringing an expression,
and then the trouble it's like the semantics

249
00:19:20,790 --> 00:19:27,620
in the language don't make it particularly
easy to say what the result of a statement-like

250
00:19:27,620 --> 00:19:32,390
thing will be if used in an expression position.

251
00:19:32,390 --> 00:19:36,480
And kind of like there's one proposal that
is out there answering those questions, and

252
00:19:36,480 --> 00:19:40,900
I kind of wanted that proposal at least to
start exploring that before giving us a solid

253
00:19:40,900 --> 00:19:41,900
answer.

254
00:19:41,900 --> 00:19:46,229
That's an expressions proposal, whether or
not it's required to wrap it with "do" is

255
00:19:46,229 --> 00:20:03,890
up to the future, but we need to answer the
same problem regardless of these.

256
00:20:03,890 --> 00:20:07,770
>> Next yes, moving right along into questions
regarding language design.

257
00:20:07,770 --> 00:20:11,950
We had a question from Marvin.

258
00:20:11,950 --> 00:20:15,240
This is also from last year: are there any
long-term goals?

259
00:20:15,240 --> 00:20:18,710
What is the bigger picture for JavaScript
in the next five years?

260
00:20:18,710 --> 00:20:24,799
>> Hi, I'm Shu, I work at Bloomberg.

261
00:20:24,799 --> 00:20:31,529
So, JavaScript is many things to many people,
including all of you in the community here.

262
00:20:31,529 --> 00:20:33,370
That is the same for us in committee.

263
00:20:33,370 --> 00:20:35,890
It's many things to many of us in committee.

264
00:20:35,890 --> 00:20:41,720
We have different personal visions and aesthetics
to what we want the language to be, and perhaps

265
00:20:41,720 --> 00:20:46,250
we are also constrained by what our companies
would like the language to be for its use

266
00:20:46,250 --> 00:20:47,550
case.

267
00:20:47,550 --> 00:20:52,030
It is a committee language, so it's not a
one-author language where it's much easier

268
00:20:52,030 --> 00:20:57,230
to kind of exercise your singular vision for
better or for worse.

269
00:20:57,230 --> 00:21:02,710
So, the answer is it's really hard to say
what the five-year picture, or what the big

270
00:21:02,710 --> 00:21:05,860
picture of what JavaScript is right now.

271
00:21:05,860 --> 00:21:10,880
It's we are trying to work out a consensus
between the many different visions that people

272
00:21:10,880 --> 00:21:16,960
bring to committee, and I want to - the usual
response to this when you hear this is it's

273
00:21:16,960 --> 00:21:20,981
going to be a mess, and it's going to be full
of compromises, going to be full of things

274
00:21:20,981 --> 00:21:22,760
that people don't like.

275
00:21:22,760 --> 00:21:29,030
But I think in practice, JavaScript is eminently
useful, it keeps getting more and more popular,

276
00:21:29,030 --> 00:21:31,840
used basically everywhere on the front-end
and the back-end.

277
00:21:31,840 --> 00:21:37,710
We've done a decent job, and I would hope
that we can do a better job the a bringing

278
00:21:37,710 --> 00:21:41,620
more cohesion, but there's going to be no
singular vision going forward.

279
00:21:41,620 --> 00:21:46,850
It's going to be difficult to get that but
I hope to have consensus on practicality,

280
00:21:46,850 --> 00:21:50,370
and what is most important thing at the time.

281
00:21:50,370 --> 00:21:52,280
>> Thank you.

282
00:21:52,280 --> 00:21:57,710
The next question we have is about how transpiling
impacts JavaScript, and specific questions

283
00:21:57,710 --> 00:22:03,110
are foals: JavaScript has become the target
of many compilers.

284
00:22:03,110 --> 00:22:09,220
How does this fact influence your work on
the language in general?

285
00:22:09,220 --> 00:22:10,220
>> I work on Babel.

286
00:22:10,220 --> 00:22:20,840
I 
think it is what it is being able to use features

287
00:22:20,840 --> 00:22:27,950
before they're implemented, an opportunity
for all in the community to work out involved,

288
00:22:27,950 --> 00:22:34,370
testing them out in the early stages, although
we warn against doing that in production,

289
00:22:34,370 --> 00:22:39,049
and just being able to be a part of - you
don't have to be on the committee, but being

290
00:22:39,049 --> 00:22:43,020
able to be involved - yeah.

291
00:22:43,020 --> 00:22:45,090
>> Thank you.

292
00:22:45,090 --> 00:22:53,940
And moving on to the next one from Soran:
when writing new features, where do you look

293
00:22:53,940 --> 00:22:55,100
most for inspiration?

294
00:22:55,100 --> 00:22:56,340
Other languages?

295
00:22:56,340 --> 00:22:57,770
Which ones, in that case?

296
00:22:57,770 --> 00:23:05,590
Or is it mostly driven by requests from the
community?

297
00:23:05,590 --> 00:23:10,620
>> Very quickly, again was the answer is many
things to many people, but for me personally,

298
00:23:10,620 --> 00:23:15,330
I've always very much wanted to bring new
capabilities to the language on the web that

299
00:23:15,330 --> 00:23:21,920
it could not do before, like what we have
done with shared array buffers to bring shared

300
00:23:21,920 --> 00:23:27,690
memory programming to the web, and as we hope
to do soon, ...

301
00:23:27,690 --> 00:23:34,080
>> I want to second what Shu said, but from
my perspective, as somebody who represents

302
00:23:34,080 --> 00:23:39,820
the Chrome team, we're interested in what
makes programming on the web easier, and so

303
00:23:39,820 --> 00:23:44,299
when we think about new features, we're like,
what are people commonly doing?

304
00:23:44,299 --> 00:23:49,070
What shows up popular - what is a popular
pattern for writing websites that is hard

305
00:23:49,070 --> 00:23:50,560
because of JavaScript today?

306
00:23:50,560 --> 00:23:55,340
An example proposal which I kind of started
but never really followed through on is something

307
00:23:55,340 --> 00:24:00,230
called blocks where it's we want it to be
easier for people to write web workers inline

308
00:24:00,230 --> 00:24:03,789
in JavaScript because we think concurrency
is important on the web.

309
00:24:03,789 --> 00:24:07,809
Things like that is one motivating factor
that at least one member of the committee

310
00:24:07,809 --> 00:24:17,379
tries to use to govern this process.

311
00:24:17,379 --> 00:24:18,580
>> Thank you for that answer, Dominic.

312
00:24:18,580 --> 00:24:26,770
The next question is from Mark, with the new
operations and features being added to JavaScript,

313
00:24:26,770 --> 00:24:32,720
is there a risk that the language will have
too cryptic a syntax for new developers.

314
00:24:32,720 --> 00:24:35,859
Web development being approachable is a big
boon.

315
00:24:35,859 --> 00:24:39,990
>> I will try to answer this as quickly as
possible.

316
00:24:39,990 --> 00:24:43,669
We do this strongly with each proposal.

317
00:24:43,669 --> 00:24:49,480
We have a notion of a syntax budget which
simplifies the idea that there is only so

318
00:24:49,480 --> 00:24:56,870
much syntax you can take before being overwhelmed
in using a language, so we want that to be

319
00:24:56,870 --> 00:24:57,870
comfortable.

320
00:24:57,870 --> 00:25:03,320
We don't want to overshoot that, but we do
want to make use of new syntax where it really

321
00:25:03,320 --> 00:25:05,410
is worthwhile.

322
00:25:05,410 --> 00:25:08,990
>> We will have a couple of quick back-and-forths.

323
00:25:08,990 --> 00:25:16,240
>> Sometimes, adding just a little bit of
new syntax can make programming easier.

324
00:25:16,240 --> 00:25:20,240
Like a lot of programmers are exciting about
the optional chaining proposal where you use

325
00:25:20,240 --> 00:25:21,690
question mark dot.

326
00:25:21,690 --> 00:25:27,029
Even if it is undefined, it still works.

327
00:25:27,029 --> 00:25:30,090
Adding new syntax can make things easier to
programme.

328
00:25:30,090 --> 00:25:34,280
We consider this as a trade-off, not an absolute.

329
00:25:34,280 --> 00:25:35,280
>> Thank you.

330
00:25:35,280 --> 00:25:39,659
So thank you very much to everyone who is
on the panel, and thank you all for being

331
00:25:39,659 --> 00:25:42,500
such a wonderful audience.

332
00:25:42,500 --> 00:25:46,850
As always, we are looking for different ways
to help people participate in the process

333
00:25:46,850 --> 00:25:49,070
and also help us get the best data.

334
00:25:49,070 --> 00:25:53,230
One thing that we are doing right now is an
experiment that's currently running.

335
00:25:53,230 --> 00:25:55,460
I forgot that side was there.

336
00:25:55,460 --> 00:25:56,929
We currently have an experiment running.

337
00:25:56,929 --> 00:26:05,740
If you want to participate in it, here, this
is very finicky, here is -- please feel free

338
00:26:05,740 --> 00:26:07,809
to go to the URL and take the survey.

339
00:26:07,809 --> 00:26:12,400
It will help us whether or not experimental
data works for the committee process.

340
00:26:12,400 --> 00:26:14,240
That's all for our panel.

341
00:26:14,240 --> 00:26:15,240
Thank you so much, everyone.

342
00:26:15,240 --> 00:26:16,240
[Applause].

343
00:26:16,240 --> 00:26:19,240
Oh, one last thing: anyone who has further
questions and didn't manage to get their questions

