1
00:00:18,680 --> 00:00:19,680
Okay.

2
00:00:19,680 --> 00:00:21,760
I am going to lay my cards on the table.

3
00:00:21,760 --> 00:00:26,790
Building Javascript applications is hot.

4
00:00:26,790 --> 00:00:33,110
A part of it is that is state and events.

5
00:00:33,110 --> 00:00:43,340
I would take a step back and take a look at
some of the patterns applied in JS applications

6
00:00:43,340 --> 00:00:49,550
and handling state and events at scalable
and maintainable fashion.

7
00:00:49,550 --> 00:00:55,880
And some of the tactics to build on that.

8
00:00:55,880 --> 00:01:02,700
Thanks for the introduction.

9
00:01:02,700 --> 00:01:03,700
I'd introduce myself.

10
00:01:03,700 --> 00:01:09,250
I am not a Lama and I come from New Zealand.

11
00:01:09,250 --> 00:01:10,310
It was a long flight.

12
00:01:10,310 --> 00:01:11,930
It is my first time here.

13
00:01:11,930 --> 00:01:15,250
It has been fun.

14
00:01:15,250 --> 00:01:22,640
If you are over in New Zealand, you can look
at me on Twitter.

15
00:01:22,640 --> 00:01:23,970
And everywhere else.

16
00:01:23,970 --> 00:01:27,130
on Internet.

17
00:01:27,130 --> 00:01:29,250
I work at GitHub.

18
00:01:29,250 --> 00:01:32,210
Before I get started, roll into this.

19
00:01:32,210 --> 00:01:34,510
I have 2 confessions to make.

20
00:01:34,510 --> 00:01:41,080
My job has this, nothing to do with JS.

21
00:01:41,080 --> 00:01:42,450
Don't leave just yet.

22
00:01:42,450 --> 00:01:45,960
I spend my days on the native applications.

23
00:01:45,960 --> 00:01:49,939
I do GitHub for Mac and Windows.

24
00:01:49,939 --> 00:01:54,310
My second confession is, I'm a Windows developer.

25
00:01:54,310 --> 00:01:56,900
Hear me out!

26
00:01:56,900 --> 00:02:02,110
Before I was at GitHub I was working a lot
with JS.

27
00:02:02,110 --> 00:02:05,150
In terms of architecture.

28
00:02:05,150 --> 00:02:12,019
The JS and the browser have a lot in common
with the applications on the desktop.

29
00:02:12,019 --> 00:02:15,370
It is the amount of state.

30
00:02:15,370 --> 00:02:16,900
Models.

31
00:02:16,900 --> 00:02:23,260
The state of the all of the different views
displayed on a screen at any point of time.

32
00:02:23,260 --> 00:02:24,930
And in the browser, the state.

33
00:02:24,930 --> 00:02:29,360
It is a truckload of state we keep track of.

34
00:02:29,360 --> 00:02:33,370
On its own, state isn't that interesting.

35
00:02:33,370 --> 00:02:39,130
What makes an application interesting is that
we are able to interact.

36
00:02:39,130 --> 00:02:41,550
Force new states.

37
00:02:41,550 --> 00:02:43,959
Force state transitions.

38
00:02:43,959 --> 00:02:50,400
They are going to occur via events.

39
00:02:50,400 --> 00:02:51,940
Data into the form.

40
00:02:51,940 --> 00:02:53,280
Click the save botton.

41
00:02:53,280 --> 00:02:57,530
And transition into a new state.

42
00:02:57,530 --> 00:02:59,220
Maybe an invalid one.

43
00:02:59,220 --> 00:03:03,769
We have a lot of ways that we can make interesting
things happen.

44
00:03:03,769 --> 00:03:06,760
A lot of ways we can fire events.

45
00:03:06,760 --> 00:03:08,560
Dom events, model events.

46
00:03:08,560 --> 00:03:11,010
On the channels.

47
00:03:11,010 --> 00:03:17,489
We have a lot of state.

48
00:03:17,489 --> 00:03:20,230
And we have a lot of events.

49
00:03:20,230 --> 00:03:21,989
And it all needs to be managed.

50
00:03:21,989 --> 00:03:28,060
As the complexity in the application grows,
the amount of code, the features we need to

51
00:03:28,060 --> 00:03:34,060
support, the amount of people we have on the
team, all of that grows, becomes harder to

52
00:03:34,060 --> 00:03:37,829
keep track of all of the state and events.

53
00:03:37,829 --> 00:03:40,889
How many times you have seen code that has
conflated ideas.

54
00:03:40,889 --> 00:03:43,530
state and views.

55
00:03:43,530 --> 00:03:48,590
State and events.

56
00:03:48,590 --> 00:03:56,160
Without a way to separate thie data from the
views and the state from events, it gets intertwined.

57
00:03:56,160 --> 00:03:59,660
We cann't maintain it and can't change it.

58
00:03:59,660 --> 00:04:03,620
On top of all of that we are feeling shitty
about it.

59
00:04:03,620 --> 00:04:08,820
Without the architectural plan, it is a headache.

60
00:04:08,820 --> 00:04:12,360
So, what do we do?

61
00:04:12,360 --> 00:04:15,949
We take the inspiration from other places.

62
00:04:15,949 --> 00:04:17,010
Design patterns.

63
00:04:17,010 --> 00:04:22,150
Which have proven to be problems like spaghetti
code.

64
00:04:22,150 --> 00:04:26,440
We are able to do this.

65
00:04:26,440 --> 00:04:31,790
We can take things that have been applied
in 1 context and apply that in an entirely

66
00:04:31,790 --> 00:04:32,790
new one.

67
00:04:32,790 --> 00:04:34,230
Because we can do that.

68
00:04:34,230 --> 00:04:36,700
Take inspiration.

69
00:04:36,700 --> 00:04:42,240
Design patterns tend to evolve in an organic
fashion.

70
00:04:42,240 --> 00:04:44,050
From one place to another and stick.

71
00:04:44,050 --> 00:04:45,180
They are funny.

72
00:04:45,180 --> 00:04:51,540
Or they contrain a solution to a tricky problem.

73
00:04:51,540 --> 00:04:55,270
If you take the MV stuff.

74
00:04:55,270 --> 00:04:58,210
This is no exception to that.

75
00:04:58,210 --> 00:05:02,740
Presentation patterns actually originated
out of the client.

76
00:05:02,740 --> 00:05:05,360
Applications were built for the desktop.

77
00:05:05,360 --> 00:05:06,810
The Smalltalk days.

78
00:05:06,810 --> 00:05:11,330
Over time, Web server programming became popular.

79
00:05:11,330 --> 00:05:13,360
We applied it here too.

80
00:05:13,360 --> 00:05:19,900
We are building rich applications in the browser.

81
00:05:19,900 --> 00:05:23,680
We have frameworks.

82
00:05:23,680 --> 00:05:28,669
And then we have JS frameworks, also implementations
of Mvc.

83
00:05:28,669 --> 00:05:29,669
What gives?

84
00:05:29,669 --> 00:05:35,590
Well, I'm not here to turn this into a conversation
who is doing Mvc by the book.

85
00:05:35,590 --> 00:05:37,810
That's boring.

86
00:05:37,810 --> 00:05:42,580
What is interesting is to take a look at each
of the flavours of MV.

87
00:05:42,580 --> 00:05:48,280
And see how they are giving state and events
in each of the cases.

88
00:05:48,280 --> 00:05:54,050
To see which ideas can stick and which ones
are causing too much pain.

89
00:05:54,050 --> 00:06:01,720
Let's start out by looking at how Mvc would
place out on the server.

90
00:06:01,720 --> 00:06:03,580
This is a reminder to you guys.

91
00:06:03,580 --> 00:06:09,460
Actually, can I see hands of people who are
comfortable talking about Mvc?

92
00:06:09,460 --> 00:06:10,590
Great.

93
00:06:10,590 --> 00:06:13,970
Most of you.

94
00:06:13,970 --> 00:06:15,629
Few hands who didn't go up.

95
00:06:15,629 --> 00:06:18,340
I'll be quick and going through the basics.

96
00:06:18,340 --> 00:06:19,710
We have our models.

97
00:06:19,710 --> 00:06:20,879
They are the applications.

98
00:06:20,879 --> 00:06:23,639
Where the things happen.

99
00:06:23,639 --> 00:06:27,069
The views, presentations of those models.

100
00:06:27,069 --> 00:06:32,410
It is in the form of a Json document.

101
00:06:32,410 --> 00:06:36,419
Representations of models current state.

102
00:06:36,419 --> 00:06:38,139
We have the controllers.

103
00:06:38,139 --> 00:06:41,190
Sending commands to the model.

104
00:06:41,190 --> 00:06:48,440
Transitioning the model state and returning
a new snapshot of that current state.

105
00:06:48,440 --> 00:06:52,509
Routes don't really fit into the traditional
definition.

106
00:06:52,509 --> 00:06:55,800
On the server they are key part of the architecture.

107
00:06:55,800 --> 00:07:04,409
Response from matching the requests and delegating
it off to a controller and action.

108
00:07:04,409 --> 00:07:09,160
The point that I want to make here, how this
pertains to state is managed on the server.

109
00:07:09,160 --> 00:07:11,379
It is not.

110
00:07:11,379 --> 00:07:13,000
We don't have state on ther server.

111
00:07:13,000 --> 00:07:14,699
We might, but we probably don't.

112
00:07:14,699 --> 00:07:17,800
We build stateless applications.

113
00:07:17,800 --> 00:07:22,090
We scale out.

114
00:07:22,090 --> 00:07:26,469
We achieve this by persisting to datastore
of some kind.

115
00:07:26,469 --> 00:07:28,860
Which has the question.

116
00:07:28,860 --> 00:07:34,900
If we want to be stateless, how are we going
to make interesting things to the data.

117
00:07:34,900 --> 00:07:40,999
How we transition into a new state?

118
00:07:40,999 --> 00:07:41,999
We address state.

119
00:07:41,999 --> 00:07:42,999
Http.

120
00:07:42,999 --> 00:07:46,029
Get me a list.

121
00:07:46,029 --> 00:07:48,100
If we want to delete a list of books.

122
00:07:48,100 --> 00:07:52,160
I don't know why.

123
00:07:52,160 --> 00:07:55,520
If you did, Http, delete.

124
00:07:55,520 --> 00:07:58,729
What we have done here, we have simulated
a state transition.

125
00:07:58,729 --> 00:08:03,120
We have simulated an event.

126
00:08:03,120 --> 00:08:10,409
In this world, state and all state transitions
are via Http.

127
00:08:10,409 --> 00:08:12,469
The controller has an action invoked.

128
00:08:12,469 --> 00:08:16,009
The model look up and maybe a state transition.

129
00:08:16,009 --> 00:08:21,069
And a snapshot returned.

130
00:08:21,069 --> 00:08:24,479
An architecture that is linear.

131
00:08:24,479 --> 00:08:29,229
Requests come in and a snapshot is returned.

132
00:08:29,229 --> 00:08:34,690
We go down the stack and back up.

133
00:08:34,690 --> 00:08:41,370
How does it all relate to how the implementation's
playout on the client?

134
00:08:41,370 --> 00:08:47,170
The key difference is, on the client, we are
no longer to be stateless.

135
00:08:47,170 --> 00:08:50,990
We have all of the state in memory.

136
00:08:50,990 --> 00:08:52,360
We can do great things.

137
00:08:52,360 --> 00:08:56,260
We can build a much richer state of interactions.

138
00:08:56,260 --> 00:08:57,900
We keep a bunch of things in memory.

139
00:08:57,900 --> 00:09:00,589
To help us form this.

140
00:09:00,589 --> 00:09:06,540
A very non linear state space.

141
00:09:06,540 --> 00:09:07,540
We have our models.

142
00:09:07,540 --> 00:09:11,190
They are coupled with the snapshot from the
server.

143
00:09:11,190 --> 00:09:14,839
We add complexity on top of that.

144
00:09:14,839 --> 00:09:19,260
Validation, security,, a lot of other kinds
of behaviors.

145
00:09:19,260 --> 00:09:25,540
We have an enormous amount of possible states
that the model could be in.

146
00:09:25,540 --> 00:09:29,850
On the screen at any point, we have a lot
of views.

147
00:09:29,850 --> 00:09:32,500
Each presenting models state.

148
00:09:32,500 --> 00:09:38,880
And together all of those views are going
to define the overall view state of the application.

149
00:09:38,880 --> 00:09:41,339
What's being presented in the sidebar?

150
00:09:41,339 --> 00:09:42,339
The contact view.

151
00:09:42,339 --> 00:09:45,570
What is in the main region.

152
00:09:45,570 --> 00:09:49,019
All of this is adding complexity to the state
space.

153
00:09:49,019 --> 00:09:54,459
And then we have the overall state of the
application.

154
00:09:54,459 --> 00:09:57,130
Questions like, which modules are invoked?

155
00:09:57,130 --> 00:09:59,320
Which no longer being used?

156
00:09:59,320 --> 00:10:02,100
Can I clean it up?

157
00:10:02,100 --> 00:10:10,360
And then, as an added bonus, we no longer
have to emulate those state transitions across

158
00:10:10,360 --> 00:10:12,160
boundary.

159
00:10:12,160 --> 00:10:19,750
They occur in the same context.

160
00:10:19,750 --> 00:10:20,850
That's empowering.

161
00:10:20,850 --> 00:10:25,110
We move around that state space in a non linear
fashion.

162
00:10:25,110 --> 00:10:28,459
It should be reflected in the code we write.

163
00:10:28,459 --> 00:10:30,920
In the simplest way possible.

164
00:10:30,920 --> 00:10:35,980
We need to test and predict how the application
is going to behave.

165
00:10:35,980 --> 00:10:37,990
We need to have a plan.

166
00:10:37,990 --> 00:10:42,570
Apply come ideas, patterns to help us.

167
00:10:42,570 --> 00:10:46,589
On the server, we bring over those presentation
patterns.

168
00:10:46,589 --> 00:10:50,810
Models, views, controllers.

169
00:10:50,810 --> 00:10:53,420
And then we add routes to the equation.

170
00:10:53,420 --> 00:11:01,060
Now, I mentioned, traditional implementations
don't...

171
00:11:01,060 --> 00:11:03,810
On the desktop that is true.

172
00:11:03,810 --> 00:11:08,079
This is one place where the architecture differs.

173
00:11:08,079 --> 00:11:12,290
Coming from the desktop I felt weird about
it.

174
00:11:12,290 --> 00:11:13,970
Why do we need routes?

175
00:11:13,970 --> 00:11:15,199
How do they fit?

176
00:11:15,199 --> 00:11:18,190
How do I put them into my architecture?

177
00:11:18,190 --> 00:11:24,410
It all felt weird until I remember, we have
the addressbar.

178
00:11:24,410 --> 00:11:31,660
We need to be able to copy a link. and they
should arrive at the same state.

179
00:11:31,660 --> 00:11:39,980
Addressability is still a key for single page
applications.

180
00:11:39,980 --> 00:11:47,720
So what I want to do now is explore and question
how we commonly see routes applied in JS apps.

181
00:11:47,720 --> 00:11:51,480
Look at some of the ways we would structure
the code.

182
00:11:51,480 --> 00:11:54,280
I'll give the example in Backbone.

183
00:11:54,280 --> 00:11:58,250
It might be different in each of the frameworks.

184
00:11:58,250 --> 00:12:02,170
You might not see the steps.

185
00:12:02,170 --> 00:12:06,170
But the series of events is going to be the
same.

186
00:12:06,170 --> 00:12:10,110
So, here we are dealing with a party of animals.

187
00:12:10,110 --> 00:12:11,490
Party animals are pretty great.

188
00:12:11,490 --> 00:12:17,520
We have got an animal model and a list of
animals.

189
00:12:17,520 --> 00:12:21,010
We have a view.

190
00:12:21,010 --> 00:12:23,509
And then we have a router.

191
00:12:23,509 --> 00:12:25,490
Interesting fact about backbone routers.

192
00:12:25,490 --> 00:12:30,290
When they came out, it was cold a controller.

193
00:12:30,290 --> 00:12:33,370
It led to confusion.

194
00:12:33,370 --> 00:12:34,970
We have this router.

195
00:12:34,970 --> 00:12:36,730
It defines 2 routes.

196
00:12:36,730 --> 00:12:38,970
Party and uninvite.

197
00:12:38,970 --> 00:12:42,569
The party one behaves liks a git.

198
00:12:42,569 --> 00:12:46,990
And the uninvite like Http delete.

199
00:12:46,990 --> 00:12:50,870
If we get it on the addressbar.

200
00:12:50,870 --> 00:12:53,490
We invoke this function.

201
00:12:53,490 --> 00:13:01,699
What it does is it looks in the collection,
find the model in question, destroys it or

202
00:13:01,699 --> 00:13:07,649
transitions its state and then it moves around
into the dom.

203
00:13:07,649 --> 00:13:12,300
To update the state there.

204
00:13:12,300 --> 00:13:14,060
So why is this bad?

205
00:13:14,060 --> 00:13:20,930
We are breaking encapsulation to push everything
to the top of the code.

206
00:13:20,930 --> 00:13:25,500
We have a view that is responsible for doing
some iinitial rendering.

207
00:13:25,500 --> 00:13:26,970
It has a reference.

208
00:13:26,970 --> 00:13:34,519
The first thing we do is an active lookup
of that model and then we transition the state

209
00:13:34,519 --> 00:13:35,980
inside the router.

210
00:13:35,980 --> 00:13:43,339
Then even crazier, we reach behind the view
into the dom to update the view state.

211
00:13:43,339 --> 00:13:44,570
Which feels a little weird.

212
00:13:44,570 --> 00:13:47,230
We are breaking encapsulation.

213
00:13:47,230 --> 00:13:52,589
We took those flavours that we saw on the
server and tried to apply the linear approach

214
00:13:52,589 --> 00:13:55,139
to the client.

215
00:13:55,139 --> 00:13:56,430
We broke encapsulation.

216
00:13:56,430 --> 00:14:01,709
To have the design around the native support.

217
00:14:01,709 --> 00:14:09,140
We started to treat state and events, that
gives the rich experience, treat them like

218
00:14:09,140 --> 00:14:12,110
second class citizens.

219
00:14:12,110 --> 00:14:14,259
We don't need to be manipulating the models.

220
00:14:14,259 --> 00:14:15,959
Like rows in a database.

221
00:14:15,959 --> 00:14:20,820
They can be rich and interactive.

222
00:14:20,820 --> 00:14:24,410
We don't need to be pushing everything up
to the routes.

223
00:14:24,410 --> 00:14:29,990
And relying on routes to drive state transitions.

224
00:14:29,990 --> 00:14:35,690
When routes become architectural driver, it
is hard to know who is responsible for what.

225
00:14:35,690 --> 00:14:42,940
In my mind, routes are a feature, not a driver.

226
00:14:42,940 --> 00:14:45,690
The question is, are routes the enemy of the
state?

227
00:14:45,690 --> 00:14:47,950
They are not the enemy.

228
00:14:47,950 --> 00:14:51,610
We really need routes like I said earlier.

229
00:14:51,610 --> 00:14:54,360
It is an important consideration.

230
00:14:54,360 --> 00:15:01,990
The thing that is causing pain here with managing
state is only using routes as the driving

231
00:15:01,990 --> 00:15:05,269
part of architecture.

232
00:15:05,269 --> 00:15:09,500
We have emulated the designs that worked well
for the stateless server.

233
00:15:09,500 --> 00:15:14,959
The cracks start to show.

234
00:15:14,959 --> 00:15:17,980
So, thankfully we can find a happy medium.

235
00:15:17,980 --> 00:15:20,139
We can embrace the need for routes.

236
00:15:20,139 --> 00:15:24,339
Without relying to drive state transitions.

237
00:15:24,339 --> 00:15:30,120
First is address that example.

238
00:15:30,120 --> 00:15:32,980
And drop the need to address state transitions.

239
00:15:32,980 --> 00:15:36,650
We have our models like we had before.

240
00:15:36,650 --> 00:15:41,660
Now our view is going to have an event hash.

241
00:15:41,660 --> 00:15:42,730
This is nothing new.

242
00:15:42,730 --> 00:15:44,740
Backbone has supported this long time.

243
00:15:44,740 --> 00:15:46,180
All it is going to do.

244
00:15:46,180 --> 00:15:49,189
Takes a click, invoke the function on the
view itself.

245
00:15:49,189 --> 00:15:54,060
It is going to grab the model it has a reference
to.

246
00:15:54,060 --> 00:15:55,250
Transition the state.

247
00:15:55,250 --> 00:15:58,970
And remove itself from the Dom.

248
00:15:58,970 --> 00:16:04,020
We don't have to do any of those unnecessary
lookups.

249
00:16:04,020 --> 00:16:06,560
And the view is in charge of itself.

250
00:16:06,560 --> 00:16:07,740
In charge of the model.

251
00:16:07,740 --> 00:16:12,510
And in charge of collapsing itself from the
view.

252
00:16:12,510 --> 00:16:20,290
If we don't want to address transitions and
we still need to support the http get case,

253
00:16:20,290 --> 00:16:22,680
how do we do it in a clear way?

254
00:16:22,680 --> 00:16:28,329
I'll show you some ideas.

255
00:16:28,329 --> 00:16:32,569
We are going to take the models, take the
views, which render a template.

256
00:16:32,569 --> 00:16:36,490
And a response from the interaction between
the dom and the model.

257
00:16:36,490 --> 00:16:38,710
We are going to give it to a controller object.

258
00:16:38,710 --> 00:16:42,800
It might keep track of a few models.

259
00:16:42,800 --> 00:16:45,839
Of related functionality.

260
00:16:45,839 --> 00:16:50,820
We are going to slide that into a module.

261
00:16:50,820 --> 00:16:52,089
A singgle component.

262
00:16:52,089 --> 00:16:55,820
And we are going to do this for a bunch of
reasons.

263
00:16:55,820 --> 00:16:56,860
Stability, composability.

264
00:16:56,860 --> 00:17:00,120
It is sensible.

265
00:17:00,120 --> 00:17:02,980
I love this quote.

266
00:17:02,980 --> 00:17:06,060
It describes the idea behind modular thinking.

267
00:17:06,060 --> 00:17:12,220
It says, the whole world is trying to build
these large applications.

268
00:17:12,220 --> 00:17:14,640
We should get off that bus right now.

269
00:17:14,640 --> 00:17:16,510
It sucks, it is going nowhere.

270
00:17:16,510 --> 00:17:23,220
We should start building smaller apps and
testing those individually and bring them

271
00:17:23,220 --> 00:17:27,280
all together to compose them in a larger application
after the fact.

272
00:17:27,280 --> 00:17:29,490
I really like that.

273
00:17:29,490 --> 00:17:34,530
Modules are defined by functionality.

274
00:17:34,530 --> 00:17:39,340
Within that module there is any view.

275
00:17:39,340 --> 00:17:42,090
And keep track of its own internal state.

276
00:17:42,090 --> 00:17:45,630
There are several options for implementing.

277
00:17:45,630 --> 00:17:47,090
If you google.

278
00:17:47,090 --> 00:17:52,330
It is a well discussed and understood topic.

279
00:17:52,330 --> 00:17:56,760
We have modules, there are a lot of ways.

280
00:17:56,760 --> 00:18:03,430
But for me, the golden rule about modules
is while modules are free to present their

281
00:18:03,430 --> 00:18:09,840
view, they are never free to place them in
the dom.

282
00:18:09,840 --> 00:18:13,460
That responsibility needs to go toanother
object.

283
00:18:13,460 --> 00:18:17,910
We don't want to couple our modules to the
state of the dom.

284
00:18:17,910 --> 00:18:22,350
We need to be able to remove one from one
page and put it somewhere else and it should

285
00:18:22,350 --> 00:18:24,420
function.

286
00:18:24,420 --> 00:18:27,870
The other component responsible for making
this choice.

287
00:18:27,870 --> 00:18:31,160
I'm going to call it a layout composer.

288
00:18:31,160 --> 00:18:33,210
Its responsibility is obvious.

289
00:18:33,210 --> 00:18:36,460
To compose the UI.

290
00:18:36,460 --> 00:18:38,870
A toplevel view like a shell.

291
00:18:38,870 --> 00:18:44,750
With the regions that the modules are able
to present themselves.

292
00:18:44,750 --> 00:18:52,230
The composer is responsible for swapping the
views in and out.

293
00:18:52,230 --> 00:18:53,230
An example.

294
00:18:53,230 --> 00:18:57,270
If you heard of Marionette.

295
00:18:57,270 --> 00:19:01,370
The way it solves this problem, it has a regionmanager.

296
00:19:01,370 --> 00:19:07,150
You can register a foo and tie it to a bar.

297
00:19:07,150 --> 00:19:13,850
Or you can do the shorthand and define them
all at once.

298
00:19:13,850 --> 00:19:19,300
And the nice thing is, you can say, maincontent.Show
and give it a view.

299
00:19:19,300 --> 00:19:25,910
Internally what it is going to do is give
the element maincontent to the view and render

300
00:19:25,910 --> 00:19:28,750
itself in that place.

301
00:19:28,750 --> 00:19:30,780
But I think we can go further.

302
00:19:30,780 --> 00:19:32,900
We can take the composer.

303
00:19:32,900 --> 00:19:34,200
Add regions.

304
00:19:34,200 --> 00:19:37,050
But what we should be giving it is the module.

305
00:19:37,050 --> 00:19:41,530
And in the module has a reference to the element.

306
00:19:41,530 --> 00:19:45,450
And it is view to present the views.

307
00:19:45,450 --> 00:19:48,330
Until the layout composer decides it no longer
can.

308
00:19:48,330 --> 00:19:51,630
It is l going to look like this.

309
00:19:51,630 --> 00:19:53,660
A bunch of modules.

310
00:19:53,660 --> 00:19:58,660
And a lay out compuser.

311
00:19:58,660 --> 00:20:01,920
That we have running at one time.

312
00:20:01,920 --> 00:20:04,950
How does this placement occur?

313
00:20:04,950 --> 00:20:07,970
How does it work?

314
00:20:07,970 --> 00:20:13,650
The thing that is going to be responsible
for giving modules is a dispatcher.

315
00:20:13,650 --> 00:20:15,220
It is going to listen to events.

316
00:20:15,220 --> 00:20:20,180
It is time to load a new module.

317
00:20:20,180 --> 00:20:25,280
On such events it is going to load the module
and create an instance.

318
00:20:25,280 --> 00:20:30,600
And then hand it over to the composer to play
it.

319
00:20:30,600 --> 00:20:35,240
And one way we can know it is time to load
a new module is a routing event.

320
00:20:35,240 --> 00:20:41,540
In this event the router is going to be responsible
for 1 thing only.

321
00:20:41,540 --> 00:20:45,290
It is going to listen and observe url changes.

322
00:20:45,290 --> 00:20:52,050
When it hears those it is going to look up
which modules need to be loaded on the screen.

323
00:20:52,050 --> 00:20:56,570
And raise an event to the dispatcher.

324
00:20:56,570 --> 00:21:00,890
I have taken this code from a library.

325
00:21:00,890 --> 00:21:03,820
Chaplan.Js.

326
00:21:03,820 --> 00:21:06,640
Another library I would recommend you.

327
00:21:06,640 --> 00:21:09,070
It has great patterns.

328
00:21:09,070 --> 00:21:14,180
One of the things is a dispatcher.

329
00:21:14,180 --> 00:21:21,240
It describes a previous routes, current modules
and current route.

330
00:21:21,240 --> 00:21:25,420
Subscribes to Route:match.

331
00:21:25,420 --> 00:21:29,910
It is going to load th e modules.

332
00:21:29,910 --> 00:21:31,190
It is taking the modules.

333
00:21:31,190 --> 00:21:32,190
Look them up.

334
00:21:32,190 --> 00:21:34,090
Make sure they are running.

335
00:21:34,090 --> 00:21:36,840
And then hand them off to the layout manager.

336
00:21:36,840 --> 00:21:41,950
So we take on the dispatcher, responsible
for creating modules.

337
00:21:41,950 --> 00:21:43,690
And managing the lifetime.

338
00:21:43,690 --> 00:21:51,370
Interesting here is, the dispatcher knows
this module A is no longer in use.

339
00:21:51,370 --> 00:21:58,990
It is more responsible for managing the lifetime
and responsible for passing those modules

340
00:21:58,990 --> 00:22:04,500
over to the layout composer who is going to
place them in pthe overall UI.

341
00:22:04,500 --> 00:22:10,900
One way the dispatcher knows time to load
a new module is a an event occurs.

342
00:22:10,900 --> 00:22:17,190
It is not the driver of the architecture.

343
00:22:17,190 --> 00:22:23,010
It can be entirely driven by the events.

344
00:22:23,010 --> 00:22:27,040
So we have split up some of the concerns that
we had around state and events.

345
00:22:27,040 --> 00:22:29,880
And the views we were displaying.

346
00:22:29,880 --> 00:22:32,140
The state of the addressbar.

347
00:22:32,140 --> 00:22:36,260
We have a composable design.

348
00:22:36,260 --> 00:22:41,480
Into new states and in a non linear fashion.

349
00:22:41,480 --> 00:22:44,640
If it was all too long and you didn't read
it.

350
00:22:44,640 --> 00:22:47,050
This conference is pretty great.

351
00:22:47,050 --> 00:22:50,460
I'm not surprised if your brains are full.

352
00:22:50,460 --> 00:22:58,490
The management gets hard when we don't separate
the concerns zozer On the client, we should

353
00:22:58,490 --> 00:23:01,450
use routes to address states.

354
00:23:01,450 --> 00:23:04,730
But never transitions.

355
00:23:04,730 --> 00:23:07,870
We should be taking ideas from one context
to another.

356
00:23:07,870 --> 00:23:08,870
That's awesome.

357
00:23:08,870 --> 00:23:12,120
This is what programming fun.

358
00:23:12,120 --> 00:23:15,630
We can take inspiration from the server how
to include routes.

359
00:23:15,630 --> 00:23:17,640
It is not a rulebook.

360
00:23:17,640 --> 00:23:19,360
We need to be able to note these ideas.

361
00:23:19,360 --> 00:23:21,630
To support requirement.

362
00:23:21,630 --> 00:23:27,760
And embrace events within the same execution
context.

363
00:23:27,760 --> 00:23:29,620
We don't need to bake everything into the
router.

364
00:23:29,620 --> 00:23:31,630
It is not scalable long term.

365
00:23:31,630 --> 00:23:36,890
If I have to sum up.

366
00:23:36,890 --> 00:23:40,700
Don't architect the clintside code like it
is a webserver.

367
00:23:40,700 --> 00:23:42,520
Because it is not.

368
00:23:42,520 --> 00:23:44,040
Don't build servers on the client.

369
00:23:44,040 --> 00:23:45,060
Thank you.

