1
00:00:00,000 --> 00:00:00,350

[Applause]

2
00:00:00,350 --> 00:00:03,149
thank you very much I'm very glad to be

3
00:00:03,149 --> 00:00:06,779
here and first let me introduce myself

4
00:00:06,779 --> 00:00:11,160
briefly my name is Nikita and I work at

5
00:00:11,160 --> 00:00:13,290
made safe but it's a company that

6
00:00:13,290 --> 00:00:19,949
develops very barren Network and so my

7
00:00:19,949 --> 00:00:22,529
day job is kind of related to the topic

8
00:00:22,529 --> 00:00:25,710
of my today's talk and today I want to

9
00:00:25,710 --> 00:00:28,800
talk to you about WebRTC and for those

10
00:00:28,800 --> 00:00:31,619
who don't know it's an html5 technology

11
00:00:31,619 --> 00:00:33,870
that's commonly used to transfer video

12
00:00:33,870 --> 00:00:37,140
and voice data Google Hangouts uses it

13
00:00:37,140 --> 00:00:40,649
as well as many other tools that you

14
00:00:40,649 --> 00:00:42,270
might have used to talk to other people

15
00:00:42,270 --> 00:00:45,210
directly in your browser it's been

16
00:00:45,210 --> 00:00:46,980
available in most of the major browsers

17
00:00:46,980 --> 00:00:52,289
for a while since at least year to 2012

18
00:00:52,289 --> 00:00:54,629
I guess on both desktop and mobile

19
00:00:54,629 --> 00:00:58,649
platforms but actually web RTC is

20
00:00:58,649 --> 00:01:00,780
capable of much more than simply

21
00:01:00,780 --> 00:01:03,120
transferring media and in fact in my

22
00:01:03,120 --> 00:01:06,060
opinion WebRTC is able to spark a new

23
00:01:06,060 --> 00:01:08,700
decentralisation revolution and help in

24
00:01:08,700 --> 00:01:12,780
building a new internet so my goal today

25
00:01:12,780 --> 00:01:16,560
is not a teacher about all the intricate

26
00:01:16,560 --> 00:01:18,810
details of this technology but to

27
00:01:18,810 --> 00:01:22,470
inspire you to take to take you to take

28
00:01:22,470 --> 00:01:26,100
action and help to bring that revolution

29
00:01:26,100 --> 00:01:40,220
closer

30
00:01:40,230 --> 00:01:42,580
but there is a reasonable question that

31
00:01:42,580 --> 00:01:45,220
you might have why do we need that

32
00:01:45,220 --> 00:01:48,340
revolution at all do we need a new web

33
00:01:48,340 --> 00:01:51,430
like the current one works quite

34
00:01:51,430 --> 00:01:54,670
perfectly now right well in my opinion

35
00:01:54,670 --> 00:01:58,270
it does but at the same time the web and

36
00:01:58,270 --> 00:01:59,890
the internet were created a long long

37
00:01:59,890 --> 00:02:01,900
time ago and on the fundamental level

38
00:02:01,900 --> 00:02:05,530
they're a little bit flawed because the

39
00:02:05,530 --> 00:02:07,600
internet was originally conceived and

40
00:02:07,600 --> 00:02:09,640
created as a completely decentralized

41
00:02:09,640 --> 00:02:12,550
network that no single authority can

42
00:02:12,550 --> 00:02:16,660
control and the web as well was thought

43
00:02:16,660 --> 00:02:20,230
of as kind of a cyberspace where every

44
00:02:20,230 --> 00:02:22,989
human being is not in control of any

45
00:02:22,989 --> 00:02:25,600
government or any corporation and that

46
00:02:25,600 --> 00:02:27,820
they have complete freedom to say what

47
00:02:27,820 --> 00:02:31,180
they think and what they want and the

48
00:02:31,180 --> 00:02:35,670
web was a place without any censorship

49
00:02:35,670 --> 00:02:39,340
however lately this situation has

50
00:02:39,340 --> 00:02:43,000
changed drastically nowadays the web is

51
00:02:43,000 --> 00:02:45,130
largely dependent on big corporations

52
00:02:45,130 --> 00:02:48,760
that run our infrastructure like giant

53
00:02:48,760 --> 00:02:51,040
data centers and they provide many

54
00:02:51,040 --> 00:02:54,989
useful services like email for example

55
00:02:54,989 --> 00:02:58,239
it wasn't always like that though at

56
00:02:58,239 --> 00:03:00,400
first people set up and run their own

57
00:03:00,400 --> 00:03:02,110
email servers and control their own

58
00:03:02,110 --> 00:03:07,540
communications this approach was not

59
00:03:07,540 --> 00:03:10,420
scalable so so natural consequence was

60
00:03:10,420 --> 00:03:12,370
that a lot of small commercial email

61
00:03:12,370 --> 00:03:15,880
email providers sprang up at first they

62
00:03:15,880 --> 00:03:17,950
were small and if he was there at the

63
00:03:17,950 --> 00:03:19,840
early days of the web you might remember

64
00:03:19,840 --> 00:03:22,510
that it was a great feeling

65
00:03:22,510 --> 00:03:24,280
to just create your accounts and get

66
00:03:24,280 --> 00:03:27,310
access to whole 10 to 15 megabytes of

67
00:03:27,310 --> 00:03:32,380
your own inbox space but then something

68
00:03:32,380 --> 00:03:34,510
has changed the more people started to

69
00:03:34,510 --> 00:03:37,209
use the internet the more our services

70
00:03:37,209 --> 00:03:39,489
are consolidated around just a few of

71
00:03:39,489 --> 00:03:43,209
big providers and the result of that is

72
00:03:43,209 --> 00:03:47,590
that now our email usage is confined

73
00:03:47,590 --> 00:03:50,290
just a few giant services and almost no

74
00:03:50,290 --> 00:03:53,709
one runs their own servers and that's

75
00:03:53,709 --> 00:03:56,319
pretty understandable because it's just

76
00:03:56,319 --> 00:03:58,569
too inconvenient and not even strictly

77
00:03:58,569 --> 00:04:01,510
required to deal with all that spam all

78
00:04:01,510 --> 00:04:03,510
by yourself and handle all those

79
00:04:03,510 --> 00:04:08,140
daunting administration tasks and

80
00:04:08,140 --> 00:04:10,269
actually what happened to email is not

81
00:04:10,269 --> 00:04:12,640
unique we have seen the same process

82
00:04:12,640 --> 00:04:15,849
follow it for almost anything we use and

83
00:04:15,849 --> 00:04:18,340
see on the web and despite the email

84
00:04:18,340 --> 00:04:20,260
protocol itself being decentralized as

85
00:04:20,260 --> 00:04:23,260
many of other original internet

86
00:04:23,260 --> 00:04:25,150
protocols like a before instance or

87
00:04:25,150 --> 00:04:27,820
FTP we don't have centralized

88
00:04:27,820 --> 00:04:31,139
authorities that we depend upon and

89
00:04:31,139 --> 00:04:33,340
previously we had a concept of home

90
00:04:33,340 --> 00:04:34,960
pages we could which you could serve

91
00:04:34,960 --> 00:04:37,780
from your own home computer and put

92
00:04:37,780 --> 00:04:40,600
there anything you would like now you

93
00:04:40,600 --> 00:04:43,300
can kind of still do that but far more

94
00:04:43,300 --> 00:04:45,220
people just create their Facebook or

95
00:04:45,220 --> 00:04:49,750
Twitter profiles and now that what they

96
00:04:49,750 --> 00:04:51,220
can write and their profiles are

97
00:04:51,220 --> 00:04:53,410
determined not by people themselves by

98
00:04:53,410 --> 00:04:56,639
but by the policies of these websites

99
00:04:56,639 --> 00:04:59,530
it's like that so we have exchange tile

100
00:04:59,530 --> 00:05:01,479
control and our privacy for convenience

101
00:05:01,479 --> 00:05:04,479
and now the large corporations can tell

102
00:05:04,479 --> 00:05:07,510
us what we can say on the internet now

103
00:05:07,510 --> 00:05:09,310
it depends on those centralized services

104
00:05:09,310 --> 00:05:11,080
to do many things to share files through

105
00:05:11,080 --> 00:05:13,060
Dropbox we share messages through

106
00:05:13,060 --> 00:05:15,820
servers that we can control we pay with

107
00:05:15,820 --> 00:05:20,410
PayPal you might ask why is it bad

108
00:05:20,410 --> 00:05:22,780
though isn't that protocol to bring

109
00:05:22,780 --> 00:05:25,690
millions and now even a billion of users

110
00:05:25,690 --> 00:05:28,599
to the Internet well of course these

111
00:05:28,599 --> 00:05:30,490
services are very nice and there is

112
00:05:30,490 --> 00:05:34,960
nothing wrong with them as such but it's

113
00:05:34,960 --> 00:05:37,289
not only about the freedom of speech

114
00:05:37,289 --> 00:05:39,820
it's also about the fact that government

115
00:05:39,820 --> 00:05:41,590
started to snoop into our private data

116
00:05:41,590 --> 00:05:44,229
and communications in the name of good

117
00:05:44,229 --> 00:05:46,180
things like predicting children or

118
00:05:46,180 --> 00:05:48,360
protecting the world from terrorism and

119
00:05:48,360 --> 00:05:51,310
while these intentions are good the

120
00:05:51,310 --> 00:05:53,830
consequences of allowing other people to

121
00:05:53,830 --> 00:05:58,840
read your private data are not the more

122
00:05:58,840 --> 00:06:00,820
power the governments have the more

123
00:06:00,820 --> 00:06:01,750
likely it is

124
00:06:01,750 --> 00:06:03,250
that they will use this power in the

125
00:06:03,250 --> 00:06:06,790
wrong way and this is uh not some kind

126
00:06:06,790 --> 00:06:09,340
of theoretical or imaginable problem

127
00:06:09,340 --> 00:06:12,760
because this is our reality already in

128
00:06:12,760 --> 00:06:14,830
countries like turkey Russia and China

129
00:06:14,830 --> 00:06:17,110
where they block hundreds and thousands

130
00:06:17,110 --> 00:06:19,180
websites that they deem inappropriate or

131
00:06:19,180 --> 00:06:23,170
bad but actually what website you can

132
00:06:23,170 --> 00:06:25,780
name is bad different cultures have

133
00:06:25,780 --> 00:06:27,910
different concepts and understanding of

134
00:06:27,910 --> 00:06:31,630
of that and inappropriate but it's just

135
00:06:31,630 --> 00:06:35,169
you easy to use this excuse of a bad

136
00:06:35,169 --> 00:06:37,120
website to introduce censorship and

137
00:06:37,120 --> 00:06:39,550
silence the political opposition and we

138
00:06:39,550 --> 00:06:41,470
have seen that here already even in

139
00:06:41,470 --> 00:06:43,930
European countries like when Spain

140
00:06:43,930 --> 00:06:45,370
blocked websites and censored

141
00:06:45,370 --> 00:06:47,200
information that was related to their

142
00:06:47,200 --> 00:06:50,560
friend in Catalunya and of course we all

143
00:06:50,560 --> 00:06:53,169
know about the case of NSA the American

144
00:06:53,169 --> 00:06:55,720
spatial agency that collected private

145
00:06:55,720 --> 00:06:57,310
data of people from all around the world

146
00:06:57,310 --> 00:07:01,150
so with the power of social networks

147
00:07:01,150 --> 00:07:03,100
which are very large part of our lives

148
00:07:03,100 --> 00:07:05,500
now the governments and corporations can

149
00:07:05,500 --> 00:07:07,120
have another present its control over

150
00:07:07,120 --> 00:07:11,870
their lives or something like that

151
00:07:11,880 --> 00:07:14,590
can we change these beliefs current

152
00:07:14,590 --> 00:07:17,860
state over that I believe that began we

153
00:07:17,860 --> 00:07:19,360
just need to rethink the web from

154
00:07:19,360 --> 00:07:22,419
scratch and that might sound impossible

155
00:07:22,419 --> 00:07:25,419
to you at first but we can create the

156
00:07:25,419 --> 00:07:27,520
centralized networks and the centralized

157
00:07:27,520 --> 00:07:30,190
web apps that are just as easy to use as

158
00:07:30,190 --> 00:07:34,450
any other modern-day web application and

159
00:07:34,450 --> 00:07:35,800
I personally believe that the user

160
00:07:35,800 --> 00:07:37,900
experience is even more important than

161
00:07:37,900 --> 00:07:40,300
privacy or anything else because why

162
00:07:40,300 --> 00:07:41,950
would you use an app that frustrates

163
00:07:41,950 --> 00:07:43,810
your you don't understand how to use

164
00:07:43,810 --> 00:07:46,979
properly that's one of the reasons why

165
00:07:46,979 --> 00:07:49,570
so many privacy's Android applications

166
00:07:49,570 --> 00:07:51,490
failed in the past like take for example

167
00:07:51,490 --> 00:07:54,960
PGP and mio encryption which are

168
00:07:54,960 --> 00:07:57,460
bulletproof but at the same time they're

169
00:07:57,460 --> 00:07:59,530
also just inconvenient for everyday use

170
00:07:59,530 --> 00:08:01,780
and almost no one increases their immune

171
00:08:01,780 --> 00:08:08,830
email messages nowadays so that's also

172
00:08:08,830 --> 00:08:10,810
the reason why so many the surprise

173
00:08:10,810 --> 00:08:13,599
Network failed as well and that's why we

174
00:08:13,599 --> 00:08:15,650
need to incentivize users to

175
00:08:15,650 --> 00:08:18,740
is applications that are aware of these

176
00:08:18,740 --> 00:08:22,190
privacy concerns and I believe that

177
00:08:22,190 --> 00:08:24,949
diversity can be the answer now it's

178
00:08:24,949 --> 00:08:26,840
already available in most browsers and

179
00:08:26,840 --> 00:08:28,729
you don't need to install any software

180
00:08:28,729 --> 00:08:32,900
or a browser plug-ins for it to work you

181
00:08:32,900 --> 00:08:34,700
just open a web page and it connects

182
00:08:34,700 --> 00:08:36,710
directly to same users as you without

183
00:08:36,710 --> 00:08:38,479
passing data through any intermediary

184
00:08:38,479 --> 00:08:41,750
servers and a lot of people use forever

185
00:08:41,750 --> 00:08:43,969
to see now to transfer media but not a

186
00:08:43,969 --> 00:08:46,460
lot of people know that it can also be

187
00:08:46,460 --> 00:08:49,520
used to transfer any arbitrary text or

188
00:08:49,520 --> 00:08:52,190
binary data in an addition to that

189
00:08:52,190 --> 00:08:54,830
despite having weapon its name it's not

190
00:08:54,830 --> 00:08:57,050
confined to the web only and the

191
00:08:57,050 --> 00:08:59,660
protocol itself is open and you can use

192
00:08:59,660 --> 00:09:01,459
it from anywhere not only from a browser

193
00:09:01,459 --> 00:09:05,270
and that's a very powerful idea because

194
00:09:05,270 --> 00:09:06,950
you can create a beber this application

195
00:09:06,950 --> 00:09:09,410
that reberty's applications that work on

196
00:09:09,410 --> 00:09:11,390
desktop or Internet of Things devices

197
00:09:11,390 --> 00:09:13,850
all these devices will be compatible

198
00:09:13,850 --> 00:09:15,800
with web browsers and you can

199
00:09:15,800 --> 00:09:18,290
communicate with them directly skipping

200
00:09:18,290 --> 00:09:20,240
any third parties that together and

201
00:09:20,240 --> 00:09:23,709
analyze your private data

202
00:09:23,709 --> 00:09:25,880
Roberta C can also be used to create

203
00:09:25,880 --> 00:09:27,440
general-purpose and large-scale

204
00:09:27,440 --> 00:09:29,959
peer-to-peer networks which do not

205
00:09:29,959 --> 00:09:32,089
depend on centralized servers or any

206
00:09:32,089 --> 00:09:36,860
authorities it can also play a

207
00:09:36,860 --> 00:09:38,839
significant role in the recent trend of

208
00:09:38,839 --> 00:09:41,900
raid centralization or bringing back the

209
00:09:41,900 --> 00:09:45,200
Internet to its origins there are

210
00:09:45,200 --> 00:09:47,240
already exist a lot of decentralized

211
00:09:47,240 --> 00:09:49,520
applications that we use every day it

212
00:09:49,520 --> 00:09:52,010
all started with BitTorrent and Bitcoin

213
00:09:52,010 --> 00:09:54,680
which showed that global scalable

214
00:09:54,680 --> 00:09:58,089
peer-to-peer networks are possible and

215
00:09:58,089 --> 00:10:00,560
today not a small part of the world's

216
00:10:00,560 --> 00:10:02,270
Internet traffic consists of Bitcoin

217
00:10:02,270 --> 00:10:04,700
Bitcoin usage and this is where

218
00:10:04,700 --> 00:10:06,190
important fact that shows that

219
00:10:06,190 --> 00:10:09,170
decentralized apps are not purely like

220
00:10:09,170 --> 00:10:11,330
abstract or theoretical and that they

221
00:10:11,330 --> 00:10:16,040
are needed by the people so reberty see

222
00:10:16,040 --> 00:10:17,870
can serve as a kind of a bridge to

223
00:10:17,870 --> 00:10:20,089
existing peer-to-peer networks and with

224
00:10:20,089 --> 00:10:22,640
its help that can create a lot of new

225
00:10:22,640 --> 00:10:27,650
networks as well

226
00:10:27,660 --> 00:10:30,450
on the practical side the vibrating capi

227
00:10:30,450 --> 00:10:32,760
is simple it's a bit hard when it gets

228
00:10:32,760 --> 00:10:34,770
to establishing gas connection as we

229
00:10:34,770 --> 00:10:37,110
will see but for the message passing

230
00:10:37,110 --> 00:10:39,890
it's really similar to the websocket api

231
00:10:39,890 --> 00:10:42,990
just to initialize a data channel which

232
00:10:42,990 --> 00:10:45,870
is a data stream between two peers you

233
00:10:45,870 --> 00:10:47,370
set a callback function that will be

234
00:10:47,370 --> 00:10:49,320
called each time you get a new message

235
00:10:49,320 --> 00:10:51,630
and then you can send a message to

236
00:10:51,630 --> 00:10:55,170
itself the other side will get it and

237
00:10:55,170 --> 00:10:57,060
the own message callback will be

238
00:10:57,060 --> 00:10:59,280
triggered and that's almost all you need

239
00:10:59,280 --> 00:11:00,990
to know about exchanging messages in the

240
00:11:00,990 --> 00:11:03,600
RTC and behind the scenes the protocol

241
00:11:03,600 --> 00:11:05,370
guarantees that your messages will be

242
00:11:05,370 --> 00:11:06,890
encrypted

243
00:11:06,890 --> 00:11:09,690
the encryption thief is defined in the

244
00:11:09,690 --> 00:11:12,450
standard and it is mandatory you don't

245
00:11:12,450 --> 00:11:14,910
need to do anything to set it up the

246
00:11:14,910 --> 00:11:16,260
session encryption keys will be

247
00:11:16,260 --> 00:11:17,820
automatically created during the

248
00:11:17,820 --> 00:11:20,910
connection and tells a ssin step so our

249
00:11:20,910 --> 00:11:23,430
communications are secure and they can

250
00:11:23,430 --> 00:11:28,950
be tapped by anyone but most importantly

251
00:11:28,950 --> 00:11:30,420
you have to set up the connection

252
00:11:30,420 --> 00:11:32,900
properly first and you do that

253
00:11:32,900 --> 00:11:35,310
eventually you need to understand the

254
00:11:35,310 --> 00:11:37,890
concept of signalling which is quite

255
00:11:37,890 --> 00:11:40,980
complex topic by itself but to put it

256
00:11:40,980 --> 00:11:43,740
simply it's a connection stage when

257
00:11:43,740 --> 00:11:46,320
peers share their IP addresses and

258
00:11:46,320 --> 00:11:49,140
encryption keys with each other and they

259
00:11:49,140 --> 00:11:50,940
do that through some point of exchange

260
00:11:50,940 --> 00:11:53,150
that they have a great opponent advance

261
00:11:53,150 --> 00:11:55,440
that point of exchange can be

262
00:11:55,440 --> 00:11:57,870
practically anything and WebSocket

263
00:11:57,870 --> 00:12:01,320
server and mail exchange for some secure

264
00:12:01,320 --> 00:12:03,350
chat it doesn't matter

265
00:12:03,350 --> 00:12:06,750
some people might consider it this point

266
00:12:06,750 --> 00:12:07,980
of exchange as a kind of a

267
00:12:07,980 --> 00:12:10,230
centralization or a single point of

268
00:12:10,230 --> 00:12:13,400
failure though and in some sense it is

269
00:12:13,400 --> 00:12:15,690
but it's not really centralized because

270
00:12:15,690 --> 00:12:17,670
the way you do signalling is not defined

271
00:12:17,670 --> 00:12:20,310
in the WebRTC standards itself and it

272
00:12:20,310 --> 00:12:21,810
gives you a big extent of freedom in

273
00:12:21,810 --> 00:12:23,400
choosing the most efficient way that

274
00:12:23,400 --> 00:12:29,700
suits your application best so it can be

275
00:12:29,700 --> 00:12:33,480
compared to DNS if your Gena's server

276
00:12:33,480 --> 00:12:35,520
doesn't respond to your request you can

277
00:12:35,520 --> 00:12:37,680
always still get to the server if you

278
00:12:37,680 --> 00:12:40,450
know it's a be address right so have

279
00:12:40,450 --> 00:12:42,370
that information can bypass some of the

280
00:12:42,370 --> 00:12:44,050
centralized parts of the internet

281
00:12:44,050 --> 00:12:47,140
architecture infrastructure and the same

282
00:12:47,140 --> 00:12:48,790
thing basically applies to ever to see

283
00:12:48,790 --> 00:12:50,860
if you know IP addresses of your peers

284
00:12:50,860 --> 00:12:52,510
they can exchange the session

285
00:12:52,510 --> 00:12:56,050
information with them directly and when

286
00:12:56,050 --> 00:12:57,790
they get that information you won't need

287
00:12:57,790 --> 00:12:59,740
to deal with any kind of centralized

288
00:12:59,740 --> 00:13:03,730
servers anymore and now that we have

289
00:13:03,730 --> 00:13:05,410
learned the basic concepts we can try to

290
00:13:05,410 --> 00:13:07,900
establish our vertice connection which

291
00:13:07,900 --> 00:13:09,730
is a bit more complicated than the data

292
00:13:09,730 --> 00:13:12,700
channels API but when you learn it it

293
00:13:12,700 --> 00:13:16,660
becomes for other intuitive so what we

294
00:13:16,660 --> 00:13:19,120
need to know about it is that there are

295
00:13:19,120 --> 00:13:21,730
two sides of the handshake process and

296
00:13:21,730 --> 00:13:24,550
the connection the initiator and the

297
00:13:24,550 --> 00:13:27,700
recipient the initiator creates an offer

298
00:13:27,700 --> 00:13:29,440
which contains the session encryption

299
00:13:29,440 --> 00:13:31,600
key and in case if you want to stream

300
00:13:31,600 --> 00:13:33,190
media it will also contain the

301
00:13:33,190 --> 00:13:34,900
information about media encoding

302
00:13:34,900 --> 00:13:38,110
available codecs and so on so when an

303
00:13:38,110 --> 00:13:41,230
initiator has created an offer they need

304
00:13:41,230 --> 00:13:43,060
to sell it as a local description of the

305
00:13:43,060 --> 00:13:44,830
connection which will tell the browser

306
00:13:44,830 --> 00:13:47,200
how it should decode the incoming

307
00:13:47,200 --> 00:13:51,430
messages as a final step you need to

308
00:13:51,430 --> 00:13:53,800
send your offer to the recipient through

309
00:13:53,800 --> 00:13:55,990
the signaling channel which again can be

310
00:13:55,990 --> 00:13:58,360
a web secure connection or whatever you

311
00:13:58,360 --> 00:14:04,000
choose it to be and on the other end the

312
00:14:04,000 --> 00:14:05,890
party that you want to connect you the

313
00:14:05,890 --> 00:14:08,680
recipient receives an offer through the

314
00:14:08,680 --> 00:14:11,710
signaling channel and then they follow

315
00:14:11,710 --> 00:14:14,200
almost the same exact steps only at this

316
00:14:14,200 --> 00:14:16,180
time they will need to set your offer as

317
00:14:16,180 --> 00:14:18,880
a remote description instead which which

318
00:14:18,880 --> 00:14:20,320
will tell the browser how it should

319
00:14:20,320 --> 00:14:26,020
encode the outgoing messages then the

320
00:14:26,020 --> 00:14:28,030
other end should create an answer which

321
00:14:28,030 --> 00:14:29,560
in turn will contain their encryption

322
00:14:29,560 --> 00:14:32,050
keys and the session information they

323
00:14:32,050 --> 00:14:33,940
set it as their local description and

324
00:14:33,940 --> 00:14:36,790
then send it through the same signaling

325
00:14:36,790 --> 00:14:44,380
channel to the initiator party finally

326
00:14:44,380 --> 00:14:46,810
when the initiator gets the answer they

327
00:14:46,810 --> 00:14:48,550
just set it as their remote description

328
00:14:48,550 --> 00:14:50,680
and now both parties should have the

329
00:14:50,680 --> 00:14:52,090
full information to exchange messages

330
00:14:52,090 --> 00:14:53,860
both should know it

331
00:14:53,860 --> 00:14:56,350
there's encryption keys and now we can

332
00:14:56,350 --> 00:14:58,180
forget about the signaling server for

333
00:14:58,180 --> 00:15:01,660
now but not really because you also have

334
00:15:01,660 --> 00:15:03,430
to care about exchanging not only the

335
00:15:03,430 --> 00:15:04,269
encryption keys

336
00:15:04,269 --> 00:15:07,209
between the two parties but also and

337
00:15:07,209 --> 00:15:09,670
most importantly and most crucially

338
00:15:09,670 --> 00:15:12,550
their connection information that is you

339
00:15:12,550 --> 00:15:14,649
need to know an IP address of the other

340
00:15:14,649 --> 00:15:17,880
side to connect to them directly and

341
00:15:17,880 --> 00:15:20,140
there is a key that for the direct

342
00:15:20,140 --> 00:15:22,209
connections because in the real world

343
00:15:22,209 --> 00:15:24,730
most likely you will have to deal with

344
00:15:24,730 --> 00:15:29,470
Nats or network address translators most

345
00:15:29,470 --> 00:15:31,089
people deal with Nats in the form of

346
00:15:31,089 --> 00:15:33,220
rooters switch translate addresses from

347
00:15:33,220 --> 00:15:35,380
your local network to their real

348
00:15:35,380 --> 00:15:38,050
internet IP addresses and in fact it's

349
00:15:38,050 --> 00:15:40,600
not unusual to see case when behind a

350
00:15:40,600 --> 00:15:42,970
single global IP address there are

351
00:15:42,970 --> 00:15:45,040
several hundreds devices in the local

352
00:15:45,040 --> 00:15:48,880
network area and we need Nats because

353
00:15:48,880 --> 00:15:51,070
the IP version 4 address space is

354
00:15:51,070 --> 00:15:54,820
limited with 4 billion addresses and we

355
00:15:54,820 --> 00:15:56,500
have a lot more devices in the both now

356
00:15:56,500 --> 00:16:00,040
and because of Nats direct connections

357
00:16:00,040 --> 00:16:02,079
to peers in peer-to-peer networks become

358
00:16:02,079 --> 00:16:02,860
complicated

359
00:16:02,860 --> 00:16:05,529
you have to bypass this mess with one of

360
00:16:05,529 --> 00:16:09,700
the natural result techniques and this

361
00:16:09,700 --> 00:16:11,459
task is a bit complicated because

362
00:16:11,459 --> 00:16:13,630
because of the fact that there is no

363
00:16:13,630 --> 00:16:15,329
single standard way for Nats

364
00:16:15,329 --> 00:16:17,649
there's no single standard way to

365
00:16:17,649 --> 00:16:20,680
structure Nats but there aren't many of

366
00:16:20,680 --> 00:16:22,240
them kocoum

367
00:16:22,240 --> 00:16:25,120
port restricted symmetric Nats and even

368
00:16:25,120 --> 00:16:27,430
more non-conventional configurations and

369
00:16:27,430 --> 00:16:29,110
each type requires its own approach to

370
00:16:29,110 --> 00:16:33,459
bypass it but the good thing is these

371
00:16:33,459 --> 00:16:35,740
techniques are well known and in the

372
00:16:35,740 --> 00:16:37,180
simplest case it works in a pretty

373
00:16:37,180 --> 00:16:38,920
straightforward way you just send a

374
00:16:38,920 --> 00:16:40,839
request to some external address and

375
00:16:40,839 --> 00:16:43,660
that opens a port so that the external

376
00:16:43,660 --> 00:16:48,640
party could send you a response now if

377
00:16:48,640 --> 00:16:50,740
you know that port number you can just

378
00:16:50,740 --> 00:16:53,410
reuse it and send it back to your peer

379
00:16:53,410 --> 00:16:56,079
along with your public IP address and

380
00:16:56,079 --> 00:16:59,620
now that that knows that any data that

381
00:16:59,620 --> 00:17:01,839
gets to the sport should be forwarded to

382
00:17:01,839 --> 00:17:03,940
you you can communicate with your peers

383
00:17:03,940 --> 00:17:07,490
directly

384
00:17:07,500 --> 00:17:10,860
and WebRTC takes care about all of that

385
00:17:10,860 --> 00:17:12,539
for us so we don't need to be involved

386
00:17:12,539 --> 00:17:15,449
in that at all all their support from us

387
00:17:15,449 --> 00:17:17,730
is to collect our public IP address and

388
00:17:17,730 --> 00:17:20,549
afford and transfer them to our peer

389
00:17:20,549 --> 00:17:25,679
through the signaling channel but you

390
00:17:25,679 --> 00:17:27,600
have to discover your own IP addresses

391
00:17:27,600 --> 00:17:30,330
and port in the first place like most

392
00:17:30,330 --> 00:17:33,529
often you would do that through stun

393
00:17:33,529 --> 00:17:36,509
stun is a basic protocol that allows you

394
00:17:36,509 --> 00:17:38,970
to get your own IP address by sending a

395
00:17:38,970 --> 00:17:41,190
request to a stun server which basically

396
00:17:41,190 --> 00:17:44,460
acts as a kind of a mirror a sentry

397
00:17:44,460 --> 00:17:46,559
request from your local network and the

398
00:17:46,559 --> 00:17:48,570
stun server sees your translated address

399
00:17:48,570 --> 00:17:50,940
and the port and send them back to you

400
00:17:50,940 --> 00:17:53,940
and then you just need to broadcast them

401
00:17:53,940 --> 00:17:59,879
through the signaling channel it is a

402
00:17:59,879 --> 00:18:02,340
simplest case through because sometimes

403
00:18:02,340 --> 00:18:05,129
for various reasons your peers can't

404
00:18:05,129 --> 00:18:07,169
connect you directly like in the case

405
00:18:07,169 --> 00:18:08,940
when you're behind the symmetric net

406
00:18:08,940 --> 00:18:11,309
which will have a random port numbers

407
00:18:11,309 --> 00:18:14,580
assigned for each connections and but

408
00:18:14,580 --> 00:18:16,289
this problem can be solved as well with

409
00:18:16,289 --> 00:18:18,750
the other teams to bypass Nets it is

410
00:18:18,750 --> 00:18:24,179
called turn but turn is a kind of last

411
00:18:24,179 --> 00:18:26,700
resort because it basically works as a

412
00:18:26,700 --> 00:18:29,279
proxy server relay in traffic between

413
00:18:29,279 --> 00:18:32,370
peers obviously turn is a costly

414
00:18:32,370 --> 00:18:34,289
solution and you can't find a turn

415
00:18:34,289 --> 00:18:36,809
server in the wild as opposed to stun

416
00:18:36,809 --> 00:18:38,759
which is commonly provided by many

417
00:18:38,759 --> 00:18:42,360
servers there is a Google stun server so

418
00:18:42,360 --> 00:18:46,289
you can find a lot of them but luckily

419
00:18:46,289 --> 00:18:49,230
you won't need to resort to turn in many

420
00:18:49,230 --> 00:18:51,720
cases because symmetric Nats are not

421
00:18:51,720 --> 00:18:58,090
that common

422
00:18:58,100 --> 00:19:00,570
so to exchange the connection

423
00:19:00,570 --> 00:19:02,789
information there exists another special

424
00:19:02,789 --> 00:19:05,190
protocol that WebRTC uses which is

425
00:19:05,190 --> 00:19:09,509
called ice ice helps to discover all

426
00:19:09,509 --> 00:19:11,730
candidates or IP addresses and port

427
00:19:11,730 --> 00:19:13,679
payers by combining marie's in the

428
00:19:13,679 --> 00:19:16,350
traversal techniques it also collects

429
00:19:16,350 --> 00:19:18,840
your local IP addresses so your peers

430
00:19:18,840 --> 00:19:20,650
are on the local network

431
00:19:20,650 --> 00:19:22,270
you won't even need to go through the

432
00:19:22,270 --> 00:19:25,000
internet to connect to them so with ice

433
00:19:25,000 --> 00:19:27,220
we gather all candidates that we can

434
00:19:27,220 --> 00:19:29,500
find and send them to the other party

435
00:19:29,500 --> 00:19:31,900
which tries to use them all at once as

436
00:19:31,900 --> 00:19:34,690
synchronously meaning they will try to

437
00:19:34,690 --> 00:19:36,430
connect to us through all available

438
00:19:36,430 --> 00:19:39,250
means and finally hopefully resulting in

439
00:19:39,250 --> 00:19:42,910
a successful connection and the WebRTC

440
00:19:42,910 --> 00:19:45,070
implementation of this protocol allows

441
00:19:45,070 --> 00:19:47,080
us to concentrate on the application

442
00:19:47,080 --> 00:19:49,570
side because all that it requires from

443
00:19:49,570 --> 00:19:52,630
us is that team to provide that we need

444
00:19:52,630 --> 00:19:54,310
to provide the stun and turn server

445
00:19:54,310 --> 00:19:57,430
addresses then we set a callback

446
00:19:57,430 --> 00:19:59,350
function and sandwich collected

447
00:19:59,350 --> 00:20:02,790
candidate through the signaling channel

448
00:20:02,790 --> 00:20:06,940
in all the other end our peer listens on

449
00:20:06,940 --> 00:20:08,590
the signaling channel for incoming ice

450
00:20:08,590 --> 00:20:10,720
candidates and tries to use them as soon

451
00:20:10,720 --> 00:20:17,020
as they come in the real world however

452
00:20:17,020 --> 00:20:20,950
it's a bit much a bit more nuanced but

453
00:20:20,950 --> 00:20:22,840
basically that's all we need to know

454
00:20:22,840 --> 00:20:25,540
about setting up basic emergency

455
00:20:25,540 --> 00:20:32,890
connection however what we have seen so

456
00:20:32,890 --> 00:20:36,100
far was just the most simple possible

457
00:20:36,100 --> 00:20:37,870
topology what set up a connection

458
00:20:37,870 --> 00:20:39,940
between just two peers which can be

459
00:20:39,940 --> 00:20:44,020
useful of course but usually you imagine

460
00:20:44,020 --> 00:20:45,640
peer to peer networks is having more

461
00:20:45,640 --> 00:20:48,460
actors like if you have just two peers

462
00:20:48,460 --> 00:20:50,620
in your network you can just have a chat

463
00:20:50,620 --> 00:20:53,440
or exchange files with other person but

464
00:20:53,440 --> 00:20:56,530
it's not that useful and if they want to

465
00:20:56,530 --> 00:20:58,450
connect more peers to your network

466
00:20:58,450 --> 00:21:00,910
that's where it starts to get more

467
00:21:00,910 --> 00:21:04,630
complicated with multiple peers there

468
00:21:04,630 --> 00:21:06,220
are many ways to structure the p2p

469
00:21:06,220 --> 00:21:08,800
network you can just connect all peers

470
00:21:08,800 --> 00:21:11,980
to each other but it won't be the most

471
00:21:11,980 --> 00:21:15,580
efficient way to do that because if you

472
00:21:15,580 --> 00:21:18,010
transfer large files or voice or video

473
00:21:18,010 --> 00:21:19,870
data it will have to duplicate this

474
00:21:19,870 --> 00:21:22,180
traffic traffic for each connection and

475
00:21:22,180 --> 00:21:24,880
it might work for small connection with

476
00:21:24,880 --> 00:21:28,960
four or five peers but at one scale to

477
00:21:28,960 --> 00:21:31,660
hundreds and even tens of years it will

478
00:21:31,660 --> 00:21:33,049
just require

479
00:21:33,049 --> 00:21:35,269
no too much bandwidth and processing

480
00:21:35,269 --> 00:21:39,350
power there's an answer to that problem

481
00:21:39,350 --> 00:21:41,899
too you can choose one or more peers

482
00:21:41,899 --> 00:21:44,090
that have the most processing power and

483
00:21:44,090 --> 00:21:46,879
make them serve all other peers relating

484
00:21:46,879 --> 00:21:48,799
to traffic and multiplexing requests

485
00:21:48,799 --> 00:21:51,830
this is called star topology and it is

486
00:21:51,830 --> 00:21:54,350
pretty efficient it is also secure

487
00:21:54,350 --> 00:21:56,809
because the serving peers still won't

488
00:21:56,809 --> 00:21:59,360
have access to the session encryption

489
00:21:59,360 --> 00:22:03,169
keys but at the same time your network

490
00:22:03,169 --> 00:22:05,359
will start to rely on a single point of

491
00:22:05,359 --> 00:22:08,450
failure and it will depend on a good

492
00:22:08,450 --> 00:22:10,970
behavior of just a couple of notes so it

493
00:22:10,970 --> 00:22:15,200
will be kind of centralized again it is

494
00:22:15,200 --> 00:22:17,450
efficient for transferring a video and

495
00:22:17,450 --> 00:22:19,970
voice data though and many such

496
00:22:19,970 --> 00:22:22,009
applications use it like Google Hangouts

497
00:22:22,009 --> 00:22:26,210
for instance but there are also many

498
00:22:26,210 --> 00:22:28,369
more alternative ways of structuring p2p

499
00:22:28,369 --> 00:22:30,950
networks this topic is a bits out of

500
00:22:30,950 --> 00:22:33,049
scope of this talk unfortunately because

501
00:22:33,049 --> 00:22:35,720
it's it will be easy to spend at least

502
00:22:35,720 --> 00:22:38,960
30 minutes more to talk just about one

503
00:22:38,960 --> 00:22:41,779
of the algorithms so we can just mention

504
00:22:41,779 --> 00:22:44,179
that one of the prominent ones is the

505
00:22:44,179 --> 00:22:46,700
distributed hash table which has many

506
00:22:46,700 --> 00:22:49,070
different implementations it is also

507
00:22:49,070 --> 00:22:51,019
used by the BitTorrent Network for

508
00:22:51,019 --> 00:22:56,029
example and many of us have used be

509
00:22:56,029 --> 00:22:58,970
turned at least once and this protocol

510
00:22:58,970 --> 00:23:00,919
also has an interesting history because

511
00:23:00,919 --> 00:23:03,499
at first it dependent on centralized

512
00:23:03,499 --> 00:23:05,960
trackers to find the connection info and

513
00:23:05,960 --> 00:23:08,600
IP addresses of peers that serve files

514
00:23:08,600 --> 00:23:14,419
that you are searching for and this has

515
00:23:14,419 --> 00:23:18,080
an obvious disadvantage of trackers

516
00:23:18,080 --> 00:23:21,559
being that authorities are able to log

517
00:23:21,559 --> 00:23:23,989
the trackers and then you can can't find

518
00:23:23,989 --> 00:23:25,609
their current connection information and

519
00:23:25,609 --> 00:23:28,909
then you can download the file so now in

520
00:23:28,909 --> 00:23:31,399
BitTorrent and supports the distributed

521
00:23:31,399 --> 00:23:34,129
hash table algorithm so all you need to

522
00:23:34,129 --> 00:23:35,869
do is just find a single pair to

523
00:23:35,869 --> 00:23:38,749
bootstrap from because requests for

524
00:23:38,749 --> 00:23:41,210
files can be propagated throughout the

525
00:23:41,210 --> 00:23:44,059
network with several hops instead of

526
00:23:44,059 --> 00:23:45,430
relying on a single

527
00:23:45,430 --> 00:23:49,780
failure and the process of the initial

528
00:23:49,780 --> 00:23:51,400
connection to the network is now usually

529
00:23:51,400 --> 00:23:53,590
done by just by contacting a well-known

530
00:23:53,590 --> 00:23:56,560
node and then it can continue to work in

531
00:23:56,560 --> 00:23:58,450
a decentralized way because each node

532
00:23:58,450 --> 00:24:01,330
knows about its neighbours or theirs

533
00:24:01,330 --> 00:24:05,260
knows who contacted them so if you know

534
00:24:05,260 --> 00:24:07,480
at least a single IP address of a

535
00:24:07,480 --> 00:24:09,280
patrolling node you can join the full

536
00:24:09,280 --> 00:24:12,490
network and now an interesting question

537
00:24:12,490 --> 00:24:14,800
what will happen if we can bind the big

538
00:24:14,800 --> 00:24:18,390
current with WebRTC we get web torrent

539
00:24:18,390 --> 00:24:20,380
which has a bitter end protocol

540
00:24:20,380 --> 00:24:22,900
implementation for JavaScript which can

541
00:24:22,900 --> 00:24:25,510
work in browsers as well as on the

542
00:24:25,510 --> 00:24:28,510
server side and also it can communicate

543
00:24:28,510 --> 00:24:30,640
with BitTorrent peers directly from a

544
00:24:30,640 --> 00:24:32,920
browser because of incompatible Network

545
00:24:32,920 --> 00:24:36,160
protocols it still allows us to do a lot

546
00:24:36,160 --> 00:24:38,920
of interesting things and it simplifies

547
00:24:38,920 --> 00:24:40,420
the interaction with the verticity

548
00:24:40,420 --> 00:24:42,580
recall a lot we don't need to care about

549
00:24:42,580 --> 00:24:45,940
signaling and all that stuff all we have

550
00:24:45,940 --> 00:24:48,070
to do is to serve a file to the network

551
00:24:48,070 --> 00:24:50,320
and this file will be automatically

552
00:24:50,320 --> 00:24:53,380
converted into the torrent and announced

553
00:24:53,380 --> 00:24:55,810
on the tracker behind the schemes and

554
00:24:55,810 --> 00:24:57,100
that point has a pretty straightforward

555
00:24:57,100 --> 00:25:00,010
API you can serve basically anything as

556
00:25:00,010 --> 00:25:02,440
a file can be a blob a JSON object or

557
00:25:02,440 --> 00:25:06,190
even a JavaScript stream other peers

558
00:25:06,190 --> 00:25:08,770
knowing that torrent hash can download

559
00:25:08,770 --> 00:25:18,070
this file and set it further in files

560
00:25:18,070 --> 00:25:20,830
are generally not limited to a Linux

561
00:25:20,830 --> 00:25:22,840
distribution archives or whatever you

562
00:25:22,840 --> 00:25:25,090
usually download from torrents any

563
00:25:25,090 --> 00:25:26,800
information can be represented as an

564
00:25:26,800 --> 00:25:29,830
abstract file so web turn can be used

565
00:25:29,830 --> 00:25:32,800
for much more than just file sharing for

566
00:25:32,800 --> 00:25:34,300
instance we can build a distributed

567
00:25:34,300 --> 00:25:36,160
github quite easily because git

568
00:25:36,160 --> 00:25:38,110
extensively uses and relies in hashes

569
00:25:38,110 --> 00:25:40,630
for its internal implementation and so

570
00:25:40,630 --> 00:25:42,460
it will be a very straightforward to

571
00:25:42,460 --> 00:25:44,260
serve the get packed objects through

572
00:25:44,260 --> 00:25:46,870
torrents there is an proof-of-concept

573
00:25:46,870 --> 00:25:49,750
project called get torrent that already

574
00:25:49,750 --> 00:25:54,760
does just that and we can reuse the same

575
00:25:54,760 --> 00:25:56,950
protocol to serve web pages or static

576
00:25:56,950 --> 00:25:59,040
content and make a kind of

577
00:25:59,040 --> 00:26:01,680
distributed content delivery network so

578
00:26:01,680 --> 00:26:03,570
that each visitor of your website will

579
00:26:03,570 --> 00:26:05,820
serve the website's content to each

580
00:26:05,820 --> 00:26:09,840
other visitor and you didn't find many

581
00:26:09,840 --> 00:26:11,460
more applications of the BitTorrent

582
00:26:11,460 --> 00:26:17,340
protocol but still despite of being very

583
00:26:17,340 --> 00:26:21,420
promising whatever he sees in mature

584
00:26:21,420 --> 00:26:23,760
technology it still needs to come a long

585
00:26:23,760 --> 00:26:25,830
way to support large-scale networks that

586
00:26:25,830 --> 00:26:27,600
can transform the current centralized

587
00:26:27,600 --> 00:26:30,960
state of the web it's not perfect and

588
00:26:30,960 --> 00:26:34,320
has many limitations the browser support

589
00:26:34,320 --> 00:26:37,020
is not perfect for instance and current

590
00:26:37,020 --> 00:26:38,580
modern web browser such as Chrome or

591
00:26:38,580 --> 00:26:40,590
Firefox stolen at a number of

592
00:26:40,590 --> 00:26:42,270
connections that you can establish and

593
00:26:42,270 --> 00:26:44,490
because of this limitation and because

594
00:26:44,490 --> 00:26:46,080
of the handshake overhead

595
00:26:46,080 --> 00:26:49,770
it's practically impossible to build DHT

596
00:26:49,770 --> 00:26:52,440
networks which made the web for

597
00:26:52,440 --> 00:26:54,570
implementation dependent on the

598
00:26:54,570 --> 00:26:58,230
centralized trackers for now in addition

599
00:26:58,230 --> 00:27:01,140
to that Weber GC doesn't allow to allow

600
00:27:01,140 --> 00:27:03,300
us to use raw sockets so you can't

601
00:27:03,300 --> 00:27:04,650
connect to the existing networks

602
00:27:04,650 --> 00:27:06,510
directly they'll have to go through the

603
00:27:06,510 --> 00:27:11,040
proxies and another important issue is

604
00:27:11,040 --> 00:27:13,230
that browser sessions are usually

605
00:27:13,230 --> 00:27:15,510
short-lived when you close your tab you

606
00:27:15,510 --> 00:27:17,460
know lows you will lose all connections

607
00:27:17,460 --> 00:27:19,560
and the next time you will have to go

608
00:27:19,560 --> 00:27:22,110
through the costly signaling and the

609
00:27:22,110 --> 00:27:25,080
connection initiation process again this

610
00:27:25,080 --> 00:27:27,600
problem can be theoretically alleviated

611
00:27:27,600 --> 00:27:29,760
by allowing to run WebRTC sessions in

612
00:27:29,760 --> 00:27:32,520
service workers so that even if you

613
00:27:32,520 --> 00:27:34,500
close a tab with a very juicy connection

614
00:27:34,500 --> 00:27:36,300
you will still maintain your connection

615
00:27:36,300 --> 00:27:38,550
to the network of peers but it's kind of

616
00:27:38,550 --> 00:27:41,790
not possible for now and it's currently

617
00:27:41,790 --> 00:27:45,540
being developed another possible

618
00:27:45,540 --> 00:27:47,010
solution to the problem of short-lived

619
00:27:47,010 --> 00:27:50,190
sessions is hybrid servers because as I

620
00:27:50,190 --> 00:27:51,540
said earlier the Beverley's

621
00:27:51,540 --> 00:27:52,890
implementation is not limited to

622
00:27:52,890 --> 00:27:55,500
browsers so we can integrate the WebRTC

623
00:27:55,500 --> 00:27:58,080
protocol support into the existing

624
00:27:58,080 --> 00:28:00,120
peer-to-peer networks and they can act

625
00:28:00,120 --> 00:28:04,980
as kind of intermediary servers still

626
00:28:04,980 --> 00:28:07,260
well there is a there is a lot of

627
00:28:07,260 --> 00:28:09,780
problems to overcome WebRTC is very

628
00:28:09,780 --> 00:28:12,300
useful today and I'm hoping to see many

629
00:28:12,300 --> 00:28:12,600
new

630
00:28:12,600 --> 00:28:16,470
projects that used this particle but

631
00:28:16,470 --> 00:28:18,060
between networks in general have their

632
00:28:18,060 --> 00:28:19,980
own set of problems to solve because

633
00:28:19,980 --> 00:28:22,260
these networks are trustless it's hard

634
00:28:22,260 --> 00:28:23,970
to solve the problem of malicious peers

635
00:28:23,970 --> 00:28:26,730
for instance which can span your network

636
00:28:26,730 --> 00:28:28,470
work misbehave in order to gain some

637
00:28:28,470 --> 00:28:30,810
advantages in a fist or contained and

638
00:28:30,810 --> 00:28:32,910
multiple nodes but step under the

639
00:28:32,910 --> 00:28:35,340
territory of distributed systems which

640
00:28:35,340 --> 00:28:37,470
are very complex because we'll have to

641
00:28:37,470 --> 00:28:40,670
deal with data consistency in churn

642
00:28:40,670 --> 00:28:43,140
because imagine that all knows that

643
00:28:43,140 --> 00:28:45,750
store some file on the network leave all

644
00:28:45,750 --> 00:28:50,190
at once effectively this file will be

645
00:28:50,190 --> 00:28:52,260
lost and it's completely fine if that

646
00:28:52,260 --> 00:28:54,120
file has no value to you like if it's on

647
00:28:54,120 --> 00:28:56,580
another of Justin Bieber songs or

648
00:28:56,580 --> 00:28:58,650
whatever but imagine if that file was

649
00:28:58,650 --> 00:29:00,660
your Bitcoin wallet you certainly

650
00:29:00,660 --> 00:29:03,750
wouldn't want to lose it that's why for

651
00:29:03,750 --> 00:29:05,460
redundancy we have to make sure to have

652
00:29:05,460 --> 00:29:06,840
enough copies of the same file

653
00:29:06,840 --> 00:29:09,150
distributed over mail well over many

654
00:29:09,150 --> 00:29:12,840
nodes and it is not definitely not an

655
00:29:12,840 --> 00:29:14,580
easy task to coordinate nodes which

656
00:29:14,580 --> 00:29:16,920
don't trust each other so if we are

657
00:29:16,920 --> 00:29:19,170
talking about a long lasting global

658
00:29:19,170 --> 00:29:21,060
scale network we need to make sure that

659
00:29:21,060 --> 00:29:23,940
Pearson these networks are incentivized

660
00:29:23,940 --> 00:29:28,860
to stay and in my opinion the economy of

661
00:29:28,860 --> 00:29:31,140
p2p networks is even more important than

662
00:29:31,140 --> 00:29:34,770
their algorithms because not a lot of

663
00:29:34,770 --> 00:29:36,240
people would want to share their

664
00:29:36,240 --> 00:29:38,520
resources if there is no reward for them

665
00:29:38,520 --> 00:29:40,980
but can kind of solve this problem by

666
00:29:40,980 --> 00:29:44,280
giving some coins to mining nodes but

667
00:29:44,280 --> 00:29:46,560
it's tricky because some strategies can

668
00:29:46,560 --> 00:29:49,350
lead to centralization all over again we

669
00:29:49,350 --> 00:29:51,060
have seen that on the same example of

670
00:29:51,060 --> 00:29:53,580
Bitcoin where mining is now largely

671
00:29:53,580 --> 00:29:56,940
consolidated around just a few large

672
00:29:56,940 --> 00:30:01,410
pools and remember that the Internet

673
00:30:01,410 --> 00:30:03,120
itself originally was started as a

674
00:30:03,120 --> 00:30:05,700
distributed network - but the question

675
00:30:05,700 --> 00:30:07,350
of who provides the resources and who

676
00:30:07,350 --> 00:30:09,630
serves the webpages leads us to use in

677
00:30:09,630 --> 00:30:11,700
modern days of giant centralized data

678
00:30:11,700 --> 00:30:14,670
centers and mega corporations so this is

679
00:30:14,670 --> 00:30:16,560
an open question and we ought to look

680
00:30:16,560 --> 00:30:19,080
for an answer because I think answering

681
00:30:19,080 --> 00:30:20,370
this question will be very beneficial

682
00:30:20,370 --> 00:30:25,780
for very beneficial for all of us

683
00:30:25,790 --> 00:30:28,670
we can do a lot with WebRTC and we can

684
00:30:28,670 --> 00:30:31,040
confirm the current internet we can

685
00:30:31,040 --> 00:30:33,440
bring existing p2p networks such as tor

686
00:30:33,440 --> 00:30:36,230
to web by putting them to dissemble and

687
00:30:36,230 --> 00:30:39,650
adding the WebRTC protocol support we

688
00:30:39,650 --> 00:30:41,780
can build new p2p networks that point

689
00:30:41,780 --> 00:30:43,520
depends on the will of governments and

690
00:30:43,520 --> 00:30:46,340
greedy corporations these networks can

691
00:30:46,340 --> 00:30:48,110
be used to get back the control over

692
00:30:48,110 --> 00:30:50,720
data to the people because they are more

693
00:30:50,720 --> 00:30:53,960
secure and resilient in the application

694
00:30:53,960 --> 00:30:56,090
of a bird ECM will be especially

695
00:30:56,090 --> 00:30:58,100
important in the area of Internet of

696
00:30:58,100 --> 00:31:01,400
Things as we can see that medical

697
00:31:01,400 --> 00:31:04,490
devices self-driving cars smart homes

698
00:31:04,490 --> 00:31:05,990
and critical infrastructure already

699
00:31:05,990 --> 00:31:08,840
depends on the internet which is by and

700
00:31:08,840 --> 00:31:10,040
large controlled by a few big players

701
00:31:10,040 --> 00:31:14,330
now and I strongly believe that it's not

702
00:31:14,330 --> 00:31:17,780
right to give these mega corporations

703
00:31:17,780 --> 00:31:19,310
and governments even more power and

704
00:31:19,310 --> 00:31:21,950
control over our data and consequently

705
00:31:21,950 --> 00:31:25,670
or our daily lives so you can find me on

706
00:31:25,670 --> 00:31:27,560
Twitter and there is a link to page

707
00:31:27,560 --> 00:31:30,110
listing some is for resources related to

708
00:31:30,110 --> 00:31:32,150
this talk and thanks a lot for your

709
00:31:32,150 --> 00:31:33,470
attention

710
00:31:33,470 --> 00:31:40,720
[Applause]

