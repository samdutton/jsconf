1
00:00:09,050 --> 00:00:11,400

today I'm going to talk about react GS

2
00:00:11,400 --> 00:00:13,650
and unfortunately you can't see the

3
00:00:13,650 --> 00:00:16,080
picture but this is a picture of a bunch

4
00:00:16,080 --> 00:00:17,850
of turtles sitting on top of each other

5
00:00:17,850 --> 00:00:20,189
and I've tried to use the the subtitle

6
00:00:20,189 --> 00:00:21,689
JavaScript Turtles all the way down and

7
00:00:21,689 --> 00:00:25,199
I hope you'll see what I mean as we go

8
00:00:25,199 --> 00:00:31,949
forward so we're experiencing this

9
00:00:31,949 --> 00:00:35,430
progression of JavaScript adoption in

10
00:00:35,430 --> 00:00:38,100
lots of places you wouldn't expect it so

11
00:00:38,100 --> 00:00:40,379
this is a typical web stack you know

12
00:00:40,379 --> 00:00:41,910
you've got the browser layer you've got

13
00:00:41,910 --> 00:00:43,260
the server layer you've got a dad base

14
00:00:43,260 --> 00:00:46,530
layer and the typical stack kind of

15
00:00:46,530 --> 00:00:47,879
looks like this or at least the

16
00:00:47,879 --> 00:00:49,110
traditional one does you've got

17
00:00:49,110 --> 00:00:51,300
javascript in your browser the powers of

18
00:00:51,300 --> 00:00:53,250
you I you know shows your countdown

19
00:00:53,250 --> 00:00:55,890
whatever and you've got some kind of

20
00:00:55,890 --> 00:00:57,840
server-side language like Java Ruby PHP

21
00:00:57,840 --> 00:01:01,320
Python the list goes on and then inside

22
00:01:01,320 --> 00:01:04,290
your database you have SQL well so now

23
00:01:04,290 --> 00:01:06,600
we have no GS right so we can build

24
00:01:06,600 --> 00:01:09,240
great server applications in JavaScript

25
00:01:09,240 --> 00:01:11,700
which is totally awesome but you notice

26
00:01:11,700 --> 00:01:14,909
that that a little section there the DB

27
00:01:14,909 --> 00:01:17,280
hasn't changed yet so what can we do to

28
00:01:17,280 --> 00:01:21,420
bring JavaScript to the database so like

29
00:01:21,420 --> 00:01:22,890
all these turtles that are marching

30
00:01:22,890 --> 00:01:24,540
toward the sea and I hope you can see

31
00:01:24,540 --> 00:01:27,420
that we're on a path and that path is

32
00:01:27,420 --> 00:01:31,170
adoption of JavaScript in all places all

33
00:01:31,170 --> 00:01:33,450
right so you're probably saying what

34
00:01:33,450 --> 00:01:36,119
about CouchDB couch TV has javascript

35
00:01:36,119 --> 00:01:39,750
and couch TV is great I like couchdb a

36
00:01:39,750 --> 00:01:42,329
lot and I'm going to apologize advance

37
00:01:42,329 --> 00:01:44,909
for this straw man argument so no

38
00:01:44,909 --> 00:01:46,740
offense to any of the couch GBI guys

39
00:01:46,740 --> 00:01:50,250
there in the that are in the room it has

40
00:01:50,250 --> 00:01:53,340
been my experience even long before i

41
00:01:53,340 --> 00:01:55,320
started at ba show that the types of

42
00:01:55,320 --> 00:01:56,969
applications people want to build with

43
00:01:56,969 --> 00:02:00,030
CouchDB are not the types of

44
00:02:00,030 --> 00:02:01,619
applications that people would want to

45
00:02:01,619 --> 00:02:03,860
have

46
00:02:03,860 --> 00:02:06,030
I'm sorry not the same types of

47
00:02:06,030 --> 00:02:07,650
applications that you would write for

48
00:02:07,650 --> 00:02:12,209
nodejs and so in a sense you don't want

49
00:02:12,209 --> 00:02:15,090
to end up like this turtle and if you

50
00:02:15,090 --> 00:02:16,980
can't see it there's a car on the road

51
00:02:16,980 --> 00:02:20,130
way behind him you know you want to

52
00:02:20,130 --> 00:02:22,950
rather be like these turtles right you

53
00:02:22,950 --> 00:02:27,030
want to be no GS ninjas so I'm going to

54
00:02:27,030 --> 00:02:28,860
tell you a bit about rioc and why you

55
00:02:28,860 --> 00:02:31,230
should use Frank's awesome rioc GS

56
00:02:31,230 --> 00:02:36,480
driver so say hi to Frank later so what

57
00:02:36,480 --> 00:02:40,320
is react react is a distributed fault

58
00:02:40,320 --> 00:02:43,350
tolerant replicated data store so if you

59
00:02:43,350 --> 00:02:46,470
think of like a lot of people are

60
00:02:46,470 --> 00:02:47,940
familiar with CouchDB a lot of people

61
00:02:47,940 --> 00:02:49,350
familiar with Redis in the room I'm

62
00:02:49,350 --> 00:02:52,860
assuming it's a key value store but the

63
00:02:52,860 --> 00:02:54,720
big difference is that all of your data

64
00:02:54,720 --> 00:02:56,730
is replicated a bunch of among a bunch

65
00:02:56,730 --> 00:02:59,220
of machines so we like to say your data

66
00:02:59,220 --> 00:03:02,220
is safe with us you can lose a machine

67
00:03:02,220 --> 00:03:05,850
your data is still available the next

68
00:03:05,850 --> 00:03:08,780
thing is that it scales out linearly so

69
00:03:08,780 --> 00:03:11,670
you know a lot of people say lots of

70
00:03:11,670 --> 00:03:15,269
things about scalability and what we say

71
00:03:15,269 --> 00:03:17,459
is just add more machines so this is not

72
00:03:17,459 --> 00:03:20,100
that every machine has all your data but

73
00:03:20,100 --> 00:03:23,130
every machine can serve any requests for

74
00:03:23,130 --> 00:03:27,810
any client and react also has a flexible

75
00:03:27,810 --> 00:03:30,690
data model which means it's essentially

76
00:03:30,690 --> 00:03:32,880
key value but you have a couple extras

77
00:03:32,880 --> 00:03:34,380
which I'll talk about in the course of

78
00:03:34,380 --> 00:03:37,440
this talk and you have MapReduce and we

79
00:03:37,440 --> 00:03:39,180
also have a pretty recently released

80
00:03:39,180 --> 00:03:41,609
react search now of course with a

81
00:03:41,609 --> 00:03:43,829
flexible data model great power comes

82
00:03:43,829 --> 00:03:46,739
great responsibility so in your app

83
00:03:46,739 --> 00:03:47,940
you're going to have to take a little

84
00:03:47,940 --> 00:03:49,709
bit more ownership of how you structure

85
00:03:49,709 --> 00:03:52,320
and manipulate your data now I've

86
00:03:52,320 --> 00:03:54,480
glossed over a lot of the the high level

87
00:03:54,480 --> 00:03:58,010
features of react but Matthias who's

88
00:03:58,010 --> 00:04:01,019
taking some awesome pictures today made

89
00:04:01,019 --> 00:04:04,500
this awesome animated gif and I think it

90
00:04:04,500 --> 00:04:06,480
explains better than what I could do in

91
00:04:06,480 --> 00:04:10,350
words how rioc works so in this little

92
00:04:10,350 --> 00:04:12,390
animated gif you've got eight nodes in

93
00:04:12,390 --> 00:04:14,280
your cluster you sent a request to one

94
00:04:14,280 --> 00:04:16,010
it goes out to three

95
00:04:16,010 --> 00:04:19,520
and then if you lose one the data goes

96
00:04:19,520 --> 00:04:21,620
to some other node that might have a

97
00:04:21,620 --> 00:04:24,100
copy or store copy when that other node

98
00:04:24,100 --> 00:04:26,930
node that was lost comes back the data

99
00:04:26,930 --> 00:04:30,170
goes back where it belongs oh yeah and

100
00:04:30,170 --> 00:04:33,500
it has javascript so let's talk about

101
00:04:33,500 --> 00:04:37,100
rioc GS I pointed out Frank earlier it's

102
00:04:37,100 --> 00:04:38,720
also react is also has this beautiful

103
00:04:38,720 --> 00:04:40,790
website which has some pretty awesome

104
00:04:40,790 --> 00:04:42,820
documentation on it how to get started

105
00:04:42,820 --> 00:04:45,230
but let's talk a little bit more detail

106
00:04:45,230 --> 00:04:47,570
about that so to get started with react

107
00:04:47,570 --> 00:04:49,310
GS you want to download react or react

108
00:04:49,310 --> 00:04:52,430
search download stop basho calm has all

109
00:04:52,430 --> 00:04:55,250
the binary packages and also if you want

110
00:04:55,250 --> 00:04:57,470
to bother building it yourself there's

111
00:04:57,470 --> 00:05:00,710
source package available then you'll mpm

112
00:05:00,710 --> 00:05:02,570
stall rioc GS and i like the latest

113
00:05:02,570 --> 00:05:06,830
because you know the the production

114
00:05:06,830 --> 00:05:09,350
releases are kind of erratic but the

115
00:05:09,350 --> 00:05:11,480
latest stuff is always awesome works

116
00:05:11,480 --> 00:05:14,590
with node node 0 40 or you can clone it

117
00:05:14,590 --> 00:05:19,970
beyond the bleeding edge so let's see

118
00:05:19,970 --> 00:05:21,680
what I also i got in here ok so let's

119
00:05:21,680 --> 00:05:23,440
look at the basic client operations

120
00:05:23,440 --> 00:05:30,160
isn't that a cute little turtle ok so

121
00:05:30,160 --> 00:05:32,870
the operations for the client are really

122
00:05:32,870 --> 00:05:35,090
simple you're required react GSU call

123
00:05:35,090 --> 00:05:36,830
get client on the the module that's

124
00:05:36,830 --> 00:05:39,080
exported and that gives you your basic

125
00:05:39,080 --> 00:05:41,300
client like you would expect with any

126
00:05:41,300 --> 00:05:44,660
other node library and then so if you

127
00:05:44,660 --> 00:05:47,030
want to fetch an object out of rioc you

128
00:05:47,030 --> 00:05:50,150
give it a bucketing key all of your keys

129
00:05:50,150 --> 00:05:52,250
in react or namespace within a bucket

130
00:05:52,250 --> 00:05:53,570
you don't have to create them ahead of

131
00:05:53,570 --> 00:05:55,580
time but they provide a nice way to

132
00:05:55,580 --> 00:05:59,180
organize your data and just like most

133
00:05:59,180 --> 00:06:02,660
node drivers you send it a call back so

134
00:06:02,660 --> 00:06:04,640
your data actually doesn't return from

135
00:06:04,640 --> 00:06:08,990
that function call it's passed to the

136
00:06:08,990 --> 00:06:11,030
callback and the callback like you're

137
00:06:11,030 --> 00:06:13,700
used to as the very first argument is

138
00:06:13,700 --> 00:06:15,410
going to be an error object if there was

139
00:06:15,410 --> 00:06:17,240
on and the next one is going to be the

140
00:06:17,240 --> 00:06:20,510
actual data you got back from react so

141
00:06:20,510 --> 00:06:22,280
in this case we're logging to the

142
00:06:22,280 --> 00:06:24,860
console that we found that object if you

143
00:06:24,860 --> 00:06:27,710
want to store an object you do a very

144
00:06:27,710 --> 00:06:29,840
similar thing and you can pass it Jason

145
00:06:29,840 --> 00:06:32,060
to store the object automatically

146
00:06:32,060 --> 00:06:33,820
marchal that and ship it off to react

147
00:06:33,820 --> 00:06:36,650
and when you request it back it will

148
00:06:36,650 --> 00:06:41,479
also come back in in JSON so just fair

149
00:06:41,479 --> 00:06:44,030
warning from now on i alighted the cop

150
00:06:44,030 --> 00:06:45,380
the callback because it just kind of

151
00:06:45,380 --> 00:06:47,840
adds some extra noise but you'll want to

152
00:06:47,840 --> 00:06:49,910
be using that callback to get get

153
00:06:49,910 --> 00:06:53,110
information about your your your request

154
00:06:53,110 --> 00:06:57,620
okay so obviously you can you can fetch

155
00:06:57,620 --> 00:06:59,360
objects you can store them you can also

156
00:06:59,360 --> 00:07:02,780
remove them you can check they exists

157
00:07:02,780 --> 00:07:05,060
and looks like my my flipping is messed

158
00:07:05,060 --> 00:07:07,040
up this is a cool new feature that Frank

159
00:07:07,040 --> 00:07:10,669
just pushed out yesterday right yeah so

160
00:07:10,669 --> 00:07:12,889
rioc has the ability to stream lists of

161
00:07:12,889 --> 00:07:15,590
keys that you have stored so you can

162
00:07:15,590 --> 00:07:18,860
pass it this keys stream if you want to

163
00:07:18,860 --> 00:07:20,210
find out what keys are in the framework

164
00:07:20,210 --> 00:07:23,870
bucket and and then it returns an event

165
00:07:23,870 --> 00:07:26,000
emitter so you can listen for the keys

166
00:07:26,000 --> 00:07:30,910
event on that and then start the request

167
00:07:30,910 --> 00:07:35,620
yeah event mentors are awesome use them

168
00:07:35,620 --> 00:07:39,200
so you can get all the the objects from

169
00:07:39,200 --> 00:07:41,240
that bucket if you want and I'm sorry I

170
00:07:41,240 --> 00:07:42,800
use objects loosely it's kind of a

171
00:07:42,800 --> 00:07:45,289
terminology we have inside bash oh but

172
00:07:45,289 --> 00:07:47,060
it basically means the key that you

173
00:07:47,060 --> 00:07:50,419
store plus all the metadata around it so

174
00:07:50,419 --> 00:07:52,160
if that gets confusing i'm not talking

175
00:07:52,160 --> 00:07:54,650
about javascript objects you can also

176
00:07:54,650 --> 00:07:56,599
count the keys if you want to find out

177
00:07:56,599 --> 00:07:59,320
how many keys are in the in the bucket

178
00:07:59,320 --> 00:08:01,639
so that's the basic you know really

179
00:08:01,639 --> 00:08:04,539
simple key value a couple extra things

180
00:08:04,539 --> 00:08:06,650
but there's an interesting thing about

181
00:08:06,650 --> 00:08:09,229
the rioc GS driver which is a metal

182
00:08:09,229 --> 00:08:12,139
object and we've got a stack of turtles

183
00:08:12,139 --> 00:08:13,340
there on the right side sorry if you

184
00:08:13,340 --> 00:08:16,760
can't see it so if you want to modify

185
00:08:16,760 --> 00:08:20,000
things about the request to react if you

186
00:08:20,000 --> 00:08:21,919
want to find out some more information

187
00:08:21,919 --> 00:08:24,919
about what the response was you have

188
00:08:24,919 --> 00:08:26,840
this meta object and it always comes as

189
00:08:26,840 --> 00:08:28,789
the penultimate or the ultimate in the

190
00:08:28,789 --> 00:08:31,910
case the callback argument to your

191
00:08:31,910 --> 00:08:34,190
function so let's look at what you can

192
00:08:34,190 --> 00:08:36,950
do on requests so with the meta object

193
00:08:36,950 --> 00:08:39,169
on requests you're sending request time

194
00:08:39,169 --> 00:08:40,940
metadata and these are important things

195
00:08:40,940 --> 00:08:43,130
like your content type now unlike

196
00:08:43,130 --> 00:08:43,910
CouchDB

197
00:08:43,910 --> 00:08:46,670
or Redis rioc doesn't care what you

198
00:08:46,670 --> 00:08:49,100
store in it it doesn't have any idea of

199
00:08:49,100 --> 00:08:53,480
what it is so it's the responsibility

200
00:08:53,480 --> 00:08:57,050
the application to tell what kind of

201
00:08:57,050 --> 00:08:58,280
content you're storing and that

202
00:08:58,280 --> 00:09:01,730
basically corresponds to the HTTP header

203
00:09:01,730 --> 00:09:07,550
content type now rioc GS also does some

204
00:09:07,550 --> 00:09:09,950
things nicely for you short circuits

205
00:09:09,950 --> 00:09:11,360
that if you're just passing a JSON

206
00:09:11,360 --> 00:09:13,400
object you can also pass the client ID

207
00:09:13,400 --> 00:09:15,530
this is important if you have an

208
00:09:15,530 --> 00:09:18,080
application like many node applications

209
00:09:18,080 --> 00:09:21,430
will be that have heavy right load and

210
00:09:21,430 --> 00:09:24,820
the client ID helps us disambiguate

211
00:09:24,820 --> 00:09:29,060
concurrent rights in the in rioc there's

212
00:09:29,060 --> 00:09:31,040
also links in user meadow which are some

213
00:09:31,040 --> 00:09:34,640
sort of useful metadata that will look

214
00:09:34,640 --> 00:09:40,220
at later and of course rioc has is a

215
00:09:40,220 --> 00:09:42,470
dynamo like system I'm sorry this is not

216
00:09:42,470 --> 00:09:44,330
like really database crowd so I'm kind

217
00:09:44,330 --> 00:09:47,150
of a loss here on this but you can tell

218
00:09:47,150 --> 00:09:49,820
it how many nodes you want to return a

219
00:09:49,820 --> 00:09:52,520
successful response when you submit a

220
00:09:52,520 --> 00:09:54,830
write or read and once those are

221
00:09:54,830 --> 00:09:57,470
satisfied then it will return response

222
00:09:57,470 --> 00:10:00,530
to the client so you can tell it how

223
00:10:00,530 --> 00:10:02,690
much consistency you want which is

224
00:10:02,690 --> 00:10:04,730
pretty awesome and then return body just

225
00:10:04,730 --> 00:10:07,520
basically lets you on a right get back

226
00:10:07,520 --> 00:10:11,330
the resulting value that was sent to the

227
00:10:11,330 --> 00:10:14,930
server okay so let's look at what the

228
00:10:14,930 --> 00:10:20,720
meta does in callbacks so again response

229
00:10:20,720 --> 00:10:22,970
time metadata and this will include

230
00:10:22,970 --> 00:10:24,740
information like the bucket in the key

231
00:10:24,740 --> 00:10:27,410
that we're stored so you can choose to

232
00:10:27,410 --> 00:10:29,570
store something without a key and react

233
00:10:29,570 --> 00:10:31,670
will pick a key for you in that case you

234
00:10:31,670 --> 00:10:32,780
want to read that key in your callback

235
00:10:32,780 --> 00:10:35,030
and also the vector clock which is just

236
00:10:35,030 --> 00:10:38,600
a crazy distributed systems thing that

237
00:10:38,600 --> 00:10:42,140
like the key helps us keep track of who

238
00:10:42,140 --> 00:10:44,960
wrote what when and that's all you

239
00:10:44,960 --> 00:10:46,490
really need to know about it just make

240
00:10:46,490 --> 00:10:50,900
sure that you pass it along again the

241
00:10:50,900 --> 00:10:52,280
links in the user matter will come back

242
00:10:52,280 --> 00:10:54,290
so if you request you fetched this

243
00:10:54,290 --> 00:10:56,840
object from react you'll get information

244
00:10:56,840 --> 00:10:57,740
about what other

245
00:10:57,740 --> 00:11:00,460
it's linked to and any specific

246
00:11:00,460 --> 00:11:03,650
application metadata and then typical

247
00:11:03,650 --> 00:11:05,810
you know HTTP like things like the last

248
00:11:05,810 --> 00:11:07,820
modified date that you tagged the status

249
00:11:07,820 --> 00:11:09,770
code from the request so under the

250
00:11:09,770 --> 00:11:13,010
covers rioc GS uses the node HTTP

251
00:11:13,010 --> 00:11:16,150
library to do most of its communication

252
00:11:16,150 --> 00:11:18,710
okay so if we want to take advantage of

253
00:11:18,710 --> 00:11:21,470
this meta we might do something like in

254
00:11:21,470 --> 00:11:23,990
this case when we're fetching the object

255
00:11:23,990 --> 00:11:26,270
will get it back in the data and the

256
00:11:26,270 --> 00:11:28,820
call back here and then we'll add a link

257
00:11:28,820 --> 00:11:31,700
to that object and store it back so in

258
00:11:31,700 --> 00:11:33,350
this case we've taken that meta that

259
00:11:33,350 --> 00:11:35,660
came from the response we call a special

260
00:11:35,660 --> 00:11:39,560
function on it add link that makes the

261
00:11:39,560 --> 00:11:42,170
note GS object point to the vm v eight

262
00:11:42,170 --> 00:11:45,110
and then we're storing that back in

263
00:11:45,110 --> 00:11:48,440
react or you might do something like set

264
00:11:48,440 --> 00:11:49,880
the content type when you're saving for

265
00:11:49,880 --> 00:11:52,820
the first time excuse me I you know I

266
00:11:52,820 --> 00:11:55,700
said before that rioc GS will do a lot

267
00:11:55,700 --> 00:11:57,560
of things for you to make it really

268
00:11:57,560 --> 00:11:59,960
short that the kind of you know

269
00:11:59,960 --> 00:12:01,520
developer-friendly API that you're

270
00:12:01,520 --> 00:12:04,130
looking for in this case what it says is

271
00:12:04,130 --> 00:12:05,840
you only have to tell HTML it knows

272
00:12:05,840 --> 00:12:11,030
you're talking about text HTML so that's

273
00:12:11,030 --> 00:12:13,820
great now we have key value access you

274
00:12:13,820 --> 00:12:17,480
can get you can store but you definitely

275
00:12:17,480 --> 00:12:20,900
want to go beyond querying adjust key

276
00:12:20,900 --> 00:12:23,390
value and I'm sorry this this turtle

277
00:12:23,390 --> 00:12:24,770
doesn't have any relevance to the slide

278
00:12:24,770 --> 00:12:26,210
but I thought it's pretty cool eating a

279
00:12:26,210 --> 00:12:31,310
strawberry so I mentioned links before

280
00:12:31,310 --> 00:12:33,140
links are away a lightweight way to

281
00:12:33,140 --> 00:12:35,570
relate objects to one another inside

282
00:12:35,570 --> 00:12:37,670
react and you can follow those links

283
00:12:37,670 --> 00:12:39,830
automatically and so here's a turtle

284
00:12:39,830 --> 00:12:41,830
with two heads that are linked together

285
00:12:41,830 --> 00:12:44,930
so if I wanted to find all of my friends

286
00:12:44,930 --> 00:12:47,480
and this is the typical social network

287
00:12:47,480 --> 00:12:50,630
example I would start at the object that

288
00:12:50,630 --> 00:12:53,240
is in the bucket people the keyshawn and

289
00:12:53,240 --> 00:12:56,090
then i sent it this specification which

290
00:12:56,090 --> 00:12:58,190
is how to match links that are on that

291
00:12:58,190 --> 00:13:00,740
object in this case i don't care the

292
00:13:00,740 --> 00:13:02,330
very first argument is the bucket I

293
00:13:02,330 --> 00:13:04,640
don't care what bucket it's in but I

294
00:13:04,640 --> 00:13:06,590
want to follow the tag that's friends

295
00:13:06,590 --> 00:13:09,200
and that I'll return a bunch of objects

296
00:13:09,200 --> 00:13:11,920
to your your node.js application

297
00:13:11,920 --> 00:13:14,930
that are all of those things that are

298
00:13:14,930 --> 00:13:17,839
linked from from people Sean and then

299
00:13:17,839 --> 00:13:19,519
there's people Matthias in this case

300
00:13:19,519 --> 00:13:21,920
we're going to follow his friends but

301
00:13:21,920 --> 00:13:23,750
we're also going to follow anybody who

302
00:13:23,750 --> 00:13:25,430
are linked from his friends so you can

303
00:13:25,430 --> 00:13:27,589
do this sort of fan-out type of query

304
00:13:27,589 --> 00:13:29,810
where if things are linked up right you

305
00:13:29,810 --> 00:13:31,310
can get lots of interesting information

306
00:13:31,310 --> 00:13:34,250
about how things are related and this

307
00:13:34,250 --> 00:13:35,870
has been a core future rioc for a long

308
00:13:35,870 --> 00:13:40,699
time but wait a minute you said that

309
00:13:40,699 --> 00:13:43,040
rioc had javascript in it right I did

310
00:13:43,040 --> 00:13:45,800
right okay so I'm going to explain how

311
00:13:45,800 --> 00:13:48,440
JavaScript is down inside rioc as well

312
00:13:48,440 --> 00:13:51,829
and that's with MapReduce we do a lot of

313
00:13:51,829 --> 00:13:54,829
stuff with MapReduce when we're

314
00:13:54,829 --> 00:13:57,949
developing apps for react and this is

315
00:13:57,949 --> 00:13:59,660
basically how it works it's a little bit

316
00:13:59,660 --> 00:14:00,860
different than what you might have seen

317
00:14:00,860 --> 00:14:02,720
in couch if you any of you use Hadoop

318
00:14:02,720 --> 00:14:05,509
anybody used to do yeah just a few

319
00:14:05,509 --> 00:14:08,630
people it's very different from how you

320
00:14:08,630 --> 00:14:12,680
use Hadoop too so basically the the idea

321
00:14:12,680 --> 00:14:14,959
of MapReduce is a functional idea you

322
00:14:14,959 --> 00:14:17,180
start with a list of keys rioc will

323
00:14:17,180 --> 00:14:19,310
fetch those keys and run a map function

324
00:14:19,310 --> 00:14:21,380
across all of them and that's

325
00:14:21,380 --> 00:14:24,350
distributed around the cluster so the

326
00:14:24,350 --> 00:14:26,240
map function runs where the data is

327
00:14:26,240 --> 00:14:28,220
stored in your rioc cluster which makes

328
00:14:28,220 --> 00:14:30,019
it really efficient to load that from

329
00:14:30,019 --> 00:14:33,529
disk etc and then once all those map

330
00:14:33,529 --> 00:14:35,329
functions have run and they can return

331
00:14:35,329 --> 00:14:37,550
any number of results from 0 to however

332
00:14:37,550 --> 00:14:40,579
many there they can be sent to a reduced

333
00:14:40,579 --> 00:14:43,550
function which will coalesce a single

334
00:14:43,550 --> 00:14:46,880
value or a list of values and return

335
00:14:46,880 --> 00:14:49,370
that to the client okay that's great

336
00:14:49,370 --> 00:14:50,889
where's the JavaScript you're saying

337
00:14:50,889 --> 00:14:54,829
well the job the list of keys and all of

338
00:14:54,829 --> 00:14:57,889
the functions that you want to compute

339
00:14:57,889 --> 00:15:00,350
are submitted as Jason which is pretty

340
00:15:00,350 --> 00:15:02,810
cool all of those map functions can be

341
00:15:02,810 --> 00:15:05,000
JavaScript that reduce function can be

342
00:15:05,000 --> 00:15:07,220
JavaScript and then when it's returned

343
00:15:07,220 --> 00:15:10,850
to you it's in Jason okay we got

344
00:15:10,850 --> 00:15:12,439
JavaScript so let's look at how you run

345
00:15:12,439 --> 00:15:16,250
it so in this case I am executing a

346
00:15:16,250 --> 00:15:18,290
MapReduce query and all you have to do

347
00:15:18,290 --> 00:15:20,059
is on that that client object that you

348
00:15:20,059 --> 00:15:22,220
initialized at the beginning is add the

349
00:15:22,220 --> 00:15:24,410
frameworks bucket so this basically says

350
00:15:24,410 --> 00:15:25,340
give

351
00:15:25,340 --> 00:15:27,620
all the keys in the bucket and perform

352
00:15:27,620 --> 00:15:31,250
this job across them and we're going to

353
00:15:31,250 --> 00:15:33,350
use a built-in function to map across

354
00:15:33,350 --> 00:15:35,810
all those which is called map values

355
00:15:35,810 --> 00:15:39,080
Jason and then when you call run that

356
00:15:39,080 --> 00:15:41,870
actually sends a query as a JSON object

357
00:15:41,870 --> 00:15:44,000
over to rioc and it will execute it and

358
00:15:44,000 --> 00:15:46,100
return some results so this case of

359
00:15:46,100 --> 00:15:48,680
course we're just logging to the console

360
00:15:48,680 --> 00:15:52,160
the data we get back a little bit more

361
00:15:52,160 --> 00:15:54,440
complicated example and I think this is

362
00:15:54,440 --> 00:15:57,350
actually the standout feature of what

363
00:15:57,350 --> 00:16:01,340
makes rioc GS really tightly integrated

364
00:16:01,340 --> 00:16:04,190
with rioc and that's that you can define

365
00:16:04,190 --> 00:16:05,930
a function inside your node.js

366
00:16:05,930 --> 00:16:08,960
application and it'll be turned into a

367
00:16:08,960 --> 00:16:11,000
string and sent over to rioc and execute

368
00:16:11,000 --> 00:16:14,090
it over there so if you don't want to

369
00:16:14,090 --> 00:16:15,440
break out of JavaScript and start

370
00:16:15,440 --> 00:16:16,820
writing strings for all your functions

371
00:16:16,820 --> 00:16:18,620
or calling built-ins you can just write

372
00:16:18,620 --> 00:16:20,030
them in line with your code it's pretty

373
00:16:20,030 --> 00:16:23,360
awesome so in this case I just described

374
00:16:23,360 --> 00:16:26,150
what this MapReduce queries doing we're

375
00:16:26,150 --> 00:16:28,490
going to start with a specific key just

376
00:16:28,490 --> 00:16:30,170
the nodejs key inside the frameworks

377
00:16:30,170 --> 00:16:32,420
bucket and then we're going to follow

378
00:16:32,420 --> 00:16:34,100
links on that to vm saying remember

379
00:16:34,100 --> 00:16:35,930
earlier in my examples I linked to the

380
00:16:35,930 --> 00:16:37,910
v8 vm so we should get that object

381
00:16:37,910 --> 00:16:40,550
coming out and on all those things that

382
00:16:40,550 --> 00:16:43,490
it's linked to that have there in that

383
00:16:43,490 --> 00:16:47,060
vm bucket we're going to just parse the

384
00:16:47,060 --> 00:16:50,330
contents of that object as jason and

385
00:16:50,330 --> 00:16:53,390
return the name property from the the

386
00:16:53,390 --> 00:16:56,990
object that was that was parsed and then

387
00:16:56,990 --> 00:16:59,840
in the reduce function we're just going

388
00:16:59,840 --> 00:17:02,510
to sort the list of results and return

389
00:17:02,510 --> 00:17:05,720
those to the client and I know this is

390
00:17:05,720 --> 00:17:08,480
like you know Matthias rude a couple

391
00:17:08,480 --> 00:17:10,070
blog posts a while back about why

392
00:17:10,070 --> 00:17:11,840
MapReduce is hard and why MapReduce is

393
00:17:11,840 --> 00:17:14,690
easy and I'm sorry I have to gloss over

394
00:17:14,690 --> 00:17:16,040
this right now but those are pretty

395
00:17:16,040 --> 00:17:18,290
awesome ways to learn how to understand

396
00:17:18,290 --> 00:17:22,820
this programming model okay just one

397
00:17:22,820 --> 00:17:25,760
more example in this case we're using a

398
00:17:25,760 --> 00:17:28,640
new feature of rioc 0-14 which is called

399
00:17:28,640 --> 00:17:32,000
key filters and what we try to encourage

400
00:17:32,000 --> 00:17:35,660
people to do with rioc is to use keys

401
00:17:35,660 --> 00:17:37,340
that are meaningful to your application

402
00:17:37,340 --> 00:17:39,140
they may have some embedded in

403
00:17:39,140 --> 00:17:40,520
mation about the object that's being

404
00:17:40,520 --> 00:17:43,040
stored in them and in that case that

405
00:17:43,040 --> 00:17:45,290
makes it actually a lot easier to query

406
00:17:45,290 --> 00:17:47,690
them because you can even say I know

407
00:17:47,690 --> 00:17:49,100
exactly what the key is going to be

408
00:17:49,100 --> 00:17:51,110
that's the ideal case where you can say

409
00:17:51,110 --> 00:17:52,640
I know the key is going to contain this

410
00:17:52,640 --> 00:17:56,060
and so key filters let you take a whole

411
00:17:56,060 --> 00:17:57,830
bucket listing all the keys you've

412
00:17:57,830 --> 00:18:00,380
stored in that bucket and filter them

413
00:18:00,380 --> 00:18:02,600
with various predicates in this case I'm

414
00:18:02,600 --> 00:18:06,830
taking all the emails in in the email

415
00:18:06,830 --> 00:18:08,600
bucket and saying these are the ones

416
00:18:08,600 --> 00:18:10,970
that ends with basho calm returned only

417
00:18:10,970 --> 00:18:13,340
those now the difference between that

418
00:18:13,340 --> 00:18:14,990
and just running a map function that

419
00:18:14,990 --> 00:18:19,070
might have you know and if else in it is

420
00:18:19,070 --> 00:18:21,380
that you're not actually loading that

421
00:18:21,380 --> 00:18:23,630
data off of disk so it's much much

422
00:18:23,630 --> 00:18:26,090
faster in this case we're you also using

423
00:18:26,090 --> 00:18:27,860
another built-in called Matt by fields

424
00:18:27,860 --> 00:18:30,950
this is a kind of a cool feature in that

425
00:18:30,950 --> 00:18:33,140
you can create generic map and reduce

426
00:18:33,140 --> 00:18:35,810
functions in JavaScript that take a

427
00:18:35,810 --> 00:18:39,140
trailing argument and so you can

428
00:18:39,140 --> 00:18:41,630
parameterize those generic functions to

429
00:18:41,630 --> 00:18:43,610
perform specific tasks in this case I'm

430
00:18:43,610 --> 00:18:47,230
saying okay they need to be joined on

431
00:18:47,230 --> 00:18:52,100
2010 January first ok and we run that so

432
00:18:52,100 --> 00:18:54,050
there's also search I mentioned that at

433
00:18:54,050 --> 00:18:56,510
the beginning react search is a full

434
00:18:56,510 --> 00:18:58,820
text search engine very similar at least

435
00:18:58,820 --> 00:19:02,570
from the outside to solar but on the

436
00:19:02,570 --> 00:19:04,100
inside it's totally different and it

437
00:19:04,100 --> 00:19:06,050
uses all the distributed stuff that riac

438
00:19:06,050 --> 00:19:10,070
does but rioc GS has special support for

439
00:19:10,070 --> 00:19:12,290
it so if you want to have all your Jason

440
00:19:12,290 --> 00:19:13,510
documents that you're storing

441
00:19:13,510 --> 00:19:16,460
automatically index in react search you

442
00:19:16,460 --> 00:19:19,670
can se debe tener un able index and then

443
00:19:19,670 --> 00:19:21,950
the bucket name and that'll put on a

444
00:19:21,950 --> 00:19:25,190
pre-commit hook to the storage

445
00:19:25,190 --> 00:19:28,660
operations to index that in react search

446
00:19:28,660 --> 00:19:31,220
you can also just perform a flat search

447
00:19:31,220 --> 00:19:33,890
like you would expect with solar you

448
00:19:33,890 --> 00:19:35,990
send it you know leucine style query

449
00:19:35,990 --> 00:19:38,600
string say give me all the documents

450
00:19:38,600 --> 00:19:40,980
that have the title scalable in them

451
00:19:40,980 --> 00:19:46,080
and you can use search to feed a

452
00:19:46,080 --> 00:19:48,299
MapReduce query so if you know a full

453
00:19:48,299 --> 00:19:50,970
text query that will satisfy the set of

454
00:19:50,970 --> 00:19:53,880
keys you want to fetch then you can use

455
00:19:53,880 --> 00:19:56,160
that to to feed a MapReduce query and

456
00:19:56,160 --> 00:19:58,020
just add your map and reduce functions

457
00:19:58,020 --> 00:19:59,400
on there and whatever combinations you

458
00:19:59,400 --> 00:20:02,820
need okay so there's some other things

459
00:20:02,820 --> 00:20:04,470
that's the main features of react GS

460
00:20:04,470 --> 00:20:05,730
there's some other things that are

461
00:20:05,730 --> 00:20:08,030
included there's a connect session store

462
00:20:08,030 --> 00:20:10,110
in fact I've just got a pull request

463
00:20:10,110 --> 00:20:12,020
applied to it today it's pretty cool

464
00:20:12,020 --> 00:20:15,809
there's a miniature rioc so we were on

465
00:20:15,809 --> 00:20:17,640
the right test for applications right

466
00:20:17,640 --> 00:20:19,530
but sometimes those tests need to hit

467
00:20:19,530 --> 00:20:21,450
the data store in this case it's

468
00:20:21,450 --> 00:20:23,190
actually pretty awesome what it does is

469
00:20:23,190 --> 00:20:25,710
it fires up a rioc that's a subprocess

470
00:20:25,710 --> 00:20:29,370
of your node test process and tells it

471
00:20:29,370 --> 00:20:31,530
to delete all the data in it at the end

472
00:20:31,530 --> 00:20:33,870
of each run so you'll definitely want to

473
00:20:33,870 --> 00:20:36,150
look into that also there's multiple

474
00:20:36,150 --> 00:20:37,919
ways to talk to react the default is

475
00:20:37,919 --> 00:20:40,710
HTTP but there's also a binary protocol

476
00:20:40,710 --> 00:20:42,600
which is based on Google protocol

477
00:20:42,600 --> 00:20:44,850
buffers and react GS has some

478
00:20:44,850 --> 00:20:46,820
experimental support for that and

479
00:20:46,820 --> 00:20:52,290
there's also a a luoc which is I'm sorry

480
00:20:52,290 --> 00:20:56,100
kind of a weird name but if you wanted

481
00:20:56,100 --> 00:20:59,070
to store large files in your react

482
00:20:59,070 --> 00:21:00,870
cluster luoc will split them up into

483
00:21:00,870 --> 00:21:03,840
chunks for you and no GSA I'm sorry no

484
00:21:03,840 --> 00:21:07,679
GS via react Jas has support for that so

485
00:21:07,679 --> 00:21:09,990
no presentation would be good without a

486
00:21:09,990 --> 00:21:13,530
demo so this application is available on

487
00:21:13,530 --> 00:21:15,270
github I'm going to talk through a

488
00:21:15,270 --> 00:21:19,740
little bit of it and it's also hosted on

489
00:21:19,740 --> 00:21:23,070
joints node server a node service and so

490
00:21:23,070 --> 00:21:27,990
you'll be able to see that ok so what

491
00:21:27,990 --> 00:21:31,470
reactant is is a very simple syslog

492
00:21:31,470 --> 00:21:34,590
server so it receives UDP syslog

493
00:21:34,590 --> 00:21:36,660
messages it stores them a react search

494
00:21:36,660 --> 00:21:38,280
and then it serves them up in a nice

495
00:21:38,280 --> 00:21:39,750
little web interface which is also

496
00:21:39,750 --> 00:21:43,410
powered by node and and then you can

497
00:21:43,410 --> 00:21:45,240
search through all of your logs so

498
00:21:45,240 --> 00:21:50,020
miniature log lead type of thing

499
00:21:50,030 --> 00:21:52,620
interesting thing of that we discovered

500
00:21:52,620 --> 00:21:55,590
when we were writing this and this

501
00:21:55,590 --> 00:21:57,420
should come as no surprise to any of you

502
00:21:57,420 --> 00:22:02,070
but don't block the reactor okay we

503
00:22:02,070 --> 00:22:03,690
actually found that we were dropping a

504
00:22:03,690 --> 00:22:06,450
bunch of UDP messages because we weren't

505
00:22:06,450 --> 00:22:09,900
deferring our rights to rioc that was

506
00:22:09,900 --> 00:22:12,570
that was kind of interesting so instead

507
00:22:12,570 --> 00:22:14,880
what we did is we set up a queue we push

508
00:22:14,880 --> 00:22:16,140
messages into the queue and then

509
00:22:16,140 --> 00:22:18,150
periodically check to see if it's over a

510
00:22:18,150 --> 00:22:19,680
certain threshold and then drain them

511
00:22:19,680 --> 00:22:21,960
which actually worked really well and we

512
00:22:21,960 --> 00:22:25,110
didn't really lose any messages so we

513
00:22:25,110 --> 00:22:27,540
parse the message we create a hash of it

514
00:22:27,540 --> 00:22:31,110
to use for the key and then we push it

515
00:22:31,110 --> 00:22:37,110
into the queue ok it's C go down here so

516
00:22:37,110 --> 00:22:39,690
this callback this process next key

517
00:22:39,690 --> 00:22:41,370
message is what actually pushes it in to

518
00:22:41,370 --> 00:22:44,370
rioc and we do use the typical tail call

519
00:22:44,370 --> 00:22:47,520
type of call back to pop something off

520
00:22:47,520 --> 00:22:54,100
the queue and then stick it in to rioc

521
00:22:54,110 --> 00:22:56,460
ok and that's breasts for that spoiler

522
00:22:56,460 --> 00:22:59,250
plate and then there's the web server

523
00:22:59,250 --> 00:23:01,650
which we actually use the react j/s

524
00:23:01,650 --> 00:23:06,750
session store to with express to have a

525
00:23:06,750 --> 00:23:10,140
simple login and that's set up right

526
00:23:10,140 --> 00:23:14,390
here this Express create server stuff so

527
00:23:14,390 --> 00:23:17,940
we've required rioc GS up here we've

528
00:23:17,940 --> 00:23:20,700
required the session store which

529
00:23:20,700 --> 00:23:23,100
actually those fixes that we did in this

530
00:23:23,100 --> 00:23:24,480
project have been moved into the prod

531
00:23:24,480 --> 00:23:26,280
into react yes now so you shouldn't

532
00:23:26,280 --> 00:23:29,700
shouldnt have to see that anymore and so

533
00:23:29,700 --> 00:23:31,740
we created a session store stores its

534
00:23:31,740 --> 00:23:34,200
its stuff in syslog web sessions bucket

535
00:23:34,200 --> 00:23:37,160
and uses the same client that we use for

536
00:23:37,160 --> 00:23:43,560
for the the web app ok and then there's

537
00:23:43,560 --> 00:23:45,240
some stuff related to MapReduce in

538
00:23:45,240 --> 00:23:47,160
filtering those queries and I don't want

539
00:23:47,160 --> 00:23:48,570
to spend too much time doing a code

540
00:23:48,570 --> 00:23:49,860
review because I know how boring that is

541
00:23:49,860 --> 00:23:52,170
so we're going to look at the

542
00:23:52,170 --> 00:23:56,300
application this is pretty simple

543
00:23:56,300 --> 00:24:01,280
demonstrating using the session store

544
00:24:01,280 --> 00:24:04,490
and if you go here it's okay if you go

545
00:24:04,490 --> 00:24:07,010
here i'm sure it'll hold up its fasho

546
00:24:07,010 --> 00:24:10,790
dot noge and the username is react and

547
00:24:10,790 --> 00:24:19,640
the password is awesomesauce okay so now

548
00:24:19,640 --> 00:24:22,670
we've got pretty blank screen but if we

549
00:24:22,670 --> 00:24:27,170
type so we actually fabricated some

550
00:24:27,170 --> 00:24:28,850
syslog messages to feed into react

551
00:24:28,850 --> 00:24:32,350
search and so some of them have this

552
00:24:32,350 --> 00:24:35,150
connection closed message so if we click

553
00:24:35,150 --> 00:24:38,240
that in search and we get back a bunch

554
00:24:38,240 --> 00:24:40,190
of text messages on the side that are

555
00:24:40,190 --> 00:24:42,140
you know syslog format you may be

556
00:24:42,140 --> 00:24:44,900
familiar with and all of these you know

557
00:24:44,900 --> 00:24:46,760
things have their connection closed

558
00:24:46,760 --> 00:24:50,570
unexpectedly so you can make it filter

559
00:24:50,570 --> 00:24:53,840
that so let's say we wanted and those

560
00:24:53,840 --> 00:24:55,040
are all happening at the same time the

561
00:24:55,040 --> 00:24:57,590
times not going to be useful so I'm

562
00:24:57,590 --> 00:25:00,910
Justin just searching you know typical

563
00:25:00,910 --> 00:25:03,800
leucine type of search you can actually

564
00:25:03,800 --> 00:25:05,120
feed that to MapReduce like I mentioned

565
00:25:05,120 --> 00:25:08,570
before and then we made a selector down

566
00:25:08,570 --> 00:25:10,160
here you can select which map function

567
00:25:10,160 --> 00:25:12,050
you want so if we just want the host

568
00:25:12,050 --> 00:25:15,740
names out of all those results click

569
00:25:15,740 --> 00:25:18,650
search again and my apologies for the

570
00:25:18,650 --> 00:25:20,060
the interface here it's kind of rural

571
00:25:20,060 --> 00:25:23,870
but here's all these results so every

572
00:25:23,870 --> 00:25:25,850
one of these things that was a search

573
00:25:25,850 --> 00:25:27,950
result got passages map function that

574
00:25:27,950 --> 00:25:29,450
just returns the host name and account

575
00:25:29,450 --> 00:25:31,610
for that now that doesn't seem very

576
00:25:31,610 --> 00:25:33,440
useful until you look at the reduce

577
00:25:33,440 --> 00:25:35,180
function you say well let's group x

578
00:25:35,180 --> 00:25:38,360
values and when you do that you can see

579
00:25:38,360 --> 00:25:41,540
well web to bachelor com that's probably

580
00:25:41,540 --> 00:25:45,290
a bit tiny web to bachelor com had 87 of

581
00:25:45,290 --> 00:25:49,450
these messages and apple on and so on so

582
00:25:49,450 --> 00:25:54,140
in contrast to the way that Hadoop does

583
00:25:54,140 --> 00:25:57,470
MapReduce and the way that couch gb does

584
00:25:57,470 --> 00:25:59,120
MapReduce you can build these things on

585
00:25:59,120 --> 00:26:01,250
the fly you're not building views you're

586
00:26:01,250 --> 00:26:04,400
not stuck into a fixed job you can

587
00:26:04,400 --> 00:26:06,370
submit them whenever you want and then

588
00:26:06,370 --> 00:26:09,050
you might also want to do something like

589
00:26:09,050 --> 00:26:13,470
let's see let's fetch the date an hour

590
00:26:13,470 --> 00:26:18,350
and these all happen in nineteen o clock

591
00:26:18,350 --> 00:26:23,659
383 messages so that's a little demo and

592
00:26:23,659 --> 00:26:26,520
let's flip back here I'd be happy to

593
00:26:26,520 --> 00:26:30,299
take questions that's how to contact me

594
00:26:30,299 --> 00:26:32,340
check out the jas comp basher com site

595
00:26:32,340 --> 00:26:38,820
yes how hard is it to replicate the

596
00:26:38,820 --> 00:26:41,640
server the react server it's built in so

597
00:26:41,640 --> 00:26:43,350
you start with one node and you have

598
00:26:43,350 --> 00:26:44,789
three copies of everything when you go

599
00:26:44,789 --> 00:26:46,500
to three nodes there's a copy on every

600
00:26:46,500 --> 00:26:48,179
machine you grow two more and it's

601
00:26:48,179 --> 00:26:50,450
spread out even more thinly so

602
00:26:50,450 --> 00:26:54,299
replication is automatic did that answer

603
00:26:54,299 --> 00:26:58,820
your question yeah okay way in the back

604
00:26:58,820 --> 00:27:01,799
yeah the question was why would you want

605
00:27:01,799 --> 00:27:04,169
to use a key streaming and an

606
00:27:04,169 --> 00:27:05,490
interesting thing about the way

607
00:27:05,490 --> 00:27:08,220
streaming keys or I'm sorry key listing

608
00:27:08,220 --> 00:27:10,740
works in rioc is that when you submit a

609
00:27:10,740 --> 00:27:13,590
request for a list of keys it goes out

610
00:27:13,590 --> 00:27:17,190
to one-third of all of the nodes in the

611
00:27:17,190 --> 00:27:19,169
in the system and says give me your key

612
00:27:19,169 --> 00:27:22,620
list for this bucket and so as you can

613
00:27:22,620 --> 00:27:24,900
imagine with a big bucket that's going

614
00:27:24,900 --> 00:27:27,150
to take a long time to smash into a JSON

615
00:27:27,150 --> 00:27:30,120
array and send back to the client that's

616
00:27:30,120 --> 00:27:31,200
going to take up a lot of memory if

617
00:27:31,200 --> 00:27:32,700
you've got a lot of keys Sookie

618
00:27:32,700 --> 00:27:34,980
streaming sidesteps that and actually

619
00:27:34,980 --> 00:27:37,710
start sending back results as soon as

620
00:27:37,710 --> 00:27:40,200
they get there so this is actually nice

621
00:27:40,200 --> 00:27:42,510
fit with the way that node does things

622
00:27:42,510 --> 00:27:44,659
and that you can receive events

623
00:27:44,659 --> 00:27:48,960
asynchronously showing thanks very much

