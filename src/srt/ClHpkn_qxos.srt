1
00:00:00,000 --> 00:00:10,160

ah

2
00:00:10,170 --> 00:00:15,150
why do you care about our x RX it's a

3
00:00:15,150 --> 00:00:17,289
story rather the web is very

4
00:00:17,289 --> 00:00:18,580
asynchronous look at this dictionary

5
00:00:18,580 --> 00:00:22,089
suggest like when you type there's

6
00:00:22,089 --> 00:00:24,460
events happening there's asynchronous

7
00:00:24,460 --> 00:00:27,160
calls to the server and if you write a

8
00:00:27,160 --> 00:00:28,689
lot of these things together your

9
00:00:28,689 --> 00:00:30,429
program gets pretty complicated quickly

10
00:00:30,429 --> 00:00:32,020
you have all these nested callbacks

11
00:00:32,020 --> 00:00:35,560
continuation passing and our ex tries to

12
00:00:35,560 --> 00:00:40,510
address that so if you look at for

13
00:00:40,510 --> 00:00:42,190
instance at that sample it does suck you

14
00:00:42,190 --> 00:00:45,190
up starts an async xmlhttprequest and

15
00:00:45,190 --> 00:00:49,829
then it displays results in you could

16
00:00:49,829 --> 00:00:52,300
write it like this and of course this is

17
00:00:52,300 --> 00:00:55,539
a very basic sample that it's not very

18
00:00:55,539 --> 00:00:57,579
smart I mean it does very well implement

19
00:00:57,579 --> 00:00:59,230
it but this is like a good their first

20
00:00:59,230 --> 00:01:01,600
attempt like you hook up to the input

21
00:01:01,600 --> 00:01:03,699
key up in vent and then you start an

22
00:01:03,699 --> 00:01:05,980
async HTTP request and once it comes

23
00:01:05,980 --> 00:01:10,119
back you format the result at HTML well

24
00:01:10,119 --> 00:01:12,009
turns out there is a couple more things

25
00:01:12,009 --> 00:01:14,409
that you have to worry about first of

26
00:01:14,409 --> 00:01:15,610
all you don't want to overload the

27
00:01:15,610 --> 00:01:17,560
server so you try to tame the input on

28
00:01:17,560 --> 00:01:20,229
the client you filter out the empty key

29
00:01:20,229 --> 00:01:21,729
opps from your textbooks you filter out

30
00:01:21,729 --> 00:01:24,130
duplicates and you want to tame the

31
00:01:24,130 --> 00:01:26,350
input if the user is typing and you know

32
00:01:26,350 --> 00:01:27,460
that he's going to type the second

33
00:01:27,460 --> 00:01:29,439
character for its completion in 10

34
00:01:29,439 --> 00:01:30,610
milliseconds it doesn't really make

35
00:01:30,610 --> 00:01:33,250
sense to send an aging HTP request to

36
00:01:33,250 --> 00:01:35,110
the server and put load on the server if

37
00:01:35,110 --> 00:01:36,430
the user is never going to see that

38
00:01:36,430 --> 00:01:39,969
value anyway and there's this thing

39
00:01:39,969 --> 00:01:41,320
about ignoring old curious and we'll get

40
00:01:41,320 --> 00:01:43,810
to that in a bit and you need to expect

41
00:01:43,810 --> 00:01:47,530
failure web there's big pot holes in the

42
00:01:47,530 --> 00:01:49,119
higher in the internet highway so you

43
00:01:49,119 --> 00:01:51,729
need to expect failure everywhere so

44
00:01:51,729 --> 00:01:54,130
let's look at that ignore old queries

45
00:01:54,130 --> 00:01:56,829
thing so imagine that user types the

46
00:01:56,829 --> 00:02:00,700
letter R in the dictionary suggest then

47
00:02:00,700 --> 00:02:03,100
the server sends a response for

48
00:02:03,100 --> 00:02:05,649
completions for letter R the user types

49
00:02:05,649 --> 00:02:09,039
letter E and now one of the servers is

50
00:02:09,039 --> 00:02:10,660
hit on your web form that is a bit

51
00:02:10,660 --> 00:02:12,580
overloaded so it's going to take a bit

52
00:02:12,580 --> 00:02:14,790
of time for this response to come back

53
00:02:14,790 --> 00:02:17,500
meanwhile the user types next character

54
00:02:17,500 --> 00:02:18,710
and

55
00:02:18,710 --> 00:02:20,060
he happens to hit a server on your web

56
00:02:20,060 --> 00:02:23,270
form that has plenty of time he had no

57
00:02:23,270 --> 00:02:24,920
no load so he immediately sends back the

58
00:02:24,920 --> 00:02:28,480
result and gives the completions for Rea

59
00:02:28,480 --> 00:02:31,070
meantime the busy server decides to wake

60
00:02:31,070 --> 00:02:34,430
up and send the response back for the

61
00:02:34,430 --> 00:02:37,820
completions or of re and now the users

62
00:02:37,820 --> 00:02:42,200
UI is updated with an old completion so

63
00:02:42,200 --> 00:02:44,270
that's pretty bad and you don't want

64
00:02:44,270 --> 00:02:48,380
that to happen so the code that takes

65
00:02:48,380 --> 00:02:49,700
care of all the things that I just

66
00:02:49,700 --> 00:02:51,650
mentioned can look something like this

67
00:02:51,650 --> 00:02:53,540
and this might not be the optimal way to

68
00:02:53,540 --> 00:02:54,920
do it but this is like a good first

69
00:02:54,920 --> 00:02:57,310
attempt to write something like that so

70
00:02:57,310 --> 00:03:02,840
we hook up to the key up event and we

71
00:03:02,840 --> 00:03:04,160
check if there's no error occurred in

72
00:03:04,160 --> 00:03:07,010
previous events then we check if there

73
00:03:07,010 --> 00:03:08,090
is a difference between the current

74
00:03:08,090 --> 00:03:11,750
value and previous value and we save to

75
00:03:11,750 --> 00:03:14,780
the current value as for the next check

76
00:03:14,780 --> 00:03:16,820
then we set a time out because you only

77
00:03:16,820 --> 00:03:18,290
want to start sending the asynchronous

78
00:03:18,290 --> 00:03:19,910
requests if the user hasn't typed

79
00:03:19,910 --> 00:03:23,060
anything for 250 milliseconds so then

80
00:03:23,060 --> 00:03:25,130
this can also have an error because the

81
00:03:25,130 --> 00:03:27,110
timeout ap I could throw an error if you

82
00:03:27,110 --> 00:03:31,100
have too many timeouts in the queue then

83
00:03:31,100 --> 00:03:33,770
we continue after 250 milliseconds has

84
00:03:33,770 --> 00:03:36,140
passed we need to have a request study

85
00:03:36,140 --> 00:03:38,180
to keep track of all the requests that

86
00:03:38,180 --> 00:03:40,490
happen so that we can only use the last

87
00:03:40,490 --> 00:03:42,170
one that we are interested in to avoid

88
00:03:42,170 --> 00:03:43,640
that a flapping problem that we saw

89
00:03:43,640 --> 00:03:46,880
earlier then again because we now have

90
00:03:46,880 --> 00:03:48,890
another async instruction me to check

91
00:03:48,890 --> 00:03:50,330
again if there is no errors occurred in

92
00:03:50,330 --> 00:03:53,960
this whole call and finally we get here

93
00:03:53,960 --> 00:03:55,760
we can update the UI and we need to

94
00:03:55,760 --> 00:03:56,870
check for errors in all these different

95
00:03:56,870 --> 00:04:02,240
cases so all this taking care of errors

96
00:04:02,240 --> 00:04:03,800
and all the different parts of your

97
00:04:03,800 --> 00:04:05,660
asynchronous program can make your code

98
00:04:05,660 --> 00:04:08,450
pretty bulky and harder to understand

99
00:04:08,450 --> 00:04:11,300
it's not immediately clear what the the

100
00:04:11,300 --> 00:04:12,680
issue was that you are trying to solve

101
00:04:12,680 --> 00:04:17,330
here so if we now look at our ex and you

102
00:04:17,330 --> 00:04:19,010
look at our homepage that it has like a

103
00:04:19,010 --> 00:04:20,989
tag line like this our access to library

104
00:04:20,989 --> 00:04:23,120
for composing a sickness and event based

105
00:04:23,120 --> 00:04:26,390
programs using observable collections so

106
00:04:26,390 --> 00:04:29,389
let's dissect that sentence a bit

107
00:04:29,389 --> 00:04:31,680
asynchronous programming as I just

108
00:04:31,680 --> 00:04:35,009
showed it's pretty hard right now so we

109
00:04:35,009 --> 00:04:36,349
want to see if we can make that better

110
00:04:36,349 --> 00:04:38,550
we're going to be able to compose events

111
00:04:38,550 --> 00:04:41,999
you want to write a fluent api so you

112
00:04:41,999 --> 00:04:43,770
want to just be able to say do this and

113
00:04:43,770 --> 00:04:45,539
float by the next operation next

114
00:04:45,539 --> 00:04:47,789
operation instead of having to wrap your

115
00:04:47,789 --> 00:04:49,199
end program inside out which you have to

116
00:04:49,199 --> 00:04:50,879
do with continuation passing right now

117
00:04:50,879 --> 00:04:54,659
and then last mentions observable

118
00:04:54,659 --> 00:04:57,180
collections well collections means that

119
00:04:57,180 --> 00:04:59,279
we can do queries right neck database is

120
00:04:59,279 --> 00:05:00,749
all about collections they're all flat

121
00:05:00,749 --> 00:05:03,479
tables collections of data so maybe we

122
00:05:03,479 --> 00:05:05,009
can do queries over these things as well

123
00:05:05,009 --> 00:05:10,620
then so if you look at the RX basic we

124
00:05:10,620 --> 00:05:12,539
have looked at like a lot of existing a

125
00:05:12,539 --> 00:05:14,400
synchronous asynchronous patterns and

126
00:05:14,400 --> 00:05:16,620
all of them they signal some kind of

127
00:05:16,620 --> 00:05:19,020
completion when the thing that you asked

128
00:05:19,020 --> 00:05:22,349
it to do is done most of them also give

129
00:05:22,349 --> 00:05:24,060
you an error and there's various ways

130
00:05:24,060 --> 00:05:26,849
that the different API suit is some they

131
00:05:26,849 --> 00:05:29,099
take two different sets of continuations

132
00:05:29,099 --> 00:05:31,979
some use the first argument of the

133
00:05:31,979 --> 00:05:34,589
confirmation to signal error or not and

134
00:05:34,589 --> 00:05:37,680
then most of them have a payload as well

135
00:05:37,680 --> 00:05:39,479
and this can either be a single pale out

136
00:05:39,479 --> 00:05:41,520
in the case of an asynchronous call or

137
00:05:41,520 --> 00:05:43,080
it can be many payloads in the case of

138
00:05:43,080 --> 00:05:47,399
event like mouse move so if you look at

139
00:05:47,399 --> 00:05:48,870
our X we came up with the following

140
00:05:48,870 --> 00:05:54,000
grammar there is zero or more messages

141
00:05:54,000 --> 00:05:56,580
its payload or next followed by an

142
00:05:56,580 --> 00:05:59,759
optional uncompleted message or a known

143
00:05:59,759 --> 00:06:02,310
error message and I notice that these

144
00:06:02,310 --> 00:06:06,750
this can only be one but this is pretty

145
00:06:06,750 --> 00:06:08,129
mathematical and I promise no

146
00:06:08,129 --> 00:06:10,080
mathematical stuff so we're over going

147
00:06:10,080 --> 00:06:12,180
on the sliding pat down here so i won't

148
00:06:12,180 --> 00:06:15,149
do more math stuff and so what's in the

149
00:06:15,149 --> 00:06:18,509
package will dive in directly so RX

150
00:06:18,509 --> 00:06:21,479
ships with a two prototypes observable

151
00:06:21,479 --> 00:06:24,210
and observer and this is like the design

152
00:06:24,210 --> 00:06:26,639
pattern from the gang of four from the

153
00:06:26,639 --> 00:06:30,960
90s we have slightly modified it so the

154
00:06:30,960 --> 00:06:34,259
subscribe just like in the design

155
00:06:34,259 --> 00:06:36,210
pattern takes an observer that wants to

156
00:06:36,210 --> 00:06:38,159
listen to that specific event stream or

157
00:06:38,159 --> 00:06:40,949
a synchronous stream she do notice

158
00:06:40,949 --> 00:06:42,360
there's no unsubscribe

159
00:06:42,360 --> 00:06:44,280
so what we did is instead of having a

160
00:06:44,280 --> 00:06:46,830
separate unsubscribe method we return

161
00:06:46,830 --> 00:06:49,469
you a method of a function that when you

162
00:06:49,469 --> 00:06:51,419
call it it will unsubscribe the whole

163
00:06:51,419 --> 00:06:53,729
computation and the reason we do that is

164
00:06:53,729 --> 00:06:55,560
because we want you to allow you to

165
00:06:55,560 --> 00:06:58,500
compose all these events together and if

166
00:06:58,500 --> 00:06:59,759
you have a whole chain of all these

167
00:06:59,759 --> 00:07:01,770
different events you compose you want to

168
00:07:01,770 --> 00:07:03,270
be able to unsubscribe them at a

169
00:07:03,270 --> 00:07:05,090
moment's notice by just making one call

170
00:07:05,090 --> 00:07:07,770
so the thing that we're returns you call

171
00:07:07,770 --> 00:07:09,449
that and the whole subscription will be

172
00:07:09,449 --> 00:07:13,979
torn down now if you look at observer we

173
00:07:13,979 --> 00:07:15,599
split it into these three things that we

174
00:07:15,599 --> 00:07:17,430
mentioned in our grammar all next on

175
00:07:17,430 --> 00:07:21,270
error and uncompleted so if you want to

176
00:07:21,270 --> 00:07:22,710
listen to these events you just

177
00:07:22,710 --> 00:07:24,930
implement observer and implement these

178
00:07:24,930 --> 00:07:27,509
three methods and what we do is by

179
00:07:27,509 --> 00:07:29,460
default if you don't implement these two

180
00:07:29,460 --> 00:07:32,159
methods on ever will fire out the it

181
00:07:32,159 --> 00:07:33,800
will just read throw the exception and

182
00:07:33,800 --> 00:07:37,500
on complete it will be seeing no up and

183
00:07:37,500 --> 00:07:39,539
then for ease of use we also allow you

184
00:07:39,539 --> 00:07:41,849
to just pass in a function instead of

185
00:07:41,849 --> 00:07:46,440
having to create the observer object so

186
00:07:46,440 --> 00:07:49,680
that's the basic part of the package of

187
00:07:49,680 --> 00:07:52,529
course that doesn't have give that much

188
00:07:52,529 --> 00:07:54,539
additional value yet the real value is

189
00:07:54,539 --> 00:07:56,069
in in the lots of operators that we

190
00:07:56,069 --> 00:07:59,159
provide so we have a lot of conversions

191
00:07:59,159 --> 00:08:01,110
from existing JavaScript libraries we

192
00:08:01,110 --> 00:08:03,509
have all the big ones jquery dojo

193
00:08:03,509 --> 00:08:09,060
prototype mootools Yui 3 and then we

194
00:08:09,060 --> 00:08:11,039
have a lot of manipulation operators so

195
00:08:11,039 --> 00:08:13,110
we have projection time-based operators

196
00:08:13,110 --> 00:08:17,789
buffers so that's really real value lies

197
00:08:17,789 --> 00:08:19,710
the fact that you can combine multiple

198
00:08:19,710 --> 00:08:26,460
streams and and modify the output so

199
00:08:26,460 --> 00:08:28,349
let's look at some key concepts that you

200
00:08:28,349 --> 00:08:29,849
need to know about observables before we

201
00:08:29,849 --> 00:08:33,089
start diving into the code there's two

202
00:08:33,089 --> 00:08:35,219
kinds of observables the first one is

203
00:08:35,219 --> 00:08:40,349
rename call observables that means like

204
00:08:40,349 --> 00:08:42,029
this one is like one of the most basic

205
00:08:42,029 --> 00:08:44,670
operators it just creates an observable

206
00:08:44,670 --> 00:08:46,560
that when you call subscribe on it it

207
00:08:46,560 --> 00:08:48,779
will return you to value 42 so you

208
00:08:48,779 --> 00:08:50,940
subscribe and your functional or

209
00:08:50,940 --> 00:08:53,220
observer object will immediately be

210
00:08:53,220 --> 00:08:55,570
called way to fail you 42

211
00:08:55,570 --> 00:08:57,400
followed by a call to on completion I

212
00:08:57,400 --> 00:09:01,000
don't complete it the reason we call

213
00:09:01,000 --> 00:09:02,200
this code because it doesn't happen

214
00:09:02,200 --> 00:09:05,080
until you actually ask it to do

215
00:09:05,080 --> 00:09:07,840
something and that is in contrast with

216
00:09:07,840 --> 00:09:10,300
hot observables so how observables are

217
00:09:10,300 --> 00:09:12,580
things that will give events whether or

218
00:09:12,580 --> 00:09:15,640
not you're subscribe to it so for

219
00:09:15,640 --> 00:09:18,190
instance any of the mouse move events or

220
00:09:18,190 --> 00:09:21,700
other events they just keep firing even

221
00:09:21,700 --> 00:09:24,100
if you don't subscribe to it of course

222
00:09:24,100 --> 00:09:25,570
we optimized where that we don't make

223
00:09:25,570 --> 00:09:27,430
all the calls but it keeps firing in

224
00:09:27,430 --> 00:09:32,110
theory so let's look at the most basic

225
00:09:32,110 --> 00:09:36,160
way of using our X so as I said we

226
00:09:36,160 --> 00:09:38,230
integrate with jquery so we just load

227
00:09:38,230 --> 00:09:40,330
jquery followed by loading our x and

228
00:09:40,330 --> 00:09:43,150
then the specific jquery bindings to our

229
00:09:43,150 --> 00:09:45,910
x we just use the regular jQuery

230
00:09:45,910 --> 00:09:49,110
selector to get a Dom element input

231
00:09:49,110 --> 00:09:52,510
element in this case and we say we want

232
00:09:52,510 --> 00:09:54,370
to subscribe to the key want to convert

233
00:09:54,370 --> 00:09:57,340
the jQuery event p up to an observable

234
00:09:57,340 --> 00:09:59,800
so this is an method that we added to

235
00:09:59,800 --> 00:10:02,410
the jQuery prototype and now when you

236
00:10:02,410 --> 00:10:05,200
ask ricky up event will hook up to the

237
00:10:05,200 --> 00:10:07,990
jquery mechanism and give you a return

238
00:10:07,990 --> 00:10:10,660
you and observable object and now you

239
00:10:10,660 --> 00:10:14,470
can use subscribe to listen to it of

240
00:10:14,470 --> 00:10:16,770
course this you could easily do without

241
00:10:16,770 --> 00:10:19,240
RX but this is just the most basic

242
00:10:19,240 --> 00:10:22,150
sample it actually shows how to start

243
00:10:22,150 --> 00:10:26,530
with RX ok so let's do some javascript

244
00:10:26,530 --> 00:10:31,600
hacking i figured that i ii didn't get

245
00:10:31,600 --> 00:10:34,000
much time today so i'm going to do my

246
00:10:34,000 --> 00:10:36,130
demonstrate IE even though it works in

247
00:10:36,130 --> 00:10:41,830
all the browsers ok so after a simple

248
00:10:41,830 --> 00:10:43,660
page just like let me close a couple of

249
00:10:43,660 --> 00:10:45,280
these dialogues you give some more real

250
00:10:45,280 --> 00:10:49,240
estate so I have a simple web page i

251
00:10:49,240 --> 00:10:52,360
load RX jquery and jake RX jquery

252
00:10:52,360 --> 00:10:57,640
binding i have let's show hold on i have

253
00:10:57,640 --> 00:10:59,950
two elements and an input box and a diff

254
00:10:59,950 --> 00:11:01,630
to show results um i'm going to write

255
00:11:01,630 --> 00:11:03,460
the dictionary suggest sample using our

256
00:11:03,460 --> 00:11:07,000
X so our first going to hook up to the

257
00:11:07,000 --> 00:11:09,300
key up event from the input box

258
00:11:09,300 --> 00:11:12,430
so I'm going to say input still to

259
00:11:12,430 --> 00:11:18,610
observable off-key up and i'm going to

260
00:11:18,610 --> 00:11:26,420
subscribe to that

261
00:11:26,430 --> 00:11:28,830
and I'm going to pass the function what

262
00:11:28,830 --> 00:11:30,300
it needs to do when a value comes

263
00:11:30,300 --> 00:11:34,740
through and I'm just now going to put it

264
00:11:34,740 --> 00:11:39,149
in the results so results innerhtml plus

265
00:11:39,149 --> 00:11:45,390
equals value yeah let's see what that

266
00:11:45,390 --> 00:11:54,830
does and of course I'm something wrong

267
00:11:54,830 --> 00:12:03,870
refresh that demo effect okay let's

268
00:12:03,870 --> 00:12:08,790
spare let me just change this to other

269
00:12:08,790 --> 00:12:19,290
Lord see what I do wrong yeah it's just

270
00:12:19,290 --> 00:12:21,899
something wrong with maybe a mistake oh

271
00:12:21,899 --> 00:12:24,720
I know what I did wrong i was using

272
00:12:24,720 --> 00:12:27,450
jquery object to use in NRH smell and I

273
00:12:27,450 --> 00:12:30,270
should do in results the latest Mel fail

274
00:12:30,270 --> 00:12:37,459
you there we go and still doesn't work

275
00:12:37,459 --> 00:12:44,630
result selection series half dead

276
00:12:44,630 --> 00:12:48,140
yes there you are okay so it gives me

277
00:12:48,140 --> 00:12:50,510
object object and the reason for that is

278
00:12:50,510 --> 00:12:53,180
because the event gives me the win the

279
00:12:53,180 --> 00:12:56,210
event object back so I don't want to use

280
00:12:56,210 --> 00:12:57,380
the whole event object i'm really only

281
00:12:57,380 --> 00:12:59,330
interested in the value that's in the in

282
00:12:59,330 --> 00:13:01,100
the textbook so i'm going to do a

283
00:13:01,100 --> 00:13:04,370
projection here so i'm going to say

284
00:13:04,370 --> 00:13:07,820
instead of having this event object in

285
00:13:07,820 --> 00:13:10,820
here i wanna have developed and then I

286
00:13:10,820 --> 00:13:15,920
pass in a function value return value

287
00:13:15,920 --> 00:13:21,830
top source element don't fail you there

288
00:13:21,830 --> 00:13:27,200
we go so now when i refresh this when i

289
00:13:27,200 --> 00:13:29,690
type i get all the values of course now

290
00:13:29,690 --> 00:13:35,750
when i do arrows so now when i copy and

291
00:13:35,750 --> 00:13:37,700
paste the same thing in displace the

292
00:13:37,700 --> 00:13:42,200
same value and when i do mt it also

293
00:13:42,200 --> 00:13:43,850
shows that so i want to filter out those

294
00:13:43,850 --> 00:13:47,030
events so first i'm going to filter out

295
00:13:47,030 --> 00:13:53,670
the empty case

296
00:13:53,680 --> 00:13:56,589
so if Lu is not the empty string I want

297
00:13:56,589 --> 00:14:02,800
to fill send this through so now it

298
00:14:02,800 --> 00:14:05,440
doesn't fire the empty case and if i

299
00:14:05,440 --> 00:14:06,880
want to have two unique values there's

300
00:14:06,880 --> 00:14:08,529
an operator that's called distinct until

301
00:14:08,529 --> 00:14:10,450
changed it's like a distinct in a

302
00:14:10,450 --> 00:14:11,920
database the only difference is that

303
00:14:11,920 --> 00:14:14,529
because these observable streams can be

304
00:14:14,529 --> 00:14:17,200
potentially infinite it doesn't keep a

305
00:14:17,200 --> 00:14:18,459
cache of all the values that it's seen

306
00:14:18,459 --> 00:14:20,200
previously it only keeps a cache of the

307
00:14:20,200 --> 00:14:23,950
last value its salt so if you type a and

308
00:14:23,950 --> 00:14:27,279
then a again it will not fire a but if

309
00:14:27,279 --> 00:14:29,649
you type B afterwards and then a again

310
00:14:29,649 --> 00:14:31,660
it will fire the eight again at a later

311
00:14:31,660 --> 00:14:42,820
time there we go okay so that's working

312
00:14:42,820 --> 00:14:47,920
now it's hard to see I guess so now we

313
00:14:47,920 --> 00:14:50,200
have the the input that we want there's

314
00:14:50,200 --> 00:14:51,520
only one thing that we still wanted to

315
00:14:51,520 --> 00:14:53,110
add this we wanted to make sure that we

316
00:14:53,110 --> 00:14:55,690
don't fire unless user hasn't typed for

317
00:14:55,690 --> 00:14:59,260
a couple milliseconds so I'm going to

318
00:14:59,260 --> 00:15:02,140
say let me throttle the user's input

319
00:15:02,140 --> 00:15:06,900
here so throttle for 250 milliseconds

320
00:15:06,900 --> 00:15:12,100
dot here okay so let's give this a try

321
00:15:12,100 --> 00:15:15,670
so if i type AAA bc it shows up but i

322
00:15:15,670 --> 00:15:17,200
didn't show the a and the B in a min

323
00:15:17,200 --> 00:15:21,400
meantime okay so we have tamed our input

324
00:15:21,400 --> 00:15:24,240
let's go make an asynchronous requests

325
00:15:24,240 --> 00:15:27,370
so what I'm going to do is I'm going to

326
00:15:27,370 --> 00:15:33,470
say select for every value that comes in

327
00:15:33,480 --> 00:15:36,010
making xmit requests and we have a

328
00:15:36,010 --> 00:15:39,550
wrapper around the xhr as well so i'm

329
00:15:39,550 --> 00:15:42,630
going to say our exit observable xml

330
00:15:42,630 --> 00:15:49,750
HTTP request and download that from 16 8

331
00:15:49,750 --> 00:15:53,390
4 2000

332
00:15:53,390 --> 00:15:57,490
queer query is and i'm just going to

333
00:15:57,490 --> 00:16:03,560
escape the value here and i believe if i

334
00:16:03,560 --> 00:16:10,610
need to do one more see here ok let's

335
00:16:10,610 --> 00:16:18,950
give that a try and i made an error yes

336
00:16:18,950 --> 00:16:29,750
well that's right yep sorry oh yes

337
00:16:29,750 --> 00:16:33,320
you're right type that weight and

338
00:16:33,320 --> 00:16:38,900
there's still more errors of course I

339
00:16:38,900 --> 00:16:42,040
need to return that value i'm not using

340
00:16:42,040 --> 00:16:45,990
coffeescript

341
00:16:46,000 --> 00:16:48,230
okay so now we get an object back which

342
00:16:48,230 --> 00:16:53,030
is the xmlhttprequest so there was one

343
00:16:53,030 --> 00:16:54,590
thing that we still needed to do because

344
00:16:54,590 --> 00:16:57,050
now I just make an XML HTTP request for

345
00:16:57,050 --> 00:16:58,910
every value that comes in then I just

346
00:16:58,910 --> 00:17:00,500
said that that was bad because now you

347
00:17:00,500 --> 00:17:02,360
can have this of flapping results

348
00:17:02,360 --> 00:17:06,920
problem so let's go fix that so what I'm

349
00:17:06,920 --> 00:17:08,600
going to do is I'm going to use the

350
00:17:08,600 --> 00:17:10,449
switch operator and the switch operator

351
00:17:10,449 --> 00:17:12,949
switches between all the new observables

352
00:17:12,949 --> 00:17:15,860
as moment it comes in so it's going to

353
00:17:15,860 --> 00:17:18,650
type switch and while reddit i'm going

354
00:17:18,650 --> 00:17:23,180
to change this to change to use the

355
00:17:23,180 --> 00:17:33,990
response text here there you go there

356
00:17:34,000 --> 00:17:37,910
it's a 19-13 dictionary so it's a it's

357
00:17:37,910 --> 00:17:40,550
not that fancy but it was the one I

358
00:17:40,550 --> 00:17:42,140
could find it didn't have any license

359
00:17:42,140 --> 00:17:46,010
issues okay so we have for addiction

360
00:17:46,010 --> 00:17:48,710
it's just working so let's look a bit

361
00:17:48,710 --> 00:17:50,270
more into what we just did with all

362
00:17:50,270 --> 00:17:55,280
these operators so let's start with the

363
00:17:55,280 --> 00:17:58,220
more basic operator so what we often do

364
00:17:58,220 --> 00:18:00,290
is to explain all our operators is we

365
00:18:00,290 --> 00:18:01,760
draw these things that we call marble

366
00:18:01,760 --> 00:18:04,880
diagrams so this is the code for the

367
00:18:04,880 --> 00:18:06,740
module diagram and then we show each of

368
00:18:06,740 --> 00:18:08,450
the observables here where we usually

369
00:18:08,450 --> 00:18:10,670
see all the inputs on top and the output

370
00:18:10,670 --> 00:18:14,240
on the bottom and this shows time that

371
00:18:14,240 --> 00:18:17,060
direction and then we project the values

372
00:18:17,060 --> 00:18:18,290
how to go from the input to the output

373
00:18:18,290 --> 00:18:21,560
stream so select will does it it gets

374
00:18:21,560 --> 00:18:23,240
called for each value that comes through

375
00:18:23,240 --> 00:18:26,060
its own next message and the user gets a

376
00:18:26,060 --> 00:18:30,110
chance to transform each single value so

377
00:18:30,110 --> 00:18:31,760
in this case we did the event source

378
00:18:31,760 --> 00:18:33,680
elemental value so it goes from the

379
00:18:33,680 --> 00:18:36,260
event object to the value of the data

380
00:18:36,260 --> 00:18:38,480
and it does this as long as they're just

381
00:18:38,480 --> 00:18:40,250
message come in until uncompleted

382
00:18:40,250 --> 00:18:41,810
message comes in and the completed

383
00:18:41,810 --> 00:18:43,810
message is just sent through directly

384
00:18:43,810 --> 00:18:48,260
and doesn't carry any value of course

385
00:18:48,260 --> 00:18:50,240
errors could happen and this could

386
00:18:50,240 --> 00:18:52,940
happen in two places they can either be

387
00:18:52,940 --> 00:18:54,320
errors that already existed in the

388
00:18:54,320 --> 00:18:56,929
source observable or that could be

389
00:18:56,929 --> 00:18:58,380
introduced by the user here in

390
00:18:58,380 --> 00:19:02,040
in the in the selector function we try

391
00:19:02,040 --> 00:19:03,960
to use aboard semantics or possible so

392
00:19:03,960 --> 00:19:06,090
we sent these errors straight through

393
00:19:06,090 --> 00:19:11,430
there's no manipulation on them distinct

394
00:19:11,430 --> 00:19:14,970
until Chainz as I said it it starts

395
00:19:14,970 --> 00:19:17,670
producing all the values through if it

396
00:19:17,670 --> 00:19:19,770
has that value in its cache currently it

397
00:19:19,770 --> 00:19:21,840
doesn't send it through so the second

398
00:19:21,840 --> 00:19:24,150
value didn't get projected down then new

399
00:19:24,150 --> 00:19:25,830
different value came in it gets in

400
00:19:25,830 --> 00:19:29,910
through until a new value comes in and

401
00:19:29,910 --> 00:19:31,890
complete it gets in through direct

402
00:19:31,890 --> 00:19:34,980
directly and I think you can also pass

403
00:19:34,980 --> 00:19:37,800
in a comparison if you want to do more

404
00:19:37,800 --> 00:19:39,900
complex comparisons and just equality

405
00:19:39,900 --> 00:19:45,690
comparison okay throttle throttle is a

406
00:19:45,690 --> 00:19:47,250
bit more interesting operator because it

407
00:19:47,250 --> 00:19:52,890
does time shifting so it the first time

408
00:19:52,890 --> 00:19:57,030
the user types of character it starts a

409
00:19:57,030 --> 00:19:59,520
timer and if the next message doesn't

410
00:19:59,520 --> 00:20:01,440
come in by the time were times that will

411
00:20:01,440 --> 00:20:03,930
fire it out so in this case diverse not

412
00:20:03,930 --> 00:20:06,000
the second collapse before the second

413
00:20:06,000 --> 00:20:07,950
value come in so it ignore the first

414
00:20:07,950 --> 00:20:10,140
value and then after second no new

415
00:20:10,140 --> 00:20:11,760
message came in so it projects the

416
00:20:11,760 --> 00:20:14,220
second value the moment it gets

417
00:20:14,220 --> 00:20:16,740
completed it actually sends it out the

418
00:20:16,740 --> 00:20:18,480
moment that the last value has sent out

419
00:20:18,480 --> 00:20:23,910
being sent out and that's important

420
00:20:23,910 --> 00:20:26,010
because like if an error happens we're

421
00:20:26,010 --> 00:20:27,870
trying to use a board semantics so even

422
00:20:27,870 --> 00:20:30,840
though it's of value outstanding if an

423
00:20:30,840 --> 00:20:32,430
error comes to we say up this thing has

424
00:20:32,430 --> 00:20:34,470
to be aborted so we sent the arrow right

425
00:20:34,470 --> 00:20:36,840
through and the one that was in flight

426
00:20:36,840 --> 00:20:42,840
will never get sent out okay switch so

427
00:20:42,840 --> 00:20:46,590
switch looks a lot more complicated it

428
00:20:46,590 --> 00:20:48,210
just have to wrap your mind around it a

429
00:20:48,210 --> 00:20:50,880
bit and then it will float automatically

430
00:20:50,880 --> 00:20:54,180
how it should work so what we did in our

431
00:20:54,180 --> 00:20:56,790
sample is that we selected from a value

432
00:20:56,790 --> 00:20:59,100
to a new observable so what we actually

433
00:20:59,100 --> 00:21:01,680
created was an observable which payload

434
00:21:01,680 --> 00:21:04,680
it again our observable stem cells so

435
00:21:04,680 --> 00:21:06,570
each value that comes through in that

436
00:21:06,570 --> 00:21:09,180
original observable is itself an

437
00:21:09,180 --> 00:21:12,240
observable so we can do is you can

438
00:21:12,240 --> 00:21:14,790
right to these and project them out in a

439
00:21:14,790 --> 00:21:17,220
flattened way so every time a new

440
00:21:17,220 --> 00:21:19,679
observable comes in we start listening

441
00:21:19,679 --> 00:21:21,630
it and all values get projected down

442
00:21:21,630 --> 00:21:24,750
immediately the moment that on our outer

443
00:21:24,750 --> 00:21:27,390
observe will a new message comes through

444
00:21:27,390 --> 00:21:29,910
with the next observable we unsubscribed

445
00:21:29,910 --> 00:21:32,490
from the first observable and then we

446
00:21:32,490 --> 00:21:33,960
start listening to the second observable

447
00:21:33,960 --> 00:21:36,210
and project each values through so the

448
00:21:36,210 --> 00:21:38,820
even though this one had more values we

449
00:21:38,820 --> 00:21:41,429
just ignore them if this one happens to

450
00:21:41,429 --> 00:21:44,070
be completed before our outer produces a

451
00:21:44,070 --> 00:21:45,630
new one if we just wait until the outer

452
00:21:45,630 --> 00:21:48,420
want to give our new values and then we

453
00:21:48,420 --> 00:21:50,820
complete when both the outer and the

454
00:21:50,820 --> 00:21:53,460
last inner have both the completed

455
00:21:53,460 --> 00:21:57,390
message so this is exactly solving that

456
00:21:57,390 --> 00:22:00,870
issue with having xmit requests coming

457
00:22:00,870 --> 00:22:07,470
out of order ok so our semantics get bit

458
00:22:07,470 --> 00:22:09,179
more tricky because now there is much

459
00:22:09,179 --> 00:22:12,960
more places where errors can happen so

460
00:22:12,960 --> 00:22:15,210
errors can happen inside the interrupts

461
00:22:15,210 --> 00:22:18,600
verbal or inside the outer observable in

462
00:22:18,600 --> 00:22:22,429
both cases we just use aboard semantics

463
00:22:22,429 --> 00:22:26,660
ok so our ex is a general-purpose

464
00:22:26,660 --> 00:22:29,970
library it works not only on websites

465
00:22:29,970 --> 00:22:32,700
and i want to show you that that's the

466
00:22:32,700 --> 00:22:37,679
case so this virtual machine is actually

467
00:22:37,679 --> 00:22:41,400
running node and what we did is I wrote

468
00:22:41,400 --> 00:22:43,860
a couple wrappers around note to use

469
00:22:43,860 --> 00:22:45,720
that create RX bindings observable

470
00:22:45,720 --> 00:22:47,280
bindings for each of the asynchronous

471
00:22:47,280 --> 00:22:50,280
operations so I'll quickly show you how

472
00:22:50,280 --> 00:22:55,820
that looks like yeah

473
00:22:55,820 --> 00:22:59,430
so instead of requiring sis and HTTP and

474
00:22:59,430 --> 00:23:03,530
FS I require our axis in RX HTTP and

475
00:23:03,530 --> 00:23:06,180
what we do stays we exported all the

476
00:23:06,180 --> 00:23:08,070
original functions within with an RX

477
00:23:08,070 --> 00:23:11,100
repper so I do it create HTTP server

478
00:23:11,100 --> 00:23:14,850
just like a normal package but then what

479
00:23:14,850 --> 00:23:17,640
I do is I want to get the parsed URL

480
00:23:17,640 --> 00:23:22,620
instead of the the just a string URL so

481
00:23:22,620 --> 00:23:26,360
i select in with a select the URL parse

482
00:23:26,360 --> 00:23:29,130
version of it so that I can look at the

483
00:23:29,130 --> 00:23:33,210
query and then as my dictionary only

484
00:23:33,210 --> 00:23:38,730
works on alphanumeric sir alpha strings

485
00:23:38,730 --> 00:23:43,830
I make sure the query is an alphabetic

486
00:23:43,830 --> 00:23:46,710
character and so my observe will now

487
00:23:46,710 --> 00:23:51,900
only contains URL request that that are

488
00:23:51,900 --> 00:23:54,960
valid and then I do is select many so

489
00:23:54,960 --> 00:23:57,090
select many is like bind in Haskell I

490
00:23:57,090 --> 00:24:00,030
know for people who know that well does

491
00:24:00,030 --> 00:24:01,560
it gives you an opportunity to replace

492
00:24:01,560 --> 00:24:04,830
each value of a observable with a

493
00:24:04,830 --> 00:24:06,450
function that's will show you the new

494
00:24:06,450 --> 00:24:09,030
observable that's then flattened so in

495
00:24:09,030 --> 00:24:13,650
this case I get the request in and then

496
00:24:13,650 --> 00:24:16,290
I'm going to start an async read file

497
00:24:16,290 --> 00:24:21,290
request so read that file and wonder

498
00:24:21,290 --> 00:24:23,700
when that value comes through i select

499
00:24:23,700 --> 00:24:26,670
the JSON and then in the end I just

500
00:24:26,670 --> 00:24:29,250
subscribe to my event and we sent a

501
00:24:29,250 --> 00:24:34,940
response out there

502
00:24:34,940 --> 00:24:38,370
so as you can see it's not just for

503
00:24:38,370 --> 00:24:39,900
website inference in any environment

504
00:24:39,900 --> 00:24:43,860
that runs java script there's a lot more

505
00:24:43,860 --> 00:24:46,620
operators in RX then i discovered in

506
00:24:46,620 --> 00:24:50,820
this small talk there's a lot of time

507
00:24:50,820 --> 00:24:53,330
based operators but for operators

508
00:24:53,330 --> 00:24:56,820
there's aggregation operators there's

509
00:24:56,820 --> 00:24:59,010
operators to convert from existing

510
00:24:59,010 --> 00:25:02,790
events there's mechanism to create your

511
00:25:02,790 --> 00:25:05,910
own observables so it's a it's a pretty

512
00:25:05,910 --> 00:25:08,550
extensive package and the download the

513
00:25:08,550 --> 00:25:14,580
the core of our exes 7kg zip and there's

514
00:25:14,580 --> 00:25:16,230
a whole bunch of external libraries for

515
00:25:16,230 --> 00:25:18,090
the integrations they are all separate

516
00:25:18,090 --> 00:25:19,110
so you don't have to pay for the

517
00:25:19,110 --> 00:25:20,790
download size like if you don't use

518
00:25:20,790 --> 00:25:22,590
jojoba jquery you don't want to pay for

519
00:25:22,590 --> 00:25:26,840
the download size of the dojo bindings

520
00:25:26,840 --> 00:25:31,020
so what's next you can find RX on the

521
00:25:31,020 --> 00:25:33,540
following URL and it's pretty crappy URL

522
00:25:33,540 --> 00:25:35,790
so just type it in your fray for search

523
00:25:35,790 --> 00:25:39,420
engine and it should show up we do a new

524
00:25:39,420 --> 00:25:42,930
release about every two to five weeks we

525
00:25:42,930 --> 00:25:45,120
have a web form that you can report bugs

526
00:25:45,120 --> 00:25:48,420
features suggestions just help and how

527
00:25:48,420 --> 00:25:50,970
to implement things we have a lot of

528
00:25:50,970 --> 00:25:54,990
videos online think we have about 40

529
00:25:54,990 --> 00:25:56,640
videos right now when we post new once

530
00:25:56,640 --> 00:25:59,220
every couple of weeks and then there's

531
00:25:59,220 --> 00:26:03,750
also two channels we wanted to use pound

532
00:26:03,750 --> 00:26:06,510
there are hash RX but yeah there's a lot

533
00:26:06,510 --> 00:26:07,680
of stuff there already that you don't

534
00:26:07,680 --> 00:26:11,340
want to read so we're using our x GS and

535
00:26:11,340 --> 00:26:14,580
RX net and you can also just look at at

536
00:26:14,580 --> 00:26:19,560
my Twitter feeds and with that I'd like

537
00:26:19,560 --> 00:26:24,180
to open up for questions

538
00:26:24,190 --> 00:26:26,289
you had a question so that last example

539
00:26:26,289 --> 00:26:28,269
that you show did you get note running

540
00:26:28,269 --> 00:26:32,440
on windows no I didn't try I just sets a

541
00:26:32,440 --> 00:26:36,009
vm yeah this is this is a Linux VM I

542
00:26:36,009 --> 00:26:45,619
just I just did a app get and go going

543
00:26:45,629 --> 00:26:49,840
so the licensing is a it's a custom

544
00:26:49,840 --> 00:26:52,870
license but it's it's pretty much ses

545
00:26:52,870 --> 00:26:55,600
license it's not officially supported

546
00:26:55,600 --> 00:26:58,029
through product support right now but

547
00:26:58,029 --> 00:26:59,710
you can use it in your applications as

548
00:26:59,710 --> 00:27:03,879
you want it we had just switch this

549
00:27:03,879 --> 00:27:05,409
thursday before we had to have like an

550
00:27:05,409 --> 00:27:07,480
installer which is really painful if

551
00:27:07,480 --> 00:27:08,769
you're not on the Windows platform and

552
00:27:08,769 --> 00:27:11,259
the release that we did this Thursday

553
00:27:11,259 --> 00:27:13,659
it's now in a zip file so it's very easy

554
00:27:13,659 --> 00:27:18,220
to get on any platform in exactly a

555
00:27:18,220 --> 00:27:20,889
question but the comments whereas that

556
00:27:20,889 --> 00:27:22,480
does Marvel diagrams are actually pretty

557
00:27:22,480 --> 00:27:24,159
cool I was just kind of searching around

558
00:27:24,159 --> 00:27:26,679
actually top search hit for marble egg

559
00:27:26,679 --> 00:27:28,659
diagram is the reactive framework does

560
00:27:28,659 --> 00:27:31,629
curious there are other projects and

561
00:27:31,629 --> 00:27:33,820
engine soul everyone uses a Microsoft

562
00:27:33,820 --> 00:27:36,929
all the scenes but here's that are other

563
00:27:36,929 --> 00:27:38,799
seems like that shouldn't be something

564
00:27:38,799 --> 00:27:40,690
that other projects yeah it should be

565
00:27:40,690 --> 00:27:42,190
something anything those asynchronous

566
00:27:42,190 --> 00:27:44,679
can can benefit from this seems like

567
00:27:44,679 --> 00:27:46,539
there's like um L would be like the

568
00:27:46,539 --> 00:27:48,519
default place to go with these kind of

569
00:27:48,519 --> 00:27:49,570
diagrams I you know this was like

570
00:27:49,570 --> 00:27:51,490
inspired by some other is there another

571
00:27:51,490 --> 00:27:54,100
um Elish vocabulary word I don't know we

572
00:27:54,100 --> 00:27:56,470
came up with this when we like we need

573
00:27:56,470 --> 00:27:58,720
it to draw these things and like how can

574
00:27:58,720 --> 00:28:00,490
we explain people what to be a free of

575
00:28:00,490 --> 00:28:03,429
these operators and just this came

576
00:28:03,429 --> 00:28:05,259
naturally okay it's similar to like a

577
00:28:05,259 --> 00:28:06,940
client-server diamond right we have the

578
00:28:06,940 --> 00:28:08,620
two lines of time going on the sea make

579
00:28:08,620 --> 00:28:11,080
requests McEvoy yep so which is

580
00:28:11,080 --> 00:28:13,149
typically call the Stevens diagram even

581
00:28:13,149 --> 00:28:15,159
the networking book okay this seems less

582
00:28:15,159 --> 00:28:19,870
dogmatic and just useful yeah I still

583
00:28:19,870 --> 00:28:22,059
want to invest so one of the things that

584
00:28:22,059 --> 00:28:24,100
is still lacking is documentation like

585
00:28:24,100 --> 00:28:25,929
we were small team we are three

586
00:28:25,929 --> 00:28:29,500
developers plus one architect so as you

587
00:28:29,500 --> 00:28:31,809
know documentation always lags behind so

588
00:28:31,809 --> 00:28:34,779
one of the things like I have about 1500

589
00:28:34,779 --> 00:28:37,840
test for RX and I want to generate these

590
00:28:37,840 --> 00:28:41,860
two marble diagrams automatically so I

591
00:28:41,860 --> 00:28:43,480
hope that that will help improve the

592
00:28:43,480 --> 00:28:50,080
documentation any other questions I've

593
00:28:50,080 --> 00:28:52,090
been doing quite a bit of similar a

594
00:28:52,090 --> 00:28:53,970
project in a similar vein based off of

595
00:28:53,970 --> 00:28:58,090
Tyler closest promises from hackers are

596
00:28:58,090 --> 00:28:59,669
you aware exam is there a connection

597
00:28:59,669 --> 00:29:03,250
distinction so there's a lot of reactive

598
00:29:03,250 --> 00:29:07,179
programming going on and they're all

599
00:29:07,179 --> 00:29:09,309
good packages the thing and we did is we

600
00:29:09,309 --> 00:29:12,659
really looked at like the monads and

601
00:29:12,659 --> 00:29:15,940
from functional programming and use that

602
00:29:15,940 --> 00:29:19,269
that's our basis I have not seen how how

603
00:29:19,269 --> 00:29:22,809
they base their programming but it is

604
00:29:22,809 --> 00:29:24,070
interesting i took a very similar

605
00:29:24,070 --> 00:29:28,340
approach the promise life as usual

606
00:29:28,350 --> 00:29:34,120
it is addressing a similar it's less

607
00:29:34,120 --> 00:29:36,340
about straining events and subscriptions

608
00:29:36,340 --> 00:29:39,880
and more about the return results seems

609
00:29:39,880 --> 00:29:43,510
like there might be some connection okay

610
00:29:43,510 --> 00:29:45,070
I'll look into that I've not had a

611
00:29:45,070 --> 00:29:46,690
chance looking it and all and I look

612
00:29:46,690 --> 00:29:49,870
into this as well okay good well thank

