1
00:00:20,920 --> 00:00:23,880
Thanks for the charmful introduction.

2
00:00:23,880 --> 00:00:29,650
Well yeah, my talk is called JavaScript level
9000, because I had no idea how to name the

3
00:00:29,650 --> 00:00:34,910
talk otherwise and yeah, let's get started.

4
00:00:34,910 --> 00:00:40,980
So, as he said, I was previously working for
Zynga doing the benchmarking stuff there and

5
00:00:40,980 --> 00:00:51,190
putting out products like the Zynga jukebox,
but - after that - I founded by own project

6
00:00:51,190 --> 00:00:56,360
called lycheeJS, which is something like a
JavaScript engine, but it's a bit more of

7
00:00:56,360 --> 00:01:01,820
a game engine. And there's SkyN4T, which is
an artificial intelligence that is clustered

8
00:01:01,820 --> 00:01:07,570
and stuff like that, it's something like a
hobby for me, and, I was previously also fixing

9
00:01:07,570 --> 00:01:16,909
some Linux stuff, so I was also implementing
fixes for the radeon driver or fixing or supporting

10
00:01:16,909 --> 00:01:20,010
the HD cards back then.

11
00:01:20,010 --> 00:01:29,610
I got into V8 because I thought back then
it's hard to push out a game onto different

12
00:01:29,610 --> 00:01:35,520
other platforms if they're not supporting
HTML5, so basically I started to realize it

13
00:01:35,520 --> 00:01:43,969
would be much more awesome when I could just
use OpenGL there or use freeGLUT for it. Then

14
00:01:43,969 --> 00:01:49,380
I put out a prototype for V8GL, which was
basically V8 combined with OpenGL bindings

15
00:01:49,380 --> 00:01:53,990
and I was using it to cross-compile it to
other platforms like Android or IOS (with

16
00:01:53,990 --> 00:02:01,509
the Node.app stuff). The advantage is that
you can even cross compile it to Xbox 360

17
00:02:01,509 --> 00:02:04,390
or PS 4.

18
00:02:04,390 --> 00:02:09,690
Basically I'm currently focusing on SDL stuff,
so my new runtime is based on NodeJS and using

19
00:02:09,690 --> 00:02:14,810
SDL there, because that's much easier when
it comes to networking stuff.

20
00:02:14,810 --> 00:02:24,960
So, this talk will be starting low and trying
to give you an idea how the data types inside

21
00:02:24,960 --> 00:02:32,060
a VM are implemented and is focusing on a
garbage collection concepts or what the problems

22
00:02:32,060 --> 00:02:37,750
in JavaScript are compared to other block
scoped languages for example.

23
00:02:37,750 --> 00:02:41,319
It's trying to increase the level straight
and linearly.

24
00:02:41,319 --> 00:02:45,670
First, Data types.

25
00:02:45,670 --> 00:02:51,590
Primitives are the basic understandings of
data types and in JavaScript it's a bit complicated

26
00:02:51,590 --> 00:02:57,989
because Primitives are also Objects, but they're
not.

27
00:02:57,989 --> 00:03:02,830
So in these examples the Primitives are like
Numbers, Boolean, null and undefined. They're

28
00:03:02,830 --> 00:03:09,680
Primitives and defined as Primitives. Strings
and Regular Expressions are not, because they

29
00:03:09,680 --> 00:03:13,870
have a length property (and other properties),
so they are real Objects, but they're handled

30
00:03:13,870 --> 00:03:20,810
as Primitives. I will explain that later.

31
00:03:20,810 --> 00:03:26,170
The Strings are primarily handled in the Runtime
memory, which means they are deallocated after

32
00:03:26,170 --> 00:03:33,590
the call stack is finished or after the scope
was destructed, and there's soâ€‘called Hidden

33
00:03:33,590 --> 00:03:38,720
Classes idea behind the implementations. They
use Hidden Classes to implement everything

34
00:03:38,720 --> 00:03:42,739
for you, and the Hidden Classes are something
like the abstraction that you need for your

35
00:03:42,739 --> 00:03:45,000
memory allocation stuff.

36
00:03:45,000 --> 00:03:50,420
Aldo, unique static Strings (if you write
down the same String over your code multiple

37
00:03:50,420 --> 00:03:58,159
times) are only linked as a String Symbol
inside the JIT VM.

38
00:03:58,159 --> 00:04:06,709
Primitives, if you use the native constructor,
like calling "new Number()", then you create

39
00:04:06,709 --> 00:04:12,000
an Object instance, and the Object instance
is handled differently than the literals of

40
00:04:12,000 --> 00:04:13,489
the Number itself.

41
00:04:13,489 --> 00:04:21,000
If you type like the y variable here (y = 123),
it is handled differently handled in the VM.

42
00:04:21,000 --> 00:04:27,610
It is then no instance of Object if you use
the "instanceof" operator.

43
00:04:27,610 --> 00:04:35,850
Arrays and Objects are basically all Object
instances, even the literals ("[], \"). For

44
00:04:35,850 --> 00:04:41,160
example, Arrays are an instance of Array but
they're also an instance of Object. Objects

45
00:04:41,160 --> 00:04:47,390
themselves are always instances of Object
because the literals are defined that way.

46
00:04:47,390 --> 00:04:55,100
The difference here is that the Primitives
are not reference-able after the scope and

47
00:04:55,100 --> 00:05:00,440
the Objects are reference-able after the scope
was closed or after the Function scope was

48
00:05:00,440 --> 00:05:02,950
closed and destructed.

49
00:05:02,950 --> 00:05:10,150
That's basically the idea of the Garbage Collector
in JavaScript.

50
00:05:10,150 --> 00:05:17,560
The hard topics is the dynamic typing stuff
because previously, before the WebGL Standard

51
00:05:17,560 --> 00:05:23,880
you had no possibility to use something like
typed Arrays.

52
00:05:23,880 --> 00:05:29,850
The idea behind the JIT VM was that they wanted
to optimize everything as far as possible,

53
00:05:29,850 --> 00:05:36,060
so, in this example, both examples have like
the same values and the Array has the same

54
00:05:36,060 --> 00:05:40,250
content afterwards but they're optimized in
a completely different way.

55
00:05:40,250 --> 00:05:45,701
The Foo example here is optimized at compile
time because the JIT knows "Oh, the array

56
00:05:45,701 --> 00:05:50,660
has this length and it's closed afterwards
so it's finished at this stage".

57
00:05:50,660 --> 00:06:01,100
The Bar example is allocating everything dynamically,
so, at first (the 13 and 37 values) will just

58
00:06:01,100 --> 00:06:05,120
allocate everything. After that, if you change
the type (0.5 value), it will convert everything

59
00:06:05,120 --> 00:06:09,680
to doubles. That's the soâ€‘called Unboxing,
it then has to be unboxed, converted, and

60
00:06:09,680 --> 00:06:12,530
boxed again.

61
00:06:12,530 --> 00:06:17,250
Everything will be converted to Doubles, that
means the precision of 13 and 37 would be

62
00:06:17,250 --> 00:06:24,630
something like dot 0 (13.0 and 37.0) and then
it's still handled as an (un/signed) Integer.

63
00:06:24,630 --> 00:06:28,530
If you allocate something differently from
the existing values like "true" - which is

64
00:06:28,530 --> 00:06:36,380
an Object - then it will convert everything
to Objects or to references. I will explain

65
00:06:36,380 --> 00:06:39,190
later how that is solved.

66
00:06:39,190 --> 00:06:43,940
That's basically the difference about the
Objects and Array stuff in JavaScript.

67
00:06:43,940 --> 00:06:52,230
What is also important is that Objects have
unique identifiers, even if they have the

68
00:06:52,230 --> 00:06:59,610
identical contents. So you can use the deep
equals comparison ("===") and they will always

69
00:06:59,610 --> 00:07:04,640
be different because of the identifier.

70
00:07:04,640 --> 00:07:08,330
But they share the same Hidden Class behind
them, these examples (foo and bar) are identically

71
00:07:08,330 --> 00:07:13,860
typed and have identical properties and the
Hidden Classes algorithm inside the VM will

72
00:07:13,860 --> 00:07:19,660
use the same Hiddel Class in that case.

73
00:07:19,660 --> 00:07:28,690
Hidden Classes are basically based on the
data types or the values of those; and the

74
00:07:28,690 --> 00:07:34,330
order of the values or the properties. So,
for example, in this case, the Foo and Bar

75
00:07:34,330 --> 00:07:39,440
example is identical. The Qux example is identical
when it comes to the values but the properties

76
00:07:39,440 --> 00:07:47,681
are ordered in a different way. If the properties
are annotated or assigned to the object in

77
00:07:47,681 --> 00:07:52,180
a different order, it will create automatically
a new Hidden Class.

78
00:07:52,180 --> 00:07:56,640
So that is bad, don't do that!

79
00:07:56,640 --> 00:08:00,890
Hidden Classes are also an abstraction for
Functions, because function templates are

80
00:08:00,890 --> 00:08:07,960
basically (if they are constructed) creating
Object instances. In that case, Foo and Bar

81
00:08:07,960 --> 00:08:14,341
have, when they're assigned, the same hidden
class of Point, but it will create a new Hidden

82
00:08:14,341 --> 00:08:21,030
Class for the bar example because you're assigning
it a property externally to it. So the JIT

83
00:08:21,030 --> 00:08:24,830
is recognizing it: "Oh, that's a completely
different thing and I have to create a new

84
00:08:24,830 --> 00:08:33,510
hidden class for it". So bar is a fork of
foo then.

85
00:08:33,510 --> 00:08:38,690
When you want to implement custom Primitives
in JavaScript, there's the concept behind

86
00:08:38,690 --> 00:08:47,690
the valueOf() method and the toString() method.
If the valueOf() method is called on binary

87
00:08:47,690 --> 00:08:57,810
operators (e.g. an addition), it will try
to find out its arithmetic value. If the valueOf()

88
00:08:57,810 --> 00:09:05,060
method returns null, the data type has no
arithmetic value at all. It will be just 0,

89
00:09:05,060 --> 00:09:09,009
that is the reason why when you add the Foo
and Bar examples together, it would be 0.

90
00:09:09,009 --> 00:09:16,830
If you add another number to it (e.g. foo
+ 123) then it'll be the number value of 123

91
00:09:16,830 --> 00:09:23,110
plus 0 - which is - of course, 123.

92
00:09:23,110 --> 00:09:31,220
valueOf() is used for the arithmetic value
and if you return a Number value instead of

93
00:09:31,220 --> 00:09:39,579
null - so it has\hnumeric value - you can
add it to other Strings or Numbers and it

94
00:09:39,579 --> 00:09:43,089
will automatically convert the data type dependent
on the other variable's data type.

95
00:09:43,089 --> 00:09:49,550
That is the same problem with NaN (Not-a-Number),
if you add a Number to a String it will give

96
00:09:49,550 --> 00:09:56,820
you a different result because it will be
the other way around before the conversion.

97
00:09:56,820 --> 00:10:02,009
In that case, it's just like if you want to
add a String to it - then you have, of course,

98
00:10:02,009 --> 00:10:06,200
String conversion from the Number, so the
Numbers and the values will be identical except

99
00:10:06,200 --> 00:10:09,050
the types.

100
00:10:09,050 --> 00:10:15,470
After the valueof() method is called the VM
will try to determine (if there's no arithmetic

101
00:10:15,470 --> 00:10:20,700
value) if it's a String or if it can be converted
to a String.

102
00:10:20,700 --> 00:10:24,110
That's reason why you see something like "[object
Object]" all the time when you try the dump

103
00:10:24,110 --> 00:10:35,649
it into the console or something like that.
When you are returning an Object instance

104
00:10:35,649 --> 00:10:39,730
in the valueOf() method, it means that the
data type is a high level Object and not a

105
00:10:39,730 --> 00:10:45,980
Primitive anymore. That means the toString()
method is called and if you add those two

106
00:10:45,980 --> 00:10:52,230
examples together or do binary additions on
them, you will get different results, because

107
00:10:52,230 --> 00:10:56,810
the VM is just converting everything to a
String then.

108
00:10:56,810 --> 00:11:01,509
And, yeah. That's basically how it works.

109
00:11:01,509 --> 00:11:07,750
Now I have to dig into the Function stuff
and what Function Templates, Function Instances

110
00:11:07,750 --> 00:11:11,629
and Prototypes are.

111
00:11:11,629 --> 00:11:16,569
Functions in JavaScript, of course, have a
Prototype. The Prototype means there's something

112
00:11:16,569 --> 00:11:20,209
like a Smart Pointer to the Memory.

113
00:11:20,209 --> 00:11:24,810
If you have an example like this and are constructing
a "new Vector()" there, then the "instanceof

114
00:11:24,810 --> 00:11:34,519
Vector" will, of course, be true. But the
prototype lookup (.__proto__ which is a non-standard

115
00:11:34,519 --> 00:11:42,490
behaviour for looking up the Prototype Hierarchy
upwards) will point to Vector. Then (.__proto__.__proto__)

116
00:11:42,490 --> 00:11:47,939
it will point to Object, because everything
is an Object instance. Of course, it's not

117
00:11:47,939 --> 00:11:57,050
an instance of Function. The __proto__.__proto__.__proto
lookup will be null, then the prototype chain

118
00:11:57,050 --> 00:12:03,600
is over and the JIT knows there's no inheritance
level upwards.

119
00:12:03,600 --> 00:12:06,939
That's basically how Prototyping works. So,
if you have something like a new instance

120
00:12:06,939 --> 00:12:13,930
from a Function, then, the direct __proto__
lookup will point to the Function.prototype,

121
00:12:13,930 --> 00:12:23,660
and that will point to the Object.prototype
and so on.

122
00:12:23,660 --> 00:12:29,550
If you want to implement something like Entities
(because I'm a game developer, I want to use

123
00:12:29,550 --> 00:12:34,671
vectors and stuff like that), I'm implementing
a basic Entity and I want to reuse the Vector

124
00:12:34,671 --> 00:12:39,560
methods there. In this case there's a problem:
You need instances on the prototype in order

125
00:12:39,560 --> 00:12:47,089
to have it fully integrated with the JavaScript
VM. If I'm just pointing the Entity.prototype

126
00:12:47,089 --> 00:12:54,240
to the Vector.prototype, I have the same methods,
but I don't have an instance of a Vector,

127
00:12:54,240 --> 00:13:00,379
because the getPrototypeOf() method called
on the Entity instance itself will not point

128
00:13:00,379 --> 00:13:03,940
to the Vector itself, it will point to the
Vector.prototype.

129
00:13:03,940 --> 00:13:12,100
So, yeah, that's basically how the "instanceof"
operator works.

130
00:13:12,100 --> 00:13:19,449
When you create a new Vector() instance, like
in this example, this is the way. When the

131
00:13:19,449 --> 00:13:25,240
prototype of instances or the prototype of
Function template is pointing to a new instance,

132
00:13:25,240 --> 00:13:32,019
you get the correct behaviour with the "instanceof"
operator.

133
00:13:32,019 --> 00:13:37,579
So yeah, that's basically how Function Templates
are implemented in a VM. I hope it was easy

134
00:13:37,579 --> 00:13:39,430
to follow.

135
00:13:39,430 --> 00:13:44,360
When it comes to Hoisting and Closures stuff,
it's pretty important to understand hosting

136
00:13:44,360 --> 00:13:52,160
and closures are not easy to backtrace when
it comes to memory optimizations. Let's get

137
00:13:52,160 --> 00:13:55,550
started with that topic.

138
00:13:55,550 --> 00:14:05,529
(...) So, the explanation of hoisting is like:
When you have a variable inside the own Function

139
00:14:05,529 --> 00:14:11,089
Scope, but it's not accessible or bound inside
this scope, it (the VM) will go upwards and

140
00:14:11,089 --> 00:14:15,730
try to use the next Function Scope on the
outer side (upwards) for that variable.

141
00:14:15,730 --> 00:14:23,869
In that example I'm binding foo and bar, but
with different names. So it's the other way

142
00:14:23,869 --> 00:14:27,839
around when I'm calling the outer Function.
I'm using the "bar" parameter inside the outer

143
00:14:27,839 --> 00:14:33,040
Function as "foo" (so bar is inside it really
foo) and the "qux" parameter as "bar" (so

144
00:14:33,040 --> 00:14:38,700
qux is inside it really bar). That outer Function
is a closure, but if I'm reassigning the foo

145
00:14:38,700 --> 00:14:44,970
variable, I'm not reassigning the "bar" in
the outer scope. It will just delete the reference

146
00:14:44,970 --> 00:14:50,829
of the Global Scope's foo. It behaves like
that because it's not referencing to the original

147
00:14:50,829 --> 00:14:58,110
foo, it's always referencing to the "state"
of foo when the method was called. That also

148
00:14:58,110 --> 00:15:02,829
means that "foo === bar" will be false afterwards.

149
00:15:02,829 --> 00:15:07,269
(Next Topic) Closures

150
00:15:07,269 --> 00:15:15,980
A typical problem is when you are iterating
over an Array with Objects and you do an asynchronous

151
00:15:15,980 --> 00:15:21,490
loader (like loading an Image with an onload()
method that is called afterwards) and you

152
00:15:21,490 --> 00:15:27,160
want to use the "a" iterator variable (of
the example), it will always have the last

153
00:15:27,160 --> 00:15:35,399
value of the loop. It's like that because
probably the Asset will be loaded slower than

154
00:15:35,399 --> 00:15:36,399
the iteration.

155
00:15:36,399 --> 00:15:40,559
That's a typical problem in JavaScript, a
fix for that is just using a Closure to hold

156
00:15:40,559 --> 00:15:43,939
every variable of the loop, so they have the
same state as they had when you wanted it

157
00:15:43,939 --> 00:15:53,369
to be and you can just reuse the property
(or the variable) at that state.

158
00:15:53,369 --> 00:15:57,869
That's basically how Closure work. There's
always a Function that binds the variables

159
00:15:57,869 --> 00:16:06,740
to their own Sub Scope or their own Handle
Scope in which they are binding a variable

160
00:16:06,740 --> 00:16:12,129
or a property inside their own Scope when
they would be free otherwise (after their

161
00:16:12,129 --> 00:16:13,129
destruction).

162
00:16:13,129 --> 00:16:17,220
So... that leads us to the following problem.

163
00:16:17,220 --> 00:16:25,019
We need something like a Garbage Collector
because we have instances of Objects, we want

164
00:16:25,019 --> 00:16:28,369
to delete them afterwards - because otherwise
our Memory will be totally bloated.

165
00:16:28,369 --> 00:16:34,389
The basic knowledge about Memory Management
or Garbage Collectors are that we have the

166
00:16:34,389 --> 00:16:36,110
Runtime Memory and Heap Memory.

167
00:16:36,110 --> 00:16:40,139
The Runtime Memory consists of Primitives.
They're cleared directly after your Scope

168
00:16:40,139 --> 00:16:45,179
has ended. If your Scope is being called and
after that the Scope is destructed, then all

169
00:16:45,179 --> 00:16:49,339
the allocated Runtime Memory will be just
deallocated. How that works is not important.

170
00:16:49,339 --> 00:16:55,550
It's just important that it's deleted afterwards
and that it can't be reused afterwards. Regular

171
00:16:55,550 --> 00:16:59,369
Expressions and Strings are somehow exceptions,
because they have a length property (and behave

172
00:16:59,369 --> 00:17:03,679
like Object instances), but they're still
treated as Runtime allocations inside the

173
00:17:03,679 --> 00:17:07,120
VM. They are basically Primitives while they're
not.

174
00:17:07,120 --> 00:17:16,110
The Heap Memory is something like the memory
that is available afterwards, but you're not

175
00:17:16,110 --> 00:17:23,170
able to use it if you're not referencing it.
It contains Function instances, Object instances,

176
00:17:23,170 --> 00:17:30,880
Array instances, and that's basically what
is inside the Heap Memory. If the references

177
00:17:30,880 --> 00:17:36,580
that you use are not needed anymore and can
be unreferenced, they are cleared up by the

178
00:17:36,580 --> 00:17:41,250
Garbage Collector.

179
00:17:41,250 --> 00:17:45,540
You're creating Garbage every time you have
something overwriting the original reference

180
00:17:45,540 --> 00:17:51,500
with a new Object.
An example is when I assing an Object to foo

181
00:17:51,500 --> 00:17:57,970
and assigning a new Object to it afterwards
(var foo = \; foo = \).

182
00:17:57,970 --> 00:18:03,650
That means unreferenced Object instances always
create Garbage and unreferenced variables

183
00:18:03,650 --> 00:18:08,470
or named properties or arguments inside the
current Scope will trigger the Garbage Collector.

184
00:18:08,470 --> 00:18:14,840
So the GC knows "Oh, I have to clean something
up". After the Scope was destructed, the Garbage

185
00:18:14,840 --> 00:18:21,220
Collector checks if the references are still
there or if they need to be cleared up.

186
00:18:21,220 --> 00:18:28,000
You can do hints for Garbage Collector, a
cheap trick is to set everything to "null",

187
00:18:28,000 --> 00:18:33,170
it's non-referenceble and a Primitive. If
you would set it to "0" as well, that would

188
00:18:33,170 --> 00:18:41,410
be a Number and optimization stuff is a bit
weird here. Just remember: if you have a variable

189
00:18:41,410 --> 00:18:47,710
foo and you have an Object instance allocated
to it, you can dereference it by setting it

190
00:18:47,710 --> 00:18:53,390
to null and then you can assign the new Object
instance to it afterwards. The Garbage Collector

191
00:18:53,390 --> 00:18:59,530
and JavaScript Code Optimizer will know that
"This is the state where we can clear up everything,

192
00:18:59,530 --> 00:19:07,340
afterwards it's a plain Object" and it can
resort everything (the optimized code branches).

193
00:19:07,340 --> 00:19:15,460
That leads us to the Garbage Collection implementation
itself or How It Works inside VMs. I'm mostly

194
00:19:15,460 --> 00:19:19,330
referencing here to the Java stuff because
it was one of the first languages to implement

195
00:19:19,330 --> 00:19:29,960
a Garbage Collector, but most methods are
used in V8 or the Monkey variants of Mozilla.

196
00:19:29,960 --> 00:19:30,960
When it comes to Terminology:

197
00:19:30,960 --> 00:19:37,890
A Garbage is an Object in your program that
your program cannot reference anymore, so

198
00:19:37,890 --> 00:19:40,250
it's not usable at all.

199
00:19:40,250 --> 00:19:49,000
A soâ€‘called Root Node is inside graph and
any direct reference your program can access,

200
00:19:49,000 --> 00:19:54,840
that means for example local variables on
a stack or static class variables, like the

201
00:19:54,840 --> 00:20:00,560
length property on an Array or something like
that.

202
00:20:00,560 --> 00:20:06,330
Object instances are Live if they're not Garbage,
that's basically the opposite.

203
00:20:06,330 --> 00:20:12,010
Live Objects (or Live Object instances) are
referenced by a Root or referenced by another

204
00:20:12,010 --> 00:20:18,930
Object instance that is inside the Root.

205
00:20:18,930 --> 00:20:27,290
You can detect Garbage by basically (...) If
you have a Graph where all the Nodes are referencing

206
00:20:27,290 --> 00:20:34,520
each other, then you have to different ways
to determine if they're still referencing.

207
00:20:34,520 --> 00:20:40,900
One of the algorithms is a Depth-First, the
other a Breadth-First search. Both of them

208
00:20:40,900 --> 00:20:51,940
will lead to the same result. The Depth-First
search algorithm will go to each SubNode first

209
00:20:51,940 --> 00:20:57,060
and then try to determine where's a back-reference.
The Breadth-First search algorithm will go

210
00:20:57,060 --> 00:21:01,850
down the tree and look for references of the
Neighbors of each Node. They are both used

211
00:21:01,850 --> 00:21:07,210
because you have two-dimensional linking Objects
(in the tree structure).

212
00:21:07,210 --> 00:21:13,780
Local Variables are something like named Pointer
that is pointing to somehow anywhere inside

213
00:21:13,780 --> 00:21:15,780
the black hole to a memory address.

214
00:21:15,780 --> 00:21:21,870
JavaScript has basically only pointers you
can use, so everything inside your high level

215
00:21:21,870 --> 00:21:28,110
language is only a pointer or a number if
it's optimized or basically the Primitives

216
00:21:28,110 --> 00:21:34,840
and the Hidden Classes are the soâ€‘called
abstractions for that.

217
00:21:34,840 --> 00:21:42,280
One method for detecting Garbage is the Mark
and Sweep algorithm. It has two different

218
00:21:42,280 --> 00:21:43,280
phases.

219
00:21:43,280 --> 00:21:51,630
The first is the Mark Phase and the second
is the Sweep Phase. To determine Garbage inside

220
00:21:51,630 --> 00:21:58,600
the Graph, it walks along all Roots that it
knows and tries to mark every Object that

221
00:21:58,600 --> 00:22:01,850
is reference-able from each Root Node.

222
00:22:01,850 --> 00:22:08,800
So your program will pause, it is completely
stopped. Then the Mark Phase is running and

223
00:22:08,800 --> 00:22:14,230
tries to determine all Objects that are reference-able.
(Program Pause > Mark Phase > Program Resume)

224
00:22:14,230 --> 00:22:17,710
Afterwards the Sweep Phase is going on.

225
00:22:17,710 --> 00:22:25,300
The Sweep Phase is traversing all the marked
Objects and deallocates them and does all

226
00:22:25,300 --> 00:22:31,360
the Garbage Collection Stuff. So it marks
everything and calls delete inside the low

227
00:22:31,360 --> 00:22:40,970
level C++ code (etc.) and tries to free up
the memory as far as possible.

228
00:22:40,970 --> 00:22:48,791
In Garbage Collection languages you have also
the problem with fragmentation. These two

229
00:22:48,791 --> 00:22:53,510
examples are identical Hidden Classes and
they have two different properties with the

230
00:22:53,510 --> 00:22:57,901
same values and they are identical. Afterwards
you're deleting one of the properties of one

231
00:22:57,901 --> 00:23:05,940
of the instances. Then you cause Memory Fragmentation.
Fragmentation means Memory is free at this

232
00:23:05,940 --> 00:23:11,360
specific address inside the Memory and could
be used otherwise.

233
00:23:11,360 --> 00:23:17,610
So there's soâ€‘called Compaction going on
that is trying to reâ€‘order all the Object

234
00:23:17,610 --> 00:23:23,750
references that are implemented "high-level"
and re-points them to new memory addresses.

235
00:23:23,750 --> 00:23:26,780
(Oh, three minutes)

236
00:23:26,780 --> 00:23:34,012
So, in this example, I'm having references
to (...) I'm trying to explain the references

237
00:23:34,012 --> 00:23:41,070
that are so-called Handles inside a JIT Compiler.
It's basically in the VM something like a

238
00:23:41,070 --> 00:23:45,600
Pointer to a Pointer. If you're using your
bar your foo (in the example) inside your

239
00:23:45,600 --> 00:23:50,610
code, then it'll be basically a pointer to
another pointer. The reason to have it so

240
00:23:50,610 --> 00:23:55,250
is that pointers can be allocated with a fixed
size. They are a fixed sized Memory Array,

241
00:23:55,250 --> 00:23:59,980
so it's easier to optimize them and you don't
have to guess what kind of Memory Size it

242
00:23:59,980 --> 00:24:02,214
will use later (after the compaction and resorting).

243
00:24:02,214 --> 00:24:09,370
The Lifetime is determined by the Handle Scope.
Those Handle Scope inside the Function context

244
00:24:09,370 --> 00:24:14,590
are destructed afterwards if the Function
call is over and they result in Garbage Collector

245
00:24:14,590 --> 00:24:16,190
trying to clear up everything.

246
00:24:16,190 --> 00:24:20,920
So, each time a Scope is closed, the Garbage
Collector runs over it and tries to determine

247
00:24:20,920 --> 00:24:25,460
the references there.

248
00:24:25,460 --> 00:24:29,640
Another algorithm to Mark and Sweep is Copying
Garbage Collection. It's something like a

249
00:24:29,640 --> 00:24:36,850
basic concept where you have two different
static sizes of Memory and you have the Pointers

250
00:24:36,850 --> 00:24:44,310
referencing to somewhere in your code. If
you are deleting a reference or creating a

251
00:24:44,310 --> 00:24:48,403
reference, it's just copying it vice versa.
So that means for the Memory A (in the example)

252
00:24:48,403 --> 00:24:52,760
it just uses everything it finds and uses
the first allocation in the other Memory.

253
00:24:52,760 --> 00:24:56,870
Second time it runs it uses everything in
the Memory B and it will go the same way over

254
00:24:56,870 --> 00:24:58,980
and over again.

255
00:24:58,980 --> 00:25:02,310
The advantage is that it's super fast and
easy to implement because you have only like

256
00:25:02,310 --> 00:25:07,440
ten lines of codes to implement it. But, it's
of course, bad, because you have so much to

257
00:25:07,440 --> 00:25:14,710
do and the amount of the references is getting
bigger and bigger.

258
00:25:14,710 --> 00:25:21,530
A Generational Garbage Collector, like in
V8 (or I guess in Monkey variants, too) is

259
00:25:21,530 --> 00:25:26,830
using both of those algorithms and try to
have a Lifetime determination algorithm trying

260
00:25:26,830 --> 00:25:33,900
to find out if your code can access other
Objects on previous states in the timeline

261
00:25:33,900 --> 00:25:36,020
and if they're still referenceble or not.

262
00:25:36,020 --> 00:25:40,270
If they are not referenceable, that means
they have a Younger age, because it's just

263
00:25:40,270 --> 00:25:44,980
like one second old and it can be cleared
afterwards. Older Objects are the ones that

264
00:25:44,980 --> 00:25:50,350
can be accessed any time, if you have something
like Objects on a Global Scope, you can guess

265
00:25:50,350 --> 00:25:56,950
that they are\halso referenceble ten seconds
afterwards. So that means Older Objects can

266
00:25:56,950 --> 00:26:01,810
be used and optimized by the Mark and Sweep
algorithm and Younger Objects are optimized

267
00:26:01,810 --> 00:26:05,130
by the Copying Garbage Collector algorithm.

268
00:26:05,130 --> 00:26:09,250
(*Yay* 30 seconds left)

269
00:26:09,250 --> 00:26:14,040
That's the end, basically that was the introduction
on how Garbage Collection works, I hope you

270
00:26:14,040 --> 00:26:15,040
enjoyed it.

271
00:26:15,040 --> 00:26:16,040
(Applause)

