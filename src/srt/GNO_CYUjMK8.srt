1
00:00:00,600 --> 00:00:18,600

[Music]

2
00:00:18,610 --> 00:00:21,170
so the title of this talk is making

3
00:00:21,170 --> 00:00:24,020
WebGL dance and that's because linear

4
00:00:24,020 --> 00:00:26,480
algebra isn't as sexy on a schedule but

5
00:00:26,480 --> 00:00:28,400
the talk isn't so much about WebGL

6
00:00:28,400 --> 00:00:30,079
directly as it is about graphics

7
00:00:30,079 --> 00:00:31,939
hardware and how it works because this

8
00:00:31,939 --> 00:00:34,340
could be making OpenGL dance or direct3d

9
00:00:34,340 --> 00:00:37,390
all these principles kind of apply and

10
00:00:37,390 --> 00:00:43,629
so my remote is not working just sick

11
00:00:43,629 --> 00:00:46,309
here we go so I'd like to talk about

12
00:00:46,309 --> 00:00:48,589
three things how to draw where to draw

13
00:00:48,589 --> 00:00:50,539
and what to draw which is sort of the

14
00:00:50,539 --> 00:00:52,430
the mental model of how you should think

15
00:00:52,430 --> 00:00:54,200
about what a graphics card does and

16
00:00:54,200 --> 00:00:56,449
where it comes from as opposed to doing

17
00:00:56,449 --> 00:01:00,110
sort of yet another WebGL 101 how to

18
00:01:00,110 --> 00:01:02,539
draw a cube and make it move because

19
00:01:02,539 --> 00:01:04,460
well that teaches you you know how to

20
00:01:04,460 --> 00:01:07,369
use WebGL and how to use the API it kind

21
00:01:07,369 --> 00:01:09,289
of ends up being a dead end because

22
00:01:09,289 --> 00:01:10,550
you're not quite sure what's going on

23
00:01:10,550 --> 00:01:13,310
and once you get into more advanced

24
00:01:13,310 --> 00:01:16,369
stuff if there's a bug or an issue you

25
00:01:16,369 --> 00:01:19,100
don't know what to do so the good news

26
00:01:19,100 --> 00:01:20,810
is however everything I'm going to be

27
00:01:20,810 --> 00:01:22,490
talking about is really stuff that you

28
00:01:22,490 --> 00:01:23,960
should understand but not necessarily

29
00:01:23,960 --> 00:01:25,610
know how to implement yourself because

30
00:01:25,610 --> 00:01:27,439
the graphics hardware does it for you

31
00:01:27,439 --> 00:01:29,270
it's convenient so even though there's

32
00:01:29,270 --> 00:01:31,520
gonna be a lot of techniques and all

33
00:01:31,520 --> 00:01:33,920
that you don't be worried about it

34
00:01:33,920 --> 00:01:35,990
because you just you know type the

35
00:01:35,990 --> 00:01:38,119
command or set the thing to true to get

36
00:01:38,119 --> 00:01:40,100
that effect going the bad news is

37
00:01:40,100 --> 00:01:42,740
there's going to be four dimensions and

38
00:01:42,740 --> 00:01:44,810
I'm not going to apologize about that

39
00:01:44,810 --> 00:01:48,680
because it's cool and the thing is you

40
00:01:48,680 --> 00:01:50,210
know this is mathematics but we

41
00:01:50,210 --> 00:01:51,290
shouldn't be afraid of it we should

42
00:01:51,290 --> 00:01:53,240
embrace it what this means in this case

43
00:01:53,240 --> 00:01:54,530
is this just a fourth number where

44
00:01:54,530 --> 00:01:55,970
before there used to be only three and

45
00:01:55,970 --> 00:01:58,880
it has some interesting consequences so

46
00:01:58,880 --> 00:02:01,579
let's get started in the beginning there

47
00:02:01,579 --> 00:02:05,299
was pixels and pixels were fun but no

48
00:02:05,299 --> 00:02:06,530
that's not true there was a vector

49
00:02:06,530 --> 00:02:08,479
graphics first but we'll forget about

50
00:02:08,479 --> 00:02:13,130
that pixels there was something called

51
00:02:13,130 --> 00:02:15,110
brezin hemlines and that was fun because

52
00:02:15,110 --> 00:02:16,670
using a simple for loop you could just

53
00:02:16,670 --> 00:02:20,570
color in pixels and draw lines and once

54
00:02:20,570 --> 00:02:21,980
we figured out how to do that we could

55
00:02:21,980 --> 00:02:23,870
even draw solid shapes using something

56
00:02:23,870 --> 00:02:25,850
like scanline rendering to draw a

57
00:02:25,850 --> 00:02:27,459
triangle like this

58
00:02:27,459 --> 00:02:29,120
unfortunately if you try to for example

59
00:02:29,120 --> 00:02:31,180
make a spinning triangle with the

60
00:02:31,180 --> 00:02:33,790
technique it doesn't so much rotate as

61
00:02:33,790 --> 00:02:36,579
tick why does it tick why does it look

62
00:02:36,579 --> 00:02:39,310
bad well it's because we're snapping to

63
00:02:39,310 --> 00:02:42,640
pixels everything we've done is we've

64
00:02:42,640 --> 00:02:44,379
defined our graphics operations in terms

65
00:02:44,379 --> 00:02:46,329
of the pixel grid which means we can

66
00:02:46,329 --> 00:02:48,930
only move the corners in this fashion

67
00:02:48,930 --> 00:02:51,879
how do we solve this well if you know a

68
00:02:51,879 --> 00:02:53,349
little bit about graphics you may be

69
00:02:53,349 --> 00:02:56,500
thinking of the word anti-aliasing no

70
00:02:56,500 --> 00:02:58,239
that's something else because look at

71
00:02:58,239 --> 00:02:59,950
this beautifully anti-aliased triangle

72
00:02:59,950 --> 00:03:03,459
that's still jerking around in an ugly

73
00:03:03,459 --> 00:03:05,709
fashion what we actually want is

74
00:03:05,709 --> 00:03:07,299
something called sub pixel accuracy

75
00:03:07,299 --> 00:03:09,579
which looks like this where even though

76
00:03:09,579 --> 00:03:11,170
you know it's alias there's only black

77
00:03:11,170 --> 00:03:12,909
and white and there's jaggies it's

78
00:03:12,909 --> 00:03:14,889
moving smoothly and I can put the

79
00:03:14,889 --> 00:03:18,819
corners of the shape anywhere I want how

80
00:03:18,819 --> 00:03:20,620
exactly does this work because it's not

81
00:03:20,620 --> 00:03:23,019
obvious anymore where exactly the the

82
00:03:23,019 --> 00:03:25,109
edges on the pixel grid start or end

83
00:03:25,109 --> 00:03:27,370
when the the pixel in the corner

84
00:03:27,370 --> 00:03:28,629
actually should be black when it's

85
00:03:28,629 --> 00:03:30,730
partially covered etc and the key is

86
00:03:30,730 --> 00:03:32,470
something called sampling or using

87
00:03:32,470 --> 00:03:34,750
samples where whether a pixel is black

88
00:03:34,750 --> 00:03:36,609
or white is actually just defined by one

89
00:03:36,609 --> 00:03:38,199
thing which is the point right in the

90
00:03:38,199 --> 00:03:40,449
middle so at that point is inside the

91
00:03:40,449 --> 00:03:43,030
triangle we color the pixel black

92
00:03:43,030 --> 00:03:46,030
otherwise we color it white and this

93
00:03:46,030 --> 00:03:47,590
might not seem like an important concept

94
00:03:47,590 --> 00:03:49,690
but it really is because it defines

95
00:03:49,690 --> 00:03:51,489
everything that follows and that's kind

96
00:03:51,489 --> 00:03:52,629
of why I'm talking about it first

97
00:03:52,629 --> 00:03:54,069
because what this means is there's

98
00:03:54,069 --> 00:03:56,650
really two worlds on the left hand you

99
00:03:56,650 --> 00:03:59,919
have the world of vectors where you know

100
00:03:59,919 --> 00:04:01,599
everything is mathematical and beautiful

101
00:04:01,599 --> 00:04:04,500
your shapes are mathematically defined

102
00:04:04,500 --> 00:04:08,470
and then you use sampling to transfer it

103
00:04:08,470 --> 00:04:10,540
over to the world on the right which is

104
00:04:10,540 --> 00:04:14,290
the raster world the world of pixels and

105
00:04:14,290 --> 00:04:15,760
you really have to think of this sort of

106
00:04:15,760 --> 00:04:18,459
as a final step and the reason is

107
00:04:18,459 --> 00:04:19,900
because when you actually look at this

108
00:04:19,900 --> 00:04:22,060
diagram on the left hand side those

109
00:04:22,060 --> 00:04:23,800
samples are in the middle of every pixel

110
00:04:23,800 --> 00:04:25,990
and that means the edges of the pixel

111
00:04:25,990 --> 00:04:28,120
grid don't actually exist in vector

112
00:04:28,120 --> 00:04:30,570
world there's sort of an artifact of the

113
00:04:30,570 --> 00:04:34,270
rasterization if you will and in fact we

114
00:04:34,270 --> 00:04:35,500
describe this as a nearest neighbor

115
00:04:35,500 --> 00:04:38,320
filter where you know the when we try to

116
00:04:38,320 --> 00:04:39,940
turn this grid of samples back into

117
00:04:39,940 --> 00:04:42,310
something continuous we just assign the

118
00:04:42,310 --> 00:04:43,470
color of the nearest

119
00:04:43,470 --> 00:04:45,570
people to that area and the fact that

120
00:04:45,570 --> 00:04:47,310
the pixels come out square is kind of

121
00:04:47,310 --> 00:04:51,890
just an artifact of that is not good of

122
00:04:51,890 --> 00:04:56,460
the where the samples are placed and and

123
00:04:56,460 --> 00:04:58,590
so this is ugly and pixelated a better

124
00:04:58,590 --> 00:05:00,210
ways for example to use a bilinear

125
00:05:00,210 --> 00:05:03,330
filter where you you add gradients

126
00:05:03,330 --> 00:05:06,120
between pixels to sort of even it out

127
00:05:06,120 --> 00:05:08,550
and what's important about this diagram

128
00:05:08,550 --> 00:05:10,260
is that the color information is not

129
00:05:10,260 --> 00:05:12,180
again on the only edges of the pixel

130
00:05:12,180 --> 00:05:14,760
grid it's in the middle and so the edges

131
00:05:14,760 --> 00:05:17,370
of the pixel are kind of a distraction

132
00:05:17,370 --> 00:05:21,540
data they don't factor in here so what

133
00:05:21,540 --> 00:05:22,890
actually is anti-aliasing and an

134
00:05:22,890 --> 00:05:23,640
aliasing

135
00:05:23,640 --> 00:05:27,330
for well it's this in this case I'm

136
00:05:27,330 --> 00:05:30,300
taking a texture of white and of gray

137
00:05:30,300 --> 00:05:32,910
and black and looking at in perspective

138
00:05:32,910 --> 00:05:35,340
and it's being sampled and you can see

139
00:05:35,340 --> 00:05:37,680
in the distance there's all this noise

140
00:05:37,680 --> 00:05:41,250
and blurring is going on and the reason

141
00:05:41,250 --> 00:05:42,690
that happens is because when you sample

142
00:05:42,690 --> 00:05:44,610
you can only pick one or the other

143
00:05:44,610 --> 00:05:46,800
either gray or black what it actually

144
00:05:46,800 --> 00:05:48,110
should look like is something like this

145
00:05:48,110 --> 00:05:50,669
where the further you go into the

146
00:05:50,669 --> 00:05:52,770
distance the the more blurred out and

147
00:05:52,770 --> 00:05:56,070
gray it gets because you know the

148
00:05:56,070 --> 00:05:57,660
projection of a single pixel on the

149
00:05:57,660 --> 00:06:01,410
screen now covers a wide area far far

150
00:06:01,410 --> 00:06:05,340
far in the distance look at a liasing a

151
00:06:05,340 --> 00:06:07,560
bit closer has to do with something

152
00:06:07,560 --> 00:06:08,940
called a sampling theorem and the

153
00:06:08,940 --> 00:06:10,890
Nyquist frequency where if you take this

154
00:06:10,890 --> 00:06:13,890
pattern of bars and you can press it you

155
00:06:13,890 --> 00:06:15,479
get to this point where it goes white

156
00:06:15,479 --> 00:06:16,700
black white black white black

157
00:06:16,700 --> 00:06:19,200
alternating and you try to compress it

158
00:06:19,200 --> 00:06:21,510
further it starts to get messed up in

159
00:06:21,510 --> 00:06:23,970
fact it folds in on itself and does

160
00:06:23,970 --> 00:06:26,550
something weird running that backwards

161
00:06:26,550 --> 00:06:29,100
you can see you approach the Nyquist

162
00:06:29,100 --> 00:06:31,260
frequency white black white white black

163
00:06:31,260 --> 00:06:33,690
and then it expands smoothly again so

164
00:06:33,690 --> 00:06:35,460
what that means is you can't compress

165
00:06:35,460 --> 00:06:38,100
any more variation onto the pixel grid

166
00:06:38,100 --> 00:06:41,160
then that particular frequency because

167
00:06:41,160 --> 00:06:44,220
there's no room for it and so the fact

168
00:06:44,220 --> 00:06:45,900
that you get jaggies when you're trying

169
00:06:45,900 --> 00:06:49,710
to draw shapes is really an artifact of

170
00:06:49,710 --> 00:06:52,200
aliasing and instead of thinking again

171
00:06:52,200 --> 00:06:53,849
of the pixel edges you need to look at

172
00:06:53,849 --> 00:06:56,220
the slopes here because because of the

173
00:06:56,220 --> 00:06:57,150
pixel grid there

174
00:06:57,150 --> 00:06:59,160
maximum slope between white and black

175
00:06:59,160 --> 00:07:01,650
that we can we can represent with this

176
00:07:01,650 --> 00:07:03,690
information and that's really where the

177
00:07:03,690 --> 00:07:06,150
problem lies it has very little to do

178
00:07:06,150 --> 00:07:06,360
with

179
00:07:06,360 --> 00:07:08,640
jaggies which is what most people think

180
00:07:08,640 --> 00:07:11,100
of when they talk about anti-aliasing so

181
00:07:11,100 --> 00:07:13,530
what is anti-aliasing isn't blurring all

182
00:07:13,530 --> 00:07:16,650
the things sort of it's blurring it in a

183
00:07:16,650 --> 00:07:18,570
specific way what you're actually doing

184
00:07:18,570 --> 00:07:20,400
is you're determining how much of your

185
00:07:20,400 --> 00:07:23,280
shape covers every pixel and then

186
00:07:23,280 --> 00:07:25,290
shading the the pixel proportionately

187
00:07:25,290 --> 00:07:27,960
and so you can do that mathematically

188
00:07:27,960 --> 00:07:29,460
using the rules of geometry to get an

189
00:07:29,460 --> 00:07:31,860
exact result but that's kind of annoying

190
00:07:31,860 --> 00:07:33,450
especially when you have you know not

191
00:07:33,450 --> 00:07:35,100
one triangle but let's say a million

192
00:07:35,100 --> 00:07:37,230
which is not all that uncommon these

193
00:07:37,230 --> 00:07:39,630
days so we use something else called

194
00:07:39,630 --> 00:07:41,670
super sampling where you put lots of

195
00:07:41,670 --> 00:07:44,340
samples inside the pixels and then you

196
00:07:44,340 --> 00:07:46,560
get you know in this case 16 shades gray

197
00:07:46,560 --> 00:07:48,870
possible per pixel and that sort of

198
00:07:48,870 --> 00:07:50,610
looks okay unfortunately now you're

199
00:07:50,610 --> 00:07:52,140
doing 16 times more work so they

200
00:07:52,140 --> 00:07:54,060
invented something called multi sampling

201
00:07:54,060 --> 00:07:56,940
where you only apply the the dense

202
00:07:56,940 --> 00:07:58,710
sampling on the pixels that need it and

203
00:07:58,710 --> 00:08:02,280
it looks like this now you you'll notice

204
00:08:02,280 --> 00:08:03,540
in the middle of the shape you know

205
00:08:03,540 --> 00:08:05,370
we're doing traditional sampling which

206
00:08:05,370 --> 00:08:07,260
means there's no anti-aliasing there

207
00:08:07,260 --> 00:08:08,610
which means it'll is going to look ugly

208
00:08:08,610 --> 00:08:11,400
and then distorted like before so for

209
00:08:11,400 --> 00:08:14,190
that we use other things like the

210
00:08:14,190 --> 00:08:15,780
anisotropic filtering that I showed

211
00:08:15,780 --> 00:08:18,690
before and the what you end up

212
00:08:18,690 --> 00:08:20,580
approximating and sampling is something

213
00:08:20,580 --> 00:08:25,080
more like this where this looks more

214
00:08:25,080 --> 00:08:28,440
like a spinning triangle and then the

215
00:08:28,440 --> 00:08:30,360
jagged one before which just skipped

216
00:08:30,360 --> 00:08:33,600
around now if you try to think of this

217
00:08:33,600 --> 00:08:35,760
in the the pure vector world without

218
00:08:35,760 --> 00:08:38,130
sampling this is going to look something

219
00:08:38,130 --> 00:08:40,530
like this which is a triangle that's

220
00:08:40,530 --> 00:08:43,260
rotating smoothly surrounded by one

221
00:08:43,260 --> 00:08:45,960
pixel white gradient and you can see

222
00:08:45,960 --> 00:08:47,100
that because of the sampling this is

223
00:08:47,100 --> 00:08:48,840
where the sort of shades of grey

224
00:08:48,840 --> 00:08:51,390
Stairsteps comes from as these gradient

225
00:08:51,390 --> 00:08:53,430
transitions underneath the the sampling

226
00:08:53,430 --> 00:08:56,100
grid and whenever you have any sort of

227
00:08:56,100 --> 00:08:57,810
filtering technique whether it's a

228
00:08:57,810 --> 00:08:59,790
Gaussian blur or mipmapping or an

229
00:08:59,790 --> 00:09:01,680
anisotropic filter you're basically just

230
00:09:01,680 --> 00:09:03,180
blurring your information before

231
00:09:03,180 --> 00:09:05,340
sampling it to make sure that the slope

232
00:09:05,340 --> 00:09:08,100
of your color information does not

233
00:09:08,100 --> 00:09:10,460
exceed the limit that you

234
00:09:10,460 --> 00:09:16,160
represent now just for completeness I

235
00:09:16,160 --> 00:09:18,550
mentioned this WebKit font smoothing

236
00:09:18,550 --> 00:09:20,870
which is you know a lot of people have

237
00:09:20,870 --> 00:09:23,840
issues with this and turn it off because

238
00:09:23,840 --> 00:09:25,490
Apple kind of did something stupid and

239
00:09:25,490 --> 00:09:27,380
uses different filter that makes a font

240
00:09:27,380 --> 00:09:29,720
look darker but it's just you know it's

241
00:09:29,720 --> 00:09:31,610
sampling on a sub pixel grid doing red

242
00:09:31,610 --> 00:09:35,270
green blue separately and the thing is

243
00:09:35,270 --> 00:09:38,120
pixels are really dying or are dead but

244
00:09:38,120 --> 00:09:39,980
they've been reborn because pixels are

245
00:09:39,980 --> 00:09:42,860
dead as a design unit because everything

246
00:09:42,860 --> 00:09:45,110
is scalable now and even though I'm

247
00:09:45,110 --> 00:09:46,550
supposed to be supposed to be talking

248
00:09:46,550 --> 00:09:47,180
about WebGL

249
00:09:47,180 --> 00:09:49,340
all of this also really applies to CSS

250
00:09:49,340 --> 00:09:52,550
now because your iPhone your your

251
00:09:52,550 --> 00:09:56,480
zoomable browser is a GL scene and is

252
00:09:56,480 --> 00:09:59,240
defined in vector world not in raster

253
00:09:59,240 --> 00:10:04,760
world and not just pixels but any sort

254
00:10:04,760 --> 00:10:06,590
of information in geometry for example

255
00:10:06,590 --> 00:10:08,540
this height map which I'm generating

256
00:10:08,540 --> 00:10:10,190
procedurally and that's that's a

257
00:10:10,190 --> 00:10:14,980
different talk is defined on a grid and

258
00:10:14,980 --> 00:10:17,180
you know you have to think of this as

259
00:10:17,180 --> 00:10:18,890
sampled information that you're

260
00:10:18,890 --> 00:10:21,230
processing now you can see here I'm

261
00:10:21,230 --> 00:10:23,030
tuning the knobs on this generator to

262
00:10:23,030 --> 00:10:25,550
make it oscillate in an interesting way

263
00:10:25,550 --> 00:10:27,380
and you can see that I've added water

264
00:10:27,380 --> 00:10:30,560
and you may be wondering how does it

265
00:10:30,560 --> 00:10:32,660
know which part should be blue which

266
00:10:32,660 --> 00:10:34,430
parts should be green is it for example

267
00:10:34,430 --> 00:10:36,830
taking the surface that I've defined and

268
00:10:36,830 --> 00:10:39,620
and cutting out the parts that are

269
00:10:39,620 --> 00:10:41,960
underwater is it doing something else

270
00:10:41,960 --> 00:10:43,910
well it's actually quite simple and it

271
00:10:43,910 --> 00:10:46,610
turns out that samples are both the

272
00:10:46,610 --> 00:10:48,260
curse and that's and the blessing the

273
00:10:48,260 --> 00:10:50,270
problem and the solution because we use

274
00:10:50,270 --> 00:10:52,700
something like that your sample isn't

275
00:10:52,700 --> 00:10:55,280
just color it can have additional

276
00:10:55,280 --> 00:10:57,410
information associated with it for

277
00:10:57,410 --> 00:10:59,360
example depth we use something called a

278
00:10:59,360 --> 00:11:02,450
Zed buffer where for every pixel in your

279
00:11:02,450 --> 00:11:04,580
image you just record the depth as a

280
00:11:04,580 --> 00:11:06,350
number in this case represented as a

281
00:11:06,350 --> 00:11:09,080
shade of gray and whenever you draw

282
00:11:09,080 --> 00:11:11,660
anything you update your depth map along

283
00:11:11,660 --> 00:11:14,060
with it so that you know is the thing

284
00:11:14,060 --> 00:11:16,730
that I'm drawing closer or further away

285
00:11:16,730 --> 00:11:18,800
than what's already there and so you can

286
00:11:18,800 --> 00:11:21,440
do per pixel cutting out of shapes that

287
00:11:21,440 --> 00:11:23,820
intersect without actually knowing

288
00:11:23,820 --> 00:11:25,740
anything about the geometry involved

289
00:11:25,740 --> 00:11:28,680
it's it's a sort of very dumb but very

290
00:11:28,680 --> 00:11:30,270
effective way of doing it and that turns

291
00:11:30,270 --> 00:11:32,190
out to be what GPUs are great out

292
00:11:32,190 --> 00:11:33,600
because this is massively parallel

293
00:11:33,600 --> 00:11:34,200
izybelle

294
00:11:34,200 --> 00:11:36,840
and aside from depth for example you

295
00:11:36,840 --> 00:11:39,600
might also record orientation in the

296
00:11:39,600 --> 00:11:41,460
form of normal which is a vector I'll go

297
00:11:41,460 --> 00:11:43,320
into that more later for example for

298
00:11:43,320 --> 00:11:45,240
something called deferred lighting where

299
00:11:45,240 --> 00:11:47,340
you you generate an image like this and

300
00:11:47,340 --> 00:11:50,100
then you paint the light in afterwards

301
00:11:50,100 --> 00:11:52,830
using only this information so you stop

302
00:11:52,830 --> 00:11:55,620
knowing what is outside the frame of the

303
00:11:55,620 --> 00:11:57,630
picture you don't even know what it

304
00:11:57,630 --> 00:11:58,950
represents all you know is that you have

305
00:11:58,950 --> 00:12:00,810
a grid of samples with depth and normal

306
00:12:00,810 --> 00:12:03,480
and color that you then used to do

307
00:12:03,480 --> 00:12:07,980
lighting with so next step is the part

308
00:12:07,980 --> 00:12:11,100
where you learn linear algebra and that

309
00:12:11,100 --> 00:12:14,130
might you know send heart rates spiking

310
00:12:14,130 --> 00:12:19,050
a little bit but don't worry because

311
00:12:19,050 --> 00:12:20,660
we're going to do fun stuff with images

312
00:12:20,660 --> 00:12:23,310
let's start with something called the

313
00:12:23,310 --> 00:12:24,900
affine transforms which you would know

314
00:12:24,900 --> 00:12:27,090
as the transform tool from Photoshop or

315
00:12:27,090 --> 00:12:30,770
illustrator and those transforms include

316
00:12:30,770 --> 00:12:34,470
rotation scaling and skewing and they

317
00:12:34,470 --> 00:12:36,390
have something in common what they have

318
00:12:36,390 --> 00:12:37,680
in common is that they all preserve

319
00:12:37,680 --> 00:12:39,900
parallel lines no matter how you combine

320
00:12:39,900 --> 00:12:42,000
them and that's a very useful property

321
00:12:42,000 --> 00:12:43,410
because it means you can describe the

322
00:12:43,410 --> 00:12:45,600
entire transform just by saying what it

323
00:12:45,600 --> 00:12:49,230
does to the grid so you have you can

324
00:12:49,230 --> 00:12:50,550
describe the grid using something called

325
00:12:50,550 --> 00:12:53,370
a vector basis which is just your X unit

326
00:12:53,370 --> 00:12:56,280
and Y unit represented as an arrow in

327
00:12:56,280 --> 00:12:58,830
this case and because vectors are arrows

328
00:12:58,830 --> 00:13:01,620
we can sort of do math with them and

329
00:13:01,620 --> 00:13:03,510
that's that's essentially linear algebra

330
00:13:03,510 --> 00:13:06,240
but let's forget about the numbers for a

331
00:13:06,240 --> 00:13:09,350
second and just do it on paper and

332
00:13:09,350 --> 00:13:12,780
suppose for example that I define a new

333
00:13:12,780 --> 00:13:16,140
vector basis and I give you two

334
00:13:16,140 --> 00:13:18,060
arbitrary arrows and I say tell me what

335
00:13:18,060 --> 00:13:19,860
the smiley face looks like after it's

336
00:13:19,860 --> 00:13:21,750
been transformed or let's start with

337
00:13:21,750 --> 00:13:24,300
just that one point in purple see what

338
00:13:24,300 --> 00:13:26,570
it looks like or where it should be and

339
00:13:26,570 --> 00:13:29,430
that's easy because you decompose it

340
00:13:29,430 --> 00:13:32,070
into its X and Y coordinates and then

341
00:13:32,070 --> 00:13:33,930
you reassemble it on the other side

342
00:13:33,930 --> 00:13:36,529
using the new grid and

343
00:13:36,529 --> 00:13:38,389
because vectors are arrows you can also

344
00:13:38,389 --> 00:13:39,949
scale them not just add them together

345
00:13:39,949 --> 00:13:42,289
and that means that using this procedure

346
00:13:42,289 --> 00:13:43,819
of disassembling and reassembling you

347
00:13:43,819 --> 00:13:46,159
can find out where any point is after

348
00:13:46,159 --> 00:13:49,489
it's been transformed just by using your

349
00:13:49,489 --> 00:13:54,079
vector basis and if you get this then

350
00:13:54,079 --> 00:13:56,539
congratulations you get matrices because

351
00:13:56,539 --> 00:13:58,249
these mysterious grids of numbers that

352
00:13:58,249 --> 00:13:59,869
they threw at you in school and that

353
00:13:59,869 --> 00:14:01,489
they never really wanted to explain are

354
00:14:01,489 --> 00:14:03,829
really simple they're the coordinates of

355
00:14:03,829 --> 00:14:06,139
the blue and the green dot that just

356
00:14:06,139 --> 00:14:08,059
describe where the grid has moved to

357
00:14:08,059 --> 00:14:11,299
when you're done transforming and so the

358
00:14:11,299 --> 00:14:12,769
column on the left is just the x

359
00:14:12,769 --> 00:14:14,299
coordinate y coordinate of the blue

360
00:14:14,299 --> 00:14:17,329
points the right the green numbers are

361
00:14:17,329 --> 00:14:20,199
the X&Y coordinate of the Green Point

362
00:14:20,199 --> 00:14:22,399
the reason you put them in a matrix is

363
00:14:22,399 --> 00:14:24,049
because that allows you to do the

364
00:14:24,049 --> 00:14:26,329
computations effectively in this case

365
00:14:26,329 --> 00:14:27,739
something called the matrix vector

366
00:14:27,739 --> 00:14:29,479
multiplication which is just

367
00:14:29,479 --> 00:14:32,149
transforming a point to conform to a new

368
00:14:32,149 --> 00:14:34,459
grid and it looks like this when you

369
00:14:34,459 --> 00:14:38,539
write it out and so again you do this

370
00:14:38,539 --> 00:14:40,219
procedure of disassembling this case

371
00:14:40,219 --> 00:14:42,229
literally cleaving your matrix into two

372
00:14:42,229 --> 00:14:44,389
and multiplying it by the two

373
00:14:44,389 --> 00:14:45,499
coordinates of the point that you're

374
00:14:45,499 --> 00:14:47,929
interested in in this case transforming

375
00:14:47,929 --> 00:14:50,470
the red point into the purple point

376
00:14:50,470 --> 00:14:56,229
transforming a circle into an oval and

377
00:14:56,229 --> 00:14:58,999
then if we want to for example apply

378
00:14:58,999 --> 00:15:00,439
another transformation let's say a

379
00:15:00,439 --> 00:15:03,199
rotation we find that our vector basis

380
00:15:03,199 --> 00:15:05,299
has just moved to a new location which

381
00:15:05,299 --> 00:15:08,209
means there's just a new matrix and this

382
00:15:08,209 --> 00:15:10,189
is where where matrix math gets really

383
00:15:10,189 --> 00:15:12,289
interesting because if you do the naive

384
00:15:12,289 --> 00:15:14,299
solution to this problem you apply two

385
00:15:14,299 --> 00:15:18,619
transforms as in the bottom and you know

386
00:15:18,619 --> 00:15:20,539
for every transformation that you pile

387
00:15:20,539 --> 00:15:21,739
on you have to do another matrix

388
00:15:21,739 --> 00:15:23,899
multiplication but because of the

389
00:15:23,899 --> 00:15:26,029
properties you can condense them all

390
00:15:26,029 --> 00:15:29,509
together and end up just optimizing in a

391
00:15:29,509 --> 00:15:31,999
way into a single transform and that's

392
00:15:31,999 --> 00:15:33,649
sort of the secret as the Y computer

393
00:15:33,649 --> 00:15:36,079
graphics can be fast because you can

394
00:15:36,079 --> 00:15:37,999
condense the relationship and the

395
00:15:37,999 --> 00:15:40,359
placement of objects into just a single

396
00:15:40,359 --> 00:15:42,769
mathematical object of a constant size

397
00:15:42,769 --> 00:15:47,329
namely a matrix and this works in 2d but

398
00:15:47,329 --> 00:15:50,360
it also works in 3d so a 3d image

399
00:15:50,360 --> 00:15:53,319
is just a set of three vectors this case

400
00:15:53,319 --> 00:15:56,119
red green blue that define an

401
00:15:56,119 --> 00:15:59,779
orientation in space and in the matrix

402
00:15:59,779 --> 00:16:01,189
you end up with three columns of three

403
00:16:01,189 --> 00:16:04,339
coordinates and again you do a matrix

404
00:16:04,339 --> 00:16:07,100
multiplication to transform in this case

405
00:16:07,100 --> 00:16:09,470
the flat smiley face into a one that's

406
00:16:09,470 --> 00:16:14,389
positioned in 3d and it also works in

407
00:16:14,389 --> 00:16:17,179
four dimensions and that can be a little

408
00:16:17,179 --> 00:16:18,129
weird

409
00:16:18,129 --> 00:16:21,410
now why on earth would you do this

410
00:16:21,410 --> 00:16:23,989
what's the point is what is the fourth

411
00:16:23,989 --> 00:16:27,079
dimension well the key is actually in

412
00:16:27,079 --> 00:16:29,660
the image which is four dimensions

413
00:16:29,660 --> 00:16:32,179
projected back into 3d where suddenly

414
00:16:32,179 --> 00:16:34,040
parallel lines are no longer parallel

415
00:16:34,040 --> 00:16:36,049
which is interesting because that's what

416
00:16:36,049 --> 00:16:37,790
perspective does and when you're

417
00:16:37,790 --> 00:16:39,379
rendering in 3d often you want

418
00:16:39,379 --> 00:16:40,699
perspective you want it to look natural

419
00:16:40,699 --> 00:16:44,449
and that is why we use four dimensions

420
00:16:44,449 --> 00:16:46,639
and I can't really show you four

421
00:16:46,639 --> 00:16:48,949
dimensional math because picturing that

422
00:16:48,949 --> 00:16:51,679
is kind of kooky but I'll show you how

423
00:16:51,679 --> 00:16:53,509
it works for two-dimensional images

424
00:16:53,509 --> 00:16:56,540
where you apply the third dimension to

425
00:16:56,540 --> 00:16:59,959
do the same kind of trick so the reason

426
00:16:59,959 --> 00:17:01,699
we use four dimensional matrix is to do

427
00:17:01,699 --> 00:17:04,309
3d math is the same reason we use three

428
00:17:04,309 --> 00:17:06,679
dimensional matrices to do 2d math and

429
00:17:06,679 --> 00:17:08,779
it works like this you have ordinary

430
00:17:08,779 --> 00:17:12,439
2-dimensional space a grid and that you

431
00:17:12,439 --> 00:17:14,329
end up sort of doing a bat-signal thing

432
00:17:14,329 --> 00:17:16,880
where you project it at word like this

433
00:17:16,880 --> 00:17:21,019
and you apply so this is this is space

434
00:17:21,019 --> 00:17:23,240
this is 3d and yet we call it

435
00:17:23,240 --> 00:17:25,159
two-dimensional space why well because

436
00:17:25,159 --> 00:17:27,380
the image that we're projecting is

437
00:17:27,380 --> 00:17:28,820
two-dimensional and just like you know a

438
00:17:28,820 --> 00:17:31,610
bat-signal projected onto a cloud the

439
00:17:31,610 --> 00:17:33,710
delight along any particular Ray is

440
00:17:33,710 --> 00:17:35,779
constant which means you only have two

441
00:17:35,779 --> 00:17:38,899
degrees of freedom instead of three why

442
00:17:38,899 --> 00:17:40,909
do we do this bill because what happens

443
00:17:40,909 --> 00:17:43,519
when you start changing the vector basis

444
00:17:43,519 --> 00:17:46,399
and in doing so we've gained a couple

445
00:17:46,399 --> 00:17:47,870
new things for one we've gained a whole

446
00:17:47,870 --> 00:17:50,899
new Zed vector the red one which which

447
00:17:50,899 --> 00:17:52,490
didn't exist before we just made that up

448
00:17:52,490 --> 00:17:54,889
and that's the interesting one because

449
00:17:54,889 --> 00:17:57,230
if you move that one you aim the

450
00:17:57,230 --> 00:18:00,770
bat-signal just like that and that means

451
00:18:00,770 --> 00:18:02,630
that all of a sudden instead of just

452
00:18:02,630 --> 00:18:03,870
being able to change

453
00:18:03,870 --> 00:18:06,720
shapes in place we can move them around

454
00:18:06,720 --> 00:18:09,270
as well which is something that affine

455
00:18:09,270 --> 00:18:12,330
transforms couldn't do on their own so

456
00:18:12,330 --> 00:18:13,950
you get translation and scaling effects

457
00:18:13,950 --> 00:18:15,960
where if you pull out the the red vector

458
00:18:15,960 --> 00:18:18,450
or push it in sort of changing its

459
00:18:18,450 --> 00:18:20,730
length you end up tightening the beam or

460
00:18:20,730 --> 00:18:25,590
expanding the beam and we have something

461
00:18:25,590 --> 00:18:27,299
else which is that our x and y vectors

462
00:18:27,299 --> 00:18:30,419
now also have a Z coordinate which until

463
00:18:30,419 --> 00:18:32,640
now has just been zero and they control

464
00:18:32,640 --> 00:18:35,039
the alignment of the the image because

465
00:18:35,039 --> 00:18:38,070
if I change those for example tilting

466
00:18:38,070 --> 00:18:40,020
them all the way back you see that you

467
00:18:40,020 --> 00:18:42,059
tilt the image so that part of it is now

468
00:18:42,059 --> 00:18:44,730
closer to the projection point part of

469
00:18:44,730 --> 00:18:46,679
it is further away which ends up being

470
00:18:46,679 --> 00:18:48,929
what perspective does so if you project

471
00:18:48,929 --> 00:18:51,809
this back down to two dimensions now

472
00:18:51,809 --> 00:18:53,789
your parallel lines are no longer

473
00:18:53,789 --> 00:18:57,090
parallel and you you've done perspective

474
00:18:57,090 --> 00:18:59,880
transforms and then that has an

475
00:18:59,880 --> 00:19:02,789
interesting implication because it means

476
00:19:02,789 --> 00:19:05,130
that if I'm drawing something like this

477
00:19:05,130 --> 00:19:08,429
a cube in 3d space I can position and

478
00:19:08,429 --> 00:19:11,370
move and orient it using a single four

479
00:19:11,370 --> 00:19:14,610
four dimensional matrix and it has a

480
00:19:14,610 --> 00:19:16,260
structure where in the upper left

481
00:19:16,260 --> 00:19:18,090
portion there's a three by three normal

482
00:19:18,090 --> 00:19:19,620
matrix that can turn that controls

483
00:19:19,620 --> 00:19:22,590
rotation scaling skewing there's one for

484
00:19:22,590 --> 00:19:24,779
translation which is you know shining

485
00:19:24,779 --> 00:19:27,179
the the beam differently in four

486
00:19:27,179 --> 00:19:30,090
dimensional space and then there's a Z

487
00:19:30,090 --> 00:19:32,580
sorry in this case the W coordinates the

488
00:19:32,580 --> 00:19:36,659
fourth coordinate d HL which controls

489
00:19:36,659 --> 00:19:38,669
perspective and creates you know

490
00:19:38,669 --> 00:19:40,950
narrowing lines effects and vanishing

491
00:19:40,950 --> 00:19:45,330
points and that sort of thing and like I

492
00:19:45,330 --> 00:19:48,270
said matrices can be condensed you know

493
00:19:48,270 --> 00:19:50,580
applying five matrices in a row you can

494
00:19:50,580 --> 00:19:52,620
express that as just one single combined

495
00:19:52,620 --> 00:19:55,169
matrix which is very handy and that

496
00:19:55,169 --> 00:19:56,549
means that the mathematical relationship

497
00:19:56,549 --> 00:19:59,010
between that little black cube on the

498
00:19:59,010 --> 00:20:02,909
screen and you know as its defined in 3d

499
00:20:02,909 --> 00:20:05,669
space and the actual location on the

500
00:20:05,669 --> 00:20:08,309
screen as its projected is defined by a

501
00:20:08,309 --> 00:20:10,230
single matrix and and I can show you how

502
00:20:10,230 --> 00:20:13,169
that works we start in object space

503
00:20:13,169 --> 00:20:16,200
which is what you're looking at the cube

504
00:20:16,200 --> 00:20:17,080
on its own

505
00:20:17,080 --> 00:20:20,320
defined with its the the origin sort of

506
00:20:20,320 --> 00:20:21,999
at its center of mass or if it's a

507
00:20:21,999 --> 00:20:23,799
character usually you put it under their

508
00:20:23,799 --> 00:20:25,869
feet it's just somewhere in the middle

509
00:20:25,869 --> 00:20:28,119
so you have a point of reference you

510
00:20:28,119 --> 00:20:30,580
transform object space into world space

511
00:20:30,580 --> 00:20:34,149
by placing objects in with the matrix

512
00:20:34,149 --> 00:20:36,249
matrix you can scale them rotate them

513
00:20:36,249 --> 00:20:38,950
move them around etc and world space is

514
00:20:38,950 --> 00:20:40,179
where everything else lives so in this

515
00:20:40,179 --> 00:20:42,279
case I added a camera and I added a

516
00:20:42,279 --> 00:20:44,169
ground plane so it has something to sit

517
00:20:44,169 --> 00:20:47,230
on and world spaces again defined

518
00:20:47,230 --> 00:20:50,769
relative to some reference point which

519
00:20:50,769 --> 00:20:52,869
is the the frame that you're doing all

520
00:20:52,869 --> 00:20:55,559
your your placement and simulation in

521
00:20:55,559 --> 00:20:57,249
then we have another matrix

522
00:20:57,249 --> 00:20:58,690
transformation that takes you to view

523
00:20:58,690 --> 00:21:01,539
space which is a coordinate systems

524
00:21:01,539 --> 00:21:04,330
centered on your camera in this case Zed

525
00:21:04,330 --> 00:21:06,700
points forward but that's a convention

526
00:21:06,700 --> 00:21:08,320
and you have to be careful which way

527
00:21:08,320 --> 00:21:09,940
your axes points when you're doing these

528
00:21:09,940 --> 00:21:13,769
things and finally from view space we go

529
00:21:13,769 --> 00:21:17,440
into screen space which is simply pixels

530
00:21:17,440 --> 00:21:23,529
and pixel units and so because we're

531
00:21:23,529 --> 00:21:26,019
doing matrix transformations this entire

532
00:21:26,019 --> 00:21:29,499
chain is ends up being implemented or

533
00:21:29,499 --> 00:21:31,029
represented as a single transformation

534
00:21:31,029 --> 00:21:34,600
and you can go backwards as well but

535
00:21:34,600 --> 00:21:39,789
that's a little bit trickier finally I

536
00:21:39,789 --> 00:21:42,249
just want to talk about shaders which is

537
00:21:42,249 --> 00:21:43,600
how these things are actually

538
00:21:43,600 --> 00:21:48,460
implemented on a graphics card say for

539
00:21:48,460 --> 00:21:50,619
example you have a 3d model which in

540
00:21:50,619 --> 00:21:53,769
this case is defined as vertices points

541
00:21:53,769 --> 00:21:56,529
in space and triangles that span those

542
00:21:56,529 --> 00:21:58,749
points so in terms of data structure

543
00:21:58,749 --> 00:22:00,460
you're looking at a list of vectors

544
00:22:00,460 --> 00:22:02,590
which define points and then a set of

545
00:22:02,590 --> 00:22:04,570
indices saying you know triangle 1 goes

546
00:22:04,570 --> 00:22:07,239
from 1 2 to 3 triangle 2 goes from 2 to

547
00:22:07,239 --> 00:22:10,179
3 to 4 etc and that makes up this whole

548
00:22:10,179 --> 00:22:13,509
object in object space and then we have

549
00:22:13,509 --> 00:22:15,399
a program called a vertex shader that

550
00:22:15,399 --> 00:22:17,980
just takes one vertex as an input and

551
00:22:17,980 --> 00:22:21,940
outputs another vertex as output and you

552
00:22:21,940 --> 00:22:23,619
can see that it's those are four

553
00:22:23,619 --> 00:22:25,149
dimensional vectors that are coming out

554
00:22:25,149 --> 00:22:26,859
and that that's because we're dealing

555
00:22:26,859 --> 00:22:29,740
with the four dimensional sorry 3d

556
00:22:29,740 --> 00:22:30,730
projective space

557
00:22:30,730 --> 00:22:34,809
which has four coordinates and so this

558
00:22:34,809 --> 00:22:36,370
transforms something called clip space

559
00:22:36,370 --> 00:22:38,020
which I mentioned for completeness you

560
00:22:38,020 --> 00:22:39,460
can just think of this as screen space

561
00:22:39,460 --> 00:22:40,960
there's there's a sort of a difference

562
00:22:40,960 --> 00:22:43,929
but it's not very interesting and then

563
00:22:43,929 --> 00:22:45,130
the second part is we take these

564
00:22:45,130 --> 00:22:47,530
coordinates into clip space which is you

565
00:22:47,530 --> 00:22:48,730
know where is the thing on the screen

566
00:22:48,730 --> 00:22:51,130
and then we turn it into samples and

567
00:22:51,130 --> 00:22:53,650
then every one of those samples we apply

568
00:22:53,650 --> 00:22:55,480
another program to which is the fragment

569
00:22:55,480 --> 00:22:58,120
shader and that determines the color of

570
00:22:58,120 --> 00:23:00,400
every pixel so on the left you see that

571
00:23:00,400 --> 00:23:03,010
the light is changing the position of

572
00:23:03,010 --> 00:23:07,570
the vertices isn't changing so only the

573
00:23:07,570 --> 00:23:09,160
parameters of the fragment shader are

574
00:23:09,160 --> 00:23:10,809
being tuned here not the vertex shader

575
00:23:10,809 --> 00:23:13,179
the vertex shader is just constant at

576
00:23:13,179 --> 00:23:17,020
this point so what does this look like

577
00:23:17,020 --> 00:23:19,120
this is defining a language called GLSL

578
00:23:19,120 --> 00:23:23,320
GL shading language and it's a very

579
00:23:23,320 --> 00:23:25,150
simple program you can see that the main

580
00:23:25,150 --> 00:23:26,919
function consists of one line in this

581
00:23:26,919 --> 00:23:30,100
case which simply applies three separate

582
00:23:30,100 --> 00:23:33,309
matrices to the position after taking

583
00:23:33,309 --> 00:23:34,960
the the position and making it four

584
00:23:34,960 --> 00:23:38,020
dimensional and there's this complicated

585
00:23:38,020 --> 00:23:39,850
terminology here but it's really not

586
00:23:39,850 --> 00:23:40,360
that hard

587
00:23:40,360 --> 00:23:42,730
for example uniforms are just global

588
00:23:42,730 --> 00:23:44,290
variables for example if you're trying

589
00:23:44,290 --> 00:23:46,559
to draw an object and the object is red

590
00:23:46,559 --> 00:23:49,390
that the fact that it's red is constant

591
00:23:49,390 --> 00:23:51,750
everywhere so that's a uniform property

592
00:23:51,750 --> 00:23:55,330
that you you set and then per vertex we

593
00:23:55,330 --> 00:23:56,799
have something called attributes which

594
00:23:56,799 --> 00:23:58,660
is the specific position of every point

595
00:23:58,660 --> 00:24:03,370
and the at the end we set GL position

596
00:24:03,370 --> 00:24:06,910
which is a standard variable - that

597
00:24:06,910 --> 00:24:08,020
determines where on the screen you're

598
00:24:08,020 --> 00:24:10,660
rendering and so this is this is like

599
00:24:10,660 --> 00:24:13,809
your vanilla g GL pipeline but the point

600
00:24:13,809 --> 00:24:16,330
is that this is just one possible way of

601
00:24:16,330 --> 00:24:17,740
doing it you can do tons of things in

602
00:24:17,740 --> 00:24:20,460
vertex shaders and and that's why

603
00:24:20,460 --> 00:24:22,540
shaders have been sort of the main

604
00:24:22,540 --> 00:24:24,850
driving force behind what's been going

605
00:24:24,850 --> 00:24:29,020
on in games and in just offline 3d

606
00:24:29,020 --> 00:24:32,650
rendering as well transforming shapes on

607
00:24:32,650 --> 00:24:34,210
the fly on a sort of point by point

608
00:24:34,210 --> 00:24:36,340
basis is a very powerful approach

609
00:24:36,340 --> 00:24:38,290
because you can do it in parallel very

610
00:24:38,290 --> 00:24:41,200
efficiently and then a fragment shader

611
00:24:41,200 --> 00:24:43,450
looks like this for example again we

612
00:24:43,450 --> 00:24:44,390
have uniforms

613
00:24:44,390 --> 00:24:46,700
like say color and a direction of light

614
00:24:46,700 --> 00:24:48,860
in this case and then we have something

615
00:24:48,860 --> 00:24:50,660
called varying and then this is this can

616
00:24:50,660 --> 00:24:52,550
be a little bit tricky to grasp but

617
00:24:52,550 --> 00:24:55,430
basically our information at this point

618
00:24:55,430 --> 00:24:57,200
is only defined on the corners of the

619
00:24:57,200 --> 00:24:59,060
mesh so when you're trying to fill the

620
00:24:59,060 --> 00:25:01,850
pixels in the middle you need to have a

621
00:25:01,850 --> 00:25:04,010
way to transform that information and

622
00:25:04,010 --> 00:25:06,290
you can just you know assume that it's

623
00:25:06,290 --> 00:25:08,090
constant across the entire triangle

624
00:25:08,090 --> 00:25:10,670
which makes it uniform or you could have

625
00:25:10,670 --> 00:25:12,800
a property that's varying that varies

626
00:25:12,800 --> 00:25:14,600
and the way that works is you just

627
00:25:14,600 --> 00:25:16,370
define it at the corners and the

628
00:25:16,370 --> 00:25:18,710
graphics hardware interpolates it for

629
00:25:18,710 --> 00:25:20,480
you fills out the part in the middle and

630
00:25:20,480 --> 00:25:23,360
then what this fragment shader does is

631
00:25:23,360 --> 00:25:26,000
determines how how much the surface

632
00:25:26,000 --> 00:25:27,290
should be lit by doing something called

633
00:25:27,290 --> 00:25:29,240
a vector dot product which you can look

634
00:25:29,240 --> 00:25:30,830
up and see what that does

635
00:25:30,830 --> 00:25:32,720
and then multiplies that intensity by

636
00:25:32,720 --> 00:25:36,140
the color of the surface and so this is

637
00:25:36,140 --> 00:25:38,510
again the simplest possible fragment

638
00:25:38,510 --> 00:25:40,400
shader in fact what's going on on the

639
00:25:40,400 --> 00:25:41,540
left is actually a little bit more

640
00:25:41,540 --> 00:25:42,800
complicated because it has something

641
00:25:42,800 --> 00:25:44,720
called specular light which is sort of

642
00:25:44,720 --> 00:25:46,550
that the glossiness that I didn't even

643
00:25:46,550 --> 00:25:48,230
bother to implement in the code on the

644
00:25:48,230 --> 00:25:52,340
right and so here's an example of for

645
00:25:52,340 --> 00:25:54,470
example a vertex shader that does some

646
00:25:54,470 --> 00:25:56,980
real work this is skeletal animation and

647
00:25:56,980 --> 00:25:58,970
the way you have to think about this is

648
00:25:58,970 --> 00:26:00,680
the model of in this case this

649
00:26:00,680 --> 00:26:03,230
cyberdemon from doom 3 is just defined

650
00:26:03,230 --> 00:26:04,910
statically and usually they even put it

651
00:26:04,910 --> 00:26:06,800
in a sort of Vitruvian Man pose so it's

652
00:26:06,800 --> 00:26:09,590
nice and neutral and then they feed in

653
00:26:09,590 --> 00:26:11,750
the orientation of all the bones in the

654
00:26:11,750 --> 00:26:14,410
skeleton every point is linked to a

655
00:26:14,410 --> 00:26:17,810
point on the skeleton and by tuning the

656
00:26:17,810 --> 00:26:20,360
knobs by changing the matrices you can

657
00:26:20,360 --> 00:26:22,070
animate this character and this is all

658
00:26:22,070 --> 00:26:24,200
done on the GPU on the graphics hardware

659
00:26:24,200 --> 00:26:29,690
not on the CPU side an example of a

660
00:26:29,690 --> 00:26:32,000
fragment shader that is very common is

661
00:26:32,000 --> 00:26:35,390
normal mapping and so you see that all

662
00:26:35,390 --> 00:26:37,670
of a sudden it seems like this model has

663
00:26:37,670 --> 00:26:39,980
become way more detailed and that's an

664
00:26:39,980 --> 00:26:41,960
illusion because the geometry hasn't

665
00:26:41,960 --> 00:26:44,180
changed all I'm doing is I'm applying

666
00:26:44,180 --> 00:26:46,630
something called a normal map which

667
00:26:46,630 --> 00:26:49,970
tells the describes the orientation of

668
00:26:49,970 --> 00:26:52,310
the surface and so I'm cheating because

669
00:26:52,310 --> 00:26:54,370
it looks like it has tiny bumps and

670
00:26:54,370 --> 00:26:56,690
little crevices and all that but it's

671
00:26:56,690 --> 00:26:58,250
it's painted on

672
00:26:58,250 --> 00:27:00,290
in a way that changes the shading so

673
00:27:00,290 --> 00:27:01,670
it's not just a texture it's it's

674
00:27:01,670 --> 00:27:03,710
information that is being splattered

675
00:27:03,710 --> 00:27:06,920
onto a model interpolated and and used

676
00:27:06,920 --> 00:27:09,080
to do the lighting on a per pixel basis

677
00:27:09,080 --> 00:27:13,040
and because this is such an easy trick

678
00:27:13,040 --> 00:27:14,690
we don't care about depths as much as we

679
00:27:14,690 --> 00:27:17,810
do about light and shadow this is a very

680
00:27:17,810 --> 00:27:19,190
effective way of creating the appearance

681
00:27:19,190 --> 00:27:21,530
of hundreds of thousands of triangles

682
00:27:21,530 --> 00:27:22,670
when really there's only a couple

683
00:27:22,670 --> 00:27:26,420
thousand and you combine that for

684
00:27:26,420 --> 00:27:29,360
example with a color map texture and

685
00:27:29,360 --> 00:27:31,610
then there's something else called a

686
00:27:31,610 --> 00:27:33,350
specular map which determines which part

687
00:27:33,350 --> 00:27:35,060
of this creature are glossy in which

688
00:27:35,060 --> 00:27:37,610
parts are metal or soft shaded and you

689
00:27:37,610 --> 00:27:39,470
end up with something like this which I

690
00:27:39,470 --> 00:27:50,389
think looks pretty damn cool

691
00:27:50,399 --> 00:27:52,809
we're not done yet I'll just show you

692
00:27:52,809 --> 00:27:54,610
one more trick that you can do with

693
00:27:54,610 --> 00:27:56,769
fragment shaders so here I've put a

694
00:27:56,769 --> 00:27:58,720
floor of bricks underneath the monster

695
00:27:58,720 --> 00:28:00,820
and the bricks are being normal mapped

696
00:28:00,820 --> 00:28:03,129
so that means that as I move the lights

697
00:28:03,129 --> 00:28:05,649
above it you can see that the lights

698
00:28:05,649 --> 00:28:07,210
that have catches the edges of the brick

699
00:28:07,210 --> 00:28:08,769
and then it looks like they have depth

700
00:28:08,769 --> 00:28:11,590
but that's an illusion because if I put

701
00:28:11,590 --> 00:28:13,570
the camera at a glancing angle you can

702
00:28:13,570 --> 00:28:15,100
start to see that it's fake that there's

703
00:28:15,100 --> 00:28:17,529
no actual depth here it's just sort of a

704
00:28:17,529 --> 00:28:19,389
texture that happens to have convincing

705
00:28:19,389 --> 00:28:23,080
shading but we can fix that we apply

706
00:28:23,080 --> 00:28:25,499
something called parallax mapping and

707
00:28:25,499 --> 00:28:27,759
suddenly it looks like these bricks

708
00:28:27,759 --> 00:28:30,759
actually have depth and yet what I'm

709
00:28:30,759 --> 00:28:32,679
telling the GPU to do is still just draw

710
00:28:32,679 --> 00:28:35,889
a flat square how does that work why it

711
00:28:35,889 --> 00:28:38,350
does this all of a sudden look like it

712
00:28:38,350 --> 00:28:40,570
is correct and here's the secret I'm

713
00:28:40,570 --> 00:28:44,110
going to lock the uniform that tells the

714
00:28:44,110 --> 00:28:46,600
shader where the camera is so the shader

715
00:28:46,600 --> 00:28:48,159
is going to think that the camera is

716
00:28:48,159 --> 00:28:50,409
staying right here when when it's not

717
00:28:50,409 --> 00:28:51,850
and I'm going to rotate to the other

718
00:28:51,850 --> 00:28:54,309
side and now all of a sudden this

719
00:28:54,309 --> 00:28:56,950
illusion is completely destroyed and you

720
00:28:56,950 --> 00:28:59,409
can see if you look closely there's a

721
00:28:59,409 --> 00:29:01,389
sort of distortion going on with the

722
00:29:01,389 --> 00:29:04,629
texture where it is streakiness and and

723
00:29:04,629 --> 00:29:07,690
and weirdness and so the point of this

724
00:29:07,690 --> 00:29:11,320
effect is it distorts the texture of the

725
00:29:11,320 --> 00:29:13,480
bricks in such a way that from your

726
00:29:13,480 --> 00:29:16,720
point of view it looks correct in 3d but

727
00:29:16,720 --> 00:29:18,909
it's really cheap it's it's completely

728
00:29:18,909 --> 00:29:21,399
fake and so you can see that the the

729
00:29:21,399 --> 00:29:23,289
silhouette at the top left for example

730
00:29:23,289 --> 00:29:25,570
stays a straight line as far as the the

731
00:29:25,570 --> 00:29:28,119
depth is concerned this is a completely

732
00:29:28,119 --> 00:29:31,299
flat surface but it's such an effective

733
00:29:31,299 --> 00:29:33,970
technique and here for example I'm going

734
00:29:33,970 --> 00:29:36,309
to update the the uniform that controls

735
00:29:36,309 --> 00:29:38,110
that tells it where the camera is and

736
00:29:38,110 --> 00:29:41,019
all of a sudden the illusion is restored

737
00:29:41,019 --> 00:29:46,809
and you get breaks that look real that's

738
00:29:46,809 --> 00:29:47,980
pretty much it I just want to leave you

739
00:29:47,980 --> 00:29:49,450
with a couple of things to look at in

740
00:29:49,450 --> 00:29:51,999
case you like this and that's something

741
00:29:51,999 --> 00:29:54,279
you might want to do arrow twist comm

742
00:29:54,279 --> 00:29:57,159
which is Paul Lewis who has it's not

743
00:29:57,159 --> 00:29:59,289
only a beautiful site but the articles

744
00:29:59,289 --> 00:30:01,299
are really well-written and simple and

745
00:30:01,299 --> 00:30:02,200
straight to the point

746
00:30:02,200 --> 00:30:03,020
so check

747
00:30:03,020 --> 00:30:05,750
it's mostly 3GS which is also what I use

748
00:30:05,750 --> 00:30:08,899
I like using 3GS because it just takes

749
00:30:08,899 --> 00:30:12,140
care of the boilerplate there is Inigo

750
00:30:12,140 --> 00:30:13,880
classes site which is sort of like a

751
00:30:13,880 --> 00:30:15,919
treasure trove of demo scene techniques

752
00:30:15,919 --> 00:30:18,350
and and other interesting mathematical

753
00:30:18,350 --> 00:30:23,779
things mr. doob is the author of 3GS has

754
00:30:23,779 --> 00:30:26,450
a site full of demos and interesting

755
00:30:26,450 --> 00:30:28,700
things that you can look at and ultra

756
00:30:28,700 --> 00:30:31,880
Cape qualia is another person it was

757
00:30:31,880 --> 00:30:34,070
their implementation and part of the

758
00:30:34,070 --> 00:30:36,320
cyberdemon model that i used for this

759
00:30:36,320 --> 00:30:38,020
presentation thank you very much

