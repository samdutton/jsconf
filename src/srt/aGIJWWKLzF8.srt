1
00:00:13,940 --> 00:00:18,120

hi thanks everyone so i'll be speaking

2
00:00:18,120 --> 00:00:20,640
today about a headless testing against

3
00:00:20,640 --> 00:00:25,290
real web browsers using XV fe so if

4
00:00:25,290 --> 00:00:28,020
you're not familiar with what XV FB is

5
00:00:28,020 --> 00:00:31,050
just just bear with me i'm going to

6
00:00:31,050 --> 00:00:33,600
share some background on why this was

7
00:00:33,600 --> 00:00:35,520
relevant to my team and may be relevant

8
00:00:35,520 --> 00:00:37,530
to yours as well will transition into

9
00:00:37,530 --> 00:00:40,380
you an explanation of what exactly is XV

10
00:00:40,380 --> 00:00:43,800
FB and then allah i'll finish off with a

11
00:00:43,800 --> 00:00:47,910
demo also a quick footnote is my first

12
00:00:47,910 --> 00:00:50,880
time speaking at a conference so so bear

13
00:00:50,880 --> 00:00:53,130
with me there too hopefully you're not

14
00:00:53,130 --> 00:00:58,500
about to watch my yeah hopefully you're

15
00:00:58,500 --> 00:01:00,060
not about to watch my career in

16
00:01:00,060 --> 00:01:04,199
professional stature crash and burn so

17
00:01:04,199 --> 00:01:07,080
again my name is mike ball md be on

18
00:01:07,080 --> 00:01:10,079
github and clap excitement on twitter

19
00:01:10,079 --> 00:01:14,000
and i work for a little company called

20
00:01:14,000 --> 00:01:18,659
comcast my team at comcast is

21
00:01:18,659 --> 00:01:23,400
responsible for building some TV and

22
00:01:23,400 --> 00:01:27,450
video streaming applications effectively

23
00:01:27,450 --> 00:01:30,630
where we turn your web browser into a

24
00:01:30,630 --> 00:01:34,260
tv's 2015 and TV is not just for your

25
00:01:34,260 --> 00:01:39,300
set-top box anymore so we do that with

26
00:01:39,300 --> 00:01:42,810
heart in Philadelphia as is evidenced by

27
00:01:42,810 --> 00:01:46,520
our Xfinity origin label response header

28
00:01:46,520 --> 00:01:49,680
which we serve back with every HTTP

29
00:01:49,680 --> 00:01:52,729
response served by our application and I

30
00:01:52,729 --> 00:01:56,670
mention this because I know historically

31
00:01:56,670 --> 00:01:59,700
comcast is a company that hasn't always

32
00:01:59,700 --> 00:02:02,070
enjoyed the best reputation customer

33
00:02:02,070 --> 00:02:04,860
service wise and user experience wise

34
00:02:04,860 --> 00:02:09,899
and my team is really really working to

35
00:02:09,899 --> 00:02:12,870
change that we do do what we do with

36
00:02:12,870 --> 00:02:15,209
heart and with quality in mind and that

37
00:02:15,209 --> 00:02:19,620
that in turn relates to a lot of what I

38
00:02:19,620 --> 00:02:24,360
plan to speak about here today so a

39
00:02:24,360 --> 00:02:25,890
little bit of prologue

40
00:02:25,890 --> 00:02:29,670
um why why am I talking about this here

41
00:02:29,670 --> 00:02:32,610
today so let me let me lead up to that

42
00:02:32,610 --> 00:02:35,550
with some background on my beliefs about

43
00:02:35,550 --> 00:02:39,060
software development so automated

44
00:02:39,060 --> 00:02:42,390
testing I'm a huge advocate of automated

45
00:02:42,390 --> 00:02:44,280
testing and I'm sure many of you guys

46
00:02:44,280 --> 00:02:48,060
are as well I I rely pretty heavily on

47
00:02:48,060 --> 00:02:51,390
automated tests within my own team to

48
00:02:51,390 --> 00:02:53,900
operate as an insurance policy

49
00:02:53,900 --> 00:02:56,880
guaranteeing that our software continues

50
00:02:56,880 --> 00:03:00,000
working as it should with every change

51
00:03:00,000 --> 00:03:02,670
that introduced this this helps my team

52
00:03:02,670 --> 00:03:05,430
move fast it helps us understand how a

53
00:03:05,430 --> 00:03:08,970
changing changing business requirements

54
00:03:08,970 --> 00:03:11,550
or changing user experience impacts a

55
00:03:11,550 --> 00:03:14,760
larger system and we this this insurance

56
00:03:14,760 --> 00:03:16,769
policy is in place again with the goal

57
00:03:16,769 --> 00:03:20,580
of guaranteeing customer quality and and

58
00:03:20,580 --> 00:03:24,269
serving as kind of a digital audit trail

59
00:03:24,269 --> 00:03:26,700
that when something needs to change

60
00:03:26,700 --> 00:03:31,260
because change is inevitable that suite

61
00:03:31,260 --> 00:03:35,010
of tests or in this maybe in this case

62
00:03:35,010 --> 00:03:37,380
test failures highlights immediately

63
00:03:37,380 --> 00:03:41,010
what else throughout the software needs

64
00:03:41,010 --> 00:03:46,200
to change to align with the evolving

65
00:03:46,200 --> 00:03:50,130
business requirements and that leads

66
00:03:50,130 --> 00:03:53,060
into you another important aspect of my

67
00:03:53,060 --> 00:03:55,170
philosophy as software developer I

68
00:03:55,170 --> 00:03:56,940
believe pretty strongly in continuous

69
00:03:56,940 --> 00:04:00,299
integration and my team relies really

70
00:04:00,299 --> 00:04:03,570
heavily on a healthy continuous

71
00:04:03,570 --> 00:04:06,150
integration pipeline I think in its

72
00:04:06,150 --> 00:04:08,040
ideal form continuous integration

73
00:04:08,040 --> 00:04:09,920
ensures a code based health is

74
00:04:09,920 --> 00:04:12,870
continuously monitored with with each

75
00:04:12,870 --> 00:04:15,570
change with each push a developer on the

76
00:04:15,570 --> 00:04:17,910
team makes and that happens many many

77
00:04:17,910 --> 00:04:20,430
many times throughout the day in its

78
00:04:20,430 --> 00:04:23,780
ideal form this CI pipeline should be

79
00:04:23,780 --> 00:04:26,669
scientific it should be consistent needs

80
00:04:26,669 --> 00:04:29,430
to be easily repeatable and it also

81
00:04:29,430 --> 00:04:31,050
needs to be as fast and cheap as

82
00:04:31,050 --> 00:04:34,110
possible but still just as sophisticated

83
00:04:34,110 --> 00:04:38,480
as is necessary to serve as

84
00:04:38,480 --> 00:04:41,250
quality insurance policy and I mentioned

85
00:04:41,250 --> 00:04:42,540
that because I think that's kind of true

86
00:04:42,540 --> 00:04:46,470
of all engineered systems that you want

87
00:04:46,470 --> 00:04:49,320
them to be just complex enough to honor

88
00:04:49,320 --> 00:04:51,720
their responsibilities but when they're

89
00:04:51,720 --> 00:04:54,360
they grow in complexity beyond what's

90
00:04:54,360 --> 00:04:56,700
necessary that's kind of a sticky space

91
00:04:56,700 --> 00:04:59,340
in which in my experience problems occur

92
00:04:59,340 --> 00:05:02,070
and conversely when they're not complex

93
00:05:02,070 --> 00:05:06,030
enough to serve their their need that's

94
00:05:06,030 --> 00:05:07,440
a sticky space as well and that

95
00:05:07,440 --> 00:05:11,820
threshold is ever-changing so we're

96
00:05:11,820 --> 00:05:14,100
constantly monitoring that constantly

97
00:05:14,100 --> 00:05:16,500
tweaking the process to make sure

98
00:05:16,500 --> 00:05:18,930
quality is guaranteed and so that brings

99
00:05:18,930 --> 00:05:23,100
me to you my my last point about a good

100
00:05:23,100 --> 00:05:26,040
CI system which is that the feedback

101
00:05:26,040 --> 00:05:28,490
cycle should be fast we work fast

102
00:05:28,490 --> 00:05:32,160
business changes fast the customers

103
00:05:32,160 --> 00:05:36,090
expect fast so we we really need to to

104
00:05:36,090 --> 00:05:38,370
rely on speed we need to get feedback as

105
00:05:38,370 --> 00:05:41,990
soon as possible about problem scenarios

106
00:05:41,990 --> 00:05:46,650
so moving on with that point I'll say I

107
00:05:46,650 --> 00:05:50,340
think the story of computers is kind of

108
00:05:50,340 --> 00:05:51,780
that they're getting you know they're

109
00:05:51,780 --> 00:05:54,500
getting cheaper and cheaper and servers

110
00:05:54,500 --> 00:05:58,710
disposable infrastructure is more and

111
00:05:58,710 --> 00:06:02,100
more readily available technology like

112
00:06:02,100 --> 00:06:05,040
virtualization container technology like

113
00:06:05,040 --> 00:06:08,120
docker cloud infrastructure all of this

114
00:06:08,120 --> 00:06:12,780
works in concert to illustrate this

115
00:06:12,780 --> 00:06:16,530
point I have that servers are cheaper

116
00:06:16,530 --> 00:06:17,970
and cheaper and more and more readily

117
00:06:17,970 --> 00:06:20,070
available in our own continuous

118
00:06:20,070 --> 00:06:22,650
integration pipeline relies on this

119
00:06:22,650 --> 00:06:25,400
pretty heavily we rely on virtualized

120
00:06:25,400 --> 00:06:31,350
disposable Linux VMS and then within

121
00:06:31,350 --> 00:06:34,050
this world especially at the JavaScript

122
00:06:34,050 --> 00:06:36,600
layer headless testing is is pretty

123
00:06:36,600 --> 00:06:39,060
important and so historically tools like

124
00:06:39,060 --> 00:06:43,550
phantom jsf jsf ear acer have all

125
00:06:43,550 --> 00:06:51,030
provided a headless JavaScript runtime

126
00:06:51,030 --> 00:06:54,180
and and this this allows us of course to

127
00:06:54,180 --> 00:06:57,180
execute our JavaScript code and assert

128
00:06:57,180 --> 00:07:01,590
that all all within it continues to work

129
00:07:01,590 --> 00:07:05,190
as it should that the overall health of

130
00:07:05,190 --> 00:07:10,170
the software is as it should be or or

131
00:07:10,170 --> 00:07:13,730
that it isn't as it should be and and

132
00:07:13,730 --> 00:07:17,040
accordingly we're alerted to this

133
00:07:17,040 --> 00:07:22,620
problem but there is a problem now those

134
00:07:22,620 --> 00:07:26,130
all those tools are great and I my own

135
00:07:26,130 --> 00:07:27,900
team relies pretty heavily on phantom

136
00:07:27,900 --> 00:07:30,150
j/s is a great tool and seems to have

137
00:07:30,150 --> 00:07:32,040
risen as the leader amongst these

138
00:07:32,040 --> 00:07:34,410
headless run times in recent years and

139
00:07:34,410 --> 00:07:36,630
so this is not at all a dis on phantom

140
00:07:36,630 --> 00:07:40,370
JSI blown away by how great it is but

141
00:07:40,370 --> 00:07:44,400
one problem remains and even ray touched

142
00:07:44,400 --> 00:07:46,770
upon this and mentioning the need to run

143
00:07:46,770 --> 00:07:49,380
headless ie in the presentation before

144
00:07:49,380 --> 00:07:51,990
mine so what if your technology can't

145
00:07:51,990 --> 00:07:54,750
run on one of these headless runtimes

146
00:07:54,750 --> 00:07:57,770
what if phantom j/s doesn't suffice in

147
00:07:57,770 --> 00:08:01,770
serving your needs so what do I mean by

148
00:08:01,770 --> 00:08:05,280
this well here's a few examples flash

149
00:08:05,280 --> 00:08:09,090
and wjs which was until recently known

150
00:08:09,090 --> 00:08:11,700
as node WebKit and google polymer web

151
00:08:11,700 --> 00:08:13,740
component tester provides some examples

152
00:08:13,740 --> 00:08:17,160
here so these are all three examples of

153
00:08:17,160 --> 00:08:22,140
some technology that comcast in across

154
00:08:22,140 --> 00:08:24,960
various teams or different layers of the

155
00:08:24,960 --> 00:08:28,290
ginormous software ecosystem that

156
00:08:28,290 --> 00:08:31,980
comcast is responsible for leverages so

157
00:08:31,980 --> 00:08:35,550
flash of course requires and assumes the

158
00:08:35,550 --> 00:08:39,570
presence of a GUI n wjs if you're not

159
00:08:39,570 --> 00:08:42,330
familiar is a great technology for

160
00:08:42,330 --> 00:08:45,420
authoring distributed desktop

161
00:08:45,420 --> 00:08:50,120
applications across windows linux mac OS

162
00:08:50,120 --> 00:08:55,650
using web technologies and nodejs and it

163
00:08:55,650 --> 00:08:59,360
to buy it you're reasonably of being a

164
00:08:59,360 --> 00:09:01,710
technology for authoring desktop

165
00:09:01,710 --> 00:09:03,690
applications it seems the presence of a

166
00:09:03,690 --> 00:09:04,800
GUI

167
00:09:04,800 --> 00:09:07,410
and Google polymer web component tester

168
00:09:07,410 --> 00:09:10,680
web component tester being the the

169
00:09:10,680 --> 00:09:13,610
polymer community testing tool of choice

170
00:09:13,610 --> 00:09:17,130
also assumes the presence of a web

171
00:09:17,130 --> 00:09:19,080
component or excuse me the presence of

172
00:09:19,080 --> 00:09:24,480
an actual GUI in actual web browser so

173
00:09:24,480 --> 00:09:28,279
for the purpose of this presentation

174
00:09:28,279 --> 00:09:32,310
let's focus on Google polymer as a case

175
00:09:32,310 --> 00:09:36,450
study now if you're not familiar with

176
00:09:36,450 --> 00:09:38,130
Google polymer I'm not going to go into

177
00:09:38,130 --> 00:09:41,760
too much depth at this stage partially

178
00:09:41,760 --> 00:09:45,690
because my colleague Chris lurin and

179
00:09:45,690 --> 00:09:47,430
raise your hand chris is going to be

180
00:09:47,430 --> 00:09:49,620
given a great introduction to Google

181
00:09:49,620 --> 00:09:53,640
polymer this evening at 5 45 is that

182
00:09:53,640 --> 00:09:57,329
correct so be sure to check that out but

183
00:09:57,329 --> 00:10:01,410
the basic skim the surface background as

184
00:10:01,410 --> 00:10:04,680
is relevant to my talk here is that a

185
00:10:04,680 --> 00:10:06,990
google google polymer is some great

186
00:10:06,990 --> 00:10:11,339
technology used to author HTML web

187
00:10:11,339 --> 00:10:14,310
component this is a technology that

188
00:10:14,310 --> 00:10:17,430
various teams throughout Comcast's have

189
00:10:17,430 --> 00:10:21,570
taken increasing interest in as of late

190
00:10:21,570 --> 00:10:25,350
and like i mentioned this tool web

191
00:10:25,350 --> 00:10:28,800
component tester is the polymer

192
00:10:28,800 --> 00:10:33,260
community setting tool of choice for

193
00:10:33,260 --> 00:10:37,380
automating google polymer tests but

194
00:10:37,380 --> 00:10:40,560
here's the here's the deal web component

195
00:10:40,560 --> 00:10:42,260
tester like i mentioned previously

196
00:10:42,260 --> 00:10:46,860
assumes a GUI and so these virtualized

197
00:10:46,860 --> 00:10:50,610
CI build agents i mentioned earlier they

198
00:10:50,610 --> 00:10:52,170
don't have a screen they don't have a

199
00:10:52,170 --> 00:10:57,980
GUI they're cheap disposable VMs and so

200
00:10:57,980 --> 00:11:01,920
in this case web component tester really

201
00:11:01,920 --> 00:11:06,089
challenges some antal infrastructure

202
00:11:06,089 --> 00:11:11,899
assumptions and problem isn't isn't

203
00:11:11,899 --> 00:11:14,910
mountable there are some candidate

204
00:11:14,910 --> 00:11:17,010
solutions provided

205
00:11:17,010 --> 00:11:21,800
by Travis CI for example or sauce labs

206
00:11:21,800 --> 00:11:25,290
or Travis CI has some really extensive

207
00:11:25,290 --> 00:11:29,330
and great documentation on how to run

208
00:11:29,330 --> 00:11:33,510
GUI headless browsers on its own boy

209
00:11:33,510 --> 00:11:35,790
infrastructure and incidentally this

210
00:11:35,790 --> 00:11:39,330
their technique also leverages xvii FB

211
00:11:39,330 --> 00:11:41,190
which I'll cover in more detail here and

212
00:11:41,190 --> 00:11:44,690
a headless Firefox so that's great and

213
00:11:44,690 --> 00:11:48,180
sauce labs if you're not familiar is

214
00:11:48,180 --> 00:11:52,650
also a great option sauce labs offers a

215
00:11:52,650 --> 00:11:56,190
selenium cloud with access to over a

216
00:11:56,190 --> 00:11:58,890
hundred device OS browser combo so

217
00:11:58,890 --> 00:12:02,970
that's a great option as well but what

218
00:12:02,970 --> 00:12:05,940
if your team can't use these tools so

219
00:12:05,940 --> 00:12:07,980
why might your team not be able to use

220
00:12:07,980 --> 00:12:11,280
these tools well budget might get in a

221
00:12:11,280 --> 00:12:13,710
way these are vendor services and your

222
00:12:13,710 --> 00:12:16,890
team might just not have the capital to

223
00:12:16,890 --> 00:12:19,500
pay for it sought complex software

224
00:12:19,500 --> 00:12:22,170
licensing agreements may not meet your

225
00:12:22,170 --> 00:12:27,320
needs for various reasons or maybe the

226
00:12:27,320 --> 00:12:30,420
amount of load that your team will do

227
00:12:30,420 --> 00:12:36,030
will will generate is just prohibitive

228
00:12:36,030 --> 00:12:40,010
so what are we doing in these cases well

229
00:12:40,010 --> 00:12:46,040
that's a that's really where my my

230
00:12:46,040 --> 00:12:48,840
concept that my ideas for X virtual

231
00:12:48,840 --> 00:12:51,570
frame buffer come into to play so X

232
00:12:51,570 --> 00:12:53,970
virtual frame buffer more commonly known

233
00:12:53,970 --> 00:12:56,040
as X vfb I'm kind of using the two

234
00:12:56,040 --> 00:12:58,170
interchangeable in this interchangeably

235
00:12:58,170 --> 00:13:01,320
in this presentation is it's not new

236
00:13:01,320 --> 00:13:03,780
technology and it's not JavaScript

237
00:13:03,780 --> 00:13:06,900
technology but it is some technology

238
00:13:06,900 --> 00:13:09,780
that allows you to run GUI applications

239
00:13:09,780 --> 00:13:13,830
like web growl web browsers with no guey

240
00:13:13,830 --> 00:13:18,990
so with no screen so let's talk a little

241
00:13:18,990 --> 00:13:22,380
bit about x.x VFD and i'll hopefully

242
00:13:22,380 --> 00:13:24,210
provide some contextual understanding

243
00:13:24,210 --> 00:13:26,130
for what it is before I lead into my

244
00:13:26,130 --> 00:13:31,050
demo and with that a quick sidebar the

245
00:13:31,050 --> 00:13:33,209
talk about the x window system so the x

246
00:13:33,209 --> 00:13:36,899
window system is how guha displays are

247
00:13:36,899 --> 00:13:40,920
rendered on unix-like systems unix-like

248
00:13:40,920 --> 00:13:46,320
systems being linux and mac OS and the

249
00:13:46,320 --> 00:13:49,529
x11 display server is the curt release

250
00:13:49,529 --> 00:13:52,260
of the x window system so again this is

251
00:13:52,260 --> 00:13:54,660
a windowing system for bit map displays

252
00:13:54,660 --> 00:13:56,880
used to render gooeys and this is

253
00:13:56,880 --> 00:13:59,790
effectively how visual elements are

254
00:13:59,790 --> 00:14:01,740
rendered on a screen and available for

255
00:14:01,740 --> 00:14:05,540
user interaction via mouse click or

256
00:14:05,540 --> 00:14:09,600
visual gooeys with qualities like color

257
00:14:09,600 --> 00:14:17,790
and shape on mac OS and linux and so

258
00:14:17,790 --> 00:14:20,250
with that what is x virtual frame buffer

259
00:14:20,250 --> 00:14:24,450
so x virtual frame buffer or x vfb babes

260
00:14:24,450 --> 00:14:27,000
just like any other x server the

261
00:14:27,000 --> 00:14:29,370
difference being no graphical output

262
00:14:29,370 --> 00:14:33,660
which is rendered so it allows us to

263
00:14:33,660 --> 00:14:37,230
perform all graphical operations in

264
00:14:37,230 --> 00:14:40,290
memory without showing screen output so

265
00:14:40,290 --> 00:14:43,860
again it doesn't require the computer

266
00:14:43,860 --> 00:14:47,459
running it to have a screen as is the

267
00:14:47,459 --> 00:14:50,880
case in my own teams continuous

268
00:14:50,880 --> 00:14:52,860
integration workflow and I'm sure that's

269
00:14:52,860 --> 00:14:55,200
true of many other teams continuous

270
00:14:55,200 --> 00:14:56,970
integration workflows we're relying on

271
00:14:56,970 --> 00:15:00,810
EMS either in a cloud or even managed

272
00:15:00,810 --> 00:15:04,110
VMs that have no display they have no

273
00:15:04,110 --> 00:15:11,370
screen so that brings me Oh Jim so with

274
00:15:11,370 --> 00:15:14,190
all of these problems in mind and

275
00:15:14,190 --> 00:15:16,770
bearing into consideration xvii fbsm

276
00:15:16,770 --> 00:15:19,680
candidate solution technology a doctored

277
00:15:19,680 --> 00:15:24,089
up a polymer testing box so this uh this

278
00:15:24,089 --> 00:15:27,620
is a repo available and like all along

279
00:15:27,620 --> 00:15:30,899
my github user name is md b and the

280
00:15:30,899 --> 00:15:33,779
testing boxes polymer dash testing dash

281
00:15:33,779 --> 00:15:36,709
box and so a little disclaimer I'm not

282
00:15:36,709 --> 00:15:39,540
advocating necessarily that this is the

283
00:15:39,540 --> 00:15:42,810
best or most appropriate way to solve

284
00:15:42,810 --> 00:15:44,819
this problem your team this is just a

285
00:15:44,819 --> 00:15:46,889
reference implementation proof of

286
00:15:46,889 --> 00:15:50,309
concept for how you can run your

287
00:15:50,309 --> 00:15:55,139
automated tests in a headless DM so the

288
00:15:55,139 --> 00:15:57,149
core technologies I'm going to be using

289
00:15:57,149 --> 00:15:59,879
throughout it throughout the

290
00:15:59,879 --> 00:16:01,739
presentation and demoing polymer testing

291
00:16:01,739 --> 00:16:04,470
box are of course xvii FB we're going to

292
00:16:04,470 --> 00:16:08,939
use ansible ansible is a configuration

293
00:16:08,939 --> 00:16:11,220
and configuration management and

294
00:16:11,220 --> 00:16:14,519
provisioning technology comparable to

295
00:16:14,519 --> 00:16:18,989
chef or puppet or CF engine typically

296
00:16:18,989 --> 00:16:21,029
used by system administrators and

297
00:16:21,029 --> 00:16:23,609
operations professionals in provisioning

298
00:16:23,609 --> 00:16:26,999
servers we're going to install Google

299
00:16:26,999 --> 00:16:28,589
Chrome we're going to solve Firefox

300
00:16:28,589 --> 00:16:32,129
nodejs Bower and web component tester

301
00:16:32,129 --> 00:16:36,239
which are all the prerequisites for

302
00:16:36,239 --> 00:16:38,759
running Google polymer web component

303
00:16:38,759 --> 00:16:44,100
tester test ok so demo time so again

304
00:16:44,100 --> 00:16:45,929
here's what we're going to do we'll

305
00:16:45,929 --> 00:16:49,439
provision a vagrant bun to box ansible

306
00:16:49,439 --> 00:16:52,169
is then going to do its work installing

307
00:16:52,169 --> 00:16:54,239
and configuring all necessary

308
00:16:54,239 --> 00:16:56,669
dependencies and then we're going to run

309
00:16:56,669 --> 00:16:59,489
some web component tester tests against

310
00:16:59,489 --> 00:17:03,809
a polymer web component so quick sidebar

311
00:17:03,809 --> 00:17:07,319
on vagrant a disclaimer for those of you

312
00:17:07,319 --> 00:17:08,909
who aren't familiar with vagrant this is

313
00:17:08,909 --> 00:17:13,049
not JavaScript but you know takes a

314
00:17:13,049 --> 00:17:17,970
village so it's a feel obligated to say

315
00:17:17,970 --> 00:17:19,709
that at a javascript conference right

316
00:17:19,709 --> 00:17:22,350
but this is some great technology that

317
00:17:22,350 --> 00:17:25,439
helps us help serve our needs within the

318
00:17:25,439 --> 00:17:27,779
JavaScript community so vagrant is built

319
00:17:27,779 --> 00:17:31,620
on VirtualBox and it's effectively a

320
00:17:31,620 --> 00:17:35,549
tool to spin up lightweight headless VMs

321
00:17:35,549 --> 00:17:38,039
but a quick quick point I want to make

322
00:17:38,039 --> 00:17:41,159
about this is that in this case on my

323
00:17:41,159 --> 00:17:44,820
laptop vagrant is the provider of this

324
00:17:44,820 --> 00:17:47,850
Linux VM but that provider could just as

325
00:17:47,850 --> 00:17:50,759
easily be a remote or cloud provider

326
00:17:50,759 --> 00:17:55,260
such as Amazon Web Services or digital

327
00:17:55,260 --> 00:17:57,570
ocean or OpenStack

328
00:17:57,570 --> 00:18:00,540
in this case for this demos purpose is

329
00:18:00,540 --> 00:18:03,000
I'm just using vagrant but in theory

330
00:18:03,000 --> 00:18:07,530
this ansible PlayBook playbook being the

331
00:18:07,530 --> 00:18:12,300
ansible metaphor for how provisioning

332
00:18:12,300 --> 00:18:18,150
happens could take effect on on a box

333
00:18:18,150 --> 00:18:19,830
provided by a different provider like a

334
00:18:19,830 --> 00:18:24,470
crab cloud provider and so the primary

335
00:18:24,470 --> 00:18:28,920
way that we communicate right that we

336
00:18:28,920 --> 00:18:38,190
want a the bun to vm from vagrant is via

337
00:18:38,190 --> 00:18:40,950
this vagrant file so again this is also

338
00:18:40,950 --> 00:18:44,850
not JavaScript this is Ruby but i do

339
00:18:44,850 --> 00:18:46,410
want to point out a few things here

340
00:18:46,410 --> 00:18:49,770
there's there's more going on but in the

341
00:18:49,770 --> 00:18:51,810
larger vagrant file which you can see in

342
00:18:51,810 --> 00:18:55,680
my repo but quick quick points here so

343
00:18:55,680 --> 00:19:00,000
number one note that we are poor we are

344
00:19:00,000 --> 00:19:06,900
forwarding port 5900 to 5901 on the host

345
00:19:06,900 --> 00:19:08,610
machine so the host machine in this

346
00:19:08,610 --> 00:19:13,470
context being my macbook so the vm

347
00:19:13,470 --> 00:19:15,480
becomes available to us on my macbook

348
00:19:15,480 --> 00:19:19,050
via port 5901 and then secondly we're

349
00:19:19,050 --> 00:19:23,220
declaring a vagrant provision this bun

350
00:19:23,220 --> 00:19:26,430
to box we're asking for via ansible and

351
00:19:26,430 --> 00:19:29,040
the instructions for how to do so are

352
00:19:29,040 --> 00:19:32,090
contained in this playbook yeah mol file

353
00:19:32,090 --> 00:19:35,250
alright so the ansible playbook yamo

354
00:19:35,250 --> 00:19:38,100
file again not JavaScript ansible is

355
00:19:38,100 --> 00:19:44,550
Python but again I hope you see the

356
00:19:44,550 --> 00:19:48,300
relevancy we're going to as per

357
00:19:48,300 --> 00:19:50,670
directive of this playbook diamo file

358
00:19:50,670 --> 00:19:53,610
install and run xvf be on display port 0

359
00:19:53,610 --> 00:19:56,430
we're going to install node Bauer web

360
00:19:56,430 --> 00:19:58,230
component tester and then we're going to

361
00:19:58,230 --> 00:20:01,500
install Chrome and Firefox so we kick

362
00:20:01,500 --> 00:20:05,880
all this off by executing by running

363
00:20:05,880 --> 00:20:10,040
vagrant up so that gives us

364
00:20:10,040 --> 00:20:12,740
bass ubuntu box and then kicks off the

365
00:20:12,740 --> 00:20:17,180
ansible provisioning process point here

366
00:20:17,180 --> 00:20:20,300
is that this is you know I'm storing my

367
00:20:20,300 --> 00:20:22,820
infrastructure in code here so this is

368
00:20:22,820 --> 00:20:25,040
an easily repeatable scientific process

369
00:20:25,040 --> 00:20:29,050
this is not a fragile managed server

370
00:20:29,050 --> 00:20:32,120
this code allows us to repeat this

371
00:20:32,120 --> 00:20:34,010
process again and again and again and

372
00:20:34,010 --> 00:20:37,400
get the in theory exact same vm again

373
00:20:37,400 --> 00:20:40,160
and again and again so when that's all

374
00:20:40,160 --> 00:20:42,760
done we're going to shell into the

375
00:20:42,760 --> 00:20:45,650
polymer testing box which I'll do via

376
00:20:45,650 --> 00:20:50,300
vagrant SSH and then I'm going to clone

377
00:20:50,300 --> 00:20:52,700
a Google polymer web component so in

378
00:20:52,700 --> 00:20:55,820
this case will clone core Ajax which is

379
00:20:55,820 --> 00:20:58,460
a google polymer component maintained by

380
00:20:58,460 --> 00:21:01,790
the polymer team that whoops provides

381
00:21:01,790 --> 00:21:06,140
some Ajax functionality within polymer

382
00:21:06,140 --> 00:21:09,800
so will clone that I'm going to check

383
00:21:09,800 --> 00:21:14,900
out version 056 of core Ajax I'll do

384
00:21:14,900 --> 00:21:17,540
that because I want a demo working tests

385
00:21:17,540 --> 00:21:21,710
and I know 056 is an official release so

386
00:21:21,710 --> 00:21:24,650
it's tests pass and then we're going to

387
00:21:24,650 --> 00:21:29,840
run Bower install to install the core

388
00:21:29,840 --> 00:21:32,030
Ajax dependency so again this is all

389
00:21:32,030 --> 00:21:35,840
happening the polymer testing box

390
00:21:35,840 --> 00:21:44,000
vagrant box okay so now I'll demo

391
00:21:44,000 --> 00:21:48,020
running web component tester so what

392
00:21:48,020 --> 00:21:52,490
you'll see is all i'll run WCT which is

393
00:21:52,490 --> 00:21:55,180
the web component tester executable

394
00:21:55,180 --> 00:21:57,680
setting the environment variable to

395
00:21:57,680 --> 00:22:00,530
display port 0 so I'm telling web

396
00:22:00,530 --> 00:22:02,930
component tester to run on display port

397
00:22:02,930 --> 00:22:07,640
0 and remember per hour ansible playbook

398
00:22:07,640 --> 00:22:10,160
ex virtual frame buffer is also running

399
00:22:10,160 --> 00:22:14,150
on display port 0 and we'll see evidence

400
00:22:14,150 --> 00:22:19,050
I'll go ahead and kick this off that

401
00:22:19,060 --> 00:22:23,420
selenium is going to spin up both crow

402
00:22:23,420 --> 00:22:27,590
and firefox so you see chrome 43 and

403
00:22:27,590 --> 00:22:31,040
firefox 38 which were installed via

404
00:22:31,040 --> 00:22:33,860
ansible and we're going to run the web

405
00:22:33,860 --> 00:22:36,560
component tester test in each browser so

406
00:22:36,560 --> 00:22:38,660
you can see we've passed all of our

407
00:22:38,660 --> 00:22:41,330
tests in each browser and that happened

408
00:22:41,330 --> 00:22:44,450
with no screen output that happened

409
00:22:44,450 --> 00:22:48,170
entirely on my vagrant box so that's

410
00:22:48,170 --> 00:22:52,040
like as the core of what I I seek to

411
00:22:52,040 --> 00:23:01,760
demo here thanks so i can understand any

412
00:23:01,760 --> 00:23:04,040
skepticism you have you know how do we

413
00:23:04,040 --> 00:23:06,320
know that chrome and firefox really ran

414
00:23:06,320 --> 00:23:08,960
and what about debugging what if you

415
00:23:08,960 --> 00:23:11,450
actually need to poke around in

416
00:23:11,450 --> 00:23:14,240
development or maybe even remotely to

417
00:23:14,240 --> 00:23:16,490
figure out why are things failing you

418
00:23:16,490 --> 00:23:18,320
might need a GUI to do so you might need

419
00:23:18,320 --> 00:23:21,830
to actually with a web browser so I have

420
00:23:21,830 --> 00:23:26,570
a solution BNC well the polymer testing

421
00:23:26,570 --> 00:23:29,840
box has no screen and has no GUI your

422
00:23:29,840 --> 00:23:34,190
Mac does so what this means is that we

423
00:23:34,190 --> 00:23:38,420
can open a VNC connection from in this

424
00:23:38,420 --> 00:23:42,800
case my macbook to the vagrant box and

425
00:23:42,800 --> 00:23:48,040
because my macbook has a GUI has screen

426
00:23:48,040 --> 00:23:54,140
the drall commands and the of the GUI

427
00:23:54,140 --> 00:24:00,320
commands executed will have a screen to

428
00:24:00,320 --> 00:24:03,920
take effect on so step one on the

429
00:24:03,920 --> 00:24:06,430
polymer testing box will have to install

430
00:24:06,430 --> 00:24:09,140
VNC server so i'll do that via sudo

431
00:24:09,140 --> 00:24:12,560
apt-get install x11 VNC and also writes

432
00:24:12,560 --> 00:24:16,370
on display port 0 and then on your mac

433
00:24:16,370 --> 00:24:19,430
or on my mac rather I've brew installed

434
00:24:19,430 --> 00:24:23,540
tiger VNC viewer any any VNC client will

435
00:24:23,540 --> 00:24:25,280
do and i'm running this on localhost

436
00:24:25,280 --> 00:24:29,390
5901 you'll recall that I i forwarded

437
00:24:29,390 --> 00:24:34,640
port 5900 of the the vagrant vm to port

438
00:24:34,640 --> 00:24:36,320
5901

439
00:24:36,320 --> 00:24:42,649
Mac sorry for the little small I wasn't

440
00:24:42,649 --> 00:24:44,090
sure what kind of screen real estate I

441
00:24:44,090 --> 00:24:46,580
have to deal with but on the Left you'll

442
00:24:46,580 --> 00:24:50,990
see this is my BMC connection opened

443
00:24:50,990 --> 00:24:57,350
from my mac to the to the vagrant box on

444
00:24:57,350 --> 00:25:01,159
the right so I'll go ahead and run the

445
00:25:01,159 --> 00:25:04,039
same command Iran previously on the

446
00:25:04,039 --> 00:25:05,809
vagrant box and now on the left it's

447
00:25:05,809 --> 00:25:07,039
going to be a little squished up but

448
00:25:07,039 --> 00:25:08,570
hopefully I'll take my word for it that

449
00:25:08,570 --> 00:25:13,039
you'll see chrome and firefox actually

450
00:25:13,039 --> 00:25:16,159
open and execute these passing tests so

451
00:25:16,159 --> 00:25:18,019
there was chrome first and there's

452
00:25:18,019 --> 00:25:21,799
Firefox and all tests pass and then the

453
00:25:21,799 --> 00:25:29,980
browsers will close

454
00:25:29,990 --> 00:25:33,360
so again that that code is available at

455
00:25:33,360 --> 00:25:36,390
my github profile MDB polymer testing

456
00:25:36,390 --> 00:25:39,570
box in quick extra credit I also

457
00:25:39,570 --> 00:25:43,620
doctored up a solution for running in NW

458
00:25:43,620 --> 00:25:46,410
running and and testing both unit

459
00:25:46,410 --> 00:25:50,850
testing and in testing an NW desktop

460
00:25:50,850 --> 00:25:55,650
application on a similar box so as for

461
00:25:55,650 --> 00:25:59,040
next steps you know I'm hoping that you

462
00:25:59,040 --> 00:26:00,870
could see how you could kind of adopt

463
00:26:00,870 --> 00:26:03,870
maybe some of what I've proof of concept

464
00:26:03,870 --> 00:26:07,680
adhere to spin up some cloud

465
00:26:07,680 --> 00:26:09,780
infrastructure or something during your

466
00:26:09,780 --> 00:26:12,390
own builds maybe a leveraging AWS

467
00:26:12,390 --> 00:26:14,490
digital ocean or OpenStack or some

468
00:26:14,490 --> 00:26:17,550
comparable cloud provider also have a

469
00:26:17,550 --> 00:26:21,180
harebrained idea for how similar vm

470
00:26:21,180 --> 00:26:24,300
could be spun up and provisioned for a

471
00:26:24,300 --> 00:26:28,590
building and unit testing actionscript I

472
00:26:28,590 --> 00:26:30,510
think this also opens a lot of

473
00:26:30,510 --> 00:26:31,830
opportunities for some advanced web

474
00:26:31,830 --> 00:26:33,840
scraping for those wacky websites which

475
00:26:33,840 --> 00:26:36,930
just don't seem to behave at all in

476
00:26:36,930 --> 00:26:40,500
Phantom Jas for whatever reason and it

477
00:26:40,500 --> 00:26:42,900
also provides a path towards headless

478
00:26:42,900 --> 00:26:45,150
functional testing if if that's

479
00:26:45,150 --> 00:26:48,930
something that you're interested in so

480
00:26:48,930 --> 00:26:51,270
that's it thank you very much again on

481
00:26:51,270 --> 00:26:54,090
clap excitement on Twitter and MDB on

