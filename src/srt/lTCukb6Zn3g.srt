1
00:00:12,580 --> 00:00:15,470

everyone my name is David course she'd

2
00:00:15,470 --> 00:00:18,529
and believe it or not animation is an

3
00:00:18,529 --> 00:00:20,869
extremely important part of the user

4
00:00:20,869 --> 00:00:23,360
experience in fact there's a lot of you

5
00:00:23,360 --> 00:00:25,220
here right now this is probably the most

6
00:00:25,220 --> 00:00:27,260
amount of people I've talked to but many

7
00:00:27,260 --> 00:00:28,880
of you are here right now because you

8
00:00:28,880 --> 00:00:31,160
realize that animation is a growing

9
00:00:31,160 --> 00:00:34,100
trend in both the web and mobile app

10
00:00:34,100 --> 00:00:35,960
development and this is for good reason

11
00:00:35,960 --> 00:00:39,410
- animation increases delight reduces

12
00:00:39,410 --> 00:00:41,659
cognitive load and it could be an

13
00:00:41,659 --> 00:00:44,480
important factor in your brand when it

14
00:00:44,480 --> 00:00:46,879
comes to your style guide so a lot of

15
00:00:46,879 --> 00:00:49,519
developers realize this but so do a lot

16
00:00:49,519 --> 00:00:51,739
of users if you open an app in your

17
00:00:51,739 --> 00:00:55,519
iPhone or Android device you will expect

18
00:00:55,519 --> 00:00:58,040
animations to happen whenever you

19
00:00:58,040 --> 00:01:02,930
interact with the app so um my name is

20
00:01:02,930 --> 00:01:06,770
David as I said and I live in Florida

21
00:01:06,770 --> 00:01:11,380
which is right about there

22
00:01:11,390 --> 00:01:14,810
and this is actually pretty exciting

23
00:01:14,810 --> 00:01:16,820
because I met Jay has come to you

24
00:01:16,820 --> 00:01:20,960
partially talking about CSS which all of

25
00:01:20,960 --> 00:01:23,240
you are familiar with this is pretty

26
00:01:23,240 --> 00:01:24,680
much where I sat on the airplane I got

27
00:01:24,680 --> 00:01:29,329
like an hour of sleep so so like most

28
00:01:29,329 --> 00:01:32,210
front-end developers which I'm guessing

29
00:01:32,210 --> 00:01:34,460
all of you are either doing a JavaScript

30
00:01:34,460 --> 00:01:38,090
on the front-end or back-end there's two

31
00:01:38,090 --> 00:01:40,789
very important technologies that we have

32
00:01:40,789 --> 00:01:43,340
to work with and that's JavaScript and

33
00:01:43,340 --> 00:01:46,729
CSS and as front-end developers we know

34
00:01:46,729 --> 00:01:48,469
that the landscape is constantly

35
00:01:48,469 --> 00:01:50,240
changing as well

36
00:01:50,240 --> 00:01:53,359
so we'd love to experiment or at least

37
00:01:53,359 --> 00:01:57,200
most of us love to experiment and a

38
00:01:57,200 --> 00:01:59,630
couple years ago I asked myself the

39
00:01:59,630 --> 00:02:04,340
question what if what if I were to maybe

40
00:02:04,340 --> 00:02:07,460
not use JavaScript and see what CSS

41
00:02:07,460 --> 00:02:11,720
could do so this is how I approached

42
00:02:11,720 --> 00:02:16,700
user interfaces I would look at examples

43
00:02:16,700 --> 00:02:19,670
on dribble some cool animations and then

44
00:02:19,670 --> 00:02:22,040
I would try to recreate it as best as I

45
00:02:22,040 --> 00:02:22,819
could

46
00:02:22,819 --> 00:02:27,590
using only CSS and so I looked for more

47
00:02:27,590 --> 00:02:30,170
and more complex examples including ones

48
00:02:30,170 --> 00:02:32,090
with stateful transitions such as this

49
00:02:32,090 --> 00:02:34,909
one and with lots of checkbox hacks

50
00:02:34,909 --> 00:02:39,560
hacks and like target whatever I was

51
00:02:39,560 --> 00:02:42,500
able to you know recreate it pretty well

52
00:02:42,500 --> 00:02:45,889
and by the way don't do this these were

53
00:02:45,889 --> 00:02:47,680
all really fun experiments but

54
00:02:47,680 --> 00:02:50,900
javascript is good for a lot of things

55
00:02:50,900 --> 00:02:52,730
and you should probably use JavaScript

56
00:02:52,730 --> 00:02:55,219
if you want to do interactive animations

57
00:02:55,219 --> 00:02:58,430
like this I got a bit crazy so you know

58
00:02:58,430 --> 00:03:02,299
some animations online and I decide to

59
00:03:02,299 --> 00:03:06,379
recreate them completely in CSS so this

60
00:03:06,379 --> 00:03:09,919
is one of the animations I made and one

61
00:03:09,919 --> 00:03:13,310
important thing here is that we have the

62
00:03:13,310 --> 00:03:15,889
dev tools on the right if I created this

63
00:03:15,889 --> 00:03:18,889
with just JavaScript we would not get

64
00:03:18,889 --> 00:03:20,870
this we would not be able to play around

65
00:03:20,870 --> 00:03:23,299
and interact with all of the elements

66
00:03:23,299 --> 00:03:29,329
you know in CSS so why do we get this

67
00:03:29,329 --> 00:03:32,259
with CSS animations and not yet with

68
00:03:32,259 --> 00:03:36,319
JavaScript animations well it turns out

69
00:03:36,319 --> 00:03:38,689
that even though CSS could do a lot of

70
00:03:38,689 --> 00:03:41,810
things it involves a lot of hacks so I

71
00:03:41,810 --> 00:03:44,209
realize that CSS is not the most

72
00:03:44,209 --> 00:03:46,909
powerful language and that's why a lot

73
00:03:46,909 --> 00:03:51,169
of people start flocking to using CSS in

74
00:03:51,169 --> 00:03:53,780
JavaScript using javascript to apply

75
00:03:53,780 --> 00:03:56,479
Styles because hey javascript is a much

76
00:03:56,479 --> 00:03:59,060
more powerful language but here's the

77
00:03:59,060 --> 00:04:01,609
thing the fact that CSS is not powerful

78
00:04:01,609 --> 00:04:05,090
is actually a good thing there's this

79
00:04:05,090 --> 00:04:06,859
principle called the principle of least

80
00:04:06,859 --> 00:04:10,009
power and it states that you should use

81
00:04:10,009 --> 00:04:12,109
the least powerful language for

82
00:04:12,109 --> 00:04:15,349
expressing information constraints or

83
00:04:15,349 --> 00:04:19,430
programs on the world wide web and the

84
00:04:19,430 --> 00:04:21,859
principle basically states that powerful

85
00:04:21,859 --> 00:04:25,070
languages such as JavaScript inhibit

86
00:04:25,070 --> 00:04:28,490
information reuse and what I mean by

87
00:04:28,490 --> 00:04:31,490
that is that even though JavaScript

88
00:04:31,490 --> 00:04:35,860
could do a lot of things the

89
00:04:35,860 --> 00:04:38,410
the fact of the matter is that CSS

90
00:04:38,410 --> 00:04:43,000
provides like a limited dynamic library

91
00:04:43,000 --> 00:04:48,280
that that you could use to express style

92
00:04:48,280 --> 00:04:50,890
succinctly and JavaScript even though it

93
00:04:50,890 --> 00:04:52,900
could do everything you're gonna you

94
00:04:52,900 --> 00:04:55,270
know have a mess in your code if you try

95
00:04:55,270 --> 00:04:57,370
to define styles in there or try to find

96
00:04:57,370 --> 00:04:59,890
many things at once so it sort of

97
00:04:59,890 --> 00:05:04,750
inhibits reuse if you do that so today

98
00:05:04,750 --> 00:05:06,040
we're going to be talking about two

99
00:05:06,040 --> 00:05:08,560
things CSS variables and rxjs

100
00:05:08,560 --> 00:05:11,050
observables how many of you are familiar

101
00:05:11,050 --> 00:05:15,030
with CSS variables all right how about

102
00:05:15,030 --> 00:05:19,180
observables all right few less people if

103
00:05:19,180 --> 00:05:21,400
you don't know anything about any of

104
00:05:21,400 --> 00:05:23,560
these two that's okay we're going to go

105
00:05:23,560 --> 00:05:24,430
over them

106
00:05:24,430 --> 00:05:27,400
from scratch and sort of just do a quick

107
00:05:27,400 --> 00:05:29,560
deep dive into both of them and then

108
00:05:29,560 --> 00:05:31,270
we're going to understand how they could

109
00:05:31,270 --> 00:05:34,120
actually work together now I know the

110
00:05:34,120 --> 00:05:35,860
title of my talk is called reactive

111
00:05:35,860 --> 00:05:38,920
animations with CSS variables but I'm

112
00:05:38,920 --> 00:05:41,350
not going to be talking about react in

113
00:05:41,350 --> 00:05:45,430
this talk unfortunately however the good

114
00:05:45,430 --> 00:05:47,410
news is that the techniques that you

115
00:05:47,410 --> 00:05:49,420
learn here you could apply to any

116
00:05:49,420 --> 00:05:52,840
framework react angular ember or any of

117
00:05:52,840 --> 00:05:57,130
those other dead ones I'm kidding now

118
00:05:57,130 --> 00:06:03,310
react is good angular is great and CSS

119
00:06:03,310 --> 00:06:05,920
and JavaScript sort of seem at two

120
00:06:05,920 --> 00:06:08,080
different ends of the spectrum we have

121
00:06:08,080 --> 00:06:10,570
custom properties being very much a CSS

122
00:06:10,570 --> 00:06:13,120
thing and observables being very much a

123
00:06:13,120 --> 00:06:15,100
JavaScript thing so today you're gonna

124
00:06:15,100 --> 00:06:17,710
get sort of a taste of both and we're

125
00:06:17,710 --> 00:06:20,890
going to for whatever reason try to mix

126
00:06:20,890 --> 00:06:24,070
them together so through all this you

127
00:06:24,070 --> 00:06:28,150
might be asking yourself why why do we

128
00:06:28,150 --> 00:06:30,940
want to do this why do we want to mix

129
00:06:30,940 --> 00:06:34,390
you know CSS and JavaScript together in

130
00:06:34,390 --> 00:06:37,650
this way and the reason is because

131
00:06:37,650 --> 00:06:40,090
frankly you can make a lot of really

132
00:06:40,090 --> 00:06:46,780
cool animations using that we have right

133
00:06:46,780 --> 00:06:49,180
now a system

134
00:06:49,180 --> 00:06:51,639
doing things in JavaScript where it's

135
00:06:51,639 --> 00:06:54,250
imperative and by imperative it means

136
00:06:54,250 --> 00:06:57,250
we're telling JavaScript exactly what's

137
00:06:57,250 --> 00:06:59,680
to do how to apply each style to the

138
00:06:59,680 --> 00:07:02,380
element and because of that we can't

139
00:07:02,380 --> 00:07:05,139
either a quickly and we can't quickly

140
00:07:05,139 --> 00:07:07,800
create user interfaces that are rich in

141
00:07:07,800 --> 00:07:10,539
interaction and animation such as the

142
00:07:10,539 --> 00:07:13,600
ones you see here and I'm a little

143
00:07:13,600 --> 00:07:15,300
jealous of mobile developers because

144
00:07:15,300 --> 00:07:18,039
Android and iOS developers they

145
00:07:18,039 --> 00:07:20,800
basically get the tools to do this for

146
00:07:20,800 --> 00:07:23,530
free and us and the web were sort of

147
00:07:23,530 --> 00:07:28,270
left in the dark so let's first dive

148
00:07:28,270 --> 00:07:30,789
into how animations are currently done

149
00:07:30,789 --> 00:07:33,970
we have CSS animations which look like

150
00:07:33,970 --> 00:07:35,830
this most of you are familiar with this

151
00:07:35,830 --> 00:07:38,470
there's two types transitions and

152
00:07:38,470 --> 00:07:41,710
animations transitions are good from

153
00:07:41,710 --> 00:07:43,919
when you're going from point A to B and

154
00:07:43,919 --> 00:07:47,110
maybe going back from point B to point A

155
00:07:47,110 --> 00:07:49,900
and animations are good when you want to

156
00:07:49,900 --> 00:07:52,930
define explicit steps or keyframes in

157
00:07:52,930 --> 00:07:54,849
your animations so that it does a

158
00:07:54,849 --> 00:07:58,270
certain behavior that you want the

159
00:07:58,270 --> 00:08:01,120
beauty about this is that CSS animations

160
00:08:01,120 --> 00:08:03,789
are declarative they're reusable they're

161
00:08:03,789 --> 00:08:06,039
also really legible I mean you could

162
00:08:06,039 --> 00:08:08,680
read this and know exactly what's going

163
00:08:08,680 --> 00:08:10,990
on also these are built into the browser

164
00:08:10,990 --> 00:08:13,650
so you don't need any external library

165
00:08:13,650 --> 00:08:16,240
to pull in in order to get these

166
00:08:16,240 --> 00:08:18,820
animations supports also pretty good it

167
00:08:18,820 --> 00:08:21,699
goes back to IE 9 I believe for

168
00:08:21,699 --> 00:08:24,280
animations and hopefully no one uses ie

169
00:08:24,280 --> 00:08:28,419
8 anyway CSS animations can also be

170
00:08:28,419 --> 00:08:31,330
offloaded to the global processing unit

171
00:08:31,330 --> 00:08:34,779
the GPU which means they are not going

172
00:08:34,779 --> 00:08:37,169
to be choked up by the main thread

173
00:08:37,169 --> 00:08:38,979
especially if you're using a framework

174
00:08:38,979 --> 00:08:41,169
like react or angular we're using the

175
00:08:41,169 --> 00:08:44,169
main thread for a lot of things so it's

176
00:08:44,169 --> 00:08:46,300
best to you know keep things such as

177
00:08:46,300 --> 00:08:50,220
styling an animation off that thread

178
00:08:50,220 --> 00:08:54,670
also we could use selectors media

179
00:08:54,670 --> 00:08:57,010
queries and other things like that to

180
00:08:57,010 --> 00:09:00,220
define our animations so we could keep

181
00:09:00,220 --> 00:09:03,100
that separate from from the Dom

182
00:09:03,100 --> 00:09:04,900
so that when elements appear and

183
00:09:04,900 --> 00:09:07,330
disappear we don't have to keep track of

184
00:09:07,330 --> 00:09:10,420
those in CSS but also this has issues

185
00:09:10,420 --> 00:09:12,880
one of the big issue is that CSS

186
00:09:12,880 --> 00:09:15,100
animations are not dynamic

187
00:09:15,100 --> 00:09:17,770
we can't change these on the fly we

188
00:09:17,770 --> 00:09:21,220
can't for example set this translate Y

189
00:09:21,220 --> 00:09:24,070
value to anything other than 50% or

190
00:09:24,070 --> 00:09:26,260
anything other than the static value and

191
00:09:26,260 --> 00:09:28,570
they're pretty difficult to compose so

192
00:09:28,570 --> 00:09:30,700
if you want one animation to go after

193
00:09:30,700 --> 00:09:33,670
the other that's not the easiest thing

194
00:09:33,670 --> 00:09:36,880
trust me I've done it I've tried it's

195
00:09:36,880 --> 00:09:39,610
it's a pain in the ass it keeps me up at

196
00:09:39,610 --> 00:09:44,020
night so we also have JavaScript

197
00:09:44,020 --> 00:09:46,540
animations and this is the web

198
00:09:46,540 --> 00:09:50,650
animations API which is a pretty recent

199
00:09:50,650 --> 00:09:52,900
spec and it's actually really awesome

200
00:09:52,900 --> 00:09:55,210
because it is supported in mainstream

201
00:09:55,210 --> 00:09:58,150
browsers today and it looks almost

202
00:09:58,150 --> 00:10:01,600
exactly like the CSS animations example

203
00:10:01,600 --> 00:10:04,060
and that's because it pretty much is it

204
00:10:04,060 --> 00:10:07,120
uses the same underlying constructs in

205
00:10:07,120 --> 00:10:09,880
order to make the animations so this is

206
00:10:09,880 --> 00:10:12,670
the exact same animation we saw and this

207
00:10:12,670 --> 00:10:15,790
is offloaded from the main thread to the

208
00:10:15,790 --> 00:10:18,310
GPU so this is going to be really fast

209
00:10:18,310 --> 00:10:22,090
really performant and the beauty is that

210
00:10:22,090 --> 00:10:23,680
because it's in JavaScript

211
00:10:23,680 --> 00:10:27,160
it's dynamic we could add this to any

212
00:10:27,160 --> 00:10:31,060
element we could tell it to start till

213
00:10:31,060 --> 00:10:35,950
to stop whenever we want but the web

214
00:10:35,950 --> 00:10:38,200
animations API is not really supported

215
00:10:38,200 --> 00:10:40,360
in Internet Explorer but that's okay

216
00:10:40,360 --> 00:10:45,220
because nothing is there's also dynamic

217
00:10:45,220 --> 00:10:47,860
JavaScript animations too and this is

218
00:10:47,860 --> 00:10:49,660
sort of the problem that we're going to

219
00:10:49,660 --> 00:10:52,210
be tackling today this is how we do them

220
00:10:52,210 --> 00:10:55,750
today we use requestanimationframe which

221
00:10:55,750 --> 00:10:59,080
basically asks the browser which

222
00:10:59,080 --> 00:11:02,740
animation frame should I do this on so

223
00:11:02,740 --> 00:11:04,840
that I'm not choking the main thread and

224
00:11:04,840 --> 00:11:07,000
I'm making sure that my program my

225
00:11:07,000 --> 00:11:09,850
animations run at 60 frames per second

226
00:11:09,850 --> 00:11:13,240
and so we run this in the loop sometimes

227
00:11:13,240 --> 00:11:16,510
or we run this on events

228
00:11:16,510 --> 00:11:20,200
such as this one so over here we're

229
00:11:20,200 --> 00:11:22,210
moving the mouse and whenever we move

230
00:11:22,210 --> 00:11:26,050
the mouse we get a weekend events back

231
00:11:26,050 --> 00:11:28,540
and from that event we could grab the

232
00:11:28,540 --> 00:11:32,260
X&Y position from the mouse and we're

233
00:11:32,260 --> 00:11:34,270
directly applying it to the style of the

234
00:11:34,270 --> 00:11:37,570
box this is inline Styles this is bad

235
00:11:37,570 --> 00:11:40,960
for many reasons first of all inline

236
00:11:40,960 --> 00:11:42,880
styles are going to override any other

237
00:11:42,880 --> 00:11:45,460
styles you have it's hard to configure

238
00:11:45,460 --> 00:11:48,040
them you can't put it in the media query

239
00:11:48,040 --> 00:11:50,290
well actually you could you could listen

240
00:11:50,290 --> 00:11:52,840
for the browser resize event and change

241
00:11:52,840 --> 00:11:57,460
the animation based on that you're also

242
00:11:57,460 --> 00:12:00,580
updating the Dom a lot and upping the

243
00:12:00,580 --> 00:12:03,160
Dom is expensive for those of you who've

244
00:12:03,160 --> 00:12:06,070
heard Lynn's talk it's an expensive

245
00:12:06,070 --> 00:12:08,380
procedure and that's why react and other

246
00:12:08,380 --> 00:12:10,690
frameworks try to minimize updating the

247
00:12:10,690 --> 00:12:13,570
Dom as much as possible by doing this

248
00:12:13,570 --> 00:12:16,120
you're saying forget that I'm gonna

249
00:12:16,120 --> 00:12:17,740
update it all the time and there's

250
00:12:17,740 --> 00:12:21,240
nothing you could do about it also

251
00:12:21,240 --> 00:12:25,270
because this Dom elements the box has to

252
00:12:25,270 --> 00:12:27,280
exist at the time that you're adding the

253
00:12:27,280 --> 00:12:30,430
animation this could also be problematic

254
00:12:30,430 --> 00:12:32,590
if you're using frameworks such as

255
00:12:32,590 --> 00:12:36,370
angular react where Dom elements appear

256
00:12:36,370 --> 00:12:38,830
and disappear they're mounted and

257
00:12:38,830 --> 00:12:41,140
they're unmounted pretty much all the

258
00:12:41,140 --> 00:12:43,810
time so the problem with this is that

259
00:12:43,810 --> 00:12:46,450
you have to keep track of it and you

260
00:12:46,450 --> 00:12:48,820
have to make sure that when it's added

261
00:12:48,820 --> 00:12:50,680
back you're adding this event listener

262
00:12:50,680 --> 00:12:54,910
back on and also if you want to add more

263
00:12:54,910 --> 00:12:56,800
animations based on the same event

264
00:12:56,800 --> 00:12:59,020
listener you either have to hard code it

265
00:12:59,020 --> 00:13:01,720
inside this function right here or you

266
00:13:01,720 --> 00:13:03,880
have to add another event listener which

267
00:13:03,880 --> 00:13:05,800
could lead to memory leaks because

268
00:13:05,800 --> 00:13:07,630
that's a lot of event listeners to keep

269
00:13:07,630 --> 00:13:12,490
track of all right so let's talk real

270
00:13:12,490 --> 00:13:16,000
quick about CSS variables in case you

271
00:13:16,000 --> 00:13:18,190
know you might not know this is how a

272
00:13:18,190 --> 00:13:21,370
CSS variable is defined its prepended

273
00:13:21,370 --> 00:13:24,490
with two dashes I don't know why it

274
00:13:24,490 --> 00:13:28,710
stands out though and in order to use it

275
00:13:28,710 --> 00:13:29,920
you

276
00:13:29,920 --> 00:13:32,170
put it inside a selector such as root

277
00:13:32,170 --> 00:13:34,779
and this is the most common way that

278
00:13:34,779 --> 00:13:36,609
you're gonna see CSS variables being

279
00:13:36,609 --> 00:13:38,949
defined because this is going to cascade

280
00:13:38,949 --> 00:13:43,119
down and be applied to pretty much every

281
00:13:43,119 --> 00:13:49,059
selector that asks for the color and for

282
00:13:49,059 --> 00:13:51,730
this you would just put it inside a

283
00:13:51,730 --> 00:13:54,189
selector and that color is going to be

284
00:13:54,189 --> 00:13:58,660
applied to any element with you know

285
00:13:58,660 --> 00:14:01,029
with that class name and of course this

286
00:14:01,029 --> 00:14:04,509
follows cascading and it also follows

287
00:14:04,509 --> 00:14:07,119
specificity too so you could do some

288
00:14:07,119 --> 00:14:09,100
pretty cool things like putting this in

289
00:14:09,100 --> 00:14:11,379
a media query or putting it as a

290
00:14:11,379 --> 00:14:13,119
different color in a more specific

291
00:14:13,119 --> 00:14:15,669
selector so you have a high amounts of

292
00:14:15,669 --> 00:14:19,660
configurability with this now here's a

293
00:14:19,660 --> 00:14:21,999
really cool part about CSS variables and

294
00:14:21,999 --> 00:14:24,419
that's that you could define them in

295
00:14:24,419 --> 00:14:27,279
JavaScript so we have three methods to

296
00:14:27,279 --> 00:14:30,369
do this we have set property which is

297
00:14:30,369 --> 00:14:34,299
going to set the custom property and

298
00:14:34,299 --> 00:14:36,519
it's going to put it right on the HTML

299
00:14:36,519 --> 00:14:39,160
root element you could also get the

300
00:14:39,160 --> 00:14:42,730
property value like like so so you just

301
00:14:42,730 --> 00:14:45,220
pass in the variable name and it's gonna

302
00:14:45,220 --> 00:14:49,269
return that value to you as a string and

303
00:14:49,269 --> 00:14:52,059
there's also removed property you know

304
00:14:52,059 --> 00:14:56,079
if you ever need it it's waiting for my

305
00:14:56,079 --> 00:15:01,629
slides to update alright here we go so

306
00:15:01,629 --> 00:15:05,709
here's an example of this I didn't make

307
00:15:05,709 --> 00:15:08,949
this West boss made it a really cool

308
00:15:08,949 --> 00:15:12,699
example where I'm attaching what I just

309
00:15:12,699 --> 00:15:14,110
showed you

310
00:15:14,110 --> 00:15:16,799
updating the values with JavaScript and

311
00:15:16,799 --> 00:15:19,629
I'm attaching those to event listeners

312
00:15:19,629 --> 00:15:26,559
here so as you could see we could

313
00:15:26,559 --> 00:15:30,009
dynamically change all of these

314
00:15:30,009 --> 00:15:33,100
different variables and this is just

315
00:15:33,100 --> 00:15:35,980
using CSS if you can't see I'm changing

316
00:15:35,980 --> 00:15:40,989
that to blue and so our JavaScript is

317
00:15:40,989 --> 00:15:43,830
very small by small I mean

318
00:15:43,830 --> 00:15:45,600
you could barely read it because it's so

319
00:15:45,600 --> 00:15:50,580
tiny up there but just trust me these

320
00:15:50,580 --> 00:15:52,920
variables are being applied using just

321
00:15:52,920 --> 00:16:03,300
CSS here's another example if my slides

322
00:16:03,300 --> 00:16:07,450
decide to let me go to the next example

323
00:16:07,460 --> 00:16:10,320
what they probably won't so that's okay

324
00:16:10,320 --> 00:16:12,360
ah here we go

325
00:16:12,360 --> 00:16:20,880
I love conference Wi-Fi all right we'll

326
00:16:20,880 --> 00:16:22,740
skip that let's look at browser support

327
00:16:22,740 --> 00:16:26,090
so browser support for CSS variables

328
00:16:26,090 --> 00:16:28,320
believe it or not is actually very good

329
00:16:28,320 --> 00:16:31,500
and this is very recent in fact my iOS

330
00:16:31,500 --> 00:16:33,450
Safari right now is still at nine points

331
00:16:33,450 --> 00:16:39,180
two and nine point three I guess just

332
00:16:39,180 --> 00:16:43,380
came out so the only problem here though

333
00:16:43,380 --> 00:16:46,140
is that neither Internet Explorer or

334
00:16:46,140 --> 00:16:49,380
edge support you know custom properties

335
00:16:49,380 --> 00:16:52,680
but not a big surprise not a big problem

336
00:16:52,680 --> 00:16:56,130
either because we could use we could use

337
00:16:56,130 --> 00:16:58,560
plugins such as there's a couple post

338
00:16:58,560 --> 00:17:01,860
CSS plugins for variables that will

339
00:17:01,860 --> 00:17:06,330
default to the original value and ignore

340
00:17:06,330 --> 00:17:09,360
any other their custom variable

341
00:17:09,360 --> 00:17:12,510
declarations in your CSS so this is

342
00:17:12,510 --> 00:17:14,100
where progressive enhancement comes in

343
00:17:14,100 --> 00:17:17,430
really really handy preprocessor

344
00:17:17,430 --> 00:17:20,550
supports to is actually really good so

345
00:17:20,550 --> 00:17:22,970
it doesn't matter what you're using to

346
00:17:22,970 --> 00:17:27,199
to apply your CSS whether it's sass less

347
00:17:27,199 --> 00:17:31,050
stylist post CSS or inline Styles does

348
00:17:31,050 --> 00:17:33,840
not matter you could use CSS variables

349
00:17:33,840 --> 00:17:37,770
in any of those all right let's talk

350
00:17:37,770 --> 00:17:39,590
real quick now about rxjs

351
00:17:39,590 --> 00:17:42,000
observables which about half of you

352
00:17:42,000 --> 00:17:43,830
already know about and half of you maybe

353
00:17:43,830 --> 00:17:46,350
don't so this is going to be a real

354
00:17:46,350 --> 00:17:52,050
quick crash course arrays are finite

355
00:17:52,050 --> 00:17:54,930
collection of values so for example this

356
00:17:54,930 --> 00:17:57,390
array has six balls

357
00:17:57,390 --> 00:18:00,950
in the stream is sort of like an array

358
00:18:00,950 --> 00:18:04,590
except these values come in over time

359
00:18:04,590 --> 00:18:07,380
and they come at different times and

360
00:18:07,380 --> 00:18:10,770
streams can also have a beginning and an

361
00:18:10,770 --> 00:18:14,610
end so if you're a musician think of an

362
00:18:14,610 --> 00:18:19,770
array as a chord that you play or you

363
00:18:19,770 --> 00:18:22,110
know to compare that to a stream think

364
00:18:22,110 --> 00:18:24,090
of a stream as an arpeggio where you

365
00:18:24,090 --> 00:18:26,580
play one note at a time instead of all

366
00:18:26,580 --> 00:18:29,550
notes at the same time so a good way to

367
00:18:29,550 --> 00:18:31,890
think about this is that an observable

368
00:18:31,890 --> 00:18:35,750
stream is an array that's asynchronous

369
00:18:35,750 --> 00:18:38,940
the items could come in at any time it's

370
00:18:38,940 --> 00:18:41,280
immutable which means whenever you do

371
00:18:41,280 --> 00:18:43,830
something like an operator to an

372
00:18:43,830 --> 00:18:45,750
observable it's gonna give you a new

373
00:18:45,750 --> 00:18:47,429
observable instead of that same

374
00:18:47,429 --> 00:18:50,460
observable and it's subscribable so

375
00:18:50,460 --> 00:18:53,610
whenever an item is pushed onto the

376
00:18:53,610 --> 00:18:56,550
observable whatever is subscribing to it

377
00:18:56,550 --> 00:18:59,040
will know about it when it happens

378
00:18:59,040 --> 00:19:05,880
finally that's live loaded so over here

379
00:19:05,880 --> 00:19:07,890
we're applying CSS variables the same

380
00:19:07,890 --> 00:19:10,650
way I'm gonna backtrack a bit and we're

381
00:19:10,650 --> 00:19:13,440
adding a transition to it so what's

382
00:19:13,440 --> 00:19:15,690
going to happen is that by changing the

383
00:19:15,690 --> 00:19:20,940
values you see that using CSS we could

384
00:19:20,940 --> 00:19:27,090
smoothly transition each value all right

385
00:19:27,090 --> 00:19:30,390
back to our scheduled programming Thanks

386
00:19:30,390 --> 00:19:38,610
slides calm write browser support

387
00:19:38,610 --> 00:19:41,520
Internet Explorer sucks inline Styles

388
00:19:41,520 --> 00:19:45,000
suck all right moving on so creating an

389
00:19:45,000 --> 00:19:48,270
observable there's a way that manually

390
00:19:48,270 --> 00:19:49,559
create an observable but we're going to

391
00:19:49,559 --> 00:19:51,420
breeze through that and we're going to

392
00:19:51,420 --> 00:19:53,610
just figure out the most common ways of

393
00:19:53,610 --> 00:19:57,660
creating an observable so rxjs has a way

394
00:19:57,660 --> 00:20:00,059
to take normal arrays or normal I

395
00:20:00,059 --> 00:20:02,220
durable such as set and by calling

396
00:20:02,220 --> 00:20:03,809
thought from you could create an

397
00:20:03,809 --> 00:20:06,030
observable from that you could also

398
00:20:06,030 --> 00:20:07,950
create an observable from a promise

399
00:20:07,950 --> 00:20:10,800
which is basically going to be a

400
00:20:10,800 --> 00:20:13,320
REME of only one value which is the

401
00:20:13,320 --> 00:20:15,810
return value of the promise or whenever

402
00:20:15,810 --> 00:20:18,090
you call dot n on a promise that's the

403
00:20:18,090 --> 00:20:21,800
value that you get back we could also

404
00:20:21,800 --> 00:20:24,840
call observables from events which is

405
00:20:24,840 --> 00:20:27,120
what we're going to be using in the

406
00:20:27,120 --> 00:20:29,460
coming slides so we give it the Dom node

407
00:20:29,460 --> 00:20:31,410
and we give it the event name such as

408
00:20:31,410 --> 00:20:34,440
mousemove we could also call it from an

409
00:20:34,440 --> 00:20:37,170
events pattern so what an event pattern

410
00:20:37,170 --> 00:20:40,620
is is just a callback so there's a lot

411
00:20:40,620 --> 00:20:41,550
of libraries

412
00:20:41,550 --> 00:20:45,450
that's use callbacks for their event

413
00:20:45,450 --> 00:20:48,930
patterns such as hammer Jes and this is

414
00:20:48,930 --> 00:20:50,700
one that I use in a lot of my examples

415
00:20:50,700 --> 00:20:53,760
when showing observables with CSS

416
00:20:53,760 --> 00:20:56,310
variables because hammer J has abstracts

417
00:20:56,310 --> 00:20:58,980
all of these concepts and it's really

418
00:20:58,980 --> 00:21:02,490
easy to use so we could emulate rotating

419
00:21:02,490 --> 00:21:04,230
pinching pressing panning tapping

420
00:21:04,230 --> 00:21:06,210
swiping all the things that you're used

421
00:21:06,210 --> 00:21:09,570
to on mobile devices on regular websites

422
00:21:09,570 --> 00:21:12,000
so all you do is you passing the Dom

423
00:21:12,000 --> 00:21:14,640
elements to hammer and then we're going

424
00:21:14,640 --> 00:21:17,910
to have a event pattern which takes in

425
00:21:17,910 --> 00:21:20,820
the handler and passes that on to

426
00:21:20,820 --> 00:21:24,000
whatever hammer dot J s is doing so over

427
00:21:24,000 --> 00:21:25,680
here all we're doing is listening for

428
00:21:25,680 --> 00:21:29,360
pan now subscribing to an observable is

429
00:21:29,360 --> 00:21:33,660
pretty easy - all you do is you call dot

430
00:21:33,660 --> 00:21:36,330
subscribe on that observable and you

431
00:21:36,330 --> 00:21:38,640
passes in the function where every

432
00:21:38,640 --> 00:21:42,300
single value whenever you get a value

433
00:21:42,300 --> 00:21:44,120
you do something with it

434
00:21:44,120 --> 00:21:46,380
optionally you could pass in an error

435
00:21:46,380 --> 00:21:48,950
handler and a completion handler so

436
00:21:48,950 --> 00:21:52,800
pretty much the only thing you need to

437
00:21:52,800 --> 00:21:54,270
remember from this unless you want to

438
00:21:54,270 --> 00:21:57,330
dive into more details is that you could

439
00:21:57,330 --> 00:21:59,820
pass a handler to subscribe that does

440
00:21:59,820 --> 00:22:02,570
something every time an event is called

441
00:22:02,570 --> 00:22:06,440
there's also a bunch of operators - and

442
00:22:06,440 --> 00:22:09,020
the best thing to think about is that

443
00:22:09,020 --> 00:22:13,620
Aris rxjs is low - for observables so we

444
00:22:13,620 --> 00:22:16,170
have the same methods that we could use

445
00:22:16,170 --> 00:22:21,360
on the race such as filter where we if

446
00:22:21,360 --> 00:22:23,890
you imagine this as an array all

447
00:22:23,890 --> 00:22:26,260
is taking the green balls there's also

448
00:22:26,260 --> 00:22:28,960
map which works just as you would expect

449
00:22:28,960 --> 00:22:32,080
there's debounce which doesn't really

450
00:22:32,080 --> 00:22:34,240
happen two arrays because arrays are not

451
00:22:34,240 --> 00:22:38,410
time-based and there's scan where it's

452
00:22:38,410 --> 00:22:41,830
sort of like array reduce and we also

453
00:22:41,830 --> 00:22:45,220
have things such as flat map where if

454
00:22:45,220 --> 00:22:47,170
you think of an array of arrays and you

455
00:22:47,170 --> 00:22:49,870
want that to squish into one array flat

456
00:22:49,870 --> 00:22:56,220
map is basically the same thing okay so

457
00:22:56,220 --> 00:23:01,300
here is an example of using an

458
00:23:01,300 --> 00:23:04,240
observable to update the Dom all we're

459
00:23:04,240 --> 00:23:05,440
doing here is we're listening for the

460
00:23:05,440 --> 00:23:09,850
mass events and we're seeing you know

461
00:23:09,850 --> 00:23:13,270
the values change over here so think

462
00:23:13,270 --> 00:23:16,810
about this we're using an event to

463
00:23:16,810 --> 00:23:20,100
create an observable to update the Dom

464
00:23:20,100 --> 00:23:26,950
whenever the mouse moves so hopefully if

465
00:23:26,950 --> 00:23:37,529
the slides change they will

466
00:23:37,539 --> 00:23:39,929
are you thinking what I'm thinking I

467
00:23:39,929 --> 00:23:43,090
mean hopefully you are we talked about

468
00:23:43,090 --> 00:23:47,279
rxjs we talked about CSS variables and

469
00:23:47,279 --> 00:23:50,229
we sort of had a hint of how we could

470
00:23:50,229 --> 00:23:52,899
mix the two so what if we modeled

471
00:23:52,899 --> 00:23:57,009
observable events as CSS variables what

472
00:23:57,009 --> 00:23:59,409
I mean by this is a question that you

473
00:23:59,409 --> 00:24:02,049
might have all asked before is what if

474
00:24:02,049 --> 00:24:05,919
we could write JavaScript in CSS so this

475
00:24:05,919 --> 00:24:08,169
is where functional reactive animations

476
00:24:08,169 --> 00:24:11,379
come into play and we're gonna be doing

477
00:24:11,379 --> 00:24:13,929
this with CSS variables and rxjs

478
00:24:13,929 --> 00:24:16,479
observables and trust me there are

479
00:24:16,479 --> 00:24:19,570
awesome this is not a new idea dates

480
00:24:19,570 --> 00:24:23,710
back to 1997 in an academic paper called

481
00:24:23,710 --> 00:24:26,229
functional reactive animations which is

482
00:24:26,229 --> 00:24:28,720
one involving discrete changes due to

483
00:24:28,720 --> 00:24:31,929
events such as user behaviors or even

484
00:24:31,929 --> 00:24:34,450
other behaviors or behaviors that are

485
00:24:34,450 --> 00:24:37,539
based on other behaviors as well an

486
00:24:37,539 --> 00:24:39,609
important quote here is by allowing

487
00:24:39,609 --> 00:24:42,399
programmers to express the what we can

488
00:24:42,399 --> 00:24:44,649
hope to automate the hell react is

489
00:24:44,649 --> 00:24:47,679
really good at doing this but we're not

490
00:24:47,679 --> 00:24:49,330
the best at doing this with animations

491
00:24:49,330 --> 00:24:52,450
right now because right now the way we

492
00:24:52,450 --> 00:24:54,279
do this is we directly tell JavaScript

493
00:24:54,279 --> 00:24:57,099
how to style each element so here's a

494
00:24:57,099 --> 00:25:00,009
little preview of what we're going to be

495
00:25:00,009 --> 00:25:02,889
doing so taking the last Mouse example

496
00:25:02,889 --> 00:25:04,450
where whenever I move my mouse the

497
00:25:04,450 --> 00:25:07,659
values are updated we can see that the

498
00:25:07,659 --> 00:25:10,269
little Huskies head moves around and

499
00:25:10,269 --> 00:25:12,429
follows the mouse now there's a lot of

500
00:25:12,429 --> 00:25:13,539
moving parts here so you might think

501
00:25:13,539 --> 00:25:16,090
there's a lot of JavaScript but in fact

502
00:25:16,090 --> 00:25:19,299
that's all that's all we have everything

503
00:25:19,299 --> 00:25:21,549
is being applied to the CSS which is a

504
00:25:21,549 --> 00:25:23,470
crap-ton so we're not going to go

505
00:25:23,470 --> 00:25:27,940
through that and as I'm waiting for the

506
00:25:27,940 --> 00:25:31,149
slide to change actually no I'll do it

507
00:25:31,149 --> 00:25:35,559
right here that's the wrong slide all

508
00:25:35,559 --> 00:25:37,599
right so here's how we're going to do

509
00:25:37,599 --> 00:25:39,159
that we're going to need to use

510
00:25:39,159 --> 00:25:41,889
something called a subject now a subject

511
00:25:41,889 --> 00:25:45,369
in rxjs is just something that's both an

512
00:25:45,369 --> 00:25:48,009
observable and an observer so this

513
00:25:48,009 --> 00:25:50,279
subject is going to observe

514
00:25:50,279 --> 00:25:52,169
things such as whenever the mass moves

515
00:25:52,169 --> 00:25:54,719
whenever we scroll tap swipe maybe

516
00:25:54,719 --> 00:25:58,169
timers that we have it's going to send

517
00:25:58,169 --> 00:25:59,940
them off as a side effect to CSS

518
00:25:59,940 --> 00:26:02,580
variables using the techniques we

519
00:26:02,580 --> 00:26:05,039
learned about how to apply CSS variables

520
00:26:05,039 --> 00:26:08,450
with JavaScript and it's going to also

521
00:26:08,450 --> 00:26:11,309
dispatch to all of our observers

522
00:26:11,309 --> 00:26:13,710
whenever the values change of course

523
00:26:13,710 --> 00:26:16,109
that's optional I made a really really

524
00:26:16,109 --> 00:26:18,330
tiny library for this called our X CSS

525
00:26:18,330 --> 00:26:20,820
and it's on NPM if you want to try it

526
00:26:20,820 --> 00:26:23,570
and all it does is we take in

527
00:26:23,570 --> 00:26:26,279
observables such as whenever we move the

528
00:26:26,279 --> 00:26:30,479
mouse which of course is just from the

529
00:26:30,479 --> 00:26:33,450
mousemove event and we stick that into

530
00:26:33,450 --> 00:26:37,499
the RX CSS function so if you're

531
00:26:37,499 --> 00:26:39,210
familiar with redux think of this as

532
00:26:39,210 --> 00:26:41,969
combining reducers if you're not

533
00:26:41,969 --> 00:26:43,619
familiar with redux you have no idea

534
00:26:43,619 --> 00:26:45,450
what I'm talking about but basically you

535
00:26:45,450 --> 00:26:47,700
could just stick that inside the arc CSS

536
00:26:47,700 --> 00:26:49,859
function and then you could use these

537
00:26:49,859 --> 00:26:53,070
values directly inside your CSS so

538
00:26:53,070 --> 00:26:55,499
hopefully you could see how this is you

539
00:26:55,499 --> 00:26:58,769
know very very useful where we could

540
00:26:58,769 --> 00:27:01,769
define dynamic animations inside of our

541
00:27:01,769 --> 00:27:04,889
CSS and of course it only comes down to

542
00:27:04,889 --> 00:27:07,769
one point five six kilobytes if you're

543
00:27:07,769 --> 00:27:10,440
already using rxjs which in some of your

544
00:27:10,440 --> 00:27:12,869
applications you are so let's look at a

545
00:27:12,869 --> 00:27:16,409
real quick example of how we could apply

546
00:27:16,409 --> 00:27:18,359
this this is something that I found on

547
00:27:18,359 --> 00:27:20,789
dribble which you know is Iceland so

548
00:27:20,789 --> 00:27:22,139
it's fitting and it's a really cool

549
00:27:22,139 --> 00:27:25,139
animation where whenever you scroll did

550
00:27:25,139 --> 00:27:26,669
you see how the background image store

551
00:27:26,669 --> 00:27:30,749
faded out and disappeared and it also

552
00:27:30,749 --> 00:27:33,269
scaled in a little bit and also when

553
00:27:33,269 --> 00:27:36,450
they click the horse when they drag it

554
00:27:36,450 --> 00:27:40,139
it moves up and the text disappears so

555
00:27:40,139 --> 00:27:42,269
think in your mind's how am I gonna do

556
00:27:42,269 --> 00:27:44,460
this with just JavaScript probably

557
00:27:44,460 --> 00:27:46,889
involves a lot of code a lot of event

558
00:27:46,889 --> 00:27:49,889
listeners but turns out that we could do

559
00:27:49,889 --> 00:27:55,169
it with using arc CSS or defining those

560
00:27:55,169 --> 00:27:58,379
variables in JavaScript and sending them

561
00:27:58,379 --> 00:28:02,609
to CSS variables so this is what it

562
00:28:02,609 --> 00:28:03,570
looks like

563
00:28:03,570 --> 00:28:05,340
and this is Harper where we are right

564
00:28:05,340 --> 00:28:08,190
now and so as you can see a lot of

565
00:28:08,190 --> 00:28:10,890
things are happening but not a lot of

566
00:28:10,890 --> 00:28:13,170
JavaScript is happening over here all

567
00:28:13,170 --> 00:28:16,800
I'm doing is sending to observables you

568
00:28:16,800 --> 00:28:20,640
could see that we're doing the photo pan

569
00:28:20,640 --> 00:28:22,710
which is whenever we move our finger on

570
00:28:22,710 --> 00:28:27,030
the photo and we're also adding a scroll

571
00:28:27,030 --> 00:28:29,160
event so that the background image

572
00:28:29,160 --> 00:28:32,460
changes whenever we scroll and it's

573
00:28:32,460 --> 00:28:34,800
gonna be dynamic and it's going to also

574
00:28:34,800 --> 00:28:37,740
be performant I tested this ran in a

575
00:28:37,740 --> 00:28:44,490
smooth 60 frames per second so yeah it

576
00:28:44,490 --> 00:28:49,170
seems it's so why use CSS variables well

577
00:28:49,170 --> 00:28:53,100
there's a there's a few reasons first of

578
00:28:53,100 --> 00:28:54,720
all you don't get excessive Dom

579
00:28:54,720 --> 00:28:57,900
manipulation you might be familiar with

580
00:28:57,900 --> 00:29:00,630
if you're applying transitions to all of

581
00:29:00,630 --> 00:29:03,960
your to all of your elements on your Dom

582
00:29:03,960 --> 00:29:05,760
that there's gonna be a bunch of purple

583
00:29:05,760 --> 00:29:08,250
over here thankfully with CSS variables

584
00:29:08,250 --> 00:29:10,470
the only thing that's really being

585
00:29:10,470 --> 00:29:12,840
manipulated is that top root element

586
00:29:12,840 --> 00:29:14,970
over there that's what's changing and

587
00:29:14,970 --> 00:29:16,890
there's also a bunch of really good

588
00:29:16,890 --> 00:29:19,140
reasons such as you could debug it

589
00:29:19,140 --> 00:29:21,660
you could change CSS variables right in

590
00:29:21,660 --> 00:29:24,270
the debugger it doesn't care whether the

591
00:29:24,270 --> 00:29:26,250
notes there or not and you could think

592
00:29:26,250 --> 00:29:28,200
of a bunch of other cool uses - such as

593
00:29:28,200 --> 00:29:30,870
theming based on selectors progressive

594
00:29:30,870 --> 00:29:33,900
enhancement using calc and CSS variables

595
00:29:33,900 --> 00:29:37,290
work in SVG as well so your options are

596
00:29:37,290 --> 00:29:41,040
you know really limitless so what's next

597
00:29:41,040 --> 00:29:44,820
with CSS variables we could now do many

598
00:29:44,820 --> 00:29:48,360
things that that mobile app developers

599
00:29:48,360 --> 00:29:50,880
already can do such as constraint

600
00:29:50,880 --> 00:29:52,740
layouts which is laying things out based

601
00:29:52,740 --> 00:29:55,140
on where other things are or saying hey

602
00:29:55,140 --> 00:29:57,750
we need this at least 20 pixels from the

603
00:29:57,750 --> 00:30:00,660
right and other things such as physics

604
00:30:00,660 --> 00:30:04,980
modeling choreography making animations

605
00:30:04,980 --> 00:30:08,810
happen together in sequence and

606
00:30:08,810 --> 00:30:11,850
observables also play nice with canvas

607
00:30:11,850 --> 00:30:14,370
and WebGL so what this means is that

608
00:30:14,370 --> 00:30:17,350
when you do animations in CSS

609
00:30:17,350 --> 00:30:18,630
you could have those same values

610
00:30:18,630 --> 00:30:22,780
dispatched to both canvas WebGL anything

611
00:30:22,780 --> 00:30:25,210
else that could subscribe to observables

612
00:30:25,210 --> 00:30:27,669
which by the way there's a lot of things

613
00:30:27,669 --> 00:30:30,850
it's just JavaScript so this all

614
00:30:30,850 --> 00:30:34,120
happened based on me asking what if I'm

615
00:30:34,120 --> 00:30:36,490
not telling you to do this I'm telling

616
00:30:36,490 --> 00:30:38,710
you that this is just you know something

617
00:30:38,710 --> 00:30:41,320
that you could think about in something

618
00:30:41,320 --> 00:30:42,760
that you could experiment with because

619
00:30:42,760 --> 00:30:45,610
we all like experimenting and that's you

620
00:30:45,610 --> 00:30:47,320
know one of the great reasons that you

621
00:30:47,320 --> 00:30:50,140
know we do what we do so thank you James

622
00:30:50,140 --> 00:30:52,570
pump Iceland it's all the time I have

623
00:30:52,570 --> 00:30:56,080
and I'm David Cay piano on everywhere if

