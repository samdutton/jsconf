1
00:00:00,180 --> 00:00:13,100

[Music]

2
00:00:13,110 --> 00:00:17,850
hi guys my name is Tony Sebastian

3
00:00:17,850 --> 00:00:22,949
I'm from Kerala India and I work in DBS

4
00:00:22,949 --> 00:00:25,500
in Singapore and responsible for

5
00:00:25,500 --> 00:00:28,619
delivering digital consumer products in

6
00:00:28,619 --> 00:00:34,649
web and mobile across regions so here is

7
00:00:34,649 --> 00:00:36,870
what I am I'll be covering today where I

8
00:00:36,870 --> 00:00:39,090
will go through the journey that myself

9
00:00:39,090 --> 00:00:41,640
and my team went through so I'll be

10
00:00:41,640 --> 00:00:42,989
talking a little bit about the

11
00:00:42,989 --> 00:00:46,170
challenges and how we set our mission

12
00:00:46,170 --> 00:00:49,559
and the solution and the results that we

13
00:00:49,559 --> 00:00:51,809
have observe and we want to highlight

14
00:00:51,809 --> 00:00:54,570
that hopefully it will be a great

15
00:00:54,570 --> 00:01:01,090
takeaway for you guys so the challenges

16
00:01:01,100 --> 00:01:04,470
so in DBS scale we constantly have a

17
00:01:04,470 --> 00:01:06,900
massive amount of innovative initiative

18
00:01:06,900 --> 00:01:11,520
and enhancement in our pipeline and the

19
00:01:11,520 --> 00:01:13,140
second one is we want to reduce

20
00:01:13,140 --> 00:01:16,680
duplication of work so it's how very

21
00:01:16,680 --> 00:01:20,369
hard to team to know that when somebody

22
00:01:20,369 --> 00:01:23,220
have done something and how they can

23
00:01:23,220 --> 00:01:26,460
reuse those components or anything to

24
00:01:26,460 --> 00:01:29,189
their products so - we want to reduce

25
00:01:29,189 --> 00:01:34,330
the duplication of work so even though

26
00:01:34,340 --> 00:01:37,380
everything starts cymbal initially in a

27
00:01:37,380 --> 00:01:40,340
product and over the time it grows and

28
00:01:40,340 --> 00:01:43,920
we wipe you find very hard to handle the

29
00:01:43,920 --> 00:01:46,590
UI complexity so UI will become very

30
00:01:46,590 --> 00:01:49,530
complex so how do we handle that so

31
00:01:49,530 --> 00:01:51,990
these are the couple of challenges that

32
00:01:51,990 --> 00:01:55,740
we face in DBS particularly for the

33
00:01:55,740 --> 00:02:03,010
product development

34
00:02:03,020 --> 00:02:08,130
so given that challenges so my team have

35
00:02:08,130 --> 00:02:10,800
collaborated with various stakeholders

36
00:02:10,800 --> 00:02:14,640
like business design and legal

37
00:02:14,640 --> 00:02:17,370
compliance to address how we can address

38
00:02:17,370 --> 00:02:19,710
these challenges and we set up our

39
00:02:19,710 --> 00:02:22,620
mission what what should be our mission

40
00:02:22,620 --> 00:02:26,880
and one mission is that we have to build

41
00:02:26,880 --> 00:02:29,280
a modern front-end development framework

42
00:02:29,280 --> 00:02:32,070
which could accommodate our requirements

43
00:02:32,070 --> 00:02:35,370
and number two we need to build

44
00:02:35,370 --> 00:02:37,200
application and component bootstrap

45
00:02:37,200 --> 00:02:39,780
which could actually eliminate repeating

46
00:02:39,780 --> 00:02:42,959
work that the developers need to do so

47
00:02:42,959 --> 00:02:44,430
that they can focus on writing the

48
00:02:44,430 --> 00:02:47,670
business requirements so and number

49
00:02:47,670 --> 00:02:51,989
three is build reusable components this

50
00:02:51,989 --> 00:02:55,080
is to avoid developers to rebuild your

51
00:02:55,080 --> 00:02:58,140
components which they have built before

52
00:02:58,140 --> 00:03:00,750
and this would also help the

53
00:03:00,750 --> 00:03:02,760
organization's to streamline the

54
00:03:02,760 --> 00:03:10,790
branding across all products

55
00:03:10,800 --> 00:03:14,390
so with all this layout I would like to

56
00:03:14,390 --> 00:03:17,460
share what we have built and this might

57
00:03:17,460 --> 00:03:22,590
be interesting to you and we released or

58
00:03:22,590 --> 00:03:25,260
we developed a internal product we call

59
00:03:25,260 --> 00:03:27,090
we call it Falcon

60
00:03:27,090 --> 00:03:29,070
it's actually a UI framework with an

61
00:03:29,070 --> 00:03:30,770
opinionated set of tools and

62
00:03:30,770 --> 00:03:34,440
technologies and best practices to

63
00:03:34,440 --> 00:03:36,750
enable heavy reuse of the code across

64
00:03:36,750 --> 00:03:39,660
different team countries within DBS or

65
00:03:39,660 --> 00:03:40,920
within our company

66
00:03:40,920 --> 00:03:44,300
and we have built three important

67
00:03:44,300 --> 00:03:47,090
pillars a one is app structure

68
00:03:47,090 --> 00:03:49,650
generators and your component library

69
00:03:49,650 --> 00:03:53,400
and we choose react and redux as the

70
00:03:53,400 --> 00:03:56,010
base with other libraries and with all

71
00:03:56,010 --> 00:03:57,630
the capabilities like internalization

72
00:03:57,630 --> 00:04:01,620
Adobe Analytics a storybook react route

73
00:04:01,620 --> 00:04:06,000
so this is very opinionated set of tools

74
00:04:06,000 --> 00:04:09,540
and with the framework so I will just go

75
00:04:09,540 --> 00:04:15,450
through the the generate the app

76
00:04:15,450 --> 00:04:19,890
structure in detail so this is how our

77
00:04:19,890 --> 00:04:23,250
app structure looks like where we have

78
00:04:23,250 --> 00:04:26,760
the route reducer action saga and test

79
00:04:26,760 --> 00:04:29,760
where we have the components inside the

80
00:04:29,760 --> 00:04:32,490
app and inside the components we have

81
00:04:32,490 --> 00:04:36,540
reducer action saga and test so this is

82
00:04:36,540 --> 00:04:38,670
how typically a app structure looks like

83
00:04:38,670 --> 00:04:40,770
and it's standard across all the

84
00:04:40,770 --> 00:04:43,050
products that we use and developers are

85
00:04:43,050 --> 00:04:45,530
very comfortable with this structure and

86
00:04:45,530 --> 00:04:48,270
they can easily identify what they write

87
00:04:48,270 --> 00:04:51,890
and how they need to document it and

88
00:04:51,890 --> 00:04:55,410
this is the coolest thing that we built

89
00:04:55,410 --> 00:04:58,500
the two generators one is AB generator

90
00:04:58,500 --> 00:05:01,230
and UI generator so app generator is

91
00:05:01,230 --> 00:05:04,380
basically like you just give a command

92
00:05:04,380 --> 00:05:08,070
and it will ask you to - it will

93
00:05:08,070 --> 00:05:10,820
generate in the boilerplate and

94
00:05:10,820 --> 00:05:13,770
developers can straightaway right start

95
00:05:13,770 --> 00:05:15,870
writing the business requirements so

96
00:05:15,870 --> 00:05:18,520
even inside this app

97
00:05:18,520 --> 00:05:22,650
we have the generator for models routes

98
00:05:22,650 --> 00:05:26,490
a lot of things there inside there so

99
00:05:26,490 --> 00:05:29,860
developers are free to use or they can

100
00:05:29,860 --> 00:05:32,919
create the the structure acutely with

101
00:05:32,919 --> 00:05:35,259
this generators with this couple of

102
00:05:35,259 --> 00:05:37,479
commands and the other ECU I generator

103
00:05:37,479 --> 00:05:40,780
so this is based on the this is for the

104
00:05:40,780 --> 00:05:43,169
components so we have defined a

105
00:05:43,169 --> 00:05:45,280
boilerplate for building reusable

106
00:05:45,280 --> 00:05:47,050
components so it's standard across the

107
00:05:47,050 --> 00:05:50,410
the products and it's also defined the

108
00:05:50,410 --> 00:05:52,509
component structures and how you should

109
00:05:52,509 --> 00:05:57,759
document it so I will just go through

110
00:05:57,759 --> 00:05:59,949
the the number third is the UI component

111
00:05:59,949 --> 00:06:04,150
libraries so UI component libraries we

112
00:06:04,150 --> 00:06:07,389
use storybook internally to build the

113
00:06:07,389 --> 00:06:09,069
presentation components where it is

114
00:06:09,069 --> 00:06:11,889
reusable across product projects and

115
00:06:11,889 --> 00:06:14,259
hardened through open collaboration with

116
00:06:14,259 --> 00:06:15,940
the design and the business teams and

117
00:06:15,940 --> 00:06:18,340
it's configurable to suit a range of

118
00:06:18,340 --> 00:06:21,520
intended use cases and the good thing is

119
00:06:21,520 --> 00:06:25,780
it's t-mobile and thanks to storybook

120
00:06:25,780 --> 00:06:28,240
for recognizing us along with other tech

121
00:06:28,240 --> 00:06:32,229
giants and thanks and I would like to

122
00:06:32,229 --> 00:06:35,400
just present like what how does our

123
00:06:35,400 --> 00:06:38,320
component libraries looks like so these

124
00:06:38,320 --> 00:06:41,919
are the couple of the component

125
00:06:41,919 --> 00:06:44,370
libraries that we use in channel II and

126
00:06:44,370 --> 00:06:46,840
we have the libraries for the internet

127
00:06:46,840 --> 00:06:49,479
banking your forms and everything is

128
00:06:49,479 --> 00:06:51,630
documented well so that Bella preserve

129
00:06:51,630 --> 00:06:56,409
this can easily use this modules in

130
00:06:56,409 --> 00:06:58,810
their products and we use the semantic

131
00:06:58,810 --> 00:07:03,159
version to upgrade each libraries but

132
00:07:03,159 --> 00:07:05,349
how we achieve all these things and how

133
00:07:05,349 --> 00:07:09,880
we implemented this in our products so

134
00:07:09,880 --> 00:07:13,330
that's a challenging part but this this

135
00:07:13,330 --> 00:07:16,000
is the the thing that we want to also

136
00:07:16,000 --> 00:07:19,030
highlight and share principles that we

137
00:07:19,030 --> 00:07:24,009
follow so number one is no reinvent so

138
00:07:24,009 --> 00:07:25,750
given that all the production like ready

139
00:07:25,750 --> 00:07:27,479
libraries are built by the community

140
00:07:27,479 --> 00:07:30,639
there is no benefit to build by our own

141
00:07:30,639 --> 00:07:33,220
so in-house library

142
00:07:33,220 --> 00:07:36,400
tend not to cover in a fuse cases and we

143
00:07:36,400 --> 00:07:39,970
find it hard to get up to date so you

144
00:07:39,970 --> 00:07:42,220
introduce only minimal libraries if

145
00:07:42,220 --> 00:07:45,880
required and number two reduce choices

146
00:07:45,880 --> 00:07:48,250
we have too many libraries in the NPM

147
00:07:48,250 --> 00:07:50,710
and developers often confuse to choose

148
00:07:50,710 --> 00:07:53,320
the right libraries and these are all

149
00:07:53,320 --> 00:07:55,210
that all time consuming and not

150
00:07:55,210 --> 00:07:56,170
productive

151
00:07:56,170 --> 00:07:58,180
so using this Falcon framework that we

152
00:07:58,180 --> 00:08:00,760
built the product in term product team

153
00:08:00,760 --> 00:08:03,670
can focus on building things that brings

154
00:08:03,670 --> 00:08:06,630
valid to the business and our three

155
00:08:06,630 --> 00:08:09,690
standard guidelines so we defined

156
00:08:09,690 --> 00:08:12,790
recommended application layout structure

157
00:08:12,790 --> 00:08:15,120
components to bring consistent

158
00:08:15,120 --> 00:08:17,200
development and production environment

159
00:08:17,200 --> 00:08:20,140
to the product teams based on our data

160
00:08:20,140 --> 00:08:22,720
we also defined the browser support

161
00:08:22,720 --> 00:08:25,900
policy for where we want to build our

162
00:08:25,900 --> 00:08:28,240
product to the trajector customers not

163
00:08:28,240 --> 00:08:31,570
just to the something that is not

164
00:08:31,570 --> 00:08:34,360
relevant to a customer and number four

165
00:08:34,360 --> 00:08:36,940
is the flexible so we were we don't want

166
00:08:36,940 --> 00:08:39,640
to limit teams potential instead we want

167
00:08:39,640 --> 00:08:42,220
to encourage team to find a better way

168
00:08:42,220 --> 00:08:45,640
to improve together also also although

169
00:08:45,640 --> 00:08:47,320
this contradict with our opinion two

170
00:08:47,320 --> 00:08:49,330
choices most of the team preferred

171
00:08:49,330 --> 00:08:51,370
decisions made for them so that they can

172
00:08:51,370 --> 00:08:57,840
focus on building products so apart

173
00:08:57,840 --> 00:09:01,420
apart from the benefits so I would like

174
00:09:01,420 --> 00:09:03,790
to share the results what we have

175
00:09:03,790 --> 00:09:06,580
observed or what we have got through

176
00:09:06,580 --> 00:09:12,370
this journey so we and if I'd that there

177
00:09:12,370 --> 00:09:14,830
is a drastic decrease in time to first

178
00:09:14,830 --> 00:09:17,640
meaningful pane for product remake and

179
00:09:17,640 --> 00:09:20,620
the second is we work very closely with

180
00:09:20,620 --> 00:09:25,030
the design design and the business to

181
00:09:25,030 --> 00:09:26,500
build the standardize component and

182
00:09:26,500 --> 00:09:29,410
consistent experience so there's operon

183
00:09:29,410 --> 00:09:32,740
collaboration and first iterations

184
00:09:32,740 --> 00:09:38,530
between the the products and last happy

185
00:09:38,530 --> 00:09:40,840
developers so we value our developers

186
00:09:40,840 --> 00:09:43,520
and developers feel happy and confirm

187
00:09:43,520 --> 00:09:45,110
working with the chord base and they

188
00:09:45,110 --> 00:09:48,140
find it hard easier to add enhancement

189
00:09:48,140 --> 00:09:51,050
to existing products and also easier

190
00:09:51,050 --> 00:09:54,380
sprint planning since react is easily

191
00:09:54,380 --> 00:09:58,760
composable so these are the things that

192
00:09:58,760 --> 00:10:02,210
work for us just to recap so on this

193
00:10:02,210 --> 00:10:05,020
digital product transformation to build

194
00:10:05,020 --> 00:10:08,570
consistent user experience and high

195
00:10:08,570 --> 00:10:10,850
quality products these are the things

196
00:10:10,850 --> 00:10:11,990
that work for us

197
00:10:11,990 --> 00:10:14,630
one is the app structure where it gives

198
00:10:14,630 --> 00:10:17,920
the developers to develop or start

199
00:10:17,920 --> 00:10:20,390
onboarding start onboarding the product

200
00:10:20,390 --> 00:10:24,080
quickly and generators where app

201
00:10:24,080 --> 00:10:26,120
generator and component charities help

202
00:10:26,120 --> 00:10:28,430
us to kickstart development and also

203
00:10:28,430 --> 00:10:31,060
enable us to have faster iteration and

204
00:10:31,060 --> 00:10:33,800
number three is the UI component library

205
00:10:33,800 --> 00:10:36,410
with storybook worked well for us for to

206
00:10:36,410 --> 00:10:38,000
ensure components are seamlessly

207
00:10:38,000 --> 00:10:39,920
integrated with the products also

208
00:10:39,920 --> 00:10:43,040
documented for referencing anytime last

209
00:10:43,040 --> 00:10:45,800
not but least easier unit testing so we

210
00:10:45,800 --> 00:10:48,920
find it found it very easier to do unit

211
00:10:48,920 --> 00:10:51,020
testing with set of libraries that we

212
00:10:51,020 --> 00:10:53,960
choose like relax act or redux saga

213
00:10:53,960 --> 00:10:57,160
etcetera thank you

