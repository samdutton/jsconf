1
00:00:09,760 --> 00:00:14,150

so good morning guys

2
00:00:14,160 --> 00:00:22,920
you with me perfect so I'm yen's and I'm

3
00:00:22,920 --> 00:00:26,759
going to talk to you about storage so

4
00:00:26,759 --> 00:00:28,380
this is going to be the hitchhiker's

5
00:00:28,380 --> 00:00:33,120
guide to all things storage we don't

6
00:00:33,120 --> 00:00:35,250
have too much time when I'm trying to

7
00:00:35,250 --> 00:00:37,769
pack it all into this remaining 25

8
00:00:37,769 --> 00:00:44,790
minutes yeah I do work for the company

9
00:00:44,790 --> 00:00:49,530
oxy boo very awesome company and we open

10
00:00:49,530 --> 00:00:53,190
the mobile web yes we do so back to

11
00:00:53,190 --> 00:00:56,610
topic client site persistent storage

12
00:00:56,610 --> 00:01:00,120
which is a kind of a long awful term but

13
00:01:00,120 --> 00:01:02,699
in case that you do not know what that

14
00:01:02,699 --> 00:01:05,160
means this is about storing data in

15
00:01:05,160 --> 00:01:07,680
sight of the browser in opposition to

16
00:01:07,680 --> 00:01:10,410
the traditional approaches where we send

17
00:01:10,410 --> 00:01:12,690
data to the server and storage on the

18
00:01:12,690 --> 00:01:16,890
server side we do store it on the client

19
00:01:16,890 --> 00:01:20,399
side beat in a browser a device in air

20
00:01:20,399 --> 00:01:24,539
application and I will give you a

21
00:01:24,539 --> 00:01:29,929
walkthrough through the current existing

22
00:01:29,929 --> 00:01:34,860
storage engines thanks a bunch we were

23
00:01:34,860 --> 00:01:37,770
beginning in the past and move on to the

24
00:01:37,770 --> 00:01:40,950
future I'll talk to you about existing

25
00:01:40,950 --> 00:01:42,959
frameworks that ate you and assist you

26
00:01:42,959 --> 00:01:47,450
and storing tasks we'll have a look at

27
00:01:47,450 --> 00:01:51,840
mobile oddities and we also if time

28
00:01:51,840 --> 00:01:53,720
allows we'll have a short glance on

29
00:01:53,720 --> 00:01:56,700
performance and security and of course

30
00:01:56,700 --> 00:01:59,360
they'll be ie Beijing but there will be

31
00:01:59,360 --> 00:02:02,399
acknowledgment of Microsoft's work in

32
00:02:02,399 --> 00:02:06,239
this field so why do we need client-side

33
00:02:06,239 --> 00:02:09,660
persistent storage we need it for

34
00:02:09,660 --> 00:02:11,280
several things on the one hand we needed

35
00:02:11,280 --> 00:02:14,090
for web apps that have a flying support

36
00:02:14,090 --> 00:02:17,580
also known as work now soon later and

37
00:02:17,580 --> 00:02:21,220
we're online most of the time so

38
00:02:21,220 --> 00:02:25,940
but being offline capable becomes more

39
00:02:25,940 --> 00:02:28,430
and more important we need a perhaps to

40
00:02:28,430 --> 00:02:31,610
just need persistence just for stuff

41
00:02:31,610 --> 00:02:33,740
like user preferences application

42
00:02:33,740 --> 00:02:36,140
settings and we needed as some

43
00:02:36,140 --> 00:02:37,520
controllable alternative to cache

44
00:02:37,520 --> 00:02:40,100
manifest on cache manifest is great it's

45
00:02:40,100 --> 00:02:42,650
html5 or the bus and everything but it's

46
00:02:42,650 --> 00:02:44,090
not a storage engine we cannot control

47
00:02:44,090 --> 00:02:47,870
it cannot get data from it and of course

48
00:02:47,870 --> 00:02:50,530
we need it for all things mobile if

49
00:02:50,530 --> 00:02:52,760
you're tethering on a train you would

50
00:02:52,760 --> 00:02:56,870
want to pull the data over the wire over

51
00:02:56,870 --> 00:02:58,100
and over again if you do have the

52
00:02:58,100 --> 00:03:01,160
alternative to store it at the client

53
00:03:01,160 --> 00:03:04,640
site okay let's start with a walkthrough

54
00:03:04,640 --> 00:03:06,800
as I said we will be beginning in the

55
00:03:06,800 --> 00:03:08,630
dark past and moving towards the bright

56
00:03:08,630 --> 00:03:11,390
future and we have a more detailed look

57
00:03:11,390 --> 00:03:15,970
at two of the engines presented here

58
00:03:15,970 --> 00:03:20,210
which are currently the best available

59
00:03:20,210 --> 00:03:27,170
engines okay it all started with cookies

60
00:03:27,170 --> 00:03:31,910
which are obviously the worst choice to

61
00:03:31,910 --> 00:03:34,880
store Adam they have the lowest size

62
00:03:34,880 --> 00:03:37,970
limits of all storage engines they are

63
00:03:37,970 --> 00:03:40,160
sent to the server on every request also

64
00:03:40,160 --> 00:03:42,590
known as how to slow down your ex

65
00:03:42,590 --> 00:03:46,210
application they have basically no api

66
00:03:46,210 --> 00:03:48,080
you need to write your own wrapper

67
00:03:48,080 --> 00:03:51,380
functions or you rely on the framework

68
00:03:51,380 --> 00:03:53,510
that that's the work for you so I guess

69
00:03:53,510 --> 00:03:55,010
you know everything about cookie so

70
00:03:55,010 --> 00:03:58,400
let's quickly move on to Microsoft

71
00:03:58,400 --> 00:04:02,570
achievement user data behavior Microsoft

72
00:04:02,570 --> 00:04:05,380
was the first to offer an alternative

73
00:04:05,380 --> 00:04:08,990
for persistent storage client site and

74
00:04:08,990 --> 00:04:12,860
it's been there since IE 5.5 and it

75
00:04:12,860 --> 00:04:17,209
still is there in current IES it's a

76
00:04:17,209 --> 00:04:19,850
nice key value store but it has some

77
00:04:19,850 --> 00:04:23,900
issues with size because the available

78
00:04:23,900 --> 00:04:27,190
storage size depends on the zone let the

79
00:04:27,190 --> 00:04:29,290
current website is associated to and

80
00:04:29,290 --> 00:04:33,660
that differs from 512k down to 64 k so

81
00:04:33,660 --> 00:04:40,840
64 KS what you can our reliable work

82
00:04:40,840 --> 00:04:45,910
with it's a special behavior that can be

83
00:04:45,910 --> 00:04:50,650
applied to HTML elements and what's

84
00:04:50,650 --> 00:04:52,480
important and what's not envy msdn

85
00:04:52,480 --> 00:04:55,750
article can be also apply to you a link

86
00:04:55,750 --> 00:04:57,910
element in a style element which can

87
00:04:57,910 --> 00:05:00,550
reside and they had and therefore our

88
00:05:00,550 --> 00:05:05,080
independent of dom state next up is the

89
00:05:05,080 --> 00:05:08,710
global storage which was an early

90
00:05:08,710 --> 00:05:12,250
implementation of the early storage

91
00:05:12,250 --> 00:05:14,440
draft which was then to become local

92
00:05:14,440 --> 00:05:16,950
storage was implemented by mozilla in

93
00:05:16,950 --> 00:05:21,850
firefox to choice in 2006 i guess it's

94
00:05:21,850 --> 00:05:24,730
still there in firefox and as far as i

95
00:05:24,730 --> 00:05:27,270
know it's going to stay inside a firefox

96
00:05:27,270 --> 00:05:30,790
but well yes it's firefox only so that's

97
00:05:30,790 --> 00:05:32,470
the big drawback but that was the first

98
00:05:32,470 --> 00:05:36,190
real key value store inside of a browser

99
00:05:36,190 --> 00:05:42,390
with a nice API having get input methods

100
00:05:42,390 --> 00:05:47,250
next one is SQLite implementations um

101
00:05:47,250 --> 00:05:52,090
well it's a database it has kind of

102
00:05:52,090 --> 00:05:53,980
broad support as it's there in

103
00:05:53,980 --> 00:05:56,890
webkit-based browsers and an opera 10 so

104
00:05:56,890 --> 00:05:59,680
there are some routers supporting SQLite

105
00:05:59,680 --> 00:06:02,980
and as compared to the other storage

106
00:06:02,980 --> 00:06:06,220
engine a good size I get more into

107
00:06:06,220 --> 00:06:12,190
detail later o con CS it's a it's no key

108
00:06:12,190 --> 00:06:17,260
value store it's a database most

109
00:06:17,260 --> 00:06:19,419
scenarios where we need client sites

110
00:06:19,419 --> 00:06:21,820
storage we do not need a database but we

111
00:06:21,820 --> 00:06:25,570
need a key value store and another thing

112
00:06:25,570 --> 00:06:30,040
is that there is no specification on how

113
00:06:30,040 --> 00:06:32,740
the SQLite implementation should be

114
00:06:32,740 --> 00:06:35,680
implemented in the browser

115
00:06:35,680 --> 00:06:41,560
um yeah it's get some details here rule

116
00:06:41,560 --> 00:06:44,470
of thumb sqlite reads pretty fast and

117
00:06:44,470 --> 00:06:47,979
writes annoyingly slow especially on

118
00:06:47,979 --> 00:06:50,710
large amounts of data writing a check of

119
00:06:50,710 --> 00:06:53,380
one megabyte can take up two seconds and

120
00:06:53,380 --> 00:06:55,240
on a mobile device can take half a

121
00:06:55,240 --> 00:06:58,780
minute and another annoying thing is

122
00:06:58,780 --> 00:07:01,509
that Chrome has a limit on the single

123
00:07:01,509 --> 00:07:05,070
field size no matter if you choose

124
00:07:05,070 --> 00:07:08,710
binary large object as a column type it

125
00:07:08,710 --> 00:07:12,160
still has a limit other browsers do not

126
00:07:12,160 --> 00:07:14,680
have that well as I mentioned before

127
00:07:14,680 --> 00:07:19,449
there's no real specification I guess um

128
00:07:19,449 --> 00:07:21,900
well most of them if not all of the

129
00:07:21,900 --> 00:07:24,400
implementations are just third-party

130
00:07:24,400 --> 00:07:26,889
sqlite implementations just baked into

131
00:07:26,889 --> 00:07:33,639
the browser remember if you're using

132
00:07:33,639 --> 00:07:35,710
SQLite remember to use variable binding

133
00:07:35,710 --> 00:07:37,960
those question marks inside a few

134
00:07:37,960 --> 00:07:39,820
queries they also work inside of the

135
00:07:39,820 --> 00:07:44,380
browser a very annoying thing about

136
00:07:44,380 --> 00:07:47,169
SQLite implementations across all

137
00:07:47,169 --> 00:07:50,340
browsers is that they have the habit of

138
00:07:50,340 --> 00:07:53,320
sometimes failing silently not storing

139
00:07:53,320 --> 00:07:56,169
your data but not throwing an error not

140
00:07:56,169 --> 00:07:59,470
calling your arrow callbacks so this

141
00:07:59,470 --> 00:08:02,169
makes SQLite pretty unreliable and in my

142
00:08:02,169 --> 00:08:04,380
tests that happened over and over again

143
00:08:04,380 --> 00:08:09,539
but um and check your worker support

144
00:08:09,539 --> 00:08:12,400
this is there in chrome dev channel and

145
00:08:12,400 --> 00:08:18,370
I bet it's not there and in 5 4 4 I

146
00:08:18,370 --> 00:08:19,990
guess what I'm not sure but this will

147
00:08:19,990 --> 00:08:26,320
come and doing this work apart from the

148
00:08:26,320 --> 00:08:30,820
UI thread is definitely a good idea some

149
00:08:30,820 --> 00:08:35,500
are notes on size limits that differs

150
00:08:35,500 --> 00:08:38,829
from browser to browser but you can be

151
00:08:38,829 --> 00:08:40,300
assured that you've got five megabytes

152
00:08:40,300 --> 00:08:41,510
of data which

153
00:08:41,510 --> 00:08:48,230
um a big deal for for most scenarios and

154
00:08:48,230 --> 00:08:50,450
Don's a fairy and an opera you have up

155
00:08:50,450 --> 00:08:54,080
to unlimited storage um but that depends

156
00:08:54,080 --> 00:08:57,560
on user choice user may reject your

157
00:08:57,560 --> 00:08:59,990
request for more storage and well then

158
00:08:59,990 --> 00:09:02,180
you don't have the amount but basically

159
00:09:02,180 --> 00:09:07,430
technically it could be armed unlimited

160
00:09:07,430 --> 00:09:11,240
on Safari and opera I'm chrome you get

161
00:09:11,240 --> 00:09:14,330
you could get unlimited storage in for

162
00:09:14,330 --> 00:09:16,790
the Chrome Web Apps there is a manifest

163
00:09:16,790 --> 00:09:18,890
and you can request unlimited storage

164
00:09:18,890 --> 00:09:21,500
there I don't know if this has landed

165
00:09:21,500 --> 00:09:30,860
yet but it will I guess very soon opera

166
00:09:30,860 --> 00:09:33,500
is pretty cool at your opera shows if

167
00:09:33,500 --> 00:09:35,390
you need more than four megabytes of

168
00:09:35,390 --> 00:09:38,900
data it shows a pop-up box to the user

169
00:09:38,900 --> 00:09:41,840
with a drop down and really has to

170
00:09:41,840 --> 00:09:44,210
divert unlimited in there so unlimited

171
00:09:44,210 --> 00:09:50,150
is uh well pretty cool okay next up is

172
00:09:50,150 --> 00:09:54,170
local storage first I'm a bit be asked

173
00:09:54,170 --> 00:09:55,670
here because I personally think that

174
00:09:55,670 --> 00:09:57,440
local storage is by far the best storage

175
00:09:57,440 --> 00:10:01,370
engine currently available it's there in

176
00:10:01,370 --> 00:10:05,620
all current major browsers even in ie8

177
00:10:05,620 --> 00:10:09,460
so if you're building a modern web app

178
00:10:09,460 --> 00:10:12,410
local storage is there for you it has

179
00:10:12,410 --> 00:10:17,120
the perfect API because it's a plane key

180
00:10:17,120 --> 00:10:20,510
value store let's get set item get item

181
00:10:20,510 --> 00:10:23,720
methods clear and delete item basically

182
00:10:23,720 --> 00:10:25,820
that's all oh there are some more

183
00:10:25,820 --> 00:10:30,100
properties but if it's a simple API and

184
00:10:30,100 --> 00:10:33,680
very cool to code with it um local

185
00:10:33,680 --> 00:10:36,740
storage is still in draft status but

186
00:10:36,740 --> 00:10:39,290
it's implemented across the browsers

187
00:10:39,290 --> 00:10:41,960
with the exact same API so chances are

188
00:10:41,960 --> 00:10:44,390
this is not going to change so the code

189
00:10:44,390 --> 00:10:46,850
you write for local storage will be

190
00:10:46,850 --> 00:10:48,860
usable in the future for a very very

191
00:10:48,860 --> 00:10:52,790
long time and again also with local

192
00:10:52,790 --> 00:10:53,490
storage

193
00:10:53,490 --> 00:10:55,440
if you use it check for worker support

194
00:10:55,440 --> 00:10:57,120
also in chrome dev channel there's

195
00:10:57,120 --> 00:10:59,790
workers support for local storage and

196
00:10:59,790 --> 00:11:02,220
I'm pretty sure it will get into other

197
00:11:02,220 --> 00:11:04,680
browsers as well so that you can do your

198
00:11:04,680 --> 00:11:07,620
storage tasks outside of the main UI

199
00:11:07,620 --> 00:11:11,190
thread and keep things flowing no points

200
00:11:11,190 --> 00:11:14,180
absolutely yeah okay maybe one thing

201
00:11:14,180 --> 00:11:24,270
sighs again is an issue okay I gotta

202
00:11:24,270 --> 00:11:31,830
stop here remote isn't working sighs is

203
00:11:31,830 --> 00:11:36,180
kind of complicated but still I got some

204
00:11:36,180 --> 00:11:46,200
numbers for you the spec recommends the

205
00:11:46,200 --> 00:11:48,149
size of 5 megabytes but unfortunately

206
00:11:48,149 --> 00:11:49,560
Safari has a limit of two megabytes

207
00:11:49,560 --> 00:11:52,820
which is again if you're storing

208
00:11:52,820 --> 00:11:59,730
application settings or JSON object may

209
00:11:59,730 --> 00:12:01,620
be enough but what would have been nice

210
00:12:01,620 --> 00:12:04,800
if Safari had also five megabytes as the

211
00:12:04,800 --> 00:12:07,620
specification recommended there is no

212
00:12:07,620 --> 00:12:09,450
field size limit and local storage you

213
00:12:09,450 --> 00:12:12,450
can store all the two megabytes or five

214
00:12:12,450 --> 00:12:20,610
megabytes in one field there's these two

215
00:12:20,610 --> 00:12:23,070
hundred megabytes in Firefox is for

216
00:12:23,070 --> 00:12:26,399
offline apps Fairfax determines offline

217
00:12:26,399 --> 00:12:28,440
apps by the protocol if your application

218
00:12:28,440 --> 00:12:32,370
is from from file or from localhost then

219
00:12:32,370 --> 00:12:35,310
you get 200 megabytes of data but you

220
00:12:35,310 --> 00:12:36,810
should be careful writing 200 megabytes

221
00:12:36,810 --> 00:12:41,190
of data this can get real slow an opera

222
00:12:41,190 --> 00:12:42,839
we have the same dialogue as we have it

223
00:12:42,839 --> 00:12:45,360
with sqlite databases if you attempt to

224
00:12:45,360 --> 00:12:47,190
store more than four megabytes the user

225
00:12:47,190 --> 00:12:50,310
gets a pop-up dialog shown with a

226
00:12:50,310 --> 00:12:53,579
drop-down box in it and again the user

227
00:12:53,579 --> 00:12:57,930
may select unlimited so well opera is

228
00:12:57,930 --> 00:12:59,760
pretty cool in there you can have

229
00:12:59,760 --> 00:13:03,750
unlimited storage on the user but

230
00:13:03,750 --> 00:13:06,480
you know better be careful no user

231
00:13:06,480 --> 00:13:08,880
really wants that you store I don't know

232
00:13:08,880 --> 00:13:13,280
one gigabytes of data on his file system

233
00:13:13,280 --> 00:13:16,640
again in Chrome Web Apps you might get

234
00:13:16,640 --> 00:13:19,620
unlimited space too if you request it in

235
00:13:19,620 --> 00:13:24,960
the manifest I'll another very cool

236
00:13:24,960 --> 00:13:28,440
thing about local storage is the storage

237
00:13:28,440 --> 00:13:31,350
event which is basically a great idea

238
00:13:31,350 --> 00:13:35,160
the right operations are not gonna have

239
00:13:35,160 --> 00:13:36,990
to be synchronous they can be done a

240
00:13:36,990 --> 00:13:43,680
synchronous and whenever a change of the

241
00:13:43,680 --> 00:13:46,410
storage object happens a starchy event

242
00:13:46,410 --> 00:13:51,750
should be fired well and on the left

243
00:13:51,750 --> 00:13:56,700
these are the top rows are the keys they

244
00:13:56,700 --> 00:13:58,500
should be in the event and there's some

245
00:13:58,500 --> 00:14:02,670
other stuff noted in this table don't

246
00:14:02,670 --> 00:14:06,800
want to go into detail here but some

247
00:14:06,800 --> 00:14:10,830
some notes on it first opera is the only

248
00:14:10,830 --> 00:14:12,720
browser that is really compliant to the

249
00:14:12,720 --> 00:14:17,910
spec again opera big big pro this is

250
00:14:17,910 --> 00:14:19,800
really really cool what they have been

251
00:14:19,800 --> 00:14:21,810
doing it local storage has been there I

252
00:14:21,810 --> 00:14:23,430
guess from opera 10 so it's relatively

253
00:14:23,430 --> 00:14:27,520
fresh but it's perfectly implemented

254
00:14:27,530 --> 00:14:30,470
another thing is cross window messaging

255
00:14:30,470 --> 00:14:34,710
the storage event is supposed to fire on

256
00:14:34,710 --> 00:14:37,650
every window that has the same storage

257
00:14:37,650 --> 00:14:41,220
object which means basically the same

258
00:14:41,220 --> 00:14:45,930
domain or in a concrete scenario the

259
00:14:45,930 --> 00:14:50,190
same URL oh but Safari and chrome have a

260
00:14:50,190 --> 00:14:53,430
very odd behavior them because they fire

261
00:14:53,430 --> 00:14:56,100
the storage event in all other windows

262
00:14:56,100 --> 00:14:59,400
so if you have four or five windows open

263
00:14:59,400 --> 00:15:03,180
and inside of one window you modify the

264
00:15:03,180 --> 00:15:06,450
storage then event gets fired in all

265
00:15:06,450 --> 00:15:08,100
other windows but not in that window

266
00:15:08,100 --> 00:15:10,830
that initially triggered the change of

267
00:15:10,830 --> 00:15:12,510
the storage object which means that in

268
00:15:12,510 --> 00:15:14,850
one window environments

269
00:15:14,850 --> 00:15:17,069
which happens most of the case and which

270
00:15:17,069 --> 00:15:19,230
is the case on mobile devices you get no

271
00:15:19,230 --> 00:15:21,420
storage event because there's no other

272
00:15:21,420 --> 00:15:25,970
window open that can catch the event you

273
00:15:25,970 --> 00:15:29,790
need to to work around and another

274
00:15:29,790 --> 00:15:33,959
oddity is with ie8 because they don't

275
00:15:33,959 --> 00:15:35,959
have the event called storage as it's

276
00:15:35,959 --> 00:15:38,850
recommended in the specification but

277
00:15:38,850 --> 00:15:40,560
they have two events on storage and on

278
00:15:40,560 --> 00:15:42,630
storage commit I mean why follow

279
00:15:42,630 --> 00:15:46,110
standards on storage commit is fired

280
00:15:46,110 --> 00:15:48,690
when the local storage data is written

281
00:15:48,690 --> 00:15:51,660
to the disk which is so low level that

282
00:15:51,660 --> 00:15:54,870
nobody really cares about and in

283
00:15:54,870 --> 00:15:58,110
opposition to the documentation on msdn

284
00:15:58,110 --> 00:16:03,440
the on storage event is not fired on the

285
00:16:03,440 --> 00:16:05,790
window object but it's fire on the

286
00:16:05,790 --> 00:16:07,800
document object took me a while to

287
00:16:07,800 --> 00:16:09,540
figure that out why I wouldn't get any

288
00:16:09,540 --> 00:16:15,120
results from ie there yeah let's lock

289
00:16:15,120 --> 00:16:18,600
the storage best storage engine

290
00:16:18,600 --> 00:16:22,889
currently available let's have a look

291
00:16:22,889 --> 00:16:26,670
into the future there is indexed DB a

292
00:16:26,670 --> 00:16:29,699
new draft containing the object store

293
00:16:29,699 --> 00:16:34,740
which has the great point that it can

294
00:16:34,740 --> 00:16:37,290
store objects all other storage engines

295
00:16:37,290 --> 00:16:39,209
I've been mentioning can only store

296
00:16:39,209 --> 00:16:46,079
strings so then you'd have to Jason

297
00:16:46,079 --> 00:16:48,120
stringify you're at Adam before you can

298
00:16:48,120 --> 00:16:50,610
store it and the object store will allow

299
00:16:50,610 --> 00:16:59,530
you to store j/s objects directly it

300
00:16:59,540 --> 00:17:04,819
will be both a key value engine and a

301
00:17:04,819 --> 00:17:08,069
real database because you will have a

302
00:17:08,069 --> 00:17:11,400
synchronous API with gad input methods

303
00:17:11,400 --> 00:17:13,140
and so you can use it as a key value

304
00:17:13,140 --> 00:17:16,140
store but it will also have a database

305
00:17:16,140 --> 00:17:20,400
like access that you can query the store

306
00:17:20,400 --> 00:17:21,299
you can

307
00:17:21,299 --> 00:17:25,139
create ranges and you can iterate

308
00:17:25,139 --> 00:17:27,509
through result sets and move the cursor

309
00:17:27,509 --> 00:17:30,119
so it tries to combine best of both

310
00:17:30,119 --> 00:17:34,789
worlds and it's very very promising a

311
00:17:34,789 --> 00:17:38,869
next EP is probably our biggest hope to

312
00:17:38,869 --> 00:17:42,989
help us in our storage needs constable

313
00:17:42,989 --> 00:17:44,639
it's not really there yet you can play

314
00:17:44,639 --> 00:17:47,159
around with it it's there in Firefox 4

315
00:17:47,159 --> 00:17:49,559
and latest minefield builds and it's

316
00:17:49,559 --> 00:17:53,850
prefixed with a mo Zhi underscore prefix

317
00:17:53,850 --> 00:17:58,739
but you can firefox minefield only has

318
00:17:58,739 --> 00:18:00,749
the s in parts of the s and Kronus

319
00:18:00,749 --> 00:18:02,519
implementation yet but it's still on

320
00:18:02,519 --> 00:18:05,659
well you can already play around with it

321
00:18:05,659 --> 00:18:08,220
next thing for the future will be the

322
00:18:08,220 --> 00:18:11,700
file API because the file API from the

323
00:18:11,700 --> 00:18:14,580
specification will allow us to open

324
00:18:14,580 --> 00:18:17,489
through the browser a file on the user's

325
00:18:17,489 --> 00:18:19,859
filesystem a new file where we can store

326
00:18:19,859 --> 00:18:26,399
data in it which is very interesting but

327
00:18:26,399 --> 00:18:29,009
it's it will only be a flat file thing

328
00:18:29,009 --> 00:18:30,899
so if you really want it as a store

329
00:18:30,899 --> 00:18:34,159
you'd have to do a lot of extra work to

330
00:18:34,159 --> 00:18:37,230
have do to manage your keys and

331
00:18:37,230 --> 00:18:38,789
everything but it might be a good

332
00:18:38,789 --> 00:18:40,470
alternative if you try to store a really

333
00:18:40,470 --> 00:18:43,169
large amounts of data say if you got

334
00:18:43,169 --> 00:18:44,879
like some hundred images you want to

335
00:18:44,879 --> 00:18:46,590
store on the client site or anything and

336
00:18:46,590 --> 00:18:49,590
this might be a good choice because it

337
00:18:49,590 --> 00:18:53,789
well directly lifts on the file system

338
00:18:53,789 --> 00:18:56,190
of the user it's also there in Firefox

339
00:18:56,190 --> 00:19:00,809
and latest minefields but I got the

340
00:19:00,809 --> 00:19:02,369
feeling this will take a long time until

341
00:19:02,369 --> 00:19:05,159
we can really work with the file API but

342
00:19:05,159 --> 00:19:08,999
finally is all the bus and let's hope

343
00:19:08,999 --> 00:19:15,059
that things are moving there what they

344
00:19:15,059 --> 00:19:16,859
did not mention or plucking based

345
00:19:16,859 --> 00:19:19,470
storage engines they are of course

346
00:19:19,470 --> 00:19:22,769
plucking based options flesh gears error

347
00:19:22,769 --> 00:19:25,350
and silverlight i guess but basically

348
00:19:25,350 --> 00:19:27,779
that's not what we're here for we want

349
00:19:27,779 --> 00:19:30,779
plug-in independent client-side storage

350
00:19:30,779 --> 00:19:34,080
so let's move on to the main question

351
00:19:34,080 --> 00:19:36,779
which of course is what engine for my

352
00:19:36,779 --> 00:19:39,570
project all that on the one hand depends

353
00:19:39,570 --> 00:19:42,779
on on your needs of course and on the

354
00:19:42,779 --> 00:19:44,309
other hand it basically depends on the

355
00:19:44,309 --> 00:19:45,480
question if you know your target

356
00:19:45,480 --> 00:19:48,059
platform do you know what storage

357
00:19:48,059 --> 00:19:49,890
engines are available there and if

358
00:19:49,890 --> 00:19:51,779
you're developing for the web in most

359
00:19:51,779 --> 00:19:53,880
cases you just do not know that means

360
00:19:53,880 --> 00:19:56,580
you have to do a multi-engine approach

361
00:19:56,580 --> 00:19:59,640
you need to be prepared to deal with all

362
00:19:59,640 --> 00:20:02,700
engines that are out there you get a

363
00:20:02,700 --> 00:20:05,070
search for the best available engine and

364
00:20:05,070 --> 00:20:07,679
then just step down step by step until

365
00:20:07,679 --> 00:20:11,100
you find an available engine and use

366
00:20:11,100 --> 00:20:15,059
that one this really sounds like pretty

367
00:20:15,059 --> 00:20:16,559
much work especially if you want a

368
00:20:16,559 --> 00:20:19,490
unified API for your storage application

369
00:20:19,490 --> 00:20:22,019
but rest assured of course there are

370
00:20:22,019 --> 00:20:25,139
frameworks that do the work for you as

371
00:20:25,139 --> 00:20:27,450
others have already done the work of

372
00:20:27,450 --> 00:20:29,399
writing wrappers for the different

373
00:20:29,399 --> 00:20:31,649
engines so that you have the unified API

374
00:20:31,649 --> 00:20:36,539
and these frameworks also do the

375
00:20:36,539 --> 00:20:40,190
sniffing the feature detection of what

376
00:20:40,190 --> 00:20:42,620
engines are available in your current

377
00:20:42,620 --> 00:20:45,179
situation in a desktop environment this

378
00:20:45,179 --> 00:20:47,490
is not a problem if floats of a memory

379
00:20:47,490 --> 00:20:49,110
usually have a good internet connection

380
00:20:49,110 --> 00:20:51,929
so you can just kick in another

381
00:20:51,929 --> 00:20:55,500
framework stand-alone frameworks are for

382
00:20:55,500 --> 00:20:58,669
example lawn chair ryan lewis project

383
00:20:58,669 --> 00:21:02,370
that offers a document store that you

384
00:21:02,370 --> 00:21:05,159
can sort also use it as a key value

385
00:21:05,159 --> 00:21:08,039
store it's completely a synchronous

386
00:21:08,039 --> 00:21:13,500
because it also supports SQLite it has

387
00:21:13,500 --> 00:21:16,320
local storage in it user data gears

388
00:21:16,320 --> 00:21:19,830
cookies and I'm not sure maybe also

389
00:21:19,830 --> 00:21:23,720
global storage precyse jas supports the

390
00:21:23,720 --> 00:21:26,580
same set of storage engines also a

391
00:21:26,580 --> 00:21:31,710
standalone framework and it's also a

392
00:21:31,710 --> 00:21:35,059
synchronous and a bet there are more and

393
00:21:35,059 --> 00:21:38,580
in case you're already using a Jas

394
00:21:38,580 --> 00:21:39,860
library

395
00:21:39,860 --> 00:21:42,710
then there might be well chances are

396
00:21:42,710 --> 00:21:45,110
that there is storage rapper inside of

397
00:21:45,110 --> 00:21:47,450
that library as it is for example

398
00:21:47,450 --> 00:21:51,049
indulgent egg storage Dodger egg storage

399
00:21:51,049 --> 00:21:53,620
is synchronous as a very nice API

400
00:21:53,620 --> 00:21:56,660
currently supports global storage gears

401
00:21:56,660 --> 00:21:59,480
and flesh and flesh encrypted storage

402
00:21:59,480 --> 00:22:03,620
and with 1.6 I hope they're also be

403
00:22:03,620 --> 00:22:06,500
rappers local storage user data and

404
00:22:06,500 --> 00:22:09,049
cookies and that well kind of depends on

405
00:22:09,049 --> 00:22:15,010
me if I finally commit them Yui also has

406
00:22:15,010 --> 00:22:18,590
storage wrappers in there at least in

407
00:22:18,590 --> 00:22:20,780
Yui to there was a storage plucking and

408
00:22:20,780 --> 00:22:23,480
I strongly believe that Yui 3 there are

409
00:22:23,480 --> 00:22:26,419
also wrappers and well I guess I don't

410
00:22:26,419 --> 00:22:29,299
know other libraries will have records

411
00:22:29,299 --> 00:22:34,490
for storage engines too okay let's leave

412
00:22:34,490 --> 00:22:37,040
the same world of desktop where

413
00:22:37,040 --> 00:22:39,799
everything is easy kind of predictable

414
00:22:39,799 --> 00:22:46,850
move on to mobile client side storage is

415
00:22:46,850 --> 00:22:48,290
even more important in mobile

416
00:22:48,290 --> 00:22:51,380
development and again the first major

417
00:22:51,380 --> 00:22:53,960
question when you're trying to you or

418
00:22:53,960 --> 00:22:56,510
thinking about using storage for your

419
00:22:56,510 --> 00:22:58,700
mobile application is do you know your

420
00:22:58,700 --> 00:22:59,990
target platform and the good thing about

421
00:22:59,990 --> 00:23:01,910
mobile development is that in most cases

422
00:23:01,910 --> 00:23:03,350
you do know your target platform because

423
00:23:03,350 --> 00:23:07,429
you're publishing your Europe or your

424
00:23:07,429 --> 00:23:10,520
web app via a store so you at least know

425
00:23:10,520 --> 00:23:12,350
the operating system that your

426
00:23:12,350 --> 00:23:15,440
application is going to hit and chances

427
00:23:15,440 --> 00:23:18,530
are that you're targeting a smartphone

428
00:23:18,530 --> 00:23:22,190
which has a good webkit-based browser

429
00:23:22,190 --> 00:23:26,929
inside and as you can see on different

430
00:23:26,929 --> 00:23:30,770
operating systems you have well pretty

431
00:23:30,770 --> 00:23:35,179
cool storage options with sqlite and

432
00:23:35,179 --> 00:23:38,299
local storage even bada has local

433
00:23:38,299 --> 00:23:43,190
storage Niska light um webos 1.45 is

434
00:23:43,190 --> 00:23:45,620
supposed to have sqlite database

435
00:23:45,620 --> 00:23:48,800
according to the website but in tests i

436
00:23:48,800 --> 00:23:49,880
found that

437
00:23:49,880 --> 00:23:54,280
it wasn't there I don't know need to ask

438
00:23:54,280 --> 00:24:02,110
some palm guys on Android devices

439
00:24:02,110 --> 00:24:05,150
because they're kind of google phones

440
00:24:05,150 --> 00:24:07,490
you also might have eight years database

441
00:24:07,490 --> 00:24:10,730
built in which is not which cannot be

442
00:24:10,730 --> 00:24:17,060
disabled by the user size limits on

443
00:24:17,060 --> 00:24:22,000
mobile devices is again tricky um

444
00:24:22,000 --> 00:24:25,400
basically the limits are the same as you

445
00:24:25,400 --> 00:24:30,590
have them on the desktop environment but

446
00:24:30,590 --> 00:24:32,810
mobile devices tend to be limited in

447
00:24:32,810 --> 00:24:35,270
storage by the device itself so it may

448
00:24:35,270 --> 00:24:37,000
very well happen that you trigger a

449
00:24:37,000 --> 00:24:39,140
limitation from the device before you

450
00:24:39,140 --> 00:24:48,230
triggered from the browser so it is

451
00:24:48,230 --> 00:24:49,880
assumed the same limits as on the

452
00:24:49,880 --> 00:24:52,100
desktop but just be prepared that our

453
00:24:52,100 --> 00:24:54,560
storage space will be more limited not

454
00:24:54,560 --> 00:24:59,210
because of the browser but just because

455
00:24:59,210 --> 00:25:02,180
of the device being full because I don't

456
00:25:02,180 --> 00:25:03,320
know there's not much storage in there

457
00:25:03,320 --> 00:25:08,720
the max amount of amount of data I ever

458
00:25:08,720 --> 00:25:10,670
managed to store on a mobile device was

459
00:25:10,670 --> 00:25:12,920
at least 10 megabytes on a milestone

460
00:25:12,920 --> 00:25:16,010
running android 2.1 which is quite

461
00:25:16,010 --> 00:25:20,420
impressive for a mobile phone so if you

462
00:25:20,420 --> 00:25:24,980
don't have a smartphone running a webkit

463
00:25:24,980 --> 00:25:27,950
browser you maybe have the widget

464
00:25:27,950 --> 00:25:30,320
namespace and with that you have access

465
00:25:30,320 --> 00:25:32,900
to the witch in preference store which

466
00:25:32,900 --> 00:25:35,210
if preferences is also a nice key value

467
00:25:35,210 --> 00:25:41,400
store available in the widget namespace

468
00:25:41,410 --> 00:25:44,600
the API is kind of odd because it is no

469
00:25:44,600 --> 00:25:47,180
delete method and the methods are set

470
00:25:47,180 --> 00:25:49,430
preference for key and get preference

471
00:25:49,430 --> 00:25:53,320
for key and it's pretty dangerous

472
00:25:53,320 --> 00:25:56,640
because it's recommended that

473
00:25:56,640 --> 00:26:02,420
devices using which it namespace may

474
00:26:02,420 --> 00:26:07,560
delete data of widgets if widgets that

475
00:26:07,560 --> 00:26:11,820
are o more often opened require the

476
00:26:11,820 --> 00:26:14,640
space then it can be that the stored

477
00:26:14,640 --> 00:26:17,070
data of your app just gets deleted by

478
00:26:17,070 --> 00:26:20,900
the device which is not very nice so

479
00:26:20,900 --> 00:26:23,100
well you have a store but it's not

480
00:26:23,100 --> 00:26:27,480
really reliable probably you have an

481
00:26:27,480 --> 00:26:29,100
application built with a tool like

482
00:26:29,100 --> 00:26:30,510
PhoneGap and then there are other

483
00:26:30,510 --> 00:26:32,600
options we've got to be kind of creative

484
00:26:32,600 --> 00:26:35,610
that there are options in android less

485
00:26:35,610 --> 00:26:39,300
than two there is an implementation of

486
00:26:39,300 --> 00:26:41,880
the internal SQLite database of Android

487
00:26:41,880 --> 00:26:45,210
exposed to the browser by a phonegap so

488
00:26:45,210 --> 00:26:48,630
on android 1.6 devices you might using

489
00:26:48,630 --> 00:26:51,780
using phonegap you might have sqlite

490
00:26:51,780 --> 00:26:54,780
support which you can open just via

491
00:26:54,780 --> 00:26:57,600
window dot open database as you would

492
00:26:57,600 --> 00:27:01,170
with the normal built in SQLite

493
00:27:01,170 --> 00:27:03,840
implementation also found some cookie

494
00:27:03,840 --> 00:27:06,840
size oddities i managed to store two

495
00:27:06,840 --> 00:27:08,880
megabytes of data inside of a cookie in

496
00:27:08,880 --> 00:27:12,210
an android 1.6 application and was not

497
00:27:12,210 --> 00:27:15,300
being sent to the server and there are

498
00:27:15,300 --> 00:27:16,890
even more options that might be

499
00:27:16,890 --> 00:27:19,830
available now as i mentioned before

500
00:27:19,830 --> 00:27:22,710
gears might be there you might get

501
00:27:22,710 --> 00:27:24,480
access to the file system where you can

502
00:27:24,480 --> 00:27:27,800
store data may be larger amounts of data

503
00:27:27,800 --> 00:27:30,570
and there's for example couch for

504
00:27:30,570 --> 00:27:34,530
android which is also a nice nice option

505
00:27:34,530 --> 00:27:38,370
um yeah I just got to be creative fool

506
00:27:38,370 --> 00:27:40,740
around with the device you're targeting

507
00:27:40,740 --> 00:27:44,820
and see if there are some crazy options

508
00:27:44,820 --> 00:27:47,840
that are not standards approach but

509
00:27:47,840 --> 00:27:51,120
which are there any help Jesus time is

510
00:27:51,120 --> 00:27:52,110
running out

511
00:27:52,110 --> 00:27:55,920
okay quick frameworks for that no not

512
00:27:55,920 --> 00:28:00,670
not not one and you really want want to

513
00:28:00,670 --> 00:28:04,270
throw a full-sized bloated framework on

514
00:28:04,270 --> 00:28:08,770
a phone but very shortly and there be

515
00:28:08,770 --> 00:28:11,160
storage j/s which I initially wanted to

516
00:28:11,160 --> 00:28:16,270
release but just didn't manage which is

517
00:28:16,270 --> 00:28:18,910
especially targeted at embedded devices

518
00:28:18,910 --> 00:28:21,220
and which uses the ambit jes approach

519
00:28:21,220 --> 00:28:23,770
that means that you only deploy what you

520
00:28:23,770 --> 00:28:27,460
what you what you need so that you have

521
00:28:27,460 --> 00:28:30,370
specific builds with a maximum or the

522
00:28:30,370 --> 00:28:32,680
the smallest possible footprint for your

523
00:28:32,680 --> 00:28:35,890
target device so it will be super tiny

524
00:28:35,890 --> 00:28:38,290
in size and currently supports cookie

525
00:28:38,290 --> 00:28:40,720
local storage wichard preference store

526
00:28:40,720 --> 00:28:45,310
and google gears and i might add sqlite

527
00:28:45,310 --> 00:28:49,960
to it performance well in most cases

528
00:28:49,960 --> 00:28:52,600
when we need a client-side storage we

529
00:28:52,600 --> 00:28:54,940
have no real choice or performance

530
00:28:54,940 --> 00:28:56,350
doesn't really matter we just cross our

531
00:28:56,350 --> 00:28:59,850
fingers and hope that it's fast enough

532
00:28:59,850 --> 00:29:02,200
thing to keep in mind is that reads are

533
00:29:02,200 --> 00:29:04,240
important than rights because rights can

534
00:29:04,240 --> 00:29:06,940
be done in the background but let's look

535
00:29:06,940 --> 00:29:08,530
at some numbers for local storage yeah

536
00:29:08,530 --> 00:29:12,660
big big dealer numbers the only thing

537
00:29:12,660 --> 00:29:15,280
which is important here is that you see

538
00:29:15,280 --> 00:29:17,620
that Safari these are operations for a

539
00:29:17,620 --> 00:29:20,380
second that you see that Safari has

540
00:29:20,380 --> 00:29:23,890
insane numbers it's insanely fast and

541
00:29:23,890 --> 00:29:26,290
that means when you look at the the top

542
00:29:26,290 --> 00:29:29,650
row on android 2.2 it beats most of the

543
00:29:29,650 --> 00:29:33,580
desktop browsers so local storage on a

544
00:29:33,580 --> 00:29:36,730
mobile device is a really fast storage

545
00:29:36,730 --> 00:29:40,270
engine it's really really cool and on a

546
00:29:40,270 --> 00:29:42,340
good smartphone it's available for you

547
00:29:42,340 --> 00:29:46,210
sqlite reads similarly fast but far

548
00:29:46,210 --> 00:29:54,250
slower gotta hurry a bit security well

549
00:29:54,250 --> 00:29:55,570
there is domain based access

550
00:29:55,570 --> 00:29:57,860
restrictions for all storage engines

551
00:29:57,860 --> 00:30:02,630
mentioned here of course it's not

552
00:30:02,630 --> 00:30:06,200
involve all 22 cross-site scripting

553
00:30:06,200 --> 00:30:09,200
attacks but it's basically it's kind of

554
00:30:09,200 --> 00:30:11,870
secure except for stuff like DNS poofy

555
00:30:11,870 --> 00:30:14,870
which you well then you're absolutely

556
00:30:14,870 --> 00:30:17,510
you can kind of do anything about it the

557
00:30:17,510 --> 00:30:18,860
only thing that you can think about is

558
00:30:18,860 --> 00:30:22,970
have client-side encryption like a

559
00:30:22,970 --> 00:30:26,870
Blowfish inscripted store but that would

560
00:30:26,870 --> 00:30:32,250
make your store awfully slow I did that

561
00:30:32,260 --> 00:30:36,040
and it was like unusable slow because of

562
00:30:36,040 --> 00:30:38,660
encrypting large amounts of data is well

563
00:30:38,660 --> 00:30:45,590
slow okay we made it number one client

564
00:30:45,590 --> 00:30:48,169
side storage is possible it's also

565
00:30:48,169 --> 00:30:50,540
possible on mobile devices and you never

566
00:30:50,540 --> 00:30:52,820
have to use cookies again to store

567
00:30:52,820 --> 00:30:55,429
application settings or anything you

568
00:30:55,429 --> 00:30:57,880
need to store persistently client site

569
00:30:57,880 --> 00:31:01,640
we have local storage with which is a

570
00:31:01,640 --> 00:31:04,130
perfect key value engine and we can do a

571
00:31:04,130 --> 00:31:06,110
lot of stuff with it and we also have

572
00:31:06,110 --> 00:31:08,900
SQLite which is close but also pretty

573
00:31:08,900 --> 00:31:13,370
cool and future is right we can wait for

574
00:31:13,370 --> 00:31:16,540
index to be the object store which will

575
00:31:16,540 --> 00:31:20,120
be maybe the perfect storage solution

576
00:31:20,120 --> 00:31:22,370
that we've been looking for all the time

577
00:31:22,370 --> 00:31:26,290
so it's doable and it's getting better

578
00:31:26,290 --> 00:31:29,929
and we can do it thank you very much

579
00:31:29,929 --> 00:31:31,790
thanks for listening thanks for having

