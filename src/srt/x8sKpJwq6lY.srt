1
00:00:00,320 --> 00:00:02,070

[Music]

2
00:00:02,070 --> 00:00:03,840
[Applause]

3
00:00:03,840 --> 00:00:05,660
[Music]

4
00:00:05,660 --> 00:00:07,410
[Applause]

5
00:00:07,410 --> 00:00:09,280
[Music]

6
00:00:09,280 --> 00:00:11,020
[Applause]

7
00:00:11,020 --> 00:00:12,780
[Music]

8
00:00:12,780 --> 00:00:16,860
[Applause]

9
00:00:16,870 --> 00:00:32,060
[Music]

10
00:00:32,070 --> 00:00:34,390
the title of this presentation is please

11
00:00:34,390 --> 00:00:36,430
don't mock me that's what my face looked

12
00:00:36,430 --> 00:00:38,440
like seven years ago my name is Justin I

13
00:00:38,440 --> 00:00:40,000
go by Searles my last name I'm most

14
00:00:40,000 --> 00:00:41,829
internet things if you'd like my contact

15
00:00:41,829 --> 00:00:44,350
info you may npm install' me i am the

16
00:00:44,350 --> 00:00:45,610
creator and the current maintainer of

17
00:00:45,610 --> 00:00:46,900
the world's second most popular

18
00:00:46,900 --> 00:00:48,760
javascript mocking library if you don't

19
00:00:48,760 --> 00:00:50,860
count jest or jasmine here's the

20
00:00:50,860 --> 00:00:52,960
download chart that right there is sign

21
00:00:52,960 --> 00:00:54,489
on the most popular one and that's us

22
00:00:54,489 --> 00:00:57,100
test double way down there this was a

23
00:00:57,100 --> 00:00:58,600
big day for us is the day we finally

24
00:00:58,600 --> 00:01:00,370
caught up but the npm rebooted all their

25
00:01:00,370 --> 00:01:03,309
servers so we're still fighting you

26
00:01:03,309 --> 00:01:04,989
could totally help goose our numbers by

27
00:01:04,989 --> 00:01:06,970
NPM installing testable today all of the

28
00:01:06,970 --> 00:01:09,250
illustrations that i do will be just

29
00:01:09,250 --> 00:01:10,840
musing testable by happenstance it's

30
00:01:10,840 --> 00:01:13,570
what I know best I'm here today to

31
00:01:13,570 --> 00:01:15,460
convince you that the popularity of a

32
00:01:15,460 --> 00:01:17,260
JavaScript mocking library doesn't

33
00:01:17,260 --> 00:01:19,330
matter and you should be saying well

34
00:01:19,330 --> 00:01:20,260
you're just saying that because your

35
00:01:20,260 --> 00:01:21,750
thing's not popular and you'd be right

36
00:01:21,750 --> 00:01:24,580
but additionally I'm here because I've

37
00:01:24,580 --> 00:01:25,600
been practicing test-driven development

38
00:01:25,600 --> 00:01:28,330
with mocks for a decade now and I really

39
00:01:28,330 --> 00:01:29,740
come to believe that literally nobody

40
00:01:29,740 --> 00:01:31,780
knows how to use mocks and of course

41
00:01:31,780 --> 00:01:33,100
that's a terrible thing to say I

42
00:01:33,100 --> 00:01:34,299
shouldn't say that I should say

43
00:01:34,299 --> 00:01:37,510
figuratively nobody knows and let's

44
00:01:37,510 --> 00:01:38,890
break it down because there's a group of

45
00:01:38,890 --> 00:01:40,630
people who can explain how to best mock

46
00:01:40,630 --> 00:01:42,070
things in any given situation and

47
00:01:42,070 --> 00:01:43,330
there's another group of people who

48
00:01:43,330 --> 00:01:45,030
always mock things out consistently

49
00:01:45,030 --> 00:01:46,780
unfortunately for all of us there's a

50
00:01:46,780 --> 00:01:48,400
much larger group of people who use

51
00:01:48,400 --> 00:01:50,590
mocking libraries without belonging to

52
00:01:50,590 --> 00:01:52,900
either previous group and so you know

53
00:01:52,900 --> 00:01:54,670
when we initially wrote test double J s

54
00:01:54,670 --> 00:01:56,049
it was really to like target that

55
00:01:56,049 --> 00:01:57,369
intersection of developers who already

56
00:01:57,369 --> 00:01:59,110
knew really how to like make the most of

57
00:01:59,110 --> 00:02:02,259
their tests and my goal is not just to

58
00:02:02,259 --> 00:02:04,330
become more popular to grow the

59
00:02:04,330 --> 00:02:05,350
intersection people who really

60
00:02:05,350 --> 00:02:06,520
understand and get the most out of their

61
00:02:06,520 --> 00:02:08,200
mocking library and them as a result the

62
00:02:08,200 --> 00:02:09,549
most out of their tests so that's what

63
00:02:09,549 --> 00:02:11,110
we're here to do today but to do that we

64
00:02:11,110 --> 00:02:12,310
have to define a few terms first

65
00:02:12,310 --> 00:02:14,409
whenever I say the word subject I'm

66
00:02:14,409 --> 00:02:16,450
referring to the thing being tested like

67
00:02:16,450 --> 00:02:18,939
a like an experimental test subject as

68
00:02:18,939 --> 00:02:20,739
where it gets that name whenever I say

69
00:02:20,739 --> 00:02:22,209
dependency like if you're testing a

70
00:02:22,209 --> 00:02:24,280
module anything that that thing import

71
00:02:24,280 --> 00:02:26,380
so relies upon that is external to it is

72
00:02:26,380 --> 00:02:28,390
a dependency and whenever I say unit

73
00:02:28,390 --> 00:02:29,950
test I'm not using a really like fancy

74
00:02:29,950 --> 00:02:32,440
definition or nuance term really like if

75
00:02:32,440 --> 00:02:33,520
you're invoking a function and you

76
00:02:33,520 --> 00:02:34,840
assert certain things come out the other

77
00:02:34,840 --> 00:02:36,810
end congratulations you have a unit test

78
00:02:36,810 --> 00:02:39,400
the catch-all term for all types of

79
00:02:39,400 --> 00:02:41,709
mocks is testing double whether you're

80
00:02:41,709 --> 00:02:43,450
talking about a stub or a spy or a mock

81
00:02:43,450 --> 00:02:45,520
or a fake but today I'm gonna like you

82
00:02:45,520 --> 00:02:47,200
know disregard all of that and just use

83
00:02:47,200 --> 00:02:48,720
mock because it's the most common

84
00:02:48,720 --> 00:02:52,150
vernacular coincidentally and sort of

85
00:02:52,150 --> 00:02:54,190
unfortunately from like a branding

86
00:02:54,190 --> 00:02:55,810
perspective I'm also from a company

87
00:02:55,810 --> 00:02:59,530
called test double we are not a mocking

88
00:02:59,530 --> 00:03:01,510
library manufacturer instead we're

89
00:03:01,510 --> 00:03:03,580
actually a consultancy and what we do is

90
00:03:03,580 --> 00:03:05,440
we pair up with teams maybe like yours

91
00:03:05,440 --> 00:03:06,820
who are looking for additional senior

92
00:03:06,820 --> 00:03:09,040
developer talent and we join you on

93
00:03:09,040 --> 00:03:11,020
contract to work alongside you get

94
00:03:11,020 --> 00:03:12,370
things done and hopefully with an eye to

95
00:03:12,370 --> 00:03:14,380
helping you make things better along the

96
00:03:14,380 --> 00:03:16,000
way you can learn more about us online

97
00:03:16,000 --> 00:03:18,760
this talk has four parts the first part

98
00:03:18,760 --> 00:03:22,030
is obvious abuses of mocking we're gonna

99
00:03:22,030 --> 00:03:24,459
move on to the less obvious abuses and

100
00:03:24,459 --> 00:03:26,020
then we're going to move right along to

101
00:03:26,020 --> 00:03:27,730
the questionable uses that might have

102
00:03:27,730 --> 00:03:29,860
some value but people often mess up and

103
00:03:29,860 --> 00:03:31,720
finally the one good use for mocking

104
00:03:31,720 --> 00:03:33,430
that I found in you know all this

105
00:03:33,430 --> 00:03:35,680
practice so first let's start with the

106
00:03:35,680 --> 00:03:37,989
obvious uses and that is using partial

107
00:03:37,989 --> 00:03:40,269
mocks so you like mocked out part of a

108
00:03:40,269 --> 00:03:41,769
thing but left part of the other stuff

109
00:03:41,769 --> 00:03:43,600
real and to illustrate let's say that

110
00:03:43,600 --> 00:03:46,120
you run a park ticket kiosk machine

111
00:03:46,120 --> 00:03:47,799
you know people tap on the screen and

112
00:03:47,799 --> 00:03:49,959
then you know they say hey I'm 12 years

113
00:03:49,959 --> 00:03:52,209
old and so we check our inventory module

114
00:03:52,209 --> 00:03:53,860
to ensure that the child tickets are

115
00:03:53,860 --> 00:03:55,570
available before we try to sell them if

116
00:03:55,570 --> 00:03:57,070
they'd said they were 13 we check for

117
00:03:57,070 --> 00:03:58,840
adult tickets and either way because we

118
00:03:58,840 --> 00:04:00,430
want to like upsell them during the

119
00:04:00,430 --> 00:04:01,660
checkout phase we make sure that we have

120
00:04:01,660 --> 00:04:03,940
Express passes available to sell the

121
00:04:03,940 --> 00:04:05,530
logic like might be implemented in code

122
00:04:05,530 --> 00:04:07,150
like this you know if they're under 13

123
00:04:07,150 --> 00:04:08,170
and sure we have a child ticket

124
00:04:08,170 --> 00:04:09,730
otherwise ensure we have an adult ticket

125
00:04:09,730 --> 00:04:11,440
the Express module thing is turned on

126
00:04:11,440 --> 00:04:12,910
make sure we have those and so on and so

127
00:04:12,910 --> 00:04:14,769
forth a test for this how would that

128
00:04:14,769 --> 00:04:16,120
look well we'd create another test

129
00:04:16,120 --> 00:04:17,680
module over here and we did invoke the

130
00:04:17,680 --> 00:04:19,720
code just like we normally would but

131
00:04:19,720 --> 00:04:21,070
what about this insurer child ticket

132
00:04:21,070 --> 00:04:22,360
because it's like a Boyd function it

133
00:04:22,360 --> 00:04:24,160
doesn't return anything useful so like

134
00:04:24,160 --> 00:04:25,780
how would we assert on that well we

135
00:04:25,780 --> 00:04:27,400
could mock out that method on the

136
00:04:27,400 --> 00:04:29,740
inventory and then return back and

137
00:04:29,740 --> 00:04:31,540
verify that that call took place and a

138
00:04:31,540 --> 00:04:33,310
way to do that we just replace poke a

139
00:04:33,310 --> 00:04:34,960
hole in reality replace that method and

140
00:04:34,960 --> 00:04:35,670
then fit

141
00:04:35,670 --> 00:04:37,380
code path me again we just invoke it

142
00:04:37,380 --> 00:04:39,210
like normal and then you know testable

143
00:04:39,210 --> 00:04:40,440
and a lot of mocking libraries come with

144
00:04:40,440 --> 00:04:41,730
a way to like verify a particular

145
00:04:41,730 --> 00:04:44,040
invocation happen just how you like it

146
00:04:44,040 --> 00:04:45,630
for the other code path for the adult

147
00:04:45,630 --> 00:04:47,760
we'd write another test case we poke a

148
00:04:47,760 --> 00:04:50,100
second hole in reality and while we're

149
00:04:50,100 --> 00:04:51,300
there we can make sure we don't call

150
00:04:51,300 --> 00:04:52,800
that one during the child code bat that

151
00:04:52,800 --> 00:04:54,180
wouldn't make sense and then mostly just

152
00:04:54,180 --> 00:04:56,400
copy paste and then update the values we

153
00:04:56,400 --> 00:04:58,800
can run this test great test passes

154
00:04:58,800 --> 00:04:59,580
looks good

155
00:04:59,580 --> 00:05:02,340
fortunately time marches on and you

156
00:05:02,340 --> 00:05:03,480
didn't do anything but you get a phone

157
00:05:03,480 --> 00:05:05,190
call that the build is broken and your

158
00:05:05,190 --> 00:05:07,020
test is the one failing so you run the

159
00:05:07,020 --> 00:05:08,700
test again and sure enough it's failing

160
00:05:08,700 --> 00:05:11,280
in two places we're calling the adult

161
00:05:11,280 --> 00:05:13,530
code the adult inventory insure adult

162
00:05:13,530 --> 00:05:15,990
thing an extra time when we didn't

163
00:05:15,990 --> 00:05:17,640
expect to and that doesn't make any

164
00:05:17,640 --> 00:05:18,960
sense to us cuz we haven't changed this

165
00:05:18,960 --> 00:05:20,280
code we look at it nothing's different

166
00:05:20,280 --> 00:05:22,860
here so we look at the only thing that's

167
00:05:22,860 --> 00:05:24,930
actually external still a real method

168
00:05:24,930 --> 00:05:26,730
ensure Express pass that's still getting

169
00:05:26,730 --> 00:05:27,930
called so that means we have to go now

170
00:05:27,930 --> 00:05:29,490
load up this inventory module and we can

171
00:05:29,490 --> 00:05:31,050
see the maintainer of that module

172
00:05:31,050 --> 00:05:33,510
actually added an intrinsic call to

173
00:05:33,510 --> 00:05:34,680
ensure adult ticket maybe they don't

174
00:05:34,680 --> 00:05:36,000
want to sell Express passes if they're

175
00:05:36,000 --> 00:05:37,590
out of stock and that might make sense

176
00:05:37,590 --> 00:05:38,910
to them but like can we really blame

177
00:05:38,910 --> 00:05:40,320
them for breaking our tests like were

178
00:05:40,320 --> 00:05:42,360
they expecting this zombie half real

179
00:05:42,360 --> 00:05:44,010
half fake inventory module to be

180
00:05:44,010 --> 00:05:45,690
floating around somewhere probably not

181
00:05:45,690 --> 00:05:47,910
so we don't have really any recourse

182
00:05:47,910 --> 00:05:49,680
except to poke a third hole in reality

183
00:05:49,680 --> 00:05:51,900
and we can make the test work but

184
00:05:51,900 --> 00:05:53,700
something feels wrong it's almost like

185
00:05:53,700 --> 00:05:55,290
our ship is sinking and our solution is

186
00:05:55,290 --> 00:05:58,710
to poke more holes in it so in this case

187
00:05:58,710 --> 00:06:00,420
you know the test felt good initially

188
00:06:00,420 --> 00:06:02,040
because it was superficially simple it

189
00:06:02,040 --> 00:06:03,510
was terse and only said what we cared

190
00:06:03,510 --> 00:06:05,730
about but underlying that was that we

191
00:06:05,730 --> 00:06:07,200
didn't really have good experimental

192
00:06:07,200 --> 00:06:08,250
control from what we're trying to

193
00:06:08,250 --> 00:06:09,960
specify so instead what I'd recommend

194
00:06:09,960 --> 00:06:12,630
you do fake out the whole thing that way

195
00:06:12,630 --> 00:06:14,580
it's really clear what the contract line

196
00:06:14,580 --> 00:06:16,290
is and then require your thing and test

197
00:06:16,290 --> 00:06:18,690
as usual in short if you have a

198
00:06:18,690 --> 00:06:20,130
dependency and it's a totally real

199
00:06:20,130 --> 00:06:21,570
dependency that's really easy to

200
00:06:21,570 --> 00:06:22,920
maintain because we're used to invoking

201
00:06:22,920 --> 00:06:25,140
code that's real if you have code that's

202
00:06:25,140 --> 00:06:26,790
like a dependency that you've completely

203
00:06:26,790 --> 00:06:28,770
faked out whether what the tool or not

204
00:06:28,770 --> 00:06:30,780
at least you have total experimental

205
00:06:30,780 --> 00:06:32,040
control so the expectations are clear

206
00:06:32,040 --> 00:06:33,780
but if you have this like dependency

207
00:06:33,780 --> 00:06:35,340
that's like half real a half fake it's

208
00:06:35,340 --> 00:06:37,590
going to fail for surprising reasons and

209
00:06:37,590 --> 00:06:39,870
you're gonna have a bad time the second

210
00:06:39,870 --> 00:06:41,280
obvious abuse that I see of mocking is

211
00:06:41,280 --> 00:06:43,890
people partially mocking out the actual

212
00:06:43,890 --> 00:06:45,180
thing the subject the thing that they're

213
00:06:45,180 --> 00:06:47,580
testing this advice is short please

214
00:06:47,580 --> 00:06:49,080
don't fake out part of the thing

215
00:06:49,080 --> 00:06:50,849
that you're testing you know I get

216
00:06:50,849 --> 00:06:52,379
pushed back sometimes like oh well we

217
00:06:52,379 --> 00:06:54,210
have a very very large module it's got

218
00:06:54,210 --> 00:06:55,259
all these methods and they call each

219
00:06:55,259 --> 00:06:56,789
other and there's just no other way to

220
00:06:56,789 --> 00:06:58,259
get coverage of this little thing right

221
00:06:58,259 --> 00:06:59,939
here so we need to poke holes here and

222
00:06:59,939 --> 00:07:01,139
there and there to get our test running

223
00:07:01,139 --> 00:07:02,699
a problem with that is like now you have

224
00:07:02,699 --> 00:07:04,139
two problems you have a big thing that

225
00:07:04,139 --> 00:07:05,669
nobody understands and tests of it that

226
00:07:05,669 --> 00:07:09,180
nobody trusts so please don't do that

227
00:07:09,180 --> 00:07:11,490
third obvious thing that we see is when

228
00:07:11,490 --> 00:07:13,349
people replace some of a dependent of

229
00:07:13,349 --> 00:07:15,419
the dependencies under tests but not all

230
00:07:15,419 --> 00:07:17,219
of them for a given subject and so to

231
00:07:17,219 --> 00:07:20,189
explain I'd like to use a word over

232
00:07:20,189 --> 00:07:22,469
mocking if you've heard this term I

233
00:07:22,469 --> 00:07:23,610
think it's kind of like a prevailing

234
00:07:23,610 --> 00:07:25,349
ideology of how people think about

235
00:07:25,349 --> 00:07:27,240
mocking and tests as if it's an

236
00:07:27,240 --> 00:07:29,340
affordance to be moderated like you have

237
00:07:29,340 --> 00:07:30,150
this manometer

238
00:07:30,150 --> 00:07:31,680
that's like slowly building up as you

239
00:07:31,680 --> 00:07:33,539
mock things but watch out because you

240
00:07:33,539 --> 00:07:35,340
don't want to over mock you've crossed

241
00:07:35,340 --> 00:07:36,810
some invisible threshold so don't do

242
00:07:36,810 --> 00:07:37,050
that

243
00:07:37,050 --> 00:07:39,060
and it's a strange way to think about it

244
00:07:39,060 --> 00:07:40,259
so let's talk about it let's say that

245
00:07:40,259 --> 00:07:43,169
you write a system that handles airplane

246
00:07:43,169 --> 00:07:45,120
seat reservations and your great your

247
00:07:45,120 --> 00:07:47,490
pair programming together at work and so

248
00:07:47,490 --> 00:07:48,509
you think about the different

249
00:07:48,509 --> 00:07:50,370
dependencies that you need to implement

250
00:07:50,370 --> 00:07:52,379
this subject that's under test and then

251
00:07:52,379 --> 00:07:53,580
you talk about the different test cases

252
00:07:53,580 --> 00:07:55,560
that you need to implement and because

253
00:07:55,560 --> 00:07:57,690
you're pairing you try to normalize on

254
00:07:57,690 --> 00:07:59,310
approach and so you know person on the

255
00:07:59,310 --> 00:08:00,659
right says hey I like mocking out my

256
00:08:00,659 --> 00:08:02,069
dependency isn't the person on the left

257
00:08:02,069 --> 00:08:03,690
you know doesn't like mocking tries to

258
00:08:03,690 --> 00:08:05,460
avoid so you know you're pairing so what

259
00:08:05,460 --> 00:08:06,839
do you do you compromise and just mock

260
00:08:06,839 --> 00:08:10,050
out half the things that is not a laugh

261
00:08:10,050 --> 00:08:12,389
line that's just how people really do

262
00:08:12,389 --> 00:08:14,940
this so you might got half the things

263
00:08:14,940 --> 00:08:17,039
and as far as this ideology of mock

264
00:08:17,039 --> 00:08:18,719
commoners ago you're looking good you're

265
00:08:18,719 --> 00:08:22,020
46 percent or whatever but time passes

266
00:08:22,020 --> 00:08:23,550
and you get another call because the

267
00:08:23,550 --> 00:08:25,500
build is failing and it's your fault and

268
00:08:25,500 --> 00:08:27,240
so you can see here you know request see

269
00:08:27,240 --> 00:08:29,129
our module is calling this seat map with

270
00:08:29,129 --> 00:08:30,779
a particular address and then it gives

271
00:08:30,779 --> 00:08:32,789
the seat object back and you can see

272
00:08:32,789 --> 00:08:34,140
it's like a string right well the

273
00:08:34,140 --> 00:08:35,430
problem is that they've updated that

274
00:08:35,430 --> 00:08:37,199
contract and now they expect it to be a

275
00:08:37,199 --> 00:08:39,779
- arised address and so our test blew up

276
00:08:39,779 --> 00:08:41,849
well the person on the right who prefers

277
00:08:41,849 --> 00:08:43,260
to isolate their dependency says hey

278
00:08:43,260 --> 00:08:44,730
this failure has nothing to do with the

279
00:08:44,730 --> 00:08:46,920
subject and you know she'd be right like

280
00:08:46,920 --> 00:08:48,510
you see the seat number is just kind of

281
00:08:48,510 --> 00:08:50,310
passed in like a baton we don't do any

282
00:08:50,310 --> 00:08:52,260
of the string manipulation stuff here

283
00:08:52,260 --> 00:08:54,329
and so she changes that real dependency

284
00:08:54,329 --> 00:08:57,120
to a fake dependency fixes the test now

285
00:08:57,120 --> 00:08:59,279
more time passes but this time worse

286
00:08:59,279 --> 00:09:01,470
thing production is broken so let's dig

287
00:09:01,470 --> 00:09:02,980
in you know here we have

288
00:09:02,980 --> 00:09:05,050
this thing that actually fires the book

289
00:09:05,050 --> 00:09:06,459
seat and for obvious reasons we've

290
00:09:06,459 --> 00:09:08,680
knocked that out and you can see if it

291
00:09:08,680 --> 00:09:09,970
takes these three arguments well the

292
00:09:09,970 --> 00:09:12,130
maintainer of that transposed the second

293
00:09:12,130 --> 00:09:13,510
and third argument for whatever reason

294
00:09:13,510 --> 00:09:15,910
and our test continued to pass it was a

295
00:09:15,910 --> 00:09:18,760
fantasy green test and as a result

296
00:09:18,760 --> 00:09:20,110
production blew up because the build was

297
00:09:20,110 --> 00:09:21,670
Green now the person on the Left who

298
00:09:21,670 --> 00:09:22,990
hates mocking would point out hey this

299
00:09:22,990 --> 00:09:24,070
wouldn't have happened if we hadn't

300
00:09:24,070 --> 00:09:25,600
knocked this thing out and he's right -

301
00:09:25,600 --> 00:09:27,639
so he goes into the test and replaces

302
00:09:27,639 --> 00:09:29,139
the fake thing with the real thing and

303
00:09:29,139 --> 00:09:30,940
gets you back to passing and I don't

304
00:09:30,940 --> 00:09:32,050
think this is what people meant by

305
00:09:32,050 --> 00:09:34,750
ping-pong pier programming but this kind

306
00:09:34,750 --> 00:09:36,130
of passive-aggressive back-and-forth is

307
00:09:36,130 --> 00:09:38,079
exactly what you get people don't know

308
00:09:38,079 --> 00:09:39,730
why they're using a particular tool for

309
00:09:39,730 --> 00:09:42,279
a given job instead and this is kind of

310
00:09:42,279 --> 00:09:44,889
maybe surprising to hear like a test

311
00:09:44,889 --> 00:09:48,160
that never fails is a bad test because

312
00:09:48,160 --> 00:09:49,839
it hasn't told you anything it's just

313
00:09:49,839 --> 00:09:52,360
consumed countless cycles of cloud cpu

314
00:09:52,360 --> 00:09:55,660
time in your CI server instead you know

315
00:09:55,660 --> 00:09:57,160
it's gonna fail there hopefully it'll

316
00:09:57,160 --> 00:09:58,779
fail so think at the time that you're

317
00:09:58,779 --> 00:10:00,610
writing it what should failure mean for

318
00:10:00,610 --> 00:10:02,230
this test and design that instead of

319
00:10:02,230 --> 00:10:04,329
like how you actually write tests for

320
00:10:04,329 --> 00:10:05,649
example if you're writing a unit test

321
00:10:05,649 --> 00:10:07,329
it's all wired up all those dependencies

322
00:10:07,329 --> 00:10:09,850
are real sure nothing is mocked but

323
00:10:09,850 --> 00:10:11,560
let's think about like when it fails and

324
00:10:11,560 --> 00:10:13,569
you know intuitively you can say well

325
00:10:13,569 --> 00:10:15,130
it'll fail whenever the subject or its

326
00:10:15,130 --> 00:10:17,350
dependencies logics changes that's great

327
00:10:17,350 --> 00:10:19,510
it encourages you to be mindful though

328
00:10:19,510 --> 00:10:21,670
of what I call redundant code coverage

329
00:10:21,670 --> 00:10:25,240
and that is if you have a module that's

330
00:10:25,240 --> 00:10:27,519
depended by 35 different things and you

331
00:10:27,519 --> 00:10:29,500
change that module you don't want to set

332
00:10:29,500 --> 00:10:30,639
yourself up for a situation where you

333
00:10:30,639 --> 00:10:32,829
have to now go update 36 different tests

334
00:10:32,829 --> 00:10:35,500
so be thinking about that now if we have

335
00:10:35,500 --> 00:10:37,360
isolated unit tests where all the things

336
00:10:37,360 --> 00:10:39,519
are faked out 100% mocks or our my

337
00:10:39,519 --> 00:10:42,010
comedy readings are beeping loudly or

338
00:10:42,010 --> 00:10:44,019
something but when it fails we have a

339
00:10:44,019 --> 00:10:45,399
clear definition of what failure means

340
00:10:45,399 --> 00:10:46,990
it means in the contract between the

341
00:10:46,990 --> 00:10:48,730
subject and its dependency has changed

342
00:10:48,730 --> 00:10:50,470
and so it should encourage us though to

343
00:10:50,470 --> 00:10:52,480
like be mindful that like we probably

344
00:10:52,480 --> 00:10:54,370
want to have another smoke test some

345
00:10:54,370 --> 00:10:55,660
integrated thing that just make sure

346
00:10:55,660 --> 00:10:56,709
that when everything is plugged together

347
00:10:56,709 --> 00:10:58,810
the app basically seems to work so

348
00:10:58,810 --> 00:11:01,269
that's important too but what do we what

349
00:11:01,269 --> 00:11:02,470
do we do in this case we're half the

350
00:11:02,470 --> 00:11:03,579
things are real and half the things are

351
00:11:03,579 --> 00:11:05,470
fake you know it looks good under the

352
00:11:05,470 --> 00:11:06,880
prevailing ideology of like you know

353
00:11:06,880 --> 00:11:09,040
mocking is moderation but when does it

354
00:11:09,040 --> 00:11:11,319
fail well it can fail for like multiple

355
00:11:11,319 --> 00:11:13,600
numerous nonsensical reasons and so it

356
00:11:13,600 --> 00:11:15,220
should encourage us do not write just

357
00:11:15,220 --> 00:11:16,200
like this so

358
00:11:16,200 --> 00:11:18,180
please don't do that and so instead of

359
00:11:18,180 --> 00:11:20,010
critiquing how much mocking you see in

360
00:11:20,010 --> 00:11:22,230
the codebase critique why people are

361
00:11:22,230 --> 00:11:23,820
using box at all like what's the broader

362
00:11:23,820 --> 00:11:25,590
strategy here and I guarantee you'll

363
00:11:25,590 --> 00:11:27,390
have more productive discussions the

364
00:11:27,390 --> 00:11:28,620
common thread between all three of these

365
00:11:28,620 --> 00:11:30,690
things is that I think that you know

366
00:11:30,690 --> 00:11:33,720
just we all tend to have this sensation

367
00:11:33,720 --> 00:11:36,120
that like realism is very important in

368
00:11:36,120 --> 00:11:37,020
testing because we want to make sure

369
00:11:37,020 --> 00:11:38,160
things are gonna work and they're not

370
00:11:38,160 --> 00:11:40,220
gonna explode but that can actually

371
00:11:40,220 --> 00:11:44,040
cause problems where we forget that what

372
00:11:44,040 --> 00:11:45,750
testing is really about is like setting

373
00:11:45,750 --> 00:11:47,370
up clear experimental control to get

374
00:11:47,370 --> 00:11:48,570
consistent results that tell us

375
00:11:48,570 --> 00:11:49,830
something that we need to know and

376
00:11:49,830 --> 00:11:52,200
that's important to all right so let's

377
00:11:52,200 --> 00:11:53,880
move on to like the less obvious abuses

378
00:11:53,880 --> 00:11:55,800
and that's I want to start with talking

379
00:11:55,800 --> 00:11:57,960
about mocking out third-party libraries

380
00:11:57,960 --> 00:12:00,330
so say that you depend on an awesome Lib

381
00:12:00,330 --> 00:12:01,800
it's an NPM package and there's

382
00:12:01,800 --> 00:12:03,540
references to it all over your codebase

383
00:12:03,540 --> 00:12:05,730
it's got a kind of funky API though

384
00:12:05,730 --> 00:12:08,040
first you call it and then you pass it a

385
00:12:08,040 --> 00:12:09,810
config file so we read that from disk

386
00:12:09,810 --> 00:12:11,700
that returns an instance of the library

387
00:12:11,700 --> 00:12:13,590
that we can then call an optimized

388
00:12:13,590 --> 00:12:14,910
method on and we get all these really

389
00:12:14,910 --> 00:12:16,920
cool interpreter hints that we can use

390
00:12:16,920 --> 00:12:19,320
to speed up our code problem with that

391
00:12:19,320 --> 00:12:20,820
is that song and dance is kind of weird

392
00:12:20,820 --> 00:12:23,040
and so it's really hard to mock awesome

393
00:12:23,040 --> 00:12:25,560
live and here's like how you might you

394
00:12:25,560 --> 00:12:27,450
know try to go about it you fake up the

395
00:12:27,450 --> 00:12:28,680
file system and then you fake out

396
00:12:28,680 --> 00:12:30,510
awesome Lib and then you create a an

397
00:12:30,510 --> 00:12:32,070
artificial instance to represent

398
00:12:32,070 --> 00:12:33,870
creating one then you fake out the file

399
00:12:33,870 --> 00:12:35,640
system to say hey if we pass the right

400
00:12:35,640 --> 00:12:36,630
path I'll give you something to

401
00:12:36,630 --> 00:12:38,280
represent the config and then when we

402
00:12:38,280 --> 00:12:40,050
get the config will return that instance

403
00:12:40,050 --> 00:12:41,310
and then when you call optimize on the

404
00:12:41,310 --> 00:12:42,840
instance we'll call back with some hints

405
00:12:42,840 --> 00:12:44,520
that's a lot of setup and so you'd be

406
00:12:44,520 --> 00:12:45,720
right to look at that and get really

407
00:12:45,720 --> 00:12:47,430
frustrated how much you know mocking

408
00:12:47,430 --> 00:12:48,960
logic you have at the top of your test

409
00:12:48,960 --> 00:12:50,220
and a lot of people complain about that

410
00:12:50,220 --> 00:12:52,770
but the root cause here has nothing to

411
00:12:52,770 --> 00:12:53,970
do with the mocking library the root

412
00:12:53,970 --> 00:12:55,860
cause is that that was hard to use code

413
00:12:55,860 --> 00:12:58,530
and that like mocking libraries job is

414
00:12:58,530 --> 00:13:00,180
to specify interactions you have with

415
00:13:00,180 --> 00:13:02,610
public API s and so what the mocking

416
00:13:02,610 --> 00:13:04,170
library is doing is it screaming at you

417
00:13:04,170 --> 00:13:07,200
that this is a bad design so instead we

418
00:13:07,200 --> 00:13:09,060
just like force it and so we like copy

419
00:13:09,060 --> 00:13:10,740
paste that set up across all of our

420
00:13:10,740 --> 00:13:14,070
tests and and you know JavaScript we

421
00:13:14,070 --> 00:13:16,080
march along very quickly new major

422
00:13:16,080 --> 00:13:17,670
update is announced to Awesome Lib and

423
00:13:17,670 --> 00:13:19,110
we're really excited that maybe they'll

424
00:13:19,110 --> 00:13:20,460
fix this for us but all they did was

425
00:13:20,460 --> 00:13:23,330
change the callbacks to promises and so

426
00:13:23,330 --> 00:13:26,010
now we have to go over here and J and

427
00:13:26,010 --> 00:13:28,260
just add then resolve so that these are

428
00:13:28,260 --> 00:13:28,480
not

429
00:13:28,480 --> 00:13:29,980
promise resolutions and we have to do it

430
00:13:29,980 --> 00:13:32,649
in 18 different places javascript

431
00:13:32,649 --> 00:13:34,990
marches on and nobody uses awesome lib

432
00:13:34,990 --> 00:13:37,209
anymore we find out that like the new

433
00:13:37,209 --> 00:13:39,550
hotness is mind blow and and everyone's

434
00:13:39,550 --> 00:13:41,199
pressuring us to go and switch as fast

435
00:13:41,199 --> 00:13:43,149
as possible and so now we're just angry

436
00:13:43,149 --> 00:13:44,680
because we have all this pain festering

437
00:13:44,680 --> 00:13:46,930
throughout our system what I found is

438
00:13:46,930 --> 00:13:48,820
that like if code is hard to mock and

439
00:13:48,820 --> 00:13:50,440
it's something that you own it's a

440
00:13:50,440 --> 00:13:51,880
module that's in your codebase and you

441
00:13:51,880 --> 00:13:53,980
can readily change it that that feedback

442
00:13:53,980 --> 00:13:56,010
is fantastic because the remedy has

443
00:13:56,010 --> 00:13:58,570
improved the code design but if it's a

444
00:13:58,570 --> 00:13:59,949
third party thing that you don't control

445
00:13:59,949 --> 00:14:01,089
what are you gonna do like send a pull

446
00:14:01,089 --> 00:14:02,170
request and ask them to change their

447
00:14:02,170 --> 00:14:05,019
public API adjust for you no it's it's

448
00:14:05,019 --> 00:14:06,730
not gonna work out so well it's it's an

449
00:14:06,730 --> 00:14:09,040
example of useless pain and how people

450
00:14:09,040 --> 00:14:10,839
go about testing is full of useless pain

451
00:14:10,839 --> 00:14:12,820
so be on the lookout because it's money

452
00:14:12,820 --> 00:14:14,170
out the window so if you care about

453
00:14:14,170 --> 00:14:16,000
testing you need to minimize the amount

454
00:14:16,000 --> 00:14:17,290
of drudgery or else people are gonna

455
00:14:17,290 --> 00:14:18,970
come to value at less and view it as a

456
00:14:18,970 --> 00:14:21,579
waste of time so instead of mocking out

457
00:14:21,579 --> 00:14:22,750
third-party things I write little

458
00:14:22,750 --> 00:14:26,230
wrappers for them instead an example of

459
00:14:26,230 --> 00:14:27,579
this one might here be here just as

460
00:14:27,579 --> 00:14:29,230
Questor it off to the periphery of my

461
00:14:29,230 --> 00:14:31,060
application this is the only time I'm

462
00:14:31,060 --> 00:14:32,620
ever going to require awesome live in my

463
00:14:32,620 --> 00:14:34,540
app and instead I'm going to expose this

464
00:14:34,540 --> 00:14:37,089
simple awesome callback API that I wish

465
00:14:37,089 --> 00:14:38,980
that it did and sweep under the rug all

466
00:14:38,980 --> 00:14:40,589
the other complexity that I have to have

467
00:14:40,589 --> 00:14:43,779
additionally doing this by habit gives

468
00:14:43,779 --> 00:14:45,399
you some like additional mental space to

469
00:14:45,399 --> 00:14:47,290
think hey maybe we should be caching

470
00:14:47,290 --> 00:14:49,000
this file a read that's kind of silly or

471
00:14:49,000 --> 00:14:51,160
you know we could translate the awesome

472
00:14:51,160 --> 00:14:52,690
Lib errors into something that's like

473
00:14:52,690 --> 00:14:54,310
more concordant with like how we write

474
00:14:54,310 --> 00:14:55,990
error handling for the rest of the

475
00:14:55,990 --> 00:14:57,940
application and you can just do all that

476
00:14:57,940 --> 00:15:00,910
there additionally all that test setup

477
00:15:00,910 --> 00:15:02,260
you know that gets a lot simpler right

478
00:15:02,260 --> 00:15:03,370
because now we're just faking out

479
00:15:03,370 --> 00:15:04,660
something that we understand that's

480
00:15:04,660 --> 00:15:07,420
simple to use and create so much extra

481
00:15:07,420 --> 00:15:09,730
room in each test to be thinking about

482
00:15:09,730 --> 00:15:11,380
like what am I actually trying to

483
00:15:11,380 --> 00:15:13,060
specify instead of getting distracted in

484
00:15:13,060 --> 00:15:15,220
all sorts of mocking related rabbit

485
00:15:15,220 --> 00:15:17,199
holes and you don't have to worry about

486
00:15:17,199 --> 00:15:19,149
writing unit tests of these things for

487
00:15:19,149 --> 00:15:20,199
the same reason you're not going to

488
00:15:20,199 --> 00:15:21,699
improve their design just trust the

489
00:15:21,699 --> 00:15:23,110
framework to work because otherwise this

490
00:15:23,110 --> 00:15:25,839
is money out the window then the next

491
00:15:25,839 --> 00:15:27,639
lesser of the obvious things that I see

492
00:15:27,639 --> 00:15:29,230
folks do is when they read a lot of code

493
00:15:29,230 --> 00:15:31,510
that tangles up logic with delegation

494
00:15:31,510 --> 00:15:32,980
let's explain so let's say that you own

495
00:15:32,980 --> 00:15:34,779
a fencing studio and you rent out swords

496
00:15:34,779 --> 00:15:36,339
and your boss says hey how many swords

497
00:15:36,339 --> 00:15:37,930
are we gonna have on Tuesday and so

498
00:15:37,930 --> 00:15:39,040
instead of like being like a normal

499
00:15:39,040 --> 00:15:40,839
person you write it function that takes

500
00:15:40,839 --> 00:15:41,880
in a date

501
00:15:41,880 --> 00:15:44,830
you call a network requests to fetch out

502
00:15:44,830 --> 00:15:46,060
all the rentals that are currently

503
00:15:46,060 --> 00:15:47,950
outstanding you get those back and then

504
00:15:47,950 --> 00:15:49,390
you filter those down first by

505
00:15:49,390 --> 00:15:50,860
calculating the duration of that rental

506
00:15:50,860 --> 00:15:52,030
and then figuring out when did the

507
00:15:52,030 --> 00:15:53,920
rental start so that I can figure out

508
00:15:53,920 --> 00:15:55,780
what's going to be do then plucking the

509
00:15:55,780 --> 00:15:57,970
swords out of it now you also have an

510
00:15:57,970 --> 00:15:59,530
inventory the stuff that's not currently

511
00:15:59,530 --> 00:16:01,180
being rented so you call that - you get

512
00:16:01,180 --> 00:16:02,470
the inventory back you can catenate the

513
00:16:02,470 --> 00:16:03,610
- and then those are the swords that

514
00:16:03,610 --> 00:16:05,470
you're gonna get back so you can report

515
00:16:05,470 --> 00:16:07,900
success how might you test this well you

516
00:16:07,900 --> 00:16:09,820
start by creating a fake rental object

517
00:16:09,820 --> 00:16:11,350
properly that has the right properties

518
00:16:11,350 --> 00:16:13,570
on it you stub that out so that fetch

519
00:16:13,570 --> 00:16:14,920
rentals calls back with it when it's

520
00:16:14,920 --> 00:16:16,930
invoked you step out the inventory as

521
00:16:16,930 --> 00:16:18,760
well maybe with a second sword and then

522
00:16:18,760 --> 00:16:20,380
with a very particular date argument you

523
00:16:20,380 --> 00:16:22,630
call the subject under test and you

524
00:16:22,630 --> 00:16:23,980
assert that like you get the two swords

525
00:16:23,980 --> 00:16:25,390
that you expect and this works and you

526
00:16:25,390 --> 00:16:26,950
have some other test cases - so it's a

527
00:16:26,950 --> 00:16:29,380
little complicated time passes though

528
00:16:29,380 --> 00:16:30,940
it's working fine and somebody on the

529
00:16:30,940 --> 00:16:32,830
team points up hey you know we can speed

530
00:16:32,830 --> 00:16:34,690
this code path up now because we have a

531
00:16:34,690 --> 00:16:36,640
primed synchronous cache that you can

532
00:16:36,640 --> 00:16:38,200
call you can go into the code and you

533
00:16:38,200 --> 00:16:39,460
can eliminate one of these network

534
00:16:39,460 --> 00:16:41,470
requests so you just call that instead

535
00:16:41,470 --> 00:16:43,060
I've done this and now that looks good

536
00:16:43,060 --> 00:16:45,610
the code is faster but of course what it

537
00:16:45,610 --> 00:16:48,280
broke the test so we're we're frustrated

538
00:16:48,280 --> 00:16:50,800
by that if you look here yes sure enough

539
00:16:50,800 --> 00:16:52,420
we are we are mocking out this other

540
00:16:52,420 --> 00:16:54,490
thing for that part of the behavior it's

541
00:16:54,490 --> 00:16:55,900
not going to do what we want the test is

542
00:16:55,900 --> 00:16:57,280
gonna break and somebody on the team

543
00:16:57,280 --> 00:16:58,870
might point out like oh well the test is

544
00:16:58,870 --> 00:17:00,400
coupled to the implementation this is

545
00:17:00,400 --> 00:17:01,960
very bad this is a common criticism

546
00:17:01,960 --> 00:17:03,760
against mocking but I don't think it's

547
00:17:03,760 --> 00:17:05,470
necessarily bad I think it's a little

548
00:17:05,470 --> 00:17:07,780
bit of naive criticism because like we

549
00:17:07,780 --> 00:17:09,580
write a test and then we assume that

550
00:17:09,580 --> 00:17:12,160
it's going to save us in 800 different

551
00:17:12,160 --> 00:17:14,230
types of change that the system might

552
00:17:14,230 --> 00:17:16,360
undergo but like at most it can help us

553
00:17:16,360 --> 00:17:17,860
from one or two so when you're writing

554
00:17:17,860 --> 00:17:20,230
tests think about like you know this

555
00:17:20,230 --> 00:17:22,959
test is going to make me safe for a

556
00:17:22,959 --> 00:17:25,240
certain kind of change maybe but design

557
00:17:25,240 --> 00:17:27,100
that upfront so for example if you have

558
00:17:27,100 --> 00:17:28,990
your writing test or something it

559
00:17:28,990 --> 00:17:30,430
doesn't have any dependencies it's

560
00:17:30,430 --> 00:17:32,470
probably a pure function specifying

561
00:17:32,470 --> 00:17:34,390
logic and that means that if the rules

562
00:17:34,390 --> 00:17:36,730
to that logic change the tests need to

563
00:17:36,730 --> 00:17:38,440
change if you're just refactoring from a

564
00:17:38,440 --> 00:17:40,090
for loop to a for each or something

565
00:17:40,090 --> 00:17:41,890
you're probably going to be fine but

566
00:17:41,890 --> 00:17:43,930
like if you're adding a grace period to

567
00:17:43,930 --> 00:17:45,760
these rental durations the rules of the

568
00:17:45,760 --> 00:17:47,050
game change so you have to update all of

569
00:17:47,050 --> 00:17:48,760
your code examples it is coupled to the

570
00:17:48,760 --> 00:17:51,610
implementation in that way so if you

571
00:17:51,610 --> 00:17:53,530
have like another test though and you're

572
00:17:53,530 --> 00:17:54,190
mocking all

573
00:17:54,190 --> 00:17:56,529
dependencies of the subject what it does

574
00:17:56,529 --> 00:17:59,080
is it specifies those relationships and

575
00:17:59,080 --> 00:18:00,460
so when the contracts change the test

576
00:18:00,460 --> 00:18:02,289
needs to change the previous example

577
00:18:02,289 --> 00:18:03,759
like if the duration has a grace period

578
00:18:03,759 --> 00:18:05,799
one of its dependencies that's internal

579
00:18:05,799 --> 00:18:08,110
to that that's that's arm's length we

580
00:18:08,110 --> 00:18:09,399
don't have to worry about that this test

581
00:18:09,399 --> 00:18:11,289
should keep passing but if we literally

582
00:18:11,289 --> 00:18:13,539
change what we depend on to do our job

583
00:18:13,539 --> 00:18:15,190
of course that just is going to change

584
00:18:15,190 --> 00:18:18,490
gonna break and you need to fix it where

585
00:18:18,490 --> 00:18:20,080
this really flies off the rails is when

586
00:18:20,080 --> 00:18:22,360
people are right subjects that have you

587
00:18:22,360 --> 00:18:24,519
know both the mocking out dependencies

588
00:18:24,519 --> 00:18:26,409
and also implement some amount of logic

589
00:18:26,409 --> 00:18:28,809
it gets really painful so to illustrate

590
00:18:28,809 --> 00:18:31,179
our own example does this right we have

591
00:18:31,179 --> 00:18:32,710
this current inventory we're calling

592
00:18:32,710 --> 00:18:33,940
this fetch rental service that we're

593
00:18:33,940 --> 00:18:35,620
calling but then we kind of like a joint

594
00:18:35,620 --> 00:18:37,539
on to that this responsibility to like

595
00:18:37,539 --> 00:18:40,480
calculate windswords or do and you can

596
00:18:40,480 --> 00:18:41,769
see it right here it screams off the

597
00:18:41,769 --> 00:18:43,659
page if you know what to look for you

598
00:18:43,659 --> 00:18:45,129
know I've got network requests here and

599
00:18:45,129 --> 00:18:46,840
I got all this logic and it's same thing

600
00:18:46,840 --> 00:18:48,009
in the test I've got the network

601
00:18:48,009 --> 00:18:49,360
requests here and then all this logic

602
00:18:49,360 --> 00:18:51,549
floating around and what this is what

603
00:18:51,549 --> 00:18:52,659
we've called it like if we're given a

604
00:18:52,659 --> 00:18:54,340
design critique of this module we'd say

605
00:18:54,340 --> 00:18:56,139
that this is mixed levels of abstraction

606
00:18:56,139 --> 00:18:58,029
because two of the things that we're

607
00:18:58,029 --> 00:18:59,590
doing are happening with like business

608
00:18:59,590 --> 00:19:00,850
domain objects that speak in our

609
00:19:00,850 --> 00:19:04,120
language like like like peers throughout

610
00:19:04,120 --> 00:19:05,919
the app but then we're also dealing with

611
00:19:05,919 --> 00:19:07,570
all this primitive gunk we're

612
00:19:07,570 --> 00:19:09,279
implementing logic and multiplying

613
00:19:09,279 --> 00:19:11,110
primitive you know values like integers

614
00:19:11,110 --> 00:19:13,779
and such and that's a classic example of

615
00:19:13,779 --> 00:19:15,129
a code smell and the way that you'd

616
00:19:15,129 --> 00:19:16,419
remediated that code smell is by

617
00:19:16,419 --> 00:19:18,730
spinning off that third thing so that

618
00:19:18,730 --> 00:19:20,019
sword stock now has a single

619
00:19:20,019 --> 00:19:21,700
responsibility its job is to break up

620
00:19:21,700 --> 00:19:23,080
the work into these three other parts

621
00:19:23,080 --> 00:19:25,470
and let them do the real heavy lifting

622
00:19:25,470 --> 00:19:28,450
and and that thing that we just spun off

623
00:19:28,450 --> 00:19:30,159
is now a lot easier to maintain because

624
00:19:30,159 --> 00:19:31,480
it just takes in a couple arguments

625
00:19:31,480 --> 00:19:33,009
spits out an outcome it's a pure

626
00:19:33,009 --> 00:19:35,139
function really easy to test really easy

627
00:19:35,139 --> 00:19:37,269
to maintain so if a test is specifying

628
00:19:37,269 --> 00:19:39,669
pure logic there's no easier test to

629
00:19:39,669 --> 00:19:41,440
write inputs and outputs there's there's

630
00:19:41,440 --> 00:19:43,419
nothing else to deal with if it tests

631
00:19:43,419 --> 00:19:45,100
specifies relationships and only

632
00:19:45,100 --> 00:19:47,139
relationships those are completely under

633
00:19:47,139 --> 00:19:48,909
your control they tend to not change

634
00:19:48,909 --> 00:19:50,679
unless the contract changes but if it

635
00:19:50,679 --> 00:19:52,059
specifies both you're gonna have really

636
00:19:52,059 --> 00:19:53,649
really long test cases that change for

637
00:19:53,649 --> 00:19:55,210
all sorts of different reasons it's more

638
00:19:55,210 --> 00:19:57,399
useless pain so if you need a sticky

639
00:19:57,399 --> 00:19:59,649
note to like put on your team wall or

640
00:19:59,649 --> 00:20:02,740
something I encourage everyone to write

641
00:20:02,740 --> 00:20:04,869
functions that either do something or

642
00:20:04,869 --> 00:20:06,900
delegate to someone but

643
00:20:06,900 --> 00:20:10,380
both all right the last lesser of the

644
00:20:10,380 --> 00:20:12,780
obvious things that I see people do is

645
00:20:12,780 --> 00:20:14,490
when they mock dependencies like halfway

646
00:20:14,490 --> 00:20:16,920
down the call stack so what I mean by

647
00:20:16,920 --> 00:20:19,290
that let's take that we have writing a

648
00:20:19,290 --> 00:20:21,210
system to handle travel expenses

649
00:20:21,210 --> 00:20:22,890
so we have our invoicing app and then

650
00:20:22,890 --> 00:20:24,540
we're communicating via HTTP to get some

651
00:20:24,540 --> 00:20:26,670
JSON back from our expense system and so

652
00:20:26,670 --> 00:20:28,620
we have a method send invoice which

653
00:20:28,620 --> 00:20:30,060
calls build invoice which calls to

654
00:20:30,060 --> 00:20:32,040
filter the approved ones should groups

655
00:20:32,040 --> 00:20:33,510
in buy purchase order and then loads the

656
00:20:33,510 --> 00:20:35,190
expenses and then that breaks out to

657
00:20:35,190 --> 00:20:36,960
HTTP to like load them from the expense

658
00:20:36,960 --> 00:20:38,760
system and then all the way back up the

659
00:20:38,760 --> 00:20:40,530
chain with this intermediary D or data

660
00:20:40,530 --> 00:20:42,840
models for those actors so you might ask

661
00:20:42,840 --> 00:20:44,250
hey I'm writing a test to this send

662
00:20:44,250 --> 00:20:46,110
invoice thing which layer do I mock it

663
00:20:46,110 --> 00:20:48,330
it's a good question so what my answer

664
00:20:48,330 --> 00:20:49,230
depends on what kind of test you're

665
00:20:49,230 --> 00:20:49,590
writing

666
00:20:49,590 --> 00:20:51,030
so if you're writing an isolated unit

667
00:20:51,030 --> 00:20:52,500
test as you develop it I would always

668
00:20:52,500 --> 00:20:55,350
say depend not out the direct dependency

669
00:20:55,350 --> 00:20:56,520
because you're gonna get designed

670
00:20:56,520 --> 00:20:58,230
feedback what it's like to invoke that

671
00:20:58,230 --> 00:20:59,910
thing and the test data is going to be

672
00:20:59,910 --> 00:21:01,710
completely minimal so the contract

673
00:21:01,710 --> 00:21:03,270
between those two things is really clear

674
00:21:03,270 --> 00:21:04,980
if you're trying to get regression

675
00:21:04,980 --> 00:21:06,630
safety just make sure that things work I

676
00:21:06,630 --> 00:21:08,070
would either mock out nothing or say

677
00:21:08,070 --> 00:21:10,380
mock out only like external system so

678
00:21:10,380 --> 00:21:11,850
that you're using the system like a real

679
00:21:11,850 --> 00:21:14,430
user would benefits here are that like

680
00:21:14,430 --> 00:21:16,590
your test data is going to be

681
00:21:16,590 --> 00:21:18,300
representative of real life they're

682
00:21:18,300 --> 00:21:19,980
probably gonna like look like HTTP

683
00:21:19,980 --> 00:21:22,380
fixtures and additionally if it breaks

684
00:21:22,380 --> 00:21:23,790
you know what that means it doesn't work

685
00:21:23,790 --> 00:21:26,250
anymore but I see a lot of teams reach

686
00:21:26,250 --> 00:21:27,750
for the convenience of just mocking it

687
00:21:27,750 --> 00:21:29,430
whatever arbitrary depth comes to mind

688
00:21:29,430 --> 00:21:30,900
and this is kind of the worst of both

689
00:21:30,900 --> 00:21:32,970
worlds because when it fails it doesn't

690
00:21:32,970 --> 00:21:34,260
mean anything other than somebody might

691
00:21:34,260 --> 00:21:35,340
have changed something and now you have

692
00:21:35,340 --> 00:21:37,830
to update this test or like the the data

693
00:21:37,830 --> 00:21:39,180
that you're loading the fixtures are all

694
00:21:39,180 --> 00:21:40,920
kind of coupled to that thing and so

695
00:21:40,920 --> 00:21:42,570
your data could fall out of sync at any

696
00:21:42,570 --> 00:21:44,100
moment and yet this is probably like 80%

697
00:21:44,100 --> 00:21:45,930
of the way that I see people knocking

698
00:21:45,930 --> 00:21:47,280
out data providers and their JavaScript

699
00:21:47,280 --> 00:21:51,210
apps so to summarize if you mock out a

700
00:21:51,210 --> 00:21:52,920
direct dependency the failure is

701
00:21:52,920 --> 00:21:54,360
meaningful because it means the contract

702
00:21:54,360 --> 00:21:55,110
had changed

703
00:21:55,110 --> 00:21:57,180
if you mock out an external system again

704
00:21:57,180 --> 00:21:59,310
it's a meaningful failure it means your

705
00:21:59,310 --> 00:22:01,050
thing is broken but if you mock out this

706
00:22:01,050 --> 00:22:02,490
intermediate layer it probably just

707
00:22:02,490 --> 00:22:03,840
means that you have to go and do the

708
00:22:03,840 --> 00:22:05,760
chore of like updating that test now a

709
00:22:05,760 --> 00:22:07,770
probably it's going to like your eyes

710
00:22:07,770 --> 00:22:09,360
will glaze over when the build fails cuz

711
00:22:09,360 --> 00:22:10,500
you know you just have to go update

712
00:22:10,500 --> 00:22:12,510
stuff the common thread between all of

713
00:22:12,510 --> 00:22:14,370
these is that when we reach for mocks is

714
00:22:14,370 --> 00:22:16,320
just a tool of convenience they undercut

715
00:22:16,320 --> 00:22:18,780
our overall test strategies return on

716
00:22:18,780 --> 00:22:20,520
investment and

717
00:22:20,520 --> 00:22:22,830
tends to make mocks a four-letter word

718
00:22:22,830 --> 00:22:24,630
on a lot of teams I said that just

719
00:22:24,630 --> 00:22:26,160
realizing Mach was already a four-letter

720
00:22:26,160 --> 00:22:30,330
word but you get my point let's move on

721
00:22:30,330 --> 00:22:31,730
to the questionable uses of mocking

722
00:22:31,730 --> 00:22:33,960
first one I see a lot is when people

723
00:22:33,960 --> 00:22:36,720
write mocked out tests for existing code

724
00:22:36,720 --> 00:22:38,640
bases let's say that you work at an

725
00:22:38,640 --> 00:22:41,010
internet of things doorbell company and

726
00:22:41,010 --> 00:22:42,330
your startups you got a lot of spaghetti

727
00:22:42,330 --> 00:22:44,520
code but you just got a lot more funding

728
00:22:44,520 --> 00:22:45,840
so you can finally write all those unit

729
00:22:45,840 --> 00:22:47,460
tests that you never did and you've been

730
00:22:47,460 --> 00:22:48,660
really ashamed of the fact that you at

731
00:22:48,660 --> 00:22:51,000
0% code coverage in your system and so

732
00:22:51,000 --> 00:22:52,320
you think well what's the first test

733
00:22:52,320 --> 00:22:53,370
that I could write let's write something

734
00:22:53,370 --> 00:22:55,080
real simple and integral to like what

735
00:22:55,080 --> 00:22:56,850
our system does that when you ring the

736
00:22:56,850 --> 00:22:59,490
door the ding count goes up and so we

737
00:22:59,490 --> 00:23:01,380
require a doorbell and then we require

738
00:23:01,380 --> 00:23:03,540
the thing that rings the doorbell we

739
00:23:03,540 --> 00:23:04,980
create a new doorbell we passes the

740
00:23:04,980 --> 00:23:06,360
subject and make sure that the ding

741
00:23:06,360 --> 00:23:09,059
count has been incremented we run this

742
00:23:09,059 --> 00:23:11,400
test and oh well we got the stupid error

743
00:23:11,400 --> 00:23:13,440
because you got to have a door for a

744
00:23:13,440 --> 00:23:15,630
doorbell no problem I'm gonna import the

745
00:23:15,630 --> 00:23:17,730
door it's actually the door passes to

746
00:23:17,730 --> 00:23:20,160
the doorbell run my test except for the

747
00:23:20,160 --> 00:23:22,170
fact that a door requires a house it's

748
00:23:22,170 --> 00:23:22,679
fine

749
00:23:22,679 --> 00:23:23,750
you're gonna import the house

750
00:23:23,750 --> 00:23:25,410
instantiate a passing the door which

751
00:23:25,410 --> 00:23:26,970
passes the doorbell oh just passing the

752
00:23:26,970 --> 00:23:28,590
subject run the test and a house

753
00:23:28,590 --> 00:23:29,970
requires a paid subscription network

754
00:23:29,970 --> 00:23:31,590
connection to this other service and you

755
00:23:31,590 --> 00:23:33,420
know what now you're just upset and

756
00:23:33,420 --> 00:23:35,250
frustrated because like the thing about

757
00:23:35,250 --> 00:23:37,470
untested code is very often lots of code

758
00:23:37,470 --> 00:23:38,580
paths especially when we're creating

759
00:23:38,580 --> 00:23:40,800
values are only ever invoked in one

760
00:23:40,800 --> 00:23:43,050
place and so this kind of crapped you

761
00:23:43,050 --> 00:23:44,820
can just like accrue one of the best

762
00:23:44,820 --> 00:23:46,170
things about testing is all your code

763
00:23:46,170 --> 00:23:48,150
gets like lots of exercise in lots of

764
00:23:48,150 --> 00:23:49,320
different contexts so you're

765
00:23:49,320 --> 00:23:50,850
incentivized to make value objects that

766
00:23:50,850 --> 00:23:52,950
are cheap and easy to construct so the

767
00:23:52,950 --> 00:23:54,600
right thing to do here is like make your

768
00:23:54,600 --> 00:23:56,670
value objects easier to construct but of

769
00:23:56,670 --> 00:23:57,660
course what they do instead is they

770
00:23:57,660 --> 00:23:59,040
knock all that stuff out replace it with

771
00:23:59,040 --> 00:24:00,990
a fake doorbell set add in count on it

772
00:24:00,990 --> 00:24:03,150
and then get to get to passing but this

773
00:24:03,150 --> 00:24:07,080
is not the right reaction I like if I

774
00:24:07,080 --> 00:24:08,970
had to summarize that into like a motto

775
00:24:08,970 --> 00:24:11,100
I say like mock out independencies mock

776
00:24:11,100 --> 00:24:12,330
out things that have like application

777
00:24:12,330 --> 00:24:15,090
logic that do the work but pass in real

778
00:24:15,090 --> 00:24:16,890
values that type information should be

779
00:24:16,890 --> 00:24:19,140
valuable it should be easy to construct

780
00:24:19,140 --> 00:24:21,240
them and besides tests like this aren't

781
00:24:21,240 --> 00:24:22,320
going to get you they're not gonna move

782
00:24:22,320 --> 00:24:24,690
the needle very much in this person

783
00:24:24,690 --> 00:24:26,880
situation instead what you probably want

784
00:24:26,880 --> 00:24:29,280
with an untested system is more safety

785
00:24:29,280 --> 00:24:31,110
to aggressively refactor it in which

786
00:24:31,110 --> 00:24:32,830
case I recommend you to

787
00:24:32,830 --> 00:24:35,200
the distance so think of ring Bell in

788
00:24:35,200 --> 00:24:36,789
the context of its application maybe

789
00:24:36,789 --> 00:24:38,440
there's an HTTP router in front of that

790
00:24:38,440 --> 00:24:39,970
and then we could write a test that runs

791
00:24:39,970 --> 00:24:41,919
in a separate process that interrogate

792
00:24:41,919 --> 00:24:43,480
that thing just the way a real user

793
00:24:43,480 --> 00:24:45,309
would so we can send a post request to

794
00:24:45,309 --> 00:24:46,630
like exercise the behavior that we want

795
00:24:46,630 --> 00:24:49,029
to test you know assume that maybe

796
00:24:49,029 --> 00:24:50,679
writes to a data store somewhere and

797
00:24:50,679 --> 00:24:52,840
then after we've done that we can run

798
00:24:52,840 --> 00:24:54,519
another request and see whether or not

799
00:24:54,519 --> 00:24:56,140
they'd had the impact that we want it or

800
00:24:56,140 --> 00:24:57,370
we maybe could look directly at the

801
00:24:57,370 --> 00:24:59,080
database and this is gonna provide way

802
00:24:59,080 --> 00:25:01,299
more safety to like actually start

803
00:25:01,299 --> 00:25:02,710
changing and improving the design of

804
00:25:02,710 --> 00:25:05,620
that ring bell subject now integrated

805
00:25:05,620 --> 00:25:07,480
tests they are indeed slower and they

806
00:25:07,480 --> 00:25:09,519
fail for more nonsensical reasons but

807
00:25:09,519 --> 00:25:11,380
they do provide more refactor safety and

808
00:25:11,380 --> 00:25:12,490
if you knew you're in this situation

809
00:25:12,490 --> 00:25:14,200
they're going to be a way more bang for

810
00:25:14,200 --> 00:25:15,519
your buck from a code coverage

811
00:25:15,519 --> 00:25:17,049
perspective and actually providing some

812
00:25:17,049 --> 00:25:18,309
sort of sense that your build means

813
00:25:18,309 --> 00:25:19,450
something

814
00:25:19,450 --> 00:25:21,340
the next questionable use I see people

815
00:25:21,340 --> 00:25:23,440
do a lot is enabling highly layered

816
00:25:23,440 --> 00:25:26,559
designs by leveraging mocks you know

817
00:25:26,559 --> 00:25:27,909
something I've seen over the years is

818
00:25:27,909 --> 00:25:29,950
that testing tends to push us to make

819
00:25:29,950 --> 00:25:32,470
smaller objects so instead of like one

820
00:25:32,470 --> 00:25:35,590
gigantic horse sized duck module we're

821
00:25:35,590 --> 00:25:37,860
writing like a hundred duck-sized horse

822
00:25:37,860 --> 00:25:40,269
so instead of having a gigantic order

823
00:25:40,269 --> 00:25:42,039
j/s method with like 800 methods all

824
00:25:42,039 --> 00:25:43,659
over it we might have like a bunch of

825
00:25:43,659 --> 00:25:44,769
carefully named different

826
00:25:44,769 --> 00:25:47,049
responsibilities in our app in separate

827
00:25:47,049 --> 00:25:50,080
files and so forth now I can talk all

828
00:25:50,080 --> 00:25:52,029
day about like why big modules are bad

829
00:25:52,029 --> 00:25:54,220
but it's not the case that smaller

830
00:25:54,220 --> 00:25:55,630
modules are better just because they're

831
00:25:55,630 --> 00:25:58,120
smaller in fact if you're like every

832
00:25:58,120 --> 00:25:59,409
time you pick up a new feature and you

833
00:25:59,409 --> 00:26:00,639
go to implement it you're just kind of

834
00:26:00,639 --> 00:26:03,220
creating these six cookie cutter objects

835
00:26:03,220 --> 00:26:05,049
over and over and over again you're not

836
00:26:05,049 --> 00:26:06,850
actually like improving the design

837
00:26:06,850 --> 00:26:08,620
that's just large objects with extra

838
00:26:08,620 --> 00:26:11,049
steps like you're still you're adding a

839
00:26:11,049 --> 00:26:12,220
bunch of new direction you're adding a

840
00:26:12,220 --> 00:26:13,570
bunch of files you're not really like

841
00:26:13,570 --> 00:26:15,789
improving things so you might ask hey

842
00:26:15,789 --> 00:26:17,799
what is this like unsolicited design

843
00:26:17,799 --> 00:26:19,570
feedback have to do with mocking well

844
00:26:19,570 --> 00:26:22,299
I'll tell ya if we were testing all this

845
00:26:22,299 --> 00:26:24,519
stuff and we made a change to this like

846
00:26:24,519 --> 00:26:26,289
a bottom layer that's really heavily

847
00:26:26,289 --> 00:26:28,360
dependent on module of course we would

848
00:26:28,360 --> 00:26:30,490
have to update that test but normally it

849
00:26:30,490 --> 00:26:31,960
would also fail all the tests of the

850
00:26:31,960 --> 00:26:33,220
things and depend on that thing and

851
00:26:33,220 --> 00:26:35,799
would disincentivize from a layering

852
00:26:35,799 --> 00:26:38,590
like this but mocking comes in a lot of

853
00:26:38,590 --> 00:26:39,940
teams will be like alright cool i can

854
00:26:39,940 --> 00:26:41,710
just fake out all the layers beneath me

855
00:26:41,710 --> 00:26:43,779
and so that means that i can create

856
00:26:43,779 --> 00:26:45,490
these arbitrarily injury

857
00:26:45,490 --> 00:26:47,740
stacked up applications with with the

858
00:26:47,740 --> 00:26:49,570
test not no longer providing me that

859
00:26:49,570 --> 00:26:51,429
feedback so mocks actually add a blind

860
00:26:51,429 --> 00:26:53,559
spot to teams in this situation and I

861
00:26:53,559 --> 00:26:55,179
would caution you to that like layering

862
00:26:55,179 --> 00:26:57,280
is not the same thing as abstraction

863
00:26:57,280 --> 00:26:59,080
you're not doing domain modeling if all

864
00:26:59,080 --> 00:27:00,549
you're doing is adding more and more

865
00:27:00,549 --> 00:27:03,250
layers of indirection so of course I

866
00:27:03,250 --> 00:27:04,929
love small modules I love small things

867
00:27:04,929 --> 00:27:06,940
make small things but make sure that

868
00:27:06,940 --> 00:27:08,440
they're meaningful that they sell of a

869
00:27:08,440 --> 00:27:09,940
distinct purpose the name means

870
00:27:09,940 --> 00:27:11,770
something and that you're not just like

871
00:27:11,770 --> 00:27:13,960
creating a bunch of files for no reason

872
00:27:13,960 --> 00:27:15,700
so what I'd rather see is an application

873
00:27:15,700 --> 00:27:17,470
that only has like one controller but

874
00:27:17,470 --> 00:27:19,690
like it knows who to call at the right

875
00:27:19,690 --> 00:27:21,460
time so you know maybe there is a

876
00:27:21,460 --> 00:27:23,650
responsibility to create an order and

877
00:27:23,650 --> 00:27:25,510
then I just use that it's like an escape

878
00:27:25,510 --> 00:27:27,309
hatch like a main method for the create

879
00:27:27,309 --> 00:27:29,500
order thing so that it can only focus on

880
00:27:29,500 --> 00:27:31,090
what's special about creating orders and

881
00:27:31,090 --> 00:27:32,470
doesn't get sucked into all this sort of

882
00:27:32,470 --> 00:27:33,970
like carrying the water that is

883
00:27:33,970 --> 00:27:35,409
necessary for every single feature if

884
00:27:35,409 --> 00:27:36,549
you're just kind of copy and paste the

885
00:27:36,549 --> 00:27:38,620
same stack over and over again so if

886
00:27:38,620 --> 00:27:39,730
you're in this situation and you're

887
00:27:39,730 --> 00:27:41,289
finding that like you're isolated unit

888
00:27:41,289 --> 00:27:42,640
tests aren't providing you with like

889
00:27:42,640 --> 00:27:45,309
useful design feedback they're not

890
00:27:45,309 --> 00:27:47,500
providing you value don't do it anymore

891
00:27:47,500 --> 00:27:49,630
in fact maybe question whether or not

892
00:27:49,630 --> 00:27:51,460
like your architecture is too repetitive

893
00:27:51,460 --> 00:27:53,049
and redundant and could be improved

894
00:27:53,049 --> 00:27:55,240
the last questionable thing I see is

895
00:27:55,240 --> 00:27:57,280
folks who rely too heavily on call

896
00:27:57,280 --> 00:27:59,110
verification where you know a mocking

897
00:27:59,110 --> 00:28:00,400
library lets you verify that a call

898
00:28:00,400 --> 00:28:01,720
happened a lot of people will get really

899
00:28:01,720 --> 00:28:03,549
excited about that and I'm a big

900
00:28:03,549 --> 00:28:05,710
believer like in general terms that we

901
00:28:05,710 --> 00:28:07,419
come to value whatever it is we measure

902
00:28:07,419 --> 00:28:09,730
and an assertion is a measurement and so

903
00:28:09,730 --> 00:28:11,830
our assertions tend to steer the design

904
00:28:11,830 --> 00:28:14,049
of our systems so let's say that we run

905
00:28:14,049 --> 00:28:14,770
a petting zoo

906
00:28:14,770 --> 00:28:16,990
and you were given a copy of test double

907
00:28:16,990 --> 00:28:18,190
J s and your birthday so you're really

908
00:28:18,190 --> 00:28:20,950
excited to go mock things out and you

909
00:28:20,950 --> 00:28:22,539
know you're what you're excited about is

910
00:28:22,539 --> 00:28:23,710
like you love petting the pets but now

911
00:28:23,710 --> 00:28:25,120
you can finally assert when that happens

912
00:28:25,120 --> 00:28:26,830
so you know you put the sheep one time

913
00:28:26,830 --> 00:28:29,080
you pet the llama you can even say hey I

914
00:28:29,080 --> 00:28:31,659
put the Sheep two times you don't pet

915
00:28:31,659 --> 00:28:33,159
the crocodile you can ascertain that -

916
00:28:33,159 --> 00:28:34,720
sorry crocodile

917
00:28:34,720 --> 00:28:36,940
we could write a test for this right you

918
00:28:36,940 --> 00:28:38,950
know like when we passed in this like

919
00:28:38,950 --> 00:28:40,720
function a kid and the sheep it'll

920
00:28:40,720 --> 00:28:42,700
return true as well as for the llama and

921
00:28:42,700 --> 00:28:44,350
false for the crocodile we invoked that

922
00:28:44,350 --> 00:28:45,700
subject with those three animals and

923
00:28:45,700 --> 00:28:47,409
then we verify that the sheep and the

924
00:28:47,409 --> 00:28:49,539
llama got pet but the crocodile didn't

925
00:28:49,539 --> 00:28:51,490
and to implement something that passes

926
00:28:51,490 --> 00:28:53,080
this test we import for those two things

927
00:28:53,080 --> 00:28:55,149
and then we pass in the kid and the

928
00:28:55,149 --> 00:28:56,860
animals for each of those animals

929
00:28:56,860 --> 00:28:58,179
it likes the animal that pets the animal

930
00:28:58,179 --> 00:28:59,920
now we got to a passing test great

931
00:28:59,920 --> 00:29:02,080
there's one problem though which is like

932
00:29:02,080 --> 00:29:03,970
kids have dirty hams and the pet

933
00:29:03,970 --> 00:29:05,530
function doesn't say how dirty and we

934
00:29:05,530 --> 00:29:06,910
gotta clean the animals in this petting

935
00:29:06,910 --> 00:29:09,190
zoo and so you just have to guess and so

936
00:29:09,190 --> 00:29:10,990
you set up a cron job to hose down the

937
00:29:10,990 --> 00:29:13,540
llamas every night at 10:00 p.m. which

938
00:29:13,540 --> 00:29:15,460
is a tremendous waste of water so we

939
00:29:15,460 --> 00:29:18,429
want to do better what happened here is

940
00:29:18,429 --> 00:29:20,049
actually an example of like where tools

941
00:29:20,049 --> 00:29:22,000
can mislead us because tools are awesome

942
00:29:22,000 --> 00:29:23,890
because they save us time by reducing

943
00:29:23,890 --> 00:29:25,809
the necessary thoughts and actions we

944
00:29:25,809 --> 00:29:27,580
need to take in order to get a job done

945
00:29:27,580 --> 00:29:29,380
but if we're not careful sometimes our

946
00:29:29,380 --> 00:29:31,179
tools can actually eliminate useful

947
00:29:31,179 --> 00:29:33,549
thoughts and and that happened in this

948
00:29:33,549 --> 00:29:35,950
case now just because you're able to

949
00:29:35,950 --> 00:29:37,540
verify calls with your mocking library

950
00:29:37,540 --> 00:29:40,090
you have to realize that it might

951
00:29:40,090 --> 00:29:42,100
encourage you to write more impure

952
00:29:42,100 --> 00:29:44,200
functions and impure functions those

953
00:29:44,200 --> 00:29:45,429
that have side effects are harder to

954
00:29:45,429 --> 00:29:47,500
maintain than pure functions those that

955
00:29:47,500 --> 00:29:49,510
return values because nowhere when I was

956
00:29:49,510 --> 00:29:50,860
writing this code I think to ask

957
00:29:50,860 --> 00:29:52,480
hey what value should pet returned

958
00:29:52,480 --> 00:29:53,890
because I had a convenient way to assert

959
00:29:53,890 --> 00:29:56,020
that it was just called and if I had to

960
00:29:56,020 --> 00:29:57,490
think about that I'd say well you know

961
00:29:57,490 --> 00:29:59,410
the pet function should probably take an

962
00:29:59,410 --> 00:30:01,419
animal and then return a dirtier version

963
00:30:01,419 --> 00:30:03,309
of that animal I guess so let's pretend

964
00:30:03,309 --> 00:30:05,860
we did that and here we're gonna stub

965
00:30:05,860 --> 00:30:07,210
out that when we pet the sheep we get a

966
00:30:07,210 --> 00:30:08,470
dirty sheep when you pet the llama we

967
00:30:08,470 --> 00:30:10,480
get a dirty llama now we care about this

968
00:30:10,480 --> 00:30:11,799
result and we're gonna assert that we

969
00:30:11,799 --> 00:30:13,120
get a dirty sheep a dirty llama on a

970
00:30:13,120 --> 00:30:14,530
clean crocodile so other parts of our

971
00:30:14,530 --> 00:30:16,090
system know which animals to clean at

972
00:30:16,090 --> 00:30:17,710
the end of the day we update the

973
00:30:17,710 --> 00:30:18,880
implementation like this first we're

974
00:30:18,880 --> 00:30:20,950
gonna take away this for each whenever

975
00:30:20,950 --> 00:30:22,780
you see a for each anywhere any kind of

976
00:30:22,780 --> 00:30:24,730
loop you know that like your application

977
00:30:24,730 --> 00:30:26,440
is just screaming side effects because

978
00:30:26,440 --> 00:30:27,790
it doesn't return anything so we're

979
00:30:27,790 --> 00:30:29,049
going to change that to a map instead

980
00:30:29,049 --> 00:30:31,240
and trade one array for another and

981
00:30:31,240 --> 00:30:33,400
return the value of that pet call and

982
00:30:33,400 --> 00:30:34,600
the parse of the kid doesn't like the

983
00:30:34,600 --> 00:30:36,100
animal will just return the animal as it

984
00:30:36,100 --> 00:30:39,280
was and this pad passes the test so now

985
00:30:39,280 --> 00:30:40,870
we know to wash these first two and we

986
00:30:40,870 --> 00:30:43,630
can spare the third there's just one

987
00:30:43,630 --> 00:30:45,910
last thing here is if you actually run

988
00:30:45,910 --> 00:30:47,650
this test you're you know really big

989
00:30:47,650 --> 00:30:48,880
warning up at the top because I'm gonna

990
00:30:48,880 --> 00:30:50,200
tell you that you stubbed and verified

991
00:30:50,200 --> 00:30:52,210
exactly the same call and that that was

992
00:30:52,210 --> 00:30:54,040
probably redundant and what does that

993
00:30:54,040 --> 00:30:55,690
mean well if you look at this test we're

994
00:30:55,690 --> 00:30:58,450
now like verifying explicitly every

995
00:30:58,450 --> 00:31:00,010
single thing that happens but we no

996
00:31:00,010 --> 00:31:01,210
longer need to be because we're like

997
00:31:01,210 --> 00:31:03,250
also stubbing these things and asserting

998
00:31:03,250 --> 00:31:03,900
on the values

999
00:31:03,900 --> 00:31:05,670
come back and so it's almost provably

1000
00:31:05,670 --> 00:31:07,500
redundant now we can just remove that

1001
00:31:07,500 --> 00:31:09,870
stuff simplified the test and so in

1002
00:31:09,870 --> 00:31:11,130
general after years and years and years

1003
00:31:11,130 --> 00:31:12,660
of writing and using mocking libraries

1004
00:31:12,660 --> 00:31:14,400
I've come to view verification as just

1005
00:31:14,400 --> 00:31:16,350
the assertion of last resort only if it

1006
00:31:16,350 --> 00:31:17,880
really makes sense for the thing I'm

1007
00:31:17,880 --> 00:31:19,410
calling to not return a value or if I'm

1008
00:31:19,410 --> 00:31:20,610
it's out of my hands out of my control

1009
00:31:20,610 --> 00:31:23,160
do I actually write assertions using

1010
00:31:23,160 --> 00:31:24,900
verification the common thread between

1011
00:31:24,900 --> 00:31:26,910
all three of these things is we forget

1012
00:31:26,910 --> 00:31:28,140
that like mocking libraries were

1013
00:31:28,140 --> 00:31:30,120
invented to provide rich design feedback

1014
00:31:30,120 --> 00:31:32,010
to improve the design the simplicity of

1015
00:31:32,010 --> 00:31:34,050
our systems and if we ignore that then

1016
00:31:34,050 --> 00:31:35,640
we're just introducing yet more useless

1017
00:31:35,640 --> 00:31:38,100
pain all right so that was like a lot of

1018
00:31:38,100 --> 00:31:40,290
things to not do the one thing that I

1019
00:31:40,290 --> 00:31:42,480
really like and let's talk about that so

1020
00:31:42,480 --> 00:31:44,160
I was really inspired by this book

1021
00:31:44,160 --> 00:31:45,630
called growing object-oriented software

1022
00:31:45,630 --> 00:31:48,240
guided by tests by Steve Freeman and NAT

1023
00:31:48,240 --> 00:31:50,910
Price years ago and I've iterated on it

1024
00:31:50,910 --> 00:31:52,770
enough that Matt has kindly asked me to

1025
00:31:52,770 --> 00:31:55,140
call what I do something else so I call

1026
00:31:55,140 --> 00:31:56,430
a discovery testing we're gonna do a

1027
00:31:56,430 --> 00:31:58,500
quick demo so suppose that you write

1028
00:31:58,500 --> 00:32:00,660
conference talks but it takes too long

1029
00:32:00,660 --> 00:32:02,940
there's just too much emoji and fiddling

1030
00:32:02,940 --> 00:32:05,130
and stuff so you decide let's meet it

1031
00:32:05,130 --> 00:32:06,510
and so you take something that loads up

1032
00:32:06,510 --> 00:32:08,310
all your notes you run it through a

1033
00:32:08,310 --> 00:32:10,350
sentiment I'll sentiment analyzer to

1034
00:32:10,350 --> 00:32:12,090
find what emoji should match up and then

1035
00:32:12,090 --> 00:32:14,430
you generate a keynote file you know if

1036
00:32:14,430 --> 00:32:15,930
we start a test like this and we're

1037
00:32:15,930 --> 00:32:17,400
practicing discovery testing I always

1038
00:32:17,400 --> 00:32:18,750
start with the setup at the very top

1039
00:32:18,750 --> 00:32:21,240
layer and I ask myself what's the code

1040
00:32:21,240 --> 00:32:23,400
that I wish I had because I'm lazy and

1041
00:32:23,400 --> 00:32:25,230
I'm also relatively incompetent and like

1042
00:32:25,230 --> 00:32:27,420
when I'm looking at a blank code listing

1043
00:32:27,420 --> 00:32:29,040
I just panic and assume that I'm too

1044
00:32:29,040 --> 00:32:31,050
dumb to figure it out but if I could

1045
00:32:31,050 --> 00:32:32,520
just say hey I wish I had something that

1046
00:32:32,520 --> 00:32:34,230
loads notes and something that pairs

1047
00:32:34,230 --> 00:32:35,970
those notes up with emoji to create

1048
00:32:35,970 --> 00:32:37,380
slides and then finally something to

1049
00:32:37,380 --> 00:32:38,790
create the keynote file for me that I

1050
00:32:38,790 --> 00:32:40,770
can understand and then you know I load

1051
00:32:40,770 --> 00:32:42,120
up my subject and I can start thinking

1052
00:32:42,120 --> 00:32:44,070
about the test well of course the test

1053
00:32:44,070 --> 00:32:45,510
should be it creates the keynote from

1054
00:32:45,510 --> 00:32:47,970
the notes I run this test and it fails

1055
00:32:47,970 --> 00:32:49,650
because I'm talking about code that

1056
00:32:49,650 --> 00:32:51,570
doesn't exist so it says hey this module

1057
00:32:51,570 --> 00:32:53,250
isn't real so I just touch it and I run

1058
00:32:53,250 --> 00:32:55,320
it again and then this other one the

1059
00:32:55,320 --> 00:32:57,000
second pair emoji isn't real touch it

1060
00:32:57,000 --> 00:32:59,340
run again and then create file isn't

1061
00:32:59,340 --> 00:33:01,800
realized cetera et cetera and I got that

1062
00:33:01,800 --> 00:33:03,570
too passing and what I love about that

1063
00:33:03,570 --> 00:33:05,790
is that it gives me small incremental

1064
00:33:05,790 --> 00:33:07,440
forward progress throughout the day even

1065
00:33:07,440 --> 00:33:09,120
if all I accomplished just then was like

1066
00:33:09,120 --> 00:33:11,430
the plumbing of my application it feels

1067
00:33:11,430 --> 00:33:12,830
like paint by number and

1068
00:33:12,830 --> 00:33:16,340
you know programming is an area of just

1069
00:33:16,340 --> 00:33:18,679
professional life where we I really wish

1070
00:33:18,679 --> 00:33:21,049
that things could we'd get more feedback

1071
00:33:21,049 --> 00:33:23,000
through the day like hey good job bad

1072
00:33:23,000 --> 00:33:25,460
job and sometimes people go days weeks

1073
00:33:25,460 --> 00:33:27,169
months without any real feedback that

1074
00:33:27,169 --> 00:33:29,330
they're on the right path so so testing

1075
00:33:29,330 --> 00:33:31,580
this way provide like soothes my anxiety

1076
00:33:31,580 --> 00:33:33,860
and now you know I've broken this work

1077
00:33:33,860 --> 00:33:35,539
up to at least three responsibilities

1078
00:33:35,539 --> 00:33:38,090
here so I can start writing the actual

1079
00:33:38,090 --> 00:33:39,830
tests now I assume I'm gonna need

1080
00:33:39,830 --> 00:33:41,600
something to represent notes so I create

1081
00:33:41,600 --> 00:33:44,870
like an ode note domain module and when

1082
00:33:44,870 --> 00:33:46,760
I stub you know for given a search

1083
00:33:46,760 --> 00:33:48,200
string you know I should call back with

1084
00:33:48,200 --> 00:33:50,179
those notes I assume I'm gonna need like

1085
00:33:50,179 --> 00:33:52,429
a slide value as well and so when I call

1086
00:33:52,429 --> 00:33:54,409
this pair emoji thing with the notes it

1087
00:33:54,409 --> 00:33:55,399
just should return these slides

1088
00:33:55,399 --> 00:33:57,440
synchronously I call my subject with

1089
00:33:57,440 --> 00:33:58,850
that search string and the given path

1090
00:33:58,850 --> 00:34:00,830
that I want to ready to file - and then

1091
00:34:00,830 --> 00:34:02,360
I verify that create file was called

1092
00:34:02,360 --> 00:34:04,490
with those slides at that path run my

1093
00:34:04,490 --> 00:34:06,710
test again and here's the message I've

1094
00:34:06,710 --> 00:34:07,940
been working for it's all this time

1095
00:34:07,940 --> 00:34:10,639
right I expected this to be called with

1096
00:34:10,639 --> 00:34:12,679
these slides at that path I can make

1097
00:34:12,679 --> 00:34:14,450
this test pass by importing the three

1098
00:34:14,450 --> 00:34:16,609
you know still empty modules we're gonna

1099
00:34:16,609 --> 00:34:18,770
fake that out at run time passing the

1100
00:34:18,770 --> 00:34:21,200
the topic to load notes get the callback

1101
00:34:21,200 --> 00:34:24,080
callback create the slides and then

1102
00:34:24,080 --> 00:34:25,429
create the file with those slides in

1103
00:34:25,429 --> 00:34:27,349
that given path I run this test and now

1104
00:34:27,349 --> 00:34:30,440
it passes now you'd be right to ask like

1105
00:34:30,440 --> 00:34:32,659
that was a lot of words and minutes for

1106
00:34:32,659 --> 00:34:34,730
five lines of code like how is this

1107
00:34:34,730 --> 00:34:36,230
actually a productive use of your time

1108
00:34:36,230 --> 00:34:38,089
and the answer is I've actually done a

1109
00:34:38,089 --> 00:34:39,800
lot of work here just by thinking

1110
00:34:39,800 --> 00:34:42,109
through all these things I just like

1111
00:34:42,109 --> 00:34:43,580
agreed to like hey this is our public

1112
00:34:43,580 --> 00:34:45,889
API of these two strings I know that

1113
00:34:45,889 --> 00:34:47,510
when I pass a topic into load notes I

1114
00:34:47,510 --> 00:34:49,520
get notes back I know pair emoji trades

1115
00:34:49,520 --> 00:34:51,200
notes for slides and I know that we

1116
00:34:51,200 --> 00:34:53,240
passed slides and path to some other

1117
00:34:53,240 --> 00:34:55,580
responsibilities the subject at this

1118
00:34:55,580 --> 00:34:57,440
point the entry point is done I'm not

1119
00:34:57,440 --> 00:34:58,970
kidding when I say often never look at

1120
00:34:58,970 --> 00:35:00,680
that top level again I've successfully

1121
00:35:00,680 --> 00:35:03,080
broken it up into three problems the

1122
00:35:03,080 --> 00:35:04,520
work is broken down into three things

1123
00:35:04,520 --> 00:35:05,900
that we know the contract so you don't

1124
00:35:05,900 --> 00:35:07,040
have to worry about the fiddly bits

1125
00:35:07,040 --> 00:35:08,359
giving all tangled together at some

1126
00:35:08,359 --> 00:35:09,920
point they have different jobs that we

1127
00:35:09,920 --> 00:35:12,080
know in advance and we already proven

1128
00:35:12,080 --> 00:35:13,760
out the contract between those things so

1129
00:35:13,760 --> 00:35:15,109
we know what to call them with because

1130
00:35:15,109 --> 00:35:16,280
there's already something calling them

1131
00:35:16,280 --> 00:35:18,890
and that's great so additionally you

1132
00:35:18,890 --> 00:35:20,780
know we we sussed out a couple of value

1133
00:35:20,780 --> 00:35:22,490
types that we want to be passing through

1134
00:35:22,490 --> 00:35:24,650
these methods you know we have some

1135
00:35:24,650 --> 00:35:25,980
notes and

1136
00:35:25,980 --> 00:35:28,110
and the next step is like it's a tree

1137
00:35:28,110 --> 00:35:30,180
right it's just recursion so we ask like

1138
00:35:30,180 --> 00:35:31,890
okay so how do you what do we want load

1139
00:35:31,890 --> 00:35:33,270
notes to do well it's got to read from

1140
00:35:33,270 --> 00:35:35,850
some note file parse our outline and

1141
00:35:35,850 --> 00:35:37,140
then flatten those points so that we're

1142
00:35:37,140 --> 00:35:39,180
having a linear presentation and the

1143
00:35:39,180 --> 00:35:41,310
first is IO and the second and third are

1144
00:35:41,310 --> 00:35:42,780
just pure functions and the writing test

1145
00:35:42,780 --> 00:35:44,070
for pure functions like we talked about

1146
00:35:44,070 --> 00:35:45,510
it's really easy so we want to maximize

1147
00:35:45,510 --> 00:35:48,720
those the pear emoji thing maybe we

1148
00:35:48,720 --> 00:35:50,370
tokenize those notes and then we run

1149
00:35:50,370 --> 00:35:52,650
that off to a sentiment analyzer and

1150
00:35:52,650 --> 00:35:54,090
then we convert them to slides and the

1151
00:35:54,090 --> 00:35:55,560
first things are pure function the

1152
00:35:55,560 --> 00:35:56,760
second thing is a good probably gonna be

1153
00:35:56,760 --> 00:35:58,170
a wrapper because I don't want to figure

1154
00:35:58,170 --> 00:36:00,180
out how to do sentiment analysis oh not

1155
00:36:00,180 --> 00:36:03,060
another pure function this last bit you

1156
00:36:03,060 --> 00:36:04,440
know we want to build some kind of

1157
00:36:04,440 --> 00:36:06,360
layout from those slides like text goes

1158
00:36:06,360 --> 00:36:08,550
on top emoji down here or whatever then

1159
00:36:08,550 --> 00:36:09,990
we need to generate Apple script

1160
00:36:09,990 --> 00:36:11,940
commands so we can actually know like

1161
00:36:11,940 --> 00:36:13,350
have a big array of like everything we

1162
00:36:13,350 --> 00:36:15,330
need to automate with keynote and then

1163
00:36:15,330 --> 00:36:16,710
finally something who's responsible for

1164
00:36:16,710 --> 00:36:18,960
rifling through all of those commands

1165
00:36:18,960 --> 00:36:21,000
and and generating the file for us the

1166
00:36:21,000 --> 00:36:22,860
first and second again pure functions

1167
00:36:22,860 --> 00:36:24,510
real easy and the last one would just

1168
00:36:24,510 --> 00:36:26,550
like shell out to this thing called OS a

1169
00:36:26,550 --> 00:36:28,410
script that's gonna like open up Apple

1170
00:36:28,410 --> 00:36:29,580
script in automate keynote

1171
00:36:29,580 --> 00:36:31,770
what I love about this process is it

1172
00:36:31,770 --> 00:36:33,570
gives me reliable incremental progress

1173
00:36:33,570 --> 00:36:35,820
throughout my day what shakes out the

1174
00:36:35,820 --> 00:36:36,780
other end is a bunch of single

1175
00:36:36,780 --> 00:36:38,730
responsibility units with intention

1176
00:36:38,730 --> 00:36:41,280
revealing names the the organization of

1177
00:36:41,280 --> 00:36:42,240
all these small things is actually

1178
00:36:42,240 --> 00:36:44,130
discoverable like if I create a new

1179
00:36:44,130 --> 00:36:45,780
directory every time i recurse well if

1180
00:36:45,780 --> 00:36:46,980
you're reading my code you only have to

1181
00:36:46,980 --> 00:36:48,210
dive as deep as you seem to be

1182
00:36:48,210 --> 00:36:49,890
interested and to answer the question

1183
00:36:49,890 --> 00:36:51,930
you're looking for it separates out all

1184
00:36:51,930 --> 00:36:53,880
of the values from the logic by default

1185
00:36:53,880 --> 00:36:55,830
so it doesn't tangle those up and I

1186
00:36:55,830 --> 00:36:57,300
spend most of my time writing really

1187
00:36:57,300 --> 00:36:59,220
easy like synchronous pure functions

1188
00:36:59,220 --> 00:37:00,690
which are the easiest kind of code to

1189
00:37:00,690 --> 00:37:04,650
maintain that's all I got so I thank you

1190
00:37:04,650 --> 00:37:06,450
for being patient really grateful that

1191
00:37:06,450 --> 00:37:09,110
you showed up at a talk late in the day

1192
00:37:09,110 --> 00:37:11,850
you know like I mentioned testable we're

1193
00:37:11,850 --> 00:37:13,890
a consultancy if your team is looking

1194
00:37:13,890 --> 00:37:16,820
for you know experienced developers

1195
00:37:16,820 --> 00:37:18,780
maybe you're only thinking about hiring

1196
00:37:18,780 --> 00:37:20,580
but you might be open to talking to us

1197
00:37:20,580 --> 00:37:21,990
instead about how we might be able to

1198
00:37:21,990 --> 00:37:23,430
help out and integrate with your team

1199
00:37:23,430 --> 00:37:24,990
I'd love to meet you check out our

1200
00:37:24,990 --> 00:37:27,060
website we're also hiring so if you'd

1201
00:37:27,060 --> 00:37:28,800
like to work remotely you kind of share

1202
00:37:28,800 --> 00:37:30,120
our passion for improving how the world

1203
00:37:30,120 --> 00:37:31,770
write software and you want to share

1204
00:37:31,770 --> 00:37:33,360
your experience with others check out

1205
00:37:33,360 --> 00:37:35,850
our join page video of this talk I've

1206
00:37:35,850 --> 00:37:37,410
got a previous one from a cert J s in

1207
00:37:37,410 --> 00:37:39,020
February I've already I buffered

1208
00:37:39,020 --> 00:37:40,849
so it's gonna be tweeting the video link

1209
00:37:40,849 --> 00:37:42,730
momentarily to my Twitter accounts URLs

1210
00:37:42,730 --> 00:37:44,869
would also love to see your feedback

1211
00:37:44,869 --> 00:37:47,720
through our website forum also I've got

1212
00:37:47,720 --> 00:37:50,000
brand new testable stickers are a new

1213
00:37:50,000 --> 00:37:52,369
alternate logo I'm gonna be here all

1214
00:37:52,369 --> 00:37:53,960
week and if you ask for a sticker I'd be

1215
00:37:53,960 --> 00:37:56,450
happy to give you one there's just one

1216
00:37:56,450 --> 00:37:57,619
last thing I want to share before we go

1217
00:37:57,619 --> 00:38:01,040
which is my wonderful wife Becky down in

1218
00:38:01,040 --> 00:38:02,599
front she put in a lot of work this

1219
00:38:02,599 --> 00:38:04,790
morning I took a lift out to the store

1220
00:38:04,790 --> 00:38:08,060
and she she just for your all's benefit

1221
00:38:08,060 --> 00:38:10,550
I'm not the generous type but she is but

1222
00:38:10,550 --> 00:38:11,900
I am like the head of marketing for

1223
00:38:11,900 --> 00:38:15,109
testable so I saw an opportunity and she

1224
00:38:15,109 --> 00:38:18,170
purchased like every last bug spray at

1225
00:38:18,170 --> 00:38:26,000
the target nearby so Thank You Becky

1226
00:38:26,000 --> 00:38:30,560
and then I affixed branded stickers on

1227
00:38:30,560 --> 00:38:32,420
to each of them so here's the deal

1228
00:38:32,420 --> 00:38:33,619
because there's not enough of these for

1229
00:38:33,619 --> 00:38:36,560
everybody if you come and meet us at

1230
00:38:36,560 --> 00:38:38,119
dinner and you talk a little bit and you

1231
00:38:38,119 --> 00:38:39,770
say just enough to demonstrate that you

1232
00:38:39,770 --> 00:38:41,720
actually showed up to a 5:45 p.m. talk

1233
00:38:41,720 --> 00:38:43,700
we will happily give you a bug spray

1234
00:38:43,700 --> 00:38:45,619
until we run out of them that's our

1235
00:38:45,619 --> 00:38:47,599
little gift to you thank you for your

1236
00:38:47,599 --> 00:38:49,040
patience I had a really good time

1237
00:38:49,040 --> 00:38:50,780
speaking here today

1238
00:38:50,780 --> 00:38:55,440
[Music]

