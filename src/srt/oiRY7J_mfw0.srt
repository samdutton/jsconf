1
00:00:08,420 --> 00:00:11,460

welcome everybody my name is Bella Lima

2
00:00:11,460 --> 00:00:18,029
I work for regalia as consultants for

3
00:00:18,029 --> 00:00:21,260
notes pane and I'm very glad I was

4
00:00:21,260 --> 00:00:23,430
invited to come here and talk to you

5
00:00:23,430 --> 00:00:24,869
about the wonderful things that we're

6
00:00:24,869 --> 00:00:29,630
doing gnome and related to JavaScript

7
00:00:29,630 --> 00:00:33,600
yeah it's a bit about me I was here and

8
00:00:33,600 --> 00:00:36,960
web developer a few years ago then I

9
00:00:36,960 --> 00:00:38,550
became a genome developer but I kept

10
00:00:38,550 --> 00:00:40,829
doing things related to JavaScript I'm

11
00:00:40,829 --> 00:00:43,649
the weapon in the server side I have

12
00:00:43,649 --> 00:00:45,120
involvement in other products as well

13
00:00:45,120 --> 00:00:47,579
and that's disclaimer i must say that my

14
00:00:47,579 --> 00:00:51,000
genome shall neither GW inspection GES

15
00:00:51,000 --> 00:00:53,160
kohaku myself and just a messenger I

16
00:00:53,160 --> 00:00:56,550
want to bring a message from the genome

17
00:00:56,550 --> 00:00:59,969
community to all of you and try to

18
00:00:59,969 --> 00:01:03,059
resend you the technology we have been

19
00:01:03,059 --> 00:01:06,750
working on for the genome free with the

20
00:01:06,750 --> 00:01:09,510
two purpose one of them is to

21
00:01:09,510 --> 00:01:12,000
communicate the great knowledge that we

22
00:01:12,000 --> 00:01:14,700
have been working non very hard in the

23
00:01:14,700 --> 00:01:17,759
last few years and second try to erase a

24
00:01:17,759 --> 00:01:21,720
rising interest in the wild JavaScript

25
00:01:21,720 --> 00:01:25,740
community about genome and developing

26
00:01:25,740 --> 00:01:28,470
applications using our wonderful stack

27
00:01:28,470 --> 00:01:34,590
of libraries yeah let's start by asking

28
00:01:34,590 --> 00:01:37,439
the question what is going on okay we

29
00:01:37,439 --> 00:01:39,780
numb genome is a group of people it's a

30
00:01:39,780 --> 00:01:44,280
game it truly community-driven break it

31
00:01:44,280 --> 00:01:49,770
has 11 years array almost and yeah it's

32
00:01:49,770 --> 00:01:51,869
also a full featured desktop environment

33
00:01:51,869 --> 00:01:55,979
air I'm going to ask you how many of you

34
00:01:55,979 --> 00:02:00,390
have tried you know or have said of

35
00:02:00,390 --> 00:02:04,610
course it will be easy

36
00:02:04,610 --> 00:02:08,759
yes you can see in this light that's the

37
00:02:08,759 --> 00:02:13,110
genome two in the those and this genome

38
00:02:13,110 --> 00:02:14,940
free maybe you can see a clear

39
00:02:14,940 --> 00:02:17,880
difference ok genome is also collection

40
00:02:17,880 --> 00:02:19,710
of libraries and programs you're not

41
00:02:19,710 --> 00:02:22,680
supposed to result of that an open our

42
00:02:22,680 --> 00:02:26,690
free software there's a bunch of

43
00:02:26,690 --> 00:02:29,790
programs and libraries that has more

44
00:02:29,790 --> 00:02:34,110
than 10 years of evolution and they have

45
00:02:34,110 --> 00:02:37,560
been used in production for a lot of

46
00:02:37,560 --> 00:02:43,260
time already yeah in Apple this year the

47
00:02:43,260 --> 00:02:45,900
non-free was released it was the a very

48
00:02:45,900 --> 00:02:48,810
important milestone for us there was a

49
00:02:48,810 --> 00:02:50,730
lot of people working for a lot of time

50
00:02:50,730 --> 00:02:59,630
on this and a the genome free include a

51
00:02:59,630 --> 00:03:04,050
major breakthrough in several points for

52
00:03:04,050 --> 00:03:05,700
example in this time we just revamped

53
00:03:05,700 --> 00:03:08,010
everything we created a new user

54
00:03:08,010 --> 00:03:11,070
experience we now use the new Howard

55
00:03:11,070 --> 00:03:12,600
capabilities that we have in modern

56
00:03:12,600 --> 00:03:16,170
computers and we really did a lot of

57
00:03:16,170 --> 00:03:18,420
work clean up the stack here there was a

58
00:03:18,420 --> 00:03:24,570
lot of the stuff was very it was very

59
00:03:24,570 --> 00:03:26,790
full of things that we really didn't

60
00:03:26,790 --> 00:03:31,260
need or we could really remove from the

61
00:03:31,260 --> 00:03:36,150
stack make a genome simpler and yeah

62
00:03:36,150 --> 00:03:39,630
also we use the genome shell and I said

63
00:03:39,630 --> 00:03:41,489
we follow you you see experiencing you

64
00:03:41,489 --> 00:03:45,440
know for this version beckenham shell

65
00:03:45,440 --> 00:03:48,150
maybe some of you have seen it already

66
00:03:48,150 --> 00:03:56,600
was just a I'm a full desktop experience

67
00:03:56,600 --> 00:04:02,840
integrating compensating

68
00:04:02,850 --> 00:04:10,010
okay loader or it's fine okay okay yeah

69
00:04:10,010 --> 00:04:14,940
it's a an application launch in Sweet

70
00:04:14,940 --> 00:04:18,030
Chin it allows multiple desktops and

71
00:04:18,030 --> 00:04:20,489
much more in fact two years ago i was

72
00:04:20,489 --> 00:04:24,330
attending gears conf and I had a very

73
00:04:24,330 --> 00:04:26,250
early version of the genome shell

74
00:04:26,250 --> 00:04:28,110
running in my laptop and it really

75
00:04:28,110 --> 00:04:29,810
raised a lot of interest when I was

76
00:04:29,810 --> 00:04:33,920
showing it to the people informally and

77
00:04:33,920 --> 00:04:38,010
I realized that was there was a

78
00:04:38,010 --> 00:04:39,630
miscommunication from the genome

79
00:04:39,630 --> 00:04:44,100
community what we were doing and yeah

80
00:04:44,100 --> 00:04:47,640
you read there that this javascript is

81
00:04:47,640 --> 00:04:51,660
is powering the genome shell it's the

82
00:04:51,660 --> 00:04:54,810
glue that we are using to access their

83
00:04:54,810 --> 00:05:01,190
low level AC libraries of genome and

84
00:05:01,190 --> 00:05:04,320
yeah that's you can see it's almost 30k

85
00:05:04,320 --> 00:05:10,440
lines of JavaScript against also 40 k of

86
00:05:10,440 --> 00:05:14,130
c yeah I realized that we need to

87
00:05:14,130 --> 00:05:17,280
communicate genome in other forums also

88
00:05:17,280 --> 00:05:20,010
because it's very attractive platform

89
00:05:20,010 --> 00:05:22,640
right now for JavaScript developers

90
00:05:22,640 --> 00:05:24,870
after the thing that acknowledges I'm

91
00:05:24,870 --> 00:05:27,000
going to be presenting today so this is

92
00:05:27,000 --> 00:05:30,320
most more or less the genome shell stack

93
00:05:30,320 --> 00:05:33,180
we use OpenGL on the ball we have this

94
00:05:33,180 --> 00:05:37,590
great technology platter and we have the

95
00:05:37,590 --> 00:05:40,170
old metacity wrapped by matter we are

96
00:05:40,170 --> 00:05:43,020
the shell Toki we have also CSS fourth

97
00:05:43,020 --> 00:05:46,590
inning we have this introspection layer

98
00:05:46,590 --> 00:05:48,750
that we're going to be explaining and we

99
00:05:48,750 --> 00:05:51,000
have the JavaScript engine and on top of

100
00:05:51,000 --> 00:05:53,190
this chrome shell maybe i can i can show

101
00:05:53,190 --> 00:05:54,810
you very quickly you know i'm sure maybe

102
00:05:54,810 --> 00:05:57,690
it's not needed raise your hand if you

103
00:05:57,690 --> 00:05:59,610
haven't seen me know Michelle running

104
00:05:59,610 --> 00:06:03,740
before only you

105
00:06:03,740 --> 00:06:07,669
or maybe later I can show you so we're

106
00:06:07,669 --> 00:06:09,080
going to be focusing on these two

107
00:06:09,080 --> 00:06:12,139
technologies that really are the the

108
00:06:12,139 --> 00:06:13,759
technologies that allow us to have

109
00:06:13,759 --> 00:06:18,110
access to the core libraries using

110
00:06:18,110 --> 00:06:23,660
javascript so let's start with the

111
00:06:23,660 --> 00:06:26,630
introspection what is ganamos w

112
00:06:26,630 --> 00:06:30,889
introspection well it's a set of tools

113
00:06:30,889 --> 00:06:35,120
that we have to attract the metadata of

114
00:06:35,120 --> 00:06:38,409
C libraries we attract the API

115
00:06:38,409 --> 00:06:42,590
description in a latinum format of this

116
00:06:42,590 --> 00:06:47,419
very easy to use in a runtime not in the

117
00:06:47,419 --> 00:06:50,569
compile time so we we extracted API a

118
00:06:50,569 --> 00:06:54,259
contract of the library and we put it in

119
00:06:54,259 --> 00:06:56,150
a very well known location on the hard

120
00:06:56,150 --> 00:07:01,430
drive for all forums to access it yeah

121
00:07:01,430 --> 00:07:04,250
we need to realize that the ad it's not

122
00:07:04,250 --> 00:07:06,909
as fully automatic because we need to

123
00:07:06,909 --> 00:07:10,370
annotate the api's we're going to

124
00:07:10,370 --> 00:07:11,990
explain what is it it's very simple

125
00:07:11,990 --> 00:07:15,349
process and also we should design the

126
00:07:15,349 --> 00:07:19,060
the sea ap is in a way that they are an

127
00:07:19,060 --> 00:07:21,849
introspection friendly meaning that

128
00:07:21,849 --> 00:07:26,509
there's no we're citrix on it that make

129
00:07:26,509 --> 00:07:31,280
make it very alien for other languages

130
00:07:31,280 --> 00:07:37,690
to bind so the goals of this technology

131
00:07:37,690 --> 00:07:41,840
are basically to enable us to use the C

132
00:07:41,840 --> 00:07:44,780
libraries in binding the languages like

133
00:07:44,780 --> 00:07:50,080
JavaScript lower parel Python etc and

134
00:07:50,080 --> 00:07:53,479
there's also other uses like API

135
00:07:53,479 --> 00:07:55,370
verification

136
00:07:55,370 --> 00:07:58,830
documentation and yeah this is the most

137
00:07:58,830 --> 00:08:00,449
important thing I think the second one

138
00:08:00,449 --> 00:08:02,759
which is share binding infrastructure

139
00:08:02,759 --> 00:08:04,439
nowadays if you have a library and you

140
00:08:04,439 --> 00:08:07,469
want to make it and respectable sorry if

141
00:08:07,469 --> 00:08:09,689
you want to make it accessible in a

142
00:08:09,689 --> 00:08:12,090
scriptable language you need to write a

143
00:08:12,090 --> 00:08:15,719
binding and it starts the same for every

144
00:08:15,719 --> 00:08:17,580
library that you right I'm going to use

145
00:08:17,580 --> 00:08:20,819
you need to to create the bindings also

146
00:08:20,819 --> 00:08:22,080
and it's a lot of work and this

147
00:08:22,080 --> 00:08:24,539
dublicate the work because the bindings

148
00:08:24,539 --> 00:08:27,539
that we use for accessing in c library

149
00:08:27,539 --> 00:08:32,909
in python it's almost the same code that

150
00:08:32,909 --> 00:08:34,440
you need for javascript or four

151
00:08:34,440 --> 00:08:36,779
languages and what we're trying to

152
00:08:36,779 --> 00:08:40,070
achieve with the other introspections to

153
00:08:40,070 --> 00:08:42,779
concentrate that all that effort in just

154
00:08:42,779 --> 00:08:47,399
one library and make the binding work

155
00:08:47,399 --> 00:08:54,050
but very simple oops sorry about this i

156
00:08:54,050 --> 00:08:56,459
will mention that this technology was

157
00:08:56,459 --> 00:08:57,990
initially created by the start by a

158
00:08:57,990 --> 00:09:00,870
startup called little that they wanted

159
00:09:00,870 --> 00:09:02,959
to create a new user experience for the

160
00:09:02,959 --> 00:09:06,360
vision of the device and they hired a

161
00:09:06,360 --> 00:09:10,880
some of the very good genome hackers

162
00:09:10,880 --> 00:09:13,290
from the genome community and they start

163
00:09:13,290 --> 00:09:15,269
creating this ontology and NASA wrestled

164
00:09:15,269 --> 00:09:18,690
and this ontology was contributed back

165
00:09:18,690 --> 00:09:21,510
to to genome and we were able to use

166
00:09:21,510 --> 00:09:28,709
them for this new experience okay this

167
00:09:28,709 --> 00:09:32,540
this is kind of big I'll try to

168
00:09:32,540 --> 00:09:40,770
wait

169
00:09:40,780 --> 00:09:44,650
nah doesn't matter okay sorry about that

170
00:09:44,650 --> 00:09:47,270
well this is basically a big picture of

171
00:09:47,270 --> 00:09:49,370
what's going on here the only bit

172
00:09:49,370 --> 00:09:51,980
missing is it is the label that says run

173
00:09:51,980 --> 00:09:54,110
time in the other side so this is

174
00:09:54,110 --> 00:09:56,240
compile time this runtime this is our

175
00:09:56,240 --> 00:10:02,840
library and during build time we have a

176
00:10:02,840 --> 00:10:06,140
normal compilation through GCC um we

177
00:10:06,140 --> 00:10:11,390
also have this process which is is this

178
00:10:11,390 --> 00:10:14,480
script called dr scanner creates a kia

179
00:10:14,480 --> 00:10:17,840
and an xml file is the xml

180
00:10:17,840 --> 00:10:21,560
representation of the library api and

181
00:10:21,560 --> 00:10:23,930
then we have a process of compiling this

182
00:10:23,930 --> 00:10:28,160
xml to a binary file and then at the end

183
00:10:28,160 --> 00:10:31,970
we have this to this to input a type

184
00:10:31,970 --> 00:10:34,760
like type Lib file its binary file and

185
00:10:34,760 --> 00:10:36,380
the shirt up to the normal share of the

186
00:10:36,380 --> 00:10:39,800
of the library and during the run time

187
00:10:39,800 --> 00:10:45,190
we have the repository which is the

188
00:10:45,190 --> 00:10:49,820
we're gonna see after but it's a library

189
00:10:49,820 --> 00:10:52,930
that allows us during runtime to access

190
00:10:52,930 --> 00:10:58,070
the symbols I'm the API description and

191
00:10:58,070 --> 00:11:00,800
we also have this library called la lip

192
00:11:00,800 --> 00:11:03,980
ffi which stands for a foreign function

193
00:11:03,980 --> 00:11:05,780
interface is something very low level

194
00:11:05,780 --> 00:11:07,570
that we really don't want to be

195
00:11:07,570 --> 00:11:10,490
discussing much but it's the one that

196
00:11:10,490 --> 00:11:13,480
allows us to access a shared object

197
00:11:13,480 --> 00:11:15,830
library during runtime without knowing

198
00:11:15,830 --> 00:11:17,600
the headers basically so we have we can

199
00:11:17,600 --> 00:11:20,720
know having some information about the

200
00:11:20,720 --> 00:11:24,440
API having the metadata we can actually

201
00:11:24,440 --> 00:11:26,480
use the library with without having

202
00:11:26,480 --> 00:11:29,240
compiler programs with the symbols of

203
00:11:29,240 --> 00:11:34,460
the library and das is the JavaScript

204
00:11:34,460 --> 00:11:37,640
engine that we created is a rapper to

205
00:11:37,640 --> 00:11:39,920
the spider marking a spider spider

206
00:11:39,920 --> 00:11:43,970
monkey engine and it provides the access

207
00:11:43,970 --> 00:11:47,210
to the G repository so das is the one

208
00:11:47,210 --> 00:11:48,710
that combines the metadata that we

209
00:11:48,710 --> 00:11:50,570
obtain from there

210
00:11:50,570 --> 00:11:53,850
introspection process and the shared

211
00:11:53,850 --> 00:11:57,470
object oriented doing during compilation

212
00:11:57,470 --> 00:12:01,170
will allows us to use to make the

213
00:12:01,170 --> 00:12:03,000
automatic reflection the runtime which

214
00:12:03,000 --> 00:12:05,880
is our purpose and spider monkey was the

215
00:12:05,880 --> 00:12:09,149
muscle engine wheel known so this is the

216
00:12:09,149 --> 00:12:15,899
same thing but for four seed and an ad

217
00:12:15,899 --> 00:12:18,660
javascriptcore engine is subtly the same

218
00:12:18,660 --> 00:12:26,250
but I I'm sorry about the the Proteas

219
00:12:26,250 --> 00:12:29,220
problem so what I wanted to point out

220
00:12:29,220 --> 00:12:32,279
with this child was that only changing

221
00:12:32,279 --> 00:12:36,149
the the engine and the wrapper we got

222
00:12:36,149 --> 00:12:38,670
the same thing so the the work that we

223
00:12:38,670 --> 00:12:41,310
need to do to to use this technology is

224
00:12:41,310 --> 00:12:47,160
very limited to what specific JavaScript

225
00:12:47,160 --> 00:12:51,540
engine we work we plan to use and yeah

226
00:12:51,540 --> 00:12:54,209
this is what I explained before the deer

227
00:12:54,209 --> 00:12:56,270
files maximal description of the library

228
00:12:56,270 --> 00:13:02,250
this is an example maybe I can scroll a

229
00:13:02,250 --> 00:13:05,760
bit here it's just an XML file with

230
00:13:05,760 --> 00:13:08,520
description of all symbols Daire

231
00:13:08,520 --> 00:13:12,540
functions arguments classes etc the

232
00:13:12,540 --> 00:13:14,670
caves in the case of classes I'm talking

233
00:13:14,670 --> 00:13:17,899
about the object which is the the object

234
00:13:17,899 --> 00:13:24,480
system of dilip the library that where

235
00:13:24,480 --> 00:13:32,640
genome the genome uses to power oriented

236
00:13:32,640 --> 00:13:36,870
programming in genome so entirely it is

237
00:13:36,870 --> 00:13:38,670
just a binary representation of the

238
00:13:38,670 --> 00:13:41,190
digital file for faster access we don't

239
00:13:41,190 --> 00:13:43,410
really want in at runtime to be parsing

240
00:13:43,410 --> 00:13:45,990
XML we have a very optimizer

241
00:13:45,990 --> 00:13:47,730
presentation of it and we use it during

242
00:13:47,730 --> 00:13:49,740
runtime and this is the only purpose of

243
00:13:49,740 --> 00:13:52,680
the tight-lipped file so the deer files

244
00:13:52,680 --> 00:13:54,029
in the tablet file's health store are

245
00:13:54,029 --> 00:13:56,250
stored in a very well to find locations

246
00:13:56,250 --> 00:13:59,550
so that the geas engine could find them

247
00:13:59,550 --> 00:14:02,769
at one time I'm loaded

248
00:14:02,769 --> 00:14:07,300
when they are needed the G repository

249
00:14:07,300 --> 00:14:10,329
was in its an API for driven library

250
00:14:10,329 --> 00:14:11,980
information from the tight lip during

251
00:14:11,980 --> 00:14:16,660
run time with DES struck the symbols and

252
00:14:16,660 --> 00:14:19,989
use those symbols to access this thing

253
00:14:19,989 --> 00:14:24,579
which it's so so low level that we

254
00:14:24,579 --> 00:14:26,230
really don't want to deal with it is

255
00:14:26,230 --> 00:14:29,679
like science fiction right now 44 in

256
00:14:29,679 --> 00:14:32,139
this context but basically allows us

257
00:14:32,139 --> 00:14:35,499
allows geas to access the introspection

258
00:14:35,499 --> 00:14:38,319
information from one side and be able to

259
00:14:38,319 --> 00:14:42,059
use to actually access the library

260
00:14:42,059 --> 00:14:47,739
runtime using this library which is very

261
00:14:47,739 --> 00:14:52,420
old libraries part of Linux from a long

262
00:14:52,420 --> 00:14:56,470
time so annotations they go in line the

263
00:14:56,470 --> 00:14:59,079
code normally in the form of in the zip

264
00:14:59,079 --> 00:15:02,949
files they complement the API with

265
00:15:02,949 --> 00:15:05,230
information that otherwise wouldn't be

266
00:15:05,230 --> 00:15:08,319
possible to ask to obtain only with the

267
00:15:08,319 --> 00:15:10,540
same text so its semantic information

268
00:15:10,540 --> 00:15:14,829
that's not evident in the source code

269
00:15:14,829 --> 00:15:18,269
and only the programmer of the library

270
00:15:18,269 --> 00:15:22,230
have access for example in the case of

271
00:15:22,230 --> 00:15:26,679
when you have you created a blog you

272
00:15:26,679 --> 00:15:28,480
will allocate the block of memory and

273
00:15:28,480 --> 00:15:31,990
you wanted you want to use it and then

274
00:15:31,990 --> 00:15:35,199
for it but sometimes is the

275
00:15:35,199 --> 00:15:36,970
responsibility of the user of the

276
00:15:36,970 --> 00:15:39,069
library to flip and sometimes is the

277
00:15:39,069 --> 00:15:42,040
library itself but the in the source

278
00:15:42,040 --> 00:15:46,269
code is no no information about this

279
00:15:46,269 --> 00:15:48,279
explicitly and only the programmer of

280
00:15:48,279 --> 00:15:50,740
the library can know about that so this

281
00:15:50,740 --> 00:15:52,089
is one of the cases where do you have to

282
00:15:52,089 --> 00:15:55,439
annotate the code for example this is an

283
00:15:55,439 --> 00:15:59,259
annotation it's just a blog of a comment

284
00:15:59,259 --> 00:16:01,419
block on top of the symbol in this cases

285
00:16:01,419 --> 00:16:03,869
of where I know taking a function I'm

286
00:16:03,869 --> 00:16:10,519
the annotation part is a smart between

287
00:16:10,529 --> 00:16:13,230
parenthesis for example in the case of

288
00:16:13,230 --> 00:16:18,490
file name data they alone on means that

289
00:16:18,490 --> 00:16:21,010
you can personal with you if you don't

290
00:16:21,010 --> 00:16:23,440
put a long long you cannot bus know when

291
00:16:23,440 --> 00:16:25,959
you are in the skin the scriptable

292
00:16:25,959 --> 00:16:30,339
language and also we have something

293
00:16:30,339 --> 00:16:33,399
interesting here oh sorry in the case of

294
00:16:33,399 --> 00:16:36,459
data we annotate there that is not an

295
00:16:36,459 --> 00:16:39,940
array and we specify what other argument

296
00:16:39,940 --> 00:16:42,639
is this the size of this array so this

297
00:16:42,639 --> 00:16:44,680
information could not be obtained

298
00:16:44,680 --> 00:16:47,079
obtained just from analyzing the syntax

299
00:16:47,079 --> 00:16:48,730
of the library so we need to annotate

300
00:16:48,730 --> 00:16:52,089
that to allow the bindable language to

301
00:16:52,089 --> 00:16:55,750
make the magic and to make everything

302
00:16:55,750 --> 00:17:00,560
work as the library designer respect

303
00:17:00,570 --> 00:17:04,030
yeah this is another example in this

304
00:17:04,030 --> 00:17:07,299
case validating the return value this is

305
00:17:07,299 --> 00:17:09,850
a jealous which is a linked list in July

306
00:17:09,850 --> 00:17:13,209
and but it doesn't store any information

307
00:17:13,209 --> 00:17:16,510
or the type is just a pointer containing

308
00:17:16,510 --> 00:17:18,870
this duelist so we need to annotate that

309
00:17:18,870 --> 00:17:21,699
that's what the element type annotation

310
00:17:21,699 --> 00:17:25,179
is for and in this case we annotate we

311
00:17:25,179 --> 00:17:27,280
say that the element type this do list

312
00:17:27,280 --> 00:17:29,710
is a clutter actor it's just a another

313
00:17:29,710 --> 00:17:34,450
symbol of maybe another library which is

314
00:17:34,450 --> 00:17:41,049
not the case but it could be yeah so up

315
00:17:41,049 --> 00:17:43,179
to here we discuss about the early

316
00:17:43,179 --> 00:17:45,880
introspection is is kind of the

317
00:17:45,880 --> 00:17:47,740
foundation to be able to allow

318
00:17:47,740 --> 00:17:50,440
scriptable languages to access the power

319
00:17:50,440 --> 00:17:53,020
of the library the sea libraries that we

320
00:17:53,020 --> 00:17:55,840
have behind and now we're going to talk

321
00:17:55,840 --> 00:17:58,720
about the engines um how they combine

322
00:17:58,720 --> 00:18:02,380
with this GI Joe introspection thing we

323
00:18:02,380 --> 00:18:06,680
have two engines currently in the genome

324
00:18:06,690 --> 00:18:10,330
in economic technologies and ones das

325
00:18:10,330 --> 00:18:13,900
and the other one is C das is rubbing

326
00:18:13,900 --> 00:18:15,940
the Mesilla spider monkey as we saw

327
00:18:15,940 --> 00:18:19,929
before while see this is a JavaScript

328
00:18:19,929 --> 00:18:20,620
core

329
00:18:20,620 --> 00:18:25,150
a spider monkey support some of the

330
00:18:25,150 --> 00:18:28,930
harmonious things this is actually a

331
00:18:28,930 --> 00:18:31,360
problem right now because a lot of code

332
00:18:31,360 --> 00:18:34,120
the Phenom shell code is written using

333
00:18:34,120 --> 00:18:38,230
lab and const and taking advanced

334
00:18:38,230 --> 00:18:39,940
advantage of the features that are

335
00:18:39,940 --> 00:18:41,800
available in the spider monkey engine

336
00:18:41,800 --> 00:18:46,390
already but it but the the seed product

337
00:18:46,390 --> 00:18:49,180
dozen the JavaScript core engine still

338
00:18:49,180 --> 00:18:52,420
doesn't support those so we have right

339
00:18:52,420 --> 00:18:54,160
now have a program compatibility we

340
00:18:54,160 --> 00:18:56,770
cannot run genome shell code in seed

341
00:18:56,770 --> 00:19:00,429
only in GIS and yeah yes small matter

342
00:19:00,429 --> 00:19:02,590
right now powered gnome shell at the

343
00:19:02,590 --> 00:19:05,980
moments in production on millions of the

344
00:19:05,980 --> 00:19:08,740
desktops right now and they have some

345
00:19:08,740 --> 00:19:10,750
other minor differences but both have a

346
00:19:10,750 --> 00:19:16,360
fairly good support for di and we have

347
00:19:16,360 --> 00:19:18,760
this thing that is very recent and very

348
00:19:18,760 --> 00:19:21,760
cool that's a guy called Tim Castle

349
00:19:21,760 --> 00:19:24,940
working in this node G R which is di

350
00:19:24,940 --> 00:19:28,390
score for know and it's an early stage

351
00:19:28,390 --> 00:19:32,530
of development and thus the his reason

352
00:19:32,530 --> 00:19:35,790
for writing this instead of using the

353
00:19:35,790 --> 00:19:39,130
others and I kind of agree with what he

354
00:19:39,130 --> 00:19:41,880
says but I my advice to him would be

355
00:19:41,880 --> 00:19:45,490
first asked to gain on developers go to

356
00:19:45,490 --> 00:19:47,860
the community type I'll try to talk with

357
00:19:47,860 --> 00:19:54,400
with us and try to yeah be advice about

358
00:19:54,400 --> 00:19:56,950
how to do this well because we have a

359
00:19:56,950 --> 00:20:01,059
lot of experience already doing bindings

360
00:20:01,059 --> 00:20:05,710
for this engines and we also have some

361
00:20:05,710 --> 00:20:07,660
ideas like implementing the of course

362
00:20:07,660 --> 00:20:10,059
it's it's meant to be running node as

363
00:20:10,059 --> 00:20:12,730
another extension and it will be the

364
00:20:12,730 --> 00:20:14,740
node way of doing things and we have

365
00:20:14,740 --> 00:20:18,780
some kind of a bit different vision of

366
00:20:18,780 --> 00:20:22,960
for some of the api's that are not

367
00:20:22,960 --> 00:20:25,929
really much exactly and

368
00:20:25,929 --> 00:20:28,929
my advice to this guy I haven't talked

369
00:20:28,929 --> 00:20:31,450
to him already i discovered this bright

370
00:20:31,450 --> 00:20:36,700
very recently not included here but I i

371
00:20:36,700 --> 00:20:38,769
would say go and talk to the genome

372
00:20:38,769 --> 00:20:41,610
community and while you write this and

373
00:20:41,610 --> 00:20:43,570
we are glad that you're writing this

374
00:20:43,570 --> 00:20:48,639
actually so how is writing JavaScript in

375
00:20:48,639 --> 00:20:51,990
a Fergie gnome and i'm going to show you

376
00:20:51,990 --> 00:20:55,779
the demos first to try to getting you

377
00:20:55,779 --> 00:20:58,330
excited about it and then i will show

378
00:20:58,330 --> 00:21:03,249
you how could you start doing so let me

379
00:21:03,249 --> 00:21:08,080
see i was planning to to code the demo

380
00:21:08,080 --> 00:21:13,450
on the fly but maybe oops was that I did

381
00:21:13,450 --> 00:21:19,289
something it's not supposed to be there

382
00:21:19,289 --> 00:21:28,419
wait

383
00:21:28,429 --> 00:21:37,070
okay and yeah we can try to run a to

384
00:21:37,070 --> 00:21:55,370
code a demo in the fly maybe I can

385
00:21:55,380 --> 00:22:00,490
oops

386
00:22:00,500 --> 00:22:05,880
okay have Emmett's here so I have to go

387
00:22:05,880 --> 00:22:12,300
there and we're gonna first import

388
00:22:12,300 --> 00:22:14,460
everything we need for example is do a

389
00:22:14,460 --> 00:22:18,210
very basic gtk application with a button

390
00:22:18,210 --> 00:22:22,620
and with a greeting message so let's

391
00:22:22,620 --> 00:22:29,250
import gtk we're gonna splain everthing

392
00:22:29,250 --> 00:22:36,180
after the demo so right now maybe you

393
00:22:36,180 --> 00:22:37,920
wonder about that some syntax is dead

394
00:22:37,920 --> 00:22:44,820
just don't worry yeah we're gonna we

395
00:22:44,820 --> 00:22:47,220
have gtk we're going to instantiate the

396
00:22:47,220 --> 00:23:04,860
window gtk the window say near window

397
00:23:04,870 --> 00:23:14,170
gtk window type top level so we have the

398
00:23:14,170 --> 00:23:18,430
window this is a constructor judika

399
00:23:18,430 --> 00:23:20,140
window is a constructor and we are

400
00:23:20,140 --> 00:23:24,550
interested in it we have a property name

401
00:23:24,550 --> 00:23:26,920
type is a property of the gtk window and

402
00:23:26,920 --> 00:23:28,660
we pass all the properties in the

403
00:23:28,660 --> 00:23:33,750
constructor using an object and then we

404
00:23:33,750 --> 00:23:41,980
we say show all show all and then we

405
00:23:41,980 --> 00:23:44,050
need a main loop because jalebis is

406
00:23:44,050 --> 00:23:49,750
based on main loop and thus wrapper in

407
00:23:49,750 --> 00:23:52,900
dt coverage salad delete main loop so we

408
00:23:52,900 --> 00:23:58,420
can just do this ok let's save it and

409
00:23:58,420 --> 00:24:03,100
try to run it let's get the console here

410
00:24:03,100 --> 00:24:06,570
or the console small I hope you can see

411
00:24:06,570 --> 00:24:10,690
maybe I can

412
00:24:10,700 --> 00:24:24,100
ah

413
00:24:24,110 --> 00:24:32,460
oops oh sorry I make half

414
00:24:32,470 --> 00:24:40,060
oh yeah sorry this should be uppercase

415
00:24:40,070 --> 00:24:44,360
oh yeah we did with this you need to

416
00:24:44,360 --> 00:24:51,670
initialize everything this is part gtk

417
00:24:51,670 --> 00:24:54,640
thing so we have a duty carry window

418
00:24:54,640 --> 00:25:02,870
running but this is not all we close the

419
00:25:02,870 --> 00:25:05,150
window as you can see the problem keeps

420
00:25:05,150 --> 00:25:08,390
running that's not nice so we're going

421
00:25:08,390 --> 00:25:11,120
to connect the destroy signal of this

422
00:25:11,120 --> 00:25:16,160
window to kill the event loop we're

423
00:25:16,160 --> 00:25:22,000
going to do this way win that connect

424
00:25:22,000 --> 00:25:25,970
destroy we're going to be putting a

425
00:25:25,970 --> 00:25:32,520
function here

426
00:25:32,530 --> 00:25:37,010
ok

427
00:25:37,020 --> 00:25:45,540
and we can say gtk main width knife so

428
00:25:45,540 --> 00:25:50,450
now we run it oops why here come here

429
00:25:50,450 --> 00:25:54,180
now when we close the window we close

430
00:25:54,180 --> 00:25:58,040
also the problem and now let's add some

431
00:25:58,040 --> 00:26:05,420
button here button to decade button

432
00:26:05,420 --> 00:26:09,600
button we need new because it's a

433
00:26:09,600 --> 00:26:18,090
constructor and we can pass label to it

434
00:26:18,090 --> 00:26:29,900
a low GS com Oh some kind of

435
00:26:29,910 --> 00:26:42,749
yeah I think it's right

436
00:26:42,759 --> 00:26:44,410
ok

437
00:26:44,410 --> 00:26:46,810
think it's fine huh and we're going to

438
00:26:46,810 --> 00:26:51,410
have the work the bottom to the window

439
00:26:51,420 --> 00:26:57,790
yeah let's try it ok now the window is

440
00:26:57,790 --> 00:27:02,930
very small because the button is small

441
00:27:02,940 --> 00:27:07,210
let's make it big we have a gtk button

442
00:27:07,210 --> 00:27:16,080
here which does nothing now if we

443
00:27:16,080 --> 00:27:26,320
connect the BTN the signal clicking we

444
00:27:26,320 --> 00:27:29,539
can get

445
00:27:29,549 --> 00:27:33,950
we can print some message to the user

446
00:27:33,950 --> 00:27:49,619
like hello back sample and okay that's

447
00:27:49,619 --> 00:27:53,429
very simple so it's very stupid demo to

448
00:27:53,429 --> 00:27:56,850
show the most basic things that we can

449
00:27:56,850 --> 00:27:59,489
do and i'm going to show you another

450
00:27:59,489 --> 00:28:01,950
demo which is more complex i'm gonna i

451
00:28:01,950 --> 00:28:03,570
have it already written i'm gonna just

452
00:28:03,570 --> 00:28:09,720
run it for you and hope you like it it's

453
00:28:09,720 --> 00:28:17,820
here is GIS demo one thing yeah this is

454
00:28:17,820 --> 00:28:21,509
a webcam this is running this trimmer

455
00:28:21,509 --> 00:28:27,299
and clutter and is Howard accelerated of

456
00:28:27,299 --> 00:28:29,340
course because it's cluttered and this

457
00:28:29,340 --> 00:28:33,239
using just trimmer for capturing it

458
00:28:33,239 --> 00:28:35,279
looks kind of crappy because I just put

459
00:28:35,279 --> 00:28:41,759
a count source and I mean sink and the

460
00:28:41,759 --> 00:28:43,739
texture but I didn't put the other

461
00:28:43,739 --> 00:28:45,840
elements of the pipeline that for

462
00:28:45,840 --> 00:28:48,330
example color space we need to get this

463
00:28:48,330 --> 00:28:52,529
rival I just wanted to show some cool

464
00:28:52,529 --> 00:28:59,029
things

465
00:28:59,039 --> 00:29:02,380
but the thing is that we're gonna check

466
00:29:02,380 --> 00:29:03,850
the code and we're going to see it's 40

467
00:29:03,850 --> 00:29:14,180
lines of code on in JavaScript yes but

468
00:29:14,190 --> 00:29:20,279
it's demo one yeah so it's kind of the

469
00:29:20,279 --> 00:29:23,610
same we have just trimmer which is this

470
00:29:23,610 --> 00:29:25,980
line clutter we have clutter gstreamer

471
00:29:25,980 --> 00:29:29,549
and we have a main loop we call this

472
00:29:29,549 --> 00:29:31,620
teeny tune in solitude streamer we

473
00:29:31,620 --> 00:29:34,559
initialize clutter we created black

474
00:29:34,559 --> 00:29:37,980
color for the for the background we

475
00:29:37,980 --> 00:29:41,210
create a stage the size this is normally

476
00:29:41,210 --> 00:29:45,720
construction we set the color of the

477
00:29:45,720 --> 00:29:48,450
stage we connected to destroy signal of

478
00:29:48,450 --> 00:29:52,409
the stage to close the program we get a

479
00:29:52,409 --> 00:29:54,929
clutter texture we add it to the stage

480
00:29:54,929 --> 00:29:58,909
and we set the size of the texture here

481
00:29:58,909 --> 00:30:00,899
then we get it just through your

482
00:30:00,899 --> 00:30:04,769
pipeline we create a plug-in for the

483
00:30:04,769 --> 00:30:09,570
come the webcam capturing we added to

484
00:30:09,570 --> 00:30:17,230
the pipeline we create a sink element

485
00:30:17,240 --> 00:30:21,330
yeah we create a video sink element and

486
00:30:21,330 --> 00:30:23,220
this where the clutter just swimming

487
00:30:23,220 --> 00:30:28,139
thing goes mixed and we added to the

488
00:30:28,139 --> 00:30:30,419
pipeline and then we will we link the

489
00:30:30,419 --> 00:30:33,360
source which they come webcam source

490
00:30:33,360 --> 00:30:34,889
with the sink which is a cluttered

491
00:30:34,889 --> 00:30:38,070
texture so at this point we created the

492
00:30:38,070 --> 00:30:41,240
pulp the the pipeline we linked it and

493
00:30:41,240 --> 00:30:44,129
this is for the rotation effect because

494
00:30:44,129 --> 00:30:47,639
the birth dates and we specify the

495
00:30:47,639 --> 00:30:49,980
center of the rotation all those are

496
00:30:49,980 --> 00:30:52,830
properties of the normal G objects that

497
00:30:52,830 --> 00:30:54,990
we have we normally use this in C by

498
00:30:54,990 --> 00:30:57,480
here as you can see the the simplex is

499
00:30:57,480 --> 00:31:02,250
very similar and now we do we have a

500
00:31:02,250 --> 00:31:07,139
main loop loop with a time out of 25

501
00:31:07,139 --> 00:31:10,679
seconds and we just modify the angle the

502
00:31:10,679 --> 00:31:15,419
x angle on the cells angle i'm at the

503
00:31:15,419 --> 00:31:17,940
end we just show all the elements of the

504
00:31:17,940 --> 00:31:20,940
stage we set the pipeline to playing and

505
00:31:20,940 --> 00:31:25,740
we run the mile loop is always 52 sorry

506
00:31:25,740 --> 00:31:31,050
so that's it we we can do a fancy just

507
00:31:31,050 --> 00:31:33,750
trim a lot everything only with forty

508
00:31:33,750 --> 00:31:35,700
fifty two lines of JavaScript code and

509
00:31:35,700 --> 00:31:39,200
that's so much more behind to be used

510
00:31:39,200 --> 00:31:41,940
this is only one example two very

511
00:31:41,940 --> 00:31:43,470
popular libraries that we have any venom

512
00:31:43,470 --> 00:31:46,200
start but there are a lot of a lot more

513
00:31:46,200 --> 00:31:52,730
cool things so let's continue

514
00:31:52,740 --> 00:31:57,220
yeah this is this is a special let's say

515
00:31:57,220 --> 00:32:01,950
I am a native JavaScript module that is

516
00:32:01,950 --> 00:32:06,580
built inside jes which is a rapper to

517
00:32:06,580 --> 00:32:11,410
the main loop for convenience a use here

518
00:32:11,410 --> 00:32:14,320
we create a main loop a jelly menu using

519
00:32:14,320 --> 00:32:17,470
a minus ID so we can have several main

520
00:32:17,470 --> 00:32:19,510
loops running and we can refer to them

521
00:32:19,510 --> 00:32:21,400
using this ID so it's something that is

522
00:32:21,400 --> 00:32:24,190
very specific very specific das they

523
00:32:24,190 --> 00:32:25,900
implemented that way for convenience

524
00:32:25,900 --> 00:32:29,470
basically but we could have used normal

525
00:32:29,470 --> 00:32:31,870
jelly main loop here and it would work

526
00:32:31,870 --> 00:32:36,970
the same okay I think we could continue

527
00:32:36,970 --> 00:32:42,130
with this ah maybe I can I have time for

528
00:32:42,130 --> 00:32:45,300
owner cool demo which involves the wet

529
00:32:45,300 --> 00:32:50,520
also and I think it's also kind of cool

530
00:32:50,520 --> 00:32:59,869
wait we have to go

531
00:32:59,879 --> 00:33:11,450
yes let me check something of it

532
00:33:11,460 --> 00:33:18,000
ok GI yes

533
00:33:18,010 --> 00:33:21,880
we're going to round the demo ok now

534
00:33:21,880 --> 00:33:25,270
we're going to open a browser you really

535
00:33:25,270 --> 00:33:35,280
have fun another crumbing instance okay

536
00:33:35,280 --> 00:33:43,470
Nina it's local host

537
00:33:43,480 --> 00:34:00,280
ok we get this image oops

538
00:34:00,290 --> 00:34:05,180
this is a demo of technology is a see

539
00:34:05,180 --> 00:34:09,080
library that isn't respected and do kind

540
00:34:09,080 --> 00:34:13,550
of mix of no GS and socket i/o so we are

541
00:34:13,550 --> 00:34:16,250
going to show all sir let's open our

542
00:34:16,250 --> 00:34:20,919
browser let's say epiphany which is the

543
00:34:20,919 --> 00:34:24,800
oops epiphany doesn't want to run here

544
00:34:24,800 --> 00:34:27,710
in a while let's open eyes whistle which

545
00:34:27,710 --> 00:34:37,060
is five Fox in debian and let's do this

546
00:34:37,060 --> 00:34:49,820
bring it here somewhere wait like this

547
00:34:49,830 --> 00:34:53,700
we also worked in over actually so let's

548
00:34:53,700 --> 00:34:59,180
put opera in the game yeah price here

549
00:34:59,180 --> 00:35:03,210
wait let's bring it here I don't have

550
00:35:03,210 --> 00:35:16,560
room for it but maybe oh wait

551
00:35:16,570 --> 00:35:24,250
oh yeah sorry about that okay so now we

552
00:35:24,250 --> 00:35:30,420
have

553
00:35:30,430 --> 00:35:33,590
this is using web socket fall back to

554
00:35:33,590 --> 00:35:38,810
lump bowling it's full 100% JavaScript

555
00:35:38,810 --> 00:35:43,010
server zion browser side of course it's

556
00:35:43,010 --> 00:35:44,960
kind of the cool things we can do now

557
00:35:44,960 --> 00:35:46,460
that we have a lot of libraries to

558
00:35:46,460 --> 00:35:51,770
access a lot of hardcore things in the

559
00:35:51,770 --> 00:35:55,070
server side to use out of the box yes by

560
00:35:55,070 --> 00:35:58,820
using this analogy okay enough with the

561
00:35:58,820 --> 00:36:07,190
demos I hope you enjoy them let's see

562
00:36:07,190 --> 00:36:14,180
what is this about okay so important

563
00:36:14,180 --> 00:36:16,820
modules is a bit different of what the

564
00:36:16,820 --> 00:36:21,080
comment es a probe has already spread

565
00:36:21,080 --> 00:36:23,720
around all the JavaScript developers

566
00:36:23,720 --> 00:36:27,440
does not require thing the imports

567
00:36:27,440 --> 00:36:29,780
operation is an assignment not a

568
00:36:29,780 --> 00:36:34,180
function called this is actually not

569
00:36:34,180 --> 00:36:37,850
nice because you you can you cannot do a

570
00:36:37,850 --> 00:36:39,350
lot of things that you can do with a

571
00:36:39,350 --> 00:36:40,360
function call like for example

572
00:36:40,360 --> 00:36:43,820
implemented a synchronous loading using

573
00:36:43,820 --> 00:36:46,100
the funk they require function as an

574
00:36:46,100 --> 00:36:48,320
object for all things and we have an

575
00:36:48,320 --> 00:36:51,140
important I think is very limited we

576
00:36:51,140 --> 00:36:54,470
also is them the most serious problem we

577
00:36:54,470 --> 00:36:57,530
have the full modules global scope is

578
00:36:57,530 --> 00:36:59,960
important so you know if you use common

579
00:36:59,960 --> 00:37:02,660
yes or no yes you have the experts

580
00:37:02,660 --> 00:37:05,720
object and you add API to it and that's

581
00:37:05,720 --> 00:37:08,420
the only object gets exported well here

582
00:37:08,420 --> 00:37:10,520
everything goes sported if you have

583
00:37:10,520 --> 00:37:12,290
private symbols there will be a spotted

584
00:37:12,290 --> 00:37:17,540
as well so the DS variable inside the

585
00:37:17,540 --> 00:37:21,230
your module will be exported completely

586
00:37:21,230 --> 00:37:23,990
and i think that's that's a problem and

587
00:37:23,990 --> 00:37:27,830
we need to to improve that that's also

588
00:37:27,830 --> 00:37:30,440
search path similar to require path and

589
00:37:30,440 --> 00:37:32,600
this only synchronous of course is an

590
00:37:32,600 --> 00:37:35,750
assignment this is an example of

591
00:37:35,750 --> 00:37:38,590
importing a normal JavaScript module you

592
00:37:38,590 --> 00:37:43,069
specify the path the module using dots

593
00:37:43,069 --> 00:37:50,390
set of slashes these three examples here

594
00:37:50,390 --> 00:37:53,089
we use const which only works in GIS and

595
00:37:53,089 --> 00:37:55,390
this is the nice way to do it because

596
00:37:55,390 --> 00:37:58,190
module importation should be multiple

597
00:37:58,190 --> 00:38:02,140
and we can get that with cost this is

598
00:38:02,140 --> 00:38:04,900
important a GI module which is a

599
00:38:04,900 --> 00:38:07,069
introspect library that we have in the

600
00:38:07,069 --> 00:38:09,949
repository the J repository and we use

601
00:38:09,949 --> 00:38:16,369
the GI a member of imports which we can

602
00:38:16,369 --> 00:38:19,609
say is a keyword very spot of it's a

603
00:38:19,609 --> 00:38:24,249
multiple and with using GI we have

604
00:38:24,249 --> 00:38:27,529
implicit access to the depository using

605
00:38:27,529 --> 00:38:29,719
the main space when you compile your

606
00:38:29,719 --> 00:38:31,670
library with introspection super you

607
00:38:31,670 --> 00:38:33,680
have to specify a name space for your

608
00:38:33,680 --> 00:38:36,619
library and in this case jalebi is jelly

609
00:38:36,619 --> 00:38:42,709
like this GDK is gtk like that and it's

610
00:38:42,709 --> 00:38:44,390
up to the library developer to create

611
00:38:44,390 --> 00:38:48,739
the name space to be used for the g

612
00:38:48,739 --> 00:39:02,820
repository yeah do you want it to us

613
00:39:02,830 --> 00:39:05,690
yeah it's a weird constrict but it works

614
00:39:05,690 --> 00:39:09,800
like way in the newer versions of yes I

615
00:39:09,800 --> 00:39:12,980
think this you can you can put a equal

616
00:39:12,980 --> 00:39:16,970
equal you can assign two inputs the

617
00:39:16,970 --> 00:39:20,120
identical you are signed a three dot 0

618
00:39:20,120 --> 00:39:22,520
but it does not work in this version the

619
00:39:22,520 --> 00:39:28,940
job of dsm aha that i have running yeah

620
00:39:28,940 --> 00:39:35,250
but it's that's not that works that way

621
00:39:35,260 --> 00:39:41,799
yeah

622
00:39:41,809 --> 00:39:51,799
yeah you for meeting I think it was a it

623
00:39:51,799 --> 00:39:54,109
is already precarious if way of doing it

624
00:39:54,109 --> 00:39:56,799
either another one of the decisions that

625
00:39:56,799 --> 00:39:59,630
the left da but this is the new way of

626
00:39:59,630 --> 00:40:03,319
doing it but I I cannot tell you right

627
00:40:03,319 --> 00:40:07,549
now why it was like that I can try to

628
00:40:07,549 --> 00:40:13,759
find it and tell you after it's like I

629
00:40:13,759 --> 00:40:16,880
think it would be like a symbol of

630
00:40:16,880 --> 00:40:23,779
everything yeah so there is also the

631
00:40:23,779 --> 00:40:26,930
native modules that I was talking before

632
00:40:26,930 --> 00:40:30,380
like a main lib you have the bus rapper

633
00:40:30,380 --> 00:40:32,259
to make it more convenient to use on

634
00:40:32,259 --> 00:40:37,400
JavaScript and the GSA the jes you have

635
00:40:37,400 --> 00:40:42,319
a land some language utilities and the

636
00:40:42,319 --> 00:40:49,880
signals module sir yeah this will be

637
00:40:49,880 --> 00:40:52,130
important native yes-mo they are all

638
00:40:52,130 --> 00:40:55,729
accessible from the reading part so

639
00:40:55,729 --> 00:40:58,549
using the GI api's how to map the

640
00:40:58,549 --> 00:41:00,410
symbols that we have and we know in this

641
00:41:00,410 --> 00:41:02,689
elaborate very well-documented to the

642
00:41:02,689 --> 00:41:05,420
new bindable language we have a set of

643
00:41:05,420 --> 00:41:07,309
what define rules and they are not

644
00:41:07,309 --> 00:41:10,130
actually in hundred percent of the cases

645
00:41:10,130 --> 00:41:13,369
well defined but there's a with practice

646
00:41:13,369 --> 00:41:17,029
and while the documentation for binding

647
00:41:17,029 --> 00:41:19,609
line which is not in place we can kind

648
00:41:19,609 --> 00:41:25,609
of learn how to map the symbols to the

649
00:41:25,609 --> 00:41:28,479
system symbols to javascript this case

650
00:41:28,479 --> 00:41:31,670
and you know it will always work for

651
00:41:31,670 --> 00:41:35,779
most of the cases using the some simple

652
00:41:35,779 --> 00:41:42,079
rules for example functions

653
00:41:42,089 --> 00:41:45,309
functions if you have a normal function

654
00:41:45,309 --> 00:41:49,029
you will use the namespace stop the name

655
00:41:49,029 --> 00:41:51,579
of the function like this for example

656
00:41:51,579 --> 00:41:54,789
detail time out art becomes jelly time

657
00:41:54,789 --> 00:42:00,609
up odd is kind of normal you only need

658
00:42:00,609 --> 00:42:02,140
to identify what is the main space of

659
00:42:02,140 --> 00:42:06,520
that library in this case is G is the AC

660
00:42:06,520 --> 00:42:10,000
namespace of jelly and you replace that

661
00:42:10,000 --> 00:42:11,859
with a with a namespace in the jury

662
00:42:11,859 --> 00:42:14,020
posture which is Galip and you have a

663
00:42:14,020 --> 00:42:16,240
little time out it's kind of a trick a

664
00:42:16,240 --> 00:42:21,010
rule to guess it yeah in the case of the

665
00:42:21,010 --> 00:42:24,220
object methods they they are used like

666
00:42:24,220 --> 00:42:27,849
this you have to map the namespace the

667
00:42:27,849 --> 00:42:29,770
class and then the method so let's say

668
00:42:29,770 --> 00:42:32,250
we have dedicated button new with love

669
00:42:32,250 --> 00:42:37,900
it becomes utk that button using a camel

670
00:42:37,900 --> 00:42:41,710
and then you will level so it's kind of

671
00:42:41,710 --> 00:42:47,680
a very simple rule and in the case of

672
00:42:47,680 --> 00:42:52,869
idioms a it's kind of simple also you

673
00:42:52,869 --> 00:42:55,210
use the namespace then the middle part

674
00:42:55,210 --> 00:42:59,730
symbol and then they the last part in

675
00:42:59,730 --> 00:43:04,200
uppercase

676
00:43:04,210 --> 00:43:10,119
the properties of objects are in in C

677
00:43:10,119 --> 00:43:12,820
and G object in this case we can use

678
00:43:12,820 --> 00:43:17,800
dash for for the properties because they

679
00:43:17,800 --> 00:43:19,990
are strings and we we need to replace

680
00:43:19,990 --> 00:43:21,580
them for underscore to be able to use

681
00:43:21,580 --> 00:43:23,859
them as normal object members in

682
00:43:23,859 --> 00:43:28,450
JavaScript the signals as we saw in the

683
00:43:28,450 --> 00:43:31,900
demo use the Kinect thing and in cities

684
00:43:31,900 --> 00:43:34,869
different they have this signal object

685
00:43:34,869 --> 00:43:39,490
with members where the signal names are

686
00:43:39,490 --> 00:43:41,349
the members of that onion and they often

687
00:43:41,349 --> 00:43:46,690
have a connect a method you pass the

688
00:43:46,690 --> 00:43:50,230
Kaaba and that's in a knife I forgot

689
00:43:50,230 --> 00:43:53,170
about the about I forgot about

690
00:43:53,170 --> 00:43:56,140
constructor but we saw in them we for

691
00:43:56,140 --> 00:43:58,510
constructing lady object which is new

692
00:43:58,510 --> 00:44:02,890
the namespace the clap a class name in

693
00:44:02,890 --> 00:44:06,070
camel case and then you pass a object as

694
00:44:06,070 --> 00:44:08,200
the only argument and object will of the

695
00:44:08,200 --> 00:44:10,330
properties that you want to define and

696
00:44:10,330 --> 00:44:14,320
when to pass the constructor okay so

697
00:44:14,320 --> 00:44:16,930
what about documentation right now

698
00:44:16,930 --> 00:44:19,599
documentation it's for actually for the

699
00:44:19,599 --> 00:44:21,490
binding languages there's no official

700
00:44:21,490 --> 00:44:23,710
documentation we have an official

701
00:44:23,710 --> 00:44:26,460
documentation there and it's kind of

702
00:44:26,460 --> 00:44:30,130
nice but let's remember that also we

703
00:44:30,130 --> 00:44:33,190
could have some Lots in the actual c

704
00:44:33,190 --> 00:44:37,150
library documentation so it's like a

705
00:44:37,150 --> 00:44:39,910
complete thing to do on this very reason

706
00:44:39,910 --> 00:44:41,800
we have been very busy built with

707
00:44:41,800 --> 00:44:45,460
bringing this analogy up today that of

708
00:44:45,460 --> 00:44:47,589
course we are lacking a bit for the

709
00:44:47,589 --> 00:44:50,230
developer story for binding bindable

710
00:44:50,230 --> 00:44:53,290
languages so we need to work on that and

711
00:44:53,290 --> 00:44:54,670
in fact this is a hot topic right now

712
00:44:54,670 --> 00:44:58,780
last month in the desktop summit we have

713
00:44:58,780 --> 00:45:01,330
a DI hackfest and it was the focus of

714
00:45:01,330 --> 00:45:03,430
the harvest was basically documentation

715
00:45:03,430 --> 00:45:05,230
for binding likely to bite and

716
00:45:05,230 --> 00:45:07,900
javascript so the we're really concerned

717
00:45:07,900 --> 00:45:09,760
about this and we want to fix it as soon

718
00:45:09,760 --> 00:45:10,420
as poss

719
00:45:10,420 --> 00:45:14,890
people development tools we don't have

720
00:45:14,890 --> 00:45:18,640
them yet it's too early for us we don't

721
00:45:18,640 --> 00:45:21,099
know what we have lot of discussions

722
00:45:21,099 --> 00:45:24,010
inside the comedian a still whether

723
00:45:24,010 --> 00:45:29,619
we're going to use Python jsk DSC we are

724
00:45:29,619 --> 00:45:31,540
not sure about the developer story yet

725
00:45:31,540 --> 00:45:33,000
we haven't figured out all the details

726
00:45:33,000 --> 00:45:35,859
but I think there's a lot of interesting

727
00:45:35,859 --> 00:45:39,700
having very good development tools and

728
00:45:39,700 --> 00:45:42,069
we want this to succeed and attract

729
00:45:42,069 --> 00:45:45,130
developers attention we'll need to fix

730
00:45:45,130 --> 00:45:50,109
this also okay this is very important

731
00:45:50,109 --> 00:45:53,559
how to synchronize our community with

732
00:45:53,559 --> 00:45:56,619
the rest of the world basically this is

733
00:45:56,619 --> 00:46:02,109
a very delicate issue because there are

734
00:46:02,109 --> 00:46:04,319
some people in favorite there's other

735
00:46:04,319 --> 00:46:08,440
people that are not very interested try

736
00:46:08,440 --> 00:46:13,690
to gather some opinions from the core

737
00:46:13,690 --> 00:46:17,500
developers of distant ologies and well

738
00:46:17,500 --> 00:46:20,079
the basic idea of the basic message will

739
00:46:20,079 --> 00:46:21,609
be that it makes sense it could make

740
00:46:21,609 --> 00:46:23,980
sense for some of the common GS larissa

741
00:46:23,980 --> 00:46:26,170
maybe not for all of them because for

742
00:46:26,170 --> 00:46:30,339
example we have the g i/o library which

743
00:46:30,339 --> 00:46:32,710
is part of g lib and is the the library

744
00:46:32,710 --> 00:46:35,500
we use for input/output and we have

745
00:46:35,500 --> 00:46:37,559
specific ways to do asynchronous

746
00:46:37,559 --> 00:46:40,839
operations we have specific ways of

747
00:46:40,839 --> 00:46:43,079
doing things that integrates well with

748
00:46:43,079 --> 00:46:45,640
the rest of the genome libraries and we

749
00:46:45,640 --> 00:46:51,450
don't want to mix develop a mix code

750
00:46:51,450 --> 00:46:54,880
from comment es api for example for the

751
00:46:54,880 --> 00:46:58,750
HTTP maybe I don't know we really want

752
00:46:58,750 --> 00:47:01,960
to use the g io way because the Python

753
00:47:01,960 --> 00:47:05,349
developers will use that and the Lua

754
00:47:05,349 --> 00:47:07,640
developers the volatile verb

755
00:47:07,640 --> 00:47:10,280
we'll also use that and we really want

756
00:47:10,280 --> 00:47:14,120
to make make a consistent message to the

757
00:47:14,120 --> 00:47:16,760
developers of how the api's should be

758
00:47:16,760 --> 00:47:20,330
used in bindable languages so for some

759
00:47:20,330 --> 00:47:23,660
api's it could make sense synchronize

760
00:47:23,660 --> 00:47:25,550
with them for example I really want to

761
00:47:25,550 --> 00:47:29,150
push for the modules because it's basic

762
00:47:29,150 --> 00:47:31,640
thing and I think we could improve a lot

763
00:47:31,640 --> 00:47:35,780
situation if we have some module

764
00:47:35,780 --> 00:47:39,740
important using modules one on one at

765
00:47:39,740 --> 00:47:44,450
least that's a lot of we need to discuss

766
00:47:44,450 --> 00:47:47,030
a lot and try to reach the communities

767
00:47:47,030 --> 00:47:48,890
and discuss what makes sense what make

768
00:47:48,890 --> 00:47:52,160
not sense and that's the null-gee

769
00:47:52,160 --> 00:47:56,930
private which will in a way bridge the

770
00:47:56,930 --> 00:48:00,520
two API because we are going to be using

771
00:48:00,520 --> 00:48:05,780
live genome libraries in in no context

772
00:48:05,780 --> 00:48:10,220
and this guy is really in I was reading

773
00:48:10,220 --> 00:48:15,830
the heroes about what style to use and

774
00:48:15,830 --> 00:48:19,550
he really wants to implement what makes

775
00:48:19,550 --> 00:48:23,420
sense for in the comic GS context so he

776
00:48:23,420 --> 00:48:27,320
wants to add up even the same text to to

777
00:48:27,320 --> 00:48:31,340
comment yes to the what is familiar to

778
00:48:31,340 --> 00:48:35,420
know at least and this GES comment yes

779
00:48:35,420 --> 00:48:39,620
very new project I just created as an

780
00:48:39,620 --> 00:48:43,790
experiment it's a rubber to G is to

781
00:48:43,790 --> 00:48:46,790
provide community s IV is my purpose

782
00:48:46,790 --> 00:48:51,470
with this is not to to create another

783
00:48:51,470 --> 00:48:54,110
rapper on top of das to have comedy yes

784
00:48:54,110 --> 00:48:56,990
but trying to convince people and try to

785
00:48:56,990 --> 00:49:02,150
move at least create some debate maybe

786
00:49:02,150 --> 00:49:04,130
if the experiment success meaning that

787
00:49:04,130 --> 00:49:08,930
some people do use this rapper instead

788
00:49:08,930 --> 00:49:12,170
of the actor das maybe we can convince

789
00:49:12,170 --> 00:49:16,610
people that to merge this API or baby s

790
00:49:16,610 --> 00:49:18,760
that make sense inside des

791
00:49:18,760 --> 00:49:24,300
so it's not a way to go long-term

792
00:49:24,310 --> 00:49:26,600
foreign experience and this will vary

793
00:49:26,600 --> 00:49:29,240
new I i started writing it like a month

794
00:49:29,240 --> 00:49:33,680
ago and it does modules with one that

795
00:49:33,680 --> 00:49:37,520
one and promises the conditionally

796
00:49:37,520 --> 00:49:40,760
compliant at the moment is there and you

797
00:49:40,760 --> 00:49:44,110
can check it out it's kind of very

798
00:49:44,110 --> 00:49:49,130
superb real thing but anyway so what

799
00:49:49,130 --> 00:49:51,140
current issues we have we have a lot of

800
00:49:51,140 --> 00:49:54,100
challenges like for example the

801
00:49:54,100 --> 00:49:56,150
documentation thing I was talking about

802
00:49:56,150 --> 00:49:58,370
and we still don't have complete support

803
00:49:58,370 --> 00:49:59,990
in all the genome libraries may be in

804
00:49:59,990 --> 00:50:01,520
the coral divers yes but we have a lot

805
00:50:01,520 --> 00:50:03,230
of other libraries that still need to be

806
00:50:03,230 --> 00:50:07,900
inspected authoring and we need to

807
00:50:07,900 --> 00:50:10,520
complete the Super NES official

808
00:50:10,520 --> 00:50:13,220
documentation solve the differences

809
00:50:13,220 --> 00:50:15,500
between GES and seed and try to align

810
00:50:15,500 --> 00:50:18,650
with those some final thoughts we have a

811
00:50:18,650 --> 00:50:22,280
very nice tag it's a very nice

812
00:50:22,280 --> 00:50:25,240
combination of low-level and high-level

813
00:50:25,240 --> 00:50:28,820
we are basing our code in the platform

814
00:50:28,820 --> 00:50:31,130
that has a lot of years of evolution I

815
00:50:31,130 --> 00:50:35,510
will give us robustness and confident

816
00:50:35,510 --> 00:50:39,050
confidence and it's very convenient for

817
00:50:39,050 --> 00:50:42,880
fast prototyping I think I use it a lot

818
00:50:42,880 --> 00:50:45,650
it's something quick and asked me to try

819
00:50:45,650 --> 00:50:51,200
some some magic native code API and of

820
00:50:51,200 --> 00:50:53,650
course it brings jansky to the desktop

821
00:50:53,650 --> 00:50:57,230
this is analysis awesome stack we have

822
00:50:57,230 --> 00:51:00,260
the libraries the genome libraries this

823
00:51:00,260 --> 00:51:02,600
is only the core phenom libraries and

824
00:51:02,600 --> 00:51:05,900
genome 3 stop we have introspection and

825
00:51:05,900 --> 00:51:07,940
we could have a lot of engines and then

826
00:51:07,940 --> 00:51:09,620
our problems running on top and i think

827
00:51:09,620 --> 00:51:11,780
is very awesome i'm very interesting a

828
00:51:11,780 --> 00:51:15,050
platform to develop upon and that's it

829
00:51:15,050 --> 00:51:17,180
sorry for taking more time

