1
00:00:00,620 --> 00:00:11,930
One, two, three, you hear me.

2
00:00:11,930 --> 00:00:23,660
Good afternoon, it's a pleasure to be here
the day, we oar very excited to introduce

3
00:00:23,660 --> 00:00:32,230
a new technology that developed in the past
12 months using JavaScript and some with WiFi

4
00:00:32,230 --> 00:00:39,190
and blue tooth connectivity that allow us
to have the IOT connected with the JavaScript.

5
00:00:39,190 --> 00:00:45,840
I just make a quick introduction about myself,
May name is Frederico, I'm planning a global\h‑‑

6
00:00:45,840 --> 00:00:55,559
called dog Hunter, the little guys on the
hon train with my two daughters, we have a

7
00:00:55,559 --> 00:01:04,309
global start up based in US\h‑‑ we build
WiFi modules.

8
00:01:04,309 --> 00:01:14,530
We are here today to explain a little bit
about our Open Sourcability prop named Linieo,

9
00:01:14,530 --> 00:01:24,870
the philosophy behind the Linio project is
basically to bring the hacker community and

10
00:01:24,870 --> 00:01:26,880
the maker community all together.

11
00:01:26,880 --> 00:01:34,840
So we're building a gateway that allow the
hackers that try apps on the web to talk with

12
00:01:34,840 --> 00:01:40,850
the makers community that usually write software
for the real things.

13
00:01:40,850 --> 00:01:45,200
Switch, Light Controllers stuff like that.

14
00:01:45,200 --> 00:01:46,220
What is Linio,.

15
00:01:46,220 --> 00:01:52,360
It's an Open Source project based on an echo
system.

16
00:01:52,360 --> 00:02:00,610
So we build hardware, we build WiFi and blue
tooth modules, we write open software that

17
00:02:00,610 --> 00:02:07,400
allow us to use JavaScript to interact with
micro controller, we write also the open Cloud

18
00:02:07,400 --> 00:02:14,079
software that allows the user to interact
with the Cloud.

19
00:02:14,079 --> 00:02:26,069
We call this project Lin Io, we have Lino.OS,
IO and J S, we call it Linux for IoT.

20
00:02:26,069 --> 00:02:33,519
What we're trying to do is we build a server
module, sever hardware, one of the module

21
00:02:33,519 --> 00:02:42,659
is a Chiwawa, a small lodge yule of Linux
built in, and we built this module in any

22
00:02:42,659 --> 00:02:50,459
devices that has an MCU, so basically we bring
the powerful Linux inside the MCU.

23
00:02:50,459 --> 00:02:59,219
As you can see here, we have full Linux OO
is package manager, WiFi connectivity, and

24
00:02:59,219 --> 00:03:09,459
we build this module inside free scale MCU,
At mel,SM any generic MC um, we transform

25
00:03:09,459 --> 00:03:16,459
the dam devises into something we call smart
devices connected all together with WiFi and

26
00:03:16,459 --> 00:03:17,799
blue tooth.

27
00:03:17,799 --> 00:03:31,659
So, how do we do that? The classic approach
is basically to write code for the MCU and

28
00:03:31,659 --> 00:03:38,019
then to find the library or gateway that allow
the Linux to talk with MCU.

29
00:03:38,019 --> 00:03:39,939
We build something different.

30
00:03:39,939 --> 00:03:49,040
We basically took the MCU directly inside
the Linux part, and then all the features

31
00:03:49,040 --> 00:03:58,970
of the MCU that should be analog devices GPIO,
PWM, SPSPI is part of the Linux part, it's

32
00:03:58,970 --> 00:04:08,239
all together in just one core (SPI, UART\h‑‑
what we're able to do here is to keep the

33
00:04:08,239 --> 00:04:17,750
MPU for Apache, JavaScript, and OGS and still
use the MCU for the real‑time application.

34
00:04:17,750 --> 00:04:23,830
And, we do that not only on the wireless space
but also\h‑‑ not only in the wired space,

35
00:04:23,830 --> 00:04:29,650
but also the wireless, any module that is
connected on our network exsport the features

36
00:04:29,650 --> 00:04:35,849
of the Linux OS, and we're able to see all
these features just in the file system.

37
00:04:35,849 --> 00:04:44,090
So, basically, we can control devices, just\h‑‑
that's a very simple example that I have here,

38
00:04:44,090 --> 00:04:52,889
using switch on or switch off and basically
what happen when I use this devices everything

39
00:04:52,889 --> 00:04:57,900
is on the file system, so I can see the results
of my devices directly in the file system.

40
00:04:57,900 --> 00:05:02,681
The sample that I have here, I can change
the PWM value just changing a value in the

41
00:05:02,681 --> 00:05:15,180
file system, as you can see in the Sys/Class/Mcuio\h‑‑
I can do the ADP and the GIO in the classical

42
00:05:15,180 --> 00:05:20,680
application you have to write your application
in the MCU, you need to write your application

43
00:05:20,680 --> 00:05:25,690
in the Linux, and then you need to use some
API some bridge to talk together.

44
00:05:25,690 --> 00:05:31,080
With this solution you don't have to do that,
but just to use the file system, so whatever

45
00:05:31,080 --> 00:05:35,669
happened on the MCU would be exported on this
file system here.

46
00:05:35,669 --> 00:05:45,659
So, we build bunch of hardware modules that
have already this technology.

47
00:05:45,659 --> 00:05:57,009
One very famous is that Arduino Yun, we build
this module last September and as you can

48
00:05:57,009 --> 00:06:03,312
see we build basically an MCU from Atmil and
we build the Linux part and we bring it all

49
00:06:03,312 --> 00:06:05,410
together.

50
00:06:05,410 --> 00:06:12,830
We have other modules like something we call
lightening OI, the same stuff we did with

51
00:06:12,830 --> 00:06:20,770
Rrdin Yun\h‑‑ just a different form factor.

52
00:06:20,770 --> 00:06:28,270
We build also some modules LJ module we call
Chiwawa, it's for mass production, same thing

53
00:06:28,270 --> 00:06:36,570
you can use with Yun other Yun one but a small
module you can bring on your project.

54
00:06:36,570 --> 00:06:43,639
And then we have some other module that are
available today to $2 .4 and 5 gig hearts,

55
00:06:43,639 --> 00:06:49,340
we have a free scale MCU, because very important
part that e with build this technology as

56
00:06:49,340 --> 00:06:56,169
a cross platform technology, so we can use,
basically an ATML MCU, and new MCment that

57
00:06:56,169 --> 00:06:58,270
you are working right now.

58
00:06:58,270 --> 00:07:03,689
And, of course, we also build some shield,
so with the sensor that allow you to control

59
00:07:03,689 --> 00:07:05,479
stuff.

60
00:07:05,479 --> 00:07:09,800
So let me talk a little bit about the software
modules.

61
00:07:09,800 --> 00:07:16,379
And, talk a little bit about open stack and
then show you some sample we did and we are

62
00:07:16,379 --> 00:07:19,569
able to show you in the back stage.

63
00:07:19,569 --> 00:07:27,189
So, basically we have two modules the hardware
that is the Linux part and the MCU part, and

64
00:07:27,189 --> 00:07:35,000
in this sample here we have a Mips Mpu, we
have our Linux up and running, and then we

65
00:07:35,000 --> 00:07:42,699
have the Linio that is another small operating
system that is up and running on MCU, and

66
00:07:42,699 --> 00:07:47,550
we are able to export all features directly
on the file system on the Linux machine, doesn't

67
00:07:47,550 --> 00:07:53,250
matter if the Linux machine is on my desk
or is somewhere else, like Boston, Chicago,

68
00:07:53,250 --> 00:07:58,069
time able to control everything as native
application on my desk.

69
00:07:58,069 --> 00:08:07,550
So, this Linio operating system, we're yourselfing
right now open WRT, and we building top of

70
00:08:07,550 --> 00:08:17,050
that Linio using the Linux card modules and
on top of that we is the NOGS for embedded

71
00:08:17,050 --> 00:08:25,310
development or we can use just the shell scripting
Java, Lua, Python, and of course, on top of

72
00:08:25,310 --> 00:08:31,270
everything, we have the application wrote
in JavaScript for mobile application or Cloud

73
00:08:31,270 --> 00:08:34,570
applications.

74
00:08:34,570 --> 00:08:41,979
To keep simple we build a small ID that runs
directly on the module, you don't need external

75
00:08:41,979 --> 00:08:51,570
application, external tools, you can use our
ID Linio that is built directly inside the

76
00:08:51,570 --> 00:08:52,720
module.

77
00:08:52,720 --> 00:08:58,660
As you can see, you can definitely use no
node JS to write your application as a sever

78
00:08:58,660 --> 00:08:59,779
label.

79
00:08:59,779 --> 00:09:10,079
This is a screen shop of Ideino, we have the
mile manager, everything is Open Source, everything

80
00:09:10,079 --> 00:09:15,040
is available directly inside the module.

81
00:09:15,040 --> 00:09:22,040
We made a couple slides now that we are trying
to show you a real scenario, so the first

82
00:09:22,040 --> 00:09:31,610
is mood Cue basically a node.js software that
we build inside the module, we have several

83
00:09:31,610 --> 00:09:37,870
modules that we bring here, then we made another
demo using mobile control, so basically iPhone,

84
00:09:37,870 --> 00:09:40,690
and everything has been done using JavaScript.

85
00:09:40,690 --> 00:09:42,950
So let's show the first one.

86
00:09:42,950 --> 00:09:48,490
The first one uses one of our module, everything
is Open Source, open hardware, we build open

87
00:09:48,490 --> 00:09:55,430
module, someone else could make it and we
put some little switch that allow us to control

88
00:09:55,430 --> 00:09:57,410
the motor.

89
00:09:57,410 --> 00:10:05,810
The code that you need to write on the node.js
side is the one that you see here, we import

90
00:10:05,810 --> 00:10:16,399
our library, from node.js, we connect to analog
port zero and then we basically use a call

91
00:10:16,399 --> 00:10:20,130
back to set the digital 9 to the very mode.

92
00:10:20,130 --> 00:10:28,310
What happened is when we turn the switch on
and off, we're able to move the RO that show

93
00:10:28,310 --> 00:10:32,560
us our mode.

94
00:10:32,560 --> 00:10:40,529
I'm using a small demo here, I'm using Ideno,
I write my code directly on my computer.

95
00:10:40,529 --> 00:10:51,570
When is done, I start run, and transfer the
control over my little CPU, as you can see,

96
00:10:51,570 --> 00:11:01,110
there is an initiallization procedure, and
then I move the RO directly with the switch.

97
00:11:01,110 --> 00:11:08,170
And is done directly on the board, so I don't
need to use any library, any bridge.

98
00:11:08,170 --> 00:11:14,190
Everything is done inside the JavaScript environment
as I showed you before.

99
00:11:14,190 --> 00:11:21,209
We build another application, a little more
complex that I will be happy to show you in

100
00:11:21,209 --> 00:11:27,029
the back stage, if you want, that basically
control an LED, a very easy one, something

101
00:11:27,029 --> 00:11:30,370
we call the hello world for the MCment.

102
00:11:30,370 --> 00:11:42,040
So, in that case, we made a small application
on HTML 5 using our library, again, an Open

103
00:11:42,040 --> 00:11:49,300
Source library that you can use on the mobile
control, so, in JavaScript and jQuery, what

104
00:11:49,300 --> 00:11:59,800
we build inside the small devise in the lines
of code, we import the Lin eo board, the HTML

105
00:11:59,800 --> 00:12:10,440
board and import the GTO\h‑‑ we are using
tool in this case, we're using Intel X D K

106
00:12:10,440 --> 00:12:18,170
tool to be able to control over the phone
my device, and the code that I have to write

107
00:12:18,170 --> 00:12:21,899
on these tools is basically what you can see
here.

108
00:12:21,899 --> 00:12:28,199
So, some initiallization code, and then event
when I press the button on my mobile.

109
00:12:28,199 --> 00:12:33,780
And this is the demo.

110
00:12:33,780 --> 00:12:36,690
Again, I'm using any.

111
00:12:36,690 --> 00:12:45,920
deno, inside the board, press the code, press
run, transfer the control, now to my mobile

112
00:12:45,920 --> 00:12:50,800
application that will be able to control my
device.

113
00:12:50,800 --> 00:12:58,660
The one that we're using right now is Lineo,
but we can use Lineo 1, but use any other

114
00:12:58,660 --> 00:12:59,660
module.

115
00:12:59,660 --> 00:13:06,660
It's Open Source, so we can put this code
to any other Linux platform or TP link router

116
00:13:06,660 --> 00:13:08,769
whatever.

117
00:13:08,769 --> 00:13:13,699
The software that you're viewing now is an
Intel X D K that allowstous have an application

118
00:13:13,699 --> 00:13:19,670
from an iPhone in an easy way, we don't need
to apply to put our application in the apple

119
00:13:19,670 --> 00:13:27,020
App store, that's why we use this, it's an
Intel XDK, it was a company that was recently

120
00:13:27,020 --> 00:13:30,200
acquired by Intel.

121
00:13:30,200 --> 00:13:31,390
Very easy stuff.

122
00:13:31,390 --> 00:13:37,200
Now, this is very, very simple application,
you can say, hey, we saw that, many, many

123
00:13:37,200 --> 00:13:38,200
times.

124
00:13:38,200 --> 00:13:41,899
The difference is, I don't need to take care
of the micro controller, the only thing I

125
00:13:41,899 --> 00:13:47,240
need do is write the JavaScript application
that will play with the Java file system.

126
00:13:47,240 --> 00:13:54,370
You can see it on the desk, but it can be
run remotely.

127
00:13:54,370 --> 00:13:59,470
The last part of our software structure is
the Cloud, and that is something that we're

128
00:13:59,470 --> 00:14:04,130
going to announce in the next week in New
York.

129
00:14:04,130 --> 00:14:08,899
And basically we're building a system provisioning
platform that allows us to have control over

130
00:14:08,899 --> 00:14:09,899
the Cloud.

131
00:14:09,899 --> 00:14:16,970
Everything is Open Source, so you can eventually
build your own Cloud to control your hardware.

132
00:14:16,970 --> 00:14:24,190
The provisioning platform, we are working
to build a special MPN library just for Lineo

133
00:14:24,190 --> 00:14:31,130
(NPM) we're using Mips technology now, sometime
we need to recompile the library, in our small

134
00:14:31,130 --> 00:14:37,080
module we don't have the power enough to do
that so we're doing it directly in our serverrers,

135
00:14:37,080 --> 00:14:43,779
we oar working to have an e quo system to
take all the modules and connect it together,

136
00:14:43,779 --> 00:14:53,209
and of course, we're bringing this technology,
also to other devices, Raspberry Pive, BeagleBone,

137
00:14:53,209 --> 00:15:00,160
or call come,\h‑‑ it is one I don't know
if you're familiar with this (Qualcomm) it

138
00:15:00,160 --> 00:15:04,670
was a very short introduction, I hope you
enjoyed.

139
00:15:04,670 --> 00:15:10,060
I hope if you have any questions, I will be
more than happy to show you in more details

140
00:15:10,060 --> 00:15:15,690
what we've done, and I just want to say thank
you for your time and your patients today.

