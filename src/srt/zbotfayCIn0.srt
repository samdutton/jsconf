1
00:00:14,190 --> 00:00:18,150

thank you for Sarah good morning guys

2
00:00:18,150 --> 00:00:20,470
I'm happy that so many of you found

3
00:00:20,470 --> 00:00:22,930
their way here after last night's party

4
00:00:22,930 --> 00:00:26,380
I am heiko and I'm actually with a

5
00:00:26,380 --> 00:00:28,689
company called pebble we do we are

6
00:00:28,689 --> 00:00:31,390
mostly known yay rocket we are mostly

7
00:00:31,390 --> 00:00:34,269
known for smartwatches so self you there

8
00:00:34,269 --> 00:00:36,850
who of you knows what what peddlers and

9
00:00:36,850 --> 00:00:39,519
pedal does that's that's basically

10
00:00:39,519 --> 00:00:42,820
everybody who does not well they are few

11
00:00:42,820 --> 00:00:46,180
okay I have a few slides for you too so

12
00:00:46,180 --> 00:00:47,589
the thing you're looking at is basically

13
00:00:47,589 --> 00:00:49,900
the PCP or the main board of ammo or

14
00:00:49,900 --> 00:00:52,449
pebbles this is a disassembled version

15
00:00:52,449 --> 00:00:54,909
of this pebble here and when I speak

16
00:00:54,909 --> 00:00:57,760
about um variables I want to share the

17
00:00:57,760 --> 00:01:00,040
learnings we gathered when we may

18
00:01:00,040 --> 00:01:02,470
javascript running directly on our

19
00:01:02,470 --> 00:01:04,239
limited hardware and I want to walk you

20
00:01:04,239 --> 00:01:06,010
through some of those limitations and

21
00:01:06,010 --> 00:01:08,820
then again what we learned from doing so

22
00:01:08,820 --> 00:01:12,369
so again for those three or four people

23
00:01:12,369 --> 00:01:14,920
who don't know pebble it is basically as

24
00:01:14,920 --> 00:01:17,530
much what SmartWatch I like to think of

25
00:01:17,530 --> 00:01:19,810
us as the first mover those who first

26
00:01:19,810 --> 00:01:21,700
came out with a SmartWatch long before

27
00:01:21,700 --> 00:01:23,740
Android wear or Apple watch and in fact

28
00:01:23,740 --> 00:01:26,260
all watches work with both iOS and

29
00:01:26,260 --> 00:01:29,020
Android and in officially also our

30
00:01:29,020 --> 00:01:30,460
thanks to our community on other

31
00:01:30,460 --> 00:01:32,920
platforms we do obviously notifications

32
00:01:32,920 --> 00:01:35,530
but recently I'm we emphasize on health

33
00:01:35,530 --> 00:01:37,900
to where our latest model has a built-in

34
00:01:37,900 --> 00:01:39,550
hardware monitor with your step tracking

35
00:01:39,550 --> 00:01:41,170
sleep tracking smart alarms that wake

36
00:01:41,170 --> 00:01:42,580
you up on your own REM phase and so on

37
00:01:42,580 --> 00:01:45,970
and so forth we are best known for our

38
00:01:45,970 --> 00:01:48,370
long battery life for last four week

39
00:01:48,370 --> 00:01:50,290
instead of a few hours and it's an

40
00:01:50,290 --> 00:01:51,790
always-on display which is quite neat

41
00:01:51,790 --> 00:01:53,560
but the reason why I'm here is because

42
00:01:53,560 --> 00:01:56,140
it's hackable you can actually program

43
00:01:56,140 --> 00:02:00,250
on it and we emphasized on a very open

44
00:02:00,250 --> 00:02:02,770
API and open app approach from day one

45
00:02:02,770 --> 00:02:05,140
and that led to a plethora of different

46
00:02:05,140 --> 00:02:09,220
apps so there are hobbyists such as like

47
00:02:09,220 --> 00:02:12,099
sailors or servers who benefit from

48
00:02:12,099 --> 00:02:14,049
pebble being waterproof but they're also

49
00:02:14,049 --> 00:02:17,409
big brands such as uber or nest who give

50
00:02:17,409 --> 00:02:19,090
access easy access right on your wrist

51
00:02:19,090 --> 00:02:21,430
to their services so with rubra for

52
00:02:21,430 --> 00:02:23,020
example is really just a button press

53
00:02:23,020 --> 00:02:26,460
and that taxi comes and picks you up and

54
00:02:26,460 --> 00:02:29,380
there's also another category obviously

55
00:02:29,380 --> 00:02:31,050
on a watch and that is watched races

56
00:02:31,050 --> 00:02:33,910
there are tens of thousands watch faces

57
00:02:33,910 --> 00:02:36,370
by now I'm developed by our community

58
00:02:36,370 --> 00:02:38,770
and they are any media they are colorful

59
00:02:38,770 --> 00:02:41,170
they are very delightful and it's great

60
00:02:41,170 --> 00:02:44,050
to see that people always say that our

61
00:02:44,050 --> 00:02:45,880
platform is a bit limited but it just

62
00:02:45,880 --> 00:02:48,400
happened two weeks ago that a demo

63
00:02:48,400 --> 00:02:51,220
classic a pc demo classic was ported to

64
00:02:51,220 --> 00:02:53,170
pebble and presented at one of those

65
00:02:53,170 --> 00:02:55,480
demo parties in germany and that kicked

66
00:02:55,480 --> 00:02:57,280
off a conversation our community and

67
00:02:57,280 --> 00:02:58,960
there's now a slight channel discussing

68
00:02:58,960 --> 00:03:01,240
how we could leverage that and create a

69
00:03:01,240 --> 00:03:03,640
demo scene just within papal let's all

70
00:03:03,640 --> 00:03:06,610
great and amazing but traditionally on

71
00:03:06,610 --> 00:03:09,160
embedded devices and pebble there's no

72
00:03:09,160 --> 00:03:11,530
exception there you are forced to write

73
00:03:11,530 --> 00:03:14,770
code C or C++ and sometimes and you look

74
00:03:14,770 --> 00:03:16,350
at that damn or even in assembly and

75
00:03:16,350 --> 00:03:18,970
that is mostly because of that Audra

76
00:03:18,970 --> 00:03:21,460
being so limited space wise and also

77
00:03:21,460 --> 00:03:23,710
performance wise which is a bummer

78
00:03:23,710 --> 00:03:26,290
because see sometimes looks like this

79
00:03:26,290 --> 00:03:29,530
and that is great see actually I looked

80
00:03:29,530 --> 00:03:32,440
it up in on a blog post and he walks us

81
00:03:32,440 --> 00:03:34,720
through this piece of code that does

82
00:03:34,720 --> 00:03:36,820
what exactly who can tell me what it

83
00:03:36,820 --> 00:03:42,459
does shrink incarnation yeah that's true

84
00:03:42,459 --> 00:03:45,040
i mean the function name sure obviously

85
00:03:45,040 --> 00:03:49,360
states that right it takes basically an

86
00:03:49,360 --> 00:03:51,250
array of strings and concatenate that

87
00:03:51,250 --> 00:03:53,080
into a buffer see has no concept of a

88
00:03:53,080 --> 00:03:54,820
string and you have to allocate the

89
00:03:54,820 --> 00:03:56,770
buffer before and tell it how long the

90
00:03:56,770 --> 00:03:59,860
buffer is the counterpart in javascript

91
00:03:59,860 --> 00:04:02,200
would look like that maybe like you have

92
00:04:02,200 --> 00:04:03,790
an array of strings and you join them

93
00:04:03,790 --> 00:04:05,650
together i'm pretty sure there are other

94
00:04:05,650 --> 00:04:07,840
ways to do it but this is pretty neat

95
00:04:07,840 --> 00:04:12,130
isn't it now what stops us from doing

96
00:04:12,130 --> 00:04:14,320
that there are plenty of other devices

97
00:04:14,320 --> 00:04:16,600
that do I'm JavaScript on there and they

98
00:04:16,600 --> 00:04:19,870
are all embedded I did a quick research

99
00:04:19,870 --> 00:04:21,760
to find some of those and this is the

100
00:04:21,760 --> 00:04:23,680
list that came up with I'm pretty sure I

101
00:04:23,680 --> 00:04:25,390
missed some and my apologies for this

102
00:04:25,390 --> 00:04:26,860
but I just want to put things in

103
00:04:26,860 --> 00:04:29,830
perspective here and to do that I picked

104
00:04:29,830 --> 00:04:32,050
some arbitrary metric here the amount of

105
00:04:32,050 --> 00:04:33,310
available realm of those different

106
00:04:33,310 --> 00:04:35,890
devices and if you look at int'l addison

107
00:04:35,890 --> 00:04:36,540
or the rest

108
00:04:36,540 --> 00:04:39,270
hi they have one gigabyte of RAM which

109
00:04:39,270 --> 00:04:42,000
is basically not a limited and better

110
00:04:42,000 --> 00:04:43,440
device anymore that's a real computer

111
00:04:43,440 --> 00:04:46,590
and then there's the omega 2 and there's

112
00:04:46,590 --> 00:04:49,260
the tassel and they are more within the

113
00:04:49,260 --> 00:04:52,110
range of 64 megabytes and if you think

114
00:04:52,110 --> 00:04:54,000
about it booting a Linux for example and

115
00:04:54,000 --> 00:04:55,560
that environment is already other tricky

116
00:04:55,560 --> 00:04:58,260
but it's certainly doable and then there

117
00:04:58,260 --> 00:05:01,920
are others s Perino like I'm by Gordon

118
00:05:01,920 --> 00:05:04,320
Williams for example he kick started on

119
00:05:04,320 --> 00:05:06,480
this grade embedded device that does

120
00:05:06,480 --> 00:05:09,000
nothing but runs java script and how

121
00:05:09,000 --> 00:05:11,100
much room do they have why don't they

122
00:05:11,100 --> 00:05:13,050
have any well the problem is scale here

123
00:05:13,050 --> 00:05:15,660
and I try another attempt here gigabyte

124
00:05:15,660 --> 00:05:17,340
is far too large and I'm scaling that

125
00:05:17,340 --> 00:05:20,130
down to 64 megabytes and if i zoom in

126
00:05:20,130 --> 00:05:21,860
and zoom further and zoom further I

127
00:05:21,860 --> 00:05:26,250
finally find asbury no pico with 96 k

128
00:05:26,250 --> 00:05:30,270
and pebble offering only 64 kilobytes of

129
00:05:30,270 --> 00:05:33,540
RAM to applications 64 kilobytes

130
00:05:33,540 --> 00:05:35,870
compared to those 64 megabytes that's a

131
00:05:35,870 --> 00:05:40,260
fraction of 1024 of that other amount

132
00:05:40,260 --> 00:05:43,020
like that's tiny and I understand that

133
00:05:43,020 --> 00:05:44,550
this is hard to understand so I will try

134
00:05:44,550 --> 00:05:48,060
once more this is the J's compiler and

135
00:05:48,060 --> 00:05:50,040
website and you see that I'm little icon

136
00:05:50,040 --> 00:05:53,700
at the top left that's an SVG that file

137
00:05:53,700 --> 00:05:57,200
is 25k large as we G is known to be very

138
00:05:57,200 --> 00:05:59,940
concise in this particular case because

139
00:05:59,940 --> 00:06:02,070
it is actually I'm a bit curved maybe it

140
00:06:02,070 --> 00:06:03,750
is not optimal for SVG but it's pretty

141
00:06:03,750 --> 00:06:06,540
small the pixel data on my laptop on

142
00:06:06,540 --> 00:06:08,610
this particular screen shot though takes

143
00:06:08,610 --> 00:06:11,670
already up more space than the 64 K

144
00:06:11,670 --> 00:06:14,550
available on pebble for applications

145
00:06:14,550 --> 00:06:17,550
just to prevention perspective so it's

146
00:06:17,550 --> 00:06:19,260
not only it's in fact Lee the code is

147
00:06:19,260 --> 00:06:20,790
not only JavaScript but actual data and

148
00:06:20,790 --> 00:06:21,870
all of that needs to live on that

149
00:06:21,870 --> 00:06:25,470
computer things are not that bad though

150
00:06:25,470 --> 00:06:28,260
because people already build great

151
00:06:28,260 --> 00:06:29,700
things we know that you can accomplish

152
00:06:29,700 --> 00:06:33,900
something so well let's do it so there

153
00:06:33,900 --> 00:06:35,400
plenty of JavaScript engines right we

154
00:06:35,400 --> 00:06:37,860
take one of those I again yesterday run

155
00:06:37,860 --> 00:06:40,080
a quick test and I'm loaded google com

156
00:06:40,080 --> 00:06:42,720
on my Chrome browser and it took 150 5

157
00:06:42,720 --> 00:06:46,020
megabytes or I looked at the engine

158
00:06:46,020 --> 00:06:48,060
itself which is yet another number

159
00:06:48,060 --> 00:06:51,210
if even if we had a JavaScript engine

160
00:06:51,210 --> 00:06:53,160
it's somewhat would take up code space

161
00:06:53,160 --> 00:06:57,060
on our flesh like on our firmware and we

162
00:06:57,060 --> 00:06:58,950
before we started this endeavor we

163
00:06:58,950 --> 00:07:01,139
figured that we would have 200k worth of

164
00:07:01,139 --> 00:07:04,290
code space flash code space something

165
00:07:04,290 --> 00:07:06,180
you would normally not even think about

166
00:07:06,180 --> 00:07:08,550
when you do right development and and

167
00:07:08,550 --> 00:07:10,230
phantom jas which is basically a

168
00:07:10,230 --> 00:07:14,060
headless browser based on javascriptcore

169
00:07:14,060 --> 00:07:16,710
already takes out 32 megabytes so this

170
00:07:16,710 --> 00:07:18,630
is way out of reach and when we

171
00:07:18,630 --> 00:07:21,120
presented internally in the sand pebble

172
00:07:21,120 --> 00:07:23,729
the idea to run an interpreter and even

173
00:07:23,729 --> 00:07:26,040
JavaScript and I'll pebble watches they

174
00:07:26,040 --> 00:07:28,770
thought we were crazy like this is not

175
00:07:28,770 --> 00:07:31,919
possible it will not run at all and we

176
00:07:31,919 --> 00:07:34,380
still said we want that we want that so

177
00:07:34,380 --> 00:07:38,580
deeply because the workflow in C is

178
00:07:38,580 --> 00:07:42,090
outdated it takes like 20 seconds for

179
00:07:42,090 --> 00:07:44,490
turnaround when you do like pizza not

180
00:07:44,490 --> 00:07:46,590
some things you need to compile and need

181
00:07:46,590 --> 00:07:48,030
to deploy and then you look at it and

182
00:07:48,030 --> 00:07:49,470
you already forgot how the previous

183
00:07:49,470 --> 00:07:51,630
version looked like I want to have fresh

184
00:07:51,630 --> 00:07:53,700
tooling as it's common in the JavaScript

185
00:07:53,700 --> 00:07:56,580
world I want to have the ability to to

186
00:07:56,580 --> 00:07:58,710
benefit from you the community all these

187
00:07:58,710 --> 00:08:00,479
NPM packages all the knowledge that's

188
00:08:00,479 --> 00:08:02,580
there I want to go to second flow and

189
00:08:02,580 --> 00:08:04,110
quickly copy and paste something and run

190
00:08:04,110 --> 00:08:08,880
it all now watch well luckily there are

191
00:08:08,880 --> 00:08:11,100
other JavaScript engines out there meant

192
00:08:11,100 --> 00:08:13,680
for embedded devices I think the most

193
00:08:13,680 --> 00:08:16,919
prominent one is called duck tape that

194
00:08:16,919 --> 00:08:19,200
tape is taking a few hundred K of code

195
00:08:19,200 --> 00:08:20,639
space you could probably squeeze it down

196
00:08:20,639 --> 00:08:23,669
then there's obviously as Perino Jerry

197
00:08:23,669 --> 00:08:25,919
script I'm very interesting project

198
00:08:25,919 --> 00:08:29,039
kinoma looks also very promising and

199
00:08:29,039 --> 00:08:31,860
then there is I like similar to any

200
00:08:31,860 --> 00:08:34,289
other JavaScript library out there every

201
00:08:34,289 --> 00:08:36,270
week pops up another JavaScript engine

202
00:08:36,270 --> 00:08:39,360
basically so here are if you the problem

203
00:08:39,360 --> 00:08:41,760
with those tiny i would say hobby

204
00:08:41,760 --> 00:08:43,830
attempts is that there are oftentimes

205
00:08:43,830 --> 00:08:46,350
not standard compliant or like by far

206
00:08:46,350 --> 00:08:50,160
future complete so in the end we decided

207
00:08:50,160 --> 00:08:52,980
to go with javascript and when Gordon

208
00:08:52,980 --> 00:08:54,810
Williams from spree no actually asked me

209
00:08:54,810 --> 00:08:56,610
I came up with that list here and it's

210
00:08:56,610 --> 00:08:59,280
basically first and foremost Jerry

211
00:08:59,280 --> 00:09:00,380
script

212
00:09:00,380 --> 00:09:01,940
the Melbourne source obviously but this

213
00:09:01,940 --> 00:09:03,800
one here has a great team behind it

214
00:09:03,800 --> 00:09:07,370
full-time people working on this for

215
00:09:07,370 --> 00:09:10,610
over a year now which is amazing because

216
00:09:10,610 --> 00:09:12,740
we have to stand on the shoulders of

217
00:09:12,740 --> 00:09:13,820
giants here we can I do that all

218
00:09:13,820 --> 00:09:16,370
ourselves but it's also standard

219
00:09:16,370 --> 00:09:18,590
compliance or whatever you do whatever

220
00:09:18,590 --> 00:09:20,420
you do in valid JavaScript will actually

221
00:09:20,420 --> 00:09:22,490
run on the watch and that is critical

222
00:09:22,490 --> 00:09:23,840
because otherwise it's yet another

223
00:09:23,840 --> 00:09:26,540
script language that is Travis would

224
00:09:26,540 --> 00:09:28,810
look alike but not the real thing and

225
00:09:28,810 --> 00:09:31,220
overall it's just the quality of the

226
00:09:31,220 --> 00:09:34,220
project communication architecture all

227
00:09:34,220 --> 00:09:37,130
of it + partners that contribute to it

228
00:09:37,130 --> 00:09:42,320
as we do so that's great and I think it

229
00:09:42,320 --> 00:09:44,240
took us so we first did in a screen of

230
00:09:44,240 --> 00:09:46,460
port and that ran on the watch and then

231
00:09:46,460 --> 00:09:48,710
we did Jerry script again and it was

232
00:09:48,710 --> 00:09:51,970
early May when we finally shipped

233
00:09:51,970 --> 00:09:54,350
JavaScript on the watch so those people

234
00:09:54,350 --> 00:09:55,730
in the audience you actually were a

235
00:09:55,730 --> 00:09:57,650
pebble if you go to the standard watch

236
00:09:57,650 --> 00:09:59,720
face take talk the one with the two

237
00:09:59,720 --> 00:10:01,790
hands that is already running JavaScript

238
00:10:01,790 --> 00:10:04,460
without you knowing it we ship the

239
00:10:04,460 --> 00:10:06,320
JavaScript engine we re implemented our

240
00:10:06,320 --> 00:10:08,270
standard watch face we have integration

241
00:10:08,270 --> 00:10:10,040
tests to make sure that it's pixel

242
00:10:10,040 --> 00:10:11,870
perfectly the same and it doesn't

243
00:10:11,870 --> 00:10:14,300
consume more battery as the sea

244
00:10:14,300 --> 00:10:17,840
counterpart did and we shipped it now

245
00:10:17,840 --> 00:10:20,810
that was easy the hard part and the

246
00:10:20,810 --> 00:10:22,540
stuff I want to talk about is our

247
00:10:22,540 --> 00:10:25,490
learnings when we finally made that

248
00:10:25,490 --> 00:10:27,260
available to developers which is also

249
00:10:27,260 --> 00:10:29,720
happen happening right now actually and

250
00:10:29,720 --> 00:10:31,910
the three things i want to focus on our

251
00:10:31,910 --> 00:10:34,760
api's memory constraints sorry bear with

252
00:10:34,760 --> 00:10:36,290
me but memory is really critical in our

253
00:10:36,290 --> 00:10:40,220
platform and then launch time something

254
00:10:40,220 --> 00:10:41,780
that isn't really obvious if you think

255
00:10:41,780 --> 00:10:44,840
of it about it for the first time so

256
00:10:44,840 --> 00:10:48,740
api's i was talking about javascript

257
00:10:48,740 --> 00:10:50,690
what javascript by itself doesn't do

258
00:10:50,690 --> 00:10:54,470
much again here's our board there's the

259
00:10:54,470 --> 00:10:56,900
CPU as the MCU which combines different

260
00:10:56,900 --> 00:10:59,180
components in our case the CPU and RAM

261
00:10:59,180 --> 00:11:02,180
and JavaScript what can you actually do

262
00:11:02,180 --> 00:11:03,440
with it I mean in the standard that

263
00:11:03,440 --> 00:11:05,330
state there are regular expressions

264
00:11:05,330 --> 00:11:08,030
different things in the standard but you

265
00:11:08,030 --> 00:11:09,410
cannot even log anything because

266
00:11:09,410 --> 00:11:10,940
console.log is not part of the standard

267
00:11:10,940 --> 00:11:13,640
so just having JavaScript by itself

268
00:11:13,640 --> 00:11:16,100
is actually bit useless we want to give

269
00:11:16,100 --> 00:11:18,200
access to everything our platform

270
00:11:18,200 --> 00:11:20,810
delivers and that is way more so here is

271
00:11:20,810 --> 00:11:23,960
a teardown of the actual watch this is

272
00:11:23,960 --> 00:11:26,600
not too different boards at the bottom

273
00:11:26,600 --> 00:11:28,820
you see the flip side of the same bored

274
00:11:28,820 --> 00:11:32,900
so it's mirrored and the MCU is really

275
00:11:32,900 --> 00:11:34,730
just that's JavaScript that's grounded

276
00:11:34,730 --> 00:11:38,150
but there is also flash storage that is

277
00:11:38,150 --> 00:11:39,800
where we store the program and store

278
00:11:39,800 --> 00:11:41,330
your bid maps and other resources like

279
00:11:41,330 --> 00:11:43,070
custom fonts that is obviously the

280
00:11:43,070 --> 00:11:44,840
ePaper display you want to show

281
00:11:44,840 --> 00:11:47,240
something on the screen and battery so

282
00:11:47,240 --> 00:11:51,350
that if you happen to be a taxi service

283
00:11:51,350 --> 00:11:53,240
you could check the battery level and if

284
00:11:53,240 --> 00:11:54,800
it's critical you could raise the fare

285
00:11:54,800 --> 00:11:57,350
like there are real use cases for access

286
00:11:57,350 --> 00:11:59,240
to the battery and then there is also

287
00:11:59,240 --> 00:12:00,830
all the sensors and the Bluetooth radio

288
00:12:00,830 --> 00:12:02,480
you want to talk to your phone you want

289
00:12:02,480 --> 00:12:04,280
to talk to the Internet how would we

290
00:12:04,280 --> 00:12:06,680
possibly make that accessible the

291
00:12:06,680 --> 00:12:09,290
problem with AP is on our end is unlike

292
00:12:09,290 --> 00:12:13,550
a library and API developer who does the

293
00:12:13,550 --> 00:12:15,070
next library and publish it as

294
00:12:15,070 --> 00:12:18,230
publishers it on NPM is that we cannot

295
00:12:18,230 --> 00:12:21,620
really do semantic versioning raise the

296
00:12:21,620 --> 00:12:23,240
major version number and break

297
00:12:23,240 --> 00:12:25,240
everything that was ever there because

298
00:12:25,240 --> 00:12:29,450
developers are using our SDK submit this

299
00:12:29,450 --> 00:12:31,670
to the App Store and consumers run

300
00:12:31,670 --> 00:12:35,390
whatever version of the firmware there

301
00:12:35,390 --> 00:12:37,250
is actually the problem that once we

302
00:12:37,250 --> 00:12:39,400
commit to an API we more or less have to

303
00:12:39,400 --> 00:12:43,430
support it forever and that is really a

304
00:12:43,430 --> 00:12:45,800
delicate problem as an API designer

305
00:12:45,800 --> 00:12:47,120
because we don't have the luxury to

306
00:12:47,120 --> 00:12:50,750
write api's here we are much more in the

307
00:12:50,750 --> 00:12:53,120
in the shoes of a browser vendor here

308
00:12:53,120 --> 00:12:55,190
and that's actually the key to the story

309
00:12:55,190 --> 00:12:58,400
there are standardized a B is for all of

310
00:12:58,400 --> 00:13:00,350
these problems and you know them they

311
00:13:00,350 --> 00:13:02,900
are called web AP is so although we are

312
00:13:02,900 --> 00:13:05,780
running on this tiny embeddable embedded

313
00:13:05,780 --> 00:13:09,320
hardware we chose to look at the at the

314
00:13:09,320 --> 00:13:12,220
browsers and learn from them and

315
00:13:12,220 --> 00:13:14,570
basically re-implemented what they did

316
00:13:14,570 --> 00:13:18,590
so for for the display for example we

317
00:13:18,590 --> 00:13:21,350
chose canvas and it's ugly as hell and

318
00:13:21,350 --> 00:13:23,750
it's really inconvenient to use but it's

319
00:13:23,750 --> 00:13:26,209
a standard and that means others know

320
00:13:26,209 --> 00:13:28,910
how to use it they know the clip falls

321
00:13:28,910 --> 00:13:31,069
and there are already solutions to the

322
00:13:31,069 --> 00:13:32,720
problems that come with it there's a

323
00:13:32,720 --> 00:13:34,459
contract we can commit to and we know

324
00:13:34,459 --> 00:13:36,410
that they will not change well at least

325
00:13:36,410 --> 00:13:39,559
not that frequently and similarly for

326
00:13:39,559 --> 00:13:41,360
communication between the phone and the

327
00:13:41,360 --> 00:13:43,429
watch our way our dead greater the

328
00:13:43,429 --> 00:13:45,379
internet we chose a post message as you

329
00:13:45,379 --> 00:13:47,089
would talk to another window or a

330
00:13:47,089 --> 00:13:50,089
background worker and then use an event

331
00:13:50,089 --> 00:13:54,319
system for four different occurrences in

332
00:13:54,319 --> 00:13:57,050
the system so that is all great and it

333
00:13:57,050 --> 00:13:59,660
lab together with NPM to a very concise

334
00:13:59,660 --> 00:14:02,300
way to writing applications so this is a

335
00:14:02,300 --> 00:14:06,800
very minimal way of writing apps you can

336
00:14:06,800 --> 00:14:09,889
actually use NPM packages and with that

337
00:14:09,889 --> 00:14:11,360
we hope that people write Poli filled

338
00:14:11,360 --> 00:14:12,619
and and create other convenience

339
00:14:12,619 --> 00:14:14,119
functions but this is also the way to

340
00:14:14,119 --> 00:14:16,670
get access to the rude object of our API

341
00:14:16,670 --> 00:14:20,149
we called it rocky as in like stones and

342
00:14:20,149 --> 00:14:23,660
pebble you know and that rocky global

343
00:14:23,660 --> 00:14:25,879
allows you to register like to listen to

344
00:14:25,879 --> 00:14:28,309
events such as when it has to draw

345
00:14:28,309 --> 00:14:30,319
itself the system could ask for it to

346
00:14:30,319 --> 00:14:32,290
draw at any time because of different

347
00:14:32,290 --> 00:14:37,189
like events in the system and the web

348
00:14:37,189 --> 00:14:39,379
api is being so flexible allow us to

349
00:14:39,379 --> 00:14:41,480
also add a new proprietary events such

350
00:14:41,480 --> 00:14:43,279
as a minute change when you write a

351
00:14:43,279 --> 00:14:44,779
watch face for example it's not really

352
00:14:44,779 --> 00:14:48,769
feasible to redraw every second because

353
00:14:48,769 --> 00:14:50,839
that drains the battery if you really

354
00:14:50,839 --> 00:14:52,759
only want to update once a minute it's

355
00:14:52,759 --> 00:14:55,519
also hard to do the date math with just

356
00:14:55,519 --> 00:14:57,350
the building data object you could

357
00:14:57,350 --> 00:14:59,269
totally do that you could query for the

358
00:14:59,269 --> 00:15:00,799
current time and then the right set

359
00:15:00,799 --> 00:15:03,230
timeout and then a schedule at redraw

360
00:15:03,230 --> 00:15:05,509
but we actually provide a convenient

361
00:15:05,509 --> 00:15:06,769
events for this like minute change

362
00:15:06,769 --> 00:15:09,589
second change so let you know on the

363
00:15:09,589 --> 00:15:10,999
edge when the minute changes that you

364
00:15:10,999 --> 00:15:15,049
can redraw so that's it pretty neat but

365
00:15:15,049 --> 00:15:17,209
with those standard api's we also

366
00:15:17,209 --> 00:15:20,119
created some expectations so canvas is

367
00:15:20,119 --> 00:15:22,759
pretty powerful and some of its

368
00:15:22,759 --> 00:15:24,769
implementations for example clipping to

369
00:15:24,769 --> 00:15:28,160
a path is difficult to implement an all

370
00:15:28,160 --> 00:15:31,100
platform a naive and very um performant

371
00:15:31,100 --> 00:15:33,860
efficient solution would be to store a

372
00:15:33,860 --> 00:15:36,290
binary mask actually like an alpha

373
00:15:36,290 --> 00:15:37,370
channel

374
00:15:37,370 --> 00:15:39,800
to tear to measure what is actually

375
00:15:39,800 --> 00:15:42,410
masked out but such an alpha channel is

376
00:15:42,410 --> 00:15:44,779
already on our platform like 6k worth of

377
00:15:44,779 --> 00:15:47,839
data and we are ready short ram and then

378
00:15:47,839 --> 00:15:49,220
other things as i mentioned before and

379
00:15:49,220 --> 00:15:50,720
cameras are not really convenient

380
00:15:50,720 --> 00:15:52,940
especially if you come from our capi

381
00:15:52,940 --> 00:15:55,430
where we tailored towards the need of a

382
00:15:55,430 --> 00:15:58,130
watch face developer yes angles are

383
00:15:58,130 --> 00:16:00,170
rotated clockwise but they start at 3pm

384
00:16:00,170 --> 00:16:02,570
which is very inconvenient if you want

385
00:16:02,570 --> 00:16:04,370
to do hands and they all start at twelve

386
00:16:04,370 --> 00:16:07,070
o'clock and then also drawing a simple

387
00:16:07,070 --> 00:16:08,990
line means yeah you put in a path you

388
00:16:08,990 --> 00:16:11,029
move to something you line to something

389
00:16:11,029 --> 00:16:12,710
and then you stroke instead of just a

390
00:16:12,710 --> 00:16:16,730
plain line call so yeah that is odd but

391
00:16:16,730 --> 00:16:19,910
it's just the standard what we figured

392
00:16:19,910 --> 00:16:21,890
is that and we talked to the community

393
00:16:21,890 --> 00:16:25,550
on that we cannot ship all of this at

394
00:16:25,550 --> 00:16:28,100
once what we did instead is we what

395
00:16:28,100 --> 00:16:30,620
we have we know I'm what the target is

396
00:16:30,620 --> 00:16:33,190
because it's just the web AP eyes and

397
00:16:33,190 --> 00:16:37,450
just like fail with exceptions when I

398
00:16:37,450 --> 00:16:40,220
function is undefined that allows

399
00:16:40,220 --> 00:16:43,040
developers to create polyfills and it's

400
00:16:43,040 --> 00:16:45,350
actually better to have something now

401
00:16:45,350 --> 00:16:47,870
than to wait another half a year

402
00:16:47,870 --> 00:16:49,910
something until we finally did this so

403
00:16:49,910 --> 00:16:51,410
I'm also interested in your feedback on

404
00:16:51,410 --> 00:16:54,410
this so yeah with that we basically

405
00:16:54,410 --> 00:16:56,150
shipped api's let's talk about memory

406
00:16:56,150 --> 00:17:00,110
constraints so there are like when you

407
00:17:00,110 --> 00:17:01,640
talk about size and JavaScript you

408
00:17:01,640 --> 00:17:04,490
oftentimes think about transfer like how

409
00:17:04,490 --> 00:17:06,980
much how many bytes you need to transfer

410
00:17:06,980 --> 00:17:08,720
from the web server to my browser in

411
00:17:08,720 --> 00:17:11,059
order to deliver content how can I get

412
00:17:11,059 --> 00:17:13,309
the first flight to the browser earliest

413
00:17:13,309 --> 00:17:16,640
how can i leverage caches but this is

414
00:17:16,640 --> 00:17:18,800
actually pretty meaningless so this one

415
00:17:18,800 --> 00:17:22,220
is a demo it's a not sure I've seen this

416
00:17:22,220 --> 00:17:24,290
but there's a competition very much like

417
00:17:24,290 --> 00:17:27,199
the demo scene in general it's basically

418
00:17:27,199 --> 00:17:28,970
how much cool effects can you squeeze

419
00:17:28,970 --> 00:17:33,140
into 1k worth of JavaScript so let me

420
00:17:33,140 --> 00:17:34,850
again I'm not sure why it's done right

421
00:17:34,850 --> 00:17:40,520
here actually so yeah that is a 1k of

422
00:17:40,520 --> 00:17:43,780
JavaScript the JavaScript looks like rap

423
00:17:43,780 --> 00:17:49,490
it's it's concise yeah it's only 1k for

424
00:17:49,490 --> 00:17:50,810
those of you who cannot read gibber ish

425
00:17:50,810 --> 00:17:52,550
what's actually happening here is that

426
00:17:52,550 --> 00:17:55,100
there is a compressed string the actual

427
00:17:55,100 --> 00:17:57,920
payload is almost 2k worth of JavaScript

428
00:17:57,920 --> 00:18:00,320
source code and then this is the loop at

429
00:18:00,320 --> 00:18:03,140
the end we uncompress it into a variable

430
00:18:03,140 --> 00:18:05,180
and then we'ii valid so basically

431
00:18:05,180 --> 00:18:07,580
instead of running one carriage of

432
00:18:07,580 --> 00:18:09,470
JavaScript we are running almost 2k of

433
00:18:09,470 --> 00:18:12,830
JavaScript so one could think that we

434
00:18:12,830 --> 00:18:14,450
just expanded it well one hundred

435
00:18:14,450 --> 00:18:17,000
percent and at runtime we need 2k worth

436
00:18:17,000 --> 00:18:19,460
of RAM right well I took the numbers

437
00:18:19,460 --> 00:18:21,650
again on Chrome and it's more like half

438
00:18:21,650 --> 00:18:25,580
a gigabyte roughly and of course this is

439
00:18:25,580 --> 00:18:27,350
like comparing apples with oranges here

440
00:18:27,350 --> 00:18:29,150
because the browser itself takes up RAM

441
00:18:29,150 --> 00:18:31,760
and the GPU process the rendering

442
00:18:31,760 --> 00:18:33,500
pipeline here has a lot of overhead for

443
00:18:33,500 --> 00:18:34,850
this particular use case and we could

444
00:18:34,850 --> 00:18:36,860
make that way more concise but this is

445
00:18:36,860 --> 00:18:38,020
really just to put things in perspective

446
00:18:38,020 --> 00:18:41,690
code size 1k has nothing to do with

447
00:18:41,690 --> 00:18:43,940
runtime requirements how much RAM you

448
00:18:43,940 --> 00:18:45,650
actually have and I would say that you

449
00:18:45,650 --> 00:18:49,880
guys have no idea about ram or could you

450
00:18:49,880 --> 00:18:51,950
tell me how much RAM this object

451
00:18:51,950 --> 00:18:56,750
actually takes like you javascript has

452
00:18:56,750 --> 00:18:59,300
no concept of an out of memory situation

453
00:18:59,300 --> 00:19:01,730
you can always just create a string you

454
00:19:01,730 --> 00:19:03,170
can always just create an object but

455
00:19:03,170 --> 00:19:05,210
what if you run out of RAM what this

456
00:19:05,210 --> 00:19:08,900
does not happen in your environment so

457
00:19:08,900 --> 00:19:10,670
here for example you need actually

458
00:19:10,670 --> 00:19:12,980
character space to store the property

459
00:19:12,980 --> 00:19:15,530
name you need space to store the

460
00:19:15,530 --> 00:19:17,750
original string you need more space to

461
00:19:17,750 --> 00:19:20,930
store the concatenated string to store 0

462
00:19:20,930 --> 00:19:24,410
which is living on the context how much

463
00:19:24,410 --> 00:19:28,010
is a string worth is it really stored as

464
00:19:28,010 --> 00:19:30,530
utf-16 do you know what says ooh ay tis

465
00:19:30,530 --> 00:19:33,290
and their way to encode um emojis

466
00:19:33,290 --> 00:19:35,690
because they don't fit into the unicode

467
00:19:35,690 --> 00:19:37,110
plane of you

468
00:19:37,110 --> 00:19:41,460
of unicode 16 like how much cash do they

469
00:19:41,460 --> 00:19:42,900
actually do in order to look at the

470
00:19:42,900 --> 00:19:44,910
property do they have like a hashmap for

471
00:19:44,910 --> 00:19:48,750
the string look up probably we do so

472
00:19:48,750 --> 00:19:50,820
it's really tough to tell let's say like

473
00:19:50,820 --> 00:19:53,220
conservatively on v8 maybe that is I

474
00:19:53,220 --> 00:19:55,740
don't know 32 byte probably not maybe 64

475
00:19:55,740 --> 00:19:57,630
byte if you store 10 of those it's

476
00:19:57,630 --> 00:20:01,740
already 640 bites that's like in the

477
00:20:01,740 --> 00:20:03,240
range of something you are you can

478
00:20:03,240 --> 00:20:05,730
notice on our platform so we rode I'm a

479
00:20:05,730 --> 00:20:07,920
couple of tools to analyze byte code to

480
00:20:07,920 --> 00:20:10,320
analyze heat consumptions but we quickly

481
00:20:10,320 --> 00:20:12,559
realize that this is not the level a

482
00:20:12,559 --> 00:20:15,090
typical JavaScript developer want to

483
00:20:15,090 --> 00:20:17,010
operate on so what we did instead is

484
00:20:17,010 --> 00:20:20,610
reintroduced an event oftentimes it's

485
00:20:20,610 --> 00:20:23,280
basically going like this i program my

486
00:20:23,280 --> 00:20:25,200
program i program until this is not

487
00:20:25,200 --> 00:20:27,240
enough ram anymore and then it crashes

488
00:20:27,240 --> 00:20:29,460
well that's great but I could actually

489
00:20:29,460 --> 00:20:32,250
prepare for this scenario if you are

490
00:20:32,250 --> 00:20:34,970
like like memory leaks are one thing but

491
00:20:34,970 --> 00:20:37,140
often times you have structures that

492
00:20:37,140 --> 00:20:39,120
could be recreated if you have had more

493
00:20:39,120 --> 00:20:41,190
RAM later on so what we do is I'm we

494
00:20:41,190 --> 00:20:43,230
actually I'm firing event when you have

495
00:20:43,230 --> 00:20:45,000
high memory pressure and then you could

496
00:20:45,000 --> 00:20:46,770
lose of resources you don't need anymore

497
00:20:46,770 --> 00:20:50,160
and there's another occasion when this

498
00:20:50,160 --> 00:20:51,570
event fires and that it's really the

499
00:20:51,570 --> 00:20:54,059
critical piece and when if you don't let

500
00:20:54,059 --> 00:20:55,919
lose now we actually quit your

501
00:20:55,919 --> 00:20:59,370
application what interesting question is

502
00:20:59,370 --> 00:21:01,679
how would you possibly do any logic here

503
00:21:01,679 --> 00:21:05,790
if you're out of RAM anyway so let's

504
00:21:05,790 --> 00:21:09,240
talk about performance then luckily

505
00:21:09,240 --> 00:21:10,950
Jerry script unlike other embedded

506
00:21:10,950 --> 00:21:13,140
runtime such as Perino as Breen who

507
00:21:13,140 --> 00:21:15,270
actually parses the same source code

508
00:21:15,270 --> 00:21:16,620
again and again if you jump into a

509
00:21:16,620 --> 00:21:17,970
function that parses that function again

510
00:21:17,970 --> 00:21:19,380
if you jump out and jump in to get it

511
00:21:19,380 --> 00:21:21,840
parses it again javascript is way more

512
00:21:21,840 --> 00:21:24,240
efficient it stores a code in byte code

513
00:21:24,240 --> 00:21:28,169
and that is great but computing bytecode

514
00:21:28,169 --> 00:21:30,960
upfront costs time and RAM and hence you

515
00:21:30,960 --> 00:21:34,020
know it by now we don't have that Ram so

516
00:21:34,020 --> 00:21:36,299
what we did come up with is a system

517
00:21:36,299 --> 00:21:39,390
where we produced by code offline you

518
00:21:39,390 --> 00:21:41,640
have your own program stored in the

519
00:21:41,640 --> 00:21:43,590
folder structure our SDK bundles

520
00:21:43,590 --> 00:21:45,600
JavaScript for the phone and JavaScript

521
00:21:45,600 --> 00:21:47,550
for the watch and it also compresses

522
00:21:47,550 --> 00:21:50,130
some of the resources and then if you

523
00:21:50,130 --> 00:21:50,590
install

524
00:21:50,590 --> 00:21:52,000
application we actually move the

525
00:21:52,000 --> 00:21:54,130
JavaScript part to the phone that was

526
00:21:54,130 --> 00:21:55,870
already true for the last two years and

527
00:21:55,870 --> 00:21:58,690
now the crazy thing happens words were

528
00:21:58,690 --> 00:22:00,039
you called JavaScript inception

529
00:22:00,039 --> 00:22:03,010
internally we basically cross compile

530
00:22:03,010 --> 00:22:05,049
the JavaScript compiler using Emscripten

531
00:22:05,049 --> 00:22:07,419
to JavaScript so that we can take your

532
00:22:07,419 --> 00:22:09,309
JavaScript and produce JavaScript byte

533
00:22:09,309 --> 00:22:12,400
code in JavaScript and that is for

534
00:22:12,400 --> 00:22:14,350
different reasons one of them is that

535
00:22:14,350 --> 00:22:17,260
the bytecode is no real maybe I contract

536
00:22:17,260 --> 00:22:19,390
it actually depends on the firmware but

537
00:22:19,390 --> 00:22:21,460
on iOS for example you cannot download

538
00:22:21,460 --> 00:22:23,559
any new executable code unless it's

539
00:22:23,559 --> 00:22:26,740
JavaScript so and there are different

540
00:22:26,740 --> 00:22:28,149
other reasons and I'd love to talk about

541
00:22:28,149 --> 00:22:30,669
it but in the end we actually only store

542
00:22:30,669 --> 00:22:32,890
the bytecode on the watch executed in

543
00:22:32,890 --> 00:22:35,649
the JavaScript environment point for is

544
00:22:35,649 --> 00:22:37,840
what we were talking about here and then

545
00:22:37,840 --> 00:22:39,399
you have access to the API talk to the

546
00:22:39,399 --> 00:22:41,679
internet and everything that is crazy

547
00:22:41,679 --> 00:22:45,100
but we did it we ship that like one and

548
00:22:45,100 --> 00:22:46,750
a half weeks or two we finally make that

549
00:22:46,750 --> 00:22:48,250
available to developers and this is how

550
00:22:48,250 --> 00:22:51,159
it looks like so in the shell you have

551
00:22:51,159 --> 00:22:54,669
this SDK thing you can build it and then

552
00:22:54,669 --> 00:22:57,399
we already at build time tell you where

553
00:22:57,399 --> 00:22:58,840
you have problems not at one time but

554
00:22:58,840 --> 00:23:00,370
actually at build time and we can do

555
00:23:00,370 --> 00:23:02,110
that because we leverage typescript

556
00:23:02,110 --> 00:23:03,909
under the hood you are not a relish but

557
00:23:03,909 --> 00:23:05,260
we actually have like typescript

558
00:23:05,260 --> 00:23:07,270
definitions for all our AP eyes which

559
00:23:07,270 --> 00:23:09,190
are basically rabbi be eyes and know

560
00:23:09,190 --> 00:23:11,799
that a property is not available or like

561
00:23:11,799 --> 00:23:13,450
you have some tactical hours and then

562
00:23:13,450 --> 00:23:16,120
you build it and you can actually deploy

563
00:23:16,120 --> 00:23:17,470
it on the right hand side you see an

564
00:23:17,470 --> 00:23:19,450
emulator which is not a simulator it's

565
00:23:19,450 --> 00:23:21,580
really the it maps the memory and

566
00:23:21,580 --> 00:23:23,320
everything one to one has it exists on

567
00:23:23,320 --> 00:23:25,990
our physical devices and there you can

568
00:23:25,990 --> 00:23:28,360
run a watch face it's not the most

569
00:23:28,360 --> 00:23:30,190
obvious what face here but it's done but

570
00:23:30,190 --> 00:23:32,169
one of our communities our community

571
00:23:32,169 --> 00:23:36,640
members which is great we also have the

572
00:23:36,640 --> 00:23:38,590
ability because we have a localized ok

573
00:23:38,590 --> 00:23:41,140
to tie this with your favorite idol here

574
00:23:41,140 --> 00:23:43,690
I'm using webstorm that is also done the

575
00:23:43,690 --> 00:23:45,010
one of our community members this is

576
00:23:45,010 --> 00:23:49,149
some as you look at the structure of the

577
00:23:49,149 --> 00:23:51,640
code it's he's actually inspired by C he

578
00:23:51,640 --> 00:23:53,260
comes from British he background which

579
00:23:53,260 --> 00:23:54,850
is fine it actually tells me that

580
00:23:54,850 --> 00:23:56,860
javascript is approachable enough for c

581
00:23:56,860 --> 00:23:59,020
developer whereas the other is not

582
00:23:59,020 --> 00:24:02,230
operationally the case but here I'm

583
00:24:02,230 --> 00:24:03,740
showing that

584
00:24:03,740 --> 00:24:05,179
we actually have code completion thanks

585
00:24:05,179 --> 00:24:07,040
to type on script definitions so we know

586
00:24:07,040 --> 00:24:08,630
what we are dealing with we can stall

587
00:24:08,630 --> 00:24:12,620
that we have at type time we know if

588
00:24:12,620 --> 00:24:14,420
something is incompatible and so forth

589
00:24:14,420 --> 00:24:17,720
and that is also right and because all

590
00:24:17,720 --> 00:24:20,210
our projects are now like real but I do

591
00:24:20,210 --> 00:24:22,190
have a package Jason they can require

592
00:24:22,190 --> 00:24:24,380
other things we can now leverage all the

593
00:24:24,380 --> 00:24:26,600
two legs so I can now run scripts that

594
00:24:26,600 --> 00:24:29,000
are defined in the and the package.json

595
00:24:29,000 --> 00:24:30,860
to build my program which is basically

596
00:24:30,860 --> 00:24:32,540
the same I did previously in the command

597
00:24:32,540 --> 00:24:35,150
line and also to install a ritual then

598
00:24:35,150 --> 00:24:38,000
again fire up the emulator so that's

599
00:24:38,000 --> 00:24:39,500
that's all great and that's basically

600
00:24:39,500 --> 00:24:43,910
the same thing but i really only put

601
00:24:43,910 --> 00:24:45,230
this here to show you that this is for

602
00:24:45,230 --> 00:24:46,940
real and you can download it now and use

603
00:24:46,940 --> 00:24:48,590
it and do javascript so here for example

604
00:24:48,590 --> 00:24:51,320
that's a reimplement ation of apple

605
00:24:51,320 --> 00:24:54,200
watches her massage face and there's a

606
00:24:54,200 --> 00:24:55,730
third thing and we have this for a while

607
00:24:55,730 --> 00:24:57,800
now it's called cloud pebble it's a

608
00:24:57,800 --> 00:25:01,880
cloud-based ide traditionally for pebble

609
00:25:01,880 --> 00:25:05,390
native applications where we offer you a

610
00:25:05,390 --> 00:25:07,970
code editor it was previously in C now

611
00:25:07,970 --> 00:25:10,040
and JavaScript and it's again the same

612
00:25:10,040 --> 00:25:12,080
code it's the same author you actually

613
00:25:12,080 --> 00:25:13,880
see that some of the sections are the

614
00:25:13,880 --> 00:25:15,500
same and I hope that the community will

615
00:25:15,500 --> 00:25:17,900
trade NPM packages from this to deal

616
00:25:17,900 --> 00:25:20,360
with repetitive tasks and watch face

617
00:25:20,360 --> 00:25:24,890
design the crazy thing about cloud

618
00:25:24,890 --> 00:25:27,020
pebble is what it actually does because

619
00:25:27,020 --> 00:25:29,000
it's not the editor is running in the

620
00:25:29,000 --> 00:25:31,070
browser but we have a cloud-based build

621
00:25:31,070 --> 00:25:32,660
system so whenever you actually do

622
00:25:32,660 --> 00:25:33,770
something that's transmitted to the

623
00:25:33,770 --> 00:25:35,990
cloud build and then the emulator you

624
00:25:35,990 --> 00:25:38,000
see is also hosted on the cloud and

625
00:25:38,000 --> 00:25:40,550
streamed via VNC back into the browser

626
00:25:40,550 --> 00:25:41,900
where you can see the picture perfect

627
00:25:41,900 --> 00:25:44,240
result but it allows you to basically

628
00:25:44,240 --> 00:25:46,429
write JavaScript based applications

629
00:25:46,429 --> 00:25:48,110
anywhere where you have access to a

630
00:25:48,110 --> 00:25:50,870
browser to run it either in the emulator

631
00:25:50,870 --> 00:25:53,030
or directly on the watch and it depends

632
00:25:53,030 --> 00:25:55,730
on the remaining time to actually show

633
00:25:55,730 --> 00:25:58,610
that on the actual watch so yeah that is

634
00:25:58,610 --> 00:26:00,620
there and here you see that we deal with

635
00:26:00,620 --> 00:26:02,510
different like screen shapes and

636
00:26:02,510 --> 00:26:04,640
different aspect ratios when it comes to

637
00:26:04,640 --> 00:26:07,580
our platform which is all doable that's

638
00:26:07,580 --> 00:26:10,910
now let's talk about the future because

639
00:26:10,910 --> 00:26:12,590
this is not the end this is not what we

640
00:26:12,590 --> 00:26:14,120
want to do what we really want to do is

641
00:26:14,120 --> 00:26:16,840
we want to do I'm great debugging

642
00:26:16,840 --> 00:26:18,820
so here's a right now we only have

643
00:26:18,820 --> 00:26:20,830
console.log for example but what you see

644
00:26:20,830 --> 00:26:23,080
here is built with everything that's

645
00:26:23,080 --> 00:26:24,820
publicly available on the left-hand side

646
00:26:24,820 --> 00:26:27,279
see a note server which does not really

647
00:26:27,279 --> 00:26:30,159
do much it's basically taking keyboard

648
00:26:30,159 --> 00:26:33,010
input related via web socket to our

649
00:26:33,010 --> 00:26:34,480
phone and then whenever it receives

650
00:26:34,480 --> 00:26:35,980
something from the phone it prints it

651
00:26:35,980 --> 00:26:37,990
out on the on the shell so I'm running

652
00:26:37,990 --> 00:26:39,520
that node server and on the right hand

653
00:26:39,520 --> 00:26:41,919
side there's our pebble application it

654
00:26:41,919 --> 00:26:44,110
consists of two parts one is the part

655
00:26:44,110 --> 00:26:46,120
that runs on the watch physically on the

656
00:26:46,120 --> 00:26:48,520
watch it's trivial it's basically

657
00:26:48,520 --> 00:26:50,940
whenever a message comes from the phone

658
00:26:50,940 --> 00:26:54,250
eval that string take the output and

659
00:26:54,250 --> 00:26:57,640
send it back so that's the watch part

660
00:26:57,640 --> 00:27:00,070
and the same project also has a phone

661
00:27:00,070 --> 00:27:02,500
part and the phone part is also just a

662
00:27:02,500 --> 00:27:05,409
relay it talks by a WebSocket to the

663
00:27:05,409 --> 00:27:07,210
node server whenever it receives a

664
00:27:07,210 --> 00:27:09,279
string from the node server it forwards

665
00:27:09,279 --> 00:27:12,640
it to the watch and whenever it receives

666
00:27:12,640 --> 00:27:15,909
something on from the watch again it's

667
00:27:15,909 --> 00:27:18,250
just our message passing here it

668
00:27:18,250 --> 00:27:20,610
forwards it to the WebSocket connection

669
00:27:20,610 --> 00:27:23,020
which is the node server and with that

670
00:27:23,020 --> 00:27:25,029
and just a building blocks you should

671
00:27:25,029 --> 00:27:27,520
all be familiar with we created on our

672
00:27:27,520 --> 00:27:30,580
platform a rebel so I start this

673
00:27:30,580 --> 00:27:32,529
application now again by now you should

674
00:27:32,529 --> 00:27:34,870
be familiar with it it's an emulator but

675
00:27:34,870 --> 00:27:36,990
now we are also printing the locks

676
00:27:36,990 --> 00:27:40,029
here's the emulator and as soon as I

677
00:27:40,029 --> 00:27:42,520
launch this both parts will be connected

678
00:27:42,520 --> 00:27:44,559
to each other and boom there we are so

679
00:27:44,559 --> 00:27:47,590
we can eval simple expressions 2+2 well

680
00:27:47,590 --> 00:27:49,330
that's not really surprising but if I

681
00:27:49,330 --> 00:27:51,340
lock something that log output doesn't

682
00:27:51,340 --> 00:27:53,260
appear on the left hand side on my node

683
00:27:53,260 --> 00:27:54,940
server but it's actually logged in the

684
00:27:54,940 --> 00:27:58,840
context of of the watch and because this

685
00:27:58,840 --> 00:28:01,600
is really a rocky application I can also

686
00:28:01,600 --> 00:28:03,610
do everything we saw previously in the

687
00:28:03,610 --> 00:28:05,890
source code so I'm now registering an

688
00:28:05,890 --> 00:28:08,440
event handler that whenever it fires it

689
00:28:08,440 --> 00:28:12,130
prints hello Jess conf Iceland obviously

690
00:28:12,130 --> 00:28:13,659
that doesn't fire immediately because

691
00:28:13,659 --> 00:28:16,149
nothing are told it to redraw but I'm

692
00:28:16,149 --> 00:28:17,919
requesting now every draw and boom here

693
00:28:17,919 --> 00:28:20,500
we are so this is really a node server

694
00:28:20,500 --> 00:28:23,320
talking over the phone and bluetooth to

695
00:28:23,320 --> 00:28:25,690
the watch printing something and Intel

696
00:28:25,690 --> 00:28:30,159
terrific so we started a bit late sorry

697
00:28:30,159 --> 00:28:31,419
I can you tell me how much time do we

698
00:28:31,419 --> 00:28:41,169
have left awesome it's enough for me so

699
00:28:41,169 --> 00:28:42,970
for the next thing I actually want to do

700
00:28:42,970 --> 00:28:45,970
it for real and a live demo them because

701
00:28:45,970 --> 00:28:48,250
like you saw that installing these

702
00:28:48,250 --> 00:28:51,879
applications take some time because we

703
00:28:51,879 --> 00:28:53,649
still do the same tool chain we

704
00:28:53,649 --> 00:28:55,960
technically still build a pebble

705
00:28:55,960 --> 00:28:57,730
application and under the hood there's

706
00:28:57,730 --> 00:29:00,639
still a tiny little piece of see that

707
00:29:00,639 --> 00:29:03,190
does nothing but telling the system okay

708
00:29:03,190 --> 00:29:04,990
are cool I'm standard compliant RSV

709
00:29:04,990 --> 00:29:06,399
application but you know what I don't

710
00:29:06,399 --> 00:29:08,980
want to do anything but evil the

711
00:29:08,980 --> 00:29:10,629
bytecode that's also part of my package

712
00:29:10,629 --> 00:29:12,850
which was magically done by this mind

713
00:29:12,850 --> 00:29:16,480
blowing and scripting thing before but

714
00:29:16,480 --> 00:29:18,009
what if we could shortcut that even

715
00:29:18,009 --> 00:29:20,980
further so we didn't know the other way

716
00:29:20,980 --> 00:29:22,690
round so what you see here is yet

717
00:29:22,690 --> 00:29:25,750
another watch face it's actually that is

718
00:29:25,750 --> 00:29:27,399
more or less the source code of our

719
00:29:27,399 --> 00:29:30,460
build and watch face and I can run this

720
00:29:30,460 --> 00:29:36,299
in the browser so let me open that here

721
00:29:36,299 --> 00:29:39,759
that is running in the browser although

722
00:29:39,759 --> 00:29:41,470
there's no like there's no pebble

723
00:29:41,470 --> 00:29:43,690
involved and you could say well that's

724
00:29:43,690 --> 00:29:46,210
not a problem because the AP Isaac

725
00:29:46,210 --> 00:29:48,519
handlers aren't they I can just draw to

726
00:29:48,519 --> 00:29:50,440
canvas and get the result well the

727
00:29:50,440 --> 00:29:52,120
problem with an environment environment

728
00:29:52,120 --> 00:29:54,250
like this is that you want to have pixel

729
00:29:54,250 --> 00:29:55,870
perfect results as you are developing

730
00:29:55,870 --> 00:29:58,360
because the resolution is so small and

731
00:29:58,360 --> 00:29:59,740
you really want to see all the quirks

732
00:29:59,740 --> 00:30:01,210
and all the bugs we introduced an hour

733
00:30:01,210 --> 00:30:04,419
platform so what this is is actually yes

734
00:30:04,419 --> 00:30:06,250
the original source code but it lives

735
00:30:06,250 --> 00:30:10,090
within an HTML page which uses a trans

736
00:30:10,090 --> 00:30:14,679
piled version of our firmware inside the

737
00:30:14,679 --> 00:30:16,990
browser so again we are leveraging and

738
00:30:16,990 --> 00:30:19,000
scripting here but this time we trust

739
00:30:19,000 --> 00:30:21,009
compiled the firmware to the application

740
00:30:21,009 --> 00:30:23,470
layer of our firmware to run inside of

741
00:30:23,470 --> 00:30:26,860
the browser so that we can talk to it in

742
00:30:26,860 --> 00:30:31,430
the browser

743
00:30:31,440 --> 00:30:34,019
and that gives me a fast feedback

744
00:30:34,019 --> 00:30:36,929
because I'm now in my ID and I can say

745
00:30:36,929 --> 00:30:39,000
you know what that black is a bit

746
00:30:39,000 --> 00:30:42,360
depressing let's make that yellow and if

747
00:30:42,360 --> 00:30:45,389
I though and if I make this and reload

748
00:30:45,389 --> 00:30:48,570
that page boom it's yellow and I can

749
00:30:48,570 --> 00:30:51,600
change that light to read reloaded and

750
00:30:51,600 --> 00:30:53,610
there we go and then this white is

751
00:30:53,610 --> 00:30:55,950
really hard to see and i'll make this

752
00:30:55,950 --> 00:30:59,460
black cool so that's that's where we are

753
00:30:59,460 --> 00:31:00,750
heading this is what we want to gain

754
00:31:00,750 --> 00:31:02,340
right this is the development we want to

755
00:31:02,340 --> 00:31:03,840
have but eventually we want to run it on

756
00:31:03,840 --> 00:31:05,429
the watch so let's do that I'm copy and

757
00:31:05,429 --> 00:31:07,590
pasting that into the ideally we saw

758
00:31:07,590 --> 00:31:11,789
before I'm pasting it here and then you

759
00:31:11,789 --> 00:31:13,500
can choose between different targets and

760
00:31:13,500 --> 00:31:16,080
now taking again the emulator and while

761
00:31:16,080 --> 00:31:17,909
I'm doing that to see that it actually

762
00:31:17,909 --> 00:31:20,639
works taking off the launch I have you

763
00:31:20,639 --> 00:31:24,690
on my wrist and put it on the video

764
00:31:24,690 --> 00:31:26,669
setup i have here on the right so this

765
00:31:26,669 --> 00:31:28,620
is a live camera this is actually you

766
00:31:28,620 --> 00:31:32,549
here in the back and i can put my watch

767
00:31:32,549 --> 00:31:34,769
here so that you can see the actual

768
00:31:34,769 --> 00:31:38,250
output and by then we we started the

769
00:31:38,250 --> 00:31:43,659
emulator have it all installed here and

770
00:31:43,669 --> 00:31:51,179
well live demos let's see do maybe make

771
00:31:51,179 --> 00:31:53,970
this black again sometimes the Radley

772
00:31:53,970 --> 00:31:55,649
doesn't if I just paste maybe it didn't

773
00:31:55,649 --> 00:31:57,960
understand that I was changing code and

774
00:31:57,960 --> 00:32:01,559
didn't recompile really so I'm now

775
00:32:01,559 --> 00:32:03,779
expecting red hands and a black

776
00:32:03,779 --> 00:32:10,289
background there we are okay cool so I'm

777
00:32:10,289 --> 00:32:13,620
changing that a bit more I'm saying ctx

778
00:32:13,620 --> 00:32:18,480
field style is yellow and then I'm

779
00:32:18,480 --> 00:32:26,250
saying ctx fill text hello Jess conf ice

780
00:32:26,250 --> 00:32:33,750
land at 1010 and I'm changing that to

781
00:32:33,750 --> 00:32:36,240
not talk I'm to an emulator but actually

782
00:32:36,240 --> 00:32:38,129
to the phone and that is again crazy

783
00:32:38,129 --> 00:32:43,309
what it does know is it understands that

784
00:32:43,309 --> 00:32:45,620
my phone using my pebble account is

785
00:32:45,620 --> 00:32:47,480
connected to the cloud it pushes the

786
00:32:47,480 --> 00:32:49,100
binary it compiled it on the cloud and

787
00:32:49,100 --> 00:32:51,620
it pushes it to the phone it talks by

788
00:32:51,620 --> 00:32:53,509
bluetooth to the watch deploys it there

789
00:32:53,509 --> 00:32:55,100
and what you see in the right hand side

790
00:32:55,100 --> 00:32:57,470
is still the old application but I think

791
00:32:57,470 --> 00:32:59,029
you got it it's now running on the watch

792
00:32:59,029 --> 00:33:02,149
so this is this is really the real thing

793
00:33:02,149 --> 00:33:04,370
you can write JavaScript modified and

794
00:33:04,370 --> 00:33:08,629
deploy it on a launch cool so with that

795
00:33:08,629 --> 00:33:13,820
I come back to my slides this was my

796
00:33:13,820 --> 00:33:18,350
backup what you just saw is JavaScript

797
00:33:18,350 --> 00:33:20,929
running on the watch it's really like

798
00:33:20,929 --> 00:33:22,940
the real thing it's your JavaScript your

799
00:33:22,940 --> 00:33:24,440
camera's code your events and everything

800
00:33:24,440 --> 00:33:27,470
right there if you are a pedal developer

801
00:33:27,470 --> 00:33:29,090
or I want to be deep apple developer and

802
00:33:29,090 --> 00:33:31,580
see scared you in the past go there try

803
00:33:31,580 --> 00:33:33,830
it out give us feedback it's it's

804
00:33:33,830 --> 00:33:36,230
available if you do something with

805
00:33:36,230 --> 00:33:38,269
embeddable devices and better devices

806
00:33:38,269 --> 00:33:41,029
and you have a hard time thinking that

807
00:33:41,029 --> 00:33:42,679
this is possible we have plenty of

808
00:33:42,679 --> 00:33:44,779
internal lack knowledge and learnings

809
00:33:44,779 --> 00:33:47,419
and I would love to talk to you if you

810
00:33:47,419 --> 00:33:48,649
just got here by accident actually

811
00:33:48,649 --> 00:33:50,330
wanted to watch the other presentation

812
00:33:50,330 --> 00:33:53,470
in the other room the message to you is

813
00:33:53,470 --> 00:33:56,269
you bet on the right horse javascript is

814
00:33:56,269 --> 00:33:59,450
like everywhere it reaches even like

815
00:33:59,450 --> 00:34:01,789
bound to those little devices and you

816
00:34:01,789 --> 00:34:03,200
can be sure that javascript will be

817
00:34:03,200 --> 00:34:04,940
around for a long time and there will be

818
00:34:04,940 --> 00:34:06,169
more and more devices for you to play

819
00:34:06,169 --> 00:34:11,549
with thanks

