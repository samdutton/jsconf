1
00:00:37,590 --> 00:00:40,150

it's really amazing to be able to speak

2
00:00:40,150 --> 00:00:41,890
with you all today so thank you for the

3
00:00:41,890 --> 00:00:45,310
opportunity this talk is really about

4
00:00:45,310 --> 00:00:47,880
package management for the browser and

5
00:00:47,880 --> 00:00:50,740
the reason why the focus is on es6

6
00:00:50,740 --> 00:00:56,350
modules Israeli because they currently

7
00:00:56,350 --> 00:00:58,960
been drafted into the es6 specification

8
00:00:58,960 --> 00:01:03,610
and they're being reviewed right now so

9
00:01:03,610 --> 00:01:08,170
it's it's something on the way and the

10
00:01:08,170 --> 00:01:09,789
reason why I first got interested in es6

11
00:01:09,789 --> 00:01:12,640
modules myself was because I got very

12
00:01:12,640 --> 00:01:13,929
frustrated with the fact that we have

13
00:01:13,929 --> 00:01:16,539
all these different module formats and

14
00:01:16,539 --> 00:01:18,490
the common jeaious in global scripts I

15
00:01:18,490 --> 00:01:20,170
just wanted to see if there was a way

16
00:01:20,170 --> 00:01:22,149
that we could unify these and it's very

17
00:01:22,149 --> 00:01:24,219
much something that es6 is bringing to

18
00:01:24,219 --> 00:01:26,289
javascript through the specification

19
00:01:26,289 --> 00:01:30,009
it's it's a specified module syntax and

20
00:01:30,009 --> 00:01:33,310
it's it's built to support bridging the

21
00:01:33,310 --> 00:01:34,780
different module formats we have today

22
00:01:34,780 --> 00:01:39,009
so I've got a lot of hopes for that at

23
00:01:39,009 --> 00:01:42,639
the same time in the process it's it's a

24
00:01:42,639 --> 00:01:44,709
whole new way to reconsider what we what

25
00:01:44,709 --> 00:01:46,149
we want to think about in terms of

26
00:01:46,149 --> 00:01:49,450
package management for the browser so so

27
00:01:49,450 --> 00:01:51,399
that's what really excites me about es6

28
00:01:51,399 --> 00:01:54,490
modules at the moment the project I want

29
00:01:54,490 --> 00:01:57,369
to show you is called JSP m and it's an

30
00:01:57,369 --> 00:01:59,759
experimental project exploring what's

31
00:01:59,759 --> 00:02:01,990
package management for the browser can

32
00:02:01,990 --> 00:02:06,399
be and the the starting point for this

33
00:02:06,399 --> 00:02:10,240
idea was let's look at a package manager

34
00:02:10,240 --> 00:02:12,660
for the es6 module loader

35
00:02:12,660 --> 00:02:14,550
think about where we want to package

36
00:02:14,550 --> 00:02:16,980
management to be where it could be and

37
00:02:16,980 --> 00:02:19,440
explore that and and the core package

38
00:02:19,440 --> 00:02:20,640
might into an idea you want to start

39
00:02:20,640 --> 00:02:22,440
with is that installing something you

40
00:02:22,440 --> 00:02:24,660
should just do a one-line install and a

41
00:02:24,660 --> 00:02:26,820
one-line require so anything more than

42
00:02:26,820 --> 00:02:28,410
that and you've added unnecessary

43
00:02:28,410 --> 00:02:31,950
complexity and I think the argument is

44
00:02:31,950 --> 00:02:33,900
that to really get to that point where

45
00:02:33,900 --> 00:02:35,670
you can have a single line required and

46
00:02:35,670 --> 00:02:38,850
a single line install you need to have a

47
00:02:38,850 --> 00:02:40,350
package manager that understands the

48
00:02:40,350 --> 00:02:43,500
loader so by having a package manager

49
00:02:43,500 --> 00:02:45,000
that knows how the loader behaves you

50
00:02:45,000 --> 00:02:46,170
avoid all the problems around

51
00:02:46,170 --> 00:02:49,500
configuration friction so that's the

52
00:02:49,500 --> 00:02:54,650
really the core idea so so let's go into

53
00:02:54,650 --> 00:02:56,760
the first thing we need is a module

54
00:02:56,760 --> 00:02:58,650
loader so how can we actually start

55
00:02:58,650 --> 00:03:01,740
using this es6 module loader today well

56
00:03:01,740 --> 00:03:04,500
there's a polyfill called the ESX module

57
00:03:04,500 --> 00:03:07,050
loader party votes on github and it's

58
00:03:07,050 --> 00:03:09,270
it's a complete polyfill for the way

59
00:03:09,270 --> 00:03:11,490
that the es6 module loader specification

60
00:03:11,490 --> 00:03:15,360
is written right now so that actually

61
00:03:15,360 --> 00:03:17,340
allows us to start working with es6

62
00:03:17,340 --> 00:03:20,700
modules today in the browser and no J's

63
00:03:20,700 --> 00:03:25,350
on the server it's a seven kilobyte

64
00:03:25,350 --> 00:03:27,840
polyfill so it's actually suitable for

65
00:03:27,840 --> 00:03:33,180
production so just to explain what it

66
00:03:33,180 --> 00:03:35,640
does it obviously gives us support for

67
00:03:35,640 --> 00:03:37,470
the module syntax like you can see here

68
00:03:37,470 --> 00:03:41,520
and but the really key thing that the

69
00:03:41,520 --> 00:03:43,050
spec authors have done is they've

70
00:03:43,050 --> 00:03:47,540
created this module loader pipeline so

71
00:03:47,540 --> 00:03:49,770
just to explain how it works a little

72
00:03:49,770 --> 00:03:52,790
bit that they've they based it on this

73
00:03:52,790 --> 00:03:57,720
extensible web principles and the idea

74
00:03:57,720 --> 00:03:59,010
is that they've solved the really hard

75
00:03:59,010 --> 00:04:02,310
problems around modules things like how

76
00:04:02,310 --> 00:04:04,260
to deal with circular references how to

77
00:04:04,260 --> 00:04:06,690
deal with interrupts between AMD and es6

78
00:04:06,690 --> 00:04:09,060
and common J's but then they've they've

79
00:04:09,060 --> 00:04:10,950
left the exact solutions to those

80
00:04:10,950 --> 00:04:14,730
problems up to hooks in the spec so we

81
00:04:14,730 --> 00:04:16,380
have these loader hooks normalized

82
00:04:16,380 --> 00:04:18,620
located fetch translate instantiate and

83
00:04:18,620 --> 00:04:20,790
most users don't come up against the

84
00:04:20,790 --> 00:04:23,370
hook but but the point is that you can

85
00:04:23,370 --> 00:04:25,160
construct

86
00:04:25,160 --> 00:04:28,560
customized the es6 module loader with

87
00:04:28,560 --> 00:04:30,900
with new functionality and and how to

88
00:04:30,900 --> 00:04:33,870
interpret modules so for example if i if

89
00:04:33,870 --> 00:04:36,240
i customize the fetch hook i can

90
00:04:36,240 --> 00:04:38,550
customize how to fetch jquery in the

91
00:04:38,550 --> 00:04:41,910
example above in the browser your fetch

92
00:04:41,910 --> 00:04:44,580
hook would be an HTTP request get

93
00:04:44,580 --> 00:04:47,310
request and in the on ojs it would be an

94
00:04:47,310 --> 00:04:50,280
FS read file maybe you want it to be an

95
00:04:50,280 --> 00:04:51,840
FS start read file and if it doesn't

96
00:04:51,840 --> 00:04:53,580
exist you loop through the node modules

97
00:04:53,580 --> 00:04:55,920
folder so it's it's opened up those

98
00:04:55,920 --> 00:04:57,900
exact implementations through these

99
00:04:57,900 --> 00:05:02,880
hooks to actually use this loader in the

100
00:05:02,880 --> 00:05:05,850
browser we need an initial version of

101
00:05:05,850 --> 00:05:06,450
the hooks

102
00:05:06,450 --> 00:05:08,400
that'll work in the browser so we need

103
00:05:08,400 --> 00:05:10,020
to have that fetch hook implemented in

104
00:05:10,020 --> 00:05:12,030
all the rest and that's the system

105
00:05:12,030 --> 00:05:14,220
browser loader and it's actually a

106
00:05:14,220 --> 00:05:17,280
separate specification so the the system

107
00:05:17,280 --> 00:05:18,870
browser loader is currently based on a

108
00:05:18,870 --> 00:05:22,080
mozilla sudo implementation and it's a

109
00:05:22,080 --> 00:05:24,060
promise of space loader if you are

110
00:05:24,060 --> 00:05:26,910
familiar with AMD loaders it is exactly

111
00:05:26,910 --> 00:05:29,610
the same sort of usage apart from the

112
00:05:29,610 --> 00:05:31,890
fact that it's promises based you can

113
00:05:31,890 --> 00:05:33,540
basically load module names you can load

114
00:05:33,540 --> 00:05:35,970
es6 modules and this is given to you by

115
00:05:35,970 --> 00:05:37,800
the polyfill T is six module little

116
00:05:37,800 --> 00:05:41,970
polyfill and then I started this project

117
00:05:41,970 --> 00:05:44,430
called system J s and the idea was

118
00:05:44,430 --> 00:05:47,670
system jeaious was we've got this basic

119
00:05:47,670 --> 00:05:50,010
loader that can load es6 but we want to

120
00:05:50,010 --> 00:05:51,150
make it something useful that we can

121
00:05:51,150 --> 00:05:53,550
actually use today we've got the ability

122
00:05:53,550 --> 00:05:55,500
to support MD common just in Global's

123
00:05:55,500 --> 00:05:57,570
let's start doing that so I started

124
00:05:57,570 --> 00:05:59,790
creating compatibility layers for the

125
00:05:59,790 --> 00:06:03,180
loader to actually load MD load common

126
00:06:03,180 --> 00:06:05,010
J's and and dealing with the edge cases

127
00:06:05,010 --> 00:06:07,110
like things like circular references and

128
00:06:07,110 --> 00:06:08,610
common J's circular references act

129
00:06:08,610 --> 00:06:10,680
differently to MD circular references

130
00:06:10,680 --> 00:06:14,550
and getting all that in as I say it's

131
00:06:14,550 --> 00:06:16,830
it's it's very much what you would get

132
00:06:16,830 --> 00:06:18,570
if you took in one of the existing AMD

133
00:06:18,570 --> 00:06:20,880
loaders and rebuilt it on top of the cr6

134
00:06:20,880 --> 00:06:22,170
hooks

135
00:06:22,170 --> 00:06:24,270
it's got map it's got shim it's got a

136
00:06:24,270 --> 00:06:27,890
plug-in system for asset loading and

137
00:06:27,890 --> 00:06:29,760
bundles which was a new feature in

138
00:06:29,760 --> 00:06:31,770
requires yes and then there's other

139
00:06:31,770 --> 00:06:34,140
thing called versions which I explained

140
00:06:34,140 --> 00:06:37,050
a bit more later

141
00:06:37,060 --> 00:06:40,430
so yeah this is system dis it's a it's a

142
00:06:40,430 --> 00:06:42,350
seven killer by minified and gzip

143
00:06:42,350 --> 00:06:43,970
project so together with the module

144
00:06:43,970 --> 00:06:45,710
loader you're getting 14 kilobytes in

145
00:06:45,710 --> 00:06:47,030
production you've actually got this

146
00:06:47,030 --> 00:06:49,790
dynamic loader based on the technologies

147
00:06:49,790 --> 00:06:52,100
that are specified for the loader in the

148
00:06:52,100 --> 00:06:54,020
future that we can use today through

149
00:06:54,020 --> 00:06:57,710
these polyfill techniques so that's the

150
00:06:57,710 --> 00:07:00,350
lowdown the other side of it now is

151
00:07:00,350 --> 00:07:02,090
package management so if you've got this

152
00:07:02,090 --> 00:07:04,190
loader can we create a package manager

153
00:07:04,190 --> 00:07:06,139
to really simplify the process of using

154
00:07:06,139 --> 00:07:09,020
it and the first thing I want to think

155
00:07:09,020 --> 00:07:10,400
about is the sort of time scale you're

156
00:07:10,400 --> 00:07:13,510
looking at four years six is actually

157
00:07:13,510 --> 00:07:18,050
very similar time scale to HTTP two and

158
00:07:18,050 --> 00:07:21,500
and widespread speedy and HTTP 2 so you

159
00:07:21,500 --> 00:07:24,560
actually in this kind of thinking

160
00:07:24,560 --> 00:07:27,530
bundling is an anti-pattern we want to

161
00:07:27,530 --> 00:07:29,390
be thinking beyond bundling and and

162
00:07:29,390 --> 00:07:30,530
that's there's a good reason why

163
00:07:30,530 --> 00:07:33,290
bundling isn't catered for in the es6

164
00:07:33,290 --> 00:07:37,610
specifc specification because it's it's

165
00:07:37,610 --> 00:07:38,750
it's something we're actually going to

166
00:07:38,750 --> 00:07:40,700
move away from over time and yes it will

167
00:07:40,700 --> 00:07:42,590
be a while still it'll be a few years

168
00:07:42,590 --> 00:07:46,600
but in that's where we want to be and

169
00:07:46,600 --> 00:07:48,650
not only will that make our build

170
00:07:48,650 --> 00:07:51,500
simpler but the other benefit you get is

171
00:07:51,500 --> 00:07:54,800
fine grained caching so if you have a

172
00:07:54,800 --> 00:07:56,270
large application you have a build of

173
00:07:56,270 --> 00:07:59,510
that application you have to resend a

174
00:07:59,510 --> 00:08:01,789
lot of assets again just when you make a

175
00:08:01,789 --> 00:08:03,560
minor change if you can have fine grain

176
00:08:03,560 --> 00:08:06,950
caching with version URLs you can just

177
00:08:06,950 --> 00:08:08,510
update the versions that have changed

178
00:08:08,510 --> 00:08:11,270
and the other assets remain in the cache

179
00:08:11,270 --> 00:08:13,840
of your users so it is much less

180
00:08:13,840 --> 00:08:17,930
redownload in you do upgrades but in

181
00:08:17,930 --> 00:08:19,520
order to properly take advantage of this

182
00:08:19,520 --> 00:08:22,610
we want to allow unique version URLs you

183
00:08:22,610 --> 00:08:24,440
want to have a node modules folder that

184
00:08:24,440 --> 00:08:26,900
you can drag onto your CDN host it as

185
00:08:26,900 --> 00:08:29,270
your static assets but have those URLs

186
00:08:29,270 --> 00:08:31,789
versioned so that your users can get

187
00:08:31,789 --> 00:08:34,039
them cached and you can just update the

188
00:08:34,039 --> 00:08:37,760
versions and the URLs and then and then

189
00:08:37,760 --> 00:08:39,469
the real high problem around package

190
00:08:39,469 --> 00:08:42,080
management is is obviously the

191
00:08:42,080 --> 00:08:43,839
dependency management principles and

192
00:08:43,839 --> 00:08:47,839
it's not enough to just assume that you

193
00:08:47,839 --> 00:08:49,279
can solve every version count

194
00:08:49,279 --> 00:08:50,689
you will reach a point where you have

195
00:08:50,689 --> 00:08:52,279
two dependencies that you've loaded into

196
00:08:52,279 --> 00:08:56,089
the page and they're both dependent on

197
00:08:56,089 --> 00:08:57,740
another dependency but they need

198
00:08:57,740 --> 00:08:59,480
different versions of it and you have a

199
00:08:59,480 --> 00:09:01,730
version conflict and when that happens

200
00:09:01,730 --> 00:09:04,939
what are you going to do you can't let

201
00:09:04,939 --> 00:09:06,920
that break down the entire workflow if

202
00:09:06,920 --> 00:09:09,199
you really want to get a proper package

203
00:09:09,199 --> 00:09:10,519
manager going you need to be able to

204
00:09:10,519 --> 00:09:12,800
deal with version conflicts and and the

205
00:09:12,800 --> 00:09:14,209
way to do that is to have the multi

206
00:09:14,209 --> 00:09:15,559
version support you have to be able to

207
00:09:15,559 --> 00:09:17,480
run two versions of the same library at

208
00:09:17,480 --> 00:09:19,970
the same time and then as much as

209
00:09:19,970 --> 00:09:22,279
possible minimise that duplication so we

210
00:09:22,279 --> 00:09:23,870
know the range is that every package is

211
00:09:23,870 --> 00:09:26,240
allowed to be installed in two and then

212
00:09:26,240 --> 00:09:29,360
we try to minimize the duplication of

213
00:09:29,360 --> 00:09:30,860
versions and find the best version

214
00:09:30,860 --> 00:09:32,779
solution that's going to going to work

215
00:09:32,779 --> 00:09:35,149
for that the other thing we can do is

216
00:09:35,149 --> 00:09:37,670
use cember and the more people can use

217
00:09:37,670 --> 00:09:39,470
cember the less duplication there will

218
00:09:39,470 --> 00:09:41,420
be assembler is nothing more than a

219
00:09:41,420 --> 00:09:43,209
commitment to backwards compatibility

220
00:09:43,209 --> 00:09:45,649
and and if you think about that when

221
00:09:45,649 --> 00:09:46,999
you're building your API is and if we

222
00:09:46,999 --> 00:09:47,990
think about that is we're writing

223
00:09:47,990 --> 00:09:50,420
software this whole process will be a

224
00:09:50,420 --> 00:09:52,999
lot easier for everyone because when I'm

225
00:09:52,999 --> 00:09:55,750
in a development mode and I'm installing

226
00:09:55,750 --> 00:09:58,309
dependencies into my project I can

227
00:09:58,309 --> 00:09:59,870
install them to the latest versions and

228
00:09:59,870 --> 00:10:03,709
know that the API is maintaining their

229
00:10:03,709 --> 00:10:06,610
contracts but even with all these things

230
00:10:06,610 --> 00:10:09,199
you will still still reach a point where

231
00:10:09,199 --> 00:10:11,000
dependencies don't quite match up to

232
00:10:11,000 --> 00:10:12,649
what you want you'll be one library that

233
00:10:12,649 --> 00:10:14,389
needs jQuery one and another library

234
00:10:14,389 --> 00:10:16,639
that needs jQuery two and you can't

235
00:10:16,639 --> 00:10:19,550
expect the system to resolve everything

236
00:10:19,550 --> 00:10:21,649
for you at some point you want to just

237
00:10:21,649 --> 00:10:23,720
be able to manually override everything

238
00:10:23,720 --> 00:10:25,069
that's going on and say well I just want

239
00:10:25,069 --> 00:10:26,300
to make sure that the only version of

240
00:10:26,300 --> 00:10:29,420
jQuery in this application is jQuery 2.1

241
00:10:29,420 --> 00:10:31,339
and you want to be able to override that

242
00:10:31,339 --> 00:10:34,220
at a global level so the idea was to

243
00:10:34,220 --> 00:10:37,220
have a central dependency manifest a

244
00:10:37,220 --> 00:10:38,959
single place where your entire

245
00:10:38,959 --> 00:10:40,819
dependencies are mapped out that you can

246
00:10:40,819 --> 00:10:44,059
kind of control and and have have final

247
00:10:44,059 --> 00:10:46,970
say over the whole process so just to

248
00:10:46,970 --> 00:10:49,579
summarise looking at package management

249
00:10:49,579 --> 00:10:51,920
for an es6 module loader so trying to

250
00:10:51,920 --> 00:10:55,220
build on the principles of tomorrow and

251
00:10:55,220 --> 00:10:56,740
make something that we can use today

252
00:10:56,740 --> 00:10:58,910
support existing modular formats and

253
00:10:58,910 --> 00:11:01,759
registries flat multi version support so

254
00:11:01,759 --> 00:11:02,920
you get the fine-grained cache

255
00:11:02,920 --> 00:11:06,950
benefits of HTTP to a central dependency

256
00:11:06,950 --> 00:11:08,870
manifest so that the developer has final

257
00:11:08,870 --> 00:11:12,020
say over the full dependency tree but

258
00:11:12,020 --> 00:11:13,700
then allow production bundling today so

259
00:11:13,700 --> 00:11:15,410
we have those workflows that we can

260
00:11:15,410 --> 00:11:19,430
actually use modules today so I'm gonna

261
00:11:19,430 --> 00:11:21,860
dive straight into a demo and show you

262
00:11:21,860 --> 00:11:23,029
exactly the sort of thing I'm talking

263
00:11:23,029 --> 00:11:37,560
about with us

264
00:11:37,570 --> 00:11:40,570
so when I was thinking of a demo the

265
00:11:40,570 --> 00:11:42,329
sort of thing I was thinking of was

266
00:11:42,329 --> 00:11:45,579
something that it resembles a future

267
00:11:45,579 --> 00:11:47,320
workflow so something that we want to be

268
00:11:47,320 --> 00:11:50,920
doing in the browser and a good example

269
00:11:50,920 --> 00:11:53,920
seems to be web components using an es6

270
00:11:53,920 --> 00:11:57,480
module so first we need to install JSP m

271
00:11:57,480 --> 00:12:01,149
and we can do that with NPM this talk

272
00:12:01,149 --> 00:12:02,709
does use the internet so if you can

273
00:12:02,709 --> 00:12:04,360
please take it easy on the Wi-Fi that

274
00:12:04,360 --> 00:12:06,130
were you really appreciated

275
00:12:06,130 --> 00:12:09,970
I can now install this components with

276
00:12:09,970 --> 00:12:14,620
JSP m install and I actually hosted this

277
00:12:14,620 --> 00:12:16,899
component on github so I'm gonna install

278
00:12:16,899 --> 00:12:28,360
it straight off of github so the naming

279
00:12:28,360 --> 00:12:30,130
system here is is a consistent naming

280
00:12:30,130 --> 00:12:33,880
system that is used throughout and when

281
00:12:33,880 --> 00:12:35,589
I write this the first thing it asks me

282
00:12:35,589 --> 00:12:37,630
to do is set up a local package to JSON

283
00:12:37,630 --> 00:12:40,029
for the project where to download all

284
00:12:40,029 --> 00:12:41,649
the dependencies into this JSP M

285
00:12:41,649 --> 00:12:44,199
packages folder the config file to

286
00:12:44,199 --> 00:12:47,230
create then it goes to github it checks

287
00:12:47,230 --> 00:12:49,180
the tags looks for the latest cember

288
00:12:49,180 --> 00:12:51,010
tags uses that as the stable version

289
00:12:51,010 --> 00:12:54,699
installs the dependencies downloads the

290
00:12:54,699 --> 00:12:57,190
es6 module loader polyfill the system

291
00:12:57,190 --> 00:12:59,560
J's loader that contains the AMD common

292
00:12:59,560 --> 00:13:03,010
J's compatibility layers and that's our

293
00:13:03,010 --> 00:13:06,100
single line install if I want to

294
00:13:06,100 --> 00:13:08,680
actually use this now on the page let me

295
00:13:08,680 --> 00:13:17,860
just create a test page to use it so I'm

296
00:13:17,860 --> 00:13:20,199
just going to load in the system J's

297
00:13:20,199 --> 00:13:23,529
loader which is was downloaded as the

298
00:13:23,529 --> 00:13:27,189
JSP and packages folder and it's a

299
00:13:27,189 --> 00:13:30,370
versioned loader file this will

300
00:13:30,370 --> 00:13:32,050
automatically include the polyfill

301
00:13:32,050 --> 00:13:33,610
itself so we don't need to do anything

302
00:13:33,610 --> 00:13:36,189
more than that and now what I have is

303
00:13:36,189 --> 00:13:38,829
the system browser loader extended with

304
00:13:38,829 --> 00:13:40,930
the functionality we want so I can now

305
00:13:40,930 --> 00:13:43,630
use system that import and import year

306
00:13:43,630 --> 00:13:47,649
six and different modules so for this

307
00:13:47,649 --> 00:13:48,790
application I'm gonna have a main

308
00:13:48,790 --> 00:13:50,290
application entry point that I'm going

309
00:13:50,290 --> 00:13:51,010
to load

310
00:13:51,010 --> 00:13:53,740
so I'm just gonna say load app and

311
00:13:53,740 --> 00:13:58,090
that's it and that'll load app from the

312
00:13:58,090 --> 00:14:00,580
local folder so I'm gonna edit an app

313
00:14:00,580 --> 00:14:04,890
dot J's file and I installed this

314
00:14:04,890 --> 00:14:07,480
components as github guy Bedford

315
00:14:07,480 --> 00:14:10,420
markdown components the same name that I

316
00:14:10,420 --> 00:14:12,850
used to install is the same name that I

317
00:14:12,850 --> 00:14:15,760
want to use to require so common J's

318
00:14:15,760 --> 00:14:16,990
really is the simplest way to write

319
00:14:16,990 --> 00:14:18,610
modules so I'm just going to do a comedy

320
00:14:18,610 --> 00:14:22,270
require in this example so I'm going to

321
00:14:22,270 --> 00:14:24,100
require the exact same name I'm not

322
00:14:24,100 --> 00:14:26,110
thinking about versions or any of those

323
00:14:26,110 --> 00:14:30,820
problems and so now we've loaded the the

324
00:14:30,820 --> 00:14:33,610
components and to actually use this

325
00:14:33,610 --> 00:14:35,800
component it's a it's a web component

326
00:14:35,800 --> 00:14:40,110
and what it does is it passes markdown

327
00:14:40,110 --> 00:14:44,080
within the web component tag and also it

328
00:14:44,080 --> 00:14:49,930
also features syntax highlighting so let

329
00:14:49,930 --> 00:15:04,689
me just show you this

330
00:15:04,699 --> 00:15:06,720
so I'm just going to create a code

331
00:15:06,720 --> 00:15:20,380
example as well

332
00:15:20,390 --> 00:15:24,620
right and oh I've also got to include

333
00:15:24,620 --> 00:15:27,160
there was a generated configuration file

334
00:15:27,160 --> 00:15:30,380
so I need to include the generation the

335
00:15:30,380 --> 00:15:35,010
generated configuration file in the page

336
00:15:35,020 --> 00:15:37,790
so that's that's kind of all we need to

337
00:15:37,790 --> 00:15:40,130
do and hopefully it'll work so is the

338
00:15:40,130 --> 00:15:42,860
one-line install one-line require and

339
00:15:42,860 --> 00:15:46,130
there it is so that's a markdown

340
00:15:46,130 --> 00:15:53,080
component thank you

341
00:15:53,090 --> 00:15:55,040
it's yeah let me let me try and explain

342
00:15:55,040 --> 00:15:57,530
exactly what's going on here and how

343
00:15:57,530 --> 00:16:02,480
this is all fitting together when I when

344
00:16:02,480 --> 00:16:04,910
I first downloaded the components it

345
00:16:04,910 --> 00:16:06,920
downloaded into that JSP and packages

346
00:16:06,920 --> 00:16:10,190
folder into into a versioned folder so

347
00:16:10,190 --> 00:16:12,380
it's J's pin package --is github for

348
00:16:12,380 --> 00:16:13,700
everything that was loaded from github

349
00:16:13,700 --> 00:16:19,520
and then just the name of the repo with

350
00:16:19,520 --> 00:16:23,810
the version so it's a version URL and if

351
00:16:23,810 --> 00:16:25,700
you look inside this folder we have

352
00:16:25,700 --> 00:16:27,740
exactly the same files that are on

353
00:16:27,740 --> 00:16:34,250
github so here's the github repo and the

354
00:16:34,250 --> 00:16:35,810
two files I want to show you is packaged

355
00:16:35,810 --> 00:16:39,280
the JSON and markdown component jeaious

356
00:16:39,280 --> 00:16:41,830
if we look at the package that jason

357
00:16:41,830 --> 00:16:44,600
we're actually using the package JSON to

358
00:16:44,600 --> 00:16:46,850
declare the dependencies and the way we

359
00:16:46,850 --> 00:16:49,510
can do this without conflict with NPM is

360
00:16:49,510 --> 00:16:52,610
by interpreting the dependencies in

361
00:16:52,610 --> 00:16:55,010
combination with a registry property in

362
00:16:55,010 --> 00:16:56,260
the package so Jason

363
00:16:56,260 --> 00:16:59,780
so when J's PMC's that you've got

364
00:16:59,780 --> 00:17:02,210
registry JSP m it knows it can interpret

365
00:17:02,210 --> 00:17:04,430
the dependencies if you do not like the

366
00:17:04,430 --> 00:17:06,550
idea of overwriting the dependencies

367
00:17:06,550 --> 00:17:09,709
speak to me em but you can actually also

368
00:17:09,709 --> 00:17:12,980
use the prefix so we could have a JSP m

369
00:17:12,980 --> 00:17:15,310
prefix within the package to JSON and

370
00:17:15,310 --> 00:17:18,709
that would also work and then now that

371
00:17:18,709 --> 00:17:20,180
we we know that we're dealing with the

372
00:17:20,180 --> 00:17:22,250
JSP m registry the dependencies are

373
00:17:22,250 --> 00:17:24,410
listed first by the name that they're

374
00:17:24,410 --> 00:17:27,140
required by within the code of this

375
00:17:27,140 --> 00:17:29,780
package so whenever this package refers

376
00:17:29,780 --> 00:17:32,090
to showdown this is what it's referring

377
00:17:32,090 --> 00:17:33,980
to so that that's what the dependencies

378
00:17:33,980 --> 00:17:36,950
just as you'd expect showdown there's

379
00:17:36,950 --> 00:17:38,660
the markdown passing and it's also

380
00:17:38,660 --> 00:17:40,790
loaded from github Samba compatible with

381
00:17:40,790 --> 00:17:43,820
version or point 3.1 prism does our

382
00:17:43,820 --> 00:17:46,010
syntax highlighting and it's also loaded

383
00:17:46,010 --> 00:17:48,520
from github at the github pages branch

384
00:17:48,520 --> 00:17:51,440
which is the branch that Lee ever uses

385
00:17:51,440 --> 00:17:55,520
to publish it on I don't have to enter

386
00:17:55,520 --> 00:17:57,380
in the full path to prism because it's

387
00:17:57,380 --> 00:18:00,170
actually in there's there's a shortening

388
00:18:00,170 --> 00:18:03,500
service that JSP offers just like the

389
00:18:03,500 --> 00:18:06,290
bio registry so it stores short names

390
00:18:06,290 --> 00:18:07,910
against their longer name so when there

391
00:18:07,910 --> 00:18:11,000
is no name given with the github colon

392
00:18:11,000 --> 00:18:12,740
part at the beginning it knows to just

393
00:18:12,740 --> 00:18:15,050
look it up from the the the short list

394
00:18:15,050 --> 00:18:17,540
registry and then we have this CSS

395
00:18:17,540 --> 00:18:19,760
module as well so those are the three

396
00:18:19,760 --> 00:18:26,240
dependencies and here's the code so this

397
00:18:26,240 --> 00:18:28,700
is the component the first thing to note

398
00:18:28,700 --> 00:18:31,700
is that web components are really nice

399
00:18:31,700 --> 00:18:36,170
to write in es6 modules because of the

400
00:18:36,170 --> 00:18:38,480
fact that when you run document register

401
00:18:38,480 --> 00:18:39,680
element what you're actually running it

402
00:18:39,680 --> 00:18:42,950
against is a class so class you're going

403
00:18:42,950 --> 00:18:44,450
really really helps with that so we can

404
00:18:44,450 --> 00:18:46,880
create this class x markdown component

405
00:18:46,880 --> 00:18:48,350
normally we'd have to have an object

406
00:18:48,350 --> 00:18:50,390
with a prototype that has a created

407
00:18:50,390 --> 00:18:52,940
callback property the class sugar just

408
00:18:52,940 --> 00:18:55,370
makes that a lot nice that's right we

409
00:18:55,370 --> 00:18:57,500
can extend the HTML element very simply

410
00:18:57,500 --> 00:19:00,530
and that gives us the this stock query

411
00:19:00,530 --> 00:19:02,300
selector all that we call all over here

412
00:19:02,300 --> 00:19:05,300
which is really convenient and then we

413
00:19:05,300 --> 00:19:08,030
just do the the syntax parsing with a

414
00:19:08,030 --> 00:19:09,890
bit of really bad whitespace

415
00:19:09,890 --> 00:19:13,340
manipulation using es6 features and then

416
00:19:13,340 --> 00:19:17,000
we do the the code highlighting so it's

417
00:19:17,000 --> 00:19:19,000
a relatively straightforward component

418
00:19:19,000 --> 00:19:20,990
but the thing i want to show you is that

419
00:19:20,990 --> 00:19:23,450
the imports so how are these imports

420
00:19:23,450 --> 00:19:26,720
working we're importing show down and

421
00:19:26,720 --> 00:19:28,880
we're importing prism and the name we're

422
00:19:28,880 --> 00:19:30,530
importing from is exactly the same name

423
00:19:30,530 --> 00:19:33,370
in the package to JSON dependencies

424
00:19:33,370 --> 00:19:35,960
showed um i think one of them is a

425
00:19:35,960 --> 00:19:38,510
global one of them is an MD module we

426
00:19:38,510 --> 00:19:39,770
don't need to we don't want to think

427
00:19:39,770 --> 00:19:41,240
about the in syrup and the point is that

428
00:19:41,240 --> 00:19:43,730
by allowing each package to configure

429
00:19:43,730 --> 00:19:47,400
itself you can avoid the in syrup issues

430
00:19:47,400 --> 00:19:49,620
and and and just get to a point where

431
00:19:49,620 --> 00:19:51,300
you could require from packages directly

432
00:19:51,300 --> 00:19:52,980
and that's really fundamental to that

433
00:19:52,980 --> 00:19:56,790
that zero friction approach and then the

434
00:19:56,790 --> 00:19:58,830
next thing we have is we import the CSS

435
00:19:58,830 --> 00:20:03,090
file this is the CSS file within prism

436
00:20:03,090 --> 00:20:06,780
to do the code highlighting style so

437
00:20:06,780 --> 00:20:09,030
we're actually injecting CSS within the

438
00:20:09,030 --> 00:20:12,270
module system the benefit of this is

439
00:20:12,270 --> 00:20:15,390
that I can deal with abstracted names in

440
00:20:15,390 --> 00:20:17,940
the file I can call it prism I don't

441
00:20:17,940 --> 00:20:20,190
need to think about where prism is what

442
00:20:20,190 --> 00:20:21,990
version it is and then I can actually

443
00:20:21,990 --> 00:20:24,840
start loading files from within that

444
00:20:24,840 --> 00:20:27,540
that folder again if you're familiar

445
00:20:27,540 --> 00:20:29,910
with AMD familiar with those kinds of

446
00:20:29,910 --> 00:20:32,460
loaders the the module names are exactly

447
00:20:32,460 --> 00:20:34,680
the same principle the reason why we're

448
00:20:34,680 --> 00:20:36,450
able to have these short names it's just

449
00:20:36,450 --> 00:20:38,010
map configure it's exactly the same

450
00:20:38,010 --> 00:20:42,000
ideas AMD and the way I'm loading CSS is

451
00:20:42,000 --> 00:20:44,100
a plugin just like you'd get a plug-in

452
00:20:44,100 --> 00:20:46,860
in an AMD loader the one thing I did was

453
00:20:46,860 --> 00:20:48,960
I moved the exclamation mark to the end

454
00:20:48,960 --> 00:20:50,940
so basically when it comes across an

455
00:20:50,940 --> 00:20:52,710
asset that has an exclamation mark in

456
00:20:52,710 --> 00:20:55,290
the name it reads the extension of the

457
00:20:55,290 --> 00:20:57,540
file and then it looks for a module with

458
00:20:57,540 --> 00:20:59,550
the same name as the extension and uses

459
00:20:59,550 --> 00:21:01,380
that to do the asset injection and that

460
00:21:01,380 --> 00:21:03,900
was the CSS module CSS is something

461
00:21:03,900 --> 00:21:05,670
really fundamental so potentially it can

462
00:21:05,670 --> 00:21:09,180
be brought into core at some point but

463
00:21:09,180 --> 00:21:11,010
because the way the injection works is

464
00:21:11,010 --> 00:21:12,600
still kind of developing it's nice to

465
00:21:12,600 --> 00:21:14,340
have it as an isolated module so it's

466
00:21:14,340 --> 00:21:17,070
not even really part of JSP m it's it's

467
00:21:17,070 --> 00:21:19,020
anyone can create their own plugins to

468
00:21:19,020 --> 00:21:22,830
do like template passing or other types

469
00:21:22,830 --> 00:21:25,140
of injection and the way the injection

470
00:21:25,140 --> 00:21:27,060
works is it simply injects a link tag

471
00:21:27,060 --> 00:21:29,070
against the head waits for the onload

472
00:21:29,070 --> 00:21:31,380
event and when the unload events fired

473
00:21:31,380 --> 00:21:34,110
that returns the fetcher in the loader

474
00:21:34,110 --> 00:21:36,450
hooks so plugins just override the load

475
00:21:36,450 --> 00:21:39,660
hooks of the ESX loader and then it's

476
00:21:39,660 --> 00:21:41,520
taken is loaded so none of this code

477
00:21:41,520 --> 00:21:44,280
here will run until that CSS has been

478
00:21:44,280 --> 00:21:45,930
injected into the head and completely

479
00:21:45,930 --> 00:21:48,510
finished loading and in that way you get

480
00:21:48,510 --> 00:21:50,070
this really nice dependency tree of

481
00:21:50,070 --> 00:21:52,980
multi asset types with the abstracted

482
00:21:52,980 --> 00:21:55,020
naming and its approach it's an approach

483
00:21:55,020 --> 00:21:57,540
that I really like you don't have to use

484
00:21:57,540 --> 00:21:59,309
it it's not it's not man

485
00:21:59,309 --> 00:22:02,419
but it would allow me to do the nice day

486
00:22:02,419 --> 00:22:13,679
all right so let's let's take make this

487
00:22:13,679 --> 00:22:16,980
site look a bit nicer what I want to do

488
00:22:16,980 --> 00:22:20,399
now is install bootstrap just to give it

489
00:22:20,399 --> 00:22:23,070
a bit bit more of a nicer theme so again

490
00:22:23,070 --> 00:22:24,299
I just want to install it by name I

491
00:22:24,299 --> 00:22:26,100
don't really I want to think any much

492
00:22:26,100 --> 00:22:28,289
more than that so I'm just gonna say

493
00:22:28,289 --> 00:22:32,229
Jess for install bootstrap and

494
00:22:32,239 --> 00:22:35,519
bootstraps also on github

495
00:22:35,519 --> 00:22:38,070
it's got releases on github so it

496
00:22:38,070 --> 00:22:39,239
actually downloads from the release

497
00:22:39,239 --> 00:22:41,159
archive but it does the same tag lookup

498
00:22:41,159 --> 00:22:42,690
works out the versions and all the rest

499
00:22:42,690 --> 00:22:46,559
and then for the dependencies the reason

500
00:22:46,559 --> 00:22:48,720
why bootstrap can install is because it

501
00:22:48,720 --> 00:22:50,669
does have some JSP m metadata in the

502
00:22:50,669 --> 00:22:54,299
package that JSON now that I'm installed

503
00:22:54,299 --> 00:22:57,929
bootstrap in my app file I need to

504
00:22:57,929 --> 00:22:59,700
require it so I'm just gonna say require

505
00:22:59,700 --> 00:23:04,019
bootstrap so it's the same name and then

506
00:23:04,019 --> 00:23:05,639
let's just see that we've got it in the

507
00:23:05,639 --> 00:23:19,350
page

508
00:23:19,360 --> 00:23:26,680
okay so there again injecting the CSS

509
00:23:26,680 --> 00:23:30,620
dynamically through the module loader

510
00:23:30,630 --> 00:23:33,730
alright so now we want to take this site

511
00:23:33,730 --> 00:23:35,920
and put it into production if you look

512
00:23:35,920 --> 00:23:37,570
at the network tab at the moment this is

513
00:23:37,570 --> 00:23:39,340
obviously not at all suitable for

514
00:23:39,340 --> 00:23:41,800
production we are passing es6

515
00:23:41,800 --> 00:23:44,080
dynamically in the browser so that the

516
00:23:44,080 --> 00:23:48,610
system jeaious is loading in tracer to

517
00:23:48,610 --> 00:23:50,530
do the parsing which itself is 500

518
00:23:50,530 --> 00:23:52,960
kilobytes there's a lot of stuff going

519
00:23:52,960 --> 00:23:54,760
on that we don't want to be happening in

520
00:23:54,760 --> 00:23:57,730
production we've got a 21 separate

521
00:23:57,730 --> 00:23:59,770
requests of all these files so how can

522
00:23:59,770 --> 00:24:02,050
we take this and make it something that

523
00:24:02,050 --> 00:24:03,220
we can actually put into production

524
00:24:03,220 --> 00:24:06,910
today and that can work so we do need to

525
00:24:06,910 --> 00:24:10,840
do a bundling approach for this so to

526
00:24:10,840 --> 00:24:14,280
make a bundle what I need to do is

527
00:24:14,280 --> 00:24:17,110
create a bundle of a specific module and

528
00:24:17,110 --> 00:24:19,240
in this case we have that app module

529
00:24:19,240 --> 00:24:21,460
entry point so I'm just gonna bundle app

530
00:24:21,460 --> 00:24:23,980
and again the naming system is exactly

531
00:24:23,980 --> 00:24:26,800
the same naming as you would use in your

532
00:24:26,800 --> 00:24:28,540
requires so I can actually bundle any

533
00:24:28,540 --> 00:24:31,080
module within my current required tree

534
00:24:31,080 --> 00:24:33,940
bundle app and that's called the file

535
00:24:33,940 --> 00:24:36,460
app build jeaious so that will go into

536
00:24:36,460 --> 00:24:39,400
app trace the dependencies and bundle

537
00:24:39,400 --> 00:24:40,660
everything together into one file

538
00:24:40,660 --> 00:24:44,710
transpiling the is-6 in cs5 and so that

539
00:24:44,710 --> 00:24:47,110
we have the build and then I need to

540
00:24:47,110 --> 00:24:50,200
include this in the page so I'm just

541
00:24:50,200 --> 00:24:55,780
gonna say include Apple J's because I

542
00:24:55,780 --> 00:24:57,670
use the new six component that used

543
00:24:57,670 --> 00:25:00,670
class syntax I actually need to include

544
00:25:00,670 --> 00:25:03,130
the tracer runtime as well it has a

545
00:25:03,130 --> 00:25:05,920
class helper called create class which I

546
00:25:05,920 --> 00:25:07,570
need to include through the tracer

547
00:25:07,570 --> 00:25:10,810
runtime so I need to add that ideally

548
00:25:10,810 --> 00:25:15,940
you wouldn't actually you ideally if I

549
00:25:15,940 --> 00:25:18,370
wasn't using es6 modules I wouldn't need

550
00:25:18,370 --> 00:25:20,260
to do this at all so if I was just using

551
00:25:20,260 --> 00:25:22,690
AMD and Collins yes this wouldn't be an

552
00:25:22,690 --> 00:25:31,879
issue

553
00:25:31,889 --> 00:25:35,110
okay so now if you look at the network

554
00:25:35,110 --> 00:25:42,639
tab the same the same code is now

555
00:25:42,639 --> 00:25:45,279
running in the page but we're only

556
00:25:45,279 --> 00:25:46,809
loading we're loading everything from

557
00:25:46,809 --> 00:25:47,710
the single bundle

558
00:25:47,710 --> 00:25:53,230
so that's transpiled er6 comma J is MD

559
00:25:53,230 --> 00:25:54,549
all running together in a single bundle

560
00:25:54,549 --> 00:25:56,590
in a way that supports all their

561
00:25:56,590 --> 00:26:02,590
circular references together and just to

562
00:26:02,590 --> 00:26:03,940
give you some idea of what it looks like

563
00:26:03,940 --> 00:26:07,750
it uses this two variations of system

564
00:26:07,750 --> 00:26:10,210
dot register and it's just kind of

565
00:26:10,210 --> 00:26:11,649
wrapped everything up in these wrappers

566
00:26:11,649 --> 00:26:14,820
so that's how it works

567
00:26:14,820 --> 00:26:19,600
all right then there's one other example

568
00:26:19,600 --> 00:26:23,490
I want to show you which is how we can

569
00:26:23,490 --> 00:26:28,090
load from other registries and and also

570
00:26:28,090 --> 00:26:29,379
what happens when you have deeper

571
00:26:29,379 --> 00:26:36,460
dependency trees all right so what I'm

572
00:26:36,460 --> 00:26:38,200
going to do is install a demo directly

573
00:26:38,200 --> 00:26:40,840
off of MPM this is a demo created by

574
00:26:40,840 --> 00:26:45,159
McCullough lysenko so it's a he's

575
00:26:45,159 --> 00:26:48,039
finally given permission to use it and

576
00:26:48,039 --> 00:26:49,470
I'm just gonna go ahead and install that

577
00:26:49,470 --> 00:26:52,059
it's got quite a big dependency tree so

578
00:26:52,059 --> 00:26:53,320
it's going to take a while to install

579
00:26:53,320 --> 00:26:54,970
I'm just going to leave that going on

580
00:26:54,970 --> 00:27:04,879
the side so let's get that going

581
00:27:04,889 --> 00:27:07,869
and I'm just gonna add a button to the

582
00:27:07,869 --> 00:27:09,519
page so that I can click this button and

583
00:27:09,519 --> 00:27:23,420
load the stuff dynamically

584
00:27:23,430 --> 00:27:25,990
I'm gonna be kind of lazy and just an

585
00:27:25,990 --> 00:27:28,870
on-click event I wouldn't actually do

586
00:27:28,870 --> 00:27:32,050
this normally so the thing I want to

587
00:27:32,050 --> 00:27:33,820
import is exactly the same name I just

588
00:27:33,820 --> 00:27:39,940
installed which is MPM voxel demo all

589
00:27:39,940 --> 00:27:40,780
right so it's gone through the

590
00:27:40,780 --> 00:27:42,430
dependency tree and installed and

591
00:27:42,430 --> 00:27:44,230
resolved versions and done all that

592
00:27:44,230 --> 00:27:48,010
stuff let's have a look at the page so

593
00:27:48,010 --> 00:27:50,140
we got this button and this is the one

594
00:27:50,140 --> 00:27:51,340
where it's quite fun to watch the

595
00:27:51,340 --> 00:27:55,630
network tab go it's about it's over 60

596
00:27:55,630 --> 00:27:59,830
modules about 120 requests so let's run

597
00:27:59,830 --> 00:28:03,760
that and you see it runs they're all

598
00:28:03,760 --> 00:28:05,320
common J's modules loading in the page

599
00:28:05,320 --> 00:28:07,570
and there it's finished let's see that

600
00:28:07,570 --> 00:28:09,700
so yeah it's it's a full WebGL demo

601
00:28:09,700 --> 00:28:11,470
running in the browser it's using the

602
00:28:11,470 --> 00:28:14,620
same node libraries as browserify so

603
00:28:14,620 --> 00:28:16,990
it's pretty much replicating those kind

604
00:28:16,990 --> 00:28:21,490
of principles and dynamically compiling

605
00:28:21,490 --> 00:28:26,140
that all in the browser again how do I

606
00:28:26,140 --> 00:28:28,780
actually use this in production so how

607
00:28:28,780 --> 00:28:30,960
can I take this into production well I

608
00:28:30,960 --> 00:28:34,830
can do a bundle just like I did just now

609
00:28:34,830 --> 00:28:37,300
actually before I do that I want to just

610
00:28:37,300 --> 00:28:39,010
speak about the configuration file and

611
00:28:39,010 --> 00:28:40,360
show you what's going on with all of

612
00:28:40,360 --> 00:28:44,280
this so here's the configuration phone

613
00:28:44,280 --> 00:28:47,380
if you're familiar with AMD it's simply

614
00:28:47,380 --> 00:28:49,770
map and pause config all the way through

615
00:28:49,770 --> 00:28:53,590
so we have positon fixed setting up when

616
00:28:53,590 --> 00:28:56,440
I said NPM box will demo its loading

617
00:28:56,440 --> 00:28:59,620
from JSP and packages NPM so it's just a

618
00:28:59,620 --> 00:29:02,380
pod set up and then the way that I can

619
00:29:02,380 --> 00:29:04,600
load for example just bootstrap by name

620
00:29:04,600 --> 00:29:08,110
is map config so we have global Mac

621
00:29:08,110 --> 00:29:09,490
config that says when I require

622
00:29:09,490 --> 00:29:11,530
bootstrap what I'm actually loading from

623
00:29:11,530 --> 00:29:14,020
is github Twitter bootstrap version 3.1

624
00:29:14,020 --> 00:29:17,140
point 1 and then the next thing we have

625
00:29:17,140 --> 00:29:20,050
is contextual map config and this is

626
00:29:20,050 --> 00:29:22,030
really valuable it's the way that we can

627
00:29:22,030 --> 00:29:25,120
abstract the naming so bootstrap can

628
00:29:25,120 --> 00:29:27,130
refer to jQuery by name and something

629
00:29:27,130 --> 00:29:28,960
else can refer to jQuery by name but

630
00:29:28,960 --> 00:29:30,850
they can have different names and this

631
00:29:30,850 --> 00:29:32,620
was pioneered I mean this stuff was all

632
00:29:32,620 --> 00:29:34,690
developed within the AMD world we're

633
00:29:34,690 --> 00:29:35,059
just

634
00:29:35,059 --> 00:29:37,789
redoing it here there's nothing really

635
00:29:37,789 --> 00:29:38,740
new

636
00:29:38,740 --> 00:29:41,749
so here's bootstrap version 3.1 point

637
00:29:41,749 --> 00:29:44,419
one and you can see it's loading jQuery

638
00:29:44,419 --> 00:29:46,549
and when you write jQuery what you're

639
00:29:46,549 --> 00:29:48,200
actually getting is github components

640
00:29:48,200 --> 00:29:51,379
jQuery 2.0 so its global map config

641
00:29:51,379 --> 00:29:53,809
which is the one without the object this

642
00:29:53,809 --> 00:29:56,570
one and then contextual map config so

643
00:29:56,570 --> 00:29:58,879
with in bootstrap these are the names so

644
00:29:58,879 --> 00:30:00,440
every every package can have its own

645
00:30:00,440 --> 00:30:02,509
names and that's how you can easily do

646
00:30:02,509 --> 00:30:05,269
the multi version stuff we've got quite

647
00:30:05,269 --> 00:30:06,980
a deep tree now because I installed all

648
00:30:06,980 --> 00:30:10,909
that stuff from NPM and then at the very

649
00:30:10,909 --> 00:30:13,999
bottom we've got this versions and this

650
00:30:13,999 --> 00:30:16,190
is the final version solution currently

651
00:30:16,190 --> 00:30:18,879
for everything every package in the page

652
00:30:18,879 --> 00:30:22,039
so we can see every version and there's

653
00:30:22,039 --> 00:30:24,110
actually when I installed from this NPM

654
00:30:24,110 --> 00:30:26,119
module it created a few version folks

655
00:30:26,119 --> 00:30:28,820
that come up as arrays in the version

656
00:30:28,820 --> 00:30:32,119
map so for example geo shader we're

657
00:30:32,119 --> 00:30:34,159
currently running no point six no point

658
00:30:34,159 --> 00:30:36,499
no point six and no point 0.5 together

659
00:30:36,499 --> 00:30:38,600
in the page I don't want to be doing

660
00:30:38,600 --> 00:30:40,759
that so what I can do is I can check

661
00:30:40,759 --> 00:30:42,409
this configuration file into version

662
00:30:42,409 --> 00:30:45,049
control there is no state in the JSP and

663
00:30:45,049 --> 00:30:46,850
packages folder there's no information

664
00:30:46,850 --> 00:30:48,710
about versions in there it's it's a

665
00:30:48,710 --> 00:30:51,710
universal kind of property and I can

666
00:30:51,710 --> 00:30:54,019
just modify this this versions config

667
00:30:54,019 --> 00:30:55,429
here and say I actually just want to be

668
00:30:55,429 --> 00:30:59,749
using GL shader version or point 0.6 and

669
00:30:59,749 --> 00:31:01,759
this is how I can go through and

670
00:31:01,759 --> 00:31:04,539
manually manipulate my own version tree

671
00:31:04,539 --> 00:31:06,740
the problem is I'm going to now have

672
00:31:06,740 --> 00:31:09,499
some unfulfilled dependencies so I'm

673
00:31:09,499 --> 00:31:10,999
just going to search through them the

674
00:31:10,999 --> 00:31:13,070
dependency map and see what is using

675
00:31:13,070 --> 00:31:16,519
version or point 0.5 that I saw that I

676
00:31:16,519 --> 00:31:18,559
can remove it so here's the first thing

677
00:31:18,559 --> 00:31:21,110
that's using GL shader is calling it by

678
00:31:21,110 --> 00:31:23,059
named Yoshida and actually getting this

679
00:31:23,059 --> 00:31:26,299
full version no point 0.6 where's the

680
00:31:26,299 --> 00:31:31,059
next one here so NPM error shader is

681
00:31:31,059 --> 00:31:34,460
actually using GL shader compatible with

682
00:31:34,460 --> 00:31:38,090
version or point 0.5 and that's what was

683
00:31:38,090 --> 00:31:40,759
causing us to need to fork and run the

684
00:31:40,759 --> 00:31:42,230
second version so I'm just going to

685
00:31:42,230 --> 00:31:45,049
update this here to no point 0.6

686
00:31:45,049 --> 00:31:46,460
we can now check that into version

687
00:31:46,460 --> 00:31:48,770
control and that's a version up

688
00:31:48,770 --> 00:31:50,390
I've changed the dependencies sub

689
00:31:50,390 --> 00:31:53,150
dependency but because the full version

690
00:31:53,150 --> 00:31:56,120
manifest is in one place I can have

691
00:31:56,120 --> 00:31:58,820
final say over that so I'm just going to

692
00:31:58,820 --> 00:32:00,860
rerun the page one more time we're now

693
00:32:00,860 --> 00:32:02,990
running just that no point 0.6 version

694
00:32:02,990 --> 00:32:05,090
we've resolved the fork and then I can

695
00:32:05,090 --> 00:32:06,320
now test it and see if it's still

696
00:32:06,320 --> 00:32:08,720
working and it is so we know that that's

697
00:32:08,720 --> 00:32:10,880
worked and that's how I can have full

698
00:32:10,880 --> 00:32:14,990
control over the dependency tree so now

699
00:32:14,990 --> 00:32:17,750
I want to bundle this for production so

700
00:32:17,750 --> 00:32:19,010
I'm just going to do JSP and bundle

701
00:32:19,010 --> 00:32:22,790
again and the same name so the name that

702
00:32:22,790 --> 00:32:23,990
I'm writing here will still go through

703
00:32:23,990 --> 00:32:27,020
all those map config things and etc and

704
00:32:27,020 --> 00:32:31,460
let's call this voxel bundle J's so that

705
00:32:31,460 --> 00:32:33,290
creates a full bundle like a browserify

706
00:32:33,290 --> 00:32:36,470
bundle but we only want to load this in

707
00:32:36,470 --> 00:32:39,020
the page so someone might never click

708
00:32:39,020 --> 00:32:40,610
that button you know it might be a

709
00:32:40,610 --> 00:32:42,410
pop-up that features new functionality

710
00:32:42,410 --> 00:32:45,710
or something so you might not want to

711
00:32:45,710 --> 00:32:48,140
load everything up front I just want a

712
00:32:48,140 --> 00:32:49,760
load in that new functionality when

713
00:32:49,760 --> 00:32:52,700
someone clicks the button so what we can

714
00:32:52,700 --> 00:32:54,470
do for that is something called bundles

715
00:32:54,470 --> 00:32:59,750
config and it's it's a feature in

716
00:32:59,750 --> 00:33:02,840
require.js today so again I didn't

717
00:33:02,840 --> 00:33:06,620
invent it at all so we call this box

718
00:33:06,620 --> 00:33:09,400
whole bundle was that the name I gave it

719
00:33:09,400 --> 00:33:13,070
yes so the local name I would type

720
00:33:13,070 --> 00:33:15,260
import voxel bundle to load that bundle

721
00:33:15,260 --> 00:33:17,780
so I used that name and now I can say

722
00:33:17,780 --> 00:33:19,910
what the bundle contains so what modules

723
00:33:19,910 --> 00:33:23,330
are inside the bundle and what that

724
00:33:23,330 --> 00:33:25,160
means is anytime I request one of these

725
00:33:25,160 --> 00:33:26,990
modules that upfront has been declared

726
00:33:26,990 --> 00:33:29,060
as belonging to the bundle it'll make

727
00:33:29,060 --> 00:33:30,440
sure it's loading from that single

728
00:33:30,440 --> 00:33:33,140
bundle I have to now enter in fully

729
00:33:33,140 --> 00:33:35,210
normalized names because bundles contain

730
00:33:35,210 --> 00:33:38,660
normalized module names so I'm going to

731
00:33:38,660 --> 00:33:42,470
load in nor point 1.0 so voxel demo nor

732
00:33:42,470 --> 00:33:44,540
point 1.0 is contained within this

733
00:33:44,540 --> 00:33:46,460
bundle if there were other things like

734
00:33:46,460 --> 00:33:48,590
if I put jQuery into that bundle I could

735
00:33:48,590 --> 00:33:51,050
also add it to this list so as soon as

736
00:33:51,050 --> 00:33:52,490
there's a requester it will go to the

737
00:33:52,490 --> 00:33:56,330
bundle and with some luck I think that

738
00:33:56,330 --> 00:33:57,560
should do it now

739
00:33:57,560 --> 00:34:00,770
so if you look at the network tab we

740
00:34:00,770 --> 00:34:02,930
load the initial page with our app build

741
00:34:02,930 --> 00:34:05,450
that we did just now and when I click on

742
00:34:05,450 --> 00:34:09,940
the new functionality it it didn't work

743
00:34:09,940 --> 00:34:14,659
so why didn't that work I think it's no

744
00:34:14,659 --> 00:34:17,870
point 0.1 so you do have to get the

745
00:34:17,870 --> 00:34:24,290
exact name and exact version right all

746
00:34:24,290 --> 00:34:27,560
right so when I click the button it just

747
00:34:27,560 --> 00:34:29,720
loads that single bundle if you can see

748
00:34:29,720 --> 00:34:32,960
it on in the network tab there and it's

749
00:34:32,960 --> 00:34:34,630
then just like a browserify

750
00:34:34,630 --> 00:34:37,760
bundle loading the full common J's tree

751
00:34:37,760 --> 00:34:41,659
from within that so yeah that's it

752
00:34:41,659 --> 00:34:44,659
that's pretty much what there is - it's

753
00:34:44,659 --> 00:34:46,520
it allows you to kind of package manage

754
00:34:46,520 --> 00:34:50,179
your existing modules today and and

755
00:34:50,179 --> 00:34:51,230
bundle them up with these kind of

756
00:34:51,230 --> 00:34:55,020
workflows using any a6 module loader

757
00:34:55,030 --> 00:34:57,410
right and then there's one other thing I

758
00:34:57,410 --> 00:34:58,760
want to talk about which is how we

759
00:34:58,760 --> 00:35:00,890
looking at the future workflows of HTTP

760
00:35:00,890 --> 00:35:03,500
- so I said at the beginning bundling is

761
00:35:03,500 --> 00:35:05,690
actually an anti-pattern it's it's it's

762
00:35:05,690 --> 00:35:06,590
something that we're going to be moving

763
00:35:06,590 --> 00:35:09,590
away from how can this work when we're

764
00:35:09,590 --> 00:35:10,880
actually going to be looking beyond

765
00:35:10,880 --> 00:35:13,900
bundling and one way we can do this is

766
00:35:13,900 --> 00:35:16,760
we basically take that JSP in packages

767
00:35:16,760 --> 00:35:19,550
folder host it on your local assets

768
00:35:19,550 --> 00:35:23,000
server and put that into production

769
00:35:23,000 --> 00:35:26,720
effectively and because of the fact that

770
00:35:26,720 --> 00:35:29,450
the the files of versioned you get

771
00:35:29,450 --> 00:35:31,330
everything running through that and

772
00:35:31,330 --> 00:35:34,160
there is actually a CDN set up as well

773
00:35:34,160 --> 00:35:35,690
so you can actually run directly through

774
00:35:35,690 --> 00:35:38,810
that and and that core thing is that the

775
00:35:38,810 --> 00:35:41,480
config manages your full dependency tree

776
00:35:41,480 --> 00:35:46,280
and the exact resolutions right so

777
00:35:46,280 --> 00:35:50,180
that's it some of the next things I want

778
00:35:50,180 --> 00:35:52,870
to work on include conditional loading

779
00:35:52,870 --> 00:35:58,190
for example in reality I wouldn't just

780
00:35:58,190 --> 00:36:00,470
load a web component I would want to do

781
00:36:00,470 --> 00:36:02,930
a conditional check on my environment to

782
00:36:02,930 --> 00:36:04,520
check that the environment supports web

783
00:36:04,520 --> 00:36:06,980
components if it doesn't load a polyfill

784
00:36:06,980 --> 00:36:09,950
and have that conditional loading baked

785
00:36:09,950 --> 00:36:10,760
into the module

786
00:36:10,760 --> 00:36:13,670
system itself and then to look at builds

787
00:36:13,670 --> 00:36:14,980
around it and also thinking about

788
00:36:14,980 --> 00:36:17,570
internationalized builds and how you can

789
00:36:17,570 --> 00:36:20,630
do builds around different languages and

790
00:36:20,630 --> 00:36:22,520
mobile build tooling for plugins as well

791
00:36:22,520 --> 00:36:24,140
so this look at the kind of things that

792
00:36:24,140 --> 00:36:29,630
I'd really like to work on next yeah so

793
00:36:29,630 --> 00:36:30,500
that's it

794
00:36:30,500 --> 00:36:33,860
the I'm not telling you all to go off

795
00:36:33,860 --> 00:36:36,380
and start writing years six web

796
00:36:36,380 --> 00:36:39,940
components what it's really about is

797
00:36:39,940 --> 00:36:42,680
focusing on an approach that can be

798
00:36:42,680 --> 00:36:44,180
based on the ideas of year six and you

799
00:36:44,180 --> 00:36:46,550
can use it for AMD common J's and

800
00:36:46,550 --> 00:36:50,840
existing workflows today and I mean the

801
00:36:50,840 --> 00:36:54,710
real path to es6 is it is much more

802
00:36:54,710 --> 00:36:57,080
nuanced than than just using these kind

803
00:36:57,080 --> 00:37:00,320
of approaches but by basing the by

804
00:37:00,320 --> 00:37:01,910
basing ourselves on these approaches we

805
00:37:01,910 --> 00:37:05,120
can we can find a stable workflow that

806
00:37:05,120 --> 00:37:06,650
can that can make package management

807
00:37:06,650 --> 00:37:09,590
really easy and that's that so yeah

808
00:37:09,590 --> 00:37:10,940
check out the projects let me know what

809
00:37:10,940 --> 00:37:12,260
you think if you like it if you hate it

810
00:37:12,260 --> 00:37:13,940
are we great to hear so thanks so much

