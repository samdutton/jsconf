1
00:00:00,750 --> 00:00:10,670

[Music]

2
00:00:10,670 --> 00:00:12,920
thanks Jessica

3
00:00:12,920 --> 00:00:16,020
alright thanks so much everyone good

4
00:00:16,020 --> 00:00:17,820
afternoon thanks so much for having me

5
00:00:17,820 --> 00:00:19,410
here it's my first time in Berlin in

6
00:00:19,410 --> 00:00:21,420
Germany in general had a great time

7
00:00:21,420 --> 00:00:22,890
meeting a lot of you and just learning

8
00:00:22,890 --> 00:00:24,600
so much from some of the attendings here

9
00:00:24,600 --> 00:00:25,350
um

10
00:00:25,350 --> 00:00:27,599
I'm Gil Hernandez coming to you from

11
00:00:27,599 --> 00:00:29,820
South Florida and I work at treehouse

12
00:00:29,820 --> 00:00:30,960
I'm the front-end web development

13
00:00:30,960 --> 00:00:33,300
teacher and treehouse we have

14
00:00:33,300 --> 00:00:36,420
programming courses and printing web

15
00:00:36,420 --> 00:00:38,190
development courses online technology

16
00:00:38,190 --> 00:00:40,680
school I specifically teach courses

17
00:00:40,680 --> 00:00:42,960
about two FS JavaScript and most

18
00:00:42,960 --> 00:00:45,930
recently react you can find me on the

19
00:00:45,930 --> 00:00:48,809
Twitter's as a QH and most places on the

20
00:00:48,809 --> 00:00:52,199
Internet and I love CSS right that's why

21
00:00:52,199 --> 00:00:53,579
I'm here that's one of my favorite

22
00:00:53,579 --> 00:00:55,410
subjects to teach and talk about so

23
00:00:55,410 --> 00:00:57,300
today I'm going to be talking about some

24
00:00:57,300 --> 00:00:59,100
of the more fascinating and interesting

25
00:00:59,100 --> 00:01:01,020
things happening in CSS right now

26
00:01:01,020 --> 00:01:03,589
because CSS now provides some really

27
00:01:03,589 --> 00:01:07,200
amazing tools right that empower us more

28
00:01:07,200 --> 00:01:09,229
than ever before and gives us more

29
00:01:09,229 --> 00:01:11,549
flexibility over things like design and

30
00:01:11,549 --> 00:01:14,790
images effects design layout colors even

31
00:01:14,790 --> 00:01:18,360
managing and reusing values right so if

32
00:01:18,360 --> 00:01:20,310
you haven't started using or looking to

33
00:01:20,310 --> 00:01:22,350
new these features yet I'm going to

34
00:01:22,350 --> 00:01:24,659
cover just enough to get to using them

35
00:01:24,659 --> 00:01:26,009
and help you begin leveraging these

36
00:01:26,009 --> 00:01:28,350
features to empower your workflows and

37
00:01:28,350 --> 00:01:29,430
improve your projects and we're going to

38
00:01:29,430 --> 00:01:31,409
be looking at a little bit of code and

39
00:01:31,409 --> 00:01:33,390
lots of demos in the next 30 minutes or

40
00:01:33,390 --> 00:01:35,850
so but I am going to put this aside

41
00:01:35,850 --> 00:01:38,610
after the talk and for timing reasons

42
00:01:38,610 --> 00:01:39,780
I'm not going to go into too much about

43
00:01:39,780 --> 00:01:41,790
browser support but at the end we'll be

44
00:01:41,790 --> 00:01:44,399
a resources slide with some links to

45
00:01:44,399 --> 00:01:48,450
that so let's kick things up by talking

46
00:01:48,450 --> 00:01:49,680
about CSS variables

47
00:01:49,680 --> 00:01:53,159
aka custom property so we know that CSS

48
00:01:53,159 --> 00:01:55,470
can be immensely repetitive right and

49
00:01:55,470 --> 00:01:58,079
maintaining it can be cumbersome now if

50
00:01:58,079 --> 00:02:00,390
you're using a preprocessor like that

51
00:02:00,390 --> 00:02:02,729
you already used to declaring variables

52
00:02:02,729 --> 00:02:04,469
and keeping track of values in your

53
00:02:04,469 --> 00:02:07,049
style sheet well as we all kind of know

54
00:02:07,049 --> 00:02:08,369
since not too long ago you can

55
00:02:08,369 --> 00:02:10,890
add variables directly in CFS and like

56
00:02:10,890 --> 00:02:13,080
variables and pre-processors CSS

57
00:02:13,080 --> 00:02:15,030
variables they hold references to values

58
00:02:15,030 --> 00:02:16,980
that then you can reference to write

59
00:02:16,980 --> 00:02:18,269
your style sheets but there's plenty of

60
00:02:18,269 --> 00:02:20,640
differences to using CSS variables over

61
00:02:20,640 --> 00:02:23,879
preprocessor variables and they're

62
00:02:23,879 --> 00:02:26,400
formerly known as custom properties

63
00:02:26,400 --> 00:02:28,170
because you declare them using a new

64
00:02:28,170 --> 00:02:29,670
custom property syntax that means you

65
00:02:29,670 --> 00:02:31,409
can name them anything you want as long

66
00:02:31,409 --> 00:02:33,659
as you prefix them with those two dashes

67
00:02:33,659 --> 00:02:35,370
you go Songo value then refer to that

68
00:02:35,370 --> 00:02:37,319
property name and your CSS to use the

69
00:02:37,319 --> 00:02:38,970
value now for example if you're

70
00:02:38,970 --> 00:02:40,650
repeating the same color value in

71
00:02:40,650 --> 00:02:42,359
different places you can create a

72
00:02:42,359 --> 00:02:45,060
variable that so your font size or base

73
00:02:45,060 --> 00:02:46,739
color you set it to the repeated valid

74
00:02:46,739 --> 00:02:48,329
like you would a regular CSS property

75
00:02:48,329 --> 00:02:50,250
and what's cool is that they follow the

76
00:02:50,250 --> 00:02:52,859
rules of the Cascade so you first have

77
00:02:52,859 --> 00:02:54,329
to declare them on some element and

78
00:02:54,329 --> 00:02:56,670
you'll often declare variables that will

79
00:02:56,670 --> 00:02:58,409
be referenced by many elements like your

80
00:02:58,409 --> 00:03:02,459
base color or based on size on the root

81
00:03:02,459 --> 00:03:04,650
right so we have to scope them to an

82
00:03:04,650 --> 00:03:07,440
element usually the the root and what

83
00:03:07,440 --> 00:03:09,390
that does it's Cookson at the highest

84
00:03:09,390 --> 00:03:11,609
level of the Cascade that way the values

85
00:03:11,609 --> 00:03:13,560
are available everywhere and they can be

86
00:03:13,560 --> 00:03:15,450
referenced and inherited by all elements

87
00:03:15,450 --> 00:03:16,799
now the browser doesn't do anything

88
00:03:16,799 --> 00:03:18,900
right with a custom property or a robot

89
00:03:18,900 --> 00:03:20,910
first so to call the value you have to

90
00:03:20,910 --> 00:03:23,910
use the VAR function to reference the

91
00:03:23,910 --> 00:03:25,980
valued rather now with bar in place you

92
00:03:25,980 --> 00:03:27,989
know anytime you change the value for

93
00:03:27,989 --> 00:03:29,459
the constant property it gets propagated

94
00:03:29,459 --> 00:03:32,069
it gets passed down along to wherever

95
00:03:32,069 --> 00:03:34,680
it's being used and it makes your CSS

96
00:03:34,680 --> 00:03:36,150
work a little less error-prone

97
00:03:36,150 --> 00:03:38,699
and a bit easier right now a property

98
00:03:38,699 --> 00:03:41,040
value can contain more than one bar

99
00:03:41,040 --> 00:03:43,379
function like you see here that's use

100
00:03:43,379 --> 00:03:45,989
two bars to define a gradient it's also

101
00:03:45,989 --> 00:03:48,209
possible to assign a value to custom

102
00:03:48,209 --> 00:03:49,680
property using other variables like in

103
00:03:49,680 --> 00:03:51,660
this gradient custom property here and

104
00:03:51,660 --> 00:03:52,980
you can use them for fonts backs

105
00:03:52,980 --> 00:03:55,230
layout styles and so on so on to about

106
00:03:55,230 --> 00:03:57,480
code duplication now this isn't terribly

107
00:03:57,480 --> 00:03:59,910
exciting just yet right because we've

108
00:03:59,910 --> 00:04:01,859
been able to do this for some time with

109
00:04:01,859 --> 00:04:05,849
fasts or blasts and other imposed CSS

110
00:04:05,849 --> 00:04:08,340
right well custom properties weren't

111
00:04:08,340 --> 00:04:11,190
created just to be the CSS equivalent of

112
00:04:11,190 --> 00:04:13,680
preprocessor variables or even offer the

113
00:04:13,680 --> 00:04:15,060
same functionality right they can also

114
00:04:15,060 --> 00:04:17,769
do lots and lots of things that

115
00:04:17,769 --> 00:04:21,699
sister's camp so let's look at why the

116
00:04:21,699 --> 00:04:24,129
pre-processors in CSS variables they're

117
00:04:24,129 --> 00:04:26,889
like two different entities it's like

118
00:04:26,889 --> 00:04:28,240
they live in two completely different

119
00:04:28,240 --> 00:04:30,639
worlds first preprocessors they don't

120
00:04:30,639 --> 00:04:33,580
run on the browser and they live in a

121
00:04:33,580 --> 00:04:35,830
source file on your machine right and

122
00:04:35,830 --> 00:04:37,870
the preprocessors replaced variables

123
00:04:37,870 --> 00:04:39,729
with static values and they're compiled

124
00:04:39,729 --> 00:04:41,949
to CSS and the browser knows nothing

125
00:04:41,949 --> 00:04:43,419
about those variables in the variables

126
00:04:43,419 --> 00:04:45,370
themselves know nothing about your Dom

127
00:04:45,370 --> 00:04:48,669
structure now on the other hand CSS

128
00:04:48,669 --> 00:04:52,240
variables are entirely more flexible

129
00:04:52,240 --> 00:04:54,190
than preprocessor variables but so when

130
00:04:54,190 --> 00:04:56,199
you update the value of a CSS variable

131
00:04:56,199 --> 00:04:58,569
about the browser updates it anywhere

132
00:04:58,569 --> 00:04:59,530
it's referenced and it does it have

133
00:04:59,530 --> 00:05:01,000
runtime so this makes them incredibly

134
00:05:01,000 --> 00:05:03,580
dynamic and it opens up lots of other

135
00:05:03,580 --> 00:05:05,169
interesting possibilities and just

136
00:05:05,169 --> 00:05:07,330
replacing colors and font values so

137
00:05:07,330 --> 00:05:08,860
let's look at some those for example in

138
00:05:08,860 --> 00:05:11,289
fact you can't update the value of a

139
00:05:11,289 --> 00:05:12,400
variable

140
00:05:12,400 --> 00:05:14,289
from within a meteor query right but you

141
00:05:14,289 --> 00:05:16,180
can with CSS variables you can update

142
00:05:16,180 --> 00:05:18,370
them live inside media queries so for

143
00:05:18,370 --> 00:05:20,289
example we have this gutter variable

144
00:05:20,289 --> 00:05:22,630
here and it's initially scoped to the

145
00:05:22,630 --> 00:05:24,909
root element and then it's reference

146
00:05:24,909 --> 00:05:26,229
within the rule such that need a gutter

147
00:05:26,229 --> 00:05:28,360
with far and then you can use media

148
00:05:28,360 --> 00:05:30,310
queries to provide these new contacts

149
00:05:30,310 --> 00:05:32,289
that redefined the value of the gutter

150
00:05:32,289 --> 00:05:33,940
at certain break points so you can see

151
00:05:33,940 --> 00:05:36,130
that gutter property the values are

152
00:05:36,130 --> 00:05:38,020
updated live at each breakpoint right

153
00:05:38,020 --> 00:05:39,819
the values themselves are sort of

154
00:05:39,819 --> 00:05:42,580
responsive to that now CSS custom

155
00:05:42,580 --> 00:05:45,310
properties or variables they behave like

156
00:05:45,310 --> 00:05:46,750
regular property so that means they can

157
00:05:46,750 --> 00:05:49,539
inherit cascade and they can be scoped

158
00:05:49,539 --> 00:05:52,509
to any selector so here we have the

159
00:05:52,509 --> 00:05:54,400
space button class right and users

160
00:05:54,400 --> 00:05:56,110
variable to set the background color of

161
00:05:56,110 --> 00:05:58,060
the buttons and then instead of defining

162
00:05:58,060 --> 00:06:01,270
that button BG variable at the root

163
00:06:01,270 --> 00:06:02,889
scope like we did earlier we can declare

164
00:06:02,889 --> 00:06:04,690
it on different selectors like button

165
00:06:04,690 --> 00:06:06,580
modifier classes here right button call

166
00:06:06,580 --> 00:06:08,469
out button info and then we assign the

167
00:06:08,469 --> 00:06:10,360
values there and those selectors they

168
00:06:10,360 --> 00:06:12,969
provide a new scope and what's great is

169
00:06:12,969 --> 00:06:15,009
the properties they get resolved

170
00:06:15,009 --> 00:06:17,889
according to the normal and inherit and

171
00:06:17,889 --> 00:06:19,900
inheritance cascading rule size so the

172
00:06:19,900 --> 00:06:22,270
browser or updates values of that button

173
00:06:22,270 --> 00:06:24,310
I've just based on the class or the Dom

174
00:06:24,310 --> 00:06:26,680
element the variable scope to you can

175
00:06:26,680 --> 00:06:30,370
even update CSS variables inline within

176
00:06:30,370 --> 00:06:31,540
the style attribute

177
00:06:31,540 --> 00:06:32,860
that's sort of how live they are in the

178
00:06:32,860 --> 00:06:35,260
browser array so scoping CSS variables

179
00:06:35,260 --> 00:06:37,870
to Dom elements gives us even more

180
00:06:37,870 --> 00:06:39,550
interesting possibility since they

181
00:06:39,550 --> 00:06:42,820
follow the Cascade and inheritance we

182
00:06:42,820 --> 00:06:44,560
can and we could style them based on

183
00:06:44,560 --> 00:06:46,510
where they appear in the Dom so in other

184
00:06:46,510 --> 00:06:48,310
words were going to efficiently set how

185
00:06:48,310 --> 00:06:50,530
an element looks right when it's inside

186
00:06:50,530 --> 00:06:51,970
of another element look variable so for

187
00:06:51,970 --> 00:06:54,850
example to update the styles of a button

188
00:06:54,850 --> 00:06:56,470
component just based on whether it

189
00:06:56,470 --> 00:06:59,470
appears inside a a banner a card or a

190
00:06:59,470 --> 00:07:02,320
modal class you might create descendant

191
00:07:02,320 --> 00:07:03,610
selectors like this to do that right

192
00:07:03,610 --> 00:07:05,860
well with CSS variables we can update

193
00:07:05,860 --> 00:07:08,320
the styles without having to write these

194
00:07:08,320 --> 00:07:10,600
kind of complex selectors or descendant

195
00:07:10,600 --> 00:07:12,400
selectors that is going to couple your

196
00:07:12,400 --> 00:07:14,470
CSS to the Dom structure so what this

197
00:07:14,470 --> 00:07:15,730
does is it makes the components you

198
00:07:15,730 --> 00:07:17,770
build a completely expensive alright so

199
00:07:17,770 --> 00:07:19,570
now the button can display different

200
00:07:19,570 --> 00:07:22,690
font size a color background or any

201
00:07:22,690 --> 00:07:25,360
property just based on where it appears

202
00:07:25,360 --> 00:07:26,950
on the page and the CSS variables

203
00:07:26,950 --> 00:07:29,830
declared on its parent so here that this

204
00:07:29,830 --> 00:07:31,930
button rule is the CSS properties whose

205
00:07:31,930 --> 00:07:33,610
values we want to update dynamically

206
00:07:33,610 --> 00:07:37,450
with variables and then to change how

207
00:07:37,450 --> 00:07:40,480
that button appears inside a banner a

208
00:07:40,480 --> 00:07:42,340
card or a modal you define the different

209
00:07:42,340 --> 00:07:44,830
variables inside the selectors so now

210
00:07:44,830 --> 00:07:47,440
any button class that's a descendant of

211
00:07:47,440 --> 00:07:50,140
banner art or modal can inherit these

212
00:07:50,140 --> 00:07:51,850
properties and the best part is that you

213
00:07:51,850 --> 00:07:53,200
don't have to know anything about the

214
00:07:53,200 --> 00:07:55,570
context right we get this perfectly be

215
00:07:55,570 --> 00:07:58,900
mobile and reusable button clone you can

216
00:07:58,900 --> 00:08:02,020
also do simple calculations with CSS

217
00:08:02,020 --> 00:08:04,510
variables so here I handed use cases

218
00:08:04,510 --> 00:08:06,670
using the calc function to perform

219
00:08:06,670 --> 00:08:08,230
calculations that determine your length

220
00:08:08,230 --> 00:08:10,600
value so this is using variables to

221
00:08:10,600 --> 00:08:14,160
build pixel and values for margins

222
00:08:14,160 --> 00:08:17,290
now the variables cannot only be updated

223
00:08:17,290 --> 00:08:20,880
using inheritance as we saw earlier and

224
00:08:20,880 --> 00:08:23,440
David's talk you can also interact with

225
00:08:23,440 --> 00:08:25,030
them right using JavaScript you can get

226
00:08:25,030 --> 00:08:27,700
and set a CSS values from your

227
00:08:27,700 --> 00:08:29,680
JavaScript and that's where things start

228
00:08:29,680 --> 00:08:31,210
to get really interesting right so in

229
00:08:31,210 --> 00:08:32,500
this simple demo we had the ball that's

230
00:08:32,500 --> 00:08:34,450
moving around the page and it's just

231
00:08:34,450 --> 00:08:35,650
based on where you click on that page

232
00:08:35,650 --> 00:08:38,229
right now the background color and the

233
00:08:38,229 --> 00:08:40,630
CSS transform properties are all being

234
00:08:40,630 --> 00:08:43,160
updated live with JavaScript

235
00:08:43,160 --> 00:08:46,580
and the way you interact with the CFX

236
00:08:46,580 --> 00:08:48,590
variables with JavaScript is with the

237
00:08:48,590 --> 00:08:50,240
get property value and set property

238
00:08:50,240 --> 00:08:53,380
methods so back to the ball animation

239
00:08:53,380 --> 00:08:55,640
this uses variables right to set the

240
00:08:55,640 --> 00:08:57,470
values for the background color and the

241
00:08:57,470 --> 00:08:59,690
XY translation values being created with

242
00:08:59,690 --> 00:09:02,150
alpha and then in your JavaScript it's

243
00:09:02,150 --> 00:09:04,310
able to set the background color and

244
00:09:04,310 --> 00:09:06,320
those translation values with a set

245
00:09:06,320 --> 00:09:07,340
property method so here we're just

246
00:09:07,340 --> 00:09:09,020
setting the values and not getting them

247
00:09:09,020 --> 00:09:10,940
so for example within a click event

248
00:09:10,940 --> 00:09:13,160
listener sending the translation values

249
00:09:13,160 --> 00:09:15,470
to those XY coordinates at which the

250
00:09:15,470 --> 00:09:17,090
clicking happens with position x

251
00:09:17,090 --> 00:09:19,190
position Y properties and then to change

252
00:09:19,190 --> 00:09:21,320
the background color values setting that

253
00:09:21,320 --> 00:09:24,350
that ball BG property to random X L with

254
00:09:24,350 --> 00:09:27,800
a helper function there so now that

255
00:09:27,800 --> 00:09:30,440
you've seen how and where CSS variables

256
00:09:30,440 --> 00:09:32,630
work you should know where they do not

257
00:09:32,630 --> 00:09:35,300
work so you cannot use CSS variables and

258
00:09:35,300 --> 00:09:37,670
selectors you can't use them in property

259
00:09:37,670 --> 00:09:39,470
names either you can only use them in

260
00:09:39,470 --> 00:09:42,050
values they're also not valid in media

261
00:09:42,050 --> 00:09:44,030
query expressions which is kind of a

262
00:09:44,030 --> 00:09:45,950
bummer I wish they were and you can't

263
00:09:45,950 --> 00:09:47,660
use them to create length values like

264
00:09:47,660 --> 00:09:49,660
the middle box rule here that's invalid

265
00:09:49,660 --> 00:09:52,670
and again you should use calc to build

266
00:09:52,670 --> 00:09:56,100
your length values using CSS variables

267
00:09:56,110 --> 00:10:01,100
cool so let's switch gears here the the

268
00:10:01,100 --> 00:10:04,310
evolution of CSS keeps providing more

269
00:10:04,310 --> 00:10:07,700
and more ways to help us make creative

270
00:10:07,700 --> 00:10:09,380
decisions in the browser right because

271
00:10:09,380 --> 00:10:11,390
many of today's features resemble a lot

272
00:10:11,390 --> 00:10:13,580
of tools you'd normally use in your

273
00:10:13,580 --> 00:10:15,860
graphics editor so blend modes or

274
00:10:15,860 --> 00:10:18,140
example you might have worked with some

275
00:10:18,140 --> 00:10:20,210
of these now blend modes are part of the

276
00:10:20,210 --> 00:10:22,780
compositing and blending CSS spec

277
00:10:22,780 --> 00:10:25,220
compositing meaning combining two or

278
00:10:25,220 --> 00:10:27,560
more elements into one like compositing

279
00:10:27,560 --> 00:10:30,410
an image with its backdrop and blending

280
00:10:30,410 --> 00:10:32,750
is a form of compositing that calculates

281
00:10:32,750 --> 00:10:35,030
the mixing of colors wherever an element

282
00:10:35,030 --> 00:10:37,610
in its background over overlaps so it

283
00:10:37,610 --> 00:10:38,810
defines how those colors mix in the

284
00:10:38,810 --> 00:10:41,450
overlapping areas and CSS gives us two

285
00:10:41,450 --> 00:10:44,780
properties to create and blend elements

286
00:10:44,780 --> 00:10:45,950
together so we have a background blend

287
00:10:45,950 --> 00:10:48,350
mode mix blend mode and let's take a

288
00:10:48,350 --> 00:10:50,330
look at some of these so the background

289
00:10:50,330 --> 00:10:53,420
blend mode properly blends an element

290
00:10:53,420 --> 00:10:55,370
with background layer and the background

291
00:10:55,370 --> 00:10:55,910
can be an

292
00:10:55,910 --> 00:10:59,450
a gradient that can be a color and so

293
00:10:59,450 --> 00:11:01,340
for example in this header rule here we

294
00:11:01,340 --> 00:11:03,920
are blending a background image with a

295
00:11:03,920 --> 00:11:06,170
linear gradient and then we're given it

296
00:11:06,170 --> 00:11:07,820
a background blend with a multiply which

297
00:11:07,820 --> 00:11:09,530
it's a common value for that

298
00:11:09,530 --> 00:11:11,810
now what multiply does is it modifies

299
00:11:11,810 --> 00:11:13,970
the background area by multiplying the

300
00:11:13,970 --> 00:11:15,200
colors in the image

301
00:11:15,200 --> 00:11:17,510
by the colors of the linear gradient in

302
00:11:17,510 --> 00:11:19,160
this particular combination makes for

303
00:11:19,160 --> 00:11:21,890
more vibrant and a beautiful background

304
00:11:21,890 --> 00:11:23,840
image right you'll find that the

305
00:11:23,840 --> 00:11:25,490
background blend mode options are very

306
00:11:25,490 --> 00:11:27,710
similar to ones you'd find in Photoshop

307
00:11:27,710 --> 00:11:30,260
rides you have screening overlay dark

308
00:11:30,260 --> 00:11:32,750
and saturation and a bunch more now

309
00:11:32,750 --> 00:11:34,640
mixed blend mode is a little different

310
00:11:34,640 --> 00:11:38,540
in that it blends the the content of an

311
00:11:38,540 --> 00:11:41,720
SVG or HTML element with any content

312
00:11:41,720 --> 00:11:43,010
that's painted underneath it so we're

313
00:11:43,010 --> 00:11:45,470
not just limited to background areas so

314
00:11:45,470 --> 00:11:47,030
that means you can blend or a composite

315
00:11:47,030 --> 00:11:49,580
two or more embedded images together so

316
00:11:49,580 --> 00:11:52,520
for example here this image is inside a

317
00:11:52,520 --> 00:11:54,950
header it has a dark background area and

318
00:11:54,950 --> 00:11:56,810
what CSS we can seamlessly blend them

319
00:11:56,810 --> 00:11:59,120
together by setting the images mix blend

320
00:11:59,120 --> 00:12:00,980
mode to lighten because of that dark

321
00:12:00,980 --> 00:12:06,350
area now when I found out that you could

322
00:12:06,350 --> 00:12:08,390
blend an image element with a background

323
00:12:08,390 --> 00:12:10,520
layer I started using the explained mode

324
00:12:10,520 --> 00:12:12,620
to help give my grayscale images some

325
00:12:12,620 --> 00:12:14,510
life right and in color and create

326
00:12:14,510 --> 00:12:16,580
custom sets of colors for images so for

327
00:12:16,580 --> 00:12:18,800
example it's rounded image and I did

328
00:12:18,800 --> 00:12:20,780
have to place it inside additive or

329
00:12:20,780 --> 00:12:22,070
inside a containing element to do this

330
00:12:22,070 --> 00:12:24,440
but you can give that div or a

331
00:12:24,440 --> 00:12:25,880
containing element a background color or

332
00:12:25,880 --> 00:12:27,860
a gradient and then for instance use

333
00:12:27,860 --> 00:12:30,740
multiply to just blend it together with

334
00:12:30,740 --> 00:12:34,250
the background of its parent and what's

335
00:12:34,250 --> 00:12:35,900
cool that great scale images tend to

336
00:12:35,900 --> 00:12:37,850
have smaller file sizes than color

337
00:12:37,850 --> 00:12:40,070
images so you can take advantage of that

338
00:12:40,070 --> 00:12:41,840
in these grayscale images and explain

339
00:12:41,840 --> 00:12:43,880
those to apply pretty much any series of

340
00:12:43,880 --> 00:12:47,300
colors to your images and you could also

341
00:12:47,300 --> 00:12:49,040
do this with SVG right you can use the

342
00:12:49,040 --> 00:12:51,620
image element to render a raster image

343
00:12:51,620 --> 00:12:53,750
and you give the SVG a background and

344
00:12:53,750 --> 00:12:55,460
then you use your mix blend mode and

345
00:12:55,460 --> 00:12:56,990
this way you avoid writing some of that

346
00:12:56,990 --> 00:12:59,780
extra CSS that's required to make that

347
00:12:59,780 --> 00:13:01,770
image fit inside that if

348
00:13:01,770 --> 00:13:06,030
ah and here's another example of explain

349
00:13:06,030 --> 00:13:08,130
mode being used to create that knock out

350
00:13:08,130 --> 00:13:10,320
text effect and for this one it's kind

351
00:13:10,320 --> 00:13:11,670
of slow but I animated the background

352
00:13:11,670 --> 00:13:14,040
right so you can really see that the

353
00:13:14,040 --> 00:13:16,260
true blending and compositing power of

354
00:13:16,260 --> 00:13:20,790
mix blend mode now another one of my

355
00:13:20,790 --> 00:13:23,880
favorites new cssm it effects that isn't

356
00:13:23,880 --> 00:13:25,530
part of blending and compositing but it

357
00:13:25,530 --> 00:13:28,320
is part of the filters level two spec is

358
00:13:28,320 --> 00:13:30,840
back drop filter so if you've worked

359
00:13:30,840 --> 00:13:33,120
with CSS filters you know that you can

360
00:13:33,120 --> 00:13:35,670
apply a series of these filter Photoshop

361
00:13:35,670 --> 00:13:38,280
like effects HTML elementally you can

362
00:13:38,280 --> 00:13:40,350
have a blur drop shadow very scale

363
00:13:40,350 --> 00:13:42,510
contracts and invert and a bunch of

364
00:13:42,510 --> 00:13:45,420
others well the backdrop filter property

365
00:13:45,420 --> 00:13:47,070
lets you add some of those same effects

366
00:13:47,070 --> 00:13:49,890
but to the area behind an element right

367
00:13:49,890 --> 00:13:52,410
so the way this works it needs at least

368
00:13:52,410 --> 00:13:54,240
two elements to work property properly

369
00:13:54,240 --> 00:13:57,180
the backdrop filter feature so you need

370
00:13:57,180 --> 00:13:59,940
a target element that you apply the

371
00:13:59,940 --> 00:14:01,970
filter to like our field to a rule here

372
00:14:01,970 --> 00:14:04,920
and then you need to element behind or

373
00:14:04,920 --> 00:14:06,780
underneath the target and that's the

374
00:14:06,780 --> 00:14:08,040
backdrop area that's the area that's

375
00:14:08,040 --> 00:14:09,960
going to be affected by and you apply

376
00:14:09,960 --> 00:14:11,670
the filter effects do so for instance

377
00:14:11,670 --> 00:14:15,060
this is setting the backdrop filter to

378
00:14:15,060 --> 00:14:16,590
invert the colors by a hundred percent

379
00:14:16,590 --> 00:14:18,570
and blend them by two pixels so it's so

380
00:14:18,570 --> 00:14:21,090
any area behind that and see I made this

381
00:14:21,090 --> 00:14:24,000
draggable so yep so that that's the

382
00:14:24,000 --> 00:14:30,360
filter element here which so if you take

383
00:14:30,360 --> 00:14:31,620
a look at this later you'll see when you

384
00:14:31,620 --> 00:14:33,270
drag it around you can see the colors in

385
00:14:33,270 --> 00:14:35,280
Kurt in the background oh here we go

386
00:14:35,280 --> 00:14:39,330
I like doing it here there it is there

387
00:14:39,330 --> 00:14:41,100
we go so yeah so the colors are

388
00:14:41,100 --> 00:14:42,300
inverting and then the backdrop here

389
00:14:42,300 --> 00:14:47,160
it's being blended

390
00:14:47,170 --> 00:14:49,280
now the backdrop filters can also

391
00:14:49,280 --> 00:14:52,220
enhance the models and overlay than your

392
00:14:52,220 --> 00:14:55,030
design so for instance this overlay box

393
00:14:55,030 --> 00:14:57,380
there's a filter behind it that blurs

394
00:14:57,380 --> 00:14:59,660
the dye for an area and darkens the hue

395
00:14:59,660 --> 00:15:02,060
to draw more attention to that overlay

396
00:15:02,060 --> 00:15:04,100
box and the content and there animatable

397
00:15:04,100 --> 00:15:06,170
to that's one of the best parts so you

398
00:15:06,170 --> 00:15:07,880
till you have a gallery or a product

399
00:15:07,880 --> 00:15:10,070
page where you need to click to expand

400
00:15:10,070 --> 00:15:10,760
something right

401
00:15:10,760 --> 00:15:13,220
well backdrop filter can enhance that

402
00:15:13,220 --> 00:15:14,360
and make it more interesting so here

403
00:15:14,360 --> 00:15:16,130
it's blurring the background and

404
00:15:16,130 --> 00:15:18,740
adjusting the hue when the image scales

405
00:15:18,740 --> 00:15:20,420
up so being able to apply these kind of

406
00:15:20,420 --> 00:15:23,030
blending and filtering effects the HTML

407
00:15:23,030 --> 00:15:25,730
elements just with CFS really gives us a

408
00:15:25,730 --> 00:15:27,380
lot of power and flexibility when we're

409
00:15:27,380 --> 00:15:31,010
designing and building our projects now

410
00:15:31,010 --> 00:15:33,910
in a similar vein one feature that is

411
00:15:33,910 --> 00:15:35,980
sort of letting us break out of that

412
00:15:35,980 --> 00:15:38,210
commonplace rectangular nature

413
00:15:38,210 --> 00:15:40,550
displaying content on the web if CSS

414
00:15:40,550 --> 00:15:42,470
shapes because our designs usually

415
00:15:42,470 --> 00:15:45,590
consist of shapes like polygons and

416
00:15:45,590 --> 00:15:47,150
circles but our content is usually

417
00:15:47,150 --> 00:15:49,340
contained with these rectangular boxes

418
00:15:49,340 --> 00:15:51,170
well shapes provide a whole new way to

419
00:15:51,170 --> 00:15:53,840
set our how our context wraps or flows

420
00:15:53,840 --> 00:15:55,010
on the page so we're able to use

421
00:15:55,010 --> 00:15:58,490
geometric shapes as CSS values and have

422
00:15:58,490 --> 00:16:00,890
our text flow around those shapes so for

423
00:16:00,890 --> 00:16:03,530
now the the shapes feature only works on

424
00:16:03,530 --> 00:16:05,780
floated element using the new shape

425
00:16:05,780 --> 00:16:07,640
outside property so for instance we can

426
00:16:07,640 --> 00:16:10,280
take this circular image here float it

427
00:16:10,280 --> 00:16:13,040
left in our design and then define an

428
00:16:13,040 --> 00:16:15,650
out shape outside property to turn on

429
00:16:15,650 --> 00:16:16,940
the safe feature that's what makes it

430
00:16:16,940 --> 00:16:19,100
work and then the value you see here the

431
00:16:19,100 --> 00:16:20,990
circle function that's the new function

432
00:16:20,990 --> 00:16:23,840
that's going to create the CSS shape

433
00:16:23,840 --> 00:16:25,970
it's a for example it's going to set the

434
00:16:25,970 --> 00:16:28,460
inline text to flow around the circular

435
00:16:28,460 --> 00:16:30,590
shape of the image so that's pretty neat

436
00:16:30,590 --> 00:16:32,030
but what's what's interesting is that

437
00:16:32,030 --> 00:16:35,180
you can also leverage the box model and

438
00:16:35,180 --> 00:16:37,940
use regular box model keyword values to

439
00:16:37,940 --> 00:16:41,120
flow content around a circular image for

440
00:16:41,120 --> 00:16:43,490
example so the image already uses a

441
00:16:43,490 --> 00:16:45,680
border radius to create that circle or

442
00:16:45,680 --> 00:16:47,930
effect so instead of having a browser to

443
00:16:47,930 --> 00:16:50,060
do a little bit of extra work to

444
00:16:50,060 --> 00:16:53,180
redefine a circular shape you can set

445
00:16:53,180 --> 00:16:55,640
shape outside to border box all pretty

446
00:16:55,640 --> 00:16:56,940
familiar with that

447
00:16:56,940 --> 00:16:59,130
and then the text will follow the outer

448
00:16:59,130 --> 00:17:01,830
image the outer wrap images circular

449
00:17:01,830 --> 00:17:05,340
border now the way you apply a margin

450
00:17:05,340 --> 00:17:06,990
when you're using these box model

451
00:17:06,990 --> 00:17:08,730
keyword values is with the new shape

452
00:17:08,730 --> 00:17:11,250
margin property as per example here

453
00:17:11,250 --> 00:17:13,110
we're setting it to 20 pixels and this

454
00:17:13,110 --> 00:17:15,420
is also a new new property of the shapes

455
00:17:15,420 --> 00:17:19,320
module now the polygon function that's

456
00:17:19,320 --> 00:17:20,250
the one that's going to give you

457
00:17:20,250 --> 00:17:23,220
unlimited shaped possibilities in your

458
00:17:23,220 --> 00:17:25,650
design right with polygon you create a

459
00:17:25,650 --> 00:17:28,170
shape by defining those XY coordinates

460
00:17:28,170 --> 00:17:29,760
for each point in the polygon so for

461
00:17:29,760 --> 00:17:32,520
example you can set a text to flow

462
00:17:32,520 --> 00:17:35,310
around the right edge of a triangle

463
00:17:35,310 --> 00:17:37,500
using three polygon points and that will

464
00:17:37,500 --> 00:17:38,610
give you something like this you see the

465
00:17:38,610 --> 00:17:39,900
content wrapping around the right

466
00:17:39,900 --> 00:17:43,020
slanted edge this one's a little bit

467
00:17:43,020 --> 00:17:46,680
more complex I define multiple polygon

468
00:17:46,680 --> 00:17:48,540
points to set the heading in paragraph

469
00:17:48,540 --> 00:17:50,970
to flow around the contours of my

470
00:17:50,970 --> 00:17:54,270
coworker Nick and yeah use these the

471
00:17:54,270 --> 00:17:57,540
handy CSS shapes editor tool it's a

472
00:17:57,540 --> 00:17:59,640
Chrome extension to create this and a

473
00:17:59,640 --> 00:18:01,230
lot of the shapes I'd experiment with

474
00:18:01,230 --> 00:18:02,940
but polygon and if you haven't seen this

475
00:18:02,940 --> 00:18:04,350
yet it's an interactive shapes editor

476
00:18:04,350 --> 00:18:06,930
that lets you edit polygons points and

477
00:18:06,930 --> 00:18:08,430
you can immediately visualize how your

478
00:18:08,430 --> 00:18:10,050
the text is going to flow around the

479
00:18:10,050 --> 00:18:13,950
shape you set now a feature that works

480
00:18:13,950 --> 00:18:17,130
very well along take long side shapes is

481
00:18:17,130 --> 00:18:21,180
the clip pet so clipping is a longtime

482
00:18:21,180 --> 00:18:23,940
teacher of graphic design that's you

483
00:18:23,940 --> 00:18:26,250
stood partially or fully high parts of a

484
00:18:26,250 --> 00:18:29,130
graphics and CSS the clip path property

485
00:18:29,130 --> 00:18:31,710
lets you clip portions of an HTML

486
00:18:31,710 --> 00:18:33,570
element and like CSS J's we're not

487
00:18:33,570 --> 00:18:35,610
limited to rectangular clipping paths

488
00:18:35,610 --> 00:18:37,560
we're able to draw clipping regions with

489
00:18:37,560 --> 00:18:40,370
basic shapes polygon points even in SVG

490
00:18:40,370 --> 00:18:44,430
and so we use the clip path property and

491
00:18:44,430 --> 00:18:46,140
that's going to create a clipping region

492
00:18:46,140 --> 00:18:49,020
that will set the visible portions of an

493
00:18:49,020 --> 00:18:50,310
element so for example you can quickly

494
00:18:50,310 --> 00:18:52,590
and easily remove background portions of

495
00:18:52,590 --> 00:18:54,360
an image in your design for example this

496
00:18:54,360 --> 00:18:56,880
dark area here and we're giving clip

497
00:18:56,880 --> 00:18:59,220
paths the circle property it's a circle

498
00:18:59,220 --> 00:19:00,540
function and that's one of the basic

499
00:19:00,540 --> 00:19:02,430
shape functions that's going to define a

500
00:19:02,430 --> 00:19:04,870
clipping path

501
00:19:04,870 --> 00:19:06,940
so now any part outside of that clipping

502
00:19:06,940 --> 00:19:09,490
region they become hidden or or clipped

503
00:19:09,490 --> 00:19:11,890
right to reveal the circular image so

504
00:19:11,890 --> 00:19:14,799
using what's great is that using clip

505
00:19:14,799 --> 00:19:17,200
path and CSS shapes they work

506
00:19:17,200 --> 00:19:20,470
hand-in-hand so you can reuse your clip

507
00:19:20,470 --> 00:19:23,020
path values right - to define a shape

508
00:19:23,020 --> 00:19:24,429
around your clipping path they both use

509
00:19:24,429 --> 00:19:25,900
it exactly the same syntax that for

510
00:19:25,900 --> 00:19:28,809
example here we're providing the shape

511
00:19:28,809 --> 00:19:30,309
outside property the same exact circle

512
00:19:30,309 --> 00:19:32,140
function we gave clip back and that's

513
00:19:32,140 --> 00:19:33,520
going to flow the text around that clip

514
00:19:33,520 --> 00:19:39,159
region looks really wide there so in

515
00:19:39,159 --> 00:19:41,440
your markup you can also do this with

516
00:19:41,440 --> 00:19:43,690
SVG right so you use the the clip path

517
00:19:43,690 --> 00:19:47,049
SVG element inside it and you define all

518
00:19:47,049 --> 00:19:49,330
your polygon points and then in your CSS

519
00:19:49,330 --> 00:19:51,220
you can reference that clip app with the

520
00:19:51,220 --> 00:19:53,799
clip a property the URL function and

521
00:19:53,799 --> 00:19:57,429
then you call up the clip path ID and

522
00:19:57,429 --> 00:19:59,080
then that could produce something like

523
00:19:59,080 --> 00:20:01,870
this right so this is a heading with a

524
00:20:01,870 --> 00:20:03,820
div it with a background image and as

525
00:20:03,820 --> 00:20:05,620
you can see that the polygon points they

526
00:20:05,620 --> 00:20:07,899
follow the exact shapes of the

527
00:20:07,899 --> 00:20:09,789
mountaintops so as a result those

528
00:20:09,789 --> 00:20:12,130
portions get clipped and clip out the

529
00:20:12,130 --> 00:20:16,000
the bottom part of the text now to help

530
00:20:16,000 --> 00:20:17,860
you set clipping paths developer Bennett

531
00:20:17,860 --> 00:20:19,570
feely he built this really fun and

532
00:20:19,570 --> 00:20:21,490
useful tool it's an interactive tool

533
00:20:21,490 --> 00:20:23,559
called Clippy and you can use the tool

534
00:20:23,559 --> 00:20:26,260
to create clip paths shakes or just

535
00:20:26,260 --> 00:20:27,940
simply experiment with what CSS clip

536
00:20:27,940 --> 00:20:30,669
paths can do for you right so to give

537
00:20:30,669 --> 00:20:31,990
you an example we've all seen that

538
00:20:31,990 --> 00:20:35,140
trendy slanted header effect on websites

539
00:20:35,140 --> 00:20:36,820
and applications I've seen it done with

540
00:20:36,820 --> 00:20:38,860
pseudo elements and transform so I've

541
00:20:38,860 --> 00:20:42,120
seen it done with SPG's or with an image

542
00:20:42,120 --> 00:20:45,220
what will it - like clip e in clip path

543
00:20:45,220 --> 00:20:46,960
you can really create it pretty quickly

544
00:20:46,960 --> 00:20:48,399
in a few seconds to drag the controls

545
00:20:48,399 --> 00:20:50,620
around to create the shapes then copy

546
00:20:50,620 --> 00:20:52,360
and paste the code it spits out it into

547
00:20:52,360 --> 00:20:54,159
your CSS for example they had a rule and

548
00:20:54,159 --> 00:20:56,770
you and you get that visual effect and

549
00:20:56,770 --> 00:20:58,059
what's great is that when you use

550
00:20:58,059 --> 00:21:01,840
percentage based coordinates it's going

551
00:21:01,840 --> 00:21:03,789
to give you flexible and responsible

552
00:21:03,789 --> 00:21:09,820
clipping paths all right now color

553
00:21:09,820 --> 00:21:13,510
module level 4 is going to give you new

554
00:21:13,510 --> 00:21:15,460
interesting ways to apply color values

555
00:21:15,460 --> 00:21:17,230
in your CSS so you're going to have new

556
00:21:17,230 --> 00:21:19,210
color functions that let you adjust and

557
00:21:19,210 --> 00:21:21,400
modify colors you're going to have new

558
00:21:21,400 --> 00:21:23,290
values for setting the opacity of colors

559
00:21:23,290 --> 00:21:25,320
and one of those is 8 digit hex notation

560
00:21:25,320 --> 00:21:27,760
and this is going to let you set RGB a

561
00:21:27,760 --> 00:21:30,760
channels as regular hexadecimal values

562
00:21:30,760 --> 00:21:32,590
so in other words you get to do alpha

563
00:21:32,590 --> 00:21:35,650
directly in hex by simply tacking on a

564
00:21:35,650 --> 00:21:37,540
pair of digits to to the value so those

565
00:21:37,540 --> 00:21:39,100
last two digits specify the Alpha

566
00:21:39,100 --> 00:21:41,260
Channel of the color we're value of zero

567
00:21:41,260 --> 00:21:42,880
zero gives you a fully transparent color

568
00:21:42,880 --> 00:21:46,150
and FF represents a fully opaque color

569
00:21:46,150 --> 00:21:49,210
and it uses the the regular hexadecimal

570
00:21:49,210 --> 00:21:50,980
system to define the Alpha so if you're

571
00:21:50,980 --> 00:21:53,050
used to defining your values in RGB a or

572
00:21:53,050 --> 00:21:55,300
hsla you'll find that it can be a little

573
00:21:55,300 --> 00:21:57,130
bit unintuitive at first so for instance

574
00:21:57,130 --> 00:21:59,620
if you want to set a 50 percent

575
00:21:59,620 --> 00:22:01,720
transparency you're going to use 80 not

576
00:22:01,720 --> 00:22:06,310
50 and then 80 would be CC 20 is 33 and

577
00:22:06,310 --> 00:22:07,630
so on so it can be a little tricky at

578
00:22:07,630 --> 00:22:09,700
first but there are some charts out

579
00:22:09,700 --> 00:22:11,050
there that you can use as a preference

580
00:22:11,050 --> 00:22:15,280
for 8 digit X values for alpha and one

581
00:22:15,280 --> 00:22:17,140
of the best places to use these are

582
00:22:17,140 --> 00:22:18,670
going to be in places where you've

583
00:22:18,670 --> 00:22:21,310
already defined hex values and you just

584
00:22:21,310 --> 00:22:25,150
want to add a city to it right or if you

585
00:22:25,150 --> 00:22:27,850
just heart using hex values in general

586
00:22:27,850 --> 00:22:29,830
you're those extra two digits might save

587
00:22:29,830 --> 00:22:31,630
you the time it might take to look up

588
00:22:31,630 --> 00:22:34,750
the RGB equivalent of a color now

589
00:22:34,750 --> 00:22:36,550
browser support for a digit hex is

590
00:22:36,550 --> 00:22:38,080
currently limited it's limited to

591
00:22:38,080 --> 00:22:41,680
Firefox and Safari but you can also use

592
00:22:41,680 --> 00:22:43,480
it in Chrome if you've enabled the

593
00:22:43,480 --> 00:22:45,750
experimental web platform features

594
00:22:45,750 --> 00:22:50,800
now not all hex RGB HSL values are easy

595
00:22:50,800 --> 00:22:52,480
to remember right so if you if you're

596
00:22:52,480 --> 00:22:55,420
writing plain CSS changing or adjusting

597
00:22:55,420 --> 00:22:57,310
a color value often means having a

598
00:22:57,310 --> 00:22:59,740
reference your graphics editor or color

599
00:22:59,740 --> 00:23:02,260
tool and pre-process letters already

600
00:23:02,260 --> 00:23:04,720
offer color functions right that can

601
00:23:04,720 --> 00:23:07,240
apply transparency to colors have

602
00:23:07,240 --> 00:23:09,040
functions that can darken them lighten

603
00:23:09,040 --> 00:23:11,530
and blend them well CSS is about to take

604
00:23:11,530 --> 00:23:13,960
a huge leap forward and get a color

605
00:23:13,960 --> 00:23:16,630
modification function of its own the new

606
00:23:16,630 --> 00:23:18,550
color mod function is going to let you

607
00:23:18,550 --> 00:23:21,910
manipulate colors by taking a regular

608
00:23:21,910 --> 00:23:24,340
color value and applying color adjusters

609
00:23:24,340 --> 00:23:26,830
to it and these color adjusters are

610
00:23:26,830 --> 00:23:28,750
like smaller functions within color mod

611
00:23:28,750 --> 00:23:32,110
that for example can adjust the color

612
00:23:32,110 --> 00:23:34,630
few the Alpha lightness saturation blend

613
00:23:34,630 --> 00:23:36,670
colors together and lots lots lots more

614
00:23:36,670 --> 00:23:39,400
now this bag for this function is still

615
00:23:39,400 --> 00:23:41,110
a working draft but doesn't really have

616
00:23:41,110 --> 00:23:43,030
browser so good browser support yet but

617
00:23:43,030 --> 00:23:45,970
you can use it you can start using it in

618
00:23:45,970 --> 00:23:48,190
post ESS it has a color function that

619
00:23:48,190 --> 00:23:50,080
works exactly the way the color mod

620
00:23:50,080 --> 00:23:52,690
function is supposed to work and in fact

621
00:23:52,690 --> 00:23:55,000
color models named color and it was

622
00:23:55,000 --> 00:23:59,230
recently renamed color mod and you can

623
00:23:59,230 --> 00:24:01,510
begin experimenting with it in code pen

624
00:24:01,510 --> 00:24:04,870
if you've been able to post CSS and the

625
00:24:04,870 --> 00:24:07,630
color function atom so let's take a look

626
00:24:07,630 --> 00:24:09,070
at some of those works so for example we

627
00:24:09,070 --> 00:24:12,640
have a lightness adjuster here and that

628
00:24:12,640 --> 00:24:14,530
lightens a color value by the specified

629
00:24:14,530 --> 00:24:16,990
amount so for example 20% here you can

630
00:24:16,990 --> 00:24:18,490
also take away lightness by setting a

631
00:24:18,490 --> 00:24:20,710
negative percentage value but the best

632
00:24:20,710 --> 00:24:22,420
part is that you can pass two or more

633
00:24:22,420 --> 00:24:25,150
adjusters to your color mod function so

634
00:24:25,150 --> 00:24:28,540
alongside alpha and lightness the hue

635
00:24:28,540 --> 00:24:31,210
adjuster you see here changes the view

636
00:24:31,210 --> 00:24:33,610
of a color by rotating the color wheel

637
00:24:33,610 --> 00:24:35,530
by the specified amount so for example 5

638
00:24:35,530 --> 00:24:39,220
degrees here now if you throw CSS

639
00:24:39,220 --> 00:24:41,500
variables into the mix you can start to

640
00:24:41,500 --> 00:24:43,660
see how useful the color mod function

641
00:24:43,660 --> 00:24:45,850
can be for creating color palettes in

642
00:24:45,850 --> 00:24:47,350
your design from a small set of colors

643
00:24:47,350 --> 00:24:50,290
or from a single base color so here we

644
00:24:50,290 --> 00:24:51,820
have a set of color variables and

645
00:24:51,820 --> 00:24:53,050
they're created from a base color

646
00:24:53,050 --> 00:24:55,420
crimson and it's using adjusters like

647
00:24:55,420 --> 00:24:58,150
hue and lightness and it's even getting

648
00:24:58,150 --> 00:25:00,120
the complementary colors just to create

649
00:25:00,120 --> 00:25:02,260
strong visual contrast so now you can

650
00:25:02,260 --> 00:25:04,210
change that base color to any value like

651
00:25:04,210 --> 00:25:06,340
cornflower blue hot pink

652
00:25:06,340 --> 00:25:08,260
iein crimson and the rest of the colors

653
00:25:08,260 --> 00:25:09,460
are just going to adjust to that base

654
00:25:09,460 --> 00:25:10,960
value the route the result is a

655
00:25:10,960 --> 00:25:12,640
completely different color combination

656
00:25:12,640 --> 00:25:15,400
each time so having a way to quickly

657
00:25:15,400 --> 00:25:19,630
explore and manipulate colors on the fly

658
00:25:19,630 --> 00:25:21,850
right while working in the browser with

659
00:25:21,850 --> 00:25:23,170
a simple intuitive function like color

660
00:25:23,170 --> 00:25:25,060
mine's going to be a huge huge one for

661
00:25:25,060 --> 00:25:27,010
CSS and there's a really neat tool out

662
00:25:27,010 --> 00:25:29,740
there called color video and you can use

663
00:25:29,740 --> 00:25:31,180
these to compose your colors and

664
00:25:31,180 --> 00:25:33,190
experiment with all the color functions

665
00:25:33,190 --> 00:25:35,910
and all the adjusters

666
00:25:35,910 --> 00:25:38,340
cool let's keep moving so selectors

667
00:25:38,340 --> 00:25:40,140
level four there's a lots and lots of

668
00:25:40,140 --> 00:25:42,690
new selectors on the wave and level four

669
00:25:42,690 --> 00:25:45,240
now many of them are not supported by

670
00:25:45,240 --> 00:25:47,039
browsers yet because it's still sort of

671
00:25:47,039 --> 00:25:49,410
a working draft now I'll spend a little

672
00:25:49,410 --> 00:25:50,400
bit of time covering some of the

673
00:25:50,400 --> 00:25:52,919
selectors that I've found useful just a

674
00:25:52,919 --> 00:25:54,809
myelin work and something to have the

675
00:25:54,809 --> 00:25:56,570
most browser support and one of those is

676
00:25:56,570 --> 00:26:00,210
Nexus so matches is a functional pseudo

677
00:26:00,210 --> 00:26:01,890
class and it's going to help you write

678
00:26:01,890 --> 00:26:03,809
complex selectors or descendant

679
00:26:03,809 --> 00:26:05,820
selectors a lot faster and what it

680
00:26:05,820 --> 00:26:07,200
really does is just provide a little

681
00:26:07,200 --> 00:26:10,220
syntactic sugar for creating groups of

682
00:26:10,220 --> 00:26:12,870
descendants direct child even sibling

683
00:26:12,870 --> 00:26:15,809
selectors so matches is it takes of

684
00:26:15,809 --> 00:26:19,530
regular selectors as argument so for

685
00:26:19,530 --> 00:26:21,870
example here the selector is going to

686
00:26:21,870 --> 00:26:23,280
match any button class that's a

687
00:26:23,280 --> 00:26:26,159
descendant of card modal in form and

688
00:26:26,159 --> 00:26:27,900
it's the same as writing the the full

689
00:26:27,900 --> 00:26:29,480
selector group you see there below it

690
00:26:29,480 --> 00:26:31,950
you can also pass photo classes so this

691
00:26:31,950 --> 00:26:35,070
is going to make it a lot easier to for

692
00:26:35,070 --> 00:26:36,570
example style your links this is

693
00:26:36,570 --> 00:26:38,039
targeting the hover focus and active

694
00:26:38,039 --> 00:26:41,580
visit it all at once and inside matches

695
00:26:41,580 --> 00:26:44,220
you can pass through two elements and

696
00:26:44,220 --> 00:26:46,799
combinators but you can still create

697
00:26:46,799 --> 00:26:48,750
selectors using matches in a Combinator

698
00:26:48,750 --> 00:26:50,669
outside that argument list so for

699
00:26:50,669 --> 00:26:51,750
instance this is going to match any

700
00:26:51,750 --> 00:26:54,960
paragraph that's a adjacent sibling of

701
00:26:54,960 --> 00:26:58,289
image paragraph and form and as you can

702
00:26:58,289 --> 00:27:00,179
see it just saves a little time right by

703
00:27:00,179 --> 00:27:01,530
helping you to avoid writing out all

704
00:27:01,530 --> 00:27:04,110
those selector combinations manually now

705
00:27:04,110 --> 00:27:06,570
if you do a search for browser support

706
00:27:06,570 --> 00:27:08,280
on matches you'll find that it's

707
00:27:08,280 --> 00:27:11,400
implemented under the name any as it was

708
00:27:11,400 --> 00:27:12,630
originally known but it looks like it's

709
00:27:12,630 --> 00:27:14,070
going to be standardized in level 4

710
00:27:14,070 --> 00:27:17,880
under the name matches those are the new

711
00:27:17,880 --> 00:27:20,640
optionality pseudo classes that target

712
00:27:20,640 --> 00:27:23,610
form controls like text fields text

713
00:27:23,610 --> 00:27:25,260
areas and select and it targets them

714
00:27:25,260 --> 00:27:27,630
based on whether they are optional or

715
00:27:27,630 --> 00:27:29,010
required so you can spell them

716
00:27:29,010 --> 00:27:30,900
differently and there's the ones I

717
00:27:30,900 --> 00:27:32,850
really enjoyed using and had fun in my

718
00:27:32,850 --> 00:27:35,580
own work are the validity pseudo classes

719
00:27:35,580 --> 00:27:37,350
and these let you give your users visual

720
00:27:37,350 --> 00:27:39,450
feedback just based on the validity of

721
00:27:39,450 --> 00:27:41,340
the data they type into a field so for

722
00:27:41,340 --> 00:27:43,110
example if you have an email input field

723
00:27:43,110 --> 00:27:45,840
that's required you can define invalid

724
00:27:45,840 --> 00:27:47,669
and valid pseudo classes that style then

725
00:27:47,669 --> 00:27:49,230
just based on what you

726
00:27:49,230 --> 00:27:50,909
types into the field so here's the Texas

727
00:27:50,909 --> 00:27:52,980
if you've entered a valid email format

728
00:27:52,980 --> 00:27:55,769
for example and then at pseudo-classes

729
00:27:55,769 --> 00:27:58,080
to the mix sorry pseudo elements to the

730
00:27:58,080 --> 00:28:00,480
mixin and it can be really useful it

731
00:28:00,480 --> 00:28:01,799
gives you there's even more visual

732
00:28:01,799 --> 00:28:03,539
feedback like you can display an icon

733
00:28:03,539 --> 00:28:06,360
when the data goes from invalid to valid

734
00:28:06,360 --> 00:28:08,340
so here's going to display that smiley

735
00:28:08,340 --> 00:28:15,149
emoji for example now you can take

736
00:28:15,149 --> 00:28:17,399
things a few steps further and display

737
00:28:17,399 --> 00:28:20,190
an icon for both in valid and invalid

738
00:28:20,190 --> 00:28:22,610
emails now normally you'll maybe use

739
00:28:22,610 --> 00:28:24,870
JavaScript right to to do something like

740
00:28:24,870 --> 00:28:25,860
this but we'll see the size you get

741
00:28:25,860 --> 00:28:27,990
these input validation checks for free

742
00:28:27,990 --> 00:28:30,389
now it's not going to check if the email

743
00:28:30,389 --> 00:28:32,789
itself is a valid email it's just

744
00:28:32,789 --> 00:28:34,559
validating the inputs according to the

745
00:28:34,559 --> 00:28:38,340
validity semantics defined by HTML as a

746
00:28:38,340 --> 00:28:39,870
few sites out there that can help you

747
00:28:39,870 --> 00:28:41,700
keep track on browser support for these

748
00:28:41,700 --> 00:28:43,159
level 4 selectors if you don't want to

749
00:28:43,159 --> 00:28:45,779
individually search for them on for

750
00:28:45,779 --> 00:28:47,789
example can I use com you can use CSS

751
00:28:47,789 --> 00:28:50,610
for selectors com to see if your browser

752
00:28:50,610 --> 00:28:52,380
supports some of these and it'll let you

753
00:28:52,380 --> 00:28:55,169
know now finally some of the features I

754
00:28:55,169 --> 00:28:57,840
talked about they're not they're new to

755
00:28:57,840 --> 00:28:59,370
browsers right so they're not all

756
00:28:59,370 --> 00:29:01,019
supported yet everywhere but that

757
00:29:01,019 --> 00:29:04,139
shouldn't mean that you can't use them

758
00:29:04,139 --> 00:29:05,700
or at least begin experimenting with

759
00:29:05,700 --> 00:29:06,779
them right you're still able to use a

760
00:29:06,779 --> 00:29:09,120
lot of those today while providing these

761
00:29:09,120 --> 00:29:10,649
elegant fallbacks for browsers that

762
00:29:10,649 --> 00:29:12,179
don't support them using feature queries

763
00:29:12,179 --> 00:29:14,970
so the app support rule is bringing

764
00:29:14,970 --> 00:29:18,120
native feature detection to CSS so I can

765
00:29:18,120 --> 00:29:19,519
analyze whether or not a browser

766
00:29:19,519 --> 00:29:22,500
supports a CSS property it looks a lot

767
00:29:22,500 --> 00:29:24,179
like a media query so for example here

768
00:29:24,179 --> 00:29:26,399
at the bottom this is querying for grid

769
00:29:26,399 --> 00:29:28,649
layout and it's specifying the the

770
00:29:28,649 --> 00:29:30,419
property value pair used to define a

771
00:29:30,419 --> 00:29:32,220
grid display grid so then inside the

772
00:29:32,220 --> 00:29:35,039
rule we're inside the supports rule we

773
00:29:35,039 --> 00:29:37,919
are including all the the grid styles

774
00:29:37,919 --> 00:29:40,110
for the content and then flexbox

775
00:29:40,110 --> 00:29:42,120
currently has better support than grids

776
00:29:42,120 --> 00:29:43,799
right so the browsers that don't support

777
00:29:43,799 --> 00:29:46,110
read layout are going to layout the

778
00:29:46,110 --> 00:29:47,610
content using the Flex box properties

779
00:29:47,610 --> 00:29:49,529
defined outside the feature foyer so

780
00:29:49,529 --> 00:29:51,000
it's kind of like having moderniser

781
00:29:51,000 --> 00:29:53,010
which is a feature detection tool built

782
00:29:53,010 --> 00:29:54,539
with JavaScript but right in the browser

783
00:29:54,539 --> 00:29:56,880
it's going to perform a lot faster and

784
00:29:56,880 --> 00:29:58,440
you can query multiple features at once

785
00:29:58,440 --> 00:30:00,240
so for example here up top

786
00:30:00,240 --> 00:30:00,780
we

787
00:30:00,780 --> 00:30:02,610
the and operator and that's checking for

788
00:30:02,610 --> 00:30:04,920
grid and writing modes of work and

789
00:30:04,920 --> 00:30:07,710
writing mode is also a new CSS property

790
00:30:07,710 --> 00:30:09,720
that changes the layout in alignment of

791
00:30:09,720 --> 00:30:11,850
text so in browser supporting both

792
00:30:11,850 --> 00:30:14,340
features users will do something like

793
00:30:14,340 --> 00:30:16,470
this and browsers that don't support

794
00:30:16,470 --> 00:30:18,120
these will simply display a normal

795
00:30:18,120 --> 00:30:19,530
heading in paragraph which isn't a big

796
00:30:19,530 --> 00:30:21,570
deal and as you can see there they have

797
00:30:21,570 --> 00:30:23,700
really good browser support the feature

798
00:30:23,700 --> 00:30:25,650
queries do and the supports rule and

799
00:30:25,650 --> 00:30:27,420
browsers that don't support these

800
00:30:27,420 --> 00:30:28,890
feature queries they're going to ignore

801
00:30:28,890 --> 00:30:30,330
what's written inside the support rule

802
00:30:30,330 --> 00:30:33,650
and just fall back to your regular CSS

803
00:30:33,650 --> 00:30:36,240
and finally here's the list of the

804
00:30:36,240 --> 00:30:38,730
browser support links I talked about

805
00:30:38,730 --> 00:30:40,350
earlier that covers all the features I

806
00:30:40,350 --> 00:30:41,940
talked today I talked about today and

807
00:30:41,940 --> 00:30:45,300
yeah as with almost anything in

808
00:30:45,300 --> 00:30:47,010
front-end web development and web

809
00:30:47,010 --> 00:30:48,930
development there's so many features and

810
00:30:48,930 --> 00:30:50,790
factors to consider when building your

811
00:30:50,790 --> 00:30:52,680
projects so many of the things I've

812
00:30:52,680 --> 00:30:55,170
covered are really enhancement features

813
00:30:55,170 --> 00:30:57,180
right so you don't want to overdo it and

814
00:30:57,180 --> 00:30:59,550
you want to be sure that your design and

815
00:30:59,550 --> 00:31:01,650
content still still speaks to your users

816
00:31:01,650 --> 00:31:02,790
even with some of these features in

817
00:31:02,790 --> 00:31:04,380
place so hopefully what I talked about

818
00:31:04,380 --> 00:31:06,120
today gives you lots of interesting new

819
00:31:06,120 --> 00:31:09,000
ideas for your next project and as I

820
00:31:09,000 --> 00:31:11,280
always tell students that treehouse

821
00:31:11,280 --> 00:31:13,500
right this use all the guidelines and

822
00:31:13,500 --> 00:31:15,600
suggestions and the things you learn and

823
00:31:15,600 --> 00:31:18,420
see just the final works best for you

824
00:31:18,420 --> 00:31:20,250
and your project in your team you don't

825
00:31:20,250 --> 00:31:21,990
have to immediately use all the new

826
00:31:21,990 --> 00:31:23,460
things and learn everything just because

827
00:31:23,460 --> 00:31:24,750
they're popular at the moment right

828
00:31:24,750 --> 00:31:26,910
matter of preference a lot of it so

829
00:31:26,910 --> 00:31:28,440
what's important you develop your own

830
00:31:28,440 --> 00:31:30,690
approach style and just because since

831
00:31:30,690 --> 00:31:33,120
consistent about it right and that's all

832
00:31:33,120 --> 00:31:37,810
I have to say thanks

