1
00:00:01,430 --> 00:00:13,600
Thank you.

2
00:00:13,600 --> 00:00:21,230
Thank you for the introduction.

3
00:00:21,230 --> 00:00:26,580
So, like he said, I want to talk about Javascript
tools today.

4
00:00:26,580 --> 00:00:33,070
And specifically how you can use type information
to help scale your code base. As you add more

5
00:00:33,070 --> 00:00:38,760
code and developers, there are areas where
it is harder to maintain and evolving and

6
00:00:38,760 --> 00:00:40,940
changing.

7
00:00:40,940 --> 00:00:44,550
My name is Mark. I'm software engineer at
Google.

8
00:00:44,550 --> 00:00:48,500
This is the number of lines of JS lines at
Google.

9
00:00:48,500 --> 00:00:54,780
It is up to the right. It is going at fast
pace.

10
00:00:54,780 --> 00:01:01,000
We are adding the size multiple times a year
now.

11
00:01:01,000 --> 00:01:08,140
The number of developers are going at that
same pace. A bit frightening.

12
00:01:08,140 --> 00:01:15,110
With this we have 1 single large codebase.
At some point this becomes harder to maintain,

13
00:01:15,110 --> 00:01:18,790
change the codebase and keep a high quality
part.

14
00:01:18,790 --> 00:01:27,430
And so, myself and a few others at Google
spend time to figure out what we can do to

15
00:01:27,430 --> 00:01:33,240
eliviate this problem. To make it easier to
keep the codebase.

16
00:01:33,240 --> 00:01:39,330
One example challenge. If you want to rename
a function.

17
00:01:39,330 --> 00:01:41,340
You have a class and define a function.

18
00:01:41,340 --> 00:01:43,869
It has a generic name to it.

19
00:01:43,869 --> 00:01:49,260
But, because your code is so large, you have
50 other classes that have that name. How

20
00:01:49,260 --> 00:01:57,170
do you differentiate between codes, 2 objects
of the type. When you want to rename one and

21
00:01:57,170 --> 00:01:59,579
not the other one.

22
00:01:59,579 --> 00:02:06,990
This and other problems. To help fix these
we worked on 2 tools.

23
00:02:06,990 --> 00:02:10,140
The first is RefasterJS.

24
00:02:10,140 --> 00:02:13,329
Tool to make refactoring easy.

25
00:02:13,329 --> 00:02:18,319
All the excuses that developer can come up
why it is hard to change code.

26
00:02:18,319 --> 00:02:24,290
There are too many people to depend on it.
It is impossible to fix.

27
00:02:24,290 --> 00:02:28,939
This ptool should make this all go away.

28
00:02:28,939 --> 00:02:31,999
The second thing is JS conformance.

29
00:02:31,999 --> 00:02:39,780
A way to prevent bad code from coming back.
It helps developers and your project keep

30
00:02:39,780 --> 00:02:41,510
a high code quality.

31
00:02:41,510 --> 00:02:46,659
No matter who is submitting the code, you
can make sure it is preventing bad code from

32
00:02:46,659 --> 00:02:49,349
coming in.

33
00:02:49,349 --> 00:02:51,840
To tie everything in.

34
00:02:51,840 --> 00:02:57,359
It is important. How do you eliminate Xss
issues in your project?

35
00:02:57,359 --> 00:03:06,609
It can be costly to the user. Using user data.
And the company with lawsuits, privacy. And

36
00:03:06,609 --> 00:03:07,609
so forth.

37
00:03:07,609 --> 00:03:15,930
And so, using RefasterJS and existing. And
how Conformance can prevent from coming back

38
00:03:15,930 --> 00:03:20,209
again.

39
00:03:20,209 --> 00:03:26,830
This example is based on something the Security
at Google has worked on over the last year.

40
00:03:26,830 --> 00:03:39,439
They call Api hardening. Specifically, they
worked on a library,goog.Dom.Safe.

41
00:03:39,439 --> 00:03:50,799
The dom Api has a lot of security holes.

42
00:03:50,799 --> 00:04:01,459
And important is, if you are assigned to the
Hrf window.Location. And the they can execute

43
00:04:01,459 --> 00:04:08,230
arbitrary javascript code.

44
00:04:08,230 --> 00:04:14,430
With a very tiny change that anyone could
implement, you can rewrite it to a safe set

45
00:04:14,430 --> 00:04:22,560
of location. That would sanitize the input.
No attack is executed.

46
00:04:22,560 --> 00:04:32,070
A colleague of mine published an article on
the Acm. On the overall effort and other api's.

47
00:04:32,070 --> 00:04:34,590
An interesting read.

48
00:04:34,590 --> 00:04:40,770
So, to dive into the first tool I want to
talk about is RefasterJS.

49
00:04:40,770 --> 00:04:46,520
This i a tool where you write Ravascript.

50
00:04:46,520 --> 00:04:50,979
We shouldn't have to write another language
or learn something new to try to change a

51
00:04:50,979 --> 00:04:51,979
piece of code.

52
00:04:51,979 --> 00:05:02,180
We should be able to write and something should
make that happen.

53
00:05:02,180 --> 00:05:08,150
It is core additional. Type information to
pinpoint the code that you want to change.

54
00:05:08,150 --> 00:05:13,550
It is not matching too much, and not too little.
Just matching what you want.

55
00:05:13,550 --> 00:05:19,569
We ran it over the google javascript.

56
00:05:19,569 --> 00:05:25,750
It is running in minutes across large sets
of code.

57
00:05:25,750 --> 00:05:34,640
The core piece of thing you need to provide
is a JS file. It looks like this.

58
00:05:34,640 --> 00:05:40,930
And there is 2 functions that you provide
to the refasterJS tool.

59
00:05:40,930 --> 00:05:48,210
If you notice, these tools are based on the
closure compilor. An open source compiler

60
00:05:48,210 --> 00:05:50,110
from Google.

61
00:05:50,110 --> 00:05:56,719
Main thing is the ability to process type
information and store it and use it at later

62
00:05:56,719 --> 00:05:58,740
time to do time checking and optimisations.

63
00:05:58,740 --> 00:06:06,789
If you are familiar with that you are familiar
with the type annotation syntax.

64
00:06:06,789 --> 00:06:17,630
But, the first template shows, what code should
be matched. If you pass 100 source files it

65
00:06:17,630 --> 00:06:21,990
knows which statements are the ones you want
to target.

66
00:06:21,990 --> 00:06:26,669
And the second thing is that when you have
those matches, how do you apply a fix? How

67
00:06:26,669 --> 00:06:30,919
do you transform the code? What should it
look like?

68
00:06:30,919 --> 00:06:35,879
In this case we want to match any direct assignments
to location.href and transform it to use the

69
00:06:35,879 --> 00:06:39,409
goog.dom.safe library.

70
00:06:39,409 --> 00:06:44,659
And so, looking at the matching code, it looks
a little bit like this.

71
00:06:44,659 --> 00:06:51,999
And this will match the direct assignment
where you have the lefthand side window.Location.href

72
00:06:51,999 --> 00:06:53,680
equals some string.

73
00:06:53,680 --> 00:07:01,599
But also, match the alias, window.Location
to local variable.

74
00:07:01,599 --> 00:07:08,490
And on the righthandside you have a function
that returns. It still knows how to match.

75
00:07:08,490 --> 00:07:17,719
This is not of the correct type. This is where
the type information comes into play because

76
00:07:17,719 --> 00:07:21,909
it knows how to differentiate between these
cases.

77
00:07:21,909 --> 00:07:24,860
How does it do this?

78
00:07:24,860 --> 00:07:29,139
Well, the first thing it needs to do is build
an AST.

79
00:07:29,139 --> 00:07:31,800
An abstract syntex tree.

80
00:07:31,800 --> 00:07:38,860
Without going into detail. How does a compiler
represent a piece of code?

81
00:07:38,860 --> 00:07:44,370
As you see here on the lefthandside is the
node structure.

82
00:07:44,370 --> 00:07:55,310
An assignment, the lefthandside with property
and lefthandside with variable.

83
00:07:55,310 --> 00:08:02,270
On the righthandside you can see highlighted,
this preserves type information.

84
00:08:02,270 --> 00:08:07,340
A lot of other Ast's don't preserve this information.

85
00:08:07,340 --> 00:08:13,300
They don't know how to infer the type information
for code.

86
00:08:13,300 --> 00:08:24,550
And looking at a quick demo, there is a webservice
tool.

87
00:08:24,550 --> 00:08:28,330
Where we can look. That the compiler team
provides.

88
00:08:28,330 --> 00:08:31,389
We can store a piece of code here.

89
00:08:31,389 --> 00:08:34,990
Zooming is not working very well.

90
00:08:34,990 --> 00:08:42,449
And then on the righthandside when we compile
this, we can see what the Ast looks like.

91
00:08:42,449 --> 00:08:46,070
This is exactly the same as what you see on
the slides.

92
00:08:46,070 --> 00:08:53,449
We have the variable declarations for accessing,
storing the Url and the location object into

93
00:08:53,449 --> 00:08:55,050
local variables.

94
00:08:55,050 --> 00:08:59,880
You see here, it knows the type information.

95
00:08:59,880 --> 00:09:07,889
whether it is a string or window object or
location object.

96
00:09:07,889 --> 00:09:13,329
That's a nifty tool if you want to play around
and see what the compiler is doing. And what

97
00:09:13,329 --> 00:09:16,050
the Ast, and types look like.

98
00:09:16,050 --> 00:09:23,000
Once you have this, then the tool needs to
compare structures from the template against

99
00:09:23,000 --> 00:09:24,000
the source code.

100
00:09:24,000 --> 00:09:29,459
There are a lot of different ways to do it.
Depending on the accuracy and what you have

101
00:09:29,459 --> 00:09:30,709
available.

102
00:09:30,709 --> 00:09:38,350
A naieve approach is this.

103
00:09:38,350 --> 00:09:47,010
You take the lefthandside. Which is the structure
of the code and make sure that those match.

104
00:09:47,010 --> 00:09:53,720
And if you change 1 node in it. You change
it from a variable to a string, then it won't

105
00:09:53,720 --> 00:09:55,370
match anymore.

106
00:09:55,370 --> 00:10:01,000
This will match things like location.Href
= url.

107
00:10:01,000 --> 00:10:07,640
Some randomobject. With somestring. That is
the same structure. Even though the types

108
00:10:07,640 --> 00:10:11,230
and the names are different.

109
00:10:11,230 --> 00:10:13,580
It won't match something like location.Href.

110
00:10:13,580 --> 00:10:17,639
They have different structures.

111
00:10:17,639 --> 00:10:22,290
You can improve this a little bit. You can
use the node structure and the name of the

112
00:10:22,290 --> 00:10:24,320
variables.

113
00:10:24,320 --> 00:10:29,019
But again if you do that, changing one of
the two, the structure or the variable name

114
00:10:29,019 --> 00:10:31,380
causes it to break.

115
00:10:31,380 --> 00:10:38,709
This will match, it will match that.

116
00:10:38,709 --> 00:10:44,120
Also matches if you just have a normal object.
And it won't match where you change the variable

117
00:10:44,120 --> 00:10:49,370
name zozer this is not really what we want.
It is not accurate enough.

118
00:10:49,370 --> 00:10:56,930
That's where we get to the last matching.
It uses the node name instruction. Or the

119
00:10:56,930 --> 00:10:58,240
JS type.

120
00:10:58,240 --> 00:11:03,660
This is where the type comes in handy to have
the flexibility to match different pieces

121
00:11:03,660 --> 00:11:05,060
of code.

122
00:11:05,060 --> 00:11:12,300
And so, every level in this Ast you can see
it is matching on left or righthandside.

123
00:11:12,300 --> 00:11:15,680
It doesn't have to match both.

124
00:11:15,680 --> 00:11:19,850
And the way it knows whether which one it
needs to match, you told it.

125
00:11:19,850 --> 00:11:23,250
In the template you told it which are the
types.

126
00:11:23,250 --> 00:11:27,820
And which have to be the exact same thing.

127
00:11:27,820 --> 00:11:31,990
The Href property has to be href.

128
00:11:31,990 --> 00:11:40,430
Here you see that the boxes correspond, these
Ast's are different. They use the same type

129
00:11:40,430 --> 00:11:46,920
zozer this is okay. This is what RefasterJs
matches.

130
00:11:46,920 --> 00:12:00,449
And so with this, we get matching the alias
case. Or where we have the whole thing.

131
00:12:00,449 --> 00:12:06,589
We don't get, if you just have an object.
assign a property on that. It is of a different

132
00:12:06,589 --> 00:12:13,440
type. This is looking pretty good. It will
match the right set of code.

133
00:12:13,440 --> 00:12:17,949
Once we have that, then we need to take this
code and transform it to what the code we

134
00:12:17,949 --> 00:12:19,850
wanted to look like.

135
00:12:19,850 --> 00:12:25,490
And so, it looks, this function looks similar
to the before case. Except the body of the

136
00:12:25,490 --> 00:12:33,890
function corresponds to what you want the
code to look like.

137
00:12:33,890 --> 00:12:39,139
And so, it will take an iexample like the
top piece of code and then transform it to

138
00:12:39,139 --> 00:12:40,959
something like the bottom piece of code.

139
00:12:40,959 --> 00:12:47,170
Where you preserve the names. The tool doesn't
care about that.

140
00:12:47,170 --> 00:12:55,709
You can alias window.Location to any name.
And it will preserve the right piece of code.

141
00:12:55,709 --> 00:12:59,770
It does it because of the matching by type.

142
00:12:59,770 --> 00:13:07,661
In a template, theLoc variable should be replaced
by the source code from the same type. It

143
00:13:07,661 --> 00:13:11,970
can preserve the structure and names.

144
00:13:11,970 --> 00:13:19,390
And so, taking a look at a demo, back to the
handy webserver page.

145
00:13:19,390 --> 00:13:29,050
We can see, down here, that the template you
can enter in this page the template. As it

146
00:13:29,050 --> 00:13:30,050
looks.

147
00:13:30,050 --> 00:13:39,300
This is the same as what I had on the slides.
Including matching. And then, you can see

148
00:13:39,300 --> 00:13:40,329
up top.

149
00:13:40,329 --> 00:13:43,360
That I have input a lot of sample code.

150
00:13:43,360 --> 00:13:45,830
Following differentn JS contracts you might
have.

151
00:13:45,830 --> 00:13:55,230
A direct assignment. Assigning it to functions.
Whatever it may be.

152
00:13:55,230 --> 00:14:02,260
And then, when I hit this button and run,
I can then see what the tool will transform

153
00:14:02,260 --> 00:14:05,459
the code to look like.

154
00:14:05,459 --> 00:14:10,290
And so here, I can zoom in a little bit.

155
00:14:10,290 --> 00:14:18,980
I can see it transforms the statements on
the lefthandside to the corresponding function.

156
00:14:18,980 --> 00:14:20,779
Preserving the code structure.

157
00:14:20,779 --> 00:14:28,420
Whether it is using a string, variable name,
function call, or even accepting function

158
00:14:28,420 --> 00:14:31,449
parameters and preserving that as well.

159
00:14:31,449 --> 00:14:46,450
Again, because it understands type information.
It doesn't match location. Like an object.

160
00:14:46,450 --> 00:14:53,220
And so, this is pretty handy tool. It can
show you how you can debug this. If you have

161
00:14:53,220 --> 00:14:58,399
warnings in the code. The code isn't formatted
correctly.

162
00:14:58,399 --> 00:15:03,520
Also shows you at the bottom, the Ast are
the template and source code.

163
00:15:03,520 --> 00:15:09,130
If something is not looking torrectly, you
can compare these and see whether they should

164
00:15:09,130 --> 00:15:17,670
or should not match, based on the type information
and node names.

165
00:15:17,670 --> 00:15:20,779
Like I said, this was designed for codebases.

166
00:15:20,779 --> 00:15:27,790
If it is large enough. You can run it as run
as a mapreduce.

167
00:15:27,790 --> 00:15:36,470
In a matter of seconds or minutes, run it
across hundreds, thousands, millions of files.

168
00:15:36,470 --> 00:15:41,600
And just in a very short amount of time.

169
00:15:41,600 --> 00:15:48,670
In addition to fixing, an important thing
to do.

170
00:15:48,670 --> 00:15:51,900
How can you keep evolving your codebase?

171
00:15:51,900 --> 00:15:57,350
As your code groows, more and more people
are depending on core libraries and Api's.

172
00:15:57,350 --> 00:16:00,250
It becomes harder and harder to change these.

173
00:16:00,250 --> 00:16:06,850
If you wrote it 5 years ago. You may want
to change the type signature. How people use

174
00:16:06,850 --> 00:16:09,520
it. Migrate to something else.

175
00:16:09,520 --> 00:16:17,070
It becomes harder and harder. This can be
used to make sure that all the excuses engineers

176
00:16:17,070 --> 00:16:24,760
have for not modifying code are eliminated
and they can constantly evolve the codebase

177
00:16:24,760 --> 00:16:33,279
and hive the highest quality standard. And
it is robust and nice to use.

178
00:16:33,279 --> 00:16:40,269
This is how we refactor core libraries inside
Google. It is very useful.

179
00:16:40,269 --> 00:16:45,769
So, common question that burns on people's
mind. I don't use type information

180
00:16:45,769 --> 00:16:48,949
Is this of any use to me?

181
00:16:48,949 --> 00:16:54,449
There is good and bad news. Yes, it can be
useful.

182
00:16:54,449 --> 00:16:59,270
But at the same time, the compiler might not
have all the information that it needs. You

183
00:16:59,270 --> 00:17:02,610
may get unexpected results.

184
00:17:02,610 --> 00:17:11,960
And so, opening this demo, you can see on
this righthandside I have a function where

185
00:17:11,960 --> 00:17:17,010
I take an anchor and assign it to some url.

186
00:17:17,010 --> 00:17:25,730
So, in the example I gave before, this shouldn't
match. You have an anchor tag and not location.

187
00:17:25,730 --> 00:17:33,330
Unfortunately, because there is no type information,
we have to transform this. You get a lot of

188
00:17:33,330 --> 00:17:37,080
false positives in this case.

189
00:17:37,080 --> 00:17:44,431
The good news is that the team does a lot
of work trying to improve type imprints. They

190
00:17:44,431 --> 00:17:50,710
have a major change coming out over the next
months. Which will keep improving how much

191
00:17:50,710 --> 00:17:58,600
type information can be inferred. There is
a series of passes that takes information.

192
00:17:58,600 --> 00:18:06,620
How do you call a function, what variables.
and tries to infer the rest of the code. You

193
00:18:06,620 --> 00:18:09,090
don't have to explicitly type it.

194
00:18:09,090 --> 00:18:15,830
And so, constantly trying to improve this,
the refasterJs tool can become more useful

195
00:18:15,830 --> 00:18:22,750
for projects that don't use type annotations.

196
00:18:22,750 --> 00:18:32,450
So, now that you fixed the existing usages
in the code. You want to make sure people

197
00:18:32,450 --> 00:18:41,210
don't introduce new ones. Every new one. Something
that your project, you don't want to be submitted

198
00:18:41,210 --> 00:18:43,420
in your project.

199
00:18:43,420 --> 00:18:48,930
As your project grows and your company grows,
it is not feasible to make sure somebody keeps

200
00:18:48,930 --> 00:18:52,340
an eye on the codebase.

201
00:18:52,340 --> 00:19:03,870
UYou can help make sure it becomes problematic.
They never get submitted in the first place.

202
00:19:03,870 --> 00:19:09,220
So with a few lines of code that you can pass
the configuration to the closure compiler,

203
00:19:09,220 --> 00:19:17,590
you can prevent this from the direct assignment
ever coming back. And the user would get a

204
00:19:17,590 --> 00:19:24,390
nice compiler error saying, this is not allowed.
This i a violation. You are not allowed to

205
00:19:24,390 --> 00:19:32,880
directly assign to location href. But use
goog.Dom.Safe instead. With this, the developer

206
00:19:32,880 --> 00:19:36,630
knows they have to go back and fix their code.

207
00:19:36,630 --> 00:19:45,320
You have avoided it. Whether it is something
else. If you are refactoring api's and so

208
00:19:45,320 --> 00:19:46,450
forth.

209
00:19:46,450 --> 00:19:54,570
So, breaking down this configuration, the
first thing you want to provide to is the

210
00:19:54,570 --> 00:19:56,550
type of the conformance.

211
00:19:56,550 --> 00:19:59,850
Here we are u using a banned property write.

212
00:19:59,850 --> 00:20:04,810
We want to ban people assigning to a property.

213
00:20:04,810 --> 00:20:12,310
There are a lot of other confommance types.
Each one is meant to target a specific idiom

214
00:20:12,310 --> 00:20:22,520
JS developers use. Writing or reading a property.
Calling a function. and so forth.

215
00:20:22,520 --> 00:20:32,640
And as another example, you can ban eval by
saying, ban name and specify eval as the value.

216
00:20:32,640 --> 00:20:40,300
More complicated, you can use the refasterJs
syntax for flexible configuration for the

217
00:20:40,300 --> 00:20:43,330
compiler that matches more complex statements.

218
00:20:43,330 --> 00:20:52,560
If there is something more complicated than
banning a property, you can use this syntax,

219
00:20:52,560 --> 00:21:01,630
the same as RefasterJs. To create the configuration
as well.

220
00:21:01,630 --> 00:21:07,010
The second thing you need to do is provide
which value you want to ban. This depends

221
00:21:07,010 --> 00:21:13,410
on the type. In this case. We are banning
property rights. We want to ban anything that

222
00:21:13,410 --> 00:21:19,790
is assigned to location prototype href. It
can be any object or property name you want.

223
00:21:19,790 --> 00:21:24,540
in your entire codebase.

224
00:21:24,540 --> 00:21:28,810
You want to provide a nice error message.
This is what developers would see when they

225
00:21:28,810 --> 00:21:36,460
get a violation. You want to be informative
and telling the developer why it is not allowed

226
00:21:36,460 --> 00:21:39,160
and what they can use instead.

227
00:21:39,160 --> 00:21:46,880
When they see this, okay, I have to go back,
make a quick change. Use goog.Dom.Safe instead.

228
00:21:46,880 --> 00:21:54,790
You can use a whitelist. This directory has
been approved by the security team. It has

229
00:21:54,790 --> 00:22:06,810
been heavily audited. This file won't be warned
upon when the compiler checks the code.

230
00:22:06,810 --> 00:22:13,790
Going back to the handy debugger page, that
we were at earlier.

231
00:22:13,790 --> 00:22:22,630
There is a box here, if you want to try this
out that contains the conformance configuration.

232
00:22:22,630 --> 00:22:30,110
You can see that this configuration is the
same as what you saw on the slides earlier.

233
00:22:30,110 --> 00:22:36,550
And then you can again go up to the box here.
And insert some javascript. Whatever you want

234
00:22:36,550 --> 00:22:40,360
to test.

235
00:22:40,360 --> 00:22:51,910
When you hit compile, you can see here that
the compiler in this warning box shows you

236
00:22:51,910 --> 00:22:57,930
the violation.

237
00:22:57,930 --> 00:23:13,460
If I change the piece of code to say again,
I want to change the type. If I alias the

238
00:23:13,460 --> 00:23:17,500
variable. And hit compile.

239
00:23:17,500 --> 00:23:23,491
It knows the code structure and type information.
And this statement is still not allowed. If

240
00:23:23,491 --> 00:23:34,750
you alias local variables. Do whatever magic
you want. It is able to warn.

241
00:23:34,750 --> 00:23:42,220
And only warn on the cases where it is actually
a violation.

242
00:23:42,220 --> 00:23:50,530
So, just like refasterJs. There is a number
of possibilities you can do this.

243
00:23:50,530 --> 00:23:57,220
It is similar that you can do. But because
it knows type information, you can take it

244
00:23:57,220 --> 00:24:06,020
1 step further. And more different problems
that you find in your code base. Including

245
00:24:06,020 --> 00:24:14,850
eval, html. Document.Write. And so forth.

246
00:24:14,850 --> 00:24:23,430
You can also use it as part of the core library
team. For restrict api calls. From one api

247
00:24:23,430 --> 00:24:30,600
to another. You want people to prevent using
the old one if you migrate.

248
00:24:30,600 --> 00:24:43,980
If you migrate to promises, banning your old,
whatever there might be, would be a good use.

249
00:24:43,980 --> 00:24:51,660
You can also specify any team or project specific
concerns that you have. The framework is flexible.

250
00:24:51,660 --> 00:25:01,100
So, all these tools are now available open
source on the closure-compiler page.

251
00:25:01,100 --> 00:25:08,470
I hope that... Oh, oh...

252
00:25:08,470 --> 00:25:18,950
Computer is freaking out.

253
00:25:18,950 --> 00:25:24,750
Okay.

254
00:25:24,750 --> 00:25:26,670
So these tools are available open source.

255
00:25:26,670 --> 00:25:30,610
All the debugging are available.

256
00:25:30,610 --> 00:25:36,070
You can use them to take a look of the tools.
And see if they are useful.

257
00:25:36,070 --> 00:25:42,070
I hope that by trying to utilize type information...

258
00:25:42,070 --> 00:25:47,650
i'm going to...

259
00:25:47,650 --> 00:25:52,980
That you can try to take a codebase one step
further. And it scales as it grows with the

260
00:25:52,980 --> 00:25:56,120
number of code.

261
00:25:56,120 --> 00:26:01,940
You can keep it secure performant and highest
code quality that you can

262
00:26:01,940 --> 00:26:05,880
And so please take a look and provide feedback.
Definitely interested in hearing how it can

263
00:26:05,880 --> 00:26:07,860
be used externally. Thank you.

