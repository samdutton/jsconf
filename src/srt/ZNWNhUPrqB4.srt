1
00:00:07,129 --> 00:00:13,070
Thank you.

2
00:00:13,070 --> 00:00:14,070
Good morning.

3
00:00:14,070 --> 00:00:15,330
My name is Ella.

4
00:00:15,330 --> 00:00:19,210
I would like to talk to you about publishing
on the web.

5
00:00:19,210 --> 00:00:22,359
Imagine publishing on the web, right, when
the web was born.

6
00:00:22,359 --> 00:00:25,670
A web page would look something like this.

7
00:00:25,670 --> 00:00:34,290
You could you would have a title, some links,
a side bar with functionality, breadcrumbs,

8
00:00:34,290 --> 00:00:41,400
but you would have to rewrite this all the
time.

9
00:00:41,400 --> 00:00:49,980
All of this would you like to put on every
page and write it all the time.

10
00:00:49,980 --> 00:00:54,410
What if you liked to change something on every
page of the site?

11
00:00:54,410 --> 00:00:57,950
This is why we have content management systems,
right?

12
00:00:57,950 --> 00:00:58,970
Thanks.

13
00:00:58,970 --> 00:01:06,189
So a web page would look something like this:
titles, links, side bar, a search functionality,

14
00:01:06,189 --> 00:01:09,860
and all of this you would like to have on
every page.

15
00:01:09,860 --> 00:01:11,630
And it's quite easy to rewrite it all the
time.

16
00:01:11,630 --> 00:01:15,330
This is why we have content management systems,
right?

17
00:01:15,330 --> 00:01:22,310
They simplify web publishing quite a lot.

18
00:01:22,310 --> 00:01:27,170
So, title of, breadcrumbs, they are generated
for you.

19
00:01:27,170 --> 00:01:33,240
When WordPress was born 16 years ago, out
of this satire to simplify publishing on the

20
00:01:33,240 --> 00:01:44,640
web, they also had a function called ... because
I tried to rewrite every single paragraph

21
00:01:44,640 --> 00:01:51,119
deck in this content, but I just - sorry.

22
00:01:51,119 --> 00:02:00,139
So, I would automatic ly wrap every line of
text separated by two line breaks with paragraph

23
00:02:00,139 --> 00:02:01,499
text.

24
00:02:01,499 --> 00:02:05,729
This was before any visual editors exist odd
the web.

25
00:02:05,729 --> 00:02:08,630
It was even before markdown was born.

26
00:02:08,630 --> 00:02:12,980
And I see this a bit as the first step towards
visual editing.

27
00:02:12,980 --> 00:02:18,200
So this simplified web publishing a little
bit, but you would still have to write other

28
00:02:18,200 --> 00:02:24,680
HTML, like links, images, auto formatting.

29
00:02:24,680 --> 00:02:32,580
So it is not easy to read this text, and it
still looks a bit like code.

30
00:02:32,580 --> 00:02:41,700
A year later, style MC was born and WordPress
including it into the CMS, and it would look

31
00:02:41,700 --> 00:02:43,570
like this.

32
00:02:43,570 --> 00:02:48,090
Everything was well, at least for a while.

33
00:02:48,090 --> 00:02:49,950
So how did this visual editor work?

34
00:02:49,950 --> 00:02:51,452
It used the browser API calls.

35
00:02:51,452 --> 00:02:55,160
It is really cool.

36
00:02:55,160 --> 00:03:02,420
You can just add attributes to any HTML deck
and it would make everything editable inside

37
00:03:02,420 --> 00:03:03,420
it.

38
00:03:03,420 --> 00:03:09,950
You could put it on the body elements and
your whole page becomes editable.

39
00:03:09,950 --> 00:03:11,511
You can literally put anything inside it.

40
00:03:11,511 --> 00:03:14,760
It's really magic.

41
00:03:14,760 --> 00:03:25,030
But the API had no specification, and it was
later taken over by other browsers.

42
00:03:25,030 --> 00:03:30,180
Every browser implemented it differently,
so everyone had their own opinions about how

43
00:03:30,180 --> 00:03:31,830
it should work.

44
00:03:31,830 --> 00:03:35,930
Should enter create a line break or a paragraph
tag?

45
00:03:35,930 --> 00:03:37,010
A gif tag?

46
00:03:37,010 --> 00:03:39,850
Should it depend on the context string?

47
00:03:39,850 --> 00:03:46,400
Should backspace delete a second image or
delete an entire figure deck?

48
00:03:46,400 --> 00:03:49,760
What should happen with the caption?

49
00:03:49,760 --> 00:03:56,070
What happens if you press the ...? Should
it insert inline styles, create a B tag or

50
00:03:56,070 --> 00:04:01,190
strong tag?

51
00:04:01,190 --> 00:04:06,650
Any visual representation of your content
has an infinite all the of DOM forms, so there

52
00:04:06,650 --> 00:04:12,740
will be invisible spin tags, invisible characters,
like non-breaking spaces, method elements.

53
00:04:12,740 --> 00:04:18,340
You can even split a tag into multiple pieces
and you wouldn't see it.

54
00:04:18,340 --> 00:04:24,030
So you literally don't see what you're doing,
and this DOM content becomes your source of

55
00:04:24,030 --> 00:04:27,620
truth.

56
00:04:27,620 --> 00:04:30,790
So selection has the same problem.

57
00:04:30,790 --> 00:04:31,790
Let me quickly show you.

58
00:04:31,790 --> 00:04:40,060
So if I selected text, did I select a paragraph
contents, or did I select a whole paragraph,

59
00:04:40,060 --> 00:04:42,800
or did I select the entire blog post?

60
00:04:42,800 --> 00:04:48,820
The visual representation is very ambiguous.

61
00:04:48,820 --> 00:04:51,639
And here we have a link.

62
00:04:51,639 --> 00:04:55,990
If you have an insertion point, you cannot
really tell if the insertion point is inside

63
00:04:55,990 --> 00:04:57,760
or outside the link.

64
00:04:57,760 --> 00:05:03,250
You have no choice where to insert.

65
00:05:03,250 --> 00:05:11,431
And finally, when you have non-editable areas
inside editable areas, it's buggy across the

66
00:05:11,431 --> 00:05:16,000
browser as well, and this is complex for more
building stones.

67
00:05:16,000 --> 00:05:22,370
I think we can agree that content is like
black magic.

68
00:05:22,370 --> 00:05:26,470
You can put anything inside it, and you don't
know what will happen.

69
00:05:26,470 --> 00:05:28,060
It's a bit of a black box.

70
00:05:28,060 --> 00:05:35,480
And what will come out is HTML soup.

71
00:05:35,480 --> 00:05:41,610
So we don't want to build an editor on to
such complex foundations.

72
00:05:41,610 --> 00:05:49,330
Slowly writing on the web more chaotic, and
content was not the only thing to blame.

73
00:05:49,330 --> 00:05:54,830
The WordPress editor also have some design
problems.

74
00:05:54,830 --> 00:06:02,360
Brief plugins would try to build things ... autoplugins
were creating shortfalls more and more complex

75
00:06:02,360 --> 00:06:09,370
things, creating for more calls and even more
problems.

76
00:06:09,370 --> 00:06:15,310
Some plugins would give up on the visual editor
entirely and put custom boxes outside the

77
00:06:15,310 --> 00:06:16,680
editor.

78
00:06:16,680 --> 00:06:23,290
They would do it all differently, so different
coloured buttons, different types of models.

79
00:06:23,290 --> 00:06:29,260
Each more bigger and bigger to grab your attention.

80
00:06:29,260 --> 00:06:36,810
So I would call it spaghetti UI.

81
00:06:36,810 --> 00:06:39,510
In comes Gutenberg.

82
00:06:39,510 --> 00:06:48,710
It took us quite a while to build it because
we had to take all these plugins into consideration.

83
00:06:48,710 --> 00:06:52,500
With Gutenberg, we wanted to create an editor
from the ground up.

84
00:06:52,500 --> 00:06:57,430
We wanted publishing on the web to become
effortless, and we wanted to end the constant

85
00:06:57,430 --> 00:06:59,760
editable mess.

86
00:06:59,760 --> 00:07:03,920
We wanted to create consistency in the UI.

87
00:07:03,920 --> 00:07:09,699
This was also an opportunity for WordPress
to introduce JavaScript more seriously into

88
00:07:09,699 --> 00:07:11,729
the community.

89
00:07:11,729 --> 00:07:14,580
So how did we do this?

90
00:07:14,580 --> 00:07:21,389
Everything becomes a block, so paragraphs,
images, headings embed, and this might sound

91
00:07:21,389 --> 00:07:27,420
a bit simple, but it's important to think
about a writing experience as something fluid,

92
00:07:27,420 --> 00:07:36,810
so it's not immediately obvious in terms of
UI and in terms of an extension mechanism.

93
00:07:36,810 --> 00:07:45,640
HTML has block-level elements and we would
like this underlying structure to shine through.

94
00:07:45,640 --> 00:07:49,729
So first let's have a look at how we save
this content.

95
00:07:49,729 --> 00:07:55,180
Even though the editor state is an object
tree, a tree of blocks we don't want to save

96
00:07:55,180 --> 00:08:01,560
it as JSON or short calls or custom markup,
we want to save it as HTML.

97
00:08:01,560 --> 00:08:05,280
Saving at HTML ensures that the data is portable.

98
00:08:05,280 --> 00:08:07,180
It works everywhere.

99
00:08:07,180 --> 00:08:11,890
And we don't want to the user to be locked
into our system.

100
00:08:11,890 --> 00:08:17,280
Also HTML is a bit of the - also, it doesn't
need any logic to render the page, so if a

101
00:08:17,280 --> 00:08:20,199
plugin disappears, the content will still
be there.

102
00:08:20,199 --> 00:08:21,570
The page can still render.

103
00:08:21,570 --> 00:08:28,740
HTML is quite a pit of a lower language of
the web but we need the markup to carry more

104
00:08:28,740 --> 00:08:30,690
meaning.

105
00:08:30,690 --> 00:08:33,050
Think about a table, for example,.

106
00:08:33,050 --> 00:08:40,710
It can be used for a plain table, and a plain
table block or a calendar block.

107
00:08:40,710 --> 00:08:46,350
So we decided to use HTML comments to describe
and to separate these blocks.

108
00:08:46,350 --> 00:08:52,290
They are syntactically very different from
HTML, so our blog parser doesn't need to know

109
00:08:52,290 --> 00:08:55,440
HTML.

110
00:08:55,440 --> 00:09:01,050
And our side of this block added to context,
these comments will just disappear.

111
00:09:01,050 --> 00:09:09,960
It also makes it possible to have - here is
an example of a block.

112
00:09:09,960 --> 00:09:14,690
It makes it possible to create dynamic blocks,
so blocks that rely on external data to render,

113
00:09:14,690 --> 00:09:19,420
like advertisement, or photo album.

114
00:09:19,420 --> 00:09:27,370
WordPress really values backwards compatibility,
and we want to respect existing content.

115
00:09:27,370 --> 00:09:33,410
So content outside of these blocks delimiters
are put in a fall back block, and a fallback

116
00:09:33,410 --> 00:09:38,290
block is the old editor inside the block.

117
00:09:38,290 --> 00:09:43,010
If you do not wish to use the new editor,
or you just want to keep on writing in HTML,

118
00:09:43,010 --> 00:09:44,010
it's possible.

119
00:09:44,010 --> 00:09:46,500
You can just use this one block.

120
00:09:46,500 --> 00:09:49,400
This shows how robust the block system is.

121
00:09:49,400 --> 00:09:54,200
Each block is an isolated container.

122
00:09:54,200 --> 00:09:59,490
The block parser can recover from any invalid
HTML because it doesn't need to parse it.

123
00:09:59,490 --> 00:10:04,760
HTML parsing errors are added on the block
level.

124
00:10:04,760 --> 00:10:10,740
The theme for JavaScript errors, so we use
React error boundaries to catch the errors,

125
00:10:10,740 --> 00:10:16,320
and to display them inside the blocks, so,
if any plugin creates an error, it's no problem

126
00:10:16,320 --> 00:10:18,080
for the entire editor.

127
00:10:18,080 --> 00:10:26,330
And finally, since we don't use the entire
block lift, we don't have to worry about the

128
00:10:26,330 --> 00:10:31,300
browser messing the markup up.

129
00:10:31,300 --> 00:10:33,460
So now, some new things about the editor.

130
00:10:33,460 --> 00:10:39,740
We have placeholders, be so, if you're writing
a text, you can just insert the image placeholder

131
00:10:39,740 --> 00:10:43,020
and keep on writing and fill in the blanks
later.

132
00:10:43,020 --> 00:10:49,850
Also, together, these placeholders can form
templates, so, if a user doesn't really know

133
00:10:49,850 --> 00:10:55,950
how to create the more complex layout, they
can rely on templates created by themes or

134
00:10:55,950 --> 00:11:00,480
plugins to insert on, and then fill in the
blanks.

135
00:11:00,480 --> 00:11:07,000
For example, here, that's from Amnesty International.

136
00:11:07,000 --> 00:11:13,500
If you would like to reuse a piece of content,
you can make a block reusable and use it on

137
00:11:13,500 --> 00:11:16,760
every other page.

138
00:11:16,760 --> 00:11:20,990
So any update to this block will reflect on
all the other pages.

139
00:11:20,990 --> 00:11:25,810
So, in the background, this is actually a
dynamic block.

140
00:11:25,810 --> 00:11:33,350
So, the editor is quite simple to extend people
have created drawing blocks, form blogs.

141
00:11:33,350 --> 00:11:38,850
You can even put a editor inside the editor,
and here you can see it's a blog that someone

142
00:11:38,850 --> 00:11:42,860
created in 17 lines of JavaScript.

143
00:11:42,860 --> 00:11:54,310
Finally, it is much easier to discover features.

144
00:11:54,310 --> 00:12:00,730
Before people would know how to paste a YouTube
URL, that pasting would embed the video.

145
00:12:00,730 --> 00:12:07,000
Now this is part of the block list, so it
is easier to discover and also searchable.

146
00:12:07,000 --> 00:12:14,670
In the future, we would like to have a plugin
directory, and so if you search for a block

147
00:12:14,670 --> 00:12:21,500
and it's not installed locally, you will get
some suggestions to install plugins, and you

148
00:12:21,500 --> 00:12:24,270
can install it right in the editor.

149
00:12:24,270 --> 00:12:30,029
This is to eliminate some end-user experience.

150
00:12:30,029 --> 00:12:32,230
Now what about rich text?

151
00:12:32,230 --> 00:12:35,500
We still want to write inside these blocks,
right?

152
00:12:35,500 --> 00:12:44,180
So quickly to kick-start development, we put
tiny MC inside components side React but we

153
00:12:44,180 --> 00:12:49,760
knew that eventually we wanted something lighter
and something more integrated.

154
00:12:49,760 --> 00:12:57,529
So, because we had, like, React UI and it
needs to handle things like paste and block-level

155
00:12:57,529 --> 00:13:04,779
interactions, on top of that, we also wanted
some custom features, for example, format

156
00:13:04,779 --> 00:13:12,140
boundaries, so here you can see that you have
a link, and with a left and right arrow keys,

157
00:13:12,140 --> 00:13:16,110
you can navigate inside and outside of a link.

158
00:13:16,110 --> 00:13:19,950
This makes it easier if you want to search
on the inside or the outside, and you can

159
00:13:19,950 --> 00:13:21,430
try this on the other editor.

160
00:13:21,430 --> 00:13:24,450
It's not really possible.

161
00:13:24,450 --> 00:13:34,010
So, we decided to build our own rich text
component, and guess what you use for that?.

162
00:13:34,010 --> 00:13:40,480
It gives you a lot of stuff for free.

163
00:13:40,480 --> 00:13:45,269
It just works in other languages like Arabic,
Japanese out of the box.

164
00:13:45,269 --> 00:13:50,079
It's accessible, it resizes, and native UI
just works.

165
00:13:50,079 --> 00:13:56,480
For example, if you shake your phone to undo
what you've written, or if you want to use

166
00:13:56,480 --> 00:14:02,029
the formatting button on a touch bar of a
Mac book.

167
00:14:02,029 --> 00:14:07,920
So it is quite good at text-level editing,
just not at anything else.

168
00:14:07,920 --> 00:14:14,399
So, our components - so, in our components,
we want to control the state, and we separated

169
00:14:14,399 --> 00:14:17,700
text and format.

170
00:14:17,700 --> 00:14:21,470
This makes it much easier to manipulate the
data instead of having a three or four formatting

171
00:14:21,470 --> 00:14:24,560
- a tree of formatting elements.

172
00:14:24,560 --> 00:14:31,220
You have the string methods that you can use,
and you have some extra formatting really

173
00:14:31,220 --> 00:14:35,959
that functions.

174
00:14:35,959 --> 00:14:37,210
So how does this work?

175
00:14:37,210 --> 00:14:43,990
For example, if you have an editor, you have
a universal keys like enter, delete, arrows

176
00:14:43,990 --> 00:14:49,610
keys, so we create a new object from the previous
old objects with the helper functions, and

177
00:14:49,610 --> 00:14:55,710
then update it with the algorithm, pretty
much like React works, but for inputs, we

178
00:14:55,710 --> 00:15:00,860
have to look at the DOM, create an object,
take the concern out of there that we need

179
00:15:00,860 --> 00:15:07,200
and update the DOM and if the browser does
anything strange in there.

180
00:15:07,200 --> 00:15:12,649
Checks components are also extensible so it
is possible to run transformations through

181
00:15:12,649 --> 00:15:14,390
on input.

182
00:15:14,390 --> 00:15:22,750
Here, if you type ... it can transform to
a port tech.

183
00:15:22,750 --> 00:15:29,430
It is possible to add custom formats, things
like autocomplete, annotations.

184
00:15:29,430 --> 00:15:35,490
You can even do checking like analysis, or
spell checking.

185
00:15:35,490 --> 00:15:42,680
It is easy to implement.

186
00:15:42,680 --> 00:15:47,709
The blocks are tied together, the rechecks
are tied together.

187
00:15:47,709 --> 00:15:49,889
This is to ensure a good writing flow.

188
00:15:49,889 --> 00:15:54,970
If you want to split the blocks, you can use
enter, you can use lead, because it should

189
00:15:54,970 --> 00:15:57,899
not feel too blocky, right?

190
00:15:57,899 --> 00:16:04,770
The differences is that these block interactions
are done by us, not by the browser.

191
00:16:04,770 --> 00:16:11,480
To this editor rebuild is super versatile.

192
00:16:11,480 --> 00:16:13,870
You can use it for documentation.

193
00:16:13,870 --> 00:16:25,161
Even people who get the editor - like Drupal,
and I've made this whole slide show in Gutenberg

194
00:16:25,161 --> 00:16:26,161
as well.

195
00:16:26,161 --> 00:16:35,680
I will quickly show you and exit the page.

196
00:16:35,680 --> 00:16:41,399
So here you can see that every slide is a
block, and there are blocks not entitled slide,

197
00:16:41,399 --> 00:16:51,950
so adding paragraphs, how you can also add
things like images.

198
00:16:51,950 --> 00:16:55,440
Upload an image.

199
00:16:55,440 --> 00:16:57,070
You can resize it.

200
00:16:57,070 --> 00:16:58,470
You can move it.

201
00:16:58,470 --> 00:16:59,470
You can easily move around.

202
00:16:59,470 --> 00:17:02,750
You don't have to copy and paste.

203
00:17:02,750 --> 00:17:07,459
And you can also, we have some rich text and
extensions work, for example.

204
00:17:07,459 --> 00:17:12,900
If I want to make something appear on the
next key stroke for my slides, I can create

205
00:17:12,900 --> 00:17:14,589
the slide fragments.

206
00:17:14,589 --> 00:17:22,260
Then go back to the presentation.

207
00:17:22,260 --> 00:17:29,040
So you can make slides with it, and we're
actually also using this editor now to edit

208
00:17:29,040 --> 00:17:33,260
the full site.

209
00:17:33,260 --> 00:17:39,891
So editing themes is actually how I got involved,
how I got involved into WordPress and how

210
00:17:39,891 --> 00:17:42,970
I learned PHP and JavaScript.

211
00:17:42,970 --> 00:17:50,710
But not everyone has the time or the patience,
or interest to do that, right?

212
00:17:50,710 --> 00:17:56,610
This is a very simplified but a themed template,
a WordPress template would look something

213
00:17:56,610 --> 00:17:57,610
like this.

214
00:17:57,610 --> 00:18:03,470
You have some PHP and HTML detection.

215
00:18:03,470 --> 00:18:10,900
But why not let the user directly manipulate
those blocks with a graphic user interface?

216
00:18:10,900 --> 00:18:13,280
Why not let the user add it to the whole site?

217
00:18:13,280 --> 00:18:19,670
Why should it be reserved for people who know
HTML or for people who want to port?

218
00:18:19,670 --> 00:18:24,770
This gives more power if the to the user,
and the theme is reduced to a style sheet.

219
00:18:24,770 --> 00:18:29,440
In fact, it gets rid of PHP entirely for the
templates.

220
00:18:29,440 --> 00:18:39,190
So there is a reason we call it Gutenberg,
and the Gutenberg's printing press changed

221
00:18:39,190 --> 00:18:46,240
how book-publishing works, we are hoping that
this editor changes how web publishing works.

222
00:18:46,240 --> 00:18:51,240
We want publishing on the web to become accessible
to everyone.

223
00:18:51,240 --> 00:18:55,740
We want you to be able to break out the walled
garden of the internet.

224
00:18:55,740 --> 00:19:01,151
We want you to be able to publish on your
own server and to only your data, and I hope

225
00:19:01,151 --> 00:19:04,360
this project can help centralise that again.

226
00:19:04,360 --> 00:19:10,740
WordPress is also translated into over 100
languages, and you can add your own.

227
00:19:10,740 --> 00:19:18,520
It has 38 million active installs, and these
38 million active installs are separate servers,

228
00:19:18,520 --> 00:19:23,510
so they're not owned by one company.

229
00:19:23,510 --> 00:19:31,670
If you have questions, I will be around later,
and I'm on Twitter.

230
00:19:31,670 --> 00:19:36,210
If you're interested in all these things,
feel free to apply and work with us.

231
00:19:36,210 --> 00:19:40,790
Yes, thanks for coming, and thanks JSConf
for having me.

