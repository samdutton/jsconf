1
00:00:01,640 --> 00:00:17,800
Thank you.

2
00:00:17,800 --> 00:00:20,009
I have to wake my computer up.

3
00:00:20,009 --> 00:00:21,009
Hi everyone.

4
00:00:21,009 --> 00:00:23,509
I'm Arne Martin, I live in Trondheim Norway.

5
00:00:23,509 --> 00:00:27,019
I work for Boost Communications.

6
00:00:27,019 --> 00:00:32,009
They paid for my trip.

7
00:00:32,009 --> 00:00:38,680
I'll be talking about programming languages.

8
00:00:38,680 --> 00:00:41,850
I'll be talking about isotheric languages.

9
00:00:41,850 --> 00:00:49,850
And why I think you should write in one of
these crazy languages.

10
00:00:49,850 --> 00:00:59,470
But, what's an isotheric language?

11
00:00:59,470 --> 00:01:02,310
Programming shouldn't be all business.

12
00:01:02,310 --> 00:01:10,050
Esotheric programming languages are languages
that are often just for fun.

13
00:01:10,050 --> 00:01:14,229
And they are in almost all cases completely
useless for any practical use.

14
00:01:14,229 --> 00:01:17,780
That makes it great.

15
00:01:17,780 --> 00:01:25,880
I have a few examples that you might have
heard of.

16
00:01:25,880 --> 00:01:27,909
Brainfuck.

17
00:01:27,909 --> 00:01:28,909
Hello world.

18
00:01:28,909 --> 00:01:33,170
It is one of the most minimal languages.

19
00:01:33,170 --> 00:01:34,170
Only 8.

20
00:01:34,170 --> 00:01:43,409
It is 
kind of hard to use though.

21
00:01:43,409 --> 00:01:44,760
Then you have Malboge.

22
00:01:44,760 --> 00:01:51,840
It is harder to use.

23
00:01:51,840 --> 00:01:56,399
This is created to be hard to write programs.

24
00:01:56,399 --> 00:01:58,450
Each instruction is encrypted.

25
00:01:58,450 --> 00:02:02,590
The encryption changes for each step of the
program.

26
00:02:02,590 --> 00:02:12,700
This Hello World example has not been written,
as much as generated using brute force.

27
00:02:12,700 --> 00:02:16,569
And then we have things like Piat.

28
00:02:16,569 --> 00:02:27,780
It is a language you can write in an image
editor.

29
00:02:27,780 --> 00:02:31,260
But why should anyone want to do that?

30
00:02:31,260 --> 00:02:34,319
Well, my main idea is: Why not?

31
00:02:34,319 --> 00:02:35,319
It is fun.

32
00:02:35,319 --> 00:02:45,180
Have some fun, write some code you would never
write at your day jobs.

33
00:02:45,180 --> 00:02:47,400
Programming in new ways.

34
00:02:47,400 --> 00:02:49,739
As you write.

35
00:02:49,739 --> 00:02:58,959
And trying to learn the language you are writing
for.

36
00:02:58,959 --> 00:03:02,290
I have to warn you before we proceed.

37
00:03:02,290 --> 00:03:06,750
I have no idea what I'm doing.

38
00:03:06,750 --> 00:03:11,950
No education or knowledge of writing compilers
or interpreters.

39
00:03:11,950 --> 00:03:16,990
I just do things.

40
00:03:16,990 --> 00:03:21,280
I hope that you will not use any techniques,
code, concept.

41
00:03:21,280 --> 00:03:23,269
That you will see here in any production code.

42
00:03:23,269 --> 00:03:26,880
I will not be held responsible.

43
00:03:26,880 --> 00:03:41,050
When I write code for fun, I don't do writing
comments, or consider issues, like logging.

44
00:03:41,050 --> 00:03:42,189
It is just for fun.

45
00:03:42,189 --> 00:03:44,319
If I can save 2 lines.

46
00:03:44,319 --> 00:03:48,450
I will do so.

47
00:03:48,450 --> 00:03:51,140
The first language I will demonstrate is Befunge.

48
00:03:51,140 --> 00:04:00,510
Befunge is an ideocratic language.

49
00:04:00,510 --> 00:04:03,279
Which has new concepts.

50
00:04:03,279 --> 00:04:06,709
It is stack based.

51
00:04:06,709 --> 00:04:08,130
No variables.

52
00:04:08,130 --> 00:04:10,100
Only on a stack.

53
00:04:10,100 --> 00:04:15,340
You can only push and pop from this stack.

54
00:04:15,340 --> 00:04:18,410
Befunge are reflective.

55
00:04:18,410 --> 00:04:24,730
Can read and modify their own sourcecode at
runtime.

56
00:04:24,730 --> 00:04:28,720
Multidimensional.

57
00:04:28,720 --> 00:04:32,890
Consist of single character instructions on
a grid.

58
00:04:32,890 --> 00:04:38,000
There is an insertion pointer that moves in
any direction.

59
00:04:38,000 --> 00:04:43,190
And executes instructions as it passes.

60
00:04:43,190 --> 00:04:46,730
Because of this, it is a cross between Forth
and Lemmings.

61
00:04:46,730 --> 00:04:53,450
It is quite annoying to write programs for.

62
00:04:53,450 --> 00:04:54,780
It is completely useless.

63
00:04:54,780 --> 00:04:58,020
But also quite fun.

64
00:04:58,020 --> 00:05:01,540
I'll show you what it looks like.

65
00:05:01,540 --> 00:05:06,370
Here is an interpreter I have written for
Befunge.

66
00:05:06,370 --> 00:05:10,280
It is using React.

67
00:05:10,280 --> 00:05:18,980
Now, the code is Hello World.

68
00:05:18,980 --> 00:05:23,540
It is on the stack in reversed order.

69
00:05:23,540 --> 00:05:28,500
A loop that will print out all the characters.

70
00:05:28,500 --> 00:05:31,650
Until it hits zero and terminates.

71
00:05:31,650 --> 00:05:35,850
Slow it down a bit.

72
00:05:35,850 --> 00:05:43,030
You can see down here, the program as it executes.

73
00:05:43,030 --> 00:05:47,030
The characters.

74
00:05:47,030 --> 00:05:48,880
And printing them.

75
00:05:48,880 --> 00:05:55,060
Back and forth.

76
00:05:55,060 --> 00:06:01,070
There.

77
00:06:01,070 --> 00:06:02,120
Another example.

78
00:06:02,120 --> 00:06:05,310
You know Fizzbuzz.

79
00:06:05,310 --> 00:06:11,100
You write the numbers from 1 to 100.

80
00:06:11,100 --> 00:06:16,410
You print fizz or buzz.

81
00:06:16,410 --> 00:06:23,320
You write fizzbuzz or just the number.

82
00:06:23,320 --> 00:06:24,680
Pay attention to the instruction pointer.

83
00:06:24,680 --> 00:06:27,720
Look at it go!

84
00:06:27,720 --> 00:06:33,840
Isn't it hilarious?

85
00:06:33,840 --> 00:06:41,810
So, what it does is, it adds 1 to the current
number.

86
00:06:41,810 --> 00:06:53,160
Checks if it divisible by 3, if not it goes
this way.

87
00:06:53,160 --> 00:06:56,400
It pushes the string it needs onto the stack.

88
00:06:56,400 --> 00:07:02,300
It goes down here down to this area to print
it out.

89
00:07:02,300 --> 00:07:05,780
Then it goes all the way back to the beginning.

90
00:07:05,780 --> 00:07:13,620
And, does it over again.

91
00:07:13,620 --> 00:07:16,760
Nice example.

92
00:07:16,760 --> 00:07:19,770
This program demonstrates the reflective nature.

93
00:07:19,770 --> 00:07:24,810
If you pay attention to the upper left corner
of the program.

94
00:07:24,810 --> 00:07:25,810
There is a number.

95
00:07:25,810 --> 00:07:33,790
When I run this.

96
00:07:33,790 --> 00:07:35,150
It is a counter.

97
00:07:35,150 --> 00:07:37,810
It reads in the number, adds 1 to it and prints
it back out.

98
00:07:37,810 --> 00:07:43,970
Modifying the source code.

99
00:07:43,970 --> 00:07:49,400
Because it is reflective, Quine quite simple.

100
00:07:49,400 --> 00:07:53,890
Quine is a program that prints out its own
source code.

101
00:07:53,890 --> 00:08:02,710
It reads from itself and prints itself out.

102
00:08:02,710 --> 00:08:05,550
You can write things like this one.

103
00:08:05,550 --> 00:08:08,060
Which I'm proud of.

104
00:08:08,060 --> 00:08:10,300
This program.

105
00:08:10,300 --> 00:08:14,800
Reads itself, one character at a time and
prints itself back into the program on the

106
00:08:14,800 --> 00:08:16,480
next line.

107
00:08:16,480 --> 00:08:21,000
Moves down, and keeps going.

108
00:08:21,000 --> 00:08:24,160
You'll see what I mean.

109
00:08:24,160 --> 00:08:25,810
Prints itself out.

110
00:08:25,810 --> 00:08:34,430
When it is done it jumps down.

111
00:08:34,430 --> 00:08:40,470
Does it once more.

112
00:08:40,470 --> 00:08:45,010
It keeps going.

113
00:08:45,010 --> 00:08:47,290
Quite fun.

114
00:08:47,290 --> 00:08:49,240
Right.

115
00:08:49,240 --> 00:08:58,550
Let's look at the source code for this interpreter.

116
00:08:58,550 --> 00:09:01,890
The main entrypoint is this file.

117
00:09:01,890 --> 00:09:03,610
JS.

118
00:09:03,610 --> 00:09:06,590
What it does is basically create a new object.

119
00:09:06,590 --> 00:09:13,210
The main entry point for the interpreter.

120
00:09:13,210 --> 00:09:19,700
Functions like stopping and starting and stepping
and things like that.

121
00:09:19,700 --> 00:09:26,070
The parser is what reads the source code and
turns it into an actual program.

122
00:09:26,070 --> 00:09:29,170
Like a data structure.

123
00:09:29,170 --> 00:09:31,590
That the interpreter can work on.

124
00:09:31,590 --> 00:09:34,400
And that's actually quite simple in this case.

125
00:09:34,400 --> 00:09:41,340
All it needs to do is read in a text file
and dump it into a 2D array.

126
00:09:41,340 --> 00:09:44,560
Splits the screen.

127
00:09:44,560 --> 00:09:50,120
And divides each line into separate characters.

128
00:09:50,120 --> 00:09:58,510
The interpreter for this thing is the main
meat of the program.

129
00:09:58,510 --> 00:10:03,890
So, the interpreter is a huge multi method.

130
00:10:03,890 --> 00:10:07,810
Which has 1 implementation for each command
in the language.

131
00:10:07,810 --> 00:10:13,940
It is like a functional switch statement.

132
00:10:13,940 --> 00:10:18,810
Different implementations, based on its first
argument.

133
00:10:18,810 --> 00:10:22,000
If you get a space, we do a noap.

134
00:10:22,000 --> 00:10:24,830
There is a lot of stuff.

135
00:10:24,830 --> 00:10:26,370
Hash.

136
00:10:26,370 --> 00:10:30,340
We skip to the next cell.

137
00:10:30,340 --> 00:10:39,690
The add cell terminates the program.

138
00:10:39,690 --> 00:10:42,350
the underscore is the east-west if.

139
00:10:42,350 --> 00:10:50,140
If it is zero, go right, otherwise go left.

140
00:10:50,140 --> 00:10:56,570
The pipe-character is a north-south if.

141
00:10:56,570 --> 00:11:01,320
The numbers, push themselves on the stack.

142
00:11:01,320 --> 00:11:04,070
Including hexidecimal numbers.

143
00:11:04,070 --> 00:11:06,630
Basic aritmethic operators.

144
00:11:06,630 --> 00:11:15,170
Pops 2 values from the stack and pushes the
result back.

145
00:11:15,170 --> 00:11:23,130
It 
takes 2 values and the operator in between

146
00:11:23,130 --> 00:11:30,490
and evals the result.

147
00:11:30,490 --> 00:11:34,480
Everything here is written.

148
00:11:34,480 --> 00:11:38,410
I don't know if you heard of that.

149
00:11:38,410 --> 00:11:42,740
If you haven't, I recommend you to check it
out.

150
00:11:42,740 --> 00:11:45,650
It was brand new at the time.

151
00:11:45,650 --> 00:11:48,500
I started doing this.

152
00:11:48,500 --> 00:11:53,260
And it is a bad idea when it comes to memory
usage.

153
00:11:53,260 --> 00:11:57,330
It was fun.

154
00:11:57,330 --> 00:12:10,170
Let's go back to the presentation.

155
00:12:10,170 --> 00:12:13,790
Did you enjoy it?

156
00:12:13,790 --> 00:12:17,010
(applause)

157
00:12:17,010 --> 00:12:18,010
This is online.

158
00:12:18,010 --> 00:12:19,440
You can try it if you want.

159
00:12:19,440 --> 00:12:23,660
I'll get the address later.

160
00:12:23,660 --> 00:12:27,380
I have 1 more language to show you.

161
00:12:27,380 --> 00:12:31,380
It is Thue.

162
00:12:31,380 --> 00:12:34,180
It is named after a Norwegian mathematician
Thue.

163
00:12:34,180 --> 00:12:43,370
It is a quite different language.

164
00:12:43,370 --> 00:12:44,779
Very simple.

165
00:12:44,779 --> 00:12:49,420
It is based entirely around string rewriting.

166
00:12:49,420 --> 00:12:51,650
It is non deterministic.

167
00:12:51,650 --> 00:12:58,279
Which makes doing certain things hard.

168
00:12:58,279 --> 00:13:01,440
It is very simple.

169
00:13:01,440 --> 00:13:06,710
A program in Thue consists of several rules.

170
00:13:06,710 --> 00:13:16,960
Lefthand side, righthandside and colon, colon,
equal.

171
00:13:16,960 --> 00:13:20,150
It will read from the user.

172
00:13:20,150 --> 00:13:24,980
It will print out what comes after.

173
00:13:24,980 --> 00:13:29,030
And then return the empty string.

174
00:13:29,030 --> 00:13:34,350
The rules section is finished with an empty
rule.

175
00:13:34,350 --> 00:13:37,320
Below that is the initial state of the program.

176
00:13:37,320 --> 00:13:44,330
And the program runs by picking a rule at
random.

177
00:13:44,330 --> 00:13:47,180
Applying it to the current state.

178
00:13:47,180 --> 00:13:51,910
Replaces the content of the lefthand side
with the righthandside.

179
00:13:51,910 --> 00:13:53,480
And repeats.

180
00:13:53,480 --> 00:13:57,630
Until there are normal rules that can apply.

181
00:13:57,630 --> 00:14:02,040
So, let's implement this.

182
00:14:02,040 --> 00:14:11,320
Here is the basic skeleton for the Thue interpreter.

183
00:14:11,320 --> 00:14:13,529
A few basic functions.

184
00:14:13,529 --> 00:14:15,250
Parse to read the string.

185
00:14:15,250 --> 00:14:21,310
And generate program data structure thing.

186
00:14:21,310 --> 00:14:23,130
Run function to run the program.

187
00:14:23,130 --> 00:14:29,750
And it reads the file from arguments.

188
00:14:29,750 --> 00:14:33,760
And parses it and runs it.

189
00:14:33,760 --> 00:14:42,089
So, to parse is quite simple.

190
00:14:42,089 --> 00:14:46,760
First we start with what should the data structure
look like.

191
00:14:46,760 --> 00:14:49,190
It is very simple.

192
00:14:49,190 --> 00:14:51,060
An array of rules.

193
00:14:51,060 --> 00:14:53,190
It has a string, current state.

194
00:14:53,190 --> 00:15:01,960
There is a flag that tells us if there are
more rules that can match.

195
00:15:01,960 --> 00:15:08,180
So, what we do is to take the input string.

196
00:15:08,180 --> 00:15:13,620
And first of all we strip out the new lines
and comments.

197
00:15:13,620 --> 00:15:17,670
And we divide it into 2 parts.

198
00:15:17,670 --> 00:15:18,670
The rules part.

199
00:15:18,670 --> 00:15:22,660
The initial input part.

200
00:15:22,660 --> 00:15:26,030
And we assign the initial input to the program
state.

201
00:15:26,030 --> 00:15:29,310
Then we split the rules.

202
00:15:29,310 --> 00:15:35,830
And push them one by one on the array of rules.

203
00:15:35,830 --> 00:15:38,740
Next we get the run function.

204
00:15:38,740 --> 00:15:40,930
This is very simple.

205
00:15:40,930 --> 00:15:47,090
While the program is not exhausted, run another
step.

206
00:15:47,090 --> 00:15:54,980
The step function, basically, it takes the
program state as an input.

207
00:15:54,980 --> 00:15:56,860
Let's see.

208
00:15:56,860 --> 00:15:58,030
It takes all the rules.

209
00:15:58,030 --> 00:16:01,149
It shuffles them into random order.

210
00:16:01,149 --> 00:16:06,370
It sets the flag to true.

211
00:16:06,370 --> 00:16:09,680
And it loops through each of the rules.

212
00:16:09,680 --> 00:16:18,330
And as soon as it finds a rule, that actually
can apply to the current program string, it

213
00:16:18,330 --> 00:16:20,280
runs the apply rule function.

214
00:16:20,280 --> 00:16:24,410
Which does the substitution.

215
00:16:24,410 --> 00:16:27,770
Then returns.

216
00:16:27,770 --> 00:16:32,080
The apply rule function, also quite simple.

217
00:16:32,080 --> 00:16:35,510
A few special cases to handle.

218
00:16:35,510 --> 00:16:41,350
First it assigns righthandside to the righthandside
of rule.

219
00:16:41,350 --> 00:16:47,710
If it is 3 colons, it prompts the user for
input.

220
00:16:47,710 --> 00:16:50,149
If the righthandside starts with tilde.

221
00:16:50,149 --> 00:16:52,760
It will writes.

222
00:16:52,760 --> 00:17:02,910
And it replaces every occurrence of lefthandside
with righthandside in the input string.

223
00:17:02,910 --> 00:17:11,760
So, the result.

224
00:17:11,760 --> 00:17:22,170
I have a Hello.Thue.

225
00:17:22,170 --> 00:17:27,030
First it replaces B with A.

226
00:17:27,030 --> 00:17:29,440
Then it prints Hello World.

227
00:17:29,440 --> 00:17:33,360
See if it works.

228
00:17:33,360 --> 00:17:34,360
Yes!

229
00:17:34,360 --> 00:17:36,290
It does.

230
00:17:36,290 --> 00:17:41,840
I have another example program in Thue.

231
00:17:41,840 --> 00:17:46,990
This program prints the 99 bottles of beer
on the wall song.

232
00:17:46,990 --> 00:17:49,600
All 99 verses.

233
00:17:49,600 --> 00:17:50,880
I didn't write this.

234
00:17:50,880 --> 00:18:00,990
I have a hard time wrapping my head around
doing anything in Thue.

235
00:18:00,990 --> 00:18:10,250
There we go.

236
00:18:10,250 --> 00:18:15,940
All 99 bottles.

237
00:18:15,940 --> 00:18:21,290
Nice, right?

238
00:18:21,290 --> 00:18:23,960
Right.

239
00:18:23,960 --> 00:18:33,410
So, the main point of my talk is just, have
some fun.

240
00:18:33,410 --> 00:18:39,779
Write some ugly code, create something.

241
00:18:39,779 --> 00:18:44,640
Having to write an interpreter and having
it run the program.

242
00:18:44,640 --> 00:18:45,670
And print it.

243
00:18:45,670 --> 00:18:50,610
It is a quite nice feeling.

244
00:18:50,610 --> 00:18:51,820
I have some time left.

245
00:18:51,820 --> 00:18:54,980
I'll show you something completely different.

246
00:18:54,980 --> 00:18:59,780
A tool I'm using for the slides.

247
00:18:59,780 --> 00:19:01,929
I have written myself.

248
00:19:01,929 --> 00:19:08,080
And I had an interesting bug with this the
other day.

249
00:19:08,080 --> 00:19:12,720
So, you remember...

250
00:19:12,720 --> 00:19:16,110
Get back to it.

251
00:19:16,110 --> 00:19:19,150
There.

252
00:19:19,150 --> 00:19:21,660
The Piat.

253
00:19:21,660 --> 00:19:23,880
That's an image.

254
00:19:23,880 --> 00:19:30,309
And I use substacks, picture tube that prints
an image to the terminal.

255
00:19:30,309 --> 00:19:38,450
But, that was giving me, what you call it?

256
00:19:38,450 --> 00:19:40,510
When I was trying to run it.

257
00:19:40,510 --> 00:19:45,200
I tried to track this bug.

258
00:19:45,200 --> 00:19:54,410
There was a bug in the Pmg.js library.

259
00:19:54,410 --> 00:19:59,480
I'll just show you how I fixed this bug.

260
00:19:59,480 --> 00:20:09,820
there we are.

261
00:20:09,820 --> 00:20:24,340
Here we are inside where it copies the data.

262
00:20:24,340 --> 00:20:25,990
This is the point.

263
00:20:25,990 --> 00:20:29,020
I added this line.

264
00:20:29,020 --> 00:20:32,240
If 1 = 1, do nothing.

265
00:20:32,240 --> 00:20:34,299
If I comment this line out.

266
00:20:34,299 --> 00:20:38,470
And I try running my slides again.

267
00:20:38,470 --> 00:20:42,200
Quit this.

268
00:20:42,200 --> 00:20:46,400
And save it.

269
00:20:46,400 --> 00:20:53,160
It will say: fault.

270
00:20:53,160 --> 00:21:01,980
If I move this line one step up, and save.

271
00:21:01,980 --> 00:21:03,310
It will say: Fault.

272
00:21:03,310 --> 00:21:07,830
If I put it back where it was.

273
00:21:07,830 --> 00:21:13,530
It works just fine.

274
00:21:13,530 --> 00:21:19,220
If any of you have any idea why this could
be!

275
00:21:19,220 --> 00:21:20,530
Please come talk to me.

276
00:21:20,530 --> 00:21:24,300
I'm really impressed with this.

277
00:21:24,300 --> 00:21:26,660
Craziest thing I have ever thing.

278
00:21:26,660 --> 00:21:28,450
Not literally.

279
00:21:28,450 --> 00:21:29,450
Right.

280
00:21:29,450 --> 00:21:36,120
I'll go through it to see my last slide.

281
00:21:36,120 --> 00:21:37,780
There we go.

282
00:21:37,780 --> 00:21:48,950
Thank you very much.

283
00:21:48,950 --> 00:21:54,429
(applause)

284
00:21:54,429 --> 00:21:55,670
for my slides and things.

285
00:21:55,670 --> 00:21:59,520
They are on Github.

286
00:21:59,520 --> 00:22:04,360
If you want to talk to me, I'll be in the
lounge.

