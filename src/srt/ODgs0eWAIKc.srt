1
00:00:17,610 --> 00:00:20,300

thanks for coming down here everybody

2
00:00:20,300 --> 00:00:23,070
we're from Bloomberg we got four guys

3
00:00:23,070 --> 00:00:24,990
here we're going to be presenting what

4
00:00:24,990 --> 00:00:28,140
we do with JavaScript we haven't really

5
00:00:28,140 --> 00:00:30,390
talked about anything we we do publicly

6
00:00:30,390 --> 00:00:33,120
before and we figured it would be a good

7
00:00:33,120 --> 00:00:35,100
idea just to kind of show the JavaScript

8
00:00:35,100 --> 00:00:37,380
community what we do every day at work

9
00:00:37,380 --> 00:00:44,890
which involves a lot of JavaScript so

10
00:00:44,900 --> 00:00:48,239
thank you so as you see homegrown

11
00:00:48,239 --> 00:00:50,700
server-side scripting so what we do you

12
00:00:50,700 --> 00:00:52,530
know as this implies we do a lot of

13
00:00:52,530 --> 00:00:55,170
server-side script so first off about me

14
00:00:55,170 --> 00:00:57,390
if you looked at the schedule I am not

15
00:00:57,390 --> 00:00:59,790
arming I am ng prep rocky Armand is

16
00:00:59,790 --> 00:01:03,870
right there so I'm a programmer nardi

17
00:01:03,870 --> 00:01:06,780
been there for eight years I work on

18
00:01:06,780 --> 00:01:09,060
core infrastructure and making rd

19
00:01:09,060 --> 00:01:11,430
productive which is one of the key

20
00:01:11,430 --> 00:01:12,630
points here because that's where

21
00:01:12,630 --> 00:01:16,530
javascript has helped us a lot so how

22
00:01:16,530 --> 00:01:18,300
many people here have heard of Bloomberg

23
00:01:18,300 --> 00:01:21,690
before okay so is that how many people

24
00:01:21,690 --> 00:01:23,340
fur to Bloomberg because of the TV

25
00:01:23,340 --> 00:01:26,909
station or the radio station okay that's

26
00:01:26,909 --> 00:01:30,590
good so first employee is Mike Bloomberg

27
00:01:30,590 --> 00:01:33,450
he's now the mayor of New York City they

28
00:01:33,450 --> 00:01:35,340
wrote the first line of code in 1981

29
00:01:35,340 --> 00:01:37,850
that was way before Windows even existed

30
00:01:37,850 --> 00:01:40,110
the TV station didn't start until

31
00:01:40,110 --> 00:01:41,790
nineteen ninety-four I say this because

32
00:01:41,790 --> 00:01:43,710
a lot of people just they view our

33
00:01:43,710 --> 00:01:45,869
company as a media company and not as a

34
00:01:45,869 --> 00:01:48,090
software company so we want to get

35
00:01:48,090 --> 00:01:50,070
across that you know we have a lot of

36
00:01:50,070 --> 00:01:52,680
code you know that when the TV station

37
00:01:52,680 --> 00:01:54,869
started we've been writing code for 13

38
00:01:54,869 --> 00:01:56,909
years already and as of right now we

39
00:01:56,909 --> 00:02:00,619
have 30 years of code in our code base

40
00:02:00,619 --> 00:02:03,960
that's a lot of code and to let

41
00:02:03,960 --> 00:02:05,939
everybody know we have thousands of

42
00:02:05,939 --> 00:02:07,920
programmers you know it's a lot of

43
00:02:07,920 --> 00:02:09,209
people don't know that if you don't know

44
00:02:09,209 --> 00:02:10,860
anything about the financial world but

45
00:02:10,860 --> 00:02:14,040
in our offices in New York London and

46
00:02:14,040 --> 00:02:17,459
even Tokyo we have a lot of people and

47
00:02:17,459 --> 00:02:20,370
making those people productive saves you

48
00:02:20,370 --> 00:02:22,230
know e equals real dollars to the

49
00:02:22,230 --> 00:02:28,340
company

50
00:02:28,350 --> 00:02:32,370
so let's talk about code for a second

51
00:02:32,370 --> 00:02:35,200
coat accumulates over time the more

52
00:02:35,200 --> 00:02:36,700
programmers you have the faster it

53
00:02:36,700 --> 00:02:39,310
accumulates and this is especially true

54
00:02:39,310 --> 00:02:41,500
of compiled code you wind up with tons

55
00:02:41,500 --> 00:02:44,920
of code and what we found is that makes

56
00:02:44,920 --> 00:02:47,950
your company very very slow when I first

57
00:02:47,950 --> 00:02:49,960
started there about eight years ago the

58
00:02:49,960 --> 00:02:52,600
the development cycle like it almost

59
00:02:52,600 --> 00:02:55,210
felt like a sweatshop because the work

60
00:02:55,210 --> 00:02:57,400
that people did there like compiling all

61
00:02:57,400 --> 00:02:58,720
this code going through this like

62
00:02:58,720 --> 00:03:00,970
laborious cycle of testing things and

63
00:03:00,970 --> 00:03:03,760
rolling things out it really made people

64
00:03:03,760 --> 00:03:07,060
not like their jobs and it also took up

65
00:03:07,060 --> 00:03:10,450
a large amount at a time so the other

66
00:03:10,450 --> 00:03:12,070
part of this is that not everybody can

67
00:03:12,070 --> 00:03:14,350
write clean compiled code I mean you

68
00:03:14,350 --> 00:03:16,030
guys see just even in the JavaScript

69
00:03:16,030 --> 00:03:17,470
world like what the difference is

70
00:03:17,470 --> 00:03:18,820
between good JavaScript and bad

71
00:03:18,820 --> 00:03:21,220
JavaScript now you extend extend that to

72
00:03:21,220 --> 00:03:24,460
c c++ even Fortran whatever anything

73
00:03:24,460 --> 00:03:26,530
compiled and you have all kinds of

74
00:03:26,530 --> 00:03:28,180
issues that you wouldn't even have in

75
00:03:28,180 --> 00:03:30,370
JavaScript like memory corruption memory

76
00:03:30,370 --> 00:03:32,140
leaks things like that and and when you

77
00:03:32,140 --> 00:03:34,690
have 30 years of code accumulated that

78
00:03:34,690 --> 00:03:36,480
stuff can be fatal to your company here

79
00:03:36,480 --> 00:03:39,850
so we discovered that JavaScript makes

80
00:03:39,850 --> 00:03:43,570
people productive so about five years

81
00:03:43,570 --> 00:03:48,730
ago we decided to use JavaScript to

82
00:03:48,730 --> 00:03:54,970
write all of our app UI glue we the

83
00:03:54,970 --> 00:03:56,770
infrastructure team we build complex

84
00:03:56,770 --> 00:03:59,350
bindings that hook into like all of the

85
00:03:59,350 --> 00:04:01,030
all the legacy Bloomberg infrastructure

86
00:04:01,030 --> 00:04:03,220
and for the most part app development

87
00:04:03,220 --> 00:04:05,790
teams are focused on writing product and

88
00:04:05,790 --> 00:04:09,430
they write JavaScript that's like a

89
00:04:09,430 --> 00:04:11,020
thousand two thousand plus people

90
00:04:11,020 --> 00:04:12,610
writing Java server side JavaScript

91
00:04:12,610 --> 00:04:16,109
every day in order to make this

92
00:04:16,109 --> 00:04:18,910
realistic you need a complete end-to-end

93
00:04:18,910 --> 00:04:22,150
solution you can't depend on piecemeal

94
00:04:22,150 --> 00:04:23,860
things that kind of work together or

95
00:04:23,860 --> 00:04:26,110
having a complex workflow that you have

96
00:04:26,110 --> 00:04:28,750
to teach to every new person come in

97
00:04:28,750 --> 00:04:30,640
coming in you have to make every person

98
00:04:30,640 --> 00:04:32,350
productive from almost the moment they

99
00:04:32,350 --> 00:04:35,750
start so what we wound up developing

100
00:04:35,750 --> 00:04:39,110
is you know you can kind of think of it

101
00:04:39,110 --> 00:04:43,610
as like a grandfather to nodejs back in

102
00:04:43,610 --> 00:04:47,300
2005 we made this switch and we have

103
00:04:47,300 --> 00:04:49,010
everything that goes along with this to

104
00:04:49,010 --> 00:04:50,570
make people too productive we built our

105
00:04:50,570 --> 00:04:53,420
own desktop ide we have an entire

106
00:04:53,420 --> 00:04:55,010
deployment system with permission

107
00:04:55,010 --> 00:04:58,010
handling roll out back outs exception

108
00:04:58,010 --> 00:05:00,200
handling routing errors to the right

109
00:05:00,200 --> 00:05:03,950
people debuggers memory debuggers code

110
00:05:03,950 --> 00:05:05,750
profilers all of this stuff is built

111
00:05:05,750 --> 00:05:07,820
into our environment and it all works

112
00:05:07,820 --> 00:05:12,290
around jas so like I said in 2005 we

113
00:05:12,290 --> 00:05:14,840
started with spider monkey we decided to

114
00:05:14,840 --> 00:05:16,640
go with spider monkey because at the

115
00:05:16,640 --> 00:05:18,410
time in 2005 that was really the only

116
00:05:18,410 --> 00:05:21,950
the only good option and at the time it

117
00:05:21,950 --> 00:05:25,160
was about spider monkey 1.6 which if you

118
00:05:25,160 --> 00:05:26,870
guys use spider monkey at all if anybody

119
00:05:26,870 --> 00:05:28,250
here works on server side stuff it's

120
00:05:28,250 --> 00:05:34,990
pretty old now we decided to go with an

121
00:05:34,990 --> 00:05:38,660
object-based UI toolkit to a lot of

122
00:05:38,660 --> 00:05:41,150
people this will be familiar because it

123
00:05:41,150 --> 00:05:43,580
actually started out as GDK it started

124
00:05:43,580 --> 00:05:45,410
out as like the general concept of GDK

125
00:05:45,410 --> 00:05:48,250
of course it was completely carved out

126
00:05:48,250 --> 00:05:50,900
the the guts were taken out of it and

127
00:05:50,900 --> 00:05:52,640
replaced with all of the code that we

128
00:05:52,640 --> 00:05:54,290
needed in order to make it work in our

129
00:05:54,290 --> 00:05:57,230
client server environment but the idea

130
00:05:57,230 --> 00:05:59,000
remains the same it's a GUI tool kit

131
00:05:59,000 --> 00:06:04,220
built around G object I doubt anybody I

132
00:06:04,220 --> 00:06:05,840
mean some maybe some people in here I've

133
00:06:05,840 --> 00:06:08,060
heard of gob I'll you'll see an example

134
00:06:08,060 --> 00:06:10,910
of it later gob was a small project that

135
00:06:10,910 --> 00:06:13,160
somebody made on the internet it isn't

136
00:06:13,160 --> 00:06:16,100
really used anymore but it it was

137
00:06:16,100 --> 00:06:18,200
something that we actually wanted it was

138
00:06:18,200 --> 00:06:20,720
a way to write effective G object code

139
00:06:20,720 --> 00:06:24,530
without all the croft and all the it's

140
00:06:24,530 --> 00:06:26,120
really tedious like lots and lots of

141
00:06:26,120 --> 00:06:27,590
lines of c in order just to write a

142
00:06:27,590 --> 00:06:30,200
simple object gob kind of hides that all

143
00:06:30,200 --> 00:06:32,450
the way and it's a preprocessor that

144
00:06:32,450 --> 00:06:34,250
just generates the G object code and

145
00:06:34,250 --> 00:06:35,180
what you're left with is like a

146
00:06:35,180 --> 00:06:37,820
basically a c-sharp like syntax you

147
00:06:37,820 --> 00:06:41,780
declare classes your properties signals

148
00:06:41,780 --> 00:06:44,270
things like this and when you use the

149
00:06:44,270 --> 00:06:45,790
preprocessor it actual

150
00:06:45,790 --> 00:06:49,540
looks pretty nice we had to implement

151
00:06:49,540 --> 00:06:51,790
our own equivalent G object

152
00:06:51,790 --> 00:06:53,800
introspection layer so when we took G

153
00:06:53,800 --> 00:06:56,440
object G object was just G object the

154
00:06:56,440 --> 00:06:58,720
gnome community didn't have any work in

155
00:06:58,720 --> 00:07:01,900
there related to introspecting these

156
00:07:01,900 --> 00:07:04,450
things or hooking it up to scripting

157
00:07:04,450 --> 00:07:05,830
languages they were just starting to

158
00:07:05,830 --> 00:07:08,710
mess around with serious Python

159
00:07:08,710 --> 00:07:12,100
integration stuff like that G object

160
00:07:12,100 --> 00:07:13,750
introspection was actually started the

161
00:07:13,750 --> 00:07:16,720
same year that we did this but we

162
00:07:16,720 --> 00:07:18,910
essentially forked at that time you know

163
00:07:18,910 --> 00:07:20,170
even though we're built on top of G

164
00:07:20,170 --> 00:07:22,090
object it's everything it's been all

165
00:07:22,090 --> 00:07:25,300
hacked now to to work the way we wanted

166
00:07:25,300 --> 00:07:27,850
to so we're no longer really derived

167
00:07:27,850 --> 00:07:30,430
from that you know we we can't take any

168
00:07:30,430 --> 00:07:31,780
of their code anymore because it just

169
00:07:31,780 --> 00:07:35,710
doesn't apply to our code base we had to

170
00:07:35,710 --> 00:07:37,510
implement our own equivalent of ggas

171
00:07:37,510 --> 00:07:39,700
which is a fairly recent project which

172
00:07:39,700 --> 00:07:42,310
came about at the same time that all of

173
00:07:42,310 --> 00:07:44,410
this server-side scripting stuff started

174
00:07:44,410 --> 00:07:47,230
to pick off pick up that project started

175
00:07:47,230 --> 00:07:49,480
in 08 and again we have this completed

176
00:07:49,480 --> 00:07:53,410
in 05 so give you an example of what

177
00:07:53,410 --> 00:07:55,420
some of this stuff looks like this is

178
00:07:55,420 --> 00:07:58,000
gob syntax if you've anybody here

179
00:07:58,000 --> 00:07:59,530
programs in c-sharp you know you'll see

180
00:07:59,530 --> 00:08:02,980
that this looks pretty similar the as

181
00:08:02,980 --> 00:08:05,010
far as the outer class definition goes

182
00:08:05,010 --> 00:08:07,660
inside the curly braces to still see

183
00:08:07,660 --> 00:08:10,900
your C++ but we really we liked the idea

184
00:08:10,900 --> 00:08:13,960
of gob and so we took gob and kind of

185
00:08:13,960 --> 00:08:17,950
made it our own we used the open-source

186
00:08:17,950 --> 00:08:20,920
one that exists for a little while but

187
00:08:20,920 --> 00:08:23,620
it had a lot of things that were missing

188
00:08:23,620 --> 00:08:25,990
so we decided to reimplement our own so

189
00:08:25,990 --> 00:08:28,090
we had a guy that wrote our own in oak

190
00:08:28,090 --> 00:08:30,550
camo and now it's a lot more complex we

191
00:08:30,550 --> 00:08:33,070
have support for C sharp type attributes

192
00:08:33,070 --> 00:08:35,680
and lots of other nice language features

193
00:08:35,680 --> 00:08:39,340
that again just all preprocess into C

194
00:08:39,340 --> 00:08:42,790
code that's built around G object so

195
00:08:42,790 --> 00:08:46,180
this this is what my group does we write

196
00:08:46,180 --> 00:08:48,010
a lot of these objects we we have a team

197
00:08:48,010 --> 00:08:50,320
core team that builds all these things

198
00:08:50,320 --> 00:08:54,250
and the app developers use all this so

199
00:08:54,250 --> 00:08:56,170
here's an example of this previous

200
00:08:56,170 --> 00:08:57,340
object

201
00:08:57,340 --> 00:08:59,560
you wrap it and because of the generic

202
00:08:59,560 --> 00:09:01,930
bindings which are equivalent to jjs it

203
00:09:01,930 --> 00:09:04,510
shows up in JavaScript like this and you

204
00:09:04,510 --> 00:09:06,220
can see that you know the bindings are

205
00:09:06,220 --> 00:09:08,800
can be pretty smart whatever logic you

206
00:09:08,800 --> 00:09:11,860
want to bake in there you can we we want

207
00:09:11,860 --> 00:09:15,070
to catch errors before they occur so you

208
00:09:15,070 --> 00:09:16,930
know when if you if an object if a

209
00:09:16,930 --> 00:09:18,670
native code object takes an integer and

210
00:09:18,670 --> 00:09:20,650
it gets something that's that can't fit

211
00:09:20,650 --> 00:09:22,060
inside of an integer it's going to throw

212
00:09:22,060 --> 00:09:24,070
rather than trying to coerce it or clamp

213
00:09:24,070 --> 00:09:26,260
it or something like that that's a

214
00:09:26,260 --> 00:09:28,090
general theme throughout all the

215
00:09:28,090 --> 00:09:30,400
bindings you want it to throw as early

216
00:09:30,400 --> 00:09:32,410
as possible so app developers can fix

217
00:09:32,410 --> 00:09:35,260
whatever the problem is so one of the

218
00:09:35,260 --> 00:09:37,780
problems is so you create a server-side

219
00:09:37,780 --> 00:09:40,420
scripting environment that's great now

220
00:09:40,420 --> 00:09:42,400
people can write JavaScript code but

221
00:09:42,400 --> 00:09:44,230
javascript by itself on the server side

222
00:09:44,230 --> 00:09:46,780
obviously isn't that useful you need to

223
00:09:46,780 --> 00:09:48,100
be able to do things with it you need to

224
00:09:48,100 --> 00:09:49,390
be able to get data you need to be able

225
00:09:49,390 --> 00:09:51,760
to affect whatever environment you're

226
00:09:51,760 --> 00:09:56,470
running in so we at Bloomberg have over

227
00:09:56,470 --> 00:09:57,820
the 30 years that they've been in

228
00:09:57,820 --> 00:09:59,920
business they they've had a legacy data

229
00:09:59,920 --> 00:10:02,860
catalog that allows programmers to

230
00:10:02,860 --> 00:10:05,770
access almost every point of data that's

231
00:10:05,770 --> 00:10:07,690
available for every security in the

232
00:10:07,690 --> 00:10:11,140
known world so you can take any unique

233
00:10:11,140 --> 00:10:13,750
security identifier you know the example

234
00:10:13,750 --> 00:10:16,570
like a stock ticker AAPL for Apple and

235
00:10:16,570 --> 00:10:19,270
you can request one of like thousands of

236
00:10:19,270 --> 00:10:20,950
different data points if you need that

237
00:10:20,950 --> 00:10:22,510
in your app you can say I want the last

238
00:10:22,510 --> 00:10:24,220
price i want the bid i want to ask you

239
00:10:24,220 --> 00:10:26,230
could ask about options stuff about

240
00:10:26,230 --> 00:10:28,660
credit default swaps about whatever all

241
00:10:28,660 --> 00:10:31,600
of these things have unique codes and

242
00:10:31,600 --> 00:10:33,670
you can request that data point it's a

243
00:10:33,670 --> 00:10:35,830
couple lines of code and you know it's

244
00:10:35,830 --> 00:10:37,900
not hard for people off the street to to

245
00:10:37,900 --> 00:10:41,770
learn this we built a our own homegrown

246
00:10:41,770 --> 00:10:43,990
generic seema schemas service

247
00:10:43,990 --> 00:10:46,600
architecture app developers that the

248
00:10:46,600 --> 00:10:48,040
asterisk I had and I when I said app

249
00:10:48,040 --> 00:10:50,020
developers write JavaScript they write

250
00:10:50,020 --> 00:10:51,900
that JavaScript for their for their GUI

251
00:10:51,900 --> 00:10:55,030
code for their apps but they're also

252
00:10:55,030 --> 00:10:56,860
responsible for any of these services

253
00:10:56,860 --> 00:10:58,510
that their app might talk to to do more

254
00:10:58,510 --> 00:11:01,120
complex tasks because while javascript

255
00:11:01,120 --> 00:11:03,310
is great and server-side javascript is

256
00:11:03,310 --> 00:11:06,450
great if you're doing heavy duty

257
00:11:06,450 --> 00:11:08,620
computation number crunching things like

258
00:11:08,620 --> 00:11:09,600
that you

259
00:11:09,600 --> 00:11:10,800
don't want to do it in JavaScript you

260
00:11:10,800 --> 00:11:13,920
want to farm it off to some native code

261
00:11:13,920 --> 00:11:15,509
that can do the right thing maybe talk

262
00:11:15,509 --> 00:11:16,769
to different databases different

263
00:11:16,769 --> 00:11:19,709
machines and to the JavaScript it just

264
00:11:19,709 --> 00:11:21,600
gets a response back with the data that

265
00:11:21,600 --> 00:11:25,410
needs we have our own in-house database

266
00:11:25,410 --> 00:11:27,660
that we've written because other

267
00:11:27,660 --> 00:11:30,540
database products you know obviously we

268
00:11:30,540 --> 00:11:33,089
have those too we have oracle and sequel

269
00:11:33,089 --> 00:11:34,920
server are basically db2 every database

270
00:11:34,920 --> 00:11:38,490
in on the man but there was holes that

271
00:11:38,490 --> 00:11:40,319
needed to be filled for the really

272
00:11:40,319 --> 00:11:42,509
really high performing applications you

273
00:11:42,509 --> 00:11:45,870
know apps with really really high read

274
00:11:45,870 --> 00:11:49,350
rates where you of course you can build

275
00:11:49,350 --> 00:11:51,089
the same thing in any of these other

276
00:11:51,089 --> 00:11:54,089
databases but the amount of hardware and

277
00:11:54,089 --> 00:11:55,920
the amount of money investment you would

278
00:11:55,920 --> 00:11:58,199
need in order to achieve the same read

279
00:11:58,199 --> 00:12:01,740
rate made you know this little niche for

280
00:12:01,740 --> 00:12:05,940
an in-house database so for super high

281
00:12:05,940 --> 00:12:08,190
read rate fixed record access we have

282
00:12:08,190 --> 00:12:10,380
our own database which is bound directly

283
00:12:10,380 --> 00:12:11,819
into the engine that people can access

284
00:12:11,819 --> 00:12:14,790
so like i said here's here's an example

285
00:12:14,790 --> 00:12:18,000
of you know if I just sit down I want to

286
00:12:18,000 --> 00:12:19,829
write an application and I want the last

287
00:12:19,829 --> 00:12:21,029
price of apple because I want to stick

288
00:12:21,029 --> 00:12:23,910
it on my screen this is an example of

289
00:12:23,910 --> 00:12:26,970
talking to our data catalog it's very

290
00:12:26,970 --> 00:12:29,519
easy for people you can give it any

291
00:12:29,519 --> 00:12:31,230
security that's available in our system

292
00:12:31,230 --> 00:12:35,189
these this PR 0 0 5 this that's the

293
00:12:35,189 --> 00:12:36,810
unique identifier I was mentioning about

294
00:12:36,810 --> 00:12:39,029
the the security the different data

295
00:12:39,029 --> 00:12:41,459
points that just happens to be the data

296
00:12:41,459 --> 00:12:44,790
point for last price you make a request

297
00:12:44,790 --> 00:12:48,209
and you get back both in string form and

298
00:12:48,209 --> 00:12:50,730
as a number if the data point is a

299
00:12:50,730 --> 00:12:52,880
number because sometimes there's

300
00:12:52,880 --> 00:12:54,750
formatting and things like that that are

301
00:12:54,750 --> 00:12:56,370
built in that would be in the string but

302
00:12:56,370 --> 00:13:00,630
not in the raw number so everybody's

303
00:13:00,630 --> 00:13:03,540
probably seen x SD before so assuming

304
00:13:03,540 --> 00:13:05,189
that you have somebody writes out an x

305
00:13:05,189 --> 00:13:07,589
SD generates one of these services on

306
00:13:07,589 --> 00:13:09,779
our back-end builds it deploys it it's

307
00:13:09,779 --> 00:13:12,689
out there you know have a simple request

308
00:13:12,689 --> 00:13:15,720
response pair this is bound also

309
00:13:15,720 --> 00:13:18,360
generically into our JavaScript we have

310
00:13:18,360 --> 00:13:21,540
a generic catalog that's available from

311
00:13:21,540 --> 00:13:22,860
the engine so I

312
00:13:22,860 --> 00:13:24,420
say I want to talk to this service

313
00:13:24,420 --> 00:13:27,180
version 1 point 0 and immediately the

314
00:13:27,180 --> 00:13:28,890
objects I'm working with in JavaScript

315
00:13:28,890 --> 00:13:32,430
represent the x SD schema and as you can

316
00:13:32,430 --> 00:13:35,700
see the x SD schema like the bindings

317
00:13:35,700 --> 00:13:37,620
take care of translating JSON into

318
00:13:37,620 --> 00:13:40,140
whatever the x SD scheme is so it's very

319
00:13:40,140 --> 00:13:42,930
very simple for app devs to start using

320
00:13:42,930 --> 00:13:46,200
this stuff and and get data into their

321
00:13:46,200 --> 00:13:50,550
application catalog is externally

322
00:13:50,550 --> 00:13:52,740
maintained everything is schema

323
00:13:52,740 --> 00:13:55,350
diversion to met to manage roll out ever

324
00:13:55,350 --> 00:13:57,660
since it levels the playing field now

325
00:13:57,660 --> 00:14:00,060
every developer in the company can look

326
00:14:00,060 --> 00:14:02,190
at the schema for anything and see what

327
00:14:02,190 --> 00:14:03,570
it is you don't have to go hunting

328
00:14:03,570 --> 00:14:05,670
around for somebody's native code in

329
00:14:05,670 --> 00:14:06,750
like a different group that you never

330
00:14:06,750 --> 00:14:10,140
talked to before the services because

331
00:14:10,140 --> 00:14:11,810
it's this generic framework you

332
00:14:11,810 --> 00:14:13,860
externally configure them to run either

333
00:14:13,860 --> 00:14:16,860
in process or out of process and also

334
00:14:16,860 --> 00:14:19,200
the transport is configurable we

335
00:14:19,200 --> 00:14:22,140
obviously depend a lot on speed so the

336
00:14:22,140 --> 00:14:24,690
majority of stuff in our system works

337
00:14:24,690 --> 00:14:27,540
via shared memory that we try to use as

338
00:14:27,540 --> 00:14:31,290
little sockets and TCP as necessary

339
00:14:31,290 --> 00:14:32,910
because everything passing around

340
00:14:32,910 --> 00:14:34,410
locally on the same machine was shared

341
00:14:34,410 --> 00:14:37,650
memory is a lot faster but for

342
00:14:37,650 --> 00:14:39,720
compatibility we you know it also

343
00:14:39,720 --> 00:14:42,450
supports things like soap so we have

344
00:14:42,450 --> 00:14:44,970
apps that are written in our homegrown

345
00:14:44,970 --> 00:14:47,750
server-side JavaScript that talk to

346
00:14:47,750 --> 00:14:51,150
services in external banks that are just

347
00:14:51,150 --> 00:14:53,430
windows soap web services to get data

348
00:14:53,430 --> 00:14:55,610
directly into our server side JavaScript

349
00:14:55,610 --> 00:14:58,380
so it's very very convenient it all

350
00:14:58,380 --> 00:15:00,180
works do the same infrastructure there's

351
00:15:00,180 --> 00:15:01,440
there's no difference to the app

352
00:15:01,440 --> 00:15:05,660
developer there's always a blood

353
00:15:05,660 --> 00:15:07,710
marshaling data to JavaScript sucks

354
00:15:07,710 --> 00:15:10,920
anybody that writes a server-side engine

355
00:15:10,920 --> 00:15:14,190
or deals with sticking data into

356
00:15:14,190 --> 00:15:16,470
JavaScript you really really don't want

357
00:15:16,470 --> 00:15:18,300
to work with large amounts of data in

358
00:15:18,300 --> 00:15:21,420
JavaScript because everything you have

359
00:15:21,420 --> 00:15:23,190
obviously if you're pulling it from

360
00:15:23,190 --> 00:15:25,050
somewhere it's already in the most

361
00:15:25,050 --> 00:15:27,180
efficient implementation and possible if

362
00:15:27,180 --> 00:15:29,280
you've done that work you know we want

363
00:15:29,280 --> 00:15:32,670
to have constraints we we enforce we

364
00:15:32,670 --> 00:15:34,740
like push on to our app developers a

365
00:15:34,740 --> 00:15:36,300
limited heap size so

366
00:15:36,300 --> 00:15:37,830
you're running in this reusable

367
00:15:37,830 --> 00:15:39,690
container your JavaScript app gets

368
00:15:39,690 --> 00:15:42,120
invoked for all intents and purposes you

369
00:15:42,120 --> 00:15:44,190
you have a fixed heap if you go if you

370
00:15:44,190 --> 00:15:46,650
cross that heat boundary your app is

371
00:15:46,650 --> 00:15:47,760
going to throw an exception you're going

372
00:15:47,760 --> 00:15:49,890
to get an out of memory exception and

373
00:15:49,890 --> 00:15:51,810
and the way we enforce this is

374
00:15:51,810 --> 00:15:54,270
interesting but it's separate from this

375
00:15:54,270 --> 00:15:57,570
talk and speed is the the final thing

376
00:15:57,570 --> 00:16:00,210
the majority of our fastest applications

377
00:16:00,210 --> 00:16:03,360
run end and from from the time the user

378
00:16:03,360 --> 00:16:05,850
types it in so where the stuff is on the

379
00:16:05,850 --> 00:16:08,190
screen in like 18 milliseconds 20

380
00:16:08,190 --> 00:16:10,980
milliseconds 30 milliseconds we try to

381
00:16:10,980 --> 00:16:13,350
handle any event in under 100

382
00:16:13,350 --> 00:16:17,460
milliseconds so to us speed is one of

383
00:16:17,460 --> 00:16:19,350
the greatest concerns because of data

384
00:16:19,350 --> 00:16:22,700
center usage hardware usage power

385
00:16:22,700 --> 00:16:24,990
consumption things like this that you

386
00:16:24,990 --> 00:16:26,130
have to deal with when you have a large

387
00:16:26,130 --> 00:16:30,240
data center so we have had to do a lot

388
00:16:30,240 --> 00:16:31,890
of optimizations that a lot of people

389
00:16:31,890 --> 00:16:34,890
don't have haven't had to do like our

390
00:16:34,890 --> 00:16:38,610
environment has lots of caching built in

391
00:16:38,610 --> 00:16:40,770
compiling things to byte code executing

392
00:16:40,770 --> 00:16:43,680
cash byte code and anywhere we can gain

393
00:16:43,680 --> 00:16:45,540
a couple milliseconds back like we've

394
00:16:45,540 --> 00:16:50,010
tried to take it the JavaScript we

395
00:16:50,010 --> 00:16:51,890
ideally wanted it to just be rich glue

396
00:16:51,890 --> 00:16:54,300
people can write complex apps with

397
00:16:54,300 --> 00:16:56,820
handlers signals from GUI widgets and

398
00:16:56,820 --> 00:16:59,640
access to data sources without having to

399
00:16:59,640 --> 00:17:02,220
stick all of the data into JavaScript so

400
00:17:02,220 --> 00:17:04,530
here's a dumb simple example of

401
00:17:04,530 --> 00:17:07,920
something this is a real test screen

402
00:17:07,920 --> 00:17:10,170
just showing like some data in our GUI

403
00:17:10,170 --> 00:17:12,330
environment being shoved up onto the

404
00:17:12,330 --> 00:17:14,250
screen it's all the members of the the

405
00:17:14,250 --> 00:17:18,060
Dow Jones index in a list this is the

406
00:17:18,060 --> 00:17:19,650
actual JavaScript code for that entire

407
00:17:19,650 --> 00:17:22,880
screen this is a very simplistic example

408
00:17:22,880 --> 00:17:24,990
because there's no interaction with this

409
00:17:24,990 --> 00:17:26,430
UI it's just grabbing a bunch of data

410
00:17:26,430 --> 00:17:28,290
and throwing it up onto the screen but

411
00:17:28,290 --> 00:17:29,760
the key thing to take away from this is

412
00:17:29,760 --> 00:17:33,120
we we've discovered through running all

413
00:17:33,120 --> 00:17:35,370
of our stuff that when you get data

414
00:17:35,370 --> 00:17:37,680
responses back you want to try to deal

415
00:17:37,680 --> 00:17:39,930
with them with tools that prevent them

416
00:17:39,930 --> 00:17:41,670
from marshaling into JavaScript so when

417
00:17:41,670 --> 00:17:43,920
we get back this data set of all the

418
00:17:43,920 --> 00:17:46,650
members in the index we use this thing

419
00:17:46,650 --> 00:17:47,980
that we call a mapper to

420
00:17:47,980 --> 00:17:50,770
and pop populated into the grid and the

421
00:17:50,770 --> 00:17:54,270
mapper just is predefined to say which

422
00:17:54,270 --> 00:17:57,070
which fields in the series in the

423
00:17:57,070 --> 00:17:58,870
response get mapped to which columns in

424
00:17:58,870 --> 00:18:02,650
this grid just using generic expats now

425
00:18:02,650 --> 00:18:05,559
you know from here design time and what

426
00:18:05,559 --> 00:18:08,380
does it mean to write JavaScript design

427
00:18:08,380 --> 00:18:10,510
time and it's just not editing

428
00:18:10,510 --> 00:18:14,410
JavaScript we built full IDE this is all

429
00:18:14,410 --> 00:18:18,010
homegrown we have support for debugging

430
00:18:18,010 --> 00:18:20,110
profiling all this stuff in here and

431
00:18:20,110 --> 00:18:23,260
this runs live in our environment so at

432
00:18:23,260 --> 00:18:26,710
this point I'm going to show you guys an

433
00:18:26,710 --> 00:18:36,490
example of how this stuff works

434
00:18:36,500 --> 00:19:23,790
of course we have to resume it

435
00:19:23,800 --> 00:19:45,210
this was set up before but ok no

436
00:19:45,220 --> 00:19:48,880
okay so I threw this together before

437
00:19:48,880 --> 00:19:50,980
this is just some simple example people

438
00:19:50,980 --> 00:19:53,049
like pictures rather than words this is

439
00:19:53,049 --> 00:19:54,880
just an image widget thrown on the

440
00:19:54,880 --> 00:19:57,700
screen as well as a flag which is just a

441
00:19:57,700 --> 00:19:59,559
specialized version of an image where a

442
00:19:59,559 --> 00:20:01,330
programmer could set a country code on

443
00:20:01,330 --> 00:20:03,730
it instead of having to remember some

444
00:20:03,730 --> 00:20:08,710
image resource so just to kind of show

445
00:20:08,710 --> 00:20:12,520
you the interaction in here so say I

446
00:20:12,520 --> 00:20:15,070
drag a button in here this works exactly

447
00:20:15,070 --> 00:20:18,820
like an ID that any other ID you would

448
00:20:18,820 --> 00:20:20,950
expect except as you can see the code is

449
00:20:20,950 --> 00:20:23,650
JavaScript everything that's powering

450
00:20:23,650 --> 00:20:27,370
this screen is JavaScript there's

451
00:20:27,370 --> 00:20:30,669
autocomplete in here there's error

452
00:20:30,669 --> 00:20:31,900
checking it tells you when you have

453
00:20:31,900 --> 00:20:34,330
syntax errors in your code all this

454
00:20:34,330 --> 00:20:36,010
stuff and this is hooked into our

455
00:20:36,010 --> 00:20:38,140
service layer and our database layer so

456
00:20:38,140 --> 00:20:40,240
when you when you say application

457
00:20:40,240 --> 00:20:41,409
services create and you give it a

458
00:20:41,409 --> 00:20:44,230
servant service name the it populates

459
00:20:44,230 --> 00:20:46,270
the intellisense data with the stuff

460
00:20:46,270 --> 00:20:48,549
from the schema for that service so it's

461
00:20:48,549 --> 00:20:51,190
very developer friendly for for getting

462
00:20:51,190 --> 00:20:54,429
access to your data and the other thing

463
00:20:54,429 --> 00:20:57,190
is that it's very environment tries to

464
00:20:57,190 --> 00:20:59,409
protect against our so here I'll show

465
00:20:59,409 --> 00:21:02,740
that you see that down in here the image

466
00:21:02,740 --> 00:21:04,570
that I had dragged into that app is

467
00:21:04,570 --> 00:21:07,059
named image and so I'm going to set the

468
00:21:07,059 --> 00:21:10,830
picture on that that image to a string

469
00:21:10,830 --> 00:21:15,470
now

470
00:21:15,480 --> 00:21:18,210
you'll see here that from the IDE you're

471
00:21:18,210 --> 00:21:20,880
running you're running this app live

472
00:21:20,880 --> 00:21:22,920
within our actual software that's

473
00:21:22,920 --> 00:21:25,710
sitting on client desktops so there's no

474
00:21:25,710 --> 00:21:27,690
trickery here you know it's it's running

475
00:21:27,690 --> 00:21:29,280
live so everything you see is exactly

476
00:21:29,280 --> 00:21:30,030
what you're going to get when you

477
00:21:30,030 --> 00:21:32,250
publish publish this up and you'll see

478
00:21:32,250 --> 00:21:35,160
when I click this because I'm a

479
00:21:35,160 --> 00:21:37,260
developer I get this nice little pop-up

480
00:21:37,260 --> 00:21:38,940
telling me that oh you did something

481
00:21:38,940 --> 00:21:42,240
evil and I go and look in here and it

482
00:21:42,240 --> 00:21:44,970
tells me integrated into the GUI that

483
00:21:44,970 --> 00:21:47,010
you know I got this JavaScript exception

484
00:21:47,010 --> 00:21:50,160
because I tried to assign a string you

485
00:21:50,160 --> 00:21:51,660
know that doesn't course to a number to

486
00:21:51,660 --> 00:21:57,810
something that expects a number and you

487
00:21:57,810 --> 00:22:00,900
can see something that works in here you

488
00:22:00,900 --> 00:22:07,950
know i'm going to set so instead i want

489
00:22:07,950 --> 00:22:12,060
this handler to change the flag to a

490
00:22:12,060 --> 00:22:16,370
different country now you can see this

491
00:22:16,370 --> 00:22:18,630
this is the workflow that we switched

492
00:22:18,630 --> 00:22:21,690
everybody to instead of compiling code

493
00:22:21,690 --> 00:22:25,410
linking code debugging native binary the

494
00:22:25,410 --> 00:22:29,040
dbx gdb whatever everybody programs like

495
00:22:29,040 --> 00:22:32,250
this now and this increased productivity

496
00:22:32,250 --> 00:22:34,740
probably like an order of five orders of

497
00:22:34,740 --> 00:22:35,820
magnitude I mean it's like ridiculous

498
00:22:35,820 --> 00:22:38,790
how much more product comes out of the

499
00:22:38,790 --> 00:22:41,280
entire rd of thousands of people because

500
00:22:41,280 --> 00:22:46,050
of this environment and I'll show you

501
00:22:46,050 --> 00:22:49,050
what we do now so say I want to take

502
00:22:49,050 --> 00:22:51,030
this app and I want to publish this app

503
00:22:51,030 --> 00:22:53,430
so that a client can run it I'm on the

504
00:22:53,430 --> 00:22:54,990
phone with a guy in a bank right now and

505
00:22:54,990 --> 00:22:57,300
I want to demo something to him so I

506
00:22:57,300 --> 00:23:01,050
like my app right now I'm going to

507
00:23:01,050 --> 00:23:08,780
publish it

508
00:23:08,790 --> 00:23:11,050
the other thing to note about this ID is

509
00:23:11,050 --> 00:23:13,240
that there's no local files this entire

510
00:23:13,240 --> 00:23:15,130
thing is inside of the cloud n.e.r.d

511
00:23:15,130 --> 00:23:17,170
developer anywhere in the world can log

512
00:23:17,170 --> 00:23:19,090
in to our terminal access the

513
00:23:19,090 --> 00:23:20,620
development environment and all of their

514
00:23:20,620 --> 00:23:22,140
work that they're editing and publishing

515
00:23:22,140 --> 00:23:24,910
testing it all goes into our backend

516
00:23:24,910 --> 00:23:31,150
there's no local storage here it makes

517
00:23:31,150 --> 00:23:32,530
it very convenient for people just to

518
00:23:32,530 --> 00:23:34,120
pick up work wherever they are and also

519
00:23:34,120 --> 00:23:40,840
work on laptops so I published this

520
00:23:40,840 --> 00:23:42,820
thing now I had a version in here before

521
00:23:42,820 --> 00:23:44,950
but I published it this is our

522
00:23:44,950 --> 00:23:47,050
deployment system so right now this

523
00:23:47,050 --> 00:23:49,560
thing is released to me on development

524
00:23:49,560 --> 00:23:54,490
so I'm going to come shove this right to

525
00:23:54,490 --> 00:23:57,850
prod I have superuser access to do this

526
00:23:57,850 --> 00:24:00,280
so nobody you know doesn't normally work

527
00:24:00,280 --> 00:24:05,200
this way and I'm going to assign a

528
00:24:05,200 --> 00:24:07,240
mnemonic to it so that I could actually

529
00:24:07,240 --> 00:24:09,640
run this in our real software and i'm

530
00:24:09,640 --> 00:24:14,200
going to call it JSC f so this thing is

531
00:24:14,200 --> 00:24:17,140
now deployed this if if i added a client

532
00:24:17,140 --> 00:24:18,790
to that list if they come in here and

533
00:24:18,790 --> 00:24:21,970
just run JSDF they get this application

534
00:24:21,970 --> 00:24:26,470
that i just wrote which to show this to

535
00:24:26,470 --> 00:24:28,870
people like to talk to them about a

536
00:24:28,870 --> 00:24:30,280
workflow that they want and then to

537
00:24:30,280 --> 00:24:33,640
prototype it during a lunch break and go

538
00:24:33,640 --> 00:24:35,320
back and show them exactly what they

539
00:24:35,320 --> 00:24:38,020
were just talking about an hour before

540
00:24:38,020 --> 00:24:40,000
is really powerful and it's actually

541
00:24:40,000 --> 00:24:42,790
helped us win a lot of business but i'll

542
00:24:42,790 --> 00:24:43,960
show you some of the tools that we built

543
00:24:43,960 --> 00:24:45,220
around this because just building

544
00:24:45,220 --> 00:24:46,480
something isn't good enough you need to

545
00:24:46,480 --> 00:24:49,990
be able to test it and debug it so say i

546
00:24:49,990 --> 00:24:52,150
go back in here and i change it back to

547
00:24:52,150 --> 00:24:54,340
what i have before this is going to

548
00:24:54,340 --> 00:24:57,190
throw an exception i can set a

549
00:24:57,190 --> 00:24:59,860
breakpoint here i could come in here and

550
00:24:59,860 --> 00:25:04,390
debug so it was very interesting to

551
00:25:04,390 --> 00:25:07,810
actually get this working debugging live

552
00:25:07,810 --> 00:25:09,970
inside of server-side javascript it

553
00:25:09,970 --> 00:25:12,910
actually involves two processes that the

554
00:25:12,910 --> 00:25:17,090
one the debug e is actually opening up a

555
00:25:17,090 --> 00:25:19,049
blocking socket connection to the

556
00:25:19,049 --> 00:25:21,389
debugger so that's how we implement the

557
00:25:21,389 --> 00:25:23,970
stopping you know that if that socket

558
00:25:23,970 --> 00:25:25,590
read blocks then that's how the debug

559
00:25:25,590 --> 00:25:28,559
use waiting so now when I click on the

560
00:25:28,559 --> 00:25:33,210
button you'll see that my my break point

561
00:25:33,210 --> 00:25:35,460
fired over here and just like any other

562
00:25:35,460 --> 00:25:37,889
idea you know I can go in I see the

563
00:25:37,889 --> 00:25:40,080
JavaScript variable image its type I see

564
00:25:40,080 --> 00:25:42,480
all of the the members on that

565
00:25:42,480 --> 00:25:44,730
JavaScript variable and what their

566
00:25:44,730 --> 00:25:46,889
values are I can come in here and run

567
00:25:46,889 --> 00:25:50,309
code I can in run code in the context of

568
00:25:50,309 --> 00:25:51,690
the jas context that's currently

569
00:25:51,690 --> 00:25:52,950
executing right now if I want to change

570
00:25:52,950 --> 00:25:55,289
something you know so this is pretty

571
00:25:55,289 --> 00:25:56,850
powerful and of course if I continue

572
00:25:56,850 --> 00:25:59,549
when it's going to blow up this system

573
00:25:59,549 --> 00:26:02,460
in production if I run if Iran that app

574
00:26:02,460 --> 00:26:04,080
and it did that in production and it

575
00:26:04,080 --> 00:26:06,000
crashed it kicks into the whole

576
00:26:06,000 --> 00:26:07,740
notification system we have so that the

577
00:26:07,740 --> 00:26:08,909
programmers that publish this

578
00:26:08,909 --> 00:26:11,850
automatically get notification walk

579
00:26:11,850 --> 00:26:14,370
backs JavaScript and in native code of

580
00:26:14,370 --> 00:26:15,929
where the application failed it

581
00:26:15,929 --> 00:26:17,429
automatically puts tickets into our bug

582
00:26:17,429 --> 00:26:19,049
tracking system things like that so it's

583
00:26:19,049 --> 00:26:22,440
a very self healing system now once this

584
00:26:22,440 --> 00:26:26,100
is available we have other tools you

585
00:26:26,100 --> 00:26:27,539
know how do you look at the performance

586
00:26:27,539 --> 00:26:32,220
of your app so here this this is very

587
00:26:32,220 --> 00:26:34,470
in-depth information about our back-end

588
00:26:34,470 --> 00:26:37,260
for running this JavaScript application

589
00:26:37,260 --> 00:26:40,830
it took 14 point 46 milliseconds of CPU

590
00:26:40,830 --> 00:26:43,460
time to run this a bunch of different

591
00:26:43,460 --> 00:26:46,139
data databases and things that were

592
00:26:46,139 --> 00:26:48,179
accessed you know we have built-in

593
00:26:48,179 --> 00:26:52,200
timers and checks in here to figure out

594
00:26:52,200 --> 00:26:54,899
where the time is being spent if we were

595
00:26:54,899 --> 00:26:57,299
talking to any services things like that

596
00:26:57,299 --> 00:27:00,990
we we can look at the actual scheme adre

597
00:27:00,990 --> 00:27:02,880
quest going out to the services and not

598
00:27:02,880 --> 00:27:04,409
just see the requests and how long they

599
00:27:04,409 --> 00:27:06,539
took dive into them and actually see the

600
00:27:06,539 --> 00:27:09,320
payloads of the requests which is pretty

601
00:27:09,320 --> 00:27:13,019
interesting for people in addition to

602
00:27:13,019 --> 00:27:19,260
that memory debugging so people need to

603
00:27:19,260 --> 00:27:24,059
know how many how their JavaScript usage

604
00:27:24,059 --> 00:27:25,889
like how many objects they're creating

605
00:27:25,889 --> 00:27:27,510
because these apps can be long-lived

606
00:27:27,510 --> 00:27:29,220
apps so they need to know

607
00:27:29,220 --> 00:27:31,169
am i keeping objects alive is everything

608
00:27:31,169 --> 00:27:33,030
being deceived is there a bug in the

609
00:27:33,030 --> 00:27:34,770
native code of one of these objects

610
00:27:34,770 --> 00:27:36,690
that's causing the reference to stay

611
00:27:36,690 --> 00:27:40,470
around for it to leak so this is running

612
00:27:40,470 --> 00:27:42,120
live right now so if I go over here and

613
00:27:42,120 --> 00:27:54,570
kill this this should update it doesn't

614
00:27:54,570 --> 00:27:57,720
update a nap but anyway the point is you

615
00:27:57,720 --> 00:27:59,789
can come in inspect everything you can

616
00:27:59,789 --> 00:28:05,330
see okay wrap it up you could see code

617
00:28:05,330 --> 00:28:08,490
this is saying this indicates that it's

618
00:28:08,490 --> 00:28:10,919
from native code I'm not running in

619
00:28:10,919 --> 00:28:12,330
something that's supported right now but

620
00:28:12,330 --> 00:28:15,020
we actually get native code walk backs

621
00:28:15,020 --> 00:28:17,309
JavaScript walk backs of where this

622
00:28:17,309 --> 00:28:21,600
stuff broke so that's it we run out of

623
00:28:21,600 --> 00:28:23,429
time I mean this is like a lot of stuff

624
00:28:23,429 --> 00:28:25,950
to try to cram into 20 minutes but we

625
00:28:25,950 --> 00:28:27,210
kind of wanted to show everybody you

626
00:28:27,210 --> 00:28:28,919
know we've been doing this for years we

627
00:28:28,919 --> 00:28:30,840
have a lot of time and effort invested

628
00:28:30,840 --> 00:28:32,490
into this tool chain and making

629
00:28:32,490 --> 00:28:35,460
everybody productive in it so we hope

630
00:28:35,460 --> 00:28:37,500
that some of these ideas can carry over

631
00:28:37,500 --> 00:28:41,789
into the nodejs world and I look forward

632
00:28:41,789 --> 00:28:45,510
to seeing nodejs got a competitor spider

633
00:28:45,510 --> 00:28:47,789
monkey because we use spider monkey we

634
00:28:47,789 --> 00:28:51,450
can't use v8 for a bunch of reasons but

635
00:28:51,450 --> 00:28:53,850
spider monkey hasn't been really

636
00:28:53,850 --> 00:28:56,220
entering into the server side arena it's

637
00:28:56,220 --> 00:28:58,230
going to be soon there they're fitting

638
00:28:58,230 --> 00:28:59,909
it with a v8 harness to get it into a

639
00:28:59,909 --> 00:29:02,220
spider node so we'll see what that

