1
00:00:05,610 --> 00:00:09,540

so my name is Constantine and I'll learn

2
00:00:09,540 --> 00:00:13,920
how to use this remote just another

3
00:00:13,920 --> 00:00:23,409
second so there are just three buttons

4
00:00:23,419 --> 00:00:26,640
I'll use my finger and I just press

5
00:00:26,640 --> 00:00:30,329
spacebar here so I work for Facebook on

6
00:00:30,329 --> 00:00:33,120
Marketplace team and I mostly focus on

7
00:00:33,120 --> 00:00:35,220
performance recently before joining

8
00:00:35,220 --> 00:00:37,350
marketplace in Seattle I worked in

9
00:00:37,350 --> 00:00:40,440
Facebook UK and I worked on yarn package

10
00:00:40,440 --> 00:00:44,640
manager anyone loves packages and before

11
00:00:44,640 --> 00:00:46,500
that I worked on react native so I'm a

12
00:00:46,500 --> 00:00:48,479
little bit biased towards what framework

13
00:00:48,479 --> 00:00:53,170
to choose when you build a mobile app so

14
00:00:53,180 --> 00:00:56,640
today I'm going to talk what I have been

15
00:00:56,640 --> 00:00:58,769
working on for the last year actually

16
00:00:58,769 --> 00:01:03,119
making Marketplace load faster just

17
00:01:03,119 --> 00:01:04,860
before we start anyone is familiar with

18
00:01:04,860 --> 00:01:08,189
react nice

19
00:01:08,189 --> 00:01:12,960
how about react native much less so this

20
00:01:12,960 --> 00:01:16,619
talk is I made it so that you could

21
00:01:16,619 --> 00:01:19,680
actually take it home some ideas how to

22
00:01:19,680 --> 00:01:20,909
make your application faster

23
00:01:20,909 --> 00:01:23,460
specifically react native but it also

24
00:01:23,460 --> 00:01:25,799
applies to react and actually if you

25
00:01:25,799 --> 00:01:27,659
think about it it applies to any other

26
00:01:27,659 --> 00:01:32,579
application so first of all what is

27
00:01:32,579 --> 00:01:35,429
marketplace anyone used marketplace

28
00:01:35,429 --> 00:01:39,149
before so it's a platform it's actually

29
00:01:39,149 --> 00:01:41,369
a tab inside Facebook application anyone

30
00:01:41,369 --> 00:01:44,460
knows about Facebook so it's a social

31
00:01:44,460 --> 00:01:46,460
network

32
00:01:46,460 --> 00:01:48,590
and there are tabs in it and marketplace

33
00:01:48,590 --> 00:01:50,960
is one of the tabs it's a place where

34
00:01:50,960 --> 00:01:53,360
you can buy and sell things to people in

35
00:01:53,360 --> 00:01:58,210
your community so marketplace started in

36
00:01:58,210 --> 00:02:01,580
2016 and it took us to build to build

37
00:02:01,580 --> 00:02:03,920
the first version for iOS just six

38
00:02:03,920 --> 00:02:06,290
months and actually we tested it in

39
00:02:06,290 --> 00:02:09,590
Hawaii so it means that this stock sort

40
00:02:09,590 --> 00:02:12,620
of brings it back home then it took us

41
00:02:12,620 --> 00:02:14,690
just two months to build the Android

42
00:02:14,690 --> 00:02:16,790
version and this is actually quite rare

43
00:02:16,790 --> 00:02:20,450
for applications of this size in company

44
00:02:20,450 --> 00:02:24,860
of this this size because it's usually

45
00:02:24,860 --> 00:02:25,880
like six months

46
00:02:25,880 --> 00:02:28,459
iOS then another six months Android but

47
00:02:28,459 --> 00:02:30,920
because we reused JavaScript and 90% of

48
00:02:30,920 --> 00:02:33,620
the code was reused we were able to do

49
00:02:33,620 --> 00:02:35,380
it just in two months

50
00:02:35,380 --> 00:02:38,390
so what officially launched in October

51
00:02:38,390 --> 00:02:41,300
2016 to mainland US and some other

52
00:02:41,300 --> 00:02:44,870
countries and now it's global and there

53
00:02:44,870 --> 00:02:47,360
are more than 800 million people using

54
00:02:47,360 --> 00:02:51,700
this application every month and

55
00:02:51,700 --> 00:02:54,290
marketplace is more than just buying and

56
00:02:54,290 --> 00:02:56,420
selling items to people around you it's

57
00:02:56,420 --> 00:02:59,120
also both buying a car finding a place

58
00:02:59,120 --> 00:03:04,060
to live some daily deals some business

59
00:03:04,060 --> 00:03:06,950
opportunities quite a lot the team is

60
00:03:06,950 --> 00:03:09,440
quite large it's more than 100 engineers

61
00:03:09,440 --> 00:03:11,540
working on the same react native code

62
00:03:11,540 --> 00:03:16,670
base so market will plays grew from 0 to

63
00:03:16,670 --> 00:03:19,780
800 million in just about two years and

64
00:03:19,780 --> 00:03:23,810
the Tube team grew as well so we need to

65
00:03:23,810 --> 00:03:26,510
hire more people and we need to make the

66
00:03:26,510 --> 00:03:29,570
application nice to work with and react

67
00:03:29,570 --> 00:03:31,880
native played a big role in how to make

68
00:03:31,880 --> 00:03:37,730
a good developer experience so anyone is

69
00:03:37,730 --> 00:03:41,660
familiar with hot reloading anyone knows

70
00:03:41,660 --> 00:03:43,459
the difference between live reloading

71
00:03:43,459 --> 00:03:46,730
and hot reloading all right not everyone

72
00:03:46,730 --> 00:03:49,640
so live reloading is when you develop a

73
00:03:49,640 --> 00:03:52,760
website you change your code type

74
00:03:52,760 --> 00:03:55,430
something save it and then your browser

75
00:03:55,430 --> 00:03:58,250
or application refreshes with the latest

76
00:03:58,250 --> 00:04:00,400
code and you see the changes

77
00:04:00,400 --> 00:04:03,349
hot reloading is when you make your

78
00:04:03,349 --> 00:04:07,549
changes on your laptop like here make

79
00:04:07,549 --> 00:04:09,560
some code some code changes to my react

80
00:04:09,560 --> 00:04:13,579
component I press save and then it goes

81
00:04:13,579 --> 00:04:16,400
to the device and only the components

82
00:04:16,400 --> 00:04:18,919
that actually changed get re-rendered

83
00:04:18,919 --> 00:04:22,250
as usual react tree renders components

84
00:04:22,250 --> 00:04:25,520
at at its pleasure and this iteration is

85
00:04:25,520 --> 00:04:26,990
quite fast because I'm just changing

86
00:04:26,990 --> 00:04:30,550
code a little bit and here we go and

87
00:04:30,550 --> 00:04:32,870
another thing that you probably don't

88
00:04:32,870 --> 00:04:35,419
know at Facebook we don't like building

89
00:04:35,419 --> 00:04:37,910
the Facebook application will love the

90
00:04:37,910 --> 00:04:39,919
application but building it is not fun

91
00:04:39,919 --> 00:04:42,020
because it takes 30 minutes to have a

92
00:04:42,020 --> 00:04:44,750
new binary on your device because we

93
00:04:44,750 --> 00:04:47,479
have millions of files something good

94
00:04:47,479 --> 00:04:50,090
about react native as I mentioned 90% of

95
00:04:50,090 --> 00:04:52,910
the code or even more is written in

96
00:04:52,910 --> 00:04:55,370
JavaScript and we don't need to change

97
00:04:55,370 --> 00:04:58,460
the native code that often so what we

98
00:04:58,460 --> 00:05:00,620
can do is we can grab the latest binary

99
00:05:00,620 --> 00:05:03,349
from a build server install it on the

100
00:05:03,349 --> 00:05:06,080
device and then build the JavaScript

101
00:05:06,080 --> 00:05:08,259
file from the source code

102
00:05:08,259 --> 00:05:10,880
as a matter of fact we have integration

103
00:05:10,880 --> 00:05:15,050
with our IDE that just grabs this binary

104
00:05:15,050 --> 00:05:16,820
and does everything with just one single

105
00:05:16,820 --> 00:05:22,550
click another big deal is hiring people

106
00:05:22,550 --> 00:05:25,550
as I told you marketplace team has grown

107
00:05:25,550 --> 00:05:29,360
a lot to build a lot of features and at

108
00:05:29,360 --> 00:05:32,150
Facebook we have a joke that it's really

109
00:05:32,150 --> 00:05:34,099
hard to find Android developers because

110
00:05:34,099 --> 00:05:37,280
we already hired every Android developer

111
00:05:37,280 --> 00:05:39,469
who wanted to work for us

112
00:05:39,469 --> 00:05:44,149
so we we need a high incidentally there

113
00:05:44,149 --> 00:05:45,709
are more JavaScript developers around

114
00:05:45,709 --> 00:05:49,209
still hard to hire them but possible

115
00:05:49,209 --> 00:05:51,769
less than 5% of people working on

116
00:05:51,769 --> 00:05:53,749
marketplace are actually specializing in

117
00:05:53,749 --> 00:05:57,259
native platforms it doesn't mean that we

118
00:05:57,259 --> 00:05:59,269
don't use their skills we just leverage

119
00:05:59,269 --> 00:06:00,949
their ability to work on something

120
00:06:00,949 --> 00:06:03,769
complex platform specific all the other

121
00:06:03,769 --> 00:06:06,349
people are quite quick to adapt to their

122
00:06:06,349 --> 00:06:09,469
javascript code base and become quite

123
00:06:09,469 --> 00:06:15,169
proficient building features Repton

124
00:06:15,169 --> 00:06:19,069
react native are also very popular if

125
00:06:19,069 --> 00:06:21,459
you count github stars which I do

126
00:06:21,459 --> 00:06:26,769
periodically there it probably in top 10

127
00:06:26,769 --> 00:06:31,159
frameworks on github by star count of

128
00:06:31,159 --> 00:06:34,639
course it doesn't matter but if you look

129
00:06:34,639 --> 00:06:36,979
at the number of contributors individual

130
00:06:36,979 --> 00:06:38,629
people who contribute to the codebase

131
00:06:38,629 --> 00:06:40,909
react native is one of the top projects

132
00:06:40,909 --> 00:06:44,569
and also it built a community around it

133
00:06:44,569 --> 00:06:46,969
what I'm saying is that when we hire

134
00:06:46,969 --> 00:06:49,849
people from outside to work on

135
00:06:49,849 --> 00:06:52,309
marketplace those people are very likely

136
00:06:52,309 --> 00:06:55,159
already familiar with our technology

137
00:06:55,159 --> 00:06:57,800
technology and it means that they can be

138
00:06:57,800 --> 00:07:02,269
productive straightaway so I just

139
00:07:02,269 --> 00:07:04,699
described react native a JavaScript

140
00:07:04,699 --> 00:07:06,740
framework that allowed us to grow the

141
00:07:06,740 --> 00:07:10,579
team fast but what about javascript and

142
00:07:10,579 --> 00:07:13,550
been building an application that works

143
00:07:13,550 --> 00:07:16,669
fast javascript has a lot of things that

144
00:07:16,669 --> 00:07:20,709
people people say that it's not good for

145
00:07:20,709 --> 00:07:24,309
performance it's garbage collected

146
00:07:24,309 --> 00:07:28,459
anyone else has ideas yes

147
00:07:28,459 --> 00:07:30,919
dynamic typing I'm just kidding I

148
00:07:30,919 --> 00:07:34,069
actually have it written here it has

149
00:07:34,069 --> 00:07:36,769
module system that's not really mature

150
00:07:36,769 --> 00:07:39,139
enough we have not different module

151
00:07:39,139 --> 00:07:41,989
system it's single threaded how do you

152
00:07:41,989 --> 00:07:43,999
build a UI when single threaded but

153
00:07:43,999 --> 00:07:45,289
thankfully we actually have a

154
00:07:45,289 --> 00:07:47,259
synchronous code and co-routines

155
00:07:47,259 --> 00:07:49,879
but anyway a lot of people are biased

156
00:07:49,879 --> 00:07:53,030
about javascript and there are reasons

157
00:07:53,030 --> 00:07:56,330
so Facebook occasionally surveys people

158
00:07:56,330 --> 00:07:58,610
who are using their applications and

159
00:07:58,610 --> 00:08:00,830
there is a direct correlation between

160
00:08:00,830 --> 00:08:03,980
how fast the application loads and how

161
00:08:03,980 --> 00:08:05,690
satisfied are people with the

162
00:08:05,690 --> 00:08:10,370
application and performance work that we

163
00:08:10,370 --> 00:08:12,770
did on marketplace in the last year

164
00:08:12,770 --> 00:08:15,290
shows that people engage more with the

165
00:08:15,290 --> 00:08:17,660
application if it loads faster for every

166
00:08:17,660 --> 00:08:19,550
hundred milliseconds there is a certain

167
00:08:19,550 --> 00:08:21,860
percent of improvement of how people

168
00:08:21,860 --> 00:08:24,560
engage with marketplace and I'm not

169
00:08:24,560 --> 00:08:26,120
talking about just looking at the screen

170
00:08:26,120 --> 00:08:27,890
and I'm going away I'm actually good I'm

171
00:08:27,890 --> 00:08:30,200
I'm actually meaning that it sticks to

172
00:08:30,200 --> 00:08:33,950
people if something loads fast so

173
00:08:33,950 --> 00:08:36,830
Facebook application leadership spend

174
00:08:36,830 --> 00:08:38,719
some time researching how fast the

175
00:08:38,719 --> 00:08:40,880
application should be for people to feel

176
00:08:40,880 --> 00:08:44,060
comfortable with it and in the last 40

177
00:08:44,060 --> 00:08:46,040
years there have been a lot of

178
00:08:46,040 --> 00:08:50,150
researches and the consensus is that if

179
00:08:50,150 --> 00:08:52,760
the application if a computer system

180
00:08:52,760 --> 00:08:55,100
refreshes a screen within one second

181
00:08:55,100 --> 00:08:59,990
then people perceive that it's fast so

182
00:08:59,990 --> 00:09:02,480
that was the goal for all the tabs at

183
00:09:02,480 --> 00:09:05,330
Facebook how do we make them fast as in

184
00:09:05,330 --> 00:09:08,750
load within one second and on a slow

185
00:09:08,750 --> 00:09:11,260
device like this

186
00:09:11,260 --> 00:09:14,780
Samsung j5 prime which is not a nicest

187
00:09:14,780 --> 00:09:19,250
device that around but surprisingly it's

188
00:09:19,250 --> 00:09:21,290
one of the most popular devices in the

189
00:09:21,290 --> 00:09:24,080
world so we started with three and a

190
00:09:24,080 --> 00:09:29,060
half seconds for 75% of people load in

191
00:09:29,060 --> 00:09:31,760
marketplace and when we heard about the

192
00:09:31,760 --> 00:09:33,589
goal we thought well it's a bit humorous

193
00:09:33,589 --> 00:09:38,810
70 % improvement are you serious

194
00:09:38,810 --> 00:09:42,260
a year passed and turns out they

195
00:09:42,260 --> 00:09:44,330
believed in us and they were serious so

196
00:09:44,330 --> 00:09:47,060
we are getting closer so what I'm going

197
00:09:47,060 --> 00:09:50,300
to talk next about is how we achieved

198
00:09:50,300 --> 00:09:53,150
that and I tried to focus on things that

199
00:09:53,150 --> 00:09:55,610
you people working on react and react

200
00:09:55,610 --> 00:09:57,980
native could actually bring it home and

201
00:09:57,980 --> 00:10:01,610
reuse it and even though many people

202
00:10:01,610 --> 00:10:04,100
hold JavaScript as a liability of react

203
00:10:04,100 --> 00:10:07,490
native I think it's on the contrary we

204
00:10:07,490 --> 00:10:10,310
have many years of experience optimizing

205
00:10:10,310 --> 00:10:12,830
websites and if you haven't seen this

206
00:10:12,830 --> 00:10:15,080
talk from ilya grigorik

207
00:10:15,080 --> 00:10:18,140
from six years ago pretty much

208
00:10:18,140 --> 00:10:20,810
everything applies to optimizing react

209
00:10:20,810 --> 00:10:25,520
native so similar to optimizing websites

210
00:10:25,520 --> 00:10:27,890
or any other application we start with

211
00:10:27,890 --> 00:10:30,380
measuring all different sub spans how

212
00:10:30,380 --> 00:10:33,140
things are loading then we find the slow

213
00:10:33,140 --> 00:10:35,540
things and we make a decision it is

214
00:10:35,540 --> 00:10:37,160
something that we really need at the

215
00:10:37,160 --> 00:10:39,380
startup that we call the critical path

216
00:10:39,380 --> 00:10:43,100
or is it something and if it is not

217
00:10:43,100 --> 00:10:45,380
let's just do it later and if it is

218
00:10:45,380 --> 00:10:47,390
let's do it in parallel with something

219
00:10:47,390 --> 00:10:52,640
else so what's another cool thing about

220
00:10:52,640 --> 00:10:55,130
JavaScript and ability to debug your

221
00:10:55,130 --> 00:10:58,280
applications is that JavaScript can run

222
00:10:58,280 --> 00:11:00,830
on many things and there is a feature

223
00:11:00,830 --> 00:11:03,290
called debug JavaScript remotely on

224
00:11:03,290 --> 00:11:05,390
react native and not a lot of people

225
00:11:05,390 --> 00:11:07,550
realize that it's actually sending the

226
00:11:07,550 --> 00:11:10,300
JavaScript application of react native

227
00:11:10,300 --> 00:11:14,690
to the browser it executes their full

228
00:11:14,690 --> 00:11:17,300
application builds the component tree

229
00:11:17,300 --> 00:11:19,490
and then sends signal to the device

230
00:11:19,490 --> 00:11:22,010
telling what needs to be rendered in the

231
00:11:22,010 --> 00:11:24,800
native code so full JavaScript is for

232
00:11:24,800 --> 00:11:27,350
real running in the browser and it means

233
00:11:27,350 --> 00:11:29,240
that we have access to the development

234
00:11:29,240 --> 00:11:31,070
tools that are coming with the browsers

235
00:11:31,070 --> 00:11:32,390
for example in Chrome

236
00:11:32,390 --> 00:11:35,180
I can click performance tab I can click

237
00:11:35,180 --> 00:11:38,720
record and get some samples and then it

238
00:11:38,720 --> 00:11:40,640
has a very good integration with react

239
00:11:40,640 --> 00:11:42,560
and react native is running react.js

240
00:11:42,560 --> 00:11:44,870
inside it so we actually have a very

241
00:11:44,870 --> 00:11:47,480
nice flame chart of all the components

242
00:11:47,480 --> 00:11:49,970
that are loading and we can see which

243
00:11:49,970 --> 00:11:52,130
components are slow or which component

244
00:11:52,130 --> 00:11:54,260
are unnecessary and we can make some

245
00:11:54,260 --> 00:11:56,120
assumptions like let's let's not have

246
00:11:56,120 --> 00:11:57,860
this component or let's let's optimize

247
00:11:57,860 --> 00:12:00,860
that first now you have to take this

248
00:12:00,860 --> 00:12:03,380
with a grain of salt because we're

249
00:12:03,380 --> 00:12:06,350
running this on a desktop browser on

250
00:12:06,350 --> 00:12:11,300
your powerful MacBook probably and it's

251
00:12:11,300 --> 00:12:15,770
a v8 JavaScript engine on a real device

252
00:12:15,770 --> 00:12:17,900
it will be a JavaScript core that runs

253
00:12:17,900 --> 00:12:21,530
on Android and iOS and it's completely

254
00:12:21,530 --> 00:12:23,840
different picture but if you really want

255
00:12:23,840 --> 00:12:25,700
to have the same flame chart there is a

256
00:12:25,700 --> 00:12:29,450
tool called systrace that just collects

257
00:12:29,450 --> 00:12:31,580
the traces and it integrates with react

258
00:12:31,580 --> 00:12:33,620
native and you can see how your

259
00:12:33,620 --> 00:12:38,000
components work on a real device so

260
00:12:38,000 --> 00:12:40,250
measuring performance is actually an art

261
00:12:40,250 --> 00:12:43,190
we could be talking have a separate talk

262
00:12:43,190 --> 00:12:45,590
about how to measure performance on a

263
00:12:45,590 --> 00:12:47,330
group of people on a large group of

264
00:12:47,330 --> 00:12:49,850
people how about the distributions

265
00:12:49,850 --> 00:12:51,680
between different people what kind of

266
00:12:51,680 --> 00:12:55,250
category of devices exists but I think

267
00:12:55,250 --> 00:12:57,620
the first two tools that I showed you

268
00:12:57,620 --> 00:13:01,010
could be a good start how to start

269
00:13:01,010 --> 00:13:03,530
improving your performance so now let's

270
00:13:03,530 --> 00:13:07,370
actually look at what things helped us

271
00:13:07,370 --> 00:13:10,940
to improve react native so this one is

272
00:13:10,940 --> 00:13:13,400
an obvious one I'm pretty sure everyone

273
00:13:13,400 --> 00:13:15,190
who is running a mobile application

274
00:13:15,190 --> 00:13:19,100
should be running their network requests

275
00:13:19,100 --> 00:13:20,810
in parallel when things are loading

276
00:13:20,810 --> 00:13:22,730
because you're doing stuff on the server

277
00:13:22,730 --> 00:13:24,380
and stuff on the client they shouldn't

278
00:13:24,380 --> 00:13:27,500
be interconnected however there is a

279
00:13:27,500 --> 00:13:29,810
caveat I know some people are using

280
00:13:29,810 --> 00:13:32,620
graph girl here who likes graph you'll

281
00:13:32,620 --> 00:13:37,910
yeah so with mobile and graph QL and

282
00:13:37,910 --> 00:13:39,910
JavaScript there is a caveat because

283
00:13:39,910 --> 00:13:43,400
usually people using react native they

284
00:13:43,400 --> 00:13:45,350
use JavaScript implementation of graph

285
00:13:45,350 --> 00:13:47,690
queue for those who don't know what

286
00:13:47,690 --> 00:13:51,290
graph QL is it's a it's a concept that

287
00:13:51,290 --> 00:13:55,310
allows your components to define what

288
00:13:55,310 --> 00:13:57,500
they need and it means that the query

289
00:13:57,500 --> 00:14:01,220
for the data is based on the components

290
00:14:01,220 --> 00:14:03,050
so you need a graphical engine that

291
00:14:03,050 --> 00:14:04,910
would inspect your components build a

292
00:14:04,910 --> 00:14:05,690
query

293
00:14:05,690 --> 00:14:08,330
and then send this query and if it is in

294
00:14:08,330 --> 00:14:11,240
JavaScript you see the blue line we need

295
00:14:11,240 --> 00:14:13,580
to start up JavaScript VM we need to

296
00:14:13,580 --> 00:14:15,560
start up react native we need to start

297
00:14:15,560 --> 00:14:18,130
the bundle we need to find the graph QL

298
00:14:18,130 --> 00:14:20,690
JavaScript implementation and then send

299
00:14:20,690 --> 00:14:24,020
the request what we should be doing is

300
00:14:24,020 --> 00:14:27,740
running it in parallel so if you are

301
00:14:27,740 --> 00:14:30,470
using react native or a very similar

302
00:14:30,470 --> 00:14:32,930
framework and the graph QL you should

303
00:14:32,930 --> 00:14:34,760
the question how can I make the request

304
00:14:34,760 --> 00:14:37,220
in parallel at Facebook we have a very

305
00:14:37,220 --> 00:14:40,010
thin layer implemented in native code

306
00:14:40,010 --> 00:14:42,910
that is capable of sending the request

307
00:14:42,910 --> 00:14:46,250
from Java or from Objective C that's how

308
00:14:46,250 --> 00:14:49,610
we achieve that also I brought you some

309
00:14:49,610 --> 00:14:53,270
good news if you update to latest react

310
00:14:53,270 --> 00:14:56,840
native you will know that it has the

311
00:14:56,840 --> 00:15:00,050
latest JavaScript core engine for those

312
00:15:00,050 --> 00:15:01,910
who don't know JavaScript core is the

313
00:15:01,910 --> 00:15:04,070
JavaScript engine that react native is

314
00:15:04,070 --> 00:15:06,830
using the problem is that it hasn't been

315
00:15:06,830 --> 00:15:10,910
updated for two years and it has been 32

316
00:15:10,910 --> 00:15:12,920
bits and now we have the latest one

317
00:15:12,920 --> 00:15:15,820
that's 64 bits it's not only good for

318
00:15:15,820 --> 00:15:18,470
library compatibility but also it comes

319
00:15:18,470 --> 00:15:20,830
with two years of optimizations and

320
00:15:20,830 --> 00:15:23,720
performance tweaks it's one of the

321
00:15:23,720 --> 00:15:25,370
easiest things that that you can

322
00:15:25,370 --> 00:15:26,960
actually do to improve your reg native

323
00:15:26,960 --> 00:15:31,010
performance oh this one is really cool

324
00:15:31,010 --> 00:15:33,020
but legal department didn't allow me to

325
00:15:33,020 --> 00:15:35,260
mention anything about it

326
00:15:35,260 --> 00:15:38,540
just imagine unicorns exploding with

327
00:15:38,540 --> 00:15:43,880
jelly beans moving on now let's talk

328
00:15:43,880 --> 00:15:45,980
about what we can do to the JavaScript

329
00:15:45,980 --> 00:15:49,190
bundle by default all react native

330
00:15:49,190 --> 00:15:53,390
surfaces in our application are compiled

331
00:15:53,390 --> 00:15:55,820
in one JavaScript file this is a very

332
00:15:55,820 --> 00:15:58,570
common technique anyone using webpack

333
00:15:58,570 --> 00:16:02,240
pretty much everyone so it compiles all

334
00:16:02,240 --> 00:16:04,670
the JavaScript in one javascript file it

335
00:16:04,670 --> 00:16:07,400
gets zipped and sent over the network to

336
00:16:07,400 --> 00:16:10,280
the device with react native it's a

337
00:16:10,280 --> 00:16:11,780
little bit different we want to optimize

338
00:16:11,780 --> 00:16:14,510
it differently the problem is that this

339
00:16:14,510 --> 00:16:16,610
JavaScript on react native is actually

340
00:16:16,610 --> 00:16:18,800
part of the application

341
00:16:18,800 --> 00:16:22,160
and if we want to load any react native

342
00:16:22,160 --> 00:16:25,250
screen we need to read this file and if

343
00:16:25,250 --> 00:16:28,010
it's large like sex may six megabytes or

344
00:16:28,010 --> 00:16:30,740
maybe 20 megabytes it's quite heavy for

345
00:16:30,740 --> 00:16:35,600
IO it will take time to load so ideally

346
00:16:35,600 --> 00:16:37,279
we want to split it into two like

347
00:16:37,279 --> 00:16:40,540
webpack can do you can have a very small

348
00:16:40,540 --> 00:16:43,040
javascript bundle for the your initial

349
00:16:43,040 --> 00:16:45,260
screen and then you can load other

350
00:16:45,260 --> 00:16:48,020
things later for example unclick or

351
00:16:48,020 --> 00:16:51,290
maybe it's a different surface now the

352
00:16:51,290 --> 00:16:52,790
trick is that actually for react native

353
00:16:52,790 --> 00:16:54,680
we don't need to do that there is a

354
00:16:54,680 --> 00:16:56,839
feature called Ram bundles it's a fancy

355
00:16:56,839 --> 00:17:01,700
name means random access memory but what

356
00:17:01,700 --> 00:17:03,410
it actually does it compels every

357
00:17:03,410 --> 00:17:05,990
JavaScript module is its own file and

358
00:17:05,990 --> 00:17:10,309
puts it in the application so we when

359
00:17:10,309 --> 00:17:12,140
you start up your application you only

360
00:17:12,140 --> 00:17:14,660
read the modules that are required in

361
00:17:14,660 --> 00:17:18,620
your initial startup path and it means

362
00:17:18,620 --> 00:17:20,809
that you only pay I owe only for the

363
00:17:20,809 --> 00:17:24,550
modules that you need now talking about

364
00:17:24,550 --> 00:17:29,480
requires and imports let's imagine we

365
00:17:29,480 --> 00:17:33,470
have a very heavy component like I even

366
00:17:33,470 --> 00:17:37,280
called it very expensive and let's say

367
00:17:37,280 --> 00:17:38,870
it does something nasty not just this

368
00:17:38,870 --> 00:17:41,240
console log that indicates that's

369
00:17:41,240 --> 00:17:42,830
something I still like it it mines a

370
00:17:42,830 --> 00:17:46,160
Bitcoin for you now you want to use this

371
00:17:46,160 --> 00:17:47,900
component but you know that it mines a

372
00:17:47,900 --> 00:17:49,970
bit going so it's very slow so what you

373
00:17:49,970 --> 00:17:52,730
do when you use it on line 20 you say

374
00:17:52,730 --> 00:17:54,260
hey don't load this very expensive

375
00:17:54,260 --> 00:17:57,679
component before I make a click there's

376
00:17:57,679 --> 00:18:00,230
a conditional for the state but you

377
00:18:00,230 --> 00:18:01,940
didn't know that import is actually

378
00:18:01,940 --> 00:18:04,490
eagerly loading and it means when we

379
00:18:04,490 --> 00:18:07,700
have on line 3 import very expensive

380
00:18:07,700 --> 00:18:09,380
component you actually get a bit Co in

381
00:18:09,380 --> 00:18:13,730
mind we don't want global code executed

382
00:18:13,730 --> 00:18:16,640
during our startup time so what we can

383
00:18:16,640 --> 00:18:19,370
do is change the import into the old

384
00:18:19,370 --> 00:18:23,300
common GS require that allows you to

385
00:18:23,300 --> 00:18:26,450
import files within the functions so we

386
00:18:26,450 --> 00:18:29,390
define a new variable called lead very

387
00:18:29,390 --> 00:18:32,600
expensive it's undefined by default

388
00:18:32,600 --> 00:18:35,810
and then on the key press we say require

389
00:18:35,810 --> 00:18:38,480
this module and then it becomes

390
00:18:38,480 --> 00:18:41,540
available as a as something to render

391
00:18:41,540 --> 00:18:44,090
now obviously you don't want to do it

392
00:18:44,090 --> 00:18:47,600
for everything in your application so

393
00:18:47,600 --> 00:18:49,580
thankfully react native packager that's

394
00:18:49,580 --> 00:18:52,490
called Metro bundler has this setting

395
00:18:52,490 --> 00:18:54,620
that automatically translates all your

396
00:18:54,620 --> 00:18:57,920
imports into these require statements so

397
00:18:57,920 --> 00:19:01,070
you can write idiomatic JavaScript but

398
00:19:01,070 --> 00:19:02,830
it's smart enough to find that

399
00:19:02,830 --> 00:19:05,270
components are not used during the

400
00:19:05,270 --> 00:19:07,220
startup it converts them into require

401
00:19:07,220 --> 00:19:09,680
statements and you don't pay the extra

402
00:19:09,680 --> 00:19:18,860
thing so we talked about what things you

403
00:19:18,860 --> 00:19:21,680
can do with your configurations and then

404
00:19:21,680 --> 00:19:24,470
other people built parts of your

405
00:19:24,470 --> 00:19:27,170
application build frameworks for you and

406
00:19:27,170 --> 00:19:29,630
you can just tweak some knobs and get it

407
00:19:29,630 --> 00:19:33,140
work faster now let's talk about what

408
00:19:33,140 --> 00:19:38,300
you can do to your production code so

409
00:19:38,300 --> 00:19:40,340
you can find a lot of information on the

410
00:19:40,340 --> 00:19:42,650
web about optimizing react components

411
00:19:42,650 --> 00:19:46,100
the gist of it is we don't want to call

412
00:19:46,100 --> 00:19:48,380
render function multiple times for your

413
00:19:48,380 --> 00:19:51,080
component and react is very generous

414
00:19:51,080 --> 00:19:52,670
about cold in render because it's

415
00:19:52,670 --> 00:19:56,390
supposed to be fast however if it's

416
00:19:56,390 --> 00:20:00,070
critical for you to don't call extra

417
00:20:00,070 --> 00:20:04,130
extra extra times the component then you

418
00:20:04,130 --> 00:20:09,440
you can do some tricks so here is a

419
00:20:09,440 --> 00:20:13,230
common way of how we can avoid it

420
00:20:13,240 --> 00:20:15,740
this component implemented should

421
00:20:15,740 --> 00:20:19,760
component update function the idea is if

422
00:20:19,760 --> 00:20:22,370
it returns true then the render function

423
00:20:22,370 --> 00:20:24,560
will be called and if it returns false

424
00:20:24,560 --> 00:20:26,930
react will trust you that this component

425
00:20:26,930 --> 00:20:30,590
shouldn't be rendered in this case we

426
00:20:30,590 --> 00:20:32,870
look at the property color and we say

427
00:20:32,870 --> 00:20:35,570
only update this component only rerender

428
00:20:35,570 --> 00:20:39,980
this component when color changes this

429
00:20:39,980 --> 00:20:42,980
this concept is very popular so there is

430
00:20:42,980 --> 00:20:45,860
a pure component in react what it does

431
00:20:45,860 --> 00:20:46,460
it

432
00:20:46,460 --> 00:20:48,200
matically implements should component

433
00:20:48,200 --> 00:20:51,260
update for you and only calls rerender

434
00:20:51,260 --> 00:20:57,980
when a prop changes and I'd like to

435
00:20:57,980 --> 00:21:01,370
finish my talk on a point that focusing

436
00:21:01,370 --> 00:21:04,010
on perception can give you more results

437
00:21:04,010 --> 00:21:07,300
than actually grinding the components

438
00:21:07,300 --> 00:21:09,050
here is what I mean

439
00:21:09,050 --> 00:21:13,040
by default react built a component tree

440
00:21:13,040 --> 00:21:15,980
depth first so we have some top

441
00:21:15,980 --> 00:21:18,890
component and it goes down down down to

442
00:21:18,890 --> 00:21:21,200
the most inner component in it

443
00:21:21,200 --> 00:21:24,110
then goes up up up by the stack then

444
00:21:24,110 --> 00:21:26,330
goes again and it kind of builds the

445
00:21:26,330 --> 00:21:30,980
whole tree now react fiber is coming to

446
00:21:30,980 --> 00:21:33,500
react native soon but for now we don't

447
00:21:33,500 --> 00:21:35,630
have this way to prioritize things how

448
00:21:35,630 --> 00:21:39,020
to load them so for example in

449
00:21:39,020 --> 00:21:41,990
marketplace we can decide that hey user

450
00:21:41,990 --> 00:21:46,040
content is more important than a fancy

451
00:21:46,040 --> 00:21:48,800
navigation at the top and we could save

452
00:21:48,800 --> 00:21:50,960
50 milliseconds by just delaying the

453
00:21:50,960 --> 00:21:54,200
navigation the header and show the

454
00:21:54,200 --> 00:21:56,390
components the user content that people

455
00:21:56,390 --> 00:21:59,780
could engage with here is how you can do

456
00:21:59,780 --> 00:22:02,630
it with react native so you can define

457
00:22:02,630 --> 00:22:02,960
that

458
00:22:02,960 --> 00:22:05,090
alright this header is very expensive I

459
00:22:05,090 --> 00:22:07,370
don't want to have to render it from the

460
00:22:07,370 --> 00:22:13,100
first go but how do I know that it got

461
00:22:13,100 --> 00:22:15,500
rendered at all because components are

462
00:22:15,500 --> 00:22:18,020
built in JavaScript and code is rendered

463
00:22:18,020 --> 00:22:21,020
in the native that and there is some

464
00:22:21,020 --> 00:22:22,790
communication between those threads but

465
00:22:22,790 --> 00:22:24,650
they are completely independent you

466
00:22:24,650 --> 00:22:27,320
cannot just say wait 400 milliseconds

467
00:22:27,320 --> 00:22:29,330
and then render the header because a

468
00:22:29,330 --> 00:22:31,070
hundred milliseconds on a slow device

469
00:22:31,070 --> 00:22:33,770
may pass and you start rendering the

470
00:22:33,770 --> 00:22:36,260
header before anything rendered on the

471
00:22:36,260 --> 00:22:39,170
screen so you slow it down but we have a

472
00:22:39,170 --> 00:22:41,480
trick for example I created a little

473
00:22:41,480 --> 00:22:45,380
view component on line 23 and it has an

474
00:22:45,380 --> 00:22:48,020
own layout callback this view is

475
00:22:48,020 --> 00:22:51,560
actually invisible but react native

476
00:22:51,560 --> 00:22:54,800
still renders it when we have this view

477
00:22:54,800 --> 00:22:57,080
rendered we know that hey something this

478
00:22:57,080 --> 00:22:59,030
component already was rendered by the

479
00:22:59,030 --> 00:22:59,970
native code

480
00:22:59,970 --> 00:23:02,460
so we can do things that we wanted to

481
00:23:02,460 --> 00:23:05,610
delay so it has the only out callback

482
00:23:05,610 --> 00:23:08,519
that goes to line seven and that's when

483
00:23:08,519 --> 00:23:10,470
we change the state of the component and

484
00:23:10,470 --> 00:23:15,360
say hey I render other things now as a

485
00:23:15,360 --> 00:23:17,899
matter of fact in marketplace this was

486
00:23:17,899 --> 00:23:20,340
one of the most common things that we

487
00:23:20,340 --> 00:23:23,279
have been doing reg native application

488
00:23:23,279 --> 00:23:26,309
is just one large component that goes

489
00:23:26,309 --> 00:23:28,919
into more smaller components and in

490
00:23:28,919 --> 00:23:30,809
marketplace we were saying alright this

491
00:23:30,809 --> 00:23:33,509
looks like a heavy component let's delay

492
00:23:33,509 --> 00:23:36,450
it the problem is that we have a large

493
00:23:36,450 --> 00:23:39,360
team and a lot of features so these

494
00:23:39,360 --> 00:23:41,789
components started piling up and of

495
00:23:41,789 --> 00:23:43,379
course we started delaying them but

496
00:23:43,379 --> 00:23:45,840
there are a lot of layers a lot of

497
00:23:45,840 --> 00:23:49,049
things that javascript has still to go

498
00:23:49,049 --> 00:23:52,470
through and when we measure when we

499
00:23:52,470 --> 00:23:54,899
measure this this just didn't sit with

500
00:23:54,899 --> 00:23:58,559
me right right we spent 500 milliseconds

501
00:23:58,559 --> 00:24:02,000
on a slow device to render this screen

502
00:24:02,000 --> 00:24:04,350
because we have flat list we have many

503
00:24:04,350 --> 00:24:06,090
things we still delay them but we can

504
00:24:06,090 --> 00:24:08,370
delay everything because the code will

505
00:24:08,370 --> 00:24:13,080
be really hard to read but really I can

506
00:24:13,080 --> 00:24:15,179
implement this thing from scratch and it

507
00:24:15,179 --> 00:24:17,970
would run under 200 milliseconds because

508
00:24:17,970 --> 00:24:21,090
it's just four images I can just do a

509
00:24:21,090 --> 00:24:25,590
view and put images in there so we

510
00:24:25,590 --> 00:24:28,379
thought about it and we implemented this

511
00:24:28,379 --> 00:24:31,289
we decided to do a little trick so we

512
00:24:31,289 --> 00:24:36,090
implement the light one and then destroy

513
00:24:36,090 --> 00:24:39,809
it and render the full view with all the

514
00:24:39,809 --> 00:24:41,940
flag stars and craft and of course this

515
00:24:41,940 --> 00:24:43,529
is not shippable this is a terrible

516
00:24:43,529 --> 00:24:46,230
experience because it blinks but not

517
00:24:46,230 --> 00:24:48,539
everyone knows that react native has a

518
00:24:48,539 --> 00:24:52,200
very good animation library that allows

519
00:24:52,200 --> 00:24:55,350
you to run an animation when a component

520
00:24:55,350 --> 00:24:58,740
is destroyed so for a couple of weeks we

521
00:24:58,740 --> 00:25:01,409
tested a few ideas and this is what we

522
00:25:01,409 --> 00:25:04,350
settle to it we render the light view

523
00:25:04,350 --> 00:25:07,350
with the runs within 200 milliseconds in

524
00:25:07,350 --> 00:25:10,110
the background we build the full view

525
00:25:10,110 --> 00:25:12,059
with all the crafts that takes 500

526
00:25:12,059 --> 00:25:12,650
millisecond

527
00:25:12,650 --> 00:25:15,830
then we destroy the light one and we

528
00:25:15,830 --> 00:25:18,620
animate in with a fade out into the

529
00:25:18,620 --> 00:25:20,150
thing that's already in the background

530
00:25:20,150 --> 00:25:24,800
this way we have quite indistinguishable

531
00:25:24,800 --> 00:25:27,200
change but at the same time the light

532
00:25:27,200 --> 00:25:29,090
view is already clickable and people can

533
00:25:29,090 --> 00:25:32,170
engage with the application much sooner

534
00:25:32,170 --> 00:25:35,390
so lets me summarize what I talked about

535
00:25:35,390 --> 00:25:36,050
today

536
00:25:36,050 --> 00:25:37,880
Market Place is on a great trajectory

537
00:25:37,880 --> 00:25:41,420
and keeps growing react native is one of

538
00:25:41,420 --> 00:25:44,150
the tools to satisfy the product growth

539
00:25:44,150 --> 00:25:47,480
needs and we can use our experience from

540
00:25:47,480 --> 00:25:49,250
the web from optimizing all those

541
00:25:49,250 --> 00:25:51,950
websites for many years and apply it to

542
00:25:51,950 --> 00:25:54,920
react native and in general mobile J's

543
00:25:54,920 --> 00:26:04,080
on mobile that's all

