1
00:00:14,299 --> 00:00:20,760

hi everyone today my talk will be my

2
00:00:20,760 --> 00:00:23,580
talk will be on the scaling lesson is

3
00:00:23,580 --> 00:00:26,849
that took him learn over the past 45

4
00:00:26,849 --> 00:00:28,710
years using the GSN production in

5
00:00:28,710 --> 00:00:32,309
problem and the second part my talk will

6
00:00:32,309 --> 00:00:34,739
be on IP cluster which is a small

7
00:00:34,739 --> 00:00:36,630
library that we have open we have just

8
00:00:36,630 --> 00:00:39,420
open source yesterday to help us with

9
00:00:39,420 --> 00:00:45,180
scaling no services so I'm young bin my

10
00:00:45,180 --> 00:00:47,160
friends just call you ID i'm a

11
00:00:47,160 --> 00:00:49,710
co-founder also pin so we is the best

12
00:00:49,710 --> 00:00:53,960
live chat company in the world it seems

13
00:00:53,960 --> 00:00:57,480
150,000 websites we get 3 billion

14
00:00:57,480 --> 00:00:59,550
impressions on our chat widget month and

15
00:00:59,550 --> 00:01:03,059
a pic we see 500,000 concurrent

16
00:01:03,059 --> 00:01:08,070
connections so in two thousand Canada

17
00:01:08,070 --> 00:01:10,350
doing nov 9 and 10 we decided that we

18
00:01:10,350 --> 00:01:12,600
wanted to rewrite our dashboard after

19
00:01:12,600 --> 00:01:18,900
three years from flex to html5 so at a

20
00:01:18,900 --> 00:01:21,060
point flag set have been really good to

21
00:01:21,060 --> 00:01:23,909
us because this off all the cross

22
00:01:23,909 --> 00:01:27,150
browser issues and they have TCP socket

23
00:01:27,150 --> 00:01:29,159
support so we could have a chance of

24
00:01:29,159 --> 00:01:33,060
survival for four orders codon streaming

25
00:01:33,060 --> 00:01:36,090
data but we were getting running the

26
00:01:36,090 --> 00:01:38,070
morn problems because we couldn't it was

27
00:01:38,070 --> 00:01:40,070
difficult hire people at new flex and

28
00:01:40,070 --> 00:01:43,829
also it was extremely difficult to

29
00:01:43,829 --> 00:01:47,540
customize so designers are not happy so

30
00:01:47,540 --> 00:01:52,049
we decided to do everything in html5

31
00:01:52,049 --> 00:01:55,020
again and apply sauna lessons that we

32
00:01:55,020 --> 00:01:56,969
learned pitting our dashboard so for

33
00:01:56,969 --> 00:01:58,770
instance in the new version of our

34
00:01:58,770 --> 00:02:01,200
dashboard we decided that the entire

35
00:02:01,200 --> 00:02:04,909
application state would be based on

36
00:02:04,909 --> 00:02:09,750
buying the body that so in the Flex

37
00:02:09,750 --> 00:02:11,610
version we had usually have made an API

38
00:02:11,610 --> 00:02:13,060
call in a setup fiction

39
00:02:13,060 --> 00:02:15,849
to put data in and that was very tedious

40
00:02:15,849 --> 00:02:18,340
and it meant that some parts of

41
00:02:18,340 --> 00:02:19,750
application that when you if you know

42
00:02:19,750 --> 00:02:22,870
about it to set this up you had hot

43
00:02:22,870 --> 00:02:25,450
problems like when agents are entered

44
00:02:25,450 --> 00:02:27,810
and so on they do not reflect on you I

45
00:02:27,810 --> 00:02:31,989
so we decided that we should write a set

46
00:02:31,989 --> 00:02:34,300
of not GNE servers that will help to

47
00:02:34,300 --> 00:02:36,030
translate the data from our back-end

48
00:02:36,030 --> 00:02:38,769
into a format next month I just over by

49
00:02:38,769 --> 00:02:42,430
our front end so note was a good fit for

50
00:02:42,430 --> 00:02:46,060
us at a time it was a very familiar

51
00:02:46,060 --> 00:02:50,250
environment and you can think of our our

52
00:02:50,250 --> 00:02:53,080
mediator service as we call them as a

53
00:02:53,080 --> 00:02:57,580
kind of dynamic CDN which which means we

54
00:02:57,580 --> 00:03:00,280
kind of cash or dynamic information in

55
00:03:00,280 --> 00:03:02,140
our servers around the world so

56
00:03:02,140 --> 00:03:04,150
distributing also was wrong we also give

57
00:03:04,150 --> 00:03:05,709
us additional benefits that lower

58
00:03:05,709 --> 00:03:12,040
latency is to our end users and being

59
00:03:12,040 --> 00:03:16,420
able to handle the load for different

60
00:03:16,420 --> 00:03:20,560
parts of the world so no Jess really

61
00:03:20,560 --> 00:03:27,220
rocked it was really fast so it looks

62
00:03:27,220 --> 00:03:28,870
good but the problem is of course number

63
00:03:28,870 --> 00:03:31,000
communities a pressure model which is

64
00:03:31,000 --> 00:03:33,970
the typical no problems which is a

65
00:03:33,970 --> 00:03:36,700
guys single credit and we have memory

66
00:03:36,700 --> 00:03:38,230
leaks in our applications they are to

67
00:03:38,230 --> 00:03:42,130
track down so all problems in computer

68
00:03:42,130 --> 00:03:43,959
science and software play of redirection

69
00:03:43,959 --> 00:03:47,799
right so easy way out interest to buy a

70
00:03:47,799 --> 00:03:50,380
couple of load balancers proxies SSL

71
00:03:50,380 --> 00:03:53,470
terminators etc but because we will

72
00:03:53,470 --> 00:03:54,489
start off with in have that kind of

73
00:03:54,489 --> 00:03:56,380
money so we had to be a bit more

74
00:03:56,380 --> 00:03:58,660
creative with how we try to schedule our

75
00:03:58,660 --> 00:04:03,100
our server so these are some of the

76
00:04:03,100 --> 00:04:06,970
things that we try obviously the beauty

77
00:04:06,970 --> 00:04:10,180
in cluster module which works well from

78
00:04:10,180 --> 00:04:12,069
hitch to be repairs but because we had

79
00:04:12,069 --> 00:04:15,190
our service was live chat we had

80
00:04:15,190 --> 00:04:17,109
persistent connection with our users so

81
00:04:17,109 --> 00:04:19,690
that you can stream the data and this

82
00:04:19,690 --> 00:04:21,640
really breaks long polling connections

83
00:04:21,640 --> 00:04:24,940
because each additional each each time

84
00:04:24,940 --> 00:04:26,710
the long four finishers

85
00:04:26,710 --> 00:04:28,240
the browser will connect to a different

86
00:04:28,240 --> 00:04:29,199
server and then you lose your whole

87
00:04:29,199 --> 00:04:31,960
application state so there was out at a

88
00:04:31,960 --> 00:04:33,759
time there was a web sockets for ngx

89
00:04:33,759 --> 00:04:35,500
body was at a party module and was not

90
00:04:35,500 --> 00:04:40,259
very live we looked at his a proxy and

91
00:04:40,259 --> 00:04:47,800
start so history proxy is is a kind of

92
00:04:47,800 --> 00:04:50,440
dumb proxy so the biggest problem

93
00:04:50,440 --> 00:04:51,789
hitters proxy was that there was no we

94
00:04:51,789 --> 00:04:54,250
could get our client IP address in our

95
00:04:54,250 --> 00:04:57,759
application because we're using SSL and

96
00:04:57,759 --> 00:04:59,680
he proceeded as i understand ssl alright

97
00:04:59,680 --> 00:05:02,289
so we looked at stat which is the ssl

98
00:05:02,289 --> 00:05:05,949
terminator so what I means is your

99
00:05:05,949 --> 00:05:08,229
browser makes an ssl connection to start

100
00:05:08,229 --> 00:05:11,759
start on reps that ssl encryption and

101
00:05:11,759 --> 00:05:14,169
makes it normal TZ connection to your

102
00:05:14,169 --> 00:05:17,710
server so you don't have to end ssl and

103
00:05:17,710 --> 00:05:18,970
all the decoding or the decryption

104
00:05:18,970 --> 00:05:23,560
standbys by the most start so the

105
00:05:23,560 --> 00:05:25,270
application as much if you do its own

106
00:05:25,270 --> 00:05:27,880
thing and you don't have to handle it

107
00:05:27,880 --> 00:05:30,400
you can handle anything from you as well

108
00:05:30,400 --> 00:05:35,590
so when i start for a while but and in

109
00:05:35,590 --> 00:05:37,270
the next slide I will talk about how we

110
00:05:37,270 --> 00:05:38,740
start the problem trying to get the

111
00:05:38,740 --> 00:05:42,370
client IP address from stuff we also

112
00:05:42,370 --> 00:05:45,729
look at forwarding soccer file

113
00:05:45,729 --> 00:05:49,900
descriptors in Linux you can send the

114
00:05:49,900 --> 00:05:53,380
file descriptor between processors so

115
00:05:53,380 --> 00:05:55,900
for tcp doesn't work because you could

116
00:05:55,900 --> 00:05:57,849
just send the farthest planet process

117
00:05:57,849 --> 00:06:00,880
and and we can write off the 40 script

118
00:06:00,880 --> 00:06:04,210
but we were using SSL so that kind of

119
00:06:04,210 --> 00:06:05,440
poke the whole thing because esta has

120
00:06:05,440 --> 00:06:07,479
this really opaque state that you can't

121
00:06:07,479 --> 00:06:14,949
stand over socket so let me show you how

122
00:06:14,949 --> 00:06:18,070
we managed to capture our client padres

123
00:06:18,070 --> 00:06:22,050
so we were very happy that we were using

124
00:06:22,050 --> 00:06:24,610
not because we could do things like this

125
00:06:24,610 --> 00:06:27,460
which is basically heck the note HTTP

126
00:06:27,460 --> 00:06:32,169
server so that what we did was start at

127
00:06:32,169 --> 00:06:35,080
this option to after unwraps the

128
00:06:35,080 --> 00:06:37,690
encryption for the connection since the

129
00:06:37,690 --> 00:06:39,580
IP address on the client we fill in the

130
00:06:39,580 --> 00:06:40,000
first four

131
00:06:40,000 --> 00:06:42,280
bites of the tcp stream so what I'm

132
00:06:42,280 --> 00:06:43,870
trying boo here is we are trying to

133
00:06:43,870 --> 00:06:46,300
intercept that initial connection even

134
00:06:46,300 --> 00:06:49,350
before the HTTP server gets it read off

135
00:06:49,350 --> 00:06:53,710
the IP address and then pass it back to

136
00:06:53,710 --> 00:06:55,930
the notes to note so you should be

137
00:06:55,930 --> 00:06:58,600
server to do it's a healer passing it on

138
00:06:58,600 --> 00:07:01,300
and others modulus ave he has to do so

139
00:07:01,300 --> 00:07:04,180
as you can see what we did let me go

140
00:07:04,180 --> 00:07:07,530
people we get a list of existing

141
00:07:07,530 --> 00:07:11,260
connections on a tcp server and one of

142
00:07:11,260 --> 00:07:14,230
these connection handlers well this

143
00:07:14,230 --> 00:07:16,360
connection event handlers would be the

144
00:07:16,360 --> 00:07:20,620
HTTP header process so we intersect the

145
00:07:20,620 --> 00:07:24,220
connection and on one receiving any data

146
00:07:24,220 --> 00:07:29,860
we attempt to oops we attempt to read

147
00:07:29,860 --> 00:07:34,510
off the first few bites that mix up the

148
00:07:34,510 --> 00:07:37,620
client IP address and sets it on the

149
00:07:37,620 --> 00:07:40,840
socket connection and then pass through

150
00:07:40,840 --> 00:07:43,990
the remaining data to the original

151
00:07:43,990 --> 00:07:47,850
handler for this soccer so this works

152
00:07:47,850 --> 00:07:49,840
it's a bit complicated actually because

153
00:07:49,840 --> 00:07:53,760
I kind of thicken up or error handling

154
00:07:53,760 --> 00:07:59,470
right and but it worked for for us for

155
00:07:59,470 --> 00:08:02,350
for quite a while and so we thought

156
00:08:02,350 --> 00:08:07,780
through this for maybe half a year sound

157
00:08:07,780 --> 00:08:12,880
the other problems in general when you

158
00:08:12,880 --> 00:08:14,380
when you talk about this kind of

159
00:08:14,380 --> 00:08:17,050
multi-layer infrastructure where you

160
00:08:17,050 --> 00:08:19,870
have proxies SSL two meters is that you

161
00:08:19,870 --> 00:08:21,850
get buffer bill which is when all the

162
00:08:21,850 --> 00:08:23,979
different components in the stack buffer

163
00:08:23,979 --> 00:08:26,740
a little bit of data and so from an

164
00:08:26,740 --> 00:08:28,300
application you can tell how much data

165
00:08:28,300 --> 00:08:29,979
is being buffered by dresses so how much

166
00:08:29,979 --> 00:08:31,150
room is still sorting our network in

167
00:08:31,150 --> 00:08:33,669
whether your client has received that

168
00:08:33,669 --> 00:08:39,310
they are not so after about six months

169
00:08:39,310 --> 00:08:43,330
or rather for six months while we're

170
00:08:43,330 --> 00:08:46,270
using stuff we occasionally got problems

171
00:08:46,270 --> 00:08:48,760
we start just dies and recent god is

172
00:08:48,760 --> 00:08:51,560
inexplicable errors that

173
00:08:51,560 --> 00:08:54,850
that what's wrong need not because of

174
00:08:54,850 --> 00:08:58,960
something I start was doing and the ssl

175
00:08:58,960 --> 00:09:01,730
the tcp handler in node could not handle

176
00:09:01,730 --> 00:09:05,750
this so we continue to look for a better

177
00:09:05,750 --> 00:09:12,890
solution soft our scaling problem so let

178
00:09:12,890 --> 00:09:14,480
me stay that we thank you give you guys

179
00:09:14,480 --> 00:09:20,510
a primer on mac bus so you I guess you

180
00:09:20,510 --> 00:09:23,570
have study familiar with IP addresses

181
00:09:23,570 --> 00:09:25,220
and a net mass that looks like this so

182
00:09:25,220 --> 00:09:29,450
II my night 1685 to 128 is the IP

183
00:09:29,450 --> 00:09:32,480
address and / 26 refers to the network

184
00:09:32,480 --> 00:09:35,000
at this IP address belongs to so what is

185
00:09:35,000 --> 00:09:37,820
essentially means is that the first if

186
00:09:37,820 --> 00:09:42,440
you click the first 26 bits of this IP

187
00:09:42,440 --> 00:09:44,750
address that is the network of this IP

188
00:09:44,750 --> 00:09:48,110
address so this is a way for now engines

189
00:09:48,110 --> 00:09:51,650
to partition that works into site into

190
00:09:51,650 --> 00:09:54,220
cyber challenge manageable chunks and

191
00:09:54,220 --> 00:10:00,050
true for initiative process like you

192
00:10:00,050 --> 00:10:03,080
could route data you can roll back at

193
00:10:03,080 --> 00:10:05,089
space on which network you are coming

194
00:10:05,089 --> 00:10:11,170
from which now we are going to so we

195
00:10:11,170 --> 00:10:14,080
figured out that we could actually abuse

196
00:10:14,080 --> 00:10:16,880
net masks by matching on the least

197
00:10:16,880 --> 00:10:19,790
significant bits so when we measure the

198
00:10:19,790 --> 00:10:23,720
most images are in a typical way that

199
00:10:23,720 --> 00:10:26,210
people use that mass if we did load

200
00:10:26,210 --> 00:10:28,460
balancing based on that what the problem

201
00:10:28,460 --> 00:10:30,260
we will find is that you have some

202
00:10:30,260 --> 00:10:31,339
networks where you have a lot of users

203
00:10:31,339 --> 00:10:33,980
and sometimes very very very easy so if

204
00:10:33,980 --> 00:10:35,480
you try and do load balancing that just

205
00:10:35,480 --> 00:10:38,060
because you just end up with this

206
00:10:38,060 --> 00:10:39,620
service they have to sell a lot of

207
00:10:39,620 --> 00:10:41,510
traffic because I don't know very good

208
00:10:41,510 --> 00:10:44,360
like a whore China is in one small neck

209
00:10:44,360 --> 00:10:47,300
block so if you got actually we could

210
00:10:47,300 --> 00:10:49,250
match on at least if you can beat and in

211
00:10:49,250 --> 00:10:51,110
this way we get some sort of random

212
00:10:51,110 --> 00:10:53,600
nurse when we're trying to route our

213
00:10:53,600 --> 00:10:55,940
users and at the same time because it's

214
00:10:55,940 --> 00:10:58,160
based on IP address so for long pulling

215
00:10:58,160 --> 00:11:00,860
such different connections we still go

216
00:11:00,860 --> 00:11:04,520
back to the same so so in fact the

217
00:11:04,520 --> 00:11:05,100
leaner

218
00:11:05,100 --> 00:11:08,110
now if you'll Ahmad you that's allow you

219
00:11:08,110 --> 00:11:10,930
to match arbitrary numbers addresses

220
00:11:10,930 --> 00:11:15,490
addresses so if you see there's a

221
00:11:15,490 --> 00:11:17,980
bloodbath 2000 doctrine that is the

222
00:11:17,980 --> 00:11:19,240
networks that we're using so what we're

223
00:11:19,240 --> 00:11:24,910
saying is match the last two bits of the

224
00:11:24,910 --> 00:11:28,480
IP address and that is the net block I

225
00:11:28,480 --> 00:11:31,870
mean so called the slot then the client

226
00:11:31,870 --> 00:11:34,240
belongs to so what we do here is for

227
00:11:34,240 --> 00:11:37,270
each of these blocks we brought it we

228
00:11:37,270 --> 00:11:39,880
Rida right into one of our worker

229
00:11:39,880 --> 00:11:43,839
processes and this has to be a it has to

230
00:11:43,839 --> 00:11:46,410
be a power of two processors because of

231
00:11:46,410 --> 00:11:52,600
how the mass works so we deploy this

232
00:11:52,600 --> 00:11:55,150
solution and it worked really well for

233
00:11:55,150 --> 00:11:58,270
us we could scale the number of worker

234
00:11:58,270 --> 00:12:00,820
processors by adjusting the number of

235
00:12:00,820 --> 00:12:03,310
bits what you mentioned in this case we

236
00:12:03,310 --> 00:12:05,170
are matching to bit so they are four

237
00:12:05,170 --> 00:12:07,089
workers but if we had like a 30-foot

238
00:12:07,089 --> 00:12:09,660
core machine and you match five bits and

239
00:12:09,660 --> 00:12:14,260
half that number of other processors so

240
00:12:14,260 --> 00:12:17,860
this worked very well oh no we still get

241
00:12:17,860 --> 00:12:19,330
we see at some remaining issues which

242
00:12:19,330 --> 00:12:22,480
which is our application our loan

243
00:12:22,480 --> 00:12:25,690
application has some memory leaks and

244
00:12:25,690 --> 00:12:28,360
over time it builds up n as you know

245
00:12:28,360 --> 00:12:31,150
we're not kids about 1 to 2 gigabytes of

246
00:12:31,150 --> 00:12:32,709
memory starts to really slow down the

247
00:12:32,709 --> 00:12:34,330
process to do garbage collection on time

248
00:12:34,330 --> 00:12:37,350
so what we did was once no hits around

249
00:12:37,350 --> 00:12:40,180
almost manual process one key byte of

250
00:12:40,180 --> 00:12:43,120
memory usage we will we will restart yes

251
00:12:43,120 --> 00:12:46,000
that particular worker it wasn't so bad

252
00:12:46,000 --> 00:12:47,560
in a sense that because unique

253
00:12:47,560 --> 00:12:49,390
disconnects the user that users they

254
00:12:49,390 --> 00:12:51,640
were connected with which is maybe one

255
00:12:51,640 --> 00:12:53,200
over eight of our reasons connected to

256
00:12:53,200 --> 00:12:55,060
the particular server but you are so it

257
00:12:55,060 --> 00:13:00,590
was a good experience for our users so

258
00:13:00,600 --> 00:13:05,470
and ok and and we also had some human

259
00:13:05,470 --> 00:13:07,089
errors when we were attending the

260
00:13:07,089 --> 00:13:09,700
parties rules because we generated em

261
00:13:09,700 --> 00:13:12,310
manually and when we wanted to change

262
00:13:12,310 --> 00:13:14,230
the number of slots the number of

263
00:13:14,230 --> 00:13:18,010
workers for server it and we

264
00:13:18,010 --> 00:13:22,230
updated iptables for free it would prick

265
00:13:22,230 --> 00:13:27,070
so we decided to write a new likely to

266
00:13:27,070 --> 00:13:30,120
help us handily handle all this iptables

267
00:13:30,120 --> 00:13:33,370
manipulation and at the same time help

268
00:13:33,370 --> 00:13:36,460
us manage worker processors we're

269
00:13:36,460 --> 00:13:37,600
starting them when you are using flash

270
00:13:37,600 --> 00:13:40,090
memory restarting and when they are when

271
00:13:40,090 --> 00:13:42,100
they are running out off when they are

272
00:13:42,100 --> 00:13:44,470
taking too long to respond and and so on

273
00:13:44,470 --> 00:13:48,670
so these are some of the features that

274
00:13:48,670 --> 00:13:51,100
our library has given in right now so

275
00:13:51,100 --> 00:13:54,190
it's Monica you use it like the transfer

276
00:13:54,190 --> 00:13:57,910
value in nodejs he has place to work

277
00:13:57,910 --> 00:13:59,050
every time and so what it means is that

278
00:13:59,050 --> 00:14:03,040
when we want Q of a worker we don't we

279
00:14:03,040 --> 00:14:04,360
don't ask you it but what we do is that

280
00:14:04,360 --> 00:14:06,820
we changed i became a rule respona canal

281
00:14:06,820 --> 00:14:08,380
water resolve new work at first and

282
00:14:08,380 --> 00:14:09,850
change hi Petey Lorusso right points in

283
00:14:09,850 --> 00:14:12,250
the new worker and let over continue to

284
00:14:12,250 --> 00:14:16,300
finish servicing the requested that they

285
00:14:16,300 --> 00:14:19,000
are still outstanding so they're also

286
00:14:19,000 --> 00:14:21,010
allows us to do hot curvy road so when

287
00:14:21,010 --> 00:14:24,220
we have a new deploy we can just make a

288
00:14:24,220 --> 00:14:26,410
whole bunch of new workers and point

289
00:14:26,410 --> 00:14:29,020
iptables to use the use the new

290
00:14:29,020 --> 00:14:31,780
processors so Batman who refers to the

291
00:14:31,780 --> 00:14:35,920
fact that our new processors thus the

292
00:14:35,920 --> 00:14:38,530
soccer object ADC is the actual soccer

293
00:14:38,530 --> 00:14:41,890
that gets connected of client so things

294
00:14:41,890 --> 00:14:43,510
like doing events they work reliably

295
00:14:43,510 --> 00:14:45,760
because you don't go to another way of

296
00:14:45,760 --> 00:14:48,430
proxy and obviously a client IP address

297
00:14:48,430 --> 00:14:51,850
is there early on the socket three menus

298
00:14:51,850 --> 00:14:54,780
of this MPI Monica too busy which posed

299
00:14:54,780 --> 00:14:59,230
the note event loop and determines and

300
00:14:59,230 --> 00:15:00,670
try to determine if it's taking too long

301
00:15:00,670 --> 00:15:03,610
to go to the event which which implies

302
00:15:03,610 --> 00:15:06,760
that the no processor is a new processes

303
00:15:06,760 --> 00:15:08,770
under too much loot and is spending all

304
00:15:08,770 --> 00:15:13,000
this time Henry depends so then how was

305
00:15:13,000 --> 00:15:17,400
that helps us to detect work instead

306
00:15:17,400 --> 00:15:21,040
have run into some kind of problem and

307
00:15:21,040 --> 00:15:24,370
they are just general servicing requests

308
00:15:24,370 --> 00:15:27,920
fast enough

309
00:15:27,930 --> 00:15:31,770
so as I said so that sort of master

310
00:15:31,770 --> 00:15:33,420
managers or the other different workers

311
00:15:33,420 --> 00:15:36,899
and we use unix dominicans to

312
00:15:36,899 --> 00:15:38,610
communicate between a master and the

313
00:15:38,610 --> 00:15:41,100
workers the workers select the listening

314
00:15:41,100 --> 00:15:43,080
pots that be a decent amount owed is

315
00:15:43,080 --> 00:15:45,330
what we do is that we get the operating

316
00:15:45,330 --> 00:15:46,560
system to do it so you pick a random

317
00:15:46,560 --> 00:15:49,320
port and workers report the partner

318
00:15:49,320 --> 00:15:51,089
listening to the master and master will

319
00:15:51,089 --> 00:15:53,070
set up the IP table should make sure

320
00:15:53,070 --> 00:15:56,100
that you points to the right places the

321
00:15:56,100 --> 00:15:58,080
Muslims are looking above means of

322
00:15:58,080 --> 00:16:00,690
managing other masters so we in just in

323
00:16:00,690 --> 00:16:01,830
case there's a button while saying you

324
00:16:01,830 --> 00:16:04,589
to Cuba or to run in another master I

325
00:16:04,589 --> 00:16:06,660
because that is designed so that if you

326
00:16:06,660 --> 00:16:08,640
run another copy of a muscle it will

327
00:16:08,640 --> 00:16:11,220
queue of the 01 and manage and tip over

328
00:16:11,220 --> 00:16:16,709
a single cuz i manage them properly so

329
00:16:16,709 --> 00:16:20,850
we retire workers when so in a capacitor

330
00:16:20,850 --> 00:16:25,020
we set a memory limit per worker and so

331
00:16:25,020 --> 00:16:27,920
when workers approach the limit we will

332
00:16:27,920 --> 00:16:30,630
Chris we will let them kind of shut down

333
00:16:30,630 --> 00:16:35,279
gracefully by by redirecting all the new

334
00:16:35,279 --> 00:16:38,610
requests to new servers basis of class

335
00:16:38,610 --> 00:16:40,709
also a cluster men really mean for the

336
00:16:40,709 --> 00:16:44,550
entire cluster so when you approach like

337
00:16:44,550 --> 00:16:47,220
the limit of the more memories of the

338
00:16:47,220 --> 00:16:49,620
entire struggle has we will find the

339
00:16:49,620 --> 00:16:57,150
odors retire worker and cute so we have

340
00:16:57,150 --> 00:17:00,959
open source IP castles so this is all

341
00:17:00,959 --> 00:17:04,920
this our project page and now I will run

342
00:17:04,920 --> 00:17:09,689
us through an example of IP cluster

343
00:17:09,689 --> 00:17:20,670
usage so this is a typical route I'm

344
00:17:20,670 --> 00:17:27,390
WebSocket based application we start a

345
00:17:27,390 --> 00:17:31,620
web socket and on a connection we send a

346
00:17:31,620 --> 00:17:38,620
current every 100 milliseconds so

347
00:17:38,620 --> 00:18:07,700
slick

348
00:18:07,710 --> 00:18:24,310
oops

349
00:18:24,320 --> 00:18:38,820
give it over the demo happens every time

350
00:18:38,830 --> 00:18:45,070
get out of the skip the demo and run

351
00:18:45,070 --> 00:18:48,820
true let me just run to how we how you

352
00:18:48,820 --> 00:18:53,769
want to use IP cluster and as in how how

353
00:18:53,769 --> 00:18:57,220
can we use IP castor and not a Fraggle

354
00:18:57,220 --> 00:18:59,529
as this thing weighs so much so if you

355
00:18:59,529 --> 00:19:01,960
notice this on right side is the same

356
00:19:01,960 --> 00:19:07,929
application but below we at IP cluster

357
00:19:07,929 --> 00:19:10,510
support so it's assume it's as simple as

358
00:19:10,510 --> 00:19:13,600
um it's actually familiar with if after

359
00:19:13,600 --> 00:19:16,000
me with the cluster module in node is

360
00:19:16,000 --> 00:19:19,000
actually similar you require the IP

361
00:19:19,000 --> 00:19:24,730
custom module set up the seller some

362
00:19:24,730 --> 00:19:26,380
settings photo so this is the socket

363
00:19:26,380 --> 00:19:29,010
that the master and worker processes

364
00:19:29,010 --> 00:19:31,510
communicate over it will set IP address

365
00:19:31,510 --> 00:19:33,789
because otherwise we wouldn't know how

366
00:19:33,789 --> 00:19:35,769
to setup you table fools so you can a

367
00:19:35,769 --> 00:19:39,610
master you just set up master and sorry

368
00:19:39,610 --> 00:19:43,809
let me get a worker you just start yours

369
00:19:43,809 --> 00:19:46,870
your application as phenomenal except

370
00:19:46,870 --> 00:19:50,169
this time you don't specify a listening

371
00:19:50,169 --> 00:19:53,649
port we let we let the operating system

372
00:19:53,649 --> 00:19:58,149
pick apart and then we will put the pot

373
00:19:58,149 --> 00:20:01,299
to the master and that's it the master

374
00:20:01,299 --> 00:20:24,200
vendor or a PTO rules so let me

375
00:20:24,210 --> 00:20:56,060
what

376
00:20:56,070 --> 00:21:06,540
okay so let me show you all IP tables

377
00:21:06,550 --> 00:21:11,210
so I just listed all the rules in the ne

378
00:21:11,210 --> 00:21:15,470
T table for for this machine and you

379
00:21:15,470 --> 00:21:25,270
know this is nothing here so our now run

380
00:21:25,270 --> 00:21:32,840
the select application support and we

381
00:21:32,840 --> 00:21:38,570
see that we have three rules no 10 in

382
00:21:38,570 --> 00:21:40,970
fall so what happened was that s each

383
00:21:40,970 --> 00:21:44,000
worker was fun we reported the pot day

384
00:21:44,000 --> 00:21:45,950
listening to to the to the master and

385
00:21:45,950 --> 00:21:48,440
master set up the IP t was for that for

386
00:21:48,440 --> 00:21:54,290
that particular slot so it always waits

387
00:21:54,290 --> 00:21:56,870
until that worker report support before

388
00:21:56,870 --> 00:21:58,970
creating iptables room so what this

389
00:21:58,970 --> 00:22:01,130
means is that we will never create a PK

390
00:22:01,130 --> 00:22:03,050
value before the worker is ready to

391
00:22:03,050 --> 00:22:09,350
accept connections so let's see whether

392
00:22:09,350 --> 00:22:18,860
it works this time I'm sorry I think

393
00:22:18,860 --> 00:22:24,700
I've song ever so short a time but I

394
00:22:24,700 --> 00:22:36,170
guess from the yeah I guess from I guess

395
00:22:36,170 --> 00:22:37,400
one crow is pretty straightforward how

396
00:22:37,400 --> 00:22:44,720
it works yeah so let me go back to the

397
00:22:44,720 --> 00:22:48,440
future so to help us with our memory

398
00:22:48,440 --> 00:22:49,910
leak issues in the future we are

399
00:22:49,910 --> 00:22:52,340
planning to automate automated hippie

400
00:22:52,340 --> 00:22:55,400
things about so the good thing about

401
00:22:55,400 --> 00:22:58,250
article says that because we can we know

402
00:22:58,250 --> 00:23:00,020
when a worker starts we can take a

403
00:23:00,020 --> 00:23:02,930
snapshot of the hip and when the worker

404
00:23:02,930 --> 00:23:05,180
is retired we can wait until every

405
00:23:05,180 --> 00:23:07,490
single ass connection has has been

406
00:23:07,490 --> 00:23:09,440
disconnected before we take another hip

407
00:23:09,440 --> 00:23:11,540
and if the different so in this way we

408
00:23:11,540 --> 00:23:16,700
can find memory leaks there's also it's

409
00:23:16,700 --> 00:23:19,130
been hard to see the health of the

410
00:23:19,130 --> 00:23:19,700
cluster

411
00:23:19,700 --> 00:23:22,610
is fine time so some kind of dash

412
00:23:22,610 --> 00:23:24,080
thought would be nice to be able to see

413
00:23:24,080 --> 00:23:28,960
what the cluster is currently doing so

414
00:23:28,960 --> 00:23:32,539
um is a shout out to my team and team

415
00:23:32,539 --> 00:23:35,539
who is one of our developers and has

416
00:23:35,539 --> 00:23:40,010
worked a lot on up your cluster yeah

417
00:23:40,010 --> 00:23:54,139
that's all so I could we have let's say

418
00:23:54,139 --> 00:24:05,580
one question maybe for young bin yes

419
00:24:05,590 --> 00:24:08,659
hello I'm just wondering it you have

420
00:24:08,659 --> 00:24:10,820
have you ever tried to use unless site

421
00:24:10,820 --> 00:24:13,880
youíre DS RSS install so that you can

422
00:24:13,880 --> 00:24:15,950
sync synchronize a session between

423
00:24:15,950 --> 00:24:17,899
multiple clients so I mean you don't

424
00:24:17,899 --> 00:24:21,980
really needs a sticky station ask foster

425
00:24:21,980 --> 00:24:24,919
I mean for all the note and also have

426
00:24:24,919 --> 00:24:27,649
you tried to use a something new

427
00:24:27,649 --> 00:24:30,080
protocol which is a proxy for taco which

428
00:24:30,080 --> 00:24:33,340
is allow you to load balance between

429
00:24:33,340 --> 00:24:38,840
multiply and even GPU TCP so let me let

430
00:24:38,840 --> 00:24:39,860
me see all your questions right the

431
00:24:39,860 --> 00:24:43,299
first version so why not why not use a

432
00:24:43,299 --> 00:24:46,970
very special session store yeah and we

433
00:24:46,970 --> 00:24:49,130
are why you need so you can match the

434
00:24:49,130 --> 00:24:51,289
income connection with the provides

435
00:24:51,289 --> 00:24:53,539
instant connection yeah so this meet you

436
00:24:53,539 --> 00:24:55,370
don't even eat the sticky six and as the

437
00:24:55,370 --> 00:24:57,590
first place so sort of thing is we

438
00:24:57,590 --> 00:24:59,980
actually a really kind of hyper session

439
00:24:59,980 --> 00:25:01,880
management system which is our back-end

440
00:25:01,880 --> 00:25:06,710
services so essentially for the all

441
00:25:06,710 --> 00:25:08,480
mediators we could reconnect with

442
00:25:08,480 --> 00:25:10,840
another mediator end we can still

443
00:25:10,840 --> 00:25:13,070
répondre back to the same session but a

444
00:25:13,070 --> 00:25:16,460
problem is that there is a lot of state

445
00:25:16,460 --> 00:25:19,340
in our front-end service because we are

446
00:25:19,340 --> 00:25:22,399
we are normalizing the data structure

447
00:25:22,399 --> 00:25:26,149
into a into a global streaming standard

448
00:25:26,149 --> 00:25:28,429
for our financial service so let's not

449
00:25:28,429 --> 00:25:31,309
stay involved and while we can you can

450
00:25:31,309 --> 00:25:32,800
reconnect or difference over it takes

451
00:25:32,800 --> 00:25:35,170
a couple seconds to get all that state

452
00:25:35,170 --> 00:25:39,160
or set up again so we this I mean that's

453
00:25:39,160 --> 00:25:42,940
why we have we try not to have to prove

