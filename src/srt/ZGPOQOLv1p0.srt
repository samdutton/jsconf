1
00:00:01,700 --> 00:00:05,690

hi can everyone hear me yeah okay cool

2
00:00:05,690 --> 00:00:08,370
today I'm gonna be talking about sharing

3
00:00:08,370 --> 00:00:10,920
is caring and in particular how you can

4
00:00:10,920 --> 00:00:13,049
use our browsers to share with other

5
00:00:13,049 --> 00:00:15,450
browsers using a technology called web

6
00:00:15,450 --> 00:00:18,359
RTC RT C stands for real-time

7
00:00:18,359 --> 00:00:20,279
communication and it could be real-time

8
00:00:20,279 --> 00:00:23,130
communication of audio video and other

9
00:00:23,130 --> 00:00:27,420
kinds of files a few things I want to

10
00:00:27,420 --> 00:00:30,029
cover today are a bit of the contrast of

11
00:00:30,029 --> 00:00:32,250
what we do in our day to day work for me

12
00:00:32,250 --> 00:00:33,690
most of the time I'm writing code for

13
00:00:33,690 --> 00:00:35,489
the client or I'm writing code for a

14
00:00:35,489 --> 00:00:37,320
server so I'm used to writing code that

15
00:00:37,320 --> 00:00:39,390
involves sending out requests and

16
00:00:39,390 --> 00:00:42,079
getting back responses from a server

17
00:00:42,079 --> 00:00:44,190
some other people might be used to

18
00:00:44,190 --> 00:00:46,289
writing code like WebSocket code which

19
00:00:46,289 --> 00:00:48,450
is bi-directional communication between

20
00:00:48,450 --> 00:00:51,059
a server and a browser where a server

21
00:00:51,059 --> 00:00:52,920
can actually push information over to a

22
00:00:52,920 --> 00:00:56,879
browser so this is makes up most of the

23
00:00:56,879 --> 00:00:59,370
websites we use so why do we really need

24
00:00:59,370 --> 00:01:02,309
something like WebRTC well the thing is

25
00:01:02,309 --> 00:01:06,570
once upon a time a long time ago it used

26
00:01:06,570 --> 00:01:08,400
to take a really long time to download

27
00:01:08,400 --> 00:01:11,729
files it would take a really really long

28
00:01:11,729 --> 00:01:15,259
time to download a song and then so we

29
00:01:15,259 --> 00:01:17,759
people came up with peer-to-peer

30
00:01:17,759 --> 00:01:19,950
technologies that allowed people to

31
00:01:19,950 --> 00:01:22,470
share files quickly and easily so if I

32
00:01:22,470 --> 00:01:24,210
had part of a song and someone had a

33
00:01:24,210 --> 00:01:26,850
part of the same song we can sort of

34
00:01:26,850 --> 00:01:29,340
share those parts and then that would

35
00:01:29,340 --> 00:01:32,790
just result in a faster download we sort

36
00:01:32,790 --> 00:01:34,070
of forgot about that

37
00:01:34,070 --> 00:01:36,990
when stuff like YouTube came up and our

38
00:01:36,990 --> 00:01:38,520
internet connections got faster and

39
00:01:38,520 --> 00:01:40,860
servers became way more efficient but

40
00:01:40,860 --> 00:01:44,040
right now the thing is out of our

41
00:01:44,040 --> 00:01:46,439
Internet traffic 70 percent of that is

42
00:01:46,439 --> 00:01:49,380
now streaming video so it's gonna become

43
00:01:49,380 --> 00:01:50,790
an issue when we start having millions

44
00:01:50,790 --> 00:01:52,470
and millions of people watching the same

45
00:01:52,470 --> 00:01:55,110
episode of Game of Thrones or trying to

46
00:01:55,110 --> 00:01:57,899
download the same file so there are new

47
00:01:57,899 --> 00:01:59,640
companies coming out such as pear 5

48
00:01:59,640 --> 00:02:02,070
which are using WebRTC technologies in

49
00:02:02,070 --> 00:02:04,140
order to help people share and download

50
00:02:04,140 --> 00:02:06,619
those files faster it helps people

51
00:02:06,619 --> 00:02:09,720
stream video at better quality if they

52
00:02:09,720 --> 00:02:11,400
happen to be in Australia but the server

53
00:02:11,400 --> 00:02:13,770
for that video happens to be in London

54
00:02:13,770 --> 00:02:15,930
Technologies like pr5 will enable that

55
00:02:15,930 --> 00:02:18,060
person to watch that video as if it's a

56
00:02:18,060 --> 00:02:21,960
seamless experience another use of what

57
00:02:21,960 --> 00:02:24,600
RTC is web torrent web torrent works

58
00:02:24,600 --> 00:02:26,670
with the BitTorrent protocol in order to

59
00:02:26,670 --> 00:02:29,400
help you stream video files right into

60
00:02:29,400 --> 00:02:31,800
your browser so instead of you having to

61
00:02:31,800 --> 00:02:33,540
use something like transmission or

62
00:02:33,540 --> 00:02:34,920
utorrent or any sort of BitTorrent

63
00:02:34,920 --> 00:02:37,170
client you can just go to like a really

64
00:02:37,170 --> 00:02:40,760
beautiful web page and watch that file

65
00:02:40,760 --> 00:02:43,550
people kind of worry about bit torrents

66
00:02:43,550 --> 00:02:46,740
they kind of associated with privacy but

67
00:02:46,740 --> 00:02:48,630
it's actually possible now like inter

68
00:02:48,630 --> 00:02:51,150
Ledger's doing demos where you can like

69
00:02:51,150 --> 00:02:53,250
actually have micro payments associated

70
00:02:53,250 --> 00:02:55,620
to a bit torrent download you can attach

71
00:02:55,620 --> 00:02:58,740
metadata to an mp3 or a video file and

72
00:02:58,740 --> 00:03:00,750
people can pay as they're streaming and

73
00:03:00,750 --> 00:03:02,190
downloading your file even though it's

74
00:03:02,190 --> 00:03:06,930
peer-to-peer so back to the whole

75
00:03:06,930 --> 00:03:10,380
WebSockets thing we when we do

76
00:03:10,380 --> 00:03:11,160
WebSockets

77
00:03:11,160 --> 00:03:12,630
it's almost stuff like push

78
00:03:12,630 --> 00:03:14,730
notifications and it sends little bits

79
00:03:14,730 --> 00:03:17,940
of data in order web RTC doesn't care

80
00:03:17,940 --> 00:03:21,180
about dropping packets it just sends

81
00:03:21,180 --> 00:03:23,880
everything in a big big stream so it's a

82
00:03:23,880 --> 00:03:25,830
big stream of video it's a big stream of

83
00:03:25,830 --> 00:03:28,200
data for online game you're playing if

84
00:03:28,200 --> 00:03:29,550
you lose a packet that's not the

85
00:03:29,550 --> 00:03:31,080
important part the important part is

86
00:03:31,080 --> 00:03:32,340
that you get most of the data you need

87
00:03:32,340 --> 00:03:37,110
at the right time so again back to peer

88
00:03:37,110 --> 00:03:40,380
to peer web mercy see the browser

89
00:03:40,380 --> 00:03:42,900
support is getting better and better it

90
00:03:42,900 --> 00:03:44,990
used to just be for Chrome and Firefox

91
00:03:44,990 --> 00:03:48,380
but now it's also for edge and Safari

92
00:03:48,380 --> 00:03:50,790
most of the time it's recommended that

93
00:03:50,790 --> 00:03:54,090
use a shim called adapter Jas to account

94
00:03:54,090 --> 00:03:56,490
for slightly different names or naming

95
00:03:56,490 --> 00:04:01,440
in the API between browsers one thing

96
00:04:01,440 --> 00:04:03,150
I'm going to spend a lot of time on is

97
00:04:03,150 --> 00:04:06,240
how to connect the pairs so the thing

98
00:04:06,240 --> 00:04:09,330
with WebRTC is that browsers and

99
00:04:09,330 --> 00:04:10,890
computers are very good at sharing data

100
00:04:10,890 --> 00:04:13,250
but they're not very good about caring

101
00:04:13,250 --> 00:04:15,230
meaning they're not very good about

102
00:04:15,230 --> 00:04:17,459
caring about each other or finding each

103
00:04:17,459 --> 00:04:20,040
other so in order to connect to pairs we

104
00:04:20,040 --> 00:04:21,810
have to talk about a lot of technical

105
00:04:21,810 --> 00:04:23,760
terms I'm going to touch on really

106
00:04:23,760 --> 00:04:26,880
quickly such as SDP

107
00:04:26,880 --> 00:04:34,850
offers answers IP addresses ports

108
00:04:34,850 --> 00:04:40,410
routers firewalls ice the interactive

109
00:04:40,410 --> 00:04:42,780
connectivity establishment different

110
00:04:42,780 --> 00:04:44,340
kinds of ice servers such as stun

111
00:04:44,340 --> 00:04:47,850
session traversal utilities for not turn

112
00:04:47,850 --> 00:04:50,580
traversal relay using that and then I'm

113
00:04:50,580 --> 00:04:52,500
just going to very quickly touch on the

114
00:04:52,500 --> 00:04:54,270
data channel which is available through

115
00:04:54,270 --> 00:04:56,580
an rtcpeerconnection the data channel is

116
00:04:56,580 --> 00:04:58,140
what allows us to share data with each

117
00:04:58,140 --> 00:05:01,680
other so the first part making a

118
00:05:01,680 --> 00:05:04,740
connection we take making a connection

119
00:05:04,740 --> 00:05:07,350
for granted most of us we have eyes we

120
00:05:07,350 --> 00:05:09,270
have ears if we see another person on

121
00:05:09,270 --> 00:05:11,070
the street it's very easy for us to

122
00:05:11,070 --> 00:05:13,440
connect with another person we just

123
00:05:13,440 --> 00:05:15,330
start talking to them they can hear us

124
00:05:15,330 --> 00:05:17,430
they start talking back and we've made a

125
00:05:17,430 --> 00:05:20,020
connection

126
00:05:20,030 --> 00:05:22,860
however for computers it's not that easy

127
00:05:22,860 --> 00:05:24,480
computers don't know how to find other

128
00:05:24,480 --> 00:05:27,360
computers computers are pretty familiar

129
00:05:27,360 --> 00:05:29,760
with finding websites you just tell a

130
00:05:29,760 --> 00:05:31,620
computer to go to a certain domain and

131
00:05:31,620 --> 00:05:33,840
that domain is associated with an IP

132
00:05:33,840 --> 00:05:35,970
address and a port and that way the

133
00:05:35,970 --> 00:05:39,360
computer can find the website so that

134
00:05:39,360 --> 00:05:40,770
kind of thing your computer is pretty

135
00:05:40,770 --> 00:05:43,170
comfortable with but there's things that

136
00:05:43,170 --> 00:05:44,700
the computer doesn't even know about its

137
00:05:44,700 --> 00:05:47,100
own self your computer doesn't even know

138
00:05:47,100 --> 00:05:50,790
its own IP address which we're going to

139
00:05:50,790 --> 00:05:55,080
talk about in a bit so I lied a bit at

140
00:05:55,080 --> 00:05:58,290
the beginning WebRTC is peer-to-peer but

141
00:05:58,290 --> 00:05:59,670
you actually need servers to help

142
00:05:59,670 --> 00:06:02,100
connect those peers those servers don't

143
00:06:02,100 --> 00:06:03,420
need to know anything about your peers

144
00:06:03,420 --> 00:06:04,710
and they don't need to store any data

145
00:06:04,710 --> 00:06:06,450
that those peers are exchanging with you

146
00:06:06,450 --> 00:06:08,880
we cheat the other yeah but they need

147
00:06:08,880 --> 00:06:11,760
those servers help make a connection so

148
00:06:11,760 --> 00:06:14,910
an example here we need to do a lot of

149
00:06:14,910 --> 00:06:17,370
this thing called signaling so at the

150
00:06:17,370 --> 00:06:18,930
beginning of the connection the two

151
00:06:18,930 --> 00:06:21,630
pairs do a lot of signaling and then

152
00:06:21,630 --> 00:06:23,310
once the signaling is done and they're

153
00:06:23,310 --> 00:06:26,070
connected it's almost like the signaling

154
00:06:26,070 --> 00:06:32,250
server can follow away

155
00:06:32,260 --> 00:06:34,820
so signaling starts off with this thing

156
00:06:34,820 --> 00:06:36,380
called a session description protocol

157
00:06:36,380 --> 00:06:39,380
this is the almost the equivalent of

158
00:06:39,380 --> 00:06:42,260
like just finding out if anyone's out

159
00:06:42,260 --> 00:06:45,230
there so a computer needs to find out if

160
00:06:45,230 --> 00:06:47,660
another computers out there they make up

161
00:06:47,660 --> 00:06:49,460
a session description protocol and send

162
00:06:49,460 --> 00:06:53,060
it out so this is sent out in the form

163
00:06:53,060 --> 00:06:56,120
of an offer the offer goes through the

164
00:06:56,120 --> 00:06:58,250
router through the signaling server and

165
00:06:58,250 --> 00:07:01,310
then reaches the other pair the pair

166
00:07:01,310 --> 00:07:03,050
accepts the remote offer and then they

167
00:07:03,050 --> 00:07:05,720
store it as a remote description once

168
00:07:05,720 --> 00:07:07,220
they've done that they create another

169
00:07:07,220 --> 00:07:11,030
part SDP called an answer and then that

170
00:07:11,030 --> 00:07:14,240
answer is sent out on the network and it

171
00:07:14,240 --> 00:07:17,150
goes through the signaling server and it

172
00:07:17,150 --> 00:07:21,320
goes back to the other pair so the pair

173
00:07:21,320 --> 00:07:23,120
accepts the remote answer and sets it as

174
00:07:23,120 --> 00:07:25,040
the remote description however at this

175
00:07:25,040 --> 00:07:27,940
point we've sent offer we sent an answer

176
00:07:27,940 --> 00:07:31,400
but a connection between the two pairs

177
00:07:31,400 --> 00:07:33,800
haven't been made yet so all they know

178
00:07:33,800 --> 00:07:35,690
at this point is that someone is sending

179
00:07:35,690 --> 00:07:37,430
out an offer someone's ready to accept

180
00:07:37,430 --> 00:07:38,780
that offer they want to make a

181
00:07:38,780 --> 00:07:40,370
connection but they still don't know how

182
00:07:40,370 --> 00:07:42,350
to make the connection and they make

183
00:07:42,350 --> 00:07:44,000
this connection by doing something we

184
00:07:44,000 --> 00:07:48,260
call exchanging ice candidates so this

185
00:07:48,260 --> 00:07:50,030
is a little complicated I'm going to

186
00:07:50,030 --> 00:07:54,500
start at the beginning so basically the

187
00:07:54,500 --> 00:07:56,510
computer knows that there's someone else

188
00:07:56,510 --> 00:07:58,180
out there that they want to connect with

189
00:07:58,180 --> 00:08:00,560
but they don't actually know where that

190
00:08:00,560 --> 00:08:03,050
other computer is and in fact like I

191
00:08:03,050 --> 00:08:05,000
mentioned the computer doesn't even know

192
00:08:05,000 --> 00:08:07,970
where they are computers connect to

193
00:08:07,970 --> 00:08:10,220
other computers by this thing called IP

194
00:08:10,220 --> 00:08:13,130
addresses imports but because of our

195
00:08:13,130 --> 00:08:17,300
routers we only know our private IP when

196
00:08:17,300 --> 00:08:19,850
we're on a home network to connect with

197
00:08:19,850 --> 00:08:22,040
another pair we need to know our public

198
00:08:22,040 --> 00:08:24,020
IP and we also need to know the peers

199
00:08:24,020 --> 00:08:27,080
public IP and this whole thing about

200
00:08:27,080 --> 00:08:29,870
only nosing your private IP is something

201
00:08:29,870 --> 00:08:32,270
called NAT which is basically a

202
00:08:32,270 --> 00:08:33,920
technical term for hiding your address

203
00:08:33,920 --> 00:08:36,020
from you the other thing we have to

204
00:08:36,020 --> 00:08:37,970
worry about in order in other in

205
00:08:37,970 --> 00:08:40,430
addition to this thing called NAT is we

206
00:08:40,430 --> 00:08:44,230
have to know a tiny bit about firewalls

207
00:08:44,240 --> 00:08:46,040
so the thing with firewalls is that

208
00:08:46,040 --> 00:08:48,709
firewalls block ports and to connect

209
00:08:48,709 --> 00:08:49,939
with another parent we need to know

210
00:08:49,939 --> 00:08:52,160
their public IP and we also need to know

211
00:08:52,160 --> 00:08:55,610
their port so how do we get around these

212
00:08:55,610 --> 00:08:57,079
issues with our routers and our

213
00:08:57,079 --> 00:09:00,589
firewalls how do we get around that so

214
00:09:00,589 --> 00:09:01,999
the two computers can actually make a

215
00:09:01,999 --> 00:09:04,490
connection we get around these with

216
00:09:04,490 --> 00:09:06,379
something called ice the in turn

217
00:09:06,379 --> 00:09:08,199
interactive connectivity establishment

218
00:09:08,199 --> 00:09:10,699
it's a framework for getting two pairs

219
00:09:10,699 --> 00:09:13,249
to connect to each other and ice has two

220
00:09:13,249 --> 00:09:16,309
kinds of servers one of them is a sun's

221
00:09:16,309 --> 00:09:19,100
stun server which is session traversal

222
00:09:19,100 --> 00:09:21,259
utilities for NAT and the other kind of

223
00:09:21,259 --> 00:09:24,259
server is a turn server which is

224
00:09:24,259 --> 00:09:28,279
traversal using relay net so a few quick

225
00:09:28,279 --> 00:09:31,879
things about these servers the stun

226
00:09:31,879 --> 00:09:34,009
server is often free there's lots

227
00:09:34,009 --> 00:09:36,559
available and when you're using a stun

228
00:09:36,559 --> 00:09:38,749
server you're only exchanging maybe 10

229
00:09:38,749 --> 00:09:41,720
kilobytes of information at a time so

230
00:09:41,720 --> 00:09:43,819
the cost is next to nothing people

231
00:09:43,819 --> 00:09:45,429
usually give out Sun servers for free

232
00:09:45,429 --> 00:09:48,319
turn servers are used to relay media in

233
00:09:48,319 --> 00:09:50,029
case your peer-to-peer connection isn't

234
00:09:50,029 --> 00:09:52,279
strong enough and because it's relaying

235
00:09:52,279 --> 00:09:53,899
media and large amounts of files turn

236
00:09:53,899 --> 00:09:57,799
servers can be quite expensive so the

237
00:09:57,799 --> 00:09:59,449
thing with these ice servers is that

238
00:09:59,449 --> 00:10:00,769
these ice servers give you ice

239
00:10:00,769 --> 00:10:03,259
candidates so while that whole offer

240
00:10:03,259 --> 00:10:05,329
answer process is going on that I spoke

241
00:10:05,329 --> 00:10:07,819
about earlier at the same time these

242
00:10:07,819 --> 00:10:10,639
pairs are also like making a connection

243
00:10:10,639 --> 00:10:15,889
to often a stun server so the stun

244
00:10:15,889 --> 00:10:18,799
server they get ice candidates from the

245
00:10:18,799 --> 00:10:20,779
stun server and the main purpose of a

246
00:10:20,779 --> 00:10:23,329
stun server is to find out your IP so

247
00:10:23,329 --> 00:10:25,819
the stun server tells the peer what

248
00:10:25,819 --> 00:10:29,329
their IP is and it gets sent back to the

249
00:10:29,329 --> 00:10:32,360
peer once they have some candidates

250
00:10:32,360 --> 00:10:35,720
ready the pair's exchange candidates by

251
00:10:35,720 --> 00:10:38,540
the signaling server and then that's how

252
00:10:38,540 --> 00:10:41,089
they reach each other and once they find

253
00:10:41,089 --> 00:10:43,819
enough ice candidates they have a

254
00:10:43,819 --> 00:10:47,119
connection so it's kind of a complicated

255
00:10:47,119 --> 00:10:51,649
process but there is that's the that's

256
00:10:51,649 --> 00:10:53,089
the gist of it you have to send out

257
00:10:53,089 --> 00:10:55,069
offers you have to send out answers and

258
00:10:55,069 --> 00:10:56,749
you have to exchange ice candidates in

259
00:10:56,749 --> 00:10:57,890
order to make

260
00:10:57,890 --> 00:11:01,610
connection sometimes son servers aren't

261
00:11:01,610 --> 00:11:03,290
enough to give you a valid ice candidate

262
00:11:03,290 --> 00:11:05,660
this happens when your router employs a

263
00:11:05,660 --> 00:11:08,450
restriction called symmetric net also

264
00:11:08,450 --> 00:11:10,310
like I said earlier when you're reeling

265
00:11:10,310 --> 00:11:12,890
large amounts of data you can't rely on

266
00:11:12,890 --> 00:11:15,110
stun alone so this is where the turn

267
00:11:15,110 --> 00:11:17,920
servers come in if anyone's ever used

268
00:11:17,920 --> 00:11:21,200
videoconferencing in slack slack uses

269
00:11:21,200 --> 00:11:24,050
WebRTC and they rely almost entirely on

270
00:11:24,050 --> 00:11:28,490
turn servers so one thing I want to talk

271
00:11:28,490 --> 00:11:30,620
about really quickly is troubleshooting

272
00:11:30,620 --> 00:11:34,250
before I dive into the code just kind of

273
00:11:34,250 --> 00:11:35,810
like my experiences like working with

274
00:11:35,810 --> 00:11:38,450
WebRTC and issues I've come into contact

275
00:11:38,450 --> 00:11:42,190
with so the first thing I discovered is

276
00:11:42,190 --> 00:11:45,560
WebRTC as of last couple years I think

277
00:11:45,560 --> 00:11:47,990
it requires a secure connection so even

278
00:11:47,990 --> 00:11:49,070
though you're just writing maybe

279
00:11:49,070 --> 00:11:51,019
client-side code you have to make sure

280
00:11:51,019 --> 00:11:52,850
that you have a certificate and you have

281
00:11:52,850 --> 00:11:55,220
to make sure it's HTTPS especially for

282
00:11:55,220 --> 00:11:56,720
some of the api's such as getusermedia

283
00:11:56,720 --> 00:11:59,300
which takes control of a user's camera

284
00:11:59,300 --> 00:12:00,800
like if you're controlling someone's

285
00:12:00,800 --> 00:12:02,839
camera or their microphone you want to

286
00:12:02,839 --> 00:12:04,390
make sure you're sending out whatever

287
00:12:04,390 --> 00:12:06,769
video stream you're getting from them in

288
00:12:06,769 --> 00:12:09,920
a secure encrypted connection because

289
00:12:09,920 --> 00:12:11,870
your client-side code is secure though

290
00:12:11,870 --> 00:12:13,370
whatever you're using for your signaling

291
00:12:13,370 --> 00:12:16,459
and WebRTC doesn't you can use sip or

292
00:12:16,459 --> 00:12:18,589
you can use WebSockets for whatever

293
00:12:18,589 --> 00:12:20,300
you're using for signaling also has to

294
00:12:20,300 --> 00:12:22,220
be secure so depending on how

295
00:12:22,220 --> 00:12:24,170
comfortable you're comfortable you are

296
00:12:24,170 --> 00:12:26,480
with setting up a TLS certificate I

297
00:12:26,480 --> 00:12:28,100
think if you're just like messing around

298
00:12:28,100 --> 00:12:29,540
you're just starting you just want to

299
00:12:29,540 --> 00:12:31,880
make something basic and WebRTC to feel

300
00:12:31,880 --> 00:12:34,190
find out if you like it or not I would

301
00:12:34,190 --> 00:12:37,190
stick with using firebase for your kind

302
00:12:37,190 --> 00:12:39,440
of first kind of messing around the

303
00:12:39,440 --> 00:12:43,010
other thing I found out is like in my

304
00:12:43,010 --> 00:12:45,050
personal experience I think Firefox is a

305
00:12:45,050 --> 00:12:47,589
lot better to do WebRTC development in

306
00:12:47,589 --> 00:12:50,810
the developer the internal WebRTC tool

307
00:12:50,810 --> 00:12:52,990
is a lot more user friendly it has logs

308
00:12:52,990 --> 00:12:55,310
it tells you if the offers being sent

309
00:12:55,310 --> 00:12:59,269
out and received correctly I know that

310
00:12:59,269 --> 00:13:01,070
Chrome is like kind of pushing WebRTC

311
00:13:01,070 --> 00:13:02,630
and it's probably like I'd had in terms

312
00:13:02,630 --> 00:13:04,220
of the technology available but I just

313
00:13:04,220 --> 00:13:06,620
find Firefox was a little more friendly

314
00:13:06,620 --> 00:13:11,240
to do development in another thing I

315
00:13:11,240 --> 00:13:13,820
didn't know when I first started messing

316
00:13:13,820 --> 00:13:15,589
around with making peer connections like

317
00:13:15,589 --> 00:13:16,700
rtcpeerconnection

318
00:13:16,700 --> 00:13:18,680
is that you can only send signals

319
00:13:18,680 --> 00:13:21,370
between two pair connections at a time

320
00:13:21,370 --> 00:13:24,170
if you try to do something like this

321
00:13:24,170 --> 00:13:27,230
it's not going to work if you're kind of

322
00:13:27,230 --> 00:13:29,360
trying to broadcast messages from one

323
00:13:29,360 --> 00:13:30,740
pair connection out to two pair

324
00:13:30,740 --> 00:13:32,720
connections you're getting get all sorts

325
00:13:32,720 --> 00:13:35,209
of errors and the problem with these

326
00:13:35,209 --> 00:13:37,459
errors is that those errors are

327
00:13:37,459 --> 00:13:39,529
misleading that's not actually what's

328
00:13:39,529 --> 00:13:41,540
going wrong with your peer connection

329
00:13:41,540 --> 00:13:42,920
you're not sending out the wrong thing

330
00:13:42,920 --> 00:13:44,990
in the wrong state it's not that you're

331
00:13:44,990 --> 00:13:46,610
missing a turn server that your turn

332
00:13:46,610 --> 00:13:48,529
server is broken it's actually because

333
00:13:48,529 --> 00:13:51,320
you're sending out the wrong message to

334
00:13:51,320 --> 00:13:53,209
the wrong peer and it's getting confused

335
00:13:53,209 --> 00:13:55,339
so you have to be really careful

336
00:13:55,339 --> 00:13:57,290
whenever you're architecting or

337
00:13:57,290 --> 00:13:59,990
designing your signaling system to kind

338
00:13:59,990 --> 00:14:02,149
of keep things like unique IDs and make

339
00:14:02,149 --> 00:14:03,860
sure you're sending out the message to

340
00:14:03,860 --> 00:14:08,029
the exact pair the other thing I found

341
00:14:08,029 --> 00:14:10,760
like in my personal experience is that a

342
00:14:10,760 --> 00:14:12,380
lot of the tutorials are pretty

343
00:14:12,380 --> 00:14:15,500
misleading often you see the remote pair

344
00:14:15,500 --> 00:14:17,779
and the local pair they're often shown

345
00:14:17,779 --> 00:14:19,640
in the same script so you'll see

346
00:14:19,640 --> 00:14:21,529
something like this in the Mozilla Docs

347
00:14:21,529 --> 00:14:25,160
and you see that local connection and

348
00:14:25,160 --> 00:14:27,230
the remote connection are kind of on the

349
00:14:27,230 --> 00:14:29,149
same page but really you almost have to

350
00:14:29,149 --> 00:14:31,339
have a mental model where you take that

351
00:14:31,339 --> 00:14:33,560
code you see in the tutorial and you rip

352
00:14:33,560 --> 00:14:35,120
out the remote connection and you keep

353
00:14:35,120 --> 00:14:37,339
that in a separate web page which is as

354
00:14:37,339 --> 00:14:38,990
you can imagine a little confusing here

355
00:14:38,990 --> 00:14:40,250
like you'd have to rewrite all your

356
00:14:40,250 --> 00:14:45,140
promise code another thing I want to

357
00:14:45,140 --> 00:14:47,329
briefly talk about I'm just going to

358
00:14:47,329 --> 00:14:49,760
show a bit of code now is that we I just

359
00:14:49,760 --> 00:14:51,680
spoke a lot about how this whole offer

360
00:14:51,680 --> 00:14:54,649
answer exchange process but I think like

361
00:14:54,649 --> 00:14:56,510
if you're just starting out it's good to

362
00:14:56,510 --> 00:14:58,130
have a library that sort of abstracts a

363
00:14:58,130 --> 00:15:00,350
lot of stuff like this away from you so

364
00:15:00,350 --> 00:15:03,079
I found it was really useful to use this

365
00:15:03,079 --> 00:15:07,880
library called simple peer so as you can

366
00:15:07,880 --> 00:15:09,740
see all you do is require the library

367
00:15:09,740 --> 00:15:12,500
you create a new pair so there always

368
00:15:12,500 --> 00:15:14,270
has to be one pair that sounds that the

369
00:15:14,270 --> 00:15:17,420
offer so if you have two pairs one pair

370
00:15:17,420 --> 00:15:19,160
has to be there to send out the offer so

371
00:15:19,160 --> 00:15:20,810
in this library you do that by setting

372
00:15:20,810 --> 00:15:23,420
the initiator to true and then you can

373
00:15:23,420 --> 00:15:24,990
just listen for

374
00:15:24,990 --> 00:15:27,540
these four events you can listen for the

375
00:15:27,540 --> 00:15:29,040
error so if there's any errors you can

376
00:15:29,040 --> 00:15:31,110
log it to see what's going on

377
00:15:31,110 --> 00:15:33,480
parents signal that usually happens when

378
00:15:33,480 --> 00:15:35,550
a pair is ready to send out an offer or

379
00:15:35,550 --> 00:15:37,680
an answer or send out some ice candidate

380
00:15:37,680 --> 00:15:41,070
information so in your signal event you

381
00:15:41,070 --> 00:15:43,410
just use your your firebase and you send

382
00:15:43,410 --> 00:15:44,880
out the messages you need to the correct

383
00:15:44,880 --> 00:15:48,209
pair on connect once you're connected

384
00:15:48,209 --> 00:15:50,790
all you have to do if you use a simple

385
00:15:50,790 --> 00:15:52,380
peer library if you want to use the data

386
00:15:52,380 --> 00:15:54,149
channel is just send stuff using the

387
00:15:54,149 --> 00:15:58,230
send method so and you can also handle

388
00:15:58,230 --> 00:16:01,410
incoming data here's some example

389
00:16:01,410 --> 00:16:04,440
firebase stuff it's if anyone's worked

390
00:16:04,440 --> 00:16:06,000
with firebase before I think the first

391
00:16:06,000 --> 00:16:07,529
three lines are first four lines they're

392
00:16:07,529 --> 00:16:10,399
pretty like familiar you import firebase

393
00:16:10,399 --> 00:16:13,500
in the config it's just you cut and

394
00:16:13,500 --> 00:16:14,790
paste what you get from the firebase

395
00:16:14,790 --> 00:16:16,440
website when you set up a new firebase

396
00:16:16,440 --> 00:16:19,230
database you initialize your app with

397
00:16:19,230 --> 00:16:21,300
your configuration and then you get a

398
00:16:21,300 --> 00:16:22,860
reference to your database and then when

399
00:16:22,860 --> 00:16:24,540
you want to send the message you just

400
00:16:24,540 --> 00:16:26,610
you just push that message to the

401
00:16:26,610 --> 00:16:28,890
database and if you do it with a unique

402
00:16:28,890 --> 00:16:31,079
ID the other peer knows like hey this

403
00:16:31,079 --> 00:16:33,029
message is from me based on the ID and

404
00:16:33,029 --> 00:16:34,920
I'll accept that message and I'll use

405
00:16:34,920 --> 00:16:36,570
that when I'm signaling and trying to

406
00:16:36,570 --> 00:16:42,570
find another pair so I have a simple

407
00:16:42,570 --> 00:16:44,820
file upload example here I'm just gonna

408
00:16:44,820 --> 00:16:50,070
kind of play an animation of it so this

409
00:16:50,070 --> 00:16:52,380
is a destination page it's connected to

410
00:16:52,380 --> 00:16:55,230
one user and then the data channel is

411
00:16:55,230 --> 00:17:01,680
sending cat pictures over and that's

412
00:17:01,680 --> 00:17:04,439
what it does it's just it's hard to see

413
00:17:04,439 --> 00:17:05,579
how this is different from like a

414
00:17:05,579 --> 00:17:07,620
regular file upload but really what's

415
00:17:07,620 --> 00:17:09,540
happening here is that instead of you

416
00:17:09,540 --> 00:17:11,250
uploading an image to like an s3 bucket

417
00:17:11,250 --> 00:17:13,020
and then displaying it on a web page

418
00:17:13,020 --> 00:17:15,059
this image is going directly from your

419
00:17:15,059 --> 00:17:19,000
browser to another person's browser

420
00:17:19,010 --> 00:17:22,470
so in summary WebRTC allows computers

421
00:17:22,470 --> 00:17:24,209
share media directly with other

422
00:17:24,209 --> 00:17:26,220
computers without an intermediary server

423
00:17:26,220 --> 00:17:29,040
however to connect two pairs you need to

424
00:17:29,040 --> 00:17:30,600
use some kind of signaling server and

425
00:17:30,600 --> 00:17:34,950
eye servers are required I just want to

426
00:17:34,950 --> 00:17:39,390
show one thing really quick

427
00:17:39,400 --> 00:17:45,950
might possibly need some okay here yeah

428
00:17:45,950 --> 00:17:48,580
okay so I'm just gonna make this bigger

429
00:17:48,580 --> 00:17:51,350
this is one thing I really like it's a

430
00:17:51,350 --> 00:17:53,870
little hard to see but if you if you go

431
00:17:53,870 --> 00:17:56,390
into Firefox and you type in about :

432
00:17:56,390 --> 00:17:59,510
WebRTC this pulls up your internal web

433
00:17:59,510 --> 00:18:04,910
RTC tools and if you go to web I'm just

434
00:18:04,910 --> 00:18:12,800
gonna go to web wait can I get some

435
00:18:12,800 --> 00:18:20,590
technical help just for a second

436
00:18:20,600 --> 00:18:48,220
hey just uh when I'm like you know what

437
00:18:48,230 --> 00:19:06,970
hmmm maybe I'll try can we just try this

438
00:19:06,980 --> 00:19:24,870
sorry just give me a minute

439
00:19:24,880 --> 00:19:27,100
always to connect it to a keyboard or

440
00:19:27,100 --> 00:19:35,860
some just okay so okay I was going to

441
00:19:35,860 --> 00:19:37,300
show a website to show how it worked

442
00:19:37,300 --> 00:19:39,970
with the internal web RTC tools but I

443
00:19:39,970 --> 00:19:41,380
think having a little bit of technical

444
00:19:41,380 --> 00:19:43,900
difficulty so that's it for my talk

445
00:19:43,900 --> 00:19:45,850
hopefully it's a good intro to WebRTC

446
00:19:45,850 --> 00:19:47,440
and some cool tools you can use to get

447
00:19:47,440 --> 00:19:49,560
up and running with it

