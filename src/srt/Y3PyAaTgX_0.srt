1
00:00:38,430 --> 00:00:42,460

so sluggish titled armchair type theory

2
00:00:42,460 --> 00:00:46,420
who could spot the type error in this

3
00:00:46,420 --> 00:00:52,570
opening slide now you'll notice there's

4
00:00:52,570 --> 00:00:54,400
a couch there when it's supposed to be

5
00:00:54,400 --> 00:01:02,470
an armchair so yeah my name is zak Z on

6
00:01:02,470 --> 00:01:06,880
Twitter I'm actually from Florida so

7
00:01:06,880 --> 00:01:11,590
yeah right there so you want to know

8
00:01:11,590 --> 00:01:14,190
anything about the state feel free to

9
00:01:14,190 --> 00:01:20,020
check out this website Google and I can

10
00:01:20,020 --> 00:01:24,729
help you out with that but so this is

11
00:01:24,729 --> 00:01:28,330
jas cough and javascript doesn't have

12
00:01:28,330 --> 00:01:30,880
types but let me motivate you a little

13
00:01:30,880 --> 00:01:36,430
bit this was a bad year for software

14
00:01:36,430 --> 00:01:39,720
engineering there was the go-to fail

15
00:01:39,720 --> 00:01:42,190
then there's also something called

16
00:01:42,190 --> 00:01:47,170
heartbleed with a really nice logo and

17
00:01:47,170 --> 00:01:49,510
it's I think it's becoming clear that

18
00:01:49,510 --> 00:01:52,560
we're good at building features but

19
00:01:52,560 --> 00:01:56,350
maybe not so good at exercising all of

20
00:01:56,350 --> 00:01:57,880
the unhappy pass so we're really good at

21
00:01:57,880 --> 00:02:00,070
building features building or exercising

22
00:02:00,070 --> 00:02:04,960
the happy paths and usually what's out

23
00:02:04,960 --> 00:02:06,250
of sight is out of mind and we don't

24
00:02:06,250 --> 00:02:09,129
notice when we're exposing all these

25
00:02:09,129 --> 00:02:13,090
these opportunities for failure so

26
00:02:13,090 --> 00:02:16,450
been that we're horrible at exercising

27
00:02:16,450 --> 00:02:21,190
these unhappy these unhappy paths code

28
00:02:21,190 --> 00:02:23,650
reviewers QA the open source community

29
00:02:23,650 --> 00:02:26,379
even missed these these bugs that were

30
00:02:26,379 --> 00:02:28,989
in the software we have to rely more on

31
00:02:28,989 --> 00:02:32,430
computers or computer friends who are

32
00:02:32,430 --> 00:02:35,830
relentlessly unforgiving and which is a

33
00:02:35,830 --> 00:02:36,910
good quality to have when you're

34
00:02:36,910 --> 00:02:40,629
reviewing software so this talk is

35
00:02:40,629 --> 00:02:42,370
titled armchair type theory so of course

36
00:02:42,370 --> 00:02:44,260
we're going to be talking about type

37
00:02:44,260 --> 00:02:46,840
theory you can kind of see in the

38
00:02:46,840 --> 00:02:48,579
background there that's Bertrand Russell

39
00:02:48,579 --> 00:02:50,650
he invented type theory to basically

40
00:02:50,650 --> 00:02:56,220
solve a bug in formal logic so in

41
00:02:56,220 --> 00:02:58,390
programming languages we use type theory

42
00:02:58,390 --> 00:03:02,260
to develop type systems and you can if

43
00:03:02,260 --> 00:03:03,579
you're not familiar with type systems

44
00:03:03,579 --> 00:03:05,950
you can basically think of it as like

45
00:03:05,950 --> 00:03:09,340
j/s hint on steroids so it'll it'll

46
00:03:09,340 --> 00:03:14,049
actually it's actually part of part of

47
00:03:14,049 --> 00:03:15,849
the language usually languages I have

48
00:03:15,849 --> 00:03:17,290
type systems they embedded in the

49
00:03:17,290 --> 00:03:19,660
language but it's also static analysis

50
00:03:19,660 --> 00:03:27,069
to it so and nothing short of running

51
00:03:27,069 --> 00:03:28,389
the actual program will guarantee is

52
00:03:28,389 --> 00:03:31,840
correct but type systems provide a way

53
00:03:31,840 --> 00:03:35,470
to narrow the scope of what's a valid

54
00:03:35,470 --> 00:03:37,989
program sort of the same way that your

55
00:03:37,989 --> 00:03:41,500
parser will narrow the scope based on

56
00:03:41,500 --> 00:03:44,019
the grammar of the language the system

57
00:03:44,019 --> 00:03:46,930
will narrow it further using extra

58
00:03:46,930 --> 00:03:48,549
information context about what the link

59
00:03:48,549 --> 00:03:51,669
what the program means and this is

60
00:03:51,669 --> 00:03:56,270
something you only do with a type system

61
00:03:56,280 --> 00:03:59,230
but of course there'll be trade-offs so

62
00:03:59,230 --> 00:04:02,799
if you're trying to do something

63
00:04:02,799 --> 00:04:06,609
dangerous or anything with safeties

64
00:04:06,609 --> 00:04:08,049
built-in is going to make it harder for

65
00:04:08,049 --> 00:04:11,049
you to do like certain things that's

66
00:04:11,049 --> 00:04:12,549
part of the trade-offs you have to make

67
00:04:12,549 --> 00:04:14,440
and I'll talk about that more when we

68
00:04:14,440 --> 00:04:18,010
get into things that are relevant to

69
00:04:18,010 --> 00:04:21,370
JavaScript like pure script and

70
00:04:21,370 --> 00:04:24,219
typescript because of course JavaScript

71
00:04:24,219 --> 00:04:26,139
itself doesn't have static types

72
00:04:26,139 --> 00:04:27,789
it does have these cool number types

73
00:04:27,789 --> 00:04:30,990
like Brian mentioned but nothing

74
00:04:30,990 --> 00:04:33,699
resembling static typing unless you

75
00:04:33,699 --> 00:04:36,430
count as an j s which is sort of like a

76
00:04:36,430 --> 00:04:40,749
clever reuse of operators to act as like

77
00:04:40,749 --> 00:04:43,719
a static typing hint for language for

78
00:04:43,719 --> 00:04:47,379
edges that understand it at least but

79
00:04:47,379 --> 00:04:48,699
it's not really relevant to javascript

80
00:04:48,699 --> 00:04:55,180
in general so we have these new

81
00:04:55,180 --> 00:04:56,439
languages that have been developed that

82
00:04:56,439 --> 00:04:57,909
compile to JavaScript and these ones

83
00:04:57,909 --> 00:04:59,889
especially target JavaScript as their

84
00:04:59,889 --> 00:05:03,460
back-end so typescript of course has

85
00:05:03,460 --> 00:05:05,439
been around for a while I'm sure your

86
00:05:05,439 --> 00:05:06,789
most of you are familiar with it then

87
00:05:06,789 --> 00:05:08,409
there's also something called cure

88
00:05:08,409 --> 00:05:11,529
script which is newer and it resembles

89
00:05:11,529 --> 00:05:14,349
Haskell and also elm is a really cool

90
00:05:14,349 --> 00:05:17,650
language that it's also similar to

91
00:05:17,650 --> 00:05:19,029
Haskell in certain ways but it's

92
00:05:19,029 --> 00:05:21,009
targeting frp so functional reactive

93
00:05:21,009 --> 00:05:23,710
programming i highly recommend it if

94
00:05:23,710 --> 00:05:25,960
you're trying to get into functional

95
00:05:25,960 --> 00:05:27,370
reactive programming and you also want

96
00:05:27,370 --> 00:05:29,050
an additional challenge because who

97
00:05:29,050 --> 00:05:32,860
doesn't want that of learning a purely

98
00:05:32,860 --> 00:05:35,229
functional language so but we're going

99
00:05:35,229 --> 00:05:39,089
to focus on typescript of care script

100
00:05:39,089 --> 00:05:42,729
and i'll i'm not going to get into

101
00:05:42,729 --> 00:05:46,360
actual type theory sorry for you those

102
00:05:46,360 --> 00:05:49,360
of you who came to this 930 talk ajs

103
00:05:49,360 --> 00:05:51,159
comp to actually learn about this stuff

104
00:05:51,159 --> 00:05:56,710
but we can sort of format using this

105
00:05:56,710 --> 00:06:00,490
metaphor instead basically what the type

106
00:06:00,490 --> 00:06:02,949
system is doing for most most type

107
00:06:02,949 --> 00:06:04,719
systems that we use and popular

108
00:06:04,719 --> 00:06:07,360
programming languages to have them they

109
00:06:07,360 --> 00:06:11,560
basically look at the value the shape of

110
00:06:11,560 --> 00:06:14,560
the value at different parts of the

111
00:06:14,560 --> 00:06:17,319
program where it's passing through like

112
00:06:17,319 --> 00:06:20,849
functions function application operators

113
00:06:20,849 --> 00:06:22,719
whenever you're passing that value

114
00:06:22,719 --> 00:06:24,939
around to these applications of a

115
00:06:24,939 --> 00:06:26,830
function or operator it'll check the

116
00:06:26,830 --> 00:06:29,289
value and make sure it performs as the

117
00:06:29,289 --> 00:06:31,599
shape so these blocks are representing

118
00:06:31,599 --> 00:06:33,430
the values of them the holes and this

119
00:06:33,430 --> 00:06:36,190
block here are the API boundaries where

120
00:06:36,190 --> 00:06:38,870
that values being passed around

121
00:06:38,870 --> 00:06:41,540
and here's an example of typescript

122
00:06:41,540 --> 00:06:44,480
where you'll see this is like a function

123
00:06:44,480 --> 00:06:47,360
but it also has typing annotations for

124
00:06:47,360 --> 00:06:49,010
the first name and last name expecting

125
00:06:49,010 --> 00:06:52,160
on the B string then also little return

126
00:06:52,160 --> 00:06:57,230
a string and you can imagine this as one

127
00:06:57,230 --> 00:06:59,170
way to imagine this is if there were

128
00:06:59,170 --> 00:07:02,090
assertions like generated or inserted

129
00:07:02,090 --> 00:07:03,920
into your program to make sure that it

130
00:07:03,920 --> 00:07:07,520
was always the correct value the shape

131
00:07:07,520 --> 00:07:09,500
the shape of the value is correct but

132
00:07:09,500 --> 00:07:12,620
the advantage of this as opposed to like

133
00:07:12,620 --> 00:07:15,890
unit testing or using assertions is that

134
00:07:15,890 --> 00:07:19,010
you're guaranteed tab based on the types

135
00:07:19,010 --> 00:07:20,420
of your Garrity to have a hundred

136
00:07:20,420 --> 00:07:22,970
percent code coverage if you're if

137
00:07:22,970 --> 00:07:24,770
you're using like something like Haskell

138
00:07:24,770 --> 00:07:28,070
or pure script it's guaranteed to be a

139
00:07:28,070 --> 00:07:29,390
hundred percent coverage because the

140
00:07:29,390 --> 00:07:32,360
entire the program has to be typed but

141
00:07:32,360 --> 00:07:35,390
it it's also done statically so you

142
00:07:35,390 --> 00:07:37,310
don't have to actually run make sure you

143
00:07:37,310 --> 00:07:38,600
have a hundred percent code coverage and

144
00:07:38,600 --> 00:07:41,210
you actually run the program so you'll

145
00:07:41,210 --> 00:07:44,780
be able to catch errors faster as you

146
00:07:44,780 --> 00:07:46,970
notice types another way to look at it

147
00:07:46,970 --> 00:07:52,130
is the compiler is sort of running a

148
00:07:52,130 --> 00:07:55,070
simpler Dumber version of your program

149
00:07:55,070 --> 00:07:57,220
at compile time the type checker is

150
00:07:57,220 --> 00:07:59,990
reading the ast taking the types and

151
00:07:59,990 --> 00:08:02,510
sort of running a computations on the

152
00:08:02,510 --> 00:08:04,730
types themselves to make sure that that

153
00:08:04,730 --> 00:08:07,430
passes then once you do that it's like

154
00:08:07,430 --> 00:08:11,300
you have a formula you have like a proof

155
00:08:11,300 --> 00:08:17,540
of your program so programs we want

156
00:08:17,540 --> 00:08:21,710
programs i can prove themselves sorry

157
00:08:21,710 --> 00:08:24,560
for this next we've got programs i can

158
00:08:24,560 --> 00:08:27,290
prove themselves sort of like daniel the

159
00:08:27,290 --> 00:08:31,460
karate kid proved himself and you'll

160
00:08:31,460 --> 00:08:33,680
want to be able to sweep the leg sort of

161
00:08:33,680 --> 00:08:37,150
say on certain classes of bugs and

162
00:08:37,150 --> 00:08:39,110
depending on the type system you'll be

163
00:08:39,110 --> 00:08:41,510
able to eliminate those bugs from your

164
00:08:41,510 --> 00:08:46,100
programs basically so sorry no more no

165
00:08:46,100 --> 00:08:47,570
more of these craddock you references

166
00:08:47,570 --> 00:08:53,390
i'm sorry but yeah so they're of course

167
00:08:53,390 --> 00:08:53,960
they're going to be trade-offs

168
00:08:53,960 --> 00:08:56,120
especially the different types is you

169
00:08:56,120 --> 00:08:59,300
might notice that c-sharp java and

170
00:08:59,300 --> 00:09:00,920
haskell have like completely

171
00:09:00,920 --> 00:09:03,110
different-looking type field the field

172
00:09:03,110 --> 00:09:04,370
of the type system is different and

173
00:09:04,370 --> 00:09:06,770
that's also the case of typescript in

174
00:09:06,770 --> 00:09:09,710
pure script it's basically like a Java C

175
00:09:09,710 --> 00:09:12,700
sharp past versus Haskell classic 00 p

176
00:09:12,700 --> 00:09:17,720
which is purely functional but what's

177
00:09:17,720 --> 00:09:19,850
interesting about typescript is of

178
00:09:19,850 --> 00:09:21,620
course it's a superset of javascript so

179
00:09:21,620 --> 00:09:23,720
you can take a standard JavaScript

180
00:09:23,720 --> 00:09:27,920
program and sort of incrementally add

181
00:09:27,920 --> 00:09:31,250
types to it if you want so you can take

182
00:09:31,250 --> 00:09:35,660
a standard function and then add types

183
00:09:35,660 --> 00:09:37,610
to it and this is you know you can do

184
00:09:37,610 --> 00:09:40,540
this for parts of your program at a time

185
00:09:40,540 --> 00:09:46,580
and of course it has the basic the basic

186
00:09:46,580 --> 00:09:49,070
things you would expect from a type

187
00:09:49,070 --> 00:09:52,640
system that is like C sharp or Java but

188
00:09:52,640 --> 00:09:54,350
I wanted to highlight a special a

189
00:09:54,350 --> 00:09:56,360
special part of the type system and

190
00:09:56,360 --> 00:10:00,140
that's the any type which it does

191
00:10:00,140 --> 00:10:02,030
exactly what you expect it basically

192
00:10:02,030 --> 00:10:05,900
lets you substitute any value for that

193
00:10:05,900 --> 00:10:08,260
variable that's annotated with any type

194
00:10:08,260 --> 00:10:12,230
then you might wonder why you know your

195
00:10:12,230 --> 00:10:13,820
your honor you can you just use an

196
00:10:13,820 --> 00:10:15,710
untyped language but you're having like

197
00:10:15,710 --> 00:10:18,350
an untyped untie javascript that you add

198
00:10:18,350 --> 00:10:19,910
types javascript to it and then you

199
00:10:19,910 --> 00:10:24,250
interact with an untyped subset of the

200
00:10:24,250 --> 00:10:27,380
javascript and it's sort of like that i

201
00:10:27,380 --> 00:10:28,640
don't know if you've seen this before

202
00:10:28,640 --> 00:10:32,000
the the island in the philippines it's

203
00:10:32,000 --> 00:10:34,040
called Luzon Island and then there's a

204
00:10:34,040 --> 00:10:36,830
if you zoom in on the southern end of it

205
00:10:36,830 --> 00:10:40,040
there's a lake and then if you zoom in

206
00:10:40,040 --> 00:10:42,620
on the lake you'll see that there's

207
00:10:42,620 --> 00:10:44,150
another island and then on the island

208
00:10:44,150 --> 00:10:48,560
there's another there's another lake so

209
00:10:48,560 --> 00:10:51,230
you know you have this sort of untyped

210
00:10:51,230 --> 00:10:53,090
environment where you add types to it

211
00:10:53,090 --> 00:10:54,740
but then you can also interact with

212
00:10:54,740 --> 00:10:57,530
other untyped may be foreign libraries

213
00:10:57,530 --> 00:11:00,950
that you need to interact with but and

214
00:11:00,950 --> 00:11:04,250
also if anyone's keeping score dynamic

215
00:11:04,250 --> 00:11:04,790
typing

216
00:11:04,790 --> 00:11:07,580
a subset of static typing so static

217
00:11:07,580 --> 00:11:09,560
typing is actually more general than

218
00:11:09,560 --> 00:11:12,050
dynamic typing you basically punch a

219
00:11:12,050 --> 00:11:15,650
hole in the type system and add untyped

220
00:11:15,650 --> 00:11:19,730
like this any type to it and so so

221
00:11:19,730 --> 00:11:21,890
dynamic typing is basically having one

222
00:11:21,890 --> 00:11:24,800
type and then static other static typing

223
00:11:24,800 --> 00:11:26,660
is when you add additional types besides

224
00:11:26,660 --> 00:11:31,850
the any type so you might be wondering

225
00:11:31,850 --> 00:11:35,800
again like why why he's a typed language

226
00:11:35,800 --> 00:11:38,450
when you can there's so much more

227
00:11:38,450 --> 00:11:41,890
flexibility with the n-type language and

228
00:11:41,890 --> 00:11:44,570
really the type systems are adding all

229
00:11:44,570 --> 00:11:46,340
of these extra features so that you can

230
00:11:46,340 --> 00:11:49,130
have these expressive programs you can

231
00:11:49,130 --> 00:11:51,080
approach the expressiveness of a num

232
00:11:51,080 --> 00:11:54,760
typed language but still have the

233
00:11:54,760 --> 00:11:57,140
guarantees that those classes of bugs

234
00:11:57,140 --> 00:12:01,130
are absent which is of course the main

235
00:12:01,130 --> 00:12:04,070
reason why we want to have these the

236
00:12:04,070 --> 00:12:06,710
time systems in the first place and pure

237
00:12:06,710 --> 00:12:08,750
scripts I'm going to talk about next has

238
00:12:08,750 --> 00:12:11,110
a completely different approach than

239
00:12:11,110 --> 00:12:14,690
typescript so typescript was trying to

240
00:12:14,690 --> 00:12:16,940
trying to achieve the improbable task of

241
00:12:16,940 --> 00:12:18,650
adding a sane type system on top of

242
00:12:18,650 --> 00:12:20,930
JavaScript and keeping the same

243
00:12:20,930 --> 00:12:23,330
JavaScript semantics so Pierre script

244
00:12:23,330 --> 00:12:25,340
took completely opposite approach like

245
00:12:25,340 --> 00:12:29,450
scribe scrap JavaScript add as it is and

246
00:12:29,450 --> 00:12:32,390
add a language that resembles Haskell so

247
00:12:32,390 --> 00:12:34,100
it's purely functional you'll see the

248
00:12:34,100 --> 00:12:37,610
syntax looks basically like castle and

249
00:12:37,610 --> 00:12:39,170
if you've never seen it before it looks

250
00:12:39,170 --> 00:12:40,640
like completely foreign you might not

251
00:12:40,640 --> 00:12:43,490
know how it works but that might be a

252
00:12:43,490 --> 00:12:46,610
good thing because it'll it'll serve set

253
00:12:46,610 --> 00:12:48,950
you off guard keep like putting on your

254
00:12:48,950 --> 00:12:52,820
toes because the actual the language

255
00:12:52,820 --> 00:12:54,140
itself function is a lot differently

256
00:12:54,140 --> 00:12:57,500
than a standard JavaScript or object

257
00:12:57,500 --> 00:13:00,560
oriented programming so you could say

258
00:13:00,560 --> 00:13:02,000
it's sort of like JavaScript of

259
00:13:02,000 --> 00:13:03,920
functional parts it takes the functional

260
00:13:03,920 --> 00:13:06,790
parts of JavaScript but also wraps it a

261
00:13:06,790 --> 00:13:09,290
really nice type system to give you

262
00:13:09,290 --> 00:13:13,730
those assurances that you need and one

263
00:13:13,730 --> 00:13:15,650
property of the type systems that I want

264
00:13:15,650 --> 00:13:16,850
to highlight the difference between

265
00:13:16,850 --> 00:13:18,290
typescript and

266
00:13:18,290 --> 00:13:19,759
your script is something called

267
00:13:19,759 --> 00:13:23,269
soundness and soundness basically means

268
00:13:23,269 --> 00:13:27,350
that every program that you can express

269
00:13:27,350 --> 00:13:30,709
in the in the language and the type

270
00:13:30,709 --> 00:13:33,380
system if it passes the type checker

271
00:13:33,380 --> 00:13:35,750
then it'll be a valid program you know

272
00:13:35,750 --> 00:13:40,130
it'll be valid at runtime and a lot of

273
00:13:40,130 --> 00:13:41,810
research goes into assuring that this

274
00:13:41,810 --> 00:13:44,470
this hold so whenever there's like a new

275
00:13:44,470 --> 00:13:47,779
new new type new type system developed

276
00:13:47,779 --> 00:13:50,060
that has different guarantees that will

277
00:13:50,060 --> 00:13:53,120
provide they go through great lengths to

278
00:13:53,120 --> 00:13:54,800
ensure that it's still sound because

279
00:13:54,800 --> 00:13:57,889
sound this means that at runtime those

280
00:13:57,889 --> 00:13:59,449
guarantees that it's supposed to make

281
00:13:59,449 --> 00:14:04,610
will hold but for typescript is a

282
00:14:04,610 --> 00:14:08,720
different story someone actually a guy

283
00:14:08,720 --> 00:14:11,600
named a toy bow pulled out a theorem

284
00:14:11,600 --> 00:14:14,810
prover and went through typescripts

285
00:14:14,810 --> 00:14:16,880
language spect and showed that a part

286
00:14:16,880 --> 00:14:19,250
part of the rules were unsound so there

287
00:14:19,250 --> 00:14:21,199
were expressions you can express in

288
00:14:21,199 --> 00:14:23,870
typescript that will pass the type

289
00:14:23,870 --> 00:14:25,430
checker but if you run them at runtime

290
00:14:25,430 --> 00:14:27,709
you'll get like a type error because

291
00:14:27,709 --> 00:14:31,010
it's it's not actually about a valley

292
00:14:31,010 --> 00:14:35,480
expression and they have actually

293
00:14:35,480 --> 00:14:37,790
notices in their their documentation on

294
00:14:37,790 --> 00:14:42,010
you know why they have certain unsound

295
00:14:42,010 --> 00:14:44,779
expressions in their language and so the

296
00:14:44,779 --> 00:14:48,440
bug was a this issue was event of course

297
00:14:48,440 --> 00:14:52,310
it was smart they won't fix and this is

298
00:14:52,310 --> 00:14:55,550
my favorite won't fix gif I encourage

299
00:14:55,550 --> 00:14:59,389
you to post it on github issues whenever

300
00:14:59,389 --> 00:15:03,439
you have a wall fixtures let's just

301
00:15:03,439 --> 00:15:10,769
watch it a few more time

302
00:15:10,779 --> 00:15:17,660
so good so yeah so they basically said

303
00:15:17,660 --> 00:15:19,790
in order to keep the Thai system more

304
00:15:19,790 --> 00:15:23,779
lightweight they didn't want to add

305
00:15:23,779 --> 00:15:25,940
these these rules I would guarantee

306
00:15:25,940 --> 00:15:28,310
soundness but perhaps make it less

307
00:15:28,310 --> 00:15:32,120
intuitive for people trying to build

308
00:15:32,120 --> 00:15:34,760
JavaScript programs because we're used

309
00:15:34,760 --> 00:15:37,070
to a certain way that the language works

310
00:15:37,070 --> 00:15:40,220
being able to pass certain values to

311
00:15:40,220 --> 00:15:43,670
functions and adding soundness might

312
00:15:43,670 --> 00:15:46,279
make that less intuitive for the most

313
00:15:46,279 --> 00:15:48,290
JavaScript programmers so it was a

314
00:15:48,290 --> 00:15:51,140
trade-off that they had to make so like

315
00:15:51,140 --> 00:15:53,390
the hardcore type theorists might get

316
00:15:53,390 --> 00:15:57,950
angry but in the end it might be a net

317
00:15:57,950 --> 00:16:01,880
gain for the rest of the users but this

318
00:16:01,880 --> 00:16:05,110
is not so easy of a trade-off for

319
00:16:05,110 --> 00:16:07,370
languages where memory safety is a

320
00:16:07,370 --> 00:16:09,980
concern so in JavaScript you don't have

321
00:16:09,980 --> 00:16:13,670
that control to say like dig into memory

322
00:16:13,670 --> 00:16:16,370
and alter things but for languages like

323
00:16:16,370 --> 00:16:21,110
C and C++ an unsound type system would

324
00:16:21,110 --> 00:16:24,220
lead to you know things like heart bleed

325
00:16:24,220 --> 00:16:30,769
for example and with great control comes

326
00:16:30,769 --> 00:16:32,779
great responsibility and this is of

327
00:16:32,779 --> 00:16:39,500
course where I would mention a language

328
00:16:39,500 --> 00:16:44,269
like rest which Niko here gave excellent

329
00:16:44,269 --> 00:16:46,190
presentation and then the videos

330
00:16:46,190 --> 00:16:47,930
available online where he goes through

331
00:16:47,930 --> 00:16:52,040
the ways that rest will guarantee memory

332
00:16:52,040 --> 00:16:55,430
safety and it's not only the shape of

333
00:16:55,430 --> 00:16:58,190
the values in rust case because there's

334
00:16:58,190 --> 00:17:00,220
like concurrent processes happening in

335
00:17:00,220 --> 00:17:02,959
different ways to dig into the memory so

336
00:17:02,959 --> 00:17:06,040
the type system will actually give you

337
00:17:06,040 --> 00:17:09,530
types that you can annotate variables

338
00:17:09,530 --> 00:17:13,240
with that will track like ownership and

339
00:17:13,240 --> 00:17:15,530
and different things that will help you

340
00:17:15,530 --> 00:17:18,949
protect against like a mutation of

341
00:17:18,949 --> 00:17:23,660
shared data so with something like rust

342
00:17:23,660 --> 00:17:24,100
you

343
00:17:24,100 --> 00:17:27,730
the you wouldn't be vulnerable to these

344
00:17:27,730 --> 00:17:31,809
classes of memory memory vulnerabilities

345
00:17:31,809 --> 00:17:36,669
where you can basically violate memory

346
00:17:36,669 --> 00:17:39,039
safety so type type safety is important

347
00:17:39,039 --> 00:17:42,280
aspect and soundness is also an

348
00:17:42,280 --> 00:17:43,270
important aspect when you want to

349
00:17:43,270 --> 00:17:48,400
guaranteed memory safety and a part of

350
00:17:48,400 --> 00:17:50,770
how r us does that is like I said it

351
00:17:50,770 --> 00:17:53,429
makes everything explicit so explicit

352
00:17:53,429 --> 00:17:55,390
annotations on variables when you do

353
00:17:55,390 --> 00:17:57,490
when you need when they need mutation

354
00:17:57,490 --> 00:18:00,130
and a lot of that you can do in C and

355
00:18:00,130 --> 00:18:02,830
C++ and there is some slow down when you

356
00:18:02,830 --> 00:18:06,640
basically do things the right way but

357
00:18:06,640 --> 00:18:08,650
the the benefit of making things

358
00:18:08,650 --> 00:18:11,770
explicit is you'll save the headaches

359
00:18:11,770 --> 00:18:14,049
later on it you'll eliminate these

360
00:18:14,049 --> 00:18:21,340
classes of bugs so being explicit really

361
00:18:21,340 --> 00:18:24,360
is worth the trade-off i would say

362
00:18:24,360 --> 00:18:26,740
because you you're going to get that

363
00:18:26,740 --> 00:18:31,090
performance penalty if you if you use

364
00:18:31,090 --> 00:18:32,799
language like c and c++ and you do it

365
00:18:32,799 --> 00:18:35,020
the right way anyway so something like

366
00:18:35,020 --> 00:18:38,049
rest at least has a coherent sound type

367
00:18:38,049 --> 00:18:41,110
system that would guarantee that those

368
00:18:41,110 --> 00:18:42,460
memory safety bugs won't creep up

369
00:18:42,460 --> 00:18:45,250
because C and C++ have tools to prevent

370
00:18:45,250 --> 00:18:47,230
that but they're sort of added on later

371
00:18:47,230 --> 00:18:50,740
and it's not a coherent sound type

372
00:18:50,740 --> 00:18:54,370
system so i would say being explicit is

373
00:18:54,370 --> 00:18:59,380
the the key here for for a rest and in

374
00:18:59,380 --> 00:19:04,900
general my tips would be thus to use the

375
00:19:04,900 --> 00:19:06,820
computers for what they do best like

376
00:19:06,820 --> 00:19:09,490
we're not perhaps we're not best suited

377
00:19:09,490 --> 00:19:13,390
for digging into these really like the

378
00:19:13,390 --> 00:19:15,309
unhappy past sort of grow exponentially

379
00:19:15,309 --> 00:19:18,429
because there's so many unknowns that we

380
00:19:18,429 --> 00:19:20,710
don't see and it's hard for us to see

381
00:19:20,710 --> 00:19:22,919
them so they can if we have like a

382
00:19:22,919 --> 00:19:25,630
system that is enforced by the computer

383
00:19:25,630 --> 00:19:29,350
like a strong type system that we know

384
00:19:29,350 --> 00:19:32,049
it's sound it won't allow us to sort of

385
00:19:32,049 --> 00:19:34,570
create these these errors that were sort

386
00:19:34,570 --> 00:19:36,220
of incapable of perceiving ourselves

387
00:19:36,220 --> 00:19:37,600
then

388
00:19:37,600 --> 00:19:38,740
we should do that we should use

389
00:19:38,740 --> 00:19:40,570
computers as much as possible for those

390
00:19:40,570 --> 00:19:44,500
tasks because otherwise you know what

391
00:19:44,500 --> 00:19:48,669
we've seen what happens and also more

392
00:19:48,669 --> 00:19:51,580
explicitness now though it might be more

393
00:19:51,580 --> 00:19:54,220
complexity upfront for you if you if

394
00:19:54,220 --> 00:19:56,080
you're more explicit and you'll you'll

395
00:19:56,080 --> 00:19:58,120
save your sanity later on so when

