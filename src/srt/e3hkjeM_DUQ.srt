1
00:00:13,919 --> 00:00:17,609

so we're gonna learn how to draw a horse

2
00:00:17,609 --> 00:00:21,550
it's real easy okay check this out for

3
00:00:21,550 --> 00:00:24,869
five steps step one draw two circles

4
00:00:24,869 --> 00:00:29,619
step to draw the legs it's really coming

5
00:00:29,619 --> 00:00:31,630
together now here see check draw the

6
00:00:31,630 --> 00:00:35,350
face draw the hair add some small

7
00:00:35,350 --> 00:00:42,900
details and you got a beautiful horse so

8
00:00:42,900 --> 00:00:45,219
something's a little bit missing here

9
00:00:45,219 --> 00:00:48,430
between step 4 and 5 and a lot of

10
00:00:48,430 --> 00:00:50,859
technology is like this when it comes to

11
00:00:50,859 --> 00:00:52,690
read me files or instructions or

12
00:00:52,690 --> 00:00:56,010
technical blogs that kind of paint this

13
00:00:56,010 --> 00:00:58,480
really rosy picture about how easy

14
00:00:58,480 --> 00:01:00,519
something is especially you know

15
00:01:00,519 --> 00:01:02,320
integrating this technology with this

16
00:01:02,320 --> 00:01:03,789
technology I'm going to give you the

17
00:01:03,789 --> 00:01:07,360
step-by-step guide I call things like

18
00:01:07,360 --> 00:01:11,170
this the the troll read me when they

19
00:01:11,170 --> 00:01:14,640
when they leave out the really nasty

20
00:01:14,640 --> 00:01:16,959
nitty-gritty details of stuff that

21
00:01:16,959 --> 00:01:19,390
you're going to get stuck on it give you

22
00:01:19,390 --> 00:01:20,830
some little getting started guide like

23
00:01:20,830 --> 00:01:23,830
this you know just NPM install this and

24
00:01:23,830 --> 00:01:26,319
then super easy and that's it and and

25
00:01:26,319 --> 00:01:28,090
then you're like right out of the gate

26
00:01:28,090 --> 00:01:31,000
you just like get smacked down and you

27
00:01:31,000 --> 00:01:34,090
run into some problem and you go google

28
00:01:34,090 --> 00:01:36,009
it you go google the error you find out

29
00:01:36,009 --> 00:01:37,509
there's like thousands of other people

30
00:01:37,509 --> 00:01:39,759
who have had this problem and there's

31
00:01:39,759 --> 00:01:42,160
you know 500 different possible

32
00:01:42,160 --> 00:01:44,020
solutions for the problem and so your

33
00:01:44,020 --> 00:01:46,360
next step is like great I'm already

34
00:01:46,360 --> 00:01:48,220
going off on this forked paths like

35
00:01:48,220 --> 00:01:51,220
which which road do i choose and it's

36
00:01:51,220 --> 00:01:53,349
really frustrating and so I work for

37
00:01:53,349 --> 00:01:55,509
Walmart labs and we kept running into

38
00:01:55,509 --> 00:01:58,360
stuff like this with regards to our

39
00:01:58,360 --> 00:02:01,270
end-to-end testing strategy when it when

40
00:02:01,270 --> 00:02:02,890
it came to automation and it it really

41
00:02:02,890 --> 00:02:04,569
sucked so I wanted to share some of our

42
00:02:04,569 --> 00:02:08,110
experiences there so that's me and my

43
00:02:08,110 --> 00:02:12,550
boy up there and me not him work for

44
00:02:12,550 --> 00:02:15,849
Walmart labs and when we create common

45
00:02:15,849 --> 00:02:17,890
infrastructure on my team where the core

46
00:02:17,890 --> 00:02:20,230
web team we create building automation

47
00:02:20,230 --> 00:02:23,680
tools that other teams use to build out

48
00:02:23,680 --> 00:02:25,840
everything about ww1

49
00:02:25,840 --> 00:02:29,980
marcom that that everybody uses so we we

50
00:02:29,980 --> 00:02:32,019
we try to support them with with common

51
00:02:32,019 --> 00:02:33,670
tools and infrastructure especially with

52
00:02:33,670 --> 00:02:37,390
regards to automation to make it so they

53
00:02:37,390 --> 00:02:38,950
can spend more time doing fun stuff in

54
00:02:38,950 --> 00:02:41,410
less time doing tedious stuff so we

55
00:02:41,410 --> 00:02:44,230
follow the test pyramid which you may

56
00:02:44,230 --> 00:02:47,379
have seen before it prescribes that you

57
00:02:47,379 --> 00:02:49,239
have a whole lot of unit tests and that

58
00:02:49,239 --> 00:02:50,950
you rely on unit tests as your bread and

59
00:02:50,950 --> 00:02:54,549
butter for for for quality control unit

60
00:02:54,549 --> 00:02:56,349
tests are fast they're reliable they're

61
00:02:56,349 --> 00:02:58,750
predictable they hopefully our are

62
00:02:58,750 --> 00:03:00,910
pretty consistent when they pass and

63
00:03:00,910 --> 00:03:04,569
fail and very easy to run on a dev

64
00:03:04,569 --> 00:03:07,450
machine see I machine service tests

65
00:03:07,450 --> 00:03:08,230
we're not really going to talk about

66
00:03:08,230 --> 00:03:11,170
today but just testing an HTTP endpoint

67
00:03:11,170 --> 00:03:12,790
on a server to make sure that it's it's

68
00:03:12,790 --> 00:03:14,519
giving you the response you expect and

69
00:03:14,519 --> 00:03:17,379
then at the tip of the pyramid just like

70
00:03:17,379 --> 00:03:18,940
the sweets on your food pyramid in

71
00:03:18,940 --> 00:03:22,329
moderation but still have them there are

72
00:03:22,329 --> 00:03:24,459
the are the UI tests or the end-to-end

73
00:03:24,459 --> 00:03:28,060
tests and these are generally at the tip

74
00:03:28,060 --> 00:03:29,739
of the pyramid because they're generally

75
00:03:29,739 --> 00:03:32,769
thought to be slower they're more hard

76
00:03:32,769 --> 00:03:35,500
to maintain their brittle but for a good

77
00:03:35,500 --> 00:03:37,510
testing strategy especially with with a

78
00:03:37,510 --> 00:03:40,180
site as complex as something like

79
00:03:40,180 --> 00:03:42,280
Walmart it's really necessary because

80
00:03:42,280 --> 00:03:43,989
when you have a bunch of unit tests that

81
00:03:43,989 --> 00:03:46,359
are written by separate teams there's no

82
00:03:46,359 --> 00:03:47,590
matter how good you are there's always

83
00:03:47,590 --> 00:03:49,540
going to be gaps between this test in

84
00:03:49,540 --> 00:03:51,040
this test especially if it's going

85
00:03:51,040 --> 00:03:53,069
across two different functional areas

86
00:03:53,069 --> 00:03:54,819
there's always going to be missed

87
00:03:54,819 --> 00:03:56,980
assumptions between between teams

88
00:03:56,980 --> 00:03:58,510
between developers between different

89
00:03:58,510 --> 00:04:01,000
parts of your stack and end-to-end tests

90
00:04:01,000 --> 00:04:02,590
are a good way of just making sure that

91
00:04:02,590 --> 00:04:04,510
none of those gaps wind up being a

92
00:04:04,510 --> 00:04:10,299
showstopper so n 10 tests should also be

93
00:04:10,299 --> 00:04:12,160
cross-browser so everybody should

94
00:04:12,160 --> 00:04:13,900
understand what browsers they have to

95
00:04:13,900 --> 00:04:15,190
support and which ones they don't have

96
00:04:15,190 --> 00:04:17,349
to support because there's a lot of

97
00:04:17,349 --> 00:04:18,729
browsers that we're really hoping are

98
00:04:18,729 --> 00:04:23,110
going to die off IE 8 and friends as

99
00:04:23,110 --> 00:04:25,060
soon as possible but there's still a

100
00:04:25,060 --> 00:04:27,190
depressingly large number of customers

101
00:04:27,190 --> 00:04:29,650
using these old browsers and we know

102
00:04:29,650 --> 00:04:31,300
that if we stop supporting them we would

103
00:04:31,300 --> 00:04:33,789
lose X number of dollars so it's a huge

104
00:04:33,789 --> 00:04:35,380
pain to test them all it's a huge waste

105
00:04:35,380 --> 00:04:37,450
of human time to run through the same

106
00:04:37,450 --> 00:04:40,060
scenarios over and over

107
00:04:40,060 --> 00:04:42,600
on all these different browsers and

108
00:04:42,600 --> 00:04:46,000
because it's a pain to test it means you

109
00:04:46,000 --> 00:04:47,950
all know what I'm talking about like did

110
00:04:47,950 --> 00:04:51,580
you test it on ie oh yeah I did last

111
00:04:51,580 --> 00:04:56,110
last month maybe and QA people you know

112
00:04:56,110 --> 00:04:57,880
are the same way right there they're not

113
00:04:57,880 --> 00:04:59,230
they're not physically going to have

114
00:04:59,230 --> 00:05:00,790
enough time in the day to run all their

115
00:05:00,790 --> 00:05:02,710
test cases continuously in all the

116
00:05:02,710 --> 00:05:04,180
browsers we have to support so things

117
00:05:04,180 --> 00:05:05,770
are going to slip there's going to be

118
00:05:05,770 --> 00:05:07,300
times when maybe it's a week or two

119
00:05:07,300 --> 00:05:10,990
weeks since anybody actually fired up

120
00:05:10,990 --> 00:05:13,630
ie8 and ran through all of the scenarios

121
00:05:13,630 --> 00:05:16,110
to make sure everything still works and

122
00:05:16,110 --> 00:05:18,970
because of that if somebody finds a bug

123
00:05:18,970 --> 00:05:21,520
in ie8 the first question we often ask

124
00:05:21,520 --> 00:05:23,050
is well when was the last time it worked

125
00:05:23,050 --> 00:05:26,500
in ie8 well I don't know I tested it I

126
00:05:26,500 --> 00:05:29,290
think three weeks ago perfect let's look

127
00:05:29,290 --> 00:05:30,580
at all the commits in the last three

128
00:05:30,580 --> 00:05:32,710
weeks and figure out which one caused a

129
00:05:32,710 --> 00:05:34,540
regression in a legacy browser that

130
00:05:34,540 --> 00:05:39,250
sucks nobody likes doing that but what

131
00:05:39,250 --> 00:05:41,350
can we do about it right so automation

132
00:05:41,350 --> 00:05:43,240
everybody says that's it I'm going to

133
00:05:43,240 --> 00:05:44,680
sit down I'm going to figure out how to

134
00:05:44,680 --> 00:05:46,600
automate all this stuff so I don't have

135
00:05:46,600 --> 00:05:50,110
to do it by hand anymore awesome how

136
00:05:50,110 --> 00:05:52,000
many people have said have said that

137
00:05:52,000 --> 00:05:55,240
before that's it okay yeah see you know

138
00:05:55,240 --> 00:05:59,200
what I'm talking about so pretty much

139
00:05:59,200 --> 00:06:01,510
every cross browser end-to-end testing

140
00:06:01,510 --> 00:06:03,490
solution relies on selenium at its core

141
00:06:03,490 --> 00:06:07,840
so this is a great tool open source it

142
00:06:07,840 --> 00:06:10,210
has drivers for every major browser that

143
00:06:10,210 --> 00:06:11,979
give you deep hooks into the browser to

144
00:06:11,979 --> 00:06:13,960
control it with with puppet strings to

145
00:06:13,960 --> 00:06:16,960
tell it you know to behave and do any

146
00:06:16,960 --> 00:06:18,370
kind of user interaction that a user

147
00:06:18,370 --> 00:06:19,840
would do click this fill in this form

148
00:06:19,840 --> 00:06:24,100
navigate here it has an API that's over

149
00:06:24,100 --> 00:06:28,120
HTTP HTTP it's not the most friendly API

150
00:06:28,120 --> 00:06:29,530
to work with so there's always a lot of

151
00:06:29,530 --> 00:06:31,270
rappers on top of selenium that people

152
00:06:31,270 --> 00:06:35,560
use and and there's a lot of companion

153
00:06:35,560 --> 00:06:36,700
tools that go along with it a lot of

154
00:06:36,700 --> 00:06:39,010
services like sauce labs this is a

155
00:06:39,010 --> 00:06:42,910
diagram of sauce labs which we use to

156
00:06:42,910 --> 00:06:45,160
outsource the tedious task of

157
00:06:45,160 --> 00:06:47,280
maintaining a farm of different browsers

158
00:06:47,280 --> 00:06:49,599
there's browser stack there's there's a

159
00:06:49,599 --> 00:06:51,490
whole bunch of other ones but there's a

160
00:06:51,490 --> 00:06:52,990
whole ecosystem around this because

161
00:06:52,990 --> 00:06:54,009
people really

162
00:06:54,009 --> 00:06:56,830
this kind of stuff to work but when you

163
00:06:56,830 --> 00:06:57,969
start putting all these pieces together

164
00:06:57,969 --> 00:07:00,389
companion libraries for selenium

165
00:07:00,389 --> 00:07:02,619
external services to manage your

166
00:07:02,619 --> 00:07:06,189
browsers as a service it starts to look

167
00:07:06,189 --> 00:07:08,020
like this it's a big rube goldberg

168
00:07:08,020 --> 00:07:11,559
machine there's so many points of

169
00:07:11,559 --> 00:07:12,969
failure that it's hard to keep track of

170
00:07:12,969 --> 00:07:17,919
them all and guaranteed anybody who

171
00:07:17,919 --> 00:07:20,830
starts down this path sooner or later is

172
00:07:20,830 --> 00:07:25,749
going to run into test flake so when we

173
00:07:25,749 --> 00:07:27,399
talk about test flake we're not talking

174
00:07:27,399 --> 00:07:29,349
about the tests that developers

175
00:07:29,349 --> 00:07:31,330
themselves are writing being flaky we're

176
00:07:31,330 --> 00:07:33,099
not talking about bad application code

177
00:07:33,099 --> 00:07:35,349
we're talking about something in the

178
00:07:35,349 --> 00:07:38,379
system in this big complicated system

179
00:07:38,379 --> 00:07:41,069
failing for really no good reason at all

180
00:07:41,069 --> 00:07:43,960
creating false positive results sending

181
00:07:43,960 --> 00:07:45,789
developers on a wild-goose chase when

182
00:07:45,789 --> 00:07:49,990
something fails only to realize five

183
00:07:49,990 --> 00:07:51,689
minutes later this thing that I've been

184
00:07:51,689 --> 00:07:54,849
chasing is now passing unexplained you

185
00:07:54,849 --> 00:07:56,830
know for no good reason and I just

186
00:07:56,830 --> 00:08:00,819
wasted all that time so see also waste

187
00:08:00,819 --> 00:08:02,139
everyone's time with this one weird

188
00:08:02,139 --> 00:08:04,629
trick developers ate this so anybody

189
00:08:04,629 --> 00:08:07,389
who's tried to implement an antenna

190
00:08:07,389 --> 00:08:09,639
testing solution has probably had the

191
00:08:09,639 --> 00:08:11,529
best of intentions but has wound up

192
00:08:11,529 --> 00:08:13,479
frustrating a whole lot of people if

193
00:08:13,479 --> 00:08:17,289
they try to get them to use it just a

194
00:08:17,289 --> 00:08:18,759
quick plug for a really awesome podcast

195
00:08:18,759 --> 00:08:20,709
if anybody hasn't checked out Rebecca

196
00:08:20,709 --> 00:08:23,289
Murphy's TTM podcasts definitely check

197
00:08:23,289 --> 00:08:24,969
it out it's all about front-end ops and

198
00:08:24,969 --> 00:08:27,999
this emerging discipline I was on I

199
00:08:27,999 --> 00:08:30,849
think episode 4 talking about some of

200
00:08:30,849 --> 00:08:33,550
the same stuff in more detail but the

201
00:08:33,550 --> 00:08:35,409
the really cool thing to hear was was

202
00:08:35,409 --> 00:08:36,849
everybody else on the interviews before

203
00:08:36,849 --> 00:08:38,889
me she asked them if they if they were

204
00:08:38,889 --> 00:08:40,329
doing end-to-end testing and they said

205
00:08:40,329 --> 00:08:41,919
we really want to but it's just not

206
00:08:41,919 --> 00:08:44,589
really worth the time because it's just

207
00:08:44,589 --> 00:08:48,970
so flaky it's so frustrating so you know

208
00:08:48,970 --> 00:08:50,740
this this this was really actually good

209
00:08:50,740 --> 00:08:52,389
to hear because it lends a lot of

210
00:08:52,389 --> 00:08:53,709
credibility to this fight that we're

211
00:08:53,709 --> 00:08:56,769
trying to fight even on Google's own

212
00:08:56,769 --> 00:08:59,410
google testing blog there was this great

213
00:08:59,410 --> 00:09:01,300
article called just say no to more

214
00:09:01,300 --> 00:09:02,949
end-to-end tests like I thought this was

215
00:09:02,949 --> 00:09:05,050
click bait because it was such a you

216
00:09:05,050 --> 00:09:07,870
know like bold title here but like

217
00:09:07,870 --> 00:09:09,839
they made some really really good points

218
00:09:09,839 --> 00:09:12,220
but my favorite line here was that they

219
00:09:12,220 --> 00:09:15,460
it compared end-to-end testing to going

220
00:09:15,460 --> 00:09:16,600
to a movie with your friends that you

221
00:09:16,600 --> 00:09:18,490
all wanted to see and then you all

222
00:09:18,490 --> 00:09:21,160
regretted watching afterwards like a

223
00:09:21,160 --> 00:09:23,880
good idea that just failed in practice

224
00:09:23,880 --> 00:09:25,779
but they talked about a lot of good

225
00:09:25,779 --> 00:09:27,279
points in here they talk about n timed

226
00:09:27,279 --> 00:09:30,010
tests being slow unreliable flaky and

227
00:09:30,010 --> 00:09:32,410
that they don't isolate failures so at

228
00:09:32,410 --> 00:09:33,520
the end of the day while they have the

229
00:09:33,520 --> 00:09:35,410
best intentions they end up just wasting

230
00:09:35,410 --> 00:09:39,700
more time than they save so we said all

231
00:09:39,700 --> 00:09:41,410
right we're going that we're going to

232
00:09:41,410 --> 00:09:42,730
roll up our sleeves and we're going to

233
00:09:42,730 --> 00:09:45,250
really fix this right we have what we

234
00:09:45,250 --> 00:09:46,779
have a team of people we asked for some

235
00:09:46,779 --> 00:09:49,060
time to like focus on this for a few

236
00:09:49,060 --> 00:09:52,029
months so we got this right so we

237
00:09:52,029 --> 00:09:53,500
decided we're going to create an

238
00:09:53,500 --> 00:09:55,810
end-to-end testing solution that's going

239
00:09:55,810 --> 00:09:59,339
to work for dev and QA alike so so

240
00:09:59,339 --> 00:10:01,150
non-technical people should be able to

241
00:10:01,150 --> 00:10:02,410
write tests there shouldn't be a high

242
00:10:02,410 --> 00:10:05,680
barrier to entry should be fast enough

243
00:10:05,680 --> 00:10:10,000
to run as part of our CI system and no

244
00:10:10,000 --> 00:10:13,029
flake absolutely not acceptable we want

245
00:10:13,029 --> 00:10:14,170
to win the hearts and minds of

246
00:10:14,170 --> 00:10:16,540
developers and QA and we're going to

247
00:10:16,540 --> 00:10:20,529
have no tolerance for false positives so

248
00:10:20,529 --> 00:10:23,800
for the first goal of of having tests

249
00:10:23,800 --> 00:10:25,390
that are simple enough to write for for

250
00:10:25,390 --> 00:10:28,330
QA as well we picked a companion library

251
00:10:28,330 --> 00:10:30,850
a nodejs based adapter called Night

252
00:10:30,850 --> 00:10:32,589
Watch it's one of the more popular ones

253
00:10:32,589 --> 00:10:33,970
there's a lot of them that are really

254
00:10:33,970 --> 00:10:36,160
good that talked to selenium through a

255
00:10:36,160 --> 00:10:38,980
node API to make the the API a little

256
00:10:38,980 --> 00:10:41,260
bit more palatable to work with a Night

257
00:10:41,260 --> 00:10:43,959
Watch is awesome and we made some really

258
00:10:43,959 --> 00:10:45,550
great progress with it right off the bat

259
00:10:45,550 --> 00:10:47,470
we were taming these browsers we got a

260
00:10:47,470 --> 00:10:49,570
sauce labs subscription we had a huge

261
00:10:49,570 --> 00:10:51,010
collaborative test writing effort

262
00:10:51,010 --> 00:10:53,890
between developers and QA and we were

263
00:10:53,890 --> 00:10:56,170
rocking we were getting just every green

264
00:10:56,170 --> 00:10:57,670
checkmark we saw we were thinking of

265
00:10:57,670 --> 00:10:59,560
we're saving this many hours of manual

266
00:10:59,560 --> 00:11:02,650
time and and QA is loving us and

267
00:11:02,650 --> 00:11:04,060
developers are going to love us because

268
00:11:04,060 --> 00:11:05,230
we're going to catch these regressions

269
00:11:05,230 --> 00:11:08,260
sooner rather than later so we started

270
00:11:08,260 --> 00:11:09,520
running these tests just you know

271
00:11:09,520 --> 00:11:11,920
hundreds of them every hour and all the

272
00:11:11,920 --> 00:11:14,110
time and increasing our browser matrix

273
00:11:14,110 --> 00:11:15,550
more and more going back you know

274
00:11:15,550 --> 00:11:19,390
testing IE 8 9 10 11 Firefox last couple

275
00:11:19,390 --> 00:11:21,000
versions chrome

276
00:11:21,000 --> 00:11:24,090
are a mobile emulators everything was

277
00:11:24,090 --> 00:11:26,520
golden and every now and then we'd see

278
00:11:26,520 --> 00:11:28,680
something like this would be like Oh a

279
00:11:28,680 --> 00:11:31,260
test failure great our tool caught

280
00:11:31,260 --> 00:11:33,180
something in the wild let's go let's go

281
00:11:33,180 --> 00:11:36,020
fix it and then five minutes later Oh

282
00:11:36,020 --> 00:11:39,600
past that time okay well just a little

283
00:11:39,600 --> 00:11:40,980
glitch nothing to worry about and then

284
00:11:40,980 --> 00:11:45,410
like 10 minutes later oh that one failed

285
00:11:45,410 --> 00:11:48,000
okay nothing to worry about you know

286
00:11:48,000 --> 00:11:51,990
we'll just kind of like sweep that under

287
00:11:51,990 --> 00:11:56,430
the oh okay and then oh no why is it

288
00:11:56,430 --> 00:12:00,120
passing now and so we we got really

289
00:12:00,120 --> 00:12:02,190
really quickly like the old 8020 rule

290
00:12:02,190 --> 00:12:04,650
right like we got really close to this

291
00:12:04,650 --> 00:12:06,330
eighty percent mark of being super happy

292
00:12:06,330 --> 00:12:08,850
and then we were just like ah like we

293
00:12:08,850 --> 00:12:10,470
were so close to feeling like this was a

294
00:12:10,470 --> 00:12:15,000
complete solution and in the end we have

295
00:12:15,000 --> 00:12:16,500
the same problems with flakiness as

296
00:12:16,500 --> 00:12:18,660
everybody else despite trying to design

297
00:12:18,660 --> 00:12:21,300
with overcoming these very specific

298
00:12:21,300 --> 00:12:23,430
flaky things from the beginning we still

299
00:12:23,430 --> 00:12:26,550
got burned by this so let's look we

300
00:12:26,550 --> 00:12:27,960
thought okay we need to change our

301
00:12:27,960 --> 00:12:30,000
mindset here we've been we've been we

302
00:12:30,000 --> 00:12:32,280
need we have this realization like whoa

303
00:12:32,280 --> 00:12:33,839
we okay we've been trying to think of

304
00:12:33,839 --> 00:12:37,500
end-to-end tests like unit tests like a

305
00:12:37,500 --> 00:12:39,180
predictable environment that we can

306
00:12:39,180 --> 00:12:41,339
control but but in reality they're

307
00:12:41,339 --> 00:12:43,920
they're nothing like that at all so we

308
00:12:43,920 --> 00:12:45,500
came up with this little metaphor of

309
00:12:45,500 --> 00:12:49,950
soup a can of soup is like a test result

310
00:12:49,950 --> 00:12:52,410
when you're hungry okay i'm hungry i

311
00:12:52,410 --> 00:12:54,900
want to have some soup for lunch i want

312
00:12:54,900 --> 00:12:56,490
to be able to test my code i want to run

313
00:12:56,490 --> 00:12:58,710
this test and I want to get a test

314
00:12:58,710 --> 00:13:02,010
result back a binary pass/fail which is

315
00:13:02,010 --> 00:13:03,930
which is like reaching and getting a can

316
00:13:03,930 --> 00:13:07,350
of soup so stick with me here with a

317
00:13:07,350 --> 00:13:09,870
unit tests it's like going and grabbing

318
00:13:09,870 --> 00:13:11,339
a can of soup from your own kitchen

319
00:13:11,339 --> 00:13:14,250
cupboard you're controlling the safety

320
00:13:14,250 --> 00:13:15,900
of your own house it's very safe it's

321
00:13:15,900 --> 00:13:17,580
quick and easy it's right there you just

322
00:13:17,580 --> 00:13:19,230
have to reach right there and grab it

323
00:13:19,230 --> 00:13:21,720
and so that's why everybody loves unit

324
00:13:21,720 --> 00:13:22,890
tests they're predictable they're easy

325
00:13:22,890 --> 00:13:28,560
end to end tests are different so n 10

326
00:13:28,560 --> 00:13:30,150
tests you want your can of soup first

327
00:13:30,150 --> 00:13:33,030
you have to get in your car next you

328
00:13:33,030 --> 00:13:33,990
have to drive through a zombie

329
00:13:33,990 --> 00:13:34,830
apocalypse

330
00:13:34,830 --> 00:13:37,050
on the way to the grocery store who

331
00:13:37,050 --> 00:13:39,240
knows what's going to happen when you

332
00:13:39,240 --> 00:13:40,740
get to the grocery store a store might

333
00:13:40,740 --> 00:13:43,680
be overrun by zombies and once you

334
00:13:43,680 --> 00:13:45,060
actually grab your can of soup you might

335
00:13:45,060 --> 00:13:46,800
have to like fight to the death on your

336
00:13:46,800 --> 00:13:49,920
on your way out to try to get home so in

337
00:13:49,920 --> 00:13:51,900
this metaphor the the lurking zombies

338
00:13:51,900 --> 00:13:54,090
are all of these things that we have

339
00:13:54,090 --> 00:13:55,680
encountered as being sources of test

340
00:13:55,680 --> 00:13:59,520
flake there's bugs in the web drivers

341
00:13:59,520 --> 00:14:01,050
themselves this this goes back to that

342
00:14:01,050 --> 00:14:03,120
troll read me thing it's like none of

343
00:14:03,120 --> 00:14:04,260
the none of the read Mees for these

344
00:14:04,260 --> 00:14:06,360
things talk about all of these common

345
00:14:06,360 --> 00:14:07,920
sources of flake that like everybody

346
00:14:07,920 --> 00:14:10,680
quickly discovers the web drivers

347
00:14:10,680 --> 00:14:12,660
themselves have bugs ie driver it's like

348
00:14:12,660 --> 00:14:15,210
five percent of the time when you tell

349
00:14:15,210 --> 00:14:17,520
selenium to click on a button it says

350
00:14:17,520 --> 00:14:19,590
that it did it but it didn't really

351
00:14:19,590 --> 00:14:24,660
click it oh well flaky network so like I

352
00:14:24,660 --> 00:14:28,080
said everything runs over HTTP when

353
00:14:28,080 --> 00:14:29,460
you're set when you're doing hundreds

354
00:14:29,460 --> 00:14:31,500
and thousands of tests per day and you

355
00:14:31,500 --> 00:14:33,360
have these really chatty selenium

356
00:14:33,360 --> 00:14:35,400
clients talking to these remote servers

357
00:14:35,400 --> 00:14:37,620
across different networks and data

358
00:14:37,620 --> 00:14:39,810
centers inevitably you're going to have

359
00:14:39,810 --> 00:14:41,660
some some packet loss here and there and

360
00:14:41,660 --> 00:14:43,920
just one little drop to packet here and

361
00:14:43,920 --> 00:14:45,870
there can just make a test blow up or

362
00:14:45,870 --> 00:14:47,730
timeout and there's nothing you can do

363
00:14:47,730 --> 00:14:50,340
about it and then sometimes the services

364
00:14:50,340 --> 00:14:52,560
themselves might have bugs or outages or

365
00:14:52,560 --> 00:14:54,630
you know a vm just fails to spin up and

366
00:14:54,630 --> 00:14:59,820
a test fails and we we tried to you know

367
00:14:59,820 --> 00:15:01,230
treat these things like a whack-a-mole

368
00:15:01,230 --> 00:15:02,940
problem where we just deal with each one

369
00:15:02,940 --> 00:15:04,680
at a time but even months into this

370
00:15:04,680 --> 00:15:06,900
project we were still hitting new

371
00:15:06,900 --> 00:15:08,460
problems that we had never seen before

372
00:15:08,460 --> 00:15:11,010
and we you know some of these problems

373
00:15:11,010 --> 00:15:12,690
were super obscure we would google them

374
00:15:12,690 --> 00:15:15,240
and we'd find you know one person with a

375
00:15:15,240 --> 00:15:18,600
post you know from 2006 with the same

376
00:15:18,600 --> 00:15:20,480
problem and then no response were like

377
00:15:20,480 --> 00:15:25,540
like that XKCD comic what did you see

378
00:15:25,550 --> 00:15:27,990
but we really quickly realized this is a

379
00:15:27,990 --> 00:15:30,330
losing battle so there's going to be new

380
00:15:30,330 --> 00:15:32,250
problems every day we can't possibly fix

381
00:15:32,250 --> 00:15:35,130
them all but what do we do did we just

382
00:15:35,130 --> 00:15:39,450
give up we had this this moment where

383
00:15:39,450 --> 00:15:43,200
you said what if what if we could just

384
00:15:43,200 --> 00:15:46,140
make all of these flaky tests not flaky

385
00:15:46,140 --> 00:15:48,570
anymore without actually fixing the

386
00:15:48,570 --> 00:15:51,170
dividual problems this was a very like

387
00:15:51,170 --> 00:15:54,450
Morpheus moment here how can we make the

388
00:15:54,450 --> 00:15:56,520
tests not flaky without actually fixing

389
00:15:56,520 --> 00:15:59,580
anything so we had to go back and think

390
00:15:59,580 --> 00:16:03,870
about some more geeky stuff here so from

391
00:16:03,870 --> 00:16:05,220
the point of view of the consumers of

392
00:16:05,220 --> 00:16:07,080
our tool the developers who are going to

393
00:16:07,080 --> 00:16:08,610
be running these tests and the QA people

394
00:16:08,610 --> 00:16:10,500
who are going to be writing these tests

395
00:16:10,500 --> 00:16:14,550
the notion of a pass/fail or a can of

396
00:16:14,550 --> 00:16:18,630
soup in this metaphor is an axiom in in

397
00:16:18,630 --> 00:16:20,790
a mathematical proof it's a premise or a

398
00:16:20,790 --> 00:16:22,920
starting point of reasoning a premise so

399
00:16:22,920 --> 00:16:24,600
evident as to be accepted as true

400
00:16:24,600 --> 00:16:27,270
without controversy if we broke that

401
00:16:27,270 --> 00:16:30,420
axiom we've lost everybody if nobody

402
00:16:30,420 --> 00:16:32,520
trusts our tool to be accurate they're

403
00:16:32,520 --> 00:16:33,780
not going to use it they're not going to

404
00:16:33,780 --> 00:16:35,370
pay attention to it when it breaks and

405
00:16:35,370 --> 00:16:39,870
so we had to make it so that this axiom

406
00:16:39,870 --> 00:16:43,350
was true no matter what and making it

407
00:16:43,350 --> 00:16:45,150
true was actually more important than

408
00:16:45,150 --> 00:16:48,360
how we made it true this is where things

409
00:16:48,360 --> 00:16:52,830
get a little bit scary we did some dirty

410
00:16:52,830 --> 00:16:56,940
stuff really dirty stuff duct tape and

411
00:16:56,940 --> 00:16:58,860
rubber bands like don't look under the

412
00:16:58,860 --> 00:17:00,960
covers stuff to make some of these tests

413
00:17:00,960 --> 00:17:05,189
pass we figured out okay if an assertion

414
00:17:05,189 --> 00:17:08,430
fails the first time let's just try it

415
00:17:08,430 --> 00:17:09,810
again and see if it passes the second

416
00:17:09,810 --> 00:17:11,730
time and if it fails that time let's try

417
00:17:11,730 --> 00:17:14,070
it again like a few hundred milliseconds

418
00:17:14,070 --> 00:17:16,290
later and see if it passes that time we

419
00:17:16,290 --> 00:17:18,570
found out like hey that seems like a

420
00:17:18,570 --> 00:17:21,600
really ugly hack but that makes tests

421
00:17:21,600 --> 00:17:23,579
past fifty percent more at the time than

422
00:17:23,579 --> 00:17:27,270
it used to then we had these like IE

423
00:17:27,270 --> 00:17:29,610
driver bugs like oh that click thing

424
00:17:29,610 --> 00:17:31,280
that said it clicked but didn't work

425
00:17:31,280 --> 00:17:33,540
what if instead of using the buggy

426
00:17:33,540 --> 00:17:35,910
selenium driver for click events what if

427
00:17:35,910 --> 00:17:37,950
we actually inject jQuery into the page

428
00:17:37,950 --> 00:17:39,720
if it's not already there and actually

429
00:17:39,720 --> 00:17:42,960
do a jQuery click event and that

430
00:17:42,960 --> 00:17:44,430
smoothed over like another twenty five

431
00:17:44,430 --> 00:17:46,680
percent of the tests so we're kind of

432
00:17:46,680 --> 00:17:48,540
like addicted to this to this like new

433
00:17:48,540 --> 00:17:51,990
sort of like fighting dirty kind of kind

434
00:17:51,990 --> 00:17:55,670
of method for dealing with our zombies

435
00:17:55,670 --> 00:17:58,680
but we were we were making huge progress

436
00:17:58,680 --> 00:18:00,330
and we're starting to see fewer and

437
00:18:00,330 --> 00:18:02,070
fewer of those false positives

438
00:18:02,070 --> 00:18:03,540
so this is where we kind of had this

439
00:18:03,540 --> 00:18:06,720
major breakthrough where we were gaining

440
00:18:06,720 --> 00:18:10,350
momentum and we were smoothing over all

441
00:18:10,350 --> 00:18:12,330
these bumps in in kind of non optimal

442
00:18:12,330 --> 00:18:14,280
ways but the momentum that we were

443
00:18:14,280 --> 00:18:16,650
gaining was much more important than how

444
00:18:16,650 --> 00:18:19,050
what we had to do to gain that momentum

445
00:18:19,050 --> 00:18:20,760
and we started thinking of this in a

446
00:18:20,760 --> 00:18:23,040
different mindset that not all problems

447
00:18:23,040 --> 00:18:25,530
require precision solutions sometimes

448
00:18:25,530 --> 00:18:27,150
you just have to smooth over the speed

449
00:18:27,150 --> 00:18:30,750
bump to move on so we kind of ended up

450
00:18:30,750 --> 00:18:32,550
with something like this instead of

451
00:18:32,550 --> 00:18:34,080
getting in your car to get to the

452
00:18:34,080 --> 00:18:37,560
grocery store you get into this you get

453
00:18:37,560 --> 00:18:39,480
into this armored convoy this is this is

454
00:18:39,480 --> 00:18:41,840
this is the the tool that we built and

455
00:18:41,840 --> 00:18:44,220
it's going to get you to the grocery

456
00:18:44,220 --> 00:18:47,610
store one way or the other is it

457
00:18:47,610 --> 00:18:50,940
overkill yes no question about it is it

458
00:18:50,940 --> 00:18:53,280
is it computationally expensive all the

459
00:18:53,280 --> 00:18:55,340
stuff that we're doing no question

460
00:18:55,340 --> 00:18:57,510
making the test run slower with all

461
00:18:57,510 --> 00:19:00,750
these retries and things yeah not going

462
00:19:00,750 --> 00:19:03,210
to argue with that but does it fix the

463
00:19:03,210 --> 00:19:06,180
Reliant reliability problem hell yes it

464
00:19:06,180 --> 00:19:10,290
did anybody watch The Walking Dead so

465
00:19:10,290 --> 00:19:11,640
when they come to a zombie do they're

466
00:19:11,640 --> 00:19:14,940
like they say Oh Sam be yes I'm dead now

467
00:19:14,940 --> 00:19:17,190
no they drive like sometimes they just

468
00:19:17,190 --> 00:19:19,410
drive through herds of zombies and you

469
00:19:19,410 --> 00:19:20,790
know turn on the windshield wipers and

470
00:19:20,790 --> 00:19:23,870
like they get to the other side right so

471
00:19:23,870 --> 00:19:27,030
that's what you have to do in today's

472
00:19:27,030 --> 00:19:29,910
world of end-to-end testing to get to

473
00:19:29,910 --> 00:19:32,940
this point so we're back at this point

474
00:19:32,940 --> 00:19:35,340
now we're getting tests running we're

475
00:19:35,340 --> 00:19:37,290
going days and weeks without seeing any

476
00:19:37,290 --> 00:19:40,230
false positives and when we do see a

477
00:19:40,230 --> 00:19:42,540
test failure we don't even have to

478
00:19:42,540 --> 00:19:44,340
investigate it anymore ourselves we can

479
00:19:44,340 --> 00:19:47,790
just send this directly to the to the

480
00:19:47,790 --> 00:19:51,030
developer who owns the test and say hey

481
00:19:51,030 --> 00:19:53,700
check this out looks like ie9 is broken

482
00:19:53,700 --> 00:19:57,540
when you try to view your cart and it

483
00:19:57,540 --> 00:19:58,890
used to be that we'd be shaking in our

484
00:19:58,890 --> 00:20:00,180
shoes whenever we'd have that

485
00:20:00,180 --> 00:20:02,760
conversation because we'd be worried is

486
00:20:02,760 --> 00:20:04,050
it going to turn out to be our problem

487
00:20:04,050 --> 00:20:06,050
and then we just pissed off a developer

488
00:20:06,050 --> 00:20:07,950
because there we're going to waste their

489
00:20:07,950 --> 00:20:10,380
time but now it's like oh thanks man

490
00:20:10,380 --> 00:20:13,380
like you just saved me from having to

491
00:20:13,380 --> 00:20:14,820
pull an all-nighter when we when we

492
00:20:14,820 --> 00:20:16,340
launch next week

493
00:20:16,340 --> 00:20:19,680
so we're back to this point where we're

494
00:20:19,680 --> 00:20:21,420
making great progress we hit our speed

495
00:20:21,420 --> 00:20:24,750
bump we do what we have to do to smooth

496
00:20:24,750 --> 00:20:29,190
it over and we're there we've got a

497
00:20:29,190 --> 00:20:31,350
reliable and to end test suite running

498
00:20:31,350 --> 00:20:34,670
on our complete browser support matrix

499
00:20:34,670 --> 00:20:37,020
it's made out of kludgy duct tape and

500
00:20:37,020 --> 00:20:40,260
rubber bands but it works so the next

501
00:20:40,260 --> 00:20:41,600
thing we thought we started we started

502
00:20:41,600 --> 00:20:43,980
hearing like hey this is cool like have

503
00:20:43,980 --> 00:20:45,390
you guys thought about opening open

504
00:20:45,390 --> 00:20:48,810
sourcing this and we were like nobody

505
00:20:48,810 --> 00:20:50,850
nobody wants to like open this can of

506
00:20:50,850 --> 00:20:52,860
spam and see like what's in there you

507
00:20:52,860 --> 00:20:54,330
know it's like okay this is helping us

508
00:20:54,330 --> 00:20:57,780
but like we're not we're not proud of

509
00:20:57,780 --> 00:21:00,300
what's going on in there we thought this

510
00:21:00,300 --> 00:21:01,920
is not suitable to release right because

511
00:21:01,920 --> 00:21:03,750
just because that's that's kind of the

512
00:21:03,750 --> 00:21:06,450
mindset of development as a craft and

513
00:21:06,450 --> 00:21:08,550
like you know you create these small

514
00:21:08,550 --> 00:21:10,200
lightweight tools you publish them on

515
00:21:10,200 --> 00:21:11,970
NPM their elegant they solve a tiny

516
00:21:11,970 --> 00:21:13,950
little problem in like seven lines of

517
00:21:13,950 --> 00:21:16,380
code and this was like a monstrosity

518
00:21:16,380 --> 00:21:17,820
that we created you know it was it was

519
00:21:17,820 --> 00:21:20,160
good solid code but the things that we

520
00:21:20,160 --> 00:21:22,940
did to make it work just felt felt dirty

521
00:21:22,940 --> 00:21:25,920
so you know did we feel like we were a

522
00:21:25,920 --> 00:21:28,050
bunch of clever engineers like yeah we

523
00:21:28,050 --> 00:21:29,730
thought like we were shoveling and

524
00:21:29,730 --> 00:21:31,920
we got the job done but at the end of

525
00:21:31,920 --> 00:21:34,890
the day we're shovelin but then we

526
00:21:34,890 --> 00:21:36,840
thought okay we thought about our

527
00:21:36,840 --> 00:21:40,110
journey and this is where we ended up

528
00:21:40,110 --> 00:21:42,260
but what would have happened if we

529
00:21:42,260 --> 00:21:45,270
hadn't thought about that whole axiom of

530
00:21:45,270 --> 00:21:47,940
truth thing and and pushed on no matter

531
00:21:47,940 --> 00:21:51,930
what and how many others must have tried

532
00:21:51,930 --> 00:21:54,990
and given up how many other individuals

533
00:21:54,990 --> 00:21:57,180
how many teams how many companies got

534
00:21:57,180 --> 00:21:58,890
thirty percent seventy percent eighty

535
00:21:58,890 --> 00:22:01,920
percent of the way and wasted so much

536
00:22:01,920 --> 00:22:03,900
time trying to make it work and then

537
00:22:03,900 --> 00:22:05,340
just gave up because they couldn't find

538
00:22:05,340 --> 00:22:08,430
an elegant clean solution and how many

539
00:22:08,430 --> 00:22:09,990
more people in the future we're going to

540
00:22:09,990 --> 00:22:11,970
do that and then still we started

541
00:22:11,970 --> 00:22:13,890
thinking about what's the responsible

542
00:22:13,890 --> 00:22:15,510
thing to do and what if we could take

543
00:22:15,510 --> 00:22:18,330
all of that wasted effort in the future

544
00:22:18,330 --> 00:22:25,050
and actually add it on to the point of

545
00:22:25,050 --> 00:22:26,760
after like after the problem that we

546
00:22:26,760 --> 00:22:28,620
solved of making tests not flaky anymore

547
00:22:28,620 --> 00:22:29,789
what if we could have people

548
00:22:29,789 --> 00:22:31,919
contributing to other more interesting

549
00:22:31,919 --> 00:22:34,159
parts of end-to-end testing after that

550
00:22:34,159 --> 00:22:36,179
because we had started moving on to

551
00:22:36,179 --> 00:22:39,029
cooler problems ourselves we realized

552
00:22:39,029 --> 00:22:40,590
okay we have these tests running but we

553
00:22:40,590 --> 00:22:41,909
don't have a good way of going back and

554
00:22:41,909 --> 00:22:43,830
historically looking at trends about

555
00:22:43,830 --> 00:22:46,229
what passed when and who broke what and

556
00:22:46,229 --> 00:22:49,049
which browsers were failing together so

557
00:22:49,049 --> 00:22:51,960
we forked the jQuery test swarm project

558
00:22:51,960 --> 00:22:53,960
which already had a really nice

559
00:22:53,960 --> 00:22:57,749
dashboard which they used for keeping

560
00:22:57,749 --> 00:23:00,960
track of their unit tests cross-browser

561
00:23:00,960 --> 00:23:03,509
for jQuery and we made this work with

562
00:23:03,509 --> 00:23:05,729
our end-to-end tests so we were running

563
00:23:05,729 --> 00:23:07,619
builds at regular intervals every hour

564
00:23:07,619 --> 00:23:10,139
two hours and if there was a failure we

565
00:23:10,139 --> 00:23:12,179
could get a very narrow slice where we

566
00:23:12,179 --> 00:23:15,389
could say up and ie8 regression was

567
00:23:15,389 --> 00:23:17,940
introduced between twelve o'clock and

568
00:23:17,940 --> 00:23:19,739
one o'clock today and that gives you a

569
00:23:19,739 --> 00:23:21,539
very small number of commits to go and

570
00:23:21,539 --> 00:23:23,460
look at and then when somebody claims

571
00:23:23,460 --> 00:23:25,200
that they fixed it we just wait for the

572
00:23:25,200 --> 00:23:27,330
next iteration of the build to run and

573
00:23:27,330 --> 00:23:28,919
then we can see oh sweet everything is

574
00:23:28,919 --> 00:23:34,820
green again after that we implemented a

575
00:23:34,820 --> 00:23:37,049
massively parallel test runner so

576
00:23:37,049 --> 00:23:38,609
instead of just running these tests one

577
00:23:38,609 --> 00:23:41,820
at a time on each remote browser we

578
00:23:41,820 --> 00:23:47,340
could run 10 15 50 tests at once so we

579
00:23:47,340 --> 00:23:49,470
could compress down the total time it

580
00:23:49,470 --> 00:23:51,419
takes to execute this entire matrix of

581
00:23:51,419 --> 00:23:53,789
tests from an hour to an hour and a half

582
00:23:53,789 --> 00:23:57,059
into more like 15 or 20 minutes and that

583
00:23:57,059 --> 00:24:00,599
gave us the freedom to run these these

584
00:24:00,599 --> 00:24:02,519
builds not only just at a regular

585
00:24:02,519 --> 00:24:04,349
interval but actually as part of our

586
00:24:04,349 --> 00:24:07,169
pull requests verification we use it we

587
00:24:07,169 --> 00:24:08,639
as github internally and so it gives you

588
00:24:08,639 --> 00:24:11,249
that nice border around your merge box

589
00:24:11,249 --> 00:24:13,619
that says all good to merge or you know

590
00:24:13,619 --> 00:24:15,359
hey you failed the build so now we can

591
00:24:15,359 --> 00:24:18,119
have our remote sauce labs cross-browser

592
00:24:18,119 --> 00:24:20,220
builds actually contributing to that to

593
00:24:20,220 --> 00:24:21,869
that safety check of saying to a

594
00:24:21,869 --> 00:24:23,549
developer whether it's cool to merge or

595
00:24:23,549 --> 00:24:27,389
not so remember that Google criticism

596
00:24:27,389 --> 00:24:29,489
about just say no to end to end tests

597
00:24:29,489 --> 00:24:32,669
because they're too slow well because we

598
00:24:32,669 --> 00:24:34,109
smoothed over that speed bump and we

599
00:24:34,109 --> 00:24:36,690
could move on to cooler problems we got

600
00:24:36,690 --> 00:24:38,220
to actually tackle that problem and we

601
00:24:38,220 --> 00:24:40,259
found a pretty good solution for it so

602
00:24:40,259 --> 00:24:42,210
it's no longer hard to isolate failures

603
00:24:42,210 --> 00:24:43,350
because we can run this on every

604
00:24:43,350 --> 00:24:45,510
pull request now we had this nagging

605
00:24:45,510 --> 00:24:47,070
feeling about what about the flake right

606
00:24:47,070 --> 00:24:48,780
what are we sweeping under the rug when

607
00:24:48,780 --> 00:24:50,429
we're retrying what if there's

608
00:24:50,429 --> 00:24:53,340
legitimate issues in the app code maybe

609
00:24:53,340 --> 00:24:54,929
a timing issue maybe there's something

610
00:24:54,929 --> 00:24:57,270
that in the app code actually fails two

611
00:24:57,270 --> 00:24:59,840
percent of the time and are we just

612
00:24:59,840 --> 00:25:02,100
sweeping that under the rug so we

613
00:25:02,100 --> 00:25:03,750
started actually looking at the data

614
00:25:03,750 --> 00:25:05,250
that we're collecting through tests form

615
00:25:05,250 --> 00:25:07,410
we've got a big database of historically

616
00:25:07,410 --> 00:25:09,390
all the tests we've run how many times

617
00:25:09,390 --> 00:25:12,299
each test has retried what user agent it

618
00:25:12,299 --> 00:25:14,250
ran with and so we can start producing

619
00:25:14,250 --> 00:25:16,200
graphs like this it's kind of hard to

620
00:25:16,200 --> 00:25:18,330
see at the bottom but we've got a list

621
00:25:18,330 --> 00:25:22,169
of all of our use it's you know browser

622
00:25:22,169 --> 00:25:26,549
vendor version and operating system so

623
00:25:26,549 --> 00:25:28,049
we can sort and start seeing what are

624
00:25:28,049 --> 00:25:29,460
our biggest problems here we can see

625
00:25:29,460 --> 00:25:32,130
that we've got the most tests flake

626
00:25:32,130 --> 00:25:34,320
we've got like you know nine point seven

627
00:25:34,320 --> 00:25:38,370
percent retry rate for our iOS

628
00:25:38,370 --> 00:25:40,710
simulators so this could be a problem

629
00:25:40,710 --> 00:25:42,720
with the simulator itself this could be

630
00:25:42,720 --> 00:25:45,270
a problem with how our code is working

631
00:25:45,270 --> 00:25:47,640
in a responsive scenario but it gives us

632
00:25:47,640 --> 00:25:50,400
a narrower window to look at instead of

633
00:25:50,400 --> 00:25:52,020
just giving up and saying oh the tests

634
00:25:52,020 --> 00:25:54,210
are flaky what do I do we can say yeah

635
00:25:54,210 --> 00:25:55,860
but they're more flaky on this browser

636
00:25:55,860 --> 00:25:58,080
than this one so that gives somebody who

637
00:25:58,080 --> 00:25:59,610
wants to investigate a little bit more

638
00:25:59,610 --> 00:26:02,610
to go on we can also slice by the test

639
00:26:02,610 --> 00:26:05,000
names themselves so if we start to see

640
00:26:05,000 --> 00:26:08,280
particular groups of tests that all test

641
00:26:08,280 --> 00:26:11,520
common features that are failing more

642
00:26:11,520 --> 00:26:12,900
frequently together then that's a

643
00:26:12,900 --> 00:26:14,490
feature that a developer should should

644
00:26:14,490 --> 00:26:19,350
look into so Google and and and some of

645
00:26:19,350 --> 00:26:20,970
these other companies that have tried

646
00:26:20,970 --> 00:26:22,110
this we're all we're all trying to

647
00:26:22,110 --> 00:26:23,580
summit the same mountain together right

648
00:26:23,580 --> 00:26:26,220
but because a lot of them got really

649
00:26:26,220 --> 00:26:28,980
stuck on the flaky part they never got

650
00:26:28,980 --> 00:26:30,390
to research the more interesting things

651
00:26:30,390 --> 00:26:32,190
and we're at the point now where we're

652
00:26:32,190 --> 00:26:34,169
researching the sources of the flake and

653
00:26:34,169 --> 00:26:36,240
starting to narrow down this problem

654
00:26:36,240 --> 00:26:37,890
that seemed just totally insurmountable

655
00:26:37,890 --> 00:26:41,400
before so we're going to open source

656
00:26:41,400 --> 00:26:42,900
this right now we have a code name

657
00:26:42,900 --> 00:26:45,720
called Magellan because we're a large

658
00:26:45,720 --> 00:26:47,370
company we have to we have to run all of

659
00:26:47,370 --> 00:26:49,049
our open source stuff through a lengthy

660
00:26:49,049 --> 00:26:51,510
review process and the name is likely to

661
00:26:51,510 --> 00:26:53,940
change but look for this to be open

662
00:26:53,940 --> 00:26:57,270
source soon what Magellan actually is

663
00:26:57,270 --> 00:26:59,340
is an end-to-end test runner that hooks

664
00:26:59,340 --> 00:27:01,440
into other libraries such as Night Watch

665
00:27:01,440 --> 00:27:04,230
or WD so it's not a replacement for

666
00:27:04,230 --> 00:27:06,120
Night Watch or protractor or all of

667
00:27:06,120 --> 00:27:08,760
these but you can think of it as a test

668
00:27:08,760 --> 00:27:12,390
runner runner so it's it's a commander

669
00:27:12,390 --> 00:27:14,250
for your fleet or a conductor for your

670
00:27:14,250 --> 00:27:16,770
orchestra and it does a few very

671
00:27:16,770 --> 00:27:18,600
specific things it smooths over test

672
00:27:18,600 --> 00:27:20,940
flake but gives you insight into what's

673
00:27:20,940 --> 00:27:23,460
flaky it's a massively parallel test

674
00:27:23,460 --> 00:27:25,920
runner that compresses down your your

675
00:27:25,920 --> 00:27:28,320
runtime of your sweet and it gives you

676
00:27:28,320 --> 00:27:30,420
beautiful reporting tools like we saw

677
00:27:30,420 --> 00:27:32,900
from our tests warm fork so that you can

678
00:27:32,900 --> 00:27:37,110
make sense of it all so we came to think

679
00:27:37,110 --> 00:27:39,600
of this as instead of shoveling as

680
00:27:39,600 --> 00:27:40,950
being like something we should be

681
00:27:40,950 --> 00:27:44,760
ashamed of this is shoveling as a

682
00:27:44,760 --> 00:27:46,740
service not as a service on a server but

683
00:27:46,740 --> 00:27:48,980
as a service to your fellow developers

684
00:27:48,980 --> 00:27:52,050
and to your community I've never

685
00:27:52,050 --> 00:27:54,660
actually like coined a hashtag before

686
00:27:54,660 --> 00:27:57,300
but I want to see this trending on all

687
00:27:57,300 --> 00:27:58,650
of the stuff that you've done that

688
00:27:58,650 --> 00:27:59,790
you've kind of been like a little bit

689
00:27:59,790 --> 00:28:01,710
ashamed of but like would really be

690
00:28:01,710 --> 00:28:03,900
useful to everybody because it solves a

691
00:28:03,900 --> 00:28:05,670
problem even if it's a messy problem

692
00:28:05,670 --> 00:28:08,250
shovel that and and do it for the

693
00:28:08,250 --> 00:28:11,070
benefit of everybody else so how do we

694
00:28:11,070 --> 00:28:12,720
how do what are that what are the core

695
00:28:12,720 --> 00:28:15,540
tenants of shoveling 101 momentum

696
00:28:15,540 --> 00:28:18,240
is is greater than perfection so getting

697
00:28:18,240 --> 00:28:20,610
stuck on shitty problems is demoralizing

698
00:28:20,610 --> 00:28:23,990
it's unproductive and there's no point

699
00:28:23,990 --> 00:28:26,580
get that momentum smoothing things over

700
00:28:26,580 --> 00:28:29,310
is better than giving up so I'll think

701
00:28:29,310 --> 00:28:31,050
of all of those eighty percent solved

702
00:28:31,050 --> 00:28:32,820
problems that never saw the light of day

703
00:28:32,820 --> 00:28:34,710
because somebody just couldn't do it as

704
00:28:34,710 --> 00:28:36,960
cleanly as they wanted to that's a shame

705
00:28:36,960 --> 00:28:39,440
there's so much wasted effort they're

706
00:28:39,440 --> 00:28:43,560
useful is better than precise so if you

707
00:28:43,560 --> 00:28:45,270
can help someone else smooth over a bump

708
00:28:45,270 --> 00:28:47,220
it doesn't matter how much duct tape and

709
00:28:47,220 --> 00:28:48,690
rubber bands how much dirty stuff you

710
00:28:48,690 --> 00:28:50,070
have to do to get there if you can be

711
00:28:50,070 --> 00:28:51,870
useful to somebody else and package that

712
00:28:51,870 --> 00:28:54,090
up they can get over a speed bump but

713
00:28:54,090 --> 00:28:55,020
they wouldn't have otherwise been able

714
00:28:55,020 --> 00:28:57,660
to do an open source is better than

715
00:28:57,660 --> 00:28:59,760
closed source if you built a tool like

716
00:28:59,760 --> 00:29:02,520
this you think well maybe i'll release

717
00:29:02,520 --> 00:29:03,990
it one day when i can polish it all up

718
00:29:03,990 --> 00:29:06,210
no release it when it's useful even if

719
00:29:06,210 --> 00:29:08,100
it's only marginally useful and so in

720
00:29:08,100 --> 00:29:11,289
some small way

721
00:29:11,299 --> 00:29:14,190
so you can follow me at geek underscore

722
00:29:14,190 --> 00:29:17,129
day if you want to be notified when when

723
00:29:17,129 --> 00:29:18,840
Magellan is out in the wild or whatever

724
00:29:18,840 --> 00:29:20,759
it's called at the time if you want to

725
00:29:20,759 --> 00:29:22,559
check out the podcast on Rebecca

726
00:29:22,559 --> 00:29:24,749
Murphy's show check out TTL podcast com

727
00:29:24,749 --> 00:29:26,100
we talked for a long time about

728
00:29:26,100 --> 00:29:28,350
everything that Magellan does in a lot

729
00:29:28,350 --> 00:29:30,899
more detail and for real use this

