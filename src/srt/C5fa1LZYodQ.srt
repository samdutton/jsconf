1
00:00:00,930 --> 00:00:32,950

[Music]

2
00:00:32,960 --> 00:00:34,910
it's an honor and a privilege to be here

3
00:00:34,910 --> 00:00:36,770
I'm very happy to be here I think I

4
00:00:36,770 --> 00:00:38,450
would be less nervous if I was actually

5
00:00:38,450 --> 00:00:40,400
being hung at 2:15 instead of giving you

6
00:00:40,400 --> 00:00:43,970
as a talk so please bear with me the

7
00:00:43,970 --> 00:00:46,130
question is this better than that is

8
00:00:46,130 --> 00:00:48,860
something that we confront every day we

9
00:00:48,860 --> 00:00:50,300
confront it probably more than we're

10
00:00:50,300 --> 00:00:53,030
aware of and sometimes there are serious

11
00:00:53,030 --> 00:00:55,730
consequences to the the question I

12
00:00:55,730 --> 00:00:57,440
answer that question so is this car

13
00:00:57,440 --> 00:00:59,690
better than that car is this job offer

14
00:00:59,690 --> 00:01:03,200
better than that job offer is this home

15
00:01:03,200 --> 00:01:05,180
for my ailing mother better than that

16
00:01:05,180 --> 00:01:05,630
one

17
00:01:05,630 --> 00:01:07,550
right we encountered this question all

18
00:01:07,550 --> 00:01:12,800
the time my concern is that often say I

19
00:01:12,800 --> 00:01:16,130
used car salesperson or some big

20
00:01:16,130 --> 00:01:22,550
software company or I don't know just

21
00:01:22,550 --> 00:01:23,900
about anybody who's trying to sell you

22
00:01:23,900 --> 00:01:27,110
something actually may benefit if you

23
00:01:27,110 --> 00:01:30,950
can't answer that question well right so

24
00:01:30,950 --> 00:01:32,360
that's why that's why the question is

25
00:01:32,360 --> 00:01:35,360
important to me in particular though

26
00:01:35,360 --> 00:01:38,140
we're going to look at is no js' better

27
00:01:38,140 --> 00:01:41,150
but we're going to use it merely as sort

28
00:01:41,150 --> 00:01:42,800
of a framework to look at that broader

29
00:01:42,800 --> 00:01:45,320
question I'm a big-picture sort of

30
00:01:45,320 --> 00:01:48,350
person I want to try to paint you a big

31
00:01:48,350 --> 00:01:50,420
picture and give you some things that

32
00:01:50,420 --> 00:01:51,020
you'll go away

33
00:01:51,020 --> 00:01:53,990
with either thinking about or actually

34
00:01:53,990 --> 00:01:56,330
excited to go learn about so that's the

35
00:01:56,330 --> 00:01:59,990
idea so you know I'm not a JavaScript

36
00:01:59,990 --> 00:02:01,610
person I've never authorized ovah script

37
00:02:01,610 --> 00:02:03,200
library this is actually the first jazz

38
00:02:03,200 --> 00:02:04,970
comp that I've attended I was able to

39
00:02:04,970 --> 00:02:06,680
hang out with any of you folks who are

40
00:02:06,680 --> 00:02:09,229
at the Portland Jazz kampf last year

41
00:02:09,229 --> 00:02:12,620
because I live in Portland but how did I

42
00:02:12,620 --> 00:02:16,280
get here so last year just about one

43
00:02:16,280 --> 00:02:20,540
year ago I was sitting at code Kampf and

44
00:02:20,540 --> 00:02:23,600
it was Ryan's topped on nodejs and most

45
00:02:23,600 --> 00:02:25,239
of that talk was about how they were

46
00:02:25,239 --> 00:02:27,769
rebuilding the i/o subsystem so it would

47
00:02:27,769 --> 00:02:29,750
have good performance characteristics on

48
00:02:29,750 --> 00:02:35,090
both Windows and UNIX fast forward about

49
00:02:35,090 --> 00:02:37,489
nine months and I am hearing Lee I'm

50
00:02:37,489 --> 00:02:38,810
seeing all this stuff on Twitter about

51
00:02:38,810 --> 00:02:42,440
no GS and I'm like at the time I heard

52
00:02:42,440 --> 00:02:45,769
Ryan's talk I was fairly indifferent I

53
00:02:45,769 --> 00:02:46,130
was

54
00:02:46,130 --> 00:02:47,240
interested in technology we're

55
00:02:47,240 --> 00:02:48,500
interested in building really good

56
00:02:48,500 --> 00:02:50,900
windows support into rubinius but I was

57
00:02:50,900 --> 00:02:53,120
indifferent I'm not JavaScript developer

58
00:02:53,120 --> 00:02:54,770
I'm not building solutions in JavaScript

59
00:02:54,770 --> 00:02:56,330
I was like oh that's interesting then I

60
00:02:56,330 --> 00:02:57,800
was seeing lots and lots of people

61
00:02:57,800 --> 00:02:58,970
talking about nodejs

62
00:02:58,970 --> 00:03:01,520
and I posted a serious question I said

63
00:03:01,520 --> 00:03:02,960
someone please tell me why people are

64
00:03:02,960 --> 00:03:05,570
using node GS and please tell me with

65
00:03:05,570 --> 00:03:08,060
science because I had heard a lot of

66
00:03:08,060 --> 00:03:10,400
opinions and then I followed it up with

67
00:03:10,400 --> 00:03:13,070
this tweet and as you probably can see

68
00:03:13,070 --> 00:03:17,210
it got retweeted a lot Chris DM to me

69
00:03:17,210 --> 00:03:19,190
and he said I know you're working on

70
00:03:19,190 --> 00:03:21,020
important stuff what's up with this

71
00:03:21,020 --> 00:03:23,150
challenge why are you doing this and I

72
00:03:23,150 --> 00:03:25,700
we changed a few dm's and I was like

73
00:03:25,700 --> 00:03:27,770
basically I said it's a serious question

74
00:03:27,770 --> 00:03:30,740
I'm not trolling I want to understand

75
00:03:30,740 --> 00:03:35,000
because I don't understand so he said

76
00:03:35,000 --> 00:03:36,590
would you be interested in giving a talk

77
00:03:36,590 --> 00:03:39,770
at the conference and I said yes that

78
00:03:39,770 --> 00:03:42,440
would be amazing so that's how I got

79
00:03:42,440 --> 00:03:45,020
here Who am I

80
00:03:45,020 --> 00:03:46,670
my name is Brian Ford as you guys have

81
00:03:46,670 --> 00:03:48,710
heard I work for engineer I've worked

82
00:03:48,710 --> 00:03:51,490
there for about four years and I work on

83
00:03:51,490 --> 00:03:54,140
rubinius and Ruby spec and I actually

84
00:03:54,140 --> 00:03:55,550
worked on Rubinius for about a year

85
00:03:55,550 --> 00:03:57,500
before in jannat engineer had hired me

86
00:03:57,500 --> 00:03:59,360
when I started working that project it

87
00:03:59,360 --> 00:04:00,860
was the first open source project that

88
00:04:00,860 --> 00:04:03,050
I'd ever contributed to the project was

89
00:04:03,050 --> 00:04:05,270
very young I had a feeling that the

90
00:04:05,270 --> 00:04:06,740
project was going to be important based

91
00:04:06,740 --> 00:04:08,690
on blog posts that Evan Phoenix had

92
00:04:08,690 --> 00:04:13,959
written but I was very concerned that a

93
00:04:13,959 --> 00:04:17,350
new implementation of Ruby would

94
00:04:17,350 --> 00:04:20,390
possibly cause a splintering or a

95
00:04:20,390 --> 00:04:21,920
fracturing in the Ruby community and I

96
00:04:21,920 --> 00:04:24,410
was very much against that idea so as

97
00:04:24,410 --> 00:04:26,660
part of starting with Rubinius the first

98
00:04:26,660 --> 00:04:27,980
thing I started doing is writing tests

99
00:04:27,980 --> 00:04:31,390
that eventually became the Ruby spec

100
00:04:31,390 --> 00:04:33,920
project that all the different

101
00:04:33,920 --> 00:04:36,890
implementations of Ruby are using so I

102
00:04:36,890 --> 00:04:38,420
was concerned I was concerned very

103
00:04:38,420 --> 00:04:40,040
concerned about the language the the

104
00:04:40,040 --> 00:04:41,210
coherence of the language that people

105
00:04:41,210 --> 00:04:43,610
could benefit from Ruby but I was also

106
00:04:43,610 --> 00:04:45,710
beginning to work on a project where the

107
00:04:45,710 --> 00:04:49,910
question of essentially the purpose of

108
00:04:49,910 --> 00:04:52,190
the project was to replace the default

109
00:04:52,190 --> 00:04:55,220
Ruby implementation so central to my

110
00:04:55,220 --> 00:04:57,060
work was this question of

111
00:04:57,060 --> 00:05:00,270
is what we're doing better than what

112
00:05:00,270 --> 00:05:07,290
already exists so that's how I got here

113
00:05:07,290 --> 00:05:10,050
that's who I am why do I care about no

114
00:05:10,050 --> 00:05:12,690
GS though I think that's a really

115
00:05:12,690 --> 00:05:17,370
important question and in big part it's

116
00:05:17,370 --> 00:05:20,400
because of this there's a lot of

117
00:05:20,400 --> 00:05:21,840
problems in the world today right a

118
00:05:21,840 --> 00:05:24,419
really good friend of mine diagnosed

119
00:05:24,419 --> 00:05:26,550
with pancreatic cancer she will probably

120
00:05:26,550 --> 00:05:28,620
die next month I hope to see her before

121
00:05:28,620 --> 00:05:29,940
she dies but she's probably gonna die

122
00:05:29,940 --> 00:05:32,639
next month why can't we solve problems

123
00:05:32,639 --> 00:05:35,970
like this when you when you think like

124
00:05:35,970 --> 00:05:37,919
when this idea first was presented to me

125
00:05:37,919 --> 00:05:38,840
I thought it was very very interesting

126
00:05:38,840 --> 00:05:42,090
why is it that we create technology we

127
00:05:42,090 --> 00:05:43,950
create organizations groups of people

128
00:05:43,950 --> 00:05:46,139
where we're supposed to be solving a

129
00:05:46,139 --> 00:05:48,860
problem but what we end up doing is

130
00:05:48,860 --> 00:05:51,660
possibly making sure that that problem

131
00:05:51,660 --> 00:05:53,700
doesn't go away because then we can keep

132
00:05:53,700 --> 00:05:56,460
on solving it over time to me that

133
00:05:56,460 --> 00:06:01,890
that's so bizarre right the other thing

134
00:06:01,890 --> 00:06:04,080
though is that a lot of people are

135
00:06:04,080 --> 00:06:06,419
afraid of change right a lot of people

136
00:06:06,419 --> 00:06:08,100
are really really scared of change and

137
00:06:08,100 --> 00:06:09,750
then there are people who actually

138
00:06:09,750 --> 00:06:12,900
create change and what I see in the

139
00:06:12,900 --> 00:06:15,300
JavaScript community in general and in

140
00:06:15,300 --> 00:06:17,700
node in particular is that it is a

141
00:06:17,700 --> 00:06:19,710
subversive technology it's very much

142
00:06:19,710 --> 00:06:21,570
like ruby was when it was sort of taking

143
00:06:21,570 --> 00:06:22,620
on the enterprise and saying there's

144
00:06:22,620 --> 00:06:24,390
possibly a better way to make web

145
00:06:24,390 --> 00:06:27,139
applications I see this across

146
00:06:27,139 --> 00:06:29,430
JavaScript like almost every single

147
00:06:29,430 --> 00:06:31,470
place javascript is being used you're

148
00:06:31,470 --> 00:06:32,729
pushing the boundaries about what's

149
00:06:32,729 --> 00:06:35,190
possible and showing people things that

150
00:06:35,190 --> 00:06:37,380
they they didn't imagine and then they

151
00:06:37,380 --> 00:06:38,639
build on that and you see more and more

152
00:06:38,639 --> 00:06:41,190
more so part of the reason why it's it's

153
00:06:41,190 --> 00:06:42,990
meaningful for me to come here and talk

154
00:06:42,990 --> 00:06:45,510
to you is because I feel like there is a

155
00:06:45,510 --> 00:06:48,419
a even though I do

156
00:06:48,419 --> 00:06:50,520
Ruby primarily and most of you folks see

157
00:06:50,520 --> 00:06:51,889
JavaScript I feel like there's a very

158
00:06:51,889 --> 00:06:55,020
much deeper like connection between us

159
00:06:55,020 --> 00:07:00,539
based on this idea yeah so AB and

160
00:07:00,539 --> 00:07:03,590
Observer says the other thing is that

161
00:07:03,590 --> 00:07:06,150
anytime you put two things in contrast

162
00:07:06,150 --> 00:07:09,580
you're essentially creating a conflict

163
00:07:09,580 --> 00:07:12,610
right in the Ruby community we have this

164
00:07:12,610 --> 00:07:13,390
saying

165
00:07:13,390 --> 00:07:17,110
Mott's is nice and so we are nice right

166
00:07:17,110 --> 00:07:21,070
it's a great idea right except is it

167
00:07:21,070 --> 00:07:23,380
nice to be in conflict with somebody I

168
00:07:23,380 --> 00:07:24,130
love Ruby

169
00:07:24,130 --> 00:07:26,620
I respect mots tremendously I'm so

170
00:07:26,620 --> 00:07:28,030
thankful that he created the language

171
00:07:28,030 --> 00:07:29,830
and yet I've been working for five years

172
00:07:29,830 --> 00:07:31,990
diligently to try to replace the

173
00:07:31,990 --> 00:07:35,140
technology that mots has authored so

174
00:07:35,140 --> 00:07:38,440
conflict is is is basically inherent in

175
00:07:38,440 --> 00:07:39,190
what I'm doing

176
00:07:39,190 --> 00:07:42,070
furthermore common conflict is and

177
00:07:42,070 --> 00:07:44,290
controversy is really entertaining I

178
00:07:44,290 --> 00:07:46,090
mean probably I don't have any other

179
00:07:46,090 --> 00:07:48,070
tweets that were 50 times retweeted

180
00:07:48,070 --> 00:07:50,140
right but I throw one challenge out

181
00:07:50,140 --> 00:07:51,850
there at node yes and I'm not even you

182
00:07:51,850 --> 00:07:53,350
know node.js programmer or something or

183
00:07:53,350 --> 00:07:55,660
really somebody who's like someone to

184
00:07:55,660 --> 00:07:57,580
worry about and lots of people are like

185
00:07:57,580 --> 00:08:00,030
on that retweeting retreating

186
00:08:00,030 --> 00:08:02,230
furthermore when it comes to conflict

187
00:08:02,230 --> 00:08:04,660
we usually have words like this we have

188
00:08:04,660 --> 00:08:08,200
a shootout right or a Throwdown or a

189
00:08:08,200 --> 00:08:11,140
fight right how many people feel like

190
00:08:11,140 --> 00:08:14,230
fighting is something that is a good way

191
00:08:14,230 --> 00:08:16,360
to resolve conflict right walk with you

192
00:08:16,360 --> 00:08:18,610
know bloody lips and eyes and knuckles

193
00:08:18,610 --> 00:08:20,650
and stuff I mean truly a fight is that

194
00:08:20,650 --> 00:08:25,420
is that the way we want to do it the

195
00:08:25,420 --> 00:08:26,560
other thing that's really interesting is

196
00:08:26,560 --> 00:08:30,030
that anytime you advocate for something

197
00:08:30,030 --> 00:08:34,540
right if I say this is good I don't have

198
00:08:34,540 --> 00:08:36,040
to say anything more than that but I

199
00:08:36,040 --> 00:08:38,710
imply that this other thing is not as

200
00:08:38,710 --> 00:08:41,920
good right I can't escape that right and

201
00:08:41,920 --> 00:08:44,500
if I say this is bad I'm probably not

202
00:08:44,500 --> 00:08:46,360
just saying in general some you know

203
00:08:46,360 --> 00:08:48,970
arbitrary abstract thing right it's this

204
00:08:48,970 --> 00:08:51,970
is bad and something else right so

205
00:08:51,970 --> 00:08:53,710
there's this duality we can't get it we

206
00:08:53,710 --> 00:08:55,330
can't get away with it Eastern

207
00:08:55,330 --> 00:08:55,990
philosophy

208
00:08:55,990 --> 00:08:58,600
eun-young right it's it's sort of an

209
00:08:58,600 --> 00:09:00,040
understanding of how the universe works

210
00:09:00,040 --> 00:09:01,960
but what happens is when we look at

211
00:09:01,960 --> 00:09:04,390
conflict it usually ends up like this

212
00:09:04,390 --> 00:09:05,890
advocate if you're an advocate you're a

213
00:09:05,890 --> 00:09:08,980
fanboy right to sort of perpetuate the

214
00:09:08,980 --> 00:09:11,140
gender imbalance in the in the tech

215
00:09:11,140 --> 00:09:14,620
community right your fanboy or if you're

216
00:09:14,620 --> 00:09:17,790
a critic you're a troll and so we

217
00:09:17,790 --> 00:09:19,750
invalidate what someone is saying when

218
00:09:19,750 --> 00:09:20,890
they're either advocating for something

219
00:09:20,890 --> 00:09:21,760
and they're excited

220
00:09:21,760 --> 00:09:24,010
Susy asked about it or we invalidate

221
00:09:24,010 --> 00:09:26,200
when they have a question and say we're

222
00:09:26,200 --> 00:09:32,620
troll that concerns me when I was

223
00:09:32,620 --> 00:09:33,580
telling someone about this talk that

224
00:09:33,580 --> 00:09:36,330
basically again we suck at conflict and

225
00:09:36,330 --> 00:09:40,510
that's a problem so how can we improve

226
00:09:40,510 --> 00:09:42,970
it that's the question

227
00:09:42,970 --> 00:09:46,180
so this talk if you get nothing else out

228
00:09:46,180 --> 00:09:48,460
of it the idea would be how do we

229
00:09:48,460 --> 00:09:53,840
improve how I deal with conflict

230
00:09:53,850 --> 00:09:57,280
benchmarks right we could do that right

231
00:09:57,280 --> 00:09:59,230
like I could just come up here and say

232
00:09:59,230 --> 00:10:02,710
oh I benched mark node against closure

233
00:10:02,710 --> 00:10:04,510
you know Carl Ertz is working on this

234
00:10:04,510 --> 00:10:08,110
new evented like client-server HTTP

235
00:10:08,110 --> 00:10:10,630
server it's like it's the new hotness

236
00:10:10,630 --> 00:10:13,090
and it's like five times faster than

237
00:10:13,090 --> 00:10:16,780
node right of all the people here who

238
00:10:16,780 --> 00:10:19,720
have used node if I showed you a

239
00:10:19,720 --> 00:10:24,250
benchmark right now that closure was

240
00:10:24,250 --> 00:10:26,020
five times faster than note how many of

241
00:10:26,020 --> 00:10:27,520
you would switch right now to use

242
00:10:27,520 --> 00:10:32,290
closure yeah that's awesome I'm so

243
00:10:32,290 --> 00:10:33,460
worried no one's gonna raise their hand

244
00:10:33,460 --> 00:10:35,590
on my back come on guys statistically

245
00:10:35,590 --> 00:10:40,930
someone would switch ok yeah so about 1%

246
00:10:40,930 --> 00:10:45,490
of you would switch okay so benchmarks

247
00:10:45,490 --> 00:10:47,980
not hit right benchmarks have this

248
00:10:47,980 --> 00:10:51,190
superficial sort of we're using science

249
00:10:51,190 --> 00:10:52,750
but the problem is that it's very it's

250
00:10:52,750 --> 00:10:55,650
very complicated to do a good benchmark

251
00:10:55,650 --> 00:10:59,110
but I think science in general is the

252
00:10:59,110 --> 00:11:01,150
answer to how we improve how we deal

253
00:11:01,150 --> 00:11:03,400
with conflict so let's go into that a

254
00:11:03,400 --> 00:11:08,470
little bit there was a guy Alex Osborn

255
00:11:08,470 --> 00:11:11,320
worked at BBDO if you've watched madmen

256
00:11:11,320 --> 00:11:13,360
you know that that's an ad agency in New

257
00:11:13,360 --> 00:11:15,940
York way back 1948 he wrote this book

258
00:11:15,940 --> 00:11:18,190
called your creative power and in that

259
00:11:18,190 --> 00:11:20,590
book he described the methodology of

260
00:11:20,590 --> 00:11:22,360
brainstorming how many of you is

261
00:11:22,360 --> 00:11:24,520
brainstorming to like solve a problem

262
00:11:24,520 --> 00:11:26,680
like come up with this solution c'mon

263
00:11:26,680 --> 00:11:27,100
you guys

264
00:11:27,100 --> 00:11:29,220
nobody in this room okay yeah

265
00:11:29,220 --> 00:11:31,199
that's that's that's kind of it so

266
00:11:31,199 --> 00:11:32,220
brainstorming so the idea of

267
00:11:32,220 --> 00:11:33,360
brainstorming is that you get like get

268
00:11:33,360 --> 00:11:36,149
together you have a group of people you

269
00:11:36,149 --> 00:11:38,519
throw out ideas right just throw them

270
00:11:38,519 --> 00:11:41,189
out and one of the main points of

271
00:11:41,189 --> 00:11:42,449
brainstorming is that you do not

272
00:11:42,449 --> 00:11:45,000
criticize other people's ideas right

273
00:11:45,000 --> 00:11:47,879
because the idea was that creativity is

274
00:11:47,879 --> 00:11:50,120
such a delicate flower that the harsh

275
00:11:50,120 --> 00:11:53,100
light of criticism would cause it to

276
00:11:53,100 --> 00:11:54,899
wilt and you would fail to come up with

277
00:11:54,899 --> 00:11:57,480
really good ideas right it's been used I

278
00:11:57,480 --> 00:11:59,069
mean 1948 was a long time ago I was

279
00:11:59,069 --> 00:12:03,000
before I was born but it's been using it

280
00:12:03,000 --> 00:12:04,199
still use like people still talk about

281
00:12:04,199 --> 00:12:06,600
brainstorming there's just a little

282
00:12:06,600 --> 00:12:09,420
problem with it it's wrong and they knew

283
00:12:09,420 --> 00:12:11,009
that within a few years because someone

284
00:12:11,009 --> 00:12:12,899
actually did a study they took a bunch

285
00:12:12,899 --> 00:12:14,370
of people and they have them do

286
00:12:14,370 --> 00:12:15,540
brainstorming and I took a bunch of

287
00:12:15,540 --> 00:12:17,819
people and they individually have them

288
00:12:17,819 --> 00:12:19,019
work on tasks and they found that the

289
00:12:19,019 --> 00:12:20,939
people who were alone not only came up

290
00:12:20,939 --> 00:12:22,350
with more ideas but they came up with

291
00:12:22,350 --> 00:12:26,370
higher-quality ideas but would keep you

292
00:12:26,370 --> 00:12:28,319
know the idea that brainstorming was

293
00:12:28,319 --> 00:12:30,360
somehow a good idea it sounded good so

294
00:12:30,360 --> 00:12:32,850
people were willing to fall it 2003 they

295
00:12:32,850 --> 00:12:34,889
did another study in this case they had

296
00:12:34,889 --> 00:12:37,079
three groups they have the typical

297
00:12:37,079 --> 00:12:38,790
brainstorm erse then they have these

298
00:12:38,790 --> 00:12:40,350
this group where they said threw out

299
00:12:40,350 --> 00:12:44,910
ideas but debate criticized challenged

300
00:12:44,910 --> 00:12:47,639
your you know other group members and

301
00:12:47,639 --> 00:12:50,579
your own ideas and then one group was

302
00:12:50,579 --> 00:12:51,689
allowed to freely organize it did

303
00:12:51,689 --> 00:12:52,860
whatever they want they just said come

304
00:12:52,860 --> 00:12:57,180
on with ideas the debaters came up with

305
00:12:57,180 --> 00:12:59,129
more and better ideas

306
00:12:59,129 --> 00:13:02,399
criticism actually is productive when it

307
00:13:02,399 --> 00:13:04,920
comes to challenging when it comes to

308
00:13:04,920 --> 00:13:06,000
coming up with creative ideas

309
00:13:06,000 --> 00:13:08,160
challenging people's ideas forces them

310
00:13:08,160 --> 00:13:10,050
to go deeper into it or forces you to

311
00:13:10,050 --> 00:13:13,410
understand it better and then one other

312
00:13:13,410 --> 00:13:14,670
thing that was kind of interesting is

313
00:13:14,670 --> 00:13:17,279
that they looked at a correlation

314
00:13:17,279 --> 00:13:19,230
between the success of Broadway musicals

315
00:13:19,230 --> 00:13:21,329
and something that they called the Q

316
00:13:21,329 --> 00:13:23,759
factor the Q factor was essentially a

317
00:13:23,759 --> 00:13:26,819
measure of how familiar the team working

318
00:13:26,819 --> 00:13:29,309
on the musical was so if the team all

319
00:13:29,309 --> 00:13:31,110
knew each other well they'd all worked

320
00:13:31,110 --> 00:13:33,329
together before you'd have a very high Q

321
00:13:33,329 --> 00:13:35,040
factor and if they hadn't worked

322
00:13:35,040 --> 00:13:36,720
together at all you'd have a very low Q

323
00:13:36,720 --> 00:13:39,300
factor what they found was that there

324
00:13:39,300 --> 00:13:41,250
was a very high correlation between

325
00:13:41,250 --> 00:13:42,670
people

326
00:13:42,670 --> 00:13:43,780
doing teams that had sort of an

327
00:13:43,780 --> 00:13:45,820
intermediate q-factor where most of the

328
00:13:45,820 --> 00:13:47,470
team knew each other but a few of the

329
00:13:47,470 --> 00:13:51,040
people were new so they were able to

330
00:13:51,040 --> 00:13:53,020
communicate better about ideas and it

331
00:13:53,020 --> 00:13:55,090
was highly correlated to how successful

332
00:13:55,090 --> 00:13:58,150
the music music was so related to this

333
00:13:58,150 --> 00:14:01,030
idea of brainstorming and how it was

334
00:14:01,030 --> 00:14:02,130
sort of accepted without question

335
00:14:02,130 --> 00:14:06,640
because it sounded plausible and also

336
00:14:06,640 --> 00:14:09,340
the idea of someone like myself as an

337
00:14:09,340 --> 00:14:11,620
outside of this community coming in on

338
00:14:11,620 --> 00:14:13,990
suggesting things these two things sort

339
00:14:13,990 --> 00:14:15,850
of go together and say that it's

340
00:14:15,850 --> 00:14:19,180
possible that we can come up with better

341
00:14:19,180 --> 00:14:22,030
ideas if we collaborate and if we

342
00:14:22,030 --> 00:14:25,630
challenge the ideas that we have so you

343
00:14:25,630 --> 00:14:26,680
can read more about it this was

344
00:14:26,680 --> 00:14:27,550
published in The New Yorker magazine

345
00:14:27,550 --> 00:14:29,410
it's a it's a great article it's it's

346
00:14:29,410 --> 00:14:34,120
not very long what I what I see

347
00:14:34,120 --> 00:14:35,740
typically happening though and what I

348
00:14:35,740 --> 00:14:41,430
really want to help change essentially

349
00:14:41,430 --> 00:14:43,810
is this sort of idea how many people

350
00:14:43,810 --> 00:14:47,770
here know who Ward Cunningham is so Ward

351
00:14:47,770 --> 00:14:49,780
Cunningham among other things invented

352
00:14:49,780 --> 00:14:50,370
the wiki

353
00:14:50,370 --> 00:14:54,190
he's a major figure in computer

354
00:14:54,190 --> 00:14:57,840
programming and in computer science and

355
00:14:57,840 --> 00:15:00,220
Ward thinks nodejs is the future the

356
00:15:00,220 --> 00:15:03,130
server side and I don't have a problem

357
00:15:03,130 --> 00:15:04,900
with him saying that he may or may not

358
00:15:04,900 --> 00:15:07,030
be right what I have a problem with is

359
00:15:07,030 --> 00:15:09,460
that people are willing to say Ward said

360
00:15:09,460 --> 00:15:11,380
this so there's there must be some

361
00:15:11,380 --> 00:15:14,820
validity to it sort of similar to this

362
00:15:14,820 --> 00:15:17,170
successful and famous ad man saying this

363
00:15:17,170 --> 00:15:18,640
is brain storming this how you come out

364
00:15:18,640 --> 00:15:20,560
create solutions and people say okay

365
00:15:20,560 --> 00:15:25,120
that's what we'll do so recently I

366
00:15:25,120 --> 00:15:28,570
started reading this book if you read

367
00:15:28,570 --> 00:15:31,450
this book I guarantee you in fact I'll

368
00:15:31,450 --> 00:15:37,210
say this I will trust you I will pay the

369
00:15:37,210 --> 00:15:39,370
cost of this book if you read this book

370
00:15:39,370 --> 00:15:41,080
and you come back and you tell me

371
00:15:41,080 --> 00:15:43,000
honestly that this book did not

372
00:15:43,000 --> 00:15:47,800
significantly improve your life your

373
00:15:47,800 --> 00:15:50,290
your professional life your private life

374
00:15:50,290 --> 00:15:53,350
your experience of the world this is how

375
00:15:53,350 --> 00:15:55,540
important I think this book is this

376
00:15:55,540 --> 00:15:57,130
basically talks about the two ways that

377
00:15:57,130 --> 00:16:03,830
our brains function one way is this I

378
00:16:03,840 --> 00:16:06,190
challenge you to look at that word and

379
00:16:06,190 --> 00:16:10,060
one not know that it's bacon not it

380
00:16:10,060 --> 00:16:12,640
possibly smell see remember your last

381
00:16:12,640 --> 00:16:16,210
experience with bacon like many times

382
00:16:16,210 --> 00:16:17,590
the association's then you can possibly

383
00:16:17,590 --> 00:16:20,290
get your hands around it happens just

384
00:16:20,290 --> 00:16:22,210
instantly this is the fast thing and

385
00:16:22,210 --> 00:16:25,030
this is the part of our brain where some

386
00:16:25,030 --> 00:16:27,760
stimulus triggers an activation across a

387
00:16:27,760 --> 00:16:30,750
network and we have a flood of

388
00:16:30,750 --> 00:16:33,670
associations and ideas related to it it

389
00:16:33,670 --> 00:16:35,860
happens instantaneously it happens

390
00:16:35,860 --> 00:16:37,690
preconscious this is happening before we

391
00:16:37,690 --> 00:16:39,430
even realize that we're seeing bacon

392
00:16:39,430 --> 00:16:43,540
it's happening in our brains and then

393
00:16:43,540 --> 00:16:46,120
there's this if we were walking along

394
00:16:46,120 --> 00:16:47,560
and I said hey what's 23 times

395
00:16:47,560 --> 00:16:50,470
forty-seven you'd be like uh most likely

396
00:16:50,470 --> 00:16:51,610
you would you would stop walking

397
00:16:51,610 --> 00:16:54,070
something that we do so naturally right

398
00:16:54,070 --> 00:16:56,050
because a different part of our brain is

399
00:16:56,050 --> 00:16:58,000
activated a brain a part of our brain

400
00:16:58,000 --> 00:17:02,770
that is deliberate slow it has to think

401
00:17:02,770 --> 00:17:05,589
through things so much so that it might

402
00:17:05,589 --> 00:17:07,300
interfere with that doing something sort

403
00:17:07,300 --> 00:17:10,600
of autonomous almost like walking those

404
00:17:10,600 --> 00:17:13,030
two those two ways that we think are

405
00:17:13,030 --> 00:17:14,320
very very interesting there's a there's

406
00:17:14,320 --> 00:17:15,670
a ton of stuff in this book but one of

407
00:17:15,670 --> 00:17:16,810
the things that's really really

408
00:17:16,810 --> 00:17:19,000
interesting is that that's slow

409
00:17:19,000 --> 00:17:20,890
deliberate part of our brain the sort of

410
00:17:20,890 --> 00:17:22,930
the part that's sort of checking things

411
00:17:22,930 --> 00:17:24,910
out and making sure that you're not

412
00:17:24,910 --> 00:17:27,040
doing something stupid and that you're

413
00:17:27,040 --> 00:17:28,180
understanding what you're doing or

414
00:17:28,180 --> 00:17:30,310
solving a problem that part of our brain

415
00:17:30,310 --> 00:17:35,440
can be easily misled and one of the ways

416
00:17:35,440 --> 00:17:37,330
that it can be misled is if you feel

417
00:17:37,330 --> 00:17:39,820
comfortable so in this one experiment

418
00:17:39,820 --> 00:17:41,590
they had subjects put a pencil in their

419
00:17:41,590 --> 00:17:44,350
mouth like this right so their face was

420
00:17:44,350 --> 00:17:46,180
sort of in the shape of a smile they're

421
00:17:46,180 --> 00:17:48,640
relaxed and they were much more likely

422
00:17:48,640 --> 00:17:52,300
to accept a wrong answer than if you

423
00:17:52,300 --> 00:17:53,380
have the pencil in your mouth the other

424
00:17:53,380 --> 00:17:55,240
way so you are sort of squinting and

425
00:17:55,240 --> 00:17:58,600
frowning because when you do that that

426
00:17:58,600 --> 00:18:01,360
facial expression it also it's it's

427
00:18:01,360 --> 00:18:03,990
related to a feeling that you're you're

428
00:18:03,990 --> 00:18:06,809
you're exercising more

429
00:18:06,809 --> 00:18:09,190
it's like your there's a level of

430
00:18:09,190 --> 00:18:11,980
anxiety that improves your your slow

431
00:18:11,980 --> 00:18:13,840
thinking part of your brain that parts

432
00:18:13,840 --> 00:18:16,210
attention and you're less likely to

433
00:18:16,210 --> 00:18:20,289
accept the wrong answer so the reason

434
00:18:20,289 --> 00:18:22,990
why I think this is so so fascinating

435
00:18:22,990 --> 00:18:26,679
right is because I firmly believe this

436
00:18:26,679 --> 00:18:29,039
this was something that I sort of like

437
00:18:29,039 --> 00:18:33,159
realized recently I tweeted it Kent Beck

438
00:18:33,159 --> 00:18:35,769
reach we did it they sort of had a

439
00:18:35,769 --> 00:18:37,090
dialog with what number of people like

440
00:18:37,090 --> 00:18:38,580
what are you talking about it's like

441
00:18:38,580 --> 00:18:41,590
programming as science we use math we

442
00:18:41,590 --> 00:18:43,749
use computer science we you know

443
00:18:43,749 --> 00:18:46,809
algorithms you learn you know like Big O

444
00:18:46,809 --> 00:18:48,909
complexity you you know all these sorts

445
00:18:48,909 --> 00:18:50,440
of things that we do there's there's you

446
00:18:50,440 --> 00:18:50,830
know

447
00:18:50,830 --> 00:18:53,919
computability and and parsers and

448
00:18:53,919 --> 00:18:55,539
compilers and it's like how is that

449
00:18:55,539 --> 00:18:58,360
possibly anything like psychology or the

450
00:18:58,360 --> 00:18:59,830
other behavioral science as well

451
00:18:59,830 --> 00:19:03,129
behavioral science is essentially a

452
00:19:03,129 --> 00:19:07,350
discipline where you use observation and

453
00:19:07,350 --> 00:19:11,080
experimentation to figure out you know

454
00:19:11,080 --> 00:19:13,929
to look at interactions of organisms and

455
00:19:13,929 --> 00:19:15,970
organisms with their environment right

456
00:19:15,970 --> 00:19:18,039
so when you think about programming you

457
00:19:18,039 --> 00:19:19,360
think about when we solve problems

458
00:19:19,360 --> 00:19:21,249
think about methodologies like lean and

459
00:19:21,249 --> 00:19:26,559
agile XP think about when we do like

460
00:19:26,559 --> 00:19:28,629
talk to customers when we do interface

461
00:19:28,629 --> 00:19:30,009
development and we look at like

462
00:19:30,009 --> 00:19:31,960
interaction design principles we look at

463
00:19:31,960 --> 00:19:33,789
things like Gestalt psychology where

464
00:19:33,789 --> 00:19:36,039
we're looking at how we visually create

465
00:19:36,039 --> 00:19:39,070
holes like complete things gestalt so

466
00:19:39,070 --> 00:19:41,440
these sort of things every one of those

467
00:19:41,440 --> 00:19:43,450
things has to do with human functioning

468
00:19:43,450 --> 00:19:45,970
there's not math we apply math to a very

469
00:19:45,970 --> 00:19:48,039
small part of programming programming

470
00:19:48,039 --> 00:19:53,129
itself however is a behavioral science

471
00:19:53,129 --> 00:19:55,389
one of the really really interesting

472
00:19:55,389 --> 00:19:57,100
things about behavioral science there

473
00:19:57,100 --> 00:20:02,409
are now decades of research into how to

474
00:20:02,409 --> 00:20:05,049
study people and if you read that book

475
00:20:05,049 --> 00:20:08,379
Thinking Fast and Slow you will see some

476
00:20:08,379 --> 00:20:10,600
really hairy problems things that looked

477
00:20:10,600 --> 00:20:11,980
really tangled in there like is that

478
00:20:11,980 --> 00:20:14,139
this is at that and through ingenious

479
00:20:14,139 --> 00:20:15,909
experiments they were able to sort of

480
00:20:15,909 --> 00:20:18,190
disentangle it and tease out answers to

481
00:20:18,190 --> 00:20:19,670
these questions

482
00:20:19,670 --> 00:20:21,680
but what's distressing is that your

483
00:20:21,680 --> 00:20:25,940
average undergrad in psychology has

484
00:20:25,940 --> 00:20:28,460
better understanding of research methods

485
00:20:28,460 --> 00:20:30,320
I think because they typically have to

486
00:20:30,320 --> 00:20:33,680
take a class then your typical PhD in

487
00:20:33,680 --> 00:20:37,940
computer science but what are research

488
00:20:37,940 --> 00:20:42,350
methods research methods are a means of

489
00:20:42,350 --> 00:20:45,500
trying to arrive at the answer to

490
00:20:45,500 --> 00:20:47,780
whether something is valid or not if I

491
00:20:47,780 --> 00:20:50,270
say to you brainstorming is this and

492
00:20:50,270 --> 00:20:52,370
this is how you get you know better

493
00:20:52,370 --> 00:20:55,190
creative ideas how do I challenge the

494
00:20:55,190 --> 00:20:57,170
validity of that how do i how do I know

495
00:20:57,170 --> 00:21:01,340
whether that's true or not research

496
00:21:01,340 --> 00:21:03,410
methods basically look at two sorts of

497
00:21:03,410 --> 00:21:05,210
things about about reality there's this

498
00:21:05,210 --> 00:21:07,010
idea of metaphysics which is basically

499
00:21:07,010 --> 00:21:09,650
sort of the nature of the universe right

500
00:21:09,650 --> 00:21:11,390
and then there is this idea of

501
00:21:11,390 --> 00:21:14,000
epistemology which is essentially a

502
00:21:14,000 --> 00:21:16,010
theory of knowledge it's what we can

503
00:21:16,010 --> 00:21:19,450
know about the universe these two

504
00:21:19,450 --> 00:21:21,920
aspects are really important in coming

505
00:21:21,920 --> 00:21:26,870
up with an understanding or a decision

506
00:21:26,870 --> 00:21:28,580
on whether something is valid right the

507
00:21:28,580 --> 00:21:38,660
validity so yeah what I want us to do is

508
00:21:38,660 --> 00:21:44,630
to think about technology now coming

509
00:21:44,630 --> 00:21:46,880
back from from this idea this this

510
00:21:46,880 --> 00:21:49,130
generic idea about behavioral science

511
00:21:49,130 --> 00:21:50,990
and computers is up and I want to think

512
00:21:50,990 --> 00:21:54,620
about something that is concrete like in

513
00:21:54,620 --> 00:21:58,370
the case of no yes no no js' is about

514
00:21:58,370 --> 00:22:02,300
how to create essentially services

515
00:22:02,300 --> 00:22:05,420
servers you know solutions to problems

516
00:22:05,420 --> 00:22:09,160
that have to deal with concurrency right

517
00:22:09,160 --> 00:22:11,000
if you didn't have to deal with

518
00:22:11,000 --> 00:22:14,300
concurrency it wouldn't matter if your

519
00:22:14,300 --> 00:22:19,220
i/o were blocking right so a sort of a

520
00:22:19,220 --> 00:22:22,040
quick history of concurrency I think is

521
00:22:22,040 --> 00:22:25,070
important to consider I think this is

522
00:22:25,070 --> 00:22:27,440
true and I say this without any judgment

523
00:22:27,440 --> 00:22:29,660
I'm a person programmers or people we're

524
00:22:29,660 --> 00:22:31,820
all people but I think people in general

525
00:22:31,820 --> 00:22:33,159
are selfish

526
00:22:33,159 --> 00:22:34,720
they are lazy and they are easily bored

527
00:22:34,720 --> 00:22:39,820
and why that's important is that you

528
00:22:39,820 --> 00:22:41,739
combine it with scarcity the fact that

529
00:22:41,739 --> 00:22:43,599
every little compute task that we need

530
00:22:43,599 --> 00:22:44,979
if we had you know

531
00:22:44,979 --> 00:22:47,470
uncountable computers then every little

532
00:22:47,470 --> 00:22:49,059
thing we needed to have done could be

533
00:22:49,059 --> 00:22:50,830
done you know what computer computer

534
00:22:50,830 --> 00:22:52,809
career that's all done no problem

535
00:22:52,809 --> 00:22:54,820
combine that with with with the idea of

536
00:22:54,820 --> 00:22:56,889
scarcity and you have this this issue of

537
00:22:56,889 --> 00:22:59,259
concurrency which is basically basically

538
00:22:59,259 --> 00:23:02,649
the idea that you take a program the

539
00:23:02,649 --> 00:23:04,149
instructions of the program and you and

540
00:23:04,149 --> 00:23:06,399
you look at every possible interleaving

541
00:23:06,399 --> 00:23:07,629
of those purpose so if you have one two

542
00:23:07,629 --> 00:23:08,950
three four you can put them in one two

543
00:23:08,950 --> 00:23:10,570
three or you put two one three four you

544
00:23:10,570 --> 00:23:12,489
could put four three one two right every

545
00:23:12,489 --> 00:23:14,049
possible interleaving of those

546
00:23:14,049 --> 00:23:16,179
instructions is what concurrency really

547
00:23:16,179 --> 00:23:19,509
is about you take a program and we'll

548
00:23:19,509 --> 00:23:22,299
say that a program has a routine and it

549
00:23:22,299 --> 00:23:25,629
have one or more routines and for

550
00:23:25,629 --> 00:23:27,070
simplicity sake let's say that the

551
00:23:27,070 --> 00:23:31,029
program P runs this routine if that

552
00:23:31,029 --> 00:23:33,190
routine which is doing some computations

553
00:23:33,190 --> 00:23:34,869
some sort of work Waits

554
00:23:34,869 --> 00:23:38,169
then the whole program waits right

555
00:23:38,169 --> 00:23:40,509
however this is the most efficient way

556
00:23:40,509 --> 00:23:44,789
to deal with the the process of of

557
00:23:44,789 --> 00:23:46,629
computing this thing and this is the way

558
00:23:46,629 --> 00:23:48,909
computers used to work right you would

559
00:23:48,909 --> 00:23:51,309
submit your job nothing else would run

560
00:23:51,309 --> 00:23:53,109
on the computer your job would run all

561
00:23:53,109 --> 00:23:55,090
the way until it was finished you would

562
00:23:55,090 --> 00:23:56,529
get your result in the next person whom

563
00:23:56,529 --> 00:23:57,820
get in line they would Smith their job

564
00:23:57,820 --> 00:24:01,899
run all the way through but people are

565
00:24:01,899 --> 00:24:03,549
selfish I don't want to wait for you why

566
00:24:03,549 --> 00:24:05,710
can't my job oops sorry why can't my job

567
00:24:05,710 --> 00:24:09,070
run before yours people are lazy they

568
00:24:09,070 --> 00:24:10,359
really don't want to go through all the

569
00:24:10,359 --> 00:24:11,590
trouble to put all the things in line

570
00:24:11,590 --> 00:24:13,960
put in there and make the computer

571
00:24:13,960 --> 00:24:16,179
efficient and they're also easily bored

572
00:24:16,179 --> 00:24:17,769
right they're gonna be like sitting

573
00:24:17,769 --> 00:24:18,970
around I'd be like what the hell I'm not

574
00:24:18,970 --> 00:24:22,629
waiting for this thing to be done so

575
00:24:22,629 --> 00:24:25,419
what you end up with like when things

576
00:24:25,419 --> 00:24:28,299
can only be done one at a time the only

577
00:24:28,299 --> 00:24:30,159
thing that you can do is instead of like

578
00:24:30,159 --> 00:24:32,229
completing this job completely you have

579
00:24:32,229 --> 00:24:33,820
to say oh I'll do a little bit of that

580
00:24:33,820 --> 00:24:35,830
job I'll do a little bit of that job and

581
00:24:35,830 --> 00:24:37,200
I'll do a little bit of that job

582
00:24:37,200 --> 00:24:40,239
ultimately it takes longer to do all

583
00:24:40,239 --> 00:24:41,859
those things because that switching is

584
00:24:41,859 --> 00:24:43,749
not free so we're not using the computer

585
00:24:43,749 --> 00:24:45,610
as efficiently as we

586
00:24:45,610 --> 00:24:47,980
would be if we could just do one job and

587
00:24:47,980 --> 00:24:51,490
then do the next job but we have to have

588
00:24:51,490 --> 00:24:53,049
some sort of concurrency so then it

589
00:24:53,049 --> 00:24:55,000
becomes a question of what do we use as

590
00:24:55,000 --> 00:24:57,880
the pivot essentially what do we use as

591
00:24:57,880 --> 00:25:01,330
the the trigger where we say we'll

592
00:25:01,330 --> 00:25:03,070
switch from this job of this job and I

593
00:25:03,070 --> 00:25:04,630
think there's basically three things

594
00:25:04,630 --> 00:25:07,090
that you can use you can use time time

595
00:25:07,090 --> 00:25:09,160
is kind of orthogonal to your program in

596
00:25:09,160 --> 00:25:11,049
a sense right because whatever your

597
00:25:11,049 --> 00:25:12,970
program is doing time is just going to

598
00:25:12,970 --> 00:25:14,230
continue right along it doesn't really

599
00:25:14,230 --> 00:25:19,570
care or you can use state right or you

600
00:25:19,570 --> 00:25:20,440
can use what I'm going to call

601
00:25:20,440 --> 00:25:22,299
transitions which is essentially the

602
00:25:22,299 --> 00:25:24,340
idea of i/o so your program is computing

603
00:25:24,340 --> 00:25:26,290
something and then it changes over here

604
00:25:26,290 --> 00:25:30,760
to reading something from i/o okay if

605
00:25:30,760 --> 00:25:36,280
you saw the talk about River Trail that

606
00:25:36,280 --> 00:25:39,240
it'd be using data concurrency or

607
00:25:39,240 --> 00:25:41,620
basically data flow to deal with

608
00:25:41,620 --> 00:25:43,270
concurrency that's sort of a different

609
00:25:43,270 --> 00:25:44,980
way but basically there has to be some

610
00:25:44,980 --> 00:25:47,049
way that you are going to switch between

611
00:25:47,049 --> 00:25:49,720
these tasks and what was developed very

612
00:25:49,720 --> 00:25:51,280
early was just simply this idea of like

613
00:25:51,280 --> 00:25:55,179
if I get to a point I can stop and then

614
00:25:55,179 --> 00:25:57,220
later somebody else can resume me so you

615
00:25:57,220 --> 00:25:59,440
get this idea of of cooperative

616
00:25:59,440 --> 00:26:03,880
multitasking right very early way of

617
00:26:03,880 --> 00:26:05,500
adding concurrency to essentially a

618
00:26:05,500 --> 00:26:09,340
sequential process or you can use a time

619
00:26:09,340 --> 00:26:11,380
slice and that is you get to run for

620
00:26:11,380 --> 00:26:12,580
this long and then you get to run for

621
00:26:12,580 --> 00:26:13,660
this long and you get to run for this

622
00:26:13,660 --> 00:26:14,980
long and you have pre-emptive

623
00:26:14,980 --> 00:26:19,990
multitasking the whole point of those

624
00:26:19,990 --> 00:26:23,080
two things is that the basic node sort

625
00:26:23,080 --> 00:26:25,660
of argument about events versus threads

626
00:26:25,660 --> 00:26:32,650
is really apples and oranges right the

627
00:26:32,650 --> 00:26:34,690
the idea that you have to have some

628
00:26:34,690 --> 00:26:37,059
mechanism of switching between those

629
00:26:37,059 --> 00:26:40,120
tasks to run things concurrently is much

630
00:26:40,120 --> 00:26:42,040
more central and it's actually possible

631
00:26:42,040 --> 00:26:47,260
to do things that are claimed that node

632
00:26:47,260 --> 00:26:49,179
can do only because of the non blocking

633
00:26:49,179 --> 00:26:51,540
i/o it's possible to do those with

634
00:26:51,540 --> 00:26:55,030
threaded pre-emptive multitasking as

635
00:26:55,030 --> 00:26:57,730
well the question is how many resources

636
00:26:57,730 --> 00:26:58,700
it takes

637
00:26:58,700 --> 00:27:01,460
to do one or the other and those things

638
00:27:01,460 --> 00:27:03,110
aren't fixed they're very much dependent

639
00:27:03,110 --> 00:27:10,070
on implementation and the whole idea of

640
00:27:10,070 --> 00:27:12,530
like that just to sort of put this out

641
00:27:12,530 --> 00:27:14,390
there the whole idea of IO being

642
00:27:14,390 --> 00:27:17,030
non-blocking i/o is never non-blocking

643
00:27:17,030 --> 00:27:20,120
right it never is it's where you draw

644
00:27:20,120 --> 00:27:22,250
the line in your program if something

645
00:27:22,250 --> 00:27:26,690
has to block it has to block right OS

646
00:27:26,690 --> 00:27:30,050
though the people who write OSS deal

647
00:27:30,050 --> 00:27:33,740
with not waiting on IO that's how the

648
00:27:33,740 --> 00:27:34,850
threading scheduler works

649
00:27:34,850 --> 00:27:37,520
oh that process is waiting on my oh I'm

650
00:27:37,520 --> 00:27:40,400
going to suspend it right so that's

651
00:27:40,400 --> 00:27:42,290
exactly the same thing that note has to

652
00:27:42,290 --> 00:27:44,450
do internally when it says are you ready

653
00:27:44,450 --> 00:27:46,700
to read nope okay you're suspended are

654
00:27:46,700 --> 00:27:48,560
you ready to read nope you're suspended

655
00:27:48,560 --> 00:27:50,120
are you ready to read oh you are okay

656
00:27:50,120 --> 00:27:53,300
we'll let you read so the fundamental

657
00:27:53,300 --> 00:27:55,310
technology under pre-emptive

658
00:27:55,310 --> 00:27:57,100
multitasking with threads and

659
00:27:57,100 --> 00:28:00,170
non-blocking i/o with no GS and doing

660
00:28:00,170 --> 00:28:04,490
task switching is really the same the

661
00:28:04,490 --> 00:28:06,500
implications for our programs on top of

662
00:28:06,500 --> 00:28:08,450
that how many resources we actually need

663
00:28:08,450 --> 00:28:11,540
to be able to use to get those benefits

664
00:28:11,540 --> 00:28:13,340
and to actually get concurrency is what

665
00:28:13,340 --> 00:28:18,830
differs so to switch gears just a little

666
00:28:18,830 --> 00:28:21,020
bit one of the things that's really

667
00:28:21,020 --> 00:28:22,190
interesting to me are some of the

668
00:28:22,190 --> 00:28:24,650
justifications that I hear for using no

669
00:28:24,650 --> 00:28:27,050
GS I just want to run by some of those

670
00:28:27,050 --> 00:28:28,670
but basically I want to I want to put

671
00:28:28,670 --> 00:28:31,760
this into a framework that we can that

672
00:28:31,760 --> 00:28:34,250
we can talk about in a way that's

673
00:28:34,250 --> 00:28:35,840
helpful that we can actually communicate

674
00:28:35,840 --> 00:28:37,580
about and one of the things that I think

675
00:28:37,580 --> 00:28:39,200
is really interesting is if I have two

676
00:28:39,200 --> 00:28:41,330
things an x and a y and i make a

677
00:28:41,330 --> 00:28:44,780
statement about one of them right like

678
00:28:44,780 --> 00:28:47,180
if I apply my statement to one I apply

679
00:28:47,180 --> 00:28:49,130
my statements together and the relation

680
00:28:49,130 --> 00:28:52,190
between those is this so J of X is

681
00:28:52,190 --> 00:28:56,300
greater than J of Y nodejs is better

682
00:28:56,300 --> 00:29:01,190
than Ruby and I have some X Prime that's

683
00:29:01,190 --> 00:29:03,860
equivalent in a way some congruent right

684
00:29:03,860 --> 00:29:06,560
so you have two right triangles if this

685
00:29:06,560 --> 00:29:08,090
the the sides of the legs are are

686
00:29:08,090 --> 00:29:09,740
different the angles are the same

687
00:29:09,740 --> 00:29:10,490
they're congroo

688
00:29:10,490 --> 00:29:11,720
triangles are essentially like the same

689
00:29:11,720 --> 00:29:13,010
triangle even though they don't look

690
00:29:13,010 --> 00:29:15,710
exactly the same if I have some X that's

691
00:29:15,710 --> 00:29:18,170
congruent to X our X prime is congruent

692
00:29:18,170 --> 00:29:20,679
to X and y prime is congruent to Y I

693
00:29:20,679 --> 00:29:24,590
would want to be able to infer that if I

694
00:29:24,590 --> 00:29:26,720
apply that argument to that thing that's

695
00:29:26,720 --> 00:29:28,730
congruent it would come out with the

696
00:29:28,730 --> 00:29:30,320
same relation it would be really crazy

697
00:29:30,320 --> 00:29:33,440
right if at the bottom that relation was

698
00:29:33,440 --> 00:29:38,870
switched right so there's this idea that

699
00:29:38,870 --> 00:29:40,790
node gives you the ability to use the

700
00:29:40,790 --> 00:29:44,630
same language on the client server some

701
00:29:44,630 --> 00:29:45,830
of the people I hear making this

702
00:29:45,830 --> 00:29:49,610
argument are also people who claim that

703
00:29:49,610 --> 00:29:51,559
their polyglots they're like it doesn't

704
00:29:51,559 --> 00:29:52,640
matter I can use this language of

705
00:29:52,640 --> 00:29:54,500
similar strange but in this case it's

706
00:29:54,500 --> 00:29:56,210
really important that I'd be able to use

707
00:29:56,210 --> 00:29:57,890
the same language on the on the client

708
00:29:57,890 --> 00:30:00,200
and the server and I find that argument

709
00:30:00,200 --> 00:30:02,929
to be missing a little something

710
00:30:02,929 --> 00:30:04,730
somewhere if it's really okay that

711
00:30:04,730 --> 00:30:06,410
you're a polyglot and you can use

712
00:30:06,410 --> 00:30:08,360
multiple languages then why is it a

713
00:30:08,360 --> 00:30:10,550
point that it's important that you be

714
00:30:10,550 --> 00:30:11,720
able to use the same language on the

715
00:30:11,720 --> 00:30:15,110
client and the server right I don't I'm

716
00:30:15,110 --> 00:30:16,760
not like making a judgement about the

717
00:30:16,760 --> 00:30:18,800
argument I'm just saying that that seems

718
00:30:18,800 --> 00:30:20,510
like a there seems to be some

719
00:30:20,510 --> 00:30:22,880
disagreement there there's also this

720
00:30:22,880 --> 00:30:24,380
idea that there are many JavaScript

721
00:30:24,380 --> 00:30:26,450
programmers and I think that's important

722
00:30:26,450 --> 00:30:28,550
I think that in any language the more

723
00:30:28,550 --> 00:30:30,530
people we have that are able to do some

724
00:30:30,530 --> 00:30:32,330
sort of automation the better it is

725
00:30:32,330 --> 00:30:35,809
because computer literacy is the

726
00:30:35,809 --> 00:30:37,900
literacy of this century right

727
00:30:37,900 --> 00:30:39,950
reading and writing was important last

728
00:30:39,950 --> 00:30:41,679
century knowing how to deal with

729
00:30:41,679 --> 00:30:44,150
computers and do basic automation is

730
00:30:44,150 --> 00:30:46,790
going to be really really important but

731
00:30:46,790 --> 00:30:48,770
what's interesting about that is that if

732
00:30:48,770 --> 00:30:50,750
you're claiming that this technology is

733
00:30:50,750 --> 00:30:53,240
better because it uses JavaScript and we

734
00:30:53,240 --> 00:30:56,140
look at statistical distribution of

735
00:30:56,140 --> 00:30:59,090
qualifications across a population just

736
00:30:59,090 --> 00:31:01,550
because there are more people using a

737
00:31:01,550 --> 00:31:03,440
particular language does not mean that

738
00:31:03,440 --> 00:31:04,970
you're going to have more people writing

739
00:31:04,970 --> 00:31:08,480
good solutions in that language so not

740
00:31:08,480 --> 00:31:11,000
that you won't but that we should keep

741
00:31:11,000 --> 00:31:13,130
those things separate right if we want

742
00:31:13,130 --> 00:31:15,260
to write really good solutions in a

743
00:31:15,260 --> 00:31:16,910
particular language we need to focus on

744
00:31:16,910 --> 00:31:19,850
resources education tutorials all these

745
00:31:19,850 --> 00:31:21,140
sort of things that produce good

746
00:31:21,140 --> 00:31:23,150
programs not just that we have a larger

747
00:31:23,150 --> 00:31:23,549
number

748
00:31:23,549 --> 00:31:25,259
people making programs because remember

749
00:31:25,259 --> 00:31:26,489
what we're trying to do is solve hard

750
00:31:26,489 --> 00:31:27,989
problems there's a lot of stuff that

751
00:31:27,989 --> 00:31:30,720
needs to be fixing school so we want to

752
00:31:30,720 --> 00:31:33,869
be effective the other one is that just

753
00:31:33,869 --> 00:31:35,789
know GS is fun there's a lot of

754
00:31:35,789 --> 00:31:37,590
excitement and enthusiasm about no GS

755
00:31:37,590 --> 00:31:39,289
people are writing libraries like crazy

756
00:31:39,289 --> 00:31:42,029
they're having a lot of fun and that's

757
00:31:42,029 --> 00:31:43,350
good that's something I'm really

758
00:31:43,350 --> 00:31:45,239
familiar with from Ruby from the Ruby

759
00:31:45,239 --> 00:31:47,970
community from growing up with early

760
00:31:47,970 --> 00:31:49,830
rails and people having a great time

761
00:31:49,830 --> 00:31:52,440
building things excited about the

762
00:31:52,440 --> 00:31:55,879
technology okay

763
00:31:55,879 --> 00:31:57,840
because I didn't want to disappoint you

764
00:31:57,840 --> 00:31:59,820
guys I am going to actually throw a

765
00:31:59,820 --> 00:32:03,190
little controversy in here

766
00:32:03,200 --> 00:32:06,450
these are my opinions and they may be

767
00:32:06,450 --> 00:32:09,210
wrong and what I hope more than anything

768
00:32:09,210 --> 00:32:11,580
is that you don't either agree or

769
00:32:11,580 --> 00:32:13,799
disagree with me but that you remember

770
00:32:13,799 --> 00:32:14,879
that I was talking about something like

771
00:32:14,879 --> 00:32:16,799
research methods and that book Thinking

772
00:32:16,799 --> 00:32:18,809
Fast and Slow and you take what I say

773
00:32:18,809 --> 00:32:22,679
and subject it to criticism think about

774
00:32:22,679 --> 00:32:26,249
it critically my concern with no jess is

775
00:32:26,249 --> 00:32:29,009
that it rejects reality and what I mean

776
00:32:29,009 --> 00:32:34,309
by that is that multicore is the future

777
00:32:34,309 --> 00:32:36,690
everything is going to have more and

778
00:32:36,690 --> 00:32:39,119
more cores and it's going to be more and

779
00:32:39,119 --> 00:32:41,159
more important to be able to utilize the

780
00:32:41,159 --> 00:32:45,119
compute resources with not while not

781
00:32:45,119 --> 00:32:47,070
like ballooning the amount of memory

782
00:32:47,070 --> 00:32:49,289
resources that you need memory is still

783
00:32:49,289 --> 00:32:52,169
you know like football fields away from

784
00:32:52,169 --> 00:32:54,749
the chip if you can keep things on chip

785
00:32:54,749 --> 00:32:56,309
and you can keep those cores busy you

786
00:32:56,309 --> 00:33:00,179
can do a lot more computation note is

787
00:33:00,179 --> 00:33:03,989
still single threaded no matter what

788
00:33:03,989 --> 00:33:05,970
non-blocking i/o you make and how

789
00:33:05,970 --> 00:33:07,769
perfect you make it there is still one

790
00:33:07,769 --> 00:33:11,190
thing running at a time if you have four

791
00:33:11,190 --> 00:33:14,070
cores you have to have four processes or

792
00:33:14,070 --> 00:33:15,989
you have to have threads if you add

793
00:33:15,989 --> 00:33:16,559
threads

794
00:33:16,559 --> 00:33:17,580
I don't think threads are going to get

795
00:33:17,580 --> 00:33:18,869
into JavaScript as the language you're

796
00:33:18,869 --> 00:33:21,049
going to have some sort of non-standard

797
00:33:21,049 --> 00:33:22,950
implementation of threads that is

798
00:33:22,950 --> 00:33:26,519
outside of JavaScript but it's the only

799
00:33:26,519 --> 00:33:28,619
way that you're going to utilize more

800
00:33:28,619 --> 00:33:31,049
than one core in a single process that

801
00:33:31,049 --> 00:33:34,559
concerns me tremendously we spent we

802
00:33:34,559 --> 00:33:36,029
spent five years working on Rubinius we

803
00:33:36,029 --> 00:33:36,999
spent a good

804
00:33:36,999 --> 00:33:39,189
year and a half two years completely

805
00:33:39,189 --> 00:33:40,719
rewriting the architecture so that we

806
00:33:40,719 --> 00:33:43,059
could do basically two things right a

807
00:33:43,059 --> 00:33:45,189
good just-in-time compiler and remove

808
00:33:45,189 --> 00:33:47,499
the global interpreter lock by the time

809
00:33:47,499 --> 00:33:49,059
I got done doing all the architectural

810
00:33:49,059 --> 00:33:49,509
stuff

811
00:33:49,509 --> 00:33:52,359
Evon remove the global interpreter lock

812
00:33:52,359 --> 00:33:55,659
in about three weeks of work we took one

813
00:33:55,659 --> 00:33:58,239
one lock we have about fifty or sixty

814
00:33:58,239 --> 00:34:00,549
finer grain locks we have to deal with

815
00:34:00,549 --> 00:34:02,759
some issues but basically you can run

816
00:34:02,759 --> 00:34:06,129
multiple threads Ruby threads in

817
00:34:06,129 --> 00:34:09,039
parallel now and Rubinius that's where

818
00:34:09,039 --> 00:34:11,169
chip manufacturers are going the other

819
00:34:11,169 --> 00:34:12,700
thing that concerns me is that there is

820
00:34:12,700 --> 00:34:14,789
an entire ecosystem of tools and

821
00:34:14,789 --> 00:34:18,869
libraries that must be created right

822
00:34:18,869 --> 00:34:20,859
there's all kinds of things that

823
00:34:20,859 --> 00:34:24,399
javascript was never sort of envisioned

824
00:34:24,399 --> 00:34:26,589
doing that it's able to do now but it

825
00:34:26,589 --> 00:34:28,240
requires a great deal of work to get

826
00:34:28,240 --> 00:34:28,859
there

827
00:34:28,859 --> 00:34:31,179
there are opportunity costs for

828
00:34:31,179 --> 00:34:34,389
everything if I spend an hour writing a

829
00:34:34,389 --> 00:34:36,099
node.js library that's an hour that I

830
00:34:36,099 --> 00:34:38,889
can't spend doing anything else right so

831
00:34:38,889 --> 00:34:40,179
their opportunity costs there are things

832
00:34:40,179 --> 00:34:43,359
that you have to pay right to build

833
00:34:43,359 --> 00:34:45,119
these things that you can't ever do

834
00:34:45,119 --> 00:34:47,079
something else with that time that you

835
00:34:47,079 --> 00:34:49,779
spent the other thing is that even

836
00:34:49,779 --> 00:34:51,549
though we're reimplemented stuff that

837
00:34:51,549 --> 00:34:54,190
the JVM did we're making mistakes right

838
00:34:54,190 --> 00:34:56,740
in rubinius we have to fix those no

839
00:34:56,740 --> 00:34:58,750
matter how much you learn from the past

840
00:34:58,750 --> 00:35:01,089
as you go to redo things you're going to

841
00:35:01,089 --> 00:35:03,970
make some of those spikes I feel that

842
00:35:03,970 --> 00:35:07,089
node is going to sort of replay some of

843
00:35:07,089 --> 00:35:08,740
the mistakes that say Ruby has made in

844
00:35:08,740 --> 00:35:09,579
the last 50 years

845
00:35:09,579 --> 00:35:12,160
you know MRI is still single threaded it

846
00:35:12,160 --> 00:35:16,720
still has a fairly primitive and not

847
00:35:16,720 --> 00:35:21,789
good garbage collector and note is going

848
00:35:21,789 --> 00:35:23,140
to have to deal with those same issues

849
00:35:23,140 --> 00:35:23,950
it's going to have to be able to

850
00:35:23,950 --> 00:35:25,240
concurrency it's going to have to deal

851
00:35:25,240 --> 00:35:26,529
with garbage collection it's going to

852
00:35:26,529 --> 00:35:27,970
have to deal with process stuff across

853
00:35:27,970 --> 00:35:29,789
different OSS all this sort of stuff and

854
00:35:29,789 --> 00:35:33,400
I know this I know this is because I see

855
00:35:33,400 --> 00:35:35,890
it happening already passenger is a way

856
00:35:35,890 --> 00:35:38,109
to run multiple Ruby processes so you

857
00:35:38,109 --> 00:35:39,849
can get some sort of concurrency on

858
00:35:39,849 --> 00:35:43,869
these multi-core systems cluster is a

859
00:35:43,869 --> 00:35:45,819
system much like passenger to run

860
00:35:45,819 --> 00:35:47,769
multiple node processes so you can get

861
00:35:47,769 --> 00:35:49,809
process level concurrency

862
00:35:49,809 --> 00:35:51,809
so this is already happening

863
00:35:51,809 --> 00:35:54,999
unfortunately I firmly believe and I

864
00:35:54,999 --> 00:35:56,589
could be wrong but I firmly believe that

865
00:35:56,589 --> 00:35:59,799
process concurrency is doomed it leads

866
00:35:59,799 --> 00:36:01,660
to things like do you have a copy on

867
00:36:01,660 --> 00:36:03,670
right friendly GC you know how crazy

868
00:36:03,670 --> 00:36:05,619
hard GC is and then you want to add

869
00:36:05,619 --> 00:36:07,209
copy-on-write friendly guess what

870
00:36:07,209 --> 00:36:09,999
programs have a ton of state every time

871
00:36:09,999 --> 00:36:12,069
you load a library you are loading a ton

872
00:36:12,069 --> 00:36:14,049
of state everything you initialize there

873
00:36:14,049 --> 00:36:16,779
is a ton of state garbage collection is

874
00:36:16,779 --> 00:36:19,660
this big why it's basically saying you

875
00:36:19,660 --> 00:36:22,539
have infinite memory and the garbage

876
00:36:22,539 --> 00:36:24,039
collector is what is maintaining that

877
00:36:24,039 --> 00:36:26,259
life for you you allocate like you have

878
00:36:26,259 --> 00:36:28,029
infinite memory and the garbage

879
00:36:28,029 --> 00:36:29,439
collector make sure that it fits in this

880
00:36:29,439 --> 00:36:34,180
little finite box right as soon as you

881
00:36:34,180 --> 00:36:35,680
start multiplying your processes your

882
00:36:35,680 --> 00:36:38,469
memory pressure goes linear right and

883
00:36:38,469 --> 00:36:42,160
sometimes worse and then you don't have

884
00:36:42,160 --> 00:36:45,219
room on that that resource that box but

885
00:36:45,219 --> 00:36:46,959
things like local caching and other

886
00:36:46,959 --> 00:36:48,249
stuff like if you want to do a memcache

887
00:36:48,249 --> 00:36:50,170
D or something like that so I think

888
00:36:50,170 --> 00:36:52,239
process concurrency is really really

889
00:36:52,239 --> 00:36:54,759
doomed the other thing that concerns me

890
00:36:54,759 --> 00:36:57,249
is these two ideas and I'm again I'm not

891
00:36:57,249 --> 00:36:59,229
saying whether this is right or wrong or

892
00:36:59,229 --> 00:37:01,749
whether no Jess succeeds or fails here

893
00:37:01,749 --> 00:37:03,279
but I really want you to think about two

894
00:37:03,279 --> 00:37:06,039
things there's this idea of symmetric

895
00:37:06,039 --> 00:37:09,249
errors when an error occurs if the

896
00:37:09,249 --> 00:37:12,279
person using the program can sort of

897
00:37:12,279 --> 00:37:14,289
understand the context of the air from

898
00:37:14,289 --> 00:37:15,969
the air itself then you have a symmetric

899
00:37:15,969 --> 00:37:18,579
error if you've ever used Windows and

900
00:37:18,579 --> 00:37:23,199
you get like air one zero four five okay

901
00:37:23,199 --> 00:37:25,299
right anybody ever see that dialog box

902
00:37:25,299 --> 00:37:27,009
you know that sort of thing that is not

903
00:37:27,009 --> 00:37:29,349
a symmetric air no idea what happened

904
00:37:29,349 --> 00:37:30,999
right you just completely lost or like

905
00:37:30,999 --> 00:37:33,039
okay I guess it's okay what else can you

906
00:37:33,039 --> 00:37:34,989
say right so that's a violation of this

907
00:37:34,989 --> 00:37:37,089
idea of symmetric errors the other thing

908
00:37:37,089 --> 00:37:39,819
is chain of evidence chain of evidence

909
00:37:39,819 --> 00:37:41,410
is critical in understanding why a

910
00:37:41,410 --> 00:37:43,630
system fails if you've ever had to deal

911
00:37:43,630 --> 00:37:45,699
with say a null pointer you never had to

912
00:37:45,699 --> 00:37:47,679
debug a seg fault right seg faults

913
00:37:47,679 --> 00:37:50,229
happened typically so far away from

914
00:37:50,229 --> 00:37:52,420
where that value became a null right and

915
00:37:52,420 --> 00:37:54,279
then somewhere over here you're reading

916
00:37:54,279 --> 00:37:57,670
from zero segmentation violation you're

917
00:37:57,670 --> 00:37:59,170
you're out of there right yeah I kow

918
00:37:59,170 --> 00:38:00,880
where where do they come from how do I

919
00:38:00,880 --> 00:38:03,279
find it right it's those errors are so

920
00:38:03,279 --> 00:38:04,689
incredibly hard because the chain of

921
00:38:04,689 --> 00:38:07,059
evidence on how a value became null and

922
00:38:07,059 --> 00:38:09,160
how it got propagated through is really

923
00:38:09,160 --> 00:38:13,089
really hard we're fairly simple that

924
00:38:13,089 --> 00:38:14,679
deliberative part of our brain that can

925
00:38:14,679 --> 00:38:16,959
think about something like should I do

926
00:38:16,959 --> 00:38:19,269
this then should I do this has trouble

927
00:38:19,269 --> 00:38:20,920
doing something like multiplying 23 by

928
00:38:20,920 --> 00:38:22,989
47 it's actually a hard thing to do and

929
00:38:22,989 --> 00:38:25,900
so if we're not being really really

930
00:38:25,900 --> 00:38:27,309
careful the chain of evidence we are

931
00:38:27,309 --> 00:38:29,199
potentially making it incredibly hard

932
00:38:29,199 --> 00:38:31,719
for people to debug for people to

933
00:38:31,719 --> 00:38:34,029
understand systems if it's hard to debug

934
00:38:34,029 --> 00:38:35,679
it's hard to build systems it's hard to

935
00:38:35,679 --> 00:38:37,359
change systems we're going to be doing

936
00:38:37,359 --> 00:38:39,069
less we're going to be accomplishing

937
00:38:39,069 --> 00:38:41,650
less than we would otherwise so that's

938
00:38:41,650 --> 00:38:45,890
why that's important one last thought

939
00:38:45,900 --> 00:38:47,799
there are multiple ways to do

940
00:38:47,799 --> 00:38:49,989
concurrency there are fascinating things

941
00:38:49,989 --> 00:38:51,910
with concurrency if anyone tells you

942
00:38:51,910 --> 00:38:53,619
that threads are bad or threads are too

943
00:38:53,619 --> 00:38:55,539
hard do not believe them please

944
00:38:55,539 --> 00:38:57,309
understand something about threads I'll

945
00:38:57,309 --> 00:38:59,650
tell you what's hard hard is reasoning

946
00:38:59,650 --> 00:39:01,420
about things when they're really

947
00:39:01,420 --> 00:39:03,969
complicated and really deeply sort of

948
00:39:03,969 --> 00:39:06,699
inter interconnected but we have a bunch

949
00:39:06,699 --> 00:39:08,619
of ways that we can simplify those

950
00:39:08,619 --> 00:39:10,420
interconnections one of the ways that we

951
00:39:10,420 --> 00:39:11,890
can make a bunch of concurrent things

952
00:39:11,890 --> 00:39:14,140
really sensible and easy to understand

953
00:39:14,140 --> 00:39:17,380
is if we treat them like in a sense like

954
00:39:17,380 --> 00:39:19,539
organisms when I talk to somebody I

955
00:39:19,539 --> 00:39:20,920
don't have to understand anything about

956
00:39:20,920 --> 00:39:22,929
the complexity inside that person we

957
00:39:22,929 --> 00:39:24,309
have a message we're speaking the same

958
00:39:24,309 --> 00:39:27,779
language we're talking about a shared

959
00:39:27,779 --> 00:39:30,189
topic that we that we both understand

960
00:39:30,189 --> 00:39:32,259
communication is fairly easy so there's

961
00:39:32,259 --> 00:39:35,949
an actor model that models this sort of

962
00:39:35,949 --> 00:39:38,650
process with concurrent things talking

963
00:39:38,650 --> 00:39:41,880
to each other through messages there is

964
00:39:41,880 --> 00:39:44,920
that data flow idea right if you have

965
00:39:44,920 --> 00:39:46,390
dependencies and you can sort of see

966
00:39:46,390 --> 00:39:49,209
them in the data then you can decide

967
00:39:49,209 --> 00:39:51,609
what things can happen simultaneously

968
00:39:51,609 --> 00:39:53,319
and what things have to be serialized

969
00:39:53,319 --> 00:39:55,650
right based on those dependencies

970
00:39:55,650 --> 00:39:58,779
there's also the idea of using data

971
00:39:58,779 --> 00:40:01,119
structures to model things we're locking

972
00:40:01,119 --> 00:40:03,819
on threads can be done inside the data

973
00:40:03,819 --> 00:40:05,439
structure and you get something called a

974
00:40:05,439 --> 00:40:07,089
lock free concurrent data structure

975
00:40:07,089 --> 00:40:09,369
where you don't deal with the locks at

976
00:40:09,369 --> 00:40:11,440
all you just model your data you use the

977
00:40:11,440 --> 00:40:12,130
data

978
00:40:12,130 --> 00:40:14,469
the concurrent data structure manages

979
00:40:14,469 --> 00:40:16,420
that stuff and it's very it can be very

980
00:40:16,420 --> 00:40:18,910
efficient it can also lead to very clear

981
00:40:18,910 --> 00:40:21,339
and easy to understand programs so

982
00:40:21,339 --> 00:40:22,959
there's a lot to concurrency out there

983
00:40:22,959 --> 00:40:24,999
there's a lot to threads I owe all these

984
00:40:24,999 --> 00:40:27,699
sort of things you don't have to choose

985
00:40:27,699 --> 00:40:29,410
this one and if you're interested in

986
00:40:29,410 --> 00:40:30,640
learning more about it and you're

987
00:40:30,640 --> 00:40:34,359
willing to take a look at what is I

988
00:40:34,359 --> 00:40:36,839
think going to be the standard in Ruby

989
00:40:36,839 --> 00:40:39,789
tonio CRE has been working on this thing

990
00:40:39,789 --> 00:40:42,789
he's got a long history he wrote Reb

991
00:40:42,789 --> 00:40:45,249
actor way back when Ruby 191 was out

992
00:40:45,249 --> 00:40:47,680
years ago he's working on this project

993
00:40:47,680 --> 00:40:50,650
called celluloid that provides multiple

994
00:40:50,650 --> 00:40:52,930
different ways of doing concurrency one

995
00:40:52,930 --> 00:40:55,719
of those with celluloid IO is a

996
00:40:55,719 --> 00:40:59,739
non-blocking sort of async IO very

997
00:40:59,739 --> 00:41:04,359
similar to note so that's actually all I

998
00:41:04,359 --> 00:41:07,359
have thank you very much I sure I'm over

999
00:41:07,359 --> 00:41:09,160
time so I don't have any time for

1000
00:41:09,160 --> 00:41:10,239
questions but I would love to talk to

1001
00:41:10,239 --> 00:41:12,309
any and all of you well I don't know if

1002
00:41:12,309 --> 00:41:13,630
I can talk to y'all but I'd love to talk

1003
00:41:13,630 --> 00:41:15,160
to anybody who wants to explore these

1004
00:41:15,160 --> 00:41:19,630
ideas this sorry these ideas further I I

1005
00:41:19,630 --> 00:41:24,009
will I will honor my my challenge if you

1006
00:41:24,009 --> 00:41:25,869
read Thinking Fast and Slow and you

1007
00:41:25,869 --> 00:41:27,670
honestly think that book has no value to

1008
00:41:27,670 --> 00:41:29,559
you I will I will pay you the price of

1009
00:41:29,559 --> 00:41:32,470
that book so please go read it thank you

