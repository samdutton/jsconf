1
00:00:01,640 --> 00:00:21,289
Good morning.

2
00:00:21,289 --> 00:00:27,019
So I'm here with good news because we will
all be game programmers very soon.

3
00:00:27,019 --> 00:00:32,310
So, I'm sure a lot of you like myself got
into programming in the first place because

4
00:00:32,310 --> 00:00:38,850
you wanted to build the next Mario N the decade
it turns out I build a lot more banking apps

5
00:00:38,850 --> 00:00:40,320
than Mario.

6
00:00:40,320 --> 00:00:49,170
I'm glad it's head bog a dire where we can
integrate elements from video games into our

7
00:00:49,170 --> 00:00:50,960
apps soon.

8
00:00:50,960 --> 00:00:57,500
Not only do I think these techniques are useful
that we can get from game development patterns,

9
00:00:57,500 --> 00:01:06,509
you'll integrate a few of these thing in the
next couple of years.

10
00:01:06,509 --> 00:01:11,140
This might make a little bit more sense if
I explain my double life.

11
00:01:11,140 --> 00:01:19,530
During the day I'm the no guy at Heroku, when
ever any you file a note ticket, when ever

12
00:01:19,530 --> 00:01:26,079
the build pack doesn't work I get yelled at,
when people are confused at the Dev documentation,

13
00:01:26,079 --> 00:01:33,400
that's my fault,i'm sorry this is my serious
work, this is the work that I do that people's

14
00:01:33,400 --> 00:01:35,990
livelihood depend on.

15
00:01:35,990 --> 00:01:46,610
And so it's kind of a scary, slow development
work that I do I do from 9‑5

16
00:01:46,610 --> 00:01:52,620
are literally thousands of production apps
that people are earning a living with that

17
00:01:52,620 --> 00:01:57,990
I can look at and compare, how people are
following different patterns, how some companies

18
00:01:57,990 --> 00:02:00,340
are successful, while some aren't.

19
00:02:00,340 --> 00:02:05,870
There's an interesting talk later how Toyota
Europe is going to\h‑‑ is running right

20
00:02:05,870 --> 00:02:09,460
now on Heroku, that's by ray Mcdermit, you
should check it out.

21
00:02:09,460 --> 00:02:15,390
I have a unique insight on how people are
building Java apps these days because I see

22
00:02:15,390 --> 00:02:18,000
so many of them every day.

23
00:02:18,000 --> 00:02:25,300
That's my day job, at night I work in a less
serious way, I work on playful Java script,

24
00:02:25,300 --> 00:02:32,659
it doesn't have a purpose or point, it's JavaScript
techniques that aren't going to help you pass

25
00:02:32,659 --> 00:02:36,830
questions when you're interviewing for a job,
nothing that people teach at university.

26
00:02:36,830 --> 00:02:43,220
It's stuff I've been interested in since I
was a kid,games, graphics, audio, I play with

27
00:02:43,220 --> 00:02:51,620
things like procedural generation, I play
with stuff like old school 3 D rendering techniques,right,

28
00:02:51,620 --> 00:02:57,120
and then, occasionally, very occasionally,
some crazy company will pay me to build a

29
00:02:57,120 --> 00:03:03,300
game in HTML five, this is a bigger and bigger
thing a couple of years ago this wouldn't

30
00:03:03,300 --> 00:03:04,300
happen.

31
00:03:04,300 --> 00:03:08,060
Nobody would say, hey you build me a game
in JavaScript.

32
00:03:08,060 --> 00:03:17,049
I'm excited about this, I think it will keep
on exceller rating, this is the basis for

33
00:03:17,049 --> 00:03:18,400
the talk.

34
00:03:18,400 --> 00:03:20,560
And, I'm not an E.

35
00:03:20,560 --> 00:03:26,830
pert, right, so I play with things at night,
I am an expert at note and running note apps,

36
00:03:26,830 --> 00:03:32,680
this is just my hobby, time not a game developer
by trade, I love this stuff, and I think more

37
00:03:32,680 --> 00:03:39,390
of us are going to become developers by trade
over the next couple of years, even if not,

38
00:03:39,390 --> 00:03:42,879
it's fun to learn, right, and something I
think everybody should try at least once .

39
00:03:42,879 --> 00:03:52,900
so, first, why should JavaScript developers,
even care what game developers do?

40
00:03:52,900 --> 00:03:57,689
It seems like we're worlds a part, they write
thing in C plus plus while we write in interpretative

41
00:03:57,689 --> 00:04:02,700
language, we're writing on bare metal, and
we oar trap in the a browser and they're concerned

42
00:04:02,700 --> 00:04:08,170
with players while we're concerned with users,
doesn't seem like there's a whole lot of overlap

43
00:04:08,170 --> 00:04:09,170
here.

44
00:04:09,170 --> 00:04:15,870
To answer that question, let me take you way,
way back to 2008, when J query was still new

45
00:04:15,870 --> 00:04:19,280
and popular with everybody.

46
00:04:19,280 --> 00:04:25,800
And this is Google maps, in 2008 as usual,
pushing I limits of JavaScript this was a

47
00:04:25,800 --> 00:04:32,880
cutting edge App, from our current perspective,
you can see it was a little bit better than

48
00:04:32,880 --> 00:04:39,170
map quest, 2 dimensional, not a lot of interactivity
here.

49
00:04:39,170 --> 00:04:46,490
Now, here's 2008's grand theft auto, same
year, but different piece of software, instead

50
00:04:46,490 --> 00:04:54,420
206 D top down camera, you is 3‑D moving
cam remarks full textures and shadows, tabbed

51
00:04:54,420 --> 00:04:58,580
geometric detail on building is incredible.

52
00:04:58,580 --> 00:05:03,570
It's a far cry from the Google maps of the
same era.

53
00:05:03,570 --> 00:05:05,450
Okay.

54
00:05:05,450 --> 00:05:11,380
The four years later Google released an update
to Google maps, in this new version, you have

55
00:05:11,380 --> 00:05:18,600
the 3 D textures geometric details and dynamic
shadows, that bringe brings me to the question

56
00:05:18,600 --> 00:05:23,840
if you had to put some money on which one
of these three apps is most similar, twoe

57
00:05:23,840 --> 00:05:30,880
which two have the most similar architecture
in my money would be on these two.

58
00:05:30,880 --> 00:05:38,120
So even though it's the same App, the Google
maps of 2013 is a lot closer to a video game

59
00:05:38,120 --> 00:05:44,930
grand theft auto of 2008 than to it's predecessor,
similar anyely in 2004, anyone den do touch

60
00:05:44,930 --> 00:05:48,790
was a big hit.

61
00:05:48,790 --> 00:05:52,060
Pioneered what touch can do as a core interaction
element.

62
00:05:52,060 --> 00:05:57,780
And then in 2007, the iPod touch was also
a big hit.

63
00:05:57,780 --> 00:06:02,660
And apple is clearly responsible for the fact
that nobody younger than me even knows how

64
00:06:02,660 --> 00:06:06,780
to use a screen that you can't touch and drag
things on.

65
00:06:06,780 --> 00:06:12,770
But even though apple is responsible for making
it ubiquitous, touch was really pioneer in

66
00:06:12,770 --> 00:06:14,500
the the games industry.

67
00:06:14,500 --> 00:06:19,820
And, do any of you remember moon patrol?

68
00:06:19,820 --> 00:06:22,380
Really,?!

69
00:06:22,380 --> 00:06:24,940
>> Great.

70
00:06:24,940 --> 00:06:30,570
>> Because I was one‑year‑old when this
came out, so I don't remember moon patrol,

71
00:06:30,570 --> 00:06:38,370
according to Wikipedia, it was the game that
pioneered Paralax, as you move the background

72
00:06:38,370 --> 00:06:45,930
scrolled at different speeds to give you an
illusion of depth.

73
00:06:45,930 --> 00:06:51,550
Now you can't go anywhere without seeing Parallax,
you can't hit a stone without hitting somebody

74
00:06:51,550 --> 00:06:55,990
that put Parallax on their site, sometimes
for guide and sometimes for bad,you know you

75
00:06:55,990 --> 00:07:06,330
R decades ago something that became prevalent
if games is now becoming popular in the web,

76
00:07:06,330 --> 00:07:12,470
this is something you see over and over that
games lead all other technologies and push

77
00:07:12,470 --> 00:07:18,840
boundaries that we then come in and get to
fill, once it's easier to do.

78
00:07:18,840 --> 00:07:25,610
Today's game experience leads to tomorrow
experience.

79
00:07:25,610 --> 00:07:33,150
If you want to see what apps of tomorrow is
going on you should look at games today.

80
00:07:33,150 --> 00:07:37,890
How they're using to expect interfaces to
behave.

81
00:07:37,890 --> 00:07:40,240
So ...

82
00:07:40,240 --> 00:07:44,640
you can see a lot of other examples, I've
given several, every time you use Google docks,

83
00:07:44,640 --> 00:07:50,830
you're now sharing virtual environment, this
is what games have been doing for decades,

84
00:07:50,830 --> 00:07:55,050
now document services are starting to it to,
and it's like a big deal.

85
00:07:55,050 --> 00:07:59,800
So it's important for everybody to learn,
of course, I'm not the first person to realize

86
00:07:59,800 --> 00:08:08,770
we can learn a lot from game developer, getting
spammed by Fam.us, it's a gum engine that

87
00:08:08,770 --> 00:08:11,150
allows you the run apps on top of it.

88
00:08:11,150 --> 00:08:20,890
Chucked the MVC framework and said we're going
to build a crappy game engine, that's what

89
00:08:20,890 --> 00:08:25,440
people are running interesting interactive
apps with great success.

90
00:08:25,440 --> 00:08:31,830
This is my favorite example of how games and
Annes are colliding at least in scheme, this

91
00:08:31,830 --> 00:08:39,950
is the architecture for doom 3, the important
part is the second and third step, the second

92
00:08:39,950 --> 00:08:45,390
step, the scene IR, it builds the description
of the seen, what you're look at, what you

93
00:08:45,390 --> 00:08:52,500
can see, what's in the frame, what's local
your character, and fourth step is where it

94
00:08:52,500 --> 00:09:00,470
renders it, reverending something in 3 D costs
a lot, which operations you chose to render

95
00:09:00,470 --> 00:09:06,370
are actually really important, they can make
your frame rate faster or slow, in doom 3,

96
00:09:06,370 --> 00:09:10,840
they actually figure out exactly which operations
they need to pass to the reverend before they

97
00:09:10,840 --> 00:09:15,530
render anything to make the application run
as quickly as possible this is what I think

98
00:09:15,530 --> 00:09:24,340
is really Fucking school, reactjs works the
same way, the architecture is identical, so

99
00:09:24,340 --> 00:09:30,470
instead of opening jail though the bottle
next is the DOM, they build a scene, they

100
00:09:30,470 --> 00:09:35,630
do a full scene builder before they run to
the DOM that way the scene builder can compute

101
00:09:35,630 --> 00:09:43,880
which DOM is faster to render, they're pulling
ideas straight out of the world of game development.

102
00:09:43,880 --> 00:09:44,880
So it's inevitable.

103
00:09:44,880 --> 00:09:50,070
You're probably already using some of this
stuff today, if you're not, I guarantee you

104
00:09:50,070 --> 00:09:56,130
will be, I think this is a great opportunity
to become familiar with patterns that game

105
00:09:56,130 --> 00:10:00,310
developers have been using for decades, when
you build your next App you can have them

106
00:10:00,310 --> 00:10:07,990
in your tool set that's the argument for using
game techniques inside of apps, the other

107
00:10:07,990 --> 00:10:13,120
reason you might want to know about game Dev
you might want to build a game, I have great

108
00:10:13,120 --> 00:10:18,620
news, there's never been a better time to
build games with JavaScript, we have all the

109
00:10:18,620 --> 00:10:24,800
basic primitives we need in the form of web
APIs to start competing toe to toe with real

110
00:10:24,800 --> 00:10:30,240
native experiences the gap thee between JavaScript
is closing rapidly.

111
00:10:30,240 --> 00:10:35,900
I'm really excited about this, so this begs
the question: Why isn't everybody doing this?

112
00:10:35,900 --> 00:10:42,260
Some people are trying, some early pioneers,
this is a gum called poly craft, really Polished

113
00:10:42,260 --> 00:10:48,190
3 D game belt in JavaScript, you've probably
seen cut the rope, probably one of the most

114
00:10:48,190 --> 00:10:50,870
well known HTML 5 game to date.

115
00:10:50,870 --> 00:10:57,390
And the reason that there aren't many successful
story s is that we lack familiarity, tooling

116
00:10:57,390 --> 00:11:00,620
and marketplace.

117
00:11:00,620 --> 00:11:06,820
Game develops have a huge tool sets have familiarity
with how game are built, and marketplace,e

118
00:11:06,820 --> 00:11:13,710
to ship things, we don't have any of these
things, I can't address all of these, I'll

119
00:11:13,710 --> 00:11:17,850
provide a little familiarity to a group of
JavaScripters who might be interested in build

120
00:11:17,850 --> 00:11:19,960
ago game one day.

121
00:11:19,960 --> 00:11:29,970
We'll look at a couple of web game development
techniques, we're going to look at it specifically

122
00:11:29,970 --> 00:11:35,750
in JavaScript, all of these techniques can
be applied to apps, it takes a little bit

123
00:11:35,750 --> 00:11:40,670
more creativity to did that, they can push
things forward.

124
00:11:40,670 --> 00:11:46,260
So,the first part earn to look at when ever
you're\h‑‑ pattern to look at is the game

125
00:11:46,260 --> 00:11:54,370
loop this is basic core fundamental behind
any game since video games were a thing.

126
00:11:54,370 --> 00:11:59,340
This is sort of code that you probably would
not get through code review at most shops,

127
00:11:59,340 --> 00:12:04,840
right, it's a wild loop that never stops,
has some conditionals in it, and you're just

128
00:12:04,840 --> 00:12:09,730
doing everything in this waterfall pattern,
but this is what's powering every game you've

129
00:12:09,730 --> 00:12:12,620
ever used.

130
00:12:12,620 --> 00:12:20,580
And the reason for that is because it makes
time explicit,right, the issue with traditional

131
00:12:20,580 --> 00:12:25,070
event‑based architecture that we're using
in games now, you have an event, a click event,

132
00:12:25,070 --> 00:12:31,180
it triggers some kind of re"A," you closed
a window or moved to the next screen, the

133
00:12:31,180 --> 00:12:36,620
time is implicit in that, an event happened
and then you give a response, you know the

134
00:12:36,620 --> 00:12:42,340
response happened after the vent, you never
elevate time to a first class citizen, you

135
00:12:42,340 --> 00:12:47,930
never measure time to the point where you
can put so it a variable, and that's what

136
00:12:47,930 --> 00:12:51,910
a game loop gives you, it lets you measure
time between different iter rations of the

137
00:12:51,910 --> 00:12:55,960
loop and store time into a variable.

138
00:12:55,960 --> 00:13:00,970
The other thing that it lets you the is keep
moving without user input, you're just responding

139
00:13:00,970 --> 00:13:05,320
strengths, you're deopinion didn't entirely
on the user to push your game forward and

140
00:13:05,320 --> 00:13:10,880
push any elements on the game forward and
with the game loop you can respond to time

141
00:13:10,880 --> 00:13:15,330
and send it to user so you don't just have
are too have aen an action and reaction pattern,

142
00:13:15,330 --> 00:13:23,070
I have two demos that will illustrate this.

143
00:13:23,070 --> 00:13:28,100
So let's go here.

144
00:13:28,100 --> 00:13:43,150
So, this is a version of a small simple game
I hope it doesn't blow anybody's Ears.

145
00:13:43,150 --> 00:13:49,430
So this is a game that only runs, there's
no loop here, just listening to my input and

146
00:13:49,430 --> 00:13:50,450
responding to the input.

147
00:13:50,450 --> 00:13:57,990
If I start pressing keys, it will start dog
things, and I can move and and I can jump

148
00:13:57,990 --> 00:13:58,990
and whatever.

149
00:13:58,990 --> 00:14:05,611
But then, as soon as I stop, nothing happens,
I could be in the middle of a jump, and it's

150
00:14:05,611 --> 00:14:13,020
just there, so trying to build a game, using
MVC, if we try to use backbone, this is basically

151
00:14:13,020 --> 00:14:19,060
what would happen, this is\h‑‑ you're
entirely dependent on the user for everything

152
00:14:19,060 --> 00:14:25,290
in this environment, right, so as soon as
the user ...

153
00:14:25,290 --> 00:14:29,650
stops doing anything, your game is sort of
pointless, right, and this is not just true

154
00:14:29,650 --> 00:14:34,380
with games, this is true with anything that
requires physics and motions beyond something

155
00:14:34,380 --> 00:14:39,400
that you're responding to, when you see a
bounce effect or nice physical scroll, flick

156
00:14:39,400 --> 00:14:50,650
an icon, it has the same problem so that's
without an vent loop F you go with an vent

157
00:14:50,650 --> 00:14:57,839
loop, this is exactly the same game, but it's
just going to keep running no matter what,

158
00:14:57,839 --> 00:15:05,290
I can stop doing anything and everything still
works, I'll still fall, the environment is

159
00:15:05,290 --> 00:15:11,330
still going to be alive, right, this is one
hundred percent due to the vent loop, there's

160
00:15:11,330 --> 00:15:15,990
no other difference between the two games,
I copied and pasted it.

161
00:15:15,990 --> 00:15:20,410
That's how important an vent loop is to rich
interactive dynamic applications.

162
00:15:20,410 --> 00:15:26,730
So, let me kill that so the music stops.

163
00:15:26,730 --> 00:15:30,720
And then ...

164
00:15:30,720 --> 00:15:32,720
cool.

165
00:15:32,720 --> 00:15:37,410
So once you've got a game loop you quickly
run into a problem, the problem is you're

166
00:15:37,410 --> 00:15:41,020
starting to pack all the log bog the one game.

167
00:15:41,020 --> 00:15:47,120
Once you have more than one or two different
entities you're trying up to date with time,

168
00:15:47,120 --> 00:15:52,560
they start to get conflated, you have enormous
thousand line loop and you don't know where

169
00:15:52,560 --> 00:15:53,560
anything is.

170
00:15:53,560 --> 00:15:59,500
In almost every game that's ever been created,
there's an update pattern, this is where you

171
00:15:59,500 --> 00:16:04,880
make your game entities or even just your
graphical entities autonomous, you teach them

172
00:16:04,880 --> 00:16:08,240
how to handle their own changes through time.

173
00:16:08,240 --> 00:16:12,280
Right, and you can see here, it's just an
anywheretional pattern, not doing anything

174
00:16:12,280 --> 00:16:15,620
differently, organizing it in a sane way.

175
00:16:15,620 --> 00:16:19,850
And this is important because that way your
player can know how to walk and how far he

176
00:16:19,850 --> 00:16:22,580
needs to walk depending on how much time has
passed.

177
00:16:22,580 --> 00:16:28,290
Clouds can move with the wind and when you
flicke flick an icon, it knowtion how to keep

178
00:16:28,290 --> 00:16:34,890
sliding across the screen without any sort
of direction from the main game loop.

179
00:16:34,890 --> 00:16:38,980
We all know the decoupling is a good idea,
this is one of the primary ways that decouping

180
00:16:38,980 --> 00:16:44,100
is done in games that have to do with time
and not just the user.

181
00:16:44,100 --> 00:16:48,510
The other cool thing is like a light form
of deopinion den say injection, you don't

182
00:16:48,510 --> 00:16:56,180
have to pass time to these things, you can
pass other arguments they may depend on.

183
00:16:56,180 --> 00:16:59,550
And the final thing that you need to know
if you're going to ship a game tomorrow, you

184
00:16:59,550 --> 00:17:05,529
need to understand what a time buffer is,
a time buffer is an extension to the traditional

185
00:17:05,529 --> 00:17:11,210
game loop and update cycles and what it does
is instead of treating time in each loop as

186
00:17:11,210 --> 00:17:15,920
an individual entity what you respond, to
every time you get a new instance to a loop,

187
00:17:15,920 --> 00:17:20,980
add time to a buffer, keep packing into a
buffer, when the buffer over flows a certain

188
00:17:20,980 --> 00:17:26,600
amount, which is your frame time, you render
a frame, keep adding to the buffer, when ever

189
00:17:26,600 --> 00:17:31,180
the buffer is bigger than a certain set amount
that you decided on initially you reverend

190
00:17:31,180 --> 00:17:34,630
a frame and clear that time out of the buffer.

191
00:17:34,630 --> 00:17:39,230
This sounds like you might be overcomplicating
things, you a game loop that will let you

192
00:17:39,230 --> 00:17:45,700
process time, this is important for a couple
key reason, it keeps physic models stable,

193
00:17:45,700 --> 00:17:52,059
most physical integration methods like the
one when you see on your iPhone to 3 D video

194
00:17:52,059 --> 00:17:56,670
game will start the feel weird and woning
I can, reverending at different time intervals,

195
00:17:56,670 --> 00:18:02,670
sometimes you're not moving it far enough.

196
00:18:02,670 --> 00:18:07,650
Important for anything that has physics involved,
it decoupings, simulating and reverending,

197
00:18:07,650 --> 00:18:13,780
this is critical you want the use request
animation frame, anything that you want to

198
00:18:13,780 --> 00:18:19,200
be responsive on the web,with the request
animation frame,you know browsers are ready

199
00:18:19,200 --> 00:18:24,360
to rerender the DOM, that might happen at
30 frames per second on one machine and 60

200
00:18:24,360 --> 00:18:29,440
on another, you want them to simulate the
exact same thing at the exact same speed A

201
00:18:29,440 --> 00:18:38,780
time buffer will let you do that, the same
amount of time, over and over and over and

202
00:18:38,780 --> 00:18:42,550
the output, the result of both machines will
be the same, even if they render different

203
00:18:42,550 --> 00:18:48,970
number of frames, this is kind of hard to
explain, so, I've put together a little demo

204
00:18:48,970 --> 00:18:49,970
of it.

205
00:18:49,970 --> 00:18:54,240
One of the projects I worked on is called
Newton, it's a physic engine no one should

206
00:18:54,240 --> 00:19:02,540
use because I wrote it to learn how it works.

207
00:19:02,540 --> 00:19:09,330
You replicate time‑based behavior that's
what a time buffer allows you the do, no matter

208
00:19:09,330 --> 00:19:15,070
how p times I rerun the same simulation it
will happen the exact same way every time,

209
00:19:15,070 --> 00:19:21,150
you can run automated tests, this is important
when you want to use game technique s is an

210
00:19:21,150 --> 00:19:25,140
App, you want to use automated tests in an
App.

211
00:19:25,140 --> 00:19:32,930
Let me open up this example this is Newton,
it's a little embarrassing because what I

212
00:19:32,930 --> 00:19:37,820
was try dog in this particular version of
Newton was just to make a stable box, like

213
00:19:37,820 --> 00:19:39,340
that was the whole goal.

214
00:19:39,340 --> 00:19:45,830
Literally make a box that doesn't implode
on itself, this was version 500 of that attempt

215
00:19:45,830 --> 00:19:52,790
because I really suck at math what kind of
sucks but what's also cool is that when it

216
00:19:52,790 --> 00:19:57,180
first starts the box seems to be able, then
something happens it to, favorite bug I ever

217
00:19:57,180 --> 00:19:58,830
created in any software ever.

218
00:19:58,830 --> 00:20:17,110
Here we go I'm going to refresh it if the
interin the works.

219
00:20:17,110 --> 00:20:30,299
(Laughing) I couldn't build this if you asked
me to, right.

220
00:20:30,299 --> 00:20:35,630
(Anews) that's the crazy part, it becomes
a abortion, it stabilize, it will never do

221
00:20:35,630 --> 00:20:38,850
that again.

222
00:20:38,850 --> 00:20:45,150
Trust me, I've tried, it'll keep on bouncing
back and forth, back and forth.

223
00:20:45,150 --> 00:20:50,710
What's really cool about, this because it's
using a time buffer, I can refresh this as

224
00:20:50,710 --> 00:20:55,630
many times as I want and every single time
it will behave exactly same way.

225
00:20:55,630 --> 00:21:01,330
No different, right, you can compare the different
frames they would be identical.

226
00:21:01,330 --> 00:21:04,670
And it doesn't matter what computer, you can
put it on an iPhone, and put next to a computer,

227
00:21:04,670 --> 00:21:13,809
it will run at exact same speed, this is a
combination of the game loop\h‑‑ it allows

228
00:21:13,809 --> 00:21:23,590
me to reproduce a bug, I love this bug.

229
00:21:23,590 --> 00:21:26,770
So I don't want to group too long, let's put
a little bit of this together.

230
00:21:26,770 --> 00:21:31,330
The game I put together, the one that looks
like a Shiy version of mine craft, this is

231
00:21:31,330 --> 00:21:34,549
an vent loop, I copied and pasted it.

232
00:21:34,549 --> 00:21:43,270
Not come plait, full published game, you can
finish it, it has music, audio, upgrades,

233
00:21:43,270 --> 00:21:45,550
but like this is the full vent loop.

234
00:21:45,550 --> 00:21:51,270
So, it can keep things like tight and simple,
one of the nicest things I think about an

235
00:21:51,270 --> 00:21:57,750
vent loop is after building all sorts of backbones,
spaghetti apps over the years, I love that

236
00:21:57,750 --> 00:22:03,570
an event loop, lexically encode shows you
what you're doing over and over and over,

237
00:22:03,570 --> 00:22:08,720
it really highlights the hot spots in your
code for you, if something is goening wrong

238
00:22:08,720 --> 00:22:13,750
or slow, it's because of something deep inside
of your vent loop.

239
00:22:13,750 --> 00:22:17,370
You can see the game loop, the time buffer,
and update method working together.

240
00:22:17,370 --> 00:22:22,450
The whole function is the loop, this frame
is called over and over and over with a request

241
00:22:22,450 --> 00:22:24,030
animation frame.

242
00:22:24,030 --> 00:22:28,510
That time buffer is just a bit at the top,
a clock system that they just impresents a

243
00:22:28,510 --> 00:22:34,130
time buffer, does what it says, adds time
to it, over flows a certain amount, extracts

244
00:22:34,130 --> 00:22:37,809
that amount out, over and over and over, nothing
special.

245
00:22:37,809 --> 00:22:44,000
You see a bunch of update method, updating
the control, the player, it's updating the

246
00:22:44,000 --> 00:22:45,000
music.

247
00:22:45,000 --> 00:22:49,590
And, like, that's the whole thing, that's
all you really need make a game.

248
00:22:49,590 --> 00:22:51,390
And so, where do you go next?

249
00:22:51,390 --> 00:22:57,140
I obviously just showed you the very basics
of building a game, I hope some of you guys

250
00:22:57,140 --> 00:23:02,780
will go home and join one of the 48 hour competition
and try throwing something together .

251
00:23:02,780 --> 00:23:08,100
These are some really good resources if I
was going to put a game together with JavaScript,

252
00:23:08,100 --> 00:23:15,800
they're simple, short, mature, fun, well documented,
right, that you can rely on the build things

253
00:23:15,800 --> 00:23:24,900
like 2 D graphics, 3 D graphics, physics you
can use my Heroku, to build some really awesome

254
00:23:24,900 --> 00:23:27,429
multiplayer stuff.

255
00:23:27,429 --> 00:23:34,480
If you want to talk about any of this Nerdy
stuff, Hunter at Heroku.com, thank you (applause)

256
00:23:34,480 --> 00:23:37,390
from
>> If you have questions, it'll be at our

