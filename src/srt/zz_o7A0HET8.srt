1
00:00:00,320 --> 00:00:02,070

[Music]

2
00:00:02,070 --> 00:00:03,840
[Applause]

3
00:00:03,840 --> 00:00:05,660
[Music]

4
00:00:05,660 --> 00:00:07,410
[Applause]

5
00:00:07,410 --> 00:00:09,280
[Music]

6
00:00:09,280 --> 00:00:11,020
[Applause]

7
00:00:11,020 --> 00:00:12,780
[Music]

8
00:00:12,780 --> 00:00:16,860
[Applause]

9
00:00:16,870 --> 00:00:22,980
[Music]

10
00:00:22,980 --> 00:00:27,579
so my name is Hannah Howard you heard a

11
00:00:27,579 --> 00:00:30,520
little bit about me just so if you want

12
00:00:30,520 --> 00:00:32,140
to find me on the Internet's that's my

13
00:00:32,140 --> 00:00:35,079
little icon and my handle act Edgar

14
00:00:35,079 --> 00:00:37,780
Wonder will work for almost any social

15
00:00:37,780 --> 00:00:40,000
media site that I wish for the public to

16
00:00:40,000 --> 00:00:43,900
have access to to find me um and I work

17
00:00:43,900 --> 00:00:47,050
for a company called carbon five we're a

18
00:00:47,050 --> 00:00:50,470
product development agency and we

19
00:00:50,470 --> 00:00:52,030
basically work with all kinds of clients

20
00:00:52,030 --> 00:00:54,640
from startups all the way to like big

21
00:00:54,640 --> 00:00:56,620
enterprises trying to help them take

22
00:00:56,620 --> 00:00:59,470
their products from from concept all the

23
00:00:59,470 --> 00:01:02,290
way to completion and I definitely need

24
00:01:02,290 --> 00:01:03,430
to give that spiel because they pay for

25
00:01:03,430 --> 00:01:06,100
me to be here which is really cool so um

26
00:01:06,100 --> 00:01:08,020
this talk is called

27
00:01:08,020 --> 00:01:12,500
oh wait I'm a little lost here in my dad

28
00:01:12,500 --> 00:01:13,710
[Music]

29
00:01:13,710 --> 00:01:18,500
sorry okay let's try this again

30
00:01:18,510 --> 00:01:21,370
okay rxjs a better way to write

31
00:01:21,370 --> 00:01:24,340
front-end applications what's going on

32
00:01:24,340 --> 00:01:31,659
here sorry I'm here we go I'm really

33
00:01:31,659 --> 00:01:33,549
sorry just give me one second this is

34
00:01:33,549 --> 00:01:42,340
not how it's supposed to work I'm giving

35
00:01:42,340 --> 00:01:44,110
away all the secrets this is terrible oh

36
00:01:44,110 --> 00:01:46,990
my god oh no now you all know everything

37
00:01:46,990 --> 00:01:49,200
about it maybe that's it what's okay

38
00:01:49,200 --> 00:01:54,670
yeah Wow okay how about now okay

39
00:01:54,670 --> 00:01:58,770
whoo one more time what

40
00:01:58,770 --> 00:02:09,420
yeah okay sorry I am going yes brief

41
00:02:09,420 --> 00:02:11,660
contact warning before we start okay

42
00:02:11,660 --> 00:02:13,560
well now you've already seen the whole

43
00:02:13,560 --> 00:02:17,819
talk so it's really great it's a great

44
00:02:17,819 --> 00:02:18,300
talk

45
00:02:18,300 --> 00:02:21,110
you could leave now if you want anyway

46
00:02:21,110 --> 00:02:23,519
there is as you might have noticed some

47
00:02:23,519 --> 00:02:26,190
possibly jarring animation in this talk

48
00:02:26,190 --> 00:02:28,080
so I'm trying to be a little more

49
00:02:28,080 --> 00:02:30,510
sensitive to those issues so if you are

50
00:02:30,510 --> 00:02:31,650
someone who's sensitive to that

51
00:02:31,650 --> 00:02:34,500
definitely this mean it's not super

52
00:02:34,500 --> 00:02:35,640
jarring but you may want to be aware of

53
00:02:35,640 --> 00:02:38,549
that and then the other thing this isn't

54
00:02:38,549 --> 00:02:39,959
really a Content warning but there will

55
00:02:39,959 --> 00:02:41,910
be heavy pop-culture references because

56
00:02:41,910 --> 00:02:43,890
I'm from Los Angeles and that is what we

57
00:02:43,890 --> 00:02:49,950
do so good evening ladies a good evening

58
00:02:49,950 --> 00:02:53,310
and good morning to all of you legendary

59
00:02:53,310 --> 00:02:56,310
children and welcome to the functional

60
00:02:56,310 --> 00:02:59,790
reactive programming ball tonight the

61
00:02:59,790 --> 00:03:04,730
category is what is a computer program

62
00:03:04,730 --> 00:03:08,760
so I refer to a very important computer

63
00:03:08,760 --> 00:03:11,010
science textbook and often in my

64
00:03:11,010 --> 00:03:14,040
programming and it defines a computer

65
00:03:14,040 --> 00:03:16,200
program as a sequence of instructions

66
00:03:16,200 --> 00:03:20,700
designed to solve specific problems and

67
00:03:20,700 --> 00:03:22,079
I think that phrase is really

68
00:03:22,079 --> 00:03:23,220
interesting it's the one I always get

69
00:03:23,220 --> 00:03:25,769
focused on sequence of instructions it

70
00:03:25,769 --> 00:03:27,510
makes it sound like our programming

71
00:03:27,510 --> 00:03:29,010
programming is just like writing a to-do

72
00:03:29,010 --> 00:03:30,930
list you're like do this and that not

73
00:03:30,930 --> 00:03:34,230
noting that um and or if you were to

74
00:03:34,230 --> 00:03:35,519
think about it in maybe a different

75
00:03:35,519 --> 00:03:38,190
context you might think of it like a

76
00:03:38,190 --> 00:03:40,769
lesson plan basically a you know a

77
00:03:40,769 --> 00:03:43,230
series of steps to do a lesson but is it

78
00:03:43,230 --> 00:03:44,819
really like that is that an accurate

79
00:03:44,819 --> 00:03:47,040
description maybe if we were writing a

80
00:03:47,040 --> 00:03:48,870
command line tool that would be accurate

81
00:03:48,870 --> 00:03:52,170
but we're Java programmers right so I

82
00:03:52,170 --> 00:03:54,389
imagine there's one of one or two of you

83
00:03:54,389 --> 00:03:56,459
who writes front-end programs for the

84
00:03:56,459 --> 00:03:58,709
web and this is the metaphor that I

85
00:03:58,709 --> 00:04:00,180
think is more apt for how front-end

86
00:04:00,180 --> 00:04:04,200
program run basically front-end programs

87
00:04:04,200 --> 00:04:06,840
don't run sequentially they the flow of

88
00:04:06,840 --> 00:04:09,239
execution is constantly interrupted by

89
00:04:09,239 --> 00:04:12,060
user input and responses from servers

90
00:04:12,060 --> 00:04:14,220
and a million other things we have way

91
00:04:14,220 --> 00:04:15,600
less control it's like an unruly

92
00:04:15,600 --> 00:04:19,100
classroom so in a way I think that

93
00:04:19,100 --> 00:04:21,209
interruptions are kind of the central

94
00:04:21,209 --> 00:04:25,260
challenge of front-end programming so

95
00:04:25,260 --> 00:04:27,630
how do we deal with them well let's

96
00:04:27,630 --> 00:04:30,570
let's learn from our history and look at

97
00:04:30,570 --> 00:04:32,310
a brief history of how we've dealt with

98
00:04:32,310 --> 00:04:36,449
interruptions on the front end so the

99
00:04:36,449 --> 00:04:38,870
first idea we came up with or that

100
00:04:38,870 --> 00:04:41,190
programmers came up with I wasn't one of

101
00:04:41,190 --> 00:04:41,759
them

102
00:04:41,759 --> 00:04:43,979
is something called the global event bus

103
00:04:43,979 --> 00:04:45,870
and so I want to take you all the way

104
00:04:45,870 --> 00:04:47,880
back to the very first programming that

105
00:04:47,880 --> 00:04:50,460
I ever did which was writing games in

106
00:04:50,460 --> 00:04:54,000
DOS that was an operating system in the

107
00:04:54,000 --> 00:05:00,730
early 90s and 80s for those of y'all who

108
00:05:00,740 --> 00:05:05,610
anyway one thing you could do in Dass is

109
00:05:05,610 --> 00:05:07,949
you could actually like take over the

110
00:05:07,949 --> 00:05:09,300
keyboard you could do something called

111
00:05:09,300 --> 00:05:11,310
overriding the bios and basically take

112
00:05:11,310 --> 00:05:14,220
control of the keyboard and so that you

113
00:05:14,220 --> 00:05:16,050
were stepping in between yourself and

114
00:05:16,050 --> 00:05:17,880
the hardware and like the rest of the

115
00:05:17,880 --> 00:05:20,669
computer and you would write some code

116
00:05:20,669 --> 00:05:22,889
they would basically take every key that

117
00:05:22,889 --> 00:05:24,600
got pressed and you put it in some kind

118
00:05:24,600 --> 00:05:28,320
of a buffer and then your main program

119
00:05:28,320 --> 00:05:29,970
would be some kind of a loop like this

120
00:05:29,970 --> 00:05:32,729
one right it would essentially be a loop

121
00:05:32,729 --> 00:05:36,330
that looked at the last user input and

122
00:05:36,330 --> 00:05:39,419
then did something with it and you know

123
00:05:39,419 --> 00:05:41,699
essentially on each step you'd have to

124
00:05:41,699 --> 00:05:43,169
check all of your inputs not just the

125
00:05:43,169 --> 00:05:46,110
keyboard this is a simpler version and

126
00:05:46,110 --> 00:05:48,600
then act on it until whatever happened

127
00:05:48,600 --> 00:05:50,789
that was gonna quit the program what

128
00:05:50,789 --> 00:05:52,320
happened there was an issue with that

129
00:05:52,320 --> 00:05:54,240
which is that if you wrote a bad

130
00:05:54,240 --> 00:05:57,210
keyboard handler like this this is not

131
00:05:57,210 --> 00:05:59,460
only gonna loop forever but you can't

132
00:05:59,460 --> 00:06:01,800
type anything on the keyboard so your

133
00:06:01,800 --> 00:06:04,470
computer will be fixed by pressing the

134
00:06:04,470 --> 00:06:06,509
button at the bottom of it back when we

135
00:06:06,509 --> 00:06:08,850
had desktop computers anyway this is

136
00:06:08,850 --> 00:06:11,030
improved upon a little bit with a

137
00:06:11,030 --> 00:06:13,259
Windows program in which I touched on

138
00:06:13,259 --> 00:06:16,050
which I did just a tiny bit of but it's

139
00:06:16,050 --> 00:06:17,849
basically the same idea the operating

140
00:06:17,849 --> 00:06:20,099
system took over talking directly to the

141
00:06:20,099 --> 00:06:21,900
hardware so you couldn't do that sort of

142
00:06:21,900 --> 00:06:24,550
mistake there but the basic

143
00:06:24,550 --> 00:06:26,620
is the same you read process and

144
00:06:26,620 --> 00:06:30,010
dispatch messages and then the main

145
00:06:30,010 --> 00:06:33,370
logic of your program would be to handle

146
00:06:33,370 --> 00:06:36,760
different messages right and they

147
00:06:36,760 --> 00:06:38,440
usually ended up looking like a big

148
00:06:38,440 --> 00:06:41,200
switch statement where you did something

149
00:06:41,200 --> 00:06:44,380
based on the message that was passed and

150
00:06:44,380 --> 00:06:46,720
that is that's sort of the pattern and

151
00:06:46,720 --> 00:06:48,780
that takes us all the way up to like

152
00:06:48,780 --> 00:06:52,870
1999 or so right um and and when we

153
00:06:52,870 --> 00:06:54,550
moved on and let that in the dust for

154
00:06:54,550 --> 00:06:57,130
much better things but actually if

155
00:06:57,130 --> 00:07:00,160
you've been programming recently that

156
00:07:00,160 --> 00:07:03,190
sort of pattern for like dealing for

157
00:07:03,190 --> 00:07:05,110
updating state based on dispatched

158
00:07:05,110 --> 00:07:07,480
messages if you happen to be programming

159
00:07:07,480 --> 00:07:09,640
react you might notice that that looks a

160
00:07:09,640 --> 00:07:13,690
lot like a reducer and in fact Redux

161
00:07:13,690 --> 00:07:15,910
contains a whole lot of the global event

162
00:07:15,910 --> 00:07:17,140
bus pattern

163
00:07:17,140 --> 00:07:21,550
so while Redux may be programming like

164
00:07:21,550 --> 00:07:26,410
it's 1999 in in in reality there are

165
00:07:26,410 --> 00:07:27,760
some good reasons they went that way and

166
00:07:27,760 --> 00:07:30,610
we're gonna see in a second but I want

167
00:07:30,610 --> 00:07:33,880
to go ahead and move on to the observer

168
00:07:33,880 --> 00:07:36,340
pattern which is basic from redux this

169
00:07:36,340 --> 00:07:37,720
is how we've written front-end

170
00:07:37,720 --> 00:07:39,510
applications for the last several years

171
00:07:39,510 --> 00:07:42,640
to do before we get into that I want to

172
00:07:42,640 --> 00:07:44,500
I need to make a short digression if you

173
00:07:44,500 --> 00:07:45,940
all don't mind into the world of

174
00:07:45,940 --> 00:07:49,900
influencers so and and it's gonna help

175
00:07:49,900 --> 00:07:51,610
us understand the observer pattern I

176
00:07:51,610 --> 00:07:55,630
promise so let's say you are a content

177
00:07:55,630 --> 00:07:58,600
creator on the internet and you know

178
00:07:58,600 --> 00:07:59,950
with your typewriter you have something

179
00:07:59,950 --> 00:08:01,090
very important to say and you're

180
00:08:01,090 --> 00:08:03,850
wondering how will people see my content

181
00:08:03,850 --> 00:08:06,850
right so in the pre-internet age you

182
00:08:06,850 --> 00:08:08,530
kind of had to be like Liam Neeson and

183
00:08:08,530 --> 00:08:11,260
you had to track down anybody who you

184
00:08:11,260 --> 00:08:12,940
wanted to see your content and just like

185
00:08:12,940 --> 00:08:16,390
force them to watch it but fortunately

186
00:08:16,390 --> 00:08:19,720
now we have a better way we we see we

187
00:08:19,720 --> 00:08:22,570
have like a contract I is a contract

188
00:08:22,570 --> 00:08:25,540
content creator promise to publish

189
00:08:25,540 --> 00:08:28,860
content and then you as my adoring fans

190
00:08:28,860 --> 00:08:33,400
use one of our many and numerous scary

191
00:08:33,400 --> 00:08:36,250
social media surveillance platforms to

192
00:08:36,250 --> 00:08:38,230
subscribe to it

193
00:08:38,230 --> 00:08:41,340
and then when I publish new content you

194
00:08:41,340 --> 00:08:43,800
will get you'll essentially

195
00:08:43,800 --> 00:08:46,120
automatically get notified without me

196
00:08:46,120 --> 00:08:48,520
having to go track you down right so

197
00:08:48,520 --> 00:08:51,540
this in short is the observer pattern

198
00:08:51,540 --> 00:08:54,340
here our influencer is called the

199
00:08:54,340 --> 00:08:56,770
subject and they essentially promise

200
00:08:56,770 --> 00:08:58,570
that they will admit events in the

201
00:08:58,570 --> 00:09:02,550
future and then you have an observer who

202
00:09:02,550 --> 00:09:05,020
subscribes to those events and then can

203
00:09:05,020 --> 00:09:07,420
act on them so that's the that's the

204
00:09:07,420 --> 00:09:09,190
basic pattern and you actually probably

205
00:09:09,190 --> 00:09:11,170
use it every day you probably use this

206
00:09:11,170 --> 00:09:12,730
in your JavaScript code without knowing

207
00:09:12,730 --> 00:09:14,560
it I'm gonna look at a really short

208
00:09:14,560 --> 00:09:20,890
real-world example and so we use this

209
00:09:20,890 --> 00:09:24,550
Paso Sun yeah still I'm still like

210
00:09:24,550 --> 00:09:26,740
rewinding myself from the beginning of

211
00:09:26,740 --> 00:09:28,420
this and getting myself under the right

212
00:09:28,420 --> 00:09:32,070
slides so sorry if I'm catching up but

213
00:09:32,070 --> 00:09:33,480
okay

214
00:09:33,480 --> 00:09:37,030
so let's say that we have like a DOM and

215
00:09:37,030 --> 00:09:41,650
the Dom has a toggle switch and and we

216
00:09:41,650 --> 00:09:44,110
want to make it so that when you click

217
00:09:44,110 --> 00:09:46,270
on that toggle switch it changes

218
00:09:46,270 --> 00:09:48,190
something from on to off so we have our

219
00:09:48,190 --> 00:09:49,930
toggle switch there's there there we've

220
00:09:49,930 --> 00:09:52,600
looked it up and then we have a function

221
00:09:52,600 --> 00:09:54,940
that is going to look at another element

222
00:09:54,940 --> 00:09:56,770
in the Dom and basically switch its

223
00:09:56,770 --> 00:09:58,870
value from on to off right so this is a

224
00:09:58,870 --> 00:10:01,270
pure function and then we have the and

225
00:10:01,270 --> 00:10:02,770
then we have this element so the way

226
00:10:02,770 --> 00:10:06,180
that we connect these two is we

227
00:10:06,180 --> 00:10:12,370
essentially subscribe the we subscribe

228
00:10:12,370 --> 00:10:14,500
to mouse clicks on the toggle switch and

229
00:10:14,500 --> 00:10:18,160
then pass it to this function which is

230
00:10:18,160 --> 00:10:20,890
now an event handler right it's it is

231
00:10:20,890 --> 00:10:23,380
now an observer of the quick events on

232
00:10:23,380 --> 00:10:25,150
the toggle switch and that means that

233
00:10:25,150 --> 00:10:26,380
when we click the toggle switch will

234
00:10:26,380 --> 00:10:28,990
switch the the text in that other

235
00:10:28,990 --> 00:10:31,240
element so that's the basics of the

236
00:10:31,240 --> 00:10:32,800
observer pattern you've probably been

237
00:10:32,800 --> 00:10:38,140
using it without knowing so um cool so

238
00:10:38,140 --> 00:10:39,550
there's some really cool advantages here

239
00:10:39,550 --> 00:10:45,000
right

240
00:10:45,010 --> 00:10:47,200
it's way simpler than the global event

241
00:10:47,200 --> 00:10:48,940
bus right like we didn't have to write a

242
00:10:48,940 --> 00:10:51,340
giant loop we didn't have to write a big

243
00:10:51,340 --> 00:10:53,260
switch statement we just attached to

244
00:10:53,260 --> 00:10:54,970
what we cared about and so it's really

245
00:10:54,970 --> 00:10:55,750
localized

246
00:10:55,750 --> 00:10:57,550
right you just subscribe to the only the

247
00:10:57,550 --> 00:10:59,050
things you care about and then you

248
00:10:59,050 --> 00:11:01,210
process them when they happen the

249
00:11:01,210 --> 00:11:03,280
downside is that you have to set up

250
00:11:03,280 --> 00:11:06,700
subscriptions which start initially

251
00:11:06,700 --> 00:11:09,490
doesn't sound like a pain too much of a

252
00:11:09,490 --> 00:11:12,400
pain but there's a take home exercise I

253
00:11:12,400 --> 00:11:14,080
highly encourage you to try implementing

254
00:11:14,080 --> 00:11:15,580
drag and drop or if you've ever done

255
00:11:15,580 --> 00:11:17,080
this implementing drag and drop with

256
00:11:17,080 --> 00:11:19,500
like Mouse down mouse up and mouse over

257
00:11:19,500 --> 00:11:23,140
it's it's quite a challenge and a lot of

258
00:11:23,140 --> 00:11:24,310
the problem is that you're actually

259
00:11:24,310 --> 00:11:26,920
mixing concerns right you have you're on

260
00:11:26,920 --> 00:11:28,030
the one hand you're handling events

261
00:11:28,030 --> 00:11:32,320
right you are so you have these event

262
00:11:32,320 --> 00:11:33,670
handlers but then the event handlers

263
00:11:33,670 --> 00:11:37,030
themselves have to also set up other

264
00:11:37,030 --> 00:11:39,550
subscribers other event handlers cuz

265
00:11:39,550 --> 00:11:41,230
like basically when you when you do the

266
00:11:41,230 --> 00:11:42,580
Mouse down then you want to start

267
00:11:42,580 --> 00:11:44,200
tracking Mouse move and then when you do

268
00:11:44,200 --> 00:11:45,460
that get the mouse up you want to stop

269
00:11:45,460 --> 00:11:47,170
tracking Mouse move so there's a lot of

270
00:11:47,170 --> 00:11:48,250
different logic it gets pretty

271
00:11:48,250 --> 00:11:52,300
complicated and the observer pattern is

272
00:11:52,300 --> 00:11:53,770
really great and it's been around a long

273
00:11:53,770 --> 00:11:56,200
time it's reliable but it's not really

274
00:11:56,200 --> 00:11:58,480
perfect so this is my theory of how

275
00:11:58,480 --> 00:12:00,880
redux got created is that the Redux

276
00:12:00,880 --> 00:12:04,660
creators we're looking at this global

277
00:12:04,660 --> 00:12:07,030
event bus we're looking at the observer

278
00:12:07,030 --> 00:12:08,170
pattern and then they saw the global

279
00:12:08,170 --> 00:12:09,580
event bus and they were like maybe

280
00:12:09,580 --> 00:12:11,380
there's something valuable going on here

281
00:12:11,380 --> 00:12:13,270
but you might be wondering like maybe

282
00:12:13,270 --> 00:12:15,580
there's just a better way to do all this

283
00:12:15,580 --> 00:12:16,630
yeah

284
00:12:16,630 --> 00:12:18,970
so that's kind of the rest of my talk

285
00:12:18,970 --> 00:12:21,840
this is about how you can reuse a

286
00:12:21,840 --> 00:12:24,550
functional reactive programming to write

287
00:12:24,550 --> 00:12:27,910
front ends like a boss I want to return

288
00:12:27,910 --> 00:12:31,690
to my original metaphor of the the

289
00:12:31,690 --> 00:12:35,560
middle school classroom and actually in

290
00:12:35,560 --> 00:12:37,330
reference to the speaker I did actually

291
00:12:37,330 --> 00:12:38,920
teach but the lies that I taught middle

292
00:12:38,920 --> 00:12:41,080
school not high school which is arguably

293
00:12:41,080 --> 00:12:42,460
even harder but it wouldn't matter

294
00:12:42,460 --> 00:12:44,190
either way because I was terrible at it

295
00:12:44,190 --> 00:12:47,440
and and this this is not a talk about

296
00:12:47,440 --> 00:12:49,150
how to be a bad teachers is about how

297
00:12:49,150 --> 00:12:51,400
good teachers handle situations and if

298
00:12:51,400 --> 00:12:53,170
you've ever like watched a good teacher

299
00:12:53,170 --> 00:12:55,060
in action they're kind of like they're

300
00:12:55,060 --> 00:12:57,100
cut a Jedi like right like they have

301
00:12:57,100 --> 00:12:58,870
this ability to like like Oh

302
00:12:58,870 --> 00:13:01,810
be one the students into like thinking

303
00:13:01,810 --> 00:13:03,430
this is the lesson they're looking for

304
00:13:03,430 --> 00:13:06,220
right and and so how do they do that

305
00:13:06,220 --> 00:13:09,910
right they they do it the first rule is

306
00:13:09,910 --> 00:13:12,160
that like the lesson plan is not like a

307
00:13:12,160 --> 00:13:14,020
series of steps it's not a plan it's

308
00:13:14,020 --> 00:13:16,630
kind of more of a guide because if they

309
00:13:16,630 --> 00:13:18,130
treat it like a plan they're just gonna

310
00:13:18,130 --> 00:13:21,820
get interrupted instead teaching you'd

311
00:13:21,820 --> 00:13:23,740
almost think of actual teaching as a

312
00:13:23,740 --> 00:13:26,830
series of plan responses to

313
00:13:26,830 --> 00:13:30,010
interruptions right and really good

314
00:13:30,010 --> 00:13:33,550
teachers know how to not just respond to

315
00:13:33,550 --> 00:13:34,720
the interruption but to sort of like

316
00:13:34,720 --> 00:13:38,080
fold that interruption back into the

317
00:13:38,080 --> 00:13:40,570
rest of the lesson right and they and

318
00:13:40,570 --> 00:13:41,920
they have this wayward just sort of like

319
00:13:41,920 --> 00:13:44,500
each interruption gets folded into the

320
00:13:44,500 --> 00:13:47,770
stream of learning that always ends up

321
00:13:47,770 --> 00:13:49,240
on the key objectives of what they're

322
00:13:49,240 --> 00:13:51,400
trying to teach um so in that sense it

323
00:13:51,400 --> 00:13:53,850
almost is Jedi mind control um

324
00:13:53,850 --> 00:13:55,870
PSA is someone who's really bad at

325
00:13:55,870 --> 00:13:58,029
teaching I highly encourage our society

326
00:13:58,029 --> 00:14:06,880
to pay teachers a lot so what does this

327
00:14:06,880 --> 00:14:08,800
have to do with programming how do we

328
00:14:08,800 --> 00:14:12,670
write programs that where we where we

329
00:14:12,670 --> 00:14:15,070
write them as planned reactions to

330
00:14:15,070 --> 00:14:17,830
interruptions as our core concept well

331
00:14:17,830 --> 00:14:20,200
so I want to take a another digression

332
00:14:20,200 --> 00:14:21,970
into just some pure conceptual stuff

333
00:14:21,970 --> 00:14:24,400
let's look at this statement really

334
00:14:24,400 --> 00:14:26,950
basic y equals x plus three you've

335
00:14:26,950 --> 00:14:29,110
probably written something of this sort

336
00:14:29,110 --> 00:14:30,790
in your programs at some point in your

337
00:14:30,790 --> 00:14:33,880
programming career and if we think about

338
00:14:33,880 --> 00:14:35,709
it in our traditional sense in the

339
00:14:35,709 --> 00:14:40,209
imperative programming world this is an

340
00:14:40,209 --> 00:14:42,940
assignment right you're saying that Y is

341
00:14:42,940 --> 00:14:45,010
gonna be equal to whatever the current

342
00:14:45,010 --> 00:14:47,860
value of x is plus three one time and

343
00:14:47,860 --> 00:14:49,180
now it has that value and it will be

344
00:14:49,180 --> 00:14:52,480
that way for a while um but and I can

345
00:14:52,480 --> 00:14:54,130
tell you already there's a missing image

346
00:14:54,130 --> 00:14:55,360
coming up in this one I'm not sure what

347
00:14:55,360 --> 00:14:58,570
happened if if we think about math in

348
00:14:58,570 --> 00:15:00,000
math it actually has a different meaning

349
00:15:00,000 --> 00:15:03,279
in math y equals x plus three can

350
00:15:03,279 --> 00:15:05,770
express an entire graph right you can

351
00:15:05,770 --> 00:15:08,350
express its expresses uh what is it like

352
00:15:08,350 --> 00:15:11,230
I slope-intercept thing on a graph I'll

353
00:15:11,230 --> 00:15:12,610
have to talk to the math majors

354
00:15:12,610 --> 00:15:15,220
afterwards but anyway that's what it

355
00:15:15,220 --> 00:15:16,660
should there should be a graph there

356
00:15:16,660 --> 00:15:21,160
there's not so so it doesn't have to

357
00:15:21,160 --> 00:15:23,260
mean that and if we look at reactive

358
00:15:23,260 --> 00:15:26,529
programming we we could with this

359
00:15:26,529 --> 00:15:29,320
statement y equals x plus three could

360
00:15:29,320 --> 00:15:31,649
actually express a relationship between

361
00:15:31,649 --> 00:15:35,110
y and X and it's essentially saying that

362
00:15:35,110 --> 00:15:38,260
X is a value that could change over time

363
00:15:38,260 --> 00:15:40,930
and Y is a value that will always be

364
00:15:40,930 --> 00:15:44,260
that value plus 3 right so do you

365
00:15:44,260 --> 00:15:46,870
imagine oh my god what's going on with

366
00:15:46,870 --> 00:15:56,260
my images okay I'm not gonna

367
00:15:56,260 --> 00:15:57,190
troubleshoot this cuz we don't have

368
00:15:57,190 --> 00:15:59,890
enough time sorry this was working as of

369
00:15:59,890 --> 00:16:03,130
like two seconds ago you can imagine a

370
00:16:03,130 --> 00:16:09,940
line with lots of expo and you can

371
00:16:09,940 --> 00:16:13,060
imagine why as another line that doesn't

372
00:16:13,060 --> 00:16:16,140
look like a broken piece of paper and

373
00:16:16,140 --> 00:16:18,670
and and there's another there's another

374
00:16:18,670 --> 00:16:20,709
line of values under it and each value

375
00:16:20,709 --> 00:16:23,410
for X has a value for Y underneath it

376
00:16:23,410 --> 00:16:26,680
that is that value plus 3 and then you

377
00:16:26,680 --> 00:16:32,529
can even get another missing and so

378
00:16:32,529 --> 00:16:34,540
you've said those are both like a stream

379
00:16:34,540 --> 00:16:37,300
of data values over time but a stream of

380
00:16:37,300 --> 00:16:39,250
could be a stream of anything it could

381
00:16:39,250 --> 00:16:40,810
be a stream of mouse-clicks over time

382
00:16:40,810 --> 00:16:43,360
you can imagine just like every time the

383
00:16:43,360 --> 00:16:45,339
user clicks a mouse you add a new value

384
00:16:45,339 --> 00:16:47,860
onto this stream right um

385
00:16:47,860 --> 00:16:50,260
so reactive programming is essentially

386
00:16:50,260 --> 00:16:52,839
programming with data with streams of

387
00:16:52,839 --> 00:16:57,850
data and that's all well and good but

388
00:16:57,850 --> 00:17:00,070
how would we program this on a computer

389
00:17:00,070 --> 00:17:02,980
which is basically written to use to

390
00:17:02,980 --> 00:17:05,470
work imperative ly to execute

391
00:17:05,470 --> 00:17:07,929
instructions we need some kind of

392
00:17:07,929 --> 00:17:10,750
pattern where like every time a value

393
00:17:10,750 --> 00:17:14,380
changes the you could like subscribe to

394
00:17:14,380 --> 00:17:17,199
it and get notified that it was changing

395
00:17:17,199 --> 00:17:19,959
and I feel like we've heard of that

396
00:17:19,959 --> 00:17:21,400
pattern it's actually the observer

397
00:17:21,400 --> 00:17:23,620
pattern we just need to basically extend

398
00:17:23,620 --> 00:17:24,419
it make it a

399
00:17:24,419 --> 00:17:26,819
better to handle kind of like arbitrary

400
00:17:26,819 --> 00:17:31,169
things right so in reactive programming

401
00:17:31,169 --> 00:17:32,999
we have a concept called an observable

402
00:17:32,999 --> 00:17:36,960
and an observable is a is essentially a

403
00:17:36,960 --> 00:17:39,210
value that changes over time that we can

404
00:17:39,210 --> 00:17:40,919
listen for changes on but it could be

405
00:17:40,919 --> 00:17:45,539
anything so let's imagine a value as an

406
00:17:45,539 --> 00:17:47,700
observable so let's imagine we have a

407
00:17:47,700 --> 00:17:50,039
value X that is a value that changes

408
00:17:50,039 --> 00:17:52,080
over time that we can subscribe to and

409
00:17:52,080 --> 00:17:54,389
here you could write out the changes to

410
00:17:54,389 --> 00:17:57,960
X and then you can imagine if you wanted

411
00:17:57,960 --> 00:18:00,600
to write out the values of Y you could

412
00:18:00,600 --> 00:18:02,909
just subscribe to the changes on X and

413
00:18:02,909 --> 00:18:07,320
log X plus 3 right but what if we

414
00:18:07,320 --> 00:18:09,840
actually wanted to listen to the values

415
00:18:09,840 --> 00:18:14,669
on Y right so to figure this out let's

416
00:18:14,669 --> 00:18:16,830
uh let's rewind for a second and just

417
00:18:16,830 --> 00:18:19,649
imagine X as an array right so it's an

418
00:18:19,649 --> 00:18:22,049
array of values and if we wanted to get

419
00:18:22,049 --> 00:18:25,139
the array of Y values from this in

420
00:18:25,139 --> 00:18:26,879
JavaScript and a lot of programming

421
00:18:26,879 --> 00:18:28,739
languages we could use the map operation

422
00:18:28,739 --> 00:18:30,450
which takes essentially an array of

423
00:18:30,450 --> 00:18:32,759
values goes through each one transforms

424
00:18:32,759 --> 00:18:34,950
it and gives you back the array where

425
00:18:34,950 --> 00:18:36,509
each values been transformed by the

426
00:18:36,509 --> 00:18:40,980
function so an observable actually works

427
00:18:40,980 --> 00:18:42,989
the exact same way here we have an

428
00:18:42,989 --> 00:18:45,779
observable of these numbers and here

429
00:18:45,779 --> 00:18:47,669
they would just be output it immediately

430
00:18:47,669 --> 00:18:49,080
but we could think of them as happening

431
00:18:49,080 --> 00:18:53,549
over time and we could think of Y as the

432
00:18:53,549 --> 00:18:57,149
observable X mapped so that each value

433
00:18:57,149 --> 00:18:59,549
is the emitted value plus 3 and that

434
00:18:59,549 --> 00:19:01,409
produces another observable we could

435
00:19:01,409 --> 00:19:03,600
subscribe to so this is where the magic

436
00:19:03,600 --> 00:19:07,019
of reactive programming happens you have

437
00:19:07,019 --> 00:19:08,789
these observables which you can compose

438
00:19:08,789 --> 00:19:10,980
and continue to sort of like build up to

439
00:19:10,980 --> 00:19:12,899
do really awesome things so let's look

440
00:19:12,899 --> 00:19:15,450
at some cool stuff um it's gonna be our

441
00:19:15,450 --> 00:19:17,220
first interactive demo and I need to get

442
00:19:17,220 --> 00:19:19,139
over to the confidence screen given

443
00:19:19,139 --> 00:19:22,379
there ok so here we have a ball right

444
00:19:22,379 --> 00:19:25,169
and uh PS a full disclosure this is

445
00:19:25,169 --> 00:19:27,899
animated with a library but we could

446
00:19:27,899 --> 00:19:29,759
let's say we have these two buttons

447
00:19:29,759 --> 00:19:33,529
right and the buttons we can use them to

448
00:19:33,529 --> 00:19:36,599
we can use them to make the ball go left

449
00:19:36,599 --> 00:19:38,250
and right right

450
00:19:38,250 --> 00:19:41,250
so let's imagine that each time we click

451
00:19:41,250 --> 00:19:43,289
on one of these buttons it's an

452
00:19:43,289 --> 00:19:46,350
observable right and so we have our left

453
00:19:46,350 --> 00:19:47,730
button clicks and a right button clicks

454
00:19:47,730 --> 00:19:50,159
and if I click on the right button you

455
00:19:50,159 --> 00:19:52,110
we can imagine that we would get a quick

456
00:19:52,110 --> 00:19:55,590
right so then what if we take each right

457
00:19:55,590 --> 00:19:57,450
button click and translate it to the

458
00:19:57,450 --> 00:19:59,730
string right and each left button click

459
00:19:59,730 --> 00:20:01,260
and translate it to the string left

460
00:20:01,260 --> 00:20:05,460
right so now if I quick it becomes right

461
00:20:05,460 --> 00:20:07,590
and if I could if I click left it

462
00:20:07,590 --> 00:20:11,640
becomes left so then let's now further

463
00:20:11,640 --> 00:20:13,500
imagine that we make an observable that

464
00:20:13,500 --> 00:20:15,240
uses the left click position in the

465
00:20:15,240 --> 00:20:17,370
right position and just takes whatever

466
00:20:17,370 --> 00:20:20,490
the last the last one to admit is so now

467
00:20:20,490 --> 00:20:22,650
we have like a left click a left click

468
00:20:22,650 --> 00:20:25,200
and a left click so the position is left

469
00:20:25,200 --> 00:20:27,210
and if we had a right click then the

470
00:20:27,210 --> 00:20:29,220
position is right so you can see that

471
00:20:29,220 --> 00:20:31,440
basically by doing this the position is

472
00:20:31,440 --> 00:20:33,600
now an observable of the correct

473
00:20:33,600 --> 00:20:36,150
position for the ball to be in right now

474
00:20:36,150 --> 00:20:37,860
the actual animation in this case is

475
00:20:37,860 --> 00:20:40,080
being done with this library called pose

476
00:20:40,080 --> 00:20:43,169
but um you can you could I met but it's

477
00:20:43,169 --> 00:20:46,350
not that complicated to do so um how

478
00:20:46,350 --> 00:20:48,090
this actually works in code and here's

479
00:20:48,090 --> 00:20:49,440
where we're gonna introduce the library

480
00:20:49,440 --> 00:20:51,330
that I that we used to do reactive

481
00:20:51,330 --> 00:20:54,030
programming in JavaScript it's called rx

482
00:20:54,030 --> 00:20:56,850
yes and we have two functions here to

483
00:20:56,850 --> 00:20:58,950
create observables one that it makes it

484
00:20:58,950 --> 00:21:01,230
observable from an event and one called

485
00:21:01,230 --> 00:21:03,150
merge which takes two observables and

486
00:21:03,150 --> 00:21:05,610
outputs that observable that emits both

487
00:21:05,610 --> 00:21:08,309
of that both of their events so um and

488
00:21:08,309 --> 00:21:10,230
then we have some operators we have a

489
00:21:10,230 --> 00:21:12,929
map operator a start with operator and

490
00:21:12,929 --> 00:21:14,400
delay we actually aren't using here but

491
00:21:14,400 --> 00:21:15,900
that's what is being used in those

492
00:21:15,900 --> 00:21:20,669
animations of the actual signals and so

493
00:21:20,669 --> 00:21:22,770
here you have like a left button and a

494
00:21:22,770 --> 00:21:25,409
right button that are we just looked up

495
00:21:25,409 --> 00:21:26,909
from the Dom and then we've made an

496
00:21:26,909 --> 00:21:30,090
event stream of both of their clicks and

497
00:21:30,090 --> 00:21:33,900
then this is actually mapping each one

498
00:21:33,900 --> 00:21:37,289
from a quick to a string and in actual

499
00:21:37,289 --> 00:21:40,770
rxjs code we use this pipe operator and

500
00:21:40,770 --> 00:21:42,539
then we put our different operations in

501
00:21:42,539 --> 00:21:43,710
the middle and the cool thing about that

502
00:21:43,710 --> 00:21:45,630
is you can do multiple of them so here

503
00:21:45,630 --> 00:21:48,840
we're piping left the left and right to

504
00:21:48,840 --> 00:21:51,150
position oh sorry

505
00:21:51,150 --> 00:21:53,400
and then finally we're merging them

506
00:21:53,400 --> 00:21:55,650
right we are merging we're using that

507
00:21:55,650 --> 00:21:57,210
merge operator to take the two of them

508
00:21:57,210 --> 00:21:58,680
and we're adding one other thing which

509
00:21:58,680 --> 00:22:00,059
is we want to start it in the left

510
00:22:00,059 --> 00:22:04,620
position cool so how do I actually use

511
00:22:04,620 --> 00:22:08,760
this in my daily life you're all excited

512
00:22:08,760 --> 00:22:10,410
this looks cool you saw a bouncy ball

513
00:22:10,410 --> 00:22:13,200
but how do we actually do this um well I

514
00:22:13,200 --> 00:22:15,210
want our first stop talk about something

515
00:22:15,210 --> 00:22:16,530
that I noticed how many of you all went

516
00:22:16,530 --> 00:22:19,860
to Laurie boss's talk on NPM yeah a

517
00:22:19,860 --> 00:22:21,720
bunch of you you all remember this graph

518
00:22:21,720 --> 00:22:23,490
about the react ecosystem so when he

519
00:22:23,490 --> 00:22:26,730
headed up I was looking at it and I was

520
00:22:26,730 --> 00:22:29,220
like wait a second what's that green

521
00:22:29,220 --> 00:22:33,570
line wait isn't that I was like holy

522
00:22:33,570 --> 00:22:35,880
moly it's rjs and it's got more

523
00:22:35,880 --> 00:22:40,559
downloads than a react so this short the

524
00:22:40,559 --> 00:22:42,030
short answer we actually spent some time

525
00:22:42,030 --> 00:22:43,920
yesterday I spent the time with Laurie

526
00:22:43,920 --> 00:22:45,960
try to figure out how this happened as

527
00:22:45,960 --> 00:22:48,780
it turns out rxjs is used by some key

528
00:22:48,780 --> 00:22:52,140
libraries namely angular and es lint or

529
00:22:52,140 --> 00:22:54,600
dependencies thereof so it's it's

530
00:22:54,600 --> 00:22:55,530
installed by that

531
00:22:55,530 --> 00:22:57,270
um so even if you are programming with

532
00:22:57,270 --> 00:23:00,000
rxjs you actually are it's somewhere

533
00:23:00,000 --> 00:23:01,500
it's it's a lot of the people whose

534
00:23:01,500 --> 00:23:02,910
libraries you depend on program with

535
00:23:02,910 --> 00:23:08,940
rxjs um so but i want to talk about how

536
00:23:08,940 --> 00:23:10,140
you would use it to actually write

537
00:23:10,140 --> 00:23:12,270
programs of your own I mean I want to

538
00:23:12,270 --> 00:23:14,100
address two areas one is first how do I

539
00:23:14,100 --> 00:23:15,600
actually architect a real application

540
00:23:15,600 --> 00:23:19,520
with rxjs and how do i integrate this

541
00:23:19,520 --> 00:23:24,809
into my like applications today so let's

542
00:23:24,809 --> 00:23:26,550
talk briefly about a much more

543
00:23:26,550 --> 00:23:29,250
real-world example I mean here we have a

544
00:23:29,250 --> 00:23:31,500
login form one of our classic you know

545
00:23:31,500 --> 00:23:34,530
software challenges you have to like be

546
00:23:34,530 --> 00:23:36,480
able to enter a user and password when

547
00:23:36,480 --> 00:23:38,309
you submit you probably want to disable

548
00:23:38,309 --> 00:23:40,110
everything until it comes back with the

549
00:23:40,110 --> 00:23:42,750
response you have like a user you want

550
00:23:42,750 --> 00:23:44,340
to give a message or something you know

551
00:23:44,340 --> 00:23:46,110
the server tells you that something went

552
00:23:46,110 --> 00:23:47,850
wrong you've got somewhere in here an

553
00:23:47,850 --> 00:23:51,059
asynchronous call out to a back-end so

554
00:23:51,059 --> 00:23:53,520
there's a lot going on here right and so

555
00:23:53,520 --> 00:23:55,920
what so in assembling this we could

556
00:23:55,920 --> 00:23:57,900
start with three observables a username

557
00:23:57,900 --> 00:24:00,620
a password and a submit button and

558
00:24:00,620 --> 00:24:03,090
basically the user name would emit any

559
00:24:03,090 --> 00:24:04,490
time that I changed

560
00:24:04,490 --> 00:24:06,830
the value of the username and the

561
00:24:06,830 --> 00:24:09,020
password would admit every time that I

562
00:24:09,020 --> 00:24:10,880
changed the value of the password and

563
00:24:10,880 --> 00:24:13,310
the submit button you can think of just

564
00:24:13,310 --> 00:24:15,890
going whenever I quit the Smith so then

565
00:24:15,890 --> 00:24:18,650
if I were to express the act of

566
00:24:18,650 --> 00:24:20,690
attempting to login it would essentially

567
00:24:20,690 --> 00:24:24,050
be the every time I click the submit

568
00:24:24,050 --> 00:24:26,690
button take the last value of the

569
00:24:26,690 --> 00:24:28,640
username and password and it's an

570
00:24:28,640 --> 00:24:31,310
attempt a login with them so here like

571
00:24:31,310 --> 00:24:32,930
so essentially with that if I actually

572
00:24:32,930 --> 00:24:35,510
do is if I Smith here it takes those

573
00:24:35,510 --> 00:24:37,280
last values and you can see those the

574
00:24:37,280 --> 00:24:39,740
username and password there are the last

575
00:24:39,740 --> 00:24:42,740
thing that was emitted from those from

576
00:24:42,740 --> 00:24:45,800
these input boxes and so then once I

577
00:24:45,800 --> 00:24:49,190
have a login attempt then I need to

578
00:24:49,190 --> 00:24:51,500
process the response that gets backward

579
00:24:51,500 --> 00:24:52,790
then I get back from the server and that

580
00:24:52,790 --> 00:24:54,380
could be either a success or a fail

581
00:24:54,380 --> 00:24:56,960
right so I can so basically once that

582
00:24:56,960 --> 00:25:00,590
comes back I'm gonna go ahead and I get

583
00:25:00,590 --> 00:25:02,870
my attempt and then I get a response in

584
00:25:02,870 --> 00:25:05,270
that case it's a failure right once I

585
00:25:05,270 --> 00:25:07,280
have that I can do some more stuff I

586
00:25:07,280 --> 00:25:10,130
could filter down to just failures and

587
00:25:10,130 --> 00:25:12,290
just successes I might be able to derive

588
00:25:12,290 --> 00:25:15,260
like a login in progress from the time

589
00:25:15,260 --> 00:25:18,250
between a login attempt and a login

590
00:25:18,250 --> 00:25:20,480
login response and that might be useful

591
00:25:20,480 --> 00:25:22,310
for like disabling all these inputs

592
00:25:22,310 --> 00:25:25,100
while the logon is happening and then I

593
00:25:25,100 --> 00:25:28,400
might have then once I have a failure I

594
00:25:28,400 --> 00:25:30,110
don't want to convert it to a message so

595
00:25:30,110 --> 00:25:32,150
I can display it on the screen and

596
00:25:32,150 --> 00:25:33,950
lastly if I have a success I might have

597
00:25:33,950 --> 00:25:36,020
a user token and I might use that to get

598
00:25:36,020 --> 00:25:38,380
some like protected data from the server

599
00:25:38,380 --> 00:25:41,780
so all taken all together you have like

600
00:25:41,780 --> 00:25:43,220
Kourt you could do quite a bit of

601
00:25:43,220 --> 00:25:44,990
functionality with observables and I'll

602
00:25:44,990 --> 00:25:46,250
show you the actual code for this in a

603
00:25:46,250 --> 00:25:49,340
second but you can see here like you see

604
00:25:49,340 --> 00:25:51,530
a failure message sort of trickling down

605
00:25:51,530 --> 00:25:54,560
into the fail the the final fail message

606
00:25:54,560 --> 00:25:56,420
and then over here on the login in

607
00:25:56,420 --> 00:25:58,820
progress you have like the you know it

608
00:25:58,820 --> 00:26:00,350
tracks whether or not you're logging in

609
00:26:00,350 --> 00:26:02,600
and then if we were to do a success

610
00:26:02,600 --> 00:26:11,210
which is J is calm and awesome then

611
00:26:11,220 --> 00:26:13,830
we get a success and that gets a user

612
00:26:13,830 --> 00:26:15,480
token and that gets a protected resource

613
00:26:15,480 --> 00:26:18,930
and then we get your final like save

614
00:26:18,930 --> 00:26:23,130
data so that's you can imagine it

615
00:26:23,130 --> 00:26:24,150
filtering around

616
00:26:24,150 --> 00:26:26,040
how would that actually happen in code

617
00:26:26,040 --> 00:26:28,050
it's not actually as complicated as you

618
00:26:28,050 --> 00:26:29,970
might think making that little graph is

619
00:26:29,970 --> 00:26:32,280
pretty complicated but um but writing

620
00:26:32,280 --> 00:26:33,840
the code to do this is not terrible

621
00:26:33,840 --> 00:26:35,940
let's just imagine we have an API with a

622
00:26:35,940 --> 00:26:39,570
login and a pretend with the login

623
00:26:39,570 --> 00:26:41,400
endpoint and a protected resource

624
00:26:41,400 --> 00:26:45,090
endpoint of some sort so there's our API

625
00:26:45,090 --> 00:26:47,100
and then let's just say we have our

626
00:26:47,100 --> 00:26:49,500
username password and submit button I

627
00:26:49,500 --> 00:26:52,440
will get to how those work tie into the

628
00:26:52,440 --> 00:26:55,710
actual UI in a second and then we can do

629
00:26:55,710 --> 00:26:57,900
our login attempt it just becomes the

630
00:26:57,900 --> 00:27:02,220
submit button with an operator from rxjs

631
00:27:02,220 --> 00:27:03,960
called with latest from which basically

632
00:27:03,960 --> 00:27:06,210
just says take the latest username and

633
00:27:06,210 --> 00:27:08,250
password and add it to whatever the

634
00:27:08,250 --> 00:27:11,460
login attempt whatever the whenever the

635
00:27:11,460 --> 00:27:15,360
submit button is quick and then we have

636
00:27:15,360 --> 00:27:17,790
a login response uses this amazing

637
00:27:17,790 --> 00:27:22,440
operator called merge map in in rxjs and

638
00:27:22,440 --> 00:27:25,110
here we actually make an API call which

639
00:27:25,110 --> 00:27:27,000
returns a promise which is not something

640
00:27:27,000 --> 00:27:29,070
that has an immediate value but if you

641
00:27:29,070 --> 00:27:32,250
use merge map it essentially takes you

642
00:27:32,250 --> 00:27:33,600
know you what you do when you make the

643
00:27:33,600 --> 00:27:35,880
API call if you were to just use map you

644
00:27:35,880 --> 00:27:37,830
would get a stream of promises but merge

645
00:27:37,830 --> 00:27:40,560
map will reduce those down to just their

646
00:27:40,560 --> 00:27:43,080
underlying values when they arrive so

647
00:27:43,080 --> 00:27:44,850
this actually gives you a stream of the

648
00:27:44,850 --> 00:27:49,050
responses and then the login in progress

649
00:27:49,050 --> 00:27:51,840
is just expressed as essentially every

650
00:27:51,840 --> 00:27:54,870
login attempt flipping it to true and

651
00:27:54,870 --> 00:27:56,610
every login response flipping it to

652
00:27:56,610 --> 00:27:59,880
false and starting with false right the

653
00:27:59,880 --> 00:28:02,820
login successes can be expressed by

654
00:28:02,820 --> 00:28:04,770
taking the login response and just like

655
00:28:04,770 --> 00:28:06,000
we would with an array we can use a

656
00:28:06,000 --> 00:28:07,920
filter operator right and here we're

657
00:28:07,920 --> 00:28:09,930
filtering and just taking the status and

658
00:28:09,930 --> 00:28:13,350
converting it to a success um and then a

659
00:28:13,350 --> 00:28:15,090
login failure would just be the same

660
00:28:15,090 --> 00:28:17,580
thing but but filtering on the status

661
00:28:17,580 --> 00:28:20,640
being failure a login failure message

662
00:28:20,640 --> 00:28:22,950
would be taking all the login failures

663
00:28:22,950 --> 00:28:24,809
and just piping them to extract

664
00:28:24,809 --> 00:28:26,820
to a map operation to extract the

665
00:28:26,820 --> 00:28:30,720
message a user token would be extracting

666
00:28:30,720 --> 00:28:32,850
a token out of the success responses and

667
00:28:32,850 --> 00:28:34,440
then we could start the whole set the

668
00:28:34,440 --> 00:28:36,600
whole sequence all over again to get the

669
00:28:36,600 --> 00:28:38,580
protected resource and here we're taking

670
00:28:38,580 --> 00:28:40,559
the user tokens and piping those to make

671
00:28:40,559 --> 00:28:43,080
an API request with the user token to

672
00:28:43,080 --> 00:28:46,200
get a protected resource so that's how

673
00:28:46,200 --> 00:28:47,519
you could do some very complex

674
00:28:47,519 --> 00:28:49,080
functionality and not a whole lot of

675
00:28:49,080 --> 00:28:51,870
code using arcs yes know that graph

676
00:28:51,870 --> 00:28:53,429
you've seen it's a really important

677
00:28:53,429 --> 00:28:56,490
concept in rxjs that the more you get

678
00:28:56,490 --> 00:28:57,749
into it I wish more people knew about

679
00:28:57,749 --> 00:28:59,700
this it's called a signal graph right

680
00:28:59,700 --> 00:29:02,519
and it's how data propagates through

681
00:29:02,519 --> 00:29:04,259
your program and it's a really useful

682
00:29:04,259 --> 00:29:06,149
tool for thinking about your programs

683
00:29:06,149 --> 00:29:08,009
and gosh darn it oh I figured it out

684
00:29:08,009 --> 00:29:12,990
it's SVG's so that's an SVG but it's an

685
00:29:12,990 --> 00:29:16,619
SVG of a real signal graph and we i've

686
00:29:16,619 --> 00:29:17,759
actually programmed on production

687
00:29:17,759 --> 00:29:19,139
applications where the whole team

688
00:29:19,139 --> 00:29:21,600
maintains this signal breath as a way of

689
00:29:21,600 --> 00:29:23,220
like producing a shared understanding

690
00:29:23,220 --> 00:29:25,649
between the whole team about how you're

691
00:29:25,649 --> 00:29:27,179
doing you know about basically how the

692
00:29:27,179 --> 00:29:29,429
data model of your entire application

693
00:29:29,429 --> 00:29:32,399
works so how would you use this in real

694
00:29:32,399 --> 00:29:36,360
life I'm getting real close so let's

695
00:29:36,360 --> 00:29:37,919
talk about integrating at natural stuff

696
00:29:37,919 --> 00:29:40,230
first of all if you use angular and I

697
00:29:40,230 --> 00:29:42,179
actually don't use angular but if you do

698
00:29:42,179 --> 00:29:44,009
use angular it's like basically baked

699
00:29:44,009 --> 00:29:45,600
into the framework at a million ways and

700
00:29:45,600 --> 00:29:47,129
there's a million really easy ways to

701
00:29:47,129 --> 00:29:50,129
use rxjs and angular also you might want

702
00:29:50,129 --> 00:29:51,960
to check out our ng rx do I also

703
00:29:51,960 --> 00:29:54,330
encourage you to like not that's sort of

704
00:29:54,330 --> 00:29:56,009
like a big library that kind of operates

705
00:29:56,009 --> 00:29:57,749
like Redux and I encourage you to like

706
00:29:57,749 --> 00:30:00,419
not jump right to using the the library

707
00:30:00,419 --> 00:30:02,549
and try learning a little bit more about

708
00:30:02,549 --> 00:30:04,919
how our X works but let's get to the

709
00:30:04,919 --> 00:30:07,350
question on everybody's mind about react

710
00:30:07,350 --> 00:30:09,210
because if you're if you're writing a

711
00:30:09,210 --> 00:30:11,129
program in react and you have reactive

712
00:30:11,129 --> 00:30:12,960
Jas wouldn't it be better to have like

713
00:30:12,960 --> 00:30:16,980
reactive in your react so there's good

714
00:30:16,980 --> 00:30:19,889
news I am here to offer you something in

715
00:30:19,889 --> 00:30:22,649
this there's actually a whole bunch of

716
00:30:22,649 --> 00:30:26,490
different ways to do to to integrate

717
00:30:26,490 --> 00:30:29,129
react with rxjs and and full disclosure

718
00:30:29,129 --> 00:30:31,980
i'm going to present my way as in the

719
00:30:31,980 --> 00:30:34,710
software that i wrote because i cause

720
00:30:34,710 --> 00:30:36,779
i'm talking but there are a lot of other

721
00:30:36,779 --> 00:30:38,250
great alternatives and i highly

722
00:30:38,250 --> 00:30:39,570
heard you to look at them so I wrote a

723
00:30:39,570 --> 00:30:41,580
library called rx react and it's a

724
00:30:41,580 --> 00:30:43,560
series of tools for integrating react

725
00:30:43,560 --> 00:30:46,890
with rxjs and in fact everything you've

726
00:30:46,890 --> 00:30:48,930
seen in those interactive demos was

727
00:30:48,930 --> 00:30:51,810
written with this with rx react and the

728
00:30:51,810 --> 00:30:54,150
way it works it's pretty simple actually

729
00:30:54,150 --> 00:30:56,850
right let's say you how this is in this

730
00:30:56,850 --> 00:30:58,500
example this is our box that's like

731
00:30:58,500 --> 00:31:00,420
moving backward and forward in our inner

732
00:31:00,420 --> 00:31:04,230
screen right and what we do with rx

733
00:31:04,230 --> 00:31:06,120
react is we define something called a

734
00:31:06,120 --> 00:31:08,670
view model this is similar to this is

735
00:31:08,670 --> 00:31:10,140
basically drawing from a pattern called

736
00:31:10,140 --> 00:31:12,450
model view viewmodel which basically a

737
00:31:12,450 --> 00:31:14,400
view model is like the thing that

738
00:31:14,400 --> 00:31:16,860
supplies the data to the to the view

739
00:31:16,860 --> 00:31:19,020
which just does the presentation right

740
00:31:19,020 --> 00:31:22,080
um in this case with a view model it

741
00:31:22,080 --> 00:31:24,480
connects our observables into props in

742
00:31:24,480 --> 00:31:27,630
react in this case here's our inputs and

743
00:31:27,630 --> 00:31:32,130
the and for each input it's going to

744
00:31:32,130 --> 00:31:33,750
convert the observable here we have a

745
00:31:33,750 --> 00:31:36,030
position observable into a prop called

746
00:31:36,030 --> 00:31:37,830
position any time it up that's gonna

747
00:31:37,830 --> 00:31:40,320
update any time it updates right oh

748
00:31:40,320 --> 00:31:41,580
sorry

749
00:31:41,580 --> 00:31:45,120
and and so each inputs an observable it

750
00:31:45,120 --> 00:31:46,860
becomes a prop and you define this as a

751
00:31:46,860 --> 00:31:48,960
view model and then you import from this

752
00:31:48,960 --> 00:31:51,990
library rx react core because rx react

753
00:31:51,990 --> 00:31:56,220
was already taken on NPM you import a

754
00:31:56,220 --> 00:31:58,620
function called with view model and view

755
00:31:58,620 --> 00:32:00,330
model is just a higher-order component

756
00:32:00,330 --> 00:32:03,360
that takes your view model and binds it

757
00:32:03,360 --> 00:32:06,450
to your regular components so now this

758
00:32:06,450 --> 00:32:07,950
component anytime the positions

759
00:32:07,950 --> 00:32:10,920
observable updates it will rerender with

760
00:32:10,920 --> 00:32:12,720
a new position prop and you can do the

761
00:32:12,720 --> 00:32:17,040
same thing actually for for events you

762
00:32:17,040 --> 00:32:18,690
can you you have these things called

763
00:32:18,690 --> 00:32:21,630
outputs and it for an output each value

764
00:32:21,630 --> 00:32:24,600
here is some kind of is a special type

765
00:32:24,600 --> 00:32:26,190
of observable called a subject and you

766
00:32:26,190 --> 00:32:28,980
saw those in the slide earlier and

767
00:32:28,980 --> 00:32:32,340
essentially it converts it from so this

768
00:32:32,340 --> 00:32:34,530
subject the left click subject you will

769
00:32:34,530 --> 00:32:36,300
get in your component you'll get a

770
00:32:36,300 --> 00:32:38,700
property called on click which is itself

771
00:32:38,700 --> 00:32:41,580
a function that when you call will put a

772
00:32:41,580 --> 00:32:44,250
new value on to this on click observable

773
00:32:44,250 --> 00:32:46,770
and omit it right so this basically it

774
00:32:46,770 --> 00:32:49,170
converts from an observable emitting of

775
00:32:49,170 --> 00:32:51,970
a from a function to an emission

776
00:32:51,970 --> 00:32:54,519
an event on an observable you can

777
00:32:54,519 --> 00:32:56,529
actually and and actually you can do

778
00:32:56,529 --> 00:32:58,570
pretty complicated stuff pretty easily

779
00:32:58,570 --> 00:33:00,820
this is this right here is the code for

780
00:33:00,820 --> 00:33:03,460
that entire login form that I showed you

781
00:33:03,460 --> 00:33:05,289
a second ago we have our username and

782
00:33:05,289 --> 00:33:08,320
our password as inputs log you know our

783
00:33:08,320 --> 00:33:10,389
login and progress state our login

784
00:33:10,389 --> 00:33:13,539
failure messages and then we have we

785
00:33:13,539 --> 00:33:15,549
also have a username and password change

786
00:33:15,549 --> 00:33:16,990
which are the outgoing and this has to

787
00:33:16,990 --> 00:33:18,759
do with the way that react does inputs

788
00:33:18,759 --> 00:33:20,230
where you have to both like send it the

789
00:33:20,230 --> 00:33:21,909
new value and read the events if you

790
00:33:21,909 --> 00:33:23,379
want to do a controlled input and you

791
00:33:23,379 --> 00:33:24,700
have a submit button and that's all

792
00:33:24,700 --> 00:33:27,129
that's needed to connect that login form

793
00:33:27,129 --> 00:33:29,919
um so now we come to the final portion

794
00:33:29,919 --> 00:33:31,929
of this talk which is called the used

795
00:33:31,929 --> 00:33:33,370
car sales portion because I'm gonna go

796
00:33:33,370 --> 00:33:35,049
very quickly through all the amazing

797
00:33:35,049 --> 00:33:37,029
cool things you get when you use RX

798
00:33:37,029 --> 00:33:38,830
react if you act now

799
00:33:38,830 --> 00:33:43,179
so one thing it has is these view model

800
00:33:43,179 --> 00:33:44,649
factories like let's say you want to

801
00:33:44,649 --> 00:33:48,159
change the observables based on the

802
00:33:48,159 --> 00:33:50,799
props external to the component changing

803
00:33:50,799 --> 00:33:52,899
well so you can use a view model Factory

804
00:33:52,899 --> 00:33:55,570
to do that and that you use the same

805
00:33:55,570 --> 00:33:57,610
function the with view model and you're

806
00:33:57,610 --> 00:33:59,500
probably wondering but what about tight

807
00:33:59,500 --> 00:34:02,590
script because you care about your stuff

808
00:34:02,590 --> 00:34:04,779
not breaking you are concerned about the

809
00:34:04,779 --> 00:34:08,139
security of your so the good news

810
00:34:08,139 --> 00:34:10,659
is that rx react is written in tight

811
00:34:10,659 --> 00:34:13,050
script cuz I love tight script too and

812
00:34:13,050 --> 00:34:15,730
it actually has here I'm not gonna get

813
00:34:15,730 --> 00:34:17,139
into it but if you're in tight script it

814
00:34:17,139 --> 00:34:18,940
has really awesome type checking where

815
00:34:18,940 --> 00:34:21,099
like all the props have to line up and

816
00:34:21,099 --> 00:34:22,659
all the observables have to line up and

817
00:34:22,659 --> 00:34:24,730
like you won't mess up and whatnot

818
00:34:24,730 --> 00:34:28,540
or so I claim what if you're like I like

819
00:34:28,540 --> 00:34:31,300
observables but I also like reducers um

820
00:34:31,300 --> 00:34:33,159
cuz they're very hot right now well what

821
00:34:33,159 --> 00:34:36,490
if you could write a view model based on

822
00:34:36,490 --> 00:34:39,369
a reducer function similar to sort of

823
00:34:39,369 --> 00:34:41,500
the syntax of reason ml which is

824
00:34:41,500 --> 00:34:44,230
Facebook's new hotness in terms of like

825
00:34:44,230 --> 00:34:46,990
the way they want to take react in the

826
00:34:46,990 --> 00:34:49,000
future well guess what there's another

827
00:34:49,000 --> 00:34:51,940
package called rx react a slash reducer

828
00:34:51,940 --> 00:34:54,280
and it is also somewhat available now I

829
00:34:54,280 --> 00:34:55,690
actually don't know if I published it

830
00:34:55,690 --> 00:35:00,280
but what else and the rule need the

831
00:35:00,280 --> 00:35:02,290
coolest thing that fascinates me is like

832
00:35:02,290 --> 00:35:03,859
those signal graphs and

833
00:35:03,859 --> 00:35:06,619
just imagine I would really like to be

834
00:35:06,619 --> 00:35:08,779
able to automatically render one of

835
00:35:08,779 --> 00:35:10,400
those interactive diagrams so I could

836
00:35:10,400 --> 00:35:13,039
watch my programs do that doesn't exist

837
00:35:13,039 --> 00:35:15,650
right now but I've got a lot of ideas

838
00:35:15,650 --> 00:35:17,239
and I'm really working and one day there

839
00:35:17,239 --> 00:35:19,759
will be our X react flash signal but in

840
00:35:19,759 --> 00:35:21,259
the meantime I highly recommend our X

841
00:35:21,259 --> 00:35:24,230
react slash core I used it enough that I

842
00:35:24,230 --> 00:35:27,489
think it's not terrible so that's all

843
00:35:27,489 --> 00:35:31,369
you can find my slides right there and

844
00:35:31,369 --> 00:35:33,259
the github will be on the slides when

