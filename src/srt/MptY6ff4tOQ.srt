1
00:00:24,250 --> 00:00:25,560
Thank you.

2
00:00:25,560 --> 00:00:30,000
Hello everyone I am Peter, I am hoping that
you are still awake, this is the post lunch

3
00:00:30,000 --> 00:00:32,000
crowd I am aware of that.

4
00:00:32,000 --> 00:00:38,890
This guy on Twitter, even though my nickname
is actually 23 years old I was very late to

5
00:00:38,890 --> 00:00:42,290
Twitter so I have the underscores.

6
00:00:42,290 --> 00:00:48,370
I work at a company called Citryx Copenhagen
on a produced called Podio, where I am the

7
00:00:48,370 --> 00:00:56,170
front-end lead very short for the history
buffs amongst you Podio is a hyper card for

8
00:00:56,170 --> 00:01:02,760
the web, software service thing plus a bit
of collaboration on top of that.

9
00:01:02,760 --> 00:01:09,360
I have also been an organiser of Copenhagen.js
for a couple of years, some of you might recognise

10
00:01:09,360 --> 00:01:17,950
yourself on this image, if you want to leave
it there for a minute.

11
00:01:17,950 --> 00:01:22,820
If you have ever heard about me from the open
source circle you might have heard of my project

12
00:01:22,820 --> 00:01:29,770
called Assetgraph which is yet another build
tool with a different approach and I can't

13
00:01:29,770 --> 00:01:33,920
stop talking about it so if you want to learn
about this poke me in one of the breaks and

14
00:01:33,920 --> 00:01:36,670
find me.

15
00:01:36,670 --> 00:01:41,820
This is yet another build tooling talk but
this one is specific to transpiler so in case

16
00:01:41,820 --> 00:01:47,830
you don't no what a transpiler is it's a compiler
instead of compiling source code into machine

17
00:01:47,830 --> 00:01:51,800
code it compiles it into a different type
of source code.

18
00:01:51,800 --> 00:02:02,040
In this case on your right hand side which
is over here for you yes, is the machine code

19
00:02:02,040 --> 00:02:06,799
which in our case is CSS HTML JavaScript and
things like that.

20
00:02:06,799 --> 00:02:12,560
On the left hand which is really confusing
when it's opposite, you have the source code

21
00:02:12,560 --> 00:02:18,299
that you would like to write, this is your
ES6, Sass, stuff like that.

22
00:02:18,299 --> 00:02:24,180
Any time in this talk when I mention transpiler
or transpiling you can substitue for any of

23
00:02:24,180 --> 00:02:33,060
these in your mind, Saas, CoffeeScript, Babel,
TypeScript, Markdown or whatever.

24
00:02:33,060 --> 00:02:37,530
Odds are some of you have used one of these.

25
00:02:37,530 --> 00:02:40,120
So these are all transpilers.

26
00:02:40,120 --> 00:02:43,730
This talk is about why transpiling is a problem.

27
00:02:43,730 --> 00:02:49,090
I don't have a problem with transpilers there
was, transpilers are really awesome unix type

28
00:02:49,090 --> 00:02:54,380
tools which take 1 or more inputs and give
you one output and that is actually really

29
00:02:54,380 --> 00:02:56,269
simple and really good.

30
00:02:56,269 --> 00:03:01,900
The problem I have is with one of the side
affects that come with some of the build systems

31
00:03:01,900 --> 00:03:08,480
that people use when they integrate transpilers
into their work.

32
00:03:08,480 --> 00:03:13,980
The primary culprit here is the build artefact.

33
00:03:13,980 --> 00:03:16,430
The build artefact is the thing that your
browser

34
00:03:16,430 --> 00:03:24,600
consumes or that other tools consume it's
again your CSS, JavaScript, your HTML.

35
00:03:24,600 --> 00:03:29,709
Build artefacts have a transient nature, they
are not the thing we're actually interested

36
00:03:29,709 --> 00:03:34,010
in, but they are the thing that we need to
produce in order for the machine to understand

37
00:03:34,010 --> 00:03:35,990
what we're doing.

38
00:03:35,990 --> 00:03:41,020
So this means that we want build the artefacts
but primarily for consumption we're not really

39
00:03:41,020 --> 00:03:47,790
interested in storing them until we actually
want to deploy our websites.

40
00:03:47,790 --> 00:03:53,790
This gives us a weird duality and gives us
some problems with work field setups, let

41
00:03:53,790 --> 00:04:00,710
do a workflow set up of a project right now
so I can show you why this complex.

42
00:04:00,710 --> 00:04:05,840
So first of all, the simplest possible way
you can do transpiling is you transpile your

43
00:04:05,840 --> 00:04:10,269
source code into the target code in the same
directory.

44
00:04:10,269 --> 00:04:14,879
They are sibling files, in this case you have
your main Sass final which gets compiled into

45
00:04:14,879 --> 00:04:21,190
your main CSS file it's a sibling it's easy
to understand you know where to find your

46
00:04:21,190 --> 00:04:22,190
code.

47
00:04:22,190 --> 00:04:28,800
So we're not interested in the build artefacts
so let's add and ignore for CSS files in our

48
00:04:28,800 --> 00:04:32,440
source directory so we don't version control
them anymore.

49
00:04:32,440 --> 00:04:37,120
This is what most people do it's easiest to
main then.

50
00:04:37,120 --> 00:04:43,060
Now the first problem arrives because eventually
because the code that we produce as build

51
00:04:43,060 --> 00:04:48,880
art facts is the same code we might also write
in other cases, you might have other CSS files

52
00:04:48,880 --> 00:04:51,770
in your directory your source directory.

53
00:04:51,770 --> 00:04:56,500
These might also be JavaScript files it's
completely valid to have files of the extension

54
00:04:56,500 --> 00:04:58,930
that the browser consumes in your source directory.

55
00:04:58,930 --> 00:05:03,000
So if you start ignoring them you are in a
world of pain.

56
00:05:03,000 --> 00:05:04,000
So we don't do this.

57
00:05:04,000 --> 00:05:05,520
This is a bad idea.

58
00:05:05,520 --> 00:05:11,000
What most people have come up with is a set
up where you have your app and your main Sass

59
00:05:11,000 --> 00:05:13,960
file you compile into a directory called artefact.

60
00:05:13,960 --> 00:05:20,310
Or temp I think most people use underscore
temp in yeoman set up at least your main CCSS

61
00:05:20,310 --> 00:05:21,680
resides here.

62
00:05:21,680 --> 00:05:26,741
You can very easily ignore from version control
all your build artefacts you simple ignore

63
00:05:26,741 --> 00:05:29,710
the folder where they exist.

64
00:05:29,710 --> 00:05:35,780
This is pretty nice, but now you URL are sort
of broken because the source code is not actually

65
00:05:35,780 --> 00:05:40,190
where you expect to it be it's in a different
directory it might even be in a directory

66
00:05:40,190 --> 00:05:42,169
outside of your web route.

67
00:05:42,169 --> 00:05:47,940
So, in order to deal with this, people have
come up with this nice set up where you can

68
00:05:47,940 --> 00:05:53,990
add a piece of middleware to your web server
this will know about the existence of a build

69
00:05:53,990 --> 00:05:56,580
artefacts in a different directory.

70
00:05:56,580 --> 00:06:03,510
In the first we get we see that the web server
is looking for main.CSS in the directory,

71
00:06:03,510 --> 00:06:11,210
then looking for index.HTML in the artefacts
directory, it might not actually be a transpiled

72
00:06:11,210 --> 00:06:13,070
build artefact.

73
00:06:13,070 --> 00:06:18,570
So when it guess 404 it falls back to original
source directory then gets a correct hit on

74
00:06:18,570 --> 00:06:19,570
index.HTML.

75
00:06:19,570 --> 00:06:23,300
Then we have a piece of middleware that needs
to know something about your workflow set

76
00:06:23,300 --> 00:06:25,889
up.

77
00:06:25,889 --> 00:06:30,910
So next of all you probably want to somehow
trigger your builds get it tedious to manually

78
00:06:30,910 --> 00:06:35,580
run these tasks just as you don't like refreshing
your browser you probably don't like running

79
00:06:35,580 --> 00:06:39,200
mate or Grunt whatever you use.

80
00:06:39,200 --> 00:06:45,410
Usually people set up file watching they watch
all the CSS files all the Sass files it should

81
00:06:45,410 --> 00:06:50,560
have been in the source directory, and whenever
you have a

82
00:06:50,560 --> 00:06:56,110
source file increment whenever you make a
change, you trigger the transpiled task we

83
00:06:56,110 --> 00:07:00,380
set up before then you get your updated build
artefact.

84
00:07:00,380 --> 00:07:06,280
While we're added usually people set up library
loading so whenever build artefact gets updated

85
00:07:06,280 --> 00:07:10,340
the browser will also update so you can see
your changes.

86
00:07:10,340 --> 00:07:15,341
This is pretty nice but in order to orchestrate
this now you have a task, now you have a web

87
00:07:15,341 --> 00:07:19,319
server that needs to know about things, now
you have a file watcher you have a library

88
00:07:19,319 --> 00:07:23,521
loader, this is a lot to do manually so you
probably want to have some sort of task runner

89
00:07:23,521 --> 00:07:26,870
to orchestrate all of these things at the
same time.

90
00:07:26,870 --> 00:07:35,330
So people in here probably used at some point
in time Grunt, Gulp, Broccoli, Make even you

91
00:07:35,330 --> 00:07:38,020
can do that.

92
00:07:38,020 --> 00:07:39,440
That's about it.

93
00:07:39,440 --> 00:07:45,630
For workflow set up for CSS, but these days
we're not only transpiling CSS, we're also

94
00:07:45,630 --> 00:07:47,190
transpiling JavaScript.

95
00:07:47,190 --> 00:07:52,710
JavaScript is consumed by more consumers than
just the browser or your build system.

96
00:07:52,710 --> 00:07:58,660
So suddenly we need to also think about how
does this build artefact integrate or how

97
00:07:58,660 --> 00:08:04,360
does my workflow tooling integrate with all
the other consumers of my build artefact.

98
00:08:04,360 --> 00:08:12,960
How does the task runner understand ES6, how
does my production bundler understand ES6

99
00:08:12,960 --> 00:08:15,560
how does my test framework understand it.

100
00:08:15,560 --> 00:08:21,160
The solution for these are usually oh you
just have each of these tool implement a plug-in

101
00:08:21,160 --> 00:08:26,720
framework so you can use Babel plug-in for
you linter and you middleware and task runner

102
00:08:26,720 --> 00:08:33,210
and production bundler and test framework
and your module loader and for anything else

103
00:08:33,210 --> 00:08:36,229
that might be touching your source code.

104
00:08:36,229 --> 00:08:40,740
You need a plug-in for each of these for each
of the types of languages you want to transpile,

105
00:08:40,740 --> 00:08:45,610
just start multiplying the amount of plug-ins
you need.

106
00:08:45,610 --> 00:08:51,819
So some people think this is okay, the word
I use for it is "complex."

107
00:08:51,819 --> 00:09:00,140
I think this is way too complex but don't
worry there's a solution for this complexity,

108
00:09:00,140 --> 00:09:04,010
obviously you don't want to set up a system
like this by hand every time you create anew

109
00:09:04,010 --> 00:09:10,160
project, so we simply say oh we can order
generate it then it's easy.

110
00:09:10,160 --> 00:09:15,730
Because I only need to run one command, but
this is easy it's not simple.

111
00:09:15,730 --> 00:09:18,940
It's easy but creates a lot of complexity.

112
00:09:18,940 --> 00:09:25,050
The problem is when anything goes wrong, in
this set up, imagine you're a newbie, you

113
00:09:25,050 --> 00:09:29,950
are sitting in a code dojo and somebody tells
you to run a webapp and something goes wrong

114
00:09:29,950 --> 00:09:33,790
and all you see is this.

115
00:09:33,790 --> 00:09:40,140
Your first question is, how does it work?

116
00:09:40,140 --> 00:09:42,580
Why is it even set up in that way?

117
00:09:42,580 --> 00:09:46,570
You might have been able to follow me right
here, because you have all done this before,

118
00:09:46,570 --> 00:09:51,310
you have all felt the pain, the kind of understand
which moving parts are here, but a new newbie

119
00:09:51,310 --> 00:09:56,700
doesn't a this a big problem.

120
00:09:56,700 --> 00:10:01,290
Whenever I say workflow tool is complex there's
always at least one person in the room that

121
00:10:01,290 --> 00:10:09,760
says "oh you know Peter my set up is special,
my set up has legacy.

122
00:10:09,760 --> 00:10:15,820
My set up has complexity" so we need this
complexity.

123
00:10:15,820 --> 00:10:19,560
We need it.

124
00:10:19,560 --> 00:10:26,350
I promised Peter Fantazi(?) to say people
who say this are doing it wrong, you're doing

125
00:10:26,350 --> 00:10:29,060
it wrong if you ever said this you need complexity.

126
00:10:29,060 --> 00:10:33,370
You don't need complexity you need ability.

127
00:10:33,370 --> 00:10:37,610
The ability is what your tools are supposed
to give you, they are not supposed to give

128
00:10:37,610 --> 00:10:39,070
you complexity.

129
00:10:39,070 --> 00:10:46,200
The ideal tool gives you maximum ability and
minimum complexity, also called simplicity.

130
00:10:46,200 --> 00:10:52,940
So what we should strive for is to build tools
that are simple.

131
00:10:52,940 --> 00:10:59,110
So let's figure out what these moving parts
are, what are the important attributes of

132
00:10:59,110 --> 00:11:04,110
transpiling that we actually want in, in order
to gain this ability, then recompose them

133
00:11:04,110 --> 00:11:09,680
in a way so we can actually gain this ability
with minimum complex overhead so that a new

134
00:11:09,680 --> 00:11:16,330
person is able to say I want to use transpiler
but don't want to buy into a massive ecosystem,

135
00:11:16,330 --> 00:11:20,670
I want this one ability to transpile and nothing
else.

136
00:11:20,670 --> 00:11:23,959
Maybe I don't even want a web server.

137
00:11:23,959 --> 00:11:29,680
So the things I have come up with, this might
not be a complete list, some of these might

138
00:11:29,680 --> 00:11:33,470
also and not necessarily have to be there
but it's a good guideline right?

139
00:11:33,470 --> 00:11:42,300
I think in order to avoid this idiocy of having
a million transpiled plug-ins for everything,

140
00:11:42,300 --> 00:11:46,170
we should figure out a way to have a tool
that can actually just handle all types of

141
00:11:46,170 --> 00:11:51,649
transpilers, let's figure out how to unify
that a single transpiler can transpile more

142
00:11:51,649 --> 00:12:00,380
than one thing, we can clean up MPM, we don't
need all the plug-ins we don't need that any

143
00:12:00,380 --> 00:12:04,089
more, let's figure out how to do this.

144
00:12:04,089 --> 00:12:12,440
Needs a good API, integrate with other tools,
the best APII can come up with is a file system,

145
00:12:12,440 --> 00:12:16,430
because any tool can interact with a file
system.

146
00:12:16,430 --> 00:12:22,510
It should be stand alone and shouldn't impose
a big, nasty ecosystem on you, it should be

147
00:12:22,510 --> 00:12:27,820
doing on-demand transpilation, so some task
runners are actually not doing that right

148
00:12:27,820 --> 00:12:30,050
now, going to come back to that.

149
00:12:30,050 --> 00:12:37,130
Should keep URLs valid, if you can trace a
URL from your browser down directly to your

150
00:12:37,130 --> 00:12:42,149
source code and find your files on disk that
makes everything more simple.

151
00:12:42,149 --> 00:12:46,029
I think it should be nice, it should have
all the nice things that everybody wants to

152
00:12:46,029 --> 00:12:55,620
have, sources maps, auto prefixes, caching,
it should simply understand what needs to

153
00:12:55,620 --> 00:12:59,740
be done at the time you need it to be done.

154
00:12:59,740 --> 00:13:04,610
With that also comes, there should be a simple
mental model if you can't explain how this

155
00:13:04,610 --> 00:13:10,160
tool works within one or two sentences, then
it's probably too much.

156
00:13:10,160 --> 00:13:17,389
So, let's see how the current set up stacks
up, I'm a bit critical here so maybe more

157
00:13:17,389 --> 00:13:19,860
check marks over here.

158
00:13:19,860 --> 00:13:24,830
Task runners, they definitely handle all types
of transpilers with a lot of plug-ins which

159
00:13:24,830 --> 00:13:33,769
I don't like, give us source maps, auto prefixing
caching things like that, some of them have

160
00:13:33,769 --> 00:13:37,310
a really, really horrible API, most of them
actually.

161
00:13:37,310 --> 00:13:43,440
They are definitely not stand alone, they
do by definition impose an ecosystem that

162
00:13:43,440 --> 00:13:50,850
we have to work within, you cannot, like my
- that runs on file systems cannot consume

163
00:13:50,850 --> 00:13:59,880
a Gulf stream, transpilers transpile on file
change, they also transpile things that you

164
00:13:59,880 --> 00:14:03,900
might not actually be using at the moment,
that's a lot of waste of resource cycles fright

165
00:14:03,900 --> 00:14:10,329
there, don't keep URLs valid, at least if
you have a set up where you have your built

166
00:14:10,329 --> 00:14:16,269
artefacts outside of your web route, they
definitely have a lot of configuration, that's

167
00:14:16,269 --> 00:14:21,670
the primary things that these task runners
have and I don't think they're simple.

168
00:14:21,670 --> 00:14:29,320
Now, I don't want to hate on task runners,
I think that task runners are actually instrumental

169
00:14:29,320 --> 00:14:31,490
to getting us to where we are.

170
00:14:31,490 --> 00:14:37,130
I think they have created a very stable foundation
to develop tools on and I think we should

171
00:14:37,130 --> 00:14:41,730
thank them for that, but I also think that
they have been an incremental

172
00:14:41,730 --> 00:14:48,910
optimisation towards a local optimum, I think
we can maybe do a leap and figure out if there

173
00:14:48,910 --> 00:14:53,730
is a more optimal way to do this.

174
00:14:53,730 --> 00:14:58,730
One of the concepts that I've been thinking
about is control flow with this, most of these

175
00:14:58,730 --> 00:15:03,170
task runners are based on a control flow that
says, whenever you change your source code

176
00:15:03,170 --> 00:15:07,769
I'm doing some work and then I might tell
you about it.

177
00:15:07,769 --> 00:15:12,779
It's actually possible to reverse these there
are a few points in this set up where you

178
00:15:12,779 --> 00:15:18,329
can actually hook in and do the opposite,
you can figure out whenever somebody wants

179
00:15:18,329 --> 00:15:24,140
to consume an asset and then you can intercept
that and then you can do something about it.

180
00:15:24,140 --> 00:15:28,940
So one of the things that I've been using
instead of using a task runner for transpiling

181
00:15:28,940 --> 00:15:36,279
is a piece of middleware, this sits in my
express server and by having this ability

182
00:15:36,279 --> 00:15:46,760
to intercept requests you can integrate all
types of transpilers, you can figure out the

183
00:15:46,760 --> 00:15:52,600
browser wants this, I'll just go and fetch,
it also reduces the configuration, because

184
00:15:52,600 --> 00:15:57,500
I don't need to configure a path, the browser
will tell me the path it wants and I can read

185
00:15:57,500 --> 00:16:05,220
it from the file system here, do the changes,
map it, or prefix it and keep the URLs valid,

186
00:16:05,220 --> 00:16:08,690
it's kind of simple to understand, it's a
pipeline and on the way through some work

187
00:16:08,690 --> 00:16:13,770
is done, right, but it's missing some check
points.

188
00:16:13,770 --> 00:16:20,380
Not all my tools are consuming HTTP, that's
a problem, so I still need to have all these

189
00:16:20,380 --> 00:16:26,949
plug-ins for command line tools and I still
get all the complexity of having these plug-ins.

190
00:16:26,949 --> 00:16:34,149
So, I've thought a lot about this idea and
last year on, on this very stage actually,

191
00:16:34,149 --> 00:16:43,000
on this spot, Mattheus was demoing Wiki streamed
and stuff, he was using a technology that

192
00:16:43,000 --> 00:16:48,660
was really cool, instead of explaining a lot
about that, I'd like to jump into a demo and

193
00:16:48,660 --> 00:16:54,880
show you what I'm able to do by using this
idea that he gave me.

194
00:16:54,880 --> 00:17:00,690
So I'll jump into my console, this is big
enough text, looks good.

195
00:17:00,690 --> 00:17:06,260
New be developer, just at out of the coding
dojo.

196
00:17:06,260 --> 00:17:18,699
I have a sources folder with my awesome website,
it's really down-to-earth, hello world, index

197
00:17:18,699 --> 00:17:20,159
HTML, stuff like that.

198
00:17:20,159 --> 00:17:27,980
I can show you here, it looks like this, hello
JSConf.eu, it has a Cat image, every good

199
00:17:27,980 --> 00:17:33,270
website should have a Cat image, I can open
this thing and you can see it.

200
00:17:33,270 --> 00:17:39,690
It's a good example of a starter website I
have, a heading, "Hello world", I've given

201
00:17:39,690 --> 00:17:45,010
it a colour so I can interact with things,
a Cat image, it's always good for learning

202
00:17:45,010 --> 00:17:51,000
and I wrote it a bit, so again I can interact
with things.

203
00:17:51,000 --> 00:17:57,970
So one year later I'm slightly more experienced
webpage developer and now I'm ready to take

204
00:17:57,970 --> 00:18:00,910
on the concept of an abstraction.

205
00:18:00,910 --> 00:18:08,860
So, what I would like to do, is I would like
to be able to abstract my colour into a variable.

206
00:18:08,860 --> 00:18:17,260
So I ask someone and everybody in the room
here would probably say I need SASS.

207
00:18:17,260 --> 00:18:28,510
So my sources file, my main file, I thought
I would open it, I've already prepared a bit,

208
00:18:28,510 --> 00:18:36,760
I'm really, really bad at live coding, I create
the colour, no longer purple, but hot pink,

209
00:18:36,760 --> 00:18:43,690
a bit closer to the JSConf.eu colour, now
the heading should be hot pink, right.

210
00:18:43,690 --> 00:18:51,020
There is one more thing I need to do in order
to make this SASS, I need to move my file

211
00:18:51,020 --> 00:19:03,760
from sources main dot CSS, to main dot - it
means when I reload my page, in this case

212
00:19:03,760 --> 00:19:08,250
it doesn't work, it doesn't work because I've
moved the file and it doesn't see the file

213
00:19:08,250 --> 00:19:10,140
at all.

214
00:19:10,140 --> 00:19:14,660
Now I'm ready to integrate my transpiler,
right.

215
00:19:14,660 --> 00:19:19,820
So this is where I have a tool that I'd like
to demonstration for you, the tool is called

216
00:19:19,820 --> 00:19:31,690
fusile, a command line tool, I would tell
it, can you create a directory call, "DEV",

217
00:19:31,690 --> 00:19:39,700
before you do this you can see there isn't
one, when I run the command it tells me I've

218
00:19:39,700 --> 00:19:49,370
run some transpilers, babel, the done then
I have those in my node modules, you will

219
00:19:49,370 --> 00:19:56,690
see there is a directory here, with kind of
a weird, file size, summary, that doesn't

220
00:19:56,690 --> 00:20:03,250
quite make sense, but it's called 'DEV', if
you see the tree of the sources files compared

221
00:20:03,250 --> 00:20:07,610
to the tree of the DEV files, they look kind
of similar, right, they contain pretty much

222
00:20:07,610 --> 00:20:15,540
the same files, except for one difference,
in my sources directory, main CSS, target

223
00:20:15,540 --> 00:20:19,070
directory, DEV directory it's called main.

224
00:20:19,070 --> 00:20:26,280
CSS, what did it do, I can show you what it
did.

225
00:20:26,280 --> 00:20:31,220
It actually compiled the SASS for me, immediately.

226
00:20:31,220 --> 00:20:43,880
What I just did here I consumed the - on command
it compiled the SASS for me, using the colour

227
00:20:43,880 --> 00:20:52,330
variable, applied auto brief fixing and sources
mapping, if I open this awesome webpage again,

228
00:20:52,330 --> 00:20:58,280
it's hot pink and has the rotation and everything,
it's pretty awesome.

229
00:20:58,280 --> 00:21:06,540
This does not only work for, for SASS, it
also works for, probably, hello world file,

230
00:21:06,540 --> 00:21:16,240
an ES 6 syntax file, I can show you the output
of that, when I read it from the DEV directory

231
00:21:16,240 --> 00:21:18,900
and it's compiled it.

232
00:21:18,900 --> 00:21:25,710
It's pretty cool, I ran this one command line
tool, this configuration and it does the right

233
00:21:25,710 --> 00:21:35,150
thing for me.

234
00:21:35,150 --> 00:21:41,190
So the project is called fusile, it has the
same properties of the express middleware

235
00:21:41,190 --> 00:21:47,950
that I went through before, but it also checks
the two other boxes I think, good API, file

236
00:21:47,950 --> 00:21:54,960
system API, any other tool can consumer there
is, Linter, tester, you don't need a web server

237
00:21:54,960 --> 00:22:05,790
that's clever any more, Python Apache it doesn't
need to be spare for your application, it

238
00:22:05,790 --> 00:22:12,120
stands alone, I only know how to programme
node, if you know how to write this in C,

239
00:22:12,120 --> 00:22:14,570
come poke me and we can do that.

240
00:22:14,570 --> 00:22:21,220
Behind the scenes it's using library called
Fuse, file system in user space, it's actually

241
00:22:21,220 --> 00:22:27,130
just mounting this virtual directory and when
I read the files I can intercept the things

242
00:22:27,130 --> 00:22:34,210
just like the middleware and do work to them,
inside it's a basic streaming pipeline like

243
00:22:34,210 --> 00:22:38,309
in gulp if you do transpiling.

244
00:22:38,309 --> 00:22:45,250
So it's an open sources project, it is publicly
available and it is on MPM, on version 103

245
00:22:45,250 --> 00:22:47,350
or something.

246
00:22:47,350 --> 00:22:52,340
It's not entirely well tested, but it is definitely
development-ready, I would love for you to

247
00:22:52,340 --> 00:22:57,840
go in and try this out and see if you can
make it work for your set up, I'm definitely

248
00:22:57,840 --> 00:23:04,160
going to make this work on my work set up,
I want these tools to succeed or at least

249
00:23:04,160 --> 00:23:06,970
the idea to succeed.

250
00:23:06,970 --> 00:23:13,890
So, look this up, give me some feedback and
chat me up in the break and I can tell you

251
00:23:13,890 --> 00:23:18,510
more about it, but I want to leave you with
this, this is not only about the single tool,

252
00:23:18,510 --> 00:23:21,600
it's about the concept of tools.

253
00:23:21,600 --> 00:23:26,870
I want you to remember that tools are there
to provide ability and you should reject any

254
00:23:26,870 --> 00:23:31,390
complexity that they add, or at least question
it all the time.

255
00:23:31,390 --> 00:23:33,900
You should demand simplicity.

256
00:23:33,900 --> 00:23:40,390
This is what tooling is all about, so I think
you should look through your text, see what

257
00:23:40,390 --> 00:23:45,490
things do you have that actually don't give
you any benefits, figure out how they can

258
00:23:45,490 --> 00:23:47,010
be improved.

259
00:23:47,010 --> 00:23:51,960
If you can't do-it-yourself, ask on Twitter,
I have this problem, how can we improve it.

260
00:23:51,960 --> 00:23:56,659
I think this is the way to move tooling forward,
I would really like to give the next generation

261
00:23:56,659 --> 00:23:57,659
of

262
00:23:57,659 --> 00:24:02,539
web developers an easier starting point than
we have, I don't want anybody mess we that

263
00:24:02,539 --> 00:24:08,279
the amount of configuration it takes to set
this up manually.

264
00:24:08,279 --> 00:24:14,490
My slides are here, you can follow me here
and occasionally blog on this URL, I want

265
00:24:14,490 --> 00:24:15,890
to thank you for listening to me.

