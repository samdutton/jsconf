1
00:00:21,730 --> 00:00:25,730
Thank you for that wonderful introduction,
that once expected.

2
00:00:25,730 --> 00:00:31,230
Yes, hello, I'm James, I'm going to talk to
you today about practical functional programming,

3
00:00:31,230 --> 00:00:35,160
to make sure I get through this in plenty
of time, and the clock's not ticking down,

4
00:00:35,160 --> 00:00:40,070
so I don't know how much time I've got, that's
very confusing.

5
00:00:40,070 --> 00:00:41,940
What do I mean by functional programming?

6
00:00:41,940 --> 00:00:48,089
Well, initially I didn't even know, itches
looking for ideas to talk about on Twitter

7
00:00:48,089 --> 00:00:53,250
a while ago, and Jan gave this idea, practical
function fallal programming, and I brushed

8
00:00:53,250 --> 00:00:56,449
it off with a little juke.

9
00:00:56,449 --> 00:00:59,660
Got me thinking.

10
00:00:59,660 --> 00:01:06,020
It has first class functions, and we have
venttion and call backs and we have all the

11
00:01:06,020 --> 00:01:09,710
array operations like map, filter, reduce
and stuff like that.

12
00:01:09,710 --> 00:01:15,250
But, there's a lot more to functional programming
than we often acknowledge.

13
00:01:15,250 --> 00:01:20,170
And what I would like to do is sort of demystify
that a little bit.

14
00:01:20,170 --> 00:01:25,440
Because one criticism of functional programming,
it's not very practical and you need a PhD

15
00:01:25,440 --> 00:01:28,450
to understand it.

16
00:01:28,450 --> 00:01:32,929
What I'd like to do is sort of talk about
the ways in which we are already using functional

17
00:01:32,929 --> 00:01:37,250
ideas in mainstream JavaScript and how we
can pay better attention to those and get

18
00:01:37,250 --> 00:01:38,820
better value out of them.

19
00:01:38,820 --> 00:01:44,979
Also promise the last occurrence of the word
Monad in this talk, there's not going to be

20
00:01:44,979 --> 00:01:47,289
a lot of type theory stuff going on.

21
00:01:47,289 --> 00:01:49,950
What do we mean by functions?

22
00:01:49,950 --> 00:01:54,640
Functional programming is about programming
without side effects, if you're in the Parallel

23
00:01:54,640 --> 00:01:58,979
JavaScript talk earlier you would have heard
that side effects are one of the biggest barriers

24
00:01:58,979 --> 00:02:06,000
to parallelizing a program because you can't
reason about changes to a global state, makes

25
00:02:06,000 --> 00:02:08,060
it hard to parial rise things.

26
00:02:08,060 --> 00:02:10,940
What does it look like to program functionally.

27
00:02:10,940 --> 00:02:20,010
You want to calculate the length of a list,
length takes a list and returns an Int that's

28
00:02:20,010 --> 00:02:21,490
what that little type signature means.

29
00:02:21,490 --> 00:02:28,510
So, what you could do is set the counter to
0 and increment the counter for every iment

30
00:02:28,510 --> 00:02:30,440
and return the last value of the counter.

31
00:02:30,440 --> 00:02:35,650
How does that run out in practice, want to
get the value of the list, set the count to

32
00:02:35,650 --> 00:02:40,280
zero, first element, increment the index,
there's a second element, we increment, there's

33
00:02:40,280 --> 00:02:46,900
a third, we increment, there's no fourth element
we break the loop and induction is 3.

34
00:02:46,900 --> 00:02:51,990
The values of the index comments\h‑‑ those
aren't statements that appear anywhere in

35
00:02:51,990 --> 00:02:55,702
the program that state you have to keep in
your head while you figure out what the program

36
00:02:55,702 --> 00:03:00,030
dugs, that's what makes imperative programs
hard to reason about.

37
00:03:00,030 --> 00:03:04,859
A functional version would look like this,
cough free script has three dot syntax that

38
00:03:04,859 --> 00:03:10,230
breaks a list into the first elements and
the rest of the elements.

39
00:03:10,230 --> 00:03:15,150
If the first element is undefined the list
is empty, right, so it has length 0 otherwise

40
00:03:15,150 --> 00:03:19,799
the length one plus the length of the rest
of the list, we're doing a recuresive break

41
00:03:19,799 --> 00:03:20,799
down.

42
00:03:20,799 --> 00:03:26,719
What does that look like in practice, so,
there is a first element, so we'll pick a

43
00:03:26,719 --> 00:03:27,719
second bunch.

44
00:03:27,719 --> 00:03:34,780
We're just going to replace the definition,
we're using it as a rewrite rule, no implicit

45
00:03:34,780 --> 00:03:36,879
state to keep track of.

46
00:03:36,879 --> 00:03:41,379
We do that a couple more times then we get
length of the empty list, which we pick the

47
00:03:41,379 --> 00:03:46,659
first branch of the conditional, which is
0 and result falls out.

48
00:03:46,659 --> 00:03:51,129
So here rather than writing comments with
sate in them, I've written "is" before each

49
00:03:51,129 --> 00:03:54,330
expression, that's because they're identical.

50
00:03:54,330 --> 00:03:58,200
Doesn't mean they have the same value at a
particular point in time, they always have

51
00:03:58,200 --> 00:04:01,900
the same value you can replace any of these
expression with any of the other and the program

52
00:04:01,900 --> 00:04:05,540
will do the same thing.

53
00:04:05,540 --> 00:04:09,469
Substituting bitting of source code for each
other makes it easy to think about, you don't

54
00:04:09,469 --> 00:04:13,549
have to track state somewhere else in your
mind or on paper.

55
00:04:13,549 --> 00:04:21,769
Let's take another function, map, the signature
means map takes a function from A to B and

56
00:04:21,769 --> 00:04:26,510
a list of As and returns a list of Bs, the
imperative version of that would be to take

57
00:04:26,510 --> 00:04:32,940
an empty list and push ever VEX for every
element in the input and return the list.

58
00:04:32,940 --> 00:04:37,730
The functional version would be to say in
is no first element, the effect is undefined

59
00:04:37,730 --> 00:04:42,950
then return an empty list otherwise afully
F to the first element and then combine that

60
00:04:42,950 --> 00:04:45,340
with map over the rest of the list.

61
00:04:45,340 --> 00:04:50,420
Same structure as we're doing the went, we're
using list instead of numbers, say we want

62
00:04:50,420 --> 00:04:55,690
to square the first three numbers, we go,
there is a first element, so we'll take a

63
00:04:55,690 --> 00:05:00,280
second branch, so square of one is one, we
pull that out of the front and map over what's

64
00:05:00,280 --> 00:05:06,250
left, map over what's left, square two and
then, we have anmentty list, and so, the\h‑‑

65
00:05:06,250 --> 00:05:10,590
an empty list and then the result falls out.

66
00:05:10,590 --> 00:05:14,350
These are our functional solutions to the
problem, theye they work by not my stating

67
00:05:14,350 --> 00:05:18,560
the state, they work by giving you an expression
you're trying to calculatend that you can

68
00:05:18,560 --> 00:05:22,100
replace and you do that recursively.

69
00:05:22,100 --> 00:05:26,810
You can program by substitution by using these
things.

70
00:05:26,810 --> 00:05:30,940
The imperative solutions work by making some
state and then like changing that state until

71
00:05:30,940 --> 00:05:35,451
some condition becomes true and then handing
that state off to you at the end.

72
00:05:35,451 --> 00:05:39,940
But even though those have internal state
and they're not internally functional, they

73
00:05:39,940 --> 00:05:49,290
do exactly the same thing as these versions,
because,\h‑‑ they don't Mutate\h‑‑

74
00:05:49,290 --> 00:05:53,310
you can treat them as if they're the same
functions.

75
00:05:53,310 --> 00:06:00,370
That's useful, it means their state is completely
ensuelated the sidefects continue leek out

76
00:06:00,370 --> 00:06:01,910
into the rest of the program.

77
00:06:01,910 --> 00:06:06,530
We use that in promises.

78
00:06:06,530 --> 00:06:11,220
Promises have internal state, they are pending
and they can become fulfilled or rejected

79
00:06:11,220 --> 00:06:13,630
with a value or an error.

80
00:06:13,630 --> 00:06:18,190
But, every time you call then it will yield
the same value to you, you never get to see

81
00:06:18,190 --> 00:06:22,990
what's actually going on inside of the promise,
Jo us call then and value pops out and it's

82
00:06:22,990 --> 00:06:27,700
always the same value you can treat a promise
as an immutable value, which is useful.

83
00:06:27,700 --> 00:06:34,470
A couple weeks ago too much ash ford had this
really good essay, vents are bad primitive

84
00:06:34,470 --> 00:06:38,940
for data flow, they require distribution of
mutable state around your code and it's not

85
00:06:38,940 --> 00:06:47,130
idiomatic or plea Saint to flow through data
through events.

86
00:06:47,130 --> 00:06:52,070
We can use types to answer that question,
if we consider the FS.read file, that takes

87
00:06:52,070 --> 00:06:57,180
a path name, an encoding, a call back and
it returns nothing, and the call back is itself

88
00:06:57,180 --> 00:07:01,010
a function that takes an error, value and
alts returns nothing.

89
00:07:01,010 --> 00:07:04,710
Now function that returns nothing must have
side effects because if a function has no

90
00:07:04,710 --> 00:07:08,060
return value and no sidefects what why you
calling it?

91
00:07:08,060 --> 00:07:09,800
It's not doing anything.

92
00:07:09,800 --> 00:07:14,650
The thing that you think of not having side
effects is reading a file we work with these

93
00:07:14,650 --> 00:07:18,690
things using side effects functions, completely.

94
00:07:18,690 --> 00:07:22,490
When we're dealing with all these asynchronous
things all the time we have to make sure all

95
00:07:22,490 --> 00:07:26,130
the side effects happen in the right order
so the program doesn't get into a bizarre

96
00:07:26,130 --> 00:07:30,550
state, and trying to did that on concurrent
programs is very, very difficult, which you

97
00:07:30,550 --> 00:07:32,560
doubt know.

98
00:07:32,560 --> 00:07:37,401
It gets even harder when you try odo a lot
of things at same time, if you want to read

99
00:07:37,401 --> 00:07:42,140
a file and request a URL and get something
out of a data business at the same time, you

100
00:07:42,140 --> 00:07:50,770
use Async.parallel, and do operation, when
they complete you get a cull back and you

101
00:07:50,770 --> 00:07:55,490
get value for those things, what would I do
if I wanted to get the value of the file before

102
00:07:55,490 --> 00:07:57,840
the other things are completed and do something
with it.

103
00:07:57,840 --> 00:08:02,180
Because this, if any of the things fail, I
won't get any of the values, I only work on

104
00:08:02,180 --> 00:08:07,110
the file even if the HDP request fails, I
could pull the file operation out top.

105
00:08:07,110 --> 00:08:14,830
I have an FS.read file\h‑‑ but now I've
made the program slower because the second

106
00:08:14,830 --> 00:08:18,550
thing are blocked on the first thing completing,
so I de‑parol liesed it.

107
00:08:18,550 --> 00:08:25,230
That kills the performance, it's convenient,
but, you've traded convenience for performance.

108
00:08:25,230 --> 00:08:30,131
What you actually have do is keep the parallel
construct to make sure the IO happens at the

109
00:08:30,131 --> 00:08:34,839
same time but plug your processing into the
bit where the file is requested, the more

110
00:08:34,839 --> 00:08:42,729
you do these things the data processing, what
you're forced do by the way that we schedule

111
00:08:42,729 --> 00:08:48,089
things in asynchronous programs your programs
get very messy, edge tangled you get into

112
00:08:48,089 --> 00:08:49,089
what we
roll call

113
00:08:49,089 --> 00:08:54,399
back hell, it's not a sin tackic thing about
your code creeping across the page, it's the

114
00:08:54,399 --> 00:08:58,329
inability to reason able when things are happening
in your program and make sure they happen

115
00:08:58,329 --> 00:09:02,610
as efficiently as possible, to do this you
is to construct your program in a very specific

116
00:09:02,610 --> 00:09:06,089
way with call backs in all the right places.

117
00:09:06,089 --> 00:09:11,209
So, last year I read this article called call
backs are imperative, promises are functional,

118
00:09:11,209 --> 00:09:17,519
which had this quote "the future of promises
is that they remain immune to change circumstances."

119
00:09:17,519 --> 00:09:22,380
I've already mentioned that\h‑‑ I got
some laughs\h‑‑ I already mention how

120
00:09:22,380 --> 00:09:27,100
promises look like immutable values because
then always gives you the same result out

121
00:09:27,100 --> 00:09:31,680
once the tasks are completed, but this is
also true in a second way that I department

122
00:09:31,680 --> 00:09:38,639
realize at the same, the promises that deal
in changing promises much more easily.

123
00:09:38,639 --> 00:09:41,840
Before when I was using the asing module I
had to change my program quite radically,

124
00:09:41,840 --> 00:09:47,360
I could make a big structural change to it
to make quite a small requirement change.

125
00:09:47,360 --> 00:09:53,069
But say those functions return promises my
FS.read and database dot get always return

126
00:09:53,069 --> 00:09:58,999
promises of strings, I can call all those
functions and put the results in an array

127
00:09:58,999 --> 00:10:05,460
and all the Io will just happen in parallel,
but now I have an array of promises of strings.

128
00:10:05,460 --> 00:10:08,810
And if I want just the first\h‑‑ if I
just want the file out of that, then I can

129
00:10:08,810 --> 00:10:13,040
get the first promise out of the list and
do something with the result.

130
00:10:13,040 --> 00:10:16,399
If I want to wait for all of the things to
finish, then I can call promise.all with the

131
00:10:16,399 --> 00:10:22,480
documents and I get a promise that will give
me all of the results when they're ready,

132
00:10:22,480 --> 00:10:26,310
if I don't want to deal with the file on it's
own, I just delete the documents.zero line,

133
00:10:26,310 --> 00:10:35,110
I can just add lines for those, I don't have
to make bige structural changes to my program.

134
00:10:35,110 --> 00:10:39,560
You keep the ability to keep your IO happening
in parallel, but you keep the convenience

135
00:10:39,560 --> 00:10:43,370
of being able to work with it easily, that's
really important for dealing with programs

136
00:10:43,370 --> 00:10:46,500
that change a lot over time.

137
00:10:46,500 --> 00:10:50,809
And the reason this works is that I can ask
for the value out of the file promise and

138
00:10:50,809 --> 00:10:55,790
promise to all can also answer the value out
of that file promise, and it'll work both

139
00:10:55,790 --> 00:10:59,660
times because you can keep asking for the
value over and over again, and you won't repeat

140
00:10:59,660 --> 00:11:04,500
any work, what it means to be immutable, it's
rejuiceble, right.

141
00:11:04,500 --> 00:11:07,370
So let's talk\h‑‑ it's reusable.

142
00:11:07,370 --> 00:11:13,029
We talk about I in very imperative terms,
we say then takes a function and that function

143
00:11:13,029 --> 00:11:17,519
will be invoked when the task completes with
the value of the task, if it's completed it

144
00:11:17,519 --> 00:11:21,370
will be invoked with the value of the task
it returns a promise and that promise will

145
00:11:21,370 --> 00:11:28,279
be invoked with the return of the call back,
we talk about then, do this, then do this,

146
00:11:28,279 --> 00:11:29,339
and then do that.

147
00:11:29,339 --> 00:11:33,980
But if you think about the types of things
that are involved, what then really does it

148
00:11:33,980 --> 00:11:38,580
takes a promise of A and function there A
to B and returns a promise of B, if we have

149
00:11:38,580 --> 00:11:43,029
a promise of a string and we call then with
a function that counts the word in a string,

150
00:11:43,029 --> 00:11:49,749
string.split on spaces.length what we get
is a promise of an I Int, we might not have

151
00:11:49,749 --> 00:11:54,170
the Int, but that's the type of the value
we have, we continue to do more processing

152
00:11:54,170 --> 00:11:58,430
on it, transform it into another thing, transform
it into another thing, and use the promise

153
00:11:58,430 --> 00:12:02,100
itself as a value, not the thing that's inside
of it.

154
00:12:02,100 --> 00:12:08,060
This is exactly the same thing a ray.map works
it takes list of something and a function

155
00:12:08,060 --> 00:12:13,170
from A to B around returns a list of B, right,
so if you have a list of strings and you map

156
00:12:13,170 --> 00:12:16,749
a word counting function over the list, you
now have a list of word counts just as if

157
00:12:16,749 --> 00:12:20,660
you called then with a word counting function
you turn a promise of a string into a promise

158
00:12:20,660 --> 00:12:25,910
of a word count, a promise is just a container,
it's a list, they're the same thing, the operations

159
00:12:25,910 --> 00:12:31,089
are the same thing, a container of up type,
container of another type with a mapping function

160
00:12:31,089 --> 00:12:36,319
between them, and because they're just containertion
you can compos containers, they're just another

161
00:12:36,319 --> 00:12:40,449
type of data structure, if you have a list
of promise of strings you turn that into a

162
00:12:40,449 --> 00:12:46,310
list of promises of Int by mapping over the
array this is no different than mapping over

163
00:12:46,310 --> 00:12:49,600
nested array you have two maps inside of one
another.

164
00:12:49,600 --> 00:12:55,160
Promise to all is the same, we talk at promise
to all as in you give it a bunch of promises

165
00:12:55,160 --> 00:13:00,430
as input then it will give you one promise
when it resolve, we talk about it in time

166
00:13:00,430 --> 00:13:06,350
terms, if you talk about it in type terms,
it turns a container inside out you give it

167
00:13:06,350 --> 00:13:10,890
a list of promises and it gives you a promise
of a list, you get one promise back that will

168
00:13:10,890 --> 00:13:14,939
give you a list of all of the things.

169
00:13:14,939 --> 00:13:21,350
This also solves the Zaga\h‑‑ Zalg oproblem,
personification of the problem with writing

170
00:13:21,350 --> 00:13:24,301
call back APIs that will execute a call back
synchronously or asynchronously.

171
00:13:24,301 --> 00:13:35,740
A equals Null promise.then X equals data equals
X on statement before line three otherwise

172
00:13:35,740 --> 00:13:40,559
your program won't work, if it ran asin concurrent
resolution noselite would break.

173
00:13:40,559 --> 00:13:44,240
The only reason it's a problem is because
you have side effect, you care about things

174
00:13:44,240 --> 00:13:48,399
happening in a certain order something that's
been changed into another state before another

175
00:13:48,399 --> 00:13:52,480
statement runs, if instead you do your process
inside of the promise construct you don't

176
00:13:52,480 --> 00:13:56,589
think of a promise as a thing to get value
out of you think of it as a value on it's

177
00:13:56,589 --> 00:14:00,550
own that you can do commutation inside of,
then that problem goes away.

178
00:14:00,550 --> 00:14:07,749
Want to talk about laciness, another big topic
in functional programming (Lazi iness) I want

179
00:14:07,749 --> 00:14:12,089
to show you a little bit of Hasckell code\h‑‑
Haskell code.

180
00:14:12,089 --> 00:14:21,139
Cough free script is written as a colon, first
element colon, the rest of the elements.

181
00:14:21,139 --> 00:14:26,769
So map we've already seen, map of an Ety list
is an empty list,and map in the general case,

182
00:14:26,769 --> 00:14:31,170
you apply F to X and combine that to map over
the rest of the list, it looks weird but we

183
00:14:31,170 --> 00:14:37,220
saw it working in coffee script, filter works
pretty much the same way, filter of an empty

184
00:14:37,220 --> 00:14:44,379
list is an empty list, where peer Cex is true
you keep X you you combine with the filter

185
00:14:44,379 --> 00:14:50,149
of the rest of the list otherwise you throw
X away and keep the rest of the list, we keep

186
00:14:50,149 --> 00:14:53,670
X braced on whether the predicate is true
for the value.

187
00:14:53,670 --> 00:15:00,809
Take, first and end elements of allis, take
where N is less than 0 you don't want to take

188
00:15:00,809 --> 00:15:06,100
any more data, take of an empty list because
there's no more day the to take, so empty,

189
00:15:06,100 --> 00:15:12,300
then take in a general case, you pop the first
element and take N minus one of what's left

190
00:15:12,300 --> 00:15:16,429
and apply that recuresively the value will
fall out.

191
00:15:16,429 --> 00:15:18,579
This lets you do somethinger, very powerful.

192
00:15:18,579 --> 00:15:28,600
Haskell has infinite data structure, list
of ..., is to infinity, the filter would never

193
00:15:28,600 --> 00:15:33,670
return, it tries to process the whole array
at once, looks what happen in Haskel, I'm

194
00:15:33,670 --> 00:15:39,230
going to program by replacing functioncal
with the definition, so let's see what happens,

195
00:15:39,230 --> 00:15:43,319
so, even if one is false, so we drop the one.

196
00:15:43,319 --> 00:15:47,800
Even if 2 is true, so pull the 2 out front
and filter over what's left.

197
00:15:47,800 --> 00:15:53,129
Now, we've destructured the umer end to map
so we can pull that 2 through squaring functions,

198
00:15:53,129 --> 00:15:59,139
we structured the upper end to take, can pull
that expression out front, three minus what's

199
00:15:59,139 --> 00:16:05,160
left, levering with two, one value through
the list all the way through the pipeline.

200
00:16:05,160 --> 00:16:06,699
We do more time.

201
00:16:06,699 --> 00:16:11,559
We come down to take one, and one more time
again, we come down to take zero and we have

202
00:16:11,559 --> 00:16:13,990
three elements out front.

203
00:16:13,990 --> 00:16:19,379
We know by definition, take of zero is an
empty list and the result pops out.

204
00:16:19,379 --> 00:16:21,899
We didn't have to look at the rest of the
infinite list, we didn't have to care about

205
00:16:21,899 --> 00:16:22,899
it.

206
00:16:22,899 --> 00:16:27,399
That's really really powerful, skipping work
you don't need to do to get the result you

207
00:16:27,399 --> 00:16:28,399
want.

208
00:16:28,399 --> 00:16:34,899
Again, Tom ash worth summed it up nicely there
are two ways to combine transformations you

209
00:16:34,899 --> 00:16:39,110
perform the first transformation on the whole
collection before moving on to the second

210
00:16:39,110 --> 00:16:43,269
or perform all the transformations on the
first element of the collection before moving

211
00:16:43,269 --> 00:16:44,269
on to the second.

212
00:16:44,269 --> 00:16:49,009
Now the first version is how JavaScript deals
with array, filter the whole array and hand

213
00:16:49,009 --> 00:16:53,089
that off to the map and the map maps over
the whole array, reiterates it over how ever

214
00:16:53,089 --> 00:16:59,440
many operations you have, the second way is
the way Haskell deal was arrays

215
00:16:59,440 --> 00:17:03,949
's nothing inherent about the data structure
that says you is to process them this way,

216
00:17:03,949 --> 00:17:06,010
you can use either strategy.

217
00:17:06,010 --> 00:17:11,750
Just as Haskll deals with lists as if they
were streams question can deal with streams

218
00:17:11,750 --> 00:17:13,980
as if they're lists.

219
00:17:13,980 --> 00:17:16,449
Streams they're big part of node programming
right.

220
00:17:16,449 --> 00:17:21,730
Huge part of node programming, really node's
core feature, these streams.

221
00:17:21,730 --> 00:17:24,280
So, do something a little Funky.

222
00:17:24,280 --> 00:17:32,820
So, I'm going to make a classical map that
inherit from stream.platform, and transform

223
00:17:32,820 --> 00:17:37,200
method is going to replay that function to
incoming chunk and push it.

224
00:17:37,200 --> 00:17:43,559
Going to add a map method to stream.prototype
that pipes the stream through map transform,

225
00:17:43,559 --> 00:17:48,601
it's a similar lair toy array.map, we're taking
a stream of As, and a function from A to B

226
00:17:48,601 --> 00:17:50,220
and a stream of A to B.

227
00:17:50,220 --> 00:17:57,890
Same operation, filter same way, predicate
function, and now we're going to push the

228
00:17:57,890 --> 00:18:02,240
chunk, if the predicate is true for that chunk.

229
00:18:02,240 --> 00:18:05,980
Take is going to be substance showuated with
a number and in the transform method we're

230
00:18:05,980 --> 00:18:12,630
going to push the chunk if N is greater than
zero and then call N if it reaches zero, it

231
00:18:12,630 --> 00:18:18,250
will mean all the streams that are feeding
into this will stop sending it data because

232
00:18:18,250 --> 00:18:20,870
it's emitted end, doesn't want anymore data,
we can stop processioning when we have the

233
00:18:20,870 --> 00:18:21,910
information we want.

234
00:18:21,910 --> 00:18:24,610
That gets us lay citiness.

235
00:18:24,610 --> 00:18:26,770
We have split\h‑‑ Laziness.

236
00:18:26,770 --> 00:18:33,280
I'm going to add the split modules to the
prototype.

237
00:18:33,280 --> 00:18:37,250
Set high water mark 0 on all the streams,
that means node won't egg eerily buffer data

238
00:18:37,250 --> 00:18:42,169
the streams don't need, it will pull data
through as it needs.

239
00:18:42,169 --> 00:18:48,630
Put in a file called Lazy.Commonwealth of
Virginia fee, I can split the on‑line breaks

240
00:18:48,630 --> 00:18:54,429
and filter those lines if cluster finishing
and map those matches to upper case and take

241
00:18:54,429 --> 00:18:55,429
one of them.

242
00:18:55,429 --> 00:18:58,690
And if I attach a data list to that I will
get the first class definition that comes

243
00:18:58,690 --> 00:19:04,371
out as upper case, if you watch the filter
and the map functions here, they'll only be

244
00:19:04,371 --> 00:19:08,410
called as many times as necessary to produce
the output, the program won't consume the

245
00:19:08,410 --> 00:19:10,299
whole file, it's powerful.

246
00:19:10,299 --> 00:19:15,220
You're letting the consumer of the operation
dictate how much get read at the other end,

247
00:19:15,220 --> 00:19:18,230
you're avoiding work you don't need to do.

248
00:19:18,230 --> 00:19:22,340
So here we're programming the streams and
they look like arrays, it might look like

249
00:19:22,340 --> 00:19:27,809
a cute trick, it's a general model of programming,
general functional programming, I'm going

250
00:19:27,809 --> 00:19:34,690
to write an IRC client using this strategy,
first I'll write it imperative so it's familiar

251
00:19:34,690 --> 00:19:43,870
Irc is going to take a TCP socket stand in
and out, in a log file, we're going to split

252
00:19:43,870 --> 00:19:48,679
the TCP and put on‑line breaks, IRC is a
line warranted protocol, going to write that

253
00:19:48,679 --> 00:19:53,470
file to the logs, going to pause the line
into a\h‑‑ park it into a command structure,

254
00:19:53,470 --> 00:19:56,630
if it's a notice we'll print to screen.

255
00:19:56,630 --> 00:20:00,140
All the client will do is receive notices
from the server and print them.

256
00:20:00,140 --> 00:20:05,440
These are also wants to join rim,es so we'll
split standard I believee input on‑line

257
00:20:05,440 --> 00:20:12,030
break and if we see a line slash join, we
set our global variable room to the value

258
00:20:12,030 --> 00:20:19,549
of the Redux match and construct an Irc command,
the Irc command for joining that rim.

259
00:20:19,549 --> 00:20:24,049
If we did manager to construct a command,
then we'll unparse it turn it into a string

260
00:20:24,049 --> 00:20:28,000
and write that string to TCP and we'll write
it to the logs.

261
00:20:28,000 --> 00:20:33,700
We also want to send messages so if we oar
in a room and the line is not blank we'll

262
00:20:33,700 --> 00:20:39,310
construct a proof message command ILC speak
for sending a mission age somewhere with the

263
00:20:39,310 --> 00:20:42,850
room and the line of input, that's the room
that we're currently in, we always send a

264
00:20:42,850 --> 00:20:45,779
message to the room we're currently in.

265
00:20:45,779 --> 00:20:51,750
We want to receive messages from the server,
we'll get the channel and the message out

266
00:20:51,750 --> 00:20:56,289
of that command and then compare the channel
to the room that we're currently in, if they

267
00:20:56,289 --> 00:21:00,830
match, we'll display the line, so we're only
going to display messages from the server

268
00:21:00,830 --> 00:21:04,900
from the room that we're currently in instead
of all the rooms we've joined.

269
00:21:04,900 --> 00:21:11,030
There's what room we're in, there's conditional
processing, side effects things being written

270
00:21:11,030 --> 00:21:17,550
to, event listeners, this is the imperative
style for solving this problem.

271
00:21:17,550 --> 00:21:21,169
Programs like this tend to not scale very
well, the bigger they get, the harder it is

272
00:21:21,169 --> 00:21:26,570
to reason want is happening at which times,
which is important you've written in a state.

273
00:21:26,570 --> 00:21:27,570
Way.

274
00:21:27,570 --> 00:21:32,820
So, write that functionally, we can write
function that takes TCP input stream and user

275
00:21:32,820 --> 00:21:39,559
input stream and returns synchronously a TCP
output stream and user output stream and some

276
00:21:39,559 --> 00:21:43,950
logs, rather than taking it all as input and
returning nothing with side effects we take

277
00:21:43,950 --> 00:21:48,690
the inputs and return the outputs and do this
without using call backs.

278
00:21:48,690 --> 00:21:51,419
How is that going to work.

279
00:21:51,419 --> 00:21:57,971
We take Irc in equals TCP map,\h‑‑ take
a stream of strings mapping them through a

280
00:21:57,971 --> 00:22:03,269
pausing function and that gives a string of
IRC objects, just like working with arrays,

281
00:22:03,269 --> 00:22:08,299
pretend you're working with arrays, that's
what's going to happen, to get the notices,

282
00:22:08,299 --> 00:22:14,519
we can filter those commands for one who's
command is notice, then match map the matches

283
00:22:14,519 --> 00:22:18,350
and assign the notices to user out here.

284
00:22:18,350 --> 00:22:24,730
And that means user out will be the formated
notice commands from the TCP stream.

285
00:22:24,730 --> 00:22:29,380
And for the logs, we're just going to say
the logs are the TCP input for formatting

286
00:22:29,380 --> 00:22:31,150
function.

287
00:22:31,150 --> 00:22:38,159
We want to join room, add more code, say room
s is the user input, mapped through a function

288
00:22:38,159 --> 00:22:44,831
that does a reject match on each line of input,
it's going to match/join with a rename, we're

289
00:22:44,831 --> 00:22:49,789
going to filter the reduction matches, so
we just get the lines thattingually matched

290
00:22:49,789 --> 00:22:56,460
and we're going to match those matches to
pull the room value out of the\h‑‑ now

291
00:22:56,460 --> 00:23:01,340
we have a stream of rooms that we've join
joined to tell the server about that we need

292
00:23:01,340 --> 00:23:09,799
need fro deuce a join command, join command
equals room.map to produce an IRC command.

293
00:23:09,799 --> 00:23:15,919
And then to send those to the server, we can
say TCP out, equals joint command IRC, we

294
00:23:15,919 --> 00:23:21,429
oar taking this stream of joint commands here,
mapping them to strings and assigning that

295
00:23:21,429 --> 00:23:26,669
to the TCP output, I'm also merging the TCP
output into the logs here, time taking stuff

296
00:23:26,669 --> 00:23:31,470
from input and stuff from out put and combining
them in really clean way to get my logs, instead

297
00:23:31,470 --> 00:23:35,701
of putting logging logic at different point
in the program as before.

298
00:23:35,701 --> 00:23:41,980
Now, we want to be able to send messages,
to send a message you need the room you're

299
00:23:41,980 --> 00:23:45,600
currently in, and you fled message you want
to send, we try dog this without states, there's

300
00:23:45,600 --> 00:23:53,660
no global room variable (Need) instead of
what we do user end out filter for lines that

301
00:23:53,660 --> 00:23:59,919
aren't blank and we do this thing rooms.sampled
by, whatever messages\h‑‑ event, it gets

302
00:23:59,919 --> 00:24:05,679
the latest vent by rooms and give both of
the values by function arguments and construct

303
00:24:05,679 --> 00:24:14,090
an IRC out of them, and then, we can just
merge those into the TCP output with the joins

304
00:24:14,090 --> 00:24:16,970
that we're sending earlier.

305
00:24:16,970 --> 00:24:19,289
So ...

306
00:24:19,289 --> 00:24:22,799
finally we want to be able to receive messages
from other people.

307
00:24:22,799 --> 00:24:30,080
So, we're going to filter the incoming messages
for ones that match prove messages, and again,

308
00:24:30,080 --> 00:24:34,450
we're going to use sample by, so every time
we get a message in, we're going to give the

309
00:24:34,450 --> 00:24:38,480
room we're currently in, and the message we
just got, and compare the room that we're

310
00:24:38,480 --> 00:24:43,070
currently if to the message room parameter,
this gives us a stream of Boole cranes to

311
00:24:43,070 --> 00:24:47,890
tell us whether the message we just got is
for the room that we're currently in, it's

312
00:24:47,890 --> 00:24:50,090
slightly weird operation, but it does work.

313
00:24:50,090 --> 00:24:56,200
And then I can filter the in‑coming messages
on that stream, if you have a stream of Boole

314
00:24:56,200 --> 00:25:00,130
cranes you can use that to filter something
else.

315
00:25:00,130 --> 00:25:04,840
This will give you a stream of the in‑coming
messages for the room I'm currently in, I've

316
00:25:04,840 --> 00:25:10,549
written a non‑trivial network application
that does exactly what we had before, no side

317
00:25:10,549 --> 00:25:16,320
effects no variables are my stated, no call
backs in the sense of side effect functions

318
00:25:16,320 --> 00:25:17,770
that return nothing.

319
00:25:17,770 --> 00:25:22,160
It's all pure functions, you can replace any
variable variable in the program with a definition

320
00:25:22,160 --> 00:25:26,610
and the program will do exactly the same thing,
there's no hidden state to take care of, rather

321
00:25:26,610 --> 00:25:30,460
than write ago program that says do this,
then do this, you've written a program that

322
00:25:30,460 --> 00:25:34,750
defines streame streams of day the relative
to other streams of data and the control flow

323
00:25:34,750 --> 00:25:40,250
is implicit that makes it easier to work in
current programs.

324
00:25:40,250 --> 00:25:43,409
To sum up you can get the slides here.

325
00:25:43,409 --> 00:25:51,320
The article that Tom Ashwroth wrote.

326
00:25:51,320 --> 00:25:54,519
\h‑‑ similarities between promises and
liveses and maybes and stuff like that and

327
00:25:54,519 --> 00:26:00,059
how they compos, last year Phillip Roberts
is giving a talk here tomorrow, gave a really

328
00:26:00,059 --> 00:26:04,880
good talk ant real‑timeCONF that you need
watch.

329
00:26:04,880 --> 00:26:10,250
And I've ended that with the links to documentation
for some of these streaming libraries that

330
00:26:10,250 --> 00:26:11,630
I've use in the this talk.

331
00:26:11,630 --> 00:26:18,450
Finally, I thought I'd try and do something
nice while I'm here, earlier this year I wrote

332
00:26:18,450 --> 00:26:25,220
this book, apparently it's quite good, if
you use the code JSFST for this weekend you

333
00:26:25,220 --> 00:26:28,659
can get fiver pounds off of it, and it's already
half price.

334
00:26:28,659 --> 00:26:30,690
thank you for having me.

