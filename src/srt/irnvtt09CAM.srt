1
00:00:09,410 --> 00:00:11,730

we're terrible at secrets at Mozilla so

2
00:00:11,730 --> 00:00:13,049
I think it's known what we're talking

3
00:00:13,049 --> 00:00:14,309
about it like it's been in github for a

4
00:00:14,309 --> 00:00:18,810
while and there are links here and we

5
00:00:18,810 --> 00:00:21,779
have an IRC channel mailing list so I'm

6
00:00:21,779 --> 00:00:23,910
talking about spider node v8 monkey and

7
00:00:23,910 --> 00:00:29,400
you what the POW is polish Anna sees

8
00:00:29,400 --> 00:00:32,820
here I'll be helping with a QA he and

9
00:00:32,820 --> 00:00:35,940
rob Arnold and Chong Wilshire decided to

10
00:00:35,940 --> 00:00:40,410
do this crazy I'd thing of how you can

11
00:00:40,410 --> 00:00:43,530
read that put the v8 API around spider

12
00:00:43,530 --> 00:00:46,800
monkey and put it in node soviet monkey

13
00:00:46,800 --> 00:00:50,570
is the v8 api for spider monkey and

14
00:00:50,570 --> 00:00:54,480
spider node is a clone of node that uses

15
00:00:54,480 --> 00:01:00,270
v8 monkey instead of v8 and it works but

16
00:01:00,270 --> 00:01:03,030
why would you want to do this well we we

17
00:01:03,030 --> 00:01:07,020
love v8 it's awesome it's really good

18
00:01:07,020 --> 00:01:09,869
work and it keeps getting better and we

19
00:01:09,869 --> 00:01:11,670
also like the other open source engine

20
00:01:11,670 --> 00:01:14,970
of note webkinz javascriptcore the

21
00:01:14,970 --> 00:01:16,229
clothes or sentence we don't know about

22
00:01:16,229 --> 00:01:18,930
them spider monkey is very own it's

23
00:01:18,930 --> 00:01:20,909
something that i wrote as a second

24
00:01:20,909 --> 00:01:24,210
engine at Netscape when I was supposed

25
00:01:24,210 --> 00:01:25,439
to be helping out with standardized yes

26
00:01:25,439 --> 00:01:26,820
one actually took time to do this and

27
00:01:26,820 --> 00:01:29,009
got in trouble with my bosses but the

28
00:01:29,009 --> 00:01:30,390
first engine i did was such a rush that

29
00:01:30,390 --> 00:01:32,670
it needed rewritten so spider monkeys

30
00:01:32,670 --> 00:01:35,250
very old and as one of the Heather said

31
00:01:35,250 --> 00:01:36,750
my after life is so boring because we've

32
00:01:36,750 --> 00:01:38,369
really been through a lot and we've

33
00:01:38,369 --> 00:01:40,350
written it incrementally it's even now

34
00:01:40,350 --> 00:01:43,140
getting a new GC a new intermediate

35
00:01:43,140 --> 00:01:45,509
representation SS a super optimizing

36
00:01:45,509 --> 00:01:48,210
profiling just in time infrastructure

37
00:01:48,210 --> 00:01:50,700
called ion monkey and type inference

38
00:01:50,700 --> 00:01:52,530
which is going to be awesome um Brian

39
00:01:52,530 --> 00:01:54,030
Hackett's doing that one already it

40
00:01:54,030 --> 00:01:59,820
might ship soon we we love v8 C++ API

41
00:01:59,820 --> 00:02:02,159
spider monkey so will it will see so the

42
00:02:02,159 --> 00:02:04,259
API is sea spider mark is used in the

43
00:02:04,259 --> 00:02:05,850
Bloomberg terminal there's 16 million

44
00:02:05,850 --> 00:02:08,340
lines of JavaScript there it's not going

45
00:02:08,340 --> 00:02:10,679
away it has its own API but the VA API

46
00:02:10,679 --> 00:02:13,540
is nice and clean c++ with

47
00:02:13,540 --> 00:02:15,659
just the good parts all you need for

48
00:02:15,659 --> 00:02:19,120
safety like templates and stories class

49
00:02:19,120 --> 00:02:20,950
auto constructors and destructors stuff

50
00:02:20,950 --> 00:02:23,650
like that garbage collection all the way

51
00:02:23,650 --> 00:02:26,469
tube to nuts the jobs of language is

52
00:02:26,469 --> 00:02:28,120
evolving how many people were at j s

53
00:02:28,120 --> 00:02:31,239
conf okay you're going to see some

54
00:02:31,239 --> 00:02:33,400
slides but i'll go fast for those of you

55
00:02:33,400 --> 00:02:35,829
who weren't the slides that i'll show

56
00:02:35,829 --> 00:02:38,290
thats will be of interest harmony is

57
00:02:38,290 --> 00:02:40,659
coming to es next and it's it's means

58
00:02:40,659 --> 00:02:42,609
that there's going to be supporting v8

59
00:02:42,609 --> 00:02:46,030
at some point and we're not doing v8

60
00:02:46,030 --> 00:02:47,739
monkey to try to sell you something we

61
00:02:47,739 --> 00:02:49,900
are doing it to get the vapi up and do

62
00:02:49,900 --> 00:02:51,220
some experiments and if you want to use

63
00:02:51,220 --> 00:02:54,069
it great we we welcome people we're not

64
00:02:54,069 --> 00:02:55,450
trying to fork the no community we're

65
00:02:55,450 --> 00:02:58,000
not trying to compete with v8 I mean

66
00:02:58,000 --> 00:02:59,109
they have an awesome garbage collector

67
00:02:59,109 --> 00:03:02,349
we're not ready to do that yet so you

68
00:03:02,349 --> 00:03:04,090
notice a great test bet it's outside the

69
00:03:04,090 --> 00:03:05,859
browser you can you can rev it quickly

70
00:03:05,859 --> 00:03:07,269
you can use new features without

71
00:03:07,269 --> 00:03:09,639
worrying about ie6 this is why we're

72
00:03:09,639 --> 00:03:12,159
doing this here's the es next stuff that

73
00:03:12,159 --> 00:03:13,389
I showed at James Caan gonna go really

74
00:03:13,389 --> 00:03:17,579
fast you've seen all this it's awesome

75
00:03:17,579 --> 00:03:19,989
some of it is supported with this tracer

76
00:03:19,989 --> 00:03:22,299
compiler that google announced and there

77
00:03:22,299 --> 00:03:23,650
are other such things out there

78
00:03:23,650 --> 00:03:26,530
transpiler 'he's having it supported in

79
00:03:26,530 --> 00:03:27,639
your engine is even better because it's

80
00:03:27,639 --> 00:03:29,290
fast and you have to run a compiler or

81
00:03:29,290 --> 00:03:33,010
transpiler some of the stuff here makes

82
00:03:33,010 --> 00:03:34,479
arguments go away like the rest and

83
00:03:34,479 --> 00:03:37,030
spread proxies and weak maps are great

84
00:03:37,030 --> 00:03:39,510
for doing runtimes and bridges and

85
00:03:39,510 --> 00:03:44,849
mirrors and Dom's node lists modules are

86
00:03:44,849 --> 00:03:48,639
very much aligned I would say with

87
00:03:48,639 --> 00:03:50,169
common jas but built into the language

88
00:03:50,169 --> 00:03:52,090
so that the compiler knows what to

89
00:03:52,090 --> 00:03:56,019
prefetch iterators and generators syntax

90
00:03:56,019 --> 00:03:59,939
being discussed still pretty pythonic

91
00:03:59,939 --> 00:04:02,079
comprehensions got to have them also

92
00:04:02,079 --> 00:04:05,169
generate expressions and then binary

93
00:04:05,169 --> 00:04:06,489
data this might be of interest because

94
00:04:06,489 --> 00:04:08,049
we're trying to embrace and extend the

95
00:04:08,049 --> 00:04:10,449
WebGL typed arrays which are similar

96
00:04:10,449 --> 00:04:13,030
quite close to the node buffer built in

97
00:04:13,030 --> 00:04:15,159
and we think that this will be a really

98
00:04:15,159 --> 00:04:16,299
bright future because you can finally

99
00:04:16,299 --> 00:04:19,090
have sort of see like structs written in

100
00:04:19,090 --> 00:04:19,870
a

101
00:04:19,870 --> 00:04:22,849
almost declarative way generative types

102
00:04:22,849 --> 00:04:24,470
that you can then use to look at binary

103
00:04:24,470 --> 00:04:26,780
data you can have array of structs

104
00:04:26,780 --> 00:04:29,629
trucks containing array members you can

105
00:04:29,629 --> 00:04:31,970
nest them either way all the way down so

106
00:04:31,970 --> 00:04:34,789
that's that's pretty awesome it's doing

107
00:04:34,789 --> 00:04:37,639
great with WebGL you need a way to get

108
00:04:37,639 --> 00:04:39,800
string encoded strings in and out of

109
00:04:39,800 --> 00:04:42,050
this binary world and we're going to

110
00:04:42,050 --> 00:04:43,220
make sure that's part of the new

111
00:04:43,220 --> 00:04:45,110
standard for binary data this is comin

112
00:04:45,110 --> 00:04:47,330
nes next here's something that's not I

113
00:04:47,330 --> 00:04:48,650
show this is jazz comp I just want to

114
00:04:48,650 --> 00:04:50,870
share my thoughts I would like to get

115
00:04:50,870 --> 00:04:52,580
better function syntax in I know Alex

116
00:04:52,580 --> 00:04:54,979
Russell mothers would too it's hard to

117
00:04:54,979 --> 00:04:56,419
decide what that better syntax is and

118
00:04:56,419 --> 00:04:57,740
exactly how it works it's hard for

119
00:04:57,740 --> 00:04:59,090
committee degree on this it's hard for a

120
00:04:59,090 --> 00:05:01,270
bunch of users to agree on it I'm

121
00:05:01,270 --> 00:05:03,620
getting old i'm getting tired i think if

122
00:05:03,620 --> 00:05:05,120
coffeescript has awesome syntax let's

123
00:05:05,120 --> 00:05:06,710
just do that as much as we can now it's

124
00:05:06,710 --> 00:05:07,759
a different language you have to be

125
00:05:07,759 --> 00:05:09,440
careful with grammar but I think we can

126
00:05:09,440 --> 00:05:11,360
do it and this is what I propose and I'm

127
00:05:11,360 --> 00:05:13,099
going to propose us at the tc39 meeting

128
00:05:13,099 --> 00:05:17,150
in three weeks including fat arrows so

129
00:05:17,150 --> 00:05:19,370
you know what this you get and binding

130
00:05:19,370 --> 00:05:22,729
forms that get hoisted to the block and

131
00:05:22,729 --> 00:05:24,530
then you know maybe we'll get classes

132
00:05:24,530 --> 00:05:27,469
that are prototypal in maybe not doing

133
00:05:27,469 --> 00:05:28,789
your own prototypal inheritance is error

134
00:05:28,789 --> 00:05:31,490
prone and tedious why not I don't know

135
00:05:31,490 --> 00:05:32,960
there's it's hard to agree people want

136
00:05:32,960 --> 00:05:34,789
classes to mean something else that's

137
00:05:34,789 --> 00:05:36,560
part of the problem for entry syntax

138
00:05:36,560 --> 00:05:37,819
another thing I'm championing we want to

139
00:05:37,819 --> 00:05:41,840
lighten the C bracket load it's a

140
00:05:41,840 --> 00:05:43,550
relaxation of the rules except for four

141
00:05:43,550 --> 00:05:45,440
in where it reforms it bunch of

142
00:05:45,440 --> 00:05:46,610
operators you'll recognize some of these

143
00:05:46,610 --> 00:05:49,370
from coffee or C sharp default operator

144
00:05:49,370 --> 00:05:51,770
Crockfords championed assignment form of

145
00:05:51,770 --> 00:05:55,460
that integer div Maud Dib mod and coffee

146
00:05:55,460 --> 00:05:57,440
like a gal operators to see if something

147
00:05:57,440 --> 00:06:00,050
is exactly the same as something else is

148
00:06:00,050 --> 00:06:01,969
distinguishable for something else so

149
00:06:01,969 --> 00:06:05,990
you know negative zero isn't zero so

150
00:06:05,990 --> 00:06:09,319
here's here's a demo of V a monkey and

151
00:06:09,319 --> 00:06:12,620
spider no this shows a library Dave

152
00:06:12,620 --> 00:06:14,300
Herman real called task j s which is

153
00:06:14,300 --> 00:06:16,009
based on generators which are in yes

154
00:06:16,009 --> 00:06:18,710
next in harmony this allows you to avoid

155
00:06:18,710 --> 00:06:22,159
function nests and the setup is kind of

156
00:06:22,159 --> 00:06:24,740
some boilerplate and then a little

157
00:06:24,740 --> 00:06:26,719
constructor pattern node read file and

158
00:06:26,719 --> 00:06:28,880
you have to look closely at these

159
00:06:28,880 --> 00:06:30,710
keyword names the reserved word name

160
00:06:30,710 --> 00:06:32,539
methods throw in return that's legal in

161
00:06:32,539 --> 00:06:33,710
es5 it supported our

162
00:06:33,710 --> 00:06:35,210
ready in Firefox and other browsers

163
00:06:35,210 --> 00:06:38,120
working v8 what is this white object

164
00:06:38,120 --> 00:06:40,160
well it's it's the this that was

165
00:06:40,160 --> 00:06:41,510
constructed by new but it has a

166
00:06:41,510 --> 00:06:43,100
prototype where we inherit those methods

167
00:06:43,100 --> 00:06:44,270
from and that prototype is set on the

168
00:06:44,270 --> 00:06:46,100
first line here and that is new task

169
00:06:46,100 --> 00:06:47,480
wait and that's part of Dave Herman's

170
00:06:47,480 --> 00:06:50,270
task library and a white object is kind

171
00:06:50,270 --> 00:06:53,000
of a synchronizing device that you use

172
00:06:53,000 --> 00:06:55,430
with yield in generator functions and

173
00:06:55,430 --> 00:06:57,830
their you use TAF spawn you pass a

174
00:06:57,830 --> 00:07:00,230
function it yields read file and on the

175
00:07:00,230 --> 00:07:01,880
very next line no need for a call back

176
00:07:01,880 --> 00:07:04,520
you can use that data you can get the

177
00:07:04,520 --> 00:07:05,690
results out of it and put it on the

178
00:07:05,690 --> 00:07:07,910
console you have to remember to yield if

179
00:07:07,910 --> 00:07:11,180
you don't doesn't work but the price of

180
00:07:11,180 --> 00:07:13,670
that yield is low compared to the price

181
00:07:13,670 --> 00:07:14,930
of all those function s you would have

182
00:07:14,930 --> 00:07:16,940
to write otherwise and so let me see if

183
00:07:16,940 --> 00:07:23,330
I can demo this so here is Jen chieh s

184
00:07:23,330 --> 00:07:26,480
and if I just feed it to note it's going

185
00:07:26,480 --> 00:07:28,880
to spew itself back as you can see it

186
00:07:28,880 --> 00:07:34,730
reads gender jas works and back to the

187
00:07:34,730 --> 00:07:38,330
presentation another demo this is

188
00:07:38,330 --> 00:07:41,660
another great demo that Rob Arnold just

189
00:07:41,660 --> 00:07:43,730
threw together this is even shorter so

190
00:07:43,730 --> 00:07:46,220
this shows how you can use this test

191
00:07:46,220 --> 00:07:49,970
library and yield to write a loop that

192
00:07:49,970 --> 00:07:52,280
you can run as a server and there it is

193
00:07:52,280 --> 00:07:58,110
I'm going to demo it have to start it

194
00:07:58,120 --> 00:08:01,640
it's going to be a hello world demo it's

195
00:08:01,640 --> 00:08:05,500
running at that port go back there it is

196
00:08:05,500 --> 00:08:08,510
reload reload reload reload reload

197
00:08:08,510 --> 00:08:15,680
reload reload and no function nests the

198
00:08:15,680 --> 00:08:18,410
yield seems to give back results which

199
00:08:18,410 --> 00:08:22,430
you can use right away the magic here is

200
00:08:22,430 --> 00:08:25,880
all in the task GS library far from

201
00:08:25,880 --> 00:08:27,500
writing writing yield so I think this is

202
00:08:27,500 --> 00:08:29,180
a win people complain about function

203
00:08:29,180 --> 00:08:30,920
nests javascript function allah

204
00:08:30,920 --> 00:08:32,600
functions are awesome but sometimes you

205
00:08:32,600 --> 00:08:33,740
don't want to keep indenting and

206
00:08:33,740 --> 00:08:37,730
wrapping and bracing so we're going to

207
00:08:37,730 --> 00:08:39,440
have another demo i think and some QA I

208
00:08:39,440 --> 00:08:40,640
wanted to thank the guys who actually

209
00:08:40,640 --> 00:08:43,730
did the work Rob Arnold forever in

210
00:08:43,730 --> 00:08:46,100
Mozilla just lost a CMU email at

211
00:08:46,100 --> 00:08:47,420
Facebook

212
00:08:47,420 --> 00:08:49,430
he works at Facebook Sean wilshire and

213
00:08:49,430 --> 00:08:51,350
polish annecy work at Mozilla Johnny's

214
00:08:51,350 --> 00:08:52,399
fort helped us with the build stuff

215
00:08:52,399 --> 00:08:54,350
andreas calls my partner in crime and a

216
00:08:54,350 --> 00:08:56,450
lot of stuff and he's helped too we have

217
00:08:56,450 --> 00:08:58,190
an IRC channel pound spider know we have

218
00:08:58,190 --> 00:08:59,930
spider note at mozilla org mail and

219
00:08:59,930 --> 00:09:02,660
subscribe protocol and more demos and

220
00:09:02,660 --> 00:09:04,730
questions there should be a node chat

221
00:09:04,730 --> 00:09:07,010
instance running on SSID spider node

222
00:09:07,010 --> 00:09:09,170
there's the IP address you guys should

223
00:09:09,170 --> 00:09:12,170
try to melt it I think it's on Paul's

224
00:09:12,170 --> 00:09:15,260
left no time he doesn't work restart

225
00:09:15,260 --> 00:09:23,000
restart so uh so anyway we're happy to

226
00:09:23,000 --> 00:09:24,740
entertain questions that's pretty much

227
00:09:24,740 --> 00:09:26,149
the pitch we'd love to have people come

228
00:09:26,149 --> 00:09:32,660
help us oh oh you know you want that so

229
00:09:32,660 --> 00:09:35,000
right now we haven't d configured e4x so

230
00:09:35,000 --> 00:09:37,610
it's there oh my god spider monkey has a

231
00:09:37,610 --> 00:09:38,990
bunch of extensions right it has the

232
00:09:38,990 --> 00:09:40,990
stuff that's going into harmony it has

233
00:09:40,990 --> 00:09:44,209
efore x equity 357 is iso standard for

234
00:09:44,209 --> 00:09:47,149
doing xml in javascript and partly

235
00:09:47,149 --> 00:09:48,019
that's kind of cool because you can

236
00:09:48,019 --> 00:09:49,610
write xml literals and it's nine big it

237
00:09:49,610 --> 00:09:51,649
wasn't partly it's this crazy land sort

238
00:09:51,649 --> 00:09:55,310
of Java like thing so yeah it's there we

239
00:09:55,310 --> 00:09:56,779
can turn it off we don't advise you use

240
00:09:56,779 --> 00:09:58,070
it again this is totally experimental

241
00:09:58,070 --> 00:10:00,620
you opt-in we're not trying to do

242
00:10:00,620 --> 00:10:02,690
anything crazy like Mickey for X a

243
00:10:02,690 --> 00:10:08,790
standard and node

244
00:10:08,800 --> 00:10:15,550
and

245
00:10:15,560 --> 00:10:17,750
so that's a good question we don't know

246
00:10:17,750 --> 00:10:19,100
yet because we haven't got it up enough

247
00:10:19,100 --> 00:10:21,350
and we're still in you know debugging it

248
00:10:21,350 --> 00:10:25,700
I hope the chat demo will work the

249
00:10:25,700 --> 00:10:29,150
question is where will spider node v8

250
00:10:29,150 --> 00:10:32,300
monkey beat v8 in node and I don't know

251
00:10:32,300 --> 00:10:34,220
and we're not really trying to beat v8 I

252
00:10:34,220 --> 00:10:36,800
think competition is good we can if you

253
00:10:36,800 --> 00:10:38,240
look at certain benchmarks today like

254
00:10:38,240 --> 00:10:40,310
certain Kraken benchmarks I think even

255
00:10:40,310 --> 00:10:41,720
with crankshaft if you look at our

256
00:10:41,720 --> 00:10:46,040
latest you know type inference jager

257
00:10:46,040 --> 00:10:47,930
monkey whatever it is I on monkey stuff

258
00:10:47,930 --> 00:10:51,200
were competitive with v8 and we have a

259
00:10:51,200 --> 00:10:54,350
non generational GC which sucks for when

260
00:10:54,350 --> 00:10:56,240
you're allocating a lot of objects live

261
00:10:56,240 --> 00:10:58,070
a short time so we're moving at

262
00:10:58,070 --> 00:11:00,470
generational but ironically for certain

263
00:11:00,470 --> 00:11:02,540
other workloads r GC actually is better

264
00:11:02,540 --> 00:11:04,940
than than v8's it all depends on the

265
00:11:04,940 --> 00:11:06,500
workload that's the great story about

266
00:11:06,500 --> 00:11:08,150
javascript is there's so many workloads

267
00:11:08,150 --> 00:11:10,910
and the browser vendors have been tuning

268
00:11:10,910 --> 00:11:12,680
for SunSpider for way too long and you

269
00:11:12,680 --> 00:11:15,050
know tuning for the v8 benchmark isn't a

270
00:11:15,050 --> 00:11:16,250
whole lot better we don't even say you

271
00:11:16,250 --> 00:11:17,960
should tune for Kraken which is mozillas

272
00:11:17,960 --> 00:11:20,450
collection of advanced sort of numerical

273
00:11:20,450 --> 00:11:22,790
or combinatorially intensive graphics

274
00:11:22,790 --> 00:11:24,320
kernels we're just trying to get

275
00:11:24,320 --> 00:11:25,940
different workloads and see how we do

276
00:11:25,940 --> 00:11:27,950
and there's tons more on the web there's

277
00:11:27,950 --> 00:11:32,150
Emscripten which is Alonso Kai's lvm C++

278
00:11:32,150 --> 00:11:34,010
to JavaScript compiler there's just a

279
00:11:34,010 --> 00:11:35,210
lot of stuff out there to measure and

280
00:11:35,210 --> 00:11:37,190
optimize for you think we should all be

281
00:11:37,190 --> 00:11:38,660
able to optimize for like a

282
00:11:38,660 --> 00:11:40,460
representative gmail workload I don't

283
00:11:40,460 --> 00:11:42,170
know of that benchmark I don't know how

284
00:11:42,170 --> 00:11:44,960
that's done so be it's awesome and we're

285
00:11:44,960 --> 00:11:46,910
we're interested in being as fast or

286
00:11:46,910 --> 00:11:49,339
faster the other thing we have already

287
00:11:49,339 --> 00:11:51,920
the viet hasn't got yet are these equi

288
00:11:51,920 --> 00:11:53,360
extensions these extensions that are

289
00:11:53,360 --> 00:11:55,040
proposed for harmony some of them are

290
00:11:55,040 --> 00:11:57,500
not harmonious e4x is a sort of a dead

291
00:11:57,500 --> 00:11:59,480
limb in the evolution of the ACMA

292
00:11:59,480 --> 00:12:01,790
JavaScript standards but others like

293
00:12:01,790 --> 00:12:04,070
generators are already there in spider

294
00:12:04,070 --> 00:12:05,420
monkey now therefore they're in v8

295
00:12:05,420 --> 00:12:07,280
monkey and i just showed them that works

296
00:12:07,280 --> 00:12:10,760
no trans pilot required no compiler no

297
00:12:10,760 --> 00:12:12,380
continuation passing style conversion

298
00:12:12,380 --> 00:12:15,620
required that's a reason to use to use

299
00:12:15,620 --> 00:12:17,390
v8 monkey now if you want to try it but

300
00:12:17,390 --> 00:12:18,320
again we're not selling you anything

301
00:12:18,320 --> 00:12:20,150
we're just doing some experiments to try

302
00:12:20,150 --> 00:12:23,330
to improve our API see how life is a

303
00:12:23,330 --> 00:12:25,490
node and see if this stuff we're

304
00:12:25,490 --> 00:12:26,660
proposing for harmony actually makes

305
00:12:26,660 --> 00:12:27,450
sense and how

306
00:12:27,450 --> 00:12:29,400
reduce function nests and improve

307
00:12:29,400 --> 00:12:37,050
usability they will never be threading

308
00:12:37,050 --> 00:12:45,190
in JavaScript with shared readable state

309
00:12:45,200 --> 00:12:48,120
yeah so the question is debugging we

310
00:12:48,120 --> 00:12:49,350
have a bunch of Awesome debugging work

311
00:12:49,350 --> 00:12:50,490
that's coming along you can see some of

312
00:12:50,490 --> 00:12:52,680
it in Firefox is nightly builds Jim

313
00:12:52,680 --> 00:12:54,330
Blandy who's based in Portland is doing

314
00:12:54,330 --> 00:12:56,730
this awesome new debug interface which

315
00:12:56,730 --> 00:12:59,040
is in the JavaScript language a debug

316
00:12:59,040 --> 00:13:00,570
object you can use you can write your

317
00:13:00,570 --> 00:13:03,060
debuggers in javascript in HTML and

318
00:13:03,060 --> 00:13:04,680
we're doing that dave camp also based

319
00:13:04,680 --> 00:13:06,030
here is working on the UI for that it's

320
00:13:06,030 --> 00:13:08,940
a remote debugger should work in node we

321
00:13:08,940 --> 00:13:10,230
have all sorts of features in mind

322
00:13:10,230 --> 00:13:12,060
memory profiling is hot we're working on

323
00:13:12,060 --> 00:13:14,160
that too it's a hard problem some extent

324
00:13:14,160 --> 00:13:15,450
chrome has an advantage that they can

325
00:13:15,450 --> 00:13:17,580
have up to 20 or so rendering processes

326
00:13:17,580 --> 00:13:18,990
they can exit them if they start leaking

327
00:13:18,990 --> 00:13:22,170
and WebKit is not you know immune to

328
00:13:22,170 --> 00:13:25,620
leaks but until we get our process story

329
00:13:25,620 --> 00:13:26,970
done which is going to take a few more

330
00:13:26,970 --> 00:13:29,400
of our fast release cycles we really do

331
00:13:29,400 --> 00:13:30,870
need to dig into memory profiling and

332
00:13:30,870 --> 00:13:32,100
we're doing it we're trying to say where

333
00:13:32,100 --> 00:13:33,150
all your memories going and who's to

334
00:13:33,150 --> 00:13:35,370
blame we're trying to identify add-ons

335
00:13:35,370 --> 00:13:37,650
and web pages even though we don't have

336
00:13:37,650 --> 00:13:39,990
process isolation we don't just want to

337
00:13:39,990 --> 00:13:43,710
blame we want to fix so yeah debugging

338
00:13:43,710 --> 00:13:45,300
tools are a big investment for us right

339
00:13:45,300 --> 00:13:47,160
now and it should translate directly to

340
00:13:47,160 --> 00:13:50,370
note how important do you think is a

341
00:13:50,370 --> 00:13:52,500
binary object passing for workers

342
00:13:52,500 --> 00:13:54,120
especially on the server because

343
00:13:54,120 --> 00:13:56,040
javascript is non-threaded so you have

344
00:13:56,040 --> 00:13:58,080
to have these other solutions like Jason

345
00:13:58,080 --> 00:14:00,480
stringify but it feels really really

346
00:14:00,480 --> 00:14:03,000
sort of bad when you do that especially

347
00:14:03,000 --> 00:14:04,710
when the data gets larger and the

348
00:14:04,710 --> 00:14:06,360
server's who are going to deal with that

349
00:14:06,360 --> 00:14:08,960
so what are your thoughts in relation to

350
00:14:08,960 --> 00:14:13,290
spider note well so this is kind of two

351
00:14:13,290 --> 00:14:14,760
questions one is what node wants to do

352
00:14:14,760 --> 00:14:16,620
for clusters of processes that are

353
00:14:16,620 --> 00:14:18,270
single threaded node servers that

354
00:14:18,270 --> 00:14:22,170
communicate share nothing no mutable

355
00:14:22,170 --> 00:14:25,560
state got a serialized somehow the other

356
00:14:25,560 --> 00:14:27,120
thing is structured clone is coming

357
00:14:27,120 --> 00:14:29,220
along in the browsers and it currently

358
00:14:29,220 --> 00:14:30,420
works through serialization and

359
00:14:30,420 --> 00:14:32,610
deserialization as well but with the new

360
00:14:32,610 --> 00:14:36,990
es5 ability to freeze objects and other

361
00:14:36,990 --> 00:14:39,870
ways of deeply freezing object graphs in

362
00:14:39,870 --> 00:14:41,400
theory if you have

363
00:14:41,400 --> 00:14:43,650
kind of shared address space for

364
00:14:43,650 --> 00:14:45,990
multiple isolated threads you can still

365
00:14:45,990 --> 00:14:47,790
pass efficiently these frozen objects

366
00:14:47,790 --> 00:14:48,630
back and forth you don't need to

367
00:14:48,630 --> 00:14:50,070
serialize them just pass the pointer

368
00:14:50,070 --> 00:14:52,620
it's safe there's no way that they can

369
00:14:52,620 --> 00:14:56,820
form a path to mutable state that's

370
00:14:56,820 --> 00:14:59,610
coming in in on the client side i would

371
00:14:59,610 --> 00:15:01,020
say in firefox at least something we're

372
00:15:01,020 --> 00:15:02,400
looking at but i have to say the

373
00:15:02,400 --> 00:15:04,770
serialization overhead is not the

374
00:15:04,770 --> 00:15:06,300
bottleneck it's not on the critical path

375
00:15:06,300 --> 00:15:08,250
at least not in our experience with

376
00:15:08,250 --> 00:15:11,130
workers so when you when you created the

377
00:15:11,130 --> 00:15:13,320
v8 api on tied on top of spider monkey

378
00:15:13,320 --> 00:15:15,480
were there any you know in the

379
00:15:15,480 --> 00:15:17,460
translation to the other ABI is anything

380
00:15:17,460 --> 00:15:19,550
lost if you don't have to make any

381
00:15:19,550 --> 00:15:22,050
learning design considerations those are

382
00:15:22,050 --> 00:15:24,960
closer Mormons or otherwise translating

383
00:15:24,960 --> 00:15:26,790
like wrapping job of the spider monkey

384
00:15:26,790 --> 00:15:30,900
API into the v8 APA did you guys get

385
00:15:30,900 --> 00:15:32,640
that you repeat the beginning of that

386
00:15:32,640 --> 00:15:34,440
like what did you up did you have to

387
00:15:34,440 --> 00:15:36,210
compromise on anything because of your

388
00:15:36,210 --> 00:15:40,680
trying to shoehorn into vatapi it api

389
00:15:40,680 --> 00:15:45,810
mismatch any impedance mismatches yes

390
00:15:45,810 --> 00:15:54,720
but alright so one of the API impedance

391
00:15:54,720 --> 00:15:56,520
mismatches we have is a v8 has an API

392
00:15:56,520 --> 00:15:58,470
called set index properties to external

393
00:15:58,470 --> 00:15:59,780
array that you can call on any object

394
00:15:59,780 --> 00:16:03,810
that's kind of a strange API it's closer

395
00:16:03,810 --> 00:16:06,240
oh sorry even closer okay soviet has

396
00:16:06,240 --> 00:16:08,730
this api on object called set index

397
00:16:08,730 --> 00:16:10,020
properties to external array which

398
00:16:10,020 --> 00:16:11,670
sounds kind of strange and scary that

399
00:16:11,670 --> 00:16:13,020
you can take any object and instantly

400
00:16:13,020 --> 00:16:15,690
change all its properties and we can't

401
00:16:15,690 --> 00:16:17,670
implement that in jsapi there's just no

402
00:16:17,670 --> 00:16:19,980
mechanism to do that so we actually had

403
00:16:19,980 --> 00:16:22,560
to rewrite all the call sites so this we

404
00:16:22,560 --> 00:16:25,050
had to rewrite node buffer entirely in

405
00:16:25,050 --> 00:16:26,400
order to make it work with typed arrays

406
00:16:26,400 --> 00:16:28,890
because we couldn't manage this one

407
00:16:28,890 --> 00:16:30,630
aspect of the API that's only a drill

408
00:16:30,630 --> 00:16:32,490
down on so we have WebGL typed arrays

409
00:16:32,490 --> 00:16:35,190
built in the spider monkey buffer is

410
00:16:35,190 --> 00:16:37,230
close but not quite and so we had to

411
00:16:37,230 --> 00:16:39,270
kind of change things a little bit but

412
00:16:39,270 --> 00:16:41,250
we'd like to talk we don't know what the

413
00:16:41,250 --> 00:16:42,480
right answer is it could be our fault

414
00:16:42,480 --> 00:16:44,370
but maybe there's a better buffer in the

415
00:16:44,370 --> 00:16:46,200
future so we're looking to collaborate

416
00:16:46,200 --> 00:16:49,740
with Ryan and everybody on that okay my

417
00:16:49,740 --> 00:16:52,390
question is what's the memory footprint

418
00:16:52,390 --> 00:16:55,750
an empty spider notes over when it

419
00:16:55,750 --> 00:16:57,400
starts oh we oh we leak in memory stone

420
00:16:57,400 --> 00:16:58,960
yeah we're still leaking memory we

421
00:16:58,960 --> 00:17:00,250
hadn't started looking at this until

422
00:17:00,250 --> 00:17:02,590
like last night um and we finally got

423
00:17:02,590 --> 00:17:04,120
the logging who set up so we can track

424
00:17:04,120 --> 00:17:07,240
this stuff so we serve some leaks but

425
00:17:07,240 --> 00:17:09,100
we're just hurting like that now so it's

426
00:17:09,100 --> 00:17:10,780
not great but it's getting better every

427
00:17:10,780 --> 00:17:12,970
day how much he member you do you

428
00:17:12,970 --> 00:17:15,940
allocate when you thought up in so so no

429
00:17:15,940 --> 00:17:17,350
chat when it starts is running it with

430
00:17:17,350 --> 00:17:20,079
about 11 or 12 Meg's so I don't know

431
00:17:20,079 --> 00:17:22,329
what that runs on v8 offhand but similar

432
00:17:22,329 --> 00:17:25,060
amazing yeah we believe in releasing

433
00:17:25,060 --> 00:17:29,040
early and often so we're not we're not

434
00:17:29,040 --> 00:17:31,570
bragging about any benchmarks remember

435
00:17:31,570 --> 00:17:33,460
we profile results but we're going to

436
00:17:33,460 --> 00:17:35,320
keep you posted can you do anything with

437
00:17:35,320 --> 00:17:38,530
the serializing large strings out to a

438
00:17:38,530 --> 00:17:40,870
socket so an issue in v8 is the strings

439
00:17:40,870 --> 00:17:42,160
are starting it's really clever and

440
00:17:42,160 --> 00:17:44,710
memory representation and you want to

441
00:17:44,710 --> 00:17:46,840
convert them into to put them out to a

442
00:17:46,840 --> 00:17:48,070
system call or write them out to a

443
00:17:48,070 --> 00:17:50,470
socket but you don't have a contiguous

444
00:17:50,470 --> 00:17:52,630
like flattened buffer labeled system

445
00:17:52,630 --> 00:17:54,370
call tanks so this is kind of

446
00:17:54,370 --> 00:17:57,010
problematic in the v8 world because of

447
00:17:57,010 --> 00:17:59,260
the the clever garbage collection so is

448
00:17:59,260 --> 00:18:01,929
there is the spider monkey API

449
00:18:01,929 --> 00:18:04,419
offer an easier way to get those out

450
00:18:04,419 --> 00:18:05,440
because that could actually be a pretty

451
00:18:05,440 --> 00:18:08,529
big win the question was about strings

452
00:18:08,529 --> 00:18:11,049
and do we have a better way to get flat

453
00:18:11,049 --> 00:18:13,480
strings out the system calls without too

454
00:18:13,480 --> 00:18:15,669
much overhead again I'm not going to

455
00:18:15,669 --> 00:18:17,590
brag I think we do all the engines have

456
00:18:17,590 --> 00:18:19,419
tuned their maximum stirring life to

457
00:18:19,419 --> 00:18:23,970
about the same to the 28 I think limit

458
00:18:23,970 --> 00:18:30,490
which is you know a lot 256 megs but all

459
00:18:30,490 --> 00:18:31,990
of them because of SunSpider are doing

460
00:18:31,990 --> 00:18:34,450
these stupid you know you have nation

461
00:18:34,450 --> 00:18:36,700
trees or dependent string tricks to make

462
00:18:36,700 --> 00:18:38,649
a stupid loop that goes plus equal on a

463
00:18:38,649 --> 00:18:40,809
string and grows it by powers of two

464
00:18:40,809 --> 00:18:43,539
really fast that doesn't really happen a

465
00:18:43,539 --> 00:18:46,149
lot in real code but when you get these

466
00:18:46,149 --> 00:18:49,779
big dependent string trees or ropes as

467
00:18:49,779 --> 00:18:51,940
we call them and I think v8 and all the

468
00:18:51,940 --> 00:18:54,249
others have similar things then it can

469
00:18:54,249 --> 00:18:56,230
be expensive to go flatten that out and

470
00:18:56,230 --> 00:18:57,940
depending on your garbage collector

471
00:18:57,940 --> 00:18:59,799
there can be stricter limits on how big

472
00:18:59,799 --> 00:19:01,539
I don't know what the issue you're

473
00:19:01,539 --> 00:19:03,190
talking about is with v8 so I can't

474
00:19:03,190 --> 00:19:05,590
really compare but we we make flat

475
00:19:05,590 --> 00:19:07,480
strings pretty eagerly and we can make

476
00:19:07,480 --> 00:19:10,659
him up to 22 to 28 David I didn't quite

477
00:19:10,659 --> 00:19:12,399
catch when you were jumping through all

478
00:19:12,399 --> 00:19:14,470
the yield stuff is there some more

479
00:19:14,470 --> 00:19:16,119
information about that can you'll be

480
00:19:16,119 --> 00:19:18,820
used from anywhere or only from inside

481
00:19:18,820 --> 00:19:21,039
of iterated type functions or it's

482
00:19:21,039 --> 00:19:22,659
exactly like Python except for the

483
00:19:22,659 --> 00:19:24,999
syntax it's and there's no generator

484
00:19:24,999 --> 00:19:28,149
exit object you yield from a function

485
00:19:28,149 --> 00:19:29,950
and there may be some extra syntax ahead

486
00:19:29,950 --> 00:19:30,850
of the function that makes it a

487
00:19:30,850 --> 00:19:32,980
generator which is a factory for

488
00:19:32,980 --> 00:19:35,110
iterators that can be done next it or

489
00:19:35,110 --> 00:19:38,169
not sent values so there's a separate

490
00:19:38,169 --> 00:19:40,119
proposal from Peter helm of Google to do

491
00:19:40,119 --> 00:19:42,669
in a weight that works at any level I

492
00:19:42,669 --> 00:19:44,139
think it's certainly a top level that's

493
00:19:44,139 --> 00:19:45,580
a different animal kind of complementary

494
00:19:45,580 --> 00:19:48,749
okay great thanks same underlying

495
00:19:48,749 --> 00:19:51,159
infrastructure needed for both I guess I

496
00:19:51,159 --> 00:19:52,330
have one question which it gets you and

497
00:19:52,330 --> 00:19:55,119
Bill to hear you mentioned that

498
00:19:55,119 --> 00:19:56,499
SunSpider and other things aren't really

499
00:19:56,499 --> 00:19:58,960
good for server workloads are you

500
00:19:58,960 --> 00:20:01,940
working on something that is

501
00:20:01,940 --> 00:20:04,490
you tell us you guys are doing the node

502
00:20:04,490 --> 00:20:07,129
you know server app development we need

503
00:20:07,129 --> 00:20:09,519
to build better benchmark suites and

504
00:20:09,519 --> 00:20:12,289
measure all the time it's really

505
00:20:12,289 --> 00:20:13,700
important that's why we're investing in

506
00:20:13,700 --> 00:20:15,049
debugging tools not just memory

507
00:20:15,049 --> 00:20:17,750
profilers but you know cycle profilers

508
00:20:17,750 --> 00:20:20,470
for both javascript and your native code

509
00:20:20,470 --> 00:20:23,269
you know I think shark or whatever

510
00:20:23,269 --> 00:20:25,190
instruments is the new hotness from

511
00:20:25,190 --> 00:20:26,539
Apple but we need to get into the

512
00:20:26,539 --> 00:20:28,789
JavaScript more and we need to see where

513
00:20:28,789 --> 00:20:31,580
the costs are so we optimize our silly

514
00:20:31,580 --> 00:20:32,929
JavaScript engines for the real

515
00:20:32,929 --> 00:20:34,429
workloads not for these synthetic

516
00:20:34,429 --> 00:20:38,210
benchmarks from 1998 so help us out

517
00:20:38,210 --> 00:20:41,000
start a new benchmark collection what

518
00:20:41,000 --> 00:20:44,950
what the build process look like for

519
00:20:44,950 --> 00:20:49,220
spider node is it is it as simple one of

520
00:20:49,220 --> 00:20:50,570
the nice things about notice is just

521
00:20:50,570 --> 00:20:53,480
basically make make install on on unix

522
00:20:53,480 --> 00:20:56,600
platforms is that um direction you're

523
00:20:56,600 --> 00:21:00,110
heading with spider node spider no it's

524
00:21:00,110 --> 00:21:02,299
just a clone we're working in if we can

525
00:21:02,299 --> 00:21:04,429
collaboratively get whatever changes we

526
00:21:04,429 --> 00:21:06,500
need up into node will do it if we can

527
00:21:06,500 --> 00:21:08,779
push the change burden down onto v8

528
00:21:08,779 --> 00:21:10,460
monkey will do that first we don't want

529
00:21:10,460 --> 00:21:14,539
to change note if we don't have to we

530
00:21:14,539 --> 00:21:17,330
don't we're not making of work I mean

531
00:21:17,330 --> 00:21:19,190
github is about forking right the fork

532
00:21:19,190 --> 00:21:20,629
button it's all good don't worry it's

533
00:21:20,629 --> 00:21:22,250
not like Jamie forking emacs on stall

534
00:21:22,250 --> 00:21:25,669
minutes it's not a big war but but we

535
00:21:25,669 --> 00:21:29,230
really do aspire to be an alternative

536
00:21:29,230 --> 00:21:33,230
under the VN API in though i guess the

537
00:21:33,230 --> 00:21:35,059
intent of my question was is spider

538
00:21:35,059 --> 00:21:38,720
monkey becoming easier to build as far

539
00:21:38,720 --> 00:21:41,539
as i know i've had trouble just getting

540
00:21:41,539 --> 00:21:44,720
it to even build outside of the firefox

541
00:21:44,720 --> 00:21:49,299
on OS 10 and stuff is that is that

542
00:21:49,299 --> 00:21:52,820
improving a spider monkey improves I see

543
00:21:52,820 --> 00:21:54,169
I didn't hear a question right and I

544
00:21:54,169 --> 00:21:55,759
still haven't quite heard but you guys

545
00:21:55,759 --> 00:21:57,649
handle this use like are you asking

546
00:21:57,649 --> 00:21:59,330
about the other week uh make make

547
00:21:59,330 --> 00:22:01,970
install in spider note well yeah like

548
00:22:01,970 --> 00:22:04,610
how bout is it's actually compile it on

549
00:22:04,610 --> 00:22:07,970
my own machine so our fork right now is

550
00:22:07,970 --> 00:22:10,779
just configure and make and that's it

551
00:22:10,779 --> 00:22:15,200
but we have made small changes like the

552
00:22:15,200 --> 00:22:15,710
default

553
00:22:15,710 --> 00:22:17,809
we built in flags for choosing your

554
00:22:17,809 --> 00:22:20,690
JavaScript engine v8 or spider monkey

555
00:22:20,690 --> 00:22:24,130
and we've changed the default for now

556
00:22:24,130 --> 00:22:26,899
because it makes it easier for us okay

557
00:22:26,899 --> 00:22:29,149
not not a whole bunch of configure flags

558
00:22:29,149 --> 00:22:31,970
every time we're building but it's it's

559
00:22:31,970 --> 00:22:38,000
easy I guess hey I guess maybe this

560
00:22:38,000 --> 00:22:40,159
might be sort of what was being asked

561
00:22:40,159 --> 00:22:41,690
and got getting out with these questions

562
00:22:41,690 --> 00:22:44,720
is like is it configuring and building a

563
00:22:44,720 --> 00:22:46,850
spider monkey in tree as well and like

564
00:22:46,850 --> 00:22:49,640
static linking like like v8 at all or is

565
00:22:49,640 --> 00:22:52,340
it like I have to have installed

566
00:22:52,340 --> 00:22:56,720
developer spider motive in yeah it's

567
00:22:56,720 --> 00:22:58,340
it's you know autocom two and three

568
00:22:58,340 --> 00:23:03,679
configure make cool oh well well on Mac

569
00:23:03,679 --> 00:23:09,830
I do thank you very much that's the end

