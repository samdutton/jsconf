1
00:00:05,650 --> 00:00:08,260

so that's my head Twitter and all add

2
00:00:08,260 --> 00:00:09,970
materially nough please ask me questions

3
00:00:09,970 --> 00:00:13,380
whatever I replied most of the time so

4
00:00:13,380 --> 00:00:14,769
I'm going to

5
00:00:14,769 --> 00:00:16,779
to talk about the no dial you might ask

6
00:00:16,779 --> 00:00:18,939
why not' well I am part of the nodejs

7
00:00:18,939 --> 00:00:21,340
technical steering committee so whatever

8
00:00:21,340 --> 00:00:23,020
a lot of things no J yes if you have

9
00:00:23,020 --> 00:00:27,029
questions about north core thing me so

10
00:00:27,029 --> 00:00:30,730
I'm also a principal ocular the near

11
00:00:30,730 --> 00:00:31,899
forum we are a professional service

12
00:00:31,899 --> 00:00:33,250
company

13
00:00:33,250 --> 00:00:35,079
distributed all around the globe but

14
00:00:35,079 --> 00:00:37,059
business in Ireland whatever if you need

15
00:00:37,059 --> 00:00:38,620
us we are there check it out check us

16
00:00:38,620 --> 00:00:42,700
out also another little bit of intro

17
00:00:42,700 --> 00:00:44,920
there is these lights if you have a

18
00:00:44,920 --> 00:00:46,570
laptop there are some interactive

19
00:00:46,570 --> 00:00:47,860
visualizations so if you have a laptop

20
00:00:47,860 --> 00:00:50,320
out and you want to play with them these

21
00:00:50,320 --> 00:00:51,579
are these lights you can take a picture

22
00:00:51,579 --> 00:00:55,780
whatever whatever you want so let's get

23
00:00:55,780 --> 00:00:59,649
started when everybody starts with note

24
00:00:59,649 --> 00:01:01,630
they start with a very simple question

25
00:01:01,630 --> 00:01:05,110
how to debug a synchronous activity you

26
00:01:05,110 --> 00:01:06,909
know you have a socket coming in on an

27
00:01:06,909 --> 00:01:08,860
HTTP request coming in and you want to

28
00:01:08,860 --> 00:01:13,960
react to to those activity and you know

29
00:01:13,960 --> 00:01:16,360
what everybody does oh well I can use

30
00:01:16,360 --> 00:01:18,100
the inspector protocol the expector

31
00:01:18,100 --> 00:01:20,590
chrome inspector and I just laughs yeah

32
00:01:20,590 --> 00:01:21,369
more or less

33
00:01:21,369 --> 00:01:23,889
but what if we have 10 concurrent

34
00:01:23,889 --> 00:01:28,780
requests a hundred how can i debug an

35
00:01:28,780 --> 00:01:30,609
application running in production where

36
00:01:30,609 --> 00:01:34,029
i have a lot of concurrency in place in

37
00:01:34,029 --> 00:01:35,409
other I came from the Java world

38
00:01:35,409 --> 00:01:38,100
whatever I've done this and I've said it

39
00:01:38,100 --> 00:01:40,899
you could stop a thread single try than

40
00:01:40,899 --> 00:01:42,579
just debug that you can't do that in

41
00:01:42,579 --> 00:01:47,439
node so most of the stuff is because no

42
00:01:47,439 --> 00:01:49,270
js' is based on a concept called the

43
00:01:49,270 --> 00:01:50,950
ever loop and you'll probably are

44
00:01:50,950 --> 00:01:54,189
familiar with the node event loop okay

45
00:01:54,189 --> 00:01:55,420
how many of you think you are familiar

46
00:01:55,420 --> 00:01:59,950
with a node event loop okay how many of

47
00:01:59,950 --> 00:02:04,899
you I've seen this less people this is

48
00:02:04,899 --> 00:02:07,509
this the secret sauce okay that's the

49
00:02:07,509 --> 00:02:10,660
most Aiden piece of node lore that you

50
00:02:10,660 --> 00:02:12,940
can find took six months to write that

51
00:02:12,940 --> 00:02:15,459
guide please read it if you want to know

52
00:02:15,459 --> 00:02:17,709
more about our node works and this is on

53
00:02:17,709 --> 00:02:20,319
that node event loop works probably not

54
00:02:20,319 --> 00:02:22,150
really easy to understand so let's

55
00:02:22,150 --> 00:02:26,920
switch to a more easy to understand

56
00:02:26,920 --> 00:02:28,720
version because Pro

57
00:02:28,720 --> 00:02:31,270
a little bit more clear to everybody so

58
00:02:31,270 --> 00:02:35,350
when the JavaScript is execute the only

59
00:02:35,350 --> 00:02:37,990
thing that a node application does when

60
00:02:37,990 --> 00:02:42,070
at least two i/o it talked to the kernel

61
00:02:42,070 --> 00:02:44,200
a single barrier or the thread pool and

62
00:02:44,200 --> 00:02:47,080
says when this event happens when this

63
00:02:47,080 --> 00:02:49,750
condition happens please call back call

64
00:02:49,750 --> 00:02:52,060
a function when these finishes that's

65
00:02:52,060 --> 00:02:55,680
the only thing that that node does and

66
00:02:55,680 --> 00:02:58,570
it is specified in passing a JavaScript

67
00:02:58,570 --> 00:03:01,030
function and you know some event happens

68
00:03:01,030 --> 00:03:03,610
like you are receiving some data from a

69
00:03:03,610 --> 00:03:06,790
socket and that it calls back and then

70
00:03:06,790 --> 00:03:08,680
wants to call that function how does

71
00:03:08,680 --> 00:03:12,850
that happen that is let's see whoa there

72
00:03:12,850 --> 00:03:14,830
is an event queue here and the event

73
00:03:14,830 --> 00:03:17,680
queue means that all the functions are

74
00:03:17,680 --> 00:03:22,480
processed one at a time so just to

75
00:03:22,480 --> 00:03:25,990
repeat the dusky primetime specify a

76
00:03:25,990 --> 00:03:28,180
fare other function as a listener to

77
00:03:28,180 --> 00:03:31,180
some IO event and then the yo event

78
00:03:31,180 --> 00:03:34,690
happens and the function is called but

79
00:03:34,690 --> 00:03:37,930
you know that is one caller ID to all of

80
00:03:37,930 --> 00:03:40,000
this we have only one function executing

81
00:03:40,000 --> 00:03:41,920
again a given time and this is one of

82
00:03:41,920 --> 00:03:44,470
the key tenants of any nodejs

83
00:03:44,470 --> 00:03:47,019
and in ojs function now you might ask

84
00:03:47,019 --> 00:03:49,150
why all of this matter when doing a

85
00:03:49,150 --> 00:03:50,680
synchronous activity would it make these

86
00:03:50,680 --> 00:03:54,250
things simpler yes and now it makes

87
00:03:54,250 --> 00:03:56,620
things simpler to code however there is

88
00:03:56,620 --> 00:03:59,760
one key piece that is a little bit

89
00:03:59,760 --> 00:04:03,100
obscure which knowing which code is

90
00:04:03,100 --> 00:04:07,540
running relative to one another also

91
00:04:07,540 --> 00:04:10,810
what about next ik promises and set

92
00:04:10,810 --> 00:04:13,510
immediate now which one will run first

93
00:04:13,510 --> 00:04:15,700
if you schedule a promise if you run a

94
00:04:15,700 --> 00:04:18,790
promise if you do next ik or if you do

95
00:04:18,790 --> 00:04:21,310
set immediate you know I'm not throwing

96
00:04:21,310 --> 00:04:23,169
set timeout zero in there because that's

97
00:04:23,169 --> 00:04:27,430
even trickier so next it are always

98
00:04:27,430 --> 00:04:29,440
executed before

99
00:04:29,440 --> 00:04:33,310
promises are resolved and before any

100
00:04:33,310 --> 00:04:36,669
other are your events promises are if

101
00:04:36,669 --> 00:04:38,380
you do new promise the function is

102
00:04:38,380 --> 00:04:40,990
executed synchronously but then resolve

103
00:04:40,990 --> 00:04:42,249
are synchronously

104
00:04:42,249 --> 00:04:47,169
and before any other are your events set

105
00:04:47,169 --> 00:04:49,659
immediate instead exercise the full

106
00:04:49,659 --> 00:04:52,959
event loop that we told you that we've

107
00:04:52,959 --> 00:04:55,419
told you you know and I've not thrown in

108
00:04:55,419 --> 00:04:56,859
setting itself time Abdera because

109
00:04:56,859 --> 00:04:59,129
that's another level of complication so

110
00:04:59,129 --> 00:05:01,929
again the artist piece of information

111
00:05:01,929 --> 00:05:05,169
that the thing that when a newbie starts

112
00:05:05,169 --> 00:05:07,869
working with node is to know when a

113
00:05:07,869 --> 00:05:10,029
chunk of code is executed relative to

114
00:05:10,029 --> 00:05:14,229
one another so going back to the

115
00:05:14,229 --> 00:05:17,319
question how to debug multiple

116
00:05:17,319 --> 00:05:19,119
asynchronous activity how do we do this

117
00:05:19,119 --> 00:05:20,679
because you know we have multiple things

118
00:05:20,679 --> 00:05:22,839
happening how do we we have a bad bug

119
00:05:22,839 --> 00:05:25,239
and that is happening only when I'm

120
00:05:25,239 --> 00:05:26,799
calling three different routes at the

121
00:05:26,799 --> 00:05:29,589
same time and the moon is aligning and

122
00:05:29,589 --> 00:05:31,419
Mars is over there I don't know

123
00:05:31,419 --> 00:05:34,809
it really gets complicated and I don't

124
00:05:34,809 --> 00:05:36,729
understand what what is happening it

125
00:05:36,729 --> 00:05:40,299
here it's very hard so it goes back to

126
00:05:40,299 --> 00:05:42,369
to a problem and something that we're

127
00:05:42,369 --> 00:05:43,839
missing in JavaScript which is the

128
00:05:43,839 --> 00:05:47,159
concept of the synchronous context so

129
00:05:47,159 --> 00:05:50,799
let's look at a bad very basic HTTP

130
00:05:50,799 --> 00:05:53,289
server written in ojs and you can see

131
00:05:53,289 --> 00:05:55,899
that we do our HTTP create server and we

132
00:05:55,899 --> 00:05:58,419
pass in a function this function in fact

133
00:05:58,419 --> 00:06:01,029
when we receive an HTTP request from a

134
00:06:01,029 --> 00:06:03,849
browser you have a new logical a

135
00:06:03,849 --> 00:06:05,110
synchronous context that is being

136
00:06:05,110 --> 00:06:07,029
created which means you know this is

137
00:06:07,029 --> 00:06:08,769
your transaction this is your HTTP

138
00:06:08,769 --> 00:06:11,289
request and response this is a logical

139
00:06:11,289 --> 00:06:14,289
concept that is living in there okay all

140
00:06:14,289 --> 00:06:16,179
the things that the Sun from this one

141
00:06:16,179 --> 00:06:19,360
will be you know linked one with another

142
00:06:19,360 --> 00:06:22,719
mainly because they are part of the same

143
00:06:22,719 --> 00:06:24,759
closure you see it's a closure created

144
00:06:24,759 --> 00:06:26,829
here so they are part of the same

145
00:06:26,829 --> 00:06:28,629
closure and then when I create another

146
00:06:28,629 --> 00:06:32,669
closure you know it's in here okay and

147
00:06:32,669 --> 00:06:35,589
and the context is being the response is

148
00:06:35,589 --> 00:06:39,610
being propagated just by using that so

149
00:06:39,610 --> 00:06:43,269
it's really powerful right however there

150
00:06:43,269 --> 00:06:45,039
is no concept of a synchronous context

151
00:06:45,039 --> 00:06:47,259
in the JavaScript language so you know

152
00:06:47,259 --> 00:06:49,569
it's something that is built in into our

153
00:06:49,569 --> 00:06:51,550
browser works and how the event loop

154
00:06:51,550 --> 00:06:54,789
works but there is no way to control in

155
00:06:54,789 --> 00:06:56,340
any

156
00:06:56,340 --> 00:06:58,420
reflection oriented way this type of

157
00:06:58,420 --> 00:07:00,940
things so it's completely illogical

158
00:07:00,940 --> 00:07:02,920
contest construct but is not a language

159
00:07:02,920 --> 00:07:04,960
not a language feature there is some

160
00:07:04,960 --> 00:07:07,090
work in making this a reality where

161
00:07:07,090 --> 00:07:08,950
there is actually a concept in the

162
00:07:08,950 --> 00:07:10,690
language pack and some of the wall you

163
00:07:10,690 --> 00:07:12,010
can find some of the work done by the

164
00:07:12,010 --> 00:07:14,550
Diagnostics working group in no js'

165
00:07:14,550 --> 00:07:17,200
check it out and this goes a little bit

166
00:07:17,200 --> 00:07:19,210
into the deep depth of this and it's

167
00:07:19,210 --> 00:07:23,800
really really interesting to read then

168
00:07:23,800 --> 00:07:27,220
well if there is no concept of seamless

169
00:07:27,220 --> 00:07:31,600
context how can we track IO events so

170
00:07:31,600 --> 00:07:33,490
how can we know when things happen you

171
00:07:33,490 --> 00:07:36,370
know this is a thing called a Singh

172
00:07:36,370 --> 00:07:38,230
cooks you're probably heard about a

173
00:07:38,230 --> 00:07:41,110
Singh cooks in the past and it's one of

174
00:07:41,110 --> 00:07:44,500
those you know new features of not Jas

175
00:07:44,500 --> 00:07:47,130
that do that can do great things also

176
00:07:47,130 --> 00:07:49,390
you know there are somewhat hard to use

177
00:07:49,390 --> 00:07:51,850
this is an example of using them this

178
00:07:51,850 --> 00:07:54,460
actually real real code can you

179
00:07:54,460 --> 00:07:55,260
understand what it does

180
00:07:55,260 --> 00:08:00,580
well it's complex and it also generates

181
00:08:00,580 --> 00:08:02,320
a lot of data and I'm not going to

182
00:08:02,320 --> 00:08:04,660
explain it because it's a really big

183
00:08:04,660 --> 00:08:08,350
that conversation so myself and my team

184
00:08:08,350 --> 00:08:09,880
we have work force each month trying to

185
00:08:09,880 --> 00:08:12,160
make sense about all the stuff and how

186
00:08:12,160 --> 00:08:15,340
to provide a way to reason about the

187
00:08:15,340 --> 00:08:16,870
synchronous context and their

188
00:08:16,870 --> 00:08:19,060
synchronous activity in node J yes so

189
00:08:19,060 --> 00:08:21,160
you know and when you have this type of

190
00:08:21,160 --> 00:08:23,500
question the best way to attack these

191
00:08:23,500 --> 00:08:25,120
problems you know I am a software

192
00:08:25,120 --> 00:08:25,990
engineer okay

193
00:08:25,990 --> 00:08:29,979
by trade whatever so you know you go oh

194
00:08:29,979 --> 00:08:33,339
well you ask a designer sorry we can't

195
00:08:33,339 --> 00:08:35,620
do this so I ask we ask I ask a designer

196
00:08:35,620 --> 00:08:37,960
hey can you please sit down with a

197
00:08:37,960 --> 00:08:39,310
little bit of a design workshop whatever

198
00:08:39,310 --> 00:08:42,000
to figure this out turns out that they

199
00:08:42,000 --> 00:08:44,650
they answer to the question on how to

200
00:08:44,650 --> 00:08:47,190
visualize the synchronous activity is

201
00:08:47,190 --> 00:08:53,140
bubbles so bubbles yeah that's it so

202
00:08:53,140 --> 00:08:56,410
let's make an example we have we have a

203
00:08:56,410 --> 00:08:59,770
nice very tiny piece of ass off code

204
00:08:59,770 --> 00:09:01,839
here okay it's the same server that we

205
00:09:01,839 --> 00:09:05,230
were talking about before you so we go

206
00:09:05,230 --> 00:09:08,899
to all our lights so hey so we go to our

207
00:09:08,899 --> 00:09:12,470
so we are here and we have that code now

208
00:09:12,470 --> 00:09:14,389
we can use this tool called bubble probe

209
00:09:14,389 --> 00:09:17,180
and this part of a sweet code clinic you

210
00:09:17,180 --> 00:09:18,529
might check it out late this is critter

211
00:09:18,529 --> 00:09:20,869
linked and autocannon is a tool to

212
00:09:20,869 --> 00:09:22,369
generate some load so we are putting in

213
00:09:22,369 --> 00:09:24,079
a thousand requests just to spice things

214
00:09:24,079 --> 00:09:27,050
up to know where things behave in

215
00:09:27,050 --> 00:09:28,999
production and basically you run on your

216
00:09:28,999 --> 00:09:33,439
code not probably I've typed yeah you we

217
00:09:33,439 --> 00:09:34,970
run our code now you can see that

218
00:09:34,970 --> 00:09:36,740
autocannon is pinning things up a little

219
00:09:36,740 --> 00:09:38,509
bit and running a little bit of those

220
00:09:38,509 --> 00:09:42,740
requests and it's basically now

221
00:09:42,740 --> 00:09:44,600
generating our visualization take some

222
00:09:44,600 --> 00:09:46,819
time you know this machine is not

223
00:09:46,819 --> 00:09:50,720
powerful at all and this is a bubble

224
00:09:50,720 --> 00:09:54,019
prof diagram now I'm zooming in and so

225
00:09:54,019 --> 00:09:56,269
what we can see on on the right side is

226
00:09:56,269 --> 00:09:58,189
the number of a synchronous operation

227
00:09:58,189 --> 00:10:01,639
being done of by this system and you can

228
00:10:01,639 --> 00:10:03,129
see that it's doing you know we have

229
00:10:03,129 --> 00:10:06,079
twelve thousand a synchronous resource

230
00:10:06,079 --> 00:10:09,999
being created by running a thousand

231
00:10:09,999 --> 00:10:13,399
requests in no Jaya's does this app help

232
00:10:13,399 --> 00:10:16,100
anybody maybe yes maybe no the key

233
00:10:16,100 --> 00:10:17,720
important part are blue a further down

234
00:10:17,720 --> 00:10:20,120
we can start from the root so when the

235
00:10:20,120 --> 00:10:22,519
root this is the root node and represent

236
00:10:22,519 --> 00:10:23,809
the starting point of your application

237
00:10:23,809 --> 00:10:27,019
yeah then we can go deep and you know

238
00:10:27,019 --> 00:10:29,720
see the first part and the first part in

239
00:10:29,720 --> 00:10:32,179
fact it's on line 20 of our application

240
00:10:32,179 --> 00:10:34,579
basic dodge is whatever it is and it's

241
00:10:34,579 --> 00:10:38,149
alcohol to server dot listen our server

242
00:10:38,149 --> 00:10:41,870
is starting to listen on stuff still

243
00:10:41,870 --> 00:10:43,819
this is not helping me and again knowing

244
00:10:43,819 --> 00:10:45,670
what is happening in my node application

245
00:10:45,670 --> 00:10:49,399
so the next part it's this big block

246
00:10:49,399 --> 00:10:51,259
here which is a bunch of and network

247
00:10:51,259 --> 00:10:53,480
activity which is you can see it in in

248
00:10:53,480 --> 00:10:55,670
green and this bunch of network activity

249
00:10:55,670 --> 00:10:57,679
it's there's some bunch of antifreeze

250
00:10:57,679 --> 00:11:01,399
these are not core stuff but then we

251
00:11:01,399 --> 00:11:03,079
have a bunch of another node core stuff

252
00:11:03,079 --> 00:11:05,209
which come from how we receive a TCP

253
00:11:05,209 --> 00:11:08,179
connection in node.js itself so you know

254
00:11:08,179 --> 00:11:09,559
that you are receiving a TCP connection

255
00:11:09,559 --> 00:11:11,779
on J yes when you receive an HTTP

256
00:11:11,779 --> 00:11:13,670
request you got an HD a TCP connection

257
00:11:13,670 --> 00:11:18,679
being open after this you after this you

258
00:11:18,679 --> 00:11:20,259
actually the key part of our application

259
00:11:20,259 --> 00:11:22,920
which is our

260
00:11:22,920 --> 00:11:27,180
set time out now you know you see that

261
00:11:27,180 --> 00:11:28,950
is a set time out happening here and you

262
00:11:28,950 --> 00:11:31,860
see a fork and you can ask wise is there

263
00:11:31,860 --> 00:11:33,390
a fork now you can see two things first

264
00:11:33,390 --> 00:11:35,040
of all the execution continued on the

265
00:11:35,040 --> 00:11:36,930
left because there's a big Harrow that

266
00:11:36,930 --> 00:11:38,339
will give you a hint that the execution

267
00:11:38,339 --> 00:11:40,560
continued on the left but our execution

268
00:11:40,560 --> 00:11:43,560
force white force well on the right you

269
00:11:43,560 --> 00:11:46,200
can see that you know it start a set

270
00:11:46,200 --> 00:11:51,209
timeout okay on the right but then on on

271
00:11:51,209 --> 00:11:57,209
the left its when it's our promise dot

272
00:11:57,209 --> 00:12:01,860
then okay which the resolution of the

273
00:12:01,860 --> 00:12:06,360
promise itself so it it is and there is

274
00:12:06,360 --> 00:12:08,100
a tiny bit of thing in the middle of

275
00:12:08,100 --> 00:12:10,529
North core bits and bobs where things

276
00:12:10,529 --> 00:12:14,160
are you know executed so so you know

277
00:12:14,160 --> 00:12:16,980
these things is clear enough and we have

278
00:12:16,980 --> 00:12:18,720
a bunch of stuff that not core does when

279
00:12:18,720 --> 00:12:21,420
it finishes and you know it's for

280
00:12:21,420 --> 00:12:23,750
example in here we are calling a

281
00:12:23,750 --> 00:12:26,579
responsible end which is where we send

282
00:12:26,579 --> 00:12:29,100
our response back to the user so we were

283
00:12:29,100 --> 00:12:31,140
talking this okay no these I understand

284
00:12:31,140 --> 00:12:32,880
is this is matching which matches my

285
00:12:32,880 --> 00:12:33,870
understanding

286
00:12:33,870 --> 00:12:36,079
now let's pile things up a little bit

287
00:12:36,079 --> 00:12:39,300
now let's do a little quick refactoring

288
00:12:39,300 --> 00:12:41,940
on this system and well if you are

289
00:12:41,940 --> 00:12:43,260
following there is the full name of this

290
00:12:43,260 --> 00:12:45,089
thing the generator one let's switch to

291
00:12:45,089 --> 00:12:47,459
the sink oh wait when I think about

292
00:12:47,459 --> 00:12:50,550
version this is function is that

293
00:12:50,550 --> 00:12:52,649
function J functionally equivalent to

294
00:12:52,649 --> 00:12:54,600
the previous one note that we are using

295
00:12:54,600 --> 00:12:57,630
dot catch always put a dot catch when

296
00:12:57,630 --> 00:12:58,529
you're doing these type of things

297
00:12:58,529 --> 00:13:01,320
because otherwise you will leak file

298
00:13:01,320 --> 00:13:03,450
descriptor and you know make popcorn of

299
00:13:03,450 --> 00:13:06,839
your servers so I don't do that

300
00:13:06,839 --> 00:13:08,730
put a catch here and when you're calling

301
00:13:08,730 --> 00:13:13,529
promises so you need you know we are

302
00:13:13,529 --> 00:13:16,050
doing this so let's try let's see if

303
00:13:16,050 --> 00:13:18,740
it's the same as before

304
00:13:18,740 --> 00:13:22,680
how many people think is the same how

305
00:13:22,680 --> 00:13:25,740
many people 60s there different somebody

306
00:13:25,740 --> 00:13:27,730
knows

307
00:13:27,730 --> 00:13:36,709
somebody knows so this is this is that's

308
00:13:36,709 --> 00:13:39,350
my zoom in okay so you can see that this

309
00:13:39,350 --> 00:13:40,790
is actually different from the previous

310
00:13:40,790 --> 00:13:44,810
one you generate a different diagram why

311
00:13:44,810 --> 00:13:46,910
well first of all we can note that we

312
00:13:46,910 --> 00:13:48,200
are actually using more synchronous

313
00:13:48,200 --> 00:13:49,010
resources

314
00:13:49,010 --> 00:13:51,140
note that promises are a synchronous

315
00:13:51,140 --> 00:13:52,930
resources because they are scheduled in

316
00:13:52,930 --> 00:13:54,769
they're going to be a synchronous

317
00:13:54,769 --> 00:13:57,680
activity happening in the future so you

318
00:13:57,680 --> 00:13:59,630
see that we are scheduling 2000 more

319
00:13:59,630 --> 00:14:02,180
promises more or less than before why is

320
00:14:02,180 --> 00:14:02,690
that

321
00:14:02,690 --> 00:14:04,970
and the reason comes in the way the a

322
00:14:04,970 --> 00:14:07,459
sink await I think a way to specified

323
00:14:07,459 --> 00:14:09,620
and you know for every way that you do

324
00:14:09,620 --> 00:14:11,300
you are locate a bunch of promises that

325
00:14:11,300 --> 00:14:13,610
are not necessarily needed and they're

326
00:14:13,610 --> 00:14:15,410
going to be removed and you know fixed

327
00:14:15,410 --> 00:14:17,600
in later version of the spec I can send

328
00:14:17,600 --> 00:14:19,579
you some links if you are interested so

329
00:14:19,579 --> 00:14:21,440
the Reedy and you can see the difference

330
00:14:21,440 --> 00:14:23,300
here that you know we have our handle

331
00:14:23,300 --> 00:14:25,100
function and then we our a sink await

332
00:14:25,100 --> 00:14:26,839
function and it gets split in two and

333
00:14:26,839 --> 00:14:29,390
there is a bunch of tiny thing in here

334
00:14:29,390 --> 00:14:31,399
which says one frame with no file and

335
00:14:31,399 --> 00:14:32,870
this is you know there are some

336
00:14:32,870 --> 00:14:35,120
throwaway called throwaway promises in

337
00:14:35,120 --> 00:14:38,120
its gets you see some artifacts due to

338
00:14:38,120 --> 00:14:40,370
our promises work and you know and this

339
00:14:40,370 --> 00:14:41,959
is a completing of the hallway promise

340
00:14:41,959 --> 00:14:43,579
that goes nowhere this promise is

341
00:14:43,579 --> 00:14:45,800
completely like generated to just

342
00:14:45,800 --> 00:14:49,959
fulfill some spec need whatever anyway

343
00:14:49,959 --> 00:14:53,329
this is with the sink await and you know

344
00:14:53,329 --> 00:14:56,680
then another step interesting it's just

345
00:14:56,680 --> 00:14:59,779
just use callbacks you know why we are

346
00:14:59,779 --> 00:15:01,490
using this type of thing why can't we

347
00:15:01,490 --> 00:15:03,980
just use callbacks and let's do another

348
00:15:03,980 --> 00:15:06,980
example that's calling FS read file one

349
00:15:06,980 --> 00:15:09,709
of the parameters of nodejs so we go

350
00:15:09,709 --> 00:15:12,770
back here and we are running our files

351
00:15:12,770 --> 00:15:16,820
example and I think loosing tab but it's

352
00:15:16,820 --> 00:15:19,070
not a really good idea so a lot of files

353
00:15:19,070 --> 00:15:21,440
in there so we are running it and

354
00:15:21,440 --> 00:15:24,170
generating some bunch of things and here

355
00:15:24,170 --> 00:15:27,040
we go

356
00:15:27,040 --> 00:15:32,570
some magic sprinkling I don't know here

357
00:15:32,570 --> 00:15:33,079
we go

358
00:15:33,079 --> 00:15:34,880
now you can see that is another a

359
00:15:34,880 --> 00:15:36,560
slightly different one this is fully

360
00:15:36,560 --> 00:15:38,810
linear let me zoom in okay you can see

361
00:15:38,810 --> 00:15:40,430
in this blah blah

362
00:15:40,430 --> 00:15:42,020
there's a lot of brown activity which is

363
00:15:42,020 --> 00:15:44,180
a reading of files a bunch of scheduling

364
00:15:44,180 --> 00:15:45,740
activity which is the purple and then

365
00:15:45,740 --> 00:15:48,050
some green one which is data so we have

366
00:15:48,050 --> 00:15:50,000
these blocks of brown activity in here

367
00:15:50,000 --> 00:15:52,190
that you can see and you know the third

368
00:15:52,190 --> 00:15:53,360
let's click on the first one and the

369
00:15:53,360 --> 00:15:56,570
first one is our f1 function and you can

370
00:15:56,570 --> 00:15:58,460
see oh maybe as we are reading a file so

371
00:15:58,460 --> 00:16:00,200
this is scheduling our rid of the file

372
00:16:00,200 --> 00:16:02,870
then we have this next block afterwards

373
00:16:02,870 --> 00:16:05,270
which is in fact a combination of three

374
00:16:05,270 --> 00:16:06,740
different a synchronous activities

375
00:16:06,740 --> 00:16:08,990
because no J yes in order to read that

376
00:16:08,990 --> 00:16:11,030
file is actually accessing the file

377
00:16:11,030 --> 00:16:13,160
system three times and is completely in

378
00:16:13,160 --> 00:16:14,540
it for you you just call a fast read

379
00:16:14,540 --> 00:16:17,120
file but it's segmented and it makes

380
00:16:17,120 --> 00:16:20,060
things interleaved so that it you can

381
00:16:20,060 --> 00:16:21,680
use multiple signals activity at the

382
00:16:21,680 --> 00:16:24,080
same time and he's doing treat and is

383
00:16:24,080 --> 00:16:25,430
doing three things and it's calling this

384
00:16:25,430 --> 00:16:27,350
function read file after open which is

385
00:16:27,350 --> 00:16:29,330
totally an old call thing and we are not

386
00:16:29,330 --> 00:16:30,950
should not really worry too much about

387
00:16:30,950 --> 00:16:31,430
it

388
00:16:31,430 --> 00:16:33,350
and now we have the first we have the

389
00:16:33,350 --> 00:16:35,630
first file and then the second file and

390
00:16:35,630 --> 00:16:38,050
then the third file okay this seems I

391
00:16:38,050 --> 00:16:44,120
can understand this so let's switch to a

392
00:16:44,120 --> 00:16:46,880
sink await okay now you should have

393
00:16:46,880 --> 00:16:48,710
learned we should have seen that it

394
00:16:48,710 --> 00:16:51,110
changes significantly the structure of

395
00:16:51,110 --> 00:16:56,330
my application and it's it's actually

396
00:16:56,330 --> 00:16:59,120
very it's actually very useful because

397
00:16:59,120 --> 00:17:00,440
it moved from something that is very

398
00:17:00,440 --> 00:17:02,120
hard to read and very hard to maintain

399
00:17:02,120 --> 00:17:04,550
or something this is way better to read

400
00:17:04,550 --> 00:17:07,459
and maintain so yeah I like it right

401
00:17:07,459 --> 00:17:12,740
I'm a fan by the way and so what is

402
00:17:12,740 --> 00:17:15,740
happening it's now you can see that the

403
00:17:15,740 --> 00:17:18,950
the actual bubble prof art as we call it

404
00:17:18,950 --> 00:17:22,130
it is slightly different than them

405
00:17:22,130 --> 00:17:24,940
before because you can see that there is

406
00:17:24,940 --> 00:17:27,530
way more scheduling activity happening

407
00:17:27,530 --> 00:17:29,870
and you can see where the throw away

408
00:17:29,870 --> 00:17:31,220
promises are so there is at Rahway

409
00:17:31,220 --> 00:17:32,990
promise here via KHOU we are actually

410
00:17:32,990 --> 00:17:34,910
calling a sink await three times as I

411
00:17:34,910 --> 00:17:36,830
wait three times so we have three throw

412
00:17:36,830 --> 00:17:38,930
away promises and we have one here one

413
00:17:38,930 --> 00:17:44,270
here and one here now there is and we

414
00:17:44,270 --> 00:17:45,770
can now understand how things are

415
00:17:45,770 --> 00:17:47,210
getting interleaved between each other

416
00:17:47,210 --> 00:17:49,940
and how we can use this information to

417
00:17:49,940 --> 00:17:53,470
write better code and maybe fix problems

418
00:17:53,470 --> 00:17:56,920
one more thing it's we have written our

419
00:17:56,920 --> 00:18:00,850
code in this way now we can also very

420
00:18:00,850 --> 00:18:04,360
quickly write our code to be Impa in

421
00:18:04,360 --> 00:18:08,770
parallel note that changing a bunch of

422
00:18:08,770 --> 00:18:11,410
code back he'll functions to be parallel

423
00:18:11,410 --> 00:18:13,840
it's hard doing it with the sink away it

424
00:18:13,840 --> 00:18:15,070
is a matter of changing three lines of

425
00:18:15,070 --> 00:18:18,190
code so benefit there note that I'm not

426
00:18:18,190 --> 00:18:28,760
using a weight and let's see how it goes

427
00:18:28,770 --> 00:18:38,470
take some time here we go I'm zoom in

428
00:18:38,470 --> 00:18:41,170
and now now you can see that in fact the

429
00:18:41,170 --> 00:18:43,060
truth we throw away promises that we

430
00:18:43,060 --> 00:18:45,100
were talking before I have gone I have

431
00:18:45,100 --> 00:18:48,040
disappeared and we now have our only

432
00:18:48,040 --> 00:18:50,260
three blocks of reading our files and we

433
00:18:50,260 --> 00:18:52,180
can unpack this web and you can see that

434
00:18:52,180 --> 00:18:54,070
you know there is all the the things

435
00:18:54,070 --> 00:18:56,650
will get generated properly and stuff

436
00:18:56,650 --> 00:18:58,300
like that and there is a lot of

437
00:18:58,300 --> 00:19:00,700
information that you can that you can

438
00:19:00,700 --> 00:19:02,350
gather from this tool and to visualize

439
00:19:02,350 --> 00:19:04,600
your synchronous activity and understand

440
00:19:04,600 --> 00:19:07,180
how human your node process work in fact

441
00:19:07,180 --> 00:19:09,730
we've done some analysis on some some

442
00:19:09,730 --> 00:19:15,280
open source modules this is from a

443
00:19:15,280 --> 00:19:18,100
library called ipfs and it's a

444
00:19:18,100 --> 00:19:19,630
distributed web platform and we have

445
00:19:19,630 --> 00:19:23,550
done some optimizations in there and

446
00:19:23,550 --> 00:19:27,700
there was some some there was things

447
00:19:27,700 --> 00:19:29,170
that could be improved and you can see

448
00:19:29,170 --> 00:19:31,180
there is a lot of activity in here a lot

449
00:19:31,180 --> 00:19:32,560
of things that are you know chained

450
00:19:32,560 --> 00:19:35,440
together and so on and so forth and you

451
00:19:35,440 --> 00:19:38,050
can read all of this in this issue if

452
00:19:38,050 --> 00:19:41,470
you are interested it's long it's a long

453
00:19:41,470 --> 00:19:44,050
long long paper of explanation on what

454
00:19:44,050 --> 00:19:44,920
was the problem

455
00:19:44,920 --> 00:19:47,200
how we fix it in the end we fix it we

456
00:19:47,200 --> 00:19:49,330
got a 30% performance improvements so

457
00:19:49,330 --> 00:19:50,380
yeah

458
00:19:50,380 --> 00:19:54,210
what's nice what was a nice one okay so

459
00:19:54,210 --> 00:19:56,170
let's go a little bit into some

460
00:19:56,170 --> 00:19:57,880
performance consideration on how you

461
00:19:57,880 --> 00:20:00,010
write your node application and how to

462
00:20:00,010 --> 00:20:04,390
improve them so you know we've talked a

463
00:20:04,390 --> 00:20:05,920
little bit about the event loop and now

464
00:20:05,920 --> 00:20:07,299
the fact that your i/o

465
00:20:07,299 --> 00:20:10,239
runs one at a time right and we schedule

466
00:20:10,239 --> 00:20:12,159
functions so when we receive a request

467
00:20:12,159 --> 00:20:17,860
and it really is we schedule some

468
00:20:17,860 --> 00:20:19,809
activity to happen in the future

469
00:20:19,809 --> 00:20:22,419
we set a function into our event loop

470
00:20:22,419 --> 00:20:25,600
machinery right and they will call me

471
00:20:25,600 --> 00:20:28,179
back when it's finished so when this is

472
00:20:28,179 --> 00:20:31,179
low are your operation that function

473
00:20:31,179 --> 00:20:35,590
will stay alive longer okay which means

474
00:20:35,590 --> 00:20:38,259
that they can accept more stuff from I

475
00:20:38,259 --> 00:20:39,549
can accept more requests before

476
00:20:39,549 --> 00:20:41,830
returning right that's what everybody

477
00:20:41,830 --> 00:20:44,080
would do well I have capacity I'm not

478
00:20:44,080 --> 00:20:47,019
doing anything I'm haidle so I will get

479
00:20:47,019 --> 00:20:48,999
more data from you know I let's add more

480
00:20:48,999 --> 00:20:54,070
HTTP requests so yeah it's increased the

481
00:20:54,070 --> 00:20:55,929
amount of concurrent tasks because I

482
00:20:55,929 --> 00:20:57,820
have more CPU bandwidth now I'm waiting

483
00:20:57,820 --> 00:20:59,109
for stuff to happen so I can execute

484
00:20:59,109 --> 00:21:03,999
stuff good however the more increased

485
00:21:03,999 --> 00:21:07,749
the concurrency the more you increase

486
00:21:07,749 --> 00:21:11,799
the memory consumption why well we have

487
00:21:11,799 --> 00:21:13,690
a for each one that we received we are

488
00:21:13,690 --> 00:21:17,619
allocating new closures so new closures

489
00:21:17,619 --> 00:21:19,779
gets allocated new objects and all of

490
00:21:19,779 --> 00:21:24,129
these occupy memory which is you know

491
00:21:24,129 --> 00:21:30,549
precious in most systems the moment you

492
00:21:30,549 --> 00:21:33,999
increase memory consumption you increase

493
00:21:33,999 --> 00:21:36,609
you make the word of the nice garbage

494
00:21:36,609 --> 00:21:41,289
collector harder why well because you

495
00:21:41,289 --> 00:21:44,950
have es more stuff to clean up and you

496
00:21:44,950 --> 00:21:47,950
will is worth even the performance of

497
00:21:47,950 --> 00:21:49,210
the garbage collector is getting better

498
00:21:49,210 --> 00:21:50,379
and better and better and better better

499
00:21:50,379 --> 00:21:53,889
better and better every year we are

500
00:21:53,889 --> 00:21:55,299
scheduling more stuff every year to

501
00:21:55,299 --> 00:21:58,539
every moment to do more arise so it

502
00:21:58,539 --> 00:22:00,220
increased the pressure on the garbage

503
00:22:00,220 --> 00:22:05,799
collector to to do work and these the

504
00:22:05,799 --> 00:22:07,419
garbage collector where does it run is

505
00:22:07,419 --> 00:22:09,609
it magic no it's not magic it runs on a

506
00:22:09,609 --> 00:22:12,340
CPU and you know when you are working on

507
00:22:12,340 --> 00:22:14,019
a container system or are deploying

508
00:22:14,019 --> 00:22:18,190
nodejs in production you are doing you

509
00:22:18,190 --> 00:22:20,169
probably have one or two or three

510
00:22:20,169 --> 00:22:22,330
maybe course I don't know Italy most of

511
00:22:22,330 --> 00:22:24,639
the time once one Corps

512
00:22:24,639 --> 00:22:26,889
so if regard watch collectors running

513
00:22:26,889 --> 00:22:29,259
maybe my note process cannot run so we

514
00:22:29,259 --> 00:22:30,580
have a problem there okay there is

515
00:22:30,580 --> 00:22:35,320
contention so in the end and so this

516
00:22:35,320 --> 00:22:36,730
means that the garbage collector will

517
00:22:36,730 --> 00:22:40,989
steal my CPU cycles perfect and will

518
00:22:40,989 --> 00:22:45,059
steal my CPU cycle from the JavaScript

519
00:22:45,059 --> 00:22:50,350
critical path which is which is a little

520
00:22:50,350 --> 00:22:57,159
bit a tricky thing II so the net result

521
00:22:57,159 --> 00:23:00,070
is that late in a node.js application

522
00:23:00,070 --> 00:23:03,340
latency and throughput are tightly

523
00:23:03,340 --> 00:23:06,249
connected so the moment you see an

524
00:23:06,249 --> 00:23:09,009
increase in latency you will see also

525
00:23:09,009 --> 00:23:11,049
likely a decrease in in throughput

526
00:23:11,049 --> 00:23:13,090
mainly because they are linked together

527
00:23:13,090 --> 00:23:17,440
by the way the node works and the fact

528
00:23:17,440 --> 00:23:19,749
that typically it can take a huge amount

529
00:23:19,749 --> 00:23:22,749
of high concurrency compared to other

530
00:23:22,749 --> 00:23:25,629
platforms and and this is one of the

531
00:23:25,629 --> 00:23:28,149
things that you know having doing it as

532
00:23:28,149 --> 00:23:31,840
a job to go through and putting node.js

533
00:23:31,840 --> 00:23:34,239
application in production it's one of

534
00:23:34,239 --> 00:23:36,129
the most misunderstood concepts about

535
00:23:36,129 --> 00:23:39,340
about no GS and think thinking that this

536
00:23:39,340 --> 00:23:41,710
true concept latency and throughput are

537
00:23:41,710 --> 00:23:43,989
not connected to each other and you

538
00:23:43,989 --> 00:23:47,409
should always remember this so that this

539
00:23:47,409 --> 00:23:49,600
tool is part of the clinic J's suite you

540
00:23:49,600 --> 00:23:51,309
can find it there it there is also a

541
00:23:51,309 --> 00:23:55,299
video of me speaking whatever so if you

542
00:23:55,299 --> 00:23:56,529
need some help in improving the

543
00:23:56,529 --> 00:23:58,600
performance of your node.js application

544
00:23:58,600 --> 00:24:01,749
reach out eh say hi and yeah that's it

545
00:24:01,749 --> 00:24:04,629
and again these lights you probably want

546
00:24:04,629 --> 00:24:05,980
to check them out I don't know hopefully

547
00:24:05,980 --> 00:24:08,230
hopefully yes hopefully now I will tweet

548
00:24:08,230 --> 00:24:09,909
about them sooner rather than later

549
00:24:09,909 --> 00:24:11,529
somebody taking a pictures thank you I

550
00:24:11,529 --> 00:24:15,470
put it right they put it there for you

551
00:24:15,480 --> 00:24:24,620
so yes and thank you

