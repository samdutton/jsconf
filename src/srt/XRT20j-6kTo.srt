1
00:00:19,010 --> 00:00:21,779

today we're going to present you for the

2
00:00:21,779 --> 00:00:24,480
first time in public our new product so

3
00:00:24,480 --> 00:00:27,360
JavaScript debugging robots we're young

4
00:00:27,360 --> 00:00:29,430
startup we're based out of Switzerland

5
00:00:29,430 --> 00:00:31,650
and we came all the way to here to

6
00:00:31,650 --> 00:00:33,750
present this you know just before I

7
00:00:33,750 --> 00:00:36,059
start a bit of background this is

8
00:00:36,059 --> 00:00:38,309
Switzerland right its last in the middle

9
00:00:38,309 --> 00:00:40,019
of Europe it's about as big as sorry

10
00:00:40,019 --> 00:00:41,519
that maybe even smaller I don't I don't

11
00:00:41,519 --> 00:00:44,160
know and there's usually you know this

12
00:00:44,160 --> 00:00:46,140
confusion between Sweden and Switzerland

13
00:00:46,140 --> 00:00:48,540
so we're from Switzerland Sweden this is

14
00:00:48,540 --> 00:00:50,940
that is ikea switzerland it's Swiss

15
00:00:50,940 --> 00:00:55,970
cheese right so I'm outback buster so

16
00:00:55,970 --> 00:00:59,040
we'll have robots and I I get you know

17
00:00:59,040 --> 00:01:00,479
everybody loves robot because you know

18
00:01:00,479 --> 00:01:02,330
they do lots of useful things for you

19
00:01:02,330 --> 00:01:04,769
for instance you can buy a robot to you

20
00:01:04,769 --> 00:01:06,750
no mo your loan if you have a garden you

21
00:01:06,750 --> 00:01:09,360
can buy robots to clean your floor or

22
00:01:09,360 --> 00:01:12,439
scare your pets depending on you know

23
00:01:12,439 --> 00:01:14,909
what you want to do or you can even you

24
00:01:14,909 --> 00:01:16,590
know have this really cool flying

25
00:01:16,590 --> 00:01:19,049
quadcopters through it so you know all

26
00:01:19,049 --> 00:01:20,700
these you know robots they're really

27
00:01:20,700 --> 00:01:22,259
nice because they're going to do all the

28
00:01:22,259 --> 00:01:23,490
things that you don't really want to do

29
00:01:23,490 --> 00:01:25,500
yourself but if there is one thing that

30
00:01:25,500 --> 00:01:27,030
you that we want to do is you know

31
00:01:27,030 --> 00:01:29,189
programming right if we all love

32
00:01:29,189 --> 00:01:30,689
programming especially in JavaScript

33
00:01:30,689 --> 00:01:32,130
otherwise you would you know be on the

34
00:01:32,130 --> 00:01:34,710
beach or somewhere else you know I don't

35
00:01:34,710 --> 00:01:36,119
have to teach you you know how great

36
00:01:36,119 --> 00:01:38,399
jazz give is you know you can do a great

37
00:01:38,399 --> 00:01:40,590
server-side application with nodejs or

38
00:01:40,590 --> 00:01:43,020
program robots now you know they're

39
00:01:43,020 --> 00:01:45,030
these cool operating system for mobile

40
00:01:45,030 --> 00:01:47,819
you know Firefox OS or Chrome OS for you

41
00:01:47,819 --> 00:01:50,609
know with your nice Chromebook so really

42
00:01:50,609 --> 00:01:51,749
a lot of things that you can do with

43
00:01:51,749 --> 00:01:54,509
with JavaScript what we really don't

44
00:01:54,509 --> 00:01:56,789
like is that you know bugs on you know

45
00:01:56,789 --> 00:01:58,619
it's a fact of life if you write code

46
00:01:58,619 --> 00:02:01,020
you can have you know some of these at

47
00:02:01,020 --> 00:02:04,770
some point you know that's not good but

48
00:02:04,770 --> 00:02:06,770
this cannot be helped right you know you

49
00:02:06,770 --> 00:02:08,670
just you know you're just gonna have to

50
00:02:08,670 --> 00:02:10,710
handle them but let me just give you a

51
00:02:10,710 --> 00:02:12,870
very simple example this is taken from a

52
00:02:12,870 --> 00:02:15,810
website it's a it's a simple form to you

53
00:02:15,810 --> 00:02:17,130
know sign up to the mailing list and

54
00:02:17,130 --> 00:02:20,520
this is the code that is behind it so

55
00:02:20,520 --> 00:02:22,920
it's a you know JavaScript using jquery

56
00:02:22,920 --> 00:02:24,810
and the only thing that it does it

57
00:02:24,810 --> 00:02:27,660
handles the submit events and then it

58
00:02:27,660 --> 00:02:29,520
uses a regular expression to parse the

59
00:02:29,520 --> 00:02:30,040
email

60
00:02:30,040 --> 00:02:31,959
to make sure it is syntactically valid

61
00:02:31,959 --> 00:02:35,620
and if it is then it submits the form so

62
00:02:35,620 --> 00:02:37,959
how can you know what can possibly go

63
00:02:37,959 --> 00:02:39,909
wrong here right it's only you know less

64
00:02:39,909 --> 00:02:42,400
than 20 lines of code right well first

65
00:02:42,400 --> 00:02:43,900
you cool you know make a mistake with

66
00:02:43,900 --> 00:02:45,849
you know the CSS selector and not get

67
00:02:45,849 --> 00:02:47,470
the right value or not get any value at

68
00:02:47,470 --> 00:02:50,049
all for doing others then you could make

69
00:02:50,049 --> 00:02:51,489
a mistake you know in the regular

70
00:02:51,489 --> 00:02:55,480
expression no that never happens but and

71
00:02:55,480 --> 00:02:57,489
then if it does happen well that you

72
00:02:57,489 --> 00:02:59,260
know this if statement over here is not

73
00:02:59,260 --> 00:03:00,790
going to you know do the right thing so

74
00:03:00,790 --> 00:03:02,680
you might actually submit something in

75
00:03:02,680 --> 00:03:04,989
value to the server or you know prevent

76
00:03:04,989 --> 00:03:07,139
somebody from submitting something valid

77
00:03:07,139 --> 00:03:10,359
so that's not good and then even if all

78
00:03:10,359 --> 00:03:12,010
this code is correct you're going to

79
00:03:12,010 --> 00:03:14,980
post a request to a server and then the

80
00:03:14,980 --> 00:03:16,930
server is going to do God knows what you

81
00:03:16,930 --> 00:03:18,730
know work with the database with some

82
00:03:18,730 --> 00:03:20,919
other services and might you know blow

83
00:03:20,919 --> 00:03:24,040
up so you might have a pound or two and

84
00:03:24,040 --> 00:03:25,510
then of course they're a bunch of you

85
00:03:25,510 --> 00:03:27,129
know function calls you know other

86
00:03:27,129 --> 00:03:28,569
pieces of code that may also have

87
00:03:28,569 --> 00:03:30,909
problems so it's a very simple example

88
00:03:30,909 --> 00:03:33,159
there are about 13 lines of useful code

89
00:03:33,159 --> 00:03:35,349
in there you know there are about six

90
00:03:35,349 --> 00:03:36,819
lines where you could possibly have a

91
00:03:36,819 --> 00:03:40,659
problem someday and that's not even

92
00:03:40,659 --> 00:03:42,639
counting problems with libraries so that

93
00:03:42,639 --> 00:03:45,010
example was using jQuery well I guess

94
00:03:45,010 --> 00:03:47,260
jQuery is pretty stable but you know you

95
00:03:47,260 --> 00:03:48,819
called upgrade to a newer version of

96
00:03:48,819 --> 00:03:50,530
jQuery and all of seven hats you know

97
00:03:50,530 --> 00:03:52,959
some unexpected behavior so something

98
00:03:52,959 --> 00:03:55,389
will break sooner or later so what can

99
00:03:55,389 --> 00:03:57,449
you do to you know make things better

100
00:03:57,449 --> 00:03:59,470
well it could use a strongly typed

101
00:03:59,470 --> 00:04:02,949
language maybe but you know this example

102
00:04:02,949 --> 00:04:05,049
was syntactically valid you know there

103
00:04:05,049 --> 00:04:07,030
is no type problems and still you know

104
00:04:07,030 --> 00:04:08,470
there are lots of you know places where

105
00:04:08,470 --> 00:04:10,659
you could have issues you could use

106
00:04:10,659 --> 00:04:13,150
better compilers or you know compilers

107
00:04:13,150 --> 00:04:15,909
to begin with but again that example

108
00:04:15,909 --> 00:04:17,440
there I mean it wouldn't help right

109
00:04:17,440 --> 00:04:18,940
because you know the problem you know

110
00:04:18,940 --> 00:04:20,769
with CSS selectors that kind of stuff

111
00:04:20,769 --> 00:04:23,470
there is nothing a compiler can do now

112
00:04:23,470 --> 00:04:25,240
you can try to implement some very fancy

113
00:04:25,240 --> 00:04:28,240
static analysis tool that was suddenly

114
00:04:28,240 --> 00:04:30,400
be useful but you know the problem with

115
00:04:30,400 --> 00:04:32,560
static analysis is it has to speculate

116
00:04:32,560 --> 00:04:34,120
about what your input is going to look

117
00:04:34,120 --> 00:04:36,550
like so you know in general it's going

118
00:04:36,550 --> 00:04:37,990
to be difficult to prove or disprove

119
00:04:37,990 --> 00:04:40,029
that you know something's going to work

120
00:04:40,029 --> 00:04:42,400
or not so in the end of your left with

121
00:04:42,400 --> 00:04:43,180
testing

122
00:04:43,180 --> 00:04:44,889
the only solution you know if you really

123
00:04:44,889 --> 00:04:46,150
want to make sure that you know your

124
00:04:46,150 --> 00:04:48,880
thing is going to work or time and not

125
00:04:48,880 --> 00:04:53,080
break so speaking a little bit about you

126
00:04:53,080 --> 00:04:55,360
know testing techniques right so what

127
00:04:55,360 --> 00:04:56,530
are the you know techniques out there

128
00:04:56,530 --> 00:04:58,780
well obviously you can test your code

129
00:04:58,780 --> 00:05:01,870
manually when it's just you know mailing

130
00:05:01,870 --> 00:05:03,639
list signup well that's not too much

131
00:05:03,639 --> 00:05:05,500
work you can you can do it yourself but

132
00:05:05,500 --> 00:05:07,600
you know in general you have better

133
00:05:07,600 --> 00:05:10,210
things to do than keep you know on

134
00:05:10,210 --> 00:05:11,979
clicking and typing stuff to see if it

135
00:05:11,979 --> 00:05:14,139
works then you can write unit tests

136
00:05:14,139 --> 00:05:15,940
which is very useful and you should

137
00:05:15,940 --> 00:05:18,070
definitely do that but if not as easy

138
00:05:18,070 --> 00:05:19,780
for instance if you have a server or if

139
00:05:19,780 --> 00:05:21,370
you have some you know fancy libraries

140
00:05:21,370 --> 00:05:23,500
you can have to mark stuff on you know

141
00:05:23,500 --> 00:05:26,380
it's not necessarily easy to test that

142
00:05:26,380 --> 00:05:28,720
the entire stack and then finally you

143
00:05:28,720 --> 00:05:30,220
can write integration tests using

144
00:05:30,220 --> 00:05:32,080
selenium or phantom jet and that's

145
00:05:32,080 --> 00:05:34,000
basically the only solution if you want

146
00:05:34,000 --> 00:05:36,039
to test the entire stack and so you

147
00:05:36,039 --> 00:05:37,630
would write something like that just you

148
00:05:37,630 --> 00:05:39,370
know just wrote the flu a few lines it's

149
00:05:39,370 --> 00:05:41,830
relatively easy but the problem is

150
00:05:41,830 --> 00:05:43,780
basically forces you to write more codes

151
00:05:43,780 --> 00:05:45,970
right so you're testing code and you

152
00:05:45,970 --> 00:05:47,710
have to write more code that's basically

153
00:05:47,710 --> 00:05:49,659
the testing products that we have

154
00:05:49,659 --> 00:05:52,000
nowadays right so the additional code

155
00:05:52,000 --> 00:05:53,740
that you would not you write in order to

156
00:05:53,740 --> 00:05:57,250
test your you know your feature has to

157
00:05:57,250 --> 00:05:58,780
be debugged as well and has to be

158
00:05:58,780 --> 00:06:01,900
maintained over time as well and so at

159
00:06:01,900 --> 00:06:04,060
bug buster our vision is to try to solve

160
00:06:04,060 --> 00:06:06,940
this problem using a robot so sorry to

161
00:06:06,940 --> 00:06:08,919
disappoint you it's not a physical robot

162
00:06:08,919 --> 00:06:10,780
it's a software robot it's just you know

163
00:06:10,780 --> 00:06:13,150
piece of software but basically does the

164
00:06:13,150 --> 00:06:14,889
same thing as your vacuum cleaner right

165
00:06:14,889 --> 00:06:16,720
it goes around your code and tries to

166
00:06:16,720 --> 00:06:18,580
find you know the dirty places that's

167
00:06:18,580 --> 00:06:22,840
basically so what it does is it explores

168
00:06:22,840 --> 00:06:25,810
your HTML and javascript by itself so it

169
00:06:25,810 --> 00:06:28,419
basically uses the application and while

170
00:06:28,419 --> 00:06:31,389
it does that it detects bugs on top of

171
00:06:31,389 --> 00:06:33,909
it we have a very expressive timing

172
00:06:33,909 --> 00:06:36,370
insensitive API that enables you to

173
00:06:36,370 --> 00:06:39,159
control the robot a little bit a little

174
00:06:39,159 --> 00:06:41,830
bit better and the goal with this is to

175
00:06:41,830 --> 00:06:44,580
be is to test a lot more with less code

176
00:06:44,580 --> 00:06:47,349
so speaking about automatic exploration

177
00:06:47,349 --> 00:06:50,830
of code how does it work so it's fairly

178
00:06:50,830 --> 00:06:52,570
simple to understand first you know back

179
00:06:52,570 --> 00:06:53,380
with you is going to load your

180
00:06:53,380 --> 00:06:55,750
application then it's going to supply

181
00:06:55,750 --> 00:06:56,800
input first

182
00:06:56,800 --> 00:06:59,050
trigger an event somewhere by typing a

183
00:06:59,050 --> 00:07:02,050
value or clicking on a button then it's

184
00:07:02,050 --> 00:07:03,819
going to analyze the even handler code

185
00:07:03,819 --> 00:07:07,360
basically as it is executing and it's

186
00:07:07,360 --> 00:07:09,280
going to you know unfold the control

187
00:07:09,280 --> 00:07:11,110
flow graph so basically if you have if

188
00:07:11,110 --> 00:07:12,699
statements and stuff like that in an

189
00:07:12,699 --> 00:07:14,169
event handler it's going to enfold that

190
00:07:14,169 --> 00:07:15,550
and it's going to figure out that there

191
00:07:15,550 --> 00:07:18,280
are various sides you know of these if

192
00:07:18,280 --> 00:07:20,710
statements and then it's going to try to

193
00:07:20,710 --> 00:07:23,139
generate new input in order to cover the

194
00:07:23,139 --> 00:07:24,970
different sides of these if statements

195
00:07:24,970 --> 00:07:27,129
and if you can do that then it will go

196
00:07:27,129 --> 00:07:29,650
back to step 2 step 2 in order to supply

197
00:07:29,650 --> 00:07:32,229
additional input trigger again the same

198
00:07:32,229 --> 00:07:35,080
even handler and uncover the other parts

199
00:07:35,080 --> 00:07:38,139
of the code so if I continue with my

200
00:07:38,139 --> 00:07:42,490
signup example the first thing is going

201
00:07:42,490 --> 00:07:43,900
to do is well it will figure out that

202
00:07:43,900 --> 00:07:45,430
there is one input field so it's going

203
00:07:45,430 --> 00:07:48,069
to type a value in there and a that will

204
00:07:48,069 --> 00:07:49,960
not trigger any events so it will just

205
00:07:49,960 --> 00:07:52,810
carry on and do something else so what

206
00:07:52,810 --> 00:07:54,460
it will do is it will click on the sign

207
00:07:54,460 --> 00:07:57,610
up button that will trigger the event

208
00:07:57,610 --> 00:07:59,979
handler uncover the first if the first

209
00:07:59,979 --> 00:08:03,729
part of this if statement over here what

210
00:08:03,729 --> 00:08:05,409
this if statement does is you know it

211
00:08:05,409 --> 00:08:08,409
runs this regular expression to test to

212
00:08:08,409 --> 00:08:11,310
test the validity of the of the input

213
00:08:11,310 --> 00:08:14,199
the input here is a it's not a valid

214
00:08:14,199 --> 00:08:16,029
email address it doesn't match the

215
00:08:16,029 --> 00:08:19,870
regular expression so it stops there so

216
00:08:19,870 --> 00:08:21,819
what it will do it will actually resolve

217
00:08:21,819 --> 00:08:23,680
this regular expression to figure out

218
00:08:23,680 --> 00:08:25,449
another piece of input that could be

219
00:08:25,449 --> 00:08:28,300
typed into this text field instead and

220
00:08:28,300 --> 00:08:31,060
so it if it successfully does that then

221
00:08:31,060 --> 00:08:33,250
it can type something else in the typing

222
00:08:33,250 --> 00:08:35,860
in the text field so in this example it

223
00:08:35,860 --> 00:08:37,329
will you know type something that looks

224
00:08:37,329 --> 00:08:39,070
random but it's actually not random at

225
00:08:39,070 --> 00:08:40,659
all it really matches the regular

226
00:08:40,659 --> 00:08:43,180
expression and so it types it again and

227
00:08:43,180 --> 00:08:44,920
clicks again on the sign up button and

228
00:08:44,920 --> 00:08:47,589
now it has covered the entire code for

229
00:08:47,589 --> 00:08:50,199
this even handler so that enables you to

230
00:08:50,199 --> 00:08:53,470
get great code coverage and to find you

231
00:08:53,470 --> 00:08:55,120
know if there is an exception or if

232
00:08:55,120 --> 00:08:56,589
there is you know an assertion or

233
00:08:56,589 --> 00:08:58,300
something like that that fires in this

234
00:08:58,300 --> 00:08:59,980
piece of code then it will catch it and

235
00:08:59,980 --> 00:09:04,480
report it what is this good for several

236
00:09:04,480 --> 00:09:05,980
things first you can use that for

237
00:09:05,980 --> 00:09:08,290
exploratory testing so this is for

238
00:09:08,290 --> 00:09:09,230
instance you know

239
00:09:09,230 --> 00:09:12,110
have an application it may be new or

240
00:09:12,110 --> 00:09:13,670
maybe you don't know it very well you

241
00:09:13,670 --> 00:09:15,200
can you know launch your robot and it

242
00:09:15,200 --> 00:09:18,050
let it do you know different things see

243
00:09:18,050 --> 00:09:19,850
see what happens and get an assessment

244
00:09:19,850 --> 00:09:23,120
of the code quality you can also do use

245
00:09:23,120 --> 00:09:25,520
these to do more systematic testing so

246
00:09:25,520 --> 00:09:27,740
one problem when people are writing test

247
00:09:27,740 --> 00:09:29,690
cases is that you know they have sort of

248
00:09:29,690 --> 00:09:31,460
a conception of how the code works so

249
00:09:31,460 --> 00:09:32,600
they're going to write the test cases

250
00:09:32,600 --> 00:09:35,440
you know by following this sort of

251
00:09:35,440 --> 00:09:38,240
mental model that I have on so they may

252
00:09:38,240 --> 00:09:42,500
miss you know corner cases by analyzing

253
00:09:42,500 --> 00:09:43,850
the source code we're actually able to

254
00:09:43,850 --> 00:09:46,610
try and cover as much of the code as

255
00:09:46,610 --> 00:09:48,860
possible including the corner cases so

256
00:09:48,860 --> 00:09:50,390
you can you can use that to to

257
00:09:50,390 --> 00:09:52,760
systematically test you could so it's a

258
00:09:52,760 --> 00:09:54,820
very useful for testing large code base

259
00:09:54,820 --> 00:09:57,080
you know very often people don't have

260
00:09:57,080 --> 00:09:58,790
the time to you know write all the test

261
00:09:58,790 --> 00:10:00,770
cases that they will want to write for

262
00:10:00,770 --> 00:10:02,660
the code base or maybe the code base

263
00:10:02,660 --> 00:10:04,940
moves too quickly so maintaining the

264
00:10:04,940 --> 00:10:06,890
test case is difficult so you can use

265
00:10:06,890 --> 00:10:09,340
these robots to to tell help you do that

266
00:10:09,340 --> 00:10:11,660
finally it's it's a cool tool for

267
00:10:11,660 --> 00:10:13,340
continuous testing you can you know put

268
00:10:13,340 --> 00:10:15,680
that into your Jenkins or whatever

269
00:10:15,680 --> 00:10:19,130
Travis and run the rapid as frequently

270
00:10:19,130 --> 00:10:23,240
as you want so I was saying before that

271
00:10:23,240 --> 00:10:25,580
we also have an API well just because

272
00:10:25,580 --> 00:10:27,920
you know when you run the robot in a

273
00:10:27,920 --> 00:10:30,110
optimally exploration mode well it might

274
00:10:30,110 --> 00:10:31,340
start doing things that you're not

275
00:10:31,340 --> 00:10:34,490
interested about right that doesn't mean

276
00:10:34,490 --> 00:10:36,380
it's not interesting but you know my

277
00:10:36,380 --> 00:10:39,380
delay you know you for little why

278
00:10:39,380 --> 00:10:41,030
because you will have to wait until it

279
00:10:41,030 --> 00:10:42,650
gets to the place where you want to test

280
00:10:42,650 --> 00:10:45,080
your application so we have an API that

281
00:10:45,080 --> 00:10:46,970
we call the connector API that is there

282
00:10:46,970 --> 00:10:49,280
to control the robot to direct it and

283
00:10:49,280 --> 00:10:51,560
also to leverage automatic exploration

284
00:10:51,560 --> 00:10:53,600
and that enables to test functional

285
00:10:53,600 --> 00:10:57,290
properties here's an example of how this

286
00:10:57,290 --> 00:10:59,660
API look looks like it's it's also a

287
00:10:59,660 --> 00:11:02,420
JavaScript API so the first few lines

288
00:11:02,420 --> 00:11:04,610
just to you know started the test

289
00:11:04,610 --> 00:11:06,830
session so you can load the URL and you

290
00:11:06,830 --> 00:11:08,900
say you know I want to do the automatic

291
00:11:08,900 --> 00:11:11,300
exploration but then it's not because

292
00:11:11,300 --> 00:11:13,220
it's not in automat it's an automatic

293
00:11:13,220 --> 00:11:14,930
exploration that you cannot direct it so

294
00:11:14,930 --> 00:11:16,460
you can actually write a few lines to

295
00:11:16,460 --> 00:11:19,190
tell it exactly what to do so allein 8

296
00:11:19,190 --> 00:11:21,660
to 11 you can you know click type

297
00:11:21,660 --> 00:11:23,430
and click again so this is an example

298
00:11:23,430 --> 00:11:26,250
where you do a sign in so if you know to

299
00:11:26,250 --> 00:11:27,930
provide a username and a password you

300
00:11:27,930 --> 00:11:31,290
can do that very easily you can see here

301
00:11:31,290 --> 00:11:33,420
the you know timing insensitive property

302
00:11:33,420 --> 00:11:36,960
of this API so if you actually need to

303
00:11:36,960 --> 00:11:39,600
click on a menu before you know doing

304
00:11:39,600 --> 00:11:42,630
the next the next operation on your

305
00:11:42,630 --> 00:11:45,420
application by Buster actually since its

306
00:11:45,420 --> 00:11:48,300
you know embedded deep into the into the

307
00:11:48,300 --> 00:11:51,360
browser it actually figures out if you

308
00:11:51,360 --> 00:11:53,280
know there are Ajax requests or if they

309
00:11:53,280 --> 00:11:55,050
have if there are timers and that kind

310
00:11:55,050 --> 00:11:56,460
of things and it will wait in between

311
00:11:56,460 --> 00:12:00,990
two actions that you're queuing before

312
00:12:00,990 --> 00:12:02,730
it executes them so you don't have to

313
00:12:02,730 --> 00:12:06,150
explicitly write code between your click

314
00:12:06,150 --> 00:12:10,230
and another click to prevent the robot

315
00:12:10,230 --> 00:12:13,830
from you know being too fast now that's

316
00:12:13,830 --> 00:12:15,960
for the sign in and then you know if you

317
00:12:15,960 --> 00:12:18,000
want to verify that you're actually you

318
00:12:18,000 --> 00:12:19,650
know logged in properly in your

319
00:12:19,650 --> 00:12:22,680
application you can use a watcher a

320
00:12:22,680 --> 00:12:25,950
watcher is basically an event emitters

321
00:12:25,950 --> 00:12:28,110
it that spies on the state of your

322
00:12:28,110 --> 00:12:29,910
application and that triggers and even

323
00:12:29,910 --> 00:12:32,430
when something specific happens so in

324
00:12:32,430 --> 00:12:34,830
this example is when some 11 shows up in

325
00:12:34,830 --> 00:12:37,050
the application so that enables you to

326
00:12:37,050 --> 00:12:39,660
spy on your application and then you

327
00:12:39,660 --> 00:12:41,250
want to encode the fact that you know

328
00:12:41,250 --> 00:12:43,410
this test session is going to be

329
00:12:43,410 --> 00:12:46,490
successful if you properly logged in on

330
00:12:46,490 --> 00:12:49,590
unsuccessful otherwise so for that you

331
00:12:49,590 --> 00:12:53,070
can use a goal so a goal is a promise

332
00:12:53,070 --> 00:12:55,470
that basically says in this test in this

333
00:12:55,470 --> 00:12:59,190
test session the sign-in should work if

334
00:12:59,190 --> 00:13:01,890
it's not explicitly fulfilled before the

335
00:13:01,890 --> 00:13:03,450
end of the test session then you can

336
00:13:03,450 --> 00:13:06,240
have a bug reported but if it is like in

337
00:13:06,240 --> 00:13:08,340
this example you know in this watcher if

338
00:13:08,340 --> 00:13:10,620
we see the element sign then then we

339
00:13:10,620 --> 00:13:12,450
know that we're logged in properly so we

340
00:13:12,450 --> 00:13:14,010
can fulfill the goal and you know

341
00:13:14,010 --> 00:13:17,100
everybody's happy that's an example of

342
00:13:17,100 --> 00:13:20,760
our I of our API in terms of technology

343
00:13:20,760 --> 00:13:22,650
we're building all of that inside web

344
00:13:22,650 --> 00:13:24,600
kits or we have a heavily customized

345
00:13:24,600 --> 00:13:26,280
version of JavaScript code to do an

346
00:13:26,280 --> 00:13:28,140
instrumentation of the JavaScript and to

347
00:13:28,140 --> 00:13:30,990
figure out all these input values we now

348
00:13:30,990 --> 00:13:33,150
have beta version that is online so i

349
00:13:33,150 --> 00:13:34,250
encourage you to

350
00:13:34,250 --> 00:13:36,920
it's completely free and we'd like to

351
00:13:36,920 --> 00:13:38,570
get as much feedback from you guys as

352
00:13:38,570 --> 00:13:40,450
possible that's why we're here today and

353
00:13:40,450 --> 00:13:43,970
we're also considering porting our

354
00:13:43,970 --> 00:13:47,240
technology to v8 in order to provide the

355
00:13:47,240 --> 00:13:50,360
same technology for four no Jess so if

356
00:13:50,360 --> 00:13:52,010
you think that's interesting let us know

357
00:13:52,010 --> 00:13:55,670
that will definitely motivate us so I'm

358
00:13:55,670 --> 00:13:57,320
getting near the end of my talk and

359
00:13:57,320 --> 00:14:00,050
before I'm before I stop just you know

360
00:14:00,050 --> 00:14:03,860
wanted to cry 5 one thing if you're

361
00:14:03,860 --> 00:14:05,390
doing test-driven development of

362
00:14:05,390 --> 00:14:07,280
behavior driven development if you're

363
00:14:07,280 --> 00:14:09,200
writing unit tests or selenium test

364
00:14:09,200 --> 00:14:11,540
cases by you know by all means keep

365
00:14:11,540 --> 00:14:14,090
doing it and by we're not saying that

366
00:14:14,090 --> 00:14:16,970
you should you should stop doing this

367
00:14:16,970 --> 00:14:19,160
what we try to achieve here is to

368
00:14:19,160 --> 00:14:21,290
provide a way to test more not less so

369
00:14:21,290 --> 00:14:23,030
you can use these robots to basically

370
00:14:23,030 --> 00:14:26,570
try to cover as much of your code as

371
00:14:26,570 --> 00:14:28,400
possible and to complement whatever test

372
00:14:28,400 --> 00:14:30,410
cases you already have but if you're

373
00:14:30,410 --> 00:14:32,350
reading you know if you're using and

374
00:14:32,350 --> 00:14:34,460
development mythology that you know

375
00:14:34,460 --> 00:14:35,870
where you write your test cases keep

376
00:14:35,870 --> 00:14:37,730
doing this that's the best that's the

377
00:14:37,730 --> 00:14:40,520
best thing that you can do all right

378
00:14:40,520 --> 00:14:43,550
that completes my talk there are three

379
00:14:43,550 --> 00:14:45,860
of us here danielle and avenue and of

380
00:14:45,860 --> 00:14:47,570
course myself so if you think this is

381
00:14:47,570 --> 00:14:49,339
interesting if you like to see a demo or

382
00:14:49,339 --> 00:14:52,130
just want to talk about technology just

383
00:14:52,130 --> 00:15:08,960
you know come to us thanks a lot

