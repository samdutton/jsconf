1
00:00:15,360 --> 00:00:17,760

so today I'll be talking about

2
00:00:17,760 --> 00:00:20,370
effectively building language tooling or

3
00:00:20,370 --> 00:00:22,930
alternatively how come you remix our

4
00:00:22,930 --> 00:00:26,590
language tooling so the company I work

5
00:00:26,590 --> 00:00:30,460
for is cloud nine ID so we built tooling

6
00:00:30,460 --> 00:00:35,580
we built IDEs on the web in the clouds

7
00:00:35,580 --> 00:00:38,320
so we're a company based on startup

8
00:00:38,320 --> 00:00:45,160
capital let me start this very company

9
00:00:45,160 --> 00:00:46,690
based on venture capital we're a

10
00:00:46,690 --> 00:00:49,900
start-up we have about 30 employees now

11
00:00:49,900 --> 00:00:52,720
we're quickly growing we have two

12
00:00:52,720 --> 00:00:57,060
offices one MCM one in San Francisco and

13
00:00:57,060 --> 00:00:59,650
well the main language we focus on with

14
00:00:59,650 --> 00:01:04,180
our tooling is JavaScript and I mean

15
00:01:04,180 --> 00:01:06,460
JavaScript as a language has a long

16
00:01:06,460 --> 00:01:09,070
history I mean back when I first used it

17
00:01:09,070 --> 00:01:12,369
was in a do cities era I used to make

18
00:01:12,369 --> 00:01:14,860
some pop-ups and I think many of you did

19
00:01:14,860 --> 00:01:17,650
that and it was a while before I look

20
00:01:17,650 --> 00:01:20,829
back but I mean things have changed I

21
00:01:20,829 --> 00:01:23,020
mean no longer do we have these under

22
00:01:23,020 --> 00:01:26,100
construction signs of our page

23
00:01:26,100 --> 00:01:28,090
javascript has changed the weapons

24
00:01:28,090 --> 00:01:30,070
changed I mean javascript is big now I

25
00:01:30,070 --> 00:01:31,960
mean it's the very front end of the

26
00:01:31,960 --> 00:01:35,640
browser war or JavaScript the reins

27
00:01:35,640 --> 00:01:39,130
javascript is in databases it's on

28
00:01:39,130 --> 00:01:42,280
servers I mean javascript is everywhere

29
00:01:42,280 --> 00:01:45,569
I mean javascript is a big language and

30
00:01:45,569 --> 00:01:48,329
that cloud nine we used in a big way

31
00:01:48,329 --> 00:01:52,179
mean for our products EF about three

32
00:01:52,179 --> 00:01:53,170
hundred thousand lines of JavaScript

33
00:01:53,170 --> 00:01:56,139
codes I mean three hundred thousand

34
00:01:56,139 --> 00:01:59,740
lines of JavaScript so I mean the last

35
00:01:59,740 --> 00:02:01,359
audience I showed this figure to date

36
00:02:01,359 --> 00:02:04,060
they were shocks they were a pulse they

37
00:02:04,060 --> 00:02:06,659
were also not JavaScript programmers I

38
00:02:06,659 --> 00:02:09,970
mean you can use javascript in a big way

39
00:02:09,970 --> 00:02:12,760
you can make it to do you can use it to

40
00:02:12,760 --> 00:02:15,430
make application skill JavaScript's but

41
00:02:15,430 --> 00:02:17,440
to do that I think tooling really

42
00:02:17,440 --> 00:02:20,890
matters tooling can do so much for

43
00:02:20,890 --> 00:02:24,310
language like Java scripts I mean it's

44
00:02:24,310 --> 00:02:25,810
not the easiest language that's out

45
00:02:25,810 --> 00:02:27,670
there I mean sure it's easy to learn

46
00:02:27,670 --> 00:02:29,500
it's actually master

47
00:02:29,500 --> 00:02:31,360
it's to know all the little pitfalls to

48
00:02:31,360 --> 00:02:34,750
know what not to do thanks for practice

49
00:02:34,750 --> 00:02:36,880
and to do that in a team setting in a

50
00:02:36,880 --> 00:02:41,290
big application is even harder so

51
00:02:41,290 --> 00:02:43,780
tooling really matters especially for

52
00:02:43,780 --> 00:02:49,330
language like Java Script and I think

53
00:02:49,330 --> 00:02:51,400
when many people think of tooling they

54
00:02:51,400 --> 00:02:53,740
think of these ites deaths are used in a

55
00:02:53,740 --> 00:02:56,290
c-sharp and c++ and java community I

56
00:02:56,290 --> 00:02:59,440
mean the FT's very luxury extensive two

57
00:02:59,440 --> 00:03:04,230
suites that does all these things and

58
00:03:04,230 --> 00:03:07,090
sometimes they do more than we want them

59
00:03:07,090 --> 00:03:08,800
to do I mean what we really want is a

60
00:03:08,800 --> 00:03:11,680
nice editor and getting some feedback on

61
00:03:11,680 --> 00:03:13,630
our code so i mean that's our focus

62
00:03:13,630 --> 00:03:16,300
really aiming putting out a great editor

63
00:03:16,300 --> 00:03:19,090
and giving you direct feedback on your

64
00:03:19,090 --> 00:03:23,560
coat so let's look at some Java scripts

65
00:03:23,560 --> 00:03:29,160
I mean this is a function process I

66
00:03:29,160 --> 00:03:31,480
don't know who wrote this but there's

67
00:03:31,480 --> 00:03:34,600
there are some mistakes in this so are

68
00:03:34,600 --> 00:03:36,310
there any JavaScript airs in the

69
00:03:36,310 --> 00:03:42,370
audience that can point out so I sure

70
00:03:42,370 --> 00:03:48,020
have to be fine p indeed anything else

71
00:03:48,030 --> 00:03:54,280
length yeah length is misspelled all

72
00:03:54,280 --> 00:03:55,720
right i mean if you look at an example

73
00:03:55,720 --> 00:03:57,580
like this i mean there are so many

74
00:03:57,580 --> 00:03:59,230
things that you can do wrong i mean at

75
00:03:59,230 --> 00:04:02,019
first sight it looks okay and I mean

76
00:04:02,019 --> 00:04:03,790
sure you can say these are beginner

77
00:04:03,790 --> 00:04:06,160
mistakes but every one of us has made

78
00:04:06,160 --> 00:04:08,470
these mistakes and every now and then

79
00:04:08,470 --> 00:04:10,829
they pop up again or you find them in

80
00:04:10,829 --> 00:04:13,630
codes written by your team and having

81
00:04:13,630 --> 00:04:15,250
good tooling to point out those mistakes

82
00:04:15,250 --> 00:04:18,400
can really help so yeah I mean good

83
00:04:18,400 --> 00:04:22,840
tooling use it for JavaScript so if you

84
00:04:22,840 --> 00:04:24,850
look at an example program again and

85
00:04:24,850 --> 00:04:28,450
then put it into an ID that that's worth

86
00:04:28,450 --> 00:04:30,970
its salt it will tell you about these

87
00:04:30,970 --> 00:04:34,510
mistakes it will put little markers on

88
00:04:34,510 --> 00:04:37,510
every of these errors if we actually

89
00:04:37,510 --> 00:04:39,490
tell you that you're iterating they're

90
00:04:39,490 --> 00:04:42,200
using and in declaring I mean

91
00:04:42,200 --> 00:04:44,480
if you do it like this it's a global and

92
00:04:44,480 --> 00:04:46,160
that's really likely not like he wanted

93
00:04:46,160 --> 00:04:51,830
to do it will also tell you that there's

94
00:04:51,830 --> 00:04:54,200
this and there I mean it's a call back

95
00:04:54,200 --> 00:04:56,360
you're using a dish this is a very very

96
00:04:56,360 --> 00:04:58,850
well known javascript problem and I mean

97
00:04:58,850 --> 00:05:01,940
it gets me every time I move around some

98
00:05:01,940 --> 00:05:04,010
code and certainly it's in a different

99
00:05:04,010 --> 00:05:05,720
context and I have to replace all the

100
00:05:05,720 --> 00:05:08,210
dishes by something else so if you have

101
00:05:08,210 --> 00:05:10,490
a tool that can just mark these things

102
00:05:10,490 --> 00:05:11,810
as an error that this can be really

103
00:05:11,810 --> 00:05:16,010
helpful so Andy test pointed out that

104
00:05:16,010 --> 00:05:18,080
the last mistake here was length Smith

105
00:05:18,080 --> 00:05:23,210
felt so other things that tooling can do

106
00:05:23,210 --> 00:05:25,220
for you is called completion it can help

107
00:05:25,220 --> 00:05:28,160
you write your code so if you write

108
00:05:28,160 --> 00:05:32,750
something with no Jas again a good idea

109
00:05:32,750 --> 00:05:35,630
will tell you that hey there's a request

110
00:05:35,630 --> 00:05:37,280
parameter and a result program internet

111
00:05:37,280 --> 00:05:39,560
to go back you're making I know the

112
00:05:39,560 --> 00:05:41,630
types of these things I know that result

113
00:05:41,630 --> 00:05:44,510
has these methods i can give you the no

114
00:05:44,510 --> 00:05:47,150
GS documentation and I mean that can be

115
00:05:47,150 --> 00:05:48,590
really helpful I mean you don't have to

116
00:05:48,590 --> 00:05:50,720
keep all that in your head you don't

117
00:05:50,720 --> 00:05:52,580
have to look at the no GS documentation

118
00:05:52,580 --> 00:05:55,670
website it's just right there and ID so

119
00:05:55,670 --> 00:05:57,770
tooling can really help write JavaScript

120
00:05:57,770 --> 00:06:01,760
code so another area where tooling can

121
00:06:01,760 --> 00:06:04,610
help is complex refactorings I mean if

122
00:06:04,610 --> 00:06:06,980
you have big JavaScript and you want to

123
00:06:06,980 --> 00:06:12,650
make big changes your stoolie so at

124
00:06:12,650 --> 00:06:15,650
cloud nine you do these things in the

125
00:06:15,650 --> 00:06:19,460
clouds we built IDs in the cloud and

126
00:06:19,460 --> 00:06:21,170
there's really two reasons for doing

127
00:06:21,170 --> 00:06:23,780
that I mean the first reason is I mean

128
00:06:23,780 --> 00:06:25,130
why would anyone do anything in the

129
00:06:25,130 --> 00:06:27,560
clouds I mean your job scriptures we

130
00:06:27,560 --> 00:06:30,020
built applications online so anyone can

131
00:06:30,020 --> 00:06:33,920
access them anywhere anytime so the

132
00:06:33,920 --> 00:06:35,870
other reason I mean it's a great

133
00:06:35,870 --> 00:06:37,370
metaphor immediate makes for nice

134
00:06:37,370 --> 00:06:41,090
pictures so i mean its cloud 9 wherein

135
00:06:41,090 --> 00:06:43,220
is nice place of fluffy clouds and

136
00:06:43,220 --> 00:06:47,270
everything but javascript is a very

137
00:06:47,270 --> 00:06:49,760
vivid environment in things keep

138
00:06:49,760 --> 00:06:51,770
changing all the time i mean new

139
00:06:51,770 --> 00:06:53,780
libraries are introduced new ways of

140
00:06:53,780 --> 00:06:54,950
using the language

141
00:06:54,950 --> 00:06:58,370
and new platforms ranging from databases

142
00:06:58,370 --> 00:07:00,560
to mobile phones to whatever new they

143
00:07:00,560 --> 00:07:04,040
think of and so that the very latest

144
00:07:04,040 --> 00:07:05,510
thing that happened in the JavaScript

145
00:07:05,510 --> 00:07:09,770
ropes is typescript so I think many of

146
00:07:09,770 --> 00:07:11,810
you have heard of to dive trips if not

147
00:07:11,810 --> 00:07:13,100
the main there's talk on this tomorrow

148
00:07:13,100 --> 00:07:16,940
go see it and so typescript is like

149
00:07:16,940 --> 00:07:19,100
JavaScript it's the JavaScript language

150
00:07:19,100 --> 00:07:23,300
with some additions so that the basic

151
00:07:23,300 --> 00:07:24,950
three editions they provide or type

152
00:07:24,950 --> 00:07:29,390
annotations modules and classes and we

153
00:07:29,390 --> 00:07:31,460
type annotations that's really the main

154
00:07:31,460 --> 00:07:33,650
feature there you can actually declare

155
00:07:33,650 --> 00:07:36,950
in your code hey this is a string and an

156
00:07:36,950 --> 00:07:38,870
end as a Dueling guy i like that i mean

157
00:07:38,870 --> 00:07:40,880
i can improve my tooling with that

158
00:07:40,880 --> 00:07:44,180
knowledge so let me see show you how

159
00:07:44,180 --> 00:07:47,030
that works so this is a type skate

160
00:07:47,030 --> 00:07:51,560
program it adds two numbers and returns

161
00:07:51,560 --> 00:07:53,390
the result it's also a JavaScript

162
00:07:53,390 --> 00:07:55,490
program the main timescape is a superset

163
00:07:55,490 --> 00:07:58,940
of javascript so what you can do in

164
00:07:58,940 --> 00:08:00,740
typescript is you can annotate these

165
00:08:00,740 --> 00:08:04,160
number parameters with the types you can

166
00:08:04,160 --> 00:08:06,890
say that they actually intended them to

167
00:08:06,890 --> 00:08:08,630
be numbers so if you're going to pass me

168
00:08:08,630 --> 00:08:12,560
something else that will be wrong so if

169
00:08:12,560 --> 00:08:14,810
someone calls your ads function with a

170
00:08:14,810 --> 00:08:20,180
number one and a boolean and if you look

171
00:08:20,180 --> 00:08:23,360
at those types that's wrong so you're

172
00:08:23,360 --> 00:08:25,000
tooling can actually tell you that

173
00:08:25,000 --> 00:08:30,260
that's wrong you cannot do that so again

174
00:08:30,260 --> 00:08:32,150
I mean as a tooling guy I like this I

175
00:08:32,150 --> 00:08:34,550
mean I can improve my tooling even

176
00:08:34,550 --> 00:08:38,830
beyond the point did that we have now

177
00:08:38,830 --> 00:08:42,229
but of course it been there's been a lot

178
00:08:42,229 --> 00:08:43,700
of controversy about this language I

179
00:08:43,700 --> 00:08:46,040
mean it's yet another compile to

180
00:08:46,040 --> 00:08:48,110
JavaScript language it will make

181
00:08:48,110 --> 00:08:52,250
debugging harder yada yada so I mean

182
00:08:52,250 --> 00:08:54,590
there are these issues but I mean if you

183
00:08:54,590 --> 00:08:56,480
want to use typescript if you if it

184
00:08:56,480 --> 00:08:58,160
makes you more productive I mean we want

185
00:08:58,160 --> 00:09:01,820
to make we want to support that so by

186
00:09:01,820 --> 00:09:04,070
the immortal words of my colleague Garon

187
00:09:04,070 --> 00:09:08,720
our motto is make out not war I mean

188
00:09:08,720 --> 00:09:12,319
we're going to support I've tapes and we

189
00:09:12,319 --> 00:09:14,389
are supporting type scripts so I mean

190
00:09:14,389 --> 00:09:16,189
how long do you think it took us to

191
00:09:16,189 --> 00:09:19,519
support dive trips I mean touch kid was

192
00:09:19,519 --> 00:09:22,550
announced this week and it took us one

193
00:09:22,550 --> 00:09:25,850
day to support it I mean one day after

194
00:09:25,850 --> 00:09:28,430
the Microsoft announcements we made an

195
00:09:28,430 --> 00:09:30,319
announcement a we support etiquette now

196
00:09:30,319 --> 00:09:35,449
in cloud nine so like you let me show

197
00:09:35,449 --> 00:09:39,410
you what you can do with it and I can

198
00:09:39,410 --> 00:09:41,810
show you part in the ID and part of line

199
00:09:41,810 --> 00:09:43,759
since i haven't actually registered to

200
00:09:43,759 --> 00:09:49,790
the internet here yet all right so this

201
00:09:49,790 --> 00:09:55,610
is local copy of cloud nine not quite in

202
00:09:55,610 --> 00:09:57,170
the cloud it's my own private little

203
00:09:57,170 --> 00:10:02,060
logo cloud and there's type grips and I

204
00:10:02,060 --> 00:10:03,649
mean type trip is very much like

205
00:10:03,649 --> 00:10:06,680
JavaScript so the main trick in getting

206
00:10:06,680 --> 00:10:09,230
type scripting cloud nine is realizing

207
00:10:09,230 --> 00:10:13,879
that and extending the syntax

208
00:10:13,879 --> 00:10:15,769
highlighter for typescript fit for

209
00:10:15,769 --> 00:10:18,019
javascript without great support I mean

210
00:10:18,019 --> 00:10:19,459
there's only these very little things

211
00:10:19,459 --> 00:10:22,250
that are added and once you do that you

212
00:10:22,250 --> 00:10:26,529
have def get support I mean it's a start

213
00:10:26,529 --> 00:10:34,220
but beyond that you want to actually be

214
00:10:34,220 --> 00:10:36,110
able to run type script to compile type

215
00:10:36,110 --> 00:10:39,079
to use typescript in cloud nine so it

216
00:10:39,079 --> 00:10:40,939
turns out we already provide facilities

217
00:10:40,939 --> 00:10:43,850
for that I mean you can actually as a

218
00:10:43,850 --> 00:10:46,939
user install NPM packages you can

219
00:10:46,939 --> 00:10:51,470
install typescript on your own personal

220
00:10:51,470 --> 00:10:54,589
terminal for cloud nine so you do NPM

221
00:10:54,589 --> 00:10:57,079
install minor C type scripts it installs

222
00:10:57,079 --> 00:10:59,660
type script on your def instance from

223
00:10:59,660 --> 00:11:02,990
that point you can call tsc to compile

224
00:11:02,990 --> 00:11:05,899
your template file you get either some

225
00:11:05,899 --> 00:11:07,879
errors or a javascript file and then you

226
00:11:07,879 --> 00:11:12,620
can run it so I mean looking at that I

227
00:11:12,620 --> 00:11:16,809
mean we did two things I mean used ace

228
00:11:16,809 --> 00:11:19,939
which is a highly extensible coding

229
00:11:19,939 --> 00:11:22,279
editor you can just use in

230
00:11:22,279 --> 00:11:24,819
returns to extend the JavaScript syntax

231
00:11:24,819 --> 00:11:28,310
the other thing is to use 10pm I mean by

232
00:11:28,310 --> 00:11:32,300
providing mpm access to our users they

233
00:11:32,300 --> 00:11:34,370
are empowered to install these kinds of

234
00:11:34,370 --> 00:11:37,550
packages themselves and I mean this is

235
00:11:37,550 --> 00:11:40,689
principal empowering users to do things

236
00:11:40,689 --> 00:11:44,689
that's what we will be extending now so

237
00:11:44,689 --> 00:11:46,939
I mean cloud nine has been around for a

238
00:11:46,939 --> 00:11:50,209
while and I think now we're at the point

239
00:11:50,209 --> 00:11:51,800
where the community can start making

240
00:11:51,800 --> 00:11:55,309
awesome tools so as of today we're

241
00:11:55,309 --> 00:11:57,230
opening up cloud nine and making it

242
00:11:57,230 --> 00:12:00,110
possible for third parties to extend it

243
00:12:00,110 --> 00:12:04,100
with drone plugins so the online cloud

244
00:12:04,100 --> 00:12:05,809
hosted cloud nine you can extend it with

245
00:12:05,809 --> 00:12:08,600
your own plugins and i'll show you how

246
00:12:08,600 --> 00:12:14,120
to do that so what we want to do is

247
00:12:14,120 --> 00:12:16,069
really make this this fill our situation

248
00:12:16,069 --> 00:12:19,490
for any language and and it would be

249
00:12:19,490 --> 00:12:21,920
great to do that from a perspective of

250
00:12:21,920 --> 00:12:23,569
these compilers to actually build these

251
00:12:23,569 --> 00:12:27,649
compilers like taxi compiler with the

252
00:12:27,649 --> 00:12:31,699
idea in mind of using it in an ID so I

253
00:12:31,699 --> 00:12:33,350
mean there's a lot of these compilers

254
00:12:33,350 --> 00:12:35,540
around already I mean there's types get

255
00:12:35,540 --> 00:12:37,689
on fire there's a coxcomb compiler and

256
00:12:37,689 --> 00:12:41,029
if you can reuse them in our 80's in

257
00:12:41,029 --> 00:12:43,100
some way to extend our ID that would be

258
00:12:43,100 --> 00:12:46,730
really nice so I mean what we would

259
00:12:46,730 --> 00:12:49,850
really like to do is remix our language

260
00:12:49,850 --> 00:12:53,059
tooling I mean we provides a cloud-based

261
00:12:53,059 --> 00:12:56,480
platform we have a nice editor timescape

262
00:12:56,480 --> 00:12:58,160
guys have a nice compiler that can give

263
00:12:58,160 --> 00:13:00,980
you semantic errors can we just remix

264
00:13:00,980 --> 00:13:02,720
those things it may invite what we have

265
00:13:02,720 --> 00:13:05,209
to re-implement that kind of complicated

266
00:13:05,209 --> 00:13:09,860
stuff in our IDE so we'd like to take

267
00:13:09,860 --> 00:13:12,079
these compilers apart and use them in

268
00:13:12,079 --> 00:13:14,509
our tooling and to improve our tooling

269
00:13:14,509 --> 00:13:18,399
to prove improve any kind of tooling and

270
00:13:18,399 --> 00:13:21,679
I mean looking back at the terminal I

271
00:13:21,679 --> 00:13:23,449
mean in the terminal situation things

272
00:13:23,449 --> 00:13:26,420
are simple I mean with one simple

273
00:13:26,420 --> 00:13:28,639
commands you can install type scripts on

274
00:13:28,639 --> 00:13:31,730
a machine just MPM install minor detail

275
00:13:31,730 --> 00:13:34,730
script and you have typed it and again

276
00:13:34,730 --> 00:13:36,200
with one simple command you

277
00:13:36,200 --> 00:13:38,380
can actually run typescript compiler and

278
00:13:38,380 --> 00:13:41,240
get error messages so that gives you

279
00:13:41,240 --> 00:13:44,090
useful information so I mean this

280
00:13:44,090 --> 00:13:47,330
interface is mean drop that simple I

281
00:13:47,330 --> 00:13:49,460
mean if we could use that kind of

282
00:13:49,460 --> 00:13:51,380
interface to extend our ID that would be

283
00:13:51,380 --> 00:13:56,080
great and I'll show you how you can do

284
00:13:56,080 --> 00:13:59,840
something like that so as an example i

285
00:13:59,840 --> 00:14:02,570
made a new typescript plugin for cloud

286
00:14:02,570 --> 00:14:07,700
nine it hosted on github and i'll show

287
00:14:07,700 --> 00:14:18,860
you what it looks like so again this is

288
00:14:18,860 --> 00:14:21,320
a local copy but I mean use my github

289
00:14:21,320 --> 00:14:25,070
page here's cloud nine hosting this

290
00:14:25,070 --> 00:14:29,330
plug-in and so this plug-in has one main

291
00:14:29,330 --> 00:14:32,810
file it declares itself says hey I am

292
00:14:32,810 --> 00:14:34,550
the cloud nine daisuke plugin I'm

293
00:14:34,550 --> 00:14:38,390
written by a Jackson org and I mean the

294
00:14:38,390 --> 00:14:40,250
main thing it does it registers a new

295
00:14:40,250 --> 00:14:43,340
language handler so treasure search

296
00:14:43,340 --> 00:14:44,690
something that handles the tablet

297
00:14:44,690 --> 00:14:48,310
language and this is a worker I mean

298
00:14:48,310 --> 00:14:50,630
these kind of things were working web

299
00:14:50,630 --> 00:14:53,600
workers so if you look at the extra

300
00:14:53,600 --> 00:14:58,280
limitation of the worker it's actually

301
00:14:58,280 --> 00:15:00,410
quite simple I mean I use the typescript

302
00:15:00,410 --> 00:15:05,960
compiler that runs on server so as a

303
00:15:05,960 --> 00:15:08,420
first step to using that compiler that

304
00:15:08,420 --> 00:15:10,490
runs on the server I do npm install

305
00:15:10,490 --> 00:15:13,010
minus d tufflips i mean i do this in

306
00:15:13,010 --> 00:15:21,830
this plugin then as a next step actually

307
00:15:21,830 --> 00:15:24,560
analyze a source code file and get

308
00:15:24,560 --> 00:15:26,510
errors that are inert source code file i

309
00:15:26,510 --> 00:15:32,330
can run type caps tsc run some fancy

310
00:15:32,330 --> 00:15:34,460
regular expressions after that i get

311
00:15:34,460 --> 00:15:38,410
error messages reported in my editor so

312
00:15:38,410 --> 00:15:41,120
there's a tricky bit here are really in

313
00:15:41,120 --> 00:15:42,080
the

314
00:15:42,080 --> 00:15:45,080
that will end all the client-server

315
00:15:45,080 --> 00:15:47,810
communication everything but I mean the

316
00:15:47,810 --> 00:15:50,360
main point is that with just three

317
00:15:50,360 --> 00:15:53,630
things I mean installation bringing the

318
00:15:53,630 --> 00:15:56,600
compiler and regular expressions I have

319
00:15:56,600 --> 00:15:59,380
an interface over this type get compiler

320
00:15:59,380 --> 00:16:01,970
so I mean let me show you how you can

321
00:16:01,970 --> 00:16:06,020
use it so like I said I have this on

322
00:16:06,020 --> 00:16:08,000
github so i mean if i had internet

323
00:16:08,000 --> 00:16:09,800
connection I could like copy paste this

324
00:16:09,800 --> 00:16:14,510
URL instead of copy paste a local URL go

325
00:16:14,510 --> 00:16:17,120
to cloud nine I say tools extension

326
00:16:17,120 --> 00:16:23,270
manager paste this link I'm adding it

327
00:16:23,270 --> 00:16:26,600
and now I have all of a sudden and

328
00:16:26,600 --> 00:16:29,660
editor that actually marks errors in my

329
00:16:29,660 --> 00:16:32,630
type fleet code so this this example

330
00:16:32,630 --> 00:16:34,250
type skate program that a colleague of

331
00:16:34,250 --> 00:16:36,920
mine sent turns out to have all kinds of

332
00:16:36,920 --> 00:16:39,050
errors I mean there's an animal class

333
00:16:39,050 --> 00:16:42,050
and it has the name property I mean

334
00:16:42,050 --> 00:16:45,770
animals don't have names there's a horse

335
00:16:45,770 --> 00:16:47,660
here with something got a number I don't

336
00:16:47,660 --> 00:16:50,570
know where that is and there's some

337
00:16:50,570 --> 00:16:56,960
salmon off okay so I mean this client i

338
00:16:56,960 --> 00:17:00,100
plug in it just costs the surfer runs TC

339
00:17:00,100 --> 00:17:02,780
TC will get some give some errors back

340
00:17:02,780 --> 00:17:05,630
and those are shown in the editor so I

341
00:17:05,630 --> 00:17:08,060
mean this is a very simple principle but

342
00:17:08,060 --> 00:17:09,620
it allows me to reuse an existing

343
00:17:09,620 --> 00:17:15,210
compiler tool to extend my own tooling

344
00:17:15,220 --> 00:17:19,190
so I have a client-side plugin I mean an

345
00:17:19,190 --> 00:17:20,449
extension of cloud nine let's just

346
00:17:20,449 --> 00:17:22,400
hosted on github and it actually does

347
00:17:22,400 --> 00:17:24,170
some server side stuff and I think

348
00:17:24,170 --> 00:17:26,240
that's pretty amazing I mean that's

349
00:17:26,240 --> 00:17:29,150
really powerful I mean you can do about

350
00:17:29,150 --> 00:17:30,770
client-side and server-side things like

351
00:17:30,770 --> 00:17:32,690
that now I mean of course this is a

352
00:17:32,690 --> 00:17:37,250
proof of concept I mean TRC is written

353
00:17:37,250 --> 00:17:39,650
in typescript hosted on JavaScript I

354
00:17:39,650 --> 00:17:42,380
could use it run that in the client in

355
00:17:42,380 --> 00:17:44,150
this proof-of-concept I'm just doing it

356
00:17:44,150 --> 00:17:46,430
on the server side just because it's out

357
00:17:46,430 --> 00:17:47,960
drop that simple to run it from the

358
00:17:47,960 --> 00:17:52,100
command line and I mean there's all

359
00:17:52,100 --> 00:17:54,350
kinds of languages with linters that you

360
00:17:54,350 --> 00:17:57,399
can invoke in a similar way

361
00:17:57,399 --> 00:17:59,600
there's language with compilers with

362
00:17:59,600 --> 00:18:02,119
that you can invoke in a similar way so

363
00:18:02,119 --> 00:18:04,999
I applied the same principle of running

364
00:18:04,999 --> 00:18:06,559
type script on the server to some other

365
00:18:06,559 --> 00:18:09,950
languages I mean I applied it to PHP so

366
00:18:09,950 --> 00:18:12,200
I ran the built in PHP linter on the

367
00:18:12,200 --> 00:18:14,499
server and all of the sudden in my

368
00:18:14,499 --> 00:18:18,590
editor i get errors for PSP I run

369
00:18:18,590 --> 00:18:21,320
confident like this and i also do i get

370
00:18:21,320 --> 00:18:25,659
new errors for coffee script so I mean

371
00:18:25,659 --> 00:18:28,279
how can it be that it's so simple to

372
00:18:28,279 --> 00:18:30,739
invoke a command-line tool and get

373
00:18:30,739 --> 00:18:33,830
results in your editor and and F out of

374
00:18:33,830 --> 00:18:36,220
certain more extensive tool supports I

375
00:18:36,220 --> 00:18:38,690
mean if you if you look at it from a

376
00:18:38,690 --> 00:18:41,320
distance I mean a command-line tool

377
00:18:41,320 --> 00:18:43,759
there's this really three things to it I

378
00:18:43,759 --> 00:18:47,210
mean first you tell it what to do you

379
00:18:47,210 --> 00:18:49,009
give it some input you give it a source

380
00:18:49,009 --> 00:18:53,119
text and it returns a result so I mean

381
00:18:53,119 --> 00:18:54,349
what you have there really is a

382
00:18:54,349 --> 00:18:57,169
functional interface I mean it's a

383
00:18:57,169 --> 00:18:58,789
function that you give some input and

384
00:18:58,789 --> 00:19:01,099
its resident eaters and outputs you

385
00:19:01,099 --> 00:19:02,599
don't care how it does that you don't

386
00:19:02,599 --> 00:19:04,639
care about all the internals how how

387
00:19:04,639 --> 00:19:05,840
they implemented the type of kid

388
00:19:05,840 --> 00:19:09,019
compiler so I mean functional interface

389
00:19:09,019 --> 00:19:13,309
are great I mean again talk tomorrow

390
00:19:13,309 --> 00:19:15,649
about functional interfaces but

391
00:19:15,649 --> 00:19:18,950
functional programming and functional

392
00:19:18,950 --> 00:19:20,509
interfaces allow you to think of

393
00:19:20,509 --> 00:19:22,849
components as a black box you don't care

394
00:19:22,849 --> 00:19:25,789
what happens inside you don't allow them

395
00:19:25,789 --> 00:19:28,729
to mutate any data you just give them

396
00:19:28,729 --> 00:19:30,679
some input source text and it will

397
00:19:30,679 --> 00:19:36,889
return output results so we can use this

398
00:19:36,889 --> 00:19:39,019
to call compilers on the server and get

399
00:19:39,019 --> 00:19:41,659
some errors but we'd like to extend this

400
00:19:41,659 --> 00:19:46,099
to other things so this is why we

401
00:19:46,099 --> 00:19:48,109
designed a functional interface for

402
00:19:48,109 --> 00:19:53,229
extensions for language components and

403
00:19:53,229 --> 00:19:55,909
if you look closely at the example I

404
00:19:55,909 --> 00:19:58,159
gave for of this type get broken there's

405
00:19:58,159 --> 00:20:00,889
a couple of key functions to it I mean

406
00:20:00,889 --> 00:20:03,200
one of the main function is the handles

407
00:20:03,200 --> 00:20:04,909
language function it gets a language

408
00:20:04,909 --> 00:20:07,489
name and returns a boolean so it will

409
00:20:07,489 --> 00:20:09,680
tell you just this plug-in handle

410
00:20:09,680 --> 00:20:12,200
this language there's other functions

411
00:20:12,200 --> 00:20:15,080
like parse it will get a program text in

412
00:20:15,080 --> 00:20:19,730
it returns a tree data structure there's

413
00:20:19,730 --> 00:20:21,920
functions like analyze and show an

414
00:20:21,920 --> 00:20:23,720
outline and complete I mean these are

415
00:20:23,720 --> 00:20:27,080
all functions so I mean the key idea

416
00:20:27,080 --> 00:20:29,690
here is that every surface every

417
00:20:29,690 --> 00:20:31,220
component is described by a single

418
00:20:31,220 --> 00:20:36,230
function and these functions and flee

419
00:20:36,230 --> 00:20:39,980
interface that technology agnostic so we

420
00:20:39,980 --> 00:20:41,750
don't care what you use in your black

421
00:20:41,750 --> 00:20:44,420
box we don't care what kind of partner

422
00:20:44,420 --> 00:20:47,390
technology use now it's actually a great

423
00:20:47,390 --> 00:20:50,410
academic paper written on this topic at

424
00:20:50,410 --> 00:20:53,570
oopsla a couple years ago by pop yer

425
00:20:53,570 --> 00:20:56,120
Philip Charles and others like that you

426
00:20:56,120 --> 00:20:57,530
should read up alone if you want to know

427
00:20:57,530 --> 00:21:03,980
more about this stuff so I want to give

428
00:21:03,980 --> 00:21:06,590
you a sort of overview of how you can

429
00:21:06,590 --> 00:21:09,110
implement one of these functions I want

430
00:21:09,110 --> 00:21:10,850
to give up go into details here but I

431
00:21:10,850 --> 00:21:14,750
want to give you some pointers so I mean

432
00:21:14,750 --> 00:21:18,170
the main thing you have to realize it's

433
00:21:18,170 --> 00:21:20,260
compilers consists of many components

434
00:21:20,260 --> 00:21:23,180
but if you want to provide re tooling

435
00:21:23,180 --> 00:21:24,590
the most important components are

436
00:21:24,590 --> 00:21:28,640
departure and the analyzer so what the

437
00:21:28,640 --> 00:21:30,590
parser does it gets some source code

438
00:21:30,590 --> 00:21:35,060
text and it returns in FX index 3 so do

439
00:21:35,060 --> 00:21:37,040
turns in structured representation of

440
00:21:37,040 --> 00:21:41,480
source code text what the analyzer does

441
00:21:41,480 --> 00:21:43,940
it gets this f6 index 3 distribute

442
00:21:43,940 --> 00:21:46,430
reputation and it gives you some kind of

443
00:21:46,430 --> 00:21:48,440
feedback so this feedback can be in

444
00:21:48,440 --> 00:21:51,800
terms of errors I mean there's an error

445
00:21:51,800 --> 00:21:54,350
here in your program it can also be in

446
00:21:54,350 --> 00:21:57,830
terms of hey your cursor is here and I

447
00:21:57,830 --> 00:21:59,960
can provide you these completion

448
00:21:59,960 --> 00:22:06,020
suggestions so there are analyzer

449
00:22:06,020 --> 00:22:07,490
components that can do all these kinds

450
00:22:07,490 --> 00:22:11,030
of edit or things and I mean if you go

451
00:22:11,030 --> 00:22:12,760
about implementing something like this

452
00:22:12,760 --> 00:22:15,620
my advice is really to reuse existing

453
00:22:15,620 --> 00:22:20,890
tueller tooling wherever you can

454
00:22:20,900 --> 00:22:27,960
bali staff so that's exactly what we did

455
00:22:27,960 --> 00:22:30,390
for cloud nine to support javascript we

456
00:22:30,390 --> 00:22:32,460
didn't go about write their own

457
00:22:32,460 --> 00:22:34,470
JavaScript parser I mean we looked

458
00:22:34,470 --> 00:22:37,500
around what people wrote to write

459
00:22:37,500 --> 00:22:39,480
JavaScript and it turned out there were

460
00:22:39,480 --> 00:22:41,130
already plenty of the African partners

461
00:22:41,130 --> 00:22:43,800
so we did some performance benchmarks at

462
00:22:43,800 --> 00:22:47,700
the time we came to okla phi j s i think

463
00:22:47,700 --> 00:22:49,260
right now the most performance

464
00:22:49,260 --> 00:22:53,070
JavaScript parts where is s prima but I

465
00:22:53,070 --> 00:22:54,450
mean we didn't fight around parser I

466
00:22:54,450 --> 00:22:56,040
mean we just use these existing

467
00:22:56,040 --> 00:22:58,350
components it's open source and we

468
00:22:58,350 --> 00:23:02,070
remixed it in our tooling so another

469
00:23:02,070 --> 00:23:06,120
piece of advice try not to build these

470
00:23:06,120 --> 00:23:08,940
things with your hands I mean there's

471
00:23:08,940 --> 00:23:10,500
tooling for building these kinds of

472
00:23:10,500 --> 00:23:12,900
components there are libraries for

473
00:23:12,900 --> 00:23:16,200
making parsers for making analyzers use

474
00:23:16,200 --> 00:23:19,620
them so the interesting thing about this

475
00:23:19,620 --> 00:23:21,000
particular picture is that about right

476
00:23:21,000 --> 00:23:28,800
hands that's useful so there's reusable

477
00:23:28,800 --> 00:23:30,330
language tooling I mean there are

478
00:23:30,330 --> 00:23:32,700
existing parts out there that you can

479
00:23:32,700 --> 00:23:35,340
use their part is written in JavaScript

480
00:23:35,340 --> 00:23:38,040
for many languages there are partial

481
00:23:38,040 --> 00:23:40,440
generators out there there are so many

482
00:23:40,440 --> 00:23:43,680
already that target JavaScript that you

483
00:23:43,680 --> 00:23:46,080
can give a language description and they

484
00:23:46,080 --> 00:23:48,470
will make a parser written in JavaScript

485
00:23:48,470 --> 00:23:51,510
other in our analysis frameworks that

486
00:23:51,510 --> 00:23:54,450
you can use I mean using these

487
00:23:54,450 --> 00:23:55,770
components to build your own language

488
00:23:55,770 --> 00:23:58,920
tooling can help you so much make you be

489
00:23:58,920 --> 00:24:01,170
so much for more productive I mean don't

490
00:24:01,170 --> 00:24:05,490
do this from scratch so one particular

491
00:24:05,490 --> 00:24:07,290
component to use a cloud nine is called

492
00:24:07,290 --> 00:24:10,710
treehugger GA s so treehugger Jas is a

493
00:24:10,710 --> 00:24:14,040
library used to make these kinds of

494
00:24:14,040 --> 00:24:18,210
analyzers I mean it gets an input AST

495
00:24:18,210 --> 00:24:20,580
from any partial it doesn't really care

496
00:24:20,580 --> 00:24:22,770
about the format but it will help you

497
00:24:22,770 --> 00:24:27,270
write analyses on these asds so I mean

498
00:24:27,270 --> 00:24:29,280
next time you write one of these

499
00:24:29,280 --> 00:24:30,960
compilers you can use these kinds of

500
00:24:30,960 --> 00:24:32,280
components

501
00:24:32,280 --> 00:24:35,580
and make your life simpler and I think

502
00:24:35,580 --> 00:24:38,550
if I look at a time scale vampire it's

503
00:24:38,550 --> 00:24:40,230
really an excellent piece of engineering

504
00:24:40,230 --> 00:24:43,440
work if you look at CoffeeScript I mean

505
00:24:43,440 --> 00:24:45,840
there's nowadays Kickstarter projects of

506
00:24:45,840 --> 00:24:48,870
someone who says now let's start off

507
00:24:48,870 --> 00:24:51,560
with JavaScript and redo it with proper

508
00:24:51,560 --> 00:24:55,320
compiler and sneering techniques in that

509
00:24:55,320 --> 00:24:59,880
may help anyway so my message is

510
00:24:59,880 --> 00:25:02,910
described each of these surfaces each of

511
00:25:02,910 --> 00:25:04,740
these components in capara very single

512
00:25:04,740 --> 00:25:06,780
function that will make it much easier

513
00:25:06,780 --> 00:25:09,540
to implement it to integrate it into all

514
00:25:09,540 --> 00:25:12,570
kinds of tooling and for tooling vendors

515
00:25:12,570 --> 00:25:14,820
main support these kinds of functional

516
00:25:14,820 --> 00:25:16,590
interfaces to make it easier to

517
00:25:16,590 --> 00:25:18,720
integrate other components into your

518
00:25:18,720 --> 00:25:24,150
tooling another part of my message I

519
00:25:24,150 --> 00:25:27,750
mean we're opening a cloud nine we're

520
00:25:27,750 --> 00:25:29,910
allowing you to host your plugins on

521
00:25:29,910 --> 00:25:32,850
github and put them in the extension

522
00:25:32,850 --> 00:25:36,890
manager next year we'll have a nice

523
00:25:36,890 --> 00:25:40,650
extension store UI for that right now

524
00:25:40,650 --> 00:25:42,630
we're opening it to up to developers who

525
00:25:42,630 --> 00:25:44,940
want to experiment with this and I'll

526
00:25:44,940 --> 00:25:50,270
build a community around this so I mean

527
00:25:50,270 --> 00:25:53,040
this was remade sure language tooling

528
00:25:53,040 --> 00:25:55,410
and Leonard cuts i remixed my own name

529
00:25:55,410 --> 00:25:57,870
into things like github and Twitter and

530
00:25:57,870 --> 00:26:04,470
the interwebs so any questions first of

531
00:26:04,470 --> 00:26:05,820
all maybe its first of all round of

532
00:26:05,820 --> 00:26:13,680
applause lessons

533
00:26:13,690 --> 00:26:22,549
any questions yes so you told us that

534
00:26:22,549 --> 00:26:26,090
your analyzer used abstract syntax tree

535
00:26:26,090 --> 00:26:28,370
to give advice which you also told your

536
00:26:28,370 --> 00:26:30,230
curses at this position so does it mean

537
00:26:30,230 --> 00:26:33,019
that the analyzer also gets the current

538
00:26:33,019 --> 00:26:35,149
context or the editor house they make

539
00:26:35,149 --> 00:26:38,899
possible so the main thing we try to do

540
00:26:38,899 --> 00:26:42,039
is be technology agnostic so we cannot

541
00:26:42,039 --> 00:26:45,139
we do not want to know too much about

542
00:26:45,139 --> 00:26:48,830
particular partially use but from an IT

543
00:26:48,830 --> 00:26:50,990
perspective we do know the cursor is at

544
00:26:50,990 --> 00:26:53,960
this position so we can call a function

545
00:26:53,960 --> 00:26:57,350
that tells us at this position what kind

546
00:26:57,350 --> 00:27:00,889
of ast node is there it will give us an

547
00:27:00,889 --> 00:27:02,869
AC note which is a no prob we actually

548
00:27:02,869 --> 00:27:04,009
don't know anything about that via

549
00:27:04,009 --> 00:27:06,230
technology agnostic and we pass that to

550
00:27:06,230 --> 00:27:07,909
the analyzer and then the analyzer can

551
00:27:07,909 --> 00:27:09,499
tell us what completions are at that

552
00:27:09,499 --> 00:27:16,070
node any other questions all right

