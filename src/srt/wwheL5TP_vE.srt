1
00:00:15,340 --> 00:00:17,380

so today I'm going to be talking only

2
00:00:17,380 --> 00:00:20,050
about iced coffee script tame j/s though

3
00:00:20,050 --> 00:00:22,270
the same thing really it's just a

4
00:00:22,270 --> 00:00:27,040
different flavor of these ideas ok so I

5
00:00:27,040 --> 00:00:29,500
have three major goals today first is I

6
00:00:29,500 --> 00:00:31,690
want to convince everyone that that

7
00:00:31,690 --> 00:00:33,129
there is a problem to be solved because

8
00:00:33,129 --> 00:00:35,320
there's a little bit of debate on that

9
00:00:35,320 --> 00:00:37,330
point and then once we've agreed that

10
00:00:37,330 --> 00:00:38,830
there's a problem I want to talk about

11
00:00:38,830 --> 00:00:41,559
the types of solutions or the specs of

12
00:00:41,559 --> 00:00:43,930
the solution and also show you a little

13
00:00:43,930 --> 00:00:45,879
bit about iced coffee script and how it

14
00:00:45,879 --> 00:00:50,800
meets the spec of the respect to solve

15
00:00:50,800 --> 00:00:54,040
the problem ok so I'm going to jump a

16
00:00:54,040 --> 00:00:55,660
little bit between like browser code in

17
00:00:55,660 --> 00:00:59,350
nodejs code but it's everything works in

18
00:00:59,350 --> 00:01:02,290
both cases so is everyone someone

19
00:01:02,290 --> 00:01:03,700
familiar with coffee script can you guys

20
00:01:03,700 --> 00:01:05,710
read this ok I'm trying not to get too

21
00:01:05,710 --> 00:01:07,630
deep into like the really need agree

22
00:01:07,630 --> 00:01:09,310
features this is just a function

23
00:01:09,310 --> 00:01:11,289
definition an iced coffee script and

24
00:01:11,289 --> 00:01:13,420
it's doing this it's trying to take a

25
00:01:13,420 --> 00:01:15,280
term if you're choosing and to do a

26
00:01:15,280 --> 00:01:18,880
query in de quitter sorry to query

27
00:01:18,880 --> 00:01:21,580
Twitter's JSON API to get there were

28
00:01:21,580 --> 00:01:24,069
like some search like Jay us coffee you

29
00:01:24,069 --> 00:01:26,740
or whatever and then it's going to use

30
00:01:26,740 --> 00:01:30,160
the jQuery JSON p library and when it

31
00:01:30,160 --> 00:01:31,810
has a result it's going to just call a

32
00:01:31,810 --> 00:01:33,399
call back with you the results or maybe

33
00:01:33,399 --> 00:01:35,619
know if it failed so you might be

34
00:01:35,619 --> 00:01:38,200
looking at this and say well I know this

35
00:01:38,200 --> 00:01:41,289
is a regular type of coffee script or

36
00:01:41,289 --> 00:01:42,580
JavaScript flow where the codes starting

37
00:01:42,580 --> 00:01:43,959
on the upper left and going to the lower

38
00:01:43,959 --> 00:01:45,970
right it's not that big a deal right

39
00:01:45,970 --> 00:01:48,250
this is you know this is your code

40
00:01:48,250 --> 00:01:50,110
pyramid and it's I don't know it's

41
00:01:50,110 --> 00:01:52,030
everything's flipped in this in terms of

42
00:01:52,030 --> 00:01:55,509
the black and white so that's supposed

43
00:01:55,509 --> 00:01:57,160
to be the Pyramid in Egypt with the

44
00:01:57,160 --> 00:01:58,810
Sphinx in front of it so that's like the

45
00:01:58,810 --> 00:02:01,239
code of debt the pyramid of death so

46
00:02:01,239 --> 00:02:02,770
this problem is manageable you can deal

47
00:02:02,770 --> 00:02:05,590
with it the question though is what

48
00:02:05,590 --> 00:02:07,170
happens when you start building real

49
00:02:07,170 --> 00:02:10,030
more interesting programs with that type

50
00:02:10,030 --> 00:02:12,489
of call in the middle of it and so

51
00:02:12,489 --> 00:02:14,349
here's an example of something I wrote

52
00:02:14,349 --> 00:02:16,420
to show a table of items so you can

53
00:02:16,420 --> 00:02:18,459
imagine I have an array of 20 items

54
00:02:18,459 --> 00:02:20,800
let's say and I wrote a little loop and

55
00:02:20,800 --> 00:02:23,200
that this is fine this code works okay

56
00:02:23,200 --> 00:02:26,079
for each item in the list it's going to

57
00:02:26,079 --> 00:02:27,489
go through and write the item out to

58
00:02:27,489 --> 00:02:28,780
your browser and if

59
00:02:28,780 --> 00:02:30,400
the if there's enough room on the line

60
00:02:30,400 --> 00:02:32,680
like if it's like a small word then

61
00:02:32,680 --> 00:02:34,000
there's room to show an ad so we could

62
00:02:34,000 --> 00:02:35,800
show an ad there and then go to the next

63
00:02:35,800 --> 00:02:38,709
row so this works fine but let's say we

64
00:02:38,709 --> 00:02:40,740
decide to make a change to our code

65
00:02:40,740 --> 00:02:42,880
instead of just showing the ad we want

66
00:02:42,880 --> 00:02:45,730
to make the application more better for

67
00:02:45,730 --> 00:02:47,080
our users and we want to actually show

68
00:02:47,080 --> 00:02:49,480
the result of a Twitter search where

69
00:02:49,480 --> 00:02:52,270
that ad used to be displayed so now if

70
00:02:52,270 --> 00:02:54,010
you recall in the first slide I showed

71
00:02:54,010 --> 00:02:58,090
you a search function and the second

72
00:02:58,090 --> 00:02:59,920
parameter of that search function was

73
00:02:59,920 --> 00:03:01,690
the callback that search was supposed to

74
00:03:01,690 --> 00:03:04,120
call when it's done with its computation

75
00:03:04,120 --> 00:03:06,550
right and so I just wanted to swap that

76
00:03:06,550 --> 00:03:08,980
in from my showing the ad but I've no

77
00:03:08,980 --> 00:03:10,570
idea what to put in place of the

78
00:03:10,570 --> 00:03:12,850
question marks and really what I put

79
00:03:12,850 --> 00:03:15,280
there is this horrible realization that

80
00:03:15,280 --> 00:03:18,550
I have to rewrite my code so I'm not

81
00:03:18,550 --> 00:03:20,050
going to rewrite this function but if

82
00:03:20,050 --> 00:03:21,940
you were to rewrite it and do it the

83
00:03:21,940 --> 00:03:23,709
right way you would totally change your

84
00:03:23,709 --> 00:03:25,390
while loop into something that look

85
00:03:25,390 --> 00:03:27,250
nothing like a lot of it whatsoever so

86
00:03:27,250 --> 00:03:29,530
we'd have a crazy callback pyramid of

87
00:03:29,530 --> 00:03:31,510
death and at the bottom of it you'd call

88
00:03:31,510 --> 00:03:33,820
your callback so just imagine I went

89
00:03:33,820 --> 00:03:36,010
ahead and did that but now we go one

90
00:03:36,010 --> 00:03:38,049
layer up right and so what's happening

91
00:03:38,049 --> 00:03:40,090
to this the code that actually call this

92
00:03:40,090 --> 00:03:42,310
show table function well just imagine

93
00:03:42,310 --> 00:03:44,380
it's a function that writes a whole page

94
00:03:44,380 --> 00:03:46,510
so the first thing it will do is it will

95
00:03:46,510 --> 00:03:49,540
show a header and maybe has a left bar

96
00:03:49,540 --> 00:03:51,250
and on the left bar it'll show this

97
00:03:51,250 --> 00:03:53,079
awesome table it'll show a main page and

98
00:03:53,079 --> 00:03:54,880
maybe it has a right bar and on the

99
00:03:54,880 --> 00:03:56,230
right part I'll show this awesome table

100
00:03:56,230 --> 00:03:58,959
and then we'll show a footer okay well

101
00:03:58,959 --> 00:04:00,340
that was show table the first time I

102
00:04:00,340 --> 00:04:02,739
wrote it what happens if we change it so

103
00:04:02,739 --> 00:04:05,260
again show table has now been changed so

104
00:04:05,260 --> 00:04:07,299
after it's done its computation it's

105
00:04:07,299 --> 00:04:08,890
going to call its call back back so I

106
00:04:08,890 --> 00:04:10,450
actually rewrote this and just to show

107
00:04:10,450 --> 00:04:12,070
you what this very simple five line

108
00:04:12,070 --> 00:04:14,400
program looks like it changed into this

109
00:04:14,400 --> 00:04:18,220
and I don't think there are any bugs in

110
00:04:18,220 --> 00:04:20,200
there but i don't really know and i

111
00:04:20,200 --> 00:04:21,760
could have easily left out one of the

112
00:04:21,760 --> 00:04:23,770
branches so i'm sure everyone's familiar

113
00:04:23,770 --> 00:04:25,630
with this type of thing right and then

114
00:04:25,630 --> 00:04:29,289
it's all well sorry that's three turtles

115
00:04:29,289 --> 00:04:31,810
on top of each other so it's Turtles all

116
00:04:31,810 --> 00:04:34,630
the way down so you keep doing this all

117
00:04:34,630 --> 00:04:36,940
the way up your stack and you have to

118
00:04:36,940 --> 00:04:38,110
rewrite your whole program just because

119
00:04:38,110 --> 00:04:39,430
you want to change one inner function

120
00:04:39,430 --> 00:04:41,950
and if this sort of thing is interesting

121
00:04:41,950 --> 00:04:42,580
to you there

122
00:04:42,580 --> 00:04:44,169
our other great activities you can

123
00:04:44,169 --> 00:04:46,449
consider like hand factoring large

124
00:04:46,449 --> 00:04:48,699
numbers hanoverian large matrices in

125
00:04:48,699 --> 00:04:51,580
hand assembling x86 code so there is a

126
00:04:51,580 --> 00:04:54,550
problem here and that in a very simple

127
00:04:54,550 --> 00:04:56,680
JavaScript case that shows up all the

128
00:04:56,680 --> 00:04:58,629
time on the browser or nodejs we're

129
00:04:58,629 --> 00:04:59,949
asking humans to do the job that

130
00:04:59,949 --> 00:05:02,289
compilers ought to be doing so I think

131
00:05:02,289 --> 00:05:05,129
we all can agree that that's not a great

132
00:05:05,129 --> 00:05:10,240
state of affairs okay so I want to talk

133
00:05:10,240 --> 00:05:12,490
about how to solve this problem so the

134
00:05:12,490 --> 00:05:13,719
first thing we need to do is what I just

135
00:05:13,719 --> 00:05:15,400
described we need to find a way to do an

136
00:05:15,400 --> 00:05:17,979
automatic continuously continuation

137
00:05:17,979 --> 00:05:21,639
passing style conversion and that's what

138
00:05:21,639 --> 00:05:24,129
I just was describing the problem as and

139
00:05:24,129 --> 00:05:26,770
you and we'll talk about what that means

140
00:05:26,770 --> 00:05:27,969
but there's really three other

141
00:05:27,969 --> 00:05:30,940
requirements do that we need since we're

142
00:05:30,940 --> 00:05:32,229
going to be changing the language or

143
00:05:32,229 --> 00:05:34,180
adding a features to the language we

144
00:05:34,180 --> 00:05:36,099
want to employ an economy of mechanism

145
00:05:36,099 --> 00:05:38,080
I'll go over that in the next couple

146
00:05:38,080 --> 00:05:39,639
slides we want to be backwards

147
00:05:39,639 --> 00:05:41,169
compatible obviously so we could use it

148
00:05:41,169 --> 00:05:42,699
in as many places as possible and

149
00:05:42,699 --> 00:05:44,169
finally we don't want to sacrifice the

150
00:05:44,169 --> 00:05:47,590
power that Jas is giving us so I'll go

151
00:05:47,590 --> 00:05:49,990
over all three of these in more detail

152
00:05:49,990 --> 00:05:52,210
so what do I mean by economy of

153
00:05:52,210 --> 00:05:54,069
mechanism so if you look at javascript

154
00:05:54,069 --> 00:05:55,750
or you if you look at iced coffee script

155
00:05:55,750 --> 00:05:57,669
you already have these great tools you

156
00:05:57,669 --> 00:06:00,190
have like if else and for while and you

157
00:06:00,190 --> 00:06:01,360
don't want to get rid of those you don't

158
00:06:01,360 --> 00:06:03,099
want to like replace those with this new

159
00:06:03,099 --> 00:06:04,960
library that's trying to do what these

160
00:06:04,960 --> 00:06:07,120
things already do for you so you want to

161
00:06:07,120 --> 00:06:08,560
keep those great mechanisms and if

162
00:06:08,560 --> 00:06:10,599
possible add a few new keywords as

163
00:06:10,599 --> 00:06:13,360
possible so in this case I say only a

164
00:06:13,360 --> 00:06:16,000
two at most you don't want to make the

165
00:06:16,000 --> 00:06:17,319
language fat with all those features

166
00:06:17,319 --> 00:06:21,219
that sometimes you don't even need like

167
00:06:21,219 --> 00:06:22,839
compatibility with all ap is and

168
00:06:22,839 --> 00:06:26,199
libraries you can javascript has

169
00:06:26,199 --> 00:06:27,520
obviously been around for a while in

170
00:06:27,520 --> 00:06:29,500
lots of different contexts and there's

171
00:06:29,500 --> 00:06:31,599
very little agreement among people who

172
00:06:31,599 --> 00:06:33,550
write libraries or JavaScript engines as

173
00:06:33,550 --> 00:06:36,669
to you know what a callback is supposed

174
00:06:36,669 --> 00:06:37,870
to look like this is supposed to be the

175
00:06:37,870 --> 00:06:40,719
first or the second parameter and what

176
00:06:40,719 --> 00:06:42,129
are the parameters to that callback and

177
00:06:42,129 --> 00:06:44,289
so here are three examples that all seem

178
00:06:44,289 --> 00:06:45,849
to be at odds with each other just a set

179
00:06:45,849 --> 00:06:48,099
timeout function that everyone uses and

180
00:06:48,099 --> 00:06:50,469
there's the jQuery get json call and if

181
00:06:50,469 --> 00:06:52,209
you look at that the callback is the

182
00:06:52,209 --> 00:06:54,159
third parameter but the data comes first

183
00:06:54,159 --> 00:06:56,110
and then the status and then finally the

184
00:06:56,110 --> 00:06:56,500
third

185
00:06:56,500 --> 00:06:59,410
example is the request package the node

186
00:06:59,410 --> 00:07:02,620
package written and that's the most

187
00:07:02,620 --> 00:07:05,980
popular node package and NPM and you

188
00:07:05,980 --> 00:07:07,840
could see there the error comes first

189
00:07:07,840 --> 00:07:09,520
and then the response and the callback

190
00:07:09,520 --> 00:07:12,010
so obviously whatever we do to to

191
00:07:12,010 --> 00:07:15,160
address this some CPS conversion we

192
00:07:15,160 --> 00:07:16,870
can't take for granted that callbacks

193
00:07:16,870 --> 00:07:18,880
happened in in a particular place and

194
00:07:18,880 --> 00:07:21,070
that the error is a particular place

195
00:07:21,070 --> 00:07:24,430
within the callback and also i mean we

196
00:07:24,430 --> 00:07:25,450
want some solution work with all

197
00:07:25,450 --> 00:07:32,500
runtimes so v8 spider monkey and we also

198
00:07:32,500 --> 00:07:34,419
wanted to work on the browser and so the

199
00:07:34,419 --> 00:07:35,800
only way to do that is with source of

200
00:07:35,800 --> 00:07:41,169
source translation and I mean coffee

201
00:07:41,169 --> 00:07:42,720
script is such a natural case for a

202
00:07:42,720 --> 00:07:45,040
sorry I language for this because

203
00:07:45,040 --> 00:07:46,900
already doing translation as it is the

204
00:07:46,900 --> 00:07:47,890
question is can we just add a couple

205
00:07:47,890 --> 00:07:50,110
more translations to to get the features

206
00:07:50,110 --> 00:07:53,080
we want and the last point is a little

207
00:07:53,080 --> 00:07:56,050
bit it's subtle but you could do a lot

208
00:07:56,050 --> 00:07:57,190
of really cool things now with

209
00:07:57,190 --> 00:07:58,750
hand-rolled javascript right you could

210
00:07:58,750 --> 00:08:01,180
very easily fire multiple parallel calls

211
00:08:01,180 --> 00:08:03,340
and get answers back whenever you want

212
00:08:03,340 --> 00:08:05,560
to you can do things like you could have

213
00:08:05,560 --> 00:08:08,020
both on the browser and a note you could

214
00:08:08,020 --> 00:08:09,160
do things like even more complicated

215
00:08:09,160 --> 00:08:11,620
like pipeline flows what I call and so

216
00:08:11,620 --> 00:08:13,360
that means let's see have a list of 100

217
00:08:13,360 --> 00:08:14,979
requests to make and you only want by

218
00:08:14,979 --> 00:08:16,960
with them to be outstanding at once you

219
00:08:16,960 --> 00:08:19,150
could do that in with JavaScript and

220
00:08:19,150 --> 00:08:22,090
it's a little bit it's a little bit

221
00:08:22,090 --> 00:08:23,350
complicated but it's definitely possible

222
00:08:23,350 --> 00:08:24,940
and finally you can do interesting

223
00:08:24,940 --> 00:08:27,190
things like short circuiting slow

224
00:08:27,190 --> 00:08:29,410
operations and you can have functions

225
00:08:29,410 --> 00:08:31,630
that do background work like a call or

226
00:08:31,630 --> 00:08:33,099
call back first and then they do some

227
00:08:33,099 --> 00:08:34,570
other stuff so these are all great

228
00:08:34,570 --> 00:08:36,099
features of JavaScript that we do not

229
00:08:36,099 --> 00:08:38,260
want to delete we want to eat we want to

230
00:08:38,260 --> 00:08:40,180
preserve them and a javascript in

231
00:08:40,180 --> 00:08:42,640
CoffeeScript so we want to preserve

232
00:08:42,640 --> 00:08:46,720
these in our new language okay so just

233
00:08:46,720 --> 00:08:50,110
to give you a preview of what i'm going

234
00:08:50,110 --> 00:08:52,200
to show you about iced coffee script

235
00:08:52,200 --> 00:08:55,420
here's my example where remember we flip

236
00:08:55,420 --> 00:08:57,100
the whole function I'm sorry we flip the

237
00:08:57,100 --> 00:08:59,920
whole function upside down we didn't

238
00:08:59,920 --> 00:09:02,140
know what to put there to preserve the

239
00:09:02,140 --> 00:09:04,510
the structure of the code we had and

240
00:09:04,510 --> 00:09:07,959
with iced coffee script really we can

241
00:09:07,959 --> 00:09:09,440
preserve everything

242
00:09:09,440 --> 00:09:11,750
and just make a small change and keep

243
00:09:11,750 --> 00:09:14,030
going on our merry way so I'm going to

244
00:09:14,030 --> 00:09:17,390
tell you exactly how this works okay so

245
00:09:17,390 --> 00:09:19,700
I starts with regular coffee script and

246
00:09:19,700 --> 00:09:23,150
just adds two new keywords the first is

247
00:09:23,150 --> 00:09:25,960
defer it's a lot like a regular function

248
00:09:25,960 --> 00:09:28,340
but it has some special features so it

249
00:09:28,340 --> 00:09:30,620
has to be a keyword and the second is

250
00:09:30,620 --> 00:09:32,630
this the weight keyword which alters

251
00:09:32,630 --> 00:09:34,370
control of your program so it's a lot

252
00:09:34,370 --> 00:09:36,110
like four or if where it's actually

253
00:09:36,110 --> 00:09:37,910
going to change the way your program

254
00:09:37,910 --> 00:09:44,020
runs okay so first I'll talk about defer

255
00:09:44,020 --> 00:09:46,610
alderfer really does is it makes a

256
00:09:46,610 --> 00:09:48,680
callback for you so you call defer

257
00:09:48,680 --> 00:09:51,230
return so you'll call back and as usual

258
00:09:51,230 --> 00:09:52,790
once you have that callback you can do

259
00:09:52,790 --> 00:09:54,620
it ever you want with it so in this case

260
00:09:54,620 --> 00:09:57,590
you can pass it to a collie function the

261
00:09:57,590 --> 00:09:59,180
Kali will do whatever it has to do and

262
00:09:59,180 --> 00:10:00,800
when it's done it'll call its call back

263
00:10:00,800 --> 00:10:03,200
it'll tell the caller that you can now

264
00:10:03,200 --> 00:10:06,590
proceed so defer is a function that

265
00:10:06,590 --> 00:10:10,460
returns a callback and defer works very

266
00:10:10,460 --> 00:10:12,230
well with this other keyword called oh

267
00:10:12,230 --> 00:10:15,560
wait and here's what a wait does it's a

268
00:10:15,560 --> 00:10:18,650
block of code so on a given example here

269
00:10:18,650 --> 00:10:22,550
and control enter z wait block and it

270
00:10:22,550 --> 00:10:25,460
executes every last line of code as

271
00:10:25,460 --> 00:10:27,410
normal but it waits at the very end of

272
00:10:27,410 --> 00:10:30,020
the block before proceeding and what's

273
00:10:30,020 --> 00:10:32,120
it going to wait for well in this case

274
00:10:32,120 --> 00:10:35,630
our weight block has an unknown number

275
00:10:35,630 --> 00:10:38,180
of defers depending on whatever code is

276
00:10:38,180 --> 00:10:40,400
it we know whatever the value of x is

277
00:10:40,400 --> 00:10:42,350
and whenever the value of y is but let's

278
00:10:42,350 --> 00:10:44,870
say you enter that if statement and you

279
00:10:44,870 --> 00:10:46,580
go through the while loop three times so

280
00:10:46,580 --> 00:10:49,280
you'll have made for defers so control

281
00:10:49,280 --> 00:10:51,350
will block at the end of the await

282
00:10:51,350 --> 00:10:53,089
function sorry at the end of the weight

283
00:10:53,089 --> 00:10:57,470
block until all four of those callbacks

284
00:10:57,470 --> 00:10:59,600
generated by defer have triggered so

285
00:10:59,600 --> 00:11:01,610
it's a way to stop your program until

286
00:11:01,610 --> 00:11:03,740
you you have an answer two things you

287
00:11:03,740 --> 00:11:06,050
need to proceed so once all that's done

288
00:11:06,050 --> 00:11:09,170
then you can go to bam and go on with

289
00:11:09,170 --> 00:11:12,290
your program so here's the most basic

290
00:11:12,290 --> 00:11:14,660
ice example I can come up with it's

291
00:11:14,660 --> 00:11:15,710
something that when you just wait a

292
00:11:15,710 --> 00:11:17,810
second and then print so I'm using the

293
00:11:17,810 --> 00:11:20,180
standard set timeout function and set

294
00:11:20,180 --> 00:11:21,470
timeout us you know it takes a call back

295
00:11:21,470 --> 00:11:22,760
as its first parameter and that

296
00:11:22,760 --> 00:11:24,560
the callback that it calls after a

297
00:11:24,560 --> 00:11:26,990
second of waiting so in this case this

298
00:11:26,990 --> 00:11:28,250
isn't a weight block that's just been

299
00:11:28,250 --> 00:11:30,110
moved to one line but it's a weight

300
00:11:30,110 --> 00:11:31,490
block that is one statement which is

301
00:11:31,490 --> 00:11:33,290
called set timeout when set timeout

302
00:11:33,290 --> 00:11:35,230
fires it's called back after a second

303
00:11:35,230 --> 00:11:37,490
control can proceed past the end of the

304
00:11:37,490 --> 00:11:39,290
away block into the console dot log

305
00:11:39,290 --> 00:11:41,240
hello so this waits a second and then

306
00:11:41,240 --> 00:11:44,420
prints hello and just to show you a

307
00:11:44,420 --> 00:11:45,890
little bit more complicated example how

308
00:11:45,890 --> 00:11:48,190
colleagues and callers interact I

309
00:11:48,190 --> 00:11:50,630
prepared this other one which is really

310
00:11:50,630 --> 00:11:51,800
just going to print one two three four

311
00:11:51,800 --> 00:11:53,330
five but it's with two different

312
00:11:53,330 --> 00:11:55,940
functions now F and G so let's say you

313
00:11:55,940 --> 00:11:58,010
start without the first thing that will

314
00:11:58,010 --> 00:11:59,840
happen in f is you do a console dot log

315
00:11:59,840 --> 00:12:03,620
to print the number one okay now we go

316
00:12:03,620 --> 00:12:05,720
into the weight block and F and what

317
00:12:05,720 --> 00:12:07,490
that's going to do first is call this

318
00:12:07,490 --> 00:12:10,790
other function G with a callback

319
00:12:10,790 --> 00:12:14,120
generated by defer so within G now we're

320
00:12:14,120 --> 00:12:16,040
in G the first thing we do is print a

321
00:12:16,040 --> 00:12:18,620
two and then we're going to as in the

322
00:12:18,620 --> 00:12:20,780
first example that I showed you we're

323
00:12:20,780 --> 00:12:23,030
going to wait ten milliseconds for a

324
00:12:23,030 --> 00:12:26,540
timeout so at this point control cannot

325
00:12:26,540 --> 00:12:28,940
proceed any further in G so it jumps

326
00:12:28,940 --> 00:12:31,520
actually back out to F because app can

327
00:12:31,520 --> 00:12:33,290
still keep doing other things it hasn't

328
00:12:33,290 --> 00:12:35,000
it hasn't reached the end of its await

329
00:12:35,000 --> 00:12:36,680
block yet so it's going to then print

330
00:12:36,680 --> 00:12:38,810
three and then control will jump to some

331
00:12:38,810 --> 00:12:41,420
other part of the program after that

332
00:12:41,420 --> 00:12:44,090
ten-second 10 millisecond timeout

333
00:12:44,090 --> 00:12:47,900
expires we can now proceed in function G

334
00:12:47,900 --> 00:12:50,450
because all it defers within its weight

335
00:12:50,450 --> 00:12:53,600
block I finished and then G can call its

336
00:12:53,600 --> 00:12:55,580
call back now what happens when G calls

337
00:12:55,580 --> 00:12:58,220
us call back well that allows F to

338
00:12:58,220 --> 00:12:59,900
proceed past it's a weight block because

339
00:12:59,900 --> 00:13:01,910
they only had one two fern its weight

340
00:13:01,910 --> 00:13:03,890
and now that's triggered and so now we

341
00:13:03,890 --> 00:13:08,720
can finish up and just to briefly

342
00:13:08,720 --> 00:13:11,480
describe to you how this can fit any API

343
00:13:11,480 --> 00:13:13,760
you can dream of I haven't shown this to

344
00:13:13,760 --> 00:13:15,050
you yet but defer actually takes

345
00:13:15,050 --> 00:13:17,600
arguments and the arguments of defer the

346
00:13:17,600 --> 00:13:19,400
arguments to be filled in by the call

347
00:13:19,400 --> 00:13:21,140
back when is actually called so that's

348
00:13:21,140 --> 00:13:22,670
why defers an Ashley a real function

349
00:13:22,670 --> 00:13:24,200
it's actually implementing something a

350
00:13:24,200 --> 00:13:25,730
little bit like pass by reference and

351
00:13:25,730 --> 00:13:29,060
C++ so after control leaves this a

352
00:13:29,060 --> 00:13:31,190
weight block the request library will

353
00:13:31,190 --> 00:13:32,840
have filled in the air and the body and

354
00:13:32,840 --> 00:13:35,420
they'll be available as those two those

355
00:13:35,420 --> 00:13:36,380
two functions

356
00:13:36,380 --> 00:13:38,810
so in this way you can use ice coffee

357
00:13:38,810 --> 00:13:45,830
script in any API okay so I've told you

358
00:13:45,830 --> 00:13:47,810
about automatic cps conversion in nice

359
00:13:47,810 --> 00:13:48,980
coffee script I told you about the

360
00:13:48,980 --> 00:13:50,480
economy of mechanism hopefully it goes

361
00:13:50,480 --> 00:13:52,640
only to new keywords I tell you about

362
00:13:52,640 --> 00:13:53,750
how to make it compatible with all

363
00:13:53,750 --> 00:13:56,240
existing libraries and api's and the

364
00:13:56,240 --> 00:13:57,230
only thing I'd left to show you is how

365
00:13:57,230 --> 00:13:59,240
this makes for really cool programs that

366
00:13:59,240 --> 00:14:03,740
have interesting control flow okay so

367
00:14:03,740 --> 00:14:06,140
let's talk about the one we we looked at

368
00:14:06,140 --> 00:14:08,300
in the first series of examples which is

369
00:14:08,300 --> 00:14:10,610
just a set of cereal calls when one

370
00:14:10,610 --> 00:14:13,670
finishes the next can can start and this

371
00:14:13,670 --> 00:14:15,110
is what it looks like a nice coffee

372
00:14:15,110 --> 00:14:17,900
script so let's say we have a series of

373
00:14:17,900 --> 00:14:19,400
20 terms we need to search for we're

374
00:14:19,400 --> 00:14:22,100
from Twitter what this loop will do is

375
00:14:22,100 --> 00:14:23,480
it'll search it'll loop through each of

376
00:14:23,480 --> 00:14:26,480
those 20 terms one at a time and on each

377
00:14:26,480 --> 00:14:28,700
one calling this search function that

378
00:14:28,700 --> 00:14:31,610
makes a Twitter call and then it

379
00:14:31,610 --> 00:14:33,710
populates the result into that slot in

380
00:14:33,710 --> 00:14:36,890
the result array so this is just for

381
00:14:36,890 --> 00:14:38,930
each item wait wait for that thing to

382
00:14:38,930 --> 00:14:42,530
finish then do the next I'd done the

383
00:14:42,530 --> 00:14:43,700
really cool thing is how do we change

384
00:14:43,700 --> 00:14:45,860
this into a set of 20 parallel calls

385
00:14:45,860 --> 00:14:48,200
well it's a minimal change we just

386
00:14:48,200 --> 00:14:50,390
switch the order of the weight and the

387
00:14:50,390 --> 00:14:53,060
for loops and snow so now if you look at

388
00:14:53,060 --> 00:14:54,860
this within the awake block we're gonna

389
00:14:54,860 --> 00:14:56,150
be doing a whole bunch of things we're

390
00:14:56,150 --> 00:14:58,400
going to fire off 20 different requests

391
00:14:58,400 --> 00:15:00,140
at once and once all of them have

392
00:15:00,140 --> 00:15:01,880
completed then we're ready to continue

393
00:15:01,880 --> 00:15:03,320
so this is how you would implement

394
00:15:03,320 --> 00:15:05,930
parallel control flow with with ice

395
00:15:05,930 --> 00:15:09,260
coffee script and this gets slightly

396
00:15:09,260 --> 00:15:12,560
more complicated but it's a little bit

397
00:15:12,560 --> 00:15:16,400
more code but it's the same ideas I play

398
00:15:16,400 --> 00:15:18,020
I wrote this little Klaus called a

399
00:15:18,020 --> 00:15:19,790
pipeline or library and that's using

400
00:15:19,790 --> 00:15:21,770
just regular iced coffee script that

401
00:15:21,770 --> 00:15:23,690
I've described you so far it's not on

402
00:15:23,690 --> 00:15:25,640
the slide but it's it's in github if you

403
00:15:25,640 --> 00:15:27,290
want to check it out and what does this

404
00:15:27,290 --> 00:15:30,250
pipeline or do well it tries to enforce

405
00:15:30,250 --> 00:15:32,720
network flows with only a certain number

406
00:15:32,720 --> 00:15:34,880
of requests outstanding so in this case

407
00:15:34,880 --> 00:15:36,830
they're only five requests outstanding

408
00:15:36,830 --> 00:15:38,660
even though we might have a thousand

409
00:15:38,660 --> 00:15:41,210
different terms where we're going to to

410
00:15:41,210 --> 00:15:44,020
query and so here's the way it works

411
00:15:44,020 --> 00:15:46,670
with a pipeliner you wait before you

412
00:15:46,670 --> 00:15:49,820
launch your call so if you go into this

413
00:15:49,820 --> 00:15:51,830
the first thing that will happen in the

414
00:15:51,830 --> 00:15:54,320
loop is that you'll ask the pipe liner

415
00:15:54,320 --> 00:15:55,940
is there room in my window to fire a

416
00:15:55,940 --> 00:15:58,580
call if yes you'll go right past out of

417
00:15:58,580 --> 00:16:01,190
a Plock if not you'll be queued up until

418
00:16:01,190 --> 00:16:03,290
the next guy comes back so in this case

419
00:16:03,290 --> 00:16:05,210
when that fifth outstanding query comes

420
00:16:05,210 --> 00:16:07,340
back I now have room in the pipeline or

421
00:16:07,340 --> 00:16:09,740
so I can keep going it'll it'll

422
00:16:09,740 --> 00:16:11,930
basically say I can go pass a weight

423
00:16:11,930 --> 00:16:15,590
block in the in the loop and now when I

424
00:16:15,590 --> 00:16:18,650
need to generate a call back I actually

425
00:16:18,650 --> 00:16:20,150
need to ask the pipe liner for their

426
00:16:20,150 --> 00:16:22,160
call back because as I told you there's

427
00:16:22,160 --> 00:16:23,690
a little bit of accounting going on here

428
00:16:23,690 --> 00:16:25,900
and this pipeliner class needs to know

429
00:16:25,900 --> 00:16:28,070
when is it that I can launch the next

430
00:16:28,070 --> 00:16:30,590
guy so the pipeline actually has a defer

431
00:16:30,590 --> 00:16:31,760
function which I've implemented with

432
00:16:31,760 --> 00:16:34,070
this regular iced coffee script and it's

433
00:16:34,070 --> 00:16:36,020
doing both the accounting and also

434
00:16:36,020 --> 00:16:37,880
populating the results as we saw in the

435
00:16:37,880 --> 00:16:39,890
previous slides at the end of this loop

436
00:16:39,890 --> 00:16:41,300
i have to flush to make sure that all

437
00:16:41,300 --> 00:16:43,310
five outstanding guys are back and then

438
00:16:43,310 --> 00:16:46,130
i'm done so this is a pretty complicated

439
00:16:46,130 --> 00:16:49,540
control flow that's just very succinctly

440
00:16:49,540 --> 00:16:54,530
captured with this library and I told

441
00:16:54,530 --> 00:16:55,730
you something about doing background

442
00:16:55,730 --> 00:16:58,940
work so when you're in this asynchronous

443
00:16:58,940 --> 00:17:01,220
idiom your past a call back your

444
00:17:01,220 --> 00:17:03,890
functions past a call back and you you

445
00:17:03,890 --> 00:17:05,360
call a call back to tell your call

446
00:17:05,360 --> 00:17:06,800
you're done with your work but it

447
00:17:06,800 --> 00:17:08,300
doesn't mean you get to stop executing

448
00:17:08,300 --> 00:17:10,310
and in particular let's say I want to

449
00:17:10,310 --> 00:17:11,420
take this search function I've been

450
00:17:11,420 --> 00:17:13,430
talking about tell whoever is doing the

451
00:17:13,430 --> 00:17:15,260
search that okay I got your results go

452
00:17:15,260 --> 00:17:16,910
print the page but then I could do other

453
00:17:16,910 --> 00:17:19,459
things like save to disk or I don't know

454
00:17:19,459 --> 00:17:21,020
dude do something else in the background

455
00:17:21,020 --> 00:17:22,310
and this is also possible with iced

456
00:17:22,310 --> 00:17:24,980
coffee script in this case after I've

457
00:17:24,980 --> 00:17:26,810
done a search like call back my callback

458
00:17:26,810 --> 00:17:28,160
with the result here with your result

459
00:17:28,160 --> 00:17:30,530
then I can save the file to disk and

460
00:17:30,530 --> 00:17:32,360
then report an error or something so

461
00:17:32,360 --> 00:17:33,800
just because you call your callback

462
00:17:33,800 --> 00:17:35,000
doesn't mean you're done you could do a

463
00:17:35,000 --> 00:17:36,770
lot of interesting things and this is a

464
00:17:36,770 --> 00:17:38,390
very powerful feature of a language it

465
00:17:38,390 --> 00:17:40,640
just allows you to basically in threads

466
00:17:40,640 --> 00:17:43,100
you'd have to do something call fork but

467
00:17:43,100 --> 00:17:45,470
in ice coffee script it's just a natural

468
00:17:45,470 --> 00:17:47,150
extension of the way things are laid out

469
00:17:47,150 --> 00:17:51,140
and this last example is a little bit of

470
00:17:51,140 --> 00:17:56,060
a of a trip it's it's allowing you to

471
00:17:56,060 --> 00:17:57,830
take any function you could think of in

472
00:17:57,830 --> 00:17:59,960
this case our search and apply to it a

473
00:17:59,960 --> 00:18:02,510
timeout so if Twitter is slow i don't

474
00:18:02,510 --> 00:18:03,740
know why that would happen

475
00:18:03,740 --> 00:18:05,809
you could say either give me a result of

476
00:18:05,809 --> 00:18:09,140
the search or wait or if second expires

477
00:18:09,140 --> 00:18:10,850
and I haven't gotten it then keep going

478
00:18:10,850 --> 00:18:12,830
and this time out function is something

479
00:18:12,830 --> 00:18:14,600
I wrote with iced coffee script too it's

480
00:18:14,600 --> 00:18:16,309
pretty interesting it sets up two

481
00:18:16,309 --> 00:18:18,230
different racing computations it sets up

482
00:18:18,230 --> 00:18:19,910
a timer that's going to go off the

483
00:18:19,910 --> 00:18:21,590
amount of time you asked for and assess

484
00:18:21,590 --> 00:18:23,870
the Twitter search and whichever one of

485
00:18:23,870 --> 00:18:25,910
those comes back first will then allow

486
00:18:25,910 --> 00:18:27,830
you to exit this await block and keep

487
00:18:27,830 --> 00:18:29,690
going so what that really implements us

488
00:18:29,690 --> 00:18:31,700
a timeout either I wait a second or I

489
00:18:31,700 --> 00:18:34,400
get a result but not both so again this

490
00:18:34,400 --> 00:18:35,870
is a little bit of magic that's hidden

491
00:18:35,870 --> 00:18:37,640
in a library that I wrote but the

492
00:18:37,640 --> 00:18:39,410
library was all with iced coffee script

493
00:18:39,410 --> 00:18:41,480
so again as part of this composable

494
00:18:41,480 --> 00:18:44,450
language with just this very bitten with

495
00:18:44,450 --> 00:18:46,010
this natural set of features that allow

496
00:18:46,010 --> 00:18:49,910
you to do very interesting things so how

497
00:18:49,910 --> 00:18:52,040
is this all pulled together as i

498
00:18:52,040 --> 00:18:54,380
promised i didn't want to change the

499
00:18:54,380 --> 00:18:55,820
interpreter i didn't want to do things

500
00:18:55,820 --> 00:18:57,980
like require fibers because that's not

501
00:18:57,980 --> 00:19:00,550
portable across all different

502
00:19:00,550 --> 00:19:02,750
implementations it's really what I want

503
00:19:02,750 --> 00:19:05,059
to do is take a coffee script and in do

504
00:19:05,059 --> 00:19:06,710
more or less a source of source

505
00:19:06,710 --> 00:19:10,130
translation so the way this works is you

506
00:19:10,130 --> 00:19:11,900
parse CoffeeScript as usual you got the

507
00:19:11,900 --> 00:19:13,700
abstract syntax tree and then you do a

508
00:19:13,700 --> 00:19:16,309
rotation on that syntax tree to actually

509
00:19:16,309 --> 00:19:18,080
implement the continuation passing style

510
00:19:18,080 --> 00:19:22,059
translation and then alter output code

511
00:19:22,059 --> 00:19:24,890
and then output code mainly as normal

512
00:19:24,890 --> 00:19:27,140
but with some differences for for the

513
00:19:27,140 --> 00:19:28,550
things that you rotate it and so I'll

514
00:19:28,550 --> 00:19:30,679
explain to you what a rotation means so

515
00:19:30,679 --> 00:19:34,130
here's a very basic example function f 2

516
00:19:34,130 --> 00:19:37,250
i'm waiting on sorry function f 1 is

517
00:19:37,250 --> 00:19:39,860
called i'm awaiting on f 2 and then

518
00:19:39,860 --> 00:19:42,920
after that's done I can call f3 so

519
00:19:42,920 --> 00:19:45,050
here's the regular syntax tree for that

520
00:19:45,050 --> 00:19:47,390
as would happen with a vanilla coffee

521
00:19:47,390 --> 00:19:49,220
script compiler there's just a block

522
00:19:49,220 --> 00:19:52,370
that contains f1 a sub-block that's that

523
00:19:52,370 --> 00:19:55,130
has a weight and with sub sub block of

524
00:19:55,130 --> 00:19:58,100
f2 and then f3 but in a rotation you

525
00:19:58,100 --> 00:20:00,020
have to change what's the child of one

526
00:20:00,020 --> 00:20:02,000
because this effort you can only be

527
00:20:02,000 --> 00:20:04,309
called out of weights at the weight

528
00:20:04,309 --> 00:20:06,830
nodes discretion so what that means is

529
00:20:06,830 --> 00:20:09,320
we're going to take take that second

530
00:20:09,320 --> 00:20:11,390
sorry that third arm of the tree and

531
00:20:11,390 --> 00:20:13,340
basically make it to be a child of the

532
00:20:13,340 --> 00:20:17,330
weight block and this is more or less

533
00:20:17,330 --> 00:20:21,740
pation so as you can imagine this has to

534
00:20:21,740 --> 00:20:24,490
be done recursively up the tree so

535
00:20:24,490 --> 00:20:26,570
everything that within an away block

536
00:20:26,570 --> 00:20:28,880
needs that type of rotation parents of

537
00:20:28,880 --> 00:20:31,010
those nodes needs rotations and also

538
00:20:31,010 --> 00:20:32,330
inside a loops things get a little bit

539
00:20:32,330 --> 00:20:34,220
interesting if you have break or

540
00:20:34,220 --> 00:20:36,620
continue inside of a loop that also has

541
00:20:36,620 --> 00:20:38,870
a weight blocks and you have to do

542
00:20:38,870 --> 00:20:41,960
rotations inside those loops but a key

543
00:20:41,960 --> 00:20:43,610
thing that I've discovered is you want

544
00:20:43,610 --> 00:20:44,990
to use this sparingly you don't want to

545
00:20:44,990 --> 00:20:46,670
do this for every possible node in your

546
00:20:46,670 --> 00:20:49,190
object abstract syntax tree because

547
00:20:49,190 --> 00:20:51,010
things will really explode on you so

548
00:20:51,010 --> 00:20:53,630
with a little bit of care you can decide

549
00:20:53,630 --> 00:20:55,760
only which nodes need to be rotated and

550
00:20:55,760 --> 00:20:57,560
just apply those rotations to those

551
00:20:57,560 --> 00:20:59,990
nodes and this helps keep the code as

552
00:20:59,990 --> 00:21:03,980
clean as possible so finally I want to

553
00:21:03,980 --> 00:21:05,600
tell you a little bit about how this was

554
00:21:05,600 --> 00:21:09,200
implemented I didn't rip up all of

555
00:21:09,200 --> 00:21:10,520
coffee script coffee scripts about like

556
00:21:10,520 --> 00:21:13,370
a 5,000 line program and it turned out I

557
00:21:13,370 --> 00:21:17,380
added about you know let's say about

558
00:21:17,380 --> 00:21:20,330
1500 lines of code in particular the

559
00:21:20,330 --> 00:21:21,560
grammar and the lexer file in

560
00:21:21,560 --> 00:21:23,570
CoffeeScript barely changed at all so

561
00:21:23,570 --> 00:21:25,670
these were very simple changes to the

562
00:21:25,670 --> 00:21:27,500
grammar mechs are kind of all the all

563
00:21:27,500 --> 00:21:29,930
the goods are really within this nodes

564
00:21:29,930 --> 00:21:33,110
coffee file in which on the output code

565
00:21:33,110 --> 00:21:39,740
it is emitted and finally so I think

566
00:21:39,740 --> 00:21:41,180
I've covered all interesting parts of

567
00:21:41,180 --> 00:21:44,600
iced and I've tried to tell you why Isis

568
00:21:44,600 --> 00:21:46,250
meeting the spec for how to make

569
00:21:46,250 --> 00:21:49,940
interesting asynchronous and simple

570
00:21:49,940 --> 00:21:52,660
programs with javascript in CoffeeScript

571
00:21:52,660 --> 00:21:54,710
one last thing I want to say is that

572
00:21:54,710 --> 00:21:56,180
this isn't just a toy project we've

573
00:21:56,180 --> 00:21:58,400
actually built a real site with it it's

574
00:21:58,400 --> 00:22:00,320
in the wild and this little asterisk

575
00:22:00,320 --> 00:22:02,180
next to it because the site is in is in

576
00:22:02,180 --> 00:22:04,220
private beta right now but it's this

577
00:22:04,220 --> 00:22:06,140
site called comma Soros which we're

578
00:22:06,140 --> 00:22:08,930
trying to develop a matching system

579
00:22:08,930 --> 00:22:12,170
based on people's interests and it's

580
00:22:12,170 --> 00:22:14,030
about 30 thousand lines of iced coffee

581
00:22:14,030 --> 00:22:16,340
script with about 10,000 lines of go

582
00:22:16,340 --> 00:22:18,470
code but just to give you a sense of how

583
00:22:18,470 --> 00:22:20,210
that breaks down with our new keywords

584
00:22:20,210 --> 00:22:22,310
it turns out about two percent of those

585
00:22:22,310 --> 00:22:25,610
lines use these weight blocks and about

586
00:22:25,610 --> 00:22:27,830
nine percent of those weight blocks are

587
00:22:27,830 --> 00:22:30,830
using more exotic and currency than just

588
00:22:30,830 --> 00:22:33,080
line a than B then C so we're actually

589
00:22:33,080 --> 00:22:34,340
getting a lot of use out of the power

590
00:22:34,340 --> 00:22:36,470
within the library and even this

591
00:22:36,470 --> 00:22:40,010
pipeliner Klaus shows up 20 times ok so

592
00:22:40,010 --> 00:22:42,200
there are my turtles again they're flip-

593
00:22:42,200 --> 00:22:44,419
but the next time you have one of those

594
00:22:44,419 --> 00:22:46,190
oh god no moments where you have to

595
00:22:46,190 --> 00:22:48,649
rotate your whole program just remember

596
00:22:48,649 --> 00:22:51,169
use CoffeeScript use ice coffee script

597
00:22:51,169 --> 00:22:54,080
it'll save you all the hassle and really

598
00:22:54,080 --> 00:22:56,090
what I want to do is try to get a

599
00:22:56,090 --> 00:22:57,679
grassroots movement into to get this

600
00:22:57,679 --> 00:23:00,049
code mainlined into coffee script so far

601
00:23:00,049 --> 00:23:02,120
it's in there's not really enough

602
00:23:02,120 --> 00:23:03,980
support but I encourage you guys to

603
00:23:03,980 --> 00:23:06,080
download it and enchanting these uh

604
00:23:06,080 --> 00:23:08,510
these new language features if they

605
00:23:08,510 --> 00:23:10,279
actually solve your problems and with

606
00:23:10,279 --> 00:23:11,570
that hopefully there's a couple minutes

607
00:23:11,570 --> 00:23:13,399
for questions and thank you for

608
00:23:13,399 --> 00:23:22,760
listening yes so how do you realize the

609
00:23:22,760 --> 00:23:24,710
await block waiting it does actually

610
00:23:24,710 --> 00:23:26,360
yield back to the browser and get called

611
00:23:26,360 --> 00:23:28,399
back or are you blocking somehow a

612
00:23:28,399 --> 00:23:31,760
JavaScript cell no I could maybe try to

613
00:23:31,760 --> 00:23:33,440
show you the rotation really quickly I

614
00:23:33,440 --> 00:23:37,100
don't know if I can pull it up and we

615
00:23:37,100 --> 00:23:42,590
can you see that no no anyway um the

616
00:23:42,590 --> 00:23:46,610
answer is you take the code that's

617
00:23:46,610 --> 00:23:48,380
supposed to come after the way block and

618
00:23:48,380 --> 00:23:50,360
you packages up as a function and now

619
00:23:50,360 --> 00:23:52,039
that function can be called whenever

620
00:23:52,039 --> 00:23:53,929
you're ready to do it so there's a

621
00:23:53,929 --> 00:23:56,710
little bit of code in a weight that says

622
00:23:56,710 --> 00:24:01,340
the roughly the answer is let me just

623
00:24:01,340 --> 00:24:03,590
that back ok you have the rest of the

624
00:24:03,590 --> 00:24:05,120
program as a function and you basically

625
00:24:05,120 --> 00:24:07,549
pass that as a call back to set timeout

626
00:24:07,549 --> 00:24:09,710
in this case and it just fires for us so

627
00:24:09,710 --> 00:24:14,870
no changes to the browser what's your

628
00:24:14,870 --> 00:24:16,580
experience with debugging this stuff

629
00:24:16,580 --> 00:24:20,360
what does it do ah ok um rationalize

630
00:24:20,360 --> 00:24:22,700
what's happening so this is a great

631
00:24:22,700 --> 00:24:25,820
example as to why in some cases were

632
00:24:25,820 --> 00:24:30,169
better off and basically we can annotate

633
00:24:30,169 --> 00:24:33,200
this code so you people already have

634
00:24:33,200 --> 00:24:34,399
this problem anyway with hand-rolled

635
00:24:34,399 --> 00:24:36,980
callbacks because you know you'll get a

636
00:24:36,980 --> 00:24:40,190
return from from Twitter and the whole

637
00:24:40,190 --> 00:24:41,659
top of the stock will be lopped off and

638
00:24:41,659 --> 00:24:43,610
you'll just be left with a couple frames

639
00:24:43,610 --> 00:24:44,820
above the Twitter so trick

640
00:24:44,820 --> 00:24:47,610
and so actually because we've made this

641
00:24:47,610 --> 00:24:49,470
a lot more structured you can now

642
00:24:49,470 --> 00:24:51,269
annotate the code and kind of recreate

643
00:24:51,269 --> 00:24:53,070
the chain of callbacks it got you to

644
00:24:53,070 --> 00:24:55,350
where you were and we're able to say you

645
00:24:55,350 --> 00:24:57,710
know this actually happened at you know

646
00:24:57,710 --> 00:24:59,970
this is this is on the github page I'm

647
00:24:59,970 --> 00:25:01,139
not gonna be able to explain it but I'll

648
00:25:01,139 --> 00:25:03,000
tell you the real set of calls to

649
00:25:03,000 --> 00:25:05,279
actually went up there and we could also

650
00:25:05,279 --> 00:25:06,840
do something like use real line number

651
00:25:06,840 --> 00:25:09,080
translation as opposed to coffeescript

652
00:25:09,080 --> 00:25:11,309
you know the CoffeeScript to JavaScript

653
00:25:11,309 --> 00:25:13,409
translation so anyway I think the answer

654
00:25:13,409 --> 00:25:15,450
is it's better at debugging because it's

655
00:25:15,450 --> 00:25:17,850
a more structured way of putting your

656
00:25:17,850 --> 00:25:26,210
programs together yes back there um so

657
00:25:26,210 --> 00:25:28,740
what like what was your process at

658
00:25:28,740 --> 00:25:31,049
arriving it at this solution to the to

659
00:25:31,049 --> 00:25:32,759
look to the problem you talked about at

660
00:25:32,759 --> 00:25:34,139
the beginning like I liked was this

661
00:25:34,139 --> 00:25:36,360
organic like how how did you get there

662
00:25:36,360 --> 00:25:38,399
we got there we had done this the same

663
00:25:38,399 --> 00:25:40,440
thing in C++ in about two thousand seven

664
00:25:40,440 --> 00:25:43,289
um we started with the same problem

665
00:25:43,289 --> 00:25:45,179
though we had a whole website build with

666
00:25:45,179 --> 00:25:48,120
C++ and roll call backs and that turned

667
00:25:48,120 --> 00:25:49,470
out to be I mean people were really

668
00:25:49,470 --> 00:25:50,730
quitting her company because he just

669
00:25:50,730 --> 00:25:52,799
could not deal with it so we decided we

670
00:25:52,799 --> 00:25:53,879
had to come up with a better solution

671
00:25:53,879 --> 00:25:56,490
and the solution we came up with was one

672
00:25:56,490 --> 00:25:58,710
that had all those four requirements

673
00:25:58,710 --> 00:26:00,480
that i spoke about and it had to be

674
00:26:00,480 --> 00:26:01,830
backwards compatible because we couldn't

675
00:26:01,830 --> 00:26:03,299
rewrite the whole thing from scratch so

676
00:26:03,299 --> 00:26:05,159
these primitives kind of fell out of

677
00:26:05,159 --> 00:26:07,289
that and it turned out there exactly the

678
00:26:07,289 --> 00:26:09,450
same thing that works in my opinion

679
00:26:09,450 --> 00:26:10,860
really well for coffee script and an

680
00:26:10,860 --> 00:26:13,019
iced coffee script so I guess experience

681
00:26:13,019 --> 00:26:15,269
is really how we came up with okay I

682
00:26:15,269 --> 00:26:17,250
think that's it for now so if you have

683
00:26:17,250 --> 00:26:18,779
any more questions max's will be

684
00:26:18,779 --> 00:26:20,639
available all right um thank you ever so

685
00:26:20,639 --> 00:26:26,220
thanks very much max

