1
00:00:10,310 --> 00:00:15,890

thank you okay I can fulfill this so

2
00:00:15,890 --> 00:00:18,020
this talk was designed to be like 45

3
00:00:18,020 --> 00:00:20,779
minutes it's mentioned woven talk so i

4
00:00:20,779 --> 00:00:24,140
guess i can go pre fast and i will go

5
00:00:24,140 --> 00:00:25,580
pretty fast if it's too fast just raise

6
00:00:25,580 --> 00:00:27,770
yen and we get the sordid I just tried

7
00:00:27,770 --> 00:00:29,680
to speak slow just skip more slides

8
00:00:29,680 --> 00:00:32,480
first question who of you is using HP to

9
00:00:32,480 --> 00:00:35,630
in production hands up it's like five

10
00:00:35,630 --> 00:00:38,590
hands almost it's great appreciate that

11
00:00:38,590 --> 00:00:41,239
for the other side before we start I

12
00:00:41,239 --> 00:00:43,070
really want to get the most important

13
00:00:43,070 --> 00:00:46,790
question sorted so first question is if

14
00:00:46,790 --> 00:00:48,260
you really done what do you think yeah

15
00:00:48,260 --> 00:00:52,070
yes raise your hands is it done well

16
00:00:52,070 --> 00:00:53,870
it's three hands really like yeah it's

17
00:00:53,870 --> 00:00:55,910
done sense of what you hear and I even

18
00:00:55,910 --> 00:00:58,070
mentioned this in my pitch by anyway so

19
00:00:58,070 --> 00:01:00,350
it's ssl mandatory yes raise your hands

20
00:01:00,350 --> 00:01:06,539
oh that's good fifty percent it's not

21
00:01:06,549 --> 00:01:09,259
but actually all implementations you

22
00:01:09,259 --> 00:01:12,080
will see in the wild they are only ssl

23
00:01:12,080 --> 00:01:16,850
so in IRL it's all encrypted but the

24
00:01:16,850 --> 00:01:19,039
specs say you can also use a plain text

25
00:01:19,039 --> 00:01:23,359
is it made by google no one great no

26
00:01:23,359 --> 00:01:25,609
it's not what speedy well it's just a

27
00:01:25,609 --> 00:01:31,280
different protocol is it plain text no

28
00:01:31,280 --> 00:01:35,700
it's not binary I had asked impressed

29
00:01:35,710 --> 00:01:39,619
yeah they are my favorite question so

30
00:01:39,619 --> 00:01:44,479
will you won't still work you think sure

31
00:01:44,479 --> 00:01:45,979
it will write and we will break the web

32
00:01:45,979 --> 00:01:48,499
even HP one it's still supported by the

33
00:01:48,499 --> 00:01:50,960
browser's all right in order to

34
00:01:50,960 --> 00:01:53,060
understand why HP to is kind of like

35
00:01:53,060 --> 00:01:56,270
great and amazing and so mind-blowing we

36
00:01:56,270 --> 00:01:58,789
have to understand what are the problems

37
00:01:58,789 --> 00:02:01,999
with the protocol we have in order to do

38
00:02:01,999 --> 00:02:03,619
that we need to take a look at the

39
00:02:03,619 --> 00:02:08,990
histories so in 1989 and 90-89 sorry Tim

40
00:02:08,990 --> 00:02:10,850
berners-lee invented or came up with

41
00:02:10,850 --> 00:02:13,940
this idea of the World Wide Web so where

42
00:02:13,940 --> 00:02:16,700
every researcher the CERN can share the

43
00:02:16,700 --> 00:02:19,129
results to other universities and wishes

44
00:02:19,129 --> 00:02:22,159
research centers and stuff and only two

45
00:02:22,159 --> 00:02:23,380
years later

46
00:02:23,380 --> 00:02:25,180
the first version the first version of

47
00:02:25,180 --> 00:02:29,460
HMG HTTP so version 09 was released

48
00:02:29,460 --> 00:02:32,470
going on in history just a few years

49
00:02:32,470 --> 00:02:35,470
later version the first version draft

50
00:02:35,470 --> 00:02:39,130
came up and four years later they

51
00:02:39,130 --> 00:02:41,740
released the first version what's

52
00:02:41,740 --> 00:02:44,080
actually pretty funny is that just one

53
00:02:44,080 --> 00:02:46,480
year after the release of the first

54
00:02:46,480 --> 00:02:48,160
version they figured that it was not

55
00:02:48,160 --> 00:02:50,260
that good and they released a patch so

56
00:02:50,260 --> 00:02:53,050
since then we have HP 11 which is what

57
00:02:53,050 --> 00:02:57,910
most of you still use today then in 1998

58
00:02:57,910 --> 00:03:01,600
there was RFC where you have 23 26 who

59
00:03:01,600 --> 00:03:05,940
knows what this RC is about ends up one

60
00:03:05,940 --> 00:03:09,930
awesome so this RFC specifies how

61
00:03:09,930 --> 00:03:12,430
machines interconnected network should

62
00:03:12,430 --> 00:03:14,560
react on request on making coffee and

63
00:03:14,560 --> 00:03:18,100
this is where the HPT status for 118

64
00:03:18,100 --> 00:03:20,380
comes from I'm a teapot so its

65
00:03:20,380 --> 00:03:22,180
neighborhoods full RC check it out it's

66
00:03:22,180 --> 00:03:23,350
pretty it's pretty funny to read it's a

67
00:03:23,350 --> 00:03:27,040
good read so going on in history we have

68
00:03:27,040 --> 00:03:30,610
another version of a TV 11 because they

69
00:03:30,610 --> 00:03:32,410
figured the first version was also but

70
00:03:32,410 --> 00:03:36,730
has a few flaws but it's basically not

71
00:03:36,730 --> 00:03:38,500
that much semantics change so it was

72
00:03:38,500 --> 00:03:41,830
more like a like writing changes in this

73
00:03:41,830 --> 00:03:44,800
draft and then there was a lot of stuff

74
00:03:44,800 --> 00:03:46,480
happening lots of like improvement in

75
00:03:46,480 --> 00:03:48,010
different RFC's I haven't listed here

76
00:03:48,010 --> 00:03:50,890
and then in 2007 the ift forms the HTV

77
00:03:50,890 --> 00:03:52,959
boost working group and as far as Google

78
00:03:52,959 --> 00:03:55,930
told me business latin for to and this

79
00:03:55,930 --> 00:04:00,610
group's task was to to get some some

80
00:04:00,610 --> 00:04:03,970
like structure in the 11 draft and in

81
00:04:03,970 --> 00:04:05,920
early 2012 there was a call for

82
00:04:05,920 --> 00:04:07,930
proposals fetch v2 and Google jumped in

83
00:04:07,930 --> 00:04:11,020
here and proposed speedy as less as a

84
00:04:11,020 --> 00:04:13,870
base as a base draft to use and to work

85
00:04:13,870 --> 00:04:15,459
on this is how speedy and age which will

86
00:04:15,459 --> 00:04:17,650
relate to each other so speedy is the

87
00:04:17,650 --> 00:04:19,959
base where the iterated over and created

88
00:04:19,959 --> 00:04:26,860
HP to so when we go on in 2014 so two

89
00:04:26,860 --> 00:04:30,340
years ago now that was hp11 split this

90
00:04:30,340 --> 00:04:32,200
was the result of the a tubeless working

91
00:04:32,200 --> 00:04:33,850
group and they split it all the

92
00:04:33,850 --> 00:04:36,010
different RFC's which have been out

93
00:04:36,010 --> 00:04:36,790
there in

94
00:04:36,790 --> 00:04:40,090
just six different ones each dealing was

95
00:04:40,090 --> 00:04:41,980
a different sub part of the protocol so

96
00:04:41,980 --> 00:04:44,890
all information on HP 11 you can find in

97
00:04:44,890 --> 00:04:49,510
this RFC's then in may 2015 issue 2 was

98
00:04:49,510 --> 00:04:52,090
finally released and at the end of the

99
00:04:52,090 --> 00:04:54,070
last year twenty two percent of all web

100
00:04:54,070 --> 00:04:57,220
traffic was already hb2 due to the fact

101
00:04:57,220 --> 00:05:00,640
that s i mentioned only ssl traffic is

102
00:05:00,640 --> 00:05:03,160
supported 4g with you it makes sense to

103
00:05:03,160 --> 00:05:05,170
look at this number as well and on

104
00:05:05,170 --> 00:05:08,650
Firefox 35 percent of all HTTPS traffic

105
00:05:08,650 --> 00:05:11,080
was already a tree to I think this is

106
00:05:11,080 --> 00:05:14,980
pretty amazing so far so in order to

107
00:05:14,980 --> 00:05:17,980
them start at the Edit like at the same

108
00:05:17,980 --> 00:05:19,840
plate at the same point I really want to

109
00:05:19,840 --> 00:05:22,320
talk really quick about the HTTP basics

110
00:05:22,320 --> 00:05:26,320
so first one HP one is plain text so I

111
00:05:26,320 --> 00:05:29,170
can just spin up my terminal and then

112
00:05:29,170 --> 00:05:31,660
opening up a TCP connection to google

113
00:05:31,660 --> 00:05:34,420
that common port 80 and then just write

114
00:05:34,420 --> 00:05:37,570
the characters for the status line at

115
00:05:37,570 --> 00:05:39,400
the host header and Google will reply

116
00:05:39,400 --> 00:05:41,920
with an actual response so you can just

117
00:05:41,920 --> 00:05:46,420
do this stuff with HP 1hp was a issue

118
00:05:46,420 --> 00:05:49,960
one is stateless and to us as well and

119
00:05:49,960 --> 00:05:51,490
it's super flexible and it's used

120
00:05:51,490 --> 00:05:53,020
everything right it was invented for a

121
00:05:53,020 --> 00:05:54,490
completely different thing it was

122
00:05:54,490 --> 00:05:57,490
invented to share documents tim burton's

123
00:05:57,490 --> 00:05:59,440
the idea was even that browsers could be

124
00:05:59,440 --> 00:06:01,840
like editors this idea is completely

125
00:06:01,840 --> 00:06:07,420
gone now almost but a tree has changed a

126
00:06:07,420 --> 00:06:08,800
lot since then right we use it for all

127
00:06:08,800 --> 00:06:09,820
different kinds of stuff we use it for

128
00:06:09,820 --> 00:06:12,760
streaming we use it for database

129
00:06:12,760 --> 00:06:14,860
connections we use it for lots of

130
00:06:14,860 --> 00:06:17,170
different things but it was not designed

131
00:06:17,170 --> 00:06:22,270
with this gnosis task in mind so hv1 has

132
00:06:22,270 --> 00:06:26,110
a bunch of problems the web matric and

133
00:06:26,110 --> 00:06:28,360
if we take a look in the last four years

134
00:06:28,360 --> 00:06:31,540
the size of requests and the number of

135
00:06:31,540 --> 00:06:33,940
requests almost doubled and if we take a

136
00:06:33,940 --> 00:06:36,700
look at average website every connection

137
00:06:36,700 --> 00:06:40,390
has 38 every page load has 38 different

138
00:06:40,390 --> 00:06:42,670
connections TCP connections just to load

139
00:06:42,670 --> 00:06:46,120
one page and when we know talking about

140
00:06:46,120 --> 00:06:48,310
the mobile web the latency is pretty

141
00:06:48,310 --> 00:06:49,040
high

142
00:06:49,040 --> 00:06:52,460
and this leads to a problem often

143
00:06:52,460 --> 00:06:55,460
referred as request melantha and what I

144
00:06:55,460 --> 00:06:58,040
mean with that is a issue you see every

145
00:06:58,040 --> 00:07:00,110
day so what you see here is you have the

146
00:07:00,110 --> 00:07:01,970
browser and server and the browser is

147
00:07:01,970 --> 00:07:04,820
requesting some sign of asset so in this

148
00:07:04,820 --> 00:07:06,830
case it's requesting the next HTML the

149
00:07:06,830 --> 00:07:08,930
server response and the browser pauses

150
00:07:08,930 --> 00:07:11,120
it and find some more assets so then the

151
00:07:11,120 --> 00:07:12,740
browser's asking again for some more

152
00:07:12,740 --> 00:07:15,440
assets in this case for CSS file and

153
00:07:15,440 --> 00:07:17,330
then the server response the browser

154
00:07:17,330 --> 00:07:20,180
path of it and then it might find an

155
00:07:20,180 --> 00:07:22,130
image or in our case which is like a

156
00:07:22,130 --> 00:07:23,540
little bit unrealistic it finds

157
00:07:23,540 --> 00:07:25,220
JavaScript acid and then it's going to

158
00:07:25,220 --> 00:07:27,590
request this one as well so this is a

159
00:07:27,590 --> 00:07:29,390
lot of round trips right we have to do

160
00:07:29,390 --> 00:07:32,600
and this adds a lot of latency right

161
00:07:32,600 --> 00:07:34,310
especially if we are now talking about

162
00:07:34,310 --> 00:07:38,180
the mobile web throughput is pretty good

163
00:07:38,180 --> 00:07:39,740
when we talk about LTE or 4G the

164
00:07:39,740 --> 00:07:41,150
throughput is pretty good but the

165
00:07:41,150 --> 00:07:43,490
latency is still not that good and it's

166
00:07:43,490 --> 00:07:46,070
like chili and I want to illustrate that

167
00:07:46,070 --> 00:07:47,660
so I got a little bit a little video

168
00:07:47,660 --> 00:07:50,840
here so i wanted to load the verge this

169
00:07:50,840 --> 00:07:52,100
video is a bit older it might not be

170
00:07:52,100 --> 00:07:53,840
that accurate anymore it's like half a

171
00:07:53,840 --> 00:07:56,510
year but if you want to just load the

172
00:07:56,510 --> 00:07:57,860
website and take a look at the network

173
00:07:57,860 --> 00:08:01,730
tab let's do this together so we loaded

174
00:08:01,730 --> 00:08:04,580
you see the initial request and what you

175
00:08:04,580 --> 00:08:06,980
now see is like this huge waterfall

176
00:08:06,980 --> 00:08:08,660
while I'm here on there on the right

177
00:08:08,660 --> 00:08:10,850
side right there's lots of stuff lots of

178
00:08:10,850 --> 00:08:13,220
assets loaded every essay triggers more

179
00:08:13,220 --> 00:08:16,880
assets and it takes a long time this is

180
00:08:16,880 --> 00:08:18,740
real time by the way so it's like 10

181
00:08:18,740 --> 00:08:23,110
minutes to load we're at 10 seconds

182
00:08:23,120 --> 00:08:26,220
echo moderate know it's a 12 seconds and

183
00:08:26,220 --> 00:08:29,150
it's 1.5 megabyte to load the verge

184
00:08:29,150 --> 00:08:32,070
that's like ten percent of my daily

185
00:08:32,070 --> 00:08:34,409
mobile plan l my monthly mobile plan

186
00:08:34,409 --> 00:08:37,440
that's crazy I got it the same video but

187
00:08:37,440 --> 00:08:39,479
a little bit slower so there's not real

188
00:08:39,479 --> 00:08:41,130
time anymore and we can take a look on

189
00:08:41,130 --> 00:08:43,650
what's going on there so we see the

190
00:08:43,650 --> 00:08:45,750
initial request the document here then

191
00:08:45,750 --> 00:08:48,030
we see in parallel triggered some more

192
00:08:48,030 --> 00:08:50,010
requests going on then here's a lot of

193
00:08:50,010 --> 00:08:52,080
like pause so I assume there's a lot of

194
00:08:52,080 --> 00:08:53,700
pausing going on from the essence

195
00:08:53,700 --> 00:08:57,000
livered here and all this stuff you can

196
00:08:57,000 --> 00:08:59,160
read but it's all tracking and bad stuff

197
00:08:59,160 --> 00:09:01,110
so I don't have a blocker for this

198
00:09:01,110 --> 00:09:03,480
example right so it's the page was

199
00:09:03,480 --> 00:09:07,650
loaded from you expected but it was not

200
00:09:07,650 --> 00:09:09,740
a complete page load and even my browser

201
00:09:09,740 --> 00:09:12,120
loading any kata was still spinning at

202
00:09:12,120 --> 00:09:16,560
this time so I got a little bit angry on

203
00:09:16,560 --> 00:09:19,080
that so I treated them they didn't reply

204
00:09:19,080 --> 00:09:22,340
at all I don't know if they even fix it

205
00:09:22,340 --> 00:09:25,530
now your first response might um yeah

206
00:09:25,530 --> 00:09:27,600
you can just fix this with loading SS in

207
00:09:27,600 --> 00:09:29,280
parallel and this is true but this

208
00:09:29,280 --> 00:09:31,320
suffers one problem and this is head of

209
00:09:31,320 --> 00:09:33,240
line blocking what is head of line

210
00:09:33,240 --> 00:09:35,730
blocking exactly well let's have a look

211
00:09:35,730 --> 00:09:37,680
at loading essence in parallel you would

212
00:09:37,680 --> 00:09:39,990
just request them in parallel but the

213
00:09:39,990 --> 00:09:42,240
index lost so the initial document might

214
00:09:42,240 --> 00:09:44,070
take the longest time right because it's

215
00:09:44,070 --> 00:09:45,930
like done dynamically rendered and the

216
00:09:45,930 --> 00:09:47,790
other ones just static assets but due to

217
00:09:47,790 --> 00:09:49,740
the fact that we requested this in this

218
00:09:49,740 --> 00:09:51,930
order the server we are forcing the

219
00:09:51,930 --> 00:09:54,450
server to reply in the same to reply in

220
00:09:54,450 --> 00:09:56,190
the same order if we are sharing one tcp

221
00:09:56,190 --> 00:09:58,800
connection because HTTP has no way of

222
00:09:58,800 --> 00:10:02,220
identifying resources in the response so

223
00:10:02,220 --> 00:10:04,589
the only way to identify that this acid

224
00:10:04,589 --> 00:10:07,560
is this requested acid is to keep the

225
00:10:07,560 --> 00:10:10,800
order so you had the head blocks right

226
00:10:10,800 --> 00:10:15,150
this is head of line blocking and it's a

227
00:10:15,150 --> 00:10:16,650
little bit recap on this so the head of

228
00:10:16,650 --> 00:10:22,470
line blocking is the other matters the

229
00:10:22,470 --> 00:10:25,440
slowest request blocks there are almost

230
00:10:25,440 --> 00:10:27,060
no workarounds for this because it's an

231
00:10:27,060 --> 00:10:30,630
issue of the protocol right and due to

232
00:10:30,630 --> 00:10:32,490
that fact that's often unused so a lot

233
00:10:32,490 --> 00:10:35,430
of browsers just turn this off as

234
00:10:35,430 --> 00:10:36,130
developers

235
00:10:36,130 --> 00:10:39,220
David Wright to changes and I think this

236
00:10:39,220 --> 00:10:41,740
was like the best option we had at this

237
00:10:41,740 --> 00:10:45,040
point but that could have been like if

238
00:10:45,040 --> 00:10:46,840
we would just invest more efforts we

239
00:10:46,840 --> 00:10:48,640
could have jumped into the protocol

240
00:10:48,640 --> 00:10:50,140
specs and try to work on this on this

241
00:10:50,140 --> 00:10:52,120
side but we did the other way we

242
00:10:52,120 --> 00:10:54,100
improved our tooling so we came up with

243
00:10:54,100 --> 00:10:57,100
ideas like spriting concatenating domain

244
00:10:57,100 --> 00:10:59,740
sharding my slides are slow domain

245
00:10:59,740 --> 00:11:03,100
charting the weirdest inlining hacks or

246
00:11:03,100 --> 00:11:04,900
preloading hacks I've seen so many

247
00:11:04,900 --> 00:11:07,360
applications they have the application

248
00:11:07,360 --> 00:11:08,860
JavaScript on the landing page just

249
00:11:08,860 --> 00:11:10,660
though the application could look pretty

250
00:11:10,660 --> 00:11:13,420
fast this violates almost all rules on

251
00:11:13,420 --> 00:11:16,600
software design I know right this is a

252
00:11:16,600 --> 00:11:18,850
really bad idea we did cookie free

253
00:11:18,850 --> 00:11:22,060
domains this is great keep this oh this

254
00:11:22,060 --> 00:11:24,880
is even a great idea on HP to on we so

255
00:11:24,880 --> 00:11:27,100
really try to save all the requests so

256
00:11:27,100 --> 00:11:28,900
we optimized again for the throughput

257
00:11:28,900 --> 00:11:32,260
but not for the round trip time but I'm

258
00:11:32,260 --> 00:11:33,700
not here to talk about the problems we

259
00:11:33,700 --> 00:11:35,980
have I'm rather here to talk about hd2

260
00:11:35,980 --> 00:11:37,660
and the solutions we have to this

261
00:11:37,660 --> 00:11:40,210
problem mention first of all HP two is

262
00:11:40,210 --> 00:11:42,610
compatible so it's not going to break

263
00:11:42,610 --> 00:11:44,980
the web the scheme will stay so you'll

264
00:11:44,980 --> 00:11:47,170
never see an hd2 in your browser bar it

265
00:11:47,170 --> 00:11:50,410
will stay hph vs the semantic stay like

266
00:11:50,410 --> 00:11:52,000
headers message request response cycle

267
00:11:52,000 --> 00:11:55,540
all this day have a look at the upgrade

268
00:11:55,540 --> 00:11:58,110
right how does operate works first the

269
00:11:58,110 --> 00:12:00,250
non-secure way this is just a

270
00:12:00,250 --> 00:12:02,040
theoretical one using the upgrade header

271
00:12:02,040 --> 00:12:04,600
due to time constraints and try to go

272
00:12:04,600 --> 00:12:06,900
with this pretty fast so we'll just send

273
00:12:06,900 --> 00:12:10,000
the upgrade header HTC see as plain text

274
00:12:10,000 --> 00:12:12,190
or clear text then we sent the settings

275
00:12:12,190 --> 00:12:14,410
along of the server will reply with an H

276
00:12:14,410 --> 00:12:18,190
to view 11 101 switching protocols and

277
00:12:18,190 --> 00:12:20,740
then upgrade to the protocol and then it

278
00:12:20,740 --> 00:12:23,920
will just start running a binary so

279
00:12:23,920 --> 00:12:25,510
let's take a look and how it how it

280
00:12:25,510 --> 00:12:26,980
would work on a secured connection so

281
00:12:26,980 --> 00:12:29,190
this is how it would work on all your

282
00:12:29,190 --> 00:12:31,750
laptops I see around here it's actually

283
00:12:31,750 --> 00:12:35,230
using an extension for TLS so it's TLS a

284
00:12:35,230 --> 00:12:37,270
OPN lpns application layer protocol

285
00:12:37,270 --> 00:12:39,520
negotiation which is just newer version

286
00:12:39,520 --> 00:12:41,140
of NPN which is the next protocol

287
00:12:41,140 --> 00:12:42,400
negotiation which was the protocol

288
00:12:42,400 --> 00:12:45,070
invented by Google for speedy anyway

289
00:12:45,070 --> 00:12:48,520
it's an extension CLS and it's using

290
00:12:48,520 --> 00:12:50,380
this part of the TLS protocol

291
00:12:50,380 --> 00:12:53,350
where they exchange protocols both sides

292
00:12:53,350 --> 00:12:55,030
support and they can just negotiate

293
00:12:55,030 --> 00:12:58,510
which one to use and the protocol

294
00:12:58,510 --> 00:13:02,170
shorthand h2 is the short version for hv

295
00:13:02,170 --> 00:13:04,660
two on a secured connection the funny

296
00:13:04,660 --> 00:13:08,520
side funny side note is that HTC is

297
00:13:08,520 --> 00:13:12,070
actually registered in the name space of

298
00:13:12,070 --> 00:13:15,190
for a LPN but due to the fact that is

299
00:13:15,190 --> 00:13:18,090
clear text it's not even used in the APN

300
00:13:18,090 --> 00:13:22,780
so this led to a few problems ok so a 22

301
00:13:22,780 --> 00:13:25,030
is multiplexed what does this means so

302
00:13:25,030 --> 00:13:27,040
we have one more or less physical TCP

303
00:13:27,040 --> 00:13:29,590
connection which has logical streams on

304
00:13:29,590 --> 00:13:32,590
it and on this their RTC like the data

305
00:13:32,590 --> 00:13:34,960
frames and each frame belongs to a

306
00:13:34,960 --> 00:13:36,520
stream so this model makes the most

307
00:13:36,520 --> 00:13:38,590
sense even though on a more technical

308
00:13:38,590 --> 00:13:40,810
term it's frames directly on one

309
00:13:40,810 --> 00:13:44,110
connection so these frames are binary

310
00:13:44,110 --> 00:13:47,200
and they follow a certain layout so they

311
00:13:47,200 --> 00:13:50,170
can be passed by service more easily so

312
00:13:50,170 --> 00:13:51,880
they have a length they have type flags

313
00:13:51,880 --> 00:13:54,190
they have a type that have flags they

314
00:13:54,190 --> 00:13:56,320
have a 1-bit which always have to be set

315
00:13:56,320 --> 00:13:59,560
to 0 then the stream identifier of 31

316
00:13:59,560 --> 00:14:02,200
beds and then their sexual payload I was

317
00:14:02,200 --> 00:14:04,210
wondering what this little bit means

318
00:14:04,210 --> 00:14:06,430
because the specs is this one has to be

319
00:14:06,430 --> 00:14:08,080
there and it always has to be 0 ignoring

320
00:14:08,080 --> 00:14:12,250
like what it's actually for it's

321
00:14:12,250 --> 00:14:14,470
actually four platforms which do not

322
00:14:14,470 --> 00:14:17,980
support unsigned I'm 31 bit integers so

323
00:14:17,980 --> 00:14:23,080
they can just use 32-bit integers ok

324
00:14:23,080 --> 00:14:24,820
anyway so let's take a lot of different

325
00:14:24,820 --> 00:14:26,920
types of frames we have the first one in

326
00:14:26,920 --> 00:14:28,750
the one you will see most of the times

327
00:14:28,750 --> 00:14:31,300
the data frame it has a padding length

328
00:14:31,300 --> 00:14:33,850
padding a security feature and then

329
00:14:33,850 --> 00:14:35,530
there's the data and the padding their

330
00:14:35,530 --> 00:14:38,380
priority frames to reprioritize package

331
00:14:38,380 --> 00:14:40,510
on the fly that's reset screen which

332
00:14:40,510 --> 00:14:42,100
resets one stream of one connection

333
00:14:42,100 --> 00:14:45,340
their settings to transfer settings from

334
00:14:45,340 --> 00:14:47,290
the server to the client they're also

335
00:14:47,290 --> 00:14:49,080
bunch more I have a little example here

336
00:14:49,080 --> 00:14:51,450
but as I said we have to be really quick

337
00:14:51,450 --> 00:14:54,430
what you see here is the length of the

338
00:14:54,430 --> 00:14:56,710
body so the lengths always ignores the

339
00:14:56,710 --> 00:15:00,550
initial frame so we have the ping that's

340
00:15:00,550 --> 00:15:03,280
the type of the of the package it has

341
00:15:03,280 --> 00:15:04,450
the flag

342
00:15:04,450 --> 00:15:07,030
set so this flag on the pink frame means

343
00:15:07,030 --> 00:15:09,310
that the server has to send back or the

344
00:15:09,310 --> 00:15:11,050
other side has to send back a punk frame

345
00:15:11,050 --> 00:15:13,090
hopefully without the flag because this

346
00:15:13,090 --> 00:15:15,130
would lead to like ping pong then we

347
00:15:15,130 --> 00:15:17,770
have this troll bit and we have this

348
00:15:17,770 --> 00:15:20,110
scream at you the cool thing is that i

349
00:15:20,110 --> 00:15:22,060
can say with this one that this frame is

350
00:15:22,060 --> 00:15:24,280
from client because client always have

351
00:15:24,280 --> 00:15:26,920
no this from the server because client

352
00:15:26,920 --> 00:15:30,940
always have odd numbers so each each

353
00:15:30,940 --> 00:15:32,500
server and clients maintain their own

354
00:15:32,500 --> 00:15:34,870
stream IDs and then there's some epic

355
00:15:34,870 --> 00:15:36,550
data which is like necessary by the

356
00:15:36,550 --> 00:15:40,870
protocol let's talk about the HP two

357
00:15:40,870 --> 00:15:43,660
features first one I want to talk about

358
00:15:43,660 --> 00:15:46,810
a server push and I think this is going

359
00:15:46,810 --> 00:15:48,520
to be the the biggest change and the

360
00:15:48,520 --> 00:15:50,950
change with the biggest impact but on

361
00:15:50,950 --> 00:15:54,160
the same hand it's also the change we

362
00:15:54,160 --> 00:15:57,250
haven't made use of yet and we really

363
00:15:57,250 --> 00:15:58,690
should because this is going to improve

364
00:15:58,690 --> 00:16:00,970
our applications as I mentioned by pitch

365
00:16:00,970 --> 00:16:04,630
right so what is server push so ever

366
00:16:04,630 --> 00:16:07,020
push is initiated by push frame and

367
00:16:07,020 --> 00:16:10,210
seven push actually comes in place where

368
00:16:10,210 --> 00:16:12,190
a visitor who has never seen your web

369
00:16:12,190 --> 00:16:13,930
app it's going to see your app for the

370
00:16:13,930 --> 00:16:15,550
very first time so it has a complete

371
00:16:15,550 --> 00:16:18,970
empty cache and requesting a sign our

372
00:16:18,970 --> 00:16:21,490
document like in the next HTML and now

373
00:16:21,490 --> 00:16:23,410
imagine your server could tell the

374
00:16:23,410 --> 00:16:26,020
client without further requests the

375
00:16:26,020 --> 00:16:30,010
essence it will need so the server the

376
00:16:30,010 --> 00:16:32,410
client asks for an XHTML and your server

377
00:16:32,410 --> 00:16:34,810
could respond like oh I know this page

378
00:16:34,810 --> 00:16:36,880
you will need the application CSS and

379
00:16:36,880 --> 00:16:39,760
the application JavaScript as well so

380
00:16:39,760 --> 00:16:41,500
the push promise frame is basically I

381
00:16:41,500 --> 00:16:44,590
can add a frame but is it's a head of

382
00:16:44,590 --> 00:16:46,140
frame what's the transportation

383
00:16:46,140 --> 00:16:49,630
mechanism without an request and this is

384
00:16:49,630 --> 00:16:51,970
one of the biggest change from even in

385
00:16:51,970 --> 00:16:56,620
semantics right from HP 12 hp to it also

386
00:16:56,620 --> 00:17:00,730
supports flow control so all assets all

387
00:17:00,730 --> 00:17:04,089
requests all connections or all streams

388
00:17:04,089 --> 00:17:06,070
on one connection are sharing one actual

389
00:17:06,070 --> 00:17:09,579
TCP connection and in order to transfer

390
00:17:09,579 --> 00:17:12,270
some assets faster than others every

391
00:17:12,270 --> 00:17:15,520
stream has dependency and they use

392
00:17:15,520 --> 00:17:16,660
weighted dependency in order to

393
00:17:16,660 --> 00:17:17,829
determine which stream

394
00:17:17,829 --> 00:17:21,010
should be transferred first so let's

395
00:17:21,010 --> 00:17:22,929
look at how they implemented it the use

396
00:17:22,929 --> 00:17:25,089
a technique called priority three so

397
00:17:25,089 --> 00:17:29,140
here we have the stream id0 stream 83

398
00:17:29,140 --> 00:17:32,289
and three depends on 0 then we have the

399
00:17:32,289 --> 00:17:36,549
stream 85 they both know the three has a

400
00:17:36,549 --> 00:17:38,950
weight of 128 and five hundredweight of

401
00:17:38,950 --> 00:17:42,909
64 and then there's some wall streams in

402
00:17:42,909 --> 00:17:46,809
here and this is a the complete picture

403
00:17:46,809 --> 00:17:49,750
for the like for the priority three and

404
00:17:49,750 --> 00:17:55,480
now take a look that 16 down here is the

405
00:17:55,480 --> 00:17:57,820
default weight of every stream so if you

406
00:17:57,820 --> 00:18:00,789
don't specify it it's always 16 and the

407
00:18:00,789 --> 00:18:02,889
priority of the stream is determined by

408
00:18:02,889 --> 00:18:05,230
the relative proportion of weights so

409
00:18:05,230 --> 00:18:07,630
stream 83 should receive two thirds of

410
00:18:07,630 --> 00:18:10,179
the available resources and stream it is

411
00:18:10,179 --> 00:18:11,740
seven should receive half of the

412
00:18:11,740 --> 00:18:14,440
resources of three minute three if this

413
00:18:14,440 --> 00:18:18,250
makes sense this is very theoretical but

414
00:18:18,250 --> 00:18:20,409
what really blew my mind when I was like

415
00:18:20,409 --> 00:18:22,600
researching into it taking a look and

416
00:18:22,600 --> 00:18:23,769
how it's actually implementing it and

417
00:18:23,769 --> 00:18:25,659
firefox at the moment has the most

418
00:18:25,659 --> 00:18:29,380
efficient implementation so let's take a

419
00:18:29,380 --> 00:18:32,620
look on how they do it so first off this

420
00:18:32,620 --> 00:18:34,750
initial stream is simply 0 and the first

421
00:18:34,750 --> 00:18:36,750
thing they do without transferring

422
00:18:36,750 --> 00:18:39,610
anything on the data they set up the

423
00:18:39,610 --> 00:18:43,330
dependency tree then they transfer the

424
00:18:43,330 --> 00:18:47,409
HTML in this remedy 13 then they order

425
00:18:47,409 --> 00:18:52,809
the CSS on this page that's the CSS from

426
00:18:52,809 --> 00:18:56,320
the head out in the Hat and then there's

427
00:18:56,320 --> 00:18:58,840
the javis group in the Hat then we have

428
00:18:58,840 --> 00:19:00,789
some images they go on a different sub

429
00:19:00,789 --> 00:19:02,110
tree with a different priority and

430
00:19:02,110 --> 00:19:05,679
different waited and then there might

431
00:19:05,679 --> 00:19:08,049
also be some JavaScript at the bottom of

432
00:19:08,049 --> 00:19:11,950
the page which um goes below here i can

433
00:19:11,950 --> 00:19:13,649
tell you why they made the decisions

434
00:19:13,649 --> 00:19:17,080
even if it love if i could do but I

435
00:19:17,080 --> 00:19:19,000
didn't have the I didn't had the chance

436
00:19:19,000 --> 00:19:20,919
to talk to any of them or didn't like

437
00:19:20,919 --> 00:19:24,370
make myself enough time to do that but I

438
00:19:24,370 --> 00:19:26,049
know that they do it this way and that's

439
00:19:26,049 --> 00:19:27,880
the most efficient one it's the most

440
00:19:27,880 --> 00:19:29,180
efficient one we

441
00:19:29,180 --> 00:19:31,280
Google still uses the dependency tree

442
00:19:31,280 --> 00:19:32,750
that invented for speedy which was a bit

443
00:19:32,750 --> 00:19:34,340
different and they didn't change it yet

444
00:19:34,340 --> 00:19:36,980
and what I found pretty interesting is

445
00:19:36,980 --> 00:19:38,540
that the in the next door don't make use

446
00:19:38,540 --> 00:19:41,000
of this at all so they support it but

447
00:19:41,000 --> 00:19:43,700
it's like flat thing so it's not a tree

448
00:19:43,700 --> 00:19:48,200
everything depends on stream of the 0 so

449
00:19:48,200 --> 00:19:51,800
hd2 is also compressed headers which

450
00:19:51,800 --> 00:19:55,210
will reduce the size of every request

451
00:19:55,210 --> 00:19:57,380
this is how a header looks like so it

452
00:19:57,380 --> 00:19:59,360
has the padding again that has this

453
00:19:59,360 --> 00:20:02,240
interesting 0 bit the stream IDE I'm a

454
00:20:02,240 --> 00:20:04,130
weight and the header block fragment the

455
00:20:04,130 --> 00:20:05,600
header block fragment is specified in a

456
00:20:05,600 --> 00:20:08,780
different RFC its specified in RFC 75 41

457
00:20:08,780 --> 00:20:11,510
and I really want to go pretty quick

458
00:20:11,510 --> 00:20:13,040
into that because I found this one

459
00:20:13,040 --> 00:20:14,780
pretty interesting and how they do it

460
00:20:14,780 --> 00:20:17,210
they use a static they use a header

461
00:20:17,210 --> 00:20:19,040
compression table for this it consists

462
00:20:19,040 --> 00:20:23,090
of static and dynamic table and this is

463
00:20:23,090 --> 00:20:24,800
how the compress or encoded headers

464
00:20:24,800 --> 00:20:28,070
looks like so here you see the master

465
00:20:28,070 --> 00:20:31,220
for example is referenced as ID too so

466
00:20:31,220 --> 00:20:32,900
whenever you have this method header

467
00:20:32,900 --> 00:20:37,010
it's always this ID too and you will

468
00:20:37,010 --> 00:20:38,930
just find this too in the encoded

469
00:20:38,930 --> 00:20:43,010
headers and for value is not known it's

470
00:20:43,010 --> 00:20:45,740
using Huffman encoding and what I also

471
00:20:45,740 --> 00:20:47,570
think is pretty interesting on this is

472
00:20:47,570 --> 00:20:51,350
that here the statelessness is a little

473
00:20:51,350 --> 00:20:55,730
bit it's a little bit violated because

474
00:20:55,730 --> 00:20:59,000
header compression is stateful so the

475
00:20:59,000 --> 00:21:03,350
state belongs to one connection and the

476
00:21:03,350 --> 00:21:05,090
dynamic table builds up her connection

477
00:21:05,090 --> 00:21:07,760
so for example the user agent probably

478
00:21:07,760 --> 00:21:10,340
won't change on one single TCP connector

479
00:21:10,340 --> 00:21:13,040
right so this one is a header which will

480
00:21:13,040 --> 00:21:14,540
end up with the dynamic here pretty fast

481
00:21:14,540 --> 00:21:17,600
and it's up to the compressor of the

482
00:21:17,600 --> 00:21:20,840
header which headers go into their go

483
00:21:20,840 --> 00:21:23,120
into this dynamic table I actually

484
00:21:23,120 --> 00:21:25,460
implemented this list HP algorithm

485
00:21:25,460 --> 00:21:26,990
myself so if you want to like know more

486
00:21:26,990 --> 00:21:29,090
details about this ask me later about

487
00:21:29,090 --> 00:21:31,670
this I think it's pretty interesting and

488
00:21:31,670 --> 00:21:33,260
it's pretty efficient for HTV two

489
00:21:33,260 --> 00:21:36,410
headers let's take a really deep joke

490
00:21:36,410 --> 00:21:37,910
until half an encoding I want to do it

491
00:21:37,910 --> 00:21:39,740
in one minute let's see who she knows it

492
00:21:39,740 --> 00:21:41,690
already happen encoding well that's half

493
00:21:41,690 --> 00:21:42,530
the audience it's

494
00:21:42,530 --> 00:21:45,170
aight i didn't do it might be for myself

495
00:21:45,170 --> 00:21:47,000
when i found an awesome youtube video

496
00:21:47,000 --> 00:21:49,250
expanding in like seven minutes so i try

497
00:21:49,250 --> 00:21:51,020
to break this down into one minute let's

498
00:21:51,020 --> 00:21:52,940
see if this if this works so we have

499
00:21:52,940 --> 00:21:54,620
this drink mississippi river and these

500
00:21:54,620 --> 00:21:57,170
are 17 characters each character's 8-bit

501
00:21:57,170 --> 00:22:00,700
so we have an initial string length of

502
00:22:00,700 --> 00:22:04,010
136 bits first thing we do we just count

503
00:22:04,010 --> 00:22:05,600
the characters or the occurrences of the

504
00:22:05,600 --> 00:22:07,730
character then we order them by

505
00:22:07,730 --> 00:22:10,880
occurrence so I 5s for p 2 and so on and

506
00:22:10,880 --> 00:22:12,710
then we start building up a tree we

507
00:22:12,710 --> 00:22:14,600
always take the lowest numbers and

508
00:22:14,600 --> 00:22:17,420
concatenate the characters and some of

509
00:22:17,420 --> 00:22:19,880
the numbers so we do this for the whole

510
00:22:19,880 --> 00:22:24,650
tree always using the lowest and with

511
00:22:24,650 --> 00:22:26,360
this technique we're building up this

512
00:22:26,360 --> 00:22:30,940
tree right and next step we do is we

513
00:22:30,940 --> 00:22:33,500
enumerate the branches so the left

514
00:22:33,500 --> 00:22:35,480
branch is always 0 where the right

515
00:22:35,480 --> 00:22:38,390
branch is always one and next step is

516
00:22:38,390 --> 00:22:41,660
you walk down every possible branch and

517
00:22:41,660 --> 00:22:45,410
you end up with this table and this is

518
00:22:45,410 --> 00:22:46,550
actually the compression table you can

519
00:22:46,550 --> 00:22:49,880
use it follows the idea that characters

520
00:22:49,880 --> 00:22:53,180
which occur often take less space in the

521
00:22:53,180 --> 00:22:55,640
compressed string so the eye which

522
00:22:55,640 --> 00:22:58,420
occurs five times only takes up two bits

523
00:22:58,420 --> 00:23:05,120
right while the space or the v while the

524
00:23:05,120 --> 00:23:10,220
space only takes four bits yeah this is

525
00:23:10,220 --> 00:23:11,630
the compression table and with a

526
00:23:11,630 --> 00:23:14,210
compression table the result will be 46

527
00:23:14,210 --> 00:23:17,540
bits plus the table so on this string we

528
00:23:17,540 --> 00:23:20,330
have all around seventy percent we

529
00:23:20,330 --> 00:23:22,340
compressed which is I think pretty great

530
00:23:22,340 --> 00:23:26,420
and in hv to the header the header table

531
00:23:26,420 --> 00:23:29,120
of the Halfmoon encoding table is part

532
00:23:29,120 --> 00:23:31,250
of the protocol so it's not not

533
00:23:31,250 --> 00:23:32,480
something which has to be transferred

534
00:23:32,480 --> 00:23:35,120
all the time it's just you just have to

535
00:23:35,120 --> 00:23:38,260
copy it and when you're implementing it

536
00:23:38,260 --> 00:23:40,520
okay now I want to talk about and I'm

537
00:23:40,520 --> 00:23:43,460
tuned in the real world and important

538
00:23:43,460 --> 00:23:45,170
for me is that it's already here and if

539
00:23:45,170 --> 00:23:46,730
I have if I would have more time we'll

540
00:23:46,730 --> 00:23:49,370
do a demo here but I don't so let's take

541
00:23:49,370 --> 00:23:51,530
a look at the implementations and we are

542
00:23:51,530 --> 00:23:53,750
at jas I'm conf so let's take a look at

543
00:23:53,750 --> 00:23:56,330
the browsers and what do we do

544
00:23:56,330 --> 00:23:58,820
need to know if you can use the future

545
00:23:58,820 --> 00:24:01,250
not you going to can i use and this is

546
00:24:01,250 --> 00:24:03,740
the actual usage chart it's two weeks

547
00:24:03,740 --> 00:24:07,250
old um let's for activity two and you

548
00:24:07,250 --> 00:24:09,320
see it's almost all green and the

549
00:24:09,320 --> 00:24:10,820
current versions right I mean this is

550
00:24:10,820 --> 00:24:16,490
opera mini and Android stock and can I

551
00:24:16,490 --> 00:24:19,220
use also has a different view on this

552
00:24:19,220 --> 00:24:21,950
chart but i think is more useful they

553
00:24:21,950 --> 00:24:24,679
also display the usage of the extra

554
00:24:24,679 --> 00:24:29,630
browser versions so we have this and so

555
00:24:29,630 --> 00:24:31,370
this is iOS they were the last ones

556
00:24:31,370 --> 00:24:33,320
adapting but due to the great adoption

557
00:24:33,320 --> 00:24:36,380
rate of iOS devices with the recent iOS

558
00:24:36,380 --> 00:24:40,279
version 9 to it they had they shipped

559
00:24:40,279 --> 00:24:45,250
support and you see this one right and

560
00:24:45,250 --> 00:24:47,960
when i asked at the beginning who many

561
00:24:47,960 --> 00:24:50,419
of you how many of you are using HP to

562
00:24:50,419 --> 00:24:53,960
now there were like five hands and I

563
00:24:53,960 --> 00:24:57,080
want to know why are you optimizing for

564
00:24:57,080 --> 00:25:00,380
this your whole asset pipeline you hold

565
00:25:00,380 --> 00:25:04,330
asset concatenation ugly firing

566
00:25:04,330 --> 00:25:09,080
packaging in line hacking it's for

567
00:25:09,080 --> 00:25:13,850
this don't have this your bosses right

568
00:25:13,850 --> 00:25:17,299
the super inefficient but I will come

569
00:25:17,299 --> 00:25:18,889
back to this later first let's take a

570
00:25:18,889 --> 00:25:21,889
look at the server side in order to know

571
00:25:21,889 --> 00:25:24,559
how important one implementation is the

572
00:25:24,559 --> 00:25:26,389
market share might be interesting so

573
00:25:26,389 --> 00:25:29,360
here's the market share diagram what I

574
00:25:29,360 --> 00:25:30,950
found pretty interesting that the google

575
00:25:30,950 --> 00:25:33,289
web server is already two percent of the

576
00:25:33,289 --> 00:25:35,929
whole web traffic this is not something

577
00:25:35,929 --> 00:25:37,789
you can deploy on your own right it's

578
00:25:37,789 --> 00:25:39,230
not like apache you can install

579
00:25:39,230 --> 00:25:41,870
everywhere and they take up two percent

580
00:25:41,870 --> 00:25:44,510
of their server landscape for the google

581
00:25:44,510 --> 00:25:46,100
web server it's not known when they

582
00:25:46,100 --> 00:25:48,740
implemented it by they said that job

583
00:25:48,740 --> 00:25:51,649
speedy in February last year so probably

584
00:25:51,649 --> 00:25:55,370
they adopted since then Apache the said

585
00:25:55,370 --> 00:25:57,710
since July last year engine extent

586
00:25:57,710 --> 00:26:01,399
September and I is even does this as

587
00:26:01,399 --> 00:26:04,610
well so all major browsers supported at

588
00:26:04,610 --> 00:26:07,580
the moment and in order to enable it on

589
00:26:07,580 --> 00:26:09,529
your setup it's pretty easy let's take a

590
00:26:09,529 --> 00:26:10,740
look at the attached

591
00:26:10,740 --> 00:26:14,290
Apache one first you would need the heo

592
00:26:14,290 --> 00:26:19,210
to module and that's it yeah that's this

593
00:26:19,210 --> 00:26:21,310
is optional this is just the login part

594
00:26:21,310 --> 00:26:24,640
so it's a one-line change find genetics

595
00:26:24,640 --> 00:26:27,430
it's even better it's like a five

596
00:26:27,430 --> 00:26:29,890
character change so you'll have this

597
00:26:29,890 --> 00:26:31,720
line anyway right it's opening up its

598
00:26:31,720 --> 00:26:34,390
binding the port address so you just

599
00:26:34,390 --> 00:26:37,240
have to add this keyword here and have a

600
00:26:37,240 --> 00:26:38,590
recent version and then you're

601
00:26:38,590 --> 00:26:41,380
supporting it so don't tell me it's too

602
00:26:41,380 --> 00:26:45,510
complex to support it right it's not I

603
00:26:45,510 --> 00:26:51,370
think you're holding it wrong right you

604
00:26:51,370 --> 00:26:55,450
should stop concatenating you should

605
00:26:55,450 --> 00:26:58,960
stop spriting you should especially stop

606
00:26:58,960 --> 00:27:01,420
the main sharding and i really want you

607
00:27:01,420 --> 00:27:03,310
to trash your asset pipeline the one too

608
00:27:03,310 --> 00:27:07,540
far sorry um yeah you should really

609
00:27:07,540 --> 00:27:09,850
trash your asset pipeline remember the

610
00:27:09,850 --> 00:27:11,470
graph I showed you the browser

611
00:27:11,470 --> 00:27:13,630
supporting it and you are still like

612
00:27:13,630 --> 00:27:15,460
concatenating all your assets into one

613
00:27:15,460 --> 00:27:17,920
big chunk destroying all server caching

614
00:27:17,920 --> 00:27:21,940
mechanics right if you have 11 line

615
00:27:21,940 --> 00:27:23,710
change in your JavaScript and you have

616
00:27:23,710 --> 00:27:25,870
your one point five megabits application

617
00:27:25,870 --> 00:27:27,880
j has changed the browser's have to

618
00:27:27,880 --> 00:27:30,130
redownload it again even if it's in cash

619
00:27:30,130 --> 00:27:34,030
it's just 11 line changed and hd2 is you

620
00:27:34,030 --> 00:27:36,040
don't get a penalty for more resources

621
00:27:36,040 --> 00:27:38,440
so the more resources you have the

622
00:27:38,440 --> 00:27:40,840
better you cashing works right and you

623
00:27:40,840 --> 00:27:42,220
don't get you don't get even one

624
00:27:42,220 --> 00:27:44,530
millisecond of penalty for having more

625
00:27:44,530 --> 00:27:48,640
assets so just like split your

626
00:27:48,640 --> 00:27:50,500
javascript against with your CSS again

627
00:27:50,500 --> 00:27:53,190
and just make the whole development

628
00:27:53,190 --> 00:27:57,550
process easier again right so I want you

629
00:27:57,550 --> 00:28:01,990
to start using it the best right now not

630
00:28:01,990 --> 00:28:04,750
only upgrading because and you might

631
00:28:04,750 --> 00:28:06,100
have seen the blog post articles as well

632
00:28:06,100 --> 00:28:07,840
right if you just upgrade your

633
00:28:07,840 --> 00:28:10,180
performance may decrease and this is not

634
00:28:10,180 --> 00:28:12,190
the fault of the protocol and the

635
00:28:12,190 --> 00:28:14,260
company's operating often say that if

636
00:28:14,260 --> 00:28:16,360
this makes me so angry because they are

637
00:28:16,360 --> 00:28:18,550
holding it wrong as well if you still

638
00:28:18,550 --> 00:28:21,970
concatenate all your assets sure it will

639
00:28:21,970 --> 00:28:23,860
get slower or it

640
00:28:23,860 --> 00:28:26,020
should change like it shouldn't change

641
00:28:26,020 --> 00:28:28,900
but it it's it's not you're like really

642
00:28:28,900 --> 00:28:30,220
holding it wrong you're just doing it

643
00:28:30,220 --> 00:28:33,640
wrong and I want you to just start using

644
00:28:33,640 --> 00:28:35,559
it understand the protocol and optimized

645
00:28:35,559 --> 00:28:38,980
for this and this what's true on this is

646
00:28:38,980 --> 00:28:41,860
that customers using one one will see a

647
00:28:41,860 --> 00:28:44,020
performance decrease so they will get

648
00:28:44,020 --> 00:28:46,000
slow off of them but the others will get

649
00:28:46,000 --> 00:28:47,740
an increase which is way higher than the

650
00:28:47,740 --> 00:28:50,470
people using 11 and for JavaScript

651
00:28:50,470 --> 00:28:51,670
features you're doing it all the time

652
00:28:51,670 --> 00:28:53,530
right you want users to upgrade the

653
00:28:53,530 --> 00:28:55,870
browser so you can use I don't know es6

654
00:28:55,870 --> 00:28:57,460
modules which is this part in one

655
00:28:57,460 --> 00:29:00,640
browser and this one is a way more

656
00:29:00,640 --> 00:29:05,950
bigger impacting change and I see way

657
00:29:05,950 --> 00:29:09,370
too little talk about this and you

658
00:29:09,370 --> 00:29:10,870
should really make use of the features

659
00:29:10,870 --> 00:29:14,860
and not just upgrading I want to change

660
00:29:14,860 --> 00:29:16,870
my company I want to know I don't want

661
00:29:16,870 --> 00:29:18,610
to change it sorry i want it i want to

662
00:29:18,610 --> 00:29:24,160
thank it i want to thank my company

663
00:29:24,160 --> 00:29:27,070
because they gave me all the time to

664
00:29:27,070 --> 00:29:30,340
research on this yeah this one is gone

665
00:29:30,340 --> 00:29:33,910
now all this ok if you want to appear

666
00:29:33,910 --> 00:29:36,850
here like next year you can just stay in

667
00:29:36,850 --> 00:29:38,620
this room awesome colleagues of mine

668
00:29:38,620 --> 00:29:42,070
will follow here my name is Alicia Ellis

669
00:29:42,070 --> 00:29:43,780
we had talked about this you can follow

670
00:29:43,780 --> 00:29:45,549
me on twitter if you're into this thing

671
00:29:45,549 --> 00:29:47,200
you can just follow me on github if it's

672
00:29:47,200 --> 00:29:49,110
a prayer anything you do I don't do that

673
00:29:49,110 --> 00:29:51,700
you can just read my blog which is like

674
00:29:51,700 --> 00:29:54,730
currently super outdated or grab a

675
00:29:54,730 --> 00:29:57,030
sticker of the side projects I run and

676
00:29:57,030 --> 00:29:59,049
this is all I got thank you very much

677
00:29:59,049 --> 00:30:02,840
for your attention

