1
00:00:21,600 --> 00:00:24,010

you

2
00:00:24,020 --> 00:00:26,570
I'm Martha I'm a software engineer at

3
00:00:26,570 --> 00:00:29,000
uber in San Francisco and I primarily

4
00:00:29,000 --> 00:00:31,100
work in JavaScript I also work with

5
00:00:31,100 --> 00:00:35,360
Python and I really like cats as was

6
00:00:35,360 --> 00:00:37,910
said as I like bourbon and I really like

7
00:00:37,910 --> 00:00:39,380
talking with people on Twitter so you

8
00:00:39,380 --> 00:00:44,000
should follow me so also a disclaimer I

9
00:00:44,000 --> 00:00:45,770
really hope this presentation is

10
00:00:45,770 --> 00:00:47,390
coherent I'm quite jet-lagged so we'll

11
00:00:47,390 --> 00:00:48,020
see what happens

12
00:00:48,020 --> 00:00:52,460
uh so does anyone know what software's

13
00:00:52,460 --> 00:00:55,970
primary technical imperative is this is

14
00:00:55,970 --> 00:01:05,509
something that you've heard of sure my

15
00:01:05,509 --> 00:01:07,369
this actually proves my point

16
00:01:07,369 --> 00:01:10,580
managing complexity that's truly like

17
00:01:10,580 --> 00:01:12,170
our only job as software engineers is to

18
00:01:12,170 --> 00:01:13,910
manage complexity so you don't have to

19
00:01:13,910 --> 00:01:15,530
think about too many things at any given

20
00:01:15,530 --> 00:01:17,390
time I just wanted to put this up here

21
00:01:17,390 --> 00:01:19,729
to remind myself mostly and just maybe

22
00:01:19,729 --> 00:01:21,530
like kind of spread that amongst the

23
00:01:21,530 --> 00:01:24,170
developer consciousness um I actually

24
00:01:24,170 --> 00:01:25,640
found that from the book called code

25
00:01:25,640 --> 00:01:27,110
complete written by Steve McConnell I

26
00:01:27,110 --> 00:01:28,850
highly recommend it

27
00:01:28,850 --> 00:01:31,429
so the only way to truly manage

28
00:01:31,429 --> 00:01:33,410
complexity is to understand it and

29
00:01:33,410 --> 00:01:35,869
that's why I personally like to kind of

30
00:01:35,869 --> 00:01:38,990
dig into like the ACMA specifications

31
00:01:38,990 --> 00:01:39,679
and figure out what's happening

32
00:01:39,679 --> 00:01:42,440
underneath I really like to kind of

33
00:01:42,440 --> 00:01:44,479
think about the gritty details of

34
00:01:44,479 --> 00:01:46,280
JavaScript so hopefully you learned

35
00:01:46,280 --> 00:01:50,119
something so javascript is usually

36
00:01:50,119 --> 00:01:52,819
interpreted not always but what that

37
00:01:52,819 --> 00:01:54,740
means is that your source code which is

38
00:01:54,740 --> 00:01:56,000
the JavaScript code you're writing is

39
00:01:56,000 --> 00:01:58,039
parsed which is then turned into an

40
00:01:58,039 --> 00:01:59,869
abstract syntax tree which is then

41
00:01:59,869 --> 00:02:01,610
generated in a bytecode which is then

42
00:02:01,610 --> 00:02:04,039
interpreted into machine code and a

43
00:02:04,039 --> 00:02:05,420
machine code are just as zeros and ones

44
00:02:05,420 --> 00:02:07,310
that are the actual instructions to your

45
00:02:07,310 --> 00:02:11,330
machine so when I said that it's usually

46
00:02:11,330 --> 00:02:13,340
interpreted a1 use case where it's not

47
00:02:13,340 --> 00:02:15,920
is in v8 it's actually just converted

48
00:02:15,920 --> 00:02:17,270
directly to machine code and not

49
00:02:17,270 --> 00:02:20,870
interpreted so javascript is really

50
00:02:20,870 --> 00:02:22,880
wonderful which is probably why most of

51
00:02:22,880 --> 00:02:25,520
us are here nearly everything is an

52
00:02:25,520 --> 00:02:28,790
object which is kind of really freeing

53
00:02:28,790 --> 00:02:31,010
to think about and functions are first

54
00:02:31,010 --> 00:02:32,600
class objects which means you can store

55
00:02:32,600 --> 00:02:34,340
them and variables you can assign them

56
00:02:34,340 --> 00:02:34,730
as mess

57
00:02:34,730 --> 00:02:36,950
to an object you can store them in an

58
00:02:36,950 --> 00:02:39,110
array you can be passed them as

59
00:02:39,110 --> 00:02:40,400
arguments to other functions and you can

60
00:02:40,400 --> 00:02:43,610
return them from other functions so

61
00:02:43,610 --> 00:02:45,860
really the only special property about a

62
00:02:45,860 --> 00:02:50,060
function is that it can be invoked so

63
00:02:50,060 --> 00:02:52,640
one of the one of the more complex parts

64
00:02:52,640 --> 00:02:54,049
of JavaScript is because function

65
00:02:54,049 --> 00:02:56,510
objects are first class they and they

66
00:02:56,510 --> 00:02:57,739
can be passed around quite frequently

67
00:02:57,739 --> 00:03:00,950
many things are decided at runtime so

68
00:03:00,950 --> 00:03:02,810
these are things like scope or the value

69
00:03:02,810 --> 00:03:06,530
of the keyword this and those concepts

70
00:03:06,530 --> 00:03:08,060
are a little confusing at first

71
00:03:08,060 --> 00:03:09,500
especially if you come from another

72
00:03:09,500 --> 00:03:14,390
language so I love this quote I also I

73
00:03:14,390 --> 00:03:16,430
hope everyone is either considering

74
00:03:16,430 --> 00:03:17,840
reading or has or a JavaScript the good

75
00:03:17,840 --> 00:03:19,430
parts but the best thing about

76
00:03:19,430 --> 00:03:20,930
JavaScript is this implementation of

77
00:03:20,930 --> 00:03:22,280
functions I got almost everything right

78
00:03:22,280 --> 00:03:24,170
but as you can expect with JavaScript it

79
00:03:24,170 --> 00:03:26,239
didn't get everything right anyways I

80
00:03:26,239 --> 00:03:27,579
just like to keep that back in my mind

81
00:03:27,579 --> 00:03:31,040
so I kind of tricked you with the title

82
00:03:31,040 --> 00:03:32,660
of my talk I'm not really here to talk

83
00:03:32,660 --> 00:03:34,160
about the interpreter I'm really here

84
00:03:34,160 --> 00:03:35,510
just to talk about how your code is

85
00:03:35,510 --> 00:03:38,420
processed so sorry that I checked you

86
00:03:38,420 --> 00:03:40,880
there but I really want to spend time

87
00:03:40,880 --> 00:03:43,220
talking about how function objects are

88
00:03:43,220 --> 00:03:46,099
created and then subsequently how what

89
00:03:46,099 --> 00:03:49,430
happens when they're executed so when an

90
00:03:49,430 --> 00:03:51,049
a function object is actually created

91
00:03:51,049 --> 00:03:52,430
several things happen behind the scenes

92
00:03:52,430 --> 00:03:54,829
I've you know listed several things here

93
00:03:54,829 --> 00:03:59,660
and basically all of these steps that

94
00:03:59,660 --> 00:04:01,069
happen during creation they're kind of

95
00:04:01,069 --> 00:04:03,049
encapsulated in this concept called an

96
00:04:03,049 --> 00:04:05,599
execution content context and an

97
00:04:05,599 --> 00:04:08,299
execution context is just a word and

98
00:04:08,299 --> 00:04:10,370
that you this used to kind of

99
00:04:10,370 --> 00:04:11,959
encapsulate the environment that a

100
00:04:11,959 --> 00:04:14,959
certain piece of code that encompasses a

101
00:04:14,959 --> 00:04:20,450
piece of code when it was run so and

102
00:04:20,450 --> 00:04:22,520
fortunately for us or maybe

103
00:04:22,520 --> 00:04:23,960
unfortunately I'm not sure but

104
00:04:23,960 --> 00:04:25,729
everything and JavaScript is dependent

105
00:04:25,729 --> 00:04:30,620
upon an execution context and the good

106
00:04:30,620 --> 00:04:32,180
news is they're only three possible

107
00:04:32,180 --> 00:04:33,650
execution contexts that code can be

108
00:04:33,650 --> 00:04:36,110
evaluated in the first is global the

109
00:04:36,110 --> 00:04:37,849
second is function context and third is

110
00:04:37,849 --> 00:04:40,699
eval and so even luckier I'm not really

111
00:04:40,699 --> 00:04:42,020
gonna talk about eval because it's kind

112
00:04:42,020 --> 00:04:43,250
of not super relevant so we'll just

113
00:04:43,250 --> 00:04:45,560
focus on global execution context and

114
00:04:45,560 --> 00:04:45,980
function

115
00:04:45,980 --> 00:04:50,270
excuse me context um so when you run a

116
00:04:50,270 --> 00:04:53,480
script in the browser it first enters

117
00:04:53,480 --> 00:04:56,090
the global execution context it will

118
00:04:56,090 --> 00:04:58,340
remain there until it finds a function

119
00:04:58,340 --> 00:04:59,840
and then it will subsequently enter a

120
00:04:59,840 --> 00:05:01,760
function execution context so really

121
00:05:01,760 --> 00:05:03,650
most of the time we're dealing with

122
00:05:03,650 --> 00:05:05,270
function execution context and not

123
00:05:05,270 --> 00:05:08,330
necessarily global there is always one

124
00:05:08,330 --> 00:05:10,910
global execution context there can be

125
00:05:10,910 --> 00:05:14,480
infinite number of function contexts so

126
00:05:14,480 --> 00:05:16,490
the tricky bit is a few aren't operating

127
00:05:16,490 --> 00:05:18,080
inside of a function chances are you're

128
00:05:18,080 --> 00:05:20,000
in the global context and that's kind of

129
00:05:20,000 --> 00:05:21,470
why everything is implicitly global

130
00:05:21,470 --> 00:05:23,090
within JavaScript which is kind of one

131
00:05:23,090 --> 00:05:27,830
of the more tricky parts so executing

132
00:05:27,830 --> 00:05:30,290
context are you can kind of like

133
00:05:30,290 --> 00:05:32,330
conceptualize them as operating within a

134
00:05:32,330 --> 00:05:34,220
stack so the first when it first enters

135
00:05:34,220 --> 00:05:36,350
or starts pressing and executing your

136
00:05:36,350 --> 00:05:37,310
script it will enter the global

137
00:05:37,310 --> 00:05:40,460
execution context and then once it finds

138
00:05:40,460 --> 00:05:42,980
a function it will then that functions

139
00:05:42,980 --> 00:05:44,810
like execution context so we push the

140
00:05:44,810 --> 00:05:46,550
top of stack it will operate if it calls

141
00:05:46,550 --> 00:05:48,740
function it'll keep happening and

142
00:05:48,740 --> 00:05:50,150
especially like if a function calls

143
00:05:50,150 --> 00:05:51,260
itself recursively that'll still

144
00:05:51,260 --> 00:05:52,760
continue to happen it will continue to

145
00:05:52,760 --> 00:05:54,410
enter a new function execution context

146
00:05:54,410 --> 00:05:56,720
every time its evaluated but then once

147
00:05:56,720 --> 00:05:58,760
it's finished evaluating or executing it

148
00:05:58,760 --> 00:05:59,870
will release control back to the

149
00:05:59,870 --> 00:06:01,670
execution context it called it and be

150
00:06:01,670 --> 00:06:08,090
popped from the stack so this is how I

151
00:06:08,090 --> 00:06:09,770
like to visually conceptualize an

152
00:06:09,770 --> 00:06:11,540
execution context that's it's not an

153
00:06:11,540 --> 00:06:13,010
actual object it's just something behind

154
00:06:13,010 --> 00:06:15,770
the scenes but I like to think of it as

155
00:06:15,770 --> 00:06:18,460
an object that contains other objects

156
00:06:18,460 --> 00:06:21,020
and the three things that we're really

157
00:06:21,020 --> 00:06:22,880
concerned with that happen are this

158
00:06:22,880 --> 00:06:25,340
activation object inside the execution

159
00:06:25,340 --> 00:06:28,340
contests context the value of the scope

160
00:06:28,340 --> 00:06:29,960
chain so what's in scope for this

161
00:06:29,960 --> 00:06:31,730
particular function and then the value

162
00:06:31,730 --> 00:06:36,140
of this so here's the tricky part I hope

163
00:06:36,140 --> 00:06:37,640
I get this right this is insanely

164
00:06:37,640 --> 00:06:40,190
complicated so what happens inside of an

165
00:06:40,190 --> 00:06:42,920
execution context when it is created the

166
00:06:42,920 --> 00:06:43,970
first thing that happens is an

167
00:06:43,970 --> 00:06:46,370
activation object is created an

168
00:06:46,370 --> 00:06:48,849
activation object is

169
00:06:48,849 --> 00:06:51,249
I mean I like to think of it like an

170
00:06:51,249 --> 00:06:52,629
object but the first thing that happens

171
00:06:52,629 --> 00:06:55,179
is a property is appended to it called

172
00:06:55,179 --> 00:06:57,429
arguments and it's just a list of all

173
00:06:57,429 --> 00:06:59,490
the arguments applied to the function

174
00:06:59,490 --> 00:07:01,719
and then the second thing that happens

175
00:07:01,719 --> 00:07:03,039
oh and I should note that this happens

176
00:07:03,039 --> 00:07:05,169
in order when when the context is

177
00:07:05,169 --> 00:07:07,149
actually created so the second thing

178
00:07:07,149 --> 00:07:10,029
that happens is scope is defined and

179
00:07:10,029 --> 00:07:15,429
this is hard for me to articulate so

180
00:07:15,429 --> 00:07:18,789
scope it's basically a chain of objects

181
00:07:18,789 --> 00:07:21,189
or object like things that are available

182
00:07:21,189 --> 00:07:24,069
to this function or everything that's a

183
00:07:24,069 --> 00:07:25,449
yeah in scope and available to this

184
00:07:25,449 --> 00:07:27,249
function so all the identifiers that it

185
00:07:27,249 --> 00:07:31,839
can resolve are included in scope maybe

186
00:07:31,839 --> 00:07:33,219
I won't get back to that later I have

187
00:07:33,219 --> 00:07:34,419
another slide that discusses that in

188
00:07:34,419 --> 00:07:36,069
more detail but the third thing that

189
00:07:36,069 --> 00:07:37,749
happens is variable instantiation and

190
00:07:37,749 --> 00:07:38,949
this is where things can get a little

191
00:07:38,949 --> 00:07:42,789
bit tricky so first well actually one

192
00:07:42,789 --> 00:07:43,779
thing that happens is so there's this

193
00:07:43,779 --> 00:07:45,309
activation object that I mentioned

194
00:07:45,309 --> 00:07:48,039
that's created first and then a scope is

195
00:07:48,039 --> 00:07:49,959
defined so at this point when variable

196
00:07:49,959 --> 00:07:51,669
instantiation happens the activation

197
00:07:51,669 --> 00:07:54,699
object kind of magically is turned into

198
00:07:54,699 --> 00:07:56,829
something called a variable object and

199
00:07:56,829 --> 00:07:58,180
and basically what happens are the

200
00:07:58,180 --> 00:08:00,669
parameters that are defined inside the

201
00:08:00,669 --> 00:08:02,949
function are added as properties to this

202
00:08:02,949 --> 00:08:06,099
object the values are signed as the

203
00:08:06,099 --> 00:08:08,139
resulting arguments that are passed in

204
00:08:08,139 --> 00:08:11,409
the function and it's yeah and then the

205
00:08:11,409 --> 00:08:12,519
second thing that happens or function

206
00:08:12,519 --> 00:08:14,619
declarations so if there's a named

207
00:08:14,619 --> 00:08:16,719
function the name is appended into this

208
00:08:16,719 --> 00:08:19,269
variable object and the value is a

209
00:08:19,269 --> 00:08:23,169
pointer to the function object itself so

210
00:08:23,169 --> 00:08:24,519
yeah the name is the property and the

211
00:08:24,519 --> 00:08:25,689
function pointer to the function object

212
00:08:25,689 --> 00:08:27,579
is the value and so the third thing that

213
00:08:27,579 --> 00:08:30,639
happens our variable names are appended

214
00:08:30,639 --> 00:08:33,490
to this object and the important thing

215
00:08:33,490 --> 00:08:35,649
to remember here is the variable values

216
00:08:35,649 --> 00:08:37,779
assigned to the property name are

217
00:08:37,779 --> 00:08:40,750
undefined and also another like weird

218
00:08:40,750 --> 00:08:43,209
thing to think about so when the

219
00:08:43,209 --> 00:08:45,160
variable is changed or when and variable

220
00:08:45,160 --> 00:08:47,380
instantiation is happening so first like

221
00:08:47,380 --> 00:08:49,209
I said parameters are defined and their

222
00:08:49,209 --> 00:08:50,290
values are the arguments

223
00:08:50,290 --> 00:08:52,600
the second thing function names are

224
00:08:52,600 --> 00:08:55,269
supplied as properties and their values

225
00:08:55,269 --> 00:08:57,720
are pointer to the function object

226
00:08:57,720 --> 00:08:59,980
variable names so if there happens to be

227
00:08:59,980 --> 00:09:01,170
a variable name that she

228
00:09:01,170 --> 00:09:04,529
name identifiers as a function it will

229
00:09:04,529 --> 00:09:07,560
be overwritten or dos pardon me it won't

230
00:09:07,560 --> 00:09:09,720
be over and it'll just be ignored so

231
00:09:09,720 --> 00:09:11,420
that's just something to keep in mind

232
00:09:11,420 --> 00:09:14,339
and also one other thing to keep in mind

233
00:09:14,339 --> 00:09:16,800
is the variable names are are put into

234
00:09:16,800 --> 00:09:18,420
this variable object but the values are

235
00:09:18,420 --> 00:09:20,940
undefined um so if you ever see hosting

236
00:09:20,940 --> 00:09:24,000
that's mostly what that's about so if

237
00:09:24,000 --> 00:09:26,610
you're trying to reference a variable

238
00:09:26,610 --> 00:09:28,139
before it's actually been executed or

239
00:09:28,139 --> 00:09:30,630
like assigned with the equal sign like

240
00:09:30,630 --> 00:09:32,070
in the code

241
00:09:32,070 --> 00:09:35,070
it'll be undefined until that point and

242
00:09:35,070 --> 00:09:36,149
so the last thing that happens is the

243
00:09:36,149 --> 00:09:39,660
value of this is defined and let's see

244
00:09:39,660 --> 00:09:44,190
this is tricky but I tried to like I

245
00:09:44,190 --> 00:09:45,899
tried to make it as simple as I possibly

246
00:09:45,899 --> 00:09:48,149
could this holds a reference to the

247
00:09:48,149 --> 00:09:49,589
object that the functions being applied

248
00:09:49,589 --> 00:09:52,709
to at runtime which is tricky because

249
00:09:52,709 --> 00:09:55,399
functions will be passed around so

250
00:09:55,399 --> 00:09:57,660
anyways that's that's how I try to like

251
00:09:57,660 --> 00:09:58,889
simplify that in my mind whenever I'm

252
00:09:58,889 --> 00:10:01,050
debugging or going through code okay so

253
00:10:01,050 --> 00:10:03,540
I promised I would talk more about scope

254
00:10:03,540 --> 00:10:06,810
so basically scope is this context

255
00:10:06,810 --> 00:10:09,740
variable object at the the forefront so

256
00:10:09,740 --> 00:10:12,269
when if you're trying to like resolve an

257
00:10:12,269 --> 00:10:13,410
identifier like the name is like a

258
00:10:13,410 --> 00:10:15,300
property or a variable it's gonna check

259
00:10:15,300 --> 00:10:17,490
this functions variable object first but

260
00:10:17,490 --> 00:10:19,649
also at when this execution context is

261
00:10:19,649 --> 00:10:21,300
created it stores a reference to its

262
00:10:21,300 --> 00:10:23,250
parents variable object which wouldn't

263
00:10:23,250 --> 00:10:25,079
turn can't contain a reference to its

264
00:10:25,079 --> 00:10:26,820
parents variable object all the way up

265
00:10:26,820 --> 00:10:29,730
until the global until you reach the the

266
00:10:29,730 --> 00:10:31,290
global execution context or the the

267
00:10:31,290 --> 00:10:34,740
global variable object so that's that's

268
00:10:34,740 --> 00:10:36,360
what lexical scoping is all about and

269
00:10:36,360 --> 00:10:37,529
that's why scoping can only happen

270
00:10:37,529 --> 00:10:39,029
within a function because it's actually

271
00:10:39,029 --> 00:10:40,620
scope is only defined within a function

272
00:10:40,620 --> 00:10:43,380
execution context and one interesting

273
00:10:43,380 --> 00:10:44,970
thing to note about variable

274
00:10:44,970 --> 00:10:47,699
instantiation when your script is first

275
00:10:47,699 --> 00:10:49,980
run and your instill in the global

276
00:10:49,980 --> 00:10:51,930
execution context all the top-level

277
00:10:51,930 --> 00:10:54,240
variables and functions go through the

278
00:10:54,240 --> 00:10:55,709
same process so they actually become

279
00:10:55,709 --> 00:10:58,610
members of the Global's the the global

280
00:10:58,610 --> 00:11:03,060
objects variable object that's I know

281
00:11:03,060 --> 00:11:04,290
that's like super crazy but if you have

282
00:11:04,290 --> 00:11:05,610
a top-level function that's why the

283
00:11:05,610 --> 00:11:07,769
value of this applies to the window

284
00:11:07,769 --> 00:11:10,410
because it at that point like after it's

285
00:11:10,410 --> 00:11:12,089
been processed that function itself is

286
00:11:12,089 --> 00:11:15,900
now a member of the global object

287
00:11:15,910 --> 00:11:17,990
and another way to like think about the

288
00:11:17,990 --> 00:11:20,080
value is this as it points to the object

289
00:11:20,080 --> 00:11:23,690
at which the function is applied so I

290
00:11:23,690 --> 00:11:26,180
know that's super tricky okay so that's

291
00:11:26,180 --> 00:11:29,810
creation it's kind of crazy and I hope I

292
00:11:29,810 --> 00:11:31,490
explained it in a coherent way we'll see

293
00:11:31,490 --> 00:11:33,529
that remains to be seen but after that

294
00:11:33,529 --> 00:11:35,810
activation so basically after a function

295
00:11:35,810 --> 00:11:38,750
has been created it runs and the the

296
00:11:38,750 --> 00:11:42,770
code execution stage begins okay so I

297
00:11:42,770 --> 00:11:44,420
just wanted to take a moment to talk

298
00:11:44,420 --> 00:11:49,520
briefly about closures because I have a

299
00:11:49,520 --> 00:11:51,890
feeling that or I know I personally

300
00:11:51,890 --> 00:11:53,510
until I really learned about the

301
00:11:53,510 --> 00:11:55,310
variable object of scoping and like what

302
00:11:55,310 --> 00:11:56,960
that truly means I had no idea really

303
00:11:56,960 --> 00:11:59,210
what closures were about and so I have a

304
00:11:59,210 --> 00:12:00,680
kind of complicated definition up here

305
00:12:00,680 --> 00:12:02,750
but I'm going to simplify it but

306
00:12:02,750 --> 00:12:04,190
basically a closure is formed when an

307
00:12:04,190 --> 00:12:05,420
inner function is made accessible

308
00:12:05,420 --> 00:12:07,010
outside of the function which was

309
00:12:07,010 --> 00:12:08,570
contained so imagine if you had an inner

310
00:12:08,570 --> 00:12:10,400
function the outer function returns that

311
00:12:10,400 --> 00:12:12,740
inner function so basically what's

312
00:12:12,740 --> 00:12:14,570
happening there is the inner function

313
00:12:14,570 --> 00:12:16,339
contains a reference to its parents

314
00:12:16,339 --> 00:12:17,540
variable object and when you actually

315
00:12:17,540 --> 00:12:21,410
return it you make that available for

316
00:12:21,410 --> 00:12:22,670
when that inner function is executed

317
00:12:22,670 --> 00:12:26,510
outside of of its normal context you've

318
00:12:26,510 --> 00:12:28,160
effectively closed over that variable

319
00:12:28,160 --> 00:12:31,580
object and make it available um and so

320
00:12:31,580 --> 00:12:33,620
that's what that's all about and I truly

321
00:12:33,620 --> 00:12:34,850
did not think I would blow through that

322
00:12:34,850 --> 00:12:38,810
so quickly but I did I'm really happy to

323
00:12:38,810 --> 00:12:48,840
answer questions if anyone hasn't

324
00:12:48,850 --> 00:12:52,430
so yeah are there any questions out

325
00:12:52,430 --> 00:12:55,760
there I can bring you a mic and your can

326
00:12:55,760 --> 00:12:57,770
just find me either on the internet or

327
00:12:57,770 --> 00:12:59,390
in real life you can talk to me about

328
00:12:59,390 --> 00:13:04,340
this oh we do we have a question so when

329
00:13:04,340 --> 00:13:09,050
you talked about the I forget whether it

330
00:13:09,050 --> 00:13:10,670
was the context object or something we

331
00:13:10,670 --> 00:13:13,430
have the activation record and all that

332
00:13:13,430 --> 00:13:13,910
stuff

333
00:13:13,910 --> 00:13:16,220
are there any interpreters where this

334
00:13:16,220 --> 00:13:19,460
object is actually exposed no it's just

335
00:13:19,460 --> 00:13:21,260
like an implementation construct so it's

336
00:13:21,260 --> 00:13:22,580
just something that happens behind the

337
00:13:22,580 --> 00:13:24,140
scenes and it's not an actual object

338
00:13:24,140 --> 00:13:25,880
like I just think about it that way like

339
00:13:25,880 --> 00:13:27,560
it doesn't have a prototype or anything

340
00:13:27,560 --> 00:13:31,460
like that it's just like basically it

341
00:13:31,460 --> 00:13:33,050
like assigns all the values to all the

342
00:13:33,050 --> 00:13:35,000
things you have access to within that

343
00:13:35,000 --> 00:13:36,110
function within the context of

344
00:13:36,110 --> 00:13:39,500
whatever's running in memory it makes me

345
00:13:39,500 --> 00:13:40,850
wonder after seeing Dominic's talk

346
00:13:40,850 --> 00:13:43,790
earlier whether we need to convince some

347
00:13:43,790 --> 00:13:45,350
of the VM implementers that they should

348
00:13:45,350 --> 00:13:46,760
actually expose these kind of things

349
00:13:46,760 --> 00:13:48,590
because you can do this I mean small

350
00:13:48,590 --> 00:13:51,350
talk did this and and other languages do

351
00:13:51,350 --> 00:13:52,580
this and you can do some really fun

352
00:13:52,580 --> 00:13:55,730
stuff that sounds super fun it sounds

353
00:13:55,730 --> 00:13:56,930
like you're adding complexity it makes

354
00:13:56,930 --> 00:13:58,610
me nervous yeah you're gonna fight with

355
00:13:58,610 --> 00:14:02,750
eval and I friends yeah a couple people

356
00:14:02,750 --> 00:14:04,460
wanted to like kill me when I said that

357
00:14:04,460 --> 00:14:08,720
we have any other questions yeah II

358
00:14:08,720 --> 00:14:10,400
thought wasn't inherently bad it's just

359
00:14:10,400 --> 00:14:13,310
inherently dangerous right but I just

360
00:14:13,310 --> 00:14:17,210
prefer not to talk about it hey Martha

361
00:14:17,210 --> 00:14:19,460
can you spend the word on block scopes

362
00:14:19,460 --> 00:14:22,370
oh yeah so one of the tricky things

363
00:14:22,370 --> 00:14:24,770
about JavaScript is it looks a lot like

364
00:14:24,770 --> 00:14:26,870
see like it kind of borrowed a lot of

365
00:14:26,870 --> 00:14:28,670
the same syntax so and see everything is

366
00:14:28,670 --> 00:14:31,760
scoped its scoped by block so like an if

367
00:14:31,760 --> 00:14:33,890
statement or something like there the

368
00:14:33,890 --> 00:14:35,480
scope would be contained within that

369
00:14:35,480 --> 00:14:39,230
block but unfortunately it / fortunately

370
00:14:39,230 --> 00:14:43,130
for us with an javascript scope is not

371
00:14:43,130 --> 00:14:44,870
defined within like an if statement it's

372
00:14:44,870 --> 00:14:47,900
only defined within a function so that's

373
00:14:47,900 --> 00:14:49,340
why if you train like reference a

374
00:14:49,340 --> 00:14:50,630
variable inside like a for loop or

375
00:14:50,630 --> 00:14:52,370
something it's not actually scoped

376
00:14:52,370 --> 00:14:53,540
within the loop its scoped within the

377
00:14:53,540 --> 00:14:55,580
function that contains the loop that

378
00:14:55,580 --> 00:14:56,820
help

379
00:14:56,820 --> 00:15:00,040
maybe but yeah there's no bloc scoping

380
00:15:00,040 --> 00:15:02,080
only function scoping or its global

381
00:15:02,080 --> 00:15:06,339
those are your two options more

382
00:15:06,339 --> 00:15:12,339
questions okay I know we have so much

383
00:15:12,339 --> 00:15:15,610
time I have no idea how I rambled so

384
00:15:15,610 --> 00:15:23,529
quickly so is it ever possible to point

385
00:15:23,529 --> 00:15:26,709
to like the parent scope is it kind of

386
00:15:26,709 --> 00:15:27,670
sounded like it because you mention

387
00:15:27,670 --> 00:15:30,339
there's always a references up yeah

388
00:15:30,339 --> 00:15:31,450
that's actually happens for you

389
00:15:31,450 --> 00:15:33,820
implicitly you always have a reference

390
00:15:33,820 --> 00:15:36,640
to like an in the in the scope property

391
00:15:36,640 --> 00:15:38,529
like in the execution context it always

392
00:15:38,529 --> 00:15:40,300
has a pointer to the parents scope

393
00:15:40,300 --> 00:15:42,130
that's why I like Global's are implicit

394
00:15:42,130 --> 00:15:43,839
because it will eventually like you the

395
00:15:43,839 --> 00:15:45,100
scope will eventually resolve all the

396
00:15:45,100 --> 00:15:47,200
way up to the global level so right so

397
00:15:47,200 --> 00:15:48,370
you can always like access named

398
00:15:48,370 --> 00:15:50,170
properties of like the parent scope but

399
00:15:50,170 --> 00:15:51,520
you can never reference it directly

400
00:15:51,520 --> 00:15:54,730
right like parent this only if your turn

401
00:15:54,730 --> 00:15:58,839
it returned a reference to that to like

402
00:15:58,839 --> 00:16:00,370
what the context inside the function

403
00:16:00,370 --> 00:16:01,930
outside like a closure like that be the

404
00:16:01,930 --> 00:16:05,140
only way that you could do that or

405
00:16:05,140 --> 00:16:09,490
window or global and node don't do that

406
00:16:09,490 --> 00:16:19,120
though can you talk about just kind of I

407
00:16:19,120 --> 00:16:21,339
guess how you got started with reading

408
00:16:21,339 --> 00:16:24,540
more into the actual implementation yeah

409
00:16:24,540 --> 00:16:26,950
like how you learned all this stuff yeah

410
00:16:26,950 --> 00:16:29,230
yeah so actually a fun in fact I'm glad

411
00:16:29,230 --> 00:16:30,459
we get to talk about this this is much

412
00:16:30,459 --> 00:16:33,250
better than whatever I just did I have

413
00:16:33,250 --> 00:16:35,440
an art degree I totally self-taught I

414
00:16:35,440 --> 00:16:37,060
went to her school highly recommend it

415
00:16:37,060 --> 00:16:39,820
wonderful program but for some reason

416
00:16:39,820 --> 00:16:42,579
like even like through my like school

417
00:16:42,579 --> 00:16:43,870
like through high school of that like I

418
00:16:43,870 --> 00:16:45,579
kind of have to completely immerse

419
00:16:45,579 --> 00:16:46,839
myself with something and I don't feel

420
00:16:46,839 --> 00:16:48,250
like I felt comfortable going forward

421
00:16:48,250 --> 00:16:49,630
until I know every small detail about

422
00:16:49,630 --> 00:16:50,260
every little thing

423
00:16:50,260 --> 00:16:52,630
so I just like googled a lot and the

424
00:16:52,630 --> 00:16:53,829
internet it a lot and all of that but

425
00:16:53,829 --> 00:16:55,329
reading the actual like Eknath

426
00:16:55,329 --> 00:16:58,870
specifications or amazing so yeah it's

427
00:16:58,870 --> 00:17:02,230
just curiosity or sometimes like I'm

428
00:17:02,230 --> 00:17:04,270
really guilty whenever I'm coding I'm

429
00:17:04,270 --> 00:17:05,199
just like banging my

430
00:17:05,199 --> 00:17:07,600
and my hands and my heart against the

431
00:17:07,600 --> 00:17:08,829
keyboard and then not really

432
00:17:08,829 --> 00:17:10,509
understanding what's happening and so I

433
00:17:10,509 --> 00:17:11,919
think reading and researching kind of

434
00:17:11,919 --> 00:17:13,480
gives me a chance to step back and

435
00:17:13,480 --> 00:17:16,299
actually understand what's happening but

436
00:17:16,299 --> 00:17:18,609
yeah I read specification it's pretty

437
00:17:18,609 --> 00:17:20,859
awesome for both a little weird

438
00:17:20,859 --> 00:17:23,139
maybe maybe that would be a chance for

439
00:17:23,139 --> 00:17:24,429
me to write some blog posts or maybe a

440
00:17:24,429 --> 00:17:28,600
little simplified but yeah it's a

441
00:17:28,600 --> 00:17:30,190
question from Brian what is hacker

442
00:17:30,190 --> 00:17:32,259
school Oh hacker school is a three month

443
00:17:32,259 --> 00:17:35,080
program in New York City and they call

444
00:17:35,080 --> 00:17:37,149
it a writer's retreat for hackers or

445
00:17:37,149 --> 00:17:39,999
programmers they do prefer that you have

446
00:17:39,999 --> 00:17:42,100
some experience before you go I

447
00:17:42,100 --> 00:17:44,109
shouldn't admit this publicly but I lied

448
00:17:44,109 --> 00:17:47,230
on my application and somehow I I still

449
00:17:47,230 --> 00:17:48,460
made it through the technical interview

450
00:17:48,460 --> 00:17:52,080
anyways so but they're wonderful

451
00:17:52,080 --> 00:17:53,950
yeah it's just basically three months

452
00:17:53,950 --> 00:17:55,629
for you to do whatever you want and they

453
00:17:55,629 --> 00:17:57,090
they give you a lot of resources to

454
00:17:57,090 --> 00:17:59,350
mentors and they focus on open source

455
00:17:59,350 --> 00:18:01,600
and it's a really like non-judgmental

456
00:18:01,600 --> 00:18:03,460
atmosphere you can ask any question and

457
00:18:03,460 --> 00:18:06,869
I really appreciated that about it I

458
00:18:06,869 --> 00:18:09,279
really need to book a car somewhere

459
00:18:09,279 --> 00:18:11,889
could you help with that I can't I can't

460
00:18:11,889 --> 00:18:15,039
in Berlin yes you do burn any more

461
00:18:15,039 --> 00:18:20,230
questions I just wanted to mention to

462
00:18:20,230 --> 00:18:21,820
the earlier question about whether you

463
00:18:21,820 --> 00:18:24,029
can whether there's any way of actually

464
00:18:24,029 --> 00:18:26,470
inspecting sort of like the the scope

465
00:18:26,470 --> 00:18:29,470
chain if anyone saw my talk earlier you

466
00:18:29,470 --> 00:18:31,330
can you can actually use something like

467
00:18:31,330 --> 00:18:32,049
a Suprema

468
00:18:32,049 --> 00:18:34,840
to rewrite your JavaScript so that you

469
00:18:34,840 --> 00:18:36,399
actually have an object which knows

470
00:18:36,399 --> 00:18:38,769
which scope of function was identified

471
00:18:38,769 --> 00:18:41,409
in so you can do some pretty fun stuff

472
00:18:41,409 --> 00:18:45,909
with that nice callback to an earlier

473
00:18:45,909 --> 00:18:47,730
talk yeah yeah

474
00:18:47,730 --> 00:18:55,289
I am actually here all day okay yeah I

475
00:18:55,289 --> 00:18:55,590
know

476
00:18:55,590 --> 00:18:58,200
we're exhausting cool topics well it is

477
00:18:58,200 --> 00:19:00,960
lunchtime so we're using the amazing

478
00:19:00,960 --> 00:19:04,289
innovative radial system for lunch but I

479
00:19:04,289 --> 00:19:05,340
don't know what that means

