1
00:00:00,000 --> 00:00:02,100

this is my first conference talk so I

2
00:00:02,100 --> 00:00:04,520
apologize it's horrible fair with me

3
00:00:04,520 --> 00:00:08,820
what I'm talking about is cool so I am

4
00:00:08,820 --> 00:00:11,219
John Lennon dilla and you can find me on

5
00:00:11,219 --> 00:00:14,580
github under the same name as well as on

6
00:00:14,580 --> 00:00:16,320
Twitter will be talking about bizarre

7
00:00:16,320 --> 00:00:19,350
all out which is the beginnings of a

8
00:00:19,350 --> 00:00:23,010
tool for happy to do some static

9
00:00:23,010 --> 00:00:25,740
analysis as well as dynamic analysis to

10
00:00:25,740 --> 00:00:29,099
help make secure apps so I first want to

11
00:00:29,099 --> 00:00:32,009
look at why we lack good security tools

12
00:00:32,009 --> 00:00:35,070
in node as it is right now one of the

13
00:00:35,070 --> 00:00:37,890
main reasons is that a javascript is

14
00:00:37,890 --> 00:00:41,190
pretty free you can do a whole lot of

15
00:00:41,190 --> 00:00:42,420
different things with it you can use

16
00:00:42,420 --> 00:00:44,219
just about any programming paradigm that

17
00:00:44,219 --> 00:00:46,590
you want which means that it's hard to

18
00:00:46,590 --> 00:00:49,170
make a static pattern you can look

19
00:00:49,170 --> 00:00:51,719
through in an application and find out

20
00:00:51,719 --> 00:00:54,449
okay well this this particular method is

21
00:00:54,449 --> 00:00:57,270
bad it's a it's an insecure default kind

22
00:00:57,270 --> 00:01:03,420
of thing right so happy happens to help

23
00:01:03,420 --> 00:01:06,960
that problem a little bit by creating

24
00:01:06,960 --> 00:01:11,159
some more structure which you can see we

25
00:01:11,159 --> 00:01:14,220
can do this in rails because the rails

26
00:01:14,220 --> 00:01:16,200
has clearly defined patterns and secure

27
00:01:16,200 --> 00:01:18,420
defaults it's a lot more structured than

28
00:01:18,420 --> 00:01:21,810
most note frameworks are that's why you

29
00:01:21,810 --> 00:01:23,250
can do things like break man which

30
00:01:23,250 --> 00:01:25,350
everybody loves really simple to use and

31
00:01:25,350 --> 00:01:28,799
it works because there's good defaults

32
00:01:28,799 --> 00:01:30,930
everything's unified you're using a one

33
00:01:30,930 --> 00:01:32,939
consistent library to do your

34
00:01:32,939 --> 00:01:34,650
connections to databases and things like

35
00:01:34,650 --> 00:01:37,259
that or is in the the more not nodular

36
00:01:37,259 --> 00:01:38,790
modular space of note you're going to be

37
00:01:38,790 --> 00:01:42,150
using possibly any kind of database

38
00:01:42,150 --> 00:01:46,229
connection right and no it doesn't

39
00:01:46,229 --> 00:01:48,750
really have the secure defaults and

40
00:01:48,750 --> 00:01:52,649
clearly defined patterns instead you got

41
00:01:52,649 --> 00:01:56,009
to handle them yourselves the trade-off

42
00:01:56,009 --> 00:01:58,110
for the freedom is similar to the

43
00:01:58,110 --> 00:01:59,280
problem that you're going to find it any

44
00:01:59,280 --> 00:02:02,399
complex parser if you want the parser to

45
00:02:02,399 --> 00:02:04,200
handle the input well you have to define

46
00:02:04,200 --> 00:02:06,420
clear structures and fail when the

47
00:02:06,420 --> 00:02:08,550
structures are corrupted when there's no

48
00:02:08,550 --> 00:02:10,950
structure there's no parsing if you try

49
00:02:10,950 --> 00:02:13,860
and put a piece of random binary data in

50
00:02:13,860 --> 00:02:16,370
to your PDF reader it's going to crash

51
00:02:16,370 --> 00:02:18,720
we have a great tool for overcoming this

52
00:02:18,720 --> 00:02:21,030
though and happy validating all data

53
00:02:21,030 --> 00:02:23,880
structures is the norm rather than an

54
00:02:23,880 --> 00:02:26,370
outlier it's it's what people do the

55
00:02:26,370 --> 00:02:28,080
more common thing you'll see in a happy

56
00:02:28,080 --> 00:02:30,990
application is validators for everything

57
00:02:30,990 --> 00:02:36,390
which is awesome structure and happy is

58
00:02:36,390 --> 00:02:39,090
not optional it's consistent it's

59
00:02:39,090 --> 00:02:41,730
validated it doesn't let you do a lot of

60
00:02:41,730 --> 00:02:44,520
crazy things that other frameworks let

61
00:02:44,520 --> 00:02:46,860
you do which I really a security person

62
00:02:46,860 --> 00:02:49,740
I think that's great and it allows me to

63
00:02:49,740 --> 00:02:52,350
parse the routing table it allows me to

64
00:02:52,350 --> 00:02:55,170
parse various configuration options

65
00:02:55,170 --> 00:02:57,390
within the application and actually

66
00:02:57,390 --> 00:02:59,190
verify that some of those things are

67
00:02:59,190 --> 00:03:02,370
secure so laut is already utilized this

68
00:03:02,370 --> 00:03:05,910
and as we saw in previous talks things

69
00:03:05,910 --> 00:03:08,580
like happy swagger have utilized this to

70
00:03:08,580 --> 00:03:11,820
make auto documentation tools so you can

71
00:03:11,820 --> 00:03:14,610
see documentation for your routes well I

72
00:03:14,610 --> 00:03:17,459
was working on something similar a

73
00:03:17,459 --> 00:03:19,080
couple months ago and thought you know

74
00:03:19,080 --> 00:03:21,540
what I wonder if I could use this to

75
00:03:21,540 --> 00:03:24,720
actually test the application and fuzz

76
00:03:24,720 --> 00:03:26,940
it without having to give it a whole lot

77
00:03:26,940 --> 00:03:33,480
of manual context and this brings us

78
00:03:33,480 --> 00:03:35,790
back to the beginning the security

79
00:03:35,790 --> 00:03:37,410
animation is difficult because there's

80
00:03:37,410 --> 00:03:40,220
so little consistent structuring node

81
00:03:40,220 --> 00:03:44,370
but happy solves that problem so break

82
00:03:44,370 --> 00:03:46,230
man is two rails as a bizarre lout is

83
00:03:46,230 --> 00:03:48,360
the happy that's kind of what I'm trying

84
00:03:48,360 --> 00:03:52,230
to build for the happy space it's a work

85
00:03:52,230 --> 00:03:54,930
in progress I've begun work on it I had

86
00:03:54,930 --> 00:03:56,730
something that has worked but it's a

87
00:03:56,730 --> 00:04:00,180
very very complex problem and I'll just

88
00:04:00,180 --> 00:04:02,730
say that converting from happy 72 happy

89
00:04:02,730 --> 00:04:04,769
eight completely broke everything

90
00:04:04,769 --> 00:04:06,840
because when you're dealing with like

91
00:04:06,840 --> 00:04:10,019
parsing complex internal routing tables

92
00:04:10,019 --> 00:04:14,010
it's it's a lot more complex of a change

93
00:04:14,010 --> 00:04:17,959
right so I've got laut as a foundation

94
00:04:17,959 --> 00:04:21,870
for the beginnings of the the parsing of

95
00:04:21,870 --> 00:04:23,669
the routing table with some things added

96
00:04:23,669 --> 00:04:26,970
on there so I can I can warn about some

97
00:04:26,970 --> 00:04:29,650
basic stuff

98
00:04:29,660 --> 00:04:31,980
but there's also parts of your

99
00:04:31,980 --> 00:04:34,350
application like your route handlers

100
00:04:34,350 --> 00:04:37,170
themselves that are still not going to

101
00:04:37,170 --> 00:04:39,990
be using a necessarily a set pattern

102
00:04:39,990 --> 00:04:41,910
like you can use promises or you can use

103
00:04:41,910 --> 00:04:45,390
callbacks you can use any kind of

104
00:04:45,390 --> 00:04:48,060
database you want or connection library

105
00:04:48,060 --> 00:04:50,250
that you want right so that kind of

106
00:04:50,250 --> 00:04:52,050
stuff is difficult to parse once again

107
00:04:52,050 --> 00:04:56,430
so what I've done is to use that routing

108
00:04:56,430 --> 00:04:58,320
table information to pull out your

109
00:04:58,320 --> 00:04:59,730
parameters that you're going to be

110
00:04:59,730 --> 00:05:03,270
expecting in the API get types for them

111
00:05:03,270 --> 00:05:05,610
like string number whatever find out

112
00:05:05,610 --> 00:05:06,930
what you're looking for in the API

113
00:05:06,930 --> 00:05:10,860
endpoint and actually inject a very

114
00:05:10,860 --> 00:05:12,900
complicated set of fuzzing algorithms

115
00:05:12,900 --> 00:05:16,290
that I don't have time to explain but

116
00:05:16,290 --> 00:05:18,750
yeah it's pretty cool stuff I'm excited

117
00:05:18,750 --> 00:05:24,840
mostly about that part so given the lack

118
00:05:24,840 --> 00:05:27,180
of the developer friendly API and most

119
00:05:27,180 --> 00:05:29,400
security tools they're kind of a pain to

120
00:05:29,400 --> 00:05:32,310
work with even if you do security

121
00:05:32,310 --> 00:05:34,890
they're terrible I'm sure your thing in

122
00:05:34,890 --> 00:05:37,140
what constitutes these secure defaults

123
00:05:37,140 --> 00:05:39,479
that you're talking about is bizarre all

124
00:05:39,479 --> 00:05:41,850
out really effective and most

125
00:05:41,850 --> 00:05:44,010
importantly how much time and effort is

126
00:05:44,010 --> 00:05:48,540
this going to cost me to actually use so

127
00:05:48,540 --> 00:05:50,490
secure defaults this is what I have

128
00:05:50,490 --> 00:05:53,760
right now these components were working

129
00:05:53,760 --> 00:05:57,000
at some point now they're kind of

130
00:05:57,000 --> 00:05:59,100
disconnected and I've got to link them

131
00:05:59,100 --> 00:06:00,540
back together so unfortunately won't be

132
00:06:00,540 --> 00:06:03,120
able to have a demo but are there an

133
00:06:03,120 --> 00:06:05,729
authenticated routes this first one

134
00:06:05,729 --> 00:06:07,470
really simple you just check the route

135
00:06:07,470 --> 00:06:09,419
handler see if there's there's a no

136
00:06:09,419 --> 00:06:11,970
offset all the routes have CSRF

137
00:06:11,970 --> 00:06:14,940
protection on are the input fields

138
00:06:14,940 --> 00:06:17,720
validated or rejected do you allow

139
00:06:17,720 --> 00:06:20,130
unvalidated input fields do you have

140
00:06:20,130 --> 00:06:23,180
empty validate handlers in your routes

141
00:06:23,180 --> 00:06:26,190
and as their sensitive data being

142
00:06:26,190 --> 00:06:29,100
compared in securely I can check that

143
00:06:29,100 --> 00:06:32,040
with some simple static analysis stuff

144
00:06:32,040 --> 00:06:35,310
as well so is bizarre a lot effective

145
00:06:35,310 --> 00:06:38,370
well within the first 10 seconds of

146
00:06:38,370 --> 00:06:40,080
turning it on I found a denial of

147
00:06:40,080 --> 00:06:41,520
service issue with a

148
00:06:41,520 --> 00:06:44,099
process next stick in a pretty popular

149
00:06:44,099 --> 00:06:49,050
module and last night there is this so i

150
00:06:49,050 --> 00:06:55,409
have a repeatable segments in v8 core so

151
00:06:55,409 --> 00:06:58,250
that was that was a fun 2 a.m. adventure

152
00:06:58,250 --> 00:07:01,349
here's the bad news though it's not

153
00:07:01,349 --> 00:07:03,360
finished yet it's far from ready for

154
00:07:03,360 --> 00:07:06,690
production use I'm working on it but I

155
00:07:06,690 --> 00:07:09,560
have a day job as well so I don't have a

156
00:07:09,560 --> 00:07:13,560
vast amount of time to put into this but

157
00:07:13,560 --> 00:07:16,610
I am working on it as one of my primary

158
00:07:16,610 --> 00:07:20,520
projects right now so it's it's

159
00:07:20,520 --> 00:07:23,280
currently more of a proof of concept you

160
00:07:23,280 --> 00:07:25,349
can use it if you're interested in that

161
00:07:25,349 --> 00:07:28,620
to fuzz the internals of node and v8 but

162
00:07:28,620 --> 00:07:30,960
it's not going to be terribly

163
00:07:30,960 --> 00:07:34,860
informative for actually figuring out

164
00:07:34,860 --> 00:07:36,120
the security of your application right

165
00:07:36,120 --> 00:07:38,969
now but what I want to be able to do

166
00:07:38,969 --> 00:07:41,009
with this is basically to have a tool

167
00:07:41,009 --> 00:07:43,590
that developers can integrate into their

168
00:07:43,590 --> 00:07:47,520
testing phase and just run a simple test

169
00:07:47,520 --> 00:07:49,620
it doesn't have to be crazy complicated

170
00:07:49,620 --> 00:07:51,030
it doesn't have to be this huge

171
00:07:51,030 --> 00:07:53,370
intimidating thing you should be able to

172
00:07:53,370 --> 00:07:56,460
just put something into your tests and

173
00:07:56,460 --> 00:07:57,900
know whether or not you've got routes

174
00:07:57,900 --> 00:07:59,539
that you forgot to put not handling

175
00:07:59,539 --> 00:08:02,759
that's not a crazy difficult thing right

176
00:08:02,759 --> 00:08:06,000
so I want to be able to do that and as

177
00:08:06,000 --> 00:08:08,610
well as as testing for some of those

178
00:08:08,610 --> 00:08:10,800
more configuration side of things I want

179
00:08:10,800 --> 00:08:13,919
to make it easy for developers to battle

180
00:08:13,919 --> 00:08:18,509
hardened their applications to actually

181
00:08:18,509 --> 00:08:21,599
go and put more malicious path test

182
00:08:21,599 --> 00:08:23,610
cases in there because i'm sure most

183
00:08:23,610 --> 00:08:25,289
people that write a good solid

184
00:08:25,289 --> 00:08:27,930
application will write good test cases

185
00:08:27,930 --> 00:08:30,930
for it but most of those test cases are

186
00:08:30,930 --> 00:08:34,860
pretty binary does this route work when

187
00:08:34,860 --> 00:08:38,279
i put good stuff into it yeah okay does

188
00:08:38,279 --> 00:08:40,680
it fail when I don't put stuff into it

189
00:08:40,680 --> 00:08:43,979
yeah okay it fails but there's not a

190
00:08:43,979 --> 00:08:46,800
whole lot further than that it's not

191
00:08:46,800 --> 00:08:48,990
going to be repeatedly injecting okay is

192
00:08:48,990 --> 00:08:51,600
my parser that I wrote like going to

193
00:08:51,600 --> 00:08:55,110
fail so that's that's kind of

194
00:08:55,110 --> 00:08:57,930
map it's where I'm wanting to head if

195
00:08:57,930 --> 00:09:00,990
you're interested in using it go ahead

196
00:09:00,990 --> 00:09:03,750
and start a project follow me on Twitter

197
00:09:03,750 --> 00:09:09,570
or follow of security and just yeah

198
00:09:09,570 --> 00:09:10,829
we'll let you know when it's ready or

199
00:09:10,829 --> 00:09:15,300
make a pull request file an issue but

