1
00:00:00,070 --> 00:00:05,260

[Applause]

2
00:00:05,270 --> 00:00:07,859
all right good afternoon everybody I

3
00:00:07,859 --> 00:00:10,050
hope everyone's having a great time at

4
00:00:10,050 --> 00:00:11,639
Gia's computer pest

5
00:00:11,639 --> 00:00:15,179
my name is Adam DC I'm Adam DC dev on

6
00:00:15,179 --> 00:00:17,430
Twitter and before I was a software

7
00:00:17,430 --> 00:00:19,760
engineer I did attend school for music

8
00:00:19,760 --> 00:00:23,039
specifically music composition and I was

9
00:00:23,039 --> 00:00:25,289
always drawn to the analytical thinking

10
00:00:25,289 --> 00:00:28,289
aspect of music theory and perhaps

11
00:00:28,289 --> 00:00:30,480
surprising nobody I had a tough time

12
00:00:30,480 --> 00:00:33,960
finding a job in music and so I went

13
00:00:33,960 --> 00:00:35,460
into programming which I had some

14
00:00:35,460 --> 00:00:38,100
experience with and years later when I

15
00:00:38,100 --> 00:00:39,750
started to learn a functional

16
00:00:39,750 --> 00:00:42,360
programming I found that the same itch

17
00:00:42,360 --> 00:00:45,329
was scratched regarding the analytical

18
00:00:45,329 --> 00:00:48,690
thinking so when I started to try to get

19
00:00:48,690 --> 00:00:52,140
back into music as a hobby I decided to

20
00:00:52,140 --> 00:00:54,870
use functional programming so here's my

21
00:00:54,870 --> 00:00:57,449
introduction to programming my

22
00:00:57,449 --> 00:00:58,469
introduction to functional programming

23
00:00:58,469 --> 00:01:03,120
from a musical perspective so first we

24
00:01:03,120 --> 00:01:05,850
must ask the question what is functional

25
00:01:05,850 --> 00:01:09,270
programming my answer is its programming

26
00:01:09,270 --> 00:01:13,140
with functions just like object-oriented

27
00:01:13,140 --> 00:01:15,090
programs are oriented around objects

28
00:01:15,090 --> 00:01:16,680
functions are the building block of

29
00:01:16,680 --> 00:01:18,869
functional programming but that

30
00:01:18,869 --> 00:01:20,960
naturally leads to the next question

31
00:01:20,960 --> 00:01:25,409
what is a function a non functional

32
00:01:25,409 --> 00:01:27,540
programming definition might be

33
00:01:27,540 --> 00:01:30,090
something like a sequence of commands

34
00:01:30,090 --> 00:01:34,170
abstract into a reusable unit but a more

35
00:01:34,170 --> 00:01:36,869
functional definition is a relationship

36
00:01:36,869 --> 00:01:39,479
between a set of inputs and outputs and

37
00:01:39,479 --> 00:01:43,079
this is sometimes referred to as a pure

38
00:01:43,079 --> 00:01:45,240
function and it comes from the

39
00:01:45,240 --> 00:01:47,189
mathematical definition of a function

40
00:01:47,189 --> 00:01:50,700
and these so-called pure functions are

41
00:01:50,700 --> 00:01:52,799
the building block of functional

42
00:01:52,799 --> 00:01:55,320
programming so what makes a function

43
00:01:55,320 --> 00:02:00,030
pure well there's two main aspects given

44
00:02:00,030 --> 00:02:02,850
the same arguments in it will return the

45
00:02:02,850 --> 00:02:05,610
same value that means it shouldn't rely

46
00:02:05,610 --> 00:02:09,319
on anything outside of itself such as a

47
00:02:09,319 --> 00:02:11,940
random number generator or the current

48
00:02:11,940 --> 00:02:12,819
time or

49
00:02:12,819 --> 00:02:15,249
read from the database it also means it

50
00:02:15,249 --> 00:02:17,950
shouldn't affect anything outside of its

51
00:02:17,950 --> 00:02:20,590
return value such as manipulating the

52
00:02:20,590 --> 00:02:22,859
Dom or writing to a database and

53
00:02:22,859 --> 00:02:26,099
together this makes the function

54
00:02:26,099 --> 00:02:28,989
referentially transparent this means

55
00:02:28,989 --> 00:02:31,180
that a function call with the same

56
00:02:31,180 --> 00:02:33,549
parameters can be replaced by its return

57
00:02:33,549 --> 00:02:39,400
value so here we are defining middle c

58
00:02:39,400 --> 00:02:42,549
with a name and an octave and increment

59
00:02:42,549 --> 00:02:44,260
- octave here is a pure function it

60
00:02:44,260 --> 00:02:47,469
takes a note and it returns a new note

61
00:02:47,469 --> 00:02:51,069
with the octave incremented by one and I

62
00:02:51,069 --> 00:02:54,159
see here is the result of that pure

63
00:02:54,159 --> 00:02:57,040
function playing here is a function that

64
00:02:57,040 --> 00:02:59,290
is an impure function because it has a

65
00:02:59,290 --> 00:03:00,159
side-effect

66
00:03:00,159 --> 00:03:04,689
it sends music to the browser you can

67
00:03:04,689 --> 00:03:07,060
pass an either high C or increment

68
00:03:07,060 --> 00:03:08,769
octave middle C and I'll have the same

69
00:03:08,769 --> 00:03:11,049
effect because of the referential

70
00:03:11,049 --> 00:03:13,780
transparency of the increment octave

71
00:03:13,780 --> 00:03:18,129
function so we decided to learn

72
00:03:18,129 --> 00:03:21,009
functional programming remove all side

73
00:03:21,009 --> 00:03:24,930
effects and now your program is useless

74
00:03:24,930 --> 00:03:27,250
it's important to note that side effects

75
00:03:27,250 --> 00:03:30,340
are not bad HTTP requests Dom

76
00:03:30,340 --> 00:03:32,769
manipulation or playing music are all

77
00:03:32,769 --> 00:03:35,859
side effects they are not bad but they

78
00:03:35,859 --> 00:03:37,840
are unpredictable and they are harder to

79
00:03:37,840 --> 00:03:40,989
test so you so you need to use your

80
00:03:40,989 --> 00:03:42,549
impure functions carefully and

81
00:03:42,549 --> 00:03:46,209
predictably so now that we know what

82
00:03:46,209 --> 00:03:48,250
functional programming is and what a

83
00:03:48,250 --> 00:03:52,750
function is what are some tools one of

84
00:03:52,750 --> 00:03:54,819
the main ones is immutability and that's

85
00:03:54,819 --> 00:03:57,609
the idea that a variable state cannot be

86
00:03:57,609 --> 00:04:00,430
modified after creation and you might be

87
00:04:00,430 --> 00:04:06,129
thinking why why would you like to tie

88
00:04:06,129 --> 00:04:07,870
one arm behind your back

89
00:04:07,870 --> 00:04:10,989
but there is a reason for this there are

90
00:04:10,989 --> 00:04:13,060
some advantages of immutability such as

91
00:04:13,060 --> 00:04:16,599
it's less for your brain to track humans

92
00:04:16,599 --> 00:04:18,489
have a working memory it's the

93
00:04:18,489 --> 00:04:22,389
biological equivalent to RAM and if your

94
00:04:22,389 --> 00:04:25,060
brain has to keep track of what state a

95
00:04:25,060 --> 00:04:26,490
current variable is in

96
00:04:26,490 --> 00:04:30,060
it's more time that your brain is

97
00:04:30,060 --> 00:04:32,100
working on that and not spending on the

98
00:04:32,100 --> 00:04:33,030
rest of your program

99
00:04:33,030 --> 00:04:36,389
it also immutability prevents

100
00:04:36,389 --> 00:04:37,889
unintentional side-effects you

101
00:04:37,889 --> 00:04:40,229
accidentally changing a variable in a

102
00:04:40,229 --> 00:04:42,840
function can be a really hard bug to

103
00:04:42,840 --> 00:04:46,710
track down and it preserves state I like

104
00:04:46,710 --> 00:04:48,990
to think of it as your bank account

105
00:04:48,990 --> 00:04:51,120
balance when you sign into your bank

106
00:04:51,120 --> 00:04:53,160
account you don't just see your single

107
00:04:53,160 --> 00:04:56,130
balance you see your current balance

108
00:04:56,130 --> 00:04:57,569
which is derived from the starting

109
00:04:57,569 --> 00:04:59,490
balance and then the withdrawals and

110
00:04:59,490 --> 00:05:03,599
deposits another technique of functional

111
00:05:03,599 --> 00:05:05,669
programming is higher-order functions

112
00:05:05,669 --> 00:05:07,289
and that's a function that either

113
00:05:07,289 --> 00:05:10,590
accepts an argument in a function as an

114
00:05:10,590 --> 00:05:13,770
argument or returns a function you might

115
00:05:13,770 --> 00:05:15,720
be thinking this is something along the

116
00:05:15,720 --> 00:05:19,380
lines of but here's an example that

117
00:05:19,380 --> 00:05:23,340
might help here tone j/s is a framework

118
00:05:23,340 --> 00:05:25,259
that's built on top of the Web Audio API

119
00:05:25,259 --> 00:05:28,020
and playing out here is a higher order

120
00:05:28,020 --> 00:05:32,340
function it accepts a note and it

121
00:05:32,340 --> 00:05:37,440
returns a function play middle C here is

122
00:05:37,440 --> 00:05:41,520
the result of that that function being

123
00:05:41,520 --> 00:05:45,599
called with C for add eventlistener here

124
00:05:45,599 --> 00:05:49,199
accepts a function as an argument so add

125
00:05:49,199 --> 00:05:50,699
eventlistener and play note are both

126
00:05:50,699 --> 00:05:52,500
higher-order play note because it

127
00:05:52,500 --> 00:05:55,710
returns a function and add eventlistener

128
00:05:55,710 --> 00:06:00,870
because it accepts a function now

129
00:06:00,870 --> 00:06:03,060
manipulating arrays is an important part

130
00:06:03,060 --> 00:06:05,969
of all paradigms and functional

131
00:06:05,969 --> 00:06:07,380
programming has a lot of really great

132
00:06:07,380 --> 00:06:10,560
tools for dealing with arrays and

133
00:06:10,560 --> 00:06:12,150
there's two concepts that we already

134
00:06:12,150 --> 00:06:13,560
cover that are important the

135
00:06:13,560 --> 00:06:15,030
higher-order functions because each of

136
00:06:15,030 --> 00:06:17,130
these methods accept a function and

137
00:06:17,130 --> 00:06:18,960
immutability because each of these

138
00:06:18,960 --> 00:06:22,979
methods that I'm mentioning will return

139
00:06:22,979 --> 00:06:25,710
a new value rather than manipulating the

140
00:06:25,710 --> 00:06:29,150
current one so array that filter it

141
00:06:29,150 --> 00:06:31,500
accepts a function that's run against

142
00:06:31,500 --> 00:06:34,080
every element that function receives the

143
00:06:34,080 --> 00:06:36,930
element the index and the array and it

144
00:06:36,930 --> 00:06:40,729
returns a subset of the original array

145
00:06:40,729 --> 00:06:45,870
so we define a melody and we define a

146
00:06:45,870 --> 00:06:48,720
function is high which takes a note and

147
00:06:48,720 --> 00:06:52,139
returns a boolean if that value is equal

148
00:06:52,139 --> 00:06:54,539
to or above middle C it is considered

149
00:06:54,539 --> 00:06:59,430
high otherwise it is considered low so

150
00:06:59,430 --> 00:07:02,699
high notes is the melody filtered to is

151
00:07:02,699 --> 00:07:06,300
high and we get only the elements that

152
00:07:06,300 --> 00:07:10,139
return a truth eval you so here we have

153
00:07:10,139 --> 00:07:18,780
our unfiltered melody and when we filter

154
00:07:18,780 --> 00:07:28,159
to just the high notes a regular map

155
00:07:28,159 --> 00:07:30,120
accepts a function that's run against

156
00:07:30,120 --> 00:07:32,639
every element as well it also accepts

157
00:07:32,639 --> 00:07:34,830
the element index and array within that

158
00:07:34,830 --> 00:07:37,379
flat function but rather than returning

159
00:07:37,379 --> 00:07:40,050
a subset of the original array it

160
00:07:40,050 --> 00:07:42,270
returns an array of the same length with

161
00:07:42,270 --> 00:07:48,000
new values so we have our melody here

162
00:07:48,000 --> 00:07:50,159
and we have our increment octave

163
00:07:50,159 --> 00:07:54,659
function and then we map our melody to

164
00:07:54,659 --> 00:07:57,270
increment Optive and now we have the a

165
00:07:57,270 --> 00:08:00,270
copy of the array but with each note

166
00:08:00,270 --> 00:08:10,560
incremented by one octave or the high

167
00:08:10,560 --> 00:08:13,070
melody

168
00:08:13,080 --> 00:08:16,949
and the last one I'll cover today is a

169
00:08:16,949 --> 00:08:22,530
radar reduce and a radar reduced also

170
00:08:22,530 --> 00:08:24,000
accepts a function that's run against

171
00:08:24,000 --> 00:08:26,400
every element but in addition to the

172
00:08:26,400 --> 00:08:29,789
accumulator I in addition to the element

173
00:08:29,789 --> 00:08:31,800
index and array it also accepts an

174
00:08:31,800 --> 00:08:35,250
accumulator value and it will return the

175
00:08:35,250 --> 00:08:38,729
total accumulated value after passing

176
00:08:38,729 --> 00:08:40,950
through every element and in some

177
00:08:40,950 --> 00:08:42,690
languages this is known as fold and

178
00:08:42,690 --> 00:08:47,220
accumulate and it is a more generic tool

179
00:08:47,220 --> 00:08:49,310
than filter or map I often hear that

180
00:08:49,310 --> 00:08:52,380
reduce takes an array and returns a

181
00:08:52,380 --> 00:08:56,220
single value and this is true but I

182
00:08:56,220 --> 00:08:58,250
don't consider it to be a terribly

183
00:08:58,250 --> 00:09:01,589
useful distinction because all functions

184
00:09:01,589 --> 00:09:04,769
in JavaScript return a single value so I

185
00:09:04,769 --> 00:09:07,649
like to think of it as a generic utility

186
00:09:07,649 --> 00:09:10,130
function that can return any type

187
00:09:10,130 --> 00:09:14,190
whether it be another array in fact you

188
00:09:14,190 --> 00:09:17,390
can write filter or map using a reduce

189
00:09:17,390 --> 00:09:20,370
or it can return a single string or a

190
00:09:20,370 --> 00:09:26,790
single integer so I find the best way to

191
00:09:26,790 --> 00:09:32,420
learn reduce is really by by example

192
00:09:32,420 --> 00:09:36,120
so here we are defining this melody with

193
00:09:36,120 --> 00:09:39,209
note names and length then we have our

194
00:09:39,209 --> 00:09:41,940
two length function that is going to be

195
00:09:41,940 --> 00:09:44,880
passed to reduce total is the

196
00:09:44,880 --> 00:09:48,750
accumulator and note is the array

197
00:09:48,750 --> 00:09:52,649
element and then the function adds the

198
00:09:52,649 --> 00:09:59,949
total to the value of the notes length

199
00:09:59,959 --> 00:10:03,959
so length are a reduced accepts of

200
00:10:03,959 --> 00:10:07,019
function and an initial value and then

201
00:10:07,019 --> 00:10:09,589
the return value is the end accumulation

202
00:10:09,589 --> 00:10:13,370
so starting with the initial value of 0

203
00:10:13,370 --> 00:10:16,019
we go through and each notes length

204
00:10:16,019 --> 00:10:19,050
that's added to the total so 0 plus

205
00:10:19,050 --> 00:10:25,790
0.125 0.125 plus 0.125 is 0.25 0.375

206
00:10:25,790 --> 00:10:26,850
until

207
00:10:26,850 --> 00:10:28,620
we get to the total length of one point

208
00:10:28,620 --> 00:10:31,740
six to five seconds so here with our

209
00:10:31,740 --> 00:10:36,209
melody we get one point six two five

210
00:10:36,209 --> 00:10:41,160
seconds all right now that we're done

211
00:10:41,160 --> 00:10:44,130
with arrays partial application is an

212
00:10:44,130 --> 00:10:46,079
incredibly useful tool for writing

213
00:10:46,079 --> 00:10:50,790
reusable and generic functions and it is

214
00:10:50,790 --> 00:10:53,220
technique to preset or fix some of the

215
00:10:53,220 --> 00:10:56,610
arguments of a function so here we have

216
00:10:56,610 --> 00:10:59,730
a transpose function it takes a

217
00:10:59,730 --> 00:11:03,380
direction either up or down in interval

218
00:11:03,380 --> 00:11:07,380
such as a major third or a minor seventh

219
00:11:07,380 --> 00:11:11,930
and a note which will be transposed a

220
00:11:11,930 --> 00:11:15,899
major third is a function that is a

221
00:11:15,899 --> 00:11:19,350
partially applied transpose we set up

222
00:11:19,350 --> 00:11:24,360
and we set major third but we wait to

223
00:11:24,360 --> 00:11:28,079
receive the note so here when passing in

224
00:11:28,079 --> 00:11:31,230
C for AB major third will return an e

225
00:11:31,230 --> 00:11:35,930
for or a B flat two will return a d3 and

226
00:11:35,930 --> 00:11:40,529
there is a way in stage one of the tc39

227
00:11:40,529 --> 00:11:45,660
there's a there is a syntax for native

228
00:11:45,660 --> 00:11:48,769
partial application that will let you to

229
00:11:48,769 --> 00:11:52,800
partially apply partially apply

230
00:11:52,800 --> 00:11:55,680
arguments to a function by using the

231
00:11:55,680 --> 00:11:57,660
question mark for what you don't want to

232
00:11:57,660 --> 00:12:01,439
apply so down minor seventh can be a

233
00:12:01,439 --> 00:12:03,990
partially pi transpose by leaving the

234
00:12:03,990 --> 00:12:08,639
note as a question mark so here we can

235
00:12:08,639 --> 00:12:12,389
map these partially applied functions to

236
00:12:12,389 --> 00:12:14,160
an array of notes and here the

237
00:12:14,160 --> 00:12:17,870
transposition

238
00:12:17,880 --> 00:12:25,660
or up a major third or transpose down a

239
00:12:25,660 --> 00:12:26,700
minor seventh

240
00:12:26,700 --> 00:12:30,420
[Music]

241
00:12:30,420 --> 00:12:33,850
so partial application is a great tool

242
00:12:33,850 --> 00:12:36,870
for writing reusable functions that are

243
00:12:36,870 --> 00:12:41,440
partially applied but the real bread and

244
00:12:41,440 --> 00:12:44,790
butter of functional programming is

245
00:12:44,790 --> 00:12:48,700
composition and composition is a

246
00:12:48,700 --> 00:12:51,280
technique to combine multiple functions

247
00:12:51,280 --> 00:12:55,000
into a new function so here we're going

248
00:12:55,000 --> 00:12:57,640
to take a note name and we'll return the

249
00:12:57,640 --> 00:13:01,540
frequency but detuned slightly so we

250
00:13:01,540 --> 00:13:03,610
have a function converting a note name

251
00:13:03,610 --> 00:13:08,500
to a frequency for example an input of a

252
00:13:08,500 --> 00:13:11,440
four would return a number of four three

253
00:13:11,440 --> 00:13:15,640
which is the frequency in Hertz of in a

254
00:13:15,640 --> 00:13:21,790
four D tune-up will be defined a

255
00:13:21,790 --> 00:13:23,650
function to multiply by a small

256
00:13:23,650 --> 00:13:29,320
percentage so an input of 440 Hertz

257
00:13:29,320 --> 00:13:34,360
would return 444 0.4 and then compose

258
00:13:34,360 --> 00:13:37,240
here takes two functions and calls them

259
00:13:37,240 --> 00:13:41,680
from right to left so get detuned

260
00:13:41,680 --> 00:13:45,070
frequency is a function that is created

261
00:13:45,070 --> 00:13:50,530
by composing D tune-up and frequency so

262
00:13:50,530 --> 00:13:56,230
an input of a four would return 444

263
00:13:56,230 --> 00:14:01,330
point four and there's a pipeline

264
00:14:01,330 --> 00:14:03,160
operator that's currently in stage one

265
00:14:03,160 --> 00:14:07,420
of the tc39 spec as well that would

266
00:14:07,420 --> 00:14:09,760
allow for easier function composition

267
00:14:09,760 --> 00:14:13,240
through piping so here you can write a

268
00:14:13,240 --> 00:14:16,480
get detuned frequency by piping the note

269
00:14:16,480 --> 00:14:19,900
first to frequency and then to D tune-up

270
00:14:19,900 --> 00:14:25,390
so here we can hear our a4

271
00:14:25,390 --> 00:14:33,160
and the same note but detuned so now

272
00:14:33,160 --> 00:14:36,190
putting it all together we are going to

273
00:14:36,190 --> 00:14:38,650
be writing a function that converts a

274
00:14:38,650 --> 00:14:42,250
human-readable shorthand into a computer

275
00:14:42,250 --> 00:14:45,790
readable array so everyone able to read

276
00:14:45,790 --> 00:14:49,540
that all right just kidding

277
00:14:49,540 --> 00:14:52,630
so first we'll be importing some

278
00:14:52,630 --> 00:14:55,450
dependencies from RAM des and ton Jas

279
00:14:55,450 --> 00:14:59,310
and this might seem like a lot of

280
00:14:59,310 --> 00:15:06,010
functions that we're my computer just

281
00:15:06,010 --> 00:15:14,300
fell asleep sorry all right

282
00:15:14,300 --> 00:15:16,079
because that means I'm about halfway

283
00:15:16,079 --> 00:15:19,709
through cuz I thinks it's a 15 minute so

284
00:15:19,709 --> 00:15:21,149
first we're importing some dependencies

285
00:15:21,149 --> 00:15:25,259
from Ramdan tone j s and we're going to

286
00:15:25,259 --> 00:15:28,949
define some functions by function

287
00:15:28,949 --> 00:15:32,430
composition so here parse name takes a

288
00:15:32,430 --> 00:15:36,240
shorthand note and it returns a name for

289
00:15:36,240 --> 00:15:40,199
example c4 at a 10 would return a string

290
00:15:40,199 --> 00:15:43,019
of see it pipes the input through two

291
00:15:43,019 --> 00:15:48,269
other functions match which is which

292
00:15:48,269 --> 00:15:50,310
will return an array of matching strings

293
00:15:50,310 --> 00:15:54,600
that that match the regex and head which

294
00:15:54,600 --> 00:15:57,149
will return just the first string so

295
00:15:57,149 --> 00:16:00,569
when passing c4 at a 10 the match

296
00:16:00,569 --> 00:16:02,670
function would return in the array of

297
00:16:02,670 --> 00:16:04,649
the string of C and then the head

298
00:16:04,649 --> 00:16:07,110
function will take that array of the

299
00:16:07,110 --> 00:16:09,029
string of C and returns just the string

300
00:16:09,029 --> 00:16:14,610
of C so C for add a 10 to a ray of C for

301
00:16:14,610 --> 00:16:19,079
to just to just see parse octave here

302
00:16:19,079 --> 00:16:21,899
works similarly it takes a short hand

303
00:16:21,899 --> 00:16:26,069
note and it returns an octave so C for

304
00:16:26,069 --> 00:16:29,220
at a 10 will return an array of the

305
00:16:29,220 --> 00:16:31,709
string of 4 which will return the number

306
00:16:31,709 --> 00:16:36,300
4 and parse duration takes a short hand

307
00:16:36,300 --> 00:16:39,329
note and returns the duration it splits

308
00:16:39,329 --> 00:16:43,579
at the a symbol and it takes the last

309
00:16:43,579 --> 00:16:48,360
string so in this case in 8m first time

310
00:16:48,360 --> 00:16:50,939
here is a little bit more complicated it

311
00:16:50,939 --> 00:16:53,459
takes a note and it's context within the

312
00:16:53,459 --> 00:16:56,939
array and it will return a scheduled

313
00:16:56,939 --> 00:17:02,339
time so it takes the array of notes it

314
00:17:02,339 --> 00:17:05,130
slices the array to only those notes

315
00:17:05,130 --> 00:17:09,179
preceding that your current element it

316
00:17:09,179 --> 00:17:11,220
maps each of those notes to their length

317
00:17:11,220 --> 00:17:14,900
and it reduces them to a single value in

318
00:17:14,900 --> 00:17:18,480
this case of bird so as all together

319
00:17:18,480 --> 00:17:21,839
this lets the Web Audio API know when to

320
00:17:21,839 --> 00:17:26,459
play each note by adding the the time of

321
00:17:26,459 --> 00:17:28,050
all of the previous notes

322
00:17:28,050 --> 00:17:31,440
and now purse shorthand is a composition

323
00:17:31,440 --> 00:17:35,940
of compositions it accepts a string and

324
00:17:35,940 --> 00:17:38,700
it returns an array of objects that is

325
00:17:38,700 --> 00:17:40,700
able to be consumed by the Web Audio API

326
00:17:40,700 --> 00:17:45,000
through the the tone j/s first we split

327
00:17:45,000 --> 00:17:49,620
a tall white space this turns the the

328
00:17:49,620 --> 00:17:53,610
string into an array of strings and then

329
00:17:53,610 --> 00:17:58,410
array map we use two we pass it the

330
00:17:58,410 --> 00:18:02,000
array of strings and that converts it to

331
00:18:02,000 --> 00:18:07,320
of an object so apply spec takes an

332
00:18:07,320 --> 00:18:10,020
object shape with functions and each

333
00:18:10,020 --> 00:18:12,540
string in the array will be passed into

334
00:18:12,540 --> 00:18:15,210
each of these functions and it will be

335
00:18:15,210 --> 00:18:17,840
mapped to an object of a matching shape

336
00:18:17,840 --> 00:18:22,230
so what will be returned is an object

337
00:18:22,230 --> 00:18:26,270
with a name with with the value that

338
00:18:26,270 --> 00:18:29,510
were takes each of those strings and

339
00:18:29,510 --> 00:18:32,070
passes it to parse name for the name

340
00:18:32,070 --> 00:18:34,200
parse octave for the octave purse

341
00:18:34,200 --> 00:18:36,480
duration for the length and parse time

342
00:18:36,480 --> 00:18:39,840
for the time so with our purse shorthand

343
00:18:39,840 --> 00:18:44,550
function this input string becomes this

344
00:18:44,550 --> 00:18:47,610
array of strings past our PI spec

345
00:18:47,610 --> 00:18:50,610
becomes this array of note objects where

346
00:18:50,610 --> 00:18:52,800
we have the name the octave the length

347
00:18:52,800 --> 00:18:58,800
and the time so this string can become

348
00:18:58,800 --> 00:19:11,730
this music or this string can become

349
00:19:11,730 --> 00:19:14,820
this music

350
00:19:14,820 --> 00:19:24,810
[Music]

351
00:19:24,820 --> 00:19:28,850
so why should you care about functional

352
00:19:28,850 --> 00:19:31,730
programming I like functional

353
00:19:31,730 --> 00:19:33,740
programming because it forces you to

354
00:19:33,740 --> 00:19:35,960
break down problems into their smallest

355
00:19:35,960 --> 00:19:40,000
parts when converting a string into

356
00:19:40,000 --> 00:19:42,980
music we had to think of how to parse

357
00:19:42,980 --> 00:19:45,170
this shorthand in a way that a human

358
00:19:45,170 --> 00:19:47,300
that the computer could read it and

359
00:19:47,300 --> 00:19:50,660
there's a lot of parts there but we

360
00:19:50,660 --> 00:19:52,550
didn't write very many functions we

361
00:19:52,550 --> 00:19:54,020
there was only one function that was

362
00:19:54,020 --> 00:19:56,930
actually written most of the functions

363
00:19:56,930 --> 00:19:59,330
were defined by just piping together

364
00:19:59,330 --> 00:20:03,860
very small functions like like regex

365
00:20:03,860 --> 00:20:09,350
match or a or a first or a conversion

366
00:20:09,350 --> 00:20:14,000
from a string to a number or an ad so it

367
00:20:14,000 --> 00:20:15,830
forces you to break down problems into

368
00:20:15,830 --> 00:20:20,480
their smallest parts so if you found

369
00:20:20,480 --> 00:20:21,950
this interesting and would like to go

370
00:20:21,950 --> 00:20:23,330
further in functional programming

371
00:20:23,330 --> 00:20:26,110
there's some really great resources

372
00:20:26,110 --> 00:20:29,090
professor frisbees mostly advocate guide

373
00:20:29,090 --> 00:20:31,840
to functional programming it is

374
00:20:31,840 --> 00:20:34,910
definitely a more than adequate guide is

375
00:20:34,910 --> 00:20:37,370
available for free online Professor

376
00:20:37,370 --> 00:20:40,670
frisbee is known as doctor boolean on

377
00:20:40,670 --> 00:20:43,940
Twitter he's got some great great video

378
00:20:43,940 --> 00:20:47,750
resources as well also I would highly

379
00:20:47,750 --> 00:20:49,910
suggest looking into a functional

380
00:20:49,910 --> 00:20:53,210
utility library in in this case I used

381
00:20:53,210 --> 00:20:58,220
random lodash FP is a branch of lodash

382
00:20:58,220 --> 00:21:02,030
that has a lot of really great utility

383
00:21:02,030 --> 00:21:04,820
functions that have a functional

384
00:21:04,820 --> 00:21:08,210
programming perspective and lambda cast

385
00:21:08,210 --> 00:21:11,360
is a really great podcast for going over

386
00:21:11,360 --> 00:21:14,120
the fundamentals of functional

387
00:21:14,120 --> 00:21:17,720
programming much more in depth thank you

388
00:21:17,720 --> 00:21:19,640
so much for your time if you have any

389
00:21:19,640 --> 00:21:21,170
questions feel free to catch me

390
00:21:21,170 --> 00:21:24,620
afterwards or message me at Adam DC dev

391
00:21:24,620 --> 00:21:27,639
on Twitter thank you

392
00:21:27,639 --> 00:21:31,960
take mine

