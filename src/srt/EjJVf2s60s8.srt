1
00:00:00,620 --> 00:00:15,880

[Music]

2
00:00:15,890 --> 00:00:19,470
my name is Paul I live in Singapore when

3
00:00:19,470 --> 00:00:21,300
I'm engineer and I work at stripe if

4
00:00:21,300 --> 00:00:22,529
you're not familiar with stripe stripe

5
00:00:22,529 --> 00:00:24,539
is a payments infrastructure company and

6
00:00:24,539 --> 00:00:26,550
today I want to talk to you about how we

7
00:00:26,550 --> 00:00:30,570
use reacting graph QL so just quick

8
00:00:30,570 --> 00:00:32,009
current disclaimer like what we're going

9
00:00:32,009 --> 00:00:33,239
to talk about here this talk isn't

10
00:00:33,239 --> 00:00:35,160
necessarily about what graph QL is and

11
00:00:35,160 --> 00:00:36,719
why you should use it it's more about

12
00:00:36,719 --> 00:00:39,030
how stripe uses graphic UL and why we

13
00:00:39,030 --> 00:00:40,860
use it why do you think it's great so I

14
00:00:40,860 --> 00:00:42,210
want to talk a bit more about that graph

15
00:00:42,210 --> 00:00:44,340
QL and the modern product development

16
00:00:44,340 --> 00:00:46,260
stack talk about some stuff that we

17
00:00:46,260 --> 00:00:48,750
built that stripe with graph QL and some

18
00:00:48,750 --> 00:00:50,969
unexpected cool benefits that we found

19
00:00:50,969 --> 00:00:54,510
out the first very important Eric I'm

20
00:00:54,510 --> 00:00:56,399
talking about here was developed by many

21
00:00:56,399 --> 00:00:58,469
people over many different teams I can't

22
00:00:58,469 --> 00:00:59,780
take any credit for any of this

23
00:00:59,780 --> 00:01:03,570
yeah it takes a bit to do this stuff so

24
00:01:03,570 --> 00:01:04,979
in the screenshot here on the left you

25
00:01:04,979 --> 00:01:06,570
see just a little small part of the

26
00:01:06,570 --> 00:01:08,310
stripe dashboard now the stripe

27
00:01:08,310 --> 00:01:10,290
dashboard is the main tool that we use

28
00:01:10,290 --> 00:01:12,600
what our users use to find out

29
00:01:12,600 --> 00:01:14,100
everything about their strife account

30
00:01:14,100 --> 00:01:16,799
you can look at some logs here you can

31
00:01:16,799 --> 00:01:18,509
find out about your API keys make

32
00:01:18,509 --> 00:01:20,820
payments etc it's a really important

33
00:01:20,820 --> 00:01:22,350
tool and kind of the first thing that I

34
00:01:22,350 --> 00:01:24,540
use are C and we have a lot of teams

35
00:01:24,540 --> 00:01:26,369
working on this at the same time so it

36
00:01:26,369 --> 00:01:28,140
really needs to work had gel together as

37
00:01:28,140 --> 00:01:33,840
much as possible so here's our stack yes

38
00:01:33,840 --> 00:01:38,280
we use flow don't at me but whatever we

39
00:01:38,280 --> 00:01:39,750
want to talk about is the last part here

40
00:01:39,750 --> 00:01:41,610
which is graph QL and Apollo which is

41
00:01:41,610 --> 00:01:43,530
kind of new for a stack so there Nardo

42
00:01:43,530 --> 00:01:44,820
earlier or decay like a really good

43
00:01:44,820 --> 00:01:47,100
little run-through of graph go I'll make

44
00:01:47,100 --> 00:01:48,600
this really brief so first of all kind

45
00:01:48,600 --> 00:01:50,159
of get by a show of hands obviously

46
00:01:50,159 --> 00:01:51,570
everyone here has now heard of graph QL

47
00:01:51,570 --> 00:01:55,369
but who is actually use graph QL here

48
00:01:55,369 --> 00:01:58,290
okay enough people first to not be super

49
00:01:58,290 --> 00:02:00,210
obvious right so on the left hand side

50
00:02:00,210 --> 00:02:02,009
you see we have a more traditional REST

51
00:02:02,009 --> 00:02:06,750
API recipe has great but graph QL is an

52
00:02:06,750 --> 00:02:08,429
API technology you know it works in

53
00:02:08,429 --> 00:02:09,929
terms of a schema instead of defined

54
00:02:09,929 --> 00:02:11,370
endpoints so everything you see on the

55
00:02:11,370 --> 00:02:13,470
left hand side and authors and posts

56
00:02:13,470 --> 00:02:15,960
I instead have a schema sprayed here on

57
00:02:15,960 --> 00:02:22,350
the right so one of the big benefits of

58
00:02:22,350 --> 00:02:24,540
graph QL has ever showed earlier is that

59
00:02:24,540 --> 00:02:27,240
it prevents over fetching Raul for REST

60
00:02:27,240 --> 00:02:28,980
API where I don't know exactly what data

61
00:02:28,980 --> 00:02:30,660
I'm getting back where graph QL I

62
00:02:30,660 --> 00:02:33,300
explicitly tell the backend what I want

63
00:02:33,300 --> 00:02:35,070
and it gives me exactly what I want and

64
00:02:35,070 --> 00:02:39,360
I'm like having to have one URL or sorry

65
00:02:39,360 --> 00:02:41,100
instead of having multiple URLs for rest

66
00:02:41,100 --> 00:02:42,900
I only have one for sauce graph QL

67
00:02:42,900 --> 00:02:46,590
endpoint which is great so how do we

68
00:02:46,590 --> 00:02:49,590
make product development better at scale

69
00:02:49,590 --> 00:02:50,910
it's the ad scale part here which I'm

70
00:02:50,910 --> 00:02:53,100
really interested in the kind of

71
00:02:53,100 --> 00:02:54,630
traditional product development looks a

72
00:02:54,630 --> 00:02:56,220
bit like this right you have a front end

73
00:02:56,220 --> 00:02:58,200
you have a back end and you have an API

74
00:02:58,200 --> 00:02:59,459
which lets you talk to one another

75
00:02:59,459 --> 00:03:01,500
that's what the ideal situation would

76
00:03:01,500 --> 00:03:03,270
look like but in reality it looks more

77
00:03:03,270 --> 00:03:05,870
like this there's a lot going on here

78
00:03:05,870 --> 00:03:08,390
especially at a modern JavaScript

79
00:03:08,390 --> 00:03:11,580
ecosystem even I even have two backends

80
00:03:11,580 --> 00:03:13,890
here which is becoming more popular how

81
00:03:13,890 --> 00:03:15,209
do you make sure all these parts

82
00:03:15,209 --> 00:03:16,740
communicate with one another the most

83
00:03:16,740 --> 00:03:18,570
valuable systems are those that can tie

84
00:03:18,570 --> 00:03:20,280
into all these aspects of development so

85
00:03:20,280 --> 00:03:24,239
for example a UI component system so

86
00:03:24,239 --> 00:03:25,350
what we've done that stripe is we've

87
00:03:25,350 --> 00:03:26,850
kind of replaced these middle two bits

88
00:03:26,850 --> 00:03:30,170
with Apollo cogent and graph QL API and

89
00:03:30,170 --> 00:03:32,130
the best thing about this that means

90
00:03:32,130 --> 00:03:33,630
that all these components here can now

91
00:03:33,630 --> 00:03:35,190
talk to one another using the same

92
00:03:35,190 --> 00:03:36,780
format in the same data which in this

93
00:03:36,780 --> 00:03:39,690
case is graph QL so all these things

94
00:03:39,690 --> 00:03:41,160
know how to talk each others share the

95
00:03:41,160 --> 00:03:44,340
data so as graph car has such a big

96
00:03:44,340 --> 00:03:46,769
impact well schema defines capabilities

97
00:03:46,769 --> 00:03:49,049
queries defined data requirements from

98
00:03:49,049 --> 00:03:50,850
this schema here on the Left I can

99
00:03:50,850 --> 00:03:52,260
command into on the right even gets a

100
00:03:52,260 --> 00:03:53,640
little auto completion as you can see

101
00:03:53,640 --> 00:03:56,820
here and I can reduce over fetching of

102
00:03:56,820 --> 00:03:59,220
data I can have accurate monitoring this

103
00:03:59,220 --> 00:04:00,030
is something I'll talk a little bit

104
00:04:00,030 --> 00:04:01,769
later and we have a really good mocking

105
00:04:01,769 --> 00:04:04,230
system here's a couple of more big

106
00:04:04,230 --> 00:04:06,480
impact stories with graph QL what I want

107
00:04:06,480 --> 00:04:08,160
to highlight here really is monitoring

108
00:04:08,160 --> 00:04:12,239
in graph QL you can track usage for a

109
00:04:12,239 --> 00:04:14,010
specific field this is traditionally

110
00:04:14,010 --> 00:04:15,239
been a very difficult thing to do it in

111
00:04:15,239 --> 00:04:17,130
a REST API you don't know what fields

112
00:04:17,130 --> 00:04:19,109
are actually being used when fetched

113
00:04:19,109 --> 00:04:22,320
from your back-end that's really hard to

114
00:04:22,320 --> 00:04:23,520
do I'm going to talk about other marks

115
00:04:23,520 --> 00:04:25,020
on them things in a sec servers let's

116
00:04:25,020 --> 00:04:25,919
took a look some of the tools that we

117
00:04:25,919 --> 00:04:27,060
built that stripe

118
00:04:27,060 --> 00:04:30,060
first data mocking so why would you mock

119
00:04:30,060 --> 00:04:33,600
stuff it seems like you know obvious why

120
00:04:33,600 --> 00:04:34,830
we'd mock but it's really good to kind

121
00:04:34,830 --> 00:04:36,480
of steady text back take step back and

122
00:04:36,480 --> 00:04:39,060
really think about it so when you mock

123
00:04:39,060 --> 00:04:40,230
self you have faster more resilient

124
00:04:40,230 --> 00:04:41,639
chest you don't have to wait on an API

125
00:04:41,639 --> 00:04:43,950
you have immediately test results you

126
00:04:43,950 --> 00:04:46,050
can avoid the waterfall flow by actually

127
00:04:46,050 --> 00:04:47,370
being able to develop your front-end

128
00:04:47,370 --> 00:04:48,960
components before the backends even

129
00:04:48,960 --> 00:04:51,360
built when you mock stuff and it's

130
00:04:51,360 --> 00:04:54,500
really easy to generate educate States

131
00:04:54,500 --> 00:04:57,330
so graph code makes mocking really easy

132
00:04:57,330 --> 00:04:59,790
because we have a schema and the schema

133
00:04:59,790 --> 00:05:01,740
has types in it we already know what

134
00:05:01,740 --> 00:05:03,120
shape our data's going to look like and

135
00:05:03,120 --> 00:05:04,770
exactly what type is gonna look like so

136
00:05:04,770 --> 00:05:05,880
this is actually the code snippet I

137
00:05:05,880 --> 00:05:07,830
grabbed from the graph to our tools on

138
00:05:07,830 --> 00:05:11,070
the Left I have a schema string on the

139
00:05:11,070 --> 00:05:12,930
right I'm actually I'm mocking it with

140
00:05:12,930 --> 00:05:15,210
admonished the schema function I have my

141
00:05:15,210 --> 00:05:17,370
query and I was as a result I have the

142
00:05:17,370 --> 00:05:20,310
data with just some generic data based

143
00:05:20,310 --> 00:05:23,280
on those types but the problem here is

144
00:05:23,280 --> 00:05:24,660
you know what about edge cases right if

145
00:05:24,660 --> 00:05:26,280
I have a globally mock schema which is

146
00:05:26,280 --> 00:05:28,500
what what we're looking for what about

147
00:05:28,500 --> 00:05:29,910
these little edge cases well

148
00:05:29,910 --> 00:05:32,160
traditionally what you would do is you

149
00:05:32,160 --> 00:05:33,690
would have perv request mocking its

150
00:05:33,690 --> 00:05:35,340
means that for all my edge cases I would

151
00:05:35,340 --> 00:05:37,860
have a request and a response and I'll

152
00:05:37,860 --> 00:05:39,720
have the exact response here this is

153
00:05:39,720 --> 00:05:41,790
nice this is good but now I'll lose all

154
00:05:41,790 --> 00:05:43,289
the benefits of my schema base mocking

155
00:05:43,289 --> 00:05:45,180
so what we do at stripe is we try to

156
00:05:45,180 --> 00:05:47,070
have the best of both worlds where we

157
00:05:47,070 --> 00:05:49,560
have overrides this means that I have my

158
00:05:49,560 --> 00:05:51,360
generic data which created from my

159
00:05:51,360 --> 00:05:54,060
schema but I can override some things so

160
00:05:54,060 --> 00:05:56,419
I can test for for a specific edge case

161
00:05:56,419 --> 00:05:59,370
over here my customers overs is the

162
00:05:59,370 --> 00:06:01,289
function that we wrote which actually

163
00:06:01,289 --> 00:06:02,880
lets me add extra data this is just a

164
00:06:02,880 --> 00:06:05,280
simple to-do list all I care for this

165
00:06:05,280 --> 00:06:06,840
particular to-do list is that there is

166
00:06:06,840 --> 00:06:08,640
two items one that is completed and one

167
00:06:08,640 --> 00:06:10,200
that is not everything else has been

168
00:06:10,200 --> 00:06:10,710
mocked

169
00:06:10,710 --> 00:06:12,630
which means that when I run my code and

170
00:06:12,630 --> 00:06:14,100
I test it I know exactly what I'm

171
00:06:14,100 --> 00:06:16,350
testing for so here's like an example of

172
00:06:16,350 --> 00:06:20,280
these default marks in this case I have

173
00:06:20,280 --> 00:06:21,990
this connect overview page react

174
00:06:21,990 --> 00:06:23,910
component this actually takes a lot of

175
00:06:23,910 --> 00:06:26,039
props and a lot of data but in this test

176
00:06:26,039 --> 00:06:27,900
I don't care about what kind of data

177
00:06:27,900 --> 00:06:29,789
goes in I just care that it renders and

178
00:06:29,789 --> 00:06:31,860
then it doesn't it break or anything so

179
00:06:31,860 --> 00:06:34,560
with global mocking by the SQL I

180
00:06:34,560 --> 00:06:36,030
actually have a lot of props are being

181
00:06:36,030 --> 00:06:38,640
passed into this component via Apollo

182
00:06:38,640 --> 00:06:39,900
test provider and I

183
00:06:39,900 --> 00:06:43,460
very easily check does this work or not

184
00:06:43,460 --> 00:06:46,530
his example of the same except we're

185
00:06:46,530 --> 00:06:48,600
using overrides now so I now have this

186
00:06:48,600 --> 00:06:51,960
custom resolver where I can add like

187
00:06:51,960 --> 00:06:53,450
things like a currency availability

188
00:06:53,450 --> 00:06:56,550
pending etc and I can test for exactly

189
00:06:56,550 --> 00:06:57,750
that what I'm interesting at the very

190
00:06:57,750 --> 00:06:59,310
bottom without having to worry about all

191
00:06:59,310 --> 00:07:01,950
the other props that are put into this

192
00:07:01,950 --> 00:07:06,180
particular component we also have some

193
00:07:06,180 --> 00:07:08,640
nice mocks for a really common edge case

194
00:07:08,640 --> 00:07:10,020
which can be reducing quite difficult to

195
00:07:10,020 --> 00:07:12,690
test which is error states and loading

196
00:07:12,690 --> 00:07:15,060
States so here I have an error provider

197
00:07:15,060 --> 00:07:16,530
and I have a loading provider which

198
00:07:16,530 --> 00:07:18,210
keeps those components in a perpetual

199
00:07:18,210 --> 00:07:20,790
state of are the loading or error so you

200
00:07:20,790 --> 00:07:23,310
can very easily see what your users will

201
00:07:23,310 --> 00:07:26,940
see if something goes wrong next don't

202
00:07:26,940 --> 00:07:29,280
talk about schema validation and this is

203
00:07:29,280 --> 00:07:30,330
something that's really important very

204
00:07:30,330 --> 00:07:32,520
dear to us at stripe because we are have

205
00:07:32,520 --> 00:07:34,260
grow it into a larger company where we

206
00:07:34,260 --> 00:07:35,880
have many people working on the same

207
00:07:35,880 --> 00:07:39,330
thing so when you make a small focused

208
00:07:39,330 --> 00:07:41,610
API change I want to make sure that I

209
00:07:41,610 --> 00:07:43,680
don't break a hundred other components

210
00:07:43,680 --> 00:07:44,910
from scratch out about our component

211
00:07:44,910 --> 00:07:46,740
base in a component system because it's

212
00:07:46,740 --> 00:07:49,440
really easy to do that because of the

213
00:07:49,440 --> 00:07:51,060
very nature of that component and Hana

214
00:07:51,060 --> 00:07:52,860
hereditary system so we need guardrails

215
00:07:52,860 --> 00:07:55,260
were able to do this what's really hard

216
00:07:55,260 --> 00:07:56,610
about like that stripe dashboard is that

217
00:07:56,610 --> 00:07:58,080
we do have a lot of people who work on

218
00:07:58,080 --> 00:07:59,190
the same project who don't necessarily

219
00:07:59,190 --> 00:08:01,080
see each other in person because we have

220
00:08:01,080 --> 00:08:03,510
a global distributed teams so how do we

221
00:08:03,510 --> 00:08:05,400
coordinate all these people build this

222
00:08:05,400 --> 00:08:07,140
thing especially across multiple time

223
00:08:07,140 --> 00:08:10,580
zones so that we have like a guardrail

224
00:08:10,580 --> 00:08:12,600
well so I'm going to talk about a little

225
00:08:12,600 --> 00:08:13,530
bit more about this in a sec but

226
00:08:13,530 --> 00:08:15,780
generally we have a one schema graph QL

227
00:08:15,780 --> 00:08:18,150
file we can generate flow types

228
00:08:18,150 --> 00:08:20,460
automatically and we have a backwards

229
00:08:20,460 --> 00:08:24,780
compatibility check er so first all of

230
00:08:24,780 --> 00:08:27,030
our graph QL our whole schema is in one

231
00:08:27,030 --> 00:08:29,340
file it's checked into our mono repo

232
00:08:29,340 --> 00:08:31,770
it's automatically generated by our API

233
00:08:31,770 --> 00:08:34,230
code and everything that we need like

234
00:08:34,230 --> 00:08:36,180
this is the source of truth for all our

235
00:08:36,180 --> 00:08:37,590
data that goes from the back end to the

236
00:08:37,590 --> 00:08:39,420
front end and what's cool about this is

237
00:08:39,420 --> 00:08:41,730
that as you can see here every single

238
00:08:41,730 --> 00:08:43,770
item here in this address has a type

239
00:08:43,770 --> 00:08:45,660
associated with that what can we do with

240
00:08:45,660 --> 00:08:48,480
that well with Apollo coach and tools we

241
00:08:48,480 --> 00:08:50,610
can actually generate flow types on the

242
00:08:50,610 --> 00:08:52,800
fly automatically everything that comes

243
00:08:52,800 --> 00:08:53,660
from the schema

244
00:08:53,660 --> 00:08:57,800
now has an automatic types set to it

245
00:08:57,800 --> 00:08:59,600
which makes developing a lot easier this

246
00:08:59,600 --> 00:09:01,490
is really cool so what we build at

247
00:09:01,490 --> 00:09:03,190
stripe is something called krory wrapper

248
00:09:03,190 --> 00:09:07,879
this is a function which takes an owner

249
00:09:07,879 --> 00:09:09,500
in this case the T though is responsible

250
00:09:09,500 --> 00:09:11,990
for this code and it takes a query this

251
00:09:11,990 --> 00:09:13,639
is just a normal graph QL query and it

252
00:09:13,639 --> 00:09:15,410
says exactly what data that I want for

253
00:09:15,410 --> 00:09:17,500
this component and it gives me back I

254
00:09:17,500 --> 00:09:21,529
ready to use react component here it is

255
00:09:21,529 --> 00:09:26,240
in use when I try to render it I have

256
00:09:26,240 --> 00:09:27,949
some props I have a loading state I have

257
00:09:27,949 --> 00:09:29,779
an arrow state and I have data and this

258
00:09:29,779 --> 00:09:31,819
data object is just what I specify what

259
00:09:31,819 --> 00:09:33,740
I wanted in the previous graph QL a

260
00:09:33,740 --> 00:09:36,740
query so this is a really nice and easy

261
00:09:36,740 --> 00:09:39,199
way to get my profs and my corners up

262
00:09:39,199 --> 00:09:42,620
running fast as possible but we need a

263
00:09:42,620 --> 00:09:44,120
backwards compatibility checker why do

264
00:09:44,120 --> 00:09:46,370
we need this well we found that at

265
00:09:46,370 --> 00:09:48,889
stripe sometimes people do not refresh

266
00:09:48,889 --> 00:09:51,680
their front-end ever and one instance we

267
00:09:51,680 --> 00:09:53,149
have someone who took over a month

268
00:09:53,149 --> 00:09:55,519
before they refresh their pages and we

269
00:09:55,519 --> 00:09:56,959
want to make sure that even those people

270
00:09:56,959 --> 00:09:59,180
who do like to close tabs you know who

271
00:09:59,180 --> 00:10:01,220
you are want to make sure that they

272
00:10:01,220 --> 00:10:04,220
don't have a bad experience with if they

273
00:10:04,220 --> 00:10:06,050
try like an operation and they get the

274
00:10:06,050 --> 00:10:07,310
front end gets back data wasn't

275
00:10:07,310 --> 00:10:10,819
expecting you get errors not good so we

276
00:10:10,819 --> 00:10:12,370
actually have built this into our CI

277
00:10:12,370 --> 00:10:14,630
component where if you change the schema

278
00:10:14,630 --> 00:10:16,160
in any way it yells at you and says

279
00:10:16,160 --> 00:10:18,019
don't do that but then you say okay well

280
00:10:18,019 --> 00:10:18,889
how do you actually make breaking

281
00:10:18,889 --> 00:10:20,269
changes then how do you how do we

282
00:10:20,269 --> 00:10:22,269
actually add stuff to this well

283
00:10:22,269 --> 00:10:24,230
sometimes we don't want to fields and

284
00:10:24,230 --> 00:10:25,430
your effort no one's using we can have a

285
00:10:25,430 --> 00:10:27,740
simple two step process we mark a field

286
00:10:27,740 --> 00:10:29,930
as deprecated and we delete it merge

287
00:10:29,930 --> 00:10:32,240
sorry we mark applies field as

288
00:10:32,240 --> 00:10:33,860
deprecated then we merge and that one's

289
00:10:33,860 --> 00:10:35,360
for sure that no one's using their field

290
00:10:35,360 --> 00:10:37,100
anymore which we can do via monitoring

291
00:10:37,100 --> 00:10:40,160
with graph QL we can just delete it this

292
00:10:40,160 --> 00:10:41,720
is not ideal for things like modifying

293
00:10:41,720 --> 00:10:43,730
an existing field but we're working on

294
00:10:43,730 --> 00:10:47,209
things like that next I will talk about

295
00:10:47,209 --> 00:10:48,649
just the benefits we've seen from

296
00:10:48,649 --> 00:10:51,199
adopting graph QL so if you've ever read

297
00:10:51,199 --> 00:10:52,790
about graph QL I've ever seen a video

298
00:10:52,790 --> 00:10:55,610
you see like these common benefits which

299
00:10:55,610 --> 00:10:57,050
we absolutely agree with these are

300
00:10:57,050 --> 00:10:59,480
fantastic but it is over fetching you

301
00:10:59,480 --> 00:11:01,009
know not having too many queries to

302
00:11:01,009 --> 00:11:02,660
worry about these are all fantastic but

303
00:11:02,660 --> 00:11:04,370
I want to talk more about what we at

304
00:11:04,370 --> 00:11:05,930
stripe have really found has been really

305
00:11:05,930 --> 00:11:07,390
beneficial about

306
00:11:07,390 --> 00:11:11,260
using graph QL at scale which can be

307
00:11:11,260 --> 00:11:13,920
somewhere in great tools and community

308
00:11:13,920 --> 00:11:16,960
easily add stuff and those static types

309
00:11:16,960 --> 00:11:18,520
first I just want to talk about the

310
00:11:18,520 --> 00:11:19,990
tools and Docs

311
00:11:19,990 --> 00:11:23,740
so because graph QL an Apollo coach n

312
00:11:23,740 --> 00:11:26,710
are open source communities a lot of

313
00:11:26,710 --> 00:11:28,750
work goes into this stuff as much as we

314
00:11:28,750 --> 00:11:31,240
love the very proudly internal tooling

315
00:11:31,240 --> 00:11:33,130
we have every two we build in-house is

316
00:11:33,130 --> 00:11:34,210
something we have to maintain ourselves

317
00:11:34,210 --> 00:11:36,430
by using graph QL there are many large

318
00:11:36,430 --> 00:11:38,200
companies that are using this it kind of

319
00:11:38,200 --> 00:11:40,350
takes the strain off of us

320
00:11:40,350 --> 00:11:44,290
and they're just fantastic documentation

321
00:11:44,290 --> 00:11:45,940
to be had with graph QL as well one of

322
00:11:45,940 --> 00:11:48,130
the best things about graph QL is that

323
00:11:48,130 --> 00:11:50,410
if you have heard of graphical and have

324
00:11:50,410 --> 00:11:52,030
used in a previous job if you start work

325
00:11:52,030 --> 00:11:53,830
at stripe you already know how stripes

326
00:11:53,830 --> 00:11:55,570
front-end works because it's exactly the

327
00:11:55,570 --> 00:12:00,010
same way it was before and finally the

328
00:12:00,010 --> 00:12:01,630
real big benefit we've seen is just the

329
00:12:01,630 --> 00:12:03,700
automatically generated static types so

330
00:12:03,700 --> 00:12:05,920
this we use flow internally however this

331
00:12:05,920 --> 00:12:08,020
will work with typescript as well it's

332
00:12:08,020 --> 00:12:09,520
just really nice to have a component

333
00:12:09,520 --> 00:12:11,980
with data and know exactly what types

334
00:12:11,980 --> 00:12:14,440
those data is and it makes really easy

335
00:12:14,440 --> 00:12:16,650
to review code gives you more or less

336
00:12:16,650 --> 00:12:18,490
unintentional side effects and you can

337
00:12:18,490 --> 00:12:25,180
modify a couple of so much faster same

338
00:12:25,180 --> 00:12:27,790
conclusion I promise this would be short

339
00:12:27,790 --> 00:12:29,080
because I know we're holding up lunch

340
00:12:29,080 --> 00:12:32,410
right now graph kill works across the

341
00:12:32,410 --> 00:12:35,290
stack at scale really nicely it's makes

342
00:12:35,290 --> 00:12:38,380
everyone happy it's lets you well that's

343
00:12:38,380 --> 00:12:39,760
all your developers kind of work in

344
00:12:39,760 --> 00:12:42,250
unison and touch the same code without

345
00:12:42,250 --> 00:12:43,360
getting stepping on each other's feet

346
00:12:43,360 --> 00:12:45,970
makes testing easier and what's really

347
00:12:45,970 --> 00:12:48,460
nice is just how quickly people can ramp

348
00:12:48,460 --> 00:12:51,070
up and start developing with graph QL

349
00:12:51,070 --> 00:12:53,170
and I promise I was not paid by Rothko

350
00:12:53,170 --> 00:12:54,430
to say these things i generally do you

351
00:12:54,430 --> 00:12:58,090
think it's a fantastic service right

352
00:12:58,090 --> 00:12:59,620
with that thank you so much for having

353
00:12:59,620 --> 00:13:01,920
me please do check out stripe dev and

354
00:13:01,920 --> 00:13:03,970
come to our workshop which is hopefully

355
00:13:03,970 --> 00:13:06,819
starting in about an hour's time

