1
00:00:13,030 --> 00:00:15,820

all right so these are my critters

2
00:00:15,820 --> 00:00:23,259
allegra and claritin now about a year

3
00:00:23,259 --> 00:00:26,079
ago i started a project well i started a

4
00:00:26,079 --> 00:00:27,880
Pinterest board called guinea pig fairy

5
00:00:27,880 --> 00:00:32,800
village my my critters have a fairly

6
00:00:32,800 --> 00:00:35,760
large cage but you know I dream bigger

7
00:00:35,760 --> 00:00:38,559
my vision was that instead of just

8
00:00:38,559 --> 00:00:39,790
having a regular cage they could have

9
00:00:39,790 --> 00:00:40,989
something that was I know somewhere

10
00:00:40,989 --> 00:00:43,329
between like the Keebler Elf tree and

11
00:00:43,329 --> 00:00:46,420
the village from The Hobbit and then I

12
00:00:46,420 --> 00:00:47,739
thought like well guinea pig their

13
00:00:47,739 --> 00:00:49,629
social animals if I if I'm building a

14
00:00:49,629 --> 00:00:51,159
hobbit village and why stop at two

15
00:00:51,159 --> 00:00:52,690
career so I gotta have a whole colony of

16
00:00:52,690 --> 00:00:54,760
them you know I hit some roadblocks

17
00:00:54,760 --> 00:00:58,989
almost immediately three problems one as

18
00:00:58,989 --> 00:01:01,059
the name suggests i am quite allergic to

19
00:01:01,059 --> 00:01:05,260
them to a given i can barely clean off

20
00:01:05,260 --> 00:01:07,630
after two guinea pigs there's no way I'm

21
00:01:07,630 --> 00:01:08,590
going to keep up with like a whole

22
00:01:08,590 --> 00:01:12,159
village and three I am not particularly

23
00:01:12,159 --> 00:01:14,409
handy and I don't think that they sell

24
00:01:14,409 --> 00:01:17,740
this at IKEA um but you know I'm a

25
00:01:17,740 --> 00:01:19,659
programmer I'm a problem solver I might

26
00:01:19,659 --> 00:01:21,610
be a lazy slob but I can work with that

27
00:01:21,610 --> 00:01:24,549
so I at first I think well maybe I can

28
00:01:24,549 --> 00:01:25,960
just release a bunch of dung beetles

29
00:01:25,960 --> 00:01:27,369
into the village and they can I can just

30
00:01:27,369 --> 00:01:29,920
let nature take its course but then but

31
00:01:29,920 --> 00:01:34,420
then I think why would I build anything

32
00:01:34,420 --> 00:01:35,920
all I'm a programmer I could make a

33
00:01:35,920 --> 00:01:39,130
virtual guinea pig village that critters

34
00:01:39,130 --> 00:01:44,170
could live in cyberspace and then when I

35
00:01:44,170 --> 00:01:46,180
start thinking on this I think no oh no

36
00:01:46,180 --> 00:01:47,859
if this thing I could do this as an app

37
00:01:47,859 --> 00:01:50,049
I can do in app purchase it could be to

38
00:01:50,049 --> 00:01:51,880
take off i can start making that the Kim

39
00:01:51,880 --> 00:01:54,729
Kardashian bucks but but before I get to

40
00:01:54,729 --> 00:01:56,229
all that I'm not really I'm not here to

41
00:01:56,229 --> 00:01:57,340
talk about getting rich with free to

42
00:01:57,340 --> 00:01:59,079
play games i'm i am here to talk about

43
00:01:59,079 --> 00:02:04,990
my design process and now I the last

44
00:02:04,990 --> 00:02:06,399
couple of years I've seen an interesting

45
00:02:06,399 --> 00:02:08,679
progression I mean I used to be you know

46
00:02:08,679 --> 00:02:10,690
full stack but a lot of what I was doing

47
00:02:10,690 --> 00:02:11,740
in the full stack has moved to the front

48
00:02:11,740 --> 00:02:14,110
end but you know even though the work

49
00:02:14,110 --> 00:02:16,270
has shifted entirely client-side I'm

50
00:02:16,270 --> 00:02:18,370
still applying the same client server

51
00:02:18,370 --> 00:02:20,650
patterns within the client just at a

52
00:02:20,650 --> 00:02:22,690
smaller scale it's like yo dawg i herd

53
00:02:22,690 --> 00:02:24,250
you liek client-server architecture so I

54
00:02:24,250 --> 00:02:26,530
put yell you know as

55
00:02:26,530 --> 00:02:28,150
gone into the reacting co system I keep

56
00:02:28,150 --> 00:02:29,950
seeing things like this and parallels

57
00:02:29,950 --> 00:02:32,440
between the what we do on the client and

58
00:02:32,440 --> 00:02:33,700
what we used to do in the whole system

59
00:02:33,700 --> 00:02:36,459
and I'll encounter something new like

60
00:02:36,459 --> 00:02:39,069
frp or events or sing or sagas only to

61
00:02:39,069 --> 00:02:40,209
discover that they've been around for

62
00:02:40,209 --> 00:02:41,770
like 20 or 30 years in the back end

63
00:02:41,770 --> 00:02:45,370
world and this got me thinking about the

64
00:02:45,370 --> 00:02:47,530
the history of ideas and the way that

65
00:02:47,530 --> 00:02:49,660
the way that they spread and mutate on

66
00:02:49,660 --> 00:02:52,720
though the everything is a remix so as I

67
00:02:52,720 --> 00:02:54,880
walked through my design thinking on

68
00:02:54,880 --> 00:02:56,830
this virtual critter village and try and

69
00:02:56,830 --> 00:02:58,840
trace the history of these patterns and

70
00:02:58,840 --> 00:03:01,120
ideas my hopes are that if we can

71
00:03:01,120 --> 00:03:02,739
recognize the parallels between then and

72
00:03:02,739 --> 00:03:05,050
now I will be able to identify where

73
00:03:05,050 --> 00:03:06,550
things can go wrong without having to

74
00:03:06,550 --> 00:03:09,220
make those mistakes all over again so

75
00:03:09,220 --> 00:03:11,819
let's call this product critter ville

76
00:03:11,819 --> 00:03:13,840
hopefully I can think of a better name

77
00:03:13,840 --> 00:03:15,250
before I get a cease and desist from

78
00:03:15,250 --> 00:03:18,519
zynga now now in this this game or toy

79
00:03:18,519 --> 00:03:20,470
or whatever it is uh the the the goal is

80
00:03:20,470 --> 00:03:21,850
that you you you have a you build a

81
00:03:21,850 --> 00:03:23,769
village for guinea pigs with no fixtures

82
00:03:23,769 --> 00:03:25,720
like food dishes and houses and toys and

83
00:03:25,720 --> 00:03:27,400
stuff and your goal is to attract

84
00:03:27,400 --> 00:03:28,900
critters to the village and then keep

85
00:03:28,900 --> 00:03:32,560
them fed and healthy and happy now as

86
00:03:32,560 --> 00:03:34,450
far as how I'm modeling the critters you

87
00:03:34,450 --> 00:03:35,410
know guinea pigs are not particularly

88
00:03:35,410 --> 00:03:37,750
sophisticated animals they have uh you

89
00:03:37,750 --> 00:03:39,489
know and you know the way my modeling

90
00:03:39,489 --> 00:03:41,110
this with very simple behavioral

91
00:03:41,110 --> 00:03:42,820
feedback loops you for example when they

92
00:03:42,820 --> 00:03:44,799
cross a hunger threshold they'll try and

93
00:03:44,799 --> 00:03:49,959
eat food also they poop constantly which

94
00:03:49,959 --> 00:03:54,910
the user needs to clean up and happy and

95
00:03:54,910 --> 00:03:57,700
healthy happy and well-fed critters are

96
00:03:57,700 --> 00:03:59,230
friendly to you and each other but a

97
00:03:59,230 --> 00:04:00,730
jetÃ© tanned hungry critters get

98
00:04:00,730 --> 00:04:02,320
aggressive and eventually leave the

99
00:04:02,320 --> 00:04:05,230
village so I think I'm ready to start

100
00:04:05,230 --> 00:04:07,030
expecting this out so but where do I

101
00:04:07,030 --> 00:04:09,880
begin what kind of artifact do I want to

102
00:04:09,880 --> 00:04:12,070
use as my reference ah there's a couple

103
00:04:12,070 --> 00:04:13,709
of different design approaches I've seen

104
00:04:13,709 --> 00:04:17,289
now I to work a lot in agencies and

105
00:04:17,289 --> 00:04:20,079
design process it seemed to be I would

106
00:04:20,079 --> 00:04:22,690
get a mock-up and then be told to like

107
00:04:22,690 --> 00:04:24,610
work down the stack from there where I'm

108
00:04:24,610 --> 00:04:26,200
supposed to figure out how it works

109
00:04:26,200 --> 00:04:29,200
based on what it looks like now there's

110
00:04:29,200 --> 00:04:30,820
there's obvious problems with that but I

111
00:04:30,820 --> 00:04:32,110
think the opposite approach doesn't work

112
00:04:32,110 --> 00:04:33,910
either you know a lot of times when

113
00:04:33,910 --> 00:04:35,409
engineers are tasked with like

114
00:04:35,409 --> 00:04:37,390
cataloging requirements we think okay

115
00:04:37,390 --> 00:04:39,550
we'll make an erd and you know well it

116
00:04:39,550 --> 00:04:40,180
will have

117
00:04:40,180 --> 00:04:41,590
this giant database schema and we'll

118
00:04:41,590 --> 00:04:43,270
figure everything out beforehand then

119
00:04:43,270 --> 00:04:45,970
we'll build up the stack from there I

120
00:04:45,970 --> 00:04:48,910
get why people follow these approaches

121
00:04:48,910 --> 00:04:50,560
by say tended to major problems with

122
00:04:50,560 --> 00:04:52,990
them first is that they the commingled

123
00:04:52,990 --> 00:04:55,389
the ideas with the implementation I want

124
00:04:55,389 --> 00:04:57,190
to map out the problem of modeling a

125
00:04:57,190 --> 00:04:59,020
guinea pig village that that has nothing

126
00:04:59,020 --> 00:05:00,850
to do with page layout or whether I use

127
00:05:00,850 --> 00:05:03,820
like a var char instead of a text second

128
00:05:03,820 --> 00:05:07,240
both uhh both comps and databases Davis

129
00:05:07,240 --> 00:05:10,180
schemas they answer what it is but not

130
00:05:10,180 --> 00:05:12,490
so much what it does I you know in

131
00:05:12,490 --> 00:05:14,979
addition to like the facts i also want

132
00:05:14,979 --> 00:05:16,599
to identify things like what are the

133
00:05:16,599 --> 00:05:18,310
commands i can issue one of the

134
00:05:18,310 --> 00:05:20,800
questions i can ask in other words like

135
00:05:20,800 --> 00:05:23,199
what are the messages between me and the

136
00:05:23,199 --> 00:05:26,620
computer going to be so the design

137
00:05:26,620 --> 00:05:28,599
artifacts i'm going to start with the

138
00:05:28,599 --> 00:05:30,910
sort of like the core principle of this

139
00:05:30,910 --> 00:05:33,789
guinea pig system is a vocabulary of

140
00:05:33,789 --> 00:05:36,310
these facts and messages I don't think

141
00:05:36,310 --> 00:05:37,720
of these as technical terms they're not

142
00:05:37,720 --> 00:05:38,889
this is not again it's not

143
00:05:38,889 --> 00:05:41,160
implementation details this is all about

144
00:05:41,160 --> 00:05:43,330
this is all about the domain of the

145
00:05:43,330 --> 00:05:46,090
problem this is this is an idea i'm

146
00:05:46,090 --> 00:05:49,960
lifting probably incorrectly from eric

147
00:05:49,960 --> 00:05:52,380
Evans's ubiquity domain-driven designs

148
00:05:52,380 --> 00:05:55,630
ubiquitous language now this again this

149
00:05:55,630 --> 00:05:58,570
isn't this is similar to like a an API

150
00:05:58,570 --> 00:06:01,199
or a schema but those are more

151
00:06:01,199 --> 00:06:03,280
implementations of a vocabulary for the

152
00:06:03,280 --> 00:06:04,780
computer to work with I'm trying to

153
00:06:04,780 --> 00:06:06,669
think more an abstract level right now

154
00:06:06,669 --> 00:06:08,590
like like what terms am I gonna use in

155
00:06:08,590 --> 00:06:10,630
the documentation what words would I use

156
00:06:10,630 --> 00:06:14,680
on buttons and labels now make this a

157
00:06:14,680 --> 00:06:16,150
little less abstract let's think about

158
00:06:16,150 --> 00:06:18,580
what the doms vocabulary is I mean we've

159
00:06:18,580 --> 00:06:21,370
got we've got the HTML tags attributes

160
00:06:21,370 --> 00:06:25,780
and properties input types events uh you

161
00:06:25,780 --> 00:06:28,150
know but and also we have the the terms

162
00:06:28,150 --> 00:06:29,830
that we use for categorizing them you

163
00:06:29,830 --> 00:06:32,110
know tags attributes props inputs events

164
00:06:32,110 --> 00:06:33,070
those are those are all part of

165
00:06:33,070 --> 00:06:34,720
vocabulary as well I think this is

166
00:06:34,720 --> 00:06:35,770
actually the harder part of the

167
00:06:35,770 --> 00:06:38,080
vocabulary is defining the like that the

168
00:06:38,080 --> 00:06:40,539
taxonomy it's easy to identify like the

169
00:06:40,539 --> 00:06:42,220
concrete terms of the domain but it's

170
00:06:42,220 --> 00:06:43,599
it's tricky when you need to talk about

171
00:06:43,599 --> 00:06:45,159
things that are more abstract or more

172
00:06:45,159 --> 00:06:48,490
about categorization I mean if you need

173
00:06:48,490 --> 00:06:50,979
any example of this I mean how many

174
00:06:50,979 --> 00:06:52,300
people here know what the difference

175
00:06:52,300 --> 00:06:53,449
between an attribute in a pro

176
00:06:53,449 --> 00:06:59,419
is I see one hand I when I was working

177
00:06:59,419 --> 00:07:01,460
on this I I feel like I might know what

178
00:07:01,460 --> 00:07:02,689
it is I think it's one of those like

179
00:07:02,689 --> 00:07:04,430
instance versus class type things but

180
00:07:04,430 --> 00:07:06,379
I'm probably wrong and that's why I'm

181
00:07:06,379 --> 00:07:08,990
just lumping them together now another

182
00:07:08,990 --> 00:07:11,180
Chanin challenge of managing the growth

183
00:07:11,180 --> 00:07:13,779
of a vocabulary over time is uh you know

184
00:07:13,779 --> 00:07:16,849
how do you grow it how do you how do you

185
00:07:16,849 --> 00:07:19,129
grow it in a way that's organic but not

186
00:07:19,129 --> 00:07:22,249
haphazard this is another problem that a

187
00:07:22,249 --> 00:07:23,900
lot of people have with the Dom there's

188
00:07:23,900 --> 00:07:25,520
there some places with it works out

189
00:07:25,520 --> 00:07:27,229
really nice like I think it's nice that

190
00:07:27,229 --> 00:07:29,449
all the input types are you know the

191
00:07:29,449 --> 00:07:31,669
inputs are basically have they share

192
00:07:31,669 --> 00:07:33,770
very similar interfaces and then you

193
00:07:33,770 --> 00:07:36,229
know all the the fancier inputs will

194
00:07:36,229 --> 00:07:38,210
degrade into a simple text input but

195
00:07:38,210 --> 00:07:39,710
then we also have things like text areas

196
00:07:39,710 --> 00:07:42,770
and and selects which are you know sort

197
00:07:42,770 --> 00:07:45,050
of artifacts of you know the the

198
00:07:45,050 --> 00:07:47,029
thinking in 1991 where it's like oh well

199
00:07:47,029 --> 00:07:48,199
HTML is not gonna get any bigger than

200
00:07:48,199 --> 00:07:49,490
this we don't need to add sub

201
00:07:49,490 --> 00:07:54,559
categorizations and you know then they

202
00:07:54,559 --> 00:07:55,639
have their own totally different

203
00:07:55,639 --> 00:07:57,680
interfaces and then you it it adds

204
00:07:57,680 --> 00:07:59,659
complexity to have this or or another

205
00:07:59,659 --> 00:08:01,279
example would be the way that we have

206
00:08:01,279 --> 00:08:03,800
like three different systems for doing

207
00:08:03,800 --> 00:08:05,719
document outline we have like the h1

208
00:08:05,719 --> 00:08:10,039
through 86 we have like nested lists and

209
00:08:10,039 --> 00:08:13,729
then we also have the what's that like

210
00:08:13,729 --> 00:08:17,330
the nested sections and then sections

211
00:08:17,330 --> 00:08:19,430
and sections having sections are suppose

212
00:08:19,430 --> 00:08:20,539
to have their own document outline but

213
00:08:20,539 --> 00:08:23,899
note that was never implemented now in

214
00:08:23,899 --> 00:08:25,339
you encounter a lot of these

215
00:08:25,339 --> 00:08:27,860
vocabularies in in our day-to-day work I

216
00:08:27,860 --> 00:08:30,229
think as much as we think of programming

217
00:08:30,229 --> 00:08:32,569
in terms of like oh well it's its stem

218
00:08:32,569 --> 00:08:34,459
it's it's it's just it's a it's all just

219
00:08:34,459 --> 00:08:36,620
math and algorithms and stuff most most

220
00:08:36,620 --> 00:08:38,659
of the work that I do especially maybe

221
00:08:38,659 --> 00:08:40,039
as just as a front-end developer is

222
00:08:40,039 --> 00:08:44,480
thinking about like the the thing that

223
00:08:44,480 --> 00:08:46,279
this from a linguistic perspective and

224
00:08:46,279 --> 00:08:48,589
like you know maintaining and learning

225
00:08:48,589 --> 00:08:51,260
and creating vocabularies um you know

226
00:08:51,260 --> 00:08:53,060
that you know if every domain that we

227
00:08:53,060 --> 00:08:54,920
work in has its own terms and sometimes

228
00:08:54,920 --> 00:08:56,690
they sometimes terms have similar

229
00:08:56,690 --> 00:09:01,490
meanings but or as they 44 sometimes

230
00:09:01,490 --> 00:09:03,110
terms will have different words for the

231
00:09:03,110 --> 00:09:07,190
same meaning or domains that intersect

232
00:09:07,190 --> 00:09:09,460
like the dominate GP will have like

233
00:09:09,460 --> 00:09:11,690
intersect will have different terms for

234
00:09:11,690 --> 00:09:14,840
the same thing or you know weird meshing

235
00:09:14,840 --> 00:09:18,110
issues and you know at the risk of a

236
00:09:18,110 --> 00:09:19,700
circular definition though I think that

237
00:09:19,700 --> 00:09:21,770
what makes something understandable what

238
00:09:21,770 --> 00:09:23,810
would make something recognizable as a

239
00:09:23,810 --> 00:09:25,880
problem domain is that we can say that

240
00:09:25,880 --> 00:09:29,810
we have a vocabulary for it so before

241
00:09:29,810 --> 00:09:31,820
before I even get the implementation of

242
00:09:31,820 --> 00:09:33,770
critter ville I want to think about what

243
00:09:33,770 --> 00:09:35,240
the vocabulary for critical is going to

244
00:09:35,240 --> 00:09:37,580
look like so I've got my mind's the

245
00:09:37,580 --> 00:09:39,500
entities in critter bills if I'm gonna

246
00:09:39,500 --> 00:09:41,120
add another kind of creature like dung

247
00:09:41,120 --> 00:09:42,980
beetles for example that would go in

248
00:09:42,980 --> 00:09:44,600
this column but then I have to think

249
00:09:44,600 --> 00:09:45,560
about if I'm going to add a lot of

250
00:09:45,560 --> 00:09:46,940
creatures or a lot of different fixtures

251
00:09:46,940 --> 00:09:48,020
do I want to break that into

252
00:09:48,020 --> 00:09:51,050
subcategories I also have my verbs these

253
00:09:51,050 --> 00:09:53,210
are these are the actions that are going

254
00:09:53,210 --> 00:09:54,470
to be performed by the user or the

255
00:09:54,470 --> 00:09:56,000
critters I mean and I have these

256
00:09:56,000 --> 00:09:57,890
categorized by subject but you know

257
00:09:57,890 --> 00:09:59,210
maybe I'm going maybe if I have a

258
00:09:59,210 --> 00:10:01,160
different kind of thing that can you

259
00:10:01,160 --> 00:10:02,930
know have actions and I me I'll need to

260
00:10:02,930 --> 00:10:04,250
think about like do I want to add this

261
00:10:04,250 --> 00:10:06,050
to the this set or do I want to create

262
00:10:06,050 --> 00:10:10,130
another layer of taxonomy and then I've

263
00:10:10,130 --> 00:10:11,420
the the traits the you know the

264
00:10:11,420 --> 00:10:12,800
qualities that affect the state and

265
00:10:12,800 --> 00:10:14,480
behavior some of these are going to

266
00:10:14,480 --> 00:10:16,460
apply only to critters and like fear and

267
00:10:16,460 --> 00:10:18,500
hunger others like position those apply

268
00:10:18,500 --> 00:10:19,910
to you know everything your poop has a

269
00:10:19,910 --> 00:10:21,020
position even though it doesn't have a

270
00:10:21,020 --> 00:10:23,300
lot of other traits every poopit for the

271
00:10:23,300 --> 00:10:25,010
purposes of critter ville simulation and

272
00:10:25,010 --> 00:10:26,540
say every poop is the same that's not

273
00:10:26,540 --> 00:10:31,310
actually true don't don't at me now

274
00:10:31,310 --> 00:10:32,660
something you may have noticed is that a

275
00:10:32,660 --> 00:10:33,950
lot of the vocabulary been talking about

276
00:10:33,950 --> 00:10:36,410
is is it's related to the interfaces of

277
00:10:36,410 --> 00:10:39,380
the respective domains you know the

278
00:10:39,380 --> 00:10:40,310
these are all terms that I'm

279
00:10:40,310 --> 00:10:42,530
encountering as a user of HTTP or of the

280
00:10:42,530 --> 00:10:44,270
Dom not as someone who's building it I'm

281
00:10:44,270 --> 00:10:46,100
I'm sure that a well-organized

282
00:10:46,100 --> 00:10:47,240
vocabularies really useful for the

283
00:10:47,240 --> 00:10:49,340
implementers but it's absolutely crucial

284
00:10:49,340 --> 00:10:52,490
for the consumers and this is because if

285
00:10:52,490 --> 00:10:54,470
I'm working on the browser the only way

286
00:10:54,470 --> 00:10:56,089
to interact with the page is through the

287
00:10:56,089 --> 00:10:57,980
doms interface I can't write to the doms

288
00:10:57,980 --> 00:11:00,920
memory you know kangas gives you a

289
00:11:00,920 --> 00:11:02,000
little bit of that but Candice has it

290
00:11:02,000 --> 00:11:03,650
have it has its own interface it's just

291
00:11:03,650 --> 00:11:06,650
lower level you know in order to work

292
00:11:06,650 --> 00:11:08,900
with these interfaces I need to send and

293
00:11:08,900 --> 00:11:11,210
interpret messages that conform to their

294
00:11:11,210 --> 00:11:15,050
protocols now for example let's look at

295
00:11:15,050 --> 00:11:17,920
the HTTP the hypertext transfer protocol

296
00:11:17,920 --> 00:11:20,570
for transferring hypertext

297
00:11:20,570 --> 00:11:22,460
a typical HTTP interaction has the you

298
00:11:22,460 --> 00:11:24,920
know client sends a request server then

299
00:11:24,920 --> 00:11:27,560
sends a response back so a request I

300
00:11:27,560 --> 00:11:30,110
mean this is you know what do we have in

301
00:11:30,110 --> 00:11:31,880
here this it's just we have the method

302
00:11:31,880 --> 00:11:35,660
that would get the path version and a

303
00:11:35,660 --> 00:11:37,460
couple of other headers for metadata and

304
00:11:37,460 --> 00:11:39,770
then we've got the the response which is

305
00:11:39,770 --> 00:11:43,550
the unity htp version a status code more

306
00:11:43,550 --> 00:11:45,110
metadata and then the actual page that

307
00:11:45,110 --> 00:11:47,780
was requested another another kind of

308
00:11:47,780 --> 00:11:51,080
message is a again with the Dom we Dom

309
00:11:51,080 --> 00:11:52,820
events have a different purpose in a

310
00:11:52,820 --> 00:11:54,470
different context and HP requests

311
00:11:54,470 --> 00:11:56,180
because they're on the same computer and

312
00:11:56,180 --> 00:11:58,130
they did the data doesn't need be

313
00:11:58,130 --> 00:12:00,470
serialized into text but they share a

314
00:12:00,470 --> 00:12:02,660
fundamental rationale communicating

315
00:12:02,660 --> 00:12:05,270
between two isolated environments in

316
00:12:05,270 --> 00:12:06,950
this case the native browser UI in the

317
00:12:06,950 --> 00:12:10,280
JavaScript runtime in both cases there

318
00:12:10,280 --> 00:12:12,770
are security rationales behind this air

319
00:12:12,770 --> 00:12:15,980
gap in HP's case there's there's an

320
00:12:15,980 --> 00:12:18,530
initial goal of network efficiency but

321
00:12:18,530 --> 00:12:20,270
the goals of both these protocols are to

322
00:12:20,270 --> 00:12:22,490
enable communication between two parties

323
00:12:22,490 --> 00:12:24,320
without intimate knowledge of each

324
00:12:24,320 --> 00:12:26,330
other's innards they only need to speak

325
00:12:26,330 --> 00:12:29,510
the same language then JavaScript when

326
00:12:29,510 --> 00:12:32,180
we deal with these messages it's often

327
00:12:32,180 --> 00:12:33,380
in terms of like events and event

328
00:12:33,380 --> 00:12:35,270
handlers where we run a call back

329
00:12:35,270 --> 00:12:37,370
whenever a received message mapped as a

330
00:12:37,370 --> 00:12:40,340
particular pattern and now terminology

331
00:12:40,340 --> 00:12:42,050
note I'm sure there's a distinction be

332
00:12:42,050 --> 00:12:44,180
made between events and messages and

333
00:12:44,180 --> 00:12:46,880
actions and all that stuff but for for

334
00:12:46,880 --> 00:12:48,920
our purposes they are basically the same

335
00:12:48,920 --> 00:12:51,770
I think that this here the this jquery

336
00:12:51,770 --> 00:12:52,970
event listener is how a lot of people

337
00:12:52,970 --> 00:12:54,560
first encountered this I mean this is

338
00:12:54,560 --> 00:12:55,700
when when when I got into web

339
00:12:55,700 --> 00:12:59,240
development this was jquery was king as

340
00:12:59,240 --> 00:13:01,580
i would have used the the native Dom

341
00:13:01,580 --> 00:13:03,110
version but it's actually too long to

342
00:13:03,110 --> 00:13:06,650
fit on to a lot of blank vids legibly as

343
00:13:06,650 --> 00:13:09,020
this handler is for listen listen to DOM

344
00:13:09,020 --> 00:13:11,330
events of type click sent to that button

345
00:13:11,330 --> 00:13:15,440
and then a call show menu and we see the

346
00:13:15,440 --> 00:13:17,990
same pattern in so this is like Express

347
00:13:17,990 --> 00:13:19,850
a interesting thing here is this is

348
00:13:19,850 --> 00:13:23,420
matching on both the post HTTP method

349
00:13:23,420 --> 00:13:28,910
and the path users and ID then node uses

350
00:13:28,910 --> 00:13:30,140
the same patterns for signals and

351
00:13:30,140 --> 00:13:32,390
streams and I know if anyone saw the

352
00:13:32,390 --> 00:13:33,920
bb-8 talk

353
00:13:33,920 --> 00:13:37,160
person who gave it us in here if you saw

354
00:13:37,160 --> 00:13:39,139
the bb-8 talk the inter process

355
00:13:39,139 --> 00:13:40,579
communication works in very much the

356
00:13:40,579 --> 00:13:43,579
same way that's not the only way that we

357
00:13:43,579 --> 00:13:45,620
encounter events in JavaScript so like

358
00:13:45,620 --> 00:13:50,000
react and old-school HTML of course they

359
00:13:50,000 --> 00:13:52,610
have their in line handlers react also

360
00:13:52,610 --> 00:13:56,060
has its life cycle events it's because

361
00:13:56,060 --> 00:13:58,160
because they're met we there operate the

362
00:13:58,160 --> 00:13:59,449
operators methods we don't necessarily

363
00:13:59,449 --> 00:14:01,639
think of them as event handlers but they

364
00:14:01,639 --> 00:14:02,839
totally are in fact this is how events

365
00:14:02,839 --> 00:14:04,820
are handled in most you know typical

366
00:14:04,820 --> 00:14:07,100
object-oriented languages and then Redux

367
00:14:07,100 --> 00:14:09,709
is actions redux those are also you know

368
00:14:09,709 --> 00:14:11,769
another events or messages or whatever

369
00:14:11,769 --> 00:14:15,170
and it really doesn't offer you any sort

370
00:14:15,170 --> 00:14:16,370
of pattern matching that leaves it

371
00:14:16,370 --> 00:14:18,529
totally up to the developer so it just

372
00:14:18,529 --> 00:14:20,720
sends you it sends you every action to

373
00:14:20,720 --> 00:14:22,820
every reducer and then you know you're

374
00:14:22,820 --> 00:14:24,800
up to you know whatever right a giant

375
00:14:24,800 --> 00:14:26,720
switch statement to match on that

376
00:14:26,720 --> 00:14:29,449
pattern now the biggest advantage of

377
00:14:29,449 --> 00:14:31,070
message passing is concurrency many

378
00:14:31,070 --> 00:14:35,120
messages can be flight at once this is

379
00:14:35,120 --> 00:14:36,800
also one of its biggest challenges it's

380
00:14:36,800 --> 00:14:39,800
as you can see it's easy to get confused

381
00:14:39,800 --> 00:14:42,769
about you know what messages are in play

382
00:14:42,769 --> 00:14:44,870
and create race conditions because

383
00:14:44,870 --> 00:14:46,160
messages aren't being handled in the

384
00:14:46,160 --> 00:14:49,519
order you expected so when one of the

385
00:14:49,519 --> 00:14:51,769
big challenges in development today is

386
00:14:51,769 --> 00:14:53,660
how do we manage messages so that we can

387
00:14:53,660 --> 00:14:54,949
you know deal with them in an orderly

388
00:14:54,949 --> 00:14:59,420
fashion now another another problem you

389
00:14:59,420 --> 00:15:00,560
encounter with messages that they're not

390
00:15:00,560 --> 00:15:02,930
always meaningful in isolation this is

391
00:15:02,930 --> 00:15:04,160
something that we encounter all the time

392
00:15:04,160 --> 00:15:05,540
I think about what a pain in the asset

393
00:15:05,540 --> 00:15:07,100
is to make the flow of form validation

394
00:15:07,100 --> 00:15:10,010
feel right or like have you ever tried

395
00:15:10,010 --> 00:15:11,510
implementing double clicking from

396
00:15:11,510 --> 00:15:13,970
scratch it's a huge pain in the ass it's

397
00:15:13,970 --> 00:15:16,519
it's your messages might need to cancel

398
00:15:16,519 --> 00:15:18,019
each other out or happen in a certain

399
00:15:18,019 --> 00:15:19,640
sequence or within a particular time

400
00:15:19,640 --> 00:15:21,079
frame or trigger sequences of other

401
00:15:21,079 --> 00:15:23,420
events like the the force traveling

402
00:15:23,420 --> 00:15:25,130
through the balls of an executive desk

403
00:15:25,130 --> 00:15:28,310
toy if messages are the balls what are

404
00:15:28,310 --> 00:15:32,959
we go what do you call the force anyone

405
00:15:32,959 --> 00:15:34,279
sees everyone seen this ad on Twitter

406
00:15:34,279 --> 00:15:35,839
right this you have no idea how much

407
00:15:35,839 --> 00:15:39,500
anxiety this gives me anyways maybe an

408
00:15:39,500 --> 00:15:41,660
even more basic question is where where

409
00:15:41,660 --> 00:15:43,430
are the messages coming from and where

410
00:15:43,430 --> 00:15:44,959
are they going who messages the

411
00:15:44,959 --> 00:15:46,710
messengers

412
00:15:46,710 --> 00:15:49,080
now I mean I'm gonna call these I'm

413
00:15:49,080 --> 00:15:50,760
gonna just gonna say call them processes

414
00:15:50,760 --> 00:15:53,400
what is the process an entity that sends

415
00:15:53,400 --> 00:15:55,320
and receives messages from an outside

416
00:15:55,320 --> 00:15:56,640
perspective that's all it needs to it's

417
00:15:56,640 --> 00:15:58,650
it's totally black box you know

418
00:15:58,650 --> 00:16:00,390
processes purpose is to contain and

419
00:16:00,390 --> 00:16:03,360
confine computation so you can you can

420
00:16:03,360 --> 00:16:05,010
model a process something that like D

421
00:16:05,010 --> 00:16:06,420
bounces clicks into double clicks of the

422
00:16:06,420 --> 00:16:07,620
process you can also model a whole

423
00:16:07,620 --> 00:16:10,560
server as one now I name this with with

424
00:16:10,560 --> 00:16:11,970
UNIX processes in mind but it also

425
00:16:11,970 --> 00:16:13,770
describes you know web workers have the

426
00:16:13,770 --> 00:16:17,280
same interface like actors in Erlang

427
00:16:17,280 --> 00:16:19,500
even a lot of the code like that upholds

428
00:16:19,500 --> 00:16:20,700
these boundaries like a redux store

429
00:16:20,700 --> 00:16:23,550
retext or has has its interface of like

430
00:16:23,550 --> 00:16:25,650
it you know reads from dispatch and it

431
00:16:25,650 --> 00:16:31,350
writes to get state and you know of

432
00:16:31,350 --> 00:16:32,310
course a lot of languages that have

433
00:16:32,310 --> 00:16:34,290
their their term for an entity with

434
00:16:34,290 --> 00:16:35,700
private state that communicates through

435
00:16:35,700 --> 00:16:38,160
message passing is an object you know

436
00:16:38,160 --> 00:16:41,310
what else fits this model oh boy it's

437
00:16:41,310 --> 00:16:45,270
microservices so every time I give this

438
00:16:45,270 --> 00:16:47,280
talk I feel like I understand

439
00:16:47,280 --> 00:16:51,300
microservices less and less it appears

440
00:16:51,300 --> 00:16:56,190
to be you take a big box and you split

441
00:16:56,190 --> 00:16:58,380
into a bunch of little boxes in

442
00:16:58,380 --> 00:17:03,240
sometimes the boxes are hexagons and of

443
00:17:03,240 --> 00:17:04,530
course now microservers is a totally

444
00:17:04,530 --> 00:17:06,390
passÃ© I think the next time I give this

445
00:17:06,390 --> 00:17:07,620
talk at all I'm gonna have to change

446
00:17:07,620 --> 00:17:09,089
into like how is an ant farm like

447
00:17:09,089 --> 00:17:12,330
service service architecture but the

448
00:17:12,330 --> 00:17:14,459
technical reasoning behind microservices

449
00:17:14,459 --> 00:17:16,050
is that by splitting up a monolithic

450
00:17:16,050 --> 00:17:17,130
server into a bunch of little

451
00:17:17,130 --> 00:17:18,810
independent ones you have more

452
00:17:18,810 --> 00:17:21,060
flexibility for scaling in redundancy

453
00:17:21,060 --> 00:17:23,490
but but the stronger motivator behind

454
00:17:23,490 --> 00:17:25,470
this kind of architectural rewrite is to

455
00:17:25,470 --> 00:17:27,630
enable or I guess force team

456
00:17:27,630 --> 00:17:30,560
independence now why do we want

457
00:17:30,560 --> 00:17:33,090
independence is this is this like a

458
00:17:33,090 --> 00:17:35,460
libertarian thing I mean it's it's

459
00:17:35,460 --> 00:17:37,020
definitely a less familiar way of

460
00:17:37,020 --> 00:17:38,580
designing software and it's you know

461
00:17:38,580 --> 00:17:41,340
it's a lot more complex why are we going

462
00:17:41,340 --> 00:17:42,900
to the trouble of encasing every little

463
00:17:42,900 --> 00:17:46,140
thing in a suit of armor we do this

464
00:17:46,140 --> 00:17:48,600
because conceptual boundaries enable

465
00:17:48,600 --> 00:17:50,940
material boundaries fit no boundaries

466
00:17:50,940 --> 00:17:53,000
across time or boundaries across space

467
00:17:53,000 --> 00:17:55,320
an independent process can be made to

468
00:17:55,320 --> 00:17:57,600
run on separate cores or on separate

469
00:17:57,600 --> 00:18:00,510
continents but conceptual boundary

470
00:18:00,510 --> 00:18:03,120
also enable cultural boundaries you know

471
00:18:03,120 --> 00:18:05,160
what well-defined boundaries allow me to

472
00:18:05,160 --> 00:18:06,780
use your software without knowing

473
00:18:06,780 --> 00:18:09,090
anything about how it works that's the

474
00:18:09,090 --> 00:18:10,890
same whether we're on different teams

475
00:18:10,890 --> 00:18:12,990
within a company or if we're in like

476
00:18:12,990 --> 00:18:14,820
working on totally different projects if

477
00:18:14,820 --> 00:18:17,130
you're if I'm using your open-source

478
00:18:17,130 --> 00:18:21,270
work but there there is absolutely a

479
00:18:21,270 --> 00:18:23,130
trade off these boundaries have a cost

480
00:18:23,130 --> 00:18:26,100
especially we don't need them it's easy

481
00:18:26,100 --> 00:18:28,170
to look at what's happening now I think

482
00:18:28,170 --> 00:18:29,790
that we're seeing a steady trend from

483
00:18:29,790 --> 00:18:31,110
Spencer realized centralized to

484
00:18:31,110 --> 00:18:33,180
decentralize as mana lists are split

485
00:18:33,180 --> 00:18:34,800
into micro services but we're not it's

486
00:18:34,800 --> 00:18:37,170
we're just in a downward swing of the

487
00:18:37,170 --> 00:18:39,300
pendulum a a turn of the Hegelian

488
00:18:39,300 --> 00:18:42,900
dialectic the react world is on the same

489
00:18:42,900 --> 00:18:44,340
cycle but oddly enough it seems to be on

490
00:18:44,340 --> 00:18:46,770
the opposite phase so right now we're

491
00:18:46,770 --> 00:18:48,390
actually centralizing state management

492
00:18:48,390 --> 00:18:50,070
out of individual components into a

493
00:18:50,070 --> 00:18:52,200
single store now where we have the same

494
00:18:52,200 --> 00:18:53,790
trade-offs that apply you know

495
00:18:53,790 --> 00:18:54,900
simplicity of the whole versus

496
00:18:54,900 --> 00:18:57,120
simplicity parts or we you know our our

497
00:18:57,120 --> 00:18:59,040
culture is has just you know for the

498
00:18:59,040 --> 00:19:01,710
moment decided that like the one is more

499
00:19:01,710 --> 00:19:04,860
valuable than the other but maybe this

500
00:19:04,860 --> 00:19:08,190
means we can see the future we know that

501
00:19:08,190 --> 00:19:09,750
there's that there's this pendulous

502
00:19:09,750 --> 00:19:11,640
motion this we can look at something

503
00:19:11,640 --> 00:19:13,770
like elixirs Phoenix framework and how

504
00:19:13,770 --> 00:19:16,110
it employs you know it combines things

505
00:19:16,110 --> 00:19:18,780
it's a synthesis it you know it employs

506
00:19:18,780 --> 00:19:20,340
some of the conventions of like a rails

507
00:19:20,340 --> 00:19:22,200
monolith but in you know in a language

508
00:19:22,200 --> 00:19:23,820
that is built for a fine rings and

509
00:19:23,820 --> 00:19:25,230
currency and distribution it's it's

510
00:19:25,230 --> 00:19:27,630
neither as holistically or individually

511
00:19:27,630 --> 00:19:29,070
simple as either of the ideas that

512
00:19:29,070 --> 00:19:31,590
synthesizing but the compromise is an

513
00:19:31,590 --> 00:19:34,380
improvement over either extreme so what

514
00:19:34,380 --> 00:19:35,910
would this look like for a front-end app

515
00:19:35,910 --> 00:19:37,920
the big performance bottleneck in

516
00:19:37,920 --> 00:19:39,840
JavaScript of course is single threading

517
00:19:39,840 --> 00:19:42,270
but the big conceptual bottleneck is

518
00:19:42,270 --> 00:19:43,980
around managing you I data and

519
00:19:43,980 --> 00:19:47,370
networking in a single brain now a

520
00:19:47,370 --> 00:19:49,170
specter is haunting front-end

521
00:19:49,170 --> 00:19:51,180
development the specter of service

522
00:19:51,180 --> 00:19:54,990
workers I see a world where data and

523
00:19:54,990 --> 00:19:58,320
network management everything that is of

524
00:19:58,320 --> 00:20:00,510
interest or not everything is interest

525
00:20:00,510 --> 00:20:02,070
everything that is like data intensive

526
00:20:02,070 --> 00:20:03,690
and an app gets moved as a service

527
00:20:03,690 --> 00:20:04,980
worker that's a completely independent

528
00:20:04,980 --> 00:20:07,110
entity from the UI do you I can become

529
00:20:07,110 --> 00:20:11,220
you know go dumb again now when the

530
00:20:11,220 --> 00:20:12,840
advantages here is like once you force

531
00:20:12,840 --> 00:20:14,279
the separation of

532
00:20:14,279 --> 00:20:15,809
why and data into like totally different

533
00:20:15,809 --> 00:20:17,399
processes you can put them on different

534
00:20:17,399 --> 00:20:20,070
machines I mean maybe maybe this is the

535
00:20:20,070 --> 00:20:21,809
the step that we need to take another

536
00:20:21,809 --> 00:20:23,460
crack at like the meteor or the hoodie

537
00:20:23,460 --> 00:20:25,859
approach of having you know synchronized

538
00:20:25,859 --> 00:20:29,460
clients and servers and now I did

539
00:20:29,460 --> 00:20:31,139
something uh you know occurred to me as

540
00:20:31,139 --> 00:20:32,429
I was working on this if I have critters

541
00:20:32,429 --> 00:20:34,619
running over the network does that mean

542
00:20:34,619 --> 00:20:37,080
I'm making a massively multi-core online

543
00:20:37,080 --> 00:20:43,769
rodent petting game sorry oh wow that's

544
00:20:43,769 --> 00:20:46,440
a lot of stuff I feel like I just I i we

545
00:20:46,440 --> 00:20:47,729
just went through one of those like 15

546
00:20:47,729 --> 00:20:49,529
shorts about like oh gee whiz I didn't

547
00:20:49,529 --> 00:20:51,869
realize springs were so important except

548
00:20:51,869 --> 00:20:55,049
except about message passing but you

549
00:20:55,049 --> 00:20:56,129
know I think that JavaScript has been

550
00:20:56,129 --> 00:20:57,479
going through an interesting cultural

551
00:20:57,479 --> 00:20:59,700
shift in the last I know like three

552
00:20:59,700 --> 00:21:02,039
years or so now we've never had a PA

553
00:21:02,039 --> 00:21:04,469
strong culture around object-oriented

554
00:21:04,469 --> 00:21:06,419
programming and you just don't see talks

555
00:21:06,419 --> 00:21:07,979
about design patterns or solid

556
00:21:07,979 --> 00:21:11,070
principles at javascript conferences but

557
00:21:11,070 --> 00:21:13,080
we can begin more and more interested in

558
00:21:13,080 --> 00:21:15,059
functional programming you know first

559
00:21:15,059 --> 00:21:17,549
with underscore and then with underscore

560
00:21:17,549 --> 00:21:20,580
doing it wrong the things really really

561
00:21:20,580 --> 00:21:23,789
took off with react and now there's a

562
00:21:23,789 --> 00:21:25,710
bunch of JavaScript developers still a

563
00:21:25,710 --> 00:21:27,239
minority but a hell of a loud one

564
00:21:27,239 --> 00:21:29,729
getting interested in like immutability

565
00:21:29,729 --> 00:21:32,159
and referential transparency and monads

566
00:21:32,159 --> 00:21:34,499
and compiled the jas languages like

567
00:21:34,499 --> 00:21:36,359
closure script and elm there I'll bring

568
00:21:36,359 --> 00:21:37,950
this to the browser and granting us as

569
00:21:37,950 --> 00:21:39,570
humble JavaScript erza you know a

570
00:21:39,570 --> 00:21:41,969
glimpse into into this this this this

571
00:21:41,969 --> 00:21:45,239
future futuristic world but along with

572
00:21:45,239 --> 00:21:48,450
that comes dogma now of course there's

573
00:21:48,450 --> 00:21:50,249
the usual suspects with them I paradigm

574
00:21:50,249 --> 00:21:52,589
can beat up your paradigm I mean what

575
00:21:52,589 --> 00:21:55,309
can i say redditors gonna read it but

576
00:21:55,309 --> 00:21:57,450
we've also got seemingly respectable

577
00:21:57,450 --> 00:21:59,369
members of our community saying that you

578
00:21:59,369 --> 00:22:01,169
know if use classical inheritance your

579
00:22:01,169 --> 00:22:04,769
company will go out of business but

580
00:22:04,769 --> 00:22:07,049
javascript is it's fundamentally

581
00:22:07,049 --> 00:22:09,359
incompatible with ideological purity if

582
00:22:09,359 --> 00:22:11,399
you want to go fully full-on year 0

583
00:22:11,399 --> 00:22:12,960
there have never been more options to

584
00:22:12,960 --> 00:22:15,269
choose from but javascript isn't

585
00:22:15,269 --> 00:22:17,369
necessarily a big tent language that has

586
00:22:17,369 --> 00:22:20,729
to solve needs beyond our own hey

587
00:22:20,729 --> 00:22:22,889
javascript has to go continue to solve

588
00:22:22,889 --> 00:22:24,119
the needs of people going back to

589
00:22:24,119 --> 00:22:26,070
nineteen ninety-five you know so we

590
00:22:26,070 --> 00:22:27,660
don't break the web

591
00:22:27,660 --> 00:22:29,970
and as far as object oriented

592
00:22:29,970 --> 00:22:31,140
programming goes I think there's a lot

593
00:22:31,140 --> 00:22:33,480
of useful wisdom in the in the last 40

594
00:22:33,480 --> 00:22:36,270
years of study you know the the date on

595
00:22:36,270 --> 00:22:39,800
that last screenshot is October 12 1977

596
00:22:39,800 --> 00:22:41,460
we should think about how we can

597
00:22:41,460 --> 00:22:43,770
synthesize that with our newfound love

598
00:22:43,770 --> 00:22:46,170
of functional programming and this was

599
00:22:46,170 --> 00:22:48,390
my big awakening with react and redux

600
00:22:48,390 --> 00:22:51,120
you know sure component renders and

601
00:22:51,120 --> 00:22:52,470
store reduces those are pure functions

602
00:22:52,470 --> 00:22:54,660
no side effects no mutations but

603
00:22:54,660 --> 00:22:56,610
everything supporting them is the

604
00:22:56,610 --> 00:22:58,260
opposite you know the reactant react

605
00:22:58,260 --> 00:23:00,210
component state and lifecycle read X to

606
00:23:00,210 --> 00:23:01,890
subscribe to this crap dispatch these

607
00:23:01,890 --> 00:23:04,110
are all about side effects react and

608
00:23:04,110 --> 00:23:05,610
redox aren't a rejection of

609
00:23:05,610 --> 00:23:06,870
object-oriented programming so much as a

610
00:23:06,870 --> 00:23:10,950
reinvention of it instead of thing of

611
00:23:10,950 --> 00:23:12,720
about functional and object-oriented

612
00:23:12,720 --> 00:23:14,970
programming as competitors we can cinema

613
00:23:14,970 --> 00:23:16,650
is operating on maybe different parts of

614
00:23:16,650 --> 00:23:19,050
the problem or at different scales we

615
00:23:19,050 --> 00:23:21,510
can stop thinking about objects as smart

616
00:23:21,510 --> 00:23:23,280
data structures to start seeing them as

617
00:23:23,280 --> 00:23:25,650
systems for communing coordinating

618
00:23:25,650 --> 00:23:28,080
communication you know processes

619
00:23:28,080 --> 00:23:29,610
microservices actors workers

620
00:23:29,610 --> 00:23:31,140
bureaucracies guinea pigs a zombie with

621
00:23:31,140 --> 00:23:32,780
no conscience wait that's the last one

622
00:23:32,780 --> 00:23:35,400
what does it mean when we can see all of

623
00:23:35,400 --> 00:23:38,070
these through the same lens it means new

624
00:23:38,070 --> 00:23:39,630
avenues for understanding new

625
00:23:39,630 --> 00:23:41,750
possibilities for collaboration

626
00:23:41,750 --> 00:23:43,590
vocabulary of front-end development

627
00:23:43,590 --> 00:23:46,110
becomes so much richer or we can adapt

628
00:23:46,110 --> 00:23:47,370
patterns and terminology from

629
00:23:47,370 --> 00:23:49,230
distributed systems into client-side

630
00:23:49,230 --> 00:23:51,240
apps running cross web workers and the

631
00:23:51,240 --> 00:23:54,030
scales fall from our eyes we can finally

632
00:23:54,030 --> 00:23:55,460
see how the Internet of Things is just

633
00:23:55,460 --> 00:23:57,870
it's just object orientation made

634
00:23:57,870 --> 00:24:01,380
horrifyingly literal you know JavaScript

635
00:24:01,380 --> 00:24:03,690
defining characteristic whether for good

636
00:24:03,690 --> 00:24:05,340
or for ill is that it is always

637
00:24:05,340 --> 00:24:08,250
accumulating never removing but this is

638
00:24:08,250 --> 00:24:10,290
you know this is how society functions

639
00:24:10,290 --> 00:24:13,050
you can't roll back the clock hogatha

640
00:24:13,050 --> 00:24:14,940
you don't have to start from scratch you

641
00:24:14,940 --> 00:24:17,190
just keep moving forward and and just as

642
00:24:17,190 --> 00:24:19,620
event sourcing is where you know current

643
00:24:19,620 --> 00:24:21,090
state is a left fold of her previous

644
00:24:21,090 --> 00:24:24,420
behaviors society is a left fold over

645
00:24:24,420 --> 00:24:28,590
ideas and dogma is toxic to a society

646
00:24:28,590 --> 00:24:30,900
dogmas terrible is toxic to culture and

647
00:24:30,900 --> 00:24:32,730
we need to we we need to be thinking

648
00:24:32,730 --> 00:24:34,620
about we need to be seeking out new

649
00:24:34,620 --> 00:24:37,020
ideas but we also we need to be

650
00:24:37,020 --> 00:24:38,880
synthesizing and compromising those

651
00:24:38,880 --> 00:24:40,530
ideas into our primary knowledge and

652
00:24:40,530 --> 00:24:41,270
experience

653
00:24:41,270 --> 00:24:44,420
yo hey you never know when the new idea

654
00:24:44,420 --> 00:24:46,220
you've discovered is actually uncovers

655
00:24:46,220 --> 00:24:47,720
the hidden wisdom of everything before

