1
00:00:10,450 --> 00:00:21,400

Oh

2
00:00:21,410 --> 00:00:24,529
you

3
00:00:24,539 --> 00:00:27,000
so I question first like how many people

4
00:00:27,000 --> 00:00:28,289
are actually maintain an open source

5
00:00:28,289 --> 00:00:31,140
project how many people I wanted to rage

6
00:00:31,140 --> 00:00:35,309
quit their opens our sale me too it

7
00:00:35,309 --> 00:00:36,840
seems to be the kind of like general

8
00:00:36,840 --> 00:00:38,399
term when it comes to you get to this

9
00:00:38,399 --> 00:00:39,989
point where you kind of just really

10
00:00:39,989 --> 00:00:40,829
don't want to deal with your project

11
00:00:40,829 --> 00:00:42,300
anymore and then something happens like

12
00:00:42,300 --> 00:00:44,280
for me they started paying me for do it

13
00:00:44,280 --> 00:00:45,780
and now I have to do it it's the way I

14
00:00:45,780 --> 00:00:50,550
get food on the table so how did I get

15
00:00:50,550 --> 00:00:53,699
into it was really fast how did I get

16
00:00:53,699 --> 00:00:56,909
into know Jess so I was actually become

17
00:00:56,909 --> 00:00:59,960
here in Berlin in like two thousand and

18
00:00:59,960 --> 00:01:04,290
was he like 2009 or something oh yeah

19
00:01:04,290 --> 00:01:06,750
something like no 2007 actually and we

20
00:01:06,750 --> 00:01:08,850
were talking about the I think v8 have

21
00:01:08,850 --> 00:01:10,829
just been announced and it was like all

22
00:01:10,829 --> 00:01:12,000
over the internet and stuff and I was

23
00:01:12,000 --> 00:01:15,270
talking with a friend I was like so how

24
00:01:15,270 --> 00:01:16,530
long do you think it's gonna take before

25
00:01:16,530 --> 00:01:18,990
somebody writes JavaScript framework

26
00:01:18,990 --> 00:01:21,360
right for the server and I was like I

27
00:01:21,360 --> 00:01:22,740
don't know but it's gonna be cool right

28
00:01:22,740 --> 00:01:25,710
and I did the little thing put up a

29
00:01:25,710 --> 00:01:27,570
Google Alert and like I think it was

30
00:01:27,570 --> 00:01:29,729
like a little bit layer like a nearly

31
00:01:29,729 --> 00:01:32,820
two years later Selena my google alert

32
00:01:32,820 --> 00:01:36,390
went often said like a no GS is out and

33
00:01:36,390 --> 00:01:37,890
I was like oh look it's JavaScript on

34
00:01:37,890 --> 00:01:40,350
server but it's not exactly what I

35
00:01:40,350 --> 00:01:42,330
expected for coming from Ruby I was like

36
00:01:42,330 --> 00:01:44,970
a string penis huh alright so that was

37
00:01:44,970 --> 00:01:46,560
like the big big shock and I we got

38
00:01:46,560 --> 00:01:49,710
intrigued right and I decided to like

39
00:01:49,710 --> 00:01:51,299
start playing around with it and wrote

40
00:01:51,299 --> 00:01:53,520
my own little applications and I came to

41
00:01:53,520 --> 00:01:55,710
the timer I basically had to need the

42
00:01:55,710 --> 00:01:57,000
story some data somewhere and at that

43
00:01:57,000 --> 00:02:00,350
point there was only Ryan's PG

44
00:02:00,350 --> 00:02:03,119
javascript script that was like a simple

45
00:02:03,119 --> 00:02:05,640
postgres driver Washington really fast

46
00:02:05,640 --> 00:02:08,340
wasn't really any particularly you know

47
00:02:08,340 --> 00:02:10,950
full form platform at that point and I

48
00:02:10,950 --> 00:02:12,180
was kind of looking around in a friend

49
00:02:12,180 --> 00:02:15,150
of mine Ruby I had been using MongoDB

50
00:02:15,150 --> 00:02:17,459
down in Atlanta for our project and said

51
00:02:17,459 --> 00:02:18,750
like what don't you use this is like

52
00:02:18,750 --> 00:02:21,750
Jason right as I said okay let's mean

53
00:02:21,750 --> 00:02:23,849
you start write my own drivers and so

54
00:02:23,849 --> 00:02:24,930
you basically have to do everything

55
00:02:24,930 --> 00:02:26,730
yourself at this point because I don't

56
00:02:26,730 --> 00:02:27,810
know how many people were in a node

57
00:02:27,810 --> 00:02:29,580
community at that time a couple of

58
00:02:29,580 --> 00:02:32,999
hundred maybe so after a couple of

59
00:02:32,999 --> 00:02:35,909
months the first commit was out and like

60
00:02:35,909 --> 00:02:37,590
january seven

61
00:02:37,590 --> 00:02:41,220
and pen and since then it's just been

62
00:02:41,220 --> 00:02:44,519
crazy all right and specifically last

63
00:02:44,519 --> 00:02:46,980
year the last 12 months like the growth

64
00:02:46,980 --> 00:02:49,860
in usage for for no jest projects in

65
00:02:49,860 --> 00:02:52,260
general or MPI modules has just exploded

66
00:02:52,260 --> 00:02:54,629
right mongodb is kind of like as

67
00:02:54,629 --> 00:02:56,400
exception like I mean you've gone from

68
00:02:56,400 --> 00:03:00,090
like about 20,000 mpm installs to about

69
00:03:00,090 --> 00:03:01,650
like two hundred thousand a month or so

70
00:03:01,650 --> 00:03:05,459
glad I think socket i/o I think red is

71
00:03:05,459 --> 00:03:06,870
probably the biggest one I think he's

72
00:03:06,870 --> 00:03:10,799
got about 400,000 installs a month but

73
00:03:10,799 --> 00:03:13,440
it's just gone gangbusters that and I

74
00:03:13,440 --> 00:03:15,000
kind of expect this trend to keep going

75
00:03:15,000 --> 00:03:17,489
in the next couple of years so how was

76
00:03:17,489 --> 00:03:20,130
the first driver when it came out it was

77
00:03:20,130 --> 00:03:24,959
told piece of ok so it had things

78
00:03:24,959 --> 00:03:27,900
like a hash now ordered hash class that

79
00:03:27,900 --> 00:03:30,510
had written because I you know I was

80
00:03:30,510 --> 00:03:33,209
relying I didn't want to rely on the

81
00:03:33,209 --> 00:03:37,140
behavior of v8 and ordering keys and it

82
00:03:37,140 --> 00:03:38,640
was completely horrible structure mess

83
00:03:38,640 --> 00:03:40,799
like it was just me learning to write

84
00:03:40,799 --> 00:03:43,109
JavaScript basically and there wasn't

85
00:03:43,109 --> 00:03:44,819
really any testing frameworks lat points

86
00:03:44,819 --> 00:03:46,920
so I had to kind of hack up J spec to

87
00:03:46,920 --> 00:03:48,030
make it work so I could have some

88
00:03:48,030 --> 00:03:51,569
testing framework everything was like

89
00:03:51,569 --> 00:03:53,930
node was like liquid water right

90
00:03:53,930 --> 00:03:56,370
everything was constantly changing like

91
00:03:56,370 --> 00:03:57,720
from one point released you the other

92
00:03:57,720 --> 00:04:00,359
like philosophies would change all right

93
00:04:00,359 --> 00:04:01,889
so I don't know how many people here a

94
00:04:01,889 --> 00:04:03,630
lot of promises but that was initially

95
00:04:03,630 --> 00:04:06,630
in node and then they took it out I

96
00:04:06,630 --> 00:04:08,639
don't remember exactly why the reason

97
00:04:08,639 --> 00:04:12,750
was but it was taken out and yeah there

98
00:04:12,750 --> 00:04:15,750
was no NPM power points all right so

99
00:04:15,750 --> 00:04:17,760
everything you did you basically had to

100
00:04:17,760 --> 00:04:20,310
kind of download Jas and put it in the

101
00:04:20,310 --> 00:04:21,660
right that I directories yourself

102
00:04:21,660 --> 00:04:24,000
ossified so there's no real way of

103
00:04:24,000 --> 00:04:26,490
distributing the driver either people

104
00:04:26,490 --> 00:04:28,050
who started basically clone your git

105
00:04:28,050 --> 00:04:32,340
repository and used driver so I can't

106
00:04:32,340 --> 00:04:34,440
challenge is you kind of run into when

107
00:04:34,440 --> 00:04:35,849
you're driving writing something like a

108
00:04:35,849 --> 00:04:40,110
driver and JavaScript now in 64 support

109
00:04:40,110 --> 00:04:44,370
I was just in a JavaScript crypto talk

110
00:04:44,370 --> 00:04:46,830
here and he said that he mentioned that

111
00:04:46,830 --> 00:04:48,920
there's likely there's a

112
00:04:48,920 --> 00:04:53,870
three crypto library or crypto API may

113
00:04:53,870 --> 00:04:56,150
be coming that might have in 64 s that

114
00:04:56,150 --> 00:04:59,000
would be a revelation for for me by the

115
00:04:59,000 --> 00:05:00,440
problem and this is something you're

116
00:05:00,440 --> 00:05:02,120
going to run into eventually as the

117
00:05:02,120 --> 00:05:04,130
JavaScript developer is that the numbers

118
00:05:04,130 --> 00:05:05,900
aren't really numbers they're actually

119
00:05:05,900 --> 00:05:08,210
floats like they're double floats which

120
00:05:08,210 --> 00:05:10,040
means that anything over fifty three

121
00:05:10,040 --> 00:05:12,320
bits cannot be represented as a whole

122
00:05:12,320 --> 00:05:14,030
integer in fact when you reach that

123
00:05:14,030 --> 00:05:15,470
number it just keeps being the same

124
00:05:15,470 --> 00:05:17,030
number over and over and over again

125
00:05:17,030 --> 00:05:22,670
right so to represent 64-bit ends which

126
00:05:22,670 --> 00:05:25,100
we need for to support all of the

127
00:05:25,100 --> 00:05:27,500
MongoDB kind of types you have to use

128
00:05:27,500 --> 00:05:30,590
the google long closure library and that

129
00:05:30,590 --> 00:05:32,390
works pretty well it's a bit slow

130
00:05:32,390 --> 00:05:35,660
because you have to do all this 64-bit

131
00:05:35,660 --> 00:05:39,650
ARM ethic over to 32-bit values but it

132
00:05:39,650 --> 00:05:44,630
works but I was a pain so then we

133
00:05:44,630 --> 00:05:46,070
started kind of adding features because

134
00:05:46,070 --> 00:05:48,260
I was sort of evolving the driver as

135
00:05:48,260 --> 00:05:50,780
MongoDB itself was adding features so we

136
00:05:50,780 --> 00:05:52,490
had that great at fest which is like

137
00:05:52,490 --> 00:05:55,760
storing files in the database there they

138
00:05:55,760 --> 00:05:57,680
came up with like clustering which

139
00:05:57,680 --> 00:05:59,480
called replicas along with me and then

140
00:05:59,480 --> 00:06:01,100
later sharding and so I had to add

141
00:06:01,100 --> 00:06:04,810
support for that and then adding streams

142
00:06:04,810 --> 00:06:07,130
support for cursor and great FS when

143
00:06:07,130 --> 00:06:08,900
that became kind of like the big meme in

144
00:06:08,900 --> 00:06:10,700
a no Jess and he kind of became more

145
00:06:10,700 --> 00:06:12,860
standard and healing was complicated

146
00:06:12,860 --> 00:06:16,160
issues like high availability done

147
00:06:16,160 --> 00:06:18,200
laughter wall royal you know like you

148
00:06:18,200 --> 00:06:20,030
get into this one I want to like

149
00:06:20,030 --> 00:06:23,420
optimize stuff and the C++ API is had

150
00:06:23,420 --> 00:06:25,670
finally kind of like solidified enough

151
00:06:25,670 --> 00:06:28,130
for you to go and write a C++ extension

152
00:06:28,130 --> 00:06:30,140
and there was actually enough tutorial

153
00:06:30,140 --> 00:06:31,700
so people actually had tried at that

154
00:06:31,700 --> 00:06:34,250
point so i decided to profile

155
00:06:34,250 --> 00:06:36,470
application and then look at like where

156
00:06:36,470 --> 00:06:38,120
the hot spot in the code was and at that

157
00:06:38,120 --> 00:06:40,220
point the whole parser was JavaScript

158
00:06:40,220 --> 00:06:43,490
and it was actually the bottleneck was

159
00:06:43,490 --> 00:06:46,100
the parser right so I wrote a horrible

160
00:06:46,100 --> 00:06:49,810
C++ parser because I'm not C++ person

161
00:06:49,810 --> 00:06:52,580
thankfully there was a guy in lucas art

162
00:06:52,580 --> 00:06:55,400
may they rest in peace that cleaned up

163
00:06:55,400 --> 00:06:58,160
the cold later and now i think it's a

164
00:06:58,160 --> 00:07:00,560
fairly solid parser

165
00:07:00,560 --> 00:07:04,070
a couple of things that I did wrong was

166
00:07:04,070 --> 00:07:06,760
that for example the initial version

167
00:07:06,760 --> 00:07:09,139
implemented these types that are among

168
00:07:09,139 --> 00:07:11,600
the D being like a binary class or a

169
00:07:11,600 --> 00:07:13,580
long type of this kind of stuff we

170
00:07:13,580 --> 00:07:16,430
implemented in C++ and I was just hard

171
00:07:16,430 --> 00:07:18,710
as hell to maintain right it's like

172
00:07:18,710 --> 00:07:21,830
every time somebody changed me sent me a

173
00:07:21,830 --> 00:07:23,630
bug fix for something like I had to go

174
00:07:23,630 --> 00:07:25,639
back in C++ and fix that code as well

175
00:07:25,639 --> 00:07:28,310
and in the end it didn't mean anything

176
00:07:28,310 --> 00:07:30,350
there was no performance benefit or any

177
00:07:30,350 --> 00:07:32,600
at all because in the end it wasn't

178
00:07:32,600 --> 00:07:35,120
expensive to actually instantiate just

179
00:07:35,120 --> 00:07:38,180
JavaScript classes inside of v8 C++ code

180
00:07:38,180 --> 00:07:41,930
in just use those so now the parser C++

181
00:07:41,930 --> 00:07:43,190
parts you just deal for the actual

182
00:07:43,190 --> 00:07:44,660
parsing we're still just using the

183
00:07:44,660 --> 00:07:46,970
JavaScript objects for the types which

184
00:07:46,970 --> 00:07:48,229
means I don't have to maintain as much

185
00:07:48,229 --> 00:07:52,580
code then like as no jess was liquid

186
00:07:52,580 --> 00:07:54,650
suddenly they introduce buffers right

187
00:07:54,650 --> 00:07:56,780
and buffers was like a massive

188
00:07:56,780 --> 00:07:59,360
improvement right also because the

189
00:07:59,360 --> 00:08:01,790
Google VI team-wise laughs in these guys

190
00:08:01,790 --> 00:08:04,400
actually went the other way to make it

191
00:08:04,400 --> 00:08:08,479
be fast for no Jess so one of the things

192
00:08:08,479 --> 00:08:12,229
you cannot have to do with buffers like

193
00:08:12,229 --> 00:08:14,090
for example is to be aware that like

194
00:08:14,090 --> 00:08:16,130
allocating buffers can be expensive and

195
00:08:16,130 --> 00:08:17,510
so when you're doing something like a

196
00:08:17,510 --> 00:08:20,750
bison serialization you have to allocate

197
00:08:20,750 --> 00:08:23,240
some sort of binary buffer of some

198
00:08:23,240 --> 00:08:25,970
particular size the way MongoDB

199
00:08:25,970 --> 00:08:28,130
documents are nested documents you

200
00:08:28,130 --> 00:08:29,389
cannot have to walk the tree to

201
00:08:29,389 --> 00:08:31,910
determine the size of the final buffer

202
00:08:31,910 --> 00:08:33,770
and it's actually faster to iterate

203
00:08:33,770 --> 00:08:36,349
through the entire tree allocate once a

204
00:08:36,349 --> 00:08:39,020
big piece of slab of memory sterilized

205
00:08:39,020 --> 00:08:41,030
into that memory and then write it out

206
00:08:41,030 --> 00:08:45,560
than to try to basically you know plug a

207
00:08:45,560 --> 00:08:47,230
bunch of smaller buffers together

208
00:08:47,230 --> 00:08:49,730
because the cost of allocating all those

209
00:08:49,730 --> 00:08:52,339
small things is quite expensive actually

210
00:08:52,339 --> 00:08:53,870
in fact like one other experience I'm

211
00:08:53,870 --> 00:08:56,150
considering is just to allocate the

212
00:08:56,150 --> 00:08:58,279
maximum size of bytes and I can do and

213
00:08:58,279 --> 00:08:59,839
just use that buffer again and again all

214
00:08:59,839 --> 00:09:01,459
the time and just never actually

215
00:09:01,459 --> 00:09:03,980
allocate any memory other than once so

216
00:09:03,980 --> 00:09:06,500
I'm see I think that might be able to

217
00:09:06,500 --> 00:09:09,830
break get to see the JavaScript version

218
00:09:09,830 --> 00:09:13,850
up to C++ speed so one of the things you

219
00:09:13,850 --> 00:09:14,410
have to know

220
00:09:14,410 --> 00:09:16,269
far forces that they're up to have a

221
00:09:16,269 --> 00:09:18,129
secret optimization in the eighth so if

222
00:09:18,129 --> 00:09:21,220
you ever do like profiling in alg su

223
00:09:21,220 --> 00:09:22,360
you're going to see these things called

224
00:09:22,360 --> 00:09:25,540
slow buff and fast buff show up and fast

225
00:09:25,540 --> 00:09:27,850
but basically lets you map directly into

226
00:09:27,850 --> 00:09:29,680
memory so if you do something like entry

227
00:09:29,680 --> 00:09:32,410
if the buffer is called a element zero

228
00:09:32,410 --> 00:09:34,569
and accepted to a byte value it actually

229
00:09:34,569 --> 00:09:36,250
will go straight into memory instead of

230
00:09:36,250 --> 00:09:38,800
going through the entire stack of v8 so

231
00:09:38,800 --> 00:09:41,769
that's also based on what type arrays do

232
00:09:41,769 --> 00:09:44,589
so temporaries are equivalent in this

233
00:09:44,589 --> 00:09:48,000
respect to like better performance wise

234
00:09:48,000 --> 00:09:50,319
that's it I don't know if eventually

235
00:09:50,319 --> 00:09:52,089
buffers might even go away or be

236
00:09:52,089 --> 00:09:54,129
implemented just on top of existing type

237
00:09:54,129 --> 00:09:56,410
arrays but that's something to ask for

238
00:09:56,410 --> 00:09:58,629
no just people the other thing you have

239
00:09:58,629 --> 00:10:00,279
to deal with is like pool handling so

240
00:10:00,279 --> 00:10:01,629
when you're a database you've got lots

241
00:10:01,629 --> 00:10:03,279
of connections you have to check in

242
00:10:03,279 --> 00:10:05,110
stuff check it out you can't really do

243
00:10:05,110 --> 00:10:07,180
that in a ficient way and no just

244
00:10:07,180 --> 00:10:08,740
because blocking isn't really an option

245
00:10:08,740 --> 00:10:14,170
right so spice must flow and also in in

246
00:10:14,170 --> 00:10:16,000
MongoDB you basically have the situation

247
00:10:16,000 --> 00:10:18,540
called a right concern so traditionally

248
00:10:18,540 --> 00:10:21,910
MongoDB basically wrote a message like

249
00:10:21,910 --> 00:10:24,069
an insert to the straight to the socket

250
00:10:24,069 --> 00:10:26,290
out to the database and to actually get

251
00:10:26,290 --> 00:10:28,750
the result of that insert you have to

252
00:10:28,750 --> 00:10:29,980
write a second message called

253
00:10:29,980 --> 00:10:33,970
getlasterror right after right so the

254
00:10:33,970 --> 00:10:35,620
gate last error and the thing has to

255
00:10:35,620 --> 00:10:37,810
happen one after the other because the

256
00:10:37,810 --> 00:10:39,910
socket is bound to specific threat so if

257
00:10:39,910 --> 00:10:41,439
you put something else in between and

258
00:10:41,439 --> 00:10:43,389
then we do get last year you're

259
00:10:43,389 --> 00:10:45,310
basically going to get the result from

260
00:10:45,310 --> 00:10:48,009
the operation that happened but not the

261
00:10:48,009 --> 00:10:50,769
one that you want it so the thing to do

262
00:10:50,769 --> 00:10:52,389
that is at least knowledge as was the

263
00:10:52,389 --> 00:10:54,250
pipeline is right so you write the up

264
00:10:54,250 --> 00:10:55,750
and then get less area into one single

265
00:10:55,750 --> 00:10:58,209
binary buffer and flush it out the

266
00:10:58,209 --> 00:11:02,170
socket then we get problems like how to

267
00:11:02,170 --> 00:11:03,819
deal with reconnect right so you have a

268
00:11:03,819 --> 00:11:06,309
cluster the servers one of the servers

269
00:11:06,309 --> 00:11:09,370
disappear now you have need to reconnect

270
00:11:09,370 --> 00:11:12,220
but MongoDB is blocking like Sen typical

271
00:11:12,220 --> 00:11:15,089
traditional synchronous languages like

272
00:11:15,089 --> 00:11:17,199
Python you might just wait for the

273
00:11:17,199 --> 00:11:19,209
cervical to come back and unlike block

274
00:11:19,209 --> 00:11:21,009
all operations until you're basically

275
00:11:21,009 --> 00:11:23,470
ready too bright to the server so not

276
00:11:23,470 --> 00:11:25,930
just basically what it does is that in a

277
00:11:25,930 --> 00:11:27,860
cluster when the second

278
00:11:27,860 --> 00:11:29,690
goes on in such buffering up the

279
00:11:29,690 --> 00:11:31,760
operations and until there is like

280
00:11:31,760 --> 00:11:34,070
basically an available server and then

281
00:11:34,070 --> 00:11:37,399
it flushes those operations out to that

282
00:11:37,399 --> 00:11:39,200
server so in the best case what you're

283
00:11:39,200 --> 00:11:40,850
going to see is just the increase in

284
00:11:40,850 --> 00:11:43,370
latency on your operations but you're

285
00:11:43,370 --> 00:11:45,200
not going to loose any operations the

286
00:11:45,200 --> 00:11:46,880
problem is obviously if your service is

287
00:11:46,880 --> 00:11:50,209
out long enough you're gonna get you're

288
00:11:50,209 --> 00:11:51,800
going to run out buffer or memory space

289
00:11:51,800 --> 00:11:54,380
basically so there's still this kind of

290
00:11:54,380 --> 00:11:56,029
like balance between one and the other

291
00:11:56,029 --> 00:11:59,899
here that haven't quite figured out the

292
00:11:59,899 --> 00:12:02,839
other thing that people were one it was

293
00:12:02,839 --> 00:12:05,110
the ability to kind of like just

294
00:12:05,110 --> 00:12:08,450
serialize an object but not necessarily

295
00:12:08,450 --> 00:12:11,450
just let the sterilizer decide which

296
00:12:11,450 --> 00:12:14,149
feels were to be sterilized time so

297
00:12:14,149 --> 00:12:15,649
there was a need to weigh this was

298
00:12:15,649 --> 00:12:17,800
actually people came to me and and

299
00:12:17,800 --> 00:12:20,420
committed part of this code the idea was

300
00:12:20,420 --> 00:12:22,519
just to add something like a to be some

301
00:12:22,519 --> 00:12:24,589
things so like if you actually have an

302
00:12:24,589 --> 00:12:27,140
object in yada to be some function in a

303
00:12:27,140 --> 00:12:29,180
function whatever you return is what

304
00:12:29,180 --> 00:12:31,190
gets sterilized so it makes it a little

305
00:12:31,190 --> 00:12:32,720
bit easier to kind of make your own kind

306
00:12:32,720 --> 00:12:35,959
of like semi odm style thing where you

307
00:12:35,959 --> 00:12:38,480
can kind of keep feels transitive in the

308
00:12:38,480 --> 00:12:40,910
in the document and not necessarily have

309
00:12:40,910 --> 00:12:44,480
to write them to disk and this was like

310
00:12:44,480 --> 00:12:46,430
a very simple thing but that it actually

311
00:12:46,430 --> 00:12:50,110
got a lot of like used for all of people

312
00:12:50,110 --> 00:12:52,820
so we were talking about the fact that

313
00:12:52,820 --> 00:12:54,910
we have these clusters on replica sets

314
00:12:54,910 --> 00:12:58,130
they come and go like a server so you

315
00:12:58,130 --> 00:13:01,100
have these secondaries in MongoDB which

316
00:13:01,100 --> 00:13:03,380
are basically slaves in the in the

317
00:13:03,380 --> 00:13:07,490
terminology of thermal databases and you

318
00:13:07,490 --> 00:13:08,959
have these problems where you basically

319
00:13:08,959 --> 00:13:11,870
have to query once in a while the state

320
00:13:11,870 --> 00:13:14,120
of replica set to figure out if some new

321
00:13:14,120 --> 00:13:17,779
node came into production right because

322
00:13:17,779 --> 00:13:18,860
the among going to be you can kind of

323
00:13:18,860 --> 00:13:20,600
say I'm going to put up a new database

324
00:13:20,600 --> 00:13:22,880
and i'm going to add that to this

325
00:13:22,880 --> 00:13:25,070
cluster and the driver needs to be able

326
00:13:25,070 --> 00:13:27,500
to pick that up and basically include

327
00:13:27,500 --> 00:13:29,870
that as possible way a server to read

328
00:13:29,870 --> 00:13:33,140
from and in the application itself you

329
00:13:33,140 --> 00:13:35,930
can basically say let me read from a

330
00:13:35,930 --> 00:13:38,630
slave all might reach you go to slave

331
00:13:38,630 --> 00:13:41,290
and not to the actual master

332
00:13:41,290 --> 00:13:44,270
so this is where the main problem home

333
00:13:44,270 --> 00:13:46,790
with no Jess right for this particular

334
00:13:46,790 --> 00:13:48,820
use case a single for it just sucks

335
00:13:48,820 --> 00:13:51,920
right like you can use that time of the

336
00:13:51,920 --> 00:13:55,820
set interval but it's not really that

337
00:13:55,820 --> 00:13:57,680
good it's like a Yankee way of doing it

338
00:13:57,680 --> 00:14:00,230
because there's no hard this really

339
00:14:00,230 --> 00:14:03,530
really soft kind of like it's very very

340
00:14:03,530 --> 00:14:06,710
very soft guarantees on such time as a

341
00:14:06,710 --> 00:14:08,540
set interval on it running unless

342
00:14:08,540 --> 00:14:10,520
specifically a specific time so if you

343
00:14:10,520 --> 00:14:13,460
just hammering your no jest application

344
00:14:13,460 --> 00:14:16,250
with JavaScript you might set thy mother

345
00:14:16,250 --> 00:14:17,570
said to one second might take longer

346
00:14:17,570 --> 00:14:20,330
than one second and there's lots of

347
00:14:20,330 --> 00:14:22,670
subtle state changes that can happen in

348
00:14:22,670 --> 00:14:26,030
between and I don't think we're ever

349
00:14:26,030 --> 00:14:27,830
going to get web workers you know Jess I

350
00:14:27,830 --> 00:14:30,340
hope so but I'm holding my breath and

351
00:14:30,340 --> 00:14:32,630
there's not really an option or using

352
00:14:32,630 --> 00:14:35,030
processes because I can imagine a driver

353
00:14:35,030 --> 00:14:37,070
that starts spinning of processes

354
00:14:37,070 --> 00:14:38,330
without your knowledge that's probably

355
00:14:38,330 --> 00:14:41,990
not going to be a popular driver and the

356
00:14:41,990 --> 00:14:45,500
other thing that I ran into was one no

357
00:14:45,500 --> 00:14:48,530
just want multi-platform right hello

358
00:14:48,530 --> 00:14:52,130
Windows users anybody hears the windows

359
00:14:52,130 --> 00:14:55,880
user wow there's actually a couple of

360
00:14:55,880 --> 00:14:58,970
months that's amazing so no just goes

361
00:14:58,970 --> 00:15:02,390
windows all right what about that damn

362
00:15:02,390 --> 00:15:05,780
C++ right anybody here oh there u

363
00:15:05,780 --> 00:15:13,220
Windows users enjoy C++ extensions no so

364
00:15:13,220 --> 00:15:15,110
so what what you do in this case like

365
00:15:15,110 --> 00:15:18,770
you install is install a driver not give

366
00:15:18,770 --> 00:15:20,270
will throw an error it will still

367
00:15:20,270 --> 00:15:21,920
install but it will throw an error so

368
00:15:21,920 --> 00:15:24,260
you get this confusion going right so

369
00:15:24,260 --> 00:15:28,130
you build dll's in case I built dls

370
00:15:28,130 --> 00:15:30,200
automatically for windows 32 and windows

371
00:15:30,200 --> 00:15:32,720
64 and just wrap your package them with

372
00:15:32,720 --> 00:15:34,730
with the actual driver so that like if

373
00:15:34,730 --> 00:15:35,960
you're on Windows you will go and look

374
00:15:35,960 --> 00:15:38,420
insider' dll low that and you'll use the

375
00:15:38,420 --> 00:15:43,400
C++ parser but there's all these lanky

376
00:15:43,400 --> 00:15:44,900
things I've probably improved a little

377
00:15:44,900 --> 00:15:46,880
bit but for example until recently you

378
00:15:46,880 --> 00:15:49,130
could only build no extensions using

379
00:15:49,130 --> 00:15:51,680
visual studio 2010 plus the windows 7

380
00:15:51,680 --> 00:15:53,550
64-bit SDK

381
00:15:53,550 --> 00:15:56,700
just finding that out is like question

382
00:15:56,700 --> 00:16:00,570
itself and you know no gift will

383
00:16:00,570 --> 00:16:03,180
basically give an error that the package

384
00:16:03,180 --> 00:16:06,300
didn't build leading to my you know

385
00:16:06,300 --> 00:16:08,730
typical github issues where I cannot

386
00:16:08,730 --> 00:16:12,660
install the module because I'm getting

387
00:16:12,660 --> 00:16:14,310
an error right even if the module

388
00:16:14,310 --> 00:16:19,290
installed so usually the problem is

389
00:16:19,290 --> 00:16:23,540
between you know the screen and I seats

390
00:16:23,540 --> 00:16:27,300
but sometimes they have a valid point so

391
00:16:27,300 --> 00:16:29,130
one of my biggest pet peeves I guess is

392
00:16:29,130 --> 00:16:31,440
that I would love to see be able to tell

393
00:16:31,440 --> 00:16:33,690
no chip don't build for windows right

394
00:16:33,690 --> 00:16:36,930
and and then I just have it installed

395
00:16:36,930 --> 00:16:39,390
properly and it ignores basically the

396
00:16:39,390 --> 00:16:41,760
build process and then you have the

397
00:16:41,760 --> 00:16:43,829
random people who are still using

398
00:16:43,829 --> 00:16:46,740
Windows XP like who the hell uses mean

399
00:16:46,740 --> 00:16:51,240
at 6p seriously it's like it but it

400
00:16:51,240 --> 00:16:52,860
seems to be like I don't know it's like

401
00:16:52,860 --> 00:16:54,839
there's like a random among the people

402
00:16:54,839 --> 00:16:58,140
who are using it so after exterior

403
00:16:58,140 --> 00:16:59,700
painting the windows which is an ongoing

404
00:16:59,700 --> 00:17:02,160
hell bicycling so it's never finish it

405
00:17:02,160 --> 00:17:04,620
finished or something new every couple

406
00:17:04,620 --> 00:17:07,230
of weeks usually when Microsoft

407
00:17:07,230 --> 00:17:09,329
publishes a no just a player you know

408
00:17:09,329 --> 00:17:11,850
article in there msdn magazine there's a

409
00:17:11,850 --> 00:17:16,500
new flood of people to use no Jess at

410
00:17:16,500 --> 00:17:18,390
least like I had the possibility of

411
00:17:18,390 --> 00:17:19,410
working a little bit of higher things

412
00:17:19,410 --> 00:17:21,240
right so one of the things that I really

413
00:17:21,240 --> 00:17:23,790
enjoy it was like getting the arm bill

414
00:17:23,790 --> 00:17:25,559
to work properly right so you can run it

415
00:17:25,559 --> 00:17:28,140
on Raspberry Pi and that was really good

416
00:17:28,140 --> 00:17:30,240
fun and I learned a lot about like how

417
00:17:30,240 --> 00:17:31,919
memory alignment is different between

418
00:17:31,919 --> 00:17:36,960
arm and x86 so considering all that you

419
00:17:36,960 --> 00:17:38,460
know like what kind of regrets do I have

420
00:17:38,460 --> 00:17:40,710
one when having dealt with this project

421
00:17:40,710 --> 00:17:43,470
over four years all right so I think

422
00:17:43,470 --> 00:17:45,120
most when things i really regret is

423
00:17:45,120 --> 00:17:49,770
doing this I don't know if I this can be

424
00:17:49,770 --> 00:17:52,020
considered an anti-pattern but it's

425
00:17:52,020 --> 00:17:53,640
definitely not good if you're dealing

426
00:17:53,640 --> 00:17:56,100
with something like the driver I should

427
00:17:56,100 --> 00:18:00,240
have done this right and the lessons

428
00:18:00,240 --> 00:18:03,360
from that is really if it's possible to

429
00:18:03,360 --> 00:18:05,309
access an intern the internal state of

430
00:18:05,309 --> 00:18:07,080
something people are going to access the

431
00:18:07,080 --> 00:18:07,290
inter

432
00:18:07,290 --> 00:18:10,380
whole state of something and it's just

433
00:18:10,380 --> 00:18:12,600
like getting tickets where people are

434
00:18:12,600 --> 00:18:14,400
like oh my application doesn't work

435
00:18:14,400 --> 00:18:16,860
because i'm using this internal field to

436
00:18:16,860 --> 00:18:19,170
find some state of the driver and that

437
00:18:19,170 --> 00:18:22,140
field is no longer there it's not kind

438
00:18:22,140 --> 00:18:25,380
of fun right so like the lesson at least

439
00:18:25,380 --> 00:18:27,210
from the perspective of this is like if

440
00:18:27,210 --> 00:18:28,980
i guess it's a global lesson when it

441
00:18:28,980 --> 00:18:31,020
comes the AP is which is like only

442
00:18:31,020 --> 00:18:33,750
exposed state and functions that you

443
00:18:33,750 --> 00:18:37,770
explicitly want the user to use now this

444
00:18:37,770 --> 00:18:40,350
was more the fact that i was like

445
00:18:40,350 --> 00:18:42,180
completely new to java script and that

446
00:18:42,180 --> 00:18:46,500
was what i started with so I'm kind of

447
00:18:46,500 --> 00:18:48,540
trapped between this situation that I

448
00:18:48,540 --> 00:18:50,190
actually have to do backwards

449
00:18:50,190 --> 00:18:52,560
compatibility drivers are supposed to be

450
00:18:52,560 --> 00:18:55,800
one of the most boring things you use it

451
00:18:55,800 --> 00:18:58,560
should just work right so changing code

452
00:18:58,560 --> 00:18:59,670
that breaks to other people's

453
00:18:59,670 --> 00:19:03,150
applications is a no-no re things that I

454
00:19:03,150 --> 00:19:04,500
really did bad was like I actually

455
00:19:04,500 --> 00:19:06,300
exposed the collection class and I

456
00:19:06,300 --> 00:19:08,070
expose the cursor class leading people

457
00:19:08,070 --> 00:19:11,700
to do create instances of these and they

458
00:19:11,700 --> 00:19:13,200
were never supposed to be used to

459
00:19:13,200 --> 00:19:14,760
recreated instances because they are

460
00:19:14,760 --> 00:19:16,290
actually just kind of internal classes

461
00:19:16,290 --> 00:19:19,050
and i'm still paying for this with

462
00:19:19,050 --> 00:19:23,130
github issues so if there's essence here

463
00:19:23,130 --> 00:19:24,810
is like just be very careful about what

464
00:19:24,810 --> 00:19:26,790
you expose and then slowly increase the

465
00:19:26,790 --> 00:19:30,510
exposure if you need overtime testing as

466
00:19:30,510 --> 00:19:32,430
well is something that's incredibly

467
00:19:32,430 --> 00:19:33,930
painful when you're doing something like

468
00:19:33,930 --> 00:19:36,810
a driver so in the start I was using

469
00:19:36,810 --> 00:19:38,640
simple integration tests you know take a

470
00:19:38,640 --> 00:19:40,350
document put it in the base read it back

471
00:19:40,350 --> 00:19:42,960
and test right and i was using j spec

472
00:19:42,960 --> 00:19:46,080
and then i moved to like the NJ units

473
00:19:46,080 --> 00:19:49,260
clone and units and I'll after a while

474
00:19:49,260 --> 00:19:52,770
this reality kind of hit me the thing is

475
00:19:52,770 --> 00:19:55,470
like my testing is not a linear thing

476
00:19:55,470 --> 00:19:59,040
it's a grid so I have to test against

477
00:19:59,040 --> 00:20:01,980
notes you're 80 10 whatever the next

478
00:20:01,980 --> 00:20:04,050
version is and there's like several

479
00:20:04,050 --> 00:20:05,820
different versions the Mongo each of

480
00:20:05,820 --> 00:20:07,500
them having slightly different features

481
00:20:07,500 --> 00:20:09,620
or slightly changes in behavior and

482
00:20:09,620 --> 00:20:12,360
making this all work and has unified

483
00:20:12,360 --> 00:20:15,110
integration framework is just horrible

484
00:20:15,110 --> 00:20:19,370
right so what I did was like at the end

485
00:20:19,370 --> 00:20:21,200
throw out and units because you didn't

486
00:20:21,200 --> 00:20:23,390
work anymore and then slowly working on

487
00:20:23,390 --> 00:20:25,570
like a new test framework just

488
00:20:25,570 --> 00:20:28,340
specifically for integration testing so

489
00:20:28,340 --> 00:20:31,460
the main core of the idea is to split

490
00:20:31,460 --> 00:20:33,530
the configuration of what you're testing

491
00:20:33,530 --> 00:20:35,870
away from what actually is the test and

492
00:20:35,870 --> 00:20:40,250
also be able to specify tags for the

493
00:20:40,250 --> 00:20:41,990
test so that you're able to say this tag

494
00:20:41,990 --> 00:20:44,990
needs to have the server you know

495
00:20:44,990 --> 00:20:47,240
support at least version 22 for example

496
00:20:47,240 --> 00:20:50,000
and only run it on 122 is pressing so

497
00:20:50,000 --> 00:20:51,620
that you can split up your tests and run

498
00:20:51,620 --> 00:20:53,540
them in the grip right so you want to

499
00:20:53,540 --> 00:20:55,220
run against multiple things you need to

500
00:20:55,220 --> 00:20:57,590
be able to write a test with the least

501
00:20:57,590 --> 00:20:59,090
possible amount of pain but still be

502
00:20:59,090 --> 00:21:01,820
able to give the runner some sort of

503
00:21:01,820 --> 00:21:04,730
metadata that lets it basically run it

504
00:21:04,730 --> 00:21:09,140
against the right version and and the

505
00:21:09,140 --> 00:21:10,940
other thing was like some things are

506
00:21:10,940 --> 00:21:13,010
really painful like sample I replica

507
00:21:13,010 --> 00:21:14,720
said like when you bring down a server

508
00:21:14,720 --> 00:21:17,419
it takes a while for it to stabilize and

509
00:21:17,419 --> 00:21:19,370
bring it back up so running a lot of

510
00:21:19,370 --> 00:21:21,440
tests was incredibly slow all right so

511
00:21:21,440 --> 00:21:23,390
paralyzing the test was also important

512
00:21:23,390 --> 00:21:26,120
not paralyzing as in running a multiple

513
00:21:26,120 --> 00:21:28,220
servers out there just being able to run

514
00:21:28,220 --> 00:21:29,630
them in parallel using multiple

515
00:21:29,630 --> 00:21:32,360
processes on on the machine for example

516
00:21:32,360 --> 00:21:34,790
so that's also an ongoing thing but we

517
00:21:34,790 --> 00:21:36,650
all know for example I want them as

518
00:21:36,650 --> 00:21:38,350
painful things over a long period

519
00:21:38,350 --> 00:21:41,650
project is that your test code grows

520
00:21:41,650 --> 00:21:44,299
uncontrollably because you never prune

521
00:21:44,299 --> 00:21:46,220
your tests ever how many here actually

522
00:21:46,220 --> 00:21:47,870
going back when we factor the tests and

523
00:21:47,870 --> 00:21:49,340
really move tests in the last couple

524
00:21:49,340 --> 00:21:52,490
years a couple people right but you all

525
00:21:52,490 --> 00:21:54,770
know the problem right it's like after a

526
00:21:54,770 --> 00:21:56,179
while you don't know which tests overlap

527
00:21:56,179 --> 00:21:58,100
in functionality anymore and as if

528
00:21:58,100 --> 00:21:59,059
you're looking you're only one person

529
00:21:59,059 --> 00:22:00,980
working on the project I can't imagine

530
00:22:00,980 --> 00:22:03,049
if you're a team so one of the things

531
00:22:03,049 --> 00:22:05,000
I'm also want to work on for this

532
00:22:05,000 --> 00:22:06,880
particular thing is what I call reverse

533
00:22:06,880 --> 00:22:09,770
code coverage so instead of asking the

534
00:22:09,770 --> 00:22:13,400
question like given an X amount of tests

535
00:22:13,400 --> 00:22:15,020
what code is covered by it I want to ask

536
00:22:15,020 --> 00:22:16,640
the difference question a reverse

537
00:22:16,640 --> 00:22:18,470
question I want to ask given a function

538
00:22:18,470 --> 00:22:21,590
which tests cover this function and then

539
00:22:21,590 --> 00:22:24,020
be able to delete functions so this is

540
00:22:24,020 --> 00:22:25,580
like basically i think i'd probably have

541
00:22:25,580 --> 00:22:27,630
about thirty forty percent crap

542
00:22:27,630 --> 00:22:29,790
tests so if I could just delete that I

543
00:22:29,790 --> 00:22:32,520
would be golden hopefully somebody else

544
00:22:32,520 --> 00:22:35,730
be able to use it after that the other

545
00:22:35,730 --> 00:22:37,050
thing when you're driving something like

546
00:22:37,050 --> 00:22:38,610
an open source project that everybody

547
00:22:38,610 --> 00:22:41,040
uses is like documentation and we all

548
00:22:41,040 --> 00:22:43,260
know we love to do documentation because

549
00:22:43,260 --> 00:22:48,120
that's not painful at all to do right so

550
00:22:48,120 --> 00:22:50,190
what people ask for when you're using a

551
00:22:50,190 --> 00:22:52,560
driver examples just tons and tons of

552
00:22:52,560 --> 00:22:54,690
examples give me an example how to do X

553
00:22:54,690 --> 00:22:58,650
right and i realized that i already had

554
00:22:58,650 --> 00:23:00,570
those in code right because i had the

555
00:23:00,570 --> 00:23:03,570
integration tests so i decided to build

556
00:23:03,570 --> 00:23:07,650
some tools there's a bunch of spaghetti

557
00:23:07,650 --> 00:23:10,590
JSI need to refactor and using the

558
00:23:10,590 --> 00:23:13,170
Python Sphinx library and what I

559
00:23:13,170 --> 00:23:15,960
basically did is very simple so I added

560
00:23:15,960 --> 00:23:21,750
like the meta data types myself using

561
00:23:21,750 --> 00:23:24,390
the I think it's like Jays doc parser

562
00:23:24,390 --> 00:23:27,000
and I basically have a concert of

563
00:23:27,000 --> 00:23:30,030
something called class like underscore

564
00:23:30,030 --> 00:23:32,160
class where it says this belongs to this

565
00:23:32,160 --> 00:23:34,550
particular class and this particular

566
00:23:34,550 --> 00:23:37,320
function and then what what it does is

567
00:23:37,320 --> 00:23:39,480
that it goes down through this file

568
00:23:39,480 --> 00:23:43,230
finds the duck duck line which is just a

569
00:23:43,230 --> 00:23:45,300
line that gets added specifically for

570
00:23:45,300 --> 00:23:47,760
for the documentation and then basically

571
00:23:47,760 --> 00:23:50,280
just rips that particular piece out of

572
00:23:50,280 --> 00:23:53,130
it and generates documentation with with

573
00:23:53,130 --> 00:23:56,040
using the merging in the integration

574
00:23:56,040 --> 00:23:57,960
testing the documentation it's still a

575
00:23:57,960 --> 00:24:01,260
bit like like you know fairly verbose up

576
00:24:01,260 --> 00:24:02,580
there so there's still things i need to

577
00:24:02,580 --> 00:24:04,860
fix but the idea was basically simple if

578
00:24:04,860 --> 00:24:07,140
i had a new test and i want to make it

579
00:24:07,140 --> 00:24:08,970
example in a documentation i could just

580
00:24:08,970 --> 00:24:11,100
tag it and then at least I would have a

581
00:24:11,100 --> 00:24:12,810
guarantee that when you copy and paste

582
00:24:12,810 --> 00:24:14,850
that code from documentation it would

583
00:24:14,850 --> 00:24:17,220
run right so you could I wouldn't have

584
00:24:17,220 --> 00:24:21,770
to like maintain things to places and

585
00:24:21,770 --> 00:24:24,480
then it's like the open source thing

586
00:24:24,480 --> 00:24:28,950
right which is his own chapter backwards

587
00:24:28,950 --> 00:24:30,780
compatibility right as i said earlier

588
00:24:30,780 --> 00:24:34,620
drivers need to be boring and changes

589
00:24:34,620 --> 00:24:37,920
bad and drivers because it's not like

590
00:24:37,920 --> 00:24:40,530
you're some people are using the drivers

591
00:24:40,530 --> 00:24:42,780
but directly but most people are using

592
00:24:42,780 --> 00:24:44,910
it through Mongoose plus something else

593
00:24:44,910 --> 00:24:47,010
or whatever and so when you change

594
00:24:47,010 --> 00:24:48,810
something at a fundamental part at the

595
00:24:48,810 --> 00:24:51,030
bottom of the pyramid the whole change

596
00:24:51,030 --> 00:24:52,650
ripples up to the chain and you create a

597
00:24:52,650 --> 00:24:56,850
lot of havoc and yeah some of the api's

598
00:24:56,850 --> 00:24:59,990
are currently there suck and I know it

599
00:24:59,990 --> 00:25:02,910
but I can't change them like that easily

600
00:25:02,910 --> 00:25:04,260
because there's a lot of cold out there

601
00:25:04,260 --> 00:25:06,060
relying on and it's getting worse for

602
00:25:06,060 --> 00:25:09,000
every day right and then there's changes

603
00:25:09,000 --> 00:25:11,130
in like just what's hot in the moments

604
00:25:11,130 --> 00:25:13,260
there's you know CoffeeScript one we can

605
00:25:13,260 --> 00:25:14,910
remember getting pull request why don't

606
00:25:14,910 --> 00:25:16,790
you rewrite your driver in CoffeeScript

607
00:25:16,790 --> 00:25:19,800
it's like whatever and now it's

608
00:25:19,800 --> 00:25:22,170
lifescript like really live script like

609
00:25:22,170 --> 00:25:23,790
we're back to naming it what javascript

610
00:25:23,790 --> 00:25:26,880
was actually called it better look like

611
00:25:26,880 --> 00:25:31,890
JavaScript then liked it's like the

612
00:25:31,890 --> 00:25:34,920
managing part of the projects right one

613
00:25:34,920 --> 00:25:36,330
of the things is just to challenge

614
00:25:36,330 --> 00:25:39,420
people to help like I really appreciate

615
00:25:39,420 --> 00:25:42,150
the appreciated the blog post that Felix

616
00:25:42,150 --> 00:25:44,640
guys nerve brought about like just

617
00:25:44,640 --> 00:25:46,830
giving projects to people if you're

618
00:25:46,830 --> 00:25:49,470
leaving them and I've had some success

619
00:25:49,470 --> 00:25:51,900
with that because i had a get javascript

620
00:25:51,900 --> 00:25:54,570
library it's not great but it works more

621
00:25:54,570 --> 00:25:57,330
or less and i just didn't have time to

622
00:25:57,330 --> 00:25:59,250
work on that so I managed to this you

623
00:25:59,250 --> 00:26:01,110
just give pawned off to somebody else

624
00:26:01,110 --> 00:26:04,020
and I worked great but people in general

625
00:26:04,020 --> 00:26:08,910
are lazy right so they want to do the

626
00:26:08,910 --> 00:26:10,680
least possible thing so one of the

627
00:26:10,680 --> 00:26:11,700
things you have to do when you maintain

628
00:26:11,700 --> 00:26:13,140
a project in somebody sends your bug or

629
00:26:13,140 --> 00:26:14,670
something is challenge people to help

630
00:26:14,670 --> 00:26:17,250
right try to be specific about what you

631
00:26:17,250 --> 00:26:19,470
need and they're like be sure that you

632
00:26:19,470 --> 00:26:21,200
give credits for pull requests all right

633
00:26:21,200 --> 00:26:23,880
like make sure that you are nice back

634
00:26:23,880 --> 00:26:26,490
and then just ignore flames to create a

635
00:26:26,490 --> 00:26:28,020
system they don't matter they go away

636
00:26:28,020 --> 00:26:30,750
after a while and there's like just

637
00:26:30,750 --> 00:26:32,670
ignore bad faith issues where people are

638
00:26:32,670 --> 00:26:34,680
just ranting they just put a issue there

639
00:26:34,680 --> 00:26:37,110
because they're mad or and i found the

640
00:26:37,110 --> 00:26:39,660
like the general it's like wait 24 hours

641
00:26:39,660 --> 00:26:41,670
to respond to an issue and see if they

642
00:26:41,670 --> 00:26:44,250
fix it and fix themselves before you

643
00:26:44,250 --> 00:26:46,020
start like commenting on it because if

644
00:26:46,020 --> 00:26:47,610
just basically a lot of things will just

645
00:26:47,610 --> 00:26:49,440
go away because people didn't really try

646
00:26:49,440 --> 00:26:51,200
it before they merge the issue

647
00:26:51,200 --> 00:26:54,139
and then your call is always going to

648
00:26:54,139 --> 00:26:56,059
suck so you basically just have to roll

649
00:26:56,059 --> 00:26:58,639
with it I how many here actually like

650
00:26:58,639 --> 00:27:00,710
gone look at the con side all the hell

651
00:27:00,710 --> 00:27:02,960
wrote this just to realize that they get

652
00:27:02,960 --> 00:27:07,220
play mostly themselves alright so once

653
00:27:07,220 --> 00:27:08,690
you get that then you understand live

654
00:27:08,690 --> 00:27:11,690
code and what is actual good code is

655
00:27:11,690 --> 00:27:14,570
completely objective and it's also give

656
00:27:14,570 --> 00:27:16,159
and it's also completely dependent on

657
00:27:16,159 --> 00:27:17,960
where you are in your learning process

658
00:27:17,960 --> 00:27:21,529
right so just be kind to people that's

659
00:27:21,529 --> 00:27:23,000
like the general rule and usually

660
00:27:23,000 --> 00:27:26,360
they're kind back right and if they're

661
00:27:26,360 --> 00:27:29,059
inflamed you don't respond just don't

662
00:27:29,059 --> 00:27:31,519
it's not worth it and I think like as

663
00:27:31,519 --> 00:27:33,590
one thing I learned a mango is like

664
00:27:33,590 --> 00:27:36,639
being good at not responding to flames

665
00:27:36,639 --> 00:27:40,789
like so we simply not wrapping up it's

666
00:27:40,789 --> 00:27:42,470
like if you're going to have some

667
00:27:42,470 --> 00:27:43,789
takeaways from this talk it's like

668
00:27:43,789 --> 00:27:47,330
there's no static environment like we

669
00:27:47,330 --> 00:27:49,820
think that no jess is fairly stable now

670
00:27:49,820 --> 00:27:51,919
but it's going to change again and it's

671
00:27:51,919 --> 00:27:53,299
going to have like your this little

672
00:27:53,299 --> 00:27:55,850
knock-on effects right so they're just

673
00:27:55,850 --> 00:27:57,250
live with the fact that everything is

674
00:27:57,250 --> 00:27:59,899
dynamic testing drivers is extremely

675
00:27:59,899 --> 00:28:02,779
hard and then not like criticism

676
00:28:02,779 --> 00:28:06,159
personally challenge people to help you

677
00:28:06,159 --> 00:28:08,630
most people are actually nice and

678
00:28:08,630 --> 00:28:11,120
actually are willing to help and just

679
00:28:11,120 --> 00:28:14,210
credit everybody who helps you in fact

680
00:28:14,210 --> 00:28:17,840
being nice people pays back in

681
00:28:17,840 --> 00:28:19,399
conclusion it's been like three and a

682
00:28:19,399 --> 00:28:22,340
half years since I released the code and

683
00:28:22,340 --> 00:28:24,169
it's been great it's been really busy

684
00:28:24,169 --> 00:28:26,419
and up and downs and now I will do it

685
00:28:26,419 --> 00:28:28,250
for a full time job so I can't complain

686
00:28:28,250 --> 00:28:31,970
I made tells mistakes under way and I'm

687
00:28:31,970 --> 00:28:34,669
sure to make lots in the future but I

688
00:28:34,669 --> 00:28:40,270
would do it all I can that's it

689
00:28:40,280 --> 00:28:46,029
you

690
00:28:46,039 --> 00:28:49,200
Thank You Christian uh opening up the

691
00:28:49,200 --> 00:28:53,309
floor for questions it's like a

692
00:28:53,309 --> 00:28:56,250
reoccurring theme should just start on

693
00:28:56,250 --> 00:28:59,279
this side um I don't know if this is

694
00:28:59,279 --> 00:29:00,840
reasonable or possible but I was

695
00:29:00,840 --> 00:29:02,850
thinking about the buffering operations

696
00:29:02,850 --> 00:29:04,710
when a connection goes down yeah there

697
00:29:04,710 --> 00:29:06,539
could be a configuration to say prefer

698
00:29:06,539 --> 00:29:09,029
memory or prefer disk and then buffer

699
00:29:09,029 --> 00:29:10,259
just stream it to disk and when the

700
00:29:10,259 --> 00:29:11,700
connection comes back stream that Dre

701
00:29:11,700 --> 00:29:13,500
straight to the socket that's a

702
00:29:13,500 --> 00:29:15,269
possibility haven't thought about that I

703
00:29:15,269 --> 00:29:16,590
definitely something else interesting

704
00:29:16,590 --> 00:29:19,049
but the main problem and all those

705
00:29:19,049 --> 00:29:20,279
options like you have make it very

706
00:29:20,279 --> 00:29:21,809
explicit so there's no unintended

707
00:29:21,809 --> 00:29:29,820
consequences you know yeah yeah any more

708
00:29:29,820 --> 00:29:33,899
questions no I like I like how you

709
00:29:33,899 --> 00:29:35,370
started that off with I don't know if

710
00:29:35,370 --> 00:29:36,750
this is reasonable reasonable or

711
00:29:36,750 --> 00:29:38,070
possible you know that something

712
00:29:38,070 --> 00:29:39,539
interesting is at least coming like so

713
00:29:39,539 --> 00:29:41,370
many good ideas start that way you know

714
00:29:41,370 --> 00:29:43,139
I thought that was great all right let's

715
00:29:43,139 --> 00:29:56,870
give a round of applause for Christian

