1
00:00:00,110 --> 00:00:08,730

[Music]

2
00:00:08,730 --> 00:00:13,500
[Applause]

3
00:00:13,510 --> 00:00:28,630
[Music]

4
00:00:28,640 --> 00:00:30,720
good afternoon everyone

5
00:00:30,720 --> 00:00:32,700
my name is Senne che and the software

6
00:00:32,700 --> 00:00:35,190
engineer on the amp project and today

7
00:00:35,190 --> 00:00:38,399
I'm going to share with you our secrets

8
00:00:38,399 --> 00:00:42,149
for making web pages stuff and hopefully

9
00:00:42,149 --> 00:00:44,370
you learn some of the best practices and

10
00:00:44,370 --> 00:00:46,920
apply them in your own development

11
00:00:46,920 --> 00:00:51,149
process but first let me show you what

12
00:00:51,149 --> 00:00:54,180
problem we're trying to solve this is a

13
00:00:54,180 --> 00:00:58,680
typical mobile page and I as a user want

14
00:00:58,680 --> 00:01:00,809
to see this page I have just clicked on

15
00:01:00,809 --> 00:01:03,539
a link to open this page and read the

16
00:01:03,539 --> 00:01:06,869
content but I can't because there are

17
00:01:06,869 --> 00:01:09,330
things that are preventing me from doing

18
00:01:09,330 --> 00:01:14,820
so the first is that it's extremely slow

19
00:01:14,820 --> 00:01:17,880
to load in fact does anyone here in the

20
00:01:17,880 --> 00:01:20,220
audience know how long it takes the

21
00:01:20,220 --> 00:01:26,450
average mobile page to load 15 seconds

22
00:01:26,450 --> 00:01:29,909
15 seconds you know that after 3 seconds

23
00:01:29,909 --> 00:01:33,570
half your users are gone after 10

24
00:01:33,570 --> 00:01:37,229
seconds nobody's there 15 seconds is

25
00:01:37,229 --> 00:01:44,340
horrible the average is 19 seconds so

26
00:01:44,340 --> 00:01:47,369
after I finally loaded my page I have

27
00:01:47,369 --> 00:01:50,909
this flash of unstyled content which is

28
00:01:50,909 --> 00:01:53,430
very jarring and could possibly give you

29
00:01:53,430 --> 00:01:58,020
a Pepsi and after I takes forever to

30
00:01:58,020 --> 00:01:59,759
load I have a flash of unstyled content

31
00:01:59,759 --> 00:02:02,670
I start reading the page in 20 seconds

32
00:02:02,670 --> 00:02:04,590
later when it's just that the best part

33
00:02:04,590 --> 00:02:07,350
and I want to see what happens this ad

34
00:02:07,350 --> 00:02:11,340
loads out of nowhere and fix my content

35
00:02:11,340 --> 00:02:12,390
around and I lose my

36
00:02:12,390 --> 00:02:13,860
place and I don't know where I am

37
00:02:13,860 --> 00:02:15,690
anymore and I really want to know what

38
00:02:15,690 --> 00:02:22,050
happens next so then I try to look for

39
00:02:22,050 --> 00:02:24,930
where I was but now my browser is kind

40
00:02:24,930 --> 00:02:27,780
of frozen or it's janky and I can't find

41
00:02:27,780 --> 00:02:31,860
where I left off this is a horrible

42
00:02:31,860 --> 00:02:35,370
horrible experience we have all been

43
00:02:35,370 --> 00:02:38,640
here before but why should you as

44
00:02:38,640 --> 00:02:41,730
developers care about this you have a

45
00:02:41,730 --> 00:02:43,350
million things you could be doing with

46
00:02:43,350 --> 00:02:46,470
your time why is it important to fix

47
00:02:46,470 --> 00:02:49,830
these issues well my answer is that it's

48
00:02:49,830 --> 00:02:52,380
important if you want to keep your users

49
00:02:52,380 --> 00:02:56,459
and your revenue today I'm going to take

50
00:02:56,459 --> 00:02:58,950
you under the hood and show you what's

51
00:02:58,950 --> 00:03:00,720
going on that's causing all these issues

52
00:03:00,720 --> 00:03:03,180
I'm going to show you the 10 sets that

53
00:03:03,180 --> 00:03:05,459
we take with amp to address these issues

54
00:03:05,459 --> 00:03:07,680
to make the web experience much better

55
00:03:07,680 --> 00:03:10,080
and hopefully you'll be able to apply

56
00:03:10,080 --> 00:03:12,750
what we do in your own development

57
00:03:12,750 --> 00:03:16,110
process to make your pages better in

58
00:03:16,110 --> 00:03:20,549
faster so first let's look at the first

59
00:03:20,549 --> 00:03:22,709
problem which is that it's very slow to

60
00:03:22,709 --> 00:03:25,110
load and what's happening here is that

61
00:03:25,110 --> 00:03:27,900
there are things that are blocking the

62
00:03:27,900 --> 00:03:31,350
render and these things happen to be

63
00:03:31,350 --> 00:03:33,269
files that you have to download before

64
00:03:33,269 --> 00:03:35,700
you could see anything on your page they

65
00:03:35,700 --> 00:03:38,310
could be the assess files they could be

66
00:03:38,310 --> 00:03:41,459
JavaScript files and they have to

67
00:03:41,459 --> 00:03:42,840
download and it takes a really long time

68
00:03:42,840 --> 00:03:48,000
and to solve this we decided that we

69
00:03:48,000 --> 00:03:51,690
need all scripts to be asynchronous so

70
00:03:51,690 --> 00:03:54,360
that you can see the HTML on your page

71
00:03:54,360 --> 00:03:56,370
you can have the page load and the

72
00:03:56,370 --> 00:03:58,380
script will load in the background and

73
00:03:58,380 --> 00:04:00,870
they don't have to block the render of

74
00:04:00,870 --> 00:04:05,579
your page the next thing is that we only

75
00:04:05,579 --> 00:04:07,769
want to download JavaScript that you

76
00:04:07,769 --> 00:04:10,200
need on your page so here for example is

77
00:04:10,200 --> 00:04:13,350
a carousel not every page will have a

78
00:04:13,350 --> 00:04:16,049
carousel so not every page should

79
00:04:16,049 --> 00:04:19,829
download the JavaScript of a carousel so

80
00:04:19,829 --> 00:04:23,039
we break the page up into components and

81
00:04:23,039 --> 00:04:25,500
we tell the browser specifically what

82
00:04:25,500 --> 00:04:26,470
JavaScript we

83
00:04:26,470 --> 00:04:28,090
want to download so that you only

84
00:04:28,090 --> 00:04:32,950
download what you need for your page the

85
00:04:32,950 --> 00:04:36,340
next thing is that we inline CSS so

86
00:04:36,340 --> 00:04:38,530
external stylesheets tend to be very

87
00:04:38,530 --> 00:04:41,440
large and they take a very long time to

88
00:04:41,440 --> 00:04:44,050
load so in lining it means that you

89
00:04:44,050 --> 00:04:45,850
don't have to download them separately

90
00:04:45,850 --> 00:04:49,300
and it's going to be a lot faster this

91
00:04:49,300 --> 00:04:51,820
is like taking a carry-on luggage with

92
00:04:51,820 --> 00:04:53,860
you when you fly it's going to be a lot

93
00:04:53,860 --> 00:04:56,830
faster than if you check in your baggage

94
00:04:56,830 --> 00:04:58,350
and end up being one of these people

95
00:04:58,350 --> 00:05:01,120
waiting at the carousel nobody wants to

96
00:05:01,120 --> 00:05:03,660
be here because it takes forever so

97
00:05:03,660 --> 00:05:06,010
check in your don't check in your

98
00:05:06,010 --> 00:05:07,840
luggage carry it on with you inline your

99
00:05:07,840 --> 00:05:11,590
CSS now when you fly and you take a

100
00:05:11,590 --> 00:05:14,710
carry-on suitcase with you you have to

101
00:05:14,710 --> 00:05:16,930
limit how many things you bring right

102
00:05:16,930 --> 00:05:20,440
because you don't have room for your

103
00:05:20,440 --> 00:05:22,060
entire house in your carry-on luggage

104
00:05:22,060 --> 00:05:25,810
and we decided that we're going to limit

105
00:05:25,810 --> 00:05:30,220
CSS by 60 kilobytes and 50 kilobytes is

106
00:05:30,220 --> 00:05:32,919
just like the space in your carry-on

107
00:05:32,919 --> 00:05:36,100
luggage it's just enough for all the

108
00:05:36,100 --> 00:05:37,600
things that you need but you're not

109
00:05:37,600 --> 00:05:39,430
going to bring a bunch of junk that you

110
00:05:39,430 --> 00:05:45,130
don't need the next thing so also the 50

111
00:05:45,130 --> 00:05:47,020
kilobytes what it forces you to do is

112
00:05:47,020 --> 00:05:49,120
clean up CSS that you don't longer need

113
00:05:49,120 --> 00:05:52,210
now around wintertime a lot of us have

114
00:05:52,210 --> 00:05:55,330
these promotions for for Christmas or

115
00:05:55,330 --> 00:05:57,460
for the holidays for certain sales and

116
00:05:57,460 --> 00:06:01,390
we have CSS for it and then we get rid

117
00:06:01,390 --> 00:06:03,850
of the we don't show it anymore because

118
00:06:03,850 --> 00:06:06,180
you know in January Christmas is over

119
00:06:06,180 --> 00:06:09,630
but someone forgot to clean up the CSS

120
00:06:09,630 --> 00:06:12,840
it's still there even if your users

121
00:06:12,840 --> 00:06:16,210
don't see it but they're paying for it

122
00:06:16,210 --> 00:06:18,910
with their time because it takes longer

123
00:06:18,910 --> 00:06:21,160
to download and their wallets because

124
00:06:21,160 --> 00:06:25,960
this takes up data so limiting CSS to 50

125
00:06:25,960 --> 00:06:27,490
kilobytes means that you're going to

126
00:06:27,490 --> 00:06:29,530
have to clean up these things and it's

127
00:06:29,530 --> 00:06:31,150
going to give your users a much better

128
00:06:31,150 --> 00:06:34,900
experience the next thing I want to talk

129
00:06:34,900 --> 00:06:37,330
about is third-party JavaScript and

130
00:06:37,330 --> 00:06:38,660
mainly

131
00:06:38,660 --> 00:06:43,720
in relation to ad so ad have not all

132
00:06:43,720 --> 00:06:47,150
kept up with the time and a lot of them

133
00:06:47,150 --> 00:06:49,340
think that they need third party

134
00:06:49,340 --> 00:06:52,540
JavaScript for their execution and

135
00:06:52,540 --> 00:06:54,860
because ads are important and they make

136
00:06:54,860 --> 00:06:57,610
money we have to allow them to exist and

137
00:06:57,610 --> 00:07:00,680
so they use third party JavaScript but

138
00:07:00,680 --> 00:07:03,410
we we have to tell them they need to be

139
00:07:03,410 --> 00:07:05,840
in sandbox iframes because third party

140
00:07:05,840 --> 00:07:09,320
JavaScript does horrible things first

141
00:07:09,320 --> 00:07:13,250
they write think script so again you

142
00:07:13,250 --> 00:07:14,750
have this issue where you have to wait

143
00:07:14,750 --> 00:07:16,850
for these scripts to load before you

144
00:07:16,850 --> 00:07:19,220
could see anything on your page the next

145
00:07:19,220 --> 00:07:21,350
thing is that they document dot write

146
00:07:21,350 --> 00:07:25,280
more things script so you have a lot

147
00:07:25,280 --> 00:07:26,690
more Singh script that you have to wait

148
00:07:26,690 --> 00:07:29,570
for and it all adds up and the third

149
00:07:29,570 --> 00:07:31,000
thing that they do is style

150
00:07:31,000 --> 00:07:32,210
recalculations

151
00:07:32,210 --> 00:07:36,350
which is very heavy on the CPU because

152
00:07:36,350 --> 00:07:39,580
they have to scan your entire page and

153
00:07:39,580 --> 00:07:42,230
it also might be wrong because if you

154
00:07:42,230 --> 00:07:45,050
name a CSS class the same thing an ad

155
00:07:45,050 --> 00:07:47,300
could potentially change the style of

156
00:07:47,300 --> 00:07:49,100
something on your page such as your logo

157
00:07:49,100 --> 00:07:52,540
and you don't want that so by limiting

158
00:07:52,540 --> 00:07:56,030
third parties to these sandbox iframes

159
00:07:56,030 --> 00:07:58,280
they're still going to do these bad

160
00:07:58,280 --> 00:08:00,350
things but they're not going to affect

161
00:08:00,350 --> 00:08:01,730
the rest of the page they're not going

162
00:08:01,730 --> 00:08:04,790
to affect the load and they have their

163
00:08:04,790 --> 00:08:07,760
little box where they can play and also

164
00:08:07,760 --> 00:08:10,220
doing salary calculations are going it's

165
00:08:10,220 --> 00:08:12,470
going to be a lot cheaper because it's

166
00:08:12,470 --> 00:08:14,330
only going to scan the content of the

167
00:08:14,330 --> 00:08:17,450
iframe rather than your entire page this

168
00:08:17,450 --> 00:08:20,660
is like allowing your toddlers to play

169
00:08:20,660 --> 00:08:22,520
with paint and you know that they're

170
00:08:22,520 --> 00:08:24,920
going to make a mess you just want to

171
00:08:24,920 --> 00:08:27,020
keep that must away from other parts of

172
00:08:27,020 --> 00:08:28,900
your help

173
00:08:28,900 --> 00:08:31,580
the next thing we do is resource

174
00:08:31,580 --> 00:08:35,960
prioritization so a typical mobile page

175
00:08:35,960 --> 00:08:40,669
is a lot longer than then your viewport

176
00:08:40,669 --> 00:08:44,350
then your first viewport of a phone and

177
00:08:44,350 --> 00:08:48,710
sometimes we don't actually download the

178
00:08:48,710 --> 00:08:51,710
entire page when a user taps on it but

179
00:08:51,710 --> 00:08:52,500
the

180
00:08:52,500 --> 00:08:54,210
our perceive the load to be

181
00:08:54,210 --> 00:08:56,940
instantaneous because we load the

182
00:08:56,940 --> 00:09:00,180
content in the first viewport before we

183
00:09:00,180 --> 00:09:04,320
load the rest of the page and this makes

184
00:09:04,320 --> 00:09:06,110
the perception of the load

185
00:09:06,110 --> 00:09:08,010
instantaneously even if we didn't have

186
00:09:08,010 --> 00:09:13,020
the time to download everything and we

187
00:09:13,020 --> 00:09:15,450
also do something called pre connect so

188
00:09:15,450 --> 00:09:18,420
for example here's a YouTube video and

189
00:09:18,420 --> 00:09:20,760
to lo the contents of a YouTube video

190
00:09:20,760 --> 00:09:23,040
there are a lot of things going on but

191
00:09:23,040 --> 00:09:25,260
one of them is we have to connect to the

192
00:09:25,260 --> 00:09:26,610
source right we have to connect to

193
00:09:26,610 --> 00:09:30,210
YouTube and that takes up time so by

194
00:09:30,210 --> 00:09:32,070
connecting ahead of time as we know that

195
00:09:32,070 --> 00:09:34,680
there's a YouTube video or an image or

196
00:09:34,680 --> 00:09:37,560
for example with Twitter to load the you

197
00:09:37,560 --> 00:09:39,330
know the content you have to connect to

198
00:09:39,330 --> 00:09:41,130
one server to load images you have to

199
00:09:41,130 --> 00:09:43,200
connect to another server by doing these

200
00:09:43,200 --> 00:09:45,630
connections ahead of time when it comes

201
00:09:45,630 --> 00:09:48,870
time to load the content it's going to

202
00:09:48,870 --> 00:09:54,150
load much faster so now we've gotten rid

203
00:09:54,150 --> 00:09:57,450
of this slow loading problem but we're

204
00:09:57,450 --> 00:10:00,510
not done because we have this flash of

205
00:10:00,510 --> 00:10:03,000
unstyled content and we don't want this

206
00:10:03,000 --> 00:10:05,700
and what's happening here is that the

207
00:10:05,700 --> 00:10:08,820
page is loading but then the styles are

208
00:10:08,820 --> 00:10:10,680
being applied after the page has loaded

209
00:10:10,680 --> 00:10:13,290
and to solve this problem we use an

210
00:10:13,290 --> 00:10:17,070
invisibility trick and we set the

211
00:10:17,070 --> 00:10:20,220
opacity of the body to zero so it exists

212
00:10:20,220 --> 00:10:23,550
but it's invisible to the user and then

213
00:10:23,550 --> 00:10:26,490
the styles are applied and eventually

214
00:10:26,490 --> 00:10:29,580
the JavaScript will load and unhide the

215
00:10:29,580 --> 00:10:32,490
page so to the user it's perceived as

216
00:10:32,490 --> 00:10:37,290
being loaded like this first but what

217
00:10:37,290 --> 00:10:40,200
happens if there is no JavaScript well

218
00:10:40,200 --> 00:10:43,050
we have this no script to unhide the

219
00:10:43,050 --> 00:10:45,750
body if there's nothing there to unhide

220
00:10:45,750 --> 00:10:50,180
the body and then finally what if

221
00:10:50,180 --> 00:10:53,520
JavaScript servers go down which can

222
00:10:53,520 --> 00:10:55,560
happen everyone's in a couple of years

223
00:10:55,560 --> 00:11:00,390
right and to address this issue we do a

224
00:11:00,390 --> 00:11:04,410
CSS timeout animation timeout so

225
00:11:04,410 --> 00:11:06,930
for some reason the page thinks that

226
00:11:06,930 --> 00:11:08,190
there is a JavaScript that the server

227
00:11:08,190 --> 00:11:11,610
times out then we will have a timeout

228
00:11:11,610 --> 00:11:15,480
that will unhide the body if the

229
00:11:15,480 --> 00:11:18,440
JavaScript never arrives

230
00:11:18,440 --> 00:11:21,389
now what I just described to you it's

231
00:11:21,389 --> 00:11:23,970
what we currently do but there is a bit

232
00:11:23,970 --> 00:11:25,860
of a time delay and we're currently

233
00:11:25,860 --> 00:11:28,319
working on doing server-side rendering

234
00:11:28,319 --> 00:11:32,160
so that there will be zero time delay so

235
00:11:32,160 --> 00:11:34,980
now we reload fast we got rid of the

236
00:11:34,980 --> 00:11:37,860
flash of unstyled content but we're not

237
00:11:37,860 --> 00:11:40,949
done because 20 seconds into reading

238
00:11:40,949 --> 00:11:43,110
this ad loads out of nowhere and shifts

239
00:11:43,110 --> 00:11:45,209
the content all around and nobody likes

240
00:11:45,209 --> 00:11:48,870
it and what's happening here is just

241
00:11:48,870 --> 00:11:50,970
like I talked about earlier is that I'd

242
00:11:50,970 --> 00:11:54,509
use these third parties Java scripts and

243
00:11:54,509 --> 00:11:56,100
they're really slow they take forever to

244
00:11:56,100 --> 00:12:01,949
load we can't force all the ads to be

245
00:12:01,949 --> 00:12:03,870
implemented in a way that they're going

246
00:12:03,870 --> 00:12:06,360
to load fast right we can't force them

247
00:12:06,360 --> 00:12:08,339
to do that but we have to allow them to

248
00:12:08,339 --> 00:12:11,490
play so to solve this problem where we

249
00:12:11,490 --> 00:12:13,980
let them exist but don't punish our

250
00:12:13,980 --> 00:12:17,670
users we put these placeholders because

251
00:12:17,670 --> 00:12:19,800
we know that there's going to be an ADD

252
00:12:19,800 --> 00:12:23,250
and we have static resource sizing so we

253
00:12:23,250 --> 00:12:26,990
know the size of the ad and so the user

254
00:12:26,990 --> 00:12:30,000
can read the contents of the page and

255
00:12:30,000 --> 00:12:32,610
then it's up to the ad to load on time

256
00:12:32,610 --> 00:12:35,880
and eventually the ad will load and it

257
00:12:35,880 --> 00:12:38,970
won't shift the content so the user can

258
00:12:38,970 --> 00:12:40,949
continue reading and have a pleasant

259
00:12:40,949 --> 00:12:46,380
experience and we've solved this content

260
00:12:46,380 --> 00:12:49,110
shifting issue but we're still not done

261
00:12:49,110 --> 00:12:52,529
because we need to address this frozen

262
00:12:52,529 --> 00:12:54,660
janky problem that's happening and

263
00:12:54,660 --> 00:12:58,350
what's going on here is that the CPU is

264
00:12:58,350 --> 00:13:03,540
overworked and overloaded and to address

265
00:13:03,540 --> 00:13:06,029
this we do a few things first is that

266
00:13:06,029 --> 00:13:08,250
style recalculations are really

267
00:13:08,250 --> 00:13:11,459
expensive so we want to minimize style

268
00:13:11,459 --> 00:13:12,480
recalculations

269
00:13:12,480 --> 00:13:16,019
and we do so by caching the coordinates

270
00:13:16,019 --> 00:13:17,430
so we know where all the things

271
00:13:17,430 --> 00:13:19,830
our and then we know when things resize

272
00:13:19,830 --> 00:13:22,560
and that's the only time that we're

273
00:13:22,560 --> 00:13:25,520
going to recalculate the style

274
00:13:25,520 --> 00:13:29,040
also we batch the dome access so for

275
00:13:29,040 --> 00:13:33,570
example I have this code sample where we

276
00:13:33,570 --> 00:13:35,940
measure something and then we set the

277
00:13:35,940 --> 00:13:38,520
height we change the zone and then we

278
00:13:38,520 --> 00:13:40,529
measure something again and then we

279
00:13:40,529 --> 00:13:42,089
change the zone by setting the width and

280
00:13:42,089 --> 00:13:44,339
then we measure something again and this

281
00:13:44,339 --> 00:13:47,220
is a very reasonable chunk of code but

282
00:13:47,220 --> 00:13:50,220
what's happening here is that the style

283
00:13:50,220 --> 00:13:52,770
is being recalculated every time you

284
00:13:52,770 --> 00:13:54,660
measure something because the dome has

285
00:13:54,660 --> 00:13:55,470
changed

286
00:13:55,470 --> 00:13:58,230
so by batching the dome access we can

287
00:13:58,230 --> 00:14:01,740
schedule a read for the first animation

288
00:14:01,740 --> 00:14:03,870
frame and then we can schedule a write

289
00:14:03,870 --> 00:14:07,950
for the next animation frame so that you

290
00:14:07,950 --> 00:14:10,290
only recalculate the style one time in

291
00:14:10,290 --> 00:14:12,630
this example and this is going to be a

292
00:14:12,630 --> 00:14:16,770
lot less expensive for the CPU so we

293
00:14:16,770 --> 00:14:19,230
have a max of one style recalculation

294
00:14:19,230 --> 00:14:21,390
for spring and this is the main thing

295
00:14:21,390 --> 00:14:23,490
that makes amp pages fast when you

296
00:14:23,490 --> 00:14:25,560
interact with them this is really the

297
00:14:25,560 --> 00:14:27,360
only thing you can afford if you want to

298
00:14:27,360 --> 00:14:30,420
get to 60 frames per second and we only

299
00:14:30,420 --> 00:14:33,839
do two style recalculations for a page

300
00:14:33,839 --> 00:14:35,700
load which is very low compared to other

301
00:14:35,700 --> 00:14:41,910
pages the next thing is that we want to

302
00:14:41,910 --> 00:14:45,029
do GPU optimizable animations only in

303
00:14:45,029 --> 00:14:49,080
our in our amp components so animations

304
00:14:49,080 --> 00:14:54,060
are very expensive for this CPU and we

305
00:14:54,060 --> 00:14:58,650
want the CPU to the handover the work to

306
00:14:58,650 --> 00:15:00,360
delegate the work over to the GPU

307
00:15:00,360 --> 00:15:03,480
because the GPU can do animations really

308
00:15:03,480 --> 00:15:08,730
quickly and really cheaply and so in our

309
00:15:08,730 --> 00:15:11,790
amp components we only allow animations

310
00:15:11,790 --> 00:15:14,459
that the GPU can perform in this case

311
00:15:14,459 --> 00:15:18,420
it's transform and opacity so if you

312
00:15:18,420 --> 00:15:21,480
wanted to animate the width the GPU is

313
00:15:21,480 --> 00:15:24,060
not going to know how to do it and it's

314
00:15:24,060 --> 00:15:26,070
going to say CPU you go ahead and do

315
00:15:26,070 --> 00:15:29,040
this so we don't allow width or height

316
00:15:29,040 --> 00:15:29,939
animation

317
00:15:29,939 --> 00:15:32,159
but we do allow transform and opacity

318
00:15:32,159 --> 00:15:35,039
because the GPU knows how to do this and

319
00:15:35,039 --> 00:15:38,579
it can do it very cheaply so now we've

320
00:15:38,579 --> 00:15:41,549
gotten rid of the frozenness and janky

321
00:15:41,549 --> 00:15:45,029
nice but I want to take a moment so

322
00:15:45,029 --> 00:15:47,099
everything I talked about now any

323
00:15:47,099 --> 00:15:50,159
developer can do you can apply in all of

324
00:15:50,159 --> 00:15:54,659
your development processes but because

325
00:15:54,659 --> 00:15:57,869
we're talking about amp amp also uses a

326
00:15:57,869 --> 00:15:59,579
cache so if you wanted to build a system

327
00:15:59,579 --> 00:16:01,709
it's a little bit more complicated but

328
00:16:01,709 --> 00:16:05,220
you can optimize with cache and what we

329
00:16:05,220 --> 00:16:09,779
do is first of all the cache we have

330
00:16:09,779 --> 00:16:12,929
servers that are located in lots of

331
00:16:12,929 --> 00:16:14,729
places all over the world so they're

332
00:16:14,729 --> 00:16:17,939
physically located next to you and that

333
00:16:17,939 --> 00:16:19,769
means that delivery of the content is

334
00:16:19,769 --> 00:16:21,269
going to be a lot faster when these

335
00:16:21,269 --> 00:16:23,249
servers are located next to and these

336
00:16:23,249 --> 00:16:25,139
servers they could be Google servers or

337
00:16:25,139 --> 00:16:26,819
they could be CloudFlare servers it

338
00:16:26,819 --> 00:16:29,759
doesn't matter but that's going to give

339
00:16:29,759 --> 00:16:33,359
you that real boost of speed is to have

340
00:16:33,359 --> 00:16:35,459
this cache and some of the optimizations

341
00:16:35,459 --> 00:16:38,519
that we do on the cache is the first is

342
00:16:38,519 --> 00:16:41,669
efficient pre-rendering the browser is

343
00:16:41,669 --> 00:16:44,429
used to have this thing called a rel

344
00:16:44,429 --> 00:16:47,249
equals pre-render where you could tell

345
00:16:47,249 --> 00:16:49,139
their browser you could have a link on

346
00:16:49,139 --> 00:16:50,399
your page and you could tell the browser

347
00:16:50,399 --> 00:16:55,439
hey download pre-render this link so the

348
00:16:55,439 --> 00:16:57,299
browser would download all the contents

349
00:16:57,299 --> 00:17:00,899
of the page and and then when the user

350
00:17:00,899 --> 00:17:02,849
would click on the link the page would

351
00:17:02,849 --> 00:17:05,759
load instantaneously but the problem

352
00:17:05,759 --> 00:17:08,039
with this was that it downloads the

353
00:17:08,039 --> 00:17:11,159
entire contents of the page all of the

354
00:17:11,159 --> 00:17:13,730
images all of the ads all of the

355
00:17:13,730 --> 00:17:16,169
analytics so the third party JavaScript

356
00:17:16,169 --> 00:17:18,539
and it would R execute arbitrary

357
00:17:18,539 --> 00:17:20,579
JavaScript in the background and that's

358
00:17:20,579 --> 00:17:25,110
very heavy for the CPU so instead what

359
00:17:25,110 --> 00:17:29,629
we did is we pre render only the first

360
00:17:29,629 --> 00:17:32,970
viewport and we don't execute any

361
00:17:32,970 --> 00:17:35,399
third-party JavaScript so none of the

362
00:17:35,399 --> 00:17:38,519
analytics and all that stuff and what

363
00:17:38,519 --> 00:17:40,379
this does is it makes pre-rendering

364
00:17:40,379 --> 00:17:44,120
extremely cheap and non expensive

365
00:17:44,120 --> 00:17:46,920
the next thing we do is resource

366
00:17:46,920 --> 00:17:48,900
compression and by resource I mean all

367
00:17:48,900 --> 00:17:51,420
the things all the files that the users

368
00:17:51,420 --> 00:17:53,720
are going to download on to their page

369
00:17:53,720 --> 00:17:56,940
and some of these files are JavaScript

370
00:17:56,940 --> 00:18:00,320
files and so we use a closure compiler

371
00:18:00,320 --> 00:18:04,020
to compress our code and here's a chunk

372
00:18:04,020 --> 00:18:05,580
of code on the list and if you run it

373
00:18:05,580 --> 00:18:07,440
through the closure compiler it's going

374
00:18:07,440 --> 00:18:09,870
to compress it to the chunk on the right

375
00:18:09,870 --> 00:18:13,680
and on top of that oh it also does tree

376
00:18:13,680 --> 00:18:16,260
shaking so it gets rid of dead code and

377
00:18:16,260 --> 00:18:17,820
methods that aren't being used and so on

378
00:18:17,820 --> 00:18:22,320
and we have our own optimizations that

379
00:18:22,320 --> 00:18:24,660
we do on top of the closure compiler so

380
00:18:24,660 --> 00:18:26,940
we get rid of developer codes such as

381
00:18:26,940 --> 00:18:29,310
blogs that you only use for development

382
00:18:29,310 --> 00:18:31,590
but your users they shouldn't have to

383
00:18:31,590 --> 00:18:33,720
download those lungs because they're not

384
00:18:33,720 --> 00:18:35,850
going to be useful so we get rid of

385
00:18:35,850 --> 00:18:40,380
those as well on our main page on the

386
00:18:40,380 --> 00:18:42,960
HTML we use a compression algorithm

387
00:18:42,960 --> 00:18:45,900
called brought Lee and that saved us 8%

388
00:18:45,900 --> 00:18:48,360
over gzip which is another compression

389
00:18:48,360 --> 00:18:51,630
algorithm and then finally I want to

390
00:18:51,630 --> 00:18:53,850
talk about images because images make up

391
00:18:53,850 --> 00:18:57,420
64 percent of the bytes of an average

392
00:18:57,420 --> 00:19:00,300
mobile page that's huge so if you can

393
00:19:00,300 --> 00:19:03,540
effect images you can have a huge impact

394
00:19:03,540 --> 00:19:07,980
on the size of the page so we compress

395
00:19:07,980 --> 00:19:10,320
images the first thing that we do is we

396
00:19:10,320 --> 00:19:12,870
remove invisible data this is metadata

397
00:19:12,870 --> 00:19:14,790
that your users don't see such as

398
00:19:14,790 --> 00:19:19,530
geolocation and so on and we also we

399
00:19:19,530 --> 00:19:21,540
reduce the quality of the image and we

400
00:19:21,540 --> 00:19:24,690
try to have one color sample for every

401
00:19:24,690 --> 00:19:26,940
four pixels and this reduce the image

402
00:19:26,940 --> 00:19:30,990
size by 40 bytes on top of that in for

403
00:19:30,990 --> 00:19:33,200
browsers that support WebP II which is

404
00:19:33,200 --> 00:19:37,160
another image format such as JPEG we

405
00:19:37,160 --> 00:19:39,720
convert the images to WebP II and that

406
00:19:39,720 --> 00:19:42,960
reduces the images further and then for

407
00:19:42,960 --> 00:19:44,670
Chrome users that have data saver

408
00:19:44,670 --> 00:19:47,220
enabled or places in the world where

409
00:19:47,220 --> 00:19:50,460
data is extremely slow we lower the

410
00:19:50,460 --> 00:19:53,790
quality of the images even further to

411
00:19:53,790 --> 00:19:55,860
save more bytes so now when we apply

412
00:19:55,860 --> 00:19:57,070
these

413
00:19:57,070 --> 00:20:00,340
three things on an image let's look at

414
00:20:00,340 --> 00:20:03,009
the before and after so before we have

415
00:20:03,009 --> 00:20:06,669
two hundred and forty thousand bytes for

416
00:20:06,669 --> 00:20:09,779
the left image and the right image has

417
00:20:09,779 --> 00:20:13,210
25 thousand bytes that's about a 90%

418
00:20:13,210 --> 00:20:16,269
reduction in bytes and keep in mind

419
00:20:16,269 --> 00:20:20,559
images make up 65% of your page so

420
00:20:20,559 --> 00:20:24,610
that's pretty big and you might look at

421
00:20:24,610 --> 00:20:26,080
it and say you know what I don't like

422
00:20:26,080 --> 00:20:29,200
the image on the right it's not as good

423
00:20:29,200 --> 00:20:32,110
I could tell the difference but I want

424
00:20:32,110 --> 00:20:34,330
to tell you that actually I switched

425
00:20:34,330 --> 00:20:37,509
them so the image on the right is the

426
00:20:37,509 --> 00:20:39,820
before the image on the left is actually

427
00:20:39,820 --> 00:20:46,690
the after so now to summarize everything

428
00:20:46,690 --> 00:20:49,000
if you haven't paid attention or if you

429
00:20:49,000 --> 00:20:53,230
just walked in to make webpages faster

430
00:20:53,230 --> 00:20:56,320
we want to unblock the render by making

431
00:20:56,320 --> 00:20:57,940
sure that scripts are asynchronous so

432
00:20:57,940 --> 00:20:59,740
you don't have to wait for them you want

433
00:20:59,740 --> 00:21:02,019
to bring your CSS with you you want to

434
00:21:02,019 --> 00:21:04,269
inline it and you want to limit it to 50

435
00:21:04,269 --> 00:21:07,480
kilobytes and third javascript is

436
00:21:07,480 --> 00:21:10,120
third-party javascript is okay but you

437
00:21:10,120 --> 00:21:11,440
want to put them in iframes

438
00:21:11,440 --> 00:21:12,730
so they don't affect the rest of your

439
00:21:12,730 --> 00:21:14,590
page and you want to prioritize your

440
00:21:14,590 --> 00:21:16,419
resources you want to load the things

441
00:21:16,419 --> 00:21:20,110
that the user is going to see first also

442
00:21:20,110 --> 00:21:23,230
we use opacity magic to make sure that

443
00:21:23,230 --> 00:21:24,639
this doesn't happen and we're going to

444
00:21:24,639 --> 00:21:27,070
do server-side rendering in the future

445
00:21:27,070 --> 00:21:30,700
so that there isn't even a tiny bit of a

446
00:21:30,700 --> 00:21:34,240
delay and you want to stop shipping by

447
00:21:34,240 --> 00:21:37,899
having placeholders and static resource

448
00:21:37,899 --> 00:21:40,029
sizing so that your users don't suffer

449
00:21:40,029 --> 00:21:42,700
from this atrocity that I'd usually

450
00:21:42,700 --> 00:21:46,899
commit and then you want to unfreeze

451
00:21:46,899 --> 00:21:50,860
your page by giving your CPU space to

452
00:21:50,860 --> 00:21:53,049
breathe so less cell recalculation and

453
00:21:53,049 --> 00:21:57,070
let the GPU do the animations and then

454
00:21:57,070 --> 00:22:00,490
if you can do cache optimizations and do

455
00:22:00,490 --> 00:22:02,409
cheap pre-rendering and compress your

456
00:22:02,409 --> 00:22:06,129
page so let's see how we're doing 19

457
00:22:06,129 --> 00:22:08,019
seconds for the average mobile page to

458
00:22:08,019 --> 00:22:10,509
load and less than one second

459
00:22:10,509 --> 00:22:14,499
for Ambon search and what does this mean

460
00:22:14,499 --> 00:22:18,609
well it translates to 10x less data we

461
00:22:18,609 --> 00:22:21,909
have higher CTR publishers are saying

462
00:22:21,909 --> 00:22:23,979
higher CTR and higher ad viewer ability

463
00:22:23,979 --> 00:22:27,729
and today there are about 2 billion amp

464
00:22:27,729 --> 00:22:31,959
documents from about 900,000 different

465
00:22:31,959 --> 00:22:37,059
domains so hopefully if you apply some

466
00:22:37,059 --> 00:22:39,070
of these things you can see similar

467
00:22:39,070 --> 00:22:42,399
benefits as well and if you don't want

468
00:22:42,399 --> 00:22:43,869
to do all of that work you're welcome to

469
00:22:43,869 --> 00:22:47,109
use em now I know this is Jay's cons and

470
00:22:47,109 --> 00:22:50,139
you all love JavaScript so you might not

471
00:22:50,139 --> 00:22:52,719
want to use em because it doesn't

472
00:22:52,719 --> 00:22:54,879
involve writing a lot of JavaScript so

473
00:22:54,879 --> 00:22:56,799
I'm here to tell you that you're welcome

474
00:22:56,799 --> 00:22:59,739
to write progressive web app and use em

475
00:22:59,739 --> 00:23:01,569
for content delivery and that way you

476
00:23:01,569 --> 00:23:03,789
can write lots of fancy JavaScript and

477
00:23:03,789 --> 00:23:05,829
if you're passionate about what we do

478
00:23:05,829 --> 00:23:07,839
and you want to help out amp is an open

479
00:23:07,839 --> 00:23:09,309
source project and we welcome

480
00:23:09,309 --> 00:23:10,809
contributors there you're welcome

481
00:23:10,809 --> 00:23:13,899
to work on the project with us and

482
00:23:13,899 --> 00:23:17,379
create m components to learn more about

483
00:23:17,379 --> 00:23:20,079
the m project please go to EMTALA org

484
00:23:20,079 --> 00:23:22,449
visit our youtube page if you want to

485
00:23:22,449 --> 00:23:25,239
contribute bitly slash health amp and

486
00:23:25,239 --> 00:23:27,489
right after this we will be at the am

487
00:23:27,489 --> 00:23:29,039
booth if you'd like to meet our team

488
00:23:29,039 --> 00:23:30,840
thank you

489
00:23:30,840 --> 00:23:32,370
[Applause]

490
00:23:32,370 --> 00:23:33,740
[Music]

