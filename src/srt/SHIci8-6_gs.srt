1
00:00:07,169 --> 00:00:10,990
>> I can't believe I'm right here right now.

2
00:00:10,990 --> 00:00:13,070
Give it up for the conference organisers.

3
00:00:13,070 --> 00:00:15,469
This is amazing.

4
00:00:15,469 --> 00:00:17,400
[Applause].

5
00:00:17,400 --> 00:00:21,240
So, hi.

6
00:00:21,240 --> 00:00:25,050
My name is cat Kat.

7
00:00:25,050 --> 00:00:32,369
I'm the lead maintainer architect for the
npm CLI.

8
00:00:32,369 --> 00:00:37,730
I'm not here just to talk about the npm CLI,
I'm here to talk about an experiment I've

9
00:00:37,730 --> 00:00:42,719
been working on called "tink" which I'm hoping
will set a precedent for JavaScript package

10
00:00:42,719 --> 00:00:46,389
managers in the future.

11
00:00:46,389 --> 00:00:52,149
I want to talk about the why, more specifically,
about what npm needs to do in order to get

12
00:00:52,149 --> 00:00:57,810
JavaScript apps to work, and there is really
one big end goal we have had for most of the

13
00:00:57,810 --> 00:00:58,810
npm's lifetime.

14
00:00:58,810 --> 00:01:03,760
Put a bunch of stuff in your local node modules
as fast as possible and everything consumed

15
00:01:03,760 --> 00:01:04,760
from there.

16
00:01:04,760 --> 00:01:07,369
Make it as fast as you can.

17
00:01:07,369 --> 00:01:11,580
That seems pretty straightforward on its own,
but what does it really take?

18
00:01:11,580 --> 00:01:16,560
So for context, I want talk about the overall
problem.

19
00:01:16,560 --> 00:01:22,310
What steps we've taken along the way to mitigate
the issues we came up with, that came up.

20
00:01:22,310 --> 00:01:26,690
Now, the process I'm going to describe is
mostly shared between all current package

21
00:01:26,690 --> 00:01:28,140
managers.

22
00:01:28,140 --> 00:01:33,440
They all do different optimisations and clever
things around each step, but they all kind

23
00:01:33,440 --> 00:01:40,159
of have to do this at some point or another
to be compatible with Node.

24
00:01:40,159 --> 00:01:41,770
Let's take a look.

25
00:01:41,770 --> 00:01:46,320
This is high-level overview of what a JavaScript
installer needs to do.

26
00:01:46,320 --> 00:01:52,259
We all do this to some extent or another but
ultimate ly the same.

27
00:01:52,259 --> 00:01:55,979
First up, it's this one.

28
00:01:55,979 --> 00:01:58,240
Reading local dependencies if you have any.

29
00:01:58,240 --> 00:02:04,979
You will probably in the this one these days
when you have a no auth installed, when you

30
00:02:04,979 --> 00:02:10,470
ran it, and npm is still taking five seconds,
and you don't know why.

31
00:02:10,470 --> 00:02:14,790
It usually isn't more than a couple of seconds
but it's still pretty noticeable.

32
00:02:14,790 --> 00:02:20,690
Yarn has an interesting optimisation around
this where they slap a metadata file based

33
00:02:20,690 --> 00:02:30,599
on Node modules, and they match, they say
fuck it and trust what is in the modules.

34
00:02:30,599 --> 00:02:35,360
npm has been a bit stub Bosch here since we've
so far considered that no up case is a fairly

35
00:02:35,360 --> 00:02:41,409
rare thing, and if you run npm will be able
to autofix any issues with your tree which

36
00:02:41,409 --> 00:02:43,709
we think is important enough to warrant the
delay.

37
00:02:43,709 --> 00:02:48,780
I don't know, we might go ahead and do what
Yarn does at some point anyway because people

38
00:02:48,780 --> 00:02:54,019
want that sweet, sweet speed-up, but in the
end, this step tends to be noticeable, but

39
00:02:54,019 --> 00:02:56,590
it's not really the biggest delay.

40
00:02:56,590 --> 00:02:58,830
But this next one kind of was for a while.

41
00:02:58,830 --> 00:03:03,580
It turns out making literally thousands of
requests just to get metadata from the registry

42
00:03:03,580 --> 00:03:12,340
in order to calculate our tree is fairly network-intensive
operation, and in times, this was definitely

43
00:03:12,340 --> 00:03:13,620
a time hog.

44
00:03:13,620 --> 00:03:15,450
So, like what happened?

45
00:03:15,450 --> 00:03:18,250
Well, basically, log files happened.

46
00:03:18,250 --> 00:03:24,140
Log files are supervene for developers, sure,
but they're just a single file cache - oh,

47
00:03:24,140 --> 00:03:27,569
my God, what it is trying to update right
now!

48
00:03:27,569 --> 00:03:29,620
Excuse me!

49
00:03:29,620 --> 00:03:36,290
They're just a single-file cache of the tree
calculations step of your package managers.

50
00:03:36,290 --> 00:03:39,140
And that's why we love that stuff so much.

51
00:03:39,140 --> 00:03:42,980
Once you've built your project up, none of
your team-mates really need to bother doing

52
00:03:42,980 --> 00:03:47,159
this stuff until they add or remove any dependency.

53
00:03:47,159 --> 00:03:50,959
This is also why I'm pretty adamant that you
should use log files for libraries.

54
00:03:50,959 --> 00:03:59,560
They just like make life so much easier.

55
00:03:59,560 --> 00:04:03,200
This next one has never really been a huge
bottleneck on its own, but I still want to

56
00:04:03,200 --> 00:04:09,280
next it, because we do put some effort into
keeping the stuff being fast enough.

57
00:04:09,280 --> 00:04:11,269
I want you to know this stuff happens to exist.

58
00:04:11,269 --> 00:04:17,090
Long story short, this is what figures out
what existing dependencies need to be removed,

59
00:04:17,090 --> 00:04:26,080
added, copied, whatever, since npm at three,
we do calculation to flatten that tree.

60
00:04:26,080 --> 00:04:30,230
How many of you used npm 3 when it first came
out?

61
00:04:30,230 --> 00:04:32,110
It was not the fastest thing on earth.

62
00:04:32,110 --> 00:04:34,500
It's a lot faster now.

63
00:04:34,500 --> 00:04:36,120
Moving on.

64
00:04:36,120 --> 00:04:38,040
This one here.

65
00:04:38,040 --> 00:04:42,940
This one is by far the heaviest and slowest
of all the install steps, mainly because it's

66
00:04:42,940 --> 00:04:45,890
the heaviest on pretty much all relevant resources.

67
00:04:45,890 --> 00:04:49,670
Let's dive a little deeper into this one.

68
00:04:49,670 --> 00:04:53,120
In the end, we have hundreds of megabytes
that need to be transferred over the network,

69
00:04:53,120 --> 00:04:59,660
and once we have those, we have to spend a
bunch of CPU cycles parsing and un zipping

70
00:04:59,660 --> 00:05:09,170
the tar balls, and we do tons of heavy disk
I/O.

71
00:05:09,170 --> 00:05:13,750
All of the three usual suspects are bottlenecks
here in one way or the other, with and it

72
00:05:13,750 --> 00:05:19,260
depends on your usage pattern at some point
in time.

73
00:05:19,260 --> 00:05:24,010
Long story short, this is where the bad and
slow stuff happens, and this has been a huge

74
00:05:24,010 --> 00:05:30,540
target of optimisation for pretty much all
package managers.

75
00:05:30,540 --> 00:05:33,480
I assume many other package managers too.

76
00:05:33,480 --> 00:05:35,910
So, what can we do about this?

77
00:05:35,910 --> 00:05:40,330
Well, for one, we can do a bunch of cache
ing of - different caching strategies have

78
00:05:40,330 --> 00:05:42,220
different trade-offs.

79
00:05:42,220 --> 00:05:50,400
npm takes innings it means we have to take
the hit of parsing those tar balls every time.

80
00:05:50,400 --> 00:06:01,500
Yarn stores them post-distraction which loses
them -

81
00:06:01,500 --> 00:06:03,590
the npm here is really interesting.

82
00:06:03,590 --> 00:06:11,250
Because, they have an extracted cache, like
Yarn, but instead of copying the files they

83
00:06:11,250 --> 00:06:14,030
hard-link them into their final destinations.

84
00:06:14,030 --> 00:06:20,550
This kind of surprisingly isn't really that
much faster than copying on SSDs, and stuff,

85
00:06:20,550 --> 00:06:25,410
but it's definitely way more space-efficient,
because you pay for each package exactly ones

86
00:06:25,410 --> 00:06:26,410
across your system.

87
00:06:26,410 --> 00:06:28,770
That's pretty cool.

88
00:06:28,770 --> 00:06:32,381
And because I can't seem to stop talking about
Yarn today, they have a thing called PMP that

89
00:06:32,381 --> 00:06:35,030
partially addresses problems in this step.

90
00:06:35,030 --> 00:06:42,740
The downside is that tools need to - it costs
it can cause incompatibility.

91
00:06:42,740 --> 00:06:49,250
PMP is interesting and worth checking out.

92
00:06:49,250 --> 00:06:53,870
You can have MaÃ«l talk about it at the next
talk.

93
00:06:53,870 --> 00:06:55,110
He's great.

94
00:06:55,110 --> 00:06:58,000
There is a lot of work making this a bit better.

95
00:06:58,000 --> 00:07:00,510
No surprise, it's the most expensive bit.

96
00:07:00,510 --> 00:07:06,630
I will get back to the soon, and what else
we can do about it, but for now, let's wrap

97
00:07:06,630 --> 00:07:08,310
this walk-through.

98
00:07:08,310 --> 00:07:13,620
We do all the downloading, and extracting,
and then we have to scan through the packages

99
00:07:13,620 --> 00:07:16,380
we installed and scrutiny run scripts.

100
00:07:16,380 --> 00:07:21,740
This isn't usually the biggest step since
there's usually the run scripts that run,

101
00:07:21,740 --> 00:07:23,280
and most aren't that slow.

102
00:07:23,280 --> 00:07:28,960
But, this still becomes noticeable on some
unfortunate projects.

103
00:07:28,960 --> 00:07:33,370
npm doesn't do this, but some package managers
actually parallelise this stuff at great risk

104
00:07:33,370 --> 00:07:39,560
and complexity, and it does make things a
lot faster if you have heavy stuff to build,

105
00:07:39,560 --> 00:07:43,190
like ... which takes forever.

106
00:07:43,190 --> 00:07:51,150
I think we're better off with a solution with
something like Node Preget or have prebuilt

107
00:07:51,150 --> 00:07:56,190
binary somewhere on the registry, but that's
what we've got right now.

108
00:07:56,190 --> 00:08:01,930
What you should take away here, though, is
that in the end, node modules is massive.

109
00:08:01,930 --> 00:08:04,120
And also, where dreams go to die.

110
00:08:04,120 --> 00:08:10,190
Now, the fact is that node modules, while
the greatest fraction has caused everyone

111
00:08:10,190 --> 00:08:13,820
massive headaches in usability, time wasted.

112
00:08:13,820 --> 00:08:21,390
There's a lot to agree with on this front
with Ryan's talk about node prerets here at

113
00:08:21,390 --> 00:08:22,390
this conference.

114
00:08:22,390 --> 00:08:23,750
What are you doing, microphone!

115
00:08:23,750 --> 00:08:29,210
Please calm down!

116
00:08:29,210 --> 00:08:31,150
But what do we actually do about it?

117
00:08:31,150 --> 00:08:38,310
It's easy to complain about, and talk about
how bad an idea it is, but I still think that

118
00:08:38,310 --> 00:08:40,219
good outweighs the bad.

119
00:08:40,219 --> 00:08:42,779
Isolated dependencies are really good.

120
00:08:42,779 --> 00:08:46,820
Having each individual project be able to
manage dependencies is fantastic.

121
00:08:46,820 --> 00:08:49,250
Being safe from dependency hell is really
good.

122
00:08:49,250 --> 00:08:51,690
The fact that we automatically nest things.

123
00:08:51,690 --> 00:08:53,240
That's great.

124
00:08:53,240 --> 00:08:58,860
And, you know, we have kind of 900,000 packages
out there that some of you might think that

125
00:08:58,860 --> 00:09:02,069
some of them are crappy, but most are pretty
useful.

126
00:09:02,069 --> 00:09:09,870
At least a big enough percentage is useful
that we want to keep that and have that compatibility.

127
00:09:09,870 --> 00:09:13,890
Package manager developers as well as the
largest community to do what we can to make

128
00:09:13,890 --> 00:09:15,040
the most of this, right?

129
00:09:15,040 --> 00:09:20,790
I of course have my own ideas about this,
and I kind of hinted what that was already.

130
00:09:20,790 --> 00:09:25,319
What I think we should do at this point is
move package management itself directly into

131
00:09:25,319 --> 00:09:29,050
the run time instead of an external utility.

132
00:09:29,050 --> 00:09:33,899
That is what tink is really about in the end,
but what does this mean, and what can we actually

133
00:09:33,899 --> 00:09:36,389
do it once we've done that?

134
00:09:36,389 --> 00:09:38,220
So, this is what I'm talking about.

135
00:09:38,220 --> 00:09:43,050
You literally stop invoking Node yourself
and you use tink instead.

136
00:09:43,050 --> 00:09:49,370
It was a subcommand called shell that wraps
Node and adds patches to FT to make it work

137
00:09:49,370 --> 00:09:50,569
its magic.

138
00:09:50,569 --> 00:09:51,970
What magic?

139
00:09:51,970 --> 00:09:54,899
Well, virtual Node modules.

140
00:09:54,899 --> 00:09:59,140
The big idea is that if we control the run
time, we control what happens when someone

141
00:09:59,140 --> 00:10:01,769
tries to read from Node modules.

142
00:10:01,769 --> 00:10:07,829
And, once we can to that at the run time level,
all sorts of things start happening.

143
00:10:07,829 --> 00:10:11,170
It means that we can get rid of all these
copies of Node modules without changing the

144
00:10:11,170 --> 00:10:15,180
module loader, or the expected APIs from packages.

145
00:10:15,180 --> 00:10:19,140
As far as any packages are concerned, they're
accessing the file system the same way they

146
00:10:19,140 --> 00:10:27,209
usually do, and this means it's compatible
with little details like __name, reading configuration

147
00:10:27,209 --> 00:10:28,440
files, and all of that.

148
00:10:28,440 --> 00:10:30,269
It works out of the box.

149
00:10:30,269 --> 00:10:34,509
Even Spon works.

150
00:10:34,509 --> 00:10:38,580
But if we're not in Node modules, where are
the files?

151
00:10:38,580 --> 00:10:44,310
Well, instead of copying them, we keep them
all in a single global cache like npm does,

152
00:10:44,310 --> 00:10:48,149
except we deduplicate every single file at
the hash level.

153
00:10:48,149 --> 00:10:54,209
That means if you have five versions of the
same package, you only ever have new copies

154
00:10:54,209 --> 00:10:57,459
for the files that actually changed.

155
00:10:57,459 --> 00:11:02,720
Storing by hash can make reads very, very
fast for us.

156
00:11:02,720 --> 00:11:04,050
We can do more.

157
00:11:04,050 --> 00:11:09,199
Since we control the run time, let's automatically
fudge dependencies for you, as you need them.

158
00:11:09,199 --> 00:11:13,420
Why don't we skip downloading dependencies
you're not using in your current work.

159
00:11:13,420 --> 00:11:19,389
Tink is able to block on reads that fail from
the local cache inline and fetch any packages

160
00:11:19,389 --> 00:11:25,569
you haven't downloaded yet.

161
00:11:25,569 --> 00:11:30,529
Before you say anything, there's a dash-dash
production flag to make sure we're not doing

162
00:11:30,529 --> 00:11:33,870
random requests in dependencies in production,
et cetera.

163
00:11:33,870 --> 00:11:37,680
Of course, this means you don't do npm install
any more.

164
00:11:37,680 --> 00:11:42,500
You don't do npm install and wait for things
ever again.

165
00:11:42,500 --> 00:11:46,860
Go for it!

166
00:11:46,860 --> 00:11:49,760
[Applause].

167
00:11:49,760 --> 00:11:54,089
All you actually do is tink add, tink remove
to add or remove individual dependencies and

168
00:11:54,089 --> 00:11:56,950
you don't have an install step any more.

169
00:11:56,950 --> 00:12:00,720
It gets done automatically by tink as needed.

170
00:12:00,720 --> 00:12:05,160
It means if your co-worker pushed something
and you pulled it, you just run it, and it

171
00:12:05,160 --> 00:12:08,260
just kind of works, and you don't have to
worry about it.

172
00:12:08,260 --> 00:12:12,040
There's no conflicts to worry about, or new
installs.

173
00:12:12,040 --> 00:12:17,940
Now, you might be concerned about this, by
the way, patching FS self surrounds risky,

174
00:12:17,940 --> 00:12:18,940
right?

175
00:12:18,940 --> 00:12:20,040
But I'm not worried.

176
00:12:20,040 --> 00:12:25,029
This is literally the same approach that Electron
has taken and they're successful at it.

177
00:12:25,029 --> 00:12:29,190
We can also learn from their journey, so I
believe this will work out in the end.

178
00:12:29,190 --> 00:12:35,120
In fact, some of the code to do this in tink
comes directly from electron, and I modified

179
00:12:35,120 --> 00:12:37,079
it further.

180
00:12:37,079 --> 00:12:41,939
But wait, there's more.

181
00:12:41,939 --> 00:12:48,309
Now that we have run time control, tink has
TypeScript, ESM, Wasm and JX support out of

182
00:12:48,309 --> 00:12:49,309
the box!

183
00:12:49,309 --> 00:12:52,470
Yes, 63 per cent!

184
00:12:52,470 --> 00:12:54,329
Are you kidding me!

185
00:12:54,329 --> 00:12:56,880
How did you all multiply?

186
00:12:56,880 --> 00:12:59,860
40 per cent last year.

187
00:12:59,860 --> 00:13:05,370
It also runs a very cheap check sum on every
single file it loads from the global cache,

188
00:13:05,370 --> 00:13:09,459
so you know that, what you're getting out
of the cache, what you're getting into your

189
00:13:09,459 --> 00:13:14,449
node is passing a checksum for every single
load.

190
00:13:14,449 --> 00:13:15,790
Which is fantastic.

191
00:13:15,790 --> 00:13:17,160
It's super secure.

192
00:13:17,160 --> 00:13:21,990
If it turns out you ran the tink show if there
is a missing dependency, and if a single file

193
00:13:21,990 --> 00:13:26,579
was corrupted in your cache, even, tink will
just download and install it for you and fix

194
00:13:26,579 --> 00:13:29,649
your dependencies automatically.

195
00:13:29,649 --> 00:13:33,380
You can turn this behaviour off in production,
but when you're developing, it's super handy.

196
00:13:33,380 --> 00:13:38,540
Finally, my favourite part: all of this comes
out of the box without the need to configure

197
00:13:38,540 --> 00:13:42,009
or install anything besides tink itself.

198
00:13:42,009 --> 00:13:44,000
And I want to emphasise this.

199
00:13:44,000 --> 00:13:47,959
All of this comes without the need for any
sort of loader.

200
00:13:47,959 --> 00:13:52,880
Webpack, it works.

201
00:13:52,880 --> 00:13:56,339
All of this without any kind of loader or
extra flag, or anything.

202
00:13:56,339 --> 00:14:00,759
You install and run things with tink, and
that's all you need to do.

203
00:14:00,759 --> 00:14:06,329
Now, let's do a brief tour of the tool itself
to give you an idea what I'm actually talking

204
00:14:06,329 --> 00:14:09,019
about.

205
00:14:09,019 --> 00:14:12,670
This year is the - this is the core feature
of the entire tool, just about everything

206
00:14:12,670 --> 00:14:16,740
I've talked about so far is available through
this one command.

207
00:14:16,740 --> 00:14:19,829
You don't need to do npm install any more.

208
00:14:19,829 --> 00:14:27,089
All you need to do is run tink shell.

209
00:14:27,089 --> 00:14:32,459
This works in the interactive shell and it
blocks and awaits for things, and you fetch

210
00:14:32,459 --> 00:14:35,470
the dependencies, and it kind of goes.

211
00:14:35,470 --> 00:14:39,709
I know I talked about performance a lot before,
but a really strong guiding light for me when

212
00:14:39,709 --> 00:14:45,230
working on npm and tink has been the idea
of simplifying work throws.

213
00:14:45,230 --> 00:14:51,499
I want you to have to install and remember
as little as possible in order to be productive.

214
00:14:51,499 --> 00:14:56,180
I know that's a big problem in JavaScript
these days where you install, feels like you

215
00:14:56,180 --> 00:14:59,440
install half of npm just to get started.

216
00:14:59,440 --> 00:15:03,899
The ability just to start running and having
the run time take care of this is super important

217
00:15:03,899 --> 00:15:06,089
for me in order to achieve the work flow.

218
00:15:06,089 --> 00:15:10,300
I think y' all should have in your day-to-day.

219
00:15:10,300 --> 00:15:14,519
I want the package manager to disappear and
not be something that you have to think about.

220
00:15:14,519 --> 00:15:17,879
That's very important.

221
00:15:17,879 --> 00:15:20,589
How many of you are familiar with NPX here?

222
00:15:20,589 --> 00:15:22,980
Show of hands.

223
00:15:22,980 --> 00:15:23,980
Go!

224
00:15:23,980 --> 00:15:26,670
Tink accepts NPX.

225
00:15:26,670 --> 00:15:35,540
For the rest of you who don't know NPX is,
it's a tool that is bundled within npm itself,

226
00:15:35,540 --> 00:15:41,880
and one of the things it lets you do is execute
local binaries as well as temporary installations.

227
00:15:41,880 --> 00:15:50,959
For example, if you install Jest as a dependency,
you can use npm Jest without installing it

228
00:15:50,959 --> 00:15:52,040
globally.

229
00:15:52,040 --> 00:15:57,720
You don't need to configure a run script for
it.

230
00:15:57,720 --> 00:16:03,100
Running your local bins through tink exec
means we can apply the same logic to preinstall

231
00:16:03,100 --> 00:16:09,560
anything necessary for your binary that tink
shell does for scripts.

232
00:16:09,560 --> 00:16:14,209
But what if you don't want to slow down your
app with package management stuff?

233
00:16:14,209 --> 00:16:19,079
This command goes ahead and does the cache
warming beforehand and runs on installs, binaries,

234
00:16:19,079 --> 00:16:21,089
and the likes for you.

235
00:16:21,089 --> 00:16:26,069
When you run tink shell, it works as fast
as when you, as if you did an npm install

236
00:16:26,069 --> 00:16:27,850
or something beforehand.

237
00:16:27,850 --> 00:16:33,889
You could argue that it the npm install of
tink, but it's an optional step and night

238
00:16:33,889 --> 00:16:38,610
not speed things up at all, or might make
absolute time pass slower.

239
00:16:38,610 --> 00:16:43,249
On CI, you may as well take the run time hit
of fetching dependencies.

240
00:16:43,249 --> 00:16:47,490
But, what if you want to have an actual node
module anyway?

241
00:16:47,490 --> 00:16:53,790
What if you want to inspect and use other
tools or your editor which doesn't understand

242
00:16:53,790 --> 00:16:55,250
tink yet or whatever?

243
00:16:55,250 --> 00:17:00,309
In this case, there is a command called Unwind
which does a full extraction to node module

244
00:17:00,309 --> 00:17:05,439
so you can use your editor, non-build tools,
pretty much anything in the usual way.

245
00:17:05,439 --> 00:17:10,959
This is an in my install but a slight difference
I will go into next.

246
00:17:10,959 --> 00:17:21,820
What if you want to debug a specific dependency?

247
00:17:21,820 --> 00:17:25,190
That will let you patch thing however you
want, debug it, et cetera.

248
00:17:25,190 --> 00:17:27,580
This is what I want to emphasise.

249
00:17:27,580 --> 00:17:32,950
Because of the way tink works anything inside
node modules itself takes precedence over

250
00:17:32,950 --> 00:17:35,380
the virtual version.

251
00:17:35,380 --> 00:17:42,550
If you use FS .right file tink will create
a physical file for you in node modules which

252
00:17:42,550 --> 00:17:46,530
helps immensely with compatibility.

253
00:17:46,530 --> 00:17:47,930
That will just work.

254
00:17:47,930 --> 00:17:49,590
We will put a file there for you.

255
00:17:49,590 --> 00:17:51,360
Don't worry too much about it.

256
00:17:51,360 --> 00:17:52,360
No.

257
00:17:52,360 --> 00:17:56,250
This command is is also done automatically
at the individual package level for any dependencies

258
00:17:56,250 --> 00:18:04,020
that use install scripts to preserve compatibility
because, you know, it doesn't understand Node

259
00:18:04,020 --> 00:18:08,350
itself but it's very few extractions.

260
00:18:08,350 --> 00:18:13,660
So, since the closest thing to npm install
only builds existing dependencies, how do

261
00:18:13,660 --> 00:18:18,090
we add and build dependencies?

262
00:18:18,090 --> 00:18:20,690
The classic trio, add, remove, and update.

263
00:18:20,690 --> 00:18:21,690
Great, fancy.

264
00:18:21,690 --> 00:18:29,410
They do basically what is says on the tin.

265
00:18:29,410 --> 00:18:34,440
By the way, all three of the these become
fully interactive if you give them no arguments.

266
00:18:34,440 --> 00:18:38,110
That means you'll be able to search interactively
for new dependencies and pick them from a

267
00:18:38,110 --> 00:18:41,240
menu for removing and updating.

268
00:18:41,240 --> 00:18:44,190
Yeah, that's epic.

269
00:18:44,190 --> 00:18:45,190
Yeah!

270
00:18:45,190 --> 00:18:47,140
Interactive menus!

271
00:18:47,140 --> 00:18:48,140
[Applause].

272
00:18:48,140 --> 00:18:50,090
Very exciting!

273
00:18:50,090 --> 00:18:53,890
So, the last command I'm going to introduce
this is tink check utility.

274
00:18:53,890 --> 00:18:58,750
The really cool thing about this is it's a
one-stop shop for all your verification and

275
00:18:58,750 --> 00:18:59,750
testing.

276
00:18:59,750 --> 00:19:04,030
The most noteworthy thing here is that it's
going to run your type check out of the box

277
00:19:04,030 --> 00:19:07,680
without needing to install TypeScript.

278
00:19:07,680 --> 00:19:11,860
If you do install it as a dev dependency,
or use that version of it, it will still run

279
00:19:11,860 --> 00:19:14,400
it for you.

280
00:19:14,400 --> 00:19:20,210
But isn't it nice to be able to go into a
project and type-check the TypeScript out

281
00:19:20,210 --> 00:19:22,640
of the box?

282
00:19:22,640 --> 00:19:23,640
It's really nice.

283
00:19:23,640 --> 00:19:24,640
Lint it.

284
00:19:24,640 --> 00:19:25,640
It's really nice.

285
00:19:25,640 --> 00:19:31,480
At this point some might wonder if I've been
doing too much Rust and cargoes lately.

286
00:19:31,480 --> 00:19:32,480
Rust is great.

287
00:19:32,480 --> 00:19:36,000
Where do he would go from here?

288
00:19:36,000 --> 00:19:41,510
First, we have to wrap up the prototype because
that's all it is right now, a proof-of-consent.

289
00:19:41,510 --> 00:19:43,720
That should happen soon enough.

290
00:19:43,720 --> 00:19:48,650
We want to build an own RFC-based team which
builds more outside contributors than we usually

291
00:19:48,650 --> 00:19:51,080
had.

292
00:19:51,080 --> 00:19:56,010
This will allow us to hash out tink and take
it where it needs to go together.

293
00:19:56,010 --> 00:20:00,780
The RFC process will ensure there's a community-based
approach to growth and development which means

294
00:20:00,780 --> 00:20:03,060
you can make a difference by participating.

295
00:20:03,060 --> 00:20:08,760
Once that is all set, we are turning tink
into npm 8.

296
00:20:08,760 --> 00:20:12,870
That means that in the future, when you upgrade
Node, what used to be called tink will be

297
00:20:12,870 --> 00:20:17,400
available out of the box as npm, just like
current versions of npm are.

298
00:20:17,400 --> 00:20:19,360
You can still use it as you usually do.

299
00:20:19,360 --> 00:20:24,980
If you want to opt into this new work flow,
the tool will be there for you.

300
00:20:24,980 --> 00:20:29,730
It will also integrate with MPX meaning your
NPX commands will run faster.

301
00:20:29,730 --> 00:20:39,690
Once npm 8 is shipped, it is a matter of integrating
it into Node itself, and I look forward to

302
00:20:39,690 --> 00:20:42,320
working with the folks over there to make
this happen.

303
00:20:42,320 --> 00:20:51,970
I know it's a big step to be, like, hacking
FS itself, but I'm sheer we can make it happen.

304
00:20:51,970 --> 00:21:02,300
Anyway, there's one more thing: we are planning
to release at some point in the future a new

305
00:21:02,300 --> 00:21:06,400
pack age fetch in API in the main npm registry.

306
00:21:06,400 --> 00:21:10,620
This is exciting because combined with tink
or something similar, there's a good number

307
00:21:10,620 --> 00:21:14,440
of advantages, and this is where the exciting
stuff is starts happening.

308
00:21:14,440 --> 00:21:17,060
To give you an idea, this is where it should
be great.

309
00:21:17,060 --> 00:21:18,830
The actual API is fairly small.

310
00:21:18,830 --> 00:21:22,809
It's a couple of new end points that allows
us to list files available in the package,

311
00:21:22,809 --> 00:21:28,920
and to fetch those individually by kind of
like unpackage, right?

312
00:21:28,920 --> 00:21:30,770
What do we get from this?

313
00:21:30,770 --> 00:21:36,140
For one, some analysis and estimates that
it could involve 40 per cent reduction in

314
00:21:36,140 --> 00:21:39,150
data transfer.

315
00:21:39,150 --> 00:21:43,610
That means your installs get done way faster.

316
00:21:43,610 --> 00:21:47,520
If you're on a connection slower than fibre,
you will have less to wait for.

317
00:21:47,520 --> 00:21:52,050
You might actually finish your npm install
before the heat Liberals the universe.

318
00:21:52,050 --> 00:21:57,890
It means you will store less stuff on your
system, you don't need to download readmes,

319
00:21:57,890 --> 00:22:00,420
test code, anything like that.

320
00:22:00,420 --> 00:22:03,640
You only download the files you actually use.

321
00:22:03,640 --> 00:22:10,170
This reduction is achieved by having tink
shell fetch files lazily.

322
00:22:10,170 --> 00:22:12,440
And then we cache it really aggressively.

323
00:22:12,440 --> 00:22:15,260
This is one of the most exciting reasons to
do tink for me.

324
00:22:15,260 --> 00:22:18,140
Finally, this one is interesting.

325
00:22:18,140 --> 00:22:20,810
Doing things like this has the potential to
- hello?

326
00:22:20,810 --> 00:22:30,320
Has the potential to completely change how
mono-based repo libraries work.

327
00:22:30,320 --> 00:22:38,310
As you probably already know, these libraries
involve a lot of sub tools, literally 147

328
00:22:38,310 --> 00:22:40,810
packages in the Babel mono repo.

329
00:22:40,810 --> 00:22:47,040
They published this under the scope so folks
don't have to depend on the entire thing.

330
00:22:47,040 --> 00:22:53,060
You don't want the entirety of Babel.

331
00:22:53,060 --> 00:22:55,010
Now, this can cause a lot of problems.

332
00:22:55,010 --> 00:22:59,500
For example, users can have issues keeping
all packages in sync if they depend on each

333
00:22:59,500 --> 00:23:04,510
other in some way been on the publisher side,
this is a really fragile set-up because it

334
00:23:04,510 --> 00:23:10,330
makes hair publisher process to subject to
time-outs and they need to make sure that's

335
00:23:10,330 --> 00:23:13,850
correct start the entire publish process where
it failed.

336
00:23:13,850 --> 00:23:15,730
It just gets nasty.

337
00:23:15,730 --> 00:23:21,090
So, all of these tiny packages have to be
released at the same time, usually with the

338
00:23:21,090 --> 00:23:25,700
tame version, and then you have to deal with
the registry being eventually consistent,

339
00:23:25,700 --> 00:23:30,010
so not all package versions might be available
when your user starts selling them, and there

340
00:23:30,010 --> 00:23:35,680
is chaos everywhere, it's awful, and npm starts
erroring on you.

341
00:23:35,680 --> 00:23:39,340
With tink, this won't be necessary any more.

342
00:23:39,340 --> 00:23:46,890
Low dash and Babel will be able to publish
a single omnibus package.

343
00:23:46,890 --> 00:23:52,990
It only fetches the sub packages you're using
from within the big package.

344
00:23:52,990 --> 00:24:00,430
Everyone wins, and you only have to have one
low dash or babel item in your JSON.

345
00:24:00,430 --> 00:24:01,430
That's that.

346
00:24:01,430 --> 00:24:04,820
Like I said, this isn't in progress yet but
something we're planning on doing because

347
00:24:04,820 --> 00:24:06,940
the advantages are really clear to us all
round.

348
00:24:06,940 --> 00:24:09,890
I hope you enjoy it when it does happen.

349
00:24:09,890 --> 00:24:14,770
In conclusion, tink is exciting, and also,
it's kind of a work in progress.

350
00:24:14,770 --> 00:24:19,080
I'm sorry if you try and download it and it
explodes in your face.

351
00:24:19,080 --> 00:24:22,510
Keep away from flammable things!

352
00:24:22,510 --> 00:24:26,470
It works by having a virtual node modules
that becomes your new run time.

353
00:24:26,470 --> 00:24:31,430
It has TypeScript, ESM, JSX and Wasm support
out of the box.

354
00:24:31,430 --> 00:24:37,590
It will be known as npm 8 when released, and
we will have a new unpackaged registry-style

355
00:24:37,590 --> 00:24:40,380
API in the future.

356
00:24:40,380 --> 00:24:42,470
Go to us.

357
00:24:42,470 --> 00:24:46,110
You can go to development.

358
00:24:46,110 --> 00:24:49,530
You can check out the repo on GitHub.

359
00:24:49,530 --> 00:24:50,720
Thank you.

