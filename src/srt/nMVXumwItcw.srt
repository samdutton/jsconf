1
00:00:04,100 --> 00:00:06,930

okay cool hi everybody Sam breed from

2
00:00:06,930 --> 00:00:09,540
quick left so we've been working on a

3
00:00:09,540 --> 00:00:12,059
redesign of the TV module and if you're

4
00:00:12,059 --> 00:00:14,040
not familiar with TV it's an interactive

5
00:00:14,040 --> 00:00:16,350
debug console for happy that operates as

6
00:00:16,350 --> 00:00:20,430
a plugin wow that's already auto playing

7
00:00:20,430 --> 00:00:24,420
okay cool so the the main premise but

8
00:00:24,420 --> 00:00:26,099
behind what I'm talking about is that

9
00:00:26,099 --> 00:00:28,140
you know api's and server-side

10
00:00:28,140 --> 00:00:30,449
applications are meant to be consumed

11
00:00:30,449 --> 00:00:32,850
and so if you're primarily writing an

12
00:00:32,850 --> 00:00:35,940
API that's exposing itself as a series

13
00:00:35,940 --> 00:00:37,620
of JSON end points right there are going

14
00:00:37,620 --> 00:00:40,219
to be clients consuming that and so

15
00:00:40,219 --> 00:00:43,469
clients are are they're tricky right in

16
00:00:43,469 --> 00:00:46,350
simple cases client you can get away

17
00:00:46,350 --> 00:00:50,280
with just having clients that are you

18
00:00:50,280 --> 00:00:51,840
know meant to connect to your services

19
00:00:51,840 --> 00:00:54,899
and they can usually like run your

20
00:00:54,899 --> 00:00:56,670
service local if it doesn't have like a

21
00:00:56,670 --> 00:00:58,350
complex database or something you know

22
00:00:58,350 --> 00:00:59,640
or if you're using like rails or

23
00:00:59,640 --> 00:01:01,410
something you can you know just run the

24
00:01:01,410 --> 00:01:02,969
application everything locally your

25
00:01:02,969 --> 00:01:04,949
developers are happy feedback loops are

26
00:01:04,949 --> 00:01:07,229
really really tight but you know if you

27
00:01:07,229 --> 00:01:09,659
don't have services that are just one to

28
00:01:09,659 --> 00:01:11,490
one or you're using micro services or

29
00:01:11,490 --> 00:01:13,170
you have big data or things that are

30
00:01:13,170 --> 00:01:16,470
more complex or half your stuff is

31
00:01:16,470 --> 00:01:17,909
private or half of its work in progress

32
00:01:17,909 --> 00:01:20,729
and not released it becomes a real

33
00:01:20,729 --> 00:01:23,340
burden on your front-end developers to

34
00:01:23,340 --> 00:01:25,380
actually like make heads and tails of

35
00:01:25,380 --> 00:01:27,119
what API services are available and

36
00:01:27,119 --> 00:01:30,090
there are really great lengths that that

37
00:01:30,090 --> 00:01:32,579
we go through to mitigate this right

38
00:01:32,579 --> 00:01:34,710
like having you know documentation

39
00:01:34,710 --> 00:01:36,299
generators that you know are also

40
00:01:36,299 --> 00:01:38,790
producing stubs that you're using so you

41
00:01:38,790 --> 00:01:41,070
know you're kind of the expectation is

42
00:01:41,070 --> 00:01:43,649
that you're losing some fidelity to you

43
00:01:43,649 --> 00:01:45,210
know what will eventually go into

44
00:01:45,210 --> 00:01:49,439
production and so should clients need to

45
00:01:49,439 --> 00:01:51,600
run your entire API the answer is

46
00:01:51,600 --> 00:01:53,520
absolutely not they there should be no

47
00:01:53,520 --> 00:01:54,990
expectation that if you're building

48
00:01:54,990 --> 00:01:57,329
something super complex that the

49
00:01:57,329 --> 00:01:58,829
front-end developer that's you know

50
00:01:58,829 --> 00:02:00,540
writing an application that sits on top

51
00:02:00,540 --> 00:02:02,490
of all this awesome API work that you're

52
00:02:02,490 --> 00:02:04,320
doing should have to run that on their

53
00:02:04,320 --> 00:02:06,090
local stack you know there are a lot of

54
00:02:06,090 --> 00:02:07,649
things that eventually just make this

55
00:02:07,649 --> 00:02:09,030
untenable you know if you have a bunch

56
00:02:09,030 --> 00:02:10,679
of different database connections if

57
00:02:10,679 --> 00:02:13,110
your project is is that chopped up into

58
00:02:13,110 --> 00:02:13,860
a bunch of different

59
00:02:13,860 --> 00:02:15,930
Micro services that are living in 15

60
00:02:15,930 --> 00:02:18,330
different places you really you know

61
00:02:18,330 --> 00:02:20,550
can't afford to have to take a bunch of

62
00:02:20,550 --> 00:02:23,520
set-up time for everybody to run your

63
00:02:23,520 --> 00:02:25,770
stuff locally some tools like vagrant

64
00:02:25,770 --> 00:02:27,360
make this a little bit easier and there

65
00:02:27,360 --> 00:02:29,370
are like the hope of having things even

66
00:02:29,370 --> 00:02:31,410
better encapsulated in the future but

67
00:02:31,410 --> 00:02:33,840
you know a lot of times the best case

68
00:02:33,840 --> 00:02:36,360
scenario is to just set up a you know

69
00:02:36,360 --> 00:02:37,860
staging server that all of your

70
00:02:37,860 --> 00:02:40,800
front-end developers hit and eventually

71
00:02:40,800 --> 00:02:42,180
you're going to run into some problems

72
00:02:42,180 --> 00:02:45,450
where the the developers on their

73
00:02:45,450 --> 00:02:47,730
laptops don't have the information that

74
00:02:47,730 --> 00:02:49,890
they need just based on the on what's

75
00:02:49,890 --> 00:02:52,050
being exposed to them over the wire so

76
00:02:52,050 --> 00:02:54,959
that's where TV comes in so as I said TV

77
00:02:54,959 --> 00:02:57,420
is an interactive debug console and this

78
00:02:57,420 --> 00:02:59,480
is a kind of blurry screenshot of it

79
00:02:59,480 --> 00:03:01,830
about i'll be showing a demo in a minute

80
00:03:01,830 --> 00:03:04,020
and so what quick left has been doing

81
00:03:04,020 --> 00:03:05,850
over the past few months is taking a

82
00:03:05,850 --> 00:03:07,530
look at the use cases behind TV and

83
00:03:07,530 --> 00:03:09,570
doing some some redesigned some

84
00:03:09,570 --> 00:03:13,020
rethinking so again it's an interactive

85
00:03:13,020 --> 00:03:15,570
debug console and it's gotten a bit of a

86
00:03:15,570 --> 00:03:19,170
facelift so the old TV is about as

87
00:03:19,170 --> 00:03:20,820
pretty as you can possibly make a table

88
00:03:20,820 --> 00:03:24,720
look so it's a little bit daunting when

89
00:03:24,720 --> 00:03:26,280
you first get there it doesn't do

90
00:03:26,280 --> 00:03:29,130
anything out of the box so it's a it was

91
00:03:29,130 --> 00:03:30,600
a little bit challenging when I when I

92
00:03:30,600 --> 00:03:32,430
first picked this up and being like okay

93
00:03:32,430 --> 00:03:33,959
well I can kind of see what's going on

94
00:03:33,959 --> 00:03:36,450
you know their tags grouped in but you

95
00:03:36,450 --> 00:03:38,459
know it's difficult discover it's

96
00:03:38,459 --> 00:03:40,470
difficult to filter and unless you

97
00:03:40,470 --> 00:03:43,410
really kind of go through you know this

98
00:03:43,410 --> 00:03:46,110
process of creating a debug ID and then

99
00:03:46,110 --> 00:03:47,459
making sure that you're sending that

100
00:03:47,459 --> 00:03:50,070
along is a query parameter along with

101
00:03:50,070 --> 00:03:52,590
everyone your requests filtering down

102
00:03:52,590 --> 00:03:54,209
just the stuff that year that you want

103
00:03:54,209 --> 00:03:56,040
to look at is a little bit challenging

104
00:03:56,040 --> 00:03:59,640
so along the way there were a whole

105
00:03:59,640 --> 00:04:01,860
bunch of new features that that we were

106
00:04:01,860 --> 00:04:04,590
able to add and in a pretty pretty easy

107
00:04:04,590 --> 00:04:06,780
way so things like type-ahead filtering

108
00:04:06,780 --> 00:04:09,269
favoriting copying to clipboard so that

109
00:04:09,269 --> 00:04:12,090
if you do have you know kind of server

110
00:04:12,090 --> 00:04:14,250
logging information or error logs you

111
00:04:14,250 --> 00:04:15,930
know it makes it super easy to just pick

112
00:04:15,930 --> 00:04:18,030
that stuff up drop it and drop it into

113
00:04:18,030 --> 00:04:19,950
chat and send it off to the API

114
00:04:19,950 --> 00:04:22,229
developers who are working diligently to

115
00:04:22,229 --> 00:04:24,539
maintain this public staging server that

116
00:04:24,539 --> 00:04:26,620
you're working against every day

117
00:04:26,620 --> 00:04:29,169
better user onboarding a real pause and

118
00:04:29,169 --> 00:04:30,850
resume so that if you do if you are

119
00:04:30,850 --> 00:04:32,710
developing against the staging service

120
00:04:32,710 --> 00:04:35,290
that is quite busy you can actually tell

121
00:04:35,290 --> 00:04:36,820
it to shut the up for a couple

122
00:04:36,820 --> 00:04:39,340
minutes and it's all built for happy

123
00:04:39,340 --> 00:04:42,220
eight-point oh now so a little bit of

124
00:04:42,220 --> 00:04:48,639
demo time here ok cool so so this is TV

125
00:04:48,639 --> 00:04:50,710
my screen is not mirrored so this is a

126
00:04:50,710 --> 00:04:53,470
little old tricky so what we're seeing

127
00:04:53,470 --> 00:04:56,020
right now is is a live web socket

128
00:04:56,020 --> 00:04:58,210
connection to a server we have running

129
00:04:58,210 --> 00:05:02,440
over here and what we can see is that as

130
00:05:02,440 --> 00:05:04,660
requests come in to the server that are

131
00:05:04,660 --> 00:05:07,300
tagged with this debug keyword we get

132
00:05:07,300 --> 00:05:09,070
information coming back about the

133
00:05:09,070 --> 00:05:11,770
requests that we can pretty print out

134
00:05:11,770 --> 00:05:13,990
here you can see that we have custom law

135
00:05:13,990 --> 00:05:15,940
custom logging coming through that has

136
00:05:15,940 --> 00:05:18,449
our own tags associated with it that

137
00:05:18,449 --> 00:05:21,310
would unfold if it were actually JSON

138
00:05:21,310 --> 00:05:25,930
you get has some some internal logging

139
00:05:25,930 --> 00:05:28,449
events from happy and the same type of

140
00:05:28,449 --> 00:05:30,490
response payload stuff this isn't

141
00:05:30,490 --> 00:05:33,130
necessarily meant to replace your your

142
00:05:33,130 --> 00:05:35,340
network panel and the in the debug tools

143
00:05:35,340 --> 00:05:37,870
but it can really be helpful if you're

144
00:05:37,870 --> 00:05:39,669
just trying to get to the bottom of

145
00:05:39,669 --> 00:05:42,760
where request is why you're getting 404

146
00:05:42,760 --> 00:05:45,669
is on a certain endpoint and you know

147
00:05:45,669 --> 00:05:47,139
really being able to look at this stuff

148
00:05:47,139 --> 00:05:50,020
without having to you know ask for

149
00:05:50,020 --> 00:05:52,750
console ass access to the server or you

150
00:05:52,750 --> 00:05:54,849
know being able having to go and tail a

151
00:05:54,849 --> 00:05:57,789
log file or constantly bug an API

152
00:05:57,789 --> 00:05:59,530
developer about like hey why is this

153
00:05:59,530 --> 00:06:01,750
thing not working when I try this it

154
00:06:01,750 --> 00:06:03,160
gives you everything that you need to do

155
00:06:03,160 --> 00:06:04,720
and you can copy to your clipboard and

156
00:06:04,720 --> 00:06:07,150
do things like like filters so if we

157
00:06:07,150 --> 00:06:10,150
just want to see the API requests or we

158
00:06:10,150 --> 00:06:13,960
just want to see the 404 and all that

159
00:06:13,960 --> 00:06:17,410
good stuff so and since it's using a

160
00:06:17,410 --> 00:06:21,639
WebSocket connection okay there it is

161
00:06:21,639 --> 00:06:23,979
since using a WebSocket connection that

162
00:06:23,979 --> 00:06:26,199
you know we can pump a bunch of a bunch

163
00:06:26,199 --> 00:06:28,690
of requests into it at the same time and

164
00:06:28,690 --> 00:06:31,570
see them and see them just just fly in I

165
00:06:31,570 --> 00:06:34,990
tried it with with 50,000 requests the

166
00:06:34,990 --> 00:06:37,150
other day and it gets a little slow if

167
00:06:37,150 --> 00:06:38,950
you're sending like 50,000 requests over

168
00:06:38,950 --> 00:06:40,030
a be

169
00:06:40,030 --> 00:06:41,770
but it is a web page so you can just

170
00:06:41,770 --> 00:06:44,380
refresh it and blows the cash away and

171
00:06:44,380 --> 00:06:48,070
stuff like that so so yeah this is a

172
00:06:48,070 --> 00:06:51,790
currently work in progress we've up

173
00:06:51,790 --> 00:06:54,250
their primary development work on it and

174
00:06:54,250 --> 00:06:56,140
we're going to be just going through

175
00:06:56,140 --> 00:06:57,430
some code review and then getting it

176
00:06:57,430 --> 00:07:00,370
getting it landed in the in the main

177
00:07:00,370 --> 00:07:01,930
module of TV right now it's just a fork

178
00:07:01,930 --> 00:07:05,880
on the quick left account but but yes so

179
00:07:05,880 --> 00:07:09,610
this is uh thanks for letting me come up

180
00:07:09,610 --> 00:07:11,920
here and talk about TV and yeah I'll be

181
00:07:11,920 --> 00:07:14,230
happy to take any questions in the next

