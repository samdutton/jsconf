1
00:00:00,000 --> 00:00:10,860

I said I'm gonna not move from here all

2
00:00:10,860 --> 00:00:12,719
right hello welcome thank you for

3
00:00:12,719 --> 00:00:14,549
joining me for this talk machine

4
00:00:14,549 --> 00:00:16,320
learning in the browser and I'm really

5
00:00:16,320 --> 00:00:18,330
happy that we could like start with some

6
00:00:18,330 --> 00:00:20,910
fluffiness today and gonna end with some

7
00:00:20,910 --> 00:00:22,650
fluffiness in this room so I'm really

8
00:00:22,650 --> 00:00:23,840
really proud of that

9
00:00:23,840 --> 00:00:27,260
so for those who don't know me yet oh

10
00:00:27,260 --> 00:00:29,039
this is not working

11
00:00:29,039 --> 00:00:33,059
oh wait because I turned it off yes this

12
00:00:33,059 --> 00:00:40,379
is me hello yes please come in hi no

13
00:00:40,379 --> 00:00:43,090
take your time

14
00:00:43,100 --> 00:00:47,039
all right so this is me this is actually

15
00:00:47,039 --> 00:00:51,180
not me so there's a company called Lian

16
00:00:51,180 --> 00:00:52,829
Li and they've basically be haunting me

17
00:00:52,829 --> 00:00:55,500
my entire life because people my friends

18
00:00:55,500 --> 00:00:57,629
come up to me who are also in the

19
00:00:57,629 --> 00:01:00,480
industry sometimes and they're like do

20
00:01:00,480 --> 00:01:02,340
you know of this company that's named

21
00:01:02,340 --> 00:01:05,339
Lian Li so like this is a friend of mine

22
00:01:05,339 --> 00:01:08,070
most recently was like haha I was a

23
00:01:08,070 --> 00:01:10,500
computer and like I was like okay I'm

24
00:01:10,500 --> 00:01:12,150
gonna be super polite and just like it

25
00:01:12,150 --> 00:01:14,820
and he liked it himself again like he

26
00:01:14,820 --> 00:01:16,320
liked his own post that he posted to my

27
00:01:16,320 --> 00:01:18,509
timeline and he was so happy with his

28
00:01:18,509 --> 00:01:21,240
post that he commented on it again with

29
00:01:21,240 --> 00:01:23,909
a smiley face so this is basically my

30
00:01:23,909 --> 00:01:25,530
relationship with the company Lee and

31
00:01:25,530 --> 00:01:27,720
Lee so they've been haunting their whole

32
00:01:27,720 --> 00:01:29,970
life like I said and I want to asked you

33
00:01:29,970 --> 00:01:32,490
to help me with something this is the

34
00:01:32,490 --> 00:01:35,130
situation on Twitter right now I have

35
00:01:35,130 --> 00:01:36,960
I'm shy of a hundred and ninety

36
00:01:36,960 --> 00:01:41,790
followers 191 as soon as I hit 892 I'm

37
00:01:41,790 --> 00:01:43,020
gonna ask Twitter to give me the

38
00:01:43,020 --> 00:01:46,770
checkmark and that will be the first

39
00:01:46,770 --> 00:01:49,710
step when people start asking them like

40
00:01:49,710 --> 00:01:51,990
do you know the speaker Lee Anne Lee and

41
00:01:51,990 --> 00:01:53,369
they're like oh of course we do like

42
00:01:53,369 --> 00:01:54,659
we've been in this business for thirty

43
00:01:54,659 --> 00:01:57,570
years now so yeah please follow me on

44
00:01:57,570 --> 00:02:01,740
Twitter or on github or on mass I have

45
00:02:01,740 --> 00:02:03,360
three followers of macedon so if you

46
00:02:03,360 --> 00:02:04,890
could like follow me there that would be

47
00:02:04,890 --> 00:02:05,549
great

48
00:02:05,549 --> 00:02:07,710
I don't think Lee Anne Lee is on there

49
00:02:07,710 --> 00:02:09,959
so I might get like a checkmark there

50
00:02:09,959 --> 00:02:13,590
just like that so yes that was the joke

51
00:02:13,590 --> 00:02:17,129
the introduction joke something else I

52
00:02:17,129 --> 00:02:19,560
do I'm a software engineer at pnina

53
00:02:19,560 --> 00:02:22,590
solutions it's a company doing cloud

54
00:02:22,590 --> 00:02:25,220
native consultancy based in Amsterdam

55
00:02:25,220 --> 00:02:27,390
it's really not that interesting I'm not

56
00:02:27,390 --> 00:02:28,670
gonna talk about my company because

57
00:02:28,670 --> 00:02:32,459
that's my day job during the night or

58
00:02:32,459 --> 00:02:35,190
any other time of day I am a machine

59
00:02:35,190 --> 00:02:37,680
learning enthusiast and by that I mean I

60
00:02:37,680 --> 00:02:39,900
have no education actually on machine

61
00:02:39,900 --> 00:02:43,290
learning I just did a course on Coursera

62
00:02:43,290 --> 00:02:45,360
which I highly recommend is like a

63
00:02:45,360 --> 00:02:48,239
12-week sucking out your soul kind of

64
00:02:48,239 --> 00:02:50,310
like super math intense course but it's

65
00:02:50,310 --> 00:02:52,620
like at the others end you're like okay

66
00:02:52,620 --> 00:02:54,480
I did something with my life

67
00:02:54,480 --> 00:02:59,250
so highly recommend this course I'm

68
00:02:59,250 --> 00:03:01,290
gonna show you I think I have a link on

69
00:03:01,290 --> 00:03:04,050
the slide later so okay let's talk about

70
00:03:04,050 --> 00:03:06,120
machine learning why do we want to do

71
00:03:06,120 --> 00:03:08,340
machine learning I think who hasn't

72
00:03:08,340 --> 00:03:12,060
heard of machine learning yet okay well

73
00:03:12,060 --> 00:03:13,620
maybe other way around who has heard of

74
00:03:13,620 --> 00:03:14,370
machine learning

75
00:03:14,370 --> 00:03:19,379
okay that's most okay so for this to be

76
00:03:19,379 --> 00:03:21,510
makes sense I have to take we have to

77
00:03:21,510 --> 00:03:23,580
take a look at how s expert system words

78
00:03:23,580 --> 00:03:25,950
so expert systems is what you built when

79
00:03:25,950 --> 00:03:28,470
you do conventional coding and the idea

80
00:03:28,470 --> 00:03:30,900
is kind of that you have a solution and

81
00:03:30,900 --> 00:03:32,400
the solution is your code you have a

82
00:03:32,400 --> 00:03:35,010
problem trying to find a solution you

83
00:03:35,010 --> 00:03:38,129
write this code as a solution and for

84
00:03:38,129 --> 00:03:40,200
that you kind of need like a person it

85
00:03:40,200 --> 00:03:42,060
was usually a developer and the

86
00:03:42,060 --> 00:03:44,400
developer has to maintain the code write

87
00:03:44,400 --> 00:03:46,260
the code expand the code so everything

88
00:03:46,260 --> 00:03:48,930
kind of funnels to him and for him to do

89
00:03:48,930 --> 00:03:51,569
a good job he has to do things like read

90
00:03:51,569 --> 00:03:54,060
documentation like use third-party

91
00:03:54,060 --> 00:03:56,519
libraries maybe or maybe has to talk to

92
00:03:56,519 --> 00:03:58,530
the main expert

93
00:03:58,530 --> 00:04:00,959
but the important thing here to take

94
00:04:00,959 --> 00:04:02,819
away from the slide basically is that

95
00:04:02,819 --> 00:04:05,069
everything goes to this one person and

96
00:04:05,069 --> 00:04:06,239
he has to have a perfect understanding

97
00:04:06,239 --> 00:04:10,650
of the system now if we look at machine

98
00:04:10,650 --> 00:04:12,840
learning it's kind of different

99
00:04:12,840 --> 00:04:15,030
so the solution in machine learning is a

100
00:04:15,030 --> 00:04:17,400
model the model it's a statistical model

101
00:04:17,400 --> 00:04:19,739
so everything's kind of represented in

102
00:04:19,739 --> 00:04:22,139
numbers and there are no like if you

103
00:04:22,139 --> 00:04:24,030
didn't implement this edge case where

104
00:04:24,030 --> 00:04:25,200
there's no really implementing of

105
00:04:25,200 --> 00:04:27,090
educators it still works it doesn't

106
00:04:27,090 --> 00:04:28,470
break it just gives you maybe like a

107
00:04:28,470 --> 00:04:33,360
weird number and the model is not built

108
00:04:33,360 --> 00:04:37,350
by hand by a developer it's just spit

109
00:04:37,350 --> 00:04:39,479
out by code by a machine learning

110
00:04:39,479 --> 00:04:42,389
algorithm so you run an algorithm and it

111
00:04:42,389 --> 00:04:44,639
gives you a model in the end explained

112
00:04:44,639 --> 00:04:48,479
to you and for this to work basically

113
00:04:48,479 --> 00:04:51,300
for this code to run efficiently or to

114
00:04:51,300 --> 00:04:53,130
do what it's supposed to do you need

115
00:04:53,130 --> 00:04:56,310
some data and you may need some kind of

116
00:04:56,310 --> 00:04:58,740
like data or machine learning experts so

117
00:04:58,740 --> 00:05:01,260
these data ml experts do not necessarily

118
00:05:01,260 --> 00:05:04,200
need to be domain experts although it

119
00:05:04,200 --> 00:05:05,820
does make sense for them to understand

120
00:05:05,820 --> 00:05:08,669
the domain but mainly they need to

121
00:05:08,669 --> 00:05:10,740
understand the statistical basically

122
00:05:10,740 --> 00:05:12,750
behavior of this pattern that they're

123
00:05:12,750 --> 00:05:15,870
trying to learn and adapt to so

124
00:05:15,870 --> 00:05:18,030
everything in the end kind of hinges on

125
00:05:18,030 --> 00:05:20,130
the data the data has to be the right

126
00:05:20,130 --> 00:05:23,580
amount the right format and yeah that's

127
00:05:23,580 --> 00:05:25,740
kind of the our job here in machine

128
00:05:25,740 --> 00:05:29,190
learning um so machine learning

129
00:05:29,190 --> 00:05:31,500
basically the kind of the way it works

130
00:05:31,500 --> 00:05:33,390
is pretty simple it's like how we learn

131
00:05:33,390 --> 00:05:36,600
as well for one there's experience you

132
00:05:36,600 --> 00:05:38,640
need experience that's the number of

133
00:05:38,640 --> 00:05:41,130
data points so like you have like

134
00:05:41,130 --> 00:05:44,880
different kinds of data points that

135
00:05:44,880 --> 00:05:47,250
represent different you know instances

136
00:05:47,250 --> 00:05:51,060
of the behavior you want to basically

137
00:05:51,060 --> 00:05:53,729
adapt to and then the other thing the

138
00:05:53,729 --> 00:05:55,860
same thing how we learn is repetition

139
00:05:55,860 --> 00:05:58,950
that's basically our number of training

140
00:05:58,950 --> 00:06:02,990
iterations so you were gonna have to

141
00:06:02,990 --> 00:06:06,510
take the same data points and then just

142
00:06:06,510 --> 00:06:09,060
train them a lot of times and by

143
00:06:09,060 --> 00:06:10,400
repeating you kind

144
00:06:10,400 --> 00:06:12,830
learn pattern behind it so pretty much

145
00:06:12,830 --> 00:06:15,650
this is kind of how we imagine people to

146
00:06:15,650 --> 00:06:16,570
learn as well

147
00:06:16,570 --> 00:06:19,669
right then the other thing that people

148
00:06:19,669 --> 00:06:21,290
have already asked me about like why

149
00:06:21,290 --> 00:06:23,300
does everything have to be JavaScript

150
00:06:23,300 --> 00:06:25,070
like can't you just not do that in

151
00:06:25,070 --> 00:06:29,540
JavaScript yes good point you could also

152
00:06:29,540 --> 00:06:34,430
not do it in JavaScript no well there

153
00:06:34,430 --> 00:06:36,710
are some arguments that I could make for

154
00:06:36,710 --> 00:06:38,389
client-side machine learning and I think

155
00:06:38,389 --> 00:06:41,120
you could think of some as well for one

156
00:06:41,120 --> 00:06:44,449
like speed not everyone lives in like a

157
00:06:44,449 --> 00:06:46,580
first world country some of us live in

158
00:06:46,580 --> 00:06:48,530
Germany where the internet speed is not

159
00:06:48,530 --> 00:06:52,340
always that great and then maybe you

160
00:06:52,340 --> 00:06:54,889
don't want to wait like two minutes for

161
00:06:54,889 --> 00:06:56,240
the server to answer you with the

162
00:06:56,240 --> 00:06:57,880
prediction or

163
00:06:57,880 --> 00:07:01,070
get from it then the other thing is

164
00:07:01,070 --> 00:07:03,470
availability again if you live in

165
00:07:03,470 --> 00:07:06,800
Germany you don't always have internet

166
00:07:06,800 --> 00:07:08,900
so maybe you just can't connect to the

167
00:07:08,900 --> 00:07:11,090
server and so that maybe you want to do

168
00:07:11,090 --> 00:07:12,710
the prediction on your client on your

169
00:07:12,710 --> 00:07:16,880
website or on your phone and then the

170
00:07:16,880 --> 00:07:19,700
third argument that I could bring this

171
00:07:19,700 --> 00:07:24,080
security so maybe you don't want to send

172
00:07:24,080 --> 00:07:27,530
your images to a third-party server to

173
00:07:27,530 --> 00:07:29,240
train on it and then predict something

174
00:07:29,240 --> 00:07:31,460
maybe you just want to do everything on

175
00:07:31,460 --> 00:07:34,639
your phone or on your own client should

176
00:07:34,639 --> 00:07:37,639
have more control over your data so all

177
00:07:37,639 --> 00:07:39,919
these arguments I think are valid enough

178
00:07:39,919 --> 00:07:42,050
to see effect you could build something

179
00:07:42,050 --> 00:07:43,880
with JavaScript so it runs a new browser

180
00:07:43,880 --> 00:07:50,090
right all right I want to try to explain

181
00:07:50,090 --> 00:07:51,620
the basic principles of machine learning

182
00:07:51,620 --> 00:07:53,900
to you and for that I think the best way

183
00:07:53,900 --> 00:07:56,240
is to think of an example that makes

184
00:07:56,240 --> 00:07:58,669
sense and then try it should translate

185
00:07:58,669 --> 00:08:02,599
like those really mad C terms to things

186
00:08:02,599 --> 00:08:06,740
that you know we all can understand all

187
00:08:06,740 --> 00:08:10,000
right and the example that I picked is

188
00:08:10,000 --> 00:08:12,620
complementary colors so the idea here is

189
00:08:12,620 --> 00:08:15,110
to input a specific color which is RGB

190
00:08:15,110 --> 00:08:17,389
channels so we're inputting three values

191
00:08:17,389 --> 00:08:20,090
which is the value for red green and

192
00:08:20,090 --> 00:08:22,550
blue and then we're outputting we're

193
00:08:22,550 --> 00:08:24,410
trying to predict the

194
00:08:24,410 --> 00:08:26,930
complementary color complementary color

195
00:08:26,930 --> 00:08:28,100
in case you don't know it's basically

196
00:08:28,100 --> 00:08:31,330
the opposite color of the color spectrum

197
00:08:31,330 --> 00:08:34,730
yeah you are like no one's totally lost

198
00:08:34,730 --> 00:08:39,050
here good alright so let's talk about

199
00:08:39,050 --> 00:08:41,090
terminology for a while because I'm

200
00:08:41,090 --> 00:08:42,500
gonna probably switch back and forth

201
00:08:42,500 --> 00:08:44,930
between the machine learning words and

202
00:08:44,930 --> 00:08:52,730
normal words so I'm gonna like do some

203
00:08:52,730 --> 00:08:55,160
like simple diagrams so we can all be on

204
00:08:55,160 --> 00:08:57,440
the same page when I expert explained

205
00:08:57,440 --> 00:09:01,100
later on so first we have our input an

206
00:09:01,100 --> 00:09:04,730
input it B or color the color we want to

207
00:09:04,730 --> 00:09:07,390
do the complementary color prediction on

208
00:09:07,390 --> 00:09:10,730
we pass that input into like a function

209
00:09:10,730 --> 00:09:13,190
something like a function and then we

210
00:09:13,190 --> 00:09:15,890
get an output that is the basic idea of

211
00:09:15,890 --> 00:09:20,150
any system right if we were to do it not

212
00:09:20,150 --> 00:09:22,100
with machine learning but with expert

213
00:09:22,100 --> 00:09:23,720
system we would also have something like

214
00:09:23,720 --> 00:09:27,080
that now if you look at like how we do

215
00:09:27,080 --> 00:09:29,150
it in machine learning the inputs become

216
00:09:29,150 --> 00:09:32,090
our features and in this case we have

217
00:09:32,090 --> 00:09:33,890
three features because we have like

218
00:09:33,890 --> 00:09:35,840
value for read a value for a green and a

219
00:09:35,840 --> 00:09:39,200
value blue then the function would be a

220
00:09:39,200 --> 00:09:42,260
network and like the network like it's a

221
00:09:42,260 --> 00:09:44,570
network of nodes right and each net node

222
00:09:44,570 --> 00:09:47,060
is already a function but like the

223
00:09:47,060 --> 00:09:48,950
entire network would be like like a

224
00:09:48,950 --> 00:09:50,570
total like a function of functions if

225
00:09:50,570 --> 00:09:53,360
you know what I'm getting here but we

226
00:09:53,360 --> 00:09:55,250
can look at it for now is like one

227
00:09:55,250 --> 00:09:56,900
function we pass something in and then

228
00:09:56,900 --> 00:09:59,000
we get something out and the output

229
00:09:59,000 --> 00:10:03,410
would be our prediction now M network

230
00:10:03,410 --> 00:10:04,640
and prediction have the same color here

231
00:10:04,640 --> 00:10:05,780
because the prediction is always

232
00:10:05,780 --> 00:10:07,640
dependent on a specific network if you

233
00:10:07,640 --> 00:10:10,640
in if we put in the same values in the

234
00:10:10,640 --> 00:10:12,200
exact same network you would always get

235
00:10:12,200 --> 00:10:16,460
the exact same prediction now if you

236
00:10:16,460 --> 00:10:18,230
want to like if you're starting with

237
00:10:18,230 --> 00:10:20,060
machine learning and starting with a new

238
00:10:20,060 --> 00:10:22,250
network usually your prediction is

239
00:10:22,250 --> 00:10:25,640
pretty crummy and in the beginning so

240
00:10:25,640 --> 00:10:29,030
what we kind of need to train is to also

241
00:10:29,030 --> 00:10:31,430
know in this case what our desired

242
00:10:31,430 --> 00:10:33,860
output would be what is the color that

243
00:10:33,860 --> 00:10:36,860
we do want it to predict and this is

244
00:10:36,860 --> 00:10:39,290
called the target this is what we want

245
00:10:39,290 --> 00:10:44,540
to predict right and so in this diagram

246
00:10:44,540 --> 00:10:47,350
what I wanted to show kind of is that

247
00:10:47,350 --> 00:10:50,330
the blue and the green ones this is the

248
00:10:50,330 --> 00:10:52,670
data that we actually need to do the

249
00:10:52,670 --> 00:10:54,740
training because then the network and

250
00:10:54,740 --> 00:10:55,880
the prediction is something that we're

251
00:10:55,880 --> 00:10:58,160
going to come up but we're gonna train

252
00:10:58,160 --> 00:11:00,320
by ourselves but we need to have like a

253
00:11:00,320 --> 00:11:04,340
good data set that's the input and the

254
00:11:04,340 --> 00:11:05,770
target or the features in the target

255
00:11:05,770 --> 00:11:07,730
this is just important for you to

256
00:11:07,730 --> 00:11:10,220
understand so a complementary Carlos is

257
00:11:10,220 --> 00:11:11,830
actually a really good example because

258
00:11:11,830 --> 00:11:14,180
we don't have to do a lot of data mining

259
00:11:14,180 --> 00:11:16,040
we don't have to go out and you know try

260
00:11:16,040 --> 00:11:18,170
to find like labeled data it's pretty

261
00:11:18,170 --> 00:11:20,300
easy to just generate data on the fly

262
00:11:20,300 --> 00:11:24,620
when you just want to try stuff out so

263
00:11:24,620 --> 00:11:27,050
this is kind of how our input generation

264
00:11:27,050 --> 00:11:28,970
could look like we just basically have

265
00:11:28,970 --> 00:11:31,550
to generate a random value between 0 and

266
00:11:31,550 --> 00:11:34,610
255 and then you know do that three

267
00:11:34,610 --> 00:11:36,860
times put in an array that's basically

268
00:11:36,860 --> 00:11:40,400
one random color and we just do that

269
00:11:40,400 --> 00:11:43,070
like 10,000 times for 10,000 data points

270
00:11:43,070 --> 00:11:44,930
and then there's a function for the

271
00:11:44,930 --> 00:11:47,450
output which is the so this is our

272
00:11:47,450 --> 00:11:50,390
desired output right I didn't put the

273
00:11:50,390 --> 00:11:51,890
full function there but there's a link

274
00:11:51,890 --> 00:11:53,180
to Stack Overflow if you want to check

275
00:11:53,180 --> 00:11:55,610
it out how to compute our complimentary

276
00:11:55,610 --> 00:11:58,070
colors just know that in the end you

277
00:11:58,070 --> 00:12:01,280
again have an array with values between

278
00:12:01,280 --> 00:12:06,110
0 and 255 all right to make it kind of

279
00:12:06,110 --> 00:12:07,550
easier to understand what we're getting

280
00:12:07,550 --> 00:12:09,230
at here how we're trying to build this

281
00:12:09,230 --> 00:12:11,390
thing I'd created this nice handy

282
00:12:11,390 --> 00:12:14,320
checklist so first thing we need data

283
00:12:14,320 --> 00:12:18,230
got that next thing kind of need a

284
00:12:18,230 --> 00:12:19,550
network thingy

285
00:12:19,550 --> 00:12:22,400
to make a prediction right when we have

286
00:12:22,400 --> 00:12:26,150
that doing something awesome in the end

287
00:12:26,150 --> 00:12:27,230
it's gonna be awesome

288
00:12:27,230 --> 00:12:29,120
that's all we need to know for now in

289
00:12:29,120 --> 00:12:30,680
your network then do something awesome

290
00:12:30,680 --> 00:12:34,610
gonna be awesome right the nice thing is

291
00:12:34,610 --> 00:12:36,560
that we don't have to implement every

292
00:12:36,560 --> 00:12:38,690
network by itself there's like Google

293
00:12:38,690 --> 00:12:41,210
doing stuff like deep lunges and

294
00:12:41,210 --> 00:12:43,270
different yes

295
00:12:43,270 --> 00:12:46,360
it is based on tensile flow I don't know

296
00:12:46,360 --> 00:12:48,640
if any of you have ever heard of tensile

297
00:12:48,640 --> 00:12:51,160
flow yes I see some heads nodding and

298
00:12:51,160 --> 00:12:54,130
fingers going up yes cool so deep learn

299
00:12:54,130 --> 00:12:56,260
Jess or as it's called now actually I

300
00:12:56,260 --> 00:12:58,570
think they released it like last week

301
00:12:58,570 --> 00:12:59,850
thank you google

302
00:12:59,850 --> 00:13:02,590
it's called tensorflow jess now it's

303
00:13:02,590 --> 00:13:05,050
like I said before they changed the API

304
00:13:05,050 --> 00:13:06,850
so the code I'm showing you might not be

305
00:13:06,850 --> 00:13:09,820
a 100% accurate but you can still like

306
00:13:09,820 --> 00:13:12,460
if you can get the NPM package of deep

307
00:13:12,460 --> 00:13:16,570
learn version 0.4 I think then you can

308
00:13:16,570 --> 00:13:19,510
check out the repository then you get

309
00:13:19,510 --> 00:13:22,150
the right version anyways

310
00:13:22,150 --> 00:13:24,700
so deep lunges provides us with a way to

311
00:13:24,700 --> 00:13:26,860
build neural networks and it's actually

312
00:13:26,860 --> 00:13:28,510
kind of sort of really straightforward

313
00:13:28,510 --> 00:13:30,310
so I'm hoping that you know I can show

314
00:13:30,310 --> 00:13:32,050
you this and you can like do it for

315
00:13:32,050 --> 00:13:35,080
yourself even though you know it's not

316
00:13:35,080 --> 00:13:38,680
exactly like this anymore but so a

317
00:13:38,680 --> 00:13:40,990
neural network like I said before it's

318
00:13:40,990 --> 00:13:44,110
the network made of notes and we don't

319
00:13:44,110 --> 00:13:45,700
look at each single node we look at

320
00:13:45,700 --> 00:13:50,190
these columns of nodes and I said before

321
00:13:50,190 --> 00:13:52,900
each one little note and we have like

322
00:13:52,900 --> 00:13:54,640
different columns and they can have a

323
00:13:54,640 --> 00:13:56,710
different number of nodes doesn't really

324
00:13:56,710 --> 00:13:58,210
matter just matters that it's a single

325
00:13:58,210 --> 00:13:58,990
column

326
00:13:58,990 --> 00:14:01,870
they can't have like weird other shapes

327
00:14:01,870 --> 00:14:05,020
it's just has to be comes and then you

328
00:14:05,020 --> 00:14:08,380
have this blue input basically in the

329
00:14:08,380 --> 00:14:10,360
green output so the input is our

330
00:14:10,360 --> 00:14:13,420
features the output is our prediction in

331
00:14:13,420 --> 00:14:15,670
this case we only have two output notes

332
00:14:15,670 --> 00:14:17,290
but that's just because I've do it this

333
00:14:17,290 --> 00:14:19,420
way and the important thing to

334
00:14:19,420 --> 00:14:21,190
understand is that each node is

335
00:14:21,190 --> 00:14:24,040
connected to all the other nodes in the

336
00:14:24,040 --> 00:14:27,160
next layer and the ligands that each

337
00:14:27,160 --> 00:14:29,560
node connected to all the other nodes

338
00:14:29,560 --> 00:14:31,600
they're not connected like in the same

339
00:14:31,600 --> 00:14:37,190
layer always to the next one

340
00:14:37,200 --> 00:14:41,550
right so let's look at one single note

341
00:14:41,550 --> 00:14:43,320
to try to understand what's happening

342
00:14:43,320 --> 00:14:45,930
there so in this case the snow like the

343
00:14:45,930 --> 00:14:47,430
layer before has three notes the layer

344
00:14:47,430 --> 00:14:48,870
after it has to be notes and we're just

345
00:14:48,870 --> 00:14:50,730
looking at one node in this layer and

346
00:14:50,730 --> 00:14:53,490
we're getting our inputs from the layer

347
00:14:53,490 --> 00:14:55,079
before and those are like three

348
00:14:55,079 --> 00:14:57,389
different values and kind of like doing

349
00:14:57,389 --> 00:14:58,769
something with them like adding them

350
00:14:58,769 --> 00:15:01,740
together to create one output and we

351
00:15:01,740 --> 00:15:04,470
output this same value to all the other

352
00:15:04,470 --> 00:15:06,540
notes so we receiving three different

353
00:15:06,540 --> 00:15:09,269
inputs but we're outputting the same

354
00:15:09,269 --> 00:15:12,420
value and now you will think for

355
00:15:12,420 --> 00:15:14,370
yourself like okay we're just adding all

356
00:15:14,370 --> 00:15:16,529
the inputs then all the nodes in this

357
00:15:16,529 --> 00:15:19,649
layer will output the same value this is

358
00:15:19,649 --> 00:15:21,480
kind of how the magic of machine

359
00:15:21,480 --> 00:15:23,040
learning works is that each node has

360
00:15:23,040 --> 00:15:24,420
these weights

361
00:15:24,420 --> 00:15:27,209
it has like a parameters for each of

362
00:15:27,209 --> 00:15:29,550
those inputs to define how important

363
00:15:29,550 --> 00:15:31,920
this input is to understand this pattern

364
00:15:31,920 --> 00:15:34,829
so maybe if we have come to the

365
00:15:34,829 --> 00:15:36,690
complementary color prediction one of

366
00:15:36,690 --> 00:15:39,029
the inputs is let's say the weather

367
00:15:39,029 --> 00:15:42,420
today then hopefully the system will

368
00:15:42,420 --> 00:15:44,220
kind of learn that this is a very like

369
00:15:44,220 --> 00:15:46,350
doesn't really matter this input and

370
00:15:46,350 --> 00:15:48,570
like will give it a very very small

371
00:15:48,570 --> 00:15:50,910
weight so once you multiply it it

372
00:15:50,910 --> 00:15:54,149
becomes like almost you know it doesn't

373
00:15:54,149 --> 00:15:56,570
matter in your in your sum in the end

374
00:15:56,570 --> 00:16:00,510
that's kind of the idea so by that

375
00:16:00,510 --> 00:16:02,820
that's the magic basically of neural

376
00:16:02,820 --> 00:16:05,519
networks so the weights are property of

377
00:16:05,519 --> 00:16:07,980
the node so they're not property of the

378
00:16:07,980 --> 00:16:10,709
input they're like that the node has the

379
00:16:10,709 --> 00:16:13,620
weights and you have one weight for each

380
00:16:13,620 --> 00:16:15,899
input to define how important that input

381
00:16:15,899 --> 00:16:18,660
is and all the weights in one network

382
00:16:18,660 --> 00:16:20,640
that those basically represent your

383
00:16:20,640 --> 00:16:22,529
model because that's basically what your

384
00:16:22,529 --> 00:16:26,459
model is it tells you like of all the

385
00:16:26,459 --> 00:16:28,529
inputs those are the how important are

386
00:16:28,529 --> 00:16:29,640
the inputs and then I'm going to

387
00:16:29,640 --> 00:16:32,040
calculate them and then I can give you

388
00:16:32,040 --> 00:16:33,690
like a value in the end that kind of

389
00:16:33,690 --> 00:16:36,360
tells you the probability of what you

390
00:16:36,360 --> 00:16:38,250
want to predict what's going to happen

391
00:16:38,250 --> 00:16:40,800
or complimentary colors or whatever you

392
00:16:40,800 --> 00:16:43,829
want to predict so we need a weight

393
00:16:43,829 --> 00:16:47,130
those are the most important things all

394
00:16:47,130 --> 00:16:50,940
right in deep lunges or tens of logic

395
00:16:50,940 --> 00:16:53,820
the columns of a network are represented

396
00:16:53,820 --> 00:16:58,230
by a thing that's called tensor so a

397
00:16:58,230 --> 00:17:00,780
tensor is a layer it's just one column

398
00:17:00,780 --> 00:17:03,420
and the reason why it has to be columns

399
00:17:03,420 --> 00:17:05,010
as because we're doing a lot of vector

400
00:17:05,010 --> 00:17:06,660
and matrix multiplication and that is

401
00:17:06,660 --> 00:17:08,490
also why machine learning is so powerful

402
00:17:08,490 --> 00:17:10,340
because we can do a lot of calculations

403
00:17:10,340 --> 00:17:15,660
in parallel with that and can do like

404
00:17:15,660 --> 00:17:18,210
can go over a lot of data in pretty

405
00:17:18,210 --> 00:17:21,630
short amount of time so yeah that's why

406
00:17:21,630 --> 00:17:24,120
we need columns and rows where each

407
00:17:24,120 --> 00:17:28,080
column represents basically a layer and

408
00:17:28,080 --> 00:17:31,410
a row represents the data set I'm going

409
00:17:31,410 --> 00:17:33,110
to explain that later don't yeah

410
00:17:33,110 --> 00:17:35,280
everything's gonna come together in the

411
00:17:35,280 --> 00:17:35,850
end I promise

412
00:17:35,850 --> 00:17:38,970
all right tutors we have do two

413
00:17:38,970 --> 00:17:41,010
different kinds of tensors the one kind

414
00:17:41,010 --> 00:17:43,590
as a placeholder where okay we need a

415
00:17:43,590 --> 00:17:46,200
name for that which is just like to find

416
00:17:46,200 --> 00:17:48,150
it basically and then we need a size so

417
00:17:48,150 --> 00:17:50,430
we have to know how many nodes have to

418
00:17:50,430 --> 00:17:52,590
be in this placeholder and we need a

419
00:17:52,590 --> 00:17:55,080
placeholder to input static values or

420
00:17:55,080 --> 00:17:58,410
output like static values basically for

421
00:17:58,410 --> 00:18:02,880
example for our input and target tensor

422
00:18:02,880 --> 00:18:06,450
so this is how the code looks we as deep

423
00:18:06,450 --> 00:18:08,820
learn the the library to give us a graph

424
00:18:08,820 --> 00:18:10,500
because the graph is where we get all

425
00:18:10,500 --> 00:18:12,300
our fancy tensors and everything from

426
00:18:12,300 --> 00:18:15,510
and then we have like this placeholder

427
00:18:15,510 --> 00:18:17,610
that is input tensor so that's where we

428
00:18:17,610 --> 00:18:20,400
put in our features and the target

429
00:18:20,400 --> 00:18:22,590
tensor this is where we put in our

430
00:18:22,590 --> 00:18:26,010
desired output what we want it to and

431
00:18:26,010 --> 00:18:28,200
since those are fixed values we know

432
00:18:28,200 --> 00:18:29,970
them from the data set that we created

433
00:18:29,970 --> 00:18:32,940
and those are placeholders the other

434
00:18:32,940 --> 00:18:35,670
kind of Tenzer is called in this case I

435
00:18:35,670 --> 00:18:38,150
call fully connected layer basically

436
00:18:38,150 --> 00:18:40,500
okay we need a name again we're the size

437
00:18:40,500 --> 00:18:43,500
again but here we need to give the fully

438
00:18:43,500 --> 00:18:46,410
connected layer an input layer so it

439
00:18:46,410 --> 00:18:48,630
knows which layer has to connect to and

440
00:18:48,630 --> 00:18:51,090
it's called fully connected because like

441
00:18:51,090 --> 00:18:53,490
I've explained before the node is

442
00:18:53,490 --> 00:18:55,680
connected to all the nodes of the of the

443
00:18:55,680 --> 00:18:58,380
next layer you can have like different

444
00:18:58,380 --> 00:19:00,150
kinds of connections but I'm just gonna

445
00:19:00,150 --> 00:19:02,670
show you like the super basic one

446
00:19:02,670 --> 00:19:03,580
basically

447
00:19:03,580 --> 00:19:07,090
and so this code goal is might look a

448
00:19:07,090 --> 00:19:09,580
little bit complicated we're starting

449
00:19:09,580 --> 00:19:13,480
with this with our input tensor this is

450
00:19:13,480 --> 00:19:15,220
this is the input tensor for this

451
00:19:15,220 --> 00:19:17,169
function where we add like a new

452
00:19:17,169 --> 00:19:19,029
connected layer I'm gonna show you the

453
00:19:19,029 --> 00:19:20,980
code for the function in a minute just

454
00:19:20,980 --> 00:19:23,320
want to show you that we take this input

455
00:19:23,320 --> 00:19:25,360
tensor adding another layer then adding

456
00:19:25,360 --> 00:19:27,249
another layer they never layer and then

457
00:19:27,249 --> 00:19:28,869
we're adding last layer which is our

458
00:19:28,869 --> 00:19:31,419
prediction and these are the ending

459
00:19:31,419 --> 00:19:33,759
indices for our layers just saying like

460
00:19:33,759 --> 00:19:35,350
this is the first one the second one and

461
00:19:35,350 --> 00:19:40,989
so on and these are the note sizes the

462
00:19:40,989 --> 00:19:43,330
prediction gender of course again has to

463
00:19:43,330 --> 00:19:45,629
be three nodes because we want like

464
00:19:45,629 --> 00:19:49,840
three values RGB and this is what the

465
00:19:49,840 --> 00:19:54,159
code looks like so again we have to call

466
00:19:54,159 --> 00:19:55,929
the graph to give us this like dense

467
00:19:55,929 --> 00:19:58,809
layers we're giving it a name giving it

468
00:19:58,809 --> 00:20:01,809
the input layer so where are the inputs

469
00:20:01,809 --> 00:20:04,989
coming from from layer before and then

470
00:20:04,989 --> 00:20:08,169
layer size okay this is an activation

471
00:20:08,169 --> 00:20:10,749
function normally in the layer all you

472
00:20:10,749 --> 00:20:13,840
have to all you do is multiply each

473
00:20:13,840 --> 00:20:16,029
input with its weight and then adding

474
00:20:16,029 --> 00:20:19,179
that together this is a super simple

475
00:20:19,179 --> 00:20:21,999
activation so if you if you hadn't have

476
00:20:21,999 --> 00:20:23,559
a activation function if this was

477
00:20:23,559 --> 00:20:25,929
undefined you would just get the result

478
00:20:25,929 --> 00:20:28,149
from the calculation I just explained to

479
00:20:28,149 --> 00:20:31,840
you once you have an input activation

480
00:20:31,840 --> 00:20:34,450
function X is basically the result of

481
00:20:34,450 --> 00:20:38,019
you know the multiplication to sum and

482
00:20:38,019 --> 00:20:40,929
then we pass it here this function it's

483
00:20:40,929 --> 00:20:43,480
called rectifier linear unit blah blah

484
00:20:43,480 --> 00:20:47,230
blah all it does is if X is smaller than

485
00:20:47,230 --> 00:20:50,019
zero it outputs zero and if X is bigger

486
00:20:50,019 --> 00:20:50,830
than zero

487
00:20:50,830 --> 00:20:53,980
it's just outputs takes it just sounds

488
00:20:53,980 --> 00:20:57,460
and then this is the bias

489
00:20:57,460 --> 00:21:01,149
boooooo we need a bias here because in

490
00:21:01,149 --> 00:21:04,179
case we get a zero here

491
00:21:04,179 --> 00:21:05,980
the next layer would think that the node

492
00:21:05,980 --> 00:21:07,659
before was not activated because it's

493
00:21:07,659 --> 00:21:10,330
getting a zero but we want the node to

494
00:21:10,330 --> 00:21:12,730
be activated no matter what because

495
00:21:12,730 --> 00:21:15,220
otherwise it would just basically think

496
00:21:15,220 --> 00:21:17,340
that there was no no door it's like

497
00:21:17,340 --> 00:21:19,600
really unimportant but that's not what

498
00:21:19,600 --> 00:21:21,280
it is it's just like unfortunate we just

499
00:21:21,280 --> 00:21:23,100
got a zero they have to add a bias

500
00:21:23,100 --> 00:21:26,049
that's just adding plus one to the end

501
00:21:26,049 --> 00:21:29,230
of the calculation so we know that the

502
00:21:29,230 --> 00:21:32,530
node was activated it's really not that

503
00:21:32,530 --> 00:21:34,870
like it's not that important if we're

504
00:21:34,870 --> 00:21:36,250
just gonna build stuff and we're just

505
00:21:36,250 --> 00:21:38,230
gonna put bias yes because someone told

506
00:21:38,230 --> 00:21:40,450
me that bias is good like in machine

507
00:21:40,450 --> 00:21:43,710
learning not in real life all right

508
00:21:43,710 --> 00:21:46,419
let's go through a checklist again as I

509
00:21:46,419 --> 00:21:47,860
already forgotten what I was talking

510
00:21:47,860 --> 00:21:53,350
about so we have our data we now build a

511
00:21:53,350 --> 00:21:55,780
network now we have to do something

512
00:21:55,780 --> 00:21:58,059
awesome and then we're gonna have

513
00:21:58,059 --> 00:22:00,909
something awesome right so let's talk

514
00:22:00,909 --> 00:22:02,620
about this awesome thing we have to do

515
00:22:02,620 --> 00:22:05,140
what like do you have an idea what we

516
00:22:05,140 --> 00:22:07,179
have to do now we have our network we

517
00:22:07,179 --> 00:22:09,730
have our data what do we think anyone

518
00:22:09,730 --> 00:22:16,510
have an idea yes yes very good yes we

519
00:22:16,510 --> 00:22:18,429
have to train our network because it has

520
00:22:18,429 --> 00:22:21,179
to become better so how do we do this

521
00:22:21,179 --> 00:22:24,100
let's just think about it like very high

522
00:22:24,100 --> 00:22:26,530
level e very abstract we need to kind of

523
00:22:26,530 --> 00:22:29,770
find a metric that tells us how good it

524
00:22:29,770 --> 00:22:33,309
is how good our machine is predicting

525
00:22:33,309 --> 00:22:33,880
right now

526
00:22:33,880 --> 00:22:36,370
then we're gonna change something and

527
00:22:36,370 --> 00:22:37,990
then we're gonna check the metric again

528
00:22:37,990 --> 00:22:40,990
that's how how we kind of be better

529
00:22:40,990 --> 00:22:43,780
that's kind of how I learned things you

530
00:22:43,780 --> 00:22:45,669
know I was like I got like feedback

531
00:22:45,669 --> 00:22:48,370
changed something like I'm on the right

532
00:22:48,370 --> 00:22:52,150
track so let's talk about this metric

533
00:22:52,150 --> 00:22:58,210
thing so we I call it cost loss or cost

534
00:22:58,210 --> 00:23:01,450
or loss and I'm trying to explain this

535
00:23:01,450 --> 00:23:05,860
graph to you so this is the x-axis which

536
00:23:05,860 --> 00:23:08,169
is our input there's just a measure

537
00:23:08,169 --> 00:23:10,150
which only have one input value right

538
00:23:10,150 --> 00:23:12,700
now and this is the output value that we

539
00:23:12,700 --> 00:23:15,490
have so I'm showing you this it

540
00:23:15,490 --> 00:23:18,250
basically means this is a model or like

541
00:23:18,250 --> 00:23:20,770
a system a pattern where when we input a

542
00:23:20,770 --> 00:23:22,870
hundred we're gonna get an output of

543
00:23:22,870 --> 00:23:25,270
like let's say a hundred

544
00:23:25,270 --> 00:23:27,670
not seeing that really well we input

545
00:23:27,670 --> 00:23:29,980
like 40 we're gonna get like I don't

546
00:23:29,980 --> 00:23:33,310
know 40 something and then if we input

547
00:23:33,310 --> 00:23:35,560
like 200 we're gonna get like a hundred

548
00:23:35,560 --> 00:23:40,960
and twenty maybe so this is our reality

549
00:23:40,960 --> 00:23:43,560
that we're trying to approximate and

550
00:23:43,560 --> 00:23:46,630
this is our prediction this is what our

551
00:23:46,630 --> 00:23:49,900
network is predicting right now so what

552
00:23:49,900 --> 00:23:52,120
that means is that the distance between

553
00:23:52,120 --> 00:23:54,760
the actual target value and what we

554
00:23:54,760 --> 00:23:58,330
predicted for this X that distance is

555
00:23:58,330 --> 00:24:01,330
our costs for our loss that's like how

556
00:24:01,330 --> 00:24:03,610
far we are away from the actual correct

557
00:24:03,610 --> 00:24:06,580
prediction or correct result or Target

558
00:24:06,580 --> 00:24:10,990
and so because we're not like doing all

559
00:24:10,990 --> 00:24:13,180
the calculations sequentially but like

560
00:24:13,180 --> 00:24:16,510
parallel the cost function is all the

561
00:24:16,510 --> 00:24:18,940
distances all the distances for all the

562
00:24:18,940 --> 00:24:23,220
XS that we have that's our cost for this

563
00:24:23,220 --> 00:24:28,000
model all right so if we want to

564
00:24:28,000 --> 00:24:29,980
implement it and deep learn GS

565
00:24:29,980 --> 00:24:31,990
all we have to do is find like choose an

566
00:24:31,990 --> 00:24:35,080
algorithm in this case I'm gonna choose

567
00:24:35,080 --> 00:24:37,270
mean squared error and you don't have to

568
00:24:37,270 --> 00:24:38,500
understand what it does if you're

569
00:24:38,500 --> 00:24:39,940
interested do the machine learning

570
00:24:39,940 --> 00:24:42,280
course because it gets kind of masked

571
00:24:42,280 --> 00:24:43,990
see you know don't really have the time

572
00:24:43,990 --> 00:24:46,870
to explain it right now so we need an

573
00:24:46,870 --> 00:24:48,820
algorithm and then we need the target

574
00:24:48,820 --> 00:24:52,180
Tenzer and the prediction tensor makes

575
00:24:52,180 --> 00:24:54,040
sense because we have to like calculate

576
00:24:54,040 --> 00:24:55,540
the difference like the distance between

577
00:24:55,540 --> 00:24:58,630
those two so calculate distance between

578
00:24:58,630 --> 00:24:59,860
what we want to have and what we

579
00:24:59,860 --> 00:25:02,440
actually have and then feed it in like

580
00:25:02,440 --> 00:25:05,290
some kind of function I am a mean

581
00:25:05,290 --> 00:25:06,760
squared error what it does is basically

582
00:25:06,760 --> 00:25:09,940
it squares the error so big error will

583
00:25:09,940 --> 00:25:12,670
always be like even more ridiculously

584
00:25:12,670 --> 00:25:15,010
big will make the loss even greater than

585
00:25:15,010 --> 00:25:19,150
like a smaller one squared so then the

586
00:25:19,150 --> 00:25:21,250
implementation or the code is actually

587
00:25:21,250 --> 00:25:23,470
super simple and deep learn we're just

588
00:25:23,470 --> 00:25:25,480
calling the graph and say oh give me

589
00:25:25,480 --> 00:25:27,970
mean squared cost that's the function

590
00:25:27,970 --> 00:25:29,680
I'm calling and then we passing in the

591
00:25:29,680 --> 00:25:31,540
target tensor and the prediction ten-ton

592
00:25:31,540 --> 00:25:35,200
pretty simple right and the next thing

593
00:25:35,200 --> 00:25:37,000
we need to talk about is the thing that

594
00:25:37,000 --> 00:25:38,550
actually changes

595
00:25:38,550 --> 00:25:40,110
values that actually so we have this

596
00:25:40,110 --> 00:25:41,970
metric right and then the next thing was

597
00:25:41,970 --> 00:25:43,730
the we need to change something to

598
00:25:43,730 --> 00:25:46,590
change something on our network we need

599
00:25:46,590 --> 00:25:48,930
this thing that dbrand calls an

600
00:25:48,930 --> 00:25:52,830
optimizer so in this graph the x-axis is

601
00:25:52,830 --> 00:25:55,890
the weight and the y-axis is the loss so

602
00:25:55,890 --> 00:25:58,290
in if I show you this it kind of it

603
00:25:58,290 --> 00:26:00,540
means that when the weight for our one

604
00:26:00,540 --> 00:26:05,340
input is like 60 the loss is about like

605
00:26:05,340 --> 00:26:09,150
30 if we have a weight of like 200 the

606
00:26:09,150 --> 00:26:13,230
loss of the ball like 80 something and

607
00:26:13,230 --> 00:26:15,210
it seems like if like a weight is around

608
00:26:15,210 --> 00:26:17,160
a hundred and this is the like the

609
00:26:17,160 --> 00:26:19,620
smallest loss we can have so this might

610
00:26:19,620 --> 00:26:22,800
be the point where a weight should be

611
00:26:22,800 --> 00:26:27,510
because like one small loss right right

612
00:26:27,510 --> 00:26:31,080
so when we start up a network the weight

613
00:26:31,080 --> 00:26:33,030
are always initialized randomly or they

614
00:26:33,030 --> 00:26:35,030
always should be initialized randomly

615
00:26:35,030 --> 00:26:38,310
when we start out anywhere and then what

616
00:26:38,310 --> 00:26:40,950
the optimizer does is use the magic of

617
00:26:40,950 --> 00:26:44,580
math to kind of take steps and try to

618
00:26:44,580 --> 00:26:49,800
get to the approximate the the point

619
00:26:49,800 --> 00:26:54,480
where the loss is less basically it's

620
00:26:54,480 --> 00:26:56,760
like a little more complicated than that

621
00:26:56,760 --> 00:26:58,890
but the way that we can imagine is that

622
00:26:58,890 --> 00:27:01,200
we're just taking steps towards

623
00:27:01,200 --> 00:27:07,770
hopefully the minimum and the the closer

624
00:27:07,770 --> 00:27:09,930
we get to the minimum the smaller the

625
00:27:09,930 --> 00:27:13,320
steps become as well so this is kind of

626
00:27:13,320 --> 00:27:16,080
what we're doing when we're machine

627
00:27:16,080 --> 00:27:19,950
learning with DJs so for the optimizer

628
00:27:19,950 --> 00:27:23,270
to implement that we need an algorithm

629
00:27:23,270 --> 00:27:26,340
again I'm just picking the algorithm

630
00:27:26,340 --> 00:27:28,620
that's called gradient descent which is

631
00:27:28,620 --> 00:27:30,600
which is doing what I just showed you

632
00:27:30,600 --> 00:27:32,550
there are other optimized algorithms but

633
00:27:32,550 --> 00:27:34,890
again I will like suggest to you that

634
00:27:34,890 --> 00:27:37,830
you just look into it yourself and then

635
00:27:37,830 --> 00:27:39,840
we need a learning rate the learning

636
00:27:39,840 --> 00:27:41,820
rate is just the parameter it's a number

637
00:27:41,820 --> 00:27:44,550
that determines how big these steps are

638
00:27:44,550 --> 00:27:46,470
so this is a small learning rate and

639
00:27:46,470 --> 00:27:48,420
this is a big learning rate in this

640
00:27:48,420 --> 00:27:50,190
example it kind of looks like the bigger

641
00:27:50,190 --> 00:27:52,060
learning rate is a problem because we

642
00:27:52,060 --> 00:27:55,000
move away from the minimum could be a

643
00:27:55,000 --> 00:27:57,250
problem it's just something that you

644
00:27:57,250 --> 00:28:00,130
kind of have to try out for yourself to

645
00:28:00,130 --> 00:28:02,200
see which learning rate is best suited

646
00:28:02,200 --> 00:28:04,690
for your problem

647
00:28:04,690 --> 00:28:08,140
and again the implementation is or was

648
00:28:08,140 --> 00:28:10,210
actually super simple we just had to

649
00:28:10,210 --> 00:28:12,520
call deep learn and just say give me the

650
00:28:12,520 --> 00:28:14,530
I don't know what the essence for but

651
00:28:14,530 --> 00:28:16,000
give me the gradient descent optimizer

652
00:28:16,000 --> 00:28:20,010
and then just pass in a learning rate

653
00:28:20,010 --> 00:28:23,350
that is basically it so we already have

654
00:28:23,350 --> 00:28:25,300
our data or network and now we set up

655
00:28:25,300 --> 00:28:26,860
the training and all we need to do is

656
00:28:26,860 --> 00:28:30,850
run now all of you I kind of look at me

657
00:28:30,850 --> 00:28:32,710
like well so how does it work

658
00:28:32,710 --> 00:28:34,720
actually I just yeah I understood what

659
00:28:34,720 --> 00:28:35,740
you said but I still don't understand

660
00:28:35,740 --> 00:28:38,050
how it works so I'm gonna try to show

661
00:28:38,050 --> 00:28:40,390
you how it actually works in a super

662
00:28:40,390 --> 00:28:43,600
nice diagram so we start out with this

663
00:28:43,600 --> 00:28:47,910
this is our network and we have our data

664
00:28:47,910 --> 00:28:52,570
all right we're feeding in our data into

665
00:28:52,570 --> 00:28:54,280
our network so this is we're feeding it

666
00:28:54,280 --> 00:28:57,220
into the input and then you know a

667
00:28:57,220 --> 00:28:59,650
compute staff blah blah blah and then it

668
00:28:59,650 --> 00:29:02,050
outputs three that's our prediction then

669
00:29:02,050 --> 00:29:04,300
we look into our data again and be fine

670
00:29:04,300 --> 00:29:07,660
out the target was actually two so what

671
00:29:07,660 --> 00:29:09,700
we had I have to do is calculate the

672
00:29:09,700 --> 00:29:11,700
distance in this case I'm just using

673
00:29:11,700 --> 00:29:14,290
subtraction I mean it's not what I used

674
00:29:14,290 --> 00:29:15,700
before like I said it was another

675
00:29:15,700 --> 00:29:17,560
algorithm was in this case to make it

676
00:29:17,560 --> 00:29:20,680
simple the cost is just one it's just a

677
00:29:20,680 --> 00:29:22,990
difference then we're feeding this one

678
00:29:22,990 --> 00:29:26,050
into our optimizer what's the optimizer

679
00:29:26,050 --> 00:29:30,060
does is take the one and then magically

680
00:29:30,060 --> 00:29:33,850
goes back through the and network and

681
00:29:33,850 --> 00:29:36,010
changes all the weights so when we go

682
00:29:36,010 --> 00:29:38,830
from the input to the back it's called

683
00:29:38,830 --> 00:29:40,990
forward propagation because we propagate

684
00:29:40,990 --> 00:29:43,270
all the data forward and then what the

685
00:29:43,270 --> 00:29:45,580
optimizer does is called backwards

686
00:29:45,580 --> 00:29:48,070
propagation because it propagates values

687
00:29:48,070 --> 00:29:51,250
backwards the difference is when we do

688
00:29:51,250 --> 00:29:53,380
forward propagation we take like actual

689
00:29:53,380 --> 00:29:55,780
inputs like the feature inputs

690
00:29:55,780 --> 00:29:57,310
pass it through to make a prediction

691
00:29:57,310 --> 00:29:59,740
when we do backwards propagation we're

692
00:29:59,740 --> 00:30:02,320
not actually caring about input values

693
00:30:02,320 --> 00:30:04,630
using the cost to try to change the

694
00:30:04,630 --> 00:30:06,850
weights so we're not actually doing

695
00:30:06,850 --> 00:30:08,260
anything with the prediction we just

696
00:30:08,260 --> 00:30:09,940
like we just need the prediction to know

697
00:30:09,940 --> 00:30:12,850
how good are our network is performing

698
00:30:12,850 --> 00:30:14,770
and then taking that information and

699
00:30:14,770 --> 00:30:16,420
trying to change the weight in a way

700
00:30:16,420 --> 00:30:18,400
that it's going to perform better next

701
00:30:18,400 --> 00:30:23,050
round so this is basically the entire

702
00:30:23,050 --> 00:30:25,420
magic which I hope is not that

703
00:30:25,420 --> 00:30:27,340
complicated anymore I hope it makes

704
00:30:27,340 --> 00:30:31,630
sense to you now there's like like I'm

705
00:30:31,630 --> 00:30:34,360
going to show some code on how to

706
00:30:34,360 --> 00:30:36,850
generate the training data but it's the

707
00:30:36,850 --> 00:30:39,520
important thing here so I'm like

708
00:30:39,520 --> 00:30:42,460
generating a bunch of training data here

709
00:30:42,460 --> 00:30:45,100
is that the input data and the target

710
00:30:45,100 --> 00:30:48,430
data data are in two separate arrays and

711
00:30:48,430 --> 00:30:52,840
the way that they're reference is just

712
00:30:52,840 --> 00:30:56,740
by the index and they're like two

713
00:30:56,740 --> 00:30:59,440
separate areas at the point and also we

714
00:30:59,440 --> 00:31:01,210
don't push just like normal arrays

715
00:31:01,210 --> 00:31:02,770
inside there we have to pull it like

716
00:31:02,770 --> 00:31:05,440
these deep learn areas but like I said I

717
00:31:05,440 --> 00:31:07,390
don't know I actually haven't looked

718
00:31:07,390 --> 00:31:09,490
into how it works in tenza flow right

719
00:31:09,490 --> 00:31:11,710
not like what you would have to call but

720
00:31:11,710 --> 00:31:13,690
they actually have good examples for

721
00:31:13,690 --> 00:31:18,090
that you can just check it out anyway so

722
00:31:18,090 --> 00:31:20,650
it's not that important what's happening

723
00:31:20,650 --> 00:31:22,600
here it's kind of just that we have to

724
00:31:22,600 --> 00:31:25,720
put the training data that we generated

725
00:31:25,720 --> 00:31:28,030
have to put it in this like shuffled

726
00:31:28,030 --> 00:31:29,950
input provider so it would shuffle the

727
00:31:29,950 --> 00:31:31,960
data for us but the reference is still

728
00:31:31,960 --> 00:31:34,210
intact from the input to the target

729
00:31:34,210 --> 00:31:36,880
that's basically all like this slide

730
00:31:36,880 --> 00:31:40,930
shows all right so when we train it when

731
00:31:40,930 --> 00:31:42,910
we run everything now that we have

732
00:31:42,910 --> 00:31:45,190
everything it actually it doesn't look

733
00:31:45,190 --> 00:31:47,140
that complicated anymore we have to

734
00:31:47,140 --> 00:31:50,890
start a session and we passed this math

735
00:31:50,890 --> 00:31:53,980
environment and math basically tells you

736
00:31:53,980 --> 00:31:56,350
if you are in the browser you can

737
00:31:56,350 --> 00:31:58,990
utilize the GPU if you're not in the

738
00:31:58,990 --> 00:32:01,630
browser you have to use the CPU and you

739
00:32:01,630 --> 00:32:03,430
know it's nice to have things need to be

740
00:32:03,430 --> 00:32:06,030
you because the leg runs much faster and

741
00:32:06,030 --> 00:32:10,300
then then you work with the CPU and then

742
00:32:10,300 --> 00:32:14,260
on this math environment you call I'm

743
00:32:14,260 --> 00:32:15,790
going to train this

744
00:32:15,790 --> 00:32:19,210
okay on the session call train pass it

745
00:32:19,210 --> 00:32:21,850
okay you need the cost tensor and you

746
00:32:21,850 --> 00:32:23,580
need the feed entries which is the data

747
00:32:23,580 --> 00:32:25,870
the batch size basically just

748
00:32:25,870 --> 00:32:28,390
determining how many data points are we

749
00:32:28,390 --> 00:32:31,840
going to iterate through right now the

750
00:32:31,840 --> 00:32:34,030
optimizer you know it like it takes the

751
00:32:34,030 --> 00:32:37,210
cost tensor and the network and then try

752
00:32:37,210 --> 00:32:39,700
to like change things change the weights

753
00:32:39,700 --> 00:32:41,980
and those last parameter is just we just

754
00:32:41,980 --> 00:32:45,940
needed to output the cost the loss that

755
00:32:45,940 --> 00:32:48,580
we have after each bedroom so this is

756
00:32:48,580 --> 00:32:51,340
the code and the nice thing about you

757
00:32:51,340 --> 00:32:52,630
know running in the browser is that you

758
00:32:52,630 --> 00:32:54,250
can utilize all the nice browser things

759
00:32:54,250 --> 00:32:58,020
like service workers and everything so I

760
00:32:58,020 --> 00:33:00,940
spun up a little demo and I'm gonna just

761
00:33:00,940 --> 00:33:02,440
show you the video right now cuz it

762
00:33:02,440 --> 00:33:05,590
takes forever for to run actually so

763
00:33:05,590 --> 00:33:08,950
like I said what we wanted to achieve

764
00:33:08,950 --> 00:33:11,020
was to do a complementary color

765
00:33:11,020 --> 00:33:14,200
prediction and in this case the input

766
00:33:14,200 --> 00:33:16,360
color will always be this like slight

767
00:33:16,360 --> 00:33:18,820
like light purple and this is our target

768
00:33:18,820 --> 00:33:21,460
color this is the color that we want the

769
00:33:21,460 --> 00:33:22,990
machine to predict this is the color

770
00:33:22,990 --> 00:33:24,370
that the machine is predicting right now

771
00:33:24,370 --> 00:33:26,740
this is completely randomly set up so it

772
00:33:26,740 --> 00:33:29,380
could be any color it says cost zero

773
00:33:29,380 --> 00:33:31,240
here but that's obviously wrong because

774
00:33:31,240 --> 00:33:32,920
cos zero would mean that we have the

775
00:33:32,920 --> 00:33:35,560
perfect prediction it should say cost

776
00:33:35,560 --> 00:33:39,730
one but yeah I didn't fix it and I

777
00:33:39,730 --> 00:33:40,690
thought it would be easier to just

778
00:33:40,690 --> 00:33:42,400
explain to you that it's not correct

779
00:33:42,400 --> 00:33:45,790
then should actually fix it so let's

780
00:33:45,790 --> 00:33:49,630
take a look at this video so you can see

781
00:33:49,630 --> 00:33:51,880
that it's like slowly like changing the

782
00:33:51,880 --> 00:33:53,650
values and getting like better and you

783
00:33:53,650 --> 00:33:56,640
can also see that the cost is getting

784
00:33:56,640 --> 00:33:58,390
smaller and smaller

785
00:33:58,390 --> 00:34:00,730
and then at some points I'm running like

786
00:34:00,730 --> 00:34:02,830
a thousand patch this year I think so

787
00:34:02,830 --> 00:34:05,950
I'm running a 25 batch size and doing it

788
00:34:05,950 --> 00:34:07,990
I'll run a thousand batches and here at

789
00:34:07,990 --> 00:34:10,870
the end I don't know how you feel about

790
00:34:10,870 --> 00:34:12,460
it but I think it's like almost

791
00:34:12,460 --> 00:34:14,830
indistinguishable the difference and if

792
00:34:14,830 --> 00:34:17,409
you like if we look at the beginning it

793
00:34:17,409 --> 00:34:19,570
starts all like with this and it like

794
00:34:19,570 --> 00:34:22,720
really gradually very slowly kind of

795
00:34:22,720 --> 00:34:25,770
like approximates the actual value and

796
00:34:25,770 --> 00:34:27,550
but

797
00:34:27,550 --> 00:34:29,139
every time you set it up it starts

798
00:34:29,139 --> 00:34:31,119
completely randomly so I had to make a

799
00:34:31,119 --> 00:34:33,099
video of like a nice run that actually

800
00:34:33,099 --> 00:34:36,700
shows what I want to show but you know

801
00:34:36,700 --> 00:34:38,320
you can like I said you can check out

802
00:34:38,320 --> 00:34:40,119
the repository and just try it for

803
00:34:40,119 --> 00:34:43,359
yourself this was one example from

804
00:34:43,359 --> 00:34:45,730
Google but they've scrapped it with all

805
00:34:45,730 --> 00:34:48,040
the with all the documentation and

806
00:34:48,040 --> 00:34:51,310
everything so you kind of have to check

807
00:34:51,310 --> 00:34:53,560
out my specific repository for still to

808
00:34:53,560 --> 00:34:56,770
run all right some links for you to

809
00:34:56,770 --> 00:34:58,839
check out so first of all that's the

810
00:34:58,839 --> 00:35:01,869
repository I was talking about then

811
00:35:01,869 --> 00:35:05,400
there's a deep learning j/s which is

812
00:35:05,400 --> 00:35:07,780
apparently not deep Londres anymore but

813
00:35:07,780 --> 00:35:10,330
it will take you to tens of florges

814
00:35:10,330 --> 00:35:15,130
this is like a really nice explanation

815
00:35:15,130 --> 00:35:18,130
no this is the demo which I don't

816
00:35:18,130 --> 00:35:20,380
actually know if it's still up or not

817
00:35:20,380 --> 00:35:22,990
so you have to see for yourself okay

818
00:35:22,990 --> 00:35:24,880
this is a very nice explanation of from

819
00:35:24,880 --> 00:35:27,190
deep learning fundamentals that I didn't

820
00:35:27,190 --> 00:35:29,470
cover like what kind of activation

821
00:35:29,470 --> 00:35:31,450
function should I use if you're

822
00:35:31,450 --> 00:35:34,030
interested in that and oh it's the

823
00:35:34,030 --> 00:35:36,930
phones I didn't put in the course so

824
00:35:36,930 --> 00:35:39,700
Coursera is the platform and it's just

825
00:35:39,700 --> 00:35:42,570
called Stanford machine learning course

826
00:35:42,570 --> 00:35:45,820
alright and I have to show the slide we

827
00:35:45,820 --> 00:35:48,040
are hiring we have offices in those

828
00:35:48,040 --> 00:35:49,420
beautiful cities so if you are

829
00:35:49,420 --> 00:35:51,550
interested and you know doing cloud

830
00:35:51,550 --> 00:35:53,560
computing which has nothing to do what I

831
00:35:53,560 --> 00:35:56,230
was just talking about you can talk to

832
00:35:56,230 --> 00:35:59,080
me or just go to the website thank you

833
00:35:59,080 --> 00:36:04,420
and then now that's

