1
00:00:01,730 --> 00:00:06,509

hi I'm Andy and I work at Shopify we're

2
00:00:06,509 --> 00:00:09,300
an e-commerce platform and today I'm

3
00:00:09,300 --> 00:00:10,800
going to be giving you a whirlwind

4
00:00:10,800 --> 00:00:14,280
introduction to typescript so first of

5
00:00:14,280 --> 00:00:16,529
Reif disclaimer most of the stuff I'm

6
00:00:16,529 --> 00:00:18,510
going to talk about today is typescript

7
00:00:18,510 --> 00:00:21,090
specific but typescript is not the only

8
00:00:21,090 --> 00:00:23,760
way to bring types into your javascript

9
00:00:23,760 --> 00:00:25,050
there's a lot of other really good

10
00:00:25,050 --> 00:00:27,390
options I actually first started with

11
00:00:27,390 --> 00:00:30,390
flow and then we switched to typescript

12
00:00:30,390 --> 00:00:32,130
at work and so that's what I do most of

13
00:00:32,130 --> 00:00:34,320
my time but reason or flow or typescript

14
00:00:34,320 --> 00:00:37,770
they're all great okay so first I want

15
00:00:37,770 --> 00:00:39,540
to give you a little bit of why to use

16
00:00:39,540 --> 00:00:41,309
types this is probably the most

17
00:00:41,309 --> 00:00:42,690
important part and then we'll dive into

18
00:00:42,690 --> 00:00:45,210
some typescript syntax to hopefully make

19
00:00:45,210 --> 00:00:48,420
it a little less scary to get started so

20
00:00:48,420 --> 00:00:50,730
I really want to talk about two main

21
00:00:50,730 --> 00:00:52,469
reasons that you would want to use types

22
00:00:52,469 --> 00:00:54,899
in your project the first one is that if

23
00:00:54,899 --> 00:00:56,610
you're working on a large application as

24
00:00:56,610 --> 00:00:59,129
that application grows it's impossible

25
00:00:59,129 --> 00:01:01,230
to keep in your own mind everything

26
00:01:01,230 --> 00:01:02,820
that's happening so if you're working on

27
00:01:02,820 --> 00:01:05,070
a small library like maybe the overhead

28
00:01:05,070 --> 00:01:08,130
of types is a little bit overkill but if

29
00:01:08,130 --> 00:01:08,909
you're working on a really big

30
00:01:08,909 --> 00:01:11,220
application eventually it's gonna get to

31
00:01:11,220 --> 00:01:13,229
the point where you can't keep track of

32
00:01:13,229 --> 00:01:16,140
all the changes that are happening to

33
00:01:16,140 --> 00:01:17,970
functions or other interfaces in your

34
00:01:17,970 --> 00:01:20,009
application but the compiler can keep

35
00:01:20,009 --> 00:01:22,320
track of that so it's like having this

36
00:01:22,320 --> 00:01:25,560
like super powered buddy on your team

37
00:01:25,560 --> 00:01:27,210
who's gonna keep track of everything

38
00:01:27,210 --> 00:01:29,310
that's happening the second thing is

39
00:01:29,310 --> 00:01:31,979
that it's really hard to keep

40
00:01:31,979 --> 00:01:33,900
documentation up to date whether it be

41
00:01:33,900 --> 00:01:36,240
comments in your code or whether it be a

42
00:01:36,240 --> 00:01:39,090
readme or whatever else the nice thing

43
00:01:39,090 --> 00:01:40,920
about types is that they're kind they

44
00:01:40,920 --> 00:01:42,180
make your code a little more self

45
00:01:42,180 --> 00:01:44,490
documenting and since the compiler is

46
00:01:44,490 --> 00:01:46,979
going to be enforcing those types it's a

47
00:01:46,979 --> 00:01:48,750
lot harder to get them out of date it's

48
00:01:48,750 --> 00:01:50,790
definitely possible and it's definitely

49
00:01:50,790 --> 00:01:53,100
easy to do things that still make it

50
00:01:53,100 --> 00:01:54,899
hard to understand but it's a little bit

51
00:01:54,899 --> 00:01:57,030
of a help to make your code easier to

52
00:01:57,030 --> 00:02:01,680
jump into all right so basic types we're

53
00:02:01,680 --> 00:02:03,000
gonna start going pretty fast through

54
00:02:03,000 --> 00:02:05,310
typescript syntax here just to kind of

55
00:02:05,310 --> 00:02:08,129
do an overview so here is like sort of a

56
00:02:08,129 --> 00:02:10,830
hello world of some very primitive types

57
00:02:10,830 --> 00:02:12,840
and typescript you can see that it looks

58
00:02:12,840 --> 00:02:13,950
a lot like normal Travis

59
00:02:13,950 --> 00:02:15,989
script but you have a colon and then the

60
00:02:15,989 --> 00:02:17,730
name of a type which is how you're gonna

61
00:02:17,730 --> 00:02:20,790
annotate your variables now that

62
00:02:20,790 --> 00:02:22,440
actually isn't necessary a lot of the

63
00:02:22,440 --> 00:02:24,390
time I would say that I more often than

64
00:02:24,390 --> 00:02:26,700
not don't have to add explicit

65
00:02:26,700 --> 00:02:29,580
annotations to my code because

66
00:02:29,580 --> 00:02:31,380
typescript is very good at inferring

67
00:02:31,380 --> 00:02:35,250
what I what I mean you can also see here

68
00:02:35,250 --> 00:02:36,870
this is where the benefit starts coming

69
00:02:36,870 --> 00:02:38,910
in so this screenshot is from Visual

70
00:02:38,910 --> 00:02:40,860
Studio code but it's really just a

71
00:02:40,860 --> 00:02:42,420
reflection of the error that the

72
00:02:42,420 --> 00:02:43,830
compiler is outputting so you're not

73
00:02:43,830 --> 00:02:45,620
tied to using vs code with typescript

74
00:02:45,620 --> 00:02:47,700
but you can see it has a red squiggly

75
00:02:47,700 --> 00:02:50,220
under this index of call because the

76
00:02:50,220 --> 00:02:52,110
boolean doesn't have a method called

77
00:02:52,110 --> 00:02:55,049
index of all right so arrays this is a

78
00:02:55,049 --> 00:02:57,150
little more complicated but looks much

79
00:02:57,150 --> 00:02:58,799
the same so you have an annotation and

80
00:02:58,799 --> 00:03:00,599
you just put square brackets after 8 to

81
00:03:00,599 --> 00:03:02,040
say that it's an array so you can see

82
00:03:02,040 --> 00:03:05,400
here I have this array of foods and if I

83
00:03:05,400 --> 00:03:06,840
initialize it to these strings it's

84
00:03:06,840 --> 00:03:08,849
happy if I push in a new string it's

85
00:03:08,849 --> 00:03:10,980
still happy but if I were to try to

86
00:03:10,980 --> 00:03:12,870
initialize it to an array of numbers or

87
00:03:12,870 --> 00:03:14,819
if I were to push in a boolean it's

88
00:03:14,819 --> 00:03:16,620
going to complain at me and I would have

89
00:03:16,620 --> 00:03:17,329
to fix that

90
00:03:17,329 --> 00:03:19,380
functions so this is where things get

91
00:03:19,380 --> 00:03:21,329
really exciting so your functions you're

92
00:03:21,329 --> 00:03:23,040
gonna be importing them all over the

93
00:03:23,040 --> 00:03:24,720
place in your application before those

94
00:03:24,720 --> 00:03:26,250
were like pretty contrived examples

95
00:03:26,250 --> 00:03:27,780
because like you can look at your

96
00:03:27,780 --> 00:03:29,670
variables three or four lines above or

97
00:03:29,670 --> 00:03:31,560
you know even in the same file but a

98
00:03:31,560 --> 00:03:32,850
function this is where you're gonna be

99
00:03:32,850 --> 00:03:34,109
able to catch things across your whole

100
00:03:34,109 --> 00:03:36,930
application as you import things so you

101
00:03:36,930 --> 00:03:39,299
can see here that I typed my parameter

102
00:03:39,299 --> 00:03:41,549
with that same annotation there's

103
00:03:41,549 --> 00:03:43,560
another annotation after the arguments

104
00:03:43,560 --> 00:03:45,600
list which is the return type and then

105
00:03:45,600 --> 00:03:47,130
we just write normal JavaScript on the

106
00:03:47,130 --> 00:03:49,230
inside so if I pass a trace car it's

107
00:03:49,230 --> 00:03:50,819
going to be happy but if I pass it a

108
00:03:50,819 --> 00:03:53,870
boolean then it's going to complain

109
00:03:53,870 --> 00:03:56,340
again typescript is pretty smart at

110
00:03:56,340 --> 00:03:58,170
inferring what my variables are going to

111
00:03:58,170 --> 00:03:59,819
be and what my return types are so we

112
00:03:59,819 --> 00:04:02,130
can actually omit that return type if

113
00:04:02,130 --> 00:04:05,430
you don't want to do so much typing all

114
00:04:05,430 --> 00:04:09,569
right unions this is again a little bit

115
00:04:09,569 --> 00:04:11,130
more of an advanced feature so you can

116
00:04:11,130 --> 00:04:14,069
think about a union like an or this is

117
00:04:14,069 --> 00:04:15,599
something that I use all the time so

118
00:04:15,599 --> 00:04:17,549
here like I want to say that a vegetable

119
00:04:17,549 --> 00:04:21,780
can be a broccoli or a carrot I say that

120
00:04:21,780 --> 00:04:23,669
fruit can be any of these fruits and

121
00:04:23,669 --> 00:04:26,550
then I can also use unions with types so

122
00:04:26,550 --> 00:04:27,750
I can say that an ingredient

123
00:04:27,750 --> 00:04:29,310
for this restaurant is going to be

124
00:04:29,310 --> 00:04:31,800
either a vegetable or a fruit and it can

125
00:04:31,800 --> 00:04:34,440
be any of those values so then if I'm

126
00:04:34,440 --> 00:04:37,260
making a recipe for juice and I give it

127
00:04:37,260 --> 00:04:39,540
broccoli and watermelon it's happy but

128
00:04:39,540 --> 00:04:41,640
if I try to make this sludge drink out

129
00:04:41,640 --> 00:04:43,740
of bread and bacon it's going to be very

130
00:04:43,740 --> 00:04:45,720
unhappy because that's neither a

131
00:04:45,720 --> 00:04:47,450
vegetable nor a fruit

132
00:04:47,450 --> 00:04:49,890
all right interfaces this is going to be

133
00:04:49,890 --> 00:04:51,000
our last type and then we'll go through

134
00:04:51,000 --> 00:04:53,010
a short little example

135
00:04:53,010 --> 00:04:55,320
so interfaces this is how you type

136
00:04:55,320 --> 00:04:57,570
objects so this looks a lot like playing

137
00:04:57,570 --> 00:05:00,000
object notation you have a colon and

138
00:05:00,000 --> 00:05:02,100
then instead of the value you put your

139
00:05:02,100 --> 00:05:05,460
type name you also can use all of these

140
00:05:05,460 --> 00:05:07,530
other features inside of your interfaces

141
00:05:07,530 --> 00:05:09,750
so here we have a union between a bunch

142
00:05:09,750 --> 00:05:12,000
of animals you have your favorite animal

143
00:05:12,000 --> 00:05:13,470
you can make it optional by allowing

144
00:05:13,470 --> 00:05:15,540
nulls and then type script will help you

145
00:05:15,540 --> 00:05:16,980
check null before you try to access

146
00:05:16,980 --> 00:05:19,650
those values or anything like that all

147
00:05:19,650 --> 00:05:20,220
right

148
00:05:20,220 --> 00:05:22,850
so most of my day I spend writing react

149
00:05:22,850 --> 00:05:25,620
and that is like where typescript really

150
00:05:25,620 --> 00:05:27,750
shines for me I like it pretty well when

151
00:05:27,750 --> 00:05:29,340
I'm writing playing typescript but for

152
00:05:29,340 --> 00:05:31,410
react components I think it's the bee's

153
00:05:31,410 --> 00:05:34,020
knees so I'm here we have a really

154
00:05:34,020 --> 00:05:36,810
simple example if you used the prop

155
00:05:36,810 --> 00:05:38,880
types package this probably looks very

156
00:05:38,880 --> 00:05:41,430
familiar to you because in prop types

157
00:05:41,430 --> 00:05:44,160
you also have to like declare your props

158
00:05:44,160 --> 00:05:46,350
the nice thing about this is you get a

159
00:05:46,350 --> 00:05:48,030
little more help from the compiler and

160
00:05:48,030 --> 00:05:49,800
it happens at compile time instead of at

161
00:05:49,800 --> 00:05:52,290
runtime the other nice thing is that you

162
00:05:52,290 --> 00:05:53,669
don't have to include the prop types

163
00:05:53,669 --> 00:05:56,130
package all of this gets stripped out at

164
00:05:56,130 --> 00:05:59,130
compile time and then you ship a smaller

165
00:05:59,130 --> 00:06:03,210
bundle a little bit so just to walk

166
00:06:03,210 --> 00:06:04,860
through this we have our props we're

167
00:06:04,860 --> 00:06:06,900
gonna have one prop called size that

168
00:06:06,900 --> 00:06:10,229
accepts either small medium or large and

169
00:06:10,229 --> 00:06:12,600
then we just pass it into our component

170
00:06:12,600 --> 00:06:14,910
as usual and you can see here that

171
00:06:14,910 --> 00:06:17,070
inside my component I have very little

172
00:06:17,070 --> 00:06:19,800
typescript specific syntax it really

173
00:06:19,800 --> 00:06:22,010
looks pretty much like normal JavaScript

174
00:06:22,010 --> 00:06:24,120
and then this is what it looks like to

175
00:06:24,120 --> 00:06:26,310
use that so I import my icon component

176
00:06:26,310 --> 00:06:27,630
and if I don't give it any props

177
00:06:27,630 --> 00:06:29,250
typescript is going to complain to me

178
00:06:29,250 --> 00:06:30,870
because I told it that I was expecting

179
00:06:30,870 --> 00:06:35,490
some props here if I give it size it can

180
00:06:35,490 --> 00:06:37,260
suggest to me what those props should be

181
00:06:37,260 --> 00:06:38,640
so this is really nice when you're like

182
00:06:38,640 --> 00:06:40,800
using a design system inside your

183
00:06:40,800 --> 00:06:41,400
company

184
00:06:41,400 --> 00:06:42,990
you can know exactly what the values are

185
00:06:42,990 --> 00:06:45,240
supposed to be again this is the vs code

186
00:06:45,240 --> 00:06:47,070
interface but when you run the

187
00:06:47,070 --> 00:06:48,630
typescript compiler it gives you this

188
00:06:48,630 --> 00:06:50,669
exact same suggestion where it'll list

189
00:06:50,669 --> 00:06:53,760
what it's expecting and if I give it

190
00:06:53,760 --> 00:06:55,410
something that it's expecting it will be

191
00:06:55,410 --> 00:06:57,419
happy you know compile my code and I can

192
00:06:57,419 --> 00:06:59,880
run it so I hope that has made

193
00:06:59,880 --> 00:07:02,370
typescript a little less mysterious you

194
00:07:02,370 --> 00:07:04,470
can find me at AS Moakler thank you very

195
00:07:04,470 --> 00:07:05,050
much

