1
00:00:09,170 --> 00:00:15,660

so my name is Elijah Tinto ah I work for

2
00:00:15,660 --> 00:00:18,180
art 90 and we're located in New York

3
00:00:18,180 --> 00:00:24,840
City today I'll be talking talking to

4
00:00:24,840 --> 00:00:27,869
you about why the node has a dom i think

5
00:00:27,869 --> 00:00:29,550
this is important that I explain this

6
00:00:29,550 --> 00:00:32,369
there's a lot of jaywalking and buses

7
00:00:32,369 --> 00:00:34,469
and taxis in New York and if I get hit

8
00:00:34,469 --> 00:00:36,989
by any of these I think it's important

9
00:00:36,989 --> 00:00:38,579
that you guys know what I'm what I'm

10
00:00:38,579 --> 00:00:39,809
trying to do what I'm trying to

11
00:00:39,809 --> 00:00:43,530
accomplish here so the first thing that

12
00:00:43,530 --> 00:00:45,090
I think is important and I get asked

13
00:00:45,090 --> 00:00:49,649
this all the time what is a Dom right so

14
00:00:49,649 --> 00:00:54,120
the w3c and its infinite wisdom defines

15
00:00:54,120 --> 00:00:56,640
it as the document object model or dom

16
00:00:56,640 --> 00:00:58,440
is a platform and language neutral

17
00:00:58,440 --> 00:01:00,600
interface that will allow programs and

18
00:01:00,600 --> 00:01:02,730
scripts to dynamically access and update

19
00:01:02,730 --> 00:01:04,769
the content structure and style of

20
00:01:04,769 --> 00:01:08,369
documents I mean that's great but I'm

21
00:01:08,369 --> 00:01:13,170
still I'm still confused right so when I

22
00:01:13,170 --> 00:01:16,619
think of the Dom my mind immediately

23
00:01:16,619 --> 00:01:20,820
goes to you know a browser so this is

24
00:01:20,820 --> 00:01:25,830
the nodejs homepage and the image here

25
00:01:25,830 --> 00:01:28,530
is the result of markup being turned

26
00:01:28,530 --> 00:01:31,560
into a Dom being styled being run

27
00:01:31,560 --> 00:01:34,770
through a reflow like engine and then

28
00:01:34,770 --> 00:01:40,920
being rendered to an image so as an

29
00:01:40,920 --> 00:01:44,430
example here's some markup it's the X

30
00:01:44,430 --> 00:01:47,759
it's the TOC like the links the

31
00:01:47,759 --> 00:01:49,860
navigation on the left hand of the page

32
00:01:49,860 --> 00:01:53,700
and when the browser retrieves these or

33
00:01:53,700 --> 00:01:56,280
when it retrieves the HTML it sends it

34
00:01:56,280 --> 00:02:01,250
to a parser the parser is kind of like a

35
00:02:01,250 --> 00:02:05,579
assembly line it takes raw material or

36
00:02:05,579 --> 00:02:08,340
markup in this case and it turns it into

37
00:02:08,340 --> 00:02:11,099
usable components which we know as a

38
00:02:11,099 --> 00:02:13,060
tree of Dom nodes

39
00:02:13,060 --> 00:02:16,519
by the way these are f-22s which and

40
00:02:16,519 --> 00:02:23,120
they're awesome okay so after they get

41
00:02:23,120 --> 00:02:26,450
turned into a dom tree as you can see up

42
00:02:26,450 --> 00:02:28,610
here there's i've used a tool i don't

43
00:02:28,610 --> 00:02:31,579
know if you can see that he's a tool

44
00:02:31,579 --> 00:02:34,849
called HTML graph to graph the markup on

45
00:02:34,849 --> 00:02:40,700
the no th node homepage it's kind of

46
00:02:40,700 --> 00:02:42,379
interesting to see this whole this whole

47
00:02:42,379 --> 00:02:46,790
tree visualize but the purpose of this

48
00:02:46,790 --> 00:02:49,519
is to show that the navigation div the

49
00:02:49,519 --> 00:02:51,769
purple note that the orange arrow is

50
00:02:51,769 --> 00:02:55,959
pointing to is actually like parenting

51
00:02:55,959 --> 00:03:00,260
this whole hand looking thing which is a

52
00:03:00,260 --> 00:03:06,420
noel a bunch of li is a bunch of links

53
00:03:06,430 --> 00:03:09,950
so why is this valuable what what is the

54
00:03:09,950 --> 00:03:12,889
purpose of this basically there's no

55
00:03:12,889 --> 00:03:15,109
more text manipulation you can't read

56
00:03:15,109 --> 00:03:17,810
documents as a tree and you don't have

57
00:03:17,810 --> 00:03:21,709
to write x things and just you can use

58
00:03:21,709 --> 00:03:23,480
it programmatically as opposed to

59
00:03:23,480 --> 00:03:28,040
packing ground manipulation is easier

60
00:03:28,040 --> 00:03:30,199
because we now have the tools to you

61
00:03:30,199 --> 00:03:33,829
know traverse the structure manipulating

62
00:03:33,829 --> 00:03:37,129
nodes moving them changing them whatever

63
00:03:37,129 --> 00:03:40,879
you want to do so this is also good

64
00:03:40,879 --> 00:03:43,669
because it's a common paradigm the DOM

65
00:03:43,669 --> 00:03:46,040
is everywhere it's in server-side

66
00:03:46,040 --> 00:03:48,190
languages or server side of platforms

67
00:03:48,190 --> 00:03:51,220
browsers I mean it's one of the most

68
00:03:51,220 --> 00:03:55,099
common paradigms around I mean it's just

69
00:03:55,099 --> 00:03:57,829
a tree and some functionality to

70
00:03:57,829 --> 00:04:01,370
manipulate you know the notes so I'd

71
00:04:01,370 --> 00:04:05,379
like now to dive into some of like the

72
00:04:05,379 --> 00:04:07,400
implementations on server cited

73
00:04:07,400 --> 00:04:15,049
platforms and see how they work so

74
00:04:15,049 --> 00:04:19,880
basically every every server cited link

75
00:04:19,880 --> 00:04:22,520
every server cited platform has at least

76
00:04:22,520 --> 00:04:24,550
one Dom

77
00:04:24,550 --> 00:04:27,200
the problem there are many problems with

78
00:04:27,200 --> 00:04:31,190
these though a lot of them actually all

79
00:04:31,190 --> 00:04:33,890
of them you can't execute JavaScript and

80
00:04:33,890 --> 00:04:37,730
we all love JavaScript so the question

81
00:04:37,730 --> 00:04:41,000
is what would you use these things for

82
00:04:41,000 --> 00:04:44,630
and in general it's a lot of XML

83
00:04:44,630 --> 00:04:51,830
processes XML manipulation there's

84
00:04:51,830 --> 00:04:56,380
xmlrpc soap xpath xslt and these are

85
00:04:56,380 --> 00:04:58,760
these are a lot of short-lived arms

86
00:04:58,760 --> 00:05:03,350
right they they're not meant to live

87
00:05:03,350 --> 00:05:05,840
longer than the time that it takes to

88
00:05:05,840 --> 00:05:11,200
remake a request there's no window

89
00:05:11,200 --> 00:05:13,910
there's no events so even if you had a

90
00:05:13,910 --> 00:05:16,240
long running Dom you couldn't you know

91
00:05:16,240 --> 00:05:19,070
wait for an event to happen and capture

92
00:05:19,070 --> 00:05:21,710
or bubble it or whatever and they're

93
00:05:21,710 --> 00:05:25,900
they're extremely hard to bootstrap and

94
00:05:25,900 --> 00:05:28,730
again there is no JavaScript so this is

95
00:05:28,730 --> 00:05:34,940
the xml and HTML rift which i don't see

96
00:05:34,940 --> 00:05:37,580
as it's horrible like you should be able

97
00:05:37,580 --> 00:05:39,890
to process HTML and have a headless

98
00:05:39,890 --> 00:05:45,260
browser native to your platform so

99
00:05:45,260 --> 00:05:48,380
markup is good we all know this it's by

100
00:05:48,380 --> 00:05:50,390
far the most known language even

101
00:05:50,390 --> 00:05:52,570
non-technical people know what markup is

102
00:05:52,570 --> 00:05:54,440
even if they don't know you know the

103
00:05:54,440 --> 00:05:56,990
intricate details of like CSS they still

104
00:05:56,990 --> 00:06:01,160
know what you know tags do in some some

105
00:06:01,160 --> 00:06:06,169
fashion and to prove my point many

106
00:06:06,169 --> 00:06:11,510
people know what this does so how do we

107
00:06:11,510 --> 00:06:15,260
fix this problem we must be compliant

108
00:06:15,260 --> 00:06:20,559
with the w3c

109
00:06:20,569 --> 00:06:23,419
many platforms make bootstrapping a Dom

110
00:06:23,419 --> 00:06:26,909
extremely tedious and painful we need to

111
00:06:26,909 --> 00:06:32,069
fix this they also don't they don't

112
00:06:32,069 --> 00:06:34,649
execute JavaScript so if you include a

113
00:06:34,649 --> 00:06:36,959
script tag it just treats it like a

114
00:06:36,959 --> 00:06:44,399
normal Dom element so the ideal

115
00:06:44,399 --> 00:06:46,879
implementation would actually be

116
00:06:46,879 --> 00:06:50,129
scriptable like a regular browser you

117
00:06:50,129 --> 00:06:52,919
would execute JavaScript in the context

118
00:06:52,919 --> 00:06:56,459
of the platform and in the context of

119
00:06:56,459 --> 00:06:59,219
the window so you could you know combine

120
00:06:59,219 --> 00:07:01,259
both of these worlds and do some pretty

121
00:07:01,259 --> 00:07:05,459
amazing stuff so as because or because

122
00:07:05,459 --> 00:07:09,329
node actually runs in JavaScript we kind

123
00:07:09,329 --> 00:07:12,389
of get some of this for free and we can

124
00:07:12,389 --> 00:07:14,309
do things that other platforms can't

125
00:07:14,309 --> 00:07:15,539
even consider because we can execute

126
00:07:15,539 --> 00:07:19,379
JavaScript on both sides so what does

127
00:07:19,379 --> 00:07:22,169
jess dom about a year ago I started

128
00:07:22,169 --> 00:07:28,079
writing Jace Tom as a as a common as a

129
00:07:28,079 --> 00:07:30,809
common J's implementation of the w3c Dom

130
00:07:30,809 --> 00:07:34,019
spec I've kind of limited that down to

131
00:07:34,019 --> 00:07:37,009
node specific there's a lot of

132
00:07:37,009 --> 00:07:39,269
intricacies with you know loading files

133
00:07:39,269 --> 00:07:43,319
and all this other stuff that hoarding

134
00:07:43,319 --> 00:07:45,599
it is kind of a pain and it's not really

135
00:07:45,599 --> 00:07:50,839
the primary focus right now

136
00:07:50,849 --> 00:07:54,719
so what is jas Tom it's pour sur les

137
00:07:54,719 --> 00:07:57,719
which means there's no parser I rely on

138
00:07:57,719 --> 00:08:00,599
the community to you know implement

139
00:08:00,599 --> 00:08:04,529
these parsers and it's it's basically

140
00:08:04,529 --> 00:08:07,800
between the parser and the rendering

141
00:08:07,800 --> 00:08:11,669
engine so it would be you know as shown

142
00:08:11,669 --> 00:08:13,469
up here it's you know the parser adapter

143
00:08:13,469 --> 00:08:15,779
which you know takes markup sends it to

144
00:08:15,779 --> 00:08:17,610
a parser and then the parser actually

145
00:08:17,610 --> 00:08:20,969
creates down for you then it's the dom

146
00:08:20,969 --> 00:08:24,959
which is specified to a tee by the w3c

147
00:08:24,959 --> 00:08:29,399
and it's also a small window like

148
00:08:29,399 --> 00:08:31,199
implementation right now we have a bunch

149
00:08:31,199 --> 00:08:34,769
of stubs but that will change also

150
00:08:34,769 --> 00:08:36,479
something that I should mention is the

151
00:08:36,479 --> 00:08:39,959
parsers in red up there there are three

152
00:08:39,959 --> 00:08:42,930
of them and they go from order they go

153
00:08:42,930 --> 00:08:46,259
in order from you know fast but very

154
00:08:46,259 --> 00:08:53,089
strict to slower and they deal with more

155
00:08:53,089 --> 00:08:55,380
messed up markup so if you wanted to

156
00:08:55,380 --> 00:08:57,449
scrape you know the world wide web the

157
00:08:57,449 --> 00:09:00,269
wild the wild web you would actually use

158
00:09:00,269 --> 00:09:03,000
probably html5 the html5 parser but if

159
00:09:03,000 --> 00:09:05,220
you if you're just trying to do XML you

160
00:09:05,220 --> 00:09:09,600
probably use sex so what makes what

161
00:09:09,600 --> 00:09:16,350
makes us great so the first thing that I

162
00:09:16,350 --> 00:09:18,269
did when I was writing guess tom is I

163
00:09:18,269 --> 00:09:21,420
got the test suite from w3c because it

164
00:09:21,420 --> 00:09:24,720
is very important that we are w3c test

165
00:09:24,720 --> 00:09:27,779
suite compliant right so right now we're

166
00:09:27,779 --> 00:09:30,899
really close a hundred percent of level

167
00:09:30,899 --> 00:09:35,009
1 level 2 and level 3 which is more XML

168
00:09:35,009 --> 00:09:44,030
or passing you yeah

169
00:09:44,040 --> 00:09:46,750
so jess Tom isn't done until all of

170
00:09:46,750 --> 00:09:49,440
these levels are complete and it's fast

171
00:09:49,440 --> 00:09:52,290
which we have some some problems with

172
00:09:52,290 --> 00:09:55,060
but first off I want to explain what

173
00:09:55,060 --> 00:09:56,529
these levels are because I get a lot of

174
00:09:56,529 --> 00:09:58,870
questions about okay so what there's a

175
00:09:58,870 --> 00:10:02,470
bunch of levels what do they do so level

176
00:10:02,470 --> 00:10:05,440
1 is it has this core module and it

177
00:10:05,440 --> 00:10:07,300
basically defines you know what a

178
00:10:07,300 --> 00:10:09,519
document is what a node is what an

179
00:10:09,519 --> 00:10:11,860
attribute list is all of this basic

180
00:10:11,860 --> 00:10:16,660
stuff level 2 kind of splits it goes in

181
00:10:16,660 --> 00:10:19,180
one direction xml so you have namespaces

182
00:10:19,180 --> 00:10:21,730
and all all of that fun stuff and then

183
00:10:21,730 --> 00:10:23,170
on the other direction it goes HTML

184
00:10:23,170 --> 00:10:25,899
where you have you know anchors form

185
00:10:25,899 --> 00:10:32,920
elements and it also implements or also

186
00:10:32,920 --> 00:10:36,190
introduces events so you can have

187
00:10:36,190 --> 00:10:38,290
capture and bubble and all the things

188
00:10:38,290 --> 00:10:41,190
that you're familiar with in the browser

189
00:10:41,190 --> 00:10:44,410
it's also jess tom is also extremely

190
00:10:44,410 --> 00:10:49,180
easy to bootstrap as seen here I mean

191
00:10:49,180 --> 00:10:51,430
it's for brevity it's I've split up the

192
00:10:51,430 --> 00:10:54,040
lines but if you combined all of this it

193
00:10:54,040 --> 00:10:56,370
would be one or three lines of code and

194
00:10:56,370 --> 00:10:59,260
it's extremely easy to scrape pages or

195
00:10:59,260 --> 00:11:00,940
you know load up your own markup and

196
00:11:00,940 --> 00:11:07,120
manipulate it and it works one thing to

197
00:11:07,120 --> 00:11:09,279
note about this example is that it does

198
00:11:09,279 --> 00:11:11,649
not run external javascript so if you

199
00:11:11,649 --> 00:11:15,279
have a script tag it will not fetch and

200
00:11:15,279 --> 00:11:17,279
execute that JavaScript there are other

201
00:11:17,279 --> 00:11:20,709
jsm methods for that there's a salvage

202
00:11:20,709 --> 00:11:23,680
as Dom method and there's also JM dud

203
00:11:23,680 --> 00:11:27,130
jquery if I which will allow you to load

204
00:11:27,130 --> 00:11:29,079
remote scripts and execute the

205
00:11:29,079 --> 00:11:31,089
JavaScript that's that exists on those

206
00:11:31,089 --> 00:11:37,500
pages so I guess I could explain this

207
00:11:37,500 --> 00:11:42,190
basically we require jsem that env or

208
00:11:42,190 --> 00:11:46,810
Jace Tom run NV it goes out to nodejs /

209
00:11:46,810 --> 00:11:49,480
disk which is basically

210
00:11:49,480 --> 00:11:57,519
lists why so this dis page is basically

211
00:11:57,519 --> 00:12:06,360
a list of links

212
00:12:06,370 --> 00:12:47,200
hello hello hello okay so

213
00:12:47,200 --> 00:12:50,560
where was I oh yeah the slush disk page

214
00:12:50,560 --> 00:12:53,520
actually is just a list of node releases

215
00:12:53,520 --> 00:12:57,820
notary node releases all right and when

216
00:12:57,820 --> 00:12:59,110
it's when it's done when it actually

217
00:12:59,110 --> 00:13:01,150
fetches the content and parses it and

218
00:13:01,150 --> 00:13:03,490
puts it into a dom it will call back to

219
00:13:03,490 --> 00:13:06,130
the count function where we have access

220
00:13:06,130 --> 00:13:08,020
to a window in a document and everything

221
00:13:08,020 --> 00:13:09,490
that you expect in a browser except

222
00:13:09,490 --> 00:13:11,680
we're scripting it from the outside so

223
00:13:11,680 --> 00:13:14,020
we can run you know window document

224
00:13:14,020 --> 00:13:16,300
document get elements by tag name a

225
00:13:16,300 --> 00:13:18,640
which is what this page contains and

226
00:13:18,640 --> 00:13:20,320
then get the length and see how many

227
00:13:20,320 --> 00:13:24,040
node releases we we've had it's kind of

228
00:13:24,040 --> 00:13:27,300
interesting and very easy right here

229
00:13:27,300 --> 00:13:33,730
okay I can do that okay so i think it's

230
00:13:33,730 --> 00:13:36,130
i think it's important that we show that

231
00:13:36,130 --> 00:13:39,900
i show what projects are using json

232
00:13:39,900 --> 00:13:47,200
closer just eat it okay so the majority

233
00:13:47,200 --> 00:13:49,330
of projects that are using json today

234
00:13:49,330 --> 00:13:53,110
our screen scrapers so we've apparently

235
00:13:53,110 --> 00:13:57,280
we love stealing content which is good I

236
00:13:57,280 --> 00:13:58,930
suppose I mean at least people are using

237
00:13:58,930 --> 00:14:02,910
this which is which was a surprise to me

238
00:14:02,910 --> 00:14:05,500
we also have some people using it for

239
00:14:05,500 --> 00:14:09,370
testing zombie is great toby is also

240
00:14:09,370 --> 00:14:12,100
great other people use JSON the new

241
00:14:12,100 --> 00:14:17,350
smoke tests which is okay I mean j/s tom

242
00:14:17,350 --> 00:14:19,660
is a fully featured browser so you only

243
00:14:19,660 --> 00:14:20,980
get some of the functionality we have a

244
00:14:20,980 --> 00:14:27,700
lot of stubs I this is it's good other

245
00:14:27,700 --> 00:14:30,040
people use it for development these

246
00:14:30,040 --> 00:14:33,070
projects are interesting as well things

247
00:14:33,070 --> 00:14:35,770
like JSP p which Michael wrote and I

248
00:14:35,770 --> 00:14:39,940
mean a lot of good stuff in the space we

249
00:14:39,940 --> 00:14:42,280
also have people using it for

250
00:14:42,280 --> 00:14:45,430
unobtrusive templating this personally

251
00:14:45,430 --> 00:14:48,880
is why i started jazz Dom I hate micro

252
00:14:48,880 --> 00:14:51,670
templating and I help high jinks right

253
00:14:51,670 --> 00:14:53,980
well which is up there so you guys

254
00:14:53,980 --> 00:14:55,480
should check it out because it's awesome

255
00:14:55,480 --> 00:14:59,320
and it basically fits the need of

256
00:14:59,320 --> 00:15:02,029
it scratches the itch that I was trying

257
00:15:02,029 --> 00:15:06,860
to scratch when i started you a stock so

258
00:15:06,860 --> 00:15:08,240
other people are trying to use it for

259
00:15:08,240 --> 00:15:09,860
code review code reuse and if you

260
00:15:09,860 --> 00:15:13,490
haven't seen Dave glasses Yui 3 examples

261
00:15:13,490 --> 00:15:15,170
you should check them out because they

262
00:15:15,170 --> 00:15:18,800
are quite amazing he basically takes the

263
00:15:18,800 --> 00:15:21,740
same code that he's or the same dawn

264
00:15:21,740 --> 00:15:23,630
that he's rendering on the browser

265
00:15:23,630 --> 00:15:26,060
renders it on the client and if there's

266
00:15:26,060 --> 00:15:28,100
no JavaScript it doesn't matter all the

267
00:15:28,100 --> 00:15:30,950
links work all of the like he has some y

268
00:15:30,950 --> 00:15:33,020
UI widgets with a calendar and it you

269
00:15:33,020 --> 00:15:36,670
should check it out because it's amazing

270
00:15:36,670 --> 00:15:38,720
there's also people doing charting

271
00:15:38,720 --> 00:15:41,150
graphing so things like highcharts plot

272
00:15:41,150 --> 00:15:45,260
rafael which is pretty cool people like

273
00:15:45,260 --> 00:15:50,120
to serve images instead of instead of

274
00:15:50,120 --> 00:15:51,980
raw SVG for browsers that don't support

275
00:15:51,980 --> 00:15:56,140
it as well as not giving away like

276
00:15:56,140 --> 00:15:59,000
details of the payload like they don't

277
00:15:59,000 --> 00:16:00,950
want to send you know actual financial

278
00:16:00,950 --> 00:16:03,500
data across the wire so they just render

279
00:16:03,500 --> 00:16:05,510
an image on the server and then send it

280
00:16:05,510 --> 00:16:11,089
as an image to the client so Jason would

281
00:16:11,089 --> 00:16:13,520
not be possible without these people

282
00:16:13,520 --> 00:16:17,800
these 46 people which is quite a few

283
00:16:17,800 --> 00:16:20,360
whether it's writing a one-line patch or

284
00:16:20,360 --> 00:16:24,160
rewriting the entire test infrastructure

285
00:16:24,160 --> 00:16:27,470
Janice Tom wouldn't even be close to be

286
00:16:27,470 --> 00:16:29,810
it wouldn't even be usable I mean there

287
00:16:29,810 --> 00:16:31,820
there'd be no way I don't have enough

288
00:16:31,820 --> 00:16:34,210
time this is a personal project and I

289
00:16:34,210 --> 00:16:36,380
don't have enough time to do all this so

290
00:16:36,380 --> 00:16:38,720
I really appreciate everybody that's you

291
00:16:38,720 --> 00:16:45,520
know helped out as a bit of a roadmap

292
00:16:45,520 --> 00:16:47,300
some of the things that we're missing

293
00:16:47,300 --> 00:16:49,760
right now our default actions for

294
00:16:49,760 --> 00:16:52,940
elements so say you click on a link you

295
00:16:52,940 --> 00:16:55,310
would expect it to navigate the entire

296
00:16:55,310 --> 00:16:57,800
document or the entire window to the new

297
00:16:57,800 --> 00:17:05,329
page that does not work right now

298
00:17:05,339 --> 00:17:08,920
we're also looking into speed

299
00:17:08,920 --> 00:17:14,730
improvements namely a live node list

300
00:17:14,730 --> 00:17:18,670
alright extremely slow we have to resort

301
00:17:18,670 --> 00:17:21,940
to this crazy machinery to make this

302
00:17:21,940 --> 00:17:24,120
these work because we don't have proxies

303
00:17:24,120 --> 00:17:27,490
mm-hmm and I think I think we can solve

304
00:17:27,490 --> 00:17:29,110
this problem but it needs to be looked

305
00:17:29,110 --> 00:17:32,620
into we also need to fix memory leaks so

306
00:17:32,620 --> 00:17:34,930
if you set a timer like a set interval

307
00:17:34,930 --> 00:17:38,530
when you execute external javascript it

308
00:17:38,530 --> 00:17:40,930
will leak and if you have a ton of Dom's

309
00:17:40,930 --> 00:17:43,540
you'll go over the one gig limit and it

310
00:17:43,540 --> 00:17:45,790
will be will be bad very bad for

311
00:17:45,790 --> 00:17:48,520
everybody there's also some work that

312
00:17:48,520 --> 00:17:51,160
needs to go into the window

313
00:17:51,160 --> 00:17:52,540
implementation right now we have a lot

314
00:17:52,540 --> 00:17:55,240
of stubs we have enough to make some

315
00:17:55,240 --> 00:17:58,990
stuff work like jquery and yui and

316
00:17:58,990 --> 00:18:02,470
prototype I think mootools but there are

317
00:18:02,470 --> 00:18:03,640
some other libraries that don't work

318
00:18:03,640 --> 00:18:05,350
because we don't have the proper you

319
00:18:05,350 --> 00:18:09,850
know stubs or functionality in place we

320
00:18:09,850 --> 00:18:11,710
also need to test these methods which is

321
00:18:11,710 --> 00:18:13,240
going to be difficult because each

322
00:18:13,240 --> 00:18:15,010
browser does a slightly different thing

323
00:18:15,010 --> 00:18:19,570
and there's no spec there's no test out

324
00:18:19,570 --> 00:18:20,740
there so we'll have to write the test as

325
00:18:20,740 --> 00:18:23,230
well another thing that's not on the

326
00:18:23,230 --> 00:18:25,060
slide but I just remembered is that we

327
00:18:25,060 --> 00:18:27,490
need to be able to log what's going on

328
00:18:27,490 --> 00:18:29,260
in the Dom when you go out and fetch a

329
00:18:29,260 --> 00:18:31,990
page right now if

330
00:18:31,990 --> 00:18:34,970
right now we can get in these situations

331
00:18:34,970 --> 00:18:37,850
where you won't see anything happen it

332
00:18:37,850 --> 00:18:39,950
will just look like you know you never

333
00:18:39,950 --> 00:18:41,960
get a call back it doesn't even it an

334
00:18:41,960 --> 00:18:44,360
error it just goes away and it doesn't

335
00:18:44,360 --> 00:18:46,130
return you anything and that needs to be

336
00:18:46,130 --> 00:18:51,680
solved immediately and that is all do I

337
00:18:51,680 --> 00:19:02,190
have any questions

338
00:19:02,200 --> 00:19:13,700
questions

339
00:19:13,710 --> 00:19:18,880
of the Yui through stuff

340
00:19:18,890 --> 00:19:27,140
I don't have any locally uh yeah yes if

341
00:19:27,140 --> 00:19:29,300
I could show some demos perhaps with

342
00:19:29,300 --> 00:19:33,700
like the Yui 3 stuff or other things I

343
00:19:33,700 --> 00:20:06,370
have one

344
00:20:06,380 --> 00:20:09,380
can you guys read that can you read it

345
00:20:09,380 --> 00:20:17,460
No

346
00:20:17,470 --> 00:20:34,220
how about now all right

347
00:20:34,230 --> 00:20:41,970
a little too big so this is the same

348
00:20:41,970 --> 00:20:44,970
example that I was showing before in the

349
00:20:44,970 --> 00:20:50,130
slides the problem is we don't have

350
00:20:50,130 --> 00:20:52,169
Wi-Fi so it won't be able to go out and

351
00:20:52,169 --> 00:20:54,630
collect any data so that's that's kind

352
00:20:54,630 --> 00:20:57,809
of a problem but I mean this thing work

353
00:20:57,809 --> 00:20:58,950
that's right it earlier when I was at

354
00:20:58,950 --> 00:21:01,290
the hotel so there are other examples on

355
00:21:01,290 --> 00:21:04,010
the github page which is 10 power /

356
00:21:04,010 --> 00:21:06,630
guess I'll so if you want to check those

357
00:21:06,630 --> 00:21:15,960
out it might uh might help

358
00:21:15,970 --> 00:21:19,310
not yet that is one of the things that I

359
00:21:19,310 --> 00:21:20,720
was mentioning with the default actions

360
00:21:20,720 --> 00:21:25,190
so the same thing sorry yes if Jay Assam

361
00:21:25,190 --> 00:21:27,140
supports the you know like form

362
00:21:27,140 --> 00:21:28,850
submissions and stuff like that and the

363
00:21:28,850 --> 00:21:33,400
answer is not yet yes so the question is

364
00:21:33,400 --> 00:21:36,920
with exit with in regards to executing

365
00:21:36,920 --> 00:21:40,670
remote javascript is there potential to

366
00:21:40,670 --> 00:21:43,310
basically jump the shark and start

367
00:21:43,310 --> 00:21:46,330
executing javascript in like node and

368
00:21:46,330 --> 00:21:52,280
yes yes there is so that is why env does

369
00:21:52,280 --> 00:21:54,500
not do that it's meant to be like you

370
00:21:54,500 --> 00:21:57,440
know easy to use and it there's like

371
00:21:57,440 --> 00:22:00,740
really no security risk the in the

372
00:22:00,740 --> 00:22:02,330
future it will as soon as we can figure

373
00:22:02,330 --> 00:22:03,800
out how to do that whether or not its

374
00:22:03,800 --> 00:22:05,930
spawning off the child process and see

375
00:22:05,930 --> 00:22:08,090
it's routing it and going crazy or if

376
00:22:08,090 --> 00:22:11,120
it's you know finding a better way to

377
00:22:11,120 --> 00:22:15,890
sandbox it in node itself okay so the

378
00:22:15,890 --> 00:22:17,960
question is with all of the browser

379
00:22:17,960 --> 00:22:20,720
stuff not being exactly like the Dom

380
00:22:20,720 --> 00:22:25,130
stuff is there is the goal to split them

381
00:22:25,130 --> 00:22:29,240
apart or just to expand Jase Tom I think

382
00:22:29,240 --> 00:22:31,670
it would actually be optimal to split it

383
00:22:31,670 --> 00:22:34,370
out but I don't think we're quite there

384
00:22:34,370 --> 00:22:37,010
yet I think we need a once we have a

385
00:22:37,010 --> 00:22:38,450
working implementation then we can split

386
00:22:38,450 --> 00:22:40,550
it out to another library have its own

387
00:22:40,550 --> 00:22:43,340
test and maybe even you know go as far

388
00:22:43,340 --> 00:22:45,410
as to provide different implementation

389
00:22:45,410 --> 00:22:49,280
so you know it emulates IE or firefox or

390
00:22:49,280 --> 00:22:52,220
whatever and then you know add that as a

391
00:22:52,220 --> 00:22:54,470
dependency to jess dom i think for right

392
00:22:54,470 --> 00:22:57,140
now it will all be one library but

393
00:22:57,140 --> 00:23:00,010
eventually it will probably be split up

394
00:23:00,010 --> 00:23:04,520
no and the question was did this come

395
00:23:04,520 --> 00:23:08,990
out of work with readability so the

396
00:23:08,990 --> 00:23:11,180
question was how important is the speed

397
00:23:11,180 --> 00:23:13,610
of the Dom when you're using many doms

398
00:23:13,610 --> 00:23:16,340
on the server it's very important in

399
00:23:16,340 --> 00:23:17,930
fact it's more important that it is on

400
00:23:17,930 --> 00:23:19,550
the browser you know and the browser

401
00:23:19,550 --> 00:23:22,640
people expect you know the Dom to take a

402
00:23:22,640 --> 00:23:23,990
little bit of time but on the server

403
00:23:23,990 --> 00:23:26,150
it's important that we get responses

404
00:23:26,150 --> 00:23:28,580
back immediately especially since the

405
00:23:28,580 --> 00:23:29,230
DOM is

406
00:23:29,230 --> 00:23:33,190
looking we want you know we want results

407
00:23:33,190 --> 00:23:35,140
as soon as possible which means you have

408
00:23:35,140 --> 00:23:36,669
to spawn out more processes to handle

409
00:23:36,669 --> 00:23:39,160
more requests so the faster the dumb is

410
00:23:39,160 --> 00:23:41,020
the more requests we can handle with a

411
00:23:41,020 --> 00:23:43,030
single process right does that answer

412
00:23:43,030 --> 00:23:47,830
the question so what am i doing to

413
00:23:47,830 --> 00:23:52,540
improve the speed so there's we have a

414
00:23:52,540 --> 00:23:55,360
clergy implementation of live nodelist

415
00:23:55,360 --> 00:24:03,429
which which it is it it's very slow we

416
00:24:03,429 --> 00:24:05,070
have to recalculate a lot of things

417
00:24:05,070 --> 00:24:07,330
basically we're crawling the Dom back

418
00:24:07,330 --> 00:24:09,429
and forth and it's it's extremely slow

419
00:24:09,429 --> 00:24:11,790
and I think once we fix that it will be

