1
00:00:13,599 --> 00:00:15,599
Hello everyone 

2
00:00:16,029 --> 00:00:19,019
Why can't the slide show come out?

3
00:00:20,859 --> 00:00:23,399
This is my first time in Singapore

4
00:00:24,760 --> 00:00:26,760
Feel good

5
00:00:29,650 --> 00:00:33,000
It would be better if you applaud now

6
00:00:34,120 --> 00:00:39,540
I came to this meeting as soon as I got off the plane, so I did n’t have time to stroll

7
00:00:39,540 --> 00:00:42,959
But I will stay a few more days later, I will look around

8
00:00:43,410 --> 00:00:45,410
I brought my partner

9
00:00:45,550 --> 00:00:49,349
I must say it was a huge mistake

10
00:00:49,750 --> 00:00:53,879
Because she was really looking forward to the trip, especially the first few weeks

11
00:00:53,879 --> 00:00:58,858
She ’s been saying that she has two weeks to go to Singapore, one week, five days

12
00:00:58,859 --> 00:01:04,889
Could you please stop mentioning it

13
00:01:05,560 --> 00:01:11,100
What I thought was that there were only five days to prepare my speech

14
00:01:11,100 --> 00:01:17,009
This worst project manager has been mocking me for being poorly prepared

15
00:01:17,530 --> 00:01:21,239
But one thing she is very good is that she can tolerate me

16
00:01:21,640 --> 00:01:28,259
I am easily anxious. I will worry about it

17
00:01:28,960 --> 00:01:30,820
I feel anxious about things that have nothing to do with me

18
00:01:30,820 --> 00:01:34,079
Someone posted this on Twitter

19
00:01:35,770 --> 00:01:38,790
He held the MacBook with two fingers

20
00:01:40,659 --> 00:01:46,019
And it's on the concrete floor, I never fell asleep after watching this photo

21
00:01:48,280 --> 00:01:54,960
This code also annoys me because there is no semicolon. Roar if you remember to always add a semicolon

22
00:01:56,229 --> 00:01:59,489
Good, the rest are a bunch of monsters

23
00:02:00,700 --> 00:02:04,900
But this is not the thing I worry about the most

24
00:02:05,980 --> 00:02:12,340
But add something to the DOM and hide it, maybe wait until there is a click event and then show it

25
00:02:13,220 --> 00:02:19,320
I would worry if the user would see something flash before the element was hidden

26
00:02:20,280 --> 00:02:22,760
And I can't reproduce it so far

27
00:02:22,760 --> 00:02:27,950
I have n’t met before, but it ’s hard to say under race conditions

28
00:02:28,470 --> 00:02:31,820
So I usually reorder these codes, just to sleep

29
00:02:33,000 --> 00:02:35,690
But in fact there is no race condition here

30
00:02:36,360 --> 00:02:38,360
Because the code runs and renders

31
00:02:39,000 --> 00:02:41,570
Their timing is tightly defined

32
00:02:42,600 --> 00:02:44,370
And most of the cases are ok

33
00:02:44,370 --> 00:02:49,819
This is thanks to the event loop, the next 30 minutes, if I do n’t mess up

34
00:02:49,860 --> 00:02:57,170
You will know why the code works like this. I'm not sure if I can make it clear, I don't make a promise

35
00:02:57,840 --> 00:03:02,520
There is something in the web page, usually we become the main thread

36
00:03:03,780 --> 00:03:05,700
This is the main thread

37
00:03:05,700 --> 00:03:13,240
The main thread is called because many things run on it, including JavaScript and rendering, and is where the DOM exists.

38
00:03:13,940 --> 00:03:18,760
This means that most things on the webpage have a certain order

39
00:03:18,770 --> 00:03:23,119
No code will execute at the same time, such as editing the same DOM at the same time

40
00:03:23,790 --> 00:03:26,689
Then leads to terrible race conditions

41
00:03:27,270 --> 00:03:33,350
But it also means that if the main thread has code running for a long time

42
00:03:33,350 --> 00:03:34,850
200 milliseconds

43
00:03:34,850 --> 00:03:36,850
Long time for user interaction

44
00:03:36,960 --> 00:03:43,279
In this case, it is perceived because it blocks many other things, such as rendering or user interaction.

45
00:03:44,250 --> 00:03:47,960
And I think it ’s hard to imagine this as a human

46
00:03:48,720 --> 00:03:50,550
Because human

47
00:03:50,550 --> 00:03:53,719
Very good at multi-threaded operation

48
00:03:53,720 --> 00:03:58,520
For example, I can stand on one foot while waving

49
00:03:58,520 --> 00:04:02,270
I'm talking, breathing, processing sound and visual information

50
00:04:03,120 --> 00:04:08,750
Humans don't have a main thread and we are not blocked by irrelevant things

51
00:04:09,570 --> 00:04:12,260
Except one thing

52
00:04:12,900 --> 00:04:14,900
That is sneezing

53
00:04:16,500 --> 00:04:23,989
Because other things stop when you sneeze. Such as not speaking when sneezing

54
00:04:24,720 --> 00:04:26,720
Then the face becomes silly X

55
00:04:27,230 --> 00:04:31,759
If you were driving, you would hope that no one would die as a result.

56
00:04:32,730 --> 00:04:38,329
At least we become single-threaded when we sneeze

57
00:04:39,060 --> 00:04:43,339
Loss of hearing, vision or thinking

58
00:04:44,190 --> 00:04:48,499
Unless sneezing forces you to do so. You have actually lost control

59
00:04:48,960 --> 00:04:51,740
Then the sneeze will end and the body will recover

60
00:04:51,840 --> 00:04:57,880
You will know if there are fewer arms and legs

61
00:04:57,889 --> 00:05:04,219
Are there missing passengers? Obviously we don't want to write the same code as sneezing

62
00:05:05,010 --> 00:05:10,339
So although we have the main thread, we still want to start some other scenes

63
00:05:10,620 --> 00:05:12,030
For network or codec

64
00:05:12,030 --> 00:05:14,030
Or listen to the input device

65
00:05:14,310 --> 00:05:17,419
But once these threads have done something the page cares about

66
00:05:17,700 --> 00:05:22,009
They need to transfer information back to the main thread

67
00:05:22,410 --> 00:05:24,919
The event loop is actually directing it all

68
00:05:25,440 --> 00:05:30,679
For example, setTimeout, isn't this naming good? indeed. Is the order of the parameters wrong?

69
00:05:31,260 --> 00:05:35,089
I think so. But have you ever wondered how it works

70
00:05:36,000 --> 00:05:40,549
Okay, let's write a web standard for him, I'll do it these days

71
00:05:41,370 --> 00:05:48,289
We start with setTimeout. When it is called, we need to perform these steps: wait for x ms and execute the callback.

72
00:05:49,680 --> 00:05:51,680
But this doesn't work

73
00:05:52,320 --> 00:05:58,549
Because it means that it will execute on the same thread as the method that called it

74
00:05:58,650 --> 00:06:02,359
This is also JavaScript, so it will be executed in the main thread

75
00:06:03,240 --> 00:06:09,590
For example, waiting for 5000ms, we wait on the main thread, which will block many other things

76
00:06:10,169 --> 00:06:12,139
So this specification is not working yet

77
00:06:12,139 --> 00:06:17,689
So change it. This way we perform these steps in parallel

78
00:06:18,450 --> 00:06:23,509
That is to detach from the main thread and run at the same time as other things

79
00:06:24,750 --> 00:06:31,279
This has new problems, because we are now executing callbacks from a non-main thread

80
00:06:32,310 --> 00:06:34,339
Does not work at all

81
00:06:34,340 --> 00:06:38,209
Finally, there may be a lot of JS code editing the same DOM at the same time

82
00:06:38,210 --> 00:06:40,190
There will be many race conditions

83
00:06:40,190 --> 00:06:45,559
So we put the task in the queue and then return to the main thread for execution

84
00:06:45,960 --> 00:06:50,359
Now we are calling JS in the JS thread

85
00:06:50,610 --> 00:06:52,819
This is how the browser works at its core

86
00:06:52,819 --> 00:06:58,878
If you click the mouse, how is it handed over from the operating system to JS? It submits tasks in the queue

87
00:06:59,009 --> 00:07:02,209
If it is a fetch request, how does it hand the response to JS?

88
00:07:02,460 --> 00:07:08,120
It is still submitting a task. You send a message to the worker from the page and still submit a task

89
00:07:08,819 --> 00:07:14,569
So regarding the event loop, I want to talk about the task queue first.

90
00:07:16,379 --> 00:07:23,479
I find visual animation easier to understand than the specification

91
00:07:24,900 --> 00:07:29,269
This is it, I hope I have made the problem clear

92
00:07:30,180 --> 00:07:34,789
I really hope the question is clear, because my whole speech is based on this diagram

93
00:07:34,919 --> 00:07:39,978
If there is nothing to do, the event loop will always idle in a CPU economical way,

94
00:07:40,169 --> 00:07:43,698
This animation runs at 100% of real time

95
00:07:43,699 --> 00:07:48,079
It ’s still too fast. To see clearly, let ’s slow down a bit.

96
00:07:49,169 --> 00:07:55,008
After we submitted a task, the event loop went around in a circle. This is where the mission takes place

97
00:07:56,339 --> 00:07:58,999
Here the browser says about the event loop

98
00:07:59,400 --> 00:08:02,449
There is something for you

99
00:08:02,759 --> 00:08:07,639
The event loop is great. Then add it to the to-do list. Will deal with it later

100
00:08:09,150 --> 00:08:12,349
What if we submit two callbacks with setTimeout

101
00:08:12,839 --> 00:08:19,279
We want to run in 1 second. According to the specification, we made clear that the two algorithms will be parallel

102
00:08:19,279 --> 00:08:22,549
1000ms each wait

103
00:08:22,550 --> 00:08:26,719
Then add tasks to the queue and return to the main thread

104
00:08:27,270 --> 00:08:32,870
The browser said to the event loop, I have something here

105
00:08:32,870 --> 00:08:40,279
But actually there are two things please, so each thing is added to the queue as a todo item.

106
00:08:40,279 --> 00:08:45,439
The event loop indicates no problem, so it runs the first callback first

107
00:08:45,959 --> 00:08:47,959
Then run the second

108
00:08:48,660 --> 00:08:50,660
This is the task

109
00:08:51,050 --> 00:08:53,560
If that's all simple

110
00:08:54,410 --> 00:08:59,980
It becomes complicated if you add rendering.

111
00:08:59,980 --> 00:09:01,980
The browser will use the rendering to update the screen content

112
00:09:03,020 --> 00:09:09,360
The rendering step takes another circle, which contains style calculations. Which is to view all CSS

113
00:09:09,360 --> 00:09:11,880
Calculate styles applied to all elements

114
00:09:13,460 --> 00:09:17,740
It generates a render tree

115
00:09:18,620 --> 00:09:20,620
Will calculate the position of the element

116
00:09:20,690 --> 00:09:24,549
Then generate corresponding pixels

117
00:09:25,100 --> 00:09:29,080
So at some point, the browser will tell the event loop

118
00:09:29,100 --> 00:09:34,060
Need to update screen content. The event loop says I'll do it the next time I go to the event loop

119
00:09:35,200 --> 00:09:37,980
I don't understand you but i

120
00:09:38,660 --> 00:09:41,740
I consider myself an expert at writing bad code

121
00:09:41,740 --> 00:09:46,479
I can make an endless loop with just a bit of code

122
00:09:46,480 --> 00:09:51,250
Let's see what happens if that is the case

123
00:09:51,830 --> 00:09:57,069
This page has a gif and text, a big button that runs an endless loop

124
00:09:57,680 --> 00:09:59,680
If i click

125
00:09:59,690 --> 00:10:05,679
Everything stopped, there was no way to select the text, and the entire tab was dead

126
00:10:06,470 --> 00:10:10,000
The code is simple

127
00:10:12,440 --> 00:10:16,150
How to visualize this process? After the user clicks the button

128
00:10:16,250 --> 00:10:20,140
The browser tells the event loop that I have a task for you. Event loop says no problem, let me do it

129
00:10:20,810 --> 00:10:24,549
But this task can never be completed

130
00:10:25,339 --> 00:10:26,930
Always running JS

131
00:10:26,930 --> 00:10:29,620
After a few milliseconds, the browser tells the event loop

132
00:10:29,990 --> 00:10:33,640
We are going to update the gif

133
00:10:34,250 --> 00:10:39,250
Remember to render the next time you are convenient. The event loop says: Uh ...

134
00:10:39,250 --> 00:10:45,099
I'll talk about things when I'm busy

135
00:10:46,160 --> 00:10:49,870
Then the user wants to select some text, it will contain click test

136
00:10:50,000 --> 00:10:53,650
Look at the DOM and more. So the browser will say

137
00:10:53,650 --> 00:10:54,700
I still have some to-do things for you

138
00:10:55,660 --> 00:11:01,060
The event loop will say, do you know how long it takes to execute an infinite loop

139
00:11:02,120 --> 00:11:04,989
Takes a long time as the name suggests

140
00:11:05,689 --> 00:11:11,229
This is why the while loop blocks rendering and other interactions, but it is a good thing

141
00:11:11,230 --> 00:11:16,300
Let's take a look at the previous concerns. I worry that something will pass by.

142
00:11:16,300 --> 00:11:16,850
But it doesn't actually happen

143
00:11:16,850 --> 00:11:19,659
Because this code is part of a task

144
00:11:19,730 --> 00:11:23,889
So it must be fully executed before rendering

145
00:11:24,460 --> 00:11:28,680
The event loop will ensure that the task is completed before rendering

146
00:11:29,420 --> 00:11:32,880
However, I still have pressure, and I will still interact with each other when I see such code.

147
00:11:33,860 --> 00:11:36,760
Well, while loops block rendering, what about this?

148
00:11:37,360 --> 00:11:43,680
This is a loop, but every time we insert tasks into the queue through setTimeout

149
00:11:44,320 --> 00:11:48,300
Let's see what happens

150
00:11:49,780 --> 00:11:55,320
I clicked the button, as if the page was still working, as if nothing had changed, but behind the scenes, these things happened

151
00:11:56,269 --> 00:11:57,829
Add tasks to the queue

152
00:11:57,829 --> 00:11:59,269
Check the event loop

153
00:11:59,269 --> 00:12:05,558
Extract the task, then submit another task, and repeat it forever

154
00:12:05,959 --> 00:12:07,959
But we have seen before

155
00:12:08,180 --> 00:12:10,599
Can only perform one task at a time

156
00:12:10,670 --> 00:12:15,219
So when one task is completed, you must make a full circle to execute the next one.

157
00:12:16,639 --> 00:12:23,019
So the browser can update the gif display at some point

158
00:12:23,019 --> 00:12:27,878
This is why the setTimeout loop does not block rendering

159
00:12:29,389 --> 00:12:33,128
But if the code you want to execute is related to rendering

160
00:12:33,740 --> 00:12:39,399
Then it ’s not suitable for tasks, as far as the event loop is concerned

161
00:12:39,399 --> 00:12:41,059
Task execution and rendering are not on the same side

162
00:12:41,059 --> 00:12:45,939
We want to execute the code in the rendering step

163
00:12:46,819 --> 00:12:50,558
The browser provides us with the requestAnimationFrame function to implement

164
00:12:51,410 --> 00:12:55,269
I think this function name sucks too

165
00:12:58,459 --> 00:13:03,998
RAF callbacks are executed as part of the rendering step and I will explain the benefits of doing so

166
00:13:03,999 --> 00:13:05,999
I will make a box animation

167
00:13:06,529 --> 00:13:11,888
I want to move the box one pixel at a time by using requestAnimationFrame

168
00:13:13,100 --> 00:13:15,409
To create a loop

169
00:13:16,829 --> 00:13:22,159
That's it if we replace requestAnimationFrame with setTimeout?

170
00:13:27,329 --> 00:13:29,009
Looks like this

171
00:13:29,009 --> 00:13:31,639
The box is moving faster now

172
00:13:31,639 --> 00:13:37,878
About 3.5 times, which means that callbacks are executed more frequently. This is definitely not good

173
00:13:37,879 --> 00:13:39,879
By no means good

174
00:13:40,350 --> 00:13:44,240
Earlier we saw that rendering can be inserted between tasks and executed

175
00:13:44,850 --> 00:13:50,779
But what can happen does not necessarily mean it will happen. We extract a task

176
00:13:50,779 --> 00:13:54,828
Can it be rendered now, no? Can we make another round? Can we render now?

177
00:13:55,499 --> 00:13:59,149
Still can't do many tasks can keep coming in

178
00:13:59,879 --> 00:14:01,490
Until the browser can finally say

179
00:14:01,490 --> 00:14:04,849
Next time I want to update the display

180
00:14:05,220 --> 00:14:08,660
The browser can decide when to render, and its goal is to be as efficient as possible

181
00:14:08,910 --> 00:14:14,059
Only render when necessary, if there is no interface change, it will not render

182
00:14:15,689 --> 00:14:21,079
For example, when the tab is blocked and invisible, it will not be rendered because it is meaningless.

183
00:14:21,990 --> 00:14:25,639
And most screens have a fixed refresh rate

184
00:14:25,639 --> 00:14:27,799
Almost 60 refreshes per second

185
00:14:27,800 --> 00:14:29,490
Fast or slow

186
00:14:29,490 --> 00:14:34,459
But 60 Hz is the most common. If we change the style a thousand times a second

187
00:14:34,459 --> 00:14:37,068
Will not render a thousand times per second

188
00:14:37,379 --> 00:14:42,199
It will match the display refresh frequency and display performance.

189
00:14:42,689 --> 00:14:49,339
Usually 60 times per second, faster rendering is meaningless and invisible to the user

190
00:14:50,189 --> 00:14:52,189
But that's what setTimeout does

191
00:14:52,649 --> 00:14:59,058
It moves faster because some movements are invisible to the user

192
00:14:59,639 --> 00:15:01,639
Beyond display capabilities

193
00:15:02,990 --> 00:15:04,990
Currently we have been using setTimeout as a shortcut to submit tasks

194
00:15:05,220 --> 00:15:10,730
It's actually not convenient. Although we set the delay time to 0

195
00:15:10,730 --> 00:15:12,439
Browsers usually use 4.7 as the default

196
00:15:12,439 --> 00:15:16,729
By convention, browsers can use any value as the default

197
00:15:17,399 --> 00:15:20,178
But we actually measured it is almost 4.7

198
00:15:21,029 --> 00:15:23,448
There is no one special way to submit a task

199
00:15:23,459 --> 00:15:29,448
We can use message channel to simulate me to test

200
00:15:30,479 --> 00:15:35,749
If you can't stand the picture flashing all the time, I suggest you don't

201
00:15:36,569 --> 00:15:42,168
At the same time, there are many tasks being performed. It seems that the position of the box is random.

202
00:15:42,239 --> 00:15:45,709
Tasks come in every 200 milliseconds

203
00:15:46,229 --> 00:15:53,629
Although rendering can occur between tasks, this interval can run thousands of tasks

204
00:15:54,809 --> 00:15:56,809
Okay, finally stopped flashing

205
00:15:57,119 --> 00:16:02,839
We imagine these to be presented to the user as frames

206
00:16:02,839 --> 00:16:08,808
So rendering takes place at the beginning of each frame, including style calculations, layout and drawing

207
00:16:08,969 --> 00:16:12,079
Not all of them are included every time, it depends on what needs to be updated

208
00:16:12,079 --> 00:16:17,058
I like it very clean and tidy

209
00:16:18,180 --> 00:16:19,859
And task

210
00:16:19,860 --> 00:16:26,540
No bird at all these random event loops will guarantee

211
00:16:27,060 --> 00:16:29,749
Execute in order of submission

212
00:16:29,749 --> 00:16:34,788
But in a certain frame, there is no similar sequence.

213
00:16:36,329 --> 00:16:38,329
We have seen this before in setTimeout

214
00:16:38,789 --> 00:16:42,559
We got three to four tasks per frame

215
00:16:42,899 --> 00:16:49,069
From a rendering perspective, three quarters of the effort is wasted. Some old animation libraries

216
00:16:49,829 --> 00:16:53,868
Like to use milliseconds to simulate the callback execution frequency of about 60 times per second

217
00:16:56,219 --> 00:16:58,159
They make a lot of assumptions about the screen

218
00:16:58,159 --> 00:17:04,008
Assume a refresh rate of 60 Hz. Generally okay, and it does eliminate some duplication of effort

219
00:17:05,429 --> 00:17:08,898
Unfortunately this is a serious hack, because setTimeout is not used for animation

220
00:17:08,899 --> 00:17:12,138
Due to its inaccuracy, it will cause drift phenomenon

221
00:17:12,149 --> 00:17:16,039
Causes nothing in one frame, but the next frame

222
00:17:16,039 --> 00:17:21,109
But doing twice as much, the visual effect is poor for the user

223
00:17:21,869 --> 00:17:28,039
In addition, if the task execution time is long, it is possible that the rendering steps will be shifted because they are all on one thread

224
00:17:28,039 --> 00:17:30,919
This lovely rhythm was disrupted originally

225
00:17:31,889 --> 00:17:33,889
If using requestAnimationFrame

226
00:17:34,019 --> 00:17:37,368
Looks like this

227
00:17:37,369 --> 00:17:41,869
Everything is clean and organized

228
00:17:42,570 --> 00:17:44,570
Even this long mission

229
00:17:44,700 --> 00:17:50,990
The performance trajectory I observed also pleased me

230
00:17:52,519 --> 00:17:54,519
Of course, we cannot completely avoid the task

231
00:17:54,690 --> 00:18:00,169
Such as click events, they will be submitted as tasks, and they need to respond as soon as possible

232
00:18:00,169 --> 00:18:04,489
If you have something like timer or something from the network

233
00:18:04,730 --> 00:18:06,720
I really recommend using requestAnimationFrame

234
00:18:06,720 --> 00:18:12,079
To process tasks in batches, especially when you already have animations running, because it can save a lot of repetitive work

235
00:18:12,090 --> 00:18:17,299
I treat tasks like people who drink sparkling water

236
00:18:17,820 --> 00:18:19,820
I know their existence

237
00:18:20,190 --> 00:18:24,830
But I try to minimize contact because I don't trust them

238
00:18:24,830 --> 00:18:31,669
I think I have empathy, but I think that soda is disgusting

239
00:18:32,309 --> 00:18:37,819
I never thought anyone would drink sparkling water

240
00:18:48,179 --> 00:18:52,038
I have a list on Twitter full of people drinking sparkling water

241
00:18:54,720 --> 00:19:00,199
Not weird behavior, I just need to know what they are doing

242
00:19:43,980 --> 00:19:46,789
Just said, right, requestAnimationFrame

243
00:19:47,669 --> 00:19:52,819
One more detail I want to mention

244
00:19:53,550 --> 00:19:58,609
requestAnimationFrame is executed before processing CSS and drawing

245
00:19:59,550 --> 00:20:06,109
So code like this looks expensive, but it's not

246
00:20:06,690 --> 00:20:09,619
Because before rendering, JS will always be executed from beginning to end

247
00:20:09,620 --> 00:20:14,780
So when you do this, the browser sits still and lets you play for yourself

248
00:20:14,880 --> 00:20:19,340
CSS is not considered at all

249
00:20:19,860 --> 00:20:23,090
Until the last render

250
00:20:23,520 --> 00:20:27,499
It just looks at what changed in the end? Only this last line is useful

251
00:20:29,310 --> 00:20:32,330
This also explains some of the issues that have bothered me before

252
00:20:32,330 --> 00:20:37,309
I have an object and I want to make an animation

253
00:20:38,040 --> 00:20:40,040
Location from 100

254
00:20:40,410 --> 00:20:41,850
Up to 500

255
00:20:41,850 --> 00:20:48,050
It's simple. So I have a listner, X is set to 1000

256
00:20:48,050 --> 00:20:52,099
Then tell it to fade to 500

257
00:20:53,490 --> 00:20:59,060
But the animation is from 0 to 500

258
00:21:00,420 --> 00:21:02,000
Browser, this is not what I told you

259
00:21:02,000 --> 00:21:08,810
I made it clear that the transition from 1000 to 500, I was wondering if it should be

260
00:21:09,210 --> 00:21:11,210
Set all values ​​at once

261
00:21:11,280 --> 00:21:17,570
I guess the reason is the same as before, the browser only considers the style at the end

262
00:21:18,120 --> 00:21:20,570
It ignores the first deformation value

263
00:21:21,180 --> 00:21:27,409
I want to put the second part in requestAnimationFrame

264
00:21:28,320 --> 00:21:32,840
It ’s still from 0 to 500. What happened?

265
00:21:33,510 --> 00:21:37,969
Let me tell you what happened. User clicks on button

266
00:21:38,520 --> 00:21:45,410
A task is formed, so we come here, we set the initial value of the deformation here

267
00:21:45,930 --> 00:21:53,930
We add an animation frame to the queue, and then make a circle, we set the target value here

268
00:21:54,720 --> 00:21:58,970
But browsers didn't consider CSS until this point, just this purple part

269
00:21:58,970 --> 00:22:02,330
Only here is CSS calculated

270
00:22:02,580 --> 00:22:08,179
It completely ignores the initial value because the browser doesn't care about the style during the style change

271
00:22:09,300 --> 00:22:10,880
Here's how to fix

272
00:22:10,880 --> 00:22:16,640
You need to use two animation frames, now it will change from 1000 to 500

273
00:22:18,330 --> 00:22:23,990
Here is a hack, you can use getComputedStyle and read one of the properties

274
00:22:23,990 --> 00:22:28,490
It forces the browser to do style calculations a lot in advance

275
00:22:29,280 --> 00:22:33,859
It will notice all values ​​set before this point

276
00:22:34,800 --> 00:22:38,029
x-axis from 500 to 1000

277
00:22:38,970 --> 00:22:43,790
But be careful this way, because you might make your browser do a lot of things you do n’t want to do.

278
00:22:43,860 --> 00:22:46,670
It originally wanted to do it only once in a frame

279
00:22:47,790 --> 00:22:50,209
In reality, the best way is

280
00:22:50,400 --> 00:22:55,969
Use the animation API because you can specify animation parameters directly

281
00:22:55,970 --> 00:23:01,670
But currently only Chrome supports it, so it's too early to talk about it

282
00:23:06,810 --> 00:23:12,229
If requestAnimationFrame is new to you

283
00:23:12,930 --> 00:23:18,229
That ’s not to blame you, maybe you are misled by some specific implementation

284
00:23:18,230 --> 00:23:20,719
Edge and Safari are wrong, they put requestAnimationFrame here

285
00:23:21,450 --> 00:23:23,450
The most obvious is that they are placed after drawing

286
00:23:24,210 --> 00:23:29,840
This is annoying. Because it means that if the user clicked here

287
00:23:29,840 --> 00:23:31,840
You want batch processing, so use requestAnimationFrame

288
00:23:32,040 --> 00:23:37,550
Edge and Safari will render before calling your callback

289
00:23:38,340 --> 00:23:44,000
So the user may not see the change until the next frame

290
00:23:44,100 --> 00:23:46,579
This adds a lot of delay to what's on the screen

291
00:23:47,100 --> 00:23:51,500
It ’s also difficult to batch jobs, I hope they fix it soon

292
00:23:51,540 --> 00:23:56,869
This is what the web standard says, and Chrome and firefox have already done so

293
00:23:59,670 --> 00:24:03,560
That's it for requestAnimationFrame, and I want to talk about microtasks

294
00:24:04,230 --> 00:24:07,130
I dare say this should be the least known in the event loop

295
00:24:08,280 --> 00:24:10,080
I will associate micro tasks with promises

296
00:24:10,080 --> 00:24:17,960
This was not the case in the 1990s, when browsers wanted to provide developers with an interface to monitor DOM changes

297
00:24:18,510 --> 00:24:24,979
w3c agreed and gave us some mutation events

298
00:24:24,980 --> 00:24:29,839
When a node joins the body, I hope there is a way to know

299
00:24:29,840 --> 00:24:31,840
Okay, so there is another series of events

300
00:24:33,060 --> 00:24:38,749
There are many problems in reality. Looking at this code, I added 100 spans to the body

301
00:24:41,340 --> 00:24:48,199
How many events do you think you will receive in this case? One?

302
00:24:49,140 --> 00:24:50,910
wrong

303
00:24:50,910 --> 00:24:53,599
100? One event per span, right

304
00:24:54,120 --> 00:24:56,070
I will receive another 100

305
00:24:56,070 --> 00:24:57,750
Because of this sentence

306
00:24:57,750 --> 00:25:04,040
When the text is placed in the span, these events are passed up

307
00:25:04,040 --> 00:25:06,040
This sentence will give you 200 events

308
00:25:06,840 --> 00:25:09,829
Because of this simple DOM modification

309
00:25:10,020 --> 00:25:16,009
Thousands of events are triggered. If you have very little logic in the callback

310
00:25:16,080 --> 00:25:18,560
Will quickly become a burden. This will be a disaster in performance.

311
00:25:19,110 --> 00:25:22,490
What we want is to listen to these jobs in batches

312
00:25:22,490 --> 00:25:25,819
It's kind of like the browser behavior mentioned earlier, just sit back and watch

313
00:25:26,130 --> 00:25:29,810
Then tell us together when convenient

314
00:25:30,240 --> 00:25:35,120
Something to represent all changes

315
00:25:36,240 --> 00:25:42,530
I only want to receive one notification instead of 200, so they create a new queue called a micro task

316
00:25:43,320 --> 00:25:50,630
I have read a lot of documents about microtasks, and they all say that every event loop will process microtasks

317
00:25:50,910 --> 00:25:55,160
After the task is processed, it is a micro task or something. It sounds like it is right.

318
00:25:55,770 --> 00:26:00,770
In the event loop, there is only one place where microtasks can occur, but not where you usually encounter

319
00:26:01,440 --> 00:26:06,500
And it happens every time JS execution is completed

320
00:26:06,500 --> 00:26:12,319
When the execution stack is cleared

321
00:26:12,690 --> 00:26:14,220
The micro task will run

322
00:26:14,220 --> 00:26:16,370
So halfway through the mission

323
00:26:16,710 --> 00:26:22,550
It is also possible to run microtasks, and it is also possible to run microtasks during rendering

324
00:26:22,550 --> 00:26:24,550
Basically where you can run JS

325
00:26:25,440 --> 00:26:27,440
So this means that JS will execute until completion

326
00:26:27,900 --> 00:26:33,530
Add 100 spans, and we receive a callback after completion

327
00:26:34,770 --> 00:26:40,579
Promise also takes advantage of this. We submit a microtask here and print yo

328
00:26:41,429 --> 00:26:43,429
Then the execution is completed and a log is printed

329
00:26:43,500 --> 00:26:45,829
We used micro-tasks, print hey

330
00:26:46,620 --> 00:26:51,919
So this means that when the promise callback is executed, the browser will guarantee that no other JS will execute only halfway.

331
00:26:52,140 --> 00:26:57,559
Promise callbacks will be at the bottom of the stack. This is why Promises use microtasks.

332
00:26:58,710 --> 00:27:02,630
What if we write a loop with microtasks

333
00:27:04,260 --> 00:27:06,260
The same demo as before

334
00:27:08,340 --> 00:27:13,819
Click the button to block rendering and block tabs, just like before

335
00:27:16,799 --> 00:27:23,509
Promise callbacks are asynchronous, yes. But what does asynchronous mean? It means

336
00:27:24,330 --> 00:27:28,819
They will be executed after the synchronization code, all printed before Hey

337
00:27:29,460 --> 00:27:35,360
But asynchronous doesn't mean that it will make way for rendering or any other event loop.

338
00:27:36,690 --> 00:27:40,130
So far we have looked at three different queues

339
00:27:40,830 --> 00:27:45,949
Task queue, animation callback queue, and micro task queue

340
00:27:46,320 --> 00:27:48,320
Just to make your life less bitter

341
00:27:48,929 --> 00:27:51,739
They handle it slightly differently

342
00:27:51,960 --> 00:27:57,290
For example, the task queue only processes one at a time

343
00:27:57,290 --> 00:27:59,290
If another event comes in, put it at the end of the line

344
00:28:00,419 --> 00:28:03,649
The animation callback will be executed at once

345
00:28:04,740 --> 00:28:10,309
Unless a new one is submitted in the process. They will be delayed until the next frame

346
00:28:11,130 --> 00:28:13,969
The micro task will be executed to completion

347
00:28:14,700 --> 00:28:15,570
Including inserted

348
00:28:15,570 --> 00:28:22,160
So if your submission is as fast as processing, you will always be processing microtasks

349
00:28:22,740 --> 00:28:28,819
If the queue is not empty, the event loop is blocked, which is why rendering is blocked

350
00:28:29,580 --> 00:28:34,220
Sorry, I ’m excited when I talk about this, I hope you are the same

351
00:28:35,190 --> 00:28:38,030
Thank you for being alone

352
00:28:39,120 --> 00:28:42,530
I used to have a job

353
00:28:43,559 --> 00:28:48,629
These are just my hobbies

354
00:28:49,330 --> 00:28:53,279
Later, my hobby became a job, so I stopped.

355
00:28:53,680 --> 00:28:59,070
I became bored

356
00:29:57,610 --> 00:30:03,420
I do quizzes from time to time

357
00:30:03,420 --> 00:30:09,599
This is one of my favorite questions. There is a button, an onclick event, and a promise is resolved

358
00:30:10,150 --> 00:30:12,150
Then print some logs

359
00:30:12,310 --> 00:30:16,889
But I have two event listeners on one element

360
00:30:17,890 --> 00:30:19,890
If the user clicks the button

361
00:30:20,230 --> 00:30:23,099
What happens and what is the order of log output

362
00:30:27,340 --> 00:30:29,040
First the first listener is executed

363
00:30:29,040 --> 00:30:30,580
Ok, it will enter the JS stack

364
00:30:30,580 --> 00:30:35,369
Raise a micro task to the queue, reach the next line, print Listener1, this is the first answer

365
00:30:36,790 --> 00:30:41,670
Most people agree with this, but what happens next, I started a poll on Twiter

366
00:30:41,670 --> 00:30:43,670
I also talked to some people

367
00:30:43,870 --> 00:30:50,940
Most people say that the next log should be Listener 2. 63% of people choose this

368
00:30:51,310 --> 00:30:56,399
But this is not the correct answer.

369
00:30:59,620 --> 00:31:06,969
Do n’t worry if you choose Listener2, many people are like you

370
00:31:07,970 --> 00:31:13,659
The listener has finished executing, so the stack is cleared

371
00:31:14,299 --> 00:31:16,389
So it's the micro task

372
00:31:16,520 --> 00:31:21,159
This will run the promise and print Micortask 1

373
00:31:21,740 --> 00:31:27,400
Then it ’s the second listener, so the order is Listener 1 Microtask 1 Listen 2 Microtask2

374
00:31:28,970 --> 00:31:36,130
This is the case when the user clicks the button. What if we click the button by code? The situation is different

375
00:31:37,549 --> 00:31:42,908
First our script will be on the stack and click

376
00:31:43,669 --> 00:31:46,778
It dispatches events synchronously, so it starts executing the first listener

377
00:31:47,299 --> 00:31:51,519
Submit the microtask, print listener 1, is the next step to execute the microtask? no

378
00:31:51,520 --> 00:31:54,459
Can't complete a micro task

379
00:31:54,460 --> 00:31:59,500
This is the difference. At this time, the stack has not been cleared, and the button's click method has not been executed

380
00:32:00,380 --> 00:32:07,029
So execute Listener 2 and submit another microtask, now print Listener2

381
00:32:08,120 --> 00:32:11,049
The listener has finished executing

382
00:32:11,120 --> 00:32:15,819
The button click event is completed, the stack is cleared, and micro tasks can now be performed

383
00:32:15,820 --> 00:32:21,070
They are executed in order, pay attention to this in actual coding

384
00:32:21,980 --> 00:32:26,289
Pay attention when writing automation

385
00:32:27,289 --> 00:32:29,349
Because automation may use code to perform clicks

