1
00:00:03,680 --> 00:00:09,510

hello everybody I was gone that's the

2
00:00:09,510 --> 00:00:12,030
most beautiful venue ever but probably

3
00:00:12,030 --> 00:00:14,870
every speaker will tell that

4
00:00:14,870 --> 00:00:16,800
watch your back brows are you being

5
00:00:16,800 --> 00:00:21,920
observed let me quickly introduce myself

6
00:00:21,920 --> 00:00:25,380
I'm Stefan sometimes I look like that

7
00:00:25,380 --> 00:00:29,130
who has been at CSS comp yesterday yeah

8
00:00:29,130 --> 00:00:31,320
this is an initiative that is called one

9
00:00:31,320 --> 00:00:33,180
zjs so if you want to join us feel free

10
00:00:33,180 --> 00:00:37,010
it's a lot of fun it's a very fluffy so

11
00:00:37,010 --> 00:00:39,719
definitely really cool thing I'm a

12
00:00:39,719 --> 00:00:41,040
front-end developer from Berlin

13
00:00:41,040 --> 00:00:43,500
I'm occasionally teaching CSS and node

14
00:00:43,500 --> 00:00:46,170
and I'm organizing the web performance

15
00:00:46,170 --> 00:00:48,480
meetup in Berlin and my main focus these

16
00:00:48,480 --> 00:00:50,969
days is open source performance where

17
00:00:50,969 --> 00:00:53,430
performance and accessibility and I work

18
00:00:53,430 --> 00:00:55,020
for a company that is called contentful

19
00:00:55,020 --> 00:00:58,109
so we are a content management system in

20
00:00:58,109 --> 00:00:59,910
the cloud this means that if you need a

21
00:00:59,910 --> 00:01:03,300
CMS you can simply register give your

22
00:01:03,300 --> 00:01:05,040
editors or non-technical people a web

23
00:01:05,040 --> 00:01:06,780
interface and you as a developer then

24
00:01:06,780 --> 00:01:10,350
only have to work with a with an API and

25
00:01:10,350 --> 00:01:13,770
this is what you do anyways and with

26
00:01:13,770 --> 00:01:15,390
content all we always say editors get a

27
00:01:15,390 --> 00:01:17,310
CMS and we as developers don't actually

28
00:01:17,310 --> 00:01:18,780
have to work with one which is really

29
00:01:18,780 --> 00:01:22,560
really nice and last fact about myself

30
00:01:22,560 --> 00:01:26,780
is I'm really excited about conferences

31
00:01:26,780 --> 00:01:29,040
because you can learn so much stuff and

32
00:01:29,040 --> 00:01:31,140
you can meet a lot of new people you can

33
00:01:31,140 --> 00:01:32,909
have an excellent time you can make new

34
00:01:32,909 --> 00:01:35,100
friends and these conferences helped me

35
00:01:35,100 --> 00:01:39,630
to stay up-to-date because the web

36
00:01:39,630 --> 00:01:43,140
platform today involves really really

37
00:01:43,140 --> 00:01:46,110
fast and we are finally yearly egg must

38
00:01:46,110 --> 00:01:48,479
releases new API browser api's are

39
00:01:48,479 --> 00:01:52,100
coming out every day and we finally have

40
00:01:52,100 --> 00:01:55,979
evergreen browsers right I'm really

41
00:01:55,979 --> 00:01:56,700
happy about that

42
00:01:56,700 --> 00:02:01,950
and staying up to date is kind of part

43
00:02:01,950 --> 00:02:05,310
of our job and I personally have a hate

44
00:02:05,310 --> 00:02:07,560
love relationship with that because

45
00:02:07,560 --> 00:02:09,190
every day

46
00:02:09,190 --> 00:02:14,650
we're dealing with this a new tool every

47
00:02:14,650 --> 00:02:17,410
week but then the same time browser

48
00:02:17,410 --> 00:02:19,930
api's adapt to common use cases right

49
00:02:19,930 --> 00:02:21,520
let's think of jQuery and the dollar

50
00:02:21,520 --> 00:02:23,710
selector today we've got document query

51
00:02:23,710 --> 00:02:25,870
selector all and the browser api's are

52
00:02:25,870 --> 00:02:28,150
slowly moving from a pool model where we

53
00:02:28,150 --> 00:02:32,140
have to ask for information to push

54
00:02:32,140 --> 00:02:37,150
model and what I want to show you today

55
00:02:37,150 --> 00:02:41,700
is what that actually means but first I

56
00:02:41,700 --> 00:02:44,460
think we should celebrate

57
00:02:44,460 --> 00:02:46,930
because we've got a lot of cool new

58
00:02:46,930 --> 00:02:51,250
stuff today and we're here and I believe

59
00:02:51,250 --> 00:02:53,830
we will have two excellent days so what

60
00:02:53,830 --> 00:02:55,960
I did is I took the J's computer pest

61
00:02:55,960 --> 00:02:58,360
website this is how it looks like this

62
00:02:58,360 --> 00:03:03,480
is the schedule looks good to me

63
00:03:03,480 --> 00:03:07,720
but I think we can bring a little bit

64
00:03:07,720 --> 00:03:12,040
more celebration in there so I spice it

65
00:03:12,040 --> 00:03:16,209
up a little bit with a fancy lazy

66
00:03:16,209 --> 00:03:18,190
loading effect in case you don't know

67
00:03:18,190 --> 00:03:19,330
that one that's the Twitter heart

68
00:03:19,330 --> 00:03:23,020
animation and I stole it from a nap

69
00:03:23,020 --> 00:03:25,959
tutor who does crazy stuff in CSS and

70
00:03:25,959 --> 00:03:28,959
this is done with one element so how

71
00:03:28,959 --> 00:03:31,090
would you usually achieve this kind of

72
00:03:31,090 --> 00:03:33,100
effect but first you have to figure out

73
00:03:33,100 --> 00:03:34,390
if something is visible in the viewport

74
00:03:34,390 --> 00:03:36,580
right so how do you do that

75
00:03:36,580 --> 00:03:42,970
well I'd Google huh and then you sorry

76
00:03:42,970 --> 00:03:45,660
and then you end up at Stack Overflow

77
00:03:45,660 --> 00:03:48,810
who's guilty of copying this snippet

78
00:03:48,810 --> 00:03:52,060
come on probably more people here and

79
00:03:52,060 --> 00:03:54,100
then there's this piece of logic in

80
00:03:54,100 --> 00:03:57,280
there which I I'm always too lazy to

81
00:03:57,280 --> 00:04:00,310
think about that but this one got shot

82
00:04:00,310 --> 00:04:04,180
with this though this is calling element

83
00:04:04,180 --> 00:04:06,640
get bounding client rect and this

84
00:04:06,640 --> 00:04:09,190
function on and anuman at Dom element

85
00:04:09,190 --> 00:04:10,239
can trigger the browser to

86
00:04:10,239 --> 00:04:12,340
asynchronously Nino to synchronously

87
00:04:12,340 --> 00:04:15,040
calculate style and layout this happens

88
00:04:15,040 --> 00:04:17,169
when something changed like adding in

89
00:04:17,169 --> 00:04:19,710
class or something and this is a an

90
00:04:19,710 --> 00:04:21,930
expensive operation

91
00:04:21,930 --> 00:04:23,220
when you use this you should always

92
00:04:23,220 --> 00:04:25,800
batch all the reads and then write stuff

93
00:04:25,800 --> 00:04:28,370
but this is actually not cool because

94
00:04:28,370 --> 00:04:31,710
well we have to pull for information

95
00:04:31,710 --> 00:04:34,259
right we have to ask s Blissett li if

96
00:04:34,259 --> 00:04:36,720
you understand shion's are good to use

97
00:04:36,720 --> 00:04:38,400
performance wise Paul Irish is

98
00:04:38,400 --> 00:04:41,759
maintaining this document here and when

99
00:04:41,759 --> 00:04:44,580
you're doing these kind of things having

100
00:04:44,580 --> 00:04:46,139
a look there it's definitely a big help

101
00:04:46,139 --> 00:04:51,630
so what is next then well we define a

102
00:04:51,630 --> 00:04:55,349
scroll handler right which fires 1,000

103
00:04:55,349 --> 00:04:57,479
times when you scroll through a page and

104
00:04:57,479 --> 00:04:58,860
there's also something wrong with that

105
00:04:58,860 --> 00:05:02,550
because scroll or scroll handlers are

106
00:05:02,550 --> 00:05:04,530
really expensive operation by default

107
00:05:04,530 --> 00:05:08,460
and when we want to build great you eyes

108
00:05:08,460 --> 00:05:11,639
that stick under our fingers when we

109
00:05:11,639 --> 00:05:13,949
play around with our phones we always

110
00:05:13,949 --> 00:05:17,810
have to aim for 60 frames per second

111
00:05:17,810 --> 00:05:20,220
dividing one second by 60 means that we

112
00:05:20,220 --> 00:05:22,440
have 16 millisecond but this is actually

113
00:05:22,440 --> 00:05:25,320
not true because the browser has to do

114
00:05:25,320 --> 00:05:27,870
some other same things then just dealing

115
00:05:27,870 --> 00:05:31,020
with our JavaScript so in real time we

116
00:05:31,020 --> 00:05:34,130
have around 10 milliseconds to avoid

117
00:05:34,130 --> 00:05:37,800
janky scrolling this means that we want

118
00:05:37,800 --> 00:05:39,659
to do as less as possible in a scroll

119
00:05:39,659 --> 00:05:43,139
handler so what I did next is well I had

120
00:05:43,139 --> 00:05:46,199
to my developer tools of choice and I

121
00:05:46,199 --> 00:05:49,020
monitored the whole thing right these

122
00:05:49,020 --> 00:05:51,690
are the chrome dev tools and first thing

123
00:05:51,690 --> 00:05:55,139
I did is I throttled the CPU because

124
00:05:55,139 --> 00:05:57,300
this device here and we heard that

125
00:05:57,300 --> 00:05:59,639
yesterday already is not your average

126
00:05:59,639 --> 00:06:04,050
user not everybody has this kind of

127
00:06:04,050 --> 00:06:06,509
device and also not everybody has a

128
00:06:06,509 --> 00:06:10,349
latest or recent phone and then I

129
00:06:10,349 --> 00:06:13,889
checked the framerate of my cool lazy

130
00:06:13,889 --> 00:06:19,080
loading effect and well it was not that

131
00:06:19,080 --> 00:06:20,550
good right

132
00:06:20,550 --> 00:06:22,949
and when we look a little bit deeper we

133
00:06:22,949 --> 00:06:26,430
see that element get found inclined rect

134
00:06:26,430 --> 00:06:29,940
takes big part of that and in this

135
00:06:29,940 --> 00:06:31,919
example it took actually 12 milliseconds

136
00:06:31,919 --> 00:06:33,210
which means that we already hit the

137
00:06:33,210 --> 00:06:34,300
budget

138
00:06:34,300 --> 00:06:37,509
and this is firing on every scroll frame

139
00:06:37,509 --> 00:06:41,199
right this is really expensive so let me

140
00:06:41,199 --> 00:06:43,979
show you one solution to this problem

141
00:06:43,979 --> 00:06:47,020
the intersection observer the

142
00:06:47,020 --> 00:06:48,610
intersection observer is a method to s

143
00:06:48,610 --> 00:06:50,620
on personnel s synchronously query the

144
00:06:50,620 --> 00:06:52,990
position of an element with respect to

145
00:06:52,990 --> 00:06:55,949
other elements or the global viewport

146
00:06:55,949 --> 00:06:59,259
this means with this we don't have to do

147
00:06:59,259 --> 00:07:01,900
costly dumb and Styler queries and we

148
00:07:01,900 --> 00:07:03,669
don't have to pause for information

149
00:07:03,669 --> 00:07:06,250
using something like this helps us to

150
00:07:06,250 --> 00:07:10,090
reduce CPU GPU and energy costs to

151
00:07:10,090 --> 00:07:13,449
figure out if something is visible so

152
00:07:13,449 --> 00:07:14,580
how does that work

153
00:07:14,580 --> 00:07:16,719
here you see an intersection observer

154
00:07:16,719 --> 00:07:19,960
implementation first you have to define

155
00:07:19,960 --> 00:07:21,849
a threshold and in this case I'm going

156
00:07:21,849 --> 00:07:23,710
with one point zero which means that I

157
00:07:23,710 --> 00:07:27,729
want to get notified when an element is

158
00:07:27,729 --> 00:07:30,280
completely visible then you have to

159
00:07:30,280 --> 00:07:32,139
initialize a new intersection observer

160
00:07:32,139 --> 00:07:33,909
and this is then called with several

161
00:07:33,909 --> 00:07:36,699
intersection entries and these then have

162
00:07:36,699 --> 00:07:39,009
a intersecting property and then I'm

163
00:07:39,009 --> 00:07:40,240
adding a class that is called

164
00:07:40,240 --> 00:07:40,930
party-party

165
00:07:40,930 --> 00:07:43,360
and then I'm I'm observing the given

166
00:07:43,360 --> 00:07:45,699
element because well my job is done here

167
00:07:45,699 --> 00:07:48,759
and then I can just grab all the

168
00:07:48,759 --> 00:07:51,750
elements and can tell the observer hey

169
00:07:51,750 --> 00:07:56,560
can you please watch out here cool so in

170
00:07:56,560 --> 00:08:00,009
with an implementation like that we see

171
00:08:00,009 --> 00:08:04,810
that a now there is no get bound

172
00:08:04,810 --> 00:08:07,419
inclined direct anymore and this is not

173
00:08:07,419 --> 00:08:10,210
called onscroll and when we check the

174
00:08:10,210 --> 00:08:12,219
framerate we see that at least for

175
00:08:12,219 --> 00:08:14,259
figuring out if something is visible we

176
00:08:14,259 --> 00:08:17,469
end up at 60 frames per second I think

177
00:08:17,469 --> 00:08:19,509
this is really really cool so we're

178
00:08:19,509 --> 00:08:21,159
building these kind of things I always

179
00:08:21,159 --> 00:08:24,460
what I always try to do is take a moment

180
00:08:24,460 --> 00:08:28,150
and measure it measured using the dev

181
00:08:28,150 --> 00:08:29,830
tools of your choice use web page test

182
00:08:29,830 --> 00:08:33,669
or lighthouse and maybe try it on a real

183
00:08:33,669 --> 00:08:36,159
device which is not a six month old

184
00:08:36,159 --> 00:08:39,269
MacBook Pro so what options do we have

185
00:08:39,269 --> 00:08:42,430
for an intersection observer where we

186
00:08:42,430 --> 00:08:45,100
can define a different route element we

187
00:08:45,100 --> 00:08:47,110
can tell the intersection observer how

188
00:08:47,110 --> 00:08:47,640
this is

189
00:08:47,640 --> 00:08:50,370
and then we can define a threshold with

190
00:08:50,370 --> 00:08:52,529
which is a single value or several

191
00:08:52,529 --> 00:08:54,510
values and this is actually really

192
00:08:54,510 --> 00:08:57,000
really cool because when you define

193
00:08:57,000 --> 00:09:00,360
several values so in this example zero

194
00:09:00,360 --> 00:09:03,060
and one I get notified when something

195
00:09:03,060 --> 00:09:06,089
enters the viewport I get notified when

196
00:09:06,089 --> 00:09:08,190
it's completely visible I get notified

197
00:09:08,190 --> 00:09:09,779
when it starts leaving and when it's

198
00:09:09,779 --> 00:09:11,940
gone and this is only a few lines of

199
00:09:11,940 --> 00:09:15,540
JavaScript so let's have a look how this

200
00:09:15,540 --> 00:09:20,220
entry looks like that that I get when

201
00:09:20,220 --> 00:09:22,230
I'm notified that something becomes

202
00:09:22,230 --> 00:09:24,769
visible so here we see the viewport and

203
00:09:24,769 --> 00:09:28,170
here we see what happens when the

204
00:09:28,170 --> 00:09:30,930
element enters the viewport so the entry

205
00:09:30,930 --> 00:09:32,880
then has an is intersecting property

206
00:09:32,880 --> 00:09:35,790
which is true in this case and an

207
00:09:35,790 --> 00:09:37,640
intersection ratio which is something

208
00:09:37,640 --> 00:09:41,850
around zero here why something because

209
00:09:41,850 --> 00:09:44,279
the intersection observer works a sync

210
00:09:44,279 --> 00:09:46,890
so the browser figures out when it has

211
00:09:46,890 --> 00:09:49,829
time to figure out if something is

212
00:09:49,829 --> 00:09:52,440
visible so what happens when it leaves

213
00:09:52,440 --> 00:09:54,269
the viewport again we've got it

214
00:09:54,269 --> 00:09:56,399
intersecting faults and then we've got

215
00:09:56,399 --> 00:09:58,380
the intersection ratio of zero which

216
00:09:58,380 --> 00:10:00,240
makes sense because there's no value

217
00:10:00,240 --> 00:10:03,360
below zero right there was one thing

218
00:10:03,360 --> 00:10:05,459
though that surprised me so let's go

219
00:10:05,459 --> 00:10:08,550
with a value that is bigger than zero so

220
00:10:08,550 --> 00:10:12,089
when we have an in ratio or a threshold

221
00:10:12,089 --> 00:10:15,329
of 0.5 so something is entering the

222
00:10:15,329 --> 00:10:17,790
viewport so we can have is intersecting

223
00:10:17,790 --> 00:10:19,890
true and an intersection ratio again

224
00:10:19,890 --> 00:10:22,860
something around 0.5 but when it's now

225
00:10:22,860 --> 00:10:26,160
leaving the viewport roof cut is

226
00:10:26,160 --> 00:10:28,529
intersecting so true this surprised me

227
00:10:28,529 --> 00:10:30,779
initially because I was expecting it to

228
00:10:30,779 --> 00:10:33,600
be false but it's intersecting tells you

229
00:10:33,600 --> 00:10:35,490
if it's still in the viewport right and

230
00:10:35,490 --> 00:10:36,990
when we go with the threshold of 0.5

231
00:10:36,990 --> 00:10:38,490
this actually makes sense

232
00:10:38,490 --> 00:10:40,290
and the ratio then is something around

233
00:10:40,290 --> 00:10:43,980
0.5 and with the intersection observer

234
00:10:43,980 --> 00:10:47,190
then we can build really nice interfaces

235
00:10:47,190 --> 00:10:49,260
like something like that make stuff

236
00:10:49,260 --> 00:10:51,269
appear dissipate peer when something

237
00:10:51,269 --> 00:10:53,760
else changed in in the cutout of the

238
00:10:53,760 --> 00:10:55,949
viewport and this is 10 lines of

239
00:10:55,949 --> 00:11:00,000
JavaScript without googling I think this

240
00:11:00,000 --> 00:11:00,550
is real

241
00:11:00,550 --> 00:11:03,060
really cool and you can also use it for

242
00:11:03,060 --> 00:11:05,440
figuring out if something is visible in

243
00:11:05,440 --> 00:11:12,580
responsive web design so there are a lot

244
00:11:12,580 --> 00:11:15,310
of use cases for for the intersection

245
00:11:15,310 --> 00:11:15,940
observer

246
00:11:15,940 --> 00:11:18,579
so how's their support today after the

247
00:11:18,579 --> 00:11:25,810
section observer well it's not too bad I

248
00:11:25,810 --> 00:11:29,529
would say but there was one culture

249
00:11:29,529 --> 00:11:31,029
though when I started playing around

250
00:11:31,029 --> 00:11:34,450
with this I discovered that they have

251
00:11:34,450 --> 00:11:37,240
been incompatibilities between spec and

252
00:11:37,240 --> 00:11:39,850
vendors and people got together and were

253
00:11:39,850 --> 00:11:41,200
like okay we have to figure that out

254
00:11:41,200 --> 00:11:46,050
because some yeah let's figure that out

255
00:11:46,050 --> 00:11:49,630
but these are resolved since October 17

256
00:11:49,630 --> 00:11:53,980
with the release of edge 16 so it's now

257
00:11:53,980 --> 00:11:56,320
ready to go the only thing I would want

258
00:11:56,320 --> 00:11:58,360
to tell you is when you use this without

259
00:11:58,360 --> 00:12:00,220
a polyfill or something just watch out

260
00:12:00,220 --> 00:12:02,769
and read maybe the issues and see if

261
00:12:02,769 --> 00:12:05,050
there are issues or if you run into

262
00:12:05,050 --> 00:12:10,300
these but how's the polyfill is this

263
00:12:10,300 --> 00:12:11,470
poly fillable at all

264
00:12:11,470 --> 00:12:14,440
it is and the polyfill also takes care

265
00:12:14,440 --> 00:12:16,930
of this incompatibilities so this is

266
00:12:16,930 --> 00:12:20,920
usable in production today so we

267
00:12:20,920 --> 00:12:23,290
celebrated every talk here now I think

268
00:12:23,290 --> 00:12:27,550
we can do more so let's celebrate the

269
00:12:27,550 --> 00:12:42,940
whole schedule ready

270
00:12:42,950 --> 00:12:44,779
if you get in case you don't know that

271
00:12:44,779 --> 00:12:46,760
there's a third-party library that is

272
00:12:46,760 --> 00:12:50,209
called cornified so I highly recommend

273
00:12:50,209 --> 00:12:53,329
it so not got the problem the

274
00:12:53,329 --> 00:12:56,000
intersection observer code was wrapped

275
00:12:56,000 --> 00:12:57,139
in and immediately invoked function

276
00:12:57,139 --> 00:12:59,389
expression so if no idea when something

277
00:12:59,389 --> 00:13:01,220
changed or there are no callbacks no

278
00:13:01,220 --> 00:13:03,199
events or something how could I now

279
00:13:03,199 --> 00:13:07,519
figure out that my party party class was

280
00:13:07,519 --> 00:13:08,440
added

281
00:13:08,440 --> 00:13:13,010
well let's need another observer here

282
00:13:13,010 --> 00:13:14,990
the a beautician observer provides

283
00:13:14,990 --> 00:13:16,699
developers with a way to react to

284
00:13:16,699 --> 00:13:20,889
changes in the Dom so how does that work

285
00:13:20,889 --> 00:13:22,790
so here we see a basic implementation

286
00:13:22,790 --> 00:13:25,760
and what I do is I grab the whole

287
00:13:25,760 --> 00:13:28,100
schedule then I grab all the speaker's

288
00:13:28,100 --> 00:13:32,779
then I define a config object which that

289
00:13:32,779 --> 00:13:34,519
the which defines that the mutation

290
00:13:34,519 --> 00:13:35,300
observers should watch out for

291
00:13:35,300 --> 00:13:38,630
attributes and the whole subtree then I

292
00:13:38,630 --> 00:13:41,029
initialize a new mutation observer and

293
00:13:41,029 --> 00:13:44,920
then I get notified when there was a a

294
00:13:44,920 --> 00:13:47,990
in na a net will change and then I'm

295
00:13:47,990 --> 00:13:49,550
just checking if the element now

296
00:13:49,550 --> 00:13:52,399
includes the class party party and then

297
00:13:52,399 --> 00:13:54,589
I'm counting up and if this is done I'm

298
00:13:54,589 --> 00:13:58,459
calling Korn if I edge and then well I'm

299
00:13:58,459 --> 00:14:00,170
just telling the mutation observer all

300
00:14:00,170 --> 00:14:03,560
right please check out or watch out for

301
00:14:03,560 --> 00:14:07,010
or observe this element what options do

302
00:14:07,010 --> 00:14:08,930
we have for mutation observer we can

303
00:14:08,930 --> 00:14:11,740
define if we want to observe children

304
00:14:11,740 --> 00:14:15,320
attributes whole sub trees and they are

305
00:14:15,320 --> 00:14:17,870
way way way more options to define so

306
00:14:17,870 --> 00:14:20,690
you can check out the spec or the mdn

307
00:14:20,690 --> 00:14:24,529
entry for that how is the supporter for

308
00:14:24,529 --> 00:14:31,339
the mutation observer pretty green you

309
00:14:31,339 --> 00:14:32,990
might not meet this observer very often

310
00:14:32,990 --> 00:14:36,140
but if so this is extremely helpful and

311
00:14:36,140 --> 00:14:39,290
I use cornified here now and I'm also

312
00:14:39,290 --> 00:14:41,810
I'm kind of a web performance person and

313
00:14:41,810 --> 00:14:43,519
when you do something like that what I

314
00:14:43,519 --> 00:14:45,589
want to tell you also is but let's

315
00:14:45,589 --> 00:14:48,170
always watch out for performance right

316
00:14:48,170 --> 00:14:50,000
and measuring performance can be done in

317
00:14:50,000 --> 00:14:50,389
two ways

318
00:14:50,389 --> 00:14:53,480
there is synthetic monitoring this

319
00:14:53,480 --> 00:14:55,860
basically means that you send a robot

320
00:14:55,860 --> 00:15:00,570
your sites gather some metrics and see

321
00:15:00,570 --> 00:15:03,930
how you're doing that way on there's

322
00:15:03,930 --> 00:15:05,670
also real user monitoring which means

323
00:15:05,670 --> 00:15:08,720
that you implement some JavaScript and

324
00:15:08,720 --> 00:15:11,490
you get the metrics right off out of the

325
00:15:11,490 --> 00:15:16,360
browser's or of your visitors or users

326
00:15:16,370 --> 00:15:19,680
for synthetic monitoring in case you

327
00:15:19,680 --> 00:15:21,840
don't know it really handy tool is

328
00:15:21,840 --> 00:15:22,890
called webpagetest

329
00:15:22,890 --> 00:15:27,720
and what you can do there is you can

330
00:15:27,720 --> 00:15:29,820
enter a website can define a connection

331
00:15:29,820 --> 00:15:35,450
speed a location and then you get get

332
00:15:35,450 --> 00:15:38,880
metrics afterwards if you wonder how

333
00:15:38,880 --> 00:15:40,890
people make these kind of comparison

334
00:15:40,890 --> 00:15:43,440
videos compare videos of two websites to

335
00:15:43,440 --> 00:15:46,200
see what is loading when this is all

336
00:15:46,200 --> 00:15:48,810
done with web page tests and this also

337
00:15:48,810 --> 00:15:51,990
then gives you turned on and on tips and

338
00:15:51,990 --> 00:15:54,570
tricks and a lot of useful stuff so if

339
00:15:54,570 --> 00:15:56,610
you haven't used that yet give it a try

340
00:15:56,610 --> 00:16:01,140
it's a really really powerful tool but

341
00:16:01,140 --> 00:16:03,450
this is only one moment in time if you

342
00:16:03,450 --> 00:16:06,120
look for constant or continuous and

343
00:16:06,120 --> 00:16:07,500
performance measurements

344
00:16:07,500 --> 00:16:09,540
tools like speed curve or calibre can

345
00:16:09,540 --> 00:16:12,060
help you out there but I want to

346
00:16:12,060 --> 00:16:14,400
actually talk about our real user

347
00:16:14,400 --> 00:16:15,840
metrics and what we have there today is

348
00:16:15,840 --> 00:16:17,820
the navigation timing API the resource

349
00:16:17,820 --> 00:16:21,630
timing API and the user timing API so

350
00:16:21,630 --> 00:16:24,060
let's have a quick look at what we get

351
00:16:24,060 --> 00:16:26,280
out of these api's so the navigation

352
00:16:26,280 --> 00:16:29,310
timing API is available via our window

353
00:16:29,310 --> 00:16:31,380
dot performance stop timing and this is

354
00:16:31,380 --> 00:16:33,150
an interface for a web application to

355
00:16:33,150 --> 00:16:35,070
access the complete timing information

356
00:16:35,070 --> 00:16:39,090
for the navigation of the document so

357
00:16:39,090 --> 00:16:41,940
what do we get here well there's a lot

358
00:16:41,940 --> 00:16:44,070
of stuff included this can be really

359
00:16:44,070 --> 00:16:47,160
useful information if you measure web

360
00:16:47,160 --> 00:16:49,800
performance there are stuff like how

361
00:16:49,800 --> 00:16:50,550
long did it

362
00:16:50,550 --> 00:16:54,330
TNS take how long did TCP take when did

363
00:16:54,330 --> 00:16:56,580
Dom content loaded all these kind of

364
00:16:56,580 --> 00:16:59,220
things are accessible via the navigation

365
00:16:59,220 --> 00:17:02,460
timing API and then there's also the

366
00:17:02,460 --> 00:17:04,440
resource timing API which is an

367
00:17:04,440 --> 00:17:06,300
interface for web applications to access

368
00:17:06,300 --> 00:17:08,040
the complete timing information for

369
00:17:08,040 --> 00:17:09,960
resources in a dark

370
00:17:09,960 --> 00:17:12,570
and you got more or less similar data

371
00:17:12,570 --> 00:17:14,790
there a few entries are missing but

372
00:17:14,790 --> 00:17:16,560
let's think of style sheets right style

373
00:17:16,560 --> 00:17:18,240
sheets are render blocking resources

374
00:17:18,240 --> 00:17:22,830
maybe you want to know when a style

375
00:17:22,830 --> 00:17:25,740
sheet is hanging around or not loading

376
00:17:25,740 --> 00:17:27,660
for 3 seconds because this is directly

377
00:17:27,660 --> 00:17:31,530
impacting user experience and then

378
00:17:31,530 --> 00:17:35,940
there's also the user timing API which

379
00:17:35,940 --> 00:17:38,280
is an interface to create application

380
00:17:38,280 --> 00:17:41,850
specific time stamps and you can measure

381
00:17:41,850 --> 00:17:43,800
for example navigations in a single page

382
00:17:43,800 --> 00:17:45,300
application something like that so let's

383
00:17:45,300 --> 00:17:48,210
measure how long my Corning fication

384
00:17:48,210 --> 00:17:51,030
took so here we see what happens when

385
00:17:51,030 --> 00:17:54,020
all talks have been seen and I can now

386
00:17:54,020 --> 00:17:57,900
set marks so I'm setting a mark before

387
00:17:57,900 --> 00:18:00,060
and right after and then I'm defining a

388
00:18:00,060 --> 00:18:02,280
measure which is the combination of both

389
00:18:02,280 --> 00:18:05,820
marks how can I access this information

390
00:18:05,820 --> 00:18:08,250
then how long it took well--there's

391
00:18:08,250 --> 00:18:10,080
window dot performance get entries by

392
00:18:10,080 --> 00:18:13,020
type mark and you see when it happened

393
00:18:13,020 --> 00:18:16,200
there and by using get entries pad type

394
00:18:16,200 --> 00:18:19,140
measure you see how long it took and you

395
00:18:19,140 --> 00:18:21,660
see in this example was 6 milliseconds

396
00:18:21,660 --> 00:18:25,980
which kind of fits into my budgets so

397
00:18:25,980 --> 00:18:29,550
real user metrics right today exists we

398
00:18:29,550 --> 00:18:32,190
can set mark measures so we've got marks

399
00:18:32,190 --> 00:18:33,840
measures and navigation resources and

400
00:18:33,840 --> 00:18:36,600
these are accessible via get entries get

401
00:18:36,600 --> 00:18:38,670
entries by type and get entries by name

402
00:18:38,670 --> 00:18:43,320
and that's pretty cool but this is not

403
00:18:43,320 --> 00:18:46,050
what we want because using this we have

404
00:18:46,050 --> 00:18:48,210
to pull for information we have to

405
00:18:48,210 --> 00:18:50,160
detect when there are new metrics we

406
00:18:50,160 --> 00:18:52,740
have to duplicate logic to figure out

407
00:18:52,740 --> 00:18:57,000
what is new so let me tell you the third

408
00:18:57,000 --> 00:19:01,680
one here the performance observer so

409
00:19:01,680 --> 00:19:03,330
this is how it works so you have to

410
00:19:03,330 --> 00:19:05,250
initialize a new performance observer

411
00:19:05,250 --> 00:19:07,740
and then you can define what you want to

412
00:19:07,740 --> 00:19:09,390
watch out for right in this case it's

413
00:19:09,390 --> 00:19:11,390
type measure and then you get notified

414
00:19:11,390 --> 00:19:16,920
and this is really cool because this way

415
00:19:16,920 --> 00:19:19,210
measurements are pushed toward

416
00:19:19,210 --> 00:19:21,850
me so I and I also had a look at the

417
00:19:21,850 --> 00:19:23,710
stack man and it was like what was

418
00:19:23,710 --> 00:19:25,690
written in there all right developers

419
00:19:25,690 --> 00:19:27,490
today are encouraged to use the

420
00:19:27,490 --> 00:19:31,059
performance observer all right I can

421
00:19:31,059 --> 00:19:31,659
deal with that

422
00:19:31,659 --> 00:19:32,980
but then there was also an interesting

423
00:19:32,980 --> 00:19:35,590
sentence which was like further new

424
00:19:35,590 --> 00:19:38,950
performance AP isometrics may only be

425
00:19:38,950 --> 00:19:40,419
available through the performance

426
00:19:40,419 --> 00:19:47,020
observer interface what new metrics are

427
00:19:47,020 --> 00:19:50,230
we talking about here so there is for

428
00:19:50,230 --> 00:19:53,710
example the paint timing API and this

429
00:19:53,710 --> 00:19:56,860
API gives us information for example

430
00:19:56,860 --> 00:19:58,419
when the first paint which means any

431
00:19:58,419 --> 00:20:00,429
painted pixel or when the first

432
00:20:00,429 --> 00:20:02,409
contentful paint happened which means

433
00:20:02,409 --> 00:20:05,260
that any text image non white canvas or

434
00:20:05,260 --> 00:20:08,409
SVG is rendered and this is shipping in

435
00:20:08,409 --> 00:20:11,380
chrome for example since chrome 60 and

436
00:20:11,380 --> 00:20:14,260
we're currently on chrome 61 this is

437
00:20:14,260 --> 00:20:17,200
also available using get entries by type

438
00:20:17,200 --> 00:20:20,620
and then there's also the long task API

439
00:20:20,620 --> 00:20:22,779
which tells us when JavaScript

440
00:20:22,779 --> 00:20:25,059
operations took longer than 50

441
00:20:25,059 --> 00:20:28,179
milliseconds and with these kind of

442
00:20:28,179 --> 00:20:30,520
things I've kept the metrics right at my

443
00:20:30,520 --> 00:20:32,409
fingertips right so this is for example

444
00:20:32,409 --> 00:20:34,960
my personal website and what you see

445
00:20:34,960 --> 00:20:36,640
there is that I have a local storage

446
00:20:36,640 --> 00:20:42,429
flag and with this this I get the

447
00:20:42,429 --> 00:20:45,090
information how long something took

448
00:20:45,090 --> 00:20:47,830
right on my face and I'm also relying on

449
00:20:47,830 --> 00:20:50,590
the content API here so I also see how

450
00:20:50,590 --> 00:20:54,010
long the API calls take but let's have a

451
00:20:54,010 --> 00:20:56,500
look at another example here so this is

452
00:20:56,500 --> 00:20:59,710
the Lando and what's the most important

453
00:20:59,710 --> 00:21:03,309
thing here well I would say it's the

454
00:21:03,309 --> 00:21:05,890
image right it's been 50% of the screen

455
00:21:05,890 --> 00:21:08,770
so how hard can it be to measure when

456
00:21:08,770 --> 00:21:12,490
this thing is rendered well today we

457
00:21:12,490 --> 00:21:14,169
have to do this we have to define the

458
00:21:14,169 --> 00:21:17,260
image with an onload handler this clears

459
00:21:17,260 --> 00:21:20,529
navigation timing API marks then inside

460
00:21:20,529 --> 00:21:21,730
the new mark and then we've got an

461
00:21:21,730 --> 00:21:23,590
inline script afterwards so what this

462
00:21:23,590 --> 00:21:25,270
basically does is whatever happens last

463
00:21:25,270 --> 00:21:26,630
is the right

464
00:21:26,630 --> 00:21:29,480
but this is not good experience at least

465
00:21:29,480 --> 00:21:33,440
in my mind so there are also new specs

466
00:21:33,440 --> 00:21:36,290
in the making for example like hero

467
00:21:36,290 --> 00:21:38,000
element timing this is currently really

468
00:21:38,000 --> 00:21:39,710
only in spec writing and discussing how

469
00:21:39,710 --> 00:21:41,390
we could implement that but with

470
00:21:41,390 --> 00:21:42,770
something like that we can get

471
00:21:42,770 --> 00:21:45,830
information when something crucial is

472
00:21:45,830 --> 00:21:48,230
rendered or laid out for example Twitter

473
00:21:48,230 --> 00:21:49,760
is constantly monitoring how long it

474
00:21:49,760 --> 00:21:52,640
takes until the first tweet is loading

475
00:21:52,640 --> 00:21:54,470
and this is really valuable information

476
00:21:54,470 --> 00:21:56,720
so let's see where this goes and just

477
00:21:56,720 --> 00:21:57,770
for the sake of completeness

478
00:21:57,770 --> 00:22:00,250
there's also server timing which rates

479
00:22:00,250 --> 00:22:04,820
which the server can set via an header a

480
00:22:04,820 --> 00:22:08,030
header and then this values can are

481
00:22:08,030 --> 00:22:09,800
easily accessible via the performance

482
00:22:09,800 --> 00:22:13,370
observer this only works in Canary

483
00:22:13,370 --> 00:22:15,680
though today if you're interested in

484
00:22:15,680 --> 00:22:18,350
more metrics regarding rep performance

485
00:22:18,350 --> 00:22:19,790
there's this excellent talk that is

486
00:22:19,790 --> 00:22:21,410
called leveraging the metrics that most

487
00:22:21,410 --> 00:22:23,570
affect user experience I'm highly

488
00:22:23,570 --> 00:22:27,380
recommended so what's the support for

489
00:22:27,380 --> 00:22:32,390
the performance observer today I just

490
00:22:32,390 --> 00:22:33,860
covered last week actually that Safari

491
00:22:33,860 --> 00:22:35,240
joined the party which was surprising

492
00:22:35,240 --> 00:22:38,570
though so it's not that bad is this poly

493
00:22:38,570 --> 00:22:42,050
fillable well if browser vendors at some

494
00:22:42,050 --> 00:22:43,430
point decide that they only want to push

495
00:22:43,430 --> 00:22:45,170
metrics through the performance observer

496
00:22:45,170 --> 00:22:47,870
the gern is more or less over but so far

497
00:22:47,870 --> 00:22:49,910
the metrics are also available via get

498
00:22:49,910 --> 00:22:51,920
entries by type so you can do a feature

499
00:22:51,920 --> 00:22:54,350
detection check and then you are ready

500
00:22:54,350 --> 00:22:58,220
to go so what we have now is a lazy

501
00:22:58,220 --> 00:23:00,640
loading effect we've got unicorns and

502
00:23:00,640 --> 00:23:02,690
unicorns are pretty gate great but

503
00:23:02,690 --> 00:23:07,430
what's better than unicorns once this

504
00:23:07,430 --> 00:23:14,210
again anyone what was that I didn't

505
00:23:14,210 --> 00:23:18,170
understand it all right I'll give you a

506
00:23:18,170 --> 00:23:27,230
hint and now did I did a glitter but all

507
00:23:27,230 --> 00:23:29,570
right so I'm from Berlin I'm mostly into

508
00:23:29,570 --> 00:23:32,120
indie music but I also like electronic

509
00:23:32,120 --> 00:23:34,880
music and a good over near sunshine good

510
00:23:34,880 --> 00:23:35,190
news

511
00:23:35,190 --> 00:23:37,860
take dancing just forgetting the day

512
00:23:37,860 --> 00:23:41,070
it's perfect to me so what I implemented

513
00:23:41,070 --> 00:23:44,850
next was confetti and to do that I have

514
00:23:44,850 --> 00:23:46,290
to cheat a little bit but I think that's

515
00:23:46,290 --> 00:23:48,900
alright let's assume there's a slide up

516
00:23:48,900 --> 00:24:00,450
and down thing in the website this makes

517
00:24:00,450 --> 00:24:04,110
me really happy so how could we now

518
00:24:04,110 --> 00:24:08,250
figure out if something changed its size

519
00:24:08,250 --> 00:24:14,130
any guesses well there's also the resize

520
00:24:14,130 --> 00:24:16,950
observer so how does that work so we

521
00:24:16,950 --> 00:24:18,660
have to initialize a new resize observer

522
00:24:18,660 --> 00:24:20,580
which then gets called with several

523
00:24:20,580 --> 00:24:23,340
entries and then we're just telling hey

524
00:24:23,340 --> 00:24:24,630
alright can you please watch out for

525
00:24:24,630 --> 00:24:26,220
these elements cool I want to do

526
00:24:26,220 --> 00:24:27,950
something I want to draw confetti then

527
00:24:27,950 --> 00:24:30,540
you might ask yourself though okay a fan

528
00:24:30,540 --> 00:24:33,870
but when is this firing the resize

529
00:24:33,870 --> 00:24:36,150
observer fires when elements gets

530
00:24:36,150 --> 00:24:38,550
inserted and removed from Dom when they

531
00:24:38,550 --> 00:24:41,340
get set to display:none they are not

532
00:24:41,340 --> 00:24:43,980
triggering on CSS transforms though and

533
00:24:43,980 --> 00:24:46,740
with this information further I have to

534
00:24:46,740 --> 00:24:50,930
tell you my implementation was broken so

535
00:24:50,930 --> 00:24:57,150
triggers on on load that's not so cool

536
00:24:57,150 --> 00:24:59,970
it's drawing and closing I mean confetti

537
00:24:59,970 --> 00:25:02,490
is great but it's not really accurate

538
00:25:02,490 --> 00:25:04,730
here and it's also triggering on on

539
00:25:04,730 --> 00:25:08,490
horizontal resizing but I think it was

540
00:25:08,490 --> 00:25:10,860
OK at that point right so one where

541
00:25:10,860 --> 00:25:13,260
could we use the resize observer well

542
00:25:13,260 --> 00:25:15,060
for drag and drop interfaces this can

543
00:25:15,060 --> 00:25:18,300
become really handy this is six lines of

544
00:25:18,300 --> 00:25:20,130
JavaScript and I can maybe a just scroll

545
00:25:20,130 --> 00:25:21,720
positioning or something like that

546
00:25:21,720 --> 00:25:26,220
and we are all waiting for element

547
00:25:26,220 --> 00:25:28,860
queries right maybe they will be there

548
00:25:28,860 --> 00:25:31,440
at some point the JavaScript

549
00:25:31,440 --> 00:25:32,850
implementations are polyfill for this

550
00:25:32,850 --> 00:25:35,700
are also considering using the resize

551
00:25:35,700 --> 00:25:38,400
observer and to figure out if something

552
00:25:38,400 --> 00:25:42,030
changed its size so all the support of

553
00:25:42,030 --> 00:25:47,159
the resize observer today

554
00:25:47,169 --> 00:25:51,499
we're entering cutting edge here I would

555
00:25:51,499 --> 00:25:54,739
say is this poly fillable and usable in

556
00:25:54,739 --> 00:25:59,840
production I would say so so they are

557
00:25:59,840 --> 00:26:01,429
polyfills for the Wizards observer out

558
00:26:01,429 --> 00:26:03,799
there and these use mutation observers

559
00:26:03,799 --> 00:26:07,700
and they aren't they're not covering

560
00:26:07,700 --> 00:26:10,309
everything so you might want to consider

561
00:26:10,309 --> 00:26:12,110
if you want to really want to use that

562
00:26:12,110 --> 00:26:18,470
today but we're still not really happy

563
00:26:18,470 --> 00:26:22,369
so let's face the resize problem here

564
00:26:22,369 --> 00:26:25,220
and let's take a step back

565
00:26:25,220 --> 00:26:26,960
and let's see what we're actually

566
00:26:26,960 --> 00:26:29,119
dealing with so here we've got an

567
00:26:29,119 --> 00:26:31,879
element and this is a simplified version

568
00:26:31,879 --> 00:26:34,220
for one element so what are we dealing

569
00:26:34,220 --> 00:26:35,570
with we're dealing with this initial

570
00:26:35,570 --> 00:26:38,659
call we're dealing with several opening

571
00:26:38,659 --> 00:26:41,149
calls and we're dealing with several

572
00:26:41,149 --> 00:26:43,700
closing calls and what we actually want

573
00:26:43,700 --> 00:26:45,169
to do is we want to get rid of the first

574
00:26:45,169 --> 00:26:47,509
one and of the closing ones so how could

575
00:26:47,509 --> 00:26:50,239
we do this well here we have to call

576
00:26:50,239 --> 00:26:54,559
back that is triggered on resize so well

577
00:26:54,559 --> 00:26:59,600
we could soar boolean and toggle that

578
00:26:59,600 --> 00:27:02,690
and how could we figure out if it's

579
00:27:02,690 --> 00:27:07,850
getting bigger and smaller well we could

580
00:27:07,850 --> 00:27:12,590
store the last run and then compare but

581
00:27:12,590 --> 00:27:14,509
this code for me is not really readable

582
00:27:14,509 --> 00:27:16,700
and it's also hard to maintain and it

583
00:27:16,700 --> 00:27:19,340
has side effects outside of the event

584
00:27:19,340 --> 00:27:22,369
handler and if you have several entries

585
00:27:22,369 --> 00:27:26,359
that gets more more complicated so let's

586
00:27:26,359 --> 00:27:32,119
enter the final topic observables just

587
00:27:32,119 --> 00:27:35,119
because the name is fitting observables

588
00:27:35,119 --> 00:27:37,789
are a collection that arrives over time

589
00:27:37,789 --> 00:27:40,129
and currently they're only in spec but

590
00:27:40,129 --> 00:27:41,600
they have already a widespread usage

591
00:27:41,600 --> 00:27:44,090
thanks to our X and libraries like that

592
00:27:44,090 --> 00:27:46,749
and they're definitely a talk on its own

593
00:27:46,749 --> 00:27:49,759
so again observables a collection that

594
00:27:49,759 --> 00:27:51,200
arrives over time so let's have a look

595
00:27:51,200 --> 00:27:53,809
at an observable implementation so here

596
00:27:53,809 --> 00:27:56,720
you see a function that is called get

597
00:27:56,720 --> 00:27:58,580
observable with three values it's

598
00:27:58,580 --> 00:27:59,760
initializing in Europe so

599
00:27:59,760 --> 00:28:02,040
observable then it's calling next and

600
00:28:02,040 --> 00:28:04,680
pushing values into this collection and

601
00:28:04,680 --> 00:28:07,290
then it's completing at some point then

602
00:28:07,290 --> 00:28:10,290
we're defining handlers for given events

603
00:28:10,290 --> 00:28:13,170
of this collection and then we just

604
00:28:13,170 --> 00:28:15,810
subscribe to that and then we get next 1

605
00:28:15,810 --> 00:28:18,420
2 3 and yeah we're done when I saw this

606
00:28:18,420 --> 00:28:22,680
for the first time I was like what's the

607
00:28:22,680 --> 00:28:23,430
deal here

608
00:28:23,430 --> 00:28:26,210
let's just shifting around callbacks now

609
00:28:26,210 --> 00:28:28,410
but now we're dealing with the

610
00:28:28,410 --> 00:28:29,820
collection which means that we have

611
00:28:29,820 --> 00:28:31,560
stuff available that like maps will the

612
00:28:31,560 --> 00:28:33,720
reduce and this makes it possible to

613
00:28:33,720 --> 00:28:38,520
write rate cleaner code so this was the

614
00:28:38,520 --> 00:28:40,410
initial implementation and let's change

615
00:28:40,410 --> 00:28:42,330
that to use for example something like

616
00:28:42,330 --> 00:28:46,800
Rx and new observable comes rx create

617
00:28:46,800 --> 00:28:49,830
here and what I now have is a collection

618
00:28:49,830 --> 00:28:54,180
of events over time and this gives me

619
00:28:54,180 --> 00:28:58,200
collection superpowers so let's have a

620
00:28:58,200 --> 00:29:00,120
look at the timeline again so this is

621
00:29:00,120 --> 00:29:02,040
what we're dealing with and I'm calling

622
00:29:02,040 --> 00:29:03,570
get resize string here which gives me

623
00:29:03,570 --> 00:29:05,130
this collection that arrives over time

624
00:29:05,130 --> 00:29:07,980
how can I get rid of the first one well

625
00:29:07,980 --> 00:29:08,790
skip it

626
00:29:08,790 --> 00:29:13,140
cool how can I figure out if it's how

627
00:29:13,140 --> 00:29:15,630
the last run was well there's a function

628
00:29:15,630 --> 00:29:18,570
for that pairwise cool how can I not

629
00:29:18,570 --> 00:29:23,400
drop the closing ones filtering maybe

630
00:29:23,400 --> 00:29:26,130
and how can I get rid of the previous

631
00:29:26,130 --> 00:29:29,910
ones now map it back and then call the

632
00:29:29,910 --> 00:29:32,550
stuff that I want to do this is pure

633
00:29:32,550 --> 00:29:34,230
functional code without side effects

634
00:29:34,230 --> 00:29:35,910
that's easy to read maintainable and

635
00:29:35,910 --> 00:29:39,450
testable I really really like that so

636
00:29:39,450 --> 00:29:53,930
with that my implementation was bug free

637
00:29:53,940 --> 00:29:56,380
so what would so what we talked about

638
00:29:56,380 --> 00:29:58,540
was the intersection observer to figure

639
00:29:58,540 --> 00:30:00,130
out if something enters the viewport the

640
00:30:00,130 --> 00:30:01,690
mutation observer to figure out if

641
00:30:01,690 --> 00:30:03,850
something changed in the Dom the

642
00:30:03,850 --> 00:30:05,470
performance observer to not ask for

643
00:30:05,470 --> 00:30:07,660
matrix but rather get notified the

644
00:30:07,660 --> 00:30:09,040
resize observer to figure out if

645
00:30:09,040 --> 00:30:10,380
something changes in size and

646
00:30:10,380 --> 00:30:13,060
observables which are a completely

647
00:30:13,060 --> 00:30:15,820
different way of thinking and it takes a

648
00:30:15,820 --> 00:30:17,740
while to get it I'm still freaking

649
00:30:17,740 --> 00:30:21,770
freaking things out with observables and

650
00:30:21,780 --> 00:30:24,370
I'm in the web development industry for

651
00:30:24,370 --> 00:30:28,780
seven years now and oh well so much has

652
00:30:28,780 --> 00:30:31,510
changed and web dot web development is

653
00:30:31,510 --> 00:30:34,600
still fun it's probably we're a big love

654
00:30:34,600 --> 00:30:37,380
in my life today but yeah we all have to

655
00:30:37,380 --> 00:30:41,440
to admit and probably all know that so

656
00:30:41,440 --> 00:30:43,930
much will still change and even if it's

657
00:30:43,930 --> 00:30:47,460
exhausting I really really love that and

658
00:30:47,460 --> 00:30:49,870
yeah we're all here in this really

659
00:30:49,870 --> 00:30:51,790
beautiful when the venue and we have

660
00:30:51,790 --> 00:30:54,760
really good time so let's all celebrate

661
00:30:54,760 --> 00:30:57,170
I ready

662
00:30:57,170 --> 00:31:05,139
[Music]

663
00:31:05,149 --> 00:31:05,610
you

