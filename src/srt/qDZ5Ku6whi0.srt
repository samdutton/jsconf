1
00:00:15,320 --> 00:00:20,520

hi can you hear me yeah hi I'm Mary I'm

2
00:00:20,520 --> 00:00:22,349
going to talk about Isla which is a

3
00:00:22,349 --> 00:00:23,849
programming language I've been making

4
00:00:23,849 --> 00:00:27,840
for young children so I'm going to talk

5
00:00:27,840 --> 00:00:29,390
about designing a language for children

6
00:00:29,390 --> 00:00:32,070
I'm going to talk about the compiler

7
00:00:32,070 --> 00:00:35,370
that I wrote that runs the language I'm

8
00:00:35,370 --> 00:00:36,449
going to talk about teaching my

9
00:00:36,449 --> 00:00:40,199
girlfriend and my dad to program and I'm

10
00:00:40,199 --> 00:00:43,489
gonna speak about modes of expression

11
00:00:43,489 --> 00:00:46,140
but first I'll take you through your

12
00:00:46,140 --> 00:00:50,370
first program written in ila code so

13
00:00:50,370 --> 00:00:55,409
either as a drummer his years hopefully

14
00:00:55,409 --> 00:01:01,229
yep that's my niece she's called ila she

15
00:01:01,229 --> 00:01:06,500
likes the Yankees she's 2 years old and

16
00:01:06,500 --> 00:01:09,479
her favorite lunch is jelly tots which

17
00:01:09,479 --> 00:01:13,170
is a type of English sweetie here's some

18
00:01:13,170 --> 00:01:15,960
more people mary is a guitarist and Emma

19
00:01:15,960 --> 00:01:19,579
is a singer and Sophie is a pianist and

20
00:01:19,579 --> 00:01:24,149
he's a list of eyelas auntie's so we'll

21
00:01:24,149 --> 00:01:29,189
had Mary to that list Emma and Sophie so

22
00:01:29,189 --> 00:01:32,369
let's review islets a drummer she's 2

23
00:01:32,369 --> 00:01:32,999
years old

24
00:01:32,999 --> 00:01:35,130
she loves jelly tots and she's got three

25
00:01:35,130 --> 00:01:37,590
aunties a guitarist a singer and a

26
00:01:37,590 --> 00:01:42,210
pianist so designing a programming

27
00:01:42,210 --> 00:01:45,929
language for children well first of all

28
00:01:45,929 --> 00:01:49,950
can children program I feel like a age 5

29
00:01:49,950 --> 00:01:52,710
which is the lower bound of the age

30
00:01:52,710 --> 00:01:54,840
range I'm aiming at for this language

31
00:01:54,840 --> 00:01:58,109
then at age 5 then children can learning

32
00:01:58,109 --> 00:01:59,880
to read learning to write which mean to

33
00:01:59,880 --> 00:02:01,979
me means they can input code at the

34
00:02:01,979 --> 00:02:05,009
keyboard and read it off the screen and

35
00:02:05,009 --> 00:02:07,350
they can also reason as well they've got

36
00:02:07,350 --> 00:02:09,270
the Faculty of reasoning so I've had

37
00:02:09,270 --> 00:02:11,580
some humiliating defeats at the hands of

38
00:02:11,580 --> 00:02:14,160
my niece when debating whether she

39
00:02:14,160 --> 00:02:15,270
should be allowed to have another jelly

40
00:02:15,270 --> 00:02:19,110
tot or so and then should children

41
00:02:19,110 --> 00:02:23,940
program well computers are being used to

42
00:02:23,940 --> 00:02:26,130
make more and more stuff and that's only

43
00:02:26,130 --> 00:02:27,750
going to increase as time goes on and

44
00:02:27,750 --> 00:02:29,290
also I think program

45
00:02:29,290 --> 00:02:31,890
is the best way to control the computer

46
00:02:31,890 --> 00:02:36,519
and so and I think a person makes

47
00:02:36,519 --> 00:02:38,349
something to try and show what is inside

48
00:02:38,349 --> 00:02:40,420
their head and I think it's a really

49
00:02:40,420 --> 00:02:41,799
good thing for people to show each other

50
00:02:41,799 --> 00:02:45,400
the insides of their heads and so should

51
00:02:45,400 --> 00:02:47,079
children program well if computers are

52
00:02:47,079 --> 00:02:48,370
being used to make more and more stuff

53
00:02:48,370 --> 00:02:50,319
and programming is the best way to

54
00:02:50,319 --> 00:02:52,540
control a computer then to me

55
00:02:52,540 --> 00:02:54,099
programming is becoming like a core

56
00:02:54,099 --> 00:02:56,200
skill the way we view reading and

57
00:02:56,200 --> 00:02:58,090
writing and doing maths at the moment

58
00:02:58,090 --> 00:03:00,939
and so I think programming should be

59
00:03:00,939 --> 00:03:02,290
learned at the same time as all those

60
00:03:02,290 --> 00:03:04,030
skills are you from about age four or

61
00:03:04,030 --> 00:03:09,879
five what are the opinions that I use to

62
00:03:09,879 --> 00:03:12,419
guide the development of the language

63
00:03:12,419 --> 00:03:16,139
well number one programming is typing so

64
00:03:16,139 --> 00:03:18,280
programming is not clipping together

65
00:03:18,280 --> 00:03:19,900
little jigsaw pieces that have code

66
00:03:19,900 --> 00:03:23,169
written on them it's not manipulating

67
00:03:23,169 --> 00:03:25,419
blocks with a GUI it's not using any

68
00:03:25,419 --> 00:03:27,780
kind of GUI it's it's it's typing words

69
00:03:27,780 --> 00:03:31,150
into a computer and the reason this is

70
00:03:31,150 --> 00:03:34,479
important is number one language is the

71
00:03:34,479 --> 00:03:36,250
best way that humans have come up with

72
00:03:36,250 --> 00:03:39,639
for expressing ideas in a powerful and

73
00:03:39,639 --> 00:03:43,569
subtle way and number two there's this

74
00:03:43,569 --> 00:03:45,340
notion of indirection which is the

75
00:03:45,340 --> 00:03:47,019
reason that I think programming so fun

76
00:03:47,019 --> 00:03:49,209
so I type in something into the computer

77
00:03:49,209 --> 00:03:51,970
here and then something happens over

78
00:03:51,970 --> 00:03:54,280
here and in between there's magic and

79
00:03:54,280 --> 00:03:57,760
that magic is fun but I'll come back to

80
00:03:57,760 --> 00:04:00,970
that idea in a bit number two the second

81
00:04:00,970 --> 00:04:02,949
opinion I took was that you should have

82
00:04:02,949 --> 00:04:04,269
an application for a programming

83
00:04:04,269 --> 00:04:05,859
language it should be useful for

84
00:04:05,859 --> 00:04:09,579
something so I didn't want kids just or

85
00:04:09,579 --> 00:04:12,129
anyone just typing in random code to

86
00:04:12,129 --> 00:04:14,139
instantiate variables or print out the

87
00:04:14,139 --> 00:04:15,489
numbers between one and a hundred

88
00:04:15,489 --> 00:04:18,039
because that's really dull they should

89
00:04:18,039 --> 00:04:19,209
be able to make something with it

90
00:04:19,209 --> 00:04:20,199
because that's the whole point of

91
00:04:20,199 --> 00:04:22,300
programming to me is to express yourself

92
00:04:22,300 --> 00:04:24,639
to actually make something and so the

93
00:04:24,639 --> 00:04:26,440
application that I chose to start with

94
00:04:26,440 --> 00:04:30,130
was a old school text adventure writing

95
00:04:30,130 --> 00:04:32,560
environment so you can type Eila code

96
00:04:32,560 --> 00:04:35,770
and you define your own old school text

97
00:04:35,770 --> 00:04:37,779
adventure you know kind of like Zork or

98
00:04:37,779 --> 00:04:39,430
adventure or whatever and then you can

99
00:04:39,430 --> 00:04:42,060
play through it so it's interactive

100
00:04:42,060 --> 00:04:44,370
but at the same time different heads

101
00:04:44,370 --> 00:04:46,800
contain different things so I didn't

102
00:04:46,800 --> 00:04:49,770
want to tie the core language to the

103
00:04:49,770 --> 00:04:51,510
particular application that I chose the

104
00:04:51,510 --> 00:04:53,250
storytelling environment and so I've

105
00:04:53,250 --> 00:04:54,930
tried to make it general so that it

106
00:04:54,930 --> 00:04:57,320
could be conceivably used for anything

107
00:04:57,320 --> 00:05:01,730
and number four the fourth principle

108
00:05:01,730 --> 00:05:04,169
that I've used to guide the development

109
00:05:04,169 --> 00:05:06,870
is to use baby talk so what I mean by

110
00:05:06,870 --> 00:05:08,600
that is to try and make the language

111
00:05:08,600 --> 00:05:12,110
similar to how children actually speak

112
00:05:12,110 --> 00:05:14,820
so that that means there's a few

113
00:05:14,820 --> 00:05:16,800
ramifications of that so number one

114
00:05:16,800 --> 00:05:18,720
there's no punctuation except for the

115
00:05:18,720 --> 00:05:21,360
apostrophes that go around strings and

116
00:05:21,360 --> 00:05:24,620
that's because punctuation is hard to

117
00:05:24,620 --> 00:05:26,790
distinguish it's hard to distinguish

118
00:05:26,790 --> 00:05:28,380
pieces of punctuation from each other

119
00:05:28,380 --> 00:05:30,570
and it's also hard to type punctuation

120
00:05:30,570 --> 00:05:31,680
because you often need to use the shift

121
00:05:31,680 --> 00:05:39,210
key number two is that most programming

122
00:05:39,210 --> 00:05:41,729
languages use programming jargon like

123
00:05:41,729 --> 00:05:45,930
for or if a while or then and I mean

124
00:05:45,930 --> 00:05:48,120
what the hell do they mean so all of the

125
00:05:48,120 --> 00:05:50,400
keywords in either of words that a child

126
00:05:50,400 --> 00:05:52,620
would actually use in the context that

127
00:05:52,620 --> 00:05:57,660
they're used and the number three is the

128
00:05:57,660 --> 00:05:59,789
language is somewhat natural language

129
00:05:59,789 --> 00:06:02,940
ish and my aim there is to try and make

130
00:06:02,940 --> 00:06:04,380
it so that even if you don't know much

131
00:06:04,380 --> 00:06:06,539
code even if you don't know how to code

132
00:06:06,539 --> 00:06:08,789
you'll be able to read the language and

133
00:06:08,789 --> 00:06:10,289
basically read a piece of code and

134
00:06:10,289 --> 00:06:13,200
basically understand what's going on but

135
00:06:13,200 --> 00:06:14,550
at the same time I'm trying to avoid

136
00:06:14,550 --> 00:06:16,470
that trap that say Apple script falls

137
00:06:16,470 --> 00:06:19,260
into where it looks like English and it

138
00:06:19,260 --> 00:06:20,370
gives you the impression that you can

139
00:06:20,370 --> 00:06:22,169
just type any random thing that comes

140
00:06:22,169 --> 00:06:24,030
into your head that's in English you

141
00:06:24,030 --> 00:06:25,020
know the computer will magically

142
00:06:25,020 --> 00:06:26,700
understand because of course it won't

143
00:06:26,700 --> 00:06:29,220
and so there's only one way to do

144
00:06:29,220 --> 00:06:31,440
everything and it's very consistent and

145
00:06:31,440 --> 00:06:33,870
it's a much closer to a sort of pidgin

146
00:06:33,870 --> 00:06:35,639
English so I'm trying to avoid that

147
00:06:35,639 --> 00:06:36,870
impression that you can just type any

148
00:06:36,870 --> 00:06:40,900
random stuff that comes into your head

149
00:06:40,910 --> 00:06:44,130
so the ILA compiler this is the thing

150
00:06:44,130 --> 00:06:46,860
that the piece of code that goes from a

151
00:06:46,860 --> 00:06:48,990
piece of violet code like this so right

152
00:06:48,990 --> 00:06:52,650
Eila to actually printing out either at

153
00:06:52,650 --> 00:06:55,200
the console so how do we get from

154
00:06:55,200 --> 00:07:00,210
a piece of code - the result well the

155
00:07:00,210 --> 00:07:02,130
compiler that I wrote takes a two-stage

156
00:07:02,130 --> 00:07:05,460
process does a two-stage process number

157
00:07:05,460 --> 00:07:08,670
one parsing number two interpreting so

158
00:07:08,670 --> 00:07:11,160
let's start with parsing parsing is

159
00:07:11,160 --> 00:07:12,810
taking that piece of code which starts

160
00:07:12,810 --> 00:07:14,580
out as a completely unstructured string

161
00:07:14,580 --> 00:07:18,000
so just a list of characters and turning

162
00:07:18,000 --> 00:07:19,710
it into a much more detailed recipe

163
00:07:19,710 --> 00:07:22,410
called an abstract syntax tree which can

164
00:07:22,410 --> 00:07:26,400
be used to actually run the code so here

165
00:07:26,400 --> 00:07:28,410
is the abstract syntax tree for that

166
00:07:28,410 --> 00:07:29,850
piece of code that we just saw a moment

167
00:07:29,850 --> 00:07:30,720
ago right

168
00:07:30,720 --> 00:07:32,370
Eila so this is going to print out

169
00:07:32,370 --> 00:07:34,590
islets of the console nothing else so

170
00:07:34,590 --> 00:07:36,690
let's go through it so at the top level

171
00:07:36,690 --> 00:07:38,490
the whole thing is a tree then you have

172
00:07:38,490 --> 00:07:40,080
an expression so the whole piece of code

173
00:07:40,080 --> 00:07:42,000
is an expression and then you can

174
00:07:42,000 --> 00:07:44,490
subcategorize that expression as an

175
00:07:44,490 --> 00:07:46,710
invocation which means you're running a

176
00:07:46,710 --> 00:07:49,530
function and then that invocation splits

177
00:07:49,530 --> 00:07:52,020
down into two components the identifier

178
00:07:52,020 --> 00:07:53,250
which is the name of the function you

179
00:07:53,250 --> 00:07:57,150
want to work to run right WRI T and then

180
00:07:57,150 --> 00:08:00,060
the parameter or the value which is the

181
00:08:00,060 --> 00:08:01,500
parameter being passed to the function

182
00:08:01,500 --> 00:08:03,870
which is either in quotation marks and

183
00:08:03,870 --> 00:08:06,570
then the value can be sub categorized as

184
00:08:06,570 --> 00:08:08,940
a literal as opposed to a variable and

185
00:08:08,940 --> 00:08:11,370
then the literal can be sub categorized

186
00:08:11,370 --> 00:08:15,090
as a string as opposed to a number so

187
00:08:15,090 --> 00:08:17,970
this is the end result of parsing so how

188
00:08:17,970 --> 00:08:21,150
do we get there we I used something

189
00:08:21,150 --> 00:08:23,070
called a parsing expression grammar or

190
00:08:23,070 --> 00:08:27,000
also known as a peg for short and a

191
00:08:27,000 --> 00:08:29,670
party expression grammar it's a list of

192
00:08:29,670 --> 00:08:32,430
rules which basically says on one side

193
00:08:32,430 --> 00:08:35,550
I've got this thing and I can decompose

194
00:08:35,550 --> 00:08:38,340
it as this list of things here so let's

195
00:08:38,340 --> 00:08:40,920
take an example here's one of the

196
00:08:40,920 --> 00:08:42,630
parsing expression grammar rules known

197
00:08:42,630 --> 00:08:45,150
as a production rule and it says that an

198
00:08:45,150 --> 00:08:48,300
invocation can be decomposed into an

199
00:08:48,300 --> 00:08:51,000
identifier followed which is the name of

200
00:08:51,000 --> 00:08:52,790
the function you're going to run right

201
00:08:52,790 --> 00:08:55,140
followed by space followed by a value

202
00:08:55,140 --> 00:08:56,730
which is the name of the which is the

203
00:08:56,730 --> 00:08:58,440
parameter you're passing to the function

204
00:08:58,440 --> 00:09:01,860
followed by a new line character so

205
00:09:01,860 --> 00:09:02,820
let's look at the parsing expression

206
00:09:02,820 --> 00:09:07,370
grammar for to pause this piece of code

207
00:09:07,370 --> 00:09:09,209
so on the Left we've got

208
00:09:09,209 --> 00:09:11,220
the grammar and on the right we've got

209
00:09:11,220 --> 00:09:13,230
the abstract syntax tree that comes out

210
00:09:13,230 --> 00:09:16,860
which is the end of the passing stage so

211
00:09:16,860 --> 00:09:18,600
we have to start with an expression

212
00:09:18,600 --> 00:09:19,499
that's what the parsing expression

213
00:09:19,499 --> 00:09:21,839
grammar says okay let's pop that into

214
00:09:21,839 --> 00:09:24,689
the abstract syntax tree then the next

215
00:09:24,689 --> 00:09:26,910
rule says that an expression must be an

216
00:09:26,910 --> 00:09:29,999
invocation okay easy let's pop that into

217
00:09:29,999 --> 00:09:33,629
to the abstract syntax tree then the

218
00:09:33,629 --> 00:09:35,759
parsing expression grammars says that an

219
00:09:35,759 --> 00:09:37,949
invocation must be composed of an

220
00:09:37,949 --> 00:09:39,929
identifier followed by space followed by

221
00:09:39,929 --> 00:09:41,160
value followed by a new line character

222
00:09:41,160 --> 00:09:44,160
as we saw a moment ago so let's take

223
00:09:44,160 --> 00:09:46,920
those pieces one at a time an identifier

224
00:09:46,920 --> 00:09:49,139
the parsing expression grammar says must

225
00:09:49,139 --> 00:09:51,600
be a list of lowercase letters more than

226
00:09:51,600 --> 00:09:55,019
one lowercase letter so that is write

227
00:09:55,019 --> 00:09:56,759
the name of the function we're trying to

228
00:09:56,759 --> 00:10:00,959
run and then the value the second part

229
00:10:00,959 --> 00:10:04,319
of the invocation the parsing expression

230
00:10:04,319 --> 00:10:06,589
grammar says that that must be a literal

231
00:10:06,589 --> 00:10:09,720
okay let's pop that in and then the

232
00:10:09,720 --> 00:10:11,160
pausing expression grammar says that the

233
00:10:11,160 --> 00:10:14,610
literal must be a string and then it

234
00:10:14,610 --> 00:10:16,679
says that a string is an apostrophe

235
00:10:16,679 --> 00:10:18,809
followed by zero or more lowercase

236
00:10:18,809 --> 00:10:21,990
letters followed by another ' and so we

237
00:10:21,990 --> 00:10:23,249
can pop that into the abstract syntax

238
00:10:23,249 --> 00:10:25,559
tree so we've passed that piece of code

239
00:10:25,559 --> 00:10:27,449
we've done the first stage of the

240
00:10:27,449 --> 00:10:31,319
compilation process so how does the

241
00:10:31,319 --> 00:10:33,420
pause function actually work well we've

242
00:10:33,420 --> 00:10:34,529
done the hard work now

243
00:10:34,529 --> 00:10:36,269
because if you're using a pausing

244
00:10:36,269 --> 00:10:37,949
expression grammar you're probably using

245
00:10:37,949 --> 00:10:39,809
a pausing expression grammar library I

246
00:10:39,809 --> 00:10:42,119
used one it's called page s it's really

247
00:10:42,119 --> 00:10:44,819
nice I highly recommend it and all you

248
00:10:44,819 --> 00:10:46,949
do is you give your list of production

249
00:10:46,949 --> 00:10:48,899
rules your parsing expression grammar to

250
00:10:48,899 --> 00:10:51,269
the library and then it gives you back a

251
00:10:51,269 --> 00:10:53,670
parser and then you shovel code into

252
00:10:53,670 --> 00:10:55,230
your parser and it gives you back the

253
00:10:55,230 --> 00:10:56,850
abstract syntax tree so the pass

254
00:10:56,850 --> 00:11:00,779
function is trivial next stage final

255
00:11:00,779 --> 00:11:03,209
stage is interpreting so this is taking

256
00:11:03,209 --> 00:11:05,189
the recipe that we've produced the

257
00:11:05,189 --> 00:11:07,049
abstract syntax tree and essentially

258
00:11:07,049 --> 00:11:08,910
following the instructions which means

259
00:11:08,910 --> 00:11:11,910
running JavaScript code in my case that

260
00:11:11,910 --> 00:11:15,779
is commensurate with the instructions in

261
00:11:15,779 --> 00:11:19,290
the in the recipe so here's the abstract

262
00:11:19,290 --> 00:11:22,670
syntax tree is JSON

263
00:11:22,680 --> 00:11:24,899
let's look at it in a bit of detail line

264
00:11:24,899 --> 00:11:27,300
two is the first node the expression

265
00:11:27,300 --> 00:11:29,249
which is remember the overarching node

266
00:11:29,249 --> 00:11:34,499
of the whole tree the tag attribute says

267
00:11:34,499 --> 00:11:36,480
that it's of type expression as opposed

268
00:11:36,480 --> 00:11:38,730
to an invocation or an identifier or

269
00:11:38,730 --> 00:11:41,129
value or whatever and then the content

270
00:11:41,129 --> 00:11:43,589
is every sub node under it in the tree

271
00:11:43,589 --> 00:11:46,379
so the expression node has a whole of

272
00:11:46,379 --> 00:11:50,339
the rest of the tree underneath it now a

273
00:11:50,339 --> 00:11:52,199
quick aside the way the interpret

274
00:11:52,199 --> 00:11:54,959
function works is that essentially what

275
00:11:54,959 --> 00:11:56,040
you want to do is you want to run

276
00:11:56,040 --> 00:11:58,379
different code depending on what type of

277
00:11:58,379 --> 00:12:00,269
node you're dealing with so you want to

278
00:12:00,269 --> 00:12:01,529
do something different if you're running

279
00:12:01,529 --> 00:12:03,209
an X if you're dealing with an

280
00:12:03,209 --> 00:12:04,829
expression node in the abstract syntax

281
00:12:04,829 --> 00:12:06,869
tree so if you're dealing with a string

282
00:12:06,869 --> 00:12:09,089
node in the abstract syntax tree now you

283
00:12:09,089 --> 00:12:13,499
could do this by eye defining a bunch of

284
00:12:13,499 --> 00:12:16,499
classes and then defining a specific

285
00:12:16,499 --> 00:12:18,300
version of the interpret function on

286
00:12:18,300 --> 00:12:20,610
each class and that would totally work

287
00:12:20,610 --> 00:12:22,410
so you'd have a class for an expression

288
00:12:22,410 --> 00:12:24,869
node and a class for an identify node

289
00:12:24,869 --> 00:12:26,790
and so forth that would totally work but

290
00:12:26,790 --> 00:12:28,019
it's a bunch of boilerplate and it's a

291
00:12:28,019 --> 00:12:30,870
waste of time another technique you can

292
00:12:30,870 --> 00:12:32,160
use is multi methods which is a

293
00:12:32,160 --> 00:12:33,420
functional programming technique where

294
00:12:33,420 --> 00:12:34,980
you just define the functions that you

295
00:12:34,980 --> 00:12:37,339
care about so let's look at an example

296
00:12:37,339 --> 00:12:40,800
again we're in JavaScript here I used a

297
00:12:40,800 --> 00:12:42,839
library called multi message s it's

298
00:12:42,839 --> 00:12:46,350
really nice so it starts out on line one

299
00:12:46,350 --> 00:12:48,449
with instantiating the interpret

300
00:12:48,449 --> 00:12:51,170
function which is just a multi method

301
00:12:51,170 --> 00:12:54,540
now the way the multi master decides

302
00:12:54,540 --> 00:12:56,879
which version of itself to run it

303
00:12:56,879 --> 00:12:58,949
decides based upon what the arguments

304
00:12:58,949 --> 00:13:01,589
are that are passed into the function so

305
00:13:01,589 --> 00:13:03,720
let's look at an example so this is the

306
00:13:03,720 --> 00:13:05,879
piece of code that decides which version

307
00:13:05,879 --> 00:13:07,649
of the multi method to run so remember

308
00:13:07,649 --> 00:13:09,720
we've got a version for an expression

309
00:13:09,720 --> 00:13:11,399
node and a version for an identifier

310
00:13:11,399 --> 00:13:13,170
node and so forth we need to figure out

311
00:13:13,170 --> 00:13:15,120
which type of node we're dealing with so

312
00:13:15,120 --> 00:13:16,259
we just look at the node that gets

313
00:13:16,259 --> 00:13:18,329
passed in on line 3 look at the tag

314
00:13:18,329 --> 00:13:19,889
which will be a string like expression

315
00:13:19,889 --> 00:13:23,279
or identifier and return it so that's

316
00:13:23,279 --> 00:13:26,069
the dispatch function so then this is us

317
00:13:26,069 --> 00:13:28,470
defining the actual interpret functions

318
00:13:28,470 --> 00:13:30,899
that we're going to run so on line 6 in

319
00:13:30,899 --> 00:13:32,189
the case of an expression we do

320
00:13:32,189 --> 00:13:34,799
something on line 10 in the case of

321
00:13:34,799 --> 00:13:35,950
inuvik

322
00:13:35,950 --> 00:13:38,550
Kayson node we do something else so

323
00:13:38,550 --> 00:13:40,630
let's look at the real interpret

324
00:13:40,630 --> 00:13:44,050
function same idea we've got a dispatch

325
00:13:44,050 --> 00:13:46,000
function which tells us which version of

326
00:13:46,000 --> 00:13:47,980
the function we want to run and here's

327
00:13:47,980 --> 00:13:50,830
our first customer line six the actual

328
00:13:50,830 --> 00:13:52,510
function that we run for an expression

329
00:13:52,510 --> 00:13:56,560
node so it's pretty simple line seven we

330
00:13:56,560 --> 00:13:58,510
look at the node grab the content which

331
00:13:58,510 --> 00:14:00,130
and remember in the case of expression

332
00:14:00,130 --> 00:14:01,120
node is going to be the whole of the

333
00:14:01,120 --> 00:14:02,980
rest of the tree and then just call

334
00:14:02,980 --> 00:14:05,500
interpret again so we recurse which will

335
00:14:05,500 --> 00:14:07,780
result in running dysfunction the

336
00:14:07,780 --> 00:14:10,750
invocation function so this is the

337
00:14:10,750 --> 00:14:13,450
invocation version of the interpret

338
00:14:13,450 --> 00:14:14,920
function and this is where the real

339
00:14:14,920 --> 00:14:17,080
stuff happens so in line two we need to

340
00:14:17,080 --> 00:14:18,430
figure out what the name of the function

341
00:14:18,430 --> 00:14:20,410
is we want to run so we need to figure

342
00:14:20,410 --> 00:14:24,520
out right WRI te how do we do that well

343
00:14:24,520 --> 00:14:26,200
it's pretty trivial we just look at the

344
00:14:26,200 --> 00:14:28,810
node online to look at the content and

345
00:14:28,810 --> 00:14:30,580
then grab the first element of the

346
00:14:30,580 --> 00:14:31,960
content which is going to be the right

347
00:14:31,960 --> 00:14:35,290
identifier and then call interpret on it

348
00:14:35,290 --> 00:14:37,000
which calls this version of the

349
00:14:37,000 --> 00:14:38,680
interpret function for an identifier

350
00:14:38,680 --> 00:14:41,080
which just returns the content of the

351
00:14:41,080 --> 00:14:42,190
node which is just going to be the

352
00:14:42,190 --> 00:14:45,280
string right so bingo line two we've got

353
00:14:45,280 --> 00:14:49,780
our function name next line three we

354
00:14:49,780 --> 00:14:51,190
need to get the actual function we want

355
00:14:51,190 --> 00:14:54,100
to run so I've defined the write

356
00:14:54,100 --> 00:14:55,540
function which just writes out the

357
00:14:55,540 --> 00:14:57,280
string you pass it to the console in

358
00:14:57,280 --> 00:14:59,020
JavaScript so we need to go and grab

359
00:14:59,020 --> 00:15:01,450
that javascript function how does that

360
00:15:01,450 --> 00:15:01,990
happen

361
00:15:01,990 --> 00:15:05,230
what's what's going on here we can see

362
00:15:05,230 --> 00:15:07,480
something about an environment now the

363
00:15:07,480 --> 00:15:10,360
environment is the general context that

364
00:15:10,360 --> 00:15:12,550
you're running all of your ila code in

365
00:15:12,550 --> 00:15:15,310
and it includes the actual context which

366
00:15:15,310 --> 00:15:17,410
is waste or all of the variables and

367
00:15:17,410 --> 00:15:19,920
functions that are in scope currently

368
00:15:19,920 --> 00:15:22,180
now that's where the right function

369
00:15:22,180 --> 00:15:26,920
belongs the WR ite function and because

370
00:15:26,920 --> 00:15:29,050
that's a built-in it's a function that's

371
00:15:29,050 --> 00:15:31,690
built right into Euler it's available in

372
00:15:31,690 --> 00:15:34,180
at all times so we need to go and grab

373
00:15:34,180 --> 00:15:36,010
the right function from the execution

374
00:15:36,010 --> 00:15:38,560
context so that we just get the

375
00:15:38,560 --> 00:15:40,270
environment which gets passed into every

376
00:15:40,270 --> 00:15:42,640
invocation of the interpret function get

377
00:15:42,640 --> 00:15:44,560
the context off the environment look up

378
00:15:44,560 --> 00:15:46,420
the function name and bingo we've got

379
00:15:46,420 --> 00:15:47,920
the actual JavaScript function we need

380
00:15:47,920 --> 00:15:49,730
to run

381
00:15:49,730 --> 00:15:51,649
on the home stretch now we just need to

382
00:15:51,649 --> 00:15:53,660
grab the parameter which was going to

383
00:15:53,660 --> 00:15:54,980
pass to the right function which is just

384
00:15:54,980 --> 00:15:57,649
remember it's ila in apostrophes that's

385
00:15:57,649 --> 00:15:59,299
the thing we're going to print out so

386
00:15:59,299 --> 00:16:00,949
it's the second element of the content

387
00:16:00,949 --> 00:16:03,079
of the invocation node so we call

388
00:16:03,079 --> 00:16:05,540
interpret again that calls the value

389
00:16:05,540 --> 00:16:08,149
version of interpret which same same

390
00:16:08,149 --> 00:16:09,949
pattern look at the content call

391
00:16:09,949 --> 00:16:12,379
interpret that calls the literal version

392
00:16:12,379 --> 00:16:14,629
of interpret same again look at the

393
00:16:14,629 --> 00:16:16,999
content call interpret finally here at

394
00:16:16,999 --> 00:16:18,769
last we've got the actual thing we're

395
00:16:18,769 --> 00:16:20,720
looking for where this is the string

396
00:16:20,720 --> 00:16:22,879
version of the interpret function and we

397
00:16:22,879 --> 00:16:24,949
look at the content of the node which

398
00:16:24,949 --> 00:16:27,799
will just be a low in apostrophes and

399
00:16:27,799 --> 00:16:30,199
pass that back so now on line four we've

400
00:16:30,199 --> 00:16:31,639
got the parameter work we're trying to

401
00:16:31,639 --> 00:16:35,149
print out then long last line five we

402
00:16:35,149 --> 00:16:36,529
could actually run the function so you

403
00:16:36,529 --> 00:16:38,389
can see that we just invoke FN and

404
00:16:38,389 --> 00:16:40,279
passing the parameter and that will

405
00:16:40,279 --> 00:16:43,549
print out Euler to the console then it

406
00:16:43,549 --> 00:16:45,379
returns a return value which in the case

407
00:16:45,379 --> 00:16:49,549
of the write function is undefined and

408
00:16:49,549 --> 00:16:52,489
then finally a bit of tidying up because

409
00:16:52,489 --> 00:16:57,679
every every expression can modify the

410
00:16:57,679 --> 00:16:59,389
environment we need to return the new

411
00:16:59,389 --> 00:17:01,220
environment that resulted from this from

412
00:17:01,220 --> 00:17:03,589
this node being run now in our case

413
00:17:03,589 --> 00:17:05,149
there's no changes actually so the

414
00:17:05,149 --> 00:17:07,100
context just stays as environment

415
00:17:07,100 --> 00:17:09,110
context which is what got passed in and

416
00:17:09,110 --> 00:17:11,750
then we specify a return value because

417
00:17:11,750 --> 00:17:13,970
expressions in ila can return values but

418
00:17:13,970 --> 00:17:15,110
obviously in this case it's going to be

419
00:17:15,110 --> 00:17:17,199
undefined

420
00:17:17,199 --> 00:17:20,389
so that's basically in at the end of the

421
00:17:20,389 --> 00:17:23,480
code teaching my girlfriend and my dad

422
00:17:23,480 --> 00:17:29,299
to program this was really fun i as I

423
00:17:29,299 --> 00:17:31,309
said the eventual goal for ila is for it

424
00:17:31,309 --> 00:17:32,779
to be usable by five-year-olds but

425
00:17:32,779 --> 00:17:34,909
that's a long way in the future at the

426
00:17:34,909 --> 00:17:38,149
moment as a stepping-stone I'm using non

427
00:17:38,149 --> 00:17:40,700
programmers who are non-technical people

428
00:17:40,700 --> 00:17:44,960
and which includes Elian my dad to try

429
00:17:44,960 --> 00:17:48,710
the language out on so I sat each of

430
00:17:48,710 --> 00:17:51,350
them down separately at an islet repple

431
00:17:51,350 --> 00:17:53,149
where you can just type in pieces of

432
00:17:53,149 --> 00:17:56,210
viola code and we worked through it so

433
00:17:56,210 --> 00:18:00,110
this is Ellie she typed right my name is

434
00:18:00,110 --> 00:18:01,760
Ellie in apostrophes which of course

435
00:18:01,760 --> 00:18:03,620
prints out my name is Ellie

436
00:18:03,620 --> 00:18:05,090
that was all good totally worked

437
00:18:05,090 --> 00:18:07,700
understood what was going on first

438
00:18:07,700 --> 00:18:11,300
problem was when I suggested that she

439
00:18:11,300 --> 00:18:14,270
write out a number instead and when she

440
00:18:14,270 --> 00:18:14,900
wrote this

441
00:18:14,900 --> 00:18:17,180
she wrote write 26 but she put

442
00:18:17,180 --> 00:18:19,640
apostrophes around 26 and I said that's

443
00:18:19,640 --> 00:18:21,530
cool that totally works

444
00:18:21,530 --> 00:18:23,960
but you don't need the apostrophes and

445
00:18:23,960 --> 00:18:26,690
she said well why and I sort of thought

446
00:18:26,690 --> 00:18:27,980
about it and thought well that's a good

447
00:18:27,980 --> 00:18:29,120
question

448
00:18:29,120 --> 00:18:33,170
and I thought about talking about the

449
00:18:33,170 --> 00:18:34,910
historical reasons for why you don't all

450
00:18:34,910 --> 00:18:36,590
the computational reasons why you don't

451
00:18:36,590 --> 00:18:39,380
need apostrophes around numbers in many

452
00:18:39,380 --> 00:18:41,090
programming languages but that was far

453
00:18:41,090 --> 00:18:43,309
too much detail and so I asked her a bit

454
00:18:43,309 --> 00:18:44,960
more about what she was thinking and it

455
00:18:44,960 --> 00:18:46,670
it turned out that this apostrophe

456
00:18:46,670 --> 00:18:48,410
notion was something that she clung on

457
00:18:48,410 --> 00:18:49,820
to to understand what was going on in

458
00:18:49,820 --> 00:18:52,000
the code so to her and my dad

459
00:18:52,000 --> 00:18:54,920
apostrophes meant inert or inactive or

460
00:18:54,920 --> 00:18:57,380
literal whereas no apostrophes meant

461
00:18:57,380 --> 00:18:59,540
active something like a variable or a

462
00:18:59,540 --> 00:19:01,190
function name and so the fact that there

463
00:19:01,190 --> 00:19:03,050
were no apostrophes around the number 26

464
00:19:03,050 --> 00:19:04,880
was really confusing because it seemed

465
00:19:04,880 --> 00:19:05,960
like it was going to be active when

466
00:19:05,960 --> 00:19:07,460
actually it was a literal so I've

467
00:19:07,460 --> 00:19:08,840
changed that in the language and now you

468
00:19:08,840 --> 00:19:10,280
have to put apostrophes around every

469
00:19:10,280 --> 00:19:13,910
literal this is my dad now he's

470
00:19:13,910 --> 00:19:15,920
instantiating the name variable and

471
00:19:15,920 --> 00:19:18,559
assigning it to Richard and then he's

472
00:19:18,559 --> 00:19:21,800
typing write name and of course that

473
00:19:21,800 --> 00:19:25,190
prints out Richard when this happened it

474
00:19:25,190 --> 00:19:26,960
was kind of profound that she was a sort

475
00:19:26,960 --> 00:19:28,610
of beautiful moment because he said oh

476
00:19:28,610 --> 00:19:30,350
this is fun and you know I mean he'd

477
00:19:30,350 --> 00:19:32,179
never done any programming before he's

478
00:19:32,179 --> 00:19:38,120
67 and it seemed like he understood why

479
00:19:38,120 --> 00:19:40,070
it was fun and that I think brings in

480
00:19:40,070 --> 00:19:42,080
this idea of indirection again where

481
00:19:42,080 --> 00:19:44,480
again as I say you you do something here

482
00:19:44,480 --> 00:19:46,820
and something happens over here and

483
00:19:46,820 --> 00:19:48,620
there's magic in between and that's why

484
00:19:48,620 --> 00:19:50,660
it's fun and so it's kind of like

485
00:19:50,660 --> 00:19:52,850
setting up a long line of dominoes all

486
00:19:52,850 --> 00:19:54,890
sat all stood on their ends where you

487
00:19:54,890 --> 00:19:56,870
flick one and you watch the whole of the

488
00:19:56,870 --> 00:19:59,150
rest of them go and I think that's why

489
00:19:59,150 --> 00:20:02,480
programming is fun now finally for this

490
00:20:02,480 --> 00:20:06,230
section metaphors when I was working

491
00:20:06,230 --> 00:20:08,150
through the code working through

492
00:20:08,150 --> 00:20:10,840
teaching Euler to Ellie and my dad then

493
00:20:10,840 --> 00:20:14,600
I found myself using metaphors or

494
00:20:14,600 --> 00:20:17,510
analogies a lot so to explain fair

495
00:20:17,510 --> 00:20:20,780
variables then I used metaphors and I

496
00:20:20,780 --> 00:20:22,940
found that they both responded to

497
00:20:22,940 --> 00:20:25,250
different types of metaphors so Ellie

498
00:20:25,250 --> 00:20:27,770
liked this notion of aliases where the

499
00:20:27,770 --> 00:20:29,570
alias is like the variable name and then

500
00:20:29,570 --> 00:20:33,770
the actual person is the piece of data

501
00:20:33,770 --> 00:20:36,050
whereas my dad preferred this notion of

502
00:20:36,050 --> 00:20:38,780
bags where you've got a bag and it's got

503
00:20:38,780 --> 00:20:40,640
the variable name written on it and then

504
00:20:40,640 --> 00:20:42,170
you put the data in the bag and that's

505
00:20:42,170 --> 00:20:44,750
like a variable now the problem here is

506
00:20:44,750 --> 00:20:46,610
that these are awful analogies that's

507
00:20:46,610 --> 00:20:49,430
not the way variables work at all but I

508
00:20:49,430 --> 00:20:50,450
couldn't come up with didn't think

509
00:20:50,450 --> 00:20:52,280
better and then things got a little

510
00:20:52,280 --> 00:20:54,620
worse when I try to explain references

511
00:20:54,620 --> 00:20:57,260
to my dad so in I li can let's say you

512
00:20:57,260 --> 00:20:59,780
instantiate two objects Mary as a person

513
00:20:59,780 --> 00:21:02,330
and Isla as a person and then you say

514
00:21:02,330 --> 00:21:06,440
Mary friend I'll a friend is Mary so

515
00:21:06,440 --> 00:21:09,970
friend the attribute of Isla is a

516
00:21:09,970 --> 00:21:12,950
reference so I explain this to my dad

517
00:21:12,950 --> 00:21:15,980
with this notion of maps where map says

518
00:21:15,980 --> 00:21:20,960
in treasure maps not hash maps and so I

519
00:21:20,960 --> 00:21:22,820
said reference is kind of like a map

520
00:21:22,820 --> 00:21:24,740
where you follow it to its location and

521
00:21:24,740 --> 00:21:26,660
it might produce another another

522
00:21:26,660 --> 00:21:28,310
reference another map and then you

523
00:21:28,310 --> 00:21:29,840
follow that one to where it goes and

524
00:21:29,840 --> 00:21:31,310
maybe you get the actual piece of data

525
00:21:31,310 --> 00:21:33,500
and that's all good you know that works

526
00:21:33,500 --> 00:21:34,880
he understood what I was talking about

527
00:21:34,880 --> 00:21:36,740
but it took like five minutes and a

528
00:21:36,740 --> 00:21:38,330
proper backwards and forwards

529
00:21:38,330 --> 00:21:41,420
conversation and a diagram and so I'm

530
00:21:41,420 --> 00:21:43,520
really unclear on how I'm going to teach

531
00:21:43,520 --> 00:21:45,590
this stuff when I'm not there to talk it

532
00:21:45,590 --> 00:21:47,420
through with the person being taught so

533
00:21:47,420 --> 00:21:48,920
that's totally an open question at the

534
00:21:48,920 --> 00:21:50,420
moment there's a lot of open questions

535
00:21:50,420 --> 00:21:53,120
with eyelet really which leads me to

536
00:21:53,120 --> 00:21:59,790
modes of expression final final topic

537
00:21:59,800 --> 00:22:03,110
your mode of expression is the medium in

538
00:22:03,110 --> 00:22:05,630
which you choose to make the thing

539
00:22:05,630 --> 00:22:08,000
you're making so a mode of expression is

540
00:22:08,000 --> 00:22:11,690
as a film or as a novel or as a piece of

541
00:22:11,690 --> 00:22:14,960
prose or as a poem and you have to

542
00:22:14,960 --> 00:22:16,760
choose your mode of expression extremely

543
00:22:16,760 --> 00:22:18,800
carefully because your mode of

544
00:22:18,800 --> 00:22:21,610
expression dictates your abstractions

545
00:22:21,610 --> 00:22:24,260
now your abstractions are the building

546
00:22:24,260 --> 00:22:26,240
blocks that you use to express your idea

547
00:22:26,240 --> 00:22:28,670
so they're the sort of base materials

548
00:22:28,670 --> 00:22:30,890
that you can combine in some interesting

549
00:22:30,890 --> 00:22:31,399
way

550
00:22:31,399 --> 00:22:32,509
to produce the thing you're trying to

551
00:22:32,509 --> 00:22:36,259
make you know be a novel or Microsoft

552
00:22:36,259 --> 00:22:40,249
Word or whatever and so his programmers

553
00:22:40,249 --> 00:22:41,389
are abstractions of things like

554
00:22:41,389 --> 00:22:44,659
variables or functions or continuations

555
00:22:44,659 --> 00:22:49,249
or closures or libraries of code but the

556
00:22:49,249 --> 00:22:51,249
most powerful abstraction that we have

557
00:22:51,249 --> 00:22:54,019
is the programming language we choose to

558
00:22:54,019 --> 00:22:57,830
use and it's a programming language is

559
00:22:57,830 --> 00:22:59,419
kind of a matter of stretching really

560
00:22:59,419 --> 00:23:01,190
and the reason for this is syntax

561
00:23:01,190 --> 00:23:03,019
programming languages are really the

562
00:23:03,019 --> 00:23:05,179
only way that you can control the syntax

563
00:23:05,179 --> 00:23:06,469
that you use it's the only way you can

564
00:23:06,469 --> 00:23:08,749
decide what type of syntax you want to

565
00:23:08,749 --> 00:23:11,239
use and the reason syntax is important

566
00:23:11,239 --> 00:23:13,399
is because it allows you to arrange your

567
00:23:13,399 --> 00:23:15,889
other abstractions so you've got your

568
00:23:15,889 --> 00:23:17,029
abstractions and they're all well

569
00:23:17,029 --> 00:23:19,820
anchored but you use syntax to order

570
00:23:19,820 --> 00:23:21,559
them and thus produce what you're making

571
00:23:21,559 --> 00:23:25,759
so to explain what I mean I'm gonna talk

572
00:23:25,759 --> 00:23:28,940
about freeze frames in film so the

573
00:23:28,940 --> 00:23:30,369
freeze frame is being been being used

574
00:23:30,369 --> 00:23:33,580
for pretty much since the feature films

575
00:23:33,580 --> 00:23:38,149
were started being made and so by freeze

576
00:23:38,149 --> 00:23:40,009
frame I mean the film the you know

577
00:23:40,009 --> 00:23:42,649
you're watching a some film and the

578
00:23:42,649 --> 00:23:44,749
film's moving and then it stops and

579
00:23:44,749 --> 00:23:46,369
you've got a still image in front of you

580
00:23:46,369 --> 00:23:48,229
for a number of seconds so if you go

581
00:23:48,229 --> 00:23:51,200
back to 1947 when Frank Capra made It's

582
00:23:51,200 --> 00:23:53,749
a Wonderful Life then near the beginning

583
00:23:53,749 --> 00:23:55,759
of the film there's a freeze frame of

584
00:23:55,759 --> 00:23:57,529
George Bailey the protagonist who's

585
00:23:57,529 --> 00:23:59,749
played by Jimmy Stewart and he's talking

586
00:23:59,749 --> 00:24:01,369
about the breadth of his ambitions and

587
00:24:01,369 --> 00:24:04,039
he does this gesture like this but when

588
00:24:04,039 --> 00:24:06,649
he's speaking then he side onto the

589
00:24:06,649 --> 00:24:09,950
camera as iron to you and in this

590
00:24:09,950 --> 00:24:12,679
gesture there's a tiny microcosm of the

591
00:24:12,679 --> 00:24:15,589
whole film so what this idea expresses

592
00:24:15,589 --> 00:24:17,839
is that George Bailey has these grand

593
00:24:17,839 --> 00:24:19,940
Empress ambitions to build bridges and

594
00:24:19,940 --> 00:24:23,450
to see the world but he in the end

595
00:24:23,450 --> 00:24:26,089
forsakes them all in in exchange for a

596
00:24:26,089 --> 00:24:27,950
life of great death so he stays in

597
00:24:27,950 --> 00:24:29,899
Bedford Falls he marries the woman he's

598
00:24:29,899 --> 00:24:32,089
in love with he raises some children and

599
00:24:32,089 --> 00:24:34,700
he builds an altruistic business so his

600
00:24:34,700 --> 00:24:37,159
life is not wide at all not not not wide

601
00:24:37,159 --> 00:24:39,859
at all it's actually very deep and so

602
00:24:39,859 --> 00:24:42,440
Frank Capra expressed a single idea with

603
00:24:42,440 --> 00:24:44,690
this freeze-frame um it's

604
00:24:44,690 --> 00:24:47,059
quite beautiful and subtle idea I think

605
00:24:47,059 --> 00:24:50,840
but nonetheless it's a single idea if

606
00:24:50,840 --> 00:24:53,269
you come forward to 1992 when Martin

607
00:24:53,269 --> 00:24:56,149
Scorsese made Goodfellas then you find

608
00:24:56,149 --> 00:24:58,190
freeze frames being used in a far more

609
00:24:58,190 --> 00:24:59,869
subtle fashion

610
00:24:59,869 --> 00:25:01,429
so there's freeze frames throughout

611
00:25:01,429 --> 00:25:04,909
Goodfellas and what Scorsese uses freeze

612
00:25:04,909 --> 00:25:06,349
French for is that's a piece of syntax

613
00:25:06,349 --> 00:25:08,960
as opposed to a piece of vocabulary and

614
00:25:08,960 --> 00:25:10,999
this is the key difference and the fact

615
00:25:10,999 --> 00:25:12,679
that uses the freeze frame of syntax

616
00:25:12,679 --> 00:25:15,649
makes it a far more powerful tool at his

617
00:25:15,649 --> 00:25:18,409
disposal so to give you an example as a

618
00:25:18,409 --> 00:25:21,139
freeze frame and he uses that as a piece

619
00:25:21,139 --> 00:25:23,179
of syntax to arrange his vocabulary his

620
00:25:23,179 --> 00:25:24,859
building blocks which are character

621
00:25:24,859 --> 00:25:29,059
points of view so for example the film

622
00:25:29,059 --> 00:25:30,739
freezes and you've got the narrator

623
00:25:30,739 --> 00:25:32,299
speaking which is one point of view

624
00:25:32,299 --> 00:25:33,529
you've got what the characters are

625
00:25:33,529 --> 00:25:35,570
saying before the freeze frame and after

626
00:25:35,570 --> 00:25:36,619
the freeze frame which is two more

627
00:25:36,619 --> 00:25:38,299
points of view and then finally you've

628
00:25:38,299 --> 00:25:40,249
got the actual what's going on in the

629
00:25:40,249 --> 00:25:42,349
freeze frame and see he's using the

630
00:25:42,349 --> 00:25:44,899
freeze frame to arrange these pieces of

631
00:25:44,899 --> 00:25:48,009
vocabulary into a far more complex

632
00:25:48,009 --> 00:25:50,659
construction and so Scorsese took the

633
00:25:50,659 --> 00:25:52,070
freeze frame much further and this is

634
00:25:52,070 --> 00:25:54,379
why syntax is important because more

635
00:25:54,379 --> 00:25:55,970
powerful abstractions give you more

636
00:25:55,970 --> 00:25:57,529
control over what you built and

637
00:25:57,529 --> 00:25:59,659
abstractions suited to your work give

638
00:25:59,659 --> 00:26:01,220
you even more control over what you

639
00:26:01,220 --> 00:26:03,139
build and so to me there's just an

640
00:26:03,139 --> 00:26:05,239
inevitable conclusion here which is that

641
00:26:05,239 --> 00:26:06,590
you should invent your own programming

642
00:26:06,590 --> 00:26:18,159
language

643
00:26:18,169 --> 00:26:21,409
or to put it another way this is this is

644
00:26:21,409 --> 00:26:24,499
the pharmacy I'm gonna say the value of

645
00:26:24,499 --> 00:26:26,599
Greek prose composition he said was not

646
00:26:26,599 --> 00:26:28,609
that it gave one any particular facility

647
00:26:28,609 --> 00:26:30,529
in the language that could not be gained

648
00:26:30,529 --> 00:26:32,659
as easily by the methods but they've

649
00:26:32,659 --> 00:26:34,999
done properly off the top of one's head

650
00:26:34,999 --> 00:26:38,029
it taught one to think in Greek when

651
00:26:38,029 --> 00:26:40,039
stock patterns become different he said

652
00:26:40,039 --> 00:26:42,229
when forced into the confines of a rigid

653
00:26:42,229 --> 00:26:44,959
and unfamiliar tongue certain common

654
00:26:44,959 --> 00:26:46,999
ideas become inexpressible other

655
00:26:46,999 --> 00:26:49,549
previously undreamt of ones spring to

656
00:26:49,549 --> 00:26:52,070
life finding miraculous new articulation

657
00:26:52,070 --> 00:27:09,810
I will now take questions

658
00:27:09,820 --> 00:27:12,919
awesome yes okay alright bring you the

659
00:27:12,919 --> 00:27:16,970
mic Tiffany was this the first language

660
00:27:16,970 --> 00:27:19,400
that you wrote and was your your

661
00:27:19,400 --> 00:27:21,770
motivation to to write a language

662
00:27:21,770 --> 00:27:23,240
specifically for your niece and have it

663
00:27:23,240 --> 00:27:25,429
ready when she's 5 or was it really

664
00:27:25,429 --> 00:27:27,380
about this idea and then you were like

665
00:27:27,380 --> 00:27:30,650
what language I thought for my

666
00:27:30,650 --> 00:27:32,120
development as a programmer it would be

667
00:27:32,120 --> 00:27:33,500
good to write a language I think

668
00:27:33,500 --> 00:27:34,940
everyone should write a language just

669
00:27:34,940 --> 00:27:37,850
for the learning experience I thought it

670
00:27:37,850 --> 00:27:39,169
was my first programming language and

671
00:27:39,169 --> 00:27:39,919
I'm stupid

672
00:27:39,919 --> 00:27:41,510
then maybe I should start easy with a

673
00:27:41,510 --> 00:27:43,130
programming language for children big

674
00:27:43,130 --> 00:27:43,760
mistake

675
00:27:43,760 --> 00:27:51,590
it's I think it's far harder so yes one

676
00:27:51,590 --> 00:27:53,809
question was sorry can you wave you are

677
00:27:53,809 --> 00:27:56,899
yeah what is the next step I mean what

678
00:27:56,899 --> 00:27:59,029
is the purpose for the language right

679
00:27:59,029 --> 00:28:01,730
now you want to move into some schools

680
00:28:01,730 --> 00:28:09,049
and also or what's the idea

681
00:28:09,049 --> 00:28:11,419
the idea is to did the whole language is

682
00:28:11,419 --> 00:28:13,070
completely in flux at the moment so I've

683
00:28:13,070 --> 00:28:14,779
got some syntax and you can do useful

684
00:28:14,779 --> 00:28:16,940
stuff with it but everything is up for

685
00:28:16,940 --> 00:28:19,399
debate at the moment so I'm quite wary

686
00:28:19,399 --> 00:28:22,010
of showing it to too many people yeah I

687
00:28:22,010 --> 00:28:23,480
mean it's available on today I love

688
00:28:23,480 --> 00:28:26,000
language dogs but I don't want to show

689
00:28:26,000 --> 00:28:27,140
it's too many people because it's so

690
00:28:27,140 --> 00:28:30,110
unfinished but so my next step is to try

691
00:28:30,110 --> 00:28:31,700
it on as many people preferably

692
00:28:31,700 --> 00:28:33,649
non-programmers and young children as

693
00:28:33,649 --> 00:28:37,010
possible to try and tune it okay we have

694
00:28:37,010 --> 00:28:40,279
another question way back here hi there

695
00:28:40,279 --> 00:28:42,230
I really like your ideas especially

696
00:28:42,230 --> 00:28:43,940
about kind of visual trickery and

697
00:28:43,940 --> 00:28:45,679
programming environments what do you

698
00:28:45,679 --> 00:28:49,909
think of scratch is that which ones that

699
00:28:49,909 --> 00:28:52,270
is that there I mean the scratch

700
00:28:52,270 --> 00:28:55,940
programming environment for kids sure i

701
00:28:55,940 --> 00:28:58,690
I've looked at a number of languages

702
00:28:58,690 --> 00:29:01,820
that are for children and I sort of I

703
00:29:01,820 --> 00:29:03,799
think I said it in my in the talk that I

704
00:29:03,799 --> 00:29:05,870
feel like many of them are taking the

705
00:29:05,870 --> 00:29:07,490
wrong approach with starting with a GUI

706
00:29:07,490 --> 00:29:09,350
because I think that's not programming

707
00:29:09,350 --> 00:29:10,580
and I don't think you get the magic

708
00:29:10,580 --> 00:29:12,679
feeling of programming manipulating a

709
00:29:12,679 --> 00:29:14,330
GUI and also I don't think you can

710
00:29:14,330 --> 00:29:16,370
produce nearly as subtle constructions

711
00:29:16,370 --> 00:29:18,470
so I'm trying to steer away from from

712
00:29:18,470 --> 00:29:23,020
all of those approaches essentially

713
00:29:23,030 --> 00:29:28,340
any other questions a couple here okay

714
00:29:28,340 --> 00:29:31,290
sorry all the time is we said yeah we're

715
00:29:31,290 --> 00:29:35,430
doing okay for time so this is in

716
00:29:35,430 --> 00:29:37,530
English I mean might be one of the most

717
00:29:37,530 --> 00:29:39,270
common languages but do you think it

718
00:29:39,270 --> 00:29:41,130
should be in in the native language of

719
00:29:41,130 --> 00:29:42,930
the children I mean it's more difficult

720
00:29:42,930 --> 00:29:45,570
for a German child to understand the

721
00:29:45,570 --> 00:29:47,460
English language definitely

722
00:29:47,460 --> 00:29:52,260
so the my idea is for this is that the

723
00:29:52,260 --> 00:29:54,720
keywords can be translated into other

724
00:29:54,720 --> 00:29:57,720
spoken languages trivially obviously but

725
00:29:57,720 --> 00:29:59,640
the word ordering of different language

726
00:29:59,640 --> 00:30:01,680
is different but nonetheless up because

727
00:30:01,680 --> 00:30:03,030
there's only one way to do everything

728
00:30:03,030 --> 00:30:05,280
that I feel like the syntax won't be a

729
00:30:05,280 --> 00:30:07,080
problem there and so you could just

730
00:30:07,080 --> 00:30:09,450
change the word ordering of each type of

731
00:30:09,450 --> 00:30:11,340
statement you can make and change the

732
00:30:11,340 --> 00:30:13,830
keywords and you'd have either in German

733
00:30:13,830 --> 00:30:18,990
or any other language you choose what

734
00:30:18,990 --> 00:30:20,880
are you what are you dead years to bring

735
00:30:20,880 --> 00:30:23,810
the more complex constructs of the

736
00:30:23,810 --> 00:30:25,830
JavaScript or whatever programming

737
00:30:25,830 --> 00:30:28,530
language to a children for example think

738
00:30:28,530 --> 00:30:31,950
about recursions or loops or whatever I

739
00:30:31,950 --> 00:30:34,560
mean is an imperative language the right

740
00:30:34,560 --> 00:30:37,410
way to teach that to children or do we

741
00:30:37,410 --> 00:30:39,410
have to think more about a functional

742
00:30:39,410 --> 00:30:43,800
what are you my idea is that at the

743
00:30:43,800 --> 00:30:45,510
moment isla is purely a data definition

744
00:30:45,510 --> 00:30:47,100
language so there's no control

745
00:30:47,100 --> 00:30:49,730
statements there's no conditionals and

746
00:30:49,730 --> 00:30:52,380
I'm trying to start with that core and

747
00:30:52,380 --> 00:30:54,960
then build up adding things as I figure

748
00:30:54,960 --> 00:30:57,120
out how to do them in what I hope is an

749
00:30:57,120 --> 00:30:59,460
intuitive way so my ideas are a complete

750
00:30:59,460 --> 00:31:01,320
muddle on the things that you suggested

751
00:31:01,320 --> 00:31:05,070
at the moment um so you talked about how

752
00:31:05,070 --> 00:31:07,350
eventually you want to teach it too or

753
00:31:07,350 --> 00:31:08,520
you want to be teaching programming to

754
00:31:08,520 --> 00:31:11,040
five-year-olds it seems like one of the

755
00:31:11,040 --> 00:31:13,770
the biggest hurdles at that age and

756
00:31:13,770 --> 00:31:15,480
teaching them with this rather than with

757
00:31:15,480 --> 00:31:18,450
a GUI is just gonna be like reading like

758
00:31:18,450 --> 00:31:20,370
at 5:00 a lot of kids can't read that

759
00:31:20,370 --> 00:31:23,280
well and can't write that well what are

760
00:31:23,280 --> 00:31:24,110
your thoughts on that

761
00:31:24,110 --> 00:31:29,490
definitely so I feel like if children

762
00:31:29,490 --> 00:31:31,800
are learning to read at that age then

763
00:31:31,800 --> 00:31:33,780
they could learn to program in tandem

764
00:31:33,780 --> 00:31:35,830
with it and so I hope that there

765
00:31:35,830 --> 00:31:38,049
ability would build to increase with

766
00:31:38,049 --> 00:31:40,179
their reading and writing ability I

767
00:31:40,179 --> 00:31:42,039
haven't actually tried it with any

768
00:31:42,039 --> 00:31:43,419
five-year-olds yet because it's not

769
00:31:43,419 --> 00:31:46,570
nearly good enough for that yet so don't

770
00:31:46,570 --> 00:31:51,429
know yet so you mentioned that you would

771
00:31:51,429 --> 00:31:53,470
like to like write language that is

772
00:31:53,470 --> 00:31:55,330
similar to natural language but not

773
00:31:55,330 --> 00:31:58,090
quite because it might be dangerous to

774
00:31:58,090 --> 00:31:59,289
actually make it feel like natural

775
00:31:59,289 --> 00:32:01,269
language so where do you actually find

776
00:32:01,269 --> 00:32:04,240
the balance where what's the kind of

777
00:32:04,240 --> 00:32:06,159
dividing point where decides that's kind

778
00:32:06,159 --> 00:32:09,820
of the way it should be the the rule

779
00:32:09,820 --> 00:32:11,500
I've taken is that there's only one way

780
00:32:11,500 --> 00:32:13,269
to do everything so there's only one way

781
00:32:13,269 --> 00:32:16,090
to construct every piece of syntax which

782
00:32:16,090 --> 00:32:17,769
I think hopefully is enough to give the

783
00:32:17,769 --> 00:32:20,649
impression that you can't type whatever

784
00:32:20,649 --> 00:32:23,169
you want but still totally under that I

785
00:32:23,169 --> 00:32:24,820
don't know whether I've made the correct

786
00:32:24,820 --> 00:32:26,980
assumption there yet but that's my sort

787
00:32:26,980 --> 00:32:29,860
of dividing line that I hope will keep

788
00:32:29,860 --> 00:32:31,840
it from going into AppleScript territory

789
00:32:31,840 --> 00:32:38,019
where which is just a mess there's only

790
00:32:38,019 --> 00:32:40,149
one way to write correct

791
00:32:40,149 --> 00:32:43,029
isn't that curbing the imagination of

792
00:32:43,029 --> 00:32:46,419
children or um sorry could you repeat

793
00:32:46,419 --> 00:32:49,059
the question yeah so I thought you said

794
00:32:49,059 --> 00:32:51,039
there's only one way to write a correct

795
00:32:51,039 --> 00:32:52,570
syntax for your programming language

796
00:32:52,570 --> 00:32:54,639
isn't that curbing the imagination of

797
00:32:54,639 --> 00:33:08,360
children I don't know

798
00:33:08,370 --> 00:33:11,620
and quite obvious obvious question why

799
00:33:11,620 --> 00:33:14,679
do you choose JavaScript I was actually

800
00:33:14,679 --> 00:33:16,330
a bit of a confession

801
00:33:16,330 --> 00:33:17,919
the original compiler is written in

802
00:33:17,919 --> 00:33:22,779
closure i ported it to JavaScript so

803
00:33:22,779 --> 00:33:26,019
that I could submit it for a talk to

804
00:33:26,019 --> 00:33:29,039
Jess

