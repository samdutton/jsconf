1
00:00:00,670 --> 00:00:14,590

ah can you speak any Japanese what do

2
00:00:14,590 --> 00:00:18,250
you owe me to say j/s calm frocks dance

3
00:00:18,250 --> 00:00:22,199
going possibly death okay say it slower

4
00:00:22,199 --> 00:00:25,930
yeah it's the comfort can we all say

5
00:00:25,930 --> 00:00:30,340
that is closest wow it's ablative so

6
00:00:30,340 --> 00:00:34,449
coitus without further ado Jed cool I

7
00:00:34,449 --> 00:00:40,329
guess all right I don't you like the

8
00:00:40,329 --> 00:00:43,179
weatherman thing here ah ironically

9
00:00:43,179 --> 00:00:45,129
because of the volcano but I'm here to

10
00:00:45,129 --> 00:00:47,469
answer for you guys one question and

11
00:00:47,469 --> 00:00:49,510
that is who are you and what did you to

12
00:00:49,510 --> 00:00:52,839
Felix Felix I don't do to you guys has

13
00:00:52,839 --> 00:00:54,129
anyone here met Felix it like that

14
00:00:54,129 --> 00:00:56,379
you're up Jace coffin alright so Felix

15
00:00:56,379 --> 00:00:59,889
is basically he is very active on node

16
00:00:59,889 --> 00:01:02,049
he's one of the first committers he is

17
00:01:02,049 --> 00:01:03,579
super super helpful a really nice

18
00:01:03,579 --> 00:01:05,680
friendly guy and he was actually going

19
00:01:05,680 --> 00:01:08,320
to present this thing called node dirty

20
00:01:08,320 --> 00:01:10,750
which is I love it it's a very cool key

21
00:01:10,750 --> 00:01:12,850
value store that's basically it says

22
00:01:12,850 --> 00:01:13,990
listen we're not going to handle the

23
00:01:13,990 --> 00:01:15,189
network thing it's going to be on your

24
00:01:15,189 --> 00:01:17,229
machine and it's just JavaScript all the

25
00:01:17,229 --> 00:01:18,969
way down so you can use basically like

26
00:01:18,969 --> 00:01:20,920
on couch you'd use actually think I've

27
00:01:20,920 --> 00:01:24,909
slide for this it's basically so it's no

28
00:01:24,909 --> 00:01:27,579
sequel and so basically you have

29
00:01:27,579 --> 00:01:29,140
functions and you just iterate over a

30
00:01:29,140 --> 00:01:31,420
huge set and it returns Keys and because

31
00:01:31,420 --> 00:01:32,649
it doesn't go over the network it's

32
00:01:32,649 --> 00:01:35,020
really really fast anyway so he was

33
00:01:35,020 --> 00:01:36,490
going to come present this but he

34
00:01:36,490 --> 00:01:42,460
totally got volcano but i did find i

35
00:01:42,460 --> 00:01:43,869
tried to find a quote of someone who had

36
00:01:43,869 --> 00:01:45,729
actually known about dirty i haven't

37
00:01:45,729 --> 00:01:48,130
used it as much this is this is the most

38
00:01:48,130 --> 00:01:53,280
authoritative opinion i could find but

39
00:01:53,280 --> 00:01:55,329
there is one bug if you guys are

40
00:01:55,329 --> 00:01:56,380
considering using it in your note

41
00:01:56,380 --> 00:01:58,299
install and that is it's not volcano

42
00:01:58,299 --> 00:02:01,329
proof so i recommend you guys proceed

43
00:02:01,329 --> 00:02:04,299
with caution and in the spirit for Felix

44
00:02:04,299 --> 00:02:06,310
because he couldn't be here I would like

45
00:02:06,310 --> 00:02:08,890
to if possible record a video of you

46
00:02:08,890 --> 00:02:12,190
guys just saying hi so this is he's a

47
00:02:12,190 --> 00:02:14,349
huge leap of faith but could I was going

48
00:02:14,349 --> 00:02:14,530
to

49
00:02:14,530 --> 00:02:16,690
record on this you guys all iphones

50
00:02:16,690 --> 00:02:18,819
don't don't gank my phone or turn off

51
00:02:18,819 --> 00:02:20,230
can you just give them a short message

52
00:02:20,230 --> 00:02:22,240
all right let me put it on on camera

53
00:02:22,240 --> 00:02:25,270
mode here and just to just pass that

54
00:02:25,270 --> 00:02:29,650
around and give them a wave all right

55
00:02:29,650 --> 00:02:34,150
good all right cool so while they're

56
00:02:34,150 --> 00:02:36,489
doing that what I do for a living is

57
00:02:36,489 --> 00:02:38,560
actually not code as a living i'm a

58
00:02:38,560 --> 00:02:40,360
freelance translator i translate

59
00:02:40,360 --> 00:02:42,720
japanese computer manuals into english

60
00:02:42,720 --> 00:02:48,190
and so basically all my code is just as

61
00:02:48,190 --> 00:02:49,750
a kind of a free time thing hopefully

62
00:02:49,750 --> 00:02:51,280
that transition I would actually love to

63
00:02:51,280 --> 00:02:53,860
do that in a full-time capacity but in

64
00:02:53,860 --> 00:02:56,230
languages i speak two languages but a

65
00:02:56,230 --> 00:02:58,840
code i'm really a mana glad I all I do

66
00:02:58,840 --> 00:03:00,459
is JavaScript and I I don't want to get

67
00:03:00,459 --> 00:03:02,110
blend back on you but I really love

68
00:03:02,110 --> 00:03:05,170
javascript and i really love lots of the

69
00:03:05,170 --> 00:03:06,760
parts about it some things i've built

70
00:03:06,760 --> 00:03:09,010
before so basically before node and you

71
00:03:09,010 --> 00:03:10,390
want to build an app that's like a pure

72
00:03:10,390 --> 00:03:13,810
app that's only javascript basically you

73
00:03:13,810 --> 00:03:16,959
end up doing bookmarklets so i did a

74
00:03:16,959 --> 00:03:19,480
whole ton of bookmarklets the first

75
00:03:19,480 --> 00:03:21,340
one i did was text Banda I think these

76
00:03:21,340 --> 00:03:22,480
are still up so you can check them if

77
00:03:22,480 --> 00:03:24,489
you want text banda is like if you guys

78
00:03:24,489 --> 00:03:26,799
text expander you seen this thing it's

79
00:03:26,799 --> 00:03:28,120
the same thing but it's for the web it's

80
00:03:28,120 --> 00:03:29,470
a bookmarklet so you go to any webpage

81
00:03:29,470 --> 00:03:31,090
you get this little bookmarklet you go

82
00:03:31,090 --> 00:03:33,010
to any web page and you can save your

83
00:03:33,010 --> 00:03:34,720
own like shortcuts so if you go to a web

84
00:03:34,720 --> 00:03:36,010
page and you click this button and you

85
00:03:36,010 --> 00:03:37,690
start typing it'll automatically expand

86
00:03:37,690 --> 00:03:39,940
the things that you define into whatever

87
00:03:39,940 --> 00:03:40,959
phrases so you can check that out

88
00:03:40,959 --> 00:03:42,900
another thing i build is called typed in

89
00:03:42,900 --> 00:03:45,519
this is basically a japanese input

90
00:03:45,519 --> 00:03:47,620
method editor that's purely web-based so

91
00:03:47,620 --> 00:03:49,090
even if you're like an internet cafe and

92
00:03:49,090 --> 00:03:50,500
you want to type in japanese for some

93
00:03:50,500 --> 00:03:52,329
reason to your clients who you know

94
00:03:52,329 --> 00:03:53,920
you're late giving translations for for

95
00:03:53,920 --> 00:03:55,840
example you can just go to any web page

96
00:03:55,840 --> 00:03:57,040
click this bookmarklet and all the

97
00:03:57,040 --> 00:03:58,359
sudden you can type in japanese even if

98
00:03:58,359 --> 00:03:59,859
the OS doesn't allow it doesn't have an

99
00:03:59,859 --> 00:04:01,690
input method eter another thing I built

100
00:04:01,690 --> 00:04:03,010
the last thing I built was called paste

101
00:04:03,010 --> 00:04:04,090
bud some of you guys may actually you

102
00:04:04,090 --> 00:04:06,640
have used this this is a copy and paste

103
00:04:06,640 --> 00:04:07,930
for the iPhone before the iphone had

104
00:04:07,930 --> 00:04:09,700
copy and paste and basically it was a

105
00:04:09,700 --> 00:04:13,600
monster javascript hack using basically

106
00:04:13,600 --> 00:04:16,060
you know some tenuous very small server

107
00:04:16,060 --> 00:04:19,180
code and a bookmarklet to pull text and

108
00:04:19,180 --> 00:04:22,810
actually give you this pseudo totally

109
00:04:22,810 --> 00:04:24,430
faked out selectable web page where you

110
00:04:24,430 --> 00:04:26,190
could copy text and then send to people

111
00:04:26,190 --> 00:04:28,330
but the problem is all these

112
00:04:28,330 --> 00:04:30,430
projects required are we done all right

113
00:04:30,430 --> 00:04:32,560
cool thank you all of these projects

114
00:04:32,560 --> 00:04:34,659
required a little bit of server-side

115
00:04:34,659 --> 00:04:36,879
code and I you know I just I'm not I'm

116
00:04:36,879 --> 00:04:38,919
not a ruby guy and I really just want to

117
00:04:38,919 --> 00:04:40,240
use JavaScript all the way down and so

118
00:04:40,240 --> 00:04:42,219
when note came out I was like ecstatic

119
00:04:42,219 --> 00:04:43,780
and I wanted for all these things to

120
00:04:43,780 --> 00:04:45,280
build some sort of back-end and so

121
00:04:45,280 --> 00:04:47,949
that's where fab comes in so let me tell

122
00:04:47,949 --> 00:04:51,909
you about fab so first of all fab is a

123
00:04:51,909 --> 00:04:53,229
web framework I'm sure you guys are

124
00:04:53,229 --> 00:04:56,379
familiar with how those work so just to

125
00:04:56,379 --> 00:04:57,669
give you a sense of what it does I'm

126
00:04:57,669 --> 00:04:58,780
going to compare it to other things you

127
00:04:58,780 --> 00:05:00,639
might know so for example it's small

128
00:05:00,639 --> 00:05:03,219
it's more web di than Django it's just

129
00:05:03,219 --> 00:05:05,500
tiny it's it's one function and the

130
00:05:05,500 --> 00:05:07,300
small library of functions it doesn't

131
00:05:07,300 --> 00:05:09,849
try to manage a huge thing it basically

132
00:05:09,849 --> 00:05:11,440
starts small and lets you build on top

133
00:05:11,440 --> 00:05:16,030
of it next is it's more rack and Sinatra

134
00:05:16,030 --> 00:05:16,930
it's not just really good at building

135
00:05:16,930 --> 00:05:18,849
endpoints but not good at connecting

136
00:05:18,849 --> 00:05:21,310
them together Sinatra relies on rack to

137
00:05:21,310 --> 00:05:22,840
connect all of these small apps together

138
00:05:22,840 --> 00:05:24,099
and more people are moving to that kind

139
00:05:24,099 --> 00:05:25,990
of modular style where you build a you

140
00:05:25,990 --> 00:05:28,029
build an app and ryanne Sinatra and use

141
00:05:28,029 --> 00:05:29,979
rack to connect them so fab is a lot

142
00:05:29,979 --> 00:05:31,569
like rack in that you build these tiny

143
00:05:31,569 --> 00:05:34,650
apps and all it does is connect them

144
00:05:34,650 --> 00:05:37,599
it's agnostic so it's more Merv than

145
00:05:37,599 --> 00:05:39,759
rails to everything is totally optional

146
00:05:39,759 --> 00:05:41,919
I don't you know I mean you can swap

147
00:05:41,919 --> 00:05:43,389
whatever you out whatever you want out

148
00:05:43,389 --> 00:05:45,129
these the things that are provided with

149
00:05:45,129 --> 00:05:47,710
fab are only defaults not necessarily at

150
00:05:47,710 --> 00:05:48,819
all and they're all very loosely

151
00:05:48,819 --> 00:05:51,190
connected finally it's extinct it's more

152
00:05:51,190 --> 00:05:54,099
jQuery than ue it's basically you know

153
00:05:54,099 --> 00:05:56,469
instead of having lots of methods it

154
00:05:56,469 --> 00:05:58,000
basically you give it anything and it

155
00:05:58,000 --> 00:05:58,990
based on what you give it it

156
00:05:58,990 --> 00:06:00,580
disambiguate so what you need to do with

157
00:06:00,580 --> 00:06:04,389
it so I was very inspired by a genre sex

158
00:06:04,389 --> 00:06:06,610
not only is training style but you know

159
00:06:06,610 --> 00:06:09,240
this kind of let's keep it keep a terse

160
00:06:09,240 --> 00:06:12,159
and it's built on the good part so if

161
00:06:12,159 --> 00:06:13,509
you guys love functional programming

162
00:06:13,509 --> 00:06:15,279
like I do you are gonna like fab because

163
00:06:15,279 --> 00:06:16,960
everything is functions you write

164
00:06:16,960 --> 00:06:19,060
functions that return functions and all

165
00:06:19,060 --> 00:06:20,830
fab is is just one function there's no

166
00:06:20,830 --> 00:06:24,400
prototypes there's no methods all state

167
00:06:24,400 --> 00:06:25,930
is decentralized so usually you have an

168
00:06:25,930 --> 00:06:27,550
app and you're like a drought a drought

169
00:06:27,550 --> 00:06:29,529
do this it doesn't do any of that fab

170
00:06:29,529 --> 00:06:31,389
knows nothing about your appt the apps

171
00:06:31,389 --> 00:06:33,159
are responsible for storing the state of

172
00:06:33,159 --> 00:06:36,789
the HTTP in the app using closures also

173
00:06:36,789 --> 00:06:38,770
callbacks fab is completely you can't do

174
00:06:38,770 --> 00:06:41,060
a synchronous app with babbitt's only

175
00:06:41,060 --> 00:06:43,490
asynchronous and that's a compromise but

176
00:06:43,490 --> 00:06:44,960
what it means is that because it's

177
00:06:44,960 --> 00:06:46,580
asynchronous all the way down it becomes

178
00:06:46,580 --> 00:06:47,840
much easier to build things you don't

179
00:06:47,840 --> 00:06:50,060
have special cases if it's synchronous

180
00:06:50,060 --> 00:06:53,600
or not and it's it uses currying lot so

181
00:06:53,600 --> 00:06:55,639
basically arity as a type system by

182
00:06:55,639 --> 00:06:59,300
which i mean every app has an era t that

183
00:06:59,300 --> 00:07:01,460
era t is how many apps it talks to so

184
00:07:01,460 --> 00:07:03,200
every app takes arguments those

185
00:07:03,200 --> 00:07:05,000
arguments are just other apps so

186
00:07:05,000 --> 00:07:07,460
everything is a nap in the system I can

187
00:07:07,460 --> 00:07:09,530
show you a little more about that so fab

188
00:07:09,530 --> 00:07:11,389
as a function it's a tiny little

189
00:07:11,389 --> 00:07:13,700
function and all it does is glue stuff

190
00:07:13,700 --> 00:07:17,180
together it's you know this small

191
00:07:17,180 --> 00:07:18,290
function that's actually probably going

192
00:07:18,290 --> 00:07:19,370
to change it might actually get smaller

193
00:07:19,370 --> 00:07:20,660
because there's some stuff I can take

194
00:07:20,660 --> 00:07:22,669
out of it it's chainable so if you guys

195
00:07:22,669 --> 00:07:24,440
like jQuery chaining as much as I do

196
00:07:24,440 --> 00:07:26,780
this chains but instead of using methods

197
00:07:26,780 --> 00:07:28,810
it returns a function so what I mean is

198
00:07:28,810 --> 00:07:30,800
usually if you guys use jQuery used to

199
00:07:30,800 --> 00:07:32,000
chaining what happens is you select

200
00:07:32,000 --> 00:07:33,380
something do a method it returns the

201
00:07:33,380 --> 00:07:34,700
jQuery object you select something it

202
00:07:34,700 --> 00:07:36,169
doesn't write this is a function that

203
00:07:36,169 --> 00:07:38,510
returns itself so the function chains to

204
00:07:38,510 --> 00:07:39,860
itself and so there's no methods and so

205
00:07:39,860 --> 00:07:41,990
what ends up being is just a whole mess

206
00:07:41,990 --> 00:07:43,639
of parenthesis but you'll see how that

207
00:07:43,639 --> 00:07:46,010
works and it's dumb so it has no it has

208
00:07:46,010 --> 00:07:48,050
no logic it has no logic about apps all

209
00:07:48,050 --> 00:07:49,100
it does is just connect your apps

210
00:07:49,100 --> 00:07:53,030
together and by app this is the this is

211
00:07:53,030 --> 00:07:54,530
the hello world app right it's very

212
00:07:54,530 --> 00:07:55,640
small I'm actually going to go into the

213
00:07:55,640 --> 00:07:57,860
depth a little bit later but that's

214
00:07:57,860 --> 00:08:00,530
basically the smallest you can get with

215
00:08:00,530 --> 00:08:03,800
fab and so what a nap a nap is just a

216
00:08:03,800 --> 00:08:05,270
function the Curry's so it can either be

217
00:08:05,270 --> 00:08:06,950
a response or it can return a function

218
00:08:06,950 --> 00:08:09,320
that returns response or it can return a

219
00:08:09,320 --> 00:08:10,430
function that return a function that

220
00:08:10,430 --> 00:08:12,350
returns a response and we'll talk about

221
00:08:12,350 --> 00:08:14,330
how that works it manages its own state

222
00:08:14,330 --> 00:08:16,280
that doesn't there's no like unlike

223
00:08:16,280 --> 00:08:17,810
jQuery like jQuery would keep events

224
00:08:17,810 --> 00:08:19,190
somewhere and you can access that you

225
00:08:19,190 --> 00:08:21,830
cannot introspect a fab application

226
00:08:21,830 --> 00:08:25,250
because basically all apps are just very

227
00:08:25,250 --> 00:08:27,350
tiny apps that do one thing and they

228
00:08:27,350 --> 00:08:29,479
have they're totally isolated so they

229
00:08:29,479 --> 00:08:30,770
can only see their neighbor apps they

230
00:08:30,770 --> 00:08:32,209
can't refer to any sort of central state

231
00:08:32,209 --> 00:08:33,650
the only central state that app would

232
00:08:33,650 --> 00:08:36,110
have access to is the fab function which

233
00:08:36,110 --> 00:08:38,120
is basically acts as a namespace for all

234
00:08:38,120 --> 00:08:40,310
of these other apps so the fab source

235
00:08:40,310 --> 00:08:41,570
looks like this this is basically the

236
00:08:41,570 --> 00:08:43,250
source code looks like it's a function

237
00:08:43,250 --> 00:08:45,380
at the top and then there's all of these

238
00:08:45,380 --> 00:08:47,150
default apps that you can use if you

239
00:08:47,150 --> 00:08:48,740
want to and you don't have to and at the

240
00:08:48,740 --> 00:08:50,030
end there's defaults like if you see a

241
00:08:50,030 --> 00:08:53,150
regex you know use this app this default

242
00:08:53,150 --> 00:08:53,990
path app

243
00:08:53,990 --> 00:08:55,370
provided by fab if you see a number

244
00:08:55,370 --> 00:08:57,980
return a status that's and you can

245
00:08:57,980 --> 00:08:59,930
totally override those two and so

246
00:08:59,930 --> 00:09:01,610
basically what that means is and this is

247
00:09:01,610 --> 00:09:03,110
probably the most salient slide for

248
00:09:03,110 --> 00:09:04,910
someone who has never seen fab your apps

249
00:09:04,910 --> 00:09:07,550
look like this which is kind of drawing

250
00:09:07,550 --> 00:09:09,380
at the beginning what I wanted to do is

251
00:09:09,380 --> 00:09:12,140
have your coat and this is valid this is

252
00:09:12,140 --> 00:09:13,310
valid JavaScript code this literally

253
00:09:13,310 --> 00:09:15,200
execute just as is there's no definition

254
00:09:15,200 --> 00:09:17,330
language but I wanted fab to look like

255
00:09:17,330 --> 00:09:20,270
markup so you're basically when you code

256
00:09:20,270 --> 00:09:22,339
your site your site looks like a sitemap

257
00:09:22,339 --> 00:09:25,459
and so you know everything here is you

258
00:09:25,459 --> 00:09:27,260
can see these prints so we at the top

259
00:09:27,260 --> 00:09:30,200
where fab equals require fab so we set

260
00:09:30,200 --> 00:09:32,209
you know the fab variable to be this

261
00:09:32,209 --> 00:09:35,000
require and then all of these that's a

262
00:09:35,000 --> 00:09:37,040
regex that does a path and the next

263
00:09:37,040 --> 00:09:38,660
thing is a node guess that's just a

264
00:09:38,660 --> 00:09:39,860
middleware that adapts it for nodejs

265
00:09:39,860 --> 00:09:41,570
then you have a line at path it has your

266
00:09:41,570 --> 00:09:43,520
app and then you can say filter on the

267
00:09:43,520 --> 00:09:45,260
method post so we only reply to posts

268
00:09:45,260 --> 00:09:47,180
you can use templates this is built in

269
00:09:47,180 --> 00:09:49,060
this is just wrestling's template engine

270
00:09:49,060 --> 00:09:51,410
you know you can actually fetch files

271
00:09:51,410 --> 00:09:53,180
from the file system there's also you

272
00:09:53,180 --> 00:09:55,850
can proxy HTTP requests you know that's

273
00:09:55,850 --> 00:09:57,260
based on node use you can tell by the

274
00:09:57,260 --> 00:09:59,420
namespace and then it basically goes

275
00:09:59,420 --> 00:10:00,920
through and if nothing matches it we

276
00:10:00,920 --> 00:10:02,300
return this and if nothing matches that

277
00:10:02,300 --> 00:10:04,220
original path of just a slash it returns

278
00:10:04,220 --> 00:10:06,440
a 404 anyway so that's just a very quick

279
00:10:06,440 --> 00:10:08,839
what a fab app looks like but basically

280
00:10:08,839 --> 00:10:12,320
this is how it works you start off with

281
00:10:12,320 --> 00:10:14,779
a request so HTTP someone requests and

282
00:10:14,779 --> 00:10:18,200
you reply right so if you have this is

283
00:10:18,200 --> 00:10:21,079
basically this whole actually I guess

284
00:10:21,079 --> 00:10:23,540
I'll bring the app in so this is this is

285
00:10:23,540 --> 00:10:25,070
the browser and this is your app does

286
00:10:25,070 --> 00:10:27,200
that make sense so basically if you

287
00:10:27,200 --> 00:10:29,540
separate these two things that is

288
00:10:29,540 --> 00:10:33,920
inbound and this represents an outbound

289
00:10:33,920 --> 00:10:37,190
function so when you to return stuff you

290
00:10:37,190 --> 00:10:39,140
call this function and to call stuff

291
00:10:39,140 --> 00:10:40,490
further in your app you call that

292
00:10:40,490 --> 00:10:42,440
function you'll see how that how that

293
00:10:42,440 --> 00:10:46,160
works so basically the idea is when I

294
00:10:46,160 --> 00:10:48,589
say that we are defining apps in terms

295
00:10:48,589 --> 00:10:50,360
of their arity how many apps they talk

296
00:10:50,360 --> 00:10:53,480
to so this app talks to one app just has

297
00:10:53,480 --> 00:10:56,390
one little bump there right so I call it

298
00:10:56,390 --> 00:10:59,000
a unary app and so if you have an app

299
00:10:59,000 --> 00:11:02,930
that talks to two apps so here's one

300
00:11:02,930 --> 00:11:05,720
that goes out outbound here's one that

301
00:11:05,720 --> 00:11:07,180
goes inbound that

302
00:11:07,180 --> 00:11:10,510
is a binary app when we call this in rub

303
00:11:10,510 --> 00:11:12,700
jargon we call this Middle where but i'm

304
00:11:12,700 --> 00:11:13,960
going to traduce one more type of app

305
00:11:13,960 --> 00:11:18,310
and that is rather predictably a ternary

306
00:11:18,310 --> 00:11:20,740
app so that's an app that talks to one

307
00:11:20,740 --> 00:11:23,470
app downstream and two apps upstream and

308
00:11:23,470 --> 00:11:25,090
basically what that allows you to do is

309
00:11:25,090 --> 00:11:26,530
branching and all sorts of stuff that

310
00:11:26,530 --> 00:11:31,120
you'll see so your fab app is just

311
00:11:31,120 --> 00:11:32,680
chaining these three kinds of apps

312
00:11:32,680 --> 00:11:34,030
together there's nothing else there's no

313
00:11:34,030 --> 00:11:35,410
methods there's no setting of anything

314
00:11:35,410 --> 00:11:37,000
you write apps and you just put them

315
00:11:37,000 --> 00:11:38,920
into this like fab connector and out

316
00:11:38,920 --> 00:11:40,690
comes a web app that does hopefully what

317
00:11:40,690 --> 00:11:45,970
you want it to so it uses currying right

318
00:11:45,970 --> 00:11:49,000
so if you have an appt of 83 and an appt

319
00:11:49,000 --> 00:11:52,000
of 81 what that means is when those two

320
00:11:52,000 --> 00:11:53,470
apps talk together talk to each other

321
00:11:53,470 --> 00:11:55,360
they create a binary app right so that's

322
00:11:55,360 --> 00:11:58,990
like currying right likewise if you have

323
00:11:58,990 --> 00:12:02,790
a binary app and you connect that to a

324
00:12:02,790 --> 00:12:05,470
unary app what you create is another

325
00:12:05,470 --> 00:12:07,540
unity app right so it's just simple math

326
00:12:07,540 --> 00:12:09,010
right and so the whole idea is that when

327
00:12:09,010 --> 00:12:11,050
you have these apps take other apps they

328
00:12:11,050 --> 00:12:13,030
end up creating just a simple responder

329
00:12:13,030 --> 00:12:14,470
that then is a unary app that can talk

330
00:12:14,470 --> 00:12:18,520
to like a web server so very quickly

331
00:12:18,520 --> 00:12:20,950
example apps here's hello world I showed

332
00:12:20,950 --> 00:12:25,480
you that earlier here is hello world

333
00:12:25,480 --> 00:12:27,730
again this time we're calling so

334
00:12:27,730 --> 00:12:29,890
basically this in any and any fab app

335
00:12:29,890 --> 00:12:32,980
this represents the downstream app so

336
00:12:32,980 --> 00:12:34,000
that's basically whenever you're done

337
00:12:34,000 --> 00:12:35,080
you want to send some information you

338
00:12:35,080 --> 00:12:37,180
send it into this and it chains because

339
00:12:37,180 --> 00:12:39,610
the downstream app returns a listener

340
00:12:39,610 --> 00:12:41,080
that you can then send more stuff to

341
00:12:41,080 --> 00:12:43,570
right so first we just send run response

342
00:12:43,570 --> 00:12:45,280
you can actually you can actually chain

343
00:12:45,280 --> 00:12:46,600
this in San responses it's asynchronous

344
00:12:46,600 --> 00:12:48,340
you can just keep sending and then when

345
00:12:48,340 --> 00:12:50,710
you see this empty thing if you're

346
00:12:50,710 --> 00:12:51,940
sending nothing and when you send

347
00:12:51,940 --> 00:12:53,440
nothing that means I'm done you can

348
00:12:53,440 --> 00:12:55,090
close this so it's very important for

349
00:12:55,090 --> 00:12:56,440
asynchronous stuff when you say you're

350
00:12:56,440 --> 00:12:58,180
done it can close it and then deliver

351
00:12:58,180 --> 00:13:00,130
the response so there's a parallelism

352
00:13:00,130 --> 00:13:02,920
here if you if the if the upstream app

353
00:13:02,920 --> 00:13:04,930
wants to say I'm done it returns it

354
00:13:04,930 --> 00:13:07,120
sends nothing if the downstream app

355
00:13:07,120 --> 00:13:08,410
wants to say I'm not interested in what

356
00:13:08,410 --> 00:13:10,000
you have to say anymore it returns

357
00:13:10,000 --> 00:13:11,530
nothing I eat it doesn't return a

358
00:13:11,530 --> 00:13:12,790
listener does that make sense so it's

359
00:13:12,790 --> 00:13:14,740
that parallel is kind of nice so here's

360
00:13:14,740 --> 00:13:16,320
another thing this is just a jiske style

361
00:13:16,320 --> 00:13:18,520
response so basically whenever you send

362
00:13:18,520 --> 00:13:20,560
response it's optional you can send just

363
00:13:20,560 --> 00:13:21,010
a status

364
00:13:21,010 --> 00:13:22,570
you can send just headers you can send

365
00:13:22,570 --> 00:13:23,860
just a body but you can send full

366
00:13:23,860 --> 00:13:28,270
responses like this for example here's

367
00:13:28,270 --> 00:13:30,130
hello world so it's asynchronous so you

368
00:13:30,130 --> 00:13:33,250
can do stuff like this and let's skip

369
00:13:33,250 --> 00:13:36,820
one here is oh okay so basically when

370
00:13:36,820 --> 00:13:38,770
you have because your app is only it

371
00:13:38,770 --> 00:13:40,270
only sees other apps so how do you know

372
00:13:40,270 --> 00:13:42,460
like for example where do we put stuff

373
00:13:42,460 --> 00:13:44,680
like the method or the URL and that

374
00:13:44,680 --> 00:13:46,900
stuff basically is you call a nap so

375
00:13:46,900 --> 00:13:48,580
what we're doing here is hello world 5

376
00:13:48,580 --> 00:13:50,410
is returning a function that's a

377
00:13:50,410 --> 00:13:52,390
listener for the downstream app that can

378
00:13:52,390 --> 00:13:54,340
then call that function again right and

379
00:13:54,340 --> 00:13:56,350
so when it calls it we have this thing

380
00:13:56,350 --> 00:13:58,000
that we do and we you know talk we

381
00:13:58,000 --> 00:14:00,040
basically echo the name of the path the

382
00:14:00,040 --> 00:14:01,450
first thing that scent is the head that

383
00:14:01,450 --> 00:14:04,270
contains the method the URL the headers

384
00:14:04,270 --> 00:14:05,920
and the next thing that our centers body

385
00:14:05,920 --> 00:14:07,450
so as long as you return something

386
00:14:07,450 --> 00:14:09,370
here's another example as long as you

387
00:14:09,370 --> 00:14:10,450
return a listener you can keep getting

388
00:14:10,450 --> 00:14:13,000
events right so for example this is a

389
00:14:13,000 --> 00:14:14,620
working app and all this stuff is is on

390
00:14:14,620 --> 00:14:17,020
the fab site you can run this code all

391
00:14:17,020 --> 00:14:18,400
this does it tells you how many bytes

392
00:14:18,400 --> 00:14:20,320
have been sent right so that's just it

393
00:14:20,320 --> 00:14:21,520
just keeps returning a listener and it

394
00:14:21,520 --> 00:14:23,950
keeps counting the bites so those are

395
00:14:23,950 --> 00:14:25,900
all unary apps so if you want to show

396
00:14:25,900 --> 00:14:28,420
you a binary app here's an example so

397
00:14:28,420 --> 00:14:30,670
here's an example of a binary app which

398
00:14:30,670 --> 00:14:33,190
is middleware that takes a nap and when

399
00:14:33,190 --> 00:14:35,140
that app is called it increments a

400
00:14:35,140 --> 00:14:37,150
counter and then it calls that app does

401
00:14:37,150 --> 00:14:38,440
that make sense so this this last line

402
00:14:38,440 --> 00:14:40,570
is probably oops the most important

403
00:14:40,570 --> 00:14:43,480
return app call this so you're taking

404
00:14:43,480 --> 00:14:46,480
this this upstream app you're calling it

405
00:14:46,480 --> 00:14:49,240
with this this in this case is the

406
00:14:49,240 --> 00:14:50,890
downstream map so you're connecting

407
00:14:50,890 --> 00:14:52,570
those two together so what that means is

408
00:14:52,570 --> 00:14:54,820
middleware there's no overhead of like

409
00:14:54,820 --> 00:14:55,810
for example middleware if you're

410
00:14:55,810 --> 00:14:57,430
constantly shuttling stuff between the

411
00:14:57,430 --> 00:14:59,020
upstream app in the downstream app with

412
00:14:59,020 --> 00:14:59,950
this you don't have to do that because

413
00:14:59,950 --> 00:15:02,440
basically when you return the listener

414
00:15:02,440 --> 00:15:04,090
that this guy returns what you're doing

415
00:15:04,090 --> 00:15:05,080
is you're connecting those two apps

416
00:15:05,080 --> 00:15:06,880
immediately and so you don't have access

417
00:15:06,880 --> 00:15:08,620
to that communication anymore which is

418
00:15:08,620 --> 00:15:09,610
nice because you can avoid a lot of

419
00:15:09,610 --> 00:15:11,440
overhead that way so here's an example

420
00:15:11,440 --> 00:15:13,210
of a Turner app here's an app called

421
00:15:13,210 --> 00:15:15,250
only Tuesday all right it has to

422
00:15:15,250 --> 00:15:18,340
upstream apps yes and no and if it's

423
00:15:18,340 --> 00:15:20,260
Tuesday it'll go to the S app and if

424
00:15:20,260 --> 00:15:21,610
it's not Tuesday it'll go to the no app

425
00:15:21,610 --> 00:15:23,740
so this is an example how you can use a

426
00:15:23,740 --> 00:15:25,540
turning out to do switching and this is

427
00:15:25,540 --> 00:15:28,210
for example how node for them sorry fab

428
00:15:28,210 --> 00:15:30,520
has no idea of a router all a router is

429
00:15:30,520 --> 00:15:34,790
a path app you give it a matching

430
00:15:34,790 --> 00:15:36,500
Oh for you give a regex that has a

431
00:15:36,500 --> 00:15:38,270
pattern that matches the path you give

432
00:15:38,270 --> 00:15:40,460
it a matches and in non matches app and

433
00:15:40,460 --> 00:15:42,080
basically if it matches it'll dish out

434
00:15:42,080 --> 00:15:43,610
to either one so a router is just

435
00:15:43,610 --> 00:15:45,280
chaining those Turner apps together

436
00:15:45,280 --> 00:15:47,360
which you'll see so I'm going to start

437
00:15:47,360 --> 00:15:49,130
with three examples here's hello world

438
00:15:49,130 --> 00:15:51,920
here's datetime here's rather focus

439
00:15:51,920 --> 00:15:53,210
actually change the name of these forgot

440
00:15:53,210 --> 00:15:54,650
to change the slide but you can see that

441
00:15:54,650 --> 00:15:55,970
we're going to build stuff it's very

442
00:15:55,970 --> 00:15:57,110
very modular and i'm going to show you

443
00:15:57,110 --> 00:15:59,030
one by one how it actually works and you

444
00:15:59,030 --> 00:16:00,470
can actually fall around follow along if

445
00:16:00,470 --> 00:16:01,910
you want if you have knowed installed

446
00:16:01,910 --> 00:16:05,510
the latest version of node please you

447
00:16:05,510 --> 00:16:07,930
can you can run this as i'm going so

448
00:16:07,930 --> 00:16:11,060
starting with the first app hello Jas so

449
00:16:11,060 --> 00:16:12,950
we want an app that does this if you

450
00:16:12,950 --> 00:16:15,320
call root it returns a 404 if you call

451
00:16:15,320 --> 00:16:17,450
hello it returns hello world and if you

452
00:16:17,450 --> 00:16:19,730
call hello with any sort of variable

453
00:16:19,730 --> 00:16:21,260
after hello it'll work just echo that

454
00:16:21,260 --> 00:16:22,700
variable back to you right so here's

455
00:16:22,700 --> 00:16:25,250
what this app looks like in fab here's

456
00:16:25,250 --> 00:16:26,840
the node boilerplate right for running a

457
00:16:26,840 --> 00:16:29,870
server we're going to add see we have

458
00:16:29,870 --> 00:16:32,210
fab up there and it's calling 404 right

459
00:16:32,210 --> 00:16:33,980
so this says whenever you call just

460
00:16:33,980 --> 00:16:35,240
returned a 404 that's not very

461
00:16:35,240 --> 00:16:37,700
interesting let's add some middleware

462
00:16:37,700 --> 00:16:39,260
here is the middleware that allows you

463
00:16:39,260 --> 00:16:41,420
to use this on node and it's just knowed

464
00:16:41,420 --> 00:16:42,950
middle with the adapter for node is

465
00:16:42,950 --> 00:16:44,180
there's no magic it's just another

466
00:16:44,180 --> 00:16:45,560
binary app that connects two things

467
00:16:45,560 --> 00:16:47,090
together in this case it'll turn your

468
00:16:47,090 --> 00:16:49,760
app into a node compatible listener all

469
00:16:49,760 --> 00:16:51,560
right so now let's add a ternary app so

470
00:16:51,560 --> 00:16:53,690
this is a regex pattern it calls a nap

471
00:16:53,690 --> 00:16:56,480
on fab called fab path and basically if

472
00:16:56,480 --> 00:16:58,370
it matches this path it dishes out this

473
00:16:58,370 --> 00:17:00,770
way otherwise dishes out this way does

474
00:17:00,770 --> 00:17:02,720
that make sense I'm talking really fast

475
00:17:02,720 --> 00:17:04,670
anyone any questions feel free to shout

476
00:17:04,670 --> 00:17:07,100
out any time I haven't timed this so I

477
00:17:07,100 --> 00:17:08,900
if I'm going over please give me like a

478
00:17:08,900 --> 00:17:11,150
five-minute or something ok cool so now

479
00:17:11,150 --> 00:17:13,430
we're gonna now we're going to turn this

480
00:17:13,430 --> 00:17:15,410
string so as you can see at any point

481
00:17:15,410 --> 00:17:17,030
you can see whether your app is complete

482
00:17:17,030 --> 00:17:18,890
because there's no bumps and there's no

483
00:17:18,890 --> 00:17:21,080
divots right so this whole thing is well

484
00:17:21,080 --> 00:17:23,660
connected what that means is if thing if

485
00:17:23,660 --> 00:17:24,920
it starts at hello we're going to turn

486
00:17:24,920 --> 00:17:26,510
this string which you'll see obviously

487
00:17:26,510 --> 00:17:28,130
is going to be a template and if not

488
00:17:28,130 --> 00:17:29,720
we're going to turn a 404 so let's

489
00:17:29,720 --> 00:17:31,490
actually fill that template in so now we

490
00:17:31,490 --> 00:17:33,380
have this rustic real simple template

491
00:17:33,380 --> 00:17:34,850
engine so now I'm actually going to

492
00:17:34,850 --> 00:17:36,140
render that string but now you can see

493
00:17:36,140 --> 00:17:37,610
we have a little thinner our app is not

494
00:17:37,610 --> 00:17:40,280
complete so what if it doesn't if it if

495
00:17:40,280 --> 00:17:42,470
it matches hello we're going to put this

496
00:17:42,470 --> 00:17:44,750
here right so now this app is complete

497
00:17:44,750 --> 00:17:47,240
we have world so this world gets passed

498
00:17:47,240 --> 00:17:47,790
to this the

499
00:17:47,790 --> 00:17:49,470
which renders it right and so now our

500
00:17:49,470 --> 00:17:51,090
app is complete so now all this is if

501
00:17:51,090 --> 00:17:53,280
you hit the route you will get a 44 if

502
00:17:53,280 --> 00:17:54,570
you at hello you will get a hello world

503
00:17:54,570 --> 00:17:56,220
that's not very interesting so let's put

504
00:17:56,220 --> 00:17:57,210
the name in so we're going to put in

505
00:17:57,210 --> 00:17:58,950
another ternary app again this is just a

506
00:17:58,950 --> 00:18:01,440
path app this has a regular expression

507
00:18:01,440 --> 00:18:02,910
and you'll see there's parentheses it'll

508
00:18:02,910 --> 00:18:04,590
capture what's in the parentheses and

509
00:18:04,590 --> 00:18:06,600
then there's a fab app called fab

510
00:18:06,600 --> 00:18:09,090
capture it'll return that value right so

511
00:18:09,090 --> 00:18:10,770
this is so basically here's this ternary

512
00:18:10,770 --> 00:18:13,050
app right here and if it doesn't match a

513
00:18:13,050 --> 00:18:14,970
return world and if it does match it'll

514
00:18:14,970 --> 00:18:16,680
return whatever is captured right that's

515
00:18:16,680 --> 00:18:19,650
how we that's we built that app any

516
00:18:19,650 --> 00:18:23,010
questions all right sorry all right

517
00:18:23,010 --> 00:18:25,200
here's another app date this one's kind

518
00:18:25,200 --> 00:18:27,930
of stupid basically if I get root return

519
00:18:27,930 --> 00:18:31,710
a JSON encoded date object if I get date

520
00:18:31,710 --> 00:18:33,930
format that into a date and if i get

521
00:18:33,930 --> 00:18:35,910
time form of that into time ok so this

522
00:18:35,910 --> 00:18:38,840
is how this app works no boilerplate

523
00:18:38,840 --> 00:18:41,670
we're going to turn a new date so this

524
00:18:41,670 --> 00:18:44,220
is a date and so basically if fab see

525
00:18:44,220 --> 00:18:45,540
something that's not a function by

526
00:18:45,540 --> 00:18:47,280
default it returns it as a body so we

527
00:18:47,280 --> 00:18:48,540
take this date and we put it in the body

528
00:18:48,540 --> 00:18:50,880
and return as a response but we need the

529
00:18:50,880 --> 00:18:53,370
note adapter and we actually let's say

530
00:18:53,370 --> 00:18:55,140
in this case we want a Content like so

531
00:18:55,140 --> 00:18:56,310
we have a Content like plugin that's

532
00:18:56,310 --> 00:18:58,440
renewed and if this case we also want

533
00:18:58,440 --> 00:19:00,240
stringify it you can't return right node

534
00:19:00,240 --> 00:19:01,980
needs you return a string so we have an

535
00:19:01,980 --> 00:19:03,330
app that just all it does it just dish

536
00:19:03,330 --> 00:19:05,040
out string fine all right so now this is

537
00:19:05,040 --> 00:19:06,600
a working app ok but it's not very

538
00:19:06,600 --> 00:19:08,580
interesting so let's add date and time

539
00:19:08,580 --> 00:19:09,720
these are two paths and now we've

540
00:19:09,720 --> 00:19:10,920
created two divots we need to fill those

541
00:19:10,920 --> 00:19:12,860
in we're going to fill them in with

542
00:19:12,860 --> 00:19:15,480
these strings again these are going to

543
00:19:15,480 --> 00:19:16,650
be template strings and we're just

544
00:19:16,650 --> 00:19:19,230
calling the these methods of the date

545
00:19:19,230 --> 00:19:22,890
object native JavaScript all right so

546
00:19:22,890 --> 00:19:24,390
lets you know for those who actually

547
00:19:24,390 --> 00:19:26,250
want to put a template in right so

548
00:19:26,250 --> 00:19:27,930
basically all template does is this it

549
00:19:27,930 --> 00:19:30,030
talks to two apps this is why a template

550
00:19:30,030 --> 00:19:31,140
is usually you think of a template as

551
00:19:31,140 --> 00:19:33,300
binary it's Turner II this is why the

552
00:19:33,300 --> 00:19:34,740
first app it calls is the template

553
00:19:34,740 --> 00:19:36,660
string so what this means is it's

554
00:19:36,660 --> 00:19:38,190
agnostic you can put a string in there

555
00:19:38,190 --> 00:19:39,840
or you can dish out to a file it doesn't

556
00:19:39,840 --> 00:19:41,550
matter all that app knows is that when

557
00:19:41,550 --> 00:19:43,410
it calls the first app it's going to get

558
00:19:43,410 --> 00:19:45,210
back a string right and so it uses that

559
00:19:45,210 --> 00:19:46,470
to creative function and it caches that

560
00:19:46,470 --> 00:19:48,660
function so all subsequent requests from

561
00:19:48,660 --> 00:19:50,070
the second app are going to go through

562
00:19:50,070 --> 00:19:52,650
that function all right so here's the

563
00:19:52,650 --> 00:19:54,780
thing for both of these we want to pass

564
00:19:54,780 --> 00:19:56,460
a date but we've already cleared the

565
00:19:56,460 --> 00:19:57,990
date down here now what you could do is

566
00:19:57,990 --> 00:19:59,490
you could put new day new date right

567
00:19:59,490 --> 00:20:01,320
here but what actually fab lets you do

568
00:20:01,320 --> 00:20:01,590
is

569
00:20:01,590 --> 00:20:03,720
leave it empty and what that does is

570
00:20:03,720 --> 00:20:06,480
whatever comes next to pass that all

571
00:20:06,480 --> 00:20:08,909
right so what this means is this both is

572
00:20:08,909 --> 00:20:09,929
going to be this is gonna be filled with

573
00:20:09,929 --> 00:20:11,429
this date does that make sense so you

574
00:20:11,429 --> 00:20:13,169
only have to declare the date once so

575
00:20:13,169 --> 00:20:15,299
we're trying to keep the repetition to a

576
00:20:15,299 --> 00:20:18,020
minimal so basically think of this as

577
00:20:18,020 --> 00:20:20,070
optional middleware this middle where is

578
00:20:20,070 --> 00:20:22,200
only called if it matches this URL does

579
00:20:22,200 --> 00:20:23,159
that make sense and so it's the same

580
00:20:23,159 --> 00:20:24,539
data object and just get Brett gets

581
00:20:24,539 --> 00:20:26,490
rendered differently based on the URL

582
00:20:26,490 --> 00:20:30,260
all right that makes sense any questions

583
00:20:30,260 --> 00:20:35,640
all right cool if it matches it'll only

584
00:20:35,640 --> 00:20:37,830
the first one yeah so that's the idea I

585
00:20:37,830 --> 00:20:39,390
think of think of a ternary app as a

586
00:20:39,390 --> 00:20:41,549
ternary operator in JavaScript right if

587
00:20:41,549 --> 00:20:42,690
you have a bunch of ternary operators in

588
00:20:42,690 --> 00:20:43,620
Java Script the first one that gets

589
00:20:43,620 --> 00:20:44,640
called that rest of the code is not

590
00:20:44,640 --> 00:20:46,559
evaluated the same thing that make sense

591
00:20:46,559 --> 00:20:50,669
of it all right so actually let's start

592
00:20:50,669 --> 00:20:52,860
focus i want to show you it's there's no

593
00:20:52,860 --> 00:20:54,270
point in showing you stuff that's just

594
00:20:54,270 --> 00:20:56,480
you know you could do it in Sinatra so

595
00:20:56,480 --> 00:20:58,860
I'd like to show you if you can see this

596
00:20:58,860 --> 00:21:02,850
but I'm gonna take three browsers all

597
00:21:02,850 --> 00:21:03,990
right and so what i want to i built an

598
00:21:03,990 --> 00:21:05,429
app called focus and what this app does

599
00:21:05,429 --> 00:21:08,520
is it's asynchronous it uses long

600
00:21:08,520 --> 00:21:09,840
polling and i'll show you how it's built

601
00:21:09,840 --> 00:21:12,210
and basically you open it a bunch of

602
00:21:12,210 --> 00:21:14,429
browsers and whatever browser has focus

603
00:21:14,429 --> 00:21:16,529
it gets sent to the rest of the browsers

604
00:21:16,529 --> 00:21:18,330
so you can well it's probably better

605
00:21:18,330 --> 00:21:20,640
just to show you alright cool so i'm

606
00:21:20,640 --> 00:21:22,350
going to call this there's no no magic

607
00:21:22,350 --> 00:21:23,970
here i'm doing this real time and hope

608
00:21:23,970 --> 00:21:27,510
it i hope it works open this in all

609
00:21:27,510 --> 00:21:32,190
these alright cool so you guys can see

610
00:21:32,190 --> 00:21:36,570
right just by focusing on these apps it

611
00:21:36,570 --> 00:21:38,520
sends it in real time and if it doesn't

612
00:21:38,520 --> 00:21:40,140
know the app like for example for coming

613
00:21:40,140 --> 00:21:41,549
from something it doesn't send a user

614
00:21:41,549 --> 00:21:49,289
agent it'll what's all well it's

615
00:21:49,289 --> 00:21:52,080
supposed to say other anyway that's the

616
00:21:52,080 --> 00:21:54,779
idea so that takes advantage of the node

617
00:21:54,779 --> 00:21:56,070
makes a star kind of stuff really cool

618
00:21:56,070 --> 00:21:57,149
right it's like really easy to build

619
00:21:57,149 --> 00:21:58,950
asynchronous stuff and so but the thing

620
00:21:58,950 --> 00:22:01,289
is frameworks usually are like the bare

621
00:22:01,289 --> 00:22:02,820
minimum easy stuff I want to build a

622
00:22:02,820 --> 00:22:04,080
framework that like lives on a

623
00:22:04,080 --> 00:22:05,429
synchronous and lets you build stuff

624
00:22:05,429 --> 00:22:08,640
like this very very easily does everyone

625
00:22:08,640 --> 00:22:09,480
get what just happened there is that

626
00:22:09,480 --> 00:22:11,159
cool you understand that right all right

627
00:22:11,159 --> 00:22:13,360
not too complicated all right

628
00:22:13,360 --> 00:22:16,480
oh you can oh wow that's a great plan

629
00:22:16,480 --> 00:22:20,049
thank you for that appreciate it I will

630
00:22:20,049 --> 00:22:21,549
show you the code for this here's what

631
00:22:21,549 --> 00:22:24,640
it looks like mm-hmm okay cool no

632
00:22:24,640 --> 00:22:26,470
boilerplate we're going to return a

633
00:22:26,470 --> 00:22:29,559
string this is just an HTML string right

634
00:22:29,559 --> 00:22:31,570
okay this app is done well it's not

635
00:22:31,570 --> 00:22:33,580
really done because we need the node

636
00:22:33,580 --> 00:22:37,270
adapter as usual and then you see the

637
00:22:37,270 --> 00:22:39,460
string calls to scripts all right well

638
00:22:39,460 --> 00:22:40,870
we need to send those scripts alright so

639
00:22:40,870 --> 00:22:41,860
let's send those scripts so we need two

640
00:22:41,860 --> 00:22:43,480
other paths one for an it and one for

641
00:22:43,480 --> 00:22:45,880
jquery for an it we're going to take

642
00:22:45,880 --> 00:22:47,860
client and put it to string now where's

643
00:22:47,860 --> 00:22:49,540
client client is right we haven't

644
00:22:49,540 --> 00:22:50,980
defined client well it's defined client

645
00:22:50,980 --> 00:22:52,809
client is a function all right this

646
00:22:52,809 --> 00:22:55,150
function is going to get to stringed and

647
00:22:55,150 --> 00:22:57,400
then sent to the browser ok so all this

648
00:22:57,400 --> 00:22:59,260
is is just jquery right so we've a

649
00:22:59,260 --> 00:23:00,910
listen function that listens and when it

650
00:23:00,910 --> 00:23:02,290
gets a response it listens again it gets

651
00:23:02,290 --> 00:23:03,460
a response that listens again this is

652
00:23:03,460 --> 00:23:05,559
long polling and then we have on focus

653
00:23:05,559 --> 00:23:07,630
get this thing it says focused right so

654
00:23:07,630 --> 00:23:08,919
it's got kind of this constant long

655
00:23:08,919 --> 00:23:10,330
polling connection and then when it

656
00:23:10,330 --> 00:23:12,549
focuses it sends this it fetches this

657
00:23:12,549 --> 00:23:14,860
folks URL alright so we put that in

658
00:23:14,860 --> 00:23:15,760
there but the thing is you can't just

659
00:23:15,760 --> 00:23:17,290
include a function this is a script

660
00:23:17,290 --> 00:23:18,490
right we just put a function it's not

661
00:23:18,490 --> 00:23:19,840
gonna get evaluated so I'm actually

662
00:23:19,840 --> 00:23:21,820
going to create a template right and all

663
00:23:21,820 --> 00:23:23,110
it does is it put that in a closure and

664
00:23:23,110 --> 00:23:25,360
it executes sit does that make sense so

665
00:23:25,360 --> 00:23:26,710
now I've returned this function that's

666
00:23:26,710 --> 00:23:28,360
this you know automatically executing

667
00:23:28,360 --> 00:23:30,220
function where the code was written on

668
00:23:30,220 --> 00:23:31,750
the server in JavaScript we just put

669
00:23:31,750 --> 00:23:32,710
that in the string it's like at the

670
00:23:32,710 --> 00:23:34,330
bottom of this file so you can you know

671
00:23:34,330 --> 00:23:36,010
we don't keep I don't you know the whole

672
00:23:36,010 --> 00:23:37,480
point is I want to be agnostic I hate

673
00:23:37,480 --> 00:23:38,830
these frameworks where it's like your

674
00:23:38,830 --> 00:23:40,540
layouts go here and your views go here I

675
00:23:40,540 --> 00:23:41,860
don't you know it's like whatever you

676
00:23:41,860 --> 00:23:44,020
want to do is cool I will help you allow

677
00:23:44,020 --> 00:23:45,460
that so the whole idea is just to be

678
00:23:45,460 --> 00:23:47,860
agnostic about that so now we need to

679
00:23:47,860 --> 00:23:50,830
send jquery well we can use a file

680
00:23:50,830 --> 00:23:52,660
system and so this is going to dish out

681
00:23:52,660 --> 00:23:54,820
to the file system this app is a binary

682
00:23:54,820 --> 00:23:56,530
app right usually I think a file file

683
00:23:56,530 --> 00:23:58,150
system is just a handler this is a

684
00:23:58,150 --> 00:24:00,610
binary app it calls and it gets back a

685
00:24:00,610 --> 00:24:02,260
string that represents the path and then

686
00:24:02,260 --> 00:24:03,610
it fetches that file and then it returns

687
00:24:03,610 --> 00:24:05,230
what was ever whatever isn't that file

688
00:24:05,230 --> 00:24:06,820
so we're going to call jquery that just

689
00:24:06,820 --> 00:24:08,860
dishes out to the file system ok all

690
00:24:08,860 --> 00:24:11,110
right so now this app is complete but

691
00:24:11,110 --> 00:24:12,730
it's not really because when you focus

692
00:24:12,730 --> 00:24:14,290
like we're going to call these URLs that

693
00:24:14,290 --> 00:24:15,880
don't exist so let's put those URLs in

694
00:24:15,880 --> 00:24:18,130
listen and focused right you guys

695
00:24:18,130 --> 00:24:21,820
remember these so listen all right now

696
00:24:21,820 --> 00:24:23,350
here's where this but this is again this

697
00:24:23,350 --> 00:24:24,429
is like what the cool thing about this

698
00:24:24,429 --> 00:24:25,780
is it's asynchronous so we have this

699
00:24:25,780 --> 00:24:26,919
handler and work

700
00:24:26,919 --> 00:24:28,629
we're just pushing the current listener

701
00:24:28,629 --> 00:24:30,730
to this array that we now have at the

702
00:24:30,730 --> 00:24:32,320
top right we're not responding at all

703
00:24:32,320 --> 00:24:33,460
this is the whole point of long polling

704
00:24:33,460 --> 00:24:34,899
we're going to respond when something

705
00:24:34,899 --> 00:24:37,749
changes okay so now we just need to fill

706
00:24:37,749 --> 00:24:40,359
in the focus part so now I rated this

707
00:24:40,359 --> 00:24:41,950
function just for this app called

708
00:24:41,950 --> 00:24:44,799
broadcast and it looks like this it's

709
00:24:44,799 --> 00:24:46,960
pretty simple it takes a list it takes

710
00:24:46,960 --> 00:24:48,999
an array I'm sorry it takes a function

711
00:24:48,999 --> 00:24:50,440
that returns an array of listeners right

712
00:24:50,440 --> 00:24:51,190
because we want to keep everything

713
00:24:51,190 --> 00:24:53,919
within this whole a paradigm it returns

714
00:24:53,919 --> 00:24:55,480
a response immediately a blank response

715
00:24:55,480 --> 00:24:56,859
that has nothing in it so it tells it

716
00:24:56,859 --> 00:24:58,210
like you're done ok so I'll return it

717
00:24:58,210 --> 00:24:59,320
200 and you don't need to do any more

718
00:24:59,320 --> 00:25:02,769
then it'll return it'll call the

719
00:25:02,769 --> 00:25:04,210
downstream app and then I'll get its

720
00:25:04,210 --> 00:25:05,649
feedback and I'll chain it through to

721
00:25:05,649 --> 00:25:06,759
all the listeners that you push in this

722
00:25:06,759 --> 00:25:09,249
array all right so that's basically the

723
00:25:09,249 --> 00:25:11,169
cool thing about about what this does is

724
00:25:11,169 --> 00:25:13,090
this is now totally reusable we could

725
00:25:13,090 --> 00:25:14,230
reuse this in another app it's not

726
00:25:14,230 --> 00:25:15,549
specific to our appt at all because we

727
00:25:15,549 --> 00:25:17,139
built it as a binary app as middleware

728
00:25:17,139 --> 00:25:18,789
and not as an app that you know belongs

729
00:25:18,789 --> 00:25:20,080
in some sort of hierarchy somewhere so

730
00:25:20,080 --> 00:25:22,659
we're going to put that in and hereafter

731
00:25:22,659 --> 00:25:24,100
it we're going to put the listeners that

732
00:25:24,100 --> 00:25:26,019
we want to send it to but we still

733
00:25:26,019 --> 00:25:28,239
haven't sent a response yet so we want

734
00:25:28,239 --> 00:25:30,220
to send the user agent now this is not a

735
00:25:30,220 --> 00:25:31,509
magical function this is just a function

736
00:25:31,509 --> 00:25:33,970
i defined here this is to hack you know

737
00:25:33,970 --> 00:25:35,590
based on your user agent I'm going to

738
00:25:35,590 --> 00:25:36,940
send you some string and it only works

739
00:25:36,940 --> 00:25:38,019
for these strings and apparently not

740
00:25:38,019 --> 00:25:40,419
even for other as you saw something to

741
00:25:40,419 --> 00:25:43,690
put that in there but we we can't just

742
00:25:43,690 --> 00:25:44,619
return it we need to do with something

743
00:25:44,619 --> 00:25:45,759
with it right so I'm going to put in a

744
00:25:45,759 --> 00:25:47,200
template and it's going to call this

745
00:25:47,200 --> 00:25:48,850
JavaScript code right this is jQuery

746
00:25:48,850 --> 00:25:50,710
code and it's going to render that user

747
00:25:50,710 --> 00:25:52,450
agent into a function that will then get

748
00:25:52,450 --> 00:25:54,669
executed all right so now at this point

749
00:25:54,669 --> 00:25:56,499
I think your app is entirely complete

750
00:25:56,499 --> 00:25:58,419
right there's no bumps anywhere ok does

751
00:25:58,419 --> 00:25:59,379
that make sense this is what the app

752
00:25:59,379 --> 00:26:01,419
looks like and then the cool thing about

753
00:26:01,419 --> 00:26:02,769
this because you built everything so

754
00:26:02,769 --> 00:26:04,539
modularly you can totally map it you

755
00:26:04,539 --> 00:26:05,889
understand where everything goes you can

756
00:26:05,889 --> 00:26:08,739
actually have a very over-the-top

757
00:26:08,739 --> 00:26:12,279
animation that shows you sorry I was

758
00:26:12,279 --> 00:26:13,929
like I was like I was seeing all these

759
00:26:13,929 --> 00:26:14,739
presentations all these like really

760
00:26:14,739 --> 00:26:16,389
masterful guys it's like you know like

761
00:26:16,389 --> 00:26:18,220
words on the page and I was like man

762
00:26:18,220 --> 00:26:21,279
it's just sucker for the for the keynote

763
00:26:21,279 --> 00:26:24,159
candy all right so that was that all

764
00:26:24,159 --> 00:26:27,190
right so now what so this is the final

765
00:26:27,190 --> 00:26:29,230
final stretch here I need to improve the

766
00:26:29,230 --> 00:26:31,539
docs tests an example examples are ok

767
00:26:31,539 --> 00:26:34,389
Doc's need a lot of work tests need a

768
00:26:34,389 --> 00:26:35,919
lot of work there are no tests there

769
00:26:35,919 --> 00:26:37,260
were tests in the last version

770
00:26:37,260 --> 00:26:38,280
I got rid of them when i updated to the

771
00:26:38,280 --> 00:26:39,780
latest thing so neat we're going to lab

772
00:26:39,780 --> 00:26:41,190
tests the cool thing is because all

773
00:26:41,190 --> 00:26:43,560
these apps are tiny tiny the tests are

774
00:26:43,560 --> 00:26:46,050
also specific to a single app so what

775
00:26:46,050 --> 00:26:47,670
I'm envisioning is when you ship a nap

776
00:26:47,670 --> 00:26:49,650
any time you add an app to fab or to

777
00:26:49,650 --> 00:26:51,480
your own app anywhere you had a test

778
00:26:51,480 --> 00:26:53,130
just for that app and it doesn't have to

779
00:26:53,130 --> 00:26:54,420
belong in a hierarchy all it knows is

780
00:26:54,420 --> 00:26:55,770
that you know something comes in and

781
00:26:55,770 --> 00:26:56,880
something goes out so you can put an app

782
00:26:56,880 --> 00:27:00,450
on either side that helps you test it I

783
00:27:00,450 --> 00:27:02,250
want to promote an ecosystem of apps so

784
00:27:02,250 --> 00:27:04,230
just like jQuery really gave this

785
00:27:04,230 --> 00:27:06,270
ecosystem of plugins because it's now

786
00:27:06,270 --> 00:27:07,320
it's really easy to build a plug and

787
00:27:07,320 --> 00:27:08,850
just put in jQuery I want to have the

788
00:27:08,850 --> 00:27:10,380
same thing for the server these apps are

789
00:27:10,380 --> 00:27:11,640
tiny I want to be able to build all

790
00:27:11,640 --> 00:27:12,630
these tiny little apps would be like oh

791
00:27:12,630 --> 00:27:14,220
I have enough does this go there right

792
00:27:14,220 --> 00:27:15,780
so I fab doesn't maintain it someone

793
00:27:15,780 --> 00:27:17,340
else maintains it right and then you can

794
00:27:17,340 --> 00:27:19,050
use it and as long as they conform to

795
00:27:19,050 --> 00:27:20,520
this really really simple spec then

796
00:27:20,520 --> 00:27:22,050
hopefully you'd be able to share those

797
00:27:22,050 --> 00:27:23,970
things pretty easily and so just like

798
00:27:23,970 --> 00:27:25,380
jQuery if there's absolutely pouring

799
00:27:25,380 --> 00:27:26,790
people want them i would like to merge

800
00:27:26,790 --> 00:27:29,280
them into court so that you know you can

801
00:27:29,280 --> 00:27:30,240
just download it and just built up

802
00:27:30,240 --> 00:27:32,790
instantly and then finally i want to add

803
00:27:32,790 --> 00:27:35,340
support for other platforms and i tried

804
00:27:35,340 --> 00:27:37,260
to do this for this for for this demo I

805
00:27:37,260 --> 00:27:40,410
couldn't get it done in time because of

806
00:27:40,410 --> 00:27:42,870
the beer but basically the idea is this

807
00:27:42,870 --> 00:27:45,270
there's nothing magical about this that

808
00:27:45,270 --> 00:27:46,740
belongs on the server right you could do

809
00:27:46,740 --> 00:27:48,630
this in a client here's my plan my next

810
00:27:48,630 --> 00:27:51,300
platform for fab is jQuery and the idea

811
00:27:51,300 --> 00:27:53,820
is this you download a server into your

812
00:27:53,820 --> 00:27:56,040
browser does that make sense okay so a

813
00:27:56,040 --> 00:27:57,660
fab app is just something that responds

814
00:27:57,660 --> 00:27:59,640
to these paths rights just HTTP so I'd

815
00:27:59,640 --> 00:28:00,900
like to do is you actually download an

816
00:28:00,900 --> 00:28:02,220
app and you can actually build like

817
00:28:02,220 --> 00:28:03,720
stuff where it just runs in the browser

818
00:28:03,720 --> 00:28:05,490
without hitting the server unless you

819
00:28:05,490 --> 00:28:07,290
want to and so you can agnostic aliso

820
00:28:07,290 --> 00:28:08,760
then it would be really easy to find an

821
00:28:08,760 --> 00:28:10,740
app on the server render it to find an

822
00:28:10,740 --> 00:28:12,090
apple the client you know render it

823
00:28:12,090 --> 00:28:13,440
there but basically you can be agnostic

824
00:28:13,440 --> 00:28:14,640
about where you render so you can

825
00:28:14,640 --> 00:28:16,320
actually the same site you know Google

826
00:28:16,320 --> 00:28:18,150
will see your HTML site and the client

827
00:28:18,150 --> 00:28:19,890
will see your JSON right and the only

828
00:28:19,890 --> 00:28:21,000
thing you change is one bully and that

829
00:28:21,000 --> 00:28:22,860
flips which path they go to that make

830
00:28:22,860 --> 00:28:24,480
sense so that's the final thing I want

831
00:28:24,480 --> 00:28:25,770
to do so that's what i'll be doing over

832
00:28:25,770 --> 00:28:27,840
the next week and change and you know

833
00:28:27,840 --> 00:28:29,100
the next few i'm going to build stuff on

834
00:28:29,100 --> 00:28:32,700
top of this next for my own stuff and so

835
00:28:32,700 --> 00:28:35,700
i encourage if you guys like this I

836
00:28:35,700 --> 00:28:37,710
encourage you to help me out and it's

837
00:28:37,710 --> 00:28:39,060
you know just write an app and point me

838
00:28:39,060 --> 00:28:40,680
to it and you know if it's cool put it

839
00:28:40,680 --> 00:28:42,630
in if people use it and so this is how

840
00:28:42,630 --> 00:28:55,440
I'd like to proceed and that is it thank

841
00:28:55,450 --> 00:29:02,720
any questions yes stable API that you're

842
00:29:02,720 --> 00:29:04,429
shooting right now well it's built on

843
00:29:04,429 --> 00:29:11,420
top of nodes as you saw the API is

844
00:29:11,420 --> 00:29:13,580
really simple I'm I've gone through a

845
00:29:13,580 --> 00:29:15,170
lot of iterations I think it's pretty

846
00:29:15,170 --> 00:29:16,940
stable there's very there's very few

847
00:29:16,940 --> 00:29:18,770
moving parts right the whole idea is

848
00:29:18,770 --> 00:29:20,120
that you just build functions and it's

849
00:29:20,120 --> 00:29:21,290
just like a closure that hold the

850
00:29:21,290 --> 00:29:23,150
returns other functions I'm pretty sure

851
00:29:23,150 --> 00:29:25,580
the API is stable but don't quote me on

852
00:29:25,580 --> 00:29:27,500
it until it hits one right but it's

853
00:29:27,500 --> 00:29:28,549
stable enough that I'm building stuff on

854
00:29:28,549 --> 00:29:30,710
top of it but yeah no promises until

855
00:29:30,710 --> 00:29:34,100
until it gels a little bit more have you

856
00:29:34,100 --> 00:29:35,870
thought about how errors get propagated

857
00:29:35,870 --> 00:29:38,720
through any besides the 404 I thing else

858
00:29:38,720 --> 00:29:40,400
goes wrong something else goes wrong in

859
00:29:40,400 --> 00:29:42,080
your fab app somewhere down inside of

860
00:29:42,080 --> 00:29:46,070
the nested binary chain I haven't

861
00:29:46,070 --> 00:29:48,650
thought about that as much I imagine in

862
00:29:48,650 --> 00:29:50,510
some case you would have to build your

863
00:29:50,510 --> 00:29:52,340
app to try catch blocks just put in your

864
00:29:52,340 --> 00:29:55,280
app or but yeah I mean ideally you'd

865
00:29:55,280 --> 00:29:57,710
want to propagate the error as a code

866
00:29:57,710 --> 00:29:59,600
and then maybe have a sniffer so for

867
00:29:59,600 --> 00:30:02,270
example you could create middleware when

868
00:30:02,270 --> 00:30:03,650
I say middleware I mean a binary app I'd

869
00:30:03,650 --> 00:30:05,690
love to have people adapt this target if

870
00:30:05,690 --> 00:30:08,090
you guys like it have a binary app that

871
00:30:08,090 --> 00:30:09,980
basically all it does is it looks for

872
00:30:09,980 --> 00:30:11,179
something comes down and it comes down

873
00:30:11,179 --> 00:30:13,100
with a certain error code it then

874
00:30:13,100 --> 00:30:15,110
returns a specific response does that

875
00:30:15,110 --> 00:30:16,580
make sense so the whole idea is as much

876
00:30:16,580 --> 00:30:18,470
as possible keep it in the chain and

877
00:30:18,470 --> 00:30:21,140
then you know use the brilliance of HTTP

878
00:30:21,140 --> 00:30:26,120
to to solve problems like that idea all

879
00:30:26,120 --> 00:30:31,950
right any questions yes

880
00:30:31,960 --> 00:30:36,710
my earrings are just functions could you

881
00:30:36,710 --> 00:30:39,950
split it back into as many as you want

882
00:30:39,950 --> 00:30:42,369
in

883
00:30:42,379 --> 00:30:44,639
exactly yes in fact if you look at the

884
00:30:44,639 --> 00:30:46,679
fab if you look at fab the three apps i

885
00:30:46,679 --> 00:30:48,450
showed you they are actually apps that

886
00:30:48,450 --> 00:30:50,220
are sitting in another app so like it's

887
00:30:50,220 --> 00:30:52,019
just apps all the way down right a fab

888
00:30:52,019 --> 00:30:54,869
app itself is a valid fab app anything

889
00:30:54,869 --> 00:30:56,070
you create with fab itself is a valid

890
00:30:56,070 --> 00:30:57,600
fab app so the idea is that you don't

891
00:30:57,600 --> 00:30:59,249
have your very agnostic about what you

892
00:30:59,249 --> 00:31:00,360
want to put in the file system what you

893
00:31:00,360 --> 00:31:02,009
want to separate it's just as long as

894
00:31:02,009 --> 00:31:02,970
you have some way of getting out of that

895
00:31:02,970 --> 00:31:05,610
file so I for example I use module

896
00:31:05,610 --> 00:31:07,559
exports in node right and so what that

897
00:31:07,559 --> 00:31:08,700
does is the only way to return a

898
00:31:08,700 --> 00:31:10,080
function because usually with exports

899
00:31:10,080 --> 00:31:11,100
you have returned object and put a

900
00:31:11,100 --> 00:31:11,999
function on and then how will these

901
00:31:11,999 --> 00:31:13,649
redundant names everywhere so I use

902
00:31:13,649 --> 00:31:14,820
module data export and I just turn the

903
00:31:14,820 --> 00:31:16,799
function and so if you look at the the

904
00:31:16,799 --> 00:31:18,659
source code in the examples in fab it

905
00:31:18,659 --> 00:31:23,129
has stuff like that yeah alright cool

906
00:31:23,129 --> 00:31:36,720
yes yes limitations of node 0 right all

907
00:31:36,720 --> 00:31:38,070
right is that no it's not really resume

908
00:31:38,070 --> 00:31:39,480
yet yes notice not running the browser

909
00:31:39,480 --> 00:31:41,369
would run on jquery but the whole idea

910
00:31:41,369 --> 00:31:42,960
is that there's nothing notice there's

911
00:31:42,960 --> 00:31:44,220
nothing specific about node in this

912
00:31:44,220 --> 00:31:45,899
everything that's node is a separate app

913
00:31:45,899 --> 00:31:48,330
that does stuff for node does that make

914
00:31:48,330 --> 00:31:49,739
sense fab itself is totally agnostic

915
00:31:49,739 --> 00:31:51,450
yeah so like it shouldn't be too hard to

916
00:31:51,450 --> 00:31:52,889
port it to jquery I actually I'd like

917
00:31:52,889 --> 00:31:54,389
actually just support it straight to the

918
00:31:54,389 --> 00:31:56,100
browser as long as you can get you know

919
00:31:56,100 --> 00:31:58,289
Ajax pretty good Ajax and a pretty good

920
00:31:58,289 --> 00:32:00,389
back button support you know basically

921
00:32:00,389 --> 00:32:01,859
the stuff that Aaron works on Sammy

922
00:32:01,859 --> 00:32:04,139
stuff like that yeah I feel like those

923
00:32:04,139 --> 00:32:05,429
would be the two core things you would

