1
00:00:00,000 --> 00:00:01,790

[Applause]

2
00:00:01,790 --> 00:00:05,970
yeah good good good yeah

3
00:00:05,970 --> 00:00:08,670
judging by the sound of the claps sounds

4
00:00:08,670 --> 00:00:13,860
very good judging by the sound of the

5
00:00:13,860 --> 00:00:15,389
claps that sounds very good

6
00:00:15,389 --> 00:00:17,789
did you tell you that than me I know it

7
00:00:17,789 --> 00:00:19,230
was the guy backstage do it again do it

8
00:00:19,230 --> 00:00:19,619
again

9
00:00:19,619 --> 00:00:29,119
I just wanted to applause hop you well

10
00:00:29,119 --> 00:00:32,669
five of you were well what's the matter

11
00:00:32,669 --> 00:00:34,230
was the last the last stop was good

12
00:00:34,230 --> 00:00:34,800
right

13
00:00:34,800 --> 00:00:36,750
you're feeling energized you're feeling

14
00:00:36,750 --> 00:00:39,809
inspired amazing

15
00:00:39,809 --> 00:00:41,879
my name is Tagus that's pronounced like

16
00:00:41,879 --> 00:00:43,980
contagious but don't worry I'm not

17
00:00:43,980 --> 00:00:45,629
contagious I'm not going to give you

18
00:00:45,629 --> 00:00:47,480
anything besides hopefully a good talk

19
00:00:47,480 --> 00:00:51,420
and I have to say I love this conference

20
00:00:51,420 --> 00:00:53,760
I was here for CSS conf and J's confi

21
00:00:53,760 --> 00:00:56,579
esterday learned the ton I learned a ton

22
00:00:56,579 --> 00:00:59,640
debugging performance it's all here can

23
00:00:59,640 --> 00:01:02,460
we hear it for the organizers of J's

24
00:01:02,460 --> 00:01:07,790
computer pest absolutely incredible

25
00:01:07,790 --> 00:01:11,010
and also and also the city the city is

26
00:01:11,010 --> 00:01:13,110
really beautiful if you live here who

27
00:01:13,110 --> 00:01:14,100
I'm jealous

28
00:01:14,100 --> 00:01:16,500
I'm jealous so as I said my name stages

29
00:01:16,500 --> 00:01:17,700
contagious is kind of like a way to

30
00:01:17,700 --> 00:01:19,890
remember it because it's a it's a bit of

31
00:01:19,890 --> 00:01:22,740
a different Indian name but really at

32
00:01:22,740 --> 00:01:23,939
this point you can just call me that

33
00:01:23,939 --> 00:01:27,659
joke guy from yesterday yesterday at the

34
00:01:27,659 --> 00:01:33,150
party it's like and so yes yes I'm

35
00:01:33,150 --> 00:01:34,560
hilarious

36
00:01:34,560 --> 00:01:36,509
I work in Germany at a company called

37
00:01:36,509 --> 00:01:40,259
con te amo and we you know the marketing

38
00:01:40,259 --> 00:01:42,060
way we like promote ourselves as we

39
00:01:42,060 --> 00:01:44,549
accelerate data access just means we we

40
00:01:44,549 --> 00:01:46,560
help people understand their data and do

41
00:01:46,560 --> 00:01:48,680
all kinds of cool data science II things

42
00:01:48,680 --> 00:01:52,200
but really for me what I love the most

43
00:01:52,200 --> 00:01:55,680
about my work is these people oh my good

44
00:01:55,680 --> 00:01:58,259
this is my team and they are some of the

45
00:01:58,259 --> 00:02:01,229
brightest funniest smartest all my good

46
00:02:01,229 --> 00:02:02,689
I love them very much and I'm very happy

47
00:02:02,689 --> 00:02:04,740
to work with them and you know I get to

48
00:02:04,740 --> 00:02:05,790
come here and tell you about how

49
00:02:05,790 --> 00:02:07,799
wonderful they are but that

50
00:02:07,799 --> 00:02:10,560
unfortunately is not what this talk is

51
00:02:10,560 --> 00:02:13,230
about sorry sad instead the talks about

52
00:02:13,230 --> 00:02:15,420
serverless service how do you even heard

53
00:02:15,420 --> 00:02:16,849
if serverless

54
00:02:16,849 --> 00:02:20,760
Wow everybody so nothing new will be

55
00:02:20,760 --> 00:02:22,950
learned here I'm just kidding we're

56
00:02:22,950 --> 00:02:24,239
gonna talk about certainly gonna look at

57
00:02:24,239 --> 00:02:27,750
some adoption some usage we look at what

58
00:02:27,750 --> 00:02:29,989
it means and why I think it is

59
00:02:29,989 --> 00:02:33,810
absolutely revolutionary and I mean that

60
00:02:33,810 --> 00:02:35,940
this talk is called legendary lambdas

61
00:02:35,940 --> 00:02:36,900
for a reason

62
00:02:36,900 --> 00:02:38,610
but before we get into that let's kind

63
00:02:38,610 --> 00:02:40,800
of look at some facts and figures these

64
00:02:40,800 --> 00:02:43,440
are from surveys this the citations on

65
00:02:43,440 --> 00:02:44,790
the bottom left I'd encourage you to go

66
00:02:44,790 --> 00:02:48,150
look it out look it up and according to

67
00:02:48,150 --> 00:02:52,950
the new stack some time ago about 78% of

68
00:02:52,950 --> 00:02:54,840
participants in the survey wanted to

69
00:02:54,840 --> 00:02:56,790
adopt serverless into their ecosystem

70
00:02:56,790 --> 00:02:59,670
into their internal service architecture

71
00:02:59,670 --> 00:03:02,129
70% which means by now they may have

72
00:03:02,129 --> 00:03:05,250
already another interesting statistic is

73
00:03:05,250 --> 00:03:09,420
75% of the problem space has been

74
00:03:09,420 --> 00:03:12,209
penetrated by serverless in the last 18

75
00:03:12,209 --> 00:03:14,340
months or so and that is really really

76
00:03:14,340 --> 00:03:18,920
really exciting it very quickly overtook

77
00:03:18,920 --> 00:03:21,599
the prior art if you will containers as

78
00:03:21,599 --> 00:03:23,700
a service and it's it's growing very

79
00:03:23,700 --> 00:03:26,909
fast and these are just numbers but

80
00:03:26,909 --> 00:03:29,340
there are real world use cases where

81
00:03:29,340 --> 00:03:32,489
serverless is doing amazing things and

82
00:03:32,489 --> 00:03:35,010
one such use cases by one of the biggest

83
00:03:35,010 --> 00:03:37,440
brands in the whole world

84
00:03:37,440 --> 00:03:40,470
coca-cola reduced their operating costs

85
00:03:40,470 --> 00:03:42,150
by about sixty five percent on

86
00:03:42,150 --> 00:03:42,599
serverless

87
00:03:42,599 --> 00:03:44,459
and how they did that is they had these

88
00:03:44,459 --> 00:03:46,860
these vending machines that were like 10

89
00:03:46,860 --> 00:03:49,019
to 12 years old and they would have to

90
00:03:49,019 --> 00:03:50,760
send some some telemetry they had a

91
00:03:50,760 --> 00:03:52,799
sense of information about like are

92
00:03:52,799 --> 00:03:54,750
there enough drinks and stuff to coke

93
00:03:54,750 --> 00:03:57,840
now these up until 2016 or run on

94
00:03:57,840 --> 00:04:01,200
Amazon's ec2 and cost about twelve

95
00:04:01,200 --> 00:04:03,299
thousand eight hundred sixty-four

96
00:04:03,299 --> 00:04:05,900
dollars a year okay

97
00:04:05,900 --> 00:04:08,849
after moving to server lists coca-cola

98
00:04:08,849 --> 00:04:11,760
pays 4490 roughly at the time of the

99
00:04:11,760 --> 00:04:14,310
case study for you that's that's a 65

100
00:04:14,310 --> 00:04:16,650
percent reduction and it they could

101
00:04:16,650 --> 00:04:19,799
serve 30 million requests at one time at

102
00:04:19,799 --> 00:04:21,090
the time of publishing of this study

103
00:04:21,090 --> 00:04:23,880
very very very interesting second if

104
00:04:23,880 --> 00:04:25,139
you've ever played or her

105
00:04:25,139 --> 00:04:27,719
of final fantasy square enix is a

106
00:04:27,719 --> 00:04:28,620
company behind some of the world's

107
00:04:28,620 --> 00:04:31,680
greatest MMORPGs massively multiplayer

108
00:04:31,680 --> 00:04:33,389
online role-playing games and they can

109
00:04:33,389 --> 00:04:35,310
have millions of players on at the same

110
00:04:35,310 --> 00:04:37,560
time and what players like to do at

111
00:04:37,560 --> 00:04:39,870
massive scale is take screenshots so

112
00:04:39,870 --> 00:04:42,150
they have an image processing function

113
00:04:42,150 --> 00:04:45,199
that would process these screenshots now

114
00:04:45,199 --> 00:04:47,400
processing these screenshots especially

115
00:04:47,400 --> 00:04:49,919
under heavy load would use that used to

116
00:04:49,919 --> 00:04:52,499
take several hours after moving to

117
00:04:52,499 --> 00:04:54,479
server list these take a little over 10

118
00:04:54,479 --> 00:04:56,330
seconds and more than that they can

119
00:04:56,330 --> 00:04:58,949
comfortably do this with traffic spikes

120
00:04:58,949 --> 00:05:01,409
of over 2 times so if there's a gaming

121
00:05:01,409 --> 00:05:02,939
tournament and there's like millions of

122
00:05:02,939 --> 00:05:05,460
people online this this function to

123
00:05:05,460 --> 00:05:08,750
process the images eats it for breakfast

124
00:05:08,750 --> 00:05:11,969
lastly if you've ever heard of a used a

125
00:05:11,969 --> 00:05:14,039
Wi-Fi router in your entire life there's

126
00:05:14,039 --> 00:05:15,449
a good chance on with a Thompson one and

127
00:05:15,449 --> 00:05:17,009
Thompson routers one of the world's

128
00:05:17,009 --> 00:05:19,650
biggest brands for routers is able to

129
00:05:19,650 --> 00:05:23,009
process 4,000 events per second on

130
00:05:23,009 --> 00:05:25,499
serverless what's really impressive

131
00:05:25,499 --> 00:05:28,289
about this is even you know under very

132
00:05:28,289 --> 00:05:30,800
heavy conditions there's no or minimal

133
00:05:30,800 --> 00:05:35,699
probably no data loss but for me and

134
00:05:35,699 --> 00:05:38,839
this is what I want to focus on today is

135
00:05:38,839 --> 00:05:42,330
they scheduled five months to get this

136
00:05:42,330 --> 00:05:44,460
into production according to the report

137
00:05:44,460 --> 00:05:46,620
and you know if you're at the scale of

138
00:05:46,620 --> 00:05:47,939
Thompson five months is a really short

139
00:05:47,939 --> 00:05:49,409
time I've heard people say that in

140
00:05:49,409 --> 00:05:51,000
larger companies things just take longer

141
00:05:51,000 --> 00:05:53,069
there's more meetings and more planning

142
00:05:53,069 --> 00:05:55,349
whatsoever and so five months is

143
00:05:55,349 --> 00:05:57,870
ambitious Thompson actually ended up

144
00:05:57,870 --> 00:06:00,930
moving this thing to server list two

145
00:06:00,930 --> 00:06:03,719
months ahead of schedule two months

146
00:06:03,719 --> 00:06:06,060
ahead of serverless is is you're able to

147
00:06:06,060 --> 00:06:08,430
get up and running really really fast

148
00:06:08,430 --> 00:06:10,500
and so I tell you all these things to

149
00:06:10,500 --> 00:06:13,199
tell you it's here and it's big and and

150
00:06:13,199 --> 00:06:14,969
people are talking about it but don't

151
00:06:14,969 --> 00:06:17,399
take my word for it I think one of my

152
00:06:17,399 --> 00:06:19,469
friends Nadder said it best he just says

153
00:06:19,469 --> 00:06:24,060
this serverless is the future and so if

154
00:06:24,060 --> 00:06:26,610
it is the future and we're all kind of

155
00:06:26,610 --> 00:06:29,639
going there anyway let's let's spend 30

156
00:06:29,639 --> 00:06:31,770
minutes talking about it in a little bit

157
00:06:31,770 --> 00:06:35,569
of detail so what is it what is

158
00:06:35,569 --> 00:06:39,659
serverless serverless in quotes

159
00:06:39,659 --> 00:06:41,959
it's a loaded term right it could mean

160
00:06:41,959 --> 00:06:43,769
functions which we talk about but it

161
00:06:43,769 --> 00:06:46,019
could just mean like static websites jam

162
00:06:46,019 --> 00:06:49,169
stack things I want to make a point here

163
00:06:49,169 --> 00:06:50,669
that may be controversial but you know

164
00:06:50,669 --> 00:06:53,279
what it's just it's you love me you know

165
00:06:53,279 --> 00:06:57,569
it's fine or whatever I think just the

166
00:06:57,569 --> 00:07:01,199
word serverless is kind of a lie like in

167
00:07:01,199 --> 00:07:03,299
english it's called a misnomer miss as a

168
00:07:03,299 --> 00:07:05,639
not not quite no more as a name now in

169
00:07:05,639 --> 00:07:07,199
software engineering naming things is

170
00:07:07,199 --> 00:07:09,569
hard and I think we may have missed

171
00:07:09,569 --> 00:07:12,839
serverless because I was talking to my

172
00:07:12,839 --> 00:07:14,369
wife about it she's you know she studies

173
00:07:14,369 --> 00:07:16,110
law and isn't very involved with tech

174
00:07:16,110 --> 00:07:18,029
and it sounds like well there's no

175
00:07:18,029 --> 00:07:20,879
servers at all which is a huge lie and

176
00:07:20,879 --> 00:07:23,309
so I'd like I couldn't I'd invite you to

177
00:07:23,309 --> 00:07:30,819
consider this it's a wireless charger

178
00:07:30,829 --> 00:07:33,809
also kind of a lie

179
00:07:33,809 --> 00:07:36,360
and so server this is kind of like that

180
00:07:36,360 --> 00:07:38,639
it means it doesn't mean there are no

181
00:07:38,639 --> 00:07:41,219
servers it means that they're not your

182
00:07:41,219 --> 00:07:43,919
problem you you do what you love you get

183
00:07:43,919 --> 00:07:45,599
to focus on building the apps the

184
00:07:45,599 --> 00:07:47,579
experiences you absolutely love and you

185
00:07:47,579 --> 00:07:49,739
pay Amazon or diet or neckla fire one of

186
00:07:49,739 --> 00:07:51,719
these some amount of money or use their

187
00:07:51,719 --> 00:07:54,059
feet here and your stuffs magically in

188
00:07:54,059 --> 00:07:56,309
the cloud server lists you can quote me

189
00:07:56,309 --> 00:07:58,169
on this server list brings the cloud

190
00:07:58,169 --> 00:08:03,119
down but but why and there's a number of

191
00:08:03,119 --> 00:08:04,919
reasons why server list is so popular

192
00:08:04,919 --> 00:08:05,939
and we'll go through them I think you

193
00:08:05,939 --> 00:08:08,039
know them they're not like rocket

194
00:08:08,039 --> 00:08:11,099
science or mind blowing but as I just

195
00:08:11,099 --> 00:08:12,389
said you can focus on the things you

196
00:08:12,389 --> 00:08:14,129
love you you delegate the responsibility

197
00:08:14,129 --> 00:08:18,329
of servers to someone else so you write

198
00:08:18,329 --> 00:08:20,879
your JavaScript you write your Python if

199
00:08:20,879 --> 00:08:23,489
you're into that yeah and and you put it

200
00:08:23,489 --> 00:08:25,559
in the cloud and the concerns of

201
00:08:25,559 --> 00:08:28,139
provisioning the server setting up the

202
00:08:28,139 --> 00:08:30,899
runtime putting it getting it up all of

203
00:08:30,899 --> 00:08:33,990
that you don't deal with if for some

204
00:08:33,990 --> 00:08:36,360
reason your server dies and you need to

205
00:08:36,360 --> 00:08:38,729
send traffic to a different machine for

206
00:08:38,729 --> 00:08:41,099
whatever reason handled for you that's

207
00:08:41,099 --> 00:08:42,930
already like I can breathe a little bit

208
00:08:42,930 --> 00:08:45,269
easier there were three scale like if

209
00:08:45,269 --> 00:08:47,880
for example you your Square Enix and

210
00:08:47,880 --> 00:08:49,860
there's a huge gaming tournament you

211
00:08:49,860 --> 00:08:50,970
don't have to think about scaling

212
00:08:50,970 --> 00:08:52,710
vertically by adding more

213
00:08:52,710 --> 00:08:55,830
memory or you know Hardware throwing

214
00:08:55,830 --> 00:08:57,030
hardware from you or scaling

215
00:08:57,030 --> 00:08:58,890
horizontally by adding more servers in

216
00:08:58,890 --> 00:09:01,230
your cluster you just doesn't matter you

217
00:09:01,230 --> 00:09:03,180
create the software you know and love

218
00:09:03,180 --> 00:09:05,280
and these are kind of the three tenets

219
00:09:05,280 --> 00:09:07,560
of service but I invite you to consider

220
00:09:07,560 --> 00:09:11,430
one more and that is this one you see

221
00:09:11,430 --> 00:09:13,980
most tech conferences I think it may be

222
00:09:13,980 --> 00:09:15,540
fair to say all tech conferences are on

223
00:09:15,540 --> 00:09:18,780
this spectrum of technology and

224
00:09:18,780 --> 00:09:21,990
community and jeaious Khan family

225
00:09:21,990 --> 00:09:23,460
conferences that I've been to usually

226
00:09:23,460 --> 00:09:25,230
lean a little bit more towards community

227
00:09:25,230 --> 00:09:28,140
and if we're in community we need to

228
00:09:28,140 --> 00:09:29,790
talk accessibility in case that's not

229
00:09:29,790 --> 00:09:32,790
big enough accessibility

230
00:09:32,790 --> 00:09:37,680
I think serverless makes the web so the

231
00:09:37,680 --> 00:09:42,360
cloud so accessible that everybody can

232
00:09:42,360 --> 00:09:45,600
play and this is huge you see I come

233
00:09:45,600 --> 00:09:48,330
from I was born in a country that is

234
00:09:48,330 --> 00:09:52,320
poor it's a developing country India in

235
00:09:52,320 --> 00:09:55,230
case you were wondering I love the food

236
00:09:55,230 --> 00:09:58,650
it's amazing but the country is is is

237
00:09:58,650 --> 00:10:02,520
it's growing right and the prior art of

238
00:10:02,520 --> 00:10:04,530
serverless means you have to have some

239
00:10:04,530 --> 00:10:06,030
type of server means you have to either

240
00:10:06,030 --> 00:10:08,700
get shared hosting if if money's tight

241
00:10:08,700 --> 00:10:10,740
or you get a virtual private server or a

242
00:10:10,740 --> 00:10:13,560
bare metal server now with these there's

243
00:10:13,560 --> 00:10:16,050
money involved and sometimes for some

244
00:10:16,050 --> 00:10:18,480
communities this money is too much it's

245
00:10:18,480 --> 00:10:25,010
not as accessible with lambda serverless

246
00:10:25,010 --> 00:10:28,050
helps these communities see India I

247
00:10:28,050 --> 00:10:29,190
think is home to some of the most

248
00:10:29,190 --> 00:10:30,840
brilliant minds on the face of the

249
00:10:30,840 --> 00:10:33,390
planet and if you need evidence of that

250
00:10:33,390 --> 00:10:34,380
don't you don't have to look very far

251
00:10:34,380 --> 00:10:37,200
CEO of Google CEO of Microsoft Sunil PI

252
00:10:37,200 --> 00:10:38,130
at Facebook

253
00:10:38,130 --> 00:10:40,560
there's react India is happening right

254
00:10:40,560 --> 00:10:42,270
now and there's a whole bunch of them

255
00:10:42,270 --> 00:10:45,360
ready to learn and grow the problem is

256
00:10:45,360 --> 00:10:48,060
the cloud is not accessible because you

257
00:10:48,060 --> 00:10:50,820
pay so much for a server it's

258
00:10:50,820 --> 00:10:54,060
unbelievable lambda has this pricing

259
00:10:54,060 --> 00:10:56,550
model that allows people from these

260
00:10:56,550 --> 00:10:58,770
communities to put stuff in the cloud

261
00:10:58,770 --> 00:11:01,890
you have an idea put it in there and how

262
00:11:01,890 --> 00:11:03,600
that's possible is because lambdas are

263
00:11:03,600 --> 00:11:05,990
functions they're just

264
00:11:05,990 --> 00:11:07,370
there's an excellent talk yesterday on

265
00:11:07,370 --> 00:11:08,930
functional programming their functions

266
00:11:08,930 --> 00:11:10,940
and as we saw functions what do they do

267
00:11:10,940 --> 00:11:14,720
you write them they start they do a job

268
00:11:14,720 --> 00:11:16,850
they run to completion they finish they

269
00:11:16,850 --> 00:11:20,450
return a value that's it in a perfect

270
00:11:20,450 --> 00:11:23,150
world your functions are stateless or as

271
00:11:23,150 --> 00:11:24,650
in they close over their own state they

272
00:11:24,650 --> 00:11:26,180
have no side effects and they're pure

273
00:11:26,180 --> 00:11:28,490
meaning for any given input they give

274
00:11:28,490 --> 00:11:30,020
you the same output without side effects

275
00:11:30,020 --> 00:11:31,490
so they're predictable if they're

276
00:11:31,490 --> 00:11:33,890
predictable they're testable you can

277
00:11:33,890 --> 00:11:35,540
unit test them and make sure they behave

278
00:11:35,540 --> 00:11:37,130
the way you want them to if they're

279
00:11:37,130 --> 00:11:39,500
testable they're scalable meaning you

280
00:11:39,500 --> 00:11:41,090
can run 50 different versions of the

281
00:11:41,090 --> 00:11:42,530
same function they do the same thing and

282
00:11:42,530 --> 00:11:45,500
if they're infinitely scalable you can

283
00:11:45,500 --> 00:11:48,740
go really really really far and so if

284
00:11:48,740 --> 00:11:51,800
the functions are invoked it presents an

285
00:11:51,800 --> 00:11:55,160
entirely different pricing model right

286
00:11:55,160 --> 00:11:57,410
previously you would pay monthly for a

287
00:11:57,410 --> 00:11:59,330
server people use it people don't I

288
00:11:59,330 --> 00:12:02,000
don't care I'm losing 350 euros a month

289
00:12:02,000 --> 00:12:04,460
just paying for a server I'm wildly

290
00:12:04,460 --> 00:12:06,650
unpopular I'm paying for a server I

291
00:12:06,650 --> 00:12:09,290
can't pay my rent but maybe someone will

292
00:12:09,290 --> 00:12:11,720
use it and it'll catch on I'll just keep

293
00:12:11,720 --> 00:12:13,430
hope and pay for this I lose money a

294
00:12:13,430 --> 00:12:17,060
whole year with lambda you pay for each

295
00:12:17,060 --> 00:12:18,920
time your function is invoked and I

296
00:12:18,920 --> 00:12:21,080
think that's a game changer I really do

297
00:12:21,080 --> 00:12:22,910
because if no one uses your thing you

298
00:12:22,910 --> 00:12:24,980
pay nothing and some with some providers

299
00:12:24,980 --> 00:12:27,890
if one person uses it you pay I think

300
00:12:27,890 --> 00:12:31,670
it's like 1/5 millionth of a dollar you

301
00:12:31,670 --> 00:12:33,410
pay for invocations and you pay for

302
00:12:33,410 --> 00:12:34,820
compute time we'll talk more about that

303
00:12:34,820 --> 00:12:37,640
it's it's almost free and if it's almost

304
00:12:37,640 --> 00:12:39,530
free no matter how much money you or

305
00:12:39,530 --> 00:12:41,240
your country has you can put stuff in if

306
00:12:41,240 --> 00:12:42,590
I think that's incredible and so I

307
00:12:42,590 --> 00:12:44,870
thought I could show you some examples

308
00:12:44,870 --> 00:12:47,450
if the internet cooperates if it doesn't

309
00:12:47,450 --> 00:12:50,900
you know we'll see what happens and so

310
00:12:50,900 --> 00:12:52,310
here's an example here's a server this

311
00:12:52,310 --> 00:12:54,980
function in JavaScript because it's J's

312
00:12:54,980 --> 00:12:58,070
convent I'm I'm sending so I have a

313
00:12:58,070 --> 00:13:00,620
request response a set of arguments and

314
00:13:00,620 --> 00:13:02,810
I'm sending through the response a

315
00:13:02,810 --> 00:13:05,470
heading off the current date and time

316
00:13:05,470 --> 00:13:07,970
let's put this in the cloud I want you

317
00:13:07,970 --> 00:13:09,710
to pay attention because this is super

318
00:13:09,710 --> 00:13:11,120
sophisticated to put stuff in the cloud

319
00:13:11,120 --> 00:13:13,100
on server list I'm using a provider as I

320
00:13:13,100 --> 00:13:15,560
there's others but I find this easy and

321
00:13:15,560 --> 00:13:17,840
I just enter one command literally one

322
00:13:17,840 --> 00:13:18,620
command

323
00:13:18,620 --> 00:13:21,680
and it says okay I'm deploying this

324
00:13:21,680 --> 00:13:25,670
function damn it's a van it's done and I

325
00:13:25,670 --> 00:13:27,770
open it and so what happens is that

326
00:13:27,770 --> 00:13:29,480
function is called when I open the

327
00:13:29,480 --> 00:13:31,760
function and it returns a value to the

328
00:13:31,760 --> 00:13:33,500
browser this calls the function and

329
00:13:33,500 --> 00:13:35,090
calls the function if I reload the page

330
00:13:35,090 --> 00:13:37,760
it calls the function every time you see

331
00:13:37,760 --> 00:13:39,740
and so I'm kind of running up a huge

332
00:13:39,740 --> 00:13:42,530
bill here by reloading this page but

333
00:13:42,530 --> 00:13:44,150
it's not very much I'm sure I can afford

334
00:13:44,150 --> 00:13:45,530
it I'm actually on their free tier so

335
00:13:45,530 --> 00:13:48,140
I'm sure I can afford it but another

336
00:13:48,140 --> 00:13:49,460
case for server lists if you want to get

337
00:13:49,460 --> 00:13:50,870
creative is this thing which will

338
00:13:50,870 --> 00:13:52,460
automatically give you a randomly

339
00:13:52,460 --> 00:13:55,160
generated thinking emoji on every

340
00:13:55,160 --> 00:13:57,740
invocation this one apparently is huge

341
00:13:57,740 --> 00:13:59,510
but every time you reload the page you

342
00:13:59,510 --> 00:14:01,670
just get a new one because the function

343
00:14:01,670 --> 00:14:04,700
is called on many I could do this all

344
00:14:04,700 --> 00:14:08,510
day okay moving on um so what we saw was

345
00:14:08,510 --> 00:14:11,690
cool I don't know why my doc is showing

346
00:14:11,690 --> 00:14:14,210
like Apple if you're watching please

347
00:14:14,210 --> 00:14:18,950
quality the pricing for that though is

348
00:14:18,950 --> 00:14:21,680
that much you pay for each time it's

349
00:14:21,680 --> 00:14:23,780
invoked you pay that much and you pay

350
00:14:23,780 --> 00:14:26,270
for the amount of gigabyte seconds you

351
00:14:26,270 --> 00:14:28,280
use and and this is on Amazon Web

352
00:14:28,280 --> 00:14:30,680
service that's it that's crazy but I

353
00:14:30,680 --> 00:14:32,660
spend a lot of time in a lot of tech

354
00:14:32,660 --> 00:14:34,130
conferences talking to a lot of people

355
00:14:34,130 --> 00:14:36,650
about things about server list about CSS

356
00:14:36,650 --> 00:14:39,410
about life in love and Romeo and Juliet

357
00:14:39,410 --> 00:14:42,050
whatever and as with everything there

358
00:14:42,050 --> 00:14:45,230
are concerns can it be that good is it

359
00:14:45,230 --> 00:14:48,380
too good to be true the two big concerns

360
00:14:48,380 --> 00:14:51,290
I hear often are acceptance of service

361
00:14:51,290 --> 00:14:52,910
so a traditional problem with servers is

362
00:14:52,910 --> 00:14:54,560
denial of service you get hit with too

363
00:14:54,560 --> 00:14:56,360
many requests and then your server is

364
00:14:56,360 --> 00:14:58,400
like I can't I can't deal with it I quit

365
00:14:58,400 --> 00:15:00,860
and and it denies service but would

366
00:15:00,860 --> 00:15:03,050
server list since it scales up the other

367
00:15:03,050 --> 00:15:05,090
side of the problem is true if you pay

368
00:15:05,090 --> 00:15:07,400
for each time your URL is accessed

369
00:15:07,400 --> 00:15:09,560
someone could just like wild crew and

370
00:15:09,560 --> 00:15:11,420
then fetch you every time you know what

371
00:15:11,420 --> 00:15:12,920
I mean and then they just send a request

372
00:15:12,920 --> 00:15:14,900
after request and then you get a bill of

373
00:15:14,900 --> 00:15:17,480
two million dollars how do you deal with

374
00:15:17,480 --> 00:15:20,600
that number two if you say pages if you

375
00:15:20,600 --> 00:15:21,680
say our lamb doesn't need to be

376
00:15:21,680 --> 00:15:24,650
stateless and pure but I need to say I

377
00:15:24,650 --> 00:15:27,410
need a database how do I do this we'll

378
00:15:27,410 --> 00:15:29,090
talk about those let's start with

379
00:15:29,090 --> 00:15:32,000
acceptance of service

380
00:15:32,000 --> 00:15:34,070
go down a hypothetical journey okay

381
00:15:34,070 --> 00:15:38,780
let's say your worst enemy sets up a

382
00:15:38,780 --> 00:15:41,560
network of a hundred thousand bucks okay

383
00:15:41,560 --> 00:15:44,780
and they just like keep hitting your

384
00:15:44,780 --> 00:15:47,720
server for sixty minutes one request per

385
00:15:47,720 --> 00:15:50,300
second okay that is a total of three

386
00:15:50,300 --> 00:15:52,220
hundred and sixty million in an hour

387
00:15:52,220 --> 00:15:55,280
lambda invocations big numbers big and

388
00:15:55,280 --> 00:15:57,290
scary it's even physically big on the

389
00:15:57,290 --> 00:16:01,610
screen so that's a lot let's add to the

390
00:16:01,610 --> 00:16:03,170
equation let's say your function takes

391
00:16:03,170 --> 00:16:05,060
two hundred milliseconds of compute time

392
00:16:05,060 --> 00:16:08,240
and uses a gigabyte of memory okay this

393
00:16:08,240 --> 00:16:10,130
is these are just factors for a little

394
00:16:10,130 --> 00:16:13,100
experiment know what Amazon Web Services

395
00:16:13,100 --> 00:16:14,960
with lambda this is this is what you

396
00:16:14,960 --> 00:16:18,740
would pay it's a two digit number for

397
00:16:18,740 --> 00:16:21,860
invocation seventy two dollars and since

398
00:16:21,860 --> 00:16:23,120
it's one gigabyte of memory over two

399
00:16:23,120 --> 00:16:24,230
hundred seconds

400
00:16:24,230 --> 00:16:27,110
it's 1024 dollars all of that to say in

401
00:16:27,110 --> 00:16:30,530
an attack at that scale we pay less than

402
00:16:30,530 --> 00:16:34,400
fifteen hundred dollars you would pay

403
00:16:34,400 --> 00:16:36,820
that anyway on virtual on a like

404
00:16:36,820 --> 00:16:39,980
previously server based solution if not

405
00:16:39,980 --> 00:16:42,589
more so this is an extreme case and I

406
00:16:42,589 --> 00:16:43,790
think if you're an early stage startup

407
00:16:43,790 --> 00:16:46,430
or a late stage startup or whatever

408
00:16:46,430 --> 00:16:50,390
that's within reach and if you're

409
00:16:50,390 --> 00:16:51,860
attacked at that scale you're probably

410
00:16:51,860 --> 00:16:53,510
famous enough to afford it

411
00:16:53,510 --> 00:16:57,830
maybe and there's at their services

412
00:16:57,830 --> 00:16:58,940
there's something called Amazon Cloud

413
00:16:58,940 --> 00:17:02,000
watch that will kind of watch your thing

414
00:17:02,000 --> 00:17:03,740
and warn you if you're getting too much

415
00:17:03,740 --> 00:17:05,420
crap so there are measures you can

416
00:17:05,420 --> 00:17:07,370
implement to prevent this I think that's

417
00:17:07,370 --> 00:17:11,000
pretty okay second problem the need for

418
00:17:11,000 --> 00:17:14,150
state I need state we all need state

419
00:17:14,150 --> 00:17:15,500
that kind of can't have an app for that

420
00:17:15,500 --> 00:17:18,770
state how do we do this every time I

421
00:17:18,770 --> 00:17:20,060
talk about server list at someone I

422
00:17:20,060 --> 00:17:22,430
don't know why but the the thinking goes

423
00:17:22,430 --> 00:17:24,020
to like okay everything needs to be a

424
00:17:24,020 --> 00:17:26,150
function everything everything's pure

425
00:17:26,150 --> 00:17:27,650
everything like we love this in

426
00:17:27,650 --> 00:17:29,030
JavaScript like someone says something I

427
00:17:29,030 --> 00:17:30,560
would got to be really move everything

428
00:17:30,560 --> 00:17:31,490
to Gatsby

429
00:17:31,490 --> 00:17:33,440
someone says something about react hooks

430
00:17:33,440 --> 00:17:35,210
were like hooks everywhere classes are

431
00:17:35,210 --> 00:17:38,930
evil you know like everything doesn't

432
00:17:38,930 --> 00:17:42,770
need to be a function okay use it in

433
00:17:42,770 --> 00:17:45,680
moderation use it with consideration

434
00:17:45,680 --> 00:17:48,200
but perhaps you have a MongoDB Atlas or

435
00:17:48,200 --> 00:17:50,630
a sewer database on Postgres the graphic

436
00:17:50,630 --> 00:17:53,450
API somewhere great maybe there's a

437
00:17:53,450 --> 00:17:55,280
place for your function at the API layer

438
00:17:55,280 --> 00:17:57,860
maybe there isn't but not everything

439
00:17:57,860 --> 00:17:58,970
needs to be from yes you can have your

440
00:17:58,970 --> 00:18:01,600
state you can even eat it if you want

441
00:18:01,600 --> 00:18:03,770
you didn't understand that that's okay

442
00:18:03,770 --> 00:18:06,980
uh-huh not everything needs to be a

443
00:18:06,980 --> 00:18:10,270
function and so that brings me to the

444
00:18:10,270 --> 00:18:14,150
the study part of this talk was to

445
00:18:14,150 --> 00:18:16,550
discuss briefly a study that I did

446
00:18:16,550 --> 00:18:18,560
literally for science I have to preface

447
00:18:18,560 --> 00:18:21,080
this multiple times by saying don't do

448
00:18:21,080 --> 00:18:22,820
this it's what it's one of those things

449
00:18:22,820 --> 00:18:25,430
that you do because you're curious don't

450
00:18:25,430 --> 00:18:28,130
do it in production there's better ways

451
00:18:28,130 --> 00:18:32,540
to do this Jam stack is a good way other

452
00:18:32,540 --> 00:18:35,260
ways to but anyway I wanted to try out

453
00:18:35,260 --> 00:18:39,950
serverless button but like with UI so it

454
00:18:39,950 --> 00:18:41,810
took some frameworks and did some stuff

455
00:18:41,810 --> 00:18:44,770
with lambdas and we'll see some results

456
00:18:44,770 --> 00:18:48,650
but how do you do like a UI as a far as

457
00:18:48,650 --> 00:18:52,370
you know so you have UI and you want to

458
00:18:52,370 --> 00:18:58,400
put it in the lambda but this is your UI

459
00:18:58,400 --> 00:19:04,170
of function or is it like divs and stuff

460
00:19:04,180 --> 00:19:07,610
yeah I've heard actually no wait a

461
00:19:07,610 --> 00:19:09,410
second new UI is a function of your

462
00:19:09,410 --> 00:19:11,540
state like this is like the e equals MC

463
00:19:11,540 --> 00:19:13,880
square of UI development isn't it like u

464
00:19:13,880 --> 00:19:16,220
UI is a function of your okay

465
00:19:16,220 --> 00:19:19,220
I didn't see that hmm wait a second that

466
00:19:19,220 --> 00:19:21,850
means you I can just be a lambda whoa

467
00:19:21,850 --> 00:19:25,670
okay cool let's try it let's write like

468
00:19:25,670 --> 00:19:28,130
react dong render to string on a on a

469
00:19:28,130 --> 00:19:29,810
lemon and that's exactly what we did

470
00:19:29,810 --> 00:19:35,330
we server rendered by UI as a server

471
00:19:35,330 --> 00:19:36,950
list lambda so I guess that's that's

472
00:19:36,950 --> 00:19:40,150
serverless server-side rendering is that

473
00:19:40,150 --> 00:19:45,460
SSSR us s no don't make that joke hmm

474
00:19:45,460 --> 00:19:49,040
seriously this study anyway the study we

475
00:19:49,040 --> 00:19:52,670
we looked at some leading UI frameworks

476
00:19:52,670 --> 00:19:56,930
and we looked at pre-act react lit idml

477
00:19:56,930 --> 00:19:58,490
that's the polymer icon

478
00:19:58,490 --> 00:20:02,600
don't be offended view and vie html5

479
00:20:02,600 --> 00:20:05,270
frameworks and what we wanted to do was

480
00:20:05,270 --> 00:20:09,350
we wanted to build a reddit phone and

481
00:20:09,350 --> 00:20:11,960
this is just a clone of reddit it uses a

482
00:20:11,960 --> 00:20:13,760
flat file as the backend so we don't

483
00:20:13,760 --> 00:20:15,380
really talk to the reddit API and that's

484
00:20:15,380 --> 00:20:17,690
to reduce latency and and standard

485
00:20:17,690 --> 00:20:19,580
deviation on your benchmark and the

486
00:20:19,580 --> 00:20:20,780
reason we chose server-side rendering

487
00:20:20,780 --> 00:20:21,980
there was an excellent talk yesterday

488
00:20:21,980 --> 00:20:23,929
actually by Surma and Jake about they

489
00:20:23,929 --> 00:20:25,100
talked a little bit about server-side

490
00:20:25,100 --> 00:20:26,660
rendering it's just better if you're not

491
00:20:26,660 --> 00:20:28,550
server rendering I think it can be

492
00:20:28,550 --> 00:20:31,120
better in many cases partly because

493
00:20:31,120 --> 00:20:33,470
everything's delivered to your users in

494
00:20:33,470 --> 00:20:36,080
one network hop like they visit your

495
00:20:36,080 --> 00:20:37,429
page BAM they get exactly what they want

496
00:20:37,429 --> 00:20:39,530
there is no like oh my JavaScript bundle

497
00:20:39,530 --> 00:20:41,150
is loading now like some of you have

498
00:20:41,150 --> 00:20:42,590
seen these experiences on the web where

499
00:20:42,590 --> 00:20:43,910
you get a shell of a nap and then

500
00:20:43,910 --> 00:20:46,280
spinners immediately server-side

501
00:20:46,280 --> 00:20:48,100
rendering this gives them what they need

502
00:20:48,100 --> 00:20:50,570
it's also better for you in terms of

503
00:20:50,570 --> 00:20:52,880
search engine marketing I heard at I

504
00:20:52,880 --> 00:20:54,800
think at Google i/o actually that it's

505
00:20:54,800 --> 00:20:56,510
significantly harder for search engines

506
00:20:56,510 --> 00:21:00,140
to index these things as well users

507
00:21:00,140 --> 00:21:03,170
don't like spinners but one benefit you

508
00:21:03,170 --> 00:21:04,580
get actually with serverless and

509
00:21:04,580 --> 00:21:06,559
server-side rendering again probably not

510
00:21:06,559 --> 00:21:09,170
a good idea is you get analytics out of

511
00:21:09,170 --> 00:21:12,410
the box so imagine you have a blog and

512
00:21:12,410 --> 00:21:15,950
each articles deployed as a lambda so if

513
00:21:15,950 --> 00:21:18,020
from article a your server list bill is

514
00:21:18,020 --> 00:21:20,480
$2 an article be your server list bill

515
00:21:20,480 --> 00:21:23,030
is $200 you kind of know what kind of

516
00:21:23,030 --> 00:21:24,710
content to be producing from there I

517
00:21:24,710 --> 00:21:29,179
thought that was interesting but but

518
00:21:29,179 --> 00:21:30,620
regardless so this is what we wanted to

519
00:21:30,620 --> 00:21:36,440
build and we wanted to track three key

520
00:21:36,440 --> 00:21:39,500
metrics metric number one is the cost of

521
00:21:39,500 --> 00:21:41,510
booting the function cold we'll talk a

522
00:21:41,510 --> 00:21:42,620
little bit more about this because it's

523
00:21:42,620 --> 00:21:44,500
a little bit exclusive to serverless

524
00:21:44,500 --> 00:21:46,880
number two is the lamina size or the

525
00:21:46,880 --> 00:21:48,470
package size this is a concept you're

526
00:21:48,470 --> 00:21:49,940
aware of and number three is the

527
00:21:49,940 --> 00:21:51,590
throughput I'm how many requests per

528
00:21:51,590 --> 00:21:53,510
second can this handle but let's talk a

529
00:21:53,510 --> 00:21:56,450
little bit about cold boot with lambdas

530
00:21:56,450 --> 00:21:58,940
how they execute is there these

531
00:21:58,940 --> 00:22:01,280
ephemeral containers like somebody

532
00:22:01,280 --> 00:22:04,190
accesses your URL and then a container

533
00:22:04,190 --> 00:22:07,250
spins up it npm installs JavaScript

534
00:22:07,250 --> 00:22:09,260
ecosystem NPM installs your dependencies

535
00:22:09,260 --> 00:22:12,050
gets ready then execute the

536
00:22:12,050 --> 00:22:14,030
function with importing your npm modules

537
00:22:14,030 --> 00:22:16,340
returns value there's a bit of ceremony

538
00:22:16,340 --> 00:22:18,860
there and that ceremony can take time

539
00:22:18,860 --> 00:22:20,660
that's called a cold boot this is best

540
00:22:20,660 --> 00:22:23,840
visualized with this graphic here so a

541
00:22:23,840 --> 00:22:25,790
request comes in and it downloads your

542
00:22:25,790 --> 00:22:27,920
code and boots and then your code runs

543
00:22:27,920 --> 00:22:31,160
once your code runs every the function

544
00:22:31,160 --> 00:22:33,140
is considered hot or warm it's ready to

545
00:22:33,140 --> 00:22:35,150
serve more requests and it stays hot for

546
00:22:35,150 --> 00:22:38,540
a while but after a while they wind down

547
00:22:38,540 --> 00:22:43,070
and go cold again there's a typo in the

548
00:22:43,070 --> 00:22:47,030
text I hope you don't see it and after a

549
00:22:47,030 --> 00:22:48,380
while late so that's kind of how cool

550
00:22:48,380 --> 00:22:49,760
boot work so we wanted to test which

551
00:22:49,760 --> 00:22:51,920
framework required the most resources to

552
00:22:51,920 --> 00:22:55,940
start let's talk briefly about the code

553
00:22:55,940 --> 00:22:58,940
involved the code for all of the reddit

554
00:22:58,940 --> 00:23:03,530
examples would react react and the HTML

555
00:23:03,530 --> 00:23:07,010
I believe was the same code exactly the

556
00:23:07,010 --> 00:23:09,800
same code how do you do that well using

557
00:23:09,800 --> 00:23:11,810
this thing how many of you have heard of

558
00:23:11,810 --> 00:23:15,110
hyper script I can count on my fingers

559
00:23:15,110 --> 00:23:18,140
like five hyper script is kind of just a

560
00:23:18,140 --> 00:23:20,450
function signature and it's the function

561
00:23:20,450 --> 00:23:22,520
signature of something year may be more

562
00:23:22,520 --> 00:23:25,160
familiar with react create element it

563
00:23:25,160 --> 00:23:26,990
takes the tag of the element the props

564
00:23:26,990 --> 00:23:29,510
and the children and pre-act and the

565
00:23:29,510 --> 00:23:31,250
HTML they implement this interface as

566
00:23:31,250 --> 00:23:33,740
well and so what we ended up doing was

567
00:23:33,740 --> 00:23:35,480
you just kind of assign h to one of

568
00:23:35,480 --> 00:23:37,880
these three and the rest of the code

569
00:23:37,880 --> 00:23:39,110
stays exactly the same

570
00:23:39,110 --> 00:23:43,040
it was really cool for view and lit HTML

571
00:23:43,040 --> 00:23:44,210
we had to take a different strategy

572
00:23:44,210 --> 00:23:45,560
because with view you work with view

573
00:23:45,560 --> 00:23:49,340
instances but we ended up copying the

574
00:23:49,340 --> 00:23:51,110
HTML string rendered and just

575
00:23:51,110 --> 00:23:53,390
interpolating with some view there it's

576
00:23:53,390 --> 00:23:55,280
important to note here let HTML doesn't

577
00:23:55,280 --> 00:23:57,890
have a note implementation I don't

578
00:23:57,890 --> 00:24:02,210
believe so we used a fork and so the

579
00:24:02,210 --> 00:24:04,100
moment we've all been waiting for

580
00:24:04,100 --> 00:24:06,980
the talk is almost over no we're gonna

581
00:24:06,980 --> 00:24:10,550
look at the results of this briefly but

582
00:24:10,550 --> 00:24:12,290
again as I said in the beginning there's

583
00:24:12,290 --> 00:24:14,900
better what do not have like a blog

584
00:24:14,900 --> 00:24:16,790
that's all lambdas I'm not sure that's

585
00:24:16,790 --> 00:24:19,880
the best way to do it the but if we're

586
00:24:19,880 --> 00:24:22,040
talking about the fastest the best

587
00:24:22,040 --> 00:24:24,320
framework on service the answer is very

588
00:24:24,320 --> 00:24:25,220
much no don't

589
00:24:25,220 --> 00:24:27,350
do it don't do it really just use the

590
00:24:27,350 --> 00:24:29,990
platform it's amazing seriously you can

591
00:24:29,990 --> 00:24:31,870
even use the jam stack or like vanilla

592
00:24:31,870 --> 00:24:33,830
seriously like just don't don't even

593
00:24:33,830 --> 00:24:34,720
anyway

594
00:24:34,720 --> 00:24:39,260
have I made my point but the results

595
00:24:39,260 --> 00:24:40,850
regardless in case you're curious about

596
00:24:40,850 --> 00:24:47,860
numbers are V hTML is really fast and

597
00:24:47,860 --> 00:24:50,659
you just write JSX it looks just like

598
00:24:50,659 --> 00:24:52,370
react but what ends up happening is it

599
00:24:52,370 --> 00:24:55,760
doesn't have a virtual Dom and that's

600
00:24:55,760 --> 00:24:57,500
why it's fast so what it does it takes

601
00:24:57,500 --> 00:25:00,980
your like JSX and turns it into a string

602
00:25:00,980 --> 00:25:03,409
of HTML that you can then return from

603
00:25:03,409 --> 00:25:06,289
your lambda and because of this super

604
00:25:06,289 --> 00:25:08,870
fast and super light coming in at 28

605
00:25:08,870 --> 00:25:11,960
kilobytes pre-act naturally was the

606
00:25:11,960 --> 00:25:13,820
second in fact if you chose to do this

607
00:25:13,820 --> 00:25:17,030
for Reno for science you could serve a

608
00:25:17,030 --> 00:25:19,100
render the HTML hydrate with pre-act and

609
00:25:19,100 --> 00:25:20,750
you have a really fast and pleasant

610
00:25:20,750 --> 00:25:23,360
experience unfortunately coming up at

611
00:25:23,360 --> 00:25:27,020
the rear was view which i don't think is

612
00:25:27,020 --> 00:25:29,510
necessarily a bad thing the purpose of

613
00:25:29,510 --> 00:25:32,299
this study kind of like the purpose of

614
00:25:32,299 --> 00:25:35,600
this talk is to get us a little bit more

615
00:25:35,600 --> 00:25:37,220
serious about service right is to get us

616
00:25:37,220 --> 00:25:38,750
to think about serverless a bit more

617
00:25:38,750 --> 00:25:42,650
it's not to bash view what is to think

618
00:25:42,650 --> 00:25:44,630
about service and so I was actually

619
00:25:44,630 --> 00:25:46,929
quite I feel like my work on this was

620
00:25:46,929 --> 00:25:49,580
was how do you say it was vindicated was

621
00:25:49,580 --> 00:25:53,450
was successful because the author of

622
00:25:53,450 --> 00:25:57,320
view noticed the study and responded

623
00:25:57,320 --> 00:25:59,780
with maybe will revisit this only

624
00:25:59,780 --> 00:26:02,090
optimized for service in the future of

625
00:26:02,090 --> 00:26:04,100
view and this is the goal I think

626
00:26:04,100 --> 00:26:06,650
because as Nadder said it's so

627
00:26:06,650 --> 00:26:09,230
eloquently service is the future because

628
00:26:09,230 --> 00:26:11,059
it's the future I think we all should

629
00:26:11,059 --> 00:26:12,679
start thinking and optimizing for

630
00:26:12,679 --> 00:26:16,820
service in the new future with that let

631
00:26:16,820 --> 00:26:19,700
us land this plane there's been a

632
00:26:19,700 --> 00:26:21,860
beautiful journey I enjoy talking I

633
00:26:21,860 --> 00:26:23,539
could talk all day I'm not sure if you

634
00:26:23,539 --> 00:26:25,760
could listen all day so we'll we'll wrap

635
00:26:25,760 --> 00:26:29,870
it up we talked about how serverless is

636
00:26:29,870 --> 00:26:32,450
the future we looked at how coca-cola

637
00:26:32,450 --> 00:26:34,429
square-enix others are really

638
00:26:34,429 --> 00:26:36,590
benefitting for serverless we looked at

639
00:26:36,590 --> 00:26:38,690
how community matters see I

640
00:26:38,690 --> 00:26:40,910
like some of you may not get the weight

641
00:26:40,910 --> 00:26:42,950
the potential of service to be truly

642
00:26:42,950 --> 00:26:46,160
legendary because for most of you you do

643
00:26:46,160 --> 00:26:49,940
your job and get push and your ops team

644
00:26:49,940 --> 00:26:53,150
puts it in the cloud your ops team

645
00:26:53,150 --> 00:26:56,900
though may be losing sleep your company

646
00:26:56,900 --> 00:27:00,130
may be spending more than necessary

647
00:27:00,130 --> 00:27:02,900
maybe it doesn't directly impact you but

648
00:27:02,900 --> 00:27:06,380
I truly believe serverless has a

649
00:27:06,380 --> 00:27:09,980
positive impact on your company and your

650
00:27:09,980 --> 00:27:11,930
team but by and large the positive

651
00:27:11,930 --> 00:27:15,320
impact as I mentioned is in poor

652
00:27:15,320 --> 00:27:18,230
communities financially it brings the

653
00:27:18,230 --> 00:27:20,240
cloud down it makes it respond it makes

654
00:27:20,240 --> 00:27:23,090
it available to the rest of us and I

655
00:27:23,090 --> 00:27:24,920
truly believe through these legendary

656
00:27:24,920 --> 00:27:27,590
lambdas we're going to see the world

657
00:27:27,590 --> 00:27:29,870
change for the better we're gonna see

658
00:27:29,870 --> 00:27:32,240
India develop and other nations like it

659
00:27:32,240 --> 00:27:35,320
develop faster that lead to human

660
00:27:35,320 --> 00:27:37,540
satisfaction happiness joy and

661
00:27:37,540 --> 00:27:39,410
flourishing and with that I want to say

662
00:27:39,410 --> 00:27:42,590
thank you very much for your time and

663
00:27:42,590 --> 00:27:46,659
for listening

