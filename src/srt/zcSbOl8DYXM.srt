1
00:00:12,860 --> 00:00:15,840

thank you very much yeah my name is

2
00:00:15,840 --> 00:00:19,880
David Flynn I am from the United Kingdom

3
00:00:19,880 --> 00:00:22,890
and I moved to Iceland one and a half

4
00:00:22,890 --> 00:00:26,550
years ago to live here and as a typical

5
00:00:26,550 --> 00:00:29,570
developer the first thing I did was

6
00:00:29,570 --> 00:00:31,800
thought right I'm gonna have to try to

7
00:00:31,800 --> 00:00:33,690
learn Icelandic how am I gonna do this

8
00:00:33,690 --> 00:00:37,170
should I a spend lots of time studying

9
00:00:37,170 --> 00:00:38,489
with books in a normal way that you

10
00:00:38,489 --> 00:00:40,950
learn things well should I instead build

11
00:00:40,950 --> 00:00:43,109
a website spend hundreds of hours on

12
00:00:43,109 --> 00:00:45,090
that avoiding the problem and try and

13
00:00:45,090 --> 00:00:46,199
build a website to help people learn

14
00:00:46,199 --> 00:00:48,690
Icelandic so obviously I chose option B

15
00:00:48,690 --> 00:00:50,789
so I'm going to talk to you about a

16
00:00:50,789 --> 00:00:52,469
project that I've been working on in my

17
00:00:52,469 --> 00:00:55,410
free time to do with helping people

18
00:00:55,410 --> 00:00:58,140
learn Icelandic but really this is just

19
00:00:58,140 --> 00:00:59,399
an example project because I want to

20
00:00:59,399 --> 00:01:02,399
talk about using docker how how can we

21
00:01:02,399 --> 00:01:04,410
use docker to help us with our

22
00:01:04,410 --> 00:01:06,450
development workflow and then all the

23
00:01:06,450 --> 00:01:08,160
way through to production so how many

24
00:01:08,160 --> 00:01:11,190
people are using docker for production

25
00:01:11,190 --> 00:01:13,260
work at the moment I have companies

26
00:01:13,260 --> 00:01:14,579
where they're running their Production

27
00:01:14,579 --> 00:01:16,650
apps okay lots of people and how many

28
00:01:16,650 --> 00:01:18,960
people are using docker everyday in

29
00:01:18,960 --> 00:01:22,560
development yeah a lot less and this is

30
00:01:22,560 --> 00:01:23,939
this is kind of why I want to talk about

31
00:01:23,939 --> 00:01:26,100
is there until now it's been really

32
00:01:26,100 --> 00:01:28,950
difficult to use docker for development

33
00:01:28,950 --> 00:01:30,780
there's been a lot of problems with how

34
00:01:30,780 --> 00:01:33,119
many people have used boot to docker the

35
00:01:33,119 --> 00:01:35,549
kind of old way and how many people

36
00:01:35,549 --> 00:01:37,740
enjoyed the experience of using booted

37
00:01:37,740 --> 00:01:40,829
docker yeah I was there we'll talk about

38
00:01:40,829 --> 00:01:43,409
some of the problems with that and it's

39
00:01:43,409 --> 00:01:45,270
good news basically everything is fixed

40
00:01:45,270 --> 00:01:48,780
so just to give you a quick overview

41
00:01:48,780 --> 00:01:50,189
with the application I'm going to talk

42
00:01:50,189 --> 00:01:54,180
about it's just an example but it's very

43
00:01:54,180 --> 00:01:56,159
kind of standard I've got a node.js

44
00:01:56,159 --> 00:01:58,079
back-end that's going to serve our data

45
00:01:58,079 --> 00:02:01,020
in JSON format and then we have a react

46
00:02:01,020 --> 00:02:03,479
app that just renders that data on the

47
00:02:03,479 --> 00:02:05,700
screen so hopefully something that

48
00:02:05,700 --> 00:02:06,990
you'll be familiar with and something

49
00:02:06,990 --> 00:02:08,940
that you can translate to whatever your

50
00:02:08,940 --> 00:02:13,260
application looks like so what's changed

51
00:02:13,260 --> 00:02:16,170
what makes now the now the right time to

52
00:02:16,170 --> 00:02:19,110
use docker in development so basically

53
00:02:19,110 --> 00:02:21,000
they've produced some new apps docker

54
00:02:21,000 --> 00:02:23,940
for Mac and dock for Windows

55
00:02:23,940 --> 00:02:27,720
and these these work differently to the

56
00:02:27,720 --> 00:02:29,670
old one so the old version was using

57
00:02:29,670 --> 00:02:32,400
virtual machines you had docker running

58
00:02:32,400 --> 00:02:35,640
in a virtual machine and it meant that

59
00:02:35,640 --> 00:02:37,410
you had to have some special IP

60
00:02:37,410 --> 00:02:39,240
addresses to connect to it you had a few

61
00:02:39,240 --> 00:02:40,500
quirks because it was running inside

62
00:02:40,500 --> 00:02:44,100
VirtualBox so these new apps change

63
00:02:44,100 --> 00:02:46,800
everything these are built on they run

64
00:02:46,800 --> 00:02:48,600
on hypervisors they're not running

65
00:02:48,600 --> 00:02:50,400
inside virtual machines using something

66
00:02:50,400 --> 00:02:51,900
called hype kit which is an abstraction

67
00:02:51,900 --> 00:02:53,720
layer to create cross-platform

68
00:02:53,720 --> 00:02:55,650
hypervisors which is probably the most

69
00:02:55,650 --> 00:02:58,070
crazy thing I've ever heard

70
00:02:58,070 --> 00:03:01,050
the docker command is now available

71
00:03:01,050 --> 00:03:02,700
system-wide so you don't have to have

72
00:03:02,700 --> 00:03:04,410
this special docker terminal which is

73
00:03:04,410 --> 00:03:06,840
the old way of doing it just you can run

74
00:03:06,840 --> 00:03:08,400
docker as a program on the command line

75
00:03:08,400 --> 00:03:10,700
from anywhere like a normal application

76
00:03:10,700 --> 00:03:13,170
and the containers are all bound to

77
00:03:13,170 --> 00:03:14,430
localhost you don't have this special

78
00:03:14,430 --> 00:03:16,080
docker machine IP that you connect to

79
00:03:16,080 --> 00:03:17,670
anymore you can just access your

80
00:03:17,670 --> 00:03:19,710
containers very similar to if you just

81
00:03:19,710 --> 00:03:21,660
ran your node application with node

82
00:03:21,660 --> 00:03:22,860
you'll be able to access it from

83
00:03:22,860 --> 00:03:25,200
localhost same now if you're running in

84
00:03:25,200 --> 00:03:27,090
a docker container it's available from

85
00:03:27,090 --> 00:03:28,730
localhost

86
00:03:28,730 --> 00:03:30,660
the other thing that I'm going to fix

87
00:03:30,660 --> 00:03:32,190
which is what really what sorry the

88
00:03:32,190 --> 00:03:33,180
other thing that I'm going to talk about

89
00:03:33,180 --> 00:03:35,820
that they fixed which really makes the

90
00:03:35,820 --> 00:03:38,430
development story work is that before

91
00:03:38,430 --> 00:03:40,140
there was a big problem with fire

92
00:03:40,140 --> 00:03:41,790
Watchers like if you if your files

93
00:03:41,790 --> 00:03:44,100
changed it it didn't get the

94
00:03:44,100 --> 00:03:45,600
notification that that file had changed

95
00:03:45,600 --> 00:03:47,070
that's like the file system event that

96
00:03:47,070 --> 00:03:49,620
the father changed because the files

97
00:03:49,620 --> 00:03:51,360
have been like copied into this virtual

98
00:03:51,360 --> 00:03:53,310
machine but now they're using a

99
00:03:53,310 --> 00:03:54,739
hypervisor they can use the real files

100
00:03:54,739 --> 00:04:01,080
and everything worse expected so what do

101
00:04:01,080 --> 00:04:02,810
we need to do to run our application

102
00:04:02,810 --> 00:04:04,380
inside docker

103
00:04:04,380 --> 00:04:06,209
so the first thing I'm going to do is

104
00:04:06,209 --> 00:04:08,700
write a docker file who has written the

105
00:04:08,700 --> 00:04:11,820
docker file before okay great so about

106
00:04:11,820 --> 00:04:13,200
half people have written doc forum

107
00:04:13,200 --> 00:04:15,660
before so I'm just going to go through

108
00:04:15,660 --> 00:04:18,120
like how to write docker file for a node

109
00:04:18,120 --> 00:04:21,120
no GS app and I'm gonna go through line

110
00:04:21,120 --> 00:04:23,640
by line to explain specifically why I do

111
00:04:23,640 --> 00:04:26,850
it in this particular way and hopefully

112
00:04:26,850 --> 00:04:30,030
that will reveal a little bit about how

113
00:04:30,030 --> 00:04:31,430
docker works

114
00:04:31,430 --> 00:04:34,560
so all docker images are based on a

115
00:04:34,560 --> 00:04:36,180
starting image so this is what this

116
00:04:36,180 --> 00:04:37,340
first line is

117
00:04:37,340 --> 00:04:42,210
node 6.4 it's you can specify the exact

118
00:04:42,210 --> 00:04:43,500
version that you want which is nice that

119
00:04:43,500 --> 00:04:45,300
gives us a nice repeatable builds and

120
00:04:45,300 --> 00:04:48,330
that means that when a new version of

121
00:04:48,330 --> 00:04:49,470
know comes along we're still going to be

122
00:04:49,470 --> 00:04:51,240
targeting the same build so it's really

123
00:04:51,240 --> 00:04:53,130
nice for Pete ability means that if we

124
00:04:53,130 --> 00:04:54,630
try and build this in a year's time when

125
00:04:54,630 --> 00:04:58,620
we're on node 67 then well it will

126
00:04:58,620 --> 00:05:01,410
hopefully still work you also noticed

127
00:05:01,410 --> 00:05:05,310
that it just says from note so normally

128
00:05:05,310 --> 00:05:06,300
your docker images would have a

129
00:05:06,300 --> 00:05:08,760
namespace so it'd be like for my images

130
00:05:08,760 --> 00:05:12,000
it would be from David Blanton / talent

131
00:05:12,000 --> 00:05:14,370
API these ones don't have a namespace

132
00:05:14,370 --> 00:05:15,540
and that means that they're official

133
00:05:15,540 --> 00:05:17,300
images these are images that have been

134
00:05:17,300 --> 00:05:20,760
maintained by someone from the node

135
00:05:20,760 --> 00:05:23,310
Foundation and they've been kind of

136
00:05:23,310 --> 00:05:26,640
supplied as official images so it's nice

137
00:05:26,640 --> 00:05:28,680
to have node configured by someone who

138
00:05:28,680 --> 00:05:30,240
works at node and then you can just use

139
00:05:30,240 --> 00:05:31,770
it and hopefully everything works as

140
00:05:31,770 --> 00:05:36,030
expected this is how you set an

141
00:05:36,030 --> 00:05:38,550
environment variable in a docker file

142
00:05:38,550 --> 00:05:41,670
and here I'm just changing the NPM

143
00:05:41,670 --> 00:05:43,440
config log level to warn because the

144
00:05:43,440 --> 00:05:45,360
default is HTTP it will print out every

145
00:05:45,360 --> 00:05:47,010
HTTP request that it makes which is

146
00:05:47,010 --> 00:05:50,240
probably more information than you need

147
00:05:50,240 --> 00:05:52,290
we're going to create a working

148
00:05:52,290 --> 00:05:53,820
directory where we're going to keep our

149
00:05:53,820 --> 00:05:56,550
code basically what docker is doing is

150
00:05:56,550 --> 00:05:57,870
it's wrapping up your application with a

151
00:05:57,870 --> 00:05:59,280
file system and that file system

152
00:05:59,280 --> 00:06:01,440
contains all the dependencies that you

153
00:06:01,440 --> 00:06:03,330
need to run whether it's a runtime

154
00:06:03,330 --> 00:06:05,880
environment dependents use binaries

155
00:06:05,880 --> 00:06:07,290
anything that's on the path that you

156
00:06:07,290 --> 00:06:08,910
need so we need to say where we're

157
00:06:08,910 --> 00:06:10,290
running from this so this is the working

158
00:06:10,290 --> 00:06:14,310
directory this next line I'm not really

159
00:06:14,310 --> 00:06:16,350
not really a hundred percent on this but

160
00:06:16,350 --> 00:06:17,940
it's been working really well for me

161
00:06:17,940 --> 00:06:19,860
basically if you're using NPM

162
00:06:19,860 --> 00:06:22,050
shrink-wrap something I discovered is

163
00:06:22,050 --> 00:06:24,150
that normally when you run NPM install

164
00:06:24,150 --> 00:06:27,270
it would look at the package.json file

165
00:06:27,270 --> 00:06:29,070
read the dependencies from that resolve

166
00:06:29,070 --> 00:06:31,170
them based on their constraints you've

167
00:06:31,170 --> 00:06:34,170
put in there unless you have a shrink

168
00:06:34,170 --> 00:06:36,720
wrap file and then the shrink wrap file

169
00:06:36,720 --> 00:06:38,160
contains the exact version the

170
00:06:38,160 --> 00:06:39,690
resolution of all the sub dependencies

171
00:06:39,690 --> 00:06:42,750
that it should install and I've

172
00:06:42,750 --> 00:06:44,790
discovered although the NPM

173
00:06:44,790 --> 00:06:46,380
documentation says it doesn't work is

174
00:06:46,380 --> 00:06:48,840
that you can install from just a pack

175
00:06:48,840 --> 00:06:50,820
from just an NPM shrink wrap file

176
00:06:50,820 --> 00:06:53,910
so why would you want to do this why am

177
00:06:53,910 --> 00:06:55,760
I not just installing front package.json

178
00:06:55,760 --> 00:06:58,140
the problem with the package.json is

179
00:06:58,140 --> 00:07:00,210
that it's become kind of a dumping

180
00:07:00,210 --> 00:07:01,620
ground for everything else that we do at

181
00:07:01,620 --> 00:07:03,210
node so you have scripts in there and

182
00:07:03,210 --> 00:07:04,770
then lots of packages put their own

183
00:07:04,770 --> 00:07:07,470
configuration in there so maybe you have

184
00:07:07,470 --> 00:07:08,850
your babel configuration maybe it's in a

185
00:07:08,850 --> 00:07:10,350
separate file maybe if you have some

186
00:07:10,350 --> 00:07:13,170
test runner it's got some configuration

187
00:07:13,170 --> 00:07:17,490
in there and the reason why that's

188
00:07:17,490 --> 00:07:20,490
important is that basically we're going

189
00:07:20,490 --> 00:07:23,610
to be when we build this any previous

190
00:07:23,610 --> 00:07:25,670
layer that's unchanged will be cached so

191
00:07:25,670 --> 00:07:29,460
if we for example managed to get down to

192
00:07:29,460 --> 00:07:33,570
line 7 here which we should hopefully

193
00:07:33,570 --> 00:07:36,540
always be able to do say ok say say that

194
00:07:36,540 --> 00:07:39,410
our NPM shrink-wrap file hasn't changed

195
00:07:39,410 --> 00:07:41,760
from the last time that we did a build

196
00:07:41,760 --> 00:07:43,410
and that means it can just skip this

197
00:07:43,410 --> 00:07:45,450
step it will reuse the cash from that

198
00:07:45,450 --> 00:07:47,160
version and when it comes to something

199
00:07:47,160 --> 00:07:49,410
like NPM install that saves a lot of

200
00:07:49,410 --> 00:07:51,210
time we don't have to npm install again

201
00:07:51,210 --> 00:07:53,070
even though we're creating container

202
00:07:53,070 --> 00:07:54,900
from scratch so the containers are

203
00:07:54,900 --> 00:07:56,940
mutable but we can use cache versions of

204
00:07:56,940 --> 00:07:59,220
old containers providing that we're

205
00:07:59,220 --> 00:08:02,360
convinced that they should be the same

206
00:08:02,360 --> 00:08:04,320
so basically I was having problems with

207
00:08:04,320 --> 00:08:05,580
like with a package to Jason you would

208
00:08:05,580 --> 00:08:07,350
go to change a script and then that

209
00:08:07,350 --> 00:08:08,580
would mean that you had to run npm

210
00:08:08,580 --> 00:08:10,890
install again which seems like obviously

211
00:08:10,890 --> 00:08:12,600
you know that you don't have to chain

212
00:08:12,600 --> 00:08:14,730
run in p.m. install when you change the

213
00:08:14,730 --> 00:08:16,800
script like that doesn't make sense but

214
00:08:16,800 --> 00:08:18,480
because this is just looking at has the

215
00:08:18,480 --> 00:08:20,430
file changed like if i copy a file into

216
00:08:20,430 --> 00:08:24,450
the into the container and that files

217
00:08:24,450 --> 00:08:26,700
changed and that invalidates the cache

218
00:08:26,700 --> 00:08:29,520
for that level so this is why you'll see

219
00:08:29,520 --> 00:08:30,870
this is a common pattern and people will

220
00:08:30,870 --> 00:08:32,790
always copy in their package jason

221
00:08:32,790 --> 00:08:34,560
higher up in the file before they

222
00:08:34,560 --> 00:08:36,780
copying the rest of the files so we run

223
00:08:36,780 --> 00:08:39,360
npm install and then we copy in the rest

224
00:08:39,360 --> 00:08:42,840
of the application we're going to expose

225
00:08:42,840 --> 00:08:45,780
a port that application runs on port

226
00:08:45,780 --> 00:08:49,200
8000 and then we define a command how to

227
00:08:49,200 --> 00:08:53,870
start up the application so this is a

228
00:08:53,870 --> 00:08:56,430
complete docker file and this is a

229
00:08:56,430 --> 00:08:58,530
docker file which would be able to run

230
00:08:58,530 --> 00:09:00,660
our application here on this machine and

231
00:09:00,660 --> 00:09:02,070
we could also use it to run in

232
00:09:02,070 --> 00:09:03,210
production

233
00:09:03,210 --> 00:09:06,270
so let's go ahead and let's go ahead and

234
00:09:06,270 --> 00:09:09,710
build it at great personal risk okay

235
00:09:09,710 --> 00:09:13,830
super simple to build a a docker file

236
00:09:13,830 --> 00:09:16,950
gonna just run docker build this - T is

237
00:09:16,950 --> 00:09:18,570
a tag I'm gonna tag this image so I can

238
00:09:18,570 --> 00:09:20,820
find it again you don't have to tag them

239
00:09:20,820 --> 00:09:23,130
but then you just get like a hash that

240
00:09:23,130 --> 00:09:25,500
refers to this build so it's difficult

241
00:09:25,500 --> 00:09:27,930
to find it again and then thought just

242
00:09:27,930 --> 00:09:29,820
means where should I build from what's

243
00:09:29,820 --> 00:09:31,200
the context of the build and that's just

244
00:09:31,200 --> 00:09:35,370
the current directory so first thing it

245
00:09:35,370 --> 00:09:38,010
does is like figures out what files do I

246
00:09:38,010 --> 00:09:40,430
need to send to the to the build and

247
00:09:40,430 --> 00:09:42,420
you'll see that it skipped all the way

248
00:09:42,420 --> 00:09:45,330
to step 6 straightaway and that's

249
00:09:45,330 --> 00:09:49,170
because I've ran this before and the NPM

250
00:09:49,170 --> 00:09:50,760
shrink-wrap dot jason hasn't changed

251
00:09:50,760 --> 00:09:52,470
there aren't any new dependencies so we

252
00:09:52,470 --> 00:09:54,090
can just reuse the last dependencies so

253
00:09:54,090 --> 00:09:57,270
this is really nice like we can build we

254
00:09:57,270 --> 00:09:59,280
can build this image and even if they've

255
00:09:59,280 --> 00:10:03,000
been changes to our application code we

256
00:10:03,000 --> 00:10:04,860
don't need to reinstall anything we

257
00:10:04,860 --> 00:10:06,210
don't need to download node again none

258
00:10:06,210 --> 00:10:15,240
of these things have changed okay so

259
00:10:15,240 --> 00:10:17,550
let's let's run the image let's try

260
00:10:17,550 --> 00:10:19,020
let's try out our application that we've

261
00:10:19,020 --> 00:10:20,850
made so how do we do that

262
00:10:20,850 --> 00:10:24,810
docker run this - IT means that we're

263
00:10:24,810 --> 00:10:27,000
going to basically attach this terminal

264
00:10:27,000 --> 00:10:30,270
sessions here into the terminal session

265
00:10:30,270 --> 00:10:32,190
that's inside the container and reason

266
00:10:32,190 --> 00:10:33,480
you have to do that is otherwise you

267
00:10:33,480 --> 00:10:35,460
can't kill it which is frustrating for

268
00:10:35,460 --> 00:10:39,630
demos then this next document - piece is

269
00:10:39,630 --> 00:10:42,000
we're going to take the port 8000 that's

270
00:10:42,000 --> 00:10:43,980
inside the container and map it to port

271
00:10:43,980 --> 00:10:47,370
8000 outside the container next document

272
00:10:47,370 --> 00:10:49,770
is the tag that's the image that we just

273
00:10:49,770 --> 00:10:55,050
built and then I'm going to override the

274
00:10:55,050 --> 00:10:58,560
command so I have basically this last

275
00:10:58,560 --> 00:11:00,390
argument I'm going to run my dev command

276
00:11:00,390 --> 00:11:02,910
and that's going to run instead of

277
00:11:02,910 --> 00:11:05,610
running it with NPM start that's just

278
00:11:05,610 --> 00:11:07,680
going to run load one so that we can

279
00:11:07,680 --> 00:11:11,030
watch for changes

280
00:11:11,040 --> 00:11:13,260
so application starts up watching for

281
00:11:13,260 --> 00:11:22,950
changes great the problem is when I save

282
00:11:22,950 --> 00:11:25,560
the file you know the application isn't

283
00:11:25,560 --> 00:11:28,860
reloaded and the reason for that is

284
00:11:28,860 --> 00:11:30,540
because this copy operation is a

285
00:11:30,540 --> 00:11:32,340
one-time thing we copied the files into

286
00:11:32,340 --> 00:11:34,170
the container but now the container is

287
00:11:34,170 --> 00:11:36,480
done it's immutable it's not going to

288
00:11:36,480 --> 00:11:38,940
pick up the changes from outside so this

289
00:11:38,940 --> 00:11:40,560
is no good for development I mean we

290
00:11:40,560 --> 00:11:43,350
could just stop it rebuild the image but

291
00:11:43,350 --> 00:11:46,230
this is a really rubbish experience for

292
00:11:46,230 --> 00:11:55,660
development so how can we fix that

293
00:11:55,670 --> 00:11:57,779
so try doing it slightly different way

294
00:11:57,779 --> 00:11:59,249
so exactly the same commanders before

295
00:11:59,249 --> 00:12:02,189
but now we have this - V flag and what

296
00:12:02,189 --> 00:12:03,269
that's going to do is create a volume

297
00:12:03,269 --> 00:12:05,430
we're going to take the current working

298
00:12:05,430 --> 00:12:07,980
directory and we're going to map that as

299
00:12:07,980 --> 00:12:10,319
a file mount onto this code directory

300
00:12:10,319 --> 00:12:11,519
which is where we're storing our code

301
00:12:11,519 --> 00:12:15,930
that was the the working directory here

302
00:12:15,930 --> 00:12:19,589
from before and so this is just like

303
00:12:19,589 --> 00:12:24,120
taking the files the outside just like

304
00:12:24,120 --> 00:12:26,430
in your in your on your regular file

305
00:12:26,430 --> 00:12:28,860
system and they're going to act as like

306
00:12:28,860 --> 00:12:31,139
a network drive or a file file share if

307
00:12:31,139 --> 00:12:33,360
you like inside the container so that

308
00:12:33,360 --> 00:12:36,420
now it has the real files and again

309
00:12:36,420 --> 00:12:38,009
we're going to run node one so it can

310
00:12:38,009 --> 00:12:48,059
pick up file changes and now when I hit

311
00:12:48,059 --> 00:12:56,129
save node one rebuilds the files and if

312
00:12:56,129 --> 00:13:04,639
we you can see if we have the new

313
00:13:04,639 --> 00:13:06,990
message that I just typed in there so

314
00:13:06,990 --> 00:13:09,600
we've got live reload working so this is

315
00:13:09,600 --> 00:13:10,920
kind of the steps that we want so we

316
00:13:10,920 --> 00:13:12,959
have our application running inside node

317
00:13:12,959 --> 00:13:14,819
inside the docker container sorry

318
00:13:14,819 --> 00:13:17,000
running node inside the docker container

319
00:13:17,000 --> 00:13:19,920
and the live reload is working we can

320
00:13:19,920 --> 00:13:22,439
just continue our development as we

321
00:13:22,439 --> 00:13:28,829
always happen however it's going to be a

322
00:13:28,829 --> 00:13:31,319
bit of a pain to just always be typing

323
00:13:31,319 --> 00:13:33,089
these extra commands like the past in

324
00:13:33,089 --> 00:13:35,069
these flags how can we how can we do

325
00:13:35,069 --> 00:13:40,290
this nicer so the next step is to write

326
00:13:40,290 --> 00:13:43,139
a compose file this is a file that's

327
00:13:43,139 --> 00:13:45,179
interpreted by docker compose which is a

328
00:13:45,179 --> 00:13:48,029
a tool that docker provides to run

329
00:13:48,029 --> 00:13:50,670
multiple containers and what does that

330
00:13:50,670 --> 00:13:55,350
look like

331
00:13:55,360 --> 00:13:58,869
so dr. Campos file again is quite simple

332
00:13:58,869 --> 00:14:00,579
it starts with version 2 because they

333
00:14:00,579 --> 00:14:01,929
added some extra features which weren't

334
00:14:01,929 --> 00:14:04,029
back backwards compatible so you can opt

335
00:14:04,029 --> 00:14:07,989
into the new version of the file we're

336
00:14:07,989 --> 00:14:09,730
going to define some services and the

337
00:14:09,730 --> 00:14:11,619
service is just anything that you want

338
00:14:11,619 --> 00:14:13,929
docker to start a container for so in

339
00:14:13,929 --> 00:14:14,949
this case we're going to define a

340
00:14:14,949 --> 00:14:18,100
service called API and then basically

341
00:14:18,100 --> 00:14:20,049
each of these commands reflects the

342
00:14:20,049 --> 00:14:21,519
parameters that we had to pass the

343
00:14:21,519 --> 00:14:23,799
docker to configure it correctly to run

344
00:14:23,799 --> 00:14:26,199
for development so we're going to build

345
00:14:26,199 --> 00:14:28,540
from the current working directory dot

346
00:14:28,540 --> 00:14:30,670
we're going to override the start

347
00:14:30,670 --> 00:14:34,149
command this just runs node 1 we're

348
00:14:34,149 --> 00:14:36,009
going to map the ports so that it's

349
00:14:36,009 --> 00:14:39,399
visible outside outside of the container

350
00:14:39,399 --> 00:14:42,189
and then we're going to do the same

351
00:14:42,189 --> 00:14:45,699
trick with the volumes now there's one

352
00:14:45,699 --> 00:14:47,379
problem with what the volume that I did

353
00:14:47,379 --> 00:14:53,679
before and the reason the reason for

354
00:14:53,679 --> 00:14:57,489
that is that the node modules which you

355
00:14:57,489 --> 00:14:59,829
might have installed on your Mac for

356
00:14:59,829 --> 00:15:02,769
example or on Windows they may have

357
00:15:02,769 --> 00:15:04,299
binary dependencies which are built for

358
00:15:04,299 --> 00:15:06,279
that platform and if you just copy your

359
00:15:06,279 --> 00:15:08,860
node modules into this Linux environment

360
00:15:08,860 --> 00:15:10,239
they're not going to work they're not

361
00:15:10,239 --> 00:15:13,360
compiled for the right architecture so

362
00:15:13,360 --> 00:15:16,119
what we do here and this is the biggest

363
00:15:16,119 --> 00:15:17,439
leap of faith that you'll have to take

364
00:15:17,439 --> 00:15:20,949
for this talk is we're going to we have

365
00:15:20,949 --> 00:15:25,449
two volumes and we have the one that we

366
00:15:25,449 --> 00:15:26,679
just used so that's the current

367
00:15:26,679 --> 00:15:29,319
directory outside on the host that's

368
00:15:29,319 --> 00:15:30,279
going to get mapped to this code

369
00:15:30,279 --> 00:15:32,649
directory but then we're going to create

370
00:15:32,649 --> 00:15:34,749
another volume this is a named volume

371
00:15:34,749 --> 00:15:38,049
this is like a quite a new feature in in

372
00:15:38,049 --> 00:15:40,569
docker which I'm defined down here and

373
00:15:40,569 --> 00:15:42,579
there's no extra configuration for that

374
00:15:42,579 --> 00:15:43,899
which just means it's going to create a

375
00:15:43,899 --> 00:15:46,480
regular file volume using the default

376
00:15:46,480 --> 00:15:48,669
driver and then we're going to map that

377
00:15:48,669 --> 00:15:54,160
to a directory inside our other mount so

378
00:15:54,160 --> 00:15:56,410
you have the docker container which has

379
00:15:56,410 --> 00:15:57,610
its own file system that's isolated

380
00:15:57,610 --> 00:16:00,309
we're going to mount inside of that our

381
00:16:00,309 --> 00:16:03,339
files from our host and then inside of

382
00:16:03,339 --> 00:16:06,220
that we're going to stub out like a safe

383
00:16:06,220 --> 00:16:08,529
space for it to install the node modules

384
00:16:08,529 --> 00:16:09,480
for its own

385
00:16:09,480 --> 00:16:13,510
platform and that means that when we run

386
00:16:13,510 --> 00:16:15,250
npm install inside the container

387
00:16:15,250 --> 00:16:17,290
these node what these node modules will

388
00:16:17,290 --> 00:16:19,600
end up inside this volume and they won't

389
00:16:19,600 --> 00:16:24,700
get leaked outside back to your host and

390
00:16:24,700 --> 00:16:27,370
so that allows us to if you want you can

391
00:16:27,370 --> 00:16:31,120
even install run npm install on the host

392
00:16:31,120 --> 00:16:33,280
have the node modules for mac there

393
00:16:33,280 --> 00:16:35,260
which is sometimes useful for running

394
00:16:35,260 --> 00:16:37,690
things like es lint or like your dev

395
00:16:37,690 --> 00:16:39,880
dependencies and then inside the

396
00:16:39,880 --> 00:16:42,160
container all have the same dependencies

397
00:16:42,160 --> 00:16:44,650
but compiled for the linux environment

398
00:16:44,650 --> 00:16:47,740
that it runs in so that's how you can

399
00:16:47,740 --> 00:16:49,180
get that to work and that allows you to

400
00:16:49,180 --> 00:16:53,140
kind of not be locked in to developer

401
00:16:53,140 --> 00:16:54,940
sort of developing in docker sometimes

402
00:16:54,940 --> 00:16:57,040
it's easier to have those actual node

403
00:16:57,040 --> 00:16:58,270
modules if you need to debug something

404
00:16:58,270 --> 00:17:01,210
or whatever it works equally well if

405
00:17:01,210 --> 00:17:03,070
you're going to be kind of careful and

406
00:17:03,070 --> 00:17:05,050
commit to this run err always running

407
00:17:05,050 --> 00:17:07,420
inside docker you can there's no problem

408
00:17:07,420 --> 00:17:08,800
with just having these files being on

409
00:17:08,800 --> 00:17:10,840
your hard drive the problem is if you

410
00:17:10,840 --> 00:17:13,450
then try and run npm that's not going to

411
00:17:13,450 --> 00:17:14,350
work because there for the wrong

412
00:17:14,350 --> 00:17:16,450
architecture you have the Linux files

413
00:17:16,450 --> 00:17:18,280
which have kind of come back onto your

414
00:17:18,280 --> 00:17:21,310
Mac as part of the file share so this is

415
00:17:21,310 --> 00:17:22,690
the reason that I would recommend this

416
00:17:22,690 --> 00:17:25,540
approach because you the errors that you

417
00:17:25,540 --> 00:17:27,970
get a very strange when you have files

418
00:17:27,970 --> 00:17:29,260
compiled the wrong architecture they're

419
00:17:29,260 --> 00:17:31,930
not always obvious so this kind of gives

420
00:17:31,930 --> 00:17:34,840
you the safety and allows you to switch

421
00:17:34,840 --> 00:17:36,430
back and forth more easily if if you

422
00:17:36,430 --> 00:17:42,310
want to do that so the only thing left

423
00:17:42,310 --> 00:17:45,610
to do is to run an app and the way to do

424
00:17:45,610 --> 00:17:49,390
that is using docker compose and we'll

425
00:17:49,390 --> 00:17:51,730
just use the up command which says take

426
00:17:51,730 --> 00:17:54,280
my docker compose file and start all the

427
00:17:54,280 --> 00:17:58,270
services in it and of course it didn't

428
00:17:58,270 --> 00:18:02,680
work because it's still running okay no

429
00:18:02,680 --> 00:18:08,270
problem

430
00:18:08,280 --> 00:18:14,130
all right so you see we have this

431
00:18:14,130 --> 00:18:16,180
slightly different logging output and

432
00:18:16,180 --> 00:18:18,010
it's just basically a pen it's just

433
00:18:18,010 --> 00:18:19,990
prepending the name of the service and

434
00:18:19,990 --> 00:18:22,480
then it has API one because there could

435
00:18:22,480 --> 00:18:24,070
be multiple instance of instances of

436
00:18:24,070 --> 00:18:26,520
this it's not so applicable for

437
00:18:26,520 --> 00:18:28,510
development but obviously in production

438
00:18:28,510 --> 00:18:29,860
you might want to run multiple copies of

439
00:18:29,860 --> 00:18:31,780
a container and then low bounce across

440
00:18:31,780 --> 00:18:46,340
them so now we have this working and

441
00:18:46,350 --> 00:18:48,310
again we can connect to the container

442
00:18:48,310 --> 00:18:49,540
from the outside and it gives us the

443
00:18:49,540 --> 00:18:53,620
message from before so this is great you

444
00:18:53,620 --> 00:18:55,240
can see there we had the lock output

445
00:18:55,240 --> 00:19:00,250
from the HTTP request there as well this

446
00:19:00,250 --> 00:19:00,580
is great

447
00:19:00,580 --> 00:19:05,890
and night-light neatly wraps up all

448
00:19:05,890 --> 00:19:07,330
those all those parameters that we had

449
00:19:07,330 --> 00:19:09,010
to pass in there are other other options

450
00:19:09,010 --> 00:19:10,480
as well obviously but I think these are

451
00:19:10,480 --> 00:19:14,220
the most important ones for development

452
00:19:14,220 --> 00:19:17,560
so how do you run a command that you

453
00:19:17,560 --> 00:19:19,030
would typically have to run outside the

454
00:19:19,030 --> 00:19:20,410
container like you want to install a new

455
00:19:20,410 --> 00:19:24,460
dependency super easy dr. Campos comes

456
00:19:24,460 --> 00:19:26,770
with the run command so if we were doing

457
00:19:26,770 --> 00:19:29,800
NPM install cause before now we do

458
00:19:29,800 --> 00:19:31,870
docker compose run the name of the

459
00:19:31,870 --> 00:19:33,370
service that we want to run the command

460
00:19:33,370 --> 00:19:36,040
in and then the command so what this

461
00:19:36,040 --> 00:19:38,920
would do is it would fire up the

462
00:19:38,920 --> 00:19:41,080
container it would run this command npm

463
00:19:41,080 --> 00:19:43,150
install cause inside so this dependency

464
00:19:43,150 --> 00:19:44,590
is going to end up inside that volume

465
00:19:44,590 --> 00:19:46,990
that we defined this respects all the

466
00:19:46,990 --> 00:19:48,100
settings you have in your docker compose

467
00:19:48,100 --> 00:19:52,240
file and basically this is just a

468
00:19:52,240 --> 00:19:53,650
straight-up replacement where you ran

469
00:19:53,650 --> 00:19:56,140
npm install cause before now just do da

470
00:19:56,140 --> 00:19:59,440
compose run api npm install' course and

471
00:19:59,440 --> 00:20:01,390
if it's too much typing then you can

472
00:20:01,390 --> 00:20:03,310
just make some aliases to make that a

473
00:20:03,310 --> 00:20:05,680
bit shorter it's quite quite easy to get

474
00:20:05,680 --> 00:20:09,680
used to

475
00:20:09,690 --> 00:20:12,150
so the dr. Campos file is really nice

476
00:20:12,150 --> 00:20:13,770
because there's not really any overhead

477
00:20:13,770 --> 00:20:15,870
to creating extra services so one thing

478
00:20:15,870 --> 00:20:18,090
I like to do is just define another

479
00:20:18,090 --> 00:20:20,100
service that runs my tests so this just

480
00:20:20,100 --> 00:20:21,540
creates another instance of the same

481
00:20:21,540 --> 00:20:24,480
container here I'm just changing the

482
00:20:24,480 --> 00:20:26,310
command so now I'm running my tests with

483
00:20:26,310 --> 00:20:29,130
the watch flag the watch flag works it

484
00:20:29,130 --> 00:20:30,600
will rerun my test because we're doing

485
00:20:30,600 --> 00:20:32,280
the same trick with the volumes to just

486
00:20:32,280 --> 00:20:34,920
mount the files inside and we don't even

487
00:20:34,920 --> 00:20:36,180
have to install the dependencies twice

488
00:20:36,180 --> 00:20:38,070
it's reusing the volume that has all the

489
00:20:38,070 --> 00:20:40,860
node modules in and you can imagine

490
00:20:40,860 --> 00:20:42,720
defining more services maybe you could

491
00:20:42,720 --> 00:20:44,940
run your linter and all of these will

492
00:20:44,940 --> 00:20:46,380
just show up in like a nice interleaved

493
00:20:46,380 --> 00:20:49,560
output so you only have one command I

494
00:20:49,560 --> 00:20:51,570
don't about you but before I did this I

495
00:20:51,570 --> 00:20:52,830
used to have to open multiple terminals

496
00:20:52,830 --> 00:20:54,690
like start up various things they had

497
00:20:54,690 --> 00:20:55,920
watches because they're long-running

498
00:20:55,920 --> 00:20:58,080
process is so now this allows you to

499
00:20:58,080 --> 00:21:00,210
have them kind of all together and to

500
00:21:00,210 --> 00:21:03,660
start them all up with just one one

501
00:21:03,660 --> 00:21:09,030
script or composer there's one other

502
00:21:09,030 --> 00:21:10,850
really nice feature worth mentioning for

503
00:21:10,850 --> 00:21:16,470
the services and I don't use this on my

504
00:21:16,470 --> 00:21:19,290
project but obviously lots of people do

505
00:21:19,290 --> 00:21:21,560
use databases so it's worth mentioning

506
00:21:21,560 --> 00:21:24,270
so here's an example of how how do we

507
00:21:24,270 --> 00:21:27,540
connect to a Postgres database in

508
00:21:27,540 --> 00:21:30,420
development so normally most people will

509
00:21:30,420 --> 00:21:32,400
just install Postgres on the machine and

510
00:21:32,400 --> 00:21:34,020
then get it configured correctly and

511
00:21:34,020 --> 00:21:35,130
then maybe if you want to use it with

512
00:21:35,130 --> 00:21:37,050
another another project you have to

513
00:21:37,050 --> 00:21:39,570
reconfigure it and what this allows us

514
00:21:39,570 --> 00:21:41,010
to do is we can run Postgres inside a

515
00:21:41,010 --> 00:21:44,340
container which gives us an isolated

516
00:21:44,340 --> 00:21:49,770
version of this database it's super easy

517
00:21:49,770 --> 00:21:51,210
like it's way easier than installing

518
00:21:51,210 --> 00:21:52,680
postcards we just put the name of it

519
00:21:52,680 --> 00:21:54,960
here if I wanted to install my sequel I

520
00:21:54,960 --> 00:21:57,210
just put my sequel Redis all of these

521
00:21:57,210 --> 00:21:59,070
have official builds and they're all

522
00:21:59,070 --> 00:22:01,410
configured out at the box so that's

523
00:22:01,410 --> 00:22:04,980
super nice we can interact with this we

524
00:22:04,980 --> 00:22:06,840
can configure this image or like any

525
00:22:06,840 --> 00:22:08,280
additional configuration that we need

526
00:22:08,280 --> 00:22:10,860
using environment variables and all of

527
00:22:10,860 --> 00:22:12,270
them just list the kind of configuration

528
00:22:12,270 --> 00:22:14,520
parameters gives you like a nice API

529
00:22:14,520 --> 00:22:17,580
onto this image so here we're going to

530
00:22:17,580 --> 00:22:21,360
define some username password and then

531
00:22:21,360 --> 00:22:23,050
in order to persist

532
00:22:23,050 --> 00:22:24,880
the data that's in the database we just

533
00:22:24,880 --> 00:22:27,970
give it a volume and then this exposes

534
00:22:27,970 --> 00:22:30,550
the port here you'll notice that says

535
00:22:30,550 --> 00:22:32,500
exposed before we had ports and that

536
00:22:32,500 --> 00:22:34,630
defined a port mapping and this time

537
00:22:34,630 --> 00:22:36,070
we're saying expose a port but there's

538
00:22:36,070 --> 00:22:39,130
no what is the port that 5 4 3 2 is

539
00:22:39,130 --> 00:22:43,390
mapped to so this is where we come to

540
00:22:43,390 --> 00:22:45,370
links so you see that the API has a

541
00:22:45,370 --> 00:22:48,630
definition here links to the links to DB

542
00:22:48,630 --> 00:22:50,830
what this means is that docker is going

543
00:22:50,830 --> 00:22:52,630
to set up an internal network route

544
00:22:52,630 --> 00:22:54,640
between the API service and the database

545
00:22:54,640 --> 00:22:57,190
and the database is not publicly

546
00:22:57,190 --> 00:22:59,140
accessible this doesn't have a port you

547
00:22:59,140 --> 00:23:02,920
can connect to it from and that's why it

548
00:23:02,920 --> 00:23:04,600
would be perfectly fine to have your

549
00:23:04,600 --> 00:23:06,520
username password like this this is this

550
00:23:06,520 --> 00:23:09,280
database is not accessible from anywhere

551
00:23:09,280 --> 00:23:13,240
else on the host or beyond on the public

552
00:23:13,240 --> 00:23:17,530
Internet how do you connect to it from

553
00:23:17,530 --> 00:23:19,660
the API what it's going to do is it's

554
00:23:19,660 --> 00:23:21,190
going to create an entry in the hosts

555
00:23:21,190 --> 00:23:24,850
file of this container for DB and then

556
00:23:24,850 --> 00:23:26,470
that's going to resolve to the database

557
00:23:26,470 --> 00:23:29,530
so you can just do connect to server DB

558
00:23:29,530 --> 00:23:32,020
and that will be filled in in the host

559
00:23:32,020 --> 00:23:34,840
file with the link to wherever it's

560
00:23:34,840 --> 00:23:37,110
decided to run this and on whatever port

561
00:23:37,110 --> 00:23:39,730
I really like this and like if you're

562
00:23:39,730 --> 00:23:43,540
using some abstraction over your say

563
00:23:43,540 --> 00:23:44,980
your sequel IV fusions on like sequel

564
00:23:44,980 --> 00:23:47,080
eyes or whatever and you want to try

565
00:23:47,080 --> 00:23:48,880
swapping out your database for something

566
00:23:48,880 --> 00:23:51,160
else or you want to just say like I what

567
00:23:51,160 --> 00:23:53,170
would you be like if we ended memcache

568
00:23:53,170 --> 00:23:55,420
or Redis or some other service like this

569
00:23:55,420 --> 00:23:57,520
super easy to just create a new entry in

570
00:23:57,520 --> 00:23:59,080
your services you can connect to it

571
00:23:59,080 --> 00:24:01,570
really easily using the links and if you

572
00:24:01,570 --> 00:24:03,310
don't like it just throw it away delete

573
00:24:03,310 --> 00:24:05,200
it from your config and there's no no

574
00:24:05,200 --> 00:24:10,120
damage done so this is really nice

575
00:24:10,120 --> 00:24:14,580
but when we when we're running in

576
00:24:14,580 --> 00:24:17,470
production we're not having to worry

577
00:24:17,470 --> 00:24:18,880
about what ports things are running on

578
00:24:18,880 --> 00:24:20,800
everything has a name and I really

579
00:24:20,800 --> 00:24:22,450
wanted to find a way to solve this

580
00:24:22,450 --> 00:24:24,490
problem of like I want to have all my

581
00:24:24,490 --> 00:24:28,870
projects running on a local domain and

582
00:24:28,870 --> 00:24:30,430
turn out to be real easy this is

583
00:24:30,430 --> 00:24:31,870
actually like way easier than anything

584
00:24:31,870 --> 00:24:33,940
else to do a docker this isn't to do a

585
00:24:33,940 --> 00:24:35,890
docker but I just wanted to go through

586
00:24:35,890 --> 00:24:36,970
this just then

587
00:24:36,970 --> 00:24:38,440
straight how easy it is and I was really

588
00:24:38,440 --> 00:24:41,380
surprised these instructions are for Mac

589
00:24:41,380 --> 00:24:45,250
but I assume it's easy on Windows we're

590
00:24:45,250 --> 00:24:46,870
going to use DNS mask so just brew

591
00:24:46,870 --> 00:24:47,919
install DNS mask

592
00:24:47,919 --> 00:24:50,950
we just need to config files the first

593
00:24:50,950 --> 00:24:54,220
one is the DNS mask config file and that

594
00:24:54,220 --> 00:24:58,299
says that we're going to resolve the

595
00:24:58,299 --> 00:25:00,309
address anything that ends in the

596
00:25:00,309 --> 00:25:03,220
top-level domain dev to one two seven

597
00:25:03,220 --> 00:25:05,409
zero zero one to localhost that's where

598
00:25:05,409 --> 00:25:07,750
our containers are bound to so this is

599
00:25:07,750 --> 00:25:09,909
actually enough but at the moment that

600
00:25:09,909 --> 00:25:11,710
means that DNS mask is intercepting

601
00:25:11,710 --> 00:25:14,530
every DNS request so what we're going to

602
00:25:14,530 --> 00:25:16,240
do is create another file that tells the

603
00:25:16,240 --> 00:25:19,720
operating system only use this to

604
00:25:19,720 --> 00:25:22,809
resolve requests that end in dev so this

605
00:25:22,809 --> 00:25:26,140
is this bit here is OSX specific I

606
00:25:26,140 --> 00:25:27,460
assume you can do this on Windows as

607
00:25:27,460 --> 00:25:30,850
well we're basically just saying here if

608
00:25:30,850 --> 00:25:35,020
the domain ends in dev then use the name

609
00:25:35,020 --> 00:25:37,809
server one two seven zero zero one so

610
00:25:37,809 --> 00:25:40,390
now when you use any other site when you

611
00:25:40,390 --> 00:25:41,770
go on Facebook comm it's going to be

612
00:25:41,770 --> 00:25:44,740
resolved using whatever DNS you had

613
00:25:44,740 --> 00:25:47,440
before but if we go to a dev domain it's

614
00:25:47,440 --> 00:25:52,450
going to be resolved to localhost so how

615
00:25:52,450 --> 00:25:55,929
do we actually get those requests that

616
00:25:55,929 --> 00:25:58,059
are coming with these names and get them

617
00:25:58,059 --> 00:26:01,650
to the right containers so this again is

618
00:26:01,650 --> 00:26:05,620
actually really not really easy there

619
00:26:05,620 --> 00:26:07,780
are two images that I know that solve

620
00:26:07,780 --> 00:26:09,039
this problem and they solve it in the

621
00:26:09,039 --> 00:26:10,120
exact same way they're completely

622
00:26:10,120 --> 00:26:13,360
interchangeable I used this one which is

623
00:26:13,360 --> 00:26:15,159
based on high availability proxy because

624
00:26:15,159 --> 00:26:17,020
I was already running it in development

625
00:26:17,020 --> 00:26:18,760
and it was easy I just copied the

626
00:26:18,760 --> 00:26:20,230
configure hand development works in

627
00:26:20,230 --> 00:26:22,179
sorry in production works in development

628
00:26:22,179 --> 00:26:24,549
as well but there's another one that's

629
00:26:24,549 --> 00:26:26,980
based on nginx so if you're more

630
00:26:26,980 --> 00:26:28,570
familiar with nginx then that might be

631
00:26:28,570 --> 00:26:29,799
better you can just read the config

632
00:26:29,799 --> 00:26:32,860
files understand what it does but we

633
00:26:32,860 --> 00:26:34,150
basically just add another entry to our

634
00:26:34,150 --> 00:26:37,840
services for the proxy we're going to

635
00:26:37,840 --> 00:26:40,030
link it to all the services that we want

636
00:26:40,030 --> 00:26:42,610
and then in each service we're going to

637
00:26:42,610 --> 00:26:44,320
define just this virtual host

638
00:26:44,320 --> 00:26:47,559
environment variable that says what what

639
00:26:47,559 --> 00:26:48,909
request should I forward to this

640
00:26:48,909 --> 00:26:51,840
container so basically if the

641
00:26:51,840 --> 00:26:56,760
if the request looks like API teller dev

642
00:26:56,760 --> 00:27:00,610
then this guy will forward it to it we

643
00:27:00,610 --> 00:27:02,559
have some port mappings here

644
00:27:02,559 --> 00:27:07,120
82 84 43 we can do use this to do a self

645
00:27:07,120 --> 00:27:09,309
emanation if you want to test out that

646
00:27:09,309 --> 00:27:11,740
your or your HTTP to set up correctly in

647
00:27:11,740 --> 00:27:13,870
development very easy to just generate

648
00:27:13,870 --> 00:27:16,720
some deficit if Achatz give it to this

649
00:27:16,720 --> 00:27:18,700
proxy here and he'll do the SSL

650
00:27:18,700 --> 00:27:21,490
termination for you fold it on to the

651
00:27:21,490 --> 00:27:22,809
containers exactly like you probably

652
00:27:22,809 --> 00:27:25,600
would do in production the only mystery

653
00:27:25,600 --> 00:27:27,160
line here is maybe this bottom line

654
00:27:27,160 --> 00:27:29,530
which you have a volume which is the

655
00:27:29,530 --> 00:27:32,620
socket what's going on here and also

656
00:27:32,620 --> 00:27:35,710
somehow the it's like from itself to

657
00:27:35,710 --> 00:27:39,820
itself like what is happening here this

658
00:27:39,820 --> 00:27:40,870
basically says that we're going to

659
00:27:40,870 --> 00:27:43,870
connect the docker engine outside the

660
00:27:43,870 --> 00:27:45,669
container to the doctor socket inside

661
00:27:45,669 --> 00:27:47,500
the container and that's so that it can

662
00:27:47,500 --> 00:27:50,200
watch for any changes in in the docker

663
00:27:50,200 --> 00:27:52,210
containers containers been started and

664
00:27:52,210 --> 00:27:55,360
stopped and that means that the these

665
00:27:55,360 --> 00:27:57,610
both these images the high availability

666
00:27:57,610 --> 00:28:00,220
one and the nginx one we reconfigure

667
00:28:00,220 --> 00:28:02,110
themselves automatically when services

668
00:28:02,110 --> 00:28:05,169
start and stop so that's really nice and

669
00:28:05,169 --> 00:28:06,820
that's works exactly the same in

670
00:28:06,820 --> 00:28:13,210
production like that as well there were

671
00:28:13,210 --> 00:28:15,250
two changes that I had to make to my web

672
00:28:15,250 --> 00:28:17,110
pack config to get this working with

673
00:28:17,110 --> 00:28:20,110
this which is just worth pointing out so

674
00:28:20,110 --> 00:28:21,280
that you don't get stuck on the same

675
00:28:21,280 --> 00:28:25,150
thing the web pack dev server has like

676
00:28:25,150 --> 00:28:26,740
this leaky like before it would have

677
00:28:26,740 --> 00:28:29,020
said question mark localhost and then

678
00:28:29,020 --> 00:28:31,450
the port that you're running on but now

679
00:28:31,450 --> 00:28:32,559
we can just change that to our

680
00:28:32,559 --> 00:28:34,540
development domain which for this image

681
00:28:34,540 --> 00:28:38,049
is going to be Tala dev and the

682
00:28:38,049 --> 00:28:39,730
development server doesn't bind to all

683
00:28:39,730 --> 00:28:41,380
interfaces by default so we just need to

684
00:28:41,380 --> 00:28:43,809
put host 0 0 0 0 so it's going to listen

685
00:28:43,809 --> 00:28:48,220
on both our Wi-Fi and also the docker

686
00:28:48,220 --> 00:28:57,390
Network so

687
00:28:57,400 --> 00:29:00,410
here I have another another dr. Campos

688
00:29:00,410 --> 00:29:02,990
file and I wanted to just point out a

689
00:29:02,990 --> 00:29:04,610
couple more features which make it

690
00:29:04,610 --> 00:29:09,520
really nice for development you can use

691
00:29:09,520 --> 00:29:12,140
alternative dockerfile and development

692
00:29:12,140 --> 00:29:14,299
why might you want to do that in the

693
00:29:14,299 --> 00:29:16,820
case of a front-end app the situation

694
00:29:16,820 --> 00:29:17,929
for running in development is normally

695
00:29:17,929 --> 00:29:19,309
very different to running in production

696
00:29:19,309 --> 00:29:21,410
so say you're running a typical web pack

697
00:29:21,410 --> 00:29:22,490
build you're going to be running it one

698
00:29:22,490 --> 00:29:23,299
live reloading

699
00:29:23,299 --> 00:29:25,010
but in production you're going to

700
00:29:25,010 --> 00:29:26,840
compile all the files down to static and

701
00:29:26,840 --> 00:29:28,460
it's going to be served by something

702
00:29:28,460 --> 00:29:30,740
completely different maybe just nginx or

703
00:29:30,740 --> 00:29:31,880
you're going to put it on App Engine or

704
00:29:31,880 --> 00:29:41,809
whatever I I've been thinking about this

705
00:29:41,809 --> 00:29:43,520
like philosophically like a lot of the

706
00:29:43,520 --> 00:29:45,500
ideas around docker is that it's the

707
00:29:45,500 --> 00:29:47,360
same in development is in production

708
00:29:47,360 --> 00:29:50,200
same all the way through your pipeline

709
00:29:50,200 --> 00:29:52,429
but I don't think it makes any sense to

710
00:29:52,429 --> 00:29:54,770
try and like force yourself to run the

711
00:29:54,770 --> 00:29:56,480
same image I mean like you could do this

712
00:29:56,480 --> 00:29:58,970
so you could create a node server that

713
00:29:58,970 --> 00:30:00,350
serves your files statically in

714
00:30:00,350 --> 00:30:02,210
production and then you have some if

715
00:30:02,210 --> 00:30:03,740
development thing then run webpack

716
00:30:03,740 --> 00:30:05,450
config but really you're just you're

717
00:30:05,450 --> 00:30:06,500
just masking the problem you're not

718
00:30:06,500 --> 00:30:07,910
really running the same code in

719
00:30:07,910 --> 00:30:10,520
development in production so I prefer to

720
00:30:10,520 --> 00:30:12,890
just have these separate configs and

721
00:30:12,890 --> 00:30:16,900
then I have another entry down here

722
00:30:16,900 --> 00:30:20,270
which takes my built files and copies

723
00:30:20,270 --> 00:30:22,010
them into an image running nginx and

724
00:30:22,010 --> 00:30:23,000
this is the same image that I'm running

725
00:30:23,000 --> 00:30:24,980
in production this is just the built

726
00:30:24,980 --> 00:30:26,630
JavaScript files with the hashes and

727
00:30:26,630 --> 00:30:28,700
minification and everything just so I

728
00:30:28,700 --> 00:30:33,080
can test out are there any problems if

729
00:30:33,080 --> 00:30:35,030
you're developing as part of a team and

730
00:30:35,030 --> 00:30:36,350
you're going to adopt this workflow one

731
00:30:36,350 --> 00:30:38,660
super nice thing is that instead of

732
00:30:38,660 --> 00:30:40,760
building the code locally you can just

733
00:30:40,760 --> 00:30:42,980
pull down an image so how this normally

734
00:30:42,980 --> 00:30:46,120
works is that you have a CI system

735
00:30:46,120 --> 00:30:48,620
that's building your dot building images

736
00:30:48,620 --> 00:30:50,510
and pushing them to a registry you can

737
00:30:50,510 --> 00:30:52,480
tag these with maybe the branch name

738
00:30:52,480 --> 00:30:54,860
latest maybe even the commit so that you

739
00:30:54,860 --> 00:30:57,860
can find a specific one again and that

740
00:30:57,860 --> 00:31:00,470
means so for example here I can just use

741
00:31:00,470 --> 00:31:02,210
a pre-built image of the API I don't

742
00:31:02,210 --> 00:31:03,320
have to have the code checked out for

743
00:31:03,320 --> 00:31:05,870
the API it's really nice if you have

744
00:31:05,870 --> 00:31:07,130
people working on different parts of the

745
00:31:07,130 --> 00:31:07,820
stack

746
00:31:07,820 --> 00:31:09,770
but then when I come to do a feature

747
00:31:09,770 --> 00:31:11,390
which affects both the front end and the

748
00:31:11,390 --> 00:31:13,940
back end I can just change this to point

749
00:31:13,940 --> 00:31:17,150
to change this image to build maybe just

750
00:31:17,150 --> 00:31:19,280
built pointer to build dot dot slash

751
00:31:19,280 --> 00:31:21,050
wherever I've checked out my code and

752
00:31:21,050 --> 00:31:23,000
then I can make my changes there so it's

753
00:31:23,000 --> 00:31:24,520
really simple to switch between

754
00:31:24,520 --> 00:31:27,560
pre-built images which means you don't

755
00:31:27,560 --> 00:31:29,930
have to have anything installed to get

756
00:31:29,930 --> 00:31:32,330
them running and then to switch back to

757
00:31:32,330 --> 00:31:34,670
the regular development with the files

758
00:31:34,670 --> 00:31:38,450
checked out and then the rest of this is

759
00:31:38,450 --> 00:31:40,340
exactly the same just the proxy to

760
00:31:40,340 --> 00:31:44,660
afford to these things so what's going

761
00:31:44,660 --> 00:31:58,130
to happen I started up so you see we get

762
00:31:58,130 --> 00:32:00,140
a whole load of output on the start

763
00:32:00,140 --> 00:32:01,520
that's just all the containers starting

764
00:32:01,520 --> 00:32:03,950
up together if you have some kind of

765
00:32:03,950 --> 00:32:06,700
ordering thing you can define one

766
00:32:06,700 --> 00:32:08,930
container depends on another so they

767
00:32:08,930 --> 00:32:13,040
come up in the right order you see

768
00:32:13,040 --> 00:32:16,100
everything has come up now we're Packers

769
00:32:16,100 --> 00:32:24,050
said it's finished building its gonna

770
00:32:24,050 --> 00:32:25,640
just try and save this because I left

771
00:32:25,640 --> 00:32:27,290
the other one running so it's probably

772
00:32:27,290 --> 00:32:34,940
not actually come up just to clarify

773
00:32:34,940 --> 00:32:37,670
like the one I showed you first is like

774
00:32:37,670 --> 00:32:39,830
if I'm working on API I'm normally like

775
00:32:39,830 --> 00:32:41,660
developing using tests so I don't have

776
00:32:41,660 --> 00:32:43,040
to run the front end but if you're

777
00:32:43,040 --> 00:32:44,300
developing on the whole stack then I

778
00:32:44,300 --> 00:32:45,950
have a different compose file which just

779
00:32:45,950 --> 00:32:47,990
starts up the whole stack so depending

780
00:32:47,990 --> 00:33:01,970
on how your workflow goes so

781
00:33:01,980 --> 00:33:04,180
so it's not a local host anymore of

782
00:33:04,180 --> 00:33:07,810
course should be able to connect to it

783
00:33:07,810 --> 00:33:13,990
on API dr. dev which you can we should

784
00:33:13,990 --> 00:33:16,690
have another service that's running web

785
00:33:16,690 --> 00:33:19,120
pack dev server and that's service some

786
00:33:19,120 --> 00:33:21,610
HTML and then if I show you that staging

787
00:33:21,610 --> 00:33:26,620
one you can see that here this server

788
00:33:26,620 --> 00:33:29,080
line says nginx so that's been served by

789
00:33:29,080 --> 00:33:45,400
nginx and this is what this is what the

790
00:33:45,400 --> 00:33:47,310
site looks like you can search for

791
00:33:47,310 --> 00:33:49,660
Icelandic words it will show you how

792
00:33:49,660 --> 00:33:51,190
these words change according to the

793
00:33:51,190 --> 00:34:02,440
grammar you can can access the API not

794
00:34:02,440 --> 00:34:06,370
with HTTPS that will return the JSON and

795
00:34:06,370 --> 00:34:07,660
you see all of these have got nice names

796
00:34:07,660 --> 00:34:10,840
oh sorry that's the real service let's

797
00:34:10,840 --> 00:34:16,210
go to the development everything has a

798
00:34:16,210 --> 00:34:16,960
nice name

799
00:34:16,960 --> 00:34:18,360
everything is linked linked together

800
00:34:18,360 --> 00:34:24,400
this guy's using an image to build and

801
00:34:24,400 --> 00:34:26,320
histories Icelandic for horse so you

802
00:34:26,320 --> 00:34:28,240
learned an Icelandic word as well there

803
00:34:28,240 --> 00:34:36,130
we go if I could find my slides again I

804
00:34:36,130 --> 00:34:38,790
would say that's the end of my talk the

805
00:34:38,790 --> 00:34:41,050
slides are on slides comm slash david

806
00:34:41,050 --> 00:34:42,610
glenn if you want to have a look at

807
00:34:42,610 --> 00:34:44,080
those config files have a go at setting

808
00:34:44,080 --> 00:34:46,450
up yourself the code for this project is

809
00:34:46,450 --> 00:34:49,050
on github.com slash Taylor Eastern screw

810
00:34:49,050 --> 00:34:51,610
maybe just goes to the slides first and

811
00:34:51,610 --> 00:34:54,610
then you can find this link but if you

812
00:34:54,610 --> 00:34:56,320
if you're using docker in development

813
00:34:56,320 --> 00:34:58,180
and you have some improvements to this

814
00:34:58,180 --> 00:34:59,710
workflow I'd love to hear about them so

815
00:34:59,710 --> 00:35:03,780
come talk to me thanks very much

