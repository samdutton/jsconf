1
00:00:20,630 --> 00:00:23,349
Thank you (Applause) thank you.

2
00:00:23,349 --> 00:00:24,349
Da‑da.

3
00:00:24,349 --> 00:00:27,840
Good evening, we oar almost done with day
one.

4
00:00:27,840 --> 00:00:34,690
If you don't know me in my free time I submit
presummually JSConf 2014 talks and sometimes

5
00:00:34,690 --> 00:00:40,050
I write funny tweets such as a JavaScript
funk returning this shall henceforth be known

6
00:00:40,050 --> 00:00:52,040
as a Selfie (Laughing) before the talk (Trumpets)
before the talk, I worked for Contentful if

7
00:00:52,040 --> 00:00:54,379
Berlin, they paid for my flight.

8
00:00:54,379 --> 00:01:00,000
They're hiring script developers.

9
00:01:00,000 --> 00:01:02,600
Okay.

10
00:01:02,600 --> 00:01:05,620
The meaning of words.

11
00:01:05,620 --> 00:01:14,040
I want to start by reminding you of a\h‑‑
of someone's guiding principle.

12
00:01:14,040 --> 00:01:17,650
Creators need an immediate connection to what
they're creating.

13
00:01:17,650 --> 00:01:23,409
This is Brett victor's guiding principle I'll
show you some of his ideas following this

14
00:01:23,409 --> 00:01:29,780
principle to give you an idea of what he's
talking about.

15
00:01:29,780 --> 00:01:36,840
On the right side we have an editor, on the
left we're showing a picture the code generates.

16
00:01:36,840 --> 00:01:43,579
The editor allows direct manipulation of values,
changing a value on the right gets an immediate

17
00:01:43,579 --> 00:01:46,350
result on the left.

18
00:01:46,350 --> 00:01:53,110
There is no compilation or any other sort
of waiting, every change is instant.

19
00:01:53,110 --> 00:02:00,060
So, Brett thinking this immediate connection
is very important.

20
00:02:00,060 --> 00:02:04,359
You can't do certain things if the computer
makes you wait all the time.

21
00:02:04,359 --> 00:02:13,459
And I very much agree.

22
00:02:13,459 --> 00:02:17,110
\h‑‑ Brett is very inspiring go watch
all his videos if you haven't.

23
00:02:17,110 --> 00:02:21,430
I think his ideas should be part of every
creative environment.

24
00:02:21,430 --> 00:02:25,780
However, I thought I'd play his principles
to something different.

25
00:02:25,780 --> 00:02:32,690
So, the ideas I'll show attempt to remove
everything that stands between your idea and

26
00:02:32,690 --> 00:02:36,570
running or sharing it as a program.

27
00:02:36,570 --> 00:02:47,560
So, do we have an immediate connection to
what we're creating in JavaScript? Nein.

28
00:02:47,560 --> 00:02:54,820
I think this preference million is often violated.
Are many things which are actually disconnecting

29
00:02:54,820 --> 00:03:00,440
us from our creative process.

30
00:03:00,440 --> 00:03:04,520
Setting up development environments is a pain
in the ass.

31
00:03:04,520 --> 00:03:07,380
Here's a tweet.

32
00:03:07,380 --> 00:03:12,070
If you set up your development environment
yourself, and if you can't tear it down and

33
00:03:12,070 --> 00:03:15,370
recreate it in one command you are coding
in prototype.

34
00:03:15,370 --> 00:03:17,590
I think Jessica makes an important point here.

35
00:03:17,590 --> 00:03:26,620
Jo hulledn't have to copy paste or overflow
answers with the highest vote rating or whatever,

36
00:03:26,620 --> 00:03:28,390
or Blog posts.

37
00:03:28,390 --> 00:03:32,310
All of this stuff really must be automated.

38
00:03:32,310 --> 00:03:38,460
But, even if you're using something like Vagrant,
it's going to take time until your environment

39
00:03:38,460 --> 00:03:40,940
is set up.

40
00:03:40,940 --> 00:03:45,660
Alas, we're not done with waiting for things.

41
00:03:45,660 --> 00:03:54,510
Another thing we wait for is long running
tests or MPM install or deployments to servers.

42
00:03:54,510 --> 00:04:00,320
Like for example when a test run takes more
than a few minutes, I can't do anything during

43
00:04:00,320 --> 00:04:03,430
that time that changes it's outcome.

44
00:04:03,430 --> 00:04:10,510
I'm forced to work on something else and when
I get back to the test result, when it's done,

45
00:04:10,510 --> 00:04:15,510
my mind will have lost all context.

46
00:04:15,510 --> 00:04:21,780
Another disconnect is managing package deopinion
den say and releasing packages.

47
00:04:21,780 --> 00:04:27,240
We depend on packages also on NPM and GitHub
and other places, where it gets really fun

48
00:04:27,240 --> 00:04:32,819
is when you're publishing your own packages
there, coordinating between these different

49
00:04:32,819 --> 00:04:38,790
services is difficult and you will make mistakes
unless you're very careful.

50
00:04:38,790 --> 00:04:46,700
For example it's possible you mixed up version
numbers between NPM and GitHub.

51
00:04:46,700 --> 00:04:52,510
There's even more to fix like randomly occurring
CIRs, test timeouts or third party failures,.

52
00:04:52,510 --> 00:04:57,900
Here's a tweet that sums it up nicely, I think.

53
00:04:57,900 --> 00:05:02,470
Programming is the act officiousing one error
so you may proceed to the next error, by Michael

54
00:05:02,470 --> 00:05:04,600
Fogus.

55
00:05:04,600 --> 00:05:09,680
It's Ironic and probably true.

56
00:05:09,680 --> 00:05:22,780
This is wanders above the sea of flog by Fredirich.

57
00:05:22,780 --> 00:05:28,970
Pictures have different interpretations just
like JavaScript syntax rules.

58
00:05:28,970 --> 00:05:35,580
John Gaddis an American historian felt that
the character of a wanderer is contradictory,

59
00:05:35,580 --> 00:05:42,280
suggesting mastery over landscape at the same
time the insignificance of the individual

60
00:05:42,280 --> 00:05:45,200
within it.

61
00:05:45,200 --> 00:05:52,639
Computers are insanely powerful, but, still
we can realize the full potential of our ideas.

62
00:05:52,639 --> 00:05:59,230
Maybe we are the wanderer above the sea of
computation.

63
00:05:59,230 --> 00:06:03,800
We like to look at terminal windows or at
least we think we do.

64
00:06:03,800 --> 00:06:09,170
It is certainly part of our identity.

65
00:06:09,170 --> 00:06:16,080
The text displayed to us offer abstract descriptions
of what's going on.

66
00:06:16,080 --> 00:06:25,490
It alerts us of problems and eventually will
always ask us what we want to do next.

67
00:06:25,490 --> 00:06:30,860
So while the terminal is a great interface,
I think we're too often doing things that

68
00:06:30,860 --> 00:06:32,520
the computer is better at.

69
00:06:32,520 --> 00:06:37,210
We suck at playing computer.

70
00:06:37,210 --> 00:06:43,160
So,\h‑‑ Ooops.

71
00:06:43,160 --> 00:06:46,140
Sorry.

72
00:06:46,140 --> 00:06:57,490
Befehlsze Ilenbeklemmung, having forgotteden
what you want to enter into the command prompt.

73
00:06:57,490 --> 00:07:00,919
The terminal interfaces we use are well designed.

74
00:07:00,919 --> 00:07:04,419
That's because most of them are four years
old.

75
00:07:04,419 --> 00:07:10,930
But that's not the problem, what\h‑‑ because
we can imitate great examples from the past.

76
00:07:10,930 --> 00:07:15,130
What matters is that I want to work with people
who aren't programmers.

77
00:07:15,130 --> 00:07:21,810
I also want to teach people and seriously
get them started with programming.

78
00:07:21,810 --> 00:07:27,650
I don't want to tell them what they're supposed
enter into their terminal when stuff goes

79
00:07:27,650 --> 00:07:30,000
wrong.

80
00:07:30,000 --> 00:07:34,310
And the same is true in my job where people
are using my tool automation.

81
00:07:34,310 --> 00:07:40,710
If your process is sufficiently complex you
need to automate it.

82
00:07:40,710 --> 00:07:51,860
Browserliebe, browser love sharing, sharing
an internet address lovingly for browser consumption.

83
00:07:51,860 --> 00:07:57,870
Browsers are powerful,both as instruments
of media consumption like looking at cat pictures

84
00:07:57,870 --> 00:08:04,260
and it's instruments of creation, you're also
read so the demo I'm going to show you later

85
00:08:04,260 --> 00:08:11,330
is browser‑based, I wanted to build something
that I can share immediately.

86
00:08:11,330 --> 00:08:16,669
There is no read me with a pattern of commands
or please download this and install that instructions.

87
00:08:16,669 --> 00:08:18,580
It just works.

88
00:08:18,580 --> 00:08:19,669
Hopefully.

89
00:08:19,669 --> 00:08:21,710
Because it's a live coding demo.

90
00:08:21,710 --> 00:08:28,860
So, let's look at a couple of problem areas,
I'll focus on dependency management and building

91
00:08:28,860 --> 00:08:30,680
in today.

92
00:08:30,680 --> 00:08:38,589
So, what does depend mean? It means that code
that we write depends on a stack of things

93
00:08:38,589 --> 00:08:45,990
working properly, which is the hardware, and
the operating system no J S or browsers or

94
00:08:45,990 --> 00:08:47,529
dependencies we use.

95
00:08:47,529 --> 00:08:54,740
So as an example let's assume we have a Mac
with node installed and let's build a package.

96
00:08:54,740 --> 00:08:59,380
So, I don't know about you but I had a fantastic
breakfast this morning, let's write a module

97
00:08:59,380 --> 00:09:02,500
for making pancakes.

98
00:09:02,500 --> 00:09:10,520
So, usually I search for modules that I can
use, so let's to search.com and look for things

99
00:09:10,520 --> 00:09:15,730
that we can use\h‑‑ NPM search.com.

100
00:09:15,730 --> 00:09:18,870
There's NPM.org search.

101
00:09:18,870 --> 00:09:21,790
I usually get this.

102
00:09:21,790 --> 00:09:25,300
I don't even understand it.

103
00:09:25,300 --> 00:09:26,300
Well, I do, but ...

104
00:09:26,300 --> 00:09:32,177
so, then we found our packages and I need
to itch stall these packages, so I switch

105
00:09:32,177 --> 00:09:37,350
to\h‑‑ and we need to install these packages,
so I as much to terminal and install the commands

106
00:09:37,350 --> 00:09:40,320
for the packages I found.

107
00:09:40,320 --> 00:09:48,130
Next, well, what next\h‑‑ wait for a few
seconds or minutes depending on what it's

108
00:09:48,130 --> 00:09:56,750
going to download, and after that I open my
file from the terminal.

109
00:09:56,750 --> 00:09:58,990
And finally we're in the code.

110
00:09:58,990 --> 00:10:05,370
In my editor like ten minutes later, I begin
by requiring the modules I installed just

111
00:10:05,370 --> 00:10:08,480
before.

112
00:10:08,480 --> 00:10:13,680
And then I can write my function making use
of the modules I found.

113
00:10:13,680 --> 00:10:15,990
We'll do this in a demo.

114
00:10:15,990 --> 00:10:23,160
At last I explore my bacon pancake factory
function, we need to be a proper module citizen,

115
00:10:23,160 --> 00:10:27,950
then I go back to step one and two to find
and intell a suit suitable testing framework.

116
00:10:27,950 --> 00:10:38,380
I go back to\h‑‑ create a file that puts
the tests, sorry, create a file to put the

117
00:10:38,380 --> 00:10:43,931
test for our module N the test we're going
to require a test framework and our own module

118
00:10:43,931 --> 00:10:52,610
and finally write our test Phew! So, I don't
know about you, but, this is really complicated,

119
00:10:52,610 --> 00:10:56,160
this really sucks when you're maintaining
many small modules you have to do all most

120
00:10:56,160 --> 00:11:00,070
all of this by hand and many, many times.

121
00:11:00,070 --> 00:11:03,010
And it's incredibly easy to make mistakes.

122
00:11:03,010 --> 00:11:09,290
Of it also gets very repetitive for files
within the same package, for example, when

123
00:11:09,290 --> 00:11:14,600
you're building a react up with nicely separated
components in their own modules you'll have

124
00:11:14,600 --> 00:11:18,300
to require react in every single file.

125
00:11:18,300 --> 00:11:25,900
As programmers, seeing the same block of code
usually makes us forthing with rage! That's

126
00:11:25,900 --> 00:11:31,649
not Dry! But in case we accept our reality.

127
00:11:31,649 --> 00:11:33,320
Weird isn't it.

128
00:11:33,320 --> 00:11:44,399
Of so what if we went back to here and we
remove everything that isn't our code? If

129
00:11:44,399 --> 00:11:48,780
of we're left with function declaration.

130
00:11:48,780 --> 00:11:54,160
It's calling pancakes and bacon and it's passing
an array of results into fry.

131
00:11:54,160 --> 00:12:02,200
What if we just tried to run this now? We
better reports that some words are not defined\h‑‑

132
00:12:02,200 --> 00:12:09,090
well, of course, you might think, but think
for a moment, these are words that have meaning

133
00:12:09,090 --> 00:12:10,370
for us.

134
00:12:10,370 --> 00:12:14,560
We know that they exist, somewhere, and we
know what they're supposed to do, we have

135
00:12:14,560 --> 00:12:22,480
expectations if we understand them, why can't
the computer? So, to help the computer to

136
00:12:22,480 --> 00:12:27,420
understand, let's look at how the computer
sees code.

137
00:12:27,420 --> 00:12:32,800
This large blob of text is the abtract industry
and you don't need to read it.

138
00:12:32,800 --> 00:12:41,640
So, we search the DAC for words or in terms
of\h‑‑ identifier nodes.

139
00:12:41,640 --> 00:12:45,920
And each time we find an identifier we check
to see if it's been defind anywhere in our

140
00:12:45,920 --> 00:12:47,950
file.

141
00:12:47,950 --> 00:12:55,370
And since they're not defined in this case,
we get a list of these three identifiers.

142
00:12:55,370 --> 00:12:58,399
Which is what we saw before.

143
00:12:58,399 --> 00:13:08,730
So, we have our unknown identifiers, and we
match these against our known words.

144
00:13:08,730 --> 00:13:13,920
What are known words? They're things we remember.

145
00:13:13,920 --> 00:13:17,430
They're modules we've written ourselves.

146
00:13:17,430 --> 00:13:23,410
They're modules like\h‑‑ there are modules
on NPM like redact or load ash, or there are

147
00:13:23,410 --> 00:13:29,750
modules like note build like HTTP or FS.

148
00:13:29,750 --> 00:13:37,500
Well, it turns out that a simple functional
transformation of your code and a prediction

149
00:13:37,500 --> 00:13:44,980
of words that you're referred to yield the
expended code that you can run, and pass into

150
00:13:44,980 --> 00:13:55,140
note\h‑‑ and it works, prepending the
appropriate required calls and exporting your

151
00:13:55,140 --> 00:13:59,310
main module, we'll see that in a bit.

152
00:13:59,310 --> 00:14:04,420
So, and that means that a series of manual
commands that you have to enter into terminal

153
00:14:04,420 --> 00:14:10,250
and editor can be expressed by just mentioning
a word.

154
00:14:10,250 --> 00:14:14,980
I think that's a pretty powerful idea.

155
00:14:14,980 --> 00:14:19,290
So before we go to the demo ...

156
00:14:19,290 --> 00:14:21,930
I want to talk about building stuff.

157
00:14:21,930 --> 00:14:29,750
So, what does build mean in our context? It
means taking our source and our dependencies

158
00:14:29,750 --> 00:14:35,350
and creating something that can be executed
by node or a web browser.

159
00:14:35,350 --> 00:14:39,240
Docker is an amazing tool, we're going to
use it as a very efficient build system and

160
00:14:39,240 --> 00:14:47,860
"runtime" you can post a\h‑‑ archive of
your code and dependency to a docker DBHM

161
00:14:47,860 --> 00:14:53,769
point and it will extract the archive and
build our package running any commands we

162
00:14:53,769 --> 00:14:55,570
tell it to.

163
00:14:55,570 --> 00:14:59,779
And in the end, it will spit out a nice little
contain their can be run on any other docker

164
00:14:59,779 --> 00:15:01,290
host.

165
00:15:01,290 --> 00:15:06,120
That means we can run this container on our
local development environment, but also on

166
00:15:06,120 --> 00:15:12,120
a core OS cluster of thousands of nodes.

167
00:15:12,120 --> 00:15:16,990
At the end of the word look up face we end
up with a dependency tree.

168
00:15:16,990 --> 00:15:22,950
Sort of like an MPM shrink up file that includes
everything required to install something.

169
00:15:22,950 --> 00:15:24,190
Okay.

170
00:15:24,190 --> 00:15:26,660
Demo time.

171
00:15:26,660 --> 00:15:38,980
So, FN, F 1\h‑‑ thank you Jan that didn't
work (FN + F 1).

172
00:15:38,980 --> 00:15:44,420
>> Try it now.
>> Command ...

173
00:15:44,420 --> 00:15:51,709
yes! Are you seeing what I'm seeing? I think
so.

174
00:15:51,709 --> 00:15:56,920
So, this is my prototype editor.

175
00:15:56,920 --> 00:16:01,630
So we go in here and we have a name and we
have a description\h‑‑ hold on.

176
00:16:01,630 --> 00:16:10,259
6 (Making pang cakes that's what it's going
to make, pancake pancake (Singing).

177
00:16:10,259 --> 00:16:13,630
>> Can someone come up here and dance please.

178
00:16:13,630 --> 00:16:19,290
So, this is probably something went wrong
here because this function is returning a

179
00:16:19,290 --> 00:16:21,440
German sausage specialality.

180
00:16:21,440 --> 00:16:30,010
So, let's just, you know, turn this into something
which we want so making bacon pancakes means

181
00:16:30,010 --> 00:16:33,389
frying bacon and pancakes.

182
00:16:33,389 --> 00:16:36,820
And let's remove this comment.

183
00:16:36,820 --> 00:16:45,350
So we have used these words and our editor
knows that these are not defined yet, so we

184
00:16:45,350 --> 00:16:55,020
go in here in to bacon andism me meant this
function and we go back and it's defined.

185
00:16:55,020 --> 00:16:56,300
Magic.

186
00:16:56,300 --> 00:17:03,020
And liquid kind of magic and we go to pancakes
and we return pancakes.

187
00:17:03,020 --> 00:17:08,339
Go back again, another function defined and
there's one more left, which is frying, so

188
00:17:08,339 --> 00:17:16,500
frying means making a set of items hot, so
we take the items, we want to cook, and we

189
00:17:16,500 --> 00:17:19,000
join them in a string.

190
00:17:19,000 --> 00:17:20,410
Okay.

191
00:17:20,410 --> 00:17:21,410
So ...

192
00:17:21,410 --> 00:17:27,799
we go back once more and we have a program
which the computer is, fully able to understand

193
00:17:27,799 --> 00:17:31,400
and knows everything we're using in our program.

194
00:17:31,400 --> 00:17:35,000
But, we're not calling this function yet.

195
00:17:35,000 --> 00:17:38,250
Let's create a command line interface for
this.

196
00:17:38,250 --> 00:17:40,179
Okay, so ...

197
00:17:40,179 --> 00:17:45,309
we're going to build the JS Con of breakfast
modeling interface.

198
00:17:45,309 --> 00:17:49,360
So, it's a new module.

199
00:17:49,360 --> 00:18:02,299
And we are going to just\h‑‑ log\h‑‑
so we call our make bacon pancakes function

200
00:18:02,299 --> 00:18:07,080
and we also call the function we just defined
in our program.

201
00:18:07,080 --> 00:18:09,810
Makes sense? Okay.

202
00:18:09,810 --> 00:18:12,530
So, here comes the docker part.

203
00:18:12,530 --> 00:18:23,260
When I click "engage" this dependency tree,
which has been generated is going to be turned

204
00:18:23,260 --> 00:18:29,400
into a jarble archive and posted to the docker
Daem no which will turn it into a nice image

205
00:18:29,400 --> 00:18:32,330
we can execute.

206
00:18:32,330 --> 00:18:40,450
This is the name of the image, let's go to
my terminal and rune run it.

207
00:18:40,450 --> 00:18:56,080
Works (Applause) so, let's go into the docker
container and run bash.

208
00:18:56,080 --> 00:18:59,320
Free docker tutorial.

209
00:18:59,320 --> 00:19:06,470
So here we have index such as, which is\h‑‑
which has a required statement, we have to

210
00:19:06,470 --> 00:19:13,169
recall it typed into our editor and exporting
this thing as a module.

211
00:19:13,169 --> 00:19:19,130
And we also have\h‑‑ sorry, we also have
node modules with the function we referenced

212
00:19:19,130 --> 00:19:26,480
and there's another index of JS in here, which
is our making bacon pancake function, it is

213
00:19:26,480 --> 00:19:35,000
also requiring stuff this is probably very
obvious by now but, there's even more modules,

214
00:19:35,000 --> 00:19:36,000
right.

215
00:19:36,000 --> 00:19:42,690
And it's like bacon for example also as an
J S file and it's returning a string bacon

216
00:19:42,690 --> 00:19:44,610
and exporting itself.

217
00:19:44,610 --> 00:19:52,250
So, we turned this very simple to understand,
I would say, representation of a module hierarchy

218
00:19:52,250 --> 00:19:56,580
into something very obvious.

219
00:19:56,580 --> 00:20:03,919
So, the next step is kind of, you know, let's
go out of this container again, and just run

220
00:20:03,919 --> 00:20:10,920
it again, and I think this is a very sorry
amount of bacon pancakes for JSConf 2014,

221
00:20:10,920 --> 00:20:17,210
so let's go back and, you know, we could just
do this.

222
00:20:17,210 --> 00:20:23,690
(Laughing) run it multiple times and engage,
again.

223
00:20:23,690 --> 00:20:30,660
Write and run it, but it's not very exciting,
so I know a function on NPM which does this

224
00:20:30,660 --> 00:20:39,340
much Bert than I could do, so, not only does
our editor know words from our own creations,

225
00:20:39,340 --> 00:20:50,870
it also knows all the words which exit on
NPM so I can just reference load Ash and tell

226
00:20:50,870 --> 00:21:00,570
it to run 20 times, if works as expected,
click on this, it will open loadash on NPM

227
00:21:00,570 --> 00:21:10,780
that's what I was referencing, so we build
this again (Lodash) and I run it again and

228
00:21:10,780 --> 00:21:14,679
it works.

229
00:21:14,679 --> 00:21:26,210
(Applause) so, let's descend into the madness
of the container once more.

230
00:21:26,210 --> 00:21:37,290
This time my node modules had Lodash, it does
exactly what you would do if you wanted to

231
00:21:37,290 --> 00:21:40,169
install Lodash, it installs it.

232
00:21:40,169 --> 00:21:46,700
(Chuckles from the audience) so ...

233
00:21:46,700 --> 00:21:49,790
I would say one more thing, but it's not really
that special any way.

234
00:21:49,790 --> 00:21:56,530
One more thing, we created a CLI from our
make bacon pancakes, this is saw some, let's

235
00:21:56,530 --> 00:22:00,430
make them pancakes with maple syrup.

236
00:22:00,430 --> 00:22:01,500
Ummmm fantastic.

237
00:22:01,500 --> 00:22:08,270
Let's go back and recompile whatever our CLI.

238
00:22:08,270 --> 00:22:10,180
And run it again.

239
00:22:10,180 --> 00:22:11,730
Sorry.

240
00:22:11,730 --> 00:22:16,570
And we have maple syrup, it's really, I want
to change something off this program, I just

241
00:22:16,570 --> 00:22:24,260
do it, run it again and it works, I don't
have to bump dependencies or Synlink or whatever.

242
00:22:24,260 --> 00:22:29,700
\h‑‑ Symlink\h‑‑ or whatever.

243
00:22:29,700 --> 00:22:37,070
We could also turn this function into an API,
right, let's say we have the breakfast server,

244
00:22:37,070 --> 00:22:41,480
API,\h‑‑ sorry.

245
00:22:41,480 --> 00:22:51,140
Bacon pancake API, and, in here, we oar just
going to do the hello world example so we

246
00:22:51,140 --> 00:22:58,570
create a server and the computer is smart
because it knows suddenly what you already

247
00:22:58,570 --> 00:23:06,690
knew that HTTP is of course the built‑in
HTTP module node J S, so we're going to answer

248
00:23:06,690 --> 00:23:11,600
this request with a response and of course,
we're going to make bacon pancakes.

249
00:23:11,600 --> 00:23:25,380
And it works, so we call this function and
we listen to a port and for convenience reasons

250
00:23:25,380 --> 00:23:33,440
we're also going to add a log line.

251
00:23:33,440 --> 00:23:38,110
\h‑‑ what's the magic.P address, I don't
know, let's copy paste it.

252
00:23:38,110 --> 00:23:42,560
Okay this is the IP address of the docker
Daemon.

253
00:23:42,560 --> 00:23:54,790
Right, so we built this and there's some amazing
docker output.

254
00:23:54,790 --> 00:23:56,490
And we run this ...

255
00:23:56,490 --> 00:24:01,020
what was the name? Bacon pancake A PI, it's
great if all you have to do is remember names

256
00:24:01,020 --> 00:24:04,980
of things.

257
00:24:04,980 --> 00:24:12,730
Okay, and it works.

258
00:24:12,730 --> 00:24:22,240
(Applause) so, such timing, very on time.

259
00:24:22,240 --> 00:24:29,610
Ooops, you're not supposed to see this, this
is my reality, let's switch back to your reality.

260
00:24:29,610 --> 00:24:32,570
Yes.

261
00:24:32,570 --> 00:24:33,570
So ...

262
00:24:33,570 --> 00:24:34,570
this is happening.

263
00:24:34,570 --> 00:24:37,590
There are smart people who are already doing
stuff like this.

264
00:24:37,590 --> 00:24:44,320
For example hoodies semantic release completely
automates process for publically releasing

265
00:24:44,320 --> 00:24:46,230
new software bundles.

266
00:24:46,230 --> 00:24:48,220
Basically all you do is the local part.

267
00:24:48,220 --> 00:24:52,909
You say I want a new origin and I want it
to be a patch, and it even knows that you

268
00:24:52,909 --> 00:24:57,640
can say I want a new version, it's going to
figure out your comments and figure out the

269
00:24:57,640 --> 00:25:01,080
kind of release you want to do.

270
00:25:01,080 --> 00:25:02,830
Have a look.

271
00:25:02,830 --> 00:25:08,050
And, as anything that will ever be done in
the next fifty year in software development

272
00:25:08,050 --> 00:25:11,600
most of it will already have been done by
mad scientist on this IRC channel ...

273
00:25:11,600 --> 00:25:15,330
it's true.

274
00:25:15,330 --> 00:25:18,800
Look into the log files.

275
00:25:18,800 --> 00:25:19,800
So ...

276
00:25:19,800 --> 00:25:29,270
I want to thank you and I want to thank great
friends who gave\h‑‑ who give me great

277
00:25:29,270 --> 00:25:31,590
ideas and people who support you.

278
00:25:31,590 --> 00:25:37,520
I'm working on this stuff right now I would
like to ship it to you and I for one am looking

279
00:25:37,520 --> 00:25:40,030
forward to the party now.

