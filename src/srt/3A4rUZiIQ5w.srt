1
00:00:08,240 --> 00:00:11,340

so no it has really great HTTP support I

2
00:00:11,340 --> 00:00:13,230
don't know if you guys really appreciate

3
00:00:13,230 --> 00:00:15,509
this but I mean compared to Ruby or

4
00:00:15,509 --> 00:00:17,730
Python it's pretty phenomenal like I've

5
00:00:17,730 --> 00:00:19,920
dealt a lot with the lower level Ruby

6
00:00:19,920 --> 00:00:22,470
and Python HTTP stack and there's so

7
00:00:22,470 --> 00:00:24,750
many bugs and oversights and it's just

8
00:00:24,750 --> 00:00:26,460
generally not usually very performant at

9
00:00:26,460 --> 00:00:29,250
all and to put this in perspective for

10
00:00:29,250 --> 00:00:31,740
node node Z should be support is

11
00:00:31,740 --> 00:00:33,329
probably a little bit better than curls

12
00:00:33,329 --> 00:00:35,010
right now like there are bugs that we've

13
00:00:35,010 --> 00:00:36,300
fixed at this point that we know are

14
00:00:36,300 --> 00:00:38,700
open curl bugs that aren't planning on

15
00:00:38,700 --> 00:00:41,219
being fixed ever and we have fix those

16
00:00:41,219 --> 00:00:43,920
in the know to implementation and count

17
00:00:43,920 --> 00:00:46,469
only supports HTTP there is no other

18
00:00:46,469 --> 00:00:48,899
format I didn't invent its own binary

19
00:00:48,899 --> 00:00:50,129
protocol we want you to be able to talk

20
00:00:50,129 --> 00:00:51,890
to it from the browser and all that so

21
00:00:51,890 --> 00:00:54,780
that's a really good fit I spent like a

22
00:00:54,780 --> 00:00:55,920
lot of the problems we've had with

23
00:00:55,920 --> 00:00:57,930
client libraries in Python and Ruby is

24
00:00:57,930 --> 00:00:59,550
just that trying to make them really

25
00:00:59,550 --> 00:01:00,899
fast and perform it we always hit this

26
00:01:00,899 --> 00:01:02,520
bottleneck of HTTP and that's just never

27
00:01:02,520 --> 00:01:13,140
an issue with no oh really okay up I can

28
00:01:13,140 --> 00:01:15,090
I can probably speak up a bit if we

29
00:01:15,090 --> 00:01:16,470
don't even yeah cuz I don't even know

30
00:01:16,470 --> 00:01:19,920
where the button is to turn it up so all

31
00:01:19,920 --> 00:01:24,969
right let's speak a little bit louder

32
00:01:24,979 --> 00:01:28,470
okay and concurrency so yeah I noticed

33
00:01:28,470 --> 00:01:30,270
phenomenal at concurrency it has all

34
00:01:30,270 --> 00:01:32,490
this beautiful async I own it and that's

35
00:01:32,490 --> 00:01:34,110
another problem that we've always run

36
00:01:34,110 --> 00:01:35,880
into is the cash to be is optimized for

37
00:01:35,880 --> 00:01:37,500
being incredibly concurrent because we

38
00:01:37,500 --> 00:01:38,670
actually want you to connect to it from

39
00:01:38,670 --> 00:01:40,860
the browser so we've got to handle tens

40
00:01:40,860 --> 00:01:42,299
to hundreds of thousands of concurrent

41
00:01:42,299 --> 00:01:43,439
connections all the time that's how

42
00:01:43,439 --> 00:01:44,579
we've always optimized from the

43
00:01:44,579 --> 00:01:47,100
beginning but then people plug in their

44
00:01:47,100 --> 00:01:49,079
traditional Python or Ruby stack and

45
00:01:49,079 --> 00:01:50,790
usually when they talk to a database

46
00:01:50,790 --> 00:01:51,840
they try to limit the number of

47
00:01:51,840 --> 00:01:53,700
connections that they do and they're not

48
00:01:53,700 --> 00:01:55,320
very good at concurrency themselves and

49
00:01:55,320 --> 00:01:56,969
that's just never an issue in note it's

50
00:01:56,969 --> 00:01:58,530
always very very fast and very beautiful

51
00:01:58,530 --> 00:02:00,600
and a lot of other databases aren't

52
00:02:00,600 --> 00:02:02,009
optimized for concurrent access either

53
00:02:02,009 --> 00:02:04,799
and nodes the whole system is optimized

54
00:02:04,799 --> 00:02:06,869
for concurrent access so that's really

55
00:02:06,869 --> 00:02:08,759
good sometimes when you take two things

56
00:02:08,759 --> 00:02:10,080
that are both

57
00:02:10,080 --> 00:02:11,610
really really awesome and you put them

58
00:02:11,610 --> 00:02:13,620
together you get something even more

59
00:02:13,620 --> 00:02:15,780
awesome and you didn't even realize how

60
00:02:15,780 --> 00:02:17,640
great it could be kinda like you took

61
00:02:17,640 --> 00:02:20,700
curry and like wieners and like you know

62
00:02:20,700 --> 00:02:22,530
delicious sausages and put them together

63
00:02:22,530 --> 00:02:25,260
you'd have something you didn't even

64
00:02:25,260 --> 00:02:29,910
know could blow your mind like this all

65
00:02:29,910 --> 00:02:33,720
right so there's a lot of libraries one

66
00:02:33,720 --> 00:02:35,400
of the things that notes support for a

67
00:02:35,400 --> 00:02:38,220
CV being so good and the HP API and

68
00:02:38,220 --> 00:02:39,870
couch being pretty simple is that

69
00:02:39,870 --> 00:02:41,730
anybody can write their own library all

70
00:02:41,730 --> 00:02:43,590
the time so of course we have a bunch I

71
00:02:43,590 --> 00:02:45,360
think we're probably averaging about one

72
00:02:45,360 --> 00:02:50,640
a month right now so I'd love to be able

73
00:02:50,640 --> 00:02:52,200
to tell you that like well this library

74
00:02:52,200 --> 00:02:53,459
is really great at this thing and this

75
00:02:53,459 --> 00:02:55,020
one is really great for this other use

76
00:02:55,020 --> 00:02:57,720
case and they all have their own little

77
00:02:57,720 --> 00:02:59,130
features in their niches and they're

78
00:02:59,130 --> 00:03:00,360
definitely very opinionated but the

79
00:03:00,360 --> 00:03:01,560
biggest difference between them is just

80
00:03:01,560 --> 00:03:05,550
who wrote them so so basically if you

81
00:03:05,550 --> 00:03:07,680
like one of these programmers where you

82
00:03:07,680 --> 00:03:09,000
want to talk to them about their library

83
00:03:09,000 --> 00:03:10,709
because like half of them are here I

84
00:03:10,709 --> 00:03:12,630
would just do that because there's there

85
00:03:12,630 --> 00:03:14,310
really isn't like a feature graphic you

86
00:03:14,310 --> 00:03:15,209
can put up there they're all pretty

87
00:03:15,209 --> 00:03:17,730
comparable and that put their pictures

88
00:03:17,730 --> 00:03:19,830
up there so you can find them I don't

89
00:03:19,830 --> 00:03:21,000
know if cloud heads here but he didn't

90
00:03:21,000 --> 00:03:22,739
have a picture so I just grabbed a cloud

91
00:03:22,739 --> 00:03:24,769
from final fantasy and put them up there

92
00:03:24,769 --> 00:03:29,310
and I also that's not a super close end

93
00:03:29,310 --> 00:03:30,989
picture of felix so I found a bigger one

94
00:03:30,989 --> 00:03:35,370
so yeah just look for him and you'll

95
00:03:35,370 --> 00:03:38,459
know where you got ok so good the other

96
00:03:38,459 --> 00:03:40,170
thing about oh god that lines in the

97
00:03:40,170 --> 00:03:44,130
wrong place I saw my slides basically

98
00:03:44,130 --> 00:03:46,410
keynote crashed and i lost all my slides

99
00:03:46,410 --> 00:03:48,959
and so i had to redo them and so some of

100
00:03:48,959 --> 00:03:50,450
them are kind of up and I'm sorry

101
00:03:50,450 --> 00:03:53,489
so this here is using my high-level

102
00:03:53,489 --> 00:03:55,620
request library it's just a little bit

103
00:03:55,620 --> 00:03:57,480
simpler than nodes regular HTTP stuff

104
00:03:57,480 --> 00:03:59,910
and this hopefully actually is going to

105
00:03:59,910 --> 00:04:01,650
go into core I sent out the email today

106
00:04:01,650 --> 00:04:02,970
so hopefully we'll get something like

107
00:04:02,970 --> 00:04:04,620
this in the node core and it'll be a

108
00:04:04,620 --> 00:04:06,450
little bit easier to do get in post

109
00:04:06,450 --> 00:04:08,910
requests with just one or two limes but

110
00:04:08,910 --> 00:04:10,530
anyway this is how you would talk to

111
00:04:10,530 --> 00:04:13,920
CouchDB without a library the CouchDB

112
00:04:13,920 --> 00:04:15,750
API itself is very well defined it's

113
00:04:15,750 --> 00:04:18,959
very simple it's all HTTP this is how

114
00:04:18,959 --> 00:04:21,090
mean a lot of other people access couch

115
00:04:21,090 --> 00:04:21,410
and

116
00:04:21,410 --> 00:04:22,700
don't try to go through an infection or

117
00:04:22,700 --> 00:04:24,920
a library just because sometimes those

118
00:04:24,920 --> 00:04:26,690
abstractions leak or we need to get new

119
00:04:26,690 --> 00:04:28,720
features into them or you know whatever

120
00:04:28,720 --> 00:04:31,310
we know that the HTTP support and node

121
00:04:31,310 --> 00:04:32,270
has everything that we're ever going to

122
00:04:32,270 --> 00:04:34,130
need and we know the couch API well

123
00:04:34,130 --> 00:04:36,170
enough and if you just want to learn the

124
00:04:36,170 --> 00:04:37,910
couch API and go through the wiki and

125
00:04:37,910 --> 00:04:39,920
just look at the raw HTTP API it's

126
00:04:39,920 --> 00:04:41,300
really not very hard at all it's not

127
00:04:41,300 --> 00:04:42,530
like you were trying to write a driver

128
00:04:42,530 --> 00:04:45,680
for my sequel or something so yeah this

129
00:04:45,680 --> 00:04:47,720
will use that pretend that line down

130
00:04:47,720 --> 00:04:49,940
there isn't it further slide like in the

131
00:04:49,940 --> 00:04:56,210
future okay so couch ABS just do people

132
00:04:56,210 --> 00:04:58,010
here kind of know the idea behind couch

133
00:04:58,010 --> 00:05:02,150
apps at all so like for okay oh there's

134
00:05:02,150 --> 00:05:04,070
more there's more okay all right cool so

135
00:05:04,070 --> 00:05:06,200
the idea of couch apps is that rather

136
00:05:06,200 --> 00:05:07,700
than having like this middle layer

137
00:05:07,700 --> 00:05:09,800
between the browser and the database you

138
00:05:09,800 --> 00:05:12,020
can embed especially for simpler

139
00:05:12,020 --> 00:05:13,460
applications you can embed pretty much

140
00:05:13,460 --> 00:05:16,250
all of the application logic in the

141
00:05:16,250 --> 00:05:18,320
CouchDB into the database and then you

142
00:05:18,320 --> 00:05:20,150
don't have a lot of extra round trips

143
00:05:20,150 --> 00:05:21,770
catch 2 b's very good at concurrency

144
00:05:21,770 --> 00:05:24,140
bubble blog also these applications now

145
00:05:24,140 --> 00:05:26,510
it can replicate around so if you have a

146
00:05:26,510 --> 00:05:27,860
mobile phone and you want to talk to

147
00:05:27,860 --> 00:05:29,840
your application offline and then come

148
00:05:29,840 --> 00:05:32,930
back up you can replicate with some

149
00:05:32,930 --> 00:05:34,730
cloud server and then the application

150
00:05:34,730 --> 00:05:37,520
and the data gets synced around so yeah

151
00:05:37,520 --> 00:05:39,470
that's the idea behind couch apps but

152
00:05:39,470 --> 00:05:41,930
here's the problem with couch apps the

153
00:05:41,930 --> 00:05:44,300
only tool right now well there's a

154
00:05:44,300 --> 00:05:46,430
couple tools but the main tool is this

155
00:05:46,430 --> 00:05:48,470
Python tool called captain Benoit wrote

156
00:05:48,470 --> 00:05:52,640
you did a great job not knocking it but

157
00:05:52,640 --> 00:05:54,800
because the tool isn't Python because I

158
00:05:54,800 --> 00:05:56,210
don't think no really existed would

159
00:05:56,210 --> 00:06:00,020
Benoit started this you had to kind of

160
00:06:00,020 --> 00:06:03,290
map the little j's functions and little

161
00:06:03,290 --> 00:06:05,690
attributes that end up going into this

162
00:06:05,690 --> 00:06:07,250
design document it's all just one big

163
00:06:07,250 --> 00:06:10,160
JSON document at some point it gets run

164
00:06:10,160 --> 00:06:12,530
in like a JavaScript view server so all

165
00:06:12,530 --> 00:06:14,090
these little JavaScript files or

166
00:06:14,090 --> 00:06:15,410
everywhere in the file system because

167
00:06:15,410 --> 00:06:17,030
with the tool being in Python it's not

168
00:06:17,030 --> 00:06:18,410
like you could just write some literals

169
00:06:18,410 --> 00:06:20,750
or you know scope out an object and then

170
00:06:20,750 --> 00:06:22,190
just kind of dynamically be like I want

171
00:06:22,190 --> 00:06:23,720
this piece here or that piece there so

172
00:06:23,720 --> 00:06:25,669
what you end up with is a directory

173
00:06:25,669 --> 00:06:27,169
structure kind of like this and you can

174
00:06:27,169 --> 00:06:29,090
see a lot of things that make this hard

175
00:06:29,090 --> 00:06:31,400
to use like I mean for one there's just

176
00:06:31,400 --> 00:06:33,169
a ton of

177
00:06:33,169 --> 00:06:35,240
different directories everywhere like I

178
00:06:35,240 --> 00:06:37,789
mean if you didn't think that Java had

179
00:06:37,789 --> 00:06:39,259
enough directories and little files in

180
00:06:39,259 --> 00:06:42,740
it then like you're gonna love this it's

181
00:06:42,740 --> 00:06:44,569
awesome and and the best part is that

182
00:06:44,569 --> 00:06:46,520
like you'll have a directory of eight

183
00:06:46,520 --> 00:06:48,259
files for like your views and they'll

184
00:06:48,259 --> 00:06:50,749
all have a map jf so once they're open

185
00:06:50,749 --> 00:06:52,189
in little tabs there's no way to tell

186
00:06:52,189 --> 00:06:53,779
them apart unless you click back on them

187
00:06:53,779 --> 00:06:55,879
in the directory tree she would be

188
00:06:55,879 --> 00:06:57,169
editing one of your map so then you're

189
00:06:57,169 --> 00:06:58,939
like oh wait that's the wrong map

190
00:06:58,939 --> 00:07:00,560
and there wasn't really a lot to tell me

191
00:07:00,560 --> 00:07:04,279
about that so yeah that's some of the

192
00:07:04,279 --> 00:07:05,719
pains you go through working with that

193
00:07:05,719 --> 00:07:08,629
so to try and make that try and decrease

194
00:07:08,629 --> 00:07:12,110
that pain a little bit I wrote an ode

195
00:07:12,110 --> 00:07:15,379
thing it's a new API and a new sink

196
00:07:15,379 --> 00:07:17,150
script that doesn't use this directory

197
00:07:17,150 --> 00:07:18,770
structure but gives you an alternate way

198
00:07:18,770 --> 00:07:20,960
to define couch apps because couch apps

199
00:07:20,960 --> 00:07:22,580
are just design documents with a bunch

200
00:07:22,580 --> 00:07:23,689
of application code in them they're

201
00:07:23,689 --> 00:07:25,939
basically just a big Jason thing with

202
00:07:25,939 --> 00:07:28,370
some you know functions in them so this

203
00:07:28,370 --> 00:07:30,139
is kind of the simplest case right here

204
00:07:30,139 --> 00:07:32,180
this is this is actually a sandy

205
00:07:32,180 --> 00:07:35,419
application that i wrote to do graphing

206
00:07:35,419 --> 00:07:37,699
for performance analysis of CouchDB it's

207
00:07:37,699 --> 00:07:38,779
a pretty cool app and we do really

208
00:07:38,779 --> 00:07:41,419
pretty graphs with it but it doesn't

209
00:07:41,419 --> 00:07:43,219
require anything fancy on the couch and

210
00:07:43,219 --> 00:07:44,779
because all it really is is a sammie

211
00:07:44,779 --> 00:07:47,479
script I just want to like do some

212
00:07:47,479 --> 00:07:49,669
rewrites to map it to slash and map the

213
00:07:49,669 --> 00:07:51,889
database to the API and then map

214
00:07:51,889 --> 00:07:53,779
everything else all of the attachments

215
00:07:53,779 --> 00:07:56,659
like CSS and all my different JavaScript

216
00:07:56,659 --> 00:07:58,129
files that are attachments I just want

217
00:07:58,129 --> 00:07:59,539
to scope them to the design document

218
00:07:59,539 --> 00:08:01,339
itself so I have these couple of rewrite

219
00:08:01,339 --> 00:08:04,399
rules in there and that I have a thing

220
00:08:04,399 --> 00:08:05,749
that just loads the attachments from a

221
00:08:05,749 --> 00:08:07,219
directory and then all of those

222
00:08:07,219 --> 00:08:08,659
attachments now will go into the design

223
00:08:08,659 --> 00:08:10,909
document and then if we go back a few

224
00:08:10,909 --> 00:08:12,499
slides so pretend that that line right

225
00:08:12,499 --> 00:08:13,729
there is at the autumn of the other

226
00:08:13,729 --> 00:08:16,430
slide this is the script to use to sync

227
00:08:16,430 --> 00:08:18,889
that application to catch DB and the

228
00:08:18,889 --> 00:08:20,419
nice thing is that after it stinks it

229
00:08:20,419 --> 00:08:22,370
will actually stay open and use nodes

230
00:08:22,370 --> 00:08:24,499
file Walters to take any changes that

231
00:08:24,499 --> 00:08:25,789
happen on that and push it up to the

232
00:08:25,789 --> 00:08:27,830
database so one of the things that we've

233
00:08:27,830 --> 00:08:28,849
been trying to do for a really long time

234
00:08:28,849 --> 00:08:32,569
is make couch app development as easy as

235
00:08:32,569 --> 00:08:35,120
developing a local application like if

236
00:08:35,120 --> 00:08:36,229
you were just going to pull up a

237
00:08:36,229 --> 00:08:37,909
directory of CSS and JavaScript and hack

238
00:08:37,909 --> 00:08:40,610
on that like it's so fast and so nice to

239
00:08:40,610 --> 00:08:42,680
do like I pull up textmate and I have it

240
00:08:42,680 --> 00:08:45,150
actually save on application switch so

241
00:08:45,150 --> 00:08:46,680
just command tab back to the browser and

242
00:08:46,680 --> 00:08:48,210
refresh and it's really easy to

243
00:08:48,210 --> 00:08:50,490
development and trying to do that with

244
00:08:50,490 --> 00:08:51,840
couchdb there's like all these layers in

245
00:08:51,840 --> 00:08:53,730
between and keeping that fast is kind of

246
00:08:53,730 --> 00:08:56,640
hard when I was developing this app I

247
00:08:56,640 --> 00:08:58,830
left to that node sync script running

248
00:08:58,830 --> 00:09:01,470
for three days and completely forgot

249
00:09:01,470 --> 00:09:02,430
that it was there and that I was

250
00:09:02,430 --> 00:09:04,320
developing against remote server I would

251
00:09:04,320 --> 00:09:06,480
just like command tab back and forth

252
00:09:06,480 --> 00:09:08,700
from my editor to to the browser and it

253
00:09:08,700 --> 00:09:09,930
would always be updated with the change

254
00:09:09,930 --> 00:09:12,180
code and I also i mean i left him

255
00:09:12,180 --> 00:09:13,950
running for three days between laptop

256
00:09:13,950 --> 00:09:16,320
open and closes and I didn't even notice

257
00:09:16,320 --> 00:09:18,720
the process running it didn't leak any

258
00:09:18,720 --> 00:09:19,950
memory anything like if that was a

259
00:09:19,950 --> 00:09:21,090
Python process it would have just

260
00:09:21,090 --> 00:09:22,800
decided to eat a whole core for no

261
00:09:22,800 --> 00:09:26,190
reason like that's kind of a testament

262
00:09:26,190 --> 00:09:27,630
to how awesome a lot of the node file

263
00:09:27,630 --> 00:09:29,400
watcher stuff is right now and we're

264
00:09:29,400 --> 00:09:31,200
still improving it so that's also good

265
00:09:31,200 --> 00:09:34,320
um yeah so that stuff is just awesome

266
00:09:34,320 --> 00:09:37,530
for more complicated applications you

267
00:09:37,530 --> 00:09:39,630
can do a lot more stuff with this script

268
00:09:39,630 --> 00:09:42,030
so you can load up common J's modules

269
00:09:42,030 --> 00:09:43,740
and then you can also load them as files

270
00:09:43,740 --> 00:09:46,050
as attachments that's really cool

271
00:09:46,050 --> 00:09:48,000
because a lot of these comedies modules

272
00:09:48,000 --> 00:09:49,920
we can share between the server and the

273
00:09:49,920 --> 00:09:54,150
client and like the inside of CouchDB

274
00:09:54,150 --> 00:09:56,460
and underscore utils there's a jQuery

275
00:09:56,460 --> 00:09:59,220
couch API and that includes a require in

276
00:09:59,220 --> 00:10:00,690
it so you can just tell it what design

277
00:10:00,690 --> 00:10:02,460
document to go after and you can load

278
00:10:02,460 --> 00:10:04,350
all the common J's modules do you use in

279
00:10:04,350 --> 00:10:07,980
the view server yeah so I can just start

280
00:10:07,980 --> 00:10:09,810
adding arbitrary attributes to the

281
00:10:09,810 --> 00:10:11,190
design document which is really nice

282
00:10:11,190 --> 00:10:12,840
instead of showing this functions and

283
00:10:12,840 --> 00:10:15,660
stuff here you see the the reread all

284
00:10:15,660 --> 00:10:20,610
over again go to the next page so here's

285
00:10:20,610 --> 00:10:22,440
how you would do add your map reduces

286
00:10:22,440 --> 00:10:24,840
you can like this is so much easier that

287
00:10:24,840 --> 00:10:27,480
used to be two directories and a single

288
00:10:27,480 --> 00:10:29,400
small javascript file with three lines

289
00:10:29,400 --> 00:10:33,180
in it and now it's just in line the only

290
00:10:33,180 --> 00:10:34,740
thing here is that it's it's kind of

291
00:10:34,740 --> 00:10:36,600
fake it's kind of a trick like you can't

292
00:10:36,600 --> 00:10:38,520
reference a closure from the from the

293
00:10:38,520 --> 00:10:40,320
base of this module inside of this

294
00:10:40,320 --> 00:10:41,610
function because it's going to happen is

295
00:10:41,610 --> 00:10:43,350
it's going to get too strained and then

296
00:10:43,350 --> 00:10:44,850
loaded in a totally different context in

297
00:10:44,850 --> 00:10:46,680
the view server so it's really just a

298
00:10:46,680 --> 00:10:48,780
convenience for definition it's it's not

299
00:10:48,780 --> 00:10:50,520
like this whole thing gets loaded in and

300
00:10:50,520 --> 00:10:52,440
interpreted like this at any other time

301
00:10:52,440 --> 00:10:54,000
other than when we imported it into node

302
00:10:54,000 --> 00:10:57,860
and convert it into a design document um

303
00:10:57,860 --> 00:11:02,060
once we got we got an update function no

304
00:11:02,060 --> 00:11:03,860
no sorry that's a show function shell

305
00:11:03,860 --> 00:11:05,450
functions are really nice so one of the

306
00:11:05,450 --> 00:11:07,519
problems that you have like if you if

307
00:11:07,519 --> 00:11:09,470
all of your app code is a sandy app then

308
00:11:09,470 --> 00:11:10,940
it can't really be indexed by Google

309
00:11:10,940 --> 00:11:12,860
because that's just one page like you

310
00:11:12,860 --> 00:11:13,850
know totally different content

311
00:11:13,850 --> 00:11:15,620
variations at the end so the show

312
00:11:15,620 --> 00:11:17,440
function is just a catchy function that

313
00:11:17,440 --> 00:11:19,820
inside of the Earl will take a single

314
00:11:19,820 --> 00:11:22,670
document ID and then it will pass that

315
00:11:22,670 --> 00:11:24,649
document to this function and you can do

316
00:11:24,649 --> 00:11:26,240
stuff like grab some mustache templates

317
00:11:26,240 --> 00:11:28,730
and return HTML you can also you if you

318
00:11:28,730 --> 00:11:30,260
wanted to return in RSS feed you could

319
00:11:30,260 --> 00:11:32,120
do that for also speeds actually you

320
00:11:32,120 --> 00:11:34,490
should probably use a list function so a

321
00:11:34,490 --> 00:11:36,110
list function is it's similar to a show

322
00:11:36,110 --> 00:11:38,660
function but what you do is you tell it

323
00:11:38,660 --> 00:11:40,459
what view you want to hit and what query

324
00:11:40,459 --> 00:11:41,810
you want to do against that view and

325
00:11:41,810 --> 00:11:45,860
then row by row you can iteratively go

326
00:11:45,860 --> 00:11:48,800
over that entire query and return an

327
00:11:48,800 --> 00:11:50,329
HTML page for that so that would be

328
00:11:50,329 --> 00:11:52,820
really good for like an RSS feed so you

329
00:11:52,820 --> 00:11:54,950
just do a rewriter that defaulted to you

330
00:11:54,950 --> 00:11:57,320
know limit 10 and you get the last 10

331
00:11:57,320 --> 00:12:00,579
articles for you know some time stamp

332
00:12:00,579 --> 00:12:03,740
and then you would just pass that into

333
00:12:03,740 --> 00:12:05,180
this list function and then you would

334
00:12:05,180 --> 00:12:07,370
return some XML you can change all the

335
00:12:07,370 --> 00:12:08,810
headers and all that kind of stuff it's

336
00:12:08,810 --> 00:12:11,420
pretty simple there are a couple

337
00:12:11,420 --> 00:12:12,829
performance problems with this right now

338
00:12:12,829 --> 00:12:18,050
but we're working on it ok one of the

339
00:12:18,050 --> 00:12:20,180
nice cool thing I'm realizing how short

340
00:12:20,180 --> 00:12:21,170
this is going to be at this point

341
00:12:21,170 --> 00:12:22,430
because this is like the last thing that

342
00:12:22,430 --> 00:12:25,399
I was talking about so usually when

343
00:12:25,399 --> 00:12:27,709
people go like i will use noting CouchDB

344
00:12:27,709 --> 00:12:29,360
this is what they want to do they

345
00:12:29,360 --> 00:12:31,370
initially want to you know slot node

346
00:12:31,370 --> 00:12:33,680
into where they used to have Python or

347
00:12:33,680 --> 00:12:35,779
Ruby or something like if they're really

348
00:12:35,779 --> 00:12:38,959
unlucky Java and then you know they want

349
00:12:38,959 --> 00:12:40,850
to put couch behind it like they used to

350
00:12:40,850 --> 00:12:43,010
with their old database and one of the

351
00:12:43,010 --> 00:12:44,269
reasons the people always did that with

352
00:12:44,269 --> 00:12:45,260
their all databases they're all

353
00:12:45,260 --> 00:12:47,209
databases didn't talk HTTP you know that

354
00:12:47,209 --> 00:12:48,470
was their only option was to put it

355
00:12:48,470 --> 00:12:50,480
behind something they could take HTTP

356
00:12:50,480 --> 00:12:51,640
requests and then talk to the database

357
00:12:51,640 --> 00:12:54,079
so this is where we've been using a

358
00:12:54,079 --> 00:12:55,730
little bit lately because there's some

359
00:12:55,730 --> 00:12:57,140
stuff that you just can't do instead of

360
00:12:57,140 --> 00:12:59,120
the catch to be view server like inside

361
00:12:59,120 --> 00:13:00,440
of those shown this functions you can't

362
00:13:00,440 --> 00:13:03,140
just go and like send an email or go and

363
00:13:03,140 --> 00:13:04,730
like request some remote content from a

364
00:13:04,730 --> 00:13:06,589
site like you're in a sandbox one of the

365
00:13:06,589 --> 00:13:07,880
reasons you're in a sandbox is because

366
00:13:07,880 --> 00:13:08,930
we want you to be able to replicate

367
00:13:08,930 --> 00:13:10,889
applications from different people

368
00:13:10,889 --> 00:13:12,779
that are essentially untrusted like

369
00:13:12,779 --> 00:13:14,489
they're going to be walked into that

370
00:13:14,489 --> 00:13:15,989
database and only have access to that

371
00:13:15,989 --> 00:13:17,189
database they're not going to be able to

372
00:13:17,189 --> 00:13:19,519
get at your personal information and uh

373
00:13:19,519 --> 00:13:21,629
because of the way that we host and

374
00:13:21,629 --> 00:13:23,579
rewriter stuff works they're totally

375
00:13:23,579 --> 00:13:25,019
locked into all their session

376
00:13:25,019 --> 00:13:26,369
information only being able to access

377
00:13:26,369 --> 00:13:28,139
that and then the view server we also

378
00:13:28,139 --> 00:13:30,359
lock it down so you can really just

379
00:13:30,359 --> 00:13:32,009
install applications into your caps DB

380
00:13:32,009 --> 00:13:33,239
and not worry about them like you don't

381
00:13:33,239 --> 00:13:37,230
worry about visiting websites so yeah

382
00:13:37,230 --> 00:13:38,790
but because there are some deficiencies

383
00:13:38,790 --> 00:13:42,899
we started working on this and there's a

384
00:13:42,899 --> 00:13:45,629
couple of different permutations of this

385
00:13:45,629 --> 00:13:47,459
paradigm right here like Chris has one

386
00:13:47,459 --> 00:13:49,169
and I've been working on this and I

387
00:13:49,169 --> 00:13:50,459
think somebody else won't run as well

388
00:13:50,459 --> 00:13:52,350
I'm going to talk about mine a little

389
00:13:52,350 --> 00:13:53,999
bit because the idea is a little bit

390
00:13:53,999 --> 00:13:57,059
further along so couchdb has this

391
00:13:57,059 --> 00:13:58,679
awesome awesome feature called

392
00:13:58,679 --> 00:14:00,839
underscore changes so you do an HTTP

393
00:14:00,839 --> 00:14:02,279
request to underscore changes and you

394
00:14:02,279 --> 00:14:04,829
get the sequence index for the database

395
00:14:04,829 --> 00:14:06,929
which is essentially every document in

396
00:14:06,929 --> 00:14:09,829
the database right now has like a

397
00:14:09,829 --> 00:14:13,350
sequence where it was last updated or

398
00:14:13,350 --> 00:14:14,939
deleted or whatever inside of the

399
00:14:14,939 --> 00:14:16,649
database so you can literally

400
00:14:16,649 --> 00:14:18,119
reconstruct the entire database by

401
00:14:18,119 --> 00:14:19,860
hitting this changes feed but you can

402
00:14:19,860 --> 00:14:23,100
also use long pole against it with the

403
00:14:23,100 --> 00:14:24,540
last sequence ID that you had you can

404
00:14:24,540 --> 00:14:27,869
also do a continuous feed so in node and

405
00:14:27,869 --> 00:14:30,749
if you really hack up the Firefox is our

406
00:14:30,749 --> 00:14:33,269
object you can do this as well you can

407
00:14:33,269 --> 00:14:36,059
get a real-time feed of this entire API

408
00:14:36,059 --> 00:14:37,709
and we'll have WebSocket support as soon

409
00:14:37,709 --> 00:14:39,899
as we get it in a Moche web so basically

410
00:14:39,899 --> 00:14:42,629
you can get push notifications to the

411
00:14:42,629 --> 00:14:44,970
browser or to whatever code that you're

412
00:14:44,970 --> 00:14:46,769
writing in real time from the database

413
00:14:46,769 --> 00:14:50,549
it's very very nice and of course node

414
00:14:50,549 --> 00:14:52,199
can talk to this as well and it's even

415
00:14:52,199 --> 00:14:54,929
better at parsing it so this thing we've

416
00:14:54,929 --> 00:14:58,259
been working on is node 1 node process

417
00:14:58,259 --> 00:14:59,970
sits on the changes feed for every

418
00:14:59,970 --> 00:15:01,919
database and it's also checking all the

419
00:15:01,919 --> 00:15:02,939
time to see if there's been any new

420
00:15:02,939 --> 00:15:05,220
database is created when it gets a

421
00:15:05,220 --> 00:15:08,189
design document added who is it changes

422
00:15:08,189 --> 00:15:12,359
attribute it actually takes that this

423
00:15:12,359 --> 00:15:14,839
whatever code is in the string here and

424
00:15:14,839 --> 00:15:18,660
it evals it in a new nodejs process the

425
00:15:18,660 --> 00:15:20,009
reason that we fought that into its own

426
00:15:20,009 --> 00:15:20,449
process

427
00:15:20,449 --> 00:15:23,119
is so that when you update it again we

428
00:15:23,119 --> 00:15:24,470
can just leave that one around for a

429
00:15:24,470 --> 00:15:25,939
little bit let it clear out and start a

430
00:15:25,939 --> 00:15:27,439
new process and start having that handle

431
00:15:27,439 --> 00:15:31,399
the new changes that come in so we'll

432
00:15:31,399 --> 00:15:33,290
get into why this is useful the reason

433
00:15:33,290 --> 00:15:36,230
that we want you to update an attribute

434
00:15:36,230 --> 00:15:38,029
in the design document in order to flush

435
00:15:38,029 --> 00:15:40,519
that is because now updating this

436
00:15:40,519 --> 00:15:43,220
external process handler is the same

437
00:15:43,220 --> 00:15:44,600
process that you go through for updating

438
00:15:44,600 --> 00:15:46,579
your application normally so like the

439
00:15:46,579 --> 00:15:49,369
distribution like there there are no

440
00:15:49,369 --> 00:15:52,999
like push tools like you know get pushed

441
00:15:52,999 --> 00:15:54,589
to something and then you restart your

442
00:15:54,589 --> 00:15:56,660
couch app it's all this replication so

443
00:15:56,660 --> 00:15:59,029
you just put this document in for all of

444
00:15:59,029 --> 00:16:00,379
your other application code why wouldn't

445
00:16:00,379 --> 00:16:01,549
you want to do that for your nodejs

446
00:16:01,549 --> 00:16:05,839
external process okay so this is what it

447
00:16:05,839 --> 00:16:08,809
would look like to send an email rather

448
00:16:08,809 --> 00:16:11,209
than talking to some HTTP service and

449
00:16:11,209 --> 00:16:13,639
then like basically blocking until that

450
00:16:13,639 --> 00:16:15,709
says oh I sent this email and then if

451
00:16:15,709 --> 00:16:18,049
for some reason the socket crashes or

452
00:16:18,049 --> 00:16:20,209
like anything bad happens during that

453
00:16:20,209 --> 00:16:21,529
time you don't know if you already sent

454
00:16:21,529 --> 00:16:22,759
it so now you've got to try to figure

455
00:16:22,759 --> 00:16:24,259
out if you sent it or just send it again

456
00:16:24,259 --> 00:16:27,289
and then you have duplicate emails we

457
00:16:27,289 --> 00:16:29,119
just share we just have a state machine

458
00:16:29,119 --> 00:16:31,039
that shared between everybody involved

459
00:16:31,039 --> 00:16:33,259
in this transaction so what happens is

460
00:16:33,259 --> 00:16:35,569
the browser application will just go hey

461
00:16:35,569 --> 00:16:37,549
I want to send a new email and it will

462
00:16:37,549 --> 00:16:40,549
set it with a draft status and when the

463
00:16:40,549 --> 00:16:42,619
note process will go okay that change

464
00:16:42,619 --> 00:16:43,999
happened to this database I have an

465
00:16:43,999 --> 00:16:45,230
external process handler for that

466
00:16:45,230 --> 00:16:48,559
database it'll send it that change with

467
00:16:48,559 --> 00:16:50,720
the ID with the whole document in it so

468
00:16:50,720 --> 00:16:52,850
it'll get like the sequence ID and the

469
00:16:52,850 --> 00:16:54,230
new Rev and much of other information

470
00:16:54,230 --> 00:16:56,720
and then what nodejs will do is it'll

471
00:16:56,720 --> 00:16:58,879
update that document and CouchDB and say

472
00:16:58,879 --> 00:17:00,559
okay I'm going to go try to send that

473
00:17:00,559 --> 00:17:02,720
now and maybe it'll also put the

474
00:17:02,720 --> 00:17:04,069
timestamp in there so that we can clean

475
00:17:04,069 --> 00:17:05,769
them up if for some reason it crashes

476
00:17:05,769 --> 00:17:07,970
and then it'll go off and still an email

477
00:17:07,970 --> 00:17:10,010
because node can go and send emails you

478
00:17:10,010 --> 00:17:12,019
can talk to whatever it's not inside of

479
00:17:12,019 --> 00:17:14,029
the same sandbox that all of the cash to

480
00:17:14,029 --> 00:17:16,519
be stuff is in and then it comes back

481
00:17:16,519 --> 00:17:18,319
and it goes all that was sent and then

482
00:17:18,319 --> 00:17:19,909
it updates the couchdb database with

483
00:17:19,909 --> 00:17:21,919
that information so the browser could

484
00:17:21,919 --> 00:17:23,240
just be sitting on the changes feed as

485
00:17:23,240 --> 00:17:24,649
well for the database or just for this

486
00:17:24,649 --> 00:17:27,350
document and in real time update the

487
00:17:27,350 --> 00:17:27,839
status

488
00:17:27,839 --> 00:17:30,150
that of what's going on behind the

489
00:17:30,150 --> 00:17:34,440
scenes here so the real big one do you

490
00:17:34,440 --> 00:17:37,140
get with this is that this whole system

491
00:17:37,140 --> 00:17:39,299
this whole application now works offline

492
00:17:39,299 --> 00:17:42,179
so when I've got like a cash to be on my

493
00:17:42,179 --> 00:17:43,650
android phone and a catch me on my

494
00:17:43,650 --> 00:17:46,049
desktop and I get on a plane or I'm in

495
00:17:46,049 --> 00:17:48,809
San Francisco so I clearly don't have

496
00:17:48,809 --> 00:17:52,380
any service I can go home to my email

497
00:17:52,380 --> 00:17:53,850
client and just be like I want to send

498
00:17:53,850 --> 00:17:55,200
some emails I've set them in the draft

499
00:17:55,200 --> 00:17:56,990
because you're not online yet and

500
00:17:56,990 --> 00:17:59,100
replication isn't like some kind of

501
00:17:59,100 --> 00:18:01,169
special protocol with cash TB

502
00:18:01,169 --> 00:18:03,450
replication uses the normal couchdb API

503
00:18:03,450 --> 00:18:06,299
so another has to be replicating a

504
00:18:06,299 --> 00:18:08,940
document to to the cloud couch creates

505
00:18:08,940 --> 00:18:10,529
the same document in the same sequence

506
00:18:10,529 --> 00:18:12,870
index and all that stuff as a normal put

507
00:18:12,870 --> 00:18:16,200
would do so by the time the battle makes

508
00:18:16,200 --> 00:18:18,659
it back to the couch DB the node.js

509
00:18:18,659 --> 00:18:20,549
process to go oh I'm about to emails to

510
00:18:20,549 --> 00:18:22,770
send so when it's online that

511
00:18:22,770 --> 00:18:24,029
replication is all happening in real

512
00:18:24,029 --> 00:18:25,679
time it's all continuous you wouldn't

513
00:18:25,679 --> 00:18:27,809
even notice that there's like this extra

514
00:18:27,809 --> 00:18:29,940
link in that chain but then when it goes

515
00:18:29,940 --> 00:18:31,649
offline none of your app code has to

516
00:18:31,649 --> 00:18:33,120
deal with being offline that's all going

517
00:18:33,120 --> 00:18:34,620
to be handled by CouchDB all you're

518
00:18:34,620 --> 00:18:36,059
going to do is go sinless email and it's

519
00:18:36,059 --> 00:18:37,169
going to go well that's still in graph

520
00:18:37,169 --> 00:18:39,049
status and nobody's trying to send it

521
00:18:39,049 --> 00:18:42,120
businesses lock up like Gmail does right

522
00:18:42,120 --> 00:18:45,179
now for me for some reason know when you

523
00:18:45,179 --> 00:18:47,010
add in all these they're crazy cash db's

524
00:18:47,010 --> 00:18:49,200
like you know you're probably not going

525
00:18:49,200 --> 00:18:50,520
to have this your cell but in a lot of

526
00:18:50,520 --> 00:18:52,440
work groups you're going to have a bunch

527
00:18:52,440 --> 00:18:54,600
of CouchDB use and different like mobile

528
00:18:54,600 --> 00:18:56,399
phones and may be in different data

529
00:18:56,399 --> 00:18:58,320
centers and you're going to be trying to

530
00:18:58,320 --> 00:18:59,730
like you know sync everybody's data

531
00:18:59,730 --> 00:19:02,010
across like korea to here and below blah

532
00:19:02,010 --> 00:19:03,539
and they're all going to have these like

533
00:19:03,539 --> 00:19:06,000
super weird replication paradigms where

534
00:19:06,000 --> 00:19:07,649
one of them is going to be doing Willie

535
00:19:07,649 --> 00:19:09,000
replication one's going to be doing two

536
00:19:09,000 --> 00:19:10,890
way and did it if you've only got one

537
00:19:10,890 --> 00:19:13,380
guy responsible for handling the email

538
00:19:13,380 --> 00:19:15,299
then you're not going to have a bunch of

539
00:19:15,299 --> 00:19:17,730
duplicate emails sent and because the

540
00:19:17,730 --> 00:19:19,559
document is just a state machine if one

541
00:19:19,559 --> 00:19:21,240
of them updates it and says I'm sending

542
00:19:21,240 --> 00:19:22,830
it dealer was not going to go and try to

543
00:19:22,830 --> 00:19:24,419
send it as well like that's that's going

544
00:19:24,419 --> 00:19:25,409
to get replicated around it's going to

545
00:19:25,409 --> 00:19:26,940
go oh no no I didn't I don't try to send

546
00:19:26,940 --> 00:19:30,720
that yet so yeah now you can have these

547
00:19:30,720 --> 00:19:33,740
like federated distributed applications

548
00:19:33,740 --> 00:19:36,120
and they can also go up and talk to the

549
00:19:36,120 --> 00:19:37,409
Internet and they're not necessarily in

550
00:19:37,409 --> 00:19:39,680
a sandbox except for the

551
00:19:39,680 --> 00:19:42,290
one trusted cloud couchdb or maybe i run

552
00:19:42,290 --> 00:19:43,550
another one that i want or whatever you

553
00:19:43,550 --> 00:19:46,640
can do whatever you want but it doesn't

554
00:19:46,640 --> 00:19:47,990
require any new app code I didn't have

555
00:19:47,990 --> 00:19:49,430
to write a bunch of JavaScript to try

556
00:19:49,430 --> 00:19:50,840
and handle all these weird edge cases

557
00:19:50,840 --> 00:19:52,820
with replication that all just works

558
00:19:52,820 --> 00:19:56,570
couch is very good at replication so

559
00:19:56,570 --> 00:19:58,580
yeah I had another side that had links

560
00:19:58,580 --> 00:19:59,900
to everything and i forgot to rewrite

561
00:19:59,900 --> 00:20:01,990
that one so i'm very sorry about that

562
00:20:01,990 --> 00:20:06,440
but these are all in github one is

563
00:20:06,440 --> 00:20:08,980
github the node couch app stuff is

564
00:20:08,980 --> 00:20:12,410
github / michael my name spelled

565
00:20:12,410 --> 00:20:17,090
up / node couch fjf and the other one is

566
00:20:17,090 --> 00:20:20,480
just in node couches and in there you'll

567
00:20:20,480 --> 00:20:22,430
see that there's a we call it a generic

568
00:20:22,430 --> 00:20:24,560
changes consumer it's very inside

569
00:20:24,560 --> 00:20:26,330
baseball should probably come up with a

570
00:20:26,330 --> 00:20:33,450
new name for that yeah so any questions

571
00:20:33,460 --> 00:20:37,130
no I find it very hard to believe that

572
00:20:37,130 --> 00:20:38,150
everybody actually understands what I

573
00:20:38,150 --> 00:20:55,310
just talked about all right amen

574
00:20:55,320 --> 00:20:58,460
hmm

575
00:20:58,470 --> 00:21:00,299
so how do you work with them how do you

576
00:21:00,299 --> 00:21:03,480
work at the mobile couch okay yeah so we

577
00:21:03,480 --> 00:21:05,159
have a winner beta up right now with for

578
00:21:05,159 --> 00:21:08,280
the Android SDK other ones are coming I

579
00:21:08,280 --> 00:21:09,600
don't know if I can talk about them I

580
00:21:09,600 --> 00:21:10,950
know it's public that we're working on

581
00:21:10,950 --> 00:21:12,750
the iOS one I just can't tell you how

582
00:21:12,750 --> 00:21:16,740
far along it is but um anyway so yeah

583
00:21:16,740 --> 00:21:17,820
when you're when you're talking to

584
00:21:17,820 --> 00:21:20,760
Android couch Android catches everyone

585
00:21:20,760 --> 00:21:23,250
is pretty cool so with Android what you

586
00:21:23,250 --> 00:21:24,690
can do is if you're willing to write

587
00:21:24,690 --> 00:21:27,270
like a phonegap application right and

588
00:21:27,270 --> 00:21:29,010
you wanted to distribute the entire

589
00:21:29,010 --> 00:21:30,870
CouchDB around with your application and

590
00:21:30,870 --> 00:21:32,940
bind it to it you can build it that way

591
00:21:32,940 --> 00:21:35,400
but what you can also do is you can

592
00:21:35,400 --> 00:21:38,490
build CouchDB as a service so then it's

593
00:21:38,490 --> 00:21:40,620
installed once for the device and when

594
00:21:40,620 --> 00:21:42,059
other applications are installed what

595
00:21:42,059 --> 00:21:43,590
they ask for is access to that service

596
00:21:43,590 --> 00:21:45,780
and you'll see like a little couch icon

597
00:21:45,780 --> 00:21:47,580
when you install it and stuff and then

598
00:21:47,580 --> 00:21:49,080
and then they would just get access to

599
00:21:49,080 --> 00:21:51,299
the local system CouchDB so we're trying

600
00:21:51,299 --> 00:21:52,169
to figure out which one of those is

601
00:21:52,169 --> 00:21:54,840
going to work the best in terms of like

602
00:21:54,840 --> 00:21:56,580
just accessing couchdb I mean it's still

603
00:21:56,580 --> 00:21:58,830
just the HTTP API you still just write

604
00:21:58,830 --> 00:22:02,909
html5 applications against caps TV that

605
00:22:02,909 --> 00:22:06,330
doesn't change on mobile at all I mean

606
00:22:06,330 --> 00:22:07,500
we're definitely going to do some really

607
00:22:07,500 --> 00:22:09,299
good like PhoneGap integrations that we

608
00:22:09,299 --> 00:22:11,100
can get it some of the native stuff even

609
00:22:11,100 --> 00:22:13,799
inside of that html5 application but now

610
00:22:13,799 --> 00:22:15,120
when you develop it against cash to be a

611
00:22:15,120 --> 00:22:16,890
new store the data and cache to be the

612
00:22:16,890 --> 00:22:18,330
offline stuff works then it can

613
00:22:18,330 --> 00:22:19,890
replicate back up and it can replicate

614
00:22:19,890 --> 00:22:21,510
with your desktop computer while you're

615
00:22:21,510 --> 00:22:23,360
offline on a plane or whatever as well

616
00:22:23,360 --> 00:22:27,860
that stuff all works quite well yeah

617
00:22:27,860 --> 00:22:30,150
yeah you can go to the couch one website

618
00:22:30,150 --> 00:22:32,490
so it's catch one calm and then you'll

619
00:22:32,490 --> 00:22:34,230
see a big thing about mobile and you can

620
00:22:34,230 --> 00:22:36,289
download that download the Android SDK

621
00:22:36,289 --> 00:22:38,970
and there's some good preliminary

622
00:22:38,970 --> 00:22:41,039
documentation for that I don't know if

623
00:22:41,039 --> 00:22:42,360
he did it this week or if he's doing it

624
00:22:42,360 --> 00:22:44,280
next week but Aaron Miller the guy who

625
00:22:44,280 --> 00:22:47,159
wrote the android port is doing some

626
00:22:47,159 --> 00:22:49,980
kind of free webcast for O'Reilly about

627
00:22:49,980 --> 00:22:52,500
how to do development with it yeah also

628
00:22:52,500 --> 00:22:54,390
I know that Brian LaRue has been messing

629
00:22:54,390 --> 00:22:55,919
with it and Joe McCann's been messing

630
00:22:55,919 --> 00:22:59,649
with it so you can bug them about it

631
00:22:59,659 --> 00:23:20,010
anything else where it that way yes

632
00:23:20,020 --> 00:23:22,970
no no it's not completely open like Nana

633
00:23:22,970 --> 00:23:25,280
there this security in cash TV we

634
00:23:25,280 --> 00:23:27,490
weren't just like no we don't need that

635
00:23:27,490 --> 00:23:30,710
yeah so Josh to be has a user's database

636
00:23:30,710 --> 00:23:34,640
and every database one ends up happening

637
00:23:34,640 --> 00:23:37,280
is after that us happens then we just

638
00:23:37,280 --> 00:23:39,140
have the user document from the users

639
00:23:39,140 --> 00:23:41,150
database and we pass that around as the

640
00:23:41,150 --> 00:23:42,710
context for that user so there's like a

641
00:23:42,710 --> 00:23:45,549
nice abstraction between those layers

642
00:23:45,549 --> 00:23:48,409
whenever a document update happens like

643
00:23:48,409 --> 00:23:51,350
we take that user context and we take

644
00:23:51,350 --> 00:23:53,150
the old document and the new document

645
00:23:53,150 --> 00:23:54,679
and even when documents are deleted it's

646
00:23:54,679 --> 00:23:57,409
just now a deleted attribute we passed

647
00:23:57,409 --> 00:23:59,240
those as three variables to a JavaScript

648
00:23:59,240 --> 00:24:01,190
function and what you can do is you can

649
00:24:01,190 --> 00:24:03,320
throw you can just say like I'm not know

650
00:24:03,320 --> 00:24:04,970
that users not allowed to do that and

651
00:24:04,970 --> 00:24:06,620
that throw message gets turned into like

652
00:24:06,620 --> 00:24:10,970
a proper HTTP four hundred to the client

653
00:24:10,970 --> 00:24:13,630
the really cool thing about that is

654
00:24:13,630 --> 00:24:16,159
there because replication is just a

655
00:24:16,159 --> 00:24:18,380
normal client like on my android catch

656
00:24:18,380 --> 00:24:20,330
TBH i'm like root like I knew ever

657
00:24:20,330 --> 00:24:22,940
I want and then when I go off and I

658
00:24:22,940 --> 00:24:24,500
replicate with the cloud cash to be like

659
00:24:24,500 --> 00:24:27,080
I'm not root I'm actually like a user on

660
00:24:27,080 --> 00:24:28,520
that couch and I'm talking to the

661
00:24:28,520 --> 00:24:30,919
regular HTTP API and I acenta Kate and

662
00:24:30,919 --> 00:24:32,690
if I'm not allowed to write the

663
00:24:32,690 --> 00:24:34,070
documents that i wrote on my local couch

664
00:24:34,070 --> 00:24:35,720
like those will all be like no no that's

665
00:24:35,720 --> 00:24:37,640
not happening and I won't like pollute

666
00:24:37,640 --> 00:24:42,650
everybody else's data yeah i mean i

667
00:24:42,650 --> 00:24:44,270
could probably do an entire talk just

668
00:24:44,270 --> 00:24:45,980
about all the authentication things that

669
00:24:45,980 --> 00:24:47,600
you can do with cash to be we're all so

670
00:24:47,600 --> 00:24:49,460
we're working on some new documentation

671
00:24:49,460 --> 00:24:50,870
that'll show certain how you would

672
00:24:50,870 --> 00:24:52,789
implement certain fin occation patterns

673
00:24:52,789 --> 00:24:55,580
and couch but yeah one of the nice

674
00:24:55,580 --> 00:24:57,110
things about it and a couple of people

675
00:24:57,110 --> 00:24:58,659
in our case studies have actually shown

676
00:24:58,659 --> 00:25:00,770
that this is how they use caps and how

677
00:25:00,770 --> 00:25:04,039
they use how they push data around and

678
00:25:04,039 --> 00:25:06,380
give data to customers is that they just

679
00:25:06,380 --> 00:25:08,299
they every customer gets their own

680
00:25:08,299 --> 00:25:10,400
database and if any information is ever

681
00:25:10,400 --> 00:25:12,500
like exchange between customers like day

682
00:25:12,500 --> 00:25:14,270
control those access controls of what's

683
00:25:14,270 --> 00:25:15,350
going in and out

684
00:25:15,350 --> 00:25:16,760
and so everybody at the end of the day

685
00:25:16,760 --> 00:25:17,960
gets a database they can do with

686
00:25:17,960 --> 00:25:19,010
whatever they want and they can

687
00:25:19,010 --> 00:25:20,660
replicate that with somebody else or

688
00:25:20,660 --> 00:25:22,640
they can keep pulling replicating and

689
00:25:22,640 --> 00:25:24,890
things like that it's kind of hard to

690
00:25:24,890 --> 00:25:28,210
explain without slides I'm sorry

691
00:25:28,210 --> 00:25:37,440
anything else yes

692
00:25:37,450 --> 00:25:41,919
oh yeah so the but by the time the sdk

693
00:25:41,919 --> 00:25:43,840
is not in beta it will actually come

694
00:25:43,840 --> 00:25:46,389
with a demo application and to make sure

695
00:25:46,389 --> 00:25:48,549
that we can get through the store and

696
00:25:48,549 --> 00:25:50,679
Android in the store and iPhone will

697
00:25:50,679 --> 00:25:52,210
actually be taking that application

698
00:25:52,210 --> 00:25:53,919
which although you'll see the mule sale

699
00:25:53,919 --> 00:25:55,360
de code for and submitting it through

700
00:25:55,360 --> 00:25:56,500
the app store to make sure that like

701
00:25:56,500 --> 00:26:00,279
there's no problems so yeah so yeah

702
00:26:00,279 --> 00:26:02,190
there there will be a demo application

703
00:26:02,190 --> 00:26:05,380
soon basically there's lots of demo

704
00:26:05,380 --> 00:26:08,620
couch apps for desktop and basically the

705
00:26:08,620 --> 00:26:10,059
idea is that anybody can write an

706
00:26:10,059 --> 00:26:11,500
application and stick it into this and

707
00:26:11,500 --> 00:26:13,630
it's kind of like the open app store for

708
00:26:13,630 --> 00:26:16,330
couch apps and when you look at any

709
00:26:16,330 --> 00:26:17,980
application you can see like a little

710
00:26:17,980 --> 00:26:19,419
demo and then you can actually replicate

711
00:26:19,419 --> 00:26:22,090
it to your couchdb and then you've got

712
00:26:22,090 --> 00:26:23,679
all the code and all the example stuff

713
00:26:23,679 --> 00:26:30,639
and it's pretty cool what can you sell

714
00:26:30,639 --> 00:26:32,470
it no no we have not hooked that up yet

715
00:26:32,470 --> 00:26:36,039
I mean maybe someday but not yet I mean

716
00:26:36,039 --> 00:26:37,240
you could smell a couch up through the

717
00:26:37,240 --> 00:26:47,720
android store yep

718
00:26:47,730 --> 00:26:54,220
dump it to the computer when like like

719
00:26:54,220 --> 00:26:58,840
dumped out like I mean yeah I mean

720
00:26:58,840 --> 00:27:00,760
they're all in one like a couch at this

721
00:27:00,760 --> 00:27:02,590
literally one design document that says

722
00:27:02,590 --> 00:27:04,120
everything about that application so I

723
00:27:04,120 --> 00:27:05,320
mean you can pull that whole thing

724
00:27:05,320 --> 00:27:06,430
around that's what implication does

725
00:27:06,430 --> 00:27:07,510
replication just pulls the whole

726
00:27:07,510 --> 00:27:16,380
document around yeah yeah you get

727
00:27:16,380 --> 00:27:18,580
nothing else i'm pretty sure that now

728
00:27:18,580 --> 00:27:21,280
i'm actually pushing out a time so let's

