1
00:00:01,080 --> 00:00:08,030

[Music]

2
00:00:08,030 --> 00:00:11,759
so yes and we speak about p.m. - I'm the

3
00:00:11,759 --> 00:00:14,849
first auto-off p.m. - so I will begin by

4
00:00:14,849 --> 00:00:18,359
a presentation about me so I'm a CEO and

5
00:00:18,359 --> 00:00:20,220
funder at key metrics the monitoring

6
00:00:20,220 --> 00:00:23,160
solution built on top of TM - I'm the

7
00:00:23,160 --> 00:00:25,170
first author of PM - that couldn't be

8
00:00:25,170 --> 00:00:27,330
like so big without all the contributors

9
00:00:27,330 --> 00:00:29,369
that made this project better and

10
00:00:29,369 --> 00:00:31,289
full-stack JavaScript developer and I'm

11
00:00:31,289 --> 00:00:35,430
technologists so my app is ready I

12
00:00:35,430 --> 00:00:37,559
develop my application now I need to

13
00:00:37,559 --> 00:00:40,290
purchase in production but deploying to

14
00:00:40,290 --> 00:00:41,910
production is complex there are a lot of

15
00:00:41,910 --> 00:00:45,719
parameters to take into account like on

16
00:00:45,719 --> 00:00:49,410
my application only used like of 10% of

17
00:00:49,410 --> 00:00:52,890
my resources on my on my servers my app

18
00:00:52,890 --> 00:00:55,710
is leaking memory why why the server

19
00:00:55,710 --> 00:00:57,840
went out of memory a lot of question

20
00:00:57,840 --> 00:00:59,760
come to comes to mind when you need to

21
00:00:59,760 --> 00:01:02,820
deploy your application so this is a

22
00:01:02,820 --> 00:01:05,580
this is exactly why I built p.m. - three

23
00:01:05,580 --> 00:01:10,470
years ago so what is p.m. 2 p.m. - is a

24
00:01:10,470 --> 00:01:12,390
production application manager for

25
00:01:12,390 --> 00:01:14,700
Nadia's is dedicated from the GS but you

26
00:01:14,700 --> 00:01:16,860
can manage other software's with p.m. -

27
00:01:16,860 --> 00:01:19,650
it comes with a built in load balancer

28
00:01:19,650 --> 00:01:21,630
guarantees a time and help you manage

29
00:01:21,630 --> 00:01:26,159
your processes so how are your

30
00:01:26,159 --> 00:01:28,530
application before using p.m. - so it's

31
00:01:28,530 --> 00:01:30,780
a bit messy you will use like a lot of

32
00:01:30,780 --> 00:01:32,759
different software you may use like some

33
00:01:32,759 --> 00:01:35,369
UNIX built-in process manager that are

34
00:01:35,369 --> 00:01:37,259
not very well fitted for node.js

35
00:01:37,259 --> 00:01:40,680
applications and so on and also use PM -

36
00:01:40,680 --> 00:01:43,040
you will have like a structured way of

37
00:01:43,040 --> 00:01:45,270
deploying your application you will have

38
00:01:45,270 --> 00:01:47,399
like a global overview you will be able

39
00:01:47,399 --> 00:01:49,350
to use all the resources on the same

40
00:01:49,350 --> 00:01:52,369
server and do a lot of things with it

41
00:01:52,369 --> 00:01:57,390
so p.m. - so it helps you manage and

42
00:01:57,390 --> 00:02:00,090
optimize all the resources are used by

43
00:02:00,090 --> 00:02:03,600
your applications it will also help you

44
00:02:03,600 --> 00:02:07,140
to manage your software from the

45
00:02:07,140 --> 00:02:09,060
usability side

46
00:02:09,060 --> 00:02:12,390
log management deployment and also comes

47
00:02:12,390 --> 00:02:12,990
with the

48
00:02:12,990 --> 00:02:15,630
module feature that allows you to extend

49
00:02:15,630 --> 00:02:21,030
the capabilities of PMT so just some

50
00:02:21,030 --> 00:02:23,760
figures about about the software we have

51
00:02:23,760 --> 00:02:26,130
more than 10,000 stars and github more

52
00:02:26,130 --> 00:02:29,400
than 2 million downloads the project is

53
00:02:29,400 --> 00:02:31,920
like the eighty sixth most popular

54
00:02:31,920 --> 00:02:34,110
JavaScript project on github there are

55
00:02:34,110 --> 00:02:37,410
more than 2,500 commits more than 120

56
00:02:37,410 --> 00:02:41,570
contributors and more than 750 tests so

57
00:02:41,570 --> 00:02:44,430
tests are very important for pm2 because

58
00:02:44,430 --> 00:02:48,330
like PM 2 is entirely built on nodejs on

59
00:02:48,330 --> 00:02:50,990
javascript and we wanted really to

60
00:02:50,990 --> 00:02:53,370
provide a quality software for

61
00:02:53,370 --> 00:02:56,160
production application this is why we we

62
00:02:56,160 --> 00:02:58,350
built a lot of tests we do like almost a

63
00:02:58,350 --> 00:03:01,410
test drive and development across like

64
00:03:01,410 --> 00:03:03,930
five different node.js version from not

65
00:03:03,930 --> 00:03:11,430
GS 0.10 to to the 5.0 so this is like

66
00:03:11,430 --> 00:03:14,040
this is like the evolution of the

67
00:03:14,040 --> 00:03:16,350
projects in the beginning we can see

68
00:03:16,350 --> 00:03:19,020
that an open source project like get a

69
00:03:19,020 --> 00:03:21,630
lot of contributors and like that

70
00:03:21,630 --> 00:03:24,690
contributors that participate to all

71
00:03:24,690 --> 00:03:29,010
part of this software so yes this slide

72
00:03:29,010 --> 00:03:31,470
is mainly to to say thank you to all the

73
00:03:31,470 --> 00:03:33,330
contributors that made the software

74
00:03:33,330 --> 00:03:36,360
better that helped us to solve issues

75
00:03:36,360 --> 00:03:39,960
that build like features and and and

76
00:03:39,960 --> 00:03:45,120
everything so you can see there are a

77
00:03:45,120 --> 00:03:49,050
lot these like is a map of downloads of

78
00:03:49,050 --> 00:03:51,830
p.m. to in real time so it shows you

79
00:03:51,830 --> 00:03:55,170
where p.m. to has been deluded in a real

80
00:03:55,170 --> 00:03:57,540
time in the student this global every

81
00:03:57,540 --> 00:03:59,430
time someone installed p.m. to it does

82
00:03:59,430 --> 00:04:01,980
like a ping on our server we we

83
00:04:01,980 --> 00:04:05,010
translate this this IP address into GPS

84
00:04:05,010 --> 00:04:06,900
coordinates and we put this on this map

85
00:04:06,900 --> 00:04:09,450
this map is inspired from the trunk v

86
00:04:09,450 --> 00:04:14,280
and quite nice we have also large

87
00:04:14,280 --> 00:04:16,140
company already using our software

88
00:04:16,140 --> 00:04:19,320
paypal into eBay Bloomberg sauce West on

89
00:04:19,320 --> 00:04:21,330
the edge P Morgan and so on maybe the

90
00:04:21,330 --> 00:04:23,060
party also

91
00:04:23,060 --> 00:04:26,000
and we are very proud that this company

92
00:04:26,000 --> 00:04:28,160
is a use of software in production in a

93
00:04:28,160 --> 00:04:34,280
lot of servers so now we let let's just

94
00:04:34,280 --> 00:04:38,150
use about p.m. - I will cover all the

95
00:04:38,150 --> 00:04:40,160
aspects from the installation to process

96
00:04:40,160 --> 00:04:43,250
management to monitoring and so on so

97
00:04:43,250 --> 00:04:45,889
first installation of PM 2 is very easy

98
00:04:45,889 --> 00:04:47,960
PM 2 is still on the table the source

99
00:04:47,960 --> 00:04:50,000
code is hosted on github and you can

100
00:04:50,000 --> 00:04:52,639
install it from NPM so you just need to

101
00:04:52,639 --> 00:04:56,270
do NPM install PM 2 - G and you will be

102
00:04:56,270 --> 00:04:59,260
you will have this this software

103
00:04:59,260 --> 00:05:04,790
available from the command line so now

104
00:05:04,790 --> 00:05:06,380
setup is required once you've installed

105
00:05:06,380 --> 00:05:08,300
p.m. - once you launch it it will

106
00:05:08,300 --> 00:05:10,520
directly pop all the files we configure

107
00:05:10,520 --> 00:05:12,950
it heals itself and so on but you can

108
00:05:12,950 --> 00:05:15,169
add some other features like if you want

109
00:05:15,169 --> 00:05:17,330
to have like a cleaner setup of p.m. -

110
00:05:17,330 --> 00:05:19,430
you can do p.m. to completion install

111
00:05:19,430 --> 00:05:21,740
that will help you when you have to

112
00:05:21,740 --> 00:05:23,690
manage a lot of processes when you might

113
00:05:23,690 --> 00:05:25,400
actually to processes that has different

114
00:05:25,400 --> 00:05:28,400
names and and it helps you it will to

115
00:05:28,400 --> 00:05:30,890
complete all these commands and you ever

116
00:05:30,890 --> 00:05:32,990
saw I came to startup that allows you to

117
00:05:32,990 --> 00:05:35,450
generate the startup script so if your

118
00:05:35,450 --> 00:05:37,520
server crash and you get restarted it

119
00:05:37,520 --> 00:05:40,880
will like respond all the processes that

120
00:05:40,880 --> 00:05:44,360
was already launched before the crash

121
00:05:44,360 --> 00:05:53,760
open so Lansing up

122
00:05:53,770 --> 00:06:00,220
sorry jet lag so launching apps so

123
00:06:00,220 --> 00:06:02,080
launching a node.js application is very

124
00:06:02,080 --> 00:06:05,199
easy like all the commands of PM 2 are

125
00:06:05,199 --> 00:06:07,569
very easy to use you can go like very in

126
00:06:07,569 --> 00:06:09,849
a very advanced you can use PM to in a

127
00:06:09,849 --> 00:06:11,740
very advanced way but all the comments

128
00:06:11,740 --> 00:06:14,069
are very simply simplistic to use them

129
00:06:14,069 --> 00:06:17,410
so p.m. to start my node.js application

130
00:06:17,410 --> 00:06:19,210
and we put your application in

131
00:06:19,210 --> 00:06:21,430
background will under the logs will

132
00:06:21,430 --> 00:06:23,680
monitor it and it will auto restart the

133
00:06:23,680 --> 00:06:25,660
application in case of crash or bad

134
00:06:25,660 --> 00:06:30,280
behavior from the application PM 2 is

135
00:06:30,280 --> 00:06:34,090
like dedicated phone RGS but but behind

136
00:06:34,090 --> 00:06:36,490
the scene it's only like oh phone

137
00:06:36,490 --> 00:06:39,940
kind of simple simple so you can

138
00:06:39,940 --> 00:06:41,949
start and kind of script if you need

139
00:06:41,949 --> 00:06:44,620
like to start with a bash script for

140
00:06:44,620 --> 00:06:46,750
example you do p.m. to start script that

141
00:06:46,750 --> 00:06:49,150
Sh there is like a kind of ash table

142
00:06:49,150 --> 00:06:52,000
that do like mapping like yo this is

143
00:06:52,000 --> 00:06:54,130
like the SH extension so it's like a

144
00:06:54,130 --> 00:06:56,710
bash creep and it will start it but if

145
00:06:56,710 --> 00:06:58,860
you need to declare or your interpreter

146
00:06:58,860 --> 00:07:01,830
you do like p.m. to start my application

147
00:07:01,830 --> 00:07:05,229
Python - - interpreter and you can put

148
00:07:05,229 --> 00:07:07,780
the interpreter so you can set the right

149
00:07:07,780 --> 00:07:10,800
interpreter to start the application and

150
00:07:10,800 --> 00:07:13,870
after you can act on your processes so

151
00:07:13,870 --> 00:07:15,820
as it's a process manager there are like

152
00:07:15,820 --> 00:07:18,370
some basic commands like to restart the

153
00:07:18,370 --> 00:07:20,590
application to delete the application to

154
00:07:20,590 --> 00:07:23,110
stop it and so on so if you develop I

155
00:07:23,110 --> 00:07:24,819
came across service application and

156
00:07:24,819 --> 00:07:26,620
let's say that you have like one service

157
00:07:26,620 --> 00:07:28,750
that is sending emails and that is right

158
00:07:28,750 --> 00:07:30,610
now spamming a lot of your user you just

159
00:07:30,610 --> 00:07:33,849
do like p.m. to stop my my my service

160
00:07:33,849 --> 00:07:35,530
that send emails and after it will be

161
00:07:35,530 --> 00:07:42,310
stopped so now the cluster mode so as

162
00:07:42,310 --> 00:07:45,669
you know JavaScript is like mono sweetie

163
00:07:45,669 --> 00:07:48,610
language so basically you will have all

164
00:07:48,610 --> 00:07:50,650
your CPUs that will not do anything and

165
00:07:50,650 --> 00:07:53,610
only one CPU will do all the job so

166
00:07:53,610 --> 00:07:57,849
that's not the best thing because after

167
00:07:57,849 --> 00:08:01,779
your application gets overloaded and can

168
00:08:01,779 --> 00:08:06,080
crash

169
00:08:06,090 --> 00:08:09,030
so this is not the best thing

170
00:08:09,030 --> 00:08:11,740
so while using the cluster mode so as

171
00:08:11,740 --> 00:08:13,330
you know JavaScript is Monas with the

172
00:08:13,330 --> 00:08:15,250
language so it will only use one thread

173
00:08:15,250 --> 00:08:17,650
of our one thread one car on your

174
00:08:17,650 --> 00:08:21,340
computer and by using p.m. 2 p.m. 2 we

175
00:08:21,340 --> 00:08:23,200
duplicate your application to use all

176
00:08:23,200 --> 00:08:26,919
the resources on your computer so once

177
00:08:26,919 --> 00:08:29,740
so all the CPUs will be will be loaded

178
00:08:29,740 --> 00:08:33,510
we dropped and you will be able to

179
00:08:33,510 --> 00:08:35,320
enhance the performance of your

180
00:08:35,320 --> 00:08:38,020
application and so the application needs

181
00:08:38,020 --> 00:08:39,580
to be stateless if you want to use the

182
00:08:39,580 --> 00:08:41,849
cluster mode so it means that doesn't

183
00:08:41,849 --> 00:08:45,100
stop any like a local variable in the

184
00:08:45,100 --> 00:08:47,350
same process like all the variables need

185
00:08:47,350 --> 00:08:49,779
to be like shared for example like

186
00:08:49,779 --> 00:08:51,430
sessions and stuff like that so you need

187
00:08:51,430 --> 00:08:54,790
to use like radius or any other kind of

188
00:08:54,790 --> 00:08:57,130
database to share the states between

189
00:08:57,130 --> 00:09:01,180
your processes so otherwise it's very

190
00:09:01,180 --> 00:09:02,860
simple to start an application in

191
00:09:02,860 --> 00:09:04,990
cluster model you just do p.m. to start

192
00:09:04,990 --> 00:09:08,080
my node.js application - II and the

193
00:09:08,080 --> 00:09:10,870
number of instances if you put 0 it will

194
00:09:10,870 --> 00:09:13,270
auto-detect the number of CPUs and we

195
00:09:13,270 --> 00:09:15,790
duplicate the number of application

196
00:09:15,790 --> 00:09:18,040
depending on the number of CPUs but you

197
00:09:18,040 --> 00:09:20,770
can also declare your own number for

198
00:09:20,770 --> 00:09:24,160
example if you have like a processor CPU

199
00:09:24,160 --> 00:09:27,430
with 8 cores you can say I only want

200
00:09:27,430 --> 00:09:30,160
like 7 CPUs to be used and one CPU that

201
00:09:30,160 --> 00:09:31,660
do like something else like for the

202
00:09:31,660 --> 00:09:37,000
system Oh so after you as the PM 2 is

203
00:09:37,000 --> 00:09:39,640
writing a node.js we are tightly linked

204
00:09:39,640 --> 00:09:42,280
to no GS so we can offer like more

205
00:09:42,280 --> 00:09:44,140
advanced feature so for example the

206
00:09:44,140 --> 00:09:46,690
cluster or future and also like for

207
00:09:46,690 --> 00:09:48,870
managing your application we we offer

208
00:09:48,870 --> 00:09:51,670
reload without downtime so you do p.m.

209
00:09:51,670 --> 00:09:53,280
to reload the name of your application

210
00:09:53,280 --> 00:09:57,040
this will for example if you were if you

211
00:09:57,040 --> 00:09:58,450
already starts it for application in

212
00:09:58,450 --> 00:10:00,700
cluster mode and you do reload it will

213
00:10:00,700 --> 00:10:03,880
pop up for new processes we wait that

214
00:10:03,880 --> 00:10:06,070
the for all processes finish - to

215
00:10:06,070 --> 00:10:09,250
process their work and the new one will

216
00:10:09,250 --> 00:10:11,260
replace the old one so you will not lose

217
00:10:11,260 --> 00:10:13,450
any queries so it's like seamless for

218
00:10:13,450 --> 00:10:15,400
your users and you can update your code

219
00:10:15,400 --> 00:10:17,410
very easily without any don't

220
00:10:17,410 --> 00:10:19,569
after there is the graceful reload

221
00:10:19,569 --> 00:10:21,879
feature that will send the Steindl to

222
00:10:21,879 --> 00:10:23,889
your processor to say okay you are going

223
00:10:23,889 --> 00:10:26,560
to be killed so finish all your your

224
00:10:26,560 --> 00:10:29,379
work or close all the database

225
00:10:29,379 --> 00:10:31,690
connections and so on and after you do

226
00:10:31,690 --> 00:10:33,339
like you process that exit and it will

227
00:10:33,339 --> 00:10:35,470
exit the application and the new one

228
00:10:35,470 --> 00:10:37,779
will replace the old one and after you

229
00:10:37,779 --> 00:10:39,490
have two scalar well this is like a

230
00:10:39,490 --> 00:10:42,069
nifty feature that just like to scale up

231
00:10:42,069 --> 00:10:43,810
or scale it down the number of processes

232
00:10:43,810 --> 00:10:46,870
so if you do like p.m. to scale my up my

233
00:10:46,870 --> 00:10:49,779
API 8 it will like to whip up eight

234
00:10:49,779 --> 00:10:52,000
processes if you do too it will scale

235
00:10:52,000 --> 00:10:58,470
down all your processes and so now

236
00:10:58,470 --> 00:11:01,449
inspecting applications so once you

237
00:11:01,449 --> 00:11:04,779
start your applications it's very useful

238
00:11:04,779 --> 00:11:06,189
to have some information about the

239
00:11:06,189 --> 00:11:08,740
listing of your processes the CPU usage

240
00:11:08,740 --> 00:11:11,769
memory usage and so on so there are some

241
00:11:11,769 --> 00:11:14,290
comments that updating on p.m. 2 p.m. to

242
00:11:14,290 --> 00:11:17,379
list that will simply list all the

243
00:11:17,379 --> 00:11:19,810
processes that are launched so you can

244
00:11:19,810 --> 00:11:21,040
see like the name of your application

245
00:11:21,040 --> 00:11:24,970
the process ID the mode that the script

246
00:11:24,970 --> 00:11:27,850
has been launched on the PID the status

247
00:11:27,850 --> 00:11:29,860
the number of restart app time memory

248
00:11:29,860 --> 00:11:33,310
and all this or key key metrics here

249
00:11:33,310 --> 00:11:36,189
information know so for example you can

250
00:11:36,189 --> 00:11:37,720
see on this list that there is like the

251
00:11:37,720 --> 00:11:40,420
first script is like it's a bash script

252
00:11:40,420 --> 00:11:43,600
and you can see that the mode is fork so

253
00:11:43,600 --> 00:11:45,100
because it's like a bash script it's a

254
00:11:45,100 --> 00:11:47,500
simple but the other application

255
00:11:47,500 --> 00:11:50,110
are like no GS application so they are

256
00:11:50,110 --> 00:11:55,149
all launched on cluster mode after you

257
00:11:55,149 --> 00:11:58,149
can monitor on the CPU and memory usage

258
00:11:58,149 --> 00:12:00,939
you just need to do PM to monitor and in

259
00:12:00,939 --> 00:12:04,059
your terminal it will like pop like

260
00:12:04,059 --> 00:12:07,569
interface built on town caps to see you

261
00:12:07,569 --> 00:12:09,670
in a real-time all your processes are

262
00:12:09,670 --> 00:12:11,860
behaving so you can track this blue

263
00:12:11,860 --> 00:12:13,360
memory usage or feature of your

264
00:12:13,360 --> 00:12:17,970
applications

265
00:12:17,980 --> 00:12:20,380
and you can also get more information

266
00:12:20,380 --> 00:12:23,230
about your processes you just do p.m. to

267
00:12:23,230 --> 00:12:25,570
show the name the name of my application

268
00:12:25,570 --> 00:12:27,250
or JIT and you can get different

269
00:12:27,250 --> 00:12:29,110
transformations so for example on the

270
00:12:29,110 --> 00:12:31,360
top of the screenshot you can see like

271
00:12:31,360 --> 00:12:34,209
the statues name ID the logs it goes

272
00:12:34,209 --> 00:12:35,500
like the logs when you start an

273
00:12:35,500 --> 00:12:39,100
application with p.m. - we split the

274
00:12:39,100 --> 00:12:42,430
logs in two files like a files - to get

275
00:12:42,430 --> 00:12:44,860
like all the error output and one order

276
00:12:44,860 --> 00:12:48,790
to get only the standard output you can

277
00:12:48,790 --> 00:12:51,130
see the PID path the mode that the mode

278
00:12:51,130 --> 00:12:52,990
on which your application has been

279
00:12:52,990 --> 00:12:55,000
started on if there is like the watch

280
00:12:55,000 --> 00:12:56,440
and a reload feature because there is

281
00:12:56,440 --> 00:12:58,570
like this feature on a p.m. - that

282
00:12:58,570 --> 00:13:00,040
allows you to when you start an

283
00:13:00,040 --> 00:13:03,010
application - we start offer to reload

284
00:13:03,010 --> 00:13:04,540
your application when there is a fight

285
00:13:04,540 --> 00:13:07,360
that is changed so it's it can be useful

286
00:13:07,360 --> 00:13:09,660
for staging or development environment

287
00:13:09,660 --> 00:13:12,579
so you have all this metadata on the on

288
00:13:12,579 --> 00:13:15,310
the first on the top of this screenshot

289
00:13:15,310 --> 00:13:17,350
after you can have like some information

290
00:13:17,350 --> 00:13:21,519
about the revision control metadata so

291
00:13:21,519 --> 00:13:23,410
you can see which revision control has

292
00:13:23,410 --> 00:13:28,089
been used whereas this is where the

293
00:13:28,089 --> 00:13:30,100
repository of your application you get

294
00:13:30,100 --> 00:13:32,380
your route data and and the probes value

295
00:13:32,380 --> 00:13:34,930
so the last part on the screen you can

296
00:13:34,930 --> 00:13:37,180
see that there are like some matrix so

297
00:13:37,180 --> 00:13:40,570
basically you can use the PMX library

298
00:13:40,570 --> 00:13:45,130
that allows you to track variable of all

299
00:13:45,130 --> 00:13:47,709
the time in real time from your code so

300
00:13:47,709 --> 00:13:50,079
for example you can track the number of

301
00:13:50,079 --> 00:13:52,510
users can exceed the number of WebSocket

302
00:13:52,510 --> 00:13:54,399
connections you just need to do like

303
00:13:54,399 --> 00:13:56,769
it's very simple to use you just need to

304
00:13:56,769 --> 00:13:58,870
do this to use this library to expose

305
00:13:58,870 --> 00:14:01,120
some variables so you can track their

306
00:14:01,120 --> 00:14:04,209
values without link to do we are

307
00:14:04,209 --> 00:14:08,920
continue after we help developers and

308
00:14:08,920 --> 00:14:11,980
developed by on managing logs so to

309
00:14:11,980 --> 00:14:14,949
display logs in real time just to PM to

310
00:14:14,949 --> 00:14:16,870
logs and you will see like all the logs

311
00:14:16,870 --> 00:14:18,670
in real time you can declare the name of

312
00:14:18,670 --> 00:14:21,490
the application we also offer the PM to

313
00:14:21,490 --> 00:14:23,230
flourish command that will alike just

314
00:14:23,230 --> 00:14:25,839
empty all your logs it can be useful if

315
00:14:25,839 --> 00:14:27,850
your applications through a lot of logs

316
00:14:27,850 --> 00:14:30,279
every seconds and so on and you can

317
00:14:30,279 --> 00:14:31,000
reload the

318
00:14:31,000 --> 00:14:34,209
so if you use like log rotates you can

319
00:14:34,209 --> 00:14:36,430
use PM to really lock so it will like

320
00:14:36,430 --> 00:14:41,500
refresh all the logs the log files so

321
00:14:41,500 --> 00:14:47,079
now organizing applications so if you

322
00:14:47,079 --> 00:14:48,579
build your application in the micro

323
00:14:48,579 --> 00:14:51,009
service where you split your monolithic

324
00:14:51,009 --> 00:14:53,560
application into small services it can

325
00:14:53,560 --> 00:14:55,990
be quite painful to start all the

326
00:14:55,990 --> 00:14:59,829
application with all their options on oh

327
00:14:59,829 --> 00:15:02,259
it should be a so the environment

328
00:15:02,259 --> 00:15:04,089
variable the name of your application

329
00:15:04,089 --> 00:15:07,269
the number of instances you want the the

330
00:15:07,269 --> 00:15:09,759
watch if the application will be

331
00:15:09,759 --> 00:15:12,370
restarted on like owners on a certain

332
00:15:12,370 --> 00:15:14,860
result of memory the argument and some

333
00:15:14,860 --> 00:15:17,079
if you if you have a lot of application

334
00:15:17,079 --> 00:15:19,990
can be quite ugly to manage it over the

335
00:15:19,990 --> 00:15:24,790
time so this is why we have this feature

336
00:15:24,790 --> 00:15:27,339
it's like the JSON declaration so

337
00:15:27,339 --> 00:15:29,199
basically you will have like your JSON

338
00:15:29,199 --> 00:15:31,240
file it can be like in your package the

339
00:15:31,240 --> 00:15:33,459
JSON or it can be like an independent

340
00:15:33,459 --> 00:15:36,579
file where you can declare DBA if you

341
00:15:36,579 --> 00:15:39,100
are and the option of each of your

342
00:15:39,100 --> 00:15:40,839
application of your core service

343
00:15:40,839 --> 00:15:45,160
software so like let's say this one like

344
00:15:45,160 --> 00:15:47,620
this is like I call it ecosystem dot

345
00:15:47,620 --> 00:15:50,740
JSON so we have three applications and

346
00:15:50,740 --> 00:15:52,420
you can see that each application has

347
00:15:52,420 --> 00:15:56,529
different parameters so it's very useful

348
00:15:56,529 --> 00:15:58,209
when you need to a manage an application

349
00:15:58,209 --> 00:16:00,009
with lot of services communicating each

350
00:16:00,009 --> 00:16:04,480
other on the same server and after it's

351
00:16:04,480 --> 00:16:07,000
seamless to use like JSON declaration so

352
00:16:07,000 --> 00:16:09,459
this is like I call it ecosystems ojisan

353
00:16:09,459 --> 00:16:11,949
so after if you want to start all this

354
00:16:11,949 --> 00:16:13,839
application you just do p.m. to start

355
00:16:13,839 --> 00:16:16,089
ecosystem that JSON and it will pop up

356
00:16:16,089 --> 00:16:19,660
all your process ISM and it will be you

357
00:16:19,660 --> 00:16:22,480
will be able to list them and and do all

358
00:16:22,480 --> 00:16:24,519
the comments that are useful for other

359
00:16:24,519 --> 00:16:26,920
OGS application after you can do we stop

360
00:16:26,920 --> 00:16:29,259
p.m. to restart ecosystem the JSON and

361
00:16:29,259 --> 00:16:35,470
you can stop it otherwise

362
00:16:35,480 --> 00:16:40,680
so deployment system so I use it a lot

363
00:16:40,680 --> 00:16:43,470
it's like a picture so basically we

364
00:16:43,470 --> 00:16:46,920
embedded a simple bash script from TG

365
00:16:46,920 --> 00:16:49,560
it's like a very simple way to deploy

366
00:16:49,560 --> 00:16:52,520
application so basically I think that

367
00:16:52,520 --> 00:16:56,070
that developers should be able to manage

368
00:16:56,070 --> 00:16:58,050
themselves the lifecycle of their

369
00:16:58,050 --> 00:17:00,450
application they should not ask to like

370
00:17:00,450 --> 00:17:02,970
the sysadmin our son to deploy the new

371
00:17:02,970 --> 00:17:05,220
the new application because like the

372
00:17:05,220 --> 00:17:07,410
developer need to be able to deploy a

373
00:17:07,410 --> 00:17:09,990
specific version on on one server to see

374
00:17:09,990 --> 00:17:11,940
how it behaves on production and so on

375
00:17:11,940 --> 00:17:13,860
so that's why we published

376
00:17:13,860 --> 00:17:16,260
we built this deployment system in 2

377
00:17:16,260 --> 00:17:19,230
p.m. - so you just take the previous

378
00:17:19,230 --> 00:17:21,209
file that was declaring each of your

379
00:17:21,209 --> 00:17:22,980
application into the echo standard JSON

380
00:17:22,980 --> 00:17:26,070
and you will add the deploy part on the

381
00:17:26,070 --> 00:17:27,450
deploy part you will have all your

382
00:17:27,450 --> 00:17:30,450
environments so for example in this in

383
00:17:30,450 --> 00:17:32,070
this screenshot you can see the

384
00:17:32,070 --> 00:17:34,500
production environment that that that

385
00:17:34,500 --> 00:17:38,640
must be that that has like multiple

386
00:17:38,640 --> 00:17:41,160
earths so you can see that this the

387
00:17:41,160 --> 00:17:42,750
production environment would deploy the

388
00:17:42,750 --> 00:17:45,000
code in this free host and after there

389
00:17:45,000 --> 00:17:47,490
is the staging of arraignment so in

390
00:17:47,490 --> 00:17:50,310
these two to two parts you can declare

391
00:17:50,310 --> 00:17:53,370
out front option which which what is the

392
00:17:53,370 --> 00:17:56,120
git repository that must deploy the pass

393
00:17:56,120 --> 00:17:58,680
deposit deploy comment so for example if

394
00:17:58,680 --> 00:18:00,990
I type in my code here it will run an

395
00:18:00,990 --> 00:18:03,930
NPM install to install all the modules

396
00:18:03,930 --> 00:18:06,060
that if I have if I have added some

397
00:18:06,060 --> 00:18:07,890
modules on my package or JSON

398
00:18:07,890 --> 00:18:09,900
it will start or restart all the

399
00:18:09,900 --> 00:18:11,850
processes that are cloud into the same

400
00:18:11,850 --> 00:18:14,340
phylum with the environment you want and

401
00:18:14,340 --> 00:18:16,470
so on and you can also declare the

402
00:18:16,470 --> 00:18:18,420
environment variable that must be

403
00:18:18,420 --> 00:18:20,730
injected into your application as you

404
00:18:20,730 --> 00:18:22,860
can see in the staging part where there

405
00:18:22,860 --> 00:18:24,960
is like the environment and there is not

406
00:18:24,960 --> 00:18:29,750
there should be staging ok

407
00:18:29,750 --> 00:18:32,910
after the commands are very easy so once

408
00:18:32,910 --> 00:18:35,250
you have this file and you have all the

409
00:18:35,250 --> 00:18:37,500
authorization you have to make sure that

410
00:18:37,500 --> 00:18:39,480
your target servers as like the

411
00:18:39,480 --> 00:18:42,930
authorization to like the clones and and

412
00:18:42,930 --> 00:18:45,600
all these commands you can do p.m. to

413
00:18:45,600 --> 00:18:47,120
deploy my

414
00:18:47,120 --> 00:18:49,820
my configuration file on the environment

415
00:18:49,820 --> 00:18:52,760
and setup so basically it we go to your

416
00:18:52,760 --> 00:18:54,860
server to your remote server we quit all

417
00:18:54,860 --> 00:18:57,680
the the files that are needed we treat

418
00:18:57,680 --> 00:18:59,780
like a deployment file so we'll be able

419
00:18:59,780 --> 00:19:01,790
to track your deployment of all the time

420
00:19:01,790 --> 00:19:06,020
and after unsuited that you you can

421
00:19:06,020 --> 00:19:07,580
update your remote application for

422
00:19:07,580 --> 00:19:09,860
easily so you just do p.m. to deploy

423
00:19:09,860 --> 00:19:12,530
ecosystem design production and we look

424
00:19:12,530 --> 00:19:14,390
at the production part on your ecosystem

425
00:19:14,390 --> 00:19:18,110
file and with a choke codon and if you

426
00:19:18,110 --> 00:19:20,150
deployed like a wrong version or

427
00:19:20,150 --> 00:19:22,490
something like that you can revert to

428
00:19:22,490 --> 00:19:26,240
the end - deployment so p.m. to deploy

429
00:19:26,240 --> 00:19:29,390
ecosystem prediction revert and all many

430
00:19:29,390 --> 00:19:31,520
deployments you want to go back to

431
00:19:31,520 --> 00:19:34,950
rollback

432
00:19:34,960 --> 00:19:39,500
so modules so modules is like a new

433
00:19:39,500 --> 00:19:42,950
feature on human on p.m. - so as you see

434
00:19:42,950 --> 00:19:45,590
there are already some the more

435
00:19:45,590 --> 00:19:47,210
important features that are embedded in

436
00:19:47,210 --> 00:19:49,970
p.m. - from the deployment the

437
00:19:49,970 --> 00:19:52,730
application declaration from the

438
00:19:52,730 --> 00:19:55,730
monitoring feature and so on and now we

439
00:19:55,730 --> 00:19:59,840
do not want to make your p.m. to Blues

440
00:19:59,840 --> 00:20:02,960
either so we don't want to put too many

441
00:20:02,960 --> 00:20:04,910
features on the software so that's why

442
00:20:04,910 --> 00:20:07,880
now we built a module system so it's

443
00:20:07,880 --> 00:20:10,610
like an obvious application that can do

444
00:20:10,610 --> 00:20:12,800
many things that can extend the PM 2

445
00:20:12,800 --> 00:20:14,450
features how it can be a standalone

446
00:20:14,450 --> 00:20:17,240
software or it can be like a monitoring

447
00:20:17,240 --> 00:20:21,590
module so what is the module so it's an

448
00:20:21,590 --> 00:20:23,240
application that extend the PM 2

449
00:20:23,240 --> 00:20:24,950
capabilities because there are like

450
00:20:24,950 --> 00:20:27,500
there is the API on p.m. - so you can

451
00:20:27,500 --> 00:20:29,510
interact with p.m. - programmatically

452
00:20:29,510 --> 00:20:32,660
you just need to put it on your package

453
00:20:32,660 --> 00:20:35,740
- Jason after you can call p.m. two

454
00:20:35,740 --> 00:20:39,200
points tart the name of my file you can

455
00:20:39,200 --> 00:20:41,900
pass the option you want like the JSON

456
00:20:41,900 --> 00:20:44,960
I'll show you before as a parameter it

457
00:20:44,960 --> 00:20:47,570
can be a worker process providing an API

458
00:20:47,570 --> 00:20:49,790
so in the future it would be interesting

459
00:20:49,790 --> 00:20:52,040
like because micro services like a real

460
00:20:52,040 --> 00:20:55,640
trend so in the future it's not I see

461
00:20:55,640 --> 00:20:58,400
that that it would not be like only

462
00:20:58,400 --> 00:20:59,559
library that you

463
00:20:59,559 --> 00:21:01,840
in Seoul from NPM library that you can

464
00:21:01,840 --> 00:21:03,940
interact in your on your with your coder

465
00:21:03,940 --> 00:21:06,519
but it could be like also processes so

466
00:21:06,519 --> 00:21:08,320
you could be able to install like

467
00:21:08,320 --> 00:21:11,730
services that that do like all

468
00:21:11,730 --> 00:21:13,899
authorization and that expose an API

469
00:21:13,899 --> 00:21:16,659
that you can use in another processor so

470
00:21:16,659 --> 00:21:18,580
you could like install different modules

471
00:21:18,580 --> 00:21:21,490
that can do like different jobs for your

472
00:21:21,490 --> 00:21:24,279
application I can be a totally

473
00:21:24,279 --> 00:21:26,499
independent software for example you can

474
00:21:26,499 --> 00:21:28,600
do like p.m. to install cinavia

475
00:21:28,600 --> 00:21:30,879
and you will have like a private and PM

476
00:21:30,879 --> 00:21:36,249
repository or PM to install PM to SMTP

477
00:21:36,249 --> 00:21:39,039
and you will have like SMTP server in

478
00:21:39,039 --> 00:21:43,869
the developed in Nadya's a lot of other

479
00:21:43,869 --> 00:21:46,659
things so basically the command is

480
00:21:46,659 --> 00:21:49,840
simple PM to install my module name the

481
00:21:49,840 --> 00:21:51,970
module name is like the name it's a name

482
00:21:51,970 --> 00:21:54,309
of a module on the NPM repository so you

483
00:21:54,309 --> 00:21:56,679
cannot install any library you cannot do

484
00:21:56,679 --> 00:21:58,990
well like PM to install Express doesn't

485
00:21:58,990 --> 00:21:59,769
makes any sense

486
00:21:59,769 --> 00:22:01,690
it should be like an application that is

487
00:22:01,690 --> 00:22:04,179
configured in a way that can be run in

488
00:22:04,179 --> 00:22:07,570
standalone way so when you do this

489
00:22:07,570 --> 00:22:10,690
PM to install my mojo it gets the module

490
00:22:10,690 --> 00:22:13,119
from NPM it will start it and it will

491
00:22:13,119 --> 00:22:18,909
keep it alive forever after managing

492
00:22:18,909 --> 00:22:21,879
module is like simple PM to install my

493
00:22:21,879 --> 00:22:24,159
module if you want to win install it PM

494
00:22:24,159 --> 00:22:26,559
2 and install and you can configure your

495
00:22:26,559 --> 00:22:28,679
modules so you can put like different

496
00:22:28,679 --> 00:22:30,580
configuration variable that can be

497
00:22:30,580 --> 00:22:33,610
operated by p.m. - so you do PM to set

498
00:22:33,610 --> 00:22:35,440
the name of my module and the name of my

499
00:22:35,440 --> 00:22:37,360
attribute and the new value that you

500
00:22:37,360 --> 00:22:40,090
want to be used in your on your new

501
00:22:40,090 --> 00:22:43,389
software so I will just show you some

502
00:22:43,389 --> 00:22:47,259
modules that we already developed so for

503
00:22:47,259 --> 00:22:49,899
example tulip rotates all the logs of

504
00:22:49,899 --> 00:22:52,119
your file you just do p.m. to install

505
00:22:52,119 --> 00:22:54,279
p.m. to block rotate and this software

506
00:22:54,279 --> 00:22:56,440
we connect to p.m. - we list all the

507
00:22:56,440 --> 00:22:59,320
processes will look at which files are

508
00:22:59,320 --> 00:23:01,360
opened and which file are like being

509
00:23:01,360 --> 00:23:04,269
writing on and it will check if it not

510
00:23:04,269 --> 00:23:07,659
exceed like a certain amount of disk

511
00:23:07,659 --> 00:23:11,289
space or if it doesn't like it sit like

512
00:23:11,289 --> 00:23:13,180
one week and so on and it will

513
00:23:13,180 --> 00:23:15,790
Metiria will log rotate all your final

514
00:23:15,790 --> 00:23:19,180
so built-in you just do came to install

515
00:23:19,180 --> 00:23:21,010
PM to lock rotate and your your audio

516
00:23:21,010 --> 00:23:23,490
file or your log files will be rotated

517
00:23:23,490 --> 00:23:26,260
after there is like this PM to web shell

518
00:23:26,260 --> 00:23:28,720
so PM to web shell doesn't walk on the

519
00:23:28,720 --> 00:23:33,040
no GS 4 & 5 because like behind the

520
00:23:33,040 --> 00:23:34,990
scene behind PM to web shell there is

521
00:23:34,990 --> 00:23:38,560
like TT yjs that is a way to expose the

522
00:23:38,560 --> 00:23:42,070
web shell from your browser so I just

523
00:23:42,070 --> 00:23:43,930
made this proof of concept so if you do

524
00:23:43,930 --> 00:23:46,360
PM to install PM to web channel you will

525
00:23:46,360 --> 00:23:49,330
have a fully capable terminal in your

526
00:23:49,330 --> 00:23:50,890
browser so it means that you can use

527
00:23:50,890 --> 00:23:53,500
Emacs you can use vim you can use H top

528
00:23:53,500 --> 00:23:56,410
you can use anything you want like like

529
00:23:56,410 --> 00:23:59,980
on windows and so on it looks like this

530
00:23:59,980 --> 00:24:02,950
so you just install this module and

531
00:24:02,950 --> 00:24:04,450
after you will be able to connect in

532
00:24:04,450 --> 00:24:09,250
localhost or from remote into a PM to

533
00:24:09,250 --> 00:24:11,470
web shell and you love this terminal for

534
00:24:11,470 --> 00:24:14,020
your capable after you can configure

535
00:24:14,020 --> 00:24:16,360
some things as I showed you before there

536
00:24:16,360 --> 00:24:18,880
is like the configuration system so far

537
00:24:18,880 --> 00:24:21,430
going for example I can do p.m. to set

538
00:24:21,430 --> 00:24:26,170
p.m. to web shell as GPS through true

539
00:24:26,170 --> 00:24:28,720
and it will expose this web shala

540
00:24:28,720 --> 00:24:33,670
in a HTTP HTTP protocol so I do I do not

541
00:24:33,670 --> 00:24:37,030
advise you to use this this module in

542
00:24:37,030 --> 00:24:39,130
production servers on because I can be a

543
00:24:39,130 --> 00:24:42,610
bit risky but it's a nice pull of

544
00:24:42,610 --> 00:24:46,930
concept so to write your own module it's

545
00:24:46,930 --> 00:24:50,200
very simple you just do if you installed

546
00:24:50,200 --> 00:24:53,950
the last test PM 2 version you have

547
00:24:53,950 --> 00:25:00,490
moderns do 0.15 version of p.m. - you

548
00:25:00,490 --> 00:25:02,530
have the comment came to module generate

549
00:25:02,530 --> 00:25:05,260
that will create a sample module that

550
00:25:05,260 --> 00:25:07,600
you can directly publish so after you go

551
00:25:07,600 --> 00:25:09,640
to this folder you do PM to module

552
00:25:09,640 --> 00:25:12,040
publish it we do like npm publish and it

553
00:25:12,040 --> 00:25:14,710
will do a git bash and after you will be

554
00:25:14,710 --> 00:25:18,010
able to say 21 ok install this module so

555
00:25:18,010 --> 00:25:20,470
for example could be like a chat so you

556
00:25:20,470 --> 00:25:22,360
could do like p.m. to install p.m. to

557
00:25:22,360 --> 00:25:24,250
chat for example and you will have like

558
00:25:24,250 --> 00:25:25,560
your chat

559
00:25:25,560 --> 00:25:29,690
could be like SMTP server Daniel's

560
00:25:29,690 --> 00:25:32,580
anything anything you want and the

561
00:25:32,580 --> 00:25:35,280
official motor repositories is p.m. to

562
00:25:35,280 --> 00:25:37,650
either so there are already more than 20

563
00:25:37,650 --> 00:25:39,870
modules so there are only three module

564
00:25:39,870 --> 00:25:42,150
like acting as a standalone processes

565
00:25:42,150 --> 00:25:44,610
and the other modules are like module

566
00:25:44,610 --> 00:25:46,560
that can interact with a different part

567
00:25:46,560 --> 00:25:48,480
of your infrastructure so for example

568
00:25:48,480 --> 00:25:51,990
there are modules that that connect to

569
00:25:51,990 --> 00:25:54,570
your radius database that connect to

570
00:25:54,570 --> 00:25:56,790
your MongoDB database to your values to

571
00:25:56,790 --> 00:25:59,010
your coach DB or anything else and after

572
00:25:59,010 --> 00:26:00,750
you can get the matrix and you can also

573
00:26:00,750 --> 00:26:04,860
act on them so yes monitoring with key

574
00:26:04,860 --> 00:26:07,680
metrics so basically we built our key

575
00:26:07,680 --> 00:26:09,480
metrics the solution key metrics on top

576
00:26:09,480 --> 00:26:12,030
of p.m. to so if you already use p.m. to

577
00:26:12,030 --> 00:26:13,770
its stimulus to integrate two key

578
00:26:13,770 --> 00:26:15,900
metrics and you can do like the basic

579
00:26:15,900 --> 00:26:18,810
monitoring features and you can you can

580
00:26:18,810 --> 00:26:20,700
like track a lot of things with key

581
00:26:20,700 --> 00:26:23,160
metrics so it looked like this so you

582
00:26:23,160 --> 00:26:25,080
have like a listing of all the processes

583
00:26:25,080 --> 00:26:27,960
are on your server and give you a global

584
00:26:27,960 --> 00:26:29,730
overview of all your application in real

585
00:26:29,730 --> 00:26:34,770
time it's like a unique product and we

586
00:26:34,770 --> 00:26:37,020
saw some computer trials coming the more

587
00:26:37,020 --> 00:26:40,230
and more so that's good so thank you

588
00:26:40,230 --> 00:26:48,210
thank you thank you and the slides are

589
00:26:48,210 --> 00:26:54,570
available on you wanna have some

590
00:26:54,570 --> 00:27:00,090
questions for Alexander and PM to thank

591
00:27:00,090 --> 00:27:03,750
you for creating p.m. to using PMT in

592
00:27:03,750 --> 00:27:08,340
production server now but there's one

593
00:27:08,340 --> 00:27:11,790
thing that I'm still thinking about

594
00:27:11,790 --> 00:27:16,440
whether fully using PM 2 is do you have

595
00:27:16,440 --> 00:27:21,120
any docker support by default yes now

596
00:27:21,120 --> 00:27:24,660
I'm using docker but then I'm because of

597
00:27:24,660 --> 00:27:27,870
the foreground mode and stuff some

598
00:27:27,870 --> 00:27:30,360
problem with p.m. to switch back to use

599
00:27:30,360 --> 00:27:31,220
NPM

600
00:27:31,220 --> 00:27:34,860
what's your view and on a support on

601
00:27:34,860 --> 00:27:40,440
docker so we we have some

602
00:27:40,440 --> 00:27:44,160
docker containers that are like able to

603
00:27:44,160 --> 00:27:47,130
run TM 2 so PM 2 is always useful when

604
00:27:47,130 --> 00:27:49,200
you use docker because it can it embed

605
00:27:49,200 --> 00:27:50,610
like the cluster or module

606
00:27:50,610 --> 00:27:53,550
cluster mode and so it it it allows you

607
00:27:53,550 --> 00:27:58,380
to do like all this optimization about

608
00:27:58,380 --> 00:28:01,770
the resources usage and sure I should do

609
00:28:01,770 --> 00:28:03,990
like medomak documentation about docker

610
00:28:03,990 --> 00:28:06,120
but we have really like some docker fire

611
00:28:06,120 --> 00:28:09,120
and I will make like a page on our

612
00:28:09,120 --> 00:28:11,280
official documentation to explain how to

613
00:28:11,280 --> 00:28:13,970
use p.m. to in the best way with dr.

614
00:28:13,970 --> 00:28:18,180
right sorry this is not a good question

615
00:28:18,180 --> 00:28:20,670
except what's the visualization what how

616
00:28:20,670 --> 00:28:22,340
did you do the visualization the slides

617
00:28:22,340 --> 00:28:26,180
it's really cool the globe the globe

618
00:28:26,180 --> 00:28:29,880
it's open source project I I hacked I

619
00:28:29,880 --> 00:28:31,380
don't remember exactly which

620
00:28:31,380 --> 00:28:34,470
repositories but it's someone that that

621
00:28:34,470 --> 00:28:37,680
that built like that we produced like

622
00:28:37,680 --> 00:28:40,140
the same dashboard than in the movie

623
00:28:40,140 --> 00:28:42,660
Tron so there is like this entire

624
00:28:42,660 --> 00:28:44,490
dashboard you can see on the Tron movie

625
00:28:44,490 --> 00:28:47,220
that you did like in JavaScript and I

626
00:28:47,220 --> 00:28:49,710
just took like the map and I acted so

627
00:28:49,710 --> 00:28:58,300
totally the web like a different result

628
00:28:58,310 --> 00:29:01,080
except the monitor the memory memory

629
00:29:01,080 --> 00:29:04,650
usage is there any other additional

630
00:29:04,650 --> 00:29:08,040
memory feature such like hip Tom or

631
00:29:08,040 --> 00:29:10,950
snapshot so yes basically you have like

632
00:29:10,950 --> 00:29:13,260
also the max memory we load maximum

633
00:29:13,260 --> 00:29:15,480
which top commander that allows you if

634
00:29:15,480 --> 00:29:18,060
you use like for example all the socket

635
00:29:18,060 --> 00:29:20,730
IO version that was leaking before and

636
00:29:20,730 --> 00:29:24,090
you cannot upgrade this library you can

637
00:29:24,090 --> 00:29:26,720
use this max memory we stopped that will

638
00:29:26,720 --> 00:29:29,670
monitor the memory usage and that will

639
00:29:29,670 --> 00:29:32,450
reload your application in case of this

640
00:29:32,450 --> 00:29:35,640
result being like reached so you can set

641
00:29:35,640 --> 00:29:38,370
like limits on the memory usage after

642
00:29:38,370 --> 00:29:40,140
for the if dump and

643
00:29:40,140 --> 00:29:44,400
it dump and then CPU dump and so on you

644
00:29:44,400 --> 00:29:46,650
need to use to need to use the key

645
00:29:46,650 --> 00:29:49,200
matrix or a commercial solution to get

646
00:29:49,200 --> 00:29:53,940
these features so you mean we can also

647
00:29:53,940 --> 00:29:57,090
add extra event when the leaking events

648
00:29:57,090 --> 00:30:00,190
happened right yes

649
00:30:00,200 --> 00:30:05,190
max memory restarts yes it's a bit like

650
00:30:05,190 --> 00:30:07,200
Missy but you can see like on the first

651
00:30:07,200 --> 00:30:10,440
line max memory restart and I can put

652
00:30:10,440 --> 00:30:14,640
the memory the memory limit of my

653
00:30:14,640 --> 00:30:17,430
application and it will not do restart

654
00:30:17,430 --> 00:30:20,250
it not doesn't do like a restart it does

655
00:30:20,250 --> 00:30:22,860
like a reload if it's an RGS application

656
00:30:22,860 --> 00:30:26,940
so it will be like seamless to be

657
00:30:26,940 --> 00:30:28,680
reloaded like if your application which

658
00:30:28,680 --> 00:30:31,320
is memory limit it will be seamless like

659
00:30:31,320 --> 00:30:35,220
so it's not like very clean way to under

660
00:30:35,220 --> 00:30:37,200
the memory leaks but sometimes you

661
00:30:37,200 --> 00:30:40,350
cannot do like in the other ways thank

662
00:30:40,350 --> 00:30:46,200
you as far as I know like no J's the

663
00:30:46,200 --> 00:30:48,780
cluster module allows you to secure like

664
00:30:48,780 --> 00:30:51,660
never connections bypassing the UDS

665
00:30:51,660 --> 00:30:54,300
socket to another process so does p.m.

666
00:30:54,300 --> 00:30:59,070
who does it differently so you mean like

667
00:30:59,070 --> 00:31:00,810
you could like use just the cluster

668
00:31:00,810 --> 00:31:03,870
module to do so basically yes you can do

669
00:31:03,870 --> 00:31:05,790
you can just use the cluster module if

670
00:31:05,790 --> 00:31:09,210
you want to use all these views so first

671
00:31:09,210 --> 00:31:11,370
thing is that I think that's not the

672
00:31:11,370 --> 00:31:13,860
developer job to do all these things and

673
00:31:13,860 --> 00:31:16,910
the PM to does much more than just like

674
00:31:16,910 --> 00:31:19,500
clustering your application it adds some

675
00:31:19,500 --> 00:31:21,750
features like the reload like the

676
00:31:21,750 --> 00:31:23,520
graceful willow that are like critical

677
00:31:23,520 --> 00:31:25,890
features of production applications so

678
00:31:25,890 --> 00:31:27,780
sure you can use the cluster mode

679
00:31:27,780 --> 00:31:29,370
crystal module by yourself

680
00:31:29,370 --> 00:31:31,320
but if you use PM 2 it will be much more

681
00:31:31,320 --> 00:31:34,800
cleaner we work like spheres on on the

682
00:31:34,800 --> 00:31:37,020
integration of the crystal mode in

683
00:31:37,020 --> 00:31:39,720
Panaji application so basically yeah

684
00:31:39,720 --> 00:31:44,010
it's battle Alton all right Thank You

685
00:31:44,010 --> 00:31:47,210
Alexander thank you

686
00:31:47,210 --> 00:32:10,180
[Music]

