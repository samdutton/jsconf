1
00:00:17,590 --> 00:00:19,570

thanks for attending my talk it's

2
00:00:19,570 --> 00:00:21,789
sometimes thankful to have we talk after

3
00:00:21,789 --> 00:00:23,890
the lunch break sometimes not I hope you

4
00:00:23,890 --> 00:00:27,039
guys are not going to fall asleep and

5
00:00:27,039 --> 00:00:30,789
this is going to be as generally said a

6
00:00:30,789 --> 00:00:33,880
story about how paper slowly transforms

7
00:00:33,880 --> 00:00:36,760
into this new and better company that

8
00:00:36,760 --> 00:00:39,219
started to adopt a technology stacks

9
00:00:39,219 --> 00:00:41,770
like nodes and lots of other cool things

10
00:00:41,770 --> 00:00:45,850
like go and I hope that you guys are

11
00:00:45,850 --> 00:00:47,950
getting something out of it I try to

12
00:00:47,950 --> 00:00:51,899
leave some time for Q&A so let's see and

13
00:00:51,899 --> 00:00:55,329
most good stories usually start with a

14
00:00:55,329 --> 00:00:57,280
little bit of background right that's

15
00:00:57,280 --> 00:00:59,230
like one of those movies where you go

16
00:00:59,230 --> 00:01:01,510
back in time and if you go back in time

17
00:01:01,510 --> 00:01:03,760
it shows where all the characters come

18
00:01:03,760 --> 00:01:06,460
from and why the current situation

19
00:01:06,460 --> 00:01:10,799
actually exists so PayPal had founded in

20
00:01:10,799 --> 00:01:14,530
1998 as a company called Co Finity and

21
00:01:14,530 --> 00:01:16,450
back then in Silicon Valley everybody

22
00:01:16,450 --> 00:01:19,780
had one of those PDA pages anyone ever

23
00:01:19,780 --> 00:01:24,130
owned a palm okay so those things used

24
00:01:24,130 --> 00:01:27,909
to communicate via infrared and a few

25
00:01:27,909 --> 00:01:30,130
guys including Peter teal who's nowadays

26
00:01:30,130 --> 00:01:32,619
this enormous investor thought it would

27
00:01:32,619 --> 00:01:35,380
be enormous ly awesome if you could send

28
00:01:35,380 --> 00:01:39,430
money around using infrared and it

29
00:01:39,430 --> 00:01:41,560
didn't really work out so they started a

30
00:01:41,560 --> 00:01:43,630
new product and another new product and

31
00:01:43,630 --> 00:01:46,060
in 1999 one year after they founded the

32
00:01:46,060 --> 00:01:47,950
company they came up with a product

33
00:01:47,950 --> 00:01:49,899
called PayPal because they realized

34
00:01:49,899 --> 00:01:51,520
sending our own money in the web is not

35
00:01:51,520 --> 00:01:55,299
really easy so 2000 a company called

36
00:01:55,299 --> 00:01:58,420
XCOM ran by Illamasqua the awesome guy

37
00:01:58,420 --> 00:02:00,939
who runs Tesla nowadays acquired them

38
00:02:00,939 --> 00:02:03,820
and stand in 2002 they got acquired by

39
00:02:03,820 --> 00:02:07,030
eBay so a lot of different history and

40
00:02:07,030 --> 00:02:08,530
as long as

41
00:02:08,530 --> 00:02:11,590
they exist basically being one of those

42
00:02:11,590 --> 00:02:13,720
kind of oldest companies in Silicon

43
00:02:13,720 --> 00:02:16,840
Valley nowadays they had a bunch of

44
00:02:16,840 --> 00:02:19,000
different engineers coming and going

45
00:02:19,000 --> 00:02:22,270
starting stuff nearly finishing it

46
00:02:22,270 --> 00:02:24,910
sometimes they did sometimes not so you

47
00:02:24,910 --> 00:02:26,739
can imagine the technology stack it's

48
00:02:26,739 --> 00:02:30,910
kind of a mess and sometimes if I think

49
00:02:30,910 --> 00:02:34,030
about these scenes I imagine this all

50
00:02:34,030 --> 00:02:36,670
growing out sad trombone so if you think

51
00:02:36,670 --> 00:02:38,260
about Jake archability with his sounds I

52
00:02:38,260 --> 00:02:40,830
should have totally done that and

53
00:02:40,830 --> 00:02:43,600
the traditional application stacks that

54
00:02:43,600 --> 00:02:46,720
PayPal hats were basically - and that's

55
00:02:46,720 --> 00:02:49,170
what we had fill up in a few years so

56
00:02:49,170 --> 00:02:52,239
the first deck was a traditional C++

57
00:02:52,239 --> 00:02:54,069
stack because obviously a lot of stuff

58
00:02:54,069 --> 00:02:56,019
that we do is very processing heavy and

59
00:02:56,019 --> 00:02:59,019
then there is Java which used to do a

60
00:02:59,019 --> 00:03:01,989
lot of the web apps hosting based on

61
00:03:01,989 --> 00:03:06,280
Java with spring JE traditional and it

62
00:03:06,280 --> 00:03:09,400
was kind of effective for our and our

63
00:03:09,400 --> 00:03:11,860
teams basically knew how to scale those

64
00:03:11,860 --> 00:03:15,040
applications but you cannot scale any

65
00:03:15,040 --> 00:03:17,820
application to infinity and obviously

66
00:03:17,820 --> 00:03:20,170
nowadays nobody really likes to touch

67
00:03:20,170 --> 00:03:21,610
these things anymore and if I look into

68
00:03:21,610 --> 00:03:23,380
this room and usually I get this talk in

69
00:03:23,380 --> 00:03:25,780
front of a JavaScript audience everybody

70
00:03:25,780 --> 00:03:28,930
looks kind of like that people are

71
00:03:28,930 --> 00:03:34,030
disgusted C++ Java well obviously not

72
00:03:34,030 --> 00:03:36,790
what we all want to go for I have to be

73
00:03:36,790 --> 00:03:39,609
honest I used to be a Java engineer so

74
00:03:39,609 --> 00:03:45,489
please bear with me now this is PayPal

75
00:03:45,489 --> 00:03:49,269
in 2002 and we used to have this big

76
00:03:49,269 --> 00:03:52,269
problem where we had deployments every

77
00:03:52,269 --> 00:03:56,620
six weeks and now if you imagine issues

78
00:03:56,620 --> 00:03:58,780
like there's this number saying we have

79
00:03:58,780 --> 00:04:01,720
a hundred million users and this number

80
00:04:01,720 --> 00:04:03,850
changes we have to wait six weeks until

81
00:04:03,850 --> 00:04:06,609
we can deploy these things and you can

82
00:04:06,609 --> 00:04:08,440
imagine how painful that is and it was

83
00:04:08,440 --> 00:04:10,180
not just the web site that got deployed

84
00:04:10,180 --> 00:04:11,290
every six weeks

85
00:04:11,290 --> 00:04:14,920
it was also applying to our API so if

86
00:04:14,920 --> 00:04:16,750
something went wrong in our API you had

87
00:04:16,750 --> 00:04:18,130
to wait six weeks until you could

88
00:04:18,130 --> 00:04:20,840
actually fix it and obviously

89
00:04:20,840 --> 00:04:24,620
going forward into our modern kind of

90
00:04:24,620 --> 00:04:25,940
engineering culture where we do

91
00:04:25,940 --> 00:04:28,669
continuous deployment and continuous

92
00:04:28,669 --> 00:04:31,520
integration and so on this was really

93
00:04:31,520 --> 00:04:33,380
really awkward for our engineers because

94
00:04:33,380 --> 00:04:35,120
we had those engineers working on

95
00:04:35,120 --> 00:04:38,030
different stacks and they realized that

96
00:04:38,030 --> 00:04:40,340
it is incredibly painful to work on our

97
00:04:40,340 --> 00:04:42,979
product because on the one hand we used

98
00:04:42,979 --> 00:04:45,560
to have our production stack as I said

99
00:04:45,560 --> 00:04:47,660
six weeks of deployment cycles and so on

100
00:04:47,660 --> 00:04:50,300
and then on the other hand we do have a

101
00:04:50,300 --> 00:04:52,490
prototyping stack and that's where our

102
00:04:52,490 --> 00:04:54,740
developers usually went along and had

103
00:04:54,740 --> 00:04:57,410
modern scripting languages lots of stuff

104
00:04:57,410 --> 00:04:59,419
happening in JavaScript sometimes Ruby

105
00:04:59,419 --> 00:05:02,900
and those guys were able to basically

106
00:05:02,900 --> 00:05:04,160
come up with new functionality

107
00:05:04,160 --> 00:05:07,100
incredibly fast and they used modern

108
00:05:07,100 --> 00:05:09,290
kind of toolkits like bootstrap and

109
00:05:09,290 --> 00:05:09,590
Bower

110
00:05:09,590 --> 00:05:12,440
and so on and then then they had to roll

111
00:05:12,440 --> 00:05:14,600
it out into our regular stack I had to

112
00:05:14,600 --> 00:05:17,930
do a port so instead of just taking the

113
00:05:17,930 --> 00:05:19,820
JavaScript templates that you just wrote

114
00:05:19,820 --> 00:05:23,060
and all the CSS awesomeness they had to

115
00:05:23,060 --> 00:05:24,889
come up with ways to bring that through

116
00:05:24,889 --> 00:05:26,750
our stack and I'm going into his stack

117
00:05:26,750 --> 00:05:27,550
in a second

118
00:05:27,550 --> 00:05:30,979
so we had user testing we had a B test

119
00:05:30,979 --> 00:05:33,410
we knew what people liked and then we

120
00:05:33,410 --> 00:05:35,840
had to wait six weeks again at least to

121
00:05:35,840 --> 00:05:39,020
roll these features out and we don't

122
00:05:39,020 --> 00:05:40,729
really interact with full stack

123
00:05:40,729 --> 00:05:42,770
engineers under the production stack so

124
00:05:42,770 --> 00:05:44,240
you have the traditional Java back-end

125
00:05:44,240 --> 00:05:47,360
guy and the traditional HTML kind of web

126
00:05:47,360 --> 00:05:49,250
developer and those guys didn't really

127
00:05:49,250 --> 00:05:51,560
talk to each other so a lot of those

128
00:05:51,560 --> 00:05:54,470
reasons basically leads to huge problems

129
00:05:54,470 --> 00:05:58,160
obviously so the situation we were in at

130
00:05:58,160 --> 00:06:00,470
that moment was actually kind of

131
00:06:00,470 --> 00:06:02,539
frustrating we had B C++ stack with

132
00:06:02,539 --> 00:06:06,139
style sheets for XML we had Java

133
00:06:06,139 --> 00:06:09,169
back-end with JSP as I said mostly was

134
00:06:09,169 --> 00:06:12,919
based on spring and then we had this

135
00:06:12,919 --> 00:06:16,340
cool prototyping stack that I usually

136
00:06:16,340 --> 00:06:18,830
just define as nodes with different

137
00:06:18,830 --> 00:06:21,889
JavaScript templates and we tried out a

138
00:06:21,889 --> 00:06:23,330
lot of those different templating

139
00:06:23,330 --> 00:06:26,900
languages and at one moment actually the

140
00:06:26,900 --> 00:06:28,280
big decision came that we should go for

141
00:06:28,280 --> 00:06:32,470
dust which is heavily driven by LinkedIn

142
00:06:32,470 --> 00:06:34,840
and people at paper just started to

143
00:06:34,840 --> 00:06:37,000
adopt it and kind of like that I'm going

144
00:06:37,000 --> 00:06:39,070
into a few reasons for dusts in a few

145
00:06:39,070 --> 00:06:42,190
minutes but to be honest it's not really

146
00:06:42,190 --> 00:06:45,190
about the templating language as it's in

147
00:06:45,190 --> 00:06:47,260
general it's more about JavaScript

148
00:06:47,260 --> 00:06:51,940
templating so we had this big issue with

149
00:06:51,940 --> 00:06:54,820
our Java stack right where I'm saying we

150
00:06:54,820 --> 00:06:58,180
were running JSP but before we had JSP

151
00:06:58,180 --> 00:07:01,120
we were even writing our HTML CSS and

152
00:07:01,120 --> 00:07:05,050
JavaScript in Java so it wasn't even JSP

153
00:07:05,050 --> 00:07:08,590
pages that were rendered but also now a

154
00:07:08,590 --> 00:07:11,440
big problem with JSP is that you usually

155
00:07:11,440 --> 00:07:12,670
end up with a lot of different

156
00:07:12,670 --> 00:07:14,500
programming languages and scripting

157
00:07:14,500 --> 00:07:16,870
languages and markup languages in one

158
00:07:16,870 --> 00:07:19,840
file because you can have HTML in a JSP

159
00:07:19,840 --> 00:07:23,500
file CSS JavaScript and Java so

160
00:07:23,500 --> 00:07:26,230
obviously it was a big mess and we had

161
00:07:26,230 --> 00:07:28,870
to get rid of that so a few people came

162
00:07:28,870 --> 00:07:32,770
up with UI toolkit a paper that they

163
00:07:32,770 --> 00:07:35,710
called Spartan and Spartan was a

164
00:07:35,710 --> 00:07:38,070
proprietary solution based on spring

165
00:07:38,070 --> 00:07:40,510
nowadays we would do that whole thing

166
00:07:40,510 --> 00:07:43,390
difference now a big issue with

167
00:07:43,390 --> 00:07:45,610
proprietary software is usually that you

168
00:07:45,610 --> 00:07:47,230
have a bigger ramp at time if you bring

169
00:07:47,230 --> 00:07:50,260
in new engineers because those engineers

170
00:07:50,260 --> 00:07:52,810
have to learn about the frameworks have

171
00:07:52,810 --> 00:07:55,240
to apply those frameworks we had those

172
00:07:55,240 --> 00:07:58,479
really bad deployment cycles so people

173
00:07:58,479 --> 00:08:03,910
were not happy now that was likely a big

174
00:08:03,910 --> 00:08:07,150
big push into open source a lot of great

175
00:08:07,150 --> 00:08:08,919
new engineers came into our companies

176
00:08:08,919 --> 00:08:10,390
they used to work for startups before

177
00:08:10,390 --> 00:08:13,270
other bigger companies and they said

178
00:08:13,270 --> 00:08:14,680
that open source might be actually

179
00:08:14,680 --> 00:08:17,710
something variable to pursue so three

180
00:08:17,710 --> 00:08:19,750
reasons why you might want to go for

181
00:08:19,750 --> 00:08:22,690
open source in a company as a set less

182
00:08:22,690 --> 00:08:25,360
ramped up time for your engineers they

183
00:08:25,360 --> 00:08:26,770
can usually work with the tools that

184
00:08:26,770 --> 00:08:28,990
they know anyway so they are more

185
00:08:28,990 --> 00:08:31,479
efficient in just doing work on the tool

186
00:08:31,479 --> 00:08:34,750
sets that they know already then there's

187
00:08:34,750 --> 00:08:37,390
this big issue where engineers often

188
00:08:37,390 --> 00:08:39,789
have to focus on setting up environments

189
00:08:39,789 --> 00:08:43,300
and setting up the project and all that

190
00:08:43,300 --> 00:08:44,800
stuff instead of actually building the

191
00:08:44,800 --> 00:08:45,200
app

192
00:08:45,200 --> 00:08:49,040
you want that your engineers can beat

193
00:08:49,040 --> 00:08:51,020
what you want to achieve and not have to

194
00:08:51,020 --> 00:08:53,150
do all the setup work because that's

195
00:08:53,150 --> 00:08:55,040
less efficient obviously and you waste a

196
00:08:55,040 --> 00:08:58,460
lot of time and then obviously the last

197
00:08:58,460 --> 00:09:00,950
reason is proprietary solutions are

198
00:09:00,950 --> 00:09:02,960
seldom better than the open-source ones

199
00:09:02,960 --> 00:09:04,850
there are great open source projects out

200
00:09:04,850 --> 00:09:06,170
there with thousands and hundred

201
00:09:06,170 --> 00:09:08,570
thousands of committers so why don't you

202
00:09:08,570 --> 00:09:11,420
just go for that and try to bring some

203
00:09:11,420 --> 00:09:14,690
benefit into this so we came up with

204
00:09:14,690 --> 00:09:18,950
rapid deployment and development cycles

205
00:09:18,950 --> 00:09:21,730
and everything was great right on a

206
00:09:21,730 --> 00:09:24,650
production stack we still had to go with

207
00:09:24,650 --> 00:09:28,850
the old stuff so we ended up with a push

208
00:09:28,850 --> 00:09:31,310
into going into a new production stack

209
00:09:31,310 --> 00:09:34,220
and this all was still before we

210
00:09:34,220 --> 00:09:37,100
introduced nodejs so we had bootstrap in

211
00:09:37,100 --> 00:09:38,780
the front ends we had JavaScript

212
00:09:38,780 --> 00:09:42,080
templating as I said and then if you

213
00:09:42,080 --> 00:09:44,930
want to go for our regular stacks I said

214
00:09:44,930 --> 00:09:48,110
that we have C++ and Java so what we did

215
00:09:48,110 --> 00:09:51,650
is we injected the C++ v8 engine into

216
00:09:51,650 --> 00:09:54,080
our c plus plastic that was fairly easy

217
00:09:54,080 --> 00:09:56,960
we call that the project DeLorean so if

218
00:09:56,960 --> 00:09:58,820
you remember DeLorean from the Back to

219
00:09:58,820 --> 00:10:00,950
the Future it's that awesome car that

220
00:10:00,950 --> 00:10:03,230
does V time jumping stuff so we thought

221
00:10:03,230 --> 00:10:06,170
it was kind of fit and then there is

222
00:10:06,170 --> 00:10:09,230
Mozilla Rhino which is a full JavaScript

223
00:10:09,230 --> 00:10:11,360
implementation in Java so that's what we

224
00:10:11,360 --> 00:10:13,640
used on our Java stack to run the

225
00:10:13,640 --> 00:10:17,570
different templates and looking at that

226
00:10:17,570 --> 00:10:20,030
basically we had now a few different

227
00:10:20,030 --> 00:10:22,160
kind of environments again prototyping

228
00:10:22,160 --> 00:10:25,130
we went with tasks and it was great now

229
00:10:25,130 --> 00:10:27,560
since we settled on using dust or

230
00:10:27,560 --> 00:10:29,750
somehow a Java stack we leveraged Rhino

231
00:10:29,750 --> 00:10:32,330
and we were able to run the same

232
00:10:32,330 --> 00:10:33,550
templates that we wrote for our

233
00:10:33,550 --> 00:10:36,020
prototyping stack on production as well

234
00:10:36,020 --> 00:10:38,570
and that was obviously great for us

235
00:10:38,570 --> 00:10:41,600
because it helped us to not leave the

236
00:10:41,600 --> 00:10:44,270
old stacks behind because if you want to

237
00:10:44,270 --> 00:10:47,000
push for new apps it's obviously an easy

238
00:10:47,000 --> 00:10:48,770
choice to say we want to go for nodes

239
00:10:48,770 --> 00:10:51,320
and we want to go for awesome JavaScript

240
00:10:51,320 --> 00:10:53,780
templates and we leave the old stuff

241
00:10:53,780 --> 00:10:55,280
behind but since we have so many

242
00:10:55,280 --> 00:10:57,440
different applications that was not

243
00:10:57,440 --> 00:10:59,410
really something that we could do

244
00:10:59,410 --> 00:11:02,989
so we wanted to try out notes in

245
00:11:02,989 --> 00:11:07,160
production and this one thought this one

246
00:11:07,160 --> 00:11:10,399
wish came from a simple project PayPal

247
00:11:10,399 --> 00:11:12,379
checkout page that you might know if you

248
00:11:12,379 --> 00:11:14,089
go and buy something online and it

249
00:11:14,089 --> 00:11:16,519
redirects you to PayPal generates more

250
00:11:16,519 --> 00:11:21,419
than 3.5 billion dollars every year and

251
00:11:21,429 --> 00:11:24,499
we thought why not start at the core of

252
00:11:24,499 --> 00:11:26,720
paper at the one thing that drives most

253
00:11:26,720 --> 00:11:31,100
of our revenue so a project got named

254
00:11:31,100 --> 00:11:34,089
after the god Hermes God's born and

255
00:11:34,089 --> 00:11:37,119
Hermes is we got of agility and mobility

256
00:11:37,119 --> 00:11:40,489
so what we did is we started with a very

257
00:11:40,489 --> 00:11:44,419
simple stack that we just introduced at

258
00:11:44,419 --> 00:11:46,970
the beginning of that week so we had no

259
00:11:46,970 --> 00:11:49,549
js' running we use bootstrap to do some

260
00:11:49,549 --> 00:11:52,999
very lean UI and we use some other

261
00:11:52,999 --> 00:11:56,079
open-source as I mentioned we used Bower

262
00:11:56,079 --> 00:11:58,579
and the first prototype of a new

263
00:11:58,579 --> 00:12:00,889
checkout platform was born in three days

264
00:12:00,889 --> 00:12:03,079
and people were incredibly excited

265
00:12:03,079 --> 00:12:05,299
because we didn't have to fiddle around

266
00:12:05,299 --> 00:12:07,129
with our own frameworks it was much

267
00:12:07,129 --> 00:12:10,039
easier for new engineers to get involved

268
00:12:10,039 --> 00:12:13,249
so that was great and then we thought we

269
00:12:13,249 --> 00:12:15,289
should definitely try this with another

270
00:12:15,289 --> 00:12:18,439
project and that's we account page the

271
00:12:18,439 --> 00:12:21,619
paper wallet app so if you go to PayPal

272
00:12:21,619 --> 00:12:23,179
and log in over there and you see your

273
00:12:23,179 --> 00:12:24,979
balance and your funding sources and all

274
00:12:24,979 --> 00:12:27,289
that stuff that is actually the first

275
00:12:27,289 --> 00:12:30,970
project that we did and it's actually

276
00:12:30,970 --> 00:12:33,979
kind of risk to go for a new platform in

277
00:12:33,979 --> 00:12:35,569
production if you're not sure that it's

278
00:12:35,569 --> 00:12:38,439
really running so what we did is we had

279
00:12:38,439 --> 00:12:41,179
first this initial project if you check

280
00:12:41,179 --> 00:12:42,889
out page and people were convinced we

281
00:12:42,889 --> 00:12:45,589
should try it right so we had two teams

282
00:12:45,589 --> 00:12:47,869
starting with two projects the first

283
00:12:47,869 --> 00:12:49,909
team was a traditional Java team that

284
00:12:49,909 --> 00:12:52,189
was used to our stack and was well

285
00:12:52,189 --> 00:12:53,899
trained in actually building apps on the

286
00:12:53,899 --> 00:12:57,109
stack the second team was only two

287
00:12:57,109 --> 00:12:59,329
JavaScript engineers compared to five

288
00:12:59,329 --> 00:13:01,879
Java engineers and they were supposed to

289
00:13:01,879 --> 00:13:03,529
just give it a try and made the same

290
00:13:03,529 --> 00:13:06,169
kind of experience so we started in

291
00:13:06,169 --> 00:13:10,519
January in 2013 and we a Java team

292
00:13:10,519 --> 00:13:12,379
obviously used the existing components

293
00:13:12,379 --> 00:13:12,590
and

294
00:13:12,590 --> 00:13:15,290
debating the app in March just two

295
00:13:15,290 --> 00:13:17,360
months after the environment for no it

296
00:13:17,360 --> 00:13:19,400
was completely set up so we had key

297
00:13:19,400 --> 00:13:22,520
stores we had logging services where you

298
00:13:22,520 --> 00:13:24,620
we knew how to connect your databases

299
00:13:24,620 --> 00:13:26,510
and so on so that's what we two

300
00:13:26,510 --> 00:13:30,230
engineers paid on javascript now in June

301
00:13:30,230 --> 00:13:33,590
the two teams met I met Crossroads so in

302
00:13:33,590 --> 00:13:35,690
terms of functionality both applications

303
00:13:35,690 --> 00:13:38,240
were in power one team five Java

304
00:13:38,240 --> 00:13:40,280
engineers started with all the existing

305
00:13:40,280 --> 00:13:43,850
services the other team was just two

306
00:13:43,850 --> 00:13:48,050
nodes in genius so we ran a few

307
00:13:48,050 --> 00:13:50,210
functionality tests and all of them

308
00:13:50,210 --> 00:13:52,340
passed and we were actually really

309
00:13:52,340 --> 00:13:53,990
convinced that this is a good sign

310
00:13:53,990 --> 00:13:57,500
and run a few benchmarks so I don't want

311
00:13:57,500 --> 00:13:59,270
to bore you too much with numbers but

312
00:13:59,270 --> 00:14:01,220
just to quickly go into it we have a

313
00:14:01,220 --> 00:14:03,440
bunch of different requests with number

314
00:14:03,440 --> 00:14:06,200
of users and this is the Java stack and

315
00:14:06,200 --> 00:14:08,840
you see the Java stack actually averages

316
00:14:08,840 --> 00:14:11,660
at some point at about eleven pages per

317
00:14:11,660 --> 00:14:14,890
seconds starting with one user per

318
00:14:14,890 --> 00:14:18,380
request and let me go higher up to 15

319
00:14:18,380 --> 00:14:21,980
users that request at the same time now

320
00:14:21,980 --> 00:14:24,500
this is five-course for actually

321
00:14:24,500 --> 00:14:26,000
production hardware that we are using

322
00:14:26,000 --> 00:14:30,140
and then we had the note stack and the

323
00:14:30,140 --> 00:14:32,240
node stack actually serves nearly double

324
00:14:32,240 --> 00:14:35,360
requests and the same stuff happens just

325
00:14:35,360 --> 00:14:38,420
on one core at that moment so it was a

326
00:14:38,420 --> 00:14:41,570
very young new stack it was barely

327
00:14:41,570 --> 00:14:43,520
optimized and was more efficient

328
00:14:43,520 --> 00:14:46,310
straightaway obviously you cannot really

329
00:14:46,310 --> 00:14:49,040
compare apples to peaches so it's not

330
00:14:49,040 --> 00:14:50,840
completely fair to compare those two

331
00:14:50,840 --> 00:14:53,000
because one is using our proprietary

332
00:14:53,000 --> 00:14:56,900
Java kind of stack the other not but at

333
00:14:56,900 --> 00:14:58,460
least for us it was a good sign that we

334
00:14:58,460 --> 00:15:00,890
could go ahead with this a few more

335
00:15:00,890 --> 00:15:04,700
numbers that we had were pretty much big

336
00:15:04,700 --> 00:15:06,800
coats was actually very lean we had to

337
00:15:06,800 --> 00:15:08,660
write less code to achieve the same and

338
00:15:08,660 --> 00:15:11,540
we needed less engineers to do the same

339
00:15:11,540 --> 00:15:14,570
work so we were kind of convinced to go

340
00:15:14,570 --> 00:15:18,320
ahead now our Java engineers clearly

341
00:15:18,320 --> 00:15:21,310
were not so negative about it started to

342
00:15:21,310 --> 00:15:23,840
contribute to parallel work streams and

343
00:15:23,840 --> 00:15:26,029
got taught too

344
00:15:26,029 --> 00:15:28,189
get some more note note skills and

345
00:15:28,189 --> 00:15:31,699
JavaScript skills now be new stack at

346
00:15:31,699 --> 00:15:34,579
paper changed over and what we have

347
00:15:34,579 --> 00:15:38,329
right now is C++ we have Java serving

348
00:15:38,329 --> 00:15:40,459
some older apps and all the new tannu

349
00:15:40,459 --> 00:15:43,819
apps running nodes and I think the

350
00:15:43,819 --> 00:15:46,189
biggest step into this direction for us

351
00:15:46,189 --> 00:15:48,220
was actually decoupling our UI first

352
00:15:48,220 --> 00:15:50,930
because obviously if your application

353
00:15:50,930 --> 00:15:52,879
layer and the UI layer are really

354
00:15:52,879 --> 00:15:55,459
tightly integrated it's very very hard

355
00:15:55,459 --> 00:15:58,759
for you to iterate and go ahead and

356
00:15:58,759 --> 00:16:01,100
start a new stack so now that we were

357
00:16:01,100 --> 00:16:02,899
able to run dust on all those three

358
00:16:02,899 --> 00:16:05,870
different stacks we can basically bring

359
00:16:05,870 --> 00:16:07,670
all new features to all stacks which is

360
00:16:07,670 --> 00:16:09,949
amazing for us now since we do

361
00:16:09,949 --> 00:16:12,319
JavaScript templating it comes with a

362
00:16:12,319 --> 00:16:14,420
big benefit that we can run the render

363
00:16:14,420 --> 00:16:16,399
both on the client side and the server

364
00:16:16,399 --> 00:16:19,699
side and we actually use that quite a

365
00:16:19,699 --> 00:16:21,470
lot so what you will see if you go to

366
00:16:21,470 --> 00:16:24,620
paypal.com the initial start page is

367
00:16:24,620 --> 00:16:26,269
always rendered on server side and then

368
00:16:26,269 --> 00:16:28,879
for dynamic content we can decide on

369
00:16:28,879 --> 00:16:30,829
Leafly if we want to render that ahead

370
00:16:30,829 --> 00:16:32,540
or just when the client really loads it

371
00:16:32,540 --> 00:16:37,430
up so one of the benefits of node is

372
00:16:37,430 --> 00:16:38,959
obviously the node package manager and

373
00:16:38,959 --> 00:16:42,290
be used heavily to actually distribute

374
00:16:42,290 --> 00:16:45,139
our internal services so if we want to

375
00:16:45,139 --> 00:16:48,579
use our monitoring services security

376
00:16:48,579 --> 00:16:50,600
anything that actually interacts with

377
00:16:50,600 --> 00:16:54,350
our C++ stack we can just go ahead and

378
00:16:54,350 --> 00:16:57,110
install San NPM modules and we're using

379
00:16:57,110 --> 00:17:00,079
an internal NPM proxy for that which I

380
00:17:00,079 --> 00:17:03,920
will show in a few seconds as well now

381
00:17:03,920 --> 00:17:05,750
we had this situation we were finally

382
00:17:05,750 --> 00:17:09,289
able to start and actually go ahead and

383
00:17:09,289 --> 00:17:11,630
use nodes and we had dust and everything

384
00:17:11,630 --> 00:17:14,990
was great right so for us this was the

385
00:17:14,990 --> 00:17:18,470
moment to release McCracken and the

386
00:17:18,470 --> 00:17:21,199
animation you just saw took me about

387
00:17:21,199 --> 00:17:24,199
half an hour

388
00:17:24,209 --> 00:17:26,309
so he's telling me I'm addicted about

389
00:17:26,309 --> 00:17:33,029
her so with cracking we actually had

390
00:17:33,029 --> 00:17:36,090
this one situation where a lot of

391
00:17:36,090 --> 00:17:38,070
different teams have been working on

392
00:17:38,070 --> 00:17:40,320
notes they leveraged Express we used

393
00:17:40,320 --> 00:17:43,110
happy lots of different kind of ways to

394
00:17:43,110 --> 00:17:45,779
abate our service and a few best

395
00:17:45,779 --> 00:17:49,230
practices actually started together so

396
00:17:49,230 --> 00:17:51,770
Kraken is a suit on top of express um

397
00:17:51,770 --> 00:17:54,390
it's not a whole framework I wouldn't

398
00:17:54,390 --> 00:17:56,700
call it framework and it comes with a

399
00:17:56,700 --> 00:17:59,250
lot of kind of sensible defaults a lot

400
00:17:59,250 --> 00:18:01,140
of pre-configured stuff that makes sense

401
00:18:01,140 --> 00:18:04,980
so as I said we used dust for templating

402
00:18:04,980 --> 00:18:07,080
but it doesn't necessarily have to be

403
00:18:07,080 --> 00:18:09,090
dust so if you like Jade or if you like

404
00:18:09,090 --> 00:18:11,850
eg a s or anything else you can just go

405
00:18:11,850 --> 00:18:15,750
ahead and use that and originally it was

406
00:18:15,750 --> 00:18:19,110
made to make middle scale to corporate

407
00:18:19,110 --> 00:18:22,559
skates companies adopt note faster but

408
00:18:22,559 --> 00:18:24,179
we actually noticed that lots of

409
00:18:24,179 --> 00:18:27,210
startups started using lust and started

410
00:18:27,210 --> 00:18:29,370
using cotton because they didn't have to

411
00:18:29,370 --> 00:18:31,110
care about security and a lot of other

412
00:18:31,110 --> 00:18:33,659
stuff and it's heavily taps into

413
00:18:33,659 --> 00:18:35,909
middleware which obviously comes both

414
00:18:35,909 --> 00:18:39,950
with Express and cracking and at moments

415
00:18:39,950 --> 00:18:43,620
now the reason is as I said lots of

416
00:18:43,620 --> 00:18:45,899
different teams at paper are working on

417
00:18:45,899 --> 00:18:47,370
the same kind of stacks and they did

418
00:18:47,370 --> 00:18:49,950
different apps now if you have a lot of

419
00:18:49,950 --> 00:18:51,870
teams building apps in the same

420
00:18:51,870 --> 00:18:53,549
frameworks or different frameworks you

421
00:18:53,549 --> 00:18:56,309
will realize everybody configures

422
00:18:56,309 --> 00:18:58,950
frameworks differently if you have now

423
00:18:58,950 --> 00:19:01,020
engineers moving from one project into

424
00:19:01,020 --> 00:19:03,179
another they kind of lost because

425
00:19:03,179 --> 00:19:04,740
configuration is made difference

426
00:19:04,740 --> 00:19:07,230
some of them might use some JSON files

427
00:19:07,230 --> 00:19:09,390
for configuration some of them use some

428
00:19:09,390 --> 00:19:11,970
methods to initialize things so it was a

429
00:19:11,970 --> 00:19:14,730
big mess and we try to resolve that by

430
00:19:14,730 --> 00:19:17,100
bringing some best practices into that

431
00:19:17,100 --> 00:19:21,179
and now I already said it before they

432
00:19:21,179 --> 00:19:22,500
have actually more time to be eight

433
00:19:22,500 --> 00:19:24,120
projects instead of setting up the

434
00:19:24,120 --> 00:19:26,330
environments which is really good for us

435
00:19:26,330 --> 00:19:29,789
the project structure is actually kind

436
00:19:29,789 --> 00:19:33,030
of opinion so we try to push for a clear

437
00:19:33,030 --> 00:19:35,440
Model View controller

438
00:19:35,440 --> 00:19:39,260
way and we used that initially by having

439
00:19:39,260 --> 00:19:42,110
kind of different frameworks so we use

440
00:19:42,110 --> 00:19:44,260
backbone and a lot of other frameworks

441
00:19:44,260 --> 00:19:47,120
but it was a bit too heavy for us so we

442
00:19:47,120 --> 00:19:49,490
just went ahead and did our own folder

443
00:19:49,490 --> 00:19:51,290
structure and that works incredibly well

444
00:19:51,290 --> 00:19:54,530
for us so we have those templates as I

445
00:19:54,530 --> 00:19:56,240
said can be rendered both server and

446
00:19:56,240 --> 00:19:57,740
client sites

447
00:19:57,740 --> 00:19:59,750
it comes with unit testing straight

448
00:19:59,750 --> 00:20:02,960
ahead and what is interesting about

449
00:20:02,960 --> 00:20:06,800
cracking is that we moved the logic away

450
00:20:06,800 --> 00:20:09,920
from our initial in the x-ray ass or fjs

451
00:20:09,920 --> 00:20:13,010
file into the different controllers so

452
00:20:13,010 --> 00:20:15,110
controllers handle routing and a lot of

453
00:20:15,110 --> 00:20:17,180
other stuff and this is something that

454
00:20:17,180 --> 00:20:19,190
you can actually see it's now also

455
00:20:19,190 --> 00:20:22,190
present in Xpress 4 so Express free

456
00:20:22,190 --> 00:20:24,380
initially didn't have that and they

457
00:20:24,380 --> 00:20:26,570
actually moved it over into Express 4 as

458
00:20:26,570 --> 00:20:28,370
well because they realized it helps to

459
00:20:28,370 --> 00:20:31,430
have much cleaner fights and way more

460
00:20:31,430 --> 00:20:36,370
structure and I think the best for

461
00:20:36,370 --> 00:20:38,390
modules and there is a whole lot of

462
00:20:38,390 --> 00:20:40,030
different modules that come with it a

463
00:20:40,030 --> 00:20:44,620
mcaren lisca Adaro and CAPA Makara is

464
00:20:44,620 --> 00:20:46,870
used to do internationalization

465
00:20:46,870 --> 00:20:49,040
localization or specialization in your

466
00:20:49,040 --> 00:20:49,340
apps

467
00:20:49,340 --> 00:20:52,730
lioska is coming with a lot of sensible

468
00:20:52,730 --> 00:20:56,270
security defaults Adaro is used to bring

469
00:20:56,270 --> 00:20:58,640
the Strayer support and CAPA is our NPM

470
00:20:58,640 --> 00:21:02,090
proxy now if you want to do localization

471
00:21:02,090 --> 00:21:04,040
it's actually quite easy we use key

472
00:21:04,040 --> 00:21:06,260
value files for that it's not Jason it's

473
00:21:06,260 --> 00:21:09,440
our own kind of format with property

474
00:21:09,440 --> 00:21:12,260
files and you just load up lots of

475
00:21:12,260 --> 00:21:14,510
different content bundles and you can do

476
00:21:14,510 --> 00:21:16,780
that on the fly or you can obviously use

477
00:21:16,780 --> 00:21:19,610
gratin to do that for you but you don't

478
00:21:19,610 --> 00:21:21,500
have to use Kraken to use all of these

479
00:21:21,500 --> 00:21:23,930
modules so what we do is we have a

480
00:21:23,930 --> 00:21:26,270
provider that just loads for various

481
00:21:26,270 --> 00:21:28,870
locates and it basically provides those

482
00:21:28,870 --> 00:21:31,250
different values for you which is kind

483
00:21:31,250 --> 00:21:34,280
of good and the property files are not

484
00:21:34,280 --> 00:21:36,140
really complex as I said it's not JSON

485
00:21:36,140 --> 00:21:38,660
syntax but it allows for some structures

486
00:21:38,660 --> 00:21:40,910
where you can bring arrays in there you

487
00:21:40,910 --> 00:21:44,210
can define multiple values it's actually

488
00:21:44,210 --> 00:21:46,970
kind of useful for us you don't have to

489
00:21:46,970 --> 00:21:48,380
use this format

490
00:21:48,380 --> 00:21:50,150
but I think it's actually pretty good

491
00:21:50,150 --> 00:21:51,530
since it also supports some more

492
00:21:51,530 --> 00:21:55,580
structure like subkeys now if you want

493
00:21:55,580 --> 00:21:57,710
to use this it actually heavily taps

494
00:21:57,710 --> 00:22:01,100
into dust so one of the good things

495
00:22:01,100 --> 00:22:04,640
about it is if you switch be located it

496
00:22:04,640 --> 00:22:07,880
automatically changes changes we locate

497
00:22:07,880 --> 00:22:10,010
for you and be templates as well by

498
00:22:10,010 --> 00:22:12,680
leveraging the folder structure so

499
00:22:12,680 --> 00:22:14,930
different keys in different languages

500
00:22:14,930 --> 00:22:17,600
get visible for you which is very handy

501
00:22:17,600 --> 00:22:20,060
and you can see that down below with the

502
00:22:20,060 --> 00:22:22,640
head attack so it basically just loads

503
00:22:22,640 --> 00:22:25,580
up the index start quitting and index is

504
00:22:25,580 --> 00:22:29,240
my controller so my localization is

505
00:22:29,240 --> 00:22:31,340
bound to my controller and it just

506
00:22:31,340 --> 00:22:33,260
basically loads in a file for me which

507
00:22:33,260 --> 00:22:37,640
is really handy for us and if I want to

508
00:22:37,640 --> 00:22:38,420
use Adaro

509
00:22:38,420 --> 00:22:40,610
I basically just defined dust as my view

510
00:22:40,610 --> 00:22:43,580
engine for express obviously I can still

511
00:22:43,580 --> 00:22:45,860
as I said before use any other view

512
00:22:45,860 --> 00:22:50,080
engine it's just dust for us because a

513
00:22:50,080 --> 00:22:52,490
lot of new engines try to have a lot of

514
00:22:52,490 --> 00:22:55,610
logic in their files and they try to do

515
00:22:55,610 --> 00:22:57,500
a lot of processing for you and

516
00:22:57,500 --> 00:22:59,750
calculations and that stuff and we tend

517
00:22:59,750 --> 00:23:02,330
to move that rather into our controller

518
00:23:02,330 --> 00:23:06,320
logic so you basically have a layout and

519
00:23:06,320 --> 00:23:08,450
you provide your palettes into it and

520
00:23:08,450 --> 00:23:10,370
what happens is it fades up the content

521
00:23:10,370 --> 00:23:13,060
so nothing new nothing magic in there

522
00:23:13,060 --> 00:23:15,710
dust comes with some cool stuff like

523
00:23:15,710 --> 00:23:17,750
sections and you can provide your view

524
00:23:17,750 --> 00:23:20,720
context into that so different models

525
00:23:20,720 --> 00:23:24,440
can be just rendered directly and it

526
00:23:24,440 --> 00:23:27,500
also comes with conditionals so not too

527
00:23:27,500 --> 00:23:30,290
much logic because it's just saying if a

528
00:23:30,290 --> 00:23:32,150
certain content is there show it or

529
00:23:32,150 --> 00:23:34,850
don't show it so it doesn't really try

530
00:23:34,850 --> 00:23:39,170
to be dead smart now security is

531
00:23:39,170 --> 00:23:40,400
something that I think is kind of

532
00:23:40,400 --> 00:23:40,940
interesting

533
00:23:40,940 --> 00:23:44,060
lots of frameworks come with security

534
00:23:44,060 --> 00:23:46,280
measurements and lots of kind of ways to

535
00:23:46,280 --> 00:23:49,430
make your app secure and harden it but

536
00:23:49,430 --> 00:23:51,260
lots of those frameworks also don't come

537
00:23:51,260 --> 00:23:53,030
with sensible defaults so they just

538
00:23:53,030 --> 00:23:54,890
assume you do the configuration and

539
00:23:54,890 --> 00:23:57,020
quite often developers tend to not do

540
00:23:57,020 --> 00:24:00,920
that so one of the biggest features we

541
00:24:00,920 --> 00:24:02,090
support is

542
00:24:02,090 --> 00:24:04,250
prevention of cross cross-site request

543
00:24:04,250 --> 00:24:08,149
forgery see Cerf and it basically says

544
00:24:08,149 --> 00:24:10,039
if you want to manipulate my data with

545
00:24:10,039 --> 00:24:13,610
post requests put or delete you have to

546
00:24:13,610 --> 00:24:15,649
provide a token to make sure that it's

547
00:24:15,649 --> 00:24:17,259
really the app and not somebody else

548
00:24:17,259 --> 00:24:19,940
click tracking which basically means I'm

549
00:24:19,940 --> 00:24:22,370
framing your website in another website

550
00:24:22,370 --> 00:24:25,429
can be prevented by setting up the

551
00:24:25,429 --> 00:24:29,120
same-origin header it comes with output

552
00:24:29,120 --> 00:24:32,120
escaping against cross-site scripting

553
00:24:32,120 --> 00:24:34,629
and content security policy supports and

554
00:24:34,629 --> 00:24:37,610
if you've attended last year's J's comp

555
00:24:37,610 --> 00:24:39,110
you might have seen my quest talking

556
00:24:39,110 --> 00:24:41,240
about content security policy it's

557
00:24:41,240 --> 00:24:44,389
really awesome stuff configuration

558
00:24:44,389 --> 00:24:47,539
happens via JSON so you basically just

559
00:24:47,539 --> 00:24:49,759
say I want that feature I don't want to

560
00:24:49,759 --> 00:24:52,210
have that feature this is my setting or

561
00:24:52,210 --> 00:24:54,679
you can just go through the method calls

562
00:24:54,679 --> 00:24:56,960
one by one so you don't have to use all

563
00:24:56,960 --> 00:24:59,409
those kind of things

564
00:24:59,409 --> 00:25:03,110
now I already mentioned you have to

565
00:25:03,110 --> 00:25:05,210
provide a token and it's basically just

566
00:25:05,210 --> 00:25:07,279
a hidden input fields that you provide

567
00:25:07,279 --> 00:25:09,740
over to the app and then it plays a key

568
00:25:09,740 --> 00:25:13,389
validation or at manipulating me data

569
00:25:13,389 --> 00:25:17,299
the NPM proxy Kappa is very easy to

570
00:25:17,299 --> 00:25:19,370
install you can go for that globally or

571
00:25:19,370 --> 00:25:22,309
locally and that's basically what we use

572
00:25:22,309 --> 00:25:23,899
to distribute our different services

573
00:25:23,899 --> 00:25:26,029
like the key store database access

574
00:25:26,029 --> 00:25:29,210
logging monitoring and it's based on

575
00:25:29,210 --> 00:25:31,779
another module currently to NPM delegate

576
00:25:31,779 --> 00:25:34,039
and if you look at the configuration

577
00:25:34,039 --> 00:25:36,440
it's really just a folder so I got

578
00:25:36,440 --> 00:25:38,570
called config and in that folder you

579
00:25:38,570 --> 00:25:40,879
have a bunch of different files and you

580
00:25:40,879 --> 00:25:43,580
can set up various environments so you

581
00:25:43,580 --> 00:25:45,590
can say this is my staging config this

582
00:25:45,590 --> 00:25:47,600
is my development this is my test

583
00:25:47,600 --> 00:25:50,480
environment and it's pretty much easy to

584
00:25:50,480 --> 00:25:54,200
set up in this case you see the view

585
00:25:54,200 --> 00:25:56,210
engines and you can obviously do that

586
00:25:56,210 --> 00:25:57,710
for all the kind of different settings

587
00:25:57,710 --> 00:26:00,860
for cotton now if you want to set up

588
00:26:00,860 --> 00:26:04,009
cracking with let's say passports you

589
00:26:04,009 --> 00:26:06,919
could go and really just configure it by

590
00:26:06,919 --> 00:26:10,309
providing some options to it and this is

591
00:26:10,309 --> 00:26:12,289
just the index.js file that you would

592
00:26:12,289 --> 00:26:15,680
use for that and now we

593
00:26:15,680 --> 00:26:17,630
nice thing is about that you don't need

594
00:26:17,630 --> 00:26:20,240
to miss mess around if you lifecycle you

595
00:26:20,240 --> 00:26:22,430
don't need to figure out when is my

596
00:26:22,430 --> 00:26:25,340
module being loaded and why you just tap

597
00:26:25,340 --> 00:26:27,500
into different events like in this case

598
00:26:27,500 --> 00:26:30,200
middleware so after my session is low

599
00:26:30,200 --> 00:26:31,940
that I make sure that my I can use my

600
00:26:31,940 --> 00:26:34,850
passport local strategy I just make sure

601
00:26:34,850 --> 00:26:36,470
that the user is nicely serialized

602
00:26:36,470 --> 00:26:40,070
deserialized and that's it so it

603
00:26:40,070 --> 00:26:42,170
provides a very very clean way to make

604
00:26:42,170 --> 00:26:44,630
sure that my projects are nicely and

605
00:26:44,630 --> 00:26:48,580
visible so I think it helps a lot and

606
00:26:48,580 --> 00:26:50,990
since we wanted to make sure that people

607
00:26:50,990 --> 00:26:53,120
don't have to set up this stuff manually

608
00:26:53,120 --> 00:26:56,960
and it comes with a yeoman generator so

609
00:26:56,960 --> 00:27:00,770
you do NPM install generator Kraken call

610
00:27:00,770 --> 00:27:02,990
yo cracker in your shell and that's it

611
00:27:02,990 --> 00:27:06,200
it's really easy to set up and I think

612
00:27:06,200 --> 00:27:08,150
it's pretty cool because it does a lot

613
00:27:08,150 --> 00:27:10,370
of scaffolding for you so it comes with

614
00:27:10,370 --> 00:27:11,570
the templates it comes to few

615
00:27:11,570 --> 00:27:13,460
localization v3 tests automatically

616
00:27:13,460 --> 00:27:16,550
which is really useful for all of us I

617
00:27:16,550 --> 00:27:20,480
guess so cracking nowadays is already in

618
00:27:20,480 --> 00:27:23,180
version 1 that X which also came with

619
00:27:23,180 --> 00:27:26,240
the Express for push and I think one of

620
00:27:26,240 --> 00:27:28,910
the features that we will focus on

621
00:27:28,910 --> 00:27:31,580
heavily is going to be specialization

622
00:27:31,580 --> 00:27:34,490
which is not going to be purely used for

623
00:27:34,490 --> 00:27:37,760
a be testing but also for mobile device

624
00:27:37,760 --> 00:27:41,450
versus desktop and so on so it allows us

625
00:27:41,450 --> 00:27:45,530
to do a lot of this kind of logic and

626
00:27:45,530 --> 00:27:49,250
well I can summarize for us it has been

627
00:27:49,250 --> 00:27:51,860
actually a really good ride to introduce

628
00:27:51,860 --> 00:27:53,450
note and especially cracking to the

629
00:27:53,450 --> 00:27:56,000
company we have those really small teams

630
00:27:56,000 --> 00:27:57,830
with lots of JavaScript full stack

631
00:27:57,830 --> 00:27:59,900
engineers that are able to move much

632
00:27:59,900 --> 00:28:02,840
faster we can write our applications

633
00:28:02,840 --> 00:28:06,340
more efficiently we have now dust as one

634
00:28:06,340 --> 00:28:09,350
UI up layer so we don't have to mess

635
00:28:09,350 --> 00:28:12,410
around of different templates and it was

636
00:28:12,410 --> 00:28:14,660
our very first big portal pushed into

637
00:28:14,660 --> 00:28:17,600
open source so for us it really helped

638
00:28:17,600 --> 00:28:18,920
to make sure that we are not just

639
00:28:18,920 --> 00:28:20,780
building profits or a primitive sorry

640
00:28:20,780 --> 00:28:22,880
proprietary software for paper and

641
00:28:22,880 --> 00:28:24,920
release that you to device we actually

642
00:28:24,920 --> 00:28:26,630
try to figure out what will be useful

643
00:28:26,630 --> 00:28:27,930
for everybody

644
00:28:27,930 --> 00:28:30,630
and our teams are now so convinced that

645
00:28:30,630 --> 00:28:32,730
all the new apps are going to be written

646
00:28:32,730 --> 00:28:35,940
on note purely big thanks for attending

647
00:28:35,940 --> 00:28:38,550
my talk and I'm hoping for some

648
00:28:38,550 --> 00:28:45,580
questions

