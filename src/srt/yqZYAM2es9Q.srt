1
00:00:00,180 --> 00:00:13,930

[Music]

2
00:00:13,940 --> 00:00:17,760
I'm willing to bet that pretty much none

3
00:00:17,760 --> 00:00:19,170
of you has ever heard of the emerging

4
00:00:19,170 --> 00:00:21,630
technologies group at Mozilla that's

5
00:00:21,630 --> 00:00:23,970
okay and we're gonna fix that I'm sure

6
00:00:23,970 --> 00:00:25,560
you're all familiar with the Firefox

7
00:00:25,560 --> 00:00:27,330
group after all that's the team the

8
00:00:27,330 --> 00:00:28,949
engineering team at Mozilla builds

9
00:00:28,949 --> 00:00:31,679
Firefox in emerging technologies we are

10
00:00:31,679 --> 00:00:36,450
the other engineering team and our a

11
00:00:36,450 --> 00:00:38,820
quick summary of our role is really the

12
00:00:38,820 --> 00:00:41,129
title of my talk enabling new web

13
00:00:41,129 --> 00:00:47,039
experiences and so I'm hoping to spend a

14
00:00:47,039 --> 00:00:48,390
little bit of time this afternoon at the

15
00:00:48,390 --> 00:00:49,800
end of the day walking you through the

16
00:00:49,800 --> 00:00:51,210
work that we're doing in the emerging

17
00:00:51,210 --> 00:00:53,610
technologies group introducing network

18
00:00:53,610 --> 00:00:55,350
and getting you acquainted with some of

19
00:00:55,350 --> 00:00:58,050
what we work on in what we do but I have

20
00:00:58,050 --> 00:01:01,109
another motive in doing so which is that

21
00:01:01,109 --> 00:01:04,549
I think it's fair to say that while the

22
00:01:04,549 --> 00:01:07,770
title is enabling new web experiences we

23
00:01:07,770 --> 00:01:09,600
expect that actually building those web

24
00:01:09,600 --> 00:01:11,729
experiences is something that you are

25
00:01:11,729 --> 00:01:13,350
all are going to do and so we have a

26
00:01:13,350 --> 00:01:15,450
very strong interest in spending a lot

27
00:01:15,450 --> 00:01:17,400
of time with developers understanding

28
00:01:17,400 --> 00:01:19,080
what their needs are what the

29
00:01:19,080 --> 00:01:20,640
requirements are what technologies are

30
00:01:20,640 --> 00:01:22,140
relevant what kind of new experiences

31
00:01:22,140 --> 00:01:23,909
would you like to be able to build or

32
00:01:23,909 --> 00:01:25,590
better versions of today's experience

33
00:01:25,590 --> 00:01:27,600
and so I'm hoping that in walking

34
00:01:27,600 --> 00:01:29,490
through the various projects that we

35
00:01:29,490 --> 00:01:31,259
have underway and the technology areas

36
00:01:31,259 --> 00:01:33,540
that we're active in we'll find some

37
00:01:33,540 --> 00:01:34,470
place that will spark some interest

38
00:01:34,470 --> 00:01:36,360
they'll have an opportunity to come and

39
00:01:36,360 --> 00:01:39,150
talk to us in in the booth or tour

40
00:01:39,150 --> 00:01:42,540
tomorrow or Saturday or just generally

41
00:01:42,540 --> 00:01:46,290
afterwards I will say that I'm guessing

42
00:01:46,290 --> 00:01:48,600
you might be familiar some of you at

43
00:01:48,600 --> 00:01:50,670
least with the graphic that's on the

44
00:01:50,670 --> 00:01:53,189
screen here this is something I

45
00:01:53,189 --> 00:01:54,780
hopefully you will have seen before this

46
00:01:54,780 --> 00:01:58,200
is the mark 57 power suit part of the

47
00:01:58,200 --> 00:01:59,880
visual identity that we created for

48
00:01:59,880 --> 00:02:03,000
Firefox quantum the major update that we

49
00:02:03,000 --> 00:02:04,799
made to Firefox and launched in November

50
00:02:04,799 --> 00:02:06,899
of last year and the reason for using

51
00:02:06,899 --> 00:02:09,179
that graphic and my talk is part of this

52
00:02:09,179 --> 00:02:10,920
new web experience enablement work that

53
00:02:10,920 --> 00:02:13,530
we did was in playing a critical role

54
00:02:13,530 --> 00:02:16,200
in Firefox quantum and in the components

55
00:02:16,200 --> 00:02:19,230
of the mark 57 Power Suit and so in our

56
00:02:19,230 --> 00:02:21,560
walking tour of emerging technologies

57
00:02:21,560 --> 00:02:26,070
that's where we will actually start so

58
00:02:26,070 --> 00:02:29,520
the story in that particular vein begins

59
00:02:29,520 --> 00:02:32,310
with rust we've had a substantial effort

60
00:02:32,310 --> 00:02:33,870
in rust it was a programming language

61
00:02:33,870 --> 00:02:35,340
and you may wonder why talk about

62
00:02:35,340 --> 00:02:36,870
another programming language at a

63
00:02:36,870 --> 00:02:39,750
JavaScript conference but if you hang

64
00:02:39,750 --> 00:02:42,090
with me for a few slides I think you'll

65
00:02:42,090 --> 00:02:45,120
see how the dots connect but rust is a

66
00:02:45,120 --> 00:02:47,580
programming language that was begun at

67
00:02:47,580 --> 00:02:53,130
Mozilla in earnest in about 2009 and it

68
00:02:53,130 --> 00:02:55,260
was motivated by a problem that we had

69
00:02:55,260 --> 00:02:59,540
trying to maintain a large complex C++

70
00:02:59,540 --> 00:03:03,720
six million lines of code product and we

71
00:03:03,720 --> 00:03:05,250
kept bumping our heads against a couple

72
00:03:05,250 --> 00:03:07,560
of problems that really took a lot of

73
00:03:07,560 --> 00:03:09,570
time and energy out of the product out

74
00:03:09,570 --> 00:03:10,680
of our customers and out of our

75
00:03:10,680 --> 00:03:12,870
engineering teams and we began to wonder

76
00:03:12,870 --> 00:03:14,790
if these two major classes of products

77
00:03:14,790 --> 00:03:15,720
were products that we could actually

78
00:03:15,720 --> 00:03:18,269
find a better way to solve one of those

79
00:03:18,269 --> 00:03:20,549
problems was that we were seeing the

80
00:03:20,549 --> 00:03:23,160
emergence of hardware that had a

81
00:03:23,160 --> 00:03:25,440
tremendous ability to support

82
00:03:25,440 --> 00:03:28,380
parallelization and execution more cores

83
00:03:28,380 --> 00:03:31,920
more execution threads and while it's

84
00:03:31,920 --> 00:03:33,360
great that the hardware had those

85
00:03:33,360 --> 00:03:35,549
capabilities as programmers and as

86
00:03:35,549 --> 00:03:37,549
humans as I'm sure many of you know

87
00:03:37,549 --> 00:03:40,049
parallelizing things robustly is is a

88
00:03:40,049 --> 00:03:42,660
non-trivial problem to solve and so we

89
00:03:42,660 --> 00:03:44,940
had the suspicion that we could actually

90
00:03:44,940 --> 00:03:46,440
find a ways to help us solve that

91
00:03:46,440 --> 00:03:47,940
problem in the programming languages

92
00:03:47,940 --> 00:03:50,310
that we used and so that was one

93
00:03:50,310 --> 00:03:52,769
motivation the other one was that we

94
00:03:52,769 --> 00:03:56,070
spend and you may actually to spend a

95
00:03:56,070 --> 00:03:58,019
lot of time fixing problems that occur

96
00:03:58,019 --> 00:04:00,269
only after your product is built and

97
00:04:00,269 --> 00:04:02,519
deployed and out in the world and used

98
00:04:02,519 --> 00:04:04,680
by end-users now maybe those products

99
00:04:04,680 --> 00:04:06,570
are crashes or performance issues maybe

100
00:04:06,570 --> 00:04:08,700
there's security vulnerabilities but

101
00:04:08,700 --> 00:04:11,220
there's a class of software issues that

102
00:04:11,220 --> 00:04:13,459
arise because of the dynamism in

103
00:04:13,459 --> 00:04:15,870
applications and the way in which they

104
00:04:15,870 --> 00:04:18,390
behave especially for a web browser like

105
00:04:18,390 --> 00:04:20,010
Firefox when it's out in the world

106
00:04:20,010 --> 00:04:22,200
absorbing all sorts of unanticipated

107
00:04:22,200 --> 00:04:25,080
will comment content and user

108
00:04:25,080 --> 00:04:26,849
interactions and so the other problem we

109
00:04:26,849 --> 00:04:27,360
were interested

110
00:04:27,360 --> 00:04:30,240
in solving if we could was to try and

111
00:04:30,240 --> 00:04:32,699
avoid having our engineers have to spend

112
00:04:32,699 --> 00:04:34,919
all that time finding and fixing and

113
00:04:34,919 --> 00:04:36,750
debugging those problems and worse

114
00:04:36,750 --> 00:04:38,250
having our customers go through the

115
00:04:38,250 --> 00:04:39,689
consequences of having those problems

116
00:04:39,689 --> 00:04:41,610
when the product was deployed and out in

117
00:04:41,610 --> 00:04:43,740
the field so the rust programming

118
00:04:43,740 --> 00:04:46,379
language was sort of built around the

119
00:04:46,379 --> 00:04:48,689
initial idea was the slogan was hack

120
00:04:48,689 --> 00:04:50,909
without fear the idea really was to

121
00:04:50,909 --> 00:04:54,060
create a programming language where many

122
00:04:54,060 --> 00:04:55,439
of the runtime problems could actually

123
00:04:55,439 --> 00:04:57,270
be found and prevented by the compiler

124
00:04:57,270 --> 00:04:59,639
so a large class of issues that you

125
00:04:59,639 --> 00:05:00,870
would have in your programming a

126
00:05:00,870 --> 00:05:02,129
low-level language or systems

127
00:05:02,129 --> 00:05:04,039
programming language like C or C++

128
00:05:04,039 --> 00:05:06,659
actually get caught by the compiler and

129
00:05:06,659 --> 00:05:08,460
never get out into the world to cause a

130
00:05:08,460 --> 00:05:10,500
pain or anguish for your customers or

131
00:05:10,500 --> 00:05:13,680
for your engineers and the other one is

132
00:05:13,680 --> 00:05:15,539
its optimized to really do Russ's

133
00:05:15,539 --> 00:05:16,710
optimize to do a great job with

134
00:05:16,710 --> 00:05:18,810
parallelization and concurrency and in

135
00:05:18,810 --> 00:05:20,520
fact the initial mantra hack without

136
00:05:20,520 --> 00:05:22,590
fear makes a great t-shirt but it

137
00:05:22,590 --> 00:05:23,849
doesn't actually tell you too much about

138
00:05:23,849 --> 00:05:25,439
the language and that's evolved over

139
00:05:25,439 --> 00:05:27,990
time to be more along the lines of

140
00:05:27,990 --> 00:05:31,589
fearless concurrency so the first part

141
00:05:31,589 --> 00:05:34,289
of the story and we have a small team in

142
00:05:34,289 --> 00:05:35,669
the emerging technologies group working

143
00:05:35,669 --> 00:05:36,870
on rust we have a large community

144
00:05:36,870 --> 00:05:40,139
working on rust is delivering the

145
00:05:40,139 --> 00:05:41,819
capabilities that we're living up to

146
00:05:41,819 --> 00:05:43,050
that potential in the programming

147
00:05:43,050 --> 00:05:46,259
language the next piece of that story

148
00:05:46,259 --> 00:05:50,279
is a project called servo servo is

149
00:05:50,279 --> 00:05:53,339
serves two purposes one it is a proof

150
00:05:53,339 --> 00:05:54,779
point for the RUS programming language

151
00:05:54,779 --> 00:05:56,189
if you're gonna assert that you have a

152
00:05:56,189 --> 00:05:57,599
programming language that has new

153
00:05:57,599 --> 00:05:59,580
qualities the way russ does you really

154
00:05:59,580 --> 00:06:01,650
kind of have to back it up you have to

155
00:06:01,650 --> 00:06:03,029
write a large body of code to

156
00:06:03,029 --> 00:06:04,379
demonstrate that you can actually make

157
00:06:04,379 --> 00:06:07,069
good on that potential and so servo is

158
00:06:07,069 --> 00:06:11,120
an alternative web engine not unlike

159
00:06:11,120 --> 00:06:13,439
simple web engines that you find in

160
00:06:13,439 --> 00:06:14,909
browsers today it's not a fully featured

161
00:06:14,909 --> 00:06:16,620
web engine or solely wouldn't wasn't in

162
00:06:16,620 --> 00:06:21,589
those days the work started in 2012 and

163
00:06:21,589 --> 00:06:24,659
the idea was to be able to prove the

164
00:06:24,659 --> 00:06:26,430
qualities of Russ but actually give us a

165
00:06:26,430 --> 00:06:29,069
way a workbench upon which we could then

166
00:06:29,069 --> 00:06:31,080
do some of this work to paralyze the

167
00:06:31,080 --> 00:06:32,879
components of the web engine taking

168
00:06:32,879 --> 00:06:34,500
advantage of the of the properties of

169
00:06:34,500 --> 00:06:37,319
rust and building new ways of doing

170
00:06:37,319 --> 00:06:40,240
layout or styling in the web

171
00:06:40,240 --> 00:06:43,180
browser built inherently around the

172
00:06:43,180 --> 00:06:46,150
language enabling parallelization and

173
00:06:46,150 --> 00:06:47,530
then the hardware underneath really

174
00:06:47,530 --> 00:06:50,430
letting us take full advantage of it a

175
00:06:50,430 --> 00:06:53,020
couple of other interesting benefits of

176
00:06:53,020 --> 00:06:55,870
doing the work on servo is ìletís focus

177
00:06:55,870 --> 00:06:57,970
on embed ability it's really great if

178
00:06:57,970 --> 00:07:00,340
you build these components it's even

179
00:07:00,340 --> 00:07:02,440
better inside of an engine it's even

180
00:07:02,440 --> 00:07:04,120
better if you can use them in all sorts

181
00:07:04,120 --> 00:07:06,580
of other applications and services and

182
00:07:06,580 --> 00:07:09,099
so servo evolved over time and reach the

183
00:07:09,099 --> 00:07:14,889
point where whoops in early 2000 late

184
00:07:14,889 --> 00:07:17,229
2016 where we realized we could actually

185
00:07:17,229 --> 00:07:19,150
take some of the components out of servo

186
00:07:19,150 --> 00:07:22,960
and and bring them to to Firefox as part

187
00:07:22,960 --> 00:07:25,270
of Firefox quantum and so we continue to

188
00:07:25,270 --> 00:07:28,300
have interesting work inside of the

189
00:07:28,300 --> 00:07:30,310
emerging technologies group not only in

190
00:07:30,310 --> 00:07:32,050
evolving the RUS programming language

191
00:07:32,050 --> 00:07:33,940
with the community but in continuing to

192
00:07:33,940 --> 00:07:35,590
build and enhance the capabilities that

193
00:07:35,590 --> 00:07:37,120
are in servo as a workbench for

194
00:07:37,120 --> 00:07:38,889
alternative web injen components and

195
00:07:38,889 --> 00:07:41,889
then highlighting or extrapolating from

196
00:07:41,889 --> 00:07:43,150
those components to put them in

197
00:07:43,150 --> 00:07:45,639
applications like firefox build a better

198
00:07:45,639 --> 00:07:49,210
engine build a better platform and

199
00:07:49,210 --> 00:07:50,650
provide a better experience for

200
00:07:50,650 --> 00:07:52,719
end-users and running the code that

201
00:07:52,719 --> 00:07:53,800
we're all going to build and deploy

202
00:07:53,800 --> 00:07:55,780
using the traditional components of the

203
00:07:55,780 --> 00:08:01,270
web HTML javascript and CSS the third

204
00:08:01,270 --> 00:08:02,830
project that fits in this little sub

205
00:08:02,830 --> 00:08:04,930
narrative of my larger narrative is web

206
00:08:04,930 --> 00:08:07,990
assembly now all I willing to bet many

207
00:08:07,990 --> 00:08:09,789
of you might not have been too familiar

208
00:08:09,789 --> 00:08:11,949
with Russ tour with servo I'm hoping

209
00:08:11,949 --> 00:08:13,840
more of you are somewhat familiar with

210
00:08:13,840 --> 00:08:16,719
web assembly and I'll tell you we'll

211
00:08:16,719 --> 00:08:18,310
talk a little bit more about what it is

212
00:08:18,310 --> 00:08:21,370
and why I mean it actually does a better

213
00:08:21,370 --> 00:08:23,759
job of relating to JavaScript promise me

214
00:08:23,759 --> 00:08:29,710
then then servo arrested and around

215
00:08:29,710 --> 00:08:33,039
about 2009 we began to get concerned

216
00:08:33,039 --> 00:08:35,800
about the problems we were seeing with

217
00:08:35,800 --> 00:08:38,289
handling of JavaScript on the web as web

218
00:08:38,289 --> 00:08:40,149
content got more sophisticated as web

219
00:08:40,149 --> 00:08:43,060
applications became more more nuanced

220
00:08:43,060 --> 00:08:46,180
and richer developers were building

221
00:08:46,180 --> 00:08:48,120
larger and larger bodies of JavaScript

222
00:08:48,120 --> 00:08:50,890
and sending them over the wire as part

223
00:08:50,890 --> 00:08:52,750
of presenting a web application to the

224
00:08:52,750 --> 00:08:54,020
browser to be rendered on

225
00:08:54,020 --> 00:08:57,830
Green that's fine JavaScript grew as a

226
00:08:57,830 --> 00:08:59,660
language to give developers a lot of

227
00:08:59,660 --> 00:09:01,160
those capabilities but one of the

228
00:09:01,160 --> 00:09:03,170
consequences of doing that is all of

229
00:09:03,170 --> 00:09:04,610
that javascript that gets sent over the

230
00:09:04,610 --> 00:09:07,430
wire as the page loads has to be parsed

231
00:09:07,430 --> 00:09:09,290
and compiled by the browser before it

232
00:09:09,290 --> 00:09:11,870
can actually be executed and we began to

233
00:09:11,870 --> 00:09:14,630
theorize that if we didn't do something

234
00:09:14,630 --> 00:09:16,310
we might ultimately reach a problem

235
00:09:16,310 --> 00:09:18,110
where we were going to see the

236
00:09:18,110 --> 00:09:19,730
performance limitation in web

237
00:09:19,730 --> 00:09:22,490
applications and content on the web was

238
00:09:22,490 --> 00:09:24,740
really going to be bound up in the CPU

239
00:09:24,740 --> 00:09:26,480
of the device that was running the

240
00:09:26,480 --> 00:09:28,250
browser and we realized that was

241
00:09:28,250 --> 00:09:30,440
probably not a good idea so we started

242
00:09:30,440 --> 00:09:33,050
an experimentation effort to see if we

243
00:09:33,050 --> 00:09:35,450
could actually find ways to remove some

244
00:09:35,450 --> 00:09:37,520
of the impediments of parsing and

245
00:09:37,520 --> 00:09:39,650
compiling JavaScript in real time as it

246
00:09:39,650 --> 00:09:41,330
was loaded into the browser as part of

247
00:09:41,330 --> 00:09:43,520
displaying the page that the user wanted

248
00:09:43,520 --> 00:09:46,460
to see now the first step in that effort

249
00:09:46,460 --> 00:09:49,070
was a process or a project called azzam

250
00:09:49,070 --> 00:09:52,610
j/s and the idea with azzam jas was to

251
00:09:52,610 --> 00:09:54,610
take a strict subset of JavaScript

252
00:09:54,610 --> 00:09:58,580
statically typed and and think about it

253
00:09:58,580 --> 00:09:59,840
as an intermediate language

254
00:09:59,840 --> 00:10:02,180
representation that could be fed into a

255
00:10:02,180 --> 00:10:04,130
browser could be compatible with every

256
00:10:04,130 --> 00:10:06,020
JavaScript enabled browser on the planet

257
00:10:06,020 --> 00:10:08,840
but could be built in such a way that it

258
00:10:08,840 --> 00:10:11,810
would be efficient to execute to load in

259
00:10:11,810 --> 00:10:13,430
to execute and to run into the browser

260
00:10:13,430 --> 00:10:15,260
and avoid some of the challenges of

261
00:10:15,260 --> 00:10:17,630
runtime handling of dynamic typing and

262
00:10:17,630 --> 00:10:19,930
other pieces of the JavaScript language

263
00:10:19,930 --> 00:10:24,350
as I'm DJ s was you know initially just

264
00:10:24,350 --> 00:10:26,090
an experiment but it actually worked

265
00:10:26,090 --> 00:10:28,730
phenomenally well what we saw with Azzam

266
00:10:28,730 --> 00:10:31,370
j/s was the ability to actually

267
00:10:31,370 --> 00:10:33,440
streamline the delivery and the loading

268
00:10:33,440 --> 00:10:35,630
of content on the web and the ability to

269
00:10:35,630 --> 00:10:38,030
actually craft although it's kind of an

270
00:10:38,030 --> 00:10:39,800
odd looking programming language if you

271
00:10:39,800 --> 00:10:42,380
looked at it as a human to craft runtime

272
00:10:42,380 --> 00:10:44,360
components to do interestingly complex

273
00:10:44,360 --> 00:10:46,640
computational things and get them you

274
00:10:46,640 --> 00:10:47,960
know rendered and handled by the

275
00:10:47,960 --> 00:10:49,700
JavaScript engine in the browser and

276
00:10:49,700 --> 00:10:51,800
more efficiently than sort of fully

277
00:10:51,800 --> 00:10:56,720
featured JavaScript so as emmaus was

278
00:10:56,720 --> 00:10:58,220
successful it was typically not

279
00:10:58,220 --> 00:11:00,140
programmed in by humans as I mentioned

280
00:11:00,140 --> 00:11:01,730
it was an intermediate language and so

281
00:11:01,730 --> 00:11:03,580
it was mostly produced by tool chains

282
00:11:03,580 --> 00:11:06,110
and in fact compatible with with the

283
00:11:06,110 --> 00:11:07,459
LLVM tool chain

284
00:11:07,459 --> 00:11:08,809
so that it was easy for us to build

285
00:11:08,809 --> 00:11:12,410
tools and we did they could take other

286
00:11:12,410 --> 00:11:15,139
programming languages see for example

287
00:11:15,139 --> 00:11:17,929
and compile them down and render them in

288
00:11:17,929 --> 00:11:20,389
azzam j/s and then efficiently feed them

289
00:11:20,389 --> 00:11:23,269
into the browser that experiment worked

290
00:11:23,269 --> 00:11:26,269
well enough that we realized we could

291
00:11:26,269 --> 00:11:28,220
accomplish a number of things by

292
00:11:28,220 --> 00:11:30,139
evolving the technology forward and

293
00:11:30,139 --> 00:11:33,499
webassembly was born webassembly was

294
00:11:33,499 --> 00:11:36,649
designed to really be a complete virtual

295
00:11:36,649 --> 00:11:39,499
machine inside of your browser and so

296
00:11:39,499 --> 00:11:41,300
it's pretty much the case today that

297
00:11:41,300 --> 00:11:43,790
every browser every major browser most

298
00:11:43,790 --> 00:11:45,319
of the browser's running in people's

299
00:11:45,319 --> 00:11:47,689
desktops certainly these days supports

300
00:11:47,689 --> 00:11:51,589
web assembly it's a w3c standard and web

301
00:11:51,589 --> 00:11:53,389
assembly takes the architecture and the

302
00:11:53,389 --> 00:11:57,139
idea of as Emmaus and sort of pushes it

303
00:11:57,139 --> 00:11:59,119
to the limit so oops

304
00:11:59,119 --> 00:12:06,230
now we have a a binary runtime in the

305
00:12:06,230 --> 00:12:09,470
browser and we can take representations

306
00:12:09,470 --> 00:12:11,319
in almost any other programming language

307
00:12:11,319 --> 00:12:14,089
and compile them down into web assembly

308
00:12:14,089 --> 00:12:15,860
and create modules that are extremely

309
00:12:15,860 --> 00:12:19,069
efficient to load and to run as part of

310
00:12:19,069 --> 00:12:20,480
your web application and let's actually

311
00:12:20,480 --> 00:12:21,709
look at what that's going to look like

312
00:12:21,709 --> 00:12:23,959
should you be interested in trying to do

313
00:12:23,959 --> 00:12:26,329
something like this as you can see from

314
00:12:26,329 --> 00:12:29,480
the simple recipe card here you start

315
00:12:29,480 --> 00:12:33,439
with some native code some assets that

316
00:12:33,439 --> 00:12:34,369
you may have something that's

317
00:12:34,369 --> 00:12:35,990
computationally complicated or

318
00:12:35,990 --> 00:12:38,299
sophisticated complex that would be

319
00:12:38,299 --> 00:12:41,860
inefficient and not it not run properly

320
00:12:41,860 --> 00:12:43,790
particularly well there's a JavaScript

321
00:12:43,790 --> 00:12:46,309
application and downloaded you use the

322
00:12:46,309 --> 00:12:47,929
tool chain to compile it down to a web

323
00:12:47,929 --> 00:12:50,029
assembly module the web assembly module

324
00:12:50,029 --> 00:12:51,470
gets bundled up into your web

325
00:12:51,470 --> 00:12:53,119
application along with all of the other

326
00:12:53,119 --> 00:12:55,459
regular components of your application

327
00:12:55,459 --> 00:12:58,160
so JavaScript images assets other sorts

328
00:12:58,160 --> 00:13:01,129
of things packaged up as your web app

329
00:13:01,129 --> 00:13:03,799
and then when the browser loads it pulls

330
00:13:03,799 --> 00:13:05,839
all of those assets over but takes

331
00:13:05,839 --> 00:13:07,339
advantage of the fact that the web

332
00:13:07,339 --> 00:13:09,589
assembly module is already pre compiled

333
00:13:09,589 --> 00:13:11,990
and ready to much more efficiently load

334
00:13:11,990 --> 00:13:14,269
and execute in the browser the end

335
00:13:14,269 --> 00:13:18,079
result is that large complex features

336
00:13:18,079 --> 00:13:20,970
can be delivered in web assembly

337
00:13:20,970 --> 00:13:23,879
and and it is efficient enough that it's

338
00:13:23,879 --> 00:13:24,930
more can you think of it more like

339
00:13:24,930 --> 00:13:28,410
loading an image the the load on the

340
00:13:28,410 --> 00:13:30,000
browser of actually processing and

341
00:13:30,000 --> 00:13:31,740
loading the web assembly module is a

342
00:13:31,740 --> 00:13:33,389
much lighter weight thing and we see now

343
00:13:33,389 --> 00:13:35,339
with web assembly applications can be

344
00:13:35,339 --> 00:13:37,680
built to run more at network speed and

345
00:13:37,680 --> 00:13:39,839
so what the user gets when they when

346
00:13:39,839 --> 00:13:41,370
they they load the application is

347
00:13:41,370 --> 00:13:43,500
something that's much more responsive

348
00:13:43,500 --> 00:13:45,750
and much more initially loads and we're

349
00:13:45,750 --> 00:13:48,120
seeing all sorts of examples of people

350
00:13:48,120 --> 00:13:50,459
now taking web assembly and building

351
00:13:50,459 --> 00:13:52,410
very powerful web applications and

352
00:13:52,410 --> 00:13:54,060
delivering them today so Google Earth

353
00:13:54,060 --> 00:13:56,850
for example recently announced that they

354
00:13:56,850 --> 00:14:00,420
have transformed Google Earth moved away

355
00:14:00,420 --> 00:14:03,389
from their own version of native code

356
00:14:03,389 --> 00:14:04,860
that was compiled in as part of the

357
00:14:04,860 --> 00:14:07,350
environment and they're delivering

358
00:14:07,350 --> 00:14:09,660
Google Earth these days it's available

359
00:14:09,660 --> 00:14:11,250
with web assembly and we're seeing

360
00:14:11,250 --> 00:14:14,129
others Facebook others use as Emmaus and

361
00:14:14,129 --> 00:14:16,470
web assembly to handle image loading

362
00:14:16,470 --> 00:14:17,329
audio

363
00:14:17,329 --> 00:14:19,949
encryption other computationally

364
00:14:19,949 --> 00:14:22,920
expensive tasks and provide them on the

365
00:14:22,920 --> 00:14:25,319
web and one of the the other reasons for

366
00:14:25,319 --> 00:14:27,240
making this sort of interesting path

367
00:14:27,240 --> 00:14:28,889
available to you and seeing what you can

368
00:14:28,889 --> 00:14:31,470
can do with it is that we can take rust

369
00:14:31,470 --> 00:14:33,029
the programming language I mentioned

370
00:14:33,029 --> 00:14:35,790
earlier and compile it and make it part

371
00:14:35,790 --> 00:14:37,439
of this webassembly pathway and so you

372
00:14:37,439 --> 00:14:39,059
can actually get the benefits of rust

373
00:14:39,059 --> 00:14:40,860
the efficient memory management the

374
00:14:40,860 --> 00:14:43,980
ready parallelization in code that can

375
00:14:43,980 --> 00:14:45,660
be compiled and rendered and built as

376
00:14:45,660 --> 00:14:48,029
part of your web app so now web

377
00:14:48,029 --> 00:14:50,550
applications can be much more diverse in

378
00:14:50,550 --> 00:14:51,899
terms of the assets they use and

379
00:14:51,899 --> 00:14:54,660
performance for end-users is clearly a

380
00:14:54,660 --> 00:14:57,990
much happier thing and there are tools

381
00:14:57,990 --> 00:14:59,579
available to make it easier for you to

382
00:14:59,579 --> 00:15:01,620
do if you're interested in web assembly

383
00:15:01,620 --> 00:15:03,329
I mentioned it's supported in all of the

384
00:15:03,329 --> 00:15:06,029
major browsers no reason not to get

385
00:15:06,029 --> 00:15:07,889
familiar with the technology and take

386
00:15:07,889 --> 00:15:09,899
advantage of it and one of the things

387
00:15:09,899 --> 00:15:11,430
we're eager to do is to make web

388
00:15:11,430 --> 00:15:14,040
assembly part of a larger collection of

389
00:15:14,040 --> 00:15:15,930
the tools tool chains and frameworks

390
00:15:15,930 --> 00:15:18,870
that you have have access to and use on

391
00:15:18,870 --> 00:15:21,180
a regular basis the benefits of that is

392
00:15:21,180 --> 00:15:22,649
of course you don't actually have to do

393
00:15:22,649 --> 00:15:25,529
anything as those tool chains and

394
00:15:25,529 --> 00:15:27,329
frameworks incorporate support for web

395
00:15:27,329 --> 00:15:29,910
assembly all of the performance and and

396
00:15:29,910 --> 00:15:33,120
network throughput webassembly will

397
00:15:33,120 --> 00:15:34,740
accrue automatically in your

398
00:15:34,740 --> 00:15:37,440
web application and that virtual CPU

399
00:15:37,440 --> 00:15:39,209
that's inside of every browser that

400
00:15:39,209 --> 00:15:40,560
becomes a much more powerful tool for

401
00:15:40,560 --> 00:15:42,779
you to run not only traditional web apps

402
00:15:42,779 --> 00:15:44,970
but personal productivity apps or video

403
00:15:44,970 --> 00:15:46,410
editing or all sorts of other complex

404
00:15:46,410 --> 00:15:48,899
things where you may even have native

405
00:15:48,899 --> 00:15:50,820
language assets or your teams have

406
00:15:50,820 --> 00:15:52,890
native language assets that you'd like

407
00:15:52,890 --> 00:15:56,220
to really be able to reuse as part of

408
00:15:56,220 --> 00:15:59,040
building and delivering app so all of

409
00:15:59,040 --> 00:16:01,800
those are pieces that came in as part of

410
00:16:01,800 --> 00:16:03,390
Firefox today a couple of others I'm

411
00:16:03,390 --> 00:16:04,440
going to highlight here that we're

412
00:16:04,440 --> 00:16:06,360
working on sort of in the survey of

413
00:16:06,360 --> 00:16:08,010
what's happening in emerging

414
00:16:08,010 --> 00:16:09,649
technologies

415
00:16:09,649 --> 00:16:15,800
VR mixed reality and speech now I'll

416
00:16:15,800 --> 00:16:20,430
step back a little bit web VR I'm sure

417
00:16:20,430 --> 00:16:22,410
many of you are familiar with we've had

418
00:16:22,410 --> 00:16:24,360
demos in the lobby if you've never had a

419
00:16:24,360 --> 00:16:27,959
virtual reality headset on I encourage

420
00:16:27,959 --> 00:16:29,580
you to take advantage of the opportunity

421
00:16:29,580 --> 00:16:31,110
to do it

422
00:16:31,110 --> 00:16:35,580
in 2016 we began work at earnest on web

423
00:16:35,580 --> 00:16:38,070
VR as the rest of the industry was

424
00:16:38,070 --> 00:16:40,339
excited about virtual reality in general

425
00:16:40,339 --> 00:16:43,140
and the goal in those days with Web VR

426
00:16:43,140 --> 00:16:45,930
was to simply demonstrate that the web

427
00:16:45,930 --> 00:16:48,980
was a viable place for virtual reality

428
00:16:48,980 --> 00:16:52,020
Mozilla worked with Google we built a

429
00:16:52,020 --> 00:16:55,440
standard initial implementation that was

430
00:16:55,440 --> 00:16:57,630
ultimately standardized by the w3c of a

431
00:16:57,630 --> 00:17:00,089
web the our API and the idea being that

432
00:17:00,089 --> 00:17:03,029
we wanted to expose the interfaces that

433
00:17:03,029 --> 00:17:05,550
you needed in order to create a virtual

434
00:17:05,550 --> 00:17:09,240
experience through the web to all of the

435
00:17:09,240 --> 00:17:10,800
typical ways in which you build and

436
00:17:10,800 --> 00:17:13,170
deploy web content today so that if

437
00:17:13,170 --> 00:17:16,199
you're familiar with HTML CSS and Java

438
00:17:16,199 --> 00:17:18,179
all right JavaScript it would be easier

439
00:17:18,179 --> 00:17:21,000
for you to actually then expand the 2d

440
00:17:21,000 --> 00:17:22,949
kinds of web experiences you build today

441
00:17:22,949 --> 00:17:24,839
to be something that was a virtual

442
00:17:24,839 --> 00:17:28,550
reality based 3d kind of web experience

443
00:17:28,550 --> 00:17:32,160
that was - that was great it was an easy

444
00:17:32,160 --> 00:17:34,710
thing to do but we learned that there

445
00:17:34,710 --> 00:17:36,059
were a lot of opportunities to really

446
00:17:36,059 --> 00:17:39,690
put more powerful development tools in a

447
00:17:39,690 --> 00:17:41,520
creator's hands developers hands to make

448
00:17:41,520 --> 00:17:43,220
it easier for them to build and share

449
00:17:43,220 --> 00:17:46,950
compelling web VR experiences which gave

450
00:17:46,950 --> 00:17:48,390
rise to a frame

451
00:17:48,390 --> 00:17:54,090
a frame is an easy language or toolset

452
00:17:54,090 --> 00:17:56,700
that you can avail yourself of if you're

453
00:17:56,700 --> 00:17:58,290
a familiar web developer to actually

454
00:17:58,290 --> 00:18:00,420
build and share components and construct

455
00:18:00,420 --> 00:18:03,510
entire virtual reality experiences and

456
00:18:03,510 --> 00:18:06,480
easily deploy them on the web using all

457
00:18:06,480 --> 00:18:07,830
of the same techniques at your filling

458
00:18:07,830 --> 00:18:10,650
room familiar with today one of the

459
00:18:10,650 --> 00:18:12,120
things we've learned from the web vr

460
00:18:12,120 --> 00:18:13,860
standard and for making a frame

461
00:18:13,860 --> 00:18:16,350
available is there are a lot of people

462
00:18:16,350 --> 00:18:18,540
interested in doing this telemetry that

463
00:18:18,540 --> 00:18:20,670
we we have in Firefox

464
00:18:20,670 --> 00:18:23,430
tells us that about a million Firefox

465
00:18:23,430 --> 00:18:26,400
users in the course of navigating the

466
00:18:26,400 --> 00:18:29,640
web every day encounter some sort of VR

467
00:18:29,640 --> 00:18:32,700
content or experience that each day so

468
00:18:32,700 --> 00:18:36,080
that's actually perhaps a surprising

469
00:18:36,080 --> 00:18:38,970
expanse of web VR that's available

470
00:18:38,970 --> 00:18:42,270
people are using it for 3d 360 video and

471
00:18:42,270 --> 00:18:44,250
for other things but we saw a lot of

472
00:18:44,250 --> 00:18:48,600
growth in 2016 and 17 in web VR in the

473
00:18:48,600 --> 00:18:50,460
use of a frame and the tools that were

474
00:18:50,460 --> 00:18:51,750
provided as part of the a frame

475
00:18:51,750 --> 00:18:53,790
environment so if you're interested in

476
00:18:53,790 --> 00:18:56,550
trying to build a piece of virtual

477
00:18:56,550 --> 00:18:58,080
reality or component that can be shared

478
00:18:58,080 --> 00:19:00,180
in virtual reality and stop by and talk

479
00:19:00,180 --> 00:19:01,920
to us we can show you how to use a frame

480
00:19:01,920 --> 00:19:05,070
or a painter if you're an artist to

481
00:19:05,070 --> 00:19:06,510
actually build and create that

482
00:19:06,510 --> 00:19:10,080
technology and make it easy to use now

483
00:19:10,080 --> 00:19:12,090
as big as virtual reality was especially

484
00:19:12,090 --> 00:19:17,610
in 2016 in 2017 even more buzz and

485
00:19:17,610 --> 00:19:19,860
interest in the market around augmented

486
00:19:19,860 --> 00:19:23,490
reality and in fact the nomenclature

487
00:19:23,490 --> 00:19:26,070
evolved so fast that what we now talk

488
00:19:26,070 --> 00:19:28,530
about is mixed reality so mixed reality

489
00:19:28,530 --> 00:19:30,600
is the combination of virtual reality

490
00:19:30,600 --> 00:19:33,360
and augmented reality and it's ways to

491
00:19:33,360 --> 00:19:36,990
actually blend the 2d world and the 3d

492
00:19:36,990 --> 00:19:40,350
world in the actual physical real world

493
00:19:40,350 --> 00:19:41,880
and create a whole new class of

494
00:19:41,880 --> 00:19:43,710
experiences for end-users there as well

495
00:19:43,710 --> 00:19:47,010
so just as we worked to propose a

496
00:19:47,010 --> 00:19:49,680
standard interface for web VR we've

497
00:19:49,680 --> 00:19:51,810
proposed a standard interface for mixed

498
00:19:51,810 --> 00:19:56,280
reality and there is a web X our API

499
00:19:56,280 --> 00:19:58,440
that's available now that you can begin

500
00:19:58,440 --> 00:19:59,650
to experiment

501
00:19:59,650 --> 00:20:01,780
and easily build and deploy virtual

502
00:20:01,780 --> 00:20:03,970
reality experiences using the web as a

503
00:20:03,970 --> 00:20:07,720
platform and about 10 lines of code and

504
00:20:07,720 --> 00:20:09,850
we've provided not only the ability to

505
00:20:09,850 --> 00:20:11,860
do it in desktop browsers such as

506
00:20:11,860 --> 00:20:14,710
Firefox but we also have an open-source

507
00:20:14,710 --> 00:20:17,080
mixed reality viewer that'll run on an

508
00:20:17,080 --> 00:20:19,870
iOS enabled mobile device all off of the

509
00:20:19,870 --> 00:20:23,200
same back-end mixed reality content and

510
00:20:23,200 --> 00:20:25,210
therefore make it easy for all of you as

511
00:20:25,210 --> 00:20:27,490
web developers to create virtual reality

512
00:20:27,490 --> 00:20:29,920
augmented reality and other kinds of

513
00:20:29,920 --> 00:20:32,500
experiences on top of the same platforms

514
00:20:32,500 --> 00:20:34,450
and tool chains that you're using every

515
00:20:34,450 --> 00:20:38,020
day one of the things we learned from

516
00:20:38,020 --> 00:20:40,120
putting virtual reality and mixed

517
00:20:40,120 --> 00:20:42,309
reality capabilities in the hands of

518
00:20:42,309 --> 00:20:45,520
developers and end-users is that you

519
00:20:45,520 --> 00:20:48,070
begin to want even other kinds of new

520
00:20:48,070 --> 00:20:50,200
experiences on the web as part of

521
00:20:50,200 --> 00:20:52,840
creating those new environments it's not

522
00:20:52,840 --> 00:20:55,570
particularly convenient in the middle of

523
00:20:55,570 --> 00:20:58,660
a virtual reality session to actually

524
00:20:58,660 --> 00:21:01,000
try and use a keyboard to type to

525
00:21:01,000 --> 00:21:03,040
provide input or commands or options and

526
00:21:03,040 --> 00:21:05,470
so one of the the logical consequences

527
00:21:05,470 --> 00:21:07,120
of building more of these kinds of

528
00:21:07,120 --> 00:21:09,460
augmented reality experiences in mixed

529
00:21:09,460 --> 00:21:11,980
reality experiences as you began to want

530
00:21:11,980 --> 00:21:14,170
to be able to talk to your web browser

531
00:21:14,170 --> 00:21:17,140
talk to the web and so another area of

532
00:21:17,140 --> 00:21:18,760
activity for us in the emerging

533
00:21:18,760 --> 00:21:21,340
technologies group at Mozilla is around

534
00:21:21,340 --> 00:21:24,370
speech and speech recognition deep

535
00:21:24,370 --> 00:21:27,610
speech is one of those projects and it's

536
00:21:27,610 --> 00:21:30,460
an effort we began last year to build a

537
00:21:30,460 --> 00:21:33,010
completely open-source speech-to-text

538
00:21:33,010 --> 00:21:35,950
engine based on machine learning now

539
00:21:35,950 --> 00:21:38,320
speech recognition has been around for a

540
00:21:38,320 --> 00:21:40,809
long time it was well established when I

541
00:21:40,809 --> 00:21:43,960
was in college many years ago but most

542
00:21:43,960 --> 00:21:46,179
of the speech technologies that you we

543
00:21:46,179 --> 00:21:47,710
encounter in the world around us today

544
00:21:47,710 --> 00:21:51,179
are relatively closed proprietary

545
00:21:51,179 --> 00:21:53,590
ecosystems and they're not particularly

546
00:21:53,590 --> 00:21:55,240
readily available to us as web

547
00:21:55,240 --> 00:21:57,220
developers to build and deploy in any

548
00:21:57,220 --> 00:21:59,530
kind of web-based content so we embarked

549
00:21:59,530 --> 00:22:03,040
upon a deep speech project to really

550
00:22:03,040 --> 00:22:06,550
provide a completely accessible open but

551
00:22:06,550 --> 00:22:09,640
useful speech recognition engine and

552
00:22:09,640 --> 00:22:11,530
also give us a platform that we can use

553
00:22:11,530 --> 00:22:13,240
to make speech recognition of a

554
00:22:13,240 --> 00:22:15,040
for more languages and more cultures

555
00:22:15,040 --> 00:22:17,980
broadly than is available through some

556
00:22:17,980 --> 00:22:20,410
of the more typical commercial systems

557
00:22:20,410 --> 00:22:26,290
so deep speech launched officially two

558
00:22:26,290 --> 00:22:29,290
months ago we have Python JavaScript

559
00:22:29,290 --> 00:22:32,020
income I come in line versions of it

560
00:22:32,020 --> 00:22:33,130
that are accessible that can be

561
00:22:33,130 --> 00:22:34,810
incorporated in your application or back

562
00:22:34,810 --> 00:22:38,350
in service the word error rate is about

563
00:22:38,350 --> 00:22:41,230
6.5 percent that's approximately how

564
00:22:41,230 --> 00:22:44,250
well we do as humans so you've

565
00:22:44,250 --> 00:22:46,660
misunderstood 6.5 percent of my words

566
00:22:46,660 --> 00:22:50,040
but deep speech is actually capable of

567
00:22:50,040 --> 00:22:53,110
roughly human performance and to

568
00:22:53,110 --> 00:22:55,750
demonstrate how you can use it we did a

569
00:22:55,750 --> 00:22:58,240
test pilot experiment in Firefox called

570
00:22:58,240 --> 00:23:02,320
voice fill where we packaged up access

571
00:23:02,320 --> 00:23:04,630
to the deep speech engine and allowed

572
00:23:04,630 --> 00:23:06,700
you to actually conduct searches and

573
00:23:06,700 --> 00:23:08,620
other interactions through the voice

574
00:23:08,620 --> 00:23:12,160
bill it can add-on to Firefox just using

575
00:23:12,160 --> 00:23:15,190
your voice so I'm sure you have talked

576
00:23:15,190 --> 00:23:17,620
to your browser on and off for many

577
00:23:17,620 --> 00:23:19,810
years now you can actually talk to your

578
00:23:19,810 --> 00:23:22,630
browser and it will do something and

579
00:23:22,630 --> 00:23:24,340
we're eager to work with folks not only

580
00:23:24,340 --> 00:23:29,350
to expand the the engine and make it

581
00:23:29,350 --> 00:23:31,510
available in more environments but also

582
00:23:31,510 --> 00:23:33,910
to work on the corpus of text that goes

583
00:23:33,910 --> 00:23:34,750
along with it

584
00:23:34,750 --> 00:23:37,180
speech recognition as we've implemented

585
00:23:37,180 --> 00:23:39,250
in deep speech is a machine learning

586
00:23:39,250 --> 00:23:42,370
based application and it needs to be

587
00:23:42,370 --> 00:23:45,010
trained and the more data that you have

588
00:23:45,010 --> 00:23:46,990
the better the training is the more

589
00:23:46,990 --> 00:23:49,840
effective the recognition is and so in

590
00:23:49,840 --> 00:23:52,240
parallel with deep speech we launched a

591
00:23:52,240 --> 00:23:54,550
thing called project common voice and

592
00:23:54,550 --> 00:23:56,950
the idea of common voice was to use the

593
00:23:56,950 --> 00:24:00,010
web to collect the speech data that we

594
00:24:00,010 --> 00:24:02,890
needed to train and improve the deep

595
00:24:02,890 --> 00:24:07,840
speech engine so we went live with with

596
00:24:07,840 --> 00:24:09,730
common voice we asked people to

597
00:24:09,730 --> 00:24:12,670
voluntarily give us samples of their

598
00:24:12,670 --> 00:24:14,950
voice and so if you still could do it if

599
00:24:14,950 --> 00:24:16,600
you like you go to the common voice

600
00:24:16,600 --> 00:24:19,680
website offer to volunteer your voice

601
00:24:19,680 --> 00:24:23,380
will ask you to read some snippets of

602
00:24:23,380 --> 00:24:25,960
text and you do that using the

603
00:24:25,960 --> 00:24:26,350
microphone

604
00:24:26,350 --> 00:24:28,000
you're in your computer with the browser

605
00:24:28,000 --> 00:24:31,809
we will record those samples and then

606
00:24:31,809 --> 00:24:33,460
accumulate them in a large back-end

607
00:24:33,460 --> 00:24:35,289
database and then we have other people

608
00:24:35,289 --> 00:24:37,000
who volunteer to actually listen to

609
00:24:37,000 --> 00:24:38,919
those samples and verify that you

610
00:24:38,919 --> 00:24:40,890
actually said what we asked you to say

611
00:24:40,890 --> 00:24:43,150
and so over the course of the last

612
00:24:43,150 --> 00:24:47,400
several months 400,000 people have

613
00:24:47,400 --> 00:24:50,020
400,000 voice recordings have been

614
00:24:50,020 --> 00:24:51,760
contributed to the common voice database

615
00:24:51,760 --> 00:24:54,730
from 20,000 speakers that's over 500

616
00:24:54,730 --> 00:25:01,419
hours of text and the community has has

617
00:25:01,419 --> 00:25:03,280
been part of creating the The Voice

618
00:25:03,280 --> 00:25:04,720
corpus and database and we now have

619
00:25:04,720 --> 00:25:06,429
people working to provide language

620
00:25:06,429 --> 00:25:08,830
support not only for English but for

621
00:25:08,830 --> 00:25:11,409
French German Spanish Macedonian odoo

622
00:25:11,409 --> 00:25:14,020
Persian and Kurdish and more languages

623
00:25:14,020 --> 00:25:16,390
are are coming as we can enable more of

624
00:25:16,390 --> 00:25:18,309
the data collection on the backend and

625
00:25:18,309 --> 00:25:20,260
so a common voice and deep speech

626
00:25:20,260 --> 00:25:22,539
together means that you now have access

627
00:25:22,539 --> 00:25:24,700
to technologies to let you take a

628
00:25:24,700 --> 00:25:27,669
traditional web experience and build a

629
00:25:27,669 --> 00:25:30,190
speech input component to it or build

630
00:25:30,190 --> 00:25:31,900
new kinds of experiences and deliver

631
00:25:31,900 --> 00:25:34,120
them on the web where speech is a viable

632
00:25:34,120 --> 00:25:36,640
means of users actually interacting with

633
00:25:36,640 --> 00:25:38,409
your content for your applications or

634
00:25:38,409 --> 00:25:44,710
your service the last piece of the

635
00:25:44,710 --> 00:25:46,390
emerging technologies organization am I

636
00:25:46,390 --> 00:25:48,159
going to talk about is actually not a

637
00:25:48,159 --> 00:25:50,230
piece that's oriented towards any of the

638
00:25:50,230 --> 00:25:51,730
engineering efforts like the ones I've

639
00:25:51,730 --> 00:25:55,179
been describing but we actually have the

640
00:25:55,179 --> 00:25:57,190
the emerging technologies organization

641
00:25:57,190 --> 00:25:59,530
is the home for Mozilla's developer

642
00:25:59,530 --> 00:26:02,830
outreach effort and we did that for a

643
00:26:02,830 --> 00:26:07,740
couple of reasons one is our focus on

644
00:26:07,740 --> 00:26:10,299
developer outreach is really broadly

645
00:26:10,299 --> 00:26:11,980
across all of the web and the

646
00:26:11,980 --> 00:26:14,169
technologies that make up the web this

647
00:26:14,169 --> 00:26:16,030
is a reflection of Mozilla's mission

648
00:26:16,030 --> 00:26:18,220
where we're all about the Internet first

649
00:26:18,220 --> 00:26:20,650
and foremost and making the Internet

650
00:26:20,650 --> 00:26:22,480
open and free and accessible and

651
00:26:22,480 --> 00:26:25,000
empowering for all and so clearly we

652
00:26:25,000 --> 00:26:27,100
advocate for a wide range of

653
00:26:27,100 --> 00:26:28,929
technologies well beyond those that are

654
00:26:28,929 --> 00:26:31,720
incorporated in Mozilla's product web

655
00:26:31,720 --> 00:26:34,720
assembly is a good example of that and

656
00:26:34,720 --> 00:26:37,150
so the work that we did

657
00:26:37,150 --> 00:26:38,950
in in advocating for webassembly

658
00:26:38,950 --> 00:26:42,340
adoption led to it being pervasively

659
00:26:42,340 --> 00:26:45,550
present in all of the web browsers and

660
00:26:45,550 --> 00:26:47,530
one of the positive benefits to that was

661
00:26:47,530 --> 00:26:48,910
that it allows us to get to the point

662
00:26:48,910 --> 00:26:51,640
where application developers that had

663
00:26:51,640 --> 00:26:53,740
been using flash and had been reliant on

664
00:26:53,740 --> 00:26:55,870
plugins in the browser to get access to

665
00:26:55,870 --> 00:26:58,510
that native functionality no longer had

666
00:26:58,510 --> 00:27:01,240
to do so and through web assembly we

667
00:27:01,240 --> 00:27:02,950
were able to provide a mechanism where

668
00:27:02,950 --> 00:27:05,290
we could deprecated native plugins and

669
00:27:05,290 --> 00:27:07,720
deprecated flash and that was all not

670
00:27:07,720 --> 00:27:10,210
because we built it into Firefox but

671
00:27:10,210 --> 00:27:11,650
because we designed it and built it for

672
00:27:11,650 --> 00:27:13,420
the web and we advocated it from a

673
00:27:13,420 --> 00:27:15,520
developer perspective for all browser

674
00:27:15,520 --> 00:27:18,400
vendors to adopt additionally it's

675
00:27:18,400 --> 00:27:19,630
important for us from a developer

676
00:27:19,630 --> 00:27:21,130
perspective to be aligned with

677
00:27:21,130 --> 00:27:22,270
everything else that's going on in

678
00:27:22,270 --> 00:27:23,980
emerging technologies and so we're just

679
00:27:23,980 --> 00:27:26,140
as happy to talk to you about the api's

680
00:27:26,140 --> 00:27:28,540
or the tools or the standards or

681
00:27:28,540 --> 00:27:30,429
anything else that you may require as

682
00:27:30,429 --> 00:27:34,809
developers to really help you adopt or

683
00:27:34,809 --> 00:27:36,550
become more involved with any of the

684
00:27:36,550 --> 00:27:38,980
other technologies that i've just talked

685
00:27:38,980 --> 00:27:41,140
about that we're working on in emerging

686
00:27:41,140 --> 00:27:43,090
technology so we're just as happy to

687
00:27:43,090 --> 00:27:45,730
talk about where your needs may be if

688
00:27:45,730 --> 00:27:47,080
you're interested in building a speech

689
00:27:47,080 --> 00:27:49,990
based interface to the web or a mixed

690
00:27:49,990 --> 00:27:53,050
reality based one and all that work can

691
00:27:53,050 --> 00:27:55,000
be taken up through the developer

692
00:27:55,000 --> 00:27:56,380
outreach team as part of the emerging

693
00:27:56,380 --> 00:28:02,260
technologies group and so that brings us

694
00:28:02,260 --> 00:28:04,450
to the end of our tour I didn't actually

695
00:28:04,450 --> 00:28:06,490
talk about everything that we're doing

696
00:28:06,490 --> 00:28:08,410
in emerging technologies we have a

697
00:28:08,410 --> 00:28:11,320
number of other efforts that are

698
00:28:11,320 --> 00:28:13,660
underway that are probably less relevant

699
00:28:13,660 --> 00:28:15,690
in this audience but I will highlight

700
00:28:15,690 --> 00:28:18,640
that we're doing work on a royalty-free

701
00:28:18,640 --> 00:28:20,920
high-quality audio and video codecs and

702
00:28:20,920 --> 00:28:22,330
so if you're interested in delivering

703
00:28:22,330 --> 00:28:24,970
high-quality media on the web and in

704
00:28:24,970 --> 00:28:27,520
doing so in a royalty-free way we should

705
00:28:27,520 --> 00:28:29,800
talk we're part of the Alliance for open

706
00:28:29,800 --> 00:28:32,200
media in support of those technologies

707
00:28:32,200 --> 00:28:34,150
that are becoming available and we also

708
00:28:34,150 --> 00:28:37,150
have some early phase work on the web of

709
00:28:37,150 --> 00:28:39,880
things and so some of the technologies

710
00:28:39,880 --> 00:28:41,890
that Flocka showed us earlier in terms

711
00:28:41,890 --> 00:28:44,670
of bringing javascript and the web into

712
00:28:44,670 --> 00:28:47,410
microcontrollers and hardware is work

713
00:28:47,410 --> 00:28:49,450
that we're also engaged in and we'd

714
00:28:49,450 --> 00:28:50,429
certainly be happy

715
00:28:50,429 --> 00:28:53,629
to talk to you about any of that work

716
00:28:53,629 --> 00:28:56,490
lastly in this space we're spending a

717
00:28:56,490 --> 00:28:57,809
bunch of time on I mentioned machine

718
00:28:57,809 --> 00:28:59,490
learning as part of speech but we know

719
00:28:59,490 --> 00:29:01,440
that machine learning is a technology or

720
00:29:01,440 --> 00:29:03,269
that's going to be pervasively

721
00:29:03,269 --> 00:29:05,490
interesting or replicable in a wide

722
00:29:05,490 --> 00:29:07,649
range of ways across the the broader web

723
00:29:07,649 --> 00:29:09,869
and we're happy to explore the

724
00:29:09,869 --> 00:29:11,669
intersection of machine learning and

725
00:29:11,669 --> 00:29:13,440
assistance and what that might be

726
00:29:13,440 --> 00:29:16,940
interested of interest to you all so

727
00:29:16,940 --> 00:29:20,220
thank you very much that's me

728
00:29:20,220 --> 00:29:23,700
catch us in the in the booth outside or

729
00:29:23,700 --> 00:29:25,860
talk to us tomorrow and we'd be happy to

730
00:29:25,860 --> 00:29:27,659
find out what you're interested in and

731
00:29:27,659 --> 00:29:28,889
how we can make some of this technology

732
00:29:28,889 --> 00:29:31,740
more accessible or valuable to you going

733
00:29:31,740 --> 00:29:32,760
forward

