1
00:00:01,370 --> 00:00:23,020
Hello JSConf! How are you?! Yes.

2
00:00:23,020 --> 00:00:25,289
Thank you.

3
00:00:25,289 --> 00:00:30,140
I'm Dominikus Baur and as you might of noticed
I suffer from an all too common problem in

4
00:00:30,140 --> 00:00:35,070
the tech world, which is yet another bearded
dude.

5
00:00:35,070 --> 00:00:40,539
And, here's my totally scientific analysis
of the JSConf speake speaker profile pictures

6
00:00:40,539 --> 00:00:41,539
on the web site.

7
00:00:41,539 --> 00:00:47,489
As you can see, I'm not alone, there are so
many of us, we should probably form a support

8
00:00:47,489 --> 00:00:51,640
group or something or just shave those damn
things off, I don't know.

9
00:00:51,640 --> 00:00:57,390
So, any ways what does this bearded guy do?
I'm based in Munich, Germany and I work as

10
00:00:57,390 --> 00:01:04,180
a data visualization freelancer, here are
some of the projects that I did in the recent

11
00:01:04,180 --> 00:01:12,020
time I had a bat better life index for OECD,
I did sell if I city, which is an analysis

12
00:01:12,020 --> 00:01:20,690
of the Selfie phenomenon, and also visits
here which is the visualization for personal

13
00:01:20,690 --> 00:01:21,690
travels.

14
00:01:21,690 --> 00:01:24,960
And you can find them all on my web site,
so check them out.

15
00:01:24,960 --> 00:01:26,980
They're of course web‑based.

16
00:01:26,980 --> 00:01:33,270
All right, so let's start, I guess most of
you know data visualization, otherwise you

17
00:01:33,270 --> 00:01:34,270
wouldn't be here.

18
00:01:34,270 --> 00:01:39,750
The basic idea is to turn complex data sets
into visually representations and if they're

19
00:01:39,750 --> 00:01:45,520
done right then you can easily spot patterns
and understand the underlying data.

20
00:01:45,520 --> 00:01:50,870
And, this year, for example, is a pretty famous
and old one, and it depicts Napoleons march

21
00:01:50,870 --> 00:01:52,780
to Moscow.

22
00:01:52,780 --> 00:01:57,800
In this graphic you can see the course that
the army took, you can see it's shrinking

23
00:01:57,800 --> 00:02:00,420
size, so people are dying there.

24
00:02:00,420 --> 00:02:04,570
And you can also see the temperature down
at the bottom which might give you a clue

25
00:02:04,570 --> 00:02:07,600
why the army was shrinking.

26
00:02:07,600 --> 00:02:12,459
So you have lots and lots of information in
an easily digestible format you can argue

27
00:02:12,459 --> 00:02:14,890
that it's somewhat beautiful.

28
00:02:14,890 --> 00:02:22,560
So, that makes data V I S for p perfect tool
for portable devices think of all the data

29
00:02:22,560 --> 00:02:28,849
you're producing or have to work with while
on the go, and visualizations spares you from

30
00:02:28,849 --> 00:02:33,909
working with the raw numbers and gives you
a quick overview to find out what's important.

31
00:02:33,909 --> 00:02:40,739
And with displays becoming even smaller now,
maybe even watch sized, it can quickly show

32
00:02:40,739 --> 00:02:46,959
you what's relevant or interesting to you
without forcing you to look at a spread sheet.

33
00:02:46,959 --> 00:02:53,120
Okay, so how do we go about building these
things? Of course, there's the native approach,

34
00:02:53,120 --> 00:02:58,639
but, as you all know that's a real pain to
do it like that, so you have to support IOS

35
00:02:58,639 --> 00:03:04,049
of coursing you also have to support Andriod
and they're completely different, once you

36
00:03:04,049 --> 00:03:10,209
actually visit the zoo and try to do something
for windows phone or Blackberry or whatever

37
00:03:10,209 --> 00:03:17,849
they are all called, you're in a complete
mess and porting code isn't easily possible.

38
00:03:17,849 --> 00:03:22,819
So what better way to solve this problem than
going to the web.

39
00:03:22,819 --> 00:03:29,840
So, the web has come so far in the past years
that it's viable to develop full blown applications

40
00:03:29,840 --> 00:03:39,200
even for mobile devices, especially news organizations
are very keen to create visualizations and

41
00:03:39,200 --> 00:03:43,630
attractive visualizations that work across
devices, of course, so here's a couple of

42
00:03:43,630 --> 00:03:48,790
examples from the New York times who are doing
an amazing job out there, but there are other

43
00:03:48,790 --> 00:03:56,200
teams like the Guardian Washington Post and
so on that are also creating really cool stuff.

44
00:03:56,200 --> 00:04:03,529
Okay, so, what I'll try today is I'll try
to give you a quick crash course of developing

45
00:04:03,529 --> 00:04:08,230
data visualizations for mobile devices in
20 minutes or less.

46
00:04:08,230 --> 00:04:13,760
First, I'll give you a quick overview, I'll
talk a little bit about responsive web design

47
00:04:13,760 --> 00:04:19,480
and how that already gets us halfway to our
target, I would say.

48
00:04:19,480 --> 00:04:27,330
But, it's also interesting to pursue mobile
first approach to focus on the strengths that

49
00:04:27,330 --> 00:04:33,860
you actually get from having a portable device,
that's also touch controlled, which lets you

50
00:04:33,860 --> 00:04:36,190
do much more interesting stuff.

51
00:04:36,190 --> 00:04:41,310
And finally, of course, the big issue, I would
say in this whole topic is interray action,

52
00:04:41,310 --> 00:04:49,639
so how do you best support an interaction
on those tiny portable screens.

53
00:04:49,639 --> 00:04:58,720
If you need more inspirations for this topic,
here's two web sites that can give you that,

54
00:04:58,720 --> 00:05:08,100
so mobileV.is and the other one is mobileinfov
Uzi.com, and both just collections of mobile

55
00:05:08,100 --> 00:05:13,120
visualizations, you can look at those, they're
ever growing and there's really great stuff

56
00:05:13,120 --> 00:05:14,940
there.

57
00:05:14,940 --> 00:05:16,760
Okay.

58
00:05:16,760 --> 00:05:26,060
Of what are the main differences between desktop
and mobile? So first, the obvious one, interaction

59
00:05:26,060 --> 00:05:34,040
happens via touch instead of a mouse, so,
we no longer have this one single minuscule

60
00:05:34,040 --> 00:05:41,590
cursor, but we have potentially multiple fingers
that are overlapping everything on your screen

61
00:05:41,590 --> 00:05:48,240
and just creating a mess, and we have very
specific results of that, for example, we're

62
00:05:48,240 --> 00:05:54,419
losing hovering, we're getting something else
like hovering, I'll talk about that in a minute.

63
00:05:54,419 --> 00:06:00,210
There's really a huge difference between that,
and then, second of course, we have different

64
00:06:00,210 --> 00:06:05,910
screen sizes and formats, so with a laptop,
or a desktop, we usually have relatively low

65
00:06:05,910 --> 00:06:15,130
Res, large screens, 16 by 10 or 16 by 9 aspect
ratio in landscape and on mobile devises you

66
00:06:15,130 --> 00:06:20,130
have your high resolution, very, very small
portrait oriented screens.

67
00:06:20,130 --> 00:06:26,310
And, this of course changes how you go about
information layout, density, things like that.

68
00:06:26,310 --> 00:06:34,539
All right, if you want to develop data Vis
for the web, I remember mend one library that

69
00:06:34,539 --> 00:06:38,949
you might have heard about today, already\h‑‑
I'll recommend one library you might have

70
00:06:38,949 --> 00:06:45,411
heard about today already, we had this fantastic
talk before where we saw there's a huge, another

71
00:06:45,411 --> 00:06:52,610
zoo out there with all of those various types
of charting libraries that let you do crazy

72
00:06:52,610 --> 00:06:53,610
things.

73
00:06:53,610 --> 00:07:00,060
All in different ways, but really, D3 is kind
of the lowest common denominator, so people

74
00:07:00,060 --> 00:07:02,670
that are doing data V I S know of it.

75
00:07:02,670 --> 00:07:08,969
So who here has heard of it? Who has used
it? Cool.

76
00:07:08,969 --> 00:07:12,840
So, it really is pretty common.

77
00:07:12,840 --> 00:07:18,120
It's mostly being developed by one guy, Mike
post dock working at the New York times, I'm

78
00:07:18,120 --> 00:07:25,030
not sure if that gives them an unfair advantage,
yeah, who knows, Mike is doing an amazing

79
00:07:25,030 --> 00:07:33,770
job, he's producing lots and lots of example
for 3 D if you go to BL.ocks.org, you can

80
00:07:33,770 --> 00:07:41,689
find hundreds and hundreds of things with
really really amazing stuff in there, D3 has

81
00:07:41,689 --> 00:07:48,009
a very, very active community, and still being
developed and hasn't been abandoned two years

82
00:07:48,009 --> 00:07:51,060
ago or something like that.

83
00:07:51,060 --> 00:07:56,090
What's really great about those examples here,
usually they work directly on mobile, so if

84
00:07:56,090 --> 00:08:02,389
you open up this page on your smartphone,
for example and try one of these, it usually

85
00:08:02,389 --> 00:08:09,800
just works because the interaction issue isn't
one for D3, so if you want to go from mouse

86
00:08:09,800 --> 00:08:15,560
to touch, usually you only have to change
your vent handlers a bit, so usually on a

87
00:08:15,560 --> 00:08:21,219
desktop you would write something like that,
on mouse down, do something.

88
00:08:21,219 --> 00:08:27,610
And for touch, those events, those vent names
change to touch star, touch move, touch end

89
00:08:27,610 --> 00:08:33,639
instead of the mouse equivalents, of course,
those events can appear multiple times because

90
00:08:33,639 --> 00:08:39,709
you have multiple fingers, then you can keep
track of those fingers and do pinching and

91
00:08:39,709 --> 00:08:40,709
stuff.

92
00:08:40,709 --> 00:08:45,670
The nice thing is that most of the three automatically
does that, so you have certain behaviors that

93
00:08:45,670 --> 00:08:50,610
automatically support pinching for example
so interaction really spent an issue, what's

94
00:08:50,610 --> 00:08:52,140
anker shoe is screen size.

95
00:08:52,140 --> 00:08:57,890
3 D leaves all the scaling to the developer,
pretty much.

96
00:08:57,890 --> 00:09:04,260
And that means, of course, that your visualization
then becomes really tiny on a small screen,

97
00:09:04,260 --> 00:09:09,730
so those are screen shots from Bl.ocks.org,
as they would appear on your smartphone, imagine

98
00:09:09,730 --> 00:09:16,200
that thing a little bit smaller, and especially
with like, the tree map on the right here,

99
00:09:16,200 --> 00:09:20,579
you can really read anything or do anything
with it.

100
00:09:20,579 --> 00:09:22,240
So scaling is an issue.

101
00:09:22,240 --> 00:09:26,970
And, of course, what codew we do when we want
to have our web sites scale, right? We go

102
00:09:26,970 --> 00:09:34,029
to responsive web design, which is fantastic,
so basically, you want to have a page that

103
00:09:34,029 --> 00:09:41,149
adjusts to the size of your view port, and,
we can apply those same principles that we

104
00:09:41,149 --> 00:09:48,139
get in responsive web design to visualizations,
of course, so you grab your favorite responsive

105
00:09:48,139 --> 00:09:54,389
web design framework like foundation or bootstrap
or whatever, then your chart just becomes

106
00:09:54,389 --> 00:10:01,269
one of those boxes in your grid, and you give
it a fixed width and then it's just based

107
00:10:01,269 --> 00:10:08,769
on the device's screen size so that's really
useful I'll show you an example from my own

108
00:10:08,769 --> 00:10:11,560
work where we use that.

109
00:10:11,560 --> 00:10:18,449
So the OCED willing been project was something
that I did with Moritz Stefaner, you might

110
00:10:18,449 --> 00:10:27,079
know OECD, it's a big organization that collects
data on well‑being and how people feel worldwide.

111
00:10:27,079 --> 00:10:33,510
And this project here regional well being
focuses on certain regions on the globe so

112
00:10:33,510 --> 00:10:38,769
you can check out how well people are doing
in certain aspects so we have things like

113
00:10:38,769 --> 00:10:43,810
safety, the job market, education and so on.

114
00:10:43,810 --> 00:10:48,899
And they asked us to create a visualization
that lets people easily explore this data,

115
00:10:48,899 --> 00:10:53,551
our idea is to focus on a certain region and
then let people explore from there, and what

116
00:10:53,551 --> 00:10:58,410
better region for that than the one where
people actually level at the moment, so this

117
00:10:58,410 --> 00:11:06,300
page starts with your home region, then you
get this nice visualization that shows the

118
00:11:06,300 --> 00:11:09,670
various aspects of well being.

119
00:11:09,670 --> 00:11:15,990
You get a list of similar regions to your
own which sometimes is very surprising, and

120
00:11:15,990 --> 00:11:23,800
then down at the bottom of the page you get
an overview of those of quality factors and

121
00:11:23,800 --> 00:11:32,660
details so you can compare, for example, safety
to other regions in your country and so on.

122
00:11:32,660 --> 00:11:38,880
Okay, so you can just Bruce that, you can
just jump from region to region, adds we didn't

123
00:11:38,880 --> 00:11:43,910
have the budget to create three different
web sites for three different form factors

124
00:11:43,910 --> 00:11:51,889
we made the whole thing responsive, and if
you're trying it on your tablet or your smartphone

125
00:11:51,889 --> 00:11:54,760
even you might see that it should just work.

126
00:11:54,760 --> 00:11:59,949
And hear's kind of the underlying magic so
all of those pink boxes are our grid elements

127
00:11:59,949 --> 00:12:09,420
in bootstrap, and, yeah, by just putting those
visualizations into those boxes you actually

128
00:12:09,420 --> 00:12:12,050
get the whole responsiveness for free.

129
00:12:12,050 --> 00:12:18,110
And, depending on your screen size, of course,
the layout changes some elements become bigger

130
00:12:18,110 --> 00:12:24,889
on smartphones for example, and as you can
see, like those three detail views in a row

131
00:12:24,889 --> 00:12:29,880
become two and then one on a smartphone, so
it actually works pretty well.

132
00:12:29,880 --> 00:12:35,350
But, of course, that's not everything, there
are those little details that you learn on

133
00:12:35,350 --> 00:12:38,630
the go, on the job.

134
00:12:38,630 --> 00:12:40,480
And I'll talk about those a bit.

135
00:12:40,480 --> 00:12:47,320
So one thing is drawing a visualization is
usually quite heavy on the CPU and the battery

136
00:12:47,320 --> 00:12:48,710
and so on.

137
00:12:48,710 --> 00:12:52,880
And you don't want to dill your browser tab
just because you decide that you want to redraw

138
00:12:52,880 --> 00:12:58,889
your visualization every time the user adjusts
the window size by one fix el.

139
00:12:58,889 --> 00:13:02,959
So that's when something like debounce for
example or throttle comes in really handy,

140
00:13:02,959 --> 00:13:07,699
I usually use the underscore version, but
there are, of course other implementations

141
00:13:07,699 --> 00:13:08,699
out there.

142
00:13:08,699 --> 00:13:14,590
The basic ideas behind those debouncers is
that you give it a function, in our case,

143
00:13:14,590 --> 00:13:23,360
render, and this function, is at most, called
every resize, refresh, rate, if you set that

144
00:13:23,360 --> 00:13:33,810
to 300 milliseconds then it's only drawn every
third of a second and not like hundreds of

145
00:13:33,810 --> 00:13:36,310
times per second.

146
00:13:36,310 --> 00:13:41,360
Which is quite useful and you might also see
that if you actually try it on your laptop

147
00:13:41,360 --> 00:13:46,370
and adjust the size of the window you see
that the visualization takes a bit to be redraw,

148
00:13:46,370 --> 00:13:51,100
but at least that keeps us from crashing the
browser window, which is nice.

149
00:13:51,100 --> 00:13:57,000
Of all right, another thing are meta view
ports, so that's something you want to set

150
00:13:57,000 --> 00:13:58,149
on mobile devices.

151
00:13:58,149 --> 00:14:05,029
It's just in the header of your HTML, and
there's this meta tag called view port.

152
00:14:05,029 --> 00:14:12,029
And you can define certain things how mobile
Safari or mobile Chrome displays your web

153
00:14:12,029 --> 00:14:13,029
site.

154
00:14:13,029 --> 00:14:19,480
You can say for example width equals the vice
width the web site is initially as big as

155
00:14:19,480 --> 00:14:23,089
your screen, from the width.

156
00:14:23,089 --> 00:14:27,640
And you also want to set the initial scale
to one, so it's zoomed to one hundred percent.

157
00:14:27,640 --> 00:14:33,220
Sometimes it might be useful to say something
like user scalable equals no, which means

158
00:14:33,220 --> 00:14:40,089
that people can't enlarge your page by pinching.

159
00:14:40,089 --> 00:14:43,050
Depends on the application if you want to
did that.

160
00:14:43,050 --> 00:14:49,850
One last thing when you come to responsive
visualizations are SVGU view port, most are

161
00:14:49,850 --> 00:14:58,709
build in SVG, I guess all the 3 D examples
use SVG, usually.

162
00:14:58,709 --> 00:15:04,190
And what's nice about SVG is that as the names
scalable vector graphics implies, it's actually

163
00:15:04,190 --> 00:15:09,720
a vector graphic so it can easily be scaled
and you can control that using CSS.

164
00:15:09,720 --> 00:15:16,410
So with the view box, attribute here you can
define your own virtual coordinate system

165
00:15:16,410 --> 00:15:23,660
within the SVG, so here the coordinate system
goes from zero zero to 500 by 250.

166
00:15:23,660 --> 00:15:30,199
And, everything that you draw within the SVG
is then scaled according to this coordinate

167
00:15:30,199 --> 00:15:32,420
system.

168
00:15:32,420 --> 00:15:37,000
And what you also want to do is you want to
define that the aspect ratio of your virtual

169
00:15:37,000 --> 00:15:43,019
coordinate system stays the same, and that's
what the second attribute does, preserve aspect

170
00:15:43,019 --> 00:15:45,300
ratio.

171
00:15:45,300 --> 00:15:50,910
There's actually two parameters, the second
one meet means your SVG is always scaled so

172
00:15:50,910 --> 00:15:54,390
that it's everything is visible and nothing
is cut off.

173
00:15:54,390 --> 00:16:04,750
And, the first one, the XMidYMin thing, means
your SVG view port should be centered on the

174
00:16:04,750 --> 00:16:13,089
horizontal access and should be aligned with
the minimum on the Y access.

175
00:16:13,089 --> 00:16:14,089
So it looks like this.

176
00:16:14,089 --> 00:16:19,480
So if the SVG actually fits into your window,
everything is fine.

177
00:16:19,480 --> 00:16:29,480
And here it's a bit different, here is where
you actually get horizontally centered box.

178
00:16:29,480 --> 00:16:31,199
Which is your SVG.

179
00:16:31,199 --> 00:16:36,019
And, it's also kind of ary site in web development,
so you get that for free if you set those

180
00:16:36,019 --> 00:16:37,290
attributes.

181
00:16:37,290 --> 00:16:45,160
Okay, but let's dive a little bit more into
details, when it comes to mobile data visualization.

182
00:16:45,160 --> 00:16:51,290
What happens when you actually approach this
whole problem from a mobile first design perspective.

183
00:16:51,290 --> 00:16:53,180
And see what comes up.

184
00:16:53,180 --> 00:17:00,569
So, first of all, usually, the person that
uses your visualization on the smartphone

185
00:17:00,569 --> 00:17:03,860
is like this woman here.

186
00:17:03,860 --> 00:17:09,420
So, they're in the middle of something, they're
not in the mid for any of your fancy sha Nan

187
00:17:09,420 --> 00:17:13,970
gans, they want the data as wick quickly as
possible.

188
00:17:13,970 --> 00:17:20,130
So, I would say always when it comes to mobile
interaction design, just going to let that

189
00:17:20,130 --> 00:17:22,440
loop.

190
00:17:22,440 --> 00:17:26,689
When it comes to mobile interaction design,
think about what's the task of the person

191
00:17:26,689 --> 00:17:31,760
that's using your App or visualization or
whatever, and try to support that as well

192
00:17:31,760 --> 00:17:34,050
as possible.

193
00:17:34,050 --> 00:17:39,750
And what's rally helpful with designing something
like that is, sorry, I have to take your picture

194
00:17:39,750 --> 00:17:42,370
away now, guys.

195
00:17:42,370 --> 00:17:47,040
What's rally helpful is that you can get certain
aspects of the concepts using the new HTML

196
00:17:47,040 --> 00:17:55,070
5 APIs, when is Geo location, who's used that
already if yes, awesome, this one's really

197
00:17:55,070 --> 00:18:03,610
great, it basically gives you the user's current
position, global position in this little amount

198
00:18:03,610 --> 00:18:08,420
of code, so you just call get current position,
you give it a call back and hopefully you

199
00:18:08,420 --> 00:18:12,230
get some latitude and longitude.

200
00:18:12,230 --> 00:18:17,720
So we use that as well in the regional well
being project, so if you open it up on your

201
00:18:17,720 --> 00:18:23,730
smartphone our your browser then you get something
like this pop up here that asks you if the

202
00:18:23,730 --> 00:18:29,460
web site is allowed to use the current location.

203
00:18:29,460 --> 00:18:34,520
So you can also see that it's actually much
more privacy conscious than server base solutions

204
00:18:34,520 --> 00:18:38,891
that just do it based on your I P address
without asking you.

205
00:18:38,891 --> 00:18:47,020
Once you set that up, you get the visualization
starts on your home region or the region that

206
00:18:47,020 --> 00:18:51,810
you're current live at, so it should show
Berlin, right now, if you tried.

207
00:18:51,810 --> 00:18:55,090
And that's really nice, you adopt have to
pick that from a list or anything, jousted

208
00:18:55,090 --> 00:18:57,610
get it for free.

209
00:18:57,610 --> 00:19:02,290
Another aspect when developing for mobile
is of course per to mans and battery drain.

210
00:19:02,290 --> 00:19:10,049
So, you want to have fast beautiful graphics,
of course, but you also want to be careful

211
00:19:10,049 --> 00:19:14,390
that you're not actually draining the battery
in the process, so there are a couple of graphics

212
00:19:14,390 --> 00:19:19,520
technologies that you might want to use, so
SVG, I already mentioned that it's vector

213
00:19:19,520 --> 00:19:28,140
based, it's DOM integration, tie certain events
to elements, but it's somewhat slower than

214
00:19:28,140 --> 00:19:30,890
other alternatives I would say.

215
00:19:30,890 --> 00:19:37,000
Faster is canvas, which just gives you a plain
canvas and you can draw on that.

216
00:19:37,000 --> 00:19:41,110
But, kind of a down side is that it's very
low level, so you actually is trough draw

217
00:19:41,110 --> 00:19:46,330
on your canvas, you don't just say, okay,
here's a rectangle and it's going to stay

218
00:19:46,330 --> 00:19:48,490
there, you have to draw it every time.

219
00:19:48,490 --> 00:19:55,110
You also don't get a DOM, you have to figure
out where the user now tapped.

220
00:19:55,110 --> 00:20:00,680
It's kind of the same with webGL, which is
probably faster than Canvas and able to do

221
00:20:00,680 --> 00:20:07,971
D, which is awesome, but, again (3 D) it's
low level, it has no DOM, so basically, pick

222
00:20:07,971 --> 00:20:10,760
your poison.

223
00:20:10,760 --> 00:20:18,130
By now web GM is supported inment iOS 8, so
it's viable to use that.

224
00:20:18,130 --> 00:20:25,039
All right, when we talk about interaction
on mobile devices the main problem is probably

225
00:20:25,039 --> 00:20:30,931
the fat finger problem, which means that you're
using those things here to interact with interact

226
00:20:30,931 --> 00:20:37,090
with anything on your smartphone, most smartphone
company recommend minimum size for on screen

227
00:20:37,090 --> 00:20:44,100
elements, apple says 44 by 44 fix els, but,
yeah, it (Pixels) it varies, but it's always

228
00:20:44,100 --> 00:20:46,130
something in that range.

229
00:20:46,130 --> 00:20:51,529
You have to make sure all your interactive
elements are big enough so people can interact

230
00:20:51,529 --> 00:20:53,250
with them.

231
00:20:53,250 --> 00:20:56,330
Sometimes you can avoid the fat finger problem
all together.

232
00:20:56,330 --> 00:21:03,720
So in the Selfie city project that I did with
Manovich, Stefner and a couple of other amazing

233
00:21:03,720 --> 00:21:04,929
people.

234
00:21:04,929 --> 00:21:13,640
We looked t a the differences in Selfie taking
practices across cities worldwide.

235
00:21:13,640 --> 00:21:19,210
And part of the project was self exploratory
that you can see here, where you can explore

236
00:21:19,210 --> 00:21:24,890
the data set, you have filters at the top
where you can tilter the Selfie collection

237
00:21:24,890 --> 00:21:32,110
based on head orientations, based on glass,
smiles, city and age and stuff like that.

238
00:21:32,110 --> 00:21:34,730
Then you get the results at bottom.

239
00:21:34,730 --> 00:21:39,130
And what was good for us was that everything
was big enough that you could just use it

240
00:21:39,130 --> 00:21:44,030
on your finger so it kind of\h‑‑ with
your finger so it worked out of the box.

241
00:21:44,030 --> 00:21:49,740
But, of course, the problem is what do you
do when you want to show really high resolution

242
00:21:49,740 --> 00:21:52,120
visualizations that are still interactive.

243
00:21:52,120 --> 00:21:55,980
And again there, are a couple of tricks that
you can use.

244
00:21:55,980 --> 00:22:00,860
Probably the most common trick is invisible
touch areas.

245
00:22:00,860 --> 00:22:06,040
So the idea here is that we have to scatter
part and we want to have people being able

246
00:22:06,040 --> 00:22:12,630
to tap on the circles, and of course they're
much too small, so we create those not very

247
00:22:12,630 --> 00:22:19,500
invisible here, circles, the orange ones,
so mostly you just set the opacity to zero,

248
00:22:19,500 --> 00:22:24,919
give them a high Z index so they're on top
of everything, and made osituation absolute

249
00:22:24,919 --> 00:22:31,570
and stuff like that, you add your touch event
listener and then, of course, those s have

250
00:22:31,570 --> 00:22:34,850
to know which part of the data they represent.

251
00:22:34,850 --> 00:22:41,200
And based on that, you can then have those
things be interactive without actually displaying

252
00:22:41,200 --> 00:22:42,200
them.

253
00:22:42,200 --> 00:22:47,779
But, of course, as you can see, it doesn't
always work, even here in this very simple

254
00:22:47,779 --> 00:22:55,220
example we have this overlap between two circles,
what happens more often is that you just create

255
00:22:55,220 --> 00:23:02,390
a full rectangle, another invisible reck tank
opacity zero, put it on top of your graph

256
00:23:02,390 --> 00:23:07,169
and then every time you have a touch vent
you try to figure out, okay, which part of

257
00:23:07,169 --> 00:23:10,429
the data is the finger closest too or something.

258
00:23:10,429 --> 00:23:16,090
And then I show the tool tip or filter or
whatever.

259
00:23:16,090 --> 00:23:22,690
And talking about tool tips is one of the
main problems when it comes to touch‑based

260
00:23:22,690 --> 00:23:29,390
visualizations, because as I said, we no longer
have hovering really with fingers, but tool

261
00:23:29,390 --> 00:23:33,840
tips are really ubiquitous in visualizations,
they're pretty much in everything because

262
00:23:33,840 --> 00:23:40,570
it's such a nice solution to display details
on demand by showing a little tool tip.

263
00:23:40,570 --> 00:23:47,750
And, in mobile Safari for example we kind
of have hovering, but it's weird and you probably

264
00:23:47,750 --> 00:23:55,210
already seen that, so if you tap on an element
that has some mouse over event defined once,

265
00:23:55,210 --> 00:24:02,059
it triggers the mouse over event and then
when you tap again it's a mouse down.

266
00:24:02,059 --> 00:24:07,130
And for most people that is just totally confusing
because they tapped on something and then

267
00:24:07,130 --> 00:24:13,149
the tool tip pops up and they're not really
sure are they able to tap again or not.

268
00:24:13,149 --> 00:24:15,230
So I can't really recommend that.

269
00:24:15,230 --> 00:24:23,850
A better solution is to have always on tool
tip, always visible but tied to some type

270
00:24:23,850 --> 00:24:30,890
of interaction, in this example from the New
York Times for example, we have two solutions,

271
00:24:30,890 --> 00:24:36,260
first we have a little tool tip there that's
tied to the slider and you can just move that

272
00:24:36,260 --> 00:24:38,820
around.

273
00:24:38,820 --> 00:24:44,780
And you also have here this banner like thing
at the bottom that's always visible and shows

274
00:24:44,780 --> 00:24:46,510
you information.

275
00:24:46,510 --> 00:24:52,410
So that's\h‑‑ I would say that's probably
a good solution to have something like that.

276
00:24:52,410 --> 00:24:57,460
Then of course you don't only have down sides
you can do ahassing things with multi‑touch

277
00:24:57,460 --> 00:25:01,419
indigestual interactions, so one idea\h‑‑
gestureal interactions, one idea is to keep

278
00:25:01,419 --> 00:25:07,470
it on one side and decide what to do with
it.

279
00:25:07,470 --> 00:25:09,650
Rotation scaling.

280
00:25:09,650 --> 00:25:15,529
Frameworks can help you, two examples from
the three, and those handle multi‑touch

281
00:25:15,529 --> 00:25:19,679
automatically so if you open them on your
tablet for example, you can pinch to zoom

282
00:25:19,679 --> 00:25:25,520
this world map and you can move multiple circles
around using multiple fingers, if you want

283
00:25:25,520 --> 00:25:31,350
to be more fancy about that, you probably
want the use some gesture library like codeJ

284
00:25:31,350 --> 00:25:37,980
or hammer J several, those detect full gestures
so you get stuff like swiping, pinching, rotating

285
00:25:37,980 --> 00:25:41,820
and long press and so on.

286
00:25:41,820 --> 00:25:45,409
So you can go totally craze crazy with that.

287
00:25:45,409 --> 00:25:56,230
And if you're building something with touch
first in mind, then you can kind of look at

288
00:25:56,230 --> 00:26:01,530
your visualization as something that's deformidable,
some physical object that you can play around

289
00:26:01,530 --> 00:26:08,520
with, that's what I try to do in this research
project here.

290
00:26:08,520 --> 00:26:17,190
\h‑‑ which isn't playing.

291
00:26:17,190 --> 00:26:27,990
Here we go, that's touch wave.

292
00:26:27,990 --> 00:26:36,150
In touch wave we had a screen graph you could
just manipulate it using your fingers, as

293
00:26:36,150 --> 00:26:43,380
you can see you can just stretch it, enlarge
it, double tap to change the layout, so we

294
00:26:43,380 --> 00:26:51,410
went as far with the metaphor as we thought
useful.

295
00:26:51,410 --> 00:26:56,920
And if you really want to do that, so, that
project is already two years old, so I had

296
00:26:56,920 --> 00:27:04,909
to implement it natively.

297
00:27:04,909 --> 00:27:15,960
But, by now it should probably even work on
the web.

298
00:27:15,960 --> 00:27:19,740
Okay, here we go.

299
00:27:19,740 --> 00:27:25,730
All right, something 245 you can do right
now is you can use, for example, the device

300
00:27:25,730 --> 00:27:30,630
orientation events, which is really cool,
so those actually give you the orientation

301
00:27:30,630 --> 00:27:36,070
of the device in space we've already heard
about\h‑‑ talked about that yesterday,

302
00:27:36,070 --> 00:27:37,070
which is really neat.

303
00:27:37,070 --> 00:27:42,750
So you can use that for example to build one
of those little demos here, you can check

304
00:27:42,750 --> 00:27:48,960
it out on your smartphone, you this little
globe, when you orient your device in a certain

305
00:27:48,960 --> 00:27:54,380
way, then it spins around, which is a neat
effect, you can probably do all kinds of crazy

306
00:27:54,380 --> 00:27:59,990
things when it comes to visualization, 3 D
maybe even though that's somewhat of a four

307
00:27:59,990 --> 00:28:02,740
letter word in the community.

308
00:28:02,740 --> 00:28:08,279
Yeah, you can build that right in your browser.

309
00:28:08,279 --> 00:28:14,470
That's it for me, here are links to some example,
on my web site as well.

310
00:28:14,470 --> 00:28:18,649
Talk to me on Twitter, send me an e‑mail,
or talk to me later in person.

311
00:28:18,649 --> 00:28:19,649
Thank you.

