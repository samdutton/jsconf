1
00:00:18,760 --> 00:00:22,550

is about building more powerful user

2
00:00:22,550 --> 00:00:26,180
interfaces in the browser it started

3
00:00:26,180 --> 00:00:28,220
just a few months ago when I was

4
00:00:28,220 --> 00:00:30,079
reflecting on about a year's worth of

5
00:00:30,079 --> 00:00:32,629
work that I had just finished up and I

6
00:00:32,629 --> 00:00:34,010
realized that we had adopted this great

7
00:00:34,010 --> 00:00:35,629
new architecture with all the things you

8
00:00:35,629 --> 00:00:37,519
hear about here at jay's cough no

9
00:00:37,519 --> 00:00:42,019
require an AMD backbone html5 css3 new

10
00:00:42,019 --> 00:00:45,230
browser api's and then I looked at what

11
00:00:45,230 --> 00:00:46,730
we'd built at the end of the year and I

12
00:00:46,730 --> 00:00:48,920
said you know I think I could have built

13
00:00:48,920 --> 00:00:51,350
this 15 years ago when i started writing

14
00:00:51,350 --> 00:00:53,360
JavaScript the code would have been

15
00:00:53,360 --> 00:00:55,100
uglier the you I wouldn't have been a

16
00:00:55,100 --> 00:00:57,020
shiny we would have had to refresh the

17
00:00:57,020 --> 00:00:59,539
whole page instead of use Ajax but you

18
00:00:59,539 --> 00:01:01,610
know all the logic all the actual power

19
00:01:01,610 --> 00:01:03,949
this gives the user we could have built

20
00:01:03,949 --> 00:01:07,610
15 years ago it was kind of exemplified

21
00:01:07,610 --> 00:01:10,610
by to do MVC right like we could easily

22
00:01:10,610 --> 00:01:13,850
write to do CGI 15 years ago I'd be no

23
00:01:13,850 --> 00:01:15,590
sweat you know we haven't given their

24
00:01:15,590 --> 00:01:19,429
users anything new so I SAT i sat down i

25
00:01:19,429 --> 00:01:20,979
said you know i want to set out and

26
00:01:20,979 --> 00:01:24,259
learn about more powerful models that I

27
00:01:24,259 --> 00:01:25,880
could put at the heart of my user

28
00:01:25,880 --> 00:01:28,640
interfaces in order to provide actually

29
00:01:28,640 --> 00:01:30,049
more power actually more leverage

30
00:01:30,049 --> 00:01:33,350
instead of just more shininess and so

31
00:01:33,350 --> 00:01:35,720
let me show you something just the very

32
00:01:35,720 --> 00:01:38,000
first thing I built but I think at an

33
00:01:38,000 --> 00:01:40,070
example of something that is almost so

34
00:01:40,070 --> 00:01:41,840
obvious that we missed the fact that

35
00:01:41,840 --> 00:01:43,400
most people don't do this in web

36
00:01:43,400 --> 00:01:46,430
applications today so this is a little

37
00:01:46,430 --> 00:01:49,549
visualization of the u.s. 2013 federal

38
00:01:49,549 --> 00:01:51,439
budget so the kind of thing that you

39
00:01:51,439 --> 00:01:52,939
might show your readers if you were a

40
00:01:52,939 --> 00:01:55,670
newspaper with an interactive division

41
00:01:55,670 --> 00:01:58,240
and we can do very simple things like

42
00:01:58,240 --> 00:02:00,079
you know if we're really worried about

43
00:02:00,079 --> 00:02:01,850
the deficit we could say you know what

44
00:02:01,850 --> 00:02:03,350
would happen if I raise taxes by a

45
00:02:03,350 --> 00:02:05,180
couple percent and you'll see the

46
00:02:05,180 --> 00:02:07,820
deficit going down in proportion not not

47
00:02:07,820 --> 00:02:10,459
very exciting and I can I can you know

48
00:02:10,459 --> 00:02:12,739
maybe I really hate old people so I'll

49
00:02:12,739 --> 00:02:14,900
just cut spending on social security and

50
00:02:14,900 --> 00:02:17,660
that helps the deficit to and and so

51
00:02:17,660 --> 00:02:18,980
there's a lot of fanciness here right i

52
00:02:18,980 --> 00:02:21,260
mean i'm using like backbone and i'm

53
00:02:21,260 --> 00:02:23,600
using fancy browser api's it works with

54
00:02:23,600 --> 00:02:26,239
touch events on an ipad that's great but

55
00:02:26,239 --> 00:02:27,680
if you think about it what it's actually

56
00:02:27,680 --> 00:02:29,720
doing what i've shown so far is really

57
00:02:29,720 --> 00:02:31,280
the same as a form right

58
00:02:31,280 --> 00:02:33,350
in a bunch of input fields for what I

59
00:02:33,350 --> 00:02:35,450
want the tax rates to be and how much I

60
00:02:35,450 --> 00:02:36,590
want to spend on different government

61
00:02:36,590 --> 00:02:38,750
programs and it's going to go and add

62
00:02:38,750 --> 00:02:40,160
some numbers up and subtract some

63
00:02:40,160 --> 00:02:41,810
numbers and tell me what the deficit is

64
00:02:41,810 --> 00:02:43,790
as kind of typical of web applications

65
00:02:43,790 --> 00:02:45,730
today right there's a bunch of inputs

66
00:02:45,730 --> 00:02:48,050
you you wait for something change in the

67
00:02:48,050 --> 00:02:49,370
inputs and then you give the user some

68
00:02:49,370 --> 00:02:51,770
output and that means that you have to

69
00:02:51,770 --> 00:02:54,020
decide in advance which things you think

70
00:02:54,020 --> 00:02:56,090
are input what the user gets to change

71
00:02:56,090 --> 00:02:57,319
in which things you think are output

72
00:02:57,319 --> 00:02:59,600
that the user just has to wait for its

73
00:02:59,600 --> 00:03:02,200
you know robot overlord to calculate and

74
00:03:02,200 --> 00:03:04,340
so I said you know what if we could

75
00:03:04,340 --> 00:03:06,230
actually take this and change this and

76
00:03:06,230 --> 00:03:07,730
not have a distinction between input and

77
00:03:07,730 --> 00:03:10,489
output so now instead of just changing

78
00:03:10,489 --> 00:03:12,650
things and and having it affect the

79
00:03:12,650 --> 00:03:14,180
deficit what I'd like to do is actually

80
00:03:14,180 --> 00:03:17,030
lock the deficit in place and now what

81
00:03:17,030 --> 00:03:19,340
I'd like to ask is the question as I

82
00:03:19,340 --> 00:03:21,590
change Social Security how much how much

83
00:03:21,590 --> 00:03:25,069
in taxes can I cut as I do that well

84
00:03:25,069 --> 00:03:27,470
it's kind of interesting you get a feel

85
00:03:27,470 --> 00:03:29,269
for the relationship between the

86
00:03:29,269 --> 00:03:31,040
variables that you don't get by just

87
00:03:31,040 --> 00:03:33,620
trying to work for words and so in a

88
00:03:33,620 --> 00:03:34,850
sense although this is a very simple

89
00:03:34,850 --> 00:03:37,790
program it exemplifies a kind of

90
00:03:37,790 --> 00:03:39,860
solution to this problem of our two

91
00:03:39,860 --> 00:03:42,769
simple interfaces which is that instead

92
00:03:42,769 --> 00:03:44,209
of having a distinction between input

93
00:03:44,209 --> 00:03:46,400
and output we make all of our variables

94
00:03:46,400 --> 00:03:48,739
both input and output we describe the

95
00:03:48,739 --> 00:03:50,750
relationships between them and we let

96
00:03:50,750 --> 00:03:54,500
our users monkey with all of them so

97
00:03:54,500 --> 00:03:55,910
this talk I'm going to describe how you

98
00:03:55,910 --> 00:03:57,410
would go about building something like

99
00:03:57,410 --> 00:03:59,060
this or honestly something way cooler

100
00:03:59,060 --> 00:04:01,060
than this but with the same principle

101
00:04:01,060 --> 00:04:03,140
we'll talk about what constraint

102
00:04:03,140 --> 00:04:05,180
programming is I'm hopeful provide a

103
00:04:05,180 --> 00:04:06,829
metaphor that helps that make sense

104
00:04:06,829 --> 00:04:09,500
we'll talk about using cassowary which

105
00:04:09,500 --> 00:04:11,209
is a great JavaScript library that you

106
00:04:11,209 --> 00:04:13,070
could be using today to do constraint

107
00:04:13,070 --> 00:04:15,799
programming in JavaScript and and then

108
00:04:15,799 --> 00:04:16,880
I'll make some suggestions for other

109
00:04:16,880 --> 00:04:19,010
kinds of constraint solvers that you

110
00:04:19,010 --> 00:04:21,019
can't use in JavaScript today but that

111
00:04:21,019 --> 00:04:22,910
would be really useful for powering you

112
00:04:22,910 --> 00:04:25,220
I applications and if you're really good

113
00:04:25,220 --> 00:04:27,020
there's there's a bonus material at the

114
00:04:27,020 --> 00:04:30,350
end so constraint programming is about

115
00:04:30,350 --> 00:04:31,970
writing our programs in terms of

116
00:04:31,970 --> 00:04:34,669
relations instead of procedures normally

117
00:04:34,669 --> 00:04:36,410
write our programs is a function that

118
00:04:36,410 --> 00:04:39,560
takes input and returns output let me

119
00:04:39,560 --> 00:04:41,870
let me explain what this means in first

120
00:04:41,870 --> 00:04:43,729
grade you learned about addition is a

121
00:04:43,729 --> 00:04:44,870
procedure

122
00:04:44,870 --> 00:04:47,240
it's a very specific set of rules so

123
00:04:47,240 --> 00:04:49,580
that given two numbers you you know you

124
00:04:49,580 --> 00:04:51,830
start on the right and you carry the one

125
00:04:51,830 --> 00:04:55,220
and you get to an answer and this kind

126
00:04:55,220 --> 00:04:56,990
of addition is a procedure helps you add

127
00:04:56,990 --> 00:04:59,810
two numbers but then we think happens

128
00:04:59,810 --> 00:05:01,700
when you get to algebra and all of a

129
00:05:01,700 --> 00:05:03,140
sudden addition is in a procedure

130
00:05:03,140 --> 00:05:05,120
anymore it's a relationship between

131
00:05:05,120 --> 00:05:07,040
three numbers so if we have the

132
00:05:07,040 --> 00:05:09,920
relationship a plus B equals C this

133
00:05:09,920 --> 00:05:11,900
doesn't just mean that given a and B we

134
00:05:11,900 --> 00:05:13,670
can calculate see it means some other

135
00:05:13,670 --> 00:05:16,640
cool things too like given a and C we

136
00:05:16,640 --> 00:05:20,270
can find B or given only a value for one

137
00:05:20,270 --> 00:05:21,830
of the variables we can describe a

138
00:05:21,830 --> 00:05:24,230
relationship between the other two we

139
00:05:24,230 --> 00:05:26,090
can plot that on a chart we can

140
00:05:26,090 --> 00:05:28,010
enumerate all the values that meet that

141
00:05:28,010 --> 00:05:31,040
relationship if we have values for all

142
00:05:31,040 --> 00:05:32,720
three of the variables it becomes a

143
00:05:32,720 --> 00:05:34,640
truth test so we can ask given this

144
00:05:34,640 --> 00:05:37,070
value of a B and C is the relation a

145
00:05:37,070 --> 00:05:41,840
plus B equals C true so think of this as

146
00:05:41,840 --> 00:05:43,760
a metaphor for how we write programs we

147
00:05:43,760 --> 00:05:45,320
currently write programs the way a first

148
00:05:45,320 --> 00:05:47,300
grader does addition you tell this

149
00:05:47,300 --> 00:05:49,130
computer very specifically how to go

150
00:05:49,130 --> 00:05:51,920
from input to output but it's possible

151
00:05:51,920 --> 00:05:53,630
and actually not that hard to describe

152
00:05:53,630 --> 00:05:55,580
many programs as relationships between

153
00:05:55,580 --> 00:05:58,480
variables that work forwards backwards

154
00:05:58,480 --> 00:06:02,870
and every direction so cassowary is a

155
00:06:02,870 --> 00:06:05,180
fantastic library for doing constraint

156
00:06:05,180 --> 00:06:07,430
programming in JavaScript the API was

157
00:06:07,430 --> 00:06:09,200
designed specifically for user interface

158
00:06:09,200 --> 00:06:12,170
applications it is really fast it's fast

159
00:06:12,170 --> 00:06:13,970
it problems much harder than you would

160
00:06:13,970 --> 00:06:16,580
possibly need on a webpage in JavaScript

161
00:06:16,580 --> 00:06:18,770
and there's a really great version of

162
00:06:18,770 --> 00:06:21,380
this available Alex Russell's castle ajs

163
00:06:21,380 --> 00:06:24,110
you can install via NPM you can include

164
00:06:24,110 --> 00:06:28,370
in the browser and it's it's fantastic

165
00:06:28,370 --> 00:06:30,590
the one limitation with Casa why is it

166
00:06:30,590 --> 00:06:33,170
so fast and so powerful precisely

167
00:06:33,170 --> 00:06:35,210
because it has a very limited scope it

168
00:06:35,210 --> 00:06:38,030
only works on linear equations so our

169
00:06:38,030 --> 00:06:39,530
variables have to be numbers the

170
00:06:39,530 --> 00:06:41,600
relationship has to be just adding and

171
00:06:41,600 --> 00:06:44,240
multiplying if you know the name

172
00:06:44,240 --> 00:06:45,950
cassowary you've probably heard of it

173
00:06:45,950 --> 00:06:48,770
from iOS autolayout a/c version of the

174
00:06:48,770 --> 00:06:51,500
Castaway algorithm now powers laying out

175
00:06:51,500 --> 00:06:54,140
applications in iOS so you can say keep

176
00:06:54,140 --> 00:06:56,240
the left border of this 20 pixels from

177
00:06:56,240 --> 00:06:57,920
the left side of the screen and keep

178
00:06:57,920 --> 00:06:58,729
this part when

179
00:06:58,729 --> 00:07:00,229
pixels from the thing next to it and

180
00:07:00,229 --> 00:07:01,759
it'll go and solve this whole layout

181
00:07:01,759 --> 00:07:03,979
problem and tell you what where

182
00:07:03,979 --> 00:07:06,319
everything should go there's actually so

183
00:07:06,319 --> 00:07:07,849
many examples of using cassowary for

184
00:07:07,849 --> 00:07:09,020
layout I'm not going to talk about that

185
00:07:09,020 --> 00:07:10,699
at all let's look at something more

186
00:07:10,699 --> 00:07:13,520
interesting we can do with it so the API

187
00:07:13,520 --> 00:07:15,259
is really simple we can create variables

188
00:07:15,259 --> 00:07:18,199
and specify their initial value we can

189
00:07:18,199 --> 00:07:20,210
create expressions adding subtracting

190
00:07:20,210 --> 00:07:24,740
multiplying two existing variables we

191
00:07:24,740 --> 00:07:26,870
can create equation saying in this case

192
00:07:26,870 --> 00:07:29,449
that total spending always has to equal

193
00:07:29,449 --> 00:07:31,490
the sum of defense and non-defense

194
00:07:31,490 --> 00:07:33,710
spending which is like a pretty

195
00:07:33,710 --> 00:07:36,499
reasonable thing to ask and all of our

196
00:07:36,499 --> 00:07:38,689
constraints can have a strength so we

197
00:07:38,689 --> 00:07:40,370
can tell cassowary when you solve this

198
00:07:40,370 --> 00:07:42,169
system of equations this one absolutely

199
00:07:42,169 --> 00:07:44,809
must be solved or I just kind of like

200
00:07:44,809 --> 00:07:46,699
that this one be solved or you know I

201
00:07:46,699 --> 00:07:49,039
don't really care but but see if you can

202
00:07:49,039 --> 00:07:50,899
make it work and this is great because

203
00:07:50,899 --> 00:07:52,669
if you have problems that are over

204
00:07:52,669 --> 00:07:54,499
constrained where there's no complete

205
00:07:54,499 --> 00:07:56,629
solution cassirer will find you the best

206
00:07:56,629 --> 00:08:00,379
solution that you can find so let's set

207
00:08:00,379 --> 00:08:01,909
up the very beginning of our of our

208
00:08:01,909 --> 00:08:05,240
budget relationships will create a new

209
00:08:05,240 --> 00:08:07,789
cassowary solver which is just a context

210
00:08:07,789 --> 00:08:10,849
for holding all our relationships will

211
00:08:10,849 --> 00:08:13,069
create three variables spending revenue

212
00:08:13,069 --> 00:08:16,009
deficit and we'll create this equation

213
00:08:16,009 --> 00:08:17,419
that says that you know the deficit

214
00:08:17,419 --> 00:08:19,490
always has to be equal to however much

215
00:08:19,490 --> 00:08:20,990
we spent that we didn't take in in

216
00:08:20,990 --> 00:08:23,180
revenue and now that rule is absolutely

217
00:08:23,180 --> 00:08:25,490
required it makes no sense to solve the

218
00:08:25,490 --> 00:08:27,080
system without that rule holding and

219
00:08:27,080 --> 00:08:28,879
we'll add that constraint into the

220
00:08:28,879 --> 00:08:31,370
system so now this solver will

221
00:08:31,370 --> 00:08:33,169
automatically for us make sure that this

222
00:08:33,169 --> 00:08:34,940
relationship between the three variables

223
00:08:34,940 --> 00:08:36,860
always holds and we can edit any one of

224
00:08:36,860 --> 00:08:38,389
them and it will update the others to

225
00:08:38,389 --> 00:08:41,990
match so so when we want to add

226
00:08:41,990 --> 00:08:44,240
interaction into this is it just a

227
00:08:44,240 --> 00:08:45,889
couple more methods we can tell the

228
00:08:45,889 --> 00:08:48,350
solver let's say when the user mouse

229
00:08:48,350 --> 00:08:50,269
downs to select that they're about to

230
00:08:50,269 --> 00:08:52,370
move something we can tell it that we're

231
00:08:52,370 --> 00:08:54,350
about to make an edit to a certain

232
00:08:54,350 --> 00:08:57,019
variable what this does is internally

233
00:08:57,019 --> 00:08:58,730
castaway has a representation of all

234
00:08:58,730 --> 00:09:00,500
your constraints as a linear algebra

235
00:09:00,500 --> 00:09:03,050
problem was a bunch of matrices and when

236
00:09:03,050 --> 00:09:04,579
we tell it that we're about to edit this

237
00:09:04,579 --> 00:09:06,680
variable it'll go and transform

238
00:09:06,680 --> 00:09:08,029
everything that it knows about the

239
00:09:08,029 --> 00:09:10,399
problem and solve essentially for that

240
00:09:10,399 --> 00:09:12,570
variable so that when we suggest new

241
00:09:12,570 --> 00:09:14,070
values for this variable it's really

242
00:09:14,070 --> 00:09:16,830
easy really fast to solve for all the

243
00:09:16,830 --> 00:09:19,560
other ones this is what makes it so fast

244
00:09:19,560 --> 00:09:22,200
for interactive applications now when

245
00:09:22,200 --> 00:09:23,700
the user actually makes some change

246
00:09:23,700 --> 00:09:24,960
actually says I want to change this

247
00:09:24,960 --> 00:09:27,210
variable will call suggests value and

248
00:09:27,210 --> 00:09:29,370
give cast away the variable we want to

249
00:09:29,370 --> 00:09:31,200
edit and the new value that we want to

250
00:09:31,200 --> 00:09:33,180
suggest the reason this is called

251
00:09:33,180 --> 00:09:35,670
suggest and not set like you might

252
00:09:35,670 --> 00:09:38,340
expect from an MVC framework is that

253
00:09:38,340 --> 00:09:40,410
this value might not lead to an actual

254
00:09:40,410 --> 00:09:43,170
solution right this value might not be a

255
00:09:43,170 --> 00:09:45,210
possible value and so we're suggesting

256
00:09:45,210 --> 00:09:47,610
it and we're asking cassowary given this

257
00:09:47,610 --> 00:09:49,950
suggestion do the best you can to solve

258
00:09:49,950 --> 00:09:52,950
the the remaining constraints when we're

259
00:09:52,950 --> 00:09:55,020
done editing you know sending edits to a

260
00:09:55,020 --> 00:09:56,750
variable we can call and edit and

261
00:09:56,750 --> 00:09:59,280
finally we can add a state constraint so

262
00:09:59,280 --> 00:10:00,870
for example when I locked one of the

263
00:10:00,870 --> 00:10:02,790
variables earlier it was essentially

264
00:10:02,790 --> 00:10:04,110
adding a stay constraint saying the

265
00:10:04,110 --> 00:10:05,730
cassowary you know leave this variable

266
00:10:05,730 --> 00:10:07,650
alone when we change the other variables

267
00:10:07,650 --> 00:10:09,810
don't edit this one find a solution that

268
00:10:09,810 --> 00:10:13,890
leaves it the same so based on this

269
00:10:13,890 --> 00:10:15,900
we've created the very most simple part

270
00:10:15,900 --> 00:10:17,610
of this program we basically have three

271
00:10:17,610 --> 00:10:19,650
numbers and we're saying that this one

272
00:10:19,650 --> 00:10:21,860
plus this one has to equal this one and

273
00:10:21,860 --> 00:10:25,650
you know obviously this works and is not

274
00:10:25,650 --> 00:10:28,110
very impressive I can lock one of them

275
00:10:28,110 --> 00:10:30,420
in place and now this forces the other

276
00:10:30,420 --> 00:10:33,150
one to change not particularly

277
00:10:33,150 --> 00:10:35,220
impressive but you can see how with many

278
00:10:35,220 --> 00:10:36,900
more constraints having this work

279
00:10:36,900 --> 00:10:39,120
automatically for us would be very easy

280
00:10:39,120 --> 00:10:43,710
oh no yes so let's build some more

281
00:10:43,710 --> 00:10:46,230
interesting relationships you noticed in

282
00:10:46,230 --> 00:10:47,430
the first slide it's kind of wordy

283
00:10:47,430 --> 00:10:49,320
creating variables and expressions in

284
00:10:49,320 --> 00:10:51,660
cassowary so Alex Russell the maintainer

285
00:10:51,660 --> 00:10:54,210
of casero Jas has provided a really nice

286
00:10:54,210 --> 00:10:56,010
string API where you just give it the

287
00:10:56,010 --> 00:10:58,050
string of the equation it'll parse it

288
00:10:58,050 --> 00:11:00,360
for you and deal with everything so in

289
00:11:00,360 --> 00:11:01,710
this set of relationships what we're

290
00:11:01,710 --> 00:11:03,750
saying is this we have you know we have

291
00:11:03,750 --> 00:11:05,250
seven tax rates and these are

292
00:11:05,250 --> 00:11:07,920
percentages and and for each of those

293
00:11:07,920 --> 00:11:09,570
tax brackets there's a certain number of

294
00:11:09,570 --> 00:11:11,820
dollars actually you know the total

295
00:11:11,820 --> 00:11:13,320
number of dollars people make that are

296
00:11:13,320 --> 00:11:15,450
taxed at that tax bracket these numbers

297
00:11:15,450 --> 00:11:16,770
obviously aren't right the numbers are

298
00:11:16,770 --> 00:11:19,740
big and ugly so I changed them but let's

299
00:11:19,740 --> 00:11:22,410
make some constraints that describe a

300
00:11:22,410 --> 00:11:24,120
solution to the problem of how to set

301
00:11:24,120 --> 00:11:26,130
taxes for the US tax system

302
00:11:26,130 --> 00:11:28,350
first we'll say that the very bottom tax

303
00:11:28,350 --> 00:11:29,880
rate has to be greater than or equal to

304
00:11:29,880 --> 00:11:33,180
zero can't have negative taxes of course

305
00:11:33,180 --> 00:11:34,890
you can have negative Texas but makes

306
00:11:34,890 --> 00:11:37,590
the problem nicer to not the very top

307
00:11:37,590 --> 00:11:39,420
tax rate we'll say has to be less than a

308
00:11:39,420 --> 00:11:41,070
hundred percent again you could have

309
00:11:41,070 --> 00:11:44,250
taxed more than hundred percent but not

310
00:11:44,250 --> 00:11:47,670
clear exactly what that means so now now

311
00:11:47,670 --> 00:11:49,200
what we'll do is for each of the tax

312
00:11:49,200 --> 00:11:51,780
rates we're going to describe the value

313
00:11:51,780 --> 00:11:53,310
that each tax rate can have and I've

314
00:11:53,310 --> 00:11:55,260
adopted here some syntax that isn't real

315
00:11:55,260 --> 00:11:58,050
JavaScript syntax is like CoffeeScript

316
00:11:58,050 --> 00:12:00,660
and Ruby syntax I'm sorry but it looks a

317
00:12:00,660 --> 00:12:03,300
lot nicer so for each of the tax rates

318
00:12:03,300 --> 00:12:05,970
will say you know the third tax rate

319
00:12:05,970 --> 00:12:10,290
starts out being equal to this rate here

320
00:12:10,290 --> 00:12:12,270
which is you know the initial value that

321
00:12:12,270 --> 00:12:13,800
it's been given so we'll and that's a

322
00:12:13,800 --> 00:12:16,080
medium strength constraint so we're

323
00:12:16,080 --> 00:12:17,730
saying you know I'd like it to start out

324
00:12:17,730 --> 00:12:21,270
at twenty-five percent then we'll say

325
00:12:21,270 --> 00:12:23,640
that for example the third tax rate has

326
00:12:23,640 --> 00:12:25,020
to be less than or equal to the fourth

327
00:12:25,020 --> 00:12:26,790
tax rate you know we in general have a

328
00:12:26,790 --> 00:12:29,010
progressive tax system so we're going to

329
00:12:29,010 --> 00:12:30,390
we're going to hold that relationship

330
00:12:30,390 --> 00:12:33,150
true finally we'll set up a variable

331
00:12:33,150 --> 00:12:35,040
that's the number of dollars that we

332
00:12:35,040 --> 00:12:38,340
earn for taxes at this rate and so the

333
00:12:38,340 --> 00:12:40,290
tax revenue on the third tax rate is

334
00:12:40,290 --> 00:12:42,300
equal to the third tax rate is a

335
00:12:42,300 --> 00:12:44,220
percentage times the number of dollars

336
00:12:44,220 --> 00:12:45,890
that are taxed in the third tax rate

337
00:12:45,890 --> 00:12:49,410
that's pretty simple finally the we'll

338
00:12:49,410 --> 00:12:51,330
get the sum total so the sum total that

339
00:12:51,330 --> 00:12:53,070
we make in income taxes in a year is

340
00:12:53,070 --> 00:12:56,460
basically the tax revenue variable for

341
00:12:56,460 --> 00:12:59,970
each of these rates added together so

342
00:12:59,970 --> 00:13:01,650
now in these few lines of code we've set

343
00:13:01,650 --> 00:13:03,120
up a bunch of relationships that would

344
00:13:03,120 --> 00:13:05,550
be a real pain to code by hand or a

345
00:13:05,550 --> 00:13:07,230
whole set of validation rules that you

346
00:13:07,230 --> 00:13:09,660
have to write by hand and out of these

347
00:13:09,660 --> 00:13:11,160
constraints come some really interesting

348
00:13:11,160 --> 00:13:13,650
emergent properties let's look at what

349
00:13:13,650 --> 00:13:15,650
we get with just what we've done so far

350
00:13:15,650 --> 00:13:19,140
so let's say that I'm really in so

351
00:13:19,140 --> 00:13:21,150
obviously we can work forward as we've

352
00:13:21,150 --> 00:13:22,320
already seen you know i can increase

353
00:13:22,320 --> 00:13:25,830
taxes and that affects the deficit but i

354
00:13:25,830 --> 00:13:27,780
can do something else let's say that i'm

355
00:13:27,780 --> 00:13:29,640
not willing to cut any spending but i'm

356
00:13:29,640 --> 00:13:31,260
really interested in cutting the deficit

357
00:13:31,260 --> 00:13:33,570
and by the way none of these are my

358
00:13:33,570 --> 00:13:36,630
political opinions is just let's say

359
00:13:36,630 --> 00:13:39,660
that so I've locked spending

360
00:13:39,660 --> 00:13:41,040
in place so we can't change that

361
00:13:41,040 --> 00:13:43,620
variable and now as I cut the deficit

362
00:13:43,620 --> 00:13:45,590
it's going to force tax rates to go up

363
00:13:45,590 --> 00:13:48,750
kind of drastically and that's kind of

364
00:13:48,750 --> 00:13:50,460
not fair i mean cassowary applied all

365
00:13:50,460 --> 00:13:52,170
the tax increases to the very top tax

366
00:13:52,170 --> 00:13:54,600
bracket maybe that's not what I want so

367
00:13:54,600 --> 00:13:57,360
now I'll lock the deficit in place so

368
00:13:57,360 --> 00:13:59,010
now when I make changes to taxes the

369
00:13:59,010 --> 00:14:00,630
only thing castaway can do to solve my

370
00:14:00,630 --> 00:14:02,970
problem is change the other tax rates so

371
00:14:02,970 --> 00:14:05,000
as I decrease the tax rates on the top

372
00:14:05,000 --> 00:14:07,440
group there it's going to force all

373
00:14:07,440 --> 00:14:11,310
these others oh no good no good so I

374
00:14:11,310 --> 00:14:12,630
guess that's not the solution to our

375
00:14:12,630 --> 00:14:17,670
budget problems now what I want you to

376
00:14:17,670 --> 00:14:19,770
see is that several very natural things

377
00:14:19,770 --> 00:14:22,350
fell out of writing the relationships

378
00:14:22,350 --> 00:14:23,970
that would have been a real pain to code

379
00:14:23,970 --> 00:14:26,250
by hand you notice that as I drag the

380
00:14:26,250 --> 00:14:29,010
tax the very top tax bracket lower all

381
00:14:29,010 --> 00:14:30,810
the other ones kind of bunched up and

382
00:14:30,810 --> 00:14:33,210
then refused to move and so I can

383
00:14:33,210 --> 00:14:37,500
actually give a limit on oh well go set

384
00:14:37,500 --> 00:14:41,370
this up again and so as I drag this

385
00:14:41,370 --> 00:14:42,810
one's going to force all the other ones

386
00:14:42,810 --> 00:14:44,010
over and I can actually ask the

387
00:14:44,010 --> 00:14:46,020
interesting question like you know what

388
00:14:46,020 --> 00:14:47,580
if we had the least progressive tax

389
00:14:47,580 --> 00:14:49,650
system possible but we wanted everything

390
00:14:49,650 --> 00:14:51,870
else to be revenue neutral well this is

391
00:14:51,870 --> 00:14:55,140
where that is it also lets us see very

392
00:14:55,140 --> 00:14:56,670
clearly some relationships that aren't

393
00:14:56,670 --> 00:14:58,530
clear in the normal debate like you know

394
00:14:58,530 --> 00:15:00,600
normally people talk about when they

395
00:15:00,600 --> 00:15:02,400
talk in the budget debate we talk we

396
00:15:02,400 --> 00:15:03,780
hear about billions or trillions of

397
00:15:03,780 --> 00:15:05,460
dollars as one unit we heard about

398
00:15:05,460 --> 00:15:07,800
percentages of tax rates as one unit we

399
00:15:07,800 --> 00:15:09,810
hear about ages as qualification for

400
00:15:09,810 --> 00:15:11,520
Social Security as one unit do you know

401
00:15:11,520 --> 00:15:13,800
what the trade-off is if we put Social

402
00:15:13,800 --> 00:15:15,960
Security age up by one year how many

403
00:15:15,960 --> 00:15:18,690
billion dollars is that most people

404
00:15:18,690 --> 00:15:20,220
don't know it's hard to make how can you

405
00:15:20,220 --> 00:15:22,230
evaluate that trade-off if nobody even

406
00:15:22,230 --> 00:15:25,260
knows so this interface by using

407
00:15:25,260 --> 00:15:27,180
constraints lets us monkey with all the

408
00:15:27,180 --> 00:15:28,980
parts of the problem instead of making

409
00:15:28,980 --> 00:15:30,690
an advanced a decision about which

410
00:15:30,690 --> 00:15:32,670
things the user get to change and which

411
00:15:32,670 --> 00:15:35,070
things they have to just live with and I

412
00:15:35,070 --> 00:15:36,510
think that this is the way forward if we

413
00:15:36,510 --> 00:15:38,130
want to build more powerful applications

414
00:15:38,130 --> 00:15:40,470
we've got to give our users more

415
00:15:40,470 --> 00:15:42,930
leverage and that means not knowing in

416
00:15:42,930 --> 00:15:44,340
advance exactly what they're going to do

417
00:15:44,340 --> 00:15:45,990
with them and that means writing our

418
00:15:45,990 --> 00:15:47,610
programs in terms of constraints as

419
00:15:47,610 --> 00:15:51,330
opposed to procedures but there are very

420
00:15:51,330 --> 00:15:53,370
definitely some limits to what cassowary

421
00:15:53,370 --> 00:15:55,950
do you know cassowary can only solve

422
00:15:55,950 --> 00:15:57,480
problems where the variables or numbers

423
00:15:57,480 --> 00:15:59,460
and it can only solve problems where the

424
00:15:59,460 --> 00:16:00,900
relationships between the numbers are

425
00:16:00,900 --> 00:16:03,029
linear expressions so I want to suggest

426
00:16:03,029 --> 00:16:04,980
some other types of constraint solvers

427
00:16:04,980 --> 00:16:06,870
that we could use to build more powerful

428
00:16:06,870 --> 00:16:09,839
software so the first thing that would

429
00:16:09,839 --> 00:16:11,550
be great is just to have non linear

430
00:16:11,550 --> 00:16:13,529
constraints right if you want to have a

431
00:16:13,529 --> 00:16:15,930
2d geometry problem where we keep a

432
00:16:15,930 --> 00:16:18,150
point on a circle the constraint would

433
00:16:18,150 --> 00:16:19,800
look something like this x and y

434
00:16:19,800 --> 00:16:22,890
coordinates squared you have to equal

435
00:16:22,890 --> 00:16:25,200
the radius squared guess where I can't

436
00:16:25,200 --> 00:16:26,370
do this because it can't deal with

437
00:16:26,370 --> 00:16:28,080
squares there's actually really good

438
00:16:28,080 --> 00:16:29,640
algorithms known for this to do

439
00:16:29,640 --> 00:16:32,730
numerical approximations and somebody

440
00:16:32,730 --> 00:16:34,470
just has to do this in JavaScript you

441
00:16:34,470 --> 00:16:36,630
know be sit down with a textbook could

442
00:16:36,630 --> 00:16:39,330
be a couple couple days of work it'd be

443
00:16:39,330 --> 00:16:43,710
great if we had this the other really

444
00:16:43,710 --> 00:16:45,060
interesting thing going on in the world

445
00:16:45,060 --> 00:16:46,680
of constraint programming is Minnie

446
00:16:46,680 --> 00:16:49,710
Conrad and core dot logic so it how many

447
00:16:49,710 --> 00:16:51,529
people here have heard of these before

448
00:16:51,529 --> 00:16:55,380
anybody yes a few so this is a really

449
00:16:55,380 --> 00:16:56,790
interesting thing going on with our

450
00:16:56,790 --> 00:16:59,850
friends in the lisp world mini conran is

451
00:16:59,850 --> 00:17:02,130
a system that provides relational

452
00:17:02,130 --> 00:17:03,930
programming just like we've been doing

453
00:17:03,930 --> 00:17:06,300
with cassowary but over non non

454
00:17:06,300 --> 00:17:08,220
numerical problem domain so you can

455
00:17:08,220 --> 00:17:10,410
describe the structure of a tree things

456
00:17:10,410 --> 00:17:13,050
in a list colors you know anything you

457
00:17:13,050 --> 00:17:15,809
can think of adding constraints to the

458
00:17:15,809 --> 00:17:17,490
people who are work is very new the

459
00:17:17,490 --> 00:17:18,780
people who are working on it are worth

460
00:17:18,780 --> 00:17:21,569
following on Twitter Google+ wherever

461
00:17:21,569 --> 00:17:24,059
they are and the most interesting ideas

462
00:17:24,059 --> 00:17:25,709
from many conran which was first

463
00:17:25,709 --> 00:17:27,390
implemented in scheme are now in court

464
00:17:27,390 --> 00:17:30,300
out logic which is enclosure and closure

465
00:17:30,300 --> 00:17:32,340
compiles to JavaScript through closure

466
00:17:32,340 --> 00:17:34,260
script and you can actually run these

467
00:17:34,260 --> 00:17:36,030
logic programs written in a kind of

468
00:17:36,030 --> 00:17:38,550
lispy language in the browser and they

469
00:17:38,550 --> 00:17:40,590
are super fast if you're at all

470
00:17:40,590 --> 00:17:42,300
interested in relational and constraint

471
00:17:42,300 --> 00:17:43,770
programming I highly recommend reading

472
00:17:43,770 --> 00:17:46,470
this book the reason schemer it'll walk

473
00:17:46,470 --> 00:17:48,020
you through some kind of abstract

474
00:17:48,020 --> 00:17:50,730
problems to make your brain work in the

475
00:17:50,730 --> 00:17:53,070
very strange way thinking of constraints

476
00:17:53,070 --> 00:17:55,740
as opposed to procedures let me show you

477
00:17:55,740 --> 00:17:57,260
a little bit about what this looks like

478
00:17:57,260 --> 00:18:00,990
so here is in enclosure in court logic

479
00:18:00,990 --> 00:18:03,030
that we could run enclosure script how

480
00:18:03,030 --> 00:18:05,280
we'd solve su doku for those of you who

481
00:18:05,280 --> 00:18:06,570
don't read closure what this really says

482
00:18:06,570 --> 00:18:07,340
is

483
00:18:07,340 --> 00:18:10,040
there are 81 things in a pseudo coup

484
00:18:10,040 --> 00:18:12,530
problem if there's anyone spaces the

485
00:18:12,530 --> 00:18:17,060
rows are a set of nine rows where each

486
00:18:17,060 --> 00:18:19,700
one has the nine variables in it and the

487
00:18:19,700 --> 00:18:22,130
columns are a set of nine columns where

488
00:18:22,130 --> 00:18:24,440
each row has each column has nine items

489
00:18:24,440 --> 00:18:27,530
in it and the squares are nine sets of

490
00:18:27,530 --> 00:18:29,630
nine items so we're just kind of setting

491
00:18:29,630 --> 00:18:31,820
up the problem now we're going to run

492
00:18:31,820 --> 00:18:34,130
our logic program and we're going to say

493
00:18:34,130 --> 00:18:37,490
very simply for every one of the 81

494
00:18:37,490 --> 00:18:39,680
variables it has to be a number between

495
00:18:39,680 --> 00:18:42,710
one and nine and for the ones that were

496
00:18:42,710 --> 00:18:45,200
already filled in in the problem you

497
00:18:45,200 --> 00:18:47,330
know if it said that the first square is

498
00:18:47,330 --> 00:18:49,040
a 2 then make sure that the first square

499
00:18:49,040 --> 00:18:51,620
is a two and now comes the actual way we

500
00:18:51,620 --> 00:18:52,730
solve the problem we're going to say

501
00:18:52,730 --> 00:18:55,730
every space in every row has to be

502
00:18:55,730 --> 00:18:58,370
distinct and every space in each column

503
00:18:58,370 --> 00:19:00,170
has to be distinct from one another and

504
00:19:00,170 --> 00:19:02,780
every space in each square has to be

505
00:19:02,780 --> 00:19:05,630
distinct from all the others and it will

506
00:19:05,630 --> 00:19:07,850
run it will give us the solution now

507
00:19:07,850 --> 00:19:09,170
what's really interesting about this is

508
00:19:09,170 --> 00:19:11,090
does this look like a solution to the

509
00:19:11,090 --> 00:19:13,490
problem of su doku this looks like a

510
00:19:13,490 --> 00:19:15,770
statement of the problem of su doku and

511
00:19:15,770 --> 00:19:18,920
yet this will run really really fast and

512
00:19:18,920 --> 00:19:21,320
give us the answers now you say Adam how

513
00:19:21,320 --> 00:19:23,990
fast is it going to run it's going to

514
00:19:23,990 --> 00:19:27,890
run so Peter Norvig who's the head of AI

515
00:19:27,890 --> 00:19:29,960
research at Google wrote a Python

516
00:19:29,960 --> 00:19:31,670
version in which he solves the problem

517
00:19:31,670 --> 00:19:34,370
directly and it's about three to three

518
00:19:34,370 --> 00:19:36,410
hundred lines of Python and it runs

519
00:19:36,410 --> 00:19:38,420
reasonably fast presumably it's the

520
00:19:38,420 --> 00:19:40,430
fastest implementation of su doku solver

521
00:19:40,430 --> 00:19:42,140
you could write in pythons the guy's

522
00:19:42,140 --> 00:19:45,200
genius this version which is not

523
00:19:45,200 --> 00:19:46,670
handwritten just happens to use a

524
00:19:46,670 --> 00:19:48,410
constraint solver works on average about

525
00:19:48,410 --> 00:19:50,750
a hundred times faster than Peter Norvig

526
00:19:50,750 --> 00:19:55,180
Python code in javascript in the browser

527
00:19:55,180 --> 00:19:57,440
so this gives you a feel for what's

528
00:19:57,440 --> 00:19:59,680
coming for what's coming which is that

529
00:19:59,680 --> 00:20:02,150
we're going to have more powerful models

530
00:20:02,150 --> 00:20:04,670
for writing the software and we're not

531
00:20:04,670 --> 00:20:07,010
going to be smart enough necessarily to

532
00:20:07,010 --> 00:20:08,870
write the engines that run those models

533
00:20:08,870 --> 00:20:12,230
at least not very fast but if we can

534
00:20:12,230 --> 00:20:15,320
express the problem we have in terms of

535
00:20:15,320 --> 00:20:17,000
a problem domain that somebody has

536
00:20:17,000 --> 00:20:19,220
already written an engine for we're

537
00:20:19,220 --> 00:20:20,390
going to get all the performance

538
00:20:20,390 --> 00:20:21,030
benefits

539
00:20:21,030 --> 00:20:22,830
of all the genius that went into

540
00:20:22,830 --> 00:20:26,130
building that engine for free so this is

541
00:20:26,130 --> 00:20:27,630
really something to look into if you're

542
00:20:27,630 --> 00:20:29,040
at all interested in closure script

543
00:20:29,040 --> 00:20:31,590
please look into core logic follow Dave

544
00:20:31,590 --> 00:20:34,130
nola it's it's really interesting

545
00:20:34,130 --> 00:20:36,930
corelogic is really cool it's not yet

546
00:20:36,930 --> 00:20:39,810
quite perfect for you I applications one

547
00:20:39,810 --> 00:20:41,490
of the problems is if a problem has lots

548
00:20:41,490 --> 00:20:43,320
of solutions core logic will happily

549
00:20:43,320 --> 00:20:45,480
give you a completely different solution

550
00:20:45,480 --> 00:20:47,310
than the one you asked you got last time

551
00:20:47,310 --> 00:20:49,140
so this can lead to a case where if you

552
00:20:49,140 --> 00:20:50,510
slightly change one of the variables

553
00:20:50,510 --> 00:20:52,620
instead of just slightly updating one of

554
00:20:52,620 --> 00:20:53,700
the other variables it'll give you

555
00:20:53,700 --> 00:20:55,380
something completely in left field so

556
00:20:55,380 --> 00:20:57,660
you can't use this directly for you eyes

557
00:20:57,660 --> 00:21:00,270
but you can add a layer on top that will

558
00:21:00,270 --> 00:21:03,060
work the final thing I want to make a

559
00:21:03,060 --> 00:21:05,670
plug for is Alan Kay everyone knows Alan

560
00:21:05,670 --> 00:21:08,040
Kay right only the inventor of

561
00:21:08,040 --> 00:21:10,290
object-oriented programming the laptop

562
00:21:10,290 --> 00:21:13,680
the modern UI so he has a research

563
00:21:13,680 --> 00:21:15,540
institute called viewpoints and they're

564
00:21:15,540 --> 00:21:17,010
currently working on a research project

565
00:21:17,010 --> 00:21:19,830
called cooperating solvers which is a

566
00:21:19,830 --> 00:21:22,020
way to take different kinds of solver

567
00:21:22,020 --> 00:21:24,270
engines constraint solvers dataflow

568
00:21:24,270 --> 00:21:25,560
solve all these different kinds of

569
00:21:25,560 --> 00:21:28,350
engines and ask how could they work

570
00:21:28,350 --> 00:21:29,880
together you know what happens if you

571
00:21:29,880 --> 00:21:31,260
have a problem where part of it is

572
00:21:31,260 --> 00:21:33,150
constraints and part of it is data flow

573
00:21:33,150 --> 00:21:34,380
and part of it is something else how do

574
00:21:34,380 --> 00:21:36,000
they cooperate there's some really

575
00:21:36,000 --> 00:21:37,950
interesting PDFs and example code

576
00:21:37,950 --> 00:21:40,260
showing how to do that definitely worth

577
00:21:40,260 --> 00:21:42,810
looking so that's been constraint

578
00:21:42,810 --> 00:21:45,480
programming in the browser I think that

579
00:21:45,480 --> 00:21:46,950
we can build much more powerful user

580
00:21:46,950 --> 00:21:50,370
interfaces in this in this vein I look

581
00:21:50,370 --> 00:21:51,690
forward to seeing what you all do if

582
00:21:51,690 --> 00:21:53,130
you're interested in contributing to

583
00:21:53,130 --> 00:21:55,620
open source projects Cassar ajs is a

584
00:21:55,620 --> 00:21:58,020
fantastic one it's really easy to get

585
00:21:58,020 --> 00:22:00,530
started Alex Russell's very responsive

586
00:22:00,530 --> 00:22:02,700
so let's go out and build some more

587
00:22:02,700 --> 00:22:10,670
powerful user interfaces thank

588
00:22:10,680 --> 00:22:14,760
I have time oh I'm just gonna I'm gonna

589
00:22:14,760 --> 00:22:16,140
steal one more minute for the bonus

590
00:22:16,140 --> 00:22:18,510
alright how many people have seen Brett

591
00:22:18,510 --> 00:22:21,840
Victor's scrubbing calculator yes yes

592
00:22:21,840 --> 00:22:24,210
you know what this is so the idea here

593
00:22:24,210 --> 00:22:26,550
is is you know most people normal people

594
00:22:26,550 --> 00:22:28,470
can't do algebra the way that we can in

595
00:22:28,470 --> 00:22:31,050
our heads and they often run into

596
00:22:31,050 --> 00:22:33,060
problems that can be solved by algebra

597
00:22:33,060 --> 00:22:35,250
but that are hard to express yourself if

598
00:22:35,250 --> 00:22:36,870
you're not super proficient with algebra

599
00:22:36,870 --> 00:22:38,730
so he had this problem where he was

600
00:22:38,730 --> 00:22:41,340
trying to lay out a slide deck and he

601
00:22:41,340 --> 00:22:42,720
knew that the top margin was going to be

602
00:22:42,720 --> 00:22:44,580
about a hundred and he knew that the

603
00:22:44,580 --> 00:22:46,590
bottom margin was going to be about two

604
00:22:46,590 --> 00:22:48,780
hundred and he knew that he had to lay

605
00:22:48,780 --> 00:22:52,140
out about 20 bars in a bar charts and he

606
00:22:52,140 --> 00:22:54,560
guessed maybe there were 40 pixels high

607
00:22:54,560 --> 00:22:57,720
and then there needs to be some space

608
00:22:57,720 --> 00:23:01,290
between them so we have about seven sets

609
00:23:01,290 --> 00:23:03,210
of padding that are each 20 pixels and

610
00:23:03,210 --> 00:23:06,180
this gets us to 760 maybe the slide is

611
00:23:06,180 --> 00:23:09,120
really 800 pixels so we'll choose to

612
00:23:09,120 --> 00:23:11,430
maybe bump up the bar height a little

613
00:23:11,430 --> 00:23:14,640
bit and we'll just make the Marge a

614
00:23:14,640 --> 00:23:18,300
little smaller now that's that's okay

615
00:23:18,300 --> 00:23:20,430
that's not very hard but now let's say

616
00:23:20,430 --> 00:23:22,080
that we're happy you know this is now

617
00:23:22,080 --> 00:23:24,480
one solution to the problem of making

618
00:23:24,480 --> 00:23:28,020
everything work at 800 pixels but you

619
00:23:28,020 --> 00:23:29,730
know what if I want to solve for the bar

620
00:23:29,730 --> 00:23:31,830
height I could have if I may be cut down

621
00:23:31,830 --> 00:23:34,230
that margin a little bit and it'll

622
00:23:34,230 --> 00:23:37,110
interactively solve this equation for us

623
00:23:37,110 --> 00:23:39,930
and show us dynamically how to update

624
00:23:39,930 --> 00:23:41,700
one of the variables in response to

625
00:23:41,700 --> 00:23:43,140
changes to the other while keeping the

626
00:23:43,140 --> 00:23:46,260
equation as a whole in balance now this

627
00:23:46,260 --> 00:23:47,640
is something that when I first saw I

628
00:23:47,640 --> 00:23:50,040
didn't know how I would build and now

629
00:23:50,040 --> 00:23:51,420
that I've built it it's about a hundred

630
00:23:51,420 --> 00:23:53,730
lines using cassowary now it's not as

631
00:23:53,730 --> 00:23:55,320
full-featured is the one that he demoed

632
00:23:55,320 --> 00:23:57,000
it doesn't handle squares and things

633
00:23:57,000 --> 00:23:58,950
that castle where I can't handle but you

634
00:23:58,950 --> 00:24:00,480
can write this you can understand how it

635
00:24:00,480 --> 00:24:03,930
works this is an example of the kind of

636
00:24:03,930 --> 00:24:06,270
program that you can't write it would be

637
00:24:06,270 --> 00:24:08,040
hard to write by hand unless you really

638
00:24:08,040 --> 00:24:09,300
want to write your own computer algebra

639
00:24:09,300 --> 00:24:11,730
system that you can write in the course

640
00:24:11,730 --> 00:24:14,370
of maybe four or five hours using

641
00:24:14,370 --> 00:24:16,380
cassowary or similar constraint solver

642
00:24:16,380 --> 00:24:18,300
if we had a more powerful constraint

643
00:24:18,300 --> 00:24:20,640
solver that worked with squaring other

644
00:24:20,640 --> 00:24:22,650
mathematical functions or if we had a

645
00:24:22,650 --> 00:24:24,060
real computer algebra

646
00:24:24,060 --> 00:24:25,880
in JavaScript wouldn't that be great

647
00:24:25,880 --> 00:24:29,220
then we could do so i'm making a plug

648
00:24:29,220 --> 00:24:31,470
for constraints and for other powerful

649
00:24:31,470 --> 00:24:33,210
models you know things that come out of

650
00:24:33,210 --> 00:24:35,730
cs and math research as the underlying

651
00:24:35,730 --> 00:24:37,890
feature of more powerful user interfaces

652
00:24:37,890 --> 00:24:40,530
for our users and if anybody has any

653
00:24:40,530 --> 00:24:41,820
questions I would be really happy to

654
00:24:41,820 --> 00:24:46,380
take them so the question is in the su

655
00:24:46,380 --> 00:24:50,520
doku example is it powerful enough to do

656
00:24:50,520 --> 00:24:52,440
backtracking and give us multiple

657
00:24:52,440 --> 00:24:55,080
answers and yes it absolutely is in the

658
00:24:55,080 --> 00:24:57,090
code here that run one is saying give me

659
00:24:57,090 --> 00:24:59,520
the first solution you can find the way

660
00:24:59,520 --> 00:25:02,340
this is implemented it very naturally

661
00:25:02,340 --> 00:25:04,050
does the backtracking itself you can ask

662
00:25:04,050 --> 00:25:06,270
for all the solutions although in that

663
00:25:06,270 --> 00:25:08,130
case it may not converge it may just run

664
00:25:08,130 --> 00:25:09,900
forever you can ask for any number of

665
00:25:09,900 --> 00:25:14,250
solutions you want yes so the question

666
00:25:14,250 --> 00:25:16,740
is have I used closure script in in

667
00:25:16,740 --> 00:25:18,570
production apps and kind of what is the

668
00:25:18,570 --> 00:25:20,880
scope of problems that can solve I have

669
00:25:20,880 --> 00:25:22,470
not used it in anything that I've

670
00:25:22,470 --> 00:25:27,780
shipped to another human being I would

671
00:25:27,780 --> 00:25:31,700
say it takes a lot of effort to find out

672
00:25:31,700 --> 00:25:34,320
to get in the habit of actually

673
00:25:34,320 --> 00:25:36,540
consciously modeling your problem in

674
00:25:36,540 --> 00:25:38,550
terms of a known problem domain use

675
00:25:38,550 --> 00:25:39,780
JavaScript programmers we're used to

676
00:25:39,780 --> 00:25:41,390
solving things kind of by brute force

677
00:25:41,390 --> 00:25:44,700
and this the question of does the

678
00:25:44,700 --> 00:25:47,280
problem i have actually meet up with a

679
00:25:47,280 --> 00:25:49,470
known computer science problem domain is

680
00:25:49,470 --> 00:25:53,310
just a skill you have to develop my

681
00:25:53,310 --> 00:25:55,080
senses credit logic right now is very

682
00:25:55,080 --> 00:25:57,120
well suited for what i would call well

683
00:25:57,120 --> 00:25:59,640
constrained problems problems where you

684
00:25:59,640 --> 00:26:01,320
know that there is a solution and that

685
00:26:01,320 --> 00:26:03,360
there's probably only a few solutions

686
00:26:03,360 --> 00:26:05,130
and you don't care which one you get in

687
00:26:05,130 --> 00:26:07,560
the case of cassowary it has a lot of

688
00:26:07,560 --> 00:26:09,930
really great logic around having a

689
00:26:09,930 --> 00:26:11,970
problem that's over constrained where

690
00:26:11,970 --> 00:26:13,800
you can't meet all the constraints but

691
00:26:13,800 --> 00:26:15,120
you can say which ones you care about

692
00:26:15,120 --> 00:26:17,430
more and it'll it'll try and find the

693
00:26:17,430 --> 00:26:19,980
best solution or a problem that's under

694
00:26:19,980 --> 00:26:21,120
constrained a problem where there's

695
00:26:21,120 --> 00:26:22,790
thousands of possible solutions

696
00:26:22,790 --> 00:26:24,750
cassowaries great about if you make a

697
00:26:24,750 --> 00:26:26,820
small change to an existing solution

698
00:26:26,820 --> 00:26:29,670
it'll give you back this a new state

699
00:26:29,670 --> 00:26:31,800
that is as little different as possible

700
00:26:31,800 --> 00:26:33,990
whereas Cortot logic may just give you

701
00:26:33,990 --> 00:26:36,180
you know a completely different one but

702
00:26:36,180 --> 00:26:37,710
i think that there's a lot that we could

703
00:26:37,710 --> 00:26:40,169
do you know as we start thinking about

704
00:26:40,169 --> 00:26:42,179
how to use constraint programming in you

705
00:26:42,179 --> 00:26:44,399
I programs to just layer on top of that

706
00:26:44,399 --> 00:26:47,820
and handle some of that ourselves yeah

707
00:26:47,820 --> 00:26:50,250
so I mean I think the general point is

708
00:26:50,250 --> 00:26:53,070
we're just now kind of understanding I

709
00:26:53,070 --> 00:26:55,380
mean you know there's a lot of history

710
00:26:55,380 --> 00:26:57,059
with prologue in terms of what we can

711
00:26:57,059 --> 00:26:59,700
write in logic programs how what Kyle

712
00:26:59,700 --> 00:27:01,919
powerful programs can be and still run

713
00:27:01,919 --> 00:27:03,659
backwards as opposed to just forwards

714
00:27:03,659 --> 00:27:06,059
there's a lot of cool things and and

715
00:27:06,059 --> 00:27:07,919
really the mini Conrad people are the

716
00:27:07,919 --> 00:27:09,690
people to follow the most interesting

717
00:27:09,690 --> 00:27:11,809
thing I've seen is they wrote a

718
00:27:11,809 --> 00:27:15,450
relational interpreter for a language

719
00:27:15,450 --> 00:27:18,120
that you know normal interpreter takes

720
00:27:18,120 --> 00:27:20,039
you know some so a grammar of a language

721
00:27:20,039 --> 00:27:22,230
or semantics of a language and some

722
00:27:22,230 --> 00:27:24,480
input and return some you know some

723
00:27:24,480 --> 00:27:26,480
interpreted version of it the results

724
00:27:26,480 --> 00:27:28,770
and it only works for words and they

725
00:27:28,770 --> 00:27:30,120
wrote one that works backwards so you

726
00:27:30,120 --> 00:27:31,440
can say here's the thing what is the

727
00:27:31,440 --> 00:27:32,820
program that would generate this and

728
00:27:32,820 --> 00:27:35,580
then they use that to write a program

729
00:27:35,580 --> 00:27:38,130
that would find coins programs whose

730
00:27:38,130 --> 00:27:40,140
output is the same as the text of the

731
00:27:40,140 --> 00:27:42,000
program itself and you know there's no

732
00:27:42,000 --> 00:27:44,220
hinting they're not calculating them

733
00:27:44,220 --> 00:27:45,960
they're just setting the problem to the

734
00:27:45,960 --> 00:27:47,250
constraint solver and the constraint

735
00:27:47,250 --> 00:27:50,460
solver is solving it for them a lot of

736
00:27:50,460 --> 00:27:53,279
interesting stuff going on any other

737
00:27:53,279 --> 00:28:11,370
questions awesome well thank you

