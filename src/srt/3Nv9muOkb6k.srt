1
00:11:44,128 --> 00:11:45,682
Great stuff!  
>> Good morning, everyone. How 

2
00:11:45,683 --> 00:11:47,824
this That's 
So, Ibetter than I talk from

3
00:11:47,825 --> 00:11:49,901
React asleep!  thought. thought 
everyone another would still be

4
00:11:49,902 --> 00:11:55,819
to with morning, we're going
going open up  she's and style

5
00:11:55,820 --> 00:12:02,984
Sarrah Vesselov, to talk about 
how aReact. UI - UX  Sarrah is

6
00:12:02,985 --> 00:12:08,960
lead  and wasat Gitlab, 
developer UI part of that,

7
00:12:08,961 --> 00:12:13,905
senior sheNitro 
She a  Mobile. at Mad a

8
00:12:13,906 --> 00:12:16,478
solutions whowomen develop. and 
girl [Applause].  serves and as

9
00:12:16,479 --> 00:12:20,916
Sarrah!  director for  who from 
code it Let's hear

10
00:12:26,636 --> 00:12:32,292
some  So  Good had morning. I
tell,

11
00:12:32,293 --> 00:12:35,121
SARRAH: early. for with probably
little  fonts and Snafus with

12
00:12:35,122 --> 00:12:39,870
you cannotes, this so bear me a 
bit. Thank as you coming the So,

13
00:12:41,096 --> 00:12:43,396
my pretty from some title on 
painful of personal experience.

14
00:12:43,397 --> 00:12:48,947
based talk, it's start today  
sharing that I experience with

15
00:12:48,948 --> 00:12:50,948
you.wanted to by

16
00:12:55,419 --> 00:13:01,126
My So, UI in 2015, I team. 
senior worked product amain at

17
00:13:01,185 --> 00:13:03,852
developer on a build  to 
scaleable, role was maintainable

18
00:13:03,892 --> 00:13:08,275
a which months CSS for concept 
small vapour  essentially lot

19
00:13:08,276 --> 00:13:11,680
worked but of The team  app of 
us hadstart-up a on a proof real

20
00:13:12,337 --> 00:13:15,760
architectures. lookedfirst  as
like a ah, well, writing done

21
00:13:15,761 --> 00:13:19,698
our get had  snagged to ware. We
and begin to lot of was time

22
00:13:19,699 --> 00:13:23,305
buzz and opportunity business 
client. It exciting down to

23
00:13:23,306 --> 00:13:25,797
quality
It decided an production we

24
00:13:25,798 --> 00:13:30,433
code. an was in and build from 
to one it app for scratch

25
00:13:30,434 --> 00:13:32,613
practices best Just we were 
going do for

26
00:13:32,614 --> 00:13:35,043
there any started me. React. 
trouble Up the until problem:

27
00:13:35,044 --> 00:13:39,530
weren't where in thistime, is 
styling React attake  and this

28
00:13:39,531 --> 00:13:43,984
care  take the to me been happy 
have changed now, all team had

29
00:13:43,985 --> 00:13:46,848
styles - to This good. care of 
all the CSS - they didn't care

30
00:13:46,849 --> 00:13:52,775
styles -  looked of all the it
fact,as long as my ten-plus

31
00:13:52,776 --> 00:13:55,544
sudden, and, in  years of All of
a nothing,  withdinosaur.styling

32
00:13:55,666 --> 00:14:01,291
React. absolutely  meantin 
applications meant a was it

33
00:14:01,292 --> 00:14:05,092
gave that I was changed  And 
this an Facebook because, that

34
00:14:05,093 --> 00:14:08,897
2014, engineer at your a talk  
in made talkshave CSS  a

35
00:14:09,100 --> 00:14:10,750
everything. His the represented
case for putting

36
00:14:10,751 --> 00:14:16,097
And really JS. thisoriginal 
traditional NBC view changed

37
00:14:16,179 --> 00:14:20,320
component-based  to more from 
shift we  technicalures that way

38
00:14:21,394 --> 00:14:24,123
architecture and in  we few 
months the code were the next

39
00:14:24,124 --> 00:14:30,509
styling relationship to thethe 
way the view rest of base. So my

40
00:14:30,915 --> 00:14:34,170
worst in the presentation became
- some of meant Every one

41
00:14:34,171 --> 00:14:36,686
career. conversation was bully 
into confrontation orbecame

42
00:14:36,687 --> 00:14:42,951
every it other shame  a and the 
to friends any ofend of side or

43
00:14:43,395 --> 00:14:45,768
seeingcrazy? none ofthe error 
their were  ways. At the sounds

44
00:14:45,815 --> 00:14:51,487
familiar, it all, sounds us If 
it more. This It was. sorry.

45
00:14:52,128 --> 00:14:56,898
But we're really endhave would  
tried not itchoices. didn't

46
00:14:56,899 --> 00:14:59,452
imploded we have to team stuck 
choices because this way. The

47
00:14:59,453 --> 00:15:03,343
styling bad technology just  
most of the had of was In

48
00:15:03,344 --> 00:15:07,403
reality, if we problemmore we 
The far  worked and with things

49
00:15:07,404 --> 00:15:12,100
way it. theproblem. We us, made 
theavoided approached  had had

50
00:15:12,101 --> 00:15:14,631
havethan   right needed to in 
could If we complicated

51
00:15:14,632 --> 00:15:17,852
listening terrible  the we they
questions be. really other, been

52
00:15:17,853 --> 00:15:26,860
asking  andto each has  lot A
ago. the whole mess. That years

53
00:15:27,450 --> 00:15:32,469
was two local - a  a really
recent debate ischanged. The

54
00:15:32,470 --> 00:15:35,390
hasn't. Thisarguments
So, did for  that   Googleago.

55
00:15:35,391 --> 00:15:38,744
search I I the same about just 
So years  made today CSS. talk

56
00:15:38,745 --> 00:15:43,975
see two look being to thatwe 
were having and a both I want

57
00:15:43,976 --> 00:15:47,097
and today, the take of at sides 
of can cons that argument, then

58
00:15:47,098 --> 00:15:53,152
and look at that reallystyle 
pros theeach way you  sides of

59
00:15:53,153 --> 00:15:55,168
against bothdebate.broken,  
gripes is CSS in React. So, know

60
00:15:55,496 --> 00:15:59,721
with the Ilook at all want to  
Starting  We no-no in

61
00:15:59,722 --> 00:16:03,095
JavaScript. CSS. a Why are we 
global  uses it's CSSdoingscope

62
00:16:03,096 --> 00:16:10,037
and right?  bydependencies 
default,overriding   CSS and it

63
00:16:10,038 --> 00:16:11,326
in styles? side,  CSS 
inheritance collision the

64
00:16:11,327 --> 00:16:15,732
You're wrong on and at all make 
style concerns look just

65
00:16:15,733 --> 00:16:19,840
inevitable. looking at 
separation of We separation of

66
00:16:19,841 --> 00:16:24,002
right? a CSS concerns as a  
technologies, andseparation of

67
00:16:24,003 --> 00:16:28,264
and reallywhat each piece is 
it'sdeadin CSS  JS,  andcauses

68
00:16:28,555 --> 00:16:32,375
separation of   of components 
linesthen cascade of course

69
00:16:32,376 --> 00:16:37,142
doesn't of doing. And the and 
with thousandsCSS so youdead

70
00:16:37,143 --> 00:16:43,077
code work   this at scale, have 
CSS isn't are JS. there equally

71
00:16:43,078 --> 00:16:45,403
strong broken - code problem. 
But gripes and  against

72
00:16:45,404 --> 00:16:51,797
you use create CSS to toit. 
JavaScript just don't know how

73
00:16:51,798 --> 00:16:54,853
UsingCSSreinventing the
unnecessary.   is excessive

74
00:16:54,854 --> 00:16:58,021
works andyou  we friend if your 
is CSS on Why are from cascade

75
00:16:58,022 --> 00:17:01,597
separate be wheel? should 
The fine just CSS itsmark-up.

76
00:17:01,598 --> 00:17:09,662
own. your course,  And, of know 
how to use it. oh,

77
00:17:11,631 --> 00:17:15,181
oops, use - your apologies 
friend if sides cascade both to

78
00:17:15,417 --> 00:17:19,062
styles The isit,there!  So  
course, you know how  hack.

79
00:17:19,063 --> 00:17:24,219
and, of inlineconcerns are a and
the  CSS side JS andhave pretty

80
00:17:24,220 --> 00:17:30,464
serious the CSSside is  some 
about what other  look at two

81
00:17:30,465 --> 00:17:32,746
let'scategories,own  doing. So 
now we've basic  theheard sides,

82
00:17:32,850 --> 00:17:35,975
four can the  cons. I'm  into 
options. You break down and its

83
00:17:35,976 --> 00:17:42,486
styling pros each one with sets 
of the basics. withgoing to

84
00:17:42,487 --> 00:17:48,159
start 
Naming intelligently. things out

85
00:17:49,878 --> 00:17:51,643
methods
There style  eliminate are a lot

86
00:17:51,644 --> 00:17:57,149
of to  is among threadthere. 
Common allof themcollision

87
00:17:57,150 --> 00:18:00,913
Standardisation specificity   by
modularity. Loguewithand

88
00:18:00,914 --> 00:18:02,967
encouraging work  methods

89
00:18:06,166 --> 00:18:09,879
CSS, In SASS, 2015, it. you name
that

90
00:18:09,880 --> 00:18:15,559
Rules the - stands was for  BEM 
has modifier. really

91
00:18:15,560 --> 00:18:17,239
Everything block
everything. element  class - are

92
00:18:17,240 --> 00:18:21,689
really, simple. should anever No
Elements styled.course, styles.

93
00:18:22,657 --> 00:18:25,725
be directly  follow nesting of 
conventions. Of religiously.your

94
00:18:25,949 --> 00:18:29,239
must choose  And syntax naming 
you the

95
00:18:33,965 --> 00:18:35,100
component - and  block So in 
this my frame a

96
00:18:35,101 --> 00:18:42,337
It's have  component.example, I 
my friend  Any entity. an  or

97
00:18:43,334 --> 00:18:46,983
have no image, own. use 
description their liveDOM node

98
00:18:46,984 --> 00:18:49,247
in always never  my should is - 
they friend meaning on node or

99
00:18:49,248 --> 00:18:52,687
friend It
You would in  base. name, friend

100
00:18:52,688 --> 00:18:59,539
block. anywhere elseyour code
class that  inside extra replace

101
00:18:59,721 --> 00:19:01,228
are anits never  it. And
And

102
00:19:01,229 --> 00:19:03,547
Modifiers to modifiers block,
blocks and just in  change  the

103
00:19:03,548 --> 00:19:06,071
name that can be added 
behaviour.  elements to modify

104
00:19:06,072 --> 00:19:10,423
appearance for should only to 
startone with,terms of structure

105
00:19:10,845 --> 00:19:14,300
and  folderhere's I'm just   
component component is

106
00:19:14,301 --> 00:19:19,625
structure, a simple this means 
you to it, by no general in is

107
00:19:19,626 --> 00:19:21,392
telling very structure this is 
thethink way do structure and do

108
00:19:21,393 --> 00:19:26,936
personalised I  folder way that 
you can from it. component to

109
00:19:27,585 --> 00:19:30,915
project.well, and dosimple 
project should   Here we've

110
00:19:30,916 --> 00:19:35,351
thing component got the  it 
structure. Eachfolder one do

111
00:19:35,352 --> 00:19:41,281
and in the that each contains 
the JS, CSS and testtwo files.

112
00:19:41,282 --> 00:19:44,722
In this  presentational out 
components. example,  our been

113
00:19:44,723 --> 00:19:49,915
brokencomponents represents   
two categories. The they folder

114
00:19:49,916 --> 00:19:55,124
andcomponents havesimply
They're stateless,make   The

115
00:19:55,125 --> 00:19:57,950
container components take props.
They are are benefits There

116
00:19:57,951 --> 00:20:01,586
stateful. cetera. of API calls, 
etapproach.concerns, a lot

117
00:20:02,016 --> 00:20:04,287
reusability  toconcerned this   
better get but You  separation

118
00:20:04,288 --> 00:20:07,320
ofif get something you'reteam a
different type ofpresentational

119
00:20:07,431 --> 00:20:12,203
projects,  is and you design can
be in other the The that  by

120
00:20:12,204 --> 00:20:16,581
with. that components also the  
worked on affectapp's without

121
00:20:16,582 --> 00:20:22,549
concern it'sgoing to to BEM pros
logic. of in a lot methods

122
00:20:22,550 --> 00:20:27,885
So there are standardisation 
think  I and a general. for

123
00:20:27,886 --> 00:20:36,187
building they'renatural fit  
configuration, just using  no so

124
00:20:36,188 --> 00:20:39,923
we'recomponents. There's cetera,
configure or set to compiler, et

125
00:20:40,267 --> 00:20:45,826
nothing together. There's
straight CSS. and put up

126
00:20:50,837 --> 00:20:55,066
Using again used  be over BEM 
components, eachcomponent can

127
00:20:55,067 --> 00:20:56,596
make
And  over and projects. and in

128
00:20:56,597 --> 00:21:01,225
other namescollisions and single
class   impossible,

129
00:21:03,808 --> 00:21:07,830
presentational  enginesthe 
rendering   evaluate,  to - BEM

130
00:21:07,831 --> 00:21:10,362
structure toeasier to that lends
so right is think itselfevaluate

131
00:21:10,363 --> 00:21:14,846
CSS left, Ithe less there 
perfectly render. is to faster

132
00:21:14,847 --> 00:21:16,847
it going to

133
00:21:18,970 --> 00:21:24,115
standards. But added can style  
so every same linting the some

134
00:21:24,302 --> 00:21:28,313
cons. conform to is things there
are that naming anyone it,things

135
00:21:28,539 --> 00:21:32,085
to Let's for the face crazy
probably one of  this really

136
00:21:32,086 --> 00:21:35,650
sounds hard. It's think  the 
hardest we dotime do. It  I my

137
00:21:35,651 --> 00:21:37,435
so something someone else name 
doesn't of knows to   a living

138
00:21:37,436 --> 00:21:41,948
butRickid most what architecture
out building CSSrigid Theis

139
00:21:41,949 --> 00:21:47,487
figuring the BEM -- about. of 
whatwhat I'm talking structure

140
00:21:47,488 --> 00:21:51,083
ismakes and whatmakes it 
structure ofdoesn't BEM at  it

141
00:21:51,084 --> 00:21:54,104
work can write also   difficult 
not think you to something to

142
00:21:54,105 --> 00:21:57,310
weird,first. It takesnatural, 
when  frustrating feels it

143
00:21:57,411 --> 00:22:01,261
longer. Itfaster and be feel 
natural, being  this  can wayand

144
00:22:01,387 --> 00:22:03,267
order method. you're do 
something intobuy-in in in

145
00:22:03,268 --> 00:22:06,367
another  team  particular but 
forced got get syntax system to

146
00:22:06,368 --> 00:22:11,030
into thiscascade
You've to this the  for benefit

147
00:22:11,031 --> 00:22:14,495
ofcandebate seen
Losingcon work.  the things

148
00:22:14,496 --> 00:22:18,558
can be or as which cascade  the 
pro used The depending things

149
00:22:18,559 --> 00:22:23,461
side of when you fall on.bloated
or use drythat  a directly

150
00:22:23,462 --> 00:22:27,571
hacked.  result in a overridden 
and code base with styleare is

151
00:22:29,008 --> 00:22:33,675
It's use there to  possible
theming for would say out BEM

152
00:22:33,676 --> 00:22:36,512
methods  important but I and
there. is is far better but

153
00:22:36,513 --> 00:22:38,974
somethingthat you'redashes that 
you con, Theming  serious

154
00:22:38,975 --> 00:22:42,946
something to It work and the a I
back toabout again, doing. may

155
00:22:42,947 --> 00:22:46,897
not underscores befeels really, 
And, goes   the ugly. when you

156
00:22:46,898 --> 00:22:49,828
work it with themnaturally 
reallywriting difficult think

157
00:22:49,829 --> 00:22:59,059
things   come that's make 
something or doesn't can a lot

158
00:22:59,060 --> 00:23:01,516
next into that. to this at 
turningslower.pre-processors.

159
00:23:01,517 --> 00:23:03,517
We're So the I want look

160
00:23:11,211 --> 00:23:16,796
helpful A  dry codeallows and of
write than CSS planefaster. name

161
00:23:16,899 --> 00:23:19,398
a lot you CSSmix-ins,  you 
operations,  to variables,   It

162
00:23:19,399 --> 00:23:21,514
contains features  likeit.

163
00:23:25,323 --> 00:23:29,924
SASS is one of think the 
pre-processor - Ilanguages  bad

164
00:23:29,925 --> 00:23:31,252
news the I'm extension about So
going tothatmost well-known

165
00:23:31,253 --> 00:23:34,111
talk.  upon  thisSASS, and that 
is onepre-processor, is syntax

166
00:23:34,112 --> 00:23:41,332
touchthings. In this   here in 
name to any need or still is

167
00:23:41,333 --> 00:23:45,035
you I'mcomponent convention the 
same. The  example, naming look

168
00:23:45,115 --> 00:23:49,457
continuing to use the the friend
BEM more will forset.  is that

169
00:23:49,458 --> 00:23:56,884
which itself here is component 
difference   of to out The

170
00:23:56,885 --> 00:23:59,299
instead having bring write 
entirety,nestingeach class? Its

171
00:23:59,300 --> 00:24:06,539
the readable usingassemble  to 
ampersandvariables   each have

172
00:24:06,540 --> 00:24:08,231
same class. We the up could 
exactly I be in here and of ways

173
00:24:08,232 --> 00:24:12,723
there are willoriginal to a lot 
output our  CSS  dry witheven

174
00:24:12,724 --> 00:24:17,675
further. in Again,has  as 
nothing structure, example.the

175
00:24:17,676 --> 00:24:21,283
folderapproaching each We're  
separating really changed. a

176
00:24:21,284 --> 00:24:25,959
still  longer we're component as
whole entity, instead no on

177
00:24:25,960 --> 00:24:29,428
separating presentational and 
but HTMLcomponent. components

178
00:24:29,429 --> 00:24:34,474
CSS lives within the that and 
container file  CSS components.

179
00:24:34,475 --> 00:24:38,224
In this the ways. toSASS 
individual have different style

180
00:24:38,225 --> 00:24:41,582
example, outputting an canit a 
ofstyle   one into However, you

181
00:24:41,583 --> 00:24:44,269
do this whole  number I compile 
that

182
00:24:44,270 --> 00:24:49,572
You could actually sheet and 
load So pros.  sheet instead. of

183
00:24:49,853 --> 00:24:54,869
a lot pros
There are  to nesting.mix-ins,

184
00:24:55,709 --> 00:25:00,607
the of lot ofpre-processors. you
a  power a lot grown In that

185
00:25:00,608 --> 00:25:04,752
It has have dry SASSyour on. 
features  of us can  dependent

186
00:25:04,753 --> 00:25:07,581
think using gives general, you 
really also up code quite I a

187
00:25:07,582 --> 00:25:11,516
bit arepickthese features. know 
a lot of them already real easy

188
00:25:11,517 --> 00:25:15,868
to and CSS, up. If you in no 
jumping  to much there's without

189
00:25:15,925 --> 00:25:18,009
SASS. You overheadeach 
presentation straightaway

190
00:25:18,010 --> 00:25:23,270
working  with  can do it up, 
first set  help. And is

191
00:25:23,275 --> 00:25:29,005
modular.spectacular to a filed 
component can beone orreally

192
00:25:29,006 --> 00:25:31,518
Each SASSyour intointo CSS it  
one sheet liveswithin that

193
00:25:31,519 --> 00:25:35,582
exported so single to sheet that
forneed  component, lends the

194
00:25:35,583 --> 00:25:39,668
itself  work team and are 
project you There It's

195
00:25:39,669 --> 00:25:42,009
So it to. your cons. 
dependencies. some use

196
00:25:42,010 --> 00:25:45,293
configuration in  need to add 
SASS already what we project,

197
00:25:45,294 --> 00:25:53,117
consideringyou will do to big 
con with not really a weblayer.

198
00:25:53,559 --> 00:25:57,912
pack  mind it more of keep in 
can get out and other is one

199
00:25:57,913 --> 00:26:00,962
very seen some Nesting I've devs
newcontrol very, things quickly.

200
00:26:01,071 --> 00:26:04,426
to
They're  and  nestpossibly deep

201
00:26:04,427 --> 00:26:08,000
hell!  in SASS  tenthemselves 
straight  to outSASS. got that

202
00:26:08,001 --> 00:26:11,294
like they you've can't figure 
really how React be happened!

203
00:26:11,295 --> 00:26:16,740
So with to careful said would
arguecomposition but Having

204
00:26:16,741 --> 00:26:21,524
component that, I   general in 
that the and need of Reactmix-in

205
00:26:22,525 --> 00:26:25,261
nesting. bereduces the for  that
They building the bigshould You

206
00:26:25,262 --> 00:26:27,916
should and not things.   be 
small components do a the lot

207
00:26:27,917 --> 00:26:30,752
those of So
The you need should need small.

208
00:26:30,784 --> 00:26:34,183
you complicated. amount of 
styling even be relatively  may

209
00:26:34,184 --> 00:26:40,710
not  a lot Just name things. You
have right?wanta to refrain.of

210
00:26:40,711 --> 00:26:47,077
things, seems to  don't  to do 
It popular this. bethe really

211
00:26:49,147 --> 00:26:53,110
styles. not about  Now are to 
talkstandard inline

212
00:26:53,111 --> 00:26:55,967
The and Inline I  and  styles
will get same  as that a  CSS

213
00:26:55,968 --> 00:26:58,139
been time. JS, Iwant methods 
long justback to that in about

214
00:26:58,140 --> 00:27:01,830
have minute.  first twos goes a 
we  talked inlinethe  for quite

215
00:27:01,831 --> 00:27:06,502
2015, styles inyour But 
Having CSS style further. to

216
00:27:06,503 --> 00:27:15,831
even them idea of usingkind 
seemed  entire application of

217
00:27:15,832 --> 00:27:19,862
the crazy. So just like it 
inline to sounds,they're

218
00:27:19,863 --> 00:27:23,048
stylings inline  sameactual DOM 
again, asCSS styles node. And, I

219
00:27:23,481 --> 00:27:25,269
component, the simple not the 
thing   attach

220
00:27:25,270 --> 00:27:29,718
This and JS. to same frame will 
getyour that.  is of the And

221
00:27:29,719 --> 00:27:34,890
styles. example inline this 
stirs R first example was the

222
00:27:34,891 --> 00:27:37,832
got horrified when were team 
that we in I've say, theCSS

223
00:27:37,833 --> 00:27:41,418
folks on the brought to us 2015.
to

224
00:27:41,419 --> 00:27:46,747
To this. we saw not most inline 
styles. be fair, this is  how

225
00:27:46,748 --> 00:27:50,779
people are using
Most are  is objects. more

226
00:27:50,924 --> 00:27:53,231
handles   using style example. 
Itdocument React native

227
00:27:53,232 --> 00:27:56,266
It's much Moinit takenable that
than the first  also the Most

228
00:27:56,267 --> 00:27:59,573
way  separate and component.the 
style styling. will a take one

229
00:27:59,574 --> 00:28:04,792
step import further place into 
the  objects in and then that It

230
00:28:05,580 --> 00:28:08,853
Does it sound familiar?of 
should!  At  many  for thought

231
00:28:08,854 --> 00:28:17,780
thethetime,  an   this?"  The 
style You us was "Seriously?

232
00:28:17,781 --> 00:28:21,053
like wantus tolaughable at the  
seemed entire application app an

233
00:28:21,163 --> 00:28:27,036
by styling subtitlevery thought 
of  injecting because -

234
00:28:27,037 --> 00:28:29,849
injecting style time, seemed 
font  size, Theperspective of

235
00:28:29,850 --> 00:28:32,045
laughable colour scaleable. 
folks, at the time. From time

236
00:28:32,046 --> 00:28:38,303
not the  the CSS thethis was 
times in several changed

237
00:28:38,364 --> 00:28:42,699
application   pallette of the 
had How we were app.working on

238
00:28:42,700 --> 00:28:47,024
the  fonts changes  to manage
likewere we for there inline

239
00:28:47,025 --> 00:28:50,454
going need 
Surely that with avertical

240
00:28:50,455 --> 00:28:58,709
styles? was  and rhythm,  colour
disstressing moredo.  of

241
00:28:58,710 --> 00:29:01,945
couldn't  subset Even it 
supports awas learning what

242
00:29:02,458 --> 00:29:07,037
palette. styles onlyyou  So 
inline  CSS allows

243
00:29:07,038 --> 00:29:08,773
We're going CSS. the to CSS. of 
get actual toand JS on the other

244
00:29:08,774 --> 00:29:11,961
hand  I generates to use all 
power minute. CSSbecause it keep

245
00:29:12,937 --> 00:29:18,445
a Ithat those inpositives know  
saying  are some but we're

246
00:29:18,446 --> 00:29:22,078
almost quite there there!  
lacking and I think model mental

247
00:29:22,703 --> 00:29:24,874
your
Inline styles are change a bit.

248
00:29:24,875 --> 00:29:29,081
to really Inline its you to 
them. as styles forces admit

249
00:29:29,082 --> 00:29:32,716
componentreally entity. will 
against see each that  ownof not

250
00:29:32,811 --> 00:29:34,794
I
This was something it and.js was

251
00:29:34,795 --> 00:29:41,174
did for me.  -- idea  CSSthat I 
the and against CSS JS go had

252
00:29:41,175 --> 00:29:46,247
but did I my of itup.practice, 
inline on everything ﾣ  learned,

253
00:29:46,466 --> 00:29:48,494
writing years hack else bestable
to  view andput component and my

254
00:29:48,975 --> 00:29:51,852
was  really localise those my  
its Using a tostyles. I as and

255
00:29:51,853 --> 00:29:54,743
styles changed being able 
component that. concern see the

256
00:29:54,744 --> 00:29:57,244
in own see the value

257
00:30:00,284 --> 00:30:05,175
specificity,  theleave in And 
obviously,accidentally isway

258
00:30:05,258 --> 00:30:08,344
styles are  inline trump card   
right? There or no  that someone

259
00:30:08,455 --> 00:30:13,658
is going to hanging  override 
them unused stylesReactwith

260
00:30:13,659 --> 00:30:17,609
React those around. If you to  
will move to intend stick to

261
00:30:17,610 --> 00:30:20,849
styles work.long-term to go 
easier you native, yourlibrary

262
00:30:20,850 --> 00:30:25,186
So,  It is going to be much 
longer.  bit a cons list the is

263
00:30:25,187 --> 00:30:29,069
over. So CSS to on a basic 
accessthe big need depend

264
00:30:29,615 --> 00:30:34,365
features, to   the and this time
was one of side at the arguments

265
00:30:34,366 --> 00:30:36,698
fromadding these that CSS
library,  do that this? we were

266
00:30:36,699 --> 00:30:42,501
would   we things Why CSS adoes 
naturally.  using that If to

267
00:30:42,502 --> 00:30:44,831
you're not to it's things 
necessaryselectors, workarounds,

268
00:30:45,074 --> 00:30:49,177
address programme JS  the you  
media gives queries, out of all

269
00:30:49,178 --> 00:30:55,305
of CSSchanges just  notwhich 
global style You're would debate

270
00:30:55,539 --> 00:30:57,692
cascade.the box. Again, make you
component  the side of the

271
00:30:57,693 --> 00:30:59,461
dependinggoing to you're 
cascade. Every to on,  lose

272
00:30:59,462 --> 00:31:04,524
touched on the were able be  
usingacross changes need to and

273
00:31:04,838 --> 00:31:08,001
and the components. be - all the

274
00:31:11,373 --> 00:31:14,917
--  go acrosswas I've 
components. to all the the did

275
00:31:14,918 --> 00:31:17,600
got to saythe it  difficult when
develop innot theDOM.  I most of

276
00:31:17,796 --> 00:31:19,218
really names to my work in 
looking class inspector, and,

277
00:31:19,219 --> 00:31:22,186
you're   using it's you're 
mapping when tell what

278
00:31:22,187 --> 00:31:26,342
elements, difficult Even to know
lookingstiffare at.  you looking

279
00:31:26,679 --> 00:31:29,459
what you're rest styles  at, 
it's to the tell what you're at

280
00:31:29,460 --> 00:31:34,967
in with because theyour jammed 
of  outsidebasisthemselves to

281
00:31:35,367 --> 00:31:36,040
enough, the  elements. 
Interestingly  other code

282
00:31:36,041 --> 00:31:38,695
reconfigure themselves 
components  and inthese don't

283
00:31:38,696 --> 00:31:43,447
lend in placing   use go inline.
because you're directly have to

284
00:31:43,448 --> 00:31:47,338
to  styles
You would hand in order it every

285
00:31:47,465 --> 00:31:52,771
single one by usegood. we found 
eachsomewhere else. And another

286
00:31:53,004 --> 00:31:56,472
where  thing that styles
interesting inline very be of

287
00:31:56,718 --> 00:31:59,014
that performance was not be A 
going to less has to pageful

288
00:31:59,015 --> 00:32:07,143
performant  is stylethan tag 
parsed single a loading itsheet.

289
00:32:08,431 --> 00:32:16,592
and JS 2015, So is CSS hot In
fire. right now. was on  In

290
00:32:16,593 --> 00:32:19,213
2015, there weren't  CSS 
Modules, a lot libraries,

291
00:32:19,214 --> 00:32:24,791
Radium,and of JS wereaside that 
from CSS cons the and had

292
00:32:24,792 --> 00:32:30,051
Many of Aphrodite just come out.
inline JS could - plaguing I

293
00:32:30,543 --> 00:32:34,362
think quite  it's evolved a

294
00:32:39,579 --> 00:32:47,126
think bit. I butgoing 2015 I'm 
represent giant in so  that

295
00:32:47,127 --> 00:32:52,057
So, style and they  libraries, a
leap forward aboutin CSS JS to

296
00:32:52,058 --> 00:32:54,058
talk

297
00:32:55,086 --> 00:32:57,201
today. componentscomponent. You 
same friend our  here we have

298
00:32:57,648 --> 00:33:00,724
So a be
Style together. by putting this

299
00:33:00,725 --> 00:33:03,783
should There's component  way 
we'refamiliar with this now.

300
00:33:03,784 --> 00:33:06,363
difference in weren't the real 
use actually toutilise this

301
00:33:06,364 --> 00:33:11,125
literalscreate components
So, late    tagged tell me and

302
00:33:11,126 --> 00:33:14,414
components. CSSimportingthat   
normal Reactcomponents, as you

303
00:33:14,415 --> 00:33:18,912
we're can able  see, from style 
are  importing styles then we so

304
00:33:19,243 --> 00:33:25,642
we're library, andaround 
construct a wrapper to component

305
00:33:26,232 --> 00:33:30,634
thatwrapper section a styles to 
applies the  class So tag. So

306
00:33:30,635 --> 00:33:32,539
mapped styles. way style.section
in the to those  difference ina

307
00:33:32,540 --> 00:33:38,301
equals a big maps DOM with a 
name that not it's styles.

308
00:33:38,302 --> 00:33:43,631
It is generating you inline 
actually that is handle inline,

309
00:33:43,632 --> 00:33:47,600
it style sheet, actually sothen 
a CSS at   And is that document.

310
00:33:47,987 --> 00:33:50,821
head run styles. time, it your 
name to the loading into the

311
00:33:50,822 --> 00:34:00,116
classsection of the applyinghow 
you folderthe  beand,  component

312
00:34:00,446 --> 00:34:03,133
be So I touch  decision, should 
that team structure your ever

313
00:34:03,134 --> 00:34:08,220
will cases, would a you in most 
say decided beforeI've  example,

314
00:34:08,373 --> 00:34:11,654
component styles. In this it  
actuallypiece, broken broken

315
00:34:11,655 --> 00:34:16,703
that  down even we've each 
further. constructed way down

316
00:34:16,704 --> 00:34:20,684
we've just
Here, the  I'm is each piece

317
00:34:20,685 --> 00:34:23,871
bringing of that render and then
my component. I'm building in

318
00:34:23,872 --> 00:34:28,609
and Here, as entity, one I've 
eachits separate That way, I

319
00:34:28,610 --> 00:34:32,281
file. broken out can index build
use  into mycomponents own

320
00:34:32,282 --> 00:34:36,560
themactually and other and again
areas these over and and

321
00:34:36,561 --> 00:34:38,567
scaleability flexibility over  
Lego allows more of in other

322
00:34:38,812 --> 00:34:44,873
blocks,long-term. You This like 
a bunch  really. can  to around

323
00:34:44,874 --> 00:34:54,400
easily pieces smaller move those
components.construct larger them

324
00:34:54,566 --> 00:34:56,914
think style So I components have
without  a  allow CSS and going

325
00:34:56,915 --> 00:35:00,015
for  and inlot real CSS They
sheets, writeJS libraries

326
00:35:00,016 --> 00:35:04,246
general do. you instead  to
mapping JavaScript style

327
00:35:04,247 --> 00:35:06,943
context-shifting between 
removing that of and it

328
00:35:06,944 --> 00:35:10,845
practices by also CSS the 
enforces the CSS. best and

329
00:35:10,846 --> 00:35:15,769
between HTML independent they're
components, presentational

330
00:35:15,770 --> 00:35:22,947
Because you're purely building
and  small reusable. And

331
00:35:22,948 --> 00:35:25,745
single-use  class
Single-use there names makeclass

332
00:35:25,988 --> 00:35:31,202
go!  make -naming names we with
presentationalcollision. You

333
00:35:31,203 --> 00:35:35,199
your containers and easier your 
no chance of  so out have

334
00:35:35,200 --> 00:35:41,750
components,you're separating 
from yourbasic logic.   has

335
00:35:41,751 --> 00:35:44,231
actually
Style do components support can

336
00:35:44,458 --> 00:35:48,440
really with Theremix-ins. SASS  
so you nesting,  things of

337
00:35:48,441 --> 00:35:54,837
variables, It are a loteven cool
features there. and native

338
00:35:54,838 --> 00:35:57,683
support,  has mobile themed

339
00:36:00,701 --> 00:36:03,021
as an JS approach and means 
support.followed CSS choosing

340
00:36:03,022 --> 00:36:09,488
some a Choosing  are cons. So 
choiceframework, one choice.

341
00:36:09,489 --> 00:36:14,689
another   so there
Glamour, style it's by modules,

342
00:36:14,690 --> 00:36:18,663
CSS there Aphrodite, are many 
components, ofthis andout entire

343
00:36:18,804 --> 00:36:22,397
and at the  flavours CSS takes 
JS  an there, endall of deck I

344
00:36:22,398 --> 00:36:25,031
have a possible resource that 
you to and list of I   the

345
00:36:25,781 --> 00:36:29,858
another CSS which JS the  use
mind, somethingchoices you have.

346
00:36:29,859 --> 00:36:32,801
And is it's yet library to  
things library that think is to

347
00:36:32,802 --> 00:36:36,245
keepto be inmight soquickly, a 
because  needs  change  thing

348
00:36:36,246 --> 00:36:39,624
today relying on that problem 
hot new something it So, on. be

349
00:36:39,625 --> 00:36:48,381
a later also entire the is  
understoodto bythis case team.

350
00:36:48,382 --> 00:36:52,631
complexity solid the And I think
a be made and forstyles

351
00:36:52,632 --> 00:36:56,763
designers teams have a while  
interduces. Many so CSS, be able

352
00:36:56,942 --> 00:37:00,621
in implementing and design and  
patternsutilises in  developer

353
00:37:00,622 --> 00:37:03,704
might to this jump rightthere 
difficultfeel comfortable

354
00:37:03,705 --> 00:37:06,578
because it the JavaScript, so 
much of be what is  others on

355
00:37:06,579 --> 00:37:08,876
already in could for

356
00:37:12,529 --> 00:37:17,762
depends!  team. use? It  Ianswer
So, is:

357
00:37:17,763 --> 00:37:21,068
what should there
I  but think  know there. I

358
00:37:21,069 --> 00:37:23,271
you're looking for the answer. 
onereally aretoday, one really

359
00:37:23,272 --> 00:37:28,053
out is no  There to choices 
question it does depend. need a

360
00:37:28,054 --> 00:37:35,844
lot of  by right Ithink you 
start askingteam? the  on theof

361
00:37:35,845 --> 00:37:39,267
what  questions. What mental a 
model based is models on are

362
00:37:39,268 --> 00:37:42,775
facts. It A about model is 
belief not theknow know  users

363
00:37:42,776 --> 00:37:44,115
think. Whatmisunderstandings  up
mentalperson's they  clear

364
00:37:44,116 --> 00:37:48,068
understanding each users help 
system. And or think can a

365
00:37:48,069 --> 00:37:52,238
styling aproductive mental model
of having so  styling I person

366
00:37:52,239 --> 00:37:55,609
sees that you really  and foster
can each conversations. think

367
00:37:55,610 --> 00:38:02,129
good speak to ideaof how can  
bit better a little theirview on

368
00:38:02,130 --> 00:38:08,328
it help you in those 
conversations.theacknowledge

369
00:38:08,329 --> 00:38:13,249
to  I isalso important  skill 
skill think it of mixturehave

370
00:38:13,250 --> 00:38:16,662
differingimplementing levels on 
a as  the team.  If there is

371
00:38:16,663 --> 00:38:19,943
designers levels, I said, you 
and a lot of not your clarity

372
00:38:19,944 --> 00:38:21,941
can simplicity and  CSS may 
JavaScript,really be comfortable

373
00:38:21,942 --> 00:38:25,515
in then devs,  skilled 
introducing of highly help

374
00:38:25,516 --> 00:38:28,806
everyone stay a group
technologies iftogether. And,

375
00:38:28,807 --> 00:38:35,186
you're pose or new a problem. 
won't complexities of probably

376
00:38:35,187 --> 00:38:40,453
that muchneed you to  What do 
need to of actuallymaking the

377
00:38:40,454 --> 00:38:42,482
industry you sure lot build? 
Make  understand what latest you

378
00:38:42,522 --> 00:38:45,981
There is a our tech is latest to
build. the pressure in whatever

379
00:38:45,982 --> 00:38:47,902
be really know tempting the to 
can framework, And it jump on

380
00:38:47,903 --> 00:38:57,124
language,today. the rounds  
latest technology.before So,

381
00:38:57,125 --> 00:39:00,685
libraries and complex adding for
systemsusability, make styling

382
00:39:00,686 --> 00:39:04,680
there'ssomething  as sure asand 
build  you actually need.

383
00:39:04,681 --> 00:39:09,370
Stamp out simply possible 
possible. How do you as out

384
00:39:09,371 --> 00:39:12,665
start restructure from there. --
simply your as

385
00:39:12,666 --> 00:39:14,763
React
understanding notstructure help

386
00:39:15,010 --> 00:39:18,750
project?that's  is will about - 
you how  you want to your

387
00:39:18,751 --> 00:39:19,672
project Forseparatelycomponents 
determine rest the

388
00:39:19,673 --> 00:39:22,270
Will container style your method
going to work Best   and the

389
00:39:22,271 --> 00:39:24,489
live of styles? Is 
presentational team. to global

390
00:39:24,490 --> 00:39:27,454
components will access kept from
together? the for orhaving to

391
00:39:27,455 --> 00:39:31,758
they becouple   Will you have 
anticipate  need you are athat

392
00:39:31,759 --> 00:39:35,822
somethingyou These so these
styling have?   of

393
00:39:35,823 --> 00:39:37,880
considerations think about 
things before jump into making

394
00:39:37,881 --> 00:39:43,189
that toimportantly, is right 
decision. more Even

395
00:39:43,190 --> 00:39:48,837
environment. I think, create the
requirestechnology.   right to

396
00:39:49,127 --> 00:39:50,215
Building things successfully 
does morerequire than the right

397
00:39:50,216 --> 00:39:52,982
environment. ingredients It 
really are four think   the

398
00:39:52,983 --> 00:39:56,941
First, that happen. I there 
making extreme Taking costs.

399
00:39:56,942 --> 00:40:01,209
positions at all on a subject
avoid dogma  andcreates

400
00:40:02,760 --> 00:40:04,760
conversationsdefensiveness 
before tension trust the don't

401
00:40:04,901 --> 00:40:08,502
youpeople you're  harder if even
get started.  even is really

402
00:40:08,503 --> 00:40:15,028
hard risks it's Taking
Build trust. and to do, it with.

403
00:40:16,279 --> 00:40:21,290
doing  onchange. to
Think push back  and you you

404
00:40:21,291 --> 00:40:24,357
needyou're embrace to instead, 
the yousomething, Whenever  in

405
00:40:24,358 --> 00:40:28,122
feel rememberyou will be friends
you lean many   is surprised at

406
00:40:28,123 --> 00:40:30,614
what  the learn, and you how 
vulnerable. Italong say going to

407
00:40:30,615 --> 00:40:34,898
make  Lastly, be to way. need to
seeand  something, okaybenefit

408
00:40:34,899 --> 00:40:40,966
understandyou don't don't builds
that you  for the honest in it.

409
00:40:40,967 --> 00:40:44,297
Being understanding trust and 
the opportunity for greater

410
00:40:44,583 --> 00:40:49,538
everyone on the team. also And I
-  quotethink it isunderstanding

411
00:40:49,934 --> 00:40:54,131
begin with to this to important 
remember -  and I CSS love

412
00:40:54,132 --> 00:40:58,912
having a thoughtful ofit help 
build Whether do  is going to

413
00:40:58,913 --> 00:41:01,306
you  SASS, or you'regreater 
things. CSS, you CSS what and

414
00:41:01,307 --> 00:41:08,275
using to understanding how very 
JS, isbuilding and it use

415
00:41:13,969 --> 00:41:18,891
important. Thank you. 
[Applause].

416
00:41:28,354 --> 00:41:31,007
>> Thank you so much, Sarrah. I 
think I have just one question

417
00:41:31,008 --> 00:41:38,364
for you. So you mentioned how to
style React components as a

418
00:41:39,823 --> 00:41:45,551
divisive topic, and you 
evaluated the - you evaluated

419
00:41:45,552 --> 00:41:48,953
the pros and cons, but what if 
you have to work with someone

420
00:41:49,518 --> 00:41:52,970
who does not agree with you? How
do you not lose friends that

421
00:41:53,176 --> 00:41:54,453
way!  
>> Not everyone's going to be

422
00:41:54,454 --> 00:41:59,463
your friend, right? At that 
point, you have to agree to

423
00:41:59,824 --> 00:42:03,143
disagree, but commit, so whether
you agree with that decision, or

424
00:42:03,459 --> 00:42:06,217
the other team member agrees 
with that decision, as long as

425
00:42:06,218 --> 00:42:08,696
you all commit to making that 
work and moving forward with it,

426
00:42:09,135 --> 00:42:12,842
it's going to be just fine. It's
all going to work. It's the best

427
00:42:13,399 --> 00:42:15,482
way. 
>> Okay, so just, like first

428
00:42:15,838 --> 00:42:19,017
acknowledge that not everyone 
can be my friend?

429
00:42:19,018 --> 00:42:21,018
>> Yes. 
>> And then commit to my

430
00:42:21,056 --> 00:42:23,056
decision. 
>> Commit to that decision and

431
00:42:23,668 --> 00:42:26,230
keep going with it because 
you'lling going around and

432
00:42:27,687 --> 00:42:29,115
around, refactoring, and it will
be a mess.

433
00:42:29,116 --> 00:42:32,020
>> Thanks a lot, Sarrah. 
>> Thank you. [Applause].

434
00:43:12,509 --> 00:43:16,196
second talk the of small so the
is So we actually have change,

435
00:43:16,197 --> 00:43:21,376
for a minutes. There break for 
eight schedulingtrack a small

436
00:43:23,379 --> 00:43:26,285
originalmoved  otheryou the was 
so slot  cancelled,  talk will

437
00:43:26,286 --> 00:43:31,785
be thiscatch so, if first  to 
totally now, to want to go over

438
00:43:31,786 --> 00:43:35,079
and that's therefine. that 
minutes, talk, here stick  talk

439
00:43:35,344 --> 00:43:39,703
yes, another eight Otherwise,we 
next for  will have the

440
00:43:44,001 --> 00:43:46,001
ready. 
[Break].

441
00:51:23,301 --> 00:51:24,054
>> Hello. So you know like 
>> Hello. So you know like

442
00:51:24,055 --> 00:51:27,626
sometimes when big companies or 
brands say something rely

443
00:51:28,409 --> 00:51:30,716
ridiculous on social media or 
something and people call it

444
00:51:30,717 --> 00:51:34,220
this brand is having a PR 
nightmare? So, for example, just

445
00:51:34,681 --> 00:51:41,402
a few weeks ago, CTQ ran out of 
chickens. So 900 of their stores

446
00:51:42,503 --> 00:51:49,359
in Britain were forced to shut 
down. It was as though the KFC

447
00:51:55,199 --> 00:51:59,888
crisis on Twitter.  
What did KFY make a giant pull

448
00:51:59,889 --> 00:52:04,825
request and the - well, it 
turned out PR nightmare meant

449
00:52:04,826 --> 00:52:09,423
public relation nightmare, not a
pull request nightmare.

450
00:52:09,424 --> 00:52:12,876
Otherwise, they should totally 
tune in next to listen to the

451
00:52:13,217 --> 00:52:17,659
next talk where we have 
Catherine Meade teaching us not

452
00:52:18,071 --> 00:52:21,324
how to have pull request 
nightmares. Catherine works at

453
00:52:21,805 --> 00:52:24,951
Sparkbox. She has a strong 
passion for education, she

454
00:52:25,450 --> 00:52:29,551
expense a lot - she spends her 
free time volunteering and

455
00:52:29,552 --> 00:52:36,777
teaching with girl development. 
Her other hobbies include

456
00:52:37,055 --> 00:52:39,410
reading, table top games and cat
jokes!

457
00:52:53,336 --> 00:52:55,324
[Applause].  
>> The first letter on this

458
00:52:55,325 --> 00:52:57,814
repository link here is D. I 
will share is it again. I

459
00:52:58,035 --> 00:53:00,035
tweeted it

460
00:53:02,308 --> 00:53:07,315
[Applause].   out. My name is 
I'm a full stack developer. I

461
00:53:07,316 --> 00:53:11,855
use her/she pronouns. We have 
about 40 people working at

462
00:53:12,200 --> 00:53:16,739
Sparkbox. I spend most of my 
time working on an enterprise

463
00:53:16,740 --> 00:53:19,221
level design system you can ask 
me about later. Today, I'm going

464
00:53:19,472 --> 00:53:22,455
to share with you a few tools 
and techniques to make your pull

465
00:53:23,032 --> 00:53:25,382
requests more effective and more
collaborative. Because of time,

466
00:53:25,383 --> 00:53:29,759
I hope to do a quick summary of 
a few tools, and you can Google

467
00:53:29,760 --> 00:53:31,760
them later after the

468
00:53:33,658 --> 00:53:37,980
event. Most are not GitHub 
exclusive. I know there is at

469
00:53:37,981 --> 00:53:42,271
least one GitHub person. 
Hopefully, like you still find

470
00:53:42,272 --> 00:53:47,763
something even if GitHub is not 
your main technology. I should

471
00:53:47,764 --> 00:53:52,570
share a bit about context and 
how Supportingbox does code

472
00:53:52,571 --> 00:53:55,818
reviews.
We store nearly all of our code

473
00:53:57,353 --> 00:54:01,154
on GitHub. We used shared 
repositories dedicated to

474
00:54:01,790 --> 00:54:03,795
whatever engagement we are 
working on. Developers have -

475
00:54:04,407 --> 00:54:07,358
whenever developers have new 
code to add to the project, they

476
00:54:07,684 --> 00:54:09,684
ask another developer for code 
review of the

477
00:54:13,569 --> 00:54:17,527
pull request. I've come up with 
six rules that Sparkbox adheres

478
00:54:17,528 --> 00:54:22,801
to. I came up with these rules. 
So, I do not represent the

479
00:54:22,802 --> 00:54:24,802
thoughts and ideas of

480
00:54:29,011 --> 00:54:31,246
my employer. Rule number one is 
no-one merges their own

481
00:54:35,172 --> 00:54:39,508
close. One developer is writing 
emerging piece for a website.

482
00:54:40,020 --> 00:54:42,620
Last year, we had a client who 
wanted an additional full-time

483
00:54:42,621 --> 00:54:44,918
developer for the project but 
they would be the only developer

484
00:54:45,209 --> 00:54:48,250
on that project. We offered 
instead two developers at half

485
00:54:48,461 --> 00:54:50,461
time. Having a reviewer is that

486
00:54:55,452 --> 00:54:57,526
important to us. The second rule
is never push directly to

487
00:54:58,020 --> 00:55:01,356
master. It is the easiest way to
break everything. Requiring code

488
00:55:02,396 --> 00:55:07,037
review reinforces the quality 
that comes value as the company.

489
00:55:07,413 --> 00:55:12,037
Third rule:  if you're working 
with UI, get a design review. We

490
00:55:12,357 --> 00:55:15,919
have a position called a 
front-end designer. Every

491
00:55:16,197 --> 00:55:19,680
project we design, this special 
designer will often write for an

492
00:55:20,067 --> 00:55:23,470
end code so they may use some 
CSS but not every company has

493
00:55:26,954 --> 00:55:29,856
designers who knows how to code,
and nor should they. If you're

494
00:55:30,495 --> 00:55:32,495
working on copy, get a

495
00:55:36,536 --> 00:55:39,837
copy review. This is usually the
project manager or the client

496
00:55:40,175 --> 00:55:42,175
themselves. We have an 
integrated development process,

497
00:55:42,776 --> 00:55:46,703
so the clients usually have 
access to the repositories we're

498
00:55:46,704 --> 00:55:50,754
working on. Rule number 5 is 
never, ever push directly to

499
00:55:50,959 --> 00:55:52,959
master. Again, unless you

500
00:55:55,952 --> 00:55:59,749
messed up. Which, if you did, 
find a Buddy to pair with, which

501
00:56:00,163 --> 00:56:03,908
leads me to rule number of 6, 
these rules are more like

502
00:56:03,909 --> 00:56:06,162
guidelines. 
If you follow these six rules it

503
00:56:06,163 --> 00:56:11,015
ensures that we follow the basic
Sparkbox creed which is working

504
00:56:11,317 --> 00:56:14,742
together for a web bit right. If
every piece of code has at least

505
00:56:14,743 --> 00:56:17,888
two people contributing to it, 
we often catch mistakes before

506
00:56:18,165 --> 00:56:22,497
they happen. All of that is 
context for about what I'm about

507
00:56:22,671 --> 00:56:25,757
to talk about. It may be 
different for you in your

508
00:56:26,078 --> 00:56:29,035
company; it's just how we like 
to work. I'm not telling you how

509
00:56:29,557 --> 00:56:31,557
you should do code

510
00:56:34,223 --> 00:56:36,549
reviews. Some challenges of 
collaboration are getting a PR

511
00:56:36,550 --> 00:56:42,840
from a non-coder, or or a PR 
review from someone in a

512
00:56:42,841 --> 00:56:46,098
different time zone. It's not 
that easy. Working with

513
00:56:46,503 --> 00:56:49,765
developers who may be only doing
reviews on your project

514
00:56:52,897 --> 00:56:58,424
or working with people who are 
assigned directly to PR review

515
00:56:58,620 --> 00:57:04,606
and nothing else. So, how do we 
improve these things? So I'm

516
00:57:04,607 --> 00:57:07,796
going to give you six steps, I 
think. I guess I like the number

517
00:57:08,498 --> 00:57:13,712
6!  Tip number 1:  write good 
stories. Two, ensure good pull

518
00:57:14,148 --> 00:57:16,148
requests. We have to write good

519
00:57:18,169 --> 00:57:24,694
issues. At Sparkbox,ee use 
Trello to organise engagements,

520
00:57:25,206 --> 00:57:28,895
usually with something like Scrm
which involves creating stories

521
00:57:28,896 --> 00:57:33,608
which is a GitHub issue 
representing a bite-sized chunk

522
00:57:33,609 --> 00:57:37,123
of work. Stories should include 
the requirements of the work,

523
00:57:37,124 --> 00:57:40,789
and potentially a solution if 
you have one in mind. A story or

524
00:57:41,004 --> 00:57:44,296
issue doesn't need to be overly 
complicated but it should be

525
00:57:44,297 --> 00:57:48,140
easy to understand. A 
well-written story makes for

526
00:57:48,141 --> 00:57:50,864
clear requirements when it comes
time to do a PR, and this leads

527
00:57:51,526 --> 00:57:56,333
you to my very first 
recommendation:  the only one

528
00:57:56,643 --> 00:57:59,132
GitHub exclusive but I'm sure 
there's one similar on the other

529
00:57:59,724 --> 00:58:03,267
technologies. For reference in 
the photo, this is my co-worker

530
00:58:03,268 --> 00:58:06,259
Austin who is a project manager 
explaining that this footer is

531
00:58:06,260 --> 00:58:10,160
not great so maybe we can use 
some of the other colours

532
00:58:10,776 --> 00:58:16,731
instead. So GitHub issue and 
GitHub issue templates and PR

533
00:58:17,071 --> 00:58:19,633
templates allow you to add a 
markdown file to the root

534
00:58:19,634 --> 00:58:22,915
directory to outline the issue 
process. I will share this link

535
00:58:23,645 --> 00:58:26,119
again in a minute. This is an 
issue template. Here is my

536
00:58:26,531 --> 00:58:28,607
markdown. It is included

537
00:58:35,589 --> 00:58:37,634
directly in my project. In 
addition to adding the template

538
00:58:38,062 --> 00:58:42,218
file to the root of your 
template, you can add a GitHub

539
00:58:42,219 --> 00:58:45,692
directory. PR templates work in 
the same way but have a

540
00:58:46,103 --> 00:58:48,581
different file name and they 
come up with you do a PR instead

541
00:58:48,778 --> 00:58:53,101
of an issue. So here is the 
issue template on GitHub. When I

542
00:58:53,102 --> 00:58:57,134
click the new issue button, the 
text field pop lays with the

543
00:58:57,564 --> 00:58:59,728
contents of the template file 
and the example files are stored

544
00:59:00,702 --> 00:59:05,172
in the repo I linked at the 
begin. I will link it again, I

545
00:59:05,563 --> 00:59:07,563
think.  If you want to take a

546
00:59:09,972 --> 00:59:12,107
closer look. Talk with your 
project team to decide what you

547
00:59:12,586 --> 00:59:16,393
should put into a template. Mine
is just an example. It is a very

548
00:59:18,306 --> 00:59:21,711
flat example. A checklist is 
nice. There is that link again.

549
00:59:21,712 --> 00:59:23,712
I will give you about 30

550
00:59:28,726 --> 00:59:32,075
seconds. Tip number 2 is to get 
the basics right. A good way to

551
00:59:32,624 --> 00:59:34,925
frustrate your pull request 
reviewer is to send them

552
00:59:35,096 --> 00:59:37,096
something with absolutely

553
00:59:38,466 --> 00:59:41,682
no context. You could respond in
kind. These are

554
00:59:46,477 --> 00:59:49,410
real PRs. But but a few extra 
minutes to write a thoughtful PR

555
00:59:49,850 --> 00:59:53,463
description can go a long way 
towards easing the work of the

556
00:59:53,464 --> 00:59:59,699
reviewer. We try to include a 
quick summary of the work being

557
00:59:59,700 --> 01:00:01,700
done, usually matching your 
commit

558
01:00:04,223 --> 01:00:07,333
descriptions. Link to any GitHub
issues or stories, especially if

559
01:00:07,717 --> 01:00:15,297
you're using something like 
sudden hub, Giraffe or Agile. A

560
01:00:15,574 --> 01:00:19,155
link or screen shot of the 
original design work if you're

561
01:00:19,156 --> 01:00:23,820
working in UI. I love screen 
shots, so they don't have to

562
01:00:24,465 --> 01:00:27,567
open up zeppelin every time I'm 
looking at something. Step by

563
01:00:28,046 --> 01:00:30,875
step instructions including how 
to run the lint or how to run

564
01:00:31,424 --> 01:00:34,536
the tests, how to navigate to 
any new work, how specifically

565
01:00:34,537 --> 01:00:38,768
your new work is meant to 
function. So here's that PR

566
01:00:40,516 --> 01:00:43,995
example again. My other 
co-worker, Bryan, he has hit a

567
01:00:45,789 --> 01:00:48,810
number of these tips. They 
should be written in the context

568
01:00:49,178 --> 01:00:52,066
of the developer reviewing the 
work. For example, a PR to a

569
01:00:52,067 --> 01:00:56,957
developer who is only doing 
review or QA may look completely

570
01:00:56,958 --> 01:01:00,489
different to the one who wrote 
the build process. All right.

571
01:01:01,641 --> 01:01:07,376
Next strip:  enhance your pull 
requests about gif. This is my

572
01:01:07,877 --> 01:01:11,936
favourite gif because the cat 
and coding, my name is Cat and

573
01:01:12,111 --> 01:01:17,979
I'm a coder, so it's me. I hope 
you like that joke. It's my own

574
01:01:18,790 --> 01:01:22,803
one!  So what if a gif can be 
more than a quick laugh? They're

575
01:01:22,804 --> 01:01:26,846
awesome for showing functional, 
transitions, hover effects,

576
01:01:27,060 --> 01:01:30,567
animations, so pretty much any 
visual aspect of your work. We

577
01:01:30,923 --> 01:01:33,508
are a front-end shop, can you 
tell!  They're good for getting

578
01:01:34,294 --> 01:01:36,294
a signed review of

579
01:01:39,847 --> 01:01:46,264
an animation for someone running
a site not locally. There is the

580
01:01:46,265 --> 01:01:49,991
link. 
Recordit is a screen casting

581
01:01:50,418 --> 01:01:52,418
service and gives you a hosting

582
01:01:57,494 --> 01:02:01,037
link. The CMS that the foundry 
is built upon is a big skill to

583
01:02:01,038 --> 01:02:04,129
set up. It may take a full day, 
especially if it is for a

584
01:02:04,439 --> 01:02:06,904
designer or project manager who 
is trying to review one or two

585
01:02:07,335 --> 01:02:11,294
lines of code or content. By 
including a gif, you may give

586
01:02:11,653 --> 01:02:15,340
the necessary context and allow 
everyone to feel confident in

587
01:02:15,341 --> 01:02:18,253
what they're approving. This is 
a gif I made of some

588
01:02:22,909 --> 01:02:26,156
functionality. Here's the link 
to record it again. It doesn't

589
01:02:26,661 --> 01:02:32,044
currently support HTPPS. It 
means as you know, it can't be

590
01:02:32,351 --> 01:02:35,419
embedded directly into a PR on 
GitHub. It can still be sent as

591
01:02:35,951 --> 01:02:40,643
a Slack link or as an email or 
whatever. An alternative, I

592
01:02:42,172 --> 01:02:44,172
recently discovered

593
01:02:47,833 --> 01:02:49,897
gifox. 
Hosting on GitHub gives you the

594
01:02:50,185 --> 01:02:53,817
full security of your 
repository, so you're not

595
01:02:54,183 --> 01:02:56,183
violating your security 
policies. It

596
01:02:58,729 --> 01:03:00,729
does cost $5. This

597
01:03:02,478 --> 01:03:06,441
one is really off. It is 
including in Setapp, and I think

598
01:03:06,839 --> 01:03:10,351
this one only works on Mac but 
there are a lot of different

599
01:03:10,868 --> 01:03:14,068
tools out there. It is the 
thought that counts. Right. The

600
01:03:14,803 --> 01:03:18,504
next one is enhancing your pull 
requests with video. An

601
01:03:18,725 --> 01:03:21,751
important aspect of a 
complicated PR is the ability to

602
01:03:22,219 --> 01:03:25,643
walk someone through your code. 
The current devs are often

603
01:03:25,856 --> 01:03:29,536
distributed or remote. We work 
in different time zone.

604
01:03:29,537 --> 01:03:31,537
Sometimes, it's nearly 
impossible to schedule the 30

605
01:03:31,786 --> 01:03:34,257
minutes to step through your PR.
Here's

606
01:03:38,060 --> 01:03:42,851
the tool. It's GoVideo. 
This used to be called Viewed

607
01:03:43,302 --> 01:03:46,349
It. They changed it right after 
I wrote my talk, so I had to

608
01:03:47,425 --> 01:03:53,744
change it!  GoVideo is a Chrome 
extension. Not everyone is a fan

609
01:03:54,475 --> 01:03:56,475
of chrome -- hello,

610
01:03:59,472 --> 01:04:02,021
Mozilla!  
GoVideo let's people score their

611
01:04:02,403 --> 01:04:06,287
screen and voice all at once. We
used a video like this on

612
01:04:06,487 --> 01:04:09,421
engagement where the main 
reviewer - me - was not

613
01:04:09,761 --> 01:04:12,212
dedicated to the project 
full-time. Because I was not

614
01:04:13,218 --> 01:04:14,996
available for stand-ups, I 
didn't have a direct hand in

615
01:04:14,997 --> 01:04:17,699
building the website, and I 
wasn't familiar with the changes

616
01:04:18,399 --> 01:04:25,079
being reviewed. The dev had to 
change every - GoVideo is my

617
01:04:25,422 --> 01:04:28,915
favourite way to start a code 
review. Hopefully, it works. I

618
01:04:28,916 --> 01:04:33,339
keep meaning to rerecord this. 
But people tell me that the

619
01:04:33,340 --> 01:04:35,340
awkwardness is endearing. So 
just go with

620
01:04:45,051 --> 01:04:47,051
it!  Can you hear that? You 
can't

621
01:04:54,929 --> 01:04:58,242
hear that. Oh.  
There's an audio cable. I should

622
01:04:58,243 --> 01:05:03,425
have told you, huh!  [Laughter].
It is like, yeah. All right.

623
01:05:11,089 --> 01:05:14,645
[Video]:  this is Go Video. It 
records my entire screen plus a

624
01:05:14,646 --> 01:05:20,977
little me down not corn year. I 
think it's super friendly for

625
01:05:20,978 --> 01:05:24,833
doing video walk throughs of 
pull requests. Here you can see

626
01:05:24,834 --> 01:05:30,946
that I'm on a pull request and I
can go into my file changes, I

627
01:05:31,387 --> 01:05:38,805
can look at the code, I can 
explain this haskell 3M to

628
01:05:39,000 --> 01:05:42,860
Sparkbox home page. It hopefully
fixes an issue. I hope you like

629
01:05:43,485 --> 01:05:46,782
it. Please merge it. Obviously, 
I did merge it, because this is

630
01:05:47,053 --> 01:05:50,606
me. And then, when you are done 
recording your video, you can go

631
01:05:52,134 --> 01:05:56,351
on to a screen. One shows up 
like this. You can see that you

632
01:05:56,352 --> 01:05:58,352
can change your

633
01:06:00,021 --> 01:06:02,360
title like ... 
you had try it some

634
01:06:07,831 --> 01:06:11,360
time. You can change your 
thumbnail, stroke through

635
01:06:11,361 --> 01:06:14,427
contents, and, when you're done,
you get a link right here. And

636
01:06:14,428 --> 01:06:20,386
that link is HTPPS, so you can 
embed it directly into your pull

637
01:06:20,865 --> 01:06:24,375
request, and whoever wants to 
review your code gets a nice

638
01:06:24,376 --> 01:06:29,420
friendly walk-through, and that 
doesn't matter about time zones

639
01:06:29,421 --> 01:06:31,421
over anything

640
01:06:32,935 --> 01:06:34,935
like that. 
>>

641
01:06:36,586 --> 01:06:40,379
Good. Thanks. That's really 
encouraging. [Applause].  So

642
01:06:40,380 --> 01:06:44,495
here's the link again. Depending
on the size of your PR, a

643
01:06:45,785 --> 01:06:47,835
walk-through video only adds 
about five or ten minutes total

644
01:06:48,098 --> 01:06:51,557
to our set-up time but it can 
potentially save the 30 to 60

645
01:06:52,574 --> 01:06:59,549
minutes to explain your PR via 
Slack or email or scheduling a

646
01:07:01,322 --> 01:07:04,305
Zoom meeting. This is useful in 
pairing developers who have

647
01:07:04,785 --> 01:07:07,600
different schedules, who are 
remote, or not as familiar on

648
01:07:07,601 --> 01:07:11,715
the engagement you're working 
on.  Two more tips:  give

649
01:07:13,387 --> 01:07:19,909
valuable feedback. Skitch is a 
free app from Everynote. It's

650
01:07:20,402 --> 01:07:24,412
the - evernote. It's loved by 
Sparkbox for everything from

651
01:07:24,413 --> 01:07:30,007
full-page decoms to quick design
edit to making memes of your

652
01:07:30,540 --> 01:07:35,511
co-workers. I use it daily. 
Here's an example. It provides

653
01:07:35,914 --> 01:07:39,938
elegant mark-up tools for boxes,
arrows, highlighting any

654
01:07:40,869 --> 01:07:43,269
unnecessary changes. You can 
take a screen shot and have

655
01:07:46,401 --> 01:07:50,486
it. 
Shift command 4 on a Mac!  Here

656
01:07:51,119 --> 01:07:53,257
are some real-world examples. I 
pulled these directly out of

657
01:08:01,622 --> 01:08:04,233
Slack. This is the best joke on 
my slide, and it's not even

658
01:08:12,471 --> 01:08:16,404
mine!  You can Google Skitch. It
works well in the opposite

659
01:08:17,500 --> 01:08:21,731
direction of Recordit. It's an 
easy way for designers to work

660
01:08:22,213 --> 01:08:25,042
with developers, make this 
bigger, reduce the spates here,

661
01:08:25,043 --> 01:08:29,140
delete this link. It provides 
visual feedback for visual

662
01:08:30,343 --> 01:08:35,728
thinkers. Right. Last one. One 
last way to make your PRs

663
01:08:36,037 --> 01:08:40,614
friendlier is to be friendly. 
Via GitHub comments, it's no way

664
01:08:40,976 --> 01:08:47,502
to collaborate. We know that 
communication is difficult in

665
01:08:47,922 --> 01:08:52,417
text which is why we invented 
the emoji. Bryan who wrote the

666
01:08:53,259 --> 01:08:57,096
awesome PR earlier also wrote an
article about this topic called

667
01:08:57,503 --> 01:09:02,939
stop giving depressing code 
reviews. The idea is to give as

668
01:09:03,249 --> 01:09:07,132
much positive code feedback as 
you do correction. It is hard if

669
01:09:07,450 --> 01:09:10,415
you just go through and see the 
negative, and you don't offer

670
01:09:11,059 --> 01:09:15,458
any positive comments. You can 
do it. So, this is a picture of

671
01:09:16,432 --> 01:09:20,355
Bryan. He knows I'm including 
it!  And instead of really going

672
01:09:20,356 --> 01:09:23,604
to this topic, I'm going to read
you this quote:

673
01:09:23,605 --> 01:09:26,611
"Giving positive feedback is an 
easy habit to adopt. You're

674
01:09:26,931 --> 01:09:29,449
already reading through the 
lines of code looking for

675
01:09:29,997 --> 01:09:33,910
issues. It doesn't take much 
time to throw in a nice or a

676
01:09:33,911 --> 01:09:37,359
looks great. You see something 
awesome, say it. So the link to

677
01:09:37,612 --> 01:09:43,745
the full article is there, but a
few positive comments make a

678
01:09:43,746 --> 01:09:46,523
huge difference" whether you're 
speaking with designers,

679
01:09:48,278 --> 01:09:52,324
developers, other team 
contributes, clients, which are

680
01:09:52,325 --> 01:09:55,607
really important. Yes, be nice. 
And that's what I have.

681
01:09:55,608 --> 01:09:58,863
Hopefully, at least one of these
tools can make the PR experience

682
01:09:59,476 --> 01:10:03,164
more accessible for your entire 
team and not just the

683
01:10:03,684 --> 01:10:07,692
developers. With a healthy dose 
of empathy, we can improve the

684
01:10:08,130 --> 01:10:14,289
way our co-workers and us write,
and make better websites. If you

685
01:10:14,773 --> 01:10:18,610
want to hear more about Sparkbox
as the design system I'm

686
01:10:19,032 --> 01:10:23,799
building, come and find me. I 
have decals up here at the front

687
01:10:24,177 --> 01:10:26,244
desk, and that's it. [Applause].

688
01:10:39,696 --> 01:10:41,500
>> I'm going to make everyone on
board to watch this talk!  That

689
01:10:41,501 --> 01:10:46,278
was really, really good. One 
question:  if you were to make a

690
01:10:47,001 --> 01:10:48,776
large feature and you know it's 
>> I'm going to make everyone on

691
01:10:48,777 --> 01:10:52,147
board togoing to be big, at what
point do you open up a PR? What

692
01:10:52,148 --> 01:10:54,851
do you think of work in 
progress?

693
01:10:54,852 --> 01:10:59,588
>> I love work-in-progress PRs. 
The minute I have a commit, I

694
01:10:59,589 --> 01:11:04,202
hope a PR so people can see my 
work in progress. We have a

695
01:11:04,762 --> 01:11:10,294
work-in progress label we throw 
on there. Iive whip comments as

696
01:11:10,574 --> 01:11:12,657
well. If I that I can a change 
to a large body of work, I'm

697
01:11:12,658 --> 01:11:17,422
going to write a blog post about
this stuff in the next few

698
01:11:17,911 --> 01:11:21,000
months. If I make changes to 
what people have reviewed, I

699
01:11:21,254 --> 01:11:23,970
like to use a web commit and 
squish them down at the end but

700
01:11:24,215 --> 01:11:27,049
it makes it easy to track with 
changes.

701
01:11:27,050 --> 01:11:36,993
>> I absolutely agree. I'm also 
a work-in-progress. A round of

702
01:11:37,663 --> 01:11:41,291
applause for Catherine!  
[Applause].  I think we're a

703
01:11:42,700 --> 01:11:48,880
little bit early, so we have a 
good 20-minute break. You can

704
01:11:48,881 --> 01:11:51,780
the washroom, refreshments, or 
what-not. We will be back here

705
01:11:52,679 --> 01:11:54,679
at

706
01:20:54,274 --> 01:20:56,274
.

707
01:21:14,036 --> 01:21:14,779
.

708
01:21:14,780 --> 01:21:15,517
.

709
01:21:15,518 --> 01:21:16,260
.

710
01:21:16,261 --> 01:21:17,035
.

711
01:21:17,036 --> 01:21:19,036


712
01:33:48,855 --> 01:33:50,855
Houdini was the?

713
01:33:56,171 --> 01:34:02,240
Who Harry Houdini was? He was a 
Hawk fairan-born American

714
01:34:02,241 --> 01:34:04,796
magician, noted for his 
sensational escape acts. His

715
01:34:04,797 --> 01:34:09,622
first attracted - he first 
attracted notice as Harry

716
01:34:09,623 --> 01:34:12,647
Handcuffed Houdini on a tour of 
Europe where he challenged

717
01:34:13,025 --> 01:34:15,729
police forces to keep him locked
up. Soon he extended his

718
01:34:16,095 --> 01:34:18,095
repertoire to include

719
01:34:19,827 --> 01:34:25,176
chains, from skyscrapers, 
straight impacts under quart, is

720
01:34:25,688 --> 01:34:30,399
the traitjakets under water. 
What does that have to do with

721
01:34:30,400 --> 01:34:32,384
the next talk? Absolutely 
nothing!

722
01:34:32,385 --> 01:34:36,402
Aside from the fact that it is 
about CSS Houdini, and I do not

723
01:34:36,403 --> 01:34:39,327
know anything about it, so I'm 
rambling and reading

724
01:34:42,651 --> 01:34:44,651
Wikipedia

725
01:34:49,531 --> 01:34:53,313
article. Our next speaker is 
hailing from New Delhi in India.

726
01:34:53,502 --> 01:35:01,242
Arun Michael Dsouza is currently
working at Pushup on various

727
01:35:01,919 --> 01:35:04,299
related technology and products.
He's an open-source enthusiast

728
01:35:04,975 --> 01:35:06,975
and has released several

729
01:35:08,807 --> 01:35:13,574
utilities and libraries for 
Angular JS, SASS, et cetera.

730
01:35:13,575 --> 01:35:16,361
Let's hear everyone talk about 
CSS Houdini!  [Applause].

731
01:35:26,337 --> 01:35:32,608
>> Thank you so much. I hope I'm
audible to everyone? Okay, so,

732
01:35:32,609 --> 01:35:39,869
let's start. So, yes, about me: 
my name is Arun. I've come all

733
01:35:39,870 --> 01:35:43,998
the way from New Delhi in India.
I work as a software engineer by

734
01:35:44,360 --> 01:35:46,360
profession. Mostly work with web

735
01:35:49,096 --> 01:35:53,257
technologies, full stack 
JavaScript, exact. I'm an

736
01:35:54,549 --> 01:35:56,754
open-source enthusiast, released
several projects, and, you

737
01:36:00,342 --> 01:36:05,042
know, other projects including 
node projects, some Angular

738
01:36:05,043 --> 01:36:10,897
projects, SASS, CSS, and all 
that stuff.

739
01:36:10,898 --> 01:36:17,270
I'm currently working at an ad 
technical company out of New

740
01:36:18,161 --> 01:36:21,695
Delhi, helping web publishers 
optimise their revenues through

741
01:36:22,357 --> 01:36:25,349
advanced testing, as well as 
demand optimisation. If you want

742
01:36:25,700 --> 01:36:28,276
to know more about us, you can 
check out our

743
01:36:34,187 --> 01:36:39,732
website. So, about Houdini. What
is it, and why is it so

744
01:36:39,733 --> 01:36:44,052
important to talk about? 
Before we understand what

745
01:36:44,839 --> 01:36:47,245
Houdini is, we need to 
understand the history behind

746
01:36:47,789 --> 01:36:51,283
it, which led to the creation of
Houdini. Of course, as

747
01:36:51,284 --> 01:36:55,822
developers, how does that help 
us? I must mention that this is

748
01:36:56,212 --> 01:36:59,692
going to be a bit of a technical
talk, so we will be seeing a lot

749
01:36:59,864 --> 01:37:05,319
of code here. But before we get,
I want to know how many guys

750
01:37:05,687 --> 01:37:08,048
have heard about Houdini or 
maybe have experimented with

751
01:37:11,796 --> 01:37:15,188
Houdini before? Okay. A few 
people. That's great. You guys

752
01:37:15,935 --> 01:37:18,429
might be wondering why I'm 
talking about CSS in a

753
01:37:18,959 --> 01:37:21,528
JavaScript conference, right? It
doesn't make any sense. If you

754
01:37:21,529 --> 01:37:28,540
look at it, Houdini is not just 
about CSS or writing better UI,

755
01:37:28,925 --> 01:37:32,623
it is more about its connection 
with JavaScript that makes

756
01:37:33,887 --> 01:37:36,859
extending and developing not 
just CSS but the complete

757
01:37:37,067 --> 01:37:41,676
experience, and we will get to 
it. First, let's travel back to

758
01:37:43,686 --> 01:37:47,415
1994 when the W3C was formed. 
More and more people are getting

759
01:37:47,899 --> 01:37:51,715
involved with the World Wide 
Web, and as they did, they

760
01:37:51,716 --> 01:37:57,021
started bringing in new ideas, 
suggestions and feedback. And

761
01:37:57,716 --> 01:38:02,817
within a year or two, JavaScript
and CSS were released. The web

762
01:38:02,818 --> 01:38:09,031
seemed to be growing at an 
extremely rapid pace, and the

763
01:38:09,032 --> 01:38:11,563
feedback cycle in place, there 
was the need to keep the process

764
01:38:11,564 --> 01:38:16,609
stable. So the W3C was 
performed. Its job s to to

765
01:38:18,580 --> 01:38:20,580
ensure that the web was built on

766
01:38:22,889 --> 01:38:27,395
open standards. A lot of things 
happened between 1995 to 2007.

767
01:38:27,396 --> 01:38:31,919
The DOM was introduced. Ajax 
came into play, and made

768
01:38:31,920 --> 01:38:35,859
possible the development of 
truly asynchronous applications,

769
01:38:36,705 --> 01:38:43,420
and, of course, proper web 2.0. 
Development started awaiting

770
01:38:43,934 --> 01:38:46,169
their own solutions for common 
problems, you know, in the form

771
01:38:46,170 --> 01:38:54,299
of small tools and libraries, 
made the famous library by John,

772
01:38:54,550 --> 01:39:02,514
and then in 2010, Sharpe 
introduced the idea of ...

773
01:39:02,515 --> 01:39:05,257
levels. The whole game was 
shifting and backwards

774
01:39:05,965 --> 01:39:08,146
compatibility has been a huge 
deal for us, so keeping that in

775
01:39:08,534 --> 01:39:14,352
mind, developers starting using 
and developing levels. As the

776
01:39:14,353 --> 01:39:20,719
web grew further, there was sort
of a feeling of dissatisfaction

777
01:39:20,720 --> 01:39:24,456
or a disconnect between the 
community on how these web

778
01:39:24,888 --> 01:39:27,470
standard committees were 
creating and prioritising new

779
01:39:29,382 --> 01:39:32,759
features. So, that's what led to
the creation of the

780
01:39:35,957 --> 01:39:41,979
ostensible web manifesto. It 
aims at creating this feedback -

781
01:39:42,663 --> 01:39:46,334
virtues feedback cycle with 
developers having the ability to

782
01:39:47,547 --> 01:39:51,283
experiment and Polyfill 
standards so they can test

783
01:39:51,284 --> 01:39:54,812
implementation and gain insight 
out of it. This movement started

784
01:39:57,410 --> 01:40:01,155
by some of the most notable 
members of the community, Alex

785
01:40:01,156 --> 01:40:05,919
Russell, Bryan Carlisle, and 
many other people.

786
01:40:05,920 --> 01:40:08,529
And for the first couple of 
years, the standard bodies have

787
01:40:09,009 --> 01:40:15,109
been worked really hard on 
working on projects, providing

788
01:40:15,599 --> 01:40:19,557
early access to features, 
building transpilers, and in

789
01:40:19,558 --> 01:40:22,069
general, giving developers the 
freedom to build and to build

790
01:40:22,806 --> 01:40:26,570
new proposals and 
specifications. And obviously,

791
01:40:26,571 --> 01:40:31,338
in order to do this, 
environments need to understand

792
01:40:31,902 --> 01:40:34,168
the - developers need to 
understand the underlying magic

793
01:40:34,448 --> 01:40:37,086
of the underlying browser 
features, because if you look at

794
01:40:37,087 --> 01:40:41,745
it, most of the web is high 
level, and it's extremely hard

795
01:40:41,746 --> 01:40:48,886
to Polyfill or test new features
out. And that's why the

796
01:40:49,669 --> 01:40:51,669
ostensible web manifesto also 
argues that the standard bodies

797
01:40:51,874 --> 01:40:55,674
should also expose and explain 
the underlying platform

798
01:40:56,124 --> 01:40:59,093
features, or the low-level 
capabilities of the platform.

799
01:40:59,690 --> 01:41:01,774
This obviously leads to quicker 
feedback by the community and

800
01:41:03,371 --> 01:41:06,709
new APIs and features, and 
quicker bug fixes, improvements,

801
01:41:06,983 --> 01:41:13,324
and overall streamlining of the 
standardisation process. Now,

802
01:41:14,555 --> 01:41:20,206
taking this further, what if we 
were to Polyfill a new script

803
01:41:21,209 --> 01:41:25,207
feature? Can we do that? Of 
course we can, right. How many

804
01:41:25,621 --> 01:41:29,334
have been using the latest 
browser features since Year 6

805
01:41:29,811 --> 01:41:33,291
came out? Gentlemen, exactly. A 
lot of people. That's how

806
01:41:33,609 --> 01:41:35,609
flexible things have become.

807
01:41:39,096 --> 01:41:42,880
Instead of waiting for browser 
vendors to implement you in

808
01:41:43,895 --> 01:41:46,991
features, developers can make 
and experiment with the latest

809
01:41:47,880 --> 01:41:51,548
features. But what if you were 
to Polyfill may be a new CSS

810
01:41:52,291 --> 01:41:57,466
layout, or maybe a new fill 
type? Can we do that? Well, not

811
01:41:59,548 --> 01:42:02,048
really, because producers don't 
understand how to extend to CSS.

812
01:42:02,281 --> 01:42:08,999
I mean, we cannot simply define 
a new display, or a new fill

813
01:42:09,000 --> 01:42:11,996
type because all unknown values 
are discarded by the CSS engine.

814
01:42:12,209 --> 01:42:18,955
That's the main problem. So 
where is the underlying CSS

815
01:42:20,646 --> 01:42:25,141
magic? It's all here in front of
us. In order to fix this

816
01:42:26,931 --> 01:42:30,902
disconnect, between the 
extensible web guidelines and

817
01:42:30,903 --> 01:42:35,647
the ability of CSS itself, W3C 
have formed this sort of a joint

818
01:42:35,963 --> 01:42:38,092
task-force, and this task-force 
is codenamed

819
01:42:42,807 --> 01:42:47,342
Houdini. It's named after one of
the most magicians of all time,

820
01:42:47,343 --> 01:42:52,335
Mr Harry Houdini. 
The aim is to expose the

821
01:42:52,859 --> 01:42:54,610
rendering engine internals to 
developers so that they can

822
01:42:54,611 --> 01:43:00,337
extend it and create better user
experiences. So Houdini will

823
01:43:00,905 --> 01:43:04,863
help in explaining and exposing 
the magic of layout and styling

824
01:43:05,059 --> 01:43:09,195
done by the CSS engine, so we 
will be able to hook into the

825
01:43:09,534 --> 01:43:11,750
processes in the rendering 
pipeline, and be able to do all

826
01:43:11,917 --> 01:43:16,292
sorts of things - create custom 
layouts, define new paint and

827
01:43:16,842 --> 01:43:20,886
fill types, whatever. Basically,
an extension of CSS it will be a

828
01:43:22,407 --> 01:43:24,407
JavaScript, which is

829
01:43:31,864 --> 01:43:35,534
amazing. 
So, so Houdini has started

830
01:43:36,236 --> 01:43:41,401
working on these new drafts 
which include a parser API, a

831
01:43:41,832 --> 01:43:45,946
layout API, and a few other APIs
that expose the rendering engine

832
01:43:47,329 --> 01:43:50,699
internals. So let's cover them 
one by one. But before we begin,

833
01:43:50,865 --> 01:43:54,071
I should let you guys now that 
many of the things I will be

834
01:43:54,393 --> 01:43:59,178
sharing are in very early 
stages, so the syntax might

835
01:43:59,853 --> 01:44:04,330
change. The APS might get 
change, you know? But

836
01:44:04,784 --> 01:44:07,201
nonetheless, let's set started 
and she what Houdini

837
01:44:10,702 --> 01:44:12,702
has.

838
01:44:19,693 --> 01:44:22,903
First is the ... yeah. First is 
the properties and values of the

839
01:44:24,600 --> 01:44:29,922
API. So, this particular API 
extends the CSS variable spec

840
01:44:29,923 --> 01:44:35,234
which obviously allows us to 
create custom variables, and it

841
01:44:35,235 --> 01:44:40,908
extends it and allows us to 
create custom typed properties,

842
01:44:41,783 --> 01:44:45,934
so like you can define a type in
CSS now, define a type in CSS

843
01:44:45,935 --> 01:44:51,068
values. This also provides us 
the ability to have like I say a

844
01:44:51,069 --> 01:44:55,572
type. We can have, we can 
specify initial values to the

845
01:44:56,414 --> 01:45:00,698
CSS variables, and we can define
the behaviour. So all CSS

846
01:45:01,081 --> 01:45:04,344
variables inherit by default, so
this might be come in handy in

847
01:45:05,000 --> 01:45:07,000
order to disable this particular

848
01:45:09,512 --> 01:45:11,512
behaviour. So, let's see what 
the API looks

849
01:45:15,482 --> 01:45:19,637
like. So, we have this 
registered property function.

850
01:45:19,638 --> 01:45:25,291
And we are using it to define a 
new type of property called BG

851
01:45:25,292 --> 01:45:30,550
colour, and I'm providing a type
here which is of colour. And

852
01:45:30,551 --> 01:45:35,592
with an initial value of black, 
and the inheritance parameters

853
01:45:35,593 --> 01:45:37,593
option

854
01:45:39,633 --> 01:45:43,331
which is - so, having a type 
here is something new. Now, we

855
01:45:45,482 --> 01:45:50,084
are talking about typed CSS 
values. This obviously prevents

856
01:45:50,719 --> 01:45:54,616
invalid property value 
declarations, and so with a

857
01:45:55,322 --> 01:45:58,037
particular type defined, we 
always make sure that only the

858
01:45:58,038 --> 01:46:01,492
value of a required type is used
by the custom property,

859
01:46:01,919 --> 01:46:04,668
otherwise it throws an error. By
default, syntax which is the

860
01:46:04,669 --> 01:46:08,739
type that can support any type 
of value, but with the type

861
01:46:08,940 --> 01:46:12,541
defined, such as in this case, 
where I'm defining the type of

862
01:46:13,402 --> 01:46:17,505
colour, the initial value option
becomes a requirement, so that's

863
01:46:18,858 --> 01:46:24,918
why I'm providing an initial 
value. So, let's look at a

864
01:46:27,122 --> 01:46:32,253
complete example. So we use the 
same BG colour of property of

865
01:46:32,681 --> 01:46:35,328
the type colour with the value 
of black. We're using it to set

866
01:46:38,200 --> 01:46:41,568
the background colour of the 
think class, using the standard

867
01:46:41,962 --> 01:46:46,495
functions. It is pretty simple, 
right? Overriding the default

868
01:46:46,908 --> 01:46:48,708
values is pretty 
straightforward, so in this

869
01:46:48,709 --> 01:46:53,774
case, the background would be 
coloured back, so you can simply

870
01:46:54,368 --> 01:46:58,090
overriding it by redeclaring 
your custom property. Now the

871
01:46:58,091 --> 01:47:01,891
property will be - now the 
background will be coloured

872
01:47:02,073 --> 01:47:05,822
green. I think we noticed that 
all registered properties are

873
01:47:06,295 --> 01:47:09,104
bound to the root scope, so 
overriding a customs value

874
01:47:09,413 --> 01:47:12,520
property like this will only 
have its effect on the current

875
01:47:13,882 --> 01:47:18,192
element scope which is pink. If 
you were to access the BG colour

876
01:47:18,595 --> 01:47:20,595
property, it would still give 
you the

877
01:47:33,977 --> 01:47:35,410
value black. What if a non-value
like this string over here?

878
01:47:35,411 --> 01:47:37,648
Since we got this property 
registered with the type of

879
01:47:38,305 --> 01:47:40,283
colour, and we have a default 
value set to it value black.

880
01:47:40,284 --> 01:47:43,576
What if a  which is black, the 
CSS engine set up, and it

881
01:47:44,163 --> 01:47:47,695
applies the background colour of
black to the class, so, this

882
01:47:48,050 --> 01:47:52,545
becomes extremely using in cases
where you would want to resort

883
01:47:52,923 --> 01:47:56,091
to back values for your custom 
properties, and, of course, this

884
01:47:56,571 --> 01:47:58,792
prevents any inconsistencies in 
your UI which

885
01:48:02,883 --> 01:48:06,358
is great. The syntax string 
supports the following types. We

886
01:48:07,340 --> 01:48:13,415
can have colours, we can have 
numbers, percentages, URLs,

887
01:48:13,416 --> 01:48:21,269
images, and a few other types. 
We can view the list over here.

888
01:48:21,270 --> 01:48:28,106
Next up is the time OM, so we've
been talking about typed values

889
01:48:28,107 --> 01:48:29,929
over here. 
This is what gives the ability

890
01:48:29,930 --> 01:48:31,930
to give type CSS

891
01:48:33,839 --> 01:48:39,229
values. So the typed CSS object 
model gives us the ability to

892
01:48:39,230 --> 01:48:44,854
convert value strings, the CSS 
value strings into meaningful

893
01:48:44,855 --> 01:48:48,291
JavaScript-type presentations, 
so we have a specific API for

894
01:48:48,292 --> 01:48:51,761
this which we can have typed 
representations using

895
01:48:51,762 --> 01:48:57,662
JavaScript. So the title, the 
rendering engine, what which

896
01:48:57,663 --> 01:49:01,016
particular types of values are 
to be manipulated so does not

897
01:49:01,670 --> 01:49:07,343
involve any sort of extra 
parting of value strings in the

898
01:49:07,867 --> 01:49:14,260
case of the - parsing, so this 
offers significant performance

899
01:49:14,749 --> 01:49:17,663
improvement. And it also 
provides us this new class

900
01:49:17,839 --> 01:49:22,018
called the CSS style value 
class, so it also has a number

901
01:49:24,034 --> 01:49:27,013
of subclasses. Which can be used
for defining all sorts of type

902
01:49:27,462 --> 01:49:32,893
values, so we can have length 
values, we can have transform

903
01:49:33,510 --> 01:49:35,510
values, position, and a few 
other types of

904
01:49:37,611 --> 01:49:43,247
values. It also exposes style 
map, so style map is basically

905
01:49:43,248 --> 01:49:49,669
an interface which helps in 
setting and getting CSS values.

906
01:49:49,670 --> 01:49:55,021
So we can use - access the style
map and use the set method if we

907
01:49:55,022 --> 01:49:59,916
want to set a new property value
here, like in this case, I'm

908
01:49:59,917 --> 01:50:02,892
turning the height property to 
100 pixels.

909
01:50:02,893 --> 01:50:09,136
And we can use the same - we can
use the "get" method to get the

910
01:50:09,137 --> 01:50:13,498
height back which is returned as
a subclass, obviously, as a

911
01:50:13,693 --> 01:50:21,834
style value class, which is a 
simple CSS class. There is this

912
01:50:22,215 --> 01:50:27,288
open-source type OM available. 
You can play with it if you want

913
01:50:27,646 --> 01:50:31,053
to, get a feeling of how it's 
supposed to work. Again, this is

914
01:50:31,572 --> 01:50:36,702
just a proof-of-concept, so for 
experimentation only. I will get

915
01:50:36,703 --> 01:50:38,703
to the browser support for the

916
01:50:52,869 --> 01:50:55,925
APS. Allows to hook into the 
processes in the pipeline and

917
01:50:56,366 --> 01:51:00,877
extending those processes to 
apply our own  custom CSS so

918
01:51:00,878 --> 01:51:02,878
this is where the fun

919
01:51:07,579 --> 01:51:09,718
part is. This is what it looks 
like. We have different

920
01:51:09,719 --> 01:51:15,364
processes in the CSS engine, and
we have different worklets

921
01:51:15,365 --> 01:51:19,716
attached to it. Each are at the 
various point in the rendering

922
01:51:19,717 --> 01:51:22,331
pipeline. You can see that we 
have a separate worklet for the

923
01:51:22,332 --> 01:51:26,462
paint stage, and a separate 
worklet for the layout

924
01:51:40,358 --> 01:51:46,344
the rendering engine, and 
worklets are meant to be threat

925
01:51:46,592 --> 01:51:46,685
agnostic which meansstage, and 
so on. They are called for any

926
01:51:46,686 --> 01:51:49,584
of the process of the they're 
not intended to run on a

927
01:51:49,585 --> 01:51:52,713
particular thread, so the 
rendering engine can choose to

928
01:51:52,714 --> 01:51:57,320
run them wherever it wants, 
which it can be a separate

929
01:51:57,321 --> 01:52:00,874
worklet thread. They run in sync
with the rendering engine, but

930
01:52:00,875 --> 01:52:03,854
they are completely independent 
on the main thread, so that's

931
01:52:03,855 --> 01:52:05,855
the best

932
01:52:17,250 --> 01:52:20,928
part. So this is how you would 
register a worklet. In this case

933
01:52:21,496 --> 01:52:24,833
where we're hoping in the paint 
part. So this is how you stage,

934
01:52:24,834 --> 01:52:29,527
and when defining the worklet, 
we give it a name, and a

935
01:52:32,134 --> 01:52:34,979
JavaScript class. This is where 
all the magic happens inside

936
01:52:35,311 --> 01:52:37,311
this JavaScript class.

937
01:52:40,866 --> 01:52:44,615
Let's see how this magic 
actually works at the paint

938
01:52:44,616 --> 01:52:46,616
stage of the rendering pipeline.

939
01:52:48,801 --> 01:52:53,727
So this is what the paint stage 
does. It's responsible for a

940
01:52:53,728 --> 01:52:56,632
painting background of the 
content, and highlight of the

941
01:52:56,633 --> 01:53:01,294
box. Based on its size and 
style. So, during this stage,

942
01:53:01,295 --> 01:53:08,002
the paint API will allow us to 
create custom fills for our

943
01:53:08,003 --> 01:53:11,219
elements. Inform an image which 
we can use in the background

944
01:53:11,220 --> 01:53:16,239
image property, something like 
this. So, here we are applying a

945
01:53:19,077 --> 01:53:24,074
custom-filled, using the paint 
function provided by the API.

946
01:53:24,075 --> 01:53:27,435
The first things first. We need 
to hook into the paint stage of

947
01:53:27,436 --> 01:53:35,226
the rendering pipeline, so what 
do we need for that? Worklet,

948
01:53:35,227 --> 01:53:40,647
right? So we define the paint 
worklet. This example is

949
01:53:41,775 --> 01:53:45,609
actually taken from the Google 
developers' website, so they are

950
01:53:45,867 --> 01:53:51,384
planning to ship the Houdini 
paint API with the Chrome 65

951
01:53:51,385 --> 01:53:55,350
some day next week is the 
release date. So we can see

952
01:53:55,776 --> 01:53:57,776
that, we have a paint

953
01:53:59,330 --> 01:54:05,959
worklet, called checkerboard, 
and we use it to paint in div,

954
01:54:05,960 --> 01:54:12,114
so we attached the checkerboard 
paint to its property. This is

955
01:54:12,115 --> 01:54:14,115
the

956
01:54:26,226 --> 01:54:27,577
we are using to paint our div. 
This is like a standard function

957
01:54:27,578 --> 01:54:32,918
used in the paint worklet, so we
get access to these threeworklet

958
01:54:32,919 --> 01:54:34,291
using to paint our div.  
arguments in paint function

959
01:54:34,292 --> 01:54:36,292
which is basically the

960
01:54:39,890 --> 01:54:43,342
context, the geom is the metric 
which returns the height of the

961
01:54:43,343 --> 01:54:45,343
element, and the properties are 
the style map properties we want

962
01:54:46,271 --> 01:54:48,271
to access inside

963
01:54:51,043 --> 01:54:52,613
our worklet. 
Using this be paint function, we

964
01:54:52,614 --> 01:54:57,163
create the checkerboard with the
three colours defined, which are

965
01:54:57,164 --> 01:55:00,221
red, green, and blue. If you 
have some experience with

966
01:55:00,822 --> 01:55:05,644
canvas, then this might look 
familiar. Here, we're using the

967
01:55:05,645 --> 01:55:07,924
context to apply the fill, so 
it's quite

968
01:55:12,029 --> 01:55:17,062
the same. This is what the 
output looks like. It is a

969
01:55:17,063 --> 01:55:20,682
checkerboard fill made of 
specified colours. I know it is

970
01:55:21,388 --> 01:55:25,098
very simple example, but it 
still tries to demonstrate how

971
01:55:25,099 --> 01:55:27,099
easy it is to extend

972
01:55:30,021 --> 01:55:32,022
the paint, paint process in the 
rendering

973
01:55:35,521 --> 01:55:39,295
pipeline, and the paint worklet 
will be called every time and a

974
01:55:40,051 --> 01:55:42,051
screen resize operation happens,

975
01:55:45,411 --> 01:55:50,459
so, the button is redrawn on 
demand and kept intact. This is

976
01:55:50,778 --> 01:55:53,086
completely normal because every 
time a fill happens, it is

977
01:55:53,489 --> 01:55:55,509
calculated on the elements cut 
in size which is generated

978
01:55:56,240 --> 01:55:58,240
during the layout stage.

979
01:56:00,430 --> 01:56:03,645
Additionally, we can use custom 
properties in our paint worklet.

980
01:56:03,912 --> 01:56:10,305
This is where the properties 
arguments comes in. And the

981
01:56:10,696 --> 01:56:15,244
properties arguments returns the
style maps, so we use the type

982
01:56:15,476 --> 01:56:19,315
here to get the custom 
properties from inside the

983
01:56:20,859 --> 01:56:27,150
worklet. As of now in Chrome, 
these properties are mostly, the

984
01:56:27,151 --> 01:56:31,282
style map is mostly a wraparound
strings which is why you need to

985
01:56:31,283 --> 01:56:34,265
convert it to a string over 
here. Going forward, it will

986
01:56:36,099 --> 01:56:41,406
change as soon as we have table 
support for type OM. The input

987
01:56:41,407 --> 01:56:45,224
function is required to fetch 
the required custom properties

988
01:56:45,225 --> 01:56:49,177
on any other properties that we 
need to use in the

989
01:56:54,079 --> 01:56:56,602
worklet. 
>> Paint can be used anyway, but

990
01:56:56,603 --> 01:57:01,026
these are two simple examples. 
Multiple coloured, backgrounds,

991
01:57:01,428 --> 01:57:05,686
the material design ripple 
effect, so that what is of

992
01:57:06,053 --> 01:57:08,897
benefit here is that using a 
paint worklet, this sort of

993
01:57:08,898 --> 01:57:14,725
effect becomes pretty simple to 
make, so you don't need inject

994
01:57:14,726 --> 01:57:19,817
extra DOM nodes here in this 
case, and it's pretty simple to

995
01:57:19,818 --> 01:57:24,063
use it. You can use a full list 
of examples over here.

996
01:57:24,064 --> 01:57:27,157
Obviously, you can use it to 
Polyfill any of the proposed

997
01:57:27,158 --> 01:57:29,533
fill types that the browser 
currently does

998
01:57:34,049 --> 01:57:37,747
not support. Next up is the 
layout API. The layout API gives

999
01:57:38,002 --> 01:57:42,159
you see the layout worklet which
we can hook into the rendering

1000
01:57:42,160 --> 01:57:46,926
pipeline to recreate our own 
display types.

1001
01:57:46,927 --> 01:57:53,691
So, first let's understand what 
the layout stage does. So, it is

1002
01:57:53,692 --> 01:57:59,535
responsible for generating the 
and positioning fragments from

1003
01:58:01,664 --> 01:58:05,002
the box stream, so a lot was 
there. Let's see what each of

1004
01:58:06,126 --> 01:58:10,000
these mean. The box tree shows 
how the document structure looks

1005
01:58:10,001 --> 01:58:14,280
like, and what sort of elements 
are there in the structure, and

1006
01:58:14,846 --> 01:58:18,623
this structure, and this is the 
structure that the API operates

1007
01:58:18,624 --> 01:58:24,500
on, and let's us arrange all the
elements together. And each of

1008
01:58:25,643 --> 01:58:30,454
these elements can have multiple
fragments. As we can see,

1009
01:58:30,455 --> 01:58:33,924
fragments are like the tiniest 
bits in the whole box tree, and

1010
01:58:34,407 --> 01:58:38,862
they're created for each of the 
pseudo elements. In this case,

1011
01:58:39,076 --> 01:58:43,314
we have a fragment for the first
letter pseudo element, the first

1012
01:58:43,832 --> 01:58:46,942
line pseudo element, which is 
provided by the black outline.

1013
01:58:47,604 --> 01:58:51,318
Now, the latout API gives us the
ability to create our own

1014
01:58:51,755 --> 01:58:56,828
display types with respect to 
this particular box structure.

1015
01:58:57,039 --> 01:58:59,039
This is what the broader picture
looks

1016
01:59:07,427 --> 01:59:11,617
like. We have the parent element
applying the layout on and the

1017
01:59:11,618 --> 01:59:14,591
child elements further 
containing the child fragments.

1018
01:59:14,592 --> 01:59:16,592
So the access to the child 
elements is important here

1019
01:59:16,807 --> 01:59:21,551
because obviously we need to 
arrange the elements and the

1020
01:59:22,323 --> 01:59:26,180
fragments within them, to 
generate our custom layout. So

1021
01:59:26,181 --> 01:59:28,181
let's look at the worklet

1022
01:59:30,757 --> 01:59:33,691
now. 
This is what the class looks

1023
01:59:34,334 --> 01:59:39,221
like. So we have a few started 
functions. Properties help

1024
01:59:39,583 --> 01:59:42,376
stretching the property values 
of the current element like you

1025
01:59:43,477 --> 01:59:45,728
saw in the paint worklet, for 
example. Children input

1026
01:59:45,729 --> 01:59:49,384
properties gives the property 
values of the child elements,

1027
01:59:50,660 --> 01:59:54,304
and the child play function 
let's us define how the children

1028
01:59:54,606 --> 02:00:00,968
elements are to be displayed, 
whether they are to be inline,

1029
02:00:01,666 --> 02:00:04,419
blockified, whatever. Then we 
have two generator functions.

1030
02:00:04,420 --> 02:00:08,040
The first one is in sizes and 
the second one is

1031
02:00:14,124 --> 02:00:17,007
layout. The intrinsic sizes 
function allows us to figure out

1032
02:00:17,008 --> 02:00:23,559
what the max or min size of a 
block is. So that we place our

1033
02:00:23,560 --> 02:00:26,601
elements accordingly and don't 
waste any space available

1034
02:00:26,602 --> 02:00:29,088
because they're the specified 
amount of space available for us

1035
02:00:29,322 --> 02:00:35,659
to do our layouts within the 
parent. And the layout method

1036
02:00:35,660 --> 02:00:39,108
actually defines how the 
elements are to be arranged by a

1037
02:00:39,279 --> 02:00:42,461
custom layout. 
So, we create a constraint space

1038
02:00:42,462 --> 02:00:45,848
here which is basically the 
space available for us to do our

1039
02:00:47,720 --> 02:00:52,664
layout. And, within the parent, 
and, we position our fragments,

1040
02:00:52,905 --> 02:00:55,932
and it's all the block sizes to 
finish up the arrangement of

1041
02:00:59,063 --> 02:01:01,063
the blocks.

1042
02:01:02,199 --> 02:01:05,927
So this example is taken from 
the official blocks.

1043
02:01:05,928 --> 02:01:08,587
The example here talks about 
stacking the elements on top of

1044
02:01:08,588 --> 02:01:12,751
each other which are inside the 
parent. You can't really play

1045
02:01:12,957 --> 02:01:16,373
with it at the moment. It is 
API, none of the browsers have

1046
02:01:18,474 --> 02:01:22,225
got it implemented. But it seems
extremely promising, I mean,

1047
02:01:22,852 --> 02:01:27,462
imagine writing a performant 
layout without any JavaScript

1048
02:01:27,817 --> 02:01:29,817
packs. It's going to be awesome,

1049
02:01:34,742 --> 02:01:39,965
right? Now let's talk about the 
an makes worklet. So animation

1050
02:01:40,370 --> 02:01:45,338
worklet allows us to create 
highly performant scroll or

1051
02:01:46,213 --> 02:01:48,657
input-based animations - you 
know, things like sticky

1052
02:01:51,657 --> 02:01:54,084
headers, parallax effect, and 
all that. All of this is done

1053
02:01:54,573 --> 02:01:56,871
off the main thread. Because 
we're using a worklet here, this

1054
02:01:57,286 --> 02:01:59,286
offers us significant

1055
02:02:04,805 --> 02:02:10,552
performance. No janky scroll 
effect, I guess. Animations

1056
02:02:10,553 --> 02:02:14,606
running inside the worklet also 
exposes the animation interface

1057
02:02:14,986 --> 02:02:19,304
from the web animations API 
which means the worklet data can

1058
02:02:20,057 --> 02:02:23,052
be accessed on the main thread 
using any of the animation's

1059
02:02:26,239 --> 02:02:30,945
APIs before now, let's look at 
an example of a

1060
02:02:34,048 --> 02:02:36,048
scroll-based

1061
02:02:37,105 --> 02:02:43,503
header. This is the structure of
the document. We have a header

1062
02:02:44,081 --> 02:02:49,175
element, and an avatar element. 
So, these elements based on the

1063
02:02:49,455 --> 02:02:53,584
scroll position, so I just 
scroll down the element that

1064
02:02:53,585 --> 02:02:57,549
will animate and get fixed to 
the top, and the header element

1065
02:02:57,987 --> 02:03:03,457
will lose its transparency. So 
it also includes a worklet

1066
02:03:03,918 --> 02:03:07,962
module inclusion call. As you 
can see here, this is a promise,

1067
02:03:08,378 --> 02:03:13,752
and inside the promise we attach
the key frame effects, so these

1068
02:03:14,151 --> 02:03:18,052
key frame effects are provided 
by the animations API, and we

1069
02:03:18,332 --> 02:03:21,204
attach these to each of the 
elements that we want to

1070
02:03:21,401 --> 02:03:23,994
animate. In this case, we are 
passing an area of effects

1071
02:03:24,365 --> 02:03:26,365
attached with each element,

1072
02:03:28,258 --> 02:03:32,965
so we want to the avatar element
to scale down and the header

1073
02:03:33,224 --> 02:03:35,224
element to loose its

1074
02:03:38,652 --> 02:03:41,262
transparency. -- to lose its 
transparency. Each of these

1075
02:03:41,491 --> 02:03:45,195
effects are available in our 
worklet. We also create a new

1076
02:03:45,788 --> 02:03:48,309
scroll timeline on the scrolling
container which is the parent

1077
02:03:48,730 --> 02:03:52,479
container, which listens for the
scroll events, and it has an end

1078
02:03:53,748 --> 02:04:02,287
and start offset. So this is the
worklet class. It contains our

1079
02:04:02,749 --> 02:04:09,320
constructor where we define our 
easing function. Then Geneva an

1080
02:04:09,755 --> 02:04:13,886
animate process.the animate -- 
then we have an animate process.

1081
02:04:14,122 --> 02:04:18,958
This gives the current scroll 
position in document. And it

1082
02:04:18,959 --> 02:04:21,881
also gives us this group of 
effects which are to be applied

1083
02:04:22,459 --> 02:04:25,733
on the specified elements. So we
said the scroll position on the

1084
02:04:26,100 --> 02:04:29,603
- which is the current time, and
the scroll timeline, and we

1085
02:04:29,604 --> 02:04:34,278
adjust the time of the effects 
passed to us that gives us the

1086
02:04:34,450 --> 02:04:36,739
ability to control the timeline 
of our key frames.

1087
02:04:41,486 --> 02:04:45,270
So this is how it would look. 
You can see that, as we scroll,

1088
02:04:45,271 --> 02:04:49,430
the targeted elements are being 
animated as expected. The best

1089
02:04:49,431 --> 02:04:52,796
part is all of this happens off 
our main thread. This can

1090
02:04:52,797 --> 02:04:56,505
provide us some really high 
performance benefits. Especially

1091
02:04:58,869 --> 02:05:05,556
things with that are parallax 
effects. This is a demo created

1092
02:05:05,557 --> 02:05:09,368
by Sirma, so that team put 
together a small Polyfill for

1093
02:05:09,369 --> 02:05:13,663
the animation worklet, and this 
Polyfill is being used by an

1094
02:05:13,664 --> 02:05:17,380
example listed on their 
repository. You can view the

1095
02:05:17,381 --> 02:05:19,381
entire example

1096
02:05:27,757 --> 02:05:30,874
over there. There are are two 
more elements left which are

1097
02:05:30,875 --> 02:05:33,702
fuzzy at the moment. Even the 
specs don't have too much

1098
02:05:33,703 --> 02:05:37,342
information about them to cover.
One is the parser API and the

1099
02:05:37,343 --> 02:05:41,284
other is the foreign metrics API
but we will still look into it,

1100
02:05:41,285 --> 02:05:44,646
and see where each of these APIs
can potentially

1101
02:05:48,668 --> 02:05:52,787
offer us. So the first one is 
the parser API. As the name

1102
02:05:53,359 --> 02:05:58,186
suggests it will allow us to 
parse CSS rules, or CSS rules

1103
02:06:01,030 --> 02:06:05,125
typed into interpretations. So 
string-based based rules

1104
02:06:05,368 --> 02:06:09,172
representations, and it will 
also have utilities to parse

1105
02:06:09,364 --> 02:06:11,364
entire style sheets, rule sets, 
and all

1106
02:06:15,146 --> 02:06:19,486
those things. It's still like in
the early stages, so I can't say

1107
02:06:19,487 --> 02:06:26,315
much about it. The last one is 
the font metrics API, so this

1108
02:06:26,316 --> 02:06:31,070
will provide basic font metrics,
or the font intended for our

1109
02:06:31,071 --> 02:06:35,626
information. 
So, the two methods specified in

1110
02:06:35,829 --> 02:06:40,400
the spec, so there is this thing
called measure element method

1111
02:06:40,725 --> 02:06:44,084
which basically takes in an 
element, and returns a font

1112
02:06:44,551 --> 02:06:49,126
metrics object, and we have a 
measured text method which takes

1113
02:06:49,447 --> 02:06:54,459
in a DOM string and a style map 
and returns a fonts metric

1114
02:06:55,379 --> 02:06:57,770
object which basically is 
supposed to store information

1115
02:06:58,911 --> 02:07:02,965
regarding the width, height, the
boundary box baseline, and all

1116
02:07:06,393 --> 02:07:08,810
of that of the element. So this 
will allow us to measure our

1117
02:07:09,422 --> 02:07:12,402
text actual elements and the 
orientation, and allow us to do

1118
02:07:12,768 --> 02:07:18,662
some really cool things like 
creating some interesting

1119
02:07:23,191 --> 02:07:26,014
effects, maybe. 
So this was more of a brief

1120
02:07:26,840 --> 02:07:30,804
introduction to the Houdini 
APIs. The main question is can

1121
02:07:32,763 --> 02:07:35,627
we use Houdini today? And most 
of you might have guessed it:

1122
02:07:35,839 --> 02:07:44,274
the answer is no. But it's 
coming soon. So this is what the

1123
02:07:44,724 --> 02:07:50,722
current situation looks like. 
The Chrome team is definitely

1124
02:07:51,107 --> 02:07:54,517
push it hard to ship the new 
APIs. You can experiment with

1125
02:07:55,015 --> 02:07:58,644
the properties and values API 
and the typed OM which is

1126
02:08:00,196 --> 02:08:04,856
available behind the experiments
web features flag, so you can go

1127
02:08:05,174 --> 02:08:09,182
to Chrome flags, and turn the 
flag on. As far as I know, I

1128
02:08:11,591 --> 02:08:14,589
think it is available in stable 
chrome as well. Again, behind

1129
02:08:14,942 --> 02:08:18,331
the same flag. A fully 
functional paint API like I said

1130
02:08:19,244 --> 02:08:22,707
is to be released with Chrome 
65, some time around next week.

1131
02:08:23,226 --> 02:08:27,601
So that is a good sign. Clearly,
no signals to implement the font

1132
02:08:28,330 --> 02:08:34,237
metrics API or the parser API by
any of the vendors. Few other

1133
02:08:34,553 --> 02:08:38,759
browsers also seem to be 
catching up - well, kind of - so

1134
02:08:38,760 --> 02:08:42,602
we might see some of the API 
being implemented in a few of

1135
02:08:43,170 --> 02:08:46,588
the browsers. Not really sure 
about the timeline, but be sure

1136
02:08:46,589 --> 02:08:48,589
to check

1137
02:08:53,342 --> 02:08:55,342
out

1138
02:08:59,298 --> 02:09:02,470
ishoudiniready.com.
With that being said, Houdini

1139
02:09:04,098 --> 02:09:06,320
will cover us capabilities to 
extend rendering engines and

1140
02:09:07,508 --> 02:09:09,871
come up with really amazing 
tools and patterns that will

1141
02:09:11,711 --> 02:09:15,629
facilitate the development of 
truly rich web experiences. And

1142
02:09:15,895 --> 02:09:19,974
I'm really looking forward to 
it. That's it from this side.

1143
02:09:20,522 --> 02:09:22,522
Thank you. [Applause].

1144
02:09:35,065 --> 02:09:39,146
>> Thank you so much, everybody,
for giving us a glimpse into the

1145
02:09:39,147 --> 02:09:44,599
CSS future. And that was a  very
informative and you covered

1146
02:09:45,086 --> 02:09:48,273
everything. I wrote down three 
questions, and you can answer

1147
02:09:48,464 --> 02:09:51,909
them as you go, so I got 
nothing, I'm sorry. Sorry to

1148
02:09:52,592 --> 02:09:54,592
disappoint!  However, I do have 
good news. It's food

1149
02:09:57,706 --> 02:10:01,893
time. We're pretty on time, so 
we have a full hour for food.

1150
02:10:01,894 --> 02:10:08,854
And you know how yesterday, I 
said that the swag was only

1151
02:10:08,855 --> 02:10:15,970
yesterday, the as on Zo-on swag.
It is still upstairs, the same

1152
02:10:15,971 --> 02:10:18,171
place as yesterday. Today, from 
12 to 3

1153
02:10:21,253 --> 02:10:23,253
PM. See you back at

1154
02:54:21,270 --> 02:54:24,003
.
. is test.this another caption

1155
02:54:24,004 --> 02:54:24,587
is
.

1156
02:54:24,588 --> 02:54:26,588
This a

1157
02:54:32,202 --> 02:54:33,280
.
.

1158
02:54:33,281 --> 02:54:34,717
. caption

1159
02:54:34,718 --> 02:54:34,736
.
.

1160
02:54:34,737 --> 02:54:35,273
.

1161
02:54:35,274 --> 02:54:35,858
.

1162
02:54:35,859 --> 02:54:36,531
.

1163
02:54:36,532 --> 02:54:37,220
. .

1164
02:54:37,221 --> 02:54:39,221
.

1165
02:56:22,558 --> 02:56:24,558
This is a test. This is another

1166
02:57:01,385 --> 02:57:05,385
Unfortunately, yes, this is 
another.

1167
02:57:05,386 --> 02:57:05,979
.
.

1168
02:57:05,980 --> 02:57:06,588
.

1169
02:57:06,589 --> 02:57:07,254
.

1170
02:57:07,255 --> 02:57:07,891
.

1171
02:57:07,892 --> 02:57:09,892
.

1172
02:57:46,332 --> 02:57:48,332
test. This is another

1173
02:59:58,516 --> 03:00:00,651
.
.

1174
03:00:00,652 --> 03:00:02,652


1175
03:00:40,800 --> 03:00:46,386
This is a test.

1176
03:11:35,267 --> 03:11:35,303
room?
I you

1177
03:11:35,304 --> 03:11:38,774
>> Hello. lucky Metro  of 
Berliners in the a your Yeah? If

1178
03:11:39,657 --> 03:11:42,653
you don't already have  pass, 
here's day,because Michael over

1179
03:11:45,857 --> 03:11:48,896
youuntil 20 So, if hereused. 
Metro pass has that would be

1180
03:11:48,897 --> 03:11:53,394
which hasn't used valid a March 
heBerlin   from Michael, it free

1181
03:11:53,406 --> 03:11:59,743
the want get a go andthere!  
Second Metro pass,  guy over

1182
03:12:04,136 --> 03:12:09,709
panel are speaker announcement: 
today, we  going to have a  with

1183
03:12:09,710 --> 03:12:13,583
- Idon't have the list of
later  people -

1184
03:12:18,674 --> 03:12:21,901
Dan -  Sarah, I'm  with Anna,
audience, from are saying this

1185
03:12:22,021 --> 03:12:26,481
but memory. We youtaking 
questions from the go on so, if

1186
03:12:26,482 --> 03:12:28,482
the site

1187
03:12:31,622 --> 03:12:33,524
if you're able so asking
slito.com upon, and be   andgood

1188
03:12:33,525 --> 03:12:37,276
and voted you will moderated and
they will to to make questions,

1189
03:12:37,277 --> 03:12:43,375
get  be might theyanswered at 
questions,

1190
03:12:49,666 --> 03:12:51,666
the panel.

1191
03:12:53,728 --> 03:13:00,918
Slido.com  specs and yet, then 
we standards web andtalks about

1192
03:13:00,919 --> 03:13:08,850
have thethat aren't in the 
speakers fromliterally modules

1193
03:13:08,851 --> 03:13:17,125
importing event no future. This 
talk isQuantum months   three

1194
03:13:17,126 --> 03:13:19,773
different. We haveleft, When 
Firefox  headlines out a making

1195
03:13:20,584 --> 03:13:26,203
Firefox Quantum. it was came 
cojsconf. talkago, and about

1196
03:13:26,204 --> 03:13:29,063
right, centre. Today

1197
03:13:32,496 --> 03:13:36,333
Perrier welcoming intalking have
Jean-Yves me We've  about the

1198
03:13:36,334 --> 03:13:40,785
story. Joinwe to
JEAN-YVES: Thank  excited

1199
03:13:40,916 --> 03:13:46,195
Jean-Yves.everybody.  Hello, 
really you. talk I'm to be and

1200
03:13:46,196 --> 03:13:51,034
about here,fast, how hadMozilla 
are  browsersQuantum   use

1201
03:13:51,035 --> 03:13:59,955
Firefox making will and I of how
as an example browser are

1202
03:13:59,956 --> 03:14:04,114
vendors modifying also the21st 
are things the that Most ofthe

1203
03:14:04,115 --> 03:14:09,486
browser I'm to cope with say  
century.browsers to  aboutvalid

1204
03:14:09,487 --> 03:14:14,689
of other taking the  for a lot 
of Firefox but I'm example

1205
03:14:16,373 --> 03:14:20,451
Mozilla  Quantum. So,  atI'mthe 
part of Jean-Yves Perrier,

1206
03:14:20,452 --> 03:14:24,443
outreach developer the story So
account. starts and I computer a

1207
03:14:24,740 --> 03:14:29,381
have a Twitter  with aworks. the
thelittle bit howcomputer, there

1208
03:14:29,382 --> 03:14:35,258
isand  So at core of   a 
processor, over evolved have

1209
03:14:35,259 --> 03:14:37,654
processors quickly, very years, 
the 1980s, 1970s,somethingevery

1210
03:14:38,044 --> 03:14:42,958
of the   was initially, in that 
there saying Moore's last

1211
03:14:42,959 --> 03:14:50,402
century, the Law basically 
called was which two or years,

1212
03:14:50,403 --> 03:14:56,174
three your computer as twice 
fast as  becomes previously your

1213
03:14:56,178 --> 03:14:59,230
which veryprogrammes and later, 
making years wasnothing,

1214
03:14:59,309 --> 03:15:02,814
convenient for people in  three 
do browsersparticular because or

1215
03:15:03,155 --> 03:15:09,481
twice youfast. It and, is two  
lunch. free browser as is like a

1216
03:15:11,783 --> 03:15:14,286
of
Lately, doubling decade really

1217
03:15:14,287 --> 03:15:17,846
their not the second speed any 
are people century, areseeing

1218
03:15:18,063 --> 03:15:26,117
this 21st  processorsmore each  
that bit a little is still two

1219
03:15:26,118 --> 03:15:28,796
or threethe years. It but, in 
fact, it truemore in processors,

1220
03:15:29,269 --> 03:15:34,049
for  high  endfor no  we're 
matter doesn'tthe because really

1221
03:15:34,987 --> 03:15:38,149
on the  web Most of run only a 
on point run where we such

1222
03:15:38,150 --> 03:15:40,674
processor. want atime, web to
latest, device to the high-end

1223
03:15:40,675 --> 03:15:46,416
and the   you want it the 
powerful willprocessor, it's not

1224
03:15:47,283 --> 03:15:53,169
the mostprocessors battery  the 
So minutes. and else  just last

1225
03:15:53,170 --> 03:16:00,637
five have found a byanddifferent
way  it'shaving more free no to

1226
03:16:00,638 --> 03:16:02,779
increase parallel, is power, so 
and  is there more their

1227
03:16:02,808 --> 03:16:08,313
processing in cores, here  power
difference the now calculation

1228
03:16:08,314 --> 03:16:10,976
have are that The cores lunch. 
these make programmes themselves

1229
03:16:10,977 --> 03:16:14,613
to adapt to of use

1230
03:16:20,135 --> 03:16:26,759
to available. At the same 
browsersyears,was over we want

1231
03:16:26,760 --> 03:16:29,474
time, for do were  has changed 
the if you so at a the

1232
03:16:29,475 --> 03:16:33,049
beginning, displaying it 2005,  
just in browsers,toyou document,

1233
03:16:33,660 --> 03:16:35,927
and even, box, 
It is  images and making

1234
03:16:35,928 --> 03:16:38,077
developer.  put a few round 
top-notch the what What wetoday.

1235
03:16:38,317 --> 03:16:43,976
a want ed more  the corner or on
case any were the nothave 60 run

1236
03:16:43,977 --> 03:16:46,617
at frames  to is to per with 
transparency this running to

1237
03:16:46,618 --> 03:16:54,546
second; videos all  HDrotations,
want  with you effects,more tan

1238
03:16:54,547 --> 03:17:00,492
this and  virtual needmeans all 
your  you onyou want to headset

1239
03:17:00,493 --> 03:17:05,335
which run fact, perbecause if 
reality frames that, in   60have

1240
03:17:06,687 --> 03:17:09,587
a second, not to you headset 
want withperat leastvirtual

1241
03:17:09,588 --> 03:17:14,799
reality   frames you need motion
not 100 sickness, if 80, achieve

1242
03:17:15,619 --> 03:17:18,870
There were  adapt. second in 
order to to to hadthis,thethis.

1243
03:17:18,871 --> 03:17:22,320
In order  mostly in  cope and 
with browserif 1990, the the

1244
03:17:22,321 --> 03:17:28,164
even  the end of 1990, designs 
in the 1980s, over evolved

1245
03:17:28,165 --> 03:17:33,078
beginning ofyears, it ismodern 
they've the   run the the this

1246
03:17:33,079 --> 03:17:37,821
same not is aboutarchitecture So
that can browser  what web. you

1247
03:17:37,822 --> 03:17:41,479
story todayapplication telling 
and  websiteorder to  doing in

1248
03:17:41,480 --> 03:17:47,709
vendors are your without make 
even do faster you having to

1249
03:17:51,333 --> 03:17:58,551
3, anything.  Firefox  for 
course,launched robot. Of robot

1250
03:17:59,286 --> 03:18:04,377
The browser agent. We friendly 
looks this it a decade,over the

1251
03:18:04,378 --> 03:18:10,305
next lit bituser it a   clunky. 
Is still the adjunct that we

1252
03:18:10,306 --> 03:18:16,777
want to inhave on  doingbrowser 
is a modern browser question the

1253
03:18:16,778 --> 03:18:24,819
web. The is what it adoes  2018?
howespecially  The and is work,

1254
03:18:24,820 --> 03:18:28,063
browser first part web quite 
important is a understand what

1255
03:18:28,064 --> 03:18:29,047
to  you
So this changesunderstand are

1256
03:18:29,048 --> 03:18:36,539
engine?  that thehappening. 
rendering so a little bit your

1257
03:18:36,540 --> 03:18:41,427
is downloading  is Thepages. 
first thing browser the the

1258
03:18:41,428 --> 03:18:44,702
JavaScript, it HTML, the Each 
requests on web, and gets just

1259
03:18:44,703 --> 03:18:49,875
files, HTML an parser, the CSS 
into HTML pass all of this

1260
03:18:49,876 --> 03:18:55,656
engine at whole process the the 
the DOM  of nodes,starts

1261
03:18:55,657 --> 03:19:00,862
generates of it DOMnodes. CSS 
youloading the

1262
03:19:00,863 --> 03:19:06,228
With Every time parser the DOM 
modify  not up. again -  CSS

1263
03:19:06,229 --> 03:19:10,408
first but what  followsgo in the
style the engine  and The thing

1264
03:19:10,409 --> 03:19:13,920
to and the rendering the applied
isthe style engine. andengine

1265
03:19:13,921 --> 03:19:17,517
takesapplied CSS  are yet It 
rules themjust boxes. defined

1266
03:19:17,518 --> 03:19:22,225
what apply to each of the  
doesn't rules that set of but

1267
03:19:22,226 --> 03:19:24,945
When you it the match are each 
add DOM. defines whatimages, the

1268
03:19:24,970 --> 03:19:30,372
you  so the this,know element of
media, have  size of all the and

1269
03:19:30,811 --> 03:19:34,534
can theyou the videos, images, 
youdefining when  the size  of

1270
03:19:34,535 --> 03:19:38,144
the is and, the which awill 
videos, have layout have this,

1271
03:19:38,145 --> 03:19:42,966
you it  a  face  pagethat is 
each of thebecause they  where

1272
03:19:42,967 --> 03:19:46,020
on you the layers, have several 
be displayed butand of boxes.

1273
03:19:46,021 --> 03:19:51,010
You layers, on top inside the 
other, be can is each don't know

1274
03:19:51,727 --> 03:19:54,523
yet whatis  So thisnext  The 
paint. which layer is winning.

1275
03:19:54,807 --> 03:20:01,809
the the each of  on step is 
texture to apply will - this is

1276
03:20:01,810 --> 03:20:05,237
that texture layers texture 
text. some From  inthis, or the

1277
03:20:05,238 --> 03:20:07,749
then, you in is background the 
video,is texture is awhich

1278
03:20:07,750 --> 03:20:13,259
image, your  just  define 
visible. This to go to are you

1279
03:20:13,260 --> 03:20:17,686
have  then pixels And last the 
the and next screen. and step,

1280
03:20:17,687 --> 03:20:21,981
the the composite, through 
modify page onyou go yearseach

1281
03:20:21,982 --> 03:20:25,564
time  youoptimised DOM,  For 
have to  thisprocess again. only

1282
03:20:25,814 --> 03:20:27,952
redesigning oryears, already and
withdrawing by the  part

1283
03:20:27,953 --> 03:20:34,962
browsers havechange   this  you
part of are when the pages that

1284
03:20:34,963 --> 03:20:37,985
is wholeactually modified this 
the DOM and important not and

1285
03:20:37,986 --> 03:20:41,199
the page. But big really the 
element.

1286
03:20:45,933 --> 03:20:47,933
Mostly,

1287
03:20:50,886 --> 03:20:56,302
I properlilogicallisation.wanted
especially tonew -  a   know to

1288
03:20:56,303 --> 03:21:00,924
First,we've created
parallelisation. isparts little

1289
03:21:00,980 --> 03:21:04,554
replacing improve  Rust been by 
C++ in   bill by crib the

1290
03:21:04,555 --> 03:21:09,022
language has of Firefox this 
make this, we tothis language,

1291
03:21:09,023 --> 03:21:14,462
and the - designed 
writing thethreads wanted

1292
03:21:15,353 --> 03:21:18,980
executed course or be codes 
multiple can  with on fewer and

1293
03:21:18,981 --> 03:21:23,519
so that easier C++ much, much to
of to than contributing

1294
03:21:23,520 --> 03:21:28,284
A lot even areas are on. and 
most peoplepeopleprogrammers,

1295
03:21:28,285 --> 03:21:33,140
you the code, test new  if good 
are really can also get

1296
03:21:37,057 --> 03:21:39,057
algorithms,

1297
03:21:44,223 --> 03:21:46,188
for programmers who are less 
experienced. and we We created

1298
03:21:46,189 --> 03:21:50,593
an experimental browser called 
patches Zero. It is rein in

1299
03:21:50,594 --> 03:21:55,211
Rust. It has algorithm that 
takes

1300
03:21:58,388 --> 03:22:00,388
parallelism and allows us to 
check

1301
03:22:03,410 --> 03:22:07,032
and these algorithms are working
really well. It has no

1302
03:22:07,033 --> 03:22:09,033
significant UI. 
It is not a real browser. It's

1303
03:22:09,228 --> 03:22:12,291
an idea to test if the ideas we 
have are good or not. Finally,

1304
03:22:12,512 --> 03:22:16,666
and this is the most important 
part, servo can break the web.

1305
03:22:17,465 --> 03:22:20,032
The web is a complex piece, and 
there are a lot of special cases

1306
03:22:20,391 --> 03:22:24,367
with special CSS properties, and
so on, and to test the

1307
03:22:24,368 --> 03:22:27,055
algorithm, you don't want to 
have to write the engine in all

1308
03:22:27,235 --> 03:22:30,667
the detail first. You want first
to validate that, in the good

1309
03:22:30,952 --> 03:22:34,855
case, in the easy case, you get 
the speed improvements that you

1310
03:22:35,282 --> 03:22:41,986
were - that you wanted to have. 
So we did this servo, and we

1311
03:22:42,570 --> 03:22:44,570
developed a lot of things

1312
03:22:46,717 --> 03:22:48,765
on it.
At the same time, we wanted to

1313
03:22:48,766 --> 03:22:52,373
solve several other problems, so
Firefox had a stability problem

1314
03:22:52,673 --> 03:22:55,629
we noticed over the last few 
years, it had a lot of crashes,

1315
03:22:55,630 --> 03:23:00,078
and we were wondering why. It 
has the old theme, so like the

1316
03:23:00,367 --> 03:23:04,728
robots that were just looking 
old, by just having an old

1317
03:23:05,082 --> 03:23:10,910
theme, when the UI in OSes have 
been proved, it feels slow, and

1318
03:23:11,115 --> 03:23:14,465
there is there were a lot of 
cases where, in fact, the user

1319
03:23:15,905 --> 03:23:19,382
interface was freezing - it's 
called UI young. Finally, we

1320
03:23:21,966 --> 03:23:23,966
wanted to have the new

1321
03:23:24,973 --> 03:23:26,973
algorithm. So we

1322
03:23:28,472 --> 03:23:32,020
launched a project called 
Quantum, at the beginning of

1323
03:23:32,021 --> 03:23:41,491
last year, and we decided we 
wanted to make a equal leap -- a

1324
03:23:42,028 --> 03:23:45,301
quantum leap in 
performance.Quantum leap -- a

1325
03:23:45,302 --> 03:23:48,203
quantum leap in performance. I 
want first to thank my colleague

1326
03:23:49,151 --> 03:23:57,643
Lynn Clark who has drawn this 
amazing drawing, I'm unable to

1327
03:23:57,644 --> 03:24:03,608
make any drawings that looks 
readable by anybody, so she's

1328
03:24:03,609 --> 03:24:07,307
doing a lot of these drawings. 
She's writing blog posts,

1329
03:24:07,308 --> 03:24:10,685
explaining how browsers are 
working. There will be a link

1330
03:24:10,686 --> 03:24:13,615
later that allows you to have 
more information. So the first

1331
03:24:13,616 --> 03:24:17,832
things that we have decided to 
do is to change our style

1332
03:24:17,833 --> 03:24:22,373
engine. So the style 
engineengine, as I said, takes

1333
03:24:22,374 --> 03:24:24,374
the different CSS

1334
03:24:26,178 --> 03:24:29,112
properties, look at the 
selectors, at the specification,

1335
03:24:29,113 --> 03:24:33,152
and, in fact, for each of the 
boxes, define, okay, this

1336
03:24:33,153 --> 03:24:37,165
property with this value applies
to this one. For example, the

1337
03:24:37,166 --> 03:24:41,651
background colour of the text 
colour, the font, and so on.

1338
03:24:41,652 --> 03:24:47,158
This is something that has to be
done to each and every box, so

1339
03:24:47,159 --> 03:24:55,099
this is at first sight something
that can be used easily with the

1340
03:24:56,409 --> 03:25:02,419
parallelisation.
So we tried it in Rust, on

1341
03:25:03,337 --> 03:25:05,429
Stylo. Basically, we had several
processes, several threads, that

1342
03:25:05,862 --> 03:25:09,047
makes part of the tree and makes
the calculation, and of course,

1343
03:25:09,048 --> 03:25:14,585
it's not that easy because first
you don't have one thread or one

1344
03:25:14,808 --> 03:25:17,308
process per element on the page 
because there are sometimes

1345
03:25:17,496 --> 03:25:22,442
several thousand of them, so you
have to give chunk of the pages

1346
03:25:22,443 --> 03:25:26,378
to each of the processes, so 
that means that some of these

1347
03:25:28,692 --> 03:25:31,595
processes are just either at 
some point because there is

1348
03:25:31,596 --> 03:25:33,868
nothing happening, finishing 
work while others may be

1349
03:25:34,463 --> 03:25:37,460
extremely busy. So there is a 
big complex algorithm here that

1350
03:25:37,867 --> 03:25:40,881
allows a different thread, 
different processes still to

1351
03:25:41,185 --> 03:25:44,001
work from the other when they

1352
03:25:47,877 --> 03:25:53,821
are idle. With this, we created 
and we validated that the new

1353
03:25:53,822 --> 03:25:59,204
way of doing styling in the 
browser is, in fact, much, much

1354
03:25:59,205 --> 03:26:01,760
more efficient. But that was 
only the first step, because

1355
03:26:02,215 --> 03:26:06,507
this is in servo, in the 
experimental browser. We needed

1356
03:26:06,508 --> 03:26:10,140
to sort out the detail and to 
integrate this into the real

1357
03:26:10,712 --> 03:26:14,785
browser. And integrating a new 
style engine in a browser, it's

1358
03:26:15,315 --> 03:26:20,070
a little bit like doing heart 
surgery, but with a person that

1359
03:26:20,349 --> 03:26:24,134
is still conscious. You want 
your browser to continue to

1360
03:26:24,135 --> 03:26:28,386
work, you don't want suddenly to
have no new release for one

1361
03:26:28,570 --> 03:26:35,808
year, two years, while you put 
all the wires together. So we

1362
03:26:37,202 --> 03:26:44,602
took the styles of Quantum with 
the parallelism, the rule, and

1363
03:26:44,603 --> 03:26:46,603
the cache from - the

1364
03:26:49,142 --> 03:26:52,837
style-sharing cache from Chrome.
Sometimes, it - a lot of nodes

1365
03:26:52,838 --> 03:26:57,638
have the same ancestors and the 
same values, so it works pretty

1366
03:26:58,097 --> 03:27:00,097
well, and, in fact, it wasn't 
working that well any more

1367
03:27:00,865 --> 03:27:05,269
because lately, with all the 
pseudo classes and so on, it

1368
03:27:05,494 --> 03:27:09,786
became more complex, and there 
are less of these elements that

1369
03:27:10,170 --> 03:27:13,781
are - that were cached. So we 
modified the style-sharing cache

1370
03:27:13,782 --> 03:27:20,299
in order for it to work again. 
And then we just transplanted

1371
03:27:20,671 --> 03:27:24,965
Stilo into the browser, and this
happened last November in

1372
03:27:25,316 --> 03:27:29,647
Firefox 57 and we got for this 
part a very, very large

1373
03:27:29,903 --> 03:27:36,372
improvement in speed. So Stylo 
is the first transfer from

1374
03:27:36,622 --> 03:27:41,858
servo. It's not the stirs part 
of Rust inside the browser and

1375
03:27:42,137 --> 03:27:46,382
solving a problem called 
embarrassingly parallel prop. By

1376
03:27:47,464 --> 03:27:51,589
definition, style engine is 
doing something that can be

1377
03:27:52,190 --> 03:27:54,190
massively parallelised. Of 
course, when the page is simple,

1378
03:27:54,964 --> 03:27:58,127
you see little improvement. When
the page is very complex, you

1379
03:27:58,830 --> 03:28:00,830
see a lot of

1380
03:28:07,269 --> 03:28:09,010
improvement. The browser has 
another challenge:

1381
03:28:09,011 --> 03:28:14,690
each time you click somewhere on
the browser, there is an event

1382
03:28:15,319 --> 03:28:18,161
handler going on firing and 
executing some code. You want to

1383
03:28:18,162 --> 03:28:23,883
be sure if you want to have 60 
frames per second or 120 frames

1384
03:28:23,884 --> 03:28:28,463
per second that all that is 
happening on the main thread,

1385
03:28:28,464 --> 03:28:33,175
and especially these handlers 
happening, is no more than 16

1386
03:28:33,176 --> 03:28:36,361
milliseconds or eight 
milliseconds, or 120 frames per

1387
03:28:36,687 --> 03:28:38,941
second. That means that you have
to have go out of the main

1388
03:28:39,364 --> 03:28:41,562
thread as soon as possible 
because while you're on the main

1389
03:28:42,445 --> 03:28:46,414
thread, you cannot harm the next
event, so the next event, when

1390
03:28:46,745 --> 03:28:50,302
you're scrolling a page W3C, or 
when you are clicking and so on.

1391
03:28:51,938 --> 03:28:54,793
Initially, browser had 
everything in the main thread,

1392
03:28:54,794 --> 03:28:57,089
and little by little over the 
years, they start to take things

1393
03:28:57,731 --> 03:29:01,868
out, so first of them is a video
they are encoding happening now

1394
03:29:02,132 --> 03:29:06,124
most of the time on the graphic 
card itself. There was a plug-in

1395
03:29:07,012 --> 03:29:13,034
also at this stage, kind of as a
worker and several others. What

1396
03:29:13,896 --> 03:29:19,354
is quite interesting is we have 
another piece of computer power

1397
03:29:19,625 --> 03:29:21,625
on the browser that is

1398
03:29:24,493 --> 03:29:26,493
a GPU.

1399
03:29:31,633 --> 03:29:34,244
The GPU is designed for games, 
is designed for the operating

1400
03:29:34,565 --> 03:29:38,673
system when you have a lot of 
calculations to do on a lot of

1401
03:29:39,068 --> 03:29:43,162
data. The same operation on a 
very large amount of data. And

1402
03:29:43,163 --> 03:29:46,550
it's very, very efficient for 
this kind of thing. It is very

1403
03:29:48,350 --> 03:29:50,935
efficient for gaming. On the 
browser, we have this kind of

1404
03:29:51,101 --> 03:29:55,512
operation. One of them is a 
compositing, the last bit of the

1405
03:29:56,046 --> 03:29:58,345
calculation where you have all 
the layers, and you have to

1406
03:29:58,783 --> 03:30:02,244
define which ones are visible 
enough. It's the same operation

1407
03:30:02,245 --> 03:30:07,260
a lot of the time on a lot of 
data. We decided in 2016, we do

1408
03:30:08,097 --> 03:30:13,332
offload the composition to the 
GPU, and we did it. At the same

1409
03:30:13,727 --> 03:30:15,926
time, a little bit later, in 
fact, we noticed that the

1410
03:30:18,659 --> 03:30:21,777
crashes just increased. We had a
lot of crashes. In fact, it

1411
03:30:22,312 --> 03:30:24,981
wasn't the browser itself that 
was buggy, it was the drivers

1412
03:30:25,172 --> 03:30:29,604
that were buggy, so the crashes 
were mostly happening on

1413
03:30:30,171 --> 03:30:33,661
windows, and, for example, Mac 
has had very few crashes because

1414
03:30:34,118 --> 03:30:41,191
there are far less types of 
drivers and graphic cards. So we

1415
03:30:41,192 --> 03:30:43,192
decided last year to solve the 
crashes by having the

1416
03:30:46,277 --> 03:30:49,959
GPU, the graphic drivers loading
a different process, so the

1417
03:30:50,498 --> 03:30:53,167
process crash, the browser 
detected the crash, it

1418
03:30:53,361 --> 03:30:57,047
restarted, and then it works 
without using the GPU for this

1419
03:30:57,371 --> 03:31:00,870
part. So you don't have all the 
speed improvement of the GPU but

1420
03:31:01,330 --> 03:31:05,843
you don't have the crashes, 
either. That's a way we had to

1421
03:31:06,117 --> 03:31:08,258
mitigate the bugs in graphics

1422
03:31:11,363 --> 03:31:18,363
drivers. So the come positioner 
was the first part - the

1423
03:31:18,547 --> 03:31:20,956
compositor was the part that 
went to the GPU. The painting is

1424
03:31:21,318 --> 03:31:28,857
to take a texture and apply it 
to a surface, colour ra - we

1425
03:31:29,320 --> 03:31:33,518
want to do the same. This is a 
project called web-runner - not

1426
03:31:34,229 --> 03:31:38,074
yet finished, it's in process. 
This is the ultimate goal. I

1427
03:31:38,075 --> 03:31:41,922
don't know when it will be 
finished. If you ask manage,

1428
03:31:41,923 --> 03:31:44,305
they say soon, and the 
developers say a couple of

1429
03:31:44,487 --> 03:31:46,487
years. It is somewhere in

1430
03:31:53,488 --> 03:31:55,621
between! 
don't send it to the GPU, we can

1431
03:31:55,868 --> 03:32:01,174
remove it from the main thread 
so we have what we call off-main

1432
03:32:02,196 --> 03:32:04,778
thread painting. This has been 
done in Firefox 58 which went

1433
03:32:05,031 --> 03:32:10,797
out in January, so basically we 
create a set of instructions

1434
03:32:10,963 --> 03:32:14,400
that is policed, that is 
assigned to the layers, and then

1435
03:32:14,700 --> 03:32:24,487
we send it to another process 
that is ratarized which is the

1436
03:32:24,488 --> 03:32:30,328
actual painting operation, and 
uses its own process on the GPU.

1437
03:32:30,677 --> 03:32:32,710
That way, as soon as the

1438
03:32:36,910 --> 03:32:41,205
ratarization is not on the main 
thread. We remove the

1439
03:32:41,545 --> 03:32:46,011
bottleneck. It is not as perfect
as having everything on the GPU,

1440
03:32:46,657 --> 03:32:51,759
but it's no more the problem. So
this landed in Firefox 58, and

1441
03:32:52,199 --> 03:32:56,009
there is an improvement coming 
the next version in two weeks

1442
03:32:56,423 --> 03:32:58,529
where we discovered that we 
don't need to recalculate it

1443
03:33:04,756 --> 03:33:08,868
each time.  It's simple. We have
Heweristic in place so we don't

1444
03:33:09,608 --> 03:33:12,246
have to calculate the whole of 
the display list each

1445
03:33:16,921 --> 03:33:20,589
time. We have mostly seen 
replacement of the PCs, the

1446
03:33:20,590 --> 03:33:24,409
browser. In fact, if you want to
have browsers that are as

1447
03:33:24,410 --> 03:33:29,303
efficient that feel quick, 
responsive, you need to consider

1448
03:33:29,304 --> 03:33:33,774
it as a system as a whole 
because, yes, you can have a

1449
03:33:33,775 --> 03:33:36,350
very efficient-style engine but 
maybe the bottleneck is

1450
03:33:36,873 --> 03:33:42,892
somewhere else. So we changed a 
way to do development, and to

1451
03:33:42,893 --> 03:33:49,955
prioritise the development in 
Mozilla by having the triage,

1452
03:33:49,956 --> 03:33:55,964
privatise, and we applied this, 
and we still apply this to fight

1453
03:33:56,399 --> 03:34:04,195
freeze in the UI. There is a 
collection of 30 block pass

1454
03:34:04,781 --> 03:34:06,474
variation that is explain the 
changes that happen all over the

1455
03:34:06,475 --> 03:34:10,771
place. It's going in a lot of 
details, and he coins the name

1456
03:34:11,294 --> 03:34:16,780
"death by a million cuts". We 
found bugs where we had to fix

1457
03:34:16,781 --> 03:34:22,176
ten bugs, and suddenly, we get 
back a lot of them. Each of the

1458
03:34:22,839 --> 03:34:25,302
bugs was shaving one millisecond
here or there, but no

1459
03:34:28,554 --> 03:34:30,554
significant difference, but 
together, they were giving a lot

1460
03:34:31,384 --> 03:34:33,384
of differences. One of the 
things that we change is the way

1461
03:34:34,485 --> 03:34:38,493
we were doing. It is not 
specific to Firefox at all and

1462
03:34:38,705 --> 03:34:42,234
it has been pioneered by Apple, 
and it is called

1463
03:34:42,647 --> 03:34:46,498
checkerboarding. When you scroll
on your screen with a mouse or

1464
03:34:46,984 --> 03:34:51,247
with the finger, you never want 
to scroll to stop. But

1465
03:34:52,057 --> 03:34:55,052
sometimes, it goes too quick, 
and you don't have the time to

1466
03:34:55,571 --> 03:34:57,827
calculate what you present to 
the screen, so you present a

1467
03:34:58,864 --> 03:35:02,689
default value and people, 
instead of being confused,

1468
03:35:03,660 --> 03:35:05,660
scroll less quickly. The data 
appears, the images appear, and,

1469
03:35:06,558 --> 03:35:09,720
initially, it was a 
checkerboard, which is why it is

1470
03:35:10,212 --> 03:35:14,816
called checkerboarding. The 
overall speed is not better, but

1471
03:35:15,200 --> 03:35:17,200
the feeling is completely

1472
03:35:25,620 --> 03:35:27,756
different. Another big things 
we've changed is IPC. It say

1473
03:35:28,253 --> 03:35:31,188
known for a long time that, when
you communicate with a disk, it

1474
03:35:31,189 --> 03:35:35,328
takes a lot of time, and you 
don't want to do this on the

1475
03:35:35,329 --> 03:35:38,266
hard - main thread. It is the 
same when you communicate with

1476
03:35:39,252 --> 03:35:43,466
another process, especially if 
it is a synchronous

1477
03:35:43,467 --> 03:35:48,280
communication, you don't want to
do this on the main thread. We

1478
03:35:48,281 --> 03:35:51,781
filed synchronous communication 
and we wanted to have as much

1479
03:35:52,377 --> 03:35:55,225
synchronous communication. This 
is where we did a lot of - there

1480
03:35:55,226 --> 03:35:57,226
were two people working for six 
months on the

1481
03:35:59,961 --> 03:36:04,976
cookies. Because cookies were 
needed a lot of synchronous

1482
03:36:04,977 --> 03:36:08,150
communication. They wrote the 
cookies mechanism in Firefox,

1483
03:36:08,151 --> 03:36:14,700
and, in fact, it was 25 per cent
of our blocking on interprocess

1484
03:36:14,701 --> 03:36:18,103
communication, and, on big 
websites, when it was fixed,

1485
03:36:18,104 --> 03:36:22,572
like Facebook is making several 
- writing several times per

1486
03:36:22,573 --> 03:36:27,681
second to the cookies store, in 
this website, like Twitter, or

1487
03:36:27,682 --> 03:36:34,651
Facebook, we were able to win in
the order of the second in the

1488
03:36:34,652 --> 03:36:39,176
time we made to display the 
page. There were other offenders

1489
03:36:39,636 --> 03:36:43,112
like plugins but they're gone 
today. Or the traditional

1490
03:36:43,650 --> 03:36:51,030
extension on Firefox and - often
does that, so we had to decide

1491
03:36:51,267 --> 03:36:53,267
to stop having

1492
03:36:55,723 --> 03:36:57,307
that.  
There are plenty other things

1493
03:36:57,308 --> 03:37:01,586
that we have done. For example, 
we have changed some algorithm.

1494
03:37:02,265 --> 03:37:06,805
They are still efficient but 
they were already efficient,

1495
03:37:07,545 --> 03:37:09,606
but, in fact, sometimes they 
were not making good use of the

1496
03:37:09,976 --> 03:37:15,718
cache, so we keep an algorithm 
with the same complexity, but

1497
03:37:16,331 --> 03:37:18,588
that works better with the 
cache, for example, and

1498
03:37:19,294 --> 03:37:22,547
suddenly, you have an 
improvement of your performance

1499
03:37:22,548 --> 03:37:27,572
on complex pages that are the 
same complexity of the

1500
03:37:27,573 --> 03:37:31,311
algorithm. Also, the garbage 
collection, the parts that take

1501
03:37:31,533 --> 03:37:34,681
back the memory has been 
changed. Instead of having to do

1502
03:37:35,588 --> 03:37:40,489
a complete sweep, or we can now 
do an incremental sweep, so we

1503
03:37:40,490 --> 03:37:44,282
take a bit of the memory, and we
start because we only have a few

1504
03:37:44,966 --> 03:37:47,487
milliseconds, and we continue 
later, so that means the memory

1505
03:37:47,908 --> 03:37:51,077
grows a little bit but when the 
browser is idle, it goes back to

1506
03:37:51,248 --> 03:37:53,248
normal. At the same time, we 
notice that memories

1507
03:37:56,103 --> 03:37:59,389
that is used towards the end 
very quickly and so on is the

1508
03:37:59,390 --> 03:38:03,782
one that is usually released 
very quickly, and what you have

1509
03:38:03,783 --> 03:38:07,219
done, I don't know, two hours 
before, usually, you will keep

1510
03:38:07,220 --> 03:38:11,401
it until you cross the browser. 
So we also have changed, these

1511
03:38:11,402 --> 03:38:15,725
kinds of things. 
The last thing is we tried to

1512
03:38:16,340 --> 03:38:18,340
remove all timers in the 
interface. Timers are really,

1513
03:38:21,493 --> 03:38:25,617
really bad. At first sign, first
look, it looks very nice because

1514
03:38:26,535 --> 03:38:28,535
you deal with the execution 
later, but, in fact, you don't

1515
03:38:29,247 --> 03:38:32,777
control when the execution will 
happen, and when the timer will

1516
03:38:33,355 --> 03:38:35,355
file. Not only will it fire on 
the main thread, but maybe it is

1517
03:38:35,713 --> 03:38:38,595
a moment that is important for 
something else. You have no

1518
03:38:38,596 --> 03:38:43,315
control. In fact, the web 
platform in this can be used on

1519
03:38:43,316 --> 03:38:48,058
the website. We have redressed 
idle callbacks saying fire this

1520
03:38:48,466 --> 03:38:53,107
or do this when the main thread 
is free. We also did things like

1521
03:38:54,114 --> 03:38:58,618
throttling background tabs, so, 
if it is in the back, it is less

1522
03:38:58,619 --> 03:39:00,733
important, but if there is 
mutesic playing in the back, you

1523
03:39:00,981 --> 03:39:02,981
don't want it

1524
03:39:04,989 --> 03:39:09,720
stop, so we are defensive here, 
and we progress with

1525
03:39:09,721 --> 03:39:13,566
experimentation. Finally, we 
designed our user interface.

1526
03:39:13,567 --> 03:39:15,567
So the feeling of the user 
interface is something

1527
03:39:19,450 --> 03:39:21,900
really important. The look has 
to look modern. It doesn't

1528
03:39:21,901 --> 03:39:23,901
change the indeed but the

1529
03:39:26,716 --> 03:39:30,435
perception of the speed. Every 
animation is happening on the

1530
03:39:30,436 --> 03:39:34,361
GPU, through the CSS. We had in 
the previous interface animation

1531
03:39:34,362 --> 03:39:40,181
done in JavaScript, and they 
were causing a good deal of the

1532
03:39:40,182 --> 03:39:45,374
- so that's really important 
that animation, not in

1533
03:39:45,375 --> 03:39:47,762
JavaScript on the main thread. 
We changed a bit the structure

1534
03:39:47,763 --> 03:39:52,149
of the user interface so it's 
quicker for the user to find

1535
03:39:52,150 --> 03:39:55,638
elements. It is not quicker in 
speed proper but it is quicker

1536
03:39:55,639 --> 03:40:01,909
for the user. And with all these
things together, we have now a

1537
03:40:01,910 --> 03:40:11,573
new engine. And it looks still a
nice robot but it looks much

1538
03:40:11,574 --> 03:40:16,894
more modern. And it's not 
finished. In fact, Quantum was

1539
03:40:16,895 --> 03:40:22,097
released in November but already
the next two versions of the

1540
03:40:22,098 --> 03:40:26,631
browser had more improvements, 
so web renderer is coming at

1541
03:40:26,632 --> 03:40:30,201
some point. We have other ideas 
to improve things, and, in

1542
03:40:30,202 --> 03:40:34,207
general, the browser is still 
evolving. It is not the end.

1543
03:40:34,208 --> 03:40:37,971
It's a new beginning because it 
is the first time we have now

1544
03:40:37,972 --> 03:40:43,710
this power of having a massive 
parliamentism on a browser. I

1545
03:40:43,711 --> 03:40:48,426
want to thank you for listening.
Also, you can help by installing

1546
03:40:48,986 --> 03:40:53,624
Firefox, by reporting problems, 
especially when your application

1547
03:40:53,625 --> 03:40:55,524
is slower that Firefox than 
another browser.

1548
03:40:55,525 --> 03:40:58,450
This interests us because it is 
difficult to have real live

1549
03:40:58,617 --> 03:41:03,061
data. Each time we do a commit, 
there are 2,000 hours of tests

1550
03:41:03,062 --> 03:41:08,717
going on on a farm of computers.
But it is tests.@not real-life

1551
03:41:09,120 --> 03:41:12,714
things. If you file a big and 
say you can give help by

1552
03:41:12,715 --> 03:41:17,763
reproducing it, an engineer will
be very happy. Spread the word.

1553
03:41:18,120 --> 03:41:22,455
We want as many people to use as
many browsers as possible -

1554
03:41:22,456 --> 03:41:25,828
Firefox if possible too - 
because competition is good,

1555
03:41:26,087 --> 03:41:31,078
because that's the way we 
improve speed, and Firefox is

1556
03:41:31,252 --> 03:41:33,252
the way to stay in form. Thank

1557
03:41:41,086 --> 03:41:42,934
you. [Applause].  
>> Thank you very much. That was

1558
03:41:42,935 --> 03:41:45,197
very interesting. I have so many
questions. Shall we start with

1559
03:41:49,033 --> 03:41:53,882
the easy one? How are you? 
>> I'm fine!

1560
03:41:53,883 --> 03:42:00,314
>> So, you mentioned the 
composition being offloaded to

1561
03:42:00,315 --> 03:42:04,729
the GPU but the benefit is not 
universal because the windows

1562
03:42:04,936 --> 03:42:06,936
machines seem to crash more 
because there are more different

1563
03:42:10,038 --> 03:42:13,606
drivers. You also mentioned 
composition being - painting

1564
03:42:13,607 --> 03:42:16,894
wanting to be moved to the GPU 
as well. Will it also suffer

1565
03:42:16,895 --> 03:42:18,795
from the same? 
>> Yes.

1566
03:42:18,796 --> 03:42:24,375
>> Can I then derive from that 
and say Firefox Quantum runs

1567
03:42:24,376 --> 03:42:27,105
better on Mac than a windows 
machine?

1568
03:42:27,106 --> 03:42:32,950
>> No, it's a bit more complex. 
Mac is an ecosystem which is

1569
03:42:33,222 --> 03:42:39,014
easier because there are fewer 
drivers, but the hope and the

1570
03:42:39,473 --> 03:42:41,426
reality is drivers are getting 
better and better because we

1571
03:42:41,427 --> 03:42:44,460
file drugs to the driver 
vendors. Yes, all machines,

1572
03:42:44,461 --> 03:42:50,415
especially for paint will never 
have web render working, but

1573
03:42:50,586 --> 03:42:52,586
little by little, this problem

1574
03:42:57,367 --> 03:42:59,367
will go away. 
>> Thank you. [Applause].

1575
03:43:04,596 --> 03:43:07,503
So I didn't have the list of 
speakers for the panel - I do

1576
03:43:07,504 --> 03:43:12,282
have now:  
dress dress dress, Sean Larkin,

1577
03:43:14,089 --> 03:43:19,682
Anna Henningsen, and Dan Abramov
at the panel later. If you have

1578
03:43:19,683 --> 03:43:22,629
questions that you want answers 
to, please go to

1579
03:43:26,706 --> 03:43:33,007
slido.com with the event code 
JSCONF and ask a question. We

1580
03:43:33,008 --> 03:43:35,008
will be back in

1581
03:43:40,784 --> 03:43:42,784
eight minutes. 
[Break].

1582
03:54:18,364 --> 03:54:20,364
So you can see a new house 
already before it is actually

1583
03:54:40,738 --> 03:54:44,086
being built. Or you can make a 
really cool small games on your

1584
03:54:45,109 --> 03:54:47,109
browser, on your website 
integrated it with all

1585
03:54:49,050 --> 03:54:51,050
the

1586
03:54:53,318 --> 03:54:55,165
native, environment things that 
you have, and you can make them

1587
03:54:55,166 --> 03:54:57,166
work with each other which is

1588
03:54:59,048 --> 03:55:04,246
really cool. You can also use it
to enhance your info graphics,

1589
03:55:04,853 --> 03:55:09,480
or to make your data more 
readable with enhancing it with

1590
03:55:09,927 --> 03:55:14,237
the third dimension, so you can 
also use animation time and the

1591
03:55:14,238 --> 03:55:19,007
third dimension to show 
something you would like to do

1592
03:55:19,008 --> 03:55:24,299
with your data. I think it is 
pretty interesting, and you

1593
03:55:24,300 --> 03:55:26,864
should definitely think about 
how to use it. Most developers

1594
03:55:26,865 --> 03:55:33,176
that would like to start with 
especially web VR have been

1595
03:55:34,212 --> 03:55:38,568
coming to me and asking me how 
do I get started with 3D? Why is

1596
03:55:38,953 --> 03:55:42,899
it so hard to get started for 
these people? This is what I

1597
03:55:43,170 --> 03:55:45,379
would like to talk to you about 
today. I would really love that

1598
03:55:45,777 --> 03:55:48,666
you come out of this talk and 
you have this little tool box

1599
03:55:49,124 --> 03:55:52,310
with things you have heard 
before, and you feel more

1600
03:55:53,113 --> 03:55:57,046
motivated to start trying it, 
because at first, you will be

1601
03:55:57,257 --> 03:55:59,257
overwhelmed by all the new

1602
03:56:01,227 --> 03:56:06,027
terminologies you're going to 
encounter. Not only do you have

1603
03:56:06,396 --> 03:56:09,967
now things to learn, but you're 
also going to be a movie screen

1604
03:56:10,335 --> 03:56:12,610
designer; you're going to be a 
narrator; you're going to have

1605
03:56:12,973 --> 03:56:17,993
to learn to do UX in 3D, you're 
going to learn about 3D

1606
03:56:18,305 --> 03:56:21,393
modelling, how to light a scene 
properly, et cetera, et cetera.

1607
03:56:21,696 --> 03:56:23,696
That's a lot of things to

1608
03:56:25,406 --> 03:56:27,102
learn.
I would like to talk to you

1609
03:56:27,103 --> 03:56:35,497
first about the physics of life.
So, here you see - the physics

1610
03:56:35,498 --> 03:56:38,576
of light. This is a simple 
scene. We have this apartment.

1611
03:56:39,174 --> 03:56:42,368
We see a computer standing on 
the desk. We have a chair, we

1612
03:56:42,603 --> 03:56:47,480
have a window, and, outside, we 
have the sun which is primarily

1613
03:56:47,481 --> 03:56:51,135
the source of light which makes 
us see everything. But how does

1614
03:56:51,136 --> 03:56:53,136
it actually

1615
03:57:00,367 --> 03:57:05,117
work? Every light source is 
emitting electromagnetic rays.

1616
03:57:05,118 --> 03:57:09,055
As soon as these rays are hid 
hitting an object, they're going

1617
03:57:09,385 --> 03:57:13,878
to interact with that object. 
Either the object is absorbing

1618
03:57:13,879 --> 03:57:18,287
all the light - in that case, a 
lot of energy is being produced

1619
03:57:18,886 --> 03:57:22,445
- or parts of the ray of the sun
are going to be bouncing after

1620
03:57:24,110 --> 03:57:27,041
and reflecting a different 
surfaces until that light energy

1621
03:57:27,211 --> 03:57:29,211
is

1622
03:57:32,270 --> 03:57:35,797
used up. I already said that the
electromagnetic waves consist of

1623
03:57:36,040 --> 03:57:39,754
different frequencies, so that 
means different frequencies are

1624
03:57:39,755 --> 03:57:42,784
different colours. If one 
frequency is absorbed, the other

1625
03:57:43,124 --> 03:57:47,830
two frequencies are going to hit
our eye, the retina of our eye,

1626
03:57:48,172 --> 03:57:50,172
therefore creating this colour 
in our eyes, and we can

1627
03:57:55,933 --> 03:57:58,773
see it. 
Different materials react very

1628
03:57:59,247 --> 03:58:01,891
differently, which I'm going to 
talk about the differences

1629
03:58:02,544 --> 03:58:07,749
afterwards. But there are three 
major things, as I said already:

1630
03:58:08,327 --> 03:58:10,522
absorption, reflection, and 
transmission of light. We can

1631
03:58:11,280 --> 03:58:16,836
see this here a little bit more 
graphically. Imagine you have a

1632
03:58:19,289 --> 03:58:22,329
perfect mirror which it is not 
possible, even if you polish

1633
03:58:22,561 --> 03:58:25,912
your surface very well, you're 
never going to have it, but

1634
03:58:26,272 --> 03:58:31,312
theoretically, a perfect mirror 
will reflect all the light rays

1635
03:58:31,606 --> 03:58:40,014
uniformly. This we call specular
reflection. Then we have diffuse

1636
03:58:40,371 --> 03:58:44,298
material like cloth, wood, and 
other things, that are not so

1637
03:58:44,841 --> 03:58:48,683
much reflective, so it's going 
to take the rays and bounce them

1638
03:58:48,684 --> 03:58:50,684
back in a very chaotic

1639
03:58:53,127 --> 03:58:57,299
way. And you have propagated 
light, so, if you have glass or

1640
03:58:57,300 --> 03:59:00,518
water, the light is not only 
going to reflect, it's also

1641
03:59:00,519 --> 03:59:02,519
going to transmit through the

1642
03:59:07,246 --> 03:59:11,686
solid. It creates these really 
cool effects. This is not

1643
03:59:11,687 --> 03:59:15,079
everything that defines in the 
material, but as we can see in

1644
03:59:15,080 --> 03:59:17,483
this illustration, these three

1645
03:59:20,960 --> 03:59:23,231
components make a lot of our 
real-life materials, and it's

1646
03:59:23,855 --> 03:59:25,855
never just one component

1647
03:59:27,454 --> 03:59:34,098
that is there in one material. 
For example, if you imagine you

1648
03:59:34,099 --> 03:59:38,609
have a wooden floor, that is not
polished, the rays of light are

1649
03:59:39,116 --> 03:59:44,915
going to bounce back 
chaotically. If you put a polish

1650
03:59:45,237 --> 03:59:49,865
or finish on, it will be shiny 
from specific angles. That is

1651
03:59:49,866 --> 03:59:53,624
what I really want you to think 
about when you get started with

1652
03:59:53,830 --> 03:59:56,960
3D because that's what a lot of 
people get wrong or don't think

1653
03:59:57,364 --> 04:00:02,707
about because, why would you? 
How do we now translate this

1654
04:00:12,297 --> 04:00:15,567
into computer graphics? I would 
like to go a few centuries back

1655
04:00:15,913 --> 04:00:19,073
when the first cameras were 
appearing called pinhole

1656
04:00:19,588 --> 04:00:21,256
cameras. You have a 
light-sensitive film on the back

1657
04:00:21,257 --> 04:00:26,607
of a box with a little hole 
inside. Only runway of light per

1658
04:00:26,945 --> 04:00:28,945
angle is allowed to pass through

1659
04:00:31,317 --> 04:00:34,265
that hole. It reads then the 
colour on that spot of

1660
04:00:37,471 --> 04:00:39,565
the film.
- it creates then the colour of

1661
04:00:39,566 --> 04:00:43,895
that spot on the film. We're 
also using this technique in the

1662
04:00:44,237 --> 04:00:48,319
render technique called 
raytracing, and that's what I'm

1663
04:00:49,383 --> 04:00:52,944
going to talk about. However, if
you imagine again the sun, it's

1664
04:00:53,331 --> 04:00:57,869
not only shooting one ray at a 
time, it's like a really big

1665
04:00:58,254 --> 04:01:00,355
energy source shooting down all 
these billions and billions of

1666
04:01:01,733 --> 04:01:04,942
rays at the same time. Most of 
these rays are never going to

1667
04:01:05,158 --> 04:01:09,058
hit our eye. They're never going
to hit our camera or whatever

1668
04:01:09,059 --> 04:01:12,474
specific spot we want to look 
at. So what computer graphics

1669
04:01:13,661 --> 04:01:17,975
are doing is they use a 
technique called backwards

1670
04:01:19,338 --> 04:01:22,271
raytracing, so we are tracing 
the rays, but instead of going

1671
04:01:22,672 --> 04:01:26,007
from the light source, we are 
going from our camera through

1672
04:01:26,008 --> 04:01:29,639
the pixel that we want to trace,
and we shoot the ray into the

1673
04:01:29,833 --> 04:01:33,211
scene, and we look at the first 
object that we are going to hit,

1674
04:01:33,798 --> 04:01:38,538
the closest one. From there, we 
want to see if this one object

1675
04:01:39,123 --> 04:01:42,754
is in shadow. Or if it is

1676
04:01:56,693 --> 04:01:57,600
in light. So, if the object is 
actually lit, we're going to use

1677
04:01:57,601 --> 04:02:03,002
the colour of the material that 
is defined at that space. in

1678
04:02:03,003 --> 04:02:05,976
light. So, if the object is  
Basically multiplying it,

1679
04:02:06,963 --> 04:02:09,713
simplify that, multiplying it 
with the colour of the light,

1680
04:02:09,714 --> 04:02:13,311
the intensity of the light. If 
the object is in shadow, we're

1681
04:02:13,823 --> 04:02:22,291
just going to use black for now 
as for shadow. This is very

1682
04:02:24,309 --> 04:02:26,592
simplified. Now, I also talked 
about these other things that

1683
04:02:26,929 --> 04:02:28,929
are called like

1684
04:02:30,350 --> 04:02:34,651
transmission, and reflection, so
how are we handling this in

1685
04:02:34,652 --> 04:02:40,705
raytracing? 
Imagine we want to see if we

1686
04:02:41,026 --> 04:02:45,843
have a transparent material, 
like glass, we would like to see

1687
04:02:45,844 --> 04:02:49,134
what can we see through that 
glass, and what is reflected on

1688
04:02:49,135 --> 04:02:56,203
the surface of that glass? So, 
on the impact point, we have to

1689
04:02:56,559 --> 04:02:58,559
calculate the different rays 
that we are going to trace. One

1690
04:02:58,716 --> 04:03:02,443
of those rays is going to be 
reflection ray, and one of them

1691
04:03:02,993 --> 04:03:07,493
is going to be the refraction 
ray. It's going to be, yeah, not

1692
04:03:07,959 --> 04:03:11,732
very nice the names are so 
close!  And from there, from

1693
04:03:12,479 --> 04:03:15,284
these rays, we're going to do 
another check if they are

1694
04:03:15,749 --> 04:03:19,640
hitting the next object, so, if 
the reflection ray is hitting

1695
04:03:20,898 --> 04:03:25,298
this red sphere, it's going to 
be red at that point, but the

1696
04:03:26,214 --> 04:03:29,630
refraction rays hitting the 
green sphere, so we have to

1697
04:03:30,008 --> 04:03:34,107
calculate together if we want to
have the pixel there red or

1698
04:03:34,454 --> 04:03:38,854
green. From the impact point of 
the secondary rays, we are going

1699
04:03:39,585 --> 04:03:44,186
to trace towards the sun, and 
see if these points are in light

1700
04:03:44,187 --> 04:03:46,187
or

1701
04:03:47,554 --> 04:03:50,295
not. I want you to have a moment
to look at

1702
04:03:57,283 --> 04:03:59,283
this.

1703
04:04:06,314 --> 04:04:09,095
Did everybody get it? 
[Laughter].

1704
04:04:09,096 --> 04:04:13,320
Can you come here and explain it
to me? Because this is how I

1705
04:04:13,321 --> 04:04:15,680
feel about my own code after two
weeks of not looking at

1706
04:04:19,389 --> 04:04:22,222
it!  
What you're looking at is the

1707
04:04:22,493 --> 04:04:26,012
basic implementation of a 
raytracing engine that can do

1708
04:04:26,475 --> 04:04:36,073
reflection and refraction with 
geometry primitives of spheres,

1709
04:04:36,074 --> 04:04:40,305
and I think - and this is a 
common challenge among people

1710
04:04:40,797 --> 04:04:44,482
who do computer graphics, is how
to make the most compact

1711
04:04:44,729 --> 04:04:50,020
raytracing engine that can be 
fit on a business card. So this

1712
04:04:50,296 --> 04:04:53,948
actually compiles, and I think 
that's pretty ghoul. Let's take

1713
04:04:53,949 --> 04:05:00,378
it apart a little bit. What we 
want to do is define our

1714
04:05:01,737 --> 04:05:05,177
geometry primitives. And for 
now, we're going to talk about

1715
04:05:05,704 --> 04:05:09,939
the sphere. The sphere is one of
the most easy shapes to

1716
04:05:11,034 --> 04:05:13,697
calculate at intersection. For 
that, we need a centre, a

1717
04:05:14,047 --> 04:05:16,061
radius, and we want to have 
material, because as I explained

1718
04:05:16,478 --> 04:05:19,797
before, that's the most 
interesting part. And we're

1719
04:05:20,345 --> 04:05:24,101
going to make another algorithm 
that will calculate our

1720
04:05:24,102 --> 04:05:28,896
intersection from that. If we 
are successful, we're going to

1721
04:05:29,110 --> 04:05:32,553
return both points that are 
intersecting with the sphere

1722
04:05:32,554 --> 04:05:37,423
because usually, you will have 
two of them, so the distance to

1723
04:05:37,802 --> 04:05:40,407
the closest one, and the 
distance to the furthest

1724
04:05:49,927 --> 04:05:54,345
away one. We are going to define
the geometries. Our light source

1725
04:05:55,042 --> 04:05:58,236
will also be spheres but just 
with a different material that

1726
04:05:59,980 --> 04:06:03,012
actually emit light and for that
we can test afterwards. We are

1727
04:06:03,466 --> 04:06:06,474
going to have a buffer for our 
canvas, and we're going to

1728
04:06:06,751 --> 04:06:11,398
traverse through each pixel.  
And we're going to trace for

1729
04:06:11,835 --> 04:06:15,997
each pixel one ray which is what
we did before, right?  In the

1730
04:06:16,338 --> 04:06:19,968
trace function, we want to see 
again, this is the primary ray

1731
04:06:20,476 --> 04:06:25,929
that we talked about before, and
we want to see which is the

1732
04:06:26,493 --> 04:06:31,819
closest objects. We're going to 
test the ray against every

1733
04:06:32,300 --> 04:06:35,438
object. And as a result, we get 
the nearest one back. If we

1734
04:06:35,640 --> 04:06:38,774
don't have one, we can return 
the background colour because

1735
04:06:39,193 --> 04:06:42,938
there's nothing there. And there
will never be something there.

1736
04:06:43,331 --> 04:06:45,988
That's the really cool thing 
about raytracing. You actually

1737
04:06:46,511 --> 04:06:48,511
test against the

1738
04:06:50,650 --> 04:06:53,302
whole scene. If there is an 
object there, and it's a

1739
04:06:53,303 --> 04:06:58,106
transparent or a reflective 
material, we are going to have

1740
04:06:58,107 --> 04:07:03,782
to shoot the second race for 
each of those, and we do this

1741
04:07:03,783 --> 04:07:07,435
recursively until we are 
satisfied, and usually, you

1742
04:07:07,436 --> 04:07:10,873
don't want to do this endless by
because it is going to take

1743
04:07:10,874 --> 04:07:14,085
forever. So we're going to 
decide how often you want to do

1744
04:07:14,086 --> 04:07:18,288
this recursion, and, at the end 
of that, you will test it

1745
04:07:18,737 --> 04:07:23,575
against the light and see if 
these points are in shadow or

1746
04:07:23,576 --> 04:07:25,576
not. Then you're going

1747
04:07:27,754 --> 04:07:32,456
to use the algorithm to see how 
you should calculate the light

1748
04:07:32,851 --> 04:07:34,875
together. I'm not going to 
explain that right now, but it

1749
04:07:35,555 --> 04:07:39,833
is very interesting look at. If 
it doesn't fall into this, that

1750
04:07:40,040 --> 04:07:44,155
means we are hitting a light 
source, or a diffuse material

1751
04:07:44,337 --> 04:07:49,208
that is not going to reflect on 
the different points so we can

1752
04:07:49,653 --> 04:07:52,160
break the recursion there. I did
not make another slide for this

1753
04:07:52,490 --> 04:07:55,528
because I think it is clear. 
This is the result we are

1754
04:08:03,250 --> 04:08:07,762
getting. I think it is very 
interesting to see, from this

1755
04:08:08,685 --> 04:08:13,571
rather simple algorithm, we 
already get really cool effects.

1756
04:08:14,035 --> 04:08:18,578
Like, we can really see the 
spheres which are close to each

1757
04:08:19,121 --> 04:08:22,681
other, reflecting each other. We
can see shall quotes, and we can

1758
04:08:23,470 --> 04:08:29,567
also -- we can see shadows, and 
what is behind thedows, and we

1759
04:08:29,568 --> 04:08:31,143
can also -- we can see shadows, 
and what is behind the camera..

1760
04:08:31,144 --> 04:08:34,028
this is not something that you 
see in games, for example, or in

1761
04:08:35,181 --> 04:08:38,923
different render engines. And 
why is that? We're going to get

1762
04:08:39,096 --> 04:08:43,824
to that later on. So, this was 
really easy, I think. But now we

1763
04:08:44,514 --> 04:08:48,960
want to really go realistic 
because we said before there is

1764
04:08:49,264 --> 04:08:53,685
not one ray per pixel; usually, 
the sun shoots so many rays that

1765
04:08:53,944 --> 04:08:57,567
make up one pixel of your image.
There are so many things that

1766
04:08:58,111 --> 04:09:03,217
come together, we want to have 
soft shadows. We want to use

1767
04:09:04,667 --> 04:09:07,044
multiple light sources. How are 
we going to compute these

1768
04:09:07,395 --> 04:09:12,356
together? How are we going to 
decide on what is more weighted,

1769
04:09:12,596 --> 04:09:17,543
which pixel should be what? And 
we really want to have this

1770
04:09:18,049 --> 04:09:20,386
physical correctness which means
that we have to basically bounce

1771
04:09:21,523 --> 04:09:27,150
the ray for ever until it hits 
the light source by itself.

1772
04:09:27,151 --> 04:09:30,746
Right now, we're just making a 
short cut because we just test

1773
04:09:31,260 --> 04:09:34,722
if it will be hitting the right 
or not, if there is something in

1774
04:09:34,938 --> 04:09:36,938
between

1775
04:09:42,139 --> 04:09:45,401
or not. This is going to use a 
lot of computational power.

1776
04:09:45,402 --> 04:09:51,198
Raytracing is an old technique. 
1984 was the first conference

1777
04:09:51,199 --> 04:09:55,495
that was taking this as a topic,
and since then, we are still not

1778
04:09:57,379 --> 04:10:02,561
there where we have real time 
raytraced engines that are

1779
04:10:02,562 --> 04:10:07,393
working. It has a lot to do with
this that you cannot make short

1780
04:10:07,394 --> 04:10:11,132
cuts to make it look good. You 
have to have a certain amount of

1781
04:10:12,614 --> 04:10:16,524
samples, unless you're going - 
otherwise you're going to have a

1782
04:10:17,919 --> 04:10:19,919
really noisy

1783
04:10:22,043 --> 04:10:24,372
scenery. 
So we have a lot of new light

1784
04:10:24,800 --> 04:10:29,210
sources in the room that are 
also casting rays. I would like

1785
04:10:29,640 --> 04:10:31,640
to just very

1786
04:10:34,379 --> 04:10:36,379
briefly interviews

1787
04:10:38,768 --> 04:10:43,514
to you rastarization technique. 
This is the most common real

1788
04:10:43,515 --> 04:10:46,015
time technique being used. It is
just as fundamental, this

1789
04:10:46,363 --> 04:10:48,802
technique. It has been around 
almost the same time because

1790
04:10:49,473 --> 04:10:52,617
when raytracing was introduced, 
the computational power

1791
04:10:53,057 --> 04:10:55,172
notifications good or strong 
enough. It would have taken them

1792
04:10:55,888 --> 04:10:59,546
forever to render one frame of 
an animated movie, for example.

1793
04:11:03,766 --> 04:11:05,766
So, what is interesting

1794
04:11:08,727 --> 04:11:10,727
about

1795
04:11:12,780 --> 04:11:17,561
rasteriziation, it is trying to 
find out which object is in the

1796
04:11:18,001 --> 04:11:20,001
shadow, or what is the colour of
it.

1797
04:11:26,232 --> 04:11:31,870
Raytracing is going from the eye
to the camera into the scene,

1798
04:11:31,871 --> 04:11:36,033
rasteriziation is going from the
objects from the scenery on to

1799
04:11:36,034 --> 04:11:42,144
the screen, due to perspective 
projection. So we take all the

1800
04:11:42,145 --> 04:11:49,117
numbers and all our points, and 
all our vertices and everything

1801
04:11:49,118 --> 04:11:53,775
and we project it on to the 
screen. It is currently using

1802
04:11:53,776 --> 04:11:58,336
triangles, which is also a 
rendering primitive. The cool

1803
04:11:58,768 --> 04:12:01,736
thing about triangles is that 
you can't sub divide it any

1804
04:12:02,170 --> 04:12:06,330
more. You can't make more areas 
out of it, and the area is

1805
04:12:07,539 --> 04:12:11,722
always planar, so we never have 
a perspective warp or something,

1806
04:12:12,139 --> 04:12:17,075
which makes it really cool to 
them project and test.

1807
04:12:24,063 --> 04:12:31,060
What we do with the triangles 
mapped on to the screen base,

1808
04:12:31,061 --> 04:12:33,061
we're

1809
04:12:34,683 --> 04:12:39,894
rasterizing each pixel and map 
its C value and measure how far

1810
04:12:40,229 --> 04:12:44,571
away it is from the camera, and 
if we we have transparency, then

1811
04:12:44,572 --> 04:12:49,301
we have to consider the C buffer
because that's how we're going

1812
04:12:49,302 --> 04:12:55,191
to put it together, which also 
tells us that the C buffer, so a

1813
04:12:55,499 --> 04:13:00,193
transparent object is basically 
just a look-through with a

1814
04:13:00,456 --> 04:13:06,117
different alpha value which does
not have this refraction rates

1815
04:13:06,118 --> 04:13:08,118
that are warped around in

1816
04:13:12,291 --> 04:13:16,466
this scene. Here in this image, 
you can see two basic

1817
04:13:16,911 --> 04:13:21,904
implementations:  one basic 
images of rasterization, and the

1818
04:13:21,905 --> 04:13:24,008
implementation of raytracing. 
You can already see the

1819
04:13:38,535 --> 04:13:41,148
long way, if you have played any
3D games recently, or if you're

1820
04:13:42,070 --> 04:13:44,240
working with VR, you're going to
know it is not going to look

1821
04:13:44,446 --> 04:13:44,648
like thedifference, I think. 
While rasterization has come a

1822
04:13:44,649 --> 04:13:46,340
really long way, if you have 
played any image up there, so

1823
04:13:46,341 --> 04:13:53,614
there is a lot of simulations of
real physics happening in

1824
04:13:53,929 --> 04:13:56,284
rasterization but generally, the
implementation is also a lot of

1825
04:13:56,795 --> 04:14:02,936
work to do to simulate these 
physics. But they are doing a

1826
04:14:03,121 --> 04:14:08,840
pretty good job. The only 
probably is still transparency,

1827
04:14:08,841 --> 04:14:14,045
I think. So, just a quick 
overview of the two:  raytracing

1828
04:14:14,317 --> 04:14:20,690
is mostly physically correct if 
you put a rot of efforts in it.

1829
04:14:21,275 --> 04:14:24,139
It has nice side details that 
you don't have to think about,

1830
04:14:24,369 --> 04:14:28,975
you get the soft shadows, the 
interreflections, you get the

1831
04:14:29,614 --> 04:14:31,946
caustics, but it is 
computationally heavy, so we're

1832
04:14:33,264 --> 04:14:35,910
going to use a lot of 
computation time to render

1833
04:14:36,365 --> 04:14:39,077
frames, and, if we ever want to 
do this real time, we're going

1834
04:14:39,536 --> 04:14:41,999
either have of to break it down,
or we have to make

1835
04:14:46,083 --> 04:14:49,811
cuts. 
Rasterization is super fast. It

1836
04:14:50,556 --> 04:14:55,526
is really only one 
transformation from your

1837
04:14:56,453 --> 04:15:04,119
co-ordinates to your screen-base
co-ordinates. Your GPU and your

1838
04:15:05,287 --> 04:15:09,914
computer is designed to do 
rasterization, not raytracing.

1839
04:15:10,393 --> 04:15:13,888
Pixar and most of the rendering 
people I know, they're still

1840
04:15:14,581 --> 04:15:18,274
rendering raytracing with CPUs 
because it doesn't matter to

1841
04:15:18,805 --> 04:15:22,468
them if they're three times 
faster or not. What matters is

1842
04:15:23,295 --> 04:15:25,331
that they have to change their 
tools, and they have to change

1843
04:15:28,320 --> 04:15:31,672
their engines to be supportive 
of GPUs. For just a little

1844
04:15:36,010 --> 04:15:39,150
benefit. So the physics that are
not really correct, you have

1845
04:15:39,450 --> 04:15:41,450
like approximation of what you 
can do. And you

1846
04:15:45,596 --> 04:15:49,020
have quality loss due to that. 
This is kind of the point where

1847
04:15:49,021 --> 04:15:53,319
I hope you are all, "Oh, God, 
how should I even get started?

1848
04:15:53,320 --> 04:15:58,003
It seems very complicated." I 
would like to introduce you a

1849
04:15:58,004 --> 04:16:05,298
frame tool kit, and A Frame of 
is a web tool kit where you can

1850
04:16:05,299 --> 04:16:08,509
Alf get started with making your
own 3D scenes.

1851
04:16:08,510 --> 04:16:12,646
If you're a fan of HTML, you're 
going to be really happy!

1852
04:16:12,647 --> 04:16:14,647
Because this is what it going to

1853
04:16:18,556 --> 04:16:25,024
look like. You can define the 
HTML tags. You define the sky,

1854
04:16:25,338 --> 04:16:29,639
you can put sources in if you 
want to use a sky texture. If

1855
04:16:29,890 --> 04:16:35,651
you prefer to use a sky colour, 
you can put the colour. Then you

1856
04:16:35,652 --> 04:16:40,812
have this geometry primitives, 
you have usually boxes, spheres,

1857
04:16:41,392 --> 04:16:47,291
cubes, whatever. Planes are also
very common, and you can also

1858
04:16:47,292 --> 04:16:51,088
define the lights. And that's 
where we come back to the

1859
04:16:53,643 --> 04:16:58,188
beginning, because, with this 
component, you're going to make

1860
04:16:58,497 --> 04:17:01,060
or break your scene. If your 
lighting is

1861
04:17:04,319 --> 04:17:08,789
good, you can really achieve a 
lot by just having three or

1862
04:17:08,790 --> 04:17:15,106
four, or five different objects 
in the game. And the best part

1863
04:17:15,107 --> 04:17:20,163
of A Frame is that it comes with
web VR integration, so you don't

1864
04:17:20,616 --> 04:17:24,554
have to do anything. You can 
lean back, you can import your

1865
04:17:24,555 --> 04:17:28,496
live controls, or every major 
headset is supported. Also

1866
04:17:28,497 --> 04:17:33,657
mostly every major headset 
controller is. So this is what

1867
04:17:33,658 --> 04:17:35,658
that example would

1868
04:17:39,494 --> 04:17:42,856
look like. But that did not look
very good. I mean, the

1869
04:17:43,202 --> 04:17:48,432
background does, but the 
foreground ...!  So, it's still

1870
04:17:48,860 --> 04:17:54,086
the big question in the room is 
how do I get my 3D models? That

1871
04:17:54,087 --> 04:17:56,087
is where also we come in. For

1872
04:18:00,749 --> 04:18:03,487
example, this is going to be in 
the head of your HTML. You learn

1873
04:18:04,187 --> 04:18:07,002
the external components called A
Frame components and I think the

1874
04:18:07,415 --> 04:18:10,325
open-source community is really 
doing an amazing job here

1875
04:18:10,326 --> 04:18:15,922
because you have all these 
really cool components like A

1876
04:18:16,240 --> 04:18:19,887
Frame, orbit controls, people 
building environment presets for

1877
04:18:20,126 --> 04:18:23,358
you so you can import them and 
say I would like to use this

1878
04:18:23,918 --> 04:18:30,545
pre-set. Afterwards, you can 
always use animation of each

1879
04:18:30,977 --> 04:18:35,056
attribute to change your scene 
the way you want, and if you

1880
04:18:35,626 --> 04:18:40,917
don't like HTML, you can do that
with JavaScript. So you can just

1881
04:18:40,918 --> 04:18:45,927
edit your HTML attributes 
programmatically to make them

1882
04:18:45,928 --> 04:18:48,425
animate. And this is how you're 
going to use the A Frame

1883
04:18:48,782 --> 04:18:52,393
components that are made by 
external parties, for example,

1884
04:18:52,832 --> 04:18:58,916
you can load the 3D IO furniture
of your choice, you can position

1885
04:18:59,262 --> 04:19:03,540
it because position attributes 
are generallily used for each

1886
04:19:04,811 --> 04:19:09,788
object, and you can have your 
camera, rotating around that

1887
04:19:10,288 --> 04:19:14,201
object, and you had this really 
nice background that you love so

1888
04:19:14,696 --> 04:19:16,696
much. And you just want to lay

1889
04:19:19,977 --> 04:19:24,001
in that bed with that VR 
headset. This is I think really

1890
04:19:24,563 --> 04:19:26,563
dev tool, and you should 
definitely try it out because

1891
04:19:26,754 --> 04:19:31,835
there are so many, many things 
that people are doing with this.

1892
04:19:32,216 --> 04:19:35,541
I would like to share with you a
few tips and tricks. This would

1893
04:19:35,876 --> 04:19:38,988
be a talk on its own, but this 
is what I've been asked most of

1894
04:19:39,696 --> 04:19:41,696
the time. Again, how do I

1895
04:19:44,105 --> 04:19:49,400
get my content? Should I start 
to learn Blender? That's a

1896
04:19:49,401 --> 04:19:53,015
pretty frustrating tool to 
learn. I've worked a lot with

1897
04:19:53,016 --> 04:19:55,703
Blender, but it is pretty 
powerful. However, you don't

1898
04:19:55,704 --> 04:20:01,326
have to do that because some 
people, like my co-worker,

1899
04:20:01,327 --> 04:20:07,310
Thomas, is writing an inspector 
plug-in for A Team, which has a

1900
04:20:07,311 --> 04:20:11,720
3D inspector to try out your 
values that you can then import

1901
04:20:11,721 --> 04:20:14,759
into your HTML file.
You can use this inspector

1902
04:20:15,039 --> 04:20:21,643
plug-in to get models from 
example Google Blogs. Try it

1903
04:20:22,967 --> 04:20:25,129
out, scale the models and have 
fun with

1904
04:20:29,214 --> 04:20:35,776
it. Lighting is going to make or
break your scene. I think it

1905
04:20:35,777 --> 04:20:40,329
really makes a big difference. 
If you're interested in this, I

1906
04:20:40,330 --> 04:20:45,006
have high motivations to write 
blog posts about this topic. And

1907
04:20:45,007 --> 04:20:49,324
then for the end is content 
optimisation. We are people that

1908
04:20:49,812 --> 04:20:56,577
work mostly with the web, and 
with different devices.

1909
04:20:56,578 --> 04:20:59,791
So if you start working with 3D 
for a project, think about what

1910
04:20:59,792 --> 04:21:04,640
is your target group. If you 
want to use 3D on different

1911
04:21:04,641 --> 04:21:09,740
devices at the same time, keep 
in mind you might want to design

1912
04:21:09,926 --> 04:21:13,938
it differently for whatever you 
want to do. If you want to do a

1913
04:21:14,575 --> 04:21:18,908
fast-paced game, then you have 
maybe to not be so detailed; but

1914
04:21:19,362 --> 04:21:23,953
if you want to do product, like 
you want to do a scene of your

1915
04:21:24,385 --> 04:21:26,850
product which you try to sell, 
you might want to be more

1916
04:21:27,187 --> 04:21:34,041
detailed on that. So, you should
be thinking about loading your

1917
04:21:35,376 --> 04:21:37,661
assets progressively. That means
you could have your textures in

1918
04:21:38,543 --> 04:21:42,941
different sizes or different 
formats depending on what your

1919
04:21:43,624 --> 04:21:47,047
device is capable of doing. And 
you should design for level of

1920
04:21:47,529 --> 04:21:49,529
detail. If there's an object 
near scene that you are only

1921
04:21:49,844 --> 04:21:55,140
going to see two pixels, don't 
make it have a million polygons,

1922
04:21:56,166 --> 04:22:01,375
please!  And these are all the 
lessons that we have for free

1923
04:22:02,039 --> 04:22:05,060
from game development. Also, one
other lesson that we are

1924
04:22:05,731 --> 04:22:12,002
actually doing, or that I was 
working on is we do use

1925
04:22:12,663 --> 04:22:17,564
raytracing for calculating light
simulation, for static scenery,

1926
04:22:17,977 --> 04:22:23,694
so the parts of our scenes that 
are static, we use a raytracing

1927
04:22:24,730 --> 04:22:27,416
engine to calculate in the cloud
what is our realistic light, and

1928
04:22:27,417 --> 04:22:33,945
then we put it back into the 
rasterization with the real time

1929
04:22:34,237 --> 04:22:40,916
stuff. This is a really cool 
workaround. So two takeaways and

1930
04:22:40,917 --> 04:22:44,589
then I'm done. Models, 
materials, and light do matter,

1931
04:22:45,783 --> 04:22:50,091
and this one is mostly for 
myself:  I love raytracing, it's

1932
04:22:50,416 --> 04:22:52,899
really cool, but are we ever 
going to have it real

1933
04:22:56,273 --> 04:23:01,187
time? And we are having cool 
demos on this, but it is still a

1934
04:23:01,546 --> 04:23:03,756
question in a is unanswered. 
Thank you very much for

1935
04:23:03,757 --> 04:23:05,757
listening. If there are any

1936
04:23:08,504 --> 04:23:11,753
questions, please ask my any 
time. And this is to

1937
04:23:14,836 --> 04:23:17,791
get you started. Amazing 
resources for any computer

1938
04:23:18,142 --> 04:23:21,915
graphics pioneers that would 
like to get started, and really

1939
04:23:21,916 --> 04:23:25,230
to try the engine out for 
themselves. A Frame is the tool

1940
04:23:25,400 --> 04:23:30,470
that I've been showing you if 
you want to play around, and 3D

1941
04:23:30,888 --> 04:23:37,433
IO is what we've been working 
with to provide the models.

1942
04:23:38,840 --> 04:23:41,908
Thanks.  [Applause].  
>> Thank you, Madlaina. It's

1943
04:23:42,545 --> 04:23:45,851
break time. We have 38 minutes 
from now. Everyone has to leave

1944
04:23:45,852 --> 04:23:50,256
here because we're taking down 
that wall. And switching back to

1945
04:23:50,671 --> 04:23:55,221
one main hall. So, come back at 
2.50 PM, please.

1946
04:24:00,213 --> 04:24:04,957
Ask questions on Slido.com if 
you have not

1947
04:47:20,105 --> 04:47:22,105
already done so.

1948
05:02:42,927 --> 05:02:48,220
>> Shall be? Hello! 
 you Did Hello!  this

1949
05:02:48,221 --> 05:02:50,221
>> miss

1950
05:02:54,436 --> 05:03:03,043
duo?soundproof. nothing. so  
heard Ahh!  No, we was right?

1951
05:03:03,044 --> 05:03:08,142
That on, going wall I couldn't 
hear. I there was  like a

1952
05:03:08,143 --> 05:03:10,983
concert was quiet.heard It

1953
05:03:23,248 --> 05:03:32,566
askyour panel  can post  can 
yet, you speaker

1954
05:03:33,675 --> 05:03:39,840
and youyou haven't heard 
questions for the later,

1955
05:03:39,841 --> 05:03:48,966
question on sslido.com with the 
and event

1956
05:03:49,886 --> 05:03:56,576
will be voted on code 
[Applause].  asked.

1957
05:03:56,577 --> 05:03:58,825
>> In [Inaudible]. JSCONF.

1958
05:04:04,063 --> 05:04:07,110
Solet's talk [inaudible]. Your

1959
05:04:11,340 --> 05:04:13,340
question

1960
05:04:16,767 --> 05:04:22,323
>> And we are Martin. Martin is 
a mapper, reducer. I just want

1961
05:04:22,324 --> 05:04:31,767
to say this, creator of JSFuck, 
and co-founder of Union Labs,

1962
05:04:32,381 --> 05:04:38,131
and he used to argue  JSCons.

1963
05:04:44,973 --> 05:04:46,973
Martin!  [Applause].  
MARTIN: Is it working? Yes, it's

1964
05:04:47,119 --> 05:04:52,248
working. Okay, perfect. Thanks 
for the intro. We're going to

1965
05:04:52,249 --> 05:04:58,118
start quickly with our - this is
about Daedalus. You saw it in

1966
05:04:58,119 --> 05:05:01,820
the description, it's a bit 
scriptic, but you will see a

1967
05:05:02,201 --> 05:05:06,466
pattern here during the talk, 
because we're going to focus on

1968
05:05:06,467 --> 05:05:11,726
some parts of the Greek 
mythology, and we have to have

1969
05:05:13,035 --> 05:05:15,959
the Maze as the labyrinth for 
the topic. Let's

1970
05:05:19,220 --> 05:05:24,447
get started, and let's reveal 
the topic. The topic today will

1971
05:05:24,448 --> 05:05:28,628
be creative coding in different 
ways. I talked to many people

1972
05:05:28,629 --> 05:05:31,420
already, and they have different
ideas. I try to cover many

1973
05:05:31,421 --> 05:05:35,555
aspects of creative coding now 
during this talk. The first one

1974
05:05:35,556 --> 05:05:40,333
I'm going to show is quite odd, 
it's - quite old. It's five

1975
05:05:40,334 --> 05:05:46,347
years old. It is things I show 
at JSConf in Berlin five years

1976
05:05:46,886 --> 05:05:52,223
ago. It is some script that is 
1024 characters long, an HTML

1977
05:05:52,224 --> 05:05:56,258
page, and, once you run this in 
a browser, you will see a

1978
05:05:56,259 --> 05:06:01,639
spinning globe inside of that 
page. So, that's something that

1979
05:06:01,640 --> 05:06:08,509
we call a quine, a computer 
programme that outputs its that

1980
05:06:08,510 --> 05:06:14,619
is modifying itself. You can see
this going on. Yes. Another

1981
05:06:14,620 --> 05:06:20,579
thing is this competition just 
ended for 2018, the tenth time

1982
05:06:20,580 --> 05:06:26,244
the JS competition took place 
which is a competition where

1983
05:06:26,245 --> 05:06:32,325
people can do something in 1K of
JavaScript with no external

1984
05:06:32,326 --> 05:06:36,233
resources. I just want to show 
one example because I think it

1985
05:06:36,234 --> 05:06:43,865
is a good fit here, by Johnny 
Jikanga, new on the scene, and

1986
05:06:43,866 --> 05:06:46,870
he created an animation showing 
the northern lights. I picked

1987
05:06:46,871 --> 05:06:50,952
this because we are all waiting 
for this. At least you saw it

1988
05:06:50,953 --> 05:06:53,754
virtually here.
Virtual reality. But I'm really

1989
05:06:54,807 --> 05:07:00,633
hoping to see it the next days. 
It's really cool. You can see

1990
05:07:01,203 --> 05:07:04,246
some strange patterns going on. 
I'm not going to go into the

1991
05:07:04,247 --> 05:07:07,573
detail because we don't have 
much time. They closed the

1992
05:07:08,896 --> 05:07:12,958
competition, and you're able to 
see the demo and see what is

1993
05:07:12,959 --> 05:07:18,999
going on in the background. Yes.
The second topic I want to talk

1994
05:07:19,267 --> 05:07:26,934
about is code golf. Code golf is
a mix of art, sport, and

1995
05:07:26,935 --> 05:07:30,329
programming. Because, you know, 
from the term "golf", you try to

1996
05:07:30,330 --> 05:07:35,149
hit the ball into a hole with 
the at least amount of strokes.

1997
05:07:35,320 --> 05:07:37,531
What you have here is you have a
problem that you try to solve in

1998
05:07:37,867 --> 05:07:41,892
the least amount of characters. 
So you're trying to shorten it

1999
05:07:41,893 --> 05:07:44,261
as much as possible. A good 
example here

2000
05:07:47,696 --> 05:07:54,523
is this makes Pacman, an old 
game, and like the theme we came

2001
05:07:54,900 --> 05:07:58,840
up with was we would like to 
create this Pacman game but with

2002
05:07:58,841 --> 05:08:01,579
the least amount of characters 
that we have, and one thing that

2003
05:08:01,778 --> 05:08:05,917
you usually start with is reduce
the graphics, so, instead of

2004
05:08:05,918 --> 05:08:14,992
this nice little Pacman icon, we
have an X and a dot. It's like

2005
05:08:14,993 --> 05:08:21,166
you're able to distinguish - you
can see the -

2006
05:08:21,167 --> 05:08:26,207
the dots are the things that 
you're going to collect. The 0

2007
05:08:26,452 --> 05:08:30,775
is the ghost and the X is the 
Pacman.  You can move around,

2008
05:08:44,595 --> 05:08:46,119
collect all the dots. It is as 
minimalistic, and the source

2009
05:08:46,120 --> 05:08:50,019
code is only 348bytes long. 
collect all the dots. It is as

2010
05:08:53,262 --> 05:08:57,519
This was maybe two or three 
years ago. It's not using some

2011
05:08:57,520 --> 05:09:06,045
year 6 things, so it could be 
even shorter. Another thing is

2012
05:09:08,063 --> 05:09:11,938
instead of doing something small
with the result, we pick only a

2013
05:09:12,197 --> 05:09:15,613
subset of characters and do 
something big, and it's another

2014
05:09:16,007 --> 05:09:19,198
project I'm famous for,

2015
05:09:23,966 --> 05:09:27,616
JSFuck,.js Beep here on the 
stage!  What you can do is you

2016
05:09:27,792 --> 05:09:32,074
can have a web page where you 
can enter your JavaScript, and

2017
05:09:33,057 --> 05:09:37,131
it will output code that you can
check and execute wherever you

2018
05:09:37,504 --> 05:09:39,504
like. It

2019
05:09:41,846 --> 05:09:48,522
only takes brackets, braces, 
plus and ampersand as the

2020
05:09:48,523 --> 05:09:54,202
output. And this will be the - 
so quite long, but quite

2021
05:09:54,378 --> 05:10:00,820
interesting to read. I have to 
show this because it's like a

2022
05:10:01,168 --> 05:10:03,053
fundamental principle that we 
are going to see in the next

2023
05:10:03,054 --> 05:10:06,447
example how this works behind 
the scene. So what we are doing

2024
05:10:07,110 --> 05:10:15,819
here is, if we have not an MD 
array, it will be converted into

2025
05:10:16,501 --> 05:10:21,904
naughts. If we don't have an MD 
array, we have two, and if we

2026
05:10:22,718 --> 05:10:28,787
have the same, we get the string
falls and the - the stringfalls

2027
05:10:29,010 --> 05:10:34,423
and the string - string false 
true - we can pick several

2028
05:10:34,424 --> 05:10:36,718
cashing degrees out of this 
word. Zero would be a plus in

2029
05:10:37,088 --> 05:10:40,090
the empty area, and we can pick 
out the character T. We've got

2030
05:10:40,658 --> 05:10:45,438
the character R, the character U
and the character E. If we then

2031
05:10:46,276 --> 05:10:48,907
take different words with 
different characters and combine

2032
05:10:49,236 --> 05:10:52,943
them, then we can join them 
again, and we can then create

2033
05:10:52,944 --> 05:10:57,123
new words out of this - for 
example, "alert". That's

2034
05:10:57,449 --> 05:10:59,879
something I call playing 
scrabble with the JavaScript, so

2035
05:11:00,303 --> 05:11:04,494
you have basic types, like 
undefined true, objects, also he

2036
05:11:05,178 --> 05:11:08,045
undefined, as I mentioned, and 
you can combine these characters

2037
05:11:08,603 --> 05:11:10,603
to new

2038
05:11:12,100 --> 05:11:15,034
words. One word that is super 
important here is the

2039
05:11:15,528 --> 05:11:18,948
constructor. So we can get the 
constructor as a string. And, if

2040
05:11:19,235 --> 05:11:24,598
you then take this constructor 
and place it next to an empty

2041
05:11:25,035 --> 05:11:31,103
array and call constructor 
constructor and then parsing

2042
05:11:31,862 --> 05:11:34,422
something, it is interesting 
because first place will be

2043
05:11:34,886 --> 05:11:37,141
empty area constructor which is 
basically the function, and, if

2044
05:11:37,142 --> 05:11:41,563
you have a function, and then 
take the constructor, then we

2045
05:11:41,830 --> 05:11:46,843
have the function constructor 
which lets us pass the code like

2046
05:11:47,050 --> 05:11:53,551
which is basically eval. So you 
can combine this, and like

2047
05:11:53,552 --> 05:11:56,460
execute code without writing it.
Another example that recently

2048
05:11:56,787 --> 05:12:04,216
came up is similar to JSFuck, 
uses the same mechanics, it is

2049
05:12:05,649 --> 05:12:07,649
symmetric - symmetric to 
JavaScript.  The a simple

2050
05:12:08,614 --> 05:12:15,560
example. But, every column that 
you see is symmetric. If you do

2051
05:12:15,951 --> 05:12:20,022
just reroutes here, and the see 
the first row is the words, the

2052
05:12:20,023 --> 05:12:23,100
second row is the character 
index, and the third row is to

2053
05:12:23,271 --> 05:12:28,345
add these characters. Yes, so 
you get this alert again. That's

2054
05:12:30,393 --> 05:12:34,718
it for the first part. Was there
something? No. Oh.  Yes, here it

2055
05:12:35,345 --> 05:12:41,064
is. As you might have read in 
the description of my talk, I

2056
05:12:41,065 --> 05:12:46,973
used the Daedalus writing and 
the Latin alphabet and the Greek

2057
05:12:46,974 --> 05:12:50,957
version. The next part of my 
talk was on different writing

2058
05:12:51,875 --> 05:12:57,927
systems that we have. For 
example, Greek, we have

2059
05:12:57,928 --> 05:13:01,418
Cyrillic, Arabic, Korean, we 
have Hebrew, and then Japanese,

2060
05:13:01,634 --> 05:13:03,634
and the last one. Who knows the

2061
05:13:17,026 --> 05:13:21,481
last one? It is A - I created a 
website that is able to convert

2062
05:13:21,997 --> 05:13:27,006
your input last one? It is into 
Arabish JavaScript, and you can

2063
05:13:27,007 --> 05:13:31,495
type not only different symbols,
you could write this as

2064
05:13:31,496 --> 05:13:38,654
Icelandic characters, or runes 
with your axe, you can hammer

2065
05:13:38,655 --> 05:13:43,962
them in, so you get an output 
like this which looks - but it

2066
05:13:43,963 --> 05:13:48,059
is auto -- 
Aurebesh. You can choose

2067
05:13:49,019 --> 05:13:53,621
different symbols, alpha bets, 
then did will all do what you

2068
05:13:55,701 --> 05:13:57,701
want. For example, quite 
interesting to do this, because

2069
05:14:00,699 --> 05:14:05,031
it uses this writing system, the
first ones, once you have this

2070
05:14:05,519 --> 05:14:09,561
on the iPhone or a Mac it will 
crash. While preparing my

2071
05:14:09,766 --> 05:14:12,364
presentation, I had this 
somewhere in the file system,

2072
05:14:12,365 --> 05:14:15,041
and I took some time to get it 
back because I had to install

2073
05:14:15,042 --> 05:14:17,042
some software to not display

2074
05:14:22,502 --> 05:14:25,041
it.
This is JavaScript for some

2075
05:14:25,474 --> 05:14:29,707
machines. I like this personally
because it used German words,

2076
05:14:29,877 --> 05:14:32,594
like ja nein,

2077
05:14:38,998 --> 05:14:45,991
scnit - this is Aurebesh, you 
might see this in a Star Wars

2078
05:14:45,992 --> 05:14:49,386
movie. You can play around with 
that and make it more graphical,

2079
05:14:49,991 --> 05:14:54,269
like only using underscores, 
only using the upper half of the

2080
05:14:56,405 --> 05:15:00,336
vertical repeat marker, the 
representation to write

2081
05:15:00,337 --> 05:15:05,448
variables, and to sign them with
other variables. How does it

2082
05:15:08,380 --> 05:15:11,642
work? This is the simple example
where I used the Latin alphabet,

2083
05:15:11,915 --> 05:15:17,221
and you see, they are quite 
distributed over code, and, in

2084
05:15:17,654 --> 05:15:22,611
the end, it's the same principle
as I showed you with the JSFuck

2085
05:15:23,073 --> 05:15:25,940
code, so we have strings and 
single characters out of this,

2086
05:15:25,941 --> 05:15:30,206
and then you combine them to get
the constructor, key word, and

2087
05:15:30,207 --> 05:15:35,086
then you also have a way to get 
an alert in there and execute

2088
05:15:35,087 --> 05:15:41,445
that. This is an odd one where 
we use Hebrew. Once you have

2089
05:15:41,446 --> 05:15:45,287
Hebrew words in the code, it's 
funny because browser might

2090
05:15:45,697 --> 05:15:48,847
switch depending on your browser
the writing direction. This code

2091
05:15:48,848 --> 05:15:53,947
is not read from right to left 
but from right to left, which is

2092
05:15:53,948 --> 05:15:55,948
super interesting in

2093
05:15:58,297 --> 05:16:05,114
a way. Next step. We've seen 
these variables and this, some

2094
05:16:05,115 --> 05:16:07,115
interesting ways

2095
05:16:08,630 --> 05:16:17,100
of hiding code. I think it is 
the hangul until if a bet which

2096
05:16:17,101 --> 05:16:21,864
is used in the Korean alphabet. 
They have a filler character.

2097
05:16:21,865 --> 05:16:25,326
This filler character doesn't 
take up any space, and it's

2098
05:16:25,690 --> 05:16:29,704
invisible. But you can still use
this as a variable name in

2099
05:16:29,880 --> 05:16:33,288
JavaScript. So what you have in 
the end is code that looks like

2100
05:16:33,831 --> 05:16:37,695
this, or actually, it is this. 
And it's an odd version, I

2101
05:16:37,930 --> 05:16:44,750
shortened it a bit, so this is 
alert one, and I call it the

2102
05:16:45,469 --> 05:16:48,423
invisible alert. It has some 
character but you can't read

2103
05:16:48,424 --> 05:16:54,205
what's going on here.  Is yes. 
You can do creative things with

2104
05:16:54,492 --> 05:17:01,145
that. When you see triple plus 
signs, there's something where

2105
05:17:01,472 --> 05:17:03,753
it simply adds characters 
together before you can have

2106
05:17:03,932 --> 05:17:08,440
something which looks like a fat
arrow, with the assignment of an

2107
05:17:08,441 --> 05:17:13,762
arrow function, or you can put 
backslash backslash into your

2108
05:17:14,190 --> 05:17:20,769
code. It looks like a regular 
comment but it is a regular

2109
05:17:21,934 --> 05:17:25,996
expression. So what I did is I 
combined these two aspects and

2110
05:17:26,261 --> 05:17:28,914
have something that looks like a
comma in

2111
05:17:32,566 --> 05:17:36,738
the beginning, and something, a 
bit of ping, empty string in the

2112
05:17:36,739 --> 05:17:40,957
centre of the code, you will see
what is going on, and, if I

2113
05:17:40,958 --> 05:17:42,958
reformat this, I put this

2114
05:17:45,187 --> 05:17:50,048
into a script, this is the 
source code of an HTML page, and

2115
05:17:50,049 --> 05:17:56,687
if I execute, it will show you 
the void in an animated way.

2116
05:17:56,688 --> 05:18:00,587
The missing link is here how to 
buy invisible code. This is

2117
05:18:00,588 --> 05:18:05,962
quite easy to do, so you can use
fillers or something from the

2118
05:18:05,963 --> 05:18:11,794
first ASC IoT page that still 
takes up space, but on a second

2119
05:18:12,121 --> 05:18:14,121
ASC IoT page, there

2120
05:18:18,115 --> 05:18:25,432
are -- ASC IoT page
 you can wrap them in a string

2121
05:18:25,869 --> 05:18:32,260
and you can have a small snippet
that will - so this is the code

2122
05:18:32,261 --> 05:18:34,261
we're going to use.

2123
05:18:38,355 --> 05:18:41,371
We are going to replace every 
third and sixth characters and

2124
05:18:41,372 --> 05:18:43,372
join them

2125
05:18:45,364 --> 05:18:47,364
together with the backslash.

2126
05:18:53,180 --> 05:18:58,798
To give an example. These are 
some control characters. We get

2127
05:18:58,799 --> 05:19:02,880
this percentage sign in front. 
Numbers. We strip them away, and

2128
05:19:02,881 --> 05:19:07,390
then we combine every third and 
sixth characters, and escape

2129
05:19:07,817 --> 05:19:12,063
them, and once we have that, we 
have the other one.

2130
05:19:21,464 --> 05:19:23,300
[Applause]. 
Thank you, thank you. It's just

2131
05:19:23,301 --> 05:19:25,301
the beginning!  [Laughter].

2132
05:19:28,534 --> 05:19:35,490
Let's go back to the Greek 
mythology. I showed this

2133
05:19:35,491 --> 05:19:38,472
labyrinth - I'm not sure you 
know the different between a

2134
05:19:38,473 --> 05:19:47,528
maze and a labyrinth? The has 
many ways and the - the Maze has

2135
05:19:48,032 --> 05:19:53,422
many ways and the labyrinth. The
half man and half bull is eating

2136
05:19:53,869 --> 05:19:55,869
boys and girls that enter into

2137
05:19:59,788 --> 05:20:04,590
the labyrinth. What I like here 
is that it has two aspects, it

2138
05:20:04,960 --> 05:20:08,263
is man and also the bull, and 
there is something similar in

2139
05:20:08,565 --> 05:20:15,985
programming which is called 
polyglots, which is a computer

2140
05:20:15,986 --> 05:20:19,798
programme that is written in 
different languages at the same

2141
05:20:20,294 --> 05:20:23,410
time, and depending on the 
compiler, it will execute

2142
05:20:23,411 --> 05:20:25,411
something different.

2143
05:20:30,327 --> 05:20:35,825
I thought can we build jpeg, 
HTML and CSS at the same time? I

2144
05:20:36,207 --> 05:20:38,901
created this page called 
Inception, and this is when you

2145
05:20:38,902 --> 05:20:41,268
look at it, you have this image 
in

2146
05:20:44,295 --> 05:20:48,038
there. We need to go deeper, and
you can see some characters.

2147
05:20:48,039 --> 05:20:54,144
What it does is basically, it's 
like one page with four

2148
05:20:54,145 --> 05:20:57,624
different types in it.
It's hard to explain. I'm trying

2149
05:20:57,892 --> 05:21:01,594
my best now. So, what happens is
that the browser opens the

2150
05:21:04,765 --> 05:21:11,243
file, and we will run it as an 
HTML page. This HTML page has

2151
05:21:11,244 --> 05:21:18,288
the script with the source to a 
hash. That will force it to load

2152
05:21:18,289 --> 05:21:22,377
it to the JavaScript. This 
JavaScript will write a link tag

2153
05:21:22,378 --> 05:21:26,883
also pointing to hash and 
interpret it as CSS, and this

2154
05:21:26,884 --> 05:21:31,259
CSS file then has a background 
URL which is empty which also

2155
05:21:31,837 --> 05:21:36,945
takes the same page again, and 
renders this in the browser.

2156
05:21:37,946 --> 05:21:43,398
Okay. Maybe a bit more in the 
detail. We have the HTML which

2157
05:21:44,520 --> 05:21:47,982
is - whenever we open the 
document for the first type, the

2158
05:21:49,142 --> 05:21:54,194
content type is an indicator 
what to do with that, so it's an

2159
05:21:55,023 --> 05:21:57,648
HTML file. We simply have 
something going on, but the most

2160
05:21:58,073 --> 05:22:02,277
important thing is we have to 
attack our own tag called

2161
05:22:02,861 --> 05:22:06,591
inception. And another thing 
where we have a script tag with

2162
05:22:07,600 --> 05:22:11,046
the chart set to lesson one 
which points to the same

2163
05:22:11,047 --> 05:22:15,179
picture. This is now loading the
JavaScript, and you see the

2164
05:22:15,750 --> 05:22:21,622
first variable here is a bit 
strange. It's a bit like - it is

2165
05:22:21,984 --> 05:22:26,449
an object with the property 
inception that is with the value

2166
05:22:27,355 --> 05:22:29,355
of

2167
05:22:30,495 --> 05:22:35,908
TT, and yes, the next line is 
something strange because it

2168
05:22:36,476 --> 05:22:43,200
will multiply inception with an 
object that has a property that

2169
05:22:43,201 --> 05:22:46,586
calls the function URL. So, you 
might see the problem here

2170
05:22:47,987 --> 05:22:52,040
because JavaScript will fail if 
it is not valid, and, in this

2171
05:22:52,219 --> 05:22:55,261
case, it would not be valid 
because it doesn't know the URL

2172
05:22:55,563 --> 05:23:00,733
function, and it doesn't have 
inception as a variable. What we

2173
05:23:01,087 --> 05:23:05,747
do later is we see inception and
function URL, and this will

2174
05:23:05,748 --> 05:23:10,654
hoist the thing to the top, so 
it's valid. And then, we have

2175
05:23:11,316 --> 05:23:14,792
some comments that will hide 
code that we don't need but make

2176
05:23:14,793 --> 05:23:18,388
sure that it is valid. The most 
important thing here is that

2177
05:23:18,389 --> 05:23:22,619
we're going to write a link tag 
pointing to the same page to

2178
05:23:22,907 --> 05:23:26,811
load the style sheet. So this is
the style sheet now. The same

2179
05:23:27,188 --> 05:23:34,155
page again. The first one is a 
strange selector. So it tries to

2180
05:23:34,505 --> 05:23:38,792
find a tag with this strange 
name, and then it has this other

2181
05:23:39,147 --> 05:23:41,147
equals sign.

2182
05:23:48,995 --> 05:23:52,806
It not defined but it's valid 
syntax. It will want to know

2183
05:23:52,807 --> 05:23:54,893
what is going on here. 
The third line here, this is

2184
05:23:55,127 --> 05:23:59,829
something that is not valid in 
CSS and what is happening in CSS

2185
05:23:59,830 --> 05:24:03,633
is that once the browser or once
the browser has found something

2186
05:24:03,634 --> 05:24:07,267
that it is not valid, it will 
break and not execute or follow

2187
05:24:07,735 --> 05:24:13,070
on, so it will only focus on the
second line here which is that

2188
05:24:13,734 --> 05:24:16,376
every tag inside of our 
inception tag will have the

2189
05:24:17,051 --> 05:24:22,715
background URL with the same 
page. Yes. And this now loads

2190
05:24:23,104 --> 05:24:26,177
the same page again. The jpeg.

2191
05:24:31,952 --> 05:24:35,906
The most important thing here at
the beginning, and then the

2192
05:24:35,907 --> 05:24:37,999
image data, and everything that 
you see in the green, the

2193
05:24:43,301 --> 05:24:49,406
yellow part is metadata that 
will simply be ignored in the

2194
05:24:49,768 --> 05:24:53,646
display. If we look at the hex 
editor, it looks like this, but

2195
05:24:54,093 --> 05:25:02,516
you can zoom in to see what is 
going on, FFE8 FFE1 is the eider

2196
05:25:02,727 --> 05:25:10,880
that says that is a jpeg. The 
follow two bytes, they define

2197
05:25:11,100 --> 05:25:18,914
the helpful header side, so they
- the hex header size saying we

2198
05:25:18,915 --> 05:25:25,024
take up the bites to do the -- 
take up the bytes to do the

2199
05:25:25,025 --> 05:25:29,915
thing we want to do. If we look 
at the hex presentation and, for

2200
05:25:30,633 --> 05:25:36,075
example, convert it to ACSII, we
can see that this is looking

2201
05:25:40,270 --> 05:25:42,595
similar.SCII, we can see that 
this is looking similar. This is

2202
05:25:42,981 --> 05:25:47,721
out of the defined range. As you
remember before, we forced the

2203
05:25:47,722 --> 05:25:49,722
look at 1

2204
05:25:51,749 --> 05:25:57,033
one ISO589/1 encoding, and this 
will turn our first hex codes

2205
05:25:57,034 --> 05:26:03,052
into something that is a valid 
JavaScript area, but yep. That's

2206
05:26:03,542 --> 05:26:08,789
it. So this is the page that you
will see in the end, and I call

2207
05:26:08,790 --> 05:26:10,790
this Inception. [Applause].

2208
05:26:20,277 --> 05:26:24,205
Daedalus. Maybe I have to 
explain a bit more, so this is a

2209
05:26:24,206 --> 05:26:27,094
odd picture about Daedalus. 
Daedalus, he was the inventor of

2210
05:26:28,762 --> 05:26:38,337
the first labyrinth on the 
island Crete, and he was - I'm

2211
05:26:38,632 --> 05:26:45,648
not sure if you know the story, 
son Icaru is who flew too close

2212
05:26:45,649 --> 05:26:49,456
to the son and fell into the 
see. It is a tragic story. But

2213
05:26:49,868 --> 05:26:58,716
what I want to take here is 
later, the one who got into the

2214
05:27:00,315 --> 05:27:05,034
labyrinth and tried to hill the 
Taurus. If you studied computer

2215
05:27:05,773 --> 05:27:10,440
signs, you might have come 
across the project. But what I

2216
05:27:10,658 --> 05:27:16,748
wanted to do is to draw a 
labyrinth, or tool, a maze in

2217
05:27:16,749 --> 05:27:21,428
this case, because it has many 
ways and JavaScript. This is the

2218
05:27:22,674 --> 05:27:28,083
lay-out I've chosen, and instead
of walls, I had code. This code

2219
05:27:31,214 --> 05:27:34,669
is also valid. You can copy it, 
and it will output a bigger

2220
05:27:38,166 --> 05:27:40,166
maze. To take some

2221
05:27:42,468 --> 05:27:46,154
steps further, I first tried to 
minimise it. This is now the

2222
05:27:46,155 --> 05:27:51,510
whole programme that you need to
generate this maze. It's only

2223
05:27:52,368 --> 05:27:57,872
133 bytes and it was originally 
created by EDC65. I don't know

2224
05:27:58,076 --> 05:28:03,889
his real name, unfortunately, 
but I was able to get it down so

2225
05:28:04,558 --> 05:28:08,144
we can play around with that. 
During my studies, I came across

2226
05:28:08,427 --> 05:28:10,427
a

2227
05:28:13,238 --> 05:28:15,238
project called

2228
05:28:16,905 --> 05:28:19,622
Tasors where he is known as the 
father of the information

2229
05:28:19,623 --> 05:28:25,533
theory, and he always created 
crazy machines.

2230
05:28:25,534 --> 05:28:28,013
And one example, some people say
the first example of machine

2231
05:28:28,300 --> 05:28:36,486
learning that he created was the
so-called Theseus project and it

2232
05:28:37,396 --> 05:28:40,353
had two different phases - the 
training phase and the testing

2233
05:28:40,641 --> 05:28:42,641
phase. It was

2234
05:28:44,308 --> 05:28:48,227
all working mechanically in 
1952. He could set up a maze.

2235
05:28:48,228 --> 05:28:53,273
There was a mouse in there, and 
the mouse tried to find

2236
05:28:59,260 --> 05:29:02,838
the Maze. So this is the 
exploration strategy, so you

2237
05:29:03,399 --> 05:29:07,303
see, it's bumping against the 
wall, it's moving back, and

2238
05:29:07,304 --> 05:29:12,146
tried to find this. There's the 
second thing. Once it hit the

2239
05:29:12,147 --> 05:29:16,036
goal, wherever you place the 
mouse, it will go straight to

2240
05:29:16,416 --> 05:29:20,276
the goal without bumping against
walls. And what is interesting

2241
05:29:21,951 --> 05:29:25,009
here is the algorithm behind 
because it fits on a sheet of

2242
05:29:25,729 --> 05:29:30,556
paper, and, so sum this up, the 
exploration strategy, it reads

2243
05:29:30,557 --> 05:29:35,334
the direction where it come in. 
It will rotate by 90 degrees,

2244
05:29:35,579 --> 05:29:41,128
move the mouse, and go back if 
there was a wall and do it

2245
05:29:41,501 --> 05:29:45,150
again. It will always try to 
return by 90 degrees, and then

2246
05:29:45,151 --> 05:29:51,324
try to move again. Yes, it is 
the exploration strategy, and

2247
05:29:52,337 --> 05:29:55,984
this has been proved that we 
always find the goal. Once it

2248
05:29:56,839 --> 05:29:59,798
has the goal, it switches to 
something called the goal

2249
05:29:59,799 --> 05:30:03,194
strategy, and it's the same 
thing but without the rotation

2250
05:30:03,565 --> 05:30:08,477
part, and it won't hit any wall.
So it reaches the direction

2251
05:30:09,147 --> 05:30:11,963
where it enters, or last level 
the cell, and it moves the

2252
05:30:12,151 --> 05:30:14,151
mouse, so it will go directly to

2253
05:30:17,161 --> 05:30:23,962
do both. And to put this in a 
code, it's only 256 bytes. The

2254
05:30:23,963 --> 05:30:27,927
first part is to create the 
Maze, the second part is to

2255
05:30:28,171 --> 05:30:31,112
solve this maze, and this part 
is only to render the Maze, and

2256
05:30:31,373 --> 05:30:38,153
to see what the output looks 
like, it will draw a maze with

2257
05:30:38,566 --> 05:30:43,009
hashes and the Os. They are the 
way out. It will create a maze

2258
05:30:43,437 --> 05:30:45,437
and also solve

2259
05:30:48,392 --> 05:30:52,504
the Maze. An animation to show 
you what is going on. This is

2260
05:30:52,505 --> 05:30:57,069
the representation used in the 
background. This is the more

2261
05:30:57,493 --> 05:31:00,418
visible representation where you
can see the arrows around, and

2262
05:31:00,892 --> 05:31:02,892
always turn them by 90 degrees 
until it finds

2263
05:31:09,534 --> 05:31:15,369
the goal. Five minutes left. So 
this talk was all about creating

2264
05:31:16,780 --> 05:31:21,238
the different aspects about 
creative coding, how people can

2265
05:31:21,239 --> 05:31:23,239
squeeze code, how they do

2266
05:31:25,618 --> 05:31:29,985
visual stuff, and one thing that
is important here and super

2267
05:31:29,986 --> 05:31:32,955
interesting in our language that
we use in JavaScript is the

2268
05:31:32,956 --> 05:31:34,956
community behind, because

2269
05:31:39,185 --> 05:31:42,198
everything that you see, you can
look to the source code to see

2270
05:31:42,199 --> 05:31:47,489
what is going on. In the 1980s, 
there was this scene where they

2271
05:31:47,490 --> 05:31:50,969
were trying to hide their 
source, not show how they did

2272
05:31:50,970 --> 05:31:54,304
it, and this switched in the 
JavaScript community, because

2273
05:31:54,305 --> 05:31:58,663
everything was visible, and that
is also a nice slack channel if

2274
05:31:58,664 --> 05:32:04,381
you want to get involved into 
this. Once you have there, you

2275
05:32:04,382 --> 05:32:08,583
have a form to sign up. It was 
established by

2276
05:32:15,039 --> 05:32:18,084
Maxime Auxillere. There are 
discussions coming on. People

2277
05:32:18,085 --> 05:32:22,651
are discussing how to improve 
stuff, and it's super

2278
05:32:23,122 --> 05:32:25,488
interesting. I want to use the 
last two minutes, two and a half

2279
05:32:26,610 --> 05:32:28,610
minutes, to show you more

2280
05:32:32,199 --> 05:32:35,225
demos.
Another website is popping up,

2281
05:32:35,967 --> 05:32:42,162
and what you can do here is you 
can, similar to JS Bin, so you

2282
05:32:42,163 --> 05:32:45,943
type in some code, and the 
update will be instant once you

2283
05:32:46,292 --> 05:32:53,010
type, and you have exactly 140 
characters to do something. And

2284
05:32:53,214 --> 05:32:59,648
what they also do, they provide 
you with some short cuts. For

2285
05:33:00,343 --> 05:33:04,498
Xenos, you have the capital S, 
you have the access to the

2286
05:33:05,213 --> 05:33:08,138
canvas with a C. There's also 
some savings. You have 140

2287
05:33:08,139 --> 05:33:13,170
characters left to do whatever 
you like. So it's good play

2288
05:33:13,661 --> 05:33:15,865
around. It lists the examples, 
if you can vote on this, and you

2289
05:33:16,754 --> 05:33:22,733
can see, for example, a game of 
life. 140 characters. You can

2290
05:33:23,550 --> 05:33:27,677
see a 3D fish swimming in the 
pool. That was something I was

2291
05:33:28,090 --> 05:33:31,585
working on, so we tried to find 
the shortest way to render ocean

2292
05:33:32,064 --> 05:33:34,822
waves in only 66 bytes,

2293
05:33:39,013 --> 05:33:42,078
and we have wave casting that 
fits on a business card!

2294
05:33:42,079 --> 05:33:44,079
[Applause].

2295
05:33:57,330 --> 05:34:02,446
The roller coaster, and really 
crazy example stuff. It is We

2296
05:34:02,447 --> 05:34:04,731
have this crazy tuna going on.  
like code pam, you can discover

2297
05:34:04,732 --> 05:34:07,112
them.
Once you've found something that

2298
05:34:07,955 --> 05:34:12,228
is interesting, for example, 
this piece where it will draw

2299
05:34:12,871 --> 05:34:15,149
the ball, so, it is basically a 
bit map

2300
05:34:18,412 --> 05:34:23,787
encoder, it draws the ball. You 
can use this to create your own

2301
05:34:23,788 --> 05:34:26,607
forks out of this. I create 
something different here, so I

2302
05:34:26,608 --> 05:34:28,608
had a

2303
05:34:30,165 --> 05:34:32,165
spinning globe made

2304
05:34:37,518 --> 05:34:41,248
using some formula, and another 
one come up with the spinning

2305
05:34:41,626 --> 05:34:46,437
sphere, and we tried to reduce 
this until we only had 77 bytes,

2306
05:34:46,783 --> 05:34:50,881
and I said let's combine this 
one with the bitmap rendering

2307
05:34:51,264 --> 05:34:56,453
which took some time, but, in 
the end, Matthew Henri came up

2308
05:34:56,910 --> 05:35:01,505
with the spinning world in 140 
bytes. He managed to create a

2309
05:35:01,713 --> 05:35:06,963
bitmap that looks like the world
map on a spinning sphere. This

2310
05:35:06,964 --> 05:35:10,017
was not the end, so I tried to 
do something different with

2311
05:35:10,878 --> 05:35:12,878
that, and the in the

2312
05:35:16,084 --> 05:35:20,159
end, Chun came up with the 
coloured version of that. It has

2313
05:35:20,160 --> 05:35:24,712
some glitches. The one I started
was about 500bytes that you saw

2314
05:35:24,713 --> 05:35:29,715
in the beginning, and this is 
only 140 bytes. You learn a lot

2315
05:35:29,716 --> 05:35:33,309
when you cross these examples 
and read the comments about

2316
05:35:33,310 --> 05:35:35,722
that. 
That's it. Check out Twitter,

2317
05:35:36,052 --> 05:35:38,453
and I also would say it's now

2318
05:35:43,834 --> 05:35:47,485
your turn to be creative. Some 
people ask why is it helpful not

2319
05:35:47,745 --> 05:35:50,909
only to learn more about the 
language, so you discover new

2320
05:35:51,632 --> 05:35:57,140
ways of doing things, it also 
helps you to organise codes

2321
05:35:57,575 --> 05:35:59,500
because, in the first place, you
don't compress it, you have to

2322
05:35:59,501 --> 05:36:07,058
lay out the code really nice to 
keep track of it, and one thing

2323
05:36:08,585 --> 05:36:13,254
that is also, you have to focus 
on the problem, and you have to

2324
05:36:13,451 --> 05:36:16,906
break down the problem, and 
really focus on the minimal

2325
05:36:16,907 --> 05:36:19,254
aspect in there, and this is 
something that I always take out

2326
05:36:19,474 --> 05:36:25,293
of this, and I want to give this
away to you and say, okay, try

2327
05:36:25,764 --> 05:36:27,764
this out. So, thank you, thanks 
for listening.

2328
05:36:36,025 --> 05:36:38,664
[Applause].  
Other examples are my website. I

2329
05:36:39,185 --> 05:36:42,806
will tweet about the 
presentation in a minute, and,

2330
05:36:43,343 --> 05:36:47,728
if you download this, examples 
are clickable. It will be

2331
05:36:47,990 --> 05:36:53,604
redirected to the original URL. 
No, it won't break your Mac!

2332
05:36:54,116 --> 05:36:57,770
I'm a good guy. This isn't about
bad security, it is about

2333
05:36:58,329 --> 05:37:02,262
creative fun. 
>> That was amazing. Thank you

2334
05:37:02,263 --> 05:37:06,368
so much. I'm supposed to come up
with questions that I'm so

2335
05:37:06,703 --> 05:37:11,444
mind-blown, I can't think of 
any. I've got one:  if you can

2336
05:37:11,859 --> 05:37:19,575
have dinner with any character 
from Greek mythology, who would

2337
05:37:21,540 --> 05:37:23,540
you pick? 
MARTIN: It's a good question.

2338
05:37:27,071 --> 05:37:35,793
Actually, I would have dinner 
with Pathi. He is the nephew of

2339
05:37:38,337 --> 05:37:43,524
the Dedelus, but he had a 
nephew, and he taught, he taught

2340
05:37:43,850 --> 05:37:48,805
him all the things that he knew,
and then he saw that Padix was

2341
05:37:49,348 --> 05:37:52,204
even better than him, so he was 
the one who created the circle,

2342
05:37:52,205 --> 05:37:58,070
the compass, and the crazy other
things, so Daedelus tried to

2343
05:37:58,071 --> 05:38:02,757
kill him, and he turned into a 
bird, but he was like really

2344
05:38:03,079 --> 05:38:05,659
good. 
>> You must be fun at parties!

2345
05:38:05,660 --> 05:38:10,214
MARTIN: Yeah!  
>> Thanks so much for a great

2346
05:38:10,215 --> 05:38:13,498
talk and lessons in mythology.

2347
05:38:27,471 --> 05:38:29,471
[Cheering and Applause]. 
>> What happened to your suit,

2348
05:38:32,238 --> 05:38:34,238
[Cheering and Applause]. 
>> What happened to your

2349
05:38:42,641 --> 05:38:45,171
cry.
 suit

2350
05:38:45,172 --> 05:38:46,305
We
 later, That's

2351
05:38:46,306 --> 05:38:49,087
unfortunate, I'm
>> Don't can try to find your

2352
05:38:49,088 --> 05:38:51,719
Florida?
  I guess.  sorry.

2353
05:38:56,636 --> 05:39:03,119
But ... . It's okay. In like the
maybe. 1980s,

2354
05:39:09,177 --> 05:39:15,740
webpack know that Well, 4 wasdid
youof, I outdon't want to

2355
05:39:15,741 --> 05:39:19,365
days, right? approximately 120 
hoursingfaster but I  that is I

2356
05:39:19,366 --> 05:39:23,819
five the think,sounds  hell, 
looked at better.  It's supposed

2357
05:39:23,820 --> 05:39:27,996
to be I as job and and
 think know thatsurprise, also,

2358
05:39:27,997 --> 05:39:32,652
good generic  log, don't 203 
spoil the  and had very I'm

2359
05:39:32,653 --> 05:39:39,232
change so I it asummarising so
bullet points, I'm going to do

2360
05:39:39,233 --> 05:39:42,014
to  it, going to leave it

2361
05:40:02,953 --> 05:40:12,739
it  How'stalk  everybody. last
I and like compiler web how

2362
05:40:12,986 --> 05:40:14,986
That
>> What'smany, this  [Cheering].

2363
05:40:15,090 --> 05:40:21,190
really like, maintain going? 
great. to tiny was I freaking

2364
05:40:21,191 --> 05:40:26,250
character wondered myself, from 
the title

2365
05:40:26,251 --> 05:40:33,672
Yes, thank take tricks can So 
Sean! this we this? you.

2366
05:40:34,383 --> 05:40:38,629
programme is, "Webpack talk 4:  
project know  the State ofEdge

2367
05:40:38,768 --> 05:40:42,913
working a and may a the Edge, 
teenager of the you Larkin,

2368
05:40:43,197 --> 05:40:45,641
working on the Microsoft 
manager,team,  Art." manager at

2369
05:40:45,642 --> 05:40:49,756
Microsoft, the main  But atme 
just I'm being one of time

2370
05:40:49,757 --> 05:40:54,449
DevTools.  core  as spent and 
Seanopen-sourceMicrosoft and

2371
05:40:54,450 --> 05:40:59,252
webpack CLI,  and also represent
general for Angular with and

2372
05:40:59,474 --> 05:41:03,531
now, a involvement evangelist 
sustainability, helping  with my

2373
05:41:04,270 --> 05:41:13,350
technical webpack, a I'mtired 
you all at the  is Node rogue. I

2374
05:41:13,351 --> 05:41:20,518
got Js pegoneabout myself 
foundation. So support re  was

2375
05:41:20,519 --> 05:41:23,293
That script? then Apple not 
being able a little wrotefirst

2376
05:41:23,294 --> 05:41:26,508
of to andfinally, Like, who 
internet  Ruby,woodworking and

2377
05:41:26,816 --> 05:41:31,759
people's problems. bit   like 
Then also and my programming

2378
05:41:31,760 --> 05:41:36,809
language. IObjective-C,practices
I found JavaScript.passions

2379
05:41:37,042 --> 05:41:42,620
open-source  I Butsaid,  of 
things. my  like me  most

2380
05:41:42,621 --> 05:41:45,129
sustainablefollowing. You is in 
one of  latest find that I've

2381
05:41:45,130 --> 05:41:52,407
been anywhere,general like can  
where,places.

2382
05:41:57,939 --> 05:42:01,658
of those the art. places, of the
state 4, any

2383
05:42:01,659 --> 05:42:10,543
Webpack the okay. with @the can 
find me on Back to talk,  to

2384
05:42:10,544 --> 05:42:14,853
definition. Is Larkin.  wanted
pull little

2385
05:42:14,854 --> 05:42:17,593
State of stay the do art:  I
sure.  up a we would

2386
05:42:17,594 --> 05:42:24,073
You that how what you not  call 
A I'mabout the it? tostand off

2387
05:42:24,074 --> 05:42:26,445
the stage list? talking 
development, don't want

2388
05:42:26,446 --> 05:42:32,713
We did You know, we're recent  
want of  or Itoday.guard, active

2389
05:42:33,130 --> 05:42:37,889
- release   at but  Andleast 
Garde but 4 ago. latest hours

2390
05:42:37,890 --> 05:42:46,740
Avant Webpack latest. webpack 
120 the incan release It's  it's

2391
05:42:47,352 --> 05:42:54,872
here. is out. Youmajor get it  
we  talk totoday. I want about

2392
05:42:54,873 --> 05:42:59,914
what time,decided webpack ouris 
called 4might the first anybody

2393
05:43:00,107 --> 05:43:02,009
to take You  and give 
represents. major releases a

2394
05:43:02,010 --> 05:43:04,170
Legardo. codename. This music if
webpack

2395
05:43:04,171 --> 05:43:09,980
So, I'm a whatstill so be, 
understand forelse  You in

2396
05:43:09,981 --> 05:43:17,457
college,manner without  did 
music. ourwanted flowing this

2397
05:43:17,458 --> 05:43:20,665
Legto  means, in  itthem. is  
Trivago. We got notes in a to

2398
05:43:20,666 --> 05:43:24,196
fromfor gaps sponsor, between
express  sponsors But we the

2399
05:43:24,197 --> 05:43:30,755
term  major largest to give 
opportunity  one ofso our major

2400
05:43:30,756 --> 05:43:35,412
explanation. the  theirto name 
release, and  this was

2401
05:43:38,583 --> 05:43:40,464
projects a
TheirHarmony, side,  PHP

2402
05:43:40,465 --> 05:43:42,999
Symphony, and theme. we
At Trivago  give oura name the

2403
05:43:43,000 --> 05:43:47,018
and hauled musical it what 
melody, on embodied old

2404
05:43:47,019 --> 05:43:52,324
framework was really them
expressive then tomeaning  note,

2405
05:43:53,662 --> 05:43:58,427
gaps, each Legato, to play 
without throughmeant to have

2406
05:44:03,113 --> 05:44:07,299
want more, I want explain 
webpack Before 4 in slides, at

2407
05:44:07,300 --> 05:44:11,413
each of these just  go on and 
their I your at one system. I

2408
05:44:11,414 --> 05:44:18,951
yourself, build see you to look 
or right you thereof them. If up

2409
05:44:19,976 --> 05:44:22,763
company you to stand

2410
05:44:37,004 --> 05:44:43,638
want you to give them a round of
applause. now. I [Cheering and

2411
05:44:44,242 --> 05:44:46,971
Applause]. Because, without 
piece theme, we would not be

2412
05:44:46,972 --> 05:44:51,051
here today. Webpack 4 may not 
exist. So, I just wanted to take

2413
05:44:51,381 --> 05:44:53,381
a second and recognise

2414
05:44:55,709 --> 05:45:00,531
those people. So, you know, we 
wanted to create this

2415
05:45:00,532 --> 05:45:03,672
higher-level story about webpack
4 meant for our universities,

2416
05:45:03,673 --> 05:45:07,089
meant for us, and so the first 
thing with smaller buildings and

2417
05:45:08,886 --> 05:45:10,886
faster buildings. The second was

2418
05:45:14,981 --> 05:45:16,875
modernisation. Finally, probably
one of the most important, what

2419
05:45:16,876 --> 05:45:19,384
I mean, all of these are really 
important, and not mutually

2420
05:45:19,965 --> 05:45:21,965
exclusive, which is developer

2421
05:45:24,530 --> 05:45:27,785
experience. And if I talk about 
smaller and faster buildings,

2422
05:45:28,224 --> 05:45:31,320
and we try and break it down, 
you can kind of categorise it

2423
05:45:31,679 --> 05:45:34,478
here. So like to have a smaller 
build, you're going to need to

2424
05:45:34,880 --> 05:45:36,880
do more analysis on the

2425
05:45:39,629 --> 05:45:43,236
code. 
You're going to have to process

2426
05:45:43,237 --> 05:45:46,112
more of the module graph, and 
for faster buildings, you're

2427
05:45:46,292 --> 05:45:49,981
going to have to do less work 
and reuse existing work that's

2428
05:45:50,342 --> 05:45:53,722
already been done. So these are

2429
05:45:56,730 --> 05:46:01,982
kind of conflicting, but for 
faster buildings, we - builds,

2430
05:46:03,449 --> 05:46:07,945
we rearchitected what a chunk 
is. It's the in-memory version

2431
05:46:08,184 --> 05:46:13,705
of the thing you secreted. We 
added additional features like

2432
05:46:13,925 --> 05:46:16,551
JS. We're going to be using it 
in parallel and caching it out

2433
05:46:16,552 --> 05:46:20,242
of the box. We also modernised a
lot of the pieces that we had in

2434
05:46:21,232 --> 05:46:25,020
just old ES5 objects syntax, and
we used to moving maps

2435
05:46:30,397 --> 05:46:31,205
and sets.
Significantly, one of the most

2436
05:46:31,206 --> 05:46:34,822
important is the migration of 
our plug-in system. We wrote it

2437
05:46:34,823 --> 05:46:36,823
completely from the ground

2438
05:46:38,732 --> 05:46:41,384
up. 
Now, we have what are called

2439
05:46:41,385 --> 05:46:48,039
hooks which are monomorphic 
code, and we lazy-compiled them.

2440
05:46:48,040 --> 05:46:50,883
I want to take a moment to 
explain what does this even

2441
05:46:51,080 --> 05:46:53,569
mean? Who here is familiar with

2442
05:46:56,930 --> 05:46:58,930
monomorphism or Polly

2443
05:47:02,269 --> 05:47:05,304
morp - 
this may look available to prior

2444
05:47:05,752 --> 05:47:10,564
to rewriting it. If you see 
here, this method is what

2445
05:47:11,183 --> 05:47:14,468
certain classes in webpack will 
call and plugins are listening

2446
05:47:14,469 --> 05:47:19,213
to this event, and what is 
parsing is an arbitrary event

2447
05:47:19,214 --> 05:47:22,817
stream. It is like an event 
emitter if you've ever used it

2448
05:47:23,201 --> 05:47:27,419
before. The problem is that this
is Polly morphic. It can be any

2449
05:47:28,026 --> 05:47:30,381
amount of arguments. There's no 
way for the JavaScript engines

2450
05:47:30,769 --> 05:47:32,769
to optimise this.

2451
05:47:45,334 --> 05:47:46,389
Why don't we get clever and have
single arguments for all of

2452
05:47:46,390 --> 05:47:49,952
them. You can have an infinite 
amount of different event names

2453
05:47:49,953 --> 05:47:51,258
and  Why don't we get clever and
have single argument types that

2454
05:47:51,259 --> 05:47:55,373
you can parse in, so it's 
unmaintainable and not really a

2455
05:47:55,374 --> 05:48:01,459
great contributor experience, so
it's, like, how could we solve

2456
05:48:01,460 --> 05:48:07,231
this where we are creating 
monomorphism functionings - mono

2457
05:48:07,522 --> 05:48:11,407
morphic functions but they're 
unique, and we don't have a

2458
05:48:11,578 --> 05:48:16,630
billion of them we don't have to
maintain? We use the technique

2459
05:48:16,631 --> 05:48:18,981
to lazily compile based on what 
is listening to these events. I

2460
05:48:19,210 --> 05:48:22,387
know I'm going a little deep 
here, but it might make more

2461
05:48:22,606 --> 05:48:26,328
sense in a moment. You can see 
at the bottom, we are literally

2462
05:48:26,941 --> 05:48:32,973
just composing a bunch of 
strings that our JavaScript

2463
05:48:33,364 --> 05:48:37,777
compiled to these hooks, and 
then we evaluate it. So a really

2464
05:48:37,997 --> 05:48:41,754
great resource if you're 
interested in this, and I will

2465
05:48:42,367 --> 05:48:47,614
try not to butcher the name, 
Egerov wrote a great explain

2466
05:48:47,615 --> 05:48:53,129
article that you can go to and 
take a look at it to understand

2467
05:48:53,777 --> 05:49:00,724
how this Acomb accomplishes 
monomorphic code. You may - you

2468
05:49:02,049 --> 05:49:05,715
may not need Rust and - it turns
out, that looks pretty familiar.

2469
05:49:06,091 --> 05:49:10,304
The code that he show cased. 
Look, he's doing the same thing.

2470
05:49:10,801 --> 05:49:16,766
So the point is that we can read
this monomorphic code but we're

2471
05:49:17,880 --> 05:49:23,344
doing it evaluatatively or 
lazily compiling it. Please to

2472
05:49:23,532 --> 05:49:26,728
not do it on normal projects. 
There are some parts of webpack

2473
05:49:26,990 --> 05:49:32,364
that execute 19 plumb times on 
large code basis, so everything

2474
05:49:32,543 --> 05:49:39,333
is in the hot path for us. So 
just as Benedict Moyer says,

2475
05:49:39,334 --> 05:49:44,112
don't, please don't do this. 
Please don't do this. So, like,

2476
05:49:44,309 --> 05:49:46,309
what did this

2477
05:49:52,402 --> 05:49:55,983
represent to us? 
On most webpack builds, we saw

2478
05:49:56,231 --> 05:49:59,765
it get 98 per cent faster. 98 
per cent of the build time was

2479
05:50:00,021 --> 05:50:05,321
reduced just by people upgrading
to webpack four. 98. [Applause].

2480
05:50:10,777 --> 05:50:16,829
And you will be, "John, you're 
lying - Sean, you're lying,

2481
05:50:16,830 --> 05:50:21,765
stop!" It turns out we had 
people reporting reporting six

2482
05:50:22,634 --> 05:50:27,114
hours of webpack 3, nine hours 
and stopped it at 6 on this run.

2483
05:50:27,554 --> 05:50:33,521
And so we were like, we have - 
yes, and after the showcasing

2484
05:50:34,635 --> 05:50:41,222
this in the webpack 4 alpha, we 
found 17 minutes - 17 minutes -

2485
05:50:41,768 --> 05:50:47,244
from mine hours. There's the 
URL. You can go to it. I'm not

2486
05:50:47,245 --> 05:50:53,579
lying. And just to make sure, so
that people are, "You're still

2487
05:50:54,009 --> 05:50:57,131
lying," once we had gotten to 
our release candidacy, I decided

2488
05:50:57,394 --> 05:51:03,476
to play a little game to see 
could we get people to upgrade

2489
05:51:03,872 --> 05:51:07,277
to the beta so we can catch 
early bugs, warning signs,

2490
05:51:07,278 --> 05:51:12,331
things like that? Two, it's like
this speed boost, is this for

2491
05:51:12,794 --> 05:51:20,117
real? Yes, I shot this out, and 
like we were seeing 75 per cent.

2492
05:51:20,418 --> 05:51:27,413
In some cases, we were seeing 90
per cent, 80 per cent. So it's

2493
05:51:27,691 --> 05:51:29,691
the real

2494
05:51:34,135 --> 05:51:38,734
deal. Build speed, to sum it up,
we were able to accomplish that

2495
05:51:38,735 --> 05:51:43,472
first piece in what our goals 
were. Then we still had smaller

2496
05:51:43,473 --> 05:51:46,371
builds. Now we had to do 
something basically opposite to

2497
05:51:46,372 --> 05:51:49,885
what trying to get a faster 
build will do for you. So the

2498
05:51:49,886 --> 05:51:54,315
first thing that we tried to 
implement, and we were able to

2499
05:51:55,996 --> 05:52:00,424
do so, is JSON tree-shaking. If 
you ever used JSON with webpack,

2500
05:52:00,741 --> 05:52:05,508
you will notice that, in version
3, it would bundle all the

2501
05:52:05,818 --> 05:52:10,627
pieces you import into it. We 
found out that JSON is just a

2502
05:52:10,875 --> 05:52:17,518
stricter set of what JavaScript 
is, and so we could treat it

2503
05:52:17,519 --> 05:52:21,012
like an atmospheric module, and 
only the pieces that are now use

2504
05:52:21,712 --> 05:52:26,041
will actually get - will stay in
your code. In this case, you can

2505
05:52:27,087 --> 05:52:29,514
just see, we're pulling in and 
importing one property, and that

2506
05:52:29,717 --> 05:52:32,254
is all that compiles when we 
minify

2507
05:52:36,100 --> 05:52:39,037
the code. We also have a future.
I will explain the problem

2508
05:52:39,038 --> 05:52:45,094
first. So, according to module 
specification, or the Harmony

2509
05:52:45,095 --> 05:52:50,448
module spec, when you have 
multiple exports inside of a

2510
05:52:50,449 --> 05:52:55,880
file, every single one of them 
has to be evaluated and executed

2511
05:52:56,406 --> 05:52:59,833
to ensure that they are not 
creating side effects against

2512
05:53:00,190 --> 05:53:02,190
each other. So what does that

2513
05:53:05,085 --> 05:53:08,444
mean? Well, if low dash is 
exporting from a file

2514
05:53:08,445 --> 05:53:11,748
essentially 1,000 exports, each 
one of them has to be included

2515
05:53:12,101 --> 05:53:14,101
into your

2516
05:53:16,275 --> 05:53:18,275
bundle. You can see that here in
this tiny

2517
05:53:22,206 --> 05:53:24,008
example. 
We created this trick. We had to

2518
05:53:24,009 --> 05:53:27,189
tell the compiler some way there
are no side effects here, you

2519
05:53:27,547 --> 05:53:30,389
can go ahead and ignore those 
properties. So that is what we

2520
05:53:31,148 --> 05:53:35,222
did. We created the side effects
property which now we're asking

2521
05:53:35,223 --> 05:53:39,011
library authors to include in 
their package JSONs because what

2522
05:53:39,372 --> 05:53:43,360
webpack will do in production 
mode is it will look for the

2523
05:53:43,361 --> 05:53:47,563
presence of this report, and it 
will simply prune it out. And,

2524
05:53:48,041 --> 05:53:51,936
in fact, it actually makes 
buildings faster when we're in

2525
05:53:52,537 --> 05:53:56,011
the beta stage that we found our
production builds were faster

2526
05:53:56,012 --> 05:53:58,532
than the development mode build 
because of this feature, because

2527
05:53:58,933 --> 05:54:05,557
what you're doing is ignoring 
tracing those parts of the - so,

2528
05:54:07,510 --> 05:54:12,231
in this case, we thought 
something like in webpack 3,

2529
05:54:12,559 --> 05:54:16,053
200kb of minimised code turned 
actually to 1kb.

2530
05:54:20,303 --> 05:54:24,645
So, really all you need to do, 
it's so easy, all you have to do

2531
05:54:25,017 --> 05:54:29,973
is just tree-shake, minimise, 
and then package authors had the

2532
05:54:30,190 --> 05:54:33,532
side side effect. No!  That's 
ridiculous. You should not have

2533
05:54:34,075 --> 05:54:36,814
to do any of that. That kind of 
gets into what developer

2534
05:54:36,815 --> 05:54:40,104
experience is about. All you 
should have to do is freaking

2535
05:54:44,230 --> 05:54:49,133
run webpack. So out of the box 
now in webpack 4, we default to

2536
05:54:49,471 --> 05:54:53,153
a production mode. All of those 
things you saw in that bullet

2537
05:54:53,366 --> 05:54:58,854
point, they just happened. So 
developer experience to us meant

2538
05:54:58,855 --> 05:55:02,396
we need to lower the barrier to 
entry to people who are trying

2539
05:55:02,708 --> 05:55:06,635
these tools for the first time. 
Not everybody understands the

2540
05:55:07,857 --> 05:55:10,817
rigorous and obnoxious history 
of JavaScript modules where they

2541
05:55:11,255 --> 05:55:13,892
started and where they are now. 
We also need to have better

2542
05:55:14,315 --> 05:55:19,286
defaults, and thanks to 
libraries like Parcel, we can

2543
05:55:19,593 --> 05:55:27,450
coin something like zero config 
JS. For us, zero config doesn't

2544
05:55:27,749 --> 05:55:30,754
mean doing whatever you want and
shoving it into one package and

2545
05:55:30,928 --> 05:55:33,427
hope in the future you don't use
breaks and cause the major

2546
05:55:33,769 --> 05:55:35,769
breaking change, it means being

2547
05:55:38,549 --> 05:55:45,159
able to actually extend a base 
scenario to your users, so you

2548
05:55:45,160 --> 05:55:49,644
can bring your own zero config 
JS. This is the line that we

2549
05:55:50,825 --> 05:55:55,687
wanted to cross. So, you know, 
by default, you don't need a

2550
05:55:56,058 --> 05:56:01,993
webpack configure to use webpack
4. Every property has been

2551
05:56:03,290 --> 05:56:05,290
defaulted. And what the future -

2552
05:56:13,977 --> 05:56:16,924
[Applause].  What I'm trying to 
say shall not everyone will end

2553
05:56:17,210 --> 05:56:20,604
up ripping up their webpack 
because the power of webpack is

2554
05:56:21,670 --> 05:56:24,889
deeply rooted in how extensible 
we are.

2555
05:56:28,245 --> 05:56:32,518
Instead, why don't we extend 
this idea? We created this

2556
05:56:32,519 --> 05:56:36,868
feature called mode. It's a 
property on the config or a flag

2557
05:56:36,869 --> 05:56:41,029
that you can pass on the CLI, 
and we default to production,

2558
05:56:41,030 --> 05:56:43,072
like I said. What it represents 
for development is you want to

2559
05:56:43,430 --> 05:56:46,104
have tooling for the browser. 
You're going to want to have

2560
05:56:46,436 --> 05:56:48,791
really fast incremental 
compilation, and you're going to

2561
05:56:49,394 --> 05:56:53,188
have better error messages that 
don't take up an entire console.

2562
05:56:54,861 --> 05:56:59,516
And then for production, we are 
optimising for size. We are

2563
05:57:00,880 --> 05:57:04,594
optimising for the right kind of
source code, and we are opt

2564
05:57:05,111 --> 05:57:08,950
missing for file paths that are 
understandable but don't leek,

2565
05:57:08,951 --> 05:57:12,797
you know, information - don't 
leak the information to people

2566
05:57:13,523 --> 05:57:15,434
using your website. It also 
means getting rid of things that

2567
05:57:15,435 --> 05:57:21,666
really used to cause us 
problems. Webpack 4, it's gone.

2568
05:57:21,667 --> 05:57:25,052
We've replaced it with an API 
that does much of this out of

2569
05:57:25,053 --> 05:57:27,904
the box by default. But on top 
of that, we have properties that

2570
05:57:27,905 --> 05:57:35,741
give you more control than 
common chunks did. Then finally,

2571
05:57:36,619 --> 05:57:39,340
build speed was something we 
took so seriously, that we

2572
05:57:39,341 --> 05:57:43,342
wanted to be able to profile and
analyse really deeply any

2573
05:57:44,523 --> 05:57:50,886
long-running build. And so, we 
worked with Sam Siconi from

2574
05:57:50,887 --> 05:57:54,478
Google who helped us implement a
special profiler that allows you

2575
05:57:54,479 --> 05:57:59,675
to see every plugin and how long
it takes, right inside of the

2576
05:58:00,530 --> 05:58:02,530
DevTools timeline viewer online.
[Applause]

2577
05:58:16,057 --> 05:58:18,719
You. It allows us to say pop in 
a plug-in and send us the event

2578
05:58:18,720 --> 05:58:21,247
in the JSON file. It is really 
useful for those who You. It

2579
05:58:21,248 --> 05:58:23,927
allows us to are creating 
plugins themselves, and trying

2580
05:58:23,928 --> 05:58:25,928
to

2581
05:58:29,323 --> 05:58:32,084
analyse interactions. That kind 
of leaves us to the

2582
05:58:32,085 --> 05:58:34,828
modernisation and the 
architecture. Is to so, one of

2583
05:58:34,829 --> 05:58:37,680
the most important things that 
held us back in webpack 3 is

2584
05:58:37,681 --> 05:58:39,681
that we treat everything as a 
JavaScript

2585
05:58:43,125 --> 05:58:48,731
module. But we also were 
championed with being able to

2586
05:58:48,732 --> 05:58:51,417
implement web assembly as a 
first-class citizen, giving us

2587
05:58:51,418 --> 05:58:57,165
the opportunity to remove all of
these everything is.js hacks, or

2588
05:58:57,545 --> 05:59:05,980
- everything is JS hacks or 
allowed us to WASM and a method

2589
05:59:07,364 --> 05:59:13,728
actual type and enable JSON, and
we are now working on HTML and

2590
05:59:14,081 --> 05:59:17,379
CSS module types. We had to 
remove from our module factories

2591
05:59:17,582 --> 05:59:20,013
what we call them all the code 
generation systems that were

2592
05:59:21,191 --> 05:59:27,137
specific to JavaScript, and we 
isolated it. And so now, with

2593
05:59:27,338 --> 05:59:30,723
web assembly as a first-class 
module type, you have code like

2594
05:59:30,724 --> 05:59:39,349
this. This is a newer library 
called Walt. It is a

2595
05:59:40,822 --> 05:59:44,522
subset of TypeScript. It allows 
you to write a JavaScript-like

2596
05:59:44,523 --> 05:59:46,523
syntax, as you see at

2597
05:59:48,561 --> 05:59:51,035
the top, is it and all you have 
to do is import it like a

2598
05:59:51,036 --> 05:59:55,893
JavaScript module into your 
code. You have used web assembly

2599
05:59:55,894 --> 06:00:00,931
without doing anything else at 
your fingertips.

2600
06:00:00,932 --> 06:00:03,315
[Applause].  This is probably 
one of the most exciting things

2601
06:00:03,585 --> 06:00:07,378
to me is that you want to use A 
Frame or you want to use these

2602
06:00:07,920 --> 06:00:11,517
things. Now, what these library 
authors can do is instantly

2603
06:00:11,766 --> 06:00:15,005
compile a web assembly module, 
and, if it's available in the

2604
06:00:15,006 --> 06:00:17,858
package, webpack will consume 
that instead of the JavaScript.

2605
06:00:17,859 --> 06:00:23,887
So you get the 10x speed-up 
instantly at your fingertips. So

2606
06:00:23,888 --> 06:00:29,268
the other pieces were dropping 
Node 4, so that is no longer

2607
06:00:29,869 --> 06:00:32,162
supported for webpack and Node 6
is our minimum version. But this

2608
06:00:32,430 --> 06:00:37,649
allowed us to convert the rest 
of the code base to using ES6

2609
06:00:38,107 --> 06:00:41,454
features. It allowed our code to
be more readable. Easier to

2610
06:00:42,080 --> 06:00:45,815
change. Using syntax that people
understand and contributors

2611
06:00:46,556 --> 06:00:50,192
actually want to leverage. And 
now, you know, by using this new

2612
06:00:50,999 --> 06:00:55,977
code, V8 has a great test bench 
for optimising paths that aren't

2613
06:08:35,046 --> 06:08:37,046
That was great for our team who 
own the score

2614
06:08:55,723 --> 06:08:58,941
loaders, but it was a lot harder
for third party

2615
06:09:05,516 --> 06:09:07,714
plugins. 
>> We will focus more on

2616
06:09:08,223 --> 06:09:10,223
providing plugins and updating, 
versus having a

2617
06:09:23,900 --> 06:09:29,581
moreJavaScript no see this year 
of  being talk of this fatigue.

2618
06:09:33,543 --> 06:09:35,543
time window.

2619
06:09:37,242 --> 06:09:41,082
Instead,  The technology. part
embracing the every our most we

2620
06:09:41,614 --> 06:09:43,863
what framework it's beautiful  
oflanguage is that without

2621
06:09:43,864 --> 06:09:47,366
weeks. In see a new yet you two 
exist otherto doesn't no other

2622
06:09:47,367 --> 06:09:49,976
is  language do that  get  use 
count!  There Java VM syntax

2623
06:09:49,977 --> 06:09:53,993
doesn't youthis. a that for  
language. It growthpeople

2624
06:09:53,994 --> 06:09:57,894
becauseRenaissance. And embrace 
JavaScript even a  is a we We it

2625
06:09:58,290 --> 06:10:03,735
Microsoft. so, at We callmind 
set ask you to

2626
06:10:07,144 --> 06:10:11,267
guys so  another you do the same
ﾣ . Help not just be build tool.

2627
06:10:11,268 --> 06:10:17,524
Thank webpackmuch. Yeah,

2628
06:10:20,649 --> 06:10:22,649
and try

2629
06:10:40,020 --> 06:10:46,221
>> Okay, ahead. Yes. 
>>  I know that webpack  4,

2630
06:10:46,222 --> 06:10:51,480
dealing wise to some on tried
>>  your the wordsget weevenof

2631
06:10:51,560 --> 06:10:55,244
with those?  So, to  I think 
best is then wayfor things and

2632
06:10:55,245 --> 06:10:58,697
started channel  thecreate it 
like a doing, unified talking

2633
06:10:58,698 --> 06:11:01,099
about before documentation.that 
we've been So, one you into the

2634
06:11:01,100 --> 06:11:05,458
can provide resources just gets 
like, "John, like beon and blast

2635
06:11:06,949 --> 06:11:12,186
me  Twitter  Ionewhat do but you
I do?"  will send you  of these

2636
06:11:12,199 --> 06:11:19,084
resources tocan go
medium.com/webpackchanges,  and

2637
06:11:19,085 --> 06:11:23,091
migrate making to posts are 
webpack cause howwould the

2638
06:11:23,172 --> 06:11:27,126
reaching andas   either might  
them,  other things GitHub or

2639
06:11:27,127 --> 06:11:29,380
that say best last available 
problems. Beyond that on be to

2640
06:11:29,381 --> 06:11:32,309
we would as the just an issue we
way,way. can forward be out us

2641
06:11:32,310 --> 06:11:38,824
four that is  Weresources try to
and possible onnot Twitter,   a

2642
06:11:38,825 --> 06:11:41,597
and you
>> or other one, things.

2643
06:11:41,598 --> 06:11:43,159
Awesome, thank you.webpack  
serious

2644
06:11:43,160 --> 06:11:50,964
>> I I think have a one! starred
most serious the on is one of

2645
06:11:50,965 --> 06:11:52,965
projects open-source

2646
06:11:56,063 --> 06:12:00,477
being GitHub. It a really big 
get What wouldcommunity effort.

2647
06:12:00,478 --> 06:12:04,554
you to  any advisetrying like 
someone who wanted to is

2648
06:12:04,555 --> 06:12:06,555
involved,
>>entry-level on  wayand diverse

2649
06:12:06,678 --> 06:12:09,441
to contribute?   focused the  
Yes, one ofthings Absolutely.

2650
06:12:09,630 --> 06:12:13,832
doesn't inclusive  we really 
thatalthough to create an  so

2651
06:12:13,833 --> 06:12:16,961
communityintimidating 
intimidating,  codefirst feel be

2652
06:12:16,981 --> 06:12:24,384
check out our  can  isthe 
sometimes, the place we say the

2653
06:12:24,385 --> 06:12:27,416
has Mediumcontributingcodes our 
read me whichpublication, we  On

2654
06:12:28,642 --> 06:12:34,028
guidelines and ofcalled conduct.
what  overview of give have a It

2655
06:12:34,138 --> 06:12:37,467
thing like whole the guide. you 
package will you the and, if

2656
06:12:37,468 --> 06:12:41,390
thiscertainto expect, tryacross 
two  have  organisations things,

2657
06:12:41,702 --> 06:12:46,346
Because we out. forpackages. And
point whole  people 100 the

2658
06:12:46,347 --> 06:12:51,768
different open like about that  
so, is is us a know, regardless

2659
06:12:51,769 --> 06:12:54,771
of  you source come skills who 
have something, those they

2660
06:12:54,772 --> 06:12:58,286
applyingpassion for andbetter, 
and wherefind different  and, we

2661
06:12:58,647 --> 06:13:03,493
webpack to a way like that makes
and  SPG an expert, so, or no

2662
06:13:03,494 --> 06:13:05,779
try or or writing, 
opportunities, matter if

2663
06:13:05,780 --> 06:13:08,092
designer, you're aif you are a 
anything!

2664
06:13:11,158 --> 06:13:15,073
>> so impact.  well And find 
imply that way veryready can

2665
06:13:15,074 --> 06:13:17,528
try to we're a think was that 
you I

2666
06:13:17,529 --> 06:13:23,308
Thank Sean. That said.  next 
you, for our

2667
06:13:45,059 --> 06:13:47,059
speaker.

2668
06:13:56,146 --> 06:13:57,385
on]. 
>> Sarah's very accomplished,

2669
06:13:57,386 --> 06:13:59,681
and award-winning speaker,

2670
06:14:03,872 --> 06:14:05,951
writer, author, senior cloud 
developer, advocate at

2671
06:14:05,952 --> 06:14:10,159
Microsoft, and I mean, I don't 
think I need to list any more

2672
06:14:10,403 --> 06:14:12,403
accomplishments, because it is

2673
06:14:24,862 --> 06:14:27,409
a long list.. let's hear it from
Sarah. [Applause].  I

2674
06:14:27,410 --> 06:14:30,668
>> I want to thank the MCs and 
the organisers for having such a

2675
06:14:30,669 --> 06:14:32,093
long list.. let's hear it from a
great conference, so give them a

2676
06:14:32,094 --> 06:14:37,072
round of applause!  [Applause]. 
I'm going to ask something of

2677
06:14:37,437 --> 06:14:39,437
you. Everyone in this room, I 
would appreciate it if you would

2678
06:14:39,789 --> 06:14:42,683
take your phones out and hold 
them in your hands. You can do

2679
06:14:45,778 --> 06:14:47,778
turned

2680
06:14:50,601 --> 06:14:52,601
it!  Pass your phone to the 
person

2681
06:15:06,581 --> 06:15:08,581
on your right. Look at that 
phone, feel it, recognise

2682
06:15:10,731 --> 06:15:13,207
it, but you almost can't do 
that, right? Because you're on

2683
06:15:13,208 --> 06:15:14,223
your right. Look at that phone, 
feel it, so distracted thinking

2684
06:15:14,224 --> 06:15:17,748
about your phone in someone 
else's hands.

2685
06:15:17,749 --> 06:15:21,265
Oh, it's awful!  It's just 
awful!  And the thing that I

2686
06:15:21,481 --> 06:15:24,256
want to bring up here is that 
the reason that we feel this way

2687
06:15:24,257 --> 06:15:30,614
is that our phones are now an 
extension of ourselves. These

2688
06:15:30,973 --> 06:15:35,455
phones become who we are, and 
our connection to that data.

2689
06:15:35,896 --> 06:15:38,392
Pete Spark makes this point when
he talks about designing for

2690
06:15:39,371 --> 06:15:41,900
human computer interaction, 
which we will talk a little bit

2691
06:15:42,873 --> 06:15:45,482
about today when he talks about 
our relationship with

2692
06:15:45,759 --> 06:15:48,209
technology, but we're going to 
talk about it with a different

2693
06:15:48,526 --> 06:15:52,324
stint. We're not going to talk 
about the device itself but how

2694
06:15:52,325 --> 06:15:54,920
we relate to the peck logical 
advances. You can pass the

2695
06:15:59,441 --> 06:16:01,743
phones back now!  There are a 
lot of different takes about

2696
06:16:02,599 --> 06:16:05,090
living our lives increasingly 
online, and, if you're in this

2697
06:16:05,091 --> 06:16:09,507
room, chances are, as we adopt 
things digitally, you got

2698
06:16:09,845 --> 06:16:12,274
excited. We were thinking about 
all the things that we could

2699
06:16:12,275 --> 06:16:16,480
build or make, and carriosity 
for how we can represent

2700
06:16:16,481 --> 06:16:18,481
ourselves online.

2701
06:16:19,845 --> 06:16:24,442
[Music]. We have geocities which
is like a bastion of internet

2702
06:16:24,443 --> 06:16:27,012
explosion. I can't make 
something this good.

2703
06:16:27,013 --> 06:16:31,844
Nobody can. That's just it. We 
reached the pinnacle right at

2704
06:16:31,845 --> 06:16:36,266
the beginning. Then MySpace. 
Everyone was friends with Tom,

2705
06:16:36,765 --> 06:16:39,721
and in putting this talk 
together, I revisited mine which

2706
06:16:39,722 --> 06:16:44,616
was a time capsule to terrible 
bangs, weird old art pictures,

2707
06:16:44,962 --> 06:16:48,041
and weird pictures of me in a 
bathroom. I don't know. It was a

2708
06:16:48,498 --> 06:16:52,365
phase. Some people might not 
have started developing with

2709
06:16:52,992 --> 06:16:56,994
dragon ball Z but they started 
because they wanted to be elite

2710
06:16:57,327 --> 06:17:00,021
hackers so good at programming 
that their fingers were

2711
06:17:00,022 --> 06:17:02,253
literally on fire. Whatever our 
interests were, the internet

2712
06:17:02,254 --> 06:17:06,856
allowed us to explore and share 
our lives and express ourselves

2713
06:17:07,398 --> 06:17:13,012
in creative, bizarre, 
interesting, and unique ways

2714
06:17:13,013 --> 06:17:18,279
that only a collectivity of 
humans could imagine. But the

2715
06:17:18,743 --> 06:17:22,574
only constant is change. Soon, 
we had so many ways of being

2716
06:17:23,216 --> 06:17:25,966
represented online, and so many 
people were online, that we

2717
06:17:25,967 --> 06:17:29,015
needed to automate these tasks. 
We need something that could

2718
06:17:29,588 --> 06:17:32,730
analyse, build, manage, and sort
for us. And, as things become

2719
06:17:33,594 --> 06:17:36,332
more complicated, what we 
realise is all of our lives

2720
06:17:36,799 --> 06:17:39,692
become summations of these 
digital models. We become pieces

2721
06:17:39,914 --> 06:17:43,167
of someone else's algorithms 
which means we could be

2722
06:17:43,499 --> 06:17:47,850
summarised in a single way. So, 
people are starting to use

2723
06:17:48,138 --> 06:17:52,109
search engines rather than 
libraries or teachers to make

2724
06:17:52,484 --> 06:17:55,300
sense of the world we're 
inhabiting. These inaccuracy

2725
06:17:55,556 --> 06:17:58,915
started to be reflected in what 
we learn and believe in. They

2726
06:18:00,402 --> 06:18:04,146
become our societies and our 
education. Tech can be super

2727
06:18:04,337 --> 06:18:06,711
magical in this way, right? It's
such a cool thing that we can

2728
06:18:07,210 --> 06:18:09,975
all be here together for the 
same reason in Iceland. But just

2729
06:18:10,207 --> 06:18:13,550
like any other software we 
write, the more magic it

2730
06:18:13,953 --> 06:18:15,953
contains, the more it can

2731
06:18:19,864 --> 06:18:24,245
fail. 
I'm Sarah Drasner, and I work or

2732
06:18:24,766 --> 06:18:30,825
Microsoft. Today's talk is 
called Live and Machine Learn.

2733
06:18:30,826 --> 06:18:32,826
[Applause].

2734
06:18:33,871 --> 06:18:37,667
In this talk, we will explore 
the paradigm shift that

2735
06:18:37,668 --> 06:18:40,729
machine-learning brings and do 
that through how machine

2736
06:18:41,390 --> 06:18:44,213
learning works. We don't have a 
tonne of time to go into it, but

2737
06:18:44,532 --> 06:18:48,159
we're going to talk about 
challenges to democracy through

2738
06:18:48,441 --> 06:18:50,441
machine-learning. We are also 
going to talk about

2739
06:18:50,526 --> 06:18:54,136
machine-learning for good. 
Machine-learning does a lot of

2740
06:18:54,137 --> 06:18:57,057
cool things, and we're going to 
talk about those too. We're

2741
06:18:57,432 --> 06:19:00,172
going to talk about some of the 
practical tech that we all know,

2742
06:19:00,521 --> 06:19:02,969
so not necessarily 
machine-learning but how we can

2743
06:19:02,970 --> 06:19:06,995
make a difference with some of 
the things that we know today.

2744
06:19:07,185 --> 06:19:10,264
Let's talk on a high level about
what machine-learning is and

2745
06:19:10,644 --> 06:19:14,039
kick it off by the quote from 
the fellow who coined the term:

2746
06:19:14,467 --> 06:19:18,528
machine learning gives computers
the ability to learn without

2747
06:19:18,529 --> 06:19:23,038
being explicitly proceeding. We 
are programmers, we're familiar

2748
06:19:23,039 --> 06:19:26,803
with if-then statement. What if 
the conditions for these

2749
06:19:27,384 --> 06:19:31,011
statements become complex? I 
mean really complex? If you're

2750
06:19:31,012 --> 06:19:33,884
building a programme to 
understand that this is a pug,

2751
06:19:34,075 --> 06:19:36,783
and this is a kitten, you don't 
necessarily want to programme an

2752
06:19:37,070 --> 06:19:41,452
if statement for every single 
pixel here, or the possibility

2753
06:19:41,704 --> 06:19:45,962
for every pixel for every single
pug photo. That's not how our

2754
06:19:46,284 --> 06:19:49,326
brains work, right? How do you 
programme it? You want to teach

2755
06:19:50,237 --> 06:19:54,766
it a certain puliness. You want 
your model to learn the essence

2756
06:19:56,923 --> 06:19:59,537
of the pug. So, in truth, there 
are a few ways of doing this.

2757
06:20:00,193 --> 06:20:02,523
Sometimes, like the example 
above, we can tag a set of data

2758
06:20:03,389 --> 06:20:06,491
and your model will use this 
supervised data set to

2759
06:20:06,908 --> 06:20:09,117
distinguish between these 
classes and this will help it

2760
06:20:09,118 --> 06:20:11,337
learn better. This is called 
supervised machine learning. But

2761
06:20:12,051 --> 06:20:14,697
there are other times where we 
don't really know the answer, so

2762
06:20:15,101 --> 06:20:18,952
if I asked a computer what those
pugs would look like if bred

2763
06:20:19,783 --> 06:20:23,743
together with Stegosauruses, 
that's not really a thing!  So,

2764
06:20:24,038 --> 06:20:26,088
there's nothing we can check 
against. That's when we will use

2765
06:20:26,436 --> 06:20:30,530
an unsupervised process. But 
let's dive into supervised

2766
06:20:31,434 --> 06:20:33,517
process because it's the east to
explain in the time we have, and

2767
06:20:34,218 --> 06:20:37,154
it's also pretty common. Within 
supervised machine learning,

2768
06:20:38,311 --> 06:20:40,446
there are thousands of 
algorithms that you could use,

2769
06:20:40,916 --> 06:20:44,127
and among those convolutional 
neuronetworks are probably the

2770
06:20:44,128 --> 06:20:47,415
most popular, but genetic is the
easiest to understand, so we're

2771
06:20:47,416 --> 06:20:49,522
going to use that to kind of 
discuss things on a

2772
06:20:53,027 --> 06:20:56,214
high level today. Let's explore 
a simple toy model. In order to

2773
06:20:56,215 --> 06:21:01,777
make a pug kitten-sorter, we 
build an algorithm that builds

2774
06:21:02,196 --> 06:21:05,131
algorithms. It will build many 
of these and they will do their

2775
06:21:05,132 --> 06:21:09,131
best to sort these, and do their
best sorting. At first, they

2776
06:21:09,516 --> 06:21:14,040
will be bad at it. They will be 
terrible. But, we have another

2777
06:21:14,383 --> 06:21:17,235
function that will check this, 
and they will check it against

2778
06:21:17,797 --> 06:21:21,192
that tagged data, and, for every
kitten and pug scenario, so the

2779
06:21:21,193 --> 06:21:25,242
ones that get it wrong, they are
thrown away, and the ones that

2780
06:21:25,906 --> 06:21:28,552
get it right, circle back to the
builder, and then the builder

2781
06:21:29,176 --> 06:21:33,360
starts using those to create new
builders. Now, this might seem

2782
06:21:33,864 --> 06:21:37,425
hackie and imperfect, and that's
because it is. If we did this

2783
06:21:37,886 --> 06:21:40,603
once, twice, or three times, it 
would fail, but we do it

2784
06:21:43,141 --> 06:21:45,283
thousands of times. We don't do 
it for a small amount of

2785
06:21:45,284 --> 06:21:48,084
conditions, either. We build up 
all of the gradients that make

2786
06:21:48,470 --> 06:21:51,707
up an eye, and then we match it 
up against all of the other ice

2787
06:21:51,708 --> 06:21:56,208
that we know of, and then we 
match that against the

2788
06:21:56,209 --> 06:22:00,157
likelihood of snouts. Our own 
classification system,

2789
06:22:04,228 --> 06:22:07,131
genus et cetera is composed of 
this set of rules. The part I

2790
06:22:07,132 --> 06:22:10,093
want you to remember is this 
moving forward.

2791
06:22:10,094 --> 06:22:13,376
The point where we check, you 
can see how that is a very

2792
06:22:13,726 --> 06:22:17,122
important part of this. We have 
to check if we want to get the

2793
06:22:17,123 --> 06:22:21,304
data right. We must do so, and 
keep on checking. Another really

2794
06:22:21,564 --> 06:22:26,885
important part here is if I only
gave these pug pictures that it

2795
06:22:27,077 --> 06:22:31,438
was fed on, that would be 
correct, right? These are all

2796
06:22:31,868 --> 06:22:33,868
pugs, but what might happen is 
that it might fail when it's

2797
06:22:34,337 --> 06:22:38,373
trying to find our one true pug.
So the type of data that we

2798
06:22:38,607 --> 06:22:41,373
train on is really vital to 
whether or not we have an

2799
06:22:43,031 --> 06:22:46,387
accurate model. Okay. So let's 
explore some ways that

2800
06:22:46,735 --> 06:22:49,326
machine-learning has failed but 
I'm going to call this section

2801
06:22:49,327 --> 06:22:52,674
the road to hell is paved with 
good intentions. None of what

2802
06:22:53,395 --> 06:22:56,092
I'm showing this here today is 
made with the idea of corrupting

2803
06:22:56,335 --> 06:22:59,283
society. Quite the opposite. All
of these are really

2804
06:22:59,284 --> 06:23:02,560
well-intentioned examples. But 
their failure is good for us to

2805
06:23:02,879 --> 06:23:06,250
explore so that we don't fail in
the future. So let's say you

2806
06:23:06,251 --> 06:23:09,906
need to patrol a city but you 
don't have enough patrol units

2807
06:23:09,907 --> 06:23:12,537
completely to cover this city. 
So it might make sense to figure

2808
06:23:12,797 --> 06:23:16,694
out where all the crime is 
happening. And just have some

2809
06:23:17,709 --> 06:23:20,982
patrol units that focus on the 
areas of most activity. But the

2810
06:23:20,983 --> 06:23:23,860
problem is, not all crime is 
equal. To get enough data, you

2811
06:23:24,611 --> 06:23:28,739
have to include nuisance crimes 
in which no-one is hurt like

2812
06:23:29,246 --> 06:23:32,258
homelessness or pan-handling 
with the violent crimes like

2813
06:23:32,259 --> 06:23:36,132
rape and murder but they don't 
tend to be clustered in this

2814
06:23:36,541 --> 06:23:40,118
way. It takes a lot more data to
build an area which is why the

2815
06:23:40,119 --> 06:23:43,940
nuisance data is included. 
Another issue that those

2816
06:23:45,207 --> 06:23:47,977
nuisance data areas tend to be 
the poor areas. What ends up

2817
06:23:48,576 --> 06:23:51,828
happening is you get more patrol
areas in the poor areas, and

2818
06:23:51,829 --> 06:23:54,888
then we have more data on those 
patrol areas, and we get into

2819
06:23:55,546 --> 06:23:59,050
this weird feedback loop where 
we're just patrolling those and

2820
06:23:59,313 --> 06:24:02,648
then the rapes and murders that 
happen in the affluent areas

2821
06:24:04,120 --> 06:24:07,050
start not to be reported. This 
is what the software does in the

2822
06:24:07,051 --> 06:24:09,593
United States, and it's an 
example of sample bias, in

2823
06:24:18,856 --> 06:24:21,750
machine learning. We found once 
you're a criminal, you're likely

2824
06:24:21,952 --> 06:24:25,703
to become a criminal again. A 
lot of people keep re-offending.

2825
06:24:25,948 --> 06:24:29,568
They found the reason people do 
this is that they find it hard

2826
06:24:29,569 --> 06:24:33,279
to fit back into society once 
they're in jail. Another thing

2827
06:24:33,280 --> 06:24:36,563
is that employment becomes more 
difficult because you have to

2828
06:24:37,059 --> 06:24:39,161
disclose that you were once in 
jail on your employment forms,

2829
06:24:39,352 --> 06:24:42,964
and then people are less likely 
to employ you. But here's an

2830
06:24:42,965 --> 06:24:47,659
important part. Employment tends
to be the number-one indicator

2831
06:24:47,660 --> 06:24:51,465
of whether you're going to end 
up back in prison. Even the

2832
06:24:51,466 --> 06:24:54,535
analysis of who ends up in the 
system uses machine-learning,

2833
06:24:55,295 --> 06:24:59,914
so, when most defendants are 
booked in jail, they respond to

2834
06:25:00,453 --> 06:25:04,400
a questionnaire fed into a 
system that defines the risk

2835
06:25:04,401 --> 06:25:07,200
level for used in the length of 
their sentencing. Whether you're

2836
06:25:07,573 --> 06:25:10,738
in for a short amount of time or
a long amount of time. An

2837
06:25:11,278 --> 06:25:14,954
evaluation of more than 10,000 
of these people found that the

2838
06:25:14,955 --> 06:25:18,459
risk scores showed a startling 
difference. Black defendants had

2839
06:25:18,813 --> 06:25:22,703
scores pretty evenly matched 
across the board - one meaning

2840
06:25:22,704 --> 06:25:26,947
no, and then you have a very 
long sentence, whereas the white

2841
06:25:26,948 --> 06:25:29,936
risk assessments look quite 
different:  many are assessed at

2842
06:25:30,814 --> 06:25:35,196
1, steadily decreasing to very 
few at 10. You might say what if

2843
06:25:35,883 --> 06:25:40,323
that is just valid data? Except 
upon analysis, it is not really.

2844
06:25:40,588 --> 06:25:44,188
The studies showed that blacks 
were twice as likely to be

2845
06:25:44,421 --> 06:25:49,201
labelled higher risk and not 
re-offend, while their white

2846
06:25:49,760 --> 06:25:52,305
counterparts labelled not as 
risky. If we look at this in

2847
06:25:52,840 --> 06:25:54,840
human terms, we see James

2848
06:25:58,541 --> 06:26:02,818
Ravelil - Ravelli had a 
aggravated assault, drug

2849
06:26:03,186 --> 06:26:08,370
tasking, and he subsequently did
re-offend. Robert canon had one

2850
06:26:08,371 --> 06:26:14,657
petty theft. There are more too.
Lu go. O, low risk at one.

2851
06:26:14,658 --> 06:26:22,743
Mallory Williams, medium risk at
6. Lugo had three DUYs, Williams

2852
06:26:23,103 --> 06:26:26,520
had two misdemeanours and never 
offended again. This is just a

2853
06:26:27,030 --> 06:26:30,618
couple of them. There's a lot. 
These kind of algorithms don't

2854
06:26:31,027 --> 06:26:34,245
just affect black people, 
either. A construction worker

2855
06:26:34,246 --> 06:26:38,756
who sold a piece of equipment 
and sold it for parts low on

2856
06:26:40,072 --> 06:26:42,565
cash, since then, he's been 
going to church and volunteering

2857
06:26:42,930 --> 06:26:46,891
but says his risk score doesn't 
indicate any of the ways he is

2858
06:26:47,353 --> 06:26:50,096
bettering himself as a person 
and therefore not a good

2859
06:26:50,097 --> 06:26:53,758
indicator of whether or not he's
going to offend again. What

2860
06:26:55,765 --> 06:26:58,260
makes Compus fail as a 
machine-learning algorithm? One

2861
06:26:58,539 --> 06:27:01,546
is that it has no transparency. 
You make the algorithm, and then

2862
06:27:02,016 --> 06:27:04,722
they are sending it out. 
Basically be the people who are

2863
06:27:04,898 --> 06:27:08,696
using it don't know how it 
works. Another thing is, because

2864
06:27:08,697 --> 06:27:11,171
of this, because of that 
relationship, it doesn't adapt

2865
06:27:11,480 --> 06:27:14,173
over time. Remember, we talked 
about how important that step of

2866
06:27:14,439 --> 06:27:17,918
adapting is. And related to 
these things, people use it

2867
06:27:18,272 --> 06:27:22,312
without any question. Another 
question that might be asked at

2868
06:27:22,313 --> 06:27:26,422
this time is whether this is a 
good place for machine-learning

2869
06:27:27,182 --> 06:27:28,868
algorithms. Machine-learning 
algorithms are super powerful

2870
06:27:28,869 --> 06:27:31,198
and really wonderful but 
sometimes, this should be in the

2871
06:27:31,490 --> 06:27:34,702
hands of a judge. Here's the 
main thing about

2872
06:27:34,703 --> 06:27:39,072
machine-learning algorithms:  we
try to be predictive of the

2873
06:27:39,073 --> 06:27:42,509
future but machine-learning 
algorithms can really only

2874
06:27:42,719 --> 06:27:49,365
evaluate the past. So, Brennan, 
one of the co-creators of this

2875
06:27:49,366 --> 06:27:51,268
technology didn't build the 
technology with the idea of the

2876
06:27:51,269 --> 06:27:53,344
use for sentencing. That's the 
strange thing about some of this

2877
06:27:53,746 --> 06:27:56,525
tech. Once you put it in the 
world, adoption can be beyond

2878
06:27:57,323 --> 06:27:59,768
us. Anyone who maintains an 
open-source project will say

2879
06:28:00,205 --> 06:28:02,304
that sometimes you put something
out in the world, and the way

2880
06:28:02,305 --> 06:28:05,246
people use it is totally 
different than the way you

2881
06:28:05,247 --> 06:28:08,833
intended or the way you had 
foreseen. This is why it is

2882
06:28:09,164 --> 06:28:11,502
critical for these types of 
technologies to be transparent

2883
06:28:11,881 --> 06:28:15,952
in order not to be abused. They 
can't be magical. People will

2884
06:28:16,378 --> 06:28:20,637
say algorithms can't be biased. 
But algorithms are written by

2885
06:28:20,981 --> 06:28:24,811
people. So this doesn't always 
happen to criminals, it happens

2886
06:28:24,812 --> 06:28:29,183
to us too. Machine-learning is 
now incorporated into a lot of

2887
06:28:29,610 --> 06:28:32,534
the tools that we use every day,
and a lot of our internet

2888
06:28:33,006 --> 06:28:40,589
experience is built off 
machine-learning algorithms.

2889
06:28:41,259 --> 06:28:46,095
Axiom had an average 1,500 data 
points, including the entire

2890
06:28:46,547 --> 06:28:50,817
adult population of the United 
States. That was in 2012. And

2891
06:28:51,112 --> 06:28:53,112
that is just

2892
06:28:55,059 --> 06:28:59,315
one company. So, using a Chrome 
extension called What Facebook

2893
06:28:59,316 --> 06:29:02,717
Thinks you Like, I could find 
some of the ways the system has

2894
06:29:02,718 --> 06:29:06,331
tagged me. If you follow me on 
Twitter, you know some of these

2895
06:29:06,332 --> 06:29:11,031
things like software developer, 
and the cloud computing, like

2896
06:29:11,032 --> 06:29:16,176
dogs, like wine to strange, and 
like kind of falls, so, mermaid,

2897
06:29:16,177 --> 06:29:21,871
I don't know, trench coats, I've
never read a James Paterson

2898
06:29:21,872 --> 06:29:23,872
book, and it got my

2899
06:29:27,687 --> 06:29:30,073
political proclivities wrong. 
Facebook use these types of tags

2900
06:29:30,426 --> 06:29:33,071
to drive directed ads. 
You can see that you can use

2901
06:29:33,535 --> 06:29:36,809
these ads to target on different
demographics, including race.

2902
06:29:37,168 --> 06:29:39,559
And a couple of years ago, 
people could show you different

2903
06:29:39,837 --> 06:29:42,848
houses that you could buy 
depending on these demographics,

2904
06:29:43,205 --> 06:29:47,087
depending on race. This is 
illegal under the Software

2905
06:29:47,506 --> 06:29:49,506
Housing Act of 1968 but here's

2906
06:29:52,218 --> 06:29:55,213
the thing:  once that was 
pointed out to Facebook, they

2907
06:29:55,214 --> 06:29:58,091
fixed it. This is a major theme 
here. It is not to make software

2908
06:29:58,287 --> 06:30:01,093
that never fails - that's 
impossible. Every

2909
06:30:02,076 --> 06:30:04,142
machine-learning algorithm can 
have a failure, but once it does

2910
06:30:04,983 --> 06:30:09,273
fail, you have to course-correct
and change things. And another

2911
06:30:09,274 --> 06:30:12,318
problem with this that you might
have already thought about is

2912
06:30:12,319 --> 06:30:16,336
that you don't tell Facebook 
their race. They are targeting

2913
06:30:16,932 --> 06:30:19,908
based on ethnic affinity which 
is used by the same algorithm

2914
06:30:20,423 --> 06:30:23,016
that thinks I'm into mermaids. 
So I'm not coming down on

2915
06:30:23,714 --> 06:30:26,209
Facebook in particular. This is 
a problem with all

2916
06:30:26,653 --> 06:30:31,034
machine-learning algorithms used
by every company. So the issue

2917
06:30:31,454 --> 06:30:33,950
with this, and what you might 
have guessed, is that everything

2918
06:30:34,164 --> 06:30:38,265
you're seeing is filtered, and 
that filtration system can be

2919
06:30:38,684 --> 06:30:42,553
fallible at best, and illegal at
worst. It might not mean houses,

2920
06:30:42,798 --> 06:30:45,313
it can also mean that the things
and the studies that you're

2921
06:30:45,616 --> 06:30:49,532
seeing, and educational material
that you are seeing is based on

2922
06:30:49,533 --> 06:30:54,178
what you already believe, which 
like that patrolling system that

2923
06:30:54,390 --> 06:30:57,979
we saw earlier was 
self-reinforcing. I've

2924
06:30:58,864 --> 06:31:01,639
personally seen this. At one 
point I worked for a company

2925
06:31:01,640 --> 06:31:04,045
that was starting to use machine
learning. They proposed an idea

2926
06:31:04,287 --> 06:31:08,733
to surface content based on 
Demme graphics. I had happened

2927
06:31:08,994 --> 06:31:13,911
to read up on that issue, Mabel 
that it wasn't legal, and -

2928
06:31:13,912 --> 06:31:16,554
mainly that it wasn't legal. 
They brought it up to people

2929
06:31:17,125 --> 06:31:20,290
saying this could introduce 
bias. Here's an important part.

2930
06:31:20,983 --> 06:31:23,783
I was just a regular engineer on
that project. I wasn't a data

2931
06:31:23,784 --> 06:31:26,625
scientist, and I wasn't a PM. I 
wasn't the person shaping that

2932
06:31:27,478 --> 06:31:30,237
project. I was just carrying 
things out. Without raising my

2933
06:31:30,709 --> 06:31:35,323
hand, we might have shipped that
feature to some really bad

2934
06:31:36,438 --> 06:31:38,533
consequences. It's not that 
digitising the world is

2935
06:31:38,534 --> 06:31:43,121
inherently bad but the more 
technology becomes embedded in

2936
06:31:43,310 --> 06:31:46,735
all aspect of life, it matters 
whether the technology is

2937
06:31:48,034 --> 06:31:51,027
biased, alienating or harmful. 
These tales are dark but

2938
06:31:51,325 --> 06:31:54,559
machine-learning offers us a lot
of amazing benefits as well, as

2939
06:31:54,802 --> 06:31:57,964
my brilliant co-worker said:  it
is like the risk we take every

2940
06:31:58,407 --> 06:32:00,874
time we get into cars or 
aeroplanes. They've completely

2941
06:32:01,182 --> 06:32:03,182
transformed every aspect of 
life, and made things possible

2942
06:32:03,259 --> 06:32:07,258
that wouldn't be possible 
before. They're inherently

2943
06:32:07,937 --> 06:32:10,423
dangerous, and they can be 
seriously misused. Think about

2944
06:32:10,738 --> 06:32:14,399
it. I wouldn't be on this stage 
if it wasn't for aeroplanes, and

2945
06:32:14,873 --> 06:32:17,994
some of you wouldn't be here in 
the same room. That's amazing.

2946
06:32:17,995 --> 06:32:20,746
But people have used aeroplanes 
as weapons so we have a certain

2947
06:32:20,747 --> 06:32:26,863
respect for it. Now that I've 
bummed everyone out, let's

2948
06:32:26,864 --> 06:32:28,864
explore some of the wonderful 
applications for

2949
06:32:30,160 --> 06:32:34,223
machine-learning and what we can
do with it. As I mentioned, I

2950
06:32:34,606 --> 06:32:37,008
worked for Microsoft, and we 
have a thing called cognitive

2951
06:32:37,009 --> 06:32:41,757
services. It is a specific API 
called the emotion API. It

2952
06:32:41,990 --> 06:32:46,087
allows us to analyse things like
pictures and videos and see what

2953
06:32:46,088 --> 06:32:49,466
emotion it detects from what the
computer sees. It can be used to

2954
06:32:49,467 --> 06:32:56,221
make things like this which I 
built in 3.js which has no

2955
06:32:57,008 --> 06:32:59,008
practical application except 
entertaining my four-year-old

2956
06:33:05,063 --> 06:33:08,000
stepdaughter. 
>> [Video] wow!

2957
06:33:08,001 --> 06:33:10,001
>> Cute. 
>> Yes, there's stuff up there,

2958
06:33:16,786 --> 06:33:20,196
huh? Okay. Pretty magical, to 
tell you the truth. What if we

2959
06:33:20,391 --> 06:33:23,668
put this to a more useful use. I
was mentoring a blind woman and

2960
06:33:23,669 --> 06:33:29,212
she mentioned to me she left out
of conversations on Twitter

2961
06:33:30,209 --> 06:33:32,209
because the photos didn't have

2962
06:33:34,215 --> 06:33:37,354
alt text. I used another 
cognitive services offering, the

2963
06:33:37,647 --> 06:33:42,064
computer vision API which will 
not only analyse a photo but

2964
06:33:42,065 --> 06:33:46,704
also its content like words. To 
show how this works, we will

2965
06:33:46,705 --> 06:33:48,705
dive briefly into some of the 
code. We will get the image from

2966
06:33:49,126 --> 06:33:55,819
the user. I'm using view of js 
here. You can see here we are

2967
06:33:57,021 --> 06:34:01,405
using Acxios for a six call and 
use the cognitive services to

2968
06:34:01,631 --> 06:34:04,283
analyse that image. We will do 
so in a couple of different

2969
06:34:04,691 --> 06:34:08,406
ways. One to see what the image 
contains, and one to check for

2970
06:34:08,873 --> 06:34:14,758
text within the image, and then 
we will dynamically add the alt

2971
06:34:15,205 --> 06:34:18,779
text to the image. I'm building 
a chrome extension is to that

2972
06:34:18,780 --> 06:34:22,620
blind people can use it on any 
website. This application of

2973
06:34:23,330 --> 06:34:25,611
machine-learning can help bring 
more people into the

2974
06:34:25,806 --> 06:34:27,806
conversation conversation, and 
broaden our reach. It is not

2975
06:34:28,368 --> 06:34:30,368
perfect but headed in a really 
good direction, where all of a

2976
06:34:30,403 --> 06:34:33,275
sudden, people who are left out 
of the story can now be part of

2977
06:34:33,579 --> 06:34:37,617
it, and that is the amazing 
thing, that, by being inclusive,

2978
06:34:37,852 --> 06:34:40,358
you're meeting business goals. 
It doesn't mean you're excluding

2979
06:34:41,166 --> 06:34:44,749
people in the centre, it means 
that you're reaching a larger

2980
06:34:45,086 --> 06:34:47,761
audience. There are all sorts of
ways that other people can use

2981
06:34:48,175 --> 06:34:55,135
machine learning in medicine 
too. So one of these is Sophia

2982
06:34:56,045 --> 06:34:59,832
Genetics is diagnosing diseases 
through DNA analysis. Another

2983
06:35:00,119 --> 06:35:06,468
one dear to my heart is that it 
is a social cure for cancer

2984
06:35:07,490 --> 06:35:09,490
patients, patients enter 
diagnosis and treatment so they

2985
06:35:09,531 --> 06:35:11,872
can be analysed. Doctors can't 
just report every single patient

2986
06:35:12,069 --> 06:35:15,115
that they have, and they can't 
read every single study, either,

2987
06:35:15,355 --> 06:35:18,630
so if you have all of these 
people reporting what treatments

2988
06:35:19,333 --> 06:35:21,816
they used, whether or not they 
are surviving well, then all of

2989
06:35:22,636 --> 06:35:25,571
a sudden this machine-learning 
can pick up all of that data,

2990
06:35:25,572 --> 06:35:28,489
and we can become much smarter 
in finding cures

2991
06:35:32,340 --> 06:35:35,173
for cancer. 
Health map algorithms spotted an

2992
06:35:37,732 --> 06:35:40,426
Ebola outbreak nine days before 
it happened. Nine days is an

2993
06:35:40,864 --> 06:35:46,665
incredible amount of lead time 
for an outbreak. Outbreaks grow

2994
06:35:50,336 --> 06:35:52,308
exponentially. By Mark-learning 
we reduced the number of those

2995
06:35:52,309 --> 06:35:54,359
affected from here to here. 
That's amazing. You might be

2996
06:35:54,360 --> 06:35:57,867
saying to yourself this is all 
well and good, but I'm not a

2997
06:35:57,868 --> 06:36:02,655
data scientist, and I don't work
with machine-learning. But

2998
06:36:02,656 --> 06:36:05,294
that's okay. This subject about 
how technology can shape our

2999
06:36:05,598 --> 06:36:09,356
lives is really broad. It 
doesn't necessarily have to be

3000
06:36:10,054 --> 06:36:12,054
machine-learning. Let's talk 
about some of the things that we

3001
06:36:12,307 --> 06:36:15,303
as web developers can do now 
today with what we already know.

3002
06:36:15,521 --> 06:36:18,600
We work every day on building 
applications for so many

3003
06:36:19,235 --> 06:36:22,590
different use cases, so what if 
we take some of the more generic

3004
06:36:22,955 --> 06:36:26,627
tools that we have and put them 
to tasks where we can maybe help

3005
06:36:27,098 --> 06:36:30,224
save lives? So, there's a fire 
house near where I live, and

3006
06:36:30,225 --> 06:36:32,225
they have some sufficiently 
complex systems to make sure

3007
06:36:32,301 --> 06:36:34,981
that everything is online and 
functioning. I went out to their

3008
06:36:35,292 --> 06:36:37,983
station, and I asked them a few 
questions about how everything

3009
06:36:38,258 --> 06:36:41,946
works, and to see if there was 
anything that I could do that I

3010
06:36:41,947 --> 06:36:46,051
might help. Here's what I 
learned:  when the truck goes

3011
06:36:46,635 --> 06:36:50,037
out, it has to communicate with 
a dispatcher, which will help

3012
06:36:50,038 --> 06:36:52,445
facilitate if they need more 
water, supplies, or back-up, and

3013
06:36:52,446 --> 06:36:56,560
the app is really simple kind of
purposefully so because they

3014
06:36:56,819 --> 06:37:00,330
want everyone to be able to use 
it quickly at a glance, and

3015
06:37:00,331 --> 06:37:02,914
there are not that many things 
that they might need. What they

3016
06:37:03,243 --> 06:37:06,453
created was really perfect. But 
I asked a few questions

3017
06:37:06,454 --> 06:37:09,521
including what happens if they 
are all of a sudden offline?

3018
06:37:10,027 --> 06:37:15,878
What if they can't -- 
communicate. Right now, they're

3019
06:37:16,377 --> 06:37:21,086
hosed - get it, firemen!  
Terrible!  Okay, here is our

3020
06:37:21,402 --> 06:37:24,849
opportunity. What I created was 
a simplified version of their

3021
06:37:25,391 --> 06:37:30,086
app preserving the basic layout 
but made use of service workers

3022
06:37:30,087 --> 06:37:34,012
and background to alert them 
when they're offline, to cue the

3023
06:37:34,321 --> 06:37:39,123
messages, and, back up, to back 
up, even if the browser tab is

3024
06:37:39,443 --> 06:37:41,805
closed. Here's what the 
application looks like. If we

3025
06:37:42,676 --> 06:37:48,825
click on water, it registers - 
the sync is registered but if we

3026
06:37:49,394 --> 06:37:53,593
go off Wi-Fi, it will tell them 
they're offline, and I could

3027
06:37:54,195 --> 06:37:58,518
even close out that browser tab,
go back, and then we can turn

3028
06:37:58,519 --> 06:38:05,117
the Wi-Fi back on. And then the 
sync is registered and what we

3029
06:38:05,398 --> 06:38:09,237
requested before is then sent 
out. So the enquires thing --

3030
06:38:09,665 --> 06:38:14,047
and the request is sent out. 
We're going to do that with

3031
06:38:15,769 --> 06:38:19,270
massive greater.online and 
register a service worker when a

3032
06:38:19,271 --> 06:38:23,040
request is made. You can't just 
add it was a method in your app.

3033
06:38:23,295 --> 06:38:25,670
It has to be in a different 
JavaScript file. This is

3034
06:38:26,049 --> 06:38:28,101
important if you want to 
integrate it. One thing about

3035
06:38:28,524 --> 06:38:30,524
this is that you're kind of 
throwing it over the wall. It is

3036
06:38:30,912 --> 06:38:34,037
almost like communicating with 
the server, so you're throwing

3037
06:38:34,038 --> 06:38:36,858
things at it, and it is throwing
things back. We're going to pass

3038
06:38:37,048 --> 06:38:41,674
in the type of event that was 
triggered so we can submit or

3039
06:38:41,993 --> 06:38:45,952
cue what the user requested. We 
will do some error-handling.

3040
06:38:46,769 --> 06:38:49,906
After we've activated and 
installed the service worker, we

3041
06:38:50,229 --> 06:38:54,424
will strip out the type from the
event tag and process a fetch

3042
06:38:54,425 --> 06:38:57,621
when it gets to connectivity. In
that function, we will fetch the

3043
06:38:57,900 --> 06:39:01,364
URL which is a placeholder 
server in this case and check if

3044
06:39:01,773 --> 06:39:04,345
the response has happened. Once 
it has, we will send a message

3045
06:39:04,346 --> 06:39:07,625
back to the client with 
post-message, so we will send

3046
06:39:08,084 --> 06:39:11,716
the response and the type of 
resource that was requested. And

3047
06:39:11,717 --> 06:39:14,366
after that, we can alert the 
user when it is finally

3048
06:39:18,030 --> 06:39:19,400
sent. 
But the most important part of

3049
06:39:19,401 --> 06:39:22,183
the demo isn't the service 
workers. It is where we started.

3050
06:39:22,598 --> 06:39:26,995
I went to the fire house, and I 
asked them questions. And there

3051
06:39:27,464 --> 06:39:30,791
are a lot of times where I 
wasn't sure if I could help

3052
06:39:31,132 --> 06:39:33,343
them. By asking questions about 
what happened in any kind of use

3053
06:39:33,946 --> 06:39:36,466
case and any kind of scenario, I
finally found something that

3054
06:39:36,800 --> 06:39:40,704
they could use to help for. We 
have to ask questions. We have

3055
06:39:41,130 --> 06:39:45,126
to ask questions in the 
beginning, like the firehouse

3056
06:39:45,560 --> 06:39:47,560
demo. We have to ask questions 
like when it is

3057
06:39:50,064 --> 06:39:53,096
deployed for criminal spots. We 
have to keep evaluating the

3058
06:39:53,097 --> 06:39:56,234
systems and where they're going 
and make purposeful decisions to

3059
06:39:56,889 --> 06:39:59,922
help people and course-correct 
when we don't. I feel a lot of

3060
06:39:59,923 --> 06:40:02,824
tech that asks questions how to 
make our lives more comfortable,

3061
06:40:03,133 --> 06:40:06,063
which I appreciate, I make apps 
on the weekend, this is a

3062
06:40:06,385 --> 06:40:09,765
cocktail finder I built that 
just finds me cocktails, okay?

3063
06:40:10,190 --> 06:40:14,247
But it seems to me that a 
disproportionate amount of

3064
06:40:14,677 --> 06:40:17,389
projects focus inward rather 
than outward, focused on serving

3065
06:40:17,647 --> 06:40:20,732
people with money instead of 
asking people if they need help.

3066
06:40:21,074 --> 06:40:23,951
There are a lot of opportunity 
out there to help, and you might

3067
06:40:24,201 --> 06:40:27,592
already have the skills to do 
so. It just takes a little bit

3068
06:40:28,925 --> 06:40:32,031
of imagination and exploration, 
and it really pay off. What I

3069
06:40:32,032 --> 06:40:34,717
want you to think about going 
forward is this:  that I truly

3070
06:40:35,260 --> 06:40:38,202
believe that you have some of 
the brightest minds of our

3071
06:40:38,486 --> 06:40:41,979
generation. As you move forward 
building applications for the

3072
06:40:41,980 --> 06:40:45,206
web, you're building the pillars
and blocks that our society

3073
06:40:46,089 --> 06:40:49,581
rests on. You're crafting the 
shape of our digital life. This

3074
06:40:49,872 --> 06:40:52,167
could mean building new 
features, advocating for

3075
06:40:52,490 --> 06:40:55,132
accessibility, and this could be
as simple as raising your hand

3076
06:40:55,432 --> 06:40:58,697
when something isn't right. It 
is not just your job to create

3077
06:40:58,967 --> 06:41:04,481
these things and do as you're 
told, it is your job to ask are

3078
06:41:04,482 --> 06:41:09,096
we building things correctly, 
building the right things, and

3079
06:41:09,485 --> 06:41:11,863
are we building them well for 
all of the digital lives that

3080
06:41:12,158 --> 06:41:14,158
we've touched? Thank you.

3081
06:41:26,037 --> 06:41:26,593
>> Thank you very much. I 
learned so much. I know the

3082
06:41:26,594 --> 06:41:30,364
majority of the time when we are
working on some tool, or, I

3083
06:41:30,776 --> 06:41:32,334
mean, products, tools, whatever,
>> Thank you very much. I

3084
06:41:32,335 --> 06:41:34,667
learned so much. we can't really
tell whether it is leaning

3085
06:41:34,668 --> 06:41:39,905
towards the more evil side of 
things sometimes. Like what what

3086
06:41:39,906 --> 06:41:43,658
are the questions we can ask 
ourselves and our team-mates to

3087
06:41:43,659 --> 06:41:48,843
kind of, you know, be able to 
know, like, whether what we are

3088
06:41:48,844 --> 06:41:52,441
doing is ethical? 
>> Yes, I mean, just asking the

3089
06:41:52,644 --> 06:41:55,794
question is the first step. For 
a lot of these things, what I

3090
06:41:56,369 --> 06:42:00,316
mentioned before is not saying, 
like, you're going to build

3091
06:42:00,952 --> 06:42:02,952
software the first time that 
never fails, it's never going to

3092
06:42:03,779 --> 06:42:06,748
happen, but revaluating the 
systems that you're building

3093
06:42:06,749 --> 06:42:11,074
them or asking the questions, 
even if the answer is no, it's

3094
06:42:11,452 --> 06:42:15,426
probably fine but just asking 
those questions upfront about

3095
06:42:15,427 --> 06:42:18,024
where things are going. 
>> Thank you so much. That was

3096
06:42:18,530 --> 06:42:20,530
our last talk!

3097
06:42:25,607 --> 06:42:28,455
[Cheering and Applause]. Oh, my 
God. I can't believe it's almost

3098
06:42:32,622 --> 06:42:37,464
over. I found my suit. I think 
they saw that Sean - they saw

3099
06:42:37,465 --> 06:42:41,211
that Sean told me I could tweet 
him, and he would help me, and

3100
06:42:41,212 --> 06:42:47,702
so I guess they, like, I can 
help her, you know, make faster

3101
06:42:47,703 --> 06:42:52,769
applications. 
I'm like cool. I'm good!  So.

3102
06:42:53,383 --> 06:42:56,698
Yes. 
>> That makes total sense.

3103
06:42:56,699 --> 06:42:59,611
>> Anyway, so we have our panel 
coming up, and we're going to be

3104
06:43:00,680 --> 06:43:05,302
talking up here on stage, and 
answering some of your questions

3105
06:43:05,303 --> 06:43:08,812
that you asked, some of the 
panellists. It is still up

3106
06:43:09,250 --> 06:43:15,968
online, so, if you go to 
slido.com and then enter jsconf

3107
06:43:16,361 --> 06:43:18,874
as the event code. You can still
ask questions and vote on

3108
06:43:19,135 --> 06:43:21,135
questions that you care about 
that we

3109
06:43:25,746 --> 06:43:27,456
can ask. 
>> Yeah. Great.

3110
06:43:27,457 --> 06:43:31,519
>> I think we're going to take a
quick break to set up. Five

3111
06:43:31,520 --> 06:43:33,971
minutes. We can get people up 
here on the stage.

3112
06:43:33,972 --> 06:43:37,070
>> Don't stray too far. Come 
back in five minutes!

3113
07:02:20,855 --> 07:02:21,461
[Applause].  
>> That was very sudden. We were

3114
07:02:21,462 --> 07:02:27,639
breathe,common and breathing. We
are human, we so it's just a

3115
07:02:27,640 --> 07:02:29,640
very thing to talk

3116
07:02:33,726 --> 07:02:39,168
are about!   Who introduce. Hi! 
we

3117
07:02:39,169 --> 07:02:44,393
>>  Should
>> I've  likeever Not these

3118
07:02:44,394 --> 07:02:46,629
people!  them - seen

3119
07:02:49,763 --> 07:02:56,377
times ten has of!  Twitter, do 
both famous on we talk, People

3120
07:02:56,378 --> 07:03:05,763
thanself-introduction followers 
combined.could quick who a you

3121
07:03:05,764 --> 07:03:12,106
domicrophone, The again.  at I'm
Dan. yes.

3122
07:03:12,107 --> 07:03:14,107
>> I work [inaudible].

3123
07:03:19,594 --> 07:03:24,314
manager  programme Sean a  I'm 
Larkin,

3124
07:03:28,914 --> 07:03:34,583
>> and slido, open up at 
Microsoft.

3125
07:03:34,584 --> 07:03:38,699
>> We audience questions, so we 
were accepting

3126
07:03:38,700 --> 07:03:40,700
>>  yes.

3127
07:03:42,246 --> 07:03:45,047
tradition Justlist. is down this
apparently, this is   First

3128
07:03:45,724 --> 07:03:46,868
people have question going to 
Iceland, it  question Icelandic

3129
07:03:46,869 --> 07:03:53,506
is like a foreigners. in all a  
go ask that like you How do to

3130
07:03:53,507 --> 07:03:57,740
why. can why. You them don't 
>> I know ask

3131
07:04:16,730 --> 07:04:22,499
Iceland the given  just have I I
haven't because seen much of I

3132
07:04:22,500 --> 07:04:28,882
yet and talk,Iceland? 
[Inaudible].[inaudible].  So

3133
07:04:29,112 --> 07:04:37,141
watch. I'm to I'm going look  So
forward prettyquite up  to.

3134
07:04:37,142 --> 07:04:39,395
like grew  feels like So Sea, I 
for

3135
07:04:39,396 --> 07:04:43,937
>> me, it the North a bit home. 
close tocountries.  to

3136
07:04:43,938 --> 07:04:48,843
Scandinavian beingpretty close 
nice is Yes, it

3137
07:04:48,844 --> 07:04:55,877
>>least here.  Iceland's
typically   at I'm beer, like

3138
07:04:55,878 --> 07:04:57,978
awesome.  to So We story.
[Cheering]. long think it and it

3139
07:04:58,814 --> 07:05:01,113
allergic a is - I American
problem, beer, is

3140
07:05:01,114 --> 07:05:08,817
>>  European nocan  beer, that's
drink more Icelandic so really

3141
07:05:08,818 --> 07:05:13,052
one so I great beer. 
>> countryare can enjoy the hope

3142
07:05:13,647 --> 07:05:15,975
locals  Great, I all the

3143
07:05:19,681 --> 07:05:23,508
high-- you  satisfied!  all Now,
werehigh-performing yeah?

3144
07:05:23,509 --> 07:05:28,538
question you Our alltips are for
being   people. What  do you

3145
07:05:28,934 --> 07:05:38,272
productive? havenext
>> You know.  don't really I

3146
07:05:39,131 --> 07:05:44,660
you [Laughter].  Sorry, pass if 
can

3147
07:05:44,661 --> 07:05:46,661
>>

3148
07:06:32,786 --> 07:06:33,878
want.  want. 
>> [Inaudible].

3149
07:06:33,879 --> 07:06:37,988
>> Sounds like you're doing 
David AllenGTD in the next

3150
07:06:38,631 --> 07:06:43,033
actual item. That's something I 
just subscribed to, or

3151
07:06:43,632 --> 07:06:46,222
proscribed to. Like, when you 
have something you need to

3152
07:06:46,603 --> 07:06:49,198
accomplish, just write down the 
next actionable thing that you

3153
07:06:49,199 --> 07:06:54,268
can do, and you constantly 
Whittall away at it until you've

3154
07:06:56,178 --> 07:06:58,226
completed something. And the 
list when I'm at home, and the

3155
07:06:59,256 --> 07:07:02,076
list when I'm in my email, like 
the list when I'm on Twitter

3156
07:07:02,869 --> 07:07:06,646
doing DMs. But then also, I 
would say, like, there's another

3157
07:07:07,080 --> 07:07:11,818
part of that GTD method which is
like do defer or delegate. If

3158
07:07:11,819 --> 07:07:14,986
it's not your top priority, I 
mean, if you can do it in less

3159
07:07:15,553 --> 07:07:18,331
than two minutes, just do it. If
you can't, defer it to when it

3160
07:07:19,236 --> 07:07:23,097
is appropriate, and if, like, 
whether people like to hear it

3161
07:07:23,308 --> 07:07:26,850
if it is not worth their time, 
then delegate to somebody else

3162
07:07:27,123 --> 07:07:30,533
who is more suited for it. 
Otherwise, like ask people for

3163
07:07:31,049 --> 07:07:37,443
help. So people like ask how do 
you do things all the time. I'm

3164
07:07:37,861 --> 07:07:40,879
usually drowning in people and 
calling up for help. We really

3165
07:07:40,880 --> 07:07:44,077
rely on other people around us 
in the community to help us get

3166
07:07:44,422 --> 07:07:49,098
things done for webpack. 
>> I don't feel like I have a

3167
07:07:49,278 --> 07:07:52,884
great answer to this question. 
Like I have something that is

3168
07:07:54,082 --> 07:07:58,788
like, trying to understand 
things, like those things that

3169
07:07:58,789 --> 07:08:02,853
like together, really nicely. 
And just like I care a lot about

3170
07:08:02,854 --> 07:08:07,521
what I do. I mean, that sounds 
very, very generic, but it is

3171
07:08:08,512 --> 07:08:13,556
true, and like that's why I 
can't keep doing - I can keep

3172
07:08:13,874 --> 07:08:17,237
doing node for such a long time.
I've never worked on a project

3173
07:08:17,462 --> 07:08:20,550
for more than a year or 
anything, and it's like -

3174
07:08:24,427 --> 07:08:27,244
yes. 
>> Yes, I just wanted to add,

3175
07:08:42,712 --> 07:08:43,772
I've got [inaudible]. I have had
a lot of help. Like, do the

3176
07:08:43,773 --> 07:08:45,773
actions design work for them,

3177
07:08:49,230 --> 07:08:51,230
I've got [inaudible]. I have had
a lot of help. Like,

3178
07:08:54,230 --> 07:09:01,542
so, ... 
>> And the other thing that

3179
07:09:01,964 --> 07:09:08,206
[inaudible]. But I just used to 
not being anxious for these

3180
07:09:33,702 --> 07:09:35,589
the found with list, to-do 
getting and multiple you

3181
07:09:35,590 --> 07:09:38,967
overwhelmed emails notes,by that
know, sometimes,  the amount of

3182
07:09:38,968 --> 07:09:43,222
stuff youknow, in likeyou're 
doing, and,  it gets lost there

3183
07:09:43,223 --> 07:09:49,622
and lists, Is that. all you  
with youthe away that deal this

3184
07:09:49,623 --> 07:09:51,623
in  systems that

3185
07:09:55,131 --> 07:10:00,412
my  mean,assistance,  I do?  
It's like,

3186
07:10:03,962 --> 07:10:07,728
huge, a like having 
>>like,

3187
07:10:10,963 --> 07:10:17,322
not being scared ...   works to 
read. It

3188
07:10:17,323 --> 07:10:21,338
everything in usuallypretty 
well. It's like ... I I if

3189
07:10:21,339 --> 07:10:23,901
something usually,me it, really 
like, badmean,  care of happens

3190
07:10:23,902 --> 07:10:29,358
I pings  zero feels and somebody
take inbox thedon't the that,

3191
07:10:29,359 --> 07:10:35,128
getting
>> about that.  Yes, good. So,

3192
07:10:35,129 --> 07:10:40,307
really I've archiveto I no there
got details,  a try and, if are

3193
07:10:40,763 --> 07:10:43,346
it. If actionable search at or 
three  instantlycan two  by I

3194
07:10:43,347 --> 07:10:47,576
need to for only let it, like, 
then you will most glance   but

3195
07:10:47,577 --> 07:10:52,171
I at there, the end ofmy work 
sit day, them yes. archive

3196
07:10:52,172 --> 07:10:57,649
emails them, to foreven then I 
tryanyway. I have created  tasks

3197
07:10:57,725 --> 07:11:02,182
>>  Next Awesome.

3198
07:11:05,764 --> 07:11:08,924
question? What do guessingdon't 
that - I'm you see the question

3199
07:11:09,077 --> 07:11:13,814
are   what  like, that you means
good applications some common a

3200
07:11:13,815 --> 07:11:17,416
problems see in JavaScript 
currently havesolution

3201
07:12:01,838 --> 07:12:03,838
to? 
>>

3202
07:12:31,806 --> 07:12:34,585
maybe to? 
>> [Inaudible].

3203
07:12:34,586 --> 07:12:36,586
>> [Inaudible]. I think

3204
07:13:14,249 --> 07:13:18,779
describedsame Dan  what  that
things having ...

3205
07:13:18,780 --> 07:13:21,435
>> In the same what  used, a
actually library using

3206
07:13:21,442 --> 07:13:23,442
understanding understanding or a
if you're can bearound component

3207
07:13:23,693 --> 07:13:27,089
you   so,  methodology around 
education the code leverage,

3208
07:13:27,090 --> 07:13:33,047
think you what and I like is, 
identify,or something, of this

3209
07:13:33,048 --> 07:13:37,871
how you to type about module I 
guess howcould go you know,

3210
07:13:37,872 --> 07:13:42,559
like,just  and how package or  
details say alike, this health,

3211
07:13:42,560 --> 07:13:46,927
understanding those  this seeing
Is What often. BSM? depend is

3212
07:13:46,928 --> 07:13:52,306
contributed inlibraries written 
this  this  other does whator

3213
07:13:52,307 --> 07:13:54,307
on.just trying
Or does havedependencies? about

3214
07:13:55,471 --> 07:13:58,326
Things that you  somethingmay 
not think you're another. to

3215
07:13:58,327 --> 07:14:00,979
write long-standing but a impact
if you add a versus feature,

3216
07:14:00,980 --> 07:14:08,167
could havepull in libraryreally 
the plug wrong also  to  I

3217
07:14:08,168 --> 07:14:17,228
>>  is I'm going mything again, 
but think it works hard to that

3218
07:14:17,229 --> 07:14:20,854
write thedirectly. I I code that
write  the hope some of help

3219
07:14:20,855 --> 07:14:23,596
features used in demo  us with

3220
07:14:26,766 --> 07:14:30,639
butasynchronousspecifically 
questions is  that. We is

3221
07:14:30,640 --> 07:14:34,653
generaler this one more 
specific. It have server-site

3222
07:14:34,654 --> 07:14:40,117
with rendering you work for Dan.
Will in?  the API demonstrated

3223
07:14:41,233 --> 07:14:46,371
>>future  have currently not
rendering. We do  tohave

3224
07:14:46,372 --> 07:14:49,862
server-side  howimplementation 
for yes, weimplementingneed

3225
07:14:49,863 --> 07:14:52,283
about  In theory, findcommunity 
but will we will  hopefully,

3226
07:14:52,284 --> 07:14:55,136
theories we're  make andthis 
work actually we probably later

3227
07:14:55,137 --> 07:14:59,400
so some help from thegoing for 
details that,  to post some help

3228
07:15:01,885 --> 07:15:03,885
people who can

3229
07:15:08,777 --> 07:15:13,540
toask:  your us.  The next 
question I want  what isopinion

3230
07:15:14,181 --> 07:15:16,753
unpopular
>>front-end and

3231
07:15:24,348 --> 07:15:29,154
dev? it's  that opinion is My 
unpopularwebsites.  fast complex

3232
07:15:30,101 --> 07:15:34,946
ship bit not to and little
>> going to process It just

3233
07:15:34,947 --> 07:15:37,979
takes a  it's of to treating
citizen, andperformance like a

3234
07:15:37,980 --> 07:15:42,277
an  course, first-class 
difficult tackle so, of andI be

3235
07:15:42,278 --> 07:15:46,918
try  project, existing but to 
evangelise trying make always

3236
07:15:46,919 --> 07:15:51,345
heavily thingsperformance and 
muchJavaScript likepart of   how

3237
07:15:52,431 --> 07:15:54,431
how muchsomethingCSS you're
projects, shipping,  as culture

3238
07:15:55,871 --> 07:15:59,954
shipping, just as the of that 
and itcitizen. If  the

3239
07:15:59,955 --> 07:16:02,434
first-classsacrificing  you 
treated  of you come back

3240
07:16:02,435 --> 07:16:03,809
yourself out just theunless 
you'retechnologies, you're  dig

3241
07:16:03,810 --> 07:16:07,637
you're to,  just using be then  
right almost and then if going

3242
07:16:07,638 --> 07:16:13,936
to feature a anda hole, it as 
time, anything foryou treat

3243
07:16:13,937 --> 07:16:19,421
standard that is a  Soifmean, 
that  down easy. but  hard, it

3244
07:16:19,422 --> 07:16:23,791
is  thenyou like, of boiling it 
any I is kind I know, happy me

3245
07:16:24,708 --> 07:16:29,185
into easy I'm concepts, ask you 
understand the andand you can as

3246
07:16:29,186 --> 07:16:35,090
long time, as  to spendpossible 
but, this, explaining opinion. I

3247
07:16:35,871 --> 07:16:39,778
unpopular don't like an yes. 
>> Okay,

3248
07:16:44,477 --> 07:16:49,348
CSS and JS asconcept!   I  like,
a

3249
07:16:49,349 --> 07:16:56,746
[Applause].  mean, [Laughter].  
I lot ahaven'tand, done a for

3250
07:16:56,747 --> 07:17:00,760
while, might like, it I 
separation learned so think

3251
07:17:00,761 --> 07:17:04,269
front-end I  years agoit is  
idea, maybe nicejust becoding

3252
07:17:04,270 --> 07:17:11,658
me. sort, of someopinions!   all
not unpopular that ... .  two

3253
07:17:12,228 --> 07:17:15,836
>> I
>> have better!   opinion

3254
07:17:15,837 --> 07:17:21,423
>> Theis more unpopular the
things The first  think feel to

3255
07:17:21,424 --> 07:17:22,794
that we I thiscrazy camp"people 
here in  or, "Everybody's don't

3256
07:17:22,795 --> 07:17:26,295
have in that's the same got way.
this think over  to  just are

3257
07:17:26,296 --> 07:17:30,525
like, "Everybody do  have I
differentbuilding it and  all

3258
07:17:30,526 --> 07:17:33,779
way." for  teams audiences 
because webig and we'redifferent

3259
07:17:33,780 --> 07:17:38,616
sized different just  use cases,
I forlittle really different

3260
07:17:38,617 --> 07:17:40,319
reasons. we need think that the
internet web  is in our  a down

3261
07:17:40,320 --> 07:17:44,634
some put tent, and flexible to 
be a and bit more thinking,

3262
07:17:49,565 --> 07:17:51,565
those arguments. But are fine

3263
07:17:53,574 --> 07:17:56,182
too. My second opinion, going 
which is sure, yes, probably

3264
07:17:56,183 --> 07:18:00,088
you're like, going be, 
everyone'sunpopular to to  say

3265
07:18:00,089 --> 07:18:09,827
is SVG that,underutilised  and 
awesome for the on web!

3266
07:18:09,828 --> 07:18:13,806
Especially worked for lead 
contracts benefits. I'vefrom ten

3267
07:18:13,828 --> 07:18:15,939
performancewheregraphics and 
their consulting   things.

3268
07:18:15,940 --> 07:18:18,522
optimising  I took and one 
optimising the time SVG seconds

3269
07:18:18,594 --> 07:18:25,203
performance down to things to
second by changing over and SVG

3270
07:18:25,204 --> 07:18:29,025
Use when learnwould it!   like,
>> I  know -is unpopular, I

3271
07:18:29,448 --> 07:18:33,041
peoplewould one  this if for 
don't  know don't   ask

3272
07:18:33,042 --> 07:18:35,364
So I here andis a unpopular. say
opinion, here on there  Twitter,

3273
07:18:35,784 --> 07:18:42,106
think my really unpopular Ioften
it's not butcommunity of be it,

3274
07:18:43,259 --> 07:18:46,824
synthetic lot  focus in the on
benchmarks, that doesn't load

3275
07:18:46,825 --> 07:18:49,982
this describe that synthetic 
what a very of an and like table

3276
07:18:50,225 --> 07:18:52,364
a shows comparison focus more on
actual anddifferent benchmarks

3277
07:18:52,365 --> 07:18:55,356
implementations with real-world 
betteras a create  scenarios,

3278
07:18:55,357 --> 07:19:00,391
think  should like. I and 
application we looks community,

3279
07:19:00,416 --> 07:19:02,416
consider,

3280
07:19:03,603 --> 07:19:09,903
then,timetiny  application  that
if a your can optimisetwo-times

3281
07:19:09,904 --> 07:19:16,410
and  slice of it you forever 
makethelayers is  more

3282
07:19:16,411 --> 07:19:18,045
performant, if  tiny actual 
problemactually  all the doesn't

3283
07:19:18,046 --> 07:19:20,741
that  optimising that you have, 
real

3284
07:19:20,742 --> 07:19:25,198
like,slice you're the optimise 
-- you need - affect We need

3285
07:19:25,199 --> 07:19:28,479
need toapplication time.whole
tiny we   we one have -to

3286
07:19:28,900 --> 07:19:33,611
optimisations on the just  not 
apply  all on whole - and and

3287
07:19:33,612 --> 07:19:39,998
programmes, like layers, feel
>>Dan's  has layer.  I slowly

3288
07:19:39,999 --> 07:19:42,689
just  into opinions like -   it 
feel He unpopular makes turn I

3289
07:19:42,879 --> 07:19:46,127
thatpopular just opinions. 
opinion.  energy that popular

3290
07:19:48,424 --> 07:19:54,430
into a my
>> Then I change mind!

3291
07:20:02,164 --> 07:20:04,164
[Laughter]. 
>>

3292
07:20:05,789 --> 07:20:09,743
So, what excited about in  you 
mostthe most - are what

3293
07:20:13,947 --> 07:20:15,947
is JavaScript

3294
07:20:17,447 --> 07:20:22,192
to over ecosystem?  for each I 
want scoot here!

3295
07:20:22,193 --> 07:20:26,228
>> of 
[Laughter].

3296
07:20:26,229 --> 07:20:31,344
>> [Laughter]  joke!  a That's 
you doesn't build the same I

3297
07:20:31,345 --> 07:20:35,288
just way. think
[Laughter].  I React is not bad!

3298
07:20:36,667 --> 07:20:38,667
your said

3299
07:20:40,884 --> 07:20:49,568
most single the that single  
It's likeexciting

3300
07:20:52,838 --> 07:20:55,607
>> thing supported  thing. Is
exciting absolute  be it - most

3301
07:20:55,608 --> 07:20:57,852
excitingfor be really  not to
without - the  is Node That will

3302
07:20:58,297 --> 07:21:00,763
Node in 6can everybody thenany 
assembly more. Like, so it. many

3303
07:21:01,450 --> 07:21:07,152
justsingle different web to me 
because  we usefeatures use can

3304
07:21:07,153 --> 07:21:13,396
like, youand that,  different 
become available type so much of

3305
07:21:14,913 --> 07:21:21,299
have  Node. Wecoding done on be 
a  6 as  can Nodesecond-class to

3306
07:21:21,300 --> 07:21:26,099
treat a assembly as whole Web is
library. wereto our citizen if

3307
07:21:26,100 --> 07:21:32,722
we  pull it into going to with
>> going to go just  be crazy.

3308
07:21:32,723 --> 07:21:36,529
I'm not is actually has the not
Node. It MPM  language that,

3309
07:21:37,046 --> 07:21:39,537
remotely.incredibly  other own 
like stuff  like public.

3310
07:21:39,581 --> 07:21:46,585
registry, no your so anything 
make like Yes,  just to Just

3311
07:21:46,586 --> 07:21:48,586
easythat.

3312
07:21:53,888 --> 07:22:00,848
for questions   So many
>> Dan.

3313
07:22:00,849 --> 07:22:03,316
>> audience
Crowd favourite!   He's an

3314
07:22:03,317 --> 07:22:10,105
favourite.  feel generic
>> I a Let's one. see. like but

3315
07:22:10,106 --> 07:22:17,288
I I upvoted too not foundthat 
it's the

3316
07:22:17,289 --> 07:22:19,252
>> something Luke, "Can you like
identify from

3317
07:22:19,253 --> 07:22:23,958
>> question.  Go says for it.   
It made that you career feel

3318
07:22:23,959 --> 07:22:30,114
most your a moment in joyful?"
happen,

3319
07:22:30,115 --> 07:22:35,465
I all worst that  the follow our
breaking, things down,  builds

3320
07:22:35,466 --> 07:22:39,254
especially of I like our in is 
career, change like and

3321
07:22:39,255 --> 07:22:41,887
production good that, feel like 
this weis a

3322
07:22:45,943 --> 07:22:51,981
always pace. web working think 
So app  Yeah. was

3323
07:22:51,982 --> 07:22:57,132
>> web a Iwebpack was -  on it 
JS to an, andI from  I think it

3324
07:22:57,133 --> 07:22:59,897
a and  found page called "hot 
was converting I motor

3325
07:22:59,898 --> 07:23:02,085
Iabout in 2014, was.

3326
07:23:06,006 --> 07:23:08,006
docs, webpack the old I 
replacement" on so asked webpack

3327
07:23:08,502 --> 07:23:12,811
API me, it on docs none of to 
the Slack and where made sense

3328
07:23:12,893 --> 07:23:19,234
just described functions what  
really itandis explanation, with

3329
07:23:20,156 --> 07:23:26,120
good and exactly that replied  
reallycould I I  a React wow.

3330
07:23:26,121 --> 07:23:28,817
so I was withdeclarative, so 
thinking, like  combinebecause

3331
07:23:28,818 --> 07:23:33,522
it thathave is   maybe is React 
could in changes and see I

3332
07:23:33,701 --> 07:23:38,391
fascinated components  edit my 
an soreal update,maybe was of

3333
07:23:38,392 --> 07:23:43,368
thought   time, and prototype I 
I can a bythis. this. think I

3334
07:23:43,369 --> 07:23:49,577
until make 6 stayed   I I itam 
was kind am, 6  in I Alchemy at

3335
07:23:49,578 --> 07:23:56,836
to and  and finally, working it,
of video ofwho  video to time

3336
07:23:56,837 --> 07:24:02,697
and followers at therecord a 50
posted the Twitter, I my had

3337
07:24:02,698 --> 07:24:09,042
were felt that It Christopher 
friends. tweeted video.   going

3338
07:24:09,043 --> 07:24:14,871
to isgood!  aboutbut,
>> I feel one,  like thiswas be

3339
07:24:14,872 --> 07:24:19,134
a weird   itactually, thinking I
like, actually when what I'm

3340
07:24:19,812 --> 07:24:23,076
understood my it's in like,  
right now, much completely mind,

3341
07:24:24,092 --> 07:24:27,894
happeninglike, pretty  was a 
what actually the call to

3342
07:24:27,895 --> 07:24:30,653
executes actual the main when a
programmes like just lino isand

3343
07:24:30,808 --> 07:24:36,794
programme. It from  whatever 
every step on, of going function

3344
07:24:37,518 --> 07:24:42,307
muchthere are supposed to run,  
is like so just pretty  is

3345
07:24:42,416 --> 07:24:45,524
amazing to to like it and 
understand.  look at

3346
07:24:48,598 --> 07:24:50,598
most a to
>> I think the got to goexciting

3347
07:24:50,661 --> 07:24:56,353
for me, ever my  for yes, I  in 
- the time time  a atcareer was

3348
07:24:56,354 --> 07:25:00,197
ever spoke first wasMGConf and I
so I conferencethe first was

3349
07:25:00,198 --> 07:25:06,615
time don't conference even
feeling did  Itechnology or  but

3350
07:25:06,616 --> 07:25:10,051
the remember if how  really well
not, understand people clap of

3351
07:25:10,052 --> 07:25:11,372
isthe it
it having  andunsensationalably

3352
07:25:11,373 --> 07:25:15,685
was -  when and kind eye for you
good their works, of so sparkle

3353
07:25:15,686 --> 07:25:18,020
in feels

3354
07:25:24,006 --> 07:25:31,744
addicting,empower,  to 
insatiaiating be able topeople

3355
07:25:31,745 --> 07:25:37,466
have the it meant of  about that
or kind addicting. Kind other be

3356
07:25:37,467 --> 07:25:41,311
passionate same things you
moments love.  really  that

3357
07:25:41,312 --> 07:25:42,957
been
>> haven't most significant very

3358
07:25:42,958 --> 07:25:47,278
I actually they think probably 
been of the like for me have

3359
07:25:47,279 --> 07:25:53,283
quiet,where,been, like, a
forgetting moment   what hours,

3360
07:25:53,284 --> 07:25:56,892
and you know, Eureka for 12 eat 
aprobablytime,  like happened

3361
07:25:56,893 --> 07:26:00,429
and working that'sstuff, having 
feel mode,  to pee but flow I

3362
07:26:00,430 --> 07:26:04,384
and just great that me because 
when  the happiest.I'm in  like

3363
07:26:04,854 --> 07:26:10,117
So noone that are when I'm  that
thethis,morerecordable  that

3364
07:26:10,118 --> 07:26:16,549
moments like   for say something
was so I to would that of been

3365
07:26:16,550 --> 07:26:19,594
comes had I a lot mind a was 
like making for career-enhancing

3366
07:26:19,633 --> 07:26:24,256
andconference wasanything, to 
long quietly   I work  really

3367
07:26:24,257 --> 07:26:27,530
time, this showed nobody knew 
whotonne or and like I spoke at

3368
07:26:27,531 --> 07:26:30,112
where I a  see day.
Because people and all of a that

3369
07:26:30,277 --> 07:26:33,543
of demos,analytics sudden that 
kind could from   oflikesaw my

3370
07:26:33,544 --> 07:26:40,731
you that  the went and went on 
to websitewas that this  and

3371
07:26:40,732 --> 07:26:43,869
been Ireally goodgoing to I've 
that because work, stuff was a

3372
07:26:43,870 --> 07:26:46,816
people  probably the  feeling, 
bass this that like finally But

3373
07:26:46,817 --> 07:26:55,158
are say, look at forever. would 
makingbut yeah, I  been  one,

3374
07:26:55,159 --> 07:26:57,159
ones have most career-enhancing 
the happiest

3375
07:27:12,672 --> 07:27:15,773
next question was specifically 
for Anna but could be for

3376
07:27:15,774 --> 07:27:19,080
everyone as well. Anna, what is 
a good entry-level way to get

3377
07:27:19,081 --> 07:27:22,652
involvedprivate. The with the 
Node project. It seems everyone

3378
07:27:22,653 --> 07:27:26,071
here is active with the 
different open-source project,

3379
07:27:26,072 --> 07:27:31,377
so I think generally, what's a 
good entry-level way to get

3380
07:27:31,378 --> 07:27:33,378
involved with an

3381
07:27:41,387 --> 07:27:43,387
open-source project? 
>> You can have my

3382
07:27:45,973 --> 07:27:50,330
mic. It's like - 
>> It is like, for Node

3383
07:27:50,686 --> 07:27:56,011
specifically, there's this 
awesome website, it's called

3384
07:28:01,898 --> 07:28:06,431
nodetodo.org. I'm so glad he is 
around Node, and he maintains a

3385
07:28:06,858 --> 07:28:08,858
list of good first contributions
for

3386
07:28:11,318 --> 07:28:14,416
Node. And yeah, if you're 
interested doing that, that's a

3387
07:28:14,792 --> 07:28:17,772
really good starting point. You 
can also like try to talk to me

3388
07:28:17,773 --> 07:28:23,185
and I will find something for 
you. And yes, you might want to

3389
07:28:23,354 --> 07:28:26,124
like, if you have something that
you're especially interesting in

3390
07:28:26,335 --> 07:28:30,873
in Node, that might be a good 
thing to do, just message me,

3391
07:28:33,240 --> 07:28:39,600
otherwise go to nodetodo.org. 
>> I should say figure out what

3392
07:28:39,932 --> 07:28:43,207
drives you and what gets you out
of bed every day if you want to

3393
07:28:43,563 --> 07:28:46,820
contribute to something? Take 
that skill and apply it to the

3394
07:28:47,243 --> 07:28:50,835
project if it is applicable. 
Most times, it is going to be.

3395
07:28:50,836 --> 07:28:54,509
When I started contributing to 
webpack or even joined the core

3396
07:28:54,933 --> 07:28:58,731
team, I had one commit to the 
project, and that's it. And I

3397
07:28:58,732 --> 07:29:01,831
had zero following on Twitter, 
so all I would do is go on

3398
07:29:02,340 --> 07:29:06,338
Twitter, and search webpack. And
I responded to every single

3399
07:29:10,088 --> 07:29:12,806
tweet. That's it. Like I 
literally did that, because, at

3400
07:29:13,557 --> 07:29:16,735
the time, I had worked in 
technical support, and I worked

3401
07:29:16,736 --> 07:29:21,664
with people, and so it is an 
easy way for me to provide value

3402
07:29:22,704 --> 07:29:25,748
that's totally in my wheel-house
before speaking, doing

3403
07:29:26,235 --> 07:29:29,315
documentation, before any of it.
Usually, like when people ask me

3404
07:29:29,841 --> 07:29:34,622
this question, I usually end up 
losing them to a different

3405
07:29:34,808 --> 07:29:39,156
project like Babel or React 
because they're like I like

3406
07:29:39,745 --> 07:29:43,534
working on V-dom instead. I 
always say understand what you

3407
07:29:43,535 --> 07:29:47,088
love to work on. That to me is 
what open source is about, that

3408
07:29:47,542 --> 07:29:50,541
you are working on things that 
really drive you, and then

3409
07:29:51,157 --> 07:29:53,167
making the world better because 
everybody else depends

3410
07:29:56,666 --> 07:30:02,878
on it. 
Then also to quote Dan Abramov

3411
07:30:02,879 --> 07:30:05,987
on Twitter, another advice is 
like code seems intimidating,

3412
07:30:06,815 --> 07:30:11,086
just start at the most familiar 
place, and then branch out. I

3413
07:30:11,747 --> 07:30:17,119
think that is like pseudo 
quoting!  Start somewhere where

3414
07:30:17,481 --> 07:30:20,584
you can understand and read and 
go further.

3415
07:30:20,585 --> 07:30:24,486
>> I still don't understand like
50 per cent of code in

3416
07:30:31,438 --> 07:30:36,343
React!  I would say that, like, 
since I work in the Reacted

3417
07:30:36,344 --> 07:30:38,462
team, I should say something 
about React, and I would say

3418
07:30:38,463 --> 07:30:43,721
that maybe React itself is not 
the most easily accessible

3419
07:30:43,722 --> 07:30:47,138
project to contribute to because
there is like, it is even hard

3420
07:30:47,139 --> 07:30:51,829
for us to contribute to it just 
because it is so, like, large

3421
07:30:51,830 --> 07:30:54,939
and complex in terms of what it 
needs to do and how you need to

3422
07:30:55,437 --> 07:30:59,566
think about all those features 
behaving well together. And

3423
07:30:59,567 --> 07:31:02,580
we're trying to improve the 
documentation but it is pretty

3424
07:31:02,827 --> 07:31:07,132
hard. But I think there is an 
ecosystem, and like the way I

3425
07:31:07,926 --> 07:31:10,060
think one of the first 
contributions that I did before

3426
07:31:10,502 --> 07:31:14,375
I was on the React teem, I - 
team, I was working on a

3427
07:31:18,222 --> 07:31:21,475
project like a web app, and I 
needed routing, and I saw this

3428
07:31:21,476 --> 07:31:25,221
project called React Router but 
the problem was it didn't

3429
07:31:25,222 --> 07:31:27,699
support, so when it switched 
between different pages, I think

3430
07:31:28,062 --> 07:31:30,479
it would always crawl to the top
-

3431
07:31:30,480 --> 07:31:33,935
scroll to the top, but I had an 
interface where I had tabs

3432
07:31:34,393 --> 07:31:37,894
inside my app and I didn't want 
them switching tabs to scroll to

3433
07:31:38,935 --> 07:31:40,935
the top. I sent

3434
07:31:42,742 --> 07:31:46,682
a VR to implement this 
behaviour, and they've since

3435
07:31:46,683 --> 07:31:49,512
removed that code and made it 
work differently. I think it is

3436
07:31:49,513 --> 07:31:52,248
important as you don't have to 
come to the open source with the

3437
07:31:52,654 --> 07:31:56,001
mind set of where can I start 
contributing?

3438
07:31:56,002 --> 07:31:59,365
You can build your own stuff 
that you need for your app but

3439
07:31:59,749 --> 07:32:03,310
have this mind set that this 
application code, it's not

3440
07:32:03,311 --> 07:32:06,096
something that is packaged and 
given to you, and you can't

3441
07:32:06,954 --> 07:32:11,351
tweak it. It is just code 
reading by other people. It has

3442
07:32:11,646 --> 07:32:15,034
hacks, it is not super fast, 
maybe didn't spend optimising

3443
07:32:15,535 --> 07:32:19,044
it. It might lack important 
features, and, if you come with

3444
07:32:19,297 --> 07:32:22,740
this mind set of this code could
as well have been written by me,

3445
07:32:23,033 --> 07:32:26,196
then you can see, here's how I 
can improve it. Here is the

3446
07:32:26,452 --> 07:32:31,065
thing that I need for my app. 
Just try to add it,

3447
07:32:35,431 --> 07:32:37,416
and it is often very small 
things that are valuable. Maybe

3448
07:32:37,417 --> 07:32:40,905
that helps. 
>> I think there are really good

3449
07:32:41,192 --> 07:32:44,950
ideas in here. There's a couple 
of small things like a lot of

3450
07:32:46,118 --> 07:32:50,118
GitHub repos have helped wanted,
good first-issue labels. You can

3451
07:32:50,119 --> 07:32:52,534
definitely explore those. There 
are other ways to contribute

3452
07:32:53,162 --> 07:32:57,941
too, like speakers need people 
to practise with, if you know

3453
07:32:57,942 --> 07:33:01,518
somebody else that is giving a 
first-time talk, or you can help

3454
07:33:01,519 --> 07:33:05,679
mentor them in that way, or you 
can mentor people doing peer

3455
07:33:05,940 --> 07:33:10,785
programming. It doesn't 
necessarily have to be your

3456
07:33:11,131 --> 07:33:13,712
first commit or something like 
that. If you're interesting in

3457
07:33:14,174 --> 07:33:16,130
doing first commit, I think 
reading through the issues and

3458
07:33:16,131 --> 07:33:18,660
getting a sense of where things 
are most valuable, reading

3459
07:33:19,250 --> 07:33:22,393
before committing is really 
helpful because then you kind of

3460
07:33:22,913 --> 07:33:27,989
can see like what is going on in
whole project, what people are

3461
07:33:28,307 --> 07:33:32,830
most focusing on, what people 
are having a hard time with.

3462
07:33:33,215 --> 07:33:34,979
Taking some information in 
before adding things, and I

3463
07:33:34,980 --> 07:33:39,107
guess the last thing I would say
is don't have your first commit

3464
07:33:39,518 --> 07:33:44,125
be huge. Like, it is really hard
to get a commit in that is

3465
07:33:44,477 --> 07:33:47,161
gigantic because maybe you have 
a piece of it that is great and

3466
07:33:47,162 --> 07:33:51,633
some other part, they can't use 
it, and you've got to have a

3467
07:33:52,466 --> 07:33:56,593
million comments back and forth 
on your PR. The first time you

3468
07:33:57,535 --> 07:34:00,204
commit something, maybe pick a 
small thing that you can work

3469
07:34:00,528 --> 07:34:05,696
on, more likely to get it. 
>> I also just realised that

3470
07:34:07,873 --> 07:34:12,234
another very helpful - Sarah put
it, you don't have to make

3471
07:34:12,601 --> 07:34:15,567
commits your first contribution.
I think what a lot of projects

3472
07:34:15,568 --> 07:34:20,086
really need, and that includes 
React, is just somebody helping

3473
07:34:20,386 --> 07:34:24,470
people out and the issues. For 
example, I - so, when I started

3474
07:34:26,360 --> 07:34:28,656
working with JavaScript, I have 
a file, so the first things that

3475
07:34:28,657 --> 07:34:32,226
I try to do was just, I was 
reading questions that people

3476
07:34:32,807 --> 07:34:35,812
would post, and I tried to 
answer them, even though I don't

3477
07:34:35,813 --> 07:34:38,393
really know the things, so I 
would research that question for

3478
07:34:38,777 --> 07:34:42,144
them, and try to figure it out, 
and, if I have after solution, I

3479
07:34:42,525 --> 07:34:45,858
would post it. That really 
helped my learning. I think you

3480
07:34:45,859 --> 07:34:52,000
can do the same with any 
projects you care about. You can

3481
07:34:52,001 --> 07:34:55,498
go to the section, see someone 
posted the bug, try to reproduce

3482
07:34:57,129 --> 07:35:01,592
it, debug, maybe suggest you use
this thing wrong, or maybe

3483
07:35:01,896 --> 07:35:05,033
there's an actual bug and you 
could add more details from

3484
07:35:06,655 --> 07:35:10,082
somebody somebody from the team 
to help fix that bug.

3485
07:35:10,083 --> 07:35:14,619
>> One more weird anecdote story
off of that which is really

3486
07:35:14,827 --> 07:35:21,016
cool. There is a guy that works 
with me who is like LinusBorg on

3487
07:35:22,551 --> 07:35:27,533
GitHub, and he actually isn't a 
programmer for everyday life, he

3488
07:35:27,938 --> 07:35:32,021
does a completely different job,
and he's got a hobby of

3489
07:35:32,565 --> 07:35:35,479
contributing to open source, and
he's on the core team. The way

3490
07:35:35,480 --> 07:35:39,876
he started was he went through, 
and he read a bunch of view

3491
07:35:40,135 --> 07:35:43,986
code, and then started answering
forum questions, and he did that

3492
07:35:45,035 --> 07:35:48,944
for a really long time until we 
were like, "Why aren't you on

3493
07:35:48,945 --> 07:35:53,115
the core team?"  He's built 
libraries and things like that,

3494
07:35:53,116 --> 07:35:56,029
but I think that's such a great 
example and hopefully he's on

3495
07:35:56,030 --> 07:35:58,560
the stage telling the story, 
because I think that's such a

3496
07:35:58,973 --> 07:36:01,658
cool thing that you can kind of 
start off answering questions

3497
07:36:02,254 --> 07:36:04,917
and then eventually know the 
system so well that you're a

3498
07:36:07,823 --> 07:36:09,847
core contributor. 
>> A lot of really good ideas

3499
07:36:09,848 --> 07:36:13,644
there. I hope to see more people
after this conference, go home -

3500
07:36:14,251 --> 07:36:17,662
not tonight, because a party 
tonight. Go home, and make at

3501
07:36:18,078 --> 07:36:21,885
least one contribution to one 
open-source project. That would

3502
07:36:22,993 --> 07:36:29,990
be great. I think we should wrap
it up. Yeah. Any last words

3503
07:36:34,308 --> 07:36:37,397
of advice? 
>> If I'm allowed to criticise

3504
07:36:37,638 --> 07:36:42,264
GitHub a little bit, I think it 
would be great - so one of the

3505
07:36:42,265 --> 07:36:45,765
people contributions to 
open-source is selfish, which is

3506
07:36:45,766 --> 07:36:50,519
fine. If people want to show off
as contributors and have that in

3507
07:36:50,991 --> 07:36:54,457
their profile, but as far as I 
know, even if you spend two

3508
07:36:54,458 --> 07:36:57,020
years responding to issues and 
helping people, you still don't

3509
07:36:57,256 --> 07:37:01,748
show up as a contributor on that
project, so if GitHub could

3510
07:37:01,749 --> 07:37:05,140
change that, that would be 
really great.

3511
07:37:05,141 --> 07:37:09,080
>> Also, if GitHub, if you're 
listening!

3512
07:37:09,081 --> 07:37:12,691
>> We have at least two GitHub 
employees here!  I would really

3513
07:37:13,075 --> 07:37:15,075
love a pay-to-support

3514
07:37:17,455 --> 07:37:20,016
button. 
For webpack and things - I do

3515
07:37:20,427 --> 07:37:23,385
support webpack and other 
projects but I would love to buy

3516
07:37:23,627 --> 07:37:26,522
someone a coffee or do something
really quick to help support

3517
07:37:28,530 --> 07:37:30,530
people, so, that would be really

3518
07:37:33,477 --> 07:37:35,477
awesome. 
>> There are egg balls on their

3519
07:37:35,764 --> 07:37:39,360
product it'll. She wrote a paper
about open-source funding, and

3520
07:37:40,643 --> 07:37:44,513
that's how she ended up at 
GitHub. She's on their product

3521
07:37:44,514 --> 07:37:47,594
team now. That could be a thing 
in the future.

3522
07:37:47,595 --> 07:37:54,185
>> Are you listening Nadia? Yes.
Final remarks. I would say - I

3523
07:37:54,793 --> 07:37:59,717
said it in my talk, and, like, 
I'm trying to destroy the idea

3524
07:38:00,410 --> 07:38:04,306
of JavaScript fatigue. I know we
have everyday jobs and we need

3525
07:38:04,307 --> 07:38:08,634
to get them done, but it's 
really important that we

3526
07:38:08,635 --> 07:38:11,465
understand and embrace change, 
especially with JavaScript. This

3527
07:38:12,468 --> 07:38:19,341
language changes so much. And 
so, we do it at Microsoft, it is

3528
07:38:19,724 --> 07:38:22,094
part of our growth mind set. 
Understanding and adapting to

3529
07:38:23,318 --> 07:38:27,698
different changes makes you more
dynamic as a programmer, or just

3530
07:38:27,985 --> 07:38:31,185
a human being in general. We're 
not saying you have to use the

3531
07:38:31,613 --> 07:38:34,739
latest technologies but embrace 
what they are, and take five

3532
07:38:35,018 --> 07:38:37,438
minutes out of your day to 
understand what they are, what

3533
07:38:37,789 --> 07:38:39,789
they do, and what they 
accomplish. Look at the

3534
07:38:40,041 --> 07:38:42,314
patterns, and how they can be 
used in the things that you do

3535
07:38:47,353 --> 07:38:50,840
every day. That way, your 
everyday work doesn't feel

3536
07:38:51,335 --> 07:38:53,577
frustrated. Embracing the 
JavaScript Renaissance is fun,

3537
07:38:54,154 --> 07:38:56,456
but struggling with JavaScript 
fatigue, nobody wants to do

3538
07:39:01,779 --> 07:39:05,783
that. I think that it is really 
important that you change the

3539
07:39:05,784 --> 07:39:08,842
mind set. If I were to ask 
anything of you all, it's to

3540
07:39:09,420 --> 07:39:11,781
consider trying it. If it 
doesn't work, tell me I'm wrong

3541
07:39:12,863 --> 07:39:20,308
on Twitter and show me this 
screen capture. Yeah.

3542
07:39:20,309 --> 07:39:24,799
>> So I think I have two notes. 
One is something I talked about

3543
07:39:26,699 --> 07:39:30,154
at this conference was, if you 
think that some software product

3544
07:39:30,435 --> 07:39:36,209
could do something better, that 
you're using like Node, or

3545
07:39:36,622 --> 07:39:39,811
webpack or anything, and you 
find a way to work around that,

3546
07:39:41,571 --> 07:39:47,772
that's cool, but maybe file an 
issue. Because, like, if you're

3547
07:39:47,773 --> 07:39:52,199
running into that problem like 
100 other people will at least,

3548
07:39:52,200 --> 07:39:55,384
and you have a chance to make 
their lives easier. Take that,

3549
07:39:55,385 --> 07:40:00,871
and the other thing is it's like
a lot of these questions that

3550
07:40:01,121 --> 07:40:04,564
were kind of like how to be 
successful in open scores. Or at

3551
07:40:04,982 --> 07:40:10,106
least some of them were, and one
of the things that helps me a

3552
07:40:10,921 --> 07:40:13,783
lot is doing completely 
different stuff, like that has

3553
07:40:14,204 --> 07:40:18,546
nothing to do with coding at 
all. Like, your brain needs that

3554
07:40:18,808 --> 07:40:25,007
- you can't work without that. 
It's take a lot of time to do

3555
07:40:26,272 --> 07:40:28,272
different stuff. 
>> Awesome, thank you so much to

3556
07:40:28,658 --> 07:40:30,658
Dan, Sarah,

3557
07:40:32,639 --> 07:40:37,134
Sean, and Anna. And thank you so
everyone on

3558
07:40:45,942 --> 07:40:49,727
this panel. That was a great 
discussion. I'm sure we could

3559
07:40:50,659 --> 07:40:53,251
have heard more questions and 
answers. I've learned a lot from

3560
07:40:53,662 --> 07:40:55,662
all of

3561
07:40:56,998 --> 07:40:59,935
you combined. 
>> Don't cry. Stop it!

3562
07:40:59,936 --> 07:41:02,215
>> And also, thank you to the 
organisers. I think we should

3563
07:41:02,216 --> 07:41:07,138
wrap up and get to the closing, 
and, yes. Thank you. Thank

3564
07:41:10,996 --> 07:41:12,996
you so much. [Applause].

3565
07:41:42,924 --> 07:41:48,797
still We  closing don't leave 
have the

3566
07:44:57,635 --> 07:44:59,364
remarks. 
>> We've come to the end of our

3567
07:44:59,365 --> 07:45:01,438
two-day event. It's been super, 
wonderful. Who enjoyed the

3568
07:45:05,289 --> 07:45:07,289
whole thing?

3569
07:45:09,354 --> 07:45:11,984
[Cheering and Applause]. 
I just want to take my time to

3570
07:45:11,985 --> 07:45:15,686
thank all the organisers for 
doing all of this. They've

3571
07:45:17,194 --> 07:45:20,492
worked so hard. They behind the 
scenes. Everything is running so

3572
07:45:21,286 --> 07:45:24,848
smoothly up here, but like 
sometimes, they're dealing with

3573
07:45:25,158 --> 07:45:28,700
so much stuff, I just want to 
thank them and give them a round

3574
07:45:29,443 --> 07:45:31,443
of applause because they've been
so amazing. [Applause].

3575
07:45:37,850 --> 07:45:42,929
So, yeah, we've come to the end.
And it's, I mean, really sad.

3576
07:45:43,172 --> 07:45:46,805
>> Sad face. 
>> But we're not going to let

3577
07:45:47,030 --> 07:45:49,030
this get

3578
07:45:51,475 --> 07:45:55,460
to us. We are here for jokes. 
Those who can't see, it says

3579
07:45:55,461 --> 07:46:02,636
roses are red, violets are blue,
unexpected line, unexpected

3580
07:46:02,637 --> 07:46:04,637
basket on line

3581
07:46:07,627 --> 07:46:10,680
32. 
And to those who can see it,

3582
07:46:10,867 --> 07:46:13,912
yes, I programme in Java, I've 
been stuck at this enterprise

3583
07:46:14,142 --> 07:46:16,785
job for the last five years, I'm
slowly deteriorating, this isn't

3584
07:46:17,141 --> 07:46:19,290
a meme, it is a legitimate call

3585
07:46:22,463 --> 07:46:27,020
for help!  It's cut off. But 
there's another one. Anyway,

3586
07:46:27,021 --> 07:46:30,234
we've really enjoyed this, and 
what do you think of it?

3587
07:46:30,235 --> 07:46:33,100
>> It's been wonderful. 
>> Best time ever.

3588
07:46:33,101 --> 07:46:38,630
>> I feel like we feel like John
Snow on that one. It was really

3589
07:46:40,221 --> 07:46:44,827
fun who made that photobooth. 
>> The helmets were way too big

3590
07:46:46,721 --> 07:46:49,348
for my head. 
>> It was heavy. It didn't fit

3591
07:46:52,019 --> 07:46:54,678
my head as well. Iceland is so 
great but I decided to change my

3592
07:46:57,486 --> 07:47:00,689
name. I want it more Icelandic 
sounding.

3593
07:47:00,690 --> 07:47:02,690
>> So my dad's name is

3594
07:47:05,759 --> 07:47:08,889
Orlando. 
>> So I think I'm technically

3595
07:47:09,581 --> 07:47:12,953
Orlando's daughter, so that is 
my name now!

3596
07:47:12,954 --> 07:47:17,481
>> Is it even approved by the 
naming committee? I think they

3597
07:47:17,482 --> 07:47:19,482
have strict rules. 
>> The website of the list of

3598
07:47:19,931 --> 07:47:23,752
approved names by the Icelandic 
naming committee. I picked the

3599
07:47:23,753 --> 07:47:28,248
ones that were closely, very 
similar to my name. So I think

3600
07:47:28,838 --> 07:47:31,516
that's how is works out. 
>> I don't know if you realised

3601
07:47:31,968 --> 07:47:33,968
that people here are very tall, 
and we're

3602
07:47:38,824 --> 07:47:44,732
not tall. I'm 1 centimetres 58 
on a good day depending on

3603
07:47:44,733 --> 07:47:49,335
humidity. I don't know, I don't 
think we will be accepted as

3604
07:47:49,336 --> 07:47:51,427
Icelandic. 
>> I think that's part of their

3605
07:47:52,104 --> 07:47:56,176
citizenship test:  how tall are 
you? Are you at least 170. No,

3606
07:47:58,517 --> 07:48:00,517
I'm not!  So, I

3607
07:48:02,237 --> 07:48:05,295
just want to post our Twitter 
again, because I want to be

3608
07:48:05,296 --> 07:48:09,583
Twitter famous like Dan but also
keep in touch with everyone,

3609
07:48:09,584 --> 07:48:13,170
because I enjoyed my 
interactions with everyone so

3610
07:48:13,420 --> 07:48:17,065
far, and I have had really good 
conversations with a lot of you.

3611
07:48:17,515 --> 07:48:23,628
It's been really great. Follow 
me and Vanessa on Twitter, and

3612
07:48:24,110 --> 07:48:25,678
follow these conversations and 
talking about JavaScript, and

3613
07:48:25,679 --> 07:48:31,014
you can also follow my memes. I 
post a lot of really, I mean,

3614
07:48:32,804 --> 07:48:35,242
dumb shit sometimes. So let's 
talk about the party tonight.

3615
07:48:35,243 --> 07:48:37,243
We're going to Bazaar.

3616
07:48:42,322 --> 07:48:48,209
There are buses scheduled from 
5.45 to 11 from the Marina and

3617
07:48:48,210 --> 07:48:53,097
here, so get ready to party. I 
heard that there is a karaoke,

3618
07:48:53,098 --> 07:48:56,652
so I bet, like, 20 bucks 
someone's going to sing, "Don't

3619
07:48:56,653 --> 07:49:00,763
stop believing".
Someone's going to do that.

3620
07:49:00,764 --> 07:49:07,321
>> For sure. 
>> Mr Bright Side, Wonder Wall.

3621
07:49:07,703 --> 07:49:09,703
All of

3622
07:49:12,173 --> 07:49:15,787
that!  I want to promote again 
how Canadian we are!  So

3623
07:49:22,126 --> 07:49:22,386
sorry!  
>> Saturday.

3624
07:49:22,387 --> 07:49:25,091
>> We do have a trip on Saturday
which is great because we get to

3625
07:49:25,697 --> 07:49:32,934
see Iceland. We're driving down 
to the south coast, it will be

3626
07:49:32,935 --> 07:49:37,078
from 10. Is that six now? I 
don't know how to read time. And

3627
07:49:37,317 --> 07:49:43,331
it is cut off over here. Yes, 
there's more info on the

3628
07:49:43,650 --> 07:49:48,441
website. So check it out. And, 
apparently, there's been some

3629
07:49:49,726 --> 07:49:53,314
cancellations, so there will be 
a waiting list opening it up at

3630
07:49:54,777 --> 07:49:58,090
the website. So, you can sign up
for that if you don't already

3631
07:49:58,579 --> 07:50:02,861
have a ticket, and then we're 
also going to the Blue Lagoon

3632
07:50:03,040 --> 07:50:07,854
for a farewell brunch, and this 
is information. I'm really

3633
07:50:08,213 --> 07:50:13,219
excited. It's been on my bucket 
list for the longest time. Yes,

3634
07:50:13,640 --> 07:50:18,560
that's us. I'm glad that most 
people use the nose ring and

3635
07:50:18,826 --> 07:50:24,768
arrest ring to tell me and 
Vanessa apart. Nose ring

3636
07:50:25,058 --> 07:50:27,058
Florida, ear

3637
07:50:28,195 --> 07:50:32,309
Rick, Vanessa. It works out. 
Thanks very much to everyone.

3638
07:50:32,310 --> 07:50:36,938
>> You all have been a wonderful
audience, and so a round of

3639
07:50:38,086 --> 07:50:40,214
applause for all of you. 
>> And I'm going to call on the

3640
07:50:40,677 --> 07:50:45,278
organisers to come up on stage 
because I think they want to say

3641
07:50:59,573 --> 07:51:02,206
flying in to be the Masters of 
the Ceremony. A big thank you to

3642
07:51:02,207 --> 07:51:05,884
you both. Give them a round of 
applause for an awesome

3643
07:51:05,885 --> 07:51:08,351
flying in to be the Masters of 
job.

3644
07:51:08,352 --> 07:51:11,098
[Cheering and Applause]. Yes, 
the party tonight. It is not

3645
07:51:11,834 --> 07:51:14,660
over yet. It is just like a sore
moment, tears are starting to

3646
07:51:15,460 --> 07:51:21,497
flow out. But we still have two 
more days, and one night, so we

3647
07:51:21,977 --> 07:51:25,391
are technically halfway through,
depending on how you look at it.

3648
07:51:25,673 --> 07:51:30,205
But, yes, we will have all of 
the info on the website. Contact

3649
07:51:30,206 --> 07:51:36,729
us on Slack. We want to end like
we end everything at JSConf with

3650
07:51:37,070 --> 07:51:40,429
a big family photo. I want to 
get all the organisers to the

3651
07:51:40,714 --> 07:51:45,598
stage to echo what they said 
without tooting my own horn.

3652
07:51:46,016 --> 07:51:48,016
Epic job by these people. 
Really. Give them a round of

3653
07:51:48,505 --> 07:51:50,505
applause. [Applause].

3654
07:52:02,701 --> 07:52:05,648
And, yes, with that being said, 
I want to invite all of you to

3655
07:52:05,649 --> 07:52:07,649
the stage. 
We will have to move some of the

3656
07:52:08,000 --> 07:52:12,855
tables a bit And, yes, away. We 
are probably 250 or 300 people

3657
07:52:12,856 --> 07:52:18,574
still in the audience, so it's 
going to take an effort to put

3658
07:52:18,575 --> 07:52:22,757
this all on the stage. The photo
will be epic. So, thank you all

3659
07:52:22,758 --> 07:52:24,758
for coming. Join us on the 
stage, and enjoy

