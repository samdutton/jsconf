1
00:00:06,520 --> 00:00:09,889

let's make sure that's guys concede yeah

2
00:00:09,889 --> 00:00:12,410
the slides are up so as a word of

3
00:00:12,410 --> 00:00:14,780
warning I had a nosebleed right before

4
00:00:14,780 --> 00:00:18,320
coming out here so if I suddenly start

5
00:00:18,320 --> 00:00:19,820
like dripping blood everywhere please

6
00:00:19,820 --> 00:00:24,110
excuse me while I fix that but like 80%

7
00:00:24,110 --> 00:00:26,960
chance that won't happen so today I'm

8
00:00:26,960 --> 00:00:28,940
here to talk about encrypting the web

9
00:00:28,940 --> 00:00:32,210
for zero dollars which hope which is

10
00:00:32,210 --> 00:00:33,829
hopefully an amount that everyone can

11
00:00:33,829 --> 00:00:38,420
afford so when we talk about web

12
00:00:38,420 --> 00:00:41,840
security people say oh well you know

13
00:00:41,840 --> 00:00:44,780
what that slows us down like security as

14
00:00:44,780 --> 00:00:47,600
antistick all to speed so I want to

15
00:00:47,600 --> 00:00:49,070
start this talk by talking a little bit

16
00:00:49,070 --> 00:00:50,930
about web performance because I think

17
00:00:50,930 --> 00:00:53,030
performance is a good incentive to

18
00:00:53,030 --> 00:00:54,590
security like if you can have both

19
00:00:54,590 --> 00:00:56,690
performance and security that's a win

20
00:00:56,690 --> 00:00:57,920
win and you have an easier time

21
00:00:57,920 --> 00:01:01,130
convincing people to be secure so who

22
00:01:01,130 --> 00:01:06,649
thinks the web is fast who thinks it's

23
00:01:06,649 --> 00:01:08,930
not okay well so that was kind of a

24
00:01:08,930 --> 00:01:10,640
trick question because what what do we

25
00:01:10,640 --> 00:01:14,270
really mean by fast so let's look at

26
00:01:14,270 --> 00:01:16,760
some data from the last two years on

27
00:01:16,760 --> 00:01:21,860
websites from HTTP archive.org so as you

28
00:01:21,860 --> 00:01:25,549
see the total transfer size of HTML CSS

29
00:01:25,549 --> 00:01:28,040
and JavaScript is steadily going up over

30
00:01:28,040 --> 00:01:31,159
that time the total request size the

31
00:01:31,159 --> 00:01:33,200
total number of requests has you know

32
00:01:33,200 --> 00:01:35,920
hasn't increased significantly

33
00:01:35,920 --> 00:01:39,470
especially CSS is going up at a at a

34
00:01:39,470 --> 00:01:42,049
higher rate than than any other resource

35
00:01:42,049 --> 00:01:45,560
type the number of TCP connections has

36
00:01:45,560 --> 00:01:46,760
actually stayed about the same

37
00:01:46,760 --> 00:01:49,159
so each the average website opens about

38
00:01:49,159 --> 00:01:52,939
40 TCP connections this number of sites

39
00:01:52,939 --> 00:01:55,070
with flash which many of you know is a

40
00:01:55,070 --> 00:01:58,159
huge security problem is thankfully

41
00:01:58,159 --> 00:02:01,420
thankfully dying down but very slowly

42
00:02:01,420 --> 00:02:05,450
the number of HTTP requests happily is

43
00:02:05,450 --> 00:02:09,049
going up so which brings us to the next

44
00:02:09,049 --> 00:02:10,729
point so we we all we probably all know

45
00:02:10,729 --> 00:02:14,239
that HTTPS is the foundation of web

46
00:02:14,239 --> 00:02:16,880
security if you don't have HTTPS you

47
00:02:16,880 --> 00:02:18,400
don't have any meaningful

48
00:02:18,400 --> 00:02:20,290
security so it's it's really a

49
00:02:20,290 --> 00:02:22,200
prerequisite to anything you want to do

50
00:02:22,200 --> 00:02:28,060
on the web so is is TLS fast yet and the

51
00:02:28,060 --> 00:02:30,730
answer I believe is yes so years ago

52
00:02:30,730 --> 00:02:33,610
people would have said no like TCP sorry

53
00:02:33,610 --> 00:02:35,650
TLS handshakes are really slow

54
00:02:35,650 --> 00:02:38,230
you shouldn't implement TLS but I think

55
00:02:38,230 --> 00:02:40,480
the argument is that those arguments are

56
00:02:40,480 --> 00:02:44,980
now invalid as one example who here uses

57
00:02:44,980 --> 00:02:48,819
Netflix right quite a few hands so

58
00:02:48,819 --> 00:02:52,780
Netflix is going to start securing video

59
00:02:52,780 --> 00:02:55,629
streams over HTTPS this year this is a

60
00:02:55,629 --> 00:02:57,220
really big deal because Netflix has a

61
00:02:57,220 --> 00:02:59,049
huge amount of traffic and they were one

62
00:02:59,049 --> 00:03:02,019
of the the last large websites to move

63
00:03:02,019 --> 00:03:06,430
over to HTTPS so in 2015 people would

64
00:03:06,430 --> 00:03:09,819
Netflix and chill you know but in 2016

65
00:03:09,819 --> 00:03:11,920
you can Netflix over HTTPS and chill

66
00:03:11,920 --> 00:03:15,519
which is way better and and to show you

67
00:03:15,519 --> 00:03:18,909
how significant this is so on the the

68
00:03:18,909 --> 00:03:22,180
first chart is the amount of encrypted

69
00:03:22,180 --> 00:03:24,910
traffic in North America so weirdly in

70
00:03:24,910 --> 00:03:26,590
this graph encrypted as read and

71
00:03:26,590 --> 00:03:29,829
unencrypted is green so about 30 percent

72
00:03:29,829 --> 00:03:32,109
of traffic is unencrypted 65 percent is

73
00:03:32,109 --> 00:03:35,709
encrypted in 2016 when Netflix over

74
00:03:35,709 --> 00:03:38,319
moves over to HTTPS that's going to flip

75
00:03:38,319 --> 00:03:41,440
in fact about 65 percent of traffic will

76
00:03:41,440 --> 00:03:44,319
be encrypted and a 30 percent won't be

77
00:03:44,319 --> 00:03:47,440
so so this is a really big deal and if

78
00:03:47,440 --> 00:03:50,069
Netflix can do it um so can we

79
00:03:50,069 --> 00:03:52,870
there's this great website by oh your

80
00:03:52,870 --> 00:03:55,540
Agora called as TLS fasciae and I'll

81
00:03:55,540 --> 00:03:57,190
summarize some of the key points from

82
00:03:57,190 --> 00:04:00,040
that so basically TLS is fast now

83
00:04:00,040 --> 00:04:01,989
because we have faster CPUs and we have

84
00:04:01,989 --> 00:04:04,739
a lot of cool tricks we can use to make

85
00:04:04,739 --> 00:04:09,220
TLS less expensive so before we get into

86
00:04:09,220 --> 00:04:11,019
that let's let's go over what a TLS

87
00:04:11,019 --> 00:04:14,470
handshake looks like so your browser

88
00:04:14,470 --> 00:04:17,409
says okay compute ok server I'd like to

89
00:04:17,409 --> 00:04:21,639
start TLS and server says okay I've AK

90
00:04:21,639 --> 00:04:23,830
knowledge that okay so the sender says

91
00:04:23,830 --> 00:04:26,650
client hello Service says server hello

92
00:04:26,650 --> 00:04:29,680
these are some cipher suites I support

93
00:04:29,680 --> 00:04:32,139
and client goes back and says ok

94
00:04:32,139 --> 00:04:34,449
this is the cypher I pick this is a

95
00:04:34,449 --> 00:04:37,539
random data I'm gonna use as the seed

96
00:04:37,539 --> 00:04:41,199
for our encryption and services okay got

97
00:04:41,199 --> 00:04:43,120
it and then finally after three

98
00:04:43,120 --> 00:04:46,719
round-trips finally we can start sending

99
00:04:46,719 --> 00:04:50,229
data encrypted so this is usually what

100
00:04:50,229 --> 00:04:52,300
people talk about when they say that TLS

101
00:04:52,300 --> 00:04:56,199
is slow or TLS is CPU intensive it's not

102
00:04:56,199 --> 00:04:58,360
the actual you know encrypted data part

103
00:04:58,360 --> 00:05:00,550
it's it's the setting up of encryption

104
00:05:00,550 --> 00:05:03,340
which takes three round-trips the TLS

105
00:05:03,340 --> 00:05:06,669
handshake but there's actually a neat

106
00:05:06,669 --> 00:05:08,469
trick called session resumption which

107
00:05:08,469 --> 00:05:12,219
you can use to reduce reduced round

108
00:05:12,219 --> 00:05:14,199
trips to to round trips in most cases

109
00:05:14,199 --> 00:05:16,659
and I hope everyone has been using this

110
00:05:16,659 --> 00:05:20,050
so basically on the server one way to do

111
00:05:20,050 --> 00:05:22,409
it is that the server keeps track of

112
00:05:22,409 --> 00:05:25,599
which client will like which clients

113
00:05:25,599 --> 00:05:28,060
have been issued which secrets and the

114
00:05:28,060 --> 00:05:30,009
client all the client has to do is say

115
00:05:30,009 --> 00:05:32,379
hey look here's a here's an ID from the

116
00:05:32,379 --> 00:05:34,479
last time we talked I'm just gonna use

117
00:05:34,479 --> 00:05:36,819
the same secret data as last time so

118
00:05:36,819 --> 00:05:39,969
that saves one round-trip and so you can

119
00:05:39,969 --> 00:05:41,650
just say client hello server hello and

120
00:05:41,650 --> 00:05:43,659
then immediately start sending encrypted

121
00:05:43,659 --> 00:05:47,620
data so TLS session resumption is good

122
00:05:47,620 --> 00:05:50,080
and everyone should look look it up and

123
00:05:50,080 --> 00:05:51,430
you know figure out how to set it up in

124
00:05:51,430 --> 00:05:54,789
Apache or nginx it's pretty easy and

125
00:05:54,789 --> 00:05:58,779
it's a it's a good win another way TLS

126
00:05:58,779 --> 00:06:01,469
is going to get faster is with HTTP -

127
00:06:01,469 --> 00:06:04,719
how many people have already set up HTTP

128
00:06:04,719 --> 00:06:07,419
- on any of their servers so it's

129
00:06:07,419 --> 00:06:09,159
actually a very few hands I think maybe

130
00:06:09,159 --> 00:06:11,710
like less than a dozen Wow

131
00:06:11,710 --> 00:06:14,259
so so I'm gonna explain the motivation

132
00:06:14,259 --> 00:06:18,189
for HTTP - so remember in 1995 around

133
00:06:18,189 --> 00:06:21,490
one HTTP one was standardized this is

134
00:06:21,490 --> 00:06:24,669
what websites look like around 1995 and

135
00:06:24,669 --> 00:06:26,289
that's actually kind of what my website

136
00:06:26,289 --> 00:06:27,520
looks like now but we won't talk about

137
00:06:27,520 --> 00:06:29,889
it so there's this header right and unit

138
00:06:29,889 --> 00:06:32,050
say like oh this is yawns MIT homepage

139
00:06:32,050 --> 00:06:34,000
and then there's some content like yawn

140
00:06:34,000 --> 00:06:36,279
is a really boring person etc and this

141
00:06:36,279 --> 00:06:38,469
was really nice and really fast and HTTP

142
00:06:38,469 --> 00:06:40,479
one does those quite well for stuff like

143
00:06:40,479 --> 00:06:43,029
this but this is what websites look like

144
00:06:43,029 --> 00:06:45,380
in 2015 20 years later

145
00:06:45,380 --> 00:06:48,680
you know you usually have think of like

146
00:06:48,680 --> 00:06:50,690
BuzzFeed you have a flash ad you have

147
00:06:50,690 --> 00:06:53,470
some some like ridiculously coke-fueled

148
00:06:53,470 --> 00:06:56,090
advertisements at the top you have some

149
00:06:56,090 --> 00:06:57,860
Twitter polls on the side and you know

150
00:06:57,860 --> 00:07:00,290
for ads a disguise that some tracking

151
00:07:00,290 --> 00:07:03,820
pixels random JavaScript some clickbait

152
00:07:03,820 --> 00:07:05,810
you know just like stuff you don't want

153
00:07:05,810 --> 00:07:07,490
to see and like scrolling using

154
00:07:07,490 --> 00:07:09,620
javascript etc sites are a lot more

155
00:07:09,620 --> 00:07:12,380
complicated than they were in 2003 in

156
00:07:12,380 --> 00:07:15,410
1995 and so it makes sense that we want

157
00:07:15,410 --> 00:07:17,930
a new protocol to handle handle this

158
00:07:17,930 --> 00:07:21,740
kind of document so I think of HTTP 2 as

159
00:07:21,740 --> 00:07:24,590
like HTTP one if HTTP 1 took a lot of

160
00:07:24,590 --> 00:07:28,760
stimulants some of the ways it's faster

161
00:07:28,760 --> 00:07:30,650
are you use by no instead of text and

162
00:07:30,650 --> 00:07:33,650
encoding header compression and server

163
00:07:33,650 --> 00:07:35,450
push but the thing I really want to

164
00:07:35,450 --> 00:07:38,800
point out is that in HTTP 2 you can send

165
00:07:38,800 --> 00:07:41,660
multiple requests on a single TCP

166
00:07:41,660 --> 00:07:44,120
connection remember earlier how I said

167
00:07:44,120 --> 00:07:47,210
most websites use about 40 TCP

168
00:07:47,210 --> 00:07:50,120
connections which seems like a lot you

169
00:07:50,120 --> 00:07:51,590
can reduce that number and therefore get

170
00:07:51,590 --> 00:07:54,470
more performant websites to illustrate

171
00:07:54,470 --> 00:07:58,490
this ok HTTP 1 browser says give me

172
00:07:58,490 --> 00:08:01,160
index dot HTML server site ok here you

173
00:08:01,160 --> 00:08:01,670
go

174
00:08:01,670 --> 00:08:03,530
browsers like ok great I got it now

175
00:08:03,530 --> 00:08:05,540
let's get some stylesheets servers like

176
00:08:05,540 --> 00:08:06,290
here you go

177
00:08:06,290 --> 00:08:07,910
browsers like great now let's get some

178
00:08:07,910 --> 00:08:09,740
more stuff so you it's just like you

179
00:08:09,740 --> 00:08:12,740
know back and forth but in HTTP 2 you

180
00:08:12,740 --> 00:08:14,240
don't like the browser doesn't have to

181
00:08:14,240 --> 00:08:16,550
wait for the server to respond reply

182
00:08:16,550 --> 00:08:18,830
before sending a new request so browser

183
00:08:18,830 --> 00:08:21,770
says get index.html server says here you

184
00:08:21,770 --> 00:08:23,660
go and I'm browser can just say get

185
00:08:23,660 --> 00:08:26,810
styles and get scripts and then both of

186
00:08:26,810 --> 00:08:29,090
those are sent over to TCP the same TCP

187
00:08:29,090 --> 00:08:31,280
connection and so you can see like the

188
00:08:31,280 --> 00:08:34,789
time has strung on the y-axis and that's

189
00:08:34,789 --> 00:08:37,400
pretty great so obviously we all want to

190
00:08:37,400 --> 00:08:40,070
use HTTP - um does that require

191
00:08:40,070 --> 00:08:43,340
encryption this was a huge controversy

192
00:08:43,340 --> 00:08:45,440
in the standards bodies because people

193
00:08:45,440 --> 00:08:46,640
thought oh we should move to an all

194
00:08:46,640 --> 00:08:48,310
encrypted web why don't we just make

195
00:08:48,310 --> 00:08:52,400
HTTP to require encryption well sadly

196
00:08:52,400 --> 00:08:54,470
the answer is no HTTP to does not

197
00:08:54,470 --> 00:08:56,200
require encryption

198
00:08:56,200 --> 00:08:58,150
but happily and practice it kind of

199
00:08:58,150 --> 00:09:00,750
actually does and what I mean by that is

200
00:09:00,750 --> 00:09:03,880
there's two ways to upgrade a site from

201
00:09:03,880 --> 00:09:07,630
HTTP one to HTTP two one method is plain

202
00:09:07,630 --> 00:09:10,330
text HTTP two and the second method is

203
00:09:10,330 --> 00:09:13,840
only available over HTTPS so a method

204
00:09:13,840 --> 00:09:16,090
one the client can send this upgrade

205
00:09:16,090 --> 00:09:17,800
header and then the server replies with

206
00:09:17,800 --> 00:09:20,590
a 101 with switching code and then you

207
00:09:20,590 --> 00:09:23,980
upgrade and it's in the method to the

208
00:09:23,980 --> 00:09:26,590
client says I support HTTP 2 in the

209
00:09:26,590 --> 00:09:30,720
client hello of the TLS handshake and so

210
00:09:30,720 --> 00:09:33,520
most importantly method 2 is the only

211
00:09:33,520 --> 00:09:35,350
one that will be supported by Chrome and

212
00:09:35,350 --> 00:09:37,480
Firefox so if you want to support you

213
00:09:37,480 --> 00:09:39,190
know just these two kind of tiny

214
00:09:39,190 --> 00:09:40,960
browsers you know maybe you might care

215
00:09:40,960 --> 00:09:43,000
about then you should use the second

216
00:09:43,000 --> 00:09:44,710
method if you only care about like curl

217
00:09:44,710 --> 00:09:47,860
and really command line method one works

218
00:09:47,860 --> 00:09:50,560
all right and here's what that looks

219
00:09:50,560 --> 00:09:53,620
like a boring Wireshark dump but you can

220
00:09:53,620 --> 00:09:55,840
see in the client hello there's this al

221
00:09:55,840 --> 00:09:59,320
peon protocol and you can you can open

222
00:09:59,320 --> 00:10:00,580
up Wireshark and look at your browser

223
00:10:00,580 --> 00:10:02,770
and make sure it's supporting HTTP 2 and

224
00:10:02,770 --> 00:10:04,630
your server supports HP 2 if you see

225
00:10:04,630 --> 00:10:07,600
these fields and the client hello the

226
00:10:07,600 --> 00:10:11,470
TLS handshake so that's great right and

227
00:10:11,470 --> 00:10:12,790
that's that should be a good incentive

228
00:10:12,790 --> 00:10:15,040
for all of us to switch over to HTTPS

229
00:10:15,040 --> 00:10:19,780
but then developers say Oh HTTP is

230
00:10:19,780 --> 00:10:21,460
really annoying to set up and maintain

231
00:10:21,460 --> 00:10:23,470
how many of you have said this or heard

232
00:10:23,470 --> 00:10:26,530
someone say this to you before yeah I

233
00:10:26,530 --> 00:10:28,270
hear it less and less now but a few

234
00:10:28,270 --> 00:10:29,440
years ago I think this was like

235
00:10:29,440 --> 00:10:31,290
something that was really common

236
00:10:31,290 --> 00:10:34,840
commonly thought and there's good reason

237
00:10:34,840 --> 00:10:37,480
for it because previously if you wanted

238
00:10:37,480 --> 00:10:39,130
to set up SSL over something like

239
00:10:39,130 --> 00:10:41,110
DreamHost you would have this like long

240
00:10:41,110 --> 00:10:43,450
wiki page with 14 steps and you'd have

241
00:10:43,450 --> 00:10:45,760
to copy and paste certificate signing

242
00:10:45,760 --> 00:10:48,130
request and like not accidentally copy

243
00:10:48,130 --> 00:10:50,110
and paste or private key and do all this

244
00:10:50,110 --> 00:10:55,330
this magic furthermore tziolis isn't a

245
00:10:55,330 --> 00:10:58,930
fixed standard really because as Krypton

246
00:10:58,930 --> 00:11:01,690
our Krypton cryptanalytic attacks get

247
00:11:01,690 --> 00:11:04,510
better cipher suites that we used to use

248
00:11:04,510 --> 00:11:08,260
are deprecated for instance rc4 up until

249
00:11:08,260 --> 00:11:09,710
2013 you know

250
00:11:09,710 --> 00:11:12,620
it was commonly recommended and then we

251
00:11:12,620 --> 00:11:14,780
decided that like NSA can probably break

252
00:11:14,780 --> 00:11:17,030
our c4 so let's just suddenly stop using

253
00:11:17,030 --> 00:11:20,000
it and if you're if you're running a

254
00:11:20,000 --> 00:11:21,290
server you have to keep track of these

255
00:11:21,290 --> 00:11:22,900
things and it's kind of a lot of work

256
00:11:22,900 --> 00:11:25,460
there's also a big problem called mixed

257
00:11:25,460 --> 00:11:27,920
content blocking basically when you

258
00:11:27,920 --> 00:11:30,860
visit a site over HTTPS the browser says

259
00:11:30,860 --> 00:11:33,050
hey I don't want to load any HTTP

260
00:11:33,050 --> 00:11:34,820
content because that's insecure and

261
00:11:34,820 --> 00:11:36,470
that's gonna downgrade the security of

262
00:11:36,470 --> 00:11:39,560
our entire site to http so the browser

263
00:11:39,560 --> 00:11:41,990
instead of loading those HTTP resources

264
00:11:41,990 --> 00:11:45,710
it blocks them and so this can be a pain

265
00:11:45,710 --> 00:11:47,390
for you as a website developer if you're

266
00:11:47,390 --> 00:11:48,830
depending on all these like third

267
00:11:48,830 --> 00:11:51,800
parties that don't use support HTTPS but

268
00:11:51,800 --> 00:11:53,780
you want to move your site over to HTTPS

269
00:11:53,780 --> 00:11:56,210
so when you upgrade like all these

270
00:11:56,210 --> 00:11:57,770
scripts and styles and images are

271
00:11:57,770 --> 00:11:59,060
blocked and someone visits your website

272
00:11:59,060 --> 00:12:00,830
and they're like this is totally broken

273
00:12:00,830 --> 00:12:04,970
what the what the heck but there's a

274
00:12:04,970 --> 00:12:07,400
there's a nice standard so I work I

275
00:12:07,400 --> 00:12:09,740
hoped with this while I was in w3c

276
00:12:09,740 --> 00:12:11,750
it's called upgrade and secure requests

277
00:12:11,750 --> 00:12:15,380
so you can set this header called

278
00:12:15,380 --> 00:12:17,450
content security policy upgrade and

279
00:12:17,450 --> 00:12:19,340
secure request you know just copy and

280
00:12:19,340 --> 00:12:21,020
paste this into your config file or

281
00:12:21,020 --> 00:12:23,120
whatever and basically the browser will

282
00:12:23,120 --> 00:12:25,970
automatically upgrade insecure requests

283
00:12:25,970 --> 00:12:28,580
and treat them as if they were HTTPS so

284
00:12:28,580 --> 00:12:31,010
instead of blocking those HTTP resources

285
00:12:31,010 --> 00:12:33,800
the browser optimistically goes over

286
00:12:33,800 --> 00:12:36,650
HTTP first and sees if they work and if

287
00:12:36,650 --> 00:12:38,660
it doesn't work then it blocks them but

288
00:12:38,660 --> 00:12:41,720
if I actually had to use this recently

289
00:12:41,720 --> 00:12:43,490
because I did something weird with

290
00:12:43,490 --> 00:12:46,460
WordPress and I broke my blog it like

291
00:12:46,460 --> 00:12:48,800
WordPress just rewrote all my HTTPS

292
00:12:48,800 --> 00:12:52,010
links to http and instead of like going

293
00:12:52,010 --> 00:12:54,680
through my code and like manually like

294
00:12:54,680 --> 00:12:58,340
search and replacing HTTP HTTPS I just

295
00:12:58,340 --> 00:12:59,720
set this header upgrade and secure

296
00:12:59,720 --> 00:13:01,700
request and then suddenly the browser

297
00:13:01,700 --> 00:13:03,860
starts upgrading everything and then my

298
00:13:03,860 --> 00:13:07,280
blog is nice and beautiful again okay so

299
00:13:07,280 --> 00:13:09,320
things are getting better right from the

300
00:13:09,320 --> 00:13:12,850
standards perspective and from from like

301
00:13:12,850 --> 00:13:16,850
you know getting TLS into everyone's

302
00:13:16,850 --> 00:13:19,250
configuration but still still TLS is

303
00:13:19,250 --> 00:13:19,910
kind of hard

304
00:13:19,910 --> 00:13:22,400
that's an arguable partly because it

305
00:13:22,400 --> 00:13:23,150
used to cost

306
00:13:23,150 --> 00:13:28,160
money so at iff and mozilla and and a

307
00:13:28,160 --> 00:13:29,870
few other organizations a bunch of

308
00:13:29,870 --> 00:13:32,450
people came together and said so how

309
00:13:32,450 --> 00:13:34,070
about we just start a certificate

310
00:13:34,070 --> 00:13:37,150
authority how hard can it be right and

311
00:13:37,150 --> 00:13:39,110
how about we just give out free

312
00:13:39,110 --> 00:13:40,970
certificates in an automated way that

313
00:13:40,970 --> 00:13:42,680
takes like less than five seconds so

314
00:13:42,680 --> 00:13:44,120
people can't complain that it's taking

315
00:13:44,120 --> 00:13:47,390
too long and how about we automate TLS

316
00:13:47,390 --> 00:13:49,550
configuration for everyone so that when

317
00:13:49,550 --> 00:13:51,860
a cipher suite is deprecated you don't

318
00:13:51,860 --> 00:13:53,720
have to like manually read hacker news

319
00:13:53,720 --> 00:13:55,670
and figure out what to do we'll just do

320
00:13:55,670 --> 00:13:58,820
it for you so let's incorrect it's

321
00:13:58,820 --> 00:14:01,220
called let's encrypt probably most of

322
00:14:01,220 --> 00:14:03,560
you have heard of it by now it's been in

323
00:14:03,560 --> 00:14:07,520
public beta for a while so the way this

324
00:14:07,520 --> 00:14:10,280
was formed was is RG is a new on

325
00:14:10,280 --> 00:14:13,610
nonprofit created mostly from PFF

326
00:14:13,610 --> 00:14:16,490
Mozilla and University of Michigan we

327
00:14:16,490 --> 00:14:19,460
are funded by financial donations from

328
00:14:19,460 --> 00:14:22,430
Cisco and alchemy and also from various

329
00:14:22,430 --> 00:14:25,940
groups like Google for our actual

330
00:14:25,940 --> 00:14:28,130
certificate we are working on getting

331
00:14:28,130 --> 00:14:31,190
into the root certificate stores of all

332
00:14:31,190 --> 00:14:33,890
the major browsers and operating systems

333
00:14:33,890 --> 00:14:36,830
but for now we're Frost signed by a CA

334
00:14:36,830 --> 00:14:38,960
called I don't trust so most browsers

335
00:14:38,960 --> 00:14:41,450
will recognize us because they recognize

336
00:14:41,450 --> 00:14:43,730
ID and trusts so we are seen as a valid

337
00:14:43,730 --> 00:14:47,930
intermediate CA um thank you to all our

338
00:14:47,930 --> 00:14:49,940
sponsors this is who they are in case

339
00:14:49,940 --> 00:14:52,610
you're curious current status is we've

340
00:14:52,610 --> 00:14:54,620
been in beta while we were in private

341
00:14:54,620 --> 00:14:57,110
beta in November for months we're now in

342
00:14:57,110 --> 00:15:01,490
public beta we issued about 10,000 certs

343
00:15:01,490 --> 00:15:03,290
in the first eight hours which was like

344
00:15:03,290 --> 00:15:05,330
whoa we can't believe this is actually

345
00:15:05,330 --> 00:15:05,930
happening

346
00:15:05,930 --> 00:15:08,780
one serve per 30 seconds and so far

347
00:15:08,780 --> 00:15:10,370
there's been over three million

348
00:15:10,370 --> 00:15:12,500
certificates issued the last time I gave

349
00:15:12,500 --> 00:15:16,520
this talk was in March and that was 1.4

350
00:15:16,520 --> 00:15:18,020
million so when I was preparing these

351
00:15:18,020 --> 00:15:19,490
slides I was like oh maybe it's two

352
00:15:19,490 --> 00:15:21,260
million by now but turns out in the last

353
00:15:21,260 --> 00:15:23,840
month and the rate has gone up a bit and

354
00:15:23,840 --> 00:15:25,150
they sent out over three million

355
00:15:25,150 --> 00:15:28,700
certificates um here's the graph you can

356
00:15:28,700 --> 00:15:32,090
see it's going steeply up and to the to

357
00:15:32,090 --> 00:15:33,890
the right I always get right and left

358
00:15:33,890 --> 00:15:35,580
confused

359
00:15:35,580 --> 00:15:39,580
so more stats whelmed France seems to be

360
00:15:39,580 --> 00:15:44,020
the most popular popular theology so far

361
00:15:44,020 --> 00:15:50,470
Germany is pretty close though and okay

362
00:15:50,470 --> 00:15:51,700
so let's talk about let's encrypt

363
00:15:51,700 --> 00:15:53,110
clients because I think this is where

364
00:15:53,110 --> 00:15:55,120
things are really interesting to you all

365
00:15:55,120 --> 00:15:59,650
as JavaScript developers so let's

366
00:15:59,650 --> 00:16:01,900
encrypt tries to address a lot of

367
00:16:01,900 --> 00:16:04,630
different different well so there's a

368
00:16:04,630 --> 00:16:06,520
lot of different different types of

369
00:16:06,520 --> 00:16:08,950
servers let some could be addressing I

370
00:16:08,950 --> 00:16:12,010
call this the let's encrypt the server

371
00:16:12,010 --> 00:16:16,200
the server the server layer cake I guess

372
00:16:16,200 --> 00:16:20,440
so at the top is people like Facebook

373
00:16:20,440 --> 00:16:22,660
and Yahoo who are these large companies

374
00:16:22,660 --> 00:16:24,040
and they run their own custom

375
00:16:24,040 --> 00:16:27,040
infrastructure the one layer below is

376
00:16:27,040 --> 00:16:28,990
people who've on like large websites and

377
00:16:28,990 --> 00:16:31,180
they have multiple servers a layer below

378
00:16:31,180 --> 00:16:33,190
that is people who run single servers

379
00:16:33,190 --> 00:16:34,840
like me like I have a digital ocean

380
00:16:34,840 --> 00:16:37,120
instance since made obeisance tenses and

381
00:16:37,120 --> 00:16:39,340
then at the bottom is this like large

382
00:16:39,340 --> 00:16:41,380
number of websites that use WordPress or

383
00:16:41,380 --> 00:16:43,090
DreamHost where these people just have

384
00:16:43,090 --> 00:16:45,130
these like WYSIWYG editors and they

385
00:16:45,130 --> 00:16:46,480
don't really have a terminal where they

386
00:16:46,480 --> 00:16:49,210
can like log in and do commands so

387
00:16:49,210 --> 00:16:51,460
currently let's encrypt is pretty good

388
00:16:51,460 --> 00:16:54,160
for the middle two tiers but we we still

389
00:16:54,160 --> 00:16:55,870
need some help getting to the getting

390
00:16:55,870 --> 00:16:58,720
the top and bottom layers so how are we

391
00:16:58,720 --> 00:17:01,570
gonna take over the world well so the

392
00:17:01,570 --> 00:17:04,120
good news is as I said if you have if

393
00:17:04,120 --> 00:17:05,770
you're running common server software

394
00:17:05,770 --> 00:17:07,480
will probably work for you already

395
00:17:07,480 --> 00:17:10,060
so our official client which is in

396
00:17:10,060 --> 00:17:13,630
Python will get you a cert and set and

397
00:17:13,630 --> 00:17:15,400
even set it up and configure it on

398
00:17:15,400 --> 00:17:18,700
Apache and nginx people have also been

399
00:17:18,700 --> 00:17:20,200
really active in the community and

400
00:17:20,200 --> 00:17:21,850
they've written these like libraries and

401
00:17:21,850 --> 00:17:24,580
scripts for in bash Python etc just to

402
00:17:24,580 --> 00:17:26,050
do the part where that you like get and

403
00:17:26,050 --> 00:17:27,910
fetch you get a revoke and renew

404
00:17:27,910 --> 00:17:31,030
certificates people have also made a

405
00:17:31,030 --> 00:17:33,130
written integrations for let's encrypt

406
00:17:33,130 --> 00:17:36,340
with popular servers like Express caddy

407
00:17:36,340 --> 00:17:39,310
known middleware like happy and all that

408
00:17:39,310 --> 00:17:41,920
and rails and there's lots more if you

409
00:17:41,920 --> 00:17:44,140
if you want to see see the rest you can

410
00:17:44,140 --> 00:17:47,200
check out our wiki so so that's all good

411
00:17:47,200 --> 00:17:48,790
but if you don't have

412
00:17:48,790 --> 00:17:51,400
she'll then you're kind of in trouble

413
00:17:51,400 --> 00:17:53,140
because you can't just like log in and

414
00:17:53,140 --> 00:17:55,180
say app get install let's encrypt let's

415
00:17:55,180 --> 00:17:58,660
encrypt get me a certificate but there

416
00:17:58,660 --> 00:18:00,340
is a solution which is that we let's

417
00:18:00,340 --> 00:18:02,350
encrypt will partner with your hosting

418
00:18:02,350 --> 00:18:04,570
provider and this is this has been

419
00:18:04,570 --> 00:18:06,340
happening pretty rapidly so let's

420
00:18:06,340 --> 00:18:08,410
encrypt already integrates with dream

421
00:18:08,410 --> 00:18:12,370
host WordPress calm and OVH alchemy is

422
00:18:12,370 --> 00:18:13,900
also working on this and it might be

423
00:18:13,900 --> 00:18:16,600
available to some customers if you use

424
00:18:16,600 --> 00:18:18,490
WordPress and you're using like self

425
00:18:18,490 --> 00:18:20,530
hosted WordPress you can just install a

426
00:18:20,530 --> 00:18:23,650
plugin that someone wrote and finally if

427
00:18:23,650 --> 00:18:25,180
you just want a certificate and you

428
00:18:25,180 --> 00:18:27,610
don't care about like you know having a

429
00:18:27,610 --> 00:18:28,960
fancy command line and being all

430
00:18:28,960 --> 00:18:30,700
efficient you can just get a cert

431
00:18:30,700 --> 00:18:32,740
through your browser like you used to

432
00:18:32,740 --> 00:18:36,010
back in the old days through HTTP GET

433
00:18:36,010 --> 00:18:41,230
HTTP for free com okay so at the top of

434
00:18:41,230 --> 00:18:43,150
the layer cake earlier there was this

435
00:18:43,150 --> 00:18:44,890
this year that said large custom

436
00:18:44,890 --> 00:18:46,990
infrastructure so if you if you work

437
00:18:46,990 --> 00:18:49,000
with a company that has large custom

438
00:18:49,000 --> 00:18:51,270
infrastructure or is a hosting provider

439
00:18:51,270 --> 00:18:53,830
and you're too big to use let's encrypt

440
00:18:53,830 --> 00:18:56,200
right now we can most likely make

441
00:18:56,200 --> 00:18:58,200
something work for you so email us

442
00:18:58,200 --> 00:19:00,940
sponsor outlets encrypts that's probably

443
00:19:00,940 --> 00:19:02,290
not the best email but it was the

444
00:19:02,290 --> 00:19:04,030
closest one I could find or you can just

445
00:19:04,030 --> 00:19:06,370
email me directly we'd love to help you

446
00:19:06,370 --> 00:19:08,800
get more as a sell out into the world

447
00:19:08,800 --> 00:19:12,670
any way we can so yeah so here's some

448
00:19:12,670 --> 00:19:15,460
more data on who is actually using the

449
00:19:15,460 --> 00:19:17,620
let's encrypt client you can see it's

450
00:19:17,620 --> 00:19:20,500
mostly people using our official Python

451
00:19:20,500 --> 00:19:22,540
client and then their smaller numbers

452
00:19:22,540 --> 00:19:25,330
using like the go caddy client and so

453
00:19:25,330 --> 00:19:29,380
forth if you're interested in building a

454
00:19:29,380 --> 00:19:31,690
let's encrypt client for you know some

455
00:19:31,690 --> 00:19:34,090
life for some framework or from server

456
00:19:34,090 --> 00:19:36,130
for some server where they're currently

457
00:19:36,130 --> 00:19:39,520
isn't one it's pretty easy um I'll just

458
00:19:39,520 --> 00:19:41,350
quickly give you like a high-level

459
00:19:41,350 --> 00:19:42,970
overview of how to do that but you can

460
00:19:42,970 --> 00:19:45,340
find all our code on github and you can

461
00:19:45,340 --> 00:19:47,860
look at our Python interfaces file for

462
00:19:47,860 --> 00:19:49,420
like the exact interface you should

463
00:19:49,420 --> 00:19:52,360
implement but basically it's pretty it's

464
00:19:52,360 --> 00:19:55,060
it's pretty simple there's a you have to

465
00:19:55,060 --> 00:19:57,220
implement it an Authenticator which is

466
00:19:57,220 --> 00:19:59,620
the part that proves to the let's

467
00:19:59,620 --> 00:20:01,270
encrypt certificate authority that's

468
00:20:01,270 --> 00:20:02,269
someone

469
00:20:02,269 --> 00:20:05,119
actually owns their domain name so you

470
00:20:05,119 --> 00:20:08,539
have to get challenges perform the

471
00:20:08,539 --> 00:20:11,389
challenges and then revert changes that

472
00:20:11,389 --> 00:20:12,889
were done to the server in order to do

473
00:20:12,889 --> 00:20:15,080
their challenges the protocol is a

474
00:20:15,080 --> 00:20:17,029
little bit gnarly so I won't get into

475
00:20:17,029 --> 00:20:20,389
the details but it's all in there and

476
00:20:20,389 --> 00:20:23,839
then ops and then you can implement this

477
00:20:23,839 --> 00:20:26,719
kind of optional installer part which is

478
00:20:26,719 --> 00:20:29,509
what actually puts the certificate into

479
00:20:29,509 --> 00:20:31,789
the server and sets up SSL and takes

480
00:20:31,789 --> 00:20:34,459
care of renewal so there's a lot more

481
00:20:34,459 --> 00:20:36,889
stuff going on here like figuring out

482
00:20:36,889 --> 00:20:39,139
what domain names someone has set up on

483
00:20:39,139 --> 00:20:42,109
their server figuring out where to

484
00:20:42,109 --> 00:20:44,539
deploy the cert where like which folders

485
00:20:44,539 --> 00:20:47,599
it's been set up in and so forth it's

486
00:20:47,599 --> 00:20:49,099
probably making your eyes bleed so I'm

487
00:20:49,099 --> 00:20:52,369
going to gloss over the slide but at the

488
00:20:52,369 --> 00:20:54,139
end of the day the point of let's

489
00:20:54,139 --> 00:20:56,389
encrypt is that it's easy for people off

490
00:20:56,389 --> 00:20:59,029
or server operators to use and so I'm

491
00:20:59,029 --> 00:21:01,099
gonna show you how easy it is hopefully

492
00:21:01,099 --> 00:21:03,289
in this one simple slide you can get

493
00:21:03,289 --> 00:21:04,940
clone let's encrypt go into your

494
00:21:04,940 --> 00:21:07,339
directory and just run lets approved

495
00:21:07,339 --> 00:21:09,979
Auto to install and then once that's

496
00:21:09,979 --> 00:21:12,589
done just run let's encrypt Apache to

497
00:21:12,589 --> 00:21:13,549
set up on Apache

498
00:21:13,549 --> 00:21:15,440
and in the future you'll be able to run

499
00:21:15,440 --> 00:21:18,320
let's encrypt - - - - - engine X but I

500
00:21:18,320 --> 00:21:20,989
think that's not not fully supported yet

501
00:21:20,989 --> 00:21:23,029
and then later when you want to renew

502
00:21:23,029 --> 00:21:25,459
assert to say let's equip renew and in

503
00:21:25,459 --> 00:21:27,379
the unfortunate case that you have to

504
00:21:27,379 --> 00:21:29,629
revoke a certificate let's encrypt

505
00:21:29,629 --> 00:21:32,629
provoke so that's it's pretty much as

506
00:21:32,629 --> 00:21:34,249
easy as like as it can get

507
00:21:34,249 --> 00:21:37,969
okay and people are using this and just

508
00:21:37,969 --> 00:21:38,959
to prove it to you

509
00:21:38,959 --> 00:21:42,320
this is this was real Firefox telemetry

510
00:21:42,320 --> 00:21:44,690
data of the percentage of page loads

511
00:21:44,690 --> 00:21:48,440
that use HTTPS and as you can see as of

512
00:21:48,440 --> 00:21:50,179
the let's encrypt launch the slope has

513
00:21:50,179 --> 00:21:53,899
gone up visibly so I think let's encrypt

514
00:21:53,899 --> 00:21:55,549
is making a difference in the world in

515
00:21:55,549 --> 00:21:57,139
terms of who you how many people use

516
00:21:57,139 --> 00:22:01,190
HTTPS so let's encrypt is hopefully

517
00:22:01,190 --> 00:22:03,320
gonna make the Internet great again not

518
00:22:03,320 --> 00:22:04,609
that it's not already great it's

519
00:22:04,609 --> 00:22:06,829
actually already pretty great and if you

520
00:22:06,829 --> 00:22:09,469
want to help here are some links that's

