1
00:00:00,140 --> 00:00:04,430

okay whoo

2
00:00:04,430 --> 00:00:09,719
so I've got to talk about end-to-end

3
00:00:09,719 --> 00:00:13,889
testing and why the game has changed so

4
00:00:13,889 --> 00:00:17,100
I actually have a little story to share

5
00:00:17,100 --> 00:00:20,070
as well that's kind of personal but it

6
00:00:20,070 --> 00:00:25,320
means a lot to be here today so this is

7
00:00:25,320 --> 00:00:27,449
my name is will and this is my wife

8
00:00:27,449 --> 00:00:29,730
Diane five years ago we went to our

9
00:00:29,730 --> 00:00:32,300
first J s cough in Florida in the US

10
00:00:32,300 --> 00:00:35,550
this is us on Amelia Island it was a

11
00:00:35,550 --> 00:00:37,290
really great time and I really

12
00:00:37,290 --> 00:00:39,989
appreciated that J's cough welcomed not

13
00:00:39,989 --> 00:00:42,210
just us in the community but our

14
00:00:42,210 --> 00:00:44,460
significant others and our families I

15
00:00:44,460 --> 00:00:46,260
think it's really important to value

16
00:00:46,260 --> 00:00:47,969
that and I really appreciate that that

17
00:00:47,969 --> 00:00:52,230
tradition is continued here today I had

18
00:00:52,230 --> 00:00:54,180
a question at the time that I was trying

19
00:00:54,180 --> 00:00:56,640
to figure out the answer to how do you

20
00:00:56,640 --> 00:00:59,609
test your front-end I think we've got

21
00:00:59,609 --> 00:01:01,170
some really good answers about how to

22
00:01:01,170 --> 00:01:04,170
test our unit tests how to test our

23
00:01:04,170 --> 00:01:05,850
functions our classes and our UI

24
00:01:05,850 --> 00:01:08,100
components and isolation I think it

25
00:01:08,100 --> 00:01:09,540
becomes more difficult when we try to

26
00:01:09,540 --> 00:01:11,880
integrate that all these things and put

27
00:01:11,880 --> 00:01:14,659
it all together a lot can go wrong on

28
00:01:14,659 --> 00:01:19,229
whether it's our UI or our web api's or

29
00:01:19,229 --> 00:01:21,840
our back-end or our database or even our

30
00:01:21,840 --> 00:01:23,520
deployments when we put all those things

31
00:01:23,520 --> 00:01:25,290
together anything could break down and

32
00:01:25,290 --> 00:01:26,939
we could have all the unit tests in the

33
00:01:26,939 --> 00:01:28,560
world and they won't help us in those

34
00:01:28,560 --> 00:01:31,710
cases so the type of tests they try to

35
00:01:31,710 --> 00:01:33,869
exercise this are called end end tests

36
00:01:33,869 --> 00:01:35,729
testing things from one end all the way

37
00:01:35,729 --> 00:01:40,470
to the other and back I had a lot of

38
00:01:40,470 --> 00:01:42,630
really great conversations at the

39
00:01:42,630 --> 00:01:47,850
conference so I move my mouse off I had

40
00:01:47,850 --> 00:01:49,350
a lot of great conversations but once

41
00:01:49,350 --> 00:01:52,079
took out I met this person Nicholas ball

42
00:01:52,079 --> 00:01:56,759
and he talked to me for hours and little

43
00:01:56,759 --> 00:01:58,920
did I know but his wife was also at the

44
00:01:58,920 --> 00:02:01,290
conference Katrina and she was quickly

45
00:02:01,290 --> 00:02:02,820
becoming friends with my wife while we

46
00:02:02,820 --> 00:02:04,740
were hanging out talking about testing

47
00:02:04,740 --> 00:02:08,190
and he talked about all the tests that

48
00:02:08,190 --> 00:02:11,220
his team had written they had thousands

49
00:02:11,220 --> 00:02:13,450
and thousands of unit tests

50
00:02:13,450 --> 00:02:15,640
lots and lots of integration tests and

51
00:02:15,640 --> 00:02:18,100
maybe a thousand or so an N test which

52
00:02:18,100 --> 00:02:19,780
is quite a lot they were testing an

53
00:02:19,780 --> 00:02:21,970
enterprise app which is just an app that

54
00:02:21,970 --> 00:02:25,569
does way too many things and I was so

55
00:02:25,569 --> 00:02:27,310
impressed with all the things he had to

56
00:02:27,310 --> 00:02:28,990
say about their stack and their tools

57
00:02:28,990 --> 00:02:31,090
and all the effort they put in I applied

58
00:02:31,090 --> 00:02:32,500
to work at his company and a few months

59
00:02:32,500 --> 00:02:34,270
later my wife and I moved out to

60
00:02:34,270 --> 00:02:37,000
Colorado joined his team he and his wife

61
00:02:37,000 --> 00:02:39,310
helped us unload our moving truck twice

62
00:02:39,310 --> 00:02:42,819
and helped us settle in invited us over

63
00:02:42,819 --> 00:02:45,340
for the holidays and became close

64
00:02:45,340 --> 00:02:47,470
friends it was really awesome to have

65
00:02:47,470 --> 00:02:49,870
met them at the conference and and and

66
00:02:49,870 --> 00:03:01,890
now we hang out so much together today

67
00:03:01,900 --> 00:03:04,430
so when I joined this team I found there

68
00:03:04,430 --> 00:03:05,690
using a tool I was actually quite

69
00:03:05,690 --> 00:03:08,510
familiar with selenium so selenium is a

70
00:03:08,510 --> 00:03:11,180
tool written in Java that lets us test

71
00:03:11,180 --> 00:03:13,220
our apps from the point of view of the

72
00:03:13,220 --> 00:03:18,080
browser and it's it's a little bit old

73
00:03:18,080 --> 00:03:19,460
and but it's done a lot of wonderful

74
00:03:19,460 --> 00:03:21,020
things and so let's do something we

75
00:03:21,020 --> 00:03:23,360
might not otherwise be able to do the

76
00:03:23,360 --> 00:03:25,820
way it works is it's it's got this Java

77
00:03:25,820 --> 00:03:28,340
service that just listens for commands

78
00:03:28,340 --> 00:03:31,220
and you write test code in any language

79
00:03:31,220 --> 00:03:33,980
actually and more often than not not

80
00:03:33,980 --> 00:03:36,890
JavaScript and that language would

81
00:03:36,890 --> 00:03:39,440
usually use a library to speak the

82
00:03:39,440 --> 00:03:41,420
language of selenium the webdriver API

83
00:03:41,420 --> 00:03:43,160
it would send those commands to the

84
00:03:43,160 --> 00:03:44,450
service and the service would queue all

85
00:03:44,450 --> 00:03:46,010
these commands and would try to send

86
00:03:46,010 --> 00:03:48,760
them to any given browser real browsers

87
00:03:48,760 --> 00:03:52,370
and so there was just a number of

88
00:03:52,370 --> 00:03:54,770
different abstractions and integration

89
00:03:54,770 --> 00:03:57,320
and interfaces where things could go

90
00:03:57,320 --> 00:03:59,810
wrong it could be that your test code

91
00:03:59,810 --> 00:04:02,690
had an issue or using the API different

92
00:04:02,690 --> 00:04:04,700
and all the different API is to work

93
00:04:04,700 --> 00:04:06,350
with selenium in every language and even

94
00:04:06,350 --> 00:04:07,519
within JavaScript there's several

95
00:04:07,519 --> 00:04:08,630
choices they're all a little bit

96
00:04:08,630 --> 00:04:11,450
different those could have issues or you

97
00:04:11,450 --> 00:04:13,220
could be using it incorrectly the

98
00:04:13,220 --> 00:04:14,420
selenium service queuing up those

99
00:04:14,420 --> 00:04:15,739
commands and sending them to the browser

100
00:04:15,739 --> 00:04:18,080
drivers for each browser the browser

101
00:04:18,080 --> 00:04:20,060
drivers could have bugs there are a lot

102
00:04:20,060 --> 00:04:21,320
of ways where this could go off the

103
00:04:21,320 --> 00:04:31,370
rails just with this architecture

104
00:04:31,380 --> 00:04:34,320
so the greatest complexity of all is our

105
00:04:34,320 --> 00:04:37,800
app I find that as we write modern

106
00:04:37,800 --> 00:04:40,200
JavaScript apps we're doing a lot of

107
00:04:40,200 --> 00:04:42,180
things now in the browser we're making

108
00:04:42,180 --> 00:04:44,040
all these different API calls just when

109
00:04:44,040 --> 00:04:47,070
the page loads those come back in

110
00:04:47,070 --> 00:04:49,470
different timings different orders

111
00:04:49,470 --> 00:04:53,130
sometimes that can cause just different

112
00:04:53,130 --> 00:04:55,020
behaviors in our front-end whenever the

113
00:04:55,020 --> 00:04:57,440
user interacts with the API with our UI

114
00:04:57,440 --> 00:05:00,240
that makes more calls more things happen

115
00:05:00,240 --> 00:05:02,760
and all these happen things happen

116
00:05:02,760 --> 00:05:04,770
asynchronously

117
00:05:04,770 --> 00:05:08,190
so we are rendering m''d it could finish

118
00:05:08,190 --> 00:05:09,690
at any time and we don't really

119
00:05:09,690 --> 00:05:11,730
necessarily know when it is at least

120
00:05:11,730 --> 00:05:14,460
from our test codes point of view us as

121
00:05:14,460 --> 00:05:16,200
users as humans it's very intuitive to

122
00:05:16,200 --> 00:05:17,940
us but we run our test code it does

123
00:05:17,940 --> 00:05:20,610
exactly what we tell to do and if it's

124
00:05:20,610 --> 00:05:23,100
trying to if it clicks a button and then

125
00:05:23,100 --> 00:05:25,020
it starts to read render and we try to

126
00:05:25,020 --> 00:05:25,770
do the next thing

127
00:05:25,770 --> 00:05:28,350
we need to be very careful about knowing

128
00:05:28,350 --> 00:05:29,910
that it finished rendering or we might

129
00:05:29,910 --> 00:05:37,530
get something very unexpected so the

130
00:05:37,530 --> 00:05:39,390
greatest problem of all is when we take

131
00:05:39,390 --> 00:05:41,220
this selenium architecture and combine

132
00:05:41,220 --> 00:05:43,710
it with the complexity of our apps it's

133
00:05:43,710 --> 00:05:46,830
really a recipe for just frustration and

134
00:05:46,830 --> 00:05:49,500
what we'd find is we'd write a commit

135
00:05:49,500 --> 00:05:50,970
and we'd run tests locally and

136
00:05:50,970 --> 00:05:52,200
everything will look good we'd push it

137
00:05:52,200 --> 00:05:55,590
to the build and it would fail some

138
00:05:55,590 --> 00:05:57,390
tests would fail and usually in an

139
00:05:57,390 --> 00:06:00,150
end-to-end test and we'd run that build

140
00:06:00,150 --> 00:06:01,710
again because it was a test that we

141
00:06:01,710 --> 00:06:03,510
didn't even like shouldn't have broken

142
00:06:03,510 --> 00:06:06,720
and it would pass and we'd see this over

143
00:06:06,720 --> 00:06:08,790
and over again and we're different

144
00:06:08,790 --> 00:06:10,500
commits we just randomly failed this

145
00:06:10,500 --> 00:06:11,670
different tests and we call this

146
00:06:11,670 --> 00:06:14,840
flakiness and the problem might be

147
00:06:14,840 --> 00:06:16,740
something with a selenium architecture

148
00:06:16,740 --> 00:06:18,540
often it was a combination of that and

149
00:06:18,540 --> 00:06:20,520
just the complexity of our app working

150
00:06:20,520 --> 00:06:22,290
in different before with different

151
00:06:22,290 --> 00:06:24,450
performance characteristics particularly

152
00:06:24,450 --> 00:06:26,880
when we're on build environments they're

153
00:06:26,880 --> 00:06:28,830
virtualized you know they just things

154
00:06:28,830 --> 00:06:30,750
can slow down or the database anything

155
00:06:30,750 --> 00:06:32,130
could make it just work a little bit

156
00:06:32,130 --> 00:06:34,740
slower and one part of the stack at any

157
00:06:34,740 --> 00:06:36,600
given time and something will fail

158
00:06:36,600 --> 00:06:39,479
somewhere we ran into this so much we

159
00:06:39,479 --> 00:06:40,860
had a bill job that would just

160
00:06:40,860 --> 00:06:42,870
continuously run and check the latest

161
00:06:42,870 --> 00:06:44,580
commits on master and just run all the

162
00:06:44,580 --> 00:06:45,060
tests

163
00:06:45,060 --> 00:06:47,400
and it would just flush out dozens and

164
00:06:47,400 --> 00:06:48,980
dozens of tests that just failed a lot

165
00:06:48,980 --> 00:06:51,870
even with that we just kept tripping

166
00:06:51,870 --> 00:06:53,940
over this issue over and over again test

167
00:06:53,940 --> 00:07:00,360
it would just fail once in a while why

168
00:07:00,360 --> 00:07:02,820
do we keep doing this well these tests

169
00:07:02,820 --> 00:07:04,920
we found to be extremely valuable as I

170
00:07:04,920 --> 00:07:05,940
said before you could have all your

171
00:07:05,940 --> 00:07:08,880
tests in the world but if everything

172
00:07:08,880 --> 00:07:10,460
integrates that something breaks down

173
00:07:10,460 --> 00:07:13,260
you're gonna have a really bad time and

174
00:07:13,260 --> 00:07:14,940
and worst of all your users gonna have a

175
00:07:14,940 --> 00:07:15,450
bad time

176
00:07:15,450 --> 00:07:17,000
I mean this at the end of the day

177
00:07:17,000 --> 00:07:19,230
everything we do is about building a

178
00:07:19,230 --> 00:07:20,850
user experience building values so

179
00:07:20,850 --> 00:07:24,030
somebody can do their job or do that

180
00:07:24,030 --> 00:07:25,350
part of their life or make that one

181
00:07:25,350 --> 00:07:27,120
thing easier that gives them joy makes

182
00:07:27,120 --> 00:07:30,300
them happier or productive so we

183
00:07:30,300 --> 00:07:32,610
invested as much as we could into making

184
00:07:32,610 --> 00:07:34,290
this better I mentioned the flaky finer

185
00:07:34,290 --> 00:07:37,260
but we even tried to make our tests

186
00:07:37,260 --> 00:07:40,440
better in a lot of ways one example we

187
00:07:40,440 --> 00:07:43,830
we took we wrote some test helpers that

188
00:07:43,830 --> 00:07:47,460
would try command and if something

189
00:07:47,460 --> 00:07:49,410
didn't work right it would retry it a

190
00:07:49,410 --> 00:07:51,870
number of times or for a certain time

191
00:07:51,870 --> 00:07:54,120
out and this is called an implicit wait

192
00:07:54,120 --> 00:07:56,040
just building it into the API so you

193
00:07:56,040 --> 00:07:57,240
don't have to do that manual in your

194
00:07:57,240 --> 00:08:02,340
code so we also found that it helped to

195
00:08:02,340 --> 00:08:04,380
mock some service once in a while

196
00:08:04,380 --> 00:08:06,479
mock some services to test certain edge

197
00:08:06,479 --> 00:08:08,520
cases or certain scenarios large data

198
00:08:08,520 --> 00:08:13,950
things like that doing that we wrote our

199
00:08:13,950 --> 00:08:15,810
some of our own service mocking

200
00:08:15,810 --> 00:08:18,150
libraries to make that process easier we

201
00:08:18,150 --> 00:08:20,010
invest this as much as we could into

202
00:08:20,010 --> 00:08:21,900
making the developer experience of using

203
00:08:21,900 --> 00:08:23,729
our tests and writing our tests better

204
00:08:23,729 --> 00:08:26,220
so we keep doing it is despite how

205
00:08:26,220 --> 00:08:37,710
painful it was so after a while I joined

206
00:08:37,710 --> 00:08:40,680
a new team and got selenium up and

207
00:08:40,680 --> 00:08:44,190
running there and that went all right

208
00:08:44,190 --> 00:08:46,800
and ran some of the same issues and then

209
00:08:46,800 --> 00:08:50,160
just this past fall in October I was

210
00:08:50,160 --> 00:08:52,890
consulting on a project and we had run

211
00:08:52,890 --> 00:08:55,560
into a serious quality problem we didn't

212
00:08:55,560 --> 00:08:58,050
have a dedicated QA team and as much as

213
00:08:58,050 --> 00:08:58,649
we smoked

214
00:08:58,649 --> 00:09:00,809
appen every single commit there were

215
00:09:00,809 --> 00:09:03,480
always cases we missed and any given

216
00:09:03,480 --> 00:09:04,740
time something would stop working and

217
00:09:04,740 --> 00:09:06,360
you didn't know when it happened so we

218
00:09:06,360 --> 00:09:08,759
decided to write some more tests

219
00:09:08,759 --> 00:09:10,680
I pulled the story to write the N

220
00:09:10,680 --> 00:09:12,959
dentists and I pulled on selenium and

221
00:09:12,959 --> 00:09:15,149
the first thing I had to do on my year

222
00:09:15,149 --> 00:09:17,220
old MacBook was installed Java installed

223
00:09:17,220 --> 00:09:19,230
the JDK aside in have that and you need

224
00:09:19,230 --> 00:09:21,480
that for selenium I thought well I still

225
00:09:21,480 --> 00:09:22,649
I still wish this was written in

226
00:09:22,649 --> 00:09:25,470
JavaScript so the next tool I tried is

227
00:09:25,470 --> 00:09:31,679
Cypress and Cypress Cypress was

228
00:09:31,679 --> 00:09:33,329
something that I had actually held off

229
00:09:33,329 --> 00:09:36,809
on using for a while it been closed

230
00:09:36,809 --> 00:09:38,819
source up until I think May last year

231
00:09:38,819 --> 00:09:40,800
and it had been in a private beta until

232
00:09:40,800 --> 00:09:43,230
October and they had both a company

233
00:09:43,230 --> 00:09:45,269
around some of the premium CI features

234
00:09:45,269 --> 00:09:47,240
but you now that it's open-source

235
00:09:47,240 --> 00:09:49,949
everything that you need is just right

236
00:09:49,949 --> 00:09:52,619
up there on github if the if the team

237
00:09:52,619 --> 00:09:54,389
stopped doing what they're doing the

238
00:09:54,389 --> 00:09:55,559
community could pick it up and run with

239
00:09:55,559 --> 00:09:58,410
it so I'd really waited to use this

240
00:09:58,410 --> 00:10:00,990
until it was open freely available it

241
00:10:00,990 --> 00:10:03,059
was something I've you know wanted to

242
00:10:03,059 --> 00:10:05,279
use it was an MIT licensed and ready to

243
00:10:05,279 --> 00:10:10,589
go so I actually used it for just maybe

244
00:10:10,589 --> 00:10:14,040
two hours and I was honestly I was blown

245
00:10:14,040 --> 00:10:16,740
away I was so shocked by how different

246
00:10:16,740 --> 00:10:21,389
and better my developer experience was

247
00:10:21,389 --> 00:10:25,079
that I wrote a proposal to a conference

248
00:10:25,079 --> 00:10:26,790
after it's working for a couple hours

249
00:10:26,790 --> 00:10:35,129
and Here I am so I have a few demos I'm

250
00:10:35,129 --> 00:10:36,929
just gonna run through to show you how

251
00:10:36,929 --> 00:10:39,059
to install it set it up what some of the

252
00:10:39,059 --> 00:10:41,249
tests look like I don't wanna get too

253
00:10:41,249 --> 00:10:43,110
hung up on any of the syntax or any of

254
00:10:43,110 --> 00:10:45,209
the commands I just want to give you an

255
00:10:45,209 --> 00:10:47,670
idea of what it's like so the first

256
00:10:47,670 --> 00:10:49,799
thing you do is you just npm install it

257
00:10:49,799 --> 00:10:53,730
and this actually will do a download

258
00:10:53,730 --> 00:10:56,579
from one of their from their website and

259
00:10:56,579 --> 00:10:59,309
pull down the right-sized app there's an

260
00:10:59,309 --> 00:11:00,990
electron app involved so it's going to

261
00:11:00,990 --> 00:11:03,420
pull down based on your operating system

262
00:11:03,420 --> 00:11:08,980
and your CPU architecture

263
00:11:08,990 --> 00:11:11,720
next you open it and the first time you

264
00:11:11,720 --> 00:11:13,550
open it it kind of initializes some

265
00:11:13,550 --> 00:11:15,440
things and make sure it's verified and

266
00:11:15,440 --> 00:11:16,820
it's like the right thing and all and

267
00:11:16,820 --> 00:11:18,950
then when it runs there's this little

268
00:11:18,950 --> 00:11:20,210
pop-up saying hey to help get you

269
00:11:20,210 --> 00:11:22,610
started we put some files in the file

270
00:11:22,610 --> 00:11:25,070
system and you might want to take a look

271
00:11:25,070 --> 00:11:29,150
at that the files are basically examples

272
00:11:29,150 --> 00:11:31,610
this is just nice they there's an

273
00:11:31,610 --> 00:11:33,020
example like fixture

274
00:11:33,020 --> 00:11:36,380
there's example plugin custom commands'

275
00:11:36,380 --> 00:11:41,270
and an example spec and the example spec

276
00:11:41,270 --> 00:11:42,770
is just this kitchen sink of all the

277
00:11:42,770 --> 00:11:44,450
different commands you might want and it

278
00:11:44,450 --> 00:11:45,470
just gives you that quick reference

279
00:11:45,470 --> 00:11:46,670
right in the repo I mean you can go to

280
00:11:46,670 --> 00:11:48,350
their Docs but it's just all right there

281
00:11:48,350 --> 00:11:50,420
and it just kind of gets you gives you a

282
00:11:50,420 --> 00:11:51,770
little head start with what you might

283
00:11:51,770 --> 00:11:56,470
want to try to do the nice thing is it's

284
00:11:56,470 --> 00:11:58,310
from there it starts to get very

285
00:11:58,310 --> 00:12:01,160
familiar if you've ever done BDD style

286
00:12:01,160 --> 00:12:03,800
tests whether in jasmine or with mocha

287
00:12:03,800 --> 00:12:05,990
and chai the syntax is going to look

288
00:12:05,990 --> 00:12:11,090
very very familiar let me make this just

289
00:12:11,090 --> 00:12:15,710
a little bit bigger big oh yes I worked

290
00:12:15,710 --> 00:12:19,610
good all right cool all right so this is

291
00:12:19,610 --> 00:12:22,370
just part of a spec file and the first

292
00:12:22,370 --> 00:12:24,020
thing is like there's top-level describe

293
00:12:24,020 --> 00:12:25,820
we're describing our app or some view in

294
00:12:25,820 --> 00:12:28,460
our app and we can have before each's if

295
00:12:28,460 --> 00:12:31,190
we're used to that and do things before

296
00:12:31,190 --> 00:12:32,960
every test and most commonly we'll load

297
00:12:32,960 --> 00:12:35,950
the page load a route on our app and

298
00:12:35,950 --> 00:12:38,180
then from there we can have nested

299
00:12:38,180 --> 00:12:40,400
describes or context in cha and mocha

300
00:12:40,400 --> 00:12:43,850
and we can have our it sheds it should

301
00:12:43,850 --> 00:12:46,520
do a thing it should focus on the to do

302
00:12:46,520 --> 00:12:49,310
input field and then from there we can

303
00:12:49,310 --> 00:12:51,800
start using the Cypress API in this case

304
00:12:51,800 --> 00:12:53,900
we're doing two things we're doing site

305
00:12:53,900 --> 00:12:55,460
up focus which says hey Cypress look up

306
00:12:55,460 --> 00:12:57,970
what's currently focused in the window

307
00:12:57,970 --> 00:13:00,890
but our P and then it tries to do an

308
00:13:00,890 --> 00:13:02,750
insertion it does a and it says it

309
00:13:02,750 --> 00:13:06,020
should have the class new to do there's

310
00:13:06,020 --> 00:13:07,070
something interesting about this should

311
00:13:07,070 --> 00:13:09,170
and this whole you'll see some chaining

312
00:13:09,170 --> 00:13:11,210
here and there's a reason why they use

313
00:13:11,210 --> 00:13:14,000
that style see this has this

314
00:13:14,000 --> 00:13:16,100
context of I'm trying to do a on

315
00:13:16,100 --> 00:13:17,750
something I was focused or something

316
00:13:17,750 --> 00:13:20,360
that I tried to get in the Dom this vid

317
00:13:20,360 --> 00:13:22,579
will keep trying until it's true

318
00:13:22,579 --> 00:13:24,679
till there's a timeout this is really

319
00:13:24,679 --> 00:13:26,119
nice because when we first load our page

320
00:13:26,119 --> 00:13:27,470
like if we talk about asynchronous

321
00:13:27,470 --> 00:13:29,600
rendering the first thing this focus

322
00:13:29,600 --> 00:13:31,220
might just be the window or the document

323
00:13:31,220 --> 00:13:33,559
that thing hasn't rendered that has that

324
00:13:33,559 --> 00:13:35,899
class it's going to keep retrying until

325
00:13:35,899 --> 00:13:37,850
it gets that until it passes and this

326
00:13:37,850 --> 00:13:41,029
this permeates all their api's and

327
00:13:41,029 --> 00:13:42,709
having that context and doing things

328
00:13:42,709 --> 00:13:44,779
just a little bit more intelligently by

329
00:13:44,779 --> 00:13:48,279
Nature I'll show you one other example

330
00:13:48,279 --> 00:13:51,139
this is an example that is quite common

331
00:13:51,139 --> 00:13:52,249
where you try to just get something

332
00:13:52,249 --> 00:13:54,559
based on a selector it's using jQuery

333
00:13:54,559 --> 00:13:57,799
under the hood so anything that anything

334
00:13:57,799 --> 00:13:59,389
that's really valid selector works and

335
00:13:59,389 --> 00:14:01,220
you can even do things similar to in

336
00:14:01,220 --> 00:14:02,989
jQuery with Dom traversals to like get

337
00:14:02,989 --> 00:14:06,679
siblings or next or parent etc and then

338
00:14:06,679 --> 00:14:08,119
we just type in a little thing we want

339
00:14:08,119 --> 00:14:10,429
to do and another thing I'll point out

340
00:14:10,429 --> 00:14:12,379
is there's instead of having to memorize

341
00:14:12,379 --> 00:14:14,689
those key codes like what key code do I

342
00:14:14,689 --> 00:14:17,179
need to put in to automate Enter key or

343
00:14:17,179 --> 00:14:19,519
an escape key they just use like enter

344
00:14:19,519 --> 00:14:21,319
with curly braces just nice and

345
00:14:21,319 --> 00:14:27,559
convenient that way so from here I want

346
00:14:27,559 --> 00:14:29,959
to show you what running the test looks

347
00:14:29,959 --> 00:14:31,459
like and what debugging the test looks

348
00:14:31,459 --> 00:14:32,629
like all that other stuff

349
00:14:32,629 --> 00:14:35,269
it's relatively similar to selenium in

350
00:14:35,269 --> 00:14:36,649
terms of like we're just running tests

351
00:14:36,649 --> 00:14:38,929
and using some API this were I think it

352
00:14:38,929 --> 00:14:41,119
starts to take off so the first thing is

353
00:14:41,119 --> 00:14:43,009
you can run a headless Lee by default it

354
00:14:43,009 --> 00:14:45,769
runs headless Lee like on CI or for just

355
00:14:45,769 --> 00:14:47,059
running tests locally before on a

356
00:14:47,059 --> 00:14:50,059
pre-commit hook there's some nice

357
00:14:50,059 --> 00:14:51,559
results there telling you everything

358
00:14:51,559 --> 00:14:53,600
that passed and there's also recording

359
00:14:53,600 --> 00:14:55,399
by default so you can you could actually

360
00:14:55,399 --> 00:14:57,559
replay the recording of your app in and

361
00:14:57,559 --> 00:15:00,919
all the tests if you want here's where

362
00:15:00,919 --> 00:15:01,970
here's where it start to get a bit

363
00:15:01,970 --> 00:15:04,369
different there's an electron app the

364
00:15:04,369 --> 00:15:05,569
first thing that happens when you load

365
00:15:05,569 --> 00:15:06,919
the electrode app there's this yellow

366
00:15:06,919 --> 00:15:09,709
warning that says hey can you make sure

367
00:15:09,709 --> 00:15:11,779
you're running your webserver there's a

368
00:15:11,779 --> 00:15:13,730
configuration you can set your base your

369
00:15:13,730 --> 00:15:15,019
route if you can figure that it'll

370
00:15:15,019 --> 00:15:16,160
actually check that when this a

371
00:15:16,160 --> 00:15:18,499
collection app runs to make sure that

372
00:15:18,499 --> 00:15:20,389
you're running your webserver I can't

373
00:15:20,389 --> 00:15:21,290
tell you how many times I've forgotten

374
00:15:21,290 --> 00:15:23,329
to run my local dev server when I'm

375
00:15:23,329 --> 00:15:24,889
running my tests and just tells you

376
00:15:24,889 --> 00:15:26,239
right away

377
00:15:26,239 --> 00:15:27,799
and then from there you can also choose

378
00:15:27,799 --> 00:15:30,919
which browser and just whichever version

379
00:15:30,919 --> 00:15:33,289
of chrome you want right now and or

380
00:15:33,289 --> 00:15:36,230
Firefox and edge and all that eventually

381
00:15:36,230 --> 00:15:38,720
I get to that and then you can run your

382
00:15:38,720 --> 00:15:42,020
spec so from here we get into the test

383
00:15:42,020 --> 00:15:44,900
runner the test runner is pretty neat

384
00:15:44,900 --> 00:15:48,380
this is this is a at this part run it

385
00:15:48,380 --> 00:15:50,450
okay good so this pretty neat this is

386
00:15:50,450 --> 00:15:52,370
running in a browser like a sandbox

387
00:15:52,370 --> 00:15:55,190
browser environment and the test runner

388
00:15:55,190 --> 00:15:57,320
is this whole like there's our tests on

389
00:15:57,320 --> 00:15:59,480
the Left there's this header on the top

390
00:15:59,480 --> 00:16:02,000
that has like this this information

391
00:16:02,000 --> 00:16:03,590
about what tests have passed which tests

392
00:16:03,590 --> 00:16:05,360
have failed how long it's been running

393
00:16:05,360 --> 00:16:07,520
we can stop and replay it there's an

394
00:16:07,520 --> 00:16:10,130
there's a URL preview there's a little

395
00:16:10,130 --> 00:16:12,500
target icon that's actually a Dom Dom

396
00:16:12,500 --> 00:16:13,910
selector playground we can click on that

397
00:16:13,910 --> 00:16:15,500
and play around with selectors to find

398
00:16:15,500 --> 00:16:18,830
things in our app and there's also

399
00:16:18,830 --> 00:16:20,990
viewport information at the top and our

400
00:16:20,990 --> 00:16:24,140
on our right is our app so this might

401
00:16:24,140 --> 00:16:26,240
seem like a little thing but this just

402
00:16:26,240 --> 00:16:27,500
having it right in the same window is

403
00:16:27,500 --> 00:16:28,910
very convenient there's there's a very

404
00:16:28,910 --> 00:16:30,590
good reason why they put this all in the

405
00:16:30,590 --> 00:16:37,160
same window so that thing on the left is

406
00:16:37,160 --> 00:16:39,350
where all our commands and all our tests

407
00:16:39,350 --> 00:16:40,700
are kind of logged that's called the

408
00:16:40,700 --> 00:16:45,020
command lock this thing is cool when we

409
00:16:45,020 --> 00:16:47,210
tell when we click on anything in there

410
00:16:47,210 --> 00:16:48,770
expand one of our tests we see all the

411
00:16:48,770 --> 00:16:50,720
commands that are tests tried to execute

412
00:16:50,720 --> 00:16:53,710
if we click on any of those commands

413
00:16:53,710 --> 00:16:57,590
it'll jump to that part of the test

414
00:16:57,590 --> 00:17:00,230
it'll actually go to the da it takes Dom

415
00:17:00,230 --> 00:17:01,760
snapshots throughout the test and it

416
00:17:01,760 --> 00:17:04,160
replays those Dom snapshots so we can

417
00:17:04,160 --> 00:17:05,510
actually jump around our tests

418
00:17:05,510 --> 00:17:08,420
sequentially or out of order and replay

419
00:17:08,420 --> 00:17:10,490
the state of our down and see what's

420
00:17:10,490 --> 00:17:14,050
going on in our app without having to

421
00:17:14,050 --> 00:17:17,960
well without much effort and you'll see

422
00:17:17,960 --> 00:17:19,580
there's this thing at the bottom of our

423
00:17:19,580 --> 00:17:21,920
app this is before and after certain

424
00:17:21,920 --> 00:17:24,680
commands have this context of before and

425
00:17:24,680 --> 00:17:26,870
after I think typing is one of them so

426
00:17:26,870 --> 00:17:28,340
if you go to type in something like a

427
00:17:28,340 --> 00:17:30,440
new to do you hit before you can see the

428
00:17:30,440 --> 00:17:32,270
to do before something got types see

429
00:17:32,270 --> 00:17:35,240
what's going on debug it maybe and you

430
00:17:35,240 --> 00:17:36,860
can click to the after and see after

431
00:17:36,860 --> 00:17:38,960
you've done the type command this

432
00:17:38,960 --> 00:17:41,630
ability to replay the Don snapshots and

433
00:17:41,630 --> 00:17:43,940
walk through our tests just by clicking

434
00:17:43,940 --> 00:17:46,400
on the command log is a night-and-day

435
00:17:46,400 --> 00:17:47,990
difference from anything I ever

436
00:17:47,990 --> 00:17:49,640
experienced with selenium the

437
00:17:49,640 --> 00:17:51,860
workflow is used to was setting up a

438
00:17:51,860 --> 00:17:53,870
debugger and trying to drop a breakpoint

439
00:17:53,870 --> 00:17:56,570
in my test or my app code and trying to

440
00:17:56,570 --> 00:17:57,880
hopefully stop at the right point

441
00:17:57,880 --> 00:17:59,930
running into all kinds of things like

442
00:17:59,930 --> 00:18:02,210
default timeouts and the app reloading

443
00:18:02,210 --> 00:18:03,800
and test reloading and just all kinds of

444
00:18:03,800 --> 00:18:05,000
wackiness that was just always

445
00:18:05,000 --> 00:18:06,680
frustrating and just be able to walk

446
00:18:06,680 --> 00:18:08,180
through my tests I can see exactly

447
00:18:08,180 --> 00:18:10,490
what's happening and just a little side

448
00:18:10,490 --> 00:18:12,230
interesting thing if you write really

449
00:18:12,230 --> 00:18:14,540
good tests about your app like this you

450
00:18:14,540 --> 00:18:16,070
can actually sort of document how your

451
00:18:16,070 --> 00:18:18,650
app works and a new user a new person on

452
00:18:18,650 --> 00:18:20,660
the team could could look at it and get

453
00:18:20,660 --> 00:18:22,070
a pretty good understanding of all the

454
00:18:22,070 --> 00:18:24,140
things it does and how it behaves and

455
00:18:24,140 --> 00:18:29,510
what it looks like all of that so let's

456
00:18:29,510 --> 00:18:31,310
talk about debugging like really

457
00:18:31,310 --> 00:18:33,200
debugging so the first thing is when we

458
00:18:33,200 --> 00:18:35,270
click on those things in the test Runner

459
00:18:35,270 --> 00:18:39,650
we get a we any of those any of the

460
00:18:39,650 --> 00:18:41,930
things we click they have some context

461
00:18:41,930 --> 00:18:43,700
of there's a Dom element involved or

462
00:18:43,700 --> 00:18:45,290
there's a network request if we click on

463
00:18:45,290 --> 00:18:46,670
them they just get log to the console

464
00:18:46,670 --> 00:18:48,440
normally I'd have to set up a breakpoint

465
00:18:48,440 --> 00:18:50,720
and throw my own console logs to get

466
00:18:50,720 --> 00:18:52,520
this information and it's just right

467
00:18:52,520 --> 00:18:53,900
there like just at a click we can get

468
00:18:53,900 --> 00:18:58,550
that and start playing with it Dom's

469
00:18:58,550 --> 00:19:00,530
debugging you can inspect the state of

470
00:19:00,530 --> 00:19:02,060
the Dom in any of these snapshots you

471
00:19:02,060 --> 00:19:03,890
and you have that and you can rely on

472
00:19:03,890 --> 00:19:05,810
that I will say it's not necessarily

473
00:19:05,810 --> 00:19:08,120
replaying all of your different redux

474
00:19:08,120 --> 00:19:10,700
states for example your your true app

475
00:19:10,700 --> 00:19:12,890
state it's just going based on the Dom

476
00:19:12,890 --> 00:19:15,920
though I have found that in reality even

477
00:19:15,920 --> 00:19:17,630
with an app using react and redux I was

478
00:19:17,630 --> 00:19:20,000
able to actually interact with my UI in

479
00:19:20,000 --> 00:19:21,680
some cases and things were just sort of

480
00:19:21,680 --> 00:19:25,100
work and there are hooks to potentially

481
00:19:25,100 --> 00:19:27,800
do things like inject Redux stay and and

482
00:19:27,800 --> 00:19:30,140
snapshot that stuff I haven't gotten to

483
00:19:30,140 --> 00:19:32,240
that yet I'm not sure anybody has but

484
00:19:32,240 --> 00:19:33,680
there there's some crazy things we can

485
00:19:33,680 --> 00:19:37,490
do with this replayability JavaScript

486
00:19:37,490 --> 00:19:40,310
debugging so if that that wasn't enough

487
00:19:40,310 --> 00:19:41,450
for me

488
00:19:41,450 --> 00:19:44,270
I found it really awesome that I only

489
00:19:44,270 --> 00:19:46,100
needed to run this one app this one

490
00:19:46,100 --> 00:19:47,960
browser this one app and this one

491
00:19:47,960 --> 00:19:50,210
debugger to debug both my tests and my

492
00:19:50,210 --> 00:19:52,130
app code this replay is just showing

493
00:19:52,130 --> 00:19:53,630
hitting a breakpoint in my test code

494
00:19:53,630 --> 00:19:56,030
here and there's also hitting a

495
00:19:56,030 --> 00:19:57,980
breakpoint in my app code and being able

496
00:19:57,980 --> 00:19:59,240
to jump between those two contacts

497
00:19:59,240 --> 00:20:00,920
normally I was used to having like a

498
00:20:00,920 --> 00:20:03,410
debugger hopefully anode because my

499
00:20:03,410 --> 00:20:05,240
tests were maybe written in JavaScript

500
00:20:05,240 --> 00:20:07,460
and and then another one in the dev

501
00:20:07,460 --> 00:20:09,740
tools for my app and I'd be bouncing

502
00:20:09,740 --> 00:20:11,360
around between the two and there's just

503
00:20:11,360 --> 00:20:13,130
all this cognitive load that comes with

504
00:20:13,130 --> 00:20:14,900
which one of my end what am i doing

505
00:20:14,900 --> 00:20:17,210
where and bouncing back and forth and

506
00:20:17,210 --> 00:20:19,460
window switching just all that and when

507
00:20:19,460 --> 00:20:21,080
you just start to take this other way

508
00:20:21,080 --> 00:20:23,060
you know this very challenging thing

509
00:20:23,060 --> 00:20:24,920
that we do every day and you put it in a

510
00:20:24,920 --> 00:20:26,540
single place and you just make it that

511
00:20:26,540 --> 00:20:29,600
much easier it it starts to make it fun

512
00:20:29,600 --> 00:20:35,270
again so there are some other nice

513
00:20:35,270 --> 00:20:37,700
things so I mentioned we had to write

514
00:20:37,700 --> 00:20:39,770
our own implicit waits Cyprus does that

515
00:20:39,770 --> 00:20:41,540
out of the box there's a four second

516
00:20:41,540 --> 00:20:44,180
timeout which is plenty you could make

517
00:20:44,180 --> 00:20:46,370
it shorter if you like you can override

518
00:20:46,370 --> 00:20:48,950
that there's direct access to the Dom so

519
00:20:48,950 --> 00:20:50,390
in selenium everything was being

520
00:20:50,390 --> 00:20:52,550
serialized to that service I mentioned

521
00:20:52,550 --> 00:20:54,260
and so you're always just getting a

522
00:20:54,260 --> 00:20:55,820
serialize version of Dom because

523
00:20:55,820 --> 00:20:57,680
everything's running the same JavaScript

524
00:20:57,680 --> 00:20:59,390
runtime you're actually dealing with a

525
00:20:59,390 --> 00:21:01,490
Dom that's in your app from your test

526
00:21:01,490 --> 00:21:04,790
code like you just have it's it's just

527
00:21:04,790 --> 00:21:07,130
nice and there's some service mocking

528
00:21:07,130 --> 00:21:10,670
libraries built in the they they just

529
00:21:10,670 --> 00:21:12,620
made it easy to define a route and

530
00:21:12,620 --> 00:21:14,180
define things you want to match on like

531
00:21:14,180 --> 00:21:17,270
a method or parameter and you can have

532
00:21:17,270 --> 00:21:19,280
it return fixture data

533
00:21:19,280 --> 00:21:21,920
it's just rolled up and that's the thing

534
00:21:21,920 --> 00:21:23,750
overall like it rolls up all this

535
00:21:23,750 --> 00:21:25,430
tooling that we normally be cobbling

536
00:21:25,430 --> 00:21:28,400
together ourselves sign-on for the

537
00:21:28,400 --> 00:21:30,560
request stuff the service mocking and

538
00:21:30,560 --> 00:21:33,410
and jQuery for Dom querying and

539
00:21:33,410 --> 00:21:36,380
traversal mocha and chai for the BDD

540
00:21:36,380 --> 00:21:38,720
syntax and our tests it takes care of

541
00:21:38,720 --> 00:21:40,190
that for us so we don't have to select

542
00:21:40,190 --> 00:21:41,390
them ourselves or maintain those

543
00:21:41,390 --> 00:21:43,880
dependencies and and it just becomes

544
00:21:43,880 --> 00:21:46,280
this one cohesive package that is well

545
00:21:46,280 --> 00:21:50,060
documented on their site the other thing

546
00:21:50,060 --> 00:21:52,460
I noticed about their site both in their

547
00:21:52,460 --> 00:21:56,240
blog and in their in their Docs they

548
00:21:56,240 --> 00:21:58,280
have lots of little tidbits like this so

549
00:21:58,280 --> 00:22:00,080
this is a thing on timeouts and

550
00:22:00,080 --> 00:22:02,360
performance and it talks about this

551
00:22:02,360 --> 00:22:03,740
performance trade-off when you start to

552
00:22:03,740 --> 00:22:05,150
extend the timeout which is like a

553
00:22:05,150 --> 00:22:06,770
common trap when writing these tests

554
00:22:06,770 --> 00:22:08,510
something didn't work it wasn't ready

555
00:22:08,510 --> 00:22:10,790
yet so what's in the timeout well I mean

556
00:22:10,790 --> 00:22:12,020
there's there's a big catch to that

557
00:22:12,020 --> 00:22:13,700
especially if you do it universally and

558
00:22:13,700 --> 00:22:15,110
there's things throughout their Docs

559
00:22:15,110 --> 00:22:17,240
that kind of throw this out at you

560
00:22:17,240 --> 00:22:18,590
like little tidbits that aren't even

561
00:22:18,590 --> 00:22:20,840
specific to Cyprus these are just like

562
00:22:20,840 --> 00:22:22,430
there's a book in here about how to

563
00:22:22,430 --> 00:22:24,410
write good and end tests that could

564
00:22:24,410 --> 00:22:26,150
apply to selenium or whatever else tool

565
00:22:26,150 --> 00:22:28,460
you want to use and I just like that I

566
00:22:28,460 --> 00:22:29,660
like that they're a little bit

567
00:22:29,660 --> 00:22:31,580
opinionated and they just share these

568
00:22:31,580 --> 00:22:34,370
things right in their Docs so we we just

569
00:22:34,370 --> 00:22:39,320
have it it's just nice that they went

570
00:22:39,320 --> 00:22:44,660
that far there are trade offs so I've

571
00:22:44,660 --> 00:22:46,340
been talking about how awesome it is I

572
00:22:46,340 --> 00:22:48,140
do want to say you know some of the

573
00:22:48,140 --> 00:22:49,580
things that it lacks that it that it

574
00:22:49,580 --> 00:22:51,350
can't do yet or things you need to

575
00:22:51,350 --> 00:22:53,930
consider it's a new tool it's a new

576
00:22:53,930 --> 00:22:55,220
technology it's a new thing to bring

577
00:22:55,220 --> 00:22:57,650
into your team there's always a cost for

578
00:22:57,650 --> 00:23:01,310
that I take that very carefully

579
00:23:01,310 --> 00:23:03,770
it has a style that Det Cheney syntax I

580
00:23:03,770 --> 00:23:05,060
actually personally don't like chaining

581
00:23:05,060 --> 00:23:07,250
that much but as I said before there's a

582
00:23:07,250 --> 00:23:08,960
reason for it they like to maintain that

583
00:23:08,960 --> 00:23:10,910
that that context of what you're doing

584
00:23:10,910 --> 00:23:12,980
so that way they can intelligently do

585
00:23:12,980 --> 00:23:14,870
the thing that you're doing next like an

586
00:23:14,870 --> 00:23:18,140
assertion and they're very upfront about

587
00:23:18,140 --> 00:23:19,730
their trade-offs they have a whole dock

588
00:23:19,730 --> 00:23:21,590
page dedicated to this and it mentions

589
00:23:21,590 --> 00:23:24,170
both permanent trade offs and temporary

590
00:23:24,170 --> 00:23:27,020
trade offs a permanent trade-off is it

591
00:23:27,020 --> 00:23:29,930
runs in a single browser tab I have seen

592
00:23:29,930 --> 00:23:32,240
apps that try to open other tabs to do

593
00:23:32,240 --> 00:23:33,890
certain things you're not gonna be able

594
00:23:33,890 --> 00:23:36,890
to test those things in Cypress there's

595
00:23:36,890 --> 00:23:39,230
also a temporary trade-off of browser

596
00:23:39,230 --> 00:23:41,060
support they didn't try to support every

597
00:23:41,060 --> 00:23:42,710
browser right out of the gates they just

598
00:23:42,710 --> 00:23:44,510
chose Chrome based browsers so they got

599
00:23:44,510 --> 00:23:46,580
Chrome chromium Canary and electron

600
00:23:46,580 --> 00:23:48,860
browser they're working on Firefox

601
00:23:48,860 --> 00:23:50,780
they're just fixing issues in that right

602
00:23:50,780 --> 00:23:52,280
now squashing some bugs and they're

603
00:23:52,280 --> 00:23:54,290
gonna have that soon as soon as they can

604
00:23:54,290 --> 00:23:57,050
and I'm sure edge and and and so forth

605
00:23:57,050 --> 00:24:00,230
will be next but that's that's something

606
00:24:00,230 --> 00:24:03,320
that is very very important though

607
00:24:03,320 --> 00:24:05,630
covering having cross browser support is

608
00:24:05,630 --> 00:24:08,300
is key in a lot of cases and I would

609
00:24:08,300 --> 00:24:11,090
suggest still having some selenium tests

610
00:24:11,090 --> 00:24:13,160
just for those situations that Cypress

611
00:24:13,160 --> 00:24:15,350
cannot do them I find that 99% of the

612
00:24:15,350 --> 00:24:17,330
value of these tests is easily covered

613
00:24:17,330 --> 00:24:18,920
by Cypress making sure that we exercise

614
00:24:18,920 --> 00:24:20,660
our user experience all the different

615
00:24:20,660 --> 00:24:22,070
views all the different interactions

616
00:24:22,070 --> 00:24:25,430
that we care about testing each workflow

617
00:24:25,430 --> 00:24:28,460
once that the user wants to do ABC tests

618
00:24:28,460 --> 00:24:29,500
those things

619
00:24:29,500 --> 00:24:31,780
testing any given all the different UI

620
00:24:31,780 --> 00:24:34,059
components at least once that's also

621
00:24:34,059 --> 00:24:39,340
really important more than anything I

622
00:24:39,340 --> 00:24:41,890
would say it's ambitious they basically

623
00:24:41,890 --> 00:24:44,890
reinvented the wheel and anytime you do

624
00:24:44,890 --> 00:24:47,320
that you're gonna introduce at a bug

625
00:24:47,320 --> 00:24:50,470
your own set of challenges and I think

626
00:24:50,470 --> 00:24:52,510
they not only tried to like reinvent

627
00:24:52,510 --> 00:24:55,690
selenium but to add this very

628
00:24:55,690 --> 00:24:57,580
comprehensive developer experience on

629
00:24:57,580 --> 00:24:58,679
top of it

630
00:24:58,679 --> 00:25:02,620
that is crazy I'm like if I if I'm ever

631
00:25:02,620 --> 00:25:04,720
met Brian man the original author of

632
00:25:04,720 --> 00:25:06,220
this years ago I would have like told

633
00:25:06,220 --> 00:25:07,990
him he was crazy and said good luck

634
00:25:07,990 --> 00:25:10,210
please try and please succeed but I

635
00:25:10,210 --> 00:25:11,650
don't think it's possible

636
00:25:11,650 --> 00:25:13,929
don't feel bad if you fail but here here

637
00:25:13,929 --> 00:25:16,900
is he's what started as an experiment he

638
00:25:16,900 --> 00:25:19,270
got it working and he's built a team

639
00:25:19,270 --> 00:25:20,890
around it there's I think six full-time

640
00:25:20,890 --> 00:25:25,330
devs on it now and and the open source

641
00:25:25,330 --> 00:25:26,919
community is growing there's thirty more

642
00:25:26,919 --> 00:25:28,480
contributors on top of that that have

643
00:25:28,480 --> 00:25:31,480
made contributions but there's there's

644
00:25:31,480 --> 00:25:32,440
going to be bugs there's going to be

645
00:25:32,440 --> 00:25:34,210
issues there's gonna be there's gonna be

646
00:25:34,210 --> 00:25:37,539
the trade offs I mentioned but I'm

647
00:25:37,539 --> 00:25:41,250
really glad that they made it anyway so

648
00:25:41,250 --> 00:25:45,789
I would definitely say that when it

649
00:25:45,789 --> 00:25:47,500
comes to end and testing and our ability

650
00:25:47,500 --> 00:25:49,690
to test our user experiences the game

651
00:25:49,690 --> 00:25:52,929
has changed and I would encourage I

652
00:25:52,929 --> 00:25:54,580
would encourage everyone to not just

653
00:25:54,580 --> 00:25:56,500
think about unit test coverage but user

654
00:25:56,500 --> 00:25:58,750
experience coverage and then test is

655
00:25:58,750 --> 00:26:02,080
where we solve that problem and if

656
00:26:02,080 --> 00:26:03,730
you're new to this or trying to get

657
00:26:03,730 --> 00:26:04,240
started

658
00:26:04,240 --> 00:26:08,169
do one thing write a smoke test test

659
00:26:08,169 --> 00:26:10,960
that one thing your app says it does

660
00:26:10,960 --> 00:26:13,690
test that main workflow do the happy

661
00:26:13,690 --> 00:26:15,309
path make sure that's good

662
00:26:15,309 --> 00:26:17,799
that is going to give you 90% of the

663
00:26:17,799 --> 00:26:19,510
value you're going to cover your build

664
00:26:19,510 --> 00:26:21,490
and your deployments and of course that

665
00:26:21,490 --> 00:26:23,110
one thing that your app is supposed to

666
00:26:23,110 --> 00:26:25,210
do and from there you can start to cover

667
00:26:25,210 --> 00:26:27,850
more things but that is the one thing

668
00:26:27,850 --> 00:26:31,320
that you could do and it may be a day I

669
00:26:31,320 --> 00:26:35,169
think I had I think I had the first few

670
00:26:35,169 --> 00:26:37,120
views our app tested in like an hour or

671
00:26:37,120 --> 00:26:38,919
two and then ice went from there there

672
00:26:38,919 --> 00:26:40,570
was there were dozens of uses a very

673
00:26:40,570 --> 00:26:42,169
heavy a lot of another enterprise

674
00:26:42,169 --> 00:26:46,129
but but it didn't take long to get that

675
00:26:46,129 --> 00:26:47,320
going

676
00:26:47,320 --> 00:26:49,519
and I like to say this

677
00:26:49,519 --> 00:26:50,809
don't let your users test your app

678
00:26:50,809 --> 00:26:52,700
because if you're not automating these

679
00:26:52,700 --> 00:26:54,799
things that's what you're doing you can

680
00:26:54,799 --> 00:26:57,200
have a QA team you could be smoke

681
00:26:57,200 --> 00:26:58,429
testing this yourself in your own

682
00:26:58,429 --> 00:27:00,529
browser there's no way you're gonna

683
00:27:00,529 --> 00:27:01,879
catch all the things that these

684
00:27:01,879 --> 00:27:04,489
automated tests can catch as quickly as

685
00:27:04,489 --> 00:27:06,409
they can catch I mean to test those

686
00:27:06,409 --> 00:27:08,179
things manually what's your dev cycle

687
00:27:08,179 --> 00:27:09,440
you're just creating a feedback loop

688
00:27:09,440 --> 00:27:11,809
that could be so much shorter and these

689
00:27:11,809 --> 00:27:13,909
things can run very quickly and catch so

690
00:27:13,909 --> 00:27:19,220
much more so at was law any application

691
00:27:19,220 --> 00:27:20,359
that can be written in JavaScript

692
00:27:20,359 --> 00:27:22,909
eventually will right I think this is a

693
00:27:22,909 --> 00:27:23,299
good thing

694
00:27:23,299 --> 00:27:26,779
I just a couple weeks ago I was I was

695
00:27:26,779 --> 00:27:27,980
working a visual studio and I thought

696
00:27:27,980 --> 00:27:31,399
wow I remember when Adam came out and I

697
00:27:31,399 --> 00:27:33,320
before that I was using sublime sublime

698
00:27:33,320 --> 00:27:35,029
was great like everybody loves sublime

699
00:27:35,029 --> 00:27:36,889
everyone at least used to love sublime

700
00:27:36,889 --> 00:27:39,019
and maybe we've forgotten about a little

701
00:27:39,019 --> 00:27:41,179
bit because we've had Adam come out and

702
00:27:41,179 --> 00:27:43,369
at the time it was like oh this is

703
00:27:43,369 --> 00:27:45,379
written in JavaScript an editor this

704
00:27:45,379 --> 00:27:47,149
this is fast this works this is crazy

705
00:27:47,149 --> 00:27:49,100
and the visual studio code and I'm

706
00:27:49,100 --> 00:27:52,279
thinking now I when I use Visual Studio

707
00:27:52,279 --> 00:27:54,259
code or Adam I'm not just using those

708
00:27:54,259 --> 00:27:55,700
editors I'm using all these extensions

709
00:27:55,700 --> 00:27:58,009
and plugins there's these ecosystems of

710
00:27:58,009 --> 00:27:59,989
tools that have built up around these

711
00:27:59,989 --> 00:28:01,999
tools because they were in a JavaScript

712
00:28:01,999 --> 00:28:03,320
because they're written in the things

713
00:28:03,320 --> 00:28:05,539
that were familiar with and I look at

714
00:28:05,539 --> 00:28:07,429
Cypress I still think we're very much in

715
00:28:07,429 --> 00:28:08,690
the early days it's still gaining

716
00:28:08,690 --> 00:28:10,190
adoption people are still catching on

717
00:28:10,190 --> 00:28:11,720
people starting to write custom commands

718
00:28:11,720 --> 00:28:13,519
this people are starting to write

719
00:28:13,519 --> 00:28:15,409
plug-ins like we're in the early stages

720
00:28:15,409 --> 00:28:18,529
of seeing that ecosystem expand and grow

721
00:28:18,529 --> 00:28:20,359
and become something beyond what the

722
00:28:20,359 --> 00:28:24,289
original authors intended I really want

723
00:28:24,289 --> 00:28:26,840
to thank the Cypress team they did an

724
00:28:26,840 --> 00:28:30,109
amazing job there they they they

725
00:28:30,109 --> 00:28:31,940
definitely ran into all these problems I

726
00:28:31,940 --> 00:28:33,379
described that I experienced with

727
00:28:33,379 --> 00:28:36,409
selenium and said they they wanted to do

728
00:28:36,409 --> 00:28:38,749
better and they have they've built

729
00:28:38,749 --> 00:28:41,059
something that not only was written in

730
00:28:41,059 --> 00:28:42,799
JavaScript but tried to solve the

731
00:28:42,799 --> 00:28:44,149
developer experience and tried to make

732
00:28:44,149 --> 00:28:45,559
that smoother and tried to make it

733
00:28:45,559 --> 00:28:47,629
encouraging for us to write these tests

734
00:28:47,629 --> 00:28:50,809
that aren't always easy and I think

735
00:28:50,809 --> 00:28:52,900
they've done a terrific job if

736
00:28:52,900 --> 00:28:55,210
you I think the docs are great but if

737
00:28:55,210 --> 00:28:56,590
you need more help than what's in their

738
00:28:56,590 --> 00:28:58,210
Doc's check out their get er chat I

739
00:28:58,210 --> 00:29:01,210
promise you they're really nice and and

740
00:29:01,210 --> 00:29:05,470
friendly I want to finish my story my

741
00:29:05,470 --> 00:29:08,710
personal story this is my family and

742
00:29:08,710 --> 00:29:11,260
Nicholas's family we each had a daughter

743
00:29:11,260 --> 00:29:14,700
two years ago they're born a month apart

744
00:29:14,700 --> 00:29:17,350
our wives are both expecting our second

745
00:29:17,350 --> 00:29:20,350
this summer I really really wanted to

746
00:29:20,350 --> 00:29:23,560
bring my family here but my wife is five

747
00:29:23,560 --> 00:29:25,150
points pregnant and my daughter is two

748
00:29:25,150 --> 00:29:26,170
years old and wants to climb over

749
00:29:26,170 --> 00:29:29,230
everything I actually asked her my

750
00:29:29,230 --> 00:29:31,780
wife's doctor if I should and she yelled

751
00:29:31,780 --> 00:29:35,770
at me that view very bad idea I miss

752
00:29:35,770 --> 00:29:39,370
them very much but I I will also say

753
00:29:39,370 --> 00:29:42,880
that Nicholas and I you know still talk

754
00:29:42,880 --> 00:29:44,530
for hours and he's still teaching me

755
00:29:44,530 --> 00:29:47,650
things and I'm so grateful for having

756
00:29:47,650 --> 00:29:51,590
met them at Jay s comma five years ago

757
00:29:51,600 --> 00:29:54,370
thank you for joining me today for

758
00:29:54,370 --> 00:29:56,530
wanting to hear about how to write tests

759
00:29:56,530 --> 00:29:58,390
about how to do this better about what's

760
00:29:58,390 --> 00:29:59,110
changed

761
00:29:59,110 --> 00:30:01,360
I hope I hope I've given you some ideas

762
00:30:01,360 --> 00:30:03,190
about that I hope I've given you some

763
00:30:03,190 --> 00:30:05,110
ideas about what's happened in our

764
00:30:05,110 --> 00:30:06,700
ecosystem and what continues to happen

765
00:30:06,700 --> 00:30:08,290
with our tooling and how that continues

766
00:30:08,290 --> 00:30:10,450
to advance if you want to talk to me

767
00:30:10,450 --> 00:30:11,890
after this I love talking about this

768
00:30:11,890 --> 00:30:13,270
stuff please come find me

769
00:30:13,270 --> 00:30:16,300
or find me on Twitter at Will's lab I

770
00:30:16,300 --> 00:30:18,940
really appreciate being here thank you

