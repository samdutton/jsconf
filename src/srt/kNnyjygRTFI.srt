1
00:00:08,400 --> 00:00:15,219

thank you all right so um yeah I'm

2
00:00:15,219 --> 00:00:20,860
Martin welcome to 3d um yeah the reason

3
00:00:20,860 --> 00:00:24,130
I I decided to do those talk as just

4
00:00:24,130 --> 00:00:28,420
that every 3d introduction that you read

5
00:00:28,420 --> 00:00:30,550
somehow assumes that you already know

6
00:00:30,550 --> 00:00:33,790
quite a lot about 3d so I'm here to

7
00:00:33,790 --> 00:00:37,390
clear a bit obvious things up in the

8
00:00:37,390 --> 00:00:40,930
last half year something I've been doing

9
00:00:40,930 --> 00:00:44,620
quite a lot of work but has had to do

10
00:00:44,620 --> 00:00:47,350
with three jrs had to do with WebGL and

11
00:00:47,350 --> 00:00:53,890
so I came to learn the hard way and so

12
00:00:53,890 --> 00:00:55,869
this is one of the project i'm currently

13
00:00:55,869 --> 00:00:57,670
working on which is basically just

14
00:00:57,670 --> 00:01:02,350
rendering study to see how we can

15
00:01:02,350 --> 00:01:05,470
achieve real nice looking effects with

16
00:01:05,470 --> 00:01:09,189
very simple polygons and all those

17
00:01:09,189 --> 00:01:11,260
post-processing that is required to do

18
00:01:11,260 --> 00:01:17,890
that and yeah this is one of the studies

19
00:01:17,890 --> 00:01:20,710
for the intro for Jays convoy Lopez the

20
00:01:20,710 --> 00:01:24,359
first time I'm showing this publicly so

21
00:01:24,359 --> 00:01:27,310
the problem with WebGL is basically it's

22
00:01:27,310 --> 00:01:32,020
learning curve so maybe if you read a

23
00:01:32,020 --> 00:01:34,270
little bit about what 3d in the web can

24
00:01:34,270 --> 00:01:36,850
do and you're like hey we can do this

25
00:01:36,850 --> 00:01:39,810
thing in 3d only to discover that

26
00:01:39,810 --> 00:01:42,880
somehow along this straight wall of

27
00:01:42,880 --> 00:01:45,850
learning curve you just say no maybe we

28
00:01:45,850 --> 00:01:49,450
find a simpler solution another problem

29
00:01:49,450 --> 00:01:54,249
here is every WebGL tutorial ever starts

30
00:01:54,249 --> 00:01:56,229
with hey let's just draw a triangle

31
00:01:56,229 --> 00:01:59,139
which is very okay so you create camera

32
00:01:59,139 --> 00:02:01,630
then you have to set some parameters you

33
00:02:01,630 --> 00:02:03,719
don't know about and we need to create

34
00:02:03,719 --> 00:02:06,219
two shaders the fragment and vertex

35
00:02:06,219 --> 00:02:08,140
shader come to that later and those

36
00:02:08,140 --> 00:02:10,209
traders yeah well they have written in a

37
00:02:10,209 --> 00:02:12,670
different language but don't worry too

38
00:02:12,670 --> 00:02:14,590
much because we're still not done

39
00:02:14,590 --> 00:02:19,360
drawing a triangle finally right there

40
00:02:19,360 --> 00:02:21,740
was a vertices array that

41
00:02:21,740 --> 00:02:23,540
and those are the points of the triangle

42
00:02:23,540 --> 00:02:25,850
and it's really those code really just

43
00:02:25,850 --> 00:02:28,760
ran as a black or white triangle on the

44
00:02:28,760 --> 00:02:33,680
black background so yeah it's so III

45
00:02:33,680 --> 00:02:36,740
think that there is a better way to

46
00:02:36,740 --> 00:02:39,170
explain this and I will do this without

47
00:02:39,170 --> 00:02:41,090
showing you any color so the way that

48
00:02:41,090 --> 00:02:43,760
will work is basically i'm following

49
00:02:43,760 --> 00:02:46,550
buzzword after buzzword at you and try

50
00:02:46,550 --> 00:02:48,650
to explain what all these words mean in

51
00:02:48,650 --> 00:02:53,120
the 3d world so I did this the hard way

52
00:02:53,120 --> 00:02:55,490
because this is a one really really

53
00:02:55,490 --> 00:02:58,070
awesome book but really really have your

54
00:02:58,070 --> 00:03:01,850
math but yeah it's quite worth reading

55
00:03:01,850 --> 00:03:04,880
because it explores all those fully

56
00:03:04,880 --> 00:03:07,850
rendering up to how current generation

57
00:03:07,850 --> 00:03:10,520
games do they are rendering in greatest

58
00:03:10,520 --> 00:03:14,080
detail so if you really want a deep dive

59
00:03:14,080 --> 00:03:19,550
all of this book so I'm contributor

60
00:03:19,550 --> 00:03:23,660
graphics and 3d rendering is a really

61
00:03:23,660 --> 00:03:27,560
vast field so we have around around 50

62
00:03:27,560 --> 00:03:29,660
years of research having gone on in to

63
00:03:29,660 --> 00:03:33,620
this this yeah probably one of the best

64
00:03:33,620 --> 00:03:36,380
funded areas of research just games

65
00:03:36,380 --> 00:03:38,090
industry the visual effects for

66
00:03:38,090 --> 00:03:41,750
Hollywood all those that rely on 3d

67
00:03:41,750 --> 00:03:44,600
graphics poor vast amounts of money into

68
00:03:44,600 --> 00:03:47,390
it so there's no shortage and research

69
00:03:47,390 --> 00:03:52,040
and yeah finally it's also a really huge

70
00:03:52,040 --> 00:03:54,860
scientific field it involves physics and

71
00:03:54,860 --> 00:03:58,580
involves math so it involves lots of

72
00:03:58,580 --> 00:04:01,460
numerics and information technology

73
00:04:01,460 --> 00:04:04,190
things there are feels like radiometry

74
00:04:04,190 --> 00:04:14,990
and all the likes involved so what is 3d

75
00:04:14,990 --> 00:04:18,140
rendering the basic idea and 3d

76
00:04:18,140 --> 00:04:21,440
rendering is let me use a virtual camera

77
00:04:21,440 --> 00:04:24,830
to take pictures of virtual scene so

78
00:04:24,830 --> 00:04:28,520
it's a pretty easy like that to it but

79
00:04:28,520 --> 00:04:31,340
yeah how do we do this

80
00:04:31,340 --> 00:04:33,320
we need to figure out how how light

81
00:04:33,320 --> 00:04:35,419
would behave in over to virtual the

82
00:04:35,419 --> 00:04:39,919
world and finally find out which parts

83
00:04:39,919 --> 00:04:41,660
of the light will end up in our camera

84
00:04:41,660 --> 00:04:46,479
sensor and form the pixels on screen so

85
00:04:46,479 --> 00:04:49,100
naive solution to those what the year we

86
00:04:49,100 --> 00:04:51,169
make a simulation of how the photons

87
00:04:51,169 --> 00:04:53,840
behave and how they bounce around on a

88
00:04:53,840 --> 00:04:56,389
scene and finally figure out which of

89
00:04:56,389 --> 00:04:58,820
these photons hit the camera sensor and

90
00:04:58,820 --> 00:05:01,310
get this play but yeah as you may know a

91
00:05:01,310 --> 00:05:04,580
quite many photons to simulate there so

92
00:05:04,580 --> 00:05:08,960
there's not an option um so this leads

93
00:05:08,960 --> 00:05:12,650
to some rendering techniques being

94
00:05:12,650 --> 00:05:16,010
developed that and I will show you the

95
00:05:16,010 --> 00:05:20,389
most prominent ones just right now so

96
00:05:20,389 --> 00:05:23,030
the first thing is the ray tracing and

97
00:05:23,030 --> 00:05:27,229
path tracing the idea behind this is but

98
00:05:27,229 --> 00:05:31,010
you that you just trace how how race

99
00:05:31,010 --> 00:05:36,200
behave in your light seen you can see

100
00:05:36,200 --> 00:05:38,870
there are left pictures basically how

101
00:05:38,870 --> 00:05:41,270
how light normally behave so you have a

102
00:05:41,270 --> 00:05:44,090
yellow ray it hits an object and gets

103
00:05:44,090 --> 00:05:47,360
gets reflected of that object so the

104
00:05:47,360 --> 00:05:50,330
orange race and then all these refer the

105
00:05:50,330 --> 00:05:52,700
reflected rays are reflected themselves

106
00:05:52,700 --> 00:05:55,520
so those are the rep raised and then you

107
00:05:55,520 --> 00:05:58,280
can see what's happening and we can we

108
00:05:58,280 --> 00:06:01,099
can describe each of these paths of

109
00:06:01,099 --> 00:06:04,220
light which you can see in our right

110
00:06:04,220 --> 00:06:11,030
hand picture so what path tracing now

111
00:06:11,030 --> 00:06:14,510
does that is it starts backwards so you

112
00:06:14,510 --> 00:06:15,770
have a camera or somewhere in the scene

113
00:06:15,770 --> 00:06:18,200
and you cast a riot ray out of the

114
00:06:18,200 --> 00:06:22,419
camera so this looks a bit like those

115
00:06:22,419 --> 00:06:26,210
apologize for the for the contrast not

116
00:06:26,210 --> 00:06:29,180
that awesome beemo so we help a camera

117
00:06:29,180 --> 00:06:31,220
and we start with a red rays and we

118
00:06:31,220 --> 00:06:33,950
recast those of you raised into the

119
00:06:33,950 --> 00:06:36,650
scene and see where it hits an object so

120
00:06:36,650 --> 00:06:39,070
at that point where it's an object

121
00:06:39,070 --> 00:06:41,599
several of things might happen so the

122
00:06:41,599 --> 00:06:44,599
first we'll draw these lines towards

123
00:06:44,599 --> 00:06:45,000
ever

124
00:06:45,000 --> 00:06:47,610
every light source and a scene to see it

125
00:06:47,610 --> 00:06:52,130
is in shadow or isn't it and otherwise

126
00:06:52,130 --> 00:06:54,540
which is the case for the for the right

127
00:06:54,540 --> 00:06:57,840
hand point of intersection there could

128
00:06:57,840 --> 00:07:00,270
be a reflection which is the green ray

129
00:07:00,270 --> 00:07:02,820
or it could be refracted through the

130
00:07:02,820 --> 00:07:06,000
material if it's made of glass of water

131
00:07:06,000 --> 00:07:09,240
or something so this will be the blu-ray

132
00:07:09,240 --> 00:07:13,490
and finally things can happen like

133
00:07:13,490 --> 00:07:16,770
subsurface scattering which is shown on

134
00:07:16,770 --> 00:07:18,600
the left hand side where rather light

135
00:07:18,600 --> 00:07:21,960
slightly emphasis circles gets bounced

136
00:07:21,960 --> 00:07:24,030
around and exits the surface at another

137
00:07:24,030 --> 00:07:27,660
point so um what ray tracing and pulse

138
00:07:27,660 --> 00:07:29,730
racing now try to do is calculate

139
00:07:29,730 --> 00:07:33,030
backwards towards the light source where

140
00:07:33,030 --> 00:07:35,040
the light shines on that object is

141
00:07:35,040 --> 00:07:39,150
coming from the point the point of use

142
00:07:39,150 --> 00:07:41,250
algorithms that they are really very

143
00:07:41,250 --> 00:07:45,410
accurate they can they can have a really

144
00:07:45,410 --> 00:07:49,919
amazing quality especially in rendering

145
00:07:49,919 --> 00:07:54,660
how whole shadows and lights behave they

146
00:07:54,660 --> 00:07:58,020
support several special behaviors the

147
00:07:58,020 --> 00:08:00,060
commonly called global illumination

148
00:08:00,060 --> 00:08:02,580
which is refers to or everything that is

149
00:08:02,580 --> 00:08:05,190
illumination that isn't directly from a

150
00:08:05,190 --> 00:08:07,229
light source so in this room for

151
00:08:07,229 --> 00:08:08,729
instance we only have global

152
00:08:08,729 --> 00:08:10,890
illumination because the light sources

153
00:08:10,890 --> 00:08:15,270
are basically hidden from us okay and

154
00:08:15,270 --> 00:08:18,810
yeah ray tracing or more path tracing

155
00:08:18,810 --> 00:08:22,440
are used for everything that doesn't

156
00:08:22,440 --> 00:08:23,970
need to be in real time well

157
00:08:23,970 --> 00:08:26,130
unfortunately it's we are still not

158
00:08:26,130 --> 00:08:27,630
there that we can do those in real time

159
00:08:27,630 --> 00:08:30,870
just because the amount of computation

160
00:08:30,870 --> 00:08:34,589
required us way too big Princeton's

161
00:08:34,589 --> 00:08:38,159
twice Daria they took for rendering the

162
00:08:38,159 --> 00:08:43,650
movie around 2 to 15 hours for every

163
00:08:43,650 --> 00:08:45,330
single image in the film and they were

164
00:08:45,330 --> 00:08:49,830
like 140,000 images so it took some time

165
00:08:49,830 --> 00:08:53,339
to render that new movie okay so here's

166
00:08:53,339 --> 00:09:00,770
an example of someone actually built a

167
00:09:00,770 --> 00:09:06,680
real path tracing renderer in WebGL and

168
00:09:06,680 --> 00:09:11,040
like can change the scene here and we

169
00:09:11,040 --> 00:09:12,959
can move move move around to other

170
00:09:12,959 --> 00:09:15,209
camera and you can see some some of the

171
00:09:15,209 --> 00:09:19,110
effects that only path tracing can do

172
00:09:19,110 --> 00:09:21,320
like these shadows here in between or

173
00:09:21,320 --> 00:09:25,130
these refractions within that glass ball

174
00:09:25,130 --> 00:09:27,990
we can even just camera Pam our

175
00:09:27,990 --> 00:09:31,520
parameters like the focal length or the

176
00:09:31,520 --> 00:09:34,500
aperture size of the camera so it's it's

177
00:09:34,500 --> 00:09:37,440
a really good simulation of how how

178
00:09:37,440 --> 00:09:43,770
light really behaves anyway um the main

179
00:09:43,770 --> 00:09:45,780
techniques exist that is useful for a

180
00:09:45,780 --> 00:09:48,839
real-time rendering though is called

181
00:09:48,839 --> 00:09:51,720
rasterization and together with scanline

182
00:09:51,720 --> 00:09:54,150
rendering which is accompanying

183
00:09:54,150 --> 00:09:59,480
technique so basically all applications

184
00:09:59,480 --> 00:10:02,760
like games or everything that does 3d

185
00:10:02,760 --> 00:10:06,450
graphics in real time uses this

186
00:10:06,450 --> 00:10:10,020
technique to renderer so this is

187
00:10:10,020 --> 00:10:13,160
basically also GPUs are designed for

188
00:10:13,160 --> 00:10:19,500
this restoration technique so what

189
00:10:19,500 --> 00:10:23,130
rasterization basically does is we have

190
00:10:23,130 --> 00:10:25,560
objects that are described as a huge

191
00:10:25,560 --> 00:10:28,740
amount of triangles and each of these

192
00:10:28,740 --> 00:10:32,820
triangles is then split up according to

193
00:10:32,820 --> 00:10:35,070
which screen pixels are covered by it

194
00:10:35,070 --> 00:10:39,660
and then finally for every pixel of the

195
00:10:39,660 --> 00:10:43,350
color is provided it's calculated from

196
00:10:43,350 --> 00:10:45,690
the data that is available for that

197
00:10:45,690 --> 00:10:54,600
triangle so um in order to explain more

198
00:10:54,600 --> 00:10:57,660
deeply what this rasterization does is

199
00:10:57,660 --> 00:11:02,100
we need to take a look at some math so

200
00:11:02,100 --> 00:11:04,579
let's begin with the rendering equation

201
00:11:04,579 --> 00:11:08,070
this is a funny mix of calculus and

202
00:11:08,070 --> 00:11:09,510
linear algebra

203
00:11:09,510 --> 00:11:14,670
and trigonometry yeah but nope you

204
00:11:14,670 --> 00:11:16,410
really didn't don't need to know too

205
00:11:16,410 --> 00:11:20,490
much math in order to work with 3d there

206
00:11:20,490 --> 00:11:22,680
are just three four things that i'm

207
00:11:22,680 --> 00:11:24,810
going to show you that that you need to

208
00:11:24,810 --> 00:11:28,320
be aware of so first is we have

209
00:11:28,320 --> 00:11:32,250
coordinates bases a coordinate space is

210
00:11:32,250 --> 00:11:34,170
basically just the frame of reference so

211
00:11:34,170 --> 00:11:37,770
it shows for any given back to where we

212
00:11:37,770 --> 00:11:39,540
are the origin point is the vector

213
00:11:39,540 --> 00:11:43,770
refers to and it has three axis XY and Z

214
00:11:43,770 --> 00:11:47,640
and yeah these three axes are organized

215
00:11:47,640 --> 00:11:49,440
another right-handed system so if you

216
00:11:49,440 --> 00:11:51,720
take your right hand hold up like this

217
00:11:51,720 --> 00:11:55,740
thumb is the x-axis or y-axis and the z

218
00:11:55,740 --> 00:11:58,410
axis so this is how you have always find

219
00:11:58,410 --> 00:12:01,200
out which direction which axis is

220
00:12:01,200 --> 00:12:04,440
pointing to so in this case we have x

221
00:12:04,440 --> 00:12:07,320
axis pointing pointing from left to

222
00:12:07,320 --> 00:12:09,870
right y axis up like a node and the z

223
00:12:09,870 --> 00:12:14,240
axis is coming towards you so um

224
00:12:14,240 --> 00:12:18,810
vertices this is a here you probably all

225
00:12:18,810 --> 00:12:24,660
know vectors do you mass at school all

226
00:12:24,660 --> 00:12:29,310
right so vertices is just a vertex just

227
00:12:29,310 --> 00:12:31,800
the term used in 3d graphics for vectors

228
00:12:31,800 --> 00:12:36,030
and enough so it's basically just a

229
00:12:36,030 --> 00:12:38,820
single point somewhere in a cabinet

230
00:12:38,820 --> 00:12:41,640
space so in this this example was a

231
00:12:41,640 --> 00:12:44,870
teapot you can see the thin black line

232
00:12:44,870 --> 00:12:47,610
which points to the director to the

233
00:12:47,610 --> 00:12:51,110
point where we had 111 coordinate is and

234
00:12:51,110 --> 00:12:55,530
yeah so every vertex have the three

235
00:12:55,530 --> 00:12:58,530
components of the dial in direction of x

236
00:12:58,530 --> 00:13:02,970
y&z axis so what we can do with vertices

237
00:13:02,970 --> 00:13:06,540
is now we can transform them you will

238
00:13:06,540 --> 00:13:10,140
probably know from CSS these CSS

239
00:13:10,140 --> 00:13:14,850
transform this is the same thing so um

240
00:13:14,850 --> 00:13:17,670
we can rotate them we can translate them

241
00:13:17,670 --> 00:13:19,800
so move them around we can scale them

242
00:13:19,800 --> 00:13:22,470
and all of this is done with something

243
00:13:22,470 --> 00:13:23,070
called

244
00:13:23,070 --> 00:13:24,960
matrix multiplication don't worry too

245
00:13:24,960 --> 00:13:27,090
much because you have a math library

246
00:13:27,090 --> 00:13:29,670
that takes care of those so it's just

247
00:13:29,670 --> 00:13:31,560
you have a matrix and you have a vector

248
00:13:31,560 --> 00:13:34,080
and you basically throw that vector at

249
00:13:34,080 --> 00:13:38,470
the matrix and out comes another waxhaw

250
00:13:38,480 --> 00:13:42,900
so that matrix yeah just the recipe

251
00:13:42,900 --> 00:13:46,230
about how to make one vector of another

252
00:13:46,230 --> 00:13:49,140
vector and the recipe contains all these

253
00:13:49,140 --> 00:13:52,650
rotations translations and so on so

254
00:13:52,650 --> 00:13:55,860
another thing I need I need to talk

255
00:13:55,860 --> 00:13:59,250
about a hormone homogeneous coordinates

256
00:13:59,250 --> 00:14:03,360
and this is a weird term but you will if

257
00:14:03,360 --> 00:14:06,840
you start diving into 3d graphics you

258
00:14:06,840 --> 00:14:08,760
will see four dimensional coordinates

259
00:14:08,760 --> 00:14:12,150
everywhere so don't vary they simulate a

260
00:14:12,150 --> 00:14:15,390
similar just describe a point in 3d

261
00:14:15,390 --> 00:14:19,320
space i have x y&z corner and the force

262
00:14:19,320 --> 00:14:21,300
why are you it's basically just used to

263
00:14:21,300 --> 00:14:24,750
enable some mathematic tricks that are

264
00:14:24,750 --> 00:14:26,880
you that are required for some

265
00:14:26,880 --> 00:14:28,230
calculations you don't need to worry

266
00:14:28,230 --> 00:14:36,150
about so moving on the the single most

267
00:14:36,150 --> 00:14:38,760
important thing and 3d graphics are the

268
00:14:38,760 --> 00:14:43,170
geometry so geometry is defined using

269
00:14:43,170 --> 00:14:47,130
triangles or in some other in some other

270
00:14:47,130 --> 00:14:50,820
systems like direct x jail we can also

271
00:14:50,820 --> 00:14:52,910
use quartz which are rectangles

272
00:14:52,910 --> 00:14:57,120
basically and those are called faces and

273
00:14:57,120 --> 00:14:59,640
all of these faces together like you can

274
00:14:59,640 --> 00:15:01,920
see in the picture we form from the

275
00:15:01,920 --> 00:15:06,810
surface of the object so all of these

276
00:15:06,810 --> 00:15:09,870
all of these triangles are described by

277
00:15:09,870 --> 00:15:13,050
three points three vertices and all of

278
00:15:13,050 --> 00:15:16,350
these vertices have a common reference

279
00:15:16,350 --> 00:15:18,660
point a comment coordinate system this

280
00:15:18,660 --> 00:15:20,400
coordinate system is called the object

281
00:15:20,400 --> 00:15:24,210
space so reason for this is that you can

282
00:15:24,210 --> 00:15:28,290
move the object space around without

283
00:15:28,290 --> 00:15:31,800
having to modify any of the vertices so

284
00:15:31,800 --> 00:15:33,870
the shape of the object stays the same

285
00:15:33,870 --> 00:15:36,510
where you can move and rotate and sky

286
00:15:36,510 --> 00:15:42,180
look around so from the from the

287
00:15:42,180 --> 00:15:46,470
geometry we come to object so an object

288
00:15:46,470 --> 00:15:49,920
in 3d is just a combination of the

289
00:15:49,920 --> 00:15:52,980
geometry and a material information will

290
00:15:52,980 --> 00:16:00,230
come to that later so the object is the

291
00:16:00,230 --> 00:16:03,630
provides provides the coordinate space

292
00:16:03,630 --> 00:16:06,590
for the vertices of a geometry and

293
00:16:06,590 --> 00:16:10,440
managers all these transforms that I

294
00:16:10,440 --> 00:16:12,740
used on that object to move it around

295
00:16:12,740 --> 00:16:17,880
and finally get objects are hierarchical

296
00:16:17,880 --> 00:16:22,440
so they can contain more objects so if I

297
00:16:22,440 --> 00:16:25,650
I came for instance just a model robot

298
00:16:25,650 --> 00:16:28,830
by I have a body and a child of the body

299
00:16:28,830 --> 00:16:31,500
would be the arm so if I move the body

300
00:16:31,500 --> 00:16:34,710
around but I'm moves with it so the arm

301
00:16:34,710 --> 00:16:39,900
uses the body as a reference and finally

302
00:16:39,900 --> 00:16:45,180
there's one root object in every 15 so

303
00:16:45,180 --> 00:16:48,870
well this is also in three.js is called

304
00:16:48,870 --> 00:16:52,830
the scene and i hope the term in various

305
00:16:52,830 --> 00:16:56,880
other systems as well so yeah the root

306
00:16:56,880 --> 00:16:59,690
object hosts the one coordinate space

307
00:16:59,690 --> 00:17:02,130
that is called the world coordinate

308
00:17:02,130 --> 00:17:04,110
space which is a single point of

309
00:17:04,110 --> 00:17:07,500
reference for everything and it also

310
00:17:07,500 --> 00:17:11,400
contains special objects like cameras

311
00:17:11,400 --> 00:17:14,010
that do the actual filming of your scene

312
00:17:14,010 --> 00:17:18,930
and lights that light it up so the

313
00:17:18,930 --> 00:17:22,770
camera is a special in that it actually

314
00:17:22,770 --> 00:17:25,800
it does the viewing part of filming your

315
00:17:25,800 --> 00:17:29,580
scene so it can be positioned and

316
00:17:29,580 --> 00:17:31,860
rotators like everything else on the

317
00:17:31,860 --> 00:17:34,680
scene but it has something the field of

318
00:17:34,680 --> 00:17:37,530
view which you might know from from

319
00:17:37,530 --> 00:17:39,990
normal cameras which are basically just

320
00:17:39,990 --> 00:17:42,540
two angles like the horizontal and the

321
00:17:42,540 --> 00:17:45,390
vertical angle that open up that camera

322
00:17:45,390 --> 00:17:48,750
view frustum like it's called in

323
00:17:48,750 --> 00:17:49,660
addition to this

324
00:17:49,660 --> 00:17:52,330
there's also an airplane and of our

325
00:17:52,330 --> 00:17:56,830
plane which then define this cut off by

326
00:17:56,830 --> 00:18:01,500
remote which is called the frustum so

327
00:18:01,500 --> 00:18:05,410
putting all this together you see and

328
00:18:05,410 --> 00:18:06,970
lower left for instance there are

329
00:18:06,970 --> 00:18:09,970
several teapots and the coordinate

330
00:18:09,970 --> 00:18:12,100
system that you can see there within

331
00:18:12,100 --> 00:18:14,350
these teapots those are the object

332
00:18:14,350 --> 00:18:18,220
spaces so all of those teapots are

333
00:18:18,220 --> 00:18:20,160
basically identical they are just

334
00:18:20,160 --> 00:18:26,200
rotated around on the scene so um the

335
00:18:26,200 --> 00:18:28,210
difference between these three pictures

336
00:18:28,210 --> 00:18:31,140
is just what the point of reference so

337
00:18:31,140 --> 00:18:35,140
we can we can just view it in any way

338
00:18:35,140 --> 00:18:37,300
you won't like if you use the world

339
00:18:37,300 --> 00:18:39,730
space as a point of reference like in

340
00:18:39,730 --> 00:18:42,700
the bottom left you have the camera

341
00:18:42,700 --> 00:18:44,530
positioned according to the world space

342
00:18:44,530 --> 00:18:47,680
and finally there is a view space that

343
00:18:47,680 --> 00:18:50,950
is used by as a camera and so if you use

344
00:18:50,950 --> 00:18:54,040
that as a reference you have coordinates

345
00:18:54,040 --> 00:18:57,250
of the camera are 0 0 0 and everything

346
00:18:57,250 --> 00:18:59,530
else is positioned related to the camera

347
00:18:59,530 --> 00:19:02,610
and you can move between these different

348
00:19:02,610 --> 00:19:05,440
systems using these matrix

349
00:19:05,440 --> 00:19:08,110
multiplications I mentioned earlier this

350
00:19:08,110 --> 00:19:10,810
is why you will find a lot of this

351
00:19:10,810 --> 00:19:15,100
matrix stuff everywhere in every 3d

352
00:19:15,100 --> 00:19:19,300
implementation then there is a one

353
00:19:19,300 --> 00:19:21,190
interesting thing how do we do

354
00:19:21,190 --> 00:19:25,240
perspective so um this is a really neat

355
00:19:25,240 --> 00:19:30,010
trick so um if you see the left image we

356
00:19:30,010 --> 00:19:32,770
have that view frustum and the regular

357
00:19:32,770 --> 00:19:37,870
world coordinates and in order to do

358
00:19:37,870 --> 00:19:40,570
those perspective so further away

359
00:19:40,570 --> 00:19:44,110
objects are rendered smaller we simply

360
00:19:44,110 --> 00:19:47,590
convert this frustum shape of pyramid

361
00:19:47,590 --> 00:19:51,430
shape into a square and this the squares

362
00:19:51,430 --> 00:19:55,270
is called the the club space or a

363
00:19:55,270 --> 00:19:58,270
canonical view volume so all coordinates

364
00:19:58,270 --> 00:20:01,530
are converted into into values between

365
00:20:01,530 --> 00:20:04,169
minus 1 and 1

366
00:20:04,169 --> 00:20:08,830
so um as the frustum defines everything

367
00:20:08,830 --> 00:20:11,710
that camera can see so does this cube

368
00:20:11,710 --> 00:20:14,260
and everything that is outside of the

369
00:20:14,260 --> 00:20:17,409
value range from minus one to one simply

370
00:20:17,409 --> 00:20:20,770
clipped and will not be visible and on

371
00:20:20,770 --> 00:20:22,390
the same at the same time you can see

372
00:20:22,390 --> 00:20:26,399
that uh that as teapot gets distorted

373
00:20:26,399 --> 00:20:29,110
according to this prospector so if we

374
00:20:29,110 --> 00:20:33,220
now just watch from left to right into

375
00:20:33,220 --> 00:20:37,419
this cube we will see we will see the

376
00:20:37,419 --> 00:20:41,309
perspective transformation taking place

377
00:20:41,309 --> 00:20:44,470
the conversion from the left image to

378
00:20:44,470 --> 00:20:47,409
right images done by once again matrix

379
00:20:47,409 --> 00:20:49,149
multiplication which is called the

380
00:20:49,149 --> 00:20:55,299
perspective transform so um now we have

381
00:20:55,299 --> 00:20:57,610
all those paths together so let's talk

382
00:20:57,610 --> 00:21:01,029
about the rendering algorithm first the

383
00:21:01,029 --> 00:21:03,490
first step is we need to project all the

384
00:21:03,490 --> 00:21:05,470
vertices into the canonical view volume

385
00:21:05,470 --> 00:21:08,049
so we have them into the in this clip

386
00:21:08,049 --> 00:21:11,980
space then we can start to assemble the

387
00:21:11,980 --> 00:21:14,620
triangles rasterize up those triangles

388
00:21:14,620 --> 00:21:16,600
like I explained earlier and then

389
00:21:16,600 --> 00:21:19,149
finally we can compute the color value

390
00:21:19,149 --> 00:21:23,649
for every of the fragments in that image

391
00:21:23,649 --> 00:21:28,899
and yet last step fragment was the

392
00:21:28,899 --> 00:21:31,840
special term for a pixel that is not yet

393
00:21:31,840 --> 00:21:35,500
a pixel on screen but just corresponds

394
00:21:35,500 --> 00:21:37,419
to a picture and as part of one of these

395
00:21:37,419 --> 00:21:41,260
restaurants triangles so um last step is

396
00:21:41,260 --> 00:21:44,200
to blend these color values in case

397
00:21:44,200 --> 00:21:47,529
there's any transparency involved we

398
00:21:47,529 --> 00:21:49,059
take the value that's already there and

399
00:21:49,059 --> 00:21:51,220
put where you'll be computed and plant

400
00:21:51,220 --> 00:21:55,899
them together so and this is what WebGL

401
00:21:55,899 --> 00:21:59,679
basically does so we have a lot of a lot

402
00:21:59,679 --> 00:22:02,649
of vertex data coming in with the rep

403
00:22:02,649 --> 00:22:05,890
power the vertex buffer objects they are

404
00:22:05,890 --> 00:22:08,049
named attributes and they they run into

405
00:22:08,049 --> 00:22:10,600
the vertex shader which is the first of

406
00:22:10,600 --> 00:22:12,399
those two shader programs that you can

407
00:22:12,399 --> 00:22:16,000
write the vertex shader does does the

408
00:22:16,000 --> 00:22:16,519
thing

409
00:22:16,519 --> 00:22:19,070
which is basically just can compute the

410
00:22:19,070 --> 00:22:22,190
club space Corps not been and there are

411
00:22:22,190 --> 00:22:24,440
two stages called primitive assembly and

412
00:22:24,440 --> 00:22:28,099
rasterization and finally the single

413
00:22:28,099 --> 00:22:30,979
rough arrested fragments are passed on

414
00:22:30,979 --> 00:22:32,779
to the fragment shader which will then

415
00:22:32,779 --> 00:22:35,989
compute the color the color blending

416
00:22:35,989 --> 00:22:38,869
happens and everything lands the frame

417
00:22:38,869 --> 00:22:40,580
buffer of the graphics car which is

418
00:22:40,580 --> 00:22:44,330
exactly what will be on screen so the

419
00:22:44,330 --> 00:22:47,089
vertex shader computes the club space

420
00:22:47,089 --> 00:22:51,609
coordinates and it gets the vertices in

421
00:22:51,609 --> 00:22:55,179
something that's called attributes and

422
00:22:55,179 --> 00:22:58,070
get some additional data I'll just call

423
00:22:58,070 --> 00:23:03,259
uniforms and it can write output data in

424
00:23:03,259 --> 00:23:05,509
form of varying variables which are

425
00:23:05,509 --> 00:23:10,419
passed on to the vertex shader the

426
00:23:10,419 --> 00:23:16,909
primitive assembly now we'll take this

427
00:23:16,909 --> 00:23:21,070
computer vertex values in club space

428
00:23:21,070 --> 00:23:23,149
assembler triangles rest of those

429
00:23:23,149 --> 00:23:27,109
triangles and find out where each screen

430
00:23:27,109 --> 00:23:29,659
pixel corresponds to some pixel in the

431
00:23:29,659 --> 00:23:34,759
triangle and then finally we can compute

432
00:23:34,759 --> 00:23:37,369
the color so the fragment shader can

433
00:23:37,369 --> 00:23:40,879
only access data that is pastored by by

434
00:23:40,879 --> 00:23:42,889
the vertex shader doesn't matter too

435
00:23:42,889 --> 00:23:49,849
much yeah the primary responsibility of

436
00:23:49,849 --> 00:23:51,289
the fragment shaders to implement

437
00:23:51,289 --> 00:23:54,169
lighting equations and implement

438
00:23:54,169 --> 00:23:59,659
texturing for the surfaces involved so

439
00:23:59,659 --> 00:24:02,839
let's talk about materials in the real

440
00:24:02,839 --> 00:24:06,889
world materials so stuff objects are

441
00:24:06,889 --> 00:24:11,359
made of can react light in three

442
00:24:11,359 --> 00:24:13,820
different ways basically which is a they

443
00:24:13,820 --> 00:24:16,459
can absorb the light or parts of the

444
00:24:16,459 --> 00:24:19,700
light like only specific parts of the

445
00:24:19,700 --> 00:24:22,309
spectrum which make service bottle cap

446
00:24:22,309 --> 00:24:25,099
here look blue for instance because

447
00:24:25,099 --> 00:24:28,520
everything but blue color is absorbed

448
00:24:28,520 --> 00:24:32,310
they can reflect light or light bounces

449
00:24:32,310 --> 00:24:35,640
off the surface and finally there's a

450
00:24:35,640 --> 00:24:37,950
possibility that there's a refraction of

451
00:24:37,950 --> 00:24:42,600
a material is transparent it slightly

452
00:24:42,600 --> 00:24:44,940
changes the lights direction which is

453
00:24:44,940 --> 00:24:49,590
something you see you with lenses glass

454
00:24:49,590 --> 00:24:53,880
surfaces and everything like that so in

455
00:24:53,880 --> 00:24:59,130
the 3d world materials are basically

456
00:24:59,130 --> 00:25:01,530
just what encapsulates all those all

457
00:25:01,530 --> 00:25:04,320
those parameters that are required to

458
00:25:04,320 --> 00:25:08,940
calculate the color so we have at least

459
00:25:08,940 --> 00:25:12,150
one of the other one material per object

460
00:25:12,150 --> 00:25:14,550
and we can have as many year as one

461
00:25:14,550 --> 00:25:18,600
material / triangle so each of the

462
00:25:18,600 --> 00:25:21,480
phases of the object can be rendered in

463
00:25:21,480 --> 00:25:22,980
a different way with different

464
00:25:22,980 --> 00:25:30,930
properties so there are some terms you

465
00:25:30,930 --> 00:25:33,750
should have heard which are basically

466
00:25:33,750 --> 00:25:36,210
just Lambert shading and the bloom phong

467
00:25:36,210 --> 00:25:37,980
shading models those are the most

468
00:25:37,980 --> 00:25:41,730
commonly used and shading models which

469
00:25:41,730 --> 00:25:45,840
is basically just a simple equation not

470
00:25:45,840 --> 00:25:48,330
so simple maybe but it's just an

471
00:25:48,330 --> 00:25:52,070
equation that takes in light sources and

472
00:25:52,070 --> 00:25:55,230
material properties like the the own

473
00:25:55,230 --> 00:25:58,040
color of the material or the color of

474
00:25:58,040 --> 00:26:02,040
reflected light and finally a calculus

475
00:26:02,040 --> 00:26:04,950
from all these values together the final

476
00:26:04,950 --> 00:26:07,800
color that you will see if you look at

477
00:26:07,800 --> 00:26:10,470
that object from this direction at that

478
00:26:10,470 --> 00:26:15,660
point so um the three used models here

479
00:26:15,660 --> 00:26:18,750
there's basic which is just a plain

480
00:26:18,750 --> 00:26:21,300
color independent of every light

481
00:26:21,300 --> 00:26:25,140
influence lambo chatting does this is a

482
00:26:25,140 --> 00:26:27,390
very simple and fast lighting equation

483
00:26:27,390 --> 00:26:31,950
that can just have the few surfaces and

484
00:26:31,950 --> 00:26:35,280
finally the foam material which can

485
00:26:35,280 --> 00:26:39,240
properly render also specular highlights

486
00:26:39,240 --> 00:26:40,580
so gloss

487
00:26:40,580 --> 00:26:48,140
nose and stuff maybe so again the Beamer

488
00:26:48,140 --> 00:26:55,039
sucks but as you can see here we have we

489
00:26:55,039 --> 00:26:57,140
have for instance from from back to

490
00:26:57,140 --> 00:27:00,340
front here on the the diffuse color

491
00:27:00,340 --> 00:27:03,950
mount changes for instance so you can

492
00:27:03,950 --> 00:27:06,679
see in the back the objects are

493
00:27:06,679 --> 00:27:09,380
basically black and to the front they

494
00:27:09,380 --> 00:27:11,600
get they get more and more intense red

495
00:27:11,600 --> 00:27:14,570
then there's parameters like the

496
00:27:14,570 --> 00:27:17,000
roughness of the material just a bit

497
00:27:17,000 --> 00:27:21,740
hard to see but can see these specular

498
00:27:21,740 --> 00:27:25,760
highlights here which are caused by the

499
00:27:25,760 --> 00:27:28,210
material just not being very rough and

500
00:27:28,210 --> 00:27:37,929
finally yeah I'm getting a bit stressed

501
00:27:37,929 --> 00:27:42,200
so I'm texture Maps texture maps is last

502
00:27:42,200 --> 00:27:46,730
point here and you can see it is

503
00:27:46,730 --> 00:27:49,610
basically just way to paint images onto

504
00:27:49,610 --> 00:27:53,090
all 3d objects so these are two simple

505
00:27:53,090 --> 00:27:57,649
cubes and all phases of these cubes have

506
00:27:57,649 --> 00:28:01,159
the same same picture of a side wall of

507
00:28:01,159 --> 00:28:06,440
a box painted on them so we can use by

508
00:28:06,440 --> 00:28:09,380
using texture maps we can use these

509
00:28:09,380 --> 00:28:13,639
textures on to add further detail to our

510
00:28:13,639 --> 00:28:16,490
objects without needing to specify all

511
00:28:16,490 --> 00:28:18,950
of those in form of three angles and

512
00:28:18,950 --> 00:28:22,039
colors of triangles so we can simply

513
00:28:22,039 --> 00:28:25,220
draw an image onto an object surface so

514
00:28:25,220 --> 00:28:27,470
this is the most common use cases it's

515
00:28:27,470 --> 00:28:29,899
called diffuse mapping and there are

516
00:28:29,899 --> 00:28:32,240
several other use cases possible for

517
00:28:32,240 --> 00:28:35,799
like bump mapping or environment mapping

518
00:28:35,799 --> 00:28:38,600
alpha mapping so iphone mapping would

519
00:28:38,600 --> 00:28:41,600
describe how how transparent an object

520
00:28:41,600 --> 00:28:43,549
would be at a specific point of its

521
00:28:43,549 --> 00:28:47,139
surface bump mapping describes tiny

522
00:28:47,139 --> 00:28:49,730
details of the object surface I have an

523
00:28:49,730 --> 00:28:53,020
example for the environment web mapping

524
00:28:53,020 --> 00:28:55,450
is something that we need in order to

525
00:28:55,450 --> 00:28:58,420
describe reflection because the object

526
00:28:58,420 --> 00:29:00,340
needs to know about its environment in

527
00:29:00,340 --> 00:29:05,040
order to have something to reflect so

528
00:29:05,040 --> 00:29:09,100
it's all bit difficult to put into the

529
00:29:09,100 --> 00:29:12,880
30 minutes I see finally one important

530
00:29:12,880 --> 00:29:16,470
term here is a UV mapping the UV mapping

531
00:29:16,470 --> 00:29:23,380
the process of describing how a part of

532
00:29:23,380 --> 00:29:26,820
your texture image maps to the geometry

533
00:29:26,820 --> 00:29:30,130
so a UV map is something that you

534
00:29:30,130 --> 00:29:32,850
definitely need an order to put this

535
00:29:32,850 --> 00:29:34,690
two-dimensional image on for your

536
00:29:34,690 --> 00:29:38,080
three-dimensional geometry and as

537
00:29:38,080 --> 00:29:40,840
promised here is this is an example of

538
00:29:40,840 --> 00:29:44,260
what what is very simple material can do

539
00:29:44,260 --> 00:29:48,460
if you just add a bump map so you can

540
00:29:48,460 --> 00:29:54,160
see here all those detail all this tiny

541
00:29:54,160 --> 00:29:58,390
tiny specks in the face are simply

542
00:29:58,390 --> 00:30:01,480
caused by adding a bump map which shows

543
00:30:01,480 --> 00:30:07,180
how a bit of a displacement how the how

544
00:30:07,180 --> 00:30:14,130
the face is detailed yeah and finally a

545
00:30:14,130 --> 00:30:20,650
no time for questions but yeah just find

546
00:30:20,650 --> 00:30:27,330
me outside thanks for listening

