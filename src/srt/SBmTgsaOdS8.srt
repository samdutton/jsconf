1
00:00:09,469 --> 00:00:13,710

thank you I jeds probably like my

2
00:00:13,710 --> 00:00:15,410
favorite person in the whole world so

3
00:00:15,410 --> 00:00:18,660
that was nice anyways this looks like it

4
00:00:18,660 --> 00:00:24,240
works unicode poop there's a HTML entity

5
00:00:24,240 --> 00:00:28,740
for that as well just good info to have

6
00:00:28,740 --> 00:00:30,630
I think that's the last actual poop I

7
00:00:30,630 --> 00:00:32,219
have in here so hopefully that helps

8
00:00:32,219 --> 00:00:37,079
settle your stomach's a bit uh let's get

9
00:00:37,079 --> 00:00:40,020
going if we can there we go so I had a

10
00:00:40,020 --> 00:00:42,300
friends say this to me once I don't want

11
00:00:42,300 --> 00:00:43,950
all those fancy features I just want a

12
00:00:43,950 --> 00:00:47,940
program that eats ass and poop CSS and

13
00:00:47,940 --> 00:00:51,539
that's really the thing that the pooping

14
00:00:51,539 --> 00:00:53,850
is is about and I'm going to go ahead

15
00:00:53,850 --> 00:00:56,610
and extend the metaphor for you into the

16
00:00:56,610 --> 00:01:01,469
CSS preprocessor digestive tract and

17
00:01:01,469 --> 00:01:04,439
hopefully that won't get too boring but

18
00:01:04,439 --> 00:01:08,820
but i'll try to stick to mostly CSS so

19
00:01:08,820 --> 00:01:11,549
we we often have information like this

20
00:01:11,549 --> 00:01:13,740
this is a very small stylesheet we have

21
00:01:13,740 --> 00:01:16,409
some variables some are pixels summer

22
00:01:16,409 --> 00:01:18,479
colors and we mix them in and we've run

23
00:01:18,479 --> 00:01:21,960
functions on them it's nice so so how do

24
00:01:21,960 --> 00:01:25,170
we process that what happens whenever we

25
00:01:25,170 --> 00:01:27,840
want CSS out the other end so how does

26
00:01:27,840 --> 00:01:33,740
eating this makes a spoof this so

27
00:01:33,740 --> 00:01:35,970
preprocessors as they relate to the

28
00:01:35,970 --> 00:01:38,070
digestive system eating is probably

29
00:01:38,070 --> 00:01:42,930
standard in I'd say chewing is most like

30
00:01:42,930 --> 00:01:46,259
lexing I'll talk about what a lexer is

31
00:01:46,259 --> 00:01:48,600
but I kind of breaks up the input into

32
00:01:48,600 --> 00:01:52,500
more easily digestible pieces stomachs

33
00:01:52,500 --> 00:01:55,320
are an important part of actual

34
00:01:55,320 --> 00:01:56,729
digestion system so I couldn't really

35
00:01:56,729 --> 00:01:58,259
leave them out but they don't actually

36
00:01:58,259 --> 00:02:01,530
the metaphor is very broken so i just

37
00:02:01,530 --> 00:02:03,030
added them in here as some sort of data

38
00:02:03,030 --> 00:02:04,259
store that you're using because that's

39
00:02:04,259 --> 00:02:06,960
really all it's doing maybe a additional

40
00:02:06,960 --> 00:02:11,310
lexing so your small intestines are kind

41
00:02:11,310 --> 00:02:13,110
of like the parser step so the parser

42
00:02:13,110 --> 00:02:13,860
step is

43
00:02:13,860 --> 00:02:17,280
uh taking out the pieces that you need

44
00:02:17,280 --> 00:02:18,660
and putting them in the right places so

45
00:02:18,660 --> 00:02:19,920
this would like be actually getting

46
00:02:19,920 --> 00:02:24,300
nutrients and moving it to nice parts of

47
00:02:24,300 --> 00:02:26,760
your body breaking things down would not

48
00:02:26,760 --> 00:02:27,810
be part of that even though that's

49
00:02:27,810 --> 00:02:29,310
something that the small intestines do

50
00:02:29,310 --> 00:02:31,920
so just ignore that large intestines are

51
00:02:31,920 --> 00:02:34,980
similar we'll call that the compiler it

52
00:02:34,980 --> 00:02:38,460
really gets it ready for output that's

53
00:02:38,460 --> 00:02:42,870
that's where our I I'm just gonna say

54
00:02:42,870 --> 00:02:45,000
output but I think you know I and you

55
00:02:45,000 --> 00:02:47,640
all know what standard out is and so

56
00:02:47,640 --> 00:02:52,350
we're good there and I'm going to talk a

57
00:02:52,350 --> 00:02:54,480
little bit about hacking this system and

58
00:02:54,480 --> 00:02:56,220
so I just had to have the metaphor for

59
00:02:56,220 --> 00:02:57,930
that so one way you could hack your

60
00:02:57,930 --> 00:02:59,580
digestive tract is like lap band surgery

61
00:02:59,580 --> 00:03:00,840
where they like make your stomach

62
00:03:00,840 --> 00:03:02,459
smaller and then you have less memory

63
00:03:02,459 --> 00:03:05,730
and so maybe your output is slower you

64
00:03:05,730 --> 00:03:09,989
lose weight or one of the two so parsing

65
00:03:09,989 --> 00:03:11,400
and compiling is really what I'd like to

66
00:03:11,400 --> 00:03:13,709
talk to you about rather than the

67
00:03:13,709 --> 00:03:19,590
digestive tract so parsing is is

68
00:03:19,590 --> 00:03:21,870
actually pretty easy on a high level it

69
00:03:21,870 --> 00:03:25,560
uses syntax rules of the language and it

70
00:03:25,560 --> 00:03:27,630
figures out what every little part of a

71
00:03:27,630 --> 00:03:30,690
string is and it breaks them down into

72
00:03:30,690 --> 00:03:33,930
tokens so in this case you have the

73
00:03:33,930 --> 00:03:36,930
dollar sign which in SAS means that it's

74
00:03:36,930 --> 00:03:38,549
the start of a variable and then you

75
00:03:38,549 --> 00:03:39,780
have the name of the variable which is

76
00:03:39,780 --> 00:03:43,410
blue in this case you have the Equality

77
00:03:43,410 --> 00:03:48,420
operator CSS uses the colon to mean

78
00:03:48,420 --> 00:03:52,200
equals and so that's what SAS uses and

79
00:03:52,200 --> 00:03:54,900
then you have the value it could be any

80
00:03:54,900 --> 00:03:57,269
arbitrary string usually there are rules

81
00:03:57,269 --> 00:03:59,570
about what can go there you can't have

82
00:03:59,570 --> 00:04:01,769
unicode characters though it like if it

83
00:04:01,769 --> 00:04:03,450
was in a URL or something it might work

84
00:04:03,450 --> 00:04:04,920
probably just about anything there

85
00:04:04,920 --> 00:04:08,250
except for a semicolon and then you have

86
00:04:08,250 --> 00:04:09,780
a rule delimiter to say hey this is the

87
00:04:09,780 --> 00:04:11,730
end of the rule and so that's pretty

88
00:04:11,730 --> 00:04:13,079
easy you might be able to write a regex

89
00:04:13,079 --> 00:04:16,109
to go through and and break apart those

90
00:04:16,109 --> 00:04:17,850
things you're really looking for three

91
00:04:17,850 --> 00:04:20,310
things in that case and filling in the

92
00:04:20,310 --> 00:04:22,950
gaps you see the dollar sign is a

93
00:04:22,950 --> 00:04:24,450
variable and then you fill in the gaps

94
00:04:24,450 --> 00:04:26,520
until you get to a colon and you fill in

95
00:04:26,520 --> 00:04:27,389
the gaps then you get

96
00:04:27,389 --> 00:04:31,139
2 semicolon so that's really at the very

97
00:04:31,139 --> 00:04:32,849
base of how you set a variable how a

98
00:04:32,849 --> 00:04:35,639
computer breaks that stuff down more

99
00:04:35,639 --> 00:04:37,379
specifically it goes through every

100
00:04:37,379 --> 00:04:40,349
single character and it says is this

101
00:04:40,349 --> 00:04:42,029
part of anything that I might know about

102
00:04:42,029 --> 00:04:44,009
and it's a it has a few options and if

103
00:04:44,009 --> 00:04:45,779
there's only one option then it says oh

104
00:04:45,779 --> 00:04:48,240
this must be the dollar sign to mean a

105
00:04:48,240 --> 00:04:49,889
variable but if two things could start

106
00:04:49,889 --> 00:04:51,629
with a dollar sign it might look ahead

107
00:04:51,629 --> 00:04:53,219
and do other things there's lots of ways

108
00:04:53,219 --> 00:04:56,310
to write parsers that I don't even know

109
00:04:56,310 --> 00:04:59,610
about here is my most simple example of

110
00:04:59,610 --> 00:05:01,409
how you might write this parser in

111
00:05:01,409 --> 00:05:04,199
JavaScript which SAS is not written in

112
00:05:04,199 --> 00:05:09,029
the the most non congruent part of my

113
00:05:09,029 --> 00:05:11,939
talk is that all of my examples is are

114
00:05:11,939 --> 00:05:13,800
in SAS and all of my code is in

115
00:05:13,800 --> 00:05:16,349
JavaScript so you'll just have to deal

116
00:05:16,349 --> 00:05:23,819
with that mental trust point anyways we

117
00:05:23,819 --> 00:05:25,620
essentially just looped through a string

118
00:05:25,620 --> 00:05:30,629
we get a string in as CSS it's just text

119
00:05:30,629 --> 00:05:33,539
it's a you have characters in there and

120
00:05:33,539 --> 00:05:35,819
in this case we're just saying if we

121
00:05:35,819 --> 00:05:37,439
loop through and the character is a

122
00:05:37,439 --> 00:05:39,210
semicolon we know there's a semicolon so

123
00:05:39,210 --> 00:05:43,289
we have a list of tokens and then we

124
00:05:43,289 --> 00:05:45,779
push the semicolon token in this case

125
00:05:45,779 --> 00:05:47,399
it's just the string semicolon which

126
00:05:47,399 --> 00:05:49,589
probably might be okay for semicolon but

127
00:05:49,589 --> 00:05:51,389
you'd probably need more info like the

128
00:05:51,389 --> 00:05:53,639
variable is this type of variable all

129
00:05:53,639 --> 00:05:54,899
kinds of stuff this is a very simplified

130
00:05:54,899 --> 00:05:57,300
example so you want one of those things

131
00:05:57,300 --> 00:06:00,330
where you're noticing a semicolon for

132
00:06:00,330 --> 00:06:03,120
every possible thing in the language

133
00:06:03,120 --> 00:06:04,949
unless it's dynamic and then you use

134
00:06:04,949 --> 00:06:07,710
other techniques for those more

135
00:06:07,710 --> 00:06:09,270
realistically you probably write a

136
00:06:09,270 --> 00:06:11,849
parser generator some people might

137
00:06:11,849 --> 00:06:13,740
disagree with me on this but but most of

138
00:06:13,740 --> 00:06:16,229
the time when you need a quick parser

139
00:06:16,229 --> 00:06:18,180
for something you can actually use

140
00:06:18,180 --> 00:06:21,449
something like a peg that's a parser

141
00:06:21,449 --> 00:06:26,189
expression grammar generator and you can

142
00:06:26,189 --> 00:06:28,379
generate a parser based on expressions

143
00:06:28,379 --> 00:06:32,279
and so you say that a class is actually

144
00:06:32,279 --> 00:06:35,639
just a dot followed by an identifier and

145
00:06:35,639 --> 00:06:37,440
then you kind of say like whenever I

146
00:06:37,440 --> 00:06:40,319
build this up say an element is just an

147
00:06:40,319 --> 00:06:41,249
identifier

148
00:06:41,249 --> 00:06:44,099
or the the asterisk for everything and

149
00:06:44,099 --> 00:06:46,469
identifier is can be anything with

150
00:06:46,469 --> 00:06:48,599
dashes or numbers or characters and all

151
00:06:48,599 --> 00:06:49,499
kinds of risks if you don't necessarily

152
00:06:49,499 --> 00:06:51,449
understand the syntax or more or less

153
00:06:51,449 --> 00:06:53,809
anything here other than that you can

154
00:06:53,809 --> 00:06:57,449
kind of build up a language and then

155
00:06:57,449 --> 00:06:59,459
someone will actually just generate a

156
00:06:59,459 --> 00:07:01,439
very fast parser for you and you don't

157
00:07:01,439 --> 00:07:04,129
have to worry about this type of stuff

158
00:07:04,129 --> 00:07:06,149
unless you want to make it very very

159
00:07:06,149 --> 00:07:07,529
fast in which case you do this by hand

160
00:07:07,529 --> 00:07:11,339
and see which lips ass things like that

161
00:07:11,339 --> 00:07:14,699
let's how those work so when you're done

162
00:07:14,699 --> 00:07:16,799
you need to represent the code as data

163
00:07:16,799 --> 00:07:19,259
it comes in as text it comes in as an

164
00:07:19,259 --> 00:07:23,789
array of characters so this is text and

165
00:07:23,789 --> 00:07:26,789
you eventually after lexing have this

166
00:07:26,789 --> 00:07:28,379
you have the variable starting of the

167
00:07:28,379 --> 00:07:29,879
string you know the value of the string

168
00:07:29,879 --> 00:07:32,069
you know that the next thing is equals

169
00:07:32,069 --> 00:07:34,919
and that the value of the everything so

170
00:07:34,919 --> 00:07:36,839
you have that and you want to actually

171
00:07:36,839 --> 00:07:40,829
add structure so you take the variable

172
00:07:40,829 --> 00:07:43,799
set you know that this needs to end with

173
00:07:43,799 --> 00:07:45,749
the semicolon you say actually the way

174
00:07:45,749 --> 00:07:47,999
setting variables works is it has two

175
00:07:47,999 --> 00:07:49,709
sides and so you're going to build an

176
00:07:49,709 --> 00:07:51,839
arbitrary object that says the left side

177
00:07:51,839 --> 00:07:53,999
is the variable name and it's blue and

178
00:07:53,999 --> 00:07:56,729
the right side is the value and it's

179
00:07:56,729 --> 00:07:59,969
three BBFC I don't know where that value

180
00:07:59,969 --> 00:08:02,129
Jed had all the switching names this

181
00:08:02,129 --> 00:08:05,269
morning pro tip that was a good move

182
00:08:05,269 --> 00:08:07,679
stylist have structure so even further

183
00:08:07,679 --> 00:08:09,899
you might have the stylesheet object

184
00:08:09,899 --> 00:08:11,939
that wraps that whole thing so if your

185
00:08:11,939 --> 00:08:13,619
your whole style sheet was just one

186
00:08:13,619 --> 00:08:15,809
variable declaration it might look kind

187
00:08:15,809 --> 00:08:17,459
of like this you'd have you'd have an

188
00:08:17,459 --> 00:08:19,529
object that said my type is a style

189
00:08:19,529 --> 00:08:22,469
sheet and in it it has declarations and

190
00:08:22,469 --> 00:08:24,299
the first one is a variable that's set

191
00:08:24,299 --> 00:08:26,849
in a certain way the second one is a

192
00:08:26,849 --> 00:08:30,929
declaration the selector is the stuff

193
00:08:30,929 --> 00:08:33,750
class inside P tags and the rules are

194
00:08:33,750 --> 00:08:38,099
left color value the color of FFF so

195
00:08:38,099 --> 00:08:41,250
we're just saying stuff p stuff has the

196
00:08:41,250 --> 00:08:46,589
color of white and that actually might

197
00:08:46,589 --> 00:08:49,829
look more like this in SAS so you have

198
00:08:49,829 --> 00:08:51,750
bodies then you have a tags and they're

199
00:08:51,750 --> 00:08:54,510
nested inside

200
00:08:54,510 --> 00:08:56,880
the hover states are nested inside so

201
00:08:56,880 --> 00:08:59,130
you actually have what what ends up

202
00:08:59,130 --> 00:09:00,960
looking like this whenever you actually

203
00:09:00,960 --> 00:09:03,420
break it down I can make this smaller

204
00:09:03,420 --> 00:09:12,950
for you maybe I can't there we go closer

205
00:09:12,950 --> 00:09:15,480
so we end up with a hierarchy we have a

206
00:09:15,480 --> 00:09:17,790
style sheet and we know that we have a

207
00:09:17,790 --> 00:09:19,530
body rule and we have an a rule and

208
00:09:19,530 --> 00:09:21,810
inside of those we have rules and inside

209
00:09:21,810 --> 00:09:23,490
of those we have rules and with with

210
00:09:23,490 --> 00:09:27,110
sass you can nest infinitely I think

211
00:09:27,110 --> 00:09:29,670
Nicole once said that you should follow

212
00:09:29,670 --> 00:09:32,040
the inception rule and never go more

213
00:09:32,040 --> 00:09:34,980
than four levels deep which I like that

214
00:09:34,980 --> 00:09:36,960
is that is good but technically you have

215
00:09:36,960 --> 00:09:38,190
the ability to go as deep as you'd like

216
00:09:38,190 --> 00:09:41,100
in normal CSS you can only have one

217
00:09:41,100 --> 00:09:43,910
level but it's still a tree it's just

218
00:09:43,910 --> 00:09:49,350
not that tall of one anyways this is an

219
00:09:49,350 --> 00:09:50,910
abstract syntax tree that's what I've

220
00:09:50,910 --> 00:09:53,430
been describing it's confusing because

221
00:09:53,430 --> 00:09:56,610
there are almost no rules if anyone asks

222
00:09:56,610 --> 00:09:59,160
a knapsack an abstract syntax tree is

223
00:09:59,160 --> 00:10:02,250
just a list of things that contain one

224
00:10:02,250 --> 00:10:05,520
thing or other lists of things i like to

225
00:10:05,520 --> 00:10:10,770
call them arbitrary syntax trees they

226
00:10:10,770 --> 00:10:13,500
almost don't mean anything they're

227
00:10:13,500 --> 00:10:14,820
they're actually they've got such a cool

228
00:10:14,820 --> 00:10:17,400
name that you want to drive more value

229
00:10:17,400 --> 00:10:21,240
out of that name but really all it is is

230
00:10:21,240 --> 00:10:25,230
a representation of the meaning of your

231
00:10:25,230 --> 00:10:28,980
syntax in a structure so in the case of

232
00:10:28,980 --> 00:10:32,400
CSS we don't want just there was a

233
00:10:32,400 --> 00:10:34,290
variable than this and then a semicolon

234
00:10:34,290 --> 00:10:36,120
and then this like there's no actual

235
00:10:36,120 --> 00:10:37,800
structure that means anything we want to

236
00:10:37,800 --> 00:10:39,630
be able to say that this is a group that

237
00:10:39,630 --> 00:10:42,000
contains rules that contain groups that

238
00:10:42,000 --> 00:10:44,010
contain rules and we know that the

239
00:10:44,010 --> 00:10:46,500
things inside of a group apply to only

240
00:10:46,500 --> 00:10:51,390
its outer selectors so what can we do

241
00:10:51,390 --> 00:10:54,510
with it lots of stuff and that's why

242
00:10:54,510 --> 00:10:57,390
it's fun so i'll go into what we can do

243
00:10:57,390 --> 00:10:58,980
with it and in a second but the

244
00:10:58,980 --> 00:11:00,900
compilation step is the first thing you

245
00:11:00,900 --> 00:11:02,790
would normally do with it compile it to

246
00:11:02,790 --> 00:11:08,279
CSS so reduction is the first step

247
00:11:08,279 --> 00:11:09,660
whenever you're dealing with something

248
00:11:09,660 --> 00:11:14,160
like compiling sass into CSS you have s

249
00:11:14,160 --> 00:11:17,459
CSS which we've been using here and it's

250
00:11:17,459 --> 00:11:21,600
kind of like a superset of CSS most of

251
00:11:21,600 --> 00:11:23,699
the things are very similar and so we

252
00:11:23,699 --> 00:11:28,290
want to take the data from the SCSS that

253
00:11:28,290 --> 00:11:29,279
looks kind of like this we have a

254
00:11:29,279 --> 00:11:32,370
variable that we're setting to blue so

255
00:11:32,370 --> 00:11:35,249
we're saying blue is that 3 b.b number

256
00:11:35,249 --> 00:11:37,290
and then we have a rule that uses the

257
00:11:37,290 --> 00:11:40,620
variable and that's not valid CSS at

258
00:11:40,620 --> 00:11:44,540
least until CSS level for Nazi SS for

259
00:11:44,540 --> 00:11:49,230
CSS unburdened level for totally

260
00:11:49,230 --> 00:11:56,100
different guys come on the yeah so this

261
00:11:56,100 --> 00:11:57,870
is not valid CSS we couldn't compile

262
00:11:57,870 --> 00:11:59,220
this we couldn't turn this back into a

263
00:11:59,220 --> 00:12:02,100
string and have this actually work in

264
00:12:02,100 --> 00:12:05,040
any browser what we want to do is reduce

265
00:12:05,040 --> 00:12:07,319
the variables away so in this case we'd

266
00:12:07,319 --> 00:12:09,499
say find any place that has the value

267
00:12:09,499 --> 00:12:12,269
where the type is a variable and the

268
00:12:12,269 --> 00:12:14,220
name is blue and that'd be pretty easy

269
00:12:14,220 --> 00:12:16,019
and then just replace it with the value

270
00:12:16,019 --> 00:12:17,850
of the blue variable and you might be

271
00:12:17,850 --> 00:12:19,490
able to do that in your head very easily

272
00:12:19,490 --> 00:12:22,649
it's somewhat complicated in code we

273
00:12:22,649 --> 00:12:23,970
won't actually have to do that and so

274
00:12:23,970 --> 00:12:26,129
you end up with this and this ends up

275
00:12:26,129 --> 00:12:28,850
being actually a completely valid CSS

276
00:12:28,850 --> 00:12:33,000
syntax tree we just have a rule and the

277
00:12:33,000 --> 00:12:34,680
name is the color and the value is a

278
00:12:34,680 --> 00:12:38,579
legit color and we can just compile that

279
00:12:38,579 --> 00:12:40,680
single rule into CSS and there's no

280
00:12:40,680 --> 00:12:42,990
problem and that's valid one hundred

281
00:12:42,990 --> 00:12:45,269
percent valid CSS you could even use the

282
00:12:45,269 --> 00:12:49,230
SAS lexer backwards not that lectures

283
00:12:49,230 --> 00:12:51,899
work that way but because SCSS works

284
00:12:51,899 --> 00:12:53,759
that way you could turn it back into

285
00:12:53,759 --> 00:12:56,850
what the SAS the SCSS representation of

286
00:12:56,850 --> 00:12:58,920
this would be and would be completely

287
00:12:58,920 --> 00:13:01,860
valid CSS in this case and what you

288
00:13:01,860 --> 00:13:05,160
would do is just do that on the most

289
00:13:05,160 --> 00:13:06,839
specific node and then you'd go up and

290
00:13:06,839 --> 00:13:08,550
you do that on those nodes and then you

291
00:13:08,550 --> 00:13:16,610
go up and you go up and you compile so I

292
00:13:16,610 --> 00:13:20,790
lost too much recursion everybody's Fred

293
00:13:20,790 --> 00:13:21,990
so you're

294
00:13:21,990 --> 00:13:23,940
shin comes from this and you're able to

295
00:13:23,940 --> 00:13:26,730
output this and you do that recursively

296
00:13:26,730 --> 00:13:28,470
leaves the trunk and I say leaves your

297
00:13:28,470 --> 00:13:31,260
trunk because they're like there's a

298
00:13:31,260 --> 00:13:32,640
split somewhere in the middle of the

299
00:13:32,640 --> 00:13:34,920
room of people who say that that's up

300
00:13:34,920 --> 00:13:36,930
the tree and there are people would say

301
00:13:36,930 --> 00:13:38,640
that that's down the tree and I think

302
00:13:38,640 --> 00:13:41,190
it's probably down the tree but because

303
00:13:41,190 --> 00:13:44,399
you're going leaves the trunk but

304
00:13:44,399 --> 00:13:46,470
whenever you represent a sin texture you

305
00:13:46,470 --> 00:13:49,380
actually draw it upside down and so it's

306
00:13:49,380 --> 00:13:52,020
actually more like stalactites or

307
00:13:52,020 --> 00:13:53,279
something and we should just change

308
00:13:53,279 --> 00:13:57,839
abstract syntax stalactites from now on

309
00:13:57,839 --> 00:14:00,959
if you would or arbitrary syntax

310
00:14:00,959 --> 00:14:06,120
stalactites would work for me anyways so

311
00:14:06,120 --> 00:14:07,020
we take something that looks like this

312
00:14:07,020 --> 00:14:09,060
we put it into the structured data you

313
00:14:09,060 --> 00:14:10,170
don't actually have to read that but

314
00:14:10,170 --> 00:14:12,209
this is you know some arbitrary way of

315
00:14:12,209 --> 00:14:13,920
saying there are declarations with rules

316
00:14:13,920 --> 00:14:15,810
inside of them and we know what they all

317
00:14:15,810 --> 00:14:19,740
mean and it's just big and ugly and we

318
00:14:19,740 --> 00:14:21,959
reduce that to something that is valid

319
00:14:21,959 --> 00:14:24,690
for CSS and you want to know what's

320
00:14:24,690 --> 00:14:26,310
going on here but we no longer have

321
00:14:26,310 --> 00:14:27,870
variables in there we no longer have

322
00:14:27,870 --> 00:14:30,450
nested structures it's all a valid tree

323
00:14:30,450 --> 00:14:31,890
and then we're able to just turn that

324
00:14:31,890 --> 00:14:35,250
back into text again so it takes one

325
00:14:35,250 --> 00:14:38,279
type of text converts it into a known

326
00:14:38,279 --> 00:14:40,770
but arbitrary data format and then it

327
00:14:40,770 --> 00:14:43,740
converts that data into a different but

328
00:14:43,740 --> 00:14:46,860
arbitrary and known data format and it

329
00:14:46,860 --> 00:14:48,750
converts that back to text so that was

330
00:14:48,750 --> 00:14:50,940
like a very long drawn-out way of saying

331
00:14:50,940 --> 00:14:53,329
that it takes text turns it into data

332
00:14:53,329 --> 00:14:55,920
fiddles with it and then turns it back

333
00:14:55,920 --> 00:14:59,279
into text so there's a very

334
00:14:59,279 --> 00:15:01,860
sophisticated graph on seeing that more

335
00:15:01,860 --> 00:15:05,670
apropos to the title we have our

336
00:15:05,670 --> 00:15:09,300
digestion system I threw in some some

337
00:15:09,300 --> 00:15:12,450
buzz words streams I don't know what

338
00:15:12,450 --> 00:15:14,640
that that would be I guess you pipe

339
00:15:14,640 --> 00:15:21,300
saliva into standard in anyways uh this

340
00:15:21,300 --> 00:15:24,360
is this is really just a silly metaphor

341
00:15:24,360 --> 00:15:26,520
the only hard part is actually there in

342
00:15:26,520 --> 00:15:29,040
the middle we're pretty good at parsing

343
00:15:29,040 --> 00:15:30,420
you can use parts of expression

344
00:15:30,420 --> 00:15:33,270
generators were pretty good at even

345
00:15:33,270 --> 00:15:35,790
knowing how to define languages as

346
00:15:35,790 --> 00:15:39,480
context-free grammars or regular

347
00:15:39,480 --> 00:15:42,240
languages there's this whole automata

348
00:15:42,240 --> 00:15:44,370
theory on all that stuff so we're pretty

349
00:15:44,370 --> 00:15:46,230
good at taking text and turning into

350
00:15:46,230 --> 00:15:48,420
data very pretty good at turning data

351
00:15:48,420 --> 00:15:49,890
and putting it to text is just the

352
00:15:49,890 --> 00:15:54,300
reverse so the the magic of SAS actually

353
00:15:54,300 --> 00:15:56,460
you know other than some speed things

354
00:15:56,460 --> 00:15:59,430
lives in in the data one today to do

355
00:15:59,430 --> 00:16:04,350
data to conversion and it's it's

356
00:16:04,350 --> 00:16:06,780
interesting how they do some of that

357
00:16:06,780 --> 00:16:09,420
stuff that's not really the point so I

358
00:16:09,420 --> 00:16:11,220
want to teach you what you can do with

359
00:16:11,220 --> 00:16:13,920
it data one can be interesting just

360
00:16:13,920 --> 00:16:17,430
reading the data can be pretty

361
00:16:17,430 --> 00:16:19,800
eye-opening so data one would be that

362
00:16:19,800 --> 00:16:21,480
data that once we turned it into a

363
00:16:21,480 --> 00:16:25,440
structure that represented our SAS what

364
00:16:25,440 --> 00:16:27,030
could we what information could we get

365
00:16:27,030 --> 00:16:29,910
from it we could count how often we use

366
00:16:29,910 --> 00:16:32,580
variables or we could change them before

367
00:16:32,580 --> 00:16:35,130
they ever get used we could move rules

368
00:16:35,130 --> 00:16:36,690
around we could reduce things we could

369
00:16:36,690 --> 00:16:41,340
lint we could change the output formats

370
00:16:41,340 --> 00:16:43,050
we could output to multiple formats

371
00:16:43,050 --> 00:16:44,970
there's a lot of work you can do by

372
00:16:44,970 --> 00:16:47,940
having your styles as data and it's

373
00:16:47,940 --> 00:16:52,290
super cool to me so as long as your data

374
00:16:52,290 --> 00:16:54,810
is valid at all points it doesn't matter

375
00:16:54,810 --> 00:16:56,430
you can send it back in so you could

376
00:16:56,430 --> 00:16:59,640
take in text turn into data throw that

377
00:16:59,640 --> 00:17:01,770
data away create your own whole new data

378
00:17:01,770 --> 00:17:04,140
and then compile that to CSS and that's

379
00:17:04,140 --> 00:17:05,910
fine just wouldn't have any bearing on

380
00:17:05,910 --> 00:17:09,450
what you put in and that's that's a-ok

381
00:17:09,450 --> 00:17:11,970
thing I guess sometimes so I wrote this

382
00:17:11,970 --> 00:17:18,450
a very important modifier of rules and

383
00:17:18,450 --> 00:17:21,570
so you would pass this in as a filter to

384
00:17:21,570 --> 00:17:26,010
your ast so your data comes in and what

385
00:17:26,010 --> 00:17:28,590
it does is says find me all the rules so

386
00:17:28,590 --> 00:17:30,120
you don't want to find the selectors you

387
00:17:30,120 --> 00:17:31,770
don't want to find variable names all

388
00:17:31,770 --> 00:17:33,330
you want to say is anywhere where

389
00:17:33,330 --> 00:17:37,230
there's a rule that has a value let's

390
00:17:37,230 --> 00:17:39,240
check that out so we'll say if it has a

391
00:17:39,240 --> 00:17:44,340
value say the value plus important so we

392
00:17:44,340 --> 00:17:46,800
save every value as important and then

393
00:17:46,800 --> 00:17:49,020
write it back to the tree I

394
00:17:49,020 --> 00:17:50,550
then recursively do that so we call

395
00:17:50,550 --> 00:17:53,190
ourselves over and over so we go all the

396
00:17:53,190 --> 00:17:54,870
way down and hit every single rule in

397
00:17:54,870 --> 00:17:56,940
our entire CSS file and then just return

398
00:17:56,940 --> 00:17:59,430
all that and then we compile that and

399
00:17:59,430 --> 00:18:01,560
now every single one of our rules is

400
00:18:01,560 --> 00:18:04,440
important in the output and you didn't

401
00:18:04,440 --> 00:18:06,600
have to write those by hand so this will

402
00:18:06,600 --> 00:18:08,160
save you a lot of time doing what your

403
00:18:08,160 --> 00:18:11,970
are going to do anyways which was

404
00:18:11,970 --> 00:18:13,560
probably just add important to

405
00:18:13,560 --> 00:18:15,950
everything luckily we can do the reverse

406
00:18:15,950 --> 00:18:21,090
the undo intern work AST modification

407
00:18:21,090 --> 00:18:24,150
tool so we go through every single node

408
00:18:24,150 --> 00:18:26,040
we find if it's a rule we say if it

409
00:18:26,040 --> 00:18:28,500
matches important return null so delete

410
00:18:28,500 --> 00:18:31,620
the rule entirely don't turn it

411
00:18:31,620 --> 00:18:33,450
unimportant just say if this is

412
00:18:33,450 --> 00:18:36,770
important then it should die forever

413
00:18:36,770 --> 00:18:40,370
which is another valid opinion to have

414
00:18:40,370 --> 00:18:44,250
outputs may vary and that that type of

415
00:18:44,250 --> 00:18:45,720
logic works in every preprocessor

416
00:18:45,720 --> 00:18:47,250
obviously that code will not work in

417
00:18:47,250 --> 00:18:48,690
every preprocessor everyone has

418
00:18:48,690 --> 00:18:50,820
different ways of storing nodes and

419
00:18:50,820 --> 00:18:54,030
values and things like that rework is

420
00:18:54,030 --> 00:18:58,770
one by TJ vision media who has five or

421
00:18:58,770 --> 00:19:02,970
six hundred modules on github but it is

422
00:19:02,970 --> 00:19:07,200
made specifically for AST hacking he

423
00:19:07,200 --> 00:19:10,050
actually ships it with no features it

424
00:19:10,050 --> 00:19:12,780
literally just takes stuff in turns it

425
00:19:12,780 --> 00:19:14,190
to data and then turns that data back

426
00:19:14,190 --> 00:19:16,530
into CSS and then it's up to you to

427
00:19:16,530 --> 00:19:18,840
stick stuff in the middle so you might

428
00:19:18,840 --> 00:19:20,580
be familiar with the term middleware so

429
00:19:20,580 --> 00:19:22,320
you write a bunch of little middleware

430
00:19:22,320 --> 00:19:26,070
pieces that change nodes around and you

431
00:19:26,070 --> 00:19:28,080
say if I want to add variables I just

432
00:19:28,080 --> 00:19:30,600
add one little piece this is variables

433
00:19:30,600 --> 00:19:31,770
and that's the only thing I want to use

434
00:19:31,770 --> 00:19:33,960
in my preprocessor so I'm not going to

435
00:19:33,960 --> 00:19:35,490
add it nesting and I'm not going to add

436
00:19:35,490 --> 00:19:41,760
in gradients or a variable one of the

437
00:19:41,760 --> 00:19:43,710
pre vendor prefixes all that kind of

438
00:19:43,710 --> 00:19:45,180
stuff you don't need them so don't add

439
00:19:45,180 --> 00:19:47,190
them in or you could do totally custom

440
00:19:47,190 --> 00:19:49,530
stuff so a little more real world a

441
00:19:49,530 --> 00:19:54,930
problem that I actually ran into in my

442
00:19:54,930 --> 00:19:59,070
day to day work is that compilation of

443
00:19:59,070 --> 00:20:02,429
styles is fast you can take a SAS style

444
00:20:02,429 --> 00:20:05,909
eat or stylus in the case that I that I

445
00:20:05,909 --> 00:20:08,129
originally had and you can compile

446
00:20:08,129 --> 00:20:10,259
Styles pretty quickly so it's rarely the

447
00:20:10,259 --> 00:20:13,830
bottleneck in anyone's build step if

448
00:20:13,830 --> 00:20:15,659
they can get slow some people will move

449
00:20:15,659 --> 00:20:18,240
to lib sass for that kind of thing the

450
00:20:18,240 --> 00:20:20,100
asterisk there is until you want to hook

451
00:20:20,100 --> 00:20:23,429
it up to a change event so if you hooked

452
00:20:23,429 --> 00:20:25,860
up the color picker to a change event

453
00:20:25,860 --> 00:20:28,499
and said on change you know 60 times a

454
00:20:28,499 --> 00:20:31,350
second or whatever that that can do go

455
00:20:31,350 --> 00:20:33,360
back to the server recompile all my

456
00:20:33,360 --> 00:20:35,610
Styles with the new value and set this

457
00:20:35,610 --> 00:20:37,769
variable just to this this new value

458
00:20:37,769 --> 00:20:39,509
that I have on the change thing and then

459
00:20:39,509 --> 00:20:41,220
send all that back up delete all the

460
00:20:41,220 --> 00:20:43,559
styles and put all the new ones in that

461
00:20:43,559 --> 00:20:47,639
would never work and luckily now that

462
00:20:47,639 --> 00:20:49,110
you know about a STS you could fix that

463
00:20:49,110 --> 00:20:52,230
problem so in something like a theme

464
00:20:52,230 --> 00:20:54,269
builder you would want a size slider or

465
00:20:54,269 --> 00:20:55,769
color picker to do all this stuff in

466
00:20:55,769 --> 00:20:58,019
real time so the only way we can avoid

467
00:20:58,019 --> 00:21:01,139
the time it takes to recompile is to not

468
00:21:01,139 --> 00:21:03,990
recompile and luckily we can capture

469
00:21:03,990 --> 00:21:06,990
that data at the data level and use that

470
00:21:06,990 --> 00:21:09,809
to our advantage and still only ever

471
00:21:09,809 --> 00:21:12,600
write the SAS or the stylus of the this

472
00:21:12,600 --> 00:21:16,759
the rework that we want to write so I

473
00:21:16,759 --> 00:21:20,610
will open up a demo for you this is a

474
00:21:20,610 --> 00:21:23,700
fun little page it's got a pun for for

475
00:21:23,700 --> 00:21:27,929
Jed leaf and tree just to point that out

476
00:21:27,929 --> 00:21:34,169
for everyone thank you so what we have

477
00:21:34,169 --> 00:21:36,929
here is a pretty simple page I put it

478
00:21:36,929 --> 00:21:39,480
together it's an express app it's if you

479
00:21:39,480 --> 00:21:42,090
saw the first slide I had a link to it

480
00:21:42,090 --> 00:21:43,350
but you can get it will be on the left

481
00:21:43,350 --> 00:21:45,869
side too and you can run it from from

482
00:21:45,869 --> 00:21:50,879
github so what we have first is I'll

483
00:21:50,879 --> 00:21:58,730
pull up a my CSS my CSS is my personal

484
00:21:58,730 --> 00:22:01,769
compiler for for CSS all I did was add

485
00:22:01,769 --> 00:22:04,529
variables i use rework to do this and so

486
00:22:04,529 --> 00:22:07,740
i add this one little guy here that says

487
00:22:07,740 --> 00:22:10,619
VAR and then I pass it a variable name

488
00:22:10,619 --> 00:22:13,740
and then in in the compilation step it

489
00:22:13,740 --> 00:22:15,990
adds in my actual variables which

490
00:22:15,990 --> 00:22:20,160
I put in in my server I don't know why I

491
00:22:20,160 --> 00:22:22,170
did that but that's where it is so I

492
00:22:22,170 --> 00:22:24,179
take these and I essentially replace

493
00:22:24,179 --> 00:22:28,380
those so I wrote a a a middleware

494
00:22:28,380 --> 00:22:30,660
component to rework that just goes in

495
00:22:30,660 --> 00:22:33,570
and replaces those variables with the

496
00:22:33,570 --> 00:22:35,070
actual values and that's pretty simple

497
00:22:35,070 --> 00:22:39,200
and so if you come here I can show you

498
00:22:39,200 --> 00:22:41,910
the output and you'll see that there are

499
00:22:41,910 --> 00:22:44,460
actual background colors and there are

500
00:22:44,460 --> 00:22:48,059
actual widths and and all this kind of

501
00:22:48,059 --> 00:22:51,720
stuff so it's real it happens it's fun

502
00:22:51,720 --> 00:22:55,920
and it works and yeah so some things

503
00:22:55,920 --> 00:22:58,380
that dev tools is really good at is

504
00:22:58,380 --> 00:23:02,070
saying hey I know where this rule is

505
00:23:02,070 --> 00:23:04,860
working on my page I can go and say I

506
00:23:04,860 --> 00:23:06,179
can right click on something and say

507
00:23:06,179 --> 00:23:08,400
what styles apply to this element but

508
00:23:08,400 --> 00:23:09,660
you don't actually have a lot of insight

509
00:23:09,660 --> 00:23:13,320
into how your sass variables map up two

510
00:23:13,320 --> 00:23:15,690
things on pages you don't have that it's

511
00:23:15,690 --> 00:23:17,400
compiled to CSS before it ever gets to

512
00:23:17,400 --> 00:23:19,410
the browser so we have that information

513
00:23:19,410 --> 00:23:22,140
that's what I also did was I grabbed the

514
00:23:22,140 --> 00:23:24,600
AST stage and I flipped the AST on its

515
00:23:24,600 --> 00:23:27,660
head so you can take your variables and

516
00:23:27,660 --> 00:23:30,000
you can say which selectors do they

517
00:23:30,000 --> 00:23:33,510
apply to and which rules work on those

518
00:23:33,510 --> 00:23:35,760
selectors based on that variable so you

519
00:23:35,760 --> 00:23:38,210
might say if bgcolor ends up being black

520
00:23:38,210 --> 00:23:40,980
then you would say it would output in

521
00:23:40,980 --> 00:23:44,179
the end output that the body HTML

522
00:23:44,179 --> 00:23:47,480
bracket background color colon black

523
00:23:47,480 --> 00:23:49,590
close bracket right and that would be

524
00:23:49,590 --> 00:23:51,270
the rule that's generated from a black

525
00:23:51,270 --> 00:23:54,030
BG color and we have this data available

526
00:23:54,030 --> 00:23:56,460
to us as JSON and if I change anything

527
00:23:56,460 --> 00:23:58,950
in our CSS file this automatically just

528
00:23:58,950 --> 00:24:00,450
gets changed it's not something I have

529
00:24:00,450 --> 00:24:02,520
to maintain separately it's just

530
00:24:02,520 --> 00:24:05,460
completely generated from the ast of our

531
00:24:05,460 --> 00:24:07,770
stuff and so I have a few things here it

532
00:24:07,770 --> 00:24:10,950
says to next to BG color and I can hover

533
00:24:10,950 --> 00:24:13,440
over it and says the BG color of the

534
00:24:13,440 --> 00:24:15,929
HTML element which is the total wrapping

535
00:24:15,929 --> 00:24:17,940
element the body which has a margin on

536
00:24:17,940 --> 00:24:21,030
it comes down to to where the the margin

537
00:24:21,030 --> 00:24:26,010
is and then the font color of leaf them

538
00:24:26,010 --> 00:24:27,450
alone is the same as the background

539
00:24:27,450 --> 00:24:29,430
color and so we see

540
00:24:29,430 --> 00:24:32,370
that we actually have two rules where

541
00:24:32,370 --> 00:24:34,440
it's used it shows up three times on the

542
00:24:34,440 --> 00:24:35,880
page and we can actually position

543
00:24:35,880 --> 00:24:37,860
something over every time we see this

544
00:24:37,860 --> 00:24:42,000
variable we can also come in here grab a

545
00:24:42,000 --> 00:24:44,760
pick color picker and change these in

546
00:24:44,760 --> 00:24:48,480
real time so we can have you know 60

547
00:24:48,480 --> 00:24:50,750
frame per second recompilation of styles

548
00:24:50,750 --> 00:24:54,090
because we know exactly which elements

549
00:24:54,090 --> 00:24:56,400
are affected by this we don't have to go

550
00:24:56,400 --> 00:24:58,530
back to the server recompile you'll

551
00:24:58,530 --> 00:25:00,330
notice the the text is changing at the

552
00:25:00,330 --> 00:25:04,260
same time as as the background there we

553
00:25:04,260 --> 00:25:06,420
can actually just pop into here and

554
00:25:06,420 --> 00:25:09,750
check I just inject a style element with

555
00:25:09,750 --> 00:25:13,280
just that rule in it and that rule says

556
00:25:13,280 --> 00:25:16,380
the body and the container sub-header

557
00:25:16,380 --> 00:25:18,630
now have this new color and it just

558
00:25:18,630 --> 00:25:21,330
overrides our current styles so that's

559
00:25:21,330 --> 00:25:25,290
pretty nifty and that's information you

560
00:25:25,290 --> 00:25:27,630
could never get from devtools until they

561
00:25:27,630 --> 00:25:29,250
have deeper integrations with this stuff

562
00:25:29,250 --> 00:25:31,200
you can also do fun stuff of border

563
00:25:31,200 --> 00:25:33,390
radius I like this is is this trippy it

564
00:25:33,390 --> 00:25:36,420
right here ready for this oh there's CSS

565
00:25:36,420 --> 00:25:42,770
for you this is my favorite one just

566
00:25:42,770 --> 00:25:44,790
that's going to translate well in a

567
00:25:44,790 --> 00:25:49,350
slide deck anyways that's actually just

568
00:25:49,350 --> 00:25:53,340
about all I have does anyone have

569
00:25:53,340 --> 00:26:11,730
questions

