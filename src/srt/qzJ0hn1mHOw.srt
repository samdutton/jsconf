1
00:00:15,220 --> 00:00:19,390

hello so yeah like Jed said I'm Garen

2
00:00:19,390 --> 00:00:20,890
means if you want to talk to me on

3
00:00:20,890 --> 00:00:23,470
Twitter Garen em I work at etsy I live

4
00:00:23,470 --> 00:00:25,540
in Austin Texas I wrote a book called

5
00:00:25,540 --> 00:00:27,310
note for front-end developers and I run

6
00:00:27,310 --> 00:00:29,740
a couple of groups in Austin for female

7
00:00:29,740 --> 00:00:33,280
developers so that's me and what I want

8
00:00:33,280 --> 00:00:36,010
to talk about is this book Tina Fey's

9
00:00:36,010 --> 00:00:40,180
bossy pants so it's a biography and

10
00:00:40,180 --> 00:00:42,100
autobiography that Tina Fey wrote about

11
00:00:42,100 --> 00:00:43,690
her herself as one does with

12
00:00:43,690 --> 00:00:46,210
autobiographies um if you don't know

13
00:00:46,210 --> 00:00:48,760
Tina Fey she's um she's the lead

14
00:00:48,760 --> 00:00:51,700
character on the show 30 rock she's on

15
00:00:51,700 --> 00:00:53,710
Saturday Night Live she impersonates

16
00:00:53,710 --> 00:00:56,620
Sarah Palin very well and she's a woman

17
00:00:56,620 --> 00:00:58,930
behind what I think is considered the

18
00:00:58,930 --> 00:01:00,460
pinnacle of American cinema the movie

19
00:01:00,460 --> 00:01:04,930
Mean Girls um and yeah that's her um so

20
00:01:04,930 --> 00:01:06,250
the book is the book is really funny

21
00:01:06,250 --> 00:01:09,040
it's it's hilarious and as a result

22
00:01:09,040 --> 00:01:13,060
became a best-seller and kind of the the

23
00:01:13,060 --> 00:01:14,409
thread that continues throughout the

24
00:01:14,409 --> 00:01:16,840
book the theme is this idea of success

25
00:01:16,840 --> 00:01:20,110
without infallibility and I'd like to

26
00:01:20,110 --> 00:01:22,420
deal talk a little bit more about foul

27
00:01:22,420 --> 00:01:24,640
ability so if you're aware of the

28
00:01:24,640 --> 00:01:26,530
character Liz Lemon from the show 30

29
00:01:26,530 --> 00:01:28,870
rock or even if you're not um she's a

30
00:01:28,870 --> 00:01:31,680
really good example of a foul ability um

31
00:01:31,680 --> 00:01:34,000
she's a very empathetic character she's

32
00:01:34,000 --> 00:01:35,380
somebody who can you can relate to

33
00:01:35,380 --> 00:01:37,450
immediately because she's not perfect

34
00:01:37,450 --> 00:01:41,229
and she's she's a caricature of Tina Fey

35
00:01:41,229 --> 00:01:43,390
but she's not exactly like Tina Fey Tina

36
00:01:43,390 --> 00:01:44,710
Fey's obviously very successful and

37
00:01:44,710 --> 00:01:47,229
wrote a TV show that she stars in Liz

38
00:01:47,229 --> 00:01:49,090
Lemon just you know writes a TV show and

39
00:01:49,090 --> 00:01:52,240
kind of suffers and her whole character

40
00:01:52,240 --> 00:01:55,510
is kind of about the conflict of wanting

41
00:01:55,510 --> 00:01:57,280
to do things and attempting to do them

42
00:01:57,280 --> 00:01:58,690
and having no idea if they're the right

43
00:01:58,690 --> 00:02:00,729
things or not and it ends up being

44
00:02:00,729 --> 00:02:04,330
pretty hilarious so contrast that with

45
00:02:04,330 --> 00:02:06,640
javascript javascript is actually

46
00:02:06,640 --> 00:02:09,220
infallible um which you may or may not

47
00:02:09,220 --> 00:02:13,060
believe um FAL ability comes from us

48
00:02:13,060 --> 00:02:16,540
comes from the developers so and I think

49
00:02:16,540 --> 00:02:17,920
we're all familiar with how that happens

50
00:02:17,920 --> 00:02:21,549
we fail to account for edge cases we

51
00:02:21,549 --> 00:02:23,200
don't really understand how our code is

52
00:02:23,200 --> 00:02:25,810
going to be used by people or you know

53
00:02:25,810 --> 00:02:28,510
we just kind of boxed ourselves into how

54
00:02:28,510 --> 00:02:28,870
we

55
00:02:28,870 --> 00:02:30,670
something should work and we don't

56
00:02:30,670 --> 00:02:32,680
really consider what happens when it

57
00:02:32,680 --> 00:02:35,379
doesn't and we're maybe a little fearful

58
00:02:35,379 --> 00:02:38,190
of admitting that it doesn't sometimes

59
00:02:38,190 --> 00:02:42,010
so key difference fala ability when it

60
00:02:42,010 --> 00:02:43,840
comes to Tina Fey is hilarious and it

61
00:02:43,840 --> 00:02:45,069
makes her more relatable or her

62
00:02:45,069 --> 00:02:46,659
character more relatable fallibility

63
00:02:46,659 --> 00:02:48,310
when it comes to javascript is not

64
00:02:48,310 --> 00:02:51,040
hilarious and causes us to lose users

65
00:02:51,040 --> 00:02:52,720
causes us to lose developers if we're

66
00:02:52,720 --> 00:02:55,030
writing ap is or code for other

67
00:02:55,030 --> 00:02:59,620
developers etc so the the difference

68
00:02:59,620 --> 00:03:03,430
comes from comedy right um comedy allows

69
00:03:03,430 --> 00:03:06,310
us to to cope with things in our world

70
00:03:06,310 --> 00:03:07,989
it allows us to cope with other people

71
00:03:07,989 --> 00:03:10,810
it allows us to understand our world in

72
00:03:10,810 --> 00:03:12,579
a way that it takes things like like I'm

73
00:03:12,579 --> 00:03:14,500
certainty and even tragedy and in flips

74
00:03:14,500 --> 00:03:15,909
them around and makes them positive

75
00:03:15,909 --> 00:03:18,190
things that we learn from or at least we

76
00:03:18,190 --> 00:03:20,769
can bond over right and computers have

77
00:03:20,769 --> 00:03:23,769
no ability to do this so all our other

78
00:03:23,769 --> 00:03:26,170
observations about the world are things

79
00:03:26,170 --> 00:03:28,359
that we need to communicate to computers

80
00:03:28,359 --> 00:03:31,540
and translate for them so that they can

81
00:03:31,540 --> 00:03:34,260
observe the world the way that we do and

82
00:03:34,260 --> 00:03:37,329
this brings us to the rules of improv

83
00:03:37,329 --> 00:03:39,280
Tina Fey's rules of improv that will

84
00:03:39,280 --> 00:03:40,660
change your life and reduce belly fat

85
00:03:40,660 --> 00:03:45,370
asterisk they are one agree to say yes

86
00:03:45,370 --> 00:03:48,760
and three make statements for there are

87
00:03:48,760 --> 00:03:50,650
no mistakes just to explain very quickly

88
00:03:50,650 --> 00:03:52,150
what does mean although this is not

89
00:03:52,150 --> 00:03:54,069
actually talk about improv because I've

90
00:03:54,069 --> 00:03:57,400
never done improv um agreeing is obvious

91
00:03:57,400 --> 00:03:59,139
you know what that means saying yes and

92
00:03:59,139 --> 00:04:01,359
means don't simply agree but add

93
00:04:01,359 --> 00:04:04,000
something else to whatever's whatever is

94
00:04:04,000 --> 00:04:05,620
being discussed three makes statements

95
00:04:05,620 --> 00:04:08,109
so don't ask questions don't just stand

96
00:04:08,109 --> 00:04:09,639
there asking each other questions but

97
00:04:09,639 --> 00:04:11,470
make statements describe what's going on

98
00:04:11,470 --> 00:04:13,810
or what you're portraying that's going

99
00:04:13,810 --> 00:04:15,849
on and there are no mistakes is also

100
00:04:15,849 --> 00:04:21,010
obvious so I searched for Bossypants

101
00:04:21,010 --> 00:04:22,330
rules of improv on google and i got

102
00:04:22,330 --> 00:04:26,199
14,000 results so yeah I think I think

103
00:04:26,199 --> 00:04:29,289
we can consider at least that Tina Fey

104
00:04:29,289 --> 00:04:31,330
is apparently an authority on rules of

105
00:04:31,330 --> 00:04:34,210
improv because people really enjoy these

106
00:04:34,210 --> 00:04:36,729
succinct approaches or you know maybe

107
00:04:36,729 --> 00:04:40,630
their approach maybe there are set of

108
00:04:40,630 --> 00:04:41,919
rules that have existed for a long time

109
00:04:41,919 --> 00:04:42,190
and

110
00:04:42,190 --> 00:04:43,600
just reusing them like i said i don't

111
00:04:43,600 --> 00:04:45,670
know improv so i can't say what i do

112
00:04:45,670 --> 00:04:48,790
know is that when i looked at these

113
00:04:48,790 --> 00:04:51,520
results people were already applying the

114
00:04:51,520 --> 00:04:54,640
rules as given by tina fey to pretty

115
00:04:54,640 --> 00:04:56,890
much everything under the Sun including

116
00:04:56,890 --> 00:05:00,250
a business feminism scrum and fasting

117
00:05:00,250 --> 00:05:02,200
which is a weird one to me but I didn't

118
00:05:02,200 --> 00:05:04,840
click that link um on just life in

119
00:05:04,840 --> 00:05:06,460
general so this is this is a popular

120
00:05:06,460 --> 00:05:08,830
approach for a lot of things and I

121
00:05:08,830 --> 00:05:10,600
thought hey maybe we can do the same

122
00:05:10,600 --> 00:05:13,390
thing with machines so our machines

123
00:05:13,390 --> 00:05:15,220
obviously like everything to be black

124
00:05:15,220 --> 00:05:17,350
and white um they don't deal well with

125
00:05:17,350 --> 00:05:18,990
gray areas they don't deal well with

126
00:05:18,990 --> 00:05:21,370
uncertainties and so we need to create

127
00:05:21,370 --> 00:05:24,210
algorithms that allow them to do that

128
00:05:24,210 --> 00:05:26,590
which is to say that rather than trying

129
00:05:26,590 --> 00:05:30,040
to feed them only correct answers we

130
00:05:30,040 --> 00:05:32,230
have to teach them how to find the right

131
00:05:32,230 --> 00:05:34,720
answers which is certainly more

132
00:05:34,720 --> 00:05:41,440
difficult so let's let's um as a simple

133
00:05:41,440 --> 00:05:43,450
example let's just talk about how we

134
00:05:43,450 --> 00:05:45,580
would apply these rules of improv to

135
00:05:45,580 --> 00:05:50,440
like a basic user registration form so

136
00:05:50,440 --> 00:05:53,620
one agree um this is pretty easy we save

137
00:05:53,620 --> 00:05:55,000
all the answers we don't necessarily

138
00:05:55,000 --> 00:05:56,650
save them in the database but we save

139
00:05:56,650 --> 00:05:58,930
them in in some kind of cash where

140
00:05:58,930 --> 00:06:00,460
they're not lost so the user doesn't

141
00:06:00,460 --> 00:06:03,040
have to retype things and so even if

142
00:06:03,040 --> 00:06:04,960
they're even if they're incomplete if

143
00:06:04,960 --> 00:06:06,640
they contain illegal characters whatever

144
00:06:06,640 --> 00:06:08,950
um we want to try and hang on to that so

145
00:06:08,950 --> 00:06:09,940
the user doesn't have to reenter

146
00:06:09,940 --> 00:06:14,260
information to say yes in and this is

147
00:06:14,260 --> 00:06:15,970
this is simple stuff like autocomplete

148
00:06:15,970 --> 00:06:18,720
um content sensitive hints when you

149
00:06:18,720 --> 00:06:23,740
mouse into a field reusing info all

150
00:06:23,740 --> 00:06:26,800
basic stuff that we see right three make

151
00:06:26,800 --> 00:06:29,650
statements um we want to work with what

152
00:06:29,650 --> 00:06:31,390
we know so as soon as we know something

153
00:06:31,390 --> 00:06:33,340
ideally we want to be able to reflect

154
00:06:33,340 --> 00:06:34,720
that back to the users so they get a

155
00:06:34,720 --> 00:06:36,730
picture of where they are in this this

156
00:06:36,730 --> 00:06:37,990
workflow that they're doing and I can be

157
00:06:37,990 --> 00:06:40,930
like showing them a preview um and like

158
00:06:40,930 --> 00:06:43,060
highlighting the areas where they missed

159
00:06:43,060 --> 00:06:44,650
things so that they know what the state

160
00:06:44,650 --> 00:06:47,560
of those errors is and but most

161
00:06:47,560 --> 00:06:48,490
importantly allowing them to continue

162
00:06:48,490 --> 00:06:50,380
moving through the the workflow and

163
00:06:50,380 --> 00:06:53,530
finally for no mistakes so if they have

164
00:06:53,530 --> 00:06:55,330
a weak password we suggest a stronger

165
00:06:55,330 --> 00:06:55,960
one

166
00:06:55,960 --> 00:06:57,550
and we just make it a step too to do

167
00:06:57,550 --> 00:06:59,380
more stuff on the site or if they have a

168
00:06:59,380 --> 00:07:01,240
non unique username that's fine we'll

169
00:07:01,240 --> 00:07:03,610
just use a numeric user ID until they

170
00:07:03,610 --> 00:07:07,180
fix that and this shouldn't be news

171
00:07:07,180 --> 00:07:09,460
these are these are not new ideas when

172
00:07:09,460 --> 00:07:13,150
it comes to you I philosophy but with

173
00:07:13,150 --> 00:07:15,970
JavaScript we can actually do more we

174
00:07:15,970 --> 00:07:18,190
can go a little deeper like so we don't

175
00:07:18,190 --> 00:07:20,229
have to deal with just the user as far

176
00:07:20,229 --> 00:07:23,830
as a source of potential uncertainty we

177
00:07:23,830 --> 00:07:25,870
can actually deal with code as the

178
00:07:25,870 --> 00:07:27,970
source of uncertainty because JavaScript

179
00:07:27,970 --> 00:07:33,430
does that really well so let's improv

180
00:07:33,430 --> 00:07:39,310
some JavaScript you should you should

181
00:07:39,310 --> 00:07:41,169
think of your your JavaScript as an

182
00:07:41,169 --> 00:07:42,970
improv partner you don't have to do that

183
00:07:42,970 --> 00:07:44,139
but I would like it if you would do that

184
00:07:44,139 --> 00:07:46,449
so if you're writing a framework or a

185
00:07:46,449 --> 00:07:48,460
transpiler if you're doing some kind of

186
00:07:48,460 --> 00:07:50,470
machine learning thing you know

187
00:07:50,470 --> 00:07:52,150
JavaScript early doesn't care javascript

188
00:07:52,150 --> 00:07:53,800
is very happy to work with other

189
00:07:53,800 --> 00:07:55,419
javascript and that's one of the

190
00:07:55,419 --> 00:07:56,889
beautiful things about it it does it

191
00:07:56,889 --> 00:07:59,620
very easily so any javascript that you

192
00:07:59,620 --> 00:08:01,990
write for other javascript should be

193
00:08:01,990 --> 00:08:07,030
cool okay so going through the steps

194
00:08:07,030 --> 00:08:10,270
again one agree because we have no

195
00:08:10,270 --> 00:08:12,250
method overloading in Java Script we

196
00:08:12,250 --> 00:08:14,349
actually have I think a great

197
00:08:14,349 --> 00:08:16,750
opportunity because we can we can do

198
00:08:16,750 --> 00:08:18,370
essentially infinite method overloading

199
00:08:18,370 --> 00:08:19,810
without ever having to declare other

200
00:08:19,810 --> 00:08:22,060
actual overloaded methods so if we want

201
00:08:22,060 --> 00:08:25,419
to send multiple types of arguments to a

202
00:08:25,419 --> 00:08:28,090
function we can we can do that and we

203
00:08:28,090 --> 00:08:29,680
can branch within that function as much

204
00:08:29,680 --> 00:08:33,760
as we want and that's awesome so

205
00:08:33,760 --> 00:08:37,539
JavaScript innately like when it wants

206
00:08:37,539 --> 00:08:39,159
to be agreeable right I think we can all

207
00:08:39,159 --> 00:08:42,490
agree on that haha but javascript

208
00:08:42,490 --> 00:08:44,680
javascript wants to take whatever we

209
00:08:44,680 --> 00:08:46,839
give it like that's the way functions

210
00:08:46,839 --> 00:08:48,339
are set up that we can just pass in

211
00:08:48,339 --> 00:08:50,140
whatever we want and that's that's part

212
00:08:50,140 --> 00:08:51,880
of the language so we can we can do

213
00:08:51,880 --> 00:08:52,899
simple things like checking for

214
00:08:52,899 --> 00:08:55,329
existence using type of seeing what the

215
00:08:55,329 --> 00:08:57,610
length about object is um that will tell

216
00:08:57,610 --> 00:09:00,070
us you know what what kind of data were

217
00:09:00,070 --> 00:09:03,760
actually looking at in a good example of

218
00:09:03,760 --> 00:09:05,770
that in the real world is the dollar

219
00:09:05,770 --> 00:09:07,660
sign in dollar sign function in jQuery

220
00:09:07,660 --> 00:09:08,910
which

221
00:09:08,910 --> 00:09:11,520
could take an ID as the string can take

222
00:09:11,520 --> 00:09:14,430
an actual element it can take the scope

223
00:09:14,430 --> 00:09:16,950
of edge execution and it can take a

224
00:09:16,950 --> 00:09:18,330
string of HTML that doesn't even exist

225
00:09:18,330 --> 00:09:20,220
yet and we get the same thing out of it

226
00:09:20,220 --> 00:09:21,870
no matter which of those inputs we give

227
00:09:21,870 --> 00:09:29,430
it so step two is saying yes and so if

228
00:09:29,430 --> 00:09:31,170
if there's a callback of course this

229
00:09:31,170 --> 00:09:32,940
becomes really easy like we know exactly

230
00:09:32,940 --> 00:09:35,340
what information to supply after we've

231
00:09:35,340 --> 00:09:37,380
already done our agreement and we're

232
00:09:37,380 --> 00:09:39,990
ready to to move on if we can't tell

233
00:09:39,990 --> 00:09:43,740
then we go back to those other ways of

234
00:09:43,740 --> 00:09:46,260
checking what kind of output is expected

235
00:09:46,260 --> 00:09:51,810
um type of etc um but at minimum we

236
00:09:51,810 --> 00:09:52,890
should we should be thinking about

237
00:09:52,890 --> 00:09:55,170
returning some kind of chainable context

238
00:09:55,170 --> 00:09:57,600
object whatever our function has done

239
00:09:57,600 --> 00:10:00,150
creating creating in that context and

240
00:10:00,150 --> 00:10:02,400
adding to that context and passing that

241
00:10:02,400 --> 00:10:06,090
back so it's still usable and if we

242
00:10:06,090 --> 00:10:07,620
design functions in this way which I

243
00:10:07,620 --> 00:10:09,570
think we do already to some extent um

244
00:10:09,570 --> 00:10:13,320
then then we come out with a better

245
00:10:13,320 --> 00:10:14,850
result or if there are asynchronous

246
00:10:14,850 --> 00:10:17,900
functions then then we'd take a

247
00:10:17,900 --> 00:10:19,770
hopefully an argument that's applied

248
00:10:19,770 --> 00:10:23,160
that moves on to the next function that

249
00:10:23,160 --> 00:10:27,270
needs to be called um because I as long

250
00:10:27,270 --> 00:10:29,070
as things are working like JavaScript

251
00:10:29,070 --> 00:10:30,870
would like to continue then working and

252
00:10:30,870 --> 00:10:32,700
continue like passing back usable

253
00:10:32,700 --> 00:10:34,350
information rather than you know nothing

254
00:10:34,350 --> 00:10:37,170
and jQuery again is a really good

255
00:10:37,170 --> 00:10:39,630
example of this because you get you get

256
00:10:39,630 --> 00:10:41,580
chain ability if you're just modifying a

257
00:10:41,580 --> 00:10:44,370
certain object um you you get you no

258
00:10:44,370 --> 00:10:45,780
call backs if you if you're doing

259
00:10:45,780 --> 00:10:47,430
something that is asynchronous that you

260
00:10:47,430 --> 00:10:49,380
need to run code after something is

261
00:10:49,380 --> 00:10:51,480
completed and you get like these kind of

262
00:10:51,480 --> 00:10:53,760
luxury return values where things are

263
00:10:53,760 --> 00:10:56,310
built up and you get very useful

264
00:10:56,310 --> 00:10:58,170
information as the result of each

265
00:10:58,170 --> 00:11:04,190
function call so three make statements

266
00:11:04,190 --> 00:11:06,090
the idea is that we want to create

267
00:11:06,090 --> 00:11:08,970
instances that are useful or objects

268
00:11:08,970 --> 00:11:11,850
that are useful which means including as

269
00:11:11,850 --> 00:11:13,470
much information as we reasonably can

270
00:11:13,470 --> 00:11:15,510
and as people would reasonably want

271
00:11:15,510 --> 00:11:19,020
access to and making all information set

272
00:11:19,020 --> 00:11:20,329
available

273
00:11:20,329 --> 00:11:22,579
but you know maybe maybe not showing

274
00:11:22,579 --> 00:11:26,480
everything or also not confusing things

275
00:11:26,480 --> 00:11:28,399
that belong to the application with

276
00:11:28,399 --> 00:11:31,249
things that belong to objects in keeping

277
00:11:31,249 --> 00:11:32,839
a sort of separation so that you get an

278
00:11:32,839 --> 00:11:35,600
accurate picture of of the state of

279
00:11:35,600 --> 00:11:37,189
whatever it is you're actually looking

280
00:11:37,189 --> 00:11:41,149
at and part of this I think is that you

281
00:11:41,149 --> 00:11:43,429
just return an instance automatically if

282
00:11:43,429 --> 00:11:45,049
you can so rather than like making

283
00:11:45,049 --> 00:11:47,059
people go hunt for instances you have

284
00:11:47,059 --> 00:11:49,160
smart defaults and you use those to

285
00:11:49,160 --> 00:11:51,709
create instances wherever wherever you

286
00:11:51,709 --> 00:11:52,910
think that they're going to be needed

287
00:11:52,910 --> 00:11:55,850
and in this way hopefully you allow

288
00:11:55,850 --> 00:11:58,759
access to a great picture of state from

289
00:11:58,759 --> 00:12:01,779
anywhere you are in application and

290
00:12:01,779 --> 00:12:03,889
that's that's really kind of the best

291
00:12:03,889 --> 00:12:05,119
you can do with JavaScript because

292
00:12:05,119 --> 00:12:07,339
JavaScript doesn't usually have a great

293
00:12:07,339 --> 00:12:09,319
awareness of what's going on in the

294
00:12:09,319 --> 00:12:10,699
larger picture but it knows what's going

295
00:12:10,699 --> 00:12:11,929
on with that object during knows what's

296
00:12:11,929 --> 00:12:15,199
going on with that application state and

297
00:12:15,199 --> 00:12:17,059
the DOM is actually a good example of

298
00:12:17,059 --> 00:12:19,459
this um because of course if you take ad

299
00:12:19,459 --> 00:12:21,199
on alignment you have all of its

300
00:12:21,199 --> 00:12:22,339
properties all the things that are

301
00:12:22,339 --> 00:12:24,199
already defined on it if you want to

302
00:12:24,199 --> 00:12:25,699
make up properties and add them into

303
00:12:25,699 --> 00:12:27,499
that element no problem you can do that

304
00:12:27,499 --> 00:12:30,139
and then each element has its own state

305
00:12:30,139 --> 00:12:32,600
and whatever modifications you make even

306
00:12:32,600 --> 00:12:34,549
if you if you create new properties that

307
00:12:34,549 --> 00:12:37,399
doesn't affect what the actual Dom and

308
00:12:37,399 --> 00:12:40,879
the API in the browser consider that

309
00:12:40,879 --> 00:12:47,299
type of object so for no mistakes if

310
00:12:47,299 --> 00:12:48,649
you're using try-catch in your

311
00:12:48,649 --> 00:12:50,480
JavaScript I think that you should

312
00:12:50,480 --> 00:12:52,970
probably be worried um if you're not

313
00:12:52,970 --> 00:12:55,040
doing something that you have absolutely

314
00:12:55,040 --> 00:12:57,410
no control over um you should definitely

315
00:12:57,410 --> 00:13:00,019
be worried because try-catch implies

316
00:13:00,019 --> 00:13:02,749
that you you don't know what's going to

317
00:13:02,749 --> 00:13:04,759
happen you can't you can't foresee it

318
00:13:04,759 --> 00:13:07,339
and you don't want to which is kind of

319
00:13:07,339 --> 00:13:09,439
messed up because you can typically

320
00:13:09,439 --> 00:13:12,019
handle whatever error you think might

321
00:13:12,019 --> 00:13:14,209
occur and so rather than putting a

322
00:13:14,209 --> 00:13:15,949
try-catch around it the obvious thing to

323
00:13:15,949 --> 00:13:17,540
do is just to try and find that error

324
00:13:17,540 --> 00:13:20,239
and handle it so if you have people

325
00:13:20,239 --> 00:13:22,279
setting private properties or you're

326
00:13:22,279 --> 00:13:24,230
trying to keep certain things from being

327
00:13:24,230 --> 00:13:25,220
accessible just don't make them

328
00:13:25,220 --> 00:13:27,949
accessible that's easy um if things are

329
00:13:27,949 --> 00:13:29,269
coming in is the wrong type and you're

330
00:13:29,269 --> 00:13:30,350
concerned that you're not going to get

331
00:13:30,350 --> 00:13:32,389
the right type of information try to get

332
00:13:32,389 --> 00:13:33,670
the right type of information out of

333
00:13:33,670 --> 00:13:36,190
I mean rather than rather than just

334
00:13:36,190 --> 00:13:37,600
rejecting something because it doesn't

335
00:13:37,600 --> 00:13:40,090
match your api specification why not

336
00:13:40,090 --> 00:13:41,590
look at it a little harder and see if

337
00:13:41,590 --> 00:13:44,890
you can actually make it fit bottom line

338
00:13:44,890 --> 00:13:47,800
you want to be again agreeing and if you

339
00:13:47,800 --> 00:13:49,660
can't agree then return this and get the

340
00:13:49,660 --> 00:13:52,840
 out meaning your function not you

341
00:13:52,840 --> 00:13:56,980
out meaning your function not you
um so if if you get an input that you

342
00:13:56,980 --> 00:13:59,320
can't you can't use specifically what

343
00:13:59,320 --> 00:14:01,510
you would like let's say that I passed I

344
00:14:01,510 --> 00:14:04,060
passed the value of bar into a function

345
00:14:04,060 --> 00:14:05,440
that's actually connecting a property

346
00:14:05,440 --> 00:14:08,800
bar with a value assigned to it so if I

347
00:14:08,800 --> 00:14:10,630
get that there's there's no reason I

348
00:14:10,630 --> 00:14:12,700
can't actually check to see whether the

349
00:14:12,700 --> 00:14:14,410
value that I get passed in is usable

350
00:14:14,410 --> 00:14:16,720
assuming that I have defaults for the

351
00:14:16,720 --> 00:14:18,040
other properties that might get set in

352
00:14:18,040 --> 00:14:19,690
that same object and assuming that I'm

353
00:14:19,690 --> 00:14:21,730
able to differentiate between the types

354
00:14:21,730 --> 00:14:23,860
of things that are getting passed in so

355
00:14:23,860 --> 00:14:25,840
I don't have to throw an error there if

356
00:14:25,840 --> 00:14:28,440
I can potentially use that information

357
00:14:28,440 --> 00:14:31,840
and that's that's basically what an

358
00:14:31,840 --> 00:14:33,460
error is right again unless we're

359
00:14:33,460 --> 00:14:35,230
talking about like things like a server

360
00:14:35,230 --> 00:14:37,150
not being available or whatever else

361
00:14:37,150 --> 00:14:38,860
things that you actually can't control

362
00:14:38,860 --> 00:14:42,250
it's just us failing to realize use

363
00:14:42,250 --> 00:14:46,540
cases um and javascript is happy to help

364
00:14:46,540 --> 00:14:48,100
us with this problem if we're happy to

365
00:14:48,100 --> 00:14:52,390
write the code to do it so in the real

366
00:14:52,390 --> 00:14:55,360
world I think again a simple xhr as a

367
00:14:55,360 --> 00:14:57,340
great example because there are a lot of

368
00:14:57,340 --> 00:14:58,540
things that can go wrong with the next

369
00:14:58,540 --> 00:15:00,130
HR and some of those you can't control

370
00:15:00,130 --> 00:15:01,510
if the server is not up the server's not

371
00:15:01,510 --> 00:15:03,490
up and you're not going to be able to

372
00:15:03,490 --> 00:15:05,860
hit it no matter what you do but some

373
00:15:05,860 --> 00:15:07,750
things you can try and work around so if

374
00:15:07,750 --> 00:15:09,100
it's just timing out if you're on a slow

375
00:15:09,100 --> 00:15:10,600
connection for some reason you can

376
00:15:10,600 --> 00:15:13,390
always try again right um not to an

377
00:15:13,390 --> 00:15:15,040
unreasonable degree but once or twice

378
00:15:15,040 --> 00:15:17,710
sure if you get a 500 error like maybe

379
00:15:17,710 --> 00:15:19,630
somebody who wrote the server-side code

380
00:15:19,630 --> 00:15:22,150
was expecting again you sent them a post

381
00:15:22,150 --> 00:15:23,950
or something like that there's no reason

382
00:15:23,950 --> 00:15:25,510
you can't try other methods of

383
00:15:25,510 --> 00:15:27,730
connecting to to the server-side

384
00:15:27,730 --> 00:15:30,700
resource and um hope that that gets you

385
00:15:30,700 --> 00:15:34,660
a little further of course again you

386
00:15:34,660 --> 00:15:36,880
can't you can't always alleviate all

387
00:15:36,880 --> 00:15:38,680
your errors I mean this would be a very

388
00:15:38,680 --> 00:15:41,410
different talk um if if I had a way for

389
00:15:41,410 --> 00:15:43,960
you to do that but we have good ways to

390
00:15:43,960 --> 00:15:46,450
handle the situations where you do need

391
00:15:46,450 --> 00:15:47,150
an error

392
00:15:47,150 --> 00:15:50,090
we have excellent patterns now for for

393
00:15:50,090 --> 00:15:52,400
dealing with this um I really like the

394
00:15:52,400 --> 00:15:54,500
error first callbacks that that are a

395
00:15:54,500 --> 00:15:56,390
pattern I think that came from node I

396
00:15:56,390 --> 00:15:59,150
hadn't seen it before um were you you

397
00:15:59,150 --> 00:16:00,590
first pass in the error information in

398
00:16:00,590 --> 00:16:01,910
the new pass in whatever data is

399
00:16:01,910 --> 00:16:03,890
supplied to the callback that's great

400
00:16:03,890 --> 00:16:05,360
and you can do the same thing in reverse

401
00:16:05,360 --> 00:16:08,420
if you're writing your code with error

402
00:16:08,420 --> 00:16:10,640
handling in mind you can actually pass

403
00:16:10,640 --> 00:16:13,520
in an airbag error call back first to

404
00:16:13,520 --> 00:16:17,330
whatever your function is and and have

405
00:16:17,330 --> 00:16:19,250
that as a standard part of the way that

406
00:16:19,250 --> 00:16:20,780
you write functions and that's that's

407
00:16:20,780 --> 00:16:24,530
kind of cool as well and the great thing

408
00:16:24,530 --> 00:16:27,080
about those kind of callbacks is that

409
00:16:27,080 --> 00:16:29,420
you can you can just suppress errors if

410
00:16:29,420 --> 00:16:31,430
developers don't choose to supply them

411
00:16:31,430 --> 00:16:34,040
so it's opt-in error handling and you

412
00:16:34,040 --> 00:16:35,600
leave it up to the developer to decide

413
00:16:35,600 --> 00:16:39,100
whether this error is important or not

414
00:16:39,100 --> 00:16:42,830
so I like to talk now about how this

415
00:16:42,830 --> 00:16:47,090
relates to the golden rule the golden

416
00:16:47,090 --> 00:16:48,650
rule is everybody know the golden rule

417
00:16:48,650 --> 00:16:53,960
yes probably nobody okay that guy um the

418
00:16:53,960 --> 00:16:55,670
Golden Rule do unto others as you would

419
00:16:55,670 --> 00:16:57,830
have them do unto you apply decoding is

420
00:16:57,830 --> 00:16:59,720
simply you know something like code it

421
00:16:59,720 --> 00:17:03,170
like you have to use it um and that

422
00:17:03,170 --> 00:17:05,720
includes um not only coating it like you

423
00:17:05,720 --> 00:17:07,370
have to use it personally but coding it

424
00:17:07,370 --> 00:17:08,630
like you might have to use it for

425
00:17:08,630 --> 00:17:10,130
something other than the use case that

426
00:17:10,130 --> 00:17:11,780
originally inspired you to write

427
00:17:11,780 --> 00:17:13,580
whatever it is a framework a transpiler

428
00:17:13,580 --> 00:17:16,640
some kind of tool some utility whatever

429
00:17:16,640 --> 00:17:19,250
um so not only like you have to use it

430
00:17:19,250 --> 00:17:21,620
personally um but like you might have to

431
00:17:21,620 --> 00:17:26,089
use it for other things so why why

432
00:17:26,089 --> 00:17:28,370
agreeable functions for this to fit this

433
00:17:28,370 --> 00:17:31,040
golden rule um because we want functions

434
00:17:31,040 --> 00:17:34,010
to be reused right like we write them to

435
00:17:34,010 --> 00:17:35,510
create abstractions that make things

436
00:17:35,510 --> 00:17:36,800
easier so we don't have to write the

437
00:17:36,800 --> 00:17:39,500
same code over and over again um and so

438
00:17:39,500 --> 00:17:41,300
the best the best functions are

439
00:17:41,300 --> 00:17:44,780
decoupled they're reusable and that

440
00:17:44,780 --> 00:17:46,550
makes them easier to use in they get

441
00:17:46,550 --> 00:17:49,640
used more simple why affirmative return

442
00:17:49,640 --> 00:17:52,100
values because returning true at the end

443
00:17:52,100 --> 00:17:53,510
of a function unless it's a utility

444
00:17:53,510 --> 00:17:55,250
function that explicitly tests whether

445
00:17:55,250 --> 00:17:57,680
something is true is I mean you might as

446
00:17:57,680 --> 00:17:59,690
well return anything like you you can't

447
00:17:59,690 --> 00:18:00,890
get any value of at

448
00:18:00,890 --> 00:18:02,630
and so if you return something that's

449
00:18:02,630 --> 00:18:03,890
more than what people need the worst

450
00:18:03,890 --> 00:18:06,110
case scenario is that they don't use all

451
00:18:06,110 --> 00:18:09,050
of it big deal and we don't write a lot

452
00:18:09,050 --> 00:18:10,730
of peer utilities anymore we have good

453
00:18:10,730 --> 00:18:13,700
utility libraries right now and so more

454
00:18:13,700 --> 00:18:15,890
often what we're doing is actually

455
00:18:15,890 --> 00:18:18,380
altering the context of some art object

456
00:18:18,380 --> 00:18:20,330
that exists and so it makes perfect

457
00:18:20,330 --> 00:18:22,370
sense to return that object and there's

458
00:18:22,370 --> 00:18:23,870
no reason not to go and with

459
00:18:23,870 --> 00:18:26,960
asynchronous functions we have you know

460
00:18:26,960 --> 00:18:28,730
you can return a promise you can use

461
00:18:28,730 --> 00:18:31,220
subscribers um you can still do the same

462
00:18:31,220 --> 00:18:32,810
thing so that you continue the flow of

463
00:18:32,810 --> 00:18:35,390
your application at every point and

464
00:18:35,390 --> 00:18:37,130
nobody ever has to go looking for that

465
00:18:37,130 --> 00:18:39,530
object they were modifying or a way into

466
00:18:39,530 --> 00:18:42,620
that workflow that involves several next

467
00:18:42,620 --> 00:18:48,980
functions imperative States because we

468
00:18:48,980 --> 00:18:51,020
want to have a clear picture of the app

469
00:18:51,020 --> 00:18:52,520
that we can control at all points and

470
00:18:52,520 --> 00:18:53,980
that includes all the objects within it

471
00:18:53,980 --> 00:18:58,070
and it's good to have access to curated

472
00:18:58,070 --> 00:19:00,590
information if you will as much

473
00:19:00,590 --> 00:19:02,570
information as makes sense not a bunch

474
00:19:02,570 --> 00:19:04,280
of like private variables that aren't

475
00:19:04,280 --> 00:19:05,840
really private that you don't need that

476
00:19:05,840 --> 00:19:07,970
are just set up stuff creating creating

477
00:19:07,970 --> 00:19:11,060
a good useful state is is very helpful

478
00:19:11,060 --> 00:19:14,240
obviously and also avoids you getting

479
00:19:14,240 --> 00:19:16,460
into situations where you say oh that's

480
00:19:16,460 --> 00:19:18,770
that that's not edible or that's that's

481
00:19:18,770 --> 00:19:20,780
you change this in one place it has

482
00:19:20,780 --> 00:19:22,190
other effects in other places you

483
00:19:22,190 --> 00:19:24,170
sandbox these things and keep them

484
00:19:24,170 --> 00:19:26,840
separate from each other and in that way

485
00:19:26,840 --> 00:19:28,250
you get you get clear pictures of

486
00:19:28,250 --> 00:19:29,380
everything that you're working with

487
00:19:29,380 --> 00:19:32,210
ideally because once people start

488
00:19:32,210 --> 00:19:33,980
sending properties on an object or

489
00:19:33,980 --> 00:19:36,200
trying to use it they want they want to

490
00:19:36,200 --> 00:19:37,550
feel like what they've created with your

491
00:19:37,550 --> 00:19:39,620
code is a good looking object and they

492
00:19:39,620 --> 00:19:41,180
want to they want it to do what they

493
00:19:41,180 --> 00:19:44,870
wanted to do obviously and when I no

494
00:19:44,870 --> 00:19:47,660
hair no error error handling and because

495
00:19:47,660 --> 00:19:49,820
again exceptions are useless you can't

496
00:19:49,820 --> 00:19:53,060
do anything with them so obviously you

497
00:19:53,060 --> 00:19:55,250
should strive to avoid them rather than

498
00:19:55,250 --> 00:19:58,640
striving to indicate to the user how how

499
00:19:58,640 --> 00:19:59,900
they should avoid them your code should

500
00:19:59,900 --> 00:20:02,330
avoid them and there are lots of ways to

501
00:20:02,330 --> 00:20:04,850
provide opt-in error information so that

502
00:20:04,850 --> 00:20:06,650
you can you can make those errors

503
00:20:06,650 --> 00:20:08,480
optional for people who want that error

504
00:20:08,480 --> 00:20:09,710
information if somebody really needs

505
00:20:09,710 --> 00:20:11,960
something happen that's cool they can

506
00:20:11,960 --> 00:20:14,900
get at it but if not why I screw up

507
00:20:14,900 --> 00:20:15,260
their app

508
00:20:15,260 --> 00:20:16,820
location because your code expected

509
00:20:16,820 --> 00:20:17,870
something to be a certain way and it

510
00:20:17,870 --> 00:20:20,720
wasn't so if we just give developers

511
00:20:20,720 --> 00:20:23,060
access to what they weren't then that's

512
00:20:23,060 --> 00:20:24,940
that's kind of the way the GS works best

513
00:20:24,940 --> 00:20:28,960
and just a little bit more about errors

514
00:20:28,960 --> 00:20:31,220
errors become useless on production

515
00:20:31,220 --> 00:20:33,020
right like what what good is an error on

516
00:20:33,020 --> 00:20:35,300
production that your user sees not much

517
00:20:35,300 --> 00:20:36,770
I mean maybe it's good in development

518
00:20:36,770 --> 00:20:38,690
but um once you get it out to production

519
00:20:38,690 --> 00:20:43,010
it's valueless mostly though my problem

520
00:20:43,010 --> 00:20:45,290
with errors is they encourage us to to

521
00:20:45,290 --> 00:20:46,760
narrow the definition of what our code

522
00:20:46,760 --> 00:20:48,880
should do rather than expand it and

523
00:20:48,880 --> 00:20:51,020
that's not helpful that doesn't get us

524
00:20:51,020 --> 00:20:54,050
anywhere every area that we throw makes

525
00:20:54,050 --> 00:20:57,410
us feel the developers working in with

526
00:20:57,410 --> 00:21:00,260
our code feel less in touch with the

527
00:21:00,260 --> 00:21:01,370
code that they're actually working with

528
00:21:01,370 --> 00:21:03,230
it makes it less friendly it makes it

529
00:21:03,230 --> 00:21:05,990
less appealing and it it reduces its

530
00:21:05,990 --> 00:21:10,280
usability so again the Golden Rule your

531
00:21:10,280 --> 00:21:12,080
code needs to be a good improv partner

532
00:21:12,080 --> 00:21:15,170
um because if it's not then your code

533
00:21:15,170 --> 00:21:17,420
and the developer who's using it fail

534
00:21:17,420 --> 00:21:19,700
together and your codes always going to

535
00:21:19,700 --> 00:21:20,810
be built upon so even if you're not

536
00:21:20,810 --> 00:21:22,310
writing a library even if you're not

537
00:21:22,310 --> 00:21:23,990
writing a toolkit somebody's always

538
00:21:23,990 --> 00:21:25,220
going to come along and work with that

539
00:21:25,220 --> 00:21:27,710
code you should anticipate that because

540
00:21:27,710 --> 00:21:29,630
the alternative is did whatever code

541
00:21:29,630 --> 00:21:31,850
whatever website your code is on just

542
00:21:31,850 --> 00:21:34,370
gets scrapped and I mean that's that's

543
00:21:34,370 --> 00:21:37,850
no way to think so people will just do

544
00:21:37,850 --> 00:21:38,840
things with your code that you don't

545
00:21:38,840 --> 00:21:40,520
anticipate be the a large or small and

546
00:21:40,520 --> 00:21:43,030
the ideas that you want to try to

547
00:21:43,030 --> 00:21:46,700
account for that because JavaScript

548
00:21:46,700 --> 00:21:48,440
really wants to be empathetic like Tina

549
00:21:48,440 --> 00:21:51,800
Fey we already have these language

550
00:21:51,800 --> 00:21:54,770
features that that sort of encourage

551
00:21:54,770 --> 00:21:56,540
this we have we have these these

552
00:21:56,540 --> 00:21:59,210
function signatures that are not tightly

553
00:21:59,210 --> 00:22:01,580
defined we can we can sort of pass in

554
00:22:01,580 --> 00:22:02,750
whatever we want that's part of the

555
00:22:02,750 --> 00:22:04,340
language if we want to create an object

556
00:22:04,340 --> 00:22:05,960
state we want to create multiple objects

557
00:22:05,960 --> 00:22:08,810
states who want to clone object States

558
00:22:08,810 --> 00:22:11,450
we want to set properties to be to be

559
00:22:11,450 --> 00:22:13,730
transparent and changeable or we want to

560
00:22:13,730 --> 00:22:15,140
keep them private so nobody messes with

561
00:22:15,140 --> 00:22:17,390
them like that's all part of JavaScript

562
00:22:17,390 --> 00:22:18,980
we can we can just do that ad hoc and

563
00:22:18,980 --> 00:22:21,530
change whatever we want we don't need to

564
00:22:21,530 --> 00:22:24,080
say that some some code might create an

565
00:22:24,080 --> 00:22:26,060
error we don't need to give a heads up

566
00:22:26,060 --> 00:22:28,080
to the executing

567
00:22:28,080 --> 00:22:31,669
the the browser or whatever or node um

568
00:22:31,669 --> 00:22:34,950
we can just deal with those errors if

569
00:22:34,950 --> 00:22:36,840
they come up and hopefully they don't um

570
00:22:36,840 --> 00:22:40,019
and we have this blurred line between

571
00:22:40,019 --> 00:22:41,490
the people who are the users and the

572
00:22:41,490 --> 00:22:43,080
people who are the developers there

573
00:22:43,080 --> 00:22:47,250
they're probably more clothes than in

574
00:22:47,250 --> 00:22:48,690
any other in any other language I've

575
00:22:48,690 --> 00:22:51,360
ever worked with certainly um and that's

576
00:22:51,360 --> 00:22:52,919
important because that means that the

577
00:22:52,919 --> 00:22:54,600
way that people interact with javascript

578
00:22:54,600 --> 00:22:57,240
is I think a lot more the way that they

579
00:22:57,240 --> 00:22:58,590
interact with the web in general even

580
00:22:58,590 --> 00:23:00,570
when they're developing and you always

581
00:23:00,570 --> 00:23:04,139
kind of have that that picture of a user

582
00:23:04,139 --> 00:23:05,460
in your mind because you will at some

583
00:23:05,460 --> 00:23:07,889
point be a user I mean for instance how

584
00:23:07,889 --> 00:23:10,350
many people have who have developed with

585
00:23:10,350 --> 00:23:11,909
jquery have also used a website with

586
00:23:11,909 --> 00:23:13,830
jquery that they didn't create like i

587
00:23:13,830 --> 00:23:15,720
think probably everybody in this room

588
00:23:15,720 --> 00:23:17,279
who's ever touched jquery that would

589
00:23:17,279 --> 00:23:21,360
apply to in the future um it gets a

590
00:23:21,360 --> 00:23:23,700
little fuzzy because we have we have

591
00:23:23,700 --> 00:23:25,350
these new standards we have new

592
00:23:25,350 --> 00:23:27,779
languages that compile the JavaScript

593
00:23:27,779 --> 00:23:33,779
and they they try to maybe protect us

594
00:23:33,779 --> 00:23:35,639
from the dynamic nature of JavaScript

595
00:23:35,639 --> 00:23:38,340
and that's cool but um I think it's

596
00:23:38,340 --> 00:23:40,049
important to remember that you can write

597
00:23:40,049 --> 00:23:41,730
JavaScript in a language you went right

598
00:23:41,730 --> 00:23:43,260
out so if you want to write JavaScript

599
00:23:43,260 --> 00:23:44,370
that looks like Java you can actually

600
00:23:44,370 --> 00:23:46,139
just write Java and compile it down to

601
00:23:46,139 --> 00:23:49,679
JavaScript and you're done um with

602
00:23:49,679 --> 00:23:51,299
JavaScript we get unique opportunities

603
00:23:51,299 --> 00:23:54,720
we have we have there's value in the

604
00:23:54,720 --> 00:23:56,700
dynamic and fuzzy and messy nature of it

605
00:23:56,700 --> 00:23:58,830
because again it works very closely with

606
00:23:58,830 --> 00:24:02,370
the user and it's if other languages are

607
00:24:02,370 --> 00:24:04,200
drama it's more akin to comedy because

608
00:24:04,200 --> 00:24:08,880
it it works again in in a fuzzy ur way

609
00:24:08,880 --> 00:24:11,130
and it deals well with the types of inch

610
00:24:11,130 --> 00:24:13,889
uncertainty that we're often finding

611
00:24:13,889 --> 00:24:16,889
ourselves trying to model uncertainty

612
00:24:16,889 --> 00:24:19,169
it's kind of hard I'm not going to tell

613
00:24:19,169 --> 00:24:21,840
you that like this stuff is you know but

614
00:24:21,840 --> 00:24:23,549
you just go grab a framework and you're

615
00:24:23,549 --> 00:24:26,070
done right um it's difficult to

616
00:24:26,070 --> 00:24:27,570
encourage good coding practices if

617
00:24:27,570 --> 00:24:29,460
you're allowing like all kinds of

618
00:24:29,460 --> 00:24:31,769
arguments it's hard to do chaining if

619
00:24:31,769 --> 00:24:33,419
you don't know what exactly you're going

620
00:24:33,419 --> 00:24:35,750
to be passing into the next function um

621
00:24:35,750 --> 00:24:38,370
having these potentially limitless state

622
00:24:38,370 --> 00:24:39,779
hierarchies and like tons and tons of

623
00:24:39,779 --> 00:24:41,940
instances you don't really know what

624
00:24:41,940 --> 00:24:43,649
how they connect together or whose

625
00:24:43,649 --> 00:24:45,600
parent is whose or whatever like that's

626
00:24:45,600 --> 00:24:48,809
hard and of course moving on after you

627
00:24:48,809 --> 00:24:51,360
get an error after you you get an

628
00:24:51,360 --> 00:24:53,549
incorrect input like and still giving

629
00:24:53,549 --> 00:24:55,289
useful information and still keeping

630
00:24:55,289 --> 00:24:57,240
yourself in a useful state is is very

631
00:24:57,240 --> 00:24:58,799
challenging it doesn't mean it can't be

632
00:24:58,799 --> 00:25:03,480
done the trade-off of course is that we

633
00:25:03,480 --> 00:25:05,370
get code that's very very much decoupled

634
00:25:05,370 --> 00:25:08,039
um we get we get things that that don't

635
00:25:08,039 --> 00:25:09,570
have a dependency not only on each other

636
00:25:09,570 --> 00:25:14,100
but on any sort of API or on a very

637
00:25:14,100 --> 00:25:17,370
strict API and that allows us much

638
00:25:17,370 --> 00:25:19,529
greater potential because we can we can

639
00:25:19,529 --> 00:25:21,840
create things that that we didn't

640
00:25:21,840 --> 00:25:23,519
envision and we're building tools

641
00:25:23,519 --> 00:25:25,350
specifically to create things we didn't

642
00:25:25,350 --> 00:25:27,570
envision rather than just kind of hoping

643
00:25:27,570 --> 00:25:31,320
for happy accidents so in short we get

644
00:25:31,320 --> 00:25:33,059
empathetic systems the people can

645
00:25:33,059 --> 00:25:34,379
actually relate to because they're

646
00:25:34,379 --> 00:25:35,820
actually working with people rather than

647
00:25:35,820 --> 00:25:38,429
just telling them know when something

648
00:25:38,429 --> 00:25:42,200
happens that they didn't account for

649
00:25:42,200 --> 00:25:44,190
JavaScript basically wants to be

650
00:25:44,190 --> 00:25:48,690
hilarious um predictability is great but

651
00:25:48,690 --> 00:25:50,850
it we can do predictability everybody

652
00:25:50,850 --> 00:25:53,120
knows how to do predictability um

653
00:25:53,120 --> 00:25:56,009
legality like whether something's an

654
00:25:56,009 --> 00:25:58,139
appropriate argument or an appropriate

655
00:25:58,139 --> 00:26:01,799
output um again pouring we know how to

656
00:26:01,799 --> 00:26:03,059
do that we know how to work with that

657
00:26:03,059 --> 00:26:05,490
it's not challenging basically forcing

658
00:26:05,490 --> 00:26:07,590
other people other developers to conform

659
00:26:07,590 --> 00:26:10,320
to our expectations is not challenging

660
00:26:10,320 --> 00:26:11,730
it's not interesting and it doesn't move

661
00:26:11,730 --> 00:26:15,690
us forward um in JavaScript does this

662
00:26:15,690 --> 00:26:19,080
well it it it does the alternative very

663
00:26:19,080 --> 00:26:22,879
well and I think it works best that way

664
00:26:22,879 --> 00:26:33,320
thank

665
00:26:33,330 --> 00:26:35,950
we still a little time take some

666
00:26:35,950 --> 00:26:41,109
questions as anyone have Missy hands um

667
00:26:41,109 --> 00:26:43,179
can you think of any specific API is

668
00:26:43,179 --> 00:26:44,710
that you would emulate or that you would

669
00:26:44,710 --> 00:26:45,940
see that's Algeron get over something

670
00:26:45,940 --> 00:26:48,279
that I could look at and get an idea of

671
00:26:48,279 --> 00:26:49,869
you know someone that's using approaches

672
00:26:49,869 --> 00:26:51,669
like this to design I think that I think

673
00:26:51,669 --> 00:26:53,609
that jQuery does this really well um I

674
00:26:53,609 --> 00:26:57,570
like and as far as like node and like

675
00:26:57,570 --> 00:27:00,159
frameworks and stuff I don't I don't

676
00:27:00,159 --> 00:27:02,799
have a good answer um but I think that

677
00:27:02,799 --> 00:27:05,619
the way that jQuery has the way had its

678
00:27:05,619 --> 00:27:08,379
evolved to kind of like do this kind of

679
00:27:08,379 --> 00:27:10,299
stuff to be like we don't know what

680
00:27:10,299 --> 00:27:11,409
people are going to do with this so

681
00:27:11,409 --> 00:27:13,139
let's just try to cover all the bases is

682
00:27:13,139 --> 00:27:18,840
it a pretty good start yep mm-hmm

