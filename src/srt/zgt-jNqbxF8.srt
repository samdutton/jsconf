1
00:00:15,269 --> 00:00:19,710

hey everyone so I am here good to talk

2
00:00:19,710 --> 00:00:22,770
so the the title of this talk is called

3
00:00:22,770 --> 00:00:24,960
code collage which is sort of this kind

4
00:00:24,960 --> 00:00:27,710
of pretentious artsy thing cut but I

5
00:00:27,710 --> 00:00:30,180
mean what I really want to talk about is

6
00:00:30,180 --> 00:00:32,940
UNIX philosophy so this is one of my

7
00:00:32,940 --> 00:00:35,219
favorite philosophers it's Diogenes of

8
00:00:35,219 --> 00:00:39,090
Tonopah this guy's amazing but there

9
00:00:39,090 --> 00:00:42,329
really are these sort of um these higher

10
00:00:42,329 --> 00:00:44,850
level kind of platonic forms in code

11
00:00:44,850 --> 00:00:48,510
that I think are really amazing and so

12
00:00:48,510 --> 00:00:50,790
just a little bit this is the company

13
00:00:50,790 --> 00:00:53,880
that started browser lane whoops it's

14
00:00:53,880 --> 00:00:55,710
just like a cross browser testing site I

15
00:00:55,710 --> 00:00:57,630
mean mostly these days is just to

16
00:00:57,630 --> 00:01:01,110
subsidize my experiments but it's we do

17
00:01:01,110 --> 00:01:04,079
have a lot of great stuff planned so i

18
00:01:04,079 --> 00:01:06,479
was just a lisbon and and this guy max

19
00:01:06,479 --> 00:01:12,570
ogden gave people a fish it was really

20
00:01:12,570 --> 00:01:14,340
it was really excellent but it got me

21
00:01:14,340 --> 00:01:19,020
thinking yeah so max Ogden has this

22
00:01:19,020 --> 00:01:21,359
really cool website called call back

23
00:01:21,359 --> 00:01:24,749
he'll calm and I think it's a really

24
00:01:24,749 --> 00:01:27,329
great example to start this sort of this

25
00:01:27,329 --> 00:01:29,549
sort of discourse on what makes good

26
00:01:29,549 --> 00:01:32,520
code and what makes good art because

27
00:01:32,520 --> 00:01:34,020
there's there's a lot of similarity so

28
00:01:34,020 --> 00:01:36,719
for instance if we see some code like

29
00:01:36,719 --> 00:01:38,939
this right this is sort of the canonical

30
00:01:38,939 --> 00:01:40,319
i took this exactly from his website

31
00:01:40,319 --> 00:01:42,499
this is the canonical sort of um

32
00:01:42,499 --> 00:01:45,029
terrible callback hell where you just

33
00:01:45,029 --> 00:01:47,999
like have this this arrow pointing off

34
00:01:47,999 --> 00:01:50,909
to the right in the distance it's it's

35
00:01:50,909 --> 00:01:53,749
because we we take our state and we just

36
00:01:53,749 --> 00:01:56,789
nested and we keep nesting and we go all

37
00:01:56,789 --> 00:01:58,349
the way out and it's totally unreadable

38
00:01:58,349 --> 00:02:00,929
but so I wrote a piece of software that

39
00:02:00,929 --> 00:02:05,219
lets you take whoops take those and put

40
00:02:05,219 --> 00:02:07,499
them in a more of a graphical form so

41
00:02:07,499 --> 00:02:08,670
we're not really looking at the code

42
00:02:08,670 --> 00:02:10,740
anymore we're looking at sort of a

43
00:02:10,740 --> 00:02:12,720
graphical representation of avoided

44
00:02:12,720 --> 00:02:16,550
entails so for instance in this it this

45
00:02:16,550 --> 00:02:21,300
image viewer thingy gives each nested

46
00:02:21,300 --> 00:02:23,670
statement a new color so you see like

47
00:02:23,670 --> 00:02:25,500
the banding pattern and the more the

48
00:02:25,500 --> 00:02:27,330
more of the color you see the probably

49
00:02:27,330 --> 00:02:28,890
the worst the code is so it's

50
00:02:28,890 --> 00:02:30,569
it's a great way to sort of visualize a

51
00:02:30,569 --> 00:02:35,069
code base on a higher level and so if we

52
00:02:35,069 --> 00:02:36,780
go just to the rest of this stuff on

53
00:02:36,780 --> 00:02:38,250
call back hell I've got a nice little

54
00:02:38,250 --> 00:02:43,140
sequence here for that so here we can we

55
00:02:43,140 --> 00:02:47,250
can have a just a simple form and you

56
00:02:47,250 --> 00:02:48,959
know we can have this on submit thing

57
00:02:48,959 --> 00:02:50,490
that's kind of ugly because it's got you

58
00:02:50,490 --> 00:02:54,959
know these nested callbacks in it you

59
00:02:54,959 --> 00:02:56,520
can rewrite those so that you actually

60
00:02:56,520 --> 00:02:58,080
named your functions and then you can

61
00:02:58,080 --> 00:02:59,550
split them out which is really nice

62
00:02:59,550 --> 00:03:01,920
because you're you're being explicit but

63
00:03:01,920 --> 00:03:04,170
really the really beneficial thing about

64
00:03:04,170 --> 00:03:06,900
it is when you start doing modules so if

65
00:03:06,900 --> 00:03:08,910
we just could require a module we

66
00:03:08,910 --> 00:03:10,470
wouldn't have to do any of that we could

67
00:03:10,470 --> 00:03:12,000
sort of push it off to the side and just

68
00:03:12,000 --> 00:03:14,160
make a module that just does one thing

69
00:03:14,160 --> 00:03:15,390
and that's a really important thing in

70
00:03:15,390 --> 00:03:18,920
UNIX philosophy it's just do one thing

71
00:03:18,920 --> 00:03:21,570
ideally exactly one thing unless you

72
00:03:21,570 --> 00:03:25,430
can't for whatever external constraint

73
00:03:25,430 --> 00:03:29,070
but so you you have a module that looks

74
00:03:29,070 --> 00:03:31,110
like this and you like exports submit at

75
00:03:31,110 --> 00:03:32,820
the end there or you module that exports

76
00:03:32,820 --> 00:03:34,890
and it's really amazing like I've really

77
00:03:34,890 --> 00:03:36,750
fell in love with this pattern in node

78
00:03:36,750 --> 00:03:38,400
because it means that you can just do

79
00:03:38,400 --> 00:03:41,489
one thing really well and then you can

80
00:03:41,489 --> 00:03:44,370
share it on NPM and what's really cool

81
00:03:44,370 --> 00:03:48,060
also is that when you do that you start

82
00:03:48,060 --> 00:03:49,739
like this is the first one right we have

83
00:03:49,739 --> 00:03:51,450
we have some nesting we have this color

84
00:03:51,450 --> 00:03:53,970
pattern we can you know this is where we

85
00:03:53,970 --> 00:03:55,470
name it but that's just an incidental

86
00:03:55,470 --> 00:03:57,269
step to get to this point where it's all

87
00:03:57,269 --> 00:03:59,040
the same color because we're only ever

88
00:03:59,040 --> 00:04:03,360
going one indentation level deep but I

89
00:04:03,360 --> 00:04:04,980
think the most important thing also is

90
00:04:04,980 --> 00:04:07,200
that you know this none of these pieces

91
00:04:07,200 --> 00:04:09,120
are very big either it's you know it's

92
00:04:09,120 --> 00:04:11,790
15 20 lines tops and I think that that

93
00:04:11,790 --> 00:04:13,410
that is really the sweet spot you know

94
00:04:13,410 --> 00:04:15,540
maybe maybe all the way up to 100 lines

95
00:04:15,540 --> 00:04:18,180
but not much more than that for

96
00:04:18,180 --> 00:04:20,430
modularity and so here's here's both of

97
00:04:20,430 --> 00:04:22,169
the pieces of code as the final step so

98
00:04:22,169 --> 00:04:23,490
we can actually split things up into

99
00:04:23,490 --> 00:04:25,729
separate modules push them on NPM and

100
00:04:25,729 --> 00:04:27,720
it's really great because you go from

101
00:04:27,720 --> 00:04:32,789
this to this so we can get a little meta

102
00:04:32,789 --> 00:04:35,479
here and actually look at the code that

103
00:04:35,479 --> 00:04:40,410
generated this so the first thing as I

104
00:04:40,410 --> 00:04:42,870
was creating these examples as well I

105
00:04:42,870 --> 00:04:44,760
find myself doing this pattern where I

106
00:04:44,760 --> 00:04:46,860
where I call child prostitute spawn all

107
00:04:46,860 --> 00:04:49,260
over the place but I typically only want

108
00:04:49,260 --> 00:04:51,270
to check the exit status to see if it's

109
00:04:51,270 --> 00:04:54,420
if it's nonzero and if it is a nonzero

110
00:04:54,420 --> 00:04:56,820
then I want to just like make an error

111
00:04:56,820 --> 00:04:58,440
message and put all of the standard

112
00:04:58,440 --> 00:05:00,540
error into the error message that would

113
00:05:00,540 --> 00:05:02,040
be really handy so that is all of that

114
00:05:02,040 --> 00:05:04,260
this function does we can actually zoom

115
00:05:04,260 --> 00:05:05,730
out a bit to get more of like the higher

116
00:05:05,730 --> 00:05:09,030
level what it's doing it's very short

117
00:05:09,030 --> 00:05:11,820
it's let's see it's 47 lines total and

118
00:05:11,820 --> 00:05:16,530
so the next piece was well maybe I don't

119
00:05:16,530 --> 00:05:18,000
just want to see one piece of code

120
00:05:18,000 --> 00:05:21,450
rendered I want to see the entire get

121
00:05:21,450 --> 00:05:24,510
history rendered animated which i will

122
00:05:24,510 --> 00:05:26,880
go to in a second so here I've got the

123
00:05:26,880 --> 00:05:31,620
second this second module that just uses

124
00:05:31,620 --> 00:05:33,870
the git log command and and parses all

125
00:05:33,870 --> 00:05:37,950
of the commits and if I can't quite run

126
00:05:37,950 --> 00:05:41,490
that but well so when when all this

127
00:05:41,490 --> 00:05:44,340
module does it's one thing is that it

128
00:05:44,340 --> 00:05:46,590
just takes get log and it just gives you

129
00:05:46,590 --> 00:05:48,630
objects instead of like the standard get

130
00:05:48,630 --> 00:05:51,720
format it's very simple and the the

131
00:05:51,720 --> 00:05:55,740
final thing that I needed was a module

132
00:05:55,740 --> 00:05:57,150
to actually render the things with

133
00:05:57,150 --> 00:05:59,010
canvas this one is unfortunately the a

134
00:05:59,010 --> 00:06:00,960
bit long it's 108 lines but that's

135
00:06:00,960 --> 00:06:02,460
that's sort of the upper bound usually

136
00:06:02,460 --> 00:06:05,220
for most of the modules that i make you

137
00:06:05,220 --> 00:06:07,430
know it's so it uses a two modules

138
00:06:07,430 --> 00:06:10,590
canvas and which is by TJ Holloway chuck

139
00:06:10,590 --> 00:06:12,510
is just a wrapper in node for the native

140
00:06:12,510 --> 00:06:15,510
canvas browser API and falafel is just a

141
00:06:15,510 --> 00:06:17,310
small rapper i wrote around ass prima

142
00:06:17,310 --> 00:06:18,660
jeaious which is really great because it

143
00:06:18,660 --> 00:06:20,700
lets you take JavaScript parse the

144
00:06:20,700 --> 00:06:23,670
abstract syntax tree the ast so that you

145
00:06:23,670 --> 00:06:25,290
can get all the tokens and that's how i

146
00:06:25,290 --> 00:06:28,050
was doing them like having the different

147
00:06:28,050 --> 00:06:29,790
colors for the different bands in the

148
00:06:29,790 --> 00:06:34,950
code so the next piece is called get

149
00:06:34,950 --> 00:06:36,990
file there's this really excellent

150
00:06:36,990 --> 00:06:41,790
command and get called get show and all

151
00:06:41,790 --> 00:06:43,800
of all that this file does is it's a

152
00:06:43,800 --> 00:06:46,740
really simple wrapper around the get

153
00:06:46,740 --> 00:06:48,240
show command and all you do is you

154
00:06:48,240 --> 00:06:51,030
specify the commit reference so that

155
00:06:51,030 --> 00:06:52,620
could just be a commit hash a colon and

156
00:06:52,620 --> 00:06:55,080
the file name and that lets you like go

157
00:06:55,080 --> 00:06:56,310
back in time to any

158
00:06:56,310 --> 00:06:58,380
II the state of any file at any

159
00:06:58,380 --> 00:07:00,990
particular time so we can just have a

160
00:07:00,990 --> 00:07:03,600
really simple wrapper and combined with

161
00:07:03,600 --> 00:07:07,320
forget history we can see what any file

162
00:07:07,320 --> 00:07:09,720
looked at for the whole course of an

163
00:07:09,720 --> 00:07:11,850
entire program like how it evolved like

164
00:07:11,850 --> 00:07:13,440
what's its what's its back story

165
00:07:13,440 --> 00:07:16,320
basically but that's not quite enough we

166
00:07:16,320 --> 00:07:18,630
actually need a final piece to really

167
00:07:18,630 --> 00:07:19,920
tie it all together this one is called

168
00:07:19,920 --> 00:07:22,980
get detective and it analyzes the app it

169
00:07:22,980 --> 00:07:25,860
analyzes the the module dependency graph

170
00:07:25,860 --> 00:07:30,690
of a file in agate history so you can

171
00:07:30,690 --> 00:07:32,850
have this historical file and this

172
00:07:32,850 --> 00:07:35,370
program will will analyze the abstract

173
00:07:35,370 --> 00:07:37,830
syntax tree but it actually looks at the

174
00:07:37,830 --> 00:07:40,860
require graph so you require a file that

175
00:07:40,860 --> 00:07:42,720
file will also be included and it's and

176
00:07:42,720 --> 00:07:44,160
it's sub dependencies will be included

177
00:07:44,160 --> 00:07:46,680
that doesn't parse down to modules but

178
00:07:46,680 --> 00:07:48,450
it just looks at the files in a project

179
00:07:48,450 --> 00:07:50,910
which which I'll talk about a little bit

180
00:07:50,910 --> 00:07:52,470
but this one is not very long either

181
00:07:52,470 --> 00:07:57,540
it's well it's 114 lines and then once

182
00:07:57,540 --> 00:08:00,810
we have all of these pieces all that we

183
00:08:00,810 --> 00:08:04,290
need to do is turn the get the get

184
00:08:04,290 --> 00:08:05,850
detective data structure just with a

185
00:08:05,850 --> 00:08:10,080
really simple map into this piece then

186
00:08:10,080 --> 00:08:11,940
we can finally run this program so this

187
00:08:11,940 --> 00:08:13,320
is just the coloring logic and the

188
00:08:13,320 --> 00:08:15,750
program source now this is really cool

189
00:08:15,750 --> 00:08:19,020
right here we take the history and we

190
00:08:19,020 --> 00:08:23,380
pipe that to our detective grapher and

191
00:08:23,390 --> 00:08:26,220
then we can just create a right stream

192
00:08:26,220 --> 00:08:28,560
and write all of these files to disc so

193
00:08:28,560 --> 00:08:30,810
that is the entirety of this program 36

194
00:08:30,810 --> 00:08:41,820
lines and let's see so if i go here to

195
00:08:41,820 --> 00:08:43,710
this is the entire history of the

196
00:08:43,710 --> 00:08:45,630
browserify project so i'll give it a

197
00:08:45,630 --> 00:08:50,910
second to load yeah and so with with all

198
00:08:50,910 --> 00:08:53,070
of these tiny pieces were able to look

199
00:08:53,070 --> 00:08:56,160
at the entire history of a project this

200
00:08:56,160 --> 00:08:59,370
is all the get commits this is like 620

201
00:08:59,370 --> 00:09:02,070
odd commits the history of the project

202
00:09:02,070 --> 00:09:03,960
and here it a little bit you'll start to

203
00:09:03,960 --> 00:09:07,590
see several files there we go so this is

204
00:09:07,590 --> 00:09:09,360
like breaking things out into module and

205
00:09:09,360 --> 00:09:09,960
into

206
00:09:09,960 --> 00:09:11,940
separate files now you might notice one

207
00:09:11,940 --> 00:09:13,650
thing it's it's not continuously growing

208
00:09:13,650 --> 00:09:15,780
by any means like there's a lot of

209
00:09:15,780 --> 00:09:17,100
discontinuity there and that's where

210
00:09:17,100 --> 00:09:18,930
I've refactored things out in two

211
00:09:18,930 --> 00:09:21,600
separate very tiny pieces so like a

212
00:09:21,600 --> 00:09:24,120
detective which which I showed an

213
00:09:24,120 --> 00:09:26,400
example of using get with is is one of

214
00:09:26,400 --> 00:09:27,750
those discontinuities where it jumps

215
00:09:27,750 --> 00:09:32,220
back a step and so this is the history

216
00:09:32,220 --> 00:09:35,460
browserify I also did this for d node

217
00:09:35,460 --> 00:09:37,380
which is another one of my projects it's

218
00:09:37,380 --> 00:09:40,800
a basic RPC system and this one tells a

219
00:09:40,800 --> 00:09:43,080
similar story right it's it's the the

220
00:09:43,080 --> 00:09:45,690
basic layout you know but it's tends to

221
00:09:45,690 --> 00:09:48,330
be rather small right and and there are

222
00:09:48,330 --> 00:09:50,010
there discontinuities and sometimes it

223
00:09:50,010 --> 00:09:51,630
jumps up a bit and then it jumps back

224
00:09:51,630 --> 00:09:53,070
usually because I'll split that out into

225
00:09:53,070 --> 00:09:55,950
a separate module but one of one of the

226
00:09:55,950 --> 00:09:58,320
big lessons here I think that I've come

227
00:09:58,320 --> 00:10:01,260
across is it the best thing that can be

228
00:10:01,260 --> 00:10:04,650
said of any piece of software is that

229
00:10:04,650 --> 00:10:07,830
it's too small if people are complaining

230
00:10:07,830 --> 00:10:10,320
and I've had people complain at me about

231
00:10:10,320 --> 00:10:11,880
this very thing that your software is

232
00:10:11,880 --> 00:10:13,560
too small you're doing something very

233
00:10:13,560 --> 00:10:17,910
right like erring on the side of being

234
00:10:17,910 --> 00:10:22,920
too small is is really beneficial for a

235
00:10:22,920 --> 00:10:27,180
number of reasons so firstly um like

236
00:10:27,180 --> 00:10:29,400
project modules tend to grow over time

237
00:10:29,400 --> 00:10:32,460
software tends to get bigger and like

238
00:10:32,460 --> 00:10:34,260
especially with you know edge cases and

239
00:10:34,260 --> 00:10:36,170
things but if you start at the small

240
00:10:36,170 --> 00:10:39,170
then you'll have room for that later

241
00:10:39,170 --> 00:10:41,610
also it makes things a lot more reusable

242
00:10:41,610 --> 00:10:46,470
and n modular so speaking of modularity

243
00:10:46,470 --> 00:10:51,210
I have some examples here that I think

244
00:10:51,210 --> 00:10:52,650
really demonstrate this in really

245
00:10:52,650 --> 00:10:55,650
practical terms about exactly how we can

246
00:10:55,650 --> 00:10:57,450
start using these little pieces to build

247
00:10:57,450 --> 00:10:58,800
systems that actually do quite

248
00:10:58,800 --> 00:11:02,790
sophisticated things which should be

249
00:11:02,790 --> 00:11:06,900
really amazing so uh the first thing oh

250
00:11:06,900 --> 00:11:08,220
and I have pictures for some of this

251
00:11:08,220 --> 00:11:11,550
besides the max Ogden fish which is

252
00:11:11,550 --> 00:11:16,710
great yeah it's it's all about technical

253
00:11:16,710 --> 00:11:18,120
debt ok here's the image that I wanted

254
00:11:18,120 --> 00:11:19,950
to show so the first module is just this

255
00:11:19,950 --> 00:11:22,170
silly thing that the atom is an event

256
00:11:22,170 --> 00:11:23,310
emitter

257
00:11:23,310 --> 00:11:24,779
the little box with the conveyor belt is

258
00:11:24,779 --> 00:11:26,340
a readable stream and all it does is it

259
00:11:26,340 --> 00:11:28,830
changes like it gives you the opposite

260
00:11:28,830 --> 00:11:30,300
that you gave into it so if you give it

261
00:11:30,300 --> 00:11:31,440
an event emitter you get a readable

262
00:11:31,440 --> 00:11:32,730
stream if you give it a readable stream

263
00:11:32,730 --> 00:11:34,170
you get an event emitter really simple

264
00:11:34,170 --> 00:11:36,630
stuff that is the only thing that it

265
00:11:36,630 --> 00:11:39,900
does and it's a module so we can start

266
00:11:39,900 --> 00:11:44,010
using these reusable modules and you

267
00:11:44,010 --> 00:11:45,420
know all we need to do is we create a

268
00:11:45,420 --> 00:11:49,140
new event emitter and we give that we

269
00:11:49,140 --> 00:11:50,820
give that a vent emitter to emit stream

270
00:11:50,820 --> 00:11:54,690
and then we get back just a stream that

271
00:11:54,690 --> 00:11:57,779
we can listen for data on so here we'll

272
00:11:57,779 --> 00:12:03,540
just omit some data beep boop and we can

273
00:12:03,540 --> 00:12:05,790
we can then use another module called

274
00:12:05,790 --> 00:12:08,130
JSON stream to actually type that

275
00:12:08,130 --> 00:12:10,110
somewhere so we'll pipe it to the string

276
00:12:10,110 --> 00:12:12,360
of five stream pipe is really amazing it

277
00:12:12,360 --> 00:12:14,820
lets us really compose together things

278
00:12:14,820 --> 00:12:20,760
in a in a super excellent way so let's

279
00:12:20,760 --> 00:12:27,570
see this one is 05 so yes here we've

280
00:12:27,570 --> 00:12:30,089
just got data that's continuously being

281
00:12:30,089 --> 00:12:33,060
output by this program um but what's

282
00:12:33,060 --> 00:12:39,540
really cool whoops is that we can we can

283
00:12:39,540 --> 00:12:42,870
start piping it to places like process

284
00:12:42,870 --> 00:12:44,280
gender it out for instance but the

285
00:12:44,280 --> 00:12:45,690
really cool thing about about these

286
00:12:45,690 --> 00:12:48,089
these modules that just use really

287
00:12:48,089 --> 00:12:50,940
simple interfaces like streams is that

288
00:12:50,940 --> 00:12:52,980
we can make servers simple servers that

289
00:12:52,980 --> 00:12:55,260
just talk on the network so here just

290
00:12:55,260 --> 00:12:57,510
with like what three extra lines we've

291
00:12:57,510 --> 00:12:59,790
now made this simple streaming interface

292
00:12:59,790 --> 00:13:03,720
a TCP server so if we run that then with

293
00:13:03,720 --> 00:13:06,060
curl we can actually are that cat I

294
00:13:06,060 --> 00:13:09,630
guess we can connect on a port and cool

295
00:13:09,630 --> 00:13:11,160
we get the same data that we got on

296
00:13:11,160 --> 00:13:13,190
standard out I think that's a really

297
00:13:13,190 --> 00:13:15,600
really compelling reason to use these

298
00:13:15,600 --> 00:13:19,890
these different interfaces so a

299
00:13:19,890 --> 00:13:23,270
midstream is really great because you

300
00:13:23,270 --> 00:13:25,770
can use these streaming abstractions

301
00:13:25,770 --> 00:13:28,529
like like Hyrum will actually just be

302
00:13:28,529 --> 00:13:32,640
listening for events now so this this

303
00:13:32,640 --> 00:13:34,440
server connects to itself just to

304
00:13:34,440 --> 00:13:36,300
demonstrate how you can really compose

305
00:13:36,300 --> 00:13:37,160
these together so

306
00:13:37,160 --> 00:13:43,220
is example 10 make that big ah cool so

307
00:13:43,220 --> 00:13:45,079
this this server just connected to

308
00:13:45,079 --> 00:13:47,300
itself and it's now parsing the data but

309
00:13:47,300 --> 00:13:49,250
in a streaming way so for instance if

310
00:13:49,250 --> 00:13:51,339
you only use things like json.parse

311
00:13:51,339 --> 00:13:54,829
you'd have to like make a line a new

312
00:13:54,829 --> 00:13:56,360
line terminated protocol departs things

313
00:13:56,360 --> 00:13:58,699
or something silly but we can do a

314
00:13:58,699 --> 00:13:59,750
little bit better with streaming

315
00:13:59,750 --> 00:14:02,990
abstractions like this so the next thing

316
00:14:02,990 --> 00:14:05,000
I haven't in mind that was kind of

317
00:14:05,000 --> 00:14:07,160
boring I think but this thing actually

318
00:14:07,160 --> 00:14:11,149
is rather practical so let's make our

319
00:14:11,149 --> 00:14:13,699
own socket i/o why not right because you

320
00:14:13,699 --> 00:14:15,709
know maybe we don't need all of the

321
00:14:15,709 --> 00:14:17,420
opinions that something as big as socket

322
00:14:17,420 --> 00:14:19,579
i/o hasn't stored for us we need like

323
00:14:19,579 --> 00:14:21,500
separate reconnect logic we want to

324
00:14:21,500 --> 00:14:23,689
actually turn off the debugging which is

325
00:14:23,689 --> 00:14:25,490
sort of annoying sometimes in a

326
00:14:25,490 --> 00:14:27,139
different way or we just really want to

327
00:14:27,139 --> 00:14:29,240
layer our abstractions so we can totally

328
00:14:29,240 --> 00:14:31,730
do that using using these really simple

329
00:14:31,730 --> 00:14:34,550
modules that only do one thing so here

330
00:14:34,550 --> 00:14:36,889
we just create an HTTP server and just

331
00:14:36,889 --> 00:14:39,399
like have it serves some static content

332
00:14:39,399 --> 00:14:41,839
we can use this module called shoe which

333
00:14:41,839 --> 00:14:43,519
is just a very simple streaming wrapper

334
00:14:43,519 --> 00:14:45,529
on top of socks yes it's like 30 lines

335
00:14:45,529 --> 00:14:48,709
it's really great and the cool thing

336
00:14:48,709 --> 00:14:51,050
about shoe is when you create a server

337
00:14:51,050 --> 00:14:53,199
all you get is a stream there's no like

338
00:14:53,199 --> 00:14:55,490
special interface on top of that that's

339
00:14:55,490 --> 00:14:57,439
that's additional it's just a really

340
00:14:57,439 --> 00:14:59,360
simple thing and you just hack it into

341
00:14:59,360 --> 00:15:00,980
your server with like a couple of extra

342
00:15:00,980 --> 00:15:04,459
lines so here with this example we'll

343
00:15:04,459 --> 00:15:09,620
just right we'll write some output will

344
00:15:09,620 --> 00:15:13,370
write a string and to UM the the browser

345
00:15:13,370 --> 00:15:16,579
stream so this this is a WebSocket

346
00:15:16,579 --> 00:15:18,589
polyfill socks jss sort of said so the

347
00:15:18,589 --> 00:15:20,389
browser side of this is similarly simple

348
00:15:20,389 --> 00:15:22,069
it's actually even simpler because all

349
00:15:22,069 --> 00:15:24,649
you do is with a module system like

350
00:15:24,649 --> 00:15:26,389
browserify you can just do require shoe

351
00:15:26,389 --> 00:15:30,050
and then all you get is a stream this is

352
00:15:30,050 --> 00:15:31,519
really amazing like you just get a

353
00:15:31,519 --> 00:15:33,800
stream and you can do whatever you want

354
00:15:33,800 --> 00:15:35,059
with that like listen for data events

355
00:15:35,059 --> 00:15:38,149
and render the text content so if we run

356
00:15:38,149 --> 00:15:43,490
this server should be on localhost 8050

357
00:15:43,490 --> 00:15:47,630
and i have to make it big okay the first

358
00:15:47,630 --> 00:15:48,960
one

359
00:15:48,960 --> 00:15:52,380
sweet so zeros and ones we're getting

360
00:15:52,380 --> 00:15:53,970
data back that's cool it's it's doing

361
00:15:53,970 --> 00:15:55,440
exactly what it should and its really

362
00:15:55,440 --> 00:15:57,990
really more amazing than that is that we

363
00:15:57,990 --> 00:16:00,630
can extend this example so here's the

364
00:16:00,630 --> 00:16:05,160
server again and now let's see now

365
00:16:05,160 --> 00:16:08,310
instead of just writing data directly we

366
00:16:08,310 --> 00:16:10,620
can use that a midstream abstraction

367
00:16:10,620 --> 00:16:13,620
that I just talked about so so here

368
00:16:13,620 --> 00:16:14,910
instead of streamed out right we'll do

369
00:16:14,910 --> 00:16:17,730
EV Dunham it upper and that can just be

370
00:16:17,730 --> 00:16:21,480
an event and so the thing about these

371
00:16:21,480 --> 00:16:23,820
abstractions is you need to you have

372
00:16:23,820 --> 00:16:25,860
control over the serialization part of

373
00:16:25,860 --> 00:16:27,270
it yourself you're not you're not

374
00:16:27,270 --> 00:16:29,040
letting another library do that for you

375
00:16:29,040 --> 00:16:30,480
but it's really easy to plumb in

376
00:16:30,480 --> 00:16:32,910
different kinds of abstractions so here

377
00:16:32,910 --> 00:16:34,260
we'll use JSON stream but you could use

378
00:16:34,260 --> 00:16:35,880
other other modules like stream

379
00:16:35,880 --> 00:16:37,170
sterilizer or you could write your own

380
00:16:37,170 --> 00:16:38,760
it's it's really great because you have

381
00:16:38,760 --> 00:16:41,070
all of that control and all you need to

382
00:16:41,070 --> 00:16:42,750
do is we'll take this Amit stream

383
00:16:42,750 --> 00:16:44,490
abstraction it will pipe it to a

384
00:16:44,490 --> 00:16:46,710
serialization library that just does

385
00:16:46,710 --> 00:16:50,520
that one thing that's very important so

386
00:16:50,520 --> 00:16:52,380
we do all these things we pipe it toward

387
00:16:52,380 --> 00:16:53,940
our string of fire we pipe it to the

388
00:16:53,940 --> 00:16:58,020
stream and then we should just be able

389
00:16:58,020 --> 00:16:59,880
to run this so here I've just got some

390
00:16:59,880 --> 00:17:04,650
intervals that that emit to events so if

391
00:17:04,650 --> 00:17:08,339
I do run to jas we'll go to the second

392
00:17:08,339 --> 00:17:12,300
example cool so now instead of just

393
00:17:12,300 --> 00:17:14,820
outputting Gator directly we can output

394
00:17:14,820 --> 00:17:16,980
data through an event emitter which is

395
00:17:16,980 --> 00:17:24,760
great but it gets better because whoops

396
00:17:24,770 --> 00:17:28,410
because we can use even crazier

397
00:17:28,410 --> 00:17:30,300
abstractions that just do their one

398
00:17:30,300 --> 00:17:32,220
thing like for instance there's this

399
00:17:32,220 --> 00:17:34,020
concept called multiplexing and

400
00:17:34,020 --> 00:17:36,920
demultiplexing where you can take

401
00:17:36,920 --> 00:17:39,360
multiple streams and pack them into a

402
00:17:39,360 --> 00:17:41,610
single stream like this is really great

403
00:17:41,610 --> 00:17:43,590
in the browser where you only have like

404
00:17:43,590 --> 00:17:46,470
a WebSocket connection and you you want

405
00:17:46,470 --> 00:17:49,470
to be able to layer multiple kinds of

406
00:17:49,470 --> 00:17:51,540
abstractions into that single WebSocket

407
00:17:51,540 --> 00:17:54,180
connection so there's this really great

408
00:17:54,180 --> 00:17:55,740
library by Dominic tar called

409
00:17:55,740 --> 00:17:57,330
muckety-mucks that that handles this

410
00:17:57,330 --> 00:18:00,900
really well so much deluxe is really

411
00:18:00,900 --> 00:18:02,350
simple to use you just require

412
00:18:02,350 --> 00:18:04,660
academics in the browser or the server

413
00:18:04,660 --> 00:18:06,460
it doesn't really matter so much so long

414
00:18:06,460 --> 00:18:07,660
as you use browser and fire something

415
00:18:07,660 --> 00:18:09,760
that does is that like that I should say

416
00:18:09,760 --> 00:18:13,390
and you can create a writable streams or

417
00:18:13,390 --> 00:18:16,360
readable streams or through streams or

418
00:18:16,360 --> 00:18:18,160
duplex dreams whatever you like readable

419
00:18:18,160 --> 00:18:21,250
or writable or both and we can so for

420
00:18:21,250 --> 00:18:23,260
instance this is just a server example

421
00:18:23,260 --> 00:18:25,630
and here we've got our multiple data

422
00:18:25,630 --> 00:18:28,900
channels and we'll just pipe from this

423
00:18:28,900 --> 00:18:30,789
giant dictionary file I have my computer

424
00:18:30,789 --> 00:18:33,669
and we'll we'll cut out etsy password

425
00:18:33,669 --> 00:18:38,500
also just for fun don't worry that that

426
00:18:38,500 --> 00:18:41,380
hasn't been a problem for like hundreds

427
00:18:41,380 --> 00:18:45,039
of years whoops by which I mean like 20

428
00:18:45,039 --> 00:18:49,690
years and so all we have to do this is a

429
00:18:49,690 --> 00:18:54,010
network example that's why this 13 so we

430
00:18:54,010 --> 00:18:56,919
do this and oh no I don't even have that

431
00:18:56,919 --> 00:18:58,480
in the local directory well anyways it

432
00:18:58,480 --> 00:19:00,730
in multiplexes the the stream into a

433
00:19:00,730 --> 00:19:02,679
single stream in this case process that

434
00:19:02,679 --> 00:19:05,260
standard out what's really cool is

435
00:19:05,260 --> 00:19:07,990
because it is just a stream we can use

436
00:19:07,990 --> 00:19:10,299
this over a server connection which will

437
00:19:10,299 --> 00:19:12,370
be important in a minute I'm building to

438
00:19:12,370 --> 00:19:17,370
something here so we we can pipe our

439
00:19:17,370 --> 00:19:20,830
server just by doing that instead of

440
00:19:20,830 --> 00:19:22,299
processed us to enter it out we pipe to

441
00:19:22,299 --> 00:19:27,190
a server cool and we can give our

442
00:19:27,190 --> 00:19:29,440
streams names so like in socket i/o for

443
00:19:29,440 --> 00:19:31,390
instance you might know the the the

444
00:19:31,390 --> 00:19:33,520
event names you can create like

445
00:19:33,520 --> 00:19:34,990
different channels and things but it's

446
00:19:34,990 --> 00:19:37,990
sort of like added on and it's it's you

447
00:19:37,990 --> 00:19:40,000
have to really buy into that ecosystem

448
00:19:40,000 --> 00:19:43,030
of architecture but with with tools like

449
00:19:43,030 --> 00:19:46,690
this you can really just as long as you

450
00:19:46,690 --> 00:19:49,150
have a stream in the first place layer

451
00:19:49,150 --> 00:19:51,159
on additional connection additional

452
00:19:51,159 --> 00:19:54,610
abstractions so and what's really cool

453
00:19:54,610 --> 00:19:58,030
is the code we can write is just really

454
00:19:58,030 --> 00:20:03,580
not very complicated also so I was

455
00:20:03,580 --> 00:20:05,110
thinking about what my last example

456
00:20:05,110 --> 00:20:07,299
would be and it turns out yesterday I

457
00:20:07,299 --> 00:20:09,100
was at this amazing thing called node

458
00:20:09,100 --> 00:20:11,669
copter and it's really great because I

459
00:20:11,669 --> 00:20:14,380
was without even thinking about it using

460
00:20:14,380 --> 00:20:15,879
a lot of the same as

461
00:20:15,879 --> 00:20:17,469
shins that I've just been talking about

462
00:20:17,469 --> 00:20:25,009
so let's write whoops let's write a

463
00:20:25,019 --> 00:20:28,889
helicopter control system that will

464
00:20:28,889 --> 00:20:32,139
connect that will um also be a website

465
00:20:32,139 --> 00:20:35,079
that we can view image data on and it

466
00:20:35,079 --> 00:20:36,789
will do color detection so the first

467
00:20:36,789 --> 00:20:38,139
part the color detection is actually

468
00:20:38,139 --> 00:20:40,779
really easy and we can just do this as a

469
00:20:40,779 --> 00:20:42,309
simple module that just does one thing

470
00:20:42,309 --> 00:20:43,989
so let's do that so the first thing is

471
00:20:43,989 --> 00:20:45,699
we can use node on the server with the

472
00:20:45,699 --> 00:20:50,229
canvas to to just get the pixels in the

473
00:20:50,229 --> 00:20:52,899
first place so we'll pass the width and

474
00:20:52,899 --> 00:20:55,869
the height and a buffer of image data to

475
00:20:55,869 --> 00:20:58,329
this and it will will draw it for us

476
00:20:58,329 --> 00:21:02,019
cool so you can get the array well it's

477
00:21:02,019 --> 00:21:03,309
not quite an array but it's like a data

478
00:21:03,309 --> 00:21:05,259
array of all of the things that you need

479
00:21:05,259 --> 00:21:08,769
for it and this is the simplest possible

480
00:21:08,769 --> 00:21:11,019
algorithm that could work for detecting

481
00:21:11,019 --> 00:21:12,879
color red for instance like a Matadors

482
00:21:12,879 --> 00:21:15,039
cape it's it's red and our helicopter

483
00:21:15,039 --> 00:21:17,829
can detect colors but all we have to do

484
00:21:17,829 --> 00:21:19,539
is actually just sum up all of the

485
00:21:19,539 --> 00:21:22,719
colors in the image there we go and the

486
00:21:22,719 --> 00:21:24,009
easiest way to do that I think is to

487
00:21:24,009 --> 00:21:25,929
convert to hsl first so you take the RGB

488
00:21:25,929 --> 00:21:27,549
pixels you can first them down to two

489
00:21:27,549 --> 00:21:29,679
hsl and you get the hue in the

490
00:21:29,679 --> 00:21:32,229
saturation in the luminosity and with

491
00:21:32,229 --> 00:21:34,149
that we can just write a silly little

492
00:21:34,149 --> 00:21:37,509
function that that detects the ranges of

493
00:21:37,509 --> 00:21:38,949
the colors so the hues within a certain

494
00:21:38,949 --> 00:21:41,919
value and the saturation has to be you

495
00:21:41,919 --> 00:21:44,019
know so high over 30 will say and then

496
00:21:44,019 --> 00:21:45,940
the luminosity you know it has to be it

497
00:21:45,940 --> 00:21:47,499
can't be too dark and it can't be too

498
00:21:47,499 --> 00:21:50,649
light so let's count those and that'll

499
00:21:50,649 --> 00:21:52,029
be a threshold so that's all we need to

500
00:21:52,029 --> 00:21:53,799
do color detection the really cool thing

501
00:21:53,799 --> 00:21:56,259
is got this working like 10 minutes with

502
00:21:56,259 --> 00:21:58,869
training data so here I'll just run the

503
00:21:58,869 --> 00:22:02,859
training set so those it those values

504
00:22:02,859 --> 00:22:05,829
are false true true false and here I'll

505
00:22:05,829 --> 00:22:10,690
show you the images so that one should

506
00:22:10,690 --> 00:22:13,959
be false true because it's got red in it

507
00:22:13,959 --> 00:22:17,199
true and false because it has red but

508
00:22:17,199 --> 00:22:23,350
not enough so that part was easy

509
00:22:23,360 --> 00:22:27,410
the next part is is a bit harder so this

510
00:22:27,410 --> 00:22:28,940
is just the the training example right

511
00:22:28,940 --> 00:22:31,400
it's just like not very much code and

512
00:22:31,400 --> 00:22:33,110
we're just layering these abstractions

513
00:22:33,110 --> 00:22:35,510
on each other so nothing is ever very

514
00:22:35,510 --> 00:22:40,429
much code what's cool about this is well

515
00:22:40,429 --> 00:22:44,140
first we can make an HTTP server now and

516
00:22:44,140 --> 00:22:47,660
let's see you know just serve up some

517
00:22:47,660 --> 00:22:49,820
static files and we can use shoe to just

518
00:22:49,820 --> 00:22:53,900
create a stream and we can fill this in

519
00:22:53,900 --> 00:22:55,970
with machst du machst du är multiplexing

520
00:22:55,970 --> 00:22:57,620
so we'll need a few different types of

521
00:22:57,620 --> 00:22:59,900
data going over our communication

522
00:22:59,900 --> 00:23:02,750
channel so here we're just setting up

523
00:23:02,750 --> 00:23:04,100
with the this called the duplex stream

524
00:23:04,100 --> 00:23:06,470
that's where you take a stream and pipe

525
00:23:06,470 --> 00:23:08,450
it to another remote thing and then pipe

526
00:23:08,450 --> 00:23:12,040
the results back into your abstraction

527
00:23:12,040 --> 00:23:15,860
but we can use that omit the midstream

528
00:23:15,860 --> 00:23:17,000
abstraction that I was talking about

529
00:23:17,000 --> 00:23:19,730
earlier to make an event emitter API and

530
00:23:19,730 --> 00:23:22,880
so this is kind of nice because the

531
00:23:22,880 --> 00:23:28,090
ar.drone stuff that Felix wrote lets us

532
00:23:28,090 --> 00:23:30,799
let's see as soon as we um hook up all

533
00:23:30,799 --> 00:23:34,130
of the plumbing for the amit stream yeah

534
00:23:34,130 --> 00:23:35,929
here we go we can take the ar.drone and

535
00:23:35,929 --> 00:23:37,520
we can actually well disable the

536
00:23:37,520 --> 00:23:40,100
emergency functionality first of all of

537
00:23:40,100 --> 00:23:44,120
course and we can actually just create a

538
00:23:44,120 --> 00:23:47,240
PNG stream and get PNG's out and then we

539
00:23:47,240 --> 00:23:49,040
can use our other abstraction to

540
00:23:49,040 --> 00:23:51,530
actually pipe here we go here's our

541
00:23:51,530 --> 00:23:53,510
detect algorithm and we'll pipe each of

542
00:23:53,510 --> 00:23:55,460
the PNG images as they arrive into our

543
00:23:55,460 --> 00:23:57,710
detection then we can do all kinds of

544
00:23:57,710 --> 00:24:00,830
crazy stuff like um let's see what

545
00:24:00,830 --> 00:24:04,700
should we do like I don't know well we

546
00:24:04,700 --> 00:24:06,110
can omit some events to the browser can

547
00:24:06,110 --> 00:24:09,679
read them but we can also zoom forward

548
00:24:09,679 --> 00:24:13,730
at full speed and blink the LEDs how

549
00:24:13,730 --> 00:24:15,140
about that'll be that'll be pretty fun

550
00:24:15,140 --> 00:24:18,890
so yeah and then we'll turn them off

551
00:24:18,890 --> 00:24:20,450
again after a second because we don't

552
00:24:20,450 --> 00:24:23,150
want it to like crash into whatever like

553
00:24:23,150 --> 00:24:25,460
a wall or a person or a table or some

554
00:24:25,460 --> 00:24:29,809
drinks or whatever so in the browser

555
00:24:29,809 --> 00:24:34,730
though and here why don't I connect make

556
00:24:34,730 --> 00:24:36,570
sure that I can actually connect to this

557
00:24:36,570 --> 00:24:40,200
Oh excellent ok so the browser side of

558
00:24:40,200 --> 00:24:41,460
this is not complicated either and

559
00:24:41,460 --> 00:24:42,809
what's really cool is because all of

560
00:24:42,809 --> 00:24:45,149
these streaming modules just do their

561
00:24:45,149 --> 00:24:47,009
one thing and do it well we can just use

562
00:24:47,009 --> 00:24:49,380
a browser if I to make all of this code

563
00:24:49,380 --> 00:24:51,149
work in the browser with the same

564
00:24:51,149 --> 00:24:53,870
libraries which is really excellent so

565
00:24:53,870 --> 00:24:57,240
we can use shoe and emit stream and

566
00:24:57,240 --> 00:24:58,649
muckety-mucks in our browser code just

567
00:24:58,649 --> 00:25:01,500
like we we do in the server and just to

568
00:25:01,500 --> 00:25:04,019
show you like we're actually in the

569
00:25:04,019 --> 00:25:05,880
browser this isn't this isn't node here

570
00:25:05,880 --> 00:25:07,919
we're doing query selectors and things

571
00:25:07,919 --> 00:25:10,139
and and I here I've got a cross hairs

572
00:25:10,139 --> 00:25:12,629
image so we can superimpose that on the

573
00:25:12,629 --> 00:25:16,110
actual webcam data it's really cool if

574
00:25:16,110 --> 00:25:20,220
it works and we're so on on the server

575
00:25:20,220 --> 00:25:22,200
side it's actually emitting an image

576
00:25:22,200 --> 00:25:24,990
event that gives us the entire buffer

577
00:25:24,990 --> 00:25:27,210
and converts it to base64 and we can

578
00:25:27,210 --> 00:25:29,610
just throw that in the image which is is

579
00:25:29,610 --> 00:25:31,230
pretty fun and here's the the part that

580
00:25:31,230 --> 00:25:34,200
does the crosshairs so once we have all

581
00:25:34,200 --> 00:25:37,110
of those things in place all you have to

582
00:25:37,110 --> 00:25:40,139
do is just hook up the plumbing right

583
00:25:40,139 --> 00:25:41,850
because it's just a really simple

584
00:25:41,850 --> 00:25:44,730
abstraction so this whole thing is not

585
00:25:44,730 --> 00:25:49,860
very complicated and but suppose later

586
00:25:49,860 --> 00:25:54,179
that we actually want to want to drive

587
00:25:54,179 --> 00:25:57,000
it right because like it shouldn't just

588
00:25:57,000 --> 00:25:59,940
be totally autonomous because that

589
00:25:59,940 --> 00:26:01,590
that's hard algorithm and it's not quite

590
00:26:01,590 --> 00:26:05,220
as interesting so the really cool thing

591
00:26:05,220 --> 00:26:07,620
about streaming abstractions and modules

592
00:26:07,620 --> 00:26:08,940
that just do their one thing really well

593
00:26:08,940 --> 00:26:14,610
is that we can hook them up whoops all

594
00:26:14,610 --> 00:26:15,990
right this is the browser code yeah we

595
00:26:15,990 --> 00:26:18,419
can hook up streaming abstractions like

596
00:26:18,419 --> 00:26:21,539
Dino to do our PC for our our crazy

597
00:26:21,539 --> 00:26:23,700
robot example here so will require d

598
00:26:23,700 --> 00:26:27,929
node and just a hook denote into our

599
00:26:27,929 --> 00:26:29,909
plumbing first of all with um some pipes

600
00:26:29,909 --> 00:26:36,000
and can list out all of the methods that

601
00:26:36,000 --> 00:26:38,610
we need to UM to proxy in into the the

602
00:26:38,610 --> 00:26:43,259
air drone API and then it's just a

603
00:26:43,259 --> 00:26:48,000
matter of let's see oh yeah then it's

604
00:26:48,000 --> 00:26:49,919
just a matter of um well doing a little

605
00:26:49,919 --> 00:26:50,460
hacky thing

606
00:26:50,460 --> 00:26:51,840
because they're on the prototype instead

607
00:26:51,840 --> 00:26:54,450
of object object you can get with object

608
00:26:54,450 --> 00:26:56,040
keys but we can just plug that into our

609
00:26:56,040 --> 00:26:57,810
machinery over muckety-mucks and now we

610
00:26:57,810 --> 00:27:00,300
have our event or a midstream event

611
00:27:00,300 --> 00:27:01,830
emitter abstraction we have our Dino

612
00:27:01,830 --> 00:27:03,690
distraction for doing our PC so we've

613
00:27:03,690 --> 00:27:04,980
got both of these things in there and

614
00:27:04,980 --> 00:27:07,890
they just layer on each other really

615
00:27:07,890 --> 00:27:13,140
well so let's see there's more browser

616
00:27:13,140 --> 00:27:15,030
stuff that's not important at all oh

617
00:27:15,030 --> 00:27:16,740
yeah and we just hook it in it's it's

618
00:27:16,740 --> 00:27:20,400
pretty easy stuff so that is it and now

619
00:27:20,400 --> 00:27:25,020
oh yeah it's on here it is here's the

620
00:27:25,020 --> 00:27:29,310
real one ok so we're connected and we

621
00:27:29,310 --> 00:27:34,890
can go to this web page it just uses all

622
00:27:34,890 --> 00:27:36,300
these streaming distractions and we have

623
00:27:36,300 --> 00:27:38,670
a video feed and everything make it a

624
00:27:38,670 --> 00:27:42,030
bit bigger so the thing I didn't show is

625
00:27:42,030 --> 00:27:43,530
the keyboard controls but that's just

626
00:27:43,530 --> 00:27:46,350
like a 20 line script and so I just took

627
00:27:46,350 --> 00:27:47,790
I just hit a button that does the

628
00:27:47,790 --> 00:27:49,260
takeoff command and you guys should be

629
00:27:49,260 --> 00:27:51,570
able to see the video stream here so

630
00:27:51,570 --> 00:27:55,410
I'll go forward a bit slowly go up a

631
00:27:55,410 --> 00:27:58,860
little so remember that image detection

632
00:27:58,860 --> 00:28:04,950
stuff right Dominic if you would hear

633
00:28:04,950 --> 00:28:06,510
Dominic as some red oh it's

634
00:28:06,510 --> 00:28:15,039
targeting

635
00:28:15,049 --> 00:28:21,649
whoa no okay sorry guys ok so here we're

636
00:28:21,649 --> 00:28:25,999
getting close again and uh let's see if

637
00:28:25,999 --> 00:28:29,389
enough pixels whoa do we have enough

638
00:28:29,389 --> 00:28:50,930
pixels no

639
00:28:50,940 --> 00:28:55,509
and so with a little bit of UNIX

640
00:28:55,509 --> 00:28:57,129
philosophy and some nice design

641
00:28:57,129 --> 00:28:59,919
aesthetics we can make a matador

642
00:28:59,919 --> 00:29:24,520
helicopter drone of doom

643
00:29:24,530 --> 00:29:26,730
I'm just gonna keep flying this into the

644
00:29:26,730 --> 00:29:37,350
kik Mouse stage so for subs deck yeah I

645
00:29:37,350 --> 00:29:38,370
don't think that's not a question but

646
00:29:38,370 --> 00:29:55,050
yes absolutely what the fruits took uh

647
00:29:55,050 --> 00:29:57,510
why don't you think you can use streams

648
00:29:57,510 --> 00:29:59,340
in like the browser like the

649
00:29:59,340 --> 00:30:00,840
presentation before this one was about

650
00:30:00,840 --> 00:30:03,420
Web Audio right why isn't there a

651
00:30:03,420 --> 00:30:06,990
streaming API for of audio like like why

652
00:30:06,990 --> 00:30:08,730
why why our screens just for no

653
00:30:08,730 --> 00:30:10,500
developers right by our streams just for

654
00:30:10,500 --> 00:30:12,060
no developers well they shouldn't be

655
00:30:12,060 --> 00:30:14,280
we've had streams actually in UNIX for

656
00:30:14,280 --> 00:30:17,370
the longest time since the 60s actually

657
00:30:17,370 --> 00:30:19,440
I don't know streams are one of those

658
00:30:19,440 --> 00:30:23,190
abstractions that we just kind of see

659
00:30:23,190 --> 00:30:26,190
again and again and they sort of they're

660
00:30:26,190 --> 00:30:27,780
like describing something more

661
00:30:27,780 --> 00:30:29,520
fundamental to computing and that's

662
00:30:29,520 --> 00:30:32,220
doing I oh really well and just doing

663
00:30:32,220 --> 00:30:33,900
asynchronous i/o especially where you

664
00:30:33,900 --> 00:30:36,450
you have pieces that just need to talk

665
00:30:36,450 --> 00:30:37,860
to each other and you have to like move

666
00:30:37,860 --> 00:30:39,480
data from one place to the other place

667
00:30:39,480 --> 00:30:42,870
and I think that streams are just a

668
00:30:42,870 --> 00:30:44,970
really good API and they shouldn't just

669
00:30:44,970 --> 00:30:46,920
be four node and they shouldn't just be

670
00:30:46,920 --> 00:30:48,780
four things that look a lot like node

671
00:30:48,780 --> 00:30:50,640
like I do with with some browser stuff

672
00:30:50,640 --> 00:30:53,280
so I don't even know if I answered the

673
00:30:53,280 --> 00:30:57,150
question max but I I said some words it

674
00:30:57,150 --> 00:30:59,550
was a loaded question so I think I think

675
00:30:59,550 --> 00:31:05,040
that'll be sufficient anyone else does

676
00:31:05,040 --> 00:31:08,490
he know going once going twice all right

677
00:31:08,490 --> 00:31:12,270
thank you man

