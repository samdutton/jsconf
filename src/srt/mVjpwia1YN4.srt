1
00:00:21,600 --> 00:00:26,000

you

2
00:00:26,010 --> 00:00:28,200
welcome to this talk about two-way

3
00:00:28,200 --> 00:00:30,300
bindings where we'll compare angular

4
00:00:30,300 --> 00:00:34,620
ember and knockout Jes and my name is

5
00:00:34,620 --> 00:00:37,260
Mauricio Anderson I work for as a

6
00:00:37,260 --> 00:00:38,670
front-end consultant for a company in

7
00:00:38,670 --> 00:00:41,010
Norway called cyber and if you want to

8
00:00:41,010 --> 00:00:41,880
get touch with me

9
00:00:41,880 --> 00:00:43,080
you should probably contact me through

10
00:00:43,080 --> 00:00:47,670
Twitter so two-way bindings raise your

11
00:00:47,670 --> 00:00:49,110
hand if you work with two bindings

12
00:00:49,110 --> 00:00:51,330
before yeah that's quite a lot of you

13
00:00:51,330 --> 00:00:53,190
which is impressive when you consider

14
00:00:53,190 --> 00:00:55,320
that two-year bindings the word didn't

15
00:00:55,320 --> 00:00:58,140
exist six years ago this is the Google

16
00:00:58,140 --> 00:01:00,600
search trends for two-way bindings and

17
00:01:00,600 --> 00:01:04,500
so in 2007 Microsoft is who developed

18
00:01:04,500 --> 00:01:06,900
this stuff and they developed it for

19
00:01:06,900 --> 00:01:09,390
civil light and it's so it's only in the

20
00:01:09,390 --> 00:01:11,820
last two years or so that we have access

21
00:01:11,820 --> 00:01:14,250
to it in in front end with JavaScript

22
00:01:14,250 --> 00:01:18,509
and in the Java world to it binding is

23
00:01:18,509 --> 00:01:20,460
used to connect HTML and JavaScript

24
00:01:20,460 --> 00:01:23,670
together so this means that when the

25
00:01:23,670 --> 00:01:25,200
user interacts with the Dom and

26
00:01:25,200 --> 00:01:27,360
something changes there the change is

27
00:01:27,360 --> 00:01:28,800
automatically reflected into the

28
00:01:28,800 --> 00:01:30,780
JavaScript model and if you do something

29
00:01:30,780 --> 00:01:32,490
to the rascal model the change is

30
00:01:32,490 --> 00:01:34,410
automatically reflected back into the

31
00:01:34,410 --> 00:01:38,220
Dom so the way this is usually coded is

32
00:01:38,220 --> 00:01:40,740
with a declarative binding like this one

33
00:01:40,740 --> 00:01:42,959
here we say that we want to bind this

34
00:01:42,959 --> 00:01:45,209
input element to the message over here

35
00:01:45,209 --> 00:01:47,970
and so when the user starts typing

36
00:01:47,970 --> 00:01:52,830
something here you notice that the the

37
00:01:52,830 --> 00:01:55,560
text figure the Dom automatically

38
00:01:55,560 --> 00:01:57,000
updates with the correct text but so

39
00:01:57,000 --> 00:02:01,830
does the JavaScript and if you save what

40
00:02:01,830 --> 00:02:03,119
the registry the object should be like

41
00:02:03,119 --> 00:02:07,419
then the Dom automatically changes back

42
00:02:07,429 --> 00:02:10,830
now quickly before we move on this this

43
00:02:10,830 --> 00:02:12,180
is all I'm going to say like the

44
00:02:12,180 --> 00:02:13,590
introduction stuff this is not a

45
00:02:13,590 --> 00:02:15,390
tutorial or introduction to tier

46
00:02:15,390 --> 00:02:16,740
bindings or to any of the two-way

47
00:02:16,740 --> 00:02:18,060
binding libraries that we're going to

48
00:02:18,060 --> 00:02:20,280
look at there's plenty of tutorials and

49
00:02:20,280 --> 00:02:21,720
good documentation for all three of them

50
00:02:21,720 --> 00:02:23,670
online so if you're interested in any of

51
00:02:23,670 --> 00:02:24,990
them you should go online have a look at

52
00:02:24,990 --> 00:02:25,880
it

53
00:02:25,880 --> 00:02:28,170
that also means I'm going to skip some

54
00:02:28,170 --> 00:02:29,970
details so if you are familiar with them

55
00:02:29,970 --> 00:02:31,500
you might notice that I skipped over

56
00:02:31,500 --> 00:02:33,599
some slightly important details that's

57
00:02:33,599 --> 00:02:35,129
because I'm interested in how they're

58
00:02:35,129 --> 00:02:38,520
working not how to use them and

59
00:02:38,520 --> 00:02:40,140
the ones we're going to look at today

60
00:02:40,140 --> 00:02:47,020
are angularjs and bjs and knock out

61
00:02:47,030 --> 00:02:49,200
excellent okay then we'll start with

62
00:02:49,200 --> 00:02:51,840
knockouts and I think we're gonna start

63
00:02:51,840 --> 00:02:53,760
with a syntax so this is the syntax for

64
00:02:53,760 --> 00:02:55,650
a knockout it's pretty similar to what

65
00:02:55,650 --> 00:02:57,450
we saw earlier we say that we want to

66
00:02:57,450 --> 00:03:00,600
data bind the text of this van to the

67
00:03:00,600 --> 00:03:02,220
message and so here you can see the

68
00:03:02,220 --> 00:03:04,380
result of that we could do a similar

69
00:03:04,380 --> 00:03:07,290
thing with an input field so we say able

70
00:03:07,290 --> 00:03:08,700
to bind the value of this input to the

71
00:03:08,700 --> 00:03:10,740
same message and so when you change the

72
00:03:10,740 --> 00:03:12,030
value of the input field the span

73
00:03:12,030 --> 00:03:16,020
automatically changes and now for this

74
00:03:16,020 --> 00:03:17,960
to work we also need some JavaScript and

75
00:03:17,960 --> 00:03:20,580
so this is how you do it in knockout you

76
00:03:20,580 --> 00:03:23,730
create an observable variable and this

77
00:03:23,730 --> 00:03:25,500
actually returns the function you can

78
00:03:25,500 --> 00:03:28,860
call this function with one argument or

79
00:03:28,860 --> 00:03:30,300
zero argument if you call it with one

80
00:03:30,300 --> 00:03:32,310
argument then you're going to set the

81
00:03:32,310 --> 00:03:35,790
value and you notice that the preview up

82
00:03:35,790 --> 00:03:36,960
in the right corner automatically

83
00:03:36,960 --> 00:03:41,880
changed instantly and you can call it

84
00:03:41,880 --> 00:03:43,950
with no arguments just to get the

85
00:03:43,950 --> 00:03:47,400
current value so now we have with

86
00:03:47,400 --> 00:03:48,930
knockout you have the ability to read

87
00:03:48,930 --> 00:03:51,540
and write the message from the HTML have

88
00:03:51,540 --> 00:03:52,920
every possibility to read them write it

89
00:03:52,920 --> 00:03:56,100
from JavaScript we give a similar thing

90
00:03:56,100 --> 00:03:59,459
with amber amber doesn't use HTML you

91
00:03:59,459 --> 00:04:01,230
just handlebars instead which means that

92
00:04:01,230 --> 00:04:02,820
it simplifies things quite a bit

93
00:04:02,820 --> 00:04:04,590
when you just want to output message all

94
00:04:04,590 --> 00:04:06,420
you have to do is wrap it in two curly

95
00:04:06,420 --> 00:04:10,890
braces now to input an element you need

96
00:04:10,890 --> 00:04:12,450
to use the Ember text field and then you

97
00:04:12,450 --> 00:04:14,150
have to specify the value binding

98
00:04:14,150 --> 00:04:17,010
slightly more text but you get the same

99
00:04:17,010 --> 00:04:22,020
result if I can spell correctly em down

100
00:04:22,020 --> 00:04:23,580
the JavaScript side things are slightly

101
00:04:23,580 --> 00:04:26,310
different we need to create an ember

102
00:04:26,310 --> 00:04:28,470
object and then anything inside the

103
00:04:28,470 --> 00:04:30,360
Enbridge object can't be bound to the

104
00:04:30,360 --> 00:04:34,260
HTML and so if you want to set the

105
00:04:34,260 --> 00:04:36,870
message from JavaScript we use the set

106
00:04:36,870 --> 00:04:39,630
method on that email object and again

107
00:04:39,630 --> 00:04:40,710
you saw that the preview up here

108
00:04:40,710 --> 00:04:43,169
instantly updated and we can get the

109
00:04:43,169 --> 00:04:46,560
current value using the gap method so a

110
00:04:46,560 --> 00:04:49,770
knockout and amber slightly different in

111
00:04:49,770 --> 00:04:51,270
syntax but they have exactly the same

112
00:04:51,270 --> 00:04:52,970
functionality

113
00:04:52,970 --> 00:04:57,030
so let me have angularjs angry kinda

114
00:04:57,030 --> 00:04:59,130
takes the best of both worlds so uses

115
00:04:59,130 --> 00:05:01,560
the curly braces from ember but it uses

116
00:05:01,560 --> 00:05:02,970
the normal interpret field from angular

117
00:05:02,970 --> 00:05:06,360
and from a knockout and so we have again

118
00:05:06,360 --> 00:05:12,750
the same function out there and on the

119
00:05:12,750 --> 00:05:14,520
JavaScript side angler uses completely

120
00:05:14,520 --> 00:05:17,220
normal objects and it uses an object

121
00:05:17,220 --> 00:05:20,220
called scope and any property on the

122
00:05:20,220 --> 00:05:23,100
scope can be bound to the HTML when you

123
00:05:23,100 --> 00:05:24,660
want to set it all you do is set it like

124
00:05:24,660 --> 00:05:27,600
any other normal javascript object but

125
00:05:27,600 --> 00:05:28,890
notice that nothing happened up here in

126
00:05:28,890 --> 00:05:30,900
the preview because after this you need

127
00:05:30,900 --> 00:05:33,390
to call the apply function that's when

128
00:05:33,390 --> 00:05:35,520
something happens now if you program

129
00:05:35,520 --> 00:05:37,920
with knockout with a angler before then

130
00:05:37,920 --> 00:05:39,510
you probably don't always call the apply

131
00:05:39,510 --> 00:05:40,860
function because angular is pretty

132
00:05:40,860 --> 00:05:43,290
clever about calling it for you but it

133
00:05:43,290 --> 00:05:45,930
still needs to be done so what's going

134
00:05:45,930 --> 00:05:50,460
on with this apply function well when

135
00:05:50,460 --> 00:05:53,250
you just set the message angler has no

136
00:05:53,250 --> 00:05:54,810
idea exactly what you've done you could

137
00:05:54,810 --> 00:05:57,150
have done anything to the scope so the

138
00:05:57,150 --> 00:05:59,280
way it does this is that you loop

139
00:05:59,280 --> 00:06:01,530
through every property in scope and it

140
00:06:01,530 --> 00:06:03,390
sees if it has changed and if it has

141
00:06:03,390 --> 00:06:05,280
changed that's what it updates Dom and

142
00:06:05,280 --> 00:06:07,260
then it saves the new value so it has

143
00:06:07,260 --> 00:06:08,490
something to compare against the next

144
00:06:08,490 --> 00:06:11,790
time the scope changes this skin has

145
00:06:11,790 --> 00:06:14,850
this is what's called dirty checking so

146
00:06:14,850 --> 00:06:17,310
yeah you check which elements on the

147
00:06:17,310 --> 00:06:21,000
scope object which are dirty this kind

148
00:06:21,000 --> 00:06:23,669
of some kind of strange side effect so

149
00:06:23,669 --> 00:06:27,560
here we have a text and when it whoops

150
00:06:27,560 --> 00:06:31,320
100 some text you see that the preview

151
00:06:31,320 --> 00:06:34,169
on top changed instantly now we're going

152
00:06:34,169 --> 00:06:36,720
to add 5,000 elements to the list on the

153
00:06:36,720 --> 00:06:40,169
scope and yep there we go they're all

154
00:06:40,169 --> 00:06:42,690
down here now this should have changed

155
00:06:42,690 --> 00:06:44,790
anything for text but if I now type

156
00:06:44,790 --> 00:06:50,440
something notice how much slower it is

157
00:06:50,450 --> 00:06:54,240
so just because we added a lot of stuff

158
00:06:54,240 --> 00:06:56,460
to scope angular is suddenly slower at

159
00:06:56,460 --> 00:06:58,320
rendering your application and working

160
00:06:58,320 --> 00:07:00,210
through it that's because when you

161
00:07:00,210 --> 00:07:02,340
change the text field angler doesn't

162
00:07:02,340 --> 00:07:03,810
know that he has to check every one of

163
00:07:03,810 --> 00:07:05,220
the 5,000 elements to see if any of

164
00:07:05,220 --> 00:07:06,000
those have chain

165
00:07:06,000 --> 00:07:07,590
it has to do that for every time you

166
00:07:07,590 --> 00:07:11,430
change anything now amber doesn't have

167
00:07:11,430 --> 00:07:17,520
this problem number we can whoops we can

168
00:07:17,520 --> 00:07:20,850
do some text and then we can add 5,000

169
00:07:20,850 --> 00:07:30,990
items and yes there we go awesome yep

170
00:07:30,990 --> 00:07:32,930
and still things are working perfectly

171
00:07:32,930 --> 00:07:34,860
that's because every keeps track of

172
00:07:34,860 --> 00:07:37,530
dependencies so it knows that when you

173
00:07:37,530 --> 00:07:39,030
change the text that's what happened it

174
00:07:39,030 --> 00:07:40,560
doesn't need to check any of the 5,000

175
00:07:40,560 --> 00:07:43,350
elements and it's the same story for

176
00:07:43,350 --> 00:07:48,750
knockout actually so yep entering some

177
00:07:48,750 --> 00:07:53,390
text adding 5,000 items there you go and

178
00:07:53,390 --> 00:07:56,600
just as quick as it was before

179
00:07:56,600 --> 00:07:59,700
so to summarize amber and knockout the

180
00:07:59,700 --> 00:08:01,710
use of several properties while angular

181
00:08:01,710 --> 00:08:04,260
uses dirty-checking and that comes with

182
00:08:04,260 --> 00:08:07,560
some unfortunate side effects now as you

183
00:08:07,560 --> 00:08:11,370
quite noticed amber is a bit slower at

184
00:08:11,370 --> 00:08:12,930
rending the 5,000 items than the other

185
00:08:12,930 --> 00:08:15,210
two and so I ran the experiment several

186
00:08:15,210 --> 00:08:17,580
times to find out like what performance

187
00:08:17,580 --> 00:08:19,980
was for different number of items and as

188
00:08:19,980 --> 00:08:21,810
you can see amber is quite a lot slower

189
00:08:21,810 --> 00:08:24,780
than angular so we can't just say that

190
00:08:24,780 --> 00:08:28,440
dirty-checking is low it it's slow in

191
00:08:28,440 --> 00:08:30,390
some situations but it's really fast at

192
00:08:30,390 --> 00:08:32,160
rendering 5,000 items because you don't

193
00:08:32,160 --> 00:08:33,870
have to set up all the dependencies and

194
00:08:33,870 --> 00:08:35,910
observables that Amber and not have to

195
00:08:35,910 --> 00:08:39,240
do let's also go back to the knockout

196
00:08:39,240 --> 00:08:42,180
example we had and notice that the code

197
00:08:42,180 --> 00:08:44,250
I ran here is slightly different from

198
00:08:44,250 --> 00:08:46,080
the other ones here I'm creating a

199
00:08:46,080 --> 00:08:47,970
temporary array and pushing into it and

200
00:08:47,970 --> 00:08:52,230
then updating the list afterwards if we

201
00:08:52,230 --> 00:08:54,500
use the same code as the other ones did

202
00:08:54,500 --> 00:08:57,000
loading through 5,000 items and pushing

203
00:08:57,000 --> 00:09:00,300
them let me execute this things are

204
00:09:00,300 --> 00:09:03,060
going to get a bit slower and so what's

205
00:09:03,060 --> 00:09:04,050
happening now is that you're pushing

206
00:09:04,050 --> 00:09:06,990
5,000 5,000 times and so the list

207
00:09:06,990 --> 00:09:09,030
property is going to update 5,000 times

208
00:09:09,030 --> 00:09:14,420
and yes any time now

209
00:09:14,430 --> 00:09:23,710
yep taking time taking time yeah okay

210
00:09:23,710 --> 00:09:25,600
yeah you can probably see that it's

211
00:09:25,600 --> 00:09:32,380
quite slow yes there we go let's just

212
00:09:32,380 --> 00:09:33,760
refresh it because I don't know what

213
00:09:33,760 --> 00:09:36,160
happened now yes

214
00:09:36,160 --> 00:09:37,960
so not actually crashed when I did that

215
00:09:37,960 --> 00:09:39,400
oh there we go

216
00:09:39,400 --> 00:09:44,170
yes stop it and refresh so what happened

217
00:09:44,170 --> 00:09:47,470
here is that when we push the five

218
00:09:47,470 --> 00:09:50,770
thousand items no car goes ahead and

219
00:09:50,770 --> 00:09:53,350
renders this to the output right away

220
00:09:53,350 --> 00:09:56,050
and in many place the Dom for every one

221
00:09:56,050 --> 00:09:57,940
of those pushes and that's very very

222
00:09:57,940 --> 00:10:01,480
slow now ember is quite clever about

223
00:10:01,480 --> 00:10:05,140
this and so when you push the items it

224
00:10:05,140 --> 00:10:07,330
set a time out at any weights so it's

225
00:10:07,330 --> 00:10:08,830
okay yeah you push that item I'm gonna

226
00:10:08,830 --> 00:10:10,420
wait for milliseconds and see what else

227
00:10:10,420 --> 00:10:12,070
you're going to do so you keep pushing

228
00:10:12,070 --> 00:10:13,870
items it just says okay I'll wait I'll

229
00:10:13,870 --> 00:10:15,850
deal with this later and then four

230
00:10:15,850 --> 00:10:17,110
milliseconds later that's when it

231
00:10:17,110 --> 00:10:18,670
figures out what it needs to render and

232
00:10:18,670 --> 00:10:22,270
so it only has to do one rendering now

233
00:10:22,270 --> 00:10:24,340
angular is the same thing as we saw

234
00:10:24,340 --> 00:10:26,410
because it uses the apply function so

235
00:10:26,410 --> 00:10:28,420
nothing actually happens until the apply

236
00:10:28,420 --> 00:10:30,070
method is called that's when it renders

237
00:10:30,070 --> 00:10:33,430
stuff in other words angular and ember

238
00:10:33,430 --> 00:10:35,020
uses asynchronous rendering while

239
00:10:35,020 --> 00:10:36,730
knockout uses synchronous rendering and

240
00:10:36,730 --> 00:10:38,920
that can be quite slow in some

241
00:10:38,920 --> 00:10:42,940
situations now let's have a look at

242
00:10:42,940 --> 00:10:45,310
computer properties this is what makes

243
00:10:45,310 --> 00:10:48,880
the tuam bindings really really cool and

244
00:10:48,880 --> 00:10:50,020
we're gonna look at an example where we

245
00:10:50,020 --> 00:10:51,610
convert Celsius temperatures to

246
00:10:51,610 --> 00:10:53,950
Fahrenheit temperatures so you can do

247
00:10:53,950 --> 00:10:56,580
that with this function or this formula

248
00:10:56,580 --> 00:11:00,370
which in JavaScript looks like this now

249
00:11:00,370 --> 00:11:02,320
if you do this in JavaScript then we're

250
00:11:02,320 --> 00:11:05,770
going to get a value F which is like the

251
00:11:05,770 --> 00:11:07,480
Fernet value of the current Celsius

252
00:11:07,480 --> 00:11:09,970
value but if it change Celsius nothing's

253
00:11:09,970 --> 00:11:11,800
going to change for the Fernet we need

254
00:11:11,800 --> 00:11:14,290
to recompute it again but with computer

255
00:11:14,290 --> 00:11:16,060
properties that's going to happen

256
00:11:16,060 --> 00:11:18,760
automatically so whenever this tells

257
00:11:18,760 --> 00:11:20,800
this changes the Fernet automatically

258
00:11:20,800 --> 00:11:24,070
changes and this makes it really cool

259
00:11:24,070 --> 00:11:25,870
when you want to I make front-end

260
00:11:25,870 --> 00:11:27,560
applications things instantly change

261
00:11:27,560 --> 00:11:29,600
and you can do computer functions on

262
00:11:29,600 --> 00:11:35,060
those now angler uses this scope and we

263
00:11:35,060 --> 00:11:37,610
just define a function on it which looks

264
00:11:37,610 --> 00:11:39,350
quite similar to what we had just now

265
00:11:39,350 --> 00:11:43,190
the basic code but remember angler uses

266
00:11:43,190 --> 00:11:43,970
dirty-checking

267
00:11:43,970 --> 00:11:46,010
so it doesn't know that the function f

268
00:11:46,010 --> 00:11:48,440
depends on frankly on the scope at the

269
00:11:48,440 --> 00:11:50,570
scene so what's going to happen is that

270
00:11:50,570 --> 00:11:51,950
it's going to recompute this function

271
00:11:51,950 --> 00:11:53,960
whenever anything in the scope changes

272
00:11:53,960 --> 00:11:57,770
and that's kind of a waste of time if

273
00:11:57,770 --> 00:12:00,290
you have a big big scope and lots of

274
00:12:00,290 --> 00:12:01,520
objects then this function is going to

275
00:12:01,520 --> 00:12:04,280
run anytime anything changes it's not

276
00:12:04,280 --> 00:12:08,180
useful at all ember this is the Ember

277
00:12:08,180 --> 00:12:10,370
example and so far it looks pretty much

278
00:12:10,370 --> 00:12:12,140
the same you just use the Ember syntax

279
00:12:12,140 --> 00:12:14,150
to get the current C value instead of

280
00:12:14,150 --> 00:12:17,930
the instead of the angular version but

281
00:12:17,930 --> 00:12:20,060
you need to add a dot property at the

282
00:12:20,060 --> 00:12:22,340
end and this says that this function

283
00:12:22,340 --> 00:12:25,310
depends on value C so now amber knows

284
00:12:25,310 --> 00:12:26,900
that it only needs to run this function

285
00:12:26,900 --> 00:12:30,620
when C changes and so you don't have the

286
00:12:30,620 --> 00:12:33,800
problem that's anger had but we can

287
00:12:33,800 --> 00:12:35,839
create an example where amber kind of

288
00:12:35,839 --> 00:12:38,320
struggles so this is a very simple

289
00:12:38,320 --> 00:12:41,810
example where if a is true then this one

290
00:12:41,810 --> 00:12:44,300
is going to return B and if a is false

291
00:12:44,300 --> 00:12:46,130
it's going to return to C and we

292
00:12:46,130 --> 00:12:47,720
specified at the bottom that depends on

293
00:12:47,720 --> 00:12:50,690
a B and C and so when any of these

294
00:12:50,690 --> 00:12:52,550
properties change then it's going to

295
00:12:52,550 --> 00:12:55,010
recompute itself but now we have the

296
00:12:55,010 --> 00:12:59,200
problem that if a is true and C changes

297
00:12:59,200 --> 00:13:01,250
it's still going to recompute itself

298
00:13:01,250 --> 00:13:02,900
it's going to return the same value last

299
00:13:02,900 --> 00:13:05,210
time because neither A or B which is

300
00:13:05,210 --> 00:13:07,810
what's in the execution path has changed

301
00:13:07,810 --> 00:13:11,330
so it we can we can say what the

302
00:13:11,330 --> 00:13:12,890
dependences are on but dependency

303
00:13:12,890 --> 00:13:14,960
dependencies are all fixed and it's

304
00:13:14,960 --> 00:13:16,040
going to depend on those for the

305
00:13:16,040 --> 00:13:19,490
continuation of the program so then we

306
00:13:19,490 --> 00:13:21,320
have knockout this is the knockout

307
00:13:21,320 --> 00:13:23,390
example what we have to do here is say

308
00:13:23,390 --> 00:13:25,430
that we want to see value I'm used to at

309
00:13:25,430 --> 00:13:27,470
they get durable version of calling the

310
00:13:27,470 --> 00:13:30,460
C observable without any parameters and

311
00:13:30,460 --> 00:13:32,600
if you take the example we had with

312
00:13:32,600 --> 00:13:34,940
ember then no cat doesn't struggle with

313
00:13:34,940 --> 00:13:38,150
this no cut knows that our never it

314
00:13:38,150 --> 00:13:39,650
every time you run the computed function

315
00:13:39,650 --> 00:13:41,180
it sees which once you

316
00:13:41,180 --> 00:13:43,610
going to which have been used so in

317
00:13:43,610 --> 00:13:45,410
Russell is code and it says okay you got

318
00:13:45,410 --> 00:13:46,880
the value of a and I'm going to note

319
00:13:46,880 --> 00:13:49,310
that down that I need to depend on a and

320
00:13:49,310 --> 00:13:51,500
then I return B and I'm going to note on

321
00:13:51,500 --> 00:13:54,590
I take it that I depend on B so next

322
00:13:54,590 --> 00:13:56,570
time is going to listen for a and B

323
00:13:56,570 --> 00:13:58,460
changes and it doesn't care about C and

324
00:13:58,460 --> 00:14:00,770
if it changes then it's going to depend

325
00:14:00,770 --> 00:14:06,020
on a and C and so we have that angularjs

326
00:14:06,020 --> 00:14:07,870
doesn't really have computer properties

327
00:14:07,870 --> 00:14:13,040
but amber and na car does and every no

328
00:14:13,040 --> 00:14:14,060
card is the only one that has the

329
00:14:14,060 --> 00:14:15,560
dynamic dependencies where the

330
00:14:15,560 --> 00:14:19,890
dependencies can change during runtime

331
00:14:19,900 --> 00:14:23,990
oops okay so to summarize this we looked

332
00:14:23,990 --> 00:14:25,790
at the syntax today and the syntax are

333
00:14:25,790 --> 00:14:27,590
quite different between the different

334
00:14:27,590 --> 00:14:30,680
languages and we looked at dirty

335
00:14:30,680 --> 00:14:32,330
checking versus observable properties

336
00:14:32,330 --> 00:14:36,140
and we found that 30 taking isn't such a

337
00:14:36,140 --> 00:14:36,650
good idea

338
00:14:36,650 --> 00:14:38,330
observable properties are a lot more

339
00:14:38,330 --> 00:14:41,630
advanced a lot better to use dem looked

340
00:14:41,630 --> 00:14:43,130
at synchronous versus asynchronous code

341
00:14:43,130 --> 00:14:45,080
I may solve it a knockout example which

342
00:14:45,080 --> 00:14:47,000
crashed that synchronous code isn't a

343
00:14:47,000 --> 00:14:47,480
good idea

344
00:14:47,480 --> 00:14:50,570
asynchronous it's a lot better and then

345
00:14:50,570 --> 00:14:52,010
we compared the computer properties in

346
00:14:52,010 --> 00:14:54,860
the different ones and we've looked a

347
00:14:54,860 --> 00:14:57,260
bit about performance and so many of you

348
00:14:57,260 --> 00:14:58,640
probably wondering ok so which one is

349
00:14:58,640 --> 00:15:00,130
the fastest which one is the slowest

350
00:15:00,130 --> 00:15:04,460
well we saw that ember is very slow at

351
00:15:04,460 --> 00:15:07,400
rendering lists wizard angler is slow

352
00:15:07,400 --> 00:15:10,370
when a model grows and we sort of

353
00:15:10,370 --> 00:15:12,170
knockout is slow when we pushed many

354
00:15:12,170 --> 00:15:14,720
items so none of them are actually fast

355
00:15:14,720 --> 00:15:16,040
enough actually slow they all have

356
00:15:16,040 --> 00:15:19,550
strengths and weaknesses and well yeah

357
00:15:19,550 --> 00:15:21,440
that's the end of the presentation thank

358
00:15:21,440 --> 00:15:29,150
you

359
00:15:29,160 --> 00:15:32,310
the conclusion is we're all screwed yes

360
00:15:32,310 --> 00:15:34,900
we have a few minutes 11 o'clock we're

361
00:15:34,900 --> 00:15:39,040
taking a break until 11:15 where we're

362
00:15:39,040 --> 00:15:42,490
gonna have young crew Tish come in and I

363
00:15:42,490 --> 00:15:43,930
hope I said that right javascript

364
00:15:43,930 --> 00:15:46,120
patterns for contemporary dance music

365
00:15:46,120 --> 00:15:48,730
which sounds funky do you guys if you

366
00:15:48,730 --> 00:15:51,070
have any questions we could throw some

367
00:15:51,070 --> 00:15:52,780
up here question round yeah if anyone

368
00:15:52,780 --> 00:15:56,350
have questions no yes there's a question

369
00:15:56,350 --> 00:16:03,290
over there yeah I can give you a mic

370
00:16:03,300 --> 00:16:06,900
what do you think the the new kind of

371
00:16:06,900 --> 00:16:10,090
what they called like property syntax do

372
00:16:10,090 --> 00:16:11,230
you think that'll make a difference when

373
00:16:11,230 --> 00:16:13,240
you're the library's new property syntax

374
00:16:13,240 --> 00:16:15,280
so you've been able to define a property

375
00:16:15,280 --> 00:16:18,070
that has a getter and a setter yes okay

376
00:16:18,070 --> 00:16:20,530
so yeah I wanted to discuss that but I

377
00:16:20,530 --> 00:16:22,840
skipped it and yeah so the problem with

378
00:16:22,840 --> 00:16:25,330
that is that Internet Explorer 8 doesn't

379
00:16:25,330 --> 00:16:27,040
support it so if you want to make a

380
00:16:27,040 --> 00:16:28,780
library that supports in Explorer 8

381
00:16:28,780 --> 00:16:33,790
you can't use it so unfortunately now on

382
00:16:33,790 --> 00:16:36,030
that in the next version of JavaScript

383
00:16:36,030 --> 00:16:38,860
es6 there's going to be observable

384
00:16:38,860 --> 00:16:40,630
properties built into the language we're

385
00:16:40,630 --> 00:16:41,770
going to solve many of these problems

386
00:16:41,770 --> 00:16:46,630
just right away so yeah do we have any

387
00:16:46,630 --> 00:16:53,680
other questions yes the question was do

388
00:16:53,680 --> 00:16:55,540
you look at two-way binding and polymer

389
00:16:55,540 --> 00:16:57,550
or haven't looked at it no I haven't had

390
00:16:57,550 --> 00:16:58,960
time to do that I have to look at two

391
00:16:58,960 --> 00:17:00,550
binding in ds3 and that's more than

392
00:17:00,550 --> 00:17:02,140
enough for now I'm probably going to

393
00:17:02,140 --> 00:17:03,940
look at others as well and see how they

394
00:17:03,940 --> 00:17:07,450
compare yeah but yeah I think that's

395
00:17:07,450 --> 00:17:11,290
very important I think in polymer or in

396
00:17:11,290 --> 00:17:13,870
web components especially we need to

397
00:17:13,870 --> 00:17:16,060
have some way of - a binding using just

398
00:17:16,060 --> 00:17:18,880
finding in an object and attaching event

399
00:17:18,880 --> 00:17:21,150
listeners to it is not a good idea

400
00:17:21,150 --> 00:17:25,420
yep more questions

401
00:17:25,420 --> 00:17:31,330
oh we're your examples based on

402
00:17:31,330 --> 00:17:33,520
production experience or just

403
00:17:33,520 --> 00:17:36,820
experiments that you did some of them

404
00:17:36,820 --> 00:17:38,290
are based on production experience yes

405
00:17:38,290 --> 00:17:42,310
so but but if all these exams are showed

406
00:17:42,310 --> 00:17:44,380
where things fail there are ways to work

407
00:17:44,380 --> 00:17:47,590
around it and so like for example there

408
00:17:47,590 --> 00:17:48,910
the knockout you saw that it was a

409
00:17:48,910 --> 00:17:50,740
different way to do it with ember the

410
00:17:50,740 --> 00:17:52,090
list is slow though you can create your

411
00:17:52,090 --> 00:17:55,870
own for each loops and just look at what

412
00:17:55,870 --> 00:17:58,420
you're interested in and yeah so all of

413
00:17:58,420 --> 00:17:59,620
them have ways to work around these

414
00:17:59,620 --> 00:18:02,200
issues so maybe you could use all three

415
00:18:02,200 --> 00:18:04,420
frameworks at the same time just have no

416
00:18:04,420 --> 00:18:19,600
idea we have one more question okay do

417
00:18:19,600 --> 00:18:22,500
you have any experience with

418
00:18:22,500 --> 00:18:24,580
synchronization data models between

419
00:18:24,580 --> 00:18:27,400
client side and server side to have the

420
00:18:27,400 --> 00:18:32,650
same data models rested in if we can

421
00:18:32,650 --> 00:18:34,690
have because we can share the same data

422
00:18:34,690 --> 00:18:36,520
models on the server and a client side

423
00:18:36,520 --> 00:18:39,750
to manage manage it only at one place

424
00:18:39,750 --> 00:18:42,460
yeah that's yeah that's interesting I

425
00:18:42,460 --> 00:18:43,780
haven't actually looked at anything like

426
00:18:43,780 --> 00:18:45,370
that or not something similar to this

427
00:18:45,370 --> 00:18:48,280
there's something called pouch DB which

428
00:18:48,280 --> 00:18:50,110
is probably the closest thing you can

429
00:18:50,110 --> 00:18:52,270
get which is a database you have on the

430
00:18:52,270 --> 00:18:54,250
client and on the server and you

431
00:18:54,250 --> 00:18:56,050
synchronize them that's probably the

432
00:18:56,050 --> 00:19:00,450
closest thing you can get to that yeah

433
00:19:00,450 --> 00:19:02,320
cool okay

434
00:19:02,320 --> 00:19:04,150
thanks thank you all right see you guys

435
00:19:04,150 --> 00:19:12,840
at 11:15

