1
00:00:10,900 --> 00:00:16,460

okay um so the errand is flaky so we'll

2
00:00:16,460 --> 00:00:19,670
see if I can get through this talk um so

3
00:00:19,670 --> 00:00:22,010
as Jake so eloquently mentioned I am

4
00:00:22,010 --> 00:00:24,320
Sofia and I'm here to talk to you about

5
00:00:24,320 --> 00:00:30,470
memory management and JavaScript if

6
00:00:30,470 --> 00:00:33,020
you're sitting in the back or you can't

7
00:00:33,020 --> 00:00:34,790
see the screen or for whatever reason

8
00:00:34,790 --> 00:00:37,790
you can follow along with the talk at

9
00:00:37,790 --> 00:00:43,399
JMP /j s - ma'am - live and you'll just

10
00:00:43,399 --> 00:00:45,170
automatically see everything but also

11
00:00:45,170 --> 00:00:55,460
the internet is down so you can't it's

12
00:00:55,460 --> 00:01:04,229
not moving I'm sorry guys this is no fun

13
00:01:04,239 --> 00:01:10,320
it's reconnecting

14
00:01:10,330 --> 00:01:17,219
is so awkward oh my god

15
00:01:17,229 --> 00:01:21,290
I'm not worried I could do this thing

16
00:01:21,290 --> 00:01:24,950
just without slides but that wouldn't be

17
00:01:24,950 --> 00:01:39,230
fun Oh

18
00:01:39,240 --> 00:01:40,860
I actually can't do this thing about

19
00:01:40,860 --> 00:01:48,390
slides yes do we have Ethernet I could

20
00:01:48,390 --> 00:01:54,500
tell jokes in the meantime knock-knock

21
00:01:54,500 --> 00:02:00,580
King Tut King Chucky fried chicken

22
00:02:00,590 --> 00:02:04,280
what does it web developers ghosts a

23
00:02:04,280 --> 00:02:11,430
Twitter bootstrap I was going to come on

24
00:02:11,430 --> 00:02:14,510
stage and help but you've got this rao's

25
00:02:14,510 --> 00:02:17,760
the faster he works the quicker this

26
00:02:17,760 --> 00:02:21,540
torture will be over let's see if I can

27
00:02:21,540 --> 00:02:25,160
remember another one oh god I can't even

28
00:02:25,160 --> 00:02:27,690
have any good memory bank banter what's

29
00:02:27,690 --> 00:02:29,250
your what's your favorite memory address

30
00:02:29,250 --> 00:02:38,489
oh my god so you see if you have you've

31
00:02:38,489 --> 00:02:40,319
been able to use the chrome dev tools in

32
00:02:40,319 --> 00:02:42,150
terms of memory cleanup wow you are the

33
00:02:42,150 --> 00:02:44,010
only person in the world who can use

34
00:02:44,010 --> 00:02:46,220
that that's amazing believe it or not um

35
00:02:46,220 --> 00:02:48,989
once this is set up you guys are

36
00:02:48,989 --> 00:02:50,459
actually going to be getting the

37
00:02:50,459 --> 00:02:52,920
opportunity to interact with the chrome

38
00:02:52,920 --> 00:02:55,200
dev tools a bit more I created a

39
00:02:55,200 --> 00:02:57,269
tutorial an interactive tutorial for

40
00:02:57,269 --> 00:02:58,829
everyone at the conference to follow

41
00:02:58,829 --> 00:03:00,750
along with to learn how to use dev tools

42
00:03:00,750 --> 00:03:03,510
I always find that it's one of the

43
00:03:03,510 --> 00:03:04,739
reasons that I kind of stay away from

44
00:03:04,739 --> 00:03:07,079
like the kind of single page app push

45
00:03:07,079 --> 00:03:08,579
State stuff because I think no matter

46
00:03:08,579 --> 00:03:11,160
how bad I handle memory I know I'm one

47
00:03:11,160 --> 00:03:12,780
navigation away from it all being

48
00:03:12,780 --> 00:03:16,920
cleared and starting again awesome okay

49
00:03:16,920 --> 00:03:21,510
right I'll go away bye bye

50
00:03:21,520 --> 00:03:26,680
okay awesome uh so I'm Safi as I already

51
00:03:26,680 --> 00:03:29,380
mentioned my two passions in life are

52
00:03:29,380 --> 00:03:31,480
data science for social good and open

53
00:03:31,480 --> 00:03:33,670
source software and if you're interested

54
00:03:33,670 --> 00:03:35,560
in learning more about that or the open

55
00:03:35,560 --> 00:03:37,330
source work that I'm doing I'm captain

56
00:03:37,330 --> 00:03:40,720
Sofia on Twitter and github and NPM um

57
00:03:40,720 --> 00:03:45,040
and like MySpace and Friendster and all

58
00:03:45,040 --> 00:03:47,200
the stuff and Sophia don't rocks is my

59
00:03:47,200 --> 00:03:51,010
website so what are we going to be

60
00:03:51,010 --> 00:03:52,810
talking about today I just want to give

61
00:03:52,810 --> 00:03:54,280
you a quick outline of what you guys are

62
00:03:54,280 --> 00:03:58,180
getting yourselves into so first I'm

63
00:03:58,180 --> 00:03:59,800
going to talk a little bit about why we

64
00:03:59,800 --> 00:04:02,050
should care about memory as software

65
00:04:02,050 --> 00:04:03,730
engineers whether you're working in the

66
00:04:03,730 --> 00:04:05,530
client-side with JavaScript or the

67
00:04:05,530 --> 00:04:06,700
server-side I'm going to give you

68
00:04:06,700 --> 00:04:11,190
reasons to think about memory first and

69
00:04:11,190 --> 00:04:13,270
then we're going to talk about what it

70
00:04:13,270 --> 00:04:15,250
means to manage memory and for those of

71
00:04:15,250 --> 00:04:16,600
you who might have computer science

72
00:04:16,600 --> 00:04:18,790
degrees this is going to be a throwback

73
00:04:18,790 --> 00:04:22,180
to your systems or compilers courses so

74
00:04:22,180 --> 00:04:23,860
I'm sorry if I'm bringing up very

75
00:04:23,860 --> 00:04:25,960
horrifying flashbacks right now please

76
00:04:25,960 --> 00:04:29,680
bear with me and then we're going to

77
00:04:29,680 --> 00:04:31,570
talk it all in particular about how

78
00:04:31,570 --> 00:04:35,500
JavaScript manages memory and then we'll

79
00:04:35,500 --> 00:04:37,450
finish it off with how we can write

80
00:04:37,450 --> 00:04:39,580
memory performant applications but what

81
00:04:39,580 --> 00:04:41,080
are some tools and techniques that you

82
00:04:41,080 --> 00:04:45,100
folks can use and once all that is done

83
00:04:45,100 --> 00:04:47,440
you will be wizards and witches of

84
00:04:47,440 --> 00:04:51,640
JavaScript after battling the Dark Lord

85
00:04:51,640 --> 00:04:56,650
of memory leaks um so first why do we

86
00:04:56,650 --> 00:04:58,540
care about memory why is memory

87
00:04:58,540 --> 00:05:00,310
important to us as programmers and these

88
00:05:00,310 --> 00:05:02,860
are three very bias reasons that I have

89
00:05:02,860 --> 00:05:06,580
for caring about memory the first is

90
00:05:06,580 --> 00:05:08,410
that it forces us to be more inventive

91
00:05:08,410 --> 00:05:10,960
programmers I always think it's great to

92
00:05:10,960 --> 00:05:13,270
add restrictions to the way that we

93
00:05:13,270 --> 00:05:15,160
develop our software because it forces

94
00:05:15,160 --> 00:05:17,410
us to reason critically of our our

95
00:05:17,410 --> 00:05:20,740
applications to analyze and debug things

96
00:05:20,740 --> 00:05:22,390
and use tools like the chrome dev tools

97
00:05:22,390 --> 00:05:25,750
and to build better there's no way to

98
00:05:25,750 --> 00:05:27,370
get somebody more creative and inventive

99
00:05:27,370 --> 00:05:30,690
than by locking them in a dark room or

100
00:05:30,690 --> 00:05:32,800
by placing them in the middle of the

101
00:05:32,800 --> 00:05:33,960
Sahara in 100

102
00:05:33,960 --> 00:05:35,910
degree weather with no Wi-Fi and having

103
00:05:35,910 --> 00:05:41,840
them code ask me about that later

104
00:05:41,850 --> 00:05:44,789
memory is scarce and although the amount

105
00:05:44,789 --> 00:05:46,530
of memory that's available on machines

106
00:05:46,530 --> 00:05:48,900
has been increasing over the past couple

107
00:05:48,900 --> 00:05:52,289
of decades so have people's expectations

108
00:05:52,289 --> 00:05:54,960
of what their machines can do your users

109
00:05:54,960 --> 00:05:57,270
expect your applications to be able to

110
00:05:57,270 --> 00:05:59,060
handle their multitasking workflows

111
00:05:59,060 --> 00:06:03,180
users expect and deserve really rich

112
00:06:03,180 --> 00:06:05,190
interactive web experience and those

113
00:06:05,190 --> 00:06:06,419
things tend to be really memory

114
00:06:06,419 --> 00:06:11,340
intensive and then finally it helps us

115
00:06:11,340 --> 00:06:13,620
exercise our empathy muscles I view

116
00:06:13,620 --> 00:06:16,310
empathy as a muscle that you can train

117
00:06:16,310 --> 00:06:18,690
in thinking about the different

118
00:06:18,690 --> 00:06:20,580
conditions that your program is going to

119
00:06:20,580 --> 00:06:22,259
be used in or your application is going

120
00:06:22,259 --> 00:06:25,080
to be used in in the context of memories

121
00:06:25,080 --> 00:06:26,610
a really great way for you to discover

122
00:06:26,610 --> 00:06:28,259
new user stories and start to think

123
00:06:28,259 --> 00:06:32,469
about how your applications being used

124
00:06:32,479 --> 00:06:36,810
so now that we have a couple of reasons

125
00:06:36,810 --> 00:06:38,909
to care about memory management let's go

126
00:06:38,909 --> 00:06:41,280
a brief overview of what memory

127
00:06:41,280 --> 00:06:45,800
management is so if you programmed in C

128
00:06:45,800 --> 00:06:48,449
you are familiar with a paradigm known

129
00:06:48,449 --> 00:06:51,900
as manual memory management what that

130
00:06:51,900 --> 00:06:54,240
means is that you as the programmer had

131
00:06:54,240 --> 00:06:56,310
to allocate memory on the machine using

132
00:06:56,310 --> 00:06:58,620
malloc then you were done with it you're

133
00:06:58,620 --> 00:07:00,860
responsible for freeing it using free

134
00:07:00,860 --> 00:07:03,570
now there's a fundamental issue with

135
00:07:03,570 --> 00:07:06,030
that and it's that this is a huge

136
00:07:06,030 --> 00:07:08,580
cognitive load on you as the engineer

137
00:07:08,580 --> 00:07:10,919
you can imagine in addition to having

138
00:07:10,919 --> 00:07:14,099
top-down missing semicolons and arguing

139
00:07:14,099 --> 00:07:15,900
over where you place your curly braces

140
00:07:15,900 --> 00:07:17,880
and thinking about algorithm design and

141
00:07:17,880 --> 00:07:19,830
software architecture you have this

142
00:07:19,830 --> 00:07:22,440
additional cognitive load of managing

143
00:07:22,440 --> 00:07:23,639
the memory of your application and

144
00:07:23,639 --> 00:07:26,039
actively thinking about it so you can

145
00:07:26,039 --> 00:07:29,639
imagine software written this way has

146
00:07:29,639 --> 00:07:31,800
lots of memory leaks has lots of other

147
00:07:31,800 --> 00:07:35,180
memory related bugs no fun for anybody

148
00:07:35,180 --> 00:07:39,180
and that's where the concept of

149
00:07:39,180 --> 00:07:41,580
automated memory management comes in

150
00:07:41,580 --> 00:07:43,289
it's known as the garbage collector this

151
00:07:43,289 --> 00:07:46,639
is Oscar the Grouch from Sesame Street

152
00:07:46,639 --> 00:07:49,789
um and the garbage collector is really

153
00:07:49,789 --> 00:07:52,039
in charge of finding out where garbage

154
00:07:52,039 --> 00:07:54,680
memory is and then clearing it away and

155
00:07:54,680 --> 00:07:56,439
we'll get into that a little bit later

156
00:07:56,439 --> 00:08:01,550
an automated memory management has its

157
00:08:01,550 --> 00:08:04,639
pros and consequences the first big Pro

158
00:08:04,639 --> 00:08:07,310
really for us as engineers is we don't

159
00:08:07,310 --> 00:08:09,139
have that cognitive load of having to

160
00:08:09,139 --> 00:08:12,919
manage memory on our own the consequence

161
00:08:12,919 --> 00:08:14,810
is that the garbage collector is an

162
00:08:14,810 --> 00:08:17,599
application it's another program that

163
00:08:17,599 --> 00:08:20,000
runs in order to clear your memory so it

164
00:08:20,000 --> 00:08:21,879
does have a performance endurance and

165
00:08:21,879 --> 00:08:23,750
depending on how good your memory

166
00:08:23,750 --> 00:08:25,669
allocator is and what technique it's

167
00:08:25,669 --> 00:08:27,590
using that hindrance might not be as bad

168
00:08:27,590 --> 00:08:34,219
that is still a consequence also so now

169
00:08:34,219 --> 00:08:35,930
we talked about memory management and

170
00:08:35,930 --> 00:08:37,459
we're going to cover it in JavaScript

171
00:08:37,459 --> 00:08:39,500
really quickly is everyone with me so

172
00:08:39,500 --> 00:08:46,010
far oh yeah get hyped so for the rest of

173
00:08:46,010 --> 00:08:47,510
this talk I'm really going to be

174
00:08:47,510 --> 00:08:50,709
focusing on the v8 JavaScript engine um

175
00:08:50,709 --> 00:08:53,420
we're all pretty familiar with it if you

176
00:08:53,420 --> 00:08:55,899
use Chrome that's the thing that's

177
00:08:55,899 --> 00:08:57,560
interpreting and executing your code

178
00:08:57,560 --> 00:09:00,380
you're using node or MongoDB on the

179
00:09:00,380 --> 00:09:03,370
server side it's responsible there so um

180
00:09:03,370 --> 00:09:06,079
sorry for all the other JavaScript

181
00:09:06,079 --> 00:09:07,820
engines who won't be getting any love

182
00:09:07,820 --> 00:09:13,339
from me today but v8 swear it's up so

183
00:09:13,339 --> 00:09:14,630
let's start off by going through the

184
00:09:14,630 --> 00:09:16,699
basic data types in Java Script I'm

185
00:09:16,699 --> 00:09:18,470
going to start off really easy and then

186
00:09:18,470 --> 00:09:21,079
like ramp it up super fast so if you're

187
00:09:21,079 --> 00:09:23,300
boole's right you're trues your falses

188
00:09:23,300 --> 00:09:26,060
your numbers your one two threes any of

189
00:09:26,060 --> 00:09:28,220
your strings your hello worlds and your

190
00:09:28,220 --> 00:09:33,709
man cats and all that and all of these

191
00:09:33,709 --> 00:09:35,839
are the sort of elements in the

192
00:09:35,839 --> 00:09:37,519
JavaScript universe and they can be

193
00:09:37,519 --> 00:09:39,890
combined to form different compounds and

194
00:09:39,890 --> 00:09:42,380
molecules in your application these are

195
00:09:42,380 --> 00:09:45,410
really the basics and where that becomes

196
00:09:45,410 --> 00:09:48,410
relevant is how memory is allocated

197
00:09:48,410 --> 00:09:51,440
memory is allocated in a heap structure

198
00:09:51,440 --> 00:09:54,350
so it looks something like this so the

199
00:09:54,350 --> 00:09:56,769
read node you see there is the root node

200
00:09:56,769 --> 00:09:59,620
this is something like the window object

201
00:09:59,620 --> 00:10:03,140
the root node has edges pointing to

202
00:10:03,140 --> 00:10:05,000
other nodes in this case the blue nodes

203
00:10:05,000 --> 00:10:07,490
and the green nodes the green nodes in

204
00:10:07,490 --> 00:10:09,319
this particular case are your boolean's

205
00:10:09,319 --> 00:10:11,990
your numbers and your strengths those

206
00:10:11,990 --> 00:10:14,660
fundamental elements the blues are

207
00:10:14,660 --> 00:10:16,970
references to those things so this is

208
00:10:16,970 --> 00:10:18,649
what memory looks like it's definitely a

209
00:10:18,649 --> 00:10:21,649
giant heap which is why Jake made that

210
00:10:21,649 --> 00:10:27,050
joke earlier and v8 does something where

211
00:10:27,050 --> 00:10:29,360
allocates memory into six different

212
00:10:29,360 --> 00:10:32,690
spaces or chunks and there's sort of a

213
00:10:32,690 --> 00:10:34,519
method to the madness of why it does

214
00:10:34,519 --> 00:10:35,750
this and we're going to find out why

215
00:10:35,750 --> 00:10:38,930
later I hope I'm keeping you on the edge

216
00:10:38,930 --> 00:10:40,399
of your seats with all this like we'll

217
00:10:40,399 --> 00:10:41,810
find out later try to keep you guys

218
00:10:41,810 --> 00:10:46,089
excited so let's talk a little bit

219
00:10:46,089 --> 00:10:48,290
different kinds of spaces so the first

220
00:10:48,290 --> 00:10:51,199
space is the new space this is where

221
00:10:51,199 --> 00:10:53,899
memory gets allocated when an object is

222
00:10:53,899 --> 00:10:55,850
immediately created objects in the new

223
00:10:55,850 --> 00:10:59,470
space tend to be smaller they're newer

224
00:10:59,470 --> 00:11:03,230
new space your next space is the old

225
00:11:03,230 --> 00:11:05,810
pointer space so if an object is in the

226
00:11:05,810 --> 00:11:08,029
new space and it's a reference to an

227
00:11:08,029 --> 00:11:10,430
object it's not a scalar itself and it's

228
00:11:10,430 --> 00:11:12,290
resided in the new space for a while

229
00:11:12,290 --> 00:11:15,019
it's been actively used it graduates the

230
00:11:15,019 --> 00:11:18,050
old pointer space and if it's not a

231
00:11:18,050 --> 00:11:21,019
reference the scalar graduates to the

232
00:11:21,019 --> 00:11:26,329
old data space and then you have the

233
00:11:26,329 --> 00:11:28,220
large object space this is where you

234
00:11:28,220 --> 00:11:31,040
store giant look-up tables and things

235
00:11:31,040 --> 00:11:33,019
that don't you don't want to fall under

236
00:11:33,019 --> 00:11:34,760
the memory restrictions or the size

237
00:11:34,760 --> 00:11:38,779
restrictions of the new old end of the

238
00:11:38,779 --> 00:11:42,800
new and old space and then you have the

239
00:11:42,800 --> 00:11:45,649
code space the code space is special

240
00:11:45,649 --> 00:11:46,699
because it contains

241
00:11:46,699 --> 00:11:49,699
executable memory memory on your machine

242
00:11:49,699 --> 00:11:52,040
by default is not executable because you

243
00:11:52,040 --> 00:11:53,600
don't want to go around just running

244
00:11:53,600 --> 00:11:55,459
whatever data is on your memory that

245
00:11:55,459 --> 00:12:00,680
would not be good and so items in the

246
00:12:00,680 --> 00:12:02,120
code space are generally get

247
00:12:02,120 --> 00:12:05,600
instructions just-in-time compiled and

248
00:12:05,600 --> 00:12:07,880
then the last space is the map space and

249
00:12:07,880 --> 00:12:11,209
this contains maps property cells and

250
00:12:11,209 --> 00:12:11,660
cell

251
00:12:11,660 --> 00:12:13,870
these are used by the JavaScript engine

252
00:12:13,870 --> 00:12:16,610
and really for the rest of this talk

253
00:12:16,610 --> 00:12:18,680
we're going to focus on two spaces the

254
00:12:18,680 --> 00:12:21,410
new space in the old space so you can

255
00:12:21,410 --> 00:12:23,060
kind of forget about the rest and you

256
00:12:23,060 --> 00:12:24,530
can treat it as like fun stuff you

257
00:12:24,530 --> 00:12:29,060
learned so this point we've allocated

258
00:12:29,060 --> 00:12:33,420
objects in memory they're in our heap

259
00:12:33,430 --> 00:12:37,220
how do we know what to clean and how to

260
00:12:37,220 --> 00:12:41,660
clean it and really the answer and the

261
00:12:41,660 --> 00:12:45,830
basis for this is reach ability memory

262
00:12:45,830 --> 00:12:47,600
is considered garbage when it's no

263
00:12:47,600 --> 00:12:49,550
longer reachable or accessible in your

264
00:12:49,550 --> 00:12:53,990
code this usually tends to be data that

265
00:12:53,990 --> 00:12:56,960
is not reserved for local variables or

266
00:12:56,960 --> 00:12:59,150
function parameters or global variables

267
00:12:59,150 --> 00:13:03,260
if you look back into the heap the way

268
00:13:03,260 --> 00:13:05,150
that we can determine what is considered

269
00:13:05,150 --> 00:13:07,580
garbage is by traversing through our

270
00:13:07,580 --> 00:13:09,500
heap so you can start off at the root

271
00:13:09,500 --> 00:13:12,140
node anything that you can access by

272
00:13:12,140 --> 00:13:14,440
traveling through nodes in the heap is

273
00:13:14,440 --> 00:13:16,750
considered accessible and reachable

274
00:13:16,750 --> 00:13:18,920
things that you can access are not

275
00:13:18,920 --> 00:13:22,700
reachable in their garbage so these two

276
00:13:22,700 --> 00:13:30,610
your out garbage but how exactly does

277
00:13:30,610 --> 00:13:32,870
JavaScript collect garbage or the v8

278
00:13:32,870 --> 00:13:35,990
engine collect garbage we know how the

279
00:13:35,990 --> 00:13:37,460
allocates memory we know what it

280
00:13:37,460 --> 00:13:39,430
considers garbage how does it collect it

281
00:13:39,430 --> 00:13:44,540
and the v8 engine employs something

282
00:13:44,540 --> 00:13:46,790
called stop the world technique for

283
00:13:46,790 --> 00:13:48,350
garbage collection and so what happens

284
00:13:48,350 --> 00:13:53,140
is programs halted like complete stop

285
00:13:53,140 --> 00:13:58,850
and then there's a pause and that pause

286
00:13:58,850 --> 00:14:00,800
there's a moment where the garbage

287
00:14:00,800 --> 00:14:03,710
collector runs and it's a brief short

288
00:14:03,710 --> 00:14:05,870
cycle and that's really to offset that

289
00:14:05,870 --> 00:14:07,310
performance hindrance so you're just

290
00:14:07,310 --> 00:14:09,370
running quick garbage collection cycles

291
00:14:09,370 --> 00:14:13,670
in pauses in between your program this

292
00:14:13,670 --> 00:14:15,610
next step is going to be a perfect

293
00:14:15,610 --> 00:14:19,930
representation of what this means

294
00:14:19,940 --> 00:14:23,210
yes we've all seen this um so if you

295
00:14:23,210 --> 00:14:25,190
remember earlier we talked about the new

296
00:14:25,190 --> 00:14:29,900
space and the old space and so when you

297
00:14:29,900 --> 00:14:32,270
start to go through these garbage

298
00:14:32,270 --> 00:14:34,820
collection cycles the v8 engine has

299
00:14:34,820 --> 00:14:36,980
different approaches to how it collects

300
00:14:36,980 --> 00:14:39,170
garbage in the new space and how it

301
00:14:39,170 --> 00:14:42,470
collects garbage in the old space so

302
00:14:42,470 --> 00:14:44,540
we'll start off by talking about how it

303
00:14:44,540 --> 00:14:51,620
collects garbage in the new space and

304
00:14:51,620 --> 00:14:54,920
and before I go there this sort of idea

305
00:14:54,920 --> 00:14:57,530
of having a different garbage collection

306
00:14:57,530 --> 00:15:02,060
approach to old memory or and to old

307
00:15:02,060 --> 00:15:03,770
data versus new data is known as a

308
00:15:03,770 --> 00:15:07,340
generational garbage collector just

309
00:15:07,340 --> 00:15:08,750
think you're kind of like approaching

310
00:15:08,750 --> 00:15:10,430
the age of your memory in-app

311
00:15:10,430 --> 00:15:12,140
generations and you're treating each one

312
00:15:12,140 --> 00:15:20,210
differently and so let's talk about how

313
00:15:20,210 --> 00:15:23,390
garbage is collected in the new space

314
00:15:23,390 --> 00:15:25,730
and it's a process known as scavenging

315
00:15:25,730 --> 00:15:29,660
and so generally memory and the new

316
00:15:29,660 --> 00:15:31,640
space is collected more quickly than

317
00:15:31,640 --> 00:15:33,410
memory in the old space just because

318
00:15:33,410 --> 00:15:34,430
it's newer

319
00:15:34,430 --> 00:15:37,460
um and what tends to happen is when your

320
00:15:37,460 --> 00:15:40,670
new space is filled the v8 engines going

321
00:15:40,670 --> 00:15:42,380
to go ahead and start a scavenging

322
00:15:42,380 --> 00:15:44,930
garbage collection cycle in the new

323
00:15:44,930 --> 00:15:47,120
space and what happens in this Gavan

324
00:15:47,120 --> 00:15:49,670
process is your garbage collector is

325
00:15:49,670 --> 00:15:51,580
going to go through your entire heap

326
00:15:51,580 --> 00:15:53,870
it's going to traverse it starting from

327
00:15:53,870 --> 00:15:56,420
the route it's going to make copies of

328
00:15:56,420 --> 00:15:59,570
everything that it traverses and it's

329
00:15:59,570 --> 00:16:01,670
going to clear out what was previously

330
00:16:01,670 --> 00:16:05,150
in the new space and so the copies it

331
00:16:05,150 --> 00:16:07,400
has made is everything that it could

332
00:16:07,400 --> 00:16:09,610
reach in a traversal of the heap and

333
00:16:09,610 --> 00:16:11,510
everything that I couldn't reach and

334
00:16:11,510 --> 00:16:13,340
couldn't copy is considered garbage

335
00:16:13,340 --> 00:16:17,000
memory so that's okay now for those of

336
00:16:17,000 --> 00:16:18,320
you are paying attention to how this

337
00:16:18,320 --> 00:16:20,000
technique works you might realize the

338
00:16:20,000 --> 00:16:22,130
fundamental problem with it which is

339
00:16:22,130 --> 00:16:24,940
that it has a very high space complexity

340
00:16:24,940 --> 00:16:28,340
you need to have double the amount of

341
00:16:28,340 --> 00:16:30,140
memory that is the size of your new

342
00:16:30,140 --> 00:16:32,050
space for that copying over

343
00:16:32,050 --> 00:16:34,749
and this might be a kind of

344
00:16:34,749 --> 00:16:36,610
consequential thing but is if you recall

345
00:16:36,610 --> 00:16:40,420
the data in the new space is younger

346
00:16:40,420 --> 00:16:42,639
smaller data so the sort of fact that

347
00:16:42,639 --> 00:16:44,290
you need double the size of the new

348
00:16:44,290 --> 00:16:48,670
space is not that big a deal so if we go

349
00:16:48,670 --> 00:16:54,489
back to our lovely memory heap we're

350
00:16:54,489 --> 00:16:57,699
going to start off at the red root node

351
00:16:57,699 --> 00:17:00,249
and then traverse over to the blue and

352
00:17:00,249 --> 00:17:02,319
then go over to the two blues and then

353
00:17:02,319 --> 00:17:04,720
go over to the greens and our garbage

354
00:17:04,720 --> 00:17:07,029
nodes are never traversed and they're

355
00:17:07,029 --> 00:17:08,620
never each and they're never copied over

356
00:17:08,620 --> 00:17:11,799
and they're just like obliterated into

357
00:17:11,799 --> 00:17:17,860
nothingness and then for the old data

358
00:17:17,860 --> 00:17:19,870
space um there's a different technique

359
00:17:19,870 --> 00:17:21,939
that's gets used and it's the mark and

360
00:17:21,939 --> 00:17:26,409
sweep technique and the mark and sweep

361
00:17:26,409 --> 00:17:28,899
technique works by traversing the nodes

362
00:17:28,899 --> 00:17:31,960
in the heap marking the ones that are

363
00:17:31,960 --> 00:17:34,270
active and then removing unmarked

364
00:17:34,270 --> 00:17:36,669
objects on a regular basis and I know

365
00:17:36,669 --> 00:17:39,610
that was a super cryptic description and

366
00:17:39,610 --> 00:17:42,700
I could like for you guys right now with

367
00:17:42,700 --> 00:17:44,260
an entire discussion on mark-and-sweep

368
00:17:44,260 --> 00:17:47,980
um but I want you to stay my friends I

369
00:17:47,980 --> 00:17:50,770
really hope you do ah so I won't torture

370
00:17:50,770 --> 00:17:53,639
you that way but in all seriousness

371
00:17:53,639 --> 00:17:56,279
mark-and-sweep has a very rich history

372
00:17:56,279 --> 00:18:00,520
in computing and it merits its own 30

373
00:18:00,520 --> 00:18:02,409
minute maybe 45 minute talk if the

374
00:18:02,409 --> 00:18:04,659
organizers will let me but if you guys

375
00:18:04,659 --> 00:18:07,630
just want to grab me during lunch maybe

376
00:18:07,630 --> 00:18:08,799
do it tomorrow because I'm still

377
00:18:08,799 --> 00:18:12,190
jet-lagged but yes I'm happy to talk

378
00:18:12,190 --> 00:18:17,889
about it so at this point you're almost

379
00:18:17,889 --> 00:18:21,460
almost masters of memory management or

380
00:18:21,460 --> 00:18:23,409
JavaScript you have an understanding of

381
00:18:23,409 --> 00:18:25,840
why we care about it what memory

382
00:18:25,840 --> 00:18:27,750
management is in a general perspective

383
00:18:27,750 --> 00:18:30,639
how it works in JavaScript how the v8

384
00:18:30,639 --> 00:18:33,610
garbage collector works now you want to

385
00:18:33,610 --> 00:18:36,370
start to apply these and only the best

386
00:18:36,370 --> 00:18:39,100
way to approach this is to start by

387
00:18:39,100 --> 00:18:43,810
asking yourself two simple questions

388
00:18:43,820 --> 00:18:46,650
which is how much memory is my

389
00:18:46,650 --> 00:18:48,630
application using and you're never going

390
00:18:48,630 --> 00:18:51,270
to get a solid quantified answer for

391
00:18:51,270 --> 00:18:55,260
this because that's not how it works but

392
00:18:55,260 --> 00:18:57,870
you can start to develop ranges you can

393
00:18:57,870 --> 00:18:59,880
start develop metrics with how much

394
00:18:59,880 --> 00:19:01,200
memory you're comfortable with having

395
00:19:01,200 --> 00:19:03,900
your application use and when you

396
00:19:03,900 --> 00:19:05,700
develop these metrics it's important to

397
00:19:05,700 --> 00:19:08,549
consider that your application runs in

398
00:19:08,549 --> 00:19:11,580
the context of other applications so

399
00:19:11,580 --> 00:19:14,400
like all eight gigabytes of memory or

400
00:19:14,400 --> 00:19:16,320
all four gigabytes of memory on a

401
00:19:16,320 --> 00:19:18,659
machine like belong to you entirely

402
00:19:18,659 --> 00:19:21,630
which is sad you're sharing these lots

403
00:19:21,630 --> 00:19:23,130
of other applications if you've seen

404
00:19:23,130 --> 00:19:26,490
people use like 48 tabs in their Chrome

405
00:19:26,490 --> 00:19:27,750
browser and you're like why do you

406
00:19:27,750 --> 00:19:31,770
torture your browser like that you have

407
00:19:31,770 --> 00:19:33,539
to like share memory with all of the

408
00:19:33,539 --> 00:19:38,070
other taps that they have open and the

409
00:19:38,070 --> 00:19:39,539
second question that you want to ask is

410
00:19:39,539 --> 00:19:41,720
how often does the garbage collector

411
00:19:41,720 --> 00:19:44,730
cycle in my application how often does

412
00:19:44,730 --> 00:19:46,740
it run and you can actually find this

413
00:19:46,740 --> 00:19:48,539
out all I don't have pictures of it in

414
00:19:48,539 --> 00:19:51,570
my talk but if you use the chrome dev

415
00:19:51,570 --> 00:19:55,740
tools timeline tab thing that shows all

416
00:19:55,740 --> 00:19:57,000
the stuff that's happening in your

417
00:19:57,000 --> 00:20:01,049
application Jake will explain later you

418
00:20:01,049 --> 00:20:03,240
can actually find when garbage

419
00:20:03,240 --> 00:20:05,510
collection cycles are running in your

420
00:20:05,510 --> 00:20:07,230
application you can determine how

421
00:20:07,230 --> 00:20:08,880
frequently they're occurring that might

422
00:20:08,880 --> 00:20:11,520
be symptomatic of how fast stuff is

423
00:20:11,520 --> 00:20:13,260
allocating in the new space so if you're

424
00:20:13,260 --> 00:20:16,020
like aggressively allocating new memory

425
00:20:16,020 --> 00:20:17,549
and a loop or something like that you

426
00:20:17,549 --> 00:20:20,700
might want optimize that there's like

427
00:20:20,700 --> 00:20:23,970
stuff you can do that brings us to the

428
00:20:23,970 --> 00:20:26,659
right tools for really messy job

429
00:20:26,659 --> 00:20:29,250
debugging memory is no fun like I'm

430
00:20:29,250 --> 00:20:31,530
surprised most of you are still engaged

431
00:20:31,530 --> 00:20:36,299
in this talk way to go good job but good

432
00:20:36,299 --> 00:20:41,070
tools can make it much easier and so the

433
00:20:41,070 --> 00:20:45,059
first awesome tool once again in chrome

434
00:20:45,059 --> 00:20:45,900
dev tools

435
00:20:45,900 --> 00:20:48,510
there's tons of awesome tools and chrome

436
00:20:48,510 --> 00:20:50,340
dev tools mostly because the folks at

437
00:20:50,340 --> 00:20:52,559
Google are building lots of very memory

438
00:20:52,559 --> 00:20:53,100
intense

439
00:20:53,100 --> 00:20:55,919
applications things like Gmail things

440
00:20:55,919 --> 00:20:57,870
like Google Drive and so you know if the

441
00:20:57,870 --> 00:20:59,910
like Google Drive team or the Gmail team

442
00:20:59,910 --> 00:21:03,030
is like and we need tools to like debug

443
00:21:03,030 --> 00:21:05,429
figure out memory in our applications

444
00:21:05,429 --> 00:21:07,950
they'll like go go bug the chrome team

445
00:21:07,950 --> 00:21:09,179
and the chrome team will be all like

446
00:21:09,179 --> 00:21:12,030
alright we're at your service and so the

447
00:21:12,030 --> 00:21:14,090
result is that there's a rich toolset

448
00:21:14,090 --> 00:21:18,480
for inspecting heap allocation and for

449
00:21:18,480 --> 00:21:20,880
examining and profiling our applications

450
00:21:20,880 --> 00:21:23,190
and dev tools yeah that's great for us

451
00:21:23,190 --> 00:21:27,150
as programmers and so this is a snapshot

452
00:21:27,150 --> 00:21:30,570
that I took of the chrome dev tools heap

453
00:21:30,570 --> 00:21:32,640
allocation profiler running on the

454
00:21:32,640 --> 00:21:35,549
Facebook web application and there's

455
00:21:35,549 --> 00:21:37,799
sort of two curious things that I want

456
00:21:37,799 --> 00:21:40,650
to point everyone to which are the

457
00:21:40,650 --> 00:21:43,080
retained size and the shallow size of an

458
00:21:43,080 --> 00:21:44,789
object and you'll see these mentioned a

459
00:21:44,789 --> 00:21:47,640
lot when you start to like independently

460
00:21:47,640 --> 00:21:49,440
research memory management because I got

461
00:21:49,440 --> 00:21:52,950
you so excited about it the shallow size

462
00:21:52,950 --> 00:21:55,559
of an object is the amount of memory

463
00:21:55,559 --> 00:21:58,740
that it holds in and of itself and the

464
00:21:58,740 --> 00:22:02,280
retained size is its size and all of its

465
00:22:02,280 --> 00:22:03,870
dependents if it's pointing to anything

466
00:22:03,870 --> 00:22:05,490
in the heap structure it's all of those

467
00:22:05,490 --> 00:22:08,640
and the chrome dev tools allows you to

468
00:22:08,640 --> 00:22:14,190
see that oh my god there's there had to

469
00:22:14,190 --> 00:22:17,460
be an NPM command and this after load is

470
00:22:17,460 --> 00:22:19,380
talk yay

471
00:22:19,380 --> 00:22:21,900
another great thing about having tools

472
00:22:21,900 --> 00:22:23,970
like NPM available to us is that people

473
00:22:23,970 --> 00:22:26,190
can build utilities to help other

474
00:22:26,190 --> 00:22:28,110
programmers do their stuff and things

475
00:22:28,110 --> 00:22:30,929
better and so we're all happy people as

476
00:22:30,929 --> 00:22:33,299
a particular utility that I want to

477
00:22:33,299 --> 00:22:38,190
showcase here is called heap dump um

478
00:22:38,190 --> 00:22:41,190
heap dump is a JavaScript library that

479
00:22:41,190 --> 00:22:43,260
you can install for node and it allows

480
00:22:43,260 --> 00:22:46,230
you to take a snapshot of your heap at a

481
00:22:46,230 --> 00:22:48,570
particular instance and it's a super

482
00:22:48,570 --> 00:22:50,460
easy to use library it's got a very

483
00:22:50,460 --> 00:22:52,320
simple API there's only like one

484
00:22:52,320 --> 00:22:54,480
function that exports which is write

485
00:22:54,480 --> 00:22:57,840
snapshot what you can do is you can take

486
00:22:57,840 --> 00:22:59,520
a snapshot of your application at a

487
00:22:59,520 --> 00:23:02,400
particular instant and you'll get a file

488
00:23:02,400 --> 00:23:03,990
with a dot heap snapshot

489
00:23:03,990 --> 00:23:05,520
extension and then you can actually load

490
00:23:05,520 --> 00:23:08,640
it into the chrome dev tools profiler

491
00:23:08,640 --> 00:23:10,530
and start to analyze it inside that

492
00:23:10,530 --> 00:23:12,150
really awesome interface that the team

493
00:23:12,150 --> 00:23:14,370
at chrome built instead of reading the

494
00:23:14,370 --> 00:23:17,760
like raw Heath snapshot file don't don't

495
00:23:17,760 --> 00:23:18,960
do that that's not smart

496
00:23:18,960 --> 00:23:25,350
spare yourself the trouble awesome so

497
00:23:25,350 --> 00:23:27,920
I'm going to try and stay on time um

498
00:23:27,920 --> 00:23:30,540
here with four minutes left

499
00:23:30,540 --> 00:23:32,610
I mentioned that I put together a

500
00:23:32,610 --> 00:23:37,410
resource for everyone here today ah that

501
00:23:37,410 --> 00:23:41,660
I will show off now um

502
00:23:41,660 --> 00:23:46,410
awesome okay hopefully everyone can see

503
00:23:46,410 --> 00:23:49,040
this awesome so this is just a

504
00:23:49,040 --> 00:23:52,530
interactive experience that I set up and

505
00:23:52,530 --> 00:23:54,270
it starts off with the very basic

506
00:23:54,270 --> 00:23:58,290
console logging things um and you start

507
00:23:58,290 --> 00:24:00,950
to get familiar with the heap dump tool

508
00:24:00,950 --> 00:24:03,330
in writing snapshots and there are some

509
00:24:03,330 --> 00:24:05,160
questions for you to think about this is

510
00:24:05,160 --> 00:24:06,960
basically a homework assignment so I'm

511
00:24:06,960 --> 00:24:08,820
like I'm like your college ciass

512
00:24:08,820 --> 00:24:11,309
professor that you hated but hopefully

513
00:24:11,309 --> 00:24:17,030
funnier um so I'm going to go ahead and

514
00:24:17,030 --> 00:24:21,660
publish this really quickly so if it

515
00:24:21,660 --> 00:24:27,450
works awesome I'm going to live tweet it

516
00:24:27,450 --> 00:24:33,660
out awesome so this way you guys will be

517
00:24:33,660 --> 00:24:38,010
able to see I can't live code in my

518
00:24:38,010 --> 00:24:39,600
presentation so the least I could do is

519
00:24:39,600 --> 00:24:47,400
like live tweet that'll help right

520
00:24:47,410 --> 00:25:04,570
also

521
00:25:04,580 --> 00:25:07,099
there's probably a typo in that as is

522
00:25:07,099 --> 00:25:09,679
there a typo and all my tweets thank you

523
00:25:09,679 --> 00:25:13,609
for the applause I know that was all of

524
00:25:13,609 --> 00:25:15,349
computation led up to that

525
00:25:15,349 --> 00:25:18,320
um awesome so feel free to check out

526
00:25:18,320 --> 00:25:20,209
that tool there is a link to that github

527
00:25:20,209 --> 00:25:22,129
repository for it so if you have trouble

528
00:25:22,129 --> 00:25:24,799
with it or like you're confused my my

529
00:25:24,799 --> 00:25:26,269
directions or you think there should be

530
00:25:26,269 --> 00:25:27,739
more jokes in there just open up an

531
00:25:27,739 --> 00:25:31,369
issue and I'll address it if you want to

532
00:25:31,369 --> 00:25:33,169
get the slides for this talk they're

533
00:25:33,169 --> 00:25:36,950
available at sofia Rox um there's a talk

534
00:25:36,950 --> 00:25:39,259
section on my website and if you scroll

535
00:25:39,259 --> 00:25:42,789
down you'll see all the good stuff and

536
00:25:42,789 --> 00:25:46,190
finally thanks for being a wonderful

537
00:25:46,190 --> 00:25:48,529
audience thanks to the organizers for

538
00:25:48,529 --> 00:25:50,539
putting this together and for like

539
00:25:50,539 --> 00:25:53,149
bringing us all here I'll try and get a

540
00:25:53,149 --> 00:25:54,709
lot of sleep tonight so I can like

541
00:25:54,709 --> 00:25:56,539
actually communicate and interact with

542
00:25:56,539 --> 00:25:57,950
you people without being jet-lagged

543
00:25:57,950 --> 00:26:01,219
insane but thanks I hope my talk was

544
00:26:01,219 --> 00:26:03,019
like super informative and you took

545
00:26:03,019 --> 00:26:05,209
something away from it or you just like

546
00:26:05,209 --> 00:26:07,039
liked my jokes that's fine too I'll stop

547
00:26:07,039 --> 00:26:08,509
talking now and Jake can come up and

