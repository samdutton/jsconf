1
00:00:01,640 --> 00:00:27,070
Thank you, I'm a software develop per at bark
box in New York City where we develop apps

2
00:00:27,070 --> 00:00:35,510
to keep dogs happy and healthy.
This is a picture of my dog, SmallTalk and

3
00:00:35,510 --> 00:00:43,320
me, this is a picture of a picture of me eating
noodles, and this is a picture of SmallTalk

4
00:00:43,320 --> 00:00:52,739
eating noodles, now that you know all about
me, let's talk about type coercion in JavaScript

5
00:00:52,739 --> 00:00:56,899
I've been programming predominantly with JavaScript
for the past couple of years and I've gotten

6
00:00:56,899 --> 00:01:03,820
pretty familiar with many of it's quirks,
one of it's quirks being type coercion, I

7
00:01:03,820 --> 00:01:09,320
hope to provide a better understanding how
JavaScript converts between types and the

8
00:01:09,320 --> 00:01:13,240
various situations in which it performs type
coercion.

9
00:01:13,240 --> 00:01:20,210
Butt let's back up, let's talk about type
conversion in general. Wikipedia says that

10
00:01:20,210 --> 00:01:27,149
type conversion, otherwise known as typecasting
or type coercion, is implicitly or explicitly

11
00:01:27,149 --> 00:01:33,430
changing an entity of one data type into another.
So, what does that mean more simply? That's

12
00:01:33,430 --> 00:01:40,880
taking a type for example an Int and converting
it the another type, a string. So, how does

13
00:01:40,880 --> 00:01:46,860
JavaScript handle type conversion? JavaScript
is dynamically typed, as many of you know,

14
00:01:46,860 --> 00:01:51,789
which means that variable types are determined
during script execution at Runtime.

15
00:01:51,789 --> 00:01:58,359
So, here, type conversion can happen in two
ways. They can be explicitly specified by

16
00:01:58,359 --> 00:02:04,140
the developer in the code, like for example,
directly calling Parsint which converts a

17
00:02:04,140 --> 00:02:14,260
string to an integer or to string or implicitly
performed with type JavaScript. This type

18
00:02:14,260 --> 00:02:19,090
of conversion is typically referred to as
type coercion, and type coercion is what we're

19
00:02:19,090 --> 00:02:25,709
focusing on today. So, why do I have to learn
this? Honestly, it's very much built into

20
00:02:25,709 --> 00:02:30,550
the language. It kind of comes with the territory
of JavaScript being die familiarically type

21
00:02:30,550 --> 00:02:31,550
language.

22
00:02:31,550 --> 00:02:38,370
The example type coercion is happening even
with something as simple as a basic "if" statement.

23
00:02:38,370 --> 00:02:45,261
In this example here we know that if successful
value.length will return an integer that would

24
00:02:45,261 --> 00:02:51,050
be the length of the value. However, the if
statement here is expecting a pool Leon condition

25
00:02:51,050 --> 00:02:59,860
integer is not a Boolean. It converts it into
a Boolean in order to evaluate this expression.

26
00:02:59,860 --> 00:03:05,330
Type expression can also offer more flexibility
and can be convenient at times like when you're

27
00:03:05,330 --> 00:03:11,140
dealing with user input. And finally, get
to know your language better, it's always

28
00:03:11,140 --> 00:03:16,599
important to understand what's happening underneath
the hood. So let's build some foundational

29
00:03:16,599 --> 00:03:17,599
knowledge.

30
00:03:17,599 --> 00:03:24,241
Let's talk about converting types. There are
two categories of types in JavaScript, you

31
00:03:24,241 --> 00:03:30,409
have the simple types, which are numbers,
strings, Boolean, the values true and false

32
00:03:30,409 --> 00:03:37,900
Nul will and undefined everything else is
an October, arrays, functions, regular expressions

33
00:03:37,900 --> 00:03:45,620
and of course objects. In the next three slides
I'm going to try to define JavaScript typically

34
00:03:45,620 --> 00:03:50,331
implicitly converts between different types
and use this knowledge for the remainder of

35
00:03:50,331 --> 00:03:57,329
the talk. So how does JavaScript convert from
simple types to numbers, for strings there's

36
00:03:57,329 --> 00:04:04,390
an attempt to parse the string to a number,
otherwise it returns an NaN or not a number.

37
00:04:04,390 --> 00:04:06,799
Boolean is converted to one, false is cob
verdicted to positive zero. \h‑‑ converted

38
00:04:06,799 --> 00:04:17,510
to positive zero. Nu is converted to positive
zero and undefined is converted to not a number.

39
00:04:17,510 --> 00:04:23,960
What about converting simple types to Boolean,
numbers are converted to true unless the value

40
00:04:23,960 --> 00:04:30,430
is positive zero, negative zero or not a number
these are converted to false, and strings

41
00:04:30,430 --> 00:04:35,440
converted to true unless the value is the
empty string which is converted to false,

42
00:04:35,440 --> 00:04:40,690
Nul and undefined are both converted to false.

43
00:04:40,690 --> 00:04:45,690
And and finally what about objects, how are
objects converted. When converting objects

44
00:04:45,690 --> 00:04:51,130
to numbers and strineses JavaScript will try
to convert the objects\h‑‑ by implicitly

45
00:04:51,130 --> 00:04:57,650
calling value of on the object. Or if value
of isn't defined or didn't return a primitive

46
00:04:57,650 --> 00:05:04,190
type when called it will try to call two string
on the object inside. Converting objects to

47
00:05:04,190 --> 00:05:10,330
Booleans is a bit simpler, they're converted
to true. So let's take these guidelines and

48
00:05:10,330 --> 00:05:15,920
apply them to a few situations and let's start
with conditional statements first.

49
00:05:15,920 --> 00:05:21,920
But let's quickly just make sure we're all
on the same page about truth and falsey values

50
00:05:21,920 --> 00:05:32,240
in JTPA. Some examples of values that translate
to true is 123, the string "smallTalk" the

51
00:05:32,240 --> 00:05:38,860
Boolean true, and objects. Some examples of
values that evaluate to false in JTPA are

52
00:05:38,860 --> 00:05:48,100
the integer 0, not a number, the empty string,
the Boolean fault, null and of course undefined.

53
00:05:48,100 --> 00:05:53,650
The conditional statements if for wile and
do while aliening to valuablee valuable conditions,

54
00:05:53,650 --> 00:06:01,410
if it does not return a Boolean openerands
are implicitly converted to ball listens,

55
00:06:01,410 --> 00:06:13,050
if example in this example Var equals document.get
element by ID SmallTalk, it looks for an element

56
00:06:13,050 --> 00:06:19,170
with a particular ID in a DOM. Wit return
an object if it finds an element or it will

57
00:06:19,170 --> 00:06:24,070
return null, if an object is returned the
if statement will implicitly return it to

58
00:06:24,070 --> 00:06:31,840
true, null will return if implicitly converted
to false.

59
00:06:31,840 --> 00:06:38,240
So switch statements are a bit special here,
similar to an if statement the expected valuable

60
00:06:38,240 --> 00:06:46,700
Boolean condition, unlike the if, when evaluating
the switch cases statements no type coercion

61
00:06:46,700 --> 00:06:54,660
is performed, so, in the previous if statement,
values coerce to true or false depending on

62
00:06:54,660 --> 00:07:03,180
whether or not get element by I D returns
an object or not. Here value will not be coerce

63
00:07:03,180 --> 00:07:09,740
true or false it will be treated as it's original
type, because of that it will never satisfy

64
00:07:09,740 --> 00:07:15,210
case statement true since neither object nor
null are equal to the Boolean true and it

65
00:07:15,210 --> 00:07:27,360
will instead enter the default case. Logical
operators, which are of course, and, and or.

66
00:07:27,360 --> 00:07:35,780
Let the conditional operators convert to Booleans
depending on the context, unlike conditional

67
00:07:35,780 --> 00:07:42,540
operators the operator is returned not the
Boolean value. So incidentally this can be

68
00:07:42,540 --> 00:07:49,800
great for setting default values. In this
example, Var value is equal to zero or apple,

69
00:07:49,800 --> 00:07:54,830
value is\h‑‑ sorry the or operator is
looking from left to right for the first true

70
00:07:54,830 --> 00:08:00,910
open aerator to undere return, it's converted
to false, apple is converted to true and some

71
00:08:00,910 --> 00:08:04,580
value is set to the string apple. T

72
00:08:04,580 --> 00:08:10,700
omohiro Matsuyamacal operators, which are,
of course, the addition and subtraction sign,

73
00:08:10,700 --> 00:08:17,410
multiplication and division sign and of course
the module operator. Opener ands are converted

74
00:08:17,410 --> 00:08:24,990
to numbers, except for dates, which for some
reason are converted to string, Var values

75
00:08:24,990 --> 00:08:32,940
equal the true plus null plus 5, true is converted
to one, null converted to zero and one + the

76
00:08:32,940 --> 00:08:40,909
zero + five is six, value set to six: The
interesting operator the take a look at here

77
00:08:40,909 --> 00:08:46,640
is the addition sign. The addition sign is
overload in the JavaScript, so that means

78
00:08:46,640 --> 00:08:54,570
not only can it do addition between two numbers
it can do string Concotenati no, when one

79
00:08:54,570 --> 00:09:00,140
is a string and the other opener and isn't,
the other opener and is converted to a string.

80
00:09:00,140 --> 00:09:07,910
In this first clam example Var example is
converted to the string maul talk + 2, the

81
00:09:07,910 --> 00:09:16,050
value set to SmallTalk + 2 is converted to
a string 2 and then Concatenated this is happening

82
00:09:16,050 --> 00:09:23,430
left to run, 1 + 2 is add together because
JavaScript isn't aware of the string that

83
00:09:23,430 --> 00:09:37,270
follows, then 1 + 2 equal to 3 is Concatenated
to 3 small talk. Relational operator time.

84
00:09:37,270 --> 00:09:41,771
Those are greater than,less than, greater
than equal to, or less than and equal to.

85
00:09:41,771 --> 00:09:48,660
Similar to the mathematical operator, opener
ands are converted to numberser here even

86
00:09:48,660 --> 00:09:54,700
dates are converted to numbers an exception
is strings are compared via lex graphical

87
00:09:54,700 --> 00:10:02,750
string comparison. Compared sequentially,
similar to how you oridance e words in a dictionary.

88
00:10:02,750 --> 00:10:08,221
Keep in mind here any comparison involving
not a number will evaluate to false. In this

89
00:10:08,221 --> 00:10:15,050
example, Var values equal to false, less than
the string 1, 2, 3, false is converted to

90
00:10:15,050 --> 00:10:22,580
0, the string 1, 2, 3 is converted to 123,
and value set to true. Because, of course,

91
00:10:22,580 --> 00:10:34,940
0 is less than 123. Now for the more Meaty
stuff, equality operator. Equality means in

92
00:10:34,940 --> 00:10:42,650
JTPA\h‑‑ values are considered equal if
they are identical Boolean values, true is

93
00:10:42,650 --> 00:10:49,090
equal to true, note call to false, if they're
identical strings, the string ABC is equal

94
00:10:49,090 --> 00:10:56,920
to string ABC but not to say ABCD. There are
also considered equal if they're numerically

95
00:10:56,920 --> 00:11:04,930
equivalent numbers 1 is equal to is 1, positive
0 is equal to negative 0 in this case.

96
00:11:04,930 --> 00:11:11,250
Values are considered equal if they're the
same object. And, again, not-a-number is special

97
00:11:11,250 --> 00:11:18,000
here, it's not equal to anything, including
itself. And as you all probably know there

98
00:11:18,000 --> 00:11:25,060
are two sets of equality open pert or in JavaScript\h‑‑
the double equal op perai to and triple. Dot

99
00:11:25,060 --> 00:11:34,170
double equal operator\h‑‑ if it determines
that the types are different. The double equals

100
00:11:34,170 --> 00:11:40,440
operator follows what's known as the abstracts
equality comparison algorithm, a series of

101
00:11:40,440 --> 00:11:44,420
22 steps used to determine the quality.

102
00:11:44,420 --> 00:11:48,250
When the expression meets one of the step
conditions, JavaScript will return true or

103
00:11:48,250 --> 00:11:54,470
false accordingly, otherwise if it reaches
the end of the series, it will return false.

104
00:11:54,470 --> 00:12:00,730
We'll get into a bit more detail about how
type coercions are performed here, but first

105
00:12:00,730 --> 00:12:10,420
let's walk through an example. So, Var value
is equal to null greater than or equal to

106
00:12:10,420 --> 00:12:16,750
zero. Using the knowledge that we obtained
about relational operators this seems pretty

107
00:12:16,750 --> 00:12:23,850
straightforward, the relational operator implicitly
converts to numbers, so null will be converted

108
00:12:23,850 --> 00:12:30,710
to zero, and, of course, steer row is greater
than or equal to zero, so values set to true.

109
00:12:30,710 --> 00:12:40,840
But let's look at another example, offed Var
value is equal to null, bobble call zero.

110
00:12:40,840 --> 00:12:47,110
This returns false. What the hell?! How does
that make sense? Everything we've learned

111
00:12:47,110 --> 00:12:54,030
so far implies that null will be converted
to zero here. But in short null is treating

112
00:12:54,030 --> 00:13:00,490
ad in a special way by a double equals operator,
it only corresponds to undefined. There is

113
00:13:00,490 --> 00:13:05,910
only one of the many strange cases that involve
the double equal operator. All due to and

114
00:13:05,910 --> 00:13:10,340
can be explained by following the abstract
equality algorithm.

115
00:13:10,340 --> 00:13:19,590
So, the abstract quality algorithm is defined
really quite clearly in the if\h‑‑ language

116
00:13:19,590 --> 00:13:26,200
specification, I don't want to bore you with
all 22 steps, by I did want to walk through

117
00:13:26,200 --> 00:13:30,530
what happens after JavaScript has determined
that the two types are different and attempts

118
00:13:30,530 --> 00:13:42,700
to type course, which are incidentally steps
14‑22 in the algorithm. Null equals undefined

119
00:13:42,700 --> 00:13:49,590
and if one opener and is a string and the
other opener and is a number the string will

120
00:13:49,590 --> 00:13:55,270
be implicitly converted to a number. If one
of the opener and s is a Boolean, the Boolean

121
00:13:55,270 --> 00:14:01,480
will be implicitly converted to a number,
if one of the operands the string or the number

122
00:14:01,480 --> 00:14:11,051
and the other operand is an object, the object
will implicitly convert to a primitive. So

123
00:14:11,051 --> 00:14:15,730
the triple equals open aerator behaves similar
to to the double equals open aerator except

124
00:14:15,730 --> 00:14:22,410
no type coercion is done, it uses straight
equality comparison algorithm, nearly identical

125
00:14:22,410 --> 00:14:31,500
to the first thirteen steps comparison algorithm.
But leaves out all the bits related type coercion,

126
00:14:31,500 --> 00:14:36,090
types must be the same initially in order
to be considered equal. Otherwise the triple

127
00:14:36,090 --> 00:14:38,940
equals operator returns false.

128
00:14:38,940 --> 00:14:43,350
Since there are no unexpected type coercions
being done, when using the triple equals operator\h‑‑

129
00:14:43,350 --> 00:14:52,300
equals results and it can be mump safer. So
the tool I cam across preparing for my talk

130
00:14:52,300 --> 00:14:58,750
was this JavaScript equality table. A graphically
displays the results of comparisons using

131
00:14:58,750 --> 00:15:04,220
the double qualms and triple equals operator,
so green means expression of evaluator to

132
00:15:04,220 --> 00:15:18,800
true, white means expression evaluator false.
Of so ininclusion\h‑‑ as amentioned earlier

133
00:15:18,800 --> 00:15:23,540
it can be dangerous to use the double equal
operator if you're not sure what you're doing,

134
00:15:23,540 --> 00:15:28,160
try to perform explicit type conversion when
you're able to do so, so that was from my

135
00:15:28,160 --> 00:15:33,149
earlier slide, calls parse in or two string.

136
00:15:33,149 --> 00:15:39,330
And use the JavaScript console and ECMA script
language resources this was provide foundational

137
00:15:39,330 --> 00:15:47,370
knowledge, but it's of course missing detail,
the ECMA script language goes into this in

138
00:15:47,370 --> 00:15:53,950
depth. It's not too terrible love a read,
surprisingly. Thanks, guys, come chat with

139
00:15:53,950 --> 00:15:56,400
me later if you'd like the discuss any of
this or tell me about your dogs (Applause)

140
00:15:56,400 --> 00:15:57,400
ask cool, so we're early, you guys get the
jump on the lunch queue. So ... head on out,

