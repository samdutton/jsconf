1
00:00:14,889 --> 00:00:15,889
Thanks, guys, for the great introduction.

2
00:00:15,889 --> 00:00:19,500
So today we're going to talk
about something that's totally practical,

3
00:00:19,500 --> 00:00:22,720
and that you can use daily in your
job.

4
00:00:22,720 --> 00:00:32,860
We are going to recreate the dialup modem
in JavaScript.

5
00:00:32,860 --> 00:00:38,220
So maybe you
guys have a memory of this.

6
00:00:38,220 --> 00:00:39,510
(Pshhhkkkkkrrrrkakingkakingkakingtshchchchchchchchchdingdingding)

7
00:00:39,510 --> 00:00:44,680
Oh, we have audio?

8
00:00:44,680 --> 00:00:47,270
So this...

9
00:00:47,270 --> 00:00:51,149
May sound familiar.

10
00:00:51,149 --> 00:00:58,660
And bring back great memories.

11
00:00:58,660 --> 00:01:06,180
Connecting to
the internet.

12
00:01:06,180 --> 00:01:13,700
That's enough of that.

13
00:01:13,700 --> 00:01:19,869
So once we were online, our experience
was something like this.

14
00:01:19,869 --> 00:01:22,210
Yes!

15
00:01:22,210 --> 00:01:24,170
Wonderful progressive loading.

16
00:01:24,170 --> 00:01:25,729
Slow connection.

17
00:01:25,729 --> 00:01:29,400
A beautiful thing.

18
00:01:29,400 --> 00:01:30,620
So who am I?

19
00:01:30,620 --> 00:01:32,550
My name is Sam Saccone.

20
00:01:32,550 --> 00:01:38,280
I'm a developer at a
consultancy in Rhode Island, called Mojotech.

21
00:01:38,280 --> 00:01:45,070
I write software by day, and
typically make problems on Open Source projects

22
00:01:45,070 --> 00:01:47,180
at night.

23
00:01:47,180 --> 00:01:53,810
So let's start off
with the question: what is sound?

24
00:01:53,810 --> 00:01:58,289
So sound is vibrations that travel through
the air.

25
00:01:58,289 --> 00:02:01,450
And for us, we pick up those vibrations, or
pressure changes, with

26
00:02:01,450 --> 00:02:05,000
our eardrum, and it's converted to an electrical
signal that our brain

27
00:02:05,000 --> 00:02:07,670
interprets, and we perceive sound.

28
00:02:07,670 --> 00:02:13,040
But in this case, my computer microphone is
picking up that sound, I'm plotting the raw

29
00:02:13,040 --> 00:02:18,350
DCM data onto the screen, and this
is what most of us think about sound when

30
00:02:18,350 --> 00:02:19,519
we see a wave form.

31
00:02:19,519 --> 00:02:30,519
An audio -- a
visualization of it.

32
00:02:30,519 --> 00:02:31,910
So what is data?

33
00:02:31,910 --> 00:02:34,980
And these are the -- sound and data are the
two components

34
00:02:34,980 --> 00:02:38,110
that are going to help us put together a modem.

35
00:02:38,110 --> 00:02:42,190
So data for a computer is
zeroes and ones.

36
00:02:42,190 --> 00:02:44,010
It's binary data.

37
00:02:44,010 --> 00:02:45,700
It's state, encoded.

38
00:02:45,700 --> 00:02:49,090
But when we use a
computer, we don't see zeroes and ones.

39
00:02:49,090 --> 00:02:50,599
We see images.

40
00:02:50,599 --> 00:02:55,110
Mp3s, zip files, git
repositories.

41
00:02:55,110 --> 00:03:01,130
So we understand the binary data through a
program which decodes

42
00:03:01,130 --> 00:03:04,709
this binary information into formats that
we're familiar with.

43
00:03:04,709 --> 00:03:07,450
That we can
perceive.

44
00:03:07,450 --> 00:03:09,870
So...

45
00:03:09,870 --> 00:03:12,000
How do we get data into audio?

46
00:03:12,000 --> 00:03:15,450
We have our wave form and we
have our binary information.

47
00:03:15,450 --> 00:03:19,160
Well, obviously it's an encoding problem.

48
00:03:19,160 --> 00:03:23,629
So we
need to figure out how to do that.

49
00:03:23,629 --> 00:03:25,540
Humans are pretty good at encoding data.

50
00:03:25,540 --> 00:03:27,230
I'm speaking to you.

51
00:03:27,230 --> 00:03:29,200
You can
understand me.

52
00:03:29,200 --> 00:03:31,299
You can understand language.

53
00:03:31,299 --> 00:03:34,130
You can understand what I'm
saying.

54
00:03:34,130 --> 00:03:36,650
I'm communicating ideas.

55
00:03:36,650 --> 00:03:40,860
However, communication breaks down when you
don't speak the language.

56
00:03:40,860 --> 00:03:42,840
If I was speaking a different language that
you

57
00:03:42,840 --> 00:03:45,330
didn't know, you wouldn't understand what
I was saying.

58
00:03:45,330 --> 00:03:48,060
You wouldn't get any
information.

59
00:03:48,060 --> 00:03:50,050
So...

60
00:03:50,050 --> 00:03:54,830
Language becomes the data encoding for speech.

61
00:03:54,830 --> 00:03:55,830
Meaning...

62
00:03:55,830 --> 00:03:59,049
This noise that I'm making would mean nothing,
unless you knew English.

63
00:03:59,049 --> 00:04:03,800
It
would just be noise.

64
00:04:03,800 --> 00:04:07,459
So how, then, do computers speak?

65
00:04:07,459 --> 00:04:10,180
How do computers talk to each other?

66
00:04:10,180 --> 00:04:12,150
Computers don't have a voice.

67
00:04:12,150 --> 00:04:14,650
Computers don't know how to say things.

68
00:04:14,650 --> 00:04:17,420
Computers need a way to verbalize.

69
00:04:17,420 --> 00:04:23,740
They need a language and a mechanism to
transmit information.

70
00:04:23,740 --> 00:04:25,979
So...

71
00:04:25,979 --> 00:04:26,979
How do we do this?

72
00:04:26,979 --> 00:04:29,590
I have my two computers, I have
a wire in between them.

73
00:04:29,590 --> 00:04:32,320
How do they talk?

74
00:04:32,320 --> 00:04:33,320
It's a good question.

75
00:04:33,320 --> 00:04:38,589
So to
understand this, I want to step back in time.

76
00:04:38,589 --> 00:04:42,900
The early days of
communications.

77
00:04:42,900 --> 00:04:48,290
There were three primary drivers for modern
day communications.

78
00:04:48,290 --> 00:04:50,130
They needed to
be fast.

79
00:04:50,130 --> 00:04:52,550
They needed to be easy to use.

80
00:04:52,550 --> 00:04:54,550
And they needed to be cheap to
implement.

81
00:04:54,550 --> 00:04:58,960
So obviously these three have been optimized
over time, but

82
00:04:58,960 --> 00:05:02,480
anything initially was great.

83
00:05:02,480 --> 00:05:10,830
So in 1792, this guy, Claude, and his brother,
were hanging out in France, and they were

84
00:05:10,830 --> 00:05:16,100
out in the fields, and they heard
the bell in the church ring.

85
00:05:16,100 --> 00:05:17,750
They said -- wow, that's great.

86
00:05:17,750 --> 00:05:19,960
That tells me
what time it is.

87
00:05:19,960 --> 00:05:22,979
They said -- well, when I'm at the house and
you're at the

88
00:05:22,979 --> 00:05:27,849
field and I want to tell you to come back,
we should figure out some bell, so

89
00:05:27,849 --> 00:05:28,890
we can communicate.

90
00:05:28,890 --> 00:05:30,860
So they went inside and got these pans.

91
00:05:30,860 --> 00:05:32,640
And said -- okay.

92
00:05:32,640 --> 00:05:33,640
Well, you're in the field.

93
00:05:33,640 --> 00:05:34,640
I've got this pan.

94
00:05:34,640 --> 00:05:36,250
I'm going to bang on it.

95
00:05:36,250 --> 00:05:39,270
And
when you hear that, you know to come back.

96
00:05:39,270 --> 00:05:42,770
So it was communication over remote
distances.

97
00:05:42,770 --> 00:05:44,710
People didn't have to be face-to-face.

98
00:05:44,710 --> 00:05:46,960
They didn't have to walk up to each other
and say something.

99
00:05:46,960 --> 00:05:49,200
They could hit
this pan, and they had this code that they

100
00:05:49,200 --> 00:05:51,270
agreed on.

101
00:05:51,270 --> 00:05:52,820
So for a while, that's
what they did.

102
00:05:52,820 --> 00:05:53,820
They hit these pans.

103
00:05:53,820 --> 00:05:54,820
They said -- hey, great.

104
00:05:54,820 --> 00:05:56,520
We can talk from
great distances.

105
00:05:56,520 --> 00:05:58,500
They said...

106
00:05:58,500 --> 00:06:00,890
Well, our neighbors are getting kind of mad.

107
00:06:00,890 --> 00:06:01,890
It's kind of loud.

108
00:06:01,890 --> 00:06:03,100
We need a better way.

109
00:06:03,100 --> 00:06:04,100
They said...

110
00:06:04,100 --> 00:06:05,100
Well, okay.

111
00:06:05,100 --> 00:06:07,000
I have this
telescope.

112
00:06:07,000 --> 00:06:09,910
So how about I look at you, and you can make
some symbols, and I

113
00:06:09,910 --> 00:06:11,409
can understand it.

114
00:06:11,409 --> 00:06:13,589
So communication over a great distance.

115
00:06:13,589 --> 00:06:16,279
So this idea
evolved and evolved, and they came up with

116
00:06:16,279 --> 00:06:18,709
this idea of an optical telegraph.

117
00:06:18,709 --> 00:06:21,580
It sounds fancy, but it's not.

118
00:06:21,580 --> 00:06:25,350
It's this tower that you can sort of see with
these needles on either end.

119
00:06:25,350 --> 00:06:27,459
And there was this code.

120
00:06:27,459 --> 00:06:28,459
One was pointed here.

121
00:06:28,459 --> 00:06:32,709
This meant A. And then the other side -- they
would then point that there, and

122
00:06:32,709 --> 00:06:35,710
so the next station would look with their
telescope and say...

123
00:06:35,710 --> 00:06:39,930
Oh, A. So they
would be able to communicate a message across

124
00:06:39,930 --> 00:06:41,360
vast distances.

125
00:06:41,360 --> 00:06:46,410
However, it had some downsides.

126
00:06:46,410 --> 00:06:48,529
If it was foggy, it didn't work.

127
00:06:48,529 --> 00:06:51,390
If it was
nighttime, it didn't work.

128
00:06:51,390 --> 00:06:52,890
It took three people to operate.

129
00:06:52,890 --> 00:06:55,130
So it was kind of
expensive.

130
00:06:55,130 --> 00:06:57,780
And it was kind of error-prone, as you can
imagine.

131
00:06:57,780 --> 00:07:00,290
If you just had
the angles -- oh, that's a B?

132
00:07:00,290 --> 00:07:04,130
No, that's an A. So it was very lossy.

133
00:07:04,130 --> 00:07:07,830
But this
was used in France widely, up until around

134
00:07:07,830 --> 00:07:09,350
1837.

135
00:07:09,350 --> 00:07:11,300
So this was a revolution.

136
00:07:11,300 --> 00:07:13,709
There are these lines all over the place in
France.

137
00:07:13,709 --> 00:07:19,020
People were like -- this
is modern day living.

138
00:07:19,020 --> 00:07:20,550
Along comes this guy.

139
00:07:20,550 --> 00:07:21,550
Samuel Morse.

140
00:07:21,550 --> 00:07:23,779
So France, they were
cutting edge.

141
00:07:23,779 --> 00:07:27,360
They were leading the front on remote communications.

142
00:07:27,360 --> 00:07:30,810
And the United States was still in the dark
ages.

143
00:07:30,810 --> 00:07:34,840
There was like one optical
telegraph line, but it wasn't really used.

144
00:07:34,840 --> 00:07:45,860
So Sam Morse was hanging out in a
show in New York, because he was a painter,

145
00:07:45,860 --> 00:07:46,860
of course.

146
00:07:46,860 --> 00:07:50,300
And he got a letter
from his father that his wife had fallen ill.

147
00:07:50,300 --> 00:07:54,099
So a guy on a horse came up,
gave him a letter -- oh, your wife is ill.

148
00:07:54,099 --> 00:07:55,099
Uh-oh.

149
00:07:55,099 --> 00:07:56,570
I better get home.

150
00:07:56,570 --> 00:08:00,120
So he
wrote a response and sent it, and before he

151
00:08:00,120 --> 00:08:04,839
even left, another horse --
actually, two days later, another person came

152
00:08:04,839 --> 00:08:06,910
and delivered another letter
that said his wife had died.

153
00:08:06,910 --> 00:08:07,910
He said...

154
00:08:07,910 --> 00:08:11,899
Wow, I never even had time to send a
response or get home, because there was such

155
00:08:11,899 --> 00:08:14,590
delay in this communication.

156
00:08:14,590 --> 00:08:17,339
So
he was distraught, and he went back to Europe

157
00:08:17,339 --> 00:08:21,780
for his wife's funeral, and he
met someone on the boat who said...

158
00:08:21,780 --> 00:08:25,180
Hey, you heard of this thing called
electricity?

159
00:08:25,180 --> 00:08:28,520
And at this time, electricity was a parlor
trick.

160
00:08:28,520 --> 00:08:30,279
People didn't
understand how it worked.

161
00:08:30,279 --> 00:08:31,820
It was viewed as kind of magical.

162
00:08:31,820 --> 00:08:32,820
Well, look.

163
00:08:32,820 --> 00:08:35,779
If I
have this magnet, and I pass a current through

164
00:08:35,779 --> 00:08:37,010
this wire, this magnet changes.

165
00:08:37,010 --> 00:08:40,630
And it's a concept of electromagnetism.

166
00:08:40,630 --> 00:08:47,550
And he had this idea that I can create
a communication system using this electromagnetism

167
00:08:47,550 --> 00:08:51,150
concept, where I pass a
current through the wire, using a rhythmic

168
00:08:51,150 --> 00:08:55,720
tone, so it's both on/off, Morse
code, and also temporal.

169
00:08:55,720 --> 00:08:58,270
So long dash, short dash.

170
00:08:58,270 --> 00:09:03,110
So he pushed forward, came
back to the United States, eventually convinced

171
00:09:03,110 --> 00:09:05,110
people that this is a real
thing.

172
00:09:05,110 --> 00:09:07,070
And people didn't want to believe him, because
it was still kind of

173
00:09:07,070 --> 00:09:08,070
weird.

174
00:09:08,070 --> 00:09:11,900
So he actually would run wires from one room
to another, and have

175
00:09:11,900 --> 00:09:16,190
people in both rooms, and send a message,
and then a third party would verify

176
00:09:16,190 --> 00:09:17,250
that the message was real.

177
00:09:17,250 --> 00:09:20,110
Because they thought it was some magic trick.

178
00:09:20,110 --> 00:09:24,940
So
Morse code kind of swept the nation.

179
00:09:24,940 --> 00:09:25,940
Everywhere was connected.

180
00:09:25,940 --> 00:09:28,630
In a matter of
20 years, 30 years.

181
00:09:28,630 --> 00:09:31,580
There were these telegraphy lines that ran
all across the

182
00:09:31,580 --> 00:09:32,580
world.

183
00:09:32,580 --> 00:09:35,110
So it made it possible for people to communicate
from one side of the

184
00:09:35,110 --> 00:09:36,470
world to the other immediately.

185
00:09:36,470 --> 00:09:44,030
So you could know the price of alligator skin
in New York, every day, versus once every

186
00:09:44,030 --> 00:09:45,030
six months.

187
00:09:45,030 --> 00:09:46,240
But people loved it.

188
00:09:46,240 --> 00:09:50,100
It
made communicating to relatives in California

189
00:09:50,100 --> 00:09:51,100
not take ten days.

190
00:09:51,100 --> 00:09:52,970
Because that
was as fast as it could happen, before this

191
00:09:52,970 --> 00:09:54,570
was invented.

192
00:09:54,570 --> 00:09:59,680
It also put out of
business the Pony Express, which is unfortunate.

193
00:09:59,680 --> 00:10:01,110
So okay, here we are.

194
00:10:01,110 --> 00:10:03,320
We have these telegraph lines running across
the

195
00:10:03,320 --> 00:10:05,060
country, across the world.

196
00:10:05,060 --> 00:10:07,060
These lines are kind of expensive to run.

197
00:10:07,060 --> 00:10:09,380
They have
them running under the ocean.

198
00:10:09,380 --> 00:10:10,380
It's crazy.

199
00:10:10,380 --> 00:10:11,860
We can talk to Europe.

200
00:10:11,860 --> 00:10:13,170
Everywhere.

201
00:10:13,170 --> 00:10:16,070
So this guy Emil comes along.

202
00:10:16,070 --> 00:10:17,460
And he says...

203
00:10:17,460 --> 00:10:18,460
Hey.

204
00:10:18,460 --> 00:10:22,200
These Morse code operators,
they're really expensive to hire.

205
00:10:22,200 --> 00:10:23,320
Incredibly expensive.

206
00:10:23,320 --> 00:10:25,870
They're like modern
day software developers.

207
00:10:25,870 --> 00:10:27,810
They can go anywhere they want.

208
00:10:27,810 --> 00:10:32,660
It's like -- oh, wow,
you can transmit 90 characters per second?

209
00:10:32,660 --> 00:10:33,890
You're amazing!

210
00:10:33,890 --> 00:10:35,820
But he said...

211
00:10:35,820 --> 00:10:37,300
Well, this is...

212
00:10:37,300 --> 00:10:39,200
I need to make this easier for normal people.

213
00:10:39,200 --> 00:10:41,320
So he came up
with this new code.

214
00:10:41,320 --> 00:10:42,320
So not Morse code.

215
00:10:42,320 --> 00:10:43,320
It's this Baudeau code.

216
00:10:43,320 --> 00:10:47,590
He came up with
a keyboard, a chorded keyboard.

217
00:10:47,590 --> 00:10:50,210
People could be trained on it a lot faster
and

218
00:10:50,210 --> 00:10:54,380
didn't have to be highly skilled to send information.

219
00:10:54,380 --> 00:10:56,090
So it became cheaper.

220
00:10:56,090 --> 00:10:57,210
It's like...

221
00:10:57,210 --> 00:11:01,300
Sought-after Morse code operator -- not necessary
anymore.

222
00:11:01,300 --> 00:11:04,390
And
what's interesting -- Baud comes from this

223
00:11:04,390 --> 00:11:05,390
guy's name.

224
00:11:05,390 --> 00:11:11,300
So a baud is a single
bit of information, how much we can send per

225
00:11:11,300 --> 00:11:15,320
second.

226
00:11:15,320 --> 00:11:19,350
So we have one operator,
one message.

227
00:11:19,350 --> 00:11:23,880
An operator on the line, you would be connected
to a single

228
00:11:23,880 --> 00:11:28,650
place, patchthroughs for a single wire, and
one person could be operating at a

229
00:11:28,650 --> 00:11:29,650
time.

230
00:11:29,650 --> 00:11:31,880
So obviously as people wanted to send more
and more messages, this

231
00:11:31,880 --> 00:11:34,460
didn't scale very well.

232
00:11:34,460 --> 00:11:39,420
So Baudeau came up with a way to multiplex
sending

233
00:11:39,420 --> 00:11:40,930
information.

234
00:11:40,930 --> 00:11:42,800
This was a temporal multiplexing.

235
00:11:42,800 --> 00:11:47,180
He realized -- hey, when people
are using these lines, most of it is empty

236
00:11:47,180 --> 00:11:49,990
space, because the person has to
read the message and translate it, and there's

237
00:11:49,990 --> 00:11:51,670
just a lot of blank space.

238
00:11:51,670 --> 00:11:56,660
So the way this works is -- there were, like,
four or five operators at a

239
00:11:56,660 --> 00:11:57,660
time.

240
00:11:57,660 --> 00:11:59,010
And everyone would hear this tick.

241
00:11:59,010 --> 00:12:00,010
Okay.

242
00:12:00,010 --> 00:12:01,010
The second tick is yours.

243
00:12:01,010 --> 00:12:02,560
Third
tick is yours.

244
00:12:02,560 --> 00:12:04,981
And people would send, and on the receiving
end, they would

245
00:12:04,981 --> 00:12:07,970
hear the tick, so they would know how to split
the messages.

246
00:12:07,970 --> 00:12:11,150
People would send
at 30, 40 words per minute.

247
00:12:11,150 --> 00:12:12,150
Hear this tick.

248
00:12:12,150 --> 00:12:14,500
Okay, next person, next person,
next person.

249
00:12:14,500 --> 00:12:18,330
So it allowed people to send up to, like,
240 baud.

250
00:12:18,330 --> 00:12:20,100
So we were
really cruising.

251
00:12:20,100 --> 00:12:21,220
1855.

252
00:12:21,220 --> 00:12:24,570
It was great.

253
00:12:24,570 --> 00:12:31,560
In parallel, this guy, Alexander Bell, he
made the telephone, actually.

254
00:12:31,560 --> 00:12:36,990
He was working on this thing called a harmonic
telegraph, or audible telegraphy.

255
00:12:36,990 --> 00:12:44,600
He figured out that -- hey, if we change the
resistance in the signal that we're sending,

256
00:12:44,600 --> 00:12:47,480
we can actually create tones.

257
00:12:47,480 --> 00:12:52,529
And he figured out that we could use tuning
forks on both ends, and we could

258
00:12:52,529 --> 00:12:57,930
use sympathetic vibration to actually send
information between two modems, and

259
00:12:57,930 --> 00:13:00,490
then stack those tones on top of each other.

260
00:13:00,490 --> 00:13:05,670
So this one was sending at A,
then B, C, D. And it allowed ten signals to

261
00:13:05,670 --> 00:13:07,970
be on one telegram line at a time.

262
00:13:07,970 --> 00:13:13,020
Which was crazy, because it means we didn't
have to run more lines, and it was

263
00:13:13,020 --> 00:13:14,020
cheaper.

264
00:13:14,020 --> 00:13:16,970
So obviously this was adapted pretty rapidly
by the Morse code

265
00:13:16,970 --> 00:13:21,290
community, because it meant that more operators
could operate on a single

266
00:13:21,290 --> 00:13:22,290
line.

267
00:13:22,290 --> 00:13:23,290
So send more messages.

268
00:13:23,290 --> 00:13:24,290
Higher throughput.

269
00:13:24,290 --> 00:13:25,290
It was great.

270
00:13:25,290 --> 00:13:27,980
And also this
eventually led to phone lines, dedicated phone

271
00:13:27,980 --> 00:13:31,190
lines, being run as well.

272
00:13:31,190 --> 00:13:32,270
So
audible multiplexing.

273
00:13:32,270 --> 00:13:33,270
What does that mean?

274
00:13:33,270 --> 00:13:34,270
Okay.

275
00:13:34,270 --> 00:13:35,270
So...

276
00:13:35,270 --> 00:13:36,270
If I...

277
00:13:36,270 --> 00:13:37,270
Okay.

278
00:13:37,270 --> 00:13:40,710
So if we
play this tone right here...

279
00:13:40,710 --> 00:13:42,300
(low tone)

280
00:13:42,300 --> 00:13:46,120
And just pay attention to this.

281
00:13:46,120 --> 00:13:47,750
And then I come in with this...

282
00:13:47,750 --> 00:13:48,750
(higher tone)

283
00:13:48,750 --> 00:13:52,660
If you're listening to one tone, you as the
receiver, it doesn't matter

284
00:13:52,660 --> 00:13:55,210
what else is going on.

285
00:13:55,210 --> 00:13:56,790
You can hear one piece of it.

286
00:13:56,790 --> 00:13:58,980
Just like the cocktail
party effect.

287
00:13:58,980 --> 00:14:02,300
You can focus in on one thing and ignore all
the noise.

288
00:14:02,300 --> 00:14:04,750
Audible
multiplexing meant that the receiver could

289
00:14:04,750 --> 00:14:09,230
listen to an individual tone and
transcribe it.

290
00:14:09,230 --> 00:14:13,210
This was automated, obviously, but this was
the basic concept

291
00:14:13,210 --> 00:14:15,250
that made multiplexing possible.

292
00:14:15,250 --> 00:14:18,670
People didn't really understand that they
were stacking frequencies and then could extract

293
00:14:18,670 --> 00:14:19,670
it.

294
00:14:19,670 --> 00:14:23,529
But it was based on very
basic concepts.

295
00:14:23,529 --> 00:14:26,279
So...

296
00:14:26,279 --> 00:14:30,529
Let's step back again.

297
00:14:30,529 --> 00:14:33,230
How is data encoded into audio?

298
00:14:33,230 --> 00:14:38,530
Well, we're using
this thing called frequency shift keying.

299
00:14:38,530 --> 00:14:43,740
So we have our frequency.

300
00:14:43,740 --> 00:14:48,300
Let's
imagine the carrier signal is our base signal.

301
00:14:48,300 --> 00:14:53,270
And we modulate that carrier
signal and create higher frequency sections.

302
00:14:53,270 --> 00:14:55,770
So your tone goes from low to
high, low to high.

303
00:14:55,770 --> 00:14:58,120
And if you look at this graph on the bottom,
you can sort

304
00:14:58,120 --> 00:15:03,500
of imagine that the wider frequencies, right
there, lower, are zero, and then

305
00:15:03,500 --> 00:15:04,640
one.

306
00:15:04,640 --> 00:15:11,610
So we can encode state into this frequency,
using this modulation scheme.

307
00:15:11,610 --> 00:15:13,670
So...

308
00:15:13,670 --> 00:15:16,480
We have this idea of audio frequency shift
keying.

309
00:15:16,480 --> 00:15:20,400
So an FSK only means
that we're shifting a frequency, but we could

310
00:15:20,400 --> 00:15:23,100
shift a frequency that we can't
hear.

311
00:15:23,100 --> 00:15:27,300
So to transmit this over phone lines, for
instance, we need to make it

312
00:15:27,300 --> 00:15:29,339
in the audible spectrum.

313
00:15:29,339 --> 00:15:31,710
Something we can hear.

314
00:15:31,710 --> 00:15:36,900
So a 10 baud modem might sound
something like this.

315
00:15:36,900 --> 00:15:39,660
(piercing tones)

316
00:15:39,660 --> 00:15:41,040
(crackling)

317
00:15:41,040 --> 00:15:42,420
Okay.

318
00:15:42,420 --> 00:15:44,490
So slow, but you can hear the individual tones.

319
00:15:44,490 --> 00:15:47,380
The frequency is
modulating from low, high, low, high.

320
00:15:47,380 --> 00:15:52,350
And you can manually write down
01011101, and then you can turn that back

321
00:15:52,350 --> 00:15:56,410
into information, according to
whatever coding scheme you're using.

322
00:15:56,410 --> 00:16:01,520
Now, as modems get more and more
powerful, we are sending at a higher baud

323
00:16:01,520 --> 00:16:04,230
rate, which a human couldn't decode.

324
00:16:04,230 --> 00:16:05,520
(modem shrieking)

325
00:16:05,520 --> 00:16:09,529
So that sounds more familiar to you.

326
00:16:09,529 --> 00:16:10,980
That sounds like a modem.

327
00:16:10,980 --> 00:16:12,029
That's only
600 baud.

328
00:16:12,029 --> 00:16:18,880
As it gets faster and faster, it just sounds
like static.

329
00:16:18,880 --> 00:16:20,630
So...

330
00:16:20,630 --> 00:16:28,680
In
1980, I think we sort of had this breakthrough.

331
00:16:28,680 --> 00:16:31,330
These through points.

332
00:16:31,330 --> 00:16:33,790
We had
teletype machines.

333
00:16:33,790 --> 00:16:36,910
It allowed for non-skilled operators on both
end to send

334
00:16:36,910 --> 00:16:38,390
and receive messages.

335
00:16:38,390 --> 00:16:45,530
So I brought a version of the teletype here
today.

336
00:16:45,530 --> 00:16:46,530
So
here it is.

337
00:16:46,530 --> 00:16:48,890
This is actually a telephonic device for the
Deaf that's still in

338
00:16:48,890 --> 00:16:50,000
use today.

339
00:16:50,000 --> 00:16:53,920
It allows a Deaf person to put a phone on
top and type and send and

340
00:16:53,920 --> 00:16:55,220
receive messages.

341
00:16:55,220 --> 00:16:56,220
So...

342
00:16:56,220 --> 00:17:00,920
You guys can hear it.

343
00:17:00,920 --> 00:17:04,720
(tones beeping and crackling)

344
00:17:04,720 --> 00:17:07,569
There it is.

345
00:17:07,569 --> 00:17:09,470
All right.

346
00:17:09,470 --> 00:17:12,869
So what you're hearing there, if you pay attention
-- you can actually hear at the beginning

347
00:17:12,869 --> 00:17:16,770
-- you can hear the low and high.

348
00:17:16,770 --> 00:17:20,060
So
this is transmitting at 45.45 baud, using

349
00:17:20,060 --> 00:17:22,089
Baudeau encoding.

350
00:17:22,089 --> 00:17:26,780
So things invented
in the 1800s are being used today without

351
00:17:26,780 --> 00:17:32,020
any change, which is pretty crazy.

352
00:17:32,020 --> 00:17:36,080
So...

353
00:17:36,080 --> 00:17:38,020
That's a Teletype machine.

354
00:17:38,020 --> 00:17:40,110
We can send information over a phone line.

355
00:17:40,110 --> 00:17:43,030
It's great.

356
00:17:43,030 --> 00:17:46,790
So why did we have to do audible frequency
shift keying?

357
00:17:46,790 --> 00:17:51,060
And why
does any of this make sense?

358
00:17:51,060 --> 00:17:52,060
Well...

359
00:17:52,060 --> 00:17:53,060
Okay.

360
00:17:53,060 --> 00:17:56,020
Bell had established these phones, and people
had phone lines.

361
00:17:56,020 --> 00:17:58,720
Telegraph lines
were proprietary.

362
00:17:58,720 --> 00:18:00,500
Companies would pay for them, and then to
send a message

363
00:18:00,500 --> 00:18:02,210
would cost money.

364
00:18:02,210 --> 00:18:05,010
But a lot of people had phone lines.

365
00:18:05,010 --> 00:18:07,000
So someone said...

366
00:18:07,000 --> 00:18:11,780
Well, I hate having to pay for these companies
to send my information when I

367
00:18:11,780 --> 00:18:12,780
already have...

368
00:18:12,780 --> 00:18:13,780
I can talk to someone.

369
00:18:13,780 --> 00:18:14,780
So why can't I send information?

370
00:18:14,780 --> 00:18:17,920
Well,
I can hack the phone system.

371
00:18:17,920 --> 00:18:24,460
So an audio FSK worked on the existing
infrastructure.

372
00:18:24,460 --> 00:18:29,920
And the modem was a way to connect...

373
00:18:29,920 --> 00:18:32,650
Was a way to connect
teleprinters over regular phone lines.

374
00:18:32,650 --> 00:18:37,230
It demodulates and modulates data to be
sent over a normal phone line.

375
00:18:37,230 --> 00:18:39,070
This might not make sense, so let me explain
it.

376
00:18:39,070 --> 00:18:41,679
What the phone company does is they're smart.

377
00:18:41,679 --> 00:18:42,970
They say -- okay.

378
00:18:42,970 --> 00:18:44,820
When a
person talks into the phone, they use this

379
00:18:44,820 --> 00:18:47,030
much of the frequency spectrum.

380
00:18:47,030 --> 00:18:50,090
We
can drop out individual chunks and shift that

381
00:18:50,090 --> 00:18:54,250
entire voice transmission over
to here, so you can't hear it.

382
00:18:54,250 --> 00:18:59,040
So we can take all the phone calls that are
happening and jam it onto a single line, or

383
00:18:59,040 --> 00:19:00,570
three or four lines.

384
00:19:00,570 --> 00:19:03,410
By shifting
the audio.

385
00:19:03,410 --> 00:19:05,270
So...

386
00:19:05,270 --> 00:19:08,370
When people are trying to send information
over phone lines,

387
00:19:08,370 --> 00:19:11,040
if they're trying to send at frequencies that
the human voice doesn't send,

388
00:19:11,040 --> 00:19:12,810
and the phone lines have determined that...

389
00:19:12,810 --> 00:19:16,650
Well, humans don't talk in this
spectrum or these frequencies, so we're just

390
00:19:16,650 --> 00:19:19,720
going to drop them -- then your
data wouldn't send.

391
00:19:19,720 --> 00:19:22,400
So the modem shifts it to act like a voice.

392
00:19:22,400 --> 00:19:24,820
So you can
actually hear it, and it sounds like -- if

393
00:19:24,820 --> 00:19:26,670
someone was talking.

394
00:19:26,670 --> 00:19:28,800
And then the
phone company shifts it.

395
00:19:28,800 --> 00:19:32,700
And then on the receiving end, the phone company
unshifts it, and then the modem takes and

396
00:19:32,700 --> 00:19:35,180
shift it's to where it's supposed to
be.

397
00:19:35,180 --> 00:19:40,990
So the modem is a way to send information
in a way that maybe you weren't

398
00:19:40,990 --> 00:19:42,710
supposed to.

399
00:19:42,710 --> 00:19:45,450
All right.

400
00:19:45,450 --> 00:19:47,179
So history time is over.

401
00:19:47,179 --> 00:19:51,960
Let's talk about some JavaScript.

402
00:19:51,960 --> 00:19:56,160
So
recreating a modem in the browser with JavaScript.

403
00:19:56,160 --> 00:20:00,270
There's a few pieces that
we need to do this.

404
00:20:00,270 --> 00:20:01,940
The first is...

405
00:20:01,940 --> 00:20:03,190
Oscillator node.

406
00:20:03,190 --> 00:20:05,710
Pretty simple.

407
00:20:05,710 --> 00:20:06,710
It allows
us to...

408
00:20:06,710 --> 00:20:07,890
(modem shrieking)

409
00:20:07,890 --> 00:20:11,450
We can make some cool music.

410
00:20:11,450 --> 00:20:16,350
But it allows us to shift the frequency over
time.

411
00:20:16,350 --> 00:20:19,240
Frequency, time, and shift.

412
00:20:19,240 --> 00:20:21,250
Those were the words I said before.

413
00:20:21,250 --> 00:20:23,630
And now
we can just apply that.

414
00:20:23,630 --> 00:20:29,920
Put some data in it, I think.

415
00:20:29,920 --> 00:20:31,370
Okay.

416
00:20:31,370 --> 00:20:32,830
So...

417
00:20:32,830 --> 00:20:35,059
Now we can
shift this frequency, and now we need to do

418
00:20:35,059 --> 00:20:38,090
some processing of this audio
data.

419
00:20:38,090 --> 00:20:40,220
So the API is in flux still.

420
00:20:40,220 --> 00:20:42,910
But right now it's called the script
processor node.

421
00:20:42,910 --> 00:20:46,150
And what it allows us to do is process chunks
of audio just in

422
00:20:46,150 --> 00:20:49,120
time, with a given bin size and sampling rate.

423
00:20:49,120 --> 00:20:50,300
Those are just words.

424
00:20:50,300 --> 00:20:53,420
It
doesn't mean anything.

425
00:20:53,420 --> 00:20:54,980
It's fine.

426
00:20:54,980 --> 00:20:55,980
But it's important.

427
00:20:55,980 --> 00:20:59,299
It allows us to look at the raw PCM data and
run some math

428
00:20:59,299 --> 00:21:00,299
on it.

429
00:21:00,299 --> 00:21:01,690
All right.

430
00:21:01,690 --> 00:21:02,690
Okay.

431
00:21:02,690 --> 00:21:03,840
So we have the first two pieces.

432
00:21:03,840 --> 00:21:07,090
We can shift the
frequency, and we can look at the data.

433
00:21:07,090 --> 00:21:08,179
Okay.

434
00:21:08,179 --> 00:21:10,180
So now we need to take a string.

435
00:21:10,180 --> 00:21:11,270
And say...

436
00:21:11,270 --> 00:21:12,270
Hello!

437
00:21:12,270 --> 00:21:13,270
Oops.

438
00:21:13,270 --> 00:21:14,270
All right.

439
00:21:14,270 --> 00:21:15,270
Okay.

440
00:21:15,270 --> 00:21:16,270
Cool.

441
00:21:16,270 --> 00:21:17,270
So...

442
00:21:17,270 --> 00:21:18,270
String to binary.

443
00:21:18,270 --> 00:21:19,270
That's
not so hard.

444
00:21:19,270 --> 00:21:20,270
Just a little bit of JavaScript.

445
00:21:20,270 --> 00:21:21,270
Cool.

446
00:21:21,270 --> 00:21:22,270
All right.

447
00:21:22,270 --> 00:21:23,270
So we have our
binary.

448
00:21:23,270 --> 00:21:25,100
And we know that we can make noise.

449
00:21:25,100 --> 00:21:29,700
So now we have to take this binary
and put it into our wave form.

450
00:21:29,700 --> 00:21:35,590
So we know that we need to do that by shifting
frequency and modulating the frequency to

451
00:21:35,590 --> 00:21:38,140
high and low.

452
00:21:38,140 --> 00:21:39,840
All right.

453
00:21:39,840 --> 00:21:40,840
So...

454
00:21:40,840 --> 00:21:41,840
Okay.

455
00:21:41,840 --> 00:21:45,780
I should have played that.

456
00:21:45,780 --> 00:21:46,780
Okay.

457
00:21:46,780 --> 00:21:49,179
Redo this one.

458
00:21:49,179 --> 00:21:50,179
Okay.

459
00:21:50,179 --> 00:21:51,730
(tones playing)

460
00:21:51,730 --> 00:21:53,429
Okay, sweet.

461
00:21:53,429 --> 00:21:56,600
So if we look at this visualization of the
data, you can see

462
00:21:56,600 --> 00:21:58,630
dark patches and light patches.

463
00:21:58,630 --> 00:22:01,100
Dark patches are higher frequency.

464
00:22:01,100 --> 00:22:03,000
The light
patches obviously are lower frequency.

465
00:22:03,000 --> 00:22:04,150
So we're at 011.

466
00:22:04,150 --> 00:22:05,150
Okay.

467
00:22:05,150 --> 00:22:06,150
And you heard
it.

468
00:22:06,150 --> 00:22:07,150
Okay.

469
00:22:07,150 --> 00:22:08,150
So we've made another step.

470
00:22:08,150 --> 00:22:12,260
We can take text to binary and encode it
in a wave form by shifting the frequency using

471
00:22:12,260 --> 00:22:15,170
the oscillator node over time.

472
00:22:15,170 --> 00:22:16,650
Sweet!

473
00:22:16,650 --> 00:22:18,120
So...

474
00:22:18,120 --> 00:22:20,940
The fun part comes next.

475
00:22:20,940 --> 00:22:22,550
Which is data extraction.

476
00:22:22,550 --> 00:22:25,730
So I drew a
perfect wave form for you guys, so you can

477
00:22:25,730 --> 00:22:29,160
get a sense of what we're working
with.

478
00:22:29,160 --> 00:22:30,740
This is the hard part.

479
00:22:30,740 --> 00:22:32,790
Because we have this wave form, but how does
this

480
00:22:32,790 --> 00:22:34,990
relate to binary data?

481
00:22:34,990 --> 00:22:36,900
I just see a wave form.

482
00:22:36,900 --> 00:22:38,991
Well, remember those words that
I said before?

483
00:22:38,991 --> 00:22:41,520
The bin word?

484
00:22:41,520 --> 00:22:43,440
It's weird.

485
00:22:43,440 --> 00:22:44,640
So we have our bits.

486
00:22:44,640 --> 00:22:45,990
0, 1.

487
00:22:45,990 --> 00:22:46,990
Great.

488
00:22:46,990 --> 00:22:48,320
And
we know that we're sending at a certain baud

489
00:22:48,320 --> 00:22:49,320
rate.

490
00:22:49,320 --> 00:22:50,320
Which is bits per second.

491
00:22:50,320 --> 00:22:55,850
And we know how many bins that we get per
second.

492
00:22:55,850 --> 00:23:00,220
And so we can take our bins,
which come from the script processor node,

493
00:23:00,220 --> 00:23:03,170
and we can combine them together,
and we say -- okay.

494
00:23:03,170 --> 00:23:06,950
The sum of these bins -- or sum -- is equal
to a single

495
00:23:06,950 --> 00:23:07,950
bit.

496
00:23:07,950 --> 00:23:12,120
And then that bit is 01, and then we can pass
those zeroes and ones to

497
00:23:12,120 --> 00:23:14,580
our decoding, and then we're good.

498
00:23:14,580 --> 00:23:15,580
All right.

499
00:23:15,580 --> 00:23:18,190
With me still?

500
00:23:18,190 --> 00:23:20,900
Very good.

501
00:23:20,900 --> 00:23:22,260
So...

502
00:23:22,260 --> 00:23:27,030
How do we get from a wave to
frequency intensity?

503
00:23:27,030 --> 00:23:29,350
So we have these bins.

504
00:23:29,350 --> 00:23:34,010
And I don't know how to tell you
what frequency is happening inside those bins.

505
00:23:34,010 --> 00:23:35,490
So I went to Wikipedia.

506
00:23:35,490 --> 00:23:36,990
And I
searched.

507
00:23:36,990 --> 00:23:41,130
And then I was scared.

508
00:23:41,130 --> 00:23:44,800
So...

509
00:23:44,800 --> 00:23:46,790
There's this cool algorithm that this
guy made.

510
00:23:46,790 --> 00:23:49,570
He was on the Manhattan Project.

511
00:23:49,570 --> 00:23:54,690
Hey -- this is an algorithm for
extracting a single frequency, called the

512
00:23:54,690 --> 00:23:56,530
Goertzel algorithm.

513
00:23:56,530 --> 00:23:58,809
And all it does is
you tell it what frequency you're looking

514
00:23:58,809 --> 00:24:01,309
for, and it tells you how intense
that frequency is.

515
00:24:01,309 --> 00:24:02,730
That's it.

516
00:24:02,730 --> 00:24:05,700
And it was made to run on low powered system,
so

517
00:24:05,700 --> 00:24:06,700
I'm like -- yes!

518
00:24:06,700 --> 00:24:09,390
Perfect for JavaScript.

519
00:24:09,390 --> 00:24:13,140
And so any web audio people out there
right now -- or audio people -- were like

520
00:24:13,140 --> 00:24:16,220
-- you just should have used the
bass ban filter with the high Q value.

521
00:24:16,220 --> 00:24:17,220
You're right.

522
00:24:17,220 --> 00:24:18,220
I should have.

523
00:24:18,220 --> 00:24:19,220
And I
tried it.

524
00:24:19,220 --> 00:24:21,200
Except for...

525
00:24:21,200 --> 00:24:23,429
It was not specific enough, basically.

526
00:24:23,429 --> 00:24:25,490
So I needed
something really fine-grained.

527
00:24:25,490 --> 00:24:27,809
So I had to implement my own.

528
00:24:27,809 --> 00:24:32,860
So Goertzel allows
us to extract a single target frequency over

529
00:24:32,860 --> 00:24:33,920
time.

530
00:24:33,920 --> 00:24:38,070
So we have our bins, we
know that they relate to a bit, and we know

531
00:24:38,070 --> 00:24:43,010
the bins -- if the frequency is
high, it's a 1, and if it's low, it's a 0.

532
00:24:43,010 --> 00:24:45,240
So we're going to look for the
occurrence of our high frequency, and if it's

533
00:24:45,240 --> 00:24:48,780
not there, we're going to assume
it's a 0.

534
00:24:48,780 --> 00:24:49,910
Perfect.

535
00:24:49,910 --> 00:24:53,490
So I drew another great picture for you.

536
00:24:53,490 --> 00:24:54,870
Goertzel results in something like
this.

537
00:24:54,870 --> 00:24:59,650
We have our wave form, run over chunks of
the wave, and get these purple

538
00:24:59,650 --> 00:25:01,640
circles.

539
00:25:01,640 --> 00:25:02,640
Low or high.

540
00:25:02,640 --> 00:25:05,020
And from there, you can say -- this is a zero,
this is a

541
00:25:05,020 --> 00:25:10,320
one, this is a zero, this is a one, then we
get this weird bleedthrough.

542
00:25:10,320 --> 00:25:11,320
What
is this?

543
00:25:11,320 --> 00:25:12,320
Is it a zero or a one?

544
00:25:12,320 --> 00:25:13,320
I'm not sure.

545
00:25:13,320 --> 00:25:15,340
So it's still not working yet.

546
00:25:15,340 --> 00:25:19,070
And I was really sad.

547
00:25:19,070 --> 00:25:22,200
So we want to get this analysis to as close
to binary as

548
00:25:22,200 --> 00:25:23,200
possible.

549
00:25:23,200 --> 00:25:24,820
So I did some more Googling.

550
00:25:24,820 --> 00:25:30,410
And I came across this thing called a
Hammy window, or a windowing function.

551
00:25:30,410 --> 00:25:36,410
So since the audio that we're analyzing
is non-periodic, we get spectral leakage,

552
00:25:36,410 --> 00:25:37,940
and obviously...

553
00:25:37,940 --> 00:25:39,710
Come on.

554
00:25:39,710 --> 00:25:41,490
So...

555
00:25:41,490 --> 00:25:43,950
By
applying a hamming window, we're able to remove

556
00:25:43,950 --> 00:25:44,961
noise and lobe leakage.

557
00:25:44,961 --> 00:25:49,690
Because we can't have any of those lobes in
our audio.

558
00:25:49,690 --> 00:25:53,070
And we use a Fourier
transform, and then it works.

559
00:25:53,070 --> 00:25:54,070
Okay, cool.

560
00:25:54,070 --> 00:25:56,980
So it really is like a formula.

561
00:25:56,980 --> 00:25:58,070
It
sort of made it all work.

562
00:25:58,070 --> 00:26:00,040
I was happy about that.

563
00:26:00,040 --> 00:26:01,200
Okay.

564
00:26:01,200 --> 00:26:02,370
So...

565
00:26:02,370 --> 00:26:05,881
Let's look at what happens when we look at
the frequency and

566
00:26:05,881 --> 00:26:07,740
intensity of our audio.

567
00:26:07,740 --> 00:26:09,760
(modem shrieking)

568
00:26:09,760 --> 00:26:10,770
Cool!

569
00:26:10,770 --> 00:26:15,809
Let me run it again.

570
00:26:15,809 --> 00:26:18,059
Okay, that looks better.

571
00:26:18,059 --> 00:26:22,340
So the red is our high
bits, and you heard that lead in, the high

572
00:26:22,340 --> 00:26:23,900
and then the lead in at the end.

573
00:26:23,900 --> 00:26:26,300
Those are the marks, and our squawk, which
is our message, is the data in

574
00:26:26,300 --> 00:26:27,300
between.

575
00:26:27,300 --> 00:26:30,799
So we have this nice gap in between.

576
00:26:30,799 --> 00:26:32,870
Zero and one.

577
00:26:32,870 --> 00:26:33,870
Perfect.

578
00:26:33,870 --> 00:26:39,940
So now we
just have to make one more step.

579
00:26:39,940 --> 00:26:41,270
Of course.

580
00:26:41,270 --> 00:26:43,260
One more step.

581
00:26:43,260 --> 00:26:44,260
So...

582
00:26:44,260 --> 00:26:45,260
Let's put it
all together.

583
00:26:45,260 --> 00:26:49,320
I'm going to send this at 300 baud, because
I'm crazy.

584
00:26:49,320 --> 00:26:50,480
(modem shrieking)

585
00:26:50,480 --> 00:26:51,480
Okay.

586
00:26:51,480 --> 00:26:52,480
That one didn't work.

587
00:26:52,480 --> 00:26:53,480
Let's run it one more time.

588
00:26:53,480 --> 00:26:54,950
Still got some...

589
00:26:54,950 --> 00:26:57,120
There we go!

590
00:26:57,120 --> 00:26:58,120
Great.

591
00:26:58,120 --> 00:26:59,120
Okay.

592
00:26:59,120 --> 00:27:02,560
So it worked!

593
00:27:02,560 --> 00:27:04,460
(applause)

594
00:27:04,460 --> 00:27:06,360
Woo!

595
00:27:06,360 --> 00:27:13,690
So I'm sending text, encoding it in audio,
getting that audio, decoding it

596
00:27:13,690 --> 00:27:17,090
-- well, getting it out of the wave form,
and then decoding the binary and

597
00:27:17,090 --> 00:27:21,350
putting it back to text on the screen, and
it works!

598
00:27:21,350 --> 00:27:22,390
So...

599
00:27:22,390 --> 00:27:24,470
Pretty cool.

600
00:27:24,470 --> 00:27:25,510
So...

601
00:27:25,510 --> 00:27:27,110
Obviously that was too easy.

602
00:27:27,110 --> 00:27:28,380
Come on!

603
00:27:28,380 --> 00:27:30,419
So what if there was noise on the line?

604
00:27:30,419 --> 00:27:33,400
Like a telephone -- your mom would pick up
the phone when you're connected to

605
00:27:33,400 --> 00:27:37,010
Battlenet, you're doing great in Warcraft2,
and you're like -- mom, don't pick

606
00:27:37,010 --> 00:27:39,360
up the phone!

607
00:27:39,360 --> 00:27:41,000
And your connection drops and you've lost.

608
00:27:41,000 --> 00:27:47,940
So we've got to
handle that noise on the line.

609
00:27:47,940 --> 00:27:51,570
But remember that Goertzel thing?

610
00:27:51,570 --> 00:27:54,630
We could
extract single frequencies and ignore everything

611
00:27:54,630 --> 00:27:58,240
else in that lobe spectral
stuff.

612
00:27:58,240 --> 00:27:59,309
I think we're going to be okay.

613
00:27:59,309 --> 00:28:00,309
So let's see.

614
00:28:00,309 --> 00:28:04,830
So I've made some noise
on the line here.

615
00:28:04,830 --> 00:28:09,160
(modem shrieking with bubbling interference)

616
00:28:09,160 --> 00:28:10,160
Okay.

617
00:28:10,160 --> 00:28:11,160
So...

618
00:28:11,160 --> 00:28:15,610
We've got a little issue here.

619
00:28:15,610 --> 00:28:17,280
So web audio is a little flaky
sometimes, believe it or not.

620
00:28:17,280 --> 00:28:18,280
Especially when you're doing this.

621
00:28:18,280 --> 00:28:21,600
(modem shrieking with bubbling interference)

622
00:28:21,600 --> 00:28:23,500
Okay.

623
00:28:23,500 --> 00:28:24,809
That's better.

624
00:28:24,809 --> 00:28:26,820
So if I...

625
00:28:26,820 --> 00:28:30,710
What you're seeing here is some of this
random noise is interfering with our signal.

626
00:28:30,710 --> 00:28:32,230
The frequencies matching up.

627
00:28:32,230 --> 00:28:34,181
But
at the same time, we're still able to reconstruct

628
00:28:34,181 --> 00:28:36,090
quite a bit of the
information.

629
00:28:36,090 --> 00:28:42,150
So with some more advanced methods to look
at the data,

630
00:28:42,150 --> 00:28:43,250
reconstructing it would become trivial.

631
00:28:43,250 --> 00:28:46,220
I'll just run it one more time.

632
00:28:46,220 --> 00:28:47,750
It
works sometimes.

633
00:28:47,750 --> 00:28:49,970
I promise.

634
00:28:49,970 --> 00:28:51,080
No?

635
00:28:51,080 --> 00:28:52,190
Okay.

636
00:28:52,190 --> 00:28:54,410
Who cares?

637
00:28:54,410 --> 00:28:56,630
All right.

638
00:28:56,630 --> 00:28:58,350
So we're at 300
baud now.

639
00:28:58,350 --> 00:29:00,750
It works pretty well.

640
00:29:00,750 --> 00:29:01,830
What if we wanted more speed?

641
00:29:01,830 --> 00:29:04,039
300 baud is
incredibly slow.

642
00:29:04,039 --> 00:29:09,080
Well, of course we can multiplex it, and so
multiplexing in our case is --

643
00:29:09,080 --> 00:29:11,030
we're actually stacking the frequencies on
top.

644
00:29:11,030 --> 00:29:15,780
So I have one oscillator -- or
one high tone that's at 2200 hertz and another

645
00:29:15,780 --> 00:29:19,220
at 3000 hertz and another one
-- and so on and so forth.

646
00:29:19,220 --> 00:29:23,059
So at 300 baud with two multiplexers, we can
get

647
00:29:23,059 --> 00:29:24,340
600 baud.

648
00:29:24,340 --> 00:29:25,950
That sounds like a good number.

649
00:29:25,950 --> 00:29:28,340
Let's try that.

650
00:29:28,340 --> 00:29:30,730
(faster modem shrieking)

651
00:29:30,730 --> 00:29:33,130
Great, it worked!

652
00:29:33,130 --> 00:29:39,740
Let's go up to 1200 baud, maybe?

653
00:29:39,740 --> 00:29:41,660
(even faster modem shrieking)

654
00:29:41,660 --> 00:29:42,660
That's better!

655
00:29:42,660 --> 00:29:43,660
Still good.

656
00:29:43,660 --> 00:29:44,970
That's 1200 baud.

657
00:29:44,970 --> 00:29:48,090
Let's go a little bit faster.

658
00:29:48,090 --> 00:29:50,170
Let's have eight multiplexers.

659
00:29:50,170 --> 00:29:52,250
(very fast modem shrieking)

660
00:29:52,250 --> 00:29:53,250
Cool!

661
00:29:53,250 --> 00:29:54,250
(applause)

662
00:29:54,250 --> 00:30:02,240
So 
we are cruising.

663
00:30:02,240 --> 00:30:04,400
2400 baud.

664
00:30:04,400 --> 00:30:05,480
Yes!

665
00:30:05,480 --> 00:30:07,640
All right.

666
00:30:07,640 --> 00:30:08,720
So...

667
00:30:08,720 --> 00:30:12,720
All this basically
showed you -- this is how modems work.

668
00:30:12,720 --> 00:30:17,650
And I made it work in the browser.

669
00:30:17,650 --> 00:30:19,880
Works all right.

670
00:30:19,880 --> 00:30:21,650
But what's interesting to think is...

671
00:30:21,650 --> 00:30:24,190
How our Wi-Fi works and
how Bluetooth works.

672
00:30:24,190 --> 00:30:25,380
Doesn't use frequency modulation.

673
00:30:25,380 --> 00:30:28,960
It uses phase
modulation, but it's the same exact concepts.

674
00:30:28,960 --> 00:30:33,380
Obviously their algorithms are
way better than mine are, and things work

675
00:30:33,380 --> 00:30:37,669
a lot better, but the same
principles apply.

676
00:30:37,669 --> 00:30:41,250
So we take this concept that was originally
invented in the

677
00:30:41,250 --> 00:30:46,690
1830s, and we can trace it all the way up
to the modern day and how this is

678
00:30:46,690 --> 00:30:48,070
working right now.

679
00:30:48,070 --> 00:30:50,280
Well, okay.

680
00:30:50,280 --> 00:30:51,280
Obviously that was so boring.

681
00:30:51,280 --> 00:30:52,800
You need to do
more.

682
00:30:52,800 --> 00:30:53,800
What else can we do?

683
00:30:53,800 --> 00:30:56,340
Air gap communication with this actually works.

684
00:30:56,340 --> 00:30:59,490
Google actually came out with something the
other day called Google Tone.

685
00:30:59,490 --> 00:31:01,610
And
I was like...

686
00:31:01,610 --> 00:31:02,670
Oh, really?

687
00:31:02,670 --> 00:31:05,430
But they're using this private C API that
they

688
00:31:05,430 --> 00:31:06,610
didn't tell anyone about.

689
00:31:06,610 --> 00:31:10,740
They're offloading it to hardware more than
I am.

690
00:31:10,740 --> 00:31:14,530
But this hardware works really nice.

691
00:31:14,530 --> 00:31:19,890
Imagine you had a modem running on your
browser and someone is like -- hey, I wrote

692
00:31:19,890 --> 00:31:22,090
a better version of the firmware
for your modem.

693
00:31:22,090 --> 00:31:24,169
They could send you a JavaScript version of
the payload and

694
00:31:24,169 --> 00:31:28,039
you could dynamically reload the firmware
on your modem.

695
00:31:28,039 --> 00:31:32,570
Which is kind of
weird to think about.

696
00:31:32,570 --> 00:31:35,890
So things maybe I'll do someday.

697
00:31:35,890 --> 00:31:39,679
So all this code is
online, if you want it.

698
00:31:39,679 --> 00:31:43,130
So yeah, hopefully this shows what's possible
with

699
00:31:43,130 --> 00:31:47,960
JavaScript, and how we can step back in history,
and kind of understand where

700
00:31:47,960 --> 00:31:51,169
the things that we take for granted have come
from.

701
00:31:51,169 --> 00:31:52,429
Which I think is cool.

702
00:31:52,429 --> 00:31:53,429
So...

