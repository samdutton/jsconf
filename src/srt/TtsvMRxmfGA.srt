1
00:00:04,879 --> 00:00:07,080

so yes this is me

2
00:00:07,080 --> 00:00:10,590
at my day job detecting bugs yeah so I

3
00:00:10,590 --> 00:00:12,599
work at wetransfer as a front-end

4
00:00:12,599 --> 00:00:15,420
engineer and team Li and for me that

5
00:00:15,420 --> 00:00:18,810
means that I write mostly react HTML CSS

6
00:00:18,810 --> 00:00:22,260
a little bit of Ruby everyone again and

7
00:00:22,260 --> 00:00:25,080
I also manage a team of six and I'm

8
00:00:25,080 --> 00:00:27,180
responsible for the day-to-day delivery

9
00:00:27,180 --> 00:00:30,630
for that team and this is also me about

10
00:00:30,630 --> 00:00:32,850
six years ago I was helping run a

11
00:00:32,850 --> 00:00:35,460
workshop for young girls in New Zealand

12
00:00:35,460 --> 00:00:38,010
which is yeah where I'm from and yes I'm

13
00:00:38,010 --> 00:00:40,770
a very long way away from home but the

14
00:00:40,770 --> 00:00:42,690
idea was that we would get these young

15
00:00:42,690 --> 00:00:44,460
women into the company to sort of show

16
00:00:44,460 --> 00:00:46,170
them what it was actually like to be a

17
00:00:46,170 --> 00:00:47,149
software engineer

18
00:00:47,149 --> 00:00:50,039
they were about 14 years old and they

19
00:00:50,039 --> 00:00:51,539
were all in the same tech class at

20
00:00:51,539 --> 00:00:53,940
school and honestly I think we kind of

21
00:00:53,940 --> 00:00:56,129
blew their minds on how cool this

22
00:00:56,129 --> 00:00:58,109
actually is compared to what they were

23
00:00:58,109 --> 00:01:00,480
learning and but yeah I really want to

24
00:01:00,480 --> 00:01:02,460
encourage people to do as many of these

25
00:01:02,460 --> 00:01:04,409
kinds of programs as you can because

26
00:01:04,409 --> 00:01:06,650
it's incredibly rewarding and also

27
00:01:06,650 --> 00:01:09,240
inspirational because this was one of

28
00:01:09,240 --> 00:01:11,700
the inspirations for this talk having

29
00:01:11,700 --> 00:01:14,280
worked with junior devs quite a lot it's

30
00:01:14,280 --> 00:01:15,990
one of these things that I've noticed is

31
00:01:15,990 --> 00:01:18,119
they really struggle with debugging and

32
00:01:18,119 --> 00:01:20,549
I think that's kind of because we don't

33
00:01:20,549 --> 00:01:22,530
really teach it as a skill it's one of

34
00:01:22,530 --> 00:01:23,790
those things that you sort of expect

35
00:01:23,790 --> 00:01:26,600
developers to just pick up naturally and

36
00:01:26,600 --> 00:01:29,549
there's so much there to learn if you

37
00:01:29,549 --> 00:01:32,509
really focus on that and that's why I

38
00:01:32,509 --> 00:01:35,909
decided to write this talk hopefully

39
00:01:35,909 --> 00:01:37,229
there will be something useful in here

40
00:01:37,229 --> 00:01:39,180
no matter how deep down this hole you've

41
00:01:39,180 --> 00:01:41,640
been before but err yeah so a quick look

42
00:01:41,640 --> 00:01:44,399
at the process itself how often have you

43
00:01:44,399 --> 00:01:46,320
actually spent time thinking about how

44
00:01:46,320 --> 00:01:49,350
you debug it's easy to forget that it's

45
00:01:49,350 --> 00:01:51,270
a difficult skill that it's it's

46
00:01:51,270 --> 00:01:52,770
something that you need to master in

47
00:01:52,770 --> 00:01:54,630
order to become a really experienced

48
00:01:54,630 --> 00:01:57,000
developer and it's learnt over time and

49
00:01:57,000 --> 00:01:58,950
improve with experience and it's not

50
00:01:58,950 --> 00:02:00,540
just about the tools you use but it's

51
00:02:00,540 --> 00:02:02,430
the mindset in the process and how you

52
00:02:02,430 --> 00:02:04,530
actually work through your debugging

53
00:02:04,530 --> 00:02:07,320
tasks and it becomes particularly clear

54
00:02:07,320 --> 00:02:09,270
when we compare those new developers

55
00:02:09,270 --> 00:02:12,450
with more experienced ones often new

56
00:02:12,450 --> 00:02:13,560
developers will jump

57
00:02:13,560 --> 00:02:15,270
straight into the code they'll go and

58
00:02:15,270 --> 00:02:17,099
change a whole bunch of things they

59
00:02:17,099 --> 00:02:18,450
won't remember what they've changed and

60
00:02:18,450 --> 00:02:19,500
what they haven't and what actually

61
00:02:19,500 --> 00:02:21,120
might have fixed the problem and what

62
00:02:21,120 --> 00:02:23,160
was maybe just some extra bit of code

63
00:02:23,160 --> 00:02:24,330
that they stuck in there that wasn't

64
00:02:24,330 --> 00:02:26,610
useful at all but it's something we do

65
00:02:26,610 --> 00:02:29,220
pretty much every single day and so in

66
00:02:29,220 --> 00:02:31,620
this talk I won't go into the detail of

67
00:02:31,620 --> 00:02:34,440
how important it is to reproduce the bug

68
00:02:34,440 --> 00:02:37,019
be methodical only change one thing at a

69
00:02:37,019 --> 00:02:39,630
time how to narrow down where the bug is

70
00:02:39,630 --> 00:02:42,330
but it's surprising how often the stuff

71
00:02:42,330 --> 00:02:44,190
is not taught so if you're a junior

72
00:02:44,190 --> 00:02:45,989
developer or you're teaching junior

73
00:02:45,989 --> 00:02:48,239
developers I hope you're one of either

74
00:02:48,239 --> 00:02:49,580
of these two things

75
00:02:49,580 --> 00:02:52,200
ya do spend the time really looking into

76
00:02:52,200 --> 00:02:55,080
this stuff with them so there is one

77
00:02:55,080 --> 00:02:56,310
step that I do want to cover really

78
00:02:56,310 --> 00:02:58,230
quickly because even the most senior

79
00:02:58,230 --> 00:02:59,580
developers I've worked with and

80
00:02:59,580 --> 00:03:02,370
including myself sometimes I forget to

81
00:03:02,370 --> 00:03:04,709
write tests like this is the first thing

82
00:03:04,709 --> 00:03:06,660
that you do right if you've discovered a

83
00:03:06,660 --> 00:03:09,000
bug write a test that reproduces it

84
00:03:09,000 --> 00:03:11,610
because it not only will keep your focus

85
00:03:11,610 --> 00:03:14,400
on just that one bug it'll also speed

86
00:03:14,400 --> 00:03:16,560
you up because you no longer need to

87
00:03:16,560 --> 00:03:18,750
launch your app and click about to get

88
00:03:18,750 --> 00:03:20,340
to the state of where your bug actually

89
00:03:20,340 --> 00:03:23,940
is and of course it'll help your bug can

90
00:03:23,940 --> 00:03:27,329
never return so let's move on to the

91
00:03:27,329 --> 00:03:29,340
tools starting with the console well the

92
00:03:29,340 --> 00:03:32,060
polls are in as you can see we've got

93
00:03:32,060 --> 00:03:34,709
56% of developers on the left-hand side

94
00:03:34,709 --> 00:03:35,970
use console.log

95
00:03:35,970 --> 00:03:39,510
and 67 on the right-hand side and it's

96
00:03:39,510 --> 00:03:42,840
it's not surprising right because we've

97
00:03:42,840 --> 00:03:45,090
been conditioned to use it alongside

98
00:03:45,090 --> 00:03:47,730
simple text editors like sublime text

99
00:03:47,730 --> 00:03:51,060
atom notepad etc and a large portion of

100
00:03:51,060 --> 00:03:53,220
web developers have also just simply

101
00:03:53,220 --> 00:03:55,620
missed the exposure to a formal or

102
00:03:55,620 --> 00:03:57,720
Street or structured debugging process

103
00:03:57,720 --> 00:04:00,540
like myself and the browser consult is a

104
00:04:00,540 --> 00:04:02,430
pretty nice way to inspect the results

105
00:04:02,430 --> 00:04:03,060
of your logs

106
00:04:03,060 --> 00:04:06,660
so it works and and it's easy well why

107
00:04:06,660 --> 00:04:09,090
change it well because there is so much

108
00:04:09,090 --> 00:04:12,389
more so even if we just take a closer

109
00:04:12,389 --> 00:04:15,329
look at console Tarlac you'll see that

110
00:04:15,329 --> 00:04:16,530
there are lots of different ways to

111
00:04:16,530 --> 00:04:19,169
optimize it so here on top we have the

112
00:04:19,169 --> 00:04:21,659
normal console dot log usage for logging

113
00:04:21,659 --> 00:04:23,570
out these two variables pin 1 and pin

114
00:04:23,570 --> 00:04:26,570
- and here they yeah but on the bottom

115
00:04:26,570 --> 00:04:29,390
if you just add two extra cat characters

116
00:04:29,390 --> 00:04:32,750
to turn this log into an object yeah you

117
00:04:32,750 --> 00:04:35,450
not only get the results of the log but

118
00:04:35,450 --> 00:04:38,330
of the the value of the variable but you

119
00:04:38,330 --> 00:04:40,460
also get the variable context so it's

120
00:04:40,460 --> 00:04:42,170
much easier to see at a glance what

121
00:04:42,170 --> 00:04:44,540
you're logging it can be really useful

122
00:04:44,540 --> 00:04:46,070
especially when you're logging a lot of

123
00:04:46,070 --> 00:04:48,550
different things in your application and

124
00:04:48,550 --> 00:04:51,050
you can also really add easily add

125
00:04:51,050 --> 00:04:53,690
styling to your lives by including this

126
00:04:53,690 --> 00:04:55,910
percentage sign see at the beginning and

127
00:04:55,910 --> 00:04:57,980
then passing through some styling as the

128
00:04:57,980 --> 00:04:59,930
second parameter you can get really

129
00:04:59,930 --> 00:05:03,470
pretty colors so sticking to the console

130
00:05:03,470 --> 00:05:05,360
for now did you know that there are

131
00:05:05,360 --> 00:05:07,190
actually a whole bunch of different more

132
00:05:07,190 --> 00:05:09,740
methods on that object so I'm gonna show

133
00:05:09,740 --> 00:05:11,210
you my favorites but googling will

134
00:05:11,210 --> 00:05:13,310
reveal a hell of a lot more for instance

135
00:05:13,310 --> 00:05:15,620
console table is super useful if you

136
00:05:15,620 --> 00:05:19,040
want to log out an array of objects so

137
00:05:19,040 --> 00:05:20,720
here you can see it's much easier to

138
00:05:20,720 --> 00:05:22,400
kind of compare at a glance the

139
00:05:22,400 --> 00:05:25,760
different values and next we have

140
00:05:25,760 --> 00:05:29,870
console group which is when I don't know

141
00:05:29,870 --> 00:05:32,360
about you but have you ever ended up

142
00:05:32,360 --> 00:05:34,400
adding so many logs in your application

143
00:05:34,400 --> 00:05:35,990
that you can't tell which was the one

144
00:05:35,990 --> 00:05:36,980
that you just added

145
00:05:36,980 --> 00:05:39,560
well group and group collapse are really

146
00:05:39,560 --> 00:05:41,450
useful for structuring your logs and to

147
00:05:41,450 --> 00:05:43,730
collapsible groups creating less noise

148
00:05:43,730 --> 00:05:45,680
in the console for you to analyze which

149
00:05:45,680 --> 00:05:49,670
is really the aim of game another useful

150
00:05:49,670 --> 00:05:51,350
function you can use in the console is

151
00:05:51,350 --> 00:05:53,030
the dollar selector so it works

152
00:05:53,030 --> 00:05:55,070
similarly similarly to the jQuery

153
00:05:55,070 --> 00:05:58,070
selector it's an alias for the document

154
00:05:58,070 --> 00:06:01,160
selector function in the console if you

155
00:06:01,160 --> 00:06:03,770
include a 0 after it as I've done here

156
00:06:03,770 --> 00:06:06,590
you can get the most recently inspected

157
00:06:06,590 --> 00:06:09,830
HTML element or JavaScript object a 1

158
00:06:09,830 --> 00:06:11,300
gets you the second most recently

159
00:06:11,300 --> 00:06:15,080
selected etc etc up to 4 super useful if

160
00:06:15,080 --> 00:06:17,030
you want to quickly see what properties

161
00:06:17,030 --> 00:06:19,550
or attributes are on the Dom node or

162
00:06:19,550 --> 00:06:20,870
JavaScript objects that you're looking

163
00:06:20,870 --> 00:06:24,170
at and if you use Dola Dola it's the

164
00:06:24,170 --> 00:06:26,420
equivalent of document query selector or

165
00:06:26,420 --> 00:06:28,760
even better it returns you a proper

166
00:06:28,760 --> 00:06:31,280
array rather than a node list so you can

167
00:06:31,280 --> 00:06:35,240
manipulate it straight away console dot

168
00:06:35,240 --> 00:06:37,470
trace has been a lifesaver for me

169
00:06:37,470 --> 00:06:40,210
especially when you're working in a new

170
00:06:40,210 --> 00:06:42,550
code base and you can't actually you

171
00:06:42,550 --> 00:06:43,900
don't have that you know inherent

172
00:06:43,900 --> 00:06:47,680
knowledge of what is calling what and so

173
00:06:47,680 --> 00:06:50,380
in here I added a consult up trace on

174
00:06:50,380 --> 00:06:53,470
this handle filter click function to

175
00:06:53,470 --> 00:06:55,330
figure out what was calling it and you

176
00:06:55,330 --> 00:06:56,920
can see that it's now telling me that it

177
00:06:56,920 --> 00:06:59,290
was called by a handle click in filter

178
00:06:59,290 --> 00:07:04,180
jeaious and consular is great when you

179
00:07:04,180 --> 00:07:06,010
want to inspect a Dom node as a

180
00:07:06,010 --> 00:07:08,530
JavaScript object rather than as its

181
00:07:08,530 --> 00:07:10,630
markup which is what console.log returns

182
00:07:10,630 --> 00:07:13,240
you so you can see all the properties on

183
00:07:13,240 --> 00:07:17,770
that Dom node much more easily and no

184
00:07:17,770 --> 00:07:20,110
though it's even more useful as you can

185
00:07:20,110 --> 00:07:22,270
see console logs let's spit out the

186
00:07:22,270 --> 00:07:24,790
objects in black and white and it only

187
00:07:24,790 --> 00:07:27,370
displays two levels deep consult order

188
00:07:27,370 --> 00:07:28,780
on the other hand allows you to add some

189
00:07:28,780 --> 00:07:31,330
really handy configuration so here we've

190
00:07:31,330 --> 00:07:34,060
just added this extra object where we've

191
00:07:34,060 --> 00:07:36,490
said colors true depth null and it means

192
00:07:36,490 --> 00:07:39,400
that we get logs or pretty with lots of

193
00:07:39,400 --> 00:07:40,630
different colors and you can now access

194
00:07:40,630 --> 00:07:43,930
the lat and long properties on that geo

195
00:07:43,930 --> 00:07:47,830
object so let's say we've been working

196
00:07:47,830 --> 00:07:49,930
with console functions for a while and

197
00:07:49,930 --> 00:07:52,570
want to step it up well let's dive into

198
00:07:52,570 --> 00:07:54,520
the diff tools so I'm going to focus on

199
00:07:54,520 --> 00:07:55,750
Chrome because it's what I'm most

200
00:07:55,750 --> 00:07:57,850
familiar with but the Firefox dev tools

201
00:07:57,850 --> 00:07:59,140
are also really great and have a lot of

202
00:07:59,140 --> 00:08:01,660
the same functionality browser dev tools

203
00:08:01,660 --> 00:08:03,910
have some really handy features for

204
00:08:03,910 --> 00:08:09,340
debugging so the dev tools debugger is

205
00:08:09,340 --> 00:08:11,650
the best one of them one of the simplest

206
00:08:11,650 --> 00:08:13,510
ways to activate this is by using a

207
00:08:13,510 --> 00:08:15,520
debugger keyword in your code so this

208
00:08:15,520 --> 00:08:18,130
debugger keyword I typed this in into my

209
00:08:18,130 --> 00:08:21,280
editor and opened it up in chrome and

210
00:08:21,280 --> 00:08:23,890
when I refreshed it hit the debugger

211
00:08:23,890 --> 00:08:27,280
keyword there at that break point and so

212
00:08:27,280 --> 00:08:29,950
now you can see sorry I'm having video

213
00:08:29,950 --> 00:08:31,720
issues as well but hopefully you'll be

214
00:08:31,720 --> 00:08:35,140
able to see that we can log out the

215
00:08:35,140 --> 00:08:37,120
value of the variables in scope at the

216
00:08:37,120 --> 00:08:38,740
moment we can also inspect the entire

217
00:08:38,740 --> 00:08:42,630
scope at this point of execution and we

218
00:08:42,630 --> 00:08:47,900
can also step through the code

219
00:08:47,910 --> 00:08:51,270
and speaking of stepping just in case

220
00:08:51,270 --> 00:08:53,460
you've never used a debugger before here

221
00:08:53,460 --> 00:08:55,110
are your main options they're pretty

222
00:08:55,110 --> 00:08:57,170
much the same no matter what kind of

223
00:08:57,170 --> 00:08:59,460
language you're writing or what kind of

224
00:08:59,460 --> 00:09:02,340
tool you're using first we have resume

225
00:09:02,340 --> 00:09:04,470
which is when you're on a breakpoint and

226
00:09:04,470 --> 00:09:06,450
you press this and you'll be able to

227
00:09:06,450 --> 00:09:07,890
resume the script until the next

228
00:09:07,890 --> 00:09:10,110
breakpoint is hit if you hold this

229
00:09:10,110 --> 00:09:11,700
button down you'll also have the option

230
00:09:11,700 --> 00:09:13,980
to play through without hitting any more

231
00:09:13,980 --> 00:09:15,660
breakpoints which can be useful when you

232
00:09:15,660 --> 00:09:18,030
just want to get the code running the

233
00:09:18,030 --> 00:09:20,490
next is step over which executes the

234
00:09:20,490 --> 00:09:22,230
next function after your breakpoint and

235
00:09:22,230 --> 00:09:24,510
stops afterwards and then we have the

236
00:09:24,510 --> 00:09:26,820
step into and out of functions and note

237
00:09:26,820 --> 00:09:28,170
that these are functions that we're

238
00:09:28,170 --> 00:09:30,840
stepping over into and out of not lines

239
00:09:30,840 --> 00:09:32,700
of code they can take a little bit to

240
00:09:32,700 --> 00:09:36,150
kind of get that and yeah so what we've

241
00:09:36,150 --> 00:09:37,740
been doing here is adding a line of code

242
00:09:37,740 --> 00:09:39,810
breakpoint with the debugger keyword in

243
00:09:39,810 --> 00:09:41,910
our IDE but if you set these breakpoints

244
00:09:41,910 --> 00:09:44,100
in the dev tools or in your editor

245
00:09:44,100 --> 00:09:46,020
you'll see where this can be much more

246
00:09:46,020 --> 00:09:48,210
efficient than using console.log it's

247
00:09:48,210 --> 00:09:50,040
almost as if you've peppered your whole

248
00:09:50,040 --> 00:09:51,450
code base with console logs without

249
00:09:51,450 --> 00:09:53,460
actually having to do so and having to

250
00:09:53,460 --> 00:09:55,890
clean anything up simply click on the

251
00:09:55,890 --> 00:09:57,840
line number so here I've clicked on 14

252
00:09:57,840 --> 00:10:01,590
21 and 26 and then run your code as

253
00:10:01,590 --> 00:10:04,200
usual and the execution will stop on

254
00:10:04,200 --> 00:10:06,900
your set line of code break points which

255
00:10:06,900 --> 00:10:08,820
you can then press resume to hit the

256
00:10:08,820 --> 00:10:11,070
next one and go through as opposed to

257
00:10:11,070 --> 00:10:12,990
needing to step through or over every

258
00:10:12,990 --> 00:10:15,450
single function and when you're doing

259
00:10:15,450 --> 00:10:17,070
this you may also want to use a watch

260
00:10:17,070 --> 00:10:19,020
expression so that's what I've got here

261
00:10:19,020 --> 00:10:21,690
on the right hand side I've just decided

262
00:10:21,690 --> 00:10:23,220
to I've clicked the little plus button

263
00:10:23,220 --> 00:10:25,950
there and I've just decided to watch

264
00:10:25,950 --> 00:10:27,690
this dot state don't Mysteries because I

265
00:10:27,690 --> 00:10:28,680
want to see what's happening to that

266
00:10:28,680 --> 00:10:30,960
data and then as you step through the

267
00:10:30,960 --> 00:10:33,990
code that expression will update so

268
00:10:33,990 --> 00:10:35,250
you'll be able to see the value of

269
00:10:35,250 --> 00:10:39,570
whatever you're watching there are lots

270
00:10:39,570 --> 00:10:41,070
of different types of breakpoints and

271
00:10:41,070 --> 00:10:43,200
you can see these as sit these directly

272
00:10:43,200 --> 00:10:45,450
in the dev tools so for example example

273
00:10:45,450 --> 00:10:47,280
we've got the line of code which is what

274
00:10:47,280 --> 00:10:48,200
we've just been talking about

275
00:10:48,200 --> 00:10:50,490
conditional line of code which I'll show

276
00:10:50,490 --> 00:10:53,250
in a second daaamn so if a Dom node

277
00:10:53,250 --> 00:10:57,480
changes xhr so if you want to break on a

278
00:10:57,480 --> 00:11:00,819
particular HTTP request event listeners

279
00:11:00,819 --> 00:11:05,379
exceptions and functions so here on the

280
00:11:05,379 --> 00:11:07,509
left you can see how to add breakpoints

281
00:11:07,509 --> 00:11:09,639
just on certain event listeners so here

282
00:11:09,639 --> 00:11:12,429
just by ticking click there means that

283
00:11:12,429 --> 00:11:14,589
anytime I click on my app a breakpoint

284
00:11:14,589 --> 00:11:19,149
will be hit and then we have the Dom

285
00:11:19,149 --> 00:11:22,839
nodes so here I'm gonna break on when a

286
00:11:22,839 --> 00:11:26,879
Dom nodes attribute is modified and then

287
00:11:26,879 --> 00:11:28,809
conditional breakpoints down the bottom

288
00:11:28,809 --> 00:11:31,479
can be really useful for when a certain

289
00:11:31,479 --> 00:11:34,929
function say a scroll hander or a react

290
00:11:34,929 --> 00:11:37,869
render is called multiple times but you

291
00:11:37,869 --> 00:11:39,549
only want to stop execution when

292
00:11:39,549 --> 00:11:41,829
something has a certain value so here

293
00:11:41,829 --> 00:11:43,389
I'm creating a breakpoint that will only

294
00:11:43,389 --> 00:11:46,269
be hit if the length of my Mysteries

295
00:11:46,269 --> 00:11:50,919
array is more than zero so I here only

296
00:11:50,919 --> 00:11:53,799
want to stop when the API has actually

297
00:11:53,799 --> 00:11:56,139
returned my data because I only actually

298
00:11:56,139 --> 00:11:58,059
care about the data for this particular

299
00:11:58,059 --> 00:12:00,639
debugging case I know that the API is

300
00:12:00,639 --> 00:12:03,129
returning so I don't need to stop when

301
00:12:03,129 --> 00:12:04,929
the API hasn't returned but the react

302
00:12:04,929 --> 00:12:09,279
render is run so you can always click on

303
00:12:09,279 --> 00:12:11,499
the pause on exceptions button if you

304
00:12:11,499 --> 00:12:12,579
want a breakpoint when there's an error

305
00:12:12,579 --> 00:12:16,029
and the tick box to pause on court

306
00:12:16,029 --> 00:12:18,279
exceptions can be really useful for

307
00:12:18,279 --> 00:12:19,569
instance if you've got a try-catch

308
00:12:19,569 --> 00:12:21,519
that's swallowing your errors and you're

309
00:12:21,519 --> 00:12:23,769
not sure why then you can find out more

310
00:12:23,769 --> 00:12:27,579
about those exceptions when you have a

311
00:12:27,579 --> 00:12:29,350
bunch of breakpoints in your app it can

312
00:12:29,350 --> 00:12:32,079
be useful to disable one or more when

313
00:12:32,079 --> 00:12:34,659
you're focused on something specific so

314
00:12:34,659 --> 00:12:36,909
this check mark in the breakpoints list

315
00:12:36,909 --> 00:12:39,039
here will just disable that breakpoint

316
00:12:39,039 --> 00:12:41,619
temporarily and in the debugging toolbar

317
00:12:41,619 --> 00:12:43,869
you can disable all breakpoints in case

318
00:12:43,869 --> 00:12:45,579
you want to just check how your app runs

319
00:12:45,579 --> 00:12:47,319
while you're checking some changes

320
00:12:47,319 --> 00:12:51,429
you've made for example and a tool

321
00:12:51,429 --> 00:12:53,289
that's really useful when you're using

322
00:12:53,289 --> 00:12:55,779
the debugger is like boxing this lets us

323
00:12:55,779 --> 00:12:57,669
prevent the debugger from stepping into

324
00:12:57,669 --> 00:13:00,039
certain scripts when we're debugging

325
00:13:00,039 --> 00:13:02,859
code so here I was debugging a reaction

326
00:13:02,859 --> 00:13:05,409
lifecycle function and I jumped into the

327
00:13:05,409 --> 00:13:08,199
react Dom library I can be pretty sure

328
00:13:08,199 --> 00:13:10,389
that my bug is not in the react Dom

329
00:13:10,389 --> 00:13:13,850
library so I blackbox the script

330
00:13:13,850 --> 00:13:15,800
and this way next time I step through

331
00:13:15,800 --> 00:13:17,840
into a function that comes from this

332
00:13:17,840 --> 00:13:19,940
file the debugger will simply ignore it

333
00:13:19,940 --> 00:13:21,790
and I can focus on my application code

334
00:13:21,790 --> 00:13:24,560
you can also include file patterns in

335
00:13:24,560 --> 00:13:26,810
the dev tool settings - black box entire

336
00:13:26,810 --> 00:13:31,440
folders like node modules for example

337
00:13:31,450 --> 00:13:33,980
another useful trick when you're really

338
00:13:33,980 --> 00:13:36,200
unfamiliar with a code base is command +

339
00:13:36,200 --> 00:13:38,750
backslash if you press this shortcut

340
00:13:38,750 --> 00:13:40,850
when javascript is executing it will add

341
00:13:40,850 --> 00:13:42,530
a breakpoint to the code straight away

342
00:13:42,530 --> 00:13:44,900
and stop it executing you'll be able to

343
00:13:44,900 --> 00:13:46,760
instantly see what is happening the

344
00:13:46,760 --> 00:13:49,240
moment you press that shortcut and you

345
00:13:49,240 --> 00:13:52,040
can also not add log points and chrome

346
00:13:52,040 --> 00:13:54,320
dev tools which is essentially a console

347
00:13:54,320 --> 00:13:56,150
log that you don't have to remember to

348
00:13:56,150 --> 00:13:58,670
delete from your code the debugger won't

349
00:13:58,670 --> 00:14:00,110
pause on these points but you'll still

350
00:14:00,110 --> 00:14:03,800
get the results in the console another

351
00:14:03,800 --> 00:14:05,360
really useful tool when debugging and

352
00:14:05,360 --> 00:14:07,400
the dev tools is the snippets option

353
00:14:07,400 --> 00:14:09,860
under the sources panel here you can

354
00:14:09,860 --> 00:14:11,720
save your own code snippets to run in

355
00:14:11,720 --> 00:14:13,580
the console and there are some really

356
00:14:13,580 --> 00:14:15,590
great collections of snippets available

357
00:14:15,590 --> 00:14:18,500
online in different libraries so one of

358
00:14:18,500 --> 00:14:20,840
my favorites augments the console with a

359
00:14:20,840 --> 00:14:23,180
function called console dot save which

360
00:14:23,180 --> 00:14:25,730
you can use and pass anything to it

361
00:14:25,730 --> 00:14:28,160
which then gets downloaded as a JSON

362
00:14:28,160 --> 00:14:30,140
file this is really handy especially

363
00:14:30,140 --> 00:14:32,510
when you have a big JSON object that you

364
00:14:32,510 --> 00:14:35,120
want to open maybe in an IDE or you want

365
00:14:35,120 --> 00:14:38,050
to send it to a colleague for example

366
00:14:38,050 --> 00:14:40,820
another useful tool is live expressions

367
00:14:40,820 --> 00:14:43,640
you can click the I icon here to type

368
00:14:43,640 --> 00:14:45,530
something into the console and create a

369
00:14:45,530 --> 00:14:48,290
live expression this pins it to the top

370
00:14:48,290 --> 00:14:50,210
of the console and it updates real time

371
00:14:50,210 --> 00:14:52,430
it can be really useful when something

372
00:14:52,430 --> 00:14:54,500
in your code needs to respond to a

373
00:14:54,500 --> 00:14:56,750
window width or scroll position for

374
00:14:56,750 --> 00:14:58,370
example and you'll be able to see it

375
00:14:58,370 --> 00:15:02,210
update as you scroll down the side so

376
00:15:02,210 --> 00:15:03,530
what about when you want to actually

377
00:15:03,530 --> 00:15:06,220
test some of your bug fixing hypotheses

378
00:15:06,220 --> 00:15:08,720
well a really great feature in chrome is

379
00:15:08,720 --> 00:15:12,590
called local overrides so here we go to

380
00:15:12,590 --> 00:15:15,350
the sources panel and go to overheads

381
00:15:15,350 --> 00:15:19,400
and we can set them up by selecting a

382
00:15:19,400 --> 00:15:23,750
folder on in this case my desktop I

383
00:15:23,750 --> 00:15:25,140
think and

384
00:15:25,140 --> 00:15:26,620
[Music]

385
00:15:26,620 --> 00:15:29,690
we then need to give chrome access to

386
00:15:29,690 --> 00:15:32,329
that folder and then we can go and

387
00:15:32,329 --> 00:15:37,100
change any of the code on this site for

388
00:15:37,100 --> 00:15:42,199
example this part of the reddit website

389
00:15:42,199 --> 00:15:45,050
and add whatever we want so I'm going to

390
00:15:45,050 --> 00:15:48,199
add a background color of purple and now

391
00:15:48,199 --> 00:15:50,120
if I go come and save you can see I've

392
00:15:50,120 --> 00:15:52,100
got this little purple dot up here on

393
00:15:52,100 --> 00:15:55,339
the file and then when i refresh the

394
00:15:55,339 --> 00:15:57,980
changes I persisted which is really

395
00:15:57,980 --> 00:16:00,170
really useful if I close the dev tools

396
00:16:00,170 --> 00:16:02,589
and refresh the changes are gone

397
00:16:02,589 --> 00:16:05,089
this approach is really useful for

398
00:16:05,089 --> 00:16:06,769
making smallest changes to production

399
00:16:06,769 --> 00:16:08,300
websites when you're trying to debug

400
00:16:08,300 --> 00:16:10,699
something in particular when you want to

401
00:16:10,699 --> 00:16:12,290
fix something quickly and you have a

402
00:16:12,290 --> 00:16:14,420
reasonably good idea of where it is you

403
00:16:14,420 --> 00:16:16,010
don't need to have your local

404
00:16:16,010 --> 00:16:18,199
environment running you don't even have

405
00:16:18,199 --> 00:16:19,579
to have the original code on your

406
00:16:19,579 --> 00:16:21,320
computer this can be done with just

407
00:16:21,320 --> 00:16:25,250
about any computer setup so what happens

408
00:16:25,250 --> 00:16:26,329
when you want to go further and make

409
00:16:26,329 --> 00:16:28,790
bigger changes that you not only want to

410
00:16:28,790 --> 00:16:31,160
persist on browser refresh but persist

411
00:16:31,160 --> 00:16:33,199
to your own project file sitting locally

412
00:16:33,199 --> 00:16:35,360
on your computer well the diff tools

413
00:16:35,360 --> 00:16:36,800
also have a really interesting feature

414
00:16:36,800 --> 00:16:39,860
called workspaces so here's a little app

415
00:16:39,860 --> 00:16:42,079
I made for calculating insulin dosage

416
00:16:42,079 --> 00:16:44,779
for diabetics note it's a production app

417
00:16:44,779 --> 00:16:46,970
on Heroku not on my localhost

418
00:16:46,970 --> 00:16:49,360
so this could could be any website right

419
00:16:49,360 --> 00:16:53,899
so in the file system tab I can add the

420
00:16:53,899 --> 00:16:55,970
folder this is my actual folder on my

421
00:16:55,970 --> 00:16:59,389
desktop for this application and again

422
00:16:59,389 --> 00:17:01,940
give the dev tools access to it and now

423
00:17:01,940 --> 00:17:03,709
you can see my applications loaded here

424
00:17:03,709 --> 00:17:05,600
in the sources panel I'm gonna make a

425
00:17:05,600 --> 00:17:07,939
change I'm just gonna add a console log

426
00:17:07,939 --> 00:17:12,860
of hi why not and if I save that and go

427
00:17:12,860 --> 00:17:14,419
to my IDE you can see that the file

428
00:17:14,419 --> 00:17:17,630
itself has been updated and I can also

429
00:17:17,630 --> 00:17:19,850
go back the other way so I'm gonna add

430
00:17:19,850 --> 00:17:22,819
every one here and see that it's

431
00:17:22,819 --> 00:17:26,030
persisted here to the dev tools this

432
00:17:26,030 --> 00:17:28,040
could be super useful and really

433
00:17:28,040 --> 00:17:30,260
powerful and in fact for some people it

434
00:17:30,260 --> 00:17:32,059
allows them to use just the dev tools

435
00:17:32,059 --> 00:17:34,610
debugger as a sorry dev tools as their

436
00:17:34,610 --> 00:17:37,370
IDE however it can be a little flaky and

437
00:17:37,370 --> 00:17:39,470
it's still not as good as a full idea in

438
00:17:39,470 --> 00:17:39,720
my

439
00:17:39,720 --> 00:17:41,909
opinion in particular it struggles with

440
00:17:41,909 --> 00:17:44,130
more complicated build systems but if

441
00:17:44,130 --> 00:17:45,830
you have a project that you built with

442
00:17:45,830 --> 00:17:49,020
create react out or view so yeah CLA for

443
00:17:49,020 --> 00:17:50,850
example you can actually just drag the

444
00:17:50,850 --> 00:17:53,010
entire folder onto the sources panel and

445
00:17:53,010 --> 00:17:56,940
it's all set up for you so if you like

446
00:17:56,940 --> 00:17:58,919
this idea of being able to persist

447
00:17:58,919 --> 00:18:00,630
changes on your production website

448
00:18:00,630 --> 00:18:02,490
there's one last way I want to show you

449
00:18:02,490 --> 00:18:05,669
this is the concept of proxying your

450
00:18:05,669 --> 00:18:07,679
production files to local files on your

451
00:18:07,679 --> 00:18:08,400
hard drive

452
00:18:08,400 --> 00:18:10,380
similar to workspaces but without the

453
00:18:10,380 --> 00:18:12,570
dev tools persistence but with a lot

454
00:18:12,570 --> 00:18:14,549
more other features that better support

455
00:18:14,549 --> 00:18:16,950
complicated build systems the simplest

456
00:18:16,950 --> 00:18:18,840
is a Chrome extension called resource

457
00:18:18,840 --> 00:18:21,179
overrate so say you have a version of

458
00:18:21,179 --> 00:18:23,179
your application running on localhost

459
00:18:23,179 --> 00:18:25,860
using this extension you could proxy the

460
00:18:25,860 --> 00:18:27,630
call that your production website is

461
00:18:27,630 --> 00:18:29,970
making in this case on the left hand

462
00:18:29,970 --> 00:18:34,080
side bandolce is - the version of that

463
00:18:34,080 --> 00:18:37,830
file and on your local drive so that's

464
00:18:37,830 --> 00:18:42,990
my local host is and this allows you to

465
00:18:42,990 --> 00:18:44,970
change your code and test it within the

466
00:18:44,970 --> 00:18:46,289
larger environment where the bug

467
00:18:46,289 --> 00:18:48,900
actually occurred applications like

468
00:18:48,900 --> 00:18:50,940
fiddler and Charles proxy which is my

469
00:18:50,940 --> 00:18:53,010
personal favorite also allow you to do

470
00:18:53,010 --> 00:18:54,360
this but with a lot more features

471
00:18:54,360 --> 00:18:57,030
including the ability to monitor and

472
00:18:57,030 --> 00:18:58,799
inspect all the calls that your website

473
00:18:58,799 --> 00:19:01,470
is making I've been on teams that have

474
00:19:01,470 --> 00:19:03,299
literally used Charles proxy for their

475
00:19:03,299 --> 00:19:05,490
entire front-end development flow many

476
00:19:05,490 --> 00:19:07,710
big applications can be tricky to set up

477
00:19:07,710 --> 00:19:09,840
locally and trying to keep the backend

478
00:19:09,840 --> 00:19:12,090
architecture and api's up-to-date as

479
00:19:12,090 --> 00:19:13,950
people are working on them as well as

480
00:19:13,950 --> 00:19:16,080
your own front-end code base across

481
00:19:16,080 --> 00:19:18,450
multiple teams can be a pain in the ass

482
00:19:18,450 --> 00:19:20,309
that can take quite a lot of time if

483
00:19:20,309 --> 00:19:22,679
however you have a reliable staging

484
00:19:22,679 --> 00:19:24,179
environment that everyone's pushing to

485
00:19:24,179 --> 00:19:26,370
then proxying your front-end files is a

486
00:19:26,370 --> 00:19:30,870
nice way to skip that set up entirely so

487
00:19:30,870 --> 00:19:32,190
a lot of the technology I'm covering

488
00:19:32,190 --> 00:19:34,140
either is seriously enhanced by or

489
00:19:34,140 --> 00:19:36,110
doesn't work at all without source Maps

490
00:19:36,110 --> 00:19:38,580
so a source map is a file that allows

491
00:19:38,580 --> 00:19:40,890
the browser or other technology to map

492
00:19:40,890 --> 00:19:43,380
the compiled or compressed code back to

493
00:19:43,380 --> 00:19:45,419
its original file it's a really

494
00:19:45,419 --> 00:19:47,039
important tool that helps with debugging

495
00:19:47,039 --> 00:19:49,470
minified code is almost impossible to

496
00:19:49,470 --> 00:19:51,780
debug properly on the top we're

497
00:19:51,780 --> 00:19:53,389
inspecting a website without source man

498
00:19:53,389 --> 00:19:55,339
and you can see all the variables have

499
00:19:55,339 --> 00:19:57,829
met beam angles and the ESX class has

500
00:19:57,829 --> 00:19:59,950
been transposed whereas on the bottom

501
00:19:59,950 --> 00:20:02,690
source maps have been setup and it's way

502
00:20:02,690 --> 00:20:04,309
easier to understand what's going on

503
00:20:04,309 --> 00:20:06,079
because it's the code we actually wrote

504
00:20:06,079 --> 00:20:09,349
and depending on your build process it

505
00:20:09,349 --> 00:20:10,609
should be pretty straightforward to set

506
00:20:10,609 --> 00:20:13,129
up here's the config for web pack and at

507
00:20:13,129 --> 00:20:15,019
the top is the way to tell web pack to

508
00:20:15,019 --> 00:20:16,700
use its standard development

509
00:20:16,700 --> 00:20:18,950
configuration which includes source maps

510
00:20:18,950 --> 00:20:21,739
by default if you want more control you

511
00:20:21,739 --> 00:20:23,989
can define it separately I've chosen

512
00:20:23,989 --> 00:20:26,149
cheap module evil because I like the

513
00:20:26,149 --> 00:20:28,849
balance between speed and support but

514
00:20:28,849 --> 00:20:30,729
your choice will depend on your use case

515
00:20:30,729 --> 00:20:33,079
then beneath that we have the config for

516
00:20:33,079 --> 00:20:34,759
production and the only thing you

517
00:20:34,759 --> 00:20:36,229
actually need here is the dev tool

518
00:20:36,229 --> 00:20:38,690
property but if you're using uglify

519
00:20:38,690 --> 00:20:41,209
jeaious to minify your code you'll want

520
00:20:41,209 --> 00:20:42,859
to see it source map to true when you

521
00:20:42,859 --> 00:20:44,989
declare that plug-in and if you want to

522
00:20:44,989 --> 00:20:46,369
set the file name of the source map you

523
00:20:46,369 --> 00:20:48,859
can get to when you build your project

524
00:20:48,859 --> 00:20:50,719
you should see your source map file like

525
00:20:50,719 --> 00:20:57,089
we have over on the right hand side so

526
00:20:57,099 --> 00:20:59,599
what about deploying source maps to

527
00:20:59,599 --> 00:21:01,999
production well I am a big believer in

528
00:21:01,999 --> 00:21:04,369
doing this because production behaves

529
00:21:04,369 --> 00:21:05,839
when you really want to know what's

530
00:21:05,839 --> 00:21:08,690
going on you're in a hurry and you want

531
00:21:08,690 --> 00:21:10,399
to decipher the code pretty quickly so

532
00:21:10,399 --> 00:21:12,679
the good thing about source maps is that

533
00:21:12,679 --> 00:21:14,450
they only get downloaded when the dev

534
00:21:14,450 --> 00:21:16,279
tools are opened so then they have no

535
00:21:16,279 --> 00:21:18,079
effect on your application or on its

536
00:21:18,079 --> 00:21:20,389
performance and if you're really worried

537
00:21:20,389 --> 00:21:22,099
about people being able to look at your

538
00:21:22,099 --> 00:21:23,329
source code and a metaphor unhhhh

539
00:21:23,329 --> 00:21:25,700
minified and keep in mind that security

540
00:21:25,700 --> 00:21:27,489
through obscurity is never a good idea

541
00:21:27,489 --> 00:21:29,359
then there's a pretty straightforward

542
00:21:29,359 --> 00:21:32,690
solution so here you can indicate in the

543
00:21:32,690 --> 00:21:34,820
javascript file a source map your source

544
00:21:34,820 --> 00:21:37,459
mapping URL configurable with webpack

545
00:21:37,459 --> 00:21:39,440
that points to the source map that's

546
00:21:39,440 --> 00:21:40,789
been uploaded to a different location

547
00:21:40,789 --> 00:21:43,820
say one that's only accessible by your

548
00:21:43,820 --> 00:21:45,320
team like an s3 bucket

549
00:21:45,320 --> 00:21:47,959
maybe that's only set up for your

550
00:21:47,959 --> 00:21:51,709
company's VPN to access and if you're

551
00:21:51,709 --> 00:21:53,899
not able to setup source maps say you're

552
00:21:53,899 --> 00:21:55,459
just being nosy and checking out someone

553
00:21:55,459 --> 00:21:57,619
else's website you can always click on

554
00:21:57,619 --> 00:21:59,119
the format' button to make the code at

555
00:21:59,119 --> 00:22:02,749
least slightly more readable so moving

556
00:22:02,749 --> 00:22:04,789
on now to performance debugging and I do

557
00:22:04,789 --> 00:22:06,680
not have time to do it justice

558
00:22:06,680 --> 00:22:08,300
there's so much you can learn about here

559
00:22:08,300 --> 00:22:10,940
and it's easily another entire talk but

560
00:22:10,940 --> 00:22:12,620
I wanted to quickly illustrate where you

561
00:22:12,620 --> 00:22:15,590
could start and the key is to find the

562
00:22:15,590 --> 00:22:17,180
code that you wrote right

563
00:22:17,180 --> 00:22:19,250
so these flame charts to be a little bit

564
00:22:19,250 --> 00:22:20,870
indecipherable until you actually figure

565
00:22:20,870 --> 00:22:23,000
out where your code is so if you click

566
00:22:23,000 --> 00:22:24,920
to open the main panel you'll see all

567
00:22:24,920 --> 00:22:26,660
the activity that occurred on the main

568
00:22:26,660 --> 00:22:27,110
thread

569
00:22:27,110 --> 00:22:29,110
including the execution of JavaScript

570
00:22:29,110 --> 00:22:31,370
usually a lot of the stuff here is found

571
00:22:31,370 --> 00:22:33,350
in frameworks but if you scan through

572
00:22:33,350 --> 00:22:34,940
the orange sections you'll be able to

573
00:22:34,940 --> 00:22:36,920
find your JavaScript files which is

574
00:22:36,920 --> 00:22:38,470
usually what you're looking for right in

575
00:22:38,470 --> 00:22:42,050
this case it's my main J's file and know

576
00:22:42,050 --> 00:22:44,300
this is a very basic one page app which

577
00:22:44,300 --> 00:22:47,270
is why it's so small you can then zoom

578
00:22:47,270 --> 00:22:48,890
in further and find the functions in

579
00:22:48,890 --> 00:22:50,480
your app and compare the time that

580
00:22:50,480 --> 00:22:52,970
they're taking with each other here we

581
00:22:52,970 --> 00:22:55,310
can see a call to app in child and fetch

582
00:22:55,310 --> 00:22:56,780
which should be a little bit more

583
00:22:56,780 --> 00:23:00,500
familiar to us and the easiest way to

584
00:23:00,500 --> 00:23:02,390
debug in apps performance poor

585
00:23:02,390 --> 00:23:04,430
performance is by doing a performance

586
00:23:04,430 --> 00:23:06,500
audit with lighthouse this is a tool

587
00:23:06,500 --> 00:23:08,900
inside the audits panel here you can see

588
00:23:08,900 --> 00:23:10,880
the results on the same small one-page

589
00:23:10,880 --> 00:23:13,220
app and the best bit here is the

590
00:23:13,220 --> 00:23:15,740
opportunities section where they have a

591
00:23:15,740 --> 00:23:17,360
where you've got a list of the resources

592
00:23:17,360 --> 00:23:20,480
that you should optimize and it has

593
00:23:20,480 --> 00:23:25,160
specific details on how to do so the

594
00:23:25,160 --> 00:23:26,750
audits panel also allows you to order

595
00:23:26,750 --> 00:23:28,850
other things like accessibility which is

596
00:23:28,850 --> 00:23:30,560
really great it makes something so

597
00:23:30,560 --> 00:23:32,660
important it's so much easier and if you

598
00:23:32,660 --> 00:23:34,640
follow the expense the specific advice

599
00:23:34,640 --> 00:23:36,650
in the audit your app will be so much

600
00:23:36,650 --> 00:23:38,570
more usable for so many more people and

601
00:23:38,570 --> 00:23:41,030
in many cases improve the experience

602
00:23:41,030 --> 00:23:43,250
everyone keep in mind though there is no

603
00:23:43,250 --> 00:23:44,900
substitute for proper manual

604
00:23:44,900 --> 00:23:49,400
accessibility testing so when it comes

605
00:23:49,400 --> 00:23:51,410
to debugging specific elements for their

606
00:23:51,410 --> 00:23:53,750
accessibility the elements pane comes in

607
00:23:53,750 --> 00:23:57,710
handy here you can inspect elements and

608
00:23:57,710 --> 00:23:59,210
see which properties are correctly

609
00:23:59,210 --> 00:24:01,160
filled out so in this case we're

610
00:24:01,160 --> 00:24:04,160
inspecting a text input you can see that

611
00:24:04,160 --> 00:24:08,000
the name property is searched and this

612
00:24:08,000 --> 00:24:09,380
is what screen readers will read out

613
00:24:09,380 --> 00:24:11,780
when the user focuses on this input you

614
00:24:11,780 --> 00:24:13,940
can see that the name was computed by

615
00:24:13,940 --> 00:24:16,730
looking at the placeholder property this

616
00:24:16,730 --> 00:24:18,230
input should really have a proper label

617
00:24:18,230 --> 00:24:19,820
or an area label but

618
00:24:19,820 --> 00:24:21,620
at least it has a placeholder so all

619
00:24:21,620 --> 00:24:23,240
users would now be able to know what

620
00:24:23,240 --> 00:24:24,950
it's for rather than a screen reader

621
00:24:24,950 --> 00:24:29,210
just reading out text input so the last

622
00:24:29,210 --> 00:24:31,040
thing for the dev tools did you know

623
00:24:31,040 --> 00:24:32,870
that you can even debug node in the dev

624
00:24:32,870 --> 00:24:35,240
tools you just need to run your node

625
00:24:35,240 --> 00:24:38,000
script with the inspect flag BR came by

626
00:24:38,000 --> 00:24:39,560
the way it means break before the code

627
00:24:39,560 --> 00:24:41,150
starts so that you can add your

628
00:24:41,150 --> 00:24:43,310
breakpoints straight away then either

629
00:24:43,310 --> 00:24:45,950
click on this green node icon down here

630
00:24:45,950 --> 00:24:47,750
on the left or go to Chrome slash

631
00:24:47,750 --> 00:24:50,090
inspect and click on open dedicated dev

632
00:24:50,090 --> 00:24:52,640
tools for node if you like this workflow

633
00:24:52,640 --> 00:24:54,260
you should check out the node inspection

634
00:24:54,260 --> 00:24:56,270
manager extension which manages all your

635
00:24:56,270 --> 00:24:59,720
scripts and work and windows for you so

636
00:24:59,720 --> 00:25:01,240
let's get to the really good stuff

637
00:25:01,240 --> 00:25:03,440
integrated debugging in the editor has

638
00:25:03,440 --> 00:25:06,050
been around for ages but many JavaScript

639
00:25:06,050 --> 00:25:08,810
developers are either not aware of it

640
00:25:08,810 --> 00:25:11,000
they think it's too tricky to setup or

641
00:25:11,000 --> 00:25:12,140
they don't want to change their

642
00:25:12,140 --> 00:25:13,640
debugging mindset because they don't

643
00:25:13,640 --> 00:25:15,350
think it's worth it well I'll let you be

644
00:25:15,350 --> 00:25:17,920
the judge but do give it a go first

645
00:25:17,920 --> 00:25:19,670
unfortunately we have a lot more

646
00:25:19,670 --> 00:25:23,570
front-end editor options these days some

647
00:25:23,570 --> 00:25:25,430
of which include an inbuilt debugger I'm

648
00:25:25,430 --> 00:25:27,590
gonna focus on vs code because it's

649
00:25:27,590 --> 00:25:29,270
super light and fast and it's what I use

650
00:25:29,270 --> 00:25:31,130
every day and I promise I'm not trying

651
00:25:31,130 --> 00:25:32,660
to sell you anything because well that

652
00:25:32,660 --> 00:25:35,060
would be stupid because it's free but

653
00:25:35,060 --> 00:25:37,430
yeah other ideas like webstorm also

654
00:25:37,430 --> 00:25:39,560
include an inbuilt debugger and the idea

655
00:25:39,560 --> 00:25:41,510
is pretty similar I'm gonna take you

656
00:25:41,510 --> 00:25:43,100
through my debugging process and how I

657
00:25:43,100 --> 00:25:45,380
set it up with a mini front-end react

658
00:25:45,380 --> 00:25:47,540
app that talks to an express server

659
00:25:47,540 --> 00:25:49,460
I've added a couple of spelling mistakes

660
00:25:49,460 --> 00:25:51,350
to simulate a real bug that you might be

661
00:25:51,350 --> 00:25:54,440
trying to fix so typical process for

662
00:25:54,440 --> 00:25:56,330
debugging a front-end application might

663
00:25:56,330 --> 00:25:58,490
look something like this we open the

664
00:25:58,490 --> 00:26:00,530
browser we see an error in the console

665
00:26:00,530 --> 00:26:03,620
we go to our editor we log out some of

666
00:26:03,620 --> 00:26:06,590
the variables back to the browser and

667
00:26:06,590 --> 00:26:08,890
refresh or maybe a hot module reloading

668
00:26:08,890 --> 00:26:11,930
if we're lucky we've chosen a variable

669
00:26:11,930 --> 00:26:13,880
that helps us determine how to fix the

670
00:26:13,880 --> 00:26:17,360
bug back to the editor make the fix back

671
00:26:17,360 --> 00:26:19,310
to the browser refresh okay great

672
00:26:19,310 --> 00:26:22,010
perfect well that's a hell of a lot of

673
00:26:22,010 --> 00:26:24,140
guesswork and switching back and forth I

674
00:26:24,140 --> 00:26:26,330
mean we're we're used to it but but it

675
00:26:26,330 --> 00:26:29,210
doesn't need to be this way vias code

676
00:26:29,210 --> 00:26:31,010
has a bunch of extensions that let you

677
00:26:31,010 --> 00:26:32,950
debug tons of different languages

678
00:26:32,950 --> 00:26:35,169
in different configurations the most

679
00:26:35,169 --> 00:26:37,059
useful for us is the debugger for Chrome

680
00:26:37,059 --> 00:26:39,370
extension it's actually framework

681
00:26:39,370 --> 00:26:41,049
agnostic so you could be working with

682
00:26:41,049 --> 00:26:43,090
angular if you react whatever you like

683
00:26:43,090 --> 00:26:44,470
but I'm going to show you the

684
00:26:44,470 --> 00:26:47,230
configuration for my app so first of all

685
00:26:47,230 --> 00:26:49,470
I'm going to the extensions and

686
00:26:49,470 --> 00:26:52,539
searching for the debug of Chrome I'm

687
00:26:52,539 --> 00:26:58,190
going to install that and reload vs code

688
00:26:58,200 --> 00:27:02,289
and now I can go to configurations and

689
00:27:02,289 --> 00:27:04,899
add a new configuration and I'm gonna

690
00:27:04,899 --> 00:27:07,210
choose the launch Chrome one here and

691
00:27:07,210 --> 00:27:10,210
I'm gonna change the URL to localhost

692
00:27:10,210 --> 00:27:12,309
3000 because that's what create react

693
00:27:12,309 --> 00:27:16,409
app uses by default and save that and

694
00:27:16,409 --> 00:27:20,500
then press play and you can see that the

695
00:27:20,500 --> 00:27:23,289
app is loaded there's absolutely no

696
00:27:23,289 --> 00:27:25,480
other setup or settings it's really

697
00:27:25,480 --> 00:27:29,289
really easy and the debugging experience

698
00:27:29,289 --> 00:27:32,230
it's also really nice so here I have a

699
00:27:32,230 --> 00:27:33,970
bug because there's supposed to be some

700
00:27:33,970 --> 00:27:37,750
quotes showing up in my app and if I add

701
00:27:37,750 --> 00:27:41,289
a debugging breakpoint about where I

702
00:27:41,289 --> 00:27:43,870
think that the bug probably is and then

703
00:27:43,870 --> 00:27:46,330
refresh I can see I've hit my breakpoint

704
00:27:46,330 --> 00:27:48,490
and I can see that QWOP is undefined

705
00:27:48,490 --> 00:27:53,980
I wonder why and if I go into the

706
00:27:53,980 --> 00:27:56,380
variables here and inspect the actual

707
00:27:56,380 --> 00:27:59,019
data I can see oh the data calls it

708
00:27:59,019 --> 00:28:00,039
quote okay

709
00:28:00,039 --> 00:28:04,450
well then I can go and edit the variable

710
00:28:04,450 --> 00:28:07,830
fix the bug remove the breakpoint and

711
00:28:07,830 --> 00:28:11,409
then restart and hey it's fixed and I

712
00:28:11,409 --> 00:28:12,779
didn't even need to touch the browser

713
00:28:12,779 --> 00:28:15,340
obviously this is a pretty fake example

714
00:28:15,340 --> 00:28:17,220
but you get the idea

715
00:28:17,220 --> 00:28:19,600
so before I finished I should just

716
00:28:19,600 --> 00:28:22,090
quickly mention that in no way have I

717
00:28:22,090 --> 00:28:24,220
covered the space I've obviously had to

718
00:28:24,220 --> 00:28:27,010
focus on one browser and one IDE and I

719
00:28:27,010 --> 00:28:28,960
didn't even touch on mobile and network

720
00:28:28,960 --> 00:28:30,789
and Service Worker debugging to name a

721
00:28:30,789 --> 00:28:32,409
few there is so much more to explore

722
00:28:32,409 --> 00:28:34,779
here and of course accurate and

723
00:28:34,779 --> 00:28:37,149
realistic test coverage is an extremely

724
00:28:37,149 --> 00:28:39,399
important and useful way to prevent bugs

725
00:28:39,399 --> 00:28:41,440
in the first place provide a quick and

726
00:28:41,440 --> 00:28:43,629
easy way to test fixes and prevent them

727
00:28:43,629 --> 00:28:44,679
from occurring again

728
00:28:44,679 --> 00:28:46,870
the golden rule my golden rule

729
00:28:46,870 --> 00:28:49,000
whenever you fix your bug make sure

730
00:28:49,000 --> 00:28:51,610
there's a test for it so the last thing

731
00:28:51,610 --> 00:28:53,380
I'm gonna leave you with is this if you

732
00:28:53,380 --> 00:28:54,910
want to stick to the good old console

733
00:28:54,910 --> 00:28:57,550
log then that's cool by me I still use a

734
00:28:57,550 --> 00:28:59,200
combo of different tools including

735
00:28:59,200 --> 00:29:01,630
console.log but please at least set

736
00:29:01,630 --> 00:29:03,460
yourself up with a good code snippet so

737
00:29:03,460 --> 00:29:05,350
you're not wasting your life typing it

738
00:29:05,350 --> 00:29:08,530
out by hand every single time that's it

739
00:29:08,530 --> 00:29:10,290
thank you

