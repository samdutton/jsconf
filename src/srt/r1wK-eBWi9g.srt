1
00:00:08,480 --> 00:00:11,970

so the talk today is in three parts kind

2
00:00:11,970 --> 00:00:15,210
of stealing a stylistic take on that

3
00:00:15,210 --> 00:00:17,490
John did yesterday i'll do some slides

4
00:00:17,490 --> 00:00:19,679
I'll do some demos and then I'll do kind

5
00:00:19,679 --> 00:00:21,779
of a second set of demos it's the middle

6
00:00:21,779 --> 00:00:23,159
set of demos actual kind of software

7
00:00:23,159 --> 00:00:25,130
stuff the third one is more kind of a

8
00:00:25,130 --> 00:00:27,569
the way I would like to see the future

9
00:00:27,569 --> 00:00:28,949
you know the way the world should be

10
00:00:28,949 --> 00:00:32,940
kind of some movie demos of that so so

11
00:00:32,940 --> 00:00:34,890
like Chris said I'm Jason Huggins i work

12
00:00:34,890 --> 00:00:39,690
at sauce labs and selenium is open

13
00:00:39,690 --> 00:00:42,090
source testing tool its website is

14
00:00:42,090 --> 00:00:44,640
selenium HQ org and then I registered

15
00:00:44,640 --> 00:00:47,010
this other domain it's a forwards to my

16
00:00:47,010 --> 00:00:51,060
company's address p 13 wide com so i'll

17
00:00:51,060 --> 00:00:54,030
try to not make this a sleazy sales

18
00:00:54,030 --> 00:00:55,800
pitch but there will be some subliminal

19
00:00:55,800 --> 00:00:59,579
advertising so first of all why would

20
00:00:59,579 --> 00:01:02,310
someone ever use selenium well the first

21
00:01:02,310 --> 00:01:05,010
thing is the browser wars are back when

22
00:01:05,010 --> 00:01:07,680
selenium was actually created ie had

23
00:01:07,680 --> 00:01:10,590
ninety-five percent of the market share

24
00:01:10,590 --> 00:01:12,840
of sorts but the cranky developers that

25
00:01:12,840 --> 00:01:14,400
I worked with that we're in that five

26
00:01:14,400 --> 00:01:15,960
percent they were using Mozilla and I

27
00:01:15,960 --> 00:01:18,210
needed to test in both browsers and now

28
00:01:18,210 --> 00:01:19,530
that IE does not have ninety five

29
00:01:19,530 --> 00:01:20,909
percent of the market you know all these

30
00:01:20,909 --> 00:01:23,360
browsers keep on coming so that's good

31
00:01:23,360 --> 00:01:26,010
it's it's a complicated problem to solve

32
00:01:26,010 --> 00:01:29,159
as John Resig window yesterday so

33
00:01:29,159 --> 00:01:32,010
selenium is a robot library that will

34
00:01:32,010 --> 00:01:34,710
act as a user would going through a

35
00:01:34,710 --> 00:01:37,860
website you would open a browser link

36
00:01:37,860 --> 00:01:41,549
type text Winfield click buttons things

37
00:01:41,549 --> 00:01:43,350
like that so the mission for selenium is

38
00:01:43,350 --> 00:01:46,890
anything that a user can do selenium

39
00:01:46,890 --> 00:01:49,890
should be able to do and specifically

40
00:01:49,890 --> 00:01:53,580
it's how it's kind of risen above all

41
00:01:53,580 --> 00:01:55,799
the other functional testing tools in

42
00:01:55,799 --> 00:02:01,010
the market is that it's really good for

43
00:02:01,010 --> 00:02:03,060
Ajax II kind of apps this is kind of the

44
00:02:03,060 --> 00:02:06,780
canonical very simple Ajax app that

45
00:02:06,780 --> 00:02:08,099
Google suggests where as you're typing

46
00:02:08,099 --> 00:02:09,959
your search string it's doing Ajax

47
00:02:09,959 --> 00:02:11,540
requests behind the scenes and you can

48
00:02:11,540 --> 00:02:13,500
emulate the

49
00:02:13,500 --> 00:02:15,390
tapping of the down arrow to select a

50
00:02:15,390 --> 00:02:17,880
particular particular value the other

51
00:02:17,880 --> 00:02:19,410
thing that selenium is good for but it's

52
00:02:19,410 --> 00:02:21,140
functional testing tools in general is

53
00:02:21,140 --> 00:02:23,730
end-to-end workflows so this is a

54
00:02:23,730 --> 00:02:27,660
screenshot of Google Doc so let's say

55
00:02:27,660 --> 00:02:28,830
you've got a workflow where you want to

56
00:02:28,830 --> 00:02:30,150
create a document then you want to click

57
00:02:30,150 --> 00:02:32,280
on the sharing tab then you want to

58
00:02:32,280 --> 00:02:34,140
share it with two of your friends let's

59
00:02:34,140 --> 00:02:35,820
say Larry and Sergey and then you want

60
00:02:35,820 --> 00:02:37,310
to click on invite collaborator

61
00:02:37,310 --> 00:02:40,530
collaborators and just that general

62
00:02:40,530 --> 00:02:41,340
workflow you want to make sure that

63
00:02:41,340 --> 00:02:44,850
works in all the browsers and generally

64
00:02:44,850 --> 00:02:46,140
you would call these kinds of things

65
00:02:46,140 --> 00:02:48,270
large tests when you are talking to the

66
00:02:48,270 --> 00:02:49,910
network you're talking to the database

67
00:02:49,910 --> 00:02:52,680
you're you're obviously launching the

68
00:02:52,680 --> 00:02:54,780
browser it's everything and to end

69
00:02:54,780 --> 00:02:56,760
that's what a functional testing tools

70
00:02:56,760 --> 00:02:58,860
for and that's what selenium is for so

71
00:02:58,860 --> 00:03:02,640
what what we try to do with the selonian

72
00:03:02,640 --> 00:03:04,620
project it's kind of ambitious but we

73
00:03:04,620 --> 00:03:06,090
want to be able to test any browser on

74
00:03:06,090 --> 00:03:08,820
any platform and with the other caveat

75
00:03:08,820 --> 00:03:10,590
is that we want to be able to make it so

76
00:03:10,590 --> 00:03:11,850
you can drive it from any programming

77
00:03:11,850 --> 00:03:13,410
language so regardless of the web

78
00:03:13,410 --> 00:03:14,430
framework that you're doing on the

79
00:03:14,430 --> 00:03:17,820
server side so we support Perl Python

80
00:03:17,820 --> 00:03:20,670
Ruby Java C sharp and then other members

81
00:03:20,670 --> 00:03:21,870
that's officially the members the

82
00:03:21,870 --> 00:03:25,950
community of committed client libraries

83
00:03:25,950 --> 00:03:28,830
and lots of other languages so it's it's

84
00:03:28,830 --> 00:03:31,200
a yeah you're supposed to keep it simple

85
00:03:31,200 --> 00:03:32,910
but we have lots of simple parts and

86
00:03:32,910 --> 00:03:36,000
this become this big thing so selenium

87
00:03:36,000 --> 00:03:39,600
also this is its downloads to date

88
00:03:39,600 --> 00:03:41,280
cumulative to life of the project

89
00:03:41,280 --> 00:03:43,680
probably came out in 2004 I think we

90
00:03:43,680 --> 00:03:45,900
really started tracking stuff in 2006 I

91
00:03:45,900 --> 00:03:51,640
guess so we've got even though quantity

92
00:03:51,650 --> 00:03:56,610
does not guarantee quality the quantity

93
00:03:56,610 --> 00:03:58,530
actually is pretty good we have over one

94
00:03:58,530 --> 00:04:00,570
and a half million downloads life to

95
00:04:00,570 --> 00:04:02,940
date and so the bottom line is is

96
00:04:02,940 --> 00:04:04,829
monthly totals and then the big line is

97
00:04:04,829 --> 00:04:09,329
cumulative and if you look at the other

98
00:04:09,329 --> 00:04:12,329
tools that are kind of in competition

99
00:04:12,329 --> 00:04:17,130
with selenium its selenium is one if I

100
00:04:17,130 --> 00:04:19,620
could be not so humble for a second this

101
00:04:19,620 --> 00:04:23,490
also we did reverse dns lookups on that

102
00:04:23,490 --> 00:04:24,870
download traffic and this is just a

103
00:04:24,870 --> 00:04:27,340
representative of the companies that

104
00:04:27,340 --> 00:04:33,160
have at least 100 downloads and so and

105
00:04:33,160 --> 00:04:34,540
also this doesn't not count the people

106
00:04:34,540 --> 00:04:36,220
who just check out the code this is

107
00:04:36,220 --> 00:04:39,120
actually downloading the binary at night

108
00:04:39,120 --> 00:04:42,490
so now that we've proven that beyond a

109
00:04:42,490 --> 00:04:44,110
shadow of doubt that selenium is awesome

110
00:04:44,110 --> 00:04:46,479
why would you not use selenium well

111
00:04:46,479 --> 00:04:48,040
first of all functional testing in

112
00:04:48,040 --> 00:04:51,460
general is slow by nature subliminal

113
00:04:51,460 --> 00:04:53,410
advertising that's what my startup is

114
00:04:53,410 --> 00:04:56,080
specifically focused on solving is the

115
00:04:56,080 --> 00:04:59,380
speed issue but compared to the better

116
00:04:59,380 --> 00:05:01,060
thing to do if your developers to write

117
00:05:01,060 --> 00:05:03,910
lots of fast tight small unit tests that

118
00:05:03,910 --> 00:05:06,280
don't touch the database don't touch the

119
00:05:06,280 --> 00:05:08,380
network don't touch the GUI just

120
00:05:08,380 --> 00:05:11,620
thinking of an isolation so it's better

121
00:05:11,620 --> 00:05:14,590
to do small unit tests but when you have

122
00:05:14,590 --> 00:05:16,990
to you have to use selenium but knowing

123
00:05:16,990 --> 00:05:19,060
that selenium is is and functional

124
00:05:19,060 --> 00:05:21,880
testing in general is slow also because

125
00:05:21,880 --> 00:05:23,800
selenium originally just started out as

126
00:05:23,800 --> 00:05:27,220
a JavaScript library and everyone has

127
00:05:27,220 --> 00:05:28,870
this problem as a JavaScript developer

128
00:05:28,870 --> 00:05:32,830
you can't touch the all the black box

129
00:05:32,830 --> 00:05:35,169
widgets that are in the web page the

130
00:05:35,169 --> 00:05:40,510
flash and applet flash and java applets

131
00:05:40,510 --> 00:05:42,460
and now Silverlight also the adobe

132
00:05:42,460 --> 00:05:44,410
reader all those things unless there's a

133
00:05:44,410 --> 00:05:48,099
JavaScript bridge to talk to those

134
00:05:48,099 --> 00:05:50,320
widgets from JavaScript than I mean then

135
00:05:50,320 --> 00:05:51,669
you then you can do it if there's a

136
00:05:51,669 --> 00:05:54,010
bridge but if not slim can't do it that

137
00:05:54,010 --> 00:05:56,289
confuses some people when you think like

138
00:05:56,289 --> 00:05:58,090
oh well a user should be able to click

139
00:05:58,090 --> 00:05:59,740
into the YouTube player and click play

140
00:05:59,740 --> 00:06:01,510
why can't selenium well you have to know

141
00:06:01,510 --> 00:06:03,070
that it's it was implemented in

142
00:06:03,070 --> 00:06:05,639
JavaScript and so it's limited to that

143
00:06:05,639 --> 00:06:09,160
also the as we all know JavaScript lives

144
00:06:09,160 --> 00:06:11,979
in a security sandbox and it feels like

145
00:06:11,979 --> 00:06:13,690
that sandbox is pretty big when flooding

146
00:06:13,690 --> 00:06:14,830
was created five years ago but it's

147
00:06:14,830 --> 00:06:16,330
getting smaller and smaller you have

148
00:06:16,330 --> 00:06:19,150
things like mashups and where you've got

149
00:06:19,150 --> 00:06:20,590
data coming from two different sites and

150
00:06:20,590 --> 00:06:23,320
you have things like I google or

151
00:06:23,320 --> 00:06:25,150
facebook where you just have lots of

152
00:06:25,150 --> 00:06:26,680
different data coming from lots of

153
00:06:26,680 --> 00:06:30,099
different domains and what doesn't trip

154
00:06:30,099 --> 00:06:35,610
up a user oh one other example is the

155
00:06:35,610 --> 00:06:37,870
specific instance of this is the same

156
00:06:37,870 --> 00:06:40,419
origin policy your javascript is not

157
00:06:40,419 --> 00:06:41,300
allowed to go to any

158
00:06:41,300 --> 00:06:42,650
their site and that's just not how

159
00:06:42,650 --> 00:06:44,090
people are doing apps these days and

160
00:06:44,090 --> 00:06:45,530
again from a point of view of a

161
00:06:45,530 --> 00:06:47,360
functional testing tool a user can go

162
00:06:47,360 --> 00:06:49,250
from site to site the testing tool

163
00:06:49,250 --> 00:06:53,030
should too so but constantly come up in

164
00:06:53,030 --> 00:06:55,639
into the boundaries of the sandbox when

165
00:06:55,639 --> 00:06:57,979
it comes to testing so obviously

166
00:06:57,979 --> 00:06:59,990
selenium is not for small tests for big

167
00:06:59,990 --> 00:07:02,479
tests so a brief history of Suwanee and

168
00:07:02,479 --> 00:07:06,379
this is kind of the untold story so I'll

169
00:07:06,379 --> 00:07:09,259
just kind of fly through these things so

170
00:07:09,259 --> 00:07:10,460
originally started when I was at

171
00:07:10,460 --> 00:07:11,659
ThoughtWorks five years ago I was in

172
00:07:11,659 --> 00:07:14,539
charge of a writing in house replacement

173
00:07:14,539 --> 00:07:17,990
for our time and expense system so if

174
00:07:17,990 --> 00:07:19,460
you can look right kind of at the bottom

175
00:07:19,460 --> 00:07:20,900
here like there's a couple of buttons

176
00:07:20,900 --> 00:07:23,270
they're kind of fuzzy but this was ajax

177
00:07:23,270 --> 00:07:26,150
before it was Ajax I just call it fast

178
00:07:26,150 --> 00:07:28,879
JavaScript or fast apps in the sense

179
00:07:28,879 --> 00:07:30,379
where if you got a five-line expense

180
00:07:30,379 --> 00:07:32,419
report you want to add one row because

181
00:07:32,419 --> 00:07:33,500
you're doing a lot you have lots of

182
00:07:33,500 --> 00:07:35,750
expenses instead of making what was

183
00:07:35,750 --> 00:07:37,340
stated a state of the art at the time a

184
00:07:37,340 --> 00:07:40,009
request response I just would clone the

185
00:07:40,009 --> 00:07:41,569
last row blank out the lines and you

186
00:07:41,569 --> 00:07:43,330
know add a new one increment the counter

187
00:07:43,330 --> 00:07:45,949
and this was awesome I didn't think to

188
00:07:45,949 --> 00:07:48,710
come up with an acronym for these things

189
00:07:48,710 --> 00:07:51,440
but what we did notice though is because

190
00:07:51,440 --> 00:07:53,300
we did have a user base using Mozilla

191
00:07:53,300 --> 00:07:55,219
and ie what was happening is we would

192
00:07:55,219 --> 00:07:57,680
check in that feature and every other

193
00:07:57,680 --> 00:07:59,150
week it would be working and you know

194
00:07:59,150 --> 00:08:01,729
one of those browsers so we would launch

195
00:08:01,729 --> 00:08:04,340
the bug oh hey open a bug it's broken in

196
00:08:04,340 --> 00:08:06,050
IE we'd fix in IE of course to be broken

197
00:08:06,050 --> 00:08:08,300
in missoula very frustrating but I did

198
00:08:08,300 --> 00:08:09,409
not want to go back to the days of

199
00:08:09,409 --> 00:08:11,539
request response so I wanted to keep

200
00:08:11,539 --> 00:08:13,960
this fast functionality fast JavaScript

201
00:08:13,960 --> 00:08:16,969
but had a figure way to test it so we

202
00:08:16,969 --> 00:08:19,310
would go on and on like have to keep

203
00:08:19,310 --> 00:08:21,860
this feature we dad we had several

204
00:08:21,860 --> 00:08:26,449
failed attempts at basically selenium is

205
00:08:26,449 --> 00:08:27,919
like the fifth thing that we tried or

206
00:08:27,919 --> 00:08:29,569
fourth or fifth the first thing we tried

207
00:08:29,569 --> 00:08:31,279
was J web unit first problem is that we

208
00:08:31,279 --> 00:08:32,419
were a Python project and we're trying

209
00:08:32,419 --> 00:08:34,010
to use a Java technology so that's right

210
00:08:34,010 --> 00:08:36,529
off the bat silly and stupid but the

211
00:08:36,529 --> 00:08:39,349
other thing was at the time for

212
00:08:39,349 --> 00:08:40,669
functional testing the state of the art

213
00:08:40,669 --> 00:08:42,079
was something like j web unit where it

214
00:08:42,079 --> 00:08:44,720
was an HTTP protocol driver where you

215
00:08:44,720 --> 00:08:48,019
would do like regex assertions on the

216
00:08:48,019 --> 00:08:50,000
HTTP text traffic going over the wire

217
00:08:50,000 --> 00:08:51,680
and everyone just and especially since

218
00:08:51,680 --> 00:08:52,880
you were doing request response anyway

219
00:08:52,880 --> 00:08:54,920
everything that you needed to know

220
00:08:54,920 --> 00:08:56,510
was supposed to be on the wire right

221
00:08:56,510 --> 00:08:58,760
it's all this text but because I browser

222
00:08:58,760 --> 00:09:02,000
specific bugs just looking at the HTTP

223
00:09:02,000 --> 00:09:05,420
traffic was pointless so that was

224
00:09:05,420 --> 00:09:07,070
quickly abandoned the second thing we

225
00:09:07,070 --> 00:09:11,360
tried was something called driftwood a

226
00:09:11,360 --> 00:09:13,699
co-worker of mine Andrew mcCormick he's

227
00:09:13,699 --> 00:09:17,740
in Chicago I was in Chicago to with him

228
00:09:17,740 --> 00:09:20,510
anyway see he he created this prototype

229
00:09:20,510 --> 00:09:23,810
and it was Mozilla specific so it didn't

230
00:09:23,810 --> 00:09:26,180
help us for solving the IE problems but

231
00:09:26,180 --> 00:09:27,949
it did kind of do at least prove the

232
00:09:27,949 --> 00:09:29,510
point that you could drive the browser

233
00:09:29,510 --> 00:09:31,639
ins from inside the browser and using

234
00:09:31,639 --> 00:09:33,800
javascript so that was pretty cool the

235
00:09:33,800 --> 00:09:35,779
third thing we tried was a project that

236
00:09:35,779 --> 00:09:38,510
was around for maybe about a year at

237
00:09:38,510 --> 00:09:41,870
that point was jay s unit that was

238
00:09:41,870 --> 00:09:44,750
written is written by edward hyatt thing

239
00:09:44,750 --> 00:09:47,199
he's at pivotal labs in california and

240
00:09:47,199 --> 00:09:49,820
the thing that didn't work with this is

241
00:09:49,820 --> 00:09:52,579
that jay s unit is meant for unit

242
00:09:52,579 --> 00:09:53,750
testing i kind of need something

243
00:09:53,750 --> 00:09:55,910
functional testing but specifically that

244
00:09:55,910 --> 00:09:57,380
was wrong with it is i need to be able

245
00:09:57,380 --> 00:09:59,449
to see the user interface and see all

246
00:09:59,449 --> 00:10:03,079
the widgets being exercised but the

247
00:10:03,079 --> 00:10:04,699
other kind of very specific thing that

248
00:10:04,699 --> 00:10:09,010
it could not do that everyone knows that

249
00:10:09,010 --> 00:10:12,140
cilenia javascript is load and go the

250
00:10:12,140 --> 00:10:13,699
second that script gets loaded from the

251
00:10:13,699 --> 00:10:16,490
server it executes s'right but with a

252
00:10:16,490 --> 00:10:19,070
workflow you have to do everything kind

253
00:10:19,070 --> 00:10:20,540
of asynchronously where you have to load

254
00:10:20,540 --> 00:10:22,100
a page and then kind of hang out for a

255
00:10:22,100 --> 00:10:24,079
while stop wait till the page is loaded

256
00:10:24,079 --> 00:10:26,690
then continue and that asynchronous kind

257
00:10:26,690 --> 00:10:28,730
of call back scheme which is not

258
00:10:28,730 --> 00:10:30,560
supported by jay s unit so I we couldn't

259
00:10:30,560 --> 00:10:33,050
we tried to shoehorn it in there and

260
00:10:33,050 --> 00:10:36,589
just couldn't make it work so another

261
00:10:36,589 --> 00:10:38,209
attempt I really said like me and I

262
00:10:38,209 --> 00:10:41,089
really need a functional testing tool or

263
00:10:41,089 --> 00:10:42,440
something with you know the emphasis on

264
00:10:42,440 --> 00:10:43,699
actually seeing what the browsers are

265
00:10:43,699 --> 00:10:47,690
doing and so Ward Cunningham created

266
00:10:47,690 --> 00:10:50,089
around that time created this framework

267
00:10:50,089 --> 00:10:53,269
called fit I think it fit is the acronym

268
00:10:53,269 --> 00:10:56,839
is framework for integrated testing he's

269
00:10:56,839 --> 00:10:59,420
also the creator of wiki and lots of

270
00:10:59,420 --> 00:11:01,670
other things but so he created this

271
00:11:01,670 --> 00:11:06,920
thing called fit and it was implemented

272
00:11:06,920 --> 00:11:08,209
in lots of different languages but there

273
00:11:08,209 --> 00:11:08,510
was no

274
00:11:08,510 --> 00:11:10,940
for the JavaScript platform if you will

275
00:11:10,940 --> 00:11:12,590
at the time so I kind of emailed him say

276
00:11:12,590 --> 00:11:13,760
hey did anyone done this yet I said no

277
00:11:13,760 --> 00:11:16,040
let go ahead so I tried to implement it

278
00:11:16,040 --> 00:11:18,890
and he had a specific thing if you know

279
00:11:18,890 --> 00:11:20,120
fit i'm not going to go into it but

280
00:11:20,120 --> 00:11:21,230
they've got these things called fixtures

281
00:11:21,230 --> 00:11:23,990
and it's good for data driven

282
00:11:23,990 --> 00:11:25,100
development but one of the things they

283
00:11:25,100 --> 00:11:27,740
had this thing called action fixture and

284
00:11:27,740 --> 00:11:32,290
they've got four he has four API

285
00:11:32,290 --> 00:11:34,370
commands i don't know if i can zoom in

286
00:11:34,370 --> 00:11:37,490
here so you can see this you've got

287
00:11:37,490 --> 00:11:40,550
starts enter press and click and she

288
00:11:40,550 --> 00:11:42,770
says on his website if you deviate from

289
00:11:42,770 --> 00:11:45,320
this api you forked the project and you

290
00:11:45,320 --> 00:11:46,310
know you're no longer can call yourself

291
00:11:46,310 --> 00:11:50,000
fit and also it's like okay also the

292
00:11:50,000 --> 00:11:51,710
other thing is kind of silly if i want

293
00:11:51,710 --> 00:11:54,230
to check a checkbox that's not the

294
00:11:54,230 --> 00:11:55,040
command you would want to use that

295
00:11:55,040 --> 00:11:57,860
actually is a check is the command for

296
00:11:57,860 --> 00:11:59,930
verifying field but that doesn't make

297
00:11:59,930 --> 00:12:01,580
any sense and you know i'm going to

298
00:12:01,580 --> 00:12:03,140
check a checkbox but then check the

299
00:12:03,140 --> 00:12:05,600
value in too much naming classic so I

300
00:12:05,600 --> 00:12:07,930
didn't like the API it was too limiting

301
00:12:07,930 --> 00:12:11,180
so he kind of I guess said at the time

302
00:12:11,180 --> 00:12:14,030
go for yourself you're very pleasant guy

303
00:12:14,030 --> 00:12:15,260
he didn't actually say those words but

304
00:12:15,260 --> 00:12:21,200
we had were forced to fork fit and so

305
00:12:21,200 --> 00:12:22,610
out of all the things that we weren't

306
00:12:22,610 --> 00:12:25,040
learns originally it was Jay sft when we

307
00:12:25,040 --> 00:12:28,760
kind of rebranded it to be a selenium so

308
00:12:28,760 --> 00:12:31,490
you know on that side note what's with

309
00:12:31,490 --> 00:12:35,810
the name selenium all the company

310
00:12:35,810 --> 00:12:38,270
mercury interactive they were required

311
00:12:38,270 --> 00:12:41,480
by HP last year they are like the 400

312
00:12:41,480 --> 00:12:43,430
pound gorilla in the testing and the

313
00:12:43,430 --> 00:12:45,980
corporate evil proprietary testing tools

314
00:12:45,980 --> 00:12:49,040
market and so I was just playing around

315
00:12:49,040 --> 00:12:51,560
was googling around for play on words

316
00:12:51,560 --> 00:12:53,420
with mercury mercury poisoning antidote

317
00:12:53,420 --> 00:12:55,790
for mercury poisoning found this kind of

318
00:12:55,790 --> 00:12:57,680
quack doctor who's you know talks about

319
00:12:57,680 --> 00:13:00,890
like removing mercury amalgam dental

320
00:13:00,890 --> 00:13:03,260
fillings and how selenium supplements

321
00:13:03,260 --> 00:13:06,470
can be a cure for mercury talk poisoning

322
00:13:06,470 --> 00:13:09,230
so like a ha that's it so now that I've

323
00:13:09,230 --> 00:13:10,370
said this out loud it used to be the

324
00:13:10,370 --> 00:13:11,630
inside joke of the project and now it's

325
00:13:11,630 --> 00:13:13,490
on now it's live for the world to know

326
00:13:13,490 --> 00:13:15,710
that we are suspicions were specifically

327
00:13:15,710 --> 00:13:18,490
mooning the ogre of mercury interactive

328
00:13:18,490 --> 00:13:20,830
so now I'll briefly kind of fly through

329
00:13:20,830 --> 00:13:23,290
the projects that are kind of in the

330
00:13:23,290 --> 00:13:26,680
selenium family originally started with

331
00:13:26,680 --> 00:13:29,140
this JavaScript oh sorry for Saul there

332
00:13:29,140 --> 00:13:33,459
any questions I'm flying through all

333
00:13:33,459 --> 00:13:36,640
right I'll go faster the first thing

334
00:13:36,640 --> 00:13:39,160
it's lame started out as is a just a

335
00:13:39,160 --> 00:13:42,310
JavaScript library and if you've seen

336
00:13:42,310 --> 00:13:43,390
selenium it kind of looks like this

337
00:13:43,390 --> 00:13:46,240
where you can recognize that the the

338
00:13:46,240 --> 00:13:48,940
inspiration from fit where forget all of

339
00:13:48,940 --> 00:13:52,540
the left side and the right side just

340
00:13:52,540 --> 00:13:57,550
focus on the center whoa so fuggin wrong

341
00:13:57,550 --> 00:14:02,920
button here there you go the center

342
00:14:02,920 --> 00:14:04,720
you've got the three column field where

343
00:14:04,720 --> 00:14:06,430
the command the first column is the

344
00:14:06,430 --> 00:14:09,160
command the second column is kind of

345
00:14:09,160 --> 00:14:10,660
like the field that you want to do

346
00:14:10,660 --> 00:14:12,550
something too and the third thing is

347
00:14:12,550 --> 00:14:14,470
like the variable so this this line

348
00:14:14,470 --> 00:14:16,029
right here it would be I would want to

349
00:14:16,029 --> 00:14:18,399
type the letter X into the username

350
00:14:18,399 --> 00:14:20,640
field just kind of lifted straight from

351
00:14:20,640 --> 00:14:23,980
from fit and then the web app that

352
00:14:23,980 --> 00:14:25,360
you're testing the load in an iframe

353
00:14:25,360 --> 00:14:26,950
down below so when you click the play

354
00:14:26,950 --> 00:14:29,020
button it will be kind of a player piano

355
00:14:29,020 --> 00:14:31,540
or it's actually kind of it will show

356
00:14:31,540 --> 00:14:33,880
each line yeah here it you can't really

357
00:14:33,880 --> 00:14:36,279
see it but as each line gets passed

358
00:14:36,279 --> 00:14:39,430
it'll go from grey to green and if that

359
00:14:39,430 --> 00:14:42,220
test line failed it'll go red so it was

360
00:14:42,220 --> 00:14:44,670
very visual visually interesting and

361
00:14:44,670 --> 00:14:46,779
finally got what I wanted and it worked

362
00:14:46,779 --> 00:14:51,480
across browser back tears tears on

363
00:14:51,480 --> 00:14:55,209
chinya in Tokyo he's also this creator

364
00:14:55,209 --> 00:14:57,850
of the pocket guitar iPhone app it's

365
00:14:57,850 --> 00:15:00,190
like number 7 on the all-time top iphone

366
00:15:00,190 --> 00:15:02,980
app things but he also before he was

367
00:15:02,980 --> 00:15:04,630
famous on the iphone stuff he created

368
00:15:04,630 --> 00:15:06,670
selenium ide which is effectively

369
00:15:06,670 --> 00:15:08,410
selenium core but pulled out as a as a

370
00:15:08,410 --> 00:15:10,329
browser extension for firefox and the

371
00:15:10,329 --> 00:15:13,600
cool thing about this is it is no longer

372
00:15:13,600 --> 00:15:15,730
susceptible to the security sandbox so

373
00:15:15,730 --> 00:15:17,620
you can go from site to site and go to

374
00:15:17,620 --> 00:15:22,180
ssl protected websites and it was pretty

375
00:15:22,180 --> 00:15:24,880
cool it also has a record playback

376
00:15:24,880 --> 00:15:27,160
feature so if you want to test that you

377
00:15:27,160 --> 00:15:29,130
know scenario going to google com

378
00:15:29,130 --> 00:15:31,510
testing some values you know it can

379
00:15:31,510 --> 00:15:32,150
record

380
00:15:32,150 --> 00:15:33,710
this for you the other cool thing about

381
00:15:33,710 --> 00:15:36,950
this is that in the options menu you can

382
00:15:36,950 --> 00:15:39,980
select to translate the source of the

383
00:15:39,980 --> 00:15:42,140
test that you just recorded to Java or

384
00:15:42,140 --> 00:15:43,850
any of the languages that we support I

385
00:15:43,850 --> 00:15:46,130
hate Java so I would report it to the

386
00:15:46,130 --> 00:15:49,310
Python and then we can use that drive

387
00:15:49,310 --> 00:15:51,860
that from the next tool that we have is

388
00:15:51,860 --> 00:15:53,120
something called selenium remote control

389
00:15:53,120 --> 00:15:55,550
if you find a lot of people who hate

390
00:15:55,550 --> 00:15:58,460
selenium they probably specifically hate

391
00:15:58,460 --> 00:16:01,760
selenium remote control the IDE has a

392
00:16:01,760 --> 00:16:03,650
lot of fans but remote control is kind

393
00:16:03,650 --> 00:16:08,660
of this hairy beast so imagine a that

394
00:16:08,660 --> 00:16:09,830
robot that I showed you at the beginning

395
00:16:09,830 --> 00:16:11,420
this is the remote control for that like

396
00:16:11,420 --> 00:16:15,530
I think like asimo I guess and it's like

397
00:16:15,530 --> 00:16:17,810
what selenium server is selenium remote

398
00:16:17,810 --> 00:16:19,910
control it's the server that sits in the

399
00:16:19,910 --> 00:16:22,670
middle between your application code

400
00:16:22,670 --> 00:16:25,040
your perl python ruby whatever code and

401
00:16:25,040 --> 00:16:27,380
your browsers on one side or actually

402
00:16:27,380 --> 00:16:31,220
doing it that way and it will proxy all

403
00:16:31,220 --> 00:16:32,510
the commands for you but also handle

404
00:16:32,510 --> 00:16:35,230
starting the browsers stopping them if

405
00:16:35,230 --> 00:16:38,090
the windmill guys looked at this and

406
00:16:38,090 --> 00:16:40,730
there they kind of felt like selenium

407
00:16:40,730 --> 00:16:44,810
server was just too much too much code

408
00:16:44,810 --> 00:16:46,640
and they felt you know arm's distance

409
00:16:46,640 --> 00:16:49,010
from the browsers so they one of the

410
00:16:49,010 --> 00:16:50,090
things they did with windmill has got a

411
00:16:50,090 --> 00:16:51,650
rid of the selenium server thing and

412
00:16:51,650 --> 00:16:53,570
just went straight from Python to the

413
00:16:53,570 --> 00:16:55,070
browser's lots of other you know

414
00:16:55,070 --> 00:16:57,620
competitors to selenium if you will kind

415
00:16:57,620 --> 00:16:59,870
of skip that middleman of and just do

416
00:16:59,870 --> 00:17:01,580
straight language to straight browsers

417
00:17:01,580 --> 00:17:04,430
like the water project web application

418
00:17:04,430 --> 00:17:06,470
testing and Ruby they now have Firefox

419
00:17:06,470 --> 00:17:08,120
support for a long time it was just the

420
00:17:08,120 --> 00:17:11,150
Ruby and ie show and that's what you'd

421
00:17:11,150 --> 00:17:12,980
see a lot it's a common thing selenium

422
00:17:12,980 --> 00:17:14,360
puts this thing in the middle but that

423
00:17:14,360 --> 00:17:16,280
gives us the ability to do all languages

424
00:17:16,280 --> 00:17:20,600
and all browsers and the last part of

425
00:17:20,600 --> 00:17:22,670
the selenium family is something called

426
00:17:22,670 --> 00:17:26,060
selenium grid and that's I won't really

427
00:17:26,060 --> 00:17:28,130
go too much into the specifics of this

428
00:17:28,130 --> 00:17:30,890
it's kind of an advanced use also kind

429
00:17:30,890 --> 00:17:33,980
of very applicable to my startup but the

430
00:17:33,980 --> 00:17:37,340
very simple quiz is what is faster you

431
00:17:37,340 --> 00:17:39,320
know doing for things serially on one

432
00:17:39,320 --> 00:17:42,470
machine or doing four things in parallel

433
00:17:42,470 --> 00:17:45,059
and four machines so obviously

434
00:17:45,059 --> 00:17:48,120
this is faster and grid selenium grid is

435
00:17:48,120 --> 00:17:51,509
the open source component of selenium to

436
00:17:51,509 --> 00:17:53,370
do that you still have to do some

437
00:17:53,370 --> 00:17:55,320
configuration on your machines but the

438
00:17:55,320 --> 00:17:58,110
capability is there and then the

439
00:17:58,110 --> 00:18:01,580
shameless plug is Mike startup does a

440
00:18:01,580 --> 00:18:05,309
selenium grid like thing on on the cloud

441
00:18:05,309 --> 00:18:07,320
and you see two so if I can get out of

442
00:18:07,320 --> 00:18:12,870
this application I can let's see there

443
00:18:12,870 --> 00:18:15,090
you go okay so that's the slide

444
00:18:15,090 --> 00:18:18,749
component I'll show you some some things

445
00:18:18,749 --> 00:18:21,389
that will to the title of my talk will

446
00:18:21,389 --> 00:18:23,669
drive you bonkers when you do functional

447
00:18:23,669 --> 00:18:28,740
testing one specific example is alert

448
00:18:28,740 --> 00:18:33,029
alert confirm prompts firefox 30 the

449
00:18:33,029 --> 00:18:35,999
stupid self signed certificate prompt

450
00:18:35,999 --> 00:18:37,619
where you have to like click 20 times to

451
00:18:37,619 --> 00:18:41,519
actually let you you know except that

452
00:18:41,519 --> 00:18:43,080
certificate those other things like

453
00:18:43,080 --> 00:18:47,279
basic authentication prompts all these

454
00:18:47,279 --> 00:18:49,200
kind of popups the problem with those is

455
00:18:49,200 --> 00:18:51,600
that once that pop-up goes up to the

456
00:18:51,600 --> 00:18:53,159
screen again because that security

457
00:18:53,159 --> 00:18:55,499
sandbox JavaScript can't click on the ok

458
00:18:55,499 --> 00:18:57,539
button once it's there a human or some

459
00:18:57,539 --> 00:18:59,009
kind of native operating system code

460
00:18:59,009 --> 00:19:00,299
actually has to click on that ok

461
00:19:00,299 --> 00:19:03,149
selenium projects to date we fake it out

462
00:19:03,149 --> 00:19:06,600
by overriding the wind the the alerts

463
00:19:06,600 --> 00:19:09,119
all the things that we can when you when

464
00:19:09,119 --> 00:19:10,679
you call to alert it's actually a

465
00:19:10,679 --> 00:19:12,539
function called window alert and we

466
00:19:12,539 --> 00:19:14,070
replace that with our own code that it

467
00:19:14,070 --> 00:19:16,019
just says you know return true and when

468
00:19:16,019 --> 00:19:20,249
we put it in a log hash of alerts that

469
00:19:20,249 --> 00:19:22,080
have been accumulated so you can do

470
00:19:22,080 --> 00:19:24,090
assertions on that but it's kind of it's

471
00:19:24,090 --> 00:19:26,009
just a hack that's worked for a couple

472
00:19:26,009 --> 00:19:27,899
of years but it's getting harder what's

473
00:19:27,899 --> 00:19:29,279
pasilla team specifically does is when

474
00:19:29,279 --> 00:19:30,869
it loads the page it injects that hack

475
00:19:30,869 --> 00:19:32,850
into all the stuff that you did but when

476
00:19:32,850 --> 00:19:35,220
you have lots of dynamic pages up so

477
00:19:35,220 --> 00:19:39,360
crazy widgets on the screen we can't be

478
00:19:39,360 --> 00:19:41,159
everywhere all the time hacking all the

479
00:19:41,159 --> 00:19:43,110
pages that come in and so occasionally a

480
00:19:43,110 --> 00:19:45,539
little alerts fly up and when that alert

481
00:19:45,539 --> 00:19:48,629
comes up the combination problem of the

482
00:19:48,629 --> 00:19:50,999
JavaScript thread itself is it's frozen

483
00:19:50,999 --> 00:19:52,799
at that point which is a nice debugging

484
00:19:52,799 --> 00:19:54,769
trick but if you have a code execution

485
00:19:54,769 --> 00:19:56,909
running in the browser you can't even

486
00:19:56,909 --> 00:19:58,890
call back to the server saying I'm stuck

487
00:19:58,890 --> 00:20:01,770
because you're you really are stuck so

488
00:20:01,770 --> 00:20:03,300
the one thing i want to show you there's

489
00:20:03,300 --> 00:20:05,250
a snippet of code that at least in

490
00:20:05,250 --> 00:20:07,350
firefox can guarantee any pop-up that

491
00:20:07,350 --> 00:20:10,230
comes up it'll actually it can show it

492
00:20:10,230 --> 00:20:11,790
and then click on it and this is going

493
00:20:11,790 --> 00:20:14,520
to done it in javascript but the key of

494
00:20:14,520 --> 00:20:15,810
this is that it's actually running kind

495
00:20:15,810 --> 00:20:18,330
of as a browser extension so that in as

496
00:20:18,330 --> 00:20:19,740
bratton browser extension land you have

497
00:20:19,740 --> 00:20:21,510
a second execution thread so even if the

498
00:20:21,510 --> 00:20:22,920
primary thing where the alert comes up

499
00:20:22,920 --> 00:20:25,320
is stuck your extensions have a second

500
00:20:25,320 --> 00:20:26,850
thread that actually can kind of go fix

501
00:20:26,850 --> 00:20:32,490
the problem so Aaron buban he is at

502
00:20:32,490 --> 00:20:35,790
Google he wrote grease monkey and he's

503
00:20:35,790 --> 00:20:39,060
also on the gears team he gave me a of

504
00:20:39,060 --> 00:20:41,880
code and I can't it really too boring

505
00:20:41,880 --> 00:20:43,230
for me to go through all of this but

506
00:20:43,230 --> 00:20:44,790
i'll just briefly kind of do the code

507
00:20:44,790 --> 00:20:48,390
summary this firefox and firefox

508
00:20:48,390 --> 00:20:50,940
specifically as a harp it's a wonderful

509
00:20:50,940 --> 00:20:52,260
browser to test because infinitely

510
00:20:52,260 --> 00:20:54,180
anything is configurable but it's also

511
00:20:54,180 --> 00:20:56,190
its own little operating system so what

512
00:20:56,190 --> 00:20:58,980
would work what is easy for Safari it's

513
00:20:58,980 --> 00:21:00,900
just use all of you Apple events and you

514
00:21:00,900 --> 00:21:03,330
just do all kinds of just same stuff you

515
00:21:03,330 --> 00:21:05,010
do in any application on the Apple side

516
00:21:05,010 --> 00:21:08,220
and I IE and Windows you can use windows

517
00:21:08,220 --> 00:21:09,780
automation and all kinds of stuff but

518
00:21:09,780 --> 00:21:11,430
firefox is its own thing so you guys had

519
00:21:11,430 --> 00:21:12,870
to come up with some crazy things so he

520
00:21:12,870 --> 00:21:15,830
has this crazy bit of code that lets me

521
00:21:15,830 --> 00:21:19,860
listen to firefox's internal eventing

522
00:21:19,860 --> 00:21:21,330
system which is kind of a superset of

523
00:21:21,330 --> 00:21:23,180
all the events that just plain old

524
00:21:23,180 --> 00:21:25,980
JavaScript protected or a security

525
00:21:25,980 --> 00:21:27,450
protected JavaScript and get to

526
00:21:27,450 --> 00:21:29,310
specifically there's an event called Dom

527
00:21:29,310 --> 00:21:33,450
window opened that I can hook to and if

528
00:21:33,450 --> 00:21:35,700
I can make this a little bit bigger the

529
00:21:35,700 --> 00:21:42,330
magic is I can see if I can find the

530
00:21:42,330 --> 00:21:46,530
right along here magic is this line of

531
00:21:46,530 --> 00:21:49,920
code I can set a time out i don't think

532
00:21:49,920 --> 00:21:50,940
i have that version running on the

533
00:21:50,940 --> 00:21:53,880
machine but if you can see it maybe not

534
00:21:53,880 --> 00:21:56,700
for the video but i can catch it i can

535
00:21:56,700 --> 00:21:59,430
catch it and then in a timeout close it

536
00:21:59,430 --> 00:22:01,560
so if my selenium test is actually

537
00:22:01,560 --> 00:22:03,330
running this snippet of code is kind of

538
00:22:03,330 --> 00:22:05,430
like we're running as like a watchdog

539
00:22:05,430 --> 00:22:07,950
and actually can catch it so the brief

540
00:22:07,950 --> 00:22:11,520
demo of this is I've got

541
00:22:11,520 --> 00:22:16,320
see I've got Firebug running and I could

542
00:22:16,320 --> 00:22:17,340
do the before and after but in the

543
00:22:17,340 --> 00:22:18,450
interest of time I'll just show the you

544
00:22:18,450 --> 00:22:21,570
the after and hopefully no demo gremlins

545
00:22:21,570 --> 00:22:23,670
show up but this is something that's

546
00:22:23,670 --> 00:22:27,050
been previously impossible to handle in

547
00:22:27,050 --> 00:22:30,450
selenium so you see the alert comes down

548
00:22:30,450 --> 00:22:34,470
and then my timer kind of kicks in and

549
00:22:34,470 --> 00:22:38,670
gets it to go away so the future of the

550
00:22:38,670 --> 00:22:40,830
project is going down this path of

551
00:22:40,830 --> 00:22:42,600
finding either browser extensions or

552
00:22:42,600 --> 00:22:44,280
actually native operating system code to

553
00:22:44,280 --> 00:22:46,920
get out of that security sandbox and do

554
00:22:46,920 --> 00:22:52,800
things to the browser this is

555
00:22:52,800 --> 00:22:56,850
specifically a Firefox hack for ie I'll

556
00:22:56,850 --> 00:22:58,260
have to do something similar i created

557
00:22:58,260 --> 00:23:00,930
it's it's open on code google com

558
00:23:00,930 --> 00:23:03,240
something called selenium ice it's a

559
00:23:03,240 --> 00:23:05,310
hello world browser extension it's also

560
00:23:05,310 --> 00:23:06,750
really hard to Google for information on

561
00:23:06,750 --> 00:23:07,950
how to write browser extensions for IE

562
00:23:07,950 --> 00:23:10,380
so that it's kind of like a just if you

563
00:23:10,380 --> 00:23:11,520
wanted to write browser extensions in

564
00:23:11,520 --> 00:23:13,680
general for IE go check out selenium

565
00:23:13,680 --> 00:23:16,800
eyes but it's you want to be able to

566
00:23:16,800 --> 00:23:21,480
inject yourself into the as IE is about

567
00:23:21,480 --> 00:23:23,640
to show an alert to the screen you want

568
00:23:23,640 --> 00:23:25,440
to get your media hooks into it so you

569
00:23:25,440 --> 00:23:27,510
can you know get in a reference to that

570
00:23:27,510 --> 00:23:29,730
and then close it in a second so slutty

571
00:23:29,730 --> 00:23:32,580
mice was kind of my first attempt at at

572
00:23:32,580 --> 00:23:34,530
doing that one of the other things you

573
00:23:34,530 --> 00:23:38,220
have to do in in protected a browser

574
00:23:38,220 --> 00:23:40,110
extension land is stuff like the file

575
00:23:40,110 --> 00:23:41,790
upload fields it's the same kind of

576
00:23:41,790 --> 00:23:43,080
thing you have to use kind of a browser

577
00:23:43,080 --> 00:23:47,490
extension to do that yes that's like the

578
00:23:47,490 --> 00:23:49,190
extension itself is written in C sharp

579
00:23:49,190 --> 00:23:53,160
but also you can do it through Microsoft

580
00:23:53,160 --> 00:23:56,040
automation library stuff that that's

581
00:23:56,040 --> 00:23:57,630
kind of external but really you need a

582
00:23:57,630 --> 00:24:01,110
browser extension to write when the when

583
00:24:01,110 --> 00:24:03,030
the alert pops up so that's the

584
00:24:03,030 --> 00:24:04,980
frustrating the the good thing and bad

585
00:24:04,980 --> 00:24:06,990
thing about the selenium project we did

586
00:24:06,990 --> 00:24:08,730
kind of the worst is better approach we

587
00:24:08,730 --> 00:24:10,020
saw about eighty percent of the problem

588
00:24:10,020 --> 00:24:11,340
by doing everything in JavaScript but

589
00:24:11,340 --> 00:24:12,930
now we're five years in we're the only

590
00:24:12,930 --> 00:24:14,280
thing left for us to do is that twenty

591
00:24:14,280 --> 00:24:16,470
percent and we have to architectural e

592
00:24:16,470 --> 00:24:18,590
you know do something

593
00:24:18,590 --> 00:24:21,380
do something different so so on that

594
00:24:21,380 --> 00:24:23,510
note though it's not just a pie in this

595
00:24:23,510 --> 00:24:25,549
guy rewrite that'll take forever there's

596
00:24:25,549 --> 00:24:26,900
a project that already exists called

597
00:24:26,900 --> 00:24:29,330
webdriver that actually does it hat it

598
00:24:29,330 --> 00:24:30,860
does implement the things the way you

599
00:24:30,860 --> 00:24:32,210
should do with these browser extensions

600
00:24:32,210 --> 00:24:34,400
or just native operating system hooks

601
00:24:34,400 --> 00:24:36,620
and selenium 2.0 and lake over the next

602
00:24:36,620 --> 00:24:38,480
year will be merging with them so we'll

603
00:24:38,480 --> 00:24:41,350
have that capability for word what

604
00:24:41,350 --> 00:24:44,659
webdriver that's also a hosted code

605
00:24:44,659 --> 00:24:49,940
google com so that this that's kind of

606
00:24:49,940 --> 00:24:51,230
one example of being able to get rid of

607
00:24:51,230 --> 00:24:54,169
these alerts that's been kind of driving

608
00:24:54,169 --> 00:24:57,590
me crazy and also I think John if I

609
00:24:57,590 --> 00:25:00,049
think might be is he here I think he's

610
00:25:00,049 --> 00:25:02,750
on the other I think he noticed he noted

611
00:25:02,750 --> 00:25:05,779
that yeah tests warm if you throw an

612
00:25:05,779 --> 00:25:07,549
alert there it might kill that session

613
00:25:07,549 --> 00:25:10,070
so it's it plagues every automation

614
00:25:10,070 --> 00:25:13,580
tester so that's now gotten to go away

615
00:25:13,580 --> 00:25:14,929
the other thing that people complain

616
00:25:14,929 --> 00:25:16,730
about selenium is the syntax of those

617
00:25:16,730 --> 00:25:19,179
tables I have some I guess some

618
00:25:19,179 --> 00:25:21,350
incongruity in the sense that I hate XML

619
00:25:21,350 --> 00:25:26,210
yet I supported a responsible for those

620
00:25:26,210 --> 00:25:28,880
selenium test tables where you've got it

621
00:25:28,880 --> 00:25:31,669
just it's ugly to hack code inside HTML

622
00:25:31,669 --> 00:25:34,010
tables or XML it's the same thing so

623
00:25:34,010 --> 00:25:35,510
what people would love to do is be able

624
00:25:35,510 --> 00:25:37,190
to write their tests it's just plain old

625
00:25:37,190 --> 00:25:39,740
JavaScript like I said before it's

626
00:25:39,740 --> 00:25:41,990
tricky because JavaScript by itself is

627
00:25:41,990 --> 00:25:43,970
just load and go and I need this

628
00:25:43,970 --> 00:25:47,409
asynchronous way to do it and what I

629
00:25:47,409 --> 00:25:51,380
wanted to briefly touch on today is

630
00:25:51,380 --> 00:25:53,149
there's two ways that you can kind of

631
00:25:53,149 --> 00:25:56,409
hack supporting plain old JavaScript as

632
00:25:56,409 --> 00:25:59,390
your tests knowing that you have to kind

633
00:25:59,390 --> 00:26:01,250
of do this continuation engine of sorts

634
00:26:01,250 --> 00:26:03,169
of like do one line of code and hang out

635
00:26:03,169 --> 00:26:04,640
wait to be called back and then restart

636
00:26:04,640 --> 00:26:08,690
again so one thing I found is this this

637
00:26:08,690 --> 00:26:10,899
library called narcissus written by

638
00:26:10,899 --> 00:26:13,760
Brendan Eich at Mozilla who created

639
00:26:13,760 --> 00:26:16,429
JavaScript he was prototyping the next

640
00:26:16,429 --> 00:26:19,010
version of javascript javascript to I

641
00:26:19,010 --> 00:26:21,679
guess what she was like four and the

642
00:26:21,679 --> 00:26:23,059
cool thing he did is he wrote a compiler

643
00:26:23,059 --> 00:26:25,700
parser in JavaScript so you could play

644
00:26:25,700 --> 00:26:27,440
with two features but it compiles down

645
00:26:27,440 --> 00:26:32,390
and runs in JavaScript 15 so

646
00:26:32,390 --> 00:26:35,690
similar in that sense to objective J

647
00:26:35,690 --> 00:26:37,270
where you kind of writing a parser and

648
00:26:37,270 --> 00:26:41,030
you have the same kind of issues of you

649
00:26:41,030 --> 00:26:44,180
can now run through your code the way we

650
00:26:44,180 --> 00:26:45,950
want it but debugging is a little bit

651
00:26:45,950 --> 00:26:48,980
trickier but I did kind of Jack this

652
00:26:48,980 --> 00:26:51,050
into selenium to see if I could get it

653
00:26:51,050 --> 00:26:53,540
to work and so I kind of have three

654
00:26:53,540 --> 00:26:54,980
tests of course as a testing to a

655
00:26:54,980 --> 00:26:56,870
testing tool I have to have tests for

656
00:26:56,870 --> 00:26:59,690
everything before I do it sorry for the

657
00:26:59,690 --> 00:27:02,510
resolution here see if I can make this

658
00:27:02,510 --> 00:27:12,320
bigger so i'll just run so the brief

659
00:27:12,320 --> 00:27:16,400
test is creating functions testing if

660
00:27:16,400 --> 00:27:18,920
then loop if then else or and also doing

661
00:27:18,920 --> 00:27:24,740
a loop as well so if I so if I can

662
00:27:24,740 --> 00:27:30,440
reload this page what it does is parse

663
00:27:30,440 --> 00:27:33,110
it parses it and actually I also

664
00:27:33,110 --> 00:27:36,800
swaggins run it let's walk through it if

665
00:27:36,800 --> 00:27:40,010
you can see it at the bottom I'm kind of

666
00:27:40,010 --> 00:27:43,130
faking out a read eval print loop here

667
00:27:43,130 --> 00:27:44,660
by actually opening a page and setting

668
00:27:44,660 --> 00:27:47,690
the I frame down here to a new page but

669
00:27:47,690 --> 00:27:50,510
with a text message as its variable if I

670
00:27:50,510 --> 00:27:52,850
do if then else you can kind of look

671
00:27:52,850 --> 00:27:57,050
that it's going to create a variable you

672
00:27:57,050 --> 00:27:58,760
know if things are true will you know

673
00:27:58,760 --> 00:28:01,130
put hello world sorry for the small text

674
00:28:01,130 --> 00:28:07,490
and the next one yeah show some more

675
00:28:07,490 --> 00:28:11,030
text also again so we can run this so

676
00:28:11,030 --> 00:28:12,620
one of the interesting things about this

677
00:28:12,620 --> 00:28:15,140
is this this parser that's implemented

678
00:28:15,140 --> 00:28:17,900
in JavaScript probably can't tell it so

679
00:28:17,900 --> 00:28:19,760
much at the bottom but this is the live

680
00:28:19,760 --> 00:28:22,250
stack when you people talk about stack

681
00:28:22,250 --> 00:28:23,870
based languages or register based

682
00:28:23,870 --> 00:28:26,120
languages this effectively you're

683
00:28:26,120 --> 00:28:28,880
compiling JavaScript down to JavaScript

684
00:28:28,880 --> 00:28:30,020
self but you're creating this data

685
00:28:30,020 --> 00:28:31,880
structure and because these selenium

686
00:28:31,880 --> 00:28:33,920
tables are executing the threads I

687
00:28:33,920 --> 00:28:37,250
already have all this other smarts to do

688
00:28:37,250 --> 00:28:39,040
these things I'm compiling down

689
00:28:39,040 --> 00:28:41,060
javascript to these little tables you

690
00:28:41,060 --> 00:28:42,950
actually can see the stack be animated

691
00:28:42,950 --> 00:28:46,190
and as it evaluates a particular command

692
00:28:46,190 --> 00:28:48,289
you can see it commands being inserted

693
00:28:48,289 --> 00:28:51,740
into the stack let's actually a better

694
00:28:51,740 --> 00:28:58,159
example is the formatted the do loops so

695
00:28:58,159 --> 00:29:00,500
as it gets to a new loop it's injecting

696
00:29:00,500 --> 00:29:02,750
new stuff all the stuff at the bottom is

697
00:29:02,750 --> 00:29:04,789
the remaining end of the stack but it's

698
00:29:04,789 --> 00:29:06,830
smart enough to inject into that loop

699
00:29:06,830 --> 00:29:09,200
right in the middle this has actually

700
00:29:09,200 --> 00:29:10,419
been interesting to kind of just

701
00:29:10,419 --> 00:29:13,610
understand how interpreters work how it

702
00:29:13,610 --> 00:29:18,500
adds things to the stack right and

703
00:29:18,500 --> 00:29:20,389
there's one other thing that I thought

704
00:29:20,389 --> 00:29:22,549
it was interesting about this is that if

705
00:29:22,549 --> 00:29:31,850
I change one LLC so if i look at this

706
00:29:31,850 --> 00:29:36,190
source code is parsed it parsed the test

707
00:29:36,190 --> 00:29:41,600
if i go and change so if i can get to

708
00:29:41,600 --> 00:29:44,230
the source code here where's the window

709
00:29:44,230 --> 00:29:47,840
i'm going to uncomment this code here go

710
00:29:47,840 --> 00:29:50,570
back to that screen if i can find my

711
00:29:50,570 --> 00:29:54,590
browser window ever reload it of course

712
00:29:54,590 --> 00:29:57,679
it's not going to work yes i reloaded it

713
00:29:57,679 --> 00:29:59,269
and now you're looking at a you know

714
00:29:59,269 --> 00:30:00,980
printed representation of the abstract

715
00:30:00,980 --> 00:30:03,289
syntax tree this is crazy like we're

716
00:30:03,289 --> 00:30:06,500
doing it all in JavaScript land and so

717
00:30:06,500 --> 00:30:08,090
usually if you want to understand how an

718
00:30:08,090 --> 00:30:09,889
interpreter works you know you're you

719
00:30:09,889 --> 00:30:11,299
have to go down to the C code to figure

720
00:30:11,299 --> 00:30:13,789
out how things are are implemented but

721
00:30:13,789 --> 00:30:16,100
because narcissus is met a circular

722
00:30:16,100 --> 00:30:18,200
interpreter you can kind of stay all in

723
00:30:18,200 --> 00:30:19,639
JavaScript land and actually you know

724
00:30:19,639 --> 00:30:22,669
mess around with things so specifically

725
00:30:22,669 --> 00:30:25,850
like to make sense of this if we look at

726
00:30:25,850 --> 00:30:29,929
the exists the first test of course I to

727
00:30:29,929 --> 00:30:35,570
go undo the 10 second let's bring back

728
00:30:35,570 --> 00:30:38,600
the source control the first line was of

729
00:30:38,600 --> 00:30:40,789
setting a variable called URL to just a

730
00:30:40,789 --> 00:30:47,960
string but if I look at the syntax tree

731
00:30:47,970 --> 00:30:51,279
there it is some setting a variable the

732
00:30:51,279 --> 00:30:56,740
name of the variable is URL and I'm

733
00:30:56,740 --> 00:30:59,950
setting it to the string here yeah sorry

734
00:30:59,950 --> 00:31:03,009
about that setting it to the this value

735
00:31:03,009 --> 00:31:05,019
so it's really great way just if you're

736
00:31:05,019 --> 00:31:07,929
mucking around with wanting to implement

737
00:31:07,929 --> 00:31:09,820
your own language narcissus actually is

738
00:31:09,820 --> 00:31:12,309
a pretty least for me Oh as a not being

739
00:31:12,309 --> 00:31:15,639
a language creator it was a way to

740
00:31:15,639 --> 00:31:17,919
understand this stuff so if anything the

741
00:31:17,919 --> 00:31:19,629
takeaway from this is go around with a

742
00:31:19,629 --> 00:31:21,159
narcissist now there's a couple of

743
00:31:21,159 --> 00:31:24,369
projects that have taken narcissist and

744
00:31:24,369 --> 00:31:25,749
actually fix a lot of bugs in it so

745
00:31:25,749 --> 00:31:28,240
there's something called narrative j/s

746
00:31:28,240 --> 00:31:29,769
and another thing called strands those

747
00:31:29,769 --> 00:31:31,720
are two other projects that have needed

748
00:31:31,720 --> 00:31:33,279
that asynchronous needed to add

749
00:31:33,279 --> 00:31:36,190
asynchronous call backs or making it

750
00:31:36,190 --> 00:31:38,470
easier to do that stuff in JavaScript so

751
00:31:38,470 --> 00:31:40,179
if we really put this into selanne and

752
00:31:40,179 --> 00:31:42,429
we'll probably not use narcissus

753
00:31:42,429 --> 00:31:44,289
directly will probably use narrative j/s

754
00:31:44,289 --> 00:31:52,029
or strands and that's so those are the

755
00:31:52,029 --> 00:31:53,740
two kind of a geeky demos that i want to

756
00:31:53,740 --> 00:31:59,860
show you how much how much time 55 all

757
00:31:59,860 --> 00:32:03,610
right so I'll leave you on a this is my

758
00:32:03,610 --> 00:32:06,190
kind of a soapbox rant for how I want

759
00:32:06,190 --> 00:32:09,970
the future to be if you want to show you

760
00:32:09,970 --> 00:32:13,539
a demo the one thing if everyone go if

761
00:32:13,539 --> 00:32:16,960
you go back in time to that magical year

762
00:32:16,960 --> 00:32:19,240
between when the iphone was just

763
00:32:19,240 --> 00:32:22,389
vaporware and all we had were these

764
00:32:22,389 --> 00:32:28,360
videos on apple com and i look at this

765
00:32:28,360 --> 00:32:29,860
and like this is test automation this is

766
00:32:29,860 --> 00:32:31,119
a functional test of their product and

767
00:32:31,119 --> 00:32:32,470
the amazing thing is about Apple is like

768
00:32:32,470 --> 00:32:34,690
this isn't just some geeky thing that QA

769
00:32:34,690 --> 00:32:36,249
engineer does these are freaking

770
00:32:36,249 --> 00:32:37,840
commercials but I look at this like this

771
00:32:37,840 --> 00:32:40,809
is what I want the people when they

772
00:32:40,809 --> 00:32:43,960
think of tests is to not write something

773
00:32:43,960 --> 00:32:45,429
with a really boring report that goes to

774
00:32:45,429 --> 00:32:47,230
your QA manager you should be thinking

775
00:32:47,230 --> 00:32:48,999
in terms of kind of like a Hollywood

776
00:32:48,999 --> 00:32:50,379
screenwriter like you should be writing

777
00:32:50,379 --> 00:32:52,960
screenplays that show off how awesome

778
00:32:52,960 --> 00:32:54,700
your application is I mean Apple let's

779
00:32:54,700 --> 00:32:56,110
all they do is just show their app and

780
00:32:56,110 --> 00:32:57,730
this is kind of what a functional

781
00:32:57,730 --> 00:32:58,899
testing tool should do open and

782
00:32:58,899 --> 00:33:00,160
something

783
00:33:00,160 --> 00:33:02,200
and exercise the application and show it

784
00:33:02,200 --> 00:33:03,490
off so what I'm trying to do with

785
00:33:03,490 --> 00:33:05,320
selenium i call it like the missing the

786
00:33:05,320 --> 00:33:07,150
Hollywood feature set slowing it down

787
00:33:07,150 --> 00:33:09,250
animating the mouse maybe doing

788
00:33:09,250 --> 00:33:11,380
text-to-speech narration all kinds of

789
00:33:11,380 --> 00:33:15,220
things so i look at iphone videos is

790
00:33:15,220 --> 00:33:16,600
kind of the gold standard for what i

791
00:33:16,600 --> 00:33:21,880
want to do there are some actual code

792
00:33:21,880 --> 00:33:23,560
like bringing that back to the reality

793
00:33:23,560 --> 00:33:29,730
this is a project called casta not and

794
00:33:29,730 --> 00:33:33,010
this is a automated screencast he does

795
00:33:33,010 --> 00:33:35,560
text to speech is recorded on a mac and

796
00:33:35,560 --> 00:33:38,140
showing off this application so this is

797
00:33:38,140 --> 00:33:41,170
like a CMS he's using a mouse poze is

798
00:33:41,170 --> 00:33:42,540
the thing that makes it highlighting and

799
00:33:42,540 --> 00:33:46,270
it's this Ruby liable regulator yeah we

800
00:33:46,270 --> 00:33:48,070
should have more to create a simple sign

801
00:33:48,070 --> 00:33:52,510
structure I mean this is pretty sick

802
00:33:52,510 --> 00:33:54,370
because if you do this automated instead

803
00:33:54,370 --> 00:33:57,090
of screencasting by drinking and driving

804
00:33:57,090 --> 00:34:01,420
all that finish Lewbert has many types

805
00:34:01,420 --> 00:34:07,379
of pages

806
00:34:07,389 --> 00:34:09,899
okay I'm running out of time here so

807
00:34:09,899 --> 00:34:14,169
sing along it's a blog right so this is

808
00:34:14,169 --> 00:34:16,450
a library you can go google it casta not

809
00:34:16,450 --> 00:34:19,299
is the library and the thing is from a

810
00:34:19,299 --> 00:34:20,349
test automation point of view it's

811
00:34:20,349 --> 00:34:23,379
ghetto its 1970s bad old way to not do

812
00:34:23,379 --> 00:34:25,089
testing there's like hard-coded values

813
00:34:25,089 --> 00:34:27,369
like go to this absolute screen

814
00:34:27,369 --> 00:34:29,919
coordinate terrible so from it from a

815
00:34:29,919 --> 00:34:32,230
Hollywood screenwriting point of view a

816
00:34:32,230 --> 00:34:34,839
plus or maybe like a minus iphone gets

817
00:34:34,839 --> 00:34:36,429
the a plus but from test automation

818
00:34:36,429 --> 00:34:37,960
point of view they get an F because they

819
00:34:37,960 --> 00:34:39,760
just do it wrong but if you can get some

820
00:34:39,760 --> 00:34:41,529
kind of test automation tool combined

821
00:34:41,529 --> 00:34:43,809
with the screencasting Hollywood feature

822
00:34:43,809 --> 00:34:45,669
set smart so you got something I think

823
00:34:45,669 --> 00:34:48,700
and one other thing is to kind of put my

824
00:34:48,700 --> 00:34:52,179
money where my mouth is is this is some

825
00:34:52,179 --> 00:34:53,740
of the stuff that I actually was trying

826
00:34:53,740 --> 00:34:55,119
to trying to do again subliminal

827
00:34:55,119 --> 00:34:58,480
advertising we have before we had a user

828
00:34:58,480 --> 00:35:00,970
interface we had an API we were actually

829
00:35:00,970 --> 00:35:03,099
sitting very lightly on top of CouchDB

830
00:35:03,099 --> 00:35:06,220
so if you want to give uploaded script

831
00:35:06,220 --> 00:35:09,069
to us and then run that script on our

832
00:35:09,069 --> 00:35:11,859
code on our on our servers first you up

833
00:35:11,859 --> 00:35:14,170
and create a script object and CouchDB

834
00:35:14,170 --> 00:35:16,690
and then you'll create a job object and

835
00:35:16,690 --> 00:35:18,789
what I did here is this is an automated

836
00:35:18,789 --> 00:35:22,180
screencast kind of taken from you

837
00:35:22,180 --> 00:35:24,819
actually just I've got my stuff that

838
00:35:24,819 --> 00:35:26,410
would otherwise type at the terminal or

839
00:35:26,410 --> 00:35:28,450
the interactive prompt and instead of

840
00:35:28,450 --> 00:35:30,640
just running it silently behind the

841
00:35:30,640 --> 00:35:32,319
scenes and is giving a pass/fail I'm

842
00:35:32,319 --> 00:35:34,210
actually slowing it down I'm launching a

843
00:35:34,210 --> 00:35:35,470
terminal window in this case I'm using

844
00:35:35,470 --> 00:35:39,569
the Python dog tail library to drive

845
00:35:39,569 --> 00:35:42,220
everything do it kind of slowly so I

846
00:35:42,220 --> 00:35:44,140
actually can see the results and because

847
00:35:44,140 --> 00:35:45,759
it's also got testing hooks in there if

848
00:35:45,759 --> 00:35:47,529
anything fails I'll get that pass fail

849
00:35:47,529 --> 00:35:49,480
at the end but I also now could

850
00:35:49,480 --> 00:35:51,220
potentially post this on my website as

851
00:35:51,220 --> 00:35:54,039
okay you want to use our REST API well

852
00:35:54,039 --> 00:35:56,349
you know this is how you would do it and

853
00:35:56,349 --> 00:35:59,799
I'll use as my pass fail for you know

854
00:35:59,799 --> 00:36:01,720
whether this is useful like actually can

855
00:36:01,720 --> 00:36:03,039
show this to people and that this isn't

856
00:36:03,039 --> 00:36:04,720
that interesting I could kind of spice

857
00:36:04,720 --> 00:36:06,160
it up with some text to speech or some

858
00:36:06,160 --> 00:36:08,859
music or make it more iphone commercial

859
00:36:08,859 --> 00:36:11,170
ish but this is kind of where that I

860
00:36:11,170 --> 00:36:12,640
want the future to be is like when you

861
00:36:12,640 --> 00:36:14,500
do functional testing try to make it

862
00:36:14,500 --> 00:36:15,430
look like an iphone commercial

863
00:36:15,430 --> 00:36:16,930
everything else make it really boring

864
00:36:16,930 --> 00:36:18,910
fast unit tests but really try to aspire

865
00:36:18,910 --> 00:36:19,550
to do that

866
00:36:19,550 --> 00:36:22,520
so i think i'm at a time and that is my

867
00:36:22,520 --> 00:36:33,799
talk thanks

