1
00:00:00,520 --> 00:00:01,770
Dan Gebhardt - Give Apps Online Superpowers
by Optimizing them for Offline.

2
00:00:01,770 --> 00:00:03,260
Thanks a lot.

3
00:00:03,260 --> 00:00:05,370
Hi, everyone.

4
00:00:05,370 --> 00:00:06,370
I'm Dan.

5
00:00:06,370 --> 00:00:09,290
I'm here && today to help out this little
guy.

6
00:00:09,290 --> 00:00:12,200
He is the Downasaur.

7
00:00:12,200 --> 00:00:17,620
If you've looked at him on a retina display
and really closely, you may have noticed that

8
00:00:17,620 --> 00:00:20,820
he's a bit sad lately.

9
00:00:20,820 --> 00:00:27,740
After all these years, he's still being scuttled
on cactus thorns every time a network goes

10
00:00:27,740 --> 00:00:29,130
down.

11
00:00:29,130 --> 00:00:32,550
But it's not just for his sake that I'll be
talking today.

12
00:00:32,550 --> 00:00:37,670
A network outage can be game over for your
apps as well.

13
00:00:37,670 --> 00:00:43,830
So let's show some love to the Downasaur by
making our apps work offline and everybody

14
00:00:43,830 --> 00:00:47,990
will be better off in the end.

15
00:00:47,990 --> 00:00:53,230
So, a little bit about me.

16
00:00:53,230 --> 00:01:04,080
As Vanessa already said some of the projects
I'm involved in - Amber, Glimmer, Orbit..js,

17
00:01:04,080 --> 00:01:10,399
the co-founder of Cerebris.

18
00:01:10,399 --> 00:01:15,170
Let's get started with a gentle guide to offline
web apps.

19
00:01:15,170 --> 00:01:21,549
Nowadays, most discussions of offline web
apps start and end with PWS, or progressive

20
00:01:21,549 --> 00:01:22,880
web apps.

21
00:01:22,880 --> 00:01:29,500
The PWA initiative was pioneered by Google
a few years back with the goal of making web

22
00:01:29,500 --> 00:01:32,639
apps fast and engaging.

23
00:01:32,639 --> 00:01:38,869
They strive to have a user experience comparable
with native apps.

24
00:01:38,869 --> 00:01:45,920
Along with shareable URLs which we love.

25
00:01:45,920 --> 00:01:54,179
Now is a great time to start considering PWAs,
because service workers are on the cusp of

26
00:01:54,179 --> 00:02:02,009
being supported in all evergreen browsers,
desktop and mobile.

27
00:02:02,009 --> 00:02:06,100
Since reliable faster and engaging are pretty
nebulous terms.

28
00:02:06,100 --> 00:02:12,690
Google has developed a checklist to make these
goals more concrete, including that the site

29
00:02:12,690 --> 00:02:24,080
is served over HTTPS, pages are responsive,
look good on desktop or mobile, any size,

30
00:02:24,080 --> 00:02:31,720
that app URLs load while offline - highly
relevant to this talk - that you can add your

31
00:02:31,720 --> 00:02:36,470
app to the home screen, just like a native
app.

32
00:02:36,470 --> 00:02:42,780
And that the first experience with that app
must be fast.

33
00:02:42,780 --> 00:02:44,200
And there are other requirements.

34
00:02:44,200 --> 00:02:49,030
I'm not going to go over and over single one.

35
00:02:49,030 --> 00:02:56,150
And that is primarily because as the Lighthouse
Chrome extension does a really good not only

36
00:02:56,150 --> 00:03:01,010
of listing those requirements but also measuring
them and providing detailed reports about

37
00:03:01,010 --> 00:03:09,760
your app's compliance to that checklist, including
its performance, accessibility, and more.

38
00:03:09,760 --> 00:03:15,040
There are plenty of tutorials, blog posts,
and videos out there that can guide you along

39
00:03:15,040 --> 00:03:19,890
the way to building and improving your PWAs.

40
00:03:19,890 --> 00:03:31,010
Like this guide from Google that uses vanilla.js,
or other guides that are framework-specific,

41
00:03:31,010 --> 00:03:37,210
like this post from Matthew Beale from the
Amber core team that can help you build 100

42
00:03:37,210 --> 00:03:43,100
per cent compliant PWA with Amber in about
30 minutes.

43
00:03:43,100 --> 00:03:46,140
And there are plenty of other guides for Angular,
React, View, and more.

44
00:03:46,140 --> 00:03:55,120
I would encourage you to work within the conventions
of your framework and CLI tooling to find

45
00:03:55,120 --> 00:04:00,750
a good match for you and your app.

46
00:04:00,750 --> 00:04:06,470
At the end of the process, all of this tooling
will help you develop the same basic elements

47
00:04:06,470 --> 00:04:12,300
of a PWA which I will review now.

48
00:04:12,300 --> 00:04:19,459
First of all, there's the app shell which
is the minimal viable HTML CSS JavaScript

49
00:04:19,459 --> 00:04:26,090
required to bootstrap your app.

50
00:04:26,090 --> 00:04:33,400
Service workers are a background script that
act as a proxy between your application and

51
00:04:33,400 --> 00:04:35,909
its environment.

52
00:04:35,909 --> 00:04:43,360
Basically proxying between the main thread
of your app and in the network layer.

53
00:04:43,360 --> 00:04:47,969
Service workers must be registered by your
app.

54
00:04:47,969 --> 00:04:57,229
Here's an example of a registration of a service
workers that exists at sw.js an here's the

55
00:04:57,229 --> 00:05:00,029
contents of that service worker.

56
00:05:00,029 --> 00:05:02,699
This is about as simple as you can get.

57
00:05:02,699 --> 00:05:13,009
It defines the app shell resources, the URLs
to those resources, and tells the service

58
00:05:13,009 --> 00:05:26,919
worker to cache those resources when the app
is installed, and then the service workers

59
00:05:26,919 --> 00:05:33,180
can serve those resources back by proxying
fetches to them.

60
00:05:33,180 --> 00:05:42,000
Here's an example of a service worker that
is listening for the fetch event, and you

61
00:05:42,000 --> 00:05:46,580
can customise the code that happens inside
this listener.

62
00:05:46,580 --> 00:05:56,800
This one is checking the caches to see for
whether they match - they have a match in

63
00:05:56,800 --> 00:06:07,719
the request, and, if so, the cache result
is returned; if not, the network fetch proceeds.

64
00:06:07,719 --> 00:06:15,460
You can also do fetch first and fall-back
to cache.

65
00:06:15,460 --> 00:06:23,129
Another component of PWAs is web app manifest
which describes your app to the browser.

66
00:06:23,129 --> 00:06:28,470
You should link to it from your HTML.

67
00:06:28,470 --> 00:06:38,330
The contents include the name, the short name,
the description, icons that will be used on

68
00:06:38,330 --> 00:06:46,650
your home screen; also, a background colour
that will be displayed before the app shell

69
00:06:46,650 --> 00:06:56,159
loads so that you can provide a continuous
experience from the time that app is opened

70
00:06:56,159 --> 00:07:02,990
to the time it is fully loaded.

71
00:07:02,990 --> 00:07:21,580
For the Downasaur's revolutionary to-do app,
we're able to cross off all of the items,

72
00:07:21,580 --> 00:07:29,729
get to 100 per cent compliance with PWA, and
the Downasaur's is happy, we've saved him

73
00:07:29,729 --> 00:07:33,710
from the cactuses.

74
00:07:33,710 --> 00:07:43,710
However, there's legitimately one more item
that we could add to that list: interactivity.

75
00:07:43,710 --> 00:07:49,199
In other words, accepting user input to change
application state, and then syncing those

76
00:07:49,199 --> 00:07:54,120
changes when you're app comes back online.

77
00:07:54,120 --> 00:08:00,090
For a to do app in which you can't actually
add to dos or mark them complete, it's pretty

78
00:08:00,090 --> 00:08:01,550
unsatisfying.

79
00:08:01,550 --> 00:08:08,380
You know it's better than nothing but not
that much better.

80
00:08:08,380 --> 00:08:14,729
So, web standards have helped us greatly so
far.

81
00:08:14,729 --> 00:08:18,809
Can they help us here?

82
00:08:18,809 --> 00:08:27,969
Perhaps soon, the Chrome team introduced a
new web API called background sync in 2015.

83
00:08:27,969 --> 00:08:33,600
And there are implementations under way in
Firefox, Edge, and Chrome, but they are all

84
00:08:33,600 --> 00:08:43,280
experimental and it may be a while before
this settles out as a stable API and becomes

85
00:08:43,280 --> 00:08:47,680
something that we can rely on in your production
apps.

86
00:08:47,680 --> 00:08:55,140
Lucky, we have time left, because we don't
want to end on a down note.

87
00:08:55,140 --> 00:09:03,370
So, if we're going to get to that next level
of interactivity, immutability, even while

88
00:09:03,370 --> 00:09:07,480
offline, we are clearly going to need some
heroics.

89
00:09:07,480 --> 00:09:17,780
We are going to take the PWA to the next level
and build one that's not only resilient to

90
00:09:17,780 --> 00:09:25,330
network outages but allows for full interactivity.

91
00:09:25,330 --> 00:09:34,190
So we need to step back a bit to figure this
out in terms of our application's architecture.

92
00:09:34,190 --> 00:09:40,430
Let's back way up, and look at the architecture
of most web apps.

93
00:09:40,430 --> 00:09:47,430
On the back end, engineers have virtually
unlimited processing power and access to everything

94
00:09:47,430 --> 00:09:49,720
in milliseconds.

95
00:09:49,720 --> 00:09:51,320
This is power.

96
00:09:51,320 --> 00:09:55,340
The Norse gods would probably love backend
engineering.

97
00:09:55,340 --> 00:10:01,580
I think Loki invented microservices, in fact!

98
00:10:01,580 --> 00:10:08,820
Meanwhile, on the front end, our options are
much more constrained and our job is made

99
00:10:08,820 --> 00:10:15,180
much more difficult because of those constraints.

100
00:10:15,180 --> 00:10:20,800
Modern front-end engineering, and I'm sure
everyone is aware, is more than adding a nice

101
00:10:20,800 --> 00:10:22,970
coat of paint for forms.

102
00:10:22,970 --> 00:10:29,780
We often need to manage application state,
beta records, which usually is done in a layer

103
00:10:29,780 --> 00:10:35,530
I called the back end of the frond-end.

104
00:10:35,530 --> 00:10:39,960
This layer can get pretty gnarly if we're
not careful.

105
00:10:39,960 --> 00:10:48,350
But this is where we need to solve our offline
interactivity.

106
00:10:48,350 --> 00:10:54,530
So what do we need to do to manage offline
state in this layer?

107
00:10:54,530 --> 00:10:59,640
You might come up with a back-of-the-napkin
list of requirements that look something like

108
00:10:59,640 --> 00:11:00,970
this.

109
00:11:00,970 --> 00:11:10,130
You need to track and cue changes that happen
offline; you need to generate and assign identities

110
00:11:10,130 --> 00:11:12,950
to records.

111
00:11:12,950 --> 00:11:22,190
Serialise and persist all change sets and
queues so that, if the browser is closed unexpectedly,

112
00:11:22,190 --> 00:11:30,550
and you don't use all your user's data, then,
when your app comes back online, you need

113
00:11:30,550 --> 00:11:38,050
to sync your changes back to your server,
and, of course, that doesn't always go smoothly,

114
00:11:38,050 --> 00:11:47,220
and sometimes, you will need to reconcile
any conflicts, or problems, and perhaps even

115
00:11:47,220 --> 00:11:52,400
revert to an earlier state.

116
00:11:52,400 --> 00:12:01,620
Now, if you're a developer and we probably
all are, or most of us are here, this probably

117
00:12:01,620 --> 00:12:09,500
sounds like a feature list for a tool we use
every day.

118
00:12:09,500 --> 00:12:21,410
And it was Git was one of my inspirations
when I wrote Orbit.js.

119
00:12:21,410 --> 00:12:26,100
Since it stabilised in the fall and guides
were launched, we are seeing people using

120
00:12:26,100 --> 00:12:28,910
it with every front-end framework.

121
00:12:28,910 --> 00:12:37,010
Many of the core packages are isomorphic and
work on Node as well.

122
00:12:37,010 --> 00:12:44,650
Orbit was originally written in JS but rewritten
in TypeScript, but of course the packages

123
00:12:44,650 --> 00:12:50,470
are shipped with all the standard JS builds.

124
00:12:50,470 --> 00:12:52,970
You can use it with either.

125
00:12:52,970 --> 00:13:03,640
So, orbit use cases go beyond offline.

126
00:13:03,640 --> 00:13:07,600
Orbit attempts to solve a number of problems.

127
00:13:07,600 --> 00:13:15,110
Client-first development, where you're prototyping
a feature without prototyping the back end

128
00:13:15,110 --> 00:13:17,790
to fulfil it.

129
00:13:17,790 --> 00:13:21,070
Pluggable sources.

130
00:13:21,070 --> 00:13:27,480
Orbit's very interface-based, so sources that
share interfaces can be substituted for each

131
00:13:27,480 --> 00:13:28,480
other.

132
00:13:28,480 --> 00:13:36,330
For instance, index DB could fall back to
local storage.

133
00:13:36,330 --> 00:13:42,500
Most modern web apps involve more than one
source of data, often more than two.

134
00:13:42,500 --> 00:13:51,810
If you're Wright an offline web app, at a
minimum, you have browser storage, and remote

135
00:13:51,810 --> 00:13:58,950
server, and you probably have an in-memory
store, and you might even have data streaming

136
00:13:58,950 --> 00:14:08,440
in from other sources like web sockets to
service an event.

137
00:14:08,440 --> 00:14:18,730
And speaking of the main store, it's really
nice to work with immutable data so be able

138
00:14:18,730 --> 00:14:26,470
to fork stores, make edits, and throw away
the edits or commit them back, merge them

139
00:14:26,470 --> 00:14:36,200
back to the main store, but have total control
over that process.

140
00:14:36,200 --> 00:14:46,650
And orbit deterministically tracks changes
to each source with the ability to undo or

141
00:14:46,650 --> 00:14:54,340
redo those changes.

142
00:14:54,340 --> 00:15:03,500
Because your apps work offline, they can work
optimistically, even when other online.

143
00:15:03,500 --> 00:15:11,280
They don't need to be hindered by a delay
in the request-response cycle.

144
00:15:11,280 --> 00:15:18,570
For some changes, you can optimistic about
their application, and then only handle failures

145
00:15:18,570 --> 00:15:19,920
as they come up.

146
00:15:19,920 --> 00:15:30,410
But, show a success immediately to the user.

147
00:15:30,410 --> 00:15:39,850
Stepping back philosophically, orbit considers
all these sources of data that need to communicate

148
00:15:39,850 --> 00:15:40,850
with each other.

149
00:15:40,850 --> 00:15:47,960
And they all have different data in different
forms.

150
00:15:47,960 --> 00:15:54,650
So we need to put common interfaces on them,
and we need to normalise data that flows between

151
00:15:54,650 --> 00:15:57,620
them.

152
00:15:57,620 --> 00:16:02,480
They also need to communicate with each other.

153
00:16:02,480 --> 00:16:04,310
That's done three event.

154
00:16:04,310 --> 00:16:12,060
They can be wired up in any order based on
their events.

155
00:16:12,060 --> 00:16:18,540
And the event allow for some flow control.

156
00:16:18,540 --> 00:16:29,730
The events are promisified and they delay
the resources of another request.

157
00:16:29,730 --> 00:16:41,750
Then, through that chain of requests, then
a single - a single request may not succeed

158
00:16:41,750 --> 00:16:49,500
until that whole chain is successful.

159
00:16:49,500 --> 00:16:56,690
And the Git inspiration really shows in the
change tracking in which immutable operations

160
00:16:56,690 --> 00:17:04,230
are stored and tracked according to an ID,
just like commits in a branch's history.

161
00:17:04,230 --> 00:17:09,770
Every source is essentially has a branch with
a history, and that history of course can

162
00:17:09,770 --> 00:17:17,670
grow, and that can be truncated when everything
lines up, but you can always tell the state,

163
00:17:17,670 --> 00:17:24,589
the differences between different branches
or different sources, and essentially cherry-pick

164
00:17:24,589 --> 00:17:33,780
between the branches or the sources, and keep
things in sync, and you know, create new forks

165
00:17:33,780 --> 00:17:40,100
or discard them.

166
00:17:40,100 --> 00:17:47,780
Data features strongly in this, especially
inside the memory store which uses immutable

167
00:17:47,780 --> 00:17:59,559
data structures to cache the data and allows
for - which allows for cheap and fast forking.

168
00:17:59,559 --> 00:18:01,290
Orbit has a lot of parts.

169
00:18:01,290 --> 00:18:10,050
There's a core library, Orbit core, which
I'm not going to go into too much today, but,

170
00:18:10,050 --> 00:18:17,290
essentially, it has a lot of primitives that
allow for the log, the history tracking, and

171
00:18:17,290 --> 00:18:25,559
the essentially the async event co-ordination
so you could use it to think of it as an async

172
00:18:25,559 --> 00:18:31,220
Redux almost.

173
00:18:31,220 --> 00:18:34,850
But at the data layer, it gets more concrete.

174
00:18:34,850 --> 00:18:40,140
This is where some opinions are layered on
top of orbit actually making it useful in

175
00:18:40,140 --> 00:18:41,390
applications.

176
00:18:41,390 --> 00:18:52,010
So there is a notion of a schema shared amongst
sources, and that schema shares models, relationships,

177
00:18:52,010 --> 00:18:54,590
and keys.

178
00:18:54,590 --> 00:19:01,660
Every single source in orbit data has a schema,
a log of transforms that have been applied

179
00:19:01,660 --> 00:19:14,370
to it, and a couple of cues that can cue up
async requests and sync events.

180
00:19:14,370 --> 00:19:16,580
Then there are optional interfaces.

181
00:19:16,580 --> 00:19:24,900
These are dependent upon the capabilities
of a particular source, so, only some source

182
00:19:24,900 --> 00:19:32,420
- you can only becomingly query some sources.

183
00:19:32,420 --> 00:19:38,600
Almost all sources can sync with each other.

184
00:19:38,600 --> 00:19:46,030
The interfaces that you would interact with
most are the update - updatable interface

185
00:19:46,030 --> 00:19:47,990
and the queryable interface.

186
00:19:47,990 --> 00:19:57,270
The updatable interface basically supports
a single-method update which takes a transform,

187
00:19:57,270 --> 00:20:02,820
and that transform has an ID, and it can be
assigned a label, so you can actually, you

188
00:20:02,820 --> 00:20:05,720
know, put - display that label if it is cued
up.

189
00:20:05,720 --> 00:20:07,840
You can display it in your UI.

190
00:20:07,840 --> 00:20:20,830
You could say what went wrong, so you can
attach some metadata to this transform.

191
00:20:20,830 --> 00:20:26,340
Transform consists of an array of operations.

192
00:20:26,340 --> 00:20:37,260
Those operations might be in this case, they're
adding a planet - the planet Jupiter, or the

193
00:20:37,260 --> 00:20:45,790
moon Io, and then Io to Jupiter in the moon's
relationship.

194
00:20:45,790 --> 00:20:53,120
And that set of operations can be compounded
into a single transplant.

195
00:20:53,120 --> 00:20:59,650
That's not very friendly to write, so there
is a builder interface to make that easier

196
00:20:59,650 --> 00:21:02,640
to construct.

197
00:21:02,640 --> 00:21:13,920
Queryable sources allow for query sources
to be passed to a query method, and, again,

198
00:21:13,920 --> 00:21:17,880
these can be labelled.

199
00:21:17,880 --> 00:21:24,880
This is the raw form of a query expression,
and this is the builder form.

200
00:21:24,880 --> 00:21:32,880
We were requesting all the planets and sort
them by name.

201
00:21:32,880 --> 00:21:39,420
Something to focus on here is that all the
sources that say implement the queryable interface

202
00:21:39,420 --> 00:21:46,840
in your application are able to understand
the same query expressions.

203
00:21:46,840 --> 00:21:55,300
And so you can make a query against the memory
store in the same way you can make a query

204
00:21:55,300 --> 00:22:01,160
against your back-end remote store, or your
in-memory store.

205
00:22:01,160 --> 00:22:06,860
So they speak a common language, and they
have a common understanding about the normalised

206
00:22:06,860 --> 00:22:10,820
data that they are working with.

207
00:22:10,820 --> 00:22:15,179
To get them all to talk to each other, that's
where the co-ordinator comes in.

208
00:22:15,179 --> 00:22:22,870
The co-ordinator works with sources and applies
strategies to those sources.

209
00:22:22,870 --> 00:22:30,540
For instance, this is adding a strategy to
sync everything that happens, that happens

210
00:22:30,540 --> 00:22:42,550
to the store to the back-up source which might
be an index DB source.

211
00:22:42,550 --> 00:22:49,500
This is an example of optimistic updating
where a request strategy is added to that

212
00:22:49,500 --> 00:22:59,350
before the store is updated, we're going to
push that same, that update to the remote

213
00:22:59,350 --> 00:23:02,100
source.

214
00:23:02,100 --> 00:23:09,160
If we had added a blocking true to that, it
would turn into a pessimistic update, because,

215
00:23:09,160 --> 00:23:17,370
essentially, this is now saying that the store
won't be updated until the remote's push event

216
00:23:17,370 --> 00:23:21,370
has completed successfully.

217
00:23:21,370 --> 00:23:28,470
So, depending upon whether you want to be
optimistic or pessimistic, you can customise

218
00:23:28,470 --> 00:23:35,780
your strategies, and you can write your own
completely custom strategies that have their

219
00:23:35,780 --> 00:23:43,680
own JavaScript logic here, but there are just
some that are provided for convenience.

220
00:23:43,680 --> 00:23:50,780
Of course, things do go wrong, especially
it would be irresponsible not to have some

221
00:23:50,780 --> 00:23:59,790
failure handling in offline scenarios, or
optimistic updating, and so, you might need

222
00:23:59,790 --> 00:24:10,750
to write a strategy that responds to a failure
event, and takes an action, like this here

223
00:24:10,750 --> 00:24:20,710
is responding to a network error on the remote
source, and it will retry the queue of actions

224
00:24:20,710 --> 00:24:28,610
every five seconds.

225
00:24:28,610 --> 00:24:36,240
In this scenario, we are communicating back
to the user a failure based upon the label

226
00:24:36,240 --> 00:24:45,290
that's put on in update, and then we are rolling
back the transform to - we're rolling back

227
00:24:45,290 --> 00:24:52,040
the store state just before that transform
was applied.

228
00:24:52,040 --> 00:24:57,200
Then we are skipping events on the remote
source, so it's basically a reset.

229
00:24:57,200 --> 00:24:58,590
We're throwing up our hands.

230
00:24:58,590 --> 00:25:04,010
It could be - we could be a lot more sophisticated
about this and do some reconciliation.

231
00:25:04,010 --> 00:25:13,180
We're obviously not going to do the same thing
as a Git interactive rebase with our users

232
00:25:13,180 --> 00:25:21,600
involved in choosing which changes to accept,
but we can put a really nice interface on

233
00:25:21,600 --> 00:25:29,130
a similar process, or we can just have some
hard-coded priorities for which changes succeed

234
00:25:29,130 --> 00:25:32,090
in which cases.

235
00:25:32,090 --> 00:25:40,960
Something like this might be a fallback when
you've gone through all your custom handling.

236
00:25:40,960 --> 00:25:54,540
Finally, this is an example of pulling all
of the records out of browser storage source,

237
00:25:54,540 --> 00:26:01,500
the back named back-up there, and then sinking
those with the store before the co-ordinator

238
00:26:01,500 --> 00:26:04,620
is activated.

239
00:26:04,620 --> 00:26:11,190
It activates all of the strategies so that
orbits co-ordinator starts to watch everything

240
00:26:11,190 --> 00:26:14,590
and keep it all in sync.

241
00:26:14,590 --> 00:26:22,290
So getting back to PWAs, and applying Orbit
to keep them interactive.

242
00:26:22,290 --> 00:26:23,290
What does that look like?

243
00:26:23,290 --> 00:26:29,070
What is our strategy here?

244
00:26:29,070 --> 00:26:32,490
The Orbit PWA still needs a service worker.

245
00:26:32,490 --> 00:26:37,690
It needs to handle caching and fetching of
the app shell resources, but it does not typically

246
00:26:37,690 --> 00:26:45,880
intercept API fetches because those can be
cued of a main thread or a worker thread.

247
00:26:45,880 --> 00:26:51,520
They don't need to be proxied in the service
worker.

248
00:26:51,520 --> 00:26:59,670
They might have sources like a store, a back-up
source, which probably would be index DB,

249
00:26:59,670 --> 00:27:07,470
and a remote, or a remote source, maybe a
JSON API source, or you might want to add

250
00:27:07,470 --> 00:27:17,710
a real time source like sockets, or service
an event.

251
00:27:17,710 --> 00:27:24,850
And then the process for booth an orbit PWA,
the app shell fetched from the service worker

252
00:27:24,850 --> 00:27:35,720
went offline, the stores populated with data
from back-up, like the example I showed earlier,

253
00:27:35,720 --> 00:27:41,520
and then the co-ordinators activated, and
all the strategies are activated along with

254
00:27:41,520 --> 00:27:46,400
it, so orbit can keep monitoring things.

255
00:27:46,400 --> 00:27:52,240
Strategy might be something like this.

256
00:27:52,240 --> 00:27:58,380
Everything that - every change to the store
is synced to back-up; every change that happens,

257
00:27:58,380 --> 00:28:05,000
that is observed on the remote source, syncs
to the store; every time the store is queried,

258
00:28:05,000 --> 00:28:13,470
a request is made to the remote source, and
the same with updates.

259
00:28:13,470 --> 00:28:22,169
So all of this allows us to finally check
off that last item on our to-do list.

260
00:28:22,169 --> 00:28:33,160
And it also allows us to add a whole bunch
of more items, a whole bunch of more capabilities

261
00:28:33,160 --> 00:28:44,460
for our app, whether it is offline, or online.

262
00:28:44,460 --> 00:28:49,370
And I think the Downasaur is happy.

263
00:28:49,370 --> 00:28:55,990
If you're interested in orbit, the guides
are on the orbit.js.com.

264
00:28:55,990 --> 00:29:00,110
I'm working to fully flesh out the site.

265
00:29:00,110 --> 00:29:07,090
I hope it will get you started, and please
feel free to follow orbit on Twitter if you're

266
00:29:07,090 --> 00:29:11,250
interested.

267
00:29:11,250 --> 00:29:12,250
Thanks very much.

