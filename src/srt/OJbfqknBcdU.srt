1
00:00:05,550 --> 00:00:09,630

welcome to OMG streams I am Pam you can

2
00:00:09,630 --> 00:00:11,760
find me on the internet at pama sore and

3
00:00:11,760 --> 00:00:14,160
my also somewhat dinosaur-themed website

4
00:00:14,160 --> 00:00:17,490
the web before com and so the thesis

5
00:00:17,490 --> 00:00:18,720
today they're going to talk about is

6
00:00:18,720 --> 00:00:21,119
that streams are the most awesome data

7
00:00:21,119 --> 00:00:22,619
structure that you don't know enough

8
00:00:22,619 --> 00:00:25,169
about so the goal today is that you are

9
00:00:25,169 --> 00:00:26,790
going to leave here as excited about

10
00:00:26,790 --> 00:00:30,660
streams data structure as I am so step

11
00:00:30,660 --> 00:00:37,170
one streams streams streams so I'm going

12
00:00:37,170 --> 00:00:39,930
to start with some history so I wanted

13
00:00:39,930 --> 00:00:41,699
to find out when I became interested in

14
00:00:41,699 --> 00:00:43,019
the streams data structure where the

15
00:00:43,019 --> 00:00:46,019
first instance of what the stream data

16
00:00:46,019 --> 00:00:47,879
structure looks like was and as far as I

17
00:00:47,879 --> 00:00:52,519
could tell it seems to be unix and so ah

18
00:00:52,519 --> 00:01:00,629
ah wrong window hold please excellent so

19
00:01:00,629 --> 00:01:03,030
all glory to the pipe operator so if you

20
00:01:03,030 --> 00:01:06,480
do something like this in UNIX so if

21
00:01:06,480 --> 00:01:08,970
you've opened your terminal then cat

22
00:01:08,970 --> 00:01:14,100
lets you send that the value from best

23
00:01:14,100 --> 00:01:18,360
animals text into the grep I command so

24
00:01:18,360 --> 00:01:20,850
the output from the first man is piped

25
00:01:20,850 --> 00:01:22,080
to the second command is how you would

26
00:01:22,080 --> 00:01:24,660
say that and so that looks like just you

27
00:01:24,660 --> 00:01:28,070
know because we can soak at best animals

28
00:01:28,070 --> 00:01:30,510
so that's that come in by itself and

29
00:01:30,510 --> 00:01:32,430
then if we had the pipe operator called

30
00:01:32,430 --> 00:01:34,350
a pipe because it looks like a stick but

31
00:01:34,350 --> 00:01:35,700
also you can think of it because data is

32
00:01:35,700 --> 00:01:38,850
flowing through it and so we grew up so

33
00:01:38,850 --> 00:01:41,250
globally search case-insensitive for

34
00:01:41,250 --> 00:01:43,440
cats because cats around the internet

35
00:01:43,440 --> 00:01:47,160
and so we can you know so if you've

36
00:01:47,160 --> 00:01:48,210
opened the terminal you've been using

37
00:01:48,210 --> 00:01:50,490
streams and that's actually where the

38
00:01:50,490 --> 00:01:52,050
first instance that I can find started

39
00:01:52,050 --> 00:01:54,180
without even probably knowing that

40
00:01:54,180 --> 00:01:57,360
that's a stream stash structure what are

41
00:01:57,360 --> 00:02:00,150
streams so streams are an abstract data

42
00:02:00,150 --> 00:02:02,250
structure that means that when you see a

43
00:02:02,250 --> 00:02:04,560
stream like in UNIX it won't necessarily

44
00:02:04,560 --> 00:02:07,650
be called a stream so as abstract so you

45
00:02:07,650 --> 00:02:09,569
can have multiple flavors of them you

46
00:02:09,569 --> 00:02:10,860
might see them come in different forms

47
00:02:10,860 --> 00:02:14,520
but ultimately they're still streams so

48
00:02:14,520 --> 00:02:16,650
a real world demo I'm going to have my

49
00:02:16,650 --> 00:02:18,840
buddy Joe come up here

50
00:02:18,840 --> 00:02:22,260
we have a real-life experiment to

51
00:02:22,260 --> 00:02:24,840
demonstrate how streams work but we're

52
00:02:24,840 --> 00:02:27,390
going to take water and it needs to go

53
00:02:27,390 --> 00:02:32,489
from this first cup through the through

54
00:02:32,489 --> 00:02:34,730
the second cup and into the third cup

55
00:02:34,730 --> 00:02:37,950
because reasons so this is the task that

56
00:02:37,950 --> 00:02:40,739
we on you know on the assembly line have

57
00:02:40,739 --> 00:02:50,160
to do here's one way to do it all right

58
00:02:50,160 --> 00:02:52,709
now with some highly specialized

59
00:02:52,709 --> 00:02:58,950
modifications to the second cup we can

60
00:02:58,950 --> 00:03:00,209
make it more like a stream data

61
00:03:00,209 --> 00:03:01,769
structure so let's pretend let's swap

62
00:03:01,769 --> 00:03:04,379
these so this is now cup one cool all

63
00:03:04,379 --> 00:03:06,120
right so now we're going to do this

64
00:03:06,120 --> 00:03:09,450
operation with streams are you ready all

65
00:03:09,450 --> 00:03:17,730
right all right thank you Joe that you

66
00:03:17,730 --> 00:03:23,190
can keep that you're welcome so the

67
00:03:23,190 --> 00:03:25,500
streams data structure is basically it

68
00:03:25,500 --> 00:03:29,250
lets us flow through rather than having

69
00:03:29,250 --> 00:03:31,139
to make you know stops at every stage

70
00:03:31,139 --> 00:03:34,010
and that ends up being really powerful

71
00:03:34,010 --> 00:03:36,660
so I'm going to bring up sicp because

72
00:03:36,660 --> 00:03:38,760
this is kind of a canonical texts ossep

73
00:03:38,760 --> 00:03:40,260
is structure interpretation computer

74
00:03:40,260 --> 00:03:42,120
programs if you have a computer science

75
00:03:42,120 --> 00:03:43,290
degree you might have read it if you

76
00:03:43,290 --> 00:03:44,489
have a computer science degree and you

77
00:03:44,489 --> 00:03:45,599
have not read it you probably feel

78
00:03:45,599 --> 00:03:47,940
guilty about it so it's the canonical

79
00:03:47,940 --> 00:03:49,799
texting computer science and it what it

80
00:03:49,799 --> 00:03:52,260
defines as streams are their delay list

81
00:03:52,260 --> 00:03:54,450
well what does that exactly mean so a

82
00:03:54,450 --> 00:03:57,870
delay list means that you can treat them

83
00:03:57,870 --> 00:04:00,690
like a list structure but you don't have

84
00:04:00,690 --> 00:04:02,940
to have all the values at once that's

85
00:04:02,940 --> 00:04:06,090
really tricky and really really cool so

86
00:04:06,090 --> 00:04:07,859
why would we want streams why we want

87
00:04:07,859 --> 00:04:10,530
these this delayed list structure well

88
00:04:10,530 --> 00:04:12,359
you can't or don't want to hold

89
00:04:12,359 --> 00:04:14,819
everything in memory and you bandwidth

90
00:04:14,819 --> 00:04:17,789
is expensive so as we progress in

91
00:04:17,789 --> 00:04:19,650
computing you know the facts change

92
00:04:19,650 --> 00:04:21,720
constantly some facts that are still

93
00:04:21,720 --> 00:04:23,520
true is we don't want to waste memory

94
00:04:23,520 --> 00:04:25,950
and we also bandwidth continues to be

95
00:04:25,950 --> 00:04:27,990
expensive it's not you know it's not

96
00:04:27,990 --> 00:04:31,590
free so we want to use streams to limit

97
00:04:31,590 --> 00:04:32,870
the use of those resources

98
00:04:32,870 --> 00:04:35,820
so streams and why you should be extra

99
00:04:35,820 --> 00:04:38,760
excited about them so streams being a

100
00:04:38,760 --> 00:04:40,860
delayed list structure let you represent

101
00:04:40,860 --> 00:04:47,090
possibly infinite data infinite data

102
00:04:47,090 --> 00:04:51,000
making you a wizard because you can

103
00:04:51,000 --> 00:04:53,610
represent infinity in data which is

104
00:04:53,610 --> 00:04:55,650
really really fascinating really really

105
00:04:55,650 --> 00:04:57,870
cool so what are some things that don't

106
00:04:57,870 --> 00:04:59,700
even you said infinity that doesn't

107
00:04:59,700 --> 00:05:02,400
actually exist wrong some things that

108
00:05:02,400 --> 00:05:03,600
don't have an end just a few examples

109
00:05:03,600 --> 00:05:06,270
and natural numbers you can always get a

110
00:05:06,270 --> 00:05:08,010
new natural number by adding one to any

111
00:05:08,010 --> 00:05:09,930
natural number that you have whether

112
00:05:09,930 --> 00:05:12,930
natural phenomena for a lot of you I

113
00:05:12,930 --> 00:05:15,980
people keystrokes events in the browser

114
00:05:15,980 --> 00:05:18,660
you don't know when the end large data

115
00:05:18,660 --> 00:05:19,950
sets your heartbeat these have stars

116
00:05:19,950 --> 00:05:21,120
because I definitely have an end you

117
00:05:21,120 --> 00:05:24,540
just don't know what it is so you

118
00:05:24,540 --> 00:05:26,490
operate under the assumption that you

119
00:05:26,490 --> 00:05:28,350
don't have you don't have to care when

120
00:05:28,350 --> 00:05:29,700
the end is and that's what streams let

121
00:05:29,700 --> 00:05:31,650
you do they let you not have to care

122
00:05:31,650 --> 00:05:35,250
about when it ends so why I brought as I

123
00:05:35,250 --> 00:05:37,500
cp's partially so I could bring this up

124
00:05:37,500 --> 00:05:39,690
is that stream processing lets us model

125
00:05:39,690 --> 00:05:41,220
systems that have state without ever

126
00:05:41,220 --> 00:05:43,650
using assignment or mutable data that is

127
00:05:43,650 --> 00:05:45,650
really awesome so let's look at it again

128
00:05:45,650 --> 00:05:50,220
so awesome so stream processing let you

129
00:05:50,220 --> 00:05:52,620
model systems with state but you don't

130
00:05:52,620 --> 00:05:54,510
have to incur the cost of assignment or

131
00:05:54,510 --> 00:05:57,170
mutable data so you can move faster

132
00:05:57,170 --> 00:05:59,310
because you aren't storing things in

133
00:05:59,310 --> 00:06:00,540
memory and you aren't mutating data

134
00:06:00,540 --> 00:06:01,710
which is something that we're talking

135
00:06:01,710 --> 00:06:05,250
about a lot today these days so really

136
00:06:05,250 --> 00:06:06,510
really cool and you should be really

137
00:06:06,510 --> 00:06:08,250
excited by streams especially how

138
00:06:08,250 --> 00:06:10,590
they're able to represent how we move

139
00:06:10,590 --> 00:06:12,000
through the world that is we move

140
00:06:12,000 --> 00:06:13,740
through large data sets we move through

141
00:06:13,740 --> 00:06:15,420
real-time data we move through things

142
00:06:15,420 --> 00:06:17,040
where we don't know when they end and

143
00:06:17,040 --> 00:06:18,930
streams are the data structure that let

144
00:06:18,930 --> 00:06:21,930
us do that so streams abstract a

145
00:06:21,930 --> 00:06:23,310
structure that means it can come in

146
00:06:23,310 --> 00:06:24,990
multiple flavors in general actually

147
00:06:24,990 --> 00:06:27,120
kind of splits into two standard flavors

148
00:06:27,120 --> 00:06:29,310
so there's push streams and pull streams

149
00:06:29,310 --> 00:06:33,570
so Bush dreams are like the fire hose so

150
00:06:33,570 --> 00:06:36,930
a push stream is it you can think of it

151
00:06:36,930 --> 00:06:39,540
like the fire hose like if you have your

152
00:06:39,540 --> 00:06:40,740
at the end of the fire hose and you just

153
00:06:40,740 --> 00:06:42,840
open it up and then it's just pushing

154
00:06:42,840 --> 00:06:46,040
water out and so

155
00:06:46,040 --> 00:06:48,080
you can deal with that in computing

156
00:06:48,080 --> 00:06:50,510
there will you know has as positives and

157
00:06:50,510 --> 00:06:53,030
has this negative so you think you're

158
00:06:53,030 --> 00:06:54,650
using a push stream when you see things

159
00:06:54,650 --> 00:06:57,050
like callbacks so there's someone

160
00:06:57,050 --> 00:06:58,010
standing at the end of the hallway

161
00:06:58,010 --> 00:06:59,450
getting the firehose sermon at them

162
00:06:59,450 --> 00:07:01,070
they're doing something about it when

163
00:07:01,070 --> 00:07:03,140
they get the water third of them I don't

164
00:07:03,140 --> 00:07:06,380
know non-blocking so once the stream is

165
00:07:06,380 --> 00:07:08,540
open it doesn't stop flowing it just

166
00:07:08,540 --> 00:07:10,420
goes so that's the push stream and the

167
00:07:10,420 --> 00:07:13,070
downside because there's cost any any

168
00:07:13,070 --> 00:07:15,980
structure is that possible overload so

169
00:07:15,980 --> 00:07:18,140
if you stood you know 10 feet in front

170
00:07:18,140 --> 00:07:20,540
of a fire hose that probably wouldn't go

171
00:07:20,540 --> 00:07:23,720
so well in the same way if you are a

172
00:07:23,720 --> 00:07:26,750
consumer so in stream processing we

173
00:07:26,750 --> 00:07:28,430
talked about producers and consumers or

174
00:07:28,430 --> 00:07:31,190
sources and subscribers but they all

175
00:07:31,190 --> 00:07:32,570
kind of mean similar things so if you

176
00:07:32,570 --> 00:07:35,120
have a producer and a consumer and the

177
00:07:35,120 --> 00:07:38,600
consumer can be overloaded by a push

178
00:07:38,600 --> 00:07:41,180
stream from the producer then that's a

179
00:07:41,180 --> 00:07:44,930
problem so you have to use push streams

180
00:07:44,930 --> 00:07:46,130
in an environment where you're

181
00:07:46,130 --> 00:07:49,100
protecting against that so the other

182
00:07:49,100 --> 00:07:52,100
flavor is pull streams so pull strings

183
00:07:52,100 --> 00:07:54,950
rather than having the data thrown at

184
00:07:54,950 --> 00:07:57,230
you just you know I can handle whatever

185
00:07:57,230 --> 00:07:59,300
data you throw at me pull streams are

186
00:07:59,300 --> 00:08:01,940
more like a leak like a data leak lake

187
00:08:01,940 --> 00:08:05,300
of calm data and when you want data you

188
00:08:05,300 --> 00:08:07,670
have to you know get your bucket that

189
00:08:07,670 --> 00:08:10,100
holds data and walk to the lake go get

190
00:08:10,100 --> 00:08:12,260
some data and walk back and while you

191
00:08:12,260 --> 00:08:14,060
are walking to the lake you cannot do

192
00:08:14,060 --> 00:08:16,910
anything else so in computing that means

193
00:08:16,910 --> 00:08:18,470
that we tend to see this in the form of

194
00:08:18,470 --> 00:08:21,170
iterators so walking to the lake and

195
00:08:21,170 --> 00:08:23,150
back that's an iterator it's also

196
00:08:23,150 --> 00:08:25,070
blocking when you're walking to the lake

197
00:08:25,070 --> 00:08:27,230
and back you can't do anything else so

198
00:08:27,230 --> 00:08:29,210
you also want to the costume curve that

199
00:08:29,210 --> 00:08:31,520
is the timeout so you also want to never

200
00:08:31,520 --> 00:08:34,280
ever block forever the one of my you

201
00:08:34,280 --> 00:08:37,910
know should be on a t-shirt that when

202
00:08:37,910 --> 00:08:40,010
you have pull streams you don't want to

203
00:08:40,010 --> 00:08:41,390
block you don't want to send someone

204
00:08:41,390 --> 00:08:43,550
from you know from the village to the

205
00:08:43,550 --> 00:08:46,310
try to the lake and then you know feel

206
00:08:46,310 --> 00:08:47,480
like okay well I guess I'll come back

207
00:08:47,480 --> 00:08:49,100
and then like ten days later you still

208
00:08:49,100 --> 00:08:51,320
haven't got any water I don't do that so

209
00:08:51,320 --> 00:08:55,160
similarly with pull streams all right so

210
00:08:55,160 --> 00:08:56,630
what do streams at the data structure

211
00:08:56,630 --> 00:08:58,910
look like in JavaScript so as your data

212
00:08:58,910 --> 00:08:59,810
structure lots

213
00:08:59,810 --> 00:09:01,940
different instances of streams like

214
00:09:01,940 --> 00:09:04,790
structures so node streams kamini named

215
00:09:04,790 --> 00:09:07,670
they are pushed streams so no streams

216
00:09:07,670 --> 00:09:09,890
this is the classic example from sub

217
00:09:09,890 --> 00:09:11,660
stack who has a ton of awesome stream

218
00:09:11,660 --> 00:09:14,600
examples so here is a very simple server

219
00:09:14,600 --> 00:09:17,810
that reads a file and then sent the two

220
00:09:17,810 --> 00:09:20,089
response here's the important bait so

221
00:09:20,089 --> 00:09:21,980
what it's actually doing is this take

222
00:09:21,980 --> 00:09:23,750
the final system reads the file into

223
00:09:23,750 --> 00:09:26,360
memory and then it sends the response

224
00:09:26,360 --> 00:09:29,930
out the data out to the response so

225
00:09:29,930 --> 00:09:32,300
that's one way to do it just like porn

226
00:09:32,300 --> 00:09:33,440
the water into the cup and into the

227
00:09:33,440 --> 00:09:34,910
other cup is a one way to do it so

228
00:09:34,910 --> 00:09:37,160
storing things memory there's another

229
00:09:37,160 --> 00:09:38,900
way to do it so great thing about node

230
00:09:38,900 --> 00:09:40,550
streams I really appreciate that it uses

231
00:09:40,550 --> 00:09:43,370
the word stream number one and two it

232
00:09:43,370 --> 00:09:45,020
also uses a word pipe just like we saw

233
00:09:45,020 --> 00:09:47,570
in UNIX our good old buddy UNIX and so

234
00:09:47,570 --> 00:09:49,910
the important bit is that the file

235
00:09:49,910 --> 00:09:51,650
system we create a readable stream and

236
00:09:51,650 --> 00:09:54,950
then we from the stream we pipe that to

237
00:09:54,950 --> 00:09:56,870
their spot so we take the output from

238
00:09:56,870 --> 00:09:58,400
the first thing that was happening and

239
00:09:58,400 --> 00:10:00,080
pipe it to the other thing that we want

240
00:10:00,080 --> 00:10:03,860
to happen so we're pride being rather

241
00:10:03,860 --> 00:10:06,170
than using memory no streams are awesome

242
00:10:06,170 --> 00:10:10,460
they're great generators generators are

243
00:10:10,460 --> 00:10:14,390
a newer feature there in es2015 they are

244
00:10:14,390 --> 00:10:17,990
reusable and possible functions or are

245
00:10:17,990 --> 00:10:22,520
they pull streams indeed I would say

246
00:10:22,520 --> 00:10:25,280
that because the way you operate on a

247
00:10:25,280 --> 00:10:27,320
generator is that you asked for more

248
00:10:27,320 --> 00:10:29,600
when you want more also known as pull

249
00:10:29,600 --> 00:10:32,660
streams so you know it's a generator

250
00:10:32,660 --> 00:10:34,910
when you see these kinds of indicators

251
00:10:34,910 --> 00:10:36,560
that this might be a dinner so function

252
00:10:36,560 --> 00:10:39,260
star and a yield if you see those in a

253
00:10:39,260 --> 00:10:41,380
business that's going to be a generator

254
00:10:41,380 --> 00:10:43,910
so here's a very simple generator it's a

255
00:10:43,910 --> 00:10:46,010
reusable and possible function so this

256
00:10:46,010 --> 00:10:49,160
does not do anything however if you

257
00:10:49,160 --> 00:10:52,130
create an instance of a something so s

258
00:10:52,130 --> 00:10:54,830
equals of something next next being that

259
00:10:54,830 --> 00:10:57,050
keyword that call us to the next yield

260
00:10:57,050 --> 00:10:58,550
through the instance of the generator

261
00:10:58,550 --> 00:11:01,670
then it's actually doing something so I

262
00:11:01,670 --> 00:11:06,279
have some some simple demos to show what

263
00:11:06,279 --> 00:11:08,959
generators look like so some fun with

264
00:11:08,959 --> 00:11:11,230
generators

265
00:11:11,230 --> 00:11:15,310
alright we want to open up the console

266
00:11:15,310 --> 00:11:19,400
all right look at actually I'm going to

267
00:11:19,400 --> 00:11:22,490
tack it to the right all right so we're

268
00:11:22,490 --> 00:11:24,680
going to generate so generator done

269
00:11:24,680 --> 00:11:28,600
false and we've have something over here

270
00:11:28,600 --> 00:11:33,590
mmm all right something else something

271
00:11:33,590 --> 00:11:37,910
else entirely okay so say and then now

272
00:11:37,910 --> 00:11:39,860
our generators done and if we continue

273
00:11:39,860 --> 00:11:42,680
to click it's always done so our

274
00:11:42,680 --> 00:11:44,240
instance of the generator is always

275
00:11:44,240 --> 00:11:46,640
finished so if we look at what that

276
00:11:46,640 --> 00:11:49,880
looks like in the simple generator so

277
00:11:49,880 --> 00:11:51,260
our simple dinner we see that function

278
00:11:51,260 --> 00:11:53,900
star and that yield those symptoms that

279
00:11:53,900 --> 00:11:55,730
we have a generator going on and so in

280
00:11:55,730 --> 00:11:57,620
the first time we call it we run it when

281
00:11:57,620 --> 00:11:59,210
we call next we run up to the first this

282
00:11:59,210 --> 00:12:00,860
the next time we run up to that next

283
00:12:00,860 --> 00:12:03,530
this and there's no more yields but the

284
00:12:03,530 --> 00:12:05,810
next time we call it there's still code

285
00:12:05,810 --> 00:12:07,880
to be executed so it executes the code

286
00:12:07,880 --> 00:12:09,470
in the remainder of the generator it's a

287
00:12:09,470 --> 00:12:11,210
great place to put finally and things

288
00:12:11,210 --> 00:12:13,610
like that so now that you've seen the

289
00:12:13,610 --> 00:12:15,110
code let's just look at it again just to

290
00:12:15,110 --> 00:12:18,350
you know see it how it works and then

291
00:12:18,350 --> 00:12:23,240
see it do the thing alright so let's

292
00:12:23,240 --> 00:12:25,460
swap that out for a mildly less trivial

293
00:12:25,460 --> 00:12:29,210
one so let's get rid it simple let's

294
00:12:29,210 --> 00:12:31,700
change it to string breaker I'll see

295
00:12:31,700 --> 00:12:37,460
what string rigger does alright so John

296
00:12:37,460 --> 00:12:39,110
went to the store and said hey there to

297
00:12:39,110 --> 00:12:40,820
the clerk so what does stream breaker do

298
00:12:40,820 --> 00:12:43,670
string breaker so aptly named because it

299
00:12:43,670 --> 00:12:46,400
is a reusable and possible function that

300
00:12:46,400 --> 00:12:49,540
breaks a string into parts into words

301
00:12:49,540 --> 00:12:52,160
anything separate by spaces except for

302
00:12:52,160 --> 00:12:53,690
the case where things are enclosed in

303
00:12:53,690 --> 00:12:55,820
quotes so you accumulate until you hit a

304
00:12:55,820 --> 00:12:57,560
space unless you're in quotes and then

305
00:12:57,560 --> 00:12:59,210
you wait for another space and so that's

306
00:12:59,210 --> 00:13:00,740
what this generator is doing you can

307
00:13:00,740 --> 00:13:02,990
feed a different strings to have it do

308
00:13:02,990 --> 00:13:05,660
that behavior so what we're clicking the

309
00:13:05,660 --> 00:13:08,540
button it's sending that value of next

310
00:13:08,540 --> 00:13:12,050
into our paragraph so now that we see it

311
00:13:12,050 --> 00:13:13,130
we're actually going to change the

312
00:13:13,130 --> 00:13:16,710
behavior a little bit

313
00:13:16,720 --> 00:13:21,069
and just uncomment something so what

314
00:13:21,069 --> 00:13:23,759
we're doing here is we're changing from

315
00:13:23,759 --> 00:13:27,490
going through the an instance of our

316
00:13:27,490 --> 00:13:29,500
string breaker to using an iterator

317
00:13:29,500 --> 00:13:31,779
which makes sense because remember full

318
00:13:31,779 --> 00:13:34,449
streams often we use dead Raiders so we

319
00:13:34,449 --> 00:13:36,790
use another es6 feature yes 2013 feature

320
00:13:36,790 --> 00:13:40,149
four of which lets us walk through the

321
00:13:40,149 --> 00:13:41,829
values of generator so we can actually

322
00:13:41,829 --> 00:13:44,259
create the value create our instance our

323
00:13:44,259 --> 00:13:47,860
January right there and assuming li-ion

324
00:13:47,860 --> 00:13:51,459
come to correctly yep so John went to

325
00:13:51,459 --> 00:13:52,389
the store and said hey there to the

326
00:13:52,389 --> 00:13:54,670
clerk so that lets us walk through the

327
00:13:54,670 --> 00:13:58,509
generator as a with an iterator so

328
00:13:58,509 --> 00:14:02,529
pretty neat and so those s simple fun

329
00:14:02,529 --> 00:14:04,990
with generators and there's definitely

330
00:14:04,990 --> 00:14:06,189
more interesting things you can do with

331
00:14:06,189 --> 00:14:07,449
them but hopefully gives you a sense of

332
00:14:07,449 --> 00:14:11,500
some of the simple abilities so can you

333
00:14:11,500 --> 00:14:13,569
use kind of you probably want a

334
00:14:13,569 --> 00:14:16,120
transpiler like babel to polyfill that

335
00:14:16,120 --> 00:14:18,730
the example in there is running native

336
00:14:18,730 --> 00:14:22,120
at the browser so up to you but pretty

337
00:14:22,120 --> 00:14:25,540
interesting alright so that's some some

338
00:14:25,540 --> 00:14:27,189
things that exist now but what about

339
00:14:27,189 --> 00:14:28,660
what's coming next the JavaScript

340
00:14:28,660 --> 00:14:29,829
conference and we always talk about the

341
00:14:29,829 --> 00:14:32,410
things that we don't have yet so I'm

342
00:14:32,410 --> 00:14:33,399
going to talk about libraries and

343
00:14:33,399 --> 00:14:35,079
emerging standards so some libraries

344
00:14:35,079 --> 00:14:36,550
that you can use to work with streams

345
00:14:36,550 --> 00:14:37,899
though not necessarily native

346
00:14:37,899 --> 00:14:40,240
capabilities but let you model stream

347
00:14:40,240 --> 00:14:45,189
model data in stream like structures so

348
00:14:45,189 --> 00:14:47,559
you have bacon Highland at our xjs so

349
00:14:47,559 --> 00:14:49,629
reactive extensions for JavaScript so

350
00:14:49,629 --> 00:14:51,819
bacon is a library I've removed all the

351
00:14:51,819 --> 00:14:53,079
scary parts and if you didn't get that

352
00:14:53,079 --> 00:14:54,759
joke it's because it says functional

353
00:14:54,759 --> 00:14:57,430
reactive programming but it's it's the

354
00:14:57,430 --> 00:14:58,990
underscore of an event so if you

355
00:14:58,990 --> 00:15:00,610
familiar with operations from underscore

356
00:15:00,610 --> 00:15:03,160
then it gives you those operations on

357
00:15:03,160 --> 00:15:06,040
events so it gives you Plus back up it

358
00:15:06,040 --> 00:15:10,660
gives you list operations on events also

359
00:15:10,660 --> 00:15:14,199
which are streams so events or streams

360
00:15:14,199 --> 00:15:16,709
gives you list operations on those

361
00:15:16,709 --> 00:15:19,000
Highland is another library that you

362
00:15:19,000 --> 00:15:20,559
could use for this similar kind of task

363
00:15:20,559 --> 00:15:23,050
it has a stream constructor emphasis

364
00:15:23,050 --> 00:15:25,029
added because i like i like when the

365
00:15:25,029 --> 00:15:26,500
words map to our mental models that's

366
00:15:26,500 --> 00:15:29,980
nice so you can put in

367
00:15:29,980 --> 00:15:31,360
many different kinds of values to get a

368
00:15:31,360 --> 00:15:34,390
common interface so you can you don't

369
00:15:34,390 --> 00:15:36,010
have to just use one thing you can use

370
00:15:36,010 --> 00:15:39,160
arrays generators readdle streams and

371
00:15:39,160 --> 00:15:41,380
they'll all if you use the Highline

372
00:15:41,380 --> 00:15:43,150
constructor it'll give you access to all

373
00:15:43,150 --> 00:15:45,250
those lists like operations so map

374
00:15:45,250 --> 00:15:48,130
filter all those kinds of a good

375
00:15:48,130 --> 00:15:51,610
goodness so our xjs I would I call our

376
00:15:51,610 --> 00:15:54,250
exeis fan the reactive programming

377
00:15:54,250 --> 00:15:56,290
library for JavaScript it is called

378
00:15:56,290 --> 00:15:58,450
reactive extensions for javascript there

379
00:15:58,450 --> 00:16:00,910
is a new flavor coming out soon so this

380
00:16:00,910 --> 00:16:02,200
isn't interesting to pay attention to

381
00:16:02,200 --> 00:16:04,690
because we have a current flavor and

382
00:16:04,690 --> 00:16:07,570
then the next flavor which is there

383
00:16:07,570 --> 00:16:11,110
under different repositories and it's

384
00:16:11,110 --> 00:16:12,610
actually tracking against an upcoming

385
00:16:12,610 --> 00:16:14,380
standard that I'll mention the

386
00:16:14,380 --> 00:16:17,260
observable standard and this is also

387
00:16:17,260 --> 00:16:20,020
being used in angular 2 so when angular

388
00:16:20,020 --> 00:16:22,990
2 comes out you'll have access to these

389
00:16:22,990 --> 00:16:25,450
kinds of reactive tooling so that you

390
00:16:25,450 --> 00:16:29,710
can get streams of data and do list like

391
00:16:29,710 --> 00:16:31,690
operations on them which is really

392
00:16:31,690 --> 00:16:33,610
awesome that's essentially what reactive

393
00:16:33,610 --> 00:16:36,340
programming is so some recommended so

394
00:16:36,340 --> 00:16:39,220
use of reactive programming words here I

395
00:16:39,220 --> 00:16:41,650
know they're somewhat scary but it also

396
00:16:41,650 --> 00:16:44,380
has a really awesome long read and also

397
00:16:44,380 --> 00:16:46,870
this now in videos on ahead for intro to

398
00:16:46,870 --> 00:16:50,050
RX really great resource so some

399
00:16:50,050 --> 00:16:51,820
emerging standard so there is a browser

400
00:16:51,820 --> 00:16:54,610
stream standard so there's a it's not

401
00:16:54,610 --> 00:16:56,440
implemented or but there's a standard

402
00:16:56,440 --> 00:17:00,160
that is being written out that brings

403
00:17:00,160 --> 00:17:02,680
things like node streams natively into

404
00:17:02,680 --> 00:17:04,930
the browser the as far as I could tell

405
00:17:04,930 --> 00:17:07,600
the node streams people are involved but

406
00:17:07,600 --> 00:17:09,970
they don't want to bring the exact same

407
00:17:09,970 --> 00:17:11,140
thing they want to do what makes the

408
00:17:11,140 --> 00:17:13,660
most sense for the browser interesting

409
00:17:13,660 --> 00:17:15,520
but we don't have anything to show for

410
00:17:15,520 --> 00:17:17,890
it yet that's okay because the

411
00:17:17,890 --> 00:17:19,570
interesting thing about this the fact

412
00:17:19,570 --> 00:17:21,250
the browser stream standard is being

413
00:17:21,250 --> 00:17:23,740
worked on is the fetch API so how many

414
00:17:23,740 --> 00:17:25,210
of you have used the fetch API I'm

415
00:17:25,210 --> 00:17:27,790
guessing a good number okay yeah so um

416
00:17:27,790 --> 00:17:29,830
it's a really good thing to check out

417
00:17:29,830 --> 00:17:32,050
it's basically the API that will let you

418
00:17:32,050 --> 00:17:33,700
stop having to include jQuery because

419
00:17:33,700 --> 00:17:35,050
you didn't feel like writing an xml

420
00:17:35,050 --> 00:17:38,560
httprequest so fetch simplifies that

421
00:17:38,560 --> 00:17:40,810
interface so much you just say fetch

422
00:17:40,810 --> 00:17:42,190
some data and then

423
00:17:42,190 --> 00:17:43,840
and then then you get that kind of nice

424
00:17:43,840 --> 00:17:47,830
syntax going so what's really cool about

425
00:17:47,830 --> 00:17:51,040
the fetch spec though is that eventually

426
00:17:51,040 --> 00:17:53,410
instead of returning a promise like

427
00:17:53,410 --> 00:17:55,540
object which is when you get one value

428
00:17:55,540 --> 00:17:58,750
it should return a stream like object so

429
00:17:58,750 --> 00:18:00,540
hopefully those browser streams and

430
00:18:00,540 --> 00:18:03,250
what's really cool about that was means

431
00:18:03,250 --> 00:18:04,510
that we're going to be able to do that

432
00:18:04,510 --> 00:18:05,560
kind of thing so instead of promises

433
00:18:05,560 --> 00:18:08,140
where we have to like stop at every

434
00:18:08,140 --> 00:18:10,360
station like each cut like you have to

435
00:18:10,360 --> 00:18:11,890
the water has to stop in each cup and

436
00:18:11,890 --> 00:18:13,330
then only when you finish can you move

437
00:18:13,330 --> 00:18:15,760
on to the next stage instead of that we

438
00:18:15,760 --> 00:18:18,190
can start passing data through and the

439
00:18:18,190 --> 00:18:20,740
implication that has for speed and

440
00:18:20,740 --> 00:18:23,200
performance is really big like that's

441
00:18:23,200 --> 00:18:24,370
gonna be a really big deal and it's

442
00:18:24,370 --> 00:18:27,700
really exciting object out of the review

443
00:18:27,700 --> 00:18:30,480
could consider a stream like interface

444
00:18:30,480 --> 00:18:34,450
so object observe proposal for es7 but

445
00:18:34,450 --> 00:18:36,190
there's been a good number of talks and

446
00:18:36,190 --> 00:18:38,590
articles about it up here too now so you

447
00:18:38,590 --> 00:18:40,600
observe an object in the browser and you

448
00:18:40,600 --> 00:18:43,000
watch for changes or mutations as you

449
00:18:43,000 --> 00:18:46,180
like and do something with them and the

450
00:18:46,180 --> 00:18:47,770
one I'm really excited about the

451
00:18:47,770 --> 00:18:50,530
observable type so object real dog

452
00:18:50,530 --> 00:18:52,060
observe lets you watch stuff on the page

453
00:18:52,060 --> 00:18:55,450
the observable type let you watch pretty

454
00:18:55,450 --> 00:18:58,450
much anything so you can watch events

455
00:18:58,450 --> 00:19:00,250
you can watch arrays you can watch

456
00:19:00,250 --> 00:19:02,410
generators kind of kind of like it

457
00:19:02,410 --> 00:19:03,820
sounds like the Highland constructor

458
00:19:03,820 --> 00:19:06,520
right but isn't it would be a native

459
00:19:06,520 --> 00:19:11,110
type that gives you a place to put the

460
00:19:11,110 --> 00:19:13,420
data source that you can then subscribe

461
00:19:13,420 --> 00:19:17,200
to so there's proposal for es7 and the

462
00:19:17,200 --> 00:19:20,770
the RX j s next the next version of Ras

463
00:19:20,770 --> 00:19:22,900
that's what this is tracking against so

464
00:19:22,900 --> 00:19:26,230
if you use RX train us with our xjs

465
00:19:26,230 --> 00:19:28,450
which is currently an alpha rj is five I

466
00:19:28,450 --> 00:19:31,270
guess I so which is an alpha I its

467
00:19:31,270 --> 00:19:33,820
tracking against this type so that's the

468
00:19:33,820 --> 00:19:35,860
plan so you can that gives you access to

469
00:19:35,860 --> 00:19:38,680
using the sort of thing now so I have

470
00:19:38,680 --> 00:19:40,150
some small projects using some of these

471
00:19:40,150 --> 00:19:43,660
tools the first being last week blogs

472
00:19:43,660 --> 00:19:44,890
these are these are example so you can

473
00:19:44,890 --> 00:19:47,590
see like ok so nice libraries but what

474
00:19:47,590 --> 00:19:49,390
looks like when you actually use them so

475
00:19:49,390 --> 00:19:52,870
last week blog so refresh this so last

476
00:19:52,870 --> 00:19:55,590
week blog it'll take a minute because

477
00:19:55,590 --> 00:19:58,380
like on asleep but so you can see how

478
00:19:58,380 --> 00:20:00,659
that rendered to the page not all at

479
00:20:00,659 --> 00:20:03,390
once but kind of cascaded because it's

480
00:20:03,390 --> 00:20:05,610
rendering to the page before it has all

481
00:20:05,610 --> 00:20:08,370
the data so i was actually happening in

482
00:20:08,370 --> 00:20:13,140
last great blog is I'm getting there's a

483
00:20:13,140 --> 00:20:15,150
setup where I have friends and my

484
00:20:15,150 --> 00:20:17,610
friends don't blog enough so I had to

485
00:20:17,610 --> 00:20:19,049
include the new york times to get enough

486
00:20:19,049 --> 00:20:21,480
post so you could see the visual but in

487
00:20:21,480 --> 00:20:23,820
order to filter my friends RSS feeds for

488
00:20:23,820 --> 00:20:25,200
things have been posted in the last week

489
00:20:25,200 --> 00:20:29,309
so that is the idea so I get some RSS

490
00:20:29,309 --> 00:20:32,010
data I pipe it to something to

491
00:20:32,010 --> 00:20:35,100
understand RSS data and then I can you I

492
00:20:35,100 --> 00:20:38,580
use Thailand here to filter and map in

493
00:20:38,580 --> 00:20:41,760
order to send that response to back to

494
00:20:41,760 --> 00:20:44,520
the browser so i could operate on those

495
00:20:44,520 --> 00:20:46,590
because there is really i turned them

496
00:20:46,590 --> 00:20:48,120
into streams of data so rather than

497
00:20:48,120 --> 00:20:49,860
saving them all and then letting the

498
00:20:49,860 --> 00:20:52,529
server crunch away i'm sending the data

499
00:20:52,529 --> 00:20:59,130
as i have it ready all right so another

500
00:20:59,130 --> 00:21:02,130
one so the space-time app uses the fetch

501
00:21:02,130 --> 00:21:04,620
API fetch API tisane extremes yet sad

502
00:21:04,620 --> 00:21:08,070
face but it also uses I also update it

503
00:21:08,070 --> 00:21:11,880
to use gulp which uses use of streams so

504
00:21:11,880 --> 00:21:13,980
if you use go you've seen that you

505
00:21:13,980 --> 00:21:16,110
define a source and then you pipe it to

506
00:21:16,110 --> 00:21:17,549
different operations so that's one of

507
00:21:17,549 --> 00:21:19,020
the reasons why gulp is so fast is that

508
00:21:19,020 --> 00:21:22,020
is using stream stream objects so

509
00:21:22,020 --> 00:21:24,860
space-time app is a visualization that

510
00:21:24,860 --> 00:21:27,330
fetches star data and lets you drive

511
00:21:27,330 --> 00:21:28,710
your delorean around and see how the

512
00:21:28,710 --> 00:21:33,630
stars move over time so because the

513
00:21:33,630 --> 00:21:37,649
stars look different than now so they

514
00:21:37,649 --> 00:21:40,380
move our time I think it's correct plus

515
00:21:40,380 --> 00:21:42,270
or minus like either ten or a hundred

516
00:21:42,270 --> 00:21:45,180
thousand years

517
00:21:45,190 --> 00:21:47,480
at which point relativity becomes an

518
00:21:47,480 --> 00:21:53,239
issue um but it's pretty fun and so but

519
00:21:53,239 --> 00:21:55,100
the fetch API is really that simple it's

520
00:21:55,100 --> 00:21:57,679
such a stupid number of stars and then

521
00:21:57,679 --> 00:21:58,999
do a bunch of stuff with them and render

522
00:21:58,999 --> 00:22:05,749
them in a in 3gs in a 3d 3d space so

523
00:22:05,749 --> 00:22:07,960
another one Millennials snake people a

524
00:22:07,960 --> 00:22:11,210
popular chrome extension also there's

525
00:22:11,210 --> 00:22:14,059
firefox add-on I maintain that one also

526
00:22:14,059 --> 00:22:16,610
in safari users object observe to

527
00:22:16,610 --> 00:22:18,619
appropriately update instance of the

528
00:22:18,619 --> 00:22:22,159
word millennial with snake people such

529
00:22:22,159 --> 00:22:23,899
as in New York Times thing people found

530
00:22:23,899 --> 00:22:27,440
lazy or my personal favorite millennial

531
00:22:27,440 --> 00:22:30,739
children is changed to sneak 'let's so

532
00:22:30,739 --> 00:22:33,799
you know really really important stuff

533
00:22:33,799 --> 00:22:38,840
happening but it's what it's doing is

534
00:22:38,840 --> 00:22:41,389
it's looking at the body of the document

535
00:22:41,389 --> 00:22:44,570
and watching for changes which is

536
00:22:44,570 --> 00:22:46,580
streams those dealing with call back so

537
00:22:46,580 --> 00:22:49,549
it's a what is a push stream because

538
00:22:49,549 --> 00:22:52,669
just as data comes back from the

539
00:22:52,669 --> 00:22:55,580
observer we deal with it with changing

540
00:22:55,580 --> 00:22:58,820
things just make people so really really

541
00:22:58,820 --> 00:23:02,419
important stuff there all right now

542
00:23:02,419 --> 00:23:04,460
observable so using our SAS so this is

543
00:23:04,460 --> 00:23:06,980
this is just kind of fun it's a silly

544
00:23:06,980 --> 00:23:09,679
silly art so I'm observing where your

545
00:23:09,679 --> 00:23:11,659
mouse is going and then you can plate

546
00:23:11,659 --> 00:23:13,940
click to place straight shapes so I'm

547
00:23:13,940 --> 00:23:16,850
actually operating on your click stream

548
00:23:16,850 --> 00:23:20,149
and saying and and partitioning the

549
00:23:20,149 --> 00:23:21,440
clickstream whether it's a single click

550
00:23:21,440 --> 00:23:24,440
or a double click to or a multi click to

551
00:23:24,440 --> 00:23:26,480
place different shapes so you can play

552
00:23:26,480 --> 00:23:28,639
with it place different shapes just kind

553
00:23:28,639 --> 00:23:33,889
of fun and the code for that looks like

554
00:23:33,889 --> 00:23:36,649
this so we take our clickstream we

555
00:23:36,649 --> 00:23:38,989
buffer the debounce to figure out

556
00:23:38,989 --> 00:23:40,279
whether it's one click and then we

557
00:23:40,279 --> 00:23:42,289
partitioned into two unfortunately since

558
00:23:42,289 --> 00:23:43,669
I didn't include any polyfills I

559
00:23:43,669 --> 00:23:46,220
couldn't do the beautiful array syntax

560
00:23:46,220 --> 00:23:48,649
where you do you know think I'm a thing

561
00:23:48,649 --> 00:23:52,429
equals the output of the array but I had

562
00:23:52,429 --> 00:23:54,350
to use actual rate indexing like a you

563
00:23:54,350 --> 00:23:54,900
know

564
00:23:54,900 --> 00:24:02,100
like the past yeah pretty fun all right

565
00:24:02,100 --> 00:24:04,470
some interesting links so notes dreams

566
00:24:04,470 --> 00:24:06,240
comedian t there's a website called no

567
00:24:06,240 --> 00:24:08,730
dreams com so there you go RT have

568
00:24:08,730 --> 00:24:09,840
somewhere to go and I did mention sub

569
00:24:09,840 --> 00:24:11,520
stack so the stream handbook streams

570
00:24:11,520 --> 00:24:13,500
adventure out of node school great

571
00:24:13,500 --> 00:24:17,730
resources generators i get if i kyle has

572
00:24:17,730 --> 00:24:20,610
it the you don't know java j/s book is

573
00:24:20,610 --> 00:24:23,610
all free on github you can also buy it

574
00:24:23,610 --> 00:24:25,830
with your money which is also great but

575
00:24:25,830 --> 00:24:27,480
there's a really nice generator section

576
00:24:27,480 --> 00:24:30,570
and axel has an awesome generators and

577
00:24:30,570 --> 00:24:32,220
deaf he always had really good resources

578
00:24:32,220 --> 00:24:35,130
for the new language standard so

579
00:24:35,130 --> 00:24:37,170
definitely check those out reactor

580
00:24:37,170 --> 00:24:39,210
programming libraries bacon highland RX

581
00:24:39,210 --> 00:24:41,760
and our xjs next remember they are two

582
00:24:41,760 --> 00:24:44,520
different repositories so and for what

583
00:24:44,520 --> 00:24:46,890
it's worth the demo i showed was using

584
00:24:46,890 --> 00:24:49,320
the alpha version but they should be

585
00:24:49,320 --> 00:24:52,560
compatible eventually other cool

586
00:24:52,560 --> 00:24:53,910
reactive things the reactive marbles

587
00:24:53,910 --> 00:24:56,330
just wanted to show those super quickly

588
00:24:56,330 --> 00:24:59,820
so this is interactive diagrams yours if

589
00:24:59,820 --> 00:25:01,020
you're thinking okay well list

590
00:25:01,020 --> 00:25:03,780
operations on streams of data well

591
00:25:03,780 --> 00:25:05,880
that's kind of a big you know conceptual

592
00:25:05,880 --> 00:25:08,610
leap the arch marbles let you look at

593
00:25:08,610 --> 00:25:11,780
what some different things look like so

594
00:25:11,780 --> 00:25:15,570
what happens when i merge two streams

595
00:25:15,570 --> 00:25:17,340
this is it gives you so we call them

596
00:25:17,340 --> 00:25:18,900
marble diagram so these are marbles you

597
00:25:18,900 --> 00:25:20,910
can move the marbles around and see what

598
00:25:20,910 --> 00:25:23,940
the output of the list operation would

599
00:25:23,940 --> 00:25:28,890
be alright and so I include those links

600
00:25:28,890 --> 00:25:30,570
because the slides are all online PS

601
00:25:30,570 --> 00:25:32,510
Eliot I can't have a 0 / 0 ng streams

602
00:25:32,510 --> 00:25:34,770
thank you so much find me on twitter at

603
00:25:34,770 --> 00:25:36,590
pama sword chat with me in the hallway

604
00:25:36,590 --> 00:25:39,990
web before turning in complete so Turing

605
00:25:39,990 --> 00:25:44,320
cool is the podcast yeah thanks

