1
00:00:07,099 --> 00:00:10,889

alright so there are two sections to

2
00:00:10,889 --> 00:00:15,780
this talk one is what and why Universal

3
00:00:15,780 --> 00:00:18,779
JavaScript where I will be talking about

4
00:00:18,779 --> 00:00:21,750
livid of about benefits that it brings

5
00:00:21,750 --> 00:00:26,369
along and then another one is a little

6
00:00:26,369 --> 00:00:29,510
bit on how we can build a simple

7
00:00:29,510 --> 00:00:32,430
isomorphic sorry universal JavaScript

8
00:00:32,430 --> 00:00:35,340
application and also what are the pain

9
00:00:35,340 --> 00:00:37,320
points that you might face if you are

10
00:00:37,320 --> 00:00:43,200
building such application alright so

11
00:00:43,200 --> 00:00:49,200
that's me yeah so I'm mostly doing

12
00:00:49,200 --> 00:00:52,140
front-end a trademark in my spare time

13
00:00:52,140 --> 00:00:55,469
I'm doing some work on like just looking

14
00:00:55,469 --> 00:00:57,239
around react native I build a couple of

15
00:00:57,239 --> 00:01:00,390
apps on node stuff like but that's

16
00:01:00,390 --> 00:01:02,940
pretty much it previously I was doing

17
00:01:02,940 --> 00:01:06,840
some PHP and Java hated it and even did

18
00:01:06,840 --> 00:01:10,020
some native Android so now mostly

19
00:01:10,020 --> 00:01:15,150
front-end web front-end a red mark is

20
00:01:15,150 --> 00:01:18,030
one of the leading online grocery stores

21
00:01:18,030 --> 00:01:21,060
in Singapore we are technology and a

22
00:01:21,060 --> 00:01:24,689
logistic company and that's rad mark so

23
00:01:24,689 --> 00:01:27,570
just take a good look we do deliver

24
00:01:27,570 --> 00:01:30,450
groceries why drones in case if you guys

25
00:01:30,450 --> 00:01:34,350
want to order that yeah alright so

26
00:01:34,350 --> 00:01:41,300
moving on

27
00:01:41,310 --> 00:01:45,780
okay so what is a universal JavaScript

28
00:01:45,780 --> 00:01:50,100
some people refer to it as isomorphic

29
00:01:50,100 --> 00:01:54,070
JavaScript some as universal they pretty

30
00:01:54,070 --> 00:01:58,899
much mean the same thing and so

31
00:01:58,899 --> 00:02:01,479
Universal basically means that Universal

32
00:02:01,479 --> 00:02:02,880
JavaScript basically means that

33
00:02:02,880 --> 00:02:06,180
JavaScript code that can run in an

34
00:02:06,180 --> 00:02:11,670
environment agnostic Bay and in short Oh

35
00:02:11,670 --> 00:02:13,870
what it means is that it can run on a

36
00:02:13,870 --> 00:02:18,370
server and client but also on you know

37
00:02:18,370 --> 00:02:22,750
like phones mobile phones iOS android

38
00:02:22,750 --> 00:02:26,860
etc isomorphic pretty much means the

39
00:02:26,860 --> 00:02:29,410
same thing as well just that I

40
00:02:29,410 --> 00:02:33,880
personally feel that Universal gives it

41
00:02:33,880 --> 00:02:37,239
a good tag to a JavaScript the intention

42
00:02:37,239 --> 00:02:39,670
the intent message that goes around is

43
00:02:39,670 --> 00:02:42,220
like JavaScript that can be used

44
00:02:42,220 --> 00:02:44,350
everywhere and i think that's that's

45
00:02:44,350 --> 00:02:47,769
going to help javascript itself there is

46
00:02:47,769 --> 00:02:49,780
some discussion going around like a lot

47
00:02:49,780 --> 00:02:52,060
of people who are saying that isomorphic

48
00:02:52,060 --> 00:02:54,370
is a more technical name and and it's a

49
00:02:54,370 --> 00:02:55,810
good even though it's it might not be

50
00:02:55,810 --> 00:02:59,410
accurate but so there are some people

51
00:02:59,410 --> 00:03:03,450
who prefer isomorphic there are a lot of

52
00:03:03,450 --> 00:03:05,739
people are preferring universal as well

53
00:03:05,739 --> 00:03:08,170
and then I've those two links which you

54
00:03:08,170 --> 00:03:10,420
guys can later go and check out and read

55
00:03:10,420 --> 00:03:16,390
more about it okay so why Universal

56
00:03:16,390 --> 00:03:19,359
JavaScript why do we need to go to the

57
00:03:19,359 --> 00:03:21,280
trouble and you know like share code

58
00:03:21,280 --> 00:03:23,350
between client and server or what are

59
00:03:23,350 --> 00:03:28,239
the benefits that it brings us so

60
00:03:28,239 --> 00:03:29,650
basically when building a web

61
00:03:29,650 --> 00:03:33,510
application it house with some of these

62
00:03:33,510 --> 00:03:36,370
so I'll go more in detail within each

63
00:03:36,370 --> 00:03:38,560
one of it I see your performance and

64
00:03:38,560 --> 00:03:43,770
maintainability

65
00:03:43,780 --> 00:03:50,060
alright so SEO if any one of you I mean

66
00:03:50,060 --> 00:03:51,319
a lot of you guys might have build

67
00:03:51,319 --> 00:03:53,989
single page applications that only run

68
00:03:53,989 --> 00:03:56,989
on a browser and so what happens is that

69
00:03:56,989 --> 00:03:59,209
when different BOTS they come to our

70
00:03:59,209 --> 00:04:03,920
website these BOTS like Facebook Google

71
00:04:03,920 --> 00:04:08,629
board I think google bot now can now can

72
00:04:08,629 --> 00:04:09,859
read single page application

73
00:04:09,859 --> 00:04:12,439
applications properly and index them but

74
00:04:12,439 --> 00:04:14,450
I think a lot of other BOTS still don't

75
00:04:14,450 --> 00:04:17,389
do that so initially when somebody comes

76
00:04:17,389 --> 00:04:20,120
to your like a bot that comes to your

77
00:04:20,120 --> 00:04:21,949
website it will see something like this

78
00:04:21,949 --> 00:04:25,460
and if you notice at the rube classroom

79
00:04:25,460 --> 00:04:27,500
that's where your application is

80
00:04:27,500 --> 00:04:29,720
supposed to be mounted but the bot will

81
00:04:29,720 --> 00:04:31,759
not wait for that it will just index

82
00:04:31,759 --> 00:04:33,289
this page which will have no information

83
00:04:33,289 --> 00:04:42,500
about your website so to please these

84
00:04:42,500 --> 00:04:46,130
BOTS we have to do various hacks one of

85
00:04:46,130 --> 00:04:47,419
the hacks that we are doing at red mud

86
00:04:47,419 --> 00:04:50,180
right now is something like this so what

87
00:04:50,180 --> 00:04:54,349
we do is we on engine next level we

88
00:04:54,349 --> 00:04:58,610
check if the user agent is one of these

89
00:04:58,610 --> 00:05:01,849
BOTS and then we will try to reverse

90
00:05:01,849 --> 00:05:04,970
proxy to our internal service that is

91
00:05:04,970 --> 00:05:07,490
running a headless browser like phantom

92
00:05:07,490 --> 00:05:11,150
jas which will wait for the whole

93
00:05:11,150 --> 00:05:13,070
javascript thing to load CSS everything

94
00:05:13,070 --> 00:05:16,099
patch it together and then give it back

95
00:05:16,099 --> 00:05:20,720
to Googlebot and we also keep keep it in

96
00:05:20,720 --> 00:05:23,570
man cash so that we can quickly get back

97
00:05:23,570 --> 00:05:25,729
to Googlebot so there's some work

98
00:05:25,729 --> 00:05:27,229
involved there we are running like to

99
00:05:27,229 --> 00:05:29,870
medium instances and sometimes they

100
00:05:29,870 --> 00:05:31,820
break due to various reasons we have to

101
00:05:31,820 --> 00:05:34,190
maintain it and then one of the worst

102
00:05:34,190 --> 00:05:36,020
thing about this approach is there might

103
00:05:36,020 --> 00:05:37,340
be better ways but one of the worst

104
00:05:37,340 --> 00:05:39,500
things about this approach is like you

105
00:05:39,500 --> 00:05:41,449
have to put boards there and then every

106
00:05:41,449 --> 00:05:43,250
day there's a new board so recently like

107
00:05:43,250 --> 00:05:46,880
a slack also has a bot which so when we

108
00:05:46,880 --> 00:05:49,789
face our website on slack it just shows

109
00:05:49,789 --> 00:05:52,010
nothing because slack cannot read our

110
00:05:52,010 --> 00:05:55,660
website

111
00:05:55,670 --> 00:05:58,590
so Universal JavaScript approach

112
00:05:58,590 --> 00:06:01,710
actually fixes this issue Oh what it

113
00:06:01,710 --> 00:06:03,450
does is like your same application code

114
00:06:03,450 --> 00:06:05,190
that you're building currently in single

115
00:06:05,190 --> 00:06:07,680
page application that only runs on a

116
00:06:07,680 --> 00:06:10,470
browser can render the same thing on the

117
00:06:10,470 --> 00:06:14,850
server and push it down for BOTS to just

118
00:06:14,850 --> 00:06:18,270
directly get that information before I

119
00:06:18,270 --> 00:06:19,560
move forward I'll just quickly show you

120
00:06:19,560 --> 00:06:28,680
guys how this website looks like so this

121
00:06:28,680 --> 00:06:31,110
is red mark right now it's like right

122
00:06:31,110 --> 00:06:33,390
working fine and then now I'll serve it

123
00:06:33,390 --> 00:06:35,790
with so I'll fetch it as a google bot

124
00:06:35,790 --> 00:06:37,770
and you guys will see that like it'll be

125
00:06:37,770 --> 00:06:40,110
a bit broken but at least like you know

126
00:06:40,110 --> 00:06:41,670
you'll see the things that are being

127
00:06:41,670 --> 00:06:44,190
done to it when we are using phantom

128
00:06:44,190 --> 00:06:49,080
juice or something let me just first

129
00:06:49,080 --> 00:06:53,310
that again and yep so now you can see

130
00:06:53,310 --> 00:06:57,300
all the information I mean all the

131
00:06:57,300 --> 00:07:01,860
content the content is in here compared

132
00:07:01,860 --> 00:07:05,640
to the one that we fetch as default like

133
00:07:05,640 --> 00:07:13,740
jazz a browser user agent yep so you'll

134
00:07:13,740 --> 00:07:19,020
see something like there's there's some

135
00:07:19,020 --> 00:07:21,960
code somewhere here that that where the

136
00:07:21,960 --> 00:07:23,790
mounting happens but yeah gehen there's

137
00:07:23,790 --> 00:07:31,680
no full content and performance so the

138
00:07:31,680 --> 00:07:36,030
one that all that is on the that is

139
00:07:36,030 --> 00:07:38,100
saying client side rendering you can see

140
00:07:38,100 --> 00:07:43,290
that how the browser actually renders

141
00:07:43,290 --> 00:07:46,590
this is like it will download HTML it

142
00:07:46,590 --> 00:07:48,480
will wait for JavaScript that is inside

143
00:07:48,480 --> 00:07:52,560
that HTML to be downloaded then I will

144
00:07:52,560 --> 00:07:54,810
try to evaluate it and after that I will

145
00:07:54,810 --> 00:07:57,060
maybe in our case you try to make some

146
00:07:57,060 --> 00:08:00,210
Ajax calls and only after that user will

147
00:08:00,210 --> 00:08:04,650
see some content it works fine in some

148
00:08:04,650 --> 00:08:06,040
cases like especially

149
00:08:06,040 --> 00:08:07,900
dekstop like it'sit's not that of a big

150
00:08:07,900 --> 00:08:09,850
deal where you have good connection

151
00:08:09,850 --> 00:08:11,610
especially in countries like Singapore

152
00:08:11,610 --> 00:08:14,380
but when you are mobile and then there

153
00:08:14,380 --> 00:08:18,520
is a high high latency and low bandwidth

154
00:08:18,520 --> 00:08:21,850
then you start to see a lot of

155
00:08:21,850 --> 00:08:27,100
performance issues on on this side you

156
00:08:27,100 --> 00:08:29,400
can see that server side rendering of

157
00:08:29,400 --> 00:08:32,560
actually what happens here is that as

158
00:08:32,560 --> 00:08:36,700
soon as you download the document it has

159
00:08:36,700 --> 00:08:39,490
everything and user just sees it and you

160
00:08:39,490 --> 00:08:41,169
can still download the JavaScript app

161
00:08:41,169 --> 00:08:44,070
and do all the other stuff like

162
00:08:44,070 --> 00:08:46,900
rehydrating it and maybe making some

163
00:08:46,900 --> 00:08:48,700
additional Ajax calls if you want to or

164
00:08:48,700 --> 00:08:51,010
you can just render everything on server

165
00:08:51,010 --> 00:08:53,260
side so there's some clear big

166
00:08:53,260 --> 00:08:54,700
performance gains when you do

167
00:08:54,700 --> 00:08:58,900
server-side rendering maybe maybe this

168
00:08:58,900 --> 00:09:01,000
will this performance issue will get

169
00:09:01,000 --> 00:09:05,020
better with HTTP too but for now like I

170
00:09:05,020 --> 00:09:07,480
mean I I think still it might not get

171
00:09:07,480 --> 00:09:10,380
that better but I I think this helps and

172
00:09:10,380 --> 00:09:17,050
yeah maintainability is is not a big

173
00:09:17,050 --> 00:09:19,900
issue when it comes to single page

174
00:09:19,900 --> 00:09:21,400
application like what we build a

175
00:09:21,400 --> 00:09:22,930
trademark because it's a backbone

176
00:09:22,930 --> 00:09:25,450
application all the code is in there we

177
00:09:25,450 --> 00:09:27,540
don't we don't have any server

178
00:09:27,540 --> 00:09:31,600
application that is rendering it we we

179
00:09:31,600 --> 00:09:34,030
just have restful api so it might not be

180
00:09:34,030 --> 00:09:37,480
a big deal but I i think for

181
00:09:37,480 --> 00:09:38,920
applications like which have some

182
00:09:38,920 --> 00:09:40,930
partial stop being done on a server and

183
00:09:40,930 --> 00:09:43,660
then loading up sing some single page

184
00:09:43,660 --> 00:09:47,710
application of to a browser and you're

185
00:09:47,710 --> 00:09:49,330
sharing some stuff like formatting etc

186
00:09:49,330 --> 00:09:53,200
or doing some data mutation I think you

187
00:09:53,200 --> 00:09:56,050
can share that logic universal

188
00:09:56,050 --> 00:10:00,730
JavaScript helps with that as well all

189
00:10:00,730 --> 00:10:04,570
right so how do how how to build a

190
00:10:04,570 --> 00:10:06,490
universal JavaScript app there are many

191
00:10:06,490 --> 00:10:09,280
ways and I like frameworks like mature

192
00:10:09,280 --> 00:10:12,100
and they actually come up with a lot of

193
00:10:12,100 --> 00:10:14,380
packages that or I think by default also

194
00:10:14,380 --> 00:10:16,070
material has this is server etc

195
00:10:16,070 --> 00:10:18,490
all that stuff can help you build

196
00:10:18,490 --> 00:10:21,590
Universal JavaScript app but let's say

197
00:10:21,590 --> 00:10:23,860
if we are using react or something else

198
00:10:23,860 --> 00:10:26,630
how do we build it I'm we're just going

199
00:10:26,630 --> 00:10:30,920
to dig a big dive into some coding here

200
00:10:30,920 --> 00:10:34,610
and see how to build a basic universal

201
00:10:34,610 --> 00:10:39,820
application using react and nodejs so

202
00:10:39,820 --> 00:10:45,350
let's build something like this this is

203
00:10:45,350 --> 00:10:48,440
the component hierarchy so we have input

204
00:10:48,440 --> 00:10:51,590
we have some progress j/s and then we

205
00:10:51,590 --> 00:10:52,820
have search results so you type

206
00:10:52,820 --> 00:10:54,380
something and then we'll just try to

207
00:10:54,380 --> 00:10:56,450
fake that search result for now because

208
00:10:56,450 --> 00:10:59,150
we we are not using any API or anything

209
00:10:59,150 --> 00:11:01,070
it will take some time to build the

210
00:11:01,070 --> 00:11:05,260
whole flux or some other layer here and

211
00:11:05,260 --> 00:11:11,300
yeah we have a rapper AB GS so let's get

212
00:11:11,300 --> 00:11:16,180
to it all right so I have this basic

213
00:11:16,180 --> 00:11:19,130
template here which I'm going to use to

214
00:11:19,130 --> 00:11:21,560
build a universal JavaScript application

215
00:11:21,560 --> 00:11:24,620
so i'll just quickly run through what we

216
00:11:24,620 --> 00:11:28,340
have so i've already have some node

217
00:11:28,340 --> 00:11:30,350
modules that i've installed so that i

218
00:11:30,350 --> 00:11:31,910
don't have to do n PM install again and

219
00:11:31,910 --> 00:11:35,350
then I have some web pack config for

220
00:11:35,350 --> 00:11:38,990
bundling the application etc so this is

221
00:11:38,990 --> 00:11:41,720
my backpack where you basic stuff so

222
00:11:41,720 --> 00:11:44,090
it's it's going to look for client

223
00:11:44,090 --> 00:11:48,050
client rjs which is not there yet and it

224
00:11:48,050 --> 00:11:51,350
will it will output a bundle DOJ's in a

225
00:11:51,350 --> 00:11:54,320
dist folder which is not here yet and it

226
00:11:54,320 --> 00:11:56,600
will yeah we are going to use es6 and

227
00:11:56,600 --> 00:11:59,390
stuff so it's we i have babel loader

228
00:11:59,390 --> 00:12:04,160
here and and yeah that's pretty much it

229
00:12:04,160 --> 00:12:09,760
and for web pack and then i have index

230
00:12:09,760 --> 00:12:13,340
dot GS so it's it's doing pretty much

231
00:12:13,340 --> 00:12:16,250
the same thing for the server side so it

232
00:12:16,250 --> 00:12:19,250
will set up a like it initiated it will

233
00:12:19,250 --> 00:12:21,890
register babel here and then it will

234
00:12:21,890 --> 00:12:25,240
look for server Dodgers and execute it

235
00:12:25,240 --> 00:12:27,950
so let's let's build a

236
00:12:27,950 --> 00:12:29,930
single page application that just runs

237
00:12:29,930 --> 00:12:32,060
on a browser first and then we can do

238
00:12:32,060 --> 00:12:34,040
the server side so I'm just going to go

239
00:12:34,040 --> 00:12:36,350
here and yeah by the way I have some

240
00:12:36,350 --> 00:12:38,150
code or ID with me so I'm just going to

241
00:12:38,150 --> 00:12:40,160
paste it there or like even write some

242
00:12:40,160 --> 00:12:42,680
and probably talk about it what it is

243
00:12:42,680 --> 00:12:47,760
that actually typing each and every line

244
00:12:47,770 --> 00:12:51,410
alright so let's do this let's create

245
00:12:51,410 --> 00:12:54,200
client Jess and let me just look at all

246
00:12:54,200 --> 00:13:00,650
right so this is what i have here so

247
00:13:00,650 --> 00:13:05,000
what it's doing is it's actually yeah

248
00:13:05,000 --> 00:13:08,680
it's look um it's just mounting the app

249
00:13:08,680 --> 00:13:12,640
container a difference between can like

250
00:13:12,640 --> 00:13:16,250
now and i'll go in detail later so app

251
00:13:16,250 --> 00:13:18,560
is just a react component that is

252
00:13:18,560 --> 00:13:21,320
actually composing a couple of other

253
00:13:21,320 --> 00:13:23,630
components in there the one that we saw

254
00:13:23,630 --> 00:13:26,690
in the diagram the slides so it's going

255
00:13:26,690 --> 00:13:29,750
to mount to the root I have index or

256
00:13:29,750 --> 00:13:34,730
HTML here which has this basic HTML

257
00:13:34,730 --> 00:13:37,580
template so we are going to route here

258
00:13:37,580 --> 00:13:40,510
and then we have this bundle dot J's

259
00:13:40,510 --> 00:13:48,890
just okay yep so yeah so our client

260
00:13:48,890 --> 00:13:51,890
application will be bundled and will be

261
00:13:51,890 --> 00:13:55,700
captain static / bundled ojs right now

262
00:13:55,700 --> 00:13:59,000
that's not done so i have this let's go

263
00:13:59,000 --> 00:14:26,820
ahead and create our a BS

264
00:14:26,830 --> 00:14:29,710
so a nap dodge is what we have is like

265
00:14:29,710 --> 00:14:34,180
we are we are importing some components

266
00:14:34,180 --> 00:14:36,910
like input search results so if you go

267
00:14:36,910 --> 00:14:38,740
back here we have an input progress bar

268
00:14:38,740 --> 00:14:41,650
search result so I'm pretty much loading

269
00:14:41,650 --> 00:14:43,660
that stuff I have some additional stuff

270
00:14:43,660 --> 00:14:45,970
that's not in the slide as like result

271
00:14:45,970 --> 00:14:48,610
card so each of the result as a card

272
00:14:48,610 --> 00:14:51,490
that see they're like this one this box

273
00:14:51,490 --> 00:14:56,530
here and we have some data in data

274
00:14:56,530 --> 00:15:12,540
folder so let's just quickly bootstrap

275
00:15:12,550 --> 00:15:38,400
components

276
00:15:38,410 --> 00:15:41,390
dark

277
00:15:41,390 --> 00:15:48,750
yes

278
00:15:48,760 --> 00:15:52,220
so this is a stateless component react

279
00:15:52,220 --> 00:15:53,510
recently released this so you can

280
00:15:53,510 --> 00:15:55,100
actually write a component in this way

281
00:15:55,100 --> 00:15:59,990
which is like pretty cool and yeah what

282
00:15:59,990 --> 00:16:01,580
it does is just take some props and just

283
00:16:01,580 --> 00:16:07,530
renders a component at one more here

284
00:16:07,540 --> 00:16:14,360
this one just renders a children's prop

285
00:16:14,360 --> 00:16:16,370
that's it it's like a rapper nothing

286
00:16:16,370 --> 00:16:30,380
else and okay all right so let's let's

287
00:16:30,380 --> 00:16:32,810
have a look at here so what I'm doing is

288
00:16:32,810 --> 00:16:36,140
I'm just initializing some state I have

289
00:16:36,140 --> 00:16:38,600
some product data let me just create a

290
00:16:38,600 --> 00:16:51,020
data ducks is it products Rogers its

291
00:16:51,020 --> 00:17:02,710
product Oh Cheers

292
00:17:02,720 --> 00:17:04,579
alright so I'm just going to copy this

293
00:17:04,579 --> 00:17:09,110
data so this data is just like a title

294
00:17:09,110 --> 00:17:11,270
and an image of that product and a URL

295
00:17:11,270 --> 00:17:18,650
that's it all right so let's just close

296
00:17:18,650 --> 00:17:21,140
others and just open our appt don't

297
00:17:21,140 --> 00:17:25,549
cheers and yeah okay sorry what's

298
00:17:25,549 --> 00:17:27,470
happening here is I'm just initializing

299
00:17:27,470 --> 00:17:31,760
some state for this application for it

300
00:17:31,760 --> 00:17:33,740
for this component I have some products

301
00:17:33,740 --> 00:17:35,659
i'm just putting all the products in

302
00:17:35,659 --> 00:17:39,799
here and then what I'm rendering is just

303
00:17:39,799 --> 00:17:42,409
all the products initially and then off

304
00:17:42,409 --> 00:17:48,400
then on input I have a handle on submit

305
00:17:48,400 --> 00:17:52,100
where where as soon as user enters

306
00:17:52,100 --> 00:17:56,419
something he will be shown it will

307
00:17:56,419 --> 00:17:58,370
quickly change the state to progress the

308
00:17:58,370 --> 00:18:02,000
loading and then we will we will

309
00:18:02,000 --> 00:18:05,210
simulate some sort of like a synchronous

310
00:18:05,210 --> 00:18:08,539
operation so I will go somewhere and try

311
00:18:08,539 --> 00:18:09,890
to fetch it but actually is this trying

312
00:18:09,890 --> 00:18:13,909
to like get to two of the products

313
00:18:13,909 --> 00:18:16,460
randomly from that product set that been

314
00:18:16,460 --> 00:18:19,940
included up here yep so let's run this

315
00:18:19,940 --> 00:18:25,460
and right yeah so before I run it let me

316
00:18:25,460 --> 00:18:27,049
just show you how my package or Jason

317
00:18:27,049 --> 00:18:30,260
looks so I i I'm just running these two

318
00:18:30,260 --> 00:18:32,690
commands and like there is better way to

319
00:18:32,690 --> 00:18:35,600
do it like you have to like people run

320
00:18:35,600 --> 00:18:37,130
watch and stuff but right now for this

321
00:18:37,130 --> 00:18:39,559
one I just try to cap it keep it very

322
00:18:39,559 --> 00:18:41,450
simple so I'm just going to run backpack

323
00:18:41,450 --> 00:18:43,820
and which will create a bundle and then

324
00:18:43,820 --> 00:18:47,330
I will just run a node indexed rjs which

325
00:18:47,330 --> 00:18:50,750
will just execute the server that's a so

326
00:18:50,750 --> 00:18:56,690
run all right

327
00:18:56,700 --> 00:19:03,930
I'm starved

328
00:19:03,940 --> 00:19:10,510
it

329
00:19:10,520 --> 00:19:14,460
art

330
00:19:14,470 --> 00:19:17,620
okay my bad it's yeah we don't have a

331
00:19:17,620 --> 00:19:20,020
server so let's just open this directory

332
00:19:20,020 --> 00:19:22,750
and yeah this is a very bad way to do it

333
00:19:22,750 --> 00:19:24,789
but we'll just you know yeah so this

334
00:19:24,789 --> 00:19:28,120
other application looks like and I have

335
00:19:28,120 --> 00:19:31,720
some CSS or that I prepared earlier in

336
00:19:31,720 --> 00:19:36,159
here some ugly CSS no preprocessors just

337
00:19:36,159 --> 00:19:39,370
simple CSS and yeah so if you see now

338
00:19:39,370 --> 00:19:41,440
what it does is like it loads the

339
00:19:41,440 --> 00:19:44,770
application and then and then after

340
00:19:44,770 --> 00:19:46,360
javascript is loaded it will actually

341
00:19:46,360 --> 00:19:49,630
populate the it will mount the component

342
00:19:49,630 --> 00:19:52,120
and you can see that react component is

343
00:19:52,120 --> 00:19:55,870
mounted and so functionality is just

344
00:19:55,870 --> 00:19:57,580
this I'm just going to try bread and

345
00:19:57,580 --> 00:19:59,200
it's like freaking dumb and it will just

346
00:19:59,200 --> 00:20:00,909
like randomly give me something banana

347
00:20:00,909 --> 00:20:03,520
or something and that's it and let's

348
00:20:03,520 --> 00:20:07,870
let's render this on server and so I'm

349
00:20:07,870 --> 00:20:11,820
just going to create a new file server

350
00:20:11,820 --> 00:20:17,230
touches and all right so I'm just going

351
00:20:17,230 --> 00:20:24,940
to import Express from express

352
00:20:24,950 --> 00:20:27,020
I have server prepared already let's

353
00:20:27,020 --> 00:20:32,990
just put here alright so what I have

354
00:20:32,990 --> 00:20:36,710
here is a very simple bare minimal

355
00:20:36,710 --> 00:20:42,620
Express server it's a it's what it's

356
00:20:42,620 --> 00:20:44,830
doing is it's taking that same app

357
00:20:44,830 --> 00:20:50,540
container a component and it's it's

358
00:20:50,540 --> 00:20:52,460
using this HTML wrapper which I have to

359
00:20:52,460 --> 00:20:54,770
create yet or what HTML wrapper is is

360
00:20:54,770 --> 00:20:57,080
that pretty much the same thing which

361
00:20:57,080 --> 00:21:01,690
I'm just going to put it in here as a

362
00:21:01,690 --> 00:21:15,070
node module

363
00:21:15,080 --> 00:21:18,770
ok

364
00:21:18,780 --> 00:21:27,400
alright so

365
00:21:27,410 --> 00:21:31,370
so yeah it's it's is just a wrapper it's

366
00:21:31,370 --> 00:21:34,010
uh oh is this wrapper function i'm

367
00:21:34,010 --> 00:21:35,780
passing app to it and then is this a

368
00:21:35,780 --> 00:21:39,590
binding up here that's it nothing much

369
00:21:39,590 --> 00:21:43,550
so on server yeah this should this

370
00:21:43,550 --> 00:21:45,770
should just do the magic and and yeah

371
00:21:45,770 --> 00:21:48,890
about about about this section what we

372
00:21:48,890 --> 00:21:50,300
are doing here is i'm just running a

373
00:21:50,300 --> 00:21:53,090
static middleware so that it can

374
00:21:53,090 --> 00:21:56,960
actually take bundle and style on the

375
00:21:56,960 --> 00:21:59,870
server as a static files and this

376
00:21:59,870 --> 00:22:01,460
middleware here is just sending the

377
00:22:01,460 --> 00:22:04,130
response back after putting everything

378
00:22:04,130 --> 00:22:06,290
together we are using render to string

379
00:22:06,290 --> 00:22:09,320
this is provided by react itself what it

380
00:22:09,320 --> 00:22:10,640
does is actually it converts everything

381
00:22:10,640 --> 00:22:15,290
to string and that's it passes back to

382
00:22:15,290 --> 00:22:18,410
the client and then online when you when

383
00:22:18,410 --> 00:22:20,960
you try to mount it again what it does

384
00:22:20,960 --> 00:22:22,910
is it won't replace the whole thing if

385
00:22:22,910 --> 00:22:25,670
it matches the dom if the door miss em

386
00:22:25,670 --> 00:22:28,100
same from the server and the client it

387
00:22:28,100 --> 00:22:31,790
will not try to replace it so let's do

388
00:22:31,790 --> 00:22:41,470
this now

389
00:22:41,480 --> 00:22:43,880
alright so I yeah it's running I don't

390
00:22:43,880 --> 00:22:48,309
have any message in there so alright

391
00:22:48,309 --> 00:22:53,150
let's open our local host 3000 just move

392
00:22:53,150 --> 00:22:54,950
this little bit here so that I know

393
00:22:54,950 --> 00:22:57,740
what's going on all right let's have a

394
00:22:57,740 --> 00:23:02,840
look so earlier when we saw it was the

395
00:23:02,840 --> 00:23:06,350
the document was empty there was no I

396
00:23:06,350 --> 00:23:08,419
mean it wasn't empty but there was no

397
00:23:08,419 --> 00:23:10,669
suicide rendered content in there but

398
00:23:10,669 --> 00:23:15,410
let's see now so yeah now you can see

399
00:23:15,410 --> 00:23:17,120
that there is some react stuff here that

400
00:23:17,120 --> 00:23:20,750
directly came from server and then

401
00:23:20,750 --> 00:23:26,150
you'll notice something here in your in

402
00:23:26,150 --> 00:23:27,620
here that there is something called data

403
00:23:27,620 --> 00:23:30,770
react a checksum so what what it does is

404
00:23:30,770 --> 00:23:32,030
that on a service ID will generate

405
00:23:32,030 --> 00:23:37,040
something like this a number or I don't

406
00:23:37,040 --> 00:23:38,630
like some time its hash I don't know I

407
00:23:38,630 --> 00:23:39,830
don't know exactly what it is but like

408
00:23:39,830 --> 00:23:43,240
it will generate a unique key that is

409
00:23:43,240 --> 00:23:45,650
compared on the client side when we are

410
00:23:45,650 --> 00:23:48,650
doing something like this so when I'm

411
00:23:48,650 --> 00:23:50,210
mounting this application on the client

412
00:23:50,210 --> 00:23:52,070
side it will try to compare this and

413
00:23:52,070 --> 00:23:55,820
then it was just like it will just

414
00:23:55,820 --> 00:23:58,640
continue from where it left off now

415
00:23:58,640 --> 00:24:01,460
let's say if the DOM is different on the

416
00:24:01,460 --> 00:24:05,480
server then the client so so let's say I

417
00:24:05,480 --> 00:24:09,610
do something like super quick one and

418
00:24:09,610 --> 00:24:22,540
just do something like this

419
00:24:22,550 --> 00:24:24,620
so I'm just going to define a jewel I

420
00:24:24,620 --> 00:24:26,920
hope this works and I haven't dusted it

421
00:24:26,920 --> 00:24:38,030
so on here sorry on the back

422
00:24:38,040 --> 00:24:48,190
here I will just do something like just

423
00:24:48,200 --> 00:24:51,950
Falls and yeah that's sorry I can just

424
00:24:51,950 --> 00:24:54,559
do something like this I'm gonna get out

425
00:24:54,559 --> 00:25:04,299
so let's let's get this a try and so

426
00:25:04,299 --> 00:25:08,000
what i will do is probably let's go to

427
00:25:08,000 --> 00:25:14,059
one of the components and or we can just

428
00:25:14,059 --> 00:25:23,980
do it in the app is

429
00:25:23,990 --> 00:25:29,360
so if i have something like this so it's

430
00:25:29,360 --> 00:25:35,990
a great driving I will do this and so on

431
00:25:35,990 --> 00:25:37,550
a server side I'll just return something

432
00:25:37,550 --> 00:25:44,720
like this with class name some gibberish

433
00:25:44,720 --> 00:25:48,800
and then I'll just do normal progress

434
00:25:48,800 --> 00:25:53,480
bar here let's see if this works I

435
00:25:53,480 --> 00:26:02,749
haven't tested this out

436
00:26:02,759 --> 00:26:21,310
ok

437
00:26:21,320 --> 00:26:40,190
oh okay okay my bad

438
00:26:40,200 --> 00:26:43,019
alright so now you can see that this is

439
00:26:43,019 --> 00:26:44,820
throwing some reactive throwing some

440
00:26:44,820 --> 00:26:46,950
morning here that says that attempt to

441
00:26:46,950 --> 00:26:49,169
reuse markup in container but Jackson

442
00:26:49,169 --> 00:26:51,299
was invalid this generally means blah

443
00:26:51,299 --> 00:26:53,580
blah blah that you know your server side

444
00:26:53,580 --> 00:26:57,120
render is kind of useless so you have to

445
00:26:57,120 --> 00:27:00,539
make sure that your DOM is same what's

446
00:27:00,539 --> 00:27:03,510
on your markup is same that you throw

447
00:27:03,510 --> 00:27:05,039
from server and then you mount it on the

448
00:27:05,039 --> 00:27:09,720
client all right so that was just a

449
00:27:09,720 --> 00:27:14,269
basic you know basic isomorphic app

450
00:27:14,269 --> 00:27:18,389
universal app sorry let's skip this

451
00:27:18,389 --> 00:27:22,950
since we build this already and yep done

452
00:27:22,950 --> 00:27:25,559
but was it was it so simple like I mean

453
00:27:25,559 --> 00:27:28,710
is that it not really actually this is

454
00:27:28,710 --> 00:27:32,870
this is very basic stuff and building a

455
00:27:32,870 --> 00:27:35,070
universal JavaScript application using

456
00:27:35,070 --> 00:27:38,279
react node and tools like flux redux is

457
00:27:38,279 --> 00:27:40,950
a bit more complicated because of

458
00:27:40,950 --> 00:27:44,039
several things so let's let's talk a

459
00:27:44,039 --> 00:27:47,549
little bit more about that so tricky

460
00:27:47,549 --> 00:27:50,100
parts let's look at a more complex

461
00:27:50,100 --> 00:27:52,769
application so I'll just close this one

462
00:27:52,769 --> 00:27:54,120
and we will just have a look at this one

463
00:27:54,120 --> 00:27:56,190
so this is something that I build over

464
00:27:56,190 --> 00:27:58,529
the weekend and like what it uses is the

465
00:27:58,529 --> 00:28:05,120
users Redux as a as a state Redux is a

466
00:28:05,120 --> 00:28:07,500
predictable state library what it does

467
00:28:07,500 --> 00:28:09,720
is like it you can create reducers and

468
00:28:09,720 --> 00:28:11,610
then it will create a store object for

469
00:28:11,610 --> 00:28:12,990
you which you can use in your

470
00:28:12,990 --> 00:28:15,059
application and maintain a state across

471
00:28:15,059 --> 00:28:18,809
the application so similar to flux not

472
00:28:18,809 --> 00:28:21,299
not really same as flux but I wouldn't

473
00:28:21,299 --> 00:28:24,299
go more in detail there so what what are

474
00:28:24,299 --> 00:28:29,750
we doing here is now I have this here

475
00:28:29,750 --> 00:28:33,120
sorry this is

476
00:28:33,120 --> 00:28:35,500
yeah sorry this is the application all

477
00:28:35,500 --> 00:28:37,780
right so what I do is if I search for

478
00:28:37,780 --> 00:28:44,860
bread should get a bread yeah internet

479
00:28:44,860 --> 00:28:48,130
is slow here think so so yeah I made a

480
00:28:48,130 --> 00:28:51,220
real API call to red mud API and then it

481
00:28:51,220 --> 00:28:54,370
give me bread and now if like more

482
00:28:54,370 --> 00:28:56,169
complex example would be disliked right

483
00:28:56,169 --> 00:28:58,450
so people might directly go to this

484
00:28:58,450 --> 00:29:00,400
bread page instead of going to a home

485
00:29:00,400 --> 00:29:02,559
page and you know so if I just directly

486
00:29:02,559 --> 00:29:08,440
go to bread what I see is yeah

487
00:29:08,440 --> 00:29:11,770
everything is in here rendered on the

488
00:29:11,770 --> 00:29:15,340
server side there is no ajax call that

489
00:29:15,340 --> 00:29:17,919
was made and also you will see something

490
00:29:17,919 --> 00:29:21,070
here so this is the state that was

491
00:29:21,070 --> 00:29:22,630
passed from server to the client side

492
00:29:22,630 --> 00:29:25,890
and what happened here is that I

493
00:29:25,890 --> 00:29:27,760
something was done on the server side

494
00:29:27,760 --> 00:29:30,010
like there was like we felt that data we

495
00:29:30,010 --> 00:29:32,830
package it together and then we

496
00:29:32,830 --> 00:29:35,590
dehydrated this stuff into this initial

497
00:29:35,590 --> 00:29:38,110
state and then on the app on the client

498
00:29:38,110 --> 00:29:41,559
side we hydrated it and started like app

499
00:29:41,559 --> 00:29:43,179
will continue to work exactly the way

500
00:29:43,179 --> 00:29:44,860
it's supposed to work so let's say if I

501
00:29:44,860 --> 00:29:48,970
fetch milk now I will get a JAX call

502
00:29:48,970 --> 00:29:51,909
that will get me a milk and yet caught

503
00:29:51,909 --> 00:30:02,210
me some milk yep and yeah I mean yeah so

504
00:30:02,220 --> 00:30:07,000
all right okay so so that is more close

505
00:30:07,000 --> 00:30:11,260
to some real application and so what are

506
00:30:11,260 --> 00:30:17,860
the tricky parts here so what one of the

507
00:30:17,860 --> 00:30:20,140
thing is that when you have a complex

508
00:30:20,140 --> 00:30:24,100
application that is making several which

509
00:30:24,100 --> 00:30:25,510
has several components that are making a

510
00:30:25,510 --> 00:30:28,150
JAX calls and they have their state

511
00:30:28,150 --> 00:30:32,200
maintained in the application you want

512
00:30:32,200 --> 00:30:35,140
to somehow get that stuff and push it to

513
00:30:35,140 --> 00:30:36,669
client so that you can continue from

514
00:30:36,669 --> 00:30:40,570
there so that's where actually things

515
00:30:40,570 --> 00:30:43,830
started to get messy so in this case

516
00:30:43,830 --> 00:30:46,320
I'm just showing a very quick example of

517
00:30:46,320 --> 00:30:48,059
redox you guys can have a look at it

518
00:30:48,059 --> 00:30:50,850
later in more in detail I'll share the

519
00:30:50,850 --> 00:30:53,460
code as well so what's happening here is

520
00:30:53,460 --> 00:30:55,049
that I'm just creating a store on the

521
00:30:55,049 --> 00:30:57,690
server side using all my reducers so

522
00:30:57,690 --> 00:31:02,519
things like my I mean in this case it's

523
00:31:02,519 --> 00:31:05,820
just a search reducer that actually gets

524
00:31:05,820 --> 00:31:07,350
the data and then you know like

525
00:31:07,350 --> 00:31:10,440
generates that reducer object and then

526
00:31:10,440 --> 00:31:12,779
i'll just create a store or using that

527
00:31:12,779 --> 00:31:15,720
and then i will dehydrate for the client

528
00:31:15,720 --> 00:31:17,850
by just getting the state from that

529
00:31:17,850 --> 00:31:19,889
store and then i will just you realize

530
00:31:19,889 --> 00:31:22,470
stringify it and then you know somewhere

531
00:31:22,470 --> 00:31:24,450
in my HTML and then pass it down to the

532
00:31:24,450 --> 00:31:26,100
client and on the client side what i

533
00:31:26,100 --> 00:31:27,269
will do is i will just pretty much

534
00:31:27,269 --> 00:31:29,850
follow the same code that i have in the

535
00:31:29,850 --> 00:31:31,830
server side for initializing a store and

536
00:31:31,830 --> 00:31:34,320
i will just pass an initial state to it

537
00:31:34,320 --> 00:31:35,669
so i will continue from where it left

538
00:31:35,669 --> 00:31:42,029
off yeah so like it'sit's bit more

539
00:31:42,029 --> 00:31:44,100
complex than that but in a nutshell this

540
00:31:44,100 --> 00:31:49,710
is what actually happens another another

541
00:31:49,710 --> 00:31:52,919
tricky part building these kind of

542
00:31:52,919 --> 00:31:54,840
isomorphic app is that like now you have

543
00:31:54,840 --> 00:31:56,190
to deal with things like this you know

544
00:31:56,190 --> 00:31:59,399
like you used to use edge x and make a

545
00:31:59,399 --> 00:32:01,620
edge x request and but now you can't use

546
00:32:01,620 --> 00:32:04,110
that anymore on the server side and you

547
00:32:04,110 --> 00:32:06,870
so so yeah I mean like there are ways to

548
00:32:06,870 --> 00:32:09,690
do it like you can do what I did earlier

549
00:32:09,690 --> 00:32:11,399
like assigned a global you can use that

550
00:32:11,399 --> 00:32:13,529
global for certain specific things but

551
00:32:13,529 --> 00:32:15,750
for such cases it's it's a mess like

552
00:32:15,750 --> 00:32:17,130
just don't use it don't do something

553
00:32:17,130 --> 00:32:19,710
like this the HTTP request is a is a

554
00:32:19,710 --> 00:32:22,320
node module and then it's HTTP is node

555
00:32:22,320 --> 00:32:24,510
module that is making a request and then

556
00:32:24,510 --> 00:32:26,250
if it's not a server on a client said

557
00:32:26,250 --> 00:32:27,450
what i'm doing is i'm making edge x

558
00:32:27,450 --> 00:32:29,610
request so this is a bad way to share

559
00:32:29,610 --> 00:32:31,529
code I like in some cases you have to do

560
00:32:31,529 --> 00:32:34,320
it but better approaches look for I so

561
00:32:34,320 --> 00:32:37,080
like universal or isomorphic modules

562
00:32:37,080 --> 00:32:38,909
that are already there in this case

563
00:32:38,909 --> 00:32:42,510
using isomorphic fetch and it I can use

564
00:32:42,510 --> 00:32:44,100
the same thing I can use this patch I

565
00:32:44,100 --> 00:32:47,700
pie that will be in the browser's soon I

566
00:32:47,700 --> 00:32:49,169
think it's already in some of the

567
00:32:49,169 --> 00:32:52,350
process but I can use that on browser

568
00:32:52,350 --> 00:32:53,909
and the server with the same code I

569
00:32:53,909 --> 00:32:56,860
don't have to change anything

570
00:32:56,870 --> 00:33:00,840
alright so so this this is this is a

571
00:33:00,840 --> 00:33:03,630
hard hard problem and then there are

572
00:33:03,630 --> 00:33:05,430
some frameworks out there actually who

573
00:33:05,430 --> 00:33:09,240
solves it like I think ljs and a couple

574
00:33:09,240 --> 00:33:11,940
of others they they have they have stuff

575
00:33:11,940 --> 00:33:13,500
that actually does this data fetch

576
00:33:13,500 --> 00:33:16,860
fetching part but in our case let's say

577
00:33:16,860 --> 00:33:22,980
in this application it's very let's let

578
00:33:22,980 --> 00:33:24,840
me just open that application and just

579
00:33:24,840 --> 00:33:29,070
show you guys all right can just roll

580
00:33:29,070 --> 00:33:31,320
yeah I can just show it for me so what's

581
00:33:31,320 --> 00:33:34,200
happening is I'm in my server i'm doing

582
00:33:34,200 --> 00:33:36,030
i'm running this fetch search term

583
00:33:36,030 --> 00:33:39,690
result when i go to hello it is passed

584
00:33:39,690 --> 00:33:43,790
to this and then i will try to make a

585
00:33:43,790 --> 00:33:47,130
HTTP call on server etc it will build a

586
00:33:47,130 --> 00:33:49,200
new state for the application then it

587
00:33:49,200 --> 00:33:52,470
will pass it down to the client so this

588
00:33:52,470 --> 00:33:53,910
is this is very simple like because in

589
00:33:53,910 --> 00:33:55,530
this case I just have I'm just doing one

590
00:33:55,530 --> 00:33:57,270
thing like I'm just building a Search

591
00:33:57,270 --> 00:33:59,040
application that's it there's nothing

592
00:33:59,040 --> 00:34:00,930
more to it but let's say if you are

593
00:34:00,930 --> 00:34:02,580
looking at something like this our red

594
00:34:02,580 --> 00:34:05,040
mod mobile website so if I want to load

595
00:34:05,040 --> 00:34:07,170
everything there's like at least four to

596
00:34:07,170 --> 00:34:10,800
five API calls that are made then I have

597
00:34:10,800 --> 00:34:13,500
to think of a different approach so in

598
00:34:13,500 --> 00:34:16,320
this case what happens is that they are

599
00:34:16,320 --> 00:34:18,870
very there several ways to do it one of

600
00:34:18,870 --> 00:34:20,820
the ways is that in each of your handler

601
00:34:20,820 --> 00:34:23,010
components like the main components like

602
00:34:23,010 --> 00:34:26,129
app app is a rapper but like beneath a

603
00:34:26,129 --> 00:34:27,540
pew might have landing pages search

604
00:34:27,540 --> 00:34:29,790
pages etc you have to have something

605
00:34:29,790 --> 00:34:33,419
like this static function then what you

606
00:34:33,419 --> 00:34:36,360
can do is actually you can get the list

607
00:34:36,360 --> 00:34:38,179
of all the components on the server side

608
00:34:38,179 --> 00:34:40,590
loop through all of them look for these

609
00:34:40,590 --> 00:34:43,350
functions which are retaining promises

610
00:34:43,350 --> 00:34:45,560
and then you resolve all the promises

611
00:34:45,560 --> 00:34:49,440
build that store using Redux and pass it

612
00:34:49,440 --> 00:34:52,830
back to your application yeah but you

613
00:34:52,830 --> 00:34:54,230
have to write a lot of code for that

614
00:34:54,230 --> 00:34:58,380
unfortunately another another tricky

615
00:34:58,380 --> 00:35:00,780
part is indira data fetching is that you

616
00:35:00,780 --> 00:35:03,030
want to prefetch some of the stuff like

617
00:35:03,030 --> 00:35:05,610
that navigation and that categories at

618
00:35:05,610 --> 00:35:08,190
the top but data for that but like maybe

619
00:35:08,190 --> 00:35:10,080
this product list you don't

620
00:35:10,080 --> 00:35:12,390
want to prefetch you want to fetch it

621
00:35:12,390 --> 00:35:13,860
online you you want to show a spinner

622
00:35:13,860 --> 00:35:16,710
for whatever reason for now you can

623
00:35:16,710 --> 00:35:18,300
immediately do it I think using

624
00:35:18,300 --> 00:35:20,640
component DeadMau mount and it shouldn't

625
00:35:20,640 --> 00:35:23,370
cause much of a problem there but I like

626
00:35:23,370 --> 00:35:26,010
there yeah I mean then then what happens

627
00:35:26,010 --> 00:35:30,530
is that you will have to define to

628
00:35:30,530 --> 00:35:33,300
dispatch functions one in component in

629
00:35:33,300 --> 00:35:34,440
mount which will fetch something like

630
00:35:34,440 --> 00:35:36,360
this which is okay shouldn't be a

631
00:35:36,360 --> 00:35:39,030
problem but it's not a really really

632
00:35:39,030 --> 00:35:40,980
good way there are some libraries that

633
00:35:40,980 --> 00:35:44,730
help you do that like react Thatcher is

634
00:35:44,730 --> 00:35:47,490
one library and then with help of some

635
00:35:47,490 --> 00:35:48,720
promise middle where you can actually

636
00:35:48,720 --> 00:35:52,200
pass things up and do something like

637
00:35:52,200 --> 00:35:54,870
that yeah but some this is something I'm

638
00:35:54,870 --> 00:35:56,760
still researching I've like we've done

639
00:35:56,760 --> 00:35:58,800
something like this but I haven't done

640
00:35:58,800 --> 00:36:02,490
that like probably this new stuff yeah

641
00:36:02,490 --> 00:36:05,910
so that's yeah that's pretty much it and

642
00:36:05,910 --> 00:36:07,770
the application that you guys just saw

643
00:36:07,770 --> 00:36:10,560
this one it's using Redux and couple of

644
00:36:10,560 --> 00:36:14,520
other stuff and it's it's hosted on our

645
00:36:14,520 --> 00:36:20,850
github so feel free to feel free to look

646
00:36:20,850 --> 00:36:23,430
at it and give feedback it'sit's not a

647
00:36:23,430 --> 00:36:25,140
really beautiful code but like yeah I'm

648
00:36:25,140 --> 00:36:26,760
just in case if you guys want to have a

649
00:36:26,760 --> 00:36:29,280
look so yeah it's out here there's no

650
00:36:29,280 --> 00:36:35,970
read me yeah alright just alright so

651
00:36:35,970 --> 00:36:38,940
that's pretty much it and these this is

652
00:36:38,940 --> 00:36:40,590
the resources this is what I've been

653
00:36:40,590 --> 00:36:42,420
through and I think if you guys have a

654
00:36:42,420 --> 00:36:44,100
look at it there's tons of universal

655
00:36:44,100 --> 00:36:46,530
application related content out there

656
00:36:46,530 --> 00:36:52,200
here yep hi thank you so much hi um so

657
00:36:52,200 --> 00:36:55,500
question red mark doesn't use react

658
00:36:55,500 --> 00:36:58,710
right now or just type of universal app

659
00:36:58,710 --> 00:37:03,750
it does actually so our our main website

660
00:37:03,750 --> 00:37:07,080
of the one that you see on red marcom

661
00:37:07,080 --> 00:37:09,570
actually uses react all the way but we

662
00:37:09,570 --> 00:37:11,640
are stuck with backbone and it's like a

663
00:37:11,640 --> 00:37:13,320
really complex application we are trying

664
00:37:13,320 --> 00:37:15,870
to move away from it so what I did is

665
00:37:15,870 --> 00:37:18,330
like I talked to pm's and got like one

666
00:37:18,330 --> 00:37:19,950
month of time and we build a mobile

667
00:37:19,950 --> 00:37:21,250
website using redux

668
00:37:21,250 --> 00:37:23,440
all that stuff so that we can show it to

669
00:37:23,440 --> 00:37:24,940
them how it looks like and you know it's

670
00:37:24,940 --> 00:37:28,000
more easy to build stuff so yeah yep so

671
00:37:28,000 --> 00:37:30,490
we are going to move to this whatever I

672
00:37:30,490 --> 00:37:33,310
showed for the main website as well yep

673
00:37:33,310 --> 00:37:35,290
you can access red mark from mobile

674
00:37:35,290 --> 00:37:37,750
phone and it will give you the mobile

675
00:37:37,750 --> 00:37:40,480
website okay thank you we have done with

676
00:37:40,480 --> 00:37:43,660
the same methodology i mislike you how

677
00:37:43,660 --> 00:37:46,900
you deal with the the cookies coyote

678
00:37:46,900 --> 00:37:50,110
cookies tub because a cookie or disable

679
00:37:50,110 --> 00:37:54,260
site and calcite or totally different

680
00:37:54,270 --> 00:37:56,470
yeah that's a good question actually I

681
00:37:56,470 --> 00:37:59,770
run into that issue we share a user your

682
00:37:59,770 --> 00:38:02,910
your session token for a logged-in user

683
00:38:02,910 --> 00:38:05,320
between both the applications and

684
00:38:05,320 --> 00:38:07,420
apparently for this case I had to do

685
00:38:07,420 --> 00:38:09,580
that thing you know if server do this if

686
00:38:09,580 --> 00:38:13,120
client then do that I I think I like I'm

687
00:38:13,120 --> 00:38:14,800
looking for a module that can help me do

688
00:38:14,800 --> 00:38:16,780
that effectively on client side we are

689
00:38:16,780 --> 00:38:19,960
using Jas cookie module but that doesn't

690
00:38:19,960 --> 00:38:23,350
work well on server side and actually

691
00:38:23,350 --> 00:38:25,270
doesn't work at all i think i don't know

692
00:38:25,270 --> 00:38:27,730
i haven't dig more into that so we are

693
00:38:27,730 --> 00:38:30,190
just using Express cookie on server side

694
00:38:30,190 --> 00:38:34,540
for now yep

