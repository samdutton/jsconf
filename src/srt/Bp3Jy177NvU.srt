1
00:00:37,500 --> 00:00:40,180

my name is Marco Rogers I work for

2
00:00:40,180 --> 00:00:43,330
Yammer and this talk is about as he said

3
00:00:43,330 --> 00:00:45,190
finding patterns in front-end JavaScript

4
00:00:45,190 --> 00:00:49,270
development so we spend a lot of time

5
00:00:49,270 --> 00:00:50,710
talking about JavaScript libraries and

6
00:00:50,710 --> 00:00:53,040
frameworks you know which one to choose

7
00:00:53,040 --> 00:00:55,450
when to use them when to write your own

8
00:00:55,450 --> 00:00:58,020
which is hopefully never but

9
00:00:58,020 --> 00:01:00,220
unfortunately I'm not actually going to

10
00:01:00,220 --> 00:01:01,420
give you answers to any of those

11
00:01:01,420 --> 00:01:03,910
questions today what I actually can do

12
00:01:03,910 --> 00:01:05,379
is give you a peek into the way I think

13
00:01:05,379 --> 00:01:06,670
about front-end development today

14
00:01:06,670 --> 00:01:08,469
because there was a point where I

15
00:01:08,469 --> 00:01:10,659
realized that there are lots of shared

16
00:01:10,659 --> 00:01:12,670
patterns and if we if we look at those

17
00:01:12,670 --> 00:01:14,799
shared patterns it'll give us better

18
00:01:14,799 --> 00:01:17,469
insights into the landscape of how we

19
00:01:17,469 --> 00:01:21,280
build things today so see we can move

20
00:01:21,280 --> 00:01:23,200
forward a while back I wrote this on

21
00:01:23,200 --> 00:01:27,249
Twitter tweet sometimes and the question

22
00:01:27,249 --> 00:01:29,170
that I got back most I had some people

23
00:01:29,170 --> 00:01:30,280
agree but the question that got back

24
00:01:30,280 --> 00:01:31,600
most was what are the patterns that you

25
00:01:31,600 --> 00:01:32,770
see like people wanted to kind of

26
00:01:32,770 --> 00:01:34,740
discuss this which I thought was great

27
00:01:34,740 --> 00:01:37,810
so my goal with this talk is to provide

28
00:01:37,810 --> 00:01:40,359
sort of a mental model for pulling out

29
00:01:40,359 --> 00:01:42,399
these patterns being able to identify

30
00:01:42,399 --> 00:01:45,009
the core concepts and being able to to

31
00:01:45,009 --> 00:01:47,350
kind of discuss them across different

32
00:01:47,350 --> 00:01:49,179
libraries and frameworks this is gonna

33
00:01:49,179 --> 00:01:51,340
be an incomplete list because the stuff

34
00:01:51,340 --> 00:01:53,109
is still evolving and and because I'm I

35
00:01:53,109 --> 00:01:56,200
don't know everything unfortunately but

36
00:01:56,200 --> 00:01:58,990
I think the best outcome for me is when

37
00:01:58,990 --> 00:02:00,310
I get done with this that you're like

38
00:02:00,310 --> 00:02:01,869
super annoyed that I didn't get to go

39
00:02:01,869 --> 00:02:04,090
further into it and that you want to

40
00:02:04,090 --> 00:02:06,069
continue the conversation because I

41
00:02:06,069 --> 00:02:10,450
think that that we need to so let's

42
00:02:10,450 --> 00:02:12,130
let's kind of talk about the three main

43
00:02:12,130 --> 00:02:15,190
buckets that I put these into the first

44
00:02:15,190 --> 00:02:18,220
is common patterns right so this is

45
00:02:18,220 --> 00:02:19,510
these are kind of the core patterns that

46
00:02:19,510 --> 00:02:22,690
people or at least in my mind the core

47
00:02:22,690 --> 00:02:23,800
patterns that people are referring to

48
00:02:23,800 --> 00:02:27,340
when they say NBC or MV star is kind of

49
00:02:27,340 --> 00:02:29,140
thing right so we're gonna take a look

50
00:02:29,140 --> 00:02:32,800
at one of those and it's gonna be kind

51
00:02:32,800 --> 00:02:35,050
of a baseline for how what I mean by via

52
00:02:35,050 --> 00:02:36,220
these are these are shared patterns

53
00:02:36,220 --> 00:02:39,490
across frameworks I'm gonna dig into the

54
00:02:39,490 --> 00:02:41,410
advanced some of the more advanced

55
00:02:41,410 --> 00:02:43,900
abstractions on top of the MVC ish thing

56
00:02:43,900 --> 00:02:45,700
this what I think will be interesting

57
00:02:45,700 --> 00:02:47,800
for illustrating what I think a lot of

58
00:02:47,800 --> 00:02:49,630
us are doing today when we're trying to

59
00:02:49,630 --> 00:02:51,130
build complex web apps whether we're

60
00:02:51,130 --> 00:02:54,160
using a cohesive framework like like

61
00:02:54,160 --> 00:02:56,560
ember angular or whether we're using our

62
00:02:56,560 --> 00:02:58,990
kind of custom-built thing that is about

63
00:02:58,990 --> 00:03:00,550
five years old and which nobody really

64
00:03:00,550 --> 00:03:02,770
wants to use anymore and yet it's still

65
00:03:02,770 --> 00:03:05,140
kind of hanging around I think you see

66
00:03:05,140 --> 00:03:06,250
the same patterns across all these

67
00:03:06,250 --> 00:03:08,230
things right and then finally we'll look

68
00:03:08,230 --> 00:03:09,910
at some emerging patterns these are ones

69
00:03:09,910 --> 00:03:12,030
that are less common but I think are

70
00:03:12,030 --> 00:03:14,320
coming up more and more frequently as we

71
00:03:14,320 --> 00:03:16,840
try to build apps with with more

72
00:03:16,840 --> 00:03:20,500
sophisticated capabilities so let's kind

73
00:03:20,500 --> 00:03:22,560
of jump right in so two common patterns

74
00:03:22,560 --> 00:03:25,209
and they they look like this right so

75
00:03:25,209 --> 00:03:28,750
models views I want to be pretty obvious

76
00:03:28,750 --> 00:03:30,160
I hopefully should be pretty obvious to

77
00:03:30,160 --> 00:03:33,130
the folks in this room controllers the

78
00:03:33,130 --> 00:03:35,230
sea is always kind of nebulous but I

79
00:03:35,230 --> 00:03:36,820
think routers and controllers are kind

80
00:03:36,820 --> 00:03:38,860
of kind of come with that and routing is

81
00:03:38,860 --> 00:03:40,450
probably the more important feature for

82
00:03:40,450 --> 00:03:41,860
building single page applications right

83
00:03:41,860 --> 00:03:43,860
being able to route to a particular view

84
00:03:43,860 --> 00:03:47,140
and then like restful api access because

85
00:03:47,140 --> 00:03:48,430
obviously you need to get some some data

86
00:03:48,430 --> 00:03:51,519
and shove it shove it into your UI I

87
00:03:51,519 --> 00:03:53,260
think these should be pretty familiar to

88
00:03:53,260 --> 00:03:55,090
people we're gonna jump into one of them

89
00:03:55,090 --> 00:03:56,590
so I can kind of illustrate what I'm

90
00:03:56,590 --> 00:03:58,720
talking about so let's talk about models

91
00:03:58,720 --> 00:04:00,060
right this will be a rehash for folks

92
00:04:00,060 --> 00:04:02,250
and it comes with these capabilities

93
00:04:02,250 --> 00:04:05,380
generally at least this is my contention

94
00:04:05,380 --> 00:04:06,730
this is how I kind of outlined this

95
00:04:06,730 --> 00:04:09,220
pattern in my head you get some objects

96
00:04:09,220 --> 00:04:12,340
that represent your data model right you

97
00:04:12,340 --> 00:04:14,380
can expect the properties on that object

98
00:04:14,380 --> 00:04:16,840
you can read and write them usually you

99
00:04:16,840 --> 00:04:18,160
can persist data to the server because

100
00:04:18,160 --> 00:04:21,130
because that's handy sometimes and then

101
00:04:21,130 --> 00:04:23,440
the most important part that I think

102
00:04:23,440 --> 00:04:25,210
makes this into a pattern and not just

103
00:04:25,210 --> 00:04:26,200
kind of the thing that we do with

104
00:04:26,200 --> 00:04:28,540
JavaScript all the time is that

105
00:04:28,540 --> 00:04:31,480
this model layer is going to fire change

106
00:04:31,480 --> 00:04:33,130
events it's going to tell you when these

107
00:04:33,130 --> 00:04:35,050
models have changed allow you to

108
00:04:35,050 --> 00:04:36,280
register a callback so that you can

109
00:04:36,280 --> 00:04:38,380
respond right and that allows us to take

110
00:04:38,380 --> 00:04:40,750
this model layer decouple it from the

111
00:04:40,750 --> 00:04:42,220
other parts of our app whether it be our

112
00:04:42,220 --> 00:04:45,220
our views templates what-have-you but

113
00:04:45,220 --> 00:04:46,780
still be able to make it do do

114
00:04:46,780 --> 00:04:49,960
interesting things right so does it make

115
00:04:49,960 --> 00:04:51,730
sense to people it's not making sense

116
00:04:51,730 --> 00:04:56,130
rehash Thanks that's probably good so

117
00:04:56,130 --> 00:04:58,300
let's take a look at how backbone does

118
00:04:58,300 --> 00:04:59,800
this backbone should be familiar to most

119
00:04:59,800 --> 00:05:01,630
people this looks pretty straightforward

120
00:05:01,630 --> 00:05:03,250
you create a new backbone model right

121
00:05:03,250 --> 00:05:06,040
give it some data ID this latest reply

122
00:05:06,040 --> 00:05:08,200
ad which is kind of a date string you

123
00:05:08,200 --> 00:05:10,360
can inspect these properties by pulling

124
00:05:10,360 --> 00:05:12,580
out the ID and comparing it to some

125
00:05:12,580 --> 00:05:15,130
other things in anger our backbone wants

126
00:05:15,130 --> 00:05:17,560
you to use a getter for this and then

127
00:05:17,560 --> 00:05:19,540
you can register a callback right and in

128
00:05:19,540 --> 00:05:21,520
backbone it looks like this it uses this

129
00:05:21,520 --> 00:05:23,620
nice kind of event listener pattern that

130
00:05:23,620 --> 00:05:26,400
was popularized by by jQuery and nodejs

131
00:05:26,400 --> 00:05:30,640
depending on who you talk to and so when

132
00:05:30,640 --> 00:05:33,160
latest reply at gets updated this

133
00:05:33,160 --> 00:05:34,990
callbacks gonna fire and we can we can

134
00:05:34,990 --> 00:05:37,690
do things and then finally we can we can

135
00:05:37,690 --> 00:05:39,760
update this model by calling this setter

136
00:05:39,760 --> 00:05:42,730
and when we do that then our callback

137
00:05:42,730 --> 00:05:45,010
send a fire just this isn't a surprise

138
00:05:45,010 --> 00:05:46,960
to anybody right this is kind of what we

139
00:05:46,960 --> 00:05:48,490
do is it's kind of the core of backbone

140
00:05:48,490 --> 00:05:52,000
models but let's kind of compare it to

141
00:05:52,000 --> 00:05:55,030
what I work with everyday which is you

142
00:05:55,030 --> 00:05:56,620
know the the internal framework that

143
00:05:56,620 --> 00:05:59,560
Yammer uses which we call y MJS or

144
00:05:59,560 --> 00:06:02,230
sometimes affectionately yam juice and

145
00:06:02,230 --> 00:06:06,030
it looks like this I mean let me go back

146
00:06:06,030 --> 00:06:10,510
here's backbone our framework looks like

147
00:06:10,510 --> 00:06:13,000
this that slide did change they're very

148
00:06:13,000 --> 00:06:14,980
similar but it did change and you can

149
00:06:14,980 --> 00:06:16,660
kind of see that it's actually doing

150
00:06:16,660 --> 00:06:18,490
exactly the exact same thing we're

151
00:06:18,490 --> 00:06:20,380
creating an instance of this destroyed

152
00:06:20,380 --> 00:06:22,780
model given it some data we can read the

153
00:06:22,780 --> 00:06:25,120
data directly from the property without

154
00:06:25,120 --> 00:06:27,250
using a getter because that's how our

155
00:06:27,250 --> 00:06:28,930
framework works but it amounts to the

156
00:06:28,930 --> 00:06:30,430
same thing then you got this

157
00:06:30,430 --> 00:06:31,180
funky-looking

158
00:06:31,180 --> 00:06:34,420
hook thing where we're asking when this

159
00:06:34,420 --> 00:06:36,520
thread has an update register a listener

160
00:06:36,520 --> 00:06:38,590
right it's not as nice as the the event

161
00:06:38,590 --> 00:06:40,120
listener pattern that we we all know and

162
00:06:40,120 --> 00:06:42,390
love but it's essentially doing the same

163
00:06:42,390 --> 00:06:44,760
it's allowing us to listen for changes

164
00:06:44,760 --> 00:06:48,270
and then we want to want to change this

165
00:06:48,270 --> 00:06:50,580
data we have to go through this setter

166
00:06:50,580 --> 00:06:52,650
method called update and instead of

167
00:06:52,650 --> 00:06:54,690
changing one property we changed

168
00:06:54,690 --> 00:06:57,540
multiple at a time by passing a hash and

169
00:06:57,540 --> 00:06:59,520
we need to use this setter so that we

170
00:06:59,520 --> 00:07:02,490
can get our RF in hooks five time I'll

171
00:07:02,490 --> 00:07:04,350
tell you a story about that what happens

172
00:07:04,350 --> 00:07:08,790
when you don't use it so this when I

173
00:07:08,790 --> 00:07:10,140
recognize that this looks pretty similar

174
00:07:10,140 --> 00:07:12,150
to the other frameworks that I was I was

175
00:07:12,150 --> 00:07:14,250
seeing this is when this idea of pattern

176
00:07:14,250 --> 00:07:16,320
started to develop in my head because

177
00:07:16,320 --> 00:07:17,730
anything that you can do with this this

178
00:07:17,730 --> 00:07:19,770
core concept and backbone you should be

179
00:07:19,770 --> 00:07:21,300
able to do with our framework and you

180
00:07:21,300 --> 00:07:22,710
should be able to do with other

181
00:07:22,710 --> 00:07:24,030
frameworks that say they have a model

182
00:07:24,030 --> 00:07:26,880
layer for you right but it doesn't

183
00:07:26,880 --> 00:07:29,220
always look this similar and so I wanted

184
00:07:29,220 --> 00:07:32,130
to pull up a different example that

185
00:07:32,130 --> 00:07:34,590
looked looked a little bit different so

186
00:07:34,590 --> 00:07:37,230
his angular write angular looks

187
00:07:37,230 --> 00:07:38,850
different and depending on how you talk

188
00:07:38,850 --> 00:07:40,770
to you it's like interesting different

189
00:07:40,770 --> 00:07:43,320
or like annoying different but it's

190
00:07:43,320 --> 00:07:46,380
different but the outcome is actually

191
00:07:46,380 --> 00:07:47,670
not that different right it's doing the

192
00:07:47,670 --> 00:07:49,710
exact same things instead of having this

193
00:07:49,710 --> 00:07:51,150
object that you create you just use

194
00:07:51,150 --> 00:07:52,860
plain JavaScript objects and you shove

195
00:07:52,860 --> 00:07:54,780
them on to this special scope object

196
00:07:54,780 --> 00:07:57,150
that angular gives you but then you can

197
00:07:57,150 --> 00:07:59,610
read properties off of that thing and

198
00:07:59,610 --> 00:08:01,080
you can set properties on that thing you

199
00:08:01,080 --> 00:08:02,790
can see at the bottom there and you set

200
00:08:02,790 --> 00:08:04,500
them directly just by updating

201
00:08:04,500 --> 00:08:05,820
properties like you do on JavaScript

202
00:08:05,820 --> 00:08:08,850
objects but when it comes to that that

203
00:08:08,850 --> 00:08:10,530
last that last thing that I said was

204
00:08:10,530 --> 00:08:11,940
really important I'm listening for

205
00:08:11,940 --> 00:08:13,920
changes angular wants you to do that a

206
00:08:13,920 --> 00:08:15,690
little bit different when you shove it

207
00:08:15,690 --> 00:08:17,670
when you shove your model objects onto

208
00:08:17,670 --> 00:08:19,890
this scope you can take advantage of

209
00:08:19,890 --> 00:08:21,660
this watch function that they give you

210
00:08:21,660 --> 00:08:23,100
which says anything that's attached to

211
00:08:23,100 --> 00:08:25,200
this scope where we're constantly

212
00:08:25,200 --> 00:08:27,330
checking for changes and you can

213
00:08:27,330 --> 00:08:30,570
register for those updates by by giving

214
00:08:30,570 --> 00:08:32,250
us this expression right so I'm

215
00:08:32,250 --> 00:08:34,650
registering this watch expression for

216
00:08:34,650 --> 00:08:36,840
latest reply ad and it's gonna do the

217
00:08:36,840 --> 00:08:38,160
exact same thing as these other slides

218
00:08:38,160 --> 00:08:43,220
right I when I first looked angular I

219
00:08:43,220 --> 00:08:45,840
thought it was kind of crazy town and

220
00:08:45,840 --> 00:08:48,660
then as I started to develop this

221
00:08:48,660 --> 00:08:50,730
pattern or what a model layer was and I

222
00:08:50,730 --> 00:08:52,260
went back to angular and I said how does

223
00:08:52,260 --> 00:08:54,870
angular let me do this stuff that I know

224
00:08:54,870 --> 00:08:56,370
that I should be able to do

225
00:08:56,370 --> 00:08:58,080
then it started to make sense because

226
00:08:58,080 --> 00:08:59,580
I've started to know what I was looking

227
00:08:59,580 --> 00:09:02,310
for in terms of you know finding these

228
00:09:02,310 --> 00:09:05,100
capabilities and so this example started

229
00:09:05,100 --> 00:09:06,570
to look a lot like the other examples

230
00:09:06,570 --> 00:09:09,060
which is good for me because I need

231
00:09:09,060 --> 00:09:10,140
things that look similar I'm not that

232
00:09:10,140 --> 00:09:10,560
smart

233
00:09:10,560 --> 00:09:13,890
so so now I can kind of do the things

234
00:09:13,890 --> 00:09:15,000
that I know how to do with model layers

235
00:09:15,000 --> 00:09:18,330
in my framework and in backbone and now

236
00:09:18,330 --> 00:09:20,100
an angular to it to a certain degree and

237
00:09:20,100 --> 00:09:22,560
and each of these has has you know

238
00:09:22,560 --> 00:09:24,300
further capabilities that they want to

239
00:09:24,300 --> 00:09:26,400
use to distinguish themselves and some

240
00:09:26,400 --> 00:09:28,140
of them are really useful but at the

241
00:09:28,140 --> 00:09:29,370
core these are the these are the

242
00:09:29,370 --> 00:09:30,270
capabilities that you should be looking

243
00:09:30,270 --> 00:09:33,420
for because if we go back to what I

244
00:09:33,420 --> 00:09:35,580
outlined is my understanding of a model

245
00:09:35,580 --> 00:09:37,170
pattern it's just these four things

246
00:09:37,170 --> 00:09:38,520
these are the things that I'm trying to

247
00:09:38,520 --> 00:09:40,920
do when you tell me that you have models

248
00:09:40,920 --> 00:09:43,470
right and I can do that in any framework

249
00:09:43,470 --> 00:09:45,570
did I pick up today and if I can't then

250
00:09:45,570 --> 00:09:47,339
that that's gonna be an indication that

251
00:09:47,339 --> 00:09:50,100
maybe it's not for me right if we know

252
00:09:50,100 --> 00:09:51,589
these core concepts you can start to

253
00:09:51,589 --> 00:09:54,029
have a better basis for evaluating these

254
00:09:54,029 --> 00:09:58,440
frameworks this is Megan sense so far

255
00:09:58,440 --> 00:10:01,500
cool so let's kind of jump into advanced

256
00:10:01,500 --> 00:10:03,480
patterns obviously won't be able to hit

257
00:10:03,480 --> 00:10:04,980
everything today but I've got kind of an

258
00:10:04,980 --> 00:10:07,500
example for each one of these as apps

259
00:10:07,500 --> 00:10:09,600
get bigger and more complex these core

260
00:10:09,600 --> 00:10:12,990
MVC patterns they start to fall short

261
00:10:12,990 --> 00:10:14,279
right like they're not cutting it as

262
00:10:14,279 --> 00:10:15,600
your app gets bigger as you have to

263
00:10:15,600 --> 00:10:18,720
maintain more complexity you want better

264
00:10:18,720 --> 00:10:20,250
abstractions on top of these core

265
00:10:20,250 --> 00:10:21,990
patterns that allow you to to manage

266
00:10:21,990 --> 00:10:24,779
that complexity and this is where you

267
00:10:24,779 --> 00:10:27,770
get into two advanced patterns right

268
00:10:27,770 --> 00:10:30,029
this is what advanced patterns look like

269
00:10:30,029 --> 00:10:32,520
to me this is I think kind of at the

270
00:10:32,520 --> 00:10:34,800
core of what I look for when somebody

271
00:10:34,800 --> 00:10:36,810
says that they have a new framework that

272
00:10:36,810 --> 00:10:38,970
I should check out right nested views

273
00:10:38,970 --> 00:10:40,680
this is the idea that you're gonna take

274
00:10:40,680 --> 00:10:44,790
what is what the outcome is a big

275
00:10:44,790 --> 00:10:46,620
complex UI and you want to break it down

276
00:10:46,620 --> 00:10:49,110
into something that's more modular and

277
00:10:49,110 --> 00:10:50,970
and still compose together such that you

278
00:10:50,970 --> 00:10:53,100
can kind of treat it as a single entity

279
00:10:53,100 --> 00:10:55,140
and we'll look at that example so you

280
00:10:55,140 --> 00:10:56,400
see what I mean

281
00:10:56,400 --> 00:10:58,500
complex rendering comes into into play

282
00:10:58,500 --> 00:11:00,660
right it's very easy to take your one

283
00:11:00,660 --> 00:11:02,220
model and smash it into this one

284
00:11:02,220 --> 00:11:03,720
template and like if that works out it's

285
00:11:03,720 --> 00:11:04,800
great but sometimes you have to do more

286
00:11:04,800 --> 00:11:06,300
things sometimes you have to maintain

287
00:11:06,300 --> 00:11:08,310
the state of whether this item was

288
00:11:08,310 --> 00:11:09,420
collapsed or closed

289
00:11:09,420 --> 00:11:10,740
and sometimes you have to like format

290
00:11:10,740 --> 00:11:11,970
dates and sometimes just to do this

291
00:11:11,970 --> 00:11:13,680
these other things that eyes aren't just

292
00:11:13,680 --> 00:11:15,360
like kind of a straight mashing of

293
00:11:15,360 --> 00:11:18,020
templates and a framework should

294
00:11:18,020 --> 00:11:21,300
hopefully help you do that stuff model

295
00:11:21,300 --> 00:11:23,190
relationships this is the idea that when

296
00:11:23,190 --> 00:11:25,500
you're when your clients that app

297
00:11:25,500 --> 00:11:28,230
becomes more complex you you want to

298
00:11:28,230 --> 00:11:29,550
take this model layer they're familiar

299
00:11:29,550 --> 00:11:32,790
with and start to have better tools for

300
00:11:32,790 --> 00:11:34,980
representing your entire data domain

301
00:11:34,980 --> 00:11:36,660
right so maybe you have some messages

302
00:11:36,660 --> 00:11:38,130
and you need to know which users sent

303
00:11:38,130 --> 00:11:39,600
them you want to be able to take that

304
00:11:39,600 --> 00:11:41,670
message and say get user and it'll give

305
00:11:41,670 --> 00:11:44,280
you back this this particular user kind

306
00:11:44,280 --> 00:11:46,590
of automatically right so you start

307
00:11:46,590 --> 00:11:48,030
creating these like has many

308
00:11:48,030 --> 00:11:49,290
relationships and these belong to

309
00:11:49,290 --> 00:11:50,790
relationships and essentially kind of

310
00:11:50,790 --> 00:11:52,710
recreating your schema on the client

311
00:11:52,710 --> 00:11:54,270
because it sounds like a like a really

312
00:11:54,270 --> 00:11:56,580
awesome idea and then later you might

313
00:11:56,580 --> 00:11:57,870
regret it but in the meantime you're

314
00:11:57,870 --> 00:12:00,990
like you're like really jamming and and

315
00:12:00,990 --> 00:12:02,520
this is the kind of thing that I

316
00:12:02,520 --> 00:12:05,250
consider a really advanced pattern that

317
00:12:05,250 --> 00:12:06,540
when it's working well it works really

318
00:12:06,540 --> 00:12:07,500
well

319
00:12:07,500 --> 00:12:09,750
local data caching you know this is the

320
00:12:09,750 --> 00:12:11,400
idea that you you've routed to a new

321
00:12:11,400 --> 00:12:14,790
view and maybe it's one that the user

322
00:12:14,790 --> 00:12:16,650
has seen before you've got all the data

323
00:12:16,650 --> 00:12:18,540
for that view nothing has changed but do

324
00:12:18,540 --> 00:12:20,310
you still have to make another Ajax call

325
00:12:20,310 --> 00:12:21,810
just in case right do you know if

326
00:12:21,810 --> 00:12:22,830
something's changed or not

327
00:12:22,830 --> 00:12:25,320
are you caching all that data locally so

328
00:12:25,320 --> 00:12:26,670
that you could just reuse it right and

329
00:12:26,670 --> 00:12:28,650
allows you to do things like like fast

330
00:12:28,650 --> 00:12:31,650
UI switching so local caching and and

331
00:12:31,650 --> 00:12:34,500
two-way binding I think is is on

332
00:12:34,500 --> 00:12:36,960
everybody's minds today and a lot of the

333
00:12:36,960 --> 00:12:39,330
big frameworks are pushing it because it

334
00:12:39,330 --> 00:12:42,570
allows you to make complicated updates

335
00:12:42,570 --> 00:12:44,820
to your UI without writing a bunch of

336
00:12:44,820 --> 00:12:51,120
glue code which is sometimes nice so

337
00:12:51,120 --> 00:12:52,740
let's kind of dig into one of these I

338
00:12:52,740 --> 00:12:55,680
like nested views it's it's the it's the

339
00:12:55,680 --> 00:12:57,690
advanced pattern that I think needs to

340
00:12:57,690 --> 00:12:59,940
go on top of every framework and if I

341
00:12:59,940 --> 00:13:02,820
don't have it I'm really annoyed but

342
00:13:02,820 --> 00:13:04,530
first a quick refresher on what I mean

343
00:13:04,530 --> 00:13:06,000
by the kind of core view pattern it

344
00:13:06,000 --> 00:13:08,010
doesn't do much render some markup to

345
00:13:08,010 --> 00:13:10,380
your Dom right response to user input

346
00:13:10,380 --> 00:13:13,470
from your Dom and subsequently when

347
00:13:13,470 --> 00:13:16,200
things change update your Dom with with

348
00:13:16,200 --> 00:13:18,600
some things right pretty straightforward

349
00:13:18,600 --> 00:13:21,330
I hope this is non-controversial what we

350
00:13:21,330 --> 00:13:23,130
want to do is put a pattern on top

351
00:13:23,130 --> 00:13:25,200
that says we're gonna allow you to take

352
00:13:25,200 --> 00:13:27,210
this core view and compose them together

353
00:13:27,210 --> 00:13:29,810
to create more complex structures right

354
00:13:29,810 --> 00:13:32,460
and the nested view pattern kind of goes

355
00:13:32,460 --> 00:13:32,940
like this

356
00:13:32,940 --> 00:13:35,070
so you can take these views you can

357
00:13:35,070 --> 00:13:36,750
organize them to a parent-child tree

358
00:13:36,750 --> 00:13:38,970
right when you render at the root of

359
00:13:38,970 --> 00:13:41,220
that tree it's gonna recursively render

360
00:13:41,220 --> 00:13:42,570
down all of the children without you

361
00:13:42,570 --> 00:13:44,610
having to do much work rather than you

362
00:13:44,610 --> 00:13:45,780
having to go and touch every part of

363
00:13:45,780 --> 00:13:48,330
this UI and create this object for your

364
00:13:48,330 --> 00:13:49,700
views and passing models and whatever

365
00:13:49,700 --> 00:13:52,560
all that done wants Pyrrha cursing down

366
00:13:52,560 --> 00:13:55,380
the root of this tree and and more

367
00:13:55,380 --> 00:13:58,470
importantly but harder to define this

368
00:13:58,470 --> 00:14:01,050
tree has a shared lifecycle and what I

369
00:14:01,050 --> 00:14:04,230
mean by that is this rendering process

370
00:14:04,230 --> 00:14:05,970
you can reason about you can say when I

371
00:14:05,970 --> 00:14:08,370
call render on a roo this tree either

372
00:14:08,370 --> 00:14:10,320
it's synchronous and when render comes

373
00:14:10,320 --> 00:14:12,930
back all of my children are rendered or

374
00:14:12,930 --> 00:14:14,730
it's asynchronous and it's gonna say

375
00:14:14,730 --> 00:14:16,830
okay I'm gonna return immediately

376
00:14:16,830 --> 00:14:19,050
I'm recursing to this rendering and when

377
00:14:19,050 --> 00:14:20,520
it's done I'm gonna fire an event and I

378
00:14:20,520 --> 00:14:21,870
say you've rendered some things and then

379
00:14:21,870 --> 00:14:23,130
you know what the state of this tree is

380
00:14:23,130 --> 00:14:26,190
right and subsequently when you're done

381
00:14:26,190 --> 00:14:27,330
with this tree you can take that route

382
00:14:27,330 --> 00:14:29,340
and you can call destroy or remove or

383
00:14:29,340 --> 00:14:31,080
dispose or whatever it is you decided to

384
00:14:31,080 --> 00:14:34,260
name it that week and it's going to

385
00:14:34,260 --> 00:14:35,550
recurse and cleanup for you

386
00:14:35,550 --> 00:14:36,780
right it's gonna go through those

387
00:14:36,780 --> 00:14:39,410
children take those objects destroy them

388
00:14:39,410 --> 00:14:41,280
unhook listeners there's all these

389
00:14:41,280 --> 00:14:42,840
implementation details but you want that

390
00:14:42,840 --> 00:14:46,110
thing to be nicely able to be reasoned

391
00:14:46,110 --> 00:14:48,030
about otherwise you're gonna have like

392
00:14:48,030 --> 00:14:50,610
huge memory leaks because you know that

393
00:14:50,610 --> 00:14:52,320
that happens to some people that that I

394
00:14:52,320 --> 00:14:56,940
know who are not me so so you know this

395
00:14:56,940 --> 00:14:58,920
this idea of nested views I think is

396
00:14:58,920 --> 00:15:00,990
really important and I want to jump into

397
00:15:00,990 --> 00:15:04,050
it a little bit so I want to talk about

398
00:15:04,050 --> 00:15:04,890
um juice first

399
00:15:04,890 --> 00:15:07,170
this is actually an illustration of a

400
00:15:07,170 --> 00:15:09,600
Yammer threaded conversation right you

401
00:15:09,600 --> 00:15:11,220
get a you get a list of these in your in

402
00:15:11,220 --> 00:15:13,800
your group feed and so we want to render

403
00:15:13,800 --> 00:15:16,020
this thing but we don't want to do it

404
00:15:16,020 --> 00:15:18,270
all at once in one kind of huge module

405
00:15:18,270 --> 00:15:19,860
we want to break these pieces down into

406
00:15:19,860 --> 00:15:21,120
things that can be kind of reasoned

407
00:15:21,120 --> 00:15:23,430
about independently so we've got the the

408
00:15:23,430 --> 00:15:25,680
the first kind of thread starter message

409
00:15:25,680 --> 00:15:27,090
and it's called out its more prominent

410
00:15:27,090 --> 00:15:28,890
might have little attachments on it and

411
00:15:28,890 --> 00:15:30,510
whatever else and then at the bottom

412
00:15:30,510 --> 00:15:32,070
you've kind of got the list of replies

413
00:15:32,070 --> 00:15:34,170
which are less prominent there's a list

414
00:15:34,170 --> 00:15:35,700
of them you can tell who we replied to

415
00:15:35,700 --> 00:15:36,360
who and

416
00:15:36,360 --> 00:15:37,440
and they've got a different look and

417
00:15:37,440 --> 00:15:41,220
feel and so we end up with three primary

418
00:15:41,220 --> 00:15:42,810
views - in order to render this we've

419
00:15:42,810 --> 00:15:45,029
got our kind of high-level thread list

420
00:15:45,029 --> 00:15:46,980
item we've got a thread starter that

421
00:15:46,980 --> 00:15:49,200
encapsulate the starter message and then

422
00:15:49,200 --> 00:15:51,839
we've got multiple message message list

423
00:15:51,839 --> 00:15:54,720
items for our replies and we want to be

424
00:15:54,720 --> 00:15:55,920
able to handle this in a way that's nice

425
00:15:55,920 --> 00:15:58,920
so this is what it looks like in yam

426
00:15:58,920 --> 00:16:02,399
juice it's not that nice but it's been

427
00:16:02,399 --> 00:16:03,810
working out for us right so you create

428
00:16:03,810 --> 00:16:06,959
this thread list item ask me later while

429
00:16:06,959 --> 00:16:08,640
that's called a backbone component we're

430
00:16:08,640 --> 00:16:10,740
definitely in the middle of replacing

431
00:16:10,740 --> 00:16:12,390
some of these patterns with standard

432
00:16:12,390 --> 00:16:15,089
backbone implementations so you create

433
00:16:15,089 --> 00:16:17,010
this dread list item but inside this

434
00:16:17,010 --> 00:16:18,420
thread list item you're gonna do a

435
00:16:18,420 --> 00:16:20,220
couple of things you're gonna add your

436
00:16:20,220 --> 00:16:22,380
thread starter as a child view so you

437
00:16:22,380 --> 00:16:23,850
create your new thread starter and you

438
00:16:23,850 --> 00:16:27,600
prepend it to this this thread list item

439
00:16:27,600 --> 00:16:29,130
and then you're gonna loop through all

440
00:16:29,130 --> 00:16:30,990
of your message replies and you're going

441
00:16:30,990 --> 00:16:32,550
to turn those into message list items

442
00:16:32,550 --> 00:16:34,709
and you're going to pin those also so

443
00:16:34,709 --> 00:16:37,170
these views have all been accentuated

444
00:16:37,170 --> 00:16:38,670
and they're now all composed together

445
00:16:38,670 --> 00:16:40,589
underneath this thread list item and

446
00:16:40,589 --> 00:16:42,149
then all I have to do is create this

447
00:16:42,149 --> 00:16:44,160
thread list item and call render and

448
00:16:44,160 --> 00:16:45,660
when I'm done all this stuff's done

449
00:16:45,660 --> 00:16:49,170
looks like that and it's great right and

450
00:16:49,170 --> 00:16:50,310
I didn't have to go through a lot of

451
00:16:50,310 --> 00:16:51,720
munching or whatever I just have to set

452
00:16:51,720 --> 00:16:53,790
these up once create this parent-child

453
00:16:53,790 --> 00:16:55,769
relationship and this just happens for

454
00:16:55,769 --> 00:16:58,199
me right not magically but in a way

455
00:16:58,199 --> 00:17:01,620
that's like a nice abstraction okay is

456
00:17:01,620 --> 00:17:03,240
this is this the thing that people are

457
00:17:03,240 --> 00:17:05,640
generally familiar with or seen in

458
00:17:05,640 --> 00:17:09,419
various places cool so when we look at

459
00:17:09,419 --> 00:17:12,360
other frameworks we can see it being

460
00:17:12,360 --> 00:17:14,880
similar in some ways I chose marionette

461
00:17:14,880 --> 00:17:16,260
because I think it's one of the more

462
00:17:16,260 --> 00:17:19,650
popular advanced pattern frameworks that

463
00:17:19,650 --> 00:17:21,959
are built on top of backbone which i

464
00:17:21,959 --> 00:17:25,230
think is cool and it allows you to do a

465
00:17:25,230 --> 00:17:27,030
very similar thing for your message list

466
00:17:27,030 --> 00:17:28,260
items which is your list of replies

467
00:17:28,260 --> 00:17:30,570
you're going to create an item view and

468
00:17:30,570 --> 00:17:32,520
for your thread list item which is your

469
00:17:32,520 --> 00:17:34,890
kind of you know encapsulating view

470
00:17:34,890 --> 00:17:36,179
you're going to create a composite view

471
00:17:36,179 --> 00:17:37,470
because marionette says if you're

472
00:17:37,470 --> 00:17:39,240
creating a positive view we know that

473
00:17:39,240 --> 00:17:40,320
we're gonna render some children

474
00:17:40,320 --> 00:17:42,179
recursively and it has that whole thing

475
00:17:42,179 --> 00:17:43,770
kind of built in and you've got less

476
00:17:43,770 --> 00:17:45,390
boilerplate involved you can just pass

477
00:17:45,390 --> 00:17:46,830
it you can say I'm gonna I'm gonna do a

478
00:17:46,830 --> 00:17:49,050
message list item underneath here and

479
00:17:49,050 --> 00:17:50,400
then you create this thread

480
00:17:50,400 --> 00:17:51,780
them and you give us some collections

481
00:17:51,780 --> 00:17:53,580
and like boom like things start

482
00:17:53,580 --> 00:17:54,809
happening right so you just call render

483
00:17:54,809 --> 00:17:59,309
and you get the right thing I haven't I

484
00:17:59,309 --> 00:18:01,260
haven't used marionette as much as I've

485
00:18:01,260 --> 00:18:03,450
used some of these other frameworks but

486
00:18:03,450 --> 00:18:05,040
as soon as I looked into it I said I bet

487
00:18:05,040 --> 00:18:06,360
marionette does this as soon as I looked

488
00:18:06,360 --> 00:18:07,860
into it I found all the right elements

489
00:18:07,860 --> 00:18:09,600
to be able to create the thing that I

490
00:18:09,600 --> 00:18:10,680
was trying to create the thing that I

491
00:18:10,680 --> 00:18:13,140
knew that I should be able to do if this

492
00:18:13,140 --> 00:18:15,180
is a serious framework right so people

493
00:18:15,180 --> 00:18:16,590
are having these same ideas right

494
00:18:16,590 --> 00:18:18,960
independently of of each other because

495
00:18:18,960 --> 00:18:20,820
these are this is a pattern that's kind

496
00:18:20,820 --> 00:18:22,470
of emerging in people's minds and it's

497
00:18:22,470 --> 00:18:24,150
and it's not a new thing right like this

498
00:18:24,150 --> 00:18:26,010
is this is based on prior art like we we

499
00:18:26,010 --> 00:18:28,200
know that these things are useful when

500
00:18:28,200 --> 00:18:29,580
you're building complex UIs and we're

501
00:18:29,580 --> 00:18:31,470
just learning how what what are the what

502
00:18:31,470 --> 00:18:32,730
are the right ways or what are the most

503
00:18:32,730 --> 00:18:34,620
interesting ways to build them in

504
00:18:34,620 --> 00:18:36,030
front-end JavaScript right

505
00:18:36,030 --> 00:18:38,160
so these think these things look very

506
00:18:38,160 --> 00:18:39,450
similar but I always want to kind of

507
00:18:39,450 --> 00:18:42,120
pull one that looks less similar and I

508
00:18:42,120 --> 00:18:43,740
wanted to mess around with with images

509
00:18:43,740 --> 00:18:46,520
some more and the ember.js

510
00:18:46,520 --> 00:18:50,820
example looks like this for this I

511
00:18:50,820 --> 00:18:53,910
decided to use custom components instead

512
00:18:53,910 --> 00:18:57,750
of nested views right and this is the

513
00:18:57,750 --> 00:18:59,750
thing where you know you can kind of

514
00:18:59,750 --> 00:19:02,160
stick these these kind of custom names

515
00:19:02,160 --> 00:19:04,020
into your template and they're they're

516
00:19:04,020 --> 00:19:06,059
an encapsulated version of the view that

517
00:19:06,059 --> 00:19:07,620
knows how to render itself and has this

518
00:19:07,620 --> 00:19:10,710
encapsulated behavior but allows you to

519
00:19:10,710 --> 00:19:12,090
still kind of nest things just like you

520
00:19:12,090 --> 00:19:15,179
do with with HTML with normal HTML and

521
00:19:15,179 --> 00:19:18,030
Amber's tracking this against the the

522
00:19:18,030 --> 00:19:20,130
web components standard that's that's

523
00:19:20,130 --> 00:19:23,220
developing right now so within bar I

524
00:19:23,220 --> 00:19:24,870
kind of created this this component

525
00:19:24,870 --> 00:19:27,000
called a method list item for the

526
00:19:27,000 --> 00:19:28,980
internal one I left out the thread

527
00:19:28,980 --> 00:19:30,360
starter but you know you kind of get to

528
00:19:30,360 --> 00:19:32,429
drift and then your high-level thread

529
00:19:32,429 --> 00:19:34,590
list item template looks like this so

530
00:19:34,590 --> 00:19:36,059
I'm making a thread list item first

531
00:19:36,059 --> 00:19:37,650
thing I do is kind of stick my thread

532
00:19:37,650 --> 00:19:39,179
starter in there and like that's all I

533
00:19:39,179 --> 00:19:40,890
saw ly really have to do as long as it

534
00:19:40,890 --> 00:19:42,809
has access to the right model for that

535
00:19:42,809 --> 00:19:44,370
thread starter it knows how to render

536
00:19:44,370 --> 00:19:45,720
itself like this template doesn't need

537
00:19:45,720 --> 00:19:47,429
to be bothered with the details but

538
00:19:47,429 --> 00:19:49,020
they're now composed together right and

539
00:19:49,020 --> 00:19:50,940
then I loop over my replies and I do the

540
00:19:50,940 --> 00:19:52,470
same thing I create message list items

541
00:19:52,470 --> 00:19:54,690
and I pass in each reply and it knows

542
00:19:54,690 --> 00:19:56,460
how to render itself and you should get

543
00:19:56,460 --> 00:19:58,440
something that ends up looking somewhat

544
00:19:58,440 --> 00:20:00,990
similar to to the threaded conversation

545
00:20:00,990 --> 00:20:02,960
that I had before and yeah

546
00:20:02,960 --> 00:20:05,929
in fact when when the amur was

547
00:20:05,929 --> 00:20:08,720
evaluating new frameworks this is

548
00:20:08,720 --> 00:20:09,980
basically the exercise that I went

549
00:20:09,980 --> 00:20:12,919
through I pulled every framework that I

550
00:20:12,919 --> 00:20:14,600
thought might be interesting and I tried

551
00:20:14,600 --> 00:20:16,190
to build a hammer feed with it right I

552
00:20:16,190 --> 00:20:18,230
tried to see how far I can get applying

553
00:20:18,230 --> 00:20:19,789
these same patterns that I've already

554
00:20:19,789 --> 00:20:22,340
ever used with what the internal

555
00:20:22,340 --> 00:20:24,350
framework that we have and I'm like this

556
00:20:24,350 --> 00:20:25,549
framework should allow me to do all

557
00:20:25,549 --> 00:20:27,649
these things in a similar way or at

558
00:20:27,649 --> 00:20:29,929
least one that I can reason about and I

559
00:20:29,929 --> 00:20:32,899
got to varying degrees of success based

560
00:20:32,899 --> 00:20:36,080
on based on the factors of the

561
00:20:36,080 --> 00:20:38,119
opinionation of each framework but it

562
00:20:38,119 --> 00:20:39,230
was a really useful exercise when I

563
00:20:39,230 --> 00:20:41,749
start to see these patterns emerge so

564
00:20:41,749 --> 00:20:43,159
the outcome here is very similar right

565
00:20:43,159 --> 00:20:44,840
we get we get this kind of nested view

566
00:20:44,840 --> 00:20:46,580
but the thing that I think is really

567
00:20:46,580 --> 00:20:48,980
interesting here is that I think a lot

568
00:20:48,980 --> 00:20:51,440
of people get thrown off because this is

569
00:20:51,440 --> 00:20:52,879
template driven rather than JavaScript

570
00:20:52,879 --> 00:20:56,389
driven in bura angular both I think

571
00:20:56,389 --> 00:20:58,039
prefer to be template driven they kind

572
00:20:58,039 --> 00:20:59,029
of want you to think about what your

573
00:20:59,029 --> 00:21:00,679
markup is and give you hooks into it

574
00:21:00,679 --> 00:21:02,480
that allow you to kind of hook into your

575
00:21:02,480 --> 00:21:05,090
behavior but I prefer the opposite right

576
00:21:05,090 --> 00:21:07,159
I prefer to organize my JavaScript

577
00:21:07,159 --> 00:21:09,440
objects right JavaScript code that does

578
00:21:09,440 --> 00:21:10,999
what I want and then have these

579
00:21:10,999 --> 00:21:13,309
templates kind of be a side effect of

580
00:21:13,309 --> 00:21:15,710
that that that kind of orchestration

581
00:21:15,710 --> 00:21:18,019
going away that I wanted but the outcome

582
00:21:18,019 --> 00:21:19,730
is the same right like the the nested

583
00:21:19,730 --> 00:21:21,679
view pattern I think applies in both of

584
00:21:21,679 --> 00:21:23,090
these even though they don't look

585
00:21:23,090 --> 00:21:24,919
anything alike you can reason about

586
00:21:24,919 --> 00:21:28,059
reason about them in similar ways right

587
00:21:28,059 --> 00:21:32,539
so if this is starting to kind of sound

588
00:21:32,539 --> 00:21:34,369
repetitive like that's great that's

589
00:21:34,369 --> 00:21:35,899
exactly what I want it like I want this

590
00:21:35,899 --> 00:21:37,580
stuff to look the same because I think

591
00:21:37,580 --> 00:21:39,139
that's what we want and when we were

592
00:21:39,139 --> 00:21:40,639
talking about these shared patterns is a

593
00:21:40,639 --> 00:21:42,919
kind of a way to look at these

594
00:21:42,919 --> 00:21:44,419
frameworks that look very different and

595
00:21:44,419 --> 00:21:45,379
I really trying to differentiate

596
00:21:45,379 --> 00:21:47,539
themselves and I say well if I have this

597
00:21:47,539 --> 00:21:49,220
this kind of shared model in my head if

598
00:21:49,220 --> 00:21:50,929
I have this mental model of how these

599
00:21:50,929 --> 00:21:52,700
things are supposed to work because I

600
00:21:52,700 --> 00:21:54,499
know how the front-end works then I can

601
00:21:54,499 --> 00:21:55,879
use that as a basis to understand

602
00:21:55,879 --> 00:21:57,679
anything that these frameworks are

603
00:21:57,679 --> 00:21:58,820
trying to trying to throw at me

604
00:21:58,820 --> 00:22:00,590
right and that doesn't always work but

605
00:22:00,590 --> 00:22:03,190
it definitely gets you a step ahead so

606
00:22:03,190 --> 00:22:06,559
let's kind of round it out with some of

607
00:22:06,559 --> 00:22:08,960
the emerging patterns these are things

608
00:22:08,960 --> 00:22:11,179
are the more interesting ones and ones

609
00:22:11,179 --> 00:22:13,050
that I think are

610
00:22:13,050 --> 00:22:15,610
harder to kind of find the patterns or

611
00:22:15,610 --> 00:22:17,040
at least establish the patterns today

612
00:22:17,040 --> 00:22:18,970
but definitely worth looking at because

613
00:22:18,970 --> 00:22:20,580
they're coming up more and more often

614
00:22:20,580 --> 00:22:22,990
they kind of like this they're less

615
00:22:22,990 --> 00:22:24,280
common they're coming up more and more

616
00:22:24,280 --> 00:22:27,100
frequently these patterns aren't built

617
00:22:27,100 --> 00:22:29,380
into every framework yet although the

618
00:22:29,380 --> 00:22:31,780
big major ones are trying I know Amber's

619
00:22:31,780 --> 00:22:33,490
doing things and angular is doing things

620
00:22:33,490 --> 00:22:35,800
around around making a real-time more

621
00:22:35,800 --> 00:22:38,710
standard and recognizing these patterns

622
00:22:38,710 --> 00:22:41,470
can help you kind of look across the

623
00:22:41,470 --> 00:22:44,800
field and see how these how different

624
00:22:44,800 --> 00:22:46,060
frameworks are trying to solve these

625
00:22:46,060 --> 00:22:47,710
problems that like I know some of you

626
00:22:47,710 --> 00:22:49,780
have today and help you evaluate those

627
00:22:49,780 --> 00:22:51,910
right so custom components we kind of

628
00:22:51,910 --> 00:22:53,860
looked at with with ember but polymer

629
00:22:53,860 --> 00:22:56,410
and reactor are doing are kind of at the

630
00:22:56,410 --> 00:22:58,390
forefront of that I think real-time

631
00:22:58,390 --> 00:23:00,000
updates which we're going to talk about

632
00:23:00,000 --> 00:23:02,500
people's go-to Julie socket IO but

633
00:23:02,500 --> 00:23:04,390
there's definitely other other things

634
00:23:04,390 --> 00:23:06,700
that you can grab like pusher real-time

635
00:23:06,700 --> 00:23:10,090
sync which is related in kind of a you

636
00:23:10,090 --> 00:23:11,500
know save your models locally and then

637
00:23:11,500 --> 00:23:13,960
have this always-on syncing thing going

638
00:23:13,960 --> 00:23:17,290
with your server and then also similarly

639
00:23:17,290 --> 00:23:19,680
related to that is kind of going full-on

640
00:23:19,680 --> 00:23:22,480
offline cache right where your your

641
00:23:22,480 --> 00:23:25,360
model layer is persisted locally at all

642
00:23:25,360 --> 00:23:27,370
times and then there's this the syncing

643
00:23:27,370 --> 00:23:28,990
thing that that pushes it to the server

644
00:23:28,990 --> 00:23:31,720
if and when it can but but offline

645
00:23:31,720 --> 00:23:33,580
access is kind of a first-class citizen

646
00:23:33,580 --> 00:23:35,010
you know hoodies kind of leading the way

647
00:23:35,010 --> 00:23:37,690
with that and then finally device

648
00:23:37,690 --> 00:23:39,040
capabilities because you want to kind of

649
00:23:39,040 --> 00:23:41,260
access you know hardware capabilities on

650
00:23:41,260 --> 00:23:43,000
mobile devices like your camera or

651
00:23:43,000 --> 00:23:45,550
geolocation when you look at this stuff

652
00:23:45,550 --> 00:23:47,640
and you think yeah I've had to do that

653
00:23:47,640 --> 00:23:49,540
you've probably also gone through this

654
00:23:49,540 --> 00:23:51,130
exercise where you're like well how do I

655
00:23:51,130 --> 00:23:53,200
do that with framework X whatever one is

656
00:23:53,200 --> 00:23:54,880
using even if it's your your custom one

657
00:23:54,880 --> 00:23:56,590
and so people are kind of gluing these

658
00:23:56,590 --> 00:23:58,990
together with you know custom code

659
00:23:58,990 --> 00:24:01,180
that's hard to maintain and so this is

660
00:24:01,180 --> 00:24:02,050
why I feel like there's a pattern

661
00:24:02,050 --> 00:24:03,820
emerging here because lotsa people are

662
00:24:03,820 --> 00:24:05,950
doing it but it's not a thing that you

663
00:24:05,950 --> 00:24:07,750
recognize and the thing that looks the

664
00:24:07,750 --> 00:24:11,380
same or at least I thought so right so I

665
00:24:11,380 --> 00:24:13,510
want to look at real time because

666
00:24:13,510 --> 00:24:15,370
everybody wants to be real time these

667
00:24:15,370 --> 00:24:16,810
days and in fact I was I was laughing

668
00:24:16,810 --> 00:24:19,990
because I noticed that the the go-to app

669
00:24:19,990 --> 00:24:22,960
which was like the the to-do app that

670
00:24:22,960 --> 00:24:24,610
people were using as a tutorial for

671
00:24:24,610 --> 00:24:26,470
their framework has now switched to the

672
00:24:26,470 --> 00:24:30,220
real-time chat tutorial right so all

673
00:24:30,220 --> 00:24:30,970
these frameworks have chatted

674
00:24:30,970 --> 00:24:32,350
differentiates themselves by having you

675
00:24:32,350 --> 00:24:33,340
build something in real time because

676
00:24:33,340 --> 00:24:34,750
they know that's what people are looking

677
00:24:34,750 --> 00:24:37,539
at right but when I looked around at

678
00:24:37,539 --> 00:24:39,640
this pattern I was surprised to find a

679
00:24:39,640 --> 00:24:41,020
little bit more consistency than I was

680
00:24:41,020 --> 00:24:43,360
expecting for something that I thought

681
00:24:43,360 --> 00:24:48,309
was just an emerging pattern the way

682
00:24:48,309 --> 00:24:50,140
that people are integrating it actually

683
00:24:50,140 --> 00:24:52,659
seems very similar to me but as a

684
00:24:52,659 --> 00:24:53,950
pattern now so it felt like there was

685
00:24:53,950 --> 00:24:54,909
something missing so if you look at

686
00:24:54,909 --> 00:24:57,309
these bullet points obviously you can

687
00:24:57,309 --> 00:24:58,809
subscribe to real-time updates from the

688
00:24:58,809 --> 00:25:02,440
server but the the thing that I think

689
00:25:02,440 --> 00:25:03,669
makes this the pattern the thing that I

690
00:25:03,669 --> 00:25:05,770
think is really useful here is the idea

691
00:25:05,770 --> 00:25:08,320
that those real-time updates get

692
00:25:08,320 --> 00:25:09,789
dispatched through your normal model

693
00:25:09,789 --> 00:25:11,710
layer in a way that's very familiar to

694
00:25:11,710 --> 00:25:12,909
you and they you don't have to spend a

695
00:25:12,909 --> 00:25:15,039
lot of time reasoning about real-time as

696
00:25:15,039 --> 00:25:18,039
separate from not real-time right we'll

697
00:25:18,039 --> 00:25:19,059
kind of see what that looks like you can

698
00:25:19,059 --> 00:25:21,640
you can register for four events just

699
00:25:21,640 --> 00:25:25,299
like normal models so I looked at

700
00:25:25,299 --> 00:25:28,480
angular first I didn't I didn't write

701
00:25:28,480 --> 00:25:30,340
these examples I kind of googled around

702
00:25:30,340 --> 00:25:31,480
and looking for what people were doing

703
00:25:31,480 --> 00:25:33,549
with real-time and angular and I found

704
00:25:33,549 --> 00:25:36,490
this so this is kind of an example of

705
00:25:36,490 --> 00:25:38,380
how you might kind of build a blog that

706
00:25:38,380 --> 00:25:40,240
gets real-time updates or whatever right

707
00:25:40,240 --> 00:25:42,820
and so you're kind of going into your

708
00:25:42,820 --> 00:25:44,169
angular controller you've got your scope

709
00:25:44,169 --> 00:25:46,299
there and you give it an empty list of

710
00:25:46,299 --> 00:25:47,860
items that you're gonna presumably fill

711
00:25:47,860 --> 00:25:51,070
and you have this this initial method to

712
00:25:51,070 --> 00:25:53,350
retrieve your initial data right so just

713
00:25:53,350 --> 00:25:55,870
do a regular HS call get your items back

714
00:25:55,870 --> 00:25:57,789
and shove them on that scope and you're

715
00:25:57,789 --> 00:26:00,580
good to get started right but then to

716
00:26:00,580 --> 00:26:01,960
add the real-time component they pulled

717
00:26:01,960 --> 00:26:03,400
in this service angular wants you to go

718
00:26:03,400 --> 00:26:04,720
through these services to access data

719
00:26:04,720 --> 00:26:08,409
and so they've got this this pusher this

720
00:26:08,409 --> 00:26:10,809
pusher service that exposes this

721
00:26:10,809 --> 00:26:12,520
subscribe method and instead subscribe

722
00:26:12,520 --> 00:26:14,830
to you know whatever whatever collection

723
00:26:14,830 --> 00:26:16,419
on the server will give you real-time

724
00:26:16,419 --> 00:26:18,880
updates in this case just called items

725
00:26:18,880 --> 00:26:21,159
and register a callback and every time

726
00:26:21,159 --> 00:26:23,260
there's a real-time update of items

727
00:26:23,260 --> 00:26:25,480
we're gonna fire this thing and all I'm

728
00:26:25,480 --> 00:26:27,070
doing dealing here is pushing it onto

729
00:26:27,070 --> 00:26:29,530
this this items alright and if you

730
00:26:29,530 --> 00:26:31,210
remember this is this is there's not

731
00:26:31,210 --> 00:26:33,700
much else here because angular is

732
00:26:33,700 --> 00:26:35,830
listening for changes to this scope so

733
00:26:35,830 --> 00:26:36,940
all I have to do is push these items

734
00:26:36,940 --> 00:26:38,320
here and all the stuff that's listening

735
00:26:38,320 --> 00:26:39,520
for changes is going to

736
00:26:39,520 --> 00:26:41,080
and in this case they're gonna update in

737
00:26:41,080 --> 00:26:43,090
real time and sometimes that's really

738
00:26:43,090 --> 00:26:44,860
all you need right like that's really

739
00:26:44,860 --> 00:26:46,330
all you want is to say for this

740
00:26:46,330 --> 00:26:48,309
particular list I want it to update as

741
00:26:48,309 --> 00:26:50,230
soon as these objects come in so as fast

742
00:26:50,230 --> 00:26:52,750
as possible and that that's all it takes

743
00:26:52,750 --> 00:26:54,790
in this case and I think that's pretty

744
00:26:54,790 --> 00:26:56,679
nice it's very explicit which is which

745
00:26:56,679 --> 00:26:59,410
is cool but it's also kind of you know

746
00:26:59,410 --> 00:27:01,030
like it could be better it could be

747
00:27:01,030 --> 00:27:02,800
encapsulated a little bit better I don't

748
00:27:02,800 --> 00:27:04,630
have to always worry about you know

749
00:27:04,630 --> 00:27:06,550
setting up this subscribe and every

750
00:27:06,550 --> 00:27:07,929
controller that I need this just real

751
00:27:07,929 --> 00:27:10,450
time stuff right so I jumped over to

752
00:27:10,450 --> 00:27:12,910
ember googled around a little bit and I

753
00:27:12,910 --> 00:27:14,920
found something extremely similar right

754
00:27:14,920 --> 00:27:16,720
completely unrelated but extremely

755
00:27:16,720 --> 00:27:19,270
similar this is from the discourse folks

756
00:27:19,270 --> 00:27:23,320
who are heavy ember users and they're

757
00:27:23,320 --> 00:27:24,640
doing a similar thing building a blog

758
00:27:24,640 --> 00:27:27,100
wanted to be real-time updates such and

759
00:27:27,100 --> 00:27:29,230
such and they do kind of the same thing

760
00:27:29,230 --> 00:27:30,130
right so you're there in their

761
00:27:30,130 --> 00:27:32,260
controller create this subscribe method

762
00:27:32,260 --> 00:27:33,070
that's going to give them real-time

763
00:27:33,070 --> 00:27:36,460
capabilities and they're using this this

764
00:27:36,460 --> 00:27:39,580
library called a message bus which you

765
00:27:39,580 --> 00:27:41,500
know if I'm not mistaken is a JavaScript

766
00:27:41,500 --> 00:27:42,880
client that kind of connects to this

767
00:27:42,880 --> 00:27:44,679
Ruby back-end that gives you real-time

768
00:27:44,679 --> 00:27:47,410
updates and it just just exposes this

769
00:27:47,410 --> 00:27:48,880
subscribe method and it says subscribe

770
00:27:48,880 --> 00:27:50,860
to whatever thing on your back-end you

771
00:27:50,860 --> 00:27:53,620
want to get real-time from you you know

772
00:27:53,620 --> 00:27:55,510
you register a callback and where's

773
00:27:55,510 --> 00:27:57,250
gonna give you data and then you take

774
00:27:57,250 --> 00:27:59,500
that data and you you shove it into the

775
00:27:59,500 --> 00:28:01,420
the part of the model layer that you

776
00:28:01,420 --> 00:28:03,820
want to fire of its fire update events

777
00:28:03,820 --> 00:28:06,010
and in the case of ember kind of looks

778
00:28:06,010 --> 00:28:10,120
like this the the controller model stuff

779
00:28:10,120 --> 00:28:12,010
and ember is still a little sketchy to

780
00:28:12,010 --> 00:28:13,720
me but like you don't need a lot to

781
00:28:13,720 --> 00:28:15,130
understand this when you get some data

782
00:28:15,130 --> 00:28:16,600
here's where you put it it's gonna

783
00:28:16,600 --> 00:28:18,760
update in real time no fuss no muss

784
00:28:18,760 --> 00:28:21,190
right I put citations for these these

785
00:28:21,190 --> 00:28:23,200
two that aren't mine so you can go and

786
00:28:23,200 --> 00:28:25,030
check them out so I was surprised that

787
00:28:25,030 --> 00:28:26,590
these things looked look pretty similar

788
00:28:26,590 --> 00:28:27,520
but you know they're still pretty

789
00:28:27,520 --> 00:28:29,200
explicit they're still not encapsulated

790
00:28:29,200 --> 00:28:32,410
well and so this I think is an

791
00:28:32,410 --> 00:28:34,690
interesting place to look at em juiced

792
00:28:34,690 --> 00:28:36,970
again we didn't talk about how ya induce

793
00:28:36,970 --> 00:28:38,590
models are created but it count looks

794
00:28:38,590 --> 00:28:40,630
like this you just define a new model in

795
00:28:40,630 --> 00:28:42,190
this case we're making a feed which is

796
00:28:42,190 --> 00:28:44,620
you know kind of that list of threaded

797
00:28:44,620 --> 00:28:46,540
conversations and we're associating it

798
00:28:46,540 --> 00:28:48,600
with a real-time feed client

799
00:28:48,600 --> 00:28:50,650
appropriately named this is gonna say

800
00:28:50,650 --> 00:28:52,330
this is gonna get real-time data for you

801
00:28:52,330 --> 00:28:52,870
and

802
00:28:52,870 --> 00:28:55,750
surface it in a way that you can use and

803
00:28:55,750 --> 00:28:57,670
in a completely different file this is a

804
00:28:57,670 --> 00:28:59,590
pretty sophisticated system which means

805
00:28:59,590 --> 00:29:01,690
that it's a it's kind of overgrown and

806
00:29:01,690 --> 00:29:03,340
hard to maintain and a completely

807
00:29:03,340 --> 00:29:05,170
different file you have your base real

808
00:29:05,170 --> 00:29:07,390
time client which has this connect to

809
00:29:07,390 --> 00:29:09,100
real time method and look there's your

810
00:29:09,100 --> 00:29:10,990
subscribe like like it's it's it's the

811
00:29:10,990 --> 00:29:12,520
same right like if you haven't gotten

812
00:29:12,520 --> 00:29:14,500
the point yet cuz stuff is the same so

813
00:29:14,500 --> 00:29:16,300
here's your subscribe you give it an ID

814
00:29:16,300 --> 00:29:18,820
and it's gonna fire this call back when

815
00:29:18,820 --> 00:29:21,100
your data is ready but how does it

816
00:29:21,100 --> 00:29:22,510
surface that data right that's what this

817
00:29:22,510 --> 00:29:23,950
is where the difference comes in and

818
00:29:23,950 --> 00:29:26,200
this is where this pattern is a little

819
00:29:26,200 --> 00:29:27,309
more complete than the ones that we just

820
00:29:27,309 --> 00:29:29,170
looked at because this is buried right

821
00:29:29,170 --> 00:29:31,510
this is an abstraction that's wrapped in

822
00:29:31,510 --> 00:29:33,550
our model layer so the usage looks

823
00:29:33,550 --> 00:29:35,470
different the user just looks like this

824
00:29:35,470 --> 00:29:38,140
you just create your your model like you

825
00:29:38,140 --> 00:29:40,480
like you do in any other place and then

826
00:29:40,480 --> 00:29:42,220
you hook on to this on thread update

827
00:29:42,220 --> 00:29:43,929
that says if there's if there are new

828
00:29:43,929 --> 00:29:45,700
threads coming into this this feed

829
00:29:45,700 --> 00:29:48,220
collection let me know and that's it

830
00:29:48,220 --> 00:29:49,870
like you don't have to mess around with

831
00:29:49,870 --> 00:29:51,340
the real-time this could be a regular

832
00:29:51,340 --> 00:29:52,780
Ajax call this could be real-time we

833
00:29:52,780 --> 00:29:54,880
don't really care all of our our UI is

834
00:29:54,880 --> 00:29:56,500
just hooked up to this method that says

835
00:29:56,500 --> 00:29:58,090
if there's new stuff I'm gonna render it

836
00:29:58,090 --> 00:30:01,360
and so we're we're you know encapsulated

837
00:30:01,360 --> 00:30:03,220
from dealing with the real-time elements

838
00:30:03,220 --> 00:30:05,050
of this and so those real-time elements

839
00:30:05,050 --> 00:30:06,640
could change the implementation could

840
00:30:06,640 --> 00:30:08,670
change right like our our real-time

841
00:30:08,670 --> 00:30:11,020
requirements could change and none of

842
00:30:11,020 --> 00:30:12,400
this stuff has to change right that's

843
00:30:12,400 --> 00:30:13,990
that that's ideally what you want from a

844
00:30:13,990 --> 00:30:15,059
pattern is something that's actually

845
00:30:15,059 --> 00:30:17,860
modular and encapsulated like this

846
00:30:17,860 --> 00:30:22,480
so I hesitated to put this this light

847
00:30:22,480 --> 00:30:24,520
these last slides in because I've been

848
00:30:24,520 --> 00:30:26,380
doing these investigations of these

849
00:30:26,380 --> 00:30:29,020
frameworks but I wanted to look at

850
00:30:29,020 --> 00:30:31,750
meteora but I didn't I didn't get very

851
00:30:31,750 --> 00:30:35,110
far because I think something about

852
00:30:35,110 --> 00:30:36,820
media or kind of twist my brain in a way

853
00:30:36,820 --> 00:30:41,620
that is not very cool so I only got so

854
00:30:41,620 --> 00:30:44,710
far with this but I did I did recognize

855
00:30:44,710 --> 00:30:47,380
that media or I think is establishing

856
00:30:47,380 --> 00:30:50,320
this real-time pattern in a way that I

857
00:30:50,320 --> 00:30:52,360
think makes a lot more sense right so

858
00:30:52,360 --> 00:30:54,700
this is the meteor example in that you

859
00:30:54,700 --> 00:30:56,710
just create you know this this meteor

860
00:30:56,710 --> 00:30:58,900
collection of messages right you do a

861
00:30:58,900 --> 00:31:00,490
query on it by saying find and it's

862
00:31:00,490 --> 00:31:01,810
gonna going to give you back some

863
00:31:01,810 --> 00:31:03,040
initial data if you have it cache

864
00:31:03,040 --> 00:31:05,230
locally but it's also going to open a

865
00:31:05,230 --> 00:31:06,080
real time

866
00:31:06,080 --> 00:31:08,240
connection or rather the way that meteor

867
00:31:08,240 --> 00:31:09,409
works is that there's always this

868
00:31:09,409 --> 00:31:12,350
real-time syncing going on so this query

869
00:31:12,350 --> 00:31:14,179
that you get is it's always going to

870
00:31:14,179 --> 00:31:15,710
fire these these changes that you can

871
00:31:15,710 --> 00:31:18,110
observe and you do that by calling

872
00:31:18,110 --> 00:31:20,779
observed changes funnily enough so

873
00:31:20,779 --> 00:31:22,940
you're gonna get updates when when

874
00:31:22,940 --> 00:31:25,010
things are added or removed but this is

875
00:31:25,010 --> 00:31:26,929
like a normal message collection that

876
00:31:26,929 --> 00:31:29,809
you can then send into templates right

877
00:31:29,809 --> 00:31:31,789
and instead of just you know you loop

878
00:31:31,789 --> 00:31:33,110
over the messages that are there if you

879
00:31:33,110 --> 00:31:34,190
look at you know this is our message

880
00:31:34,190 --> 00:31:35,840
list you loop over the messages that are

881
00:31:35,840 --> 00:31:37,220
there they're gonna get rendered but

882
00:31:37,220 --> 00:31:39,429
also any any messages that get synced

883
00:31:39,429 --> 00:31:41,450
subsequently from the server they're

884
00:31:41,450 --> 00:31:42,769
gonna get rendered like this is all kind

885
00:31:42,769 --> 00:31:45,440
of hooked up in a nice way in a kind of

886
00:31:45,440 --> 00:31:47,029
magical way but it's also kind of nice

887
00:31:47,029 --> 00:31:50,330
right and this is what I think we want

888
00:31:50,330 --> 00:31:52,010
the the real-time connection to be is

889
00:31:52,010 --> 00:31:53,600
the thing where we go through our models

890
00:31:53,600 --> 00:31:55,100
we use this pattern that we already know

891
00:31:55,100 --> 00:31:56,990
the basic one that everybody in here

892
00:31:56,990 --> 00:31:58,130
said yeah our you know how to do that

893
00:31:58,130 --> 00:32:00,470
but you get real-time with the same

894
00:32:00,470 --> 00:32:05,120
capabilities right so I hope I've kind

895
00:32:05,120 --> 00:32:08,059
of Illustrated how these patterns have

896
00:32:08,059 --> 00:32:09,679
kind of helped me evaluate these

897
00:32:09,679 --> 00:32:11,210
different frameworks and I want to wrap

898
00:32:11,210 --> 00:32:14,539
up here but I like this quote this is

899
00:32:14,539 --> 00:32:17,600
from our VP of engineering and when he

900
00:32:17,600 --> 00:32:19,190
said this I knew that he had captured

901
00:32:19,190 --> 00:32:21,590
the the the core of why I felt like this

902
00:32:21,590 --> 00:32:23,779
would be a good talk because rather than

903
00:32:23,779 --> 00:32:25,549
kind of being inundated by all these

904
00:32:25,549 --> 00:32:28,100
solutions that we have to evaluate it's

905
00:32:28,100 --> 00:32:29,330
much better to kind of get really

906
00:32:29,330 --> 00:32:31,490
acquainted with the problem right the

907
00:32:31,490 --> 00:32:33,080
thing that we're trying to do and how we

908
00:32:33,080 --> 00:32:35,210
expect to be able to do it and evaluate

909
00:32:35,210 --> 00:32:36,769
these frameworks against that right

910
00:32:36,769 --> 00:32:39,440
rather than kind of saying how do I do

911
00:32:39,440 --> 00:32:41,960
this an ember how do I do this thing and

912
00:32:41,960 --> 00:32:44,990
angular my question becomes I know I can

913
00:32:44,990 --> 00:32:45,950
do this thing right

914
00:32:45,950 --> 00:32:48,080
like I want angular to enable me to do

915
00:32:48,080 --> 00:32:49,490
this thing so I know what I'm looking

916
00:32:49,490 --> 00:32:51,559
for right I'm looking for my models I'm

917
00:32:51,559 --> 00:32:53,659
looking for how I can inspect them I'm

918
00:32:53,659 --> 00:32:56,419
looking for how I can register callbacks

919
00:32:56,419 --> 00:32:58,399
and I'm looking for how I can nest views

920
00:32:58,399 --> 00:33:01,159
and I know what to expect right that's

921
00:33:01,159 --> 00:33:03,470
been a huge win for me in terms of doing

922
00:33:03,470 --> 00:33:07,220
these evaluations right and so what I

923
00:33:07,220 --> 00:33:08,480
want to leave you with is like let's

924
00:33:08,480 --> 00:33:10,490
find a way to talk more about these

925
00:33:10,490 --> 00:33:12,679
shared patterns let's let's get these

926
00:33:12,679 --> 00:33:14,899
examples let's like use github let's get

927
00:33:14,899 --> 00:33:17,510
people to contribute let's find out how

928
00:33:17,510 --> 00:33:18,800
far these patterns are

929
00:33:18,800 --> 00:33:21,350
reading across our community and used

930
00:33:21,350 --> 00:33:23,090
them as a context for for having a

931
00:33:23,090 --> 00:33:25,180
stronger basis for front-end development

932
00:33:25,180 --> 00:33:27,740
and that's basically it

