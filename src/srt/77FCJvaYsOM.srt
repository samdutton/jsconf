1
00:00:13,910 --> 00:00:16,470

hey thanks everyone for coming out my

2
00:00:16,470 --> 00:00:18,750
name is Andrew as my colleague I'm

3
00:00:18,750 --> 00:00:22,380
critics of augie and as I mentioned we

4
00:00:22,380 --> 00:00:24,510
work out wayfair.com up in Boston and

5
00:00:24,510 --> 00:00:26,010
there are some things that I think are

6
00:00:26,010 --> 00:00:27,330
important to understand about Wayfarer

7
00:00:27,330 --> 00:00:30,470
in the context of this presentation so

8
00:00:30,470 --> 00:00:33,329
we're an online destination for all

9
00:00:33,329 --> 00:00:36,180
things home so ecommerce site for

10
00:00:36,180 --> 00:00:38,130
furniture and home goods mostly we have

11
00:00:38,130 --> 00:00:40,470
a lot of products over 7 million 7,000

12
00:00:40,470 --> 00:00:42,000
plus suppliers to have a very large data

13
00:00:42,000 --> 00:00:46,200
set we've been around since 2002 so the

14
00:00:46,200 --> 00:00:47,310
weight name wayfair is actually a little

15
00:00:47,310 --> 00:00:48,930
newer we kind of rebranded a few years

16
00:00:48,930 --> 00:00:51,600
ago but we've been around for a while

17
00:00:51,600 --> 00:00:53,040
and our code base has been around for a

18
00:00:53,040 --> 00:00:55,860
while we have several large websites

19
00:00:55,860 --> 00:00:57,450
wayfair.com being the main one but they

20
00:00:57,450 --> 00:00:59,310
all run on the shared code base so the

21
00:00:59,310 --> 00:01:00,570
most part all our products share the

22
00:01:00,570 --> 00:01:03,960
same code and that code is a PHP

23
00:01:03,960 --> 00:01:06,570
back-end custom-built ecommerce platform

24
00:01:06,570 --> 00:01:09,030
in MVC platform millions lines of code

25
00:01:09,030 --> 00:01:11,640
thousands of JavaScript modules so it's

26
00:01:11,640 --> 00:01:15,900
an extensive code base right performance

27
00:01:15,900 --> 00:01:18,750
matters right I know it's obviously not

28
00:01:18,750 --> 00:01:20,220
probably all if you know it but I'm just

29
00:01:20,220 --> 00:01:22,590
gonna say it anyway so a

30
00:01:22,590 --> 00:01:24,210
high-performance app can lead to a

31
00:01:24,210 --> 00:01:26,220
better customer experience that in turn

32
00:01:26,220 --> 00:01:28,620
probably leads to better revenue right

33
00:01:28,620 --> 00:01:33,390
and that's kind of important so in order

34
00:01:33,390 --> 00:01:35,640
to get this high performance we are kind

35
00:01:35,640 --> 00:01:37,170
of doing some things on the server side

36
00:01:37,170 --> 00:01:42,000
keys yeah so we have abused mustache in

37
00:01:42,000 --> 00:01:43,229
PHP on the server side and we're

38
00:01:43,229 --> 00:01:46,350
actually rendering this stuff with a C++

39
00:01:46,350 --> 00:01:49,890
extension and that's like super fast we

40
00:01:49,890 --> 00:01:52,979
also lazy load most of our non-critical

41
00:01:52,979 --> 00:01:55,590
images like stop below the fold be these

42
00:01:55,590 --> 00:01:57,780
load data and also like some j/s modules

43
00:01:57,780 --> 00:02:00,090
for example if you have a modal that you

44
00:02:00,090 --> 00:02:01,979
want to show and until you actually show

45
00:02:01,979 --> 00:02:04,020
it we don't load the j/s for it right so

46
00:02:04,020 --> 00:02:06,810
we also do some intelligent bundling on

47
00:02:06,810 --> 00:02:08,280
the JavaScript side for cash

48
00:02:08,280 --> 00:02:13,470
optimizations yeah so we're doing a lot

49
00:02:13,470 --> 00:02:15,569
of things right in terms performance but

50
00:02:15,569 --> 00:02:16,620
there was always room for improvement

51
00:02:16,620 --> 00:02:18,810
and as our pages became more and more

52
00:02:18,810 --> 00:02:21,420
interactive we realized that the area

53
00:02:21,420 --> 00:02:22,530
where we can improve the most of the

54
00:02:22,530 --> 00:02:25,450
client side so we were using backbone

55
00:02:25,450 --> 00:02:27,099
on the client and some backbone works

56
00:02:27,099 --> 00:02:28,959
with jquery out of box to do all your

57
00:02:28,959 --> 00:02:30,519
rendering and so this is sort of a

58
00:02:30,519 --> 00:02:32,470
standard render method and backbone you

59
00:02:32,470 --> 00:02:35,440
implement your own render methods so in

60
00:02:35,440 --> 00:02:37,840
this method basically just taking the

61
00:02:37,840 --> 00:02:39,970
element for a review using the jquery

62
00:02:39,970 --> 00:02:42,040
object for that that's been pre-selected

63
00:02:42,040 --> 00:02:44,860
for us and we're using jquery to HTML to

64
00:02:44,860 --> 00:02:47,400
pass in our new string for our HTML

65
00:02:47,400 --> 00:02:50,680
that's acquired by using our template

66
00:02:50,680 --> 00:02:52,420
function that we free compiled calling

67
00:02:52,420 --> 00:02:53,799
render on it and passing in our data and

68
00:02:53,799 --> 00:02:55,480
this was fine but they're a couple of

69
00:02:55,480 --> 00:02:57,730
problems with it one being we tend to

70
00:02:57,730 --> 00:03:00,580
over render so maybe only part of our

71
00:03:00,580 --> 00:03:02,049
view changes maybe we're only changing a

72
00:03:02,049 --> 00:03:04,569
class name or a text node but what we're

73
00:03:04,569 --> 00:03:06,130
doing here in sort of a naive render

74
00:03:06,130 --> 00:03:07,900
method is work rerun during everything

75
00:03:07,900 --> 00:03:09,849
we read running that view no matter what

76
00:03:09,849 --> 00:03:11,319
changed in fact we're rerunning that

77
00:03:11,319 --> 00:03:13,480
view even if nothing changed so even if

78
00:03:13,480 --> 00:03:14,950
nothing changed on our view maybe if

79
00:03:14,950 --> 00:03:17,049
we're calling render whenever our data

80
00:03:17,049 --> 00:03:18,880
model changes which is a common pattern

81
00:03:18,880 --> 00:03:21,760
and now we're rerender even we don't

82
00:03:21,760 --> 00:03:23,410
need to we're hitting the Damas we don't

83
00:03:23,410 --> 00:03:26,730
have to and that became problematic oh

84
00:03:26,730 --> 00:03:28,930
the other end of this the kind of

85
00:03:28,930 --> 00:03:31,209
compensate for this is well devs would

86
00:03:31,209 --> 00:03:32,609
just use kind of precise Dom

87
00:03:32,609 --> 00:03:35,470
manipulations so we might take our our

88
00:03:35,470 --> 00:03:37,420
jQuery object here and just call add

89
00:03:37,420 --> 00:03:40,620
class on it so that's fine it's a fast a

90
00:03:40,620 --> 00:03:45,549
problem is that this does not scale it's

91
00:03:45,549 --> 00:03:47,319
not maintainable as an architecture we

92
00:03:47,319 --> 00:03:49,329
started realizing that parts of our code

93
00:03:49,329 --> 00:03:52,720
base ended up being filled with these

94
00:03:52,720 --> 00:03:54,340
direct Dom manipulations and it was very

95
00:03:54,340 --> 00:03:55,690
hard to reason about the state of our

96
00:03:55,690 --> 00:03:58,690
application at any one time I'm in

97
00:03:58,690 --> 00:04:00,190
addition to that you know devs have to

98
00:04:00,190 --> 00:04:01,389
think about kind of low level

99
00:04:01,389 --> 00:04:03,880
performance you know this would always

100
00:04:03,880 --> 00:04:05,920
come up in a code review and you guys

101
00:04:05,920 --> 00:04:07,269
all work with JavaScript probably every

102
00:04:07,269 --> 00:04:08,739
day so maybe you're familiar with this

103
00:04:08,739 --> 00:04:10,690
you know that jQuery empty is actually a

104
00:04:10,690 --> 00:04:11,889
lot faster than passing in an empty

105
00:04:11,889 --> 00:04:15,069
string to jquery HTML but that's not

106
00:04:15,069 --> 00:04:16,329
something that all our full stack devs

107
00:04:16,329 --> 00:04:18,459
were aware of and it's not something

108
00:04:18,459 --> 00:04:20,380
they should have to be aware of and so

109
00:04:20,380 --> 00:04:21,760
you know you'd end up with all these

110
00:04:21,760 --> 00:04:23,200
little petty comments and code reviews

111
00:04:23,200 --> 00:04:24,520
like this is faster than this this is

112
00:04:24,520 --> 00:04:26,770
faster than this and that just we wanted

113
00:04:26,770 --> 00:04:28,330
a better abstraction for that we didn't

114
00:04:28,330 --> 00:04:30,010
want to have to have devs have to worry

115
00:04:30,010 --> 00:04:31,180
about this sort of low level down

116
00:04:31,180 --> 00:04:32,710
performance when they're writing their

117
00:04:32,710 --> 00:04:37,150
code so what do we do now yeah that was

118
00:04:37,150 --> 00:04:38,080
a good question and that was a question

119
00:04:38,080 --> 00:04:39,100
that kind of face

120
00:04:39,100 --> 00:04:41,380
our team how can we improve the

121
00:04:41,380 --> 00:04:42,700
client-side performance that we have

122
00:04:42,700 --> 00:04:46,750
within our current stack and you know i

123
00:04:46,750 --> 00:04:48,940
think the the interesting solution was

124
00:04:48,940 --> 00:04:51,820
let's just rewrite everything there are

125
00:04:51,820 --> 00:04:52,900
some really great libraries out there

126
00:04:52,900 --> 00:04:54,730
right we we started looking around and

127
00:04:54,730 --> 00:04:56,140
we could have rear end to ember because

128
00:04:56,140 --> 00:04:57,910
members really cool now and it has

129
00:04:57,910 --> 00:05:00,280
glimmer so it's kind of fast and there's

130
00:05:00,280 --> 00:05:03,520
really great community there were some

131
00:05:03,520 --> 00:05:04,960
cool things going on with angular and we

132
00:05:04,960 --> 00:05:05,890
could have decided you know we're going

133
00:05:05,890 --> 00:05:07,840
to rewrite to angular 2 and we'll do

134
00:05:07,840 --> 00:05:09,430
that this summer and it'll be it'll be a

135
00:05:09,430 --> 00:05:11,590
project but at the end of the day we'll

136
00:05:11,590 --> 00:05:12,910
have this this cool angular app for

137
00:05:12,910 --> 00:05:16,930
everything to be honest what excited us

138
00:05:16,930 --> 00:05:19,450
the most was react so we looked at react

139
00:05:19,450 --> 00:05:21,520
and we're like this is great if I were

140
00:05:21,520 --> 00:05:22,810
starting a side project like this is

141
00:05:22,810 --> 00:05:24,760
exactly what I would use why don't we

142
00:05:24,760 --> 00:05:27,490
just rewrite everything to react and I

143
00:05:27,490 --> 00:05:29,200
think if the dev it's really exciting to

144
00:05:29,200 --> 00:05:30,810
like look at this and go you know

145
00:05:30,810 --> 00:05:33,370
imagine a greenfield project or we have

146
00:05:33,370 --> 00:05:34,420
a legacy co-pay let's just delete

147
00:05:34,420 --> 00:05:37,060
everything and rewrite it again but this

148
00:05:37,060 --> 00:05:38,680
thing like the worst mistake that you

149
00:05:38,680 --> 00:05:40,360
can make is actually writing entire

150
00:05:40,360 --> 00:05:41,710
thing they even Joe is polski agrees

151
00:05:41,710 --> 00:05:45,910
with me so I it's problematic and that's

152
00:05:45,910 --> 00:05:48,580
disappointing um I think it's devs we

153
00:05:48,580 --> 00:05:50,140
like want to take kind of new and shiny

154
00:05:50,140 --> 00:05:53,170
yeah libraries and just use them and so

155
00:05:53,170 --> 00:05:54,730
we're sort of told we can't at that's

156
00:05:54,730 --> 00:05:58,150
that's disappointing rewrites

157
00:05:58,150 --> 00:06:00,190
unexpensive i mean like it did it so

158
00:06:00,190 --> 00:06:01,720
much time like you have to actually stop

159
00:06:01,720 --> 00:06:03,070
all future development you can't really

160
00:06:03,070 --> 00:06:04,840
like you know like your project does not

161
00:06:04,840 --> 00:06:07,510
progress so and most of the times you

162
00:06:07,510 --> 00:06:08,560
actually never get done with it because

163
00:06:08,560 --> 00:06:09,910
it because of all these problems right

164
00:06:09,910 --> 00:06:12,880
and without actual tests like you're

165
00:06:12,880 --> 00:06:18,340
going to break a lot of stuff right yeah

166
00:06:18,340 --> 00:06:20,140
so the alternative is working with

167
00:06:20,140 --> 00:06:24,060
legacy code which is is not really fun

168
00:06:24,060 --> 00:06:26,500
it's it's an idea when I look at it

169
00:06:26,500 --> 00:06:28,060
that's that isn't that attractive

170
00:06:28,060 --> 00:06:30,130
particularly for a lot of these

171
00:06:30,130 --> 00:06:32,290
characteristics of legacy code bases so

172
00:06:32,290 --> 00:06:34,150
legacy code bases mean you need to work

173
00:06:34,150 --> 00:06:37,150
in the existing tech stack and those

174
00:06:37,150 --> 00:06:38,620
might be text acts that grew organically

175
00:06:38,620 --> 00:06:41,080
over a lot of years like ours where that

176
00:06:41,080 --> 00:06:41,920
you know they're a little bit quirky

177
00:06:41,920 --> 00:06:43,960
there are parts of it that you know if I

178
00:06:43,960 --> 00:06:45,040
were to start again today maybe I

179
00:06:45,040 --> 00:06:46,960
wouldn't do it that way there certainly

180
00:06:46,960 --> 00:06:48,729
were reasons that that that happened

181
00:06:48,729 --> 00:06:49,870
whether they be a historical or whether

182
00:06:49,870 --> 00:06:51,580
they be you know unique to the problem

183
00:06:51,580 --> 00:06:54,619
space that we are solving

184
00:06:54,629 --> 00:06:56,710
it means that you have to use old

185
00:06:56,710 --> 00:06:58,750
frameworks and libraries and this

186
00:06:58,750 --> 00:07:00,340
doesn't mean bad frameworks or libraries

187
00:07:00,340 --> 00:07:02,770
it just means things that are older in

188
00:07:02,770 --> 00:07:04,270
some spaces this is good but it also

189
00:07:04,270 --> 00:07:05,740
means that you know there might be a

190
00:07:05,740 --> 00:07:08,680
community around or there might not they

191
00:07:08,680 --> 00:07:10,090
might have the newest technology or they

192
00:07:10,090 --> 00:07:11,440
might not but you have a lot of code

193
00:07:11,440 --> 00:07:14,340
existing already in these environments

194
00:07:14,340 --> 00:07:16,330
and means you have to work with

195
00:07:16,330 --> 00:07:19,270
technical debt all applications have

196
00:07:19,270 --> 00:07:21,460
technical debt and so when you have to

197
00:07:21,460 --> 00:07:22,900
dive into your legacy code it means you

198
00:07:22,900 --> 00:07:23,919
have to look at that and kind of face

199
00:07:23,919 --> 00:07:25,960
that head-on and none of this is

200
00:07:25,960 --> 00:07:27,930
attractive i think to to front end dev

201
00:07:27,930 --> 00:07:30,789
but i think one of the most important

202
00:07:30,789 --> 00:07:32,710
things about legacy code base is that it

203
00:07:32,710 --> 00:07:36,580
actually works right i mean this is this

204
00:07:36,580 --> 00:07:41,080
is amazing code by by Hendrick who's the

205
00:07:41,080 --> 00:07:44,199
creator of ampersand I really like it

206
00:07:44,199 --> 00:07:46,210
like he says that you don't really have

207
00:07:46,210 --> 00:07:47,500
to burn down your whole house if you

208
00:07:47,500 --> 00:07:49,960
want to remodel the kitchen right so I

209
00:07:49,960 --> 00:07:51,490
mean I think that's a great analogy to

210
00:07:51,490 --> 00:07:53,530
software development and I really like

211
00:07:53,530 --> 00:07:54,639
my living room I really like the

212
00:07:54,639 --> 00:07:55,990
bathroom and I I mean I really like all

213
00:07:55,990 --> 00:08:01,020
the other rooms in my house right so so

214
00:08:01,020 --> 00:08:03,159
so we have a lot of good things that are

215
00:08:03,159 --> 00:08:06,460
going for us right so we also have views

216
00:08:06,460 --> 00:08:09,190
shared templates so we actually have

217
00:08:09,190 --> 00:08:10,630
masters champion sort of shared on the

218
00:08:10,630 --> 00:08:13,900
server side and the client side so we

219
00:08:13,900 --> 00:08:17,740
like that part we we have a very fast

220
00:08:17,740 --> 00:08:18,940
server side rendering because we use

221
00:08:18,940 --> 00:08:22,949
like a c++ extension for mustache on PHP

222
00:08:22,949 --> 00:08:25,719
we also have a lot of existing backbone

223
00:08:25,719 --> 00:08:27,400
components so for example like you know

224
00:08:27,400 --> 00:08:29,770
Garrison's more to the syndics lag so we

225
00:08:29,770 --> 00:08:30,909
don't want to get rid of those so we

226
00:08:30,909 --> 00:08:35,800
really like all of that stuff but there

227
00:08:35,800 --> 00:08:37,120
are things that we liked that were out

228
00:08:37,120 --> 00:08:38,740
there already there were things that

229
00:08:38,740 --> 00:08:40,270
were like we like better in libraries

230
00:08:40,270 --> 00:08:42,250
that had been built in the last few

231
00:08:42,250 --> 00:08:43,719
years that really sources of innovation

232
00:08:43,719 --> 00:08:47,529
and they're inspiring for us so as our

233
00:08:47,529 --> 00:08:48,850
application again became more more

234
00:08:48,850 --> 00:08:50,680
interactive fast client side rendering

235
00:08:50,680 --> 00:08:52,720
was really attractive and we looked at

236
00:08:52,720 --> 00:08:54,910
libraries out there that were a lot

237
00:08:54,910 --> 00:08:55,839
better than what we were doing right now

238
00:08:55,839 --> 00:08:57,399
one of the big piece of this was using

239
00:08:57,399 --> 00:08:59,230
virtual Dom this idea that we could do a

240
00:08:59,230 --> 00:09:00,490
deafening ever DOM and memory not

241
00:09:00,490 --> 00:09:01,839
actually have to hit it on until we need

242
00:09:01,839 --> 00:09:04,120
to and be able to batch and do precise

243
00:09:04,120 --> 00:09:06,279
Dom updates with an abstraction that was

244
00:09:06,279 --> 00:09:06,850
a

245
00:09:06,850 --> 00:09:11,560
was a lot easier to deal with we liked

246
00:09:11,560 --> 00:09:13,300
this idea that we didn't have to do Dom

247
00:09:13,300 --> 00:09:15,430
manipulation with a lot of these new

248
00:09:15,430 --> 00:09:17,860
frameworks we really didn't want our

249
00:09:17,860 --> 00:09:19,269
devs having to work with the Dom

250
00:09:19,269 --> 00:09:21,550
directly it was not a scalable

251
00:09:21,550 --> 00:09:22,990
architecture it was not maintainable and

252
00:09:22,990 --> 00:09:24,670
it ended up with a lot of the messes and

253
00:09:24,670 --> 00:09:26,470
the bugs that had to work with and we

254
00:09:26,470 --> 00:09:27,639
ended up having to like search down

255
00:09:27,639 --> 00:09:28,959
these obscure bugs like you see

256
00:09:28,959 --> 00:09:30,160
something change on the page but you

257
00:09:30,160 --> 00:09:32,350
don't know what changed it may be the

258
00:09:32,350 --> 00:09:33,639
dom break point is helpful maybe it

259
00:09:33,639 --> 00:09:37,300
isn't and so that can be a particularly

260
00:09:37,300 --> 00:09:39,579
challenging so what do we do it all

261
00:09:39,579 --> 00:09:41,259
again it seems to be a recurring

262
00:09:41,259 --> 00:09:45,639
question sure it was so we looked at

263
00:09:45,639 --> 00:09:47,529
what we had we looked at what was out

264
00:09:47,529 --> 00:09:49,329
there and we're kind of faced with a

265
00:09:49,329 --> 00:09:51,459
dilemma it really wasn't feasible to

266
00:09:51,459 --> 00:09:54,730
rewrite everything we had but it wasn't

267
00:09:54,730 --> 00:09:56,019
feasible to keep going down the path

268
00:09:56,019 --> 00:09:58,240
that we were going and so we decided to

269
00:09:58,240 --> 00:10:01,209
kind of take some advice from that idea

270
00:10:01,209 --> 00:10:04,060
of modularity to take this idea that we

271
00:10:04,060 --> 00:10:06,639
can look at the individual pieces of our

272
00:10:06,639 --> 00:10:09,339
application the ones that we like the

273
00:10:09,339 --> 00:10:11,980
ones that we wanted to swap out and do

274
00:10:11,980 --> 00:10:13,990
that on a library by library basis and

275
00:10:13,990 --> 00:10:15,160
there are a lot of really interesting

276
00:10:15,160 --> 00:10:16,389
libraries out there that we could do

277
00:10:16,389 --> 00:10:22,269
that with and so we ended up looking for

278
00:10:22,269 --> 00:10:23,500
libraries that would take all these

279
00:10:23,500 --> 00:10:25,870
pieces that we wanted so the first thing

280
00:10:25,870 --> 00:10:27,610
that we did was look for a better way to

281
00:10:27,610 --> 00:10:29,589
precompiler mustache templates there's

282
00:10:29,589 --> 00:10:31,060
this library out of the Guardian called

283
00:10:31,060 --> 00:10:33,759
reactive and r actives kind of made for

284
00:10:33,759 --> 00:10:35,920
it for as a client-side framework and it

285
00:10:35,920 --> 00:10:37,750
was cool we weren't as interested in

286
00:10:37,750 --> 00:10:39,370
some of the API pieces in the front and

287
00:10:39,370 --> 00:10:40,870
side of it but we realize is that we

288
00:10:40,870 --> 00:10:43,089
could pull out the compiler that they

289
00:10:43,089 --> 00:10:45,040
were using for mustache templates and

290
00:10:45,040 --> 00:10:47,019
use that on our server when we pre

291
00:10:47,019 --> 00:10:48,670
compile our templates to compile them to

292
00:10:48,670 --> 00:10:51,550
objects rather than strings so we did

293
00:10:51,550 --> 00:10:55,180
that we swapped out our compiler on the

294
00:10:55,180 --> 00:10:58,089
server side then we went to this idea of

295
00:10:58,089 --> 00:10:59,889
virtual Dom there's this library called

296
00:10:59,889 --> 00:11:01,810
mercury it's sort of a smaller library

297
00:11:01,810 --> 00:11:04,449
have some of the same ideas of using

298
00:11:04,449 --> 00:11:07,420
virtual Dom but it decouples its virtual

299
00:11:07,420 --> 00:11:10,120
Dom library has its own module which was

300
00:11:10,120 --> 00:11:11,230
cool so we could actually pull this

301
00:11:11,230 --> 00:11:12,610
library again we really weren't as

302
00:11:12,610 --> 00:11:14,470
interested in the API on Mercury it

303
00:11:14,470 --> 00:11:15,939
didn't have the mustache templates that

304
00:11:15,939 --> 00:11:20,260
we wanted for for writing our markup but

305
00:11:20,260 --> 00:11:20,980
it didn't have this

306
00:11:20,980 --> 00:11:22,720
core functionality for dipping and

307
00:11:22,720 --> 00:11:24,399
patching that we needed on the client

308
00:11:24,399 --> 00:11:26,529
side and so we use that along with our

309
00:11:26,529 --> 00:11:30,490
active precompile templates to do our

310
00:11:30,490 --> 00:11:32,500
differing on the plan and then we use

311
00:11:32,500 --> 00:11:34,029
backbone which we are already using

312
00:11:34,029 --> 00:11:36,850
across our code base to do our normal

313
00:11:36,850 --> 00:11:38,440
event finding and handle our data layer

314
00:11:38,440 --> 00:11:40,600
we added a few features into this so we

315
00:11:40,600 --> 00:11:42,430
actually had an event global event

316
00:11:42,430 --> 00:11:45,250
handler similar to to react the handle

317
00:11:45,250 --> 00:11:46,839
virtual events so bind all events in one

318
00:11:46,839 --> 00:11:48,100
place as opposed to binding them all

319
00:11:48,100 --> 00:11:49,959
around our document and delegating from

320
00:11:49,959 --> 00:11:53,350
there we wrote an integration library to

321
00:11:53,350 --> 00:11:56,740
pull this all together we call that

322
00:11:56,740 --> 00:11:58,990
library at tungsten we open source it a

323
00:11:58,990 --> 00:12:01,870
couple months ago so that was kind of

324
00:12:01,870 --> 00:12:04,360
exciting and it's certainly not

325
00:12:04,360 --> 00:12:06,459
something that will fit into you know

326
00:12:06,459 --> 00:12:07,870
everyone's texts at but it made a lot of

327
00:12:07,870 --> 00:12:09,760
sense for us it made a lot of sense for

328
00:12:09,760 --> 00:12:11,680
us because at its core it has this idea

329
00:12:11,680 --> 00:12:13,240
of modularity that it wants to be able

330
00:12:13,240 --> 00:12:15,010
to have the ability to swap out

331
00:12:15,010 --> 00:12:17,290
different pieces so for example we're

332
00:12:17,290 --> 00:12:19,240
using the virtual Dom library from the

333
00:12:19,240 --> 00:12:21,519
mercury project but we have an adapter

334
00:12:21,519 --> 00:12:23,110
so that we can swap in any virtual Dom

335
00:12:23,110 --> 00:12:25,120
library that we want and we benchmarked

336
00:12:25,120 --> 00:12:26,230
it with different implementations in the

337
00:12:26,230 --> 00:12:28,029
past and that's something that we can do

338
00:12:28,029 --> 00:12:29,920
if you know if something comes down the

339
00:12:29,920 --> 00:12:32,079
line a few years from now and we want to

340
00:12:32,079 --> 00:12:35,410
pull in it uses backbone in our code

341
00:12:35,410 --> 00:12:37,779
base but that's set a separate layer so

342
00:12:37,779 --> 00:12:39,370
we're not where'd you where D couple

343
00:12:39,370 --> 00:12:41,290
from backbone itself and we have

344
00:12:41,290 --> 00:12:42,490
implementations and other form in

345
00:12:42,490 --> 00:12:44,380
frameworks as well so that's certainly

346
00:12:44,380 --> 00:12:46,149
something as we look like how we want to

347
00:12:46,149 --> 00:12:47,680
handle our data on the client side and

348
00:12:47,680 --> 00:12:50,050
maybe how we want to use an API for

349
00:12:50,050 --> 00:12:51,730
building out our views we can change

350
00:12:51,730 --> 00:12:53,319
that down the line without replacing the

351
00:12:53,319 --> 00:12:56,680
whole thing and so what we're able to do

352
00:12:56,680 --> 00:12:58,480
is is write something that really worked

353
00:12:58,480 --> 00:13:00,010
for us and work within our tech stack

354
00:13:00,010 --> 00:13:03,430
and I think at the start of it we're

355
00:13:03,430 --> 00:13:05,670
sort of afraid of writing something new

356
00:13:05,670 --> 00:13:07,810
you know there's the not invented here

357
00:13:07,810 --> 00:13:09,670
syndrome right that you know we need

358
00:13:09,670 --> 00:13:10,990
need to just write everything in house

359
00:13:10,990 --> 00:13:12,730
and that's very that's very true a lot

360
00:13:12,730 --> 00:13:15,160
of places i'm sure ourselves included to

361
00:13:15,160 --> 00:13:17,529
some extent we write a lot of stuff

362
00:13:17,529 --> 00:13:18,550
in-house and maybe we could use

363
00:13:18,550 --> 00:13:20,470
externally I'm that being said I think

364
00:13:20,470 --> 00:13:21,730
there's there's kind of the opposite end

365
00:13:21,730 --> 00:13:23,440
of that there are teams that don't want

366
00:13:23,440 --> 00:13:24,699
to write anything because they're afraid

367
00:13:24,699 --> 00:13:26,560
that you know they couldn't do it as

368
00:13:26,560 --> 00:13:28,329
well as as anything else that out there

369
00:13:28,329 --> 00:13:31,000
and maybe they couldn't but you all have

370
00:13:31,000 --> 00:13:33,040
like unique problems a lot of us are

371
00:13:33,040 --> 00:13:34,209
facing very interesting

372
00:13:34,209 --> 00:13:36,819
for us it was that we're not a single

373
00:13:36,819 --> 00:13:38,740
page app we weren't going to be there a

374
00:13:38,740 --> 00:13:39,999
lot of reasons that we couldn't switch

375
00:13:39,999 --> 00:13:42,490
to a single page app SEO just being one

376
00:13:42,490 --> 00:13:44,829
of them and that's certainly changing

377
00:13:44,829 --> 00:13:46,480
but even that aside I think there's

378
00:13:46,480 --> 00:13:47,980
something to be said for delivering a

379
00:13:47,980 --> 00:13:50,079
page that's a fully render to our user a

380
00:13:50,079 --> 00:13:52,600
page that progressively falls back and

381
00:13:52,600 --> 00:13:54,040
works with our JavaScript which is

382
00:13:54,040 --> 00:13:55,029
something that was very important to us

383
00:13:55,029 --> 00:13:58,449
as well so all of these kind of features

384
00:13:58,449 --> 00:14:01,629
made us a little bit more unique I think

385
00:14:01,629 --> 00:14:03,730
then some of your normal single page

386
00:14:03,730 --> 00:14:08,800
applications there's this also this idea

387
00:14:08,800 --> 00:14:10,660
that we discovered of using existing

388
00:14:10,660 --> 00:14:12,369
infrastructure and this is a picture of

389
00:14:12,369 --> 00:14:14,499
barbed wire fence and I read this really

390
00:14:14,499 --> 00:14:16,959
cool story a few months ago and it's

391
00:14:16,959 --> 00:14:18,550
that at the early part of the 20th

392
00:14:18,550 --> 00:14:20,529
century as telephone was sort of making

393
00:14:20,529 --> 00:14:23,649
its way across the United States it was

394
00:14:23,649 --> 00:14:25,259
really expensive tool a new wires

395
00:14:25,259 --> 00:14:27,069
especially in parts of the country that

396
00:14:27,069 --> 00:14:28,119
were vast and there were there were

397
00:14:28,119 --> 00:14:29,860
large distances between these houses and

398
00:14:29,860 --> 00:14:32,139
so in the Great Plains in the American

399
00:14:32,139 --> 00:14:35,499
West we had whole swathes of land that

400
00:14:35,499 --> 00:14:37,869
just wasn't affordable to lay new

401
00:14:37,869 --> 00:14:39,309
telephone wires the telephone companies

402
00:14:39,309 --> 00:14:41,049
just weren't interested in it because it

403
00:14:41,049 --> 00:14:43,420
was just way too expensive and so what

404
00:14:43,420 --> 00:14:49,360
farmers did in a very I think in a way

405
00:14:49,360 --> 00:14:50,709
that's similar to you how hackers

406
00:14:50,709 --> 00:14:52,569
approach problems is they looked at what

407
00:14:52,569 --> 00:14:54,790
they had already they had a lot of these

408
00:14:54,790 --> 00:14:56,410
bribed wire fences that actually join

409
00:14:56,410 --> 00:14:57,850
entire farm so that they could separate

410
00:14:57,850 --> 00:14:59,290
land and that's how they kept animals

411
00:14:59,290 --> 00:15:01,720
from roaming between farms and they

412
00:15:01,720 --> 00:15:03,879
realized that you know the

413
00:15:03,879 --> 00:15:05,649
infrastructure was already there they

414
00:15:05,649 --> 00:15:08,199
could leverage those barbed wires to

415
00:15:08,199 --> 00:15:10,839
actually transmit telephone signals

416
00:15:10,839 --> 00:15:13,360
across large areas of land without

417
00:15:13,360 --> 00:15:16,149
having to build anything new and so

418
00:15:16,149 --> 00:15:17,980
that's what they did these groups of

419
00:15:17,980 --> 00:15:19,029
farmers just came together and they

420
00:15:19,029 --> 00:15:23,989
started implementing a telephone

421
00:15:23,999 --> 00:15:26,049
infrastructure through their existing

422
00:15:26,049 --> 00:15:28,990
barbed wire fences and this was really

423
00:15:28,990 --> 00:15:30,189
interesting to me because I looked at

424
00:15:30,189 --> 00:15:32,139
this and I said you know it's not

425
00:15:32,139 --> 00:15:33,759
perfect like maybe the signal was a

426
00:15:33,759 --> 00:15:35,679
little bit worse maybe they had to

427
00:15:35,679 --> 00:15:37,569
maintain it a little bit more but at the

428
00:15:37,569 --> 00:15:39,069
end of the day they had a telephone

429
00:15:39,069 --> 00:15:40,779
service that they just weren't going to

430
00:15:40,779 --> 00:15:42,549
get otherwise and sure it would have

431
00:15:42,549 --> 00:15:43,720
been great if they could have gotten new

432
00:15:43,720 --> 00:15:46,149
new telephone poles and in strong up new

433
00:15:46,149 --> 00:15:47,649
brand new copper across the whole

434
00:15:47,649 --> 00:15:49,689
but that wasn't going to happen for

435
00:15:49,689 --> 00:15:52,180
years and it wasn't affordable and it

436
00:15:52,180 --> 00:15:53,980
was far too expensive and that sounded

437
00:15:53,980 --> 00:15:56,470
really familiar so you know what we were

438
00:15:56,470 --> 00:15:58,990
able to do is take the existing

439
00:15:58,990 --> 00:16:01,720
infrastructure that we had with its good

440
00:16:01,720 --> 00:16:04,119
parts and with its bad parts and write

441
00:16:04,119 --> 00:16:05,920
something new that gave us the features

442
00:16:05,920 --> 00:16:11,069
that we wanted so that's something and

443
00:16:11,069 --> 00:16:14,920
so I'm just going to show some demos

444
00:16:14,920 --> 00:16:19,899
here how many of you have seen the DB

445
00:16:19,899 --> 00:16:23,139
monster demo implementation all right so

446
00:16:23,139 --> 00:16:25,300
a few of you I'm just going to pull one

447
00:16:25,300 --> 00:16:28,899
up here so this is DB monster and

448
00:16:28,899 --> 00:16:31,540
angular and Ryan Florence demoed this at

449
00:16:31,540 --> 00:16:33,730
recomp this year and it's just a really

450
00:16:33,730 --> 00:16:37,480
basic application that updates this set

451
00:16:37,480 --> 00:16:39,610
of this table sort of simulate the idea

452
00:16:39,610 --> 00:16:42,639
of a database monitoring question

453
00:16:42,639 --> 00:16:45,550
monitoring out and so we have data

454
00:16:45,550 --> 00:16:47,679
that's changing very quickly and we have

455
00:16:47,679 --> 00:16:50,019
hundreds of rows which for some

456
00:16:50,019 --> 00:16:53,860
applications might be the case so if you

457
00:16:53,860 --> 00:16:56,499
have very you have a lot of database

458
00:16:56,499 --> 00:16:57,939
clusters that you might eat them on or

459
00:16:57,939 --> 00:16:59,170
anything unique monitor now you

460
00:16:59,170 --> 00:17:00,339
certainly have applications that are

461
00:17:00,339 --> 00:17:04,120
updating the stuff so we have

462
00:17:04,120 --> 00:17:05,079
implementations in all different

463
00:17:05,079 --> 00:17:06,610
libraries and the interesting thing

464
00:17:06,610 --> 00:17:08,380
about this is that we're able to see how

465
00:17:08,380 --> 00:17:10,510
quickly we're able to update a table

466
00:17:10,510 --> 00:17:13,510
with 200 rose actually says 100 bits

467
00:17:13,510 --> 00:17:15,459
200s master and slave for each row and

468
00:17:15,459 --> 00:17:18,189
then we can see how slow it is so the

469
00:17:18,189 --> 00:17:19,659
slower ones will drop frames because

470
00:17:19,659 --> 00:17:21,339
JavaScript won't be able to handle the

471
00:17:21,339 --> 00:17:24,490
updates and the browser will will start

472
00:17:24,490 --> 00:17:25,630
dropping frames so you'll kind of see

473
00:17:25,630 --> 00:17:28,390
the drink so this is angular 1.3 which I

474
00:17:28,390 --> 00:17:33,130
think was several months ago but so

475
00:17:33,130 --> 00:17:34,960
let's see we have we have a little bit

476
00:17:34,960 --> 00:17:36,789
of genk as I scroll I don't know how oh

477
00:17:36,789 --> 00:17:38,789
well it shows up on the projector and

478
00:17:38,789 --> 00:17:44,020
pull up the console and I have a

479
00:17:44,020 --> 00:17:49,960
function called a run timer so run timer

480
00:17:49,960 --> 00:17:52,450
will run over five seconds and it'll see

481
00:17:52,450 --> 00:17:54,700
how many times you can run render in a

482
00:17:54,700 --> 00:17:56,230
second over a course of five little

483
00:17:56,230 --> 00:17:58,370
sample

484
00:17:58,370 --> 00:18:00,990
okay so you get 4.4 renders per second

485
00:18:00,990 --> 00:18:02,549
so that that's you know pretty good but

486
00:18:02,549 --> 00:18:07,910
it definitely is janky here all right

487
00:18:07,910 --> 00:18:12,660
now we have amber one now and this is a

488
00:18:12,660 --> 00:18:14,280
little problematic because it tends to

489
00:18:14,280 --> 00:18:17,669
cross the browser tab sometimes all

490
00:18:17,669 --> 00:18:24,750
right so we get occasional updates all

491
00:18:24,750 --> 00:18:27,480
right so down to about one render a

492
00:18:27,480 --> 00:18:29,150
second so that's that's a little slow

493
00:18:29,150 --> 00:18:30,960
and of course these are synthetic

494
00:18:30,960 --> 00:18:32,400
benchmarks but I think they're useful to

495
00:18:32,400 --> 00:18:35,730
see in this case how fast we can we can

496
00:18:35,730 --> 00:18:38,370
update or down so when I informed stem

497
00:18:38,370 --> 00:18:42,510
of this it was all about reactor so this

498
00:18:42,510 --> 00:18:48,480
is react we run Dover five seconds able

499
00:18:48,480 --> 00:18:49,740
to get 10 run in a second that's pretty

500
00:18:49,740 --> 00:18:52,049
fast it's really smooth if I scroll down

501
00:18:52,049 --> 00:19:00,890
here a very little drink all right so

502
00:19:00,890 --> 00:19:04,590
ember influence the glimmer engine

503
00:19:04,590 --> 00:19:07,940
recently take their own approach to

504
00:19:07,940 --> 00:19:11,070
updating the DOM and just as fast as

505
00:19:11,070 --> 00:19:13,830
react now so that was really exciting at

506
00:19:13,830 --> 00:19:16,590
amber comp this year so we get 900

507
00:19:16,590 --> 00:19:19,740
second so just about at react speech so

508
00:19:19,740 --> 00:19:22,080
we looked at all this this was sort of

509
00:19:22,080 --> 00:19:23,429
what we looked at before we wrote

510
00:19:23,429 --> 00:19:25,200
tungsten we're like really want to be

511
00:19:25,200 --> 00:19:28,169
this fast renew we can do it with our

512
00:19:28,169 --> 00:19:30,900
current infrastructure but you know as

513
00:19:30,900 --> 00:19:32,159
we realize that we couldn't rewrite

514
00:19:32,159 --> 00:19:33,690
everything we knew we probably wouldn't

515
00:19:33,690 --> 00:19:35,400
get to those speeds and we wanted to

516
00:19:35,400 --> 00:19:37,049
sort of be in the same ballpark that was

517
00:19:37,049 --> 00:19:39,929
kind of the goal so let's see what we

518
00:19:39,929 --> 00:19:47,429
can get understand Jenkins want too bad

519
00:19:47,429 --> 00:19:53,220
let's see what we get for renders

520
00:19:53,230 --> 00:19:56,030
alright so I'm ten or two seconds so

521
00:19:56,030 --> 00:19:58,040
pretty pretty close to mboro glimmer and

522
00:19:58,040 --> 00:20:06,200
react yeah thank you yeah we were really

523
00:20:06,200 --> 00:20:08,480
happy with it and you know we looked at

524
00:20:08,480 --> 00:20:10,160
this in at the end of the day if you

525
00:20:10,160 --> 00:20:12,770
know a few renders more more or less per

526
00:20:12,770 --> 00:20:15,800
second wasn't really a game changer but

527
00:20:15,800 --> 00:20:17,840
it was is cool to be there and kind of

528
00:20:17,840 --> 00:20:19,250
be in that space and realize that we

529
00:20:19,250 --> 00:20:22,250
could do it you know taking our existing

530
00:20:22,250 --> 00:20:25,070
our existing infrastructure I have this

531
00:20:25,070 --> 00:20:27,290
last library that I want a demo in this

532
00:20:27,290 --> 00:20:28,370
is just really lightweight library

533
00:20:28,370 --> 00:20:30,470
called paper clip and it does dipping a

534
00:20:30,470 --> 00:20:33,770
little bit different way it's really

535
00:20:33,770 --> 00:20:35,810
fast so what's interesting about this is

536
00:20:35,810 --> 00:20:37,370
we looked around we realized there's

537
00:20:37,370 --> 00:20:38,990
still more work that we can do there's

538
00:20:38,990 --> 00:20:41,300
still places that we can improve there

539
00:20:41,300 --> 00:20:42,980
are still optimizations that we can make

540
00:20:42,980 --> 00:20:44,990
in terms of updating parts to our page

541
00:20:44,990 --> 00:20:47,230
or doing different faster or

542
00:20:47,230 --> 00:20:48,950
conditionally doing different based on

543
00:20:48,950 --> 00:20:51,620
our changing data the interesting thing

544
00:20:51,620 --> 00:20:53,780
is that we can do this ourselves now as

545
00:20:53,780 --> 00:20:55,700
opposed to having to rely on a library

546
00:20:55,700 --> 00:20:57,830
to do that for us we can start to find

547
00:20:57,830 --> 00:20:59,770
places in our own code in our own

548
00:20:59,770 --> 00:21:02,120
implementations and see where it's

549
00:21:02,120 --> 00:21:04,790
useful to make it faster where it might

550
00:21:04,790 --> 00:21:07,240
give us the most benefit so if I pull up

551
00:21:07,240 --> 00:21:13,580
this library which we've we've been

552
00:21:13,580 --> 00:21:16,780
looking at it that's really fast and

553
00:21:16,780 --> 00:21:18,920
this is actually going to be quite

554
00:21:18,920 --> 00:21:22,340
fascinated implementations yeah 30

555
00:21:22,340 --> 00:21:25,510
wonders say so the point being you know

556
00:21:25,510 --> 00:21:28,460
there's more work to do and it's nice to

557
00:21:28,460 --> 00:21:30,050
be able to do that in our existing

558
00:21:30,050 --> 00:21:31,730
infrastructure and make progress in a

559
00:21:31,730 --> 00:21:33,380
way that makes sense for for our use

560
00:21:33,380 --> 00:21:36,230
cases and for our customers and yeah

561
00:21:36,230 --> 00:21:37,790
we'd love to hear your feedback on

562
00:21:37,790 --> 00:21:39,620
tungsten I have stickers because

563
00:21:39,620 --> 00:21:40,910
apparently you've made it like as a

564
00:21:40,910 --> 00:21:44,620
library you get your own stickers so uh

565
00:21:44,620 --> 00:22:14,290
all right thank you

