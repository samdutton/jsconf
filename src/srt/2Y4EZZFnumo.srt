1
00:00:09,440 --> 00:00:12,540

I'm Curtis with uber I'm the engineering

2
00:00:12,540 --> 00:00:15,780
manager uber this is being over with

3
00:00:15,780 --> 00:00:18,810
note do you anybody here know what Ober

4
00:00:18,810 --> 00:00:20,760
is or has used it before yeah we got a

5
00:00:20,760 --> 00:00:21,840
big fan right there

6
00:00:21,840 --> 00:00:24,210
a couple here for everybody else we'll

7
00:00:24,210 --> 00:00:29,789
talk about my thing works Oh what is

8
00:00:29,789 --> 00:00:31,769
uber just so everybody knows what we're

9
00:00:31,769 --> 00:00:34,230
talking about this but basically it's an

10
00:00:34,230 --> 00:00:36,120
iPhone app and Android app you can also

11
00:00:36,120 --> 00:00:38,160
do it with SMS but basically you press

12
00:00:38,160 --> 00:00:39,930
single button that green button there

13
00:00:39,930 --> 00:00:42,270
and magically a car shows up a black

14
00:00:42,270 --> 00:00:43,860
town car it's fancy it takes you where

15
00:00:43,860 --> 00:00:46,410
you want to go and it's automatically

16
00:00:46,410 --> 00:00:48,390
billed to your credit card no tipping no

17
00:00:48,390 --> 00:00:51,440
cash it's just like magical service and

18
00:00:51,440 --> 00:00:53,699
people that use it love it they go nuts

19
00:00:53,699 --> 00:01:01,649
over it and anyway where you can use it

20
00:01:01,649 --> 00:01:03,390
right now we're in San Francisco we've

21
00:01:03,390 --> 00:01:05,360
been in San Francisco for almost a year

22
00:01:05,360 --> 00:01:08,580
and as of two days ago we launched in

23
00:01:08,580 --> 00:01:10,590
New York as well so we're pretty excited

24
00:01:10,590 --> 00:01:12,030
about that it was kind of stressful

25
00:01:12,030 --> 00:01:13,260
doing that while trying to prepare this

26
00:01:13,260 --> 00:01:19,020
talk so and actually we're about to

27
00:01:19,020 --> 00:01:21,270
expand as TechCrunch to said Seattle

28
00:01:21,270 --> 00:01:24,360
Chicago Boston and DC so if you know

29
00:01:24,360 --> 00:01:26,520
anybody there that needs a job or if you

30
00:01:26,520 --> 00:01:28,049
live in any of those cities we're coming

31
00:01:28,049 --> 00:01:32,009
here soon try it out so yeah anyway the

32
00:01:32,009 --> 00:01:33,720
the real goal of this talk is to talk

33
00:01:33,720 --> 00:01:37,909
about how we went from an old terrible

34
00:01:37,909 --> 00:01:41,579
lamp based system to a node-based system

35
00:01:41,579 --> 00:01:43,530
and it was kind of a huge pain to do and

36
00:01:43,530 --> 00:01:47,850
it's still concurrently huge pain but to

37
00:01:47,850 --> 00:01:49,049
go into that I want to talk a little bit

38
00:01:49,049 --> 00:01:50,970
about the story of node and how it came

39
00:01:50,970 --> 00:01:51,299
about

40
00:01:51,299 --> 00:01:53,579
so our co-founders Travis and Garrett

41
00:01:53,579 --> 00:01:54,630
we're basically sitting around and

42
00:01:54,630 --> 00:01:56,159
they're like you know it would be really

43
00:01:56,159 --> 00:01:57,630
awesome if I could get a car on Friday

44
00:01:57,630 --> 00:01:58,979
night because the cab situation in San

45
00:01:58,979 --> 00:02:00,869
Francisco so terrible I just want to

46
00:02:00,869 --> 00:02:02,310
push a button on my phone and have a car

47
00:02:02,310 --> 00:02:04,200
show a private driver maybe we could

48
00:02:04,200 --> 00:02:05,430
share this driver with a bunch of our

49
00:02:05,430 --> 00:02:08,700
friends and so basically they sort of

50
00:02:08,700 --> 00:02:10,289
had this proof-of-concept built out that

51
00:02:10,289 --> 00:02:11,730
was just like can we make it so you can

52
00:02:11,730 --> 00:02:13,740
push a button and a driver shows up

53
00:02:13,740 --> 00:02:15,690
and so it was like built on a lamp stack

54
00:02:15,690 --> 00:02:18,300
a very basic proof-of-concept not you

55
00:02:18,300 --> 00:02:20,820
know it scalable anything like that it

56
00:02:20,820 --> 00:02:22,710
basically kind of looked like this it's

57
00:02:22,710 --> 00:02:24,800
like the phone just talks to PHP and

58
00:02:24,800 --> 00:02:26,940
mice equal stores all the data about the

59
00:02:26,940 --> 00:02:28,490
drivers where they are all this and that

60
00:02:28,490 --> 00:02:30,810
this architecture is cool when it's just

61
00:02:30,810 --> 00:02:33,000
you and a driver or maybe a couple of

62
00:02:33,000 --> 00:02:34,500
your friends and a driver but suddenly

63
00:02:34,500 --> 00:02:37,200
you have you know we decided to release

64
00:02:37,200 --> 00:02:39,390
it to the world you know anybody can get

65
00:02:39,390 --> 00:02:40,980
their own private driver with with uber

66
00:02:40,980 --> 00:02:43,080
and so when then you have a ton of

67
00:02:43,080 --> 00:02:45,750
phones and PHP like there's a ton of

68
00:02:45,750 --> 00:02:47,700
Apache processes going on which can

69
00:02:47,700 --> 00:02:51,360
cause some issues when you have let's

70
00:02:51,360 --> 00:02:53,040
say a hundred drivers on the system and

71
00:02:53,040 --> 00:02:56,310
thousands of clients you know one driver

72
00:02:56,310 --> 00:02:59,190
is dispatched to two clients two clients

73
00:02:59,190 --> 00:03:02,370
think they have the same driver all

74
00:03:02,370 --> 00:03:04,980
right that's the same thing but there's

75
00:03:04,980 --> 00:03:06,540
a lot of like concurrency problems a lot

76
00:03:06,540 --> 00:03:08,310
of race conditions you need as a

77
00:03:08,310 --> 00:03:10,650
dispatch system you need one solid

78
00:03:10,650 --> 00:03:12,210
process that knows about all the drivers

79
00:03:12,210 --> 00:03:13,740
all the clients can connect them

80
00:03:13,740 --> 00:03:15,990
properly so this architecture doesn't

81
00:03:15,990 --> 00:03:20,610
really work very well so in order to you

82
00:03:20,610 --> 00:03:22,290
know move from this to something that

83
00:03:22,290 --> 00:03:24,000
that made more sense like we started

84
00:03:24,000 --> 00:03:25,500
evaluating solutions what's out there

85
00:03:25,500 --> 00:03:27,480
how can we build a dispatch system that

86
00:03:27,480 --> 00:03:28,860
doesn't have these issues and isn't sort

87
00:03:28,860 --> 00:03:32,160
of kind of hacked together and we

88
00:03:32,160 --> 00:03:33,660
thought node would be perfect for this

89
00:03:33,660 --> 00:03:36,150
single threaded you know it has all the

90
00:03:36,150 --> 00:03:37,500
objects in memory it knows where all the

91
00:03:37,500 --> 00:03:38,880
drivers are all the clients are there's

92
00:03:38,880 --> 00:03:40,410
none of these double dispatch issues it

93
00:03:40,410 --> 00:03:44,390
connects one driver at a time so a

94
00:03:44,390 --> 00:03:46,470
problem is this is live and we already

95
00:03:46,470 --> 00:03:49,290
had like tons of people using it so we

96
00:03:49,290 --> 00:03:50,730
can't just turn the system off build a

97
00:03:50,730 --> 00:03:52,890
node one and then turn it back on again

98
00:03:52,890 --> 00:03:54,750
this thing's going 24 hours a day

99
00:03:54,750 --> 00:03:56,190
there's cars going 24 hours a day

100
00:03:56,190 --> 00:03:57,300
there's people wanting rides all the

101
00:03:57,300 --> 00:04:01,230
time 5 a.m. 3 a.m. whatever so we went

102
00:04:01,230 --> 00:04:03,210
component by component to try and fix it

103
00:04:03,210 --> 00:04:07,130
so basically the first thing was

104
00:04:07,130 --> 00:04:09,480
dispatch that this PHP was doing a lot

105
00:04:09,480 --> 00:04:11,070
of stuff that wasn't dispatch related

106
00:04:11,070 --> 00:04:13,290
you know like at the end of trips it

107
00:04:13,290 --> 00:04:15,330
calculates affaire it does various

108
00:04:15,330 --> 00:04:17,700
things and looking them up so first we

109
00:04:17,700 --> 00:04:18,959
abstract it out all the non-essential

110
00:04:18,959 --> 00:04:21,900
dispatch functions to a Python API and

111
00:04:21,900 --> 00:04:24,710
so basically now

112
00:04:24,710 --> 00:04:26,720
dispatch was very simple very basic

113
00:04:26,720 --> 00:04:28,610
connects clients and drivers still had

114
00:04:28,610 --> 00:04:30,169
issues but we patched the issues so it

115
00:04:30,169 --> 00:04:31,639
was kind of this ghetto-fabulous

116
00:04:31,639 --> 00:04:34,190
solution of like it'll double dispatch

117
00:04:34,190 --> 00:04:35,690
but then reverse it on one of them and

118
00:04:35,690 --> 00:04:37,430
then it'll come back and it it's a

119
00:04:37,430 --> 00:04:39,110
nightmare

120
00:04:39,110 --> 00:04:41,270
so then we you said oK we've got that

121
00:04:41,270 --> 00:04:43,759
out of there maybe now we can slide note

122
00:04:43,759 --> 00:04:45,199
in and actually I don't have a slide for

123
00:04:45,199 --> 00:04:47,419
this but we slid a little node what we

124
00:04:47,419 --> 00:04:48,830
call connection notes in between the

125
00:04:48,830 --> 00:04:51,139
phones and the PHP layer to basically

126
00:04:51,139 --> 00:04:55,550
kind of it manages all the connections

127
00:04:55,550 --> 00:04:56,900
with the persistent connections with the

128
00:04:56,900 --> 00:04:58,970
phones and then tells PHP dispatch like

129
00:04:58,970 --> 00:05:01,250
what to do what to do in that regard and

130
00:05:01,250 --> 00:05:04,610
so then it allowed us to also like put a

131
00:05:04,610 --> 00:05:07,430
new dispatch in the backend and have our

132
00:05:07,430 --> 00:05:08,990
connection node setting it to both new

133
00:05:08,990 --> 00:05:11,660
and old dispatch which then allows us to

134
00:05:11,660 --> 00:05:13,849
test the system live we have two

135
00:05:13,849 --> 00:05:15,349
dispatchers running one of which is real

136
00:05:15,349 --> 00:05:17,389
one of which is a test one make sure the

137
00:05:17,389 --> 00:05:19,550
same things happen and so then now you

138
00:05:19,550 --> 00:05:21,770
can have like node here now this box is

139
00:05:21,770 --> 00:05:24,020
somewhat misleading there's actually a

140
00:05:24,020 --> 00:05:25,430
lot of different components here there's

141
00:05:25,430 --> 00:05:26,870
the connection node that I was talking

142
00:05:26,870 --> 00:05:28,729
about all the phones talk to that you

143
00:05:28,729 --> 00:05:29,630
know there's a ton of different

144
00:05:29,630 --> 00:05:32,180
instances of it it does request

145
00:05:32,180 --> 00:05:33,590
management and make sure that once the

146
00:05:33,590 --> 00:05:35,210
phone sends a request it eventually gets

147
00:05:35,210 --> 00:05:37,099
to dispatch or gets to the API or gets

148
00:05:37,099 --> 00:05:38,990
wherever it needs to go has built-in

149
00:05:38,990 --> 00:05:41,300
retrying things like that there's the

150
00:05:41,300 --> 00:05:43,190
dispatch server which is a node which

151
00:05:43,190 --> 00:05:45,979
maintains in memory all the drivers all

152
00:05:45,979 --> 00:05:47,979
the clients everything that's going on

153
00:05:47,979 --> 00:05:50,750
so there's actually a few different

154
00:05:50,750 --> 00:05:54,590
tiers inside of that node but the

155
00:05:54,590 --> 00:05:57,800
problem is we needed like this is sort

156
00:05:57,800 --> 00:06:02,240
of a master slave system here like on

157
00:06:02,240 --> 00:06:03,740
the dispatch side because we can't have

158
00:06:03,740 --> 00:06:06,909
like five different dispatches all

159
00:06:06,909 --> 00:06:09,500
serving up drivers you know it's we need

160
00:06:09,500 --> 00:06:11,210
the single threaded nosov node but still

161
00:06:11,210 --> 00:06:14,180
need high availability so actually each

162
00:06:14,180 --> 00:06:16,070
of the the dispatches see realises its

163
00:06:16,070 --> 00:06:18,050
state or I guess there's another slide

164
00:06:18,050 --> 00:06:20,120
here which basically separated this into

165
00:06:20,120 --> 00:06:22,009
like a real-time system and a historical

166
00:06:22,009 --> 00:06:22,909
system this is everything that's

167
00:06:22,909 --> 00:06:25,759
happened in the past versus node is

168
00:06:25,759 --> 00:06:26,840
everything that's happening right now

169
00:06:26,840 --> 00:06:29,930
where everything is at the moment so

170
00:06:29,930 --> 00:06:31,820
anyway we serialized things out to Mongo

171
00:06:31,820 --> 00:06:34,190
so that basically should one of the

172
00:06:34,190 --> 00:06:36,200
dispatch servers fail it can pull the

173
00:06:36,200 --> 00:06:37,590
current state of the

174
00:06:37,590 --> 00:06:39,270
of the master dispatch server back into

175
00:06:39,270 --> 00:06:40,590
one of the slaves in it then takes over

176
00:06:40,590 --> 00:06:43,740
as the master so anyway in order to

177
00:06:43,740 --> 00:06:46,950
accomplish this what we call no requests

178
00:06:46,950 --> 00:06:49,050
left behind we built a few components

179
00:06:49,050 --> 00:06:51,780
ones called request manager another is

180
00:06:51,780 --> 00:06:53,940
called slave master which may or may not

181
00:06:53,940 --> 00:06:56,460
be politically correct and then we also

182
00:06:56,460 --> 00:06:58,050
have Mongo rapper now I talked a little

183
00:06:58,050 --> 00:07:02,520
bit about these one thing we found that

184
00:07:02,520 --> 00:07:04,890
was difficult to with note is it's a

185
00:07:04,890 --> 00:07:06,510
process constantly running and we get

186
00:07:06,510 --> 00:07:08,190
hundreds of requests per second from all

187
00:07:08,190 --> 00:07:11,190
of our drivers phones if we need to push

188
00:07:11,190 --> 00:07:13,590
out new code and restart it we may or

189
00:07:13,590 --> 00:07:15,240
may not lose one of those requests and

190
00:07:15,240 --> 00:07:17,580
so we built request manager so that we

191
00:07:17,580 --> 00:07:19,530
could basically tell node like hey I'm

192
00:07:19,530 --> 00:07:21,090
gonna shut down and restart because I

193
00:07:21,090 --> 00:07:22,620
have new code and it would finish

194
00:07:22,620 --> 00:07:23,850
serving up all the requests that had

195
00:07:23,850 --> 00:07:25,470
gotten while blocking all the others it

196
00:07:25,470 --> 00:07:27,720
would return a 410 gone message and so

197
00:07:27,720 --> 00:07:31,710
basically it would say you know I'm not

198
00:07:31,710 --> 00:07:33,030
accepting any more requests but I'm

199
00:07:33,030 --> 00:07:34,380
gonna still fulfill all the ones that

200
00:07:34,380 --> 00:07:36,150
have already come in and then basically

201
00:07:36,150 --> 00:07:37,890
once it's cleared out that entire queue

202
00:07:37,890 --> 00:07:39,990
it then restarts itself and so we now

203
00:07:39,990 --> 00:07:41,340
have a deployment strategy that doesn't

204
00:07:41,340 --> 00:07:44,220
ever lose any requests that come in the

205
00:07:44,220 --> 00:07:46,970
slave master is an interesting component

206
00:07:46,970 --> 00:07:51,030
basically it as I kind of described

207
00:07:51,030 --> 00:07:53,220
before we have this dispatch system but

208
00:07:53,220 --> 00:07:54,780
there could only be one master and that

209
00:07:54,780 --> 00:07:56,820
one does all of the dispatches but we

210
00:07:56,820 --> 00:07:58,080
need these slaves here in case something

211
00:07:58,080 --> 00:07:59,640
happens to the master and so we built

212
00:07:59,640 --> 00:08:00,690
something that's kind of similar to

213
00:08:00,690 --> 00:08:03,270
MongoDB replicas sets but not quite as

214
00:08:03,270 --> 00:08:05,730
sophisticated or basically there's a

215
00:08:05,730 --> 00:08:08,640
pool of them and if the master ever goes

216
00:08:08,640 --> 00:08:10,350
down the slaves elect a new master and

217
00:08:10,350 --> 00:08:13,650
within milliseconds we've it reloads its

218
00:08:13,650 --> 00:08:16,200
state and so again we don't lose

219
00:08:16,200 --> 00:08:17,700
anything and if if any of the

220
00:08:17,700 --> 00:08:21,390
connections on the tier above it you

221
00:08:21,390 --> 00:08:23,640
know sent one to let's say the slave

222
00:08:23,640 --> 00:08:25,230
accidentally it would say like I'm sorry

223
00:08:25,230 --> 00:08:26,700
I'm not the master this guy is and then

224
00:08:26,700 --> 00:08:29,100
it resends the request so those two

225
00:08:29,100 --> 00:08:32,430
combined make it so we basically never

226
00:08:32,430 --> 00:08:36,150
lose any requests coming in now Mongo

227
00:08:36,150 --> 00:08:37,590
wrappers just sort of a helper thing we

228
00:08:37,590 --> 00:08:40,020
built so that MongoDB was a little bit

229
00:08:40,020 --> 00:08:43,620
easier to interface with and in a node

230
00:08:43,620 --> 00:08:45,840
because if you've used the MongoDB when

231
00:08:45,840 --> 00:08:46,860
you know you have to make a connection

232
00:08:46,860 --> 00:08:48,630
and then you insert the collections if

233
00:08:48,630 --> 00:08:50,820
it fails it has to reconnect and you get

234
00:08:50,820 --> 00:08:51,840
this asynchronous night

235
00:08:51,840 --> 00:08:53,670
where you're tabbed in like you know

236
00:08:53,670 --> 00:08:56,040
eight times just to handle a single call

237
00:08:56,040 --> 00:08:58,290
so anyway I'll show some brief examples

238
00:08:58,290 --> 00:08:59,580
of these modules we're thinking about

239
00:08:59,580 --> 00:09:00,630
open sourcing and we just need a

240
00:09:00,630 --> 00:09:06,660
genericized a little bit so so request

241
00:09:06,660 --> 00:09:08,790
manager is very simple and your

242
00:09:08,790 --> 00:09:11,070
constructor of like your server you just

243
00:09:11,070 --> 00:09:12,300
start up a new request manager it

244
00:09:12,300 --> 00:09:14,640
listens on a port let's say 9000 and

245
00:09:14,640 --> 00:09:17,430
anytime that the server receives a

246
00:09:17,430 --> 00:09:20,220
request it doesn't the request manager

247
00:09:20,220 --> 00:09:21,510
and it creates a context with the

248
00:09:21,510 --> 00:09:23,640
request the body that it just received

249
00:09:23,640 --> 00:09:26,370
as well as the response object and then

250
00:09:26,370 --> 00:09:28,650
our server let's says say processes the

251
00:09:28,650 --> 00:09:30,870
message of that that's all the code you

252
00:09:30,870 --> 00:09:32,430
need to basically use request manager

253
00:09:32,430 --> 00:09:33,960
that's all we added to our server and

254
00:09:33,960 --> 00:09:37,380
now we have the ability to restart node

255
00:09:37,380 --> 00:09:39,570
without ever losing any requests which

256
00:09:39,570 --> 00:09:43,800
is awesome it's really that's it and

257
00:09:43,800 --> 00:09:47,150
it's pretty basic

258
00:09:47,160 --> 00:09:51,270
the next piece the slave master piece

259
00:09:51,270 --> 00:09:53,850
there basically is a like array of

260
00:09:53,850 --> 00:09:57,060
servers you know this is like a snippet

261
00:09:57,060 --> 00:09:59,330
of our configuration file let's say

262
00:09:59,330 --> 00:10:02,460
listens on the port publicly then

263
00:10:02,460 --> 00:10:03,840
there's the request manager port as well

264
00:10:03,840 --> 00:10:05,520
as the slave master port so all the

265
00:10:05,520 --> 00:10:07,470
masters and slaves talk on port 8000 and

266
00:10:07,470 --> 00:10:08,880
- they're constantly talking to each

267
00:10:08,880 --> 00:10:12,000
other to make sure that they know who

268
00:10:12,000 --> 00:10:15,030
the master is that everything's cool and

269
00:10:15,030 --> 00:10:17,340
this is again is really simple all we

270
00:10:17,340 --> 00:10:20,490
did is say new slave master I am server

271
00:10:20,490 --> 00:10:23,070
1 let's say or server 2 and here's the

272
00:10:23,070 --> 00:10:25,380
list of all the servers and there's a

273
00:10:25,380 --> 00:10:27,870
callback so basically when I become the

274
00:10:27,870 --> 00:10:30,120
master I need to load in data from Mongo

275
00:10:30,120 --> 00:10:33,860
so that I can take over as the master so

276
00:10:33,860 --> 00:10:36,150
that's pretty much all that was - we

277
00:10:36,150 --> 00:10:37,380
built all these components after we

278
00:10:37,380 --> 00:10:38,640
built the dispatch system just a

279
00:10:38,640 --> 00:10:40,380
bullet-proof it and we built them in

280
00:10:40,380 --> 00:10:41,820
such a way that only took like three or

281
00:10:41,820 --> 00:10:44,280
four lines of code to basically make it

282
00:10:44,280 --> 00:10:49,350
bulletproof in that regard so and then

283
00:10:49,350 --> 00:10:51,870
Mongo wrapper again really simple works

284
00:10:51,870 --> 00:10:54,000
with replica sets or just a host port

285
00:10:54,000 --> 00:10:55,950
pair passing the replicas set the

286
00:10:55,950 --> 00:10:57,810
database you want to do there's a retry

287
00:10:57,810 --> 00:10:59,940
limit or retry interval

288
00:10:59,940 --> 00:11:01,860
you know in case Mongo goes down which

289
00:11:01,860 --> 00:11:04,110
in a replica set would be kind of a

290
00:11:04,110 --> 00:11:05,670
highly unlikely but you never know

291
00:11:05,670 --> 00:11:07,380
one of the things that manga rapper

292
00:11:07,380 --> 00:11:09,210
provides that we added was journaling

293
00:11:09,210 --> 00:11:13,260
now Mongo does journaling on its own but

294
00:11:13,260 --> 00:11:14,490
it doesn't journal when it's down

295
00:11:14,490 --> 00:11:17,610
because it doesn't exist so we have our

296
00:11:17,610 --> 00:11:19,920
own journaling that basically writes to

297
00:11:19,920 --> 00:11:21,480
the file system all the queries that

298
00:11:21,480 --> 00:11:24,270
didn't make it into Mongo and so there's

299
00:11:24,270 --> 00:11:26,190
a backup directory there how long it

300
00:11:26,190 --> 00:11:27,960
retries and restores and then basically

301
00:11:27,960 --> 00:11:30,360
anytime we need to insert update remove

302
00:11:30,360 --> 00:11:32,250
from Mongo it's as simple as a one-line

303
00:11:32,250 --> 00:11:33,840
call and it handles all the reconnecting

304
00:11:33,840 --> 00:11:36,960
the Mongo you know making sure that

305
00:11:36,960 --> 00:11:38,910
requests eventually gets there no matter

306
00:11:38,910 --> 00:11:42,570
what so yeah that's a Mongo rapper

307
00:11:42,570 --> 00:11:45,000
component we also built a serializer

308
00:11:45,000 --> 00:11:47,250
that serialize a state to Mongo but I

309
00:11:47,250 --> 00:11:49,260
didn't really write that cuz it's very

310
00:11:49,260 --> 00:11:51,420
specific to our use case but these are

311
00:11:51,420 --> 00:11:53,370
some of the things that we we think

312
00:11:53,370 --> 00:11:55,140
about open sourcing I'd be curious if

313
00:11:55,140 --> 00:11:57,000
anybody would like these components

314
00:11:57,000 --> 00:11:58,050
because then we'll definitely work on

315
00:11:58,050 --> 00:11:59,310
that open source it maybe get some

316
00:11:59,310 --> 00:12:01,170
people to contribute to them but they

317
00:12:01,170 --> 00:12:02,970
actually made our whole architecture

318
00:12:02,970 --> 00:12:04,680
like completely bulletproof we don't

319
00:12:04,680 --> 00:12:06,060
even care anymore when servers go down

320
00:12:06,060 --> 00:12:07,650
that used to be our nightmare on Friday

321
00:12:07,650 --> 00:12:10,710
nights like out of the bar I get these

322
00:12:10,710 --> 00:12:12,840
email notifications it's just you know

323
00:12:12,840 --> 00:12:14,850
the entire architecture originally was

324
00:12:14,850 --> 00:12:16,290
running on one server which is never

325
00:12:16,290 --> 00:12:21,090
gonna be a good idea so there's a few

326
00:12:21,090 --> 00:12:23,850
other things that we got from moving

327
00:12:23,850 --> 00:12:25,620
things to node like kind of ancillary

328
00:12:25,620 --> 00:12:28,020
benefits to our tools that are actually

329
00:12:28,020 --> 00:12:29,310
really interesting we can now share

330
00:12:29,310 --> 00:12:31,050
these JavaScript objects between both

331
00:12:31,050 --> 00:12:33,030
the client and the server now most of

332
00:12:33,030 --> 00:12:34,620
our app is you know our client is on

333
00:12:34,620 --> 00:12:36,420
iPhones on androids SMS it's not a

334
00:12:36,420 --> 00:12:39,420
JavaScript client but we have a lot of

335
00:12:39,420 --> 00:12:41,850
internal tools that are JavaScript like

336
00:12:41,850 --> 00:12:44,520
monitoring tools the big one that wired

337
00:12:44,520 --> 00:12:46,110
did a story about us recently and they

338
00:12:46,110 --> 00:12:47,490
talked about this as well as The Wall

339
00:12:47,490 --> 00:12:50,280
Street Journal is called God view and

340
00:12:50,280 --> 00:12:53,520
God views basically what we do while I

341
00:12:53,520 --> 00:12:55,290
watch this all Friday night now like

342
00:12:55,290 --> 00:12:56,460
it's amazing it's just so much fun to

343
00:12:56,460 --> 00:12:58,860
watch it's a live real-time Google Maps

344
00:12:58,860 --> 00:13:00,210
interface of where all the cars are

345
00:13:00,210 --> 00:13:01,470
where they're going who they're picking

346
00:13:01,470 --> 00:13:06,120
up what they're doing and so we built

347
00:13:06,120 --> 00:13:07,920
this before and just hand coded it up

348
00:13:07,920 --> 00:13:09,900
we had our intern last summer coded up

349
00:13:09,900 --> 00:13:12,950
in one night and but now we can actually

350
00:13:12,950 --> 00:13:16,350
make god of you a little bit more

351
00:13:16,350 --> 00:13:17,790
maintainable I'm thinking about

352
00:13:17,790 --> 00:13:19,130
rewriting it with now Jay

353
00:13:19,130 --> 00:13:20,840
I just learned about that yesterday or

354
00:13:20,840 --> 00:13:22,640
two days ago at Jay s Kampf you know

355
00:13:22,640 --> 00:13:25,220
basically saying to the to the note

356
00:13:25,220 --> 00:13:26,570
dispatch like hey give me all the

357
00:13:26,570 --> 00:13:28,310
clients and drivers I'm just gonna draw

358
00:13:28,310 --> 00:13:31,490
them on the map here and so we have a

359
00:13:31,490 --> 00:13:32,930
lot of internal tools that are now made

360
00:13:32,930 --> 00:13:35,180
easier to implement because of note you

361
00:13:35,180 --> 00:13:36,350
know we don't have to maintain a

362
00:13:36,350 --> 00:13:38,060
separate PHP code base with all these

363
00:13:38,060 --> 00:13:39,590
objects and a separate JavaScript code

364
00:13:39,590 --> 00:13:40,820
base and then we also have the Python

365
00:13:40,820 --> 00:13:42,560
code base and it's just out of control

366
00:13:42,560 --> 00:13:44,690
we've we've basically now just purely

367
00:13:44,690 --> 00:13:47,440
JavaScript and some Python as well so

368
00:13:47,440 --> 00:13:49,340
some of the other cool things we've been

369
00:13:49,340 --> 00:13:52,730
doing with some of this data is uh heat

370
00:13:52,730 --> 00:13:54,590
maps we've been trying to find new and

371
00:13:54,590 --> 00:13:56,540
interesting heat maps to display or what

372
00:13:56,540 --> 00:13:59,780
we call data porn team we have like

373
00:13:59,780 --> 00:14:04,250
several PhDs that that work on mining

374
00:14:04,250 --> 00:14:05,390
our data so that we can make the whole

375
00:14:05,390 --> 00:14:07,850
system more efficient this isn't really

376
00:14:07,850 --> 00:14:09,200
node related but it's just kind of cool

377
00:14:09,200 --> 00:14:11,810
to look at and it's an it's like really

378
00:14:11,810 --> 00:14:14,360
intense data analysis so for example

379
00:14:14,360 --> 00:14:17,180
this is San Francisco all these points

380
00:14:17,180 --> 00:14:18,800
are points where the drivers were when

381
00:14:18,800 --> 00:14:20,480
they accepted a request and it's kind of

382
00:14:20,480 --> 00:14:22,310
cool how it just outlines the cities and

383
00:14:22,310 --> 00:14:26,120
you can see where where they wait when

384
00:14:26,120 --> 00:14:27,800
they're about to go pick up people all

385
00:14:27,800 --> 00:14:29,930
over the place and then there's things

386
00:14:29,930 --> 00:14:31,220
like this this is Manhattan this is

387
00:14:31,220 --> 00:14:33,200
where people have opened our app and

388
00:14:33,200 --> 00:14:34,640
tried to get a car in Manhattan so this

389
00:14:34,640 --> 00:14:36,410
is like basically the demand heat map of

390
00:14:36,410 --> 00:14:40,160
Manhattan for people that want an uber

391
00:14:40,160 --> 00:14:42,080
car and then there's other ones that

392
00:14:42,080 --> 00:14:43,880
we've been doing some more intense data

393
00:14:43,880 --> 00:14:45,410
analysis about like how long it takes

394
00:14:45,410 --> 00:14:47,570
for our cars to arrive so we have heat

395
00:14:47,570 --> 00:14:50,210
maps like this which is that's basically

396
00:14:50,210 --> 00:14:51,770
San Francisco you can kind of see the

397
00:14:51,770 --> 00:14:53,810
outlines of the streets and basically

398
00:14:53,810 --> 00:14:55,760
how many seconds it takes for our car to

399
00:14:55,760 --> 00:14:57,440
arrive once you say I need a car and

400
00:14:57,440 --> 00:14:59,180
we're actually really good in various

401
00:14:59,180 --> 00:15:01,610
areas of downtown obviously out in this

402
00:15:01,610 --> 00:15:04,580
burbs we're not as good but there's not

403
00:15:04,580 --> 00:15:06,320
as much volume there so it kind of makes

404
00:15:06,320 --> 00:15:08,960
sense so these are kind of some of the

405
00:15:08,960 --> 00:15:10,910
problems that we're solving node has

406
00:15:10,910 --> 00:15:13,010
helped us make a really cool scalable

407
00:15:13,010 --> 00:15:15,500
distributed architecture the CEO and I

408
00:15:15,500 --> 00:15:17,330
had a peer-to-peer content delivery

409
00:15:17,330 --> 00:15:18,710
network before called red swoosh so

410
00:15:18,710 --> 00:15:19,660
we're really good at building

411
00:15:19,660 --> 00:15:23,000
distributed like fault tolerant reliance

412
00:15:23,000 --> 00:15:24,410
systems and so we're taking that that

413
00:15:24,410 --> 00:15:26,930
knowledge and basically bringing it to

414
00:15:26,930 --> 00:15:30,110
you know an on-demand car service that's

415
00:15:30,110 --> 00:15:33,169
going to be in every city in the u.s. so

416
00:15:33,169 --> 00:15:35,929
and then again like we said we have

417
00:15:35,929 --> 00:15:37,639
teams of people doing this amazing data

418
00:15:37,639 --> 00:15:41,899
analysis as well so yeah if you want to

419
00:15:41,899 --> 00:15:42,829
read more about some of the data

420
00:15:42,829 --> 00:15:44,569
analysis we do we publish it to our blog

421
00:15:44,569 --> 00:15:46,429
this is the link to see the two posts

422
00:15:46,429 --> 00:15:49,129
that we've done so far one was a we

423
00:15:49,129 --> 00:15:50,389
analyze we could take the weather data

424
00:15:50,389 --> 00:15:52,399
and correlated it analyze the effect of

425
00:15:52,399 --> 00:15:54,169
rain on demand and it turns out rain is

426
00:15:54,169 --> 00:15:56,149
amazing for our business I used to love

427
00:15:56,149 --> 00:15:58,160
sunny days now I don't anymore

428
00:15:58,160 --> 00:16:00,769
so that's why you know why we're going

429
00:16:00,769 --> 00:16:05,929
to Seattle so anyway if you want to

430
00:16:05,929 --> 00:16:07,220
check out some of our data post we have

431
00:16:07,220 --> 00:16:08,629
this we also have one that shows how

432
00:16:08,629 --> 00:16:10,220
we're actually cheaper than cabs despite

433
00:16:10,220 --> 00:16:11,600
being more expensive if you value your

434
00:16:11,600 --> 00:16:13,220
time at all that's a really interesting

435
00:16:13,220 --> 00:16:15,470
post especially in San Francisco where

436
00:16:15,470 --> 00:16:18,169
cabs don't really show up so yeah so

437
00:16:18,169 --> 00:16:21,529
check that out this is we're doing some

438
00:16:21,529 --> 00:16:22,939
really cool stuff and we're hiring so if

439
00:16:22,939 --> 00:16:24,529
anybody needs a job let me know come

440
00:16:24,529 --> 00:16:25,009
find me

441
00:16:25,009 --> 00:16:30,829
so that's pretty much it short talk the

442
00:16:30,829 --> 00:16:33,139
question is how big is our deployment

443
00:16:33,139 --> 00:16:35,299
right now we're powering it on just six

444
00:16:35,299 --> 00:16:39,619
servers like I said we've got actually

445
00:16:39,619 --> 00:16:40,309
that's not true

446
00:16:40,309 --> 00:16:45,079
we have 10 servers but yeah we basically

447
00:16:45,079 --> 00:16:47,629
have at least three of each component in

448
00:16:47,629 --> 00:16:49,369
the like so basically there's like the

449
00:16:49,369 --> 00:16:50,989
connection no tear the dispatched here

450
00:16:50,989 --> 00:16:53,029
the API - and like we have at least

451
00:16:53,029 --> 00:16:55,970
three nodes of each tear some have more

452
00:16:55,970 --> 00:16:59,720
some have less and it just depends on

453
00:16:59,720 --> 00:17:01,629
demand but we have we don't have the

454
00:17:01,629 --> 00:17:03,559
elasticity of demand problem that a lot

455
00:17:03,559 --> 00:17:04,639
of people have that's why people go to

456
00:17:04,639 --> 00:17:05,839
ec2 because they never know when they'll

457
00:17:05,839 --> 00:17:07,220
get demand spikes and need to spawn up

458
00:17:07,220 --> 00:17:09,019
new servers we don't really have that

459
00:17:09,019 --> 00:17:10,220
problem because we control how many

460
00:17:10,220 --> 00:17:11,720
drivers we have and drivers are the only

461
00:17:11,720 --> 00:17:13,189
thing that generates significant demand

462
00:17:13,189 --> 00:17:16,130
on our system so you know if we if we're

463
00:17:16,130 --> 00:17:18,110
gonna hire thousand new drivers we know

464
00:17:18,110 --> 00:17:19,789
about it well ahead of time and can you

465
00:17:19,789 --> 00:17:25,789
know work on that so you local

466
00:17:25,789 --> 00:17:26,959
deployments engineering wiser

467
00:17:26,959 --> 00:17:31,549
what do you oh we haven't really seen

468
00:17:31,549 --> 00:17:35,630
that is something we need to do it might

469
00:17:35,630 --> 00:17:37,309
make the request slightly faster our

470
00:17:37,309 --> 00:17:40,760
biggest issue right now is like ATT like

471
00:17:40,760 --> 00:17:42,559
getting 3G connection every driver has

472
00:17:42,559 --> 00:17:43,950
an iPhone in their car and that

473
00:17:43,950 --> 00:17:45,810
how we know what's going on in all the

474
00:17:45,810 --> 00:17:49,050
cars and you know AT&T in San Francisco

475
00:17:49,050 --> 00:17:50,400
New York are legendary for their

476
00:17:50,400 --> 00:17:53,010
unreliability so hoping the Verizon

477
00:17:53,010 --> 00:18:02,040
iPhone can fix that a little bit it's

478
00:18:02,040 --> 00:18:04,250
not super extensive I mean it's

479
00:18:04,250 --> 00:18:07,230
basically like there's a client object a

480
00:18:07,230 --> 00:18:09,090
driver objects like a trip object like

481
00:18:09,090 --> 00:18:10,500
there's there's these basically

482
00:18:10,500 --> 00:18:12,510
JavaScript objects that we then use to

483
00:18:12,510 --> 00:18:14,610
then plot like God view and things like

484
00:18:14,610 --> 00:18:17,520
that but you know there's not a there's

485
00:18:17,520 --> 00:18:20,490
not a ton I mean we're actually just

486
00:18:20,490 --> 00:18:21,750
embarking on rebuilding all of our

487
00:18:21,750 --> 00:18:23,820
internal tools using backbone and so

488
00:18:23,820 --> 00:18:25,710
with that I think we're actually going

489
00:18:25,710 --> 00:18:27,570
to have a lot of interesting tie-ins but

490
00:18:27,570 --> 00:18:29,400
really gotta be is the only thing right

491
00:18:29,400 --> 00:18:30,780
now that shares between the client in

492
00:18:30,780 --> 00:18:37,860
the server so oh that's just kind of

493
00:18:37,860 --> 00:18:41,400
like a super crazy backup like if if for

494
00:18:41,400 --> 00:18:43,110
some reason it never gets inserted after

495
00:18:43,110 --> 00:18:45,330
days and days and it's kind of like dump

496
00:18:45,330 --> 00:18:46,740
the queries here and so will eventually

497
00:18:46,740 --> 00:18:48,540
go back and look and see what what never

498
00:18:48,540 --> 00:18:51,270
got inserted into the database so um

499
00:18:51,270 --> 00:18:53,340
yeah it's just like where queries go to

500
00:18:53,340 --> 00:19:02,670
die basically anything else yeah we used

501
00:19:02,670 --> 00:19:06,630
the Mongo native DB module we just

502
00:19:06,630 --> 00:19:08,760
extended an open source the node logger

503
00:19:08,760 --> 00:19:10,500
module which I think just got renamed to

504
00:19:10,500 --> 00:19:11,960
n logger

505
00:19:11,960 --> 00:19:20,010
we also use I think node settings really

506
00:19:20,010 --> 00:19:21,840
basic stuff we wrote almost everything

507
00:19:21,840 --> 00:19:23,610
we have by hand we basically just

508
00:19:23,610 --> 00:19:25,860
brought in logging brought in settings

509
00:19:25,860 --> 00:19:27,960
and then the Mongo DB interface and it

510
00:19:27,960 --> 00:19:31,080
oh we also used the o3 module for XML

511
00:19:31,080 --> 00:19:34,800
parsing because again the the proof of

512
00:19:34,800 --> 00:19:36,990
concept system used XML and so now we're

513
00:19:36,990 --> 00:19:38,070
like working on getting everything to

514
00:19:38,070 --> 00:19:39,600
JSON but again when it's a system in

515
00:19:39,600 --> 00:19:41,160
flight and you have to wait for people

516
00:19:41,160 --> 00:19:42,690
to upgrade their iPhones you know

517
00:19:42,690 --> 00:19:45,000
upgrade the app on their iPhones so we

518
00:19:45,000 --> 00:19:46,770
need to accept both XML and JSON

519
00:19:46,770 --> 00:19:51,750
requests from there so no no only Python

520
00:19:51,750 --> 00:19:53,760
does that we use sequel alchemy for that

521
00:19:53,760 --> 00:19:57,580
so else

