1
00:00:00,000 --> 00:00:04,380

okay hello and welcome so this is one of

2
00:00:04,380 --> 00:00:08,160
the more advanced crash courses if you

3
00:00:08,160 --> 00:00:11,309
are just working on the fundamentals of

4
00:00:11,309 --> 00:00:13,380
the language I would encourage you to

5
00:00:13,380 --> 00:00:16,379
tune out possibly even move further away

6
00:00:16,379 --> 00:00:18,060
where I'm not going to accidentally be

7
00:00:18,060 --> 00:00:21,570
pointing and falling at you all are

8
00:00:21,570 --> 00:00:25,350
probably doing it the idea here is we

9
00:00:25,350 --> 00:00:26,939
want to give you the kind of fifteen

10
00:00:26,939 --> 00:00:29,789
minute overview of the essentials you

11
00:00:29,789 --> 00:00:32,040
need to know in order to participate in

12
00:00:32,040 --> 00:00:33,840
writing backbone apps and reading

13
00:00:33,840 --> 00:00:35,430
backbone code and understanding what's

14
00:00:35,430 --> 00:00:37,860
going on and then you'll have about 15

15
00:00:37,860 --> 00:00:41,719
minutes to work whatever projects you

16
00:00:41,719 --> 00:00:44,760
are already kind of like dabbling in and

17
00:00:44,760 --> 00:00:47,789
our TAS can circulate that support if

18
00:00:47,789 --> 00:00:49,379
you're not going to be listening to the

19
00:00:49,379 --> 00:00:52,440
backbone crash course and you're going

20
00:00:52,440 --> 00:00:56,100
to be instead working on the curriculum

21
00:00:56,100 --> 00:00:59,280
that's provided for the main line

22
00:00:59,280 --> 00:01:03,449
fundamentals work the TAS will support

23
00:01:03,449 --> 00:01:05,880
you for that too feel free to just flag

24
00:01:05,880 --> 00:01:09,299
one down as a reminder as if there are

25
00:01:09,299 --> 00:01:11,820
so many people here you know who haven't

26
00:01:11,820 --> 00:01:13,020
been to some of the previous lectures

27
00:01:13,020 --> 00:01:16,259
since it's more advanced I just like to

28
00:01:16,259 --> 00:01:18,119
give you a quick heads-up about the

29
00:01:18,119 --> 00:01:21,450
format of this class point number one

30
00:01:21,450 --> 00:01:24,090
it's highly interactive and when I call

31
00:01:24,090 --> 00:01:26,430
on you the intent not to kind of like

32
00:01:26,430 --> 00:01:30,840
screw up your day the intent is to check

33
00:01:30,840 --> 00:01:32,400
myself to see how well I've done

34
00:01:32,400 --> 00:01:35,490
communication concept and if you've been

35
00:01:35,490 --> 00:01:37,110
here already you know that the following

36
00:01:37,110 --> 00:01:39,630
is true you will be shocked at how

37
00:01:39,630 --> 00:01:41,549
difficult it is for you and the people

38
00:01:41,549 --> 00:01:43,560
around you to simply reiterate sentences

39
00:01:43,560 --> 00:01:45,780
I've just said that turns out to be

40
00:01:45,780 --> 00:01:47,790
extremely difficult tracking on what a

41
00:01:47,790 --> 00:01:48,260
speaker

42
00:01:48,260 --> 00:01:50,570
has to say is so difficult in fact that

43
00:01:50,570 --> 00:01:55,640
I have learned to to demilitarize if you

44
00:01:55,640 --> 00:01:58,730
will the idea of not knowing the answer

45
00:01:58,730 --> 00:02:01,550
and being called upon and all of the

46
00:02:01,550 --> 00:02:02,960
embarrassment that could be accompanied

47
00:02:02,960 --> 00:02:04,910
with that we kind of try to throw that

48
00:02:04,910 --> 00:02:07,100
out the window in this format so be

49
00:02:07,100 --> 00:02:09,260
ready to be called on and know that when

50
00:02:09,260 --> 00:02:10,910
you don't understand the answer and

51
00:02:10,910 --> 00:02:12,320
barely understand the question

52
00:02:12,320 --> 00:02:13,940
you are very representative of everyone

53
00:02:13,940 --> 00:02:16,220
else in the room and it's okay it's the

54
00:02:16,220 --> 00:02:21,240
only way I can do a good job in doing so

55
00:02:21,250 --> 00:02:23,750
the second point that I'd like to know

56
00:02:23,750 --> 00:02:26,230
is that it's very important that you be

57
00:02:26,230 --> 00:02:30,200
actually making something or doing

58
00:02:30,200 --> 00:02:31,640
something with the information we

59
00:02:31,640 --> 00:02:34,130
provide that's why we have all these TAS

60
00:02:34,130 --> 00:02:37,190
here this week is so that we can

61
00:02:37,190 --> 00:02:39,580
actually work with you on your actual

62
00:02:39,580 --> 00:02:44,450
problems if if you stick around you can

63
00:02:44,450 --> 00:02:45,650
work on some of the fundamental

64
00:02:45,650 --> 00:02:48,950
materials those are the curriculum for

65
00:02:48,950 --> 00:02:52,430
that is findable act J has come to 2014

66
00:02:52,430 --> 00:02:55,730
da hack reactor comm you'll find some

67
00:02:55,730 --> 00:02:57,920
curriculum there at a github repo you

68
00:02:57,920 --> 00:03:00,050
can download it and start working

69
00:03:00,050 --> 00:03:01,940
through the assignments and the TAS will

70
00:03:01,940 --> 00:03:04,340
circulate some of them needs a bit more

71
00:03:04,340 --> 00:03:07,459
sort of personal instruction and it's a

72
00:03:07,459 --> 00:03:08,420
much of it is supported by these

73
00:03:08,420 --> 00:03:10,489
lectures so to take a brief diversion

74
00:03:10,489 --> 00:03:13,730
into this advanced crash course I'm

75
00:03:13,730 --> 00:03:16,400
going to tell you not this is not

76
00:03:16,400 --> 00:03:18,530
advanced for people who already know

77
00:03:18,530 --> 00:03:20,090
backbone this is advanced for people

78
00:03:20,090 --> 00:03:22,640
just learning JavaScript the following

79
00:03:22,640 --> 00:03:25,300
talk is going to be very fast

80
00:03:25,300 --> 00:03:27,800
introduction to a framework but it will

81
00:03:27,800 --> 00:03:29,390
not have much pertinent information to

82
00:03:29,390 --> 00:03:30,830
you who are already writing the backbone

83
00:03:30,830 --> 00:03:32,590
no makes sense

84
00:03:32,590 --> 00:03:35,660
okay so to get things kicked off can I

85
00:03:35,660 --> 00:03:37,880
get a show of hands of people who are in

86
00:03:37,880 --> 00:03:40,310
the room because of the fundamental

87
00:03:40,310 --> 00:03:41,380
curriculum and that

88
00:03:41,380 --> 00:03:42,700
they plan to keep working on through the

89
00:03:42,700 --> 00:03:49,270
top a little bit and can I get a so

90
00:03:49,270 --> 00:03:50,350
handsome people who are in the room

91
00:03:50,350 --> 00:03:52,060
because they want to hear the short

92
00:03:52,060 --> 00:03:56,380
version of how to write backbone okay so

93
00:03:56,380 --> 00:03:57,340
with that in mind I'm gonna start

94
00:03:57,340 --> 00:03:58,750
calling people up some people are random

95
00:03:58,750 --> 00:04:00,850
if I accidentally mistake you as being

96
00:04:00,850 --> 00:04:03,820
if the backbone crew just correct me

97
00:04:03,820 --> 00:04:05,440
tell me you district probably to the

98
00:04:05,440 --> 00:04:08,440
downside so what I want to know is where

99
00:04:08,440 --> 00:04:09,610
you're starting what you're doing the

100
00:04:09,610 --> 00:04:10,900
backbone so that I can make sure that

101
00:04:10,900 --> 00:04:13,300
I'm speaking to your actual experience

102
00:04:13,300 --> 00:04:14,650
at your use case can I get a sense of

103
00:04:14,650 --> 00:04:17,440
what what you do with back though or

104
00:04:17,440 --> 00:04:19,120
don't do with backbone or wire quite

105
00:04:19,120 --> 00:04:30,710
just comes assess it no experience in

106
00:04:30,720 --> 00:04:33,340
perfect okay that's uh that's very

107
00:04:33,340 --> 00:04:36,780
helpful no experience in backbone

108
00:04:36,780 --> 00:04:52,460
moderate experience of JavaScript

109
00:04:52,470 --> 00:04:55,120
experience back encounter knows

110
00:04:55,120 --> 00:04:57,240
JavaScript well never trust backbone

111
00:04:57,240 --> 00:05:00,699
wants to wants to speak to the

112
00:05:00,699 --> 00:05:02,050
development workflow that the front-end

113
00:05:02,050 --> 00:05:03,880
guys are using with an informal sense

114
00:05:03,880 --> 00:05:05,800
and as a calibration mechanism for me

115
00:05:05,800 --> 00:05:07,870
when you say you know JavaScript well

116
00:05:07,870 --> 00:05:10,030
what does the object that create

117
00:05:10,030 --> 00:05:19,090
function do a new instance of a blank

118
00:05:19,090 --> 00:05:21,669
object close enough yeah that's the 80

119
00:05:21,669 --> 00:05:25,479
80 percent answered a lot of subtle

120
00:05:25,479 --> 00:05:27,580
difference object uh create generates a

121
00:05:27,580 --> 00:05:29,860
new object that does property delegation

122
00:05:29,860 --> 00:05:32,080
to the Infinity I think you know okay

123
00:05:32,080 --> 00:05:35,320
sweet and one more you there with me

124
00:05:35,320 --> 00:05:38,860
sort of plaid like shirt

125
00:05:38,860 --> 00:05:40,570
what do you where's your backbone

126
00:05:40,570 --> 00:05:45,960
situation I do

127
00:05:45,970 --> 00:05:48,450
to get a more broad picture

128
00:05:48,450 --> 00:05:52,570
architectural solutions and touch back

129
00:05:52,570 --> 00:05:57,830
on the living existence

130
00:05:57,840 --> 00:06:00,449
it's got it so play the little backbone

131
00:06:00,449 --> 00:06:02,310
code when you encounter it how to get

132
00:06:02,310 --> 00:06:05,669
mini apps from scratch consulting

133
00:06:05,669 --> 00:06:07,470
experience experience of JavaScript it

134
00:06:07,470 --> 00:06:10,139
sounds like okay cool well then what

135
00:06:10,139 --> 00:06:11,460
we're about what we have planned is

136
00:06:11,460 --> 00:06:13,620
pretty well targeted at what it seems as

137
00:06:13,620 --> 00:06:15,990
though you guys think so what I'm going

138
00:06:15,990 --> 00:06:18,120
to do is I'm the breaking man on some of

139
00:06:18,120 --> 00:06:20,340
the lingo of jump of a backbone I'm

140
00:06:20,340 --> 00:06:23,610
going to show you the keywords and I

141
00:06:23,610 --> 00:06:25,110
don't need keywords in the JavaScript

142
00:06:25,110 --> 00:06:27,240
keyword except I mean the word that you

143
00:06:27,240 --> 00:06:29,490
are going to see when you're writing or

144
00:06:29,490 --> 00:06:32,009
reading backbone code that have special

145
00:06:32,009 --> 00:06:35,699
meaning to the backbone librarian to the

146
00:06:35,699 --> 00:06:39,300
backbone community or whatever reason

147
00:06:39,300 --> 00:06:42,710
the significance of these words is

148
00:06:42,710 --> 00:06:46,020
pretty desperately documented you don't

149
00:06:46,020 --> 00:06:50,520
find in my experience a central you know

150
00:06:50,520 --> 00:06:53,419
list of what it is you need to have

151
00:06:53,419 --> 00:06:56,039
heard of and how you need to interpret

152
00:06:56,039 --> 00:06:58,139
certain words but the backbone library

153
00:06:58,139 --> 00:07:00,210
will treat these words great like it

154
00:07:00,210 --> 00:07:03,150
super special ways although

155
00:07:03,150 --> 00:07:05,190
documentation exists for each of these

156
00:07:05,190 --> 00:07:08,520
words that you will find self typing in

157
00:07:08,520 --> 00:07:11,520
a backbone out they don't seem to just

158
00:07:11,520 --> 00:07:13,110
be consolidated in one kind of like

159
00:07:13,110 --> 00:07:14,729
glossary that's kind of how I'm

160
00:07:14,729 --> 00:07:16,680
approaching they tell you the terms and

161
00:07:16,680 --> 00:07:18,570
as I tell you the terms I'm going to

162
00:07:18,570 --> 00:07:20,550
kind of like paint a picture of why you

163
00:07:20,550 --> 00:07:21,380
might use this

164
00:07:21,380 --> 00:07:25,340
and how a special meaning one of the

165
00:07:25,340 --> 00:07:29,420
backbone tenants that seems to silently

166
00:07:29,420 --> 00:07:32,570
guide how the framework was written is

167
00:07:32,570 --> 00:07:35,870
that the key words we're going to see

168
00:07:35,870 --> 00:07:37,430
the key terms that we're going to see

169
00:07:37,430 --> 00:07:41,480
here are assumes to have inherent

170
00:07:41,480 --> 00:07:44,060
meaning to the to the developers of the

171
00:07:44,060 --> 00:07:47,720
framework about the workflow of writing

172
00:07:47,720 --> 00:07:50,210
eleven initializes a great example

173
00:07:50,210 --> 00:07:51,200
you've probably if you've seen any

174
00:07:51,200 --> 00:07:52,940
backbone code you've seen the word

175
00:07:52,940 --> 00:07:55,190
initialize pop up here and there you may

176
00:07:55,190 --> 00:07:57,050
or may not realize that that that

177
00:07:57,050 --> 00:07:58,850
anything stored at the key initialized

178
00:07:58,850 --> 00:08:00,950
is likely to be treated very specialty

179
00:08:00,950 --> 00:08:03,110
by backbone when backbone interact with

180
00:08:03,110 --> 00:08:05,030
the objects that you build append to it

181
00:08:05,030 --> 00:08:07,160
and it sees something at the key

182
00:08:07,160 --> 00:08:08,870
initialized it does something very

183
00:08:08,870 --> 00:08:12,800
interesting and it's somewhat assumed

184
00:08:12,800 --> 00:08:15,080
that you are going to Intuit the

185
00:08:15,080 --> 00:08:17,600
significance of special words and that

186
00:08:17,600 --> 00:08:19,010
you are also going to into it which

187
00:08:19,010 --> 00:08:21,020
words you should use to express ideas

188
00:08:21,020 --> 00:08:22,970
you already have in your mind my goal

189
00:08:22,970 --> 00:08:24,770
here is to connect ideas are already

190
00:08:24,770 --> 00:08:26,570
familiar with with words you've probably

191
00:08:26,570 --> 00:08:29,780
seen and kind of make it clear that

192
00:08:29,780 --> 00:08:30,980
seeing those words means something

193
00:08:30,980 --> 00:08:34,550
special in this language so first of all

194
00:08:34,550 --> 00:08:38,900
the types of words you will see whenever

195
00:08:38,900 --> 00:08:43,020
you're interacting with a constructor

196
00:08:43,030 --> 00:08:46,550
backbone top model is one of the primary

197
00:08:46,550 --> 00:08:50,840
constructors the backbone provides it

198
00:08:50,840 --> 00:08:53,560
allows you to build one of the three

199
00:08:53,560 --> 00:08:58,460
pillars of the MVC architecture the

200
00:08:58,460 --> 00:09:01,190
backbone is trying to support if you're

201
00:09:01,190 --> 00:09:03,440
not super familiar with MVC here's the

202
00:09:03,440 --> 00:09:06,460
new sentence version MVC architecture

203
00:09:06,460 --> 00:09:08,750
claims that you can divide your

204
00:09:08,750 --> 00:09:11,270
application into at least three distinct

205
00:09:11,270 --> 00:09:15,050
parts and then in so doing the code that

206
00:09:15,050 --> 00:09:16,580
you find in any one of those parts

207
00:09:16,580 --> 00:09:19,230
should look very homogeneous as

208
00:09:19,230 --> 00:09:20,730
so the rest of the code you will bind

209
00:09:20,730 --> 00:09:22,650
there it will all have a similar

210
00:09:22,650 --> 00:09:25,580
character and there won't be a lot of

211
00:09:25,580 --> 00:09:29,880
conflicting or disparate goals in one in

212
00:09:29,880 --> 00:09:31,770
once I love one of these three Cylons

213
00:09:31,770 --> 00:09:34,200
it'll all be about the same goal it's

214
00:09:34,200 --> 00:09:35,550
generally good practice in software

215
00:09:35,550 --> 00:09:37,620
engineering to separate your concerns

216
00:09:37,620 --> 00:09:41,190
and that's the intent of MVC each of

217
00:09:41,190 --> 00:09:43,920
these terms refers to different aspects

218
00:09:43,920 --> 00:09:45,630
of the application and they are

219
00:09:45,630 --> 00:09:47,360
interpreted somewhat differently from

220
00:09:47,360 --> 00:09:50,130
from Architecture from Franklin

221
00:09:50,130 --> 00:09:53,400
framework I'll offer you my most general

222
00:09:53,400 --> 00:09:58,220
version model represents the data and

223
00:09:58,220 --> 00:10:00,990
rules about how we get to manipulate

224
00:10:00,990 --> 00:10:04,920
that data view represents what is seen

225
00:10:04,920 --> 00:10:06,090
by the user and there's a major

226
00:10:06,090 --> 00:10:08,580
disconnect between those two right model

227
00:10:08,580 --> 00:10:13,470
and model and view to feel as different

228
00:10:13,470 --> 00:10:16,680
as truth and perception it's clearly a

229
00:10:16,680 --> 00:10:17,850
big difference between truth and

230
00:10:17,850 --> 00:10:20,340
perception there's only one truth it's

231
00:10:20,340 --> 00:10:22,310
out there to be measured and observed

232
00:10:22,310 --> 00:10:25,170
but it doesn't change whereas perception

233
00:10:25,170 --> 00:10:27,990
varies from person to person and can be

234
00:10:27,990 --> 00:10:30,480
mistaken and is a bit of a bit of a

235
00:10:30,480 --> 00:10:32,580
transformation on truth the same is true

236
00:10:32,580 --> 00:10:36,000
of models and views there may be many

237
00:10:36,000 --> 00:10:38,610
views that all represent a single model

238
00:10:38,610 --> 00:10:40,730
that represent a single piece of data

239
00:10:40,730 --> 00:10:43,110
but that one piece of data is where we

240
00:10:43,110 --> 00:10:44,760
will hold the rules governing how it

241
00:10:44,760 --> 00:10:46,370
could change over time

242
00:10:46,370 --> 00:10:52,080
lastly controller the notion of a

243
00:10:52,080 --> 00:10:54,330
controller is not particularly used in

244
00:10:54,330 --> 00:10:57,510
JavaScript but in general it means the

245
00:10:57,510 --> 00:11:01,620
thing that manages user in that is the

246
00:11:01,620 --> 00:11:03,600
most general definition I can find or

247
00:11:03,600 --> 00:11:06,330
think of for controller luckily we're

248
00:11:06,330 --> 00:11:07,860
not going to have to dig into that too

249
00:11:07,860 --> 00:11:08,750
much to understand

250
00:11:08,750 --> 00:11:10,850
so let's just focus on model and view

251
00:11:10,850 --> 00:11:12,800
before I go mom I would like to make

252
00:11:12,800 --> 00:11:15,140
sure that you guys feel comfortable with

253
00:11:15,140 --> 00:11:18,200
the premise of backbone and the intent

254
00:11:18,200 --> 00:11:21,710
of an MVC architecture well enough that

255
00:11:21,710 --> 00:11:23,690
it will start to make sense how and how

256
00:11:23,690 --> 00:11:26,270
backbone is solving those problems for

257
00:11:26,270 --> 00:11:29,060
you how comfortable you guys feel to

258
00:11:29,060 --> 00:11:31,490
trying to defend the MVC architecture

259
00:11:31,490 --> 00:11:33,050
through a room full of people if you

260
00:11:33,050 --> 00:11:35,090
were called upon thumbs up that would be

261
00:11:35,090 --> 00:11:37,130
easy for me thumbs down you only said it

262
00:11:37,130 --> 00:11:39,200
once this is terrifying

263
00:11:39,200 --> 00:11:41,060
thumbs middle I've kind of heard of it

264
00:11:41,060 --> 00:11:42,770
for a long time so I feel like maybe I

265
00:11:42,770 --> 00:11:47,120
could take a step could you take a stab

266
00:11:47,120 --> 00:11:59,100
at it with the hat there

267
00:11:59,110 --> 00:12:01,490
yep that's great and how would you just

268
00:12:01,490 --> 00:12:04,340
how would you distinguish what models

269
00:12:04,340 --> 00:12:06,020
are versus what views are ignoring

270
00:12:06,020 --> 00:12:12,500
completely controlling from great

271
00:12:12,500 --> 00:12:14,570
the model being the Vita the the data

272
00:12:14,570 --> 00:12:16,730
and the viewing the presentation let me

273
00:12:16,730 --> 00:12:18,560
tweak the first one model is not only

274
00:12:18,560 --> 00:12:20,720
the data but also the rules that govern

275
00:12:20,720 --> 00:12:23,000
how that data can change those are the

276
00:12:23,000 --> 00:12:24,770
methods to get attached to in an

277
00:12:24,770 --> 00:12:26,690
object-oriented sense the methods that

278
00:12:26,690 --> 00:12:28,610
govern the internal consistency of any

279
00:12:28,610 --> 00:12:30,410
one object and how it can interact with

280
00:12:30,410 --> 00:12:33,860
other objects great so basically

281
00:12:33,860 --> 00:12:35,330
programs you've written that have no

282
00:12:35,330 --> 00:12:37,250
user interface programs that like do

283
00:12:37,250 --> 00:12:39,770
simulations physics simulations would

284
00:12:39,770 --> 00:12:42,470
not necessarily need any presentation

285
00:12:42,470 --> 00:12:43,760
and so all of the object-oriented

286
00:12:43,760 --> 00:12:45,830
principles can work quite well because

287
00:12:45,830 --> 00:12:47,480
it's just in a computer it's just truth

288
00:12:47,480 --> 00:12:49,130
kind of colliding with other truth right

289
00:12:49,130 --> 00:12:51,080
as soon as you try to present that to a

290
00:12:51,080 --> 00:12:53,450
user you have to distort truth substance

291
00:12:53,450 --> 00:12:55,390
fits on a computer screen

292
00:12:55,390 --> 00:12:58,760
sometimes you duplicate the way that

293
00:12:58,760 --> 00:13:00,170
you're presenting a big deal you'll

294
00:13:00,170 --> 00:13:03,650
you'll present a single fact twice the

295
00:13:03,650 --> 00:13:05,870
number of unread messages is seven you

296
00:13:05,870 --> 00:13:07,820
show that in several different ways

297
00:13:07,820 --> 00:13:09,470
there's an unread count in the upper

298
00:13:09,470 --> 00:13:10,970
right corner and there's a number of

299
00:13:10,970 --> 00:13:12,710
messages that you can see and then

300
00:13:12,710 --> 00:13:14,240
there's like one next to your inbox

301
00:13:14,240 --> 00:13:15,980
there's all these places that the same

302
00:13:15,980 --> 00:13:18,140
fact shows up that is not true about

303
00:13:18,140 --> 00:13:20,870
models models try to consolidate serves

304
00:13:20,870 --> 00:13:22,760
in one spot and these have all of these

305
00:13:22,760 --> 00:13:25,160
different rules so that is my crash

306
00:13:25,160 --> 00:13:29,450
crash crash course in MVC so that we can

307
00:13:29,450 --> 00:13:31,130
start to understand what backbones try

308
00:13:31,130 --> 00:13:35,240
to Opera's backbone model is a

309
00:13:35,240 --> 00:13:38,150
constructor that will allow us to create

310
00:13:38,150 --> 00:13:42,470
these objects to encapsulate truth and

311
00:13:42,470 --> 00:13:45,500
behavior around a given entity in our

312
00:13:45,500 --> 00:13:47,540
system so if we have a user we might

313
00:13:47,540 --> 00:13:49,340
want a back-up model to represent that

314
00:13:49,340 --> 00:13:55,370
user backbone dot view is a constructor

315
00:13:55,370 --> 00:13:57,800
to generate the projection into user

316
00:13:57,800 --> 00:14:01,400
visible space of that model and then

317
00:14:01,400 --> 00:14:05,000
back though duck collection is more is

318
00:14:05,000 --> 00:14:05,730
very

319
00:14:05,730 --> 00:14:09,300
similar to a backbone model a backbone

320
00:14:09,300 --> 00:14:10,949
that collection an instance of a

321
00:14:10,949 --> 00:14:15,720
backbone a collection is intended to be

322
00:14:15,720 --> 00:14:18,180
sort of an array like structure that

323
00:14:18,180 --> 00:14:25,130
could contain many backbone mobs ideally

324
00:14:25,130 --> 00:14:27,329
backbone that collection would have been

325
00:14:27,329 --> 00:14:31,199
a subclass of backbone model in much the

326
00:14:31,199 --> 00:14:33,810
same way that JavaScript arrays are a

327
00:14:33,810 --> 00:14:36,660
subclass of JavaScript objects but

328
00:14:36,660 --> 00:14:37,980
unfortunately they did not make this

329
00:14:37,980 --> 00:14:39,149
design choice when they wrote the

330
00:14:39,149 --> 00:14:41,820
framework and so a lot of the things

331
00:14:41,820 --> 00:14:44,160
that you come to value about models

332
00:14:44,160 --> 00:14:46,110
won't be true collections even though

333
00:14:46,110 --> 00:14:47,699
intuitively you might think that they

334
00:14:47,699 --> 00:14:50,250
ought to be I personally agree that they

335
00:14:50,250 --> 00:14:52,589
ought to be if that's how you feel but

336
00:14:52,589 --> 00:14:57,490
we live in this world instead of you

337
00:14:57,500 --> 00:15:01,529
when you are interacting with these

338
00:15:01,529 --> 00:15:04,019
constructors you may choose to subclass

339
00:15:04,019 --> 00:15:05,399
them and in fact you will have to the

340
00:15:05,399 --> 00:15:09,089
subclass them pretty quickly if you're

341
00:15:09,089 --> 00:15:11,250
going to make an application with models

342
00:15:11,250 --> 00:15:14,730
and with views you're probably going to

343
00:15:14,730 --> 00:15:16,529
customize the generic model on the

344
00:15:16,529 --> 00:15:18,870
generic view to be useful in your

345
00:15:18,870 --> 00:15:21,899
application as soon as you decide you

346
00:15:21,899 --> 00:15:23,339
need something other than the very

347
00:15:23,339 --> 00:15:26,639
vanilla backbone model instance or

348
00:15:26,639 --> 00:15:29,069
backbone view instance and heads up

349
00:15:29,069 --> 00:15:30,569
you'll basically never one of the

350
00:15:30,569 --> 00:15:33,089
militarism of those you immediately need

351
00:15:33,089 --> 00:15:35,010
to subclass them and start specifying

352
00:15:35,010 --> 00:15:37,649
how your models are interested or how

353
00:15:37,649 --> 00:15:40,319
your views are interested perhaps you

354
00:15:40,319 --> 00:15:43,740
know an instantiation pattern in

355
00:15:43,740 --> 00:15:47,819
JavaScript like functional instantiation

356
00:15:47,819 --> 00:15:50,639
or perhaps you know pseudo-classical

357
00:15:50,639 --> 00:15:52,829
instantiation usually keyword new and

358
00:15:52,829 --> 00:15:54,930
setting the dot prototype property on

359
00:15:54,930 --> 00:15:57,319
your constructor function that sets etc

360
00:15:57,319 --> 00:16:00,480
if you do know those things bully for

361
00:16:00,480 --> 00:16:02,610
you you have to sort of ignore that

362
00:16:02,610 --> 00:16:04,840
pattern whatever pattern you know

363
00:16:04,840 --> 00:16:06,760
or patterns and you have used a new

364
00:16:06,760 --> 00:16:10,029
pattern of defining a constructor the

365
00:16:10,029 --> 00:16:12,279
backbone is created for you with the

366
00:16:12,279 --> 00:16:15,370
hopes of simplifying your process of

367
00:16:15,370 --> 00:16:16,960
writing a constructor and writing the

368
00:16:16,960 --> 00:16:20,860
class if you want to make a new class

369
00:16:20,860 --> 00:16:24,070
you're going to say backbone model die

370
00:16:24,070 --> 00:16:27,760
extend you'll pass in a hash that kind

371
00:16:27,760 --> 00:16:29,470
of helps specify what your class should

372
00:16:29,470 --> 00:16:33,190
behave like and it'll return you and a

373
00:16:33,190 --> 00:16:36,760
new class if this is a little confusing

374
00:16:36,760 --> 00:16:37,420
right

375
00:16:37,420 --> 00:16:39,130
the extend function seems to be a

376
00:16:39,130 --> 00:16:43,360
factory that produces classes that

377
00:16:43,360 --> 00:16:45,820
that's reasonable we are calling a

378
00:16:45,820 --> 00:16:48,190
function that returns a class so that we

379
00:16:48,190 --> 00:16:52,350
can use that class to create instances

380
00:16:52,350 --> 00:16:54,790
thumbs up whether you've explained to me

381
00:16:54,790 --> 00:16:59,560
what I mean when I say backbone down

382
00:16:59,560 --> 00:17:01,480
extend is a factory that produces

383
00:17:01,480 --> 00:17:09,470
classes that produces instances

384
00:17:09,480 --> 00:17:12,059
okay so that means we need to go over a

385
00:17:12,059 --> 00:17:16,610
little more so backbone has eschewed the

386
00:17:16,610 --> 00:17:19,889
traditional instantiation and sub

387
00:17:19,889 --> 00:17:22,289
classing systems that you use in

388
00:17:22,289 --> 00:17:25,679
JavaScript you're likely to be using the

389
00:17:25,679 --> 00:17:27,750
pseudo-classical pattern it's okay if

390
00:17:27,750 --> 00:17:29,010
you ever heard that word is the one

391
00:17:29,010 --> 00:17:30,299
that's documented all over the internet

392
00:17:30,299 --> 00:17:33,149
doctor over time you were do you know

393
00:17:33,149 --> 00:17:34,529
keyword this all sorts of stuff like

394
00:17:34,529 --> 00:17:36,679
everything you've read about

395
00:17:36,679 --> 00:17:38,460
instantiations that subclassing is

396
00:17:38,460 --> 00:17:39,779
probably about the student class of a

397
00:17:39,779 --> 00:17:41,610
pattern there is a much simpler

398
00:17:41,610 --> 00:17:43,169
alternative called functional that

399
00:17:43,169 --> 00:17:45,059
nobody uses except a few super lead

400
00:17:45,059 --> 00:17:48,240
people you can use that either backbone

401
00:17:48,240 --> 00:17:50,070
says you must use our system for

402
00:17:50,070 --> 00:17:51,480
generating classes you don't get to

403
00:17:51,480 --> 00:17:53,730
write them out manually you just tell

404
00:17:53,730 --> 00:17:55,500
backbone about your class and it

405
00:17:55,500 --> 00:17:59,070
generates it for you the way that you

406
00:17:59,070 --> 00:18:00,659
tell backbone advisor class is by

407
00:18:00,659 --> 00:18:03,630
calling a function so imagine for a

408
00:18:03,630 --> 00:18:06,000
moment that I was going to start

409
00:18:06,000 --> 00:18:07,860
building factories I want a car factory

410
00:18:07,860 --> 00:18:10,169
so I start putting bricks on top of

411
00:18:10,169 --> 00:18:12,149
bricks and I install this big piece of

412
00:18:12,149 --> 00:18:14,399
machinery and I sort of like conveyor

413
00:18:14,399 --> 00:18:17,669
belt for the for the line and hooks to

414
00:18:17,669 --> 00:18:19,409
carry things around and I'm done with my

415
00:18:19,409 --> 00:18:21,389
factory and out to build cars there's

416
00:18:21,389 --> 00:18:23,880
one fact to me let me go over here mind

417
00:18:23,880 --> 00:18:25,380
you this is a complicated process

418
00:18:25,380 --> 00:18:27,600
building and building a factory in

419
00:18:27,600 --> 00:18:30,120
JavaScript building your class is easy

420
00:18:30,120 --> 00:18:33,360
to screw up so I made one and I'm doing

421
00:18:33,360 --> 00:18:35,340
good and then I decide to make a second

422
00:18:35,340 --> 00:18:37,049
factory I go over here and I start

423
00:18:37,049 --> 00:18:39,230
stacking bricks on top of bricks and I

424
00:18:39,230 --> 00:18:41,789
put other machinery this above factory

425
00:18:41,789 --> 00:18:43,919
over here I finished building my boat

426
00:18:43,919 --> 00:18:45,840
Factory and I'm like wow I am tired I

427
00:18:45,840 --> 00:18:49,080
wish I could just do something call some

428
00:18:49,080 --> 00:18:52,080
high level function and have it produced

429
00:18:52,080 --> 00:18:55,230
factories right that is what backbone is

430
00:18:55,230 --> 00:18:57,299
trying to give you with this dive

431
00:18:57,299 --> 00:19:00,029
extending the die extend

432
00:19:00,029 --> 00:19:02,630
function the not extend method of

433
00:19:02,630 --> 00:19:06,299
backbone model is a generator that

434
00:19:06,299 --> 00:19:09,360
generates classes in much the same way

435
00:19:09,360 --> 00:19:11,850
as if I had a magical box but when I

436
00:19:11,850 --> 00:19:12,230
press

437
00:19:12,230 --> 00:19:15,290
but out popped a brand-new factory I'd

438
00:19:15,290 --> 00:19:19,549
say top has wheels and it goes fluff and

439
00:19:19,549 --> 00:19:21,980
it makes a factory can produce cars I go

440
00:19:21,980 --> 00:19:25,280
boat it's funny and top out comes

441
00:19:25,280 --> 00:19:27,830
another factory that's a pretty fair

442
00:19:27,830 --> 00:19:30,590
analogy for the dye extended you'll find

443
00:19:30,590 --> 00:19:34,010
on all backbone classes when you make

444
00:19:34,010 --> 00:19:36,530
the backbone class using that extend it

445
00:19:36,530 --> 00:19:38,780
reduces a class that also has died

446
00:19:38,780 --> 00:19:42,290
extend on the classic produces is a

447
00:19:42,290 --> 00:19:44,240
subclass of whatever you were not

448
00:19:44,240 --> 00:19:46,309
extending if you say back on that model

449
00:19:46,309 --> 00:19:50,390
that extend you get subclass of backbone

450
00:19:50,390 --> 00:19:55,309
up mama so maybe you say var user equals

451
00:19:55,309 --> 00:19:56,929
backbone up mom let extent if you

452
00:19:56,929 --> 00:19:59,240
specify something about how it works and

453
00:19:59,240 --> 00:20:02,299
all of a sudden the user variable stores

454
00:20:02,299 --> 00:20:05,990
a class you can now say far super user

455
00:20:05,990 --> 00:20:10,190
equals user not extend and pass in some

456
00:20:10,190 --> 00:20:14,390
specifications there so my point is you

457
00:20:14,390 --> 00:20:16,220
want to think about backbone classes

458
00:20:16,220 --> 00:20:17,900
you'll notice that they have capitalized

459
00:20:17,900 --> 00:20:24,290
letters like em for Model D C and that's

460
00:20:24,290 --> 00:20:28,190
a different scene in MVC

461
00:20:28,200 --> 00:20:30,179
when you see those that's what you know

462
00:20:30,179 --> 00:20:33,389
you can use that extent when you build a

463
00:20:33,389 --> 00:20:34,950
subclass you can use that extend there

464
00:20:34,950 --> 00:20:38,460
as well any questions about the story of

465
00:20:38,460 --> 00:20:42,389
you trading subclasses of the primitive

466
00:20:42,389 --> 00:20:45,239
backbone classes or subclasses of your

467
00:20:45,239 --> 00:20:47,999
own sometimes I feel as though the

468
00:20:47,999 --> 00:20:50,100
better beings one question pretty

469
00:20:50,100 --> 00:20:59,190
confident so I'm curious if anybody has

470
00:20:59,190 --> 00:21:01,980
a question for that extent what go great

471
00:21:01,980 --> 00:21:05,399
we're going to cover that next but what

472
00:21:05,399 --> 00:21:07,369
goes into extend is a fantastic question

473
00:21:07,369 --> 00:21:08,519
fine

474
00:21:08,519 --> 00:21:14,850
oh yes how do we use this extent

475
00:21:14,850 --> 00:21:16,859
function perfectly reasonable that's the

476
00:21:16,859 --> 00:21:20,460
next the next slide but I don't mean to

477
00:21:20,460 --> 00:21:23,580
I don't mean to stop the questions are

478
00:21:23,580 --> 00:21:30,029
there any are there any others the

479
00:21:30,029 --> 00:21:32,309
initiation story is the same as regular

480
00:21:32,309 --> 00:21:33,659
JavaScript pseudo-classical

481
00:21:33,659 --> 00:21:35,609
instantiation you just say new and then

482
00:21:35,609 --> 00:21:43,529
the classic cool okay so I said that you

483
00:21:43,529 --> 00:21:45,690
were going to tell this dot extend

484
00:21:45,690 --> 00:21:48,950
method looking on your class to be like

485
00:21:48,950 --> 00:21:52,919
all constructors expect you to pass in a

486
00:21:52,919 --> 00:21:56,279
parameter that's going to look like two

487
00:21:56,279 --> 00:21:58,799
curly braces in between physics these

488
00:21:58,799 --> 00:22:02,279
parentheses those curly braces to find

489
00:22:02,279 --> 00:22:04,679
an object and that object specifies what

490
00:22:04,679 --> 00:22:09,149
your class is supposed to be like I'm

491
00:22:09,149 --> 00:22:10,559
going to go into what kinds of

492
00:22:10,559 --> 00:22:12,179
properties we put on that objects it

493
00:22:12,179 --> 00:22:14,070
even specify a class in the next slide

494
00:22:14,070 --> 00:22:16,769
the point is you must pass the params

495
00:22:16,769 --> 00:22:20,039
hash into this die extent in order to

496
00:22:20,039 --> 00:22:23,009
generate anything meaningful using die

497
00:22:23,009 --> 00:22:24,600
extent that's the one argument that a

498
00:22:24,600 --> 00:22:29,009
that die extends expect a list of make a

499
00:22:29,009 --> 00:22:31,999
collection of key value pairs that

500
00:22:31,999 --> 00:22:34,830
explain the backbone what your new class

501
00:22:34,830 --> 00:22:35,570
should be like

502
00:22:35,570 --> 00:22:37,850
does that make sense kind of like when I

503
00:22:37,850 --> 00:22:40,340
whispered it's floating over to my a

504
00:22:40,340 --> 00:22:42,500
special machine we got to offer some

505
00:22:42,500 --> 00:22:44,960
input the form of the input is a

506
00:22:44,960 --> 00:22:51,770
princess so starting to talk about what

507
00:22:51,770 --> 00:22:59,000
goes into that params hash the the most

508
00:22:59,000 --> 00:23:01,730
important in most cases the most

509
00:23:01,730 --> 00:23:05,630
important special property is

510
00:23:05,630 --> 00:23:09,500
initialized initialized

511
00:23:09,500 --> 00:23:12,200
is the key that you will use to talk

512
00:23:12,200 --> 00:23:14,000
about some function that should be run

513
00:23:14,000 --> 00:23:17,540
on every new instance I'm going to do a

514
00:23:17,540 --> 00:23:28,570
quick code example

515
00:23:28,580 --> 00:23:31,970
so in backbone I might say bar user

516
00:23:31,970 --> 00:23:40,830
equals I'll read this okay

517
00:23:40,840 --> 00:23:44,799
by our user equal backbone top model dot

518
00:23:44,799 --> 00:23:54,380
extend

519
00:23:54,390 --> 00:23:57,960
and inside here so my params hats just

520
00:23:57,960 --> 00:24:02,040
to be clear is this thing and inside

521
00:24:02,040 --> 00:24:05,910
here I would like to specify what my

522
00:24:05,910 --> 00:24:07,920
class is supposed to be like I'm going

523
00:24:07,920 --> 00:24:12,300
to say initialize because this is

524
00:24:12,300 --> 00:24:13,920
perhaps the most important thing to

525
00:24:13,920 --> 00:24:18,080
specify I am now typing out the code

526
00:24:18,080 --> 00:24:21,690
that should be run whenever a new

527
00:24:21,690 --> 00:24:26,250
instance of this class gets made so I

528
00:24:26,250 --> 00:24:30,230
might say for example this dot location

529
00:24:30,230 --> 00:24:36,240
sorry this dot what use it have age this

530
00:24:36,240 --> 00:24:40,140
dot age equals default aides could be

531
00:24:40,140 --> 00:24:41,180
zero

532
00:24:41,180 --> 00:24:44,010
later the user could set the age right

533
00:24:44,010 --> 00:24:48,660
or let's say let's say this dot profile

534
00:24:48,660 --> 00:24:56,880
pic equals random avatar so in this

535
00:24:56,880 --> 00:24:59,490
example every new user instance is going

536
00:24:59,490 --> 00:25:02,280
to get a random picture as their avatar

537
00:25:02,280 --> 00:25:04,140
for as long as the application is

538
00:25:04,140 --> 00:25:10,220
running

539
00:25:10,230 --> 00:25:20,280
what does the initialize function do yes

540
00:25:20,280 --> 00:25:22,620
but what weeks yes whenever you create

541
00:25:22,620 --> 00:25:25,470
an instance of the class this code will

542
00:25:25,470 --> 00:25:28,470
run on the brand new instance does that

543
00:25:28,470 --> 00:25:30,630
mean that the highlighted function is in

544
00:25:30,630 --> 00:25:37,380
fact the constructor sorry I know the

545
00:25:37,380 --> 00:25:41,040
line if I may take a brief moment to

546
00:25:41,040 --> 00:25:45,270
explain miles integers is now there is

547
00:25:45,270 --> 00:25:46,950
an illusion that we all suffer from in

548
00:25:46,950 --> 00:25:49,080
classes where it appears as though

549
00:25:49,080 --> 00:25:50,460
everyone understands stuff better than

550
00:25:50,460 --> 00:25:52,140
us but it tends to be the case that

551
00:25:52,140 --> 00:25:53,910
that's just because you only talk when

552
00:25:53,910 --> 00:25:55,650
you know the answer and so looking

553
00:25:55,650 --> 00:25:57,360
around you'll see a lot of people are

554
00:25:57,360 --> 00:25:58,890
not confused by whatever you're confused

555
00:25:58,890 --> 00:26:01,380
about but in fact they are they just

556
00:26:01,380 --> 00:26:02,400
didn't happen to be talking them so I

557
00:26:02,400 --> 00:26:04,050
try to I try to avoid that by only

558
00:26:04,050 --> 00:26:05,700
talking to people that I select on a

559
00:26:05,700 --> 00:26:08,940
random basis no that's a little bit

560
00:26:08,940 --> 00:26:12,870
follow that so does that mean that this

561
00:26:12,870 --> 00:26:15,630
is this function is the constructor

562
00:26:15,630 --> 00:26:23,550
it's up that's a great way to say he

563
00:26:23,550 --> 00:26:25,560
said either this highlighting function

564
00:26:25,560 --> 00:26:28,620
is the constructor itself or the

565
00:26:28,620 --> 00:26:30,000
constructor is going to call this

566
00:26:30,000 --> 00:26:32,370
function so in fact just for your

567
00:26:32,370 --> 00:26:35,040
edification backbone generates a new

568
00:26:35,040 --> 00:26:37,770
constructor function that is not the

569
00:26:37,770 --> 00:26:39,300
highlighted function and that new

570
00:26:39,300 --> 00:26:41,130
constructor function will run this on

571
00:26:41,130 --> 00:26:42,990
every new instance so slight

572
00:26:42,990 --> 00:26:45,150
disambiguation and in practice you're

573
00:26:45,150 --> 00:26:47,160
not going to notice a difference you're

574
00:26:47,160 --> 00:26:48,370
going to write this an essay

575
00:26:48,370 --> 00:26:51,340
the constructor function that gets

576
00:26:51,340 --> 00:26:55,530
returned and the capital you user is

577
00:26:55,530 --> 00:26:57,130
going to hold

578
00:26:57,130 --> 00:26:59,410
but that extent method returns some

579
00:26:59,410 --> 00:27:01,090
function that doesn't happen to be the

580
00:27:01,090 --> 00:27:04,150
highlighted one but the return function

581
00:27:04,150 --> 00:27:06,490
will call a highlighted does that make

582
00:27:06,490 --> 00:27:12,580
sense yes you go to stack if you were to

583
00:27:12,580 --> 00:27:21,850
extend this one both initialize good

584
00:27:21,850 --> 00:27:22,510
question

585
00:27:22,510 --> 00:27:26,250
if we subclass user to make super user

586
00:27:26,250 --> 00:27:29,710
will the subclass automatically call the

587
00:27:29,710 --> 00:27:31,660
superclass instantiated of the

588
00:27:31,660 --> 00:27:34,540
superclass initialized the answer is no

589
00:27:34,540 --> 00:27:36,610
unfortunately you have to specify that

590
00:27:36,610 --> 00:27:41,530
manually you could argue that it's

591
00:27:41,530 --> 00:27:43,059
preferable if you have to specify it

592
00:27:43,059 --> 00:27:49,570
manually if you're written in Python to

593
00:27:49,570 --> 00:27:54,100
each other so in Ruby it's not super but

594
00:27:54,100 --> 00:27:55,929
there's some way that you call the super

595
00:27:55,929 --> 00:27:57,790
version of a bath right here there was

596
00:27:57,790 --> 00:27:59,350
monkey-patching a long time then they

597
00:27:59,350 --> 00:28:10,250
replaced that with somebody comes ok so

598
00:28:10,260 --> 00:28:13,660
the requirement that you call your

599
00:28:13,660 --> 00:28:16,030
superclass initializer in backbone is

600
00:28:16,030 --> 00:28:18,160
analogous to the fact that in Ruby you

601
00:28:18,160 --> 00:28:21,070
probably have to call stupid and you

602
00:28:21,070 --> 00:28:22,870
would prefer to be able to specify when

603
00:28:22,870 --> 00:28:25,809
and where that super call happens so you

604
00:28:25,809 --> 00:28:27,370
can do something that's analogous to

605
00:28:27,370 --> 00:28:30,640
super here it's not a keyword that lets

606
00:28:30,640 --> 00:28:31,720
you unfortunately

607
00:28:31,720 --> 00:28:34,290
javascript does not make it possible

608
00:28:34,290 --> 00:28:36,610
certainly not easy and I would argue not

609
00:28:36,610 --> 00:28:38,679
possible to implement super light

610
00:28:38,679 --> 00:28:41,419
behavior that is actually consistent

611
00:28:41,419 --> 00:28:42,710
I've seen a lot of people make very

612
00:28:42,710 --> 00:28:44,360
valiant attempts but I've never seen a

613
00:28:44,360 --> 00:28:47,059
version of super that works as expected

614
00:28:47,059 --> 00:28:50,509
in all cases so no unfortunately the

615
00:28:50,509 --> 00:28:52,669
framework developers didn't put around

616
00:28:52,669 --> 00:28:54,350
unfortunately they did not attempt to

617
00:28:54,350 --> 00:28:56,740
give you as who a broken a super feature

618
00:28:56,740 --> 00:28:58,940
instead they just leave it up to you to

619
00:28:58,940 --> 00:29:02,029
say in your in your super user subclass

620
00:29:02,029 --> 00:29:08,899
you to stay to show you in your super

621
00:29:08,899 --> 00:29:18,919
user subclass you would say user dot

622
00:29:18,919 --> 00:29:24,220
line

623
00:29:24,230 --> 00:29:26,029
you're not familiar with this line it's

624
00:29:26,029 --> 00:29:27,529
okay that's what we're going over at

625
00:29:27,529 --> 00:29:29,690
4:00 when you explain exactly what this

626
00:29:29,690 --> 00:29:32,299
craziness is about but again this is the

627
00:29:32,299 --> 00:29:34,760
crash course in backbone so sorry if I

628
00:29:34,760 --> 00:29:37,070
give that particular thing it seems

629
00:29:37,070 --> 00:29:43,970
Stewart so this is pretty much what you

630
00:29:43,970 --> 00:29:46,179
needed to know about constructors in

631
00:29:46,179 --> 00:29:48,019
backbone are there any questions before

632
00:29:48,019 --> 00:29:49,880
we move on to some of the other key

633
00:29:49,880 --> 00:29:59,840
turns things about instructions

634
00:29:59,850 --> 00:30:05,169
radical let's talk about instances so

635
00:30:05,169 --> 00:30:07,000
constructors are like the factories that

636
00:30:07,000 --> 00:30:08,950
produce similar objects that you're

637
00:30:08,950 --> 00:30:13,120
going to be needing a lot of there are

638
00:30:13,120 --> 00:30:15,850
different rules for each of these each

639
00:30:15,850 --> 00:30:18,100
of these things when I am interacting

640
00:30:18,100 --> 00:30:22,419
with a model instance what I expect of a

641
00:30:22,419 --> 00:30:24,640
backbone model instance is that it will

642
00:30:24,640 --> 00:30:28,210
intercede on my my interactions with the

643
00:30:28,210 --> 00:30:31,360
properties of that object for regular

644
00:30:31,360 --> 00:30:35,019
JavaScript object I would say hey object

645
00:30:35,019 --> 00:30:38,529
dot property name what are any and alert

646
00:30:38,529 --> 00:30:41,320
object up property minute I would do

647
00:30:41,320 --> 00:30:46,330
something like this I would say you know

648
00:30:46,330 --> 00:30:53,260
of our foo equals some object and then I

649
00:30:53,260 --> 00:31:03,490
would say alert Fuu dot bar this should

650
00:31:03,490 --> 00:31:07,809
access the bar property on foo yeah in

651
00:31:07,809 --> 00:31:09,399
backbone you don't do it this way you

652
00:31:09,399 --> 00:31:13,929
say foo equals new you know user where

653
00:31:13,929 --> 00:31:17,500
user is a backbone model and I'll pass

654
00:31:17,500 --> 00:31:25,549
in some some parameter let's say that

655
00:31:25,559 --> 00:31:30,340
bar is equal to 3 now all the sudden I

656
00:31:30,340 --> 00:31:33,159
can't access food on bar who is no

657
00:31:33,159 --> 00:31:35,490
longer a vanilla JavaScript object

658
00:31:35,490 --> 00:31:37,809
instead I'm forced to interact with it

659
00:31:37,809 --> 00:31:41,590
he again as he said it so I'm going to

660
00:31:41,590 --> 00:31:44,380
call the get function and I would pass

661
00:31:44,380 --> 00:31:47,679
in the string bar and back when we do

662
00:31:47,679 --> 00:31:50,610
the work of that look up for me

663
00:31:50,610 --> 00:31:53,320
but Marcus isn't that really annoying

664
00:31:53,320 --> 00:31:55,809
yes it

665
00:31:55,809 --> 00:31:59,179
later and we want to set food bar or

666
00:31:59,179 --> 00:32:03,500
rather whose bar absolute and I'd say

667
00:32:03,500 --> 00:32:10,039
food upset bar to be seven this is a big

668
00:32:10,039 --> 00:32:12,020
big big problem there's a lot of reasons

669
00:32:12,020 --> 00:32:14,419
this is a problem some of them some of

670
00:32:14,419 --> 00:32:16,370
the reasons involved the fact that a

671
00:32:16,370 --> 00:32:18,590
lotta libraries were written in history

672
00:32:18,590 --> 00:32:21,710
that rely on vanilla property access the

673
00:32:21,710 --> 00:32:24,650
backbone does not play by those rules in

674
00:32:24,650 --> 00:32:26,299
part because javascript does not offer

675
00:32:26,299 --> 00:32:28,490
enough features for Beckham to do a

676
00:32:28,490 --> 00:32:30,130
backbone promises

677
00:32:30,130 --> 00:32:35,270
using vanilla property access so the

678
00:32:35,270 --> 00:32:38,240
what what they've chosen to do is is

679
00:32:38,240 --> 00:32:40,429
require that users of the backbone

680
00:32:40,429 --> 00:32:43,580
library call bucket and offset and every

681
00:32:43,580 --> 00:32:46,030
time they want an accent even though mom

682
00:32:46,030 --> 00:32:48,140
are there any questions about getters

683
00:32:48,140 --> 00:32:55,179
and setters as they relate to moms yeah

684
00:32:55,179 --> 00:32:58,520
is there any way not to use get a

685
00:32:58,520 --> 00:33:01,820
success the only thing and you

686
00:33:01,820 --> 00:33:04,100
definitely shouldn't do this the only

687
00:33:04,100 --> 00:33:06,020
thing you could do is ignore the

688
00:33:06,020 --> 00:33:08,870
existence of the document offset and

689
00:33:08,870 --> 00:33:10,820
just start tacking properties onto the

690
00:33:10,820 --> 00:33:13,580
model object itself the problem is you

691
00:33:13,580 --> 00:33:15,760
will be skirting around all of the

692
00:33:15,760 --> 00:33:18,350
framework that you downloaded and

693
00:33:18,350 --> 00:33:20,600
meticulously install and like used in

694
00:33:20,600 --> 00:33:22,130
your project and you won't have any

695
00:33:22,130 --> 00:33:25,450
other features the backbone promises so

696
00:33:25,450 --> 00:33:27,799
perhaps a more accurate answer is no

697
00:33:27,799 --> 00:33:29,990
there's no way around it but technically

698
00:33:29,990 --> 00:33:35,419
you can just ignore them I'm so glad you

699
00:33:35,419 --> 00:33:37,070
asked I was going to I was going to

700
00:33:37,070 --> 00:33:38,330
insist that someone asked a question

701
00:33:38,330 --> 00:33:40,820
until that came up why did they

702
00:33:40,820 --> 00:33:45,230
introduce getters and setters so well

703
00:33:45,230 --> 00:33:48,530
that change notifications in a word

704
00:33:48,530 --> 00:33:50,919
order words it's changed notification

705
00:33:50,919 --> 00:33:53,740
JavaScript doesn't provide an API

706
00:33:53,740 --> 00:33:56,210
dumpster objects do not provide any

707
00:33:56,210 --> 00:34:01,090
interface that allows you to listen for

708
00:34:01,090 --> 00:34:05,059
changes to a llama or to an optical at

709
00:34:05,059 --> 00:34:07,159
least up until very recently and since

710
00:34:07,159 --> 00:34:10,460
it's not cross-platform yet we can't

711
00:34:10,460 --> 00:34:17,510
really rely so since backbone is

712
00:34:17,510 --> 00:34:20,330
attempting to facilitate an automatic

713
00:34:20,330 --> 00:34:22,550
relationship between models and views to

714
00:34:22,550 --> 00:34:25,520
keep views in sync with models so that

715
00:34:25,520 --> 00:34:28,490
you don't have to maintain consistency

716
00:34:28,490 --> 00:34:31,280
yourself you want to just interact with

717
00:34:31,280 --> 00:34:33,020
your models and trust them the

718
00:34:33,020 --> 00:34:35,210
transformation up to the view is working

719
00:34:35,210 --> 00:34:37,310
on its own that's the whole that's the

720
00:34:37,310 --> 00:34:42,590
whole value crop of backbone since uh

721
00:34:42,590 --> 00:34:47,210
since backbone says hey play by our

722
00:34:47,210 --> 00:34:49,100
rules and you won't have to think so

723
00:34:49,100 --> 00:34:52,760
hard about about the consistency of your

724
00:34:52,760 --> 00:34:56,980
view and maintaining its you know

725
00:34:56,980 --> 00:34:59,630
pairing with the

726
00:34:59,630 --> 00:35:03,519
that is reflected in your model system

727
00:35:03,519 --> 00:35:05,690
in fact one's going to make that promise

728
00:35:05,690 --> 00:35:07,700
it needs to know when the model changes

729
00:35:07,700 --> 00:35:11,690
so it encloses this constraint it turns

730
00:35:11,690 --> 00:35:14,869
out their rabbit leg rubber solutions to

731
00:35:14,869 --> 00:35:17,420
this problem but they're not very

732
00:35:17,420 --> 00:35:19,609
intuitive but the other frameworks kind

733
00:35:19,609 --> 00:35:21,950
of started using them they have the

734
00:35:21,950 --> 00:35:26,240
drawbacks if you if you want the

735
00:35:26,240 --> 00:35:29,660
simplest framework backbone is a good

736
00:35:29,660 --> 00:35:31,549
choice because it makes a lot of dead

737
00:35:31,549 --> 00:35:33,799
simple choices if you want the simplest

738
00:35:33,799 --> 00:35:36,019
application after having used the

739
00:35:36,019 --> 00:35:38,119
framework probably pick something else

740
00:35:38,119 --> 00:35:39,619
is backlinks a very complicated

741
00:35:39,619 --> 00:35:42,319
applications if that makes sense it

742
00:35:42,319 --> 00:35:45,289
offers so little and the ways that it

743
00:35:45,289 --> 00:35:50,029
offers you things can be unintuitive or

744
00:35:50,029 --> 00:35:54,680
even misleading you only want to use it

745
00:35:54,680 --> 00:35:57,140
on projects that are the scale of

746
00:35:57,140 --> 00:36:01,900
support that are supported by the week

747
00:36:01,900 --> 00:36:05,809
that said a lot of high scale websites

748
00:36:05,809 --> 00:36:07,640
are using backbone them making it do

749
00:36:07,640 --> 00:36:09,079
backflips for their for their own

750
00:36:09,079 --> 00:36:10,789
purposes I certainly don't mean to

751
00:36:10,789 --> 00:36:14,329
disparage the backbone community or the

752
00:36:14,329 --> 00:36:15,829
preeminent designers but they were

753
00:36:15,829 --> 00:36:18,410
designing for a very specific design

754
00:36:18,410 --> 00:36:20,630
intent of a very specific use case they

755
00:36:20,630 --> 00:36:23,299
did not want to see their framework get

756
00:36:23,299 --> 00:36:26,029
overly complicated on the inside and as

757
00:36:26,029 --> 00:36:30,410
a result a lot of the choices we have to

758
00:36:30,410 --> 00:36:32,299
make as developers within the backbone

759
00:36:32,299 --> 00:36:36,430
framework can be overwhelmed at times

760
00:36:36,430 --> 00:36:40,410
cool

761
00:36:40,420 --> 00:36:43,670
elections as I mentioned before our

762
00:36:43,670 --> 00:36:45,560
collections are basically models they're

763
00:36:45,560 --> 00:36:47,330
basically arrayed like models or they

764
00:36:47,330 --> 00:36:50,420
can be thought of as such they follow a

765
00:36:50,420 --> 00:36:52,250
lot of the same rules conceptually but

766
00:36:52,250 --> 00:36:53,810
they lacked some of the infrastructure

767
00:36:53,810 --> 00:36:56,030
that you would hope for from a model for

768
00:36:56,030 --> 00:36:57,200
example they don't have getters and

769
00:36:57,200 --> 00:36:57,850
setters

770
00:36:57,850 --> 00:37:04,040
they have index accessors you can get at

771
00:37:04,040 --> 00:37:08,119
set different values from the middle or

772
00:37:08,119 --> 00:37:10,420
the end of the beginning of the sequence

773
00:37:10,420 --> 00:37:14,090
you were truly the orderly sequence

774
00:37:14,090 --> 00:37:17,480
values that the collected stories but

775
00:37:17,480 --> 00:37:19,070
you don't get not get enough set on

776
00:37:19,070 --> 00:37:21,710
arbitrary keys this can be problematic

777
00:37:21,710 --> 00:37:24,619
if you have for example a playlist and

778
00:37:24,619 --> 00:37:27,080
the playlist is supposed to contain many

779
00:37:27,080 --> 00:37:29,359
songs but the playlist also has some

780
00:37:29,359 --> 00:37:33,350
attributes like title and owner you

781
00:37:33,350 --> 00:37:35,090
won't get done you won't have access to

782
00:37:35,090 --> 00:37:38,180
get enough set such that you can sort of

783
00:37:38,180 --> 00:37:39,950
maintain those things over time you

784
00:37:39,950 --> 00:37:41,530
instead have to do some lengthy

785
00:37:41,530 --> 00:37:44,240
collection inside a model type type

786
00:37:44,240 --> 00:37:47,840
solution are there any questions about

787
00:37:47,840 --> 00:37:53,970
collections so far

788
00:37:53,980 --> 00:37:59,560
- all alright where the attendees start

789
00:37:59,560 --> 00:38:01,380
free whoa

790
00:38:01,380 --> 00:38:08,680
time flies lockets there all right we're

791
00:38:08,680 --> 00:38:11,050
on the last slide special input

792
00:38:11,050 --> 00:38:14,890
parameters when you are defining a you

793
00:38:14,890 --> 00:38:18,430
or collection or model class so in the

794
00:38:18,430 --> 00:38:20,230
process of defining the view model a

795
00:38:20,230 --> 00:38:24,579
view amount or flexing this word has

796
00:38:24,579 --> 00:38:27,849
meaning as we explore when you are

797
00:38:27,849 --> 00:38:30,730
defining a vehicle of view class or when

798
00:38:30,730 --> 00:38:33,160
you're defining a collection class the

799
00:38:33,160 --> 00:38:36,430
word model has meaning every view has a

800
00:38:36,430 --> 00:38:39,760
model because a view is a projection of

801
00:38:39,760 --> 00:38:45,040
some collection of truth a profile that

802
00:38:45,040 --> 00:38:46,900
did is a projection of the truth about a

803
00:38:46,900 --> 00:38:49,240
user so if you're ten of you're defining

804
00:38:49,240 --> 00:38:51,700
a view class you want to ask yourself

805
00:38:51,700 --> 00:39:01,810
what model powers this class say mister

806
00:39:01,810 --> 00:39:05,589
of a collector a collection is a

807
00:39:05,589 --> 00:39:08,440
collection of some type of thing you

808
00:39:08,440 --> 00:39:09,910
want to specify what type of thing it's

809
00:39:09,910 --> 00:39:14,440
supposed to be a collection when you're

810
00:39:14,440 --> 00:39:18,640
defining a view class you want to

811
00:39:18,640 --> 00:39:20,290
specify what should happen when the user

812
00:39:20,290 --> 00:39:22,900
interacts with that view this is as

813
00:39:22,900 --> 00:39:24,910
closest backbone gets to have it in

814
00:39:24,910 --> 00:39:28,060
controller user input will come in the

815
00:39:28,060 --> 00:39:31,420
form of clicked and general targeting

816
00:39:31,420 --> 00:39:34,450
activity on some Dom node and that Dom

817
00:39:34,450 --> 00:39:38,050
node is probably represented by a view

818
00:39:38,050 --> 00:39:41,109
object right so they're interacting with

819
00:39:41,109 --> 00:39:44,260
that profile widget that is a projection

820
00:39:44,260 --> 00:39:44,940
of

821
00:39:44,940 --> 00:39:49,020
user object you want a way of specifying

822
00:39:49,020 --> 00:39:51,240
all of the reactions that should happen

823
00:39:51,240 --> 00:39:55,079
for all of those types of events it's

824
00:39:55,079 --> 00:39:58,319
called the events hacks because when

825
00:39:58,319 --> 00:40:11,470
defining a new class you will

826
00:40:11,480 --> 00:40:13,400
you will of course have initialize as

827
00:40:13,400 --> 00:40:26,850
usual but you may also have an event at

828
00:40:26,860 --> 00:40:29,980
events is going to be things like flick

829
00:40:29,980 --> 00:40:35,080
dot user or like dot you know follow

830
00:40:35,080 --> 00:40:37,730
when people click on the follow button

831
00:40:37,730 --> 00:40:39,980
of the user profile you want this

832
00:40:39,980 --> 00:40:42,100
function to run

833
00:40:42,100 --> 00:40:57,190
it's just a mapping of not interrupt

834
00:40:57,200 --> 00:41:01,170
the code you type here is whatever you

835
00:41:01,170 --> 00:41:03,450
expect to happen when the user clicks

836
00:41:03,450 --> 00:41:07,560
the button with class follow-on so

837
00:41:07,560 --> 00:41:09,390
system mapping from the event

838
00:41:09,390 --> 00:41:12,080
specification the event specifier

839
00:41:12,080 --> 00:41:14,490
including the target that is to be

840
00:41:14,490 --> 00:41:18,480
interacted with to functionality that

841
00:41:18,480 --> 00:41:24,960
you want to happen there are two

842
00:41:24,960 --> 00:41:26,250
conventions that are rather interesting

843
00:41:26,250 --> 00:41:30,350
for view classes you're going to specify

844
00:41:30,350 --> 00:41:34,530
the render operation this is does that's

845
00:41:34,530 --> 00:41:36,450
the keyword per se it's just everybody

846
00:41:36,450 --> 00:41:38,910
calls for every view there's some way of

847
00:41:38,910 --> 00:41:40,830
transforming the bottle into a glob of

848
00:41:40,830 --> 00:41:45,330
HTML or into a Dom node object whatever

849
00:41:45,330 --> 00:41:49,010
you're rendering to your render function

850
00:41:49,010 --> 00:41:52,830
does the work of checking out the model

851
00:41:52,830 --> 00:41:55,230
right every view has one Associated

852
00:41:55,230 --> 00:42:00,830
model check it out the model and and

853
00:42:00,830 --> 00:42:03,870
projecting it into whatever HTML or Dom

854
00:42:03,870 --> 00:42:05,790
node the render operation is supposed to

855
00:42:05,790 --> 00:42:07,860
produce cut out to you whether you've

856
00:42:07,860 --> 00:42:10,020
done those or HTML backbone doesn't

857
00:42:10,020 --> 00:42:13,580
really prescribe anything in that regard

858
00:42:13,580 --> 00:42:16,470
sometimes your render operation is going

859
00:42:16,470 --> 00:42:19,350
to rely on the template if that's the

860
00:42:19,350 --> 00:42:22,100
case you'll probably store in a template

861
00:42:22,100 --> 00:42:27,180
so just to be clear those would show up

862
00:42:27,180 --> 00:42:42,860
here

863
00:42:42,870 --> 00:42:45,300
and this is makes the function available

864
00:42:45,300 --> 00:42:49,080
so that I can call you know my profile

865
00:42:49,080 --> 00:42:52,290
view object dot render and get the

866
00:42:52,290 --> 00:42:54,240
rendered the currently updated rendered

867
00:42:54,240 --> 00:42:57,120
version open any questions about render

868
00:42:57,120 --> 00:43:02,280
a template yeah just have a question

869
00:43:02,280 --> 00:43:03,930
about the models and viewers in general

870
00:43:03,930 --> 00:43:08,670
is a few always tied to a single model

871
00:43:08,670 --> 00:43:11,550
only yes okay so if you wanted to

872
00:43:11,550 --> 00:43:14,340
display multiple models on a page to

873
00:43:14,340 --> 00:43:16,620
need multiple views so the question is

874
00:43:16,620 --> 00:43:19,230
is they view always tethered to one

875
00:43:19,230 --> 00:43:22,170
model only and my answer is basically

876
00:43:22,170 --> 00:43:24,060
yes there are some exceptions to this

877
00:43:24,060 --> 00:43:27,120
the first is your view can be a view of

878
00:43:27,120 --> 00:43:32,400
a collection in which case you would

879
00:43:32,400 --> 00:43:34,920
ceiling if it was like a view of the

880
00:43:34,920 --> 00:43:37,410
tweet stream you would you would you

881
00:43:37,410 --> 00:43:38,670
would map to a collection that

882
00:43:38,670 --> 00:43:39,930
represents all of the tweets in that

883
00:43:39,930 --> 00:43:42,330
stream but really it's pointing at one

884
00:43:42,330 --> 00:43:44,310
model which is to say a collection seems

885
00:43:44,310 --> 00:43:46,680
like an almost along the other way in

886
00:43:46,680 --> 00:43:48,930
which this is not quite true is you will

887
00:43:48,930 --> 00:43:51,420
sometimes build objects model object

888
00:43:51,420 --> 00:43:52,980
whose sole job is to encapsulate

889
00:43:52,980 --> 00:43:56,430
together all the things needed to render

890
00:43:56,430 --> 00:44:02,340
a given view ideally you don't have to

891
00:44:02,340 --> 00:44:04,080
consider the view while you're designing

892
00:44:04,080 --> 00:44:05,910
your model architecture but in practice

893
00:44:05,910 --> 00:44:07,830
that isn't always true sometimes you got

894
00:44:07,830 --> 00:44:09,000
to say well we're going to make this

895
00:44:09,000 --> 00:44:10,289
kind of rendering

896
00:44:10,289 --> 00:44:12,749
back home paradigm I'm gonna have the

897
00:44:12,749 --> 00:44:14,729
structure my model differently than I

898
00:44:14,729 --> 00:44:16,469
would probably like to just to make sure

899
00:44:16,469 --> 00:44:17,939
that the view has accident all right

900
00:44:17,939 --> 00:44:21,569
stuff it is an anti-pattern and this is

901
00:44:21,569 --> 00:44:22,979
this is sort of extracurricular

902
00:44:22,979 --> 00:44:25,679
recommendation for me about about MVC is

903
00:44:25,679 --> 00:44:26,849
stuff related to backbone that's

904
00:44:26,849 --> 00:44:27,569
universal

905
00:44:27,569 --> 00:44:29,880
it is an anti-pattern it bad bad bad

906
00:44:29,880 --> 00:44:33,989
idea to allow any of you to get access

907
00:44:33,989 --> 00:44:37,229
to models other than whatever model it's

908
00:44:37,229 --> 00:44:41,519
directly projection by doing so you open

909
00:44:41,519 --> 00:44:44,969
the floodgates to all of the basically

910
00:44:44,969 --> 00:44:47,669
of you having being influenced by any

911
00:44:47,669 --> 00:44:51,209
code anywhere you're in your system if

912
00:44:51,209 --> 00:44:53,429
you should never have knowledge of more

913
00:44:53,429 --> 00:44:55,919
models than the one it's projecting and

914
00:44:55,919 --> 00:44:58,109
it should never have knowledge of any

915
00:44:58,109 --> 00:45:00,089
views around it other than its direct

916
00:45:00,089 --> 00:45:01,890
children this up something as a child

917
00:45:01,890 --> 00:45:04,559
view the only case where you should know

918
00:45:04,559 --> 00:45:21,450
about another

919
00:45:21,460 --> 00:45:26,299
no the promoter was couldn't we just say

920
00:45:26,299 --> 00:45:29,809
that but enforces that a new does not

921
00:45:29,809 --> 00:45:31,549
have access to anything but its own

922
00:45:31,549 --> 00:45:33,770
single model and the fact is it does not

923
00:45:33,770 --> 00:45:36,530
it is extremely easy for you the

924
00:45:36,530 --> 00:45:38,359
developer to save references to models

925
00:45:38,359 --> 00:45:40,339
all over the place willy-nilly and then

926
00:45:40,339 --> 00:45:42,460
make your views go reference those those

927
00:45:42,460 --> 00:45:46,640
those other models now the framework

928
00:45:46,640 --> 00:45:48,470
makes it easy to get access to exactly

929
00:45:48,470 --> 00:45:52,579
one column but it's it's it's almost as

930
00:45:52,579 --> 00:45:55,069
easy to circumvent the thing to

931
00:45:55,069 --> 00:46:00,680
facilitate great vessel so the framework

932
00:46:00,680 --> 00:46:03,470
kind of requires you to more or less

933
00:46:03,470 --> 00:46:06,829
pollute the model if there's if you need

934
00:46:06,829 --> 00:46:08,480
to incorporate some things that you want

935
00:46:08,480 --> 00:46:10,849
to render the Bugis Street particularly

936
00:46:10,849 --> 00:46:13,039
not strictly part of your so the

937
00:46:13,039 --> 00:46:15,799
question is if I have a view that needs

938
00:46:15,799 --> 00:46:18,020
to project more than just a single model

939
00:46:18,020 --> 00:46:20,450
is the backbone is the backbone Frank

940
00:46:20,450 --> 00:46:22,880
we're basically requiring me to serve to

941
00:46:22,880 --> 00:46:27,950
two to four to forego the assurances of

942
00:46:27,950 --> 00:46:30,170
this wonderful rule about don't let the

943
00:46:30,170 --> 00:46:32,359
view talk to more models at a tone and

944
00:46:32,359 --> 00:46:33,770
in fact it's not the backbone framework

945
00:46:33,770 --> 00:46:35,329
of its imposing that problem it's the

946
00:46:35,329 --> 00:46:36,710
nature of the example you're giving

947
00:46:36,710 --> 00:46:38,930
example you're giving some presupposes

948
00:46:38,930 --> 00:46:41,450
that there's a projection of more than

949
00:46:41,450 --> 00:46:44,450
one model and I would claim that the

950
00:46:44,450 --> 00:46:47,329
best solution of those cases is to get

951
00:46:47,329 --> 00:46:49,970
your view to project some higher order

952
00:46:49,970 --> 00:46:54,380
model than encompasses everything I for

953
00:46:54,380 --> 00:46:56,750
example write very few applications that

954
00:46:56,750 --> 00:46:59,630
don't have an app model I believe it's

955
00:46:59,630 --> 00:47:02,119
the case that the business logic the

956
00:47:02,119 --> 00:47:07,609
model logic generally requires us to to

957
00:47:07,609 --> 00:47:09,740
have a model of the application that the

958
00:47:09,740 --> 00:47:12,680
user is experiencing that is projected

959
00:47:12,680 --> 00:47:15,599
by the app view this is an architectural

960
00:47:15,599 --> 00:47:17,789
that has some controversy around it but

961
00:47:17,789 --> 00:47:19,140
intend to solve most of the problems

962
00:47:19,140 --> 00:47:21,960
that you're talking about and although I

963
00:47:21,960 --> 00:47:23,489
find it a very difficult argument to

964
00:47:23,489 --> 00:47:23,910
make

965
00:47:23,910 --> 00:47:26,970
I currently believe it's the best

966
00:47:26,970 --> 00:47:32,559
architecture for most circumstances

967
00:47:32,569 --> 00:47:39,720
alright how does the render button get

968
00:47:39,720 --> 00:47:40,829
ahold of the model whenever you

969
00:47:40,829 --> 00:47:44,099
instantiate when whenever you

970
00:47:44,099 --> 00:47:46,920
instantiate a view I don't have it

971
00:47:46,920 --> 00:47:49,829
listed here unfortunately when the

972
00:47:49,829 --> 00:47:51,809
staging of you need to specify the model

973
00:47:51,809 --> 00:47:53,099
I think I accidentally put it up here

974
00:47:53,099 --> 00:47:55,079
under defining the viewer collection

975
00:47:55,079 --> 00:47:57,089
class which would have a different

976
00:47:57,089 --> 00:48:00,059
meaning instantiating a view you specify

977
00:48:00,059 --> 00:48:02,309
what model object what model instance

978
00:48:02,309 --> 00:48:04,799
you want that view to project and then

979
00:48:04,799 --> 00:48:06,269
the render function is just going to ask

980
00:48:06,269 --> 00:48:07,890
the view hey what what are we talking

981
00:48:07,890 --> 00:48:09,779
about again what table are we associated

982
00:48:09,779 --> 00:48:15,499
with when you instantiate a view

983
00:48:15,499 --> 00:48:18,329
there will be an element created for you

984
00:48:18,329 --> 00:48:20,369
at Dom element and that Dom element is

985
00:48:20,369 --> 00:48:21,799
the thing that goes on the page

986
00:48:21,799 --> 00:48:24,839
basically backbone views are to stuff

987
00:48:24,839 --> 00:48:26,059
downloads

988
00:48:26,059 --> 00:48:29,509
they are fancy versions of jQuery

989
00:48:29,509 --> 00:48:32,249
objects which are themselves fancy

990
00:48:32,249 --> 00:48:35,670
versions of dominance right the jQuery

991
00:48:35,670 --> 00:48:36,089
object

992
00:48:36,089 --> 00:48:38,219
fundamentally attempts to abstract over

993
00:48:38,219 --> 00:48:42,479
the complexity of a dominant or flexing

994
00:48:42,479 --> 00:48:43,079
Dom node

995
00:48:43,079 --> 00:48:45,799
that's not what this situation entails a

996
00:48:45,799 --> 00:48:48,180
jQuery object that contains one Dom node

997
00:48:48,180 --> 00:48:50,430
is just a better API for interacting

998
00:48:50,430 --> 00:48:53,009
with that dominant a backbone view is

999
00:48:53,009 --> 00:48:55,049
basically an even richer API for

1000
00:48:55,049 --> 00:48:58,650
interacting with that jQuery object so

1001
00:48:58,650 --> 00:49:00,779
when you want to talk to that ops that

1002
00:49:00,779 --> 00:49:03,180
decree on it directly you specify you

1003
00:49:03,180 --> 00:49:06,719
talk about my new instance dot yeah or

1004
00:49:06,719 --> 00:49:09,660
my new instance top dollar deal where

1005
00:49:09,660 --> 00:49:11,279
yelling to make it down though and

1006
00:49:11,279 --> 00:49:14,880
dollar TL is the jQuery redundant when

1007
00:49:14,880 --> 00:49:17,369
you instantiate of you you can specify

1008
00:49:17,369 --> 00:49:18,869
what now I'm going to use but if you

1009
00:49:18,869 --> 00:49:23,549
don't what will be generated for you and

1010
00:49:23,549 --> 00:49:26,369
that's it that's all the lingo I have

1011
00:49:26,369 --> 00:49:30,029
seven minutes so I'm going to take

1012
00:49:30,029 --> 00:49:32,039
questions for a couple of them but if

1013
00:49:32,039 --> 00:49:35,160
you are wanting to come to the four

1014
00:49:35,160 --> 00:49:37,589
o'clock talk I recommend you take a

1015
00:49:37,589 --> 00:49:39,019
bathroom break and when I go right now

1016
00:49:39,019 --> 00:49:41,069
unless you're super riveted by the

1017
00:49:41,069 --> 00:49:42,329
answers to the questions that are about

1018
00:49:42,329 --> 00:49:45,209
to be asked but the next lecture is is

1019
00:49:45,209 --> 00:49:47,430
all about the secrets and lies of

1020
00:49:47,430 --> 00:49:49,079
JavaScript classes it'll be the

1021
00:49:49,079 --> 00:49:50,339
culmination of all the work we've been

1022
00:49:50,339 --> 00:49:52,559
doing in all of the previous

1023
00:49:52,559 --> 00:49:59,069
fundamentals of lectures yeah

1024
00:49:59,079 --> 00:50:04,870
does it mean that uh

1025
00:50:04,880 --> 00:50:09,550
yes backbone usually depends on jQuery I

1026
00:50:09,550 --> 00:50:12,470
think backbone does it depend on it

1027
00:50:12,470 --> 00:50:17,430
outright or does it have a motive the

1028
00:50:17,440 --> 00:50:20,780
but you have to have a dollar yeah you

1029
00:50:20,780 --> 00:50:22,970
know some Domino aquarium provider yeah

1030
00:50:22,970 --> 00:50:26,150
so you need you need some Dominic

1031
00:50:26,150 --> 00:50:31,369
elation library probably gentler what

1032
00:50:31,369 --> 00:50:33,560
would be a scenario where you want to

1033
00:50:33,560 --> 00:50:37,099
use backbone for any of the other you

1034
00:50:37,099 --> 00:50:39,680
know maybe more full-featured frameworks

1035
00:50:39,680 --> 00:50:46,640
like personally call me at the question

1036
00:50:46,640 --> 00:50:49,190
was when would you choose to use

1037
00:50:49,190 --> 00:50:51,530
backbone over other frameworks call the

1038
00:50:51,530 --> 00:50:54,710
intervention I am dissatisfied with all

1039
00:50:54,710 --> 00:50:57,050
the framework solution citizen offered

1040
00:50:57,050 --> 00:50:58,210
for awhile

1041
00:50:58,210 --> 00:51:00,290
unfortunately JavaScript is limited

1042
00:51:00,290 --> 00:51:02,470
enough that may all represent different

1043
00:51:02,470 --> 00:51:05,480
compromises and so the question really

1044
00:51:05,480 --> 00:51:07,430
becomes when will I be forced to use one

1045
00:51:07,430 --> 00:51:09,619
or other of these compromises I think

1046
00:51:09,619 --> 00:51:11,750
you'll be forced to use backbone when

1047
00:51:11,750 --> 00:51:14,800
using a heavier framework is impractical

1048
00:51:14,800 --> 00:51:17,260
frameworks like angular and ember

1049
00:51:17,260 --> 00:51:19,310
full-featured though they maybe have a

1050
00:51:19,310 --> 00:51:21,619
lot of complexity to them so intuitive

1051
00:51:21,619 --> 00:51:24,589
how they work is difficult if you're

1052
00:51:24,589 --> 00:51:26,810
just starting right it will be an

1053
00:51:26,810 --> 00:51:29,560
imposition of other development backbone

1054
00:51:29,560 --> 00:51:33,500
backbone I would argue gets too

1055
00:51:33,500 --> 00:51:34,849
complicated to be worth it pretty

1056
00:51:34,849 --> 00:51:38,210
quickly but if it's a small app I think

1057
00:51:38,210 --> 00:51:41,990
the simplicity that it that is its

1058
00:51:41,990 --> 00:51:45,890
thriving tenant is actually valuable for

1059
00:51:45,890 --> 00:51:51,140
small enough ass that said I find the

1060
00:51:51,140 --> 00:51:54,300
duck get that set as well as some of the

1061
00:51:54,300 --> 00:52:02,140
this discord between its own features

1062
00:52:02,140 --> 00:52:03,970
like internal discord between its

1063
00:52:03,970 --> 00:52:04,480
features

1064
00:52:04,480 --> 00:52:06,850
I find that challenging enough to hack

1065
00:52:06,850 --> 00:52:10,180
around every time it pops up but frankly

1066
00:52:10,180 --> 00:52:12,390
just don't use the framework before much

1067
00:52:12,390 --> 00:52:14,500
but it's a great learning tool to learn

1068
00:52:14,500 --> 00:52:16,960
about like how soon framework function

1069
00:52:16,960 --> 00:52:18,670
how does a framework work what does the

1070
00:52:18,670 --> 00:52:20,710
framework doing and what's backbone not

1071
00:52:20,710 --> 00:52:22,960
doing for me today that's why I want

1072
00:52:22,960 --> 00:52:24,190
this other framework that's going to

1073
00:52:24,190 --> 00:52:26,200
make huge imposition on me and require

1074
00:52:26,200 --> 00:52:28,480
me to read tons of documentation but

1075
00:52:28,480 --> 00:52:30,250
it'll break less frequently because it's

1076
00:52:30,250 --> 00:52:32,500
not because it doesn't plan that in

1077
00:52:32,500 --> 00:52:34,480
Angela has planned ahead for wait what's

1078
00:52:34,480 --> 00:52:36,370
an area of the backbone have that code

1079
00:52:36,370 --> 00:52:40,620
runs into a wall of just unanticipated

1080
00:52:40,620 --> 00:52:45,820
complexity point three any other

1081
00:52:45,820 --> 00:52:49,510
backbone questions before we husband

1082
00:52:49,510 --> 00:52:51,250
asked for a quick summary on how extend

1083
00:52:51,250 --> 00:52:54,340
words it's as the parameter that takes

1084
00:52:54,340 --> 00:52:57,490
the hash does it only look for specific

1085
00:52:57,490 --> 00:52:59,680
parameters in there or does it just take

1086
00:52:59,680 --> 00:53:02,290
anything to find and tack it on to the

1087
00:53:02,290 --> 00:53:04,930
object the way angular

1088
00:53:04,930 --> 00:53:08,810
the how does not extend work there are

1089
00:53:08,810 --> 00:53:12,500
some special teams like initialize but

1090
00:53:12,500 --> 00:53:13,580
all the rest of them just go right on

1091
00:53:13,580 --> 00:53:16,160
the prototype every other property use

1092
00:53:16,160 --> 00:53:19,130
you pass becomes a property of prototype

1093
00:53:19,130 --> 00:53:21,620
in that class so much my question is

1094
00:53:21,620 --> 00:53:23,990
immediately would you be able to seal

1095
00:53:23,990 --> 00:53:27,230
the class by overwriting extend within a

1096
00:53:27,230 --> 00:53:31,190
lock function by seal do you mean not

1097
00:53:31,190 --> 00:53:36,110
extendable itself I mean so the question

1098
00:53:36,110 --> 00:53:37,550
is could you seal the class by

1099
00:53:37,550 --> 00:53:40,130
overriding extend for the Noah you can

1100
00:53:40,130 --> 00:53:42,490
seal it it as much as it would be

1101
00:53:42,490 --> 00:53:45,410
difficult to accidentally extend to that

1102
00:53:45,410 --> 00:53:49,610
class right but it would be trivial for

1103
00:53:49,610 --> 00:53:53,060
someone to circumvent your ceiling they

1104
00:53:53,060 --> 00:53:56,120
could just call extend up apply it's

1105
00:53:56,120 --> 00:53:57,980
stealing my other model that extend up

1106
00:53:57,980 --> 00:54:00,350
lie to that thing so as it's sort of

1107
00:54:00,350 --> 00:54:01,880
like bookmark to yourself to prevent

1108
00:54:01,880 --> 00:54:04,420
accidental misuse yeah you can do that

1109
00:54:04,420 --> 00:54:06,770
I'm actually just done of having to Noah

1110
00:54:06,770 --> 00:54:08,270
I would have to throw an error since you

1111
00:54:08,270 --> 00:54:11,840
apparently wanted to really that's more

1112
00:54:11,840 --> 00:54:13,580
disgrace by the backbone prevented you

1113
00:54:13,580 --> 00:54:17,420
from overwriting some of its own face

1114
00:54:17,420 --> 00:54:19,640
great question does backbone service

1115
00:54:19,640 --> 00:54:21,830
prevent you from doing things like

1116
00:54:21,830 --> 00:54:24,890
overrated not extend it cans for the

1117
00:54:24,890 --> 00:54:26,660
same reasons that it has not set it up

1118
00:54:26,660 --> 00:54:28,610
yet it has no way of knowing when you're

1119
00:54:28,610 --> 00:54:30,020
acting this property so unless it's

1120
00:54:30,020 --> 00:54:31,490
checking them on some schedule older

1121
00:54:31,490 --> 00:54:33,110
sounds pretty inconvenient to the

1122
00:54:33,110 --> 00:54:53,310
framework to do just to make sure

1123
00:54:53,320 --> 00:54:59,170
the question is is backbone more than BC

1124
00:54:59,170 --> 00:55:02,740
of Mormon mvvm and that question was

1125
00:55:02,740 --> 00:55:05,560
prefaced by I'm often confused by the

1126
00:55:05,560 --> 00:55:07,600
distinction I guess I was saying I am

1127
00:55:07,600 --> 00:55:09,310
also confused by the distinction I

1128
00:55:09,310 --> 00:55:12,220
believe that the the concepts of MVC

1129
00:55:12,220 --> 00:55:15,850
are so fluid and so interpretable as

1130
00:55:15,850 --> 00:55:17,650
meaning very many different types of

1131
00:55:17,650 --> 00:55:21,370
things that to start proliferating the

1132
00:55:21,370 --> 00:55:23,620
number of classifications of MVC is

1133
00:55:23,620 --> 00:55:30,040
perhaps counterproductive but you might

1134
00:55:30,040 --> 00:55:30,820
have pick one

1135
00:55:30,820 --> 00:55:35,710
I think mvvm is perhaps better in this

1136
00:55:35,710 --> 00:55:39,100
case now that said like I think of media

1137
00:55:39,100 --> 00:55:43,840
itself is poorly on that I was actually

1138
00:55:43,840 --> 00:55:46,030
been asked what you thought that the

1139
00:55:46,030 --> 00:55:48,790
concept of praying and at modern - to

1140
00:55:48,790 --> 00:55:50,410
encompass maybe some other models that

1141
00:55:50,410 --> 00:55:52,030
need to be instead of the same talking

1142
00:55:52,030 --> 00:55:54,880
to you was kind of

1143
00:55:54,880 --> 00:55:59,930
yeah yes yes I actually so this is a

1144
00:55:59,930 --> 00:56:01,460
great class in minutes we're getting

1145
00:56:01,460 --> 00:56:03,769
sort of lofty above NBC which makes me

1146
00:56:03,769 --> 00:56:05,089
happy this is like one of my favorite

1147
00:56:05,089 --> 00:56:10,970
topics the fact that I advocate for a

1148
00:56:10,970 --> 00:56:14,569
view model I'm sorry for a yes a view

1149
00:56:14,569 --> 00:56:16,999
model does that seem to our site at half

1150
00:56:16,999 --> 00:56:18,799
miles given the fact that I've seen it

1151
00:56:18,799 --> 00:56:20,660
at the Cape for an app model does that

1152
00:56:20,660 --> 00:56:24,859
imply that I am in favor of mvvm either

1153
00:56:24,859 --> 00:56:26,900
form a club or quite generally I would

1154
00:56:26,900 --> 00:56:28,809
say that in fact having an app model

1155
00:56:28,809 --> 00:56:32,920
strikes me has a rather non-optional

1156
00:56:32,920 --> 00:56:36,950
aspect of ending than VC application its

1157
00:56:36,950 --> 00:56:39,140
optimum as much as you can avoid it but

1158
00:56:39,140 --> 00:56:40,190
you can also avoid ever having

1159
00:56:40,190 --> 00:56:42,740
collections in any application then you

1160
00:56:42,740 --> 00:56:45,099
can just hack around it using other

1161
00:56:45,099 --> 00:56:47,269
techniques for solving the problem of

1162
00:56:47,269 --> 00:56:49,849
ordered lists of things it would be

1163
00:56:49,849 --> 00:56:51,819
better if you just choose to have a

1164
00:56:51,819 --> 00:56:54,380
actual order or a light sequence of

1165
00:56:54,380 --> 00:56:56,299
things as opposed to giving everything a

1166
00:56:56,299 --> 00:56:57,920
unique random name and then keeping

1167
00:56:57,920 --> 00:56:59,869
those a linked list I don't know what

1168
00:56:59,869 --> 00:57:02,180
you can do to hack around that I believe

1169
00:57:02,180 --> 00:57:05,809
that the app model is so important to

1170
00:57:05,809 --> 00:57:10,579
any MVC or mvvm application that to try

1171
00:57:10,579 --> 00:57:12,230
and write an application without it is

1172
00:57:12,230 --> 00:57:14,809
to doom yourself to a lot of aimless

1173
00:57:14,809 --> 00:57:17,960
academic questions about what is MVC

1174
00:57:17,960 --> 00:57:19,930
really and how do I classify this

1175
00:57:19,930 --> 00:57:22,249
behavior does it is it business logic

1176
00:57:22,249 --> 00:57:24,049
which I still never heard a definition

1177
00:57:24,049 --> 00:57:27,680
for I think there are a lot of spurious

1178
00:57:27,680 --> 00:57:29,269
questions out there and they are links

1179
00:57:29,269 --> 00:57:30,319
to the fact that people feel

1180
00:57:30,319 --> 00:57:35,839
uncomfortable defining a app do you

1181
00:57:35,839 --> 00:57:38,530
consider the app model more part of the

1182
00:57:38,530 --> 00:57:41,710
or see the F I would say that the app

1183
00:57:41,710 --> 00:57:47,050
model is very much a an aspect of the

1184
00:57:47,050 --> 00:57:49,240
model generally and since we're on the

1185
00:57:49,240 --> 00:57:51,070
topic on the bank might my defense for

1186
00:57:51,070 --> 00:57:52,170
it

1187
00:57:52,170 --> 00:57:55,090
when a user uses an application they

1188
00:57:55,090 --> 00:57:56,350
interact with a lot of state that we

1189
00:57:56,350 --> 00:57:58,300
wouldn't consider sort of pristine and

1190
00:57:58,300 --> 00:58:01,090
abstract like which users are following

1191
00:58:01,090 --> 00:58:03,910
which users and how old is this one user

1192
00:58:03,910 --> 00:58:05,530
these are things that we can all agree

1193
00:58:05,530 --> 00:58:12,790
are so so pristinely you know blessed

1194
00:58:12,790 --> 00:58:15,130
with model enos that no one there's no

1195
00:58:15,130 --> 00:58:17,230
controversy about whether that is state

1196
00:58:17,230 --> 00:58:20,610
that the user cares about having

1197
00:58:20,610 --> 00:58:23,500
consistently managed in some database

1198
00:58:23,500 --> 00:58:27,520
summer we become uncomfortable when we

1199
00:58:27,520 --> 00:58:30,130
talk about state that seems to be best

1200
00:58:30,130 --> 00:58:32,590
represented by the abusive sin itself so

1201
00:58:32,590 --> 00:58:35,620
for example when a pop-up box is open or

1202
00:58:35,620 --> 00:58:38,110
not and whether or not that pop-up box

1203
00:58:38,110 --> 00:58:41,890
has been dismissed these are these are

1204
00:58:41,890 --> 00:58:43,420
states that the user can get themselves

1205
00:58:43,420 --> 00:58:45,160
into as a result of navigating your

1206
00:58:45,160 --> 00:58:47,320
application that many people want to

1207
00:58:47,320 --> 00:58:51,880
watch you call view state and what I

1208
00:58:51,880 --> 00:58:53,980
call that the logical view state or

1209
00:58:53,980 --> 00:58:54,940
something and I think this is a

1210
00:58:54,940 --> 00:58:56,410
contradiction in terms

1211
00:58:56,410 --> 00:58:59,130
as soon as you build an app we're

1212
00:58:59,130 --> 00:59:01,870
logging in on another computer later

1213
00:59:01,870 --> 00:59:04,180
should show you the same pop up as you

1214
00:59:04,180 --> 00:59:06,640
were seeing before you suddenly discover

1215
00:59:06,640 --> 00:59:08,380
that that state was very important to

1216
00:59:08,380 --> 00:59:10,510
your user and you've promoted out of

1217
00:59:10,510 --> 00:59:13,150
this link some power class of state

1218
00:59:13,150 --> 00:59:16,060
where when you click view state and you

1219
00:59:16,060 --> 00:59:19,000
say this is actually not as often you

1220
00:59:19,000 --> 00:59:21,880
know abstraction state these to you I've

1221
00:59:21,880 --> 00:59:23,350
been at several companies that have

1222
00:59:23,350 --> 00:59:27,010
built notification trackers special

1223
00:59:27,010 --> 00:59:28,780
systems that keep track of whether or

1224
00:59:28,780 --> 00:59:30,850
not a user offenses acknowledge a

1225
00:59:30,850 --> 00:59:32,590
certain message everyone in the system

1226
00:59:32,590 --> 00:59:34,900
must see we are upgrading our system

1227
00:59:34,900 --> 00:59:36,670
day or we changed our trips and

1228
00:59:36,670 --> 00:59:39,900
conditions and they build these really

1229
00:59:39,900 --> 00:59:42,460
different infrastructures to support

1230
00:59:42,460 --> 00:59:45,309
this brand-new animal if we were to

1231
00:59:45,309 --> 00:59:48,220
accept that that state itself like all

1232
00:59:48,220 --> 00:59:51,270
state is actually just related to

1233
00:59:51,270 --> 00:59:53,440
perhaps a narrowly scoped user

1234
00:59:53,440 --> 00:59:55,240
experience but it's related to the truth

1235
00:59:55,240 --> 00:59:57,039
of it of what a user knows about the

1236
00:59:57,039 --> 00:59:59,920
world we wouldn't have a lot of these

1237
00:59:59,920 --> 01:00:02,440
philosophical complaints about the

1238
01:00:02,440 --> 01:00:08,870
differences between MVC and MVP mmm

1239
01:00:08,880 --> 01:00:19,720
okay I think I'm a few minutes over I've

1240
01:00:19,720 --> 01:00:21,819
been talking them up my voice billiards

1241
01:00:21,819 --> 01:00:22,990
so I'm thinking of taking like a two

1242
01:00:22,990 --> 01:00:25,119
minute break its water maybe you guys

1243
01:00:25,119 --> 01:00:27,099
need it as well it's like a two-minute

1244
01:00:27,099 --> 01:00:28,390
break in the middle start our final

