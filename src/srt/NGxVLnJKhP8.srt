1
00:00:13,809 --> 00:00:17,930

hi everyone I'm Lin Clark and I make

2
00:00:17,930 --> 00:00:21,020
Coke cartoons and I also work at Mozilla

3
00:00:21,020 --> 00:00:24,250
of course we make the Firefox browser

4
00:00:24,250 --> 00:00:26,750
but you might not know we have a few

5
00:00:26,750 --> 00:00:28,399
other browser projects in the works at

6
00:00:28,399 --> 00:00:30,200
the moment too and one of them uses

7
00:00:30,200 --> 00:00:32,870
react so I was working on this project I

8
00:00:32,870 --> 00:00:34,760
was hacking on it I thought I should

9
00:00:34,760 --> 00:00:37,070
really dive more deeply into Reax

10
00:00:37,070 --> 00:00:39,050
internals to see how it's doing things

11
00:00:39,050 --> 00:00:41,059
so that I can make our project more

12
00:00:41,059 --> 00:00:44,149
performant and what happened when I do

13
00:00:44,149 --> 00:00:45,230
that is I had to step through the

14
00:00:45,230 --> 00:00:47,749
virtual Dom algorithm over and over and

15
00:00:47,749 --> 00:00:49,670
over and over and over and over again

16
00:00:49,670 --> 00:00:51,710
and so I figured as long as I had gone

17
00:00:51,710 --> 00:00:53,239
through that process I might as well

18
00:00:53,239 --> 00:00:54,920
write it down and turn it into a cartoon

19
00:00:54,920 --> 00:00:56,989
so that other people could share the

20
00:00:56,989 --> 00:00:59,839
benefit of that so that is what started

21
00:00:59,839 --> 00:01:03,199
this talk I'm gonna be focusing on the

22
00:01:03,199 --> 00:01:05,540
performance what you can do to make your

23
00:01:05,540 --> 00:01:07,670
react apps more performant and I should

24
00:01:07,670 --> 00:01:09,590
start by saying that I'm not gonna be

25
00:01:09,590 --> 00:01:10,670
telling you anything that you don't

26
00:01:10,670 --> 00:01:12,799
already know I'm gonna be talking about

27
00:01:12,799 --> 00:01:15,020
things like keys and should component

28
00:01:15,020 --> 00:01:18,470
update and immutability the reason I

29
00:01:18,470 --> 00:01:20,440
wanted to talk about them though is

30
00:01:20,440 --> 00:01:23,690
because I think that we often have this

31
00:01:23,690 --> 00:01:26,690
fuzzy concept of the ideas around

32
00:01:26,690 --> 00:01:28,460
performance again we don't really take

33
00:01:28,460 --> 00:01:30,470
the time to bring those concepts into

34
00:01:30,470 --> 00:01:34,370
focus so this means that the knowledge

35
00:01:34,370 --> 00:01:35,720
about these ideas

36
00:01:35,720 --> 00:01:38,810
it's just received knowledge you know

37
00:01:38,810 --> 00:01:40,430
you just add a show component update

38
00:01:40,430 --> 00:01:42,380
because somebody told you on was

39
00:01:42,380 --> 00:01:43,910
standing on a stage and they told you to

40
00:01:43,910 --> 00:01:47,450
do that but not all recommendations work

41
00:01:47,450 --> 00:01:50,450
the same in all situations so I want to

42
00:01:50,450 --> 00:01:52,070
bring these concepts around performance

43
00:01:52,070 --> 00:01:54,920
into focus so that you can have a better

44
00:01:54,920 --> 00:01:57,200
understanding of the why behind each

45
00:01:57,200 --> 00:02:00,680
recommendation and I should also say

46
00:02:00,680 --> 00:02:02,390
before I start that I'm focusing on a

47
00:02:02,390 --> 00:02:05,120
very specific part of render perform of

48
00:02:05,120 --> 00:02:07,100
performance and react and that is

49
00:02:07,100 --> 00:02:09,709
performance during the render cycle so

50
00:02:09,709 --> 00:02:11,090
other things that you can do to make

51
00:02:11,090 --> 00:02:13,430
react more performant are things like if

52
00:02:13,430 --> 00:02:15,349
you're in production use the production

53
00:02:15,349 --> 00:02:17,030
version of react those kinds of things

54
00:02:17,030 --> 00:02:18,860
does have a huge impact and a lot of

55
00:02:18,860 --> 00:02:20,420
people slip up and don't realize that

56
00:02:20,420 --> 00:02:22,730
they're doing that but

57
00:02:22,730 --> 00:02:23,930
I'm not gonna talk about those little

58
00:02:23,930 --> 00:02:28,610
gotchas so the talks gonna go a little

59
00:02:28,610 --> 00:02:29,450
something like this

60
00:02:29,450 --> 00:02:31,940
first I'm gonna talk about the basics of

61
00:02:31,940 --> 00:02:33,470
rendering in the browser so how the

62
00:02:33,470 --> 00:02:35,000
browser actually renders your web page

63
00:02:35,000 --> 00:02:36,980
and what parts of that can possibly be

64
00:02:36,980 --> 00:02:40,459
slow and then I'm gonna talk about what

65
00:02:40,459 --> 00:02:42,860
react does to minimize and batch Dom

66
00:02:42,860 --> 00:02:45,319
changes with the virtual Dom to make it

67
00:02:45,319 --> 00:02:48,799
a little bit faster and then I'm gonna

68
00:02:48,799 --> 00:02:53,090
cover what you can do to make react even

69
00:02:53,090 --> 00:02:57,860
faster than that so let's start with

70
00:02:57,860 --> 00:02:59,930
number one how the browser builds your

71
00:02:59,930 --> 00:03:01,790
web page how it actually renders the

72
00:03:01,790 --> 00:03:05,810
page and what parts are slow and you can

73
00:03:05,810 --> 00:03:07,340
kind of think of this in the same way

74
00:03:07,340 --> 00:03:09,799
that you think of developing the website

75
00:03:09,799 --> 00:03:12,470
yourself so there's work that takes

76
00:03:12,470 --> 00:03:14,599
place over time and there's an initial

77
00:03:14,599 --> 00:03:16,640
period of work this would be before the

78
00:03:16,640 --> 00:03:18,230
initial launch if you were developing

79
00:03:18,230 --> 00:03:20,019
you know in the development process and

80
00:03:20,019 --> 00:03:23,230
in react this is the initial render and

81
00:03:23,230 --> 00:03:26,540
then there are updates that happen after

82
00:03:26,540 --> 00:03:29,540
that so in if you were working on a

83
00:03:29,540 --> 00:03:31,040
project that would be any feature

84
00:03:31,040 --> 00:03:34,669
updates if you're working in react that

85
00:03:34,669 --> 00:03:35,780
is gonna be something like this that

86
00:03:35,780 --> 00:03:40,669
says date updating the UI to extend this

87
00:03:40,669 --> 00:03:42,290
metaphor your code is kind of like the

88
00:03:42,290 --> 00:03:43,880
project Li planning the project and

89
00:03:43,880 --> 00:03:46,720
telling folks what to do unfortunately

90
00:03:46,720 --> 00:03:49,940
your code only has one person working on

91
00:03:49,940 --> 00:03:52,250
this project for it and that's the main

92
00:03:52,250 --> 00:03:56,180
thread so the main thread is kind of

93
00:03:56,180 --> 00:03:59,480
like a JavaScript developer it err sorry

94
00:03:59,480 --> 00:04:00,819
it's kind of like a full-stack developer

95
00:04:00,819 --> 00:04:04,419
it covers JavaScript the Dom and layout

96
00:04:04,419 --> 00:04:06,349
just as when you're working on a project

97
00:04:06,349 --> 00:04:08,840
in real life if you only have one person

98
00:04:08,840 --> 00:04:10,280
working on the project you're gonna

99
00:04:10,280 --> 00:04:12,739
limit the number of tasks that you

100
00:04:12,739 --> 00:04:15,169
assign to that one person if you want

101
00:04:15,169 --> 00:04:19,039
that project to be delivered on time but

102
00:04:19,039 --> 00:04:20,840
before we know how to reduce the amount

103
00:04:20,840 --> 00:04:22,669
of work that the main thread is doing we

104
00:04:22,669 --> 00:04:24,650
need to know more about the work that

105
00:04:24,650 --> 00:04:27,440
the main thread does so as I mentioned

106
00:04:27,440 --> 00:04:29,449
before the main thread is in charge of

107
00:04:29,449 --> 00:04:31,880
JavaScript so this is you know you're

108
00:04:31,880 --> 00:04:33,110
familiar with JavaScript this is where

109
00:04:33,110 --> 00:04:34,640
you define your functions where you call

110
00:04:34,640 --> 00:04:38,340
functions

111
00:04:38,350 --> 00:04:42,020
the DOM is the way the functions tell

112
00:04:42,020 --> 00:04:43,570
the page what to do

113
00:04:43,570 --> 00:04:45,680
basically the Dom gives you a set of

114
00:04:45,680 --> 00:04:47,390
objects that you can move around and

115
00:04:47,390 --> 00:04:49,850
manipulate in order to change what the

116
00:04:49,850 --> 00:04:52,490
browsers rendering and the way that this

117
00:04:52,490 --> 00:04:53,840
works is that there's something behind

118
00:04:53,840 --> 00:04:56,360
the scenes called the render tree and so

119
00:04:56,360 --> 00:04:58,370
the main thread combines the Dom with

120
00:04:58,370 --> 00:05:01,220
CSS to create the render tree and it

121
00:05:01,220 --> 00:05:02,540
figures out a thing from that called the

122
00:05:02,540 --> 00:05:05,330
box model and this is what it passes off

123
00:05:05,330 --> 00:05:06,950
to the thing that actually passes the

124
00:05:06,950 --> 00:05:10,310
pixels to the page this little process

125
00:05:10,310 --> 00:05:12,470
is called a reflow and that computation

126
00:05:12,470 --> 00:05:14,930
takes a bit of time so the main thread

127
00:05:14,930 --> 00:05:16,880
doesn't do it on every single Dom change

128
00:05:16,880 --> 00:05:18,590
instead what it tries to do is bash

129
00:05:18,590 --> 00:05:20,690
those changes together so that it can

130
00:05:20,690 --> 00:05:23,240
cover more of them in a single pass

131
00:05:23,240 --> 00:05:26,900
through computing the render tree so the

132
00:05:26,900 --> 00:05:28,730
way this works is you know your code

133
00:05:28,730 --> 00:05:30,800
might say change the class name on that

134
00:05:30,800 --> 00:05:33,980
button and then the main thread goes

135
00:05:33,980 --> 00:05:38,120
over and does it and then additive the

136
00:05:38,120 --> 00:05:39,590
main thread goes over and does it and

137
00:05:39,590 --> 00:05:41,750
then add another button the main thread

138
00:05:41,750 --> 00:05:44,780
goes over and does it the main thread

139
00:05:44,780 --> 00:05:47,510
will also meet a note to itself sometime

140
00:05:47,510 --> 00:05:49,400
in the future I need to recalculate that

141
00:05:49,400 --> 00:05:51,680
render tree and so when that time in the

142
00:05:51,680 --> 00:05:53,930
future comes is going to go over to the

143
00:05:53,930 --> 00:05:56,690
render tree and calculate all of those

144
00:05:56,690 --> 00:06:00,680
things together so we want to reduce the

145
00:06:00,680 --> 00:06:01,820
amount of work that the main thread is

146
00:06:01,820 --> 00:06:04,580
doing here you might have figured out

147
00:06:04,580 --> 00:06:07,940
two good ways one way is to reduce the

148
00:06:07,940 --> 00:06:11,120
number of Dom changes and another way is

149
00:06:11,120 --> 00:06:13,490
to batch those Dom changes together in

150
00:06:13,490 --> 00:06:15,470
time so that the main thread can take

151
00:06:15,470 --> 00:06:16,880
care of all that recalculation on the

152
00:06:16,880 --> 00:06:19,880
same reflow and this is something that

153
00:06:19,880 --> 00:06:22,850
react helps you do now I want to be

154
00:06:22,850 --> 00:06:24,980
clear react isn't the only way to do

155
00:06:24,980 --> 00:06:26,780
this it's actually not even a necessary

156
00:06:26,780 --> 00:06:29,570
way of doing this these ideas have been

157
00:06:29,570 --> 00:06:32,120
around since well before react so it's

158
00:06:32,120 --> 00:06:33,680
not that react is necessarily more

159
00:06:33,680 --> 00:06:37,640
performant than vanilla JavaScript the

160
00:06:37,640 --> 00:06:39,650
thing is in order to get these

161
00:06:39,650 --> 00:06:41,810
performance gains your code has to be

162
00:06:41,810 --> 00:06:44,360
smart your code needs to know how to

163
00:06:44,360 --> 00:06:46,700
direct the main thread pretty precisely

164
00:06:46,700 --> 00:06:48,660
to do these things

165
00:06:48,660 --> 00:06:51,010
so go back to the metaphor your code

166
00:06:51,010 --> 00:06:52,150
needs to be able it's a really really

167
00:06:52,150 --> 00:06:54,580
good product manager it needs to know

168
00:06:54,580 --> 00:06:58,330
what to display in this webpage and it

169
00:06:58,330 --> 00:06:59,710
also needs to be a really really good

170
00:06:59,710 --> 00:07:01,690
tech lead it needs to know how to build

171
00:07:01,690 --> 00:07:05,330
the page in the most efficient way of

172
00:07:05,340 --> 00:07:07,750
course your code is only as smart as you

173
00:07:07,750 --> 00:07:09,670
make it so that means that all of the

174
00:07:09,670 --> 00:07:10,930
developers on your team have to have a

175
00:07:10,930 --> 00:07:13,540
really solid understanding of how these

176
00:07:13,540 --> 00:07:15,850
things work together and they need to

177
00:07:15,850 --> 00:07:17,590
not be prone to making mistakes they

178
00:07:17,590 --> 00:07:19,240
always need to be on their game on top

179
00:07:19,240 --> 00:07:19,930
of their game

180
00:07:19,930 --> 00:07:21,970
so what react does for you is it

181
00:07:21,970 --> 00:07:24,970
offloads that work it's kind of like

182
00:07:24,970 --> 00:07:26,950
your code brings in the consultant to do

183
00:07:26,950 --> 00:07:29,620
all the tech leave work and that frees

184
00:07:29,620 --> 00:07:30,940
up your code just to be a good product

185
00:07:30,940 --> 00:07:33,250
manager so that your code can just focus

186
00:07:33,250 --> 00:07:35,260
on what needs to be displayed not on how

187
00:07:35,260 --> 00:07:38,800
to make it happen so let's take a look

188
00:07:38,800 --> 00:07:40,990
at how these to react in your code work

189
00:07:40,990 --> 00:07:43,240
together to direct the main thread in

190
00:07:43,240 --> 00:07:46,750
shipping and I won't be showing the main

191
00:07:46,750 --> 00:07:47,920
thread through the rest of the slides

192
00:07:47,920 --> 00:07:49,630
but just assume wherever you're seeing

193
00:07:49,630 --> 00:07:53,100
work being done the main thread is there

194
00:07:53,100 --> 00:07:55,870
so this brings us to part two how react

195
00:07:55,870 --> 00:07:58,680
minimizes work using the virtual DOM and

196
00:07:58,680 --> 00:08:01,540
I'm going to start this off with a UI

197
00:08:01,540 --> 00:08:05,050
that we're gonna build so this UI is

198
00:08:05,050 --> 00:08:07,000
just a list of numbers and when you

199
00:08:07,000 --> 00:08:10,030
click the button the numbers multiply by

200
00:08:10,030 --> 00:08:12,820
itself so let's walk through the initial

201
00:08:12,820 --> 00:08:15,490
render on this most are from the very

202
00:08:15,490 --> 00:08:18,640
beginning a user is downloaded some HTML

203
00:08:18,640 --> 00:08:21,370
and it's been parsed and there is an

204
00:08:21,370 --> 00:08:22,840
HTML element that's going to serve as

205
00:08:22,840 --> 00:08:26,830
the container for the react app and your

206
00:08:26,830 --> 00:08:28,360
code has been loaded and react has been

207
00:08:28,360 --> 00:08:30,040
loaded along with your code these things

208
00:08:30,040 --> 00:08:32,169
called components have been loaded and

209
00:08:32,169 --> 00:08:33,610
so these are kind of like deputy product

210
00:08:33,610 --> 00:08:35,229
managers that know about specific parts

211
00:08:35,229 --> 00:08:37,080
of the page and what they should render

212
00:08:37,080 --> 00:08:40,930
and in case you aren't familiar this is

213
00:08:40,930 --> 00:08:43,960
what code that corresponds to react Dom

214
00:08:43,960 --> 00:08:46,930
render and then the first parameter is

215
00:08:46,930 --> 00:08:50,770
list asking as a react element and then

216
00:08:50,770 --> 00:08:53,200
the second parameter is the HTML

217
00:08:53,200 --> 00:08:54,490
container that we were just talking

218
00:08:54,490 --> 00:08:56,020
about so we covered that HTML container

219
00:08:56,020 --> 00:09:00,760
but what is the react element

220
00:09:00,770 --> 00:09:02,720
it's a way for your code to handoff

221
00:09:02,720 --> 00:09:05,300
requirements to react to tell react what

222
00:09:05,300 --> 00:09:08,180
needs to be displayed so following the

223
00:09:08,180 --> 00:09:10,520
analogy it's like a little note card

224
00:09:10,520 --> 00:09:12,200
that has a few notes about what react

225
00:09:12,200 --> 00:09:15,950
needs to build it has the type which is

226
00:09:15,950 --> 00:09:17,330
the component that's gonna be used to

227
00:09:17,330 --> 00:09:19,459
build the thing and has the props and

228
00:09:19,459 --> 00:09:22,310
children and reacts gonna hold on to the

229
00:09:22,310 --> 00:09:23,630
style element is just gonna tuck this

230
00:09:23,630 --> 00:09:25,370
note card away until it's ready to build

231
00:09:25,370 --> 00:09:29,720
the thing the thing that it builds using

232
00:09:29,720 --> 00:09:31,190
these specs using this these

233
00:09:31,190 --> 00:09:33,500
requirements is an instance of the

234
00:09:33,500 --> 00:09:36,380
component so an instance is the thing

235
00:09:36,380 --> 00:09:38,660
that holds on to the state is the thing

236
00:09:38,660 --> 00:09:40,370
that you call this dot set state on the

237
00:09:40,370 --> 00:09:43,240
thing that holds on to the Refs

238
00:09:43,240 --> 00:09:45,980
it's the thing that react uses to figure

239
00:09:45,980 --> 00:09:47,180
out whether or not it means to update

240
00:09:47,180 --> 00:09:50,300
the Dom but you don't actually interact

241
00:09:50,300 --> 00:09:51,740
with instances too much you don't need

242
00:09:51,740 --> 00:09:53,750
to manage instances react manages the

243
00:09:53,750 --> 00:09:56,120
instances for you you just need to give

244
00:09:56,120 --> 00:09:57,980
it these requirements and form of

245
00:09:57,980 --> 00:10:01,490
elements so your code asks for an

246
00:10:01,490 --> 00:10:05,510
element and react creates it and then

247
00:10:05,510 --> 00:10:07,250
your code tells react to start rendering

248
00:10:07,250 --> 00:10:09,350
this is react Dom render your code tells

249
00:10:09,350 --> 00:10:11,300
react to start rendering that element

250
00:10:11,300 --> 00:10:14,089
into the container and this begins

251
00:10:14,089 --> 00:10:17,839
construction of reacts render tree now

252
00:10:17,839 --> 00:10:19,399
if you don't follow I'm gonna have to

253
00:10:19,399 --> 00:10:21,170
move through this pretty quickly but

254
00:10:21,170 --> 00:10:23,060
this is being recorded so you can catch

255
00:10:23,060 --> 00:10:25,220
up on it there and if you want a version

256
00:10:25,220 --> 00:10:28,130
of this for yourself I've posted it on

257
00:10:28,130 --> 00:10:30,740
Twitter both Lin Clark & Co cartoons so

258
00:10:30,740 --> 00:10:32,420
you can go there and download a version

259
00:10:32,420 --> 00:10:36,140
of this I should say say before I start

260
00:10:36,140 --> 00:10:38,029
going through this algorithm it has

261
00:10:38,029 --> 00:10:39,950
changed it actually has changed since I

262
00:10:39,950 --> 00:10:41,870
started writing this talk and it will

263
00:10:41,870 --> 00:10:44,089
change again there are some pretty big

264
00:10:44,089 --> 00:10:45,560
changes to this algorithm in the

265
00:10:45,560 --> 00:10:48,440
pipeline currently but for now this is

266
00:10:48,440 --> 00:10:51,709
how it works so react starts by creating

267
00:10:51,709 --> 00:10:53,329
this thing called a top level wrapper

268
00:10:53,329 --> 00:10:56,630
and it's just a little implementation

269
00:10:56,630 --> 00:10:58,220
detail it makes it easier for react to

270
00:10:58,220 --> 00:11:01,910
wrap up some stuff together then it

271
00:11:01,910 --> 00:11:03,320
creates an instance of that top level

272
00:11:03,320 --> 00:11:05,240
wrapper and it sets it so that when it

273
00:11:05,240 --> 00:11:06,860
calls render on that top level wrapper

274
00:11:06,860 --> 00:11:10,220
is going to render to the list this is

275
00:11:10,220 --> 00:11:12,650
the raft element that was passed in

276
00:11:12,650 --> 00:11:14,570
which has now been instantiated

277
00:11:14,570 --> 00:11:16,730
so it's that's the province date on the

278
00:11:16,730 --> 00:11:18,590
list and then it wants to create the

279
00:11:18,590 --> 00:11:22,070
corresponding Dom for the list but

280
00:11:22,070 --> 00:11:24,110
unfortunately it doesn't know how you

281
00:11:24,110 --> 00:11:27,200
know if this were a div react knows

282
00:11:27,200 --> 00:11:29,570
about divs and knows what Dom it needs

283
00:11:29,570 --> 00:11:31,310
to create for a div react element it

284
00:11:31,310 --> 00:11:34,550
needs to create a div HTML element but

285
00:11:34,550 --> 00:11:35,750
since this is something that it doesn't

286
00:11:35,750 --> 00:11:38,540
know about it's gonna have to ask so it

287
00:11:38,540 --> 00:11:41,600
asks the component and list responds

288
00:11:41,600 --> 00:11:43,640
okay well I'm gonna need you to create

289
00:11:43,640 --> 00:11:45,260
some elements for me I need you to

290
00:11:45,260 --> 00:11:47,390
create a button element and I need you

291
00:11:47,390 --> 00:11:49,190
to create for each thing that's in my

292
00:11:49,190 --> 00:11:52,430
this dot state items list I need you to

293
00:11:52,430 --> 00:11:55,580
create an item element and then I need

294
00:11:55,580 --> 00:11:58,870
you to create a div to wrap all of those

295
00:11:58,870 --> 00:12:01,790
so reactive takes all those elements

296
00:12:01,790 --> 00:12:04,490
builds them out and then tucks them away

297
00:12:04,490 --> 00:12:05,810
and the only one that it cares about

298
00:12:05,810 --> 00:12:08,210
right now is that wrapping div so it'll

299
00:12:08,210 --> 00:12:11,450
pull that out of the pile and create the

300
00:12:11,450 --> 00:12:15,710
instance for that and because this is a

301
00:12:15,710 --> 00:12:17,180
div it knows what the AMA needs to

302
00:12:17,180 --> 00:12:18,770
create for the div so it goes over to

303
00:12:18,770 --> 00:12:21,500
the Dom and creates that no note it

304
00:12:21,500 --> 00:12:24,910
didn't actually make that div a child of

305
00:12:24,910 --> 00:12:28,250
the container that's there that would

306
00:12:28,250 --> 00:12:31,130
have scheduled that reflow instead what

307
00:12:31,130 --> 00:12:32,840
it wants to do is wait until all of the

308
00:12:32,840 --> 00:12:34,640
nodes are there before it schedules that

309
00:12:34,640 --> 00:12:38,660
reflow so now to do that to get all

310
00:12:38,660 --> 00:12:39,920
those dominoes there is gonna need to

311
00:12:39,920 --> 00:12:41,600
create instances of all of the children

312
00:12:41,600 --> 00:12:44,420
and for this that goes from a complex to

313
00:12:44,420 --> 00:12:46,750
a simple structure it goes from this

314
00:12:46,750 --> 00:12:51,490
nested array into an object and that

315
00:12:51,490 --> 00:12:54,320
object has property names that

316
00:12:54,320 --> 00:12:55,700
correspond to the structure of that

317
00:12:55,700 --> 00:12:59,240
array so the first item is dot 0 the the

318
00:12:59,240 --> 00:13:01,100
name of the first item is dot 0 and

319
00:13:01,100 --> 00:13:03,350
that's because the button was the 0th

320
00:13:03,350 --> 00:13:07,160
item in that array now the items they

321
00:13:07,160 --> 00:13:09,770
have more complex names because they're

322
00:13:09,770 --> 00:13:12,650
in a nested structure so dot one dot 0

323
00:13:12,650 --> 00:13:14,750
is the first item dot one dot one is the

324
00:13:14,750 --> 00:13:18,470
second item so react takes this

325
00:13:18,470 --> 00:13:20,030
flattened list increased the instances

326
00:13:20,030 --> 00:13:22,700
from that now it's time to make the Dom

327
00:13:22,700 --> 00:13:25,360
elements

328
00:13:25,370 --> 00:13:28,040
so react knows how to create the Dom for

329
00:13:28,040 --> 00:13:30,610
a button and it goes over and does that

330
00:13:30,610 --> 00:13:33,770
then it gets the items and once again

331
00:13:33,770 --> 00:13:35,180
these are things that it doesn't know

332
00:13:35,180 --> 00:13:36,980
how to create the Dom for so it has to

333
00:13:36,980 --> 00:13:39,410
ask again and so the item is going to

334
00:13:39,410 --> 00:13:40,580
say okay I need you to create a div

335
00:13:40,580 --> 00:13:42,830
element and take the prop that was

336
00:13:42,830 --> 00:13:44,330
passed in to me and turn that into text

337
00:13:44,330 --> 00:13:48,620
content so we got crease the element and

338
00:13:48,620 --> 00:13:51,500
then the instance and then the Dom node

339
00:13:51,500 --> 00:13:53,780
it does this two more times to get that

340
00:13:53,780 --> 00:13:58,130
full set of Dom nodes then it goes over

341
00:13:58,130 --> 00:13:59,900
to the Dom and it wires up all of those

342
00:13:59,900 --> 00:14:03,080
children to their parent and then hooks

343
00:14:03,080 --> 00:14:05,030
up the wrapper div to the container div

344
00:14:05,030 --> 00:14:08,060
and this is what's gonna trigger that

345
00:14:08,060 --> 00:14:12,380
reflow but you notice that it waited to

346
00:14:12,380 --> 00:14:14,300
the end to trigger that that's that

347
00:14:14,300 --> 00:14:16,570
batching that I was talking about before

348
00:14:16,570 --> 00:14:19,160
that way the main thread can handle

349
00:14:19,160 --> 00:14:24,290
these changes all at once so we get our

350
00:14:24,290 --> 00:14:26,120
riu I and it's ready for people to

351
00:14:26,120 --> 00:14:30,530
interact with it let's see how the how

352
00:14:30,530 --> 00:14:32,120
the virtual Dom actually handles that

353
00:14:32,120 --> 00:14:35,720
user interaction so the users going to

354
00:14:35,720 --> 00:14:38,960
click the button and react figures out

355
00:14:38,960 --> 00:14:41,450
the onclick handler for the click and it

356
00:14:41,450 --> 00:14:43,730
does this using something called event

357
00:14:43,730 --> 00:14:45,590
delegation unfortunately I don't have

358
00:14:45,590 --> 00:14:48,230
time to go into what event delegation is

359
00:14:48,230 --> 00:14:50,660
but you can find an explanation of it

360
00:14:50,660 --> 00:14:53,960
and the react Doc's so from there calls

361
00:14:53,960 --> 00:14:55,970
the handler and the handler would be

362
00:14:55,970 --> 00:14:57,470
code like this you know you get a list

363
00:14:57,470 --> 00:14:59,240
of items from the state perform

364
00:14:59,240 --> 00:15:01,670
operations on the items then call set

365
00:15:01,670 --> 00:15:04,040
state with the items and if he thinks

366
00:15:04,040 --> 00:15:05,780
that you see a possible bug with this

367
00:15:05,780 --> 00:15:09,250
code we're gonna get to that later

368
00:15:09,250 --> 00:15:11,480
so the handler would have been defined

369
00:15:11,480 --> 00:15:15,050
in the list component it would have been

370
00:15:15,050 --> 00:15:18,980
bound to the list instance when it calls

371
00:15:18,980 --> 00:15:23,960
this thought set state it calls set

372
00:15:23,960 --> 00:15:28,040
state on that list instance so what

373
00:15:28,040 --> 00:15:31,310
happens when set state is called what

374
00:15:31,310 --> 00:15:34,040
react does is it sets up a few different

375
00:15:34,040 --> 00:15:37,580
lists it takes the partial state that

376
00:15:37,580 --> 00:15:39,170
was passed in with this dot set state

377
00:15:39,170 --> 00:15:40,939
and it adds it to an array on the

378
00:15:40,939 --> 00:15:43,309
instance of pending state changes and

379
00:15:43,309 --> 00:15:46,249
then it takes that instance and it adds

380
00:15:46,249 --> 00:15:47,509
it to this thing called the dirty

381
00:15:47,509 --> 00:15:49,939
components array and these are all of

382
00:15:49,939 --> 00:15:51,529
the things that are going to need to be

383
00:15:51,529 --> 00:15:53,209
updated but it doesn't take care of

384
00:15:53,209 --> 00:15:55,669
those yet it waits to see if that

385
00:15:55,669 --> 00:15:57,290
clickhandler might have done any other

386
00:15:57,290 --> 00:15:59,600
things might have set ste on any other

387
00:15:59,600 --> 00:16:01,579
instances before it actually starts

388
00:16:01,579 --> 00:16:05,209
processing this once it's figured out if

389
00:16:05,209 --> 00:16:06,980
there have or haven't been any other

390
00:16:06,980 --> 00:16:08,839
updates it goes through and it flushes

391
00:16:08,839 --> 00:16:12,709
this cue and since this is the only

392
00:16:12,709 --> 00:16:13,999
thing on this cue this is the only thing

393
00:16:13,999 --> 00:16:18,589
that we're going to process so we start

394
00:16:18,589 --> 00:16:19,850
with the instance that had sets they

395
00:16:19,850 --> 00:16:23,179
called and work down from there I'm just

396
00:16:23,179 --> 00:16:25,549
praying everything out react hold on to

397
00:16:25,549 --> 00:16:26,629
all of these things so it can do

398
00:16:26,629 --> 00:16:27,980
comparisons between the previous and the

399
00:16:27,980 --> 00:16:30,949
next but this will make it easier for

400
00:16:30,949 --> 00:16:36,199
you to see what's going on so react

401
00:16:36,199 --> 00:16:38,359
calculates the next state on the

402
00:16:38,359 --> 00:16:42,649
instance and sets that and then it has

403
00:16:42,649 --> 00:16:46,309
to ask the component okay now that you

404
00:16:46,309 --> 00:16:48,049
have this new state what are you gonna

405
00:16:48,049 --> 00:16:50,749
rend you to now and so the component

406
00:16:50,749 --> 00:16:53,689
responds and it creates the new elements

407
00:16:53,689 --> 00:16:55,160
the new set of elements that it would

408
00:16:55,160 --> 00:16:59,360
render to and from there it updates the

409
00:16:59,360 --> 00:17:02,119
instances and then it compares the

410
00:17:02,119 --> 00:17:04,220
instances the previous instances to the

411
00:17:04,220 --> 00:17:06,139
new ones and figures out whether or not

412
00:17:06,139 --> 00:17:08,569
easy to make Dom changes so for the

413
00:17:08,569 --> 00:17:10,250
button it doesn't need to make any Dom

414
00:17:10,250 --> 00:17:12,589
changes because the button hasn't

415
00:17:12,589 --> 00:17:15,470
changed at all that gets to the first

416
00:17:15,470 --> 00:17:17,419
item and it's gonna have to ask the item

417
00:17:17,419 --> 00:17:19,100
again what do you render to before it

418
00:17:19,100 --> 00:17:21,559
figures out whether or not item is has

419
00:17:21,559 --> 00:17:24,380
changed or not so item responds that

420
00:17:24,380 --> 00:17:27,319
creates the element for that updates the

421
00:17:27,319 --> 00:17:32,480
div instance and since there were no

422
00:17:32,480 --> 00:17:34,970
changes you know in the previous list it

423
00:17:34,970 --> 00:17:37,100
was one in the new list is one that text

424
00:17:37,100 --> 00:17:39,110
content hasn't changed it figures it can

425
00:17:39,110 --> 00:17:41,240
save a little work by not going over to

426
00:17:41,240 --> 00:17:42,799
them not making any changes to the Dom

427
00:17:42,799 --> 00:17:46,789
for that so then for the second one it

428
00:17:46,789 --> 00:17:48,289
has to go through that same process it

429
00:17:48,289 --> 00:17:50,809
updates the instance and figures out

430
00:17:50,809 --> 00:17:52,129
actually there is a change between these

431
00:17:52,129 --> 00:17:53,180
two so

432
00:17:53,180 --> 00:17:54,530
goes over to the domina makes the change

433
00:17:54,530 --> 00:17:57,470
and then it does the same thing for the

434
00:17:57,470 --> 00:18:00,440
third one and that's when you get that

435
00:18:00,440 --> 00:18:03,160
reflow because those two happened in

436
00:18:03,160 --> 00:18:05,780
pretty quick succession they probably

437
00:18:05,780 --> 00:18:09,590
hit the same reflow so this is how react

438
00:18:09,590 --> 00:18:11,120
makes things faster figures up the

439
00:18:11,120 --> 00:18:12,590
smallest number of changes that it needs

440
00:18:12,590 --> 00:18:14,090
to make to the Dom and it batches them

441
00:18:14,090 --> 00:18:15,920
all together so that the browser can do

442
00:18:15,920 --> 00:18:18,560
a smaller number of reflows but there's

443
00:18:18,560 --> 00:18:19,700
still a good amount of work happening

444
00:18:19,700 --> 00:18:24,040
here so how could we reduce this and

445
00:18:24,040 --> 00:18:26,180
this brings us to the third part of the

446
00:18:26,180 --> 00:18:28,520
talk which is what you can do to make

447
00:18:28,520 --> 00:18:32,930
react faster and the first technique is

448
00:18:32,930 --> 00:18:34,640
one that you probably already know

449
00:18:34,640 --> 00:18:37,190
because react yells at you if you don't

450
00:18:37,190 --> 00:18:39,650
do it whenever you're creating an array

451
00:18:39,650 --> 00:18:41,630
of children it's going to tell you that

452
00:18:41,630 --> 00:18:42,950
you should be using keys for those

453
00:18:42,950 --> 00:18:45,620
children so I want to show you why this

454
00:18:45,620 --> 00:18:49,940
can help your performance to do this I'm

455
00:18:49,940 --> 00:18:51,190
going to need to switch up my example

456
00:18:51,190 --> 00:18:54,230
we're going to be we're gonna have a

457
00:18:54,230 --> 00:18:56,360
list of fruits in alphabetical order and

458
00:18:56,360 --> 00:18:58,220
when you click the button they're gonna

459
00:18:58,220 --> 00:19:03,470
reverse order so we've gotten part of

460
00:19:03,470 --> 00:19:04,670
the way through the set state process

461
00:19:04,670 --> 00:19:05,630
this is where it starts to get

462
00:19:05,630 --> 00:19:08,480
interesting this is where react is

463
00:19:08,480 --> 00:19:10,490
actually dealing with the children those

464
00:19:10,490 --> 00:19:13,400
items that have changed order so if you

465
00:19:13,400 --> 00:19:15,860
remember when it was flattening them it

466
00:19:15,860 --> 00:19:17,480
was turning that nested array into a

467
00:19:17,480 --> 00:19:19,640
flat object and assigning these property

468
00:19:19,640 --> 00:19:23,540
names and from that it updated the

469
00:19:23,540 --> 00:19:25,370
instance of instances of the children

470
00:19:25,370 --> 00:19:27,290
and then compared the old instances to

471
00:19:27,290 --> 00:19:30,770
the new instances let's look more

472
00:19:30,770 --> 00:19:33,700
closely at how that comparison happens

473
00:19:33,700 --> 00:19:37,640
so reacts looking at the old set and the

474
00:19:37,640 --> 00:19:41,720
new set and it's going to look at the

475
00:19:41,720 --> 00:19:44,350
two things that have the same name so

476
00:19:44,350 --> 00:19:47,720
dot one zero and one zero and each of

477
00:19:47,720 --> 00:19:51,380
these lists so the name is just the

478
00:19:51,380 --> 00:19:54,380
index of the array and we reversed the

479
00:19:54,380 --> 00:19:58,130
order this means that react is comparing

480
00:19:58,130 --> 00:19:59,750
apples to oranges quite literally in

481
00:19:59,750 --> 00:20:02,420
this case Apple was at position zero

482
00:20:02,420 --> 00:20:05,660
before and now oranges so when it

483
00:20:05,660 --> 00:20:06,890
compares these two lists

484
00:20:06,890 --> 00:20:08,870
it thinks it needs to update the values

485
00:20:08,870 --> 00:20:10,670
of all of the items that are in the list

486
00:20:10,670 --> 00:20:12,380
except for the middle one because they

487
00:20:12,380 --> 00:20:17,600
all look different than they used to now

488
00:20:17,600 --> 00:20:18,770
let's say that we had given react

489
00:20:18,770 --> 00:20:21,080
meaningful keys something like the

490
00:20:21,080 --> 00:20:25,010
actual name of the fruit the key would

491
00:20:25,010 --> 00:20:28,220
then be used in that name and then react

492
00:20:28,220 --> 00:20:31,430
can tell which of the previous instances

493
00:20:31,430 --> 00:20:32,780
corresponds to which of the next

494
00:20:32,780 --> 00:20:35,270
instances and you can tell that nothing

495
00:20:35,270 --> 00:20:38,390
but change changed about the order so we

496
00:20:38,390 --> 00:20:40,070
know that I can just reorder those Dom

497
00:20:40,070 --> 00:20:43,100
nodes now in this case it's not a huge

498
00:20:43,100 --> 00:20:45,890
difference but just imagine if each of

499
00:20:45,890 --> 00:20:48,950
these were a complex Dom structure that

500
00:20:48,950 --> 00:20:51,350
could be a real time savings only moving

501
00:20:51,350 --> 00:20:53,830
them around instead of recreating them

502
00:20:53,830 --> 00:20:57,080
but it's only really a time savings if

503
00:20:57,080 --> 00:21:00,260
your list is gonna be reordered like if

504
00:21:00,260 --> 00:21:03,080
you're going to reverse the order or

505
00:21:03,080 --> 00:21:04,790
take something out of the middle of the

506
00:21:04,790 --> 00:21:06,770
array if you aren't changing the order

507
00:21:06,770 --> 00:21:08,990
then there's no real performance impact

508
00:21:08,990 --> 00:21:11,240
to this and that's one of the reasons

509
00:21:11,240 --> 00:21:13,370
why it's important to understand the why

510
00:21:13,370 --> 00:21:16,070
behind any recommendation because

511
00:21:16,070 --> 00:21:17,720
recommendations don't always have the

512
00:21:17,720 --> 00:21:21,660
same impact across different use cases

513
00:21:21,670 --> 00:21:24,410
so let's look at a use case where this

514
00:21:24,410 --> 00:21:26,450
adding keys wouldn't have as much of a

515
00:21:26,450 --> 00:21:27,950
performance impact but we're another

516
00:21:27,950 --> 00:21:30,860
trick would so it's a list where items

517
00:21:30,860 --> 00:21:32,270
are being fetched from a server and

518
00:21:32,270 --> 00:21:35,270
added to the end of a list and let's say

519
00:21:35,270 --> 00:21:37,550
the user pushes the button but there are

520
00:21:37,550 --> 00:21:39,910
no new messages

521
00:21:39,910 --> 00:21:42,410
so racks gonna go through the entire

522
00:21:42,410 --> 00:21:44,300
process of building out this render tree

523
00:21:44,300 --> 00:21:46,190
of building out the elements and the

524
00:21:46,190 --> 00:21:49,520
instances and everything but it's not

525
00:21:49,520 --> 00:21:52,280
going to change anything in the Dom so

526
00:21:52,280 --> 00:21:54,230
this is called wasted time you can see

527
00:21:54,230 --> 00:21:56,930
it react perf tools and how can we avoid

528
00:21:56,930 --> 00:21:58,660
wasting time like this

529
00:21:58,660 --> 00:22:01,100
I'm sure you've heard of one way and

530
00:22:01,100 --> 00:22:04,850
that's should component update what

531
00:22:04,850 --> 00:22:07,730
happens is when the user clicks and this

532
00:22:07,730 --> 00:22:09,680
dots that state is called before

533
00:22:09,680 --> 00:22:11,960
building up the render tree below the

534
00:22:11,960 --> 00:22:13,580
list react will ask the component a

535
00:22:13,580 --> 00:22:16,520
question it'll say if I give you these

536
00:22:16,520 --> 00:22:18,590
next props and next state do you need an

537
00:22:18,590 --> 00:22:19,570
update

538
00:22:19,570 --> 00:22:22,799
and then the list will say no I'm good

539
00:22:22,799 --> 00:22:25,840
so react won't call render or do

540
00:22:25,840 --> 00:22:27,519
anything else on that component or

541
00:22:27,519 --> 00:22:31,450
children so this is great because we can

542
00:22:31,450 --> 00:22:33,399
skip computing the list and everything

543
00:22:33,399 --> 00:22:34,899
under it we can save a whole lot of

544
00:22:34,899 --> 00:22:40,149
processing there but if you were looking

545
00:22:40,149 --> 00:22:42,389
closely at that should component update

546
00:22:42,389 --> 00:22:44,799
you might have noticed a potential bug

547
00:22:44,799 --> 00:22:46,809
and this works hand-in-hand with the

548
00:22:46,809 --> 00:22:48,220
potential bug I was calling out in the

549
00:22:48,220 --> 00:22:52,690
handler before it depends on how you're

550
00:22:52,690 --> 00:22:55,239
updating the state so let's say you that

551
00:22:55,239 --> 00:22:56,799
you were updating it the way that I was

552
00:22:56,799 --> 00:22:59,049
saying where you set a new variable next

553
00:22:59,049 --> 00:23:02,830
items to this dot state items and then

554
00:23:02,830 --> 00:23:04,539
you push an item on the array and then

555
00:23:04,539 --> 00:23:06,220
call set state with that next items

556
00:23:06,220 --> 00:23:10,149
variable what would happen here is that

557
00:23:10,149 --> 00:23:12,099
you'd never see the new items rendered

558
00:23:12,099 --> 00:23:15,009
in your UI your should component update

559
00:23:15,009 --> 00:23:18,629
would always return false why is that

560
00:23:18,629 --> 00:23:20,889
it's because even though you have two

561
00:23:20,889 --> 00:23:22,929
names for this thing they're both

562
00:23:22,929 --> 00:23:25,899
pointing at the same object the exact

563
00:23:25,899 --> 00:23:27,909
same thing and when you do an equals

564
00:23:27,909 --> 00:23:30,609
check in JavaScript on object variables

565
00:23:30,609 --> 00:23:32,379
it just checks that the two variables

566
00:23:32,379 --> 00:23:34,629
point to the same object so even if you

567
00:23:34,629 --> 00:23:37,570
make a change the should component

568
00:23:37,570 --> 00:23:39,549
update is going to think that the old

569
00:23:39,549 --> 00:23:42,729
state and the new state are the same so

570
00:23:42,729 --> 00:23:46,809
it's not gonna see this change now you

571
00:23:46,809 --> 00:23:48,789
could make it so that whenever you do

572
00:23:48,789 --> 00:23:50,259
call that handler whenever you are

573
00:23:50,259 --> 00:23:52,149
calling this offset state what you're

574
00:23:52,149 --> 00:23:54,940
doing is creating a new object from the

575
00:23:54,940 --> 00:23:56,169
old one using something like object

576
00:23:56,169 --> 00:23:59,019
assign then your she'd component update

577
00:23:59,019 --> 00:24:00,369
would see that the previous and the new

578
00:24:00,369 --> 00:24:03,070
one are different the problem is it

579
00:24:03,070 --> 00:24:04,690
would think that they're worth always

580
00:24:04,690 --> 00:24:05,799
something that was different between

581
00:24:05,799 --> 00:24:07,840
them because it was always pointing to a

582
00:24:07,840 --> 00:24:10,359
new object so it would never return

583
00:24:10,359 --> 00:24:11,889
false your should component update would

584
00:24:11,889 --> 00:24:14,619
be completely ineffective now you could

585
00:24:14,619 --> 00:24:16,809
do a deep equality check where you

586
00:24:16,809 --> 00:24:19,599
compare the actual values but depending

587
00:24:19,599 --> 00:24:20,919
on how heavy that is it might actually

588
00:24:20,919 --> 00:24:27,099
take more time so be nice to have that

589
00:24:27,099 --> 00:24:29,860
simple quick qualities check

590
00:24:29,860 --> 00:24:33,580
but still catch changes in the data and

591
00:24:33,580 --> 00:24:37,450
this is what immutability gives you so

592
00:24:37,450 --> 00:24:39,280
with immutable data if two variables are

593
00:24:39,280 --> 00:24:41,290
pointing to the same object you know

594
00:24:41,290 --> 00:24:44,620
that the data hasn't changed and if it

595
00:24:44,620 --> 00:24:45,790
does need to change you create a new

596
00:24:45,790 --> 00:24:48,220
object so if you're using immutable data

597
00:24:48,220 --> 00:24:50,170
then you can do these quick Equality

598
00:24:50,170 --> 00:24:51,429
checks which are fast and should

599
00:24:51,429 --> 00:24:55,030
component update so with should

600
00:24:55,030 --> 00:24:56,170
component update you can short-circuit

601
00:24:56,170 --> 00:24:58,270
work lower in the tree than the place

602
00:24:58,270 --> 00:25:00,370
where you call this not that state but

603
00:25:00,370 --> 00:25:02,080
what if the change happens in one of the

604
00:25:02,080 --> 00:25:05,110
children do you still need to compute

605
00:25:05,110 --> 00:25:08,980
this whole set of things let's walk

606
00:25:08,980 --> 00:25:12,160
through that case so we have a to do

607
00:25:12,160 --> 00:25:16,620
list and we check off one of the items

608
00:25:16,620 --> 00:25:19,750
that item has to change but the rest of

609
00:25:19,750 --> 00:25:21,250
the list the other items in the list and

610
00:25:21,250 --> 00:25:22,480
Alyssa itself they don't really need to

611
00:25:22,480 --> 00:25:27,429
change so how can you make sure that you

612
00:25:27,429 --> 00:25:31,360
aren't updating those other things when

613
00:25:31,360 --> 00:25:33,790
you're using vanilla react with local

614
00:25:33,790 --> 00:25:35,049
component State it's actually pretty

615
00:25:35,049 --> 00:25:37,960
easy you just restructure your state so

616
00:25:37,960 --> 00:25:39,730
that you can call set state lowering the

617
00:25:39,730 --> 00:25:42,429
tree but when you're using something

618
00:25:42,429 --> 00:25:44,549
like Redux this can be harder to do

619
00:25:44,549 --> 00:25:47,169
that's because you're firing off actions

620
00:25:47,169 --> 00:25:49,390
and then the state is coming in through

621
00:25:49,390 --> 00:25:51,790
connect and most people will use connect

622
00:25:51,790 --> 00:25:54,250
at the top level of their tree or many

623
00:25:54,250 --> 00:25:57,970
people well there is a way to do this

624
00:25:57,970 --> 00:26:00,610
though and that's the using connect at

625
00:26:00,610 --> 00:26:03,790
lower levels of the tree now if you're

626
00:26:03,790 --> 00:26:05,440
gonna do this you'll probably need to

627
00:26:05,440 --> 00:26:06,730
rethink how you're handling your data

628
00:26:06,730 --> 00:26:09,640
for this to work because you'd have a

629
00:26:09,640 --> 00:26:12,790
component structure like this and most

630
00:26:12,790 --> 00:26:14,169
people would pass in their array of

631
00:26:14,169 --> 00:26:17,679
items to the list and then those would

632
00:26:17,679 --> 00:26:24,549
be passed down to each item component so

633
00:26:24,549 --> 00:26:26,530
when an item needs to be changed it not

634
00:26:26,530 --> 00:26:28,540
only needs to change in the item itself

635
00:26:28,540 --> 00:26:30,340
but also in the array that's being

636
00:26:30,340 --> 00:26:33,970
passed to list so that's trigging

637
00:26:33,970 --> 00:26:35,650
triggering an update at the list level

638
00:26:35,650 --> 00:26:38,080
but you can reduce the work here and the

639
00:26:38,080 --> 00:26:40,809
way you do that is by passing in IDs to

640
00:26:40,809 --> 00:26:43,540
the list and then passing those ids down

641
00:26:43,540 --> 00:26:43,810
to the

642
00:26:43,810 --> 00:26:46,720
items and from there you can actually

643
00:26:46,720 --> 00:26:49,750
use the ID and map map state two props

644
00:26:49,750 --> 00:26:53,080
to convert that ID into the item and so

645
00:26:53,080 --> 00:26:56,860
then when the item is changed you only

646
00:26:56,860 --> 00:27:01,690
see that change in the item itself so

647
00:27:01,690 --> 00:27:03,040
this is how you can save them work at

648
00:27:03,040 --> 00:27:05,020
higher levels and sibling levels of the

649
00:27:05,020 --> 00:27:09,280
tree I wish I've had time to cover other

650
00:27:09,280 --> 00:27:10,540
performance tricks things like

651
00:27:10,540 --> 00:27:12,640
memoization and virtualization and

652
00:27:12,640 --> 00:27:14,650
incremental rendering and how you could

653
00:27:14,650 --> 00:27:16,480
use observables which things like mob X

654
00:27:16,480 --> 00:27:18,340
and relay used to notify components of

655
00:27:18,340 --> 00:27:19,600
changes but this is gonna have to be it

656
00:27:19,600 --> 00:27:22,600
for now so here are the techniques that

657
00:27:22,600 --> 00:27:25,390
we covered using keys to help react

658
00:27:25,390 --> 00:27:27,480
match previous instances to me once

659
00:27:27,480 --> 00:27:29,890
using should component updates a short

660
00:27:29,890 --> 00:27:31,770
circuit to work lower in the tree and

661
00:27:31,770 --> 00:27:34,890
how immutability factors into that and

662
00:27:34,890 --> 00:27:37,840
using set seed or connect lower in the

663
00:27:37,840 --> 00:27:39,910
tree so you can reduce work higher in

664
00:27:39,910 --> 00:27:44,290
the tree so I hope this has given you a

665
00:27:44,290 --> 00:27:46,450
good overview of a few starting points

666
00:27:46,450 --> 00:27:48,130
as you can see there are lots of tweaks

667
00:27:48,130 --> 00:27:50,410
that you can make some of them are a for

668
00:27:50,410 --> 00:27:51,880
some cases some of them are a for other

669
00:27:51,880 --> 00:27:53,980
cases and some actually had negative

670
00:27:53,980 --> 00:27:55,780
impacts if they're used in the wrong way

671
00:27:55,780 --> 00:27:58,510
in the wrong circumstances so this is

672
00:27:58,510 --> 00:28:00,510
why people say it's good to measure and

673
00:28:00,510 --> 00:28:02,770
hopefully this talk is giving you a good

674
00:28:02,770 --> 00:28:05,050
framework for understanding what it is

