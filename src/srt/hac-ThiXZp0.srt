1
00:00:15,320 --> 00:00:17,140

so I'm going to talk to you guys about

2
00:00:17,140 --> 00:00:19,730
circuits that's the title my talk what

3
00:00:19,730 --> 00:00:24,080
our circuits circuits are like streams

4
00:00:24,080 --> 00:00:29,270
and streams are like circuits and they

5
00:00:29,270 --> 00:00:31,220
all I mean they both represent the

6
00:00:31,220 --> 00:00:34,580
notion of something that receives a

7
00:00:34,580 --> 00:00:37,550
value and can emit a value so this

8
00:00:37,550 --> 00:00:41,870
yellow box here is the construct the red

9
00:00:41,870 --> 00:00:44,000
arrow is whatever input can it can

10
00:00:44,000 --> 00:00:45,589
receive the blue arrows whatever output

11
00:00:45,589 --> 00:00:49,969
it emits um so if you're lying down at

12
00:00:49,969 --> 00:00:52,460
the moment this talk may put you to

13
00:00:52,460 --> 00:00:56,149
sleep so if you could sit up if you want

14
00:00:56,149 --> 00:00:58,129
to listen otherwise just go to sleep you

15
00:00:58,129 --> 00:01:01,399
know it's cool i know its second day I

16
00:01:01,399 --> 00:01:04,910
was out last night too so and plus you

17
00:01:04,910 --> 00:01:06,289
know as you're sleeping the mind is

18
00:01:06,289 --> 00:01:08,180
vulnerable and I can just say anything I

19
00:01:08,180 --> 00:01:14,840
want uh so how I started down this track

20
00:01:14,840 --> 00:01:19,070
of exploring circuits was through

21
00:01:19,070 --> 00:01:21,290
asynchronous function so I do a lot of

22
00:01:21,290 --> 00:01:24,409
JavaScript programming where I have to

23
00:01:24,409 --> 00:01:29,020
wait on something to to to basically

24
00:01:29,020 --> 00:01:32,060
happen before I can act on it so how

25
00:01:32,060 --> 00:01:33,740
this is represented a note is through a

26
00:01:33,740 --> 00:01:37,880
call back where you have the first first

27
00:01:37,880 --> 00:01:39,740
parameter being an error in the second

28
00:01:39,740 --> 00:01:42,590
the result right so everyone knows you

29
00:01:42,590 --> 00:01:44,270
have a function foo it does something

30
00:01:44,270 --> 00:01:47,149
calls back and then it you do stuff with

31
00:01:47,149 --> 00:01:49,700
whatever the result is is that that

32
00:01:49,700 --> 00:01:52,340
clear some guy's face is like he doesn't

33
00:01:52,340 --> 00:01:53,689
understand this but if you don't

34
00:01:53,689 --> 00:01:54,619
understand this this is going to be

35
00:01:54,619 --> 00:01:56,720
tough because it's like the very basic

36
00:01:56,720 --> 00:02:00,079
thing if you want to use foo with

37
00:02:00,079 --> 00:02:02,240
another asynchronous function bar you

38
00:02:02,240 --> 00:02:05,930
know you got a nest them right so use

39
00:02:05,930 --> 00:02:09,079
foo calls back into bar and then you

40
00:02:09,079 --> 00:02:10,880
pass it another callback and then you

41
00:02:10,880 --> 00:02:12,860
finally do stuff with both the results

42
00:02:12,860 --> 00:02:16,090
this is this is I mean it's quite simple

43
00:02:16,090 --> 00:02:18,590
however I wasn't I wasn't really happy

44
00:02:18,590 --> 00:02:22,209
with this because if you have to keep

45
00:02:22,209 --> 00:02:25,010
composing asynchronous functions

46
00:02:25,010 --> 00:02:26,870
together with other asynchronous

47
00:02:26,870 --> 00:02:28,250
functions with others asynchronous

48
00:02:28,250 --> 00:02:28,610
function

49
00:02:28,610 --> 00:02:31,340
then what happens after a while as you

50
00:02:31,340 --> 00:02:33,770
get callback hell and everyone's

51
00:02:33,770 --> 00:02:35,570
familiar with that right it's what when

52
00:02:35,570 --> 00:02:37,340
your code is moving off the side of your

53
00:02:37,340 --> 00:02:39,230
screen it's also really hard to sort of

54
00:02:39,230 --> 00:02:44,450
follow so call back he'll I talked about

55
00:02:44,450 --> 00:02:48,080
call back hell in El xjs and and some

56
00:02:48,080 --> 00:02:50,450
people said basically that they had

57
00:02:50,450 --> 00:02:53,480
never experienced it so I was really

58
00:02:53,480 --> 00:02:55,940
surprised because this is sort of one of

59
00:02:55,940 --> 00:02:57,140
the patterns that you first encounter

60
00:02:57,140 --> 00:03:00,260
when you start with JavaScript so I I

61
00:03:00,260 --> 00:03:02,000
looked into it I was like well maybe

62
00:03:02,000 --> 00:03:04,220
this might be something a phenomenon

63
00:03:04,220 --> 00:03:07,250
that only I am experiencing so i looked

64
00:03:07,250 --> 00:03:11,570
at the top 10 node categories and you

65
00:03:11,570 --> 00:03:14,750
know the control flow async goodies

66
00:03:14,750 --> 00:03:17,600
that's you know that's a sizable chunk

67
00:03:17,600 --> 00:03:19,880
it's you know a third of the size of

68
00:03:19,880 --> 00:03:23,239
third of the size of web frameworks

69
00:03:23,239 --> 00:03:25,930
which is like the top module category so

70
00:03:25,930 --> 00:03:28,820
control flow goodies what are they

71
00:03:28,820 --> 00:03:32,300
exactly i was looking at npm and the

72
00:03:32,300 --> 00:03:34,670
third most dependent upon module is a

73
00:03:34,670 --> 00:03:38,090
sink so if you're not familiar with

74
00:03:38,090 --> 00:03:41,420
async async is a utility module which

75
00:03:41,420 --> 00:03:42,709
provides straightforward powerful

76
00:03:42,709 --> 00:03:43,940
functions for working with a signatures

77
00:03:43,940 --> 00:03:45,470
javascript so I just got that from the

78
00:03:45,470 --> 00:03:48,680
readme right so other people are

79
00:03:48,680 --> 00:03:50,720
experiencing callback hell as well

80
00:03:50,720 --> 00:03:52,100
that's why there are so many modules

81
00:03:52,100 --> 00:03:54,950
around that try to tackle asynchronous

82
00:03:54,950 --> 00:04:01,190
control flow so I think I think um hell

83
00:04:01,190 --> 00:04:06,530
is real callback hell is real so I mean

84
00:04:06,530 --> 00:04:10,100
if you're experiencing this then this

85
00:04:10,100 --> 00:04:11,720
talk will be interesting for you because

86
00:04:11,720 --> 00:04:14,930
you'll have like a lot of I'm going to

87
00:04:14,930 --> 00:04:16,400
try to give you like some other ideas

88
00:04:16,400 --> 00:04:18,769
about control flow so one of them is

89
00:04:18,769 --> 00:04:20,870
streams and I think James talks a lot

90
00:04:20,870 --> 00:04:22,010
about streams but I want to give you

91
00:04:22,010 --> 00:04:24,919
some other ones too taken from you know

92
00:04:24,919 --> 00:04:26,870
category theory and functional reactive

93
00:04:26,870 --> 00:04:31,620
programming and all that good stuff so

94
00:04:31,630 --> 00:04:33,800
right so I want to start with

95
00:04:33,800 --> 00:04:37,370
drag-and-drop so this is how to create a

96
00:04:37,370 --> 00:04:41,360
drag-and-drop behavior just using normal

97
00:04:41,360 --> 00:04:42,480
JavaScript with

98
00:04:42,480 --> 00:04:45,030
bit of jQuery in there because it it's

99
00:04:45,030 --> 00:04:48,410
it's a it's a good piece of sugar so

100
00:04:48,410 --> 00:04:50,670
basically you have a function move it

101
00:04:50,670 --> 00:04:52,710
takes a Down event and a mouse move

102
00:04:52,710 --> 00:04:56,070
event and then it updates your the Dom

103
00:04:56,070 --> 00:04:59,550
element style that should be pretty

104
00:04:59,550 --> 00:05:01,560
straightforward so now in the

105
00:05:01,560 --> 00:05:03,720
drag-and-drop function it takes a Dom

106
00:05:03,720 --> 00:05:05,760
element it listens it waits for a mouse

107
00:05:05,760 --> 00:05:09,990
down and then it um waits for a mouse

108
00:05:09,990 --> 00:05:13,890
move calls move each time mousemove is

109
00:05:13,890 --> 00:05:17,250
emitted and on mouse up it kills all the

110
00:05:17,250 --> 00:05:21,930
other callbacks right so we can we can

111
00:05:21,930 --> 00:05:27,900
actually test this out um so right here

112
00:05:27,900 --> 00:05:30,300
I pretty much it can use is a screen

113
00:05:30,300 --> 00:05:36,930
shared so can you oh I don't know how

114
00:05:36,930 --> 00:05:40,110
much bigger this can go but I mean it's

115
00:05:40,110 --> 00:05:43,110
exactly the same code right so if i run

116
00:05:43,110 --> 00:05:45,420
that you can see you know i can drag

117
00:05:45,420 --> 00:05:51,000
this thing so it's you just have to

118
00:05:51,000 --> 00:05:53,370
trust me i can i can even taste it for

119
00:05:53,370 --> 00:05:54,300
you but you know what I'm not going to

120
00:05:54,300 --> 00:05:55,590
do that you're just gonna have to trust

121
00:05:55,590 --> 00:05:57,450
me so that is exactly the same code

122
00:05:57,450 --> 00:06:00,750
that's in the jsfiddle and um it it's

123
00:06:00,750 --> 00:06:04,740
pretty succinct uh if you've ever tried

124
00:06:04,740 --> 00:06:06,870
to program like if code drag and drop

125
00:06:06,870 --> 00:06:08,490
behavior before I mean I don't know if

126
00:06:08,490 --> 00:06:11,330
you can get it down smaller than that

127
00:06:11,330 --> 00:06:14,130
maybe maybe we can like take off this

128
00:06:14,130 --> 00:06:20,520
mouse down event actually but so if we

129
00:06:20,520 --> 00:06:22,560
think of it as a faz a state machine

130
00:06:22,560 --> 00:06:24,450
this is how it might look we have like

131
00:06:24,450 --> 00:06:27,090
two states one is idle and the other is

132
00:06:27,090 --> 00:06:31,670
dragging and you move between the states

133
00:06:31,670 --> 00:06:38,340
via mouse down or Mouse up so how might

134
00:06:38,340 --> 00:06:40,740
this look with async since you know

135
00:06:40,740 --> 00:06:42,930
that's the module that everyone uses for

136
00:06:42,930 --> 00:06:45,420
asynchronous control flow so you

137
00:06:45,420 --> 00:06:49,650
represent the first state q0 with by

138
00:06:49,650 --> 00:06:51,210
just waiting for a mouse down event and

139
00:06:51,210 --> 00:06:56,070
then when that gets called it

140
00:06:56,070 --> 00:06:58,020
moves to the second state Q 1 which

141
00:06:58,020 --> 00:06:59,850
waits for a must move event so this

142
00:06:59,850 --> 00:07:01,680
should be pretty straightforward so

143
00:07:01,680 --> 00:07:03,480
what's happened here is like instead of

144
00:07:03,480 --> 00:07:07,590
having everything together like in the

145
00:07:07,590 --> 00:07:11,640
same drag and drop in the same drag and

146
00:07:11,640 --> 00:07:13,800
drop body function function body I've

147
00:07:13,800 --> 00:07:16,290
basically just separated it out into two

148
00:07:16,290 --> 00:07:20,270
states one is one is idle and one is

149
00:07:20,270 --> 00:07:26,070
dragging so this is how it would look

150
00:07:26,070 --> 00:07:32,100
when composed together so the big thing

151
00:07:32,100 --> 00:07:33,570
about this is what you're doing is

152
00:07:33,570 --> 00:07:35,430
you're you're you don't have that

153
00:07:35,430 --> 00:07:39,960
nesting that happens with with the

154
00:07:39,960 --> 00:07:42,450
normal call back in like nesting

155
00:07:42,450 --> 00:07:45,930
callbacks but what you do lose is maybe

156
00:07:45,930 --> 00:07:50,700
like how if we didn't have a sink we

157
00:07:50,700 --> 00:07:52,020
might have to compose them in a

158
00:07:52,020 --> 00:07:54,000
different way that hides the execution

159
00:07:54,000 --> 00:07:57,270
flow of each of the callback handlers

160
00:07:57,270 --> 00:07:59,940
but async sort of allows us to grab them

161
00:07:59,940 --> 00:08:01,620
together and sort of describe them in

162
00:08:01,620 --> 00:08:03,630
one place drag and drop is a waterfall

163
00:08:03,630 --> 00:08:07,800
of q0 and q1 mouse down and drag

164
00:08:07,800 --> 00:08:12,500
everyone's like going but you get it

165
00:08:12,500 --> 00:08:17,370
it's so awesome right okay so if we look

166
00:08:17,370 --> 00:08:19,530
at both of the code site like both of

167
00:08:19,530 --> 00:08:22,230
these pieces of code side by side you

168
00:08:22,230 --> 00:08:24,030
can see that the vanilla JavaScript is

169
00:08:24,030 --> 00:08:26,460
pretty I mean it's pretty readable async

170
00:08:26,460 --> 00:08:29,490
sort of clutters it up a bit um but we

171
00:08:29,490 --> 00:08:31,650
are allowed to separate the state's q0

172
00:08:31,650 --> 00:08:36,150
and q1 which sort of it lets us do other

173
00:08:36,150 --> 00:08:38,340
things with them for example if we

174
00:08:38,340 --> 00:08:40,500
wanted to reuse q0 for something else

175
00:08:40,500 --> 00:08:42,810
like a mouse down something else is

176
00:08:42,810 --> 00:08:44,520
waiting for mass now we can we can use

177
00:08:44,520 --> 00:08:50,850
that so it's modular however it does

178
00:08:50,850 --> 00:08:54,200
sort of like make the code a little bit

179
00:08:54,200 --> 00:08:57,120
it's it's sort of fatter right now the

180
00:08:57,120 --> 00:09:03,270
async code so Michael said javascript is

181
00:09:03,270 --> 00:09:05,970
done like in LX yes I mean paraphrase I

182
00:09:05,970 --> 00:09:07,380
wasn't actually there but Brian McKenna

183
00:09:07,380 --> 00:09:08,910
tweeted something like this language is

184
00:09:08,910 --> 00:09:09,840
done

185
00:09:09,840 --> 00:09:11,820
the script is it and you know what maybe

186
00:09:11,820 --> 00:09:16,050
that's true because I mean there are I

187
00:09:16,050 --> 00:09:17,760
mean if we just wanted to do drag and

188
00:09:17,760 --> 00:09:19,860
drop why would we why would we have this

189
00:09:19,860 --> 00:09:22,800
a sink module that that clutters up our

190
00:09:22,800 --> 00:09:24,750
code allows us to separate the states it

191
00:09:24,750 --> 00:09:26,070
makes it more modular but what if we

192
00:09:26,070 --> 00:09:29,280
don't ever want to use Q 0 or q1 just

193
00:09:29,280 --> 00:09:32,280
independently it sort of doesn't need to

194
00:09:32,280 --> 00:09:35,580
be done so I do it right so this is sort

195
00:09:35,580 --> 00:09:38,870
of like the important point of this talk

196
00:09:38,870 --> 00:09:41,130
so michael says you know there's a point

197
00:09:41,130 --> 00:09:42,960
where something is good enough and we

198
00:09:42,960 --> 00:09:45,420
move on to more important higher-order

199
00:09:45,420 --> 00:09:46,380
things and I think that's really

200
00:09:46,380 --> 00:09:48,540
important here like some people use

201
00:09:48,540 --> 00:09:52,590
JavaScript for a set of problems and

202
00:09:52,590 --> 00:09:55,140
javascript is totally good enough for

203
00:09:55,140 --> 00:09:58,050
that why why change anything it's it

204
00:09:58,050 --> 00:10:00,600
solved my problem right but then there's

205
00:10:00,600 --> 00:10:03,750
a lot of other people I guess who for

206
00:10:03,750 --> 00:10:05,250
them javascript isn't good enough

207
00:10:05,250 --> 00:10:07,350
there's always like there's something

208
00:10:07,350 --> 00:10:10,290
that they do every day that JavaScript

209
00:10:10,290 --> 00:10:12,990
just sort of falls short of a little bit

210
00:10:12,990 --> 00:10:16,320
so this talk is for for those people um

211
00:10:16,320 --> 00:10:19,710
basically this is an advanced topic and

212
00:10:19,710 --> 00:10:23,250
I'm not going to tell you whether to use

213
00:10:23,250 --> 00:10:25,320
one method or another that's something

214
00:10:25,320 --> 00:10:27,180
that you have to judge for yourself you

215
00:10:27,180 --> 00:10:28,290
know I'm just going to give you some

216
00:10:28,290 --> 00:10:31,140
tools and then you can decide if that

217
00:10:31,140 --> 00:10:33,840
tool is good for what you're doing sound

218
00:10:33,840 --> 00:10:37,560
good all right so everyone's familiar

219
00:10:37,560 --> 00:10:40,860
with streams I'm just or at least I

220
00:10:40,860 --> 00:10:42,980
think so after James's talk pretty much

221
00:10:42,980 --> 00:10:45,660
I've heard streams until like it's

222
00:10:45,660 --> 00:10:47,190
coming out of my ears like I was a tell

223
00:10:47,190 --> 00:10:49,890
xjs and I saw so many stream demos but

224
00:10:49,890 --> 00:10:53,070
I'm going to give you a stream demo just

225
00:10:53,070 --> 00:10:55,440
to like really nail that right in so if

226
00:10:55,440 --> 00:10:57,600
we turn this drag-and-drop problem the

227
00:10:57,600 --> 00:10:59,760
state machine into a stream how might

228
00:10:59,760 --> 00:11:01,830
that look so I've got this piece of code

229
00:11:01,830 --> 00:11:05,340
there um we have a readable stream that

230
00:11:05,340 --> 00:11:09,060
basically emits uh we've encapsulated

231
00:11:09,060 --> 00:11:12,870
the whole mousedown mousemove state

232
00:11:12,870 --> 00:11:15,630
machine and it only emits what does it

233
00:11:15,630 --> 00:11:19,560
emit it only emits mousemove events and

234
00:11:19,560 --> 00:11:22,560
in fact it admits it in pairs of a Down

235
00:11:22,560 --> 00:11:23,430
event

236
00:11:23,430 --> 00:11:25,020
event because we need the down event to

237
00:11:25,020 --> 00:11:26,640
sort of offset where we're going to

238
00:11:26,640 --> 00:11:29,760
change the the you know the coordinates

239
00:11:29,760 --> 00:11:35,160
of that element so it's a little

240
00:11:35,160 --> 00:11:37,140
cluttered but you can sort of see that

241
00:11:37,140 --> 00:11:39,330
it's very similar to the vanilla

242
00:11:39,330 --> 00:11:41,370
JavaScript it just sort of like hide zet

243
00:11:41,370 --> 00:11:42,959
and it only emits it in the stream now

244
00:11:42,959 --> 00:11:48,480
you can see that this RS emit part right

245
00:11:48,480 --> 00:11:50,160
here I can't highlight it but you know

246
00:11:50,160 --> 00:11:52,220
you can see the can I use this thing

247
00:11:52,220 --> 00:11:55,260
nope I don't know what this laser

248
00:11:55,260 --> 00:11:57,060
pointer is here for it's not really in

249
00:11:57,060 --> 00:12:00,660
venues but if so I use this thing called

250
00:12:00,660 --> 00:12:02,760
bind I don't know if everyone uses bind

251
00:12:02,760 --> 00:12:05,730
but it's basically a partial application

252
00:12:05,730 --> 00:12:10,380
of some parameters so it's really just

253
00:12:10,380 --> 00:12:13,709
the same as having mousemove receive a

254
00:12:13,709 --> 00:12:18,500
call back that calls RSM it with data a

255
00:12:18,500 --> 00:12:21,330
zero which is from the mouse down event

256
00:12:21,330 --> 00:12:24,120
and then gets past the mouse move event

257
00:12:24,120 --> 00:12:26,310
which would be e1 and then we end up

258
00:12:26,310 --> 00:12:29,250
sending a zero and a one into the move

259
00:12:29,250 --> 00:12:32,670
function which earlier we defined as it

260
00:12:32,670 --> 00:12:34,950
just moves the thing you know it updates

261
00:12:34,950 --> 00:12:37,980
the XY coordinates so this is how drag

262
00:12:37,980 --> 00:12:40,500
and drop would look as a stream so

263
00:12:40,500 --> 00:12:43,589
remember we looked at it as just jQuery

264
00:12:43,589 --> 00:12:46,020
code just JavaScript and then we looked

265
00:12:46,020 --> 00:12:50,970
at it as an async waterfall and it

266
00:12:50,970 --> 00:12:52,950
looked a little different we got some

267
00:12:52,950 --> 00:12:54,570
different semantics out of it we got to

268
00:12:54,570 --> 00:12:58,320
separate the states into q0 and q1 and

269
00:12:58,320 --> 00:13:00,750
now we're looking at we're looking at it

270
00:13:00,750 --> 00:13:03,450
as a stream and I don't really know how

271
00:13:03,450 --> 00:13:05,910
to assess this it's just kind of cool

272
00:13:05,910 --> 00:13:10,650
it's a stream we can even stream fi the

273
00:13:10,650 --> 00:13:15,300
move function and pipe mouse mouse

274
00:13:15,300 --> 00:13:17,400
events into the move function so that

275
00:13:17,400 --> 00:13:19,380
every time it admits something you know

276
00:13:19,380 --> 00:13:22,140
it just moves so that's kind of neat you

277
00:13:22,140 --> 00:13:25,079
know like thinking of some sort of

278
00:13:25,079 --> 00:13:28,320
emitter of events getting piped into

279
00:13:28,320 --> 00:13:33,510
just a normal function um except I can't

280
00:13:33,510 --> 00:13:36,850
really do that streams

281
00:13:36,850 --> 00:13:39,560
so the thing with streams it's a little

282
00:13:39,560 --> 00:13:44,410
weird you can call our RS emit data and

283
00:13:44,410 --> 00:13:47,269
you can pass it any number of arguments

284
00:13:47,269 --> 00:13:50,240
but somewhere in the stream code and I

285
00:13:50,240 --> 00:13:53,509
mean I could show you this just you know

286
00:13:53,509 --> 00:13:55,100
what it's not it's not important but

287
00:13:55,100 --> 00:13:56,569
somewhere in the stream code it only

288
00:13:56,569 --> 00:13:58,910
passes like one argument I hope someone

289
00:13:58,910 --> 00:14:00,410
fixes that so right now have to like

290
00:14:00,410 --> 00:14:02,750
wrap it just in like a parrot uppal and

291
00:14:02,750 --> 00:14:05,630
and then i can i still have to change

292
00:14:05,630 --> 00:14:09,529
the move function here so what's what

293
00:14:09,529 --> 00:14:10,940
would be handy if i didn't have to

294
00:14:10,940 --> 00:14:12,319
change a move function is that i could

295
00:14:12,319 --> 00:14:14,240
just you know use the same function with

296
00:14:14,240 --> 00:14:16,850
any kind of control flow construct

297
00:14:16,850 --> 00:14:18,649
whether it was a waterfall whether it

298
00:14:18,649 --> 00:14:20,269
was jquery whether it was a stream i

299
00:14:20,269 --> 00:14:23,360
could just use move with d like down

300
00:14:23,360 --> 00:14:25,310
event and mouse move event but you know

301
00:14:25,310 --> 00:14:29,300
until that changes um so what we have

302
00:14:29,300 --> 00:14:30,860
here is we can see the stream as a pipe

303
00:14:30,860 --> 00:14:35,029
between two processes one is a something

304
00:14:35,029 --> 00:14:36,350
that emits and the other is something

305
00:14:36,350 --> 00:14:39,410
that receives and I drew boxes around

306
00:14:39,410 --> 00:14:42,319
them because so basically the the state

307
00:14:42,319 --> 00:14:48,040
machine here it's separated right and

308
00:14:48,040 --> 00:14:52,459
what streams allows us to do is it

309
00:14:52,459 --> 00:14:54,769
allows us to use anything that is

310
00:14:54,769 --> 00:14:58,579
readable and smoosh it together with

311
00:14:58,579 --> 00:15:00,800
anything that is writable and we don't

312
00:15:00,800 --> 00:15:02,440
need to think about what's actually

313
00:15:02,440 --> 00:15:06,380
friggin inside the boxes and that's

314
00:15:06,380 --> 00:15:09,290
something that's really cool you know

315
00:15:09,290 --> 00:15:11,600
because it's very so I I don't remember

316
00:15:11,600 --> 00:15:14,120
who talked it was but someone was

317
00:15:14,120 --> 00:15:15,920
talking about how when you have a really

318
00:15:15,920 --> 00:15:17,600
heavy framework like a plug-in system

319
00:15:17,600 --> 00:15:19,610
everything has to follow this same

320
00:15:19,610 --> 00:15:22,600
everything has to like identify like

321
00:15:22,600 --> 00:15:24,829
identify itself as a plug-in and

322
00:15:24,829 --> 00:15:26,810
sometimes it can the interface can be

323
00:15:26,810 --> 00:15:28,670
really heavy weight but streams

324
00:15:28,670 --> 00:15:31,250
interface is really quite simple so a

325
00:15:31,250 --> 00:15:34,670
lot of things can be streams and as you

326
00:15:34,670 --> 00:15:36,800
can see like to make something into a

327
00:15:36,800 --> 00:15:39,199
stream it's not a it's not it's not

328
00:15:39,199 --> 00:15:40,670
super heavyweight you know you just

329
00:15:40,670 --> 00:15:43,029
create a just instantiate a stream

330
00:15:43,029 --> 00:15:45,500
declare it like it set it to be writable

331
00:15:45,500 --> 00:15:47,300
readable and then just start emitting

332
00:15:47,300 --> 00:15:49,480
things

333
00:15:49,480 --> 00:15:52,199
so the interface is really simple

334
00:15:52,199 --> 00:15:54,699
streams what do we get for free we

335
00:15:54,699 --> 00:15:57,190
really get this pipe for free so if we

336
00:15:57,190 --> 00:16:01,029
if we stream if I whatever components

337
00:16:01,029 --> 00:16:03,220
we're using an hour control flow we get

338
00:16:03,220 --> 00:16:05,680
the pipe for free and this is really

339
00:16:05,680 --> 00:16:09,070
important because pipes are kind of

340
00:16:09,070 --> 00:16:12,209
their kind of like a composition a

341
00:16:12,209 --> 00:16:14,589
operator right so it allows you to

342
00:16:14,589 --> 00:16:18,699
compose two streams together into one

343
00:16:18,699 --> 00:16:21,519
and and the result of that is itself a

344
00:16:21,519 --> 00:16:23,620
stream and then you can use that in

345
00:16:23,620 --> 00:16:27,910
other streams and so the whole lure of

346
00:16:27,910 --> 00:16:31,510
streams and pipes and compositions is

347
00:16:31,510 --> 00:16:34,600
that you get like this really you get to

348
00:16:34,600 --> 00:16:37,209
I switch the slide too early this has

349
00:16:37,209 --> 00:16:38,290
nothing to do either one talking about

350
00:16:38,290 --> 00:16:42,540
right now but but hey it's a burrito so

351
00:16:42,540 --> 00:16:46,870
what you get is like what I like to

352
00:16:46,870 --> 00:16:50,260
think of a piece of code is as is

353
00:16:50,260 --> 00:16:53,139
basically a composition of just

354
00:16:53,139 --> 00:16:56,620
different bits smooshed together right

355
00:16:56,620 --> 00:16:59,529
so everything can exist independently

356
00:16:59,529 --> 00:17:01,540
like a function or an object or whatever

357
00:17:01,540 --> 00:17:03,940
and depending on how it's composed

358
00:17:03,940 --> 00:17:07,689
together is what makes a program

359
00:17:07,689 --> 00:17:10,540
different so pipe is a sequential it

360
00:17:10,540 --> 00:17:13,120
basically sequences things you you have

361
00:17:13,120 --> 00:17:16,360
the first thing sequenced with the

362
00:17:16,360 --> 00:17:18,850
second thing a pipes to be that means

363
00:17:18,850 --> 00:17:20,709
something has to go through a to get to

364
00:17:20,709 --> 00:17:25,270
be um and that's just a really simple

365
00:17:25,270 --> 00:17:27,400
Combinator the pipe is a sequencing

366
00:17:27,400 --> 00:17:31,510
Combinator there are so many other ones

367
00:17:31,510 --> 00:17:33,100
out there and this is what I'm going to

368
00:17:33,100 --> 00:17:37,570
try to tell you guys today so let's say

369
00:17:37,570 --> 00:17:40,720
you have this thing called em right and

370
00:17:40,720 --> 00:17:43,929
it has just two things right so a stream

371
00:17:43,929 --> 00:17:46,960
it has a what's a stream it just it's it

372
00:17:46,960 --> 00:17:51,220
emits something or you have a right

373
00:17:51,220 --> 00:17:53,440
function so that it can receive

374
00:17:53,440 --> 00:17:55,840
something right so that that's the

375
00:17:55,840 --> 00:17:58,510
interface of a stream so the interface

376
00:17:58,510 --> 00:18:00,970
of this particular construct that I'm

377
00:18:00,970 --> 00:18:02,360
showing you now M

378
00:18:02,360 --> 00:18:07,220
a you have to you have two functions so

379
00:18:07,220 --> 00:18:09,200
you have it then which is also a

380
00:18:09,200 --> 00:18:10,850
sequencing Combinator and then you have

381
00:18:10,850 --> 00:18:13,760
a unit so what then does it's something

382
00:18:13,760 --> 00:18:15,800
very similar to what the pipe does it

383
00:18:15,800 --> 00:18:20,750
takes one kind of this ma takes another

384
00:18:20,750 --> 00:18:24,290
mb is just smushes them together this

385
00:18:24,290 --> 00:18:29,150
unit function takes some raw value and

386
00:18:29,150 --> 00:18:31,600
then it puts it into the context of em

387
00:18:31,600 --> 00:18:34,430
so if you think of this as a stream

388
00:18:34,430 --> 00:18:38,060
actually is that no let's start with a

389
00:18:38,060 --> 00:18:39,710
list because everyone's familiar with

390
00:18:39,710 --> 00:18:45,550
lists right so a list is of a type ma

391
00:18:45,550 --> 00:18:49,850
the then function you can basically it

392
00:18:49,850 --> 00:18:56,510
takes it takes a function and then it it

393
00:18:56,510 --> 00:18:58,340
basically like runs this function on

394
00:18:58,340 --> 00:19:03,590
each of its you know what I'm have you

395
00:19:03,590 --> 00:19:05,510
ever like written some code and come

396
00:19:05,510 --> 00:19:08,090
back to it and not understood what the

397
00:19:08,090 --> 00:19:09,620
 it man this is what I'm

398
00:19:09,620 --> 00:19:12,680
it man this is what I'm
experiencing now but it totally works I

399
00:19:12,680 --> 00:19:16,280
promise you just get so let's look at

400
00:19:16,280 --> 00:19:19,070
unit because unit is pretty it's pretty

401
00:19:19,070 --> 00:19:20,930
simple it's much more simple than the

402
00:19:20,930 --> 00:19:23,990
then Combinator for list but basically

403
00:19:23,990 --> 00:19:25,940
you pass it in X so it could be a number

404
00:19:25,940 --> 00:19:28,190
it could be like one it could be a could

405
00:19:28,190 --> 00:19:30,320
be a string and then it just puts it

406
00:19:30,320 --> 00:19:33,620
inside of a list the context em right so

407
00:19:33,620 --> 00:19:37,700
remember unit takes a raw value and it

408
00:19:37,700 --> 00:19:39,680
puts it inside of a context and that's

409
00:19:39,680 --> 00:19:42,710
exactly what this is for the list the

410
00:19:42,710 --> 00:19:44,210
then function I think what it does is it

411
00:19:44,210 --> 00:19:45,680
takes many lists and like if you take

412
00:19:45,680 --> 00:19:47,690
two lists and then you put them together

413
00:19:47,690 --> 00:19:49,820
basically like concatenates the whole

414
00:19:49,820 --> 00:19:51,980
thing plus there's a mapping function so

415
00:19:51,980 --> 00:19:55,250
that's what it's doing there the idea of

416
00:19:55,250 --> 00:19:58,070
a continuation so this is like an

417
00:19:58,070 --> 00:19:59,360
asynchronous function so this can

418
00:19:59,360 --> 00:20:02,660
capture a a synchronous functions it

419
00:20:02,660 --> 00:20:06,080
takes to asynchronous functions and then

420
00:20:06,080 --> 00:20:09,260
it commits sequences them so it calls

421
00:20:09,260 --> 00:20:13,100
the first one first foo and then bar if

422
00:20:13,100 --> 00:20:14,750
we pass in foo and bar into here it

423
00:20:14,750 --> 00:20:16,070
would give us another

424
00:20:16,070 --> 00:20:18,140
asynchronous function that would be

425
00:20:18,140 --> 00:20:21,830
called back after bar was completed and

426
00:20:21,830 --> 00:20:25,460
the unit definition here is to take some

427
00:20:25,460 --> 00:20:27,350
X and then put it inside of a call back

428
00:20:27,350 --> 00:20:30,080
so that when you call that thing when

429
00:20:30,080 --> 00:20:31,520
you call this function and pass it a

430
00:20:31,520 --> 00:20:33,500
call back it just gives ex back to you

431
00:20:33,500 --> 00:20:37,640
so that's the context here um now

432
00:20:37,640 --> 00:20:40,070
streams we're familiar with streams how

433
00:20:40,070 --> 00:20:45,530
may streams look as a type ma what we

434
00:20:45,530 --> 00:20:47,950
have is we create a stream that

435
00:20:47,950 --> 00:20:54,050
basically emits data when this is

436
00:20:54,050 --> 00:20:57,140
actually its again this is confounding

437
00:20:57,140 --> 00:21:00,800
me but it basically emits data based on

438
00:21:00,800 --> 00:21:02,750
what's happening in the two streams that

439
00:21:02,750 --> 00:21:05,240
it's supposed to compose together the

440
00:21:05,240 --> 00:21:07,880
unit basically is a singleton and it

441
00:21:07,880 --> 00:21:10,100
just emits like One X so you can see the

442
00:21:10,100 --> 00:21:12,560
stream really as maybe kind of a list

443
00:21:12,560 --> 00:21:17,000
right so it's a container for values and

444
00:21:17,000 --> 00:21:19,370
that's exactly what this ma thing is

445
00:21:19,370 --> 00:21:22,910
it's it can be it can capture containers

446
00:21:22,910 --> 00:21:25,400
like lists or streams but it can also

447
00:21:25,400 --> 00:21:28,160
capture computations like a synchronous

448
00:21:28,160 --> 00:21:31,970
functions so what do we get with this

449
00:21:31,970 --> 00:21:34,970
right so if we have an object and we

450
00:21:34,970 --> 00:21:38,270
implement then and unit what do we get

451
00:21:38,270 --> 00:21:40,250
for free well for instance we can get

452
00:21:40,250 --> 00:21:43,190
this function chaining thing that I

453
00:21:43,190 --> 00:21:45,830
wrote that sort of totally ripped off

454
00:21:45,830 --> 00:21:50,650
fab guess but whatever it's really cool

455
00:21:50,650 --> 00:21:53,600
it's sort of a way to look at let's say

456
00:21:53,600 --> 00:21:56,180
if this was an asynchronous let's say

457
00:21:56,180 --> 00:21:58,070
wasn't stream it was like I showed this

458
00:21:58,070 --> 00:22:00,620
like demo and alexius and it had a can't

459
00:22:00,620 --> 00:22:02,780
operate an asynchronous function thing

460
00:22:02,780 --> 00:22:06,190
to it so it but it's exactly the same

461
00:22:06,190 --> 00:22:12,800
API so we have a stream that when that

462
00:22:12,800 --> 00:22:17,330
we we we emit rabbit basically we emit

463
00:22:17,330 --> 00:22:19,430
rabbit we store it in X and then we call

464
00:22:19,430 --> 00:22:21,410
generation on it you know this you're

465
00:22:21,410 --> 00:22:23,240
just gonna have to trust me that it does

466
00:22:23,240 --> 00:22:26,570
what I'm saying it does and when when we

467
00:22:26,570 --> 00:22:28,550
run this app it basically like oh I

468
00:22:28,550 --> 00:22:29,570
didn't

469
00:22:29,570 --> 00:22:31,250
I didn't define generation hear about

470
00:22:31,250 --> 00:22:32,750
generations basically a replicate

471
00:22:32,750 --> 00:22:35,270
function with a partially up applied

472
00:22:35,270 --> 00:22:37,550
three to it so it just returns three

473
00:22:37,550 --> 00:22:39,260
rabbits and you know you can keep on

474
00:22:39,260 --> 00:22:41,120
doing this and the ill returns you know

475
00:22:41,120 --> 00:22:42,890
six rabbits or nine rabbits or whatever

476
00:22:42,890 --> 00:22:45,410
so but what I wanted to show you here is

477
00:22:45,410 --> 00:22:48,440
you get this function chaining API for

478
00:22:48,440 --> 00:22:51,860
free that you can use with a stream with

479
00:22:51,860 --> 00:22:59,390
a cons Oh with a list and you it doesn't

480
00:22:59,390 --> 00:23:00,920
matter like which kind of thing it is

481
00:23:00,920 --> 00:23:03,860
because it's just a general ma construct

482
00:23:03,860 --> 00:23:06,140
that this function chaining can work

483
00:23:06,140 --> 00:23:08,630
with all of them so that might not be

484
00:23:08,630 --> 00:23:10,100
the biggest selling point but I'm just

485
00:23:10,100 --> 00:23:13,790
telling you right that again this is one

486
00:23:13,790 --> 00:23:17,030
way to compose asynchronous functions

487
00:23:17,030 --> 00:23:19,490
and other kinds of control flow and you

488
00:23:19,490 --> 00:23:22,550
decide whether it's the right tool for

489
00:23:22,550 --> 00:23:25,910
you so if we go back to comparing the

490
00:23:25,910 --> 00:23:29,240
vanilla and the async style of code how

491
00:23:29,240 --> 00:23:33,470
might this look as a continuation with

492
00:23:33,470 --> 00:23:36,140
function chaining so what we can do is

493
00:23:36,140 --> 00:23:39,620
again we have the move function which is

494
00:23:39,620 --> 00:23:42,350
just like a normal function it takes a

495
00:23:42,350 --> 00:23:44,030
Down event in a mouse event and then it

496
00:23:44,030 --> 00:23:47,540
updates the Dom element and we have two

497
00:23:47,540 --> 00:23:50,780
states mouse down and drag so what we

498
00:23:50,780 --> 00:23:54,920
see down here in the drag and drop the

499
00:23:54,920 --> 00:23:58,550
execution flow is that we you know it

500
00:23:58,550 --> 00:24:00,530
looks pretty sequential like the first

501
00:24:00,530 --> 00:24:01,850
thing that gets called as a mouse down

502
00:24:01,850 --> 00:24:03,860
and then after that gets called it's

503
00:24:03,860 --> 00:24:07,310
just drag and then you can like you can

504
00:24:07,310 --> 00:24:09,290
actually keep looping that I don't know

505
00:24:09,290 --> 00:24:11,200
if I have that Combinator here but

506
00:24:11,200 --> 00:24:13,310
basically there's this thing that yeah

507
00:24:13,310 --> 00:24:16,370
this is function that I had forever that

508
00:24:16,370 --> 00:24:20,120
takes any kind of ma construct and then

509
00:24:20,120 --> 00:24:23,420
it can join it to the top of it again so

510
00:24:23,420 --> 00:24:25,580
it's sort of like if you wanted to run

511
00:24:25,580 --> 00:24:29,050
something forever it could take the end

512
00:24:29,050 --> 00:24:32,660
what the last operation and then after

513
00:24:32,660 --> 00:24:34,520
the last operation it goes back to the

514
00:24:34,520 --> 00:24:36,140
top operation against so it's kind of

515
00:24:36,140 --> 00:24:38,210
like a looping construct for any sort of

516
00:24:38,210 --> 00:24:42,890
MA so I did want to talk about another

517
00:24:42,890 --> 00:24:43,340
kind

518
00:24:43,340 --> 00:24:46,070
kind of construct it's called ABC really

519
00:24:46,070 --> 00:24:47,630
actually it's not called ABC it's called

520
00:24:47,630 --> 00:24:50,180
an arrow but it has three parts to it

521
00:24:50,180 --> 00:24:53,030
one is the context the other is some

522
00:24:53,030 --> 00:24:55,970
sort of notion of input and see is some

523
00:24:55,970 --> 00:24:59,420
notion of output so what kinds of things

524
00:24:59,420 --> 00:25:02,000
follow this pattern a function follows

525
00:25:02,000 --> 00:25:04,010
this pattern of function receives some

526
00:25:04,010 --> 00:25:06,530
kind of input it gets supplied to it and

527
00:25:06,530 --> 00:25:09,610
then it returns some sort of value see

528
00:25:09,610 --> 00:25:12,530
streams do this to you I mean

529
00:25:12,530 --> 00:25:14,300
bi-directional streams do you can write

530
00:25:14,300 --> 00:25:16,610
something to a stream and then it that

531
00:25:16,610 --> 00:25:21,500
same stream can emit can emit a value so

532
00:25:21,500 --> 00:25:22,730
in JavaScript I mean we don't really

533
00:25:22,730 --> 00:25:25,640
care about types so much though it's

534
00:25:25,640 --> 00:25:27,350
becoming more and more something we care

535
00:25:27,350 --> 00:25:29,780
about it's a it's actually something

536
00:25:29,780 --> 00:25:32,570
that can receive anything and I can

537
00:25:32,570 --> 00:25:38,350
admit anything streams as one of these

538
00:25:38,350 --> 00:25:42,230
ABC constructs as an arrow basically you

539
00:25:42,230 --> 00:25:44,480
need to define two things actually it's

540
00:25:44,480 --> 00:25:49,760
three things yeah three things r dot and

541
00:25:49,760 --> 00:25:51,830
first so you can see visually what

542
00:25:51,830 --> 00:25:55,810
happens here the our function takes

543
00:25:55,810 --> 00:26:00,110
takes a it takes any function right and

544
00:26:00,110 --> 00:26:02,690
then it creates a conveyor belt out of

545
00:26:02,690 --> 00:26:06,140
it so those squares next to the f think

546
00:26:06,140 --> 00:26:08,030
of it as like a belt moving from left to

547
00:26:08,030 --> 00:26:11,930
right so as each item comes through on

548
00:26:11,930 --> 00:26:14,300
the left it calls that function and then

549
00:26:14,300 --> 00:26:17,570
the value that's submitted this gets you

550
00:26:17,570 --> 00:26:19,720
know pushed down the belt you can

551
00:26:19,720 --> 00:26:25,570
connect two of these arrows together

552
00:26:25,570 --> 00:26:29,590
with this comp combining operation dot

553
00:26:29,590 --> 00:26:34,670
and what you can do is if you you can

554
00:26:34,670 --> 00:26:38,170
this also this notion of like a pairs so

555
00:26:38,170 --> 00:26:41,420
lets you get you get basically a

556
00:26:41,420 --> 00:26:44,510
conveyor belt that works on pairs so

557
00:26:44,510 --> 00:26:48,200
first basically works on the first item

558
00:26:48,200 --> 00:26:51,140
of a double and doesn't do anything that

559
00:26:51,140 --> 00:26:54,350
is the second item so this is pretty

560
00:26:54,350 --> 00:26:55,940
abstract so what can you actually do

561
00:26:55,940 --> 00:26:57,140
with this right

562
00:26:57,140 --> 00:26:59,480
I don't know if you want to go through

563
00:26:59,480 --> 00:27:01,760
the you could probably look at that

564
00:27:01,760 --> 00:27:04,780
later but it's it's pretty interesting

565
00:27:04,780 --> 00:27:08,450
what can you do with that well you can

566
00:27:08,450 --> 00:27:09,770
there's something called functional

567
00:27:09,770 --> 00:27:15,300
reactive programming that's sort of like

568
00:27:15,310 --> 00:27:17,720
there's a lot of interest for it in the

569
00:27:17,720 --> 00:27:20,600
high school community because functional

570
00:27:20,600 --> 00:27:23,720
reactive programming with this sort of

571
00:27:23,720 --> 00:27:26,630
arrow Combinator thing is a pretty is a

572
00:27:26,630 --> 00:27:29,690
pretty like intuitive way of thinking

573
00:27:29,690 --> 00:27:31,670
about streams of data and events and

574
00:27:31,670 --> 00:27:33,020
things like that and i want to show you

575
00:27:33,020 --> 00:27:38,000
how i want to show you how it works but

576
00:27:38,000 --> 00:27:40,790
uh I actually didn't get to finishing

577
00:27:40,790 --> 00:27:42,740
the demo but I'll show you I'll show you

578
00:27:42,740 --> 00:27:46,540
what I got with just plain JavaScript um

579
00:27:46,540 --> 00:27:55,030
like in oh we're not gonna see this what

580
00:27:55,030 --> 00:28:01,580
control shift up what does that do oh no

581
00:28:01,580 --> 00:28:13,900
way okay um I did it but control shift

582
00:28:13,900 --> 00:28:16,940
you know what it's not going to work but

583
00:28:16,940 --> 00:28:20,030
it was like a pretty sweet sort of

584
00:28:20,030 --> 00:28:24,520
broken game of pong why isn't it working

585
00:28:24,520 --> 00:28:27,740
that's weird uh well just come over and

586
00:28:27,740 --> 00:28:29,330
I'll show it to you guys like if you

587
00:28:29,330 --> 00:28:32,230
want to see it but basically we have

588
00:28:32,230 --> 00:28:38,220
actually let's just look at the code so

589
00:28:38,230 --> 00:28:40,570
this isn't happening this fiddles dead

590
00:28:40,570 --> 00:28:46,280
ok back to this so basically what these

591
00:28:46,280 --> 00:28:48,740
arrow Combinator's allow you to do is

592
00:28:48,740 --> 00:28:51,490
express something kind of like a graph

593
00:28:51,490 --> 00:28:55,130
which is sort of what like the big win

594
00:28:55,130 --> 00:28:57,380
is except I couldn't show you concretely

595
00:28:57,380 --> 00:28:58,580
but you'll have to use your imagination

596
00:28:58,580 --> 00:29:03,770
which shouldn't be that hard I hope we

597
00:29:03,770 --> 00:29:05,770
just started from the start again but

598
00:29:05,770 --> 00:29:11,090
her ok wow that was lucky um

599
00:29:11,090 --> 00:29:16,880
so if you think of like the first the

600
00:29:16,880 --> 00:29:18,410
first thing that triggers all these

601
00:29:18,410 --> 00:29:21,110
things it's like a game tick so for this

602
00:29:21,110 --> 00:29:22,570
piece of code was requestanimationframe

603
00:29:22,570 --> 00:29:27,200
so the tick basically emits it emits a

604
00:29:27,200 --> 00:29:30,080
value to key and ball position right and

605
00:29:30,080 --> 00:29:32,060
these things emit their own values

606
00:29:32,060 --> 00:29:34,460
because their streams play pause and

607
00:29:34,460 --> 00:29:39,410
ball pause they get paired into into

608
00:29:39,410 --> 00:29:41,300
like one of those like conveyor belt

609
00:29:41,300 --> 00:29:46,250
things like like in first um and then

610
00:29:46,250 --> 00:29:47,990
they get sent into this render function

611
00:29:47,990 --> 00:29:50,450
which basically is just a normal

612
00:29:50,450 --> 00:29:52,190
function that will draw the rectangles

613
00:29:52,190 --> 00:29:54,920
on the screen so i did want to show you

614
00:29:54,920 --> 00:29:56,600
how that would look in code actually no

615
00:29:56,600 --> 00:30:00,410
I do have a thing right here so one way

616
00:30:00,410 --> 00:30:03,530
to do it is with the fan-out Combinator

617
00:30:03,530 --> 00:30:08,230
so remember when we so I said our

618
00:30:08,230 --> 00:30:11,720
connect and first if you implement those

619
00:30:11,720 --> 00:30:13,640
things you get other things for free

620
00:30:13,640 --> 00:30:16,310
just like in streams if you create a

621
00:30:16,310 --> 00:30:17,780
stream what do you get for free you get

622
00:30:17,780 --> 00:30:21,170
the pipe Combinator if you instantiate

623
00:30:21,170 --> 00:30:24,950
something as a as an arrow you get a

624
00:30:24,950 --> 00:30:26,630
whole different bunch of Combinator's

625
00:30:26,630 --> 00:30:31,190
like fan out fannin and we can even do

626
00:30:31,190 --> 00:30:32,990
something crazy like that fab GS

627
00:30:32,990 --> 00:30:37,040
function chaining and express the

628
00:30:37,040 --> 00:30:39,580
execution flow of the game like that

629
00:30:39,580 --> 00:30:44,000
except I whoever wants to see it in

630
00:30:44,000 --> 00:30:47,240
action just come over after but

631
00:30:47,240 --> 00:30:50,990
basically this is what I want what I

632
00:30:50,990 --> 00:30:53,480
want you guys to take away from this is

633
00:30:53,480 --> 00:30:55,640
that streams yes they're a great

634
00:30:55,640 --> 00:30:58,100
abstraction but don't just stop there

635
00:30:58,100 --> 00:31:00,980
like streams give you pipes pipes are

636
00:31:00,980 --> 00:31:03,800
great keep on going like look for other

637
00:31:03,800 --> 00:31:06,290
abstractions there's I mean so it's it's

638
00:31:06,290 --> 00:31:08,060
sort of like a thinly veiled thing here

639
00:31:08,060 --> 00:31:10,970
but like what I'm the MA construct is is

640
00:31:10,970 --> 00:31:13,400
from category theory it's a monad and

641
00:31:13,400 --> 00:31:16,000
and the ABC contract is an arrow and

642
00:31:16,000 --> 00:31:19,580
they adequately these things captures

643
00:31:19,580 --> 00:31:22,360
certain control flow things that

644
00:31:22,360 --> 00:31:24,950
JavaScript programmers face all the time

645
00:31:24,950 --> 00:31:26,360
it's just they haven't I don't know

646
00:31:26,360 --> 00:31:27,830
people just sort of skater of mana ads

647
00:31:27,830 --> 00:31:30,139
or something like that but don't be you

648
00:31:30,139 --> 00:31:33,559
saw exactly how much lines of code it

649
00:31:33,559 --> 00:31:36,440
took to instantiate something as a monad

650
00:31:36,440 --> 00:31:41,980
it wasn't a whole lot um so basically

651
00:31:41,980 --> 00:31:45,470
yes abstraction is a great go and like

652
00:31:45,470 --> 00:31:49,340
don't don't stop discovering other

653
00:31:49,340 --> 00:31:51,740
abstractions that may be great tools for

654
00:31:51,740 --> 00:31:54,799
what you're doing keep on like learning

655
00:31:54,799 --> 00:31:56,870
and streams are great but just you know

656
00:31:56,870 --> 00:31:59,419
look forward from there did I just all

657
00:31:59,419 --> 00:32:03,320
right and these are the on you know I'm

658
00:32:03,320 --> 00:32:05,690
going to publish these slides but all

659
00:32:05,690 --> 00:32:09,320
the J's fiddles are on these links and

660
00:32:09,320 --> 00:32:12,620
and here's the attributions but I hope

661
00:32:12,620 --> 00:32:14,179
you took something away from this my

662
00:32:14,179 --> 00:32:18,080
name is Newman Vong and I'll I'll say

663
00:32:18,080 --> 00:32:27,290
for questions thank you thank you

664
00:32:27,300 --> 00:32:35,360
any questions this one guy at the front

665
00:32:35,370 --> 00:32:38,410
I'm so much the guys at the front how

666
00:32:38,410 --> 00:32:39,940
would you compare this kind of like

667
00:32:39,940 --> 00:32:41,980
using this any of these approaches for a

668
00:32:41,980 --> 00:32:44,020
sink programming to like using something

669
00:32:44,020 --> 00:32:46,420
like deferred zand promises so different

670
00:32:46,420 --> 00:32:50,170
so I think I think they're you know

671
00:32:50,170 --> 00:32:54,040
they're for each use case differs there

672
00:32:54,040 --> 00:32:55,540
could be use cases where different

673
00:32:55,540 --> 00:32:57,010
promises may work really well you just

674
00:32:57,010 --> 00:32:59,070
have to go an experiment with them like

675
00:32:59,070 --> 00:33:02,170
the jQuery uses deferred internally and

676
00:33:02,170 --> 00:33:06,940
I think it works really well for I don't

677
00:33:06,940 --> 00:33:09,070
know I guess it works kind of well I has

678
00:33:09,070 --> 00:33:10,240
anyone used the first I haven't

679
00:33:10,240 --> 00:33:12,820
personally used efforts but I mean

680
00:33:12,820 --> 00:33:14,950
there's a this this is the overhead of

681
00:33:14,950 --> 00:33:18,370
the abstraction right um I guess it does

682
00:33:18,370 --> 00:33:20,740
make things more modular anytime you

683
00:33:20,740 --> 00:33:22,780
separate out the states and not have

684
00:33:22,780 --> 00:33:24,400
these nested callbacks you make your

685
00:33:24,400 --> 00:33:26,050
solution more modular and you can change

686
00:33:26,050 --> 00:33:27,850
it and reuse certain things that you

687
00:33:27,850 --> 00:33:31,150
wouldn't otherwise be able to do so I

688
00:33:31,150 --> 00:33:33,730
think streams I think streams are good i

689
00:33:33,730 --> 00:33:39,010
think deferred zar good don't stop there

690
00:33:39,010 --> 00:33:41,800
like again like their other there are

691
00:33:41,800 --> 00:33:47,460
other like other disciplines that have

692
00:33:47,460 --> 00:33:51,460
researched and try to solve these

693
00:33:51,460 --> 00:33:54,130
problems for a very very long time

694
00:33:54,130 --> 00:33:57,640
before JavaScript so you know I think it

695
00:33:57,640 --> 00:34:00,520
would be good if everyone just everyone

696
00:34:00,520 --> 00:34:01,900
that was using streams everyone was

697
00:34:01,900 --> 00:34:04,120
using deferred how to look at some

698
00:34:04,120 --> 00:34:06,730
category theory principles as well so I

699
00:34:06,730 --> 00:34:07,900
don't know if that answers your question

700
00:34:07,900 --> 00:34:10,720
but they're just another tool in the

701
00:34:10,720 --> 00:34:16,179
toolbox yeah great okay okay Thank You

