1
00:00:18,890 --> 00:00:21,750

so today I'm going to talk about react

2
00:00:21,750 --> 00:00:24,330
which is a JavaScript library that I

3
00:00:24,330 --> 00:00:27,390
work on and we announced the open

4
00:00:27,390 --> 00:00:30,960
sourcing at Jas conf us in May and we

5
00:00:30,960 --> 00:00:35,190
got some sarcastic reactions to it that

6
00:00:35,190 --> 00:00:38,780
this tweet was was not a compliment

7
00:00:38,780 --> 00:00:41,969
so we basically challenged some kind of

8
00:00:41,969 --> 00:00:46,440
conventional wisdom with react so as we

9
00:00:46,440 --> 00:00:48,120
talked about it I'd appreciate it if you

10
00:00:48,120 --> 00:00:50,490
gave it five minutes we've used this for

11
00:00:50,490 --> 00:00:52,890
a lot of big applications on big teams

12
00:00:52,890 --> 00:00:54,989
and it's worked really well for us so

13
00:00:54,989 --> 00:00:57,690
I'm going to focus not on kind of

14
00:00:57,690 --> 00:01:00,030
teaching you how to use react and build

15
00:01:00,030 --> 00:01:02,010
applications with it because you can go

16
00:01:02,010 --> 00:01:03,570
online and look at our tutorials in our

17
00:01:03,570 --> 00:01:06,030
videos I'm going to instead focus on the

18
00:01:06,030 --> 00:01:08,729
design decisions behind what we did why

19
00:01:08,729 --> 00:01:11,040
we did that and you know even if you

20
00:01:11,040 --> 00:01:13,259
don't use react maybe you can can take

21
00:01:13,259 --> 00:01:14,820
those decisions and apply them to your

22
00:01:14,820 --> 00:01:19,860
own projects so react we call it a

23
00:01:19,860 --> 00:01:23,400
library for creating user interfaces to

24
00:01:23,400 --> 00:01:24,960
get more specific that means that we

25
00:01:24,960 --> 00:01:27,540
render your UI and we respond to two

26
00:01:27,540 --> 00:01:30,030
events in the browser you can think of

27
00:01:30,030 --> 00:01:32,909
it as the V and MVC you might want to

28
00:01:32,909 --> 00:01:34,170
think of it as the controller as well

29
00:01:34,170 --> 00:01:36,290
depending on your definition of MVC

30
00:01:36,290 --> 00:01:38,520
but there's a big focus on playing

31
00:01:38,520 --> 00:01:40,470
nicely with your stack whatever it is so

32
00:01:40,470 --> 00:01:42,869
a lot of the early react success stories

33
00:01:42,869 --> 00:01:45,390
were existing projects that dropped it

34
00:01:45,390 --> 00:01:47,310
in on a small part of their app and they

35
00:01:47,310 --> 00:01:48,780
started using it for more and more of

36
00:01:48,780 --> 00:01:52,200
their application as time went on so

37
00:01:52,200 --> 00:01:53,880
we're going to talk about a couple

38
00:01:53,880 --> 00:01:56,400
things today the first is that I'm going

39
00:01:56,400 --> 00:02:00,299
to focus on some prerequisites so we

40
00:02:00,299 --> 00:02:02,070
like to combine the dom generation and

41
00:02:02,070 --> 00:02:03,960
display logic rather than using a

42
00:02:03,960 --> 00:02:05,909
templating system and a lot of people

43
00:02:05,909 --> 00:02:07,170
don't agree with that and i wanted to

44
00:02:07,170 --> 00:02:09,000
explain why we think that that's a great

45
00:02:09,000 --> 00:02:11,790
idea then i'm going to go into reacts

46
00:02:11,790 --> 00:02:14,040
design so what makes building

47
00:02:14,040 --> 00:02:16,290
applications with react really really

48
00:02:16,290 --> 00:02:19,799
fun and easy and the core idea there is

49
00:02:19,799 --> 00:02:22,349
we basically rerender the app every time

50
00:02:22,349 --> 00:02:25,920
the data changes and finally what a lot

51
00:02:25,920 --> 00:02:27,390
of people are really interested in is

52
00:02:27,390 --> 00:02:27,760
our

53
00:02:27,760 --> 00:02:29,860
unique implementation so we've built

54
00:02:29,860 --> 00:02:31,420
this javascript library from the ground

55
00:02:31,420 --> 00:02:34,090
up using a lot of different ideas than

56
00:02:34,090 --> 00:02:35,560
other libraries so I'd like to talk

57
00:02:35,560 --> 00:02:37,049
about that too

58
00:02:37,049 --> 00:02:39,730
so let's dive into the first thing which

59
00:02:39,730 --> 00:02:41,950
is building components and not templates

60
00:02:41,950 --> 00:02:44,799
so I'm sure everyone here is built a UI

61
00:02:44,799 --> 00:02:47,370
with JavaScript before right everyone

62
00:02:47,370 --> 00:02:50,049
has anybody used a client-side

63
00:02:50,049 --> 00:02:52,659
templating library like handlebars is a

64
00:02:52,659 --> 00:02:55,569
really high-quality one a lot of people

65
00:02:55,569 --> 00:02:58,569
use them on the server as well so

66
00:02:58,569 --> 00:03:00,940
cynically we like to think of components

67
00:03:00,940 --> 00:03:04,599
as mixing markup and display logic but

68
00:03:04,599 --> 00:03:06,280
we do like separation of concerns right

69
00:03:06,280 --> 00:03:07,750
let's kind of the number one reason for

70
00:03:07,750 --> 00:03:10,510
using a template so a templating

71
00:03:10,510 --> 00:03:11,980
language basically takes in a data

72
00:03:11,980 --> 00:03:15,370
structure and combines it with an HTML

73
00:03:15,370 --> 00:03:16,750
document marked up with some special

74
00:03:16,750 --> 00:03:18,909
directives and spits out some static

75
00:03:18,909 --> 00:03:24,040
markup but separation of concerns really

76
00:03:24,040 --> 00:03:27,220
isn't a specific term right like what

77
00:03:27,220 --> 00:03:28,900
are concerns there it's very ill-defined

78
00:03:28,900 --> 00:03:30,970
so I'd like to kind of zoom in on this

79
00:03:30,970 --> 00:03:33,220
definition and talk about coupling and

80
00:03:33,220 --> 00:03:36,040
cohesion so these are terms from

81
00:03:36,040 --> 00:03:38,680
software engineering and we're talking

82
00:03:38,680 --> 00:03:41,019
about reducing coupling and increasing

83
00:03:41,019 --> 00:03:45,579
cohesion so coupling is the degree to

84
00:03:45,579 --> 00:03:48,099
which each module in a program relies on

85
00:03:48,099 --> 00:03:52,030
the other modules in a program so think

86
00:03:52,030 --> 00:03:54,129
about the really annoying bugs or

87
00:03:54,129 --> 00:03:56,169
features that you had to build in your

88
00:03:56,169 --> 00:03:59,079
day-to-day like work usually the ones

89
00:03:59,079 --> 00:04:00,970
that are constrained to a single

90
00:04:00,970 --> 00:04:02,410
function are pretty easy to deal with

91
00:04:02,410 --> 00:04:04,329
right you go in you isolate where the

92
00:04:04,329 --> 00:04:06,849
problem is you fix that function or that

93
00:04:06,849 --> 00:04:08,790
class and you move on you with your life

94
00:04:08,790 --> 00:04:11,379
maybe add a unit test to to make sure

95
00:04:11,379 --> 00:04:15,280
that it doesn't happen again the really

96
00:04:15,280 --> 00:04:17,409
painful bugs and features are the ones

97
00:04:17,409 --> 00:04:19,989
that you have to make changes to

98
00:04:19,989 --> 00:04:22,479
multiple modules so we like to call

99
00:04:22,479 --> 00:04:23,919
these cascading changes and they're a

100
00:04:23,919 --> 00:04:28,780
symptom of tight coupling so kind of the

101
00:04:28,780 --> 00:04:30,130
way I think of coupling is that if I

102
00:04:30,130 --> 00:04:31,539
want to make a change to some piece of

103
00:04:31,539 --> 00:04:33,849
functionality do I have to make a change

104
00:04:33,849 --> 00:04:35,590
to this module and does it affect all

105
00:04:35,590 --> 00:04:37,479
the other modules requiring me to make

106
00:04:37,479 --> 00:04:39,969
changes to them and that's what makes

107
00:04:39,969 --> 00:04:42,940
software really hard to maintain

108
00:04:42,940 --> 00:04:45,010
another term that we like to think about

109
00:04:45,010 --> 00:04:47,680
is cohesion so cohesion is the degree to

110
00:04:47,680 --> 00:04:49,240
which elements of a module belong

111
00:04:49,240 --> 00:04:51,070
together so you can have the most

112
00:04:51,070 --> 00:04:54,970
decoupled architecture ever but if those

113
00:04:54,970 --> 00:04:57,820
modules don't really make sense in terms

114
00:04:57,820 --> 00:04:59,380
of the functionality that they contain

115
00:04:59,380 --> 00:05:01,419
it's also not going to be maintainable

116
00:05:01,419 --> 00:05:02,560
because it's going to be hard for you to

117
00:05:02,560 --> 00:05:04,840
figure out you know where to make the

118
00:05:04,840 --> 00:05:06,400
change because those concerns are kind

119
00:05:06,400 --> 00:05:16,970
of spread all over your program whoops

120
00:05:16,970 --> 00:05:20,750
so I think that templates encourage a

121
00:05:20,750 --> 00:05:22,790
really poor separation of concerns and

122
00:05:22,790 --> 00:05:24,650
it's not just templates it's anything

123
00:05:24,650 --> 00:05:27,260
that really tries to markup an HTML

124
00:05:27,260 --> 00:05:29,780
document and you know make it alive and

125
00:05:29,780 --> 00:05:31,580
really make it interactive

126
00:05:31,580 --> 00:05:34,880
so angularjs style directives also fall

127
00:05:34,880 --> 00:05:38,960
into this category and why would I say

128
00:05:38,960 --> 00:05:40,880
that because obviously when you create a

129
00:05:40,880 --> 00:05:42,290
template and you have your display logic

130
00:05:42,290 --> 00:05:44,180
in one file and your markup in another

131
00:05:44,180 --> 00:05:45,860
file that seems like a reasonable

132
00:05:45,860 --> 00:05:48,290
separation of concerns right when I want

133
00:05:48,290 --> 00:05:49,430
to change the way that the application

134
00:05:49,430 --> 00:05:51,620
behaves I go to the JavaScript file with

135
00:05:51,620 --> 00:05:53,480
the display logic and when I want to

136
00:05:53,480 --> 00:05:54,950
change the way that it looks I go into

137
00:05:54,950 --> 00:05:56,240
the template and change the template

138
00:05:56,240 --> 00:05:59,750
right it's actually kind of a

139
00:05:59,750 --> 00:06:01,970
misunderstanding because there is an

140
00:06:01,970 --> 00:06:03,890
implicit coupling between that display

141
00:06:03,890 --> 00:06:06,410
logic in the template so the template is

142
00:06:06,410 --> 00:06:07,760
always going to need to read some data

143
00:06:07,760 --> 00:06:10,430
from JavaScript write JavaScript fetches

144
00:06:10,430 --> 00:06:12,620
from the server tells the template what

145
00:06:12,620 --> 00:06:14,020
to do and then the template renders it

146
00:06:14,020 --> 00:06:15,950
however imagine that I wanted to

147
00:06:15,950 --> 00:06:17,840
implement a zebra-striped

148
00:06:17,840 --> 00:06:19,910
table so it's a data table with

149
00:06:19,910 --> 00:06:23,030
alternating row colors with a template a

150
00:06:23,030 --> 00:06:25,250
lot of times you have to pass along that

151
00:06:25,250 --> 00:06:28,280
row color in your view model which is

152
00:06:28,280 --> 00:06:29,540
the piece of data that your your

153
00:06:29,540 --> 00:06:31,940
controller or your display logic passes

154
00:06:31,940 --> 00:06:34,790
to your template now if you want to

155
00:06:34,790 --> 00:06:35,750
change the way that that template

156
00:06:35,750 --> 00:06:38,240
renders you can't actually only change

157
00:06:38,240 --> 00:06:39,890
the template anymore because you have to

158
00:06:39,890 --> 00:06:41,480
make sure that the data in your view

159
00:06:41,480 --> 00:06:44,270
model is synced between the template and

160
00:06:44,270 --> 00:06:47,330
the display logic so we actually like to

161
00:06:47,330 --> 00:06:49,040
think of display logic and markup as

162
00:06:49,040 --> 00:06:52,010
inevitably tightly coupled because you

163
00:06:52,010 --> 00:06:54,169
basically need to update the Dom somehow

164
00:06:54,169 --> 00:06:57,320
and you need to somehow couple the state

165
00:06:57,320 --> 00:07:01,160
of the Dom with your display logic but

166
00:07:01,160 --> 00:07:02,150
the good news is is that they're

167
00:07:02,150 --> 00:07:03,800
actually highly cohesive because they're

168
00:07:03,800 --> 00:07:06,260
doing the same thing right so think

169
00:07:06,260 --> 00:07:09,320
about what your template does your

170
00:07:09,320 --> 00:07:11,600
template generates HTML the browser

171
00:07:11,600 --> 00:07:15,710
parses the HTML into dom nodes then your

172
00:07:15,710 --> 00:07:18,260
display logic just manipulates dom nodes

173
00:07:18,260 --> 00:07:20,210
so they're doing basically the same

174
00:07:20,210 --> 00:07:22,880
thing they're both rendering the UI to

175
00:07:22,880 --> 00:07:25,580
dom data structures so what we're

176
00:07:25,580 --> 00:07:26,539
actually doing when we're using

177
00:07:26,539 --> 00:07:28,310
templates and display logic and

178
00:07:28,310 --> 00:07:29,980
separating those out we're set

179
00:07:29,980 --> 00:07:34,360
technology's not concerns and the

180
00:07:34,360 --> 00:07:35,380
problem with this is that the

181
00:07:35,380 --> 00:07:38,050
technologies that we're separating are

182
00:07:38,050 --> 00:07:46,060
deliberately underpowered so I'm going

183
00:07:46,060 --> 00:07:48,160
to pick on handlebars for a second which

184
00:07:48,160 --> 00:07:50,890
is an extremely popular open-source

185
00:07:50,890 --> 00:07:53,020
JavaScript templating solution and it's

186
00:07:53,020 --> 00:07:55,030
a great one it's really fast it solves a

187
00:07:55,030 --> 00:07:57,370
lot of people's use cases but it falls

188
00:07:57,370 --> 00:08:00,160
into the common trap of templates which

189
00:08:00,160 --> 00:08:03,280
is you rely on primitive abstractions so

190
00:08:03,280 --> 00:08:04,720
for example if you want to reuse a

191
00:08:04,720 --> 00:08:08,020
template the kind of standard way to do

192
00:08:08,020 --> 00:08:10,000
it in handlebars is to use something

193
00:08:10,000 --> 00:08:13,660
called a partial and a partial is a mini

194
00:08:13,660 --> 00:08:15,340
template that you can include in other

195
00:08:15,340 --> 00:08:18,070
templates so think of if you wanted a

196
00:08:18,070 --> 00:08:20,110
profile pic component on a social

197
00:08:20,110 --> 00:08:22,360
network and you reuse it all over the

198
00:08:22,360 --> 00:08:23,410
place you would use a partial to

199
00:08:23,410 --> 00:08:26,350
implement that now the problem is you're

200
00:08:26,350 --> 00:08:28,930
basically copying and pasting in this

201
00:08:28,930 --> 00:08:30,790
partial into a template and it gets all

202
00:08:30,790 --> 00:08:32,890
of the variables that the parent has in

203
00:08:32,890 --> 00:08:35,710
the in the current scope this is a whole

204
00:08:35,710 --> 00:08:38,140
bunch of implicit dependencies now so

205
00:08:38,140 --> 00:08:40,210
because the the child template or the

206
00:08:40,210 --> 00:08:41,979
partial may be reading from any one of

207
00:08:41,979 --> 00:08:43,930
these variables you have to go track

208
00:08:43,930 --> 00:08:45,760
down every single call site that the

209
00:08:45,760 --> 00:08:47,950
partial is being used in order to make

210
00:08:47,950 --> 00:08:50,800
sure that it's you know being updated

211
00:08:50,800 --> 00:08:52,180
correctly when you want to make a change

212
00:08:52,180 --> 00:08:55,000
to the partial and another symptom is

213
00:08:55,000 --> 00:08:56,590
relying on kind of flow control

214
00:08:56,590 --> 00:09:01,000
abstractions like each so each basically

215
00:09:01,000 --> 00:09:02,560
iterates through each item of a sequence

216
00:09:02,560 --> 00:09:05,290
and emits some markup in a traditional

217
00:09:05,290 --> 00:09:08,380
templating language what if you want to

218
00:09:08,380 --> 00:09:10,300
kind of change the way that you iterate

219
00:09:10,300 --> 00:09:11,890
over the list or what if you want to

220
00:09:11,890 --> 00:09:14,590
insert two pieces of markup where the

221
00:09:14,590 --> 00:09:15,670
templating language only thought you

222
00:09:15,670 --> 00:09:18,880
would want to do one per list item it's

223
00:09:18,880 --> 00:09:20,650
it's just difficult to deal with because

224
00:09:20,650 --> 00:09:22,510
you don't have the power of a full

225
00:09:22,510 --> 00:09:24,190
programming language you have the power

226
00:09:24,190 --> 00:09:25,930
of a template language which is

227
00:09:25,930 --> 00:09:29,980
deliberately underpowered so there are

228
00:09:29,980 --> 00:09:32,590
some other symptoms of this I talked

229
00:09:32,590 --> 00:09:36,240
about marking up an HTML document with

230
00:09:36,240 --> 00:09:40,720
directives to bring it to life now in

231
00:09:40,720 --> 00:09:42,760
order to do that you're basically trying

232
00:09:42,760 --> 00:09:43,580
to

233
00:09:43,580 --> 00:09:46,100
a new way to express program semantics

234
00:09:46,100 --> 00:09:48,500
in a document so you're kind of like

235
00:09:48,500 --> 00:09:51,200
creating a new programming language now

236
00:09:51,200 --> 00:09:52,400
the problem with this is that the way

237
00:09:52,400 --> 00:09:53,750
that that people are building these

238
00:09:53,750 --> 00:09:55,370
abstractions on the web today

239
00:09:55,370 --> 00:09:57,050
they don't accept that they're building

240
00:09:57,050 --> 00:09:59,720
a new programming language so you have

241
00:09:59,720 --> 00:10:01,640
to invent a lot of new concepts that are

242
00:10:01,640 --> 00:10:03,770
slightly incompatible with you know a

243
00:10:03,770 --> 00:10:04,970
real programming language that we have

244
00:10:04,970 --> 00:10:08,900
today JavaScript so angular is hugely

245
00:10:08,900 --> 00:10:10,910
popular these days so I obviously have

246
00:10:10,910 --> 00:10:13,190
to pick on them and I've pulled this out

247
00:10:13,190 --> 00:10:15,260
of the angular directive stocks which is

248
00:10:15,260 --> 00:10:17,780
the way that you mark up a HTML document

249
00:10:17,780 --> 00:10:19,940
and you know connect it with the

250
00:10:19,940 --> 00:10:21,950
JavaScript part of angular and I've

251
00:10:21,950 --> 00:10:24,170
highlighted all of the new concepts that

252
00:10:24,170 --> 00:10:26,240
they had to create that are already in

253
00:10:26,240 --> 00:10:29,710
JavaScript and that you have to learn so

254
00:10:29,710 --> 00:10:34,520
there's a lot there and the point of all

255
00:10:34,520 --> 00:10:36,950
this is that a lot of the ways that we

256
00:10:36,950 --> 00:10:39,650
build applications today the the

257
00:10:39,650 --> 00:10:42,860
frameworks and libraries we use um try

258
00:10:42,860 --> 00:10:44,150
to tell you how to separate your

259
00:10:44,150 --> 00:10:46,730
concerns for you but we don't think that

260
00:10:46,730 --> 00:10:48,920
the framework can do that like your

261
00:10:48,920 --> 00:10:50,210
application you don't think of your

262
00:10:50,210 --> 00:10:52,040
application in terms of models views and

263
00:10:52,040 --> 00:10:53,390
controllers you think of your

264
00:10:53,390 --> 00:10:55,760
application in terms of user profiles

265
00:10:55,760 --> 00:10:59,540
and navigation bars and you know posts

266
00:10:59,540 --> 00:11:02,240
on a timeline or something like that so

267
00:11:02,240 --> 00:11:03,290
we think that the framework of the

268
00:11:03,290 --> 00:11:05,540
library you're using should just give

269
00:11:05,540 --> 00:11:07,490
you tools for you to express your

270
00:11:07,490 --> 00:11:10,310
program in the language of your problem

271
00:11:10,310 --> 00:11:12,350
domain rather than the language of the

272
00:11:12,350 --> 00:11:15,800
framework itself so the tool that we

273
00:11:15,800 --> 00:11:18,020
came up with was a react component and

274
00:11:18,020 --> 00:11:20,680
it's a highly cohesive building block

275
00:11:20,680 --> 00:11:23,510
for building UIs and that is loosely

276
00:11:23,510 --> 00:11:26,630
coupled with other components and so

277
00:11:26,630 --> 00:11:28,430
with react even though we're combining

278
00:11:28,430 --> 00:11:31,730
the Dom generation part of your UI and

279
00:11:31,730 --> 00:11:34,580
the display logic that drives it we can

280
00:11:34,580 --> 00:11:36,500
actually separate our concerns in a way

281
00:11:36,500 --> 00:11:39,410
that matches your application better by

282
00:11:39,410 --> 00:11:41,420
using components with the full power of

283
00:11:41,420 --> 00:11:43,520
JavaScript rather than relying on a

284
00:11:43,520 --> 00:11:45,020
crippled templating language to do it

285
00:11:45,020 --> 00:11:50,600
for you so here's a very very quick

286
00:11:50,600 --> 00:11:53,180
example of some react code like I said

287
00:11:53,180 --> 00:11:55,970
this isn't a tutorial I not going to

288
00:11:55,970 --> 00:11:57,150
dive in too deep

289
00:11:57,150 --> 00:11:58,730
but I just want to point out some things

290
00:11:58,730 --> 00:12:01,140
with react when you want to reuse some

291
00:12:01,140 --> 00:12:04,140
code and you know or handle an event or

292
00:12:04,140 --> 00:12:06,030
something like that we don't create a

293
00:12:06,030 --> 00:12:07,890
new type of abstraction for you you

294
00:12:07,890 --> 00:12:09,210
don't have to create a partial or

295
00:12:09,210 --> 00:12:10,950
something you create a JavaScript

296
00:12:10,950 --> 00:12:12,510
function and you call the function and

297
00:12:12,510 --> 00:12:14,430
the best part about that is that you can

298
00:12:14,430 --> 00:12:16,350
then link the function or you can unit

299
00:12:16,350 --> 00:12:17,670
test the function and you can take

300
00:12:17,670 --> 00:12:19,170
advantage of all of the great tooling

301
00:12:19,170 --> 00:12:22,590
that javascript has today another thing

302
00:12:22,590 --> 00:12:23,730
that's really important to note is

303
00:12:23,730 --> 00:12:25,800
composition so one of the things that we

304
00:12:25,800 --> 00:12:27,840
identified building large apps early on

305
00:12:27,840 --> 00:12:30,180
is that composition is pretty much the

306
00:12:30,180 --> 00:12:32,100
most important thing when building

307
00:12:32,100 --> 00:12:34,020
applications so being able to reuse

308
00:12:34,020 --> 00:12:35,790
components and build components out of

309
00:12:35,790 --> 00:12:38,370
other components and finally I've

310
00:12:38,370 --> 00:12:40,740
highlighted expressivity so you can

311
00:12:40,740 --> 00:12:42,720
actually use regular JavaScript

312
00:12:42,720 --> 00:12:44,970
expressions inside of your display layer

313
00:12:44,970 --> 00:12:47,040
because sometimes you actually need the

314
00:12:47,040 --> 00:12:48,750
full power of JavaScript to do it you

315
00:12:48,750 --> 00:12:50,670
shouldn't have to jump through hoops to

316
00:12:50,670 --> 00:12:54,420
add 1 to 0 index you know list item or

317
00:12:54,420 --> 00:12:58,020
something so anyway the important

318
00:12:58,020 --> 00:13:00,000
takeaways are that components are

319
00:13:00,000 --> 00:13:03,090
reusable and they're composable and

320
00:13:03,090 --> 00:13:06,260
they're unit testable because they're

321
00:13:06,260 --> 00:13:13,180
isolated units

322
00:13:13,190 --> 00:13:15,800
so if you're used to building templates

323
00:13:15,800 --> 00:13:18,259
and if you have a lot of experience on

324
00:13:18,259 --> 00:13:21,079
legacy code or legacy PHP code bases

325
00:13:21,079 --> 00:13:21,860
like I do

326
00:13:21,860 --> 00:13:24,019
you're probably concerned about

327
00:13:24,019 --> 00:13:26,540
spaghetti code so we're not advocating

328
00:13:26,540 --> 00:13:28,279
going back to the world where we call

329
00:13:28,279 --> 00:13:30,529
like my sequel fetch row in the middle

330
00:13:30,529 --> 00:13:32,060
of your data table rendering code that's

331
00:13:32,060 --> 00:13:35,329
a terrible idea so my answer to kind of

332
00:13:35,329 --> 00:13:36,860
ask you about spaghetti code when we

333
00:13:36,860 --> 00:13:38,750
combine Dom generation and display logic

334
00:13:38,750 --> 00:13:43,100
is just don't write spaghetti code keep

335
00:13:43,100 --> 00:13:46,009
your components small and only put

336
00:13:46,009 --> 00:13:49,189
display logic and components we're all

337
00:13:49,189 --> 00:13:50,990
you know engineers here working on the

338
00:13:50,990 --> 00:13:53,360
web and with great power comes great

339
00:13:53,360 --> 00:13:56,540
responsibility no matter what framework

340
00:13:56,540 --> 00:13:58,459
library toolkit or language you're using

341
00:13:58,459 --> 00:14:01,569
you can write spaghetti code in it just

342
00:14:01,569 --> 00:14:04,279
take action to use good design

343
00:14:04,279 --> 00:14:07,879
principles and avoid it another thing

344
00:14:07,879 --> 00:14:09,790
you might be concerned about is security

345
00:14:09,790 --> 00:14:11,689
specifically cross-site scripting

346
00:14:11,689 --> 00:14:13,459
vulnerabilities so one of the main

347
00:14:13,459 --> 00:14:15,649
advantages of templates early on was

348
00:14:15,649 --> 00:14:17,089
that you weren't generating markup and

349
00:14:17,089 --> 00:14:18,800
strings and generating markup and

350
00:14:18,800 --> 00:14:20,750
strings is pretty dangerous because you

351
00:14:20,750 --> 00:14:22,550
might accidentally concatenate a

352
00:14:22,550 --> 00:14:25,610
user-provided variable and that might

353
00:14:25,610 --> 00:14:27,829
contain you know a script tag that then

354
00:14:27,829 --> 00:14:29,930
steals someone else's cookies and then

355
00:14:29,930 --> 00:14:31,130
can post on their behalf it's pretty

356
00:14:31,130 --> 00:14:34,970
dangerous so we're not building you know

357
00:14:34,970 --> 00:14:36,829
strings of markup with react we have a

358
00:14:36,829 --> 00:14:39,649
small library called react Dom that

359
00:14:39,649 --> 00:14:41,660
generates a representation of the Dom

360
00:14:41,660 --> 00:14:44,209
for you so if I wanted to create a link

361
00:14:44,209 --> 00:14:47,810
for example I call react Dom A which

362
00:14:47,810 --> 00:14:50,569
stands for an a tag for link the first

363
00:14:50,569 --> 00:14:53,889
argument is equivalent to the HTML

364
00:14:53,889 --> 00:14:57,019
arguments or attributes and you just

365
00:14:57,019 --> 00:14:58,279
pass it in as a regular JavaScript

366
00:14:58,279 --> 00:14:59,689
object so right here it's a link to my

367
00:14:59,689 --> 00:15:01,910
Instagram account and then the second

368
00:15:01,910 --> 00:15:04,009
parameter is you know an array or

369
00:15:04,009 --> 00:15:07,069
another react component or a string that

370
00:15:07,069 --> 00:15:08,420
represents what should be contained

371
00:15:08,420 --> 00:15:15,350
within this tag and that library

372
00:15:15,350 --> 00:15:17,360
automatically escapes everything for you

373
00:15:17,360 --> 00:15:19,189
so if you put you know HTML in there

374
00:15:19,189 --> 00:15:23,240
it'll be escaped so we want to generate

375
00:15:23,240 --> 00:15:24,829
this Dom representation with a bunch of

376
00:15:24,829 --> 00:15:26,630
functions that look like this

377
00:15:26,630 --> 00:15:29,390
right if you work with designers and

378
00:15:29,390 --> 00:15:30,950
I've worked with designers they really

379
00:15:30,950 --> 00:15:33,140
don't want to do this they're really

380
00:15:33,140 --> 00:15:35,060
good at Photoshop and and you know

381
00:15:35,060 --> 00:15:36,800
working on HTML mock-ups but they don't

382
00:15:36,800 --> 00:15:39,310
really want to maintain all of this code

383
00:15:39,310 --> 00:15:41,900
at the same time I don't want to spend

384
00:15:41,900 --> 00:15:44,120
four hours tweaking the box-shadow

385
00:15:44,120 --> 00:15:46,160
of my my components I just want to get

386
00:15:46,160 --> 00:15:48,080
like 90% of the way there then let the

387
00:15:48,080 --> 00:15:50,510
designer like pixel push so working with

388
00:15:50,510 --> 00:15:52,790
designers is really important so we

389
00:15:52,790 --> 00:15:54,410
built an optional syntax extension

390
00:15:54,410 --> 00:15:57,520
called JSX let's use an HTML like syntax

391
00:15:57,520 --> 00:16:01,580
with react so one thing that's important

392
00:16:01,580 --> 00:16:02,870
to note is that this is completely

393
00:16:02,870 --> 00:16:05,180
optional and you don't need to use this

394
00:16:05,180 --> 00:16:07,580
to use react and the same is true the

395
00:16:07,580 --> 00:16:08,240
other way around

396
00:16:08,240 --> 00:16:11,030
so JSX can be used outside of react if

397
00:16:11,030 --> 00:16:13,610
you want to so what JSX will do is it'll

398
00:16:13,610 --> 00:16:15,650
take an expression like this embed it in

399
00:16:15,650 --> 00:16:18,020
a regular javascript file and it will

400
00:16:18,020 --> 00:16:20,870
translate it for you to this the exact

401
00:16:20,870 --> 00:16:21,950
same code that I showed on the previous

402
00:16:21,950 --> 00:16:25,400
slide and with JSX we found that it's

403
00:16:25,400 --> 00:16:27,260
very easy for designers and people of

404
00:16:27,260 --> 00:16:29,540
all backgrounds to contribute code to

405
00:16:29,540 --> 00:16:32,930
react based projects so we like to think

406
00:16:32,930 --> 00:16:35,210
of it like this the accessibility of

407
00:16:35,210 --> 00:16:38,920
templates and the power of JavaScript

408
00:16:38,920 --> 00:16:41,000
you can go in and the code looks

409
00:16:41,000 --> 00:16:42,590
familiar but you can use all the

410
00:16:42,590 --> 00:16:44,240
powerful JavaScript abstractions that

411
00:16:44,240 --> 00:16:45,980
you're used to do all the functional

412
00:16:45,980 --> 00:16:50,690
programming you want all right so I've

413
00:16:50,690 --> 00:16:52,520
talked about have I convinced you guys

414
00:16:52,520 --> 00:16:53,570
the templates are a bad idea

415
00:16:53,570 --> 00:16:57,590
I hope so we're going to move on so the

416
00:16:57,590 --> 00:16:58,700
next I'm going to talk about is what

417
00:16:58,700 --> 00:17:00,230
makes react really cool and really

418
00:17:00,230 --> 00:17:02,860
interesting and really fun to use and

419
00:17:02,860 --> 00:17:05,780
that's rerender entire application on

420
00:17:05,780 --> 00:17:11,959
every update so we've built a lot of

421
00:17:11,959 --> 00:17:15,110
applications and we identified that

422
00:17:15,110 --> 00:17:16,850
state is what makes building UIs

423
00:17:16,850 --> 00:17:19,939
particularly hard so if you've worked on

424
00:17:19,939 --> 00:17:21,470
anything in the backend before a lot of

425
00:17:21,470 --> 00:17:23,540
times you can kind of unit test your

426
00:17:23,540 --> 00:17:25,280
code and it feels really solid and you

427
00:17:25,280 --> 00:17:26,569
ship it and then the unit tests break

428
00:17:26,569 --> 00:17:29,660
and that's a real failure but with UI is

429
00:17:29,660 --> 00:17:31,310
there's a lot of variables and a lot of

430
00:17:31,310 --> 00:17:33,260
state and a lot of relying on like does

431
00:17:33,260 --> 00:17:35,510
this UI feel right or does it look right

432
00:17:35,510 --> 00:17:38,450
and this is you know there's a lot of

433
00:17:38,450 --> 00:17:39,740
stuff going on here there's lots of UI

434
00:17:39,740 --> 00:17:40,550
elements

435
00:17:40,550 --> 00:17:42,980
the fact that we are pushing to you know

436
00:17:42,980 --> 00:17:45,620
heterogeneous environments is is also

437
00:17:45,620 --> 00:17:48,140
hard having a big mutable Dom that you

438
00:17:48,140 --> 00:17:49,580
have to keep track of is also very

439
00:17:49,580 --> 00:17:51,770
difficult and there's user input that

440
00:17:51,770 --> 00:17:53,540
you might not expect that kind of thing

441
00:17:53,540 --> 00:17:57,530
in particular data changing over time is

442
00:17:57,530 --> 00:18:00,230
the root of all evil that's what we've

443
00:18:00,230 --> 00:18:03,800
identified anyway we're not the first

444
00:18:03,800 --> 00:18:05,630
people to come up with this though some

445
00:18:05,630 --> 00:18:08,300
famous computer scientists agree Dykstra

446
00:18:08,300 --> 00:18:10,490
says our intellectual powers are rather

447
00:18:10,490 --> 00:18:12,620
geared to master static relations and

448
00:18:12,620 --> 00:18:14,480
our power to visualize processes

449
00:18:14,480 --> 00:18:17,000
evolving in time are relatively poorly

450
00:18:17,000 --> 00:18:20,030
developed so what he's saying here is

451
00:18:20,030 --> 00:18:22,100
that we can understand how a single

452
00:18:22,100 --> 00:18:23,540
function works right we can look at the

453
00:18:23,540 --> 00:18:24,860
inputs and we can look at the outputs

454
00:18:24,860 --> 00:18:27,260
and we can figure it out but when we

455
00:18:27,260 --> 00:18:29,960
call this function over time and we set

456
00:18:29,960 --> 00:18:31,670
variables that might change in ways that

457
00:18:31,670 --> 00:18:33,080
you don't expect it's very hard for us

458
00:18:33,080 --> 00:18:36,140
to keep that program in our head so for

459
00:18:36,140 --> 00:18:37,670
that reason we should do our utmost to

460
00:18:37,670 --> 00:18:40,010
shorten the conceptual gap between the

461
00:18:40,010 --> 00:18:41,630
static program and the dynamic process

462
00:18:41,630 --> 00:18:43,760
to make the correspondence between the

463
00:18:43,760 --> 00:18:46,190
program and the process as trivial as

464
00:18:46,190 --> 00:18:47,110
possible

465
00:18:47,110 --> 00:18:50,450
what Dijkstra's saying here is make

466
00:18:50,450 --> 00:18:52,580
programs that execute over time make

467
00:18:52,580 --> 00:18:55,250
them look like item potent functions

468
00:18:55,250 --> 00:18:57,190
that execute at a single point in time

469
00:18:57,190 --> 00:18:59,480
he's making an argument for functional

470
00:18:59,480 --> 00:19:03,110
reactive programming so if we like turn

471
00:19:03,110 --> 00:19:04,970
it back to 1999 when we were writing

472
00:19:04,970 --> 00:19:07,010
that PHP spaghetti code that executed on

473
00:19:07,010 --> 00:19:07,610
the server

474
00:19:07,610 --> 00:19:10,490
everything was actually easier right if

475
00:19:10,490 --> 00:19:14,030
I wanted to submit you know a new to-do

476
00:19:14,030 --> 00:19:16,610
item to my to-do list I didn't have to

477
00:19:16,610 --> 00:19:18,440
keep track of every place where I put

478
00:19:18,440 --> 00:19:19,970
the the number of to-do items in the

479
00:19:19,970 --> 00:19:22,340
list in my DOM and update each of those

480
00:19:22,340 --> 00:19:23,150
when it changed

481
00:19:23,150 --> 00:19:25,100
I simply submitted to the server the

482
00:19:25,100 --> 00:19:27,740
server wrote it into the database then

483
00:19:27,740 --> 00:19:29,540
selected all the information out of the

484
00:19:29,540 --> 00:19:31,040
database again and re-render the whole

485
00:19:31,040 --> 00:19:33,950
page conceptually it's really simple to

486
00:19:33,950 --> 00:19:36,470
manage data changing over time since you

487
00:19:36,470 --> 00:19:38,270
just rerender the entire page and it's

488
00:19:38,270 --> 00:19:40,070
very easy to visualize that because that

489
00:19:40,070 --> 00:19:42,290
process is a single point in time rather

490
00:19:42,290 --> 00:19:45,010
than evolving over a point in time

491
00:19:45,010 --> 00:19:48,920
so react borrows that so when your data

492
00:19:48,920 --> 00:19:51,020
changes we rerender the entire component

493
00:19:51,020 --> 00:19:52,880
we throw out your old

494
00:19:52,880 --> 00:19:54,680
representation we call all your render

495
00:19:54,680 --> 00:19:56,900
methods again and we have your new

496
00:19:56,900 --> 00:20:00,800
representation set another way react

497
00:20:00,800 --> 00:20:02,360
components are just item potent

498
00:20:02,360 --> 00:20:04,130
functions that describe your UI at any

499
00:20:04,130 --> 00:20:06,110
point in time just like a server

500
00:20:06,110 --> 00:20:09,680
rendered app and because of this they're

501
00:20:09,680 --> 00:20:10,970
actually you get this nice side effect

502
00:20:10,970 --> 00:20:12,890
of being really easy to unit test you

503
00:20:12,890 --> 00:20:15,980
don't have to write code that you know

504
00:20:15,980 --> 00:20:17,810
clicks on this then clicks on that and

505
00:20:17,810 --> 00:20:20,270
then updates this and then asserting on

506
00:20:20,270 --> 00:20:23,180
the Dom because react just takes some

507
00:20:23,180 --> 00:20:25,220
inputs and provide some outputs and the

508
00:20:25,220 --> 00:20:27,920
the system handles the rest so let me

509
00:20:27,920 --> 00:20:28,850
show you what I mean here here's another

510
00:20:28,850 --> 00:20:31,250
little code sample this is a clicker

511
00:20:31,250 --> 00:20:33,290
component where basically all you do is

512
00:20:33,290 --> 00:20:35,450
when you click this link it increments a

513
00:20:35,450 --> 00:20:38,450
count and displays the count so the

514
00:20:38,450 --> 00:20:40,880
first thing that you you want to keep in

515
00:20:40,880 --> 00:20:43,190
mind is that nowhere do we search for

516
00:20:43,190 --> 00:20:45,950
this Dom node and rewrite the count

517
00:20:45,950 --> 00:20:48,200
we declaratively say hey this render

518
00:20:48,200 --> 00:20:49,460
method says what this component should

519
00:20:49,460 --> 00:20:52,220
look like and it doesn't say here's the

520
00:20:52,220 --> 00:20:53,540
initial state and here's how to update

521
00:20:53,540 --> 00:20:55,190
that state it's just render is called

522
00:20:55,190 --> 00:20:58,040
whenever the data changes and we said

523
00:20:58,040 --> 00:21:00,830
that that mutable state is is the root

524
00:21:00,830 --> 00:21:02,600
of all evil or data changing over time

525
00:21:02,600 --> 00:21:05,090
is the root of all evil but we do need

526
00:21:05,090 --> 00:21:06,650
mutable state in our applications

527
00:21:06,650 --> 00:21:08,810
what react does is it isolates it as

528
00:21:08,810 --> 00:21:10,670
much as possible so you can see right

529
00:21:10,670 --> 00:21:12,830
here the only piece of mutable state we

530
00:21:12,830 --> 00:21:14,900
have is this thing called count and the

531
00:21:14,900 --> 00:21:16,940
initial value is zero very simple to

532
00:21:16,940 --> 00:21:18,470
read and we've we kind of highlight it

533
00:21:18,470 --> 00:21:19,850
in the way that we've designed the

534
00:21:19,850 --> 00:21:22,940
framework then another important thing

535
00:21:22,940 --> 00:21:24,320
to know is not only what is the the

536
00:21:24,320 --> 00:21:26,030
minimal representation of the state but

537
00:21:26,030 --> 00:21:28,490
how does that state transition over time

538
00:21:28,490 --> 00:21:30,740
and so all you do is search for the word

539
00:21:30,740 --> 00:21:33,110
set state and you know all of the places

540
00:21:33,110 --> 00:21:35,990
where your state will transition we make

541
00:21:35,990 --> 00:21:39,200
this very very explicit so when you go

542
00:21:39,200 --> 00:21:40,820
in and reread your code and try to find

543
00:21:40,820 --> 00:21:43,340
a bug it's very clear all the places

544
00:21:43,340 --> 00:21:46,910
that you need to look and so by

545
00:21:46,910 --> 00:21:48,560
rendering you know every time the data

546
00:21:48,560 --> 00:21:50,360
changes it's very simple you don't have

547
00:21:50,360 --> 00:21:51,920
to track down every single place where

548
00:21:51,920 --> 00:21:54,050
that count is rendered it's always

549
00:21:54,050 --> 00:21:56,960
guaranteed to be up-to-date and we do it

550
00:21:56,960 --> 00:21:58,760
without setting up magical data binding

551
00:21:58,760 --> 00:22:00,950
so nowhere did we set up a computed

552
00:22:00,950 --> 00:22:02,990
property nowhere did we you know

553
00:22:02,990 --> 00:22:05,330
register things for change tracking or

554
00:22:05,330 --> 00:22:06,140
set

555
00:22:06,140 --> 00:22:08,750
some sort of data binding we do it

556
00:22:08,750 --> 00:22:10,760
without expensive model dirty checking

557
00:22:10,760 --> 00:22:13,700
with just re-rendering and of course no

558
00:22:13,700 --> 00:22:16,610
more explicit Dom operations everything

559
00:22:16,610 --> 00:22:23,310
is declarative everything is declarative

560
00:22:23,320 --> 00:22:25,870
it seems like a pretty bad idea right

561
00:22:25,870 --> 00:22:29,690
because it seems really expensive to be

562
00:22:29,690 --> 00:22:31,100
calling these render methods over and

563
00:22:31,100 --> 00:22:34,070
over and if we destroy the Dom every

564
00:22:34,070 --> 00:22:35,809
time the data changes if you're in the

565
00:22:35,809 --> 00:22:38,030
middle of typing a comment your text is

566
00:22:38,030 --> 00:22:40,490
going to be the lost or your scroll

567
00:22:40,490 --> 00:22:42,470
position will be lost or you're going to

568
00:22:42,470 --> 00:22:44,540
get that flash of unstyled content every

569
00:22:44,540 --> 00:22:46,730
time the data changes and it's just

570
00:22:46,730 --> 00:22:50,120
going to be really not performant so we

571
00:22:50,120 --> 00:22:52,880
can't do this to the real browser Dom we

572
00:22:52,880 --> 00:22:55,850
can't be rerender so what we did is we

573
00:22:55,850 --> 00:22:58,429
built a virtual Dom which makes rerender

574
00:22:58,429 --> 00:23:02,320
on every change really really fast I

575
00:23:02,320 --> 00:23:04,640
talked about a lot of reasons why we

576
00:23:04,640 --> 00:23:06,350
can't just do this rear end during but

577
00:23:06,350 --> 00:23:08,690
we can rerender to the virtual DOM and

578
00:23:08,690 --> 00:23:10,850
it's optimized for memory footprint and

579
00:23:10,850 --> 00:23:13,070
and just high performance so I'm going

580
00:23:13,070 --> 00:23:15,200
to talk to you a little bit about what

581
00:23:15,200 --> 00:23:17,059
happens behind the scenes when we do

582
00:23:17,059 --> 00:23:21,350
that update so on every update we

583
00:23:21,350 --> 00:23:24,260
generate a new virtual dom subtree this

584
00:23:24,260 --> 00:23:26,720
basically means that we call that render

585
00:23:26,720 --> 00:23:28,760
method again and we take the the return

586
00:23:28,760 --> 00:23:32,059
result or the return value then we take

587
00:23:32,059 --> 00:23:34,250
the old return value and we dip it with

588
00:23:34,250 --> 00:23:37,610
the new return value by doing that we

589
00:23:37,610 --> 00:23:39,080
can compute the minimal set of Dom

590
00:23:39,080 --> 00:23:41,809
operations needed to bring the UI

591
00:23:41,809 --> 00:23:43,970
up-to-date and then we put those into a

592
00:23:43,970 --> 00:23:47,000
queue and then when the time is right we

593
00:23:47,000 --> 00:23:49,160
batch execute all of that the operations

594
00:23:49,160 --> 00:23:53,299
in the queue at once there's any game

595
00:23:53,299 --> 00:23:55,400
developers in the audience you will

596
00:23:55,400 --> 00:23:57,049
understand that this is a lot like a

597
00:23:57,049 --> 00:23:59,570
game engine so there's a great series of

598
00:23:59,570 --> 00:24:02,480
blog posts online about how the doom 3

599
00:24:02,480 --> 00:24:05,679
engine works so at a very high level

600
00:24:05,679 --> 00:24:07,640
you've got something called a world

601
00:24:07,640 --> 00:24:09,590
state which is basically a series of of

602
00:24:09,590 --> 00:24:13,580
user input events and the current state

603
00:24:13,580 --> 00:24:15,500
of the world that gets dumped into the

604
00:24:15,500 --> 00:24:17,870
game logic or the front end of doom 3

605
00:24:17,870 --> 00:24:19,789
which basically says here are the

606
00:24:19,789 --> 00:24:21,289
rulz here's how people move around in

607
00:24:21,289 --> 00:24:23,450
the environment here's how doors work

608
00:24:23,450 --> 00:24:25,460
here's the set of weapons you can use

609
00:24:25,460 --> 00:24:27,470
then that generates something called a

610
00:24:27,470 --> 00:24:30,169
scene intermediate representation which

611
00:24:30,169 --> 00:24:31,970
is a description of what the user should

612
00:24:31,970 --> 00:24:34,700
see so the user should see you know this

613
00:24:34,700 --> 00:24:37,609
enemy at this XYZ coordinate at this

614
00:24:37,609 --> 00:24:39,710
point in the map and the door should be

615
00:24:39,710 --> 00:24:43,639
50% of the way open then that goes to

616
00:24:43,639 --> 00:24:45,139
the back end of the rendering engine

617
00:24:45,139 --> 00:24:47,179
which generates opengl operations and

618
00:24:47,179 --> 00:24:50,419
flushes those to the graphics card make

619
00:24:50,419 --> 00:24:51,849
sense

620
00:24:51,849 --> 00:24:55,989
here's reacts architecture we have

621
00:24:55,989 --> 00:24:58,249
application state and browser events so

622
00:24:58,249 --> 00:25:00,169
that get initial state method and then

623
00:25:00,169 --> 00:25:01,909
we have events coming in from the

624
00:25:01,909 --> 00:25:04,070
browser you know clicks or key presses

625
00:25:04,070 --> 00:25:06,830
or whatever then rather than game logic

626
00:25:06,830 --> 00:25:10,879
and you know 3d levels we have your

627
00:25:10,879 --> 00:25:12,169
react components that you've described

628
00:25:12,169 --> 00:25:13,489
that's the business logic of your

629
00:25:13,489 --> 00:25:16,729
application that renders to this virtual

630
00:25:16,729 --> 00:25:19,820
Dom then we do that diff on the back end

631
00:25:19,820 --> 00:25:21,320
and we compute the minimal set of Dom

632
00:25:21,320 --> 00:25:23,419
operations and then we flush that at the

633
00:25:23,419 --> 00:25:25,549
appropriate time to the browser rather

634
00:25:25,549 --> 00:25:27,889
than OpenGL operations to a graphics

635
00:25:27,889 --> 00:25:32,539
card and this is actually really fast

636
00:25:32,539 --> 00:25:35,090
and one of the reasons this is really

637
00:25:35,090 --> 00:25:37,099
fast is because JavaScript is extremely

638
00:25:37,099 --> 00:25:39,679
performant relative to the Dom so every

639
00:25:39,679 --> 00:25:41,960
time you touch the Dom with a few

640
00:25:41,960 --> 00:25:44,389
exceptions um you're paying you know a

641
00:25:44,389 --> 00:25:46,429
pretty heavy price so if you add a Dom

642
00:25:46,429 --> 00:25:48,499
node you have to recap the style and

643
00:25:48,499 --> 00:25:52,099
that can cause cascading changes so the

644
00:25:52,099 --> 00:25:53,809
fact that react computes minimal Dom

645
00:25:53,809 --> 00:25:56,720
operations really saves you a lot of

646
00:25:56,720 --> 00:26:00,259
performance now keep in mind that react

647
00:26:00,259 --> 00:26:02,419
is not magic and not a silver bullet

648
00:26:02,419 --> 00:26:05,210
here so react will not suddenly make

649
00:26:05,210 --> 00:26:07,570
fundamentally slow operations faster

650
00:26:07,570 --> 00:26:10,070
this is kind of equivalent to you know

651
00:26:10,070 --> 00:26:12,559
you can always beat a C compiler if you

652
00:26:12,559 --> 00:26:14,809
write an assembler but the fact is is

653
00:26:14,809 --> 00:26:16,729
that you can write code with react and

654
00:26:16,729 --> 00:26:17,779
out of the box it'll be pretty

655
00:26:17,779 --> 00:26:20,840
performant and one of the real

656
00:26:20,840 --> 00:26:22,999
advantages here is that we batch read

657
00:26:22,999 --> 00:26:24,619
and writes for optimal Dom performance

658
00:26:24,619 --> 00:26:27,470
so if you're doing manual Dom operations

659
00:26:27,470 --> 00:26:29,840
to really squeeze that last ounce of

660
00:26:29,840 --> 00:26:32,809
performance out of the Dom it's very

661
00:26:32,809 --> 00:26:33,620
hard to do that at

662
00:26:33,620 --> 00:26:37,070
scale and by scale I mean for a big

663
00:26:37,070 --> 00:26:38,360
application worked on with lots of

664
00:26:38,360 --> 00:26:40,460
people and the reason for that is that

665
00:26:40,460 --> 00:26:41,690
there's a phenomenon called layout

666
00:26:41,690 --> 00:26:45,820
thrashing so I'm not sure if this is

667
00:26:45,820 --> 00:26:47,690
there's there's a couple great blog

668
00:26:47,690 --> 00:26:50,000
posts about this but basically when you

669
00:26:50,000 --> 00:26:51,500
write to the DOM and then you read

670
00:26:51,500 --> 00:26:53,059
certain properties off of the Dom so you

671
00:26:53,059 --> 00:26:54,950
measure the height of something that

672
00:26:54,950 --> 00:26:57,650
forces the browser to basically update

673
00:26:57,650 --> 00:26:59,270
the Dom compute where all of the

674
00:26:59,270 --> 00:27:01,340
rectangles are and then return the

675
00:27:01,340 --> 00:27:03,050
measurements for you and then if you

676
00:27:03,050 --> 00:27:05,300
write to the Dom again it may trigger an

677
00:27:05,300 --> 00:27:08,150
additional layout Frash so if you're

678
00:27:08,150 --> 00:27:09,740
doing manual Dom operations it's very

679
00:27:09,740 --> 00:27:11,840
hard for you to basically enforce that

680
00:27:11,840 --> 00:27:13,130
hey we should do all of our reads

681
00:27:13,130 --> 00:27:14,840
together globally and then we should do

682
00:27:14,840 --> 00:27:16,370
all of our Dom rights together globally

683
00:27:16,370 --> 00:27:18,710
and we should not fresh but what react

684
00:27:18,710 --> 00:27:21,050
does is since react operates only on a

685
00:27:21,050 --> 00:27:22,820
virtual Dom it can manage those reads

686
00:27:22,820 --> 00:27:24,860
and writes for you so it's basically

687
00:27:24,860 --> 00:27:26,840
optimizes globally for your application

688
00:27:26,840 --> 00:27:28,490
all of your reads and writes and batches

689
00:27:28,490 --> 00:27:31,970
them together and because of this we

690
00:27:31,970 --> 00:27:35,200
usually be manual Dom operations and

691
00:27:35,200 --> 00:27:37,010
there's some other cool performance

692
00:27:37,010 --> 00:27:38,870
tricks in there as well so if you're

693
00:27:38,870 --> 00:27:40,760
familiar with a technique called event

694
00:27:40,760 --> 00:27:43,130
delegation it's a way to manage memory

695
00:27:43,130 --> 00:27:45,710
of event listeners so imagine you have a

696
00:27:45,710 --> 00:27:48,830
big data table with a button on each on

697
00:27:48,830 --> 00:27:52,880
each line the naive way to listen to a

698
00:27:52,880 --> 00:27:54,290
quick event on those buttons is to add

699
00:27:54,290 --> 00:27:55,750
an event listener for every button

700
00:27:55,750 --> 00:27:58,010
however you have to pay a little bit of

701
00:27:58,010 --> 00:27:59,809
a memory penalty for each event listener

702
00:27:59,809 --> 00:28:01,850
you add so the high performance way to

703
00:28:01,850 --> 00:28:03,679
do it is to add a single click listener

704
00:28:03,679 --> 00:28:05,660
on the whole table and then when that

705
00:28:05,660 --> 00:28:07,700
gets a click event look at the event

706
00:28:07,700 --> 00:28:09,140
target and figure out which button was

707
00:28:09,140 --> 00:28:11,960
clicked with react we have a full

708
00:28:11,960 --> 00:28:14,600
virtual DOM and a full virtual event

709
00:28:14,600 --> 00:28:16,580
system so we implemented bubbling and

710
00:28:16,580 --> 00:28:18,380
capturing ourselves in JavaScript you

711
00:28:18,380 --> 00:28:21,500
can go see it on github and we do this

712
00:28:21,500 --> 00:28:23,570
top-level event delegation for free and

713
00:28:23,570 --> 00:28:26,390
because we have our own implementation

714
00:28:26,390 --> 00:28:30,250
of events you actually get full w3c spec

715
00:28:30,250 --> 00:28:33,740
html5 events as far back as IE 8 which

716
00:28:33,740 --> 00:28:37,950
is pretty cool so

717
00:28:37,950 --> 00:28:39,870
let's say that react react is pretty

718
00:28:39,870 --> 00:28:42,120
fast for most applications but sometimes

719
00:28:42,120 --> 00:28:43,860
you really need to squeeze that last

720
00:28:43,860 --> 00:28:46,170
ounce of performance out so we have some

721
00:28:46,170 --> 00:28:48,390
hooks for custom updates where you can

722
00:28:48,390 --> 00:28:51,150
tell react hey this part of my

723
00:28:51,150 --> 00:28:52,380
application is going to be largely

724
00:28:52,380 --> 00:28:53,580
static so don't even worry about

725
00:28:53,580 --> 00:28:56,490
managing it normally for most

726
00:28:56,490 --> 00:28:58,340
applications we don't need to use this

727
00:28:58,340 --> 00:29:01,710
but if you do it's usually these methods

728
00:29:01,710 --> 00:29:03,150
are usually about one line of code and

729
00:29:03,150 --> 00:29:04,650
they can get you know a 10 times speed

730
00:29:04,650 --> 00:29:06,630
up depending on on what kind of

731
00:29:06,630 --> 00:29:10,710
application you're doing but at the end

732
00:29:10,710 --> 00:29:12,570
of the day we really really value

733
00:29:12,570 --> 00:29:14,010
performance and we look at performance

734
00:29:14,010 --> 00:29:16,140
in terms of dropped frames so you can do

735
00:29:16,140 --> 00:29:19,590
all of this at 60 frames per second even

736
00:29:19,590 --> 00:29:22,080
on a mobile device and for us you know

737
00:29:22,080 --> 00:29:24,390
Mobile is is really where a lot of the

738
00:29:24,390 --> 00:29:26,010
growth is these days and so if it

739
00:29:26,010 --> 00:29:28,800
doesn't work on mobile then you know

740
00:29:28,800 --> 00:29:31,710
it's not worth doing so I'm going to

741
00:29:31,710 --> 00:29:34,170
show you a little video demonstrating

742
00:29:34,170 --> 00:29:36,420
reacts performance on this example is

743
00:29:36,420 --> 00:29:39,870
also on github what I'm going to show

744
00:29:39,870 --> 00:29:43,650
you is react doing this virtual Dom diff

745
00:29:43,650 --> 00:29:45,480
and rendering and flushing every single

746
00:29:45,480 --> 00:29:47,820
requestanimationframe which means that

747
00:29:47,820 --> 00:29:49,530
realistically it has to execute in under

748
00:29:49,530 --> 00:29:52,050
10 milliseconds I want to point out that

749
00:29:52,050 --> 00:29:54,390
there's not a single CSS animation or

750
00:29:54,390 --> 00:29:56,280
transition in this and there's no

751
00:29:56,280 --> 00:29:58,590
overflow scrolling so what react is

752
00:29:58,590 --> 00:30:00,120
doing is there's a great library called

753
00:30:00,120 --> 00:30:01,800
Zynga scroller which can interpret touch

754
00:30:01,800 --> 00:30:03,570
events and then give you the scroll

755
00:30:03,570 --> 00:30:06,180
position and what react is doing is

756
00:30:06,180 --> 00:30:08,670
taking that scroll position updating a

757
00:30:08,670 --> 00:30:10,290
state variable and then doing that

758
00:30:10,290 --> 00:30:13,820
virtual Dom diff and rendering so I

759
00:30:13,820 --> 00:30:16,050
don't really use PowerPoint that much

760
00:30:16,050 --> 00:30:22,140
but I hope it works so this is a left

761
00:30:22,140 --> 00:30:25,380
nav remember there's no CSS animations

762
00:30:25,380 --> 00:30:29,280
we're actually animating two content

763
00:30:29,280 --> 00:30:31,140
areas one that's that's blurred and one

764
00:30:31,140 --> 00:30:32,730
that is not blurred to simulate a

765
00:30:32,730 --> 00:30:36,510
frosted glass overlay effect and we're

766
00:30:36,510 --> 00:30:38,490
doing um kind of some 3d transforms

767
00:30:38,490 --> 00:30:40,230
there but we're writing it all in a very

768
00:30:40,230 --> 00:30:42,570
declarative style so it's not like oh

769
00:30:42,570 --> 00:30:44,250
this interaction needs to be

770
00:30:44,250 --> 00:30:46,620
high-performance so we can't use you

771
00:30:46,620 --> 00:30:48,720
know our reactive data flow the point is

772
00:30:48,720 --> 00:30:50,580
that while you can do this in any

773
00:30:50,580 --> 00:30:51,600
library you usually have

774
00:30:51,600 --> 00:30:53,820
step outside of the the reactive flow or

775
00:30:53,820 --> 00:30:55,470
the data binding system but with react

776
00:30:55,470 --> 00:30:57,450
this is the level of performance we

777
00:30:57,450 --> 00:31:00,419
really strive for and it makes you know

778
00:31:00,419 --> 00:31:01,890
creating these sorts of applications a

779
00:31:01,890 --> 00:31:04,260
lot easier because it's declare writing

780
00:31:04,260 --> 00:31:07,410
your code in a declarative style is just

781
00:31:07,410 --> 00:31:10,169
really nice so there's some other fun

782
00:31:10,169 --> 00:31:13,320
things that we can do we can run in

783
00:31:13,320 --> 00:31:16,260
node.js and this is actually really

784
00:31:16,260 --> 00:31:19,289
really interesting I think so I think

785
00:31:19,289 --> 00:31:20,789
that the the term that people are using

786
00:31:20,789 --> 00:31:23,280
now is called them isomorphic JavaScript

787
00:31:23,280 --> 00:31:25,950
but basically there's a little bit of a

788
00:31:25,950 --> 00:31:27,270
problem when you do a lot of client

789
00:31:27,270 --> 00:31:29,940
rendered you is that when Google hits

790
00:31:29,940 --> 00:31:31,320
your page it doesn't really see any

791
00:31:31,320 --> 00:31:33,780
content it just sees a mostly empty HTML

792
00:31:33,780 --> 00:31:37,159
page with some script tags in it and

793
00:31:37,159 --> 00:31:39,330
then it ranks you really lowing it on

794
00:31:39,330 --> 00:31:41,700
the search results so what a lot of

795
00:31:41,700 --> 00:31:43,289
people are doing these days is basically

796
00:31:43,289 --> 00:31:45,030
if they see Googlebot they'll render

797
00:31:45,030 --> 00:31:46,980
their page in something like phantom j/s

798
00:31:46,980 --> 00:31:48,990
which is a headless version of WebKit

799
00:31:48,990 --> 00:31:52,440
and then they'll send down an HTML

800
00:31:52,440 --> 00:31:55,590
document just to Google the problem is

801
00:31:55,590 --> 00:31:58,080
you can't do that at scale it costs a

802
00:31:58,080 --> 00:32:00,299
lot it's just booting up a Dom for every

803
00:32:00,299 --> 00:32:03,690
web request is really expensive and you

804
00:32:03,690 --> 00:32:07,260
also kind of can't benefit from from

805
00:32:07,260 --> 00:32:09,299
giving that same experience to your end

806
00:32:09,299 --> 00:32:12,510
users so if you were to send down a

807
00:32:12,510 --> 00:32:15,000
static HTML page to your end users they

808
00:32:15,000 --> 00:32:16,289
could start interacting with your page

809
00:32:16,289 --> 00:32:18,330
immediately and then when the JavaScript

810
00:32:18,330 --> 00:32:20,429
boots up it would respond to

811
00:32:20,429 --> 00:32:22,440
interactions and that's what what react

812
00:32:22,440 --> 00:32:24,510
can do so react can generate a static

813
00:32:24,510 --> 00:32:27,200
HTML file send it down to the client and

814
00:32:27,200 --> 00:32:29,610
then when you call that render component

815
00:32:29,610 --> 00:32:31,440
method it'll look at the mark or a

816
00:32:31,440 --> 00:32:33,659
little look at the Dom and say hey it

817
00:32:33,659 --> 00:32:35,070
looks like I rendered this on the server

818
00:32:35,070 --> 00:32:37,200
I don't need to generate any Dom nodes I

819
00:32:37,200 --> 00:32:38,669
just need to attach my event listeners

820
00:32:38,669 --> 00:32:41,010
and get started so you get a really fast

821
00:32:41,010 --> 00:32:43,110
initial page pagelet experience which is

822
00:32:43,110 --> 00:32:46,260
great we can do some other cool things

823
00:32:46,260 --> 00:32:48,450
too so since you're not rendering to a

824
00:32:48,450 --> 00:32:50,159
Dom you're rendering to a virtual Dom

825
00:32:50,159 --> 00:32:52,559
and the things that you're rendering our

826
00:32:52,559 --> 00:32:54,809
components that represent the language

827
00:32:54,809 --> 00:32:57,179
of your application we can do some

828
00:32:57,179 --> 00:32:58,620
optimizations based on how your

829
00:32:58,620 --> 00:33:01,320
component structure is changing so for

830
00:33:01,320 --> 00:33:03,390
example if you click on a button that

831
00:33:03,390 --> 00:33:04,920
navigates you from say

832
00:33:04,920 --> 00:33:07,110
your timeline or newsfeed sorry from

833
00:33:07,110 --> 00:33:10,080
your newsfeed to your profile page we

834
00:33:10,080 --> 00:33:12,000
can say look and say hey a high-level

835
00:33:12,000 --> 00:33:14,100
component type is changing we should

836
00:33:14,100 --> 00:33:16,230
probably use a certain strategy for

837
00:33:16,230 --> 00:33:18,930
clearing out a large subtree of dom and

838
00:33:18,930 --> 00:33:22,380
replace it with this other other one and

839
00:33:22,380 --> 00:33:24,240
we get that rich information because

840
00:33:24,240 --> 00:33:25,500
you're building with components not

841
00:33:25,500 --> 00:33:27,030
building with templates that are tied to

842
00:33:27,030 --> 00:33:30,660
the Dom I mentioned this before when we

843
00:33:30,660 --> 00:33:32,130
were talking about modular components

844
00:33:32,130 --> 00:33:35,610
but you get testability for free what I

845
00:33:35,610 --> 00:33:38,070
mean by this is since we don't depend on

846
00:33:38,070 --> 00:33:40,740
the Dom you can simply fire up a react

847
00:33:40,740 --> 00:33:42,420
component and render it to a string with

848
00:33:42,420 --> 00:33:44,580
a certain set of properties and then you

849
00:33:44,580 --> 00:33:46,890
know write your assertions on that you

850
00:33:46,890 --> 00:33:48,870
don't have to do like a selenium or

851
00:33:48,870 --> 00:33:52,380
webdriver kind of setup to get that that

852
00:33:52,380 --> 00:33:54,510
rich testing because again we're very

853
00:33:54,510 --> 00:33:58,290
very divorced from the browser my

854
00:33:58,290 --> 00:33:59,730
colleague Sebastian who's sitting over

855
00:33:59,730 --> 00:34:01,320
there did some great work with building

856
00:34:01,320 --> 00:34:04,620
SVG vml and canvas support for react as

857
00:34:04,620 --> 00:34:08,190
well so like I said we render to a

858
00:34:08,190 --> 00:34:10,350
virtual Dom not a browser Dom so we can

859
00:34:10,350 --> 00:34:11,970
have a new virtual Dom implementation

860
00:34:11,970 --> 00:34:14,220
that represents the canvas rather than

861
00:34:14,220 --> 00:34:16,620
the Dom primitives so you can use react

862
00:34:16,620 --> 00:34:18,750
to build not only the rich interactive

863
00:34:18,750 --> 00:34:20,610
UI of your web app but also drive the

864
00:34:20,610 --> 00:34:23,040
same interactive charts or graphics that

865
00:34:23,040 --> 00:34:25,020
you know maybe you're in newspaper and

866
00:34:25,020 --> 00:34:26,730
you want to do a visual data

867
00:34:26,730 --> 00:34:30,270
visualization or something just one

868
00:34:30,270 --> 00:34:32,669
paradigm works works on multiple ways to

869
00:34:32,669 --> 00:34:35,910
render and I have an experimental branch

870
00:34:35,910 --> 00:34:37,410
that runs your whole application in a

871
00:34:37,410 --> 00:34:40,560
web worker again virtual DOM and virtual

872
00:34:40,560 --> 00:34:42,270
event system means that we can swap out

873
00:34:42,270 --> 00:34:44,460
all of this stuff and run it in an alien

874
00:34:44,460 --> 00:34:45,990
environment so this this branch was

875
00:34:45,990 --> 00:34:48,179
about a hundred lines of code and all

876
00:34:48,179 --> 00:34:50,070
that we had to do was basically

877
00:34:50,070 --> 00:34:52,320
serialize the browser events from the UI

878
00:34:52,320 --> 00:34:55,260
thread to the web worker and then send

879
00:34:55,260 --> 00:34:58,860
the Dom operations from the description

880
00:34:58,860 --> 00:35:00,120
of the Dom operations from the web

881
00:35:00,120 --> 00:35:03,270
worker to the UI thread and then update

882
00:35:03,270 --> 00:35:07,290
my in the UI thread now I'm not sure if

883
00:35:07,290 --> 00:35:09,300
this is a good idea but it's interesting

884
00:35:09,300 --> 00:35:12,210
anyway and it has the promise of maybe

885
00:35:12,210 --> 00:35:13,860
you know reducing the amount of work on

886
00:35:13,860 --> 00:35:15,540
the UI thread and having more responsive

887
00:35:15,540 --> 00:35:18,030
browser interactions

888
00:35:18,030 --> 00:35:21,090
all right so let's review kind of what

889
00:35:21,090 --> 00:35:24,540
I've talked about build components not

890
00:35:24,540 --> 00:35:31,350
templates rerender don't mutate the

891
00:35:31,350 --> 00:35:35,930
virtual Dom is simple and it's fast and

892
00:35:35,930 --> 00:35:39,840
there's one other thing so we announced

893
00:35:39,840 --> 00:35:42,270
that we were open sourcing react at Jas

894
00:35:42,270 --> 00:35:45,630
comp us and this is our first time at

895
00:35:45,630 --> 00:35:47,670
Jas conf Asia so we wanted to announce

896
00:35:47,670 --> 00:35:50,790
something here too so we're going we

897
00:35:50,790 --> 00:35:52,890
basically are on the verge of open

898
00:35:52,890 --> 00:35:54,990
sourcing our react dev tools which lets

899
00:35:54,990 --> 00:35:57,080
you inspect this virtual Dom

900
00:35:57,080 --> 00:35:58,710
representation in the Chrome web

901
00:35:58,710 --> 00:36:01,890
inspector and we'll be giving demos of

902
00:36:01,890 --> 00:36:03,840
this you know after I guess after the

903
00:36:03,840 --> 00:36:07,170
talk or something just go find us so

904
00:36:07,170 --> 00:36:08,670
here are the the chrome dev tools that

905
00:36:08,670 --> 00:36:11,400
you know and love and if we zoom in on

906
00:36:11,400 --> 00:36:15,570
the bottom here you see some markup and

907
00:36:15,570 --> 00:36:18,690
it's it's a little bit unwieldy so when

908
00:36:18,690 --> 00:36:22,890
you switch to the react tab now we see

909
00:36:22,890 --> 00:36:25,500
the language of our application here so

910
00:36:25,500 --> 00:36:27,420
as a developer I can go in and say oh

911
00:36:27,420 --> 00:36:29,130
you know there's my image block layout

912
00:36:29,130 --> 00:36:32,280
or there's my story and then if I were

913
00:36:32,280 --> 00:36:34,110
to change that property on the

914
00:36:34,110 --> 00:36:36,330
right-hand side viewer has liked from

915
00:36:36,330 --> 00:36:38,520
false to true that little heart would

916
00:36:38,520 --> 00:36:41,880
show up on the on the UI indicating that

917
00:36:41,880 --> 00:36:43,530
I liked it and my name would also be

918
00:36:43,530 --> 00:36:45,420
added to the list of people that liked

919
00:36:45,420 --> 00:36:48,060
the photo because react guarantees that

920
00:36:48,060 --> 00:36:53,370
your app is consistent so that's about

921
00:36:53,370 --> 00:36:54,930
all I have to say today I really

922
00:36:54,930 --> 00:36:56,700
appreciate you guys having me and I hope

923
00:36:56,700 --> 00:37:00,650
that this was was helpful Thanks

924
00:37:00,650 --> 00:37:05,040
[Applause]

925
00:37:05,040 --> 00:37:07,030
all right so does anyone have any

926
00:37:07,030 --> 00:37:08,890
questions

927
00:37:08,890 --> 00:37:11,800
hi how does this compare to web

928
00:37:11,800 --> 00:37:16,140
components that's a great question so

929
00:37:16,140 --> 00:37:18,940
web components is a big constantly

930
00:37:18,940 --> 00:37:25,270
changing specification and it's there's

931
00:37:25,270 --> 00:37:27,640
a lot there's a lot to say about it one

932
00:37:27,640 --> 00:37:28,960
of the things that we focus on a lot is

933
00:37:28,960 --> 00:37:30,970
composability so really really deep

934
00:37:30,970 --> 00:37:32,620
building components out of other

935
00:37:32,620 --> 00:37:35,050
components and I don't think that

936
00:37:35,050 --> 00:37:36,480
historically web components has been

937
00:37:36,480 --> 00:37:39,370
focusing on that aspect and there's a

938
00:37:39,370 --> 00:37:41,130
lot of nuance there so data flow between

939
00:37:41,130 --> 00:37:43,420
you know a parent component and a child

940
00:37:43,420 --> 00:37:44,520
component

941
00:37:44,520 --> 00:37:47,530
additionally web components is a bunch

942
00:37:47,530 --> 00:37:49,900
of different technologies so shadow DOM

943
00:37:49,900 --> 00:37:51,640
is one big part of web components and

944
00:37:51,640 --> 00:37:52,990
that's a that's a really interesting

945
00:37:52,990 --> 00:37:55,060
important part of kind of pushing the

946
00:37:55,060 --> 00:37:56,350
web forward and that's something that we

947
00:37:56,350 --> 00:37:59,500
could take advantage of one kind of

948
00:37:59,500 --> 00:38:01,690
philosophical difference between web

949
00:38:01,690 --> 00:38:04,420
components and react is kind of how we

950
00:38:04,420 --> 00:38:07,870
perceive the Dom so web components fully

951
00:38:07,870 --> 00:38:10,770
embraces the DOM and adds new api's

952
00:38:10,770 --> 00:38:14,350
react kind of hates the Dom and puts it

953
00:38:14,350 --> 00:38:16,750
away in its own little corner and we

954
00:38:16,750 --> 00:38:18,610
only interact with it through message

955
00:38:18,610 --> 00:38:22,930
passing basically and one kind of

956
00:38:22,930 --> 00:38:24,130
advantage of that is that we can do

957
00:38:24,130 --> 00:38:25,660
things like render on the server and get

958
00:38:25,660 --> 00:38:27,400
a faster initial page load experience I

959
00:38:27,400 --> 00:38:28,840
don't think that web components has

960
00:38:28,840 --> 00:38:30,160
solved the problem of rendering on the

961
00:38:30,160 --> 00:38:32,410
server and basically doing a

962
00:38:32,410 --> 00:38:36,550
non-blocking like page experience is

963
00:38:36,550 --> 00:38:38,230
there any way of doing transitions

964
00:38:38,230 --> 00:38:42,790
between brenda's so like CSS animations

965
00:38:42,790 --> 00:38:45,880
yeah any kind of transition so we have a

966
00:38:45,880 --> 00:38:47,890
component called react transition group

967
00:38:47,890 --> 00:38:50,920
actually that will look at kind of how

968
00:38:50,920 --> 00:38:52,570
its children are changing so if you add

969
00:38:52,570 --> 00:38:54,850
a list item for example you can

970
00:38:54,850 --> 00:38:56,410
implement a custom transition behavior

971
00:38:56,410 --> 00:38:58,360
so the default one that we have behaves

972
00:38:58,360 --> 00:39:00,520
a lot like an animation library for

973
00:39:00,520 --> 00:39:02,680
angular called ng animate so we'll add

974
00:39:02,680 --> 00:39:04,510
CSS classes for you so it makes it kind

975
00:39:04,510 --> 00:39:07,090
of trivial to add kind of fade in

976
00:39:07,090 --> 00:39:09,550
behaviors and that kind of thing you can

977
00:39:09,550 --> 00:39:11,470
override that behavior and have

978
00:39:11,470 --> 00:39:13,150
some transitions between Dom States if

979
00:39:13,150 --> 00:39:16,510
you'd like though hi um I was wondering

980
00:39:16,510 --> 00:39:18,849
if you have non react code running on

981
00:39:18,849 --> 00:39:20,109
the page like you have a jQuery plug-in

982
00:39:20,109 --> 00:39:21,970
that goes in adds a class to a Dom

983
00:39:21,970 --> 00:39:23,590
element directly um

984
00:39:23,590 --> 00:39:26,710
and then react thing rear Enders how

985
00:39:26,710 --> 00:39:29,190
does it figure out or does it figure out

986
00:39:29,190 --> 00:39:31,690
that it should leave that class there or

987
00:39:31,690 --> 00:39:33,340
does it say oh the difference that class

988
00:39:33,340 --> 00:39:35,530
was removed um this is a great question

989
00:39:35,530 --> 00:39:38,290
so react kind of from day one had to

990
00:39:38,290 --> 00:39:40,960
interoperate with with legacy code so we

991
00:39:40,960 --> 00:39:42,550
have a set of lifecycle hooks that

992
00:39:42,550 --> 00:39:44,260
basically you know they look a little

993
00:39:44,260 --> 00:39:46,840
bit like the objective-c cocoa API so we

994
00:39:46,840 --> 00:39:48,609
have component did mount and component

995
00:39:48,609 --> 00:39:51,640
will unmount which basically tells they

996
00:39:51,640 --> 00:39:53,619
fire when the component is initialized

997
00:39:53,619 --> 00:39:54,609
on the page and there's a Dom node

998
00:39:54,609 --> 00:39:56,530
available and they fire when it's about

999
00:39:56,530 --> 00:39:59,080
to be destroyed so what you can do is in

1000
00:39:59,080 --> 00:40:02,020
you render a div for example as a react

1001
00:40:02,020 --> 00:40:03,700
component and then in component did

1002
00:40:03,700 --> 00:40:06,340
mount you boot up your jquery plugin and

1003
00:40:06,340 --> 00:40:07,450
then we have another hook that says

1004
00:40:07,450 --> 00:40:08,950
component did update which means there's

1005
00:40:08,950 --> 00:40:10,660
new data available so then you can

1006
00:40:10,660 --> 00:40:13,180
bridge from the react the new data that

1007
00:40:13,180 --> 00:40:15,490
react has gotten and tell jquery hey the

1008
00:40:15,490 --> 00:40:17,589
data has changed and then in component

1009
00:40:17,589 --> 00:40:19,330
will unmount you just destroy your your

1010
00:40:19,330 --> 00:40:22,720
new jquery plugin um maybe this seems

1011
00:40:22,720 --> 00:40:24,010
like a really obvious question but if

1012
00:40:24,010 --> 00:40:26,770
this um renders really fast on mobile

1013
00:40:26,770 --> 00:40:29,619
does that mean it's going to be find its

1014
00:40:29,619 --> 00:40:31,720
way into a new like reborn facebook

1015
00:40:31,720 --> 00:40:36,430
hybrid application um i don't work on

1016
00:40:36,430 --> 00:40:38,619
the the facebook mobile site team so i

1017
00:40:38,619 --> 00:40:42,280
don't know what their road map is it's

1018
00:40:42,280 --> 00:40:44,440
used all over Instagram calm though like

1019
00:40:44,440 --> 00:40:47,890
the web properties

1020
00:40:47,900 --> 00:40:50,180
Thank You peep go the cleanse for tea

1021
00:40:50,180 --> 00:40:51,100
please

