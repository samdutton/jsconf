1
00:00:00,320 --> 00:00:02,070

[Music]

2
00:00:02,070 --> 00:00:03,840
[Applause]

3
00:00:03,840 --> 00:00:05,660
[Music]

4
00:00:05,660 --> 00:00:07,410
[Applause]

5
00:00:07,410 --> 00:00:09,280
[Music]

6
00:00:09,280 --> 00:00:11,020
[Applause]

7
00:00:11,020 --> 00:00:12,780
[Music]

8
00:00:12,780 --> 00:00:16,860
[Applause]

9
00:00:16,870 --> 00:00:26,540
[Music]

10
00:00:26,550 --> 00:00:31,689
hello everybody would just sort of stay

11
00:00:31,689 --> 00:00:33,640
in room be out of momentum but that

12
00:00:33,640 --> 00:00:35,110
didn't happen

13
00:00:35,110 --> 00:00:37,570
hello everybody I am thrilled to be here

14
00:00:37,570 --> 00:00:39,969
I am thrilled to be back at JS comp and

15
00:00:39,969 --> 00:00:42,160
thrilled that J's conf itself is back I

16
00:00:42,160 --> 00:00:46,900
was so sad I was so sad when it had to

17
00:00:46,900 --> 00:00:48,850
shut down and I'm so glad that it is

18
00:00:48,850 --> 00:00:51,460
back but before we get started and is

19
00:00:51,460 --> 00:00:53,200
very important that the first order of

20
00:00:53,200 --> 00:00:55,210
business is that I take a crowd selfie

21
00:00:55,210 --> 00:00:58,000
because if I don't take a selfie with

22
00:00:58,000 --> 00:01:02,110
you did this even really happen all

23
00:01:02,110 --> 00:01:03,239
right

24
00:01:03,239 --> 00:01:05,470
important things out of the way I can

25
00:01:05,470 --> 00:01:10,329
just wing it from now I'm Laurie vos I

26
00:01:10,329 --> 00:01:13,479
am the the co-founder of NPM Inc my

27
00:01:13,479 --> 00:01:15,310
title is CEO but don't take that too

28
00:01:15,310 --> 00:01:16,900
seriously they had to give me a title

29
00:01:16,900 --> 00:01:18,720
and that one happened to be unoccupied

30
00:01:18,720 --> 00:01:21,310
what I am is a web developer I've been a

31
00:01:21,310 --> 00:01:23,950
web developer for 22 years now and I

32
00:01:23,950 --> 00:01:26,670
really really care about web development

33
00:01:26,670 --> 00:01:29,260
and today I'm going to be talking to you

34
00:01:29,260 --> 00:01:31,810
about what's going on in the world of

35
00:01:31,810 --> 00:01:34,030
JavaScript because NPM has a lot of

36
00:01:34,030 --> 00:01:36,220
information about what's going on in the

37
00:01:36,220 --> 00:01:38,619
world of JavaScript we have real usage

38
00:01:38,619 --> 00:01:40,090
numbers not just hype about you know

39
00:01:40,090 --> 00:01:41,950
what you should use this is what you're

40
00:01:41,950 --> 00:01:44,950
actually using and we know and we're

41
00:01:44,950 --> 00:01:46,299
gonna share it with you with the hope

42
00:01:46,299 --> 00:01:47,830
that it'll help you make technical

43
00:01:47,830 --> 00:01:49,540
decisions if you know what's really

44
00:01:49,540 --> 00:01:50,770
getting usage if you know it's really

45
00:01:50,770 --> 00:01:52,150
going up and what's really going down

46
00:01:52,150 --> 00:01:54,369
then you can plan your 20:19 and go I

47
00:01:54,369 --> 00:01:55,840
should learn that I should stop using

48
00:01:55,840 --> 00:01:59,560
that I should move on so there's three

49
00:01:59,560 --> 00:02:01,060
parts to this talk first

50
00:02:01,060 --> 00:02:02,500
there's gonna be a quick tour of stuff

51
00:02:02,500 --> 00:02:03,729
that you should know about NPM

52
00:02:03,729 --> 00:02:05,530
especially our newer features because

53
00:02:05,530 --> 00:02:07,960
not that information is not perfectly

54
00:02:07,960 --> 00:02:10,209
distributed yet and second I'm gonna

55
00:02:10,209 --> 00:02:13,720
talk about what NPM knows about you who

56
00:02:13,720 --> 00:02:15,610
you are and what kind of tools you use

57
00:02:15,610 --> 00:02:17,860
right now and finally I'm going to make

58
00:02:17,860 --> 00:02:19,989
some predictions about what tools that

59
00:02:19,989 --> 00:02:20,520
you should

60
00:02:20,520 --> 00:02:23,310
in 2019 and where javascript is going to

61
00:02:23,310 --> 00:02:25,260
go in the next couple of years so you

62
00:02:25,260 --> 00:02:26,970
should stick around because you can

63
00:02:26,970 --> 00:02:33,000
watch me be extremely wrong so the first

64
00:02:33,000 --> 00:02:34,290
thing you should know about NPM is that

65
00:02:34,290 --> 00:02:37,230
NPM is extremely popular NPM has more

66
00:02:37,230 --> 00:02:39,720
than 10 million users these days and

67
00:02:39,720 --> 00:02:41,400
they download more than 6 billion

68
00:02:41,400 --> 00:02:45,840
packages every 7 days we think about 85%

69
00:02:45,840 --> 00:02:47,760
of the people who use JavaScript for

70
00:02:47,760 --> 00:02:50,670
anything are already using NPM and it's

71
00:02:50,670 --> 00:02:52,350
gonna hit a hundred percent we don't

72
00:02:52,350 --> 00:02:55,920
think that there's any limit to that and

73
00:02:55,920 --> 00:02:57,230
that's even more amazing because

74
00:02:57,230 --> 00:02:59,250
javascript is by some measure is the

75
00:02:59,250 --> 00:03:01,290
most popular programming language in the

76
00:03:01,290 --> 00:03:03,060
world right now it is the biggest

77
00:03:03,060 --> 00:03:06,780
language on github by a long way and 70%

78
00:03:06,780 --> 00:03:08,430
of people who responded to Stack

79
00:03:08,430 --> 00:03:10,410
Overflow survey said that they use

80
00:03:10,410 --> 00:03:13,320
JavaScript which means that if you

81
00:03:13,320 --> 00:03:14,760
believe those numbers and you could do

82
00:03:14,760 --> 00:03:18,480
the math it's possible that 50% of all

83
00:03:18,480 --> 00:03:21,570
programmers in the world are using NPM

84
00:03:21,570 --> 00:03:24,270
right now regardless of what they do as

85
00:03:24,270 --> 00:03:27,480
a programmer the next thing to know

86
00:03:27,480 --> 00:03:29,220
about NPM is that NPM is being used

87
00:03:29,220 --> 00:03:31,140
everywhere javascript is being used and

88
00:03:31,140 --> 00:03:33,780
javascript is being used everywhere

89
00:03:33,780 --> 00:03:35,550
people are building websites in it

90
00:03:35,550 --> 00:03:36,930
obviously but they're also building

91
00:03:36,930 --> 00:03:38,550
mobile apps they're building desktop

92
00:03:38,550 --> 00:03:40,170
apps they're writing server-side code

93
00:03:40,170 --> 00:03:42,660
they're doing robotics and IOT and

94
00:03:42,660 --> 00:03:44,370
JavaScript and all of these people are

95
00:03:44,370 --> 00:03:48,120
using NPM to do it NPM has become the

96
00:03:48,120 --> 00:03:50,690
package manager for all of JavaScript

97
00:03:50,690 --> 00:03:54,320
but above all NPM is for web developers

98
00:03:54,320 --> 00:03:57,330
93% of people who use NPM say that the

99
00:03:57,330 --> 00:03:59,310
code that they write is used in a

100
00:03:59,310 --> 00:04:01,860
browser at least some of the time that

101
00:04:01,860 --> 00:04:05,460
is a huge shift for NPM NPM came to life

102
00:04:05,460 --> 00:04:08,010
thinking of itself as the node package

103
00:04:08,010 --> 00:04:10,320
manner it manager thought of itself as a

104
00:04:10,320 --> 00:04:12,210
tool for server-side JavaScript and

105
00:04:12,210 --> 00:04:14,280
that's no longer true it is primarily a

106
00:04:14,280 --> 00:04:16,020
tool that people use to put websites

107
00:04:16,020 --> 00:04:22,410
together and in fact 97% of the code in

108
00:04:22,410 --> 00:04:24,360
a modern web app is downloaded from NPM

109
00:04:24,360 --> 00:04:26,850
you as the application developer are

110
00:04:26,850 --> 00:04:29,220
responsible only for the last 3% all of

111
00:04:29,220 --> 00:04:30,390
the interesting parts of your

112
00:04:30,390 --> 00:04:32,190
application the parts that you write are

113
00:04:32,190 --> 00:04:33,780
only three percent of the total

114
00:04:33,780 --> 00:04:35,520
code base in a modern rich web

115
00:04:35,520 --> 00:04:39,360
application the current version of NPM

116
00:04:39,360 --> 00:04:41,070
is NPM six which means that if you are

117
00:04:41,070 --> 00:04:43,260
using NPM three or NPM four which

118
00:04:43,260 --> 00:04:45,300
something like 40% of you are then you

119
00:04:45,300 --> 00:04:47,490
are woefully behind the times and it is

120
00:04:47,490 --> 00:04:52,590
time to upgrade and PM six is twenty

121
00:04:52,590 --> 00:04:54,750
times faster than NPM four was so that

122
00:04:54,750 --> 00:04:56,280
by itself should be enough reason for

123
00:04:56,280 --> 00:04:59,460
you to upgrade and because I said that

124
00:04:59,460 --> 00:05:01,080
NPM is faster now somebody is going to

125
00:05:01,080 --> 00:05:04,500
ask is it faster than yarn the answer is

126
00:05:04,500 --> 00:05:06,960
yes it is faster than yarn or more

127
00:05:06,960 --> 00:05:09,090
accurately all of the package managers

128
00:05:09,090 --> 00:05:11,520
are about the same speed now because

129
00:05:11,520 --> 00:05:13,080
open-source worked the way that

130
00:05:13,080 --> 00:05:15,060
open-source is supposed to work and the

131
00:05:15,060 --> 00:05:17,490
makers of yarn and NPM and P NPM and all

132
00:05:17,490 --> 00:05:19,080
of the other JavaScript package managers

133
00:05:19,080 --> 00:05:21,060
got together and started talking to each

134
00:05:21,060 --> 00:05:22,560
other and sharing code and sharing

135
00:05:22,560 --> 00:05:24,630
expertise and all of the package

136
00:05:24,630 --> 00:05:26,340
managers got a lot faster in the last

137
00:05:26,340 --> 00:05:28,680
two years but as a result they're now

138
00:05:28,680 --> 00:05:30,840
all roughly the same speed because all

139
00:05:30,840 --> 00:05:32,460
of the low-hanging fruit has been taken

140
00:05:32,460 --> 00:05:36,810
away part of how this speed came about

141
00:05:36,810 --> 00:05:39,840
in NPM six is one of the biggest changes

142
00:05:39,840 --> 00:05:42,660
in NPM recently which is that NPM five

143
00:05:42,660 --> 00:05:44,970
and six they lock by default whenever

144
00:05:44,970 --> 00:05:47,340
you install a package lock JSON is

145
00:05:47,340 --> 00:05:50,250
created which means that the packages

146
00:05:50,250 --> 00:05:51,570
that you are using in development are

147
00:05:51,570 --> 00:05:53,580
exactly the same packages that turn upon

148
00:05:53,580 --> 00:05:55,110
production this was yarns biggest

149
00:05:55,110 --> 00:05:57,720
innovation and it became absolutely

150
00:05:57,720 --> 00:05:59,430
essential because of the number of

151
00:05:59,430 --> 00:06:01,050
modules involved the average web

152
00:06:01,050 --> 00:06:04,050
application uses a thousand modules you

153
00:06:04,050 --> 00:06:05,880
need a package lock in that situation

154
00:06:05,880 --> 00:06:07,500
and yarn was correct to notice that and

155
00:06:07,500 --> 00:06:09,510
so we followed their we followed their

156
00:06:09,510 --> 00:06:13,410
example and it was a good idea and pm6

157
00:06:13,410 --> 00:06:16,140
also introduces NPM CI this is an

158
00:06:16,140 --> 00:06:18,150
alternative way of calling NPM for use

159
00:06:18,150 --> 00:06:19,950
in continuous integration environments

160
00:06:19,950 --> 00:06:21,510
and continuous integration environments

161
00:06:21,510 --> 00:06:24,810
there are certain constraints that are

162
00:06:24,810 --> 00:06:26,190
released we know that there's not going

163
00:06:26,190 --> 00:06:27,510
to be a node modules folder we know a

164
00:06:27,510 --> 00:06:28,890
couple other things because it's running

165
00:06:28,890 --> 00:06:30,870
in CI and that means that we can run npm

166
00:06:30,870 --> 00:06:32,700
install in a mode that is twice as fast

167
00:06:32,700 --> 00:06:35,669
as an ordinary install and loses nothing

168
00:06:35,669 --> 00:06:38,010
so if you're using NPM install in your

169
00:06:38,010 --> 00:06:39,419
continuous integration you can just

170
00:06:39,419 --> 00:06:41,909
introduce NPM CI and your builds will

171
00:06:41,909 --> 00:06:43,440
suddenly be twice as fast as they were

172
00:06:43,440 --> 00:06:44,840
before

173
00:06:44,840 --> 00:06:48,480
as NPM has got bigger security has

174
00:06:48,480 --> 00:06:50,040
become an even bigger concern for us

175
00:06:50,040 --> 00:06:51,390
earlier this year

176
00:06:51,390 --> 00:06:53,640
NPM acquired lift security that was new

177
00:06:53,640 --> 00:06:56,940
we've never acquired anybody before and

178
00:06:56,940 --> 00:06:58,320
the first thing that we did was take

179
00:06:58,320 --> 00:06:59,940
their node security platform and

180
00:06:59,940 --> 00:07:02,820
integrated into NPM itself that resulted

181
00:07:02,820 --> 00:07:04,380
in a bunch of new features the first of

182
00:07:04,380 --> 00:07:07,290
which was two-factor off to factor auth

183
00:07:07,290 --> 00:07:08,640
is important for everyone but it's

184
00:07:08,640 --> 00:07:10,200
especially important if you publish

185
00:07:10,200 --> 00:07:12,180
packages if you're a package author you

186
00:07:12,180 --> 00:07:13,800
should be using two-factor off to make

187
00:07:13,800 --> 00:07:15,600
sure that nobody can publish your

188
00:07:15,600 --> 00:07:19,920
packages as you in May we also launched

189
00:07:19,920 --> 00:07:23,070
NPM quick audits you've probably already

190
00:07:23,070 --> 00:07:24,690
seen them if you're running NPM because

191
00:07:24,690 --> 00:07:26,190
they happen every time you install now

192
00:07:26,190 --> 00:07:28,470
you get notices if any of the packages

193
00:07:28,470 --> 00:07:30,300
that you are installing have any known

194
00:07:30,300 --> 00:07:33,390
vulnerabilities this works in nearly

195
00:07:33,390 --> 00:07:34,890
every version of NPM but if you're using

196
00:07:34,890 --> 00:07:38,160
NPM 6 the warnings are more detailed and

197
00:07:38,160 --> 00:07:39,420
the information that you get out of them

198
00:07:39,420 --> 00:07:43,350
is better we do about three and a half

199
00:07:43,350 --> 00:07:45,000
of these quick audits every week and the

200
00:07:45,000 --> 00:07:46,230
stats that we're getting from these

201
00:07:46,230 --> 00:07:48,200
quick audits are a little bit alarming

202
00:07:48,200 --> 00:07:50,460
something like 11 percent of the

203
00:07:50,460 --> 00:07:52,350
packages installed right now have

204
00:07:52,350 --> 00:07:54,120
critical vulnerabilities in them

205
00:07:54,120 --> 00:07:55,980
critical vulnerabilities we don't give

206
00:07:55,980 --> 00:07:57,990
those away like candy those are sort of

207
00:07:57,990 --> 00:08:00,300
stop everything you are going to get

208
00:08:00,300 --> 00:08:02,730
hacked problem and 11 percent of

209
00:08:02,730 --> 00:08:05,820
installs have them in them 37 percent

210
00:08:05,820 --> 00:08:07,590
had a high vulnerability which is still

211
00:08:07,590 --> 00:08:10,230
nothing to sneeze at but fortunately

212
00:08:10,230 --> 00:08:12,810
improving that is easy because running

213
00:08:12,810 --> 00:08:15,300
NPM audit will give you all of will give

214
00:08:15,300 --> 00:08:16,740
you a detailed report of all of the

215
00:08:16,740 --> 00:08:18,510
vulnerabilities in your application and

216
00:08:18,510 --> 00:08:20,400
what to do about them and the good news

217
00:08:20,400 --> 00:08:22,680
is that it's usually pretty easy to fix

218
00:08:22,680 --> 00:08:23,880
the vulnerability in a JavaScript

219
00:08:23,880 --> 00:08:25,980
application because usually the fix

220
00:08:25,980 --> 00:08:27,840
already exists all you have to do is

221
00:08:27,840 --> 00:08:29,520
find the vulnerable package and upgrade

222
00:08:29,520 --> 00:08:31,410
it and that's interesting because the

223
00:08:31,410 --> 00:08:33,630
way that you upgrade it is you run NPM

224
00:08:33,630 --> 00:08:35,550
so if NPM is giving you this advice that

225
00:08:35,550 --> 00:08:37,260
you should run NPM why doesn't MPM just

226
00:08:37,260 --> 00:08:40,470
run NPM and save you that step that's

227
00:08:40,470 --> 00:08:42,900
exactly what NPM does

228
00:08:42,900 --> 00:08:45,730
npm audit fix will automatically follow

229
00:08:45,730 --> 00:08:47,710
the advice that npm audit gives you and

230
00:08:47,710 --> 00:08:49,690
run the upgrades as long as it can

231
00:08:49,690 --> 00:08:52,210
safely do so by safely I mean it's

232
00:08:52,210 --> 00:08:53,920
following semver so it's only going to

233
00:08:53,920 --> 00:08:56,350
bring in patch versions if the fix is in

234
00:08:56,350 --> 00:08:58,690
a braking version then you need to run -

235
00:08:58,690 --> 00:09:00,700
- force to bring in the braking version

236
00:09:00,700 --> 00:09:03,420
obviously NPM isn't going to like

237
00:09:03,420 --> 00:09:05,860
magically solve the halting problem and

238
00:09:05,860 --> 00:09:07,450
promise that your code is going to still

239
00:09:07,450 --> 00:09:09,580
work after we've done this upgrade you

240
00:09:09,580 --> 00:09:10,840
should still be running your tests and

241
00:09:10,840 --> 00:09:12,550
making sure that NPM has left your

242
00:09:12,550 --> 00:09:14,590
software in a working state but it takes

243
00:09:14,590 --> 00:09:16,270
a lot of the grunt work out of keeping

244
00:09:16,270 --> 00:09:20,140
your packages up-to-date and secure this

245
00:09:20,140 --> 00:09:22,960
brings me briefly back to yarn we used

246
00:09:22,960 --> 00:09:25,000
to say that we didn't care which client

247
00:09:25,000 --> 00:09:26,560
people use to access the NPM registry

248
00:09:26,560 --> 00:09:28,360
because open source and open standards

249
00:09:28,360 --> 00:09:30,280
and everything like that but we can no

250
00:09:30,280 --> 00:09:32,280
longer say that with a straight face

251
00:09:32,280 --> 00:09:34,870
after NPM caught up to yarn in terms of

252
00:09:34,870 --> 00:09:37,000
speed and with the addition of two FA

253
00:09:37,000 --> 00:09:40,000
and NPM audits NPM is now safer than a

254
00:09:40,000 --> 00:09:41,890
yarn and if it's safer then you should

255
00:09:41,890 --> 00:09:43,690
be using NPM like it's a huge shocker

256
00:09:43,690 --> 00:09:45,310
obviously that NPM recommends you should

257
00:09:45,310 --> 00:09:49,630
use NPM but we do these links are to a

258
00:09:49,630 --> 00:09:51,670
blog posts from a company that switched

259
00:09:51,670 --> 00:09:53,740
to yarn and then switched back and a

260
00:09:53,740 --> 00:09:55,120
tool that they built that allows them to

261
00:09:55,120 --> 00:09:58,750
switch from yarn back to NPM one more

262
00:09:58,750 --> 00:10:00,340
big recent change with NPM that I should

263
00:10:00,340 --> 00:10:02,500
mention is that we shut down our github

264
00:10:02,500 --> 00:10:05,290
issue tracker we still use github for

265
00:10:05,290 --> 00:10:08,200
the code itself but NPM is one of the

266
00:10:08,200 --> 00:10:09,940
world's largest open source projects and

267
00:10:09,940 --> 00:10:12,160
the issue tracker was just not scaling

268
00:10:12,160 --> 00:10:14,350
to meet our needs so now we have a

269
00:10:14,350 --> 00:10:16,600
discourse at NPM community which is a

270
00:10:16,600 --> 00:10:20,170
URL because this is 2018 it's a sort of

271
00:10:20,170 --> 00:10:21,730
combination of an issue tracker in the

272
00:10:21,730 --> 00:10:24,070
forum where you can get help with your

273
00:10:24,070 --> 00:10:26,050
issues and your calls also track bug

274
00:10:26,050 --> 00:10:27,670
fixes and you can track new features as

275
00:10:27,670 --> 00:10:31,000
they get developed and the last thing to

276
00:10:31,000 --> 00:10:32,830
know about NPM because and I keep

277
00:10:32,830 --> 00:10:34,330
including it because people keep asking

278
00:10:34,330 --> 00:10:36,400
this question is so how does that make

279
00:10:36,400 --> 00:10:37,780
money are you a charity or something

280
00:10:37,780 --> 00:10:43,150
buck no we are a company the registry

281
00:10:43,150 --> 00:10:45,250
costs millions of dollars a year to run

282
00:10:45,250 --> 00:10:47,230
and we earn those millions of dollars by

283
00:10:47,230 --> 00:10:49,870
producing services that NPM developers

284
00:10:49,870 --> 00:10:52,300
NPM users love like private package

285
00:10:52,300 --> 00:10:54,520
hosting and now security services as

286
00:10:54,520 --> 00:10:55,430
well

287
00:10:55,430 --> 00:10:57,290
you should really look into them because

288
00:10:57,290 --> 00:10:59,089
the registry costs millions of dollars

289
00:10:59,089 --> 00:11:03,680
to run so let's move on to what NPM

290
00:11:03,680 --> 00:11:05,960
knows about you first off how do I know

291
00:11:05,960 --> 00:11:07,880
all of this stuff well there's two ways

292
00:11:07,880 --> 00:11:10,399
first you're all constantly downloading

293
00:11:10,399 --> 00:11:12,440
stuff from NPM so we can tell what

294
00:11:12,440 --> 00:11:13,610
you're downloading we can tell you if

295
00:11:13,610 --> 00:11:14,750
you're downloading more of it or you're

296
00:11:14,750 --> 00:11:16,430
downloading less of it

297
00:11:16,430 --> 00:11:18,500
and secondly we asked you we ran a

298
00:11:18,500 --> 00:11:20,540
survey at the beginning of this year of

299
00:11:20,540 --> 00:11:23,240
sixteen thousand NPM users and we asked

300
00:11:23,240 --> 00:11:24,920
them directly what it is that you're up

301
00:11:24,920 --> 00:11:28,459
to and the results were fascinating but

302
00:11:28,459 --> 00:11:31,190
first I want to try a party trick and I

303
00:11:31,190 --> 00:11:33,520
have no idea if this is going to work if

304
00:11:33,520 --> 00:11:40,100
everybody could stand up I'm gonna make

305
00:11:40,100 --> 00:11:41,660
if you can't stand up just raise a hand

306
00:11:41,660 --> 00:11:43,760
or something I'm gonna make a series of

307
00:11:43,760 --> 00:11:46,190
statements about you and if the

308
00:11:46,190 --> 00:11:48,500
statement isn't true you can sit back

309
00:11:48,500 --> 00:11:54,900
down so stay standing if you use NPM

310
00:11:54,910 --> 00:11:57,380
stay standing if you write JavaScript

311
00:11:57,380 --> 00:12:01,310
for browsers you write JavaScript at

312
00:12:01,310 --> 00:12:05,300
work you're concerned that maybe the

313
00:12:05,300 --> 00:12:07,190
open source code you use isn't always

314
00:12:07,190 --> 00:12:12,380
secure some of you are lying you mostly

315
00:12:12,380 --> 00:12:16,640
taught yourself JavaScript in addition

316
00:12:16,640 --> 00:12:19,700
to JavaScript you also write PHP or Java

317
00:12:19,700 --> 00:12:23,180
sometimes I'm gonna start losing people

318
00:12:23,180 --> 00:12:26,660
fast now you work at a company that

319
00:12:26,660 --> 00:12:30,400
isn't really considered a tech company

320
00:12:30,400 --> 00:12:33,560
you started using NPM less than two

321
00:12:33,560 --> 00:12:42,900
years ago you're using webpack and Babel

322
00:12:42,900 --> 00:12:47,680
you're writing a react app using

323
00:12:47,680 --> 00:12:52,300
typescript my god I got all the way to

324
00:12:52,300 --> 00:12:53,350
the end and there are still people

325
00:12:53,350 --> 00:12:55,360
standing this is how much NPM knows

326
00:12:55,360 --> 00:13:01,400
about you thank you very much

327
00:13:01,410 --> 00:13:03,580
but that was all really fast let's go

328
00:13:03,580 --> 00:13:04,660
back to a couple of those because those

329
00:13:04,660 --> 00:13:06,670
are really interesting the first one

330
00:13:06,670 --> 00:13:08,740
that's interesting to dig into is that

331
00:13:08,740 --> 00:13:11,320
not everybody who is writing stuff with

332
00:13:11,320 --> 00:13:14,650
NPM considers themselves a JavaScript

333
00:13:14,650 --> 00:13:17,980
developer 30% of you are writing Java or

334
00:13:17,980 --> 00:13:19,810
PHP or Python and tend to consider

335
00:13:19,810 --> 00:13:21,580
yourselves primarily those kinds of

336
00:13:21,580 --> 00:13:23,620
developers c-sharp is also pretty

337
00:13:23,620 --> 00:13:25,870
popular and go and C++ and Ruby are in

338
00:13:25,870 --> 00:13:28,690
there and it should and maybe it was

339
00:13:28,690 --> 00:13:30,580
surprising that a lot of NPM users don't

340
00:13:30,580 --> 00:13:31,780
consider themselves JavaScript

341
00:13:31,780 --> 00:13:33,250
developers but it probably shouldn't

342
00:13:33,250 --> 00:13:36,280
have been there's a guy at UC Berkeley

343
00:13:36,280 --> 00:13:37,960
called Leo Maravich who did a study of

344
00:13:37,960 --> 00:13:40,360
what makes people pick a programming

345
00:13:40,360 --> 00:13:41,650
language is it because they like it is

346
00:13:41,650 --> 00:13:43,090
it because it's performant is it because

347
00:13:43,090 --> 00:13:44,800
of the language features is it because

348
00:13:44,800 --> 00:13:47,050
it's familiar he discovered that the

349
00:13:47,050 --> 00:13:48,760
dominant reason that people pick a

350
00:13:48,760 --> 00:13:50,950
programming language is the availability

351
00:13:50,950 --> 00:13:53,170
of open source libraries in that

352
00:13:53,170 --> 00:13:55,390
language whether or not they like the

353
00:13:55,390 --> 00:13:57,100
language if there's a library that lets

354
00:13:57,100 --> 00:13:59,230
them get done they will pick that

355
00:13:59,230 --> 00:14:02,260
language to do it in and that is exactly

356
00:14:02,260 --> 00:14:05,050
what you said when we asked you people

357
00:14:05,050 --> 00:14:07,120
say they pick JavaScript because of the

358
00:14:07,120 --> 00:14:09,220
libraries available another way of

359
00:14:09,220 --> 00:14:11,440
putting that is people pick JavaScript

360
00:14:11,440 --> 00:14:14,680
because of NPM there were a bunch of

361
00:14:14,680 --> 00:14:15,970
other reasons that people mentioned

362
00:14:15,970 --> 00:14:17,260
about why they picked JavaScript

363
00:14:17,260 --> 00:14:19,420
including a sad 15% who said that they

364
00:14:19,420 --> 00:14:21,040
didn't get to choose whether they use

365
00:14:21,040 --> 00:14:23,830
JavaScript interestingly this group was

366
00:14:23,830 --> 00:14:29,019
almost exclusively Ruby developers

367
00:14:29,029 --> 00:14:31,889
another important finding was how big a

368
00:14:31,889 --> 00:14:34,110
concern to most people's security of

369
00:14:34,110 --> 00:14:37,019
open source JavaScript was 77% of people

370
00:14:37,019 --> 00:14:38,370
said that they are concerned about the

371
00:14:38,370 --> 00:14:40,010
security of their open source JavaScript

372
00:14:40,010 --> 00:14:43,380
and more concerning lis 52% of people

373
00:14:43,380 --> 00:14:46,050
said that the tools to do to check that

374
00:14:46,050 --> 00:14:48,089
open source JavaScript is secure and

375
00:14:48,089 --> 00:14:52,529
reliable were not good enough I talked

376
00:14:52,529 --> 00:14:53,579
about all the security features that

377
00:14:53,579 --> 00:14:55,050
we've been adding this is the data that

378
00:14:55,050 --> 00:14:56,730
made us do that we looked at what you

379
00:14:56,730 --> 00:14:58,260
said and you were like holy it

380
00:14:58,260 --> 00:15:00,060
needs to be more secure so we built a

381
00:15:00,060 --> 00:15:01,529
bunch of security features and we bought

382
00:15:01,529 --> 00:15:05,639
a security company so now would be a

383
00:15:05,639 --> 00:15:07,589
good time to mention NPM Enterprise if

384
00:15:07,589 --> 00:15:09,240
you're a big company and you're worried

385
00:15:09,240 --> 00:15:10,740
about the security of your job open

386
00:15:10,740 --> 00:15:12,660
source JavaScript well first off good

387
00:15:12,660 --> 00:15:15,540
call it's scary out there and secondly

388
00:15:15,540 --> 00:15:17,070
we can help you with that

389
00:15:17,070 --> 00:15:18,839
NPM enterprise service will give you

390
00:15:18,839 --> 00:15:21,000
your own registry domain that allows you

391
00:15:21,000 --> 00:15:22,620
to completely control what Travis crypt

392
00:15:22,620 --> 00:15:24,329
makes it into your network it'll give

393
00:15:24,329 --> 00:15:25,860
you security alerts and ton of other

394
00:15:25,860 --> 00:15:27,720
great security features and I promise

395
00:15:27,720 --> 00:15:29,459
this is the last paid plug for our

396
00:15:29,459 --> 00:15:33,690
wonderful delightful paid features so

397
00:15:33,690 --> 00:15:35,880
that's a little about and who we are as

398
00:15:35,880 --> 00:15:37,680
NPM users but what I promised you

399
00:15:37,680 --> 00:15:41,160
was information about what tools you can

400
00:15:41,160 --> 00:15:43,050
use or what tools you might want to use

401
00:15:43,050 --> 00:15:45,899
in 2019 and to do that we need to look

402
00:15:45,899 --> 00:15:51,750
at what tools you're using right now the

403
00:15:51,750 --> 00:15:53,430
thing about developers when you tell

404
00:15:53,430 --> 00:15:54,720
them about what tools are getting

405
00:15:54,720 --> 00:15:57,600
unpopular and more popular is that they

406
00:15:57,600 --> 00:15:59,550
get really passionate about their tools

407
00:15:59,550 --> 00:16:01,769
and if I tell somebody that the tool

408
00:16:01,769 --> 00:16:03,300
that they love is getting less popular

409
00:16:03,300 --> 00:16:05,040
they tend to get really defensive and

410
00:16:05,040 --> 00:16:09,240
kind of rude on Twitter and all I'm

411
00:16:09,240 --> 00:16:10,649
saying is that these are the numbers

412
00:16:10,649 --> 00:16:12,209
that we're seeing we could be wrong

413
00:16:12,209 --> 00:16:14,430
these things are going up these things

414
00:16:14,430 --> 00:16:16,319
are going down I don't have a dog in

415
00:16:16,319 --> 00:16:17,880
this fight I'm not here to tell you that

416
00:16:17,880 --> 00:16:20,459
your framework is a piece of I'm

417
00:16:20,459 --> 00:16:22,139
here to tell you that the numbers are

418
00:16:22,139 --> 00:16:23,880
going down if you want me to tell you

419
00:16:23,880 --> 00:16:25,230
that your framework is a piece of

420
00:16:25,230 --> 00:16:27,269
that is what the pool party is for

421
00:16:27,269 --> 00:16:30,079
afterwards

422
00:16:30,089 --> 00:16:33,879
so before I show you a bunch of angry

423
00:16:33,879 --> 00:16:35,920
making graphs I need you to get

424
00:16:35,920 --> 00:16:37,569
something into your head which is this

425
00:16:37,569 --> 00:16:40,569
is how the registry grows it grows 10%

426
00:16:40,569 --> 00:16:43,990
month on month every month for years

427
00:16:43,990 --> 00:16:46,269
this is extremely difficult to get a

428
00:16:46,269 --> 00:16:48,069
human brain around the registry has

429
00:16:48,069 --> 00:16:53,949
grown 14,000 percent since 2014 the fact

430
00:16:53,949 --> 00:16:55,269
that the registry is growing so

431
00:16:55,269 --> 00:16:57,519
ridiculously fast means that new users

432
00:16:57,519 --> 00:17:00,100
are constantly showing up in fact as I

433
00:17:00,100 --> 00:17:01,360
was showing you earlier when you were

434
00:17:01,360 --> 00:17:03,699
standing up and sitting down 51 percent

435
00:17:03,699 --> 00:17:06,069
of NPM users have been using it for less

436
00:17:06,069 --> 00:17:08,350
than two years that means that

437
00:17:08,350 --> 00:17:10,929
everything in the registry always has

438
00:17:10,929 --> 00:17:13,150
more users everyone's graph is going up

439
00:17:13,150 --> 00:17:14,500
into the right even the shittiest

440
00:17:14,500 --> 00:17:16,720
packages are constantly acquiring new

441
00:17:16,720 --> 00:17:19,720
users just because there's so many

442
00:17:19,720 --> 00:17:21,730
people showing up and trying out new

443
00:17:21,730 --> 00:17:24,699
stuff so look at the blind at the top of

444
00:17:24,699 --> 00:17:26,559
this graph that is Express Express is

445
00:17:26,559 --> 00:17:28,659
bedrock to NPM practically everyone who

446
00:17:28,659 --> 00:17:32,650
uses NPM uses Express eventually here's

447
00:17:32,650 --> 00:17:35,200
a graph of the Express downloads as a

448
00:17:35,200 --> 00:17:37,630
share of the registry this is the metric

449
00:17:37,630 --> 00:17:38,740
we're going to use for the rest of these

450
00:17:38,740 --> 00:17:41,140
graphs this is not how absolutely

451
00:17:41,140 --> 00:17:43,510
popular Express is and Express is

452
00:17:43,510 --> 00:17:46,120
acquiring users incredibly quickly this

453
00:17:46,120 --> 00:17:48,309
is how popular it is relative to

454
00:17:48,309 --> 00:17:50,830
everything else in the registry and read

455
00:17:50,830 --> 00:17:53,679
so Xpress used to be 1.5% of the

456
00:17:53,679 --> 00:17:57,360
registry all by itself now Express is

457
00:17:57,360 --> 00:18:00,730
0.1% of the registry 0.1% of the

458
00:18:00,730 --> 00:18:03,970
registry is enormous ly popular 0.1% of

459
00:18:03,970 --> 00:18:06,760
the registry is 4.8 million downloads a

460
00:18:06,760 --> 00:18:09,940
week it is staggeringly popular it's

461
00:18:09,940 --> 00:18:12,190
just less relatively popular than it was

462
00:18:12,190 --> 00:18:14,230
before and all of these graphs are gonna

463
00:18:14,230 --> 00:18:16,150
use this strange and slightly confusing

464
00:18:16,150 --> 00:18:20,650
but very revealing metric so let's first

465
00:18:20,650 --> 00:18:22,000
take a look at some front-end frameworks

466
00:18:22,000 --> 00:18:24,070
starting with backbone as you can see

467
00:18:24,070 --> 00:18:26,980
back in 2013 backbone was the it

468
00:18:26,980 --> 00:18:30,280
was almost as popular as Express but now

469
00:18:30,280 --> 00:18:32,230
basically nobody uses backbone and by

470
00:18:32,230 --> 00:18:35,110
basically nobody I mean 250,000

471
00:18:35,110 --> 00:18:37,960
downloads a week

472
00:18:37,970 --> 00:18:40,070
the thing that you can see with the

473
00:18:40,070 --> 00:18:41,360
backbone graph better than any other

474
00:18:41,360 --> 00:18:43,580
framework any other graph is the pattern

475
00:18:43,580 --> 00:18:45,889
of how a framework dies people do not

476
00:18:45,889 --> 00:18:47,840
switch horses midstream they do not

477
00:18:47,840 --> 00:18:49,639
change what framework a project is

478
00:18:49,639 --> 00:18:51,200
written in after the project has started

479
00:18:51,200 --> 00:18:53,750
they continue to maintain old projects

480
00:18:53,750 --> 00:18:55,580
and they start new projects in the new

481
00:18:55,580 --> 00:18:57,740
framework and they slowly retire old

482
00:18:57,740 --> 00:18:59,090
pieces of software written in old

483
00:18:59,090 --> 00:19:01,309
frameworks so framework usage never

484
00:19:01,309 --> 00:19:03,649
falls off a cliff it has this long slow

485
00:19:03,649 --> 00:19:07,669
decay because nobody's reading new

486
00:19:07,669 --> 00:19:09,440
projects in backbone these days it's

487
00:19:09,440 --> 00:19:11,240
safe to say what's happening is that a

488
00:19:11,240 --> 00:19:12,980
lot of people are maintaining legacy

489
00:19:12,980 --> 00:19:14,990
applications written in backbone written

490
00:19:14,990 --> 00:19:18,649
raise your hand if that's you write two

491
00:19:18,649 --> 00:19:19,820
hundred and fifty thousand dollars a

492
00:19:19,820 --> 00:19:22,850
week so now let's take a look at react

493
00:19:22,850 --> 00:19:25,970
react is goddamn running away with the

494
00:19:25,970 --> 00:19:29,690
web 60% of people who use NPM report

495
00:19:29,690 --> 00:19:31,340
that they are using react at least some

496
00:19:31,340 --> 00:19:32,929
of the time and I told you there were 10

497
00:19:32,929 --> 00:19:34,610
million of you so that means there are 6

498
00:19:34,610 --> 00:19:36,559
million developers working in react

499
00:19:36,559 --> 00:19:40,129
these days that is huge usage and really

500
00:19:40,129 --> 00:19:41,809
impressive growth considering how big it

501
00:19:41,809 --> 00:19:44,600
already is but it's no longer runaway

502
00:19:44,600 --> 00:19:45,919
growth if you look at that graph it

503
00:19:45,919 --> 00:19:47,929
seems to be sort of may be slowing down

504
00:19:47,929 --> 00:19:49,519
we're gonna look at that a little bit

505
00:19:49,519 --> 00:19:52,429
later to see what's going on there but

506
00:19:52,429 --> 00:19:53,659
first we're gonna look at angular

507
00:19:53,659 --> 00:19:55,279
angular is an extremely popular

508
00:19:55,279 --> 00:19:58,129
framework when I get that out of the way

509
00:19:58,129 --> 00:20:00,649
in our survey in January about 40% of

510
00:20:00,649 --> 00:20:01,970
our users said that they used angular

511
00:20:01,970 --> 00:20:04,580
which is to say about 2/3 as many as use

512
00:20:04,580 --> 00:20:07,039
react but our downloads data says

513
00:20:07,039 --> 00:20:08,240
something a bit different now downloads

514
00:20:08,240 --> 00:20:09,889
data says about half as many people to

515
00:20:09,889 --> 00:20:13,070
use angular the angular community was

516
00:20:13,070 --> 00:20:15,019
very quick to point out this discrepancy

517
00:20:15,019 --> 00:20:16,850
and to yell at me angrily on Twitter

518
00:20:16,850 --> 00:20:20,570
about why that might be so I'm not going

519
00:20:20,570 --> 00:20:21,710
to say that angular is getting less

520
00:20:21,710 --> 00:20:22,850
popular

521
00:20:22,850 --> 00:20:25,550
I don't have enough data to be sure that

522
00:20:25,550 --> 00:20:26,960
angular is getting less popular what I

523
00:20:26,960 --> 00:20:29,210
do know is that angular is seeing fewer

524
00:20:29,210 --> 00:20:32,690
downloads than it used to and the

525
00:20:32,690 --> 00:20:34,970
Downloads peaked in 2017 and are now in

526
00:20:34,970 --> 00:20:38,210
a pattern of slow decline ember is an

527
00:20:38,210 --> 00:20:40,820
unusual story ember was pretty popular

528
00:20:40,820 --> 00:20:43,370
in 2015 and then it went through a sort

529
00:20:43,370 --> 00:20:46,700
of rough patch but in 2017 and 2018 it's

530
00:20:46,700 --> 00:20:48,860
making a comeback this is really unusual

531
00:20:48,860 --> 00:20:51,110
I've never seen a framework bounce back

532
00:20:51,110 --> 00:20:54,710
before but now amber is seeing really

533
00:20:54,710 --> 00:20:57,320
healthy growth in January about 4% of

534
00:20:57,320 --> 00:20:58,820
NPM users said that they were using

535
00:20:58,820 --> 00:21:00,140
ember and you could expect that number

536
00:21:00,140 --> 00:21:03,770
to be about twice as big now roughly as

537
00:21:03,770 --> 00:21:06,020
popular as ember is view but view is a

538
00:21:06,020 --> 00:21:07,520
different growth story view is just

539
00:21:07,520 --> 00:21:10,100
taking off like a rocket right now if I

540
00:21:10,100 --> 00:21:12,620
had to guess why Reax growth appears to

541
00:21:12,620 --> 00:21:14,570
be slowing down I would say that it is

542
00:21:14,570 --> 00:21:16,670
because new users are adopting view and

543
00:21:16,670 --> 00:21:18,710
the ones who aren't adopting view are

544
00:21:18,710 --> 00:21:21,650
probably adopting ember I don't have a

545
00:21:21,650 --> 00:21:23,360
perfect picture I could still be wrong

546
00:21:23,360 --> 00:21:24,770
about this there are a zillion other

547
00:21:24,770 --> 00:21:26,330
frameworks that might be contributing

548
00:21:26,330 --> 00:21:28,070
but that's what it looks like to me

549
00:21:28,070 --> 00:21:31,340
right now I want to dig a little bit

550
00:21:31,340 --> 00:21:33,140
deeper into the Reax ecosystem partly

551
00:21:33,140 --> 00:21:35,390
because so many of you are using it and

552
00:21:35,390 --> 00:21:37,370
partly because it's unique react isn't

553
00:21:37,370 --> 00:21:40,010
really a framework react is a solution

554
00:21:40,010 --> 00:21:41,600
to one part of the web development

555
00:21:41,600 --> 00:21:44,150
problem specifically react as a way of

556
00:21:44,150 --> 00:21:46,250
making components that share state and

557
00:21:46,250 --> 00:21:48,560
there are lots of types of applications

558
00:21:48,560 --> 00:21:50,480
where sharing where being able to use

559
00:21:50,480 --> 00:21:52,310
Rios reusable components that share

560
00:21:52,310 --> 00:21:54,410
state is useful so rich web apps

561
00:21:54,410 --> 00:21:56,870
obviously but also mobile apps and

562
00:21:56,870 --> 00:21:59,960
desktop apps but rich web apps have

563
00:21:59,960 --> 00:22:01,280
another requirement which is they need

564
00:22:01,280 --> 00:22:04,940
to be able to map URLs to state in the

565
00:22:04,940 --> 00:22:06,920
application to be able to do that you

566
00:22:06,920 --> 00:22:08,990
need to use react router or some other

567
00:22:08,990 --> 00:22:11,630
kind of plug-in router much like react

568
00:22:11,630 --> 00:22:14,030
itself react router grew quickly and

569
00:22:14,030 --> 00:22:15,440
that has now leveled off but as you see

570
00:22:15,440 --> 00:22:17,570
it's leveled off at about half the level

571
00:22:17,570 --> 00:22:20,900
of popularity of react itself and that's

572
00:22:20,900 --> 00:22:22,430
really interesting because it's one of

573
00:22:22,430 --> 00:22:24,350
the triumphs of react as a piece of

574
00:22:24,350 --> 00:22:26,120
technology it's part of why react is so

575
00:22:26,120 --> 00:22:28,040
popular they managed to successfully

576
00:22:28,040 --> 00:22:31,040
decouple these functions every framework

577
00:22:31,040 --> 00:22:33,380
that I was aware of prior to react was a

578
00:22:33,380 --> 00:22:35,640
sort of kitchen sink framework they had

579
00:22:35,640 --> 00:22:37,170
own component model their own router

580
00:22:37,170 --> 00:22:38,940
their own data model their own

581
00:22:38,940 --> 00:22:42,480
everything reacts only has a component

582
00:22:42,480 --> 00:22:44,670
model and by letting people choose their

583
00:22:44,670 --> 00:22:46,140
own solutions for the router and the

584
00:22:46,140 --> 00:22:47,820
data model and everything else it has

585
00:22:47,820 --> 00:22:50,040
created a more flexible design and that

586
00:22:50,040 --> 00:22:51,360
means that it's getting greater adoption

587
00:22:51,360 --> 00:22:53,700
simply because it's adopting - it's

588
00:22:53,700 --> 00:22:57,510
adapting to more use cases so react is

589
00:22:57,510 --> 00:22:59,130
more than twice as popular as a react

590
00:22:59,130 --> 00:23:00,210
router because there are lots of

591
00:23:00,210 --> 00:23:02,190
applications that use routers other than

592
00:23:02,190 --> 00:23:03,900
react router and there are also lots of

593
00:23:03,900 --> 00:23:05,250
react applications that don't need a

594
00:23:05,250 --> 00:23:06,630
router at all like mobile apps and

595
00:23:06,630 --> 00:23:08,360
desktop apps

596
00:23:08,360 --> 00:23:11,010
so speaking of reacts decoupled model

597
00:23:11,010 --> 00:23:12,929
let's look at flux flux was introduced

598
00:23:12,929 --> 00:23:15,240
by Facebook at roughly the same time as

599
00:23:15,240 --> 00:23:17,220
react and it was coupled with graph QL

600
00:23:17,220 --> 00:23:19,830
flux was how Facebook expected that you

601
00:23:19,830 --> 00:23:21,510
would manage state in large web

602
00:23:21,510 --> 00:23:23,970
applications and as you can see that

603
00:23:23,970 --> 00:23:26,030
didn't happen at all

604
00:23:26,030 --> 00:23:28,320
imagine if Facebook had coupled these

605
00:23:28,320 --> 00:23:29,940
together imagine if you couldn't use

606
00:23:29,940 --> 00:23:31,530
react without using flux at the same

607
00:23:31,530 --> 00:23:33,840
time fluxes unpopularity would have

608
00:23:33,840 --> 00:23:35,850
dragged react down with it and that

609
00:23:35,850 --> 00:23:37,980
isn't what happened instead what

610
00:23:37,980 --> 00:23:40,110
happened is react took off and people

611
00:23:40,110 --> 00:23:42,210
use Redux instead to manage their state

612
00:23:42,210 --> 00:23:44,850
as you can see fluxes downturn coincides

613
00:23:44,850 --> 00:23:46,740
exactly with the introduction of Redux

614
00:23:46,740 --> 00:23:48,799
as soon as Redux became available people

615
00:23:48,799 --> 00:23:52,830
abandoned flux our mass then Redux and

616
00:23:52,830 --> 00:23:53,520
Redux router

617
00:23:53,520 --> 00:23:55,710
Redux and react router track each other

618
00:23:55,710 --> 00:23:56,910
they are very popular combination

619
00:23:56,910 --> 00:23:58,320
they're almost always used at the same

620
00:23:58,320 --> 00:24:02,429
time I mentioned graph QL earlier graph

621
00:24:02,429 --> 00:24:04,470
QL started in react land and has now

622
00:24:04,470 --> 00:24:07,080
expanded beyond it and it is red hot

623
00:24:07,080 --> 00:24:09,210
right now there are two big libraries

624
00:24:09,210 --> 00:24:10,950
for using graph QL on the browser one is

625
00:24:10,950 --> 00:24:12,419
Apollo and one is real a but as you can

626
00:24:12,419 --> 00:24:14,040
see Apollo is the one that's really

627
00:24:14,040 --> 00:24:17,340
running away with it right now so far

628
00:24:17,340 --> 00:24:18,600
I've spent a lot of time focused on

629
00:24:18,600 --> 00:24:21,990
front-end and that is because that's

630
00:24:21,990 --> 00:24:24,299
what NPM users mostly are but 70% of you

631
00:24:24,299 --> 00:24:25,530
are also writing server-side

632
00:24:25,530 --> 00:24:27,210
applications

633
00:24:27,210 --> 00:24:28,950
so what frameworks are people using on

634
00:24:28,950 --> 00:24:30,840
the on the server side well they're

635
00:24:30,840 --> 00:24:32,730
using a whole lot of Express in fact

636
00:24:32,730 --> 00:24:34,500
relative to Express nothing else even

637
00:24:34,500 --> 00:24:38,730
shows up so what if we take Express out

638
00:24:38,730 --> 00:24:41,160
of the picture what does it look like in

639
00:24:41,160 --> 00:24:43,590
blue is Khoa KO is a sort of spiritual

640
00:24:43,590 --> 00:24:45,330
successor to Express

641
00:24:45,330 --> 00:24:47,550
Co is relative popularity is pretty flat

642
00:24:47,550 --> 00:24:49,530
but keep in mind that

643
00:24:49,530 --> 00:24:51,480
flat relative popularity means that koa

644
00:24:51,480 --> 00:24:55,560
grew 14,000 percent so ko is doing

645
00:24:55,560 --> 00:24:59,370
really well and this is why share of

646
00:24:59,370 --> 00:25:01,560
registry is this useful but confusing

647
00:25:01,560 --> 00:25:04,980
metric sales is as the name suggests a

648
00:25:04,980 --> 00:25:07,320
straight up quart of Ruby on Rails to

649
00:25:07,320 --> 00:25:09,240
node and as the graph suggests that

650
00:25:09,240 --> 00:25:14,680
seemed like a good idea at the time

651
00:25:14,690 --> 00:25:17,250
happy is a framework that NPM used to

652
00:25:17,250 --> 00:25:19,500
use on our own site we switched earlier

653
00:25:19,500 --> 00:25:21,050
this year to using react instead

654
00:25:21,050 --> 00:25:23,280
happiest relative growth is also pretty

655
00:25:23,280 --> 00:25:25,440
flat which again means 14,000 percent

656
00:25:25,440 --> 00:25:28,140
growth pretty healthy and then there's

657
00:25:28,140 --> 00:25:30,660
next jeaious which is from site next

658
00:25:30,660 --> 00:25:32,790
jeaious is a sort of all in kitchen sink

659
00:25:32,790 --> 00:25:34,500
framework but it uses react for its

660
00:25:34,500 --> 00:25:36,630
component model so if you like react but

661
00:25:36,630 --> 00:25:37,590
you don't have to make all of these

662
00:25:37,590 --> 00:25:39,270
pain-in-the-ass decisions about routers

663
00:25:39,270 --> 00:25:40,380
and tooling and all of that other stuff

664
00:25:40,380 --> 00:25:42,690
you just you know fire up a next

665
00:25:42,690 --> 00:25:44,190
application and you get a react app

666
00:25:44,190 --> 00:25:45,360
without having to think too hard about

667
00:25:45,360 --> 00:25:47,490
it I think that I personally think

668
00:25:47,490 --> 00:25:49,740
that's pretty cool and people seem to

669
00:25:49,740 --> 00:25:51,870
agree with me because in red in relative

670
00:25:51,870 --> 00:25:54,590
terms it is growing really really fast

671
00:25:54,590 --> 00:25:57,150
so how are we doing so far

672
00:25:57,150 --> 00:25:58,770
for the next part of this talk I need to

673
00:25:58,770 --> 00:26:00,240
split the room into two pieces so

674
00:26:00,240 --> 00:26:02,370
everybody on this side of the line is

675
00:26:02,370 --> 00:26:04,860
team a everybody on this side of the

676
00:26:04,860 --> 00:26:08,210
line is team B let's hear it from team a

677
00:26:08,210 --> 00:26:15,380
team B team a again team B again

678
00:26:15,380 --> 00:26:17,280
fantastic I'm not gonna use that for

679
00:26:17,280 --> 00:26:18,810
anything it's just to wake you up after

680
00:26:18,810 --> 00:26:23,370
20 minutes of grass so we've talked

681
00:26:23,370 --> 00:26:24,930
about frameworks

682
00:26:24,930 --> 00:26:27,690
[Applause]

683
00:26:27,690 --> 00:26:29,950
we've talked about frameworks a lot but

684
00:26:29,950 --> 00:26:31,930
a big part of what people use NPM for is

685
00:26:31,930 --> 00:26:34,570
tooling to helping their boo chain and

686
00:26:34,570 --> 00:26:36,070
their tooling and everything else we

687
00:26:36,070 --> 00:26:39,730
have fantastic data here the first of

688
00:26:39,730 --> 00:26:41,559
that data is that people want less

689
00:26:41,559 --> 00:26:43,270
tooling people hate tooling they would

690
00:26:43,270 --> 00:26:44,710
like to not use any tooling at all

691
00:26:44,710 --> 00:26:46,059
please could we just burn it all down

692
00:26:46,059 --> 00:26:49,020
and have it built in that would be great

693
00:26:49,020 --> 00:26:51,250
but to be able to do that we need to

694
00:26:51,250 --> 00:26:52,300
know what tooling it is that we're using

695
00:26:52,300 --> 00:26:56,260
in the first place so 85% of us use web

696
00:26:56,260 --> 00:26:58,270
frameworks unsurprisingly that compares

697
00:26:58,270 --> 00:26:59,950
to the 93 percent of us who are writing

698
00:26:59,950 --> 00:27:02,020
web apps which means that eight percent

699
00:27:02,020 --> 00:27:06,080
of us are rolling our own dare god

700
00:27:06,090 --> 00:27:08,050
seventy four percent of us are using

701
00:27:08,050 --> 00:27:11,100
transpilers 69 percent are using linters

702
00:27:11,100 --> 00:27:13,690
sixty seven percent are using bundlers

703
00:27:13,690 --> 00:27:17,080
and 80% of those are using webpack 58

704
00:27:17,080 --> 00:27:18,520
percent of us are using CSS

705
00:27:18,520 --> 00:27:20,500
preprocessors and 58 percent are using

706
00:27:20,500 --> 00:27:22,720
testing frameworks there's a couple of

707
00:27:22,720 --> 00:27:23,890
those that I want to dig into a little

708
00:27:23,890 --> 00:27:27,460
bit more transpilers are tools to

709
00:27:27,460 --> 00:27:28,809
translate other languages into

710
00:27:28,809 --> 00:27:30,370
JavaScript and the most popular one is

711
00:27:30,370 --> 00:27:33,700
obviously bable bable translates mostly

712
00:27:33,700 --> 00:27:35,110
JavaScript into other flavors of

713
00:27:35,110 --> 00:27:37,330
JavaScript with one big exception which

714
00:27:37,330 --> 00:27:39,160
is JSX which isn't really part of

715
00:27:39,160 --> 00:27:41,110
JavaScript but at this point given the

716
00:27:41,110 --> 00:27:42,730
massive adoption of reacts and how many

717
00:27:42,730 --> 00:27:44,440
people who write JavaScript are writing

718
00:27:44,440 --> 00:27:46,960
JSX we should probably reconsider that

719
00:27:46,960 --> 00:27:49,090
we should probably be thinking about how

720
00:27:49,090 --> 00:27:51,160
JSX becomes a first-class part of

721
00:27:51,160 --> 00:27:54,270
javascript if it's that popular

722
00:27:54,270 --> 00:27:55,960
CoffeeScript is still in there an

723
00:27:55,960 --> 00:27:57,910
element closure script have small

724
00:27:57,910 --> 00:27:59,559
followings but the really big surprise

725
00:27:59,559 --> 00:28:04,000
here is typescript 46% of us are writing

726
00:28:04,000 --> 00:28:07,540
typescript who knew that well 46% of you

727
00:28:07,540 --> 00:28:09,240
I guess

728
00:28:09,240 --> 00:28:11,590
typescript is mostly JavaScript it just

729
00:28:11,590 --> 00:28:13,090
adds types there was a talk about it too

730
00:28:13,090 --> 00:28:15,790
talks ago and types are just a sort of

731
00:28:15,790 --> 00:28:17,590
form of built-in testing that allows

732
00:28:17,590 --> 00:28:19,900
large teams to scale up by making things

733
00:28:19,900 --> 00:28:22,990
a little bit safer Microsoft launched

734
00:28:22,990 --> 00:28:24,640
typescript with its own package manager

735
00:28:24,640 --> 00:28:26,200
but the community sort of rebelled and

736
00:28:26,200 --> 00:28:27,820
was like we hate using to package

737
00:28:27,820 --> 00:28:31,179
managers let's just use NPM and to their

738
00:28:31,179 --> 00:28:34,120
credit they did Microsoft switched types

739
00:28:34,120 --> 00:28:36,130
into using NPM is their main reg

740
00:28:36,130 --> 00:28:37,690
three which is very new Microsoft of

741
00:28:37,690 --> 00:28:40,480
them and they did it without asking us

742
00:28:40,480 --> 00:28:42,070
if that was okay which is very old

743
00:28:42,070 --> 00:28:49,180
Microsoft of that linters as 70% of you

744
00:28:49,180 --> 00:28:51,820
know linters are tools that tell you if

745
00:28:51,820 --> 00:28:54,040
your code is nice they will check for

746
00:28:54,040 --> 00:28:56,260
obvious errors they will you know fix

747
00:28:56,260 --> 00:28:57,580
your syntax for you they will add a

748
00:28:57,580 --> 00:28:58,990
style guide if that's what you want

749
00:28:58,990 --> 00:29:01,780
they're super popular and by far the

750
00:29:01,780 --> 00:29:03,790
most popular of them is es lint and you

751
00:29:03,790 --> 00:29:05,530
may have heard about es lint recently

752
00:29:05,530 --> 00:29:06,970
because there was a security incident

753
00:29:06,970 --> 00:29:11,440
involving the eslint yes like most

754
00:29:11,440 --> 00:29:13,150
open-source is maintained by a team of

755
00:29:13,150 --> 00:29:14,950
volunteers and those team of that team

756
00:29:14,950 --> 00:29:16,510
of volunteers are mostly experienced

757
00:29:16,510 --> 00:29:18,300
developers who know what they're doing

758
00:29:18,300 --> 00:29:20,740
but unfortunately one of them was being

759
00:29:20,740 --> 00:29:23,020
a little bit lazy and he hadn't turned

760
00:29:23,020 --> 00:29:24,940
on two-factor off for his account on npm

761
00:29:24,940 --> 00:29:27,070
and to make matters worse he was using a

762
00:29:27,070 --> 00:29:28,420
password that he'd used on another

763
00:29:28,420 --> 00:29:30,670
website that other website was

764
00:29:30,670 --> 00:29:32,560
compromised the password was stolen and

765
00:29:32,560 --> 00:29:34,780
long story short somebody got that

766
00:29:34,780 --> 00:29:36,730
password and used it on NPM and got

767
00:29:36,730 --> 00:29:39,310
access to his account what that attacker

768
00:29:39,310 --> 00:29:41,560
then did was published a new version of

769
00:29:41,560 --> 00:29:43,960
es lint and that version of es lint had

770
00:29:43,960 --> 00:29:45,760
a credentials harvester in it if you

771
00:29:45,760 --> 00:29:48,450
download and installed es lint that day

772
00:29:48,450 --> 00:29:50,890
you're NPM login tokens would be

773
00:29:50,890 --> 00:29:52,600
transmitted back up to the Internet and

774
00:29:52,600 --> 00:29:55,390
stolen this could have been a disaster

775
00:29:55,390 --> 00:29:56,920
this is the kind of thing it keeps us up

776
00:29:56,920 --> 00:29:58,930
at night it would have been possible to

777
00:29:58,930 --> 00:30:01,240
take those stolen tokens to hijack other

778
00:30:01,240 --> 00:30:02,920
packages to publish a compromised

779
00:30:02,920 --> 00:30:04,870
versions of them hijack more people

780
00:30:04,870 --> 00:30:06,760
suddenly you have a huge huge problem

781
00:30:06,760 --> 00:30:09,670
but what happened instead is that people

782
00:30:09,670 --> 00:30:11,980
noticed really quickly because there's

783
00:30:11,980 --> 00:30:13,930
10 million of you and you're all

784
00:30:13,930 --> 00:30:17,890
developers within 30 minutes of people

785
00:30:17,890 --> 00:30:19,750
noticing we had put an advisory up and

786
00:30:19,750 --> 00:30:21,970
taken down the offending package and NPM

787
00:30:21,970 --> 00:30:23,560
audit was warning anybody who installed

788
00:30:23,560 --> 00:30:24,910
the bad version of the package that it

789
00:30:24,910 --> 00:30:26,260
was bad

790
00:30:26,260 --> 00:30:29,230
and then we reset the login tokens of

791
00:30:29,230 --> 00:30:32,410
all 10 million unpaid users in case any

792
00:30:32,410 --> 00:30:34,120
of those tokens had been stolen and as

793
00:30:34,120 --> 00:30:35,950
far as we can tell it's been a couple of

794
00:30:35,950 --> 00:30:39,490
weeks now it worked nobody else's tokens

795
00:30:39,490 --> 00:30:41,590
were used and no other packages seem to

796
00:30:41,590 --> 00:30:43,390
have been compromised so far and we had

797
00:30:43,390 --> 00:30:44,980
a bunch of third parties double-check

798
00:30:44,980 --> 00:30:48,550
our work on that one but this is why NPM

799
00:30:48,550 --> 00:30:49,990
is taking security system

800
00:30:49,990 --> 00:30:52,360
because with ten million users the very

801
00:30:52,360 --> 00:30:54,610
small percentage of users who are bad is

802
00:30:54,610 --> 00:30:56,650
still a very large absolute number of

803
00:30:56,650 --> 00:30:59,710
people so you have to use two factor

804
00:30:59,710 --> 00:31:01,720
auth it is now possible to enforce

805
00:31:01,720 --> 00:31:05,590
two-factor off on a package so that the

806
00:31:05,590 --> 00:31:07,210
es Ihnen team for instance can enforce

807
00:31:07,210 --> 00:31:09,550
that nobody is able to publish a copy of

808
00:31:09,550 --> 00:31:11,590
es lint unless they have used two-factor

809
00:31:11,590 --> 00:31:14,530
off to do so and you should use NPM six

810
00:31:14,530 --> 00:31:16,090
because it will warn you about these

811
00:31:16,090 --> 00:31:19,210
things so now back to our tooling stats

812
00:31:19,210 --> 00:31:21,850
I mentioned testing frameworks testing

813
00:31:21,850 --> 00:31:23,970
for of great deal of you are using mocha

814
00:31:23,970 --> 00:31:27,160
Jasmine is also very popular gest is

815
00:31:27,160 --> 00:31:28,600
extremely popular which is unsurprising

816
00:31:28,600 --> 00:31:30,700
given its connection to react and how

817
00:31:30,700 --> 00:31:33,250
popular react is but sitting up there at

818
00:31:33,250 --> 00:31:37,150
number three is none come on

819
00:31:37,150 --> 00:31:39,010
21% of you can't be bothered to write

820
00:31:39,010 --> 00:31:43,210
any tests at all surely you can do

821
00:31:43,210 --> 00:31:46,929
better and the fun part is I know that

822
00:31:46,929 --> 00:31:48,220
you can do better and in fact I know

823
00:31:48,220 --> 00:31:49,990
that you will do better because the data

824
00:31:49,990 --> 00:31:52,570
told me that you would we first noticed

825
00:31:52,570 --> 00:31:53,950
this effect when we were looking at

826
00:31:53,950 --> 00:31:55,210
security and we were building our

827
00:31:55,210 --> 00:31:56,980
security features we looked into how

828
00:31:56,980 --> 00:31:59,170
developers approach security and we

829
00:31:59,170 --> 00:32:01,059
split them up by how much experience

830
00:32:01,059 --> 00:32:03,429
they had and we discovered this really

831
00:32:03,429 --> 00:32:05,559
clear linear progression the more

832
00:32:05,559 --> 00:32:07,179
experience you have writing javascript

833
00:32:07,179 --> 00:32:08,679
the more seriously you take your

834
00:32:08,679 --> 00:32:12,340
security we discovered that this was

835
00:32:12,340 --> 00:32:13,960
true for nearly everything considered a

836
00:32:13,960 --> 00:32:16,240
best practice these bars are comparing

837
00:32:16,240 --> 00:32:17,920
just the most experienced group the ten

838
00:32:17,920 --> 00:32:19,240
plus years group to the least

839
00:32:19,240 --> 00:32:20,710
experienced group the less than one year

840
00:32:20,710 --> 00:32:23,770
group and in every single case the same

841
00:32:23,770 --> 00:32:25,570
linear progression happened there was in

842
00:32:25,570 --> 00:32:28,630
bundling linting security steps like

843
00:32:28,630 --> 00:32:29,950
code reviews and audits and code

844
00:32:29,950 --> 00:32:32,320
scanning they all get more popular the

845
00:32:32,320 --> 00:32:35,260
more experienced you are so I know that

846
00:32:35,260 --> 00:32:36,940
you'll do better because the more time

847
00:32:36,940 --> 00:32:38,620
you spend doing this the more likely you

848
00:32:38,620 --> 00:32:41,650
are to do this stuff in particular we

849
00:32:41,650 --> 00:32:45,070
noticed this effect in security in the

850
00:32:45,070 --> 00:32:46,900
least-experienced group only about 58

851
00:32:46,900 --> 00:32:48,580
percent of people use any security tools

852
00:32:48,580 --> 00:32:50,559
at all but in the most experienced group

853
00:32:50,559 --> 00:32:52,750
eighty-five percent of people do and the

854
00:32:52,750 --> 00:32:54,460
good news is that you can get into the

855
00:32:54,460 --> 00:32:55,960
eighty-five percent group just by

856
00:32:55,960 --> 00:32:57,730
upgrading to NPM six because you'll get

857
00:32:57,730 --> 00:33:00,760
automatic scans this again was the data

858
00:33:00,760 --> 00:33:02,110
that made us build that feature we

859
00:33:02,110 --> 00:33:03,470
didn't just build it for no reason we

860
00:33:03,470 --> 00:33:05,720
because 16,000 people said could you

861
00:33:05,720 --> 00:33:10,429
build this feature already so we did so

862
00:33:10,429 --> 00:33:12,679
now we come to the future of Java

863
00:33:12,679 --> 00:33:14,629
scripts this is the part where I must

864
00:33:14,629 --> 00:33:16,250
make some bad predictions and you get to

865
00:33:16,250 --> 00:33:17,809
take pictures of me standing in front of

866
00:33:17,809 --> 00:33:19,580
slides where I make bad predictions so

867
00:33:19,580 --> 00:33:20,990
when the predictions turn out to be bad

868
00:33:20,990 --> 00:33:22,850
you can make fun of me with this big

869
00:33:22,850 --> 00:33:24,169
picture where I say something that's

870
00:33:24,169 --> 00:33:29,330
obviously wrong so let's begin the

871
00:33:29,330 --> 00:33:30,740
biggest prediction that I can make is

872
00:33:30,740 --> 00:33:33,169
that nothing and most likely to be

873
00:33:33,169 --> 00:33:34,669
accurate is that nothing lasts forever

874
00:33:34,669 --> 00:33:37,490
backbone was once the dominant framework

875
00:33:37,490 --> 00:33:40,159
and it is now an afterthought jQuery

876
00:33:40,159 --> 00:33:41,990
which revolutionized web development

877
00:33:41,990 --> 00:33:43,789
pour one out for jQuery it's not

878
00:33:43,789 --> 00:33:46,879
relevant anymore it's been superseded

879
00:33:46,879 --> 00:33:50,029
any framework or tool has a heyday that

880
00:33:50,029 --> 00:33:51,769
is measured in a handful of years and

881
00:33:51,769 --> 00:33:55,490
then a long slow lingering death so

882
00:33:55,490 --> 00:33:57,500
don't cling too tightly to your tools

883
00:33:57,500 --> 00:33:59,600
you should expect five years from now

884
00:33:59,600 --> 00:34:00,919
that your tools will have rolled over

885
00:34:00,919 --> 00:34:02,870
because that's about how long that's

886
00:34:02,870 --> 00:34:05,480
about as long as they live on the

887
00:34:05,480 --> 00:34:06,830
front-end frameworks side it would be

888
00:34:06,830 --> 00:34:09,740
unwise to bet against Reax at least for

889
00:34:09,740 --> 00:34:11,179
the next few years react has a ton of

890
00:34:11,179 --> 00:34:12,919
users but possibly more importantly

891
00:34:12,919 --> 00:34:14,990
react has a ton of modules

892
00:34:14,990 --> 00:34:17,839
the reason reacts having lots of modules

893
00:34:17,839 --> 00:34:19,879
is important is because as I mentioned

894
00:34:19,879 --> 00:34:21,859
before the reason people choose

895
00:34:21,859 --> 00:34:24,319
libraries is we choose languages is

896
00:34:24,319 --> 00:34:27,790
because of the availability of libraries

897
00:34:27,790 --> 00:34:30,020
people put up with all of this pain in

898
00:34:30,020 --> 00:34:31,609
the ass tooling in JavaScript that they

899
00:34:31,609 --> 00:34:33,889
tell us that they hate because NPM has

900
00:34:33,889 --> 00:34:35,690
seven hundred and seventy thousand

901
00:34:35,690 --> 00:34:38,060
packages in it and that huge pile of

902
00:34:38,060 --> 00:34:40,099
delicious delicious libraries keeps

903
00:34:40,099 --> 00:34:41,629
everybody coming back even though it's

904
00:34:41,629 --> 00:34:44,750
kind of a pain in the ass to do so reiax

905
00:34:44,750 --> 00:34:46,970
might be able to pull off the same trick

906
00:34:46,970 --> 00:34:48,919
and if it does it's going to be

907
00:34:48,919 --> 00:34:49,609
unstoppable

908
00:34:49,609 --> 00:34:51,560
there are react components that you can

909
00:34:51,560 --> 00:34:53,899
npm install if you npm install react

910
00:34:53,899 --> 00:34:56,000
color you get a color picker in your web

911
00:34:56,000 --> 00:34:57,380
app you don't have to do anything other

912
00:34:57,380 --> 00:34:59,270
than drop a tag into your web app to use

913
00:34:59,270 --> 00:35:01,579
it that my friends has been the dream of

914
00:35:01,579 --> 00:35:03,829
web development for a long time and

915
00:35:03,829 --> 00:35:05,660
react is the first time i've really seen

916
00:35:05,660 --> 00:35:09,829
it work will react become the UI library

917
00:35:09,829 --> 00:35:11,930
for the web will react components become

918
00:35:11,930 --> 00:35:13,400
the way that we put websites together

919
00:35:13,400 --> 00:35:14,780
and will stop building things from

920
00:35:14,780 --> 00:35:16,099
scratch and just dump a bunch of

921
00:35:16,099 --> 00:35:16,780
components in

922
00:35:16,780 --> 00:35:19,630
at webapp it is too soon to know but it

923
00:35:19,630 --> 00:35:22,390
could do it's too soon to predict that

924
00:35:22,390 --> 00:35:25,210
because as we said react is kind of

925
00:35:25,210 --> 00:35:27,520
slowing down is it view that's causing

926
00:35:27,520 --> 00:35:29,500
that is an ember that's causing that or

927
00:35:29,500 --> 00:35:31,510
maybe it's just that react while very

928
00:35:31,510 --> 00:35:34,870
very flexible more flexible in any web

929
00:35:34,870 --> 00:35:36,730
framework has ever been before is still

930
00:35:36,730 --> 00:35:39,340
not flexible enough to cover 100% of web

931
00:35:39,340 --> 00:35:41,830
development use cases it could be that

932
00:35:41,830 --> 00:35:44,110
no framework can ever win no framework

933
00:35:44,110 --> 00:35:46,210
can ever be the single framework that

934
00:35:46,210 --> 00:35:48,730
every web app is built-in in fact that's

935
00:35:48,730 --> 00:35:50,620
a pretty safe guess but not a terribly

936
00:35:50,620 --> 00:35:51,850
useful one if you're trying to decide

937
00:35:51,850 --> 00:35:54,280
what to use so I would say in the

938
00:35:54,280 --> 00:35:56,050
meantime you should probably bet on

939
00:35:56,050 --> 00:35:59,560
react react has the users and the number

940
00:35:59,560 --> 00:36:01,420
of users you have is a big deal when it

941
00:36:01,420 --> 00:36:03,670
comes to picking a framework because you

942
00:36:03,670 --> 00:36:05,170
want to be where everybody else is you

943
00:36:05,170 --> 00:36:06,820
want them to write the tutorials you

944
00:36:06,820 --> 00:36:08,950
want them to find the bugs you want them

945
00:36:08,950 --> 00:36:10,690
to answer your questions on Stack

946
00:36:10,690 --> 00:36:14,140
Overflow for you and for that react is

947
00:36:14,140 --> 00:36:17,350
the safest bed right now if you don't

948
00:36:17,350 --> 00:36:18,610
like react there are a couple of good

949
00:36:18,610 --> 00:36:21,370
reasons to pick other things angular has

950
00:36:21,370 --> 00:36:23,140
the support of Google and since Google

951
00:36:23,140 --> 00:36:23,950
isn't going anywhere

952
00:36:23,950 --> 00:36:26,470
angular isn't going anywhere view has

953
00:36:26,470 --> 00:36:27,970
the momentum and it is definitely the

954
00:36:27,970 --> 00:36:30,880
new hotness right now and keep an eye on

955
00:36:30,880 --> 00:36:34,300
next Jas because it's the power of react

956
00:36:34,300 --> 00:36:35,860
with a lot more convenience and I think

957
00:36:35,860 --> 00:36:38,860
that has a lot of power and as I said

958
00:36:38,860 --> 00:36:40,300
amber has a bit of everything it has

959
00:36:40,300 --> 00:36:41,650
lots of users it has good corporate

960
00:36:41,650 --> 00:36:45,000
support and it's got some new momentum

961
00:36:45,000 --> 00:36:47,710
in 2019 if you're looking for something

962
00:36:47,710 --> 00:36:49,150
new to learn if you're looking for sense

963
00:36:49,150 --> 00:36:50,590
to really get your head around for the

964
00:36:50,590 --> 00:36:52,570
first time graph QL is the thing that it

965
00:36:52,570 --> 00:36:55,240
should be graph QL is about to be huge

966
00:36:55,240 --> 00:36:56,800
there are whole startups built around

967
00:36:56,800 --> 00:36:59,410
providing services for graph QL the

968
00:36:59,410 --> 00:37:00,790
tooling around it is getting better and

969
00:37:00,790 --> 00:37:02,380
it has some real advantages if you are

970
00:37:02,380 --> 00:37:04,510
building server-side api's or you are

971
00:37:04,510 --> 00:37:06,220
consuming server-side api's you should

972
00:37:06,220 --> 00:37:07,900
look into weather graph QL can help you

973
00:37:07,900 --> 00:37:11,140
do that better and when it comes to

974
00:37:11,140 --> 00:37:12,760
bundling transpiling and linting i can

975
00:37:12,760 --> 00:37:14,380
safely predict that if you don't already

976
00:37:14,380 --> 00:37:16,720
you will start doing these things the

977
00:37:16,720 --> 00:37:17,800
data says that as you gain experience

978
00:37:17,800 --> 00:37:21,910
you will pick these up webpack is 80% of

979
00:37:21,910 --> 00:37:23,080
bundling and it seems like a safe bet

980
00:37:23,080 --> 00:37:24,400
for a while

981
00:37:24,400 --> 00:37:26,410
es lint will almost certainly stay the

982
00:37:26,410 --> 00:37:28,450
most popular linter and babble will

983
00:37:28,450 --> 00:37:29,509
remain the transpiler

984
00:37:29,509 --> 00:37:32,380
choice but don't forget about typescript

985
00:37:32,380 --> 00:37:34,459
46% of you are already using typescript

986
00:37:34,459 --> 00:37:36,589
and that's still surprising to me even

987
00:37:36,589 --> 00:37:37,819
though I've been staring in this data

988
00:37:37,819 --> 00:37:40,399
for months so the biggest prediction of

989
00:37:40,399 --> 00:37:42,439
this talk may be that you will stop

990
00:37:42,439 --> 00:37:43,939
writing JavaScript and start writing

991
00:37:43,939 --> 00:37:47,449
typescript instead an obvious question

992
00:37:47,449 --> 00:37:48,829
that comes out of that prediction is

993
00:37:48,829 --> 00:37:50,749
what happens to NPM if everybody stops

994
00:37:50,749 --> 00:37:52,189
writing javascript and start starting

995
00:37:52,189 --> 00:37:54,559
typescript instead and the answer is

996
00:37:54,559 --> 00:37:56,329
nothing and the way that I know that is

997
00:37:56,329 --> 00:37:57,949
because it already happened and you

998
00:37:57,949 --> 00:38:01,459
didn't even notice a big percentage of

999
00:38:01,459 --> 00:38:03,559
the modules on NPM right now are native

1000
00:38:03,559 --> 00:38:06,229
code there see they compile when you

1001
00:38:06,229 --> 00:38:07,789
install them and you use them in

1002
00:38:07,789 --> 00:38:09,229
JavaScript without even noticing that

1003
00:38:09,229 --> 00:38:11,359
you are using a pile of see even more

1004
00:38:11,359 --> 00:38:13,219
packages are written in es6 which is

1005
00:38:13,219 --> 00:38:14,779
JavaScript but not the JavaScript you

1006
00:38:14,779 --> 00:38:15,709
can actually use a new browser

1007
00:38:15,709 --> 00:38:17,569
everything just gets transpiled before

1008
00:38:17,569 --> 00:38:19,130
it goes to the before it goes to the

1009
00:38:19,130 --> 00:38:21,439
browser all of react is written in es6

1010
00:38:21,439 --> 00:38:23,059
which is a version of javascript that

1011
00:38:23,059 --> 00:38:26,239
doesn't really exist yet and you didn't

1012
00:38:26,239 --> 00:38:27,799
notice react just happened and you

1013
00:38:27,799 --> 00:38:29,209
didn't have to care about the fact that

1014
00:38:29,209 --> 00:38:30,799
it's written in this imaginary version

1015
00:38:30,799 --> 00:38:34,189
of javascript there are tons of packages

1016
00:38:34,189 --> 00:38:35,569
written in CoffeeScript sand type

1017
00:38:35,569 --> 00:38:36,649
scripts and a whole bunch of other

1018
00:38:36,649 --> 00:38:38,149
languages and you've not noticed that

1019
00:38:38,149 --> 00:38:39,829
any of them are there and that is great

1020
00:38:39,829 --> 00:38:43,219
that interoperability is amazing one of

1021
00:38:43,219 --> 00:38:44,719
the most exciting developments on this

1022
00:38:44,719 --> 00:38:46,249
front is wisdom

1023
00:38:46,249 --> 00:38:49,519
that's webassembly to you and me whether

1024
00:38:49,519 --> 00:38:51,289
simply lets you write in any language

1025
00:38:51,289 --> 00:38:53,959
any compiled language and turn it into

1026
00:38:53,959 --> 00:38:55,609
java scripts but unlike transpile

1027
00:38:55,609 --> 00:38:57,889
javascript it runs as fast as native

1028
00:38:57,889 --> 00:38:59,389
code you can get desktop like

1029
00:38:59,389 --> 00:39:02,209
performance in the browser using wasm to

1030
00:39:02,209 --> 00:39:04,309
compile native code that's a really

1031
00:39:04,309 --> 00:39:06,829
really interesting idea it provides a

1032
00:39:06,829 --> 00:39:08,809
way to give web apps really amazing

1033
00:39:08,809 --> 00:39:10,219
performance for computationally

1034
00:39:10,219 --> 00:39:13,279
expensive tasks and the best part of it

1035
00:39:13,279 --> 00:39:15,380
is that it's already here and again you

1036
00:39:15,380 --> 00:39:17,539
didn't notice woz impac is a tool from

1037
00:39:17,539 --> 00:39:19,759
mozilla that lets you write code in rust

1038
00:39:19,759 --> 00:39:21,859
and then publish it to npm just like any

1039
00:39:21,859 --> 00:39:23,539
other javascript package and use it from

1040
00:39:23,539 --> 00:39:25,969
javascript without noticing in fact that

1041
00:39:25,969 --> 00:39:27,889
seems like it's already leaking its way

1042
00:39:27,889 --> 00:39:29,689
into the registry so whaza might already

1043
00:39:29,689 --> 00:39:31,459
be in your stack without you noticing

1044
00:39:31,459 --> 00:39:35,029
and that brings me to my other big

1045
00:39:35,029 --> 00:39:36,380
prediction which is no matter what

1046
00:39:36,380 --> 00:39:38,449
happens npm is here to stay

1047
00:39:38,449 --> 00:39:40,579
whether javascript stays big or whether

1048
00:39:40,579 --> 00:39:42,229
web development becomes writing a bunch

1049
00:39:42,229 --> 00:39:42,850
of application

1050
00:39:42,850 --> 00:39:46,240
in rust the huge pile of delicious

1051
00:39:46,240 --> 00:39:47,800
delicious packages is going to keep us

1052
00:39:47,800 --> 00:39:49,930
coming back to npm for a long time

1053
00:39:49,930 --> 00:39:52,330
NPM might one day be a registry that's

1054
00:39:52,330 --> 00:39:53,830
not full of Java scripts but it will

1055
00:39:53,830 --> 00:39:55,570
still be the way that you put websites

1056
00:39:55,570 --> 00:39:59,320
together I've been doing web development

1057
00:39:59,320 --> 00:40:01,600
now for 22 years and it has always

1058
00:40:01,600 --> 00:40:03,370
thrilled me and no less so than right

1059
00:40:03,370 --> 00:40:05,950
now the stuff that we can do on the web

1060
00:40:05,950 --> 00:40:08,950
is amazing and wonderful and scary and

1061
00:40:08,950 --> 00:40:11,260
the tools that we use to make it are ad

1062
00:40:11,260 --> 00:40:14,470
hoc and broken and partially fixed and

1063
00:40:14,470 --> 00:40:16,960
my final prediction is that that's the

1064
00:40:16,960 --> 00:40:20,410
way it's always gonna be we remake the

1065
00:40:20,410 --> 00:40:22,300
web's so quickly that the tools are

1066
00:40:22,300 --> 00:40:24,010
never gonna be done it's never gonna be

1067
00:40:24,010 --> 00:40:25,390
finished it's never gonna be a perfect

1068
00:40:25,390 --> 00:40:28,240
story and that is how you know that the

1069
00:40:28,240 --> 00:40:30,130
web is growing that's why the web has

1070
00:40:30,130 --> 00:40:32,080
managed to stay so vibrant for so long

1071
00:40:32,080 --> 00:40:34,510
because it reinvents itself every five

1072
00:40:34,510 --> 00:40:35,230
years

1073
00:40:35,230 --> 00:40:37,600
I find that tremendously exciting I hope

1074
00:40:37,600 --> 00:40:39,610
you find it tremendously exciting and I

1075
00:40:39,610 --> 00:40:41,080
hope you all stick around for the next

1076
00:40:41,080 --> 00:40:42,790
22 years to see what happens

1077
00:40:42,790 --> 00:40:49,309
thank you very much

