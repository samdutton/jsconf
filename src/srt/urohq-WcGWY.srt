1
00:00:00,320 --> 00:00:02,070

[Music]

2
00:00:02,070 --> 00:00:03,840
[Applause]

3
00:00:03,840 --> 00:00:05,660
[Music]

4
00:00:05,660 --> 00:00:07,410
[Applause]

5
00:00:07,410 --> 00:00:09,280
[Music]

6
00:00:09,280 --> 00:00:11,020
[Applause]

7
00:00:11,020 --> 00:00:12,780
[Music]

8
00:00:12,780 --> 00:00:16,860
[Applause]

9
00:00:16,870 --> 00:00:23,550
[Music]

10
00:00:23,550 --> 00:00:29,309
[Applause]

11
00:00:29,309 --> 00:00:35,020
hello my name is Francis I look like

12
00:00:35,020 --> 00:00:38,620
this most places on the internet and I

13
00:00:38,620 --> 00:00:42,489
work a bustle VP of engineering a puzzle

14
00:00:42,489 --> 00:00:46,540
and so we are a Content site where

15
00:00:46,540 --> 00:00:49,630
digital a digital media company and a

16
00:00:49,630 --> 00:00:52,450
lot of people ask hey Francis how did

17
00:00:52,450 --> 00:00:53,739
you everyone a puzzle like that would

18
00:00:53,739 --> 00:00:56,230
say so fast and I know this one you know

19
00:00:56,230 --> 00:00:58,690
we put everything in Redis and since

20
00:00:58,690 --> 00:01:00,489
that's not a talk and it's usually

21
00:01:00,489 --> 00:01:03,579
doesn't explain anything I did make this

22
00:01:03,579 --> 00:01:05,170
talk and I call it we live in memory

23
00:01:05,170 --> 00:01:07,149
because it's a really nice way to say we

24
00:01:07,149 --> 00:01:10,000
use Redis and I'm gonna tell you about

25
00:01:10,000 --> 00:01:12,490
how we use Amazon lambda and graph :

26
00:01:12,490 --> 00:01:16,090
Redis to make a really fast API if you

27
00:01:16,090 --> 00:01:17,470
want to follow along if you want to do

28
00:01:17,470 --> 00:01:19,750
the links any of the open-source you can

29
00:01:19,750 --> 00:01:23,440
get the talks on the side here and I

30
00:01:23,440 --> 00:01:26,170
just to prove you know that we really do

31
00:01:26,170 --> 00:01:28,720
have fast api's I see 70 milliseconds in

32
00:01:28,720 --> 00:01:30,369
the title because that's the average but

33
00:01:30,369 --> 00:01:33,700
most requests are in 24 milliseconds and

34
00:01:33,700 --> 00:01:36,729
this is our API response rate and I love

35
00:01:36,729 --> 00:01:38,890
it makes me so happy if you're a stats

36
00:01:38,890 --> 00:01:41,950
nerd you'll notice the distribution

37
00:01:41,950 --> 00:01:43,960
there is a quite perfect like

38
00:01:43,960 --> 00:01:45,850
distribution and that bothers me too and

39
00:01:45,850 --> 00:01:51,010
I don't know why so this talks gonna be

40
00:01:51,010 --> 00:01:52,299
in three parts I'm gonna tell you what

41
00:01:52,299 --> 00:01:53,439
bustled is doing I'm gonna tell you how

42
00:01:53,439 --> 00:01:54,640
we're doing it and then I'm gonna say it

43
00:01:54,640 --> 00:01:59,320
tell you how you can do it so where as I

44
00:01:59,320 --> 00:02:00,909
said we're a digital media company right

45
00:02:00,909 --> 00:02:02,799
so we have you know big websites only

46
00:02:02,799 --> 00:02:05,530
show ads and you know we do all kind of

47
00:02:05,530 --> 00:02:07,289
stuff we're one of the largest

48
00:02:07,289 --> 00:02:10,390
publishers for millennial women right

49
00:02:10,390 --> 00:02:12,129
I found out we're actually just really

50
00:02:12,129 --> 00:02:13,450
big in general we're bigger than the

51
00:02:13,450 --> 00:02:16,329
Washington Post and they make news and

52
00:02:16,329 --> 00:02:18,370
we're also biggest bigger than like

53
00:02:18,370 --> 00:02:20,230
Stack Exchange which is also really

54
00:02:20,230 --> 00:02:21,940
weird because that in my head is just

55
00:02:21,940 --> 00:02:22,880
one of the most massive

56
00:02:22,880 --> 00:02:25,460
sites out there yeah and then also doing

57
00:02:25,460 --> 00:02:27,140
research I found out that WebMD is a

58
00:02:27,140 --> 00:02:28,940
digital media site we're bigger than

59
00:02:28,940 --> 00:02:30,380
them but the fact there are digital

60
00:02:30,380 --> 00:02:32,090
media site instead of maybe like I don't

61
00:02:32,090 --> 00:02:34,130
know a medical site it makes makes me

62
00:02:34,130 --> 00:02:40,070
really and we're growing right so we

63
00:02:40,070 --> 00:02:41,630
keep adding these sites to our platform

64
00:02:41,630 --> 00:02:43,790
and it means we just got to keep you

65
00:02:43,790 --> 00:02:45,140
know being able to go faster and store

66
00:02:45,140 --> 00:02:49,550
more data so what are our goals right we

67
00:02:49,550 --> 00:02:50,540
want to have the best reader experience

68
00:02:50,540 --> 00:02:52,550
right and we want to have the best

69
00:02:52,550 --> 00:02:54,080
features so we can make the most

70
00:02:54,080 --> 00:02:56,090
interesting compelling content you know

71
00:02:56,090 --> 00:02:58,460
and there is not a software project out

72
00:02:58,460 --> 00:03:00,110
there that doesn't have these same goals

73
00:03:00,110 --> 00:03:03,590
I just want to be good right our

74
00:03:03,590 --> 00:03:06,290
strategies to make this happen is we

75
00:03:06,290 --> 00:03:08,090
want a very fast page load like we got

76
00:03:08,090 --> 00:03:09,980
it we have ads to show you you know and

77
00:03:09,980 --> 00:03:12,230
we want to make it really cheap to

78
00:03:12,230 --> 00:03:14,120
change things and throw stuff away and

79
00:03:14,120 --> 00:03:19,160
try out new ideas yeah before I go much

80
00:03:19,160 --> 00:03:20,960
further I just want to say what Amazon

81
00:03:20,960 --> 00:03:23,120
lambda is because it's really easy to

82
00:03:23,120 --> 00:03:25,600
assume everybody knows that except you

83
00:03:25,600 --> 00:03:28,880
it's functions as a service and what

84
00:03:28,880 --> 00:03:30,560
does that even mean it means you get an

85
00:03:30,560 --> 00:03:33,290
API in this case an Amazon HTTP API

86
00:03:33,290 --> 00:03:35,360
alright that lets you execute your

87
00:03:35,360 --> 00:03:37,340
JavaScript or a couple other languages

88
00:03:37,340 --> 00:03:40,250
function remotely and lets you do it

89
00:03:40,250 --> 00:03:42,260
with a consistent environment right so

90
00:03:42,260 --> 00:03:44,000
you have guaranteed CPU guaranteed

91
00:03:44,000 --> 00:03:45,800
memory and it doesn't care if you have

92
00:03:45,800 --> 00:03:47,810
one running every second or a hundred

93
00:03:47,810 --> 00:03:49,550
thousand running every second you know

94
00:03:49,550 --> 00:03:51,170
you're guaranteed to have just as much

95
00:03:51,170 --> 00:03:52,760
memory and CPU available to every

96
00:03:52,760 --> 00:03:55,430
request and this makes scaling easier

97
00:03:55,430 --> 00:03:58,250
right and we're using it because we were

98
00:03:58,250 --> 00:03:59,570
able to take a whole bunch of app

99
00:03:59,570 --> 00:04:01,520
servers that we had there to handle push

100
00:04:01,520 --> 00:04:03,350
notifications and unpredictable traffic

101
00:04:03,350 --> 00:04:05,630
and we're paying about 30km month and

102
00:04:05,630 --> 00:04:08,120
now we're paying 3km up you know in

103
00:04:08,120 --> 00:04:10,880
lambda and sometimes we have like 15 20

104
00:04:10,880 --> 00:04:13,070
X or normal traffic for like two minutes

105
00:04:13,070 --> 00:04:16,280
you know and that that's sucks well I

106
00:04:16,280 --> 00:04:18,109
mean that's hard I should say it's

107
00:04:18,109 --> 00:04:21,830
actually really amazing and so and over

108
00:04:21,830 --> 00:04:23,270
the time since we've been we've been

109
00:04:23,270 --> 00:04:26,270
building this platform for two years in

110
00:04:26,270 --> 00:04:28,340
this incarnation or so and we've grown

111
00:04:28,340 --> 00:04:29,220
about 10

112
00:04:29,220 --> 00:04:31,110
in that amount and I haven't had to

113
00:04:31,110 --> 00:04:32,580
worry about it it's still the same

114
00:04:32,580 --> 00:04:34,740
functions doing the same stuff you know

115
00:04:34,740 --> 00:04:35,910
it's got to make sure the database can

116
00:04:35,910 --> 00:04:38,700
stay up to speed and you know I will

117
00:04:38,700 --> 00:04:40,950
have to worry about it soon but but it's

118
00:04:40,950 --> 00:04:44,730
bought us a lot so how does it actually

119
00:04:44,730 --> 00:04:50,430
work right it works like this so when

120
00:04:50,430 --> 00:04:52,260
you go and load this article and why

121
00:04:52,260 --> 00:04:53,580
your kid wants to hear good night moon

122
00:04:53,580 --> 00:04:57,540
again hits our CDN you know the CDN will

123
00:04:57,540 --> 00:04:59,130
give you the rendered content or if

124
00:04:59,130 --> 00:05:00,690
you're if you're already have the page

125
00:05:00,690 --> 00:05:02,340
loaded and it's an API request to go

126
00:05:02,340 --> 00:05:04,050
straight to the API we render everything

127
00:05:04,050 --> 00:05:07,350
and react our API is handled by graph QL

128
00:05:07,350 --> 00:05:08,760
and all the data comes from reddest

129
00:05:08,760 --> 00:05:10,920
elasticsearch and you can sort of split

130
00:05:10,920 --> 00:05:13,260
this up into a few layers the CDN layer

131
00:05:13,260 --> 00:05:15,390
the rendering layer the API layer the

132
00:05:15,390 --> 00:05:19,950
database layer and the CDN tries really

133
00:05:19,950 --> 00:05:22,230
hard not to bother anyone else with

134
00:05:22,230 --> 00:05:24,060
anything if you can serve your request

135
00:05:24,060 --> 00:05:26,310
the CDN servers are much closer to where

136
00:05:26,310 --> 00:05:27,900
you live you know they're all around the

137
00:05:27,900 --> 00:05:30,540
world and I would rather everything to

138
00:05:30,540 --> 00:05:32,190
be served out of the CDN I would rather

139
00:05:32,190 --> 00:05:36,240
be 100% CDN served site but you know

140
00:05:36,240 --> 00:05:38,340
there's a couple options you can use

141
00:05:38,340 --> 00:05:40,110
especially if this stack right now we're

142
00:05:40,110 --> 00:05:42,480
using fastly but I actually have one

143
00:05:42,480 --> 00:05:44,340
more requirement I want out of my CDN is

144
00:05:44,340 --> 00:05:46,470
that it should execute my functions this

145
00:05:46,470 --> 00:05:48,060
is weird because a function execution

146
00:05:48,060 --> 00:05:51,750
isn't exactly an HTTP request and but

147
00:05:51,750 --> 00:05:52,980
it's close enough and it can give them

148
00:05:52,980 --> 00:05:54,180
the same data and it should be a

149
00:05:54,180 --> 00:05:54,930
question again

150
00:05:54,930 --> 00:05:56,730
and so in this world where I don't

151
00:05:56,730 --> 00:05:58,800
actually have any web servers I don't

152
00:05:58,800 --> 00:06:00,390
want to have an upstream web server I

153
00:06:00,390 --> 00:06:02,669
want to have you know the CDN do all the

154
00:06:02,669 --> 00:06:05,130
work and so we accomplished this kind of

155
00:06:05,130 --> 00:06:06,960
hacky we have API gateway which is

156
00:06:06,960 --> 00:06:09,510
Amazon's web server for functions and

157
00:06:09,510 --> 00:06:11,490
that executes sar lambda and then we

158
00:06:11,490 --> 00:06:13,169
have fastly in front of it and fastly

159
00:06:13,169 --> 00:06:14,669
gives us really fast cache invalidation

160
00:06:14,669 --> 00:06:16,680
so when we update a post it's

161
00:06:16,680 --> 00:06:18,900
it's a pushed out to follow the seed in

162
00:06:18,900 --> 00:06:21,090
and 100 a minute usually under a second

163
00:06:21,090 --> 00:06:24,090
to actually there's a near future where

164
00:06:24,090 --> 00:06:25,890
maybe we use cloud flower workers or

165
00:06:25,890 --> 00:06:26,620
they run

166
00:06:26,620 --> 00:06:29,290
and have a v8 running in in the edge or

167
00:06:29,290 --> 00:06:31,270
we use cloud front with their lambda at

168
00:06:31,270 --> 00:06:32,800
the edge and have these executor

169
00:06:32,800 --> 00:06:34,180
functions for us and that way we can

170
00:06:34,180 --> 00:06:36,699
drop a whole hop about 10 or 15

171
00:06:36,699 --> 00:06:38,979
milliseconds and you know we can we can

172
00:06:38,979 --> 00:06:42,310
serve up stuff that much faster still a

173
00:06:42,310 --> 00:06:44,229
little an experimentation but I think

174
00:06:44,229 --> 00:06:45,430
this is something CD ends are going to

175
00:06:45,430 --> 00:06:49,060
do from out of the box pretty soon their

176
00:06:49,060 --> 00:06:51,370
rendering layer you know so this is a

177
00:06:51,370 --> 00:06:53,949
function right and it gives us a status

178
00:06:53,949 --> 00:06:56,740
and eight a body and headers and that's

179
00:06:56,740 --> 00:06:58,360
everything you need for an HTTP response

180
00:06:58,360 --> 00:07:00,160
you know it's got a couple of

181
00:07:00,160 --> 00:07:02,110
responsibilities like this is the app of

182
00:07:02,110 --> 00:07:03,729
bustled you know we're all client-side

183
00:07:03,729 --> 00:07:05,350
apps and so it's got to do the

184
00:07:05,350 --> 00:07:06,669
server-side rendering it's got to serve

185
00:07:06,669 --> 00:07:08,949
up all the assets in a good way it's got

186
00:07:08,949 --> 00:07:10,780
to you know be smart about the

187
00:07:10,780 --> 00:07:12,699
components and the style shades and

188
00:07:12,699 --> 00:07:15,070
break it all apart and so you know we

189
00:07:15,070 --> 00:07:17,620
use react for our CMS's we use pre-act

190
00:07:17,620 --> 00:07:20,350
because it's not much smaller for when

191
00:07:20,350 --> 00:07:23,010
you go to bustled calm or raw / calm and

192
00:07:23,010 --> 00:07:25,720
webpack makes everything possible we

193
00:07:25,720 --> 00:07:28,870
even went pack the api we're happy with

194
00:07:28,870 --> 00:07:31,990
how that works the api it's got a couple

195
00:07:31,990 --> 00:07:34,690
of responsibilities it wants to take a

196
00:07:34,690 --> 00:07:36,700
query and return some data you know and

197
00:07:36,700 --> 00:07:38,470
then when you want to make a change yeah

198
00:07:38,470 --> 00:07:40,300
take some input change the state and

199
00:07:40,300 --> 00:07:43,360
then return some data and I have the

200
00:07:43,360 --> 00:07:45,220
requirement that I want it to be strict

201
00:07:45,220 --> 00:07:47,919
I want it to guarantee that when you ask

202
00:07:47,919 --> 00:07:48,970
for a field do you know what you're

203
00:07:48,970 --> 00:07:52,030
getting and you always get it and so we

204
00:07:52,030 --> 00:07:54,910
use graph QL right because graph qo does

205
00:07:54,910 --> 00:07:59,169
all these things we're able to we start

206
00:07:59,169 --> 00:08:01,090
of like a dozen record services and so

207
00:08:01,090 --> 00:08:02,199
whenever we wanted to make a request

208
00:08:02,199 --> 00:08:03,580
we'd have to go and get it from one and

209
00:08:03,580 --> 00:08:05,349
the other and the other and then try to

210
00:08:05,349 --> 00:08:07,270
get them all back and then sometimes if

211
00:08:07,270 --> 00:08:09,070
we didn't implement it right status

212
00:08:09,070 --> 00:08:10,750
codes to be different you know err

213
00:08:10,750 --> 00:08:12,760
errors would be a different shape we had

214
00:08:12,760 --> 00:08:14,979
a lot of ifs in our in our response

215
00:08:14,979 --> 00:08:16,660
handling to try to normalize it in fact

216
00:08:16,660 --> 00:08:18,250
our front-end team did more data

217
00:08:18,250 --> 00:08:20,199
normalization than our than our API team

218
00:08:20,199 --> 00:08:22,720
and graph QL kind of gave us a single

219
00:08:22,720 --> 00:08:24,550
place a single end point where we put

220
00:08:24,550 --> 00:08:26,470
everything behind one thing and we wrap

221
00:08:26,470 --> 00:08:28,000
all our third-party services and stuff

222
00:08:28,000 --> 00:08:30,490
in this - it's helped a lot to have one

223
00:08:30,490 --> 00:08:33,459
way to do things and the last player is

224
00:08:33,459 --> 00:08:35,740
the database layer and you just want it

225
00:08:35,740 --> 00:08:37,599
to store data safely right and you

226
00:08:37,599 --> 00:08:39,030
wanted to retrieve data fast

227
00:08:39,030 --> 00:08:41,219
and I wanted to retrieve data fast in a

228
00:08:41,219 --> 00:08:44,099
consistent time because it doesn't help

229
00:08:44,099 --> 00:08:46,050
me if I ask for a post and I get it and

230
00:08:46,050 --> 00:08:48,150
and you know in under 70 milliseconds

231
00:08:48,150 --> 00:08:49,500
and then I asked for it again later and

232
00:08:49,500 --> 00:08:51,630
I get it in its second and a half like I

233
00:08:51,630 --> 00:08:54,180
think that's broken yeah I want it to be

234
00:08:54,180 --> 00:08:56,850
much much faster and so actually it can

235
00:08:56,850 --> 00:08:58,530
even be slow if I know how fast it is

236
00:08:58,530 --> 00:09:01,260
and in order to get this we use Redis as

237
00:09:01,260 --> 00:09:04,830
our primary data star so if you don't

238
00:09:04,830 --> 00:09:07,110
know Redis it's a data structure server

239
00:09:07,110 --> 00:09:09,240
and it slow gives you things like hashes

240
00:09:09,240 --> 00:09:10,830
and started sets and let you talk to it

241
00:09:10,830 --> 00:09:11,580
over the network

242
00:09:11,580 --> 00:09:13,140
let's do kind of operations on the stuff

243
00:09:13,140 --> 00:09:15,180
remember a lot of people use this for

244
00:09:15,180 --> 00:09:17,640
cash or maybe they put their sessions in

245
00:09:17,640 --> 00:09:18,750
there because they could have sort of a

246
00:09:18,750 --> 00:09:21,000
little JSON session in there and it's

247
00:09:21,000 --> 00:09:22,710
really fast and gives it back but if

248
00:09:22,710 --> 00:09:24,540
Redis dies you know if you if the

249
00:09:24,540 --> 00:09:26,490
process exits all the data is gone and

250
00:09:26,490 --> 00:09:29,520
you know what that's okay but just

251
00:09:29,520 --> 00:09:30,870
because as good of that doesn't mean

252
00:09:30,870 --> 00:09:32,610
it's actually not good as a database

253
00:09:32,610 --> 00:09:35,490
it's got known persistence and most

254
00:09:35,490 --> 00:09:36,750
people when they hear we use it they

255
00:09:36,750 --> 00:09:38,370
they don't they don't know that because

256
00:09:38,370 --> 00:09:39,450
why would you turn it on if it's

257
00:09:39,450 --> 00:09:43,589
ephemeral data all right and so I tell

258
00:09:43,589 --> 00:09:47,339
them and they don't believe me so I'm

259
00:09:47,339 --> 00:09:50,820
gonna show you whenever I write comes in

260
00:09:50,820 --> 00:09:52,530
it gets appended to this append-only

261
00:09:52,530 --> 00:09:55,350
file which is how it is a lot of

262
00:09:55,350 --> 00:09:56,610
databases have this kind of thing this

263
00:09:56,610 --> 00:09:59,160
is the write log yeah and every second

264
00:09:59,160 --> 00:10:00,720
we write this to disk so if the process

265
00:10:00,720 --> 00:10:02,790
itself crashes which we haven't ever had

266
00:10:02,790 --> 00:10:07,260
happen in four years but but it can it

267
00:10:07,260 --> 00:10:08,910
we can just start it up again

268
00:10:08,910 --> 00:10:10,170
I'll pick up where I left off that's

269
00:10:10,170 --> 00:10:11,339
what everything back to memory and we're

270
00:10:11,339 --> 00:10:14,160
fine we take that throw test3 but we

271
00:10:14,160 --> 00:10:15,900
also take a full shot of memory which is

272
00:10:15,900 --> 00:10:17,910
a little faster to load that's the Rd be

273
00:10:17,910 --> 00:10:20,580
the Redis database file and we put that

274
00:10:20,580 --> 00:10:22,620
desk three two and so we can restore

275
00:10:22,620 --> 00:10:24,089
another machine we were start staging

276
00:10:24,089 --> 00:10:26,010
every night off that data and you know

277
00:10:26,010 --> 00:10:27,839
and we just have as much I haven't had

278
00:10:27,839 --> 00:10:30,930
as good data retention in Postgres or

279
00:10:30,930 --> 00:10:32,760
anything else I mean I mean and that's

280
00:10:32,760 --> 00:10:34,380
that's the fault of the problem that's

281
00:10:34,380 --> 00:10:35,970
the pole of our ops you know you can do

282
00:10:35,970 --> 00:10:38,580
this pretty much any database of course

283
00:10:38,580 --> 00:10:39,780
we have high availability there read

284
00:10:39,780 --> 00:10:42,390
replicas in the primary so if it does if

285
00:10:42,390 --> 00:10:44,339
it does exist it will readers won't

286
00:10:44,339 --> 00:10:45,600
notice maybe we'll lose a couple of

287
00:10:45,600 --> 00:10:47,430
requests well switches over that's

288
00:10:47,430 --> 00:10:50,400
and this works very well for us you know

289
00:10:50,400 --> 00:10:54,720
and you can you could do this with your

290
00:10:54,720 --> 00:10:57,060
tool of choice this really this talk I

291
00:10:57,060 --> 00:10:59,040
love Radisson I would love to actually

292
00:10:59,040 --> 00:11:02,160
give an entire read of stock but but

293
00:11:02,160 --> 00:11:03,360
this really could be any database

294
00:11:03,360 --> 00:11:05,040
whatever your favorite is it will work

295
00:11:05,040 --> 00:11:08,730
just fine so if we take our stock and

296
00:11:08,730 --> 00:11:10,290
we've split it up into the layers you

297
00:11:10,290 --> 00:11:12,090
know the CDN tries to do everything I

298
00:11:12,090 --> 00:11:13,530
can not to bother anyone the rendering

299
00:11:13,530 --> 00:11:15,240
gives you the rendered content you know

300
00:11:15,240 --> 00:11:17,520
the API you know well forms and handles

301
00:11:17,520 --> 00:11:19,530
all the changes to stay in the database

302
00:11:19,530 --> 00:11:23,160
keeps everything safe we're gonna talk

303
00:11:23,160 --> 00:11:26,220
about this part because part of the part

304
00:11:26,220 --> 00:11:28,800
I know the most I'm not gonna talk about

305
00:11:28,800 --> 00:11:30,900
elasticsearch but we use it you know for

306
00:11:30,900 --> 00:11:34,530
search and we also related content and

307
00:11:34,530 --> 00:11:36,450
some other nice things you know it's

308
00:11:36,450 --> 00:11:38,610
great but in the end of the day Redis is

309
00:11:38,610 --> 00:11:41,730
the primary so let's make an example I

310
00:11:41,730 --> 00:11:43,500
recently became a dad and so all my

311
00:11:43,500 --> 00:11:46,080
shoes are dad shoes you know and so I

312
00:11:46,080 --> 00:11:47,820
heard it's actually hard to pull off dad

313
00:11:47,820 --> 00:11:49,500
shoes and so I was like well let's check

314
00:11:49,500 --> 00:11:51,960
it out and at the top of Google there's

315
00:11:51,960 --> 00:11:54,420
a bustle article about dad shoes yeah

316
00:11:54,420 --> 00:11:56,970
and it turns out the secret to dad shoes

317
00:11:56,970 --> 00:12:00,210
is wearing a flowy skirt but if you look

318
00:12:00,210 --> 00:12:05,160
at the data that goes into this post you

319
00:12:05,160 --> 00:12:07,680
have what you would expect it's a JSON

320
00:12:07,680 --> 00:12:09,750
blog right and we have sort of this tree

321
00:12:09,750 --> 00:12:13,080
of data we have the site it's bustled it

322
00:12:13,080 --> 00:12:15,480
has a post on the post field you know

323
00:12:15,480 --> 00:12:17,280
and it has all the data for the post and

324
00:12:17,280 --> 00:12:19,530
Escada the post has an author field that

325
00:12:19,530 --> 00:12:22,290
has a user object it has a tags field

326
00:12:22,290 --> 00:12:24,330
which has an array of tags and this

327
00:12:24,330 --> 00:12:26,160
matches our graph QL querying real

328
00:12:26,160 --> 00:12:29,730
closely we're asking for this in the

329
00:12:29,730 --> 00:12:31,710
same shape and there's a little bit of

330
00:12:31,710 --> 00:12:33,390
prescription here because we can ask for

331
00:12:33,390 --> 00:12:34,650
it like this we get like this and we use

332
00:12:34,650 --> 00:12:37,050
it like this but if we got it back you

333
00:12:37,050 --> 00:12:39,210
know one request for each tag or even if

334
00:12:39,210 --> 00:12:41,400
nested data if we got it back in a flat

335
00:12:41,400 --> 00:12:44,280
format you know like with a JSON API or

336
00:12:44,280 --> 00:12:46,320
something we would basically go and

337
00:12:46,320 --> 00:12:47,850
build the shape again you know to give

338
00:12:47,850 --> 00:12:50,160
it to our components so we've been very

339
00:12:50,160 --> 00:12:51,960
happy with this you also get only the

340
00:12:51,960 --> 00:12:54,000
fields you asked for so we can you know

341
00:12:54,000 --> 00:12:55,470
in the API team just keep throwing stuff

342
00:12:55,470 --> 00:12:57,240
in there for people to try out and most

343
00:12:57,240 --> 00:12:58,949
using it they do we can get forget

344
00:12:58,949 --> 00:13:00,449
fields and it pops up in their linter

345
00:13:00,449 --> 00:13:01,499
and they say oh they'll use this field

346
00:13:01,499 --> 00:13:04,399
anymore you know and it's kind of cool

347
00:13:04,399 --> 00:13:07,170
if we remove all the data we end up with

348
00:13:07,170 --> 00:13:11,040
this little tree right a graph perhaps

349
00:13:11,040 --> 00:13:14,639
of the of the names of the you know the

350
00:13:14,639 --> 00:13:16,319
types and their IDs and their

351
00:13:16,319 --> 00:13:18,389
relationships right and if we squint and

352
00:13:18,389 --> 00:13:19,579
we can make it kind of look like this

353
00:13:19,579 --> 00:13:22,649
all right so this site has a post field

354
00:13:22,649 --> 00:13:24,360
with the post and has the author field

355
00:13:24,360 --> 00:13:26,759
of the user and the tags with the tags

356
00:13:26,759 --> 00:13:28,949
if we want to describe this a little

357
00:13:28,949 --> 00:13:31,499
more graph database II you know and they

358
00:13:31,499 --> 00:13:33,869
the graph community uses the word

359
00:13:33,869 --> 00:13:37,170
predicate to describe an edge I looked

360
00:13:37,170 --> 00:13:38,490
it up on google i don't know why i'm

361
00:13:38,490 --> 00:13:41,399
sorry but the predicates here side has

362
00:13:41,399 --> 00:13:42,929
post and get a little more a little more

363
00:13:42,929 --> 00:13:44,459
descriptive with them and so we can

364
00:13:44,459 --> 00:13:47,730
store this in the database and like we

365
00:13:47,730 --> 00:13:50,699
want to represent it and in order to do

366
00:13:50,699 --> 00:13:54,569
that we built a graph database we call

367
00:13:54,569 --> 00:13:57,480
it Gradius way after an old video game

368
00:13:57,480 --> 00:13:59,279
and this is actually the name of our

369
00:13:59,279 --> 00:14:01,019
whole API in the graph database the kind

370
00:14:01,019 --> 00:14:03,990
of game hand in hand and this has

371
00:14:03,990 --> 00:14:06,329
allowed us to grow with a relatively

372
00:14:06,329 --> 00:14:07,949
small engineering team where were less

373
00:14:07,949 --> 00:14:10,379
than 15 people you know over the past

374
00:14:10,379 --> 00:14:12,179
couple years only we could have done it

375
00:14:12,179 --> 00:14:14,670
without this so whenever I say what

376
00:14:14,670 --> 00:14:17,100
graph database immediately people say oh

377
00:14:17,100 --> 00:14:20,699
like neo4j right and exactly like neo4j

378
00:14:20,699 --> 00:14:22,499
except it doesn't do anything to offer

379
00:14:22,499 --> 00:14:25,769
to us your fridge a is amazing it's a

380
00:14:25,769 --> 00:14:27,899
it's a very complicated actually I have

381
00:14:27,899 --> 00:14:30,269
a hard time and this is a failing of

382
00:14:30,269 --> 00:14:32,579
mine not it because they have wonderful

383
00:14:32,579 --> 00:14:35,069
beautiful tools and I wish I had but

384
00:14:35,069 --> 00:14:36,509
it's it's hard for me to understand it

385
00:14:36,509 --> 00:14:38,249
does a lot and the queries can get super

386
00:14:38,249 --> 00:14:41,100
complex right and the reason ours is

387
00:14:41,100 --> 00:14:44,100
faster is because it's because we made

388
00:14:44,100 --> 00:14:45,720
some trade-offs but I mean when people

389
00:14:45,720 --> 00:14:48,629
say databases are faster right what do

390
00:14:48,629 --> 00:14:49,920
they mean you know it's

391
00:14:49,920 --> 00:14:52,110
I had a DBA should I work for and his

392
00:14:52,110 --> 00:14:54,540
big analogy was trans art slow they have

393
00:14:54,540 --> 00:14:56,129
one speed that people get it on up on

394
00:14:56,129 --> 00:14:58,559
and off and the people are slow right

395
00:14:58,559 --> 00:15:00,240
but if there were no people the trans

396
00:15:00,240 --> 00:15:02,279
would be super fast databases are the

397
00:15:02,279 --> 00:15:04,290
same they aren't slow the data going in

398
00:15:04,290 --> 00:15:06,089
and out it's the queries that are slow

399
00:15:06,089 --> 00:15:07,980
and they specially said this every

400
00:15:07,980 --> 00:15:09,029
single time somebody complain the

401
00:15:09,029 --> 00:15:11,540
databases for slow

402
00:15:11,540 --> 00:15:14,550
but you can build a faster train and I

403
00:15:14,550 --> 00:15:16,320
was the trade-off we made in fact we

404
00:15:16,320 --> 00:15:18,900
traded query flexibility for speed and

405
00:15:18,900 --> 00:15:20,550
we made it super difficult to make a

406
00:15:20,550 --> 00:15:23,760
slow query you know and if you can't

407
00:15:23,760 --> 00:15:25,170
have a slow query then everything is

408
00:15:25,170 --> 00:15:30,330
fast right oh I think I should say yeah

409
00:15:30,330 --> 00:15:32,820
we because it's not flexible because we

410
00:15:32,820 --> 00:15:34,260
can't do these complex queries we

411
00:15:34,260 --> 00:15:36,330
replicate to other databases elastic

412
00:15:36,330 --> 00:15:37,530
search being one of them you know for

413
00:15:37,530 --> 00:15:40,950
search but also to bigquery for you know

414
00:15:40,950 --> 00:15:44,280
doing analytics and for you know you can

415
00:15:44,280 --> 00:15:45,810
get a feed all the changes and so we're

416
00:15:45,810 --> 00:15:47,190
playing of different databases you know

417
00:15:47,190 --> 00:15:49,500
we have our DBMS is for reporting you

418
00:15:49,500 --> 00:15:51,000
know but a rightist remains this for

419
00:15:51,000 --> 00:15:55,560
sector so we don't love open source we

420
00:15:55,560 --> 00:15:57,660
just had Ghost 2.0 got released various

421
00:15:57,660 --> 00:15:59,640
ghost that uses mobile doc as a data

422
00:15:59,640 --> 00:16:01,350
storage and we helped develop mobile doc

423
00:16:01,350 --> 00:16:04,140
that's how we store all of our posts and

424
00:16:04,140 --> 00:16:06,510
so we haven't been able to open source

425
00:16:06,510 --> 00:16:09,120
Gradius because it's everything and it's

426
00:16:09,120 --> 00:16:10,440
in no shape to be shared with other

427
00:16:10,440 --> 00:16:12,300
people and so i started porting

428
00:16:12,300 --> 00:16:14,400
everything to something I call Nemesis

429
00:16:14,400 --> 00:16:18,060
DB Nemesis is the US arcade port of the

430
00:16:18,060 --> 00:16:20,160
gradius game so I figured it was a good

431
00:16:20,160 --> 00:16:23,070
name for it and it's really fast you

432
00:16:23,070 --> 00:16:24,630
know as fast as iris already got

433
00:16:24,630 --> 00:16:26,130
features I wish I could use and Gradius

434
00:16:26,130 --> 00:16:27,900
and as soon as we get it to a certain

435
00:16:27,900 --> 00:16:29,520
point I want to advertise cluster

436
00:16:29,520 --> 00:16:31,980
support so we can get much bigger we

437
00:16:31,980 --> 00:16:34,140
we're switching the whole company to it

438
00:16:34,140 --> 00:16:37,230
it'll be a nice little migration by it's

439
00:16:37,230 --> 00:16:40,170
not done however I use it completely in

440
00:16:40,170 --> 00:16:41,850
this talk it does everything we showed

441
00:16:41,850 --> 00:16:43,740
you here today and if this interests you

442
00:16:43,740 --> 00:16:45,210
if you want to know how it works please

443
00:16:45,210 --> 00:16:47,190
see me after please check it out and

444
00:16:47,190 --> 00:16:49,770
open many issues and and like the fire

445
00:16:49,770 --> 00:16:50,940
for me to finish this because I think

446
00:16:50,940 --> 00:16:54,630
it'd be better for everybody so let's

447
00:16:54,630 --> 00:16:58,200
make a graph QL server we're gonna go

448
00:16:58,200 --> 00:16:59,340
over the tools we're gonna go over to

449
00:16:59,340 --> 00:17:00,690
what a schema is we're gonna go over how

450
00:17:00,690 --> 00:17:02,040
the resolvers work and I talked about

451
00:17:02,040 --> 00:17:07,850
the loaders and this is our package JSON

452
00:17:07,850 --> 00:17:09,870
dependencies are Apollo server

453
00:17:09,870 --> 00:17:11,730
I love Apollo I wish I actually used

454
00:17:11,730 --> 00:17:15,390
Apollo server for Gradius we started it

455
00:17:15,390 --> 00:17:17,670
before it was ready I think but it's

456
00:17:17,670 --> 00:17:19,000
totally ready now

457
00:17:19,000 --> 00:17:22,510
and it's not that complex either and

458
00:17:22,510 --> 00:17:23,920
that makes me happy it's hard to make

459
00:17:23,920 --> 00:17:25,689
simple things and so the Apollo tools

460
00:17:25,689 --> 00:17:27,400
and Apollo server stuff they've they've

461
00:17:27,400 --> 00:17:29,410
been able to help make a more

462
00:17:29,410 --> 00:17:30,760
straightforward to develop and I'm very

463
00:17:30,760 --> 00:17:32,830
happy with it

464
00:17:32,830 --> 00:17:35,500
and so our server file and this is what

465
00:17:35,500 --> 00:17:36,730
you would use for developing on your own

466
00:17:36,730 --> 00:17:41,560
machine reads like this you know you do

467
00:17:41,560 --> 00:17:45,010
your requires and you get all your type

468
00:17:45,010 --> 00:17:46,660
definitions it's just a file you read

469
00:17:46,660 --> 00:17:49,180
into a string and then you start the

470
00:17:49,180 --> 00:17:50,920
server and you say here that here is the

471
00:17:50,920 --> 00:17:53,170
schema here are my results and don't

472
00:17:53,170 --> 00:17:54,730
listen on a port there's not much more

473
00:17:54,730 --> 00:17:59,290
to it if you have a lambda you know we

474
00:17:59,290 --> 00:18:00,880
need to play to lambda it's the same

475
00:18:00,880 --> 00:18:02,530
thing except they have a slightly

476
00:18:02,530 --> 00:18:04,030
different server which knows how to

477
00:18:04,030 --> 00:18:05,590
handle the lambda requests and instead

478
00:18:05,590 --> 00:18:07,690
of listening on a port you tell lambda

479
00:18:07,690 --> 00:18:09,130
hey this is the name of this is the

480
00:18:09,130 --> 00:18:10,810
function you call for each request and

481
00:18:10,810 --> 00:18:15,310
it handles handles the rest but what it

482
00:18:15,310 --> 00:18:17,620
gives you is a lot so you have the it

483
00:18:17,620 --> 00:18:19,570
can process graph you all queries but it

484
00:18:19,570 --> 00:18:21,280
also gives you graphical which is a tool

485
00:18:21,280 --> 00:18:23,590
that you can use to play with queries

486
00:18:23,590 --> 00:18:25,330
all right and so I forgive me some

487
00:18:25,330 --> 00:18:27,070
graphical czar white some are black some

488
00:18:27,070 --> 00:18:28,600
are dark I don't know how easy this is

489
00:18:28,600 --> 00:18:31,090
to read but this is a query on the left

490
00:18:31,090 --> 00:18:32,500
on the data on the right and a big play

491
00:18:32,500 --> 00:18:34,690
button in the middle and so you can get

492
00:18:34,690 --> 00:18:36,790
auto completing queries where you can

493
00:18:36,790 --> 00:18:38,260
hover and see which type it's supposed

494
00:18:38,260 --> 00:18:40,210
to be and see the data it's gonna get

495
00:18:40,210 --> 00:18:42,280
copy and paste this into your component

496
00:18:42,280 --> 00:18:45,220
and use it and even better its

497
00:18:45,220 --> 00:18:47,740
documenting because there is a schema

498
00:18:47,740 --> 00:18:49,720
isn't just for the graph 12 server for

499
00:18:49,720 --> 00:18:52,360
the client - and it's able to pull out

500
00:18:52,360 --> 00:18:54,610
all the relationships so this is the

501
00:18:54,610 --> 00:18:56,740
site which has a post which has an

502
00:18:56,740 --> 00:18:58,840
author which is a user you know and you

503
00:18:58,840 --> 00:19:00,520
can see what all the types are you know

504
00:19:00,520 --> 00:19:01,540
you can see if they're gonna be null or

505
00:19:01,540 --> 00:19:04,570
not and you can click around and and if

506
00:19:04,570 --> 00:19:05,980
I broke descriptions which I didn't

507
00:19:05,980 --> 00:19:08,320
you'd see them there too or deprecations

508
00:19:08,320 --> 00:19:10,270
which I didn't you could see why we got

509
00:19:10,270 --> 00:19:14,470
rid of stuff and I I firmly github

510
00:19:14,470 --> 00:19:16,780
scratch qlae API is a wonderful shining

511
00:19:16,780 --> 00:19:19,150
example of how you can do this right you

512
00:19:19,150 --> 00:19:20,710
know we crimp stuff from them quite a

513
00:19:20,710 --> 00:19:24,490
lot so the schema defines what the data

514
00:19:24,490 --> 00:19:26,020
looks like and it doesn't care how it

515
00:19:26,020 --> 00:19:26,380
works

516
00:19:26,380 --> 00:19:28,900
so I have the state I have the posts and

517
00:19:28,900 --> 00:19:29,929
the users and

518
00:19:29,929 --> 00:19:32,179
but it all cares is what's the data it

519
00:19:32,179 --> 00:19:33,619
kind of look like when you give it to

520
00:19:33,619 --> 00:19:35,990
the API client doesn't care where it

521
00:19:35,990 --> 00:19:38,119
actually comes from and so the only

522
00:19:38,119 --> 00:19:41,029
thing required is the query right and

523
00:19:41,029 --> 00:19:43,490
here we have a field called site and the

524
00:19:43,490 --> 00:19:46,399
site has requires a name which is an

525
00:19:46,399 --> 00:19:47,749
enum so you don't have to put in quotes

526
00:19:47,749 --> 00:19:50,149
and it can only be specific things and

527
00:19:50,149 --> 00:19:51,710
it returns the site object guaranteed

528
00:19:51,710 --> 00:19:52,970
that's what the explanation point mean

529
00:19:52,970 --> 00:19:53,960
this means not normal

530
00:19:53,960 --> 00:19:57,559
and the site itself has two different

531
00:19:57,559 --> 00:19:59,330
kinds of things it's got some data the

532
00:19:59,330 --> 00:20:01,340
idea name right and that comes from our

533
00:20:01,340 --> 00:20:03,080
database and then it's got this lookup

534
00:20:03,080 --> 00:20:05,749
field post and post takes the required

535
00:20:05,749 --> 00:20:07,700
path it's a string and it will try to

536
00:20:07,700 --> 00:20:09,769
give you a post maybe give you a post

537
00:20:09,769 --> 00:20:11,990
it's not no I rather it is knowable so

538
00:20:11,990 --> 00:20:14,450
it doesn't know you know for sure that

539
00:20:14,450 --> 00:20:16,129
there is opposed to that path and that's

540
00:20:16,129 --> 00:20:19,249
okay neither do we but there's no

541
00:20:19,249 --> 00:20:20,749
difference here between data and lookup

542
00:20:20,749 --> 00:20:24,049
fields and and that comes later in the

543
00:20:24,049 --> 00:20:27,379
resolvers post is another example you

544
00:20:27,379 --> 00:20:29,929
have ID path title body those are all

545
00:20:29,929 --> 00:20:31,580
data they're just strings and numbers

546
00:20:31,580 --> 00:20:33,740
you know they could be objects but but

547
00:20:33,740 --> 00:20:36,289
they're data and the authors is a lookup

548
00:20:36,289 --> 00:20:38,659
for the user the tags does a lookup for

549
00:20:38,659 --> 00:20:40,759
the tags and we guarantee to give you an

550
00:20:40,759 --> 00:20:42,350
array and that array is guaranteed to

551
00:20:42,350 --> 00:20:45,230
have zero or more tags in it so if there

552
00:20:45,230 --> 00:20:46,190
is anything in the array it's going to

553
00:20:46,190 --> 00:20:47,450
be a time but it doesn't have to be

554
00:20:47,450 --> 00:20:49,220
anything and if you use the type

555
00:20:49,220 --> 00:20:51,230
language or if your type script you know

556
00:20:51,230 --> 00:20:52,759
you'll notice that there's no way you

557
00:20:52,759 --> 00:20:56,899
can type the length of an array and

558
00:20:56,899 --> 00:20:58,340
users and types are boring they're just

559
00:20:58,340 --> 00:21:02,029
data no that's great so the resolvers

560
00:21:02,029 --> 00:21:03,919
you don't need a resolver for everything

561
00:21:03,919 --> 00:21:05,539
just for the lookups right and this is

562
00:21:05,539 --> 00:21:08,269
where it kind of gets like this is where

563
00:21:08,269 --> 00:21:10,580
the infinite power and variability you

564
00:21:10,580 --> 00:21:12,200
know of how you million ways you can do

565
00:21:12,200 --> 00:21:14,090
things sort of as a paralyzing force

566
00:21:14,090 --> 00:21:15,350
when you're starting with crafty well

567
00:21:15,350 --> 00:21:18,080
but it just needs to return full objects

568
00:21:18,080 --> 00:21:20,899
of other things this is the you know you

569
00:21:20,899 --> 00:21:22,610
can do many things but this is the most

570
00:21:22,610 --> 00:21:26,600
common case yeah and we do it per type

571
00:21:26,600 --> 00:21:29,029
so our query has the site field and so

572
00:21:29,029 --> 00:21:31,029
it gets a function and it gives you the

573
00:21:31,029 --> 00:21:33,379
the root is nothing in the query case

574
00:21:33,379 --> 00:21:35,179
but the argument object for the second

575
00:21:35,179 --> 00:21:37,009
one if your call site had it required a

576
00:21:37,009 --> 00:21:39,619
name the site is the post field and if

577
00:21:39,619 --> 00:21:41,029
you're caught if you recall it requires

578
00:21:41,029 --> 00:21:43,220
a path but it also gives you the site as

579
00:21:43,220 --> 00:21:43,549
the

580
00:21:43,549 --> 00:21:46,399
root of that woke up field and the post

581
00:21:46,399 --> 00:21:48,019
itself you know you get the post and

582
00:21:48,019 --> 00:21:49,340
there are no fields on those lookups and

583
00:21:49,340 --> 00:21:51,259
so using that post you have to look up

584
00:21:51,259 --> 00:21:52,700
the authors and have to look up the tags

585
00:21:52,700 --> 00:21:57,440
and in practice we do it like this you

586
00:21:57,440 --> 00:21:58,909
know so this is the site looking up its

587
00:21:58,909 --> 00:22:01,639
post and so nemesis TV is something

588
00:22:01,639 --> 00:22:02,960
called a labeled edge but it just means

589
00:22:02,960 --> 00:22:05,330
you can you know on the site store a

590
00:22:05,330 --> 00:22:06,860
path and have it be a reference to

591
00:22:06,860 --> 00:22:09,259
another object and we look it up and if

592
00:22:09,259 --> 00:22:10,879
it doesn't exist we return null which is

593
00:22:10,879 --> 00:22:13,190
perfectly allowed by the schema and then

594
00:22:13,190 --> 00:22:15,559
we have and then if it does exist we go

595
00:22:15,559 --> 00:22:16,700
only find it and we return that object

596
00:22:16,700 --> 00:22:18,859
in fact we return a promise for that

597
00:22:18,859 --> 00:22:22,549
object which is just fine post is a

598
00:22:22,549 --> 00:22:24,559
little more complex but the author will

599
00:22:24,559 --> 00:22:26,179
actually each one is even more simple

600
00:22:26,179 --> 00:22:28,489
the author looks for an edge to a user

601
00:22:28,489 --> 00:22:31,789
you know and if and it returns it you

602
00:22:31,789 --> 00:22:33,230
know pulls out the ID and then actually

603
00:22:33,230 --> 00:22:34,970
goes and gets the user same thing for

604
00:22:34,970 --> 00:22:36,799
the tags except it's an array so we get

605
00:22:36,799 --> 00:22:39,080
all the edges for the for the tags and

606
00:22:39,080 --> 00:22:40,340
then we just sort of map over and get

607
00:22:40,340 --> 00:22:42,190
each one return it and promise all and

608
00:22:42,190 --> 00:22:44,720
so this each returns the object you're

609
00:22:44,720 --> 00:22:47,690
looking for now if you have ever worked

610
00:22:47,690 --> 00:22:51,769
and say rails the concept of n plus one

611
00:22:51,769 --> 00:22:54,200
comes up all the time and this is when

612
00:22:54,200 --> 00:22:55,639
you're making too many round trips to

613
00:22:55,639 --> 00:22:57,470
the database and it slows everything

614
00:22:57,470 --> 00:23:01,039
down and I it's really just not a

615
00:23:01,039 --> 00:23:04,340
problem if you match the query of the

616
00:23:04,340 --> 00:23:06,529
commands to match the queries right and

617
00:23:06,529 --> 00:23:08,989
so data loader is a little utility it's

618
00:23:08,989 --> 00:23:11,720
like a couple hundred lines and it lets

619
00:23:11,720 --> 00:23:14,809
you take all the requests you make in

620
00:23:14,809 --> 00:23:18,619
one once event loop and batch them all

621
00:23:18,619 --> 00:23:19,940
together so you give it a little

622
00:23:19,940 --> 00:23:22,179
function do the lookup and I made up a

623
00:23:22,179 --> 00:23:24,559
function here get a bunch of IDs then

624
00:23:24,559 --> 00:23:26,059
those how to look up like a whole array

625
00:23:26,059 --> 00:23:28,669
of IDs and so you can go and ask for a

626
00:23:28,669 --> 00:23:30,200
bunch of objects and then it's going to

627
00:23:30,200 --> 00:23:33,799
call your your batch your bachelor your

628
00:23:33,799 --> 00:23:35,989
get bunch of IDs with addy DuPage array

629
00:23:35,989 --> 00:23:37,399
of all those things are trying to get

630
00:23:37,399 --> 00:23:41,299
and this allows you to instead of having

631
00:23:41,299 --> 00:23:44,239
if I load 50 posts and all their authors

632
00:23:44,239 --> 00:23:45,109
instead of loading each other

633
00:23:45,109 --> 00:23:47,539
individually it's going to go and give

634
00:23:47,539 --> 00:23:49,970
me 50 IDs for those 50 authors so

635
00:23:49,970 --> 00:23:52,369
instead of doing a new request and you

636
00:23:52,369 --> 00:23:54,649
look up to the database for each item it

637
00:23:54,649 --> 00:23:55,920
does it for each depth

638
00:23:55,920 --> 00:23:59,070
the graph this made it much faster and

639
00:23:59,070 --> 00:24:00,600
we were able to abuse this a little bit

640
00:24:00,600 --> 00:24:04,140
and we're able to do it with with Redis

641
00:24:04,140 --> 00:24:05,430
itself there's something called

642
00:24:05,430 --> 00:24:07,410
pipelining which lets you put a whole

643
00:24:07,410 --> 00:24:09,240
bunch of crazed together and no one

644
00:24:09,240 --> 00:24:11,490
query and send them all and so if we

645
00:24:11,490 --> 00:24:13,260
wanted to

646
00:24:13,260 --> 00:24:16,610
this is nemesis DB again which can take

647
00:24:16,610 --> 00:24:18,630
Redis object or can take your Redis

648
00:24:18,630 --> 00:24:20,360
loader object which is the same shape

649
00:24:20,360 --> 00:24:22,830
and if you go and you ask for all these

650
00:24:22,830 --> 00:24:25,320
notes at the same time with Redis and

651
00:24:25,320 --> 00:24:27,180
this is not a fair benchmark I ran out

652
00:24:27,180 --> 00:24:29,640
on my own machine and localhost but it

653
00:24:29,640 --> 00:24:32,280
will do four different queries and vote

654
00:24:32,280 --> 00:24:34,860
with Redis loader it does one query with

655
00:24:34,860 --> 00:24:36,270
with less because it doesn't ask for

656
00:24:36,270 --> 00:24:38,630
node twice and it's significantly faster

657
00:24:38,630 --> 00:24:40,770
when you added real network in there

658
00:24:40,770 --> 00:24:42,840
maybe you need to multiply this by 10 or

659
00:24:42,840 --> 00:24:46,170
100 but it's still real fast so even if

660
00:24:46,170 --> 00:24:47,670
we didn't match I don't think I would

661
00:24:47,670 --> 00:24:50,670
have noticed for our setup but for most

662
00:24:50,670 --> 00:24:52,230
databases which maybe it's a couple

663
00:24:52,230 --> 00:24:54,600
milliseconds between responses you know

664
00:24:54,600 --> 00:24:55,920
it's a good idea to keep them together

665
00:24:55,920 --> 00:24:58,080
and this keeps you protected I guess it

666
00:24:58,080 --> 00:25:00,030
becomes from an N plus 1 2 and plus 1

667
00:25:00,030 --> 00:25:01,860
divided by you know whatever is a

668
00:25:01,860 --> 00:25:03,630
reasonable batch size 200 or something

669
00:25:03,630 --> 00:25:10,800
like that the tooling we use to to put

670
00:25:10,800 --> 00:25:13,170
to deploy our lambdas right now we're

671
00:25:13,170 --> 00:25:15,810
using Sammy which uses Amazon Sam this

672
00:25:15,810 --> 00:25:17,940
serverless application model under the

673
00:25:17,940 --> 00:25:21,900
hood but Sam is kind of annoying uh I'm

674
00:25:21,900 --> 00:25:22,170
sorry

675
00:25:22,170 --> 00:25:26,460
Sam is kind of verbose and so we made a

676
00:25:26,460 --> 00:25:28,110
little wrapper that helps you know

677
00:25:28,110 --> 00:25:31,260
generate some useful scripts and so that

678
00:25:31,260 --> 00:25:32,760
were you Sammy for most of our projects

679
00:25:32,760 --> 00:25:35,730
I'm really excited about architect I

680
00:25:35,730 --> 00:25:39,210
find out of our codes and it lets you

681
00:25:39,210 --> 00:25:40,920
describe the kind of server this

682
00:25:40,920 --> 00:25:41,820
environment you want

683
00:25:41,820 --> 00:25:43,830
dynamodb tables there's a little

684
00:25:43,830 --> 00:25:46,710
prescriptive but it's it's it's super

685
00:25:46,710 --> 00:25:48,360
straightforward to use and I think it

686
00:25:48,360 --> 00:25:49,830
makes getting started aflame just super

687
00:25:49,830 --> 00:25:52,260
easy and of course we built a tool

688
00:25:52,260 --> 00:25:54,000
called shop which I forgot to put in a

689
00:25:54,000 --> 00:25:56,310
description but chef is the shepherd for

690
00:25:56,310 --> 00:25:58,700
your lambdas

691
00:25:58,700 --> 00:26:02,090
and chef is not prescriptive it just

692
00:26:02,090 --> 00:26:03,800
sets up like like here's your functions

693
00:26:03,800 --> 00:26:05,510
in a folder here's a web pack like

694
00:26:05,510 --> 00:26:08,330
config that works and will will deploy

695
00:26:08,330 --> 00:26:11,330
stuff and about a second or two and it's

696
00:26:11,330 --> 00:26:12,860
a fastest way to get something out there

697
00:26:12,860 --> 00:26:14,360
because it escapes CloudFormation and

698
00:26:14,360 --> 00:26:16,160
all those other big things that if you

699
00:26:16,160 --> 00:26:17,540
don't know about yet maybe get in the

700
00:26:17,540 --> 00:26:21,320
way but it still works it's great we

701
00:26:21,320 --> 00:26:24,350
just do we we've required more and it's

702
00:26:24,350 --> 00:26:25,430
easier to go to Sam

703
00:26:25,430 --> 00:26:29,270
or rather Sammy I think that's all you

704
00:26:29,270 --> 00:26:31,910
need to get goin I think you could take

705
00:26:31,910 --> 00:26:34,760
this and if you go to the repo I'd have

706
00:26:34,760 --> 00:26:36,200
all the code there and you can choose

707
00:26:36,200 --> 00:26:37,970
one of those deploy tools and you can

708
00:26:37,970 --> 00:26:43,280
run your API on lambda today Redis

709
00:26:43,280 --> 00:26:45,200
running Redis you know for Hobby project

710
00:26:45,200 --> 00:26:46,580
is a little more expensive so you can

711
00:26:46,580 --> 00:26:48,410
swap that out for anything you want like

712
00:26:48,410 --> 00:26:50,630
literally anything you want

713
00:26:50,630 --> 00:26:55,880
so DynamoDB or Postgres you know and it

714
00:26:55,880 --> 00:26:58,300
will work the same way

715
00:26:58,300 --> 00:27:01,460
nemesis isn't finished and you can

716
00:27:01,460 --> 00:27:03,230
totally help and if you have opinions or

717
00:27:03,230 --> 00:27:04,700
if you think we could achieve this with

718
00:27:04,700 --> 00:27:06,710
a database that already exists you

719
00:27:06,710 --> 00:27:08,420
should come and try to convince me of

720
00:27:08,420 --> 00:27:08,690
that

721
00:27:08,690 --> 00:27:10,220
because it would be awesome not to build

722
00:27:10,220 --> 00:27:14,930
anything we have a ton of open-source

723
00:27:14,930 --> 00:27:16,810
libraries that we use for our stuff

724
00:27:16,810 --> 00:27:19,490
you'll you we just share them and

725
00:27:19,490 --> 00:27:20,420
sometimes we sneak them into other

726
00:27:20,420 --> 00:27:23,690
things but everything from the command

727
00:27:23,690 --> 00:27:26,780
batching - you know officially storing

728
00:27:26,780 --> 00:27:29,570
JSON documents of trees to working with

729
00:27:29,570 --> 00:27:31,010
async iterators which I want to

730
00:27:31,010 --> 00:27:33,170
completely replace all my streams with -

731
00:27:33,170 --> 00:27:34,790
using async functions and streams with

732
00:27:34,790 --> 00:27:36,800
blue stream which which is was our work

733
00:27:36,800 --> 00:27:38,330
around before I think iterators was the

734
00:27:38,330 --> 00:27:42,230
place you should check it out

735
00:27:42,230 --> 00:27:44,630
love love any feedback and help and

736
00:27:44,630 --> 00:27:45,920
hopefully it makes things working with

737
00:27:45,920 --> 00:27:48,910
whatever you're doing somewhat easier

738
00:27:48,910 --> 00:27:52,220
Thanks

