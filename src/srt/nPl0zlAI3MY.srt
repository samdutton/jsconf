1
00:00:01,640 --> 00:00:24,189
Hi, my name is Sergii and I work at Mic Company.

2
00:00:24,189 --> 00:00:31,960
It is about server side javascript.

3
00:00:31,960 --> 00:00:38,370
One second.

4
00:00:38,370 --> 00:00:40,960
This talk is about server side Javascript.

5
00:00:40,960 --> 00:00:45,280
It includes low level technical details.

6
00:00:45,280 --> 00:00:49,059
It also is about open source project.

7
00:00:49,059 --> 00:00:51,329
Runtime Js.

8
00:00:51,329 --> 00:00:57,910
And Runtime.Js is an operating system kernel
built on V8 engine.

9
00:00:57,910 --> 00:01:08,360
Which means that this system boots directly
on hardware and it uses V8 engine by Google.

10
00:01:08,360 --> 00:01:11,659
As a core component of the system.

11
00:01:11,659 --> 00:01:18,360
And it is basically the system is the one
that optimized to run JavaScript applications.

12
00:01:18,360 --> 00:01:21,180
Can execute javascript only.

13
00:01:21,180 --> 00:01:22,960
Doesn't support binaries.

14
00:01:22,960 --> 00:01:31,950
And it has non blocking and asynchronous IO
model from the ground up.

15
00:01:31,950 --> 00:01:34,259
It is built from scratch.

16
00:01:34,259 --> 00:01:36,500
And support X86-64.

17
00:01:36,500 --> 00:01:45,789
What is the problem with the existing system?

18
00:01:45,789 --> 00:01:51,650
When we use them to run Javascript applications?

19
00:01:51,650 --> 00:02:00,539
And I think that mainstream operating systems
are not the most efficient platforms for Javascript

20
00:02:00,539 --> 00:02:02,630
applications.

21
00:02:02,630 --> 00:02:09,280
And the reason for that is because they designed
to solve different problems.

22
00:02:09,280 --> 00:02:18,310
They designed to run compiled binaries and
not just Javascript code that runs in VM.

23
00:02:18,310 --> 00:02:21,730
They are also too complex.

24
00:02:21,730 --> 00:02:24,590
Too many architecture layers.

25
00:02:24,590 --> 00:02:29,819
And provide inefficient Api's.

26
00:02:29,819 --> 00:02:31,709
And most system calls block.

27
00:02:31,709 --> 00:02:34,810
Which is a problem when we use Javascript.

28
00:02:34,810 --> 00:02:38,360
We want everything non blocking.

29
00:02:38,360 --> 00:02:49,430
And, another problem is that event notifications
require some very complex mechanism like polling.

30
00:02:49,430 --> 00:02:55,840
When we need to call a kernel in a loop to
get the new data.

31
00:02:55,840 --> 00:03:05,959
There is no central mechanism that lets us
to be notified of any kind of event.

32
00:03:05,959 --> 00:03:11,280
Because of that each application is to implement
the own system.

33
00:03:11,280 --> 00:03:15,150
And use file descriptors to get the data.

34
00:03:15,150 --> 00:03:19,030
It uses some unsafe C language at the core.

35
00:03:19,030 --> 00:03:22,410
It is a security issue.

36
00:03:22,410 --> 00:03:28,069
And buffer overflows is a serious problem
that compromise the system.

37
00:03:28,069 --> 00:03:33,540
They are written by C pro pgrammers to run
C programs.

38
00:03:33,540 --> 00:03:41,629
It means that if we want to run Javascript,
we need to convert between C stkuctures and

39
00:03:41,629 --> 00:03:42,629
Javascript.

40
00:03:42,629 --> 00:03:50,060
There is another layer between those 2 for
it to work.

41
00:03:50,060 --> 00:03:54,129
Let's see how the software stack looks like.

42
00:03:54,129 --> 00:03:57,860
When we run Node on Linux.

43
00:03:57,860 --> 00:04:01,780
ON the bottom we have hardware.

44
00:04:01,780 --> 00:04:06,030
On top, kernel, it is Linux for example.

45
00:04:06,030 --> 00:04:09,709
Linux provides us with system call Api.

46
00:04:09,709 --> 00:04:13,230
On top the process, node.

47
00:04:13,230 --> 00:04:17,180
And node uses libuv and thread pool.

48
00:04:17,180 --> 00:04:22,710
For asynchronous Api on the main thread.

49
00:04:22,710 --> 00:04:27,430
We have an event loop on the mainthread.

50
00:04:27,430 --> 00:04:29,110
We also run an isolate.

51
00:04:29,110 --> 00:04:33,860
Which is VM, V8 instance.

52
00:04:33,860 --> 00:04:37,510
Which has its own heap and garbage collector.

53
00:04:37,510 --> 00:04:42,190
And javascript application on top.

54
00:04:42,190 --> 00:04:48,730
These 3 layers are here to provide some kind
of isolation.

55
00:04:48,730 --> 00:04:55,390
For example, system call Api isolates kernel
from the user space application.

56
00:04:55,390 --> 00:04:58,530
They cannot break the system.

57
00:04:58,530 --> 00:05:02,450
And cannot directly talk to hardware.

58
00:05:02,450 --> 00:05:07,670
And the process isolates applications from
eachother.

59
00:05:07,670 --> 00:05:14,660
For example, node application cannot directly
access other applications memory.

60
00:05:14,660 --> 00:05:16,480
And then we have an isolate.

61
00:05:16,480 --> 00:05:20,940
Which isolates javascript applications from
the rest of the system.

62
00:05:20,940 --> 00:05:33,370
These two components, libuv and thread pol,
provide us with asynchronous Api.

63
00:05:33,370 --> 00:05:35,690
Let's see what process isolation is.

64
00:05:35,690 --> 00:05:40,600
A system that protects kernel from applications.

65
00:05:40,600 --> 00:05:43,030
Applications from eachother.

66
00:05:43,030 --> 00:05:46,330
It requires uses an address space for every
process.

67
00:05:46,330 --> 00:05:54,050
It is a range of memory that processes can
access.

68
00:05:54,050 --> 00:05:57,600
And this requires to use context switches.

69
00:05:57,600 --> 00:05:59,080
We have multiple address switches.

70
00:05:59,080 --> 00:06:04,930
We need to switch between them when we do
multitasking.

71
00:06:04,930 --> 00:06:08,250
We need to between usermode and kernelmode.

72
00:06:08,250 --> 00:06:15,860
This adds additional overhead zozer We also
need to use system calls.

73
00:06:15,860 --> 00:06:21,960
Because kernel is isolated from user space
application.

74
00:06:21,960 --> 00:06:25,140
Let's see what is VM isolation.

75
00:06:25,140 --> 00:06:27,220
Because javascript is a safe language.

76
00:06:27,220 --> 00:06:31,550
V8 compiles Javascript into trusted native
code.

77
00:06:31,550 --> 00:06:34,350
That is guaranteed to be correct.

78
00:06:34,350 --> 00:06:42,430
It will not access random memory and modify
some internals of the system.

79
00:06:42,430 --> 00:06:50,460
Because it guarantees that you can do this
from Javascript directly.

80
00:06:50,460 --> 00:06:59,450
Because it creates a sandbox where VM controls,
everything that program is allowed to do.

81
00:06:59,450 --> 00:07:01,590
And it is often called software isolation.

82
00:07:01,590 --> 00:07:12,890
Because it doesn't use hardware mechanisms
to enforce those memory restriction rules.

83
00:07:12,890 --> 00:07:14,610
And so what is the difference?

84
00:07:14,610 --> 00:07:19,250
We have 2 mechanisms that we use.

85
00:07:19,250 --> 00:07:24,500
And you pay twice when we use both of them.

86
00:07:24,500 --> 00:07:30,970
Javascript VM provides everything that process
isolation can offer us.

87
00:07:30,970 --> 00:07:37,870
We generally don't worry that when we run
two tabs in the browser.

88
00:07:37,870 --> 00:07:42,900
One tab cannot break or change data in another.

89
00:07:42,900 --> 00:07:46,640
Even if they run in the same process.

90
00:07:46,640 --> 00:07:52,060
So, VM can provide this isolation.

91
00:07:52,060 --> 00:08:03,430
And we basically don't need the processes
to restrict the system from the kernel.

92
00:08:03,430 --> 00:08:07,620
It is required only for native untrusted code.

93
00:08:07,620 --> 00:08:12,650
The runtime.Js is a kernel optimized to run
javascript.

94
00:08:12,650 --> 00:08:23,490
First of all, it is a Vm isolation protection
system.

95
00:08:23,490 --> 00:08:28,020
That general purpose kernels use processes
instead.

96
00:08:28,020 --> 00:08:33,840
We can also provide Js optimized kernel interface.

97
00:08:33,840 --> 00:08:39,000
That basically you can pass code back to the
kernel.

98
00:08:39,000 --> 00:08:41,110
And ask to call it.

99
00:08:41,110 --> 00:08:44,180
It will work just like that.

100
00:08:44,180 --> 00:08:52,640
And we can also add communication between
applications, using Js objects.

101
00:08:52,640 --> 00:08:57,050
We can transfer buffers.

102
00:08:57,050 --> 00:08:59,680
Like passing the pointer two applications.

103
00:08:59,680 --> 00:09:07,670
It is much faster operation when we don't
have process isolation.

104
00:09:07,670 --> 00:09:11,750
And, kernel notifications can use event loop.

105
00:09:11,750 --> 00:09:14,410
Built in into the system.

106
00:09:14,410 --> 00:09:17,330
And we can also write some kernel side javascript.

107
00:09:17,330 --> 00:09:21,060
It might be useful in some cases.

108
00:09:21,060 --> 00:09:24,130
How does it look like?

109
00:09:24,130 --> 00:09:30,550
There is no binary support, no processes,
no process isolation, we no longer need.

110
00:09:30,550 --> 00:09:33,670
No Posix interfaces.

111
00:09:33,670 --> 00:09:35,920
And no system calls.

112
00:09:35,920 --> 00:09:44,700
But instead, the system has software isolated
applications, isolates.

113
00:09:44,700 --> 00:09:47,010
Everything runs in a single address space.

114
00:09:47,010 --> 00:09:50,420
It has a builtin V8 engine.

115
00:09:50,420 --> 00:09:53,590
And all IO is non-blocking and asynchronous.

116
00:09:53,590 --> 00:09:59,970
The system has built in global event loop
for the whole system.

117
00:09:59,970 --> 00:10:04,190
There is a lightweight threads for multitasking.

118
00:10:04,190 --> 00:10:09,220
Let's see how software stack looks like.

119
00:10:09,220 --> 00:10:13,250
We have hardware, on top we have a kernel.

120
00:10:13,250 --> 00:10:17,000
Then we run a system event loop.

121
00:10:17,000 --> 00:10:22,800
And on top of it we have isolate VM instance.

122
00:10:22,800 --> 00:10:29,250
Already provides all the security guarantees
that our Javascript application cannot touch

123
00:10:29,250 --> 00:10:32,610
hardware or break the system.

124
00:10:32,610 --> 00:10:40,360
This is how architecture looks like.

125
00:10:40,360 --> 00:10:45,080
Some native code that implements the kernel
services.

126
00:10:45,080 --> 00:10:48,190
It is also V8 engine.

127
00:10:48,190 --> 00:10:51,710
Exposed kernel Api's.

128
00:10:51,710 --> 00:11:01,240
And low level services, something like memory
management, IO, interrupt timers.

129
00:11:01,240 --> 00:11:05,440
Schedule, etc.

130
00:11:05,440 --> 00:11:09,400
And everything else is built on top using
Javascript.

131
00:11:09,400 --> 00:11:15,300
High level kernel services include device
drivers.

132
00:11:15,300 --> 00:11:23,600
And system services like network stack, and
ofcourse applications.

133
00:11:23,600 --> 00:11:26,750
Why would I use Javascript for those tasks?

134
00:11:26,750 --> 00:11:30,140
Hit is already bytecode of the web.

135
00:11:30,140 --> 00:11:32,290
We can compile everything to javascript.

136
00:11:32,290 --> 00:11:42,820
It is well tested, runs everywhere zozer And
easy way to write asynchronous IT code.

137
00:11:42,820 --> 00:11:45,840
It is powerful enough to write system components.

138
00:11:45,840 --> 00:11:47,761
We have typed array.

139
00:11:47,761 --> 00:11:57,070
And array buffers that are very useful for
handling binary data.

140
00:11:57,070 --> 00:11:59,120
And it is safe and secure.

141
00:11:59,120 --> 00:12:02,190
It is built in in the language.

142
00:12:02,190 --> 00:12:08,080
It doesn't provide a way to access random
memory locations.

143
00:12:08,080 --> 00:12:13,120
So we are very safe with this.

144
00:12:13,120 --> 00:12:17,430
And can use it for writing drivers.

145
00:12:17,430 --> 00:12:19,690
And other applications.

146
00:12:19,690 --> 00:12:26,390
And actually the device drivers are the software,
basically does IO code.

147
00:12:26,390 --> 00:12:32,320
Basically, it reads from a network and passes
it to the applications.

148
00:12:32,320 --> 00:12:37,260
It is a very IO heavy applications.

149
00:12:37,260 --> 00:12:41,880
Perfectly reasonably to write in Javascript.

150
00:12:41,880 --> 00:12:45,470
So, the software isolated applications.

151
00:12:45,470 --> 00:12:49,210
We don't have processes, just isolates.

152
00:12:49,210 --> 00:12:52,380
Each program runs in its own isolate.

153
00:12:52,380 --> 00:12:58,940
Each has its own garbage collector and heap.

154
00:12:58,940 --> 00:13:06,180
We have an inter isolate communication, using
Rpc.

155
00:13:06,180 --> 00:13:09,350
Global event loop in the system.

156
00:13:09,350 --> 00:13:13,560
There is just 1 event loop for the whole system.

157
00:13:13,560 --> 00:13:19,420
And at the same time, each isolate has its
own execution stack.

158
00:13:19,420 --> 00:13:22,680
It is like threads.

159
00:13:22,680 --> 00:13:25,010
Event loops switches between stacks.

160
00:13:25,010 --> 00:13:29,950
It is possible to interrupt long running Javascript
code.

161
00:13:29,950 --> 00:13:34,410
The function foo can block the system.

162
00:13:34,410 --> 00:13:41,279
If we use a stack for each application, we
can just interrupt this.

163
00:13:41,279 --> 00:13:45,040
And continue with other applications.

164
00:13:45,040 --> 00:13:47,160
So this is how it works.

165
00:13:47,160 --> 00:13:50,860
For example, we have 3 isolates.

166
00:13:50,860 --> 00:13:52,910
Each one has an event queue.

167
00:13:52,910 --> 00:13:53,910
And isolate stack.

168
00:13:53,910 --> 00:13:59,320
The system starts executing callbacks from
the isolate 1.

169
00:13:59,320 --> 00:14:03,830
Callback 1, 2, 3.

170
00:14:03,830 --> 00:14:08,980
Then, it switches the stack to isolate 2 stack.

171
00:14:08,980 --> 00:14:11,550
And executes those 2 callbacks.

172
00:14:11,550 --> 00:14:19,870
If callback 2 takes too much time, we can
switch the stack and continue the callbacks

173
00:14:19,870 --> 00:14:22,700
from isolate 3.

174
00:14:22,700 --> 00:14:27,930
And, there is inter isolate communication.

175
00:14:27,930 --> 00:14:32,950
Implemented as remote procedure calls.

176
00:14:32,950 --> 00:14:34,730
functions across asolates.

177
00:14:34,730 --> 00:14:42,740
This is the example of how this works.

178
00:14:42,740 --> 00:14:45,990
For example, we have function add.

179
00:14:45,990 --> 00:14:48,150
We can call it from the other isolate.

180
00:14:48,150 --> 00:14:53,870
And it will return promise.

181
00:14:53,870 --> 00:14:57,740
We need asynchronous call.

182
00:14:57,740 --> 00:15:00,630
Another example is asynchronous function call.

183
00:15:00,630 --> 00:15:08,970
In this example, we resolve promise in 2 seconds
an return it.

184
00:15:08,970 --> 00:15:15,779
When other isolates call this function, it
can use this promise to output Hello World

185
00:15:15,779 --> 00:15:19,170
after 2 seconds.

186
00:15:19,170 --> 00:15:24,810
Another example is zero copy arraybuffer transfer.

187
00:15:24,810 --> 00:15:30,770
We can just pass the arraybuffer without any
copying.

188
00:15:30,770 --> 00:15:32,089
It is useful.

189
00:15:32,089 --> 00:15:38,460
When we want to get data from a network device.

190
00:15:38,460 --> 00:15:45,410
It can just pass the same buffer that a network
card writes to.

191
00:15:45,410 --> 00:15:46,520
To the application.

192
00:15:46,520 --> 00:15:50,870
It is much more efficient system.

193
00:15:50,870 --> 00:15:59,530
And we can also pass functions that will return
promise on the other side.

194
00:15:59,530 --> 00:16:02,040
There is also an isolate Api.

195
00:16:02,040 --> 00:16:08,070
That every isolate can access zozer It is
a data environment.

196
00:16:08,070 --> 00:16:09,730
Some system services.

197
00:16:09,730 --> 00:16:12,410
There are functions.

198
00:16:12,410 --> 00:16:14,920
Like exit log.

199
00:16:14,920 --> 00:16:16,529
And okay.

200
00:16:16,529 --> 00:16:17,630
There is a demo.

201
00:16:17,630 --> 00:16:20,990
I'd like to show.

202
00:16:20,990 --> 00:16:26,670
Let's boot this system.

203
00:16:26,670 --> 00:16:30,720
So, it loads.

204
00:16:30,720 --> 00:16:34,730
You can see it.

205
00:16:34,730 --> 00:16:37,440
This is the system, it boots into terminal.

206
00:16:37,440 --> 00:16:40,970
We can type commands.

207
00:16:40,970 --> 00:16:45,140
It outputs the list of the files.

208
00:16:45,140 --> 00:16:49,029
Af you can see, those are js applications.

209
00:16:49,029 --> 00:16:53,210
It is a simple application.

210
00:16:53,210 --> 00:16:56,500
We can do like echo hello.

211
00:16:56,500 --> 00:16:59,690
To output our string.

212
00:16:59,690 --> 00:17:04,010
We can do some other tasks.

213
00:17:04,010 --> 00:17:06,780
Like for example eval.

214
00:17:06,780 --> 00:17:09,530
And here we can evaluate some javascript.

215
00:17:09,530 --> 00:17:11,470
It all runs on virtualiser.

216
00:17:11,470 --> 00:17:20,110
You can type exit.

217
00:17:20,110 --> 00:17:23,250
There is also some network support.

218
00:17:23,250 --> 00:17:27,250
We can resolve hostnames.

219
00:17:27,250 --> 00:17:32,890
Let's do host.

220
00:17:32,890 --> 00:17:35,470
It resolves hostname.

221
00:17:35,470 --> 00:17:37,030
This network stack.

222
00:17:37,030 --> 00:17:52,800
And device driver are implemented in Javascript.

223
00:17:52,800 --> 00:17:58,860
So, what else?

224
00:17:58,860 --> 00:18:03,870
We can see the devices.

225
00:18:03,870 --> 00:18:08,550
On our system.

226
00:18:08,550 --> 00:18:18,030
And, let's exit.

227
00:18:18,030 --> 00:18:23,600
Poweroff.

228
00:18:23,600 --> 00:18:29,160
(applause)

229
00:18:29,160 --> 00:18:32,850
i hosted runtime.Js on a server.

230
00:18:32,850 --> 00:18:38,600
You should be able to connect, respond with
Udp packets.

231
00:18:38,600 --> 00:18:48,760
If you try it.D and type some text.

232
00:18:48,760 --> 00:18:54,800
And it should return this information.

233
00:18:54,800 --> 00:19:02,030
Let me see.

234
00:19:02,030 --> 00:19:04,440
Hello.

235
00:19:04,440 --> 00:19:09,260
Hello message.

236
00:19:09,260 --> 00:19:16,250
It shows my Ip address and source port.

237
00:19:16,250 --> 00:19:22,170
Now I can ssh to the server.

238
00:19:22,170 --> 00:19:28,610
Open screen.

239
00:19:28,610 --> 00:19:33,090
You should be able to see your own message.

240
00:19:33,090 --> 00:19:39,090
It works!

241
00:19:39,090 --> 00:19:45,090
I think.

242
00:19:45,090 --> 00:19:52,070
So, let's continue with the presentation.

243
00:19:52,070 --> 00:19:53,990
So the project status.

244
00:19:53,990 --> 00:19:56,050
It is experimental project.

245
00:19:56,050 --> 00:19:58,080
And it is in development.

246
00:19:58,080 --> 00:20:00,040
It is not ready to use.

247
00:20:00,040 --> 00:20:05,540
It lacks many important features zozer Most
Api's will probably change.

248
00:20:05,540 --> 00:20:08,040
Right now it targets mainly Kvm.

249
00:20:08,040 --> 00:20:15,070
It is easier to support its device driver.

250
00:20:15,070 --> 00:20:18,650
And we can run it on top of Linux.

251
00:20:18,650 --> 00:20:27,309
For the best efficiency, we would like to
implement maybe native, hardware drivers.

252
00:20:27,309 --> 00:20:28,580
Not native.

253
00:20:28,580 --> 00:20:32,060
Real hardware drivers.

254
00:20:32,060 --> 00:20:34,710
And so, why would you use this system?

255
00:20:34,710 --> 00:20:38,280
Because it is network-first server system.

256
00:20:38,280 --> 00:20:41,950
It provides safe environment.

257
00:20:41,950 --> 00:20:44,930
It has a sandboxed applications.

258
00:20:44,930 --> 00:20:47,700
It uses asynchronous IO everywhere.

259
00:20:47,700 --> 00:20:49,610
Full hackable Javascript.

260
00:20:49,610 --> 00:20:52,880
Full control over everything.

261
00:20:52,880 --> 00:20:58,610
If you would like to implement your own file
system or network protocol, you can do it

262
00:20:58,610 --> 00:20:59,960
in Javascript.

263
00:20:59,960 --> 00:21:04,240
It is easier to work with it.

264
00:21:04,240 --> 00:21:05,480
And it is pretty small.

265
00:21:05,480 --> 00:21:06,870
Less than 10 MB.

266
00:21:06,870 --> 00:21:11,799
It is actually around 8.

267
00:21:11,799 --> 00:21:14,790
And V8 is 7 Mb.

268
00:21:14,790 --> 00:21:21,880
I think, the future work would be to support
Tcp/http protocols.

269
00:21:21,880 --> 00:21:25,549
Add file system support.

270
00:21:25,549 --> 00:21:28,780
Right now it is read only file system.

271
00:21:28,780 --> 00:21:33,250
And optimize internal structures.

272
00:21:33,250 --> 00:21:38,880
And maybe at some point lock Api's and support
Xen.

273
00:21:38,880 --> 00:21:40,850
So we can run it on Amazon.

274
00:21:40,850 --> 00:21:44,610
And about Node.

275
00:21:44,610 --> 00:21:47,840
It is not compatible with Node.

276
00:21:47,840 --> 00:21:52,210
It provides a lower level Api than Node.

277
00:21:52,210 --> 00:21:56,740
It might be possible to port Node on top of
it.

278
00:21:56,740 --> 00:22:01,420
But, Node uses really unique Cpi's.

279
00:22:01,420 --> 00:22:07,450
There needs to be an additional layer to convert
the calls.

280
00:22:07,450 --> 00:22:11,560
We can use an Npm as system package manager.

281
00:22:11,560 --> 00:22:24,860
So, there are the links zozer You can find
the projiect on github.

282
00:22:24,860 --> 00:22:28,990
Thanks Mic for supporting the project.

283
00:22:28,990 --> 00:22:31,350
Thank you everyone.

