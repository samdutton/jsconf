1
00:00:01,630 --> 00:00:06,300
How is it going, everyone?

2
00:00:06,300 --> 00:00:07,300
Doing well?

3
00:00:07,300 --> 00:00:09,450
Today we will be talking about web standards.

4
00:00:09,450 --> 00:00:16,320
This is my first time using a clicker so bear
with me.

5
00:00:16,320 --> 00:00:22,160
My name is Dom Farolino.

6
00:00:22,160 --> 00:00:30,419
I am a senior at the University of Cincinnati.

7
00:00:30,419 --> 00:00:49,030
I will doing a final internship in Japan and
work on Chromium committer.

8
00:00:49,030 --> 00:00:52,650
You can follow me on Twitter, check out my
work on GitHub and feel free to e-mail me

9
00:00:52,650 --> 00:01:00,080
any time after the talk if you have questions
about the getting involved and the browser

10
00:01:00,080 --> 00:01:01,840
stuff in general.

11
00:01:01,840 --> 00:01:03,940
I want to talk about what this talk is.

12
00:01:03,940 --> 00:01:08,189
I have three overarching goals I wanted to
reach.

13
00:01:08,189 --> 00:01:14,630
The first is provide a background and history
into web standards and some of the organizations

14
00:01:14,630 --> 00:01:16,970
that are responsible for their governance.

15
00:01:16,970 --> 00:01:25,409
This could be its own talk but I will give
a brief history on this.

16
00:01:25,409 --> 00:01:30,090
Next I will talk about as a web developer
how you can make use of a web standard.

17
00:01:30,090 --> 00:01:34,630
A lot of us Google an API and figure out how
it works but I want to talk about the technical

18
00:01:34,630 --> 00:01:40,119
bits of the web standards and show how to
make use of them and navigate that space.

19
00:01:40,119 --> 00:01:44,540
Finally, I want to talk about how to get involved
and share a bit about my own story of getting

20
00:01:44,540 --> 00:01:49,209
involved with standards and working on the
platform and, hopefully, encourage some of

21
00:01:49,209 --> 00:01:53,109
you to do the same.

22
00:01:53,109 --> 00:01:58,979
I would like to propose the idea we need a
definition of a standard.

23
00:01:58,979 --> 00:02:02,130
This largely depends on context if we define
a new word.

24
00:02:02,130 --> 00:02:07,850
I would like to propose my own definition
for the purpose of this talk.

25
00:02:07,850 --> 00:02:14,290
A document specifying observable effects of
tech with multiple independent implementations.

26
00:02:14,290 --> 00:02:17,250
Let's focus on the key points.

27
00:02:17,250 --> 00:02:21,440
We care about the observable effects of technology.

28
00:02:21,440 --> 00:02:28,460
If I run something, what does it do?

29
00:02:28,460 --> 00:02:35,200
The last part multiple independent implementations
-- I think this one is really important.

30
00:02:35,200 --> 00:02:37,890
It is far from a new concept in technology.

31
00:02:37,890 --> 00:02:45,160
You know, we have seen this with Unix operating
system.

32
00:02:45,160 --> 00:02:51,220
You can have your own and you get one and
everybody has their own separate distribution

33
00:02:51,220 --> 00:02:52,330
with sugar on top.

34
00:02:52,330 --> 00:03:01,390
What I really care about is can I write application
that works once everywhere and no matter what

35
00:03:01,390 --> 00:03:07,970
operating system I am using that is in the
Linux family of OSs it will work uniformly.

36
00:03:07,970 --> 00:03:18,460
To make that environment conducive, we have
a set of classic standards.

37
00:03:18,460 --> 00:03:24,470
The same thing goes for web tech and this
is primarily what I will talk about today.

38
00:03:24,470 --> 00:03:28,310
I happen to know for a fact you can't go to
the store and buy one HTTP.

39
00:03:28,310 --> 00:03:36,080
It is just an idea and something you implement
to make it compatible with other versions.

40
00:03:36,080 --> 00:03:40,430
We can run JavaScript in a bunch of places.

41
00:03:40,430 --> 00:03:43,330
It is like python.

42
00:03:43,330 --> 00:03:46,420
We get it from the Python people.

43
00:03:46,420 --> 00:03:52,710
I can run it in Chrome, Edge, Node and all
kinds of different places.

44
00:03:52,710 --> 00:03:57,180
The same goes for the star of the talk today
which is web platform APIs.

45
00:03:57,180 --> 00:04:02,210
I am no longer a Unix app developer but I
am a web developer and I need to know the

46
00:04:02,210 --> 00:04:13,220
same extensions will be there in Chrome and
Firefox and more importantly work

47
00:04:13,220 --> 00:04:14,220
the same.

48
00:04:14,220 --> 00:04:23,400
Keynote is cool and has a bunch of symbols
you can use.

49
00:04:23,400 --> 00:04:25,330
Let's talk about where web APIs come from.

50
00:04:25,330 --> 00:04:26,470
This is important.

51
00:04:26,470 --> 00:04:31,290
We want to know where this stuff comes from
and how we can make more of them.

52
00:04:31,290 --> 00:04:34,470
I think the logical answer is probably JavaScript.

53
00:04:34,470 --> 00:04:36,320
We use web APIs when using JavaScript.

54
00:04:36,320 --> 00:04:39,970
Here is an example of a snapshot of the Chrome
dev tools.

55
00:04:39,970 --> 00:04:50,310
I can fetch super prominent sites on the internet
and set timeout and stuff like that.

56
00:04:50,310 --> 00:04:56,760
This stuff is part of the language but what
is the language?

57
00:04:56,760 --> 00:05:02,280
We know the big story of JavaScript being
created in 10 days but it is a general purpose

58
00:05:02,280 --> 00:05:05,150
programming language created for the purposes
of the web.

59
00:05:05,150 --> 00:05:11,630
It was plopped into an escape 2.0 and made
it a candidate for standardization because

60
00:05:11,630 --> 00:05:15,160
there was going to be multiple implementations
of it.

61
00:05:15,160 --> 00:05:20,900
We needed a group to come out and pick out
this task of standardizing.

62
00:05:20,900 --> 00:05:28,470
They have had success with the various engines.

63
00:05:28,470 --> 00:05:35,440
There is a bunch of same implementations for
this.

64
00:05:35,440 --> 00:05:38,680
The standard looks like this.

65
00:05:38,680 --> 00:05:43,630
It is big and hard to read and on GitHub under
the TC39 page.

66
00:05:43,630 --> 00:05:45,610
That stands for technical committee 39.

67
00:05:45,610 --> 00:05:50,800
When we write a standard, how does it work?

68
00:05:50,800 --> 00:05:56,030
We are predicting language so have to make
it general.

69
00:05:56,030 --> 00:05:59,639
We need a really strict separation of concern.

70
00:05:59,639 --> 00:06:07,090
We need to be dealing with the language, syntax
and semantics.

71
00:06:07,090 --> 00:06:10,240
As a true scripting language, it should be
able to be plopped into any hosting environment

72
00:06:10,240 --> 00:06:14,710
but the language shouldn't have to know anything
explicit about that environment.

73
00:06:14,710 --> 00:06:21,490
We are used to using language in the browser
and used to web APIs but the language doesn't

74
00:06:21,490 --> 00:06:23,900
know about that.

75
00:06:23,900 --> 00:06:34,410
They are effective mixed in and baked into
the browsers and browsers can support a version

76
00:06:34,410 --> 00:06:42,400
of this script and a bunch of web APIs that
tag alongside this version that interplay

77
00:06:42,400 --> 00:06:43,690
with it.

78
00:06:43,690 --> 00:06:51,180
We have that coined -- TC39 is responsible
for standardizing the JavaScript we know but

79
00:06:51,180 --> 00:06:57,620
who is responsible for standardizing the web
APIs?

80
00:06:57,620 --> 00:07:00,110
Two big groups are primary responsible right
now.

81
00:07:00,110 --> 00:07:02,260
You have probably seen one of these logos.

82
00:07:02,260 --> 00:07:10,060
We have the W3C and the WHATWG which stands
for What Working Group and is the one I will

83
00:07:10,060 --> 00:07:13,729
be talking about today.

84
00:07:13,729 --> 00:07:23,960
The WHATWG stands for a long stream of text.

85
00:07:23,960 --> 00:07:30,060
It was formed from branching off from the
W3C.

86
00:07:30,060 --> 00:07:42,020
They have an HTML language and it is the kitchen
sink of the web platform.

87
00:07:42,020 --> 00:07:50,120
They specify the interface we use to talk
to the web and a lot of really cool things

88
00:07:50,120 --> 00:07:51,770
like notifications and such.

89
00:07:51,770 --> 00:07:55,750
But how are these things actually written?

90
00:07:55,750 --> 00:08:02,010
If we are going to write a browser, we want
to write ES, we start with this.

91
00:08:02,010 --> 00:08:09,060
There is a lot of stuff and a bunch of exposed
objects we get for free in JavaScript.

92
00:08:09,060 --> 00:08:14,450
The array constructor and data array objects
and weak maps and data structures that are

93
00:08:14,450 --> 00:08:16,770
exposed.

94
00:08:16,770 --> 00:08:23,060
We want our browser to be a little more powerful
and have it be me, the DOM.

95
00:08:23,060 --> 00:08:28,940
We can give it a query selector language and
extend the language more.

96
00:08:28,940 --> 00:08:31,700
The document is getting bigger but it is getting
more powerful.

97
00:08:31,700 --> 00:08:37,460
We would love to contact the network as well
so we will give it network primitives like

98
00:08:37,460 --> 00:08:39,770
fetch, request.

99
00:08:39,770 --> 00:08:47,830
It would be really cool if we could do ourselves
and give it a console method as well.

100
00:08:47,830 --> 00:08:50,550
This is one way to write it it keep appending
the text.

101
00:08:50,550 --> 00:09:00,670
The WHATWG has standards for each idea that
has separations of concerns and each standard

102
00:09:00,670 --> 00:09:07,200
is responsible for the specifications of the
web and JavaScript and things like that.

103
00:09:07,200 --> 00:09:11,850
We get web APIs as a result alongside ES and
JavaScript.

104
00:09:11,850 --> 00:09:18,080
If we want to read the web APIs as web developers,
and want to make use of them, we need to know

105
00:09:18,080 --> 00:09:21,399
the anatomy of a standard and what is in these
objects.

106
00:09:21,399 --> 00:09:24,530
It is a mystical thing, kind of.

107
00:09:24,530 --> 00:09:27,920
It is not too difficult to get involved.

108
00:09:27,920 --> 00:09:32,570
It is all very open and happening right under
our noses.

109
00:09:32,570 --> 00:09:37,130
I was thinking about this for the talk and
came to the conclusion there are two big parts

110
00:09:37,130 --> 00:09:40,700
of standards to be aware of.

111
00:09:40,700 --> 00:09:42,410
The first is algorithms.

112
00:09:42,410 --> 00:09:50,610
I spend many evenings working on complete
code and hacking and I like algorithms and

113
00:09:50,610 --> 00:09:55,060
data structure stuff.

114
00:09:55,060 --> 00:09:58,850
Algorithms are a set of steps to perform a
task, really.

115
00:09:58,850 --> 00:10:03,690
Let's look at an algorithm here.

116
00:10:03,690 --> 00:10:16,279
There are five steps that run every time you
invoke the console count.

117
00:10:16,279 --> 00:10:22,660
You can see we are giving something called
a label and basically the idea is if we have

118
00:10:22,660 --> 00:10:29,029
seen this label before, when we called this,
and then, you know, increment some number

119
00:10:29,029 --> 00:10:32,149
we have associated with label otherwise we
can set it to 1.

120
00:10:32,149 --> 00:10:38,760
This is algorithm and this logger thing is
abstract text for saying browser, show this

121
00:10:38,760 --> 00:10:41,610
to the user in whatever way you see fit.

122
00:10:41,610 --> 00:10:50,920
This algorithm answers questions like what
is the initial value of a number associated

123
00:10:50,920 --> 00:10:57,430
with a label and what happens when I call
it?

124
00:10:57,430 --> 00:11:02,290
The second important thing about specifying
and using web APIs is understanding the look

125
00:11:02,290 --> 00:11:04,430
and the feel.

126
00:11:04,430 --> 00:11:06,420
I think that is really important.

127
00:11:06,420 --> 00:11:09,490
What does it mean for an API to have a look
and a feel?

128
00:11:09,490 --> 00:11:14,200
I thought of this and I think it is kind of
like, what does it mean to use the API as

129
00:11:14,200 --> 00:11:15,470
a developer?

130
00:11:15,470 --> 00:11:16,670
What is it called?

131
00:11:16,670 --> 00:11:18,190
Hanging off a similar object?

132
00:11:18,190 --> 00:11:19,820
Globally exposed?

133
00:11:19,820 --> 00:11:20,820
Take anything?

134
00:11:20,820 --> 00:11:21,890
Is there a bunch of parameters?

135
00:11:21,890 --> 00:11:22,890
How many parameters?

136
00:11:22,890 --> 00:11:25,740
Does it return anything?

137
00:11:25,740 --> 00:11:30,260
A lot of us are using end to end and maybe
Googling this stuff to find it but I want

138
00:11:30,260 --> 00:11:32,080
to show you can show the standard.

139
00:11:32,080 --> 00:11:35,680
Here is another part of the console standard.

140
00:11:35,680 --> 00:11:40,950
A big scary block of text but let's focus
on the bit that is complimentary to what we

141
00:11:40,950 --> 00:11:44,290
were talking about before, the count method.

142
00:11:44,290 --> 00:11:47,620
We have this that can tell you a little bit
about it.

143
00:11:47,620 --> 00:11:52,160
It is called count and exists under the console
name space.

144
00:11:52,160 --> 00:12:01,390
It's count type is void so I probably shouldn't
expect to get anything from it.

145
00:12:01,390 --> 00:12:03,670
It takes in a single parameter called label.

146
00:12:03,670 --> 00:12:06,980
It is optional and its type is DOM string.

147
00:12:06,980 --> 00:12:11,490
We don't know what DOM string is right now
but let's assume it is a regular string.

148
00:12:11,490 --> 00:12:17,920
It is pretty expressive but it isn't JavaScript
because we care about types and it isn't C++

149
00:12:17,920 --> 00:12:20,420
because we see other invalid things going
on.

150
00:12:20,420 --> 00:12:22,000
What exactly is this language?

151
00:12:22,000 --> 00:12:29,070
It is walled web interface definition language
and you will see it in a lot of specifications.

152
00:12:29,070 --> 00:12:37,640
It forms a contract for the signature of web
APIs you use.

153
00:12:37,640 --> 00:12:42,790
When I go into the algorithm, I am running
these steps, and I want to know what label

154
00:12:42,790 --> 00:12:43,790
is.

155
00:12:43,790 --> 00:12:48,440
I need to -- maybe I am making assumptions
it is a string and operating on that accordingly

156
00:12:48,440 --> 00:12:52,450
and that is really important for me to know.

157
00:12:52,450 --> 00:13:00,730
I want to talk about how web IDL works in
practice.

158
00:13:00,730 --> 00:13:04,339
You will call console.count and give it whatever.

159
00:13:04,339 --> 00:13:06,960
You can give it a symbol, object whatever.

160
00:13:06,960 --> 00:13:13,670
But the second you do that the web IDL Sheriff
comes in and says hold up!

161
00:13:13,670 --> 00:13:18,110
You called console.counts and you can give
it whatever you want, symbol if you wanted

162
00:13:18,110 --> 00:13:24,110
to, give it a number, whatever, but I am making
sure this contract is available.

163
00:13:24,110 --> 00:13:28,839
I am going to make sure whatever you give
me can pass as a DOM string.

164
00:13:28,839 --> 00:13:35,740
If it does, we go to the algorithm and continue
with a hopefully successful call.

165
00:13:35,740 --> 00:13:43,700
The web IDL Sheriff can throw a type error
resulting with you in code jail.

166
00:13:43,700 --> 00:13:45,149
Probably the worst place to be.

167
00:13:45,149 --> 00:13:52,519
Starring at the dev tool with the red text
and not knowing what is going on.

168
00:13:52,519 --> 00:13:56,840
Real Sheriffs in the real world know who to
arrest and who not to.

169
00:13:56,840 --> 00:14:02,530
They have a rulebook of things to follow here.

170
00:14:02,530 --> 00:14:10,730
Just like the real Sheriffs have a rulebook,
the Sheriff IDL has a rulebook and defines

171
00:14:10,730 --> 00:14:14,750
stuff it should be enforcing.

172
00:14:14,750 --> 00:14:16,950
Here is a snippet from the web IDL standard.

173
00:14:16,950 --> 00:14:31,010
It is responsible for converting a value to
what is called a DOM string.

174
00:14:31,010 --> 00:14:41,019
This is an acsation here.

175
00:14:41,019 --> 00:14:42,610
This is really nice because it is pretty expressive.

176
00:14:42,610 --> 00:14:47,550
It tells us how things should work in a really
normative, clear way and protects our algorithm.

177
00:14:47,550 --> 00:14:55,180
When I get to here I know I am working on
a string and the Sheriff is OK with it.

178
00:14:55,180 --> 00:14:58,830
Why are we using this thing called Web IDL
anyway?

179
00:14:58,830 --> 00:15:01,140
What is it?

180
00:15:01,140 --> 00:15:10,290
It does a lot of things for us.

181
00:15:10,290 --> 00:15:14,600
It helps us write a lot with just a few words
potentially.

182
00:15:14,600 --> 00:15:16,250
It takes care of a lot of type conversions.

183
00:15:16,250 --> 00:15:21,620
You saw a simple example of a type conversion
but you can imagine a potentially more complicated

184
00:15:21,620 --> 00:15:22,620
one.

185
00:15:22,620 --> 00:15:28,019
We would not want to make steps to convert
and make assumptions everywhere in the spec

186
00:15:28,019 --> 00:15:31,290
so we can use this to abstract that stuff
away.

187
00:15:31,290 --> 00:15:37,990
It takes care of property initialization were
us and other stuff and helps us define if

188
00:15:37,990 --> 00:15:40,230
our interfaces are exposed in an expressive
way.

189
00:15:40,230 --> 00:15:45,461
The most important thing about web IDL is
you don't have to use it.

190
00:15:45,461 --> 00:15:53,649
It is just an abstraction of the test.

191
00:15:53,649 --> 00:15:58,459
We have standards written without web IDL
and that is valid.

192
00:15:58,459 --> 00:16:09,660
It speaks in the same language the ECMAScript
talks in.

193
00:16:09,660 --> 00:16:15,639
You can always feel free to, you know -- hopefully,
that little foray makes you more comfortable

194
00:16:15,639 --> 00:16:19,579
reading the standards that they come with.

195
00:16:19,579 --> 00:16:25,329
Finally, I want to talk about how I got involved
in this and how you can do the same and motivate

196
00:16:25,329 --> 00:16:27,570
you to hopefully do the same as well.

197
00:16:27,570 --> 00:16:28,870
Who knows this logo?

198
00:16:28,870 --> 00:16:30,600
Show of hands?

199
00:16:30,600 --> 00:16:32,390
A lot of people.

200
00:16:32,390 --> 00:16:33,390
This is the Angular logo.

201
00:16:33,390 --> 00:16:40,750
Basically, a 
couple years ago I was like yeah, I am going

202
00:16:40,750 --> 00:16:45,269
to start doing stuff with web applications
and better learn a heavy framework that can

203
00:16:45,269 --> 00:16:48,529
bog me down and figure out how to write this.

204
00:16:48,529 --> 00:16:52,399
Angular 2 was in alpha.

205
00:16:52,399 --> 00:16:53,550
Things were always moving around.

206
00:16:53,550 --> 00:17:00,580
I would hear people say Angular is getting
a new router or object.

207
00:17:00,580 --> 00:17:07,410
It was easy to track this.

208
00:17:07,410 --> 00:17:12,100
At the same time, I heard another camp of
people kind of talking about JavaScript and

209
00:17:12,100 --> 00:17:19,360
saying JavaScript is getting a sync generators
or do you think about custom applications?

210
00:17:19,360 --> 00:17:29,510
I said that is not Angular specific so I dug
around to see who was part of this.

211
00:17:29,510 --> 00:17:30,810
Seemed pretty cool.

212
00:17:30,810 --> 00:17:33,410
I came across this guy's profile.

213
00:17:33,410 --> 00:17:43,980
His name is Domenic DeNicola and I learned
he was a speaker at the first CascadiaJS.

214
00:17:43,980 --> 00:17:53,910
I reached out and said I see you with working
on working groups and things like that.

215
00:17:53,910 --> 00:17:57,400
I reached out and was like what do you do
and how can I do it too?

216
00:17:57,400 --> 00:18:00,020
Are you paid to work on this stuff?

217
00:18:00,020 --> 00:18:05,700
He was like hey, we have the same name, both
Dom's working on the platform, so I will let

218
00:18:05,700 --> 00:18:10,280
you in on secrets.

219
00:18:10,280 --> 00:18:14,580
Dig around into the working group standards
and take a look at issues.

220
00:18:14,580 --> 00:18:22,100
There is a lot of issue labels that the issues
are fixed with.

221
00:18:22,100 --> 00:18:25,700
As the name implies these are good first issues
for people to get involved.

222
00:18:25,700 --> 00:18:31,340
A lot are low hanging fruit and some are editorial
in nature where you can dig around and get

223
00:18:31,340 --> 00:18:33,470
a sense of how they work.

224
00:18:33,470 --> 00:18:40,830
I want to cut away from Keynote and probably
screw a lot of things up in the process but

225
00:18:40,830 --> 00:18:50,130
let's see if I can show what the WHATWG page
looks like.

226
00:18:50,130 --> 00:18:56,260
One second.

227
00:18:56,260 --> 00:19:02,390
All right.

228
00:19:02,390 --> 00:19:05,460
Cool.

229
00:19:05,460 --> 00:19:11,450
Here is the WHATWG get-up page to show you
it is all happening in front of you.

230
00:19:11,450 --> 00:19:16,930
It is a very welcoming area.

231
00:19:16,930 --> 00:19:20,000
This is basically a list of all the specifications
that we maintain.

232
00:19:20,000 --> 00:19:24,290
Giant list of HTML standards, the fetch standard
and stuff like that.

233
00:19:24,290 --> 00:19:28,220
You can go to one of these repositories and
see what is inside.

234
00:19:28,220 --> 00:19:32,549
There must be a source code that the standard
exists in.

235
00:19:32,549 --> 00:19:36,890
A lot of times this will take in the form
of a BS file.

236
00:19:36,890 --> 00:19:38,420
BS does not stand for bullshit.

237
00:19:38,420 --> 00:19:44,270
We are serious people here working on standards
and the platform.

238
00:19:44,270 --> 00:19:50,230
It is basically the language we mixed in with
HTML and preprocess before we build the standard

239
00:19:50,230 --> 00:19:52,880
and helps us with cross linking and other
fancy things.

240
00:19:52,880 --> 00:19:55,290
You can check out the source there.

241
00:19:55,290 --> 00:19:59,770
All standards exist at something dot spec.

242
00:19:59,770 --> 00:20:01,809
They look like this.

243
00:20:01,809 --> 00:20:05,510
They are the ones with the green logos that
the browser actually trusts.

244
00:20:05,510 --> 00:20:07,630
We can go in and check out the standard.

245
00:20:07,630 --> 00:20:10,390
All kinds of stuff like that.

246
00:20:10,390 --> 00:20:16,740
If you are looking to get involved, you can
go under the issue section and we have a bunch

247
00:20:16,740 --> 00:20:18,580
of labels we use.

248
00:20:18,580 --> 00:20:21,650
If we want to check out these issues, for
example, this is the fetch standard things,

249
00:20:21,650 --> 00:20:26,580
like the fetch method exists on the request
object, you could go in and try to find the

250
00:20:26,580 --> 00:20:28,160
good first issues.

251
00:20:28,160 --> 00:20:29,750
This is really cool.

252
00:20:29,750 --> 00:20:32,750
I can dig around here and help solve some
issues.

253
00:20:32,750 --> 00:20:37,940
Now we are kind of on to evolving the web
platform and working with a standards body

254
00:20:37,940 --> 00:20:42,110
to help fix some of the problems they identified
in the platform.

255
00:20:42,110 --> 00:20:47,412
This goes back to interfacing with the community
and the community groups online so I want

256
00:20:47,412 --> 00:20:48,980
to talk a little bit about this.

257
00:20:48,980 --> 00:20:55,330
We are dealing with the WHATWG and there is
a bunch of ways to communicate.

258
00:20:55,330 --> 00:20:58,610
You can chime in on an issue and say I really
want to work on this.

259
00:20:58,610 --> 00:20:59,610
This looks cool.

260
00:20:59,610 --> 00:21:06,210
We are super-super happy to provide mentorship
for people looking to get involved.

261
00:21:06,210 --> 00:21:13,190
Also, we are on the big bad scary place and
that is IRC under free Node on the WHATWG

262
00:21:13,190 --> 00:21:14,190
channel.

263
00:21:14,190 --> 00:21:17,460
I am always logged in and a lot of others
are always logged in and we are always available

264
00:21:17,460 --> 00:21:20,230
to help with Russians and stuff like that.

265
00:21:20,230 --> 00:21:24,580
There is a lot of information here thrown
at you and things like that and at the very

266
00:21:24,580 --> 00:21:30,100
end of the presentation I will give you a
long web page you can go to get this stuff

267
00:21:30,100 --> 00:21:31,100
from.

268
00:21:31,100 --> 00:21:32,690
I want to talk about why do to do this.

269
00:21:32,690 --> 00:21:38,830
There is a lot of cool reasons to learn Angular
and React and work on the web.

270
00:21:38,830 --> 00:21:45,570
I know we are in Seattle in Microsoft land
but if you have a problem with Windows APIs

271
00:21:45,570 --> 00:21:50,530
you have to work at Microsoft to get them
changed or do something but with the web platform

272
00:21:50,530 --> 00:21:52,180
all this tough is happening in front of your
face.

273
00:21:52,180 --> 00:22:00,270
It is all on GitHub and free to participate
and anyone can go on and start helping.

274
00:22:00,270 --> 00:22:05,160
Web developers are in a unique position of
being able to influence and modify the platform

275
00:22:05,160 --> 00:22:06,680
we develop on every single day.

276
00:22:06,680 --> 00:22:10,710
That is really exciting to me and one reason
I got involved.

277
00:22:10,710 --> 00:22:15,520
I will leave you a repository I started the
other day.

278
00:22:15,520 --> 00:22:18,650
Now is the time to take pictures of the slides
if you are interested in getting involved.

279
00:22:18,650 --> 00:22:23,630
There is a lot of information more than what
I talked about in this talk.

280
00:22:23,630 --> 00:22:32,299
Check out that repository with links to getting
started, talks others have done, and how to

281
00:22:32,299 --> 00:22:35,850
get involved into the web community and modify
web standards.

282
00:22:35,850 --> 00:22:43,820
I want to leave you with things I worked on
to, hopefully, provide motivation that you

283
00:22:43,820 --> 00:22:46,670
can do the same.

284
00:22:46,670 --> 00:22:49,320
I changed how fetch works.

285
00:22:49,320 --> 00:22:57,440
I worked on Chrome to modify when we send
credentials and did the same for module scripts

286
00:22:57,440 --> 00:23:03,360
and took part of the standardization there
talking to the browser saying we are thinking

287
00:23:03,360 --> 00:23:08,880
about making this change, what do you think,
and can I do it.

288
00:23:08,880 --> 00:23:12,650
I standardized and implemented the referrerpolicy
attribute.

289
00:23:12,650 --> 00:23:24,010
I have implemented a bunch of console APIs
as well.

290
00:23:24,010 --> 00:23:27,450
The console standard is a really good one
to start getting involved in.

291
00:23:27,450 --> 00:23:29,179
I encourage you to check it out.

292
00:23:29,179 --> 00:23:34,559
It is what I started working and started working
on Chrome as a result of that.

293
00:23:34,559 --> 00:23:38,500
Finally, I have been working on something
called priority hints which is a new resource

294
00:23:38,500 --> 00:23:43,799
API that lets developers tell the browser
what priority they would like to be associated

295
00:23:43,799 --> 00:23:47,930
with the request.

296
00:23:47,930 --> 00:23:52,380
I did the implementation work in Chrome and
we are doing experimentation to see if is

297
00:23:52,380 --> 00:23:54,960
going to be available.

298
00:23:54,960 --> 00:23:58,690
I hope I have left you with a good taste in
your mouth when it comes to web standards

299
00:23:58,690 --> 00:24:03,059
and I hope you feel motivated to get involved
and contribute back to the platform.

300
00:24:03,059 --> 00:24:04,059
Thanks a lot.

