1
00:00:06,870 --> 00:00:09,000

hello and welcome to one of the last

2
00:00:09,000 --> 00:00:13,259
talks and before really get started what

3
00:00:13,259 --> 00:00:16,020
I wanted to kind of walk you through is

4
00:00:16,020 --> 00:00:18,000
is kind of some applications that we

5
00:00:18,000 --> 00:00:20,279
would typically write today and what do

6
00:00:20,279 --> 00:00:22,830
they all have in common so for example

7
00:00:22,830 --> 00:00:26,130
if we had a game such as as this what is

8
00:00:26,130 --> 00:00:29,099
it really doing well let's see we have a

9
00:00:29,099 --> 00:00:32,099
time loop or we're obviously reacting to

10
00:00:32,099 --> 00:00:35,340
events here if I can actually figure out

11
00:00:35,340 --> 00:00:38,250
what I'm doing here all of these sorts

12
00:00:38,250 --> 00:00:39,600
of things we have timers we have

13
00:00:39,600 --> 00:00:42,149
animation we have all sorts of things

14
00:00:42,149 --> 00:00:44,879
whether it's that even edge detection

15
00:00:44,879 --> 00:00:47,070
for example what do these all have in

16
00:00:47,070 --> 00:00:50,160
common you know even even simple things

17
00:00:50,160 --> 00:00:53,910
like coordination of of events together

18
00:00:53,910 --> 00:01:00,359
or real-time data analysis or or for

19
00:01:00,359 --> 00:01:03,210
example just a simple simple drawing

20
00:01:03,210 --> 00:01:05,580
mechanism what do all of these have in

21
00:01:05,580 --> 00:01:09,150
common you know even anything like Super

22
00:01:09,150 --> 00:01:18,960
Mario Brothers or or tutu MVC so

23
00:01:18,960 --> 00:01:21,360
hopefully that will come true and I

24
00:01:21,360 --> 00:01:23,700
cannot knock that off my list

25
00:01:23,700 --> 00:01:31,229
but text editors animation and even even

26
00:01:31,229 --> 00:01:34,409
even video players for example what do

27
00:01:34,409 --> 00:01:35,810
these all have in common

28
00:01:35,810 --> 00:01:39,570
you know this for example streaming live

29
00:01:39,570 --> 00:01:42,150
data really kind of cool kind of

30
00:01:42,150 --> 00:01:44,640
thinking but all of this is based upon

31
00:01:44,640 --> 00:01:47,820
and then especially here is based upon a

32
00:01:47,820 --> 00:01:51,390
very very simple simple concept and that

33
00:01:51,390 --> 00:01:56,280
is the observable and and reactive

34
00:01:56,280 --> 00:01:58,469
programming which we will talk about

35
00:01:58,469 --> 00:02:02,880
today so as I said there are a lot of

36
00:02:02,880 --> 00:02:04,829
different ways about thinking about

37
00:02:04,829 --> 00:02:06,780
these large applications that we're

38
00:02:06,780 --> 00:02:09,090
building today and so what we're going

39
00:02:09,090 --> 00:02:11,640
to be doing is really talking about how

40
00:02:11,640 --> 00:02:12,540
some of

41
00:02:12,540 --> 00:02:14,640
the larger corporations in the world

42
00:02:14,640 --> 00:02:16,230
have solved some of the really hard

43
00:02:16,230 --> 00:02:19,500
problems in a particular way by thinking

44
00:02:19,500 --> 00:02:21,329
very differently about how they write

45
00:02:21,329 --> 00:02:23,670
their applications whether it's Netflix

46
00:02:23,670 --> 00:02:27,900
slack or Microsoft or anyone else they

47
00:02:27,900 --> 00:02:30,000
all have some the same problems that you

48
00:02:30,000 --> 00:02:32,400
all do but they fought very very

49
00:02:32,400 --> 00:02:36,450
differently about how they did it so if

50
00:02:36,450 --> 00:02:39,329
you want to follow along at home you can

51
00:02:39,329 --> 00:02:41,909
you can do so there the slides are

52
00:02:41,909 --> 00:02:46,109
available now now the way I always like

53
00:02:46,109 --> 00:02:48,659
to start off with a talk is just to kind

54
00:02:48,659 --> 00:02:50,489
of give an alternative title for example

55
00:02:50,489 --> 00:02:53,519
I always stopped worrying about

56
00:02:53,519 --> 00:02:55,349
asynchronous programming and started to

57
00:02:55,349 --> 00:02:58,169
learn to love the observable so like I

58
00:02:58,169 --> 00:02:59,819
said it's going to be a little bit of a

59
00:02:59,819 --> 00:03:03,060
mind shift on how we do that and just

60
00:03:03,060 --> 00:03:05,609
because I love concurrency jokes and and

61
00:03:05,609 --> 00:03:09,000
who doesn't or I thought to myself I'll

62
00:03:09,000 --> 00:03:12,180
solve my problem with promises and

63
00:03:12,180 --> 00:03:20,250
events now have now problems - I dang so

64
00:03:20,250 --> 00:03:22,349
many people may wonder why I'm wearing

65
00:03:22,349 --> 00:03:25,199
this hat well I am a principal of

66
00:03:25,199 --> 00:03:29,459
software engineer at at a fairly large

67
00:03:29,459 --> 00:03:32,220
company but why wear this hat is is

68
00:03:32,220 --> 00:03:34,349
because I call myself an open sorcerer

69
00:03:34,349 --> 00:03:36,870
and what I mean by that is the fact that

70
00:03:36,870 --> 00:03:39,060
for the longest time at Microsoft I've

71
00:03:39,060 --> 00:03:41,549
been doing open-source in such a way

72
00:03:41,549 --> 00:03:44,310
that I've worked on such initiatives as

73
00:03:44,310 --> 00:03:47,430
getting node supported on Windows to

74
00:03:47,430 --> 00:03:50,549
open sourcing a large part of nets and

75
00:03:50,549 --> 00:03:52,079
that's been a lot of my

76
00:03:52,079 --> 00:03:55,439
behind-the-scenes work and this

77
00:03:55,439 --> 00:03:59,669
particular company and yeah I love that

78
00:03:59,669 --> 00:04:02,400
logo I really wish we had that one still

79
00:04:02,400 --> 00:04:04,530
to this day but this one is from 1981

80
00:04:04,530 --> 00:04:06,689
it's a real logo but I like to think of

81
00:04:06,689 --> 00:04:08,189
myself as putting a little bit more

82
00:04:08,189 --> 00:04:14,370
metal into into Microsoft so if people

83
00:04:14,370 --> 00:04:16,049
saw me last night I was talking about

84
00:04:16,049 --> 00:04:18,239
this particular project so if people

85
00:04:18,239 --> 00:04:20,159
want to talk about running note on

86
00:04:20,159 --> 00:04:21,659
phones you can come and talk to me

87
00:04:21,659 --> 00:04:23,510
afterwards I think it's a lot of a very

88
00:04:23,510 --> 00:04:25,830
interesting project about build

89
00:04:25,830 --> 00:04:27,750
the pure web and I think it's very very

90
00:04:27,750 --> 00:04:30,030
affable applicable especially at

91
00:04:30,030 --> 00:04:33,439
conferences when Wi-Fi can be scanned

92
00:04:33,439 --> 00:04:36,180
but the vast majority of what we're

93
00:04:36,180 --> 00:04:38,250
going to be talking about here is is my

94
00:04:38,250 --> 00:04:40,620
work on the reactive extensions now this

95
00:04:40,620 --> 00:04:43,139
is a thing that's we've been working on

96
00:04:43,139 --> 00:04:47,009
so since 2009 at Microsoft and really

97
00:04:47,009 --> 00:04:48,990
it's a fundamental shift on how we think

98
00:04:48,990 --> 00:04:51,330
about asynchronous programming it has

99
00:04:51,330 --> 00:04:53,879
its own history in which we were trying

100
00:04:53,879 --> 00:04:56,159
to solve problems with asynchronous

101
00:04:56,159 --> 00:04:57,810
programming before a lot of people

102
00:04:57,810 --> 00:05:02,069
actually had those problems this is 2009

103
00:05:02,069 --> 00:05:06,330
before before promises really existed we

104
00:05:06,330 --> 00:05:08,879
were trying to invent our own style of

105
00:05:08,879 --> 00:05:12,979
how we were to express both events and

106
00:05:12,979 --> 00:05:15,629
asynchronous callbacks in a simple way

107
00:05:15,629 --> 00:05:17,940
and so what we called ourselves as the

108
00:05:17,940 --> 00:05:20,849
Riyad we are a part of a larger program

109
00:05:20,849 --> 00:05:23,969
called Volta but we then shortened

110
00:05:23,969 --> 00:05:26,969
ourselves to reactive extensions or we

111
00:05:26,969 --> 00:05:32,159
just call ourselves rx pushers now what

112
00:05:32,159 --> 00:05:35,639
I really want to talk about is Netflix

113
00:05:35,639 --> 00:05:38,009
in particular and how many people have

114
00:05:38,009 --> 00:05:41,250
Netflix heard of Netflix I'm fair a fair

115
00:05:41,250 --> 00:05:44,370
number so there their goal is is fairly

116
00:05:44,370 --> 00:05:47,819
simple stream stream movies from any

117
00:05:47,819 --> 00:05:52,259
device and if you think about it at

118
00:05:52,259 --> 00:05:54,569
scale you're talking a lot of data

119
00:05:54,569 --> 00:05:56,550
you're talking one third of the u.s.

120
00:05:56,550 --> 00:05:58,259
broadband traffic I don't know where

121
00:05:58,259 --> 00:06:00,930
we're at what it is in other countries

122
00:06:00,930 --> 00:06:04,069
but that's a significant amount of

123
00:06:04,069 --> 00:06:07,139
things that they have to worry about so

124
00:06:07,139 --> 00:06:11,270
this is really a story on how Netflix

125
00:06:11,270 --> 00:06:13,770
Microsoft and others have sold some

126
00:06:13,770 --> 00:06:15,900
really fundamentally hard problems and

127
00:06:15,900 --> 00:06:19,860
building those large systems by just

128
00:06:19,860 --> 00:06:21,419
thinking a little bit differently about

129
00:06:21,419 --> 00:06:25,650
how they deal with with events so for

130
00:06:25,650 --> 00:06:27,930
anyone who actually has the Netflix

131
00:06:27,930 --> 00:06:30,509
player it's fundamentally asynchronous

132
00:06:30,509 --> 00:06:32,759
everything about it the last thing you

133
00:06:32,759 --> 00:06:33,899
would want to do is have that little

134
00:06:33,899 --> 00:06:36,959
spinny thing of death that Christian was

135
00:06:36,959 --> 00:06:38,699
talking about in terms of error handling

136
00:06:38,699 --> 00:06:39,090
and

137
00:06:39,090 --> 00:06:41,940
fourth so everything's app startup the

138
00:06:41,940 --> 00:06:45,419
player itself animations and the view

139
00:06:45,419 --> 00:06:49,430
model binding is all done asynchronously

140
00:06:49,430 --> 00:06:54,000
no blocking involved but that introduces

141
00:06:54,000 --> 00:06:56,639
a good number of problem that you're

142
00:06:56,639 --> 00:06:59,190
going to absolutely have when you're

143
00:06:59,190 --> 00:07:01,169
trying to do that whether it's memory

144
00:07:01,169 --> 00:07:03,449
leaks because you have so many open

145
00:07:03,449 --> 00:07:06,139
event handlers to race conditions where

146
00:07:06,139 --> 00:07:08,850
these two events have to have to happen

147
00:07:08,850 --> 00:07:11,790
in a certain order or this asynchronous

148
00:07:11,790 --> 00:07:13,320
callback has to happen in a certain

149
00:07:13,320 --> 00:07:16,410
order I that can be very very complex

150
00:07:16,410 --> 00:07:18,750
and not only that but this notion of

151
00:07:18,750 --> 00:07:22,550
callback hell is is very very real and

152
00:07:22,550 --> 00:07:25,229
it's not just because your your code is

153
00:07:25,229 --> 00:07:27,389
walking off the side of the page it's

154
00:07:27,389 --> 00:07:29,220
more along the lines of your company

155
00:07:29,220 --> 00:07:31,229
you're building these very complex state

156
00:07:31,229 --> 00:07:32,910
machines and you're not quite sure

157
00:07:32,910 --> 00:07:34,950
exactly where you are in the code

158
00:07:34,950 --> 00:07:36,870
because somewhere within all the

159
00:07:36,870 --> 00:07:38,580
callbacks is your state and you're not

160
00:07:38,580 --> 00:07:40,139
quite sure where you are in the

161
00:07:40,139 --> 00:07:48,300
computation so in 2014 they finally did

162
00:07:48,300 --> 00:07:51,600
a complete and utter redo on where they

163
00:07:51,600 --> 00:07:55,500
were so when they started in 2011 they

164
00:07:55,500 --> 00:07:58,770
had they had seven different platforms

165
00:07:58,770 --> 00:08:01,260
seven different languages all to

166
00:08:01,260 --> 00:08:02,970
describe doing these asynchronous

167
00:08:02,970 --> 00:08:05,490
operations as I showed you each one had

168
00:08:05,490 --> 00:08:08,099
its own way of thinking about it for the

169
00:08:08,099 --> 00:08:10,440
data binding for the data access and so

170
00:08:10,440 --> 00:08:12,330
forth and so what they did is they

171
00:08:12,330 --> 00:08:14,669
thought differently about how they were

172
00:08:14,669 --> 00:08:16,470
doing events so they could standardize

173
00:08:16,470 --> 00:08:19,110
on a single way of thinking about it

174
00:08:19,110 --> 00:08:22,800
not just not just having one library two

175
00:08:22,800 --> 00:08:25,320
libraries to do it but just thinking

176
00:08:25,320 --> 00:08:28,050
fundamentally different about it and so

177
00:08:28,050 --> 00:08:30,180
what they came up with is using the

178
00:08:30,180 --> 00:08:31,830
observables which we'll be talking about

179
00:08:31,830 --> 00:08:35,279
today as their base and what this is is

180
00:08:35,279 --> 00:08:38,219
it's a very language neutral approach to

181
00:08:38,219 --> 00:08:41,339
to solving asynchronous problems so what

182
00:08:41,339 --> 00:08:43,620
they were able to do is port what we've

183
00:08:43,620 --> 00:08:46,470
done already in JavaScript and on net to

184
00:08:46,470 --> 00:08:49,740
other languages such as groovy Scala

185
00:08:49,740 --> 00:08:51,080
Java

186
00:08:51,080 --> 00:08:54,710
Clojure and so forth so regardless of

187
00:08:54,710 --> 00:08:56,570
whether you were a front-end developer

188
00:08:56,570 --> 00:08:58,970
or a back-end developer you could easily

189
00:08:58,970 --> 00:09:00,920
switch between teams because you

190
00:09:00,920 --> 00:09:03,170
understood the paradigm it wasn't

191
00:09:03,170 --> 00:09:04,490
necessarily that you needed to

192
00:09:04,490 --> 00:09:06,500
understand language you understood the

193
00:09:06,500 --> 00:09:10,270
paradigm you understood the architecture

194
00:09:10,270 --> 00:09:13,520
so quite honestly why is this so

195
00:09:13,520 --> 00:09:15,740
important because real-time is

196
00:09:15,740 --> 00:09:18,460
everywhere and what we're doing today

197
00:09:18,460 --> 00:09:21,530
whether it's looking off of your phone

198
00:09:21,530 --> 00:09:23,630
and getting GPS data seeing where you

199
00:09:23,630 --> 00:09:24,370
are

200
00:09:24,370 --> 00:09:28,130
SMS traffic any number of these sensors

201
00:09:28,130 --> 00:09:31,190
well Twitter notifications anything how

202
00:09:31,190 --> 00:09:33,140
do you keep up with that how do you

203
00:09:33,140 --> 00:09:34,490
coordinate them all together without

204
00:09:34,490 --> 00:09:36,890
just giving up and just shoving them

205
00:09:36,890 --> 00:09:39,020
down your shirt it just it gets very

206
00:09:39,020 --> 00:09:41,480
very complicated very very quickly

207
00:09:41,480 --> 00:09:45,680
and unfortunately the given mechanisms

208
00:09:45,680 --> 00:09:47,980
that we have in JavaScript are terrible

209
00:09:47,980 --> 00:09:51,370
let's just face it I mean programming

210
00:09:51,370 --> 00:09:54,710
asynchronously in JavaScript today using

211
00:09:54,710 --> 00:09:56,960
events and using callbacks and using

212
00:09:56,960 --> 00:09:59,870
promises aren't exactly great they might

213
00:09:59,870 --> 00:10:02,570
be better in the future but right now it

214
00:10:02,570 --> 00:10:05,330
shows an utter lack of coordination here

215
00:10:05,330 --> 00:10:07,070
I don't know why the guy couldn't just

216
00:10:07,070 --> 00:10:12,590
put down one thing and I will so it even

217
00:10:12,590 --> 00:10:17,480
was a topic of concern even to the

218
00:10:17,480 --> 00:10:19,190
highest levels of the US government for

219
00:10:19,190 --> 00:10:22,880
example so that we'd shoot so President

220
00:10:22,880 --> 00:10:24,500
Kennedy simply choose to solve

221
00:10:24,500 --> 00:10:26,540
asynchronous programming and to do other

222
00:10:26,540 --> 00:10:28,580
things not because they're easy but

223
00:10:28,580 --> 00:10:30,980
because they are hard and then he

224
00:10:30,980 --> 00:10:33,380
realized afterwards after saying this he

225
00:10:33,380 --> 00:10:35,060
is like well maybe it is too hard and

226
00:10:35,060 --> 00:10:39,410
let's just go to the moon instead so he

227
00:10:39,410 --> 00:10:45,170
decided to go to the moon I think so

228
00:10:45,170 --> 00:10:47,900
like I said callback hell is really a

229
00:10:47,900 --> 00:10:50,090
thing and and like what I meant by that

230
00:10:50,090 --> 00:10:52,580
is the fact that we have here whether

231
00:10:52,580 --> 00:10:54,590
you're having a movie ticket and the

232
00:10:54,590 --> 00:10:56,300
player error and then you're trying to

233
00:10:56,300 --> 00:10:58,370
figure out where exactly are you okay if

234
00:10:58,370 --> 00:10:59,900
the players not initialized and

235
00:10:59,900 --> 00:11:01,540
initialize it and then try to finish

236
00:11:01,540 --> 00:11:04,160
okay going in to try to finish that

237
00:11:04,160 --> 00:11:07,040
I got where are you supposed to go from

238
00:11:07,040 --> 00:11:08,899
there oh yeah yeah you're supposed to go

239
00:11:08,899 --> 00:11:10,459
to that callback which might be

240
00:11:10,459 --> 00:11:12,769
authorized movie it just gets very

241
00:11:12,769 --> 00:11:16,550
complex and it turns into instead of a

242
00:11:16,550 --> 00:11:18,319
pyramid of numerous anything like that I

243
00:11:18,319 --> 00:11:22,459
call it a cow's head and I think it's

244
00:11:22,459 --> 00:11:25,069
very very easy to get burned on on those

245
00:11:25,069 --> 00:11:27,579
kinds of things because you have no idea

246
00:11:27,579 --> 00:11:31,279
where your status is where you're in the

247
00:11:31,279 --> 00:11:33,769
computation and you know if you're

248
00:11:33,769 --> 00:11:36,079
looking at these your stack traces you

249
00:11:36,079 --> 00:11:37,910
just get lost and it makes me want to

250
00:11:37,910 --> 00:11:39,620
jump out a window sometimes quite

251
00:11:39,620 --> 00:11:42,439
honestly and even when we're dealing

252
00:11:42,439 --> 00:11:46,220
with raw events by themselves you know

253
00:11:46,220 --> 00:11:48,560
we we still have to have whether the the

254
00:11:48,560 --> 00:11:50,509
mouse is down or not and the and the

255
00:11:50,509 --> 00:11:52,610
state that we happen to deal with well

256
00:11:52,610 --> 00:11:54,350
what if we want to go beyond that what

257
00:11:54,350 --> 00:11:56,180
if we want to add some delays to it or

258
00:11:56,180 --> 00:12:00,829
or or call a an agent make an AJAX call

259
00:12:00,829 --> 00:12:04,310
all of that then gets somehow lost

260
00:12:04,310 --> 00:12:05,959
because now you're having to deal with

261
00:12:05,959 --> 00:12:08,300
all of these three separate callbacks

262
00:12:08,300 --> 00:12:11,420
and having to decipher where all of your

263
00:12:11,420 --> 00:12:14,930
logic is going to be so yeah whoops

264
00:12:14,930 --> 00:12:19,279
indeed I is is it really is an enemy of

265
00:12:19,279 --> 00:12:22,579
the state and like I said all of these

266
00:12:22,579 --> 00:12:24,709
events that you're trying to to

267
00:12:24,709 --> 00:12:28,430
coordinate becomes very very hard to to

268
00:12:28,430 --> 00:12:36,050
juggle quite honestly so so in our

269
00:12:36,050 --> 00:12:38,149
infinite wisdom in JavaScript we came

270
00:12:38,149 --> 00:12:41,120
out with the this idea of promises so we

271
00:12:41,120 --> 00:12:43,069
would have this first-class notion of

272
00:12:43,069 --> 00:12:45,170
instead of dealing with callbacks we

273
00:12:45,170 --> 00:12:47,959
would deal with promises so with then we

274
00:12:47,959 --> 00:12:51,649
could take the aforementioned example

275
00:12:51,649 --> 00:12:53,750
and we could say player initialize then

276
00:12:53,750 --> 00:12:55,759
authorize movie or else it's a login

277
00:12:55,759 --> 00:12:59,389
error then play the movie or or it's an

278
00:12:59,389 --> 00:13:01,389
unauthorized you're not allowed to do it

279
00:13:01,389 --> 00:13:04,399
but you have problems with that and the

280
00:13:04,399 --> 00:13:06,620
problems is the way that it was designed

281
00:13:06,620 --> 00:13:11,509
in es2015 2015 or es6 as some people

282
00:13:11,509 --> 00:13:13,009
call it is the fact that there's no

283
00:13:13,009 --> 00:13:15,890
cancellation built right into the

284
00:13:15,890 --> 00:13:18,890
into the promise itself there isn't any

285
00:13:18,890 --> 00:13:21,530
you can certainly write it yourself but

286
00:13:21,530 --> 00:13:24,980
by default it isn't in there and in fact

287
00:13:24,980 --> 00:13:27,230
it actually became very much a point of

288
00:13:27,230 --> 00:13:31,040
contention when when people were you

289
00:13:31,040 --> 00:13:32,810
starting to use the fetch API and

290
00:13:32,810 --> 00:13:34,970
realizing that they were using you know

291
00:13:34,970 --> 00:13:38,180
xh the xhr like everybody else was used

292
00:13:38,180 --> 00:13:40,640
to and then the right well so how do i

293
00:13:40,640 --> 00:13:45,020
cancel that oops so they kind of left

294
00:13:45,020 --> 00:13:47,750
that out and so this is a fairly long

295
00:13:47,750 --> 00:13:50,510
thread here as you can see 21

296
00:13:50,510 --> 00:13:54,680
participants and oh yeah 204 comments so

297
00:13:54,680 --> 00:13:56,750
I think that kind of solves the problem

298
00:13:56,750 --> 00:13:58,400
of how many engineers does it take to

299
00:13:58,400 --> 00:14:01,280
cancel a promise and they still haven't

300
00:14:01,280 --> 00:14:05,480
figured it out and not only that but it

301
00:14:05,480 --> 00:14:09,950
also lacks a notion of finally so for

302
00:14:09,950 --> 00:14:11,480
example if you have some sort of

303
00:14:11,480 --> 00:14:14,720
resource that you want to finally clean

304
00:14:14,720 --> 00:14:17,210
up at the very end ensure that at the

305
00:14:17,210 --> 00:14:19,310
very end of your chain is going to be

306
00:14:19,310 --> 00:14:22,220
cleaned up there isn't any so what I

307
00:14:22,220 --> 00:14:25,550
considered is is that the the promise

308
00:14:25,550 --> 00:14:28,190
itself is a very nice way of dealing

309
00:14:28,190 --> 00:14:30,170
with a really fast car with absolutely

310
00:14:30,170 --> 00:14:35,840
no breaks now other people think about

311
00:14:35,840 --> 00:14:38,120
stream programming and think well that

312
00:14:38,120 --> 00:14:41,090
maybe we'll solve our problem but when

313
00:14:41,090 --> 00:14:42,860
people think about stream programming

314
00:14:42,860 --> 00:14:45,620
they mostly think about node streams and

315
00:14:45,620 --> 00:14:47,450
quite honestly at the beginning I would

316
00:14:47,450 --> 00:14:48,890
say that node streams were pretty

317
00:14:48,890 --> 00:14:53,780
terrible and the fact that just like

318
00:14:53,780 --> 00:14:56,210
that poor kid the data started firing

319
00:14:56,210 --> 00:14:59,300
before he was ready for it and you

320
00:14:59,300 --> 00:15:00,980
couldn't consume just a little bit know

321
00:15:00,980 --> 00:15:03,140
you know your if you're completely

322
00:15:03,140 --> 00:15:04,730
screwed because pause and resume or

323
00:15:04,730 --> 00:15:06,890
absolutely heart are hard to get right

324
00:15:06,890 --> 00:15:10,940
and so they they had to come up with

325
00:15:10,940 --> 00:15:13,340
four different ways of expressing

326
00:15:13,340 --> 00:15:15,530
streams in the next version of streams

327
00:15:15,530 --> 00:15:19,490
to with with transform readable writable

328
00:15:19,490 --> 00:15:23,630
and duplex yay and then streams three

329
00:15:23,630 --> 00:15:27,140
still adds more complexity with whole

330
00:15:27,140 --> 00:15:27,680
bulk

331
00:15:27,680 --> 00:15:30,710
rates and bulk reads so once again very

332
00:15:30,710 --> 00:15:32,960
very complicated stuff in order to do

333
00:15:32,960 --> 00:15:35,770
something that should be fairly simple

334
00:15:35,770 --> 00:15:39,020
so let's go back to 1994 and I realized

335
00:15:39,020 --> 00:15:40,490
probably not many of you were born by

336
00:15:40,490 --> 00:15:43,870
them but let's go back anyways to this

337
00:15:43,870 --> 00:15:46,670
particular book here design patterns and

338
00:15:46,670 --> 00:15:48,920
this is a hallmark book that a lot of

339
00:15:48,920 --> 00:15:51,740
people bought because it was this idea

340
00:15:51,740 --> 00:15:53,570
where you took all of these design

341
00:15:53,570 --> 00:15:55,850
patterns and finally put them in a

342
00:15:55,850 --> 00:15:59,240
single book together and what they did

343
00:15:59,240 --> 00:16:01,250
is they had so many of these patterns

344
00:16:01,250 --> 00:16:03,560
whether it's singleton facade abstract

345
00:16:03,560 --> 00:16:06,080
Factory you know all those things that

346
00:16:06,080 --> 00:16:08,390
you use for java scale your java names

347
00:16:08,390 --> 00:16:12,830
for four particular classes but two in

348
00:16:12,830 --> 00:16:14,630
particular that were very interesting to

349
00:16:14,630 --> 00:16:17,570
at least me at the time and us was was

350
00:16:17,570 --> 00:16:20,240
the iterator in the observer but there

351
00:16:20,240 --> 00:16:22,190
is absolutely no linkage at all between

352
00:16:22,190 --> 00:16:24,320
the two of them but we thought that

353
00:16:24,320 --> 00:16:27,410
there absolutely was so for example in

354
00:16:27,410 --> 00:16:29,300
the iterator pattern which is now as

355
00:16:29,300 --> 00:16:32,839
part of es2015 we can say get numbers

356
00:16:32,839 --> 00:16:36,620
which returns us a an iterable iterator

357
00:16:36,620 --> 00:16:38,720
in which we can call next which tells us

358
00:16:38,720 --> 00:16:40,850
whether we're done or not and gives us

359
00:16:40,850 --> 00:16:43,390
our value so we can go through there and

360
00:16:43,390 --> 00:16:46,130
finally we get done and value is

361
00:16:46,130 --> 00:16:49,640
undefined and the subject observer

362
00:16:49,640 --> 00:16:52,190
pattern which we're all very very used

363
00:16:52,190 --> 00:16:55,070
to for example on document add event

364
00:16:55,070 --> 00:16:56,779
listener and remove event listener is

365
00:16:56,779 --> 00:16:59,420
the subject observer pattern so we've

366
00:16:59,420 --> 00:17:01,930
been using these design patterns for

367
00:17:01,930 --> 00:17:07,370
since forever in in in JavaScript and so

368
00:17:07,370 --> 00:17:09,170
when you move the mouse sure enough you

369
00:17:09,170 --> 00:17:11,720
started to get the data now let me ask

370
00:17:11,720 --> 00:17:14,449
you a fundamental question then what's

371
00:17:14,449 --> 00:17:16,130
the difference between an array of this

372
00:17:16,130 --> 00:17:19,010
kind of data and that Mouse movement we

373
00:17:19,010 --> 00:17:23,780
just saw before well they're both

374
00:17:23,780 --> 00:17:27,020
collections nothing more fundamental

375
00:17:27,020 --> 00:17:29,150
than that in the fact that your mouse

376
00:17:29,150 --> 00:17:33,800
your phone and an array of stock ticks

377
00:17:33,800 --> 00:17:36,470
are both collections that you should be

378
00:17:36,470 --> 00:17:39,380
able to treat as just the same kind of

379
00:17:39,380 --> 00:17:40,050
thing

380
00:17:40,050 --> 00:17:43,020
and as was talked about yesterday in the

381
00:17:43,020 --> 00:17:46,860
functional programming talk when you

382
00:17:46,860 --> 00:17:49,650
talk about functional functional

383
00:17:49,650 --> 00:17:51,390
programming over these questions that's

384
00:17:51,390 --> 00:17:53,870
exactly what we're going to do here so

385
00:17:53,870 --> 00:17:58,190
the vast majority of the of the of the

386
00:17:58,190 --> 00:18:01,350
coding that was done then I'll show you

387
00:18:01,350 --> 00:18:06,810
is is all using very very few functions

388
00:18:06,810 --> 00:18:10,460
but very very powerful ones for example

389
00:18:10,460 --> 00:18:13,410
map which is the idea that you can

390
00:18:13,410 --> 00:18:16,410
transform every single element in the

391
00:18:16,410 --> 00:18:18,330
collection and project it to a new

392
00:18:18,330 --> 00:18:21,420
collection so for in this example we can

393
00:18:21,420 --> 00:18:24,050
take our circles and project them into

394
00:18:24,050 --> 00:18:27,510
into diamonds and the same thing with

395
00:18:27,510 --> 00:18:30,270
filter is to apply a predicate to every

396
00:18:30,270 --> 00:18:33,060
single item to say I only want circles

397
00:18:33,060 --> 00:18:37,020
so give me circles now flat maps a

398
00:18:37,020 --> 00:18:38,460
little bit different and it's a little

399
00:18:38,460 --> 00:18:41,400
trickier to think about although if if

400
00:18:41,400 --> 00:18:44,400
you're used to two arrays it's no more

401
00:18:44,400 --> 00:18:46,410
than just in a Cartesian product but

402
00:18:46,410 --> 00:18:49,380
that's not good enough quite honestly

403
00:18:49,380 --> 00:18:52,440
but what what it's really doing is it's

404
00:18:52,440 --> 00:18:55,320
going to do a map like we did we showed

405
00:18:55,320 --> 00:18:57,150
before and then it's going to start

406
00:18:57,150 --> 00:18:59,340
merging the data back into a single

407
00:18:59,340 --> 00:19:01,500
stream so it's going to start getting

408
00:19:01,500 --> 00:19:03,840
multiple pieces of data as you can see

409
00:19:03,840 --> 00:19:07,800
here for example the the red here will

410
00:19:07,800 --> 00:19:11,100
project down into into multiples so it

411
00:19:11,100 --> 00:19:13,620
starts based upon the time and the

412
00:19:13,620 --> 00:19:16,320
reacting to it merge it all into a

413
00:19:16,320 --> 00:19:20,310
single stream so yes I realize it's a

414
00:19:20,310 --> 00:19:22,020
fundamental shift in the way that you're

415
00:19:22,020 --> 00:19:24,390
thinking about it and you really kind of

416
00:19:24,390 --> 00:19:27,720
need a smack to really kind of think

417
00:19:27,720 --> 00:19:29,840
about it go a little bit differently

418
00:19:29,840 --> 00:19:32,340
so let's actually walk through some code

419
00:19:32,340 --> 00:19:34,350
and make it absolutely clear on how this

420
00:19:34,350 --> 00:19:36,930
works so if I wanted to get top-rated

421
00:19:36,930 --> 00:19:39,210
milk boom movies what do I do

422
00:19:39,210 --> 00:19:42,060
well I start off with the the array of

423
00:19:42,060 --> 00:19:44,490
the video list for a particular user I

424
00:19:44,490 --> 00:19:47,310
go through and I took and I filter out

425
00:19:47,310 --> 00:19:50,509
all of the all of the ones that

426
00:19:50,509 --> 00:19:52,700
I only want the ones that to have a

427
00:19:52,700 --> 00:19:55,309
rating of five and then I can go through

428
00:19:55,309 --> 00:19:57,859
and pass in myself and and display each

429
00:19:57,859 --> 00:20:02,179
movie now what if I told you that I can

430
00:20:02,179 --> 00:20:04,999
turn that exactly around on its head and

431
00:20:04,999 --> 00:20:07,429
say I can create a drag event with the

432
00:20:07,429 --> 00:20:11,119
same exact code would you would you

433
00:20:11,119 --> 00:20:13,519
believe me of course you wouldn't well

434
00:20:13,519 --> 00:20:17,690
why would I be here so what you would do

435
00:20:17,690 --> 00:20:21,259
is is here is you would take the mouse

436
00:20:21,259 --> 00:20:25,070
down and flatmap or just the map and the

437
00:20:25,070 --> 00:20:28,190
merge and then take the mouse move take

438
00:20:28,190 --> 00:20:30,559
until mouse up so basically what you're

439
00:20:30,559 --> 00:20:32,539
doing is you're saying mouse down and

440
00:20:32,539 --> 00:20:35,929
mouse move together merge together and

441
00:20:35,929 --> 00:20:38,479
take until mouse up happens and when

442
00:20:38,479 --> 00:20:40,759
mouse up happens the collection stops

443
00:20:40,759 --> 00:20:44,149
and no longer is a collection now

444
00:20:44,149 --> 00:20:46,820
suddenly you get that zen-like feeling

445
00:20:46,820 --> 00:20:49,549
you're right Wow just about everything

446
00:20:49,549 --> 00:20:52,399
that I'm dealing with is a stream it's

447
00:20:52,399 --> 00:20:54,440
something that I can query something

448
00:20:54,440 --> 00:20:57,799
that's very tangible unlike events today

449
00:20:57,799 --> 00:21:01,369
in JavaScript why because it's a

450
00:21:01,369 --> 00:21:04,039
first-class value and what I mean by

451
00:21:04,039 --> 00:21:06,259
first-class value is the fact that I can

452
00:21:06,259 --> 00:21:09,529
both create one and I method but I can

453
00:21:09,529 --> 00:21:13,369
also return one as well and where does

454
00:21:13,369 --> 00:21:15,080
it really fit into the grand scheme of

455
00:21:15,080 --> 00:21:17,330
things so when we talk about the general

456
00:21:17,330 --> 00:21:19,339
theory of reactivity as it were

457
00:21:19,339 --> 00:21:22,279
we have four quadrants here whether it's

458
00:21:22,279 --> 00:21:25,039
single or multiple synchronous and

459
00:21:25,039 --> 00:21:27,259
asynchronous we just have to think about

460
00:21:27,259 --> 00:21:29,659
each one a little bit differently so for

461
00:21:29,659 --> 00:21:32,089
example an object is fairly fairly

462
00:21:32,089 --> 00:21:36,049
straightforward and es5 we added in the

463
00:21:36,049 --> 00:21:39,529
ability to do filter and map directly on

464
00:21:39,529 --> 00:21:41,450
our arrays so now that we were able to

465
00:21:41,450 --> 00:21:45,229
do some fairly good compositional

466
00:21:45,229 --> 00:21:48,559
programming styles using just plain

467
00:21:48,559 --> 00:21:52,339
built-in objects then the promise came

468
00:21:52,339 --> 00:21:56,419
along as part of yes yes 2015 although

469
00:21:56,419 --> 00:21:58,129
it had been around for quite some time

470
00:21:58,129 --> 00:22:01,129
before that in various forms but then we

471
00:22:01,129 --> 00:22:03,590
now have a notion of a single values

472
00:22:03,590 --> 00:22:04,610
instead of having to deal with a

473
00:22:04,610 --> 00:22:06,980
callback we have the single value I can

474
00:22:06,980 --> 00:22:09,110
handle to everybody and they would get

475
00:22:09,110 --> 00:22:10,510
the right value

476
00:22:10,510 --> 00:22:14,690
now observable on the other hand looks

477
00:22:14,690 --> 00:22:17,870
exactly like array and there's a very

478
00:22:17,870 --> 00:22:20,570
specific reason why is because in order

479
00:22:20,570 --> 00:22:22,279
for people to actually start thinking

480
00:22:22,279 --> 00:22:25,159
about thinking about asynchronous

481
00:22:25,159 --> 00:22:26,809
programming you want to give them

482
00:22:26,809 --> 00:22:30,620
something they're familiar with and let

483
00:22:30,620 --> 00:22:33,890
me just clear something up that that

484
00:22:33,890 --> 00:22:36,020
observable is definitely not object

485
00:22:36,020 --> 00:22:38,960
observe it's not an event emitter in in

486
00:22:38,960 --> 00:22:42,409
JavaScript nor is it an event target and

487
00:22:42,409 --> 00:22:46,130
just as well object observed went

488
00:22:46,130 --> 00:22:48,470
bye-bye anyways and that was the thing

489
00:22:48,470 --> 00:22:50,149
that people are like oh this is great

490
00:22:50,149 --> 00:22:51,500
we're going to solve all our data

491
00:22:51,500 --> 00:22:53,570
binding issues with object.observe you

492
00:22:53,570 --> 00:22:55,580
know I'll change something on there now

493
00:22:55,580 --> 00:22:58,130
it ended up being a pig it ended up

494
00:22:58,130 --> 00:23:03,409
being very very slow so it's gone so

495
00:23:03,409 --> 00:23:05,539
instead everyone started to hop on this

496
00:23:05,539 --> 00:23:08,440
idea of reactive programming and

497
00:23:08,440 --> 00:23:10,610
unfortunately when I say reactive

498
00:23:10,610 --> 00:23:16,669
programming everyone said react ah yeah

499
00:23:16,669 --> 00:23:18,470
never mind the fact that there's nothing

500
00:23:18,470 --> 00:23:20,179
to do with reactive programming and

501
00:23:20,179 --> 00:23:22,159
react but you know they they kind of

502
00:23:22,159 --> 00:23:24,830
stole the the the the moniker I've been

503
00:23:24,830 --> 00:23:28,760
using four or five years oh well so what

504
00:23:28,760 --> 00:23:32,090
is reactive programming anyways so you

505
00:23:32,090 --> 00:23:33,740
know it's a very squishy term sort of

506
00:23:33,740 --> 00:23:35,809
like the way that functional programming

507
00:23:35,809 --> 00:23:39,760
is a squishy term you quite can't quite

508
00:23:39,760 --> 00:23:42,380
define it very easily so I just went to

509
00:23:42,380 --> 00:23:45,320
the dictionary why not

510
00:23:45,320 --> 00:23:47,450
because Wikipedia had this really long

511
00:23:47,450 --> 00:23:49,789
article and I couldn't figure it out so

512
00:23:49,789 --> 00:23:51,529
it just says readily responding to a

513
00:23:51,529 --> 00:23:54,679
stimulus okay and its components are

514
00:23:54,679 --> 00:23:56,450
active and rallies ready to receive

515
00:23:56,450 --> 00:24:00,860
events well we've already done that G

516
00:24:00,860 --> 00:24:04,390
jQuery has been doing that forever and

517
00:24:04,390 --> 00:24:07,880
even further than that I think the our

518
00:24:07,880 --> 00:24:10,460
business analysts in our company if I

519
00:24:10,460 --> 00:24:12,830
can laugh at us easily and I write you

520
00:24:12,830 --> 00:24:15,110
noobs we've been doing reactive

521
00:24:15,110 --> 00:24:16,100
programming forever

522
00:24:16,100 --> 00:24:21,530
it's called Excel so you really want to

523
00:24:21,530 --> 00:24:23,390
know really what reactive programming is

524
00:24:23,390 --> 00:24:25,130
and where it came from there's actually

525
00:24:25,130 --> 00:24:29,240
a paper that people can read on the very

526
00:24:29,240 --> 00:24:31,520
origins of reactive programming by

527
00:24:31,520 --> 00:24:33,890
Gerrard berry about how he created the

528
00:24:33,890 --> 00:24:35,780
general-purpose language for doing so

529
00:24:35,780 --> 00:24:38,240
and yes I know there there's a there's a

530
00:24:38,240 --> 00:24:40,030
certain phobia of

531
00:24:40,030 --> 00:24:43,190
reading academic papers because they

532
00:24:43,190 --> 00:24:44,929
have a tendency to make you melt in

533
00:24:44,929 --> 00:24:48,320
terms of their content and even the

534
00:24:48,320 --> 00:24:50,600
smartest of us have you know that kind

535
00:24:50,600 --> 00:24:53,770
of reaction to the technical papers and

536
00:24:53,770 --> 00:24:57,140
and God bless the Germans for coming up

537
00:24:57,140 --> 00:24:59,419
with an exact word for this of computer

538
00:24:59,419 --> 00:25:02,299
vision shaft Academy sheesh Pepa phobia

539
00:25:02,299 --> 00:25:08,570
I think there ya go

540
00:25:08,570 --> 00:25:11,360
I love its yes I love having a German

541
00:25:11,360 --> 00:25:14,120
German in there I love you guys that you

542
00:25:14,120 --> 00:25:19,070
can shove ten words into one anyways so

543
00:25:19,070 --> 00:25:22,070
yeah there's an actual I think term I

544
00:25:22,070 --> 00:25:25,820
maybe I made it up I don't know and when

545
00:25:25,820 --> 00:25:27,559
people start to talk about reactive

546
00:25:27,559 --> 00:25:28,610
program they start to think about

547
00:25:28,610 --> 00:25:31,820
functional reactive programming no no no

548
00:25:31,820 --> 00:25:35,809
no no this is not what people are doing

549
00:25:35,809 --> 00:25:38,000
when they think about reactive reactive

550
00:25:38,000 --> 00:25:39,530
programming functional reactive

551
00:25:39,530 --> 00:25:41,990
programming is a very precise term it's

552
00:25:41,990 --> 00:25:44,750
a term that comes from Connell Elliott

553
00:25:44,750 --> 00:25:47,990
and Paul hue DAC from the 1990s in a

554
00:25:47,990 --> 00:25:50,780
language called Fran and it had very

555
00:25:50,780 --> 00:25:53,090
precise meanings for everything that

556
00:25:53,090 --> 00:25:54,350
they did and they called it that fart

557
00:25:54,350 --> 00:25:58,309
pee so we're kind of stuck so they had a

558
00:25:58,309 --> 00:26:00,260
very distinct notion of separation

559
00:26:00,260 --> 00:26:03,320
between time continuous time whether

560
00:26:03,320 --> 00:26:05,900
it's a clock versus discrete events and

561
00:26:05,900 --> 00:26:09,409
it's just not important so you know call

562
00:26:09,409 --> 00:26:12,559
us whatever compositional event

563
00:26:12,559 --> 00:26:17,150
programming reactive don't care but what

564
00:26:17,150 --> 00:26:19,039
I want to get to you is is the fact that

565
00:26:19,039 --> 00:26:21,530
we have a very precise way of thinking

566
00:26:21,530 --> 00:26:23,299
about asynchronous programming because

567
00:26:23,299 --> 00:26:26,000
you have zero to infinite values either

568
00:26:26,000 --> 00:26:29,120
by terminated by an honor or uncompleted

569
00:26:29,120 --> 00:26:29,840
and

570
00:26:29,840 --> 00:26:31,760
doesn't have to be obviously you can

571
00:26:31,760 --> 00:26:34,909
continue infinitely you could admit a

572
00:26:34,909 --> 00:26:36,529
couple and have an error you can

573
00:26:36,529 --> 00:26:39,830
complete what you could never do is you

574
00:26:39,830 --> 00:26:41,750
can never have anything overlapping and

575
00:26:41,750 --> 00:26:44,350
you certainly cannot get values after

576
00:26:44,350 --> 00:26:47,929
after it's been done so type-ahead

577
00:26:47,929 --> 00:26:49,250
search is one of the most difficult

578
00:26:49,250 --> 00:26:51,110
things that we've ever done I don't know

579
00:26:51,110 --> 00:26:53,000
why but it just seems that everybody

580
00:26:53,000 --> 00:26:54,770
tries to re-implement it and doesn't do

581
00:26:54,770 --> 00:26:58,520
it very well so I decided to implement

582
00:26:58,520 --> 00:26:59,860
it in jQuery

583
00:26:59,860 --> 00:27:03,500
yeah just jQuery uh you know I had to

584
00:27:03,500 --> 00:27:05,840
add it to bounce I had to add some some

585
00:27:05,840 --> 00:27:08,419
checks I had to add in the xhr and retry

586
00:27:08,419 --> 00:27:16,700
so I wrote more and did less so instead

587
00:27:16,700 --> 00:27:19,070
I go you know I can solve this a little

588
00:27:19,070 --> 00:27:20,600
bit a little bit better what if I could

589
00:27:20,600 --> 00:27:24,140
say take the the Dom in Dom in key ops

590
00:27:24,140 --> 00:27:27,950
the bounce by 500 milliseconds distinct

591
00:27:27,950 --> 00:27:30,289
until changed did a search and bound

592
00:27:30,289 --> 00:27:33,520
directly to the UI done I think I just

593
00:27:33,520 --> 00:27:37,669
eliminated three pages of code now we've

594
00:27:37,669 --> 00:27:39,200
already kind of talked about what the

595
00:27:39,200 --> 00:27:41,059
observable is in terms of that contract

596
00:27:41,059 --> 00:27:43,789
of 0 to infinite values but let's

597
00:27:43,789 --> 00:27:45,740
actually go down to you know and we've

598
00:27:45,740 --> 00:27:47,690
already talked a little bit about map

599
00:27:47,690 --> 00:27:50,270
filter and reduce so let's actually go

600
00:27:50,270 --> 00:27:51,230
into something a little bit more

601
00:27:51,230 --> 00:27:54,740
complicated that a lot of people do with

602
00:27:54,740 --> 00:27:57,980
their web applications so for example if

603
00:27:57,980 --> 00:27:59,330
you're dealing with a phone or you're

604
00:27:59,330 --> 00:28:01,029
dealing with something that's

605
00:28:01,029 --> 00:28:04,940
constrained in terms of how much how

606
00:28:04,940 --> 00:28:09,260
much memory and how much storage you

607
00:28:09,260 --> 00:28:11,330
have you want to be able to only keep on

608
00:28:11,330 --> 00:28:12,649
the screen what's absolutely necessary

609
00:28:12,649 --> 00:28:15,860
on the screen and when when a as soon as

610
00:28:15,860 --> 00:28:18,710
it goes off you want to completely get

611
00:28:18,710 --> 00:28:20,570
rid of it get rid of all its handlers

612
00:28:20,570 --> 00:28:23,179
and leave nothing around how do you do

613
00:28:23,179 --> 00:28:25,789
that well first off you're going to

614
00:28:25,789 --> 00:28:27,770
listen for the document scroll and then

615
00:28:27,770 --> 00:28:29,539
you're going to the bouncer just a

616
00:28:29,539 --> 00:28:31,159
little bit just in case people start to

617
00:28:31,159 --> 00:28:32,419
you know scroll up and scroll down

618
00:28:32,419 --> 00:28:34,429
rapidly and then they're going to

619
00:28:34,429 --> 00:28:37,940
basically determine based upon the road

620
00:28:37,940 --> 00:28:40,630
visibilities determine whether it's

621
00:28:40,630 --> 00:28:41,789
weather

622
00:28:41,789 --> 00:28:45,210
I hidden or not hidden and I'm what

623
00:28:45,210 --> 00:28:46,559
you're gonna do is you're going to take

624
00:28:46,559 --> 00:28:49,649
your rose shows and do an interface do a

625
00:28:49,649 --> 00:28:52,259
poll polling basically and you're going

626
00:28:52,259 --> 00:28:54,570
to get the row data continuously get

627
00:28:54,570 --> 00:28:56,340
that row data continuously get that row

628
00:28:56,340 --> 00:28:58,859
data until it tells you to hide it and

629
00:28:58,859 --> 00:29:00,499
as soon as it tells you to hide it

630
00:29:00,499 --> 00:29:05,249
everything goes away everything so it's

631
00:29:05,249 --> 00:29:07,559
it's really a complicated kind of thing

632
00:29:07,559 --> 00:29:08,909
and people can look at the code

633
00:29:08,909 --> 00:29:11,460
afterwards but I think it's very magical

634
00:29:11,460 --> 00:29:13,529
in the way that they were able to think

635
00:29:13,529 --> 00:29:16,639
about it in very precise terms using

636
00:29:16,639 --> 00:29:18,960
functional programming and reactive

637
00:29:18,960 --> 00:29:21,239
programming together just like our

638
00:29:21,239 --> 00:29:23,909
callback hell example we could actually

639
00:29:23,909 --> 00:29:26,099
go a lot further than we did with with

640
00:29:26,099 --> 00:29:29,249
promises by actually going down here and

641
00:29:29,249 --> 00:29:32,549
authorizing and retry three times if it

642
00:29:32,549 --> 00:29:35,099
fails and then we can also say if the

643
00:29:35,099 --> 00:29:36,960
person who goes oh gosh no oh gosh no

644
00:29:36,960 --> 00:29:39,899
cancel cancel cancel well we can

645
00:29:39,899 --> 00:29:43,139
automatically stop that with the key

646
00:29:43,139 --> 00:29:46,109
with take until so it's a little bit

647
00:29:46,109 --> 00:29:48,779
more than than the burning sensation

648
00:29:48,779 --> 00:29:52,309
that we got from callbacks

649
00:29:52,309 --> 00:29:56,009
now slack for example slack for Windows

650
00:29:56,009 --> 00:29:57,989
uses açaí uses rxjs

651
00:29:57,989 --> 00:30:00,330
and what they use it for is very very

652
00:30:00,330 --> 00:30:02,340
complex kind of interactions like an

653
00:30:02,340 --> 00:30:05,580
editor should like for example if they

654
00:30:05,580 --> 00:30:07,289
want to implement spell check what do

655
00:30:07,289 --> 00:30:09,779
they do I'm not going to explain all of

656
00:30:09,779 --> 00:30:11,669
this in particular but I just want you

657
00:30:11,669 --> 00:30:13,919
to understand that they are actually

658
00:30:13,919 --> 00:30:16,139
determining your language as you type

659
00:30:16,139 --> 00:30:19,349
and being able to do that very very

660
00:30:19,349 --> 00:30:23,279
easily using using this technology and

661
00:30:23,279 --> 00:30:25,139
thinking differently about events now

662
00:30:25,139 --> 00:30:26,849
they are able to think about these

663
00:30:26,849 --> 00:30:29,070
things as objects and pass them around

664
00:30:29,070 --> 00:30:33,059
and as Europe now allows us to think

665
00:30:33,059 --> 00:30:36,269
about is now try catch finally becomes

666
00:30:36,269 --> 00:30:39,450
very easy because I have catch and which

667
00:30:39,450 --> 00:30:41,820
I can I can retry three times I can

668
00:30:41,820 --> 00:30:44,279
catch and return some default data so

669
00:30:44,279 --> 00:30:46,499
for example if I'm creating an offline

670
00:30:46,499 --> 00:30:50,519
first application I can try and get the

671
00:30:50,519 --> 00:30:53,190
data and if I fail for some particular

672
00:30:53,190 --> 00:30:53,779
reason

673
00:30:53,779 --> 00:30:55,460
three tribes and I can just give them

674
00:30:55,460 --> 00:30:57,440
some default data and say here you go

675
00:30:57,440 --> 00:31:01,009
and then finally at the very end I can

676
00:31:01,009 --> 00:31:04,279
do some data cleanup now data back

677
00:31:04,279 --> 00:31:05,989
pressure is also a thing that people

678
00:31:05,989 --> 00:31:08,629
like to talk about and yes observables

679
00:31:08,629 --> 00:31:10,759
can absolutely do that in fact we're

680
00:31:10,759 --> 00:31:13,820
working on on a standard for exactly

681
00:31:13,820 --> 00:31:19,249
that's called objective streams now it's

682
00:31:19,249 --> 00:31:21,919
even more important that you want to win

683
00:31:21,919 --> 00:31:24,109
friends and influence others so

684
00:31:24,109 --> 00:31:25,700
obviously you want to work with the

685
00:31:25,700 --> 00:31:28,479
react angular and ember communities to

686
00:31:28,479 --> 00:31:33,469
do you know see how observables mix with

687
00:31:33,469 --> 00:31:35,509
them and so what you've what we've been

688
00:31:35,509 --> 00:31:37,369
finding in the community is that there

689
00:31:37,369 --> 00:31:39,529
are literally twenty six different

690
00:31:39,529 --> 00:31:42,049
implementations of flux written in

691
00:31:42,049 --> 00:31:46,549
observables and there are about 20 s and

692
00:31:46,549 --> 00:31:49,779
27 or 28 different bindings to react

693
00:31:49,779 --> 00:31:54,429
directly from from from observables now

694
00:31:54,429 --> 00:31:57,109
angular is its own special little beast

695
00:31:57,109 --> 00:32:00,049
and why that is is if you're going to

696
00:32:00,049 --> 00:32:02,349
use an angular 2 at all then

697
00:32:02,349 --> 00:32:04,129
congratulations you're going to be using

698
00:32:04,129 --> 00:32:06,830
observables because the HTTP stack

699
00:32:06,830 --> 00:32:10,309
itself is an observable is going to be

700
00:32:10,309 --> 00:32:15,379
is is rxjs today so they've already add

701
00:32:15,379 --> 00:32:17,450
that in and what people have been

702
00:32:17,450 --> 00:32:20,690
finding is that people want to use those

703
00:32:20,690 --> 00:32:23,359
two things together because it solves a

704
00:32:23,359 --> 00:32:24,679
lot of their problems they have the

705
00:32:24,679 --> 00:32:27,139
retry logic they have attach they have

706
00:32:27,139 --> 00:32:29,269
the finally all the things that promises

707
00:32:29,269 --> 00:32:32,659
could never give them now what's also

708
00:32:32,659 --> 00:32:35,570
very interesting is is not only is it

709
00:32:35,570 --> 00:32:37,759
really interesting for for just doing

710
00:32:37,759 --> 00:32:40,909
the basic kinds of things but I I would

711
00:32:40,909 --> 00:32:43,519
say that's our notion of having this

712
00:32:43,519 --> 00:32:46,190
swappable concurrency layer is also very

713
00:32:46,190 --> 00:32:48,799
interesting so schedulers to me matter

714
00:32:48,799 --> 00:32:50,869
and the fact that what I can do is I can

715
00:32:50,869 --> 00:32:53,960
say where how and when something is

716
00:32:53,960 --> 00:32:56,029
executed so for example I can take an

717
00:32:56,029 --> 00:32:58,609
observable and I can generate using a

718
00:32:58,609 --> 00:33:01,570
default asynchronous scheduler well

719
00:33:01,570 --> 00:33:05,149
that's a problem in the fact that's oh I

720
00:33:05,149 --> 00:33:07,130
just completely

721
00:33:07,130 --> 00:33:09,380
turned my turn my machine into a

722
00:33:09,380 --> 00:33:11,270
helicopter because the fan is just gonna

723
00:33:11,270 --> 00:33:14,900
go off completely off its rocker but

724
00:33:14,900 --> 00:33:18,820
instead if I could do something like

725
00:33:18,820 --> 00:33:21,679
something like the the

726
00:33:21,679 --> 00:33:24,530
requestanimationframe scheduler then it

727
00:33:24,530 --> 00:33:27,350
changes how the picture apparently I

728
00:33:27,350 --> 00:33:30,220
didn't swap out the picture but anyways

729
00:33:30,220 --> 00:33:33,049
the it absolutely does matter because

730
00:33:33,049 --> 00:33:36,140
now you decided to use instead of set

731
00:33:36,140 --> 00:33:38,570
timeout or any other request set

732
00:33:38,570 --> 00:33:40,190
immediate or anything else you've now

733
00:33:40,190 --> 00:33:41,450
decided to move it to a

734
00:33:41,450 --> 00:33:42,710
requestanimationframe

735
00:33:42,710 --> 00:33:45,679
so when I said that Netflix is using it

736
00:33:45,679 --> 00:33:47,750
for for animations that's exactly what

737
00:33:47,750 --> 00:33:49,429
they do is they take a lot of their

738
00:33:49,429 --> 00:33:51,409
asynchronous operations throw it on to

739
00:33:51,409 --> 00:33:53,390
requestanimationframe and all they had

740
00:33:53,390 --> 00:33:55,850
to change was one line of code they

741
00:33:55,850 --> 00:33:57,559
didn't have to go through completely

742
00:33:57,559 --> 00:33:59,120
throughout their their infrastructure to

743
00:33:59,120 --> 00:34:01,730
do that now async/await is very

744
00:34:01,730 --> 00:34:04,789
interesting in that it makes programming

745
00:34:04,789 --> 00:34:08,540
very very easy in a very imperative

746
00:34:08,540 --> 00:34:11,240
style so I can do try-catch and I can

747
00:34:11,240 --> 00:34:14,290
treat it almost as if it were a

748
00:34:14,290 --> 00:34:17,000
synchronous code which is absolutely

749
00:34:17,000 --> 00:34:19,700
beautiful it's it's actually a stage 3

750
00:34:19,700 --> 00:34:23,210
proposal right now for es2016 or ES 7 as

751
00:34:23,210 --> 00:34:25,820
people call it and it actually ships in

752
00:34:25,820 --> 00:34:28,010
the Microsoft edge browser today so if

753
00:34:28,010 --> 00:34:30,649
you have Windows 10 edge and you can

754
00:34:30,649 --> 00:34:32,960
turn on experimental features it's there

755
00:34:32,960 --> 00:34:36,790
today which is kind of cool

756
00:34:36,790 --> 00:34:41,270
now with observables you get also that

757
00:34:41,270 --> 00:34:44,899
same kind of thing is because what we

758
00:34:44,899 --> 00:34:47,899
have added is basic support for a CA

759
00:34:47,899 --> 00:34:50,929
Cinco 8 so I can say when the text

760
00:34:50,929 --> 00:34:53,510
changes I can ace a call an async

761
00:34:53,510 --> 00:34:57,020
function on text and awaits the search

762
00:34:57,020 --> 00:35:01,040
result which happens to be a promise so

763
00:35:01,040 --> 00:35:07,250
that to me is kind of cool and so I

764
00:35:07,250 --> 00:35:09,609
think it has a lot of promise especially

765
00:35:09,609 --> 00:35:13,390
Mogan I just said promise

766
00:35:13,390 --> 00:35:16,520
anyways so instead what we're going

767
00:35:16,520 --> 00:35:19,970
going to see here is that I observed

768
00:35:19,970 --> 00:35:23,180
are in fact coming to es2016 so if you

769
00:35:23,180 --> 00:35:26,119
go there somehow something happened with

770
00:35:26,119 --> 00:35:30,200
my slides but observables in es2016 are

771
00:35:30,200 --> 00:35:33,859
absolutely coming I that hopefully that

772
00:35:33,859 --> 00:35:37,820
they're in stage one right now and and

773
00:35:37,820 --> 00:35:39,320
we're working towards stage two of

774
00:35:39,320 --> 00:35:42,200
adoption but the idea here is that we

775
00:35:42,200 --> 00:35:45,170
will now have complete and utter support

776
00:35:45,170 --> 00:35:47,359
for for observables in your browser

777
00:35:47,359 --> 00:35:49,609
directly so now you'll be able to do a

778
00:35:49,609 --> 00:35:53,890
lot of the things that that for example

779
00:35:53,890 --> 00:35:56,630
that's Netflix and others have been able

780
00:35:56,630 --> 00:36:01,700
to do just by just by using your browser

781
00:36:01,700 --> 00:36:05,930
directly that's kind of cool now let's

782
00:36:05,930 --> 00:36:08,090
talk about the future a little bit so

783
00:36:08,090 --> 00:36:10,010
the future is very very interesting and

784
00:36:10,010 --> 00:36:14,060
the fact that we we have right now at

785
00:36:14,060 --> 00:36:17,330
reactive - extensions rxjs but in the

786
00:36:17,330 --> 00:36:21,230
future we're moving to reactive X and in

787
00:36:21,230 --> 00:36:24,619
fact the the all of the code that's

788
00:36:24,619 --> 00:36:26,570
being done right now is a combination of

789
00:36:26,570 --> 00:36:29,570
Netflix Microsoft and Google all writing

790
00:36:29,570 --> 00:36:32,570
this together it would have who would

791
00:36:32,570 --> 00:36:34,670
have guessed that and five years ago

792
00:36:34,670 --> 00:36:36,770
that someone would say that Microsoft

793
00:36:36,770 --> 00:36:39,440
and Google and Netflix and even Facebook

794
00:36:39,440 --> 00:36:41,630
are writing a library together well it's

795
00:36:41,630 --> 00:36:46,070
true I yesterday during the functional

796
00:36:46,070 --> 00:36:48,530
programming thing there was a comment

797
00:36:48,530 --> 00:36:52,550
about rxjs versus or or CSP versus

798
00:36:52,550 --> 00:36:54,830
observables so I don't necessarily want

799
00:36:54,830 --> 00:37:00,460
to you know dog one or the other but yes

800
00:37:00,460 --> 00:37:02,900
observables can absolutely do everything

801
00:37:02,900 --> 00:37:07,160
that's that that CSP can do so let's go

802
00:37:07,160 --> 00:37:10,339
back and take a history lesson here CSP

803
00:37:10,339 --> 00:37:13,430
was created by Tony Hoare who works for

804
00:37:13,430 --> 00:37:16,940
Microsoft Research no less in 1978 and

805
00:37:16,940 --> 00:37:19,400
he wanted it for production systems or

806
00:37:19,400 --> 00:37:22,280
they were kind of loosely coupled why it

807
00:37:22,280 --> 00:37:23,390
was mentioned in a functional

808
00:37:23,390 --> 00:37:25,400
programming context I don't know because

809
00:37:25,400 --> 00:37:27,200
there's really nothing much functional

810
00:37:27,200 --> 00:37:29,270
about this there's a while loop there's

811
00:37:29,270 --> 00:37:30,830
a global channel

812
00:37:30,830 --> 00:37:33,470
there's mutation all over the place it's

813
00:37:33,470 --> 00:37:36,430
not really functional

814
00:37:36,440 --> 00:37:38,960
so the imperative cat is not amused

815
00:37:38,960 --> 00:37:42,440
because like I said there it's it's a

816
00:37:42,440 --> 00:37:44,180
different definition of simple to me I

817
00:37:44,180 --> 00:37:47,480
don't find this whole thing of a wild

818
00:37:47,480 --> 00:37:50,180
shrew loop to be involved that simple

819
00:37:50,180 --> 00:37:53,330
and in fact when I think about the

820
00:37:53,330 --> 00:37:55,190
composition I think of that as a lot

821
00:37:55,190 --> 00:37:57,500
more simple quite honestly so maybe it's

822
00:37:57,500 --> 00:38:00,290
it's a personal thing but why

823
00:38:00,290 --> 00:38:03,980
observables why not CSP well for example

824
00:38:03,980 --> 00:38:06,680
I have determinants to clean up so for

825
00:38:06,680 --> 00:38:08,990
example if I create an observable here I

826
00:38:08,990 --> 00:38:11,089
not only get the on behavior which I'm

827
00:38:11,089 --> 00:38:14,060
sending the next values but also when I

828
00:38:14,060 --> 00:38:16,940
return an object I give it this handle

829
00:38:16,940 --> 00:38:19,490
and which I can tell you to stop and

830
00:38:19,490 --> 00:38:21,530
which and when I tell you to stop it

831
00:38:21,530 --> 00:38:24,020
removes that event handler and so when I

832
00:38:24,020 --> 00:38:26,450
call and when I start listening here and

833
00:38:26,450 --> 00:38:29,000
then when I call unsubscribe the handler

834
00:38:29,000 --> 00:38:32,390
goes bye-bye in CSP that doesn't work

835
00:38:32,390 --> 00:38:37,550
that way also in CSP you have a notion

836
00:38:37,550 --> 00:38:39,740
of there's no consistent air handling at

837
00:38:39,740 --> 00:38:42,830
all so instead you have to throw it off

838
00:38:42,830 --> 00:38:45,290
to an air channel and hopefully you can

839
00:38:45,290 --> 00:38:47,930
listen to it but instead here we have an

840
00:38:47,930 --> 00:38:49,670
air channel that's built directly into

841
00:38:49,670 --> 00:38:53,150
the pipeline itself so it's very easy to

842
00:38:53,150 --> 00:38:55,310
think about it when we can listen to it

843
00:38:55,310 --> 00:38:57,800
on our air handler here and we can also

844
00:38:57,800 --> 00:39:02,330
try & retry here and catch directly into

845
00:39:02,330 --> 00:39:08,900
an end so there so with that I don't

846
00:39:08,900 --> 00:39:11,839
know do I have sound here apparently I

847
00:39:11,839 --> 00:39:12,260
don't

848
00:39:12,260 --> 00:39:16,220
oh well anyways so if I can leave you

849
00:39:16,220 --> 00:39:20,540
with anything today I want to say push

850
00:39:20,540 --> 00:39:23,089
you know think about push collections

851
00:39:23,089 --> 00:39:25,070
think about events very very differently

852
00:39:25,070 --> 00:39:29,510
I am so with that I'll be glad to take

853
00:39:29,510 --> 00:39:36,690
any questions Thank You Matthew

854
00:39:36,700 --> 00:39:40,220
could you explain a bit about the

855
00:39:40,220 --> 00:39:42,170
difference between arks extensions and

856
00:39:42,170 --> 00:39:43,910
other libraries out there like vacant

857
00:39:43,910 --> 00:39:47,780
Jas other laying with that deal with

858
00:39:47,780 --> 00:39:51,800
reactive programming okay so yeah the

859
00:39:51,800 --> 00:39:53,869
question was how does this differ from

860
00:39:53,869 --> 00:39:57,560
any other library that does asynchrony

861
00:39:57,560 --> 00:40:00,080
that does reactive programming well

862
00:40:00,080 --> 00:40:02,240
certainly rxjs was the first one out

863
00:40:02,240 --> 00:40:05,260
there since we've been out since 2009

864
00:40:05,260 --> 00:40:07,820
there are slight differences when when

865
00:40:07,820 --> 00:40:09,619
you talk about bacon and so forth none

866
00:40:09,619 --> 00:40:13,609
of them have the for example the the

867
00:40:13,609 --> 00:40:16,520
virtualization or notion of a virtual

868
00:40:16,520 --> 00:40:18,290
time where you can just swap out the the

869
00:40:18,290 --> 00:40:20,210
scheduler they don't do a lot of that

870
00:40:20,210 --> 00:40:22,040
instead they tried to focus on

871
00:40:22,040 --> 00:40:25,070
simplicity in terms of really you know 0

872
00:40:25,070 --> 00:40:27,980
to 60 really really quickly instead of a

873
00:40:27,980 --> 00:40:30,500
more comprehensive approach which we

874
00:40:30,500 --> 00:40:32,359
took and there are a few fundamental

875
00:40:32,359 --> 00:40:35,320
differences on how we we thought about

876
00:40:35,320 --> 00:40:37,340
thought about hot versus cold

877
00:40:37,340 --> 00:40:39,380
observables it's a long discussion you

878
00:40:39,380 --> 00:40:41,180
can come and talk to me afterwards but

879
00:40:41,180 --> 00:40:42,260
there are folks you know some

880
00:40:42,260 --> 00:40:44,780
fundamental differences on on how we

881
00:40:44,780 --> 00:40:48,920
tackle those problems but that's mostly

882
00:40:48,920 --> 00:40:50,660
for the most part and we're we're fairly

883
00:40:50,660 --> 00:40:53,119
friendly with one another in terms of

884
00:40:53,119 --> 00:40:54,650
you know we're always you know trying to

885
00:40:54,650 --> 00:40:56,930
one-up another in terms of speed in

886
00:40:56,930 --> 00:41:01,010
terms of features and so forth I have

887
00:41:01,010 --> 00:41:03,560
heard a lot of people complain about a

888
00:41:03,560 --> 00:41:05,570
document of our says it's too

889
00:41:05,570 --> 00:41:08,300
competitive especially for a beginner so

890
00:41:08,300 --> 00:41:13,369
do you have any plan to fix in terms of

891
00:41:13,369 --> 00:41:16,460
begin of stuff for beginners well we

892
00:41:16,460 --> 00:41:18,560
have a lot of exercise so if you go to

893
00:41:18,560 --> 00:41:23,960
reactive xio which is our homepage and

894
00:41:23,960 --> 00:41:26,990
let's see if is it still up directly on

895
00:41:26,990 --> 00:41:29,810
me so anyways if you can go to reactive

896
00:41:29,810 --> 00:41:34,730
xio and take a look there we have a ton

897
00:41:34,730 --> 00:41:36,530
of material in terms of our introduction

898
00:41:36,530 --> 00:41:39,650
material and so forth in terms of why

899
00:41:39,650 --> 00:41:42,740
why to use them but also there are lots

900
00:41:42,740 --> 00:41:44,420
of other in

901
00:41:44,420 --> 00:41:49,270
things such as reactive x io learn RX

902
00:41:49,270 --> 00:41:52,040
there are interactive exercises there

903
00:41:52,040 --> 00:41:55,340
that you can that you can learn if you

904
00:41:55,340 --> 00:42:01,900
go to egghead radio did egghead io and

905
00:42:01,900 --> 00:42:04,900
technologies rx there are a ton of

906
00:42:04,900 --> 00:42:08,000
material there as well so in terms of

907
00:42:08,000 --> 00:42:10,070
approachability the Internet is

908
00:42:10,070 --> 00:42:16,070
fantastic here by the way sorry but if

909
00:42:16,070 --> 00:42:18,620
you go to these particular sites egghead

910
00:42:18,620 --> 00:42:20,900
radio has a lot of stuff that that is

911
00:42:20,900 --> 00:42:24,550
particularly about new people coming to

912
00:42:24,550 --> 00:42:29,420
2rx from from nothing at all explaining

913
00:42:29,420 --> 00:42:31,370
the very very basics here I wanted to

914
00:42:31,370 --> 00:42:33,800
get through the fact yes I could have

915
00:42:33,800 --> 00:42:36,950
done a very introduction talk but but

916
00:42:36,950 --> 00:42:38,510
it's more along the lines of showing the

917
00:42:38,510 --> 00:42:40,700
real power of why people are using it

918
00:42:40,700 --> 00:42:44,360
versus the oh you can you can do you

