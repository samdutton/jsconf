1
00:00:13,919 --> 00:00:16,689

it was really exciting this is not only

2
00:00:16,689 --> 00:00:18,699
my first time speaking it's my first

3
00:00:18,699 --> 00:00:20,980
conference ever so I don't think I've

4
00:00:20,980 --> 00:00:28,179
been in front of a larger the largest

5
00:00:28,179 --> 00:00:29,560
group I've been in front of his like

6
00:00:29,560 --> 00:00:32,640
stand up for the last ten years so

7
00:00:32,640 --> 00:00:36,220
anyway my name is Peter pacar chick I'm

8
00:00:36,220 --> 00:00:39,070
a UI engineer at trunk club if I could

9
00:00:39,070 --> 00:00:40,870
go to the next slide I would oh there we

10
00:00:40,870 --> 00:00:42,940
go okay the UI engineer at trunk club

11
00:00:42,940 --> 00:00:45,039
and he haven't heard of us we can

12
00:00:45,039 --> 00:00:46,719
actually was stylist they'll talk to you

13
00:00:46,719 --> 00:00:48,039
about what you're looking for and what

14
00:00:48,039 --> 00:00:51,160
your kind of look is and then we'll send

15
00:00:51,160 --> 00:00:52,780
you a whole trunk full of clothing you

16
00:00:52,780 --> 00:00:54,940
keep what you like and you return what

17
00:00:54,940 --> 00:00:56,859
you don't like no subscription fees easy

18
00:00:56,859 --> 00:00:59,769
as that cool part is we build all our

19
00:00:59,769 --> 00:01:01,090
internal tools from the ground up

20
00:01:01,090 --> 00:01:03,010
everything from our catalogue the

21
00:01:03,010 --> 00:01:04,750
warehouse to all of our internal tools

22
00:01:04,750 --> 00:01:06,729
it's great and it's cool working with

23
00:01:06,729 --> 00:01:10,390
physical products too so we're located

24
00:01:10,390 --> 00:01:11,530
in chicago and if you're ever around

25
00:01:11,530 --> 00:01:13,690
feel free to stop by we're very nice

26
00:01:13,690 --> 00:01:17,200
people all right getting started so how

27
00:01:17,200 --> 00:01:18,940
many people here use or have used

28
00:01:18,940 --> 00:01:22,750
backbone in production oh great nice now

29
00:01:22,750 --> 00:01:24,399
how many of you have wanted to use react

30
00:01:24,399 --> 00:01:26,229
for one reason or another but haven't

31
00:01:26,229 --> 00:01:28,270
had the time or resources to get started

32
00:01:28,270 --> 00:01:31,690
there's always a p.m. or someone family

33
00:01:31,690 --> 00:01:34,270
member that like no you can't work after

34
00:01:34,270 --> 00:01:37,840
work yeah okay go home right there's

35
00:01:37,840 --> 00:01:39,220
always something that comes up that

36
00:01:39,220 --> 00:01:40,989
stops us from doing that and we can't

37
00:01:40,989 --> 00:01:43,929
just like flip things over one day write

38
00:01:43,929 --> 00:01:46,239
those things just don't happen a lot of

39
00:01:46,239 --> 00:01:48,190
what you see here will be coffee script

40
00:01:48,190 --> 00:01:50,140
or sort of pseudo CoffeeScript because

41
00:01:50,140 --> 00:01:52,030
that's what we've been using but

42
00:01:52,030 --> 00:01:54,489
otherwise i'd recommend Babel which

43
00:01:54,489 --> 00:01:56,709
comes with es6 and j sx right out of the

44
00:01:56,709 --> 00:01:59,920
box it's freaking fantastic so let's

45
00:01:59,920 --> 00:02:02,410
start with trunk club past and present

46
00:02:02,410 --> 00:02:04,690
we have the stack called brunch with

47
00:02:04,690 --> 00:02:06,940
panache a modular approach to building

48
00:02:06,940 --> 00:02:10,060
web apps with brunch this was created by

49
00:02:10,060 --> 00:02:11,739
someone at your own club named josh

50
00:02:11,739 --> 00:02:15,930
named josh abdus and it's been fantastic

51
00:02:15,930 --> 00:02:19,239
more or less its backbone Chaplin jquery

52
00:02:19,239 --> 00:02:21,370
brunch and coffee script for those of

53
00:02:21,370 --> 00:02:23,230
you that haven't heard of chaplain or

54
00:02:23,230 --> 00:02:25,870
brunch it's very similar to

55
00:02:25,870 --> 00:02:28,650
marionette it offers controllers

56
00:02:28,650 --> 00:02:31,569
automatic memory management rails like

57
00:02:31,569 --> 00:02:34,360
routes and custom routers common JSN AMD

58
00:02:34,360 --> 00:02:36,159
support all those cool things that we've

59
00:02:36,159 --> 00:02:39,069
always wanted as front-end developers it

60
00:02:39,069 --> 00:02:40,330
was like the dream framework for the

61
00:02:40,330 --> 00:02:43,420
longest time brunch is more or less

62
00:02:43,420 --> 00:02:45,849
similar to gulp inria our gulp and grunt

63
00:02:45,849 --> 00:02:48,280
it's a build tool it takes care of all

64
00:02:48,280 --> 00:02:50,440
the minification and the stuff that we

65
00:02:50,440 --> 00:02:51,970
don't really worry about anymore that

66
00:02:51,970 --> 00:02:54,970
used to be a big deal right chaplain

67
00:02:54,970 --> 00:02:56,650
also comes with a mediator which is our

68
00:02:56,650 --> 00:02:59,680
pub sub communication between apps so

69
00:02:59,680 --> 00:03:01,599
it's great for like moving member data

70
00:03:01,599 --> 00:03:04,180
around for example we like to automate

71
00:03:04,180 --> 00:03:05,859
all of our process redundancies the

72
00:03:05,859 --> 00:03:08,890
philosophy is onion apps peel back the

73
00:03:08,890 --> 00:03:11,019
layers as you need to let's avoid

74
00:03:11,019 --> 00:03:13,510
complexity let's fatter let's follow

75
00:03:13,510 --> 00:03:16,840
patterns and scale and it's what led us

76
00:03:16,840 --> 00:03:21,030
build great apps really really quickly

77
00:03:21,030 --> 00:03:24,790
so here we go humble SOA trunk club

78
00:03:24,790 --> 00:03:26,560
beginnings we had a service-oriented

79
00:03:26,560 --> 00:03:29,280
architecture and two of these bwp apps

80
00:03:29,280 --> 00:03:33,609
simple API calls only a few services not

81
00:03:33,609 --> 00:03:36,130
much to go wrong it was fun those were

82
00:03:36,130 --> 00:03:38,739
great days but as you can imagine things

83
00:03:38,739 --> 00:03:41,680
change very very quickly the company

84
00:03:41,680 --> 00:03:43,389
starts growing so did the business

85
00:03:43,389 --> 00:03:45,549
requirements and we kept building and

86
00:03:45,549 --> 00:03:48,280
building and building we had more single

87
00:03:48,280 --> 00:03:50,980
page apps we had more api's and we had

88
00:03:50,980 --> 00:03:54,629
more dependencies we were making API

89
00:03:54,629 --> 00:03:57,459
excuse me we're making API calls to

90
00:03:57,459 --> 00:03:59,260
numerous services and stuff started

91
00:03:59,260 --> 00:04:01,329
getting hectic we want to improve that

92
00:04:01,329 --> 00:04:04,049
member experience we built wardrobes

93
00:04:04,049 --> 00:04:06,069
recommendations a whole freakin

94
00:04:06,069 --> 00:04:08,019
warehouse that all work together in one

95
00:04:08,019 --> 00:04:10,209
way shape or form the technology behind

96
00:04:10,209 --> 00:04:13,540
it is great and it worked great for a

97
00:04:13,540 --> 00:04:15,910
long time until it stopped working that

98
00:04:15,910 --> 00:04:18,820
great and that's when that's when we had

99
00:04:18,820 --> 00:04:21,010
some issues we need to take care of we

100
00:04:21,010 --> 00:04:23,410
have a fantastic group of engineers but

101
00:04:23,410 --> 00:04:26,050
as a uit we wanted to try to solve those

102
00:04:26,050 --> 00:04:28,690
issues on our own so what was happening

103
00:04:28,690 --> 00:04:30,760
we were making numerous API calls and

104
00:04:30,760 --> 00:04:33,539
doing a lot of hydration client-side and

105
00:04:33,539 --> 00:04:37,780
it worked but the thing is we were doing

106
00:04:37,780 --> 00:04:39,620
a lot of useless rerun during we

107
00:04:39,620 --> 00:04:42,050
increased load times and we had like the

108
00:04:42,050 --> 00:04:44,210
craziest flame chart spikes like we

109
00:04:44,210 --> 00:04:45,830
needed to fix that as engineers we

110
00:04:45,830 --> 00:04:48,470
didn't like that stuff and then from the

111
00:04:48,470 --> 00:04:50,270
business side to our users were

112
00:04:50,270 --> 00:04:52,820
complaining or stylists same with our

113
00:04:52,820 --> 00:04:55,130
leadership and we were dedicating a lot

114
00:04:55,130 --> 00:04:58,330
of time for render ordered debugging and

115
00:04:58,330 --> 00:05:00,440
optimizations and it was great it was

116
00:05:00,440 --> 00:05:02,630
fun but we wanted to spend less time

117
00:05:02,630 --> 00:05:04,850
debugging and more time building cool

118
00:05:04,850 --> 00:05:07,760
software like we all do patches weren't

119
00:05:07,760 --> 00:05:10,040
really doing the trick anymore so what

120
00:05:10,040 --> 00:05:14,949
could we do react to the rescue

121
00:05:14,949 --> 00:05:17,380
replacing backbone views with react

122
00:05:17,380 --> 00:05:21,080
instant gratification I'm sure most of

123
00:05:21,080 --> 00:05:24,110
you know what react is by now but just

124
00:05:24,110 --> 00:05:26,900
as a quick recap reusable encapsulated

125
00:05:26,900 --> 00:05:29,630
components it's got a fantastic dipping

126
00:05:29,630 --> 00:05:31,550
algorithm that rear enders only what it

127
00:05:31,550 --> 00:05:33,979
needs to rerender which it which is what

128
00:05:33,979 --> 00:05:36,350
makes it so fast we love the deck load

129
00:05:36,350 --> 00:05:38,150
of style that makes it easy to focus on

130
00:05:38,150 --> 00:05:41,000
the app itself rather than coming up

131
00:05:41,000 --> 00:05:42,500
with like nitty-gritty solutions to

132
00:05:42,500 --> 00:05:44,960
making things work we just say hey react

133
00:05:44,960 --> 00:05:46,910
we're going to give you some data render

134
00:05:46,910 --> 00:05:48,740
it you know we're not going to tell it

135
00:05:48,740 --> 00:05:51,229
how to do it and there was less mental

136
00:05:51,229 --> 00:05:53,810
overhead with bringing in templates and

137
00:05:53,810 --> 00:05:56,630
views together I know I know it's hard

138
00:05:56,630 --> 00:05:58,010
thinking about putting those two things

139
00:05:58,010 --> 00:06:00,740
together but trust me the world is great

140
00:06:00,740 --> 00:06:02,570
after a couple of components you guys

141
00:06:02,570 --> 00:06:05,750
will never go back and most importantly

142
00:06:05,750 --> 00:06:08,000
for the first time ever our backends

143
00:06:08,000 --> 00:06:09,560
were much more comfortable with working

144
00:06:09,560 --> 00:06:12,740
with our code video BP was fantastic

145
00:06:12,740 --> 00:06:14,690
from a UI perspective it did everything

146
00:06:14,690 --> 00:06:17,780
we wanted it to do but our backends

147
00:06:17,780 --> 00:06:20,090
didn't want to work with this or that

148
00:06:20,090 --> 00:06:21,860
and it's not because they didn't want to

149
00:06:21,860 --> 00:06:23,570
it's because it did get confusing you've

150
00:06:23,570 --> 00:06:25,880
had to invest a lot of time up front to

151
00:06:25,880 --> 00:06:27,470
understand how the framework works for

152
00:06:27,470 --> 00:06:30,650
it to be effective right with react we

153
00:06:30,650 --> 00:06:32,479
were able to move a lot of that stuff

154
00:06:32,479 --> 00:06:34,669
over to the back ends and let them work

155
00:06:34,669 --> 00:06:36,680
on their apps as well without really

156
00:06:36,680 --> 00:06:39,080
interfering with the UI with the UI team

157
00:06:39,080 --> 00:06:40,820
so we're like more the experts they

158
00:06:40,820 --> 00:06:41,840
would come to if they need help

159
00:06:41,840 --> 00:06:43,940
otherwise they're building great stuff

160
00:06:43,940 --> 00:06:46,400
on their own too we started with a

161
00:06:46,400 --> 00:06:48,440
simple drop down and now we're up to

162
00:06:48,440 --> 00:06:50,780
about 80 components in each of our apps

163
00:06:50,780 --> 00:06:52,760
and everything keeps growing our

164
00:06:52,760 --> 00:06:53,960
components aren't

165
00:06:53,960 --> 00:06:56,509
sarily huge but for the ones that are

166
00:06:56,509 --> 00:06:59,000
and have a ton of internal state react

167
00:06:59,000 --> 00:07:00,979
makes it much easier to manage and

168
00:07:00,979 --> 00:07:05,180
that's just like less headaches so here

169
00:07:05,180 --> 00:07:06,470
we are I don't know how well you can see

170
00:07:06,470 --> 00:07:09,380
that but this is everything this is the

171
00:07:09,380 --> 00:07:11,240
view in the template combined it might

172
00:07:11,240 --> 00:07:12,800
look a little crazy but you have to

173
00:07:12,800 --> 00:07:16,340
remember it's not HTML it's jsx which is

174
00:07:16,340 --> 00:07:19,310
JavaScript and everything just made

175
00:07:19,310 --> 00:07:22,220
sense so in this case I might be getting

176
00:07:22,220 --> 00:07:23,900
ahead of myself here with props but

177
00:07:23,900 --> 00:07:25,370
you've got a header then you've got a

178
00:07:25,370 --> 00:07:27,530
logo and then things just trickle down

179
00:07:27,530 --> 00:07:30,770
accordingly our code became much more

180
00:07:30,770 --> 00:07:32,810
manageable that's a lot easier to

181
00:07:32,810 --> 00:07:34,970
understand then Oh open up this view

182
00:07:34,970 --> 00:07:37,039
that corresponds to this template but

183
00:07:37,039 --> 00:07:39,410
then there's this like oh you know now

184
00:07:39,410 --> 00:07:41,000
we use this like external method that

185
00:07:41,000 --> 00:07:42,650
you need to download to know more

186
00:07:42,650 --> 00:07:44,539
mind-boggling things everything's right

187
00:07:44,539 --> 00:07:46,820
here in front of you and simple easy to

188
00:07:46,820 --> 00:07:50,030
use files our backends our designers

189
00:07:50,030 --> 00:07:55,190
everyone was a huge fan so speaking of

190
00:07:55,190 --> 00:07:58,759
design it helped with CSS to it made

191
00:07:58,759 --> 00:08:01,550
much more sense so what we started doing

192
00:08:01,550 --> 00:08:03,470
is we started modeling our CSS classes

193
00:08:03,470 --> 00:08:06,560
after our reactive components it's much

194
00:08:06,560 --> 00:08:08,389
easier to traverse CSS and make changes

195
00:08:08,389 --> 00:08:11,000
and designers are more comfortable

196
00:08:11,000 --> 00:08:13,909
making those changes to there was a time

197
00:08:13,909 --> 00:08:16,219
where you'd have you know thousands of

198
00:08:16,219 --> 00:08:19,330
lines for a couple of simple things but

199
00:08:19,330 --> 00:08:21,680
did it really make sense was it

200
00:08:21,680 --> 00:08:24,440
effective was it maintainable those were

201
00:08:24,440 --> 00:08:26,830
questions that we asked ourselves a new

202
00:08:26,830 --> 00:08:30,380
head we knew the answers to we needed to

203
00:08:30,380 --> 00:08:32,300
make a change so now we have a

204
00:08:32,300 --> 00:08:34,190
one-to-one relationship between a react

205
00:08:34,190 --> 00:08:36,620
component and CSS and it's helped all of

206
00:08:36,620 --> 00:08:38,839
our apps grow it just makes sense it's

207
00:08:38,839 --> 00:08:41,450
as easy as going into sublime searching

208
00:08:41,450 --> 00:08:43,669
for a class letting that designer change

209
00:08:43,669 --> 00:08:45,680
that information and then if they need

210
00:08:45,680 --> 00:08:47,450
to find it in the react component they

211
00:08:47,450 --> 00:08:49,160
can easily open up that file and make

212
00:08:49,160 --> 00:08:50,930
the change themselves without relying on

213
00:08:50,930 --> 00:08:52,820
another you I resource to make it happen

214
00:08:52,820 --> 00:08:55,339
our design and code became much more

215
00:08:55,339 --> 00:08:58,820
manageable the best part about all of

216
00:08:58,820 --> 00:09:02,000
this is there's no magic involved it's

217
00:09:02,000 --> 00:09:05,300
just good JavaScript right I'm guilty of

218
00:09:05,300 --> 00:09:07,640
saying this but I had to look up call by

219
00:09:07,640 --> 00:09:09,170
and apply because when's the last time

220
00:09:09,170 --> 00:09:10,850
you had to use that in like a framework

221
00:09:10,850 --> 00:09:13,340
like backbone I haven't had a user for a

222
00:09:13,340 --> 00:09:16,430
while all those frameworks abstracted

223
00:09:16,430 --> 00:09:19,070
all those awesome layers of JavaScript

224
00:09:19,070 --> 00:09:21,140
lets you build cool things but then you

225
00:09:21,140 --> 00:09:22,670
forget about the most important stuff

226
00:09:22,670 --> 00:09:25,760
right so react kind of reintroduces you

227
00:09:25,760 --> 00:09:27,500
to those concepts and lets you build

228
00:09:27,500 --> 00:09:30,140
cool stuff and sort of foreshadowing

229
00:09:30,140 --> 00:09:33,500
here handle click bind if you haven't

230
00:09:33,500 --> 00:09:36,410
used react yet you're going to like this

231
00:09:36,410 --> 00:09:38,000
this will help you a lot remember the

232
00:09:38,000 --> 00:09:39,890
slide because I did run into a couple

233
00:09:39,890 --> 00:09:41,960
issues with this in the past but now

234
00:09:41,960 --> 00:09:45,710
it's awesome anyway we came up with the

235
00:09:45,710 --> 00:09:47,660
whole migration process because like I

236
00:09:47,660 --> 00:09:49,640
said we can't just flip the switch turn

237
00:09:49,640 --> 00:09:52,700
stuff on and let our users see all this

238
00:09:52,700 --> 00:09:54,890
broken code right so we started with

239
00:09:54,890 --> 00:09:56,990
small components things that don't

240
00:09:56,990 --> 00:09:59,150
really have a lot of data things that we

241
00:09:59,150 --> 00:10:00,740
just wanted to try out and see how they

242
00:10:00,740 --> 00:10:04,880
worked random pages we use the mixin if

243
00:10:04,880 --> 00:10:06,980
you haven't used react a mixin is sort

244
00:10:06,980 --> 00:10:08,990
of like a plug-in its reacts answer to

245
00:10:08,990 --> 00:10:10,700
sharing code between multiple components

246
00:10:10,700 --> 00:10:13,340
I know the components are reusable but

247
00:10:13,340 --> 00:10:14,390
there are times where you don't really

248
00:10:14,390 --> 00:10:16,810
need a component to make stuff happen

249
00:10:16,810 --> 00:10:19,220
form validation for example you could

250
00:10:19,220 --> 00:10:20,840
have a simple mix in with the regex

251
00:10:20,840 --> 00:10:23,540
involved and apply classes accordingly

252
00:10:23,540 --> 00:10:27,410
or apply state accordingly we use

253
00:10:27,410 --> 00:10:29,090
something called the ria backbone react

254
00:10:29,090 --> 00:10:31,340
component which i'll talk to talk to you

255
00:10:31,340 --> 00:10:33,140
about more in a second and that glues

256
00:10:33,140 --> 00:10:34,820
backbone models and collections and to

257
00:10:34,820 --> 00:10:36,950
react components once it mount once it's

258
00:10:36,950 --> 00:10:39,020
mounted a rapper will listen to those

259
00:10:39,020 --> 00:10:40,640
changes and automatically set your

260
00:10:40,640 --> 00:10:43,570
component state for you freaking awesome

261
00:10:43,570 --> 00:10:46,340
lastly we wanted to get familiar with

262
00:10:46,340 --> 00:10:48,470
the API there are things like initialize

263
00:10:48,470 --> 00:10:50,510
and remove and backbone we wanted to see

264
00:10:50,510 --> 00:10:53,120
if we can match to in react just to kind

265
00:10:53,120 --> 00:10:54,440
of get a feeling for it and really

266
00:10:54,440 --> 00:10:56,330
understand we had component did mount

267
00:10:56,330 --> 00:10:58,640
component will unmount unmount component

268
00:10:58,640 --> 00:11:00,500
at node those are all great things that

269
00:11:00,500 --> 00:11:03,580
will help you kind of transition over

270
00:11:03,580 --> 00:11:06,350
and most importantly convert your parent

271
00:11:06,350 --> 00:11:08,270
view to use react I'll create element

272
00:11:08,270 --> 00:11:10,340
instead so you're rendering all these

273
00:11:10,340 --> 00:11:12,920
views out in backbone and you need some

274
00:11:12,920 --> 00:11:15,470
sort of a tie some sort of adapter to

275
00:11:15,470 --> 00:11:17,360
make those changes happen for you and

276
00:11:17,360 --> 00:11:20,000
react and that's when we came up with

277
00:11:20,000 --> 00:11:21,320
the react backbone adapter

278
00:11:21,320 --> 00:11:23,270
this was actually made by Jason block

279
00:11:23,270 --> 00:11:25,360
who's actually in the crowd hey Jay said

280
00:11:25,360 --> 00:11:29,450
it's a very simple it's a very simple

281
00:11:29,450 --> 00:11:33,230
set of utilities that helps us attach

282
00:11:33,230 --> 00:11:36,560
that component to the backbone view so

283
00:11:36,560 --> 00:11:39,860
we pass in an element you pass in a

284
00:11:39,860 --> 00:11:42,050
container and then finally an optional

285
00:11:42,050 --> 00:11:44,540
call back you don't necessarily need the

286
00:11:44,540 --> 00:11:49,340
call back but it's there just in case so

287
00:11:49,340 --> 00:11:52,990
here we are we create identify attach

288
00:11:52,990 --> 00:11:56,690
render and then finally disposed so we

289
00:11:56,690 --> 00:11:58,970
create whatever element you'd like we

290
00:11:58,970 --> 00:12:01,550
had a react reclast to identify within

291
00:12:01,550 --> 00:12:03,980
the Dom it's more of a sanity check for

292
00:12:03,980 --> 00:12:06,230
us we apply classes to all of our

293
00:12:06,230 --> 00:12:08,420
backbone views it was sort of a good

294
00:12:08,420 --> 00:12:10,010
habit to bring that over when we were

295
00:12:10,010 --> 00:12:12,170
debugging we know right away oh that

296
00:12:12,170 --> 00:12:14,270
must be coming from react let's check

297
00:12:14,270 --> 00:12:16,910
the react folder had a time and so we

298
00:12:16,910 --> 00:12:19,130
don't run into any weird issues we then

299
00:12:19,130 --> 00:12:21,950
append that element to the backbone view

300
00:12:21,950 --> 00:12:24,410
and then let react go from there just

301
00:12:24,410 --> 00:12:26,450
render everything call the callback if

302
00:12:26,450 --> 00:12:29,450
you pass one otherwise react do your

303
00:12:29,450 --> 00:12:31,970
thing you're great added finally

304
00:12:31,970 --> 00:12:35,270
disposed so not only do we unmount the

305
00:12:35,270 --> 00:12:38,180
react component remove from the Dom you

306
00:12:38,180 --> 00:12:40,310
can't forget about the container one

307
00:12:40,310 --> 00:12:41,840
with three actually let's remove that as

308
00:12:41,840 --> 00:12:43,760
well it just makes it easier you don't

309
00:12:43,760 --> 00:12:48,050
want that stuff lingering around so like

310
00:12:48,050 --> 00:12:52,250
I said the use chaplain and it delivers

311
00:12:52,250 --> 00:12:54,530
and it gives us controller so here we

312
00:12:54,530 --> 00:12:56,840
are we do a lot of stuff with member

313
00:12:56,840 --> 00:12:58,820
conversion and onboarding it's a huge

314
00:12:58,820 --> 00:13:00,650
part of my team out on the member facing

315
00:13:00,650 --> 00:13:02,840
team and we want to convert as many

316
00:13:02,840 --> 00:13:06,020
users as possible right in this case

317
00:13:06,020 --> 00:13:07,430
here we are we've got a sign-up header

318
00:13:07,430 --> 00:13:10,310
just a simple logo that stretches across

319
00:13:10,310 --> 00:13:13,070
the top of your screen how can we get

320
00:13:13,070 --> 00:13:15,800
that into the browser in a nice way

321
00:13:15,800 --> 00:13:18,560
without freaking out too much so here we

322
00:13:18,560 --> 00:13:21,550
go we use common J house we require that

323
00:13:21,550 --> 00:13:24,170
module and then we create an element

324
00:13:24,170 --> 00:13:25,700
with it sign up header as you can see

325
00:13:25,700 --> 00:13:28,010
here there's one thing here that may

326
00:13:28,010 --> 00:13:30,020
look a little weird and that's the reuse

327
00:13:30,020 --> 00:13:32,210
it's it's a chaplain composition

328
00:13:32,210 --> 00:13:34,760
function what that lets us do is

329
00:13:34,760 --> 00:13:36,470
it grants us the ability to reuse data

330
00:13:36,470 --> 00:13:38,690
and views beyond one controller action

331
00:13:38,690 --> 00:13:40,760
it's a nice performance perk that we get

332
00:13:40,760 --> 00:13:43,310
right out of the box so then like I said

333
00:13:43,310 --> 00:13:45,890
element container and call back we've

334
00:13:45,890 --> 00:13:48,200
got a sign-up header we've got a simple

335
00:13:48,200 --> 00:13:51,530
utility function to get whatever that

336
00:13:51,530 --> 00:13:53,090
header funk or whatever that wherever

337
00:13:53,090 --> 00:13:55,190
that header lies we kind of query it

338
00:13:55,190 --> 00:13:57,170
it's it's basically query selector

339
00:13:57,170 --> 00:13:59,660
behind the scenes and then the call back

340
00:13:59,660 --> 00:14:03,230
if you need it react gives you component

341
00:14:03,230 --> 00:14:05,380
did mount if you need some sort of

342
00:14:05,380 --> 00:14:07,430
utility method and you want to talk to

343
00:14:07,430 --> 00:14:08,960
something but if you're looking for more

344
00:14:08,960 --> 00:14:10,910
control via backbone that's what the

345
00:14:10,910 --> 00:14:13,370
callback is therefore I don't want to

346
00:14:13,370 --> 00:14:15,370
get too far ahead of myself but as

347
00:14:15,370 --> 00:14:17,360
engineers we always want to move forward

348
00:14:17,360 --> 00:14:19,760
and so we started coming up with a react

349
00:14:19,760 --> 00:14:22,610
backbone wrapper what it does is it

350
00:14:22,610 --> 00:14:25,310
takes the adapt to the next level with

351
00:14:25,310 --> 00:14:27,290
the adapter we're still using backbone

352
00:14:27,290 --> 00:14:29,780
views we wanted to get rid of that

353
00:14:29,780 --> 00:14:33,140
completely so the react backbone wrapper

354
00:14:33,140 --> 00:14:36,530
makes an appt root level react

355
00:14:36,530 --> 00:14:38,720
components and that completely releases

356
00:14:38,720 --> 00:14:40,970
chaplain and all of the features that

357
00:14:40,970 --> 00:14:42,920
come with it and let's react take care

358
00:14:42,920 --> 00:14:45,470
of the whole show I think this is what

359
00:14:45,470 --> 00:14:47,780
everyone loves about it because it was

360
00:14:47,780 --> 00:14:50,330
so simple to insert and the ideas are

361
00:14:50,330 --> 00:14:52,940
more or less the same but we extend the

362
00:14:52,940 --> 00:14:55,100
adapter what we do is we check for

363
00:14:55,100 --> 00:14:57,650
amounted component we check for updates

364
00:14:57,650 --> 00:15:01,550
we pass in props which are properties

365
00:15:01,550 --> 00:15:02,960
which we'll talk about in just a second

366
00:15:02,960 --> 00:15:05,810
we find the note in the Dom apply that

367
00:15:05,810 --> 00:15:07,430
identifier class that's how much ADA to

368
00:15:07,430 --> 00:15:10,010
reacted rapper and then just render and

369
00:15:10,010 --> 00:15:13,010
then we're good to go no delays no

370
00:15:13,010 --> 00:15:15,980
performance lags it just works we're

371
00:15:15,980 --> 00:15:17,330
still in the process of tweaking this so

372
00:15:17,330 --> 00:15:18,410
I don't want to get too far ahead of

373
00:15:18,410 --> 00:15:21,970
myself but it's worked great thus far

374
00:15:21,970 --> 00:15:26,530
and here we are our sign up header

375
00:15:26,530 --> 00:15:28,690
component since we are using

376
00:15:28,690 --> 00:15:31,400
CoffeeScript you have to use something

377
00:15:31,400 --> 00:15:34,280
like CJ SX it works great but there are

378
00:15:34,280 --> 00:15:36,830
bugs with it so if you're looking to try

379
00:15:36,830 --> 00:15:39,860
something new like I said go with Babel

380
00:15:39,860 --> 00:15:43,940
it's been awesome here we go like I said

381
00:15:43,940 --> 00:15:45,350
don't freak out about the template in

382
00:15:45,350 --> 00:15:46,820
view it's okay we're not doing much

383
00:15:46,820 --> 00:15:48,680
javascript manipulation here

384
00:15:48,680 --> 00:15:51,680
but we've got our render method and then

385
00:15:51,680 --> 00:15:54,470
we wrap a header around just the trunk

386
00:15:54,470 --> 00:15:55,910
club imagine that being a logo for

387
00:15:55,910 --> 00:16:01,250
example super simple super basic but you

388
00:16:01,250 --> 00:16:02,570
know we want to do some more creative

389
00:16:02,570 --> 00:16:04,700
stuff right we want to pass down data we

390
00:16:04,700 --> 00:16:06,290
want to see some interaction we want to

391
00:16:06,290 --> 00:16:09,890
see you know cool things happen so we

392
00:16:09,890 --> 00:16:12,080
pass down data multiple models and

393
00:16:12,080 --> 00:16:16,220
collections as props a perhaps perhaps

394
00:16:16,220 --> 00:16:18,770
are basically objects that react lets

395
00:16:18,770 --> 00:16:21,140
you play around with and the mixing that

396
00:16:21,140 --> 00:16:23,870
we're using kind of requires them so

397
00:16:23,870 --> 00:16:27,320
here we are we're namespacing model for

398
00:16:27,320 --> 00:16:29,510
member and stylists and then we're

399
00:16:29,510 --> 00:16:31,610
grabbing some more information from them

400
00:16:31,610 --> 00:16:33,230
out of with and then passing it through

401
00:16:33,230 --> 00:16:35,209
as a collection we've got addresses and

402
00:16:35,209 --> 00:16:38,570
credit cards for example so what are

403
00:16:38,570 --> 00:16:41,180
props I know this isn't a react talk but

404
00:16:41,180 --> 00:16:43,149
it's great to go over these things right

405
00:16:43,149 --> 00:16:45,290
react props or properties that are

406
00:16:45,290 --> 00:16:47,360
received from above and are immutable as

407
00:16:47,360 --> 00:16:49,250
far as the component is concerned it's

408
00:16:49,250 --> 00:16:51,200
short for properties it's commits

409
00:16:51,200 --> 00:16:55,040
component configuration a component

410
00:16:55,040 --> 00:16:57,290
can't change its own props but it's

411
00:16:57,290 --> 00:16:58,760
responsible for the props of its

412
00:16:58,760 --> 00:17:02,240
children and while we're at it let's

413
00:17:02,240 --> 00:17:04,010
just go over state too because they play

414
00:17:04,010 --> 00:17:07,069
a great role together state starts with

415
00:17:07,069 --> 00:17:09,110
a default value in a component mounts

416
00:17:09,110 --> 00:17:11,059
and then suffers for mutations in time

417
00:17:11,059 --> 00:17:13,189
mostly generated from user events

418
00:17:13,189 --> 00:17:14,990
submitting a form clicking a button

419
00:17:14,990 --> 00:17:17,030
changing the page anything that user

420
00:17:17,030 --> 00:17:19,750
interacts with should always be state

421
00:17:19,750 --> 00:17:22,429
there's a great way to kind of keep

422
00:17:22,429 --> 00:17:24,860
track of that components manage its own

423
00:17:24,860 --> 00:17:26,390
state internally you can think of them

424
00:17:26,390 --> 00:17:28,610
you can think of state as private it

425
00:17:28,610 --> 00:17:30,410
doesn't affect the state of its children

426
00:17:30,410 --> 00:17:33,440
a component can't change its own props

427
00:17:33,440 --> 00:17:36,309
but it could change its own States a

428
00:17:36,309 --> 00:17:38,840
component can't change a child's prop

429
00:17:38,840 --> 00:17:40,910
component can change a child's prop

430
00:17:40,910 --> 00:17:43,250
before passing them down but it can't

431
00:17:43,250 --> 00:17:46,360
change its own I hope that makes sense

432
00:17:46,360 --> 00:17:49,730
in any case here we are let's pass down

433
00:17:49,730 --> 00:17:52,910
some data so as you saw earlier we were

434
00:17:52,910 --> 00:17:55,400
passing in addresses and credit cards

435
00:17:55,400 --> 00:17:58,040
here we are we want to map over the

436
00:17:58,040 --> 00:18:00,470
addresses we have a separate address

437
00:18:00,470 --> 00:18:02,210
component living somewhere

438
00:18:02,210 --> 00:18:04,490
and we're passing in a key prop and an

439
00:18:04,490 --> 00:18:07,850
address-- prop this is what I was

440
00:18:07,850 --> 00:18:09,670
talking about when you can pass down

441
00:18:09,670 --> 00:18:12,950
props to other sorts of components this

442
00:18:12,950 --> 00:18:14,480
is where you would make the mutation do

443
00:18:14,480 --> 00:18:16,280
whatever you have to do before the

444
00:18:16,280 --> 00:18:19,370
component below it gets it so like I

445
00:18:19,370 --> 00:18:20,960
said consuming the address collection

446
00:18:20,960 --> 00:18:23,990
mapping them over in our account profile

447
00:18:23,990 --> 00:18:27,830
I'll mention this to pro tip passing a

448
00:18:27,830 --> 00:18:31,340
key whenever you do a map its reacts way

449
00:18:31,340 --> 00:18:33,800
of doing a reconciliation making sure

450
00:18:33,800 --> 00:18:35,390
there's nothing weird that happens it

451
00:18:35,390 --> 00:18:37,070
will ensure that any child within that

452
00:18:37,070 --> 00:18:39,200
key will be ordered reordered instead of

453
00:18:39,200 --> 00:18:41,710
clobbered or destroyed instead of reused

454
00:18:41,710 --> 00:18:44,870
so it's important to have even if you

455
00:18:44,870 --> 00:18:46,330
forget that after this presentation

456
00:18:46,330 --> 00:18:49,370
react is a really good job with error

457
00:18:49,370 --> 00:18:51,860
messages it'll console everything out

458
00:18:51,860 --> 00:18:53,690
and let you know exactly what you should

459
00:18:53,690 --> 00:18:56,600
stack overflow or Google for so don't

460
00:18:56,600 --> 00:19:01,130
worry about it too much now we've passed

461
00:19:01,130 --> 00:19:03,440
down props we talked about state but the

462
00:19:03,440 --> 00:19:05,540
most important part of this is how does

463
00:19:05,540 --> 00:19:07,850
react know that our model has been

464
00:19:07,850 --> 00:19:09,770
updated or we change something or our

465
00:19:09,770 --> 00:19:11,780
collections been updated this is where

466
00:19:11,780 --> 00:19:13,610
the backbone react component mixin comes

467
00:19:13,610 --> 00:19:15,920
from it'll glue your backbone model and

468
00:19:15,920 --> 00:19:18,770
collections and to react components this

469
00:19:18,770 --> 00:19:21,320
was made by jose miguel hayes and it's

470
00:19:21,320 --> 00:19:24,170
been a fantastic part of our workflow so

471
00:19:24,170 --> 00:19:25,790
once your component is mounted a rapper

472
00:19:25,790 --> 00:19:27,110
starts listening in the models and

473
00:19:27,110 --> 00:19:29,330
collection changes to automatically set

474
00:19:29,330 --> 00:19:31,130
components stave and the cheap you I

475
00:19:31,130 --> 00:19:35,030
binding through reactive updates here's

476
00:19:35,030 --> 00:19:38,300
a very simple example get model member

477
00:19:38,300 --> 00:19:39,950
is sinking if it's sinking let's show a

478
00:19:39,950 --> 00:19:42,020
loading indicator otherwise let's load

479
00:19:42,020 --> 00:19:44,270
that member information it's super

480
00:19:44,270 --> 00:19:46,070
simple and it's that easy there's no

481
00:19:46,070 --> 00:19:51,130
weird things happening it just works so

482
00:19:51,130 --> 00:19:54,560
um this mix and gives us some awesome

483
00:19:54,560 --> 00:19:56,990
helper methods because as you recall

484
00:19:56,990 --> 00:19:59,510
props are immutable you can't change

485
00:19:59,510 --> 00:20:01,250
them but sometimes you want to update

486
00:20:01,250 --> 00:20:02,930
that model you want to update a first

487
00:20:02,930 --> 00:20:04,400
and last name you want to update an

488
00:20:04,400 --> 00:20:06,350
email address you have to change that

489
00:20:06,350 --> 00:20:09,740
stuff so what we get is two really great

490
00:20:09,740 --> 00:20:12,290
helper functions this not yet model and

491
00:20:12,290 --> 00:20:14,480
this dock collection or this not get

492
00:20:14,480 --> 00:20:15,530
collection

493
00:20:15,530 --> 00:20:18,080
when you're using just one model you can

494
00:20:18,080 --> 00:20:21,080
just do this dot get model get name and

495
00:20:21,080 --> 00:20:23,480
when you're using numerous you kind of

496
00:20:23,480 --> 00:20:25,220
just use that namespace we talked about

497
00:20:25,220 --> 00:20:28,910
previously get modeled member get name

498
00:20:28,910 --> 00:20:32,030
and then setting works the same way I

499
00:20:32,030 --> 00:20:34,520
get model that address that set zip code

500
00:20:34,520 --> 00:20:36,430
and then whatever your zip code maybe

501
00:20:36,430 --> 00:20:40,190
get collection same idea you saw that

502
00:20:40,190 --> 00:20:42,230
earlier and we were looping over an

503
00:20:42,230 --> 00:20:49,040
array of models so there are some

504
00:20:49,040 --> 00:20:51,290
gotchas that we faced especially if you

505
00:20:51,290 --> 00:20:53,630
are using CoffeeScript like i said

506
00:20:53,630 --> 00:20:57,500
earlier CJ SX is great if you need to

507
00:20:57,500 --> 00:20:58,970
get something up and running you need to

508
00:20:58,970 --> 00:21:00,800
get moving you don't have time to start

509
00:21:00,800 --> 00:21:02,720
rewriting a nap but you want to use

510
00:21:02,720 --> 00:21:05,540
coffeescript Babel is much more robust

511
00:21:05,540 --> 00:21:08,840
if you can use it use it implicit

512
00:21:08,840 --> 00:21:11,300
returns in CoffeeScript sometimes those

513
00:21:11,300 --> 00:21:13,250
will bite you in the butt right remember

514
00:21:13,250 --> 00:21:15,080
to wrap a series of components in a

515
00:21:15,080 --> 00:21:16,940
parent div otherwise it won't render

516
00:21:16,940 --> 00:21:19,970
like you want it to since what react

517
00:21:19,970 --> 00:21:25,340
does is it renders or it renders the it

518
00:21:25,340 --> 00:21:27,560
returns the main component and if

519
00:21:27,560 --> 00:21:29,240
there's other things involved it just

520
00:21:29,240 --> 00:21:30,710
won't work out so you want to wrap

521
00:21:30,710 --> 00:21:34,550
everything in a parent div and then

522
00:21:34,550 --> 00:21:36,710
event handlers to we were getting this

523
00:21:36,710 --> 00:21:39,500
pesky pesky console dot log and we

524
00:21:39,500 --> 00:21:41,180
couldn't figure it out you know like

525
00:21:41,180 --> 00:21:42,980
we're not using prevent when clicking a

526
00:21:42,980 --> 00:21:45,140
button you get this weird oh stop using

527
00:21:45,140 --> 00:21:47,900
event return false like use a vent

528
00:21:47,900 --> 00:21:50,180
propping or event stop propagation a

529
00:21:50,180 --> 00:21:52,400
really weird message but that's because

530
00:21:52,400 --> 00:21:54,080
it's not because of what we were doing

531
00:21:54,080 --> 00:21:56,390
it's because what CJ sx was doing and

532
00:21:56,390 --> 00:21:57,560
what coffeescript was doing behind the

533
00:21:57,560 --> 00:22:01,430
scenes it will emit a warning so just

534
00:22:01,430 --> 00:22:07,850
look out for that so final thoughts this

535
00:22:07,850 --> 00:22:10,040
is all very temporary we don't plan to

536
00:22:10,040 --> 00:22:12,500
keep building our apps this way all of

537
00:22:12,500 --> 00:22:14,780
our newer single-page applications are

538
00:22:14,780 --> 00:22:16,880
more rebus flux and react applications

539
00:22:16,880 --> 00:22:18,800
that use es6 and all those fun things

540
00:22:18,800 --> 00:22:22,060
that we've been learning about so please

541
00:22:22,060 --> 00:22:24,080
once you get the once you get the

542
00:22:24,080 --> 00:22:26,660
ability to start building a new app with

543
00:22:26,660 --> 00:22:28,070
it it's great for now and it works

544
00:22:28,070 --> 00:22:28,880
fantastic

545
00:22:28,880 --> 00:22:32,060
but it can get sort of mingled sometimes

546
00:22:32,060 --> 00:22:33,530
so just keep that in mind once your apps

547
00:22:33,530 --> 00:22:36,200
do grow to just outrageous sizes and

548
00:22:36,200 --> 00:22:38,750
then I had the pleasure of meeting Joe

549
00:22:38,750 --> 00:22:40,160
Hudson I'm not sure if you're here

550
00:22:40,160 --> 00:22:44,090
anywhere Joe but he built this react

551
00:22:44,090 --> 00:22:45,890
backbone Nixon to I haven't had a chance

552
00:22:45,890 --> 00:22:49,040
to use it this week but it seems to be

553
00:22:49,040 --> 00:22:50,480
pretty awesome he seems to be a really

554
00:22:50,480 --> 00:22:53,530
smart guy so give that a shot as well

555
00:22:53,530 --> 00:22:55,970
all right everyone thank you that was

