1
00:00:01,080 --> 00:00:08,429

[Music]

2
00:00:08,429 --> 00:00:11,490
so hi my name is Ryan J Salva I am a

3
00:00:11,490 --> 00:00:14,309
product manager on the visual studio

4
00:00:14,309 --> 00:00:17,160
team I'm also a JavaScript developer of

5
00:00:17,160 --> 00:00:20,640
about 15 years and a committer to the

6
00:00:20,640 --> 00:00:23,310
Apache Cordova project today I'm gonna

7
00:00:23,310 --> 00:00:25,859
take the next 30 minutes or so to talk

8
00:00:25,859 --> 00:00:27,720
to you a little bit about performance

9
00:00:27,720 --> 00:00:30,119
and a lot of the lessons that I talk

10
00:00:30,119 --> 00:00:32,579
about today will apply to Cordova but

11
00:00:32,579 --> 00:00:34,800
they apply equally well to the mobile

12
00:00:34,800 --> 00:00:37,530
web and so really this is just gonna be

13
00:00:37,530 --> 00:00:40,500
a a tour of a bunch of science that

14
00:00:40,500 --> 00:00:42,239
we've conducted and I mean that like

15
00:00:42,239 --> 00:00:43,980
science with a capital S really

16
00:00:43,980 --> 00:00:46,350
important science to better understand

17
00:00:46,350 --> 00:00:49,860
how exactly per Forks for mobile

18
00:00:49,860 --> 00:00:51,300
applications when they're using web

19
00:00:51,300 --> 00:00:54,149
technologies sound like a good time yeah

20
00:00:54,149 --> 00:00:56,160
sounds like a good time awesome all

21
00:00:56,160 --> 00:00:59,399
right sweet so hey if along this you

22
00:00:59,399 --> 00:01:00,870
learn anything that you didn't know

23
00:01:00,870 --> 00:01:03,180
before use the hash tag perf matters on

24
00:01:03,180 --> 00:01:05,220
Twitter and share it with your friends

25
00:01:05,220 --> 00:01:09,000
because science is everyone's awesome

26
00:01:09,000 --> 00:01:12,210
thing to learn all right so like I said

27
00:01:12,210 --> 00:01:13,920
before the lessons we learned today are

28
00:01:13,920 --> 00:01:15,869
gonna apply equally well between hybrid

29
00:01:15,869 --> 00:01:18,869
applications in mobile web and just a

30
00:01:18,869 --> 00:01:20,310
kind of level set I want to make sure

31
00:01:20,310 --> 00:01:21,780
that everyone understands when I talk

32
00:01:21,780 --> 00:01:23,880
about hybrid applications what I'm

33
00:01:23,880 --> 00:01:27,030
really talking about here so this is the

34
00:01:27,030 --> 00:01:29,729
primary technology is Cordova most

35
00:01:29,729 --> 00:01:31,320
people know what Cordova is or PhoneGap

36
00:01:31,320 --> 00:01:36,150
yeah yeah yar okay good excellent so the

37
00:01:36,150 --> 00:01:39,630
basic idea behind it is that Cordova its

38
00:01:39,630 --> 00:01:42,030
core is a web application that sits

39
00:01:42,030 --> 00:01:44,009
inside of a webview inside of a native

40
00:01:44,009 --> 00:01:47,159
application and as a web application all

41
00:01:47,159 --> 00:01:48,990
of the HTML the CSS and the JavaScript

42
00:01:48,990 --> 00:01:53,009
are packaged locally but they kind of

43
00:01:53,009 --> 00:01:55,950
talk back to native api's whether it be

44
00:01:55,950 --> 00:01:58,290
the camera API or the address book or

45
00:01:58,290 --> 00:02:00,240
the accelerometer through these

46
00:02:00,240 --> 00:02:02,219
asynchronous calls that bridge the

47
00:02:02,219 --> 00:02:04,890
webview and talk back to native code the

48
00:02:04,890 --> 00:02:06,659
brilliant thing about this is that it

49
00:02:06,659 --> 00:02:08,520
kind of gives you like a browser on

50
00:02:08,520 --> 00:02:10,140
steroids you get access to all these

51
00:02:10,140 --> 00:02:11,640
native api's that you wouldn't have

52
00:02:11,640 --> 00:02:13,390
access to otherwise

53
00:02:13,390 --> 00:02:15,070
and you get support for offline by

54
00:02:15,070 --> 00:02:16,960
virtue of the fact that all of that HTML

55
00:02:16,960 --> 00:02:18,850
CSS and JavaScript have been packaged

56
00:02:18,850 --> 00:02:21,160
locally so that's the basic architecture

57
00:02:21,160 --> 00:02:24,940
and we're gonna kind of use that to

58
00:02:24,940 --> 00:02:27,520
explore like there's this perception

59
00:02:27,520 --> 00:02:29,800
there's this general kind of ickiness

60
00:02:29,800 --> 00:02:32,950
this feeling that web applications and

61
00:02:32,950 --> 00:02:34,810
hybrid applications when compared to

62
00:02:34,810 --> 00:02:37,840
native applications don't quite stand up

63
00:02:37,840 --> 00:02:40,120
they don't really cut the butter as it

64
00:02:40,120 --> 00:02:42,730
were and so in the next 30 minutes we're

65
00:02:42,730 --> 00:02:44,490
gonna try and dispel some of those myths

66
00:02:44,490 --> 00:02:50,560
using science all right to understand

67
00:02:50,560 --> 00:02:52,239
performance you first need to understand

68
00:02:52,239 --> 00:02:54,400
what it actually means to be fast and

69
00:02:54,400 --> 00:02:56,320
responsive so here's what I want you

70
00:02:56,320 --> 00:02:57,640
guys to do here's how I want you to

71
00:02:57,640 --> 00:02:59,140
think about it I got a nice little graph

72
00:02:59,140 --> 00:03:00,940
here and there's lots of different

73
00:03:00,940 --> 00:03:02,800
flavors and versions of this graph that

74
00:03:02,800 --> 00:03:04,420
you might have seen online I think I

75
00:03:04,420 --> 00:03:06,310
stole this one from the Nielsen Norman

76
00:03:06,310 --> 00:03:08,500
group and they probably created this

77
00:03:08,500 --> 00:03:11,140
back in 1995 or something like that

78
00:03:11,140 --> 00:03:13,540
but I've actually expanded it to put

79
00:03:13,540 --> 00:03:15,640
some real millisecond measurements on

80
00:03:15,640 --> 00:03:17,950
this so in the far left hand side that's

81
00:03:17,950 --> 00:03:20,049
17 milliseconds everything that's under

82
00:03:20,049 --> 00:03:23,140
fluid that's really not about user

83
00:03:23,140 --> 00:03:25,000
interaction with your app but that's

84
00:03:25,000 --> 00:03:26,980
about the way that your app moves

85
00:03:26,980 --> 00:03:29,380
that's about animations being fluid

86
00:03:29,380 --> 00:03:32,590
transitions kind of silky smooth flowing

87
00:03:32,590 --> 00:03:35,200
through right and if you do the math

88
00:03:35,200 --> 00:03:38,140
that 17 milliseconds actually calculates

89
00:03:38,140 --> 00:03:40,750
out to be 60 frames per second that's

90
00:03:40,750 --> 00:03:42,580
what that's about getting that magical

91
00:03:42,580 --> 00:03:44,980
60 frames per second just to the right

92
00:03:44,980 --> 00:03:47,620
of that instantaneous okay this is when

93
00:03:47,620 --> 00:03:49,510
you're actually got your finger on the

94
00:03:49,510 --> 00:03:51,489
mobile device you're dragging it around

95
00:03:51,489 --> 00:03:54,040
and the object actually sticks to your

96
00:03:54,040 --> 00:03:55,690
finger so this is really important to

97
00:03:55,690 --> 00:03:57,549
make sure that like you actually feel

98
00:03:57,549 --> 00:03:59,080
like you're in control of the

99
00:03:59,080 --> 00:04:02,019
application beyond that actions which

100
00:04:02,019 --> 00:04:05,170
are fast these are maybe like navigation

101
00:04:05,170 --> 00:04:08,320
events going from one particular page to

102
00:04:08,320 --> 00:04:10,930
the next loading a new view beyond that

103
00:04:10,930 --> 00:04:13,959
everything to the right buddy if if

104
00:04:13,959 --> 00:04:15,549
you've got something that takes that

105
00:04:15,549 --> 00:04:17,380
long to react you better be throwing up

106
00:04:17,380 --> 00:04:19,630
a spinner or something like that to let

107
00:04:19,630 --> 00:04:22,030
people know that work is being done in

108
00:04:22,030 --> 00:04:25,360
the background for this talk for the

109
00:04:25,360 --> 00:04:27,130
next 20 30 minutes or so what

110
00:04:27,130 --> 00:04:28,990
we care about is everything on that

111
00:04:28,990 --> 00:04:31,480
right-hand side that far right-hand side

112
00:04:31,480 --> 00:04:33,250
what we care about actually for you guys

113
00:04:33,250 --> 00:04:35,640
wait that's left that's your left okay

114
00:04:35,640 --> 00:04:38,440
our left-hand side from your left hand

115
00:04:38,440 --> 00:04:40,630
side we care about fluid and

116
00:04:40,630 --> 00:04:43,450
instantaneous because frankly everything

117
00:04:43,450 --> 00:04:45,700
on the right hand side of that there's

118
00:04:45,700 --> 00:04:50,980
no question that JavaScript CSS HTML are

119
00:04:50,980 --> 00:04:52,630
capable of delivering that kind of

120
00:04:52,630 --> 00:04:57,370
performance right so what is the

121
00:04:57,370 --> 00:05:00,610
methodology behind our science so we

122
00:05:00,610 --> 00:05:03,550
took a look at a bunch of different

123
00:05:03,550 --> 00:05:06,100
applications and we and we kind of

124
00:05:06,100 --> 00:05:07,960
looked at different approaches that

125
00:05:07,960 --> 00:05:09,970
developers took to building out those

126
00:05:09,970 --> 00:05:12,820
applications and we also took a look at

127
00:05:12,820 --> 00:05:15,370
some of the major makers of the popular

128
00:05:15,370 --> 00:05:18,160
UX frameworks that are out there so I'm

129
00:05:18,160 --> 00:05:20,470
thinking of people here like ionic or

130
00:05:20,470 --> 00:05:23,020
onsen or kendo and not the MV star

131
00:05:23,020 --> 00:05:24,790
frameworks not the angular's of the

132
00:05:24,790 --> 00:05:26,200
world of a reacts of the worlds but the

133
00:05:26,200 --> 00:05:28,030
people that are making UX controls

134
00:05:28,030 --> 00:05:30,610
because those are the things that end up

135
00:05:30,610 --> 00:05:33,010
driving user interaction and we said you

136
00:05:33,010 --> 00:05:34,510
know what is there any difference

137
00:05:34,510 --> 00:05:36,580
between the way that average Joe

138
00:05:36,580 --> 00:05:38,380
developer is building things today

139
00:05:38,380 --> 00:05:40,870
versus the way that these people who are

140
00:05:40,870 --> 00:05:43,180
creating the best-of-breed UX frameworks

141
00:05:43,180 --> 00:05:44,470
are actually thinking about performance

142
00:05:44,470 --> 00:05:46,990
and where there are differences between

143
00:05:46,990 --> 00:05:49,180
the two what are the differences that

144
00:05:49,180 --> 00:05:51,910
are contributing to poor performance

145
00:05:51,910 --> 00:05:53,470
does that make sense

146
00:05:53,470 --> 00:05:57,970
yeah and so from that we identified six

147
00:05:57,970 --> 00:06:01,630
issues by the way the all of the tests

148
00:06:01,630 --> 00:06:03,130
that we performed here because you need

149
00:06:03,130 --> 00:06:05,800
to control four devices here we used

150
00:06:05,800 --> 00:06:09,580
three kind of you know recent but not

151
00:06:09,580 --> 00:06:12,070
too recent devices because we wanted to

152
00:06:12,070 --> 00:06:14,110
find devices that were out there being

153
00:06:14,110 --> 00:06:17,080
used by our mothers and our fathers and

154
00:06:17,080 --> 00:06:18,790
our sisters and people that are not just

155
00:06:18,790 --> 00:06:20,650
spending all of their time in the tech

156
00:06:20,650 --> 00:06:22,720
world investing in the next greatest

157
00:06:22,720 --> 00:06:25,030
thing right so they're slightly older

158
00:06:25,030 --> 00:06:26,730
devices

159
00:06:26,730 --> 00:06:31,660
so here the six different areas where we

160
00:06:31,660 --> 00:06:33,580
found that there were discrepancies

161
00:06:33,580 --> 00:06:35,380
between the way that the common

162
00:06:35,380 --> 00:06:37,180
developer might go about building an

163
00:06:37,180 --> 00:06:40,240
application and the kind of the best of

164
00:06:40,240 --> 00:06:40,689
the back

165
00:06:40,689 --> 00:06:44,949
so UX developers so webview tax document

166
00:06:44,949 --> 00:06:47,379
object model images animation garbage

167
00:06:47,379 --> 00:06:49,509
collection and UI controls these are the

168
00:06:49,509 --> 00:06:51,209
areas where we found differences now

169
00:06:51,209 --> 00:06:56,319
because I'm a sneaky guy I'm only going

170
00:06:56,319 --> 00:06:57,789
to tell you about four of those today

171
00:06:57,789 --> 00:07:01,419
really that's my way of tempting all of

172
00:07:01,419 --> 00:07:03,039
you to come up and talk to me afterwards

173
00:07:03,039 --> 00:07:05,169
so that you can find out the hidden

174
00:07:05,169 --> 00:07:07,389
secrets behind animation and UI controls

175
00:07:07,389 --> 00:07:09,699
we'll start by talking about these four

176
00:07:09,699 --> 00:07:14,619
though sound good all right so the web

177
00:07:14,619 --> 00:07:17,739
view tax now this first part this is

178
00:07:17,739 --> 00:07:19,899
really specific to Cordova this is the

179
00:07:19,899 --> 00:07:22,599
one piece of the talk that is only going

180
00:07:22,599 --> 00:07:25,329
to apply to hybrid applications now as I

181
00:07:25,329 --> 00:07:28,329
said before Cordova application has the

182
00:07:28,329 --> 00:07:30,669
web application running inside of a

183
00:07:30,669 --> 00:07:32,769
webview that's hosted inside of a native

184
00:07:32,769 --> 00:07:36,219
control and because it kind of operates

185
00:07:36,219 --> 00:07:38,319
inside of that webview there's a tax

186
00:07:38,319 --> 00:07:41,709
that you got to pay and so here's what

187
00:07:41,709 --> 00:07:44,619
we did first we said you know what let's

188
00:07:44,619 --> 00:07:47,289
take a baseline let's measure the memory

189
00:07:47,289 --> 00:07:49,539
footprint of a native application and

190
00:07:49,539 --> 00:07:52,629
the native Java for Android objective-c

191
00:07:52,629 --> 00:07:55,659
for iOS c-sharp for Windows and

192
00:07:55,659 --> 00:07:57,909
Silverlight for Windows Phone right we

193
00:07:57,909 --> 00:08:00,159
said okay if you were just to create a

194
00:08:00,159 --> 00:08:02,679
hello world using the native language

195
00:08:02,679 --> 00:08:04,449
what would the memory footprint being

196
00:08:04,449 --> 00:08:08,769
and we said you know what I bet that

197
00:08:08,769 --> 00:08:11,349
since a webview is essentially just a

198
00:08:11,349 --> 00:08:14,529
browser that the memory footprint of a

199
00:08:14,529 --> 00:08:16,899
Cordova app would probably be the native

200
00:08:16,899 --> 00:08:19,209
application plus the memory footprint of

201
00:08:19,209 --> 00:08:21,339
the browser and that would probably give

202
00:08:21,339 --> 00:08:23,050
you the memory footprint of a Cordova

203
00:08:23,050 --> 00:08:24,249
app and that could kind of give us an

204
00:08:24,249 --> 00:08:25,919
idea of what the taxes that we pay there

205
00:08:25,919 --> 00:08:28,869
so we did a measurement of a browser on

206
00:08:28,869 --> 00:08:31,059
each of the devices so that's the memory

207
00:08:31,059 --> 00:08:33,250
footprint of about blank in a web

208
00:08:33,250 --> 00:08:35,740
browser on an Android phone and iOS

209
00:08:35,740 --> 00:08:38,889
phone and Windows Device then we

210
00:08:38,889 --> 00:08:41,430
measured the Cordova application now

211
00:08:41,430 --> 00:08:43,779
there's some interesting things going on

212
00:08:43,779 --> 00:08:47,740
here clearly androids got something

213
00:08:47,740 --> 00:08:49,839
going on here there's like a World Trade

214
00:08:49,839 --> 00:08:52,180
Center tower going up there

215
00:08:52,180 --> 00:08:54,700
says the Cordova application has got

216
00:08:54,700 --> 00:08:57,670
giant memory consumption problems on the

217
00:08:57,670 --> 00:08:58,810
iOS side

218
00:08:58,810 --> 00:09:01,450
well a plus B does not equal C they're

219
00:09:01,450 --> 00:09:03,610
actually the memory footprint is about

220
00:09:03,610 --> 00:09:06,670
the same as the browser Windows Store

221
00:09:06,670 --> 00:09:08,830
glory be I don't even know how this is

222
00:09:08,830 --> 00:09:11,950
possible but the memory footprint is

223
00:09:11,950 --> 00:09:14,410
lower than the native app and lower than

224
00:09:14,410 --> 00:09:16,750
the browser and then Windows Phone okay

225
00:09:16,750 --> 00:09:19,750
it's kind of about the same now all

226
00:09:19,750 --> 00:09:22,480
right so I want you all to remember that

227
00:09:22,480 --> 00:09:25,480
giant Tower that's there next to Android

228
00:09:25,480 --> 00:09:27,010
that's gonna come up later in some

229
00:09:27,010 --> 00:09:29,620
interesting ways but just remember big

230
00:09:29,620 --> 00:09:33,370
memory footprint on Android so here's

231
00:09:33,370 --> 00:09:35,260
the thing it's lovely to talk about

232
00:09:35,260 --> 00:09:36,370
memory but we're here to talk about

233
00:09:36,370 --> 00:09:39,220
performance today and memory is not

234
00:09:39,220 --> 00:09:42,070
something you can see where you can see

235
00:09:42,070 --> 00:09:44,320
it has an effect is on startup time so

236
00:09:44,320 --> 00:09:47,770
here's what we did took a slow motion

237
00:09:47,770 --> 00:09:49,690
camera in this case I actually just used

238
00:09:49,690 --> 00:09:51,790
my iPhone 6 it has a nice little slow

239
00:09:51,790 --> 00:09:55,209
motion camera in it and filmed actually

240
00:09:55,209 --> 00:09:58,270
starting up an application so hopefully

241
00:09:58,270 --> 00:09:59,709
you can see this on the left-hand side

242
00:09:59,709 --> 00:10:02,110
you can see us using a nice little touch

243
00:10:02,110 --> 00:10:04,240
pin to click on the hello world app on

244
00:10:04,240 --> 00:10:06,640
the right-hand side you can start to see

245
00:10:06,640 --> 00:10:08,440
a little bit of ghosting where the

246
00:10:08,440 --> 00:10:10,630
applications starting to launch we

247
00:10:10,630 --> 00:10:12,459
measured the number of frames in between

248
00:10:12,459 --> 00:10:15,400
the touch moment and the launch moment

249
00:10:15,400 --> 00:10:18,520
because it was filmed at 240 frames per

250
00:10:18,520 --> 00:10:20,170
second that meant that each frame

251
00:10:20,170 --> 00:10:22,209
accounted for 4 milliseconds and we

252
00:10:22,209 --> 00:10:23,830
could figure out how long it took to

253
00:10:23,830 --> 00:10:29,640
actually launch the application ah now

254
00:10:29,640 --> 00:10:31,300
remember how I asked you to remember

255
00:10:31,300 --> 00:10:33,790
that giant kind of increase on the

256
00:10:33,790 --> 00:10:34,870
Android side of things

257
00:10:34,870 --> 00:10:39,430
look how tall or how long it took for

258
00:10:39,430 --> 00:10:41,980
those Android Cordova apps to start up

259
00:10:41,980 --> 00:10:45,100
so the memory and the startup time have

260
00:10:45,100 --> 00:10:48,339
a strong correlation here on the iOS

261
00:10:48,339 --> 00:10:53,110
side ok this tall pillar right here

262
00:10:53,110 --> 00:10:56,110
that's the native app starting up I want

263
00:10:56,110 --> 00:10:57,490
to put a little caveat next to that

264
00:10:57,490 --> 00:10:59,200
that's why I put a little asterisk up at

265
00:10:59,200 --> 00:11:01,029
the top we actually just used the

266
00:11:01,029 --> 00:11:03,310
default hello world iOS app that came

267
00:11:03,310 --> 00:11:05,840
out of Xcode the way that that app is

268
00:11:05,840 --> 00:11:07,880
figured out of the box it has a 500

269
00:11:07,880 --> 00:11:10,790
millisecond delay that is configurable

270
00:11:10,790 --> 00:11:13,040
and so I believe that that number there

271
00:11:13,040 --> 00:11:14,390
is actually a bit of a false

272
00:11:14,390 --> 00:11:16,970
representation of what the actual native

273
00:11:16,970 --> 00:11:19,910
implementation would would kind of cause

274
00:11:19,910 --> 00:11:22,010
if we had adjusted that configuration

275
00:11:22,010 --> 00:11:25,880
setting iOS is iOS warm is pretty good

276
00:11:25,880 --> 00:11:27,650
when does phone cold is pretty good in

277
00:11:27,650 --> 00:11:29,600
Windows Phone warm is pretty good these

278
00:11:29,600 --> 00:11:32,690
cold versus warm so let me kind of give

279
00:11:32,690 --> 00:11:33,680
a little bit of insight into the

280
00:11:33,680 --> 00:11:37,340
methodology there cold means that we

281
00:11:37,340 --> 00:11:39,740
shut the phone completely down then

282
00:11:39,740 --> 00:11:41,630
started it up and then immediately

283
00:11:41,630 --> 00:11:45,500
started the application warm means that

284
00:11:45,500 --> 00:11:48,530
we shut the phone down turn it back on

285
00:11:48,530 --> 00:11:51,230
started the application shut the

286
00:11:51,230 --> 00:11:53,930
application down and then open the

287
00:11:53,930 --> 00:11:56,120
application up again because each of the

288
00:11:56,120 --> 00:11:59,180
devices makes some some sort of memory

289
00:11:59,180 --> 00:12:01,640
optimizations for the cold horses warm

290
00:12:01,640 --> 00:12:04,010
scenario we wanted to make sure that we

291
00:12:04,010 --> 00:12:05,690
controlled for that depending upon the

292
00:12:05,690 --> 00:12:10,610
actual usage so big takeaway here memory

293
00:12:10,610 --> 00:12:13,970
consumption high correlation with slower

294
00:12:13,970 --> 00:12:16,220
performance we're gonna see that theme

295
00:12:16,220 --> 00:12:18,380
repeat again and again over the course

296
00:12:18,380 --> 00:12:22,430
of the next 20 minutes so takeaway

297
00:12:22,430 --> 00:12:24,710
Android tends to be slower and it tends

298
00:12:24,710 --> 00:12:27,140
to be slower because we think because of

299
00:12:27,140 --> 00:12:30,830
memory consumption all right there's one

300
00:12:30,830 --> 00:12:33,290
more place that in a Cordova application

301
00:12:33,290 --> 00:12:36,020
you're actually paying a tax and that's

302
00:12:36,020 --> 00:12:39,080
in that xhr request that a synchronous

303
00:12:39,080 --> 00:12:40,820
call that needs to go from the webview

304
00:12:40,820 --> 00:12:44,060
to the native code and back again so

305
00:12:44,060 --> 00:12:46,960
imagine for a moment that you are

306
00:12:46,960 --> 00:12:51,410
sending a request for geolocation data

307
00:12:51,410 --> 00:12:54,830
or for accelerometer data your web your

308
00:12:54,830 --> 00:12:57,290
JavaScript needs to make the request at

309
00:12:57,290 --> 00:12:59,510
asynchronous a synchronously crosses the

310
00:12:59,510 --> 00:13:02,090
webview talks to the native code then

311
00:13:02,090 --> 00:13:03,590
the native code needs to send that

312
00:13:03,590 --> 00:13:05,390
response back with an XY and z

313
00:13:05,390 --> 00:13:08,920
coordinate right so here's what we did

314
00:13:08,920 --> 00:13:13,310
we created a cordova plugin whose only

315
00:13:13,310 --> 00:13:17,060
job in this big wide world was just to

316
00:13:17,060 --> 00:13:18,810
receive data and to

317
00:13:18,810 --> 00:13:20,880
that data back it didn't perform any

318
00:13:20,880 --> 00:13:23,190
processing on the data whatsoever it

319
00:13:23,190 --> 00:13:27,180
just was there to measure the impact on

320
00:13:27,180 --> 00:13:29,880
data size as it crossed over that web

321
00:13:29,880 --> 00:13:33,180
view bridge and what we see here is a

322
00:13:33,180 --> 00:13:35,670
nice linear line look at this

323
00:13:35,670 --> 00:13:38,730
so for iOS Android and Windows Phone

324
00:13:38,730 --> 00:13:42,060
using C sharp as the data increases

325
00:13:42,060 --> 00:13:45,510
along the x-axis the time also increases

326
00:13:45,510 --> 00:13:47,690
along the y-axis in a linear fashion

327
00:13:47,690 --> 00:13:51,510
note however crossing the very bottom of

328
00:13:51,510 --> 00:13:53,190
that line there's a kind of a yellow

329
00:13:53,190 --> 00:13:55,650
line there that's windows phone using

330
00:13:55,650 --> 00:13:58,050
javascript because windows devices are

331
00:13:58,050 --> 00:14:01,500
able to run JavaScript as a native

332
00:14:01,500 --> 00:14:03,680
language like you don't there's no

333
00:14:03,680 --> 00:14:05,520
compilation that happens there

334
00:14:05,520 --> 00:14:08,790
there's no webview to cross and so the

335
00:14:08,790 --> 00:14:11,130
time to kind of interact with the

336
00:14:11,130 --> 00:14:14,339
plug-in is zero no matter how large the

337
00:14:14,339 --> 00:14:16,920
data set gets what I want to call your

338
00:14:16,920 --> 00:14:19,760
attention to here though is that this

339
00:14:19,760 --> 00:14:23,760
500k actually this is more than 500 K

340
00:14:23,760 --> 00:14:27,860
this is 5,000 K in order for you to

341
00:14:27,860 --> 00:14:30,960
transfer that over the webview is a

342
00:14:30,960 --> 00:14:32,730
period of less than was that 300

343
00:14:32,730 --> 00:14:34,980
milliseconds or so it's a very very

344
00:14:34,980 --> 00:14:37,530
small amount of time and so even if you

345
00:14:37,530 --> 00:14:39,360
were transferring a large amount of data

346
00:14:39,360 --> 00:14:42,680
for example an image taken from a camera

347
00:14:42,680 --> 00:14:46,080
it's going to happen in a practically

348
00:14:46,080 --> 00:14:48,510
non noticeable period of time if you're

349
00:14:48,510 --> 00:14:51,150
transferring smaller bits of data for

350
00:14:51,150 --> 00:14:53,400
example accelerometer or geolocation

351
00:14:53,400 --> 00:14:57,000
data it's going to be 2 3 4 milliseconds

352
00:14:57,000 --> 00:15:00,360
very very tiny so what that tells us

353
00:15:00,360 --> 00:15:02,670
that is that javascript in terms of

354
00:15:02,670 --> 00:15:05,280
being able to deliver high performance

355
00:15:05,280 --> 00:15:08,310
is able to really deliver right you

356
00:15:08,310 --> 00:15:10,940
don't there's no waiting around for it

357
00:15:10,940 --> 00:15:14,310
ok that's it for the Cordova specific

358
00:15:14,310 --> 00:15:16,620
stuff now let's actually get into the

359
00:15:16,620 --> 00:15:18,209
kind of the stuff that's applicable to

360
00:15:18,209 --> 00:15:21,870
both Cordova and to mobile web so I

361
00:15:21,870 --> 00:15:23,279
don't need to tell you guys too much

362
00:15:23,279 --> 00:15:26,220
about what the DOM is you all know let's

363
00:15:26,220 --> 00:15:29,060
see a dumb or rather an example here and

364
00:15:29,060 --> 00:15:31,500
a bit about how this is going to

365
00:15:31,500 --> 00:15:33,360
just to make sure that we had enough

366
00:15:33,360 --> 00:15:35,400
time to show all the experiments what I

367
00:15:35,400 --> 00:15:37,620
did is I did a screen recording of me

368
00:15:37,620 --> 00:15:39,930
conducting these experiments when I

369
00:15:39,930 --> 00:15:41,910
actually conduct them in the lab I'm

370
00:15:41,910 --> 00:15:44,280
performing these experiments thousands

371
00:15:44,280 --> 00:15:46,950
and thousands and thousands of times to

372
00:15:46,950 --> 00:15:49,290
make sure that we get a good median and

373
00:15:49,290 --> 00:15:51,450
a good baseline for each of them each

374
00:15:51,450 --> 00:15:53,580
one of these is exemplary of those

375
00:15:53,580 --> 00:15:59,430
thousands of runs ok so in this one I'm

376
00:15:59,430 --> 00:16:01,830
going to conduct an experiment where I'm

377
00:16:01,830 --> 00:16:05,010
performing Dom manipulation first using

378
00:16:05,010 --> 00:16:08,010
a simple DOM and then using a complex

379
00:16:08,010 --> 00:16:11,130
tone and what I mean by that a simple

380
00:16:11,130 --> 00:16:15,060
Dom has fewer elements and no nesting

381
00:16:15,060 --> 00:16:18,330
the complex Dom has very deep nesting

382
00:16:18,330 --> 00:16:21,000
hundreds of nodes deep and multiple

383
00:16:21,000 --> 00:16:23,940
elements for this I'm actually running

384
00:16:23,940 --> 00:16:26,730
them on a nexus 9 that Nexus 9 this is

385
00:16:26,730 --> 00:16:28,200
the case with all the experiments that

386
00:16:28,200 --> 00:16:31,140
Nexus 9 is just being screencast to my

387
00:16:31,140 --> 00:16:34,260
to my desktop via a fun little

388
00:16:34,260 --> 00:16:37,410
application called mobizen all of the

389
00:16:37,410 --> 00:16:39,060
experiments I'm going to show using

390
00:16:39,060 --> 00:16:42,180
Android but the results tend to be

391
00:16:42,180 --> 00:16:51,330
similar for iOS and Windows okay all

392
00:16:51,330 --> 00:16:53,610
right for this I'm just gonna bring up

393
00:16:53,610 --> 00:16:55,650
the chrome dev tools and the first one

394
00:16:55,650 --> 00:16:56,430
that I'm gonna do is I'm going to

395
00:16:56,430 --> 00:16:58,230
trigger manipulations of the simple Dom

396
00:16:58,230 --> 00:17:00,240
and you can see here I'm just outputting

397
00:17:00,240 --> 00:17:01,800
to the console the amount of time

398
00:17:01,800 --> 00:17:03,660
required to perform each one of the

399
00:17:03,660 --> 00:17:05,459
manipulations I've moved on to the

400
00:17:05,459 --> 00:17:08,640
complex Dom using app in child then

401
00:17:08,640 --> 00:17:11,220
complex Dom modifications using inner

402
00:17:11,220 --> 00:17:14,670
HTML and then finally complex Dom

403
00:17:14,670 --> 00:17:17,189
modifications using document fragment

404
00:17:17,189 --> 00:17:18,839
right so everyone pretty much knows

405
00:17:18,839 --> 00:17:21,930
those methods appendchild enter HTML

406
00:17:21,930 --> 00:17:23,910
what I want to call your attention to is

407
00:17:23,910 --> 00:17:26,130
the amount of time that it required to

408
00:17:26,130 --> 00:17:28,740
perform a simple Dom manipulation versus

409
00:17:28,740 --> 00:17:31,260
a complex Dom manipulation that's point

410
00:17:31,260 --> 00:17:33,960
zero two six milliseconds compared to

411
00:17:33,960 --> 00:17:37,380
point zero five four milliseconds now I

412
00:17:37,380 --> 00:17:40,020
know I know I know

413
00:17:40,020 --> 00:17:42,480
point zero two six milliseconds is just

414
00:17:42,480 --> 00:17:43,830
not that much time

415
00:17:43,830 --> 00:17:48,110
right it's it's nanoseconds right but

416
00:17:48,110 --> 00:17:51,720
those will add up over time as your Dom

417
00:17:51,720 --> 00:17:53,460
gets more and more complex and we're

418
00:17:53,460 --> 00:17:55,260
actually gonna see that happen here in

419
00:17:55,260 --> 00:17:59,909
just a minute so now we know surprise I

420
00:17:59,909 --> 00:18:01,529
mean like this is almost common sense

421
00:18:01,529 --> 00:18:03,990
simple Dom manipulations require less

422
00:18:03,990 --> 00:18:06,960
time time than complex ones but that can

423
00:18:06,960 --> 00:18:10,350
lead to some interesting choices about

424
00:18:10,350 --> 00:18:15,090
how you write your code now like this is

425
00:18:15,090 --> 00:18:22,590
all most unintelligent them whatever but

426
00:18:22,590 --> 00:18:24,539
you're gonna make some different

427
00:18:24,539 --> 00:18:27,059
decisions when you optimize for

428
00:18:27,059 --> 00:18:30,029
performance versus optimizing for code

429
00:18:30,029 --> 00:18:32,580
maintainability or code legibility in

430
00:18:32,580 --> 00:18:35,460
this particular case I've reduced the

431
00:18:35,460 --> 00:18:39,600
number of elements by 30% and by

432
00:18:39,600 --> 00:18:41,460
reducing the number of elements as that

433
00:18:41,460 --> 00:18:44,279
multiplies out over the broad scope of

434
00:18:44,279 --> 00:18:46,950
an application that conservation of

435
00:18:46,950 --> 00:18:48,570
elements is going to help me

436
00:18:48,570 --> 00:18:50,519
tremendously so in this case it is

437
00:18:50,519 --> 00:18:54,230
functionally equivalent but 30% fewer

438
00:18:54,230 --> 00:18:59,610
actual Dom elements takeaway reduce your

439
00:18:59,610 --> 00:19:03,929
element count all right so let's talk

440
00:19:03,929 --> 00:19:06,659
about another little idiosyncrasy of Dom

441
00:19:06,659 --> 00:19:08,669
manipulation and many of you may be

442
00:19:08,669 --> 00:19:10,799
familiar with this kind of technique

443
00:19:10,799 --> 00:19:12,690
before layout thrashing is basically

444
00:19:12,690 --> 00:19:17,250
when you set a CSS property at the same

445
00:19:17,250 --> 00:19:19,200
time as on the opposite side you're

446
00:19:19,200 --> 00:19:22,559
reading the CSS property so let's see

447
00:19:22,559 --> 00:19:25,500
how this actually works here right so I

448
00:19:25,500 --> 00:19:28,169
got another video and in this particular

449
00:19:28,169 --> 00:19:30,120
one you'll see that on the left hand

450
00:19:30,120 --> 00:19:33,510
side I am setting my style to on the

451
00:19:33,510 --> 00:19:35,220
right-hand side of the equal sign and

452
00:19:35,220 --> 00:19:37,620
read a command so I'm just looping

453
00:19:37,620 --> 00:19:39,059
through again and again and again

454
00:19:39,059 --> 00:19:42,539
setting to a read in the second case and

455
00:19:42,539 --> 00:19:45,570
this one I'm looping through I'm reading

456
00:19:45,570 --> 00:19:47,610
all of the values first and then I have

457
00:19:47,610 --> 00:19:50,940
a separate loop to set right now that

458
00:19:50,940 --> 00:19:52,860
seems like a relatively small change and

459
00:19:52,860 --> 00:19:54,510
again from a legibility or code

460
00:19:54,510 --> 00:19:56,519
maintainability perspective it all

461
00:19:56,519 --> 00:19:58,859
seems like the first is better so what

462
00:19:58,859 --> 00:20:01,559
i'm doing here is first i'm going to

463
00:20:01,559 --> 00:20:03,779
perform an action where it lets you know

464
00:20:03,779 --> 00:20:06,989
that one i am using the thrashing so i'm

465
00:20:06,989 --> 00:20:10,529
actually the very first one I read to my

466
00:20:10,529 --> 00:20:12,629
set and in the second one I do the two

467
00:20:12,629 --> 00:20:15,330
four loops now look at the comparison

468
00:20:15,330 --> 00:20:18,629
here with thrashing that took nearly

469
00:20:18,629 --> 00:20:21,690
four seconds without thrashing it took

470
00:20:21,690 --> 00:20:24,809
only 56 milliseconds right that's a

471
00:20:24,809 --> 00:20:27,659
eight fold improvement something like

472
00:20:27,659 --> 00:20:30,539
that just by changing the order by which

473
00:20:30,539 --> 00:20:37,589
we set and read so real quick here just

474
00:20:37,589 --> 00:20:41,009
to reinforce it bad don't read it and

475
00:20:41,009 --> 00:20:46,079
set it in the same line good read it

476
00:20:46,079 --> 00:20:51,659
first set it later batch your layout

477
00:20:51,659 --> 00:20:55,409
operations all the read at once all the

478
00:20:55,409 --> 00:20:59,729
set at once okay let's talk about fast

479
00:20:59,729 --> 00:21:02,219
list scrolling so this is essentially

480
00:21:02,219 --> 00:21:04,649
when you've got thousands of elements on

481
00:21:04,649 --> 00:21:06,989
a page and you need to be able to scroll

482
00:21:06,989 --> 00:21:08,489
through them quickly in an infinite

483
00:21:08,489 --> 00:21:11,489
scroll think here of something like I

484
00:21:11,489 --> 00:21:13,349
don't know Facebook right where you're

485
00:21:13,349 --> 00:21:14,820
just kind of scrolling forever and ever

486
00:21:14,820 --> 00:21:16,440
and ever or Twitter or whatever your

487
00:21:16,440 --> 00:21:19,799
favorite social media network is so in

488
00:21:19,799 --> 00:21:23,489
this particular one in the first one I

489
00:21:23,489 --> 00:21:25,649
am going to use just those I think it's

490
00:21:25,649 --> 00:21:27,359
I think actually is a thousand elements

491
00:21:27,359 --> 00:21:29,159
and I'm just gonna scroll through them

492
00:21:29,159 --> 00:21:31,049
without any kind of optimizations

493
00:21:31,049 --> 00:21:33,389
whatsoever it's just Dom elements on the

494
00:21:33,389 --> 00:21:36,659
page iterating down in the second case

495
00:21:36,659 --> 00:21:38,839
I'm going to use virtualization

496
00:21:38,839 --> 00:21:40,799
virtualization is a technique where we

497
00:21:40,799 --> 00:21:43,739
essentially simplify the Dom by removing

498
00:21:43,739 --> 00:21:47,070
elements that are before and after the

499
00:21:47,070 --> 00:21:49,529
visible screen so that there are less

500
00:21:49,529 --> 00:21:51,839
elements on the page and remember back

501
00:21:51,839 --> 00:21:54,389
before we had our lesson about when

502
00:21:54,389 --> 00:21:55,889
there were fewer elements on the page

503
00:21:55,889 --> 00:21:58,739
when we have a simple Dom it's the the

504
00:21:58,739 --> 00:22:00,749
the actual browser is faster when we

505
00:22:00,749 --> 00:22:02,940
have a complex Dom the browser tends to

506
00:22:02,940 --> 00:22:05,690
be slower this is that same lesson

507
00:22:05,690 --> 00:22:07,829
multiplied out in a way that you can

508
00:22:07,829 --> 00:22:09,659
actually see it in a way that the user

509
00:22:09,659 --> 00:22:10,260
would

510
00:22:10,260 --> 00:22:12,929
so here we are we're actually launching

511
00:22:12,929 --> 00:22:16,230
it up the in this particular case I just

512
00:22:16,230 --> 00:22:18,179
got a little image of some fruit and

513
00:22:18,179 --> 00:22:20,370
you'll see I'm kinda through here it

514
00:22:20,370 --> 00:22:21,990
almost looks like the screen is

515
00:22:21,990 --> 00:22:23,780
disappearing it's just going blank

516
00:22:23,780 --> 00:22:26,880
that's not like a quirk of the video

517
00:22:26,880 --> 00:22:29,340
that's because the elements the the

518
00:22:29,340 --> 00:22:31,380
browser itself isn't able to keep up

519
00:22:31,380 --> 00:22:33,299
with the paint and so they just

520
00:22:33,299 --> 00:22:35,549
disappear as I quickly quickly quickly

521
00:22:35,549 --> 00:22:37,470
move back and forth in it right and

522
00:22:37,470 --> 00:22:39,690
sometimes they disappear for seconds at

523
00:22:39,690 --> 00:22:42,720
a time so in this next one I'm actually

524
00:22:42,720 --> 00:22:44,549
gonna launch it again and this time I'm

525
00:22:44,549 --> 00:22:47,100
gonna use a virtualization so I'm only

526
00:22:47,100 --> 00:22:50,340
keeping in memory elements that are one

527
00:22:50,340 --> 00:22:53,370
or two maybe three screens before or

528
00:22:53,370 --> 00:22:56,730
after the visible screen right in this

529
00:22:56,730 --> 00:22:59,130
particular case I'm think what I was

530
00:22:59,130 --> 00:23:01,169
using here was when Jay s is my

531
00:23:01,169 --> 00:23:03,360
virtualization engine when Jay s happens

532
00:23:03,360 --> 00:23:04,980
to have really good list scrolling but

533
00:23:04,980 --> 00:23:06,299
there are lots of other frameworks that

534
00:23:06,299 --> 00:23:09,900
provide virtualization for it alright

535
00:23:09,900 --> 00:23:13,980
let's get it up here one of the other

536
00:23:13,980 --> 00:23:15,299
things that I want you to know is here

537
00:23:15,299 --> 00:23:16,500
is one of the other tricks of

538
00:23:16,500 --> 00:23:20,280
virtualization is that as the as the

539
00:23:20,280 --> 00:23:22,049
browser gets to a place where it no

540
00:23:22,049 --> 00:23:24,000
longer has those elements in memory what

541
00:23:24,000 --> 00:23:25,470
it will start to do you see those gray

542
00:23:25,470 --> 00:23:28,410
gray boxes essentially what it's doing

543
00:23:28,410 --> 00:23:31,169
is putting in dummy elements so that you

544
00:23:31,169 --> 00:23:33,960
feel like the the application is able to

545
00:23:33,960 --> 00:23:35,669
keep up with it think here I'll use

546
00:23:35,669 --> 00:23:37,710
Facebook again as an example when you

547
00:23:37,710 --> 00:23:39,570
first load facebook on your mobile phone

548
00:23:39,570 --> 00:23:42,179
it's got a couple of placeholder kind of

549
00:23:42,179 --> 00:23:44,880
posts in there same idea this is really

550
00:23:44,880 --> 00:23:46,890
all about of improving the perception of

551
00:23:46,890 --> 00:23:51,780
performance and when we measure this out

552
00:23:51,780 --> 00:23:53,940
we actually measured the memory of these

553
00:23:53,940 --> 00:23:55,919
guys the virtualized list

554
00:23:55,919 --> 00:23:58,669
less than a hundred megabytes of memory

555
00:23:58,669 --> 00:24:01,080
for that particular application at

556
00:24:01,080 --> 00:24:03,870
runtime the non-virtualized list over

557
00:24:03,870 --> 00:24:06,210
was that nearly three hundred and fifty

558
00:24:06,210 --> 00:24:09,840
megabytes and again we see a strong

559
00:24:09,840 --> 00:24:12,120
correlation between the memory

560
00:24:12,120 --> 00:24:14,160
consumption and the actual performance

561
00:24:14,160 --> 00:24:17,130
itself and so any time that you find

562
00:24:17,130 --> 00:24:18,299
yourself in a position where you're

563
00:24:18,299 --> 00:24:21,090
trying to measure for performance and

564
00:24:21,090 --> 00:24:22,429
trying to optimize for

565
00:24:22,429 --> 00:24:25,009
formants measuring frames per second

566
00:24:25,009 --> 00:24:27,860
great you should do that but as a proxy

567
00:24:27,860 --> 00:24:29,779
it can sometimes be helpful to also look

568
00:24:29,779 --> 00:24:33,320
at your memory consumption as well all

569
00:24:33,320 --> 00:24:35,749
right take away use virtualization when

570
00:24:35,749 --> 00:24:36,320
you can

571
00:24:36,320 --> 00:24:38,450
lots of frameworks do it my advice don't

572
00:24:38,450 --> 00:24:39,860
try to do this yourself writing

573
00:24:39,860 --> 00:24:41,960
virtualization is hard it's super hard

574
00:24:41,960 --> 00:24:50,450
just use another framework ok images so

575
00:24:50,450 --> 00:24:52,759
here's a funny one this is like

576
00:24:52,759 --> 00:24:54,950
completely this this blows my mind when

577
00:24:54,950 --> 00:24:56,929
I see this one it's it's totally weird

578
00:24:56,929 --> 00:24:59,659
so I didn't know how long have CSS

579
00:24:59,659 --> 00:25:01,460
Graydon's gradients been around this is

580
00:25:01,460 --> 00:25:05,149
like can anyone remember 2008 I don't

581
00:25:05,149 --> 00:25:07,070
know something like that CSS gradients

582
00:25:07,070 --> 00:25:09,499
are super super helpful they allow us to

583
00:25:09,499 --> 00:25:10,820
be a little bit more responsive in our

584
00:25:10,820 --> 00:25:13,070
design it we don't have to cut like a

585
00:25:13,070 --> 00:25:14,240
one by one

586
00:25:14,240 --> 00:25:16,999
you know pixel tile to kind of grayed

587
00:25:16,999 --> 00:25:20,990
across but just like before when we were

588
00:25:20,990 --> 00:25:22,639
looking at how we might reduce our

589
00:25:22,639 --> 00:25:24,259
overall element count there are

590
00:25:24,259 --> 00:25:26,149
different decisions that you might make

591
00:25:26,149 --> 00:25:28,100
when you're optimizing for performance

592
00:25:28,100 --> 00:25:30,470
versus when you're maintaining for or

593
00:25:30,470 --> 00:25:31,369
when you're writing for code

594
00:25:31,369 --> 00:25:33,980
maintainability so in this particular

595
00:25:33,980 --> 00:25:36,649
case I've got two objects the first

596
00:25:36,649 --> 00:25:39,320
object just uses a regular old CSS

597
00:25:39,320 --> 00:25:42,799
gradient the second object uses a PNG

598
00:25:42,799 --> 00:25:45,919
file to create my gradient alright what

599
00:25:45,919 --> 00:25:47,210
I'm gonna do is I'm gonna animate these

600
00:25:47,210 --> 00:25:49,909
guys and when I animate these guys I'm

601
00:25:49,909 --> 00:25:51,619
gonna use the chrome dev tools to

602
00:25:51,619 --> 00:25:55,009
measure frames per second and I hope

603
00:25:55,009 --> 00:25:56,779
that many of you are familiar with the

604
00:25:56,779 --> 00:25:58,580
chrome dev tools performance

605
00:25:58,580 --> 00:26:01,970
optimization tools if you're not the

606
00:26:01,970 --> 00:26:06,200
quick rule here is that tall bars up

607
00:26:06,200 --> 00:26:10,039
there or bad low bars are good right so

608
00:26:10,039 --> 00:26:12,139
in the first case where you see all

609
00:26:12,139 --> 00:26:15,019
those giant green skyscrapers that's

610
00:26:15,019 --> 00:26:17,389
what I'm animating the CSS gradient on

611
00:26:17,389 --> 00:26:19,820
the right hand side when I'm animating

612
00:26:19,820 --> 00:26:22,820
the image all those low bars that's when

613
00:26:22,820 --> 00:26:26,559
I'm animating the bitmapped ping like

614
00:26:26,559 --> 00:26:29,210
what what's up with that

615
00:26:29,210 --> 00:26:31,600
like seriously what's up with that so

616
00:26:31,600 --> 00:26:33,769
here's what I think is actually

617
00:26:33,769 --> 00:26:35,929
happening right and I like here

618
00:26:35,929 --> 00:26:37,309
actually you no need to call my friends

619
00:26:37,309 --> 00:26:39,019
over at Google and verify this but

620
00:26:39,019 --> 00:26:41,419
here's what I think is happening when

621
00:26:41,419 --> 00:26:44,330
you animate that CSS gradient every time

622
00:26:44,330 --> 00:26:46,700
it moves a frame over it needs to redraw

623
00:26:46,700 --> 00:26:49,429
the gradient each time when it's

624
00:26:49,429 --> 00:26:52,220
animating the bitmap or the ping in this

625
00:26:52,220 --> 00:26:54,799
particular case that already exists it

626
00:26:54,799 --> 00:26:56,929
doesn't need to redraw it every time and

627
00:26:56,929 --> 00:26:59,360
so you get better animation when you're

628
00:26:59,360 --> 00:27:02,110
moving the already in memory image

629
00:27:02,110 --> 00:27:05,240
compared to what's essentially creating

630
00:27:05,240 --> 00:27:07,789
an image for each for each frame of the

631
00:27:07,789 --> 00:27:12,409
CSS and so if there's a kind of a a bad

632
00:27:12,409 --> 00:27:14,779
version of this again like can't believe

633
00:27:14,779 --> 00:27:17,240
I'm putting this up there bad CSS

634
00:27:17,240 --> 00:27:19,129
gradients but somehow that is the case

635
00:27:19,129 --> 00:27:22,029
when you're optimizing for performance

636
00:27:22,029 --> 00:27:26,059
versus blow your mind good why in the

637
00:27:26,059 --> 00:27:28,100
world is this but it once again when

638
00:27:28,100 --> 00:27:29,990
you're optimizing for performance you're

639
00:27:29,990 --> 00:27:31,850
going to make different decisions than

640
00:27:31,850 --> 00:27:33,909
you would otherwise

641
00:27:33,909 --> 00:27:38,840
all right so use images Oh garbage

642
00:27:38,840 --> 00:27:41,659
collection everybody loves the garbage

643
00:27:41,659 --> 00:27:43,249
collector he takes all of our dirty

644
00:27:43,249 --> 00:27:46,999
memory away so garbage collectors have

645
00:27:46,999 --> 00:27:49,639
been around for you know since browsers

646
00:27:49,639 --> 00:27:51,499
were around and and generally they're

647
00:27:51,499 --> 00:27:53,990
pretty efficient but when you're dealing

648
00:27:53,990 --> 00:27:56,090
with a mobile application and I would

649
00:27:56,090 --> 00:27:58,009
say that this is particularly poignant

650
00:27:58,009 --> 00:28:01,700
for hybrid applications where the app

651
00:28:01,700 --> 00:28:03,559
itself is going to be a single page

652
00:28:03,559 --> 00:28:06,230
application that rarely shuts down

653
00:28:06,230 --> 00:28:08,720
memory management becomes really really

654
00:28:08,720 --> 00:28:12,230
important and that garbage collector it

655
00:28:12,230 --> 00:28:13,730
does run automatically but you can get

656
00:28:13,730 --> 00:28:16,820
yourself into a bad spot where it's um

657
00:28:16,820 --> 00:28:20,539
it's it's unable to do its job so here's

658
00:28:20,539 --> 00:28:21,830
what we're gonna do I want to kind of

659
00:28:21,830 --> 00:28:23,269
show this in action and in this

660
00:28:23,269 --> 00:28:27,590
particular one hit play here what I'm

661
00:28:27,590 --> 00:28:28,909
going to do is I'm going to create a

662
00:28:28,909 --> 00:28:31,129
bunch of elements and I'm going to

663
00:28:31,129 --> 00:28:33,289
attach event handlers to those elements

664
00:28:33,289 --> 00:28:34,909
just in the loops you see there add

665
00:28:34,909 --> 00:28:37,249
event listener and then I'm just going

666
00:28:37,249 --> 00:28:38,990
to destroy them by saying enter HTML

667
00:28:38,990 --> 00:28:41,659
equals to blank what that means is that

668
00:28:41,659 --> 00:28:45,470
as I destroy those my event handler is

669
00:28:45,470 --> 00:28:48,139
still sticking around in memory and the

670
00:28:48,139 --> 00:28:49,560
garbage collector has a

671
00:28:49,560 --> 00:28:51,930
really tough time getting back to it so

672
00:28:51,930 --> 00:28:52,950
what I'm gonna do here is I'm gonna

673
00:28:52,950 --> 00:28:55,260
start running this guy and once again in

674
00:28:55,260 --> 00:28:56,940
our friend chrome dev tools I want you

675
00:28:56,940 --> 00:28:58,410
to notice once I start running it

676
00:28:58,410 --> 00:29:01,500
there's gonna be a ramp that blue ramp

677
00:29:01,500 --> 00:29:04,770
that starts to get bigger and bigger and

678
00:29:04,770 --> 00:29:13,020
bigger bigger again that is death that

679
00:29:13,020 --> 00:29:15,150
is death for your application over time

680
00:29:15,150 --> 00:29:18,780
as memory just balloons out of scale now

681
00:29:18,780 --> 00:29:21,840
granted here I am creating thousands and

682
00:29:21,840 --> 00:29:24,710
thousands and thousands over again right

683
00:29:24,710 --> 00:29:27,570
and you might think to yourself well and

684
00:29:27,570 --> 00:29:28,950
my web application

685
00:29:28,950 --> 00:29:30,450
I'm never gonna be creating these

686
00:29:30,450 --> 00:29:31,950
thousands of elements again and again

687
00:29:31,950 --> 00:29:35,250
and again but but you actually you are

688
00:29:35,250 --> 00:29:36,930
especially if you've got a single page

689
00:29:36,930 --> 00:29:39,540
application that guy could stay open for

690
00:29:39,540 --> 00:29:41,460
a long time you may never shut it down

691
00:29:41,460 --> 00:29:44,910
for months and as the memory grows and

692
00:29:44,910 --> 00:29:46,770
those event handlers stick around behind

693
00:29:46,770 --> 00:29:50,460
you're basically just signing up for a

694
00:29:50,460 --> 00:29:59,680
browser crash at some point so bad here

695
00:29:59,690 --> 00:30:00,960
eventlistener

696
00:30:00,960 --> 00:30:02,970
still hanging around even after we

697
00:30:02,970 --> 00:30:07,260
destroyed our element good be

698
00:30:07,260 --> 00:30:09,570
responsible boys and girls destroy your

699
00:30:09,570 --> 00:30:12,630
event handlers right remove event hit

700
00:30:12,630 --> 00:30:15,360
event listener right there then

701
00:30:15,360 --> 00:30:20,180
responsibly remove your child all right

702
00:30:20,180 --> 00:30:22,950
now while we're on the subject of event

703
00:30:22,950 --> 00:30:25,110
listeners let's talk about how we can

704
00:30:25,110 --> 00:30:27,480
actually not just irresponsible create

705
00:30:27,480 --> 00:30:29,520
and destroy them but also how we can

706
00:30:29,520 --> 00:30:32,580
minimize the total number of them now I

707
00:30:32,580 --> 00:30:36,210
don't know about you guys but um I often

708
00:30:36,210 --> 00:30:39,570
like I go out I do a query selector all

709
00:30:39,570 --> 00:30:41,640
or a dollar sign dollar sign I go get a

710
00:30:41,640 --> 00:30:43,080
big collection of elements that loop

711
00:30:43,080 --> 00:30:44,850
through them and as I loop through them

712
00:30:44,850 --> 00:30:47,010
I just add in an event handler teach one

713
00:30:47,010 --> 00:30:49,650
on click event handler on click event

714
00:30:49,650 --> 00:30:52,740
handler and what that ends up doing is

715
00:30:52,740 --> 00:30:54,590
that ends up creating a rubber-stamp

716
00:30:54,590 --> 00:30:57,540
duplicate of every function again and

717
00:30:57,540 --> 00:31:00,530
again and again and again and that

718
00:31:00,530 --> 00:31:03,030
multiplicity that that giant collection

719
00:31:03,030 --> 00:31:03,299
of

720
00:31:03,299 --> 00:31:05,940
handlers are once again just consuming

721
00:31:05,940 --> 00:31:09,600
more memory and so what I want you to to

722
00:31:09,600 --> 00:31:11,519
encourage you to do here is rather than

723
00:31:11,519 --> 00:31:13,769
create an event listener or event

724
00:31:13,769 --> 00:31:17,279
handler for each element instead think

725
00:31:17,279 --> 00:31:20,190
about using a single event handler for

726
00:31:20,190 --> 00:31:22,289
all of your objects within a node tree

727
00:31:22,289 --> 00:31:23,730
let me let me kind of explain what I

728
00:31:23,730 --> 00:31:26,159
mean here a little bit so one two three

729
00:31:26,159 --> 00:31:28,590
four and five those little elements down

730
00:31:28,590 --> 00:31:30,779
at the bottom they've all got a common

731
00:31:30,779 --> 00:31:34,889
ancestor in this case the dude right so

732
00:31:34,889 --> 00:31:37,320
that dude through the magic of event

733
00:31:37,320 --> 00:31:40,230
bubbling receives all the same events

734
00:31:40,230 --> 00:31:42,679
that one two three four and five receive

735
00:31:42,679 --> 00:31:44,909
so what I want to encourage you to do is

736
00:31:44,909 --> 00:31:47,399
think about how you can use event

737
00:31:47,399 --> 00:31:49,259
handlers or event listeners on the dude

738
00:31:49,259 --> 00:31:52,799
to respond to events that occur on its

739
00:31:52,799 --> 00:31:56,399
children so here's what we're gonna do

740
00:31:56,399 --> 00:32:02,279
we're actually show this in action so

741
00:32:02,279 --> 00:32:04,220
I'm gonna have a couple of different

742
00:32:04,220 --> 00:32:08,070
scenarios here in scenario one I'm going

743
00:32:08,070 --> 00:32:11,279
to have one event handler for each

744
00:32:11,279 --> 00:32:15,960
element in scenario two I'm going to use

745
00:32:15,960 --> 00:32:19,129
event bubbling and then attach a

746
00:32:19,129 --> 00:32:22,889
essentially a switch case to my event

747
00:32:22,889 --> 00:32:25,259
handler to say what did you click on

748
00:32:25,259 --> 00:32:27,539
oh you clicked on ancestor or rather

749
00:32:27,539 --> 00:32:31,470
child a then do this and then in case

750
00:32:31,470 --> 00:32:34,320
three I'm going to have that same kind

751
00:32:34,320 --> 00:32:37,529
of one-to-one relationship between event

752
00:32:37,529 --> 00:32:40,289
listeners and objects but this time I'm

753
00:32:40,289 --> 00:32:42,330
going to use a common function for all

754
00:32:42,330 --> 00:32:45,149
of them so here's what I've done I've

755
00:32:45,149 --> 00:32:46,350
just executed the first of those

756
00:32:46,350 --> 00:32:48,869
scenarios that is one event handler per

757
00:32:48,869 --> 00:32:51,720
element and I've taken a little snapshot

758
00:32:51,720 --> 00:32:55,820
of memory now I'm executing scenario two

759
00:32:55,820 --> 00:32:58,379
this is the one with event bubbling

760
00:32:58,379 --> 00:33:01,679
where we use a switch case on the top

761
00:33:01,679 --> 00:33:05,119
level element to identify the actual

762
00:33:05,119 --> 00:33:07,109
element that it was clicked upon and

763
00:33:07,109 --> 00:33:09,720
then okay we're taking that snap shot

764
00:33:09,720 --> 00:33:12,509
now and now snap shot three where we

765
00:33:12,509 --> 00:33:15,509
actually have an event listener for

766
00:33:15,509 --> 00:33:16,590
every element

767
00:33:16,590 --> 00:33:19,890
but it all points to the same common

768
00:33:19,890 --> 00:33:22,110
eventhandler the same common function

769
00:33:22,110 --> 00:33:25,110
what I want to point to in this we're

770
00:33:25,110 --> 00:33:27,000
gonna kind of drag it around here I want

771
00:33:27,000 --> 00:33:29,640
you to take a look at the retained size

772
00:33:29,640 --> 00:33:32,309
that's that far column right there so

773
00:33:32,309 --> 00:33:35,520
look at that 257 K or 8% of the total

774
00:33:35,520 --> 00:33:38,840
memory is dedicated to the Dom okay

775
00:33:38,840 --> 00:33:41,940
snapshot - this is the one where we use

776
00:33:41,940 --> 00:33:46,200
the one-to-one relationship oh man that

777
00:33:46,200 --> 00:33:50,610
was 468 K and then snapshot one this is

778
00:33:50,610 --> 00:33:53,460
the one oh that's that that's the bad

779
00:33:53,460 --> 00:33:55,380
one right that's one two one one event

780
00:33:55,380 --> 00:33:58,679
handler per object and here we can see

781
00:33:58,679 --> 00:34:00,539
I'm actually gonna open it up and you'll

782
00:34:00,539 --> 00:34:02,610
be able to see one event handler per

783
00:34:02,610 --> 00:34:08,310
object there there it is that native

784
00:34:08,310 --> 00:34:10,710
function right there that's one per

785
00:34:10,710 --> 00:34:13,290
object and then in snapshots one and

786
00:34:13,290 --> 00:34:15,179
three those are the ones where I've got

787
00:34:15,179 --> 00:34:18,839
a common event handler for each element

788
00:34:18,839 --> 00:34:23,760
right through that I realize what's here

789
00:34:23,760 --> 00:34:27,290
I'll rewind it a bit so you can see it

790
00:34:27,290 --> 00:34:31,800
mmm there we are the 257 there right it

791
00:34:31,800 --> 00:34:34,470
is about half of the retained memory

792
00:34:34,470 --> 00:34:37,589
size when I use either a common event

793
00:34:37,589 --> 00:34:40,409
handler for each event listener or I do

794
00:34:40,409 --> 00:34:44,099
the handler on the parent element when

795
00:34:44,099 --> 00:34:46,220
this this it's helpful if you see a

796
00:34:46,220 --> 00:34:49,139
quick little code example here right so

797
00:34:49,139 --> 00:34:51,210
for this one bad

798
00:34:51,210 --> 00:34:53,429
I'm just doing a loop I'm attaching a

799
00:34:53,429 --> 00:34:56,849
single an event handler to each object

800
00:34:56,849 --> 00:34:59,190
and each of those event handlers is

801
00:34:59,190 --> 00:35:01,580
essentially a clone of the one before it

802
00:35:01,580 --> 00:35:05,369
whereas good I'm attaching an event

803
00:35:05,369 --> 00:35:08,369
listener to the parent and in this case

804
00:35:08,369 --> 00:35:11,190
I just use an if statement I could be a

805
00:35:11,190 --> 00:35:12,960
little bit more sophisticated use a

806
00:35:12,960 --> 00:35:14,550
switch statement to figure out which

807
00:35:14,550 --> 00:35:17,670
child I clicked on again that resulted

808
00:35:17,670 --> 00:35:19,830
in about half of the retained memory

809
00:35:19,830 --> 00:35:22,380
size a win not only for memory but also

810
00:35:22,380 --> 00:35:26,640
for your performance so take advantage

811
00:35:26,640 --> 00:35:29,710
of event bubbling

812
00:35:29,720 --> 00:35:32,810
pay attention to memory leaks

813
00:35:32,810 --> 00:35:36,720
okay memory leaks so this is kind of a

814
00:35:36,720 --> 00:35:38,910
variation of what we saw earlier with

815
00:35:38,910 --> 00:35:41,280
the event that we left kind of hanging

816
00:35:41,280 --> 00:35:42,840
on right where we created a lot of

817
00:35:42,840 --> 00:35:44,460
elements destroy them and left an event

818
00:35:44,460 --> 00:35:48,480
handler sticking around so in this

819
00:35:48,480 --> 00:35:51,600
particular one what I'm going to do what

820
00:35:51,600 --> 00:35:53,730
I'm going to do is I'm going to cycle

821
00:35:53,730 --> 00:35:55,530
through and create a bunch of elements

822
00:35:55,530 --> 00:35:57,540
and then for those elements I'm going to

823
00:35:57,540 --> 00:36:00,930
keep each one of the elements scoped to

824
00:36:00,930 --> 00:36:05,310
the private function right and this

825
00:36:05,310 --> 00:36:07,110
first time around because it's scoped to

826
00:36:07,110 --> 00:36:10,170
the private function those functions and

827
00:36:10,170 --> 00:36:12,930
those objects will will will be

828
00:36:12,930 --> 00:36:14,970
destroyed when the function itself is

829
00:36:14,970 --> 00:36:17,400
destroyed and so here we're gonna launch

830
00:36:17,400 --> 00:36:28,410
it up there we go here it comes

831
00:36:28,420 --> 00:36:31,330
little heap snapshot there alright and

832
00:36:31,330 --> 00:36:33,610
so as I'm navigating from page to page

833
00:36:33,610 --> 00:36:35,350
what it's essentially doing is creating

834
00:36:35,350 --> 00:36:37,690
those objects destroying those objects

835
00:36:37,690 --> 00:36:40,030
creating those objects destroying those

836
00:36:40,030 --> 00:36:43,210
objects right and as it does so because

837
00:36:43,210 --> 00:36:45,010
the objects are created as part of the

838
00:36:45,010 --> 00:36:47,410
private function the objects are

839
00:36:47,410 --> 00:36:49,210
destroyed with a lifetime of the

840
00:36:49,210 --> 00:36:54,160
function itself and so here what I want

841
00:36:54,160 --> 00:36:56,620
you to see look it's a nice clean Dom

842
00:36:56,620 --> 00:36:59,560
here there are no unparent 'add div

843
00:36:59,560 --> 00:37:02,080
elements those are all white white is

844
00:37:02,080 --> 00:37:07,000
good you like white all right now what

845
00:37:07,000 --> 00:37:09,190
I'm gonna do is I'm gonna switch it up a

846
00:37:09,190 --> 00:37:11,800
little bit this time just by removing

847
00:37:11,800 --> 00:37:14,080
the VAR declaration from within the

848
00:37:14,080 --> 00:37:16,570
function scope I'm immediately putting

849
00:37:16,570 --> 00:37:18,220
each one of the div elements into the

850
00:37:18,220 --> 00:37:20,350
global scope because they are in the

851
00:37:20,350 --> 00:37:23,740
global scope they are not destroyed when

852
00:37:23,740 --> 00:37:26,380
you destroy the function as well and so

853
00:37:26,380 --> 00:37:29,580
those will end up hanging around as

854
00:37:29,580 --> 00:37:32,500
unparent ated Dom fragments sticking

855
00:37:32,500 --> 00:37:34,030
around in my application so here we go

856
00:37:34,030 --> 00:37:40,960
we're gonna do the navigation again I'm

857
00:37:40,960 --> 00:37:42,550
gonna fast forward just a little bit

858
00:37:42,550 --> 00:37:48,920
there we go

859
00:37:48,930 --> 00:37:51,010
navigate back and forth once again

860
00:37:51,010 --> 00:37:53,410
creating destroying each of the

861
00:37:53,410 --> 00:37:55,900
functions but this time because all of

862
00:37:55,900 --> 00:37:57,280
my elements are being created in the

863
00:37:57,280 --> 00:37:59,380
global scope when I create an destroy my

864
00:37:59,380 --> 00:38:01,480
functions my objects are still sticking

865
00:38:01,480 --> 00:38:03,160
around my Dom objects are still sticking

866
00:38:03,160 --> 00:38:08,170
around all right let the snapshot do its

867
00:38:08,170 --> 00:38:12,430
computational powers and when we expose

868
00:38:12,430 --> 00:38:15,730
this look at all of that read each one

869
00:38:15,730 --> 00:38:17,980
of those objects that's marked as kind

870
00:38:17,980 --> 00:38:20,500
of with a pinkish red background these

871
00:38:20,500 --> 00:38:22,570
are objects that are just polluting your

872
00:38:22,570 --> 00:38:25,260
Dom taking up space taking up memory and

873
00:38:25,260 --> 00:38:30,370
dragging you down right so a good kind

874
00:38:30,370 --> 00:38:32,740
of check for yourself is run your

875
00:38:32,740 --> 00:38:34,660
application for a little while go back

876
00:38:34,660 --> 00:38:37,120
into chrome dev tools see if you can

877
00:38:37,120 --> 00:38:39,570
find into these objects that are red and

878
00:38:39,570 --> 00:38:42,230
try and find out where those get created

879
00:38:42,230 --> 00:38:44,930
how you can destroy them because over

880
00:38:44,930 --> 00:38:46,550
time they're just going to increase your

881
00:38:46,550 --> 00:38:48,800
overall memory footprint and ultimately

882
00:38:48,800 --> 00:38:52,630
drag down your performance as well so

883
00:38:52,630 --> 00:38:56,810
bad in this particular case we've got

884
00:38:56,810 --> 00:39:00,190
the element created in the global scope

885
00:39:00,190 --> 00:39:04,010
outside of the function good we're

886
00:39:04,010 --> 00:39:05,720
actually creating the element within the

887
00:39:05,720 --> 00:39:07,910
scope of the function and so it gets

888
00:39:07,910 --> 00:39:12,440
destroyed with the function destroy all

889
00:39:12,440 --> 00:39:18,320
your unused objects so we're getting to

890
00:39:18,320 --> 00:39:19,040
the end of it

891
00:39:19,040 --> 00:39:22,700
I beg beg of you if you remember

892
00:39:22,700 --> 00:39:27,500
anything about this talk anyone can

893
00:39:27,500 --> 00:39:32,119
build slow apps you can you can that guy

894
00:39:32,119 --> 00:39:35,780
has I know he has back there you can do

895
00:39:35,780 --> 00:39:36,350
it too

896
00:39:36,350 --> 00:39:38,900
anyone can build slow apps but you don't

897
00:39:38,900 --> 00:39:42,200
have to like go into it thinking about

898
00:39:42,200 --> 00:39:44,660
performance first before it drags you

899
00:39:44,660 --> 00:39:48,140
down in the end thank you so much once

900
00:39:48,140 --> 00:39:50,119
again Ryan J Salva come talk to me

901
00:39:50,119 --> 00:39:51,200
afterwards I'd love to talk to you about

902
00:39:51,200 --> 00:39:53,090
animation and UI controls and all the

903
00:39:53,090 --> 00:39:54,440
experiments that I didn't get to share

904
00:39:54,440 --> 00:39:58,609
with you today thank you so much thank

905
00:39:58,609 --> 00:40:01,349
you

906
00:40:01,359 --> 00:40:02,410


907
00:40:02,410 --> 00:40:02,420
you

908
00:40:02,420 --> 00:40:23,940
[Music]

