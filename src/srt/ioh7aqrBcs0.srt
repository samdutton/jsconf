1
00:00:00,620 --> 00:00:15,650

[Music]

2
00:00:15,650 --> 00:00:19,170
yeah I'm Zen pathani I'm Jane on Twitter

3
00:00:19,170 --> 00:00:22,609
and github and almost everything else

4
00:00:22,609 --> 00:00:24,630
today I'm going to talk about state

5
00:00:24,630 --> 00:00:26,460
machines meat we are cooks who knows

6
00:00:26,460 --> 00:00:32,040
sits machines here alright so yeah I

7
00:00:32,040 --> 00:00:34,680
know that you're a bit all this because

8
00:00:34,680 --> 00:00:36,270
state machines are all the odd things

9
00:00:36,270 --> 00:00:40,160
right it has been around for decades and

10
00:00:40,160 --> 00:00:42,989
now we are bringing this old stuff into

11
00:00:42,989 --> 00:00:46,050
react cooks which is just probably a few

12
00:00:46,050 --> 00:00:48,300
months ago released on stable version of

13
00:00:48,300 --> 00:00:54,239
react so yeah I have somebody I have two

14
00:00:54,239 --> 00:00:56,219
kids and I'm living in Singapore working

15
00:00:56,219 --> 00:00:58,140
as a ninja fan working at ninja friend

16
00:00:58,140 --> 00:01:03,000
as a front-end stuff previously I was a

17
00:01:03,000 --> 00:01:04,920
back-end developer but I just moved to

18
00:01:04,920 --> 00:01:10,350
from n for one and a half years and I'll

19
00:01:10,350 --> 00:01:13,369
react and it's hooks will Oh sucks here

20
00:01:13,369 --> 00:01:20,880
great okay what this talk is here I'm

21
00:01:20,880 --> 00:01:23,310
going to give you a very brief

22
00:01:23,310 --> 00:01:25,950
introduction to state machines so for

23
00:01:25,950 --> 00:01:28,979
you who just born yesterday who will

24
00:01:28,979 --> 00:01:31,140
just who never heard of state machines

25
00:01:31,140 --> 00:01:34,079
probably you need to get some basic

26
00:01:34,079 --> 00:01:36,689
concepts of it and then I'm going to

27
00:01:36,689 --> 00:01:41,579
walk you through to my personal journey

28
00:01:41,579 --> 00:01:45,509
when I was working on a feature in in

29
00:01:45,509 --> 00:01:49,560
Japan but that journey is too long too

30
00:01:49,560 --> 00:01:52,320
crammed up in 30 minutes right that's

31
00:01:52,320 --> 00:01:59,340
why I cram I cut it down and I simplify

32
00:01:59,340 --> 00:02:01,170
those things so what you're seeing here

33
00:02:01,170 --> 00:02:03,210
is not the real thing that I'm good but

34
00:02:03,210 --> 00:02:06,299
it's just a simulation of of my journey

35
00:02:06,299 --> 00:02:11,730
at the time so and since it's a code

36
00:02:11,730 --> 00:02:13,170
journey so there will be a lot of code

37
00:02:13,170 --> 00:02:13,740
so

38
00:02:13,740 --> 00:02:16,500
luckily this is my this is the first

39
00:02:16,500 --> 00:02:18,290
talk in the morning so I hope you're

40
00:02:18,290 --> 00:02:22,410
fresh enough to digest more good this

41
00:02:22,410 --> 00:02:25,910
morning and what this talk is not is

42
00:02:25,910 --> 00:02:28,200
this is not an introduction to react

43
00:02:28,200 --> 00:02:30,840
cooks so I'm not gonna introduce you to

44
00:02:30,840 --> 00:02:36,270
any concept of records and it's not also

45
00:02:36,270 --> 00:02:40,350
dig deep down to state machines concept

46
00:02:40,350 --> 00:02:44,280
because it has a lot of concepts we if

47
00:02:44,280 --> 00:02:46,110
you talk about it thoroughly it will

48
00:02:46,110 --> 00:02:51,450
take a few days for review so what is

49
00:02:51,450 --> 00:02:53,930
state machines

50
00:02:53,930 --> 00:02:56,940
well when I'm mentioning state machines

51
00:02:56,940 --> 00:02:59,310
I am referring to this finite state

52
00:02:59,310 --> 00:03:04,320
machines which is on Wikipedia yeah it's

53
00:03:04,320 --> 00:03:06,990
like this definition and we have some

54
00:03:06,990 --> 00:03:23,320
states and

55
00:03:23,330 --> 00:03:25,820
and why are we bringing this old stuff

56
00:03:25,820 --> 00:03:28,010
into foreign stuff because you soul is

57
00:03:28,010 --> 00:03:29,540
that machines are only used in critical

58
00:03:29,540 --> 00:03:32,510
systems in oil and gas company in NASA

59
00:03:32,510 --> 00:03:34,790
for building the rover to send to Mars

60
00:03:34,790 --> 00:03:39,920
because they can afford to have error or

61
00:03:39,920 --> 00:03:42,020
a new bug in production like us we can

62
00:03:42,020 --> 00:03:44,150
afford it right we can afford a bug in

63
00:03:44,150 --> 00:03:47,390
production and we can immediately push

64
00:03:47,390 --> 00:03:49,910
some code and deploy it but that's not

65
00:03:49,910 --> 00:03:52,340
the case for them they cannot just push

66
00:03:52,340 --> 00:03:54,380
a code to Mars right because it take

67
00:03:54,380 --> 00:03:58,670
months to get there so but why why

68
00:03:58,670 --> 00:04:01,250
bringing this this complicated stuff in

69
00:04:01,250 --> 00:04:06,590
the front end there are a lot of there

70
00:04:06,590 --> 00:04:10,220
are a lot of explanations which is

71
00:04:10,220 --> 00:04:13,460
explained by the creator of X state in

72
00:04:13,460 --> 00:04:16,730
this talk so you can just go through the

73
00:04:16,730 --> 00:04:18,650
accommodation and take a look at why

74
00:04:18,650 --> 00:04:25,400
that's this important but the one of the

75
00:04:25,400 --> 00:04:28,660
idea that I am getting sold out is

76
00:04:28,660 --> 00:04:31,370
because it provides a common language

77
00:04:31,370 --> 00:04:33,950
for designers and developers so let me

78
00:04:33,950 --> 00:04:37,110
explain Italy

79
00:04:37,120 --> 00:04:40,310
anybody ever get this kind of flow from

80
00:04:40,310 --> 00:04:46,450
designers or yep one two three okay so

81
00:04:46,450 --> 00:04:48,800
are we the only ones doing the complex

82
00:04:48,800 --> 00:04:56,870
stuff so I got I have a pitch in in our

83
00:04:56,870 --> 00:04:59,720
product in in Japan which is basically a

84
00:04:59,720 --> 00:05:03,650
calendar so this calendar you know an

85
00:05:03,650 --> 00:05:06,050
interaction in a calendar is a lot right

86
00:05:06,050 --> 00:05:08,450
there could be creating new staff or

87
00:05:08,450 --> 00:05:10,490
feeding the staff or filling the list of

88
00:05:10,490 --> 00:05:14,240
items in calendar and since we are a

89
00:05:14,240 --> 00:05:17,720
start-up we do it lean so instead of

90
00:05:17,720 --> 00:05:21,890
having all requirements given up at the

91
00:05:21,890 --> 00:05:24,440
first place we we just get the

92
00:05:24,440 --> 00:05:27,500
requirements gradually one by one so

93
00:05:27,500 --> 00:05:29,510
initially I got only probably one of

94
00:05:29,510 --> 00:05:32,990
this diagram but then I'm the next

95
00:05:32,990 --> 00:05:34,640
period I get another one on the next one

96
00:05:34,640 --> 00:05:35,930
I get another one then this diagram

97
00:05:35,930 --> 00:05:37,070
getting more and more

98
00:05:37,070 --> 00:05:40,370
complex and it's it's getting harder for

99
00:05:40,370 --> 00:05:43,910
me to understand my code and really my

100
00:05:43,910 --> 00:05:48,290
code to this diagram but luckily I'm

101
00:05:48,290 --> 00:05:54,230
getting pitch this idea so somebody so

102
00:05:54,230 --> 00:05:58,790
when I watched the top it he said that

103
00:05:58,790 --> 00:06:00,140
that machine provided common language

104
00:06:00,140 --> 00:06:01,490
for designers and developers and I

105
00:06:01,490 --> 00:06:03,320
thought it is it quite make sense

106
00:06:03,320 --> 00:06:07,550
because we're having this by using state

107
00:06:07,550 --> 00:06:10,010
machines we can actually code in a way

108
00:06:10,010 --> 00:06:14,560
that the diagram is presented to us and

109
00:06:14,560 --> 00:06:17,170
I will show you later that we can do

110
00:06:17,170 --> 00:06:26,050
vice-versa so my problem at the time was

111
00:06:26,050 --> 00:06:29,150
the complex UI flows that I get it

112
00:06:29,150 --> 00:06:33,860
requires multiple states by States here

113
00:06:33,860 --> 00:06:37,940
I mean states in react so I can it can

114
00:06:37,940 --> 00:06:39,770
be in hooks and it can be in in class

115
00:06:39,770 --> 00:06:41,990
components but it's basically the react

116
00:06:41,990 --> 00:06:45,350
States and multiple states are generally

117
00:06:45,350 --> 00:06:48,380
two implicit which means probably some

118
00:06:48,380 --> 00:06:52,820
let's say we have three states we have a

119
00:06:52,820 --> 00:06:54,530
combination of three states on that

120
00:06:54,530 --> 00:06:56,600
company right and then we are four

121
00:06:56,600 --> 00:06:58,190
states we have combination for this and

122
00:06:58,190 --> 00:07:02,090
imagine if the UI is too complex we can

123
00:07:02,090 --> 00:07:04,640
get the state explore it and it's

124
00:07:04,640 --> 00:07:06,440
getting harder to manage the states

125
00:07:06,440 --> 00:07:10,730
inside the company yep so those implicit

126
00:07:10,730 --> 00:07:14,510
States for me it's harder to reason

127
00:07:14,510 --> 00:07:15,760
about

128
00:07:15,760 --> 00:07:19,370
that's why bugs keep showing up on

129
00:07:19,370 --> 00:07:21,860
production due to this invisible state

130
00:07:21,860 --> 00:07:23,690
so I thought that I covered all the

131
00:07:23,690 --> 00:07:25,910
states but apparently there are some

132
00:07:25,910 --> 00:07:28,250
other combination of states that is not

133
00:07:28,250 --> 00:07:29,810
covered yet and it's appearing

134
00:07:29,810 --> 00:07:35,210
production so yeah let's try using state

135
00:07:35,210 --> 00:07:39,860
machines to solve this problem so my

136
00:07:39,860 --> 00:07:44,780
hypothesis is by using state machines we

137
00:07:44,780 --> 00:07:48,340
can make our States visible which means

138
00:07:48,340 --> 00:07:50,780
if we have my own physical States

139
00:07:50,780 --> 00:07:53,660
means no hidden bugs anymore right so

140
00:07:53,660 --> 00:07:56,170
let's hope it turns out that way

141
00:07:56,170 --> 00:07:59,630
enough talk so I told you that there

142
00:07:59,630 --> 00:08:01,100
will be a lot of good a lot of good

143
00:08:01,100 --> 00:08:06,860
we're starting to jump into the code I

144
00:08:06,860 --> 00:08:08,389
will give you a brief solution

145
00:08:08,389 --> 00:08:14,320
interaction through the x-step API so

146
00:08:14,320 --> 00:08:17,139
this is a simple toggle machine example

147
00:08:17,139 --> 00:08:20,450
so I'm just importing a machine function

148
00:08:20,450 --> 00:08:23,540
from X depth and I pass down a

149
00:08:23,540 --> 00:08:27,130
configuration object to the machine

150
00:08:27,130 --> 00:08:29,810
this configuration object configuration

151
00:08:29,810 --> 00:08:32,510
object should contain at least the first

152
00:08:32,510 --> 00:08:35,180
is the initial State so which state that

153
00:08:35,180 --> 00:08:41,360
it initially on when it started and then

154
00:08:41,360 --> 00:08:43,370
all the available States so in this case

155
00:08:43,370 --> 00:08:45,520
I have inactive State and then I have

156
00:08:45,520 --> 00:08:48,890
active state as well and within those

157
00:08:48,890 --> 00:08:51,980
states we can define state transitions

158
00:08:51,980 --> 00:08:55,040
so which is a way to to move between

159
00:08:55,040 --> 00:08:59,260
between states so in this case on toggle

160
00:08:59,260 --> 00:09:02,870
events we move to active state and on

161
00:09:02,870 --> 00:09:05,120
and from the active State on toggle

162
00:09:05,120 --> 00:09:07,700
offense to the same event we move to

163
00:09:07,700 --> 00:09:13,010
inactive State so this is the bare

164
00:09:13,010 --> 00:09:16,220
minimum of a state machine so we can try

165
00:09:16,220 --> 00:09:19,790
to copy this line and we can visualize

166
00:09:19,790 --> 00:09:27,020
it from the code yep here it is so now

167
00:09:27,020 --> 00:09:31,880
we cut our code visualize like this so

168
00:09:31,880 --> 00:09:34,010
it looks like the diagram that I shown

169
00:09:34,010 --> 00:09:36,500
you before the diagram that I that we

170
00:09:36,500 --> 00:09:39,589
cut from the designers it seems a bit

171
00:09:39,589 --> 00:09:41,900
overkill right I mean talker stuff what

172
00:09:41,900 --> 00:09:44,180
can be more complex than this what why

173
00:09:44,180 --> 00:09:46,820
do we need this ceremony just for

174
00:09:46,820 --> 00:09:50,050
toggling stuff but we will get to it

175
00:09:50,050 --> 00:09:55,379
soon so let's start the journey

176
00:09:55,389 --> 00:09:58,519
here I'm gonna walk you through my

177
00:09:58,519 --> 00:10:03,259
journey and I'm gonna split them step by

178
00:10:03,259 --> 00:10:06,769
step so it step consists of first the

179
00:10:06,769 --> 00:10:09,470
conventional implementation of it using

180
00:10:09,470 --> 00:10:13,100
hoops and then next we will get into

181
00:10:13,100 --> 00:10:15,170
this state machine definition and then

182
00:10:15,170 --> 00:10:17,000
next we will integrate that state

183
00:10:17,000 --> 00:10:23,199
machine into our app so for the first

184
00:10:23,199 --> 00:10:27,139
let's say imagine this is we are doing

185
00:10:27,139 --> 00:10:28,399
it in Sprint's and this is ours for

186
00:10:28,399 --> 00:10:30,800
spring so the first feature is simple

187
00:10:30,800 --> 00:10:33,190
this just toggle the model feasibility

188
00:10:33,190 --> 00:10:38,180
which I have button and I click and the

189
00:10:38,180 --> 00:10:40,759
militia up and I close and it closes

190
00:10:40,759 --> 00:10:44,699
it's impressive

191
00:10:44,709 --> 00:10:49,699
this is our bear component which uses a

192
00:10:49,699 --> 00:10:53,149
button and a model and I feels nothing

193
00:10:53,149 --> 00:10:57,560
here yet so for tracking the

194
00:10:57,560 --> 00:10:59,750
traceability step usually we use you

195
00:10:59,750 --> 00:11:05,959
step and then we just initiate the state

196
00:11:05,959 --> 00:11:10,040
with force and on button click we set it

197
00:11:10,040 --> 00:11:12,620
to true on closed model click we set it

198
00:11:12,620 --> 00:11:18,040
to false so this is our implementation

199
00:11:18,040 --> 00:11:21,709
it seems simple right why do we need set

200
00:11:21,709 --> 00:11:26,540
machines but let's try doing this simple

201
00:11:26,540 --> 00:11:29,750
thing using Sigma shins so I just add

202
00:11:29,750 --> 00:11:33,800
not the I just had an ID here so this is

203
00:11:33,800 --> 00:11:38,660
a machine for this case so we have an

204
00:11:38,660 --> 00:11:41,870
infeasible state as an easy L and then

205
00:11:41,870 --> 00:11:46,970
we put an open event so that it can go

206
00:11:46,970 --> 00:11:49,040
to visible state and this visible step

207
00:11:49,040 --> 00:11:52,880
has a closed event to invisible state so

208
00:11:52,880 --> 00:11:54,319
this is our simple machine which looks

209
00:11:54,319 --> 00:11:57,649
like our total machine before and when

210
00:11:57,649 --> 00:12:01,040
we select it it has similar thing the

211
00:12:01,040 --> 00:12:02,500
difference the only difference is that

212
00:12:02,500 --> 00:12:05,269
we have different events that occur so

213
00:12:05,269 --> 00:12:07,740
by having different events there

214
00:12:07,740 --> 00:12:11,190
no way for this state to let's say we're

215
00:12:11,190 --> 00:12:13,140
in physical state and we send clothes

216
00:12:13,140 --> 00:12:15,870
even it will do nothing because there's

217
00:12:15,870 --> 00:12:18,750
no clothes even on this state so that's

218
00:12:18,750 --> 00:12:22,500
what makes it contain we cannot go to

219
00:12:22,500 --> 00:12:24,990
any other state which is not defined

220
00:12:24,990 --> 00:12:31,710
here so let's integrate that solution

221
00:12:31,710 --> 00:12:34,590
into our app this is the same barebone

222
00:12:34,590 --> 00:12:40,770
app but I just imported not stuff use

223
00:12:40,770 --> 00:12:43,950
machine here is react cooked react

224
00:12:43,950 --> 00:12:46,920
custom hooks which is written in X state

225
00:12:46,920 --> 00:12:49,800
and you can look at the expression on

226
00:12:49,800 --> 00:12:51,420
the recommendation I wouldn't walk you

227
00:12:51,420 --> 00:12:55,230
through and this custom hooks accept

228
00:12:55,230 --> 00:12:58,590
first the machine itself the machine

229
00:12:58,590 --> 00:13:00,510
definition that we just did and then it

230
00:13:00,510 --> 00:13:02,700
accept some options which is one of them

231
00:13:02,700 --> 00:13:05,760
is the dev tools which means that we can

232
00:13:05,760 --> 00:13:09,900
debug our our app or our tension in

233
00:13:09,900 --> 00:13:16,500
redux dev tools and next we accept we

234
00:13:16,500 --> 00:13:18,450
get the concept and send even send a

235
00:13:18,450 --> 00:13:21,540
function to send even so for opening the

236
00:13:21,540 --> 00:13:24,630
model this simply sent an open even and

237
00:13:24,630 --> 00:13:26,820
for closing the Mirage is simply send

238
00:13:26,820 --> 00:13:36,770
close event and here to determine that

239
00:13:36,770 --> 00:13:39,110
whether the model is shown or not

240
00:13:39,110 --> 00:13:41,760
instead of placing physical state before

241
00:13:41,760 --> 00:13:44,910
we pass down the current state and the

242
00:13:44,910 --> 00:13:47,190
value of the current state and if the

243
00:13:47,190 --> 00:13:49,260
state is feasible then we display the

244
00:13:49,260 --> 00:13:55,680
model this is it and we still have the

245
00:13:55,680 --> 00:13:58,290
same working what our company but the

246
00:13:58,290 --> 00:14:00,960
only the difference is we can track it

247
00:14:00,960 --> 00:14:04,470
down in redux so we have an open even

248
00:14:04,470 --> 00:14:06,840
here changing state visible invisible to

249
00:14:06,840 --> 00:14:09,090
visible and we have closed even here

250
00:14:09,090 --> 00:14:13,870
changing state from visible to invisible

251
00:14:13,880 --> 00:14:16,970
okay that seems simple but now let's go

252
00:14:16,970 --> 00:14:19,910
to the spring this spear into a garment

253
00:14:19,910 --> 00:14:22,759
to which is we have to differentiate

254
00:14:22,759 --> 00:14:25,730
between view and edit screens like then

255
00:14:25,730 --> 00:14:28,910
our model was just no contain right but

256
00:14:28,910 --> 00:14:32,000
now it has a content and it has added

257
00:14:32,000 --> 00:14:35,779
button when I when we so it is feeling

258
00:14:35,779 --> 00:14:38,569
the thing here and then when you click

259
00:14:38,569 --> 00:14:40,639
the edit it is editing that thing and it

260
00:14:40,639 --> 00:14:43,339
can submit so that's the second

261
00:14:43,339 --> 00:14:46,790
requirement this is our old code in

262
00:14:46,790 --> 00:14:52,519
conventional hooks we have to add

263
00:14:52,519 --> 00:14:54,589
another state because we were checking

264
00:14:54,589 --> 00:14:57,470
another thing right here so we just add

265
00:14:57,470 --> 00:15:03,829
a editing step and then the ref the

266
00:15:03,829 --> 00:15:05,420
state value that we are passing down to

267
00:15:05,420 --> 00:15:09,500
the model so we are passing down this

268
00:15:09,500 --> 00:15:12,740
view and edit state value based on those

269
00:15:12,740 --> 00:15:17,589
two states before so the feasible and

270
00:15:17,589 --> 00:15:19,939
editing if it is feasible then it's not

271
00:15:19,939 --> 00:15:23,420
editing then this view and yeah

272
00:15:23,420 --> 00:15:30,019
something like this and that's for this

273
00:15:30,019 --> 00:15:31,160
for getting the state and now for

274
00:15:31,160 --> 00:15:33,680
changing the state we should propagate

275
00:15:33,680 --> 00:15:37,670
to the events of clicking or some or a

276
00:15:37,670 --> 00:15:39,850
grow of clicking these buttons to

277
00:15:39,850 --> 00:15:41,720
setting the States

278
00:15:41,720 --> 00:15:45,019
so right here we we set editing to false

279
00:15:45,019 --> 00:15:46,399
when we want to crystal when we are

280
00:15:46,399 --> 00:15:47,630
crossing the model so it gets to the

281
00:15:47,630 --> 00:15:50,060
initial set and then on edit button we

282
00:15:50,060 --> 00:15:53,360
just set it to true so that's our

283
00:15:53,360 --> 00:15:56,209
implementation it's still mini 2 plus so

284
00:15:56,209 --> 00:15:59,149
far so why don't we but why we better is

285
00:15:59,149 --> 00:16:04,910
writing state machines but we do some

286
00:16:04,910 --> 00:16:10,069
unusual stuff sometimes right now let's

287
00:16:10,069 --> 00:16:13,100
write state machine and right here I'm

288
00:16:13,100 --> 00:16:14,569
going to introduce you to a new concept

289
00:16:14,569 --> 00:16:21,620
part here a hierarchical state so here

290
00:16:21,620 --> 00:16:25,550
we have a new state but it's not in it's

291
00:16:25,550 --> 00:16:27,750
not sibling of the existing state but

292
00:16:27,750 --> 00:16:30,300
has to be children of an existing state

293
00:16:30,300 --> 00:16:32,280
because this state is actually inside

294
00:16:32,280 --> 00:16:34,470
the visible because this state is only

295
00:16:34,470 --> 00:16:37,400
exists when the model is visible right

296
00:16:37,400 --> 00:16:41,430
and we can just add those states inside

297
00:16:41,430 --> 00:16:43,350
it so this is called hierarchical

298
00:16:43,350 --> 00:16:46,590
straight state and inside the visible

299
00:16:46,590 --> 00:16:49,650
said we have a few state which is an

300
00:16:49,650 --> 00:16:52,080
initial state and then we can go to the

301
00:16:52,080 --> 00:16:54,870
Edit State but then from edit state we

302
00:16:54,870 --> 00:16:57,270
need to go to the parent State right so

303
00:16:57,270 --> 00:17:01,890
there is no the the default when it

304
00:17:01,890 --> 00:17:03,660
accepts the state it can only access

305
00:17:03,660 --> 00:17:06,660
this its siblings it so how do we we

306
00:17:06,660 --> 00:17:09,959
access the parent step luckily actually

307
00:17:09,959 --> 00:17:12,990
provide a way to do it by defining an ID

308
00:17:12,990 --> 00:17:16,380
on appearances or or any any data or

309
00:17:16,380 --> 00:17:20,160
anywhere on the machine and then we can

310
00:17:20,160 --> 00:17:21,959
just refer to that ID but by just by

311
00:17:21,959 --> 00:17:25,920
putting a hash in front of it so this is

312
00:17:25,920 --> 00:17:28,770
our state machine definition then it

313
00:17:28,770 --> 00:17:32,430
looks like this when we visualize it so

314
00:17:32,430 --> 00:17:35,700
on invisible this invisible and physical

315
00:17:35,700 --> 00:17:36,840
thing is the same thing that we have

316
00:17:36,840 --> 00:17:39,840
previously but then we have two new

317
00:17:39,840 --> 00:17:44,010
states inside the visible state so when

318
00:17:44,010 --> 00:17:47,040
we are on view we can edit it and if you

319
00:17:47,040 --> 00:17:49,860
can submit it and when we are inside in

320
00:17:49,860 --> 00:17:52,500
any of this we can still close the model

321
00:17:52,500 --> 00:17:56,610
that's how it works right so let's

322
00:17:56,610 --> 00:17:59,370
implement this in our state machine this

323
00:17:59,370 --> 00:18:03,000
our previous one we need to change the

324
00:18:03,000 --> 00:18:04,440
value that we are passing to the model

325
00:18:04,440 --> 00:18:10,310
because now our feasible set is not

326
00:18:10,310 --> 00:18:13,470
string it's not always a string because

327
00:18:13,470 --> 00:18:16,170
unfeasible we have to inner states so it

328
00:18:16,170 --> 00:18:19,070
will be an object so we are passing on

329
00:18:19,070 --> 00:18:26,160
that object so if if that if the state

330
00:18:26,160 --> 00:18:28,290
is an object and contains visible and

331
00:18:28,290 --> 00:18:30,990
visible contains in state then we press

332
00:18:30,990 --> 00:18:33,090
that inner state otherwise it will be

333
00:18:33,090 --> 00:18:35,820
undefined so that that's why this is

334
00:18:35,820 --> 00:18:38,790
still valid for our model tomorrow will

335
00:18:38,790 --> 00:18:41,160
show when we have

336
00:18:41,160 --> 00:18:44,270
inner state in the feasible state and

337
00:18:44,270 --> 00:18:46,830
then for editing some defense it's

338
00:18:46,830 --> 00:18:49,680
simply sending those events out using

339
00:18:49,680 --> 00:18:52,740
the send function that's it

340
00:18:52,740 --> 00:18:58,320
and when we try doing this it works and

341
00:18:58,320 --> 00:19:02,670
we can also see the redux yeah so now

342
00:19:02,670 --> 00:19:10,080
when we are opening the state yeah now

343
00:19:10,080 --> 00:19:12,330
now we have this visible edit so when we

344
00:19:12,330 --> 00:19:15,960
were close the value is the field is

345
00:19:15,960 --> 00:19:18,330
invisible and when you open it the fella

346
00:19:18,330 --> 00:19:21,720
is now visible good view and now it's

347
00:19:21,720 --> 00:19:24,060
physical edit so it's how X that

348
00:19:24,060 --> 00:19:27,920
represents the state okay

349
00:19:27,920 --> 00:19:30,840
so far we are getting with more

350
00:19:30,840 --> 00:19:36,360
complicated here now so on the Sprint 3

351
00:19:36,360 --> 00:19:40,620
we had a new feature to show the create

352
00:19:40,620 --> 00:19:42,030
screen when opening Moodle with empty

353
00:19:42,030 --> 00:19:44,700
data remember that my case was a

354
00:19:44,700 --> 00:19:46,980
calendar when we click a date there

355
00:19:46,980 --> 00:19:49,440
could be something in it which is this

356
00:19:49,440 --> 00:19:52,890
is our it is this case but there could

357
00:19:52,890 --> 00:19:55,800
be nothing on it which we don't have

358
00:19:55,800 --> 00:19:58,830
anything to show right so that's why we

359
00:19:58,830 --> 00:20:02,220
have to go to immediate little editing

360
00:20:02,220 --> 00:20:03,780
mode which is called create because

361
00:20:03,780 --> 00:20:07,080
we're creating something so we have two

362
00:20:07,080 --> 00:20:10,860
cases now and to accommodate it to

363
00:20:10,860 --> 00:20:13,530
accommodate that in our conventional

364
00:20:13,530 --> 00:20:17,040
implementation we add another state

365
00:20:17,040 --> 00:20:20,910
called data the data object or the thing

366
00:20:20,910 --> 00:20:22,680
in the country and we initialize it with

367
00:20:22,680 --> 00:20:27,840
an empty array so now it's getting more

368
00:20:27,840 --> 00:20:30,840
complicated well we have to incorporate

369
00:20:30,840 --> 00:20:33,240
these three states feasible editing and

370
00:20:33,240 --> 00:20:36,780
data to and derive a state value from

371
00:20:36,780 --> 00:20:38,400
that then we have to write these

372
00:20:38,400 --> 00:20:42,390
conditional stars this seems a bit still

373
00:20:42,390 --> 00:20:45,330
more manageable but we are still far

374
00:20:45,330 --> 00:20:52,260
away forwards so this update buttons to

375
00:20:52,260 --> 00:20:54,600
have two things now now we

376
00:20:54,600 --> 00:20:56,340
of an empty which is the old stuff and

377
00:20:56,340 --> 00:20:59,220
then we can open access which is we are

378
00:20:59,220 --> 00:21:02,070
setting we are opening the water and we

379
00:21:02,070 --> 00:21:03,720
are setting the data to have some

380
00:21:03,720 --> 00:21:05,160
content here it's just an empty string

381
00:21:05,160 --> 00:21:11,669
to simplify and don't forget to clean up

382
00:21:11,669 --> 00:21:13,710
the data when we are crossing the motor

383
00:21:13,710 --> 00:21:16,470
or submitting so there's our

384
00:21:16,470 --> 00:21:20,429
implementation okay now it's getting

385
00:21:20,429 --> 00:21:24,690
more complex because now all of those

386
00:21:24,690 --> 00:21:26,010
additional logic are scattered

387
00:21:26,010 --> 00:21:26,669
everywhere

388
00:21:26,669 --> 00:21:28,950
and it's harder to understand because

389
00:21:28,950 --> 00:21:32,760
it's too implicit which that is this

390
00:21:32,760 --> 00:21:37,710
list oh and which tests actually so

391
00:21:37,710 --> 00:21:39,870
let's try implementing this with set

392
00:21:39,870 --> 00:21:44,309
machines and here here is where it got

393
00:21:44,309 --> 00:21:53,280
more useful now so in this case we are

394
00:21:53,280 --> 00:21:55,470
triggering the same event which is

395
00:21:55,470 --> 00:21:58,400
opening the model so we need to

396
00:21:58,400 --> 00:22:02,309
transition the step from invisible to

397
00:22:02,309 --> 00:22:08,070
visible and here is how we define the

398
00:22:08,070 --> 00:22:10,049
transition but there is another way of

399
00:22:10,049 --> 00:22:13,970
defining this transition which is

400
00:22:13,970 --> 00:22:16,470
defining it is an object so that we can

401
00:22:16,470 --> 00:22:20,039
add some more things here so this

402
00:22:20,039 --> 00:22:21,510
actually the same thing with the

403
00:22:21,510 --> 00:22:25,140
previous one and this another way to

404
00:22:25,140 --> 00:22:29,490
define it as an array so that we can

405
00:22:29,490 --> 00:22:33,600
target different things so that we so

406
00:22:33,600 --> 00:22:35,309
now we can target different states from

407
00:22:35,309 --> 00:22:39,270
the same state within using the same

408
00:22:39,270 --> 00:22:43,740
event how do we differ between this

409
00:22:43,740 --> 00:22:44,549
target and the target

410
00:22:44,549 --> 00:22:49,350
we differ it using condition so this

411
00:22:49,350 --> 00:22:51,240
condition inside machine is called car

412
00:22:51,240 --> 00:22:53,340
which means like imagine a state is a

413
00:22:53,340 --> 00:22:55,679
place and we have guards in front of the

414
00:22:55,679 --> 00:22:59,280
in one of the state in front of the

415
00:22:59,280 --> 00:23:00,659
place like like our grass which is

416
00:23:00,659 --> 00:23:02,549
scanning or attack so even though if

417
00:23:02,549 --> 00:23:04,409
somebody is trying to come into this

418
00:23:04,409 --> 00:23:07,290
stage without having the proper tag they

419
00:23:07,290 --> 00:23:08,220
wouldn't be allowed

420
00:23:08,220 --> 00:23:10,830
- coming right so this like this is why

421
00:23:10,830 --> 00:23:17,580
it called it's called God so here we are

422
00:23:17,580 --> 00:23:21,179
guarding that if the data is zero if the

423
00:23:21,179 --> 00:23:23,070
data length zero and then we go to this

424
00:23:23,070 --> 00:23:26,400
state otherwise we go to the previous

425
00:23:26,400 --> 00:23:30,830
one so just created add a create set and

426
00:23:30,830 --> 00:23:35,700
that's it so this is our news visualized

427
00:23:35,700 --> 00:23:39,809
a machine we have a new condition here

428
00:23:39,809 --> 00:23:42,179
so it's the same event but different

429
00:23:42,179 --> 00:23:43,980
condition with this condition we go

430
00:23:43,980 --> 00:23:47,100
directly to create and the rest are the

431
00:23:47,100 --> 00:23:50,130
same so when we implement this into the

432
00:23:50,130 --> 00:23:54,210
scene let's rename the current button

433
00:23:54,210 --> 00:23:56,909
and then so now it's open empty and

434
00:23:56,909 --> 00:24:00,299
press down an object instead of just

435
00:24:00,299 --> 00:24:02,159
passing out a string now we press it and

436
00:24:02,159 --> 00:24:05,309
pass an object with the type of that

437
00:24:05,309 --> 00:24:08,309
string and a payload in it so we pass

438
00:24:08,309 --> 00:24:12,390
down an empty period and we also need to

439
00:24:12,390 --> 00:24:16,710
have another another button which sends

440
00:24:16,710 --> 00:24:18,780
the same event but with different data

441
00:24:18,780 --> 00:24:23,010
here that's it that's our implementation

442
00:24:23,010 --> 00:24:26,070
in our component so it still works the

443
00:24:26,070 --> 00:24:40,559
same okay now we get to the final spring

444
00:24:40,559 --> 00:24:43,950
in the stop we have to show this screen

445
00:24:43,950 --> 00:24:45,450
when we are opening a model with

446
00:24:45,450 --> 00:24:48,240
multiple data so imagine that there is a

447
00:24:48,240 --> 00:24:50,309
date where we have multiple things there

448
00:24:50,309 --> 00:24:53,460
so we don't know yet which one to feel

449
00:24:53,460 --> 00:24:55,620
right which one to feel like this so if

450
00:24:55,620 --> 00:24:57,090
you have multiple data which one to show

451
00:24:57,090 --> 00:24:59,100
we don't know that's why we are

452
00:24:59,100 --> 00:25:01,049
displaying a list of them and the user

453
00:25:01,049 --> 00:25:03,090
can click on one of the lists and we can

454
00:25:03,090 --> 00:25:05,130
show the view and it does the same thing

455
00:25:05,130 --> 00:25:10,440
like before so now this is our old

456
00:25:10,440 --> 00:25:13,200
component add another step which is

457
00:25:13,200 --> 00:25:16,029
called index which

458
00:25:16,029 --> 00:25:18,220
represents the index that we are seeing

459
00:25:18,220 --> 00:25:25,179
and I enjoy it with with -1 so it's so

460
00:25:25,179 --> 00:25:27,519
if we if you use now when we compare it

461
00:25:27,519 --> 00:25:29,980
to other numbers it bit strange in

462
00:25:29,980 --> 00:25:31,840
JavaScript so just let's use this

463
00:25:31,840 --> 00:25:36,610
sentinel value then incorporated index

464
00:25:36,610 --> 00:25:39,509
into our new state which is lys and

465
00:25:39,509 --> 00:25:41,440
don't forget to add another condition

466
00:25:41,440 --> 00:25:45,250
because now this condition is change

467
00:25:45,250 --> 00:25:47,940
because of this

468
00:25:47,940 --> 00:25:51,929
add new buttons with different data here

469
00:25:51,929 --> 00:25:54,940
don't forget to reset that index to the

470
00:25:54,940 --> 00:25:59,110
-1 when you cross the model so now it's

471
00:25:59,110 --> 00:26:01,990
getting more and more complicated well

472
00:26:01,990 --> 00:26:03,940
this is not mind-blowing yet because

473
00:26:03,940 --> 00:26:06,309
it's still step 4 imagine that in

474
00:26:06,309 --> 00:26:10,149
production I have like step 10 or step

475
00:26:10,149 --> 00:26:19,840
20 so yes it blowed my mind so with in

476
00:26:19,840 --> 00:26:21,970
solutions we can do it the other way we

477
00:26:21,970 --> 00:26:23,379
can do it the same way that we did

478
00:26:23,379 --> 00:26:27,490
before so it just add another guard and

479
00:26:27,490 --> 00:26:31,870
another state to go but then now it's

480
00:26:31,870 --> 00:26:34,179
getting harder to retry because then

481
00:26:34,179 --> 00:26:35,919
what's the point of using insta machine

482
00:26:35,919 --> 00:26:40,120
if we still get it hard to read we can

483
00:26:40,120 --> 00:26:43,570
alias this state sorry we can elect this

484
00:26:43,570 --> 00:26:46,750
guard into a simple string so it's more

485
00:26:46,750 --> 00:26:49,240
readable so now we have if empty then

486
00:26:49,240 --> 00:26:51,399
this if single then this if and else

487
00:26:51,399 --> 00:26:55,840
this and we do find those cards into

488
00:26:55,840 --> 00:26:57,730
this object in step so this is the

489
00:26:57,730 --> 00:26:58,929
second object that we pass through the

490
00:26:58,929 --> 00:27:03,149
machine and it's just naming the

491
00:27:03,149 --> 00:27:09,039
condition as as a string and then define

492
00:27:09,039 --> 00:27:11,080
another list 8 with any actions

493
00:27:11,080 --> 00:27:15,639
interacting with it so that's here is

494
00:27:15,639 --> 00:27:19,870
our new state we have a new open even

495
00:27:19,870 --> 00:27:22,210
state with different condition but now

496
00:27:22,210 --> 00:27:24,190
it's with a proper name so if it's empty

497
00:27:24,190 --> 00:27:26,019
then it's going here if it's single

498
00:27:26,019 --> 00:27:27,850
Danny screen here if it's nothing then

499
00:27:27,850 --> 00:27:29,060
is going to the

500
00:27:29,060 --> 00:27:36,770
stayed which is initialized to this yeah

501
00:27:36,770 --> 00:27:41,890
now just add another button will open

502
00:27:41,890 --> 00:27:45,230
even same of an event but with different

503
00:27:45,230 --> 00:27:50,270
data now we have multiple data and and

504
00:27:50,270 --> 00:27:52,340
inside the model we have an interaction

505
00:27:52,340 --> 00:27:54,860
to view the details and go back to the

506
00:27:54,860 --> 00:27:56,960
ListView so we just passed down the back

507
00:27:56,960 --> 00:28:01,390
and few events and that's it our

508
00:28:01,390 --> 00:28:04,450
implementation is now more readable and

509
00:28:04,450 --> 00:28:06,710
it's easier to read yes

510
00:28:06,710 --> 00:28:11,600
and now we can inspect this yeah it's

511
00:28:11,600 --> 00:28:19,280
working all right so let's compare our

512
00:28:19,280 --> 00:28:21,290
previous implementation the old way to

513
00:28:21,290 --> 00:28:24,710
the state machine implementation so with

514
00:28:24,710 --> 00:28:26,660
our solutions we usually use you state

515
00:28:26,660 --> 00:28:29,300
right but in with this machine we don't

516
00:28:29,300 --> 00:28:31,130
use it anymore we just use use machine

517
00:28:31,130 --> 00:28:36,740
and replace those multiple states before

518
00:28:36,740 --> 00:28:39,230
with just a single call out of the use

519
00:28:39,230 --> 00:28:43,040
machine and we have to stew things here

520
00:28:43,040 --> 00:28:45,200
now this is the state and is the event

521
00:28:45,200 --> 00:28:48,800
and now instead of having those implicit

522
00:28:48,800 --> 00:28:51,200
starts at state cost which we don't

523
00:28:51,200 --> 00:28:53,330
really have any idea what does this - oh

524
00:28:53,330 --> 00:28:55,070
this is doing the same thing actually

525
00:28:55,070 --> 00:28:57,470
but it's harder to understand we need to

526
00:28:57,470 --> 00:28:59,180
read this code probably two or three

527
00:28:59,180 --> 00:29:02,000
more times to actually understand what's

528
00:29:02,000 --> 00:29:04,190
happening on this code but by using the

529
00:29:04,190 --> 00:29:06,890
machines we can just know what have

530
00:29:06,890 --> 00:29:08,420
what's happening on this button what's

531
00:29:08,420 --> 00:29:10,730
happening on this action just by looking

532
00:29:10,730 --> 00:29:18,650
at once and now our app is more simple

533
00:29:18,650 --> 00:29:23,960
and easier to understand but we're

534
00:29:23,960 --> 00:29:25,460
actually just moving away the complexity

535
00:29:25,460 --> 00:29:27,290
from death to the state machine right

536
00:29:27,290 --> 00:29:31,660
but the situation is still complex right

537
00:29:31,660 --> 00:29:34,430
yes it's still complex but the the

538
00:29:34,430 --> 00:29:36,080
difference between the solution the

539
00:29:36,080 --> 00:29:37,520
community of the state machine it and

540
00:29:37,520 --> 00:29:39,140
the competitor of the very first

541
00:29:39,140 --> 00:29:41,330
implementation is this the machine can

542
00:29:41,330 --> 00:29:42,710
be visualized easily

543
00:29:42,710 --> 00:29:46,730
so we're using the same visualizer we

544
00:29:46,730 --> 00:29:49,970
can visualize all the state in a way

545
00:29:49,970 --> 00:29:53,060
that that corresponds to the flow that

546
00:29:53,060 --> 00:29:56,390
we have let me get from the designers so

547
00:29:56,390 --> 00:29:58,880
this visualization for me it reduces the

548
00:29:58,880 --> 00:30:02,540
cognitive overload so based on my

549
00:30:02,540 --> 00:30:04,640
experience the appendage assist now

550
00:30:04,640 --> 00:30:08,240
since I'll still are feeble it's easier

551
00:30:08,240 --> 00:30:10,940
to test so we can just test from

552
00:30:10,940 --> 00:30:12,680
whenever from whichever state to go to

553
00:30:12,680 --> 00:30:15,350
whichever state and in fact I did all

554
00:30:15,350 --> 00:30:18,290
the tests so I'm confident enough with

555
00:30:18,290 --> 00:30:20,510
my machine I am confident that my

556
00:30:20,510 --> 00:30:24,530
machine will break but a setback free si

557
00:30:24,530 --> 00:30:28,520
hypothesize apparently not so it's not

558
00:30:28,520 --> 00:30:32,840
completely bug free so the the bug comes

559
00:30:32,840 --> 00:30:35,930
not from the state but it came from the

560
00:30:35,930 --> 00:30:37,580
discrepancies between the state and the

561
00:30:37,580 --> 00:30:41,450
rendered fuse so I had the correct state

562
00:30:41,450 --> 00:30:44,510
but you know inside that model and we're

563
00:30:44,510 --> 00:30:47,060
just so far we're just passing down the

564
00:30:47,060 --> 00:30:48,500
state of the model right but what's

565
00:30:48,500 --> 00:30:50,450
happening inside the model is some it's

566
00:30:50,450 --> 00:30:52,520
kind of it can go wrong over there so

567
00:30:52,520 --> 00:30:54,920
the box is coming from that model view

568
00:30:54,920 --> 00:30:58,190
so instead of just testing the state we

569
00:30:58,190 --> 00:30:59,810
should also have tested the rendered

570
00:30:59,810 --> 00:31:01,640
view as well in this case we should have

571
00:31:01,640 --> 00:31:06,500
tested Model View so that's why I'm

572
00:31:06,500 --> 00:31:10,250
suggesting us to consider integration

573
00:31:10,250 --> 00:31:14,030
tests so my lesson slot in this journey

574
00:31:14,030 --> 00:31:17,840
is when we are using state machines it

575
00:31:17,840 --> 00:31:21,350
must be designed thoroughly because it's

576
00:31:21,350 --> 00:31:24,470
a complex stuff it so the state machines

577
00:31:24,470 --> 00:31:27,050
will just work but it works as we design

578
00:31:27,050 --> 00:31:31,430
so if we design it badly then it will go

579
00:31:31,430 --> 00:31:34,070
spit and yes it's easy to pass the state

580
00:31:34,070 --> 00:31:35,630
because just just testing the string

581
00:31:35,630 --> 00:31:38,240
testing the object right but don't

582
00:31:38,240 --> 00:31:41,890
forget to test the rendered fuse and

583
00:31:41,890 --> 00:31:45,290
another thing that I learned is there's

584
00:31:45,290 --> 00:31:47,900
no super about it we cannot use still

585
00:31:47,900 --> 00:31:50,420
machines everywhere just like we cannot

586
00:31:50,420 --> 00:31:52,850
use redux everywhere and we cannot use

587
00:31:52,850 --> 00:31:56,140
get derived state from props

588
00:31:56,140 --> 00:32:01,720
anyway yeah so just be mindful that we

589
00:32:01,720 --> 00:32:08,220
might not need state machines as well so

590
00:32:08,220 --> 00:32:10,570
my takeaway from this experience is

591
00:32:10,570 --> 00:32:13,450
please use state machines sparingly so

592
00:32:13,450 --> 00:32:15,940
use it when you need it and when you use

593
00:32:15,940 --> 00:32:18,340
it it's all isolate the state management

594
00:32:18,340 --> 00:32:20,260
into custom hooks so it's easier to

595
00:32:20,260 --> 00:32:24,460
understand and do pass and always test

596
00:32:24,460 --> 00:32:26,620
your code thoroughly which means testing

597
00:32:26,620 --> 00:32:31,690
all the codes including the few so in

598
00:32:31,690 --> 00:32:33,400
this talk I very scratch the surface of

599
00:32:33,400 --> 00:32:35,200
state machines concepts there are a lot

600
00:32:35,200 --> 00:32:38,890
of things more instead machines you can

601
00:32:38,890 --> 00:32:41,309
just read out read up to the

602
00:32:41,309 --> 00:32:44,590
documentation a lot of things even in

603
00:32:44,590 --> 00:32:46,630
fact I didn't I also didn't learn all

604
00:32:46,630 --> 00:32:48,790
the stuff there yet so I just explained

605
00:32:48,790 --> 00:32:52,870
what I implemented so I asked suggesting

606
00:32:52,870 --> 00:32:56,200
you to learn to testing trophy by

607
00:32:56,200 --> 00:32:58,870
considered I actually took his course

608
00:32:58,870 --> 00:33:02,410
and it seems much more useful to prevent

609
00:33:02,410 --> 00:33:07,240
some bugs happening in our code now so

610
00:33:07,240 --> 00:33:09,760
we can get enough confidence within our

611
00:33:09,760 --> 00:33:14,490
code so I think that's all thank you for

612
00:33:14,490 --> 00:33:17,110
your attention and I want to give a

613
00:33:17,110 --> 00:33:19,330
special thanks to David courtship which

614
00:33:19,330 --> 00:33:23,110
is the creator of X state and Rodrigo

615
00:33:23,110 --> 00:33:26,020
Pombo for his amazing cool surfer that I

616
00:33:26,020 --> 00:33:28,690
used here even though it is still in

617
00:33:28,690 --> 00:33:30,520
alpha version but it's pretty good right

618
00:33:30,520 --> 00:33:34,120
I think nothing wrong happens so you can

619
00:33:34,120 --> 00:33:36,910
access this site in this ring and this

