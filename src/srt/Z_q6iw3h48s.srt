1
00:00:34,860 --> 00:00:37,110

my name is reached a fever of well

2
00:00:37,110 --> 00:00:39,270
friends and non Russian speakers call me

3
00:00:39,270 --> 00:00:43,050
Slava and I walk in denmark on v8 for

4
00:00:43,050 --> 00:00:45,090
the last two years and initially I

5
00:00:45,090 --> 00:00:46,620
planned to call my talk one day of life

6
00:00:46,620 --> 00:00:49,530
in v8 but then it was explained to me

7
00:00:49,530 --> 00:00:50,820
that nobody will give me the whole day

8
00:00:50,820 --> 00:00:54,809
on the miserable 30 minutes and so I had

9
00:00:54,809 --> 00:00:57,600
to chop it down to something much

10
00:00:57,600 --> 00:01:00,150
shorter and more energetic like directly

11
00:01:00,150 --> 00:01:02,040
proceed to questions answers for example

12
00:01:02,040 --> 00:01:08,910
but yeah so oh my god so it's pretty

13
00:01:08,910 --> 00:01:12,990
often that people ask me can we do

14
00:01:12,990 --> 00:01:14,940
something like here's a piece of code

15
00:01:14,940 --> 00:01:18,540
what we can do is that and my goal for

16
00:01:18,540 --> 00:01:21,330
today is actually encourage you to look

17
00:01:21,330 --> 00:01:26,670
under v8 hood and to understand what we

18
00:01:26,670 --> 00:01:29,160
eat can or cannot do and maybe

19
00:01:29,160 --> 00:01:31,050
contribute something back to eat if you

20
00:01:31,050 --> 00:01:32,310
see that way it can do something better

21
00:01:32,310 --> 00:01:37,020
and it's not scary so I will be maybe I

22
00:01:37,020 --> 00:01:39,900
will try to be a fear killer by showing

23
00:01:39,900 --> 00:01:42,180
you some horrible machine code or

24
00:01:42,180 --> 00:01:47,280
something like that and yeah so that's

25
00:01:47,280 --> 00:01:49,830
nagar i decided to use examples of code

26
00:01:49,830 --> 00:01:54,330
that people sent to me in various / time

27
00:01:54,330 --> 00:01:57,479
and like for example asking what we ate

28
00:01:57,479 --> 00:02:01,290
can do with this multiplication of dot

29
00:02:01,290 --> 00:02:04,820
product of two vectors representatives

30
00:02:04,820 --> 00:02:09,869
external WebGL erase or maybe what it

31
00:02:09,869 --> 00:02:13,110
can do if it just represented that if

32
00:02:13,110 --> 00:02:14,489
these vectors are represented as a

33
00:02:14,489 --> 00:02:16,709
normal JavaScript arrays because they

34
00:02:16,709 --> 00:02:18,390
heard that they are less efficient in v8

35
00:02:18,390 --> 00:02:22,080
then the typed arrays or maybe a piece

36
00:02:22,080 --> 00:02:24,060
of horrible code like that that can be

37
00:02:24,060 --> 00:02:26,340
found in some library like prototype I

38
00:02:26,340 --> 00:02:29,549
think where you have this constructor

39
00:02:29,549 --> 00:02:31,470
with an apple application of the

40
00:02:31,470 --> 00:02:34,410
initialization function and people ask

41
00:02:34,410 --> 00:02:36,269
oh there is a apply and there is an

42
00:02:36,269 --> 00:02:38,459
arguments I heard they are very

43
00:02:38,459 --> 00:02:41,790
inefficient and what we eat can do is

44
00:02:41,790 --> 00:02:45,350
that compared to the old school

45
00:02:45,350 --> 00:02:47,660
structure which just construct an object

46
00:02:47,660 --> 00:02:51,730
and doesn't try to be clever and and

47
00:02:51,730 --> 00:02:54,590
even code like that so some functional

48
00:02:54,590 --> 00:02:59,210
programmers they ask I like high order

49
00:02:59,210 --> 00:03:01,580
functions i like to map my reduce and

50
00:03:01,580 --> 00:03:05,900
reduce my map and currently oh my god

51
00:03:05,900 --> 00:03:10,640
can we ate can we ate can we eat

52
00:03:10,640 --> 00:03:14,500
transform it to a native loop maybe

53
00:03:14,500 --> 00:03:18,770
please please please and so the answer

54
00:03:18,770 --> 00:03:20,570
to these questions are actually pretty

55
00:03:20,570 --> 00:03:22,250
simple you just need to look at the code

56
00:03:22,250 --> 00:03:25,490
that regenerates and of course you can

57
00:03:25,490 --> 00:03:27,830
do that we does not hide it anywhere and

58
00:03:27,830 --> 00:03:30,980
doesn't try to I don't know put it

59
00:03:30,980 --> 00:03:33,200
somewhere on the protected data center

60
00:03:33,200 --> 00:03:37,280
it runs on your computer so yes of

61
00:03:37,280 --> 00:03:39,110
course you can look at the code we it

62
00:03:39,110 --> 00:03:43,220
generates unfortunately you have to

63
00:03:43,220 --> 00:03:44,990
build v8 yourself to do that we don't

64
00:03:44,990 --> 00:03:47,270
ship it together with chrome by default

65
00:03:47,270 --> 00:03:49,460
because it occupies some space like

66
00:03:49,460 --> 00:03:51,620
there is a built-in disassembler who

67
00:03:51,620 --> 00:03:53,210
wants a built-in disassembler in the web

68
00:03:53,210 --> 00:03:59,090
browser not that useful so well I am NOT

69
00:03:59,090 --> 00:04:00,650
going to explain what's these days you

70
00:04:00,650 --> 00:04:02,240
just build wit with some options and

71
00:04:02,240 --> 00:04:03,710
then you run rate with some options and

72
00:04:03,710 --> 00:04:05,300
then you can see everything that it

73
00:04:05,300 --> 00:04:07,190
produces including the internal

74
00:04:07,190 --> 00:04:09,860
representations of the functions it

75
00:04:09,860 --> 00:04:12,890
optimizes and now we will try to apply

76
00:04:12,890 --> 00:04:17,000
this sacred knowledge to the examples

77
00:04:17,000 --> 00:04:18,799
that I have shown in the beginning of my

78
00:04:18,799 --> 00:04:23,600
speech so this is an example and hear

79
00:04:23,600 --> 00:04:26,030
somebody who actually reads what's

80
00:04:26,030 --> 00:04:28,130
written and the slide can say oh my god

81
00:04:28,130 --> 00:04:30,320
what's this that it wasn't there there

82
00:04:30,320 --> 00:04:33,590
is something some dirty trick what's

83
00:04:33,590 --> 00:04:37,430
happening the dance is very simple you

84
00:04:37,430 --> 00:04:39,980
have to force me to optimize your code

85
00:04:39,980 --> 00:04:41,930
in a sense that it does not try to

86
00:04:41,930 --> 00:04:45,280
optimize anything that doesn't occupy

87
00:04:45,280 --> 00:04:47,810
well any measurable time in the

88
00:04:47,810 --> 00:04:50,450
execution of your program why waste an

89
00:04:50,450 --> 00:04:51,700
effort and

90
00:04:51,700 --> 00:04:54,220
so you have to put a pressure on this

91
00:04:54,220 --> 00:04:57,700
function to get it optimized and to may

92
00:04:57,700 --> 00:05:00,790
create to some work and produce some

93
00:05:00,790 --> 00:05:05,320
sweat yeah so and here's the questions

94
00:05:05,320 --> 00:05:07,390
that you should ask yourself when you

95
00:05:07,390 --> 00:05:09,040
look at the JavaScript code of this

96
00:05:09,040 --> 00:05:13,060
function is that can we eat hoist a dot

97
00:05:13,060 --> 00:05:15,580
length it's one of the religious

98
00:05:15,580 --> 00:05:17,800
questions actually i think in JavaScript

99
00:05:17,800 --> 00:05:20,050
community should I cash this in the

100
00:05:20,050 --> 00:05:22,480
local variable or should I just write it

101
00:05:22,480 --> 00:05:26,680
like this fight fight and the other

102
00:05:26,680 --> 00:05:29,680
question is can they access here be as

103
00:05:29,680 --> 00:05:33,250
efficient as an array existence see well

104
00:05:33,250 --> 00:05:35,140
because you everybody knows that the

105
00:05:35,140 --> 00:05:38,320
race in JavaScript just normal objects

106
00:05:38,320 --> 00:05:42,870
and the properties have names and erase

107
00:05:42,870 --> 00:05:45,490
they have property which is called zero

108
00:05:45,490 --> 00:05:49,870
probability called one etc and another

109
00:05:49,870 --> 00:05:52,720
question is that can lv 8 avoid boxing

110
00:05:52,720 --> 00:05:55,480
are temporaries produced by the

111
00:05:55,480 --> 00:05:59,740
computation so we ate allocates

112
00:05:59,740 --> 00:06:03,720
floating-point values in the boxes and

113
00:06:03,720 --> 00:06:06,820
it doesn't sound very efficient so the

114
00:06:06,820 --> 00:06:08,530
question is can it avoid doing that for

115
00:06:08,530 --> 00:06:12,460
the local results and the other question

116
00:06:12,460 --> 00:06:14,710
which is quite similar to this one is

117
00:06:14,710 --> 00:06:17,380
can we eat avoid using floating

118
00:06:17,380 --> 00:06:20,530
precision numbers entirely because here

119
00:06:20,530 --> 00:06:22,210
we have one variable which is obviously

120
00:06:22,210 --> 00:06:24,580
an integer and it doesn't make sense to

121
00:06:24,580 --> 00:06:27,640
use the whole floating-point number to

122
00:06:27,640 --> 00:06:31,450
represent it and here is an answer to

123
00:06:31,450 --> 00:06:35,130
all the questions

124
00:06:35,140 --> 00:06:42,020
so I actually skip the ski removed all

125
00:06:42,020 --> 00:06:45,200
the comments to make it fit on the slide

126
00:06:45,200 --> 00:06:48,650
actually v8 produces more than just this

127
00:06:48,650 --> 00:06:52,280
loop entry comment it actually annotates

128
00:06:52,280 --> 00:06:56,570
everything with like why did I produce

129
00:06:56,570 --> 00:07:00,800
this bunch of assembly here like there

130
00:07:00,800 --> 00:07:02,330
was an addition so I produce this

131
00:07:02,330 --> 00:07:04,820
instruction but here i will be your

132
00:07:04,820 --> 00:07:10,160
comment with a Russian accent so let's

133
00:07:10,160 --> 00:07:15,140
start so this is this is a comparison so

134
00:07:15,140 --> 00:07:17,860
they'll end the conditional branch

135
00:07:17,860 --> 00:07:21,350
somewhere obviously it corresponds to

136
00:07:21,350 --> 00:07:24,560
the loop condition because we will head

137
00:07:24,560 --> 00:07:27,800
like I less than array dot length so if

138
00:07:27,800 --> 00:07:29,540
we think a little bit about it it

139
00:07:29,540 --> 00:07:32,750
becomes obvious that aesi contains I

140
00:07:32,750 --> 00:07:35,169
andy sixx contains rate at length and

141
00:07:35,169 --> 00:07:39,080
this already answers our question there

142
00:07:39,080 --> 00:07:41,060
is no load of a rated lengths in the

143
00:07:41,060 --> 00:07:43,940
body and it sits in the register and

144
00:07:43,940 --> 00:07:47,450
obviously we ate somehow managed to move

145
00:07:47,450 --> 00:07:51,380
it out of the loop so sometimes guys who

146
00:07:51,380 --> 00:07:56,000
say your girls who say diversity that

147
00:07:56,000 --> 00:07:58,940
you don't have to cash lengths they are

148
00:07:58,940 --> 00:08:02,060
completely right then there is a bunch

149
00:08:02,060 --> 00:08:03,410
of code that we can just keep because

150
00:08:03,410 --> 00:08:05,390
there is no corresponding JavaScript

151
00:08:05,390 --> 00:08:08,120
code it was produced just to support

152
00:08:08,120 --> 00:08:10,850
such stuff like pausing the script

153
00:08:10,850 --> 00:08:12,860
execution with the pause button in the

154
00:08:12,860 --> 00:08:16,310
dev tools or terminating the busy loops

155
00:08:16,310 --> 00:08:18,710
when some evil guy ships you a page

156
00:08:18,710 --> 00:08:23,020
which has while to do something and

157
00:08:23,020 --> 00:08:26,330
chrome will pop up the windows that you

158
00:08:26,330 --> 00:08:28,310
ask you where they want to break this

159
00:08:28,310 --> 00:08:30,560
loop and this is this code so we can

160
00:08:30,560 --> 00:08:32,990
just keep it this is a load from the

161
00:08:32,990 --> 00:08:35,419
array you can see a bounced check we're

162
00:08:35,419 --> 00:08:37,400
checking whether something is inside the

163
00:08:37,400 --> 00:08:41,330
bounds so ESI contains I ebx apparently

164
00:08:41,330 --> 00:08:43,490
contains the lengths of a

165
00:08:43,490 --> 00:08:46,850
and ii IX apparently contains length of

166
00:08:46,850 --> 00:08:48,830
B and then there are loads of this

167
00:08:48,830 --> 00:08:51,680
double floating-point double precision

168
00:08:51,680 --> 00:08:55,100
values into XML registers so it looks

169
00:08:55,100 --> 00:08:57,230
very similar to what a C compiler would

170
00:08:57,230 --> 00:09:00,200
spread you so you could actually ask GCC

171
00:09:00,200 --> 00:09:03,110
to produce their assembly and compare it

172
00:09:03,110 --> 00:09:07,130
and it's pretty similar and here is a

173
00:09:07,130 --> 00:09:08,899
multiplication addition so you don't

174
00:09:08,899 --> 00:09:12,170
need a like any there is so you know

175
00:09:12,170 --> 00:09:14,540
there are three volume of overall your

176
00:09:14,540 --> 00:09:17,360
mental reference manuals and you don't

177
00:09:17,360 --> 00:09:18,770
actually need them to understand that

178
00:09:18,770 --> 00:09:22,300
this is a multiplication it says mal SD

179
00:09:22,300 --> 00:09:26,570
SD we can skip mal so and then there is

180
00:09:26,570 --> 00:09:29,149
an addition and you can notice that d it

181
00:09:29,149 --> 00:09:32,080
also sits in the register xmm too so

182
00:09:32,080 --> 00:09:34,610
everything looks very nice very tight

183
00:09:34,610 --> 00:09:37,399
very compact and then they do the loop

184
00:09:37,399 --> 00:09:40,700
increment so here somebody might have

185
00:09:40,700 --> 00:09:42,860
might ask wait wait a second wait

186
00:09:42,860 --> 00:09:44,450
javascript is a dynamically typed

187
00:09:44,450 --> 00:09:48,709
language and where is all the type

188
00:09:48,709 --> 00:09:51,020
checks and stuff like that there is

189
00:09:51,020 --> 00:09:53,180
nothing like this in the loop at all we

190
00:09:53,180 --> 00:09:55,399
just increment load but you don't check

191
00:09:55,399 --> 00:09:56,720
the types we don't check that the array

192
00:09:56,720 --> 00:09:59,450
is an array how does it happen well

193
00:09:59,450 --> 00:10:01,820
actually we it moved everything let's

194
00:10:01,820 --> 00:10:06,529
invariant like we know that a stays the

195
00:10:06,529 --> 00:10:08,390
same during the whole loop so all these

196
00:10:08,390 --> 00:10:10,459
checks they were moved out of the loop

197
00:10:10,459 --> 00:10:13,339
entirely and if you look was before the

198
00:10:13,339 --> 00:10:17,360
loop so the number 146 kind of indicates

199
00:10:17,360 --> 00:10:19,870
that there is something before that and

200
00:10:19,870 --> 00:10:22,040
there are a lot of stuff before that

201
00:10:22,040 --> 00:10:24,709
here is for example the load of length

202
00:10:24,709 --> 00:10:28,399
array that links properties so and he's

203
00:10:28,399 --> 00:10:30,170
this is the magical number that allows

204
00:10:30,170 --> 00:10:32,860
me to check whether something has a

205
00:10:32,860 --> 00:10:35,810
certain like shape this is called the

206
00:10:35,810 --> 00:10:37,339
hidden class so map in the eighth

207
00:10:37,339 --> 00:10:39,529
basically every object has this attached

208
00:10:39,529 --> 00:10:42,440
to it and then need only one instruction

209
00:10:42,440 --> 00:10:44,899
to say to determine whether something

210
00:10:44,899 --> 00:10:48,050
has the particular type and then if it

211
00:10:48,050 --> 00:10:50,660
does not have UD optimized so there was

212
00:10:50,660 --> 00:10:53,959
a talk about multiple tiered compilation

213
00:10:53,959 --> 00:10:56,570
in JavaScript code before and so it

214
00:10:56,570 --> 00:10:57,279
should be already

215
00:10:57,279 --> 00:11:00,399
Amelia with this term and there is a

216
00:11:00,399 --> 00:11:02,879
load so everything looks pretty

217
00:11:02,879 --> 00:11:09,009
understandable after a year or two so

218
00:11:09,009 --> 00:11:11,319
and here's the question how we do does

219
00:11:11,319 --> 00:11:15,069
that and the answer is pretty simple

220
00:11:15,069 --> 00:11:18,910
tons of this text but what this boils

221
00:11:18,910 --> 00:11:23,259
down to is actually that v8 observes the

222
00:11:23,259 --> 00:11:26,079
execution of your program somehow and

223
00:11:26,079 --> 00:11:29,680
then it adapts itself and the code to

224
00:11:29,680 --> 00:11:32,079
this execution so if you have stable

225
00:11:32,079 --> 00:11:34,839
types stable ranges for your variables

226
00:11:34,839 --> 00:11:38,199
we it would be will be able to adapt the

227
00:11:38,199 --> 00:11:40,980
code to get the most out of the

228
00:11:40,980 --> 00:11:43,509
execution like here we it adapted the

229
00:11:43,509 --> 00:11:51,040
loop to use like WebGL load from the

230
00:11:51,040 --> 00:11:53,110
WebGL erase because it have seen that

231
00:11:53,110 --> 00:11:58,449
this loads are loading doubles from the

232
00:11:58,449 --> 00:12:03,550
floor 64 a and the key thing here I

233
00:12:03,550 --> 00:12:08,500
inline caches so every thing that has

234
00:12:08,500 --> 00:12:11,529
dynamic her like behavior dynamic lookup

235
00:12:11,529 --> 00:12:14,559
built-in has a corresponding inline

236
00:12:14,559 --> 00:12:19,000
caching v8 and inline cash remembers

237
00:12:19,000 --> 00:12:21,069
what it have seen it's the whole goal of

238
00:12:21,069 --> 00:12:23,920
caching so when they tries to optimize

239
00:12:23,920 --> 00:12:26,470
this function it will just ask the

240
00:12:26,470 --> 00:12:28,930
inline cash what did have seen and then

241
00:12:28,930 --> 00:12:31,779
specialized the code for this

242
00:12:31,779 --> 00:12:34,649
information so different colors indicate

243
00:12:34,649 --> 00:12:40,139
like the yellow one so whatever this is

244
00:12:40,139 --> 00:12:45,000
is like a lookup of a property and

245
00:12:45,000 --> 00:12:49,120
purple I don't know what's pink pink

246
00:12:49,120 --> 00:12:53,829
ones are like numeric operations or

247
00:12:53,829 --> 00:12:58,600
comparisons and the other important

248
00:12:58,600 --> 00:13:00,850
moment is that we it makes optimistic

249
00:13:00,850 --> 00:13:05,009
assumptions about the code it compiles

250
00:13:05,009 --> 00:13:08,980
basically it says okay you used float64

251
00:13:08,980 --> 00:13:10,300
array and

252
00:13:10,300 --> 00:13:12,790
cash tells me this I will assume that

253
00:13:12,790 --> 00:13:16,330
this is always true and if this is not

254
00:13:16,330 --> 00:13:18,850
true i will just sorry guys this will

255
00:13:18,850 --> 00:13:21,790
run slow i will be optimized and this

256
00:13:21,790 --> 00:13:27,010
enables the whole basically this enables

257
00:13:27,010 --> 00:13:29,860
me to make the whole function fast path

258
00:13:29,860 --> 00:13:34,980
for the stable types and stable behavior

259
00:13:34,980 --> 00:13:38,140
so if you are not stable in your

260
00:13:38,140 --> 00:13:40,030
JavaScript programs and your tight

261
00:13:40,030 --> 00:13:42,210
computational kick kernels are not

262
00:13:42,210 --> 00:13:47,170
stable it typed this is not go this is

263
00:13:47,170 --> 00:13:53,170
not good I'm sorry okay so here is an

264
00:13:53,170 --> 00:13:54,820
example of optimistic assumption which

265
00:13:54,820 --> 00:13:57,280
v8 makes it doesn't like out of bounds

266
00:13:57,280 --> 00:14:01,510
reads from the typed arrays it just

267
00:14:01,510 --> 00:14:03,130
checks the bounce and then it does not

268
00:14:03,130 --> 00:14:05,470
try to handle this situation it just

269
00:14:05,470 --> 00:14:07,300
goes to some address which doesn't even

270
00:14:07,300 --> 00:14:09,850
belong to this function it goes to some

271
00:14:09,850 --> 00:14:12,790
deep cuts off fee to switch to none

272
00:14:12,790 --> 00:14:16,030
optimized code and twice this is the

273
00:14:16,030 --> 00:14:19,540
case why why is this the case on English

274
00:14:19,540 --> 00:14:23,710
is difficult language and the reason is

275
00:14:23,710 --> 00:14:25,120
very simple JavaScript has a very

276
00:14:25,120 --> 00:14:26,830
peculiar semantics as you might be aware

277
00:14:26,830 --> 00:14:29,170
if you do an out-of-bounds free it from

278
00:14:29,170 --> 00:14:32,470
the typed array I think you should do a

279
00:14:32,470 --> 00:14:36,310
prototype look up and go up rota type

280
00:14:36,310 --> 00:14:38,290
chain so you can write something like

281
00:14:38,290 --> 00:14:41,740
this very easily so you can have a gator

282
00:14:41,740 --> 00:14:44,140
on the object prototype for the property

283
00:14:44,140 --> 00:14:47,530
called too and if you make a floater 64

284
00:14:47,530 --> 00:14:49,420
array of a length 1 and look up the

285
00:14:49,420 --> 00:14:55,190
property to you will get getter executed

286
00:14:55,200 --> 00:14:57,610
that's why you don't want to implement

287
00:14:57,610 --> 00:15:00,010
this in Fast Pass it will just make the

288
00:15:00,010 --> 00:15:02,500
whole loop huge if you start handling

289
00:15:02,500 --> 00:15:06,880
these cases and it will also it will not

290
00:15:06,880 --> 00:15:10,300
allow me to like assume that after the

291
00:15:10,300 --> 00:15:12,430
load from the array there is there were

292
00:15:12,430 --> 00:15:16,150
no side effects at all by then this

293
00:15:16,150 --> 00:15:18,040
basically inhibits all optimizations if

294
00:15:18,040 --> 00:15:21,059
we ate can't assume that so

295
00:15:21,059 --> 00:15:24,599
this is the this explains why we does a

296
00:15:24,599 --> 00:15:27,959
lot of local assumptions here somebody

297
00:15:27,959 --> 00:15:30,689
evil or maybe not so evil moderately

298
00:15:30,689 --> 00:15:34,409
evil might ask what if I write the code

299
00:15:34,409 --> 00:15:37,139
like this to add a function call to the

300
00:15:37,139 --> 00:15:40,349
mix and if there is a function called v8

301
00:15:40,349 --> 00:15:42,749
can't do anything because it makes local

302
00:15:42,749 --> 00:15:46,439
assumptions obviously can i defeat v8 I

303
00:15:46,439 --> 00:15:50,489
want to defeat we 80 year and the answer

304
00:15:50,489 --> 00:15:54,449
is no no not so simple my friend we does

305
00:15:54,449 --> 00:15:57,449
in line of functions as well so yes it

306
00:15:57,449 --> 00:15:59,369
can't do anything across cause but if it

307
00:15:59,369 --> 00:16:01,769
knows the target of the call it will in

308
00:16:01,769 --> 00:16:04,049
line it and the inline code will be

309
00:16:04,049 --> 00:16:06,629
accessible for the analysis it will

310
00:16:06,629 --> 00:16:10,529
analyze and it will see that there is no

311
00:16:10,529 --> 00:16:12,449
side effects and stuff like that so

312
00:16:12,449 --> 00:16:14,279
that's what happens here so the cold

313
00:16:14,279 --> 00:16:15,989
almost didn't change because the

314
00:16:15,989 --> 00:16:18,569
function is in line but of course if you

315
00:16:18,569 --> 00:16:20,189
look before the loop then there will be

316
00:16:20,189 --> 00:16:22,109
a piece of code that checks that the

317
00:16:22,109 --> 00:16:23,819
target of the call is the same and you

318
00:16:23,819 --> 00:16:25,439
can also notice that this check was

319
00:16:25,439 --> 00:16:27,119
moved out of the loop as well like all

320
00:16:27,119 --> 00:16:32,909
other checks so now I will try to scare

321
00:16:32,909 --> 00:16:34,649
away in lining so there are constructs

322
00:16:34,649 --> 00:16:37,379
that Lee does not like because there's

323
00:16:37,379 --> 00:16:39,959
Carrie and one of the scary constructs

324
00:16:39,959 --> 00:16:46,619
ease with which is all scary and yes it

325
00:16:46,619 --> 00:16:49,019
it is so scary that the proper use code

326
00:16:49,019 --> 00:16:51,419
is also scary because it scared away in

327
00:16:51,419 --> 00:16:54,779
lining and v8 had to produce some pretty

328
00:16:54,779 --> 00:16:57,479
generic code for the loop so instead of

329
00:16:57,479 --> 00:16:59,129
looking at the generated code I

330
00:16:59,129 --> 00:17:01,229
encourage you in this case is to look at

331
00:17:01,229 --> 00:17:03,419
the high level intermediate

332
00:17:03,419 --> 00:17:05,819
representation used during optimization

333
00:17:05,819 --> 00:17:08,189
it's much less scary than the native

334
00:17:08,189 --> 00:17:11,220
code and much more verbose so this is an

335
00:17:11,220 --> 00:17:14,970
example of this or both stuff disregards

336
00:17:14,970 --> 00:17:19,199
faiz they are coming from something

337
00:17:19,199 --> 00:17:22,579
called single static assignment form and

338
00:17:22,579 --> 00:17:25,399
what we should pay attention to is this

339
00:17:25,399 --> 00:17:28,799
stuff this is an invocation of our

340
00:17:28,799 --> 00:17:31,649
function called mal and it has this

341
00:17:31,649 --> 00:17:34,040
scary changes

342
00:17:34,040 --> 00:17:36,530
square brackets star thing it says that

343
00:17:36,530 --> 00:17:38,300
we it can't su menacing a decent

344
00:17:38,300 --> 00:17:40,280
vacation because it can change

345
00:17:40,280 --> 00:17:44,930
everything and of course we it can't

346
00:17:44,930 --> 00:17:48,080
optimize anything across the the

347
00:17:48,080 --> 00:17:49,820
indication of this function because it

348
00:17:49,820 --> 00:17:52,810
no knows nothing about side effects like

349
00:17:52,810 --> 00:17:55,100
what will happen what if somebody will

350
00:17:55,100 --> 00:17:58,580
define a property on them like float64

351
00:17:58,580 --> 00:18:02,170
array which also has a gator or whatever

352
00:18:02,170 --> 00:18:06,410
so the load of the length property now

353
00:18:06,410 --> 00:18:10,100
in the loop so they did not manage to

354
00:18:10,100 --> 00:18:12,680
hoist it out and there is untagging

355
00:18:12,680 --> 00:18:14,570
which you can disregard and there is

356
00:18:14,570 --> 00:18:16,880
this strange stuff so we call the

357
00:18:16,880 --> 00:18:21,770
malfunction and then returns t46 which

358
00:18:21,770 --> 00:18:24,740
will then convert to double so t46 is a

359
00:18:24,740 --> 00:18:27,820
boxed double and we need to extract the

360
00:18:27,820 --> 00:18:32,000
double which sits in the box take it and

361
00:18:32,000 --> 00:18:34,430
then they all sorry and then actually do

362
00:18:34,430 --> 00:18:37,910
a an addition on the doubles so you can

363
00:18:37,910 --> 00:18:40,430
see that so when we inhibited these

364
00:18:40,430 --> 00:18:43,340
optimizations by scaring away the

365
00:18:43,340 --> 00:18:47,780
inlining we could not avoid boxing on

366
00:18:47,780 --> 00:18:50,540
the boundary of the function call and it

367
00:18:50,540 --> 00:18:53,840
could not host out the lengths load from

368
00:18:53,840 --> 00:18:57,980
the rail loop so the know the advice

369
00:18:57,980 --> 00:18:59,500
here is that if you have a tight

370
00:18:59,500 --> 00:19:02,150
computational kernels you should ensure

371
00:19:02,150 --> 00:19:05,090
that we it is able to inline all the

372
00:19:05,090 --> 00:19:06,380
functions that you are calling these

373
00:19:06,380 --> 00:19:08,810
tight computational kernels usually it

374
00:19:08,810 --> 00:19:10,370
is able but you should check that out

375
00:19:10,370 --> 00:19:13,370
and some people see like maybe ten

376
00:19:13,370 --> 00:19:15,800
twenty percent improvement if they are

377
00:19:15,800 --> 00:19:17,750
then lined by hand what we decided that

378
00:19:17,750 --> 00:19:20,120
it can't in line for some reason or just

379
00:19:20,120 --> 00:19:22,520
make it suitable for in line and this

380
00:19:22,520 --> 00:19:24,910
all is visible under like high level

381
00:19:24,910 --> 00:19:28,910
representations and stuff ok now let's

382
00:19:28,910 --> 00:19:35,180
quickly go through this case so I remove

383
00:19:35,180 --> 00:19:39,170
the type to race entirely because some

384
00:19:39,170 --> 00:19:42,800
people ask her we heard that typed

385
00:19:42,800 --> 00:19:44,000
arrays are more efficient yes they were

386
00:19:44,000 --> 00:19:47,100
but now we are working on enabling v

387
00:19:47,100 --> 00:19:49,980
to understand when your array contains

388
00:19:49,980 --> 00:19:52,260
only numbers on the doubles and unbox it

389
00:19:52,260 --> 00:19:54,570
automatically so you wouldn't table you

390
00:19:54,570 --> 00:19:58,350
would not need to use verbose flow 64a

391
00:19:58,350 --> 00:20:01,490
just write a normal JavaScript code and

392
00:20:01,490 --> 00:20:04,169
this is the Chi removed all the codes

393
00:20:04,169 --> 00:20:08,100
left only the loads from the array so it

394
00:20:08,100 --> 00:20:09,539
looks pretty similar to what we have

395
00:20:09,539 --> 00:20:12,809
seen in the load from type theory but

396
00:20:12,809 --> 00:20:14,850
there is some strange stuff they're

397
00:20:14,850 --> 00:20:16,650
still in addition to it like comparison

398
00:20:16,650 --> 00:20:19,590
is some strange constant and this is

399
00:20:19,590 --> 00:20:24,450
because float this is because normal

400
00:20:24,450 --> 00:20:26,250
JavaScript arrays they can contain holes

401
00:20:26,250 --> 00:20:31,530
and if you load something from the

402
00:20:31,530 --> 00:20:33,960
nimbus which is the whole you have to go

403
00:20:33,960 --> 00:20:35,610
up through prototype and we in the v8

404
00:20:35,610 --> 00:20:38,370
again does not support that so for typed

405
00:20:38,370 --> 00:20:39,809
arrays we know that there are no holes

406
00:20:39,809 --> 00:20:44,520
but for GS erase that were unboxed they

407
00:20:44,520 --> 00:20:46,049
can still contain holes like you can

408
00:20:46,049 --> 00:20:48,990
delete the property with index 2 and we

409
00:20:48,990 --> 00:20:51,419
don't want to convert the array if you

410
00:20:51,419 --> 00:20:53,580
delete one element there we don't want

411
00:20:53,580 --> 00:20:56,070
to convert it to a hash table because

412
00:20:56,070 --> 00:20:59,150
this is an insanity so we use a special

413
00:20:59,150 --> 00:21:04,919
non-value to indicate that this is a

414
00:21:04,919 --> 00:21:07,710
hole because the non values are very

415
00:21:07,710 --> 00:21:10,049
nice you can have different names even

416
00:21:10,049 --> 00:21:11,690
if you can't observe that from

417
00:21:11,690 --> 00:21:14,220
JavaScript so we use a special name to

418
00:21:14,220 --> 00:21:18,140
detect that and this is the whole name

419
00:21:18,140 --> 00:21:22,860
okay anyways yeah this is what we do and

420
00:21:22,860 --> 00:21:25,350
here one can also suggest for example

421
00:21:25,350 --> 00:21:27,240
and then submit as a change list which

422
00:21:27,240 --> 00:21:29,909
we will accept and land maybe I'm pretty

423
00:21:29,909 --> 00:21:32,760
sure we will that tracks the denseness

424
00:21:32,760 --> 00:21:35,159
of the name of an array because it will

425
00:21:35,159 --> 00:21:37,289
have to remove these holes checks and

426
00:21:37,289 --> 00:21:40,350
make the loop even tighter and more

427
00:21:40,350 --> 00:21:43,140
concise and faster obviously and

428
00:21:43,140 --> 00:21:45,630
everybody who does computation in pure

429
00:21:45,630 --> 00:21:47,659
JavaScript will be happy and praise you

430
00:21:47,659 --> 00:21:50,280
so please do this if you want to

431
00:21:50,280 --> 00:21:55,480
experience something beautiful

432
00:21:55,490 --> 00:21:59,790
now this example there was this applied

433
00:21:59,790 --> 00:22:03,990
arguments which I removed and so I do

434
00:22:03,990 --> 00:22:05,910
test which creates this new class with a

435
00:22:05,910 --> 00:22:08,520
class constructor which has this dot a

436
00:22:08,520 --> 00:22:11,100
neat apply these arguments in sighs okay

437
00:22:11,100 --> 00:22:13,740
who thinks that this can be as efficient

438
00:22:13,740 --> 00:22:18,390
as a old-school constructor one person

439
00:22:18,390 --> 00:22:20,550
you don't believe in the eighth it can

440
00:22:20,550 --> 00:22:23,400
be there is no apply at all if we look

441
00:22:23,400 --> 00:22:25,710
at the high level representation that

442
00:22:25,710 --> 00:22:27,660
something we did recently so there is an

443
00:22:27,660 --> 00:22:30,000
object allocation then we in line vector

444
00:22:30,000 --> 00:22:33,410
function and then we load init function

445
00:22:33,410 --> 00:22:36,390
then we do a couple of checks directly

446
00:22:36,390 --> 00:22:38,250
push the arguments because we are in the

447
00:22:38,250 --> 00:22:39,930
inline context so we know how many

448
00:22:39,930 --> 00:22:41,700
arguments are there there is no need to

449
00:22:41,700 --> 00:22:43,530
materialize have been subject at all and

450
00:22:43,530 --> 00:22:45,480
the semantics of the apply function is

451
00:22:45,480 --> 00:22:48,180
known and inline cash tells us that it's

452
00:22:48,180 --> 00:22:50,970
always an apply so we can just in line

453
00:22:50,970 --> 00:22:53,130
everything and directly invoke the

454
00:22:53,130 --> 00:22:55,170
function so yes we can apply it

455
00:22:55,170 --> 00:22:59,840
completely gun and this example

456
00:22:59,840 --> 00:23:03,060
unfortunately not now so I had to

457
00:23:03,060 --> 00:23:04,380
include something that we can't do

458
00:23:04,380 --> 00:23:06,000
otherwise it would look that way it can

459
00:23:06,000 --> 00:23:07,560
do everything which is obviously not

460
00:23:07,560 --> 00:23:13,050
true and but actually the whole

461
00:23:13,050 --> 00:23:16,260
crankshaft pipeline was developed with a

462
00:23:16,260 --> 00:23:17,850
thought in mind that you can do all

463
00:23:17,850 --> 00:23:22,260
kinds of strange optimizations then this

464
00:23:22,260 --> 00:23:23,790
optimization is available kind of

465
00:23:23,790 --> 00:23:25,380
well-known optimization the functional

466
00:23:25,380 --> 00:23:28,740
programming world when you combine

467
00:23:28,740 --> 00:23:31,380
several high-level function in vacations

468
00:23:31,380 --> 00:23:34,710
into a one tight loop so if you do this

469
00:23:34,710 --> 00:23:38,370
plumbing so the infrastructure is there

470
00:23:38,370 --> 00:23:40,650
which allows you to say this is the map

471
00:23:40,650 --> 00:23:43,230
function this is a reduced function and

472
00:23:43,230 --> 00:23:45,420
you know there is semantics so you can

473
00:23:45,420 --> 00:23:47,870
just transform it into a loop like that

474
00:23:47,870 --> 00:23:50,910
with some additional plumping I can't

475
00:23:50,910 --> 00:23:53,550
say what's the length length of the pipe

476
00:23:53,550 --> 00:23:55,890
that you need to stack their to do that

477
00:23:55,890 --> 00:23:59,850
but it's doable so we accept patches as

478
00:23:59,850 --> 00:24:01,770
i said i'm looking forward to see one

479
00:24:01,770 --> 00:24:04,500
and there is this site which i will skip

480
00:24:04,500 --> 00:24:07,610
and proceed to the questions and answers

