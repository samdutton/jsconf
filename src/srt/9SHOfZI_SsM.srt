1
00:00:01,870 --> 00:00:05,730
Let's Go Big
Alexander Reardon

2
00:00:33,719 --> 00:00:34,719
ALEXANDER: Hello, yes.

3
00:00:34,719 --> 00:00:38,590
Yes, as mentioned I am going to be talking
to you all about big numbers, so these are

4
00:00:38,590 --> 00:00:44,800
numbers that are bigger than what we can naturally
do in JavaScript by default.

5
00:00:44,800 --> 00:00:46,460
That's my Twitter handle there if you want
to find me.

6
00:00:46,460 --> 00:00:51,359
I was pretty late to the party in terms of
Twitter so the last letter of my first name

7
00:00:51,359 --> 00:00:55,840
and last name are collapsed but you can find
me there.

8
00:00:55,840 --> 00:00:56,840
Just a bit of a warning.

9
00:00:56,840 --> 00:00:59,710
There will be some math in this talk.

10
00:00:59,710 --> 00:01:03,032
It's kind of hard to talk about big numbers
without talking about math but I will try

11
00:01:03,032 --> 00:01:06,310
to keep it as easy and light as I can.

12
00:01:06,310 --> 00:01:07,310
So firstly, numbers.

13
00:01:07,310 --> 00:01:08,730
What are their characteristics?

14
00:01:08,730 --> 00:01:11,980
What are the defining features about numbers?

15
00:01:11,980 --> 00:01:17,430
So firstly we want to be able to store some
value that then we want to retrieve at some

16
00:01:17,430 --> 00:01:23,040
later point, potentially print it out on an
user interface, but really the unique and

17
00:01:23,040 --> 00:01:27,630
defining characteristic of numbers is the
ability to do operations on those numbers,

18
00:01:27,630 --> 00:01:33,300
these pre-defined mathematical things, so
things like addition, subtraction, multiplication

19
00:01:33,300 --> 00:01:34,300
and division.

20
00:01:34,300 --> 00:01:43,230
Now, JavaScript only has one number type and's
a 64 bit, and this isn't unique to JavaScript,

21
00:01:43,230 --> 00:01:48,130
you will find it in other languages like Ruby
and Python.

22
00:01:48,130 --> 00:01:52,230
So let's look deeper.

23
00:01:52,230 --> 00:01:59,290
64 bits, this is the first bit we use to control
the signs, positive or negative.

24
00:01:59,290 --> 00:02:04,510
The next 11 bits, I like to think of them
as the scale, so this is how big or small

25
00:02:04,510 --> 00:02:10,610
the number is and then the last 52 bits control
the actual value of the number.

26
00:02:10,610 --> 00:02:17,650
Now, I've got 52 bits written there because
it sort of has 53 bits in that it assumes

27
00:02:17,650 --> 00:02:23,349
53 but the first bit is always 1 so we can
store 53 bits of information there but we

28
00:02:23,349 --> 00:02:28,980
only have 52 bits and this number system is
very similar to scientific notation.

29
00:02:28,980 --> 00:02:37,879
So you have a value, in this case 8.12, and
times by some scale to give us our result,

30
00:02:37,879 --> 00:02:41,609
and this is exactly how floating point numbers
work as well.

31
00:02:41,609 --> 00:02:46,849
Now, I mentioned we have 53 bits and it's
no coincidence that the maximum value we can

32
00:02:46,849 --> 00:02:52,700
store inside these numbers, this is what happens
when we set all of those in the value components

33
00:02:52,700 --> 00:02:54,989
to 1, we get 2 to the 53 minus 1.

34
00:02:54,989 --> 00:03:02,510
That's our maximum value that we could store
and if you have seen that number around but

35
00:03:02,510 --> 00:03:12,620
you didn't know where it came from, it's number
dot max safe integer, is what it is.

36
00:03:12,620 --> 00:03:20,579
We get this huge number here known as number
dot max value but it's kind of a bit useless

37
00:03:20,579 --> 00:03:26,930
for what we want to do in that if you have
a number, say in this case this, and you add

38
00:03:26,930 --> 00:03:30,920
one, you get what you expect but if you add
one again you get something you didn't expect,

39
00:03:30,920 --> 00:03:37,180
it doesn't do anything and you get all this
weirdness.

40
00:03:37,180 --> 00:03:41,389
For our purposes we are going to say because
the defining characteristic of numbers was

41
00:03:41,389 --> 00:03:45,870
these operations we really don't want to be
going above that number or we will have unexpected

42
00:03:45,870 --> 00:03:48,819
consequences so that's where JavaScript is.

43
00:03:48,819 --> 00:03:54,359
Now, let's think about how we could go bigger,
how we could push numbers to both store numbers

44
00:03:54,359 --> 00:03:59,999
much bigger than max safe integer and do operations
on them.

45
00:03:59,999 --> 00:04:05,080
You might ask why would I be interested or
care about big numbers?

46
00:04:05,080 --> 00:04:12,290
There are valid and practical uses for big
numbers, say if you are dealing with big distances,

47
00:04:12,290 --> 00:04:19,980
say astronomical units, or you are doing any
accumulation of big historical data so say

48
00:04:19,980 --> 00:04:24,340
counting the number of characters in tweets
over a period of years you might start to

49
00:04:24,340 --> 00:04:29,160
run into these problems as you keep piling
counts on counts.

50
00:04:29,160 --> 00:04:33,120
Another common use case is if you are shifting
decimals, so say you have a decimal value

51
00:04:33,120 --> 00:04:39,020
you want to shift to become an integer value,
you might hit these problems.

52
00:04:39,020 --> 00:04:42,229
But really it's a bit of fun.

53
00:04:42,229 --> 00:04:48,650
It's to see how far we could push this idea,
overcome this limitation of 64 bit floating

54
00:04:48,650 --> 00:04:51,840
numbers and it's also a bit of a challenge
for us as well and hopefully we will learn

55
00:04:51,840 --> 00:04:54,620
a lot by trying to overcome these barriers.

56
00:04:54,620 --> 00:04:57,740
There's a lot of different ways of doing big
numbers.

57
00:04:57,740 --> 00:05:04,310
I will link this on Twitter afterwards, but
it has a few other ways of doing them, and

58
00:05:04,310 --> 00:05:07,110
hopefully after this talk you will see that
there are probably lots of different ways

59
00:05:07,110 --> 00:05:13,090
that I didn't even explore about doing big
numbers so let's get into it.

60
00:05:13,090 --> 00:05:18,270
This is my first technique and probably the
most basic but very interesting, and that's

61
00:05:18,270 --> 00:05:22,979
converting numbers into strings, so say we
have the number 125, we simply convert it

62
00:05:22,979 --> 00:05:24,810
to the string 125.

63
00:05:24,810 --> 00:05:30,470
This is really easy, we take a number and
convert it to the string, this is the format

64
00:05:30,470 --> 00:05:35,479
of that system and by doing this simple trick
how big can we go?

65
00:05:35,479 --> 00:05:42,660
So say we have three slots the biggest number
we can store in three slots is 999 and in

66
00:05:42,660 --> 00:05:50,409
a more general sense if we had n slots we
could store 10 to the n minus 1.

67
00:05:50,409 --> 00:05:53,629
Which raises a question: how long is a string?

68
00:05:53,629 --> 00:05:55,159
How big can these things be?

69
00:05:55,159 --> 00:05:57,570
The answer today is pretty vague.

70
00:05:57,570 --> 00:06:00,770
It's not locked down in any spec anywhere.

71
00:06:00,770 --> 00:06:05,819
But if you test in browsers and Node you will
find this is a safe power to use, to the power

72
00:06:05,819 --> 00:06:07,449
of 27.

73
00:06:07,449 --> 00:06:14,440
That's safe and consistent so that's what
we will use today.

74
00:06:14,440 --> 00:06:25,870
it will be this but today we will be using
to the power of 27.

75
00:06:25,870 --> 00:06:33,190
So what does that even mean, how big have
we gone?

76
00:06:33,190 --> 00:06:38,419
I've come up with this analogy which I will
use for the rest of the talk as well.

77
00:06:38,419 --> 00:06:43,220
So say we had a sheet of paper and on that
sheet of paper we start writing numbers so

78
00:06:43,220 --> 00:06:49,420
on the first line we write 1, then 1,000 on
the next line, a million on the line after

79
00:06:49,420 --> 00:06:51,280
that, a billion, and so on.

80
00:06:51,280 --> 00:06:54,240
And each line is a centimetre big.

81
00:06:54,240 --> 00:06:59,650
The thing to note is that each centimetre
is a thousand times bigger in value than the

82
00:06:59,650 --> 00:07:02,340
centimetre before it.

83
00:07:02,340 --> 00:07:11,669
So with JavaScript numbers we can get 6cm
down this page until we hit that max safe

84
00:07:11,669 --> 00:07:13,139
integer.

85
00:07:13,139 --> 00:07:20,509
If we use this string method it would take
474km worth of paper to store this number

86
00:07:20,509 --> 00:07:24,750
which is staggering when you consider that
each centimetre is a thousand times bigger

87
00:07:24,750 --> 00:07:29,610
in value than the centimetre before it so
this is a really simple technique and we've

88
00:07:29,610 --> 00:07:33,889
completely blown away that max value that
we had before.

89
00:07:33,889 --> 00:07:41,071
So it's from here to Berlin and back twice,
with each centimetre being bigger than the

90
00:07:41,071 --> 00:07:42,449
one before it.

91
00:07:42,449 --> 00:07:50,409
This is a table I am going to keep referring
to as we go to record our progress, so simply

92
00:07:50,409 --> 00:07:54,960
switching to decimal strings we have a huge
increase in scale.

93
00:07:54,960 --> 00:08:00,969
You might think that's great but really what
we care about with numbers is the ability

94
00:08:00,969 --> 00:08:03,360
to do operations.

95
00:08:03,360 --> 00:08:08,469
I think the screen has gone.

96
00:08:08,469 --> 00:08:20,630
Here we go, so say we wanted to do addition,
with two strings, so we have a string, 256

97
00:08:20,630 --> 00:08:26,090
and 182, how do we even begin to start doing
addition with these numbers?

98
00:08:26,090 --> 00:08:29,960
Well, we could look at the first column on
the right.

99
00:08:29,960 --> 00:08:34,990
We want to add 6 and 2 and we could create
some system where the character 6 plus the

100
00:08:34,990 --> 00:08:40,229
character 2 yields the character 8 and not
do any math but because these are small integer

101
00:08:40,229 --> 00:08:46,250
values we could lean on JavaScript numbers
under the hood to do these small, safe operations

102
00:08:46,250 --> 00:08:47,250
so we will do that for convenience.

103
00:08:47,250 --> 00:08:51,360
So we have 6 and 2 and get 8.

104
00:08:51,360 --> 00:08:54,649
Move to the left and we have 5 plus 8 which
gives us 13.

105
00:08:54,649 --> 00:09:00,760
We have a problem because we can't store 13
in one column so we do primary school mathematics

106
00:09:00,760 --> 00:09:08,029
where we can subtract 10, carry 1 and [audio
problem] ... and carry that number to the

107
00:09:08,029 --> 00:09:13,360
next column, we have one, plus, two, plus
one, which gives us 4.

108
00:09:13,360 --> 00:09:17,930
We are able to add these strings which is
pretty fun.

109
00:09:17,930 --> 00:09:22,000
What's interesting is that was a really nice
algorithm, looking at two numbers at the time

110
00:09:22,000 --> 00:09:24,630
and constantly shifting down the number.

111
00:09:24,630 --> 00:09:26,130
Let's take a look at subtraction.

112
00:09:26,130 --> 00:09:32,540
This one is a little bit harder so say we
have 4,005 and want to subtract 11 from it.

113
00:09:32,540 --> 00:09:41,880
So 5 minus 1 gives us 4, then zero minus 1,
we can't really do that so we start with a

114
00:09:41,880 --> 00:09:45,931
lookup phase so we start looking down the
number until we find something that we can

115
00:09:45,931 --> 00:09:47,790
borrow something from.

116
00:09:47,790 --> 00:09:51,800
So we found 4, we take one from that, we can
carry a 10 back.

117
00:09:51,800 --> 00:09:55,550
Now we can take something interest that so
that becomes a 9 and we can carry 1 over and

118
00:09:55,550 --> 00:10:02,310
now we can do something, we can take 1 from
10 which gives us 9.

119
00:10:02,310 --> 00:10:07,829
Then shifting down again we have 9 minus 0
which gives us 9 and 3 minus 0 which gives

120
00:10:07,829 --> 00:10:08,829
us 3.

121
00:10:08,829 --> 00:10:10,300
Okay, we've got our answer.

122
00:10:10,300 --> 00:10:12,019
But that was kind of gross, right?

123
00:10:12,019 --> 00:10:17,260
We had to start shifting down, then did this
search, then come back, and then search again

124
00:10:17,260 --> 00:10:20,560
and if these were really big numbers this
could be extremely inefficient.

125
00:10:20,560 --> 00:10:22,970
You might be searching back and forth, back
and forth a lot.

126
00:10:22,970 --> 00:10:29,850
So this is much different to what we had with
addition where we were simply moving down

127
00:10:29,850 --> 00:10:31,620
two digits at a time.

128
00:10:31,620 --> 00:10:36,420
So that's just something to keep in your mind
that that's a pain point for this system.

129
00:10:36,420 --> 00:10:37,420
Now let's look at multiplication.

130
00:10:37,420 --> 00:10:38,490
Bear with me.

131
00:10:38,490 --> 00:10:42,820
There is not too much heavy math more to go.

132
00:10:42,820 --> 00:10:48,519
So multiplication: we could write a multiplication
algorithm but really once you have addition

133
00:10:48,519 --> 00:10:55,300
you can deduce multiplication for free.

134
00:10:55,300 --> 00:11:03,240
So you had 0, we add 10, we add 10, we are
done, you have an answer.

135
00:11:03,240 --> 00:11:06,019
We could just leverage that addition function
we already had.

136
00:11:06,019 --> 00:11:11,560
Admittedly it's not super-performant but you
have the idea.

137
00:11:11,560 --> 00:11:12,560
Addition.

138
00:11:12,560 --> 00:11:18,430
Same idea except now we are going to keep
subtracting from this number until we can't

139
00:11:18,430 --> 00:11:19,990
subtract anymore.

140
00:11:19,990 --> 00:11:25,680
We start with number 6, subtract 2, subtract
2, subtract 2, we can't subtract anymore,

141
00:11:25,680 --> 00:11:34,860
but we can count the number of times we subtract
and so the answer is 3.

142
00:11:34,860 --> 00:11:38,940
By having addition and subtraction we were
able to get division and multiplication for

143
00:11:38,940 --> 00:11:40,019
free which is great.

144
00:11:40,019 --> 00:11:45,959
So as soon as we create a system with addition
and subtraction we can create one that has

145
00:11:45,959 --> 00:11:48,130
division and multiplication as well.

146
00:11:48,130 --> 00:11:49,980
So we did pretty well.

147
00:11:49,980 --> 00:11:54,699
We created a system which has a huge number
value as well as being able to do this pre-confined

148
00:11:54,699 --> 00:12:00,519
mathematical operation, and we built this
system - again I will tweet this link at the

149
00:12:00,519 --> 00:12:05,900
end - if you are interested you can have an
play with it and it works for decimals and

150
00:12:05,900 --> 00:12:11,790
negative values too, so have a play with that.

151
00:12:11,790 --> 00:12:18,831
Note I've said do not use in production, I
haven't tested it or anything, but have a

152
00:12:18,831 --> 00:12:20,709
look at that.

153
00:12:20,709 --> 00:12:29,279
So the next technique is binary strings, so
this is the binary representation, a 8-bit

154
00:12:29,279 --> 00:12:31,339
representation of the number.

155
00:12:31,339 --> 00:12:40,149
The max value is ... and why it's minus 1
is because I'm storing the binary in a format

156
00:12:40,149 --> 00:12:45,199
called two's complement and I will explain
why that's important in a sec.

157
00:12:45,199 --> 00:12:51,490
So now we have a bigger value than we started
with, with numbers but a smaller value than

158
00:12:51,490 --> 00:12:52,570
our base 10 system.

159
00:12:52,570 --> 00:13:01,459
That's because we are in base 2 and can't
store as much information but it's still 1,347

160
00:13:01,459 --> 00:13:07,170
kilometres on this sheet of paper with every
centimetre being a thousand times bigger so

161
00:13:07,170 --> 00:13:12,660
still a very big number but let's take a look
at subtraction in this system.

162
00:13:12,660 --> 00:13:18,350
So we have the number 5 and minus 3 in binary
and we know this is going to give us 2 and

163
00:13:18,350 --> 00:13:23,889
we can use this method called the two's complement
to model this in a different way so first

164
00:13:23,889 --> 00:13:29,500
of all what we do is we flip the bits and
we add one, and then we can see if we can

165
00:13:29,500 --> 00:13:34,970
just add like we would before, so in binary
addition one plus one, you carry the one and

166
00:13:34,970 --> 00:13:40,449
you leave a zero, so we go over, now we have
1 in this column, this carry situation again,

167
00:13:40,449 --> 00:13:43,380
1 plus 1, so zero and carry the 1.

168
00:13:43,380 --> 00:13:49,589
Now we have 1 plus 1 again, we put 0 but we
are carrying a 1 into this area we don't care

169
00:13:49,589 --> 00:13:54,899
about called the overflow bit and you just
throw it away.

170
00:13:54,899 --> 00:14:01,570
What's interesting is we've ended up with
the number 2 so even though we had this subtraction

171
00:14:01,570 --> 00:14:05,540
problem we were able to model it using addition.

172
00:14:05,540 --> 00:14:11,420
So we started with subtraction, we flipped
the bits - oh, you can see the animation but

173
00:14:11,420 --> 00:14:12,420
I can't.

174
00:14:12,420 --> 00:14:14,079
So we actually ended up looking at it like
this.

175
00:14:14,079 --> 00:14:18,750
We have been able to model subtraction as
if we are doing addition which is a really

176
00:14:18,750 --> 00:14:21,589
nice way of looking at the problem.

177
00:14:21,589 --> 00:14:22,589
Let's go bigger.

178
00:14:22,589 --> 00:14:23,639
Where can we go from binary strings?

179
00:14:23,639 --> 00:14:32,670
We can look at hexidecimal strings.

180
00:14:32,670 --> 00:14:38,769
Hex is just a mapping 0 through 9 and 0 through
9 and A through F is 10 through 16 so we can

181
00:14:38,769 --> 00:14:46,800
store values in each slot of a string so now
we have this new max value of 16 to the n

182
00:14:46,800 --> 00:14:52,370
minus 1 which is bigger than we had in decimal
but it will have a bad subtraction story,

183
00:14:52,370 --> 00:14:57,660
but we are now moving in the direction of
trying to chase bigger and bigger numbers

184
00:14:57,660 --> 00:15:00,130
so this one is now 5037km on paper.

185
00:15:00,130 --> 00:15:11,340
This leads to 
the question: what could we store in the slot

186
00:15:11,340 --> 00:15:15,080
of a string, what's the maximum thing?

187
00:15:15,080 --> 00:15:21,420
This leads to my final technique, 16 bit strings
and to understand this we need to understand

188
00:15:21,420 --> 00:15:23,880
how strings work a little bit better.

189
00:15:23,880 --> 00:15:29,339
To understand strings we need to understand
Unicode so Unicode is really simple, just

190
00:15:29,339 --> 00:15:33,410
a map of symbols to integers or symbols to
code points.

191
00:15:33,410 --> 00:15:40,149
Code points, they just decided arbitrarily
that these symbols map to these integers,

192
00:15:40,149 --> 00:15:44,899
that's all it is, and there's about 1.1 million
of them.

193
00:15:44,899 --> 00:15:50,480
JavaScript is a language that has decided
that it's going to treat every 16 bit unit

194
00:15:50,480 --> 00:15:55,630
of a string as one character, and I am going
to show you what that means.

195
00:15:55,630 --> 00:16:02,370
Let's start with this string, the letter E.
It equates to the Unicode integer of 101.

196
00:16:02,370 --> 00:16:07,149
You can pull that out from the string and
it's going to give you that integer back but

197
00:16:07,149 --> 00:16:15,759
you will see in hexidecimal, it has a length
of 1.

198
00:16:15,759 --> 00:16:22,240
This will be true for any character that has
a Unicode code point between 0 and 2 to the

199
00:16:22,240 --> 00:16:24,009
power of 16.

200
00:16:24,009 --> 00:16:29,080
Things get interesting when we start to move
to characters that are bigger than to the

201
00:16:29,080 --> 00:16:30,800
power of 16 in integer value.

202
00:16:30,800 --> 00:16:35,610
So in this case we have an emoji which equates
to a code point and you will see that it actually

203
00:16:35,610 --> 00:16:39,100
equals in JavaScript two different Unicode
strings.

204
00:16:39,100 --> 00:16:44,500
It has a length of 2 so even though visually
to us it seems like it's one character according

205
00:16:44,500 --> 00:16:48,120
to JavaScript as a language that we deal with
it's two.

206
00:16:48,120 --> 00:16:54,170
This gets even more crazy when you start to
introduce things like modifiers where, according

207
00:16:54,170 --> 00:17:04,569
to Unicode, it's two huge numbers but JavaScript
needed four 16 bit strings to represent that.

208
00:17:04,569 --> 00:17:08,510
So it looks to us like one character, JavaScript
is calling it four.

209
00:17:08,510 --> 00:17:12,910
So really the biggest things that we could
store inside one slot of a string is anything

210
00:17:12,910 --> 00:17:15,750
from 2, 0, to 2 to the power of 16.

211
00:17:15,750 --> 00:17:23,089
So we have 2 to the power of 16 things we
could store in each of these slots.

212
00:17:23,089 --> 00:17:29,940
To put it into perspective it if we look at
the piece of paper, with each centimetre being

213
00:17:29,940 --> 00:17:34,190
a thousand times bigger than the one before
it, it would be from here to Sydney and a

214
00:17:34,190 --> 00:17:42,280
little bit back again, how much paper we would
need to record that value.

215
00:17:42,280 --> 00:17:43,340
But what about operations?

216
00:17:43,340 --> 00:17:47,809
You know, if we had a string hash plus dollar,
what does that give us?

217
00:17:47,809 --> 00:17:52,830
We saw this method before where we could pull
out the integer value so we could simply pull

218
00:17:52,830 --> 00:17:57,419
that integer value out, do the addition and
if we really wanted we could save that result

219
00:17:57,419 --> 00:18:02,740
back into a Unicode string so if you didn't
know hash plus dollar equals G. Cool.

220
00:18:02,740 --> 00:18:09,120
So we've got a pretty big increase in scale
and it has pushed us to the limit of what

221
00:18:09,120 --> 00:18:11,360
we could do with strings so where do we go
from here?

222
00:18:11,360 --> 00:18:13,010
Let's have a look at arrays.

223
00:18:13,010 --> 00:18:16,809
So firstly we had a string and I have been
very deliberate with my language in saying

224
00:18:16,809 --> 00:18:19,559
that a string has slots.

225
00:18:19,559 --> 00:18:26,299
Now, we can also think of an array of characters,
so we can think of a string as an array of

226
00:18:26,299 --> 00:18:30,760
characters but we also have arrays in JavaScript
so technically we could store anything we

227
00:18:30,760 --> 00:18:35,510
want in one of these slots, we don't have
to store just one character and the conclusion

228
00:18:35,510 --> 00:18:40,460
of that is we could store one of these superstrings
that we've created in each slot of an array.

229
00:18:40,460 --> 00:18:42,510
So how long is an array?

230
00:18:42,510 --> 00:18:45,190
Well, an array is 2 to the 32 minus 1.

231
00:18:45,190 --> 00:18:47,580
Just so you know.

232
00:18:47,580 --> 00:18:51,850
Which means our new max value is this huge
thing here.

233
00:18:51,850 --> 00:18:55,771
To put into perspective how much paper we
would need to store that number, you would

234
00:18:55,771 --> 00:18:59,850
have to go from the sun to Pluto - I like
mentioning Pluto because it was a planet when

235
00:18:59,850 --> 00:19:07,280
I was young and I like keeping it relevant
- so from sun to Pluto 135 times.

236
00:19:07,280 --> 00:19:09,600
That's how much paper you would need.

237
00:19:09,600 --> 00:19:16,450
Yes, it's about 3 trillion kilometres worth
of paper with each centimetre being a thousand

238
00:19:16,450 --> 00:19:18,540
times bigger than the centimetre before it.

239
00:19:18,540 --> 00:19:21,910
These numbers, I can't even process them.

240
00:19:21,910 --> 00:19:26,320
This is just one level of deeper arrays.

241
00:19:26,320 --> 00:19:31,390
There's nothing stopping us having arrays
of arrays, or arrays of arrays of arrays.

242
00:19:31,390 --> 00:19:35,740
The numbers start to get absurd and I couldn't
think of any good analogies for them anymore.

243
00:19:35,740 --> 00:19:42,970
Now, I have been thinking of mirroring, right,
can we actually store these things?

244
00:19:42,970 --> 00:19:44,090
So let's have a look.

245
00:19:44,090 --> 00:19:50,070
We know we have 16 bits per slot, there might
be some optimisation under the hood but let's

246
00:19:50,070 --> 00:19:58,000
assume 16 bits per slot, 227 slots, so the
amount of bits is about 2 billion bits or

247
00:19:58,000 --> 00:20:03,330
268 megabytes to store one of these strings
and if we are trying to store an array we

248
00:20:03,330 --> 00:20:10,061
have 268 megabytes per slot, 232 slots, about
1 million terabytes to store these things

249
00:20:10,061 --> 00:20:16,830
so definitely something you don't want to
be doing, so we are going to stick with this.

250
00:20:16,830 --> 00:20:19,500
268 megabytes is something we can probably
deal with.

251
00:20:19,500 --> 00:20:25,210
Now, what we could do is if we were running
in Node by default you get about 1.7 on a

252
00:20:25,210 --> 00:20:32,700
machine, you could increase your memory, but
for starters we are probably going down an

253
00:20:32,700 --> 00:20:37,809
approach we shouldn't be going down so let's
take a step back and think about what we've

254
00:20:37,809 --> 00:20:41,070
learned from looking at this string approach
to doing math.

255
00:20:41,070 --> 00:20:45,240
Firstly, we learnt that we can do almost any
operation if we can add.

256
00:20:45,240 --> 00:20:52,150
If we are using a binary system, if we can
add, we can kind of do lots of different operations.

257
00:20:52,150 --> 00:20:56,340
And we can add two numbers - we can add numbers
together, potentially really big numbers.

258
00:20:56,340 --> 00:21:01,470
We only need to look at two digits of that
number at a time so just kind of looking down

259
00:21:01,470 --> 00:21:04,720
the column, shifting to the right.

260
00:21:04,720 --> 00:21:06,049
Shifting to the left sorry.

261
00:21:06,049 --> 00:21:09,390
Okay, so let's take those learnings and apply
them somewhere else so say we have this file

262
00:21:09,390 --> 00:21:18,770
and it's encoded in UTFA which means you have
flexible 8 bit encoding.

263
00:21:18,770 --> 00:21:24,480
We have a binary string that's huge, much
bigger than we could store in memory at once,

264
00:21:24,480 --> 00:21:29,980
and let's say we have two of those files.

265
00:21:29,980 --> 00:21:34,350
We could open a stream to those files, this
is sort of like a live connection to the file

266
00:21:34,350 --> 00:21:38,070
without reading anything in, and then we created
a buffer where we are just going to read in

267
00:21:38,070 --> 00:21:43,290
one byte at a time from each of these files,
and this is why it was important that it was

268
00:21:43,290 --> 00:21:48,830
UTFA because 0 and 1 fall in the first eight
bits, we will be able to read in one digit

269
00:21:48,830 --> 00:21:52,780
at a time which is what we want to do, read
in one digit at a time from these files.

270
00:21:52,780 --> 00:21:57,610
So we read in one digit at a time, we do the
operation, might save the overflow if there

271
00:21:57,610 --> 00:22:03,309
is one in memory for a bit and then output
that one byte at a time to an output file,

272
00:22:03,309 --> 00:22:04,960
and this is pretty cool.

273
00:22:04,960 --> 00:22:11,809
So this means we could actually add incredibly
big numbers that we could never really store

274
00:22:11,809 --> 00:22:17,110
in memory, by just kind of just looking at
two little things at a time and just adding

275
00:22:17,110 --> 00:22:19,340
them and kind of passing it on.

276
00:22:19,340 --> 00:22:24,480
I built this as well, it's there if you want
to check it out.

277
00:22:24,480 --> 00:22:32,440
We have two input streams, say 1 and 0, you
add them, save and then add to the file.

278
00:22:32,440 --> 00:22:38,279
It's very similar to what we had before where
we just keep shifting down.

279
00:22:38,279 --> 00:22:45,190
We can do this on numbers that are much bigger
than we can store in memory, so now this table

280
00:22:45,190 --> 00:22:47,050
starts to break down, right?

281
00:22:47,050 --> 00:22:51,222
Our limiting factor is not - I'm sorry, I
know you probably can't see the bottom of

282
00:22:51,222 --> 00:22:54,810
the screen right now but I've just written
"infinite" and your limiting factor is the

283
00:22:54,810 --> 00:22:59,110
number you have on your machine which is a
pretty big increase in scale.

284
00:22:59,110 --> 00:23:05,940
I didn't even bother to figure out how big
in terms of kilometres that would be.

285
00:23:05,940 --> 00:23:08,610
But we can take this further.

286
00:23:08,610 --> 00:23:12,740
What if we weren't even limited by our own
machine but instead distributed this number

287
00:23:12,740 --> 00:23:17,309
across one machine so no one machine could
see the whole number at once but all these

288
00:23:17,309 --> 00:23:22,730
no ones had pieces of the number, we could
store them using that and also create some

289
00:23:22,730 --> 00:23:25,610
sort of protocol to do distributed operations.

290
00:23:25,610 --> 00:23:28,760
Because we don't actually need to see the
whole piece of the number at once to see an

291
00:23:28,760 --> 00:23:35,190
operation, you only need to see two digits
you could distribute and then screen that

292
00:23:35,190 --> 00:23:41,350
output to someone who cares about it, so now
the limiting factor isn't our machine, it's

293
00:23:41,350 --> 00:23:43,460
how many machines we have access to.

294
00:23:43,460 --> 00:23:45,520
All right.

295
00:23:45,520 --> 00:23:50,460
So we went big, we went really big, probably
bigger than you thought we were going to go

296
00:23:50,460 --> 00:23:53,630
today, the limiting factor being the amount
of machines that you have.

297
00:23:53,630 --> 00:23:59,890
We actually learnt a lot from implementing
a numbering system using strings which you

298
00:23:59,890 --> 00:24:04,010
might have thought was a bit strange to start
with and we were able to take those learnings,

299
00:24:04,010 --> 00:24:08,159
some of the nicer patterns we found about
dealing with strings and we were able to apply

300
00:24:08,159 --> 00:24:12,110
that in a completely different way to build
on the system that maybe we didn't think about

301
00:24:12,110 --> 00:24:13,919
when we first started.

302
00:24:13,919 --> 00:24:18,110
So my big take away from today is: don't be
afraid to try something a little bit different.

303
00:24:18,110 --> 00:24:22,970
You might actually get some learnings from
that that you can apply to some other problem,

304
00:24:22,970 --> 00:24:27,039
or to find some solution that you didn't even
think about when you first started.

305
00:24:27,039 --> 00:24:31,260
Yes, so you never know what you will learn
and where it will lead you.

306
00:24:31,260 --> 00:24:35,040
Before I finish, I just want to acknowledge
a good mate of mine, Stephen Campaign, a math

307
00:24:35,040 --> 00:24:41,250
mate of mine really helped me out so a big
shout out to him and also my amazing colleagues

308
00:24:41,250 --> 00:24:45,720
whose ear I have been chewing off over the
last few months wrapping my head around these

309
00:24:45,720 --> 00:24:46,720
problems.

310
00:24:46,720 --> 00:24:51,279
If you do want to use big numbers in production
there is a library, you can use that.

311
00:24:51,279 --> 00:24:55,470
Also if you are interested they are looking
at putting infinite precision integers into

312
00:24:55,470 --> 00:24:59,940
JavaScript, there's a draft stage, proposal
hub you can check that out.

313
00:24:59,940 --> 00:25:00,940
Great.

314
00:25:00,940 --> 00:25:01,940
Thanks, everyone.

315
00:25:01,940 --> 00:25:02,940
[Applause]
>> Wasn't that fantastic?

316
00:25:02,940 --> 00:25:03,940
That was absolutely incredible, and that gave
me as somebody with, like, the fear of the

