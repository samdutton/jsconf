1
00:00:00,000 --> 00:00:02,610

again hi my name is Andy I'm going to

2
00:00:02,610 --> 00:00:05,609
talk to you about happy plugins so this

3
00:00:05,609 --> 00:00:09,540
is me by the way I'm not related to the

4
00:00:09,540 --> 00:00:11,400
royal family even though I am British

5
00:00:11,400 --> 00:00:15,210
look at the name spellings different Who

6
00:00:15,210 --> 00:00:17,609
am I I'm an engineer are and i work for

7
00:00:17,609 --> 00:00:21,119
open table in the UK if you don't know

8
00:00:21,119 --> 00:00:23,430
it in table our businesses restaurant

9
00:00:23,430 --> 00:00:27,480
reservations our stack is mainly c-sharp

10
00:00:27,480 --> 00:00:30,599
a node with Java a little bit of like go

11
00:00:30,599 --> 00:00:32,399
and Ruby and closure and all that stuff

12
00:00:32,399 --> 00:00:36,600
thrown in so a real mixed bag we've been

13
00:00:36,600 --> 00:00:39,180
using happy for about what in our team

14
00:00:39,180 --> 00:00:40,410
we've been using happy for about 12

15
00:00:40,410 --> 00:00:43,050
months now I first heard about happy a

16
00:00:43,050 --> 00:00:46,649
node user group meetup and then I was

17
00:00:46,649 --> 00:00:49,200
given the opportunity to rewrite a an

18
00:00:49,200 --> 00:00:53,879
awful dotnet legacy system and I was

19
00:00:53,879 --> 00:00:56,309
like great let's use happy and we've

20
00:00:56,309 --> 00:00:58,890
been using it ever since so we've got

21
00:00:58,890 --> 00:01:04,170
but maybe a dozen api's now of varying

22
00:01:04,170 --> 00:01:07,260
sizes and complexities usually it's all

23
00:01:07,260 --> 00:01:09,810
internal api's there are a couple of

24
00:01:09,810 --> 00:01:13,200
internal tools which internal websites

25
00:01:13,200 --> 00:01:17,460
but our main business is AP is our stack

26
00:01:17,460 --> 00:01:20,780
is happy running on ubuntu with a

27
00:01:20,780 --> 00:01:23,250
MongoDB back-end and some Redis thrown

28
00:01:23,250 --> 00:01:28,500
in there for good measure so as we've

29
00:01:28,500 --> 00:01:30,900
learned happy and as we've learned as

30
00:01:30,900 --> 00:01:33,869
we've grown our kind of happy stack we

31
00:01:33,869 --> 00:01:36,750
start to coalesce shared code using the

32
00:01:36,750 --> 00:01:41,310
plugins interface so I'm not going to

33
00:01:41,310 --> 00:01:43,380
stand here and read you the docs because

34
00:01:43,380 --> 00:01:46,290
that we really dull but they're going to

35
00:01:46,290 --> 00:01:48,479
have a look what I'm going to do is just

36
00:01:48,479 --> 00:01:50,880
show you some of the really simple stuff

37
00:01:50,880 --> 00:01:52,500
that we've done that makes our lives

38
00:01:52,500 --> 00:01:57,530
easier so the first plug-in I wrote was

39
00:01:57,530 --> 00:02:00,509
pretty simple all it does is you point

40
00:02:00,509 --> 00:02:03,390
at a directory it walks the directory

41
00:02:03,390 --> 00:02:05,520
and says is there something in there

42
00:02:05,520 --> 00:02:07,649
that looks like a routes file if so call

43
00:02:07,649 --> 00:02:10,470
severed uproot on it basically was to

44
00:02:10,470 --> 00:02:12,480
get rid of the boilerplate of calling

45
00:02:12,480 --> 00:02:15,260
server da trute everywhere

46
00:02:15,260 --> 00:02:18,810
the of the the main part parts of this

47
00:02:18,810 --> 00:02:19,980
plug-in you've probably seen this

48
00:02:19,980 --> 00:02:23,190
already a couple of times today but the

49
00:02:23,190 --> 00:02:24,810
register function which takes the server

50
00:02:24,810 --> 00:02:28,740
options and next call back so the key

51
00:02:28,740 --> 00:02:30,690
bit there is the server so that server

52
00:02:30,690 --> 00:02:33,000
object is exactly the same server object

53
00:02:33,000 --> 00:02:35,370
that you get when you do new happy dot

54
00:02:35,370 --> 00:02:37,290
server which means anything that you're

55
00:02:37,290 --> 00:02:40,140
doing in your application code you can

56
00:02:40,140 --> 00:02:42,600
wrap it in a plug-in and that's really

57
00:02:42,600 --> 00:02:45,180
really powerful frankly it beats the

58
00:02:45,180 --> 00:02:48,510
hell out of a pues so yeah the

59
00:02:48,510 --> 00:02:50,280
registration code for registering a

60
00:02:50,280 --> 00:02:52,920
plug-in you call server register you

61
00:02:52,920 --> 00:02:54,930
give it a list of plugins each plug-in

62
00:02:54,930 --> 00:02:59,820
has its own little options object and

63
00:02:59,820 --> 00:03:01,530
then at the end you get a nice callback

64
00:03:01,530 --> 00:03:03,840
that says if everything is good start

65
00:03:03,840 --> 00:03:09,150
the server yeah so another one of the

66
00:03:09,150 --> 00:03:11,520
plugins that we wrote was for versioning

67
00:03:11,520 --> 00:03:13,260
now everybody you talk to has a

68
00:03:13,260 --> 00:03:15,380
different attitude on versioning

69
00:03:15,380 --> 00:03:18,030
internally opentable we have a

70
00:03:18,030 --> 00:03:20,820
convention of using URL version which i

71
00:03:20,820 --> 00:03:24,000
think is a bit icky but I wanted to

72
00:03:24,000 --> 00:03:26,940
support head of versioning as well so

73
00:03:26,940 --> 00:03:29,280
you create the little plugin that can

74
00:03:29,280 --> 00:03:32,310
monkey with the request and say well if

75
00:03:32,310 --> 00:03:35,269
it's if it looks like a URL versioned

76
00:03:35,269 --> 00:03:39,870
URL then grab the version out of it and

77
00:03:39,870 --> 00:03:45,390
you set the request prerequisite with

78
00:03:45,390 --> 00:03:49,709
the with the data with the version this

79
00:03:49,709 --> 00:03:53,760
code uses the on pre handler extension

80
00:03:53,760 --> 00:03:57,680
point which is the interesting bit the

81
00:03:57,680 --> 00:03:59,790
extension point there are six of them

82
00:03:59,790 --> 00:04:04,019
which cover the request lifecycle so

83
00:04:04,019 --> 00:04:06,390
you've got on request is the first and

84
00:04:06,390 --> 00:04:10,110
then on pre auth on post off on pre

85
00:04:10,110 --> 00:04:13,200
handler on post handler and on pre

86
00:04:13,200 --> 00:04:16,049
response so basically anything you want

87
00:04:16,049 --> 00:04:18,299
to do during the recycle the life cycle

88
00:04:18,299 --> 00:04:20,580
of the request you can hook into one of

89
00:04:20,580 --> 00:04:23,760
these extension points and boom you've

90
00:04:23,760 --> 00:04:26,480
got the request

91
00:04:26,490 --> 00:04:32,430
if you're if you're not covering things

92
00:04:32,430 --> 00:04:34,710
that happen in the life cycle there are

93
00:04:34,710 --> 00:04:36,960
the server events as well so you've got

94
00:04:36,960 --> 00:04:41,789
the error log so any time server log is

95
00:04:41,789 --> 00:04:45,060
called far as an event any time server

96
00:04:45,060 --> 00:04:48,360
the arrow is called far as an event and

97
00:04:48,360 --> 00:04:50,400
you've got the other interesting ones

98
00:04:50,400 --> 00:04:52,759
you've got requests obviously and tail

99
00:04:52,759 --> 00:04:55,949
so if you don't know about tail it's

100
00:04:55,949 --> 00:04:59,430
basically when the request is just about

101
00:04:59,430 --> 00:05:02,460
done and the response has been sent then

102
00:05:02,460 --> 00:05:06,270
the tail event is fired so that's kind

103
00:05:06,270 --> 00:05:09,270
of the the last event in the life cycle

104
00:05:09,270 --> 00:05:16,600
on laptops gone to sleep come on oh

105
00:05:16,610 --> 00:05:20,639
right good smashing yeah sorry so tail

106
00:05:20,639 --> 00:05:23,550
is the last event in the life cycle and

107
00:05:23,550 --> 00:05:26,870
it's stuff like this that makes happy

108
00:05:26,870 --> 00:05:29,909
really lend itself to the kind of the

109
00:05:29,909 --> 00:05:32,400
node way that fred was talking about it

110
00:05:32,400 --> 00:05:34,110
yesterday you have small modules which

111
00:05:34,110 --> 00:05:38,820
do small things and it means that you

112
00:05:38,820 --> 00:05:41,849
get the composability because you've got

113
00:05:41,849 --> 00:05:44,940
a fully so you've got a full server

114
00:05:44,940 --> 00:05:47,400
object here which means anything you

115
00:05:47,400 --> 00:05:49,740
want to do you can do there's no there's

116
00:05:49,740 --> 00:05:51,840
no monkeying about you have to do got it

117
00:05:51,840 --> 00:05:57,659
all up front another classic example

118
00:05:57,659 --> 00:06:00,740
we've got so we use naji us for alerting

119
00:06:00,740 --> 00:06:04,169
and we have a convention of using a

120
00:06:04,169 --> 00:06:08,069
service status endpoint so for our team

121
00:06:08,069 --> 00:06:12,949
what we do is we have a monitor which

122
00:06:12,949 --> 00:06:16,289
has a path on it so it says right I'm

123
00:06:16,289 --> 00:06:20,430
going to hit / food / bar / 1 and time

124
00:06:20,430 --> 00:06:22,919
the request so it does a server that

125
00:06:22,919 --> 00:06:25,560
inject times it and then you wrap the

126
00:06:25,560 --> 00:06:27,690
response so you can you can really

127
00:06:27,690 --> 00:06:29,819
easily just pop it just makes setting up

128
00:06:29,819 --> 00:06:32,699
the Minaj eos monitors a case of

129
00:06:32,699 --> 00:06:35,969
configuration so that's the response you

130
00:06:35,969 --> 00:06:38,760
get out of it you get the response code

131
00:06:38,760 --> 00:06:39,990
the time it took

132
00:06:39,990 --> 00:06:42,990
off at hit and status the status is

133
00:06:42,990 --> 00:06:44,970
either okay or failed and you just point

134
00:06:44,970 --> 00:06:49,250
nagi us at that and away you go and it's

135
00:06:49,250 --> 00:06:53,610
the server don't inject is only part of

136
00:06:53,610 --> 00:06:57,000
it but most of the stuff i'm showing

137
00:06:57,000 --> 00:07:02,250
here is kind of boilerplate extensions i

138
00:07:02,250 --> 00:07:04,760
mean we have similar stuff for

139
00:07:04,760 --> 00:07:08,460
initializing database doing feature

140
00:07:08,460 --> 00:07:14,760
toggling doing health and heartbeat and

141
00:07:14,760 --> 00:07:17,400
all that sort of thing and you can take

142
00:07:17,400 --> 00:07:19,020
this to the logical conclusion as well

143
00:07:19,020 --> 00:07:20,910
which is that everything in your

144
00:07:20,910 --> 00:07:23,970
application can be a plug-in we saw it

145
00:07:23,970 --> 00:07:27,960
earlier with John where your application

146
00:07:27,960 --> 00:07:29,520
code is wrapped in a plug-in which means

147
00:07:29,520 --> 00:07:31,470
it's got a standard interface to the

148
00:07:31,470 --> 00:07:33,840
rest of the world if you want a really

149
00:07:33,840 --> 00:07:35,340
good example of this I would recommend

150
00:07:35,340 --> 00:07:38,040
you go and look at the code for mpms new

151
00:07:38,040 --> 00:07:40,350
website because it's awesome and

152
00:07:40,350 --> 00:07:41,940
I've been geeking out about it for a

153
00:07:41,940 --> 00:07:47,550
while now so conclusion plugins are

154
00:07:47,550 --> 00:07:48,930
awesome if you're not wrapping your

155
00:07:48,930 --> 00:07:50,850
stuff in plugins and you're making more

156
00:07:50,850 --> 00:07:52,950
work for yourself in the future because

157
00:07:52,950 --> 00:07:54,630
you have to write the glue code over and

158
00:07:54,630 --> 00:07:57,300
over again whereas if you if you're

159
00:07:57,300 --> 00:08:00,710
using plugins then it's a standard

160
00:08:00,710 --> 00:08:02,640
interface to the rest of the your

161
00:08:02,640 --> 00:08:05,060
application or the rest of the world I

162
00:08:05,060 --> 00:08:07,620
hope this has been the

163
00:08:07,620 --> 00:08:09,060
interesting I realized I was in the

164
00:08:09,060 --> 00:08:10,770
after lunch spot so hopefully

