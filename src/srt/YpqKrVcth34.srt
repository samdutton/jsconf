1
00:00:05,609 --> 00:00:14,070
Hello, everyone, I just landed in Berlin for
the first time of my life, at I've already

2
00:00:14,070 --> 00:00:23,070
fallen in love with this city.

3
00:00:23,070 --> 00:00:26,770
So my name is Hui Jing, and I go by Jing as
well.

4
00:00:26,770 --> 00:00:29,870
I love emoji.

5
00:00:29,870 --> 00:00:36,780
We have 2,666 emojis right now with which
to express ourselves, so I'm going to introduce

6
00:00:36,780 --> 00:00:38,220
myself with them.

7
00:00:38,220 --> 00:00:43,470
I'm from Malaysia - very proud of that - and
I used to play basketball full-time.

8
00:00:43,470 --> 00:00:49,420
Basketball actually helped kick-start my web
career, so you can ask me about that later

9
00:00:49,420 --> 00:00:50,450
if you're interested.

10
00:00:50,450 --> 00:00:56,790
My inordinate love of CSS is what compels
me to speak and write about this topic, and

11
00:00:56,790 --> 00:01:00,540
it's essentially what put me here on the stage
in front of all of you today.

12
00:01:00,540 --> 00:01:05,990
I also happen to be a Mozilla tech speaker
which is an initiative by Mozilla that supports

13
00:01:05,990 --> 00:01:13,330
technical evangelists in communities around
the world by providing resources and funding.

14
00:01:13,330 --> 00:01:16,770
What do you think about when you hear the
word "typography"?

15
00:01:16,770 --> 00:01:25,150
It used to be a niche subject, something only
artsy creative types cared about, but these

16
00:01:25,150 --> 00:01:30,130
days, it seems that typographic stories have
been making their way into mainstream news.

17
00:01:30,130 --> 00:01:36,960
We have big brand names like National Geographic
and Netflix talking about their redesigns.

18
00:01:36,960 --> 00:01:45,710
The Microsoft font Calibri was a crucial proof
of evidence that forged forgery in a Supreme

19
00:01:45,710 --> 00:01:48,659
Court case in Pakistan.

20
00:01:48,659 --> 00:01:49,950
What is typography?

21
00:01:49,950 --> 00:01:52,570
Plenty of definitions out there.

22
00:01:52,570 --> 00:01:57,909
I personally always refer back to this one
by Gerrit Noordzij that typography is writing

23
00:01:57,909 --> 00:02:05,560
with pre-Fabricant letters, a type of grapheme
which is the smallest unit of a writing system

24
00:02:05,560 --> 00:02:08,300
of any given language.

25
00:02:08,300 --> 00:02:12,189
Writing systems are visual representations
of verbal communication.

26
00:02:12,189 --> 00:02:19,760
It's a means to record whatever we say in
our respective languages for storage and transport.

27
00:02:19,760 --> 00:02:24,760
The world is very diverse when it comes to
language and culture so it's natural there

28
00:02:24,760 --> 00:02:29,430
are many different writing systems use writing
around the planet.

29
00:02:29,430 --> 00:02:34,160
The majority use alphabets.

30
00:02:34,160 --> 00:02:38,840
This is a small sampling of different alphabets
from different languages.

31
00:02:38,840 --> 00:02:42,160
The Hebrew alphabet own has 22 letters.

32
00:02:42,160 --> 00:02:48,860
The Ukrainian alphabet slightly larger with
33 letters, seven more letters than the English

33
00:02:48,860 --> 00:02:51,610
alphabet which only has 26.

34
00:02:51,610 --> 00:02:55,830
The point I'm trying to make here is that
alphabetic writing systems utilise a small

35
00:02:55,830 --> 00:03:02,000
set of letters to formulate all the words
a language needs for the purposes of communication.

36
00:03:02,000 --> 00:03:04,000
Chinese is a bit different.

37
00:03:04,000 --> 00:03:07,180
It is a logographic language.

38
00:03:07,180 --> 00:03:12,000
Chinese characters number in the tens of thousands
and each character is a unique glyph that

39
00:03:12,000 --> 00:03:17,730
can express meaning on their own or be used
in combination with other glyphs.

40
00:03:17,730 --> 00:03:21,849
Let's look at a few examples to illustrate
this point.

41
00:03:21,849 --> 00:03:24,650
The word "communication", with this is an
English word.

42
00:03:24,650 --> 00:03:27,480
You need 13 letters to spell it.

43
00:03:27,480 --> 00:03:30,090
Chinese we can express the same in two characters.

44
00:03:30,090 --> 00:03:32,200
We can say [Chinese spoken].

45
00:03:32,200 --> 00:03:42,159
I'm going to butcher this word, please excuse
me, German speak ers, Backpfeifengesicht.

46
00:03:42,159 --> 00:03:49,290
This is a German word of 18 characters, and,
in Chinese, we can say something similar - [Chinese

47
00:03:49,290 --> 00:03:50,879
spoken].

48
00:03:50,879 --> 00:03:59,349
GrianghrafadÃ³ireachta, an Irish word, but,
again, this Chinese, two characters is enough.

49
00:03:59,349 --> 00:04:02,129
You can say [Chinese spoken].

50
00:04:02,129 --> 00:04:05,819
Chinese is a pretty concise language, if you
ask me.

51
00:04:05,819 --> 00:04:10,641
Although a large SWAT of the world reads mostly
from left to right, writing as many as can

52
00:04:10,641 --> 00:04:12,540
go in all directions.

53
00:04:12,540 --> 00:04:23,189
Modern-day use scripts so languages like Japanese
and Korean are read from right to left.

54
00:04:23,189 --> 00:04:28,909
Mongolian uses vertical writing but read from
left to right.

55
00:04:28,909 --> 00:04:35,099
Han characters are sometimes called square
characters because each is composed in a uniform

56
00:04:35,099 --> 00:04:36,099
square.

57
00:04:36,099 --> 00:04:41,830
This allows Chinese to be read efficiently
whether typeset vertically or horizontally.

58
00:04:41,830 --> 00:04:45,749
Chinese text can be typeset into neat rows
and columns.

59
00:04:45,749 --> 00:04:49,759
If you don't understand Chinese, you may not
know which direction the text is going.

60
00:04:49,759 --> 00:04:59,080
Now, the Chinese script is set to have developed
independently from proto-sinaitic scripts

61
00:04:59,080 --> 00:05:06,449
which are the origins of -- this is why Indo-European
writing systems are different from those of

62
00:05:06,449 --> 00:05:08,659
east Asia.

63
00:05:08,659 --> 00:05:13,650
As different alphabetic writing systems branched
out from the Phoenician alphabet, the letter

64
00:05:13,650 --> 00:05:16,020
forms evolved and changed.

65
00:05:16,020 --> 00:05:21,789
The appearance of letter forms were influenced
by the tools used to create them.

66
00:05:21,789 --> 00:05:26,870
The earliest letters were sans serif when
done with a hard read pen.

67
00:05:26,870 --> 00:05:34,020
When transition made with a square implement,
the letters developed serifs.

68
00:05:34,020 --> 00:05:42,560
In the middle ages, scribes and copyists who
used quill pens had to develop more efficient

69
00:05:42,560 --> 00:05:46,809
styles of writing.

70
00:05:46,809 --> 00:05:52,439
Chinese characters have evolved greatly since
the earliest glyphs were scratched into animal

71
00:05:52,439 --> 00:05:55,689
shells and bones since back as 1600BC.

72
00:05:55,689 --> 00:06:04,699
The 
ancient rulers who used them to consult with

73
00:06:04,699 --> 00:06:11,669
the various higher powers, important questions
about things like agriculture, weather, warfare,

74
00:06:11,669 --> 00:06:14,559
things that royalty cared about.

75
00:06:14,559 --> 00:06:18,339
The key implement of Chinese writing is the
brush.

76
00:06:18,339 --> 00:06:22,779
Calligraphy was and still is one of the most
highly regarded Chinese art, and the work

77
00:06:22,779 --> 00:06:31,460
of famous calligraphers were used for carving
wood blocks for printing.

78
00:06:31,460 --> 00:06:39,969
Type faces used for printing Chinese publications
can be broadly categorised into the four families.

79
00:06:39,969 --> 00:06:42,659
[On screen].

80
00:06:42,659 --> 00:06:46,669
A bit different from Latin-based scripts.

81
00:06:46,669 --> 00:06:51,129
Chinese typefaces are extremely challenging
to create.

82
00:06:51,129 --> 00:06:53,279
Simply due to the volume of glyphs required.

83
00:06:53,279 --> 00:07:01,509
An average number for glyphs clocks in around
35,000 glyphs.

84
00:07:01,509 --> 00:07:06,219
This is an article that covers the process
of creating a Chinese font.

85
00:07:06,219 --> 00:07:11,659
It is an interesting read because it goes
into how much effort is needed to design and

86
00:07:11,659 --> 00:07:14,830
create a Chinese typeface.

87
00:07:14,830 --> 00:07:21,259
To be used as body copy, it will need a minimum
of 7,000 glyphs if you're using simplified

88
00:07:21,259 --> 00:07:25,509
Chinese or 13,000 glyphs if you're going for
traditional Chinese.

89
00:07:25,509 --> 00:07:31,499
That's still a lot of glyphs, hence Chinese
fonts are almost always designed by teams

90
00:07:31,499 --> 00:07:34,229
over periods of years.

91
00:07:34,229 --> 00:07:40,521
Now, the web is less than 30 years old, and
because it is a completely new medium, it's

92
00:07:40,521 --> 00:07:44,800
only natural that people try to reconcile
it with something familiar like print.

93
00:07:44,800 --> 00:07:50,300
However, there's an additional degree of separation
between the creator and the final output.

94
00:07:50,300 --> 00:07:56,489
As such, we cannot have the same set of expectations
when it comes to handling the web as a medium.

95
00:07:56,489 --> 00:08:01,169
This is a medium where you cannot directly
manipulate the canvas, in this case, the viewport

96
00:08:01,169 --> 00:08:02,319
of my browser.

97
00:08:02,319 --> 00:08:08,199
Instead, what we do is we write code and instructions
to the browser, to tell them how we want our

98
00:08:08,199 --> 00:08:10,000
designs to be rendered.

99
00:08:10,000 --> 00:08:16,069
With the release of CSS Grid last year, it
seems we've hit another milestone for web

100
00:08:16,069 --> 00:08:17,069
sign.

101
00:08:17,069 --> 00:08:26,830
Jen Simmons, creator of Layout Land, drew
a parallel between the evolution from metal

102
00:08:26,830 --> 00:08:33,760
letter press to photo-based paste-up with
this evolution, from floats to grid.

103
00:08:33,760 --> 00:08:39,450
Modern CSS gives us a wider vocabulary with
which to communicate with the browser.

104
00:08:39,450 --> 00:08:44,229
So we can leverage these new capabilities
that browsers now have for better art direction,

105
00:08:44,229 --> 00:08:48,060
more creative layouts, and fresher designs
that break out of the cookie-cutter moulds

106
00:08:48,060 --> 00:08:51,050
we're so used to seeing on the web.

107
00:08:51,050 --> 00:08:56,970
Now, as an athlete, I cannot help but draw
parallels between my work and my experience

108
00:08:56,970 --> 00:08:58,230
with my sport.

109
00:08:58,230 --> 00:09:04,020
CSS is a holistic technology in that, even
though you can use properties in isolation,

110
00:09:04,020 --> 00:09:09,121
the full power of CSS shines through when
properties are used in combination, so you

111
00:09:09,121 --> 00:09:11,529
can treat this talk like a scouting report.

112
00:09:11,529 --> 00:09:16,240
Where I profile some of the most promising
players on team layout, and how they can work

113
00:09:16,240 --> 00:09:22,259
really well together to handle certain situations
but really, at the end of the day, I got Jackie

114
00:09:22,259 --> 00:09:27,029
mentioned earlier, you have to find a solution
that best works for your use case.

115
00:09:27,029 --> 00:09:32,430
Now, it was purely by chance that I started
exploring vertical layouts on the web.

116
00:09:32,430 --> 00:09:39,410
You see, I was stuck in a crowded subway train
a few years ago, and I was inadvertently peering

117
00:09:39,410 --> 00:09:43,500
over the shoulder of guy standing over me
and he was reading a Chinese novel on his

118
00:09:43,500 --> 00:09:44,500
phone.

119
00:09:44,500 --> 00:09:45,500
It was typeset horizontally.

120
00:09:45,500 --> 00:09:52,759
This is when I first thought to myself: a
traditional vertical layout would work great

121
00:09:52,759 --> 00:09:54,019
on a phone.

122
00:09:54,019 --> 00:09:57,459
I wondered if this can be done on the web?

123
00:09:57,459 --> 00:10:00,470
Turns out, it can.

124
00:10:00,470 --> 00:10:01,930
And really well too.

125
00:10:01,930 --> 00:10:07,670
These are websites that have won a web award
given no those who are willing to that I can

126
00:10:07,670 --> 00:10:16,200
up the challenge of ushering in the variety
al text by utilising new typesetting standards

127
00:10:16,200 --> 00:10:17,779
with modern CSS.

128
00:10:17,779 --> 00:10:23,740
Some of you may find this hard to believe,
but vertical text was supported by Internet

129
00:10:23,740 --> 00:10:26,720
Explorer since version 5.5.

130
00:10:26,720 --> 00:10:33,230
They were using an earlier version of the
specification which originated from SPG.

131
00:10:33,230 --> 00:10:43,220
Chrome started in 2010 and safari and Opera
in 2013, and Firefox in 2015.

132
00:10:43,220 --> 00:10:47,300
But although vertical writing is native to
east Asian languages, that doesn't exclude

133
00:10:47,300 --> 00:10:51,700
you from using vertical texts simply because
you doesn't design for those languages.

134
00:10:51,700 --> 00:10:56,459
If anything, the fact that browsers can better
support vertical text allows us to draw design

135
00:10:56,459 --> 00:10:59,649
inspiration for more sources than before.

136
00:10:59,649 --> 00:11:05,790
For horizontal-only languages, you wouldn't
want to lay out text vertically for long passages,

137
00:11:05,790 --> 00:11:09,810
understandably, but there are subtle ways
that you can insert vertical text in your

138
00:11:09,810 --> 00:11:13,709
designs to add flavour without compromising
the reading experience.

139
00:11:13,709 --> 00:11:19,100
An example would be labels for card-based
designs - so popular.

140
00:11:19,100 --> 00:11:21,360
Or tags for blog posts.

141
00:11:21,360 --> 00:11:24,970
Cases where text is not critical to understanding
the main content.

142
00:11:24,970 --> 00:11:29,500
You could even use them for head ers for sections
on long scrolling pages.

143
00:11:29,500 --> 00:11:32,600
You could perhaps use them for small-screen
navigation.

144
00:11:32,600 --> 00:11:36,070
There are a lot of possibilities here.

145
00:11:36,070 --> 00:11:37,649
But vertical layouts are not a new thing.

146
00:11:37,649 --> 00:11:41,720
It's just that the web hadn't reached a level
of maturity that could do them well until

147
00:11:41,720 --> 00:11:42,720
recently.

148
00:11:42,720 --> 00:11:48,589
For example, this is a mixed layout multi-lingual
magazine cover from Japan.

149
00:11:48,589 --> 00:11:52,300
This is totally doable on the web today.

150
00:11:52,300 --> 00:11:59,810
This poster is by Edward, one of Europe's
most influential poster artists in the 19

151
00:11:59,810 --> 00:12:02,510
thirties.

152
00:12:02,510 --> 00:12:08,120
Another with some diagonal layout going on
there.

153
00:12:08,120 --> 00:12:13,810
This one is a vintage cover of architectural
design magazine with this radial text layout.

154
00:12:13,810 --> 00:12:22,220
Then I came across this particular book cover
for the Craftsmen, and I thought, okay, let's

155
00:12:22,220 --> 00:12:23,839
do pencils.

156
00:12:23,839 --> 00:12:29,660
Specifically, let's do these vertical pencils
with text in them on the web.

157
00:12:29,660 --> 00:12:35,180
Now, preparing for this talk, I got a bit
carried away with the sports analogy and ended

158
00:12:35,180 --> 00:12:40,910
up being sidetracked by creating CSS trading
cards because I have the attention span of

159
00:12:40,910 --> 00:12:42,560
a five-year-old!

160
00:12:42,560 --> 00:12:47,029
Anyhow, let's start off with something reasonably
familiar.

161
00:12:47,029 --> 00:12:48,100
In this case, CSS Transforms.

162
00:12:48,100 --> 00:12:55,089
Even though Transforms are used for animation,
static Transforms can be useful too.

163
00:12:55,089 --> 00:13:00,779
My basic strategy was to start off with an
audit list, and each pencil being a list item.

164
00:13:00,779 --> 00:13:03,920
Then styling each item to look like a pencil.

165
00:13:03,920 --> 00:13:05,899
And then lay them out vertically.

166
00:13:05,899 --> 00:13:08,670
So the second and third points are pretty
closely intertwined.

167
00:13:08,670 --> 00:13:11,639
The markup for this is very basic.

168
00:13:11,639 --> 00:13:15,990
The additional P tag inside this list item
is for styling purposes because I only have

169
00:13:15,990 --> 00:13:22,569
two pseudo elements to play with, and that's
not enough for a pure CSS pencil.

170
00:13:22,569 --> 00:13:26,450
The key property for the visual effect we
see here is borders.

171
00:13:26,450 --> 00:13:31,189
The border property in my opinion is an unrated
CSS property.

172
00:13:31,189 --> 00:13:38,220
If you read CSS Secrets or watched her brilliant
talk on the humble border radius, you may

173
00:13:38,220 --> 00:13:43,519
already know this, but the tips of the pencils
are made using the CSS triangle technique

174
00:13:43,519 --> 00:13:46,999
which makes use of the fact that borders meet
as diagonals.

175
00:13:46,999 --> 00:13:54,160
There are four 2D transforms available to
us, and we will use the rotate transform to

176
00:13:54,160 --> 00:13:56,620
get the pencils vertical.

177
00:13:56,620 --> 00:14:00,319
The tricky part about using transforms is
that you have to keep in mind the transform

178
00:14:00,319 --> 00:14:06,830
origin, and how the browser deals with transforms
to begin with.

179
00:14:06,830 --> 00:14:11,019
Transforms bringing the element in question
into its own layer, and takes it out of the

180
00:14:11,019 --> 00:14:12,110
normal document flow.

181
00:14:12,110 --> 00:14:17,529
So, if you're trying to rotate elements that
are supposed to be part of a larger layout,

182
00:14:17,529 --> 00:14:21,860
which is pretty much all the time, you might
end up with unwanted overflows or overlaps.

183
00:14:21,860 --> 00:14:28,749
A friend of my mine tried to transform an
entire website and discovered so many interesting

184
00:14:28,749 --> 00:14:33,649
things that it warranted a 20-minute talk
in our local CSS meet-up.

185
00:14:33,649 --> 00:14:36,439
What other options do we have for vertical
layouts?

186
00:14:36,439 --> 00:14:42,420
Well, the outcome of my research into typesetting
Chinese vertically on the web, led me to discover

187
00:14:42,420 --> 00:14:45,809
the existence of the writing modes specification.

188
00:14:45,809 --> 00:14:53,680
This specification covers all sorts of international
writing systems replaces the Unicode and BD

189
00:14:53,680 --> 00:14:59,870
direction features in CSS 2.1 and introduces
a number of rules and properties required

190
00:14:59,870 --> 00:15:03,209
to properly support vertical text in CSS.

191
00:15:03,209 --> 00:15:07,999
This is what happens to your text when different
values of writing mode are applied.

192
00:15:07,999 --> 00:15:13,459
The default is horizontal top-to-bottom, and
to change the direction to vertical, we use

193
00:15:13,459 --> 00:15:16,540
vertical RL, or vertical LR.

194
00:15:16,540 --> 00:15:21,160
When we rotate twelve, it is not only the
lines that change direction, because each

195
00:15:21,160 --> 00:15:24,259
line actually contains individual letters
or characters.

196
00:15:24,259 --> 00:15:26,350
And they have an orientation as well.

197
00:15:26,350 --> 00:15:32,889
For text orientation, the value of this property
is initially mixed because browsers are smart

198
00:15:32,889 --> 00:15:37,790
enough to figure out which languages can be
typeset both vertically and horizontally and

199
00:15:37,790 --> 00:15:39,759
in one direction only.

200
00:15:39,759 --> 00:15:44,300
Chinese characters, for example, will always
be displayed upright, while horizontal-only

201
00:15:44,300 --> 00:15:49,180
languages like English or German, will have
their characters rotated with vertical, so

202
00:15:49,180 --> 00:15:54,800
the text orientation property lets you control
this and make the characters upright or sideways

203
00:15:54,800 --> 00:15:57,660
if that is what you want.

204
00:15:57,660 --> 00:16:03,949
Text-combined upright addresses numerals or
abbreviations in vertical text, it allows

205
00:16:03,949 --> 00:16:10,450
us to fit them into the width of one character
and display them upright in no browser supports

206
00:16:10,450 --> 00:16:13,399
the last one, the digits value yet.

207
00:16:13,399 --> 00:16:17,850
This value allows us to dictate how many digits
or letters are acceptable to be squeezed into

208
00:16:17,850 --> 00:16:19,560
this little space.

209
00:16:19,560 --> 00:16:25,009
Reasonably, the range allowed is between two
to four characters but for now, we only have

210
00:16:25,009 --> 00:16:26,009
the all value.

211
00:16:26,009 --> 00:16:28,040
There is no limit.

212
00:16:28,040 --> 00:16:33,241
So you could put a really long word like,
"Beethoven" and the browser will do it.

213
00:16:33,241 --> 00:16:37,990
It will squish the letters into that single
character space.

214
00:16:37,990 --> 00:16:40,809
Probably not something you want, but you could
always try it out.

215
00:16:40,809 --> 00:16:42,139
Back to pencils.

216
00:16:42,139 --> 00:16:47,180
We will keep the same strategy as before except
the layout in visual styles are essentially

217
00:16:47,180 --> 00:16:48,180
done together.

218
00:16:48,180 --> 00:16:50,540
You will see why in a bit.

219
00:16:50,540 --> 00:16:51,930
No change to the markup.

220
00:16:51,930 --> 00:16:55,360
Here, we apply writing mode first.

221
00:16:55,360 --> 00:16:59,860
Because presently, we still rely heavily on
the physical directions of left, right, top,

222
00:16:59,860 --> 00:17:02,770
with , bottom, when it comes to styling elements.

223
00:17:02,770 --> 00:17:07,650
Hence all the borders used previously have
to be recalibrated because it is not as straightforward

224
00:17:07,650 --> 00:17:13,040
of taking the styling of the Transform's use
case, and call it a day.

225
00:17:13,040 --> 00:17:19,230
No, if you compare the code for this, and
it is a bit lengthy, you will notice that

226
00:17:19,230 --> 00:17:24,659
even though the words are rotated and flowing
from right to left, the direction of margins

227
00:17:24,659 --> 00:17:28,449
and paddings still adhere to our upright perspective.

228
00:17:28,449 --> 00:17:34,940
For example, padding on the left of my pencil
text, I have to apply using padding top.

229
00:17:34,940 --> 00:17:37,890
This sort of confuses me a lot.

230
00:17:37,890 --> 00:17:45,919
But luckily, we have an up and coming new
player on Team Layout - the CSS Logical Properties.

231
00:17:45,919 --> 00:17:51,490
It uses logical properties like block start
and block end, and inline start and end which

232
00:17:51,490 --> 00:17:56,360
are relative to the block flow of the page,
allowing us to use the same code regardless

233
00:17:56,360 --> 00:17:58,029
of writing mode.

234
00:17:58,029 --> 00:18:04,649
I highly suggest reading Rachel Andrew's in-depth
article on CSS in Smashing Maczine to gain

235
00:18:04,649 --> 00:18:07,880
a better understanding of this relatively
new spec.

236
00:18:07,880 --> 00:18:14,430
The first public working draft of the specification
was published in December last year, and I'm

237
00:18:14,430 --> 00:18:18,000
eager to see it developed and more widely
implemented.

238
00:18:18,000 --> 00:18:24,039
We can't talk about layout without talking
about Flexbox, and Flexbox is definitely an

239
00:18:24,039 --> 00:18:26,100
all-star player on team layout.

240
00:18:26,100 --> 00:18:32,100
If you try to brilliant out the specification,
it's about 87 pages long, and that's a good

241
00:18:32,100 --> 00:18:33,430
reason for that.

242
00:18:33,430 --> 00:18:38,990
It defines a new layout mode designed for
laying out complex applications and web pages.

243
00:18:38,990 --> 00:18:45,340
It is probably the first property specifically
designed to do layout on the web.

244
00:18:45,340 --> 00:18:47,990
Let's have more pencils.

245
00:18:47,990 --> 00:18:54,630
Many, many more pencils, and I want them to
be a mixture of vertical and horizontal pencils.

246
00:18:54,630 --> 00:18:58,080
So this is becoming a larger scale layout
situation.

247
00:18:58,080 --> 00:18:59,800
Flexbox is capable of handling this.

248
00:18:59,800 --> 00:19:01,289
It is very versatile like that.

249
00:19:01,289 --> 00:19:05,920
You can use it for small components for a
bigger scale layout.

250
00:19:05,920 --> 00:19:10,870
The markup is similar to previous examples,
just multiplied lots of times.

251
00:19:10,870 --> 00:19:15,950
These are a mix of vertical and horizontal
with different colours so you can see which

252
00:19:15,950 --> 00:19:18,649
way they are being laid out.

253
00:19:18,649 --> 00:19:24,750
Flexbox can do space distribution and content
alignment like nothing we've seen before.

254
00:19:24,750 --> 00:19:30,500
Flex children can be laid out in any flow
direction - left word, right word, downwards

255
00:19:30,500 --> 00:19:33,770
or even upwards if that is what you want.

256
00:19:33,770 --> 00:19:39,010
Display order can be reversed or rearranged,
although this does have accessibility implications

257
00:19:39,010 --> 00:19:42,100
and should be used with caution.

258
00:19:42,100 --> 00:19:45,810
Items within the flex container are laid out
like a long daisy chain.

259
00:19:45,810 --> 00:19:51,030
Even if they are wrap around, there is no
relationship between the rows and columns.

260
00:19:51,030 --> 00:19:56,640
It is one really long row or one really long
column that wrapped around itself.

261
00:19:56,640 --> 00:20:02,260
So a property that controls the flow direction
is aptly named "flex-direction", and, with

262
00:20:02,260 --> 00:20:10,950
this, we can actually reorder the flow of
content, so the default value is row.

263
00:20:10,950 --> 00:20:17,340
You can see based on the colours that it has
changed the way it is flowing.

264
00:20:17,340 --> 00:20:19,200
We have another other options as well.

265
00:20:19,200 --> 00:20:27,780
We can do flex-direction column, and you can
see it is now this way, going downward.

266
00:20:27,780 --> 00:20:30,350
Column reverse makes it go upwards.

267
00:20:30,350 --> 00:20:35,580
So you're not limited to just left and right
which is actually the title of my talk.

268
00:20:35,580 --> 00:20:41,100
I want to emphasise this modifies the visual
order and not the source order of the flex

269
00:20:41,100 --> 00:20:42,100
items.

270
00:20:42,100 --> 00:20:45,850
Screenreaders and keyboard controls will respect
the source order.

271
00:20:45,850 --> 00:20:52,490
If Flexbox is an all star, Grid is shaping
up to be a Hall of Fame level.

272
00:20:52,490 --> 00:20:58,330
It let's us do things that were previously
impossible or highly untenable.

273
00:20:58,330 --> 00:21:05,279
Now, I never talk about Grid without quoting
Rachel Andrew: grid works from the container

274
00:21:05,279 --> 00:21:09,010
in while other methods start with the item.

275
00:21:09,010 --> 00:21:15,730
Think about how we did an item in a pre-Grid
era.

276
00:21:15,730 --> 00:21:20,419
When an approach for creating such a layout
is with an inline-block, so you would set

277
00:21:20,419 --> 00:21:25,440
the display of your items to inline-block
and give them a width of a third of the container.

278
00:21:25,440 --> 00:21:31,080
It is almost the same if you use floats because
you also need to set a width on each item.

279
00:21:31,080 --> 00:21:35,909
If you use Flexbox to ensure that the items
line up in three columns, you have to make

280
00:21:35,909 --> 00:21:40,000
sure that the flex basis is also a third of
the container.

281
00:21:40,000 --> 00:21:42,970
The properties applying always go on the item.

282
00:21:42,970 --> 00:21:47,809
So, for all three of the techniques I've just
described, there is no grid.

283
00:21:47,809 --> 00:21:53,010
It just looks that way because we force the
items to line up with each other.

284
00:21:53,010 --> 00:21:57,059
But with Grid, the Grid is real.

285
00:21:57,059 --> 00:22:01,990
We define its rows and columns, and then we
place items on the grid wherever we want to.

286
00:22:01,990 --> 00:22:06,880
We are freed from the limitation of elements
having to line up next to each other all the

287
00:22:06,880 --> 00:22:07,920
time.

288
00:22:07,920 --> 00:22:13,039
This means that our layouts can now be canonically
non-sequential, don't have to mess around

289
00:22:13,039 --> 00:22:20,450
with positioning or other workarounds that
we have to do for vertical spacing.

290
00:22:20,450 --> 00:22:29,110
Here, I have a six by six grid with six grid
items arbitrarily placed anywhere.

291
00:22:29,110 --> 00:22:33,450
And Grid makes it really simple and intuitive
to have vertical white space in our design,

292
00:22:33,450 --> 00:22:38,610
so you essentially just design which row and
which column you want your item to be.

293
00:22:38,610 --> 00:22:43,929
It is just co-ordinates, so, if you change
the row, I can just move that soccer ball

294
00:22:43,929 --> 00:22:45,020
down the grid.

295
00:22:45,020 --> 00:22:51,700
So it is really intuitive to have vertical
white space in our designs with CSS Grid.

296
00:22:51,700 --> 00:22:56,170
Like I mentioned, there's a lot of great graphing
design we can draw inspiration from.

297
00:22:56,170 --> 00:23:07,360
This is from a book - butchering the pronunciation!
- this is a striking design with bold black

298
00:23:07,360 --> 00:23:11,200
borders and content aligned in different configurations.

299
00:23:11,200 --> 00:23:17,250
If we want this design on the web, some team
work will need to be involved.

300
00:23:17,250 --> 00:23:23,890
The code is abridged to show mainly the layout,
but even the gear and arrows can be made with

301
00:23:23,890 --> 00:23:27,029
your pure CSS, a box-shadow trick.

302
00:23:27,029 --> 00:23:34,200
In order to align the content of each Grid
child without disrupting the rendering of

303
00:23:34,200 --> 00:23:40,870
the thick black borders, we need to make each
Grid child a flex parent.

304
00:23:40,870 --> 00:23:45,600
By default, the value of a grid item's alignment
is stretch, where it fills up the entire space

305
00:23:45,600 --> 00:23:47,370
of the Grid correctly.

306
00:23:47,370 --> 00:23:54,490
Once you apply an alignment, it will shrink
to fit the content.

307
00:23:54,490 --> 00:23:59,350
Making each grid item of flex container allows
to us use box alignment properties to adjust

308
00:23:59,350 --> 00:24:06,090
the position of the Grid item's content while
keeping the borders at the edge of the Grid.

309
00:24:06,090 --> 00:24:09,659
Another thing that Grid makes a lot easier
is overlap.

310
00:24:09,659 --> 00:24:14,019
We could have achieved an overlap effect with
absolute positioning but removing an element

311
00:24:14,019 --> 00:24:18,940
from the document flow usually brings about
a lot of unwanted consequences.

312
00:24:18,940 --> 00:24:24,860
With Grid replacement, it is easily achieved
without disrupting the layout at all.

313
00:24:24,860 --> 00:24:33,340
This is from English Painter, a new practical
treaties on three primitive colours.

314
00:24:33,340 --> 00:24:34,779
Totally doable on the web.

315
00:24:34,779 --> 00:24:41,330
Again, the code is abridged, but placement
is a matter of defining which row and column

316
00:24:41,330 --> 00:24:45,260
you would like your element to appear in,
and how many grid cells you would like it

317
00:24:45,260 --> 00:24:46,260
to take up.

318
00:24:46,260 --> 00:24:52,470
It is perfectly acceptable to have multiple
elements occupy the same space on your grid.

319
00:24:52,470 --> 00:24:59,750
This demo was an excuse to play with CSS blend
modes, the same as Photoshop, but it was Adobe

320
00:24:59,750 --> 00:25:03,820
who proposed the specification for it.

321
00:25:03,820 --> 00:25:13,799
This poster 
is a rather Grid-able design.

322
00:25:13,799 --> 00:25:18,230
No surprises here that such a design can be
done on the web with CSS Grid.

323
00:25:18,230 --> 00:25:24,049
When we take into account how dynamic the
web is, we are designing for a medium whereby

324
00:25:24,049 --> 00:25:28,260
we have absolutely no control how our designs
will be viewed.

325
00:25:28,260 --> 00:25:30,300
Things get a little bit more interesting.

326
00:25:30,300 --> 00:25:36,380
It is probably a better idea to consider aspect
ratios over absolute dimensions when it comes

327
00:25:36,380 --> 00:25:43,049
to designing web layouts, and the aspect ratio
media query let's us do that natively.

328
00:25:43,049 --> 00:25:49,120
Even though the most common media query we
use, there are 13 media features available

329
00:25:49,120 --> 00:25:51,960
for use as conditions, including height and
orientation.

330
00:25:51,960 --> 00:25:59,659
Somehow, we are just not seeing them being
used that often on the web at the moment.

331
00:25:59,659 --> 00:26:04,309
Aspect ratio media queries are especially
useful for designs that use view port units

332
00:26:04,309 --> 00:26:11,760
but there's no limit on how you wish to use
multiple media query designs fully adaptable.

333
00:26:11,760 --> 00:26:20,580
An often raised concern for features especially
those for layout is browser support.

334
00:26:20,580 --> 00:26:22,799
Nobody wants the site to look broken.

335
00:26:22,799 --> 00:26:24,220
That's legit.

336
00:26:24,220 --> 00:26:28,840
Here is where feature queries come in, and
Oliver, who is coming up after me, will go

337
00:26:28,840 --> 00:26:35,700
into details, so a brief preview to warm him
up for his talk!

338
00:26:35,700 --> 00:26:37,660
This is how a feature query looks like.

339
00:26:37,660 --> 00:26:44,809
The condition checks - if it doesn't, the
entire block is ignored.

340
00:26:44,809 --> 00:26:48,980
That means we start off with a basic layout
that works everywhere.

341
00:26:48,980 --> 00:26:55,679
It means the layout on the styles.

342
00:26:55,679 --> 00:27:03,440
In this manner, the property will still get,
and those that do get a different look, so

343
00:27:03,440 --> 00:27:07,179
we are make use of the C in CSS.

344
00:27:07,179 --> 00:27:31,789
So this image would be the header for a CSS
... that caught my eye. - for

345
00:27:31,789 --> 00:27:36,830
this particular example, it's an image for
i.e. 11.

346
00:27:36,830 --> 00:27:41,620
More often, the feature query will taken code
that acts as an enhancement to a design that

347
00:27:41,620 --> 00:27:43,590
works in all browsers.

348
00:27:43,590 --> 00:27:48,150
Nothing stopping you from using feature queries
and media queries in combination to cater

349
00:27:48,150 --> 00:27:52,179
for different browsers on different devices.

350
00:27:52,179 --> 00:27:59,840
With feature queries we don't have to revisit
our codebase because the code is not browser-specific.

351
00:27:59,840 --> 00:28:02,309
It is feature-specific.

352
00:28:02,309 --> 00:28:06,220
Once a feature gets shipped, your design will
be updated automatically.

353
00:28:06,220 --> 00:28:17,240
This example makes use of a combination of
feature queries for both Grid and CSS shapes.

354
00:28:17,240 --> 00:28:23,019
For now, Firefox users in the middle don't
get to see the CSS shapes yet.

355
00:28:23,019 --> 00:28:29,909
Once they do, the layout will look like what
Chrome users see at the moment on the right.

356
00:28:29,909 --> 00:28:35,080
It used to be that a new feature or bug fix
would take a long time to ship, and that was

357
00:28:35,080 --> 00:28:41,070
true in the earlier days where browsers were
updated maybe six months, every six months.

358
00:28:41,070 --> 00:28:44,380
These days, the upgrade cycle has shortened
immensely.

359
00:28:44,380 --> 00:28:52,649
This is problemly not the best data visualisation,
but the point is that browsers are being updated

360
00:28:52,649 --> 00:28:54,810
fast and furiously these days.

361
00:28:54,810 --> 00:28:58,920
The favourite to talk about is the release
of CSS Grid.

362
00:28:58,920 --> 00:29:02,080
Most major browsers shipped it in March last
year.

363
00:29:02,080 --> 00:29:07,000
By October, 75 per cent of users around the
world were using a browser that supported

364
00:29:07,000 --> 00:29:08,060
Grid.

365
00:29:08,060 --> 00:29:12,019
Today, that number is 87 per cent.

366
00:29:12,019 --> 00:29:14,500
How amazing is that?

367
00:29:14,500 --> 00:29:18,470
It's so much easier to get enthusiastic about
new CSS features these days because they become

368
00:29:18,470 --> 00:29:24,460
ship and are widely supported quicker now,
and the same goes for bug fixes.

369
00:29:24,460 --> 00:29:30,080
Every major browser engine has an open process
for raising bugs, and raising bugs for a particular

370
00:29:30,080 --> 00:29:33,700
feature sends a signal that people want to
use them.

371
00:29:33,700 --> 00:29:44,440
It is a win by everyone, by taking the time
to submit a bug report, you gain cover points,

372
00:29:44,440 --> 00:29:48,710
you get your bugs fixed, and you make the
web better for all of us.

373
00:29:48,710 --> 00:29:51,210
So, that's it from me.

374
00:29:51,210 --> 00:29:56,809
I just wanted to round off by saying that
you don't need to use any of these techniques

375
00:29:56,809 --> 00:30:02,430
or properties I covered if they don't fit
your use cases today, but know that, when

376
00:30:02,430 --> 00:30:05,780
the time comes, they will all be right here
waiting for you.

377
00:30:05,780 --> 00:30:07,360
Thank you all for your kind attention.

