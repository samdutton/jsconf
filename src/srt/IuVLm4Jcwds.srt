1
00:00:00,000 --> 00:00:05,870

ah

2
00:00:05,880 --> 00:00:13,650
I did not have time to do slides I was

3
00:00:13,650 --> 00:00:15,510
going to do it on the bus right here and

4
00:00:15,510 --> 00:00:17,869
I had some other stuff to prepare so

5
00:00:17,869 --> 00:00:20,369
last minute we are just going to do a

6
00:00:20,369 --> 00:00:22,500
short run through and discussion

7
00:00:22,500 --> 00:00:24,419
anything you guys want to ask once I

8
00:00:24,419 --> 00:00:28,290
sort of give a short intro here um part

9
00:00:28,290 --> 00:00:30,060
of the reason I'm giving this talk on

10
00:00:30,060 --> 00:00:32,310
track be is javascript is such an

11
00:00:32,310 --> 00:00:34,260
amazing language that is so tempting to

12
00:00:34,260 --> 00:00:38,520
use it for everything now that's great

13
00:00:38,520 --> 00:00:41,010
when when you need it but we should also

14
00:00:41,010 --> 00:00:43,890
always consider languages that really

15
00:00:43,890 --> 00:00:46,560
fit the the problem best not not even

16
00:00:46,560 --> 00:00:49,230
just good but really really well it's

17
00:00:49,230 --> 00:00:52,100
always good to have that extra edge so

18
00:00:52,100 --> 00:00:54,900
one reason i chose lua is because it's

19
00:00:54,900 --> 00:00:56,820
almost so close to javascript you would

20
00:00:56,820 --> 00:00:59,760
say that we might as well use javascript

21
00:00:59,760 --> 00:01:02,600
but i wanted to show a few reasons why

22
00:01:02,600 --> 00:01:05,579
why that might not be the case i'm the

23
00:01:05,579 --> 00:01:07,829
first one and in kind of the provocative

24
00:01:07,829 --> 00:01:12,630
point i was going to show in a demo are

25
00:01:12,630 --> 00:01:16,439
some benchmarks versus v8 so if you look

26
00:01:16,439 --> 00:01:18,990
at this graph it's a little cryptic but

27
00:01:18,990 --> 00:01:20,640
if we scroll down here a little bit we

28
00:01:20,640 --> 00:01:23,909
can see you can see some numbers here pi

29
00:01:23,909 --> 00:01:25,619
digits is a is a benchmark that

30
00:01:25,619 --> 00:01:31,999
generates a generates on some numbers so

31
00:01:31,999 --> 00:01:35,340
pi numbers aren't generally useful in

32
00:01:35,340 --> 00:01:37,409
real code but we can see that lua is

33
00:01:37,409 --> 00:01:40,619
literally 87 times faster not just four

34
00:01:40,619 --> 00:01:43,770
or five this is the sort of difference

35
00:01:43,770 --> 00:01:46,049
that we tend to see in like see versus

36
00:01:46,049 --> 00:01:49,139
something else notnot lua WebGL is great

37
00:01:49,139 --> 00:01:51,959
for owned by mr. this is v8 vs Lua jutt

38
00:01:51,959 --> 00:01:55,409
um so also the memory usage and other

39
00:01:55,409 --> 00:01:57,689
things patterns are very impressive now

40
00:01:57,689 --> 00:01:59,069
if we if we look at some of these other

41
00:01:59,069 --> 00:02:02,759
ones we see that here at the top there

42
00:02:02,759 --> 00:02:05,069
are a few cases where VA is faster I

43
00:02:05,069 --> 00:02:08,069
think it's mostly the tune chip-based

44
00:02:08,069 --> 00:02:10,590
regular expression engine they use which

45
00:02:10,590 --> 00:02:13,250
is really really fast I don't think Lua

46
00:02:13,250 --> 00:02:15,900
does any jit compile a scene for regular

47
00:02:15,900 --> 00:02:19,230
expressions at this point but it's it's

48
00:02:19,230 --> 00:02:20,670
a very compelling that you can get

49
00:02:20,670 --> 00:02:22,560
something so performant in a language

50
00:02:22,560 --> 00:02:25,230
that's so dynamic literally to the point

51
00:02:25,230 --> 00:02:29,000
where let me adjust this comparison

52
00:02:29,000 --> 00:02:34,739
let's say check against the java 6

53
00:02:34,739 --> 00:02:40,170
server this is inge it very very very

54
00:02:40,170 --> 00:02:42,750
close I mean I'm pi digits it's actually

55
00:02:42,750 --> 00:02:45,090
faster and then on some of these it's

56
00:02:45,090 --> 00:02:47,940
only just a couple times off and plus or

57
00:02:47,940 --> 00:02:49,560
minus on some of these benchmarks might

58
00:02:49,560 --> 00:02:52,140
as well be the same and keep in mind

59
00:02:52,140 --> 00:02:54,720
look at the memories that's amazing it's

60
00:02:54,720 --> 00:02:57,390
still very very lightweight to

61
00:02:57,390 --> 00:03:00,030
accomplish this is really really

62
00:03:00,030 --> 00:03:02,430
impressive so luige it's an amazing

63
00:03:02,430 --> 00:03:06,180
piece of piece of code that this guy

64
00:03:06,180 --> 00:03:09,450
Mike Paul put together and I definitely

65
00:03:09,450 --> 00:03:12,540
think it's it's promising for javascript

66
00:03:12,540 --> 00:03:15,000
in the future but right now if something

67
00:03:15,000 --> 00:03:17,579
like embed ability and speed are both

68
00:03:17,579 --> 00:03:20,129
really important you should possibly

69
00:03:20,129 --> 00:03:24,569
consider this also for the education of

70
00:03:24,569 --> 00:03:26,940
how you write your java program and in

71
00:03:26,940 --> 00:03:30,870
JavaScript programs the the best way to

72
00:03:30,870 --> 00:03:34,049
really get a hold of that better is to

73
00:03:34,049 --> 00:03:36,840
actually use other languages to actually

74
00:03:36,840 --> 00:03:39,269
extend the way you understand JavaScript

75
00:03:39,269 --> 00:03:42,900
itself so unfortunately let's see if I

76
00:03:42,900 --> 00:03:46,470
can find some examples in the original

77
00:03:46,470 --> 00:03:50,010
book they have a second edition of this

78
00:03:50,010 --> 00:03:51,870
book programming in Lua which is great

79
00:03:51,870 --> 00:03:56,209
but it's not available for free online

80
00:03:56,209 --> 00:04:00,810
but the first edition is so let me see

81
00:04:00,810 --> 00:04:08,470
if I can find the link here we are

82
00:04:08,480 --> 00:04:13,980
so LeWitt generally looks very much like

83
00:04:13,980 --> 00:04:15,870
javascript you'll see a couple

84
00:04:15,870 --> 00:04:19,049
differences I guess I have to click on

85
00:04:19,049 --> 00:04:22,620
one of these sections let me go over the

86
00:04:22,620 --> 00:04:24,840
sum of these short sections without

87
00:04:24,840 --> 00:04:26,970
clicking on them you generally have nil

88
00:04:26,970 --> 00:04:28,770
which is like null you have bullion's

89
00:04:28,770 --> 00:04:31,080
numbers numbers are the same you know

90
00:04:31,080 --> 00:04:35,150
single class concept in in JavaScript

91
00:04:35,150 --> 00:04:39,150
strings are very very similar tables are

92
00:04:39,150 --> 00:04:40,680
probably the first interesting thing

93
00:04:40,680 --> 00:04:45,120
that will vary on tables in Lua are used

94
00:04:45,120 --> 00:04:48,170
for both array types and hash types

95
00:04:48,170 --> 00:04:51,750
tables are very very well optimized in

96
00:04:51,750 --> 00:04:54,540
Lua which allows you to basically get

97
00:04:54,540 --> 00:04:56,400
array like performance when you're using

98
00:04:56,400 --> 00:04:58,920
it like an array and then you can get a

99
00:04:58,920 --> 00:05:02,790
hash table like system when you actually

100
00:05:02,790 --> 00:05:06,030
use some other key like ax and you can

101
00:05:06,030 --> 00:05:08,130
also do the access just like JavaScript

102
00:05:08,130 --> 00:05:11,580
a dot X does the same thing a got show

103
00:05:11,580 --> 00:05:14,669
with lua though indexing starts at one

104
00:05:14,669 --> 00:05:16,530
not zero I'm not going to go into that

105
00:05:16,530 --> 00:05:20,310
just be aware it's it's a subject of

106
00:05:20,310 --> 00:05:24,210
much controversy so if we if we go

107
00:05:24,210 --> 00:05:26,040
through this a lot of this will probably

108
00:05:26,040 --> 00:05:29,760
read pretty easily it's got a slightly

109
00:05:29,760 --> 00:05:34,350
nicer to read for loop style here I much

110
00:05:34,350 --> 00:05:36,210
prefer this over the we borrowed it from

111
00:05:36,210 --> 00:05:39,990
Java concept in JavaScript with the four

112
00:05:39,990 --> 00:05:42,510
and increment in the compare this tends

113
00:05:42,510 --> 00:05:44,130
to be a lot easier to optimize as well

114
00:05:44,130 --> 00:05:47,340
possibly one reason Lua gets a lot of

115
00:05:47,340 --> 00:05:51,180
performance let's let's go to another

116
00:05:51,180 --> 00:05:54,750
section we've got functions which are

117
00:05:54,750 --> 00:06:03,240
obviously important if it loads okay

118
00:06:03,240 --> 00:06:10,409
where's some code just need some code

119
00:06:10,419 --> 00:06:12,590
okay we're going back to the table of

120
00:06:12,590 --> 00:06:20,030
contents part one the language where am

121
00:06:20,030 --> 00:06:29,090
I going okay so let's yeah here we go so

122
00:06:29,090 --> 00:06:31,490
functions obviously wrap things up just

123
00:06:31,490 --> 00:06:34,460
the way it does in JavaScript although

124
00:06:34,460 --> 00:06:37,190
instead of curly brackets we we use end

125
00:06:37,190 --> 00:06:40,639
let me get that higher for you guys so

126
00:06:40,639 --> 00:06:42,860
generally you still have the explicit

127
00:06:42,860 --> 00:06:45,020
return you have to declare your local

128
00:06:45,020 --> 00:06:46,970
variables which is still a pain in the

129
00:06:46,970 --> 00:06:48,620
ass it should be automatic i think in

130
00:06:48,620 --> 00:06:51,350
modern languages but like javascript is

131
00:06:51,350 --> 00:06:54,050
quite old so local some is just like VAR

132
00:06:54,050 --> 00:06:57,169
some notice we don't have any trailing

133
00:06:57,169 --> 00:06:59,169
semicolons they're all optional in lua

134
00:06:59,169 --> 00:07:01,130
there are fewer problems with the

135
00:07:01,130 --> 00:07:02,960
grammar when you leave them off so it's

136
00:07:02,960 --> 00:07:06,650
perfectly fine to not add them in in

137
00:07:06,650 --> 00:07:08,360
this case we have another form of the

138
00:07:08,360 --> 00:07:10,940
for loop this is a 4 in this allows us

139
00:07:10,940 --> 00:07:13,550
to get integer pairs so the actual index

140
00:07:13,550 --> 00:07:17,570
and the value and then here we pass in

141
00:07:17,570 --> 00:07:20,600
the actual array that we want to some so

142
00:07:20,600 --> 00:07:22,580
basically we're summing this up and

143
00:07:22,580 --> 00:07:25,160
returning the value of all the integer

144
00:07:25,160 --> 00:07:30,110
elements in this array so very very

145
00:07:30,110 --> 00:07:32,510
similar in that sense now if we go to

146
00:07:32,510 --> 00:07:35,210
some of the more advanced stuff besides

147
00:07:35,210 --> 00:07:38,150
syntax we start getting into some more

148
00:07:38,150 --> 00:07:40,190
interesting things that we don't find in

149
00:07:40,190 --> 00:07:42,470
JavaScript and this is where possibly

150
00:07:42,470 --> 00:07:45,380
you can start thinking about how how you

151
00:07:45,380 --> 00:07:48,620
can change the way you use or even

152
00:07:48,620 --> 00:07:50,510
generate JavaScript to do other things

153
00:07:50,510 --> 00:07:54,620
co routines are amazingly great tools

154
00:07:54,620 --> 00:07:56,510
for certain things have you ever wanted

155
00:07:56,510 --> 00:07:59,800
in your asynchronous Ajax code to write

156
00:07:59,800 --> 00:08:02,570
ok send this back and assign it to a

157
00:08:02,570 --> 00:08:03,800
variable I don't want to call back i

158
00:08:03,800 --> 00:08:05,479
just want to assign it to a variable and

159
00:08:05,479 --> 00:08:10,190
then maybe i want to do something with

160
00:08:10,190 --> 00:08:11,750
that variable and send it off somewhere

161
00:08:11,750 --> 00:08:14,510
else well co routines let you do that

162
00:08:14,510 --> 00:08:16,940
what it basically ends up being like let

163
00:08:16,940 --> 00:08:23,880
me see if i can get a good example of

164
00:08:23,890 --> 00:08:28,310
pardon the web okay so here we have a

165
00:08:28,310 --> 00:08:31,070
producer and consumer so you can see

166
00:08:31,070 --> 00:08:32,810
that one's just looping it's not

167
00:08:32,810 --> 00:08:35,060
yielding there's no call back here it's

168
00:08:35,060 --> 00:08:39,650
literally saying send and receive if you

169
00:08:39,650 --> 00:08:41,360
if you look at both parts we have send

170
00:08:41,360 --> 00:08:45,350
and receive here so these are basically

171
00:08:45,350 --> 00:08:47,270
the callback points between the two co

172
00:08:47,270 --> 00:08:49,130
routines now this send and receive is

173
00:08:49,130 --> 00:08:51,440
just abstract code internally you

174
00:08:51,440 --> 00:08:55,070
actually have to use Co routine resume

175
00:08:55,070 --> 00:08:59,660
and then coaching create now send right

176
00:08:59,660 --> 00:09:03,500
here is basically a synonym for Co

177
00:09:03,500 --> 00:09:05,570
routine yield so we have these two co

178
00:09:05,570 --> 00:09:06,860
routines that are bouncing back and

179
00:09:06,860 --> 00:09:09,230
forth kind of like parallel stacks that

180
00:09:09,230 --> 00:09:11,600
allow us to pass values back and forth

181
00:09:11,600 --> 00:09:14,780
so what you could have in a system that

182
00:09:14,780 --> 00:09:19,520
wanted asynchronous Ajax requests in

183
00:09:19,520 --> 00:09:20,900
JavaScript with the same sort of thing

184
00:09:20,900 --> 00:09:22,640
is you would have to emulate co routines

185
00:09:22,640 --> 00:09:27,380
with a compiler and then and then allow

186
00:09:27,380 --> 00:09:32,510
the the code to to basically yield to

187
00:09:32,510 --> 00:09:34,670
the Ajax calling engine then when it's

188
00:09:34,670 --> 00:09:36,290
done it would actually resume with the

189
00:09:36,290 --> 00:09:38,330
value in the result rather than calling

190
00:09:38,330 --> 00:09:40,370
a call back so resuming versus a call

191
00:09:40,370 --> 00:09:42,740
back now co routines aren't free they do

192
00:09:42,740 --> 00:09:45,500
have a little overhead they are possible

193
00:09:45,500 --> 00:09:49,010
unlike a lot of rumors to implement

194
00:09:49,010 --> 00:09:52,100
efficiently so it's not impossible to

195
00:09:52,100 --> 00:09:54,140
get these pretty lightweight but they're

196
00:09:54,140 --> 00:09:55,460
still going to be a little heavier than

197
00:09:55,460 --> 00:09:57,560
say the overhead of a call back you're

198
00:09:57,560 --> 00:10:01,280
looking at probably four to eight k / co

199
00:10:01,280 --> 00:10:03,890
routine possibly up to one megabyte if

200
00:10:03,890 --> 00:10:05,660
you're using native see stacks to

201
00:10:05,660 --> 00:10:08,390
implement them so there there's

202
00:10:08,390 --> 00:10:10,880
something you need to use carefully but

203
00:10:10,880 --> 00:10:13,850
still very powerful likewise you can

204
00:10:13,850 --> 00:10:17,870
create very very easy to use iterators

205
00:10:17,870 --> 00:10:20,420
one thing that's very popular is to

206
00:10:20,420 --> 00:10:23,060
build a simple loop to generate values

207
00:10:23,060 --> 00:10:25,310
and then externally treat it as an

208
00:10:25,310 --> 00:10:26,510
external iterator and just call next

209
00:10:26,510 --> 00:10:28,820
next next when you need the value so

210
00:10:28,820 --> 00:10:31,340
you're pulling and this this is very

211
00:10:31,340 --> 00:10:33,920
popular with generators in JavaScript I

212
00:10:33,920 --> 00:10:34,190
mean

213
00:10:34,190 --> 00:10:37,700
python and then also something we see in

214
00:10:37,700 --> 00:10:41,360
Ruby 19 and of course it's kind of like

215
00:10:41,360 --> 00:10:44,000
a cooperative multithreading so I'll

216
00:10:44,000 --> 00:10:50,000
skip that otherwise it's got a lot of

217
00:10:50,000 --> 00:10:53,600
meta meta programming capability and

218
00:10:53,600 --> 00:10:55,910
this is probably the next and final well

219
00:10:55,910 --> 00:10:58,580
I'll go over one other thing the meta

220
00:10:58,580 --> 00:11:00,410
programming capability in lieu is great

221
00:11:00,410 --> 00:11:04,580
like people asked Douglas Crockford when

222
00:11:04,580 --> 00:11:05,870
are we getting something like method

223
00:11:05,870 --> 00:11:08,450
missing and Ruby Dee and JavaScript and

224
00:11:08,450 --> 00:11:10,520
we do have defined property now but it

225
00:11:10,520 --> 00:11:12,740
doesn't allow us the the capability to

226
00:11:12,740 --> 00:11:17,470
catch arbitrary keys for any object so

227
00:11:17,470 --> 00:11:20,360
with with meta tables and meta methods

228
00:11:20,360 --> 00:11:23,390
in Lua it allows us to basically set in

229
00:11:23,390 --> 00:11:26,330
a meta table for any other table a table

230
00:11:26,330 --> 00:11:28,580
is kind of like your object I'll explain

231
00:11:28,580 --> 00:11:30,650
that in a minute and you can define ways

232
00:11:30,650 --> 00:11:34,130
that property access property generation

233
00:11:34,130 --> 00:11:35,870
property setting all of that works

234
00:11:35,870 --> 00:11:38,570
through through these meta methods so

235
00:11:38,570 --> 00:11:41,030
table access meta methods we can look at

236
00:11:41,030 --> 00:11:45,290
this oh great it's not going to show me

237
00:11:45,290 --> 00:11:53,390
code again let's see so you can see

238
00:11:53,390 --> 00:11:55,940
those get and set meta table so s1 is

239
00:11:55,940 --> 00:11:59,750
basically our pseudo object and this is

240
00:11:59,750 --> 00:12:02,000
how we control the the meta tables on

241
00:12:02,000 --> 00:12:04,730
objects we have things like to string

242
00:12:04,730 --> 00:12:07,880
which helps control how things are

243
00:12:07,880 --> 00:12:09,590
coerced to strings when we want to print

244
00:12:09,590 --> 00:12:13,850
them out and such we've also got index

245
00:12:13,850 --> 00:12:16,850
and new index these control generation

246
00:12:16,850 --> 00:12:19,610
or mist property accesses which is

247
00:12:19,610 --> 00:12:21,440
really useful it allows you to basically

248
00:12:21,440 --> 00:12:26,240
do method missing and do it very

249
00:12:26,240 --> 00:12:28,400
flexibly so I'm not going to go too much

250
00:12:28,400 --> 00:12:29,990
further into that again trying to keep

251
00:12:29,990 --> 00:12:33,230
this somewhat short the next area that's

252
00:12:33,230 --> 00:12:37,430
sort of interesting is how Lua does oo

253
00:12:37,430 --> 00:12:39,020
programming it's very similar to

254
00:12:39,020 --> 00:12:42,170
javascript in a way it's more prototype

255
00:12:42,170 --> 00:12:44,750
based so we have these tables that are

256
00:12:44,750 --> 00:12:46,640
just bags of properties now the cool

257
00:12:46,640 --> 00:12:47,960
thing about these tables is

258
00:12:47,960 --> 00:12:49,640
the keys can be anything more than just

259
00:12:49,640 --> 00:12:51,440
strings so we can we can basically

260
00:12:51,440 --> 00:12:55,370
create any sort of mapping between 11

261
00:12:55,370 --> 00:12:57,410
set of access ER and another allows a

262
00:12:57,410 --> 00:12:59,390
very rich way to create something that

263
00:12:59,390 --> 00:13:01,400
looks like an object and then you can

264
00:13:01,400 --> 00:13:05,420
give it better behavior by adding stuff

265
00:13:05,420 --> 00:13:08,420
via the meta tables or basically

266
00:13:08,420 --> 00:13:10,580
creating inheritance via the meta table

267
00:13:10,580 --> 00:13:12,740
features so you can basically say look

268
00:13:12,740 --> 00:13:14,660
things up in this object when you can't

269
00:13:14,660 --> 00:13:17,420
find it here since this is totally user

270
00:13:17,420 --> 00:13:19,640
programmable though people have come up

271
00:13:19,640 --> 00:13:22,700
with all kinds of ways to program Lua on

272
00:13:22,700 --> 00:13:27,230
there are many many ways to do the meta

273
00:13:27,230 --> 00:13:29,180
table set up so people have emulated

274
00:13:29,180 --> 00:13:31,850
class style inheritance systems they've

275
00:13:31,850 --> 00:13:34,370
emulated purely prototype and different

276
00:13:34,370 --> 00:13:36,230
differential inheritance based systems

277
00:13:36,230 --> 00:13:38,990
as well as something more like self if

278
00:13:38,990 --> 00:13:42,160
you're familiar so the the syntax that

279
00:13:42,160 --> 00:13:44,360
that you should be aware of in this case

280
00:13:44,360 --> 00:13:47,540
is this colon right here is is somewhat

281
00:13:47,540 --> 00:13:51,250
like passing self as a implicit argument

282
00:13:51,250 --> 00:13:55,010
to the function itself right here on if

283
00:13:55,010 --> 00:13:57,440
we called it without and just did dot it

284
00:13:57,440 --> 00:13:59,570
would expect that first argument to be

285
00:13:59,570 --> 00:14:02,780
self so as we see we don't have to

286
00:14:02,780 --> 00:14:04,790
declare and it's available here self

287
00:14:04,790 --> 00:14:06,800
just if you guys are wondering is like

288
00:14:06,800 --> 00:14:10,940
this in JavaScript so we can see we're

289
00:14:10,940 --> 00:14:14,330
setting up an account here and basically

290
00:14:14,330 --> 00:14:16,100
setting up the meda table kind of like a

291
00:14:16,100 --> 00:14:19,490
constructor usually you wouldn't have to

292
00:14:19,490 --> 00:14:21,650
implement new unless it's you know a

293
00:14:21,650 --> 00:14:26,810
base class of your own system and then

294
00:14:26,810 --> 00:14:30,560
account dot deposit you can see how a is

295
00:14:30,560 --> 00:14:32,780
actually our account instance and

296
00:14:32,780 --> 00:14:36,440
otherwise if we did colon a colon

297
00:14:36,440 --> 00:14:39,140
deposit it would actually call the meta

298
00:14:39,140 --> 00:14:42,980
table so that's that's the quick intro

299
00:14:42,980 --> 00:14:45,590
the rough information here do you guys

300
00:14:45,590 --> 00:14:48,400
have anything you want me to explore or

301
00:14:48,400 --> 00:14:52,400
questions

302
00:14:52,410 --> 00:14:55,240
yes Lou is actually probably one of the

303
00:14:55,240 --> 00:14:59,769
easiest easiest languages to to work

304
00:14:59,769 --> 00:15:02,649
with as far as she goes so it's not only

305
00:15:02,649 --> 00:15:04,720
easy to write actual see extensions and

306
00:15:04,720 --> 00:15:07,449
then embed it in other see environments

307
00:15:07,449 --> 00:15:13,810
but there is a huge amount of community

308
00:15:13,810 --> 00:15:15,730
out there that has contributed a lot of

309
00:15:15,730 --> 00:15:17,589
libraries one of the things you'll

310
00:15:17,589 --> 00:15:19,870
notice let me show you how to scroll

311
00:15:19,870 --> 00:15:21,699
down here a little bit is the standard

312
00:15:21,699 --> 00:15:24,399
library is actually very short and small

313
00:15:24,399 --> 00:15:27,250
so we have basically you know a little

314
00:15:27,250 --> 00:15:28,959
bit of math some table stuff string

315
00:15:28,959 --> 00:15:31,810
stuff a few IO things and some OS things

316
00:15:31,810 --> 00:15:33,519
so you can start and stop and exit your

317
00:15:33,519 --> 00:15:37,060
process the reason it's so minimal is it

318
00:15:37,060 --> 00:15:38,920
initially it was more so for embedding

319
00:15:38,920 --> 00:15:40,480
in other programs that have their own

320
00:15:40,480 --> 00:15:43,990
sort of domain to work with and here we

321
00:15:43,990 --> 00:15:49,149
see that we need a lot more to do say

322
00:15:49,149 --> 00:15:50,769
foreign function interface stuff so

323
00:15:50,769 --> 00:15:52,449
people have provided those and you can

324
00:15:52,449 --> 00:15:54,610
basically require them in dynamically at

325
00:15:54,610 --> 00:15:57,160
runtime and that's been a very big

326
00:15:57,160 --> 00:15:59,649
benefit to the Lua community but

327
00:15:59,649 --> 00:16:02,019
unfortunately batteries are still not

328
00:16:02,019 --> 00:16:04,269
included so you do have to go search

329
00:16:04,269 --> 00:16:08,380
those out and install them how is

330
00:16:08,380 --> 00:16:10,990
debugging when you embed it into web

331
00:16:10,990 --> 00:16:14,260
pages insist oh it's it's not available

332
00:16:14,260 --> 00:16:16,269
in web browsers web browsers haven't

333
00:16:16,269 --> 00:16:18,970
implemented it people have worked on

334
00:16:18,970 --> 00:16:22,690
some early Lua to JavaScript compilers

335
00:16:22,690 --> 00:16:24,579
unfortunately since Lou is a little more

336
00:16:24,579 --> 00:16:27,519
dynamic it's a little hard to do a very

337
00:16:27,519 --> 00:16:30,940
literal translation to JavaScript so

338
00:16:30,940 --> 00:16:34,449
it's it's more so of a serious vm plus

339
00:16:34,449 --> 00:16:42,070
whatever compiler you you're using

340
00:16:42,080 --> 00:16:44,520
yeah so the meta table allows you to

341
00:16:44,520 --> 00:16:45,990
take these objects and basically

342
00:16:45,990 --> 00:16:48,240
intercept anything happening with them

343
00:16:48,240 --> 00:16:52,080
in JavaScript obviously we don't have

344
00:16:52,080 --> 00:16:54,330
catch all's so that's that's a big

345
00:16:54,330 --> 00:16:57,390
problem wrong man proxy also a thing

346
00:16:57,390 --> 00:17:00,450
that I run into very very quickly all

347
00:17:00,450 --> 00:17:02,040
the time in my JavaScript code is when I

348
00:17:02,040 --> 00:17:04,080
want to key an object off of something

349
00:17:04,080 --> 00:17:06,150
other than a stream you have to generate

350
00:17:06,150 --> 00:17:10,020
symbols to act in that place for you Lua

351
00:17:10,020 --> 00:17:11,640
is nice enough to just allow you to use

352
00:17:11,640 --> 00:17:14,250
anything you can put in a variable as a

353
00:17:14,250 --> 00:17:17,010
key so that's that's actually quite nice

354
00:17:17,010 --> 00:17:19,650
in Lua but again more emulation in those

355
00:17:19,650 --> 00:17:25,440
sorts of areas um Lua is primarily an

356
00:17:25,440 --> 00:17:27,710
alternative to server side JavaScript

357
00:17:27,710 --> 00:17:30,480
it's the old run for instance in a

358
00:17:30,480 --> 00:17:33,030
browser right right well Lulu is

359
00:17:33,030 --> 00:17:36,780
actually oh yeah okay so as an

360
00:17:36,780 --> 00:17:39,270
alternative to server side JavaScript is

361
00:17:39,270 --> 00:17:41,850
actually quite a good point they do have

362
00:17:41,850 --> 00:17:44,280
bindings to lib eV and stuff so there

363
00:17:44,280 --> 00:17:46,890
are things that are still immature but

364
00:17:46,890 --> 00:17:50,250
starting to become comparable to node in

365
00:17:50,250 --> 00:17:52,020
Lua so that's actually very very

366
00:17:52,020 --> 00:17:54,990
interesting but the the big thing about

367
00:17:54,990 --> 00:17:57,270
Lua is it's it's easy to embed in any

368
00:17:57,270 --> 00:17:59,250
projects that you might be developing so

369
00:17:59,250 --> 00:18:01,800
if you have a piece of software that's

370
00:18:01,800 --> 00:18:04,050
even you know say a ruby based web

371
00:18:04,050 --> 00:18:05,850
application you want to run something

372
00:18:05,850 --> 00:18:07,950
other than Ruby in that you can easily

373
00:18:07,950 --> 00:18:11,700
embed lua in Ruby or Python or a Java

374
00:18:11,700 --> 00:18:13,650
program via a lot of different

375
00:18:13,650 --> 00:18:16,440
facilities on the client side if you do

376
00:18:16,440 --> 00:18:20,700
anything with with thicker applications

377
00:18:20,700 --> 00:18:23,280
not just pure web it's definitely a good

378
00:18:23,280 --> 00:18:24,540
option and then on mobile platforms

379
00:18:24,540 --> 00:18:27,210
we're starting to see a lot of platforms

380
00:18:27,210 --> 00:18:29,880
actually install it in the core android

381
00:18:29,880 --> 00:18:32,820
for example includes a lua interpreter

382
00:18:32,820 --> 00:18:35,520
to help developers quickly prototype

383
00:18:35,520 --> 00:18:37,340
things

384
00:18:37,340 --> 00:18:39,560
on method missing is that implemented by

385
00:18:39,560 --> 00:18:41,510
adding something like a method missing

386
00:18:41,510 --> 00:18:44,420
key no an existing object it's it's

387
00:18:44,420 --> 00:18:47,450
through the meta table so that under

388
00:18:47,450 --> 00:18:49,850
under index and complete the namespace

389
00:18:49,850 --> 00:18:52,400
right right so it definitely doesn't

390
00:18:52,400 --> 00:18:54,050
actually touch the namespace and there's

391
00:18:54,050 --> 00:18:55,850
no like special star attribute or

392
00:18:55,850 --> 00:18:57,950
something like that I think the approach

393
00:18:57,950 --> 00:19:02,200
is actually very very intelligently done

