1
00:00:10,370 --> 00:00:12,200
Thank you very much for coming.

2
00:00:12,200 --> 00:00:15,290
And I first need to introduce myself.

3
00:00:15,290 --> 00:00:18,500
I'm Ziran from the UK.

4
00:00:18,500 --> 00:00:23,070
And today's talk I would like to walk you
through our practices and also our choices

5
00:00:23,070 --> 00:00:30,810
of technologies in building endtoend IoT system
with privacy in mind.

6
00:00:30,810 --> 00:00:36,040
So, to start the talk, I would like to present
to you a use case.

7
00:00:36,040 --> 00:00:38,770
And we are going to use this use case throughout
the talk today.

8
00:00:38,770 --> 00:00:45,740
What we are going to do is go behind the scenes
of the use case and look at the technology

9
00:00:45,740 --> 00:00:48,149
challenges and our solutions.

10
00:00:48,149 --> 00:00:55,000
So, first we would like to look at how to
build an IoT system okay, our use case basically

11
00:00:55,000 --> 00:00:56,840
is holiday homes.

12
00:00:56,840 --> 00:00:58,320
Holiday result.

13
00:00:58,320 --> 00:01:04,080
I think most of you has spent a holiday, rent
a home on a big holiday resort.

14
00:01:04,080 --> 00:01:07,200
We're talking about this kind of scenario.

15
00:01:07,200 --> 00:01:14,140
So, to start the first step is how to build
an IoT system for one single holiday home.

16
00:01:14,140 --> 00:01:18,860
So, in our case we are basically using the
web of things technology.

17
00:01:18,860 --> 00:01:26,950
So, we are going to attach Mozilla IoT platform
and the web.

18
00:01:26,950 --> 00:01:35,960
Once the IoT is built for one holiday home,
we're going to go further.

19
00:01:35,960 --> 00:01:38,080
How can we connect all of these homes together?

20
00:01:38,080 --> 00:01:48,120
And furthermore, can we introduce some intelligence
when we view the holiday when we view the

21
00:01:48,120 --> 00:01:52,710
connect the holiday homes together and build
the IoT for the whole holiday resort.

22
00:01:52,710 --> 00:01:58,920
So, here, and we have the main case is to
respect user's privacy.

23
00:01:58,920 --> 00:02:02,960
So, here we're going to look at learning.

24
00:02:02,960 --> 00:02:07,771
And then we're going to look at the architecture
for the whole IoT system and share with you

25
00:02:07,771 --> 00:02:10,700
our current work status.

26
00:02:10,700 --> 00:02:17,700
So, holiday homes, in this scenario, I think
only two main parties.

27
00:02:17,700 --> 00:02:21,540
One is the holiday makers.

28
00:02:21,540 --> 00:02:25,739
The other is the owner of a holiday resort.

29
00:02:25,739 --> 00:02:31,409
The owner could be just like another company
or agent.

30
00:02:31,409 --> 00:02:40,400
So, what's does the holiday owner have in
his mind when building IoT for their holiday

31
00:02:40,400 --> 00:02:42,959
resort?

32
00:02:42,959 --> 00:02:48,519
I think one essential thing is is the holiday
home very smart.

33
00:02:48,519 --> 00:02:54,900
Is it controlled and how to provide the services?

34
00:02:54,900 --> 00:03:01,090
And then when you build this, it has to be,
you know, have to be complying with the legal

35
00:03:01,090 --> 00:03:02,090
requirement.

36
00:03:02,090 --> 00:03:05,569
Respect the user's privacy.

37
00:03:05,569 --> 00:03:15,739
And the last, but not least, so, what is is
it a solution that causes the effect here?

38
00:03:15,739 --> 00:03:21,920
And does it provide a longterm benefit?

39
00:03:21,920 --> 00:03:29,560
And from the holiday maker's point of view,
I guess, for us, is just the easy access and

40
00:03:29,560 --> 00:03:34,579
easy control over the holiday utilities and
the facilities.

41
00:03:34,579 --> 00:03:38,450
And also, we want to be relaxed and not being
watched.

42
00:03:38,450 --> 00:03:45,389
We don't want anyone to monitor how we use
our electricity, how many washes we do every

43
00:03:45,389 --> 00:03:48,749
day, you know, during holiday time.

44
00:03:48,749 --> 00:03:56,290
So, let's look at how to build IoT for one
single holiday home.

45
00:03:56,290 --> 00:04:01,879
And with privacy in mind.

46
00:04:01,879 --> 00:04:04,200
How is privacy doing in IoT?

47
00:04:04,200 --> 00:04:06,950
So, how is IoT actually doing with privacy,
really?

48
00:04:06,950 --> 00:04:13,180
So, the concerns are about the risks that
the Internet of things has imposed on data

49
00:04:13,180 --> 00:04:16,431
protection and the personal privacy has been
raised for many years.

50
00:04:16,431 --> 00:04:26,350
And a survey from ICO in 2016 has stated that
six in ten Internet of things devices do not

51
00:04:26,350 --> 00:04:30,150
properly tell customers how their personal
information is being used.

52
00:04:30,150 --> 00:04:33,740
This is pretty worrying.

53
00:04:33,740 --> 00:04:40,250
The good news is that the government and also
the industry, they are taking actions.

54
00:04:40,250 --> 00:04:45,620
For example, in the EU, GDPR, I think everyone
heard about GDPR here?

55
00:04:45,620 --> 00:04:46,620
Yeah.

56
00:04:46,620 --> 00:04:47,620


57
00:04:47,620 --> 00:04:51,050
So, GDPR came in force in May last year.

58
00:04:51,050 --> 00:04:57,340
So, this new EU regulation basically is to
protect personal data in law.

59
00:04:57,340 --> 00:05:04,639
And also, when you design you know, when you
design and create new IoT solutions, we need

60
00:05:04,639 --> 00:05:08,860
to have data protection by design in mind.

61
00:05:08,860 --> 00:05:15,819
Previously known as privacy by design.

62
00:05:15,819 --> 00:05:22,770
So, for for IoT developers, this legislation
has a significant impact on how we deploy

63
00:05:22,770 --> 00:05:29,040
our technologies and what kind of services
we are building.

64
00:05:29,040 --> 00:05:35,370
So, we actually are thinking that, well, open
web platform actually permits the enhanced

65
00:05:35,370 --> 00:05:38,539
privacy compared to other technology stacks.

66
00:05:38,539 --> 00:05:48,129
So, we think actually GDPR is not only a challenge
for web IoT, but also a very good opportunity.

67
00:05:48,129 --> 00:05:56,560
So, we have been talking actually when we
build our web of things for when we build

68
00:05:56,560 --> 00:06:00,960
our IoT actually and mainly based on web of
things tech technology.

69
00:06:00,960 --> 00:06:03,340
What is, of things?

70
00:06:03,340 --> 00:06:06,360
Web of things let's just quote from Wikipedia.

71
00:06:06,360 --> 00:06:14,319
It's a software architectural style and the
programming patterns that are along the real-world

72
00:06:14,319 --> 00:06:17,550
objective to talk to the worldwide web.

73
00:06:17,550 --> 00:06:19,380
It's a tough level.

74
00:06:19,380 --> 00:06:24,790
When look at really what issues are in this.

75
00:06:24,790 --> 00:06:31,139
If you are in IoT, you know for the major
concerns in IoT is interoperability.

76
00:06:31,139 --> 00:06:37,879
Because, you know, we have like hardware and
software from different vendors and manufacturers.

77
00:06:37,879 --> 00:06:41,490
Suddenly we want to connect them together.

78
00:06:41,490 --> 00:06:45,520
And they are not nice to follow the same specifications,
the same standard.

79
00:06:45,520 --> 00:06:48,220
Probably not even talk the same language.

80
00:06:48,220 --> 00:06:50,860
So, how do you connect them together?

81
00:06:50,860 --> 00:06:56,319
So, web of things basically addresses this
issue by providing an application layer solution.

82
00:06:56,319 --> 00:07:01,810
So, aside from the difference in the network
layer physically.

83
00:07:01,810 --> 00:07:07,530
This is an application solution.

84
00:07:07,530 --> 00:07:18,009
Which means that which means actually it has
to on the Internet of things, it has to talk.

85
00:07:18,009 --> 00:07:24,199
So, the scope actually, bearing in mind the
scope of IoT is a lot broader.

86
00:07:24,199 --> 00:07:28,199
Not everything in IoT nicely connects.

87
00:07:28,199 --> 00:07:37,400
So, we would like to think that web of things
actually is an option for application layer

88
00:07:37,400 --> 00:07:41,610
solutions for the traditional IoT particle
stack.

89
00:07:41,610 --> 00:07:51,050
So, the web of things basically has been a
specification by the W3C and there's some

90
00:07:51,050 --> 00:07:55,310
implementation work by Mozilla and Google.

91
00:07:55,310 --> 00:08:01,580
And some things are actively involved in this
implementation work as well.

92
00:08:01,580 --> 00:08:04,789
And standardization works.

93
00:08:04,789 --> 00:08:16,319
So, here we have actually a loosely web of
things solution for the home.

94
00:08:16,319 --> 00:08:18,780
And we actually talk about things.

95
00:08:18,780 --> 00:08:32,260
So, can I basically you connect all your things
together, manage them and connect to the cloud.

96
00:08:32,260 --> 00:08:39,000
And we talk about controlling your things
from your smart devices like mobile phone,

97
00:08:39,000 --> 00:08:41,280
through progressive application.

98
00:08:41,280 --> 00:08:46,620
We talk about to have a new device, a new
thing.

99
00:08:46,620 --> 00:08:51,910
To connect and embody and connect to your
network through web tools.

100
00:08:51,910 --> 00:09:00,360
so, now we will look at each of those components
in detail.

101
00:09:00,360 --> 00:09:02,700
The first is the gateway.

102
00:09:02,700 --> 00:09:09,570
I guess any of you attended the Mozilla web
of things workshop this morning?

103
00:09:09,570 --> 00:09:10,570
Yeah.

104
00:09:10,570 --> 00:09:17,970
So, this gentleman, what was your impression
on yes.

105
00:09:17,970 --> 00:09:22,130
It's actually quite impressive as a platform
and it is open sourced.

106
00:09:22,130 --> 00:09:25,070
So, this morning actually the workshop, I
was there, actually.

107
00:09:25,070 --> 00:09:30,100
I think it's mainly talking about a way to
stay connected to things.

108
00:09:30,100 --> 00:09:32,670
But actually, it's more than that.

109
00:09:32,670 --> 00:09:33,850
It's basically three paths.

110
00:09:33,850 --> 00:09:37,970
We have the cloud over here.

111
00:09:37,970 --> 00:09:46,190
The cloud is a districted collection of cloud
services and provided by Mozilla to connect

112
00:09:46,190 --> 00:09:48,420
devices across a geographic area.

113
00:09:48,420 --> 00:09:52,230
And then we have syncs framework.

114
00:09:52,230 --> 00:09:58,610
This syncs framework basically is a collection
of reusable components to help you build your

115
00:09:58,610 --> 00:10:00,110
own web things.

116
00:10:00,110 --> 00:10:03,510
And we should directly expose the web of things
API.

117
00:10:03,510 --> 00:10:05,140
So, actually Mozilla created this API.

118
00:10:05,140 --> 00:10:06,140
They created a document.

119
00:10:06,140 --> 00:10:07,800
Look it up, that's what they're following.

120
00:10:07,800 --> 00:10:11,029
And coming to the things gateway.

121
00:10:11,029 --> 00:10:21,760
The things gateway is an open implementation
and which the tool is existing for access

122
00:10:21,760 --> 00:10:22,760
to the web.

123
00:10:22,760 --> 00:10:28,760
So, we can actually see that the backhand
of the things are for JS.

124
00:10:28,760 --> 00:10:32,890
This is for JS developers, this is good news.

125
00:10:32,890 --> 00:10:36,970
And NodeJS backend talking to the frontend
through the API.

126
00:10:36,970 --> 00:10:41,750
And through the secure web socket.

127
00:10:41,750 --> 00:10:48,760
Apart from JS supported, web of things actually
produced another concept called adapter.

128
00:10:48,760 --> 00:10:52,480
This adapter is actually a language adapter.

129
00:10:52,480 --> 00:10:59,990
It's programming things using another language
such as Python.

130
00:10:59,990 --> 00:11:02,490
Look at the security side.

131
00:11:02,490 --> 00:11:12,350
So, basically the web of the Mozilla things,
they gave the framework, actually.

132
00:11:12,350 --> 00:11:16,230
They're going to have you establish the HTTPS
where Mozilla tunneling is.

133
00:11:16,230 --> 00:11:31,040
And also, if you are considered this is a
type of structure for the situation.

134
00:11:31,040 --> 00:11:38,329
So, actually can tell you how it is actually
less encrypted.

135
00:11:38,329 --> 00:11:43,060
So, you establish the tunnel from your gateway
to your cloud server.

136
00:11:43,060 --> 00:11:44,209
And let's consider another situation.

137
00:11:44,209 --> 00:11:48,530
So, if you actually not on site, you're offsite.

138
00:11:48,530 --> 00:11:51,510
You're actually somewhere remotely.

139
00:11:51,510 --> 00:11:54,060
And there you want to access your things at
home.

140
00:11:54,060 --> 00:11:59,529
In this case, actually Mozilla provides this
bike tunnel.

141
00:11:59,529 --> 00:12:06,570
Back handed tunnel from your cloud server
to your gateway.

142
00:12:06,570 --> 00:12:07,940
And the other thing, this is a security side.

143
00:12:07,940 --> 00:12:14,060
And the other locater specification authorization
is they actually follow you.

144
00:12:14,060 --> 00:12:19,360
So, the token, because you can choose a different
text token, the token they are using is a

145
00:12:19,360 --> 00:12:21,880
JSON web token.

146
00:12:21,880 --> 00:12:28,610
Yeah, show this is a snapshot from one of
our applications.

147
00:12:28,610 --> 00:12:33,959
So, this shows that actually this screen pops
up on the owner.

148
00:12:33,959 --> 00:12:38,990
What happens is when you go to the applications,
you want to exercise your things.

149
00:12:38,990 --> 00:12:44,720
So, the things here are mainly like the sensors
in your home.

150
00:12:44,720 --> 00:12:48,420
And the home screen, you have this pop up.

151
00:12:48,420 --> 00:12:51,790
And you can grant the scope for the token.

152
00:12:51,790 --> 00:12:54,100
It allows you to access certain things.

153
00:12:54,100 --> 00:13:04,160
Or I can actually further you can actually
grant a read access.

154
00:13:04,160 --> 00:13:05,779
You can grant rights access.

155
00:13:05,779 --> 00:13:13,720
An owner cannot only do this, they can also
delete and then revoke these tokens.

156
00:13:13,720 --> 00:13:16,199
So, this actually is a privacy.

157
00:13:16,199 --> 00:13:24,920
We can say, you know, you don't get my content
or the scope if you don't ask me.

158
00:13:24,920 --> 00:13:30,519
And the whole progress application, I'm sure
they are down here.

159
00:13:30,519 --> 00:13:36,920
We use the P tab for mainly for mobile phones
to control devices.

160
00:13:36,920 --> 00:13:46,449
So, P tableau is a website that creates a
native app for user experiences.

161
00:13:46,449 --> 00:13:53,509
They basically address the issues in the native
mobile applications on the write side and

162
00:13:53,509 --> 00:13:55,709
this new design concept in APIs.

163
00:13:55,709 --> 00:13:58,790
But it's the way I've seen here.

164
00:13:58,790 --> 00:14:01,850
Basically, you can add it to the screen to
promote it.

165
00:14:01,850 --> 00:14:05,569
This is basically a native application feature.

166
00:14:05,569 --> 00:14:09,170
And they can do offline features offline functionality.

167
00:14:09,170 --> 00:14:14,170
So, although the functionality is limited,
it can still show you, you know, what is already

168
00:14:14,170 --> 00:14:15,170
historically there.

169
00:14:15,170 --> 00:14:16,480
You can still control something.

170
00:14:16,480 --> 00:14:20,829
So, this offline connection for us is quite
interesting.

171
00:14:20,829 --> 00:14:27,170
Because it's actually allowing you to give
us the possibility to minimize and install

172
00:14:27,170 --> 00:14:30,740
and use the data as much as possible.

173
00:14:30,740 --> 00:14:36,120
Also, you have to know give you the possibility
to know what data is reserved in my device,

174
00:14:36,120 --> 00:14:38,819
what is up there?

175
00:14:38,819 --> 00:14:45,649
So, this feature is basically a chip that
by I deploy a collection of technologies.

176
00:14:45,649 --> 00:14:48,910
A service worker.

177
00:14:48,910 --> 00:14:55,709
So, one thing is we need to talk about another
aspect of security is you can unleash your

178
00:14:55,709 --> 00:15:01,060
page through HTTPS.

179
00:15:01,060 --> 00:15:05,170
So, we talk about having a new device.

180
00:15:05,170 --> 00:15:06,740
Onboarding with Bluetooth.

181
00:15:06,740 --> 00:15:11,139
Bluetooth is basically based on Bluetooth
low energy.

182
00:15:11,139 --> 00:15:19,770
So, the idea here is that we use the web of
Bluetooth APIs to discover and connect another

183
00:15:19,770 --> 00:15:21,459
web of Bluetooth devices.

184
00:15:21,459 --> 00:15:27,760
And after that, when the authentication is
finished, we pass the WiFi information to

185
00:15:27,760 --> 00:15:29,860
the new device.

186
00:15:29,860 --> 00:15:33,160
And then the new device is connected to the
network through WiFi.

187
00:15:33,160 --> 00:15:38,730
So, the web, that was the reason we chose
it because the other thing is with the server.

188
00:15:38,730 --> 00:15:41,060
And we have HTTPS.

189
00:15:41,060 --> 00:15:47,350
And the other thing is if we want to start
Bluetooth in discovery, you have to do it

190
00:15:47,350 --> 00:15:48,470
through a user gesture.

191
00:15:48,470 --> 00:15:53,300
This is another aspect of privacy.

192
00:15:53,300 --> 00:16:03,970
So, we had we had IoT build out of one single
holiday homes.

193
00:16:03,970 --> 00:16:06,810
And we were thinking to how to connect them
together.

194
00:16:06,810 --> 00:16:10,040
Connecting them together is pretty standard.

195
00:16:10,040 --> 00:16:15,120
Because you can get the cloud server and you
can actually view that cloud connect and cloud

196
00:16:15,120 --> 00:16:19,959
server which in this case Mozilla, they have
actually prioritized that.

197
00:16:19,959 --> 00:16:27,440
Whether we look at the solution, we particularly
look at how scalable the solution is.

198
00:16:27,440 --> 00:16:34,079
Can we expand what we have in this holiday
result use case?

199
00:16:34,079 --> 00:16:40,500
Can we extent it to a smart city case with
millions and millions of devices?

200
00:16:40,500 --> 00:16:41,500
Scalability.

201
00:16:41,500 --> 00:16:46,740
And the other thing is that we know data is
very, very valuable.

202
00:16:46,740 --> 00:16:52,040
So, how do we make a good use of the user
data?

203
00:16:52,040 --> 00:16:54,680
And then we should respect their privacy.

204
00:16:54,680 --> 00:17:00,660
So, with this in mind, actually, we want to
use make good use of data.

205
00:17:00,660 --> 00:17:04,440
We want to do statics and then we're going
to do predictions.

206
00:17:04,440 --> 00:17:11,240
With this in mind, we basically are choosing
learning.

207
00:17:11,240 --> 00:17:16,260
If you have learned about federated learning?

208
00:17:16,260 --> 00:17:18,199
Okay.

209
00:17:18,199 --> 00:17:25,650
So, we actually made pretty much using federated
learning in this IoT solution.

210
00:17:25,650 --> 00:17:31,960
So, what happens is the learning is basically
a collaborative motion learning without a

211
00:17:31,960 --> 00:17:35,100
centralized training data.

212
00:17:35,100 --> 00:17:45,460
So, basically the concept was initially proposed
and termed by Google Paper two years back.

213
00:17:45,460 --> 00:17:46,460
And decentralized.

214
00:17:46,460 --> 00:17:51,870
We talk about decentralized because we mentioned
that without centralized training data.

215
00:17:51,870 --> 00:17:57,140
Which in this case is actually we talk about
clients and aggregate server.

216
00:17:57,140 --> 00:18:07,030
So, each client has their own local training
model.

217
00:18:07,030 --> 00:18:08,030
And the privacy.

218
00:18:08,030 --> 00:18:10,740
We're going to talk more about pricing the
next slide.

219
00:18:10,740 --> 00:18:15,160
And the last point is the possible personalization
for the user.

220
00:18:15,160 --> 00:18:21,960
So, basically, you could have your local trained
model and there's a possibility for you to

221
00:18:21,960 --> 00:18:24,940
personalize this model for particular users.

222
00:18:24,940 --> 00:18:36,360
So, if an IoT scenario, when we talk about
privacy, for a client, link and a server.

223
00:18:36,360 --> 00:18:39,120
We can talk about them together in conjunction.

224
00:18:39,120 --> 00:18:47,700
So, the privacy features in for the learning
basically matches the next three points.

225
00:18:47,700 --> 00:18:49,260
Selective update.

226
00:18:49,260 --> 00:18:52,390
Restrictive law, data update.

227
00:18:52,390 --> 00:18:57,750
You don't use the you try not to get updates
through raw data.

228
00:18:57,750 --> 00:19:01,440
Rather you get through parameters.

229
00:19:01,440 --> 00:19:07,940
And you process local data as close as possible
to the data results.

230
00:19:07,940 --> 00:19:11,210
Let's explain a little more on this in the
architecture.

231
00:19:11,210 --> 00:19:20,900
So, this is the architecture we have here
to build the IoT for the whole holiday resort.

232
00:19:20,900 --> 00:19:29,140
So, between things on the IoT gateway Mozilla
gave away is enough to do communication.

233
00:19:29,140 --> 00:19:38,410
So, we are talking about gateway or in each
holiday home to collect with the cloud server.

234
00:19:38,410 --> 00:19:41,630
You know, the server in the cloud.

235
00:19:41,630 --> 00:19:45,501
And in this case, we called the client.

236
00:19:45,501 --> 00:19:49,809
The client is the IoT gateway.

237
00:19:49,809 --> 00:19:57,980
And the cloud server is the aggregate data
server in the term of federated learning.

238
00:19:57,980 --> 00:20:06,860
So, what happens here is the learning model
located in each gateway, in each client.

239
00:20:06,860 --> 00:20:09,799
And once we have the initial model.

240
00:20:09,799 --> 00:20:12,710
So, you have it based on historical data.

241
00:20:12,710 --> 00:20:16,372
And then train the initial model and you locate
it.

242
00:20:16,372 --> 00:20:19,400
You can actually locate them into each client.

243
00:20:19,400 --> 00:20:22,730
And they are probably the same for the cloud
server.

244
00:20:22,730 --> 00:20:32,520
Once this is in, and the local gateways start
to train their models according to the data

245
00:20:32,520 --> 00:20:36,750
collected from this own house and update this
model.

246
00:20:36,750 --> 00:20:38,860
So, they keep on doing it.

247
00:20:38,860 --> 00:20:46,250
And what happens, the aggregate server when
it needs updated is randomly selected a certain

248
00:20:46,250 --> 00:20:48,310
number of clients.

249
00:20:48,310 --> 00:20:53,380
So, it's basically it's not at this time this
time, this time, next time.

250
00:20:53,380 --> 00:20:54,380
We don't know.

251
00:20:54,380 --> 00:20:58,430
There was three of them in this time selected,
another seven from another group.

252
00:20:58,430 --> 00:21:06,890
So, the updates actually, the way that they
send the updates with parameters.

253
00:21:06,890 --> 00:21:11,290
The raw data will stay inside the house.

254
00:21:11,290 --> 00:21:17,320
And then the cloud server basically, according
to the updates collected, the cloud server,

255
00:21:17,320 --> 00:21:21,169
the aggregate server, will update the model
itself.

256
00:21:21,169 --> 00:21:26,860
Once updated, it will also update the client
models.

257
00:21:26,860 --> 00:21:30,330
So, sorry.

258
00:21:30,330 --> 00:21:43,950
So, with this we can actually it's actually
actually we would meet with others.

259
00:21:43,950 --> 00:21:46,580
First the data doesn't go out of your house.

260
00:21:46,580 --> 00:21:49,630
The raw data doesn't go out of your house.

261
00:21:49,630 --> 00:21:56,200
Second, the aggregate server still can, based
on the model, is training the aggregate server,

262
00:21:56,200 --> 00:22:01,909
started the prediction, created a prediction
on statistics.

263
00:22:01,909 --> 00:22:10,000
So, our work on federated learning in IoT
is making progress.

264
00:22:10,000 --> 00:22:14,990
At this moment we sync up the framework between
the client and the server.

265
00:22:14,990 --> 00:22:22,500
And then also we actually managed to get all
kinds of flows in Raspberry Pi's 3.

266
00:22:22,500 --> 00:22:29,520
This is just a simple example we have run
on an aggregate service that we are in the

267
00:22:29,520 --> 00:22:34,960
process of actually doing in like a utility
usage in a house that the model is not fully

268
00:22:34,960 --> 00:22:35,960
ready yet.

269
00:22:35,960 --> 00:22:37,400
So, this is a model actually.

270
00:22:37,400 --> 00:22:43,380
When we test the framework, we actually create
it had simple model and just try to see how

271
00:22:43,380 --> 00:22:44,760
things work.

272
00:22:44,760 --> 00:22:50,429
So, this model basically is to recognize how
to write in digits.

273
00:22:50,429 --> 00:22:56,409
So, what happens is we show here basically
the aggregate server.

274
00:22:56,409 --> 00:23:00,610
Randomly collecting updates from three.

275
00:23:00,610 --> 00:23:04,000
And selecting randomly select three clients.

276
00:23:04,000 --> 00:23:08,110
And we are given parameters that actually
updates the module.

277
00:23:08,110 --> 00:23:14,770
So, what we created here is actually the statistics
for the prediction accuracy.

278
00:23:14,770 --> 00:23:20,480
So, if we actually this snapshot is around
the nine or ten.

279
00:23:20,480 --> 00:23:25,160
So, the accuracy you can see on the top is
.98.

280
00:23:25,160 --> 00:23:26,500
It's pretty good, actually.

281
00:23:26,500 --> 00:23:39,770
We actually run we ran the accuracy pretty
much on the .97, .98 mark.

282
00:23:39,770 --> 00:23:44,980
So, this progress is seeing the progress we
have inside.

283
00:23:44,980 --> 00:23:50,150
And actually, we're updating pretty much every
day.

284
00:23:50,150 --> 00:23:55,240
So, if you're interested in this work, in
our further work on this, do follow us.

285
00:23:55,240 --> 00:23:59,400
We actually have another talk in full stack
in London in July.

286
00:23:59,400 --> 00:24:08,620
And my colleague who is an engineer will discuss
this part further then.

287
00:24:08,620 --> 00:24:13,029
So, that's pretty much my talk for today.

288
00:24:13,029 --> 00:24:19,080
Thank you very much.

