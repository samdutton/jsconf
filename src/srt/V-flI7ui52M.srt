1
00:00:01,370 --> 00:00:03,980

all right good morning

2
00:00:03,980 --> 00:00:07,379
so had some snafus with some fonts and

3
00:00:07,379 --> 00:00:10,050
some notes so bear with me a little bit

4
00:00:10,050 --> 00:00:14,040
but thank you for coming this early so

5
00:00:14,040 --> 00:00:16,590
as you can probably tell from the title

6
00:00:16,590 --> 00:00:20,010
of my talk it's based on some pretty

7
00:00:20,010 --> 00:00:21,720
painful personal experience

8
00:00:21,720 --> 00:00:24,420
and I wanted to start today by sharing

9
00:00:24,420 --> 00:00:31,260
that experience with you so in 2015 I

10
00:00:31,260 --> 00:00:33,210
worked at a small Tampa startup as a

11
00:00:33,210 --> 00:00:35,489
senior UI developer on a product team

12
00:00:35,489 --> 00:00:38,309
and my main role was to build scalable

13
00:00:38,309 --> 00:00:41,700
maintainable CSS architectures the team

14
00:00:41,700 --> 00:00:43,140
and I had worked for months on a

15
00:00:43,140 --> 00:00:45,450
proof-of-concept looked a lot like a

16
00:00:45,450 --> 00:00:47,250
real app but it was essentially

17
00:00:47,250 --> 00:00:50,700
vaporware we done well there was a lot

18
00:00:50,700 --> 00:00:52,379
of buzz and we'd snagged her first

19
00:00:52,379 --> 00:00:54,449
client so it's time to get down to

20
00:00:54,449 --> 00:00:57,480
business and begin writing production

21
00:00:57,480 --> 00:00:59,489
quality code it was an exciting

22
00:00:59,489 --> 00:01:01,289
opportunity to build an app from scratch

23
00:01:01,289 --> 00:01:03,090
and we decided we were gonna do it and

24
00:01:03,090 --> 00:01:08,060
react it was just one problem

25
00:01:08,060 --> 00:01:10,439
there weren't any best practices for

26
00:01:10,439 --> 00:01:12,960
styling and react at that time and this

27
00:01:12,960 --> 00:01:14,700
was really where the trouble started for

28
00:01:14,700 --> 00:01:17,549
me up until now the team had been happy

29
00:01:17,549 --> 00:01:19,979
to take care of all the styles to have

30
00:01:19,979 --> 00:01:21,810
me take care of all the style.css less

31
00:01:21,810 --> 00:01:23,850
sass they really didn't care as long as

32
00:01:23,850 --> 00:01:26,520
it looked good but this all changed with

33
00:01:26,520 --> 00:01:29,130
react all of a sudden my ten plus years

34
00:01:29,130 --> 00:01:31,890
of experience styling applications meant

35
00:01:31,890 --> 00:01:34,560
absolutely nothing in fact it meant that

36
00:01:34,560 --> 00:01:37,890
I was a dinosaur and this was because in

37
00:01:37,890 --> 00:01:40,860
2014 an engineer at Facebook gave a talk

38
00:01:40,860 --> 00:01:43,740
that changed everything his talk made

39
00:01:43,740 --> 00:01:46,490
the case for putting CSS in your Jas and

40
00:01:46,490 --> 00:01:49,920
this really represented a shift from

41
00:01:49,920 --> 00:01:52,079
traditional MVC architectures to a more

42
00:01:52,079 --> 00:01:53,640
component based architecture and that

43
00:01:53,640 --> 00:01:56,369
shift changed the way we viewed styling

44
00:01:56,369 --> 00:01:57,990
in relationship to the rest of the

45
00:01:57,990 --> 00:02:02,490
codebase so the next few months honestly

46
00:02:02,490 --> 00:02:03,799
were some of the worst of my career

47
00:02:03,799 --> 00:02:06,990
every presentation every conversation

48
00:02:06,990 --> 00:02:09,720
became a confrontation every

49
00:02:09,720 --> 00:02:11,400
conversation became a confrontation and

50
00:02:11,400 --> 00:02:13,560
it was meant to shame and bully once

51
00:02:13,560 --> 00:02:15,569
the other into seeing the error of their

52
00:02:15,569 --> 00:02:18,750
ways and by the end of it all none of us

53
00:02:18,750 --> 00:02:21,180
were friends anymore so if this sounds

54
00:02:21,180 --> 00:02:25,500
crazy it was and if it sounds familiar

55
00:02:25,500 --> 00:02:31,680
really sorry but it didn't have to end

56
00:02:31,680 --> 00:02:32,130
this way

57
00:02:32,130 --> 00:02:34,920
the team imploded not because of bad

58
00:02:34,920 --> 00:02:37,620
technology choices in reality most of

59
00:02:37,620 --> 00:02:39,150
the styling choices we tried would have

60
00:02:39,150 --> 00:02:41,250
worked if we just stuck with it the

61
00:02:41,250 --> 00:02:43,739
problem was us and the way we approached

62
00:02:43,739 --> 00:02:44,519
the problem

63
00:02:44,519 --> 00:02:46,560
we'd made things far more complicated

64
00:02:46,560 --> 00:02:49,739
and personal than they needed to be if

65
00:02:49,739 --> 00:02:51,180
we've been asking the right questions

66
00:02:51,180 --> 00:02:54,030
and really listening to each other we

67
00:02:54,030 --> 00:03:00,209
could have avoided the whole mess that

68
00:03:00,209 --> 00:03:01,170
was two years ago

69
00:03:01,170 --> 00:03:05,519
a lot has changed but the debate really

70
00:03:05,519 --> 00:03:09,360
hasn't and this is a local recent Google

71
00:03:09,360 --> 00:03:12,930
search I did just for CSS so I see the

72
00:03:12,930 --> 00:03:14,760
same arguments being made today that we

73
00:03:14,760 --> 00:03:17,640
were having two years ago so I want to

74
00:03:17,640 --> 00:03:19,380
talk about that today and take a look at

75
00:03:19,380 --> 00:03:21,060
both sides of that argument and then

76
00:03:21,060 --> 00:03:22,470
look at the pros and cons of each way

77
00:03:22,470 --> 00:03:29,069
that you really can style and react so

78
00:03:29,069 --> 00:03:31,739
to look at both sides of debate starting

79
00:03:31,739 --> 00:03:34,890
with the gripes against CSS we all know

80
00:03:34,890 --> 00:03:38,400
CSS is broken right CSS uses global

81
00:03:38,400 --> 00:03:40,380
scope by default that is a no-no in

82
00:03:40,380 --> 00:03:41,730
JavaScript why are we doing it in

83
00:03:41,730 --> 00:03:45,569
styles.css dependencies and inheritance

84
00:03:45,569 --> 00:03:47,340
make style collision and overriding just

85
00:03:47,340 --> 00:03:51,000
inevitable you're looking at separation

86
00:03:51,000 --> 00:03:53,250
of concerns all wrong on the CSS side

87
00:03:53,250 --> 00:03:56,280
right we look at CSS separation of

88
00:03:56,280 --> 00:03:58,049
concerns as a separation of technologies

89
00:03:58,049 --> 00:04:01,200
and in CSS and j/s it's really a

90
00:04:01,200 --> 00:04:05,250
separation of components and what each

91
00:04:05,250 --> 00:04:08,459
piece is doing and then the Cascade of

92
00:04:08,459 --> 00:04:10,889
course causes thousands of lines of dead

93
00:04:10,889 --> 00:04:13,109
code and doesn't work with CSS at scale

94
00:04:13,109 --> 00:04:17,850
so you have this dead code problem but

95
00:04:17,850 --> 00:04:19,829
there are equally strong gripes against

96
00:04:19,829 --> 00:04:23,370
CSS and Jas CSS isn't broken you just

97
00:04:23,370 --> 00:04:25,590
don't know how to use it using

98
00:04:25,590 --> 00:04:27,230
JavaScript to create CSS

99
00:04:27,230 --> 00:04:29,090
is excessive and unnecessary why are we

100
00:04:29,090 --> 00:04:31,310
reinventing the wheel CSS works just

101
00:04:31,310 --> 00:04:35,210
fine on its own CSS should be separate

102
00:04:35,210 --> 00:04:38,630
from your market markup the Cascade is

103
00:04:38,630 --> 00:04:40,910
your friend if you know how to use it

104
00:04:40,910 --> 00:04:49,520
and of course Oh apologies there the

105
00:04:49,520 --> 00:04:50,870
Cascade is your friend if you know how

106
00:04:50,870 --> 00:04:53,990
to use it and of course inline styles

107
00:04:53,990 --> 00:04:57,140
are a hack so both sides CSS and Jas and

108
00:04:57,140 --> 00:04:59,150
the CSS side have some pretty serious

109
00:04:59,150 --> 00:05:01,070
concerns about what the other side is

110
00:05:01,070 --> 00:05:06,410
doing so now that we've heard the two

111
00:05:06,410 --> 00:05:08,510
sides let's look at the options you can

112
00:05:08,510 --> 00:05:10,040
break down styling into four basic

113
00:05:10,040 --> 00:05:12,470
categories each one with its own sets of

114
00:05:12,470 --> 00:05:16,760
pros and cons I'm going to start with

115
00:05:16,760 --> 00:05:18,200
the basics

116
00:05:18,200 --> 00:05:20,360
standardization methods otherwise known

117
00:05:20,360 --> 00:05:25,250
as naming things intelligently there are

118
00:05:25,250 --> 00:05:28,520
a lot of methods out there common thread

119
00:05:28,520 --> 00:05:31,400
among all of them is to eliminate style

120
00:05:31,400 --> 00:05:33,500
collision by lowering specificity and

121
00:05:33,500 --> 00:05:35,420
encouraging modularity so

122
00:05:35,420 --> 00:05:37,190
standardization methods work with CSS

123
00:05:37,190 --> 00:05:38,480
sass blast

124
00:05:38,480 --> 00:05:44,030
you name it and in 2015 Ben was a

125
00:05:44,030 --> 00:05:46,460
standardization the CSS camp on the team

126
00:05:46,460 --> 00:05:48,350
is rooting for and BEM stands for block

127
00:05:48,350 --> 00:05:51,050
element modifier rules are really really

128
00:05:51,050 --> 00:05:51,380
simple

129
00:05:51,380 --> 00:05:54,550
everything has a class everything

130
00:05:54,550 --> 00:05:57,050
elements should never be directly styled

131
00:05:57,050 --> 00:06:00,290
no nesting of styles and choose clear

132
00:06:00,290 --> 00:06:02,090
naming conventions and of course you

133
00:06:02,090 --> 00:06:08,600
must follow the syntax religiously so in

134
00:06:08,600 --> 00:06:10,360
this example I have my friend component

135
00:06:10,360 --> 00:06:12,650
friend is a block it's a standalone

136
00:06:12,650 --> 00:06:14,270
entity that has its own meaning and

137
00:06:14,270 --> 00:06:17,240
identity any Dom node in my friend block

138
00:06:17,240 --> 00:06:19,400
is an element of that block they are

139
00:06:19,400 --> 00:06:21,410
semantically tied to that block and have

140
00:06:21,410 --> 00:06:23,030
no meaning on their own so you would

141
00:06:23,030 --> 00:06:24,710
never use friend image or friend name or

142
00:06:24,710 --> 00:06:26,210
friend description anywhere else in your

143
00:06:26,210 --> 00:06:27,470
codebase it should always live with

144
00:06:27,470 --> 00:06:33,530
inside that friend block

145
00:06:33,540 --> 00:06:35,790
and modifier is just an extra class name

146
00:06:35,790 --> 00:06:37,740
that can be added to blocks and elements

147
00:06:37,740 --> 00:06:39,500
to change its appearance or behavior

148
00:06:39,500 --> 00:06:41,730
modifiers should only modify the block

149
00:06:41,730 --> 00:06:47,340
never replace it in terms of component

150
00:06:47,340 --> 00:06:48,140
structure

151
00:06:48,140 --> 00:06:50,370
here's a simple component folder

152
00:06:50,370 --> 00:06:52,110
structure to start with and I'm lino

153
00:06:52,110 --> 00:06:53,700
means telling you this is the way to do

154
00:06:53,700 --> 00:06:55,770
it this is just one way that you can do

155
00:06:55,770 --> 00:06:58,080
it I think component folder structure

156
00:06:58,080 --> 00:06:59,340
and structure in general is very

157
00:06:59,340 --> 00:07:03,540
personalized from project to project but

158
00:07:03,540 --> 00:07:06,750
here we've got the simple structure each

159
00:07:06,750 --> 00:07:08,340
component should do one thing and do it

160
00:07:08,340 --> 00:07:10,260
well and notice that each folder

161
00:07:10,260 --> 00:07:13,560
contains the JSC SS and test files in

162
00:07:13,560 --> 00:07:15,990
this example components have been broken

163
00:07:15,990 --> 00:07:17,790
out into two categories we've got our

164
00:07:17,790 --> 00:07:19,830
container components and just our

165
00:07:19,830 --> 00:07:21,950
components the components folder

166
00:07:21,950 --> 00:07:24,540
represents our presentational components

167
00:07:24,540 --> 00:07:26,490
they're simply their state lists and

168
00:07:26,490 --> 00:07:29,640
they simply take props the container

169
00:07:29,640 --> 00:07:32,490
components are stateful they make API

170
00:07:32,490 --> 00:07:36,090
calls etc etc there's a lot of benefits

171
00:07:36,090 --> 00:07:39,720
to this approach you get better but

172
00:07:39,720 --> 00:07:41,190
different type of separation of concerns

173
00:07:41,190 --> 00:07:43,440
and you get reusability and other

174
00:07:43,440 --> 00:07:44,670
projects if that's something you're

175
00:07:44,670 --> 00:07:47,520
concerned with the presentational

176
00:07:47,520 --> 00:07:49,530
components also can be worked on by the

177
00:07:49,530 --> 00:07:51,480
design team without concern that it's

178
00:07:51,480 --> 00:07:56,820
going to affect the apps logic so

179
00:07:56,820 --> 00:07:58,130
there's a lot of pros to them and

180
00:07:58,130 --> 00:08:00,620
standardization methods in general I

181
00:08:00,620 --> 00:08:03,780
think they're a natural fit for building

182
00:08:03,780 --> 00:08:10,100
components

183
00:08:10,110 --> 00:08:14,740
there's no configuration compiler etc so

184
00:08:14,740 --> 00:08:17,289
we're using just straight CSS nothing to

185
00:08:17,289 --> 00:08:19,449
configure nothing to setup and put

186
00:08:19,449 --> 00:08:26,680
together using BEM and presentational

187
00:08:26,680 --> 00:08:28,240
components each component can be used

188
00:08:28,240 --> 00:08:30,569
over and over again in other projects

189
00:08:30,569 --> 00:08:34,500
and single class names make collisions

190
00:08:34,500 --> 00:08:37,060
impossible and easier to rework as long

191
00:08:37,060 --> 00:08:40,440
as everyone's following that syntax

192
00:08:40,440 --> 00:08:43,300
rendering engines evaluate CSS selectors

193
00:08:43,300 --> 00:08:44,980
right to left so the less there is to

194
00:08:44,980 --> 00:08:48,290
evaluate the faster it's going to render

195
00:08:48,300 --> 00:08:50,560
and I think that BEM structure lends

196
00:08:50,560 --> 00:08:52,600
itself perfectly to linting so you can

197
00:08:52,600 --> 00:08:54,550
make sure that every style that is added

198
00:08:54,550 --> 00:09:00,310
conforms to the same standards but there

199
00:09:00,310 --> 00:09:04,480
are some cons let's face it naming

200
00:09:04,480 --> 00:09:06,220
things is really hard it's probably one

201
00:09:06,220 --> 00:09:07,720
of the hardest things that we do it

202
00:09:07,720 --> 00:09:09,370
sounds crazy to anyone that doesn't do

203
00:09:09,370 --> 00:09:11,019
this for a living but I think most of my

204
00:09:11,019 --> 00:09:13,779
time building CSS architectures has been

205
00:09:13,779 --> 00:09:15,250
figuring out what to name something so

206
00:09:15,250 --> 00:09:16,810
someone else knows what I'm talking

207
00:09:16,810 --> 00:09:19,069
about

208
00:09:19,079 --> 00:09:22,690
the rigid structure of them is what

209
00:09:22,690 --> 00:09:24,820
makes it work but it's also I think what

210
00:09:24,820 --> 00:09:26,500
makes it difficult to write at first it

211
00:09:26,500 --> 00:09:28,480
feels really weird it it doesn't feel

212
00:09:28,480 --> 00:09:30,250
natural and when something doesn't feel

213
00:09:30,250 --> 00:09:32,170
natural it takes longer so it can be

214
00:09:32,170 --> 00:09:33,699
really frustrating to do something that

215
00:09:33,699 --> 00:09:35,380
you think you could do a lot faster

216
00:09:35,380 --> 00:09:37,180
another way but you're being forced into

217
00:09:37,180 --> 00:09:38,920
this syntax and into this this

218
00:09:38,920 --> 00:09:41,410
particular method so you got to get team

219
00:09:41,410 --> 00:09:45,420
buy-in in order for this system to work

220
00:09:45,420 --> 00:09:48,730
and losing the benefit of the Cascade

221
00:09:48,730 --> 00:09:50,740
can be seen as a pro or con depending on

222
00:09:50,740 --> 00:09:52,420
which side of the debate you fall on the

223
00:09:52,420 --> 00:09:54,519
Cascade can keep things dry when used

224
00:09:54,519 --> 00:09:56,500
correctly or can result in a bloated

225
00:09:56,500 --> 00:09:57,399
codebase

226
00:09:57,399 --> 00:09:59,529
when Styles are repeatedly overridden

227
00:09:59,529 --> 00:10:06,399
and hacked it's possible to use them for

228
00:10:06,399 --> 00:10:08,350
theming but I would say that there are

229
00:10:08,350 --> 00:10:10,240
far better methods out there if theming

230
00:10:10,240 --> 00:10:11,620
is something that's important to you in

231
00:10:11,620 --> 00:10:16,660
and the work that you're doing and it

232
00:10:16,660 --> 00:10:19,390
may not be a serious Condor scores and

233
00:10:19,390 --> 00:10:20,860
the dashes when you first work them it

234
00:10:20,860 --> 00:10:23,050
feels really really ugly

235
00:10:23,050 --> 00:10:24,400
and again I think it goes back to

236
00:10:24,400 --> 00:10:26,920
writing something that's that's

237
00:10:26,920 --> 00:10:29,080
difficult or doesn't come naturally can

238
00:10:29,080 --> 00:10:36,190
make things a lot slower so next I want

239
00:10:36,190 --> 00:10:38,680
to look at preprocessors we're turning

240
00:10:38,680 --> 00:10:44,140
this into that so CSS preprocessor takes

241
00:10:44,140 --> 00:10:46,990
a language and outputs it as CSS syntax

242
00:10:46,990 --> 00:10:49,180
is usually more readable than plain CSS

243
00:10:49,180 --> 00:10:51,990
and allows you to write dry code faster

244
00:10:51,990 --> 00:10:54,580
gain a lot of helpful features like

245
00:10:54,580 --> 00:10:58,210
variables operations mix-ins you name it

246
00:10:58,210 --> 00:11:02,500
I think sass is probably one of the most

247
00:11:02,500 --> 00:11:04,690
well-known extension languages and so

248
00:11:04,690 --> 00:11:06,070
that's the one I'm just gonna touch upon

249
00:11:06,070 --> 00:11:11,680
here in this talk so the bad news about

250
00:11:11,680 --> 00:11:14,500
sass or any preprocessor is that you

251
00:11:14,500 --> 00:11:16,780
still need to name things so in this

252
00:11:16,780 --> 00:11:18,760
example I'm continuing to use the BEM

253
00:11:18,760 --> 00:11:20,290
naming convention for our friend

254
00:11:20,290 --> 00:11:21,940
component the friend component will look

255
00:11:21,940 --> 00:11:23,350
exactly the same as in the last example

256
00:11:23,350 --> 00:11:25,960
nothing changes here the component

257
00:11:25,960 --> 00:11:30,700
itself is set the difference here is

258
00:11:30,700 --> 00:11:32,050
that instead of having to write out each

259
00:11:32,050 --> 00:11:34,870
class in its entirety or nesting using

260
00:11:34,870 --> 00:11:38,410
the ampersand to assemble each class we

261
00:11:38,410 --> 00:11:40,120
have variables in here and there's a lot

262
00:11:40,120 --> 00:11:41,560
of ways that I could dry this up even

263
00:11:41,560 --> 00:11:42,570
further

264
00:11:42,570 --> 00:11:45,250
once compiled the CSS output is going to

265
00:11:45,250 --> 00:11:47,020
be exactly the same as in our original

266
00:11:47,020 --> 00:11:51,880
example and again with the folder

267
00:11:51,880 --> 00:11:53,850
structure nothing has really changed

268
00:11:53,850 --> 00:11:56,080
we're still approaching each component

269
00:11:56,080 --> 00:11:57,880
as a whole entity we're no longer

270
00:11:57,880 --> 00:12:01,750
separating HTML CSS and j/s and instead

271
00:12:01,750 --> 00:12:03,940
we're separating based on presentational

272
00:12:03,940 --> 00:12:07,660
components and container components and

273
00:12:07,660 --> 00:12:09,760
in this example I actually have the sass

274
00:12:09,760 --> 00:12:12,250
outputting to an individual CSS file

275
00:12:12,250 --> 00:12:14,710
that lives within the component however

276
00:12:14,710 --> 00:12:17,080
you can do it a number of different ways

277
00:12:17,080 --> 00:12:18,850
you could compile this into one

278
00:12:18,850 --> 00:12:20,170
stylesheet and load that whole

279
00:12:20,170 --> 00:12:25,090
stylesheet instead so pros there's a lot

280
00:12:25,090 --> 00:12:29,350
of pros to pre-processors sass gives you

281
00:12:29,350 --> 00:12:31,030
the power obviously of variables mix-ins

282
00:12:31,030 --> 00:12:32,410
nestings it's got a lot of really

283
00:12:32,410 --> 00:12:33,820
helpful features i think a lot of us

284
00:12:33,820 --> 00:12:35,810
have grown dependent on

285
00:12:35,810 --> 00:12:38,720
and in general you can dry up your code

286
00:12:38,720 --> 00:12:43,339
quite a bit using these features I also

287
00:12:43,339 --> 00:12:45,019
think a lot of them are really easy to

288
00:12:45,019 --> 00:12:47,930
pick up if you already know CSS there's

289
00:12:47,930 --> 00:12:49,459
there's no real overhead to jumping in

290
00:12:49,459 --> 00:12:52,279
and working with sass you can really do

291
00:12:52,279 --> 00:12:56,589
it straightaway without much help and

292
00:12:56,589 --> 00:12:58,430
similar to a first setup each

293
00:12:58,430 --> 00:13:01,670
presentation component is modular each

294
00:13:01,670 --> 00:13:03,499
sass file can be compiled into one sheet

295
00:13:03,499 --> 00:13:05,629
or can be exported into one single CSS

296
00:13:05,629 --> 00:13:07,490
sheet that lives with that component so

297
00:13:07,490 --> 00:13:09,290
it really lends itself to working for

298
00:13:09,290 --> 00:13:10,579
your team and for the project the way

299
00:13:10,579 --> 00:13:17,029
you need it to there are some cons so to

300
00:13:17,029 --> 00:13:18,649
use sass in your project you'll need to

301
00:13:18,649 --> 00:13:20,439
add some configuration in dependencies

302
00:13:20,439 --> 00:13:22,819
it isn't really a big con considering

303
00:13:22,819 --> 00:13:24,920
what we already do with web pack and

304
00:13:24,920 --> 00:13:26,540
other things in react but it's something

305
00:13:26,540 --> 00:13:31,530
to keep in mind it's just one more layer

306
00:13:31,540 --> 00:13:34,309
nesting can can get out of control very

307
00:13:34,309 --> 00:13:34,939
very quickly

308
00:13:34,939 --> 00:13:37,910
I've seen some some devs new to sass

309
00:13:37,910 --> 00:13:39,740
nests themselves I mean like straight to

310
00:13:39,740 --> 00:13:42,379
hell there's look they're like 10 deep

311
00:13:42,379 --> 00:13:44,059
and they can't figure out how that

312
00:13:44,059 --> 00:13:46,550
possibly happened so you've got to be

313
00:13:46,550 --> 00:13:49,000
really careful with sass and nesting

314
00:13:49,000 --> 00:13:52,309
having said that I would argue that the

315
00:13:52,309 --> 00:13:55,009
the component composition of reactant

316
00:13:55,009 --> 00:13:56,750
general reduces the need for mix-ins and

317
00:13:56,750 --> 00:13:58,129
nesting you shouldn't be building these

318
00:13:58,129 --> 00:13:59,870
really big components that do a lot of

319
00:13:59,870 --> 00:14:01,550
things they should be very very small

320
00:14:01,550 --> 00:14:02,899
they should be very very concentrated

321
00:14:02,899 --> 00:14:05,000
and the amount of styling you need

322
00:14:05,000 --> 00:14:08,269
should be relatively small so you may

323
00:14:08,269 --> 00:14:12,920
not even need those things and you have

324
00:14:12,920 --> 00:14:16,100
to name a lot of things right we just

325
00:14:16,100 --> 00:14:18,019
don't want to do this it seems to be a

326
00:14:18,019 --> 00:14:25,189
really popular refrain so now I want to

327
00:14:25,189 --> 00:14:27,980
talk about inline styles and inline

328
00:14:27,980 --> 00:14:29,809
styles are not the same as CSS and Jas

329
00:14:29,809 --> 00:14:30,800
and I'm gonna get to that in a minute

330
00:14:30,800 --> 00:14:33,319
and the first two methods that we just

331
00:14:33,319 --> 00:14:35,179
talked about have been standard for

332
00:14:35,179 --> 00:14:38,240
quite a long time adding CSS Styles

333
00:14:38,240 --> 00:14:41,809
inline goes back even further but in

334
00:14:41,809 --> 00:14:44,540
2015 the idea of using them to style

335
00:14:44,540 --> 00:14:47,209
your entire application seemed kind of

336
00:14:47,209 --> 00:14:50,320
crazy

337
00:14:50,330 --> 00:14:52,290
so just like it sounds

338
00:14:52,290 --> 00:14:54,330
inline Styles attach your styles in line

339
00:14:54,330 --> 00:14:57,210
to the actual Dom node and again they're

340
00:14:57,210 --> 00:14:59,280
not the same thing as CSS and JSI I will

341
00:14:59,280 --> 00:15:02,400
get to that but this is a same frame

342
00:15:02,400 --> 00:15:04,620
component it's a simple example of

343
00:15:04,620 --> 00:15:07,380
inline Styles and this was the first

344
00:15:07,380 --> 00:15:09,960
example that the CSS and J's folks on

345
00:15:09,960 --> 00:15:12,710
the team brought to us in 2015 and I

346
00:15:12,710 --> 00:15:16,080
gotta say we were horrified when we saw

347
00:15:16,080 --> 00:15:20,310
this and to be fair this is not how most

348
00:15:20,310 --> 00:15:24,780
people are using inline Styles most are

349
00:15:24,780 --> 00:15:26,640
using style objects it's much more

350
00:15:26,640 --> 00:15:28,830
maintainable than the first example it's

351
00:15:28,830 --> 00:15:30,090
also the way react native handles

352
00:15:30,090 --> 00:15:32,970
styling most will take it one step

353
00:15:32,970 --> 00:15:35,160
further and place the style objects in a

354
00:15:35,160 --> 00:15:36,810
separate document and then import that

355
00:15:36,810 --> 00:15:40,040
into the component sounds familiar

356
00:15:40,040 --> 00:15:48,030
should so at the time the thought for

357
00:15:48,030 --> 00:15:51,390
many of us was seriously you want us to

358
00:15:51,390 --> 00:15:53,570
style an entire application like this

359
00:15:53,570 --> 00:15:56,310
the very thought of styling an entire

360
00:15:56,310 --> 00:15:58,980
app by injecting Styles seemed laughable

361
00:15:58,980 --> 00:16:02,010
at the time because a big argument right

362
00:16:02,010 --> 00:16:05,040
had been working with CSS at scale and

363
00:16:05,040 --> 00:16:06,870
from the perspective of the CSS folks

364
00:16:06,870 --> 00:16:10,200
this was not scalable the font size

365
00:16:10,200 --> 00:16:12,480
color palette of the application had

366
00:16:12,480 --> 00:16:14,400
changed several times in just a few

367
00:16:14,400 --> 00:16:15,570
months that we were working on the proof

368
00:16:15,570 --> 00:16:17,940
of concept how are we ever gonna manage

369
00:16:17,940 --> 00:16:19,500
monumental style changes like that with

370
00:16:19,500 --> 00:16:22,050
inline Styles surely there was an

371
00:16:22,050 --> 00:16:24,839
obvious need for global Styles to handle

372
00:16:24,839 --> 00:16:26,640
things like font sizing vertical rhythm

373
00:16:26,640 --> 00:16:31,680
and color palette even more distressing

374
00:16:31,680 --> 00:16:33,240
at the time was learning what it

375
00:16:33,240 --> 00:16:35,280
couldn't do the main difference between

376
00:16:35,280 --> 00:16:38,580
inline Styles and CSS and Jas so inline

377
00:16:38,580 --> 00:16:41,520
Styles only supports a subset of CSS CSS

378
00:16:41,520 --> 00:16:43,500
and j/s on the other hand allows you to

379
00:16:43,500 --> 00:16:45,630
use all the power of CSS because it

380
00:16:45,630 --> 00:16:48,089
generates actual CSS and we're gonna get

381
00:16:48,089 --> 00:16:49,589
to those in a minute I know I keep

382
00:16:49,589 --> 00:16:54,340
saying that but we're almost there so

383
00:16:54,350 --> 00:16:57,060
while in stein law in blind styles are

384
00:16:57,060 --> 00:16:58,620
lacking quite a bit I think there are

385
00:16:58,620 --> 00:17:01,980
some positives to them inline Styles

386
00:17:01,980 --> 00:17:02,630
really forces

387
00:17:02,630 --> 00:17:05,240
you to change your mental model and see

388
00:17:05,240 --> 00:17:07,640
each component as its own entity and

389
00:17:07,640 --> 00:17:08,690
this was something that it really did

390
00:17:08,690 --> 00:17:11,660
for me I will admit that I was not

391
00:17:11,660 --> 00:17:14,510
against the idea of CSS and Jas but it

392
00:17:14,510 --> 00:17:16,400
did go against everything that I had

393
00:17:16,400 --> 00:17:17,839
learned my years and years of best

394
00:17:17,839 --> 00:17:20,770
practice and it really put my hackles up

395
00:17:20,770 --> 00:17:23,060
but sitting down and writing a component

396
00:17:23,060 --> 00:17:25,220
and using inline Styles really changed

397
00:17:25,220 --> 00:17:27,530
my view on that I was able to see the

398
00:17:27,530 --> 00:17:30,260
component as its own concern and see the

399
00:17:30,260 --> 00:17:32,720
value in being able to localize those

400
00:17:32,720 --> 00:17:38,870
Styles and obviously inline styles are

401
00:17:38,870 --> 00:17:41,000
of the trump card and specificity right

402
00:17:41,000 --> 00:17:42,320
there's no way someone's gonna

403
00:17:42,320 --> 00:17:44,060
accidentally override them or leave

404
00:17:44,060 --> 00:17:49,190
unused Styles hanging around and if you

405
00:17:49,190 --> 00:17:51,110
intend to stick with react long-term to

406
00:17:51,110 --> 00:17:52,670
go react native your styles are still

407
00:17:52,670 --> 00:17:54,050
gonna work it's gonna be much easier to

408
00:17:54,050 --> 00:17:58,850
move those over so the cons list is a

409
00:17:58,850 --> 00:18:03,710
bit longer so you need to depend on a

410
00:18:03,710 --> 00:18:06,470
library to access basic CSS features and

411
00:18:06,470 --> 00:18:07,790
this was one of the big arguments from

412
00:18:07,790 --> 00:18:09,830
the CSS side at the time was we're just

413
00:18:09,830 --> 00:18:11,450
adding all these things that CSS does

414
00:18:11,450 --> 00:18:14,590
does naturally why why would we do this

415
00:18:14,590 --> 00:18:17,840
and if you're not losing using a library

416
00:18:17,840 --> 00:18:19,820
it's necessary to program jeaious

417
00:18:19,820 --> 00:18:21,740
workarounds to address media queries

418
00:18:21,740 --> 00:18:23,480
pseudo selectors all of the things that

419
00:18:23,480 --> 00:18:28,580
CSS gives you just out of the box and

420
00:18:28,580 --> 00:18:29,930
then again depending on which side of

421
00:18:29,930 --> 00:18:31,670
the debate you're on you lose the

422
00:18:31,670 --> 00:18:33,620
Cascade so you're not able to make

423
00:18:33,620 --> 00:18:35,420
global style changes using the Cascade

424
00:18:35,420 --> 00:18:37,310
every component would need to be touched

425
00:18:37,310 --> 00:18:41,090
if the changes were going to be to go

426
00:18:41,090 --> 00:18:46,700
across all the components and I got to

427
00:18:46,700 --> 00:18:48,200
say it was really difficult to debug in

428
00:18:48,200 --> 00:18:51,260
the Dom I did most of my work in the

429
00:18:51,260 --> 00:18:53,570
inspector and when you're not using

430
00:18:53,570 --> 00:18:56,810
mapping class names to the elements it's

431
00:18:56,810 --> 00:18:57,890
really difficult to tell what you're

432
00:18:57,890 --> 00:18:59,150
looking at even when you know what

433
00:18:59,150 --> 00:19:00,650
you're looking at it's difficult to tell

434
00:19:00,650 --> 00:19:01,670
what you're looking at because the

435
00:19:01,670 --> 00:19:03,260
styles are jammed in with the rest of

436
00:19:03,260 --> 00:19:07,950
your your elements

437
00:19:07,960 --> 00:19:10,539
and interestingly enough the components

438
00:19:10,539 --> 00:19:11,860
themselves don't really lend themselves

439
00:19:11,860 --> 00:19:15,610
to outside use and other code bases

440
00:19:15,610 --> 00:19:17,320
because you're placing these Styles

441
00:19:17,320 --> 00:19:19,269
directly in line you'd have to go in and

442
00:19:19,269 --> 00:19:21,190
reconfigure basically every single one

443
00:19:21,190 --> 00:19:23,320
by hand in order to use it somewhere

444
00:19:23,320 --> 00:19:27,700
else and another interesting thing that

445
00:19:27,700 --> 00:19:29,830
we found was that performance was not

446
00:19:29,830 --> 00:19:32,169
very good not page full of inline Styles

447
00:19:32,169 --> 00:19:33,999
where each tag needs to be parsed is

448
00:19:33,999 --> 00:19:36,039
gonna be less performant than loading a

449
00:19:36,039 --> 00:19:42,879
single stylesheet so CSS and j/s is

450
00:19:42,879 --> 00:19:45,909
pretty hot right now but in 2015 it was

451
00:19:45,909 --> 00:19:51,639
on fire and in 2015 there weren't a lot

452
00:19:51,639 --> 00:19:53,740
of CSS and J's libraries aside from

453
00:19:53,740 --> 00:19:55,869
radium CSS modules and I think at the

454
00:19:55,869 --> 00:19:57,039
time that we were developing like

455
00:19:57,039 --> 00:20:00,249
aphrodite had just come out many of the

456
00:20:00,249 --> 00:20:02,799
cons that were plaguing inline j:s could

457
00:20:02,799 --> 00:20:04,720
also be applied to libraries available

458
00:20:04,720 --> 00:20:05,169
at that time

459
00:20:05,169 --> 00:20:16,040
I think it's evolved quite a bit

460
00:20:16,050 --> 00:20:18,760
so style components weren't around in

461
00:20:18,760 --> 00:20:21,220
2015 but I think that they represent a

462
00:20:21,220 --> 00:20:23,710
giant leap forward in CSS and J's

463
00:20:23,710 --> 00:20:25,030
library so I'm going to talk about that

464
00:20:25,030 --> 00:20:31,990
today so here we have our same friend

465
00:20:31,990 --> 00:20:33,880
component should be very familiar with

466
00:20:33,880 --> 00:20:36,730
this component by now but there's a big

467
00:20:36,730 --> 00:20:37,870
difference in the way we're putting this

468
00:20:37,870 --> 00:20:41,170
together so style components actually

469
00:20:41,170 --> 00:20:43,090
utilize this tag tagged template

470
00:20:43,090 --> 00:20:46,180
literals to use real CSS and create

471
00:20:46,180 --> 00:20:48,610
normal react components so as you can

472
00:20:48,610 --> 00:20:51,610
see we're importing styled from style

473
00:20:51,610 --> 00:20:53,290
components so we're using that we're

474
00:20:53,290 --> 00:20:55,000
importing that library and then we're

475
00:20:55,000 --> 00:20:59,320
able to construct a wrapper component

476
00:20:59,320 --> 00:21:03,280
that applies the styles to a section tag

477
00:21:03,280 --> 00:21:05,410
so wrapper equals style dot section in

478
00:21:05,410 --> 00:21:06,820
the Dom that's actually going to

479
00:21:06,820 --> 00:21:08,800
generate a section tag with a mapped

480
00:21:08,800 --> 00:21:12,310
class name that maps to those Styles so

481
00:21:12,310 --> 00:21:15,190
it's a big difference in the way that

482
00:21:15,190 --> 00:21:17,170
you handle inline Styles it is not

483
00:21:17,170 --> 00:21:19,240
inline it's actually generating a CSS

484
00:21:19,240 --> 00:21:23,500
style sheet so at runtime it's actually

485
00:21:23,500 --> 00:21:25,180
loading that into the head section of

486
00:21:25,180 --> 00:21:27,700
your document and then applying the

487
00:21:27,700 --> 00:21:34,960
class name to the Styles so I would say

488
00:21:34,960 --> 00:21:36,220
that how you structure your component

489
00:21:36,220 --> 00:21:37,510
folder is going to be a team decision

490
00:21:37,510 --> 00:21:40,060
and in most cases should be decided

491
00:21:40,060 --> 00:21:43,720
before you ever touch the Styles in this

492
00:21:43,720 --> 00:21:45,310
example I've actually broken that

493
00:21:45,310 --> 00:21:51,880
component down even further here the way

494
00:21:51,880 --> 00:21:53,410
we've broken it down is we've

495
00:21:53,410 --> 00:21:55,870
constructed each piece and then I'm just

496
00:21:55,870 --> 00:21:58,000
building in my render each piece of that

497
00:21:58,000 --> 00:22:02,410
component here I've actually broken out

498
00:22:02,410 --> 00:22:04,450
each one is its own separate entity and

499
00:22:04,450 --> 00:22:06,580
I'm bringing them in to my index file

500
00:22:06,580 --> 00:22:08,860
and that way I can use these over and

501
00:22:08,860 --> 00:22:10,330
over again and other components and

502
00:22:10,330 --> 00:22:13,210
other areas and build like a bunch of

503
00:22:13,210 --> 00:22:16,570
Lego blocks really so this allows more

504
00:22:16,570 --> 00:22:19,630
flexibility and scalability long-term as

505
00:22:19,630 --> 00:22:21,130
you can easily move those smaller pieces

506
00:22:21,130 --> 00:22:27,419
around to construct larger components

507
00:22:27,429 --> 00:22:29,659
so I think style components have a lot

508
00:22:29,659 --> 00:22:31,999
going for them and CSS and Jas libraries

509
00:22:31,999 --> 00:22:35,149
in general do they allow you to write

510
00:22:35,149 --> 00:22:37,099
real CSS without contact shifting

511
00:22:37,099 --> 00:22:39,289
between JavaScript and a set of style

512
00:22:39,289 --> 00:22:42,139
sheets and it also enforces CSS based

513
00:22:42,139 --> 00:22:44,479
best practices by removing that mapping

514
00:22:44,479 --> 00:22:49,849
between the HTML and the CSS because

515
00:22:49,849 --> 00:22:51,979
you're building small purely

516
00:22:51,979 --> 00:22:53,779
presentational components they're

517
00:22:53,779 --> 00:22:58,849
independent and reusable and single use

518
00:22:58,849 --> 00:23:02,419
class names make there we go

519
00:23:02,419 --> 00:23:04,459
single use class names make naming

520
00:23:04,459 --> 00:23:06,199
easier with no chance of collision and

521
00:23:06,199 --> 00:23:08,089
of course you have your containers and

522
00:23:08,089 --> 00:23:10,039
components so your separate separating

523
00:23:10,039 --> 00:23:16,079
out your presentational from your logic

524
00:23:16,089 --> 00:23:18,949
style components actually has basic sass

525
00:23:18,949 --> 00:23:20,119
support so you can do things with

526
00:23:20,119 --> 00:23:22,969
variables nesting mix-ins there's a lot

527
00:23:22,969 --> 00:23:26,659
of really cool features there it even

528
00:23:26,659 --> 00:23:30,459
has a native native mobile support and

529
00:23:30,459 --> 00:23:39,459
steam support so there are some cons

530
00:23:39,459 --> 00:23:42,619
choosing CSS and jus as an approach

531
00:23:42,619 --> 00:23:44,689
means choosing a framework so it's one

532
00:23:44,689 --> 00:23:47,019
choice followed by another choice

533
00:23:47,019 --> 00:23:50,929
glamour style components aphrodite CSS

534
00:23:50,929 --> 00:23:52,909
modules there are many flavors of CSS

535
00:23:52,909 --> 00:23:55,159
and j/s out there and at the end of this

536
00:23:55,159 --> 00:23:56,539
deck I actually have a resource that

537
00:23:56,539 --> 00:23:59,089
takes you to an entire list of all the

538
00:23:59,089 --> 00:24:02,439
possible CSS and J's choices you have

539
00:24:02,439 --> 00:24:05,809
and it's yet another library to use

540
00:24:05,809 --> 00:24:07,399
which i think is something to keep in

541
00:24:07,399 --> 00:24:09,279
mind because things change so quickly

542
00:24:09,279 --> 00:24:11,899
relying on a library that's the hot new

543
00:24:11,899 --> 00:24:15,729
thing today might be a problem later on

544
00:24:15,729 --> 00:24:17,839
so and it's also something that needs to

545
00:24:17,839 --> 00:24:23,390
be understood by the entire team

546
00:24:23,400 --> 00:24:25,770
and I think a solid case could be made

547
00:24:25,770 --> 00:24:28,830
for the complexity this introduces many

548
00:24:28,830 --> 00:24:31,230
teams have designers and implementing

549
00:24:31,230 --> 00:24:33,780
styles and design patterns and CSS so

550
00:24:33,780 --> 00:24:35,430
while a developer might be able to jump

551
00:24:35,430 --> 00:24:36,450
right in and feel very comfortable

552
00:24:36,450 --> 00:24:38,730
because this utilizes so much of what's

553
00:24:38,730 --> 00:24:40,980
already there in JavaScript it could be

554
00:24:40,980 --> 00:24:49,680
difficult for others on the team so the

555
00:24:49,680 --> 00:24:53,640
question is what should I use it depends

556
00:24:53,640 --> 00:24:56,190
I know you were looking for one answer

557
00:24:56,190 --> 00:24:58,920
today but there really is no one answer

558
00:24:58,920 --> 00:25:01,110
I think it really does depend there are

559
00:25:01,110 --> 00:25:04,559
a lot of choices out there I think you

560
00:25:04,559 --> 00:25:05,790
need to start by asking the right

561
00:25:05,790 --> 00:25:10,980
questions so what are the mental models

562
00:25:10,980 --> 00:25:14,070
on the team a mental model is based on

563
00:25:14,070 --> 00:25:15,270
belief not facts

564
00:25:15,270 --> 00:25:18,330
it's a model of what users think then or

565
00:25:18,330 --> 00:25:20,309
what users know or think they know about

566
00:25:20,309 --> 00:25:23,370
a system and understanding each person's

567
00:25:23,370 --> 00:25:25,290
mental model of styling can help clear

568
00:25:25,290 --> 00:25:26,910
up misunderstandings and foster

569
00:25:26,910 --> 00:25:29,070
productive conversations I think really

570
00:25:29,070 --> 00:25:30,870
having a good idea of how each person

571
00:25:30,870 --> 00:25:34,770
sees styling so that you can speak to

572
00:25:34,770 --> 00:25:37,230
their view on it a little bit better can

573
00:25:37,230 --> 00:25:44,160
help you in those conversations and I

574
00:25:44,160 --> 00:25:45,630
think it's also important to acknowledge

575
00:25:45,630 --> 00:25:47,160
the different skill levels on the team

576
00:25:47,160 --> 00:25:49,320
so if there's a mixture of skill levels

577
00:25:49,320 --> 00:25:51,120
as I said a lot of times you have

578
00:25:51,120 --> 00:25:52,830
designers that are implementing your CSS

579
00:25:52,830 --> 00:25:55,320
and may not be as comfortable in

580
00:25:55,320 --> 00:25:58,620
JavaScript simplicity and clarity can

581
00:25:58,620 --> 00:26:01,160
really help everyone stay together and

582
00:26:01,160 --> 00:26:03,540
if you're a group of highly skilled devs

583
00:26:03,540 --> 00:26:05,670
then I think introducing complexity or

584
00:26:05,670 --> 00:26:07,350
new technologies probably won't pose

585
00:26:07,350 --> 00:26:12,900
that much of a problem and then what do

586
00:26:12,900 --> 00:26:15,570
you need to build make sure you

587
00:26:15,570 --> 00:26:17,220
understand what you actually need to

588
00:26:17,220 --> 00:26:19,500
build there's a lot of pressure in our

589
00:26:19,500 --> 00:26:20,970
industry to know the latest framework

590
00:26:20,970 --> 00:26:22,590
the latest language or whatever tech is

591
00:26:22,590 --> 00:26:24,900
making the rounds today and it can be

592
00:26:24,900 --> 00:26:26,850
really tempting to jump on the latest

593
00:26:26,850 --> 00:26:30,120
technology so before adding libraries

594
00:26:30,120 --> 00:26:31,890
and building complex styling systems to

595
00:26:31,890 --> 00:26:34,590
accommodate theming and reusability make

596
00:26:34,590 --> 00:26:36,870
sure there's something you actually need

597
00:26:36,870 --> 00:26:39,150
startled as simply as possible and build

598
00:26:39,150 --> 00:26:43,950
from there and then how do you plan on

599
00:26:43,950 --> 00:26:46,950
structuring your project react is not

600
00:26:46,950 --> 00:26:49,380
opinionated about project structure so

601
00:26:49,380 --> 00:26:50,970
understanding how you want to structure

602
00:26:50,970 --> 00:26:52,080
your project is going to help you

603
00:26:52,080 --> 00:26:53,910
determine the style method that's going

604
00:26:53,910 --> 00:26:55,169
to work best for you and the rest of

605
00:26:55,169 --> 00:26:57,240
your team will contain our components

606
00:26:57,240 --> 00:26:58,710
live separately from presentational

607
00:26:58,710 --> 00:26:59,820
components are they going to be kept

608
00:26:59,820 --> 00:27:02,490
together will you have the need for

609
00:27:02,490 --> 00:27:04,200
access to global Styles is that

610
00:27:04,200 --> 00:27:06,030
something that you anticipate having to

611
00:27:06,030 --> 00:27:08,370
have and these are just a couple of

612
00:27:08,370 --> 00:27:10,049
considerations so think about these

613
00:27:10,049 --> 00:27:11,700
things before you jump into making that

614
00:27:11,700 --> 00:27:17,250
styling decision even more importantly I

615
00:27:17,250 --> 00:27:20,590
think is to create the right environment

616
00:27:20,600 --> 00:27:23,940
building things successfully requires

617
00:27:23,940 --> 00:27:26,160
more than the right technology it really

618
00:27:26,160 --> 00:27:28,679
does require the right environment and I

619
00:27:28,679 --> 00:27:29,850
think there are four ingredients to

620
00:27:29,850 --> 00:27:30,980
making that happen

621
00:27:30,980 --> 00:27:34,980
first avoid dogma at all costs taking

622
00:27:34,980 --> 00:27:37,169
extreme positions on a subject creates

623
00:27:37,169 --> 00:27:38,730
tension and defensiveness before

624
00:27:38,730 --> 00:27:42,580
conversations even get started

625
00:27:42,590 --> 00:27:46,290
build trust taking risks is really hard

626
00:27:46,290 --> 00:27:48,419
to do and it's even harder if you don't

627
00:27:48,419 --> 00:27:52,780
trust the people you're doing it with I

628
00:27:52,790 --> 00:27:55,410
think you need to embrace change

629
00:27:55,410 --> 00:27:57,900
whenever you feel the urge to push back

630
00:27:57,900 --> 00:28:00,480
on something lean in instead and you'll

631
00:28:00,480 --> 00:28:02,220
be surprised at what you'll learn and

632
00:28:02,220 --> 00:28:03,450
how many friends are gonna make along

633
00:28:03,450 --> 00:28:07,740
the way I think lastly you need to be

634
00:28:07,740 --> 00:28:09,900
vulnerable it's ok to say you don't

635
00:28:09,900 --> 00:28:11,580
understand something or that you don't

636
00:28:11,580 --> 00:28:13,830
see the benefit in it being honest

637
00:28:13,830 --> 00:28:15,570
builds trust and opens the opportunity

638
00:28:15,570 --> 00:28:17,130
up for greater understanding for

639
00:28:17,130 --> 00:28:23,070
everyone on the team and I think it's

640
00:28:23,070 --> 00:28:26,040
also important to to remember I love

641
00:28:26,040 --> 00:28:28,140
this quote having a thoughtful

642
00:28:28,140 --> 00:28:31,169
understanding of CSS to begin with

643
00:28:31,169 --> 00:28:33,030
is going to help you build greater

644
00:28:33,030 --> 00:28:35,070
things so whether you do it using CSS

645
00:28:35,070 --> 00:28:38,790
sass less or CSS and GIS understanding

646
00:28:38,790 --> 00:28:40,500
what you're what you're building and and

647
00:28:40,500 --> 00:28:46,410
how to use it is very important

648
00:28:46,420 --> 00:28:48,430
thank you

