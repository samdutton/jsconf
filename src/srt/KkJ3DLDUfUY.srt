1
00:00:00,020 --> 00:00:03,510

everyone super stoked to be here I am

2
00:00:03,510 --> 00:00:05,220
very happy to be back in the Pacific

3
00:00:05,220 --> 00:00:08,700
Northwest I'm from Vancouver and I've

4
00:00:08,700 --> 00:00:09,960
been in San Francisco and it's been

5
00:00:09,960 --> 00:00:13,170
pretty smoky lately so we're going to

6
00:00:13,170 --> 00:00:15,750
basically write a bunch of code day it

7
00:00:15,750 --> 00:00:17,810
whoops I might just do that in node

8
00:00:17,810 --> 00:00:19,710
anybody know what happens when you do

9
00:00:19,710 --> 00:00:23,519
this it's pretty funny well let's say I

10
00:00:23,519 --> 00:00:26,849
just want to see it's like it's a

11
00:00:26,849 --> 00:00:30,359
terrible type of whoops I wanted to see

12
00:00:30,359 --> 00:00:35,160
if my screens readable it seems to be so

13
00:00:35,160 --> 00:00:38,820
Java scripts not so great at math we're

14
00:00:38,820 --> 00:00:39,930
not gonna talk about that say we're

15
00:00:39,930 --> 00:00:42,090
gonna talk about functions is anyone in

16
00:00:42,090 --> 00:00:45,210
here deploying AWS lambda into

17
00:00:45,210 --> 00:00:48,420
production today okay

18
00:00:48,420 --> 00:00:53,660
quite a few right on so I'm down with

19
00:00:53,660 --> 00:00:55,710
making this little interactive so you

20
00:00:55,710 --> 00:00:58,170
can yell at me what's the number one

21
00:00:58,170 --> 00:01:03,059
problem right now is serverless cold

22
00:01:03,059 --> 00:01:08,340
start cold starts one anything else any

23
00:01:08,340 --> 00:01:11,580
code okay all right those are those are

24
00:01:11,580 --> 00:01:13,320
pretty good I we're gonna touch on both

25
00:01:13,320 --> 00:01:15,990
those I I would postulate the actual

26
00:01:15,990 --> 00:01:17,400
problem with services nobody cares

27
00:01:17,400 --> 00:01:22,080
nobody cares so you can deploy a static

28
00:01:22,080 --> 00:01:24,659
website today to just about you know the

29
00:01:24,659 --> 00:01:26,670
entire Internet in a few seconds it'll

30
00:01:26,670 --> 00:01:28,680
be available to just about anybody in

31
00:01:28,680 --> 00:01:30,810
about 10 milliseconds you just github

32
00:01:30,810 --> 00:01:32,400
pages you could use an epiphyte could

33
00:01:32,400 --> 00:01:38,579
use surge and then the backend you know

34
00:01:38,579 --> 00:01:42,240
nobody cares we we do these things and

35
00:01:42,240 --> 00:01:44,850
and you know there's just there's

36
00:01:44,850 --> 00:01:46,649
there's no real motivation for this and

37
00:01:46,649 --> 00:01:48,210
I think a lot of people are getting into

38
00:01:48,210 --> 00:01:50,250
the service world but they're wondering

39
00:01:50,250 --> 00:01:54,090
why they're supposed to care and so my

40
00:01:54,090 --> 00:01:56,369
job today is gonna be to try and

41
00:01:56,369 --> 00:01:57,979
demonstrate to you why you might care

42
00:01:57,979 --> 00:02:01,740
and I'm gonna do this in probably the

43
00:02:01,740 --> 00:02:04,020
most in advisable way possible in a live

44
00:02:04,020 --> 00:02:08,190
code everything so this might go really

45
00:02:08,190 --> 00:02:11,489
wrong let's just hope the demo gremlins

46
00:02:11,489 --> 00:02:12,110
are on mice

47
00:02:12,110 --> 00:02:18,290
so guess kaj yes I can't see that and

48
00:02:18,290 --> 00:02:20,380
not think commonjs

49
00:02:20,380 --> 00:02:23,000
I'm gonna touch what's called a dark

50
00:02:23,000 --> 00:02:25,820
file so this is how I'm building

51
00:02:25,820 --> 00:02:29,000
serverless apps and the idea of an arc

52
00:02:29,000 --> 00:02:30,650
file is that it's a manifest format a

53
00:02:30,650 --> 00:02:31,940
lot of these service frameworks are

54
00:02:31,940 --> 00:02:36,220
using Y amel and I'm not down with that

55
00:02:36,220 --> 00:02:40,130
so we're just gonna do something else so

56
00:02:40,130 --> 00:02:41,470
I'm using this project architect

57
00:02:41,470 --> 00:02:43,550
architect which is this rock

58
00:02:43,550 --> 00:02:45,440
I've been polishing for about two years

59
00:02:45,440 --> 00:02:48,060
now

60
00:02:48,070 --> 00:02:51,350
we're reaching into the Internet to grab

61
00:02:51,350 --> 00:02:54,740
it from NPM and I know one of you right

62
00:02:54,740 --> 00:02:57,620
now thinks I should be using yarn I know

63
00:02:57,620 --> 00:03:01,550
it's okay if we over soon

64
00:03:01,550 --> 00:03:05,959
I almost installed this great not bad

65
00:03:05,959 --> 00:03:07,970
tuner eleven packages I love to reuse of

66
00:03:07,970 --> 00:03:10,940
that so we've got this you know empty

67
00:03:10,940 --> 00:03:13,120
node project without too much going on

68
00:03:13,120 --> 00:03:16,170
oops

69
00:03:16,180 --> 00:03:19,790
there's my arc file and there's nothing

70
00:03:19,790 --> 00:03:21,019
in here because I've been dying yet so

71
00:03:21,019 --> 00:03:23,900
the syntax arc is pretty simple you

72
00:03:23,900 --> 00:03:25,730
define an app which would be a namespace

73
00:03:25,730 --> 00:03:29,360
so I'm just gonna do CJ s and then you

74
00:03:29,360 --> 00:03:31,550
can define routes and these are gonna

75
00:03:31,550 --> 00:03:34,790
turn into individual lambda functions so

76
00:03:34,790 --> 00:03:37,010
let's do that we'll just do one route

77
00:03:37,010 --> 00:03:39,410
for now and I'm just gonna create this

78
00:03:39,410 --> 00:03:44,780
locally so node six I believe shipped

79
00:03:44,780 --> 00:03:47,780
this tool called NP x and NP x is pretty

80
00:03:47,780 --> 00:03:49,130
wonderful because it lets you run

81
00:03:49,130 --> 00:03:51,080
binaries local to your projects so

82
00:03:51,080 --> 00:03:52,640
instead of installing like a global

83
00:03:52,640 --> 00:03:53,959
binary and having it all over your

84
00:03:53,959 --> 00:03:56,150
system and not being able to deal with

85
00:03:56,150 --> 00:04:00,110
it you you you can just use MPX and run

86
00:04:00,110 --> 00:04:04,310
these these local binaries whoa so I'm

87
00:04:04,310 --> 00:04:07,100
just gonna not open my node modules it's

88
00:04:07,100 --> 00:04:10,480
a bad idea so when I ran that generate

89
00:04:10,480 --> 00:04:13,269
that create local command on this file

90
00:04:13,269 --> 00:04:16,010
it kind of mirrors the file system where

91
00:04:16,010 --> 00:04:18,410
I've get this HTTP thing and I've got

92
00:04:18,410 --> 00:04:20,690
this function right here I'm sorry this

93
00:04:20,690 --> 00:04:21,570
is

94
00:04:21,570 --> 00:04:26,200
so let's just think this a bit smaller

95
00:04:26,210 --> 00:04:31,730
okay so this function just says hello

96
00:04:31,730 --> 00:04:37,560
Cascadia and I'm gonna start a local

97
00:04:37,560 --> 00:04:41,510
sandbox and we'll take a look at that

98
00:04:41,510 --> 00:04:43,260
great okay

99
00:04:43,260 --> 00:04:45,360
so we're running one function locally no

100
00:04:45,360 --> 00:04:48,180
big deal let's add another function just

101
00:04:48,180 --> 00:04:50,360
to make this a little more interesting

102
00:04:50,360 --> 00:04:57,630
so we'll go into the arc file and we'll

103
00:04:57,630 --> 00:05:00,350
just do a get food

104
00:05:00,350 --> 00:05:07,800
px great local my terminal is not super

105
00:05:07,800 --> 00:05:10,080
stoked on this resolution so it looks a

106
00:05:10,080 --> 00:05:13,770
bit funky that's okay

107
00:05:13,770 --> 00:05:18,810
and we'll run the sandbox again great

108
00:05:18,810 --> 00:05:22,930
oops

109
00:05:22,940 --> 00:05:25,770
foo see hello world it's kind of what

110
00:05:25,770 --> 00:05:28,110
you would expect okay so working locally

111
00:05:28,110 --> 00:05:33,540
is a thing but really we want to work in

112
00:05:33,540 --> 00:05:36,570
the cloud so npx create local tells

113
00:05:36,570 --> 00:05:40,200
architect to build that thing to your

114
00:05:40,200 --> 00:05:41,970
local machine with an in-memory database

115
00:05:41,970 --> 00:05:44,490
so you don't have to have an internet

116
00:05:44,490 --> 00:05:47,160
connection or an Amazon account to to

117
00:05:47,160 --> 00:05:50,760
prototype npx create by itself will

118
00:05:50,760 --> 00:05:55,169
generate two API gateway instances two

119
00:05:55,169 --> 00:05:58,919
DynamoDB tables in this case for lambda

120
00:05:58,919 --> 00:06:01,650
functions and it will deploy the whole

121
00:06:01,650 --> 00:06:03,090
thing and then wire it up with an IM

122
00:06:03,090 --> 00:06:06,000
role the reason we do two of everything

123
00:06:06,000 --> 00:06:07,260
is because we want to have staging and

124
00:06:07,260 --> 00:06:08,550
production environments out of the box

125
00:06:08,550 --> 00:06:11,789
so this isn't something that you can

126
00:06:11,789 --> 00:06:15,930
really opt out of if we're building

127
00:06:15,930 --> 00:06:18,180
software today we want these isolated

128
00:06:18,180 --> 00:06:20,669
spots where we can stage our deployments

129
00:06:20,669 --> 00:06:23,880
through a development process a lot of

130
00:06:23,880 --> 00:06:25,590
other systems that are out there kind of

131
00:06:25,590 --> 00:06:29,099
make you do this yourself you inevitably

132
00:06:29,099 --> 00:06:30,690
don't quite do a great job of it

133
00:06:30,690 --> 00:06:33,030
it means systems are not quite the same

134
00:06:33,030 --> 00:06:34,680
you end up having it

135
00:06:34,680 --> 00:06:36,120
list when you're deploying to anything

136
00:06:36,120 --> 00:06:37,380
because you might have to do something

137
00:06:37,380 --> 00:06:39,539
manually and your environments not being

138
00:06:39,539 --> 00:06:41,130
the same means that you have tough time

139
00:06:41,130 --> 00:06:42,600
reproducing bugs if you have a hard time

140
00:06:42,600 --> 00:06:44,250
reproducing bugs and you definitely have

141
00:06:44,250 --> 00:06:47,639
a hard time resolving them so this part

142
00:06:47,639 --> 00:06:50,389
takes like a minute

143
00:06:50,389 --> 00:06:53,580
but there we go we're live and this is a

144
00:06:53,580 --> 00:06:57,419
lambda function deployed at this pretty

145
00:06:57,419 --> 00:07:02,970
URL ooh and if we look fou should be

146
00:07:02,970 --> 00:07:05,460
live with that hello world so not too

147
00:07:05,460 --> 00:07:07,580
bad that took about two minutes

148
00:07:07,580 --> 00:07:10,650
let's get iterating on this because

149
00:07:10,650 --> 00:07:13,050
we're running out of time so maybe I

150
00:07:13,050 --> 00:07:16,410
want to you know play with the session

151
00:07:16,410 --> 00:07:20,310
let's say so we're gonna add a route

152
00:07:20,310 --> 00:07:24,020
called post count and I'm gonna go into

153
00:07:24,020 --> 00:07:29,520
my index module I'm gonna add a form

154
00:07:29,520 --> 00:07:36,040
I'll leave this here

155
00:07:36,050 --> 00:07:39,440
I'm just gonna be that guy and totally

156
00:07:39,440 --> 00:07:43,789
make a messy thing here so we'll post a

157
00:07:43,789 --> 00:07:46,819
count yeah

158
00:07:46,819 --> 00:07:50,270
totally that guy it's okay

159
00:07:50,270 --> 00:07:54,440
it's a demo a lot of button type equals

160
00:07:54,440 --> 00:08:01,370
submit and we're gonna add a method to

161
00:08:01,370 --> 00:08:07,520
that great so that will post to a route

162
00:08:07,520 --> 00:08:11,330
called count and we added count here but

163
00:08:11,330 --> 00:08:15,400
we have a generator yet so I could

164
00:08:15,400 --> 00:08:17,810
generate this live right now into the

165
00:08:17,810 --> 00:08:20,120
actual lambda functions server thing

166
00:08:20,120 --> 00:08:21,560
that we've deployed the API gateway

167
00:08:21,560 --> 00:08:23,750
thing but we'll just do this locally for

168
00:08:23,750 --> 00:08:25,430
now so the create functions in dem if it

169
00:08:25,430 --> 00:08:27,199
is a fancy way of saying it can be run

170
00:08:27,199 --> 00:08:28,909
and rerun over and over again it's not

171
00:08:28,909 --> 00:08:30,289
gonna clobber anything it only creates

172
00:08:30,289 --> 00:08:33,229
stuff if it doesn't already exist so

173
00:08:33,229 --> 00:08:35,719
that's pretty quick we got that actually

174
00:08:35,719 --> 00:08:39,079
let's take a look boot up our sandbox

175
00:08:39,079 --> 00:08:41,209
again you notice that sandbox starts

176
00:08:41,209 --> 00:08:45,589
super fast that's what you want no

177
00:08:45,589 --> 00:08:48,260
waiting for builds great we have a

178
00:08:48,260 --> 00:08:51,740
button if we click it we go to this

179
00:08:51,740 --> 00:08:54,079
place called count Jesus not so

180
00:08:54,079 --> 00:08:57,800
interesting so let's go take a look at

181
00:08:57,800 --> 00:09:01,850
that count function you'll notice these

182
00:09:01,850 --> 00:09:04,370
functions so far don't have any

183
00:09:04,370 --> 00:09:09,700
dependencies they're just functions

184
00:09:09,700 --> 00:09:14,240
which is kind of nice so what we want to

185
00:09:14,240 --> 00:09:18,170
do here is actually redirect so that's a

186
00:09:18,170 --> 00:09:21,649
status code of 302 and for a location

187
00:09:21,649 --> 00:09:26,779
we'll just go home oh god I love the new

188
00:09:26,779 --> 00:09:34,269
keyboard these Macs

189
00:09:34,279 --> 00:09:38,399
we'll pop back over here oh my god this

190
00:09:38,399 --> 00:09:43,620
keyboard okay

191
00:09:43,620 --> 00:09:46,290
and that probably redirected but I

192
00:09:46,290 --> 00:09:50,779
didn't see it because I'm old

193
00:09:50,779 --> 00:09:55,529
let's see it'll pop up the network yay

194
00:09:55,529 --> 00:09:57,810
so we're getting a 302 redirect and then

195
00:09:57,810 --> 00:09:59,760
we're coming back home that itself is

196
00:09:59,760 --> 00:10:01,980
not so exciting let's let's start

197
00:10:01,980 --> 00:10:04,080
playing with State so one of the

198
00:10:04,080 --> 00:10:05,480
problems of lambda functions is that

199
00:10:05,480 --> 00:10:07,890
they're totally stateless by nature it's

200
00:10:07,890 --> 00:10:09,209
not really so much a problem as it's a

201
00:10:09,209 --> 00:10:11,760
feature but at some point when you're

202
00:10:11,760 --> 00:10:12,870
building an application you're gonna

203
00:10:12,870 --> 00:10:14,430
need a session state so we're gonna want

204
00:10:14,430 --> 00:10:17,399
to get one of those we bundle a couple

205
00:10:17,399 --> 00:10:20,779
of helper functions for this purpose

206
00:10:20,779 --> 00:10:24,540
their architect functions payload is

207
00:10:24,540 --> 00:10:27,270
small for this by the way so if I wanted

208
00:10:27,270 --> 00:10:30,589
to get some state here I could do like

209
00:10:30,589 --> 00:10:37,250
it's a weight arc that HTTP session read

210
00:10:37,250 --> 00:10:40,080
we can log it here just to take a look

211
00:10:40,080 --> 00:10:45,779
at it and I'm gonna say session duck

212
00:10:45,779 --> 00:10:54,029
count equals count or zero plus 1 and

213
00:10:54,029 --> 00:10:57,959
then we redirect back home and then back

214
00:10:57,959 --> 00:11:05,220
on that home Handler and get index oh my

215
00:11:05,220 --> 00:11:08,209
god it's keyboard

216
00:11:08,209 --> 00:11:10,879
how many times a day do I have to say

217
00:11:10,879 --> 00:11:16,730
that before I buy the surface book it's

218
00:11:16,730 --> 00:11:22,160
getting closer every day okay I'm

219
00:11:22,160 --> 00:11:24,920
digging this new Microsoft so same

220
00:11:24,920 --> 00:11:28,399
pattern gonna pop open post count just

221
00:11:28,399 --> 00:11:31,129
steal that line a code I know this is

222
00:11:31,129 --> 00:11:35,480
pretty messy so close you so this is

223
00:11:35,480 --> 00:11:37,699
gonna read that session and it's gonna

224
00:11:37,699 --> 00:11:39,019
look for well actually you know what

225
00:11:39,019 --> 00:11:42,769
let's just be super weirdos and let's

226
00:11:42,769 --> 00:11:47,569
just dump the whole thing out and this

227
00:11:47,569 --> 00:11:48,980
is like one of my favorite debugging

228
00:11:48,980 --> 00:11:52,309
techniques let's just dump the whole

229
00:11:52,309 --> 00:11:55,759
request now we'll dump the session let's

230
00:11:55,759 --> 00:12:06,519
do both we can do both okay

231
00:12:06,529 --> 00:12:09,499
I got a typo in here somewhere no

232
00:12:09,499 --> 00:12:11,779
actually I just have bad syntax

233
00:12:11,779 --> 00:12:14,389
highlighting good

234
00:12:14,389 --> 00:12:16,850
okay so when we redirect it's gonna come

235
00:12:16,850 --> 00:12:17,809
back and it's just going to dump a

236
00:12:17,809 --> 00:12:19,999
session it's not gonna do anything else

237
00:12:19,999 --> 00:12:24,799
whoops so let's sandbox this so we can

238
00:12:24,799 --> 00:12:27,290
see the login a little cleaner great

239
00:12:27,290 --> 00:12:32,050
oops

240
00:12:32,060 --> 00:12:38,850
and session doesn't have anyone yet oh I

241
00:12:38,850 --> 00:12:42,000
did something wrong you can see my

242
00:12:42,000 --> 00:12:43,860
session state is not persisting cuz my

243
00:12:43,860 --> 00:12:46,649
ID is changing sweet you gotta love it

244
00:12:46,649 --> 00:12:48,420
when the demo gods come and get you

245
00:12:48,420 --> 00:12:51,800
this totally worked like an hour ago

246
00:12:51,800 --> 00:12:55,380
okay we're gonna do some live debugging

247
00:12:55,380 --> 00:12:59,850
here I know what it is some this is like

248
00:12:59,850 --> 00:13:02,100
when I lose my keys the only way I can

249
00:13:02,100 --> 00:13:04,740
find them is if I tell my wife I lost my

250
00:13:04,740 --> 00:13:08,100
keys and then I'm like oh yeah I know

251
00:13:08,100 --> 00:13:13,529
where it is so I assigned this session

252
00:13:13,529 --> 00:13:17,459
here but I didn't save it alright so I

253
00:13:17,459 --> 00:13:20,360
what I want to do here is get a cookie

254
00:13:20,360 --> 00:13:24,360
and I'm gonna say wait are HTTP that

255
00:13:24,360 --> 00:13:28,170
session got right session and then I'm

256
00:13:28,170 --> 00:13:30,209
gonna write that cookie onto the request

257
00:13:30,209 --> 00:13:33,810
that was the missing piece helps to

258
00:13:33,810 --> 00:13:35,970
persist things if you want to see things

259
00:13:35,970 --> 00:13:42,900
persisted okay

260
00:13:42,910 --> 00:13:46,150
and there we go you can see down there

261
00:13:46,150 --> 00:13:51,820
our count is incremented Hey so that's

262
00:13:51,820 --> 00:13:53,320
local though that's not very exciting

263
00:13:53,320 --> 00:13:55,750
like let's let's deploy this thing so I

264
00:13:55,750 --> 00:13:57,640
didn't create all these routes yet so

265
00:13:57,640 --> 00:13:59,380
we're gonna run this again without the

266
00:13:59,380 --> 00:14:01,120
local flag and it's gonna deploy it to

267
00:14:01,120 --> 00:14:04,360
Amazon and we can we can check it out

268
00:14:04,360 --> 00:14:09,710
there to see see how we feel about that

269
00:14:09,720 --> 00:14:12,130
you'd think Amazon would be fast at

270
00:14:12,130 --> 00:14:19,600
Amazon kidding yeah Amazon's actually

271
00:14:19,600 --> 00:14:21,910
shockingly fast all the time what what

272
00:14:21,910 --> 00:14:23,350
it's doing right now is it's walking

273
00:14:23,350 --> 00:14:24,850
through that arc file and it's making

274
00:14:24,850 --> 00:14:26,830
sure everything's in sync and it's

275
00:14:26,830 --> 00:14:28,270
creating assets if they don't already

276
00:14:28,270 --> 00:14:31,000
exist and so you know it takes a moment

277
00:14:31,000 --> 00:14:32,230
because of looking at every single

278
00:14:32,230 --> 00:14:34,030
resource in that arc phone and

279
00:14:34,030 --> 00:14:37,420
generating those things twice once we're

280
00:14:37,420 --> 00:14:39,220
staging once for production once you've

281
00:14:39,220 --> 00:14:41,620
done that the deployments are actually

282
00:14:41,620 --> 00:14:45,190
shockingly fast they these functions

283
00:14:45,190 --> 00:14:47,440
because they're tiny little bits they

284
00:14:47,440 --> 00:14:49,570
can be deployed in parallel which means

285
00:14:49,570 --> 00:14:51,010
that if you have a whole bunch of

286
00:14:51,010 --> 00:14:52,570
functions you're basically only rate

287
00:14:52,570 --> 00:14:55,200
limited by whatever you're paying Amazon

288
00:14:55,200 --> 00:15:01,810
so in theory it's infinite but you're

289
00:15:01,810 --> 00:15:03,910
actually bound by how much room you have

290
00:15:03,910 --> 00:15:08,920
on your credit card okay so that

291
00:15:08,920 --> 00:15:14,000
deployed I Michael

292
00:15:14,000 --> 00:15:18,810
oh that didn't deploy that generated so

293
00:15:18,810 --> 00:15:20,610
we already generated that home rep but

294
00:15:20,610 --> 00:15:21,810
we actually didn't deploy our local

295
00:15:21,810 --> 00:15:27,300
changes yet so we'll run that and this

296
00:15:27,300 --> 00:15:28,769
is a resolution thing usually that

297
00:15:28,769 --> 00:15:31,260
progress bar looks actually that looked

298
00:15:31,260 --> 00:15:35,100
kind of cool I'm here for it so if we

299
00:15:35,100 --> 00:15:37,230
reload that exact same thing that we had

300
00:15:37,230 --> 00:15:39,920
working locally is now running remotely

301
00:15:39,920 --> 00:15:42,510
you can see what we get this whole big

302
00:15:42,510 --> 00:15:46,050
whole request object and oh no it blew

303
00:15:46,050 --> 00:15:48,209
up and I actually expected that to

304
00:15:48,209 --> 00:15:52,220
happen so Amazon for whatever reason

305
00:15:52,220 --> 00:15:55,529
when you deploy API gateway it appends

306
00:15:55,529 --> 00:15:59,010
these these sort of funky URLs which is

307
00:15:59,010 --> 00:16:01,260
annoying is you know you want to work at

308
00:16:01,260 --> 00:16:03,720
the apex of your domain so the way to

309
00:16:03,720 --> 00:16:07,200
fix that is to set up DNS another way to

310
00:16:07,200 --> 00:16:09,779
fix that is to hack the URL so I'm just

311
00:16:09,779 --> 00:16:21,510
going to do that real quick so you don't

312
00:16:21,510 --> 00:16:24,420
need this function once you set up DNS

313
00:16:24,420 --> 00:16:25,950
and setting up DNS honestly it just

314
00:16:25,950 --> 00:16:30,750
takes like not long so I deployed three

315
00:16:30,750 --> 00:16:32,490
functions there in four seconds which

316
00:16:32,490 --> 00:16:34,410
was pretty okay you can you can

317
00:16:34,410 --> 00:16:36,000
surgically deploy one function if you

318
00:16:36,000 --> 00:16:38,820
want to and that was the post function I

319
00:16:38,820 --> 00:16:42,500
think so we'll just deploy that one

320
00:16:42,500 --> 00:16:43,770
great

321
00:16:43,770 --> 00:16:45,930
we've overwritten that function so we

322
00:16:45,930 --> 00:16:53,510
should oh I know I

323
00:16:53,510 --> 00:16:57,800
I have to fix that form as well it's the

324
00:16:57,800 --> 00:17:00,350
fun of live coding you get to you get to

325
00:17:00,350 --> 00:17:02,030
be along for the ride and watching me

326
00:17:02,030 --> 00:17:07,030
flail this that's how you know it's real

327
00:17:07,030 --> 00:17:12,339
all the mistakes okay so this URL is

328
00:17:12,339 --> 00:17:19,940
ostensibly the problem is this reading

329
00:17:19,940 --> 00:17:24,160
okay for you back there okay cool

330
00:17:24,160 --> 00:17:27,320
your JavaScript devs where we're used to

331
00:17:27,320 --> 00:17:37,220
a little bit messy syntax I love it well

332
00:17:37,220 --> 00:17:39,860
just deploy the whole thing because who

333
00:17:39,860 --> 00:17:42,490
cares it's like two seconds difference

334
00:17:42,490 --> 00:17:45,460
great let's test that

335
00:17:45,460 --> 00:17:51,330
well not -

336
00:17:51,340 --> 00:17:55,720
okay state yay

337
00:17:55,720 --> 00:18:04,210
and oh count of one Kenneth to sweet

338
00:18:04,210 --> 00:18:08,860
nut that's cool let's deploy that to

339
00:18:08,860 --> 00:18:15,130
production and this will just take that

340
00:18:15,130 --> 00:18:17,410
same code and basically just pump it

341
00:18:17,410 --> 00:18:19,360
straight into a fresh set of lambdas in

342
00:18:19,360 --> 00:18:22,330
a fresh API gateway and these things are

343
00:18:22,330 --> 00:18:23,800
entirely isolated from each other

344
00:18:23,800 --> 00:18:25,090
they're not touching each other in any

345
00:18:25,090 --> 00:18:27,190
way you'll notice that cold start was

346
00:18:27,190 --> 00:18:30,070
non-existent so something that people

347
00:18:30,070 --> 00:18:31,540
brought up earlier one of the problems

348
00:18:31,540 --> 00:18:33,160
of these things the cold start cold

349
00:18:33,160 --> 00:18:34,390
starts not a problem if you have lots of

350
00:18:34,390 --> 00:18:35,920
small functions the key is to be under

351
00:18:35,920 --> 00:18:38,440
five megabytes is this pretty common

352
00:18:38,440 --> 00:18:39,610
knowledge now because I've been saying

353
00:18:39,610 --> 00:18:48,790
it for four years okay so well we got a

354
00:18:48,790 --> 00:18:50,020
few minutes I'm gonna cruise through

355
00:18:50,020 --> 00:18:52,540
these last few slides I think you can

356
00:18:52,540 --> 00:18:55,750
now maybe see that there are reasons to

357
00:18:55,750 --> 00:18:58,720
possibly care about service the the

358
00:18:58,720 --> 00:19:00,640
function is the key here and there's a

359
00:19:00,640 --> 00:19:02,350
lot of things calling themselves service

360
00:19:02,350 --> 00:19:05,860
today and that's fine they can do that

361
00:19:05,860 --> 00:19:08,500
but if you really want to like see the

362
00:19:08,500 --> 00:19:09,610
benefits of this type of architecture

363
00:19:09,610 --> 00:19:11,650
lots of small functions is definitely

364
00:19:11,650 --> 00:19:14,410
the way to go and one of the things sort

365
00:19:14,410 --> 00:19:15,880
of big anti-patterns a lot of people

366
00:19:15,880 --> 00:19:17,860
have been doing is it'll take a function

367
00:19:17,860 --> 00:19:20,290
and they'll put an express webserver in

368
00:19:20,290 --> 00:19:22,620
it and I'll deploy that one function and

369
00:19:22,620 --> 00:19:24,790
it's a really bad idea

370
00:19:24,790 --> 00:19:27,460
and I know because that's the first

371
00:19:27,460 --> 00:19:30,310
thing I did with our startup and it

372
00:19:30,310 --> 00:19:32,740
worked for quite a while but the moment

373
00:19:32,740 --> 00:19:35,440
that you deploy an express webserver in

374
00:19:35,440 --> 00:19:37,870
one function the very first moment is

375
00:19:37,870 --> 00:19:40,150
the very fastest that thing will ever be

376
00:19:40,150 --> 00:19:41,500
because you're just gonna keep adding

377
00:19:41,500 --> 00:19:42,730
code to that thing it's gonna get bigger

378
00:19:42,730 --> 00:19:44,800
and bigger and slower and slower so the

379
00:19:44,800 --> 00:19:46,930
key here is to break it up in lots of

380
00:19:46,930 --> 00:19:50,050
small functions which I think you get so

381
00:19:50,050 --> 00:19:52,480
it's cool LEM does have a lot of nice

382
00:19:52,480 --> 00:19:55,390
characteristics people call this only

383
00:19:55,390 --> 00:19:57,040
pay for what you use a hundred percent

384
00:19:57,040 --> 00:20:00,220
utilization I don't know why we call it

385
00:20:00,220 --> 00:20:02,560
that just call it the only paper we use

386
00:20:02,560 --> 00:20:05,280
and and by the way what do you pay

387
00:20:05,280 --> 00:20:09,260
well 1 million executions is free and

388
00:20:09,260 --> 00:20:11,730
then it's like a penny for every million

389
00:20:11,730 --> 00:20:15,360
executions after that and so it's not

390
00:20:15,360 --> 00:20:20,370
free but it's very affordable lambdas

391
00:20:20,370 --> 00:20:22,710
have a way better security model they're

392
00:20:22,710 --> 00:20:24,540
locked down by nature they only execute

393
00:20:24,540 --> 00:20:25,980
for a hundred millisecond increments

394
00:20:25,980 --> 00:20:27,510
when they go away there's no ports to

395
00:20:27,510 --> 00:20:30,420
scan you control the dependency packages

396
00:20:30,420 --> 00:20:31,530
that they go and then they go away

397
00:20:31,530 --> 00:20:35,010
they're stateless so each function can

398
00:20:35,010 --> 00:20:37,020
also be independently configured so with

399
00:20:37,020 --> 00:20:38,430
a monolith if you're setting it up

400
00:20:38,430 --> 00:20:41,340
properly with i.m rules you're gonna try

401
00:20:41,340 --> 00:20:43,170
and have lease privilege which if it's a

402
00:20:43,170 --> 00:20:45,600
model at least privilege will be you can

403
00:20:45,600 --> 00:20:47,910
do everything with a lambda function you

404
00:20:47,910 --> 00:20:49,770
can lock that thing down very discreetly

405
00:20:49,770 --> 00:20:51,870
so get request can only read that kind

406
00:20:51,870 --> 00:20:55,500
of thing the big thing is that we're

407
00:20:55,500 --> 00:20:57,690
only focusing on business value so a lot

408
00:20:57,690 --> 00:20:59,430
of time gets spent on infrastructure

409
00:20:59,430 --> 00:21:01,080
I don't know that this crowd cares about

410
00:21:01,080 --> 00:21:02,370
that as much but I know the big

411
00:21:02,370 --> 00:21:06,030
enterprises do so to me fast our

412
00:21:06,030 --> 00:21:07,860
functions are lambdas or whatever we

413
00:21:07,860 --> 00:21:08,550
want to call them these are

414
00:21:08,550 --> 00:21:09,180
best-in-class

415
00:21:09,180 --> 00:21:10,620
they've got fixed costs have got better

416
00:21:10,620 --> 00:21:11,970
security and you just get faster

417
00:21:11,970 --> 00:21:13,530
iterations as you can you could see

418
00:21:13,530 --> 00:21:17,790
these things are so fast to deploy so we

419
00:21:17,790 --> 00:21:21,990
have a roughly 150 lambda web app and

420
00:21:21,990 --> 00:21:25,160
our deployment time is about 40 seconds

421
00:21:25,160 --> 00:21:27,210
which is pretty amazing

422
00:21:27,210 --> 00:21:29,250
so you can deploy these things in a few

423
00:21:29,250 --> 00:21:30,780
seconds but you can also deploy them all

424
00:21:30,780 --> 00:21:32,640
in parallel you can deploy them

425
00:21:32,640 --> 00:21:34,590
surgically and this means that you get

426
00:21:34,590 --> 00:21:36,330
more iterations and if you get more

427
00:21:36,330 --> 00:21:37,590
iterations and you probably have a

428
00:21:37,590 --> 00:21:39,950
better chance of fixing that bug or

429
00:21:39,950 --> 00:21:43,980
finding product market fit or you know

430
00:21:43,980 --> 00:21:46,770
building that next feature and speed is

431
00:21:46,770 --> 00:21:48,480
kind of the key so you're your author

432
00:21:48,480 --> 00:21:50,640
time is faster your run time is faster

433
00:21:50,640 --> 00:21:54,030
you're your bug resolution is better it

434
00:21:54,030 --> 00:21:55,850
seems like it's pretty worth exploring I

435
00:21:55,850 --> 00:21:57,780
also want to put out there that we

436
00:21:57,780 --> 00:21:58,950
should be a little more excellent to

437
00:21:58,950 --> 00:22:00,510
each other there's a lot of people

438
00:22:00,510 --> 00:22:01,710
saying that they have the right way to

439
00:22:01,710 --> 00:22:04,260
do this and I don't know that that is

440
00:22:04,260 --> 00:22:07,620
true but what I do know is the back end

441
00:22:07,620 --> 00:22:08,330
is now yours

442
00:22:08,330 --> 00:22:10,740
you can build all that stuff and you

443
00:22:10,740 --> 00:22:12,210
really don't need these servers or

444
00:22:12,210 --> 00:22:14,790
communities or any of it which is a

445
00:22:14,790 --> 00:22:16,320
pretty big deal so if you want to get

446
00:22:16,320 --> 00:22:17,370
involved in this

447
00:22:17,370 --> 00:22:18,900
we'd like pull requests that is

448
00:22:18,900 --> 00:22:21,180
definitely contributing but bug reports

449
00:22:21,180 --> 00:22:23,790
are actually like please please report

450
00:22:23,790 --> 00:22:25,470
bugs I had someone that met just a week

451
00:22:25,470 --> 00:22:27,480
ago and they were like oh I had a bug

452
00:22:27,480 --> 00:22:29,400
but I didn't want to say anything I was

453
00:22:29,400 --> 00:22:32,640
like no it's like the worst like please

454
00:22:32,640 --> 00:22:35,130
tell me feature requests are also

455
00:22:35,130 --> 00:22:36,840
appreciated I don't have all the same

456
00:22:36,840 --> 00:22:38,910
use cases as you so please let me know

457
00:22:38,910 --> 00:22:41,810
and share what you're learning and

458
00:22:41,810 --> 00:22:44,060
thanks very much

