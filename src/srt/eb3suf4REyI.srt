1
00:00:10,429 --> 00:00:13,559

thank you so as you said my name is Mike

2
00:00:13,559 --> 00:00:15,240
West you can get all the vital details

3
00:00:15,240 --> 00:00:17,039
up there it's really just an exercise to

4
00:00:17,039 --> 00:00:18,690
see how many times I can type my quest

5
00:00:18,690 --> 00:00:21,150
on the same page the slides are actually

6
00:00:21,150 --> 00:00:23,039
online right now I'm using speaker duck

7
00:00:23,039 --> 00:00:25,199
because speaker 2 is awesome and my

8
00:00:25,199 --> 00:00:26,670
computer decided hey I'm not going to

9
00:00:26,670 --> 00:00:27,869
connect to the laptop they're to the

10
00:00:27,869 --> 00:00:29,580
projector so if you want to follow along

11
00:00:29,580 --> 00:00:30,660
with the slides you can grab them right

12
00:00:30,660 --> 00:00:32,940
now I'd suggest you just you know hop

13
00:00:32,940 --> 00:00:35,010
over there take a look at the slides and

14
00:00:35,010 --> 00:00:36,540
look at the master words as well because

15
00:00:36,540 --> 00:00:38,520
what I really want to do today is give

16
00:00:38,520 --> 00:00:40,649
you an introduction to a kind of wide

17
00:00:40,649 --> 00:00:42,750
field of things that can go wrong on

18
00:00:42,750 --> 00:00:45,420
your site specifically I want to talk

19
00:00:45,420 --> 00:00:47,940
about content injection attacks content

20
00:00:47,940 --> 00:00:50,010
injection is probably the most pervasive

21
00:00:50,010 --> 00:00:51,930
problem on the web from a security

22
00:00:51,930 --> 00:00:54,570
perspective absolutely every website

23
00:00:54,570 --> 00:00:57,000
will have a content injection hole of

24
00:00:57,000 --> 00:00:58,739
one sort or another at one time or

25
00:00:58,739 --> 00:01:00,840
another it's really difficult to do

26
00:01:00,840 --> 00:01:02,719
things correctly we all make mistakes

27
00:01:02,719 --> 00:01:05,220
Google makes mistakes and if Google is

28
00:01:05,220 --> 00:01:06,930
making mistakes with teams that are

29
00:01:06,930 --> 00:01:09,510
actually dedicated to security reviewing

30
00:01:09,510 --> 00:01:11,369
all the code you can be damn sure that

31
00:01:11,369 --> 00:01:12,750
you guys are gonna make mistakes as well

32
00:01:12,750 --> 00:01:16,020
does anyone actually have a full-time

33
00:01:16,020 --> 00:01:19,200
security person on their team I am

34
00:01:19,200 --> 00:01:21,119
actually shocked there are people with

35
00:01:21,119 --> 00:01:23,130
their hands up usually everyone sits

36
00:01:23,130 --> 00:01:25,290
there and stunned silent saying what pay

37
00:01:25,290 --> 00:01:27,590
someone to work on security that's crazy

38
00:01:27,590 --> 00:01:32,670
generally speaking security gets is is

39
00:01:32,670 --> 00:01:35,159
generally pushed to the end we usually

40
00:01:35,159 --> 00:01:36,540
worry about security when it's too late

41
00:01:36,540 --> 00:01:38,369
once we found a hole on the site as

42
00:01:38,369 --> 00:01:40,409
opposed to worrying about it up front I

43
00:01:40,409 --> 00:01:43,020
think that should probably change but

44
00:01:43,020 --> 00:01:44,579
let's talk about content injection

45
00:01:44,579 --> 00:01:47,070
content injection happens when you

46
00:01:47,070 --> 00:01:49,500
either a one mechanism of content

47
00:01:49,500 --> 00:01:52,710
injection is poor escaping so you get

48
00:01:52,710 --> 00:01:55,259
some content from a user you escape it

49
00:01:55,259 --> 00:01:57,119
incorrectly and then write it out to the

50
00:01:57,119 --> 00:01:59,490
page what you see here is a relatively

51
00:01:59,490 --> 00:02:03,200
exhaustive list of the contexts in which

52
00:02:03,200 --> 00:02:06,149
code can be output to a site so you have

53
00:02:06,149 --> 00:02:08,640
a color in a style tag you have a user

54
00:02:08,640 --> 00:02:11,009
name directly inside of an HTML elements

55
00:02:11,009 --> 00:02:12,690
you have a URL that's inside of an

56
00:02:12,690 --> 00:02:13,830
attribute

57
00:02:13,830 --> 00:02:15,210
have a user ID that's written directly

58
00:02:15,210 --> 00:02:16,950
into script and you have some debug

59
00:02:16,950 --> 00:02:19,590
information put into a comment for each

60
00:02:19,590 --> 00:02:22,230
of these contexts the rules are

61
00:02:22,230 --> 00:02:24,870
different for example if I have two

62
00:02:24,870 --> 00:02:27,090
dashes inside of a comment that actually

63
00:02:27,090 --> 00:02:29,970
closes the comment two dashes inside of

64
00:02:29,970 --> 00:02:32,010
a pee tag of course have absolutely no

65
00:02:32,010 --> 00:02:33,570
effect other than writing out two dashes

66
00:02:33,570 --> 00:02:36,270
to the page you need to be very careful

67
00:02:36,270 --> 00:02:38,460
about the ways that you escape data when

68
00:02:38,460 --> 00:02:39,750
you write it out to the page you need to

69
00:02:39,750 --> 00:02:41,670
know the context in which you're writing

70
00:02:41,670 --> 00:02:43,290
out data and you need to make sure that

71
00:02:43,290 --> 00:02:45,540
you escape the information correctly for

72
00:02:45,540 --> 00:02:49,680
that context it's honestly trivial to do

73
00:02:49,680 --> 00:02:52,620
all you have to do is be perfect you

74
00:02:52,620 --> 00:02:54,720
simply have to know all of the rules and

75
00:02:54,720 --> 00:02:57,300
apply them perfectly every time you read

76
00:02:57,300 --> 00:02:59,340
out any data data that's coming from you

77
00:02:59,340 --> 00:03:01,560
data that's reflected from the Dom data

78
00:03:01,560 --> 00:03:03,720
that's coming from get parameters every

79
00:03:03,720 --> 00:03:06,870
single time you have to be perfect it's

80
00:03:06,870 --> 00:03:10,650
kind of difficult to do why is content

81
00:03:10,650 --> 00:03:12,720
ejection important well to understand

82
00:03:12,720 --> 00:03:14,580
that you have to understand the concept

83
00:03:14,580 --> 00:03:17,370
of an origin an origin is a pairing of a

84
00:03:17,370 --> 00:03:20,390
scheme a host and a port so HTTP

85
00:03:20,390 --> 00:03:25,790
example.com 80 or HTTPS Google comm 443

86
00:03:25,790 --> 00:03:28,470
those are two distinct origins and the

87
00:03:28,470 --> 00:03:30,900
browser can guarantee that those origins

88
00:03:30,900 --> 00:03:33,480
should never have direct access to

89
00:03:33,480 --> 00:03:35,540
information from the other origin

90
00:03:35,540 --> 00:03:39,060
example.com must never be able to access

91
00:03:39,060 --> 00:03:41,459
for instance cookies from Google com or

92
00:03:41,459 --> 00:03:43,470
local storage or any of a number of

93
00:03:43,470 --> 00:03:47,070
other html5 storage mechanisms you're

94
00:03:47,070 --> 00:03:48,360
kind of already familiar with this

95
00:03:48,360 --> 00:03:50,160
concept with regard to JavaScript

96
00:03:50,160 --> 00:03:52,680
because JavaScript has a number of ways

97
00:03:52,680 --> 00:03:55,080
in which it can be a injected into a

98
00:03:55,080 --> 00:03:58,440
page and be read interesting data like

99
00:03:58,440 --> 00:04:00,330
cookies and then exfiltrate that data

100
00:04:00,330 --> 00:04:04,800
out to a third party of course solving

101
00:04:04,800 --> 00:04:06,690
content injection on the web is simple

102
00:04:06,690 --> 00:04:08,400
right we just turn off JavaScript and

103
00:04:08,400 --> 00:04:11,549
we're done easy just tell all your users

104
00:04:11,549 --> 00:04:12,959
to go into content settings turn off

105
00:04:12,959 --> 00:04:14,670
JavaScript on every web page and they

106
00:04:14,670 --> 00:04:16,080
will never have another content

107
00:04:16,080 --> 00:04:18,299
injection problem again sure someone

108
00:04:18,299 --> 00:04:19,739
might write some content on your page

109
00:04:19,739 --> 00:04:21,150
but it's just text it won't actually

110
00:04:21,150 --> 00:04:23,669
execute so how could anything dangerous

111
00:04:23,669 --> 00:04:27,000
happen I am here to talk about the

112
00:04:27,000 --> 00:04:29,970
things there's an excellent paper and

113
00:04:29,970 --> 00:04:31,530
most of the things that I'm going to

114
00:04:31,530 --> 00:04:34,470
talk about today come from come from

115
00:04:34,470 --> 00:04:36,690
Mario and come from this paper and a

116
00:04:36,690 --> 00:04:38,220
number of others that he's published

117
00:04:38,220 --> 00:04:40,920
I don't do attack research I am not the

118
00:04:40,920 --> 00:04:43,320
right guy for that but I want to talk

119
00:04:43,320 --> 00:04:44,730
about it a little bit just to give you

120
00:04:44,730 --> 00:04:46,860
some context so that then at the end of

121
00:04:46,860 --> 00:04:48,000
this talk I can talk about the things

122
00:04:48,000 --> 00:04:50,940
that I think are important defense I can

123
00:04:50,940 --> 00:04:53,340
show you how to harden your website

124
00:04:53,340 --> 00:04:55,080
against these kinds of attacks and also

125
00:04:55,080 --> 00:04:56,490
against all the other kinds of

126
00:04:56,490 --> 00:04:58,260
cross-site scripting attacks out there I

127
00:04:58,260 --> 00:04:59,790
actually really recommend that you take

128
00:04:59,790 --> 00:05:01,980
a look at this paper it's kind of an

129
00:05:01,980 --> 00:05:03,510
academic paper but it's really easy to

130
00:05:03,510 --> 00:05:05,280
read and it walks through a lot of the

131
00:05:05,280 --> 00:05:06,720
concepts that I'll be talking about here

132
00:05:06,720 --> 00:05:08,580
and again all the slides are online

133
00:05:08,580 --> 00:05:12,060
you'll see the URL at the end again what

134
00:05:12,060 --> 00:05:13,560
I'm not going to talk about although I

135
00:05:13,560 --> 00:05:15,540
find it incredibly interesting are

136
00:05:15,540 --> 00:05:18,419
timing attacks timing attacks I would

137
00:05:18,419 --> 00:05:19,830
love to talk about them but they require

138
00:05:19,830 --> 00:05:21,750
JavaScript and because of that I cannot

139
00:05:21,750 --> 00:05:23,610
talk about them at CSS comp but I can

140
00:05:23,610 --> 00:05:25,380
show you this white paper this was

141
00:05:25,380 --> 00:05:27,480
presented I think in June of this year

142
00:05:27,480 --> 00:05:30,450
and it's it is absolutely stunning what

143
00:05:30,450 --> 00:05:33,060
you can do simply by looking at how the

144
00:05:33,060 --> 00:05:35,820
browser renders things this guy gives

145
00:05:35,820 --> 00:05:37,800
you an excellent mechanism by which you

146
00:05:37,800 --> 00:05:40,500
can detect whether or not a user has

147
00:05:40,500 --> 00:05:43,110
visited a page the history attacks we

148
00:05:43,110 --> 00:05:45,240
basically shut those down via JavaScript

149
00:05:45,240 --> 00:05:47,430
in other words you can't directly read

150
00:05:47,430 --> 00:05:49,620
the style of a visited link however if

151
00:05:49,620 --> 00:05:52,740
you're very clever and you read the

152
00:05:52,740 --> 00:05:54,900
paper it's absolutely incredible he can

153
00:05:54,900 --> 00:05:57,840
actually read individual pixels across

154
00:05:57,840 --> 00:06:00,270
origin through an iframe it's the most

155
00:06:00,270 --> 00:06:02,120
amazing thing that I've seen in the last

156
00:06:02,120 --> 00:06:04,169
couple of months I really highly

157
00:06:04,169 --> 00:06:05,340
recommend you read it but that's not our

158
00:06:05,340 --> 00:06:07,169
topic for today but we want to talk

159
00:06:07,169 --> 00:06:09,030
about today our content injection

160
00:06:09,030 --> 00:06:10,860
attacks and for a Content injection

161
00:06:10,860 --> 00:06:13,020
attack to be successful it needs three

162
00:06:13,020 --> 00:06:14,580
components there needs to be an

163
00:06:14,580 --> 00:06:17,610
injection and I guarantee you that there

164
00:06:17,610 --> 00:06:19,020
are injections on your page I'm not even

165
00:06:19,020 --> 00:06:20,280
going to talk about it because it

166
00:06:20,280 --> 00:06:22,350
happens everywhere it's really difficult

167
00:06:22,350 --> 00:06:25,560
to avoid then it needs execution and for

168
00:06:25,560 --> 00:06:27,600
JavaScript execution is quite clear the

169
00:06:27,600 --> 00:06:30,090
code executes or it doesn't what I

170
00:06:30,090 --> 00:06:33,630
propose is that execution should be you

171
00:06:33,630 --> 00:06:35,820
should conceptually include things like

172
00:06:35,820 --> 00:06:37,050
the application of style

173
00:06:37,050 --> 00:06:40,310
if style executes on your page then

174
00:06:40,310 --> 00:06:41,510
I'll show you some problems that can pop

175
00:06:41,510 --> 00:06:44,450
up and then there needs to be some sort

176
00:06:44,450 --> 00:06:47,389
of advantage for the attacker in that in

177
00:06:47,389 --> 00:06:49,400
the most cases the advantage for the

178
00:06:49,400 --> 00:06:51,680
attacker is exfiltration of interesting

179
00:06:51,680 --> 00:06:53,720
information from your website this might

180
00:06:53,720 --> 00:06:55,910
be a CSRF token we'll talk about those

181
00:06:55,910 --> 00:06:57,530
in a moment it might be a password it

182
00:06:57,530 --> 00:06:59,270
might be the user's bank account

183
00:06:59,270 --> 00:07:02,900
information anytime the attacker can get

184
00:07:02,900 --> 00:07:04,820
secret information from a page and

185
00:07:04,820 --> 00:07:07,130
exfiltrate it to a third party server to

186
00:07:07,130 --> 00:07:08,840
a server that they control then they've

187
00:07:08,840 --> 00:07:10,480
gained some sort of advantage over you

188
00:07:10,480 --> 00:07:13,250
we'll talk about how all of these can

189
00:07:13,250 --> 00:07:17,330
happen within the context of CSS first

190
00:07:17,330 --> 00:07:18,550
I'll talk about the obvious stuff

191
00:07:18,550 --> 00:07:21,080
defacement phishing anything along these

192
00:07:21,080 --> 00:07:23,720
lines if someone can inject style into

193
00:07:23,720 --> 00:07:26,120
your page then by definition they can

194
00:07:26,120 --> 00:07:27,830
change the way that your page looks and

195
00:07:27,830 --> 00:07:29,780
to a certain extent they can change the

196
00:07:29,780 --> 00:07:32,360
way your page behaves in the worst case

197
00:07:32,360 --> 00:07:33,740
or in the most simple case they can

198
00:07:33,740 --> 00:07:36,680
simply hide everything on your page and

199
00:07:36,680 --> 00:07:39,080
change the background of your of your

200
00:07:39,080 --> 00:07:40,280
page to something that you would not

201
00:07:40,280 --> 00:07:42,380
like to have as your homepage these are

202
00:07:42,380 --> 00:07:44,390
really trivial attacks there's nothing

203
00:07:44,390 --> 00:07:45,979
really interesting to say about them

204
00:07:45,979 --> 00:07:47,810
other than if someone can inject style

205
00:07:47,810 --> 00:07:49,700
into your page they can change the way

206
00:07:49,700 --> 00:07:52,850
your page looks and at best embarrass

207
00:07:52,850 --> 00:07:55,340
you at worst trick users into clicking

208
00:07:55,340 --> 00:07:56,419
on things that they shouldn't click on

209
00:07:56,419 --> 00:07:58,310
so if you have a hole that allows

210
00:07:58,310 --> 00:08:00,650
someone to inject style they can almost

211
00:08:00,650 --> 00:08:02,720
certainly inject HTML as well if they

212
00:08:02,720 --> 00:08:04,700
can inject HTML they could inject a form

213
00:08:04,700 --> 00:08:06,530
they could inject a link and bring a

214
00:08:06,530 --> 00:08:08,240
user to a page that the user isn't

215
00:08:08,240 --> 00:08:10,669
expecting to go to a style injection

216
00:08:10,669 --> 00:08:12,050
will help them with that it'll help them

217
00:08:12,050 --> 00:08:13,640
take whatever they can inject and make

218
00:08:13,640 --> 00:08:15,080
it look like it's supposed to be on your

219
00:08:15,080 --> 00:08:17,000
page and make it very enticing for user

220
00:08:17,000 --> 00:08:18,830
to click on so if your bank account

221
00:08:18,830 --> 00:08:21,800
suddenly said hey here's five free euro

222
00:08:21,800 --> 00:08:23,060
then you're probably going to click on

223
00:08:23,060 --> 00:08:24,830
that button because hey five four euro

224
00:08:24,830 --> 00:08:26,479
that's awesome of course my bank is

225
00:08:26,479 --> 00:08:28,729
gonna give that to me because of that

226
00:08:28,729 --> 00:08:31,160
any time the user that an attacker can

227
00:08:31,160 --> 00:08:33,710
inject style into a page it's actually

228
00:08:33,710 --> 00:08:35,270
more dangerous than you might think just

229
00:08:35,270 --> 00:08:37,460
in terms of defacement but again that's

230
00:08:37,460 --> 00:08:38,780
not particularly interesting because

231
00:08:38,780 --> 00:08:41,870
it's kind of obvious what would be more

232
00:08:41,870 --> 00:08:43,909
interesting is if we could take some

233
00:08:43,909 --> 00:08:45,650
sort of secret information on the page

234
00:08:45,650 --> 00:08:48,290
information that isn't actually visible

235
00:08:48,290 --> 00:08:51,800
to the user and exfiltrated somehow so

236
00:08:51,800 --> 00:08:53,660
for example every

237
00:08:53,660 --> 00:08:55,399
time you have a form on a web site that

238
00:08:55,399 --> 00:08:58,579
posts somewhere and does something in

239
00:08:58,579 --> 00:09:00,529
the backend you generally want to make

240
00:09:00,529 --> 00:09:02,480
sure that you are the only one that can

241
00:09:02,480 --> 00:09:05,480
post to that URL one way to do that is

242
00:09:05,480 --> 00:09:08,089
to have a CSRF token which basically

243
00:09:08,089 --> 00:09:11,060
says you give each user a one-time pad

244
00:09:11,060 --> 00:09:13,699
so here's a secret and then they use

245
00:09:13,699 --> 00:09:15,529
that secret when they submit the form

246
00:09:15,529 --> 00:09:17,420
because of course you can submit forms

247
00:09:17,420 --> 00:09:19,670
from anywhere forms and posts are not

248
00:09:19,670 --> 00:09:21,529
particularly hard to trick a user into

249
00:09:21,529 --> 00:09:23,300
making this is why you want to make sure

250
00:09:23,300 --> 00:09:25,339
that you give the user a secret and then

251
00:09:25,339 --> 00:09:27,259
the user uses that secret to execute

252
00:09:27,259 --> 00:09:29,269
something on the backend it'd be really

253
00:09:29,269 --> 00:09:31,129
useful if an attacker could find some

254
00:09:31,129 --> 00:09:34,100
way to pull that secret and give it over

255
00:09:34,100 --> 00:09:36,470
to to themselves as opposed to only

256
00:09:36,470 --> 00:09:38,120
having access to it within the context

257
00:09:38,120 --> 00:09:40,550
of your page how could we go about doing

258
00:09:40,550 --> 00:09:44,689
this it's an input element and we need

259
00:09:44,689 --> 00:09:48,470
to use CSS in some way to apply style to

260
00:09:48,470 --> 00:09:50,240
that element only when it meets certain

261
00:09:50,240 --> 00:09:52,670
requirements one mechanism that we could

262
00:09:52,670 --> 00:09:54,980
use of course is an attribute selector

263
00:09:54,980 --> 00:09:57,379
attribute selectors are great they allow

264
00:09:57,379 --> 00:09:59,689
us to apply Styles only when the

265
00:09:59,689 --> 00:10:02,600
attribute matches a certain value so in

266
00:10:02,600 --> 00:10:05,389
the worst case you can brute force the

267
00:10:05,389 --> 00:10:07,790
value of an elements or have an

268
00:10:07,790 --> 00:10:10,279
attribute on it elements by injecting a

269
00:10:10,279 --> 00:10:11,990
whole lot of style or more appropriately

270
00:10:11,990 --> 00:10:14,060
by injecting a link to a style sheet

271
00:10:14,060 --> 00:10:16,130
such that the style sheet loads has a

272
00:10:16,130 --> 00:10:18,860
whole lot of style information and the

273
00:10:18,860 --> 00:10:21,199
CSRF token will be matched if it matches

274
00:10:21,199 --> 00:10:24,319
a certain value so this shows you how

275
00:10:24,319 --> 00:10:26,000
you would do it if the CSRF token was

276
00:10:26,000 --> 00:10:28,970
binary most CSRF tokens are in fact not

277
00:10:28,970 --> 00:10:30,470
binary they use a lot more characters

278
00:10:30,470 --> 00:10:32,420
which means brute-forcing isn't

279
00:10:32,420 --> 00:10:35,870
particularly fast it's actually quite

280
00:10:35,870 --> 00:10:39,800
slow but once we have this once we were

281
00:10:39,800 --> 00:10:42,829
able to match a value and of course you

282
00:10:42,829 --> 00:10:44,149
don't have to use equals you can use

283
00:10:44,149 --> 00:10:45,860
starts width you can use ends with it'd

284
00:10:45,860 --> 00:10:47,630
be really nice if there was a reg axe of

285
00:10:47,630 --> 00:10:49,189
some sort but there isn't I'm hoping

286
00:10:49,189 --> 00:10:50,779
that comes up at some point really

287
00:10:50,779 --> 00:10:52,399
excited about web components let's see

288
00:10:52,399 --> 00:10:56,389
where we go with that I think that there

289
00:10:56,389 --> 00:10:58,819
is so once you're able to inject script

290
00:10:58,819 --> 00:11:00,889
or inject style and that style can not

291
00:11:00,889 --> 00:11:03,050
certain elements on the page we still

292
00:11:03,050 --> 00:11:04,699
have to have some mechanism by which we

293
00:11:04,699 --> 00:11:07,520
give that information to a third party

294
00:11:07,520 --> 00:11:10,640
happily CSS makes this quite trivial by

295
00:11:10,640 --> 00:11:13,010
giving us the ability to load resources

296
00:11:13,010 --> 00:11:15,440
from any URL on the web that's kind of

297
00:11:15,440 --> 00:11:17,420
nice right so I'm gonna set a background

298
00:11:17,420 --> 00:11:20,570
image on the CSRF taken of evil comm and

299
00:11:20,570 --> 00:11:23,150
then CSRF equals zero and I'm going to

300
00:11:23,150 --> 00:11:25,280
repeat this for every single brute-force

301
00:11:25,280 --> 00:11:27,290
attack that I'm making so value equals

302
00:11:27,290 --> 00:11:29,510
zero value equals one at some point I

303
00:11:29,510 --> 00:11:31,250
will match the token and I will

304
00:11:31,250 --> 00:11:32,810
exfiltrate that token out to a

305
00:11:32,810 --> 00:11:34,700
third-party server the third party now

306
00:11:34,700 --> 00:11:37,460
has the ability to if you can fish the

307
00:11:37,460 --> 00:11:39,320
user in some way which is really trivial

308
00:11:39,320 --> 00:11:41,960
then you'll know a CSRF token you'll

309
00:11:41,960 --> 00:11:43,550
hope the user hasn't used it yet and

310
00:11:43,550 --> 00:11:46,580
you'll be able to submit something that

311
00:11:46,580 --> 00:11:48,350
actually has a fact as opposed to

312
00:11:48,350 --> 00:11:50,810
something that doesn't this was talked

313
00:11:50,810 --> 00:11:54,320
about it's way way back in 2009 it's I

314
00:11:54,320 --> 00:11:55,670
think the presentation was called the

315
00:11:55,670 --> 00:11:57,530
sexiest Assin which is a terrible name

316
00:11:57,530 --> 00:12:00,350
for it and it's just a terrible name in

317
00:12:00,350 --> 00:12:01,760
general I think they'd probably be

318
00:12:01,760 --> 00:12:04,610
embarrassed about it now but the attack

319
00:12:04,610 --> 00:12:07,060
is something like this I type yay and

320
00:12:07,060 --> 00:12:10,670
then only using CSS they're able to

321
00:12:10,670 --> 00:12:14,090
using front looking at the front looking

322
00:12:14,090 --> 00:12:15,350
at the back and then combining those

323
00:12:15,350 --> 00:12:16,630
selectors they're able to actually

324
00:12:16,630 --> 00:12:20,990
detect what the value is across origins

325
00:12:20,990 --> 00:12:25,790
which is actually kind of cool what this

326
00:12:25,790 --> 00:12:28,700
proves is that simply with CSS you're

327
00:12:28,700 --> 00:12:31,190
able to read the value of elements on a

328
00:12:31,190 --> 00:12:32,900
page and you're able to exfiltrate that

329
00:12:32,900 --> 00:12:35,180
information now this is relatively slow

330
00:12:35,180 --> 00:12:37,160
we'll look at some things later on that

331
00:12:37,160 --> 00:12:38,870
will speed it up and that will actually

332
00:12:38,870 --> 00:12:41,270
make it more practical for an attack as

333
00:12:41,270 --> 00:12:42,950
opposed to this brute force mechanism

334
00:12:42,950 --> 00:12:45,440
which is kind of impractical the point

335
00:12:45,440 --> 00:12:47,870
here is simply that execution and

336
00:12:47,870 --> 00:12:50,570
exfiltration are not only possible but

337
00:12:50,570 --> 00:12:52,640
quite plausible within the context of

338
00:12:52,640 --> 00:12:55,070
CSS i'd recommend that you take a look

339
00:12:55,070 --> 00:12:56,240
at this if you do

340
00:12:56,240 --> 00:12:58,760
I think questions source then you see

341
00:12:58,760 --> 00:13:02,600
the the PHP stuff this is relatively old

342
00:13:02,600 --> 00:13:04,280
so the codes not awesome but it's

343
00:13:04,280 --> 00:13:05,540
certainly worth looking through just to

344
00:13:05,540 --> 00:13:10,430
see how it works so continuing what if

345
00:13:10,430 --> 00:13:11,840
we wanted to steal a get parameter

346
00:13:11,840 --> 00:13:13,580
instead of looking at something on the

347
00:13:13,580 --> 00:13:14,900
page what if we wanted to look at the

348
00:13:14,900 --> 00:13:17,510
URL of the document unfortunately this

349
00:13:17,510 --> 00:13:20,090
only works in Firefox as a bug here that

350
00:13:20,090 --> 00:13:21,209
you can star if you

351
00:13:21,209 --> 00:13:23,009
to work in WebKit - I think that would

352
00:13:23,009 --> 00:13:26,999
be interesting but there is an amazing

353
00:13:26,999 --> 00:13:29,490
selector called Moz documents and Moz

354
00:13:29,490 --> 00:13:32,160
document allows you to use a reg axe to

355
00:13:32,160 --> 00:13:33,720
look at the name of the document to look

356
00:13:33,720 --> 00:13:37,350
at the actual URL and then do some sort

357
00:13:37,350 --> 00:13:39,420
of styling on the page based upon that

358
00:13:39,420 --> 00:13:41,970
URL this is really really useful for

359
00:13:41,970 --> 00:13:43,610
like user scripts people that are

360
00:13:43,610 --> 00:13:45,779
injecting some sort of code into a page

361
00:13:45,779 --> 00:13:47,279
they only want to have one style sheet

362
00:13:47,279 --> 00:13:48,689
but they want to do slightly different

363
00:13:48,689 --> 00:13:50,490
things on different pages it would also

364
00:13:50,490 --> 00:13:52,949
give you the ability to kind of a poor

365
00:13:52,949 --> 00:13:54,959
man's ability to scope style to a

366
00:13:54,959 --> 00:13:56,730
certain section of your page you include

367
00:13:56,730 --> 00:13:58,920
the same style sheet on every page in

368
00:13:58,920 --> 00:14:00,809
your in your site but you have certain

369
00:14:00,809 --> 00:14:02,009
styles that apply to your homepage

370
00:14:02,009 --> 00:14:04,199
certain styles that apply to your about

371
00:14:04,199 --> 00:14:06,209
page something along those lines there

372
00:14:06,209 --> 00:14:07,920
are some use cases for it but it gives

373
00:14:07,920 --> 00:14:09,869
us this really interesting ability to

374
00:14:09,869 --> 00:14:11,939
set up regular expressions and if we

375
00:14:11,939 --> 00:14:13,379
have regular expressions we can do

376
00:14:13,379 --> 00:14:14,850
something much more efficient than

377
00:14:14,850 --> 00:14:16,829
brute-forcing we can actually look at

378
00:14:16,829 --> 00:14:18,480
each character individually and

379
00:14:18,480 --> 00:14:20,699
determine what those characters are and

380
00:14:20,699 --> 00:14:22,249
what the position of the characters are

381
00:14:22,249 --> 00:14:26,970
so let's go whoops what is that how do I

382
00:14:26,970 --> 00:14:30,709
get back this isn't my computer help

383
00:14:30,709 --> 00:14:35,339
where do we go no really you think it's

384
00:14:35,339 --> 00:14:39,230
funny but it's not where is my Chrome

385
00:14:39,230 --> 00:14:40,679
there we go

386
00:14:40,679 --> 00:14:48,269
look at that so let's go you'd think

387
00:14:48,269 --> 00:14:50,009
working on Chrome I would actually know

388
00:14:50,009 --> 00:14:53,009
how to use Chrome unfortunately not the

389
00:14:53,009 --> 00:14:54,480
case I just write code I don't actually

390
00:14:54,480 --> 00:14:56,369
know anything about how this works so

391
00:14:56,369 --> 00:14:59,670
we're on a web site we'll do we'll grab

392
00:14:59,670 --> 00:15:01,499
a PHP session ID which is relatively

393
00:15:01,499 --> 00:15:02,790
common it's much more common than it

394
00:15:02,790 --> 00:15:05,369
should be basically every templating

395
00:15:05,369 --> 00:15:06,839
language will have a session ID of some

396
00:15:06,839 --> 00:15:07,920
sort because some people turn off

397
00:15:07,920 --> 00:15:11,100
cookies so if we get a session ID

398
00:15:11,100 --> 00:15:13,230
nothing actually happened that I saw

399
00:15:13,230 --> 00:15:14,970
nothing happened on this page so of

400
00:15:14,970 --> 00:15:17,490
course I'm perfectly safe unfortunately

401
00:15:17,490 --> 00:15:18,869
that's not the case so if we go into the

402
00:15:18,869 --> 00:15:23,819
network and then reload the page oh ha

403
00:15:23,819 --> 00:15:23,999
ha

404
00:15:23,999 --> 00:15:27,689
I need Firefox is there Firefox on this

405
00:15:27,689 --> 00:15:29,390
machine is

406
00:15:29,390 --> 00:15:32,329
that's awesome where'd my firefox go oh

407
00:15:32,329 --> 00:15:34,070
look at that oh this is gonna be great

408
00:15:34,070 --> 00:15:40,970
I need my net so it'd be really nice the

409
00:15:40,970 --> 00:15:42,680
Firebug stayed open when I navigated

410
00:15:42,680 --> 00:15:47,570
between origins so I'm a net let's

411
00:15:47,570 --> 00:15:53,000
reload and I'm filtered to CSS there we

412
00:15:53,000 --> 00:15:55,730
go so what we see here is that it's

413
00:15:55,730 --> 00:15:58,339
actually able to read each character and

414
00:15:58,339 --> 00:16:00,649
exfiltrate both the character and the

415
00:16:00,649 --> 00:16:03,140
position to a third-party server so all

416
00:16:03,140 --> 00:16:05,839
evil comm has to do is look at its logs

417
00:16:05,839 --> 00:16:07,880
and it now has a session ID for a user

418
00:16:07,880 --> 00:16:10,339
if the user has been to evil calm before

419
00:16:10,339 --> 00:16:13,100
it also has a cookie so it's able to not

420
00:16:13,100 --> 00:16:15,560
only identify the user but also get a

421
00:16:15,560 --> 00:16:17,180
session ID which means I can just go

422
00:16:17,180 --> 00:16:18,800
back to this website use that as my

423
00:16:18,800 --> 00:16:20,480
session ID and for all intents and

424
00:16:20,480 --> 00:16:22,820
purposes I am this user it's a kind of

425
00:16:22,820 --> 00:16:24,740
interesting attack vector again it only

426
00:16:24,740 --> 00:16:27,589
works in Firefox but in Germany a lot of

427
00:16:27,589 --> 00:16:29,630
people use Firefox so it's kind of an

428
00:16:29,630 --> 00:16:34,130
interesting thing to do here there are

429
00:16:34,130 --> 00:16:40,399
other browsers it's all insane so we've

430
00:16:40,399 --> 00:16:42,560
looked at CSRF tokens we've looked at

431
00:16:42,560 --> 00:16:44,269
the get string and be really nice

432
00:16:44,269 --> 00:16:46,149
actually if we could just steal any

433
00:16:46,149 --> 00:16:48,800
arbitrary attribute on a page that'd be

434
00:16:48,800 --> 00:16:50,209
kind of useful right because a lot of

435
00:16:50,209 --> 00:16:52,279
pages especially in this brave new world

436
00:16:52,279 --> 00:16:55,010
of single page applications are starting

437
00:16:55,010 --> 00:16:57,230
the store things in attributes that are

438
00:16:57,230 --> 00:16:58,699
really quite interesting for us so

439
00:16:58,699 --> 00:17:00,860
templates did sort of data binding stuff

440
00:17:00,860 --> 00:17:02,060
that's going on with angular and a

441
00:17:02,060 --> 00:17:03,980
variety of other languages start storing

442
00:17:03,980 --> 00:17:05,360
much more interesting things and

443
00:17:05,360 --> 00:17:07,280
attributes than they used to and because

444
00:17:07,280 --> 00:17:09,410
of that it gives us actually a really

445
00:17:09,410 --> 00:17:11,120
interesting opportunity to start taking

446
00:17:11,120 --> 00:17:12,860
more useful information than we were

447
00:17:12,860 --> 00:17:15,500
able to get to before now this I don't

448
00:17:15,500 --> 00:17:17,299
have any demo code for and set them just

449
00:17:17,299 --> 00:17:19,040
I don't have any code to show you in

450
00:17:19,040 --> 00:17:20,209
this presentation I'm just gonna show

451
00:17:20,209 --> 00:17:22,250
you a quick demo so this is a proof of

452
00:17:22,250 --> 00:17:25,000
concept and what this is going to do is

453
00:17:25,000 --> 00:17:27,919
steal some information on these links so

454
00:17:27,919 --> 00:17:30,770
let's say that we're in a a popular

455
00:17:30,770 --> 00:17:33,620
bulletin board program that doesn't use

456
00:17:33,620 --> 00:17:36,830
posts for its for its admin but instead

457
00:17:36,830 --> 00:17:38,840
just says delete user and then has a

458
00:17:38,840 --> 00:17:40,790
secret attached to that so as a get

459
00:17:40,790 --> 00:17:43,310
parameter which is actually kind

460
00:17:43,310 --> 00:17:45,770
common and now I'm back over here why is

461
00:17:45,770 --> 00:17:48,770
that my antivirus is expired what's up

462
00:17:48,770 --> 00:17:50,870
with that that's craziness don't have an

463
00:17:50,870 --> 00:17:54,920
antivirus this is a Mac so if I reload

464
00:17:54,920 --> 00:17:55,820
this page you'll see something

465
00:17:55,820 --> 00:17:57,770
interesting happen right there's an

466
00:17:57,770 --> 00:17:59,240
animation going on at the top and you

467
00:17:59,240 --> 00:18:01,310
see some red stuff pop up and then go

468
00:18:01,310 --> 00:18:03,800
away that's kind of interesting red

469
00:18:03,800 --> 00:18:05,810
stuff popping up and going what could

470
00:18:05,810 --> 00:18:08,270
that possibly be if we look at the net

471
00:18:08,270 --> 00:18:10,760
tag then we'll see actually that what's

472
00:18:10,760 --> 00:18:12,980
happening is the requests are somehow

473
00:18:12,980 --> 00:18:15,610
being made and these requests are

474
00:18:15,610 --> 00:18:19,250
exporting or exfiltrating information

475
00:18:19,250 --> 00:18:21,200
about something that's contained in this

476
00:18:21,200 --> 00:18:22,670
link how could this possibly be

477
00:18:22,670 --> 00:18:25,670
happening the animation is used to

478
00:18:25,670 --> 00:18:28,520
measure the width of an object why is

479
00:18:28,520 --> 00:18:30,890
that important well it's important if we

480
00:18:30,890 --> 00:18:34,070
construct a specially crafted font that

481
00:18:34,070 --> 00:18:37,760
only has width for one character so T

482
00:18:37,760 --> 00:18:39,440
has width but no other character has

483
00:18:39,440 --> 00:18:42,650
width this allows me to measure the

484
00:18:42,650 --> 00:18:45,770
width of an element with a with an

485
00:18:45,770 --> 00:18:47,330
animation that says you know go down to

486
00:18:47,330 --> 00:18:49,460
the right size and then come back I

487
00:18:49,460 --> 00:18:51,560
measure the width by looking for the

488
00:18:51,560 --> 00:18:54,080
presence of a scrollbar I can detect the

489
00:18:54,080 --> 00:18:57,200
scrollbar because WebKit for amazing

490
00:18:57,200 --> 00:18:59,210
reasons has a lot of scrollbar

491
00:18:59,210 --> 00:19:01,790
properties and in this case WebKit

492
00:19:01,790 --> 00:19:03,680
scrollbar track piece vertical

493
00:19:03,680 --> 00:19:07,850
increments only loads when the scrollbar

494
00:19:07,850 --> 00:19:10,280
appears most scrollbar attributes

495
00:19:10,280 --> 00:19:12,020
actually load at page load which isn't

496
00:19:12,020 --> 00:19:13,570
very useful for data extract

497
00:19:13,570 --> 00:19:17,030
expectations but if we look only for

498
00:19:17,030 --> 00:19:19,040
those specific properties that only load

499
00:19:19,040 --> 00:19:21,710
data or only load resources when the

500
00:19:21,710 --> 00:19:23,690
scrollbar pops up then we can measure

501
00:19:23,690 --> 00:19:25,730
the width of an element's and then tell

502
00:19:25,730 --> 00:19:27,860
an external server that this element was

503
00:19:27,860 --> 00:19:29,540
this wide at some point which means

504
00:19:29,540 --> 00:19:31,880
something in this case it means that it

505
00:19:31,880 --> 00:19:34,220
contains an S or it contains a T this

506
00:19:34,220 --> 00:19:35,450
gives us the information that we would

507
00:19:35,450 --> 00:19:37,100
then need to more efficiently

508
00:19:37,100 --> 00:19:38,480
brute-force a password or more

509
00:19:38,480 --> 00:19:41,420
efficiently brute-force a took a token

510
00:19:41,420 --> 00:19:43,580
of some sort you can actually make this

511
00:19:43,580 --> 00:19:48,290
much more efficient by using contextual

512
00:19:48,290 --> 00:19:51,170
alternatives in wofe contextual

513
00:19:51,170 --> 00:19:52,970
alternatives are amazing they're really

514
00:19:52,970 --> 00:19:55,310
very useful so if you look at this I

515
00:19:55,310 --> 00:19:56,840
need to go back into full screen

516
00:19:56,840 --> 00:19:58,909
if you look at this you'll see that the

517
00:19:58,909 --> 00:20:01,129
text on the page is dear mom keep your

518
00:20:01,129 --> 00:20:03,080
plates clean this time I will cook for

519
00:20:03,080 --> 00:20:05,029
us this Sunday at 3:00 so it's a very

520
00:20:05,029 --> 00:20:06,590
beautiful letter from a child to a

521
00:20:06,590 --> 00:20:08,809
parent and we see that it's been made

522
00:20:08,809 --> 00:20:10,669
even more beautiful by the presence of a

523
00:20:10,669 --> 00:20:12,919
Waffen that says every time you see the

524
00:20:12,919 --> 00:20:16,519
four characters de AR replace them with

525
00:20:16,519 --> 00:20:18,409
a picture of a deer because a picture of

526
00:20:18,409 --> 00:20:20,120
a deer is loveable and happy and makes

527
00:20:20,120 --> 00:20:22,580
everyone just thrilled to get a letter

528
00:20:22,580 --> 00:20:25,370
like this what it also does is allow us

529
00:20:25,370 --> 00:20:28,249
to change the width of particular

530
00:20:28,249 --> 00:20:30,740
strings of characters what this allows

531
00:20:30,740 --> 00:20:32,869
us to do is to build a font that can be

532
00:20:32,869 --> 00:20:34,059
used to attack people

533
00:20:34,059 --> 00:20:36,679
you've heard of dictionary attacks we

534
00:20:36,679 --> 00:20:38,840
can build a dictionary font so all the

535
00:20:38,840 --> 00:20:41,330
most common passwords can each have the

536
00:20:41,330 --> 00:20:42,799
first password can be one pixel the

537
00:20:42,799 --> 00:20:44,389
second password can be two pixels the

538
00:20:44,389 --> 00:20:45,919
next password can be four pixels and so

539
00:20:45,919 --> 00:20:49,789
on we can use this information and then

540
00:20:49,789 --> 00:20:53,690
using I'm sorry I missed something

541
00:20:53,690 --> 00:20:55,159
the thing that's important that I forgot

542
00:20:55,159 --> 00:20:58,220
to say is that you bring the data out

543
00:20:58,220 --> 00:21:00,799
from the attribute by using a pseudo

544
00:21:00,799 --> 00:21:04,730
element so you do like a after and then

545
00:21:04,730 --> 00:21:08,210
in the after you use content and content

546
00:21:08,210 --> 00:21:11,240
is a troop of href so you pull the

547
00:21:11,240 --> 00:21:13,159
attribute you put it into the dom

548
00:21:13,159 --> 00:21:14,720
somewhere where it can be measured and

549
00:21:14,720 --> 00:21:16,549
then you measure it you saw that it was

550
00:21:16,549 --> 00:21:18,139
like a five second animation you don't

551
00:21:18,139 --> 00:21:19,309
have to wait five seconds you can

552
00:21:19,309 --> 00:21:20,509
actually do it much more much more

553
00:21:20,509 --> 00:21:22,129
quickly and this allows you to do it

554
00:21:22,129 --> 00:21:23,659
even more quickly still because instead

555
00:21:23,659 --> 00:21:25,399
of evaluating each character

556
00:21:25,399 --> 00:21:26,539
individually and instead of having

557
00:21:26,539 --> 00:21:29,570
defined twenty six different occurrences

558
00:21:29,570 --> 00:21:31,669
on a page you can hopefully have one

559
00:21:31,669 --> 00:21:33,110
occurrence and then look for the

560
00:21:33,110 --> 00:21:36,080
particular word in order to determine

561
00:21:36,080 --> 00:21:38,779
which of these things matches its and

562
00:21:38,779 --> 00:21:40,220
I'm really excited about the potential

563
00:21:40,220 --> 00:21:41,929
for media queries on elements because

564
00:21:41,929 --> 00:21:42,980
that's gonna make something like this

565
00:21:42,980 --> 00:21:44,450
even more valuable because you'll

566
00:21:44,450 --> 00:21:45,559
actually be able to determine exactly

567
00:21:45,559 --> 00:21:47,929
how wide an element is with pixel

568
00:21:47,929 --> 00:21:50,149
precision with an animation you actually

569
00:21:50,149 --> 00:21:51,499
have to do a timing attack you have to

570
00:21:51,499 --> 00:21:54,019
look at the start of the page load so

571
00:21:54,019 --> 00:21:55,549
you send some sort of information to the

572
00:21:55,549 --> 00:21:57,529
server and then you animate and then

573
00:21:57,529 --> 00:21:59,240
based upon how long it took you can

574
00:21:59,240 --> 00:22:00,649
start guessing at which password it

575
00:22:00,649 --> 00:22:04,309
might have been it's less useful than it

576
00:22:04,309 --> 00:22:05,779
would be if we were able to pixel

577
00:22:05,779 --> 00:22:07,580
perfectly measure each elements on the

578
00:22:07,580 --> 00:22:09,980
page using a media query if we can start

579
00:22:09,980 --> 00:22:10,340
doing

580
00:22:10,340 --> 00:22:11,900
and I'm actually quite excited about the

581
00:22:11,900 --> 00:22:14,930
potential for not only web components

582
00:22:14,930 --> 00:22:16,550
but also attackers because that's gonna

583
00:22:16,550 --> 00:22:19,130
be fun so anyway at the point here is

584
00:22:19,130 --> 00:22:21,320
that by using a couple of different

585
00:22:21,320 --> 00:22:23,570
properties of CSS you can exfiltrate

586
00:22:23,570 --> 00:22:25,640
data that you really didn't expect to be

587
00:22:25,640 --> 00:22:28,010
able to exfiltrate a dictionary fonts of

588
00:22:28,010 --> 00:22:30,140
about a hundred thousand entries is less

589
00:22:30,140 --> 00:22:30,710
than a Meg

590
00:22:30,710 --> 00:22:33,080
so users especially if you look at

591
00:22:33,080 --> 00:22:34,820
websites these days if you look at like

592
00:22:34,820 --> 00:22:37,370
the iPhone 5s website it's like 17 or 18

593
00:22:37,370 --> 00:22:39,410
Meg for the entire site which is kind of

594
00:22:39,410 --> 00:22:40,910
ridiculous and in that context

595
00:22:40,910 --> 00:22:43,910
downloading a Meg for a font is not even

596
00:22:43,910 --> 00:22:48,050
gonna notice it's kind of cool again I

597
00:22:48,050 --> 00:22:49,160
would recommend you look at those two

598
00:22:49,160 --> 00:22:50,930
papers that I pointed out at the

599
00:22:50,930 --> 00:22:52,820
beginning they go into a lot more detail

600
00:22:52,820 --> 00:22:55,280
about the practical application of these

601
00:22:55,280 --> 00:22:57,020
sorts of attacks what I want to do here

602
00:22:57,020 --> 00:22:59,180
is just give you give you a flavor for

603
00:22:59,180 --> 00:23:01,340
what can go on and what I'd like to do

604
00:23:01,340 --> 00:23:03,590
now is tell you how you can actually

605
00:23:03,590 --> 00:23:05,870
defend yourself against these sorts of

606
00:23:05,870 --> 00:23:08,360
attacks the main problem that we talked

607
00:23:08,360 --> 00:23:09,590
about it the main problem that I

608
00:23:09,590 --> 00:23:12,020
expressed is that the browser executes

609
00:23:12,020 --> 00:23:14,390
all the code that it sees and it

610
00:23:14,390 --> 00:23:16,910
executes all that code in the context of

611
00:23:16,910 --> 00:23:18,800
your origin which means in the case of

612
00:23:18,800 --> 00:23:21,410
CSS but it has Dom access it can read

613
00:23:21,410 --> 00:23:23,030
things from the DOM and can exfiltrate

614
00:23:23,030 --> 00:23:25,760
data to third parties does anyone know

615
00:23:25,760 --> 00:23:26,980
what this picture is

616
00:23:26,980 --> 00:23:29,660
this painting okay a couple of people

617
00:23:29,660 --> 00:23:31,640
this painting is Odysseus and the sirens

618
00:23:31,640 --> 00:23:33,590
I think it's a really interesting story

619
00:23:33,590 --> 00:23:35,090
and I think it's a metaphor that's going

620
00:23:35,090 --> 00:23:37,340
to be a very applicable at a moment so

621
00:23:37,340 --> 00:23:41,780
the sirens they sing beautifully so

622
00:23:41,780 --> 00:23:43,850
beautifully in fact that it drives men

623
00:23:43,850 --> 00:23:45,230
to the point of madness

624
00:23:45,230 --> 00:23:47,720
especially sailors sailors are kind of

625
00:23:47,720 --> 00:23:49,340
crazy anyway but with sirens they're

626
00:23:49,340 --> 00:23:51,680
even more crazy and because of that they

627
00:23:51,680 --> 00:23:53,510
just want to be mere near the music they

628
00:23:53,510 --> 00:23:55,370
want to hear more music and they just

629
00:23:55,370 --> 00:23:57,140
throw themselves overboard in order to

630
00:23:57,140 --> 00:23:59,330
get closer to the music to hear more of

631
00:23:59,330 --> 00:24:01,370
it throwing yourself overboard is not a

632
00:24:01,370 --> 00:24:03,320
great way to steer a ship so Apes

633
00:24:03,320 --> 00:24:05,120
usually then crash into the island where

634
00:24:05,120 --> 00:24:06,830
the sirens live and I guess I don't know

635
00:24:06,830 --> 00:24:11,620
they eat people who knows Odysseus is in

636
00:24:11,620 --> 00:24:16,540
ego maniac and he is amazingly hubristic

637
00:24:16,540 --> 00:24:19,430
because of this he wants to be the only

638
00:24:19,430 --> 00:24:21,710
living person to have heard the song of

639
00:24:21,710 --> 00:24:23,389
the sirens and survived he wants to

640
00:24:23,389 --> 00:24:25,070
here this beautiful music but he doesn't

641
00:24:25,070 --> 00:24:26,299
want to throw himself overboard that's

642
00:24:26,299 --> 00:24:30,049
counterproductive in a deep way so what

643
00:24:30,049 --> 00:24:32,779
does he do he tells his men to tie him

644
00:24:32,779 --> 00:24:34,759
to the mast it ties hands behind his

645
00:24:34,759 --> 00:24:37,429
back they bind his legs tightly which

646
00:24:37,429 --> 00:24:38,749
means he can't get away can't do

647
00:24:38,749 --> 00:24:41,299
anything then he instruct his men to put

648
00:24:41,299 --> 00:24:43,129
beeswax in their ears and so you know

649
00:24:43,129 --> 00:24:44,659
wrap things around their head is kind of

650
00:24:44,659 --> 00:24:47,450
earphones or earplugs of some sort then

651
00:24:47,450 --> 00:24:49,759
he tells his men okay row past the

652
00:24:49,759 --> 00:24:51,619
island where they where the sirens are

653
00:24:51,619 --> 00:24:53,599
don't go to the islands just you know

654
00:24:53,599 --> 00:24:56,269
keep rowing ignore anything you see and

655
00:24:56,269 --> 00:24:57,919
just you know get me past this island

656
00:24:57,919 --> 00:25:00,259
the sirens come they sing their

657
00:25:00,259 --> 00:25:02,570
beautiful songs Odysseus is driven to

658
00:25:02,570 --> 00:25:05,149
the brink of madness but he doesn't

659
00:25:05,149 --> 00:25:07,639
throw himself overboard he can't he's

660
00:25:07,639 --> 00:25:10,219
bound from doing so and his men they

661
00:25:10,219 --> 00:25:11,629
don't care about the sirens because they

662
00:25:11,629 --> 00:25:13,009
have got stuff in their ears they're you

663
00:25:13,009 --> 00:25:14,419
know humming to themselves who knows

664
00:25:14,419 --> 00:25:16,489
they row him past the island he's able

665
00:25:16,489 --> 00:25:18,139
to listen to this beautiful music but

666
00:25:18,139 --> 00:25:19,729
he's able to survive while doing so

667
00:25:19,729 --> 00:25:21,919
because he's given his men explicit

668
00:25:21,919 --> 00:25:23,989
instructions and then he's prevented

669
00:25:23,989 --> 00:25:25,879
them from doing things counter the to

670
00:25:25,879 --> 00:25:27,799
these instructions it'd be really nice

671
00:25:27,799 --> 00:25:29,089
if we had a mechanism to tell the

672
00:25:29,089 --> 00:25:31,609
browser to only load the things that we

673
00:25:31,609 --> 00:25:33,529
want it to load to only load our style

674
00:25:33,529 --> 00:25:36,379
and not style from somewhere else we can

675
00:25:36,379 --> 00:25:38,450
do this can do this with something

676
00:25:38,450 --> 00:25:41,809
called content security policy condon

677
00:25:41,809 --> 00:25:44,269
security policy is a whitelisting

678
00:25:44,269 --> 00:25:47,059
mechanism that allows us to say script

679
00:25:47,059 --> 00:25:49,159
from the source style from the source

680
00:25:49,159 --> 00:25:51,829
but from no other sources please I want

681
00:25:51,829 --> 00:25:53,989
only the things that I specifically have

682
00:25:53,989 --> 00:25:56,299
told you that I trust here's some

683
00:25:56,299 --> 00:25:58,940
information about my trust now execute

684
00:25:58,940 --> 00:26:01,609
that within the context of a page I edit

685
00:26:01,609 --> 00:26:03,919
the spec along with Adam Barth from

686
00:26:03,919 --> 00:26:05,539
Google and Dan Bennett's from Mozilla

687
00:26:05,539 --> 00:26:07,789
they are both very smart they tell me

688
00:26:07,789 --> 00:26:09,919
what to type and I type it it works out

689
00:26:09,919 --> 00:26:13,249
it's a beautiful relationship this is

690
00:26:13,249 --> 00:26:15,529
the content security policy for a really

691
00:26:15,529 --> 00:26:17,929
high value site my quest org you may

692
00:26:17,929 --> 00:26:19,989
have heard of it it's really amazing

693
00:26:19,989 --> 00:26:22,190
content security policy is best

694
00:26:22,190 --> 00:26:24,769
delivered as an HTTP header the name of

695
00:26:24,769 --> 00:26:26,450
the header is content - security -

696
00:26:26,450 --> 00:26:28,389
policy and then you see a lot of

697
00:26:28,389 --> 00:26:31,219
semicolon delimited directives each of

698
00:26:31,219 --> 00:26:33,529
these directives controls a certain type

699
00:26:33,529 --> 00:26:36,169
of content on a page we start by setting

700
00:26:36,169 --> 00:26:37,250
a default source of

701
00:26:37,250 --> 00:26:39,140
so we say no content should load just

702
00:26:39,140 --> 00:26:41,090
don't load anything and then we slowly

703
00:26:41,090 --> 00:26:42,830
open that up we say okay you can load

704
00:26:42,830 --> 00:26:44,900
style from here you can load frames from

705
00:26:44,900 --> 00:26:47,179
here you can load script from here this

706
00:26:47,179 --> 00:26:49,429
gives you the very granular ability to

707
00:26:49,429 --> 00:26:52,159
say origin one is something that I trust

708
00:26:52,159 --> 00:26:53,659
that's my content delivery network

709
00:26:53,659 --> 00:26:56,360
please load script from there if however

710
00:26:56,360 --> 00:26:58,789
you see script from somewhere else don't

711
00:26:58,789 --> 00:27:00,919
load it in fact through some sort of

712
00:27:00,919 --> 00:27:04,429
interesting error like this refuse to

713
00:27:04,429 --> 00:27:05,960
execute inline script because it

714
00:27:05,960 --> 00:27:07,309
violates the following content security

715
00:27:07,309 --> 00:27:09,890
directive those are excellent errors to

716
00:27:09,890 --> 00:27:13,730
see this is a more or less exhaustive

717
00:27:13,730 --> 00:27:15,409
list of the directives that exist in

718
00:27:15,409 --> 00:27:18,289
content security policy 1.0 content

719
00:27:18,289 --> 00:27:20,390
security policy 1.0 is available now in

720
00:27:20,390 --> 00:27:22,370
Chrome as an unprefixed header it's

721
00:27:22,370 --> 00:27:24,409
available now in Firefox also is an

722
00:27:24,409 --> 00:27:26,870
unprefixed header I expect it will be

723
00:27:26,870 --> 00:27:28,610
available in Safari 7 as an unprefixed

724
00:27:28,610 --> 00:27:30,230
header because I landed that before we

725
00:27:30,230 --> 00:27:33,440
forked and what's really interesting

726
00:27:33,440 --> 00:27:36,220
here is the last directive report URI

727
00:27:36,220 --> 00:27:38,809
report URI gives you a mechanism of

728
00:27:38,809 --> 00:27:41,030
actually seeing attacks that are going

729
00:27:41,030 --> 00:27:43,370
on so instead of just showing it to the

730
00:27:43,370 --> 00:27:45,559
developer right at their workstation you

731
00:27:45,559 --> 00:27:47,480
can actually post a message to your

732
00:27:47,480 --> 00:27:49,700
server saying hey I tried to load some

733
00:27:49,700 --> 00:27:52,130
information I failed miserably perhaps

734
00:27:52,130 --> 00:27:53,299
you should look at that perhaps you

735
00:27:53,299 --> 00:27:54,919
should take a look at this area and see

736
00:27:54,919 --> 00:27:56,120
if maybe there's an injection that

737
00:27:56,120 --> 00:27:58,640
you've missed this is what the report

738
00:27:58,640 --> 00:28:00,440
looks like it gives you some context if

739
00:28:00,440 --> 00:28:01,909
it comes from JavaScript we'll do our

740
00:28:01,909 --> 00:28:03,440
best to give you like a line number and

741
00:28:03,440 --> 00:28:07,280
a column inline script this is the last

742
00:28:07,280 --> 00:28:08,809
thing I'll talk about inline script is

743
00:28:08,809 --> 00:28:12,500
the biggest problem on the web in this

744
00:28:12,500 --> 00:28:14,090
case I would say inline style is the

745
00:28:14,090 --> 00:28:17,150
biggest problem on the web what do we do

746
00:28:17,150 --> 00:28:18,980
with that it doesn't really come from an

747
00:28:18,980 --> 00:28:20,870
origin right it's embedded directly in

748
00:28:20,870 --> 00:28:23,659
the page what I would suggest is that

749
00:28:23,659 --> 00:28:25,909
you externalize this information you put

750
00:28:25,909 --> 00:28:27,710
it into an external javascript file you

751
00:28:27,710 --> 00:28:29,270
do some Dom manipulation in order to set

752
00:28:29,270 --> 00:28:30,799
up your event handlers or in the case of

753
00:28:30,799 --> 00:28:32,870
CSS you simply load the style from

754
00:28:32,870 --> 00:28:34,700
somewhere else then it has an explicit

755
00:28:34,700 --> 00:28:37,640
origin we're able to vary in a granular

756
00:28:37,640 --> 00:28:39,770
way determine whether or not we should

757
00:28:39,770 --> 00:28:41,690
load it and the browser can do something

758
00:28:41,690 --> 00:28:42,700
interesting based on that information

759
00:28:42,700 --> 00:28:44,990
this is the only thing I want you to

760
00:28:44,990 --> 00:28:46,850
remember from the talk this is the most

761
00:28:46,850 --> 00:28:48,280
important thing I will show you today

762
00:28:48,280 --> 00:28:50,960
it's an article written by an amazingly

763
00:28:50,960 --> 00:28:53,240
some man and this article will give you

764
00:28:53,240 --> 00:28:55,250
all the practical detail that you need

765
00:28:55,250 --> 00:28:57,350
in order to take content security policy

766
00:28:57,350 --> 00:28:59,240
and start actually applying it to your

767
00:28:59,240 --> 00:29:00,919
pages it'll give you all the details

768
00:29:00,919 --> 00:29:02,510
about all the stuff that's in one point

769
00:29:02,510 --> 00:29:04,130
oh I need to update it from one point

770
00:29:04,130 --> 00:29:06,200
one that hasn't quite happened yet one

771
00:29:06,200 --> 00:29:07,779
point one is still kind of in

772
00:29:07,779 --> 00:29:09,590
specification so there's a lot of new

773
00:29:09,590 --> 00:29:10,669
stuff there's a lot of really

774
00:29:10,669 --> 00:29:12,740
interesting stuff please at least

775
00:29:12,740 --> 00:29:14,330
bookmark this article and tell somebody

776
00:29:14,330 --> 00:29:15,590
else about it even if you don't read it

777
00:29:15,590 --> 00:29:17,690
yourself I would really like to hear

778
00:29:17,690 --> 00:29:20,659
from you guys what sorts of things you

779
00:29:20,659 --> 00:29:22,460
see applications for with regard to

780
00:29:22,460 --> 00:29:24,110
common security policy and any problems

781
00:29:24,110 --> 00:29:25,820
that you see actually implementing on

782
00:29:25,820 --> 00:29:28,520
your sites and with that I would say

783
00:29:28,520 --> 00:29:44,649
thank you

