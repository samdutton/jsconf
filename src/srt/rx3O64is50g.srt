1
00:00:38,539 --> 00:00:41,760

everybody my name is Kevin I work for a

2
00:00:41,760 --> 00:00:44,940
outfit called Twilio and if you haven't

3
00:00:44,940 --> 00:00:46,109
had a chance to use Tullio before it

4
00:00:46,109 --> 00:00:47,879
lets you do cool stuff like make and

5
00:00:47,879 --> 00:00:49,859
receive phone calls send and receive

6
00:00:49,859 --> 00:00:52,739
text or picture messages and I enabled

7
00:00:52,739 --> 00:00:54,780
what calling in your desktop browsers or

8
00:00:54,780 --> 00:00:57,390
mobile apps and also I actually wrote

9
00:00:57,390 --> 00:00:59,249
the note module for Twilio and I think

10
00:00:59,249 --> 00:01:00,420
I'm actually gonna add a high-level

11
00:01:00,420 --> 00:01:02,460
helper that is a one liner so that

12
00:01:02,460 --> 00:01:05,370
Angelina Fabio brings you brings you

13
00:01:05,370 --> 00:01:07,500
tacos as you saw in one of the last

14
00:01:07,500 --> 00:01:09,570
talks so that was pretty awesome

15
00:01:09,570 --> 00:01:12,600
great use of Tullio and if you think any

16
00:01:12,600 --> 00:01:13,500
of that stuff might be fun to play

17
00:01:13,500 --> 00:01:15,329
around with I just go ahead and NPM

18
00:01:15,329 --> 00:01:17,880
install Tulio but that's not what I'm

19
00:01:17,880 --> 00:01:19,680
here to talk about today I'd like to

20
00:01:19,680 --> 00:01:21,329
talk a little bit about again one of my

21
00:01:21,329 --> 00:01:23,219
favorite tools for use with node.js

22
00:01:23,219 --> 00:01:25,590
which is browserify and for me it's

23
00:01:25,590 --> 00:01:27,240
actually sort of the key tool which

24
00:01:27,240 --> 00:01:29,789
unlocks the promise of node to allow you

25
00:01:29,789 --> 00:01:32,009
to share code between the client and the

26
00:01:32,009 --> 00:01:34,649
server side and it's also really useful

27
00:01:34,649 --> 00:01:37,590
even beyond the browser really a browser

28
00:01:37,590 --> 00:01:40,079
if I house you to do is to package up

29
00:01:40,079 --> 00:01:43,289
the node.js module system and basically

30
00:01:43,289 --> 00:01:45,240
create a single javascript file that you

31
00:01:45,240 --> 00:01:46,890
can evaluate in any JavaScript

32
00:01:46,890 --> 00:01:48,630
environment but lets you write your

33
00:01:48,630 --> 00:01:50,100
javascript in such a way where you can

34
00:01:50,100 --> 00:01:53,520
you know structure your code in as no

35
00:01:53,520 --> 00:01:56,369
jazz style common J's modules so it's

36
00:01:56,369 --> 00:01:58,289
really cool if you haven't used it

37
00:01:58,289 --> 00:01:59,909
before I definitely encourage you to do

38
00:01:59,909 --> 00:02:03,060
so because it allows you to start to

39
00:02:03,060 --> 00:02:05,640
share culture if you will with both

40
00:02:05,640 --> 00:02:07,289
declined in the server side in your

41
00:02:07,289 --> 00:02:10,200
JavaScript code on just having the same

42
00:02:10,200 --> 00:02:11,790
language on both ends of the wire is

43
00:02:11,790 --> 00:02:14,670
pretty cool but if you actually want to

44
00:02:14,670 --> 00:02:15,330
reuse

45
00:02:15,330 --> 00:02:17,100
it should be written in the same style

46
00:02:17,100 --> 00:02:19,370
and kind of live in the same ecosystem

47
00:02:19,370 --> 00:02:23,190
as you know it has one another so that's

48
00:02:23,190 --> 00:02:24,960
why I think browser if I really enables

49
00:02:24,960 --> 00:02:26,970
a lot of the really cool stuff that we

50
00:02:26,970 --> 00:02:28,920
sort of are hoping to realize with

51
00:02:28,920 --> 00:02:33,060
nodejs so I if you are writing a node.js

52
00:02:33,060 --> 00:02:35,520
module today that you're supporting out

53
00:02:35,520 --> 00:02:38,430
on NPM a lot of modules with browserify

54
00:02:38,430 --> 00:02:40,620
today will just work so it could be that

55
00:02:40,620 --> 00:02:42,930
you have no work to do to make your

56
00:02:42,930 --> 00:02:46,140
mount module browser a file but you

57
00:02:46,140 --> 00:02:47,550
might want to do a little bit of extra

58
00:02:47,550 --> 00:02:49,710
work if your module meets one of these

59
00:02:49,710 --> 00:02:52,440
two criteria so if your if the

60
00:02:52,440 --> 00:02:53,730
functionality that you're shipping in

61
00:02:53,730 --> 00:02:55,620
your module has sort of complimentary ap

62
00:02:55,620 --> 00:02:57,240
is that you can they're slightly

63
00:02:57,240 --> 00:02:58,530
different that you can use both on the

64
00:02:58,530 --> 00:03:00,630
client and the server side one example

65
00:03:00,630 --> 00:03:03,510
would be the ws module the web socket a

66
00:03:03,510 --> 00:03:06,420
popular web socket library for node in

67
00:03:06,420 --> 00:03:08,700
the browser when you require it it gives

68
00:03:08,700 --> 00:03:11,160
you a cross platform or a you know a

69
00:03:11,160 --> 00:03:13,290
browser specific version of the web

70
00:03:13,290 --> 00:03:15,840
socket implementation that exists on

71
00:03:15,840 --> 00:03:18,120
that browser and and then on the server

72
00:03:18,120 --> 00:03:20,280
side it gives you a WebSocket server

73
00:03:20,280 --> 00:03:23,220
that you can then use so if your module

74
00:03:23,220 --> 00:03:26,190
sort of could benefit from having sort

75
00:03:26,190 --> 00:03:30,060
of nice nice interfaces that are that

76
00:03:30,060 --> 00:03:31,590
are connected on both the client and the

77
00:03:31,590 --> 00:03:33,750
server then you probably won't want to

78
00:03:33,750 --> 00:03:35,010
look at some of the more advanced

79
00:03:35,010 --> 00:03:38,280
features of browser five also sometimes

80
00:03:38,280 --> 00:03:39,840
your module isn't just going to work so

81
00:03:39,840 --> 00:03:42,510
if your module does any kind of a file

82
00:03:42,510 --> 00:03:43,709
system i/o or something along those

83
00:03:43,709 --> 00:03:45,720
lines obviously that's not going to work

84
00:03:45,720 --> 00:03:48,600
a node or excuse me with browserify but

85
00:03:48,600 --> 00:03:50,610
basra fidos provide shims for most of

86
00:03:50,610 --> 00:03:54,390
nodes core libraries so a lot of the NPM

87
00:03:54,390 --> 00:03:56,070
universe just kind of works today so

88
00:03:56,070 --> 00:03:58,530
your module might be one of them if not

89
00:03:58,530 --> 00:04:00,450
I would definitely recommend you know

90
00:04:00,450 --> 00:04:01,830
taking a look at how you can make it

91
00:04:01,830 --> 00:04:04,230
browserify compatible if that if that

92
00:04:04,230 --> 00:04:04,739
makes sense

93
00:04:04,739 --> 00:04:06,600
because a lot of folks are sort of

94
00:04:06,600 --> 00:04:08,970
moving to browserify as an alternative

95
00:04:08,970 --> 00:04:10,170
to some of the asynchronous module

96
00:04:10,170 --> 00:04:12,510
loaders that are purely sort of live in

97
00:04:12,510 --> 00:04:13,200
the browser

98
00:04:13,200 --> 00:04:16,380
- again - to realize that promise of

99
00:04:16,380 --> 00:04:18,390
having the same styled code exists both

100
00:04:18,390 --> 00:04:22,290
in node and client-side code so there's

101
00:04:22,290 --> 00:04:24,930
basically if you want to design a module

102
00:04:24,930 --> 00:04:26,640
to work with browserify there's about

103
00:04:26,640 --> 00:04:28,270
three things you

104
00:04:28,270 --> 00:04:30,400
need to look at so the first thing is

105
00:04:30,400 --> 00:04:32,530
sort of looking at the entry point for

106
00:04:32,530 --> 00:04:34,419
your module and saying like you know if

107
00:04:34,419 --> 00:04:35,919
if there is sort of a different

108
00:04:35,919 --> 00:04:37,449
interface that you want to expose on the

109
00:04:37,449 --> 00:04:39,580
client versus the server you can

110
00:04:39,580 --> 00:04:41,020
actually specify in your package

111
00:04:41,020 --> 00:04:42,909
touching on a different entry point

112
00:04:42,909 --> 00:04:45,610
where your module begins so we'll take a

113
00:04:45,610 --> 00:04:48,610
look at how you do that we also define

114
00:04:48,610 --> 00:04:51,220
any shims that you need to insert so if

115
00:04:51,220 --> 00:04:54,430
the HTTP implementation that chips with

116
00:04:54,430 --> 00:04:55,810
browserify doesn't meet your needs

117
00:04:55,810 --> 00:04:57,729
there's a way that you can create your

118
00:04:57,729 --> 00:05:01,630
own custom browsers browser shim for a

119
00:05:01,630 --> 00:05:03,340
node module that you use in your

120
00:05:03,340 --> 00:05:04,810
application and we'll take a look at how

121
00:05:04,810 --> 00:05:07,050
to do that we also have source

122
00:05:07,050 --> 00:05:09,280
transformations that are available in

123
00:05:09,280 --> 00:05:12,039
browserify so if your module is written

124
00:05:12,039 --> 00:05:13,330
in CoffeeScript and you need a

125
00:05:13,330 --> 00:05:15,970
CoffeeScript compile before your modules

126
00:05:15,970 --> 00:05:18,400
were agent for use in browserify you can

127
00:05:18,400 --> 00:05:21,400
specify that package to JSON as well so

128
00:05:21,400 --> 00:05:22,479
at this point I wanted to actually write

129
00:05:22,479 --> 00:05:24,250
some code to show you how that would

130
00:05:24,250 --> 00:05:28,719
work so basically here I have two files

131
00:05:28,719 --> 00:05:31,960
in browser a s and a server a s and I'm

132
00:05:31,960 --> 00:05:33,550
going to create a node module that's

133
00:05:33,550 --> 00:05:35,319
going to work in both of those

134
00:05:35,319 --> 00:05:37,330
environments the server being just a

135
00:05:37,330 --> 00:05:39,819
plain vanilla node program and then the

136
00:05:39,819 --> 00:05:41,380
browser dot j as being a file but I'm

137
00:05:41,380 --> 00:05:42,819
gonna package up with browserify

138
00:05:42,819 --> 00:05:45,580
to ship and include as a script tag I

139
00:05:45,580 --> 00:05:47,770
ain't a script tag potentially I mean a

140
00:05:47,770 --> 00:05:49,569
web browser so let's create a new

141
00:05:49,569 --> 00:05:53,099
directory I'll call that demo module and

142
00:05:53,099 --> 00:05:58,020
go in there and do an NPM in it and

143
00:05:58,020 --> 00:06:01,449
we'll just accept a lot of these default

144
00:06:01,449 --> 00:06:06,370
values ok so now we have a package of

145
00:06:06,370 --> 00:06:09,819
JSON for our program and by default when

146
00:06:09,819 --> 00:06:12,849
you create a new NPM package there's

147
00:06:12,849 --> 00:06:15,340
this main main attribute here which

148
00:06:15,340 --> 00:06:18,009
which sort of specifies the entry point

149
00:06:18,009 --> 00:06:21,759
for your module so if so when for how

150
00:06:21,759 --> 00:06:23,919
certify packages up your module by

151
00:06:23,919 --> 00:06:25,150
default it's going to look at this main

152
00:06:25,150 --> 00:06:26,590
attribute first and that's going it's

153
00:06:26,590 --> 00:06:28,539
going to use that as the entry point for

154
00:06:28,539 --> 00:06:31,150
your module because it observes the same

155
00:06:31,150 --> 00:06:34,150
module loading algorithms that that note

156
00:06:34,150 --> 00:06:36,820
am/pm use so if you don't have a

157
00:06:36,820 --> 00:06:38,620
different interface from browser to

158
00:06:38,620 --> 00:06:40,300
server then that's fine and you can

159
00:06:40,300 --> 00:06:41,680
leave that just

160
00:06:41,680 --> 00:06:46,949
as it is so let's create index J s and

161
00:06:46,949 --> 00:06:51,210
we'll open that up in a text editor here

162
00:06:51,210 --> 00:06:55,620
not that one we're looking for this one

163
00:06:55,620 --> 00:06:59,199
okay great so here's our demo module odd

164
00:06:59,199 --> 00:07:01,660
directory and inside here we'll just

165
00:07:01,660 --> 00:07:09,370
create something like say a hi and say

166
00:07:09,370 --> 00:07:13,030
console log server or something along

167
00:07:13,030 --> 00:07:15,430
those lines okay so here's my version of

168
00:07:15,430 --> 00:07:17,650
the module that works in node and now if

169
00:07:17,650 --> 00:07:19,419
I want to have a browser specific

170
00:07:19,419 --> 00:07:22,120
version of my module I'll create another

171
00:07:22,120 --> 00:07:28,810
file I'll call it client Jas and in this

172
00:07:28,810 --> 00:07:31,599
one I'm gonna have a the same interface

173
00:07:31,599 --> 00:07:37,050
say hi give that a function and alert

174
00:07:37,050 --> 00:07:39,090
hello it was something along those lines

175
00:07:39,090 --> 00:07:41,860
okay so on the brach in the browser I

176
00:07:41,860 --> 00:07:43,120
want to use this as the entry point for

177
00:07:43,120 --> 00:07:44,770
my module so the way that I specify that

178
00:07:44,770 --> 00:07:48,880
in package.json is by providing another

179
00:07:48,880 --> 00:07:51,880
attribute called browser so when

180
00:07:51,880 --> 00:07:54,580
browserify processes your module it's

181
00:07:54,580 --> 00:07:56,860
going to look for this attribute in your

182
00:07:56,860 --> 00:07:58,919
package JSON if you set it to a string

183
00:07:58,919 --> 00:08:01,360
it's basically going to be a relative

184
00:08:01,360 --> 00:08:04,210
path to a file in your directory that is

185
00:08:04,210 --> 00:08:06,280
you want to use as the entry point so I

186
00:08:06,280 --> 00:08:09,370
can just specify client excuse me dot

187
00:08:09,370 --> 00:08:13,630
slash client dodge answer so now I have

188
00:08:13,630 --> 00:08:16,750
a module that I can use in this code

189
00:08:16,750 --> 00:08:21,759
here if I go up directory server dot yes

190
00:08:21,759 --> 00:08:23,650
well I don't actually have to go through

191
00:08:23,650 --> 00:08:24,729
and type all that I think you guys are

192
00:08:24,729 --> 00:08:27,190
kind of with me there so basically here

193
00:08:27,190 --> 00:08:30,580
are my two entry points for client and

194
00:08:30,580 --> 00:08:32,950
server now the other thing that you

195
00:08:32,950 --> 00:08:34,450
might have to do besides sort of

196
00:08:34,450 --> 00:08:37,959
specifying a new entry point there is is

197
00:08:37,959 --> 00:08:40,390
provide some kind or provide some other

198
00:08:40,390 --> 00:08:42,430
shims for other functionality or other

199
00:08:42,430 --> 00:08:44,470
files that you want to override when

200
00:08:44,470 --> 00:08:45,670
you're writing a module that's going to

201
00:08:45,670 --> 00:08:47,620
run in the browser so the way that we do

202
00:08:47,620 --> 00:08:50,350
that in package.json is rather than

203
00:08:50,350 --> 00:08:52,660
setting this browser property to a

204
00:08:52,660 --> 00:08:55,370
string I can actually set

205
00:08:55,370 --> 00:08:59,839
to be an object so I still want to have

206
00:08:59,839 --> 00:09:01,730
a different entry point for my

207
00:09:01,730 --> 00:09:04,850
browserify package but in this case I'm

208
00:09:04,850 --> 00:09:06,920
not going to sort of override main over

209
00:09:06,920 --> 00:09:09,589
in the keys section of this of this odd

210
00:09:09,589 --> 00:09:12,740
JSON object I'm gonna specify the file

211
00:09:12,740 --> 00:09:16,600
that I want to override so I'm gonna say

212
00:09:16,600 --> 00:09:23,029
dot slash index dot JSP loaded if my

213
00:09:23,029 --> 00:09:25,040
module is going to be used on the server

214
00:09:25,040 --> 00:09:29,110
but instead I want to load up dot slash

215
00:09:29,110 --> 00:09:32,510
client jas so now I have you know that

216
00:09:32,510 --> 00:09:34,339
was basically the same as just setting

217
00:09:34,339 --> 00:09:35,839
this string equal to the browser

218
00:09:35,839 --> 00:09:38,330
property before so now I have my

219
00:09:38,330 --> 00:09:40,190
different entry point and then let's say

220
00:09:40,190 --> 00:09:42,860
I have a custom shim for the HTTP

221
00:09:42,860 --> 00:09:45,529
library in core node if I wanted to

222
00:09:45,529 --> 00:09:47,630
specify something like that I would just

223
00:09:47,630 --> 00:09:53,300
go dot slash now my HTTP jas and then I

224
00:09:53,300 --> 00:09:55,160
would be able to implement my own

225
00:09:55,160 --> 00:09:57,740
browser shim for the HTTP library as

226
00:09:57,740 --> 00:10:00,560
well so those are kind of the two main

227
00:10:00,560 --> 00:10:01,670
things that you'll have to do to prepare

228
00:10:01,670 --> 00:10:03,650
your module for a browser if I specify

229
00:10:03,650 --> 00:10:05,270
you know an alternate entry point and

230
00:10:05,270 --> 00:10:07,190
any shims that you need another thing

231
00:10:07,190 --> 00:10:08,660
that you might have to do is specify

232
00:10:08,660 --> 00:10:11,320
some source transformations if your

233
00:10:11,320 --> 00:10:13,940
it'll basically allow you to process

234
00:10:13,940 --> 00:10:17,959
code in a stream and output a modified

235
00:10:17,959 --> 00:10:19,190
version of that code that will run in

236
00:10:19,190 --> 00:10:20,380
the browser and there's a lot of

237
00:10:20,380 --> 00:10:23,270
existing transformers out there for

238
00:10:23,270 --> 00:10:26,450
browserify one of the more popular one

239
00:10:26,450 --> 00:10:29,660
more popular ones is coffee fi which

240
00:10:29,660 --> 00:10:31,550
will basically process your coffee

241
00:10:31,550 --> 00:10:33,560
script code convert it to JavaScript and

242
00:10:33,560 --> 00:10:35,630
then included in your browser affine

243
00:10:35,630 --> 00:10:37,640
module so the way that we specify that

244
00:10:37,640 --> 00:10:41,779
is with the browser of five field of

245
00:10:41,779 --> 00:10:46,880
package.json and inside this inside this

246
00:10:46,880 --> 00:10:50,770
object we have a property transforms and

247
00:10:50,770 --> 00:10:53,950
that's going to be an array of strings

248
00:10:53,950 --> 00:10:57,650
which will point to modules inside your

249
00:10:57,650 --> 00:11:00,260
project so let's if I had some

250
00:11:00,260 --> 00:11:03,589
CoffeeScript that I wanted to process

251
00:11:03,589 --> 00:11:06,260
before my module or as my module gets

252
00:11:06,260 --> 00:11:09,020
browserify I just specify that I

253
00:11:09,020 --> 00:11:11,390
want to ride through this transformation

254
00:11:11,390 --> 00:11:15,290
and if you do have a transformation like

255
00:11:15,290 --> 00:11:18,320
this one you also have to add it in your

256
00:11:18,320 --> 00:11:21,560
modules dependencies will have to be

257
00:11:21,560 --> 00:11:24,950
resolvable by browserify as a dependency

258
00:11:24,950 --> 00:11:26,900
so you just add a dependency there for

259
00:11:26,900 --> 00:11:30,020
coffee of five so pair your module

260
00:11:30,020 --> 00:11:31,670
you're going to again just do those

261
00:11:31,670 --> 00:11:33,590
three things specify a new entry point

262
00:11:33,590 --> 00:11:36,560
shim any any core node libraries or

263
00:11:36,560 --> 00:11:38,690
modules within your own application that

264
00:11:38,690 --> 00:11:41,750
won't work in the browser unmodified and

265
00:11:41,750 --> 00:11:42,740
then you can also specify

266
00:11:42,740 --> 00:11:45,260
transformations for your code so those

267
00:11:45,260 --> 00:11:47,300
are probably the things that you will

268
00:11:47,300 --> 00:11:49,400
need to look at doing to make your

269
00:11:49,400 --> 00:11:50,720
module sort of compatible with

270
00:11:50,720 --> 00:11:55,280
browserify now the reason why I think

271
00:11:55,280 --> 00:11:56,680
this is kind of interesting is sort of

272
00:11:56,680 --> 00:11:59,000
specific to you truly oh and and what we

273
00:11:59,000 --> 00:12:03,410
do with our module so with Detroit SDK

274
00:12:03,410 --> 00:12:05,240
there's a server side component that has

275
00:12:05,240 --> 00:12:08,510
a REST API which we provide sort of a

276
00:12:08,510 --> 00:12:10,940
high-level object wrapper for in the npm

277
00:12:10,940 --> 00:12:13,610
module but we also have this client side

278
00:12:13,610 --> 00:12:15,830
sdk which lets you make voice over IP

279
00:12:15,830 --> 00:12:17,900
phone calls which martially used to such

280
00:12:17,900 --> 00:12:19,760
a great effect in her in her

281
00:12:19,760 --> 00:12:22,670
presentation earlier so we have a

282
00:12:22,670 --> 00:12:25,280
situation where we have an API that all

283
00:12:25,280 --> 00:12:27,410
sort of hangs together and has client

284
00:12:27,410 --> 00:12:29,930
and server-side components so I actually

285
00:12:29,930 --> 00:12:32,720
kind of looked at an API that similar to

286
00:12:32,720 --> 00:12:35,060
like what socket IO provides where it

287
00:12:35,060 --> 00:12:37,910
has sort of a elegant way of including

288
00:12:37,910 --> 00:12:38,900
both client and server-side

289
00:12:38,900 --> 00:12:41,090
functionality at least initially it was

290
00:12:41,090 --> 00:12:42,800
in a single package now it's in two

291
00:12:42,800 --> 00:12:45,890
different ones but this seemed to be a

292
00:12:45,890 --> 00:12:48,110
really good use case for Twilio voice

293
00:12:48,110 --> 00:12:50,600
over IP so what we have to do today is

294
00:12:50,600 --> 00:12:53,120
you know your browser code has to talk

295
00:12:53,120 --> 00:12:54,830
to your web application to generate a

296
00:12:54,830 --> 00:12:56,810
capability token which basically

297
00:12:56,810 --> 00:12:59,270
empowers the browser to make phone calls

298
00:12:59,270 --> 00:13:01,910
and then your note application has to

299
00:13:01,910 --> 00:13:04,550
respond on to an ajax request and then

300
00:13:04,550 --> 00:13:06,950
your browser talks to Tullio to initiate

301
00:13:06,950 --> 00:13:09,500
the voice over IP call to leo talks to

302
00:13:09,500 --> 00:13:11,630
your application to get you know

303
00:13:11,630 --> 00:13:14,090
instructions brown and of a call before

304
00:13:14,090 --> 00:13:15,950
ultimately you can actually place that

305
00:13:15,950 --> 00:13:18,230
voice over IP phone call between your

306
00:13:18,230 --> 00:13:20,180
customer and the person that you would

307
00:13:20,180 --> 00:13:22,180
like to your browser and the person

308
00:13:22,180 --> 00:13:24,220
you would like to talk to you so this

309
00:13:24,220 --> 00:13:26,500
seemed to be a really great opportunity

310
00:13:26,500 --> 00:13:30,700
to find a module using using browserify

311
00:13:30,700 --> 00:13:32,370
that would provide two different

312
00:13:32,370 --> 00:13:34,660
interfaces on both the client and the

313
00:13:34,660 --> 00:13:36,970
server so I'd like to show you a little

314
00:13:36,970 --> 00:13:40,180
bit of how I would envision this working

315
00:13:40,180 --> 00:13:46,240
in an application so let's go ahead and

316
00:13:46,240 --> 00:13:50,950
open up a simple demo so here we have a

317
00:13:50,950 --> 00:13:53,950
note application pay no attention to

318
00:13:53,950 --> 00:13:56,110
this basically this is just agility I

319
00:13:56,110 --> 00:13:57,370
created that it creates sort of a

320
00:13:57,370 --> 00:14:00,310
pre-configured Express for web

321
00:14:00,310 --> 00:14:03,190
application so this is an Express web

322
00:14:03,190 --> 00:14:05,620
app that is set up with some useful

323
00:14:05,620 --> 00:14:08,170
middleware for you know automatically

324
00:14:08,170 --> 00:14:08,950
browserify

325
00:14:08,950 --> 00:14:10,870
certain files and applying less and

326
00:14:10,870 --> 00:14:12,970
stuff like that so but it's basically an

327
00:14:12,970 --> 00:14:15,970
Express for web app and then we require

328
00:14:15,970 --> 00:14:18,130
a special version of the Tullio module

329
00:14:18,130 --> 00:14:20,200
and then I can actually use the toilet

330
00:14:20,200 --> 00:14:22,839
module to basically mount some server

331
00:14:22,839 --> 00:14:24,880
side capabilities that will handle some

332
00:14:24,880 --> 00:14:26,560
of that token generation and that other

333
00:14:26,560 --> 00:14:29,320
song and dance that we saw before so

334
00:14:29,320 --> 00:14:32,620
this is the API that I want to expose on

335
00:14:32,620 --> 00:14:34,360
the server side and then on the client

336
00:14:34,360 --> 00:14:37,330
side I wanted to sort of drastically

337
00:14:37,330 --> 00:14:39,850
simplify the code that would be

338
00:14:39,850 --> 00:14:41,860
necessary to actually create a voice

339
00:14:41,860 --> 00:14:45,520
over IP call between two parties so here

340
00:14:45,520 --> 00:14:48,730
we just include from a Twilio CDN a

341
00:14:48,730 --> 00:14:50,320
javascript file which has sort of the

342
00:14:50,320 --> 00:14:54,130
core basic j/s SDK and then here we have

343
00:14:54,130 --> 00:14:56,589
a browser ephod file that we're loading

344
00:14:56,589 --> 00:14:59,770
up from our web application and in that

345
00:14:59,770 --> 00:15:02,100
file

346
00:15:02,110 --> 00:15:05,050
we have jQuery that we've installed via

347
00:15:05,050 --> 00:15:07,900
NPM so we can you know use that like an

348
00:15:07,900 --> 00:15:10,839
NPM module and also the toilet module

349
00:15:10,839 --> 00:15:13,180
again using a customized version of it

350
00:15:13,180 --> 00:15:16,029
on my local file system and then we just

351
00:15:16,029 --> 00:15:18,070
have a couple of handlers here that will

352
00:15:18,070 --> 00:15:21,279
you know initialize the outbound phone

353
00:15:21,279 --> 00:15:23,980
call with you know Tulio tile it'll hang

354
00:15:23,980 --> 00:15:26,380
up when the user wants me to you and

355
00:15:26,380 --> 00:15:29,980
then initially because this javascript

356
00:15:29,980 --> 00:15:32,620
is being generated on the server I'm

357
00:15:32,620 --> 00:15:34,600
able to just call Trulia connect and I

358
00:15:34,600 --> 00:15:35,620
already

359
00:15:35,620 --> 00:15:37,300
necessarily have to make Ajax calls or

360
00:15:37,300 --> 00:15:40,029
une any stuff to you know fetch a

361
00:15:40,029 --> 00:15:41,710
capability token or set up my server

362
00:15:41,710 --> 00:15:43,810
side because my JavaScript was generated

363
00:15:43,810 --> 00:15:46,810
on my server I know where it lives and I

364
00:15:46,810 --> 00:15:48,910
can sort of automate that entire process

365
00:15:48,910 --> 00:15:52,320
so what I'm going to do is fire this up

366
00:15:52,320 --> 00:15:54,010
actually it looks like it's already

367
00:15:54,010 --> 00:15:57,700
running and I do in order to do voice

368
00:15:57,700 --> 00:15:59,560
over IP I need for this web application

369
00:15:59,560 --> 00:16:00,700
to be on the public Internet

370
00:16:00,700 --> 00:16:02,680
does anybody here use a tool called and

371
00:16:02,680 --> 00:16:05,020
rock and rock it's a port forward or a

372
00:16:05,020 --> 00:16:07,240
couple people okay so if you don't use

373
00:16:07,240 --> 00:16:09,460
an grok and take nothing else away from

374
00:16:09,460 --> 00:16:11,350
this talk it's an amazing tool it will

375
00:16:11,350 --> 00:16:13,000
change your life definitely go install

376
00:16:13,000 --> 00:16:15,790
it it basically assigns a public-facing

377
00:16:15,790 --> 00:16:20,560
URL to a local port on your laptop so if

378
00:16:20,560 --> 00:16:22,300
you have a local node server a rails

379
00:16:22,300 --> 00:16:24,190
server or something like that you want

380
00:16:24,190 --> 00:16:25,510
to quickly put it on the internet so

381
00:16:25,510 --> 00:16:27,610
that your friends or clients can check

382
00:16:27,610 --> 00:16:30,070
it out and rock is a great tool to let

383
00:16:30,070 --> 00:16:31,990
you do that so basically what I have

384
00:16:31,990 --> 00:16:34,570
running is a simple application that

385
00:16:34,570 --> 00:16:37,390
will by default initiate a conference

386
00:16:37,390 --> 00:16:39,100
call between somebody in their browser

387
00:16:39,100 --> 00:16:41,380
sir would you mind being my guinea pig

388
00:16:41,380 --> 00:16:43,240
in the front row I'm gonna come pick on

389
00:16:43,240 --> 00:16:46,709
you would you mind going to kwn Gras com

390
00:16:46,709 --> 00:16:48,730
sorry to pick on you like that but I

391
00:16:48,730 --> 00:16:51,720
would I need at least one one person per

392
00:16:51,720 --> 00:16:55,900
kwmg are ok.com and just click on that

393
00:16:55,900 --> 00:16:58,810
button to say join a conference call and

394
00:16:58,810 --> 00:17:01,690
Twilio x' Julio's planetside SDK will

395
00:17:01,690 --> 00:17:04,390
use the WebRTC API is built into the

396
00:17:04,390 --> 00:17:12,230
Chrome browser to initiate a phone call

397
00:17:12,240 --> 00:17:15,340
waiting for that second party

398
00:17:15,340 --> 00:17:19,210
I actually just hit the join the

399
00:17:19,210 --> 00:17:27,270
conference

400
00:17:27,280 --> 00:17:37,240
and if you're in there you magic of

401
00:17:37,240 --> 00:17:38,800
WebRTC yeah I know

402
00:17:38,800 --> 00:17:40,870
our voices are connecting through the

403
00:17:40,870 --> 00:17:44,710
energy so so yeah basically the reason I

404
00:17:44,710 --> 00:17:46,780
wanted to show that is it's it's one

405
00:17:46,780 --> 00:17:48,760
example where you have a module and you

406
00:17:48,760 --> 00:17:50,650
know that you're gonna have server set

407
00:17:50,650 --> 00:17:52,330
IP eyes and client-side API is there

408
00:17:52,330 --> 00:17:53,440
going to have to interact with one

409
00:17:53,440 --> 00:17:56,530
another and if you and you can present

410
00:17:56,530 --> 00:17:58,720
sort of a unified interface to both the

411
00:17:58,720 --> 00:18:01,050
client and the server if you write your

412
00:18:01,050 --> 00:18:04,450
breitner module in this way and in the

413
00:18:04,450 --> 00:18:06,640
in this particular example of the Twilio

414
00:18:06,640 --> 00:18:08,260
module I was able to share code between

415
00:18:08,260 --> 00:18:11,680
the client side SDK that is being used

416
00:18:11,680 --> 00:18:15,130
in the browser and the server side SDK

417
00:18:15,130 --> 00:18:17,560
that I use that you would use to contact

418
00:18:17,560 --> 00:18:20,590
the REST API or to generate capability

419
00:18:20,590 --> 00:18:23,560
tokens on the server so I definitely

420
00:18:23,560 --> 00:18:25,630
recommend that you check out browserify

421
00:18:25,630 --> 00:18:28,060
it's a great if you're using node it

422
00:18:28,060 --> 00:18:30,040
makes a ton of sense because you're

423
00:18:30,040 --> 00:18:31,450
basically going to be using the same one

424
00:18:31,450 --> 00:18:35,470
package manager one style of structuring

425
00:18:35,470 --> 00:18:37,630
your code and you'll be able to realize

426
00:18:37,630 --> 00:18:39,250
a lot more of the benefits of having

427
00:18:39,250 --> 00:18:40,570
JavaScript on both the client and the

428
00:18:40,570 --> 00:18:42,910
server so some of the documentation for

429
00:18:42,910 --> 00:18:45,160
the browser if I specific stuff you see

430
00:18:45,160 --> 00:18:47,170
is up here don't worry about copying it

431
00:18:47,170 --> 00:18:49,660
down this is actually all on my

432
00:18:49,660 --> 00:18:51,220
SlideShare account which is

433
00:18:51,220 --> 00:18:54,790
slideshare.net /k whinnery if you have

434
00:18:54,790 --> 00:18:57,070
any questions feel free to come track me

435
00:18:57,070 --> 00:18:59,590
down but yeah yeah I think browserify is

436
00:18:59,590 --> 00:19:01,570
a really cool tool and definitely worth

437
00:19:01,570 --> 00:19:03,670
checking out if your music thank you

