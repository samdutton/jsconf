1
00:00:34,760 --> 00:00:38,300

everyone I'm here to talk about Roy but

2
00:00:38,300 --> 00:00:40,010
first I'm gonna talk a little bit about

3
00:00:40,010 --> 00:00:42,350
myself so I'm actually hired as a job

4
00:00:42,350 --> 00:00:46,920
developer atlassian who here likes Java

5
00:00:46,930 --> 00:00:51,170
couple okay so full I've been working on

6
00:00:51,170 --> 00:00:53,690
a scholar project so I've been working

7
00:00:53,690 --> 00:00:54,979
on that for a couple of weeks now who

8
00:00:54,979 --> 00:01:00,289
here likes collar I love scholar at home

9
00:01:00,289 --> 00:01:02,869
I'd like to do a lot of haskell who here

10
00:01:02,869 --> 00:01:05,630
likes high school awesome that's awesome

11
00:01:05,630 --> 00:01:09,319
for a javascript conference but really

12
00:01:09,319 --> 00:01:11,810
at home I do a lot of JavaScript I do a

13
00:01:11,810 --> 00:01:13,460
lot of web based programming I do a lot

14
00:01:13,460 --> 00:01:15,170
of nodejs programming who he likes

15
00:01:15,170 --> 00:01:19,780
javascript only a couple only a couple

16
00:01:19,780 --> 00:01:22,909
but basically while I've been working on

17
00:01:22,909 --> 00:01:25,190
a scholar and Haskell projects I've

18
00:01:25,190 --> 00:01:29,119
really loved the language but when i go

19
00:01:29,119 --> 00:01:31,759
back to javascript there's part that I

20
00:01:31,759 --> 00:01:34,970
don't like so I kinda wanted to make a

21
00:01:34,970 --> 00:01:37,610
language called Roy and I want to be

22
00:01:37,610 --> 00:01:40,670
here unless it's a ljs language right so

23
00:01:40,670 --> 00:01:42,560
we've heard about coffee script for

24
00:01:42,560 --> 00:01:43,819
we've heard about closure script

25
00:01:43,819 --> 00:01:45,979
yesterday we've heard about things like

26
00:01:45,979 --> 00:01:47,330
in script to mention yesterday and

27
00:01:47,330 --> 00:01:49,580
pajamas which is a Python to JavaScript

28
00:01:49,580 --> 00:01:52,610
compiler there's a lot of cool ljs

29
00:01:52,610 --> 00:01:54,830
languages but not many of them do what I

30
00:01:54,830 --> 00:01:58,310
think Roy does which is types so I

31
00:01:58,310 --> 00:02:01,429
really believe in statically checking

32
00:02:01,429 --> 00:02:04,489
your program I think so i'm paintin

33
00:02:04,489 --> 00:02:08,179
Jones puts tice best he says that types

34
00:02:08,179 --> 00:02:09,920
are the world's most-used formal method

35
00:02:09,920 --> 00:02:12,140
by six orders of magnitude so if you

36
00:02:12,140 --> 00:02:13,910
think about that we are verifying parts

37
00:02:13,910 --> 00:02:16,340
of our program we are making sure that

38
00:02:16,340 --> 00:02:18,260
putt some some errors don't occur in our

39
00:02:18,260 --> 00:02:19,790
program which i think is an amazing

40
00:02:19,790 --> 00:02:22,430
thing and also Roy's a functional

41
00:02:22,430 --> 00:02:25,220
language and functional means a lot of

42
00:02:25,220 --> 00:02:27,590
things to a lot of different people some

43
00:02:27,590 --> 00:02:29,330
people think that functional means are

44
00:02:29,330 --> 00:02:30,739
you just computing with functions or you

45
00:02:30,739 --> 00:02:34,849
think ma nerds the way I think of Roy's

46
00:02:34,849 --> 00:02:36,170
a function language is that it's

47
00:02:36,170 --> 00:02:38,480
completely immutable if you just right

48
00:02:38,480 --> 00:02:41,030
Roy code you won't be able to mutate

49
00:02:41,030 --> 00:02:42,859
values if you start calling out to

50
00:02:42,859 --> 00:02:44,840
JavaScript or you let JavaScript start

51
00:02:44,840 --> 00:02:46,400
calling into Roy then you can start

52
00:02:46,400 --> 00:02:47,600
mutating things so

53
00:02:47,600 --> 00:02:50,270
but if you stay inside of Roy then you

54
00:02:50,270 --> 00:02:51,650
can have an immutable program which i

55
00:02:51,650 --> 00:02:54,050
think is a lot easier to reason about so

56
00:02:54,050 --> 00:02:55,340
I like to think of Roy's a bit of a

57
00:02:55,340 --> 00:02:57,410
coffee script across with a camel high

58
00:02:57,410 --> 00:02:59,570
school so we're taking the type systems

59
00:02:59,570 --> 00:03:01,160
of a camel but we're compiling to clean

60
00:03:01,160 --> 00:03:04,010
JavaScript like JavaScript us here's an

61
00:03:04,010 --> 00:03:06,500
example of a road program let hundred

62
00:03:06,500 --> 00:03:08,630
equals 100 so you don't see any types in

63
00:03:08,630 --> 00:03:10,070
this program we're not saying number 100

64
00:03:10,070 --> 00:03:13,270
equals 100 but this compiles into

65
00:03:13,270 --> 00:03:16,400
untyped JavaScript so 500 it 100 pretty

66
00:03:16,400 --> 00:03:20,150
simple but that means this won't compile

67
00:03:20,150 --> 00:03:23,240
so we've got a string and we're doing a

68
00:03:23,240 --> 00:03:25,160
plus plus means add two numbers together

69
00:03:25,160 --> 00:03:28,400
and then we're doing it too so we're

70
00:03:28,400 --> 00:03:30,110
adding trying to add a string to a

71
00:03:30,110 --> 00:03:31,460
number that doesn't make sense from type

72
00:03:31,460 --> 00:03:35,420
theory perspective so Java Roy will just

73
00:03:35,420 --> 00:03:37,550
reject that program and say you know a

74
00:03:37,550 --> 00:03:39,230
string is not a number I can't do

75
00:03:39,230 --> 00:03:42,140
anything with this here's our we define

76
00:03:42,140 --> 00:03:44,330
a function we do let F then we give it a

77
00:03:44,330 --> 00:03:47,120
argument and then we type it to return

78
00:03:47,120 --> 00:03:49,430
number and then return the X so it's

79
00:03:49,430 --> 00:03:50,540
returning an accent is returning a

80
00:03:50,540 --> 00:03:51,860
number therefore X must be a number

81
00:03:51,860 --> 00:03:55,160
right now we can pass 100 equal into

82
00:03:55,160 --> 00:03:57,500
that F and it will work will compile

83
00:03:57,500 --> 00:03:59,060
that and i'll just print out hundreds of

84
00:03:59,060 --> 00:04:01,100
screen but if we try and pass a string

85
00:04:01,100 --> 00:04:02,860
to it we've typed it to return a number

86
00:04:02,860 --> 00:04:07,370
that won't compile that's JavaScript

87
00:04:07,370 --> 00:04:09,320
composing to via air fixed function

88
00:04:09,320 --> 00:04:12,890
return the X easy so structural types

89
00:04:12,890 --> 00:04:14,180
are a really interesting concept that I

90
00:04:14,180 --> 00:04:15,350
think should take off a lot more than

91
00:04:15,350 --> 00:04:16,970
what they have they're pretty much a way

92
00:04:16,970 --> 00:04:22,190
of statically checking duck typing so

93
00:04:22,190 --> 00:04:23,450
here we're defining a function called +

94
00:04:23,450 --> 00:04:28,040
+ XY we take an a then we return the X

95
00:04:28,040 --> 00:04:29,300
property and the y property added

96
00:04:29,300 --> 00:04:32,360
together so we can infer that the a is

97
00:04:32,360 --> 00:04:34,640
an object with a excellent and a wire on

98
00:04:34,640 --> 00:04:36,440
it and that they must be numbers because

99
00:04:36,440 --> 00:04:39,050
we're adding them together if we pass in

100
00:04:39,050 --> 00:04:41,360
obj this isn't in the program so I must

101
00:04:41,360 --> 00:04:44,270
be coming from JavaScript right so Roy

102
00:04:44,270 --> 00:04:46,010
just thinks ok well I don't know what

103
00:04:46,010 --> 00:04:48,080
this is I'm just going to emit a warning

104
00:04:48,080 --> 00:04:51,530
and accept and coerce this to be what

105
00:04:51,530 --> 00:04:55,010
did it what I expect it to be if we've

106
00:04:55,010 --> 00:04:57,500
got a literal in Roy so we've got an ex

107
00:04:57,500 --> 00:05:01,009
that's a two and a why that's one

108
00:05:01,009 --> 00:05:02,629
it'll compile because that's exactly

109
00:05:02,629 --> 00:05:05,059
what it's expecting if we try and down

110
00:05:05,059 --> 00:05:06,289
the bottom for try and pass the said in

111
00:05:06,289 --> 00:05:11,180
civil Y Z in civil way it's not going to

112
00:05:11,180 --> 00:05:12,199
compile because it doesn't have the Y

113
00:05:12,199 --> 00:05:15,550
property so it's duck typing but static

114
00:05:15,550 --> 00:05:18,949
this is JavaScript no types just normal

115
00:05:18,949 --> 00:05:21,319
property access on an object and a JSON

116
00:05:21,319 --> 00:05:26,210
data down the bottom so some types are a

117
00:05:26,210 --> 00:05:28,490
way of encoding alternative values

118
00:05:28,490 --> 00:05:31,520
inside of a data structure so here's the

119
00:05:31,520 --> 00:05:33,889
famous option type so a is actually type

120
00:05:33,889 --> 00:05:35,240
parameter so I could be a number could

121
00:05:35,240 --> 00:05:37,729
be a string then we've got two different

122
00:05:37,729 --> 00:05:40,129
alternatives so we got some of an a so a

123
00:05:40,129 --> 00:05:42,710
is any value that's part of that a type

124
00:05:42,710 --> 00:05:45,759
and then a nun nun doesn't take any any

125
00:05:45,759 --> 00:05:48,139
value so it this is a way of encoding an

126
00:05:48,139 --> 00:05:52,669
optional value in the type system this

127
00:05:52,669 --> 00:05:54,620
is what can balls into it's just a

128
00:05:54,620 --> 00:05:56,839
JavaScript constructor and we do the

129
00:05:56,839 --> 00:05:59,240
this instance of check so you can call

130
00:05:59,240 --> 00:06:01,009
this sum as a function and it'll

131
00:06:01,009 --> 00:06:02,629
actually construct a new object for you

132
00:06:02,629 --> 00:06:05,839
it's pretty nice trick and then we can

133
00:06:05,839 --> 00:06:07,969
just assign the parameter that's getting

134
00:06:07,969 --> 00:06:13,669
passed in to to the object none doesn't

135
00:06:13,669 --> 00:06:17,300
take any parameters to it so it just

136
00:06:17,300 --> 00:06:20,629
construction new a new object with that

137
00:06:20,629 --> 00:06:23,839
name now we can patent match on these

138
00:06:23,839 --> 00:06:27,229
subtypes this is creating a function

139
00:06:27,229 --> 00:06:29,870
called non zero it takes a no it matches

140
00:06:29,870 --> 00:06:33,110
on that Oh for a psalm of s so s is a

141
00:06:33,110 --> 00:06:36,169
value and it returns that value it

142
00:06:36,169 --> 00:06:39,319
matches on the nun and then return 0 so

143
00:06:39,319 --> 00:06:42,439
it tries to unify the s in the 0 so it

144
00:06:42,439 --> 00:06:45,559
figures out that hey s we're returning a

145
00:06:45,559 --> 00:06:47,419
0 which is a number when we're turning s

146
00:06:47,419 --> 00:06:49,519
therefore s must be a number so this

147
00:06:49,519 --> 00:06:51,529
function returns a number and it takes

148
00:06:51,529 --> 00:06:55,789
in an optional value of a number this is

149
00:06:55,789 --> 00:06:57,409
what it compiles into it does an

150
00:06:57,409 --> 00:06:58,990
instance of check to check if it to some

151
00:06:58,990 --> 00:07:01,339
extracts out the value and returns that

152
00:07:01,339 --> 00:07:04,819
value otherwise it checks if it's an

153
00:07:04,819 --> 00:07:08,449
island return 0 this is how you call it

154
00:07:08,449 --> 00:07:10,310
from rowing

155
00:07:10,310 --> 00:07:13,040
just construct a new value cool man or

156
00:07:13,040 --> 00:07:15,620
construct a new value could some with

157
00:07:15,620 --> 00:07:18,710
the value if it's an annual just print

158
00:07:18,710 --> 00:07:21,170
out 0 if it's some it'll extract the

159
00:07:21,170 --> 00:07:23,240
value out if it's a number otherwise if

160
00:07:23,240 --> 00:07:24,530
it's a string it will actually give a

161
00:07:24,530 --> 00:07:27,910
typeerror this is josh compiles into

162
00:07:27,910 --> 00:07:29,750
pretty simple stuff we don't actually

163
00:07:29,750 --> 00:07:31,370
have to put new even though the

164
00:07:31,370 --> 00:07:33,170
constructors because the din since this

165
00:07:33,170 --> 00:07:37,550
instance of check so while ago I wrote a

166
00:07:37,550 --> 00:07:39,890
blog post about escaping something

167
00:07:39,890 --> 00:07:41,720
called cool back hell by using closure

168
00:07:41,720 --> 00:07:46,790
script macros I think the problem is

169
00:07:46,790 --> 00:07:49,400
actually more well suited to 2am on add

170
00:07:49,400 --> 00:07:54,200
a solution i'll probably just for them

171
00:07:54,200 --> 00:07:55,430
by saying one at a lot of JavaScript

172
00:07:55,430 --> 00:07:58,730
people but I think someone said ma nerd

173
00:07:58,730 --> 00:08:04,910
yesterday probably David but it's pretty

174
00:08:04,910 --> 00:08:06,710
amazing how at a JavaScript conference

175
00:08:06,710 --> 00:08:07,970
we were allowed to talk about assembly

176
00:08:07,970 --> 00:08:08,980
and we're allowed to talk about

177
00:08:08,980 --> 00:08:11,960
compiling down to GPU code but we're not

178
00:08:11,960 --> 00:08:13,100
allowed to talk about my nads so I'm

179
00:08:13,100 --> 00:08:16,550
going to do it so this is this what cool

180
00:08:16,550 --> 00:08:18,260
back hell looks like so we do an appt

181
00:08:18,260 --> 00:08:19,700
get then we do a user get then if

182
00:08:19,700 --> 00:08:21,020
there's an error then we return the next

183
00:08:21,020 --> 00:08:23,360
error then we do a database fine for

184
00:08:23,360 --> 00:08:25,010
that user that if there's an arrow then

185
00:08:25,010 --> 00:08:26,390
we return the error go through the curse

186
00:08:26,390 --> 00:08:27,380
if there's an arrow then we return the

187
00:08:27,380 --> 00:08:29,120
error and then we finally send a

188
00:08:29,120 --> 00:08:32,270
response that's a huge cyclomatic

189
00:08:32,270 --> 00:08:35,420
complexity gotten nesting all the way

190
00:08:35,420 --> 00:08:37,280
down to the right it's really hard to

191
00:08:37,280 --> 00:08:39,950
read it's hard to reason about there's a

192
00:08:39,950 --> 00:08:44,900
type over so be good if we could make

193
00:08:44,900 --> 00:08:47,600
this look like synchronous code instead

194
00:08:47,600 --> 00:08:51,170
of a lot of nested callbacks so I've

195
00:08:51,170 --> 00:08:53,060
implemented a monad well actually this

196
00:08:53,060 --> 00:08:55,640
was contribute to the road project just

197
00:08:55,640 --> 00:09:00,710
a request it basically uses the jquery

198
00:09:00,710 --> 00:09:05,660
deferred object to implement i'm honored

199
00:09:05,660 --> 00:09:08,900
so we do a jquery when so you can think

200
00:09:08,900 --> 00:09:12,680
of from one it as a as an interface with

201
00:09:12,680 --> 00:09:15,080
two methods on it one's return which

202
00:09:15,080 --> 00:09:16,490
just takes a value and wraps it up in a

203
00:09:16,490 --> 00:09:18,770
deferred the other one it takes it

204
00:09:18,770 --> 00:09:20,990
deferred and a function and then somehow

205
00:09:20,990 --> 00:09:22,360
rap rock

206
00:09:22,360 --> 00:09:24,779
runs that deferred through that function

207
00:09:24,779 --> 00:09:30,100
so with return we take the X and then we

208
00:09:30,100 --> 00:09:31,269
just wrap that up in a deferred object

209
00:09:31,269 --> 00:09:34,209
easy with a bind we create a new

210
00:09:34,209 --> 00:09:37,000
deferred when the past in deferred has

211
00:09:37,000 --> 00:09:39,279
done we unwrap that value we run that

212
00:09:39,279 --> 00:09:40,630
through the function and then when we

213
00:09:40,630 --> 00:09:42,519
say when that's done then we resolve the

214
00:09:42,519 --> 00:09:43,899
deferred that we've created before and

215
00:09:43,899 --> 00:09:45,190
we return the deferred that we created

216
00:09:45,190 --> 00:09:48,339
before as a promise so it's basically

217
00:09:48,339 --> 00:09:52,480
sequencing out deferred that's what it

218
00:09:52,480 --> 00:09:55,440
comes down to JavaScript pretty easy

219
00:09:55,440 --> 00:10:00,399
just normal jquery calls and this is how

220
00:10:00,399 --> 00:10:02,290
we use the nail so it looks very

221
00:10:02,290 --> 00:10:04,450
synchronous it's just line by line but

222
00:10:04,450 --> 00:10:05,980
this arrow is actually doing the blind

223
00:10:05,980 --> 00:10:08,170
operation so we've doing an AJAX call

224
00:10:08,170 --> 00:10:09,820
and we're getting help the content of

225
00:10:09,820 --> 00:10:14,829
hello world boy then we're doing another

226
00:10:14,829 --> 00:10:16,810
ajax call and we're getting out the

227
00:10:16,810 --> 00:10:19,660
content of a Leo story and then we're

228
00:10:19,660 --> 00:10:21,760
concatenate in both those contents

229
00:10:21,760 --> 00:10:24,190
together and we're returning that so

230
00:10:24,190 --> 00:10:25,870
returning is going to wrap it back up

231
00:10:25,870 --> 00:10:29,649
into a deferred object for us and those

232
00:10:29,649 --> 00:10:31,510
arrows are going to unwrap the value for

233
00:10:31,510 --> 00:10:34,540
us that's what it compiles down into

234
00:10:34,540 --> 00:10:37,060
so-called back it compiles down into

235
00:10:37,060 --> 00:10:39,820
callback hell but a make but we've got

236
00:10:39,820 --> 00:10:41,290
synchronous looking code which is pretty

237
00:10:41,290 --> 00:10:44,680
awesome solution to the problem and it

238
00:10:44,680 --> 00:10:48,010
looks like just a normal property

239
00:10:48,010 --> 00:10:52,180
accesses on the deferred one ad so that

240
00:10:52,180 --> 00:10:55,690
was how to solve call back help with my

241
00:10:55,690 --> 00:10:57,940
notes in taxi in Roy let's talk about

242
00:10:57,940 --> 00:11:01,120
how we do modules in Roy so there's heap

243
00:11:01,120 --> 00:11:02,230
of different ways to do modules in

244
00:11:02,230 --> 00:11:05,890
JavaScript probably most common and the

245
00:11:05,890 --> 00:11:08,140
most awful is assigned to the global

246
00:11:08,140 --> 00:11:11,079
object in the browser so you know just

247
00:11:11,079 --> 00:11:12,579
normal jquery just signed to the global

248
00:11:12,579 --> 00:11:15,310
object you know problems occur when you

249
00:11:15,310 --> 00:11:19,839
start having conflicts with that common

250
00:11:19,839 --> 00:11:22,209
j/s is the solution for no Jas it makes

251
00:11:22,209 --> 00:11:24,730
it look really well it's implemented as

252
00:11:24,730 --> 00:11:28,899
a synchronous cool which works pretty

253
00:11:28,899 --> 00:11:31,089
well from ajs but in the browser we

254
00:11:31,089 --> 00:11:32,709
can't really do that so we need

255
00:11:32,709 --> 00:11:33,910
something more like a single module

256
00:11:33,910 --> 00:11:35,149
definitions

257
00:11:35,149 --> 00:11:38,100
which to find a call back when modules

258
00:11:38,100 --> 00:11:39,120
are loaded so we can do it

259
00:11:39,120 --> 00:11:42,839
asynchronously basically I thought each

260
00:11:42,839 --> 00:11:44,700
of these solutions are better for

261
00:11:44,700 --> 00:11:46,920
different things so Roy should be able

262
00:11:46,920 --> 00:11:48,690
to just take all the commonalities

263
00:11:48,690 --> 00:11:50,250
between this and compile down into each

264
00:11:50,250 --> 00:11:51,360
one because you've already got a

265
00:11:51,360 --> 00:11:52,890
compilation step why not compile into a

266
00:11:52,890 --> 00:11:55,860
different module standard so this is how

267
00:11:55,860 --> 00:11:58,440
you write a module in Roy you can import

268
00:11:58,440 --> 00:11:59,970
another module so i've imported settings

269
00:11:59,970 --> 00:12:02,279
here and then we can access the settings

270
00:12:02,279 --> 00:12:05,820
object plus pluses concatenation and

271
00:12:05,820 --> 00:12:08,480
then we can export an identifier in

272
00:12:08,480 --> 00:12:12,000
browser mode we can boil down to this

273
00:12:12,000 --> 00:12:13,140
you'll just leave a comment saying hey I

274
00:12:13,140 --> 00:12:14,610
expect there to be a settings in the

275
00:12:14,610 --> 00:12:17,730
global object and we'll just access the

276
00:12:17,730 --> 00:12:19,589
settings object then we're all assigned

277
00:12:19,589 --> 00:12:21,360
to the global scope by just using this

278
00:12:21,360 --> 00:12:25,890
and then the identifier name income Jes

279
00:12:25,890 --> 00:12:27,570
mode or just duel require and then

280
00:12:27,570 --> 00:12:31,709
assigned to the exports in a synchronous

281
00:12:31,709 --> 00:12:33,870
motor definitions will define a call

282
00:12:33,870 --> 00:12:35,520
back or to find the name of the module

283
00:12:35,520 --> 00:12:37,830
as well save the dependencies define a

284
00:12:37,830 --> 00:12:40,170
callback that accesses the the module

285
00:12:40,170 --> 00:12:42,720
that we've imported and then export the

286
00:12:42,720 --> 00:12:46,890
properties sells modules what we're

287
00:12:46,890 --> 00:12:49,770
going to work on in the future source

288
00:12:49,770 --> 00:12:51,510
map so I'm trying to make debugging

289
00:12:51,510 --> 00:12:52,709
easier than coffee script because cough

290
00:12:52,709 --> 00:12:54,510
script doesn't currently have a source

291
00:12:54,510 --> 00:12:57,660
map support I'm aiming to be coffee

292
00:12:57,660 --> 00:13:00,920
script in implementing source Maps but

293
00:13:00,920 --> 00:13:03,300
I've actually got Jared in the audience

294
00:13:03,300 --> 00:13:05,399
to start looking into that and he says

295
00:13:05,399 --> 00:13:06,839
it's kind of hard so I don't know if I

296
00:13:06,839 --> 00:13:08,339
better make it but I what I really hope

297
00:13:08,339 --> 00:13:11,850
so and I want to make immutability

298
00:13:11,850 --> 00:13:13,200
easier than one of these in high school

299
00:13:13,200 --> 00:13:14,970
which if you think about is really

300
00:13:14,970 --> 00:13:16,320
interesting since Haskell has to be

301
00:13:16,320 --> 00:13:21,540
immutable but basically a school if you

302
00:13:21,540 --> 00:13:22,290
want to use something called a

303
00:13:22,290 --> 00:13:23,579
functional lens in high school you have

304
00:13:23,579 --> 00:13:25,230
to write a lot of boilerplate but Roy's

305
00:13:25,230 --> 00:13:26,070
going to generate this for you

306
00:13:26,070 --> 00:13:28,170
automatically so here we define a

307
00:13:28,170 --> 00:13:30,510
structure called me so i get i have an

308
00:13:30,510 --> 00:13:33,000
age and i have a name so i can create a

309
00:13:33,000 --> 00:13:35,490
lens from my age property so i do a dot

310
00:13:35,490 --> 00:13:37,709
age that that's just creating a new lens

311
00:13:37,709 --> 00:13:41,040
for me then we can do a get and then

312
00:13:41,040 --> 00:13:42,420
passing that lens and then we can give

313
00:13:42,420 --> 00:13:44,760
the structure so basically that's this

314
00:13:44,760 --> 00:13:46,320
lens has got together in it so we did

315
00:13:46,320 --> 00:13:47,220
get and

316
00:13:47,220 --> 00:13:48,750
that so it just defines them to me it

317
00:13:48,750 --> 00:13:51,540
just composed into a media age and then

318
00:13:51,540 --> 00:13:53,610
gives me back the answer so that's

319
00:13:53,610 --> 00:13:56,160
pretty simple but the age lens also has

320
00:13:56,160 --> 00:13:58,319
a setter on it so we can do a set age

321
00:13:58,319 --> 00:14:00,269
lens and then give it a value and then

322
00:14:00,269 --> 00:14:01,470
give it the structure and that'll

323
00:14:01,470 --> 00:14:03,089
actually copy that structure for me

324
00:14:03,089 --> 00:14:04,470
update the value and then return that

325
00:14:04,470 --> 00:14:08,550
back to me so it's a way of using

326
00:14:08,550 --> 00:14:11,430
immutable structures and being able to

327
00:14:11,430 --> 00:14:13,920
have a getter and setter as the lens and

328
00:14:13,920 --> 00:14:15,480
pass that around two functions and that

329
00:14:15,480 --> 00:14:17,670
so it's a really cool way of having

330
00:14:17,670 --> 00:14:20,339
mutability and it should be easier than

331
00:14:20,339 --> 00:14:22,019
Oscar which i think is a pretty good aim

332
00:14:22,019 --> 00:14:25,379
and I'm going to copy Haskell when so

333
00:14:25,379 --> 00:14:26,610
i'm paintin Jones with down in Sydney I

334
00:14:26,610 --> 00:14:28,589
was talking to him and he's thinking

335
00:14:28,589 --> 00:14:30,149
about well he's actually working on

336
00:14:30,149 --> 00:14:32,790
deferring to some type errors to run

337
00:14:32,790 --> 00:14:36,449
time if you ask the GF c compiler to so

338
00:14:36,449 --> 00:14:39,180
i'm going to copy that so if you add

339
00:14:39,180 --> 00:14:42,120
this flag into roi de fer type errors it

340
00:14:42,120 --> 00:14:45,360
put into a mode where programs like this

341
00:14:45,360 --> 00:14:47,879
will compile so at the moment how's

342
00:14:47,879 --> 00:14:48,870
school programs will look at that and

343
00:14:48,870 --> 00:14:50,310
say to do plus one that doesn't make

344
00:14:50,310 --> 00:14:54,000
sense that's this programs undefined to

345
00:14:54,000 --> 00:14:55,199
JavaScript programs we see that and go

346
00:14:55,199 --> 00:14:58,439
02 that's the answer right because it's

347
00:14:58,439 --> 00:15:00,029
got a true it's going to it's just going

348
00:15:00,029 --> 00:15:03,689
to run that true every time housing

349
00:15:03,689 --> 00:15:05,610
programs will let the compiler to try

350
00:15:05,610 --> 00:15:10,199
and verify the program and that won't

351
00:15:10,199 --> 00:15:14,550
compile so so they say this program is

352
00:15:14,550 --> 00:15:16,980
undefined but if we put into this mode

353
00:15:16,980 --> 00:15:18,870
it'll actually instead of putting it

354
00:15:18,870 --> 00:15:20,790
instead of giving us a type error at

355
00:15:20,790 --> 00:15:22,769
compile time it'll generate exception

356
00:15:22,769 --> 00:15:25,259
code so pretty much compiling to

357
00:15:25,259 --> 00:15:28,350
JavaScript like this so we wrap it up to

358
00:15:28,350 --> 00:15:30,389
make it look like a to make it an

359
00:15:30,389 --> 00:15:33,389
expression so we throw a new era so this

360
00:15:33,389 --> 00:15:35,430
is a runtime error saying that string is

361
00:15:35,430 --> 00:15:36,750
on a number so instead of showing that

362
00:15:36,750 --> 00:15:39,180
at compile time we probably still show

363
00:15:39,180 --> 00:15:41,459
what I can put a compile-time and we say

364
00:15:41,459 --> 00:15:44,579
you know this is a warning now but the

365
00:15:44,579 --> 00:15:46,439
benefit of this is that we can debug the

366
00:15:46,439 --> 00:15:47,910
program we can test the program without

367
00:15:47,910 --> 00:15:49,220
having to make sure that everything

368
00:15:49,220 --> 00:15:51,629
makes sense the program one might not be

369
00:15:51,629 --> 00:15:52,800
in a state to make sense we might be

370
00:15:52,800 --> 00:15:54,269
still actively working on it we might be

371
00:15:54,269 --> 00:15:56,100
able to test one part of it make sure

372
00:15:56,100 --> 00:15:57,089
we're going in the right direction

373
00:15:57,089 --> 00:15:59,579
before before we actually finish the

374
00:15:59,579 --> 00:16:00,480
program

375
00:16:00,480 --> 00:16:02,949
so I think that's going to be a really

376
00:16:02,949 --> 00:16:04,089
useful thing for statically typed

377
00:16:04,089 --> 00:16:07,360
languages in the future so if you want

378
00:16:07,360 --> 00:16:09,550
to try Roy I've got a website Roy

379
00:16:09,550 --> 00:16:13,079
diploma Kendall org I've got a online

380
00:16:13,079 --> 00:16:15,339
editor so you can just start typing Roy

381
00:16:15,339 --> 00:16:16,600
code and playing around with it there's

382
00:16:16,600 --> 00:16:18,189
heap of examples that you try out it's

383
00:16:18,189 --> 00:16:20,199
also one rappelled diet if you're at the

384
00:16:20,199 --> 00:16:23,170
talk yesterday which is also a cool

385
00:16:23,170 --> 00:16:25,420
service I've also got documentation on

386
00:16:25,420 --> 00:16:27,399
there and links to source code on

387
00:16:27,399 --> 00:16:30,660
bitbucket and get up if you can get up

388
00:16:30,660 --> 00:16:33,459
and also a license hiring so we're

389
00:16:33,459 --> 00:16:35,499
hiring two developers in San Francisco a

390
00:16:35,499 --> 00:16:36,910
couple more down in Sydney so if you

391
00:16:36,910 --> 00:16:38,949
wanna work with me apply for that that's

392
00:16:38,949 --> 00:16:42,129
the URL just go there and apply thanks

