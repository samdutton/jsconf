1
00:00:09,800 --> 00:00:12,720
Hi, and thank you for coming to my talk.

2
00:00:12,720 --> 00:00:15,960
Let's get started.

3
00:00:15,960 --> 00:00:22,779
As you can tell from my outfit, I really,
really like to build fun things with LEDs,

4
00:00:22,779 --> 00:00:29,200
but I didn't know that I like to build fun
things with LEDs until recently.

5
00:00:29,200 --> 00:00:32,790
I've built like this — this is one of my
dogs.

6
00:00:32,790 --> 00:00:38,140
Despite his cool demeanour, he is actually,
like, very pumped when he gets his Rainbow

7
00:00:38,140 --> 00:00:40,410
collar on because he gets a the lot of attention.

8
00:00:40,410 --> 00:00:49,950
So, like I said, I haven't been working with
Harbour that long, only — I didn't get into

9
00:00:49,950 --> 00:00:56,650
Harvard because I had a practical problem
to solve, I — for my free time, that doesn't

10
00:00:56,650 --> 00:00:57,650
really appeal to me.

11
00:00:57,650 --> 00:01:02,860
I like impractical things, and just doing
things for fun.

12
00:01:02,860 --> 00:01:09,859
I got inspired when I visited an art museum
in Amsterdam, so this is the contemporary

13
00:01:09,859 --> 00:01:18,840
art museum in Amsterdam, and I went to see
an art exhibit by an artist called John Tingly.

14
00:01:18,840 --> 00:01:24,940
He's a Swiss artist from the 1960s and 1970s,
and, for him, art is not about standing in

15
00:01:24,940 --> 00:01:28,749
a sterile, white space and distantly gazing
as a silent painting.

16
00:01:28,749 --> 00:01:30,210
Art is meant to be playful.

17
00:01:30,210 --> 00:01:35,460
He created these installations meant to be
triggered by a viewer.

18
00:01:35,460 --> 00:01:42,140
It was meant to incorporate the viewer's experience
into the overall effects of the work of art,

19
00:01:42,140 --> 00:01:48,259
and it was meant to intentionally blur the
line between artists and viewer, so, he made

20
00:01:48,259 --> 00:01:55,530
several art installations like this where
you could pick a rotting utensil, or a pen,

21
00:01:55,530 --> 00:02:01,810
put it into the art piece, and you trigger
it, and it would create a new work of art

22
00:02:01,810 --> 00:02:02,810
itself.

23
00:02:02,810 --> 00:02:09,319
It was no longer about just watching a process,
by choosing a drawing tool, the viewer plays

24
00:02:09,319 --> 00:02:14,480
a crucial role in the creation of an entirely
new piece of art.

25
00:02:14,480 --> 00:02:20,140
When I was at the exhibit, this quote by him
stood out to me.

26
00:02:20,140 --> 00:02:24,510
It said, "I wanted something ephemeral that
would pass like a falling star.

27
00:02:24,510 --> 00:02:31,060
It had to transpire, make people dream and
talk, and this would be all."

28
00:02:31,060 --> 00:02:36,459
I really liked this idea of art as this temporary
experience that connects artist and viewer,

29
00:02:36,459 --> 00:02:39,799
and it creates this intimate moment between
strangers.

30
00:02:39,799 --> 00:02:41,709
It is just spontaneous.

31
00:02:41,709 --> 00:02:48,670
It is only meant to bring joy and inspire,
and it only lasts a short amount of time.

32
00:02:48,670 --> 00:02:49,900
That got me thinking.

33
00:02:49,900 --> 00:02:55,069
I was very excited by all these ideas and
things I had seen at the art museum, and I

34
00:02:55,069 --> 00:03:02,349
wanted to figure out how I could use my skill
set as a developer and make my own interactive

35
00:03:02,349 --> 00:03:04,269
art experience.

36
00:03:04,269 --> 00:03:09,769
But unlike John, I'm not an established artist.

37
00:03:09,769 --> 00:03:16,239
I didn't have access to a studio space, I
live in a really tiny studio apartment in

38
00:03:16,239 --> 00:03:18,580
Amsterdam, so space is very limited.

39
00:03:18,580 --> 00:03:22,209
I don't have a place to create and exhibit
something.

40
00:03:22,209 --> 00:03:30,099
So, I started thinking about how I could apply
this idea to something that is really accessible,

41
00:03:30,099 --> 00:03:34,939
and for me, that was my clothing.

42
00:03:34,939 --> 00:03:36,430
As you can see, this is my outfit.

43
00:03:36,430 --> 00:03:40,090
This is me out in Amsterdam.

44
00:03:40,090 --> 00:03:45,159
And then, I wanted to make — what was really
important to me was to make a cohesive look.

45
00:03:45,159 --> 00:03:50,769
I didn't want to throw some LEDs on a shirt,
I wanted to create something co-ordinated,

46
00:03:50,769 --> 00:03:55,840
and looked like a complete outfit.

47
00:03:55,840 --> 00:04:01,730
So, as I started out, I was a web developer,
first thought about the web app, would I wanted

48
00:04:01,730 --> 00:04:07,879
to create a web app where users could pick
colours and programmes and send it to my clothes.

49
00:04:07,879 --> 00:04:15,630
The next step which was the stuff that had
the most anxiety for me was actually building

50
00:04:15,630 --> 00:04:16,630
the hard wear into clothing.

51
00:04:16,630 --> 00:04:23,580
I had done some projects by — I had never
done anything like this before.

52
00:04:23,580 --> 00:04:28,650
And picking out the different pieces of hardware,
orchestrating everything together.

53
00:04:28,650 --> 00:04:33,120
Then the last piece of the puzzle would be
sending the negligence from the web app to

54
00:04:33,120 --> 00:04:35,360
the LEDs in my clothing.

55
00:04:35,360 --> 00:04:41,560
For that, I used a library that I'm a huge
fan of called socket IO, used it in my front-end

56
00:04:41,560 --> 00:04:45,550
web development careers.

57
00:04:45,550 --> 00:04:47,020
It is event-based messaging.

58
00:04:47,020 --> 00:04:50,590
It works in every browser on every device.

59
00:04:50,590 --> 00:04:58,199
And it's pretty simple to set up, so I was
confident that my ability to set this up.

60
00:04:58,199 --> 00:05:01,030
So, I had this great plan.

61
00:05:01,030 --> 00:05:02,030
I was super organised.

62
00:05:02,030 --> 00:05:06,220
I thought everything was going to be really,
really easy, but, as you can probably guess,

63
00:05:06,220 --> 00:05:07,220
it wasn't.

64
00:05:07,220 --> 00:05:10,500
Otherwise, I wouldn't have put that slide
in!

65
00:05:10,500 --> 00:05:14,710
I faced a lot of challenges.

66
00:05:14,710 --> 00:05:20,310
At first, I thought most would come from wiring
and soldering because it was just, like, the

67
00:05:20,310 --> 00:05:25,370
most ambitious project I had taken on.

68
00:05:25,370 --> 00:05:31,440
Even though I had setbacks during the project
that frustrated my abilities, I thought I

69
00:05:31,440 --> 00:05:39,020
would never get good at soldering, like figuring
this stuff out, I tried not to let the setbacks

70
00:05:39,020 --> 00:05:44,560
keep me down, and really building stuff, whether
it is hardware or software is about building

71
00:05:44,560 --> 00:05:49,349
iteration, improving on what you built.

72
00:05:49,349 --> 00:05:51,190
Let's start from the beginning.

73
00:05:51,190 --> 00:05:57,680
Like I showed in an earlier slide, this is
my road map for my project.

74
00:05:57,680 --> 00:06:05,560
I would just have a web app, and a socket
IO server, and just deploy that using Node

75
00:06:05,560 --> 00:06:12,300
and Express on Heroku, and then my three pieces
of clothing, buy umbrella, necklace, and skirt,

76
00:06:12,300 --> 00:06:14,670
and those would be socket IO clients.

77
00:06:14,670 --> 00:06:21,289
My main focus, I wasn't concentrating too
much on the software, so I won't speak about

78
00:06:21,289 --> 00:06:26,330
that now but focus on the hardware because
that was my biggest obstacle.

79
00:06:26,330 --> 00:06:33,289
Hardware: I needed to figure out how I was
going to control the LEDs in my clothing.

80
00:06:33,289 --> 00:06:35,310
I had a couple of requirements.

81
00:06:35,310 --> 00:06:40,920
So it needed to be small.

82
00:06:40,920 --> 00:06:44,139
It needed to be discreet, not be bulky.

83
00:06:44,139 --> 00:06:51,090
I needed it to be durable.

84
00:06:51,090 --> 00:06:53,170
Since this is clothing, I'm going to take
it on and off.

85
00:06:53,170 --> 00:06:58,150
I wanted it to last so I could wear it many,
many times.

86
00:06:58,150 --> 00:07:03,640
And my last criteria was I needed Wi-Fi connectivity
because this is how I envisioned that I would

87
00:07:03,640 --> 00:07:11,690
be able to connect the hardware to receive
messages, so I was tethering off my phone's

88
00:07:11,690 --> 00:07:15,879
Wi-Fi hot spot.

89
00:07:15,879 --> 00:07:28,220
So in my case, I chose an Adrino because microcontrollers
are really great for projects like this.

90
00:07:28,220 --> 00:07:33,080
If you're not familiar, the difference between
Adrino and Raspberry Pi, Adrino just runs

91
00:07:33,080 --> 00:07:38,610
a loop, and it's really great when you want
a programme to run, and it can be intermittently

92
00:07:38,610 --> 00:07:44,770
interrupted and update its states, and do
that, but it is just continually running a

93
00:07:44,770 --> 00:07:49,150
loop and listening.

94
00:07:49,150 --> 00:07:55,599
So I chose the Adrino.

95
00:07:55,599 --> 00:08:04,889
It is small, it has Wi-Fi built in, and a
big reason was people love this microprocessor

96
00:08:04,889 --> 00:08:11,349
that uses the ESP8266, so there are lots of
tutorials and information.

97
00:08:11,349 --> 00:08:14,860
So I just felt pretty confident there was
a lot of information where I could figure

98
00:08:14,860 --> 00:08:17,069
things out on it.

99
00:08:17,069 --> 00:08:19,229
I started on the building phase.

100
00:08:19,229 --> 00:08:25,949
If you've never worked on the hardware, you
might be curious what that looks like.

101
00:08:25,949 --> 00:08:27,030
This is what it looks like.

102
00:08:27,030 --> 00:08:29,919
It is not very glamorous in my case.

103
00:08:29,919 --> 00:08:35,310
Like I said, I have a tiny apartment in Amsterdam,
so I don't really have a work space.

104
00:08:35,310 --> 00:08:43,010
It was mainly me sitting on a yoga mat on
the floor just soldering and testing and repeating

105
00:08:43,010 --> 00:08:48,620
the process for just each of these pieces.

106
00:08:48,620 --> 00:08:53,709
When I was ready to go out in public with
this, I tried to think things through.

107
00:08:53,709 --> 00:09:01,149
I didn't want to give people I was interacting
with too much context, so I made up these

108
00:09:01,149 --> 00:09:06,649
cards that I could hand without giving context
to speak a lot to them where they could go

109
00:09:06,649 --> 00:09:12,480
to the web app and interact with it themselves.

110
00:09:12,480 --> 00:09:14,709
So I took it out.

111
00:09:14,709 --> 00:09:16,089
I took it out.

112
00:09:16,089 --> 00:09:22,660
In Amsterdam, we have a lighted bike ride,
people slap Christmas lights and things on

113
00:09:22,660 --> 00:09:24,940
their bikes, so it is a lot of fun.

114
00:09:24,940 --> 00:09:28,450
I decided to take it out.

115
00:09:28,450 --> 00:09:33,410
I want to show you a video clip of what happened
when I took it out.

116
00:09:33,410 --> 00:09:38,060
As you can see, everything's running really
good, and then my skirt goes green, and it's

117
00:09:38,060 --> 00:09:42,750
going green, and it rebooted itself, you can
see it's on a different programme to the rest

118
00:09:42,750 --> 00:09:45,140
of my outfit.

119
00:09:45,140 --> 00:09:49,290
My skirt kept crashing.

120
00:09:49,290 --> 00:09:50,800
[Laughter].

121
00:09:50,800 --> 00:09:56,680
For the people that are around me that weren't
in tech, they were just mesmerised that this

122
00:09:56,680 --> 00:09:58,540
was happening and I could control it.

123
00:09:58,540 --> 00:10:06,270
All I could see was oh, crap, my skirt or
umbrella kept crashing.

124
00:10:06,270 --> 00:10:09,690
It was really embarrassing.

125
00:10:09,690 --> 00:10:17,410
I thought I had built this really durable
thing but it was actually pretty fragile.

126
00:10:17,410 --> 00:10:21,550
I was embarrassed and disappointed.

127
00:10:21,550 --> 00:10:31,030
I went on to iteration 2, or, how I tried
to make it crash less.

128
00:10:31,030 --> 00:10:36,760
With this particular Adrino that I'm using,
when you plug it into your computer, you get

129
00:10:36,760 --> 00:10:42,990
a monitor, so you can do statements like you
do in JavaScript, like console.log statements,

130
00:10:42,990 --> 00:10:50,920
and, as a JavaScript developer, that's how
a lot of times I can quickly debug things.

131
00:10:50,920 --> 00:10:57,670
As you can see from this sample of the log
statements is that it kept disconnecting,

132
00:10:57,670 --> 00:10:59,940
and reconnecting over and over again.

133
00:10:59,940 --> 00:11:06,829
So, the Adrino was having trouble keeping
a steady connection with my socket eye you

134
00:11:06,829 --> 00:11:08,190
server.

135
00:11:08,190 --> 00:11:15,220
I took a step back, and even though I'm a
huge fan of socket IO, it is made for web

136
00:11:15,220 --> 00:11:21,820
applications communicating over HTTP, and
it's geared for browsers, so maybe I didn't

137
00:11:21,820 --> 00:11:27,920
need that for an IoT project.

138
00:11:27,920 --> 00:11:31,990
Just because the library is available, even
if it is a library that you really enjoy,

139
00:11:31,990 --> 00:11:37,000
even if someone has created another version
of that for your tech that you are using,

140
00:11:37,000 --> 00:11:40,470
it might not be the best solution.

141
00:11:40,470 --> 00:11:45,490
So I really just took a step back here, and
thought about, again, what I was up against

142
00:11:45,490 --> 00:11:47,960
when I'm quoting coding for hardware.

143
00:11:47,960 --> 00:11:52,340
When you're coding for hardware, your resources
are really at a premium.

144
00:11:52,340 --> 00:12:00,440
There's just only so much memory and ram that
you're allocated on these tiny, tiny microcontrollers,

145
00:12:00,440 --> 00:12:06,050
and, since I wasn't communicating between
a browser and a server for my hardware, maybe

146
00:12:06,050 --> 00:12:11,089
I didn't need that extra overhead for HTTP,
and I really just needed to find the bare

147
00:12:11,089 --> 00:12:16,570
minimum but still easy to implement and understand
messaging library possible.

148
00:12:16,570 --> 00:12:20,760
That's when I found out about MQTT.

149
00:12:20,760 --> 00:12:24,880
MQTT is a machine-to-machine IoT protocol.

150
00:12:24,880 --> 00:12:33,880
It is what Facebook uses for Facebook messenger
to deliver in-sink messages.

151
00:12:33,880 --> 00:12:38,490
It has been around for a while, invented in
1999 when engineers needed a solution that

152
00:12:38,490 --> 00:12:44,130
would allow for minimal battery loss, and
minimal bandwidth when connect ing sensors

153
00:12:44,130 --> 00:12:50,440
from remote areas in Africa over a shoddy
satellite connection.

154
00:12:50,440 --> 00:12:57,880
I really could give a whole talk about how
amazing MQTT is, but I just want to highlight

155
00:12:57,880 --> 00:13:02,800
some of the things that really appealed to
me and made we want to do the switch.

156
00:13:02,800 --> 00:13:09,130
So, it's based on a published subscribe architecture,
so there are clients that you can integrate

157
00:13:09,130 --> 00:13:14,320
like in my web app, and the clothing, and
there's a broker.

158
00:13:14,320 --> 00:13:16,360
Client connect to the broker.

159
00:13:16,360 --> 00:13:18,360
That mediates the communication.

160
00:13:18,360 --> 00:13:28,730
What is a key parking of this architecture
is that, when a device connects, it can subscribe

161
00:13:28,730 --> 00:13:31,230
to topics.

162
00:13:31,230 --> 00:13:37,329
When another another client puts in a message
that was that topic, that has that topic,

163
00:13:37,329 --> 00:13:40,889
it subscribes to it.

164
00:13:40,889 --> 00:13:46,550
I like this architecture because the publisher
and the subscribers don't need to know about

165
00:13:46,550 --> 00:13:48,389
each other.

166
00:13:48,389 --> 00:13:53,260
They don't have to run at the same time, and
operations on both components are not halted

167
00:13:53,260 --> 00:13:57,040
during the publishing or receiving of messages.

168
00:13:57,040 --> 00:14:04,620
It's super, super lightweight, so it's transported
over TCP/IP, it only has a two-byte overhead,

169
00:14:04,620 --> 00:14:11,550
and they meant to keep it this way, keep these
package headers really small, and every bit

170
00:14:11,550 --> 00:14:17,190
in that packet is just carefully crafted to
reduce the amount of data transmitted over

171
00:14:17,190 --> 00:14:18,190
the networks.

172
00:14:18,190 --> 00:14:25,060
It means that in comparison to other protocols
like HTTP, it doesn't load the network with

173
00:14:25,060 --> 00:14:31,279
transfer of information, that's just necessary
to allow the protocol to run.

174
00:14:31,279 --> 00:14:36,770
And then, having this small overhead, it's
really ideal for IoT because it lowers the

175
00:14:36,770 --> 00:14:40,639
amount of data that might be transmitted over
really constrained networks.

176
00:14:40,639 --> 00:14:48,440
And another thing I really like is the MQTT
has a really short and readable spec, and

177
00:14:48,440 --> 00:14:51,210
it uses simple verbs to describe actions.

178
00:14:51,210 --> 00:15:00,860
Basically, there are five verbs in MQTT: connect,
disconnect, publish, subscribe, and ping.

179
00:15:00,860 --> 00:15:09,029
So I was really jazzed up about MQTT and I
couldn't wait to switch out my socket IO client

180
00:15:09,029 --> 00:15:13,040
and server and mews MQTT instead.

181
00:15:13,040 --> 00:15:17,440
I started with the web app.

182
00:15:17,440 --> 00:15:24,950
There is mqtt.js library, and you can Lewis
it in the line ry.

183
00:15:24,950 --> 00:15:32,170
It is written in the JavaScript, and you can
use it in Node and in the browser.

184
00:15:32,170 --> 00:15:37,040
I think the code is pretty easy to follow,
and that's one reason I really liked implementing

185
00:15:37,040 --> 00:15:39,720
this because it is only really a few lines.

186
00:15:39,720 --> 00:15:47,100
I require the library, and then I create a
client that connects to the URL wherever in

187
00:15:47,100 --> 00:15:53,850
the internet I have my broker created, and
then, in this example, if I have a Rainbow

188
00:15:53,850 --> 00:16:00,850
button to change my clothes, so I just create
a function, so, whenever that button is clicked,

189
00:16:00,850 --> 00:16:06,060
it sends a message to the broker with the
topic lights, so that is what I have my outfit

190
00:16:06,060 --> 00:16:13,440
clients subscribe to, and it can send a payload
string of Rainbow.

191
00:16:13,440 --> 00:16:20,510
Next set up a client on Adrino.

192
00:16:20,510 --> 00:16:26,380
Even if you're not familiar with Adrino C++
code, it's pretty much the same as the other

193
00:16:26,380 --> 00:16:27,380
client.

194
00:16:27,380 --> 00:16:34,089
Just include the library, I tell it where
the broker is located, which on the web, where

195
00:16:34,089 --> 00:16:41,140
to find it, and it subscribes to the topic
lights, and then, whenever a message is received,

196
00:16:41,140 --> 00:16:47,630
just this message method is called, and then
it can just interpret the messages sent, and

197
00:16:47,630 --> 00:16:52,450
then figure out what programme it needs to
switch to.

198
00:16:52,450 --> 00:16:54,850
So I had my clients set up.

199
00:16:54,850 --> 00:16:59,600
It was all going like pretty smoothly, and
the next, I needed to set up the broker so

200
00:16:59,600 --> 00:17:02,370
everything could talk to each other.

201
00:17:02,370 --> 00:17:05,420
And I just want to show this slide again.

202
00:17:05,420 --> 00:17:11,420
Like I said before, I deployed everything
just on one express server on Heroku.

203
00:17:11,420 --> 00:17:20,080
When I went to set up my brother, even though
I love Heroku, I found out you don't have

204
00:17:20,080 --> 00:17:21,080
port access.

205
00:17:21,080 --> 00:17:28,910
You can't specify specific ports, and for
this MQTT protocol, the port that specified

206
00:17:28,910 --> 00:17:35,720
you need to use for communication is 1883,
so that was a slight hiccup because I couldn't

207
00:17:35,720 --> 00:17:41,130
build my own MQTT broker.

208
00:17:41,130 --> 00:17:46,580
I didn't have access to the port, I couldn't
set this up but I was not ready to leave Heroku.

209
00:17:46,580 --> 00:17:52,480
I wanted to see if all this stuff was going
to actually work together well before I actually

210
00:17:52,480 --> 00:17:54,590
moved to a different service.

211
00:17:54,590 --> 00:17:59,530
So I went looking for an external MQTT broker
service, and it turns out there is a bunch

212
00:17:59,530 --> 00:18:01,370
of them.

213
00:18:01,370 --> 00:18:07,160
The one I ended up choosing is called Shifter
IO, an IoT prototyping platform, I chose it

214
00:18:07,160 --> 00:18:08,800
because it is free.

215
00:18:08,800 --> 00:18:13,920
You just give your email and you get a key
and a token.

216
00:18:13,920 --> 00:18:21,190
Compared to other broker services, it doesn't
seem to limit the number of messages that

217
00:18:21,190 --> 00:18:23,490
you can receive per minute.

218
00:18:23,490 --> 00:18:29,700
Some do, and you have to peel pay if you receive
more than a few messages a minute.

219
00:18:29,700 --> 00:18:32,350
I tried it out, and it worked.

220
00:18:32,350 --> 00:18:37,090
It worked really, really well compared to
my first attempt.

221
00:18:37,090 --> 00:18:40,160
I was happy but I wasn't ecstatic.

222
00:18:40,160 --> 00:18:46,090
Here I was, relying on this small external
broker service which wasn't optimal for me

223
00:18:46,090 --> 00:18:48,300
because there are a lot of unknowns.

224
00:18:48,300 --> 00:18:52,310
I didn't know that much about this company
and I wanted to make something really reliable,

225
00:18:52,310 --> 00:18:58,690
and I really felt to make it really reliable,
I needed to have control over it.

226
00:18:58,690 --> 00:19:04,980
As you can probably guess, the next thing
I decided to do was create my own broker.

227
00:19:04,980 --> 00:19:09,770
To do that, I had to move from Heroku to Digital
Ocean which gave me a little bit of anxiety

228
00:19:09,770 --> 00:19:18,970
because I've not that comfortable or skilled
yet in doing like DevOps-y kind of stuff,

229
00:19:18,970 --> 00:19:21,370
but it worked out.

230
00:19:21,370 --> 00:19:26,570
You should not be scared of that if you're
thinking about moving to a service like that.

231
00:19:26,570 --> 00:19:31,330
So, to build this, I used this broker library
called Yates.

232
00:19:31,330 --> 00:19:33,240
What I really — 80s.

233
00:19:33,240 --> 00:19:41,130
What I liked this, was using streams, and
just, it's a really new modern library, is

234
00:19:41,130 --> 00:19:43,810
that the broker is embeddable.

235
00:19:43,810 --> 00:19:51,350
It would be embeddable in my current express
server that I was using to serve my website,

236
00:19:51,350 --> 00:19:53,780
so I would really have minimal configuration
change.

237
00:19:53,780 --> 00:19:59,090
I was happy I wouldn't have to build a second
server just for handling this messaging.

238
00:19:59,090 --> 00:20:10,780
So, so implement the MQTT broker, I include
the library and create the MQTT server and

239
00:20:10,780 --> 00:20:16,220
the HTTP server, because as I said, this was
also serving my web app.

240
00:20:16,220 --> 00:20:22,750
I specified the ports they needed to listen
on to.

241
00:20:22,750 --> 00:20:27,880
Then, at the bottom, you can see that, with
, and I think this is really cool as well,

242
00:20:27,880 --> 00:20:36,041
I can add on so that the HTTP serve er that
is serving my website, it can have MQTT over

243
00:20:36,041 --> 00:20:43,790
WebSocket capabilities, so, those messages
coming from my web app, they are served using

244
00:20:43,790 --> 00:20:48,780
WebSockets from the HTTP server.

245
00:20:48,780 --> 00:20:55,170
I was pretty excited because this was working
really good, and I had figured out a lot of

246
00:20:55,170 --> 00:21:01,800
things, and I conquered DevOps' fears, so
I was pretty excited.

247
00:21:01,800 --> 00:21:07,910
The last thing I did, because I wanted to
make this rock solid, which, I hope in a you

248
00:21:07,910 --> 00:21:15,030
phenomena minutes that I show that it is rock
solid, is that I upgraded the microcontroller.

249
00:21:15,030 --> 00:21:22,530
So I decided to change to the Feather M0 Wi-Fi,
and there are a couple of of reasons for that.

250
00:21:22,530 --> 00:21:26,870
It has low power management, so I wanted to
stretch out as much out of my battery life

251
00:21:26,870 --> 00:21:34,500
as I could, and the main reason was that it
has a separate Wi-Fi module, so what that

252
00:21:34,500 --> 00:21:40,640
means is that it doesn't have to yield all
the time to the Wi-Fi core since it is a separate

253
00:21:40,640 --> 00:21:47,260
chip, so you get full rein of the processor
in timing, and it just means you have high-speed

254
00:21:47,260 --> 00:21:49,750
reliable Wi-Fi that doesn't crash.

255
00:21:49,750 --> 00:21:55,260
There is a downside, and that is that it is
twice the cost of the other microcontroller

256
00:21:55,260 --> 00:22:00,150
I was using, so the Feather is around 18 euros,
and this cost 35.

257
00:22:00,150 --> 00:22:10,490
That was downside that wasn't — it was worth
the extra cost to get the reliability.

258
00:22:10,490 --> 00:22:14,840
It is demo time.

259
00:22:14,840 --> 00:22:18,340
This is probably the biggest audience I have
had who can interact with this.

260
00:22:18,340 --> 00:22:32,910
I invite you to go to flashylights.nl and
you can change what it looks like.

261
00:22:32,910 --> 00:22:37,400
This is meant to be a one-on-one experience
so it might get glitchy with so many people

262
00:22:37,400 --> 00:22:40,910
sending to it at the same time.

263
00:22:40,910 --> 00:22:45,990
Let's go for it!

264
00:22:45,990 --> 00:22:52,590
While you're playing around, I want to leave
you with my closing thoughts that you might

265
00:22:52,590 --> 00:22:59,860
not be aware that I'm a super introvert, and
this was a really experiment to do as an introvert.

266
00:22:59,860 --> 00:23:06,920
I'm not one that attracting attention and
actively seeking people to interact with me,

267
00:23:06,920 --> 00:23:12,340
it's completely out of my comfort zone.

268
00:23:12,340 --> 00:23:15,560
Sorry!

269
00:23:15,560 --> 00:23:20,080
But it was also an experiment that really
pushed me to deal with my own reactions to

270
00:23:20,080 --> 00:23:26,710
those inter action, and I wanted to see if
I could bring a momentary joy and whimsy to

271
00:23:26,710 --> 00:23:31,920
strangers by giving them free rein over my
appearance.

272
00:23:31,920 --> 00:23:37,590
Outside of our tech bubble, this is not an
application, this is an application, like

273
00:23:37,590 --> 00:23:44,730
this is not one that most people have seen
and experienced, so it is really — I also

274
00:23:44,730 --> 00:23:50,950
found that I was breaking stereotypes about
tech with strangers, like they were kind of

275
00:23:50,950 --> 00:23:57,030
taken aback when they realised that I had
built this, and you could do these kind of

276
00:23:57,030 --> 00:24:02,870
weird experiments with tech, and kind of questioned
what you could build, and who was capable

277
00:24:02,870 --> 00:24:05,420
of billing those things in tech.

278
00:24:05,420 --> 00:24:07,170
That's it.

279
00:24:07,170 --> 00:24:09,700
Thank you for listening!

280
00:24:09,700 --> 00:24:11,920
[Applause].

281
00:24:11,920 --> 00:24:14,140
[Cheering].

282
00:24:14,140 --> 00:24:24,680
I also build other fun things with LEDs, so,
if you're interested in seeing those, I'm

283
00:24:24,680 --> 00:24:28,501
terrible at blogging at things, but I post
pictures on Twitter, and later tonight, I

284
00:24:28,501 --> 00:24:34,330
made another that is not interactive but still
really, really cool that I want to wear tonight

285
00:24:34,330 --> 00:24:38,120
at the party, so, if you see me, say hi, don't
be shy.

286
00:24:38,120 --> 00:24:39,120
Thank you.

287
00:24:39,120 --> 00:24:40,120
[Cheering].

