1
00:00:00,120 --> 00:00:10,400

you

2
00:00:10,410 --> 00:00:13,809
so in 1989 Tim berners-lee first

3
00:00:13,809 --> 00:00:15,790
proposed the world wide web project and

4
00:00:15,790 --> 00:00:18,039
with that he'd his team at CERN invented

5
00:00:18,039 --> 00:00:22,150
HTTP and HTML the first implementation

6
00:00:22,150 --> 00:00:25,020
had one HP method and it was gap and

7
00:00:25,020 --> 00:00:29,220
every response returned a HTML page

8
00:00:29,220 --> 00:00:32,020
years before the creation of JPEGs or

9
00:00:32,020 --> 00:00:35,950
Windows 3.1 with just HTTP and HTML the

10
00:00:35,950 --> 00:00:38,500
first-ever web page was deployed and was

11
00:00:38,500 --> 00:00:42,850
responsive as the first version of HTTP

12
00:00:42,850 --> 00:00:46,360
was documented in 1991 multiple versions

13
00:00:46,360 --> 00:00:47,620
and revisions over the next eight years

14
00:00:47,620 --> 00:00:51,370
in a period of rapid evolution until

15
00:00:51,370 --> 00:00:55,079
until HTTP 1.1 was finalized in 1999 and

16
00:00:55,079 --> 00:00:58,300
what internet was born they should be

17
00:00:58,300 --> 00:01:00,190
1.1 is what most of us would know is HP

18
00:01:00,190 --> 00:01:01,899
one what most websites run on at the

19
00:01:01,899 --> 00:01:04,960
moment so I may use HP 11.1 it to change

20
00:01:04,960 --> 00:01:06,939
ibly but they're the same thing for the

21
00:01:06,939 --> 00:01:11,799
extent of this talk in the preceding 20

22
00:01:11,799 --> 00:01:13,479
years generations of developers use

23
00:01:13,479 --> 00:01:14,979
these simple building blocks to create

24
00:01:14,979 --> 00:01:17,020
engaging experiences of communities for

25
00:01:17,020 --> 00:01:18,789
journalists musicians artists designers

26
00:01:18,789 --> 00:01:20,679
crafters gamers and everything in

27
00:01:20,679 --> 00:01:23,439
between we went from 386 s the Pentiums

28
00:01:23,439 --> 00:01:25,299
to watches it more computing power than

29
00:01:25,299 --> 00:01:27,429
the Space Shuttle has said people to the

30
00:01:27,429 --> 00:01:32,319
moon we added JavaScript CSS images and

31
00:01:32,319 --> 00:01:33,759
most importantly gifts to our toolbox

32
00:01:33,759 --> 00:01:36,189
and with them we built new ways to

33
00:01:36,189 --> 00:01:37,630
connect to communicate share in our

34
00:01:37,630 --> 00:01:39,249
lives and engage with the world around

35
00:01:39,249 --> 00:01:42,939
us the hypertext Transfer Protocol of

36
00:01:42,939 --> 00:01:44,229
the revolutionary for its time is

37
00:01:44,229 --> 00:01:45,429
crumbling under the weight of our modern

38
00:01:45,429 --> 00:01:47,919
ambitions the design of the protocols at

39
00:01:47,919 --> 00:01:49,329
odds with what we as developers are

40
00:01:49,329 --> 00:01:50,979
building and with what our customers

41
00:01:50,979 --> 00:01:56,259
expect in 1999 google announced they're

42
00:01:56,259 --> 00:01:57,729
working internally on a modern revision

43
00:01:57,729 --> 00:02:00,639
of HTTP they named a speedy speedy

44
00:02:00,639 --> 00:02:02,049
primarily focus on reducing latency

45
00:02:02,049 --> 00:02:04,479
which as a result had larger performance

46
00:02:04,479 --> 00:02:07,119
improvements of HTTP one significant

47
00:02:07,119 --> 00:02:08,619
performance improvements to rapid

48
00:02:08,619 --> 00:02:09,910
adoption of the new protocol and

49
00:02:09,910 --> 00:02:11,379
browsers and large sites like Facebook

50
00:02:11,379 --> 00:02:16,000
and Google in 2012 looking to revitalize

51
00:02:16,000 --> 00:02:16,810
HTTP to

52
00:02:16,810 --> 00:02:19,840
nuvo HP with new version working group

53
00:02:19,840 --> 00:02:21,610
took speedy and made it the initial spec

54
00:02:21,610 --> 00:02:25,450
for HTTP to nature to spec was finalized

55
00:02:25,450 --> 00:02:28,180
last year and as of now all major

56
00:02:28,180 --> 00:02:29,860
browsers and web server support in the

57
00:02:29,860 --> 00:02:34,030
HTTP 20 Spidey speedy for better or for

58
00:02:34,030 --> 00:02:36,610
worse the story of HTTP two has become

59
00:02:36,610 --> 00:02:38,260
tired to notions of free performance and

60
00:02:38,260 --> 00:02:39,099
help make everything that web

61
00:02:39,099 --> 00:02:41,380
performance sprung unfortunately the

62
00:02:41,380 --> 00:02:43,060
promise of free performance comes with

63
00:02:43,060 --> 00:02:44,590
some fine print and that's what I'm here

64
00:02:44,590 --> 00:02:50,280
to talk about today so uh hi I'm Michael

65
00:02:50,280 --> 00:02:53,739
I'm from Australia and I'm a front-end

66
00:02:53,739 --> 00:02:56,650
performance engineer at 99designs and as

67
00:02:56,650 --> 00:02:58,390
was said earlier and one of the

68
00:02:58,390 --> 00:03:00,130
organizers of CSS company has confessed

69
00:03:00,130 --> 00:03:02,440
rally on and i work on suburban source

70
00:03:02,440 --> 00:03:03,819
projects you might be familiar with in

71
00:03:03,819 --> 00:03:08,110
nerd Sasson lips eyes i want to start

72
00:03:08,110 --> 00:03:09,220
off by saying what this talk won't be

73
00:03:09,220 --> 00:03:12,280
about this is not insured HTTP to a lot

74
00:03:12,280 --> 00:03:13,480
of great material out there a lot of

75
00:03:13,480 --> 00:03:15,430
great talks and blog posts that could do

76
00:03:15,430 --> 00:03:17,880
much better than I could in this time

77
00:03:17,880 --> 00:03:20,170
what I will be talking about is some of

78
00:03:20,170 --> 00:03:22,030
the differences when HTTP one HTTP two

79
00:03:22,030 --> 00:03:24,420
and what this can mean for performance i

80
00:03:24,420 --> 00:03:26,560
will quickly cover some fundamentals

81
00:03:26,560 --> 00:03:27,579
necessary to illustrate these

82
00:03:27,579 --> 00:03:30,070
differences so if networking protocols

83
00:03:30,070 --> 00:03:32,200
in HTTP aren't your thing don't worry i

84
00:03:32,200 --> 00:03:36,209
got you covered so let's jump right in

85
00:03:36,209 --> 00:03:40,000
all in all HTTP is fairly simple you

86
00:03:40,000 --> 00:03:41,530
connect to a server and then with a

87
00:03:41,530 --> 00:03:43,239
small set of commands you instruct the

88
00:03:43,239 --> 00:03:44,650
server perform some action and it

89
00:03:44,650 --> 00:03:47,470
responds these actions issued as HTTP

90
00:03:47,470 --> 00:03:51,519
methods in requests and metadata the

91
00:03:51,519 --> 00:03:54,090
most common method being the get method

92
00:03:54,090 --> 00:03:56,889
we instruct HTTP server to respond with

93
00:03:56,889 --> 00:03:59,010
the contents of a file at a certain path

94
00:03:59,010 --> 00:04:01,209
this simple interaction is largely

95
00:04:01,209 --> 00:04:03,489
unchanged in the 25 years since tim

96
00:04:03,489 --> 00:04:08,440
berners-lee created HTML HTTP they're a

97
00:04:08,440 --> 00:04:10,090
bunch of other methods that I won't

98
00:04:10,090 --> 00:04:11,440
cover today but for the most part of

99
00:04:11,440 --> 00:04:13,630
boils down to a client in our case a

100
00:04:13,630 --> 00:04:15,639
browser connects to a server and

101
00:04:15,639 --> 00:04:19,000
requests something with metadata and a

102
00:04:19,000 --> 00:04:21,430
method and the server responds with

103
00:04:21,430 --> 00:04:23,950
content something like CSS HTML

104
00:04:23,950 --> 00:04:28,840
Javascript underlying all this is our

105
00:04:28,840 --> 00:04:31,419
tcp/ip this is the primary networking

106
00:04:31,419 --> 00:04:33,460
protocol for all HP communication and

107
00:04:33,460 --> 00:04:37,360
for the Internet in general it's with

108
00:04:37,360 --> 00:04:39,550
this it's with these two protocols TCP

109
00:04:39,550 --> 00:04:43,180
and IP that the two remote servers are

110
00:04:43,180 --> 00:04:44,349
able to communicate and exchange

111
00:04:44,349 --> 00:04:48,280
information efficiently being that it is

112
00:04:48,280 --> 00:04:50,140
the primary protocol underpinning most

113
00:04:50,140 --> 00:04:51,880
to the internet it's integral part of

114
00:04:51,880 --> 00:04:53,140
what network performance is like when

115
00:04:53,140 --> 00:04:56,349
using it so we'll cover that a bit one

116
00:04:56,349 --> 00:04:59,620
of the important things of tcp/ip is the

117
00:04:59,620 --> 00:05:02,110
connection and that involves a three-way

118
00:05:02,110 --> 00:05:05,729
handshake essentially a client say your

119
00:05:05,729 --> 00:05:08,380
browser will set will check to a server

120
00:05:08,380 --> 00:05:11,169
and say hey Here I am with a syn packet

121
00:05:11,169 --> 00:05:14,320
and a browser will say Here I am I see

122
00:05:14,320 --> 00:05:16,570
you with a syn ACK packet and their clan

123
00:05:16,570 --> 00:05:18,880
will be like I see you at the next are

124
00:05:18,880 --> 00:05:23,020
communicating the details this aren't

125
00:05:23,020 --> 00:05:24,340
particularly important the important

126
00:05:24,340 --> 00:05:26,020
thing to take away from this is it takes

127
00:05:26,020 --> 00:05:29,260
a full networking round trip from you to

128
00:05:29,260 --> 00:05:30,880
the server on server back to you before

129
00:05:30,880 --> 00:05:35,260
you can exchange any information so we

130
00:05:35,260 --> 00:05:37,000
look at the anatomy of a request for a

131
00:05:37,000 --> 00:05:40,169
page say the index HTML page first

132
00:05:40,169 --> 00:05:42,370
client say the browser connects to a

133
00:05:42,370 --> 00:05:44,860
server I do a handshake at one round

134
00:05:44,860 --> 00:05:48,219
trip and then the browser can say hey

135
00:05:48,219 --> 00:05:51,430
give me index dot HTML that goes to

136
00:05:51,430 --> 00:05:53,050
server server does some work generates

137
00:05:53,050 --> 00:05:55,030
the page rather be WordPress or a static

138
00:05:55,030 --> 00:05:57,130
file the returns response in this case

139
00:05:57,130 --> 00:06:00,640
HTML and that connection is closed if in

140
00:06:00,640 --> 00:06:02,740
that response HTML there was a link to a

141
00:06:02,740 --> 00:06:05,620
CSS file that process starts again you

142
00:06:05,620 --> 00:06:08,169
find the server you handshake you then

143
00:06:08,169 --> 00:06:10,510
request the server for a thing the

144
00:06:10,510 --> 00:06:11,919
server does some work and returns it to

145
00:06:11,919 --> 00:06:14,830
you and that connection is closed so

146
00:06:14,830 --> 00:06:16,750
this is for round trips in total to ask

147
00:06:16,750 --> 00:06:21,580
for a HTML file and a CSS file and this

148
00:06:21,580 --> 00:06:24,180
this is important because one of the

149
00:06:24,180 --> 00:06:26,830
fundamental things of tcp and white is

150
00:06:26,830 --> 00:06:29,380
so reliable is it is a FIFO queue so

151
00:06:29,380 --> 00:06:31,150
first in first out so the first thing a

152
00:06:31,150 --> 00:06:33,280
server sends to you must be the first

153
00:06:33,280 --> 00:06:34,660
thing you receive and your receipt and

154
00:06:34,660 --> 00:06:35,820
you read them in order

155
00:06:35,820 --> 00:06:37,380
if for some reason along the way due to

156
00:06:37,380 --> 00:06:39,870
congestion or happenstance one of the

157
00:06:39,870 --> 00:06:41,550
one of the Packers of data has dropped

158
00:06:41,550 --> 00:06:43,800
on the floor or sequential packets are

159
00:06:43,800 --> 00:06:45,750
just held by this by the client and

160
00:06:45,750 --> 00:06:48,510
buffered and not read until we're able

161
00:06:48,510 --> 00:06:50,100
to tell the server that hey we missed

162
00:06:50,100 --> 00:06:51,810
something please resend it and then it

163
00:06:51,810 --> 00:06:53,130
receives that and then reads the rescue

164
00:06:53,130 --> 00:06:54,840
services that are it's a bit more

165
00:06:54,840 --> 00:06:56,250
complicated than that but that's really

166
00:06:56,250 --> 00:06:59,220
what we need for this talk and this will

167
00:06:59,220 --> 00:07:00,510
happens at a layer well below anything

168
00:07:00,510 --> 00:07:02,250
we see this is a networking layer in

169
00:07:02,250 --> 00:07:04,710
often in your OS or in your browser and

170
00:07:04,710 --> 00:07:06,480
so we have no control over it in our

171
00:07:06,480 --> 00:07:08,520
code and the end result is that things

172
00:07:08,520 --> 00:07:14,010
feel slow another impact of TCP another

173
00:07:14,010 --> 00:07:15,330
feature tease be its position control

174
00:07:15,330 --> 00:07:17,760
this is necessary because over the

175
00:07:17,760 --> 00:07:19,340
Internet there's many different

176
00:07:19,340 --> 00:07:23,340
bandwidths and between you and the

177
00:07:23,340 --> 00:07:25,170
server community came to is intermediate

178
00:07:25,170 --> 00:07:27,600
Abraxas many different computers and

179
00:07:27,600 --> 00:07:29,490
servers always carry different bandwidth

180
00:07:29,490 --> 00:07:31,560
and amplify that across the entire world

181
00:07:31,560 --> 00:07:34,080
you can get into a case where people are

182
00:07:34,080 --> 00:07:35,370
communicating at different speeds and

183
00:07:35,370 --> 00:07:38,850
packets start backing up and you start

184
00:07:38,850 --> 00:07:40,140
roping packets and soon you start

185
00:07:40,140 --> 00:07:42,300
dropping packets the service has to

186
00:07:42,300 --> 00:07:44,190
retransmit those packets that causes

187
00:07:44,190 --> 00:07:45,780
more congestion causing you to drop more

188
00:07:45,780 --> 00:07:48,540
packets causing you more weeks more

189
00:07:48,540 --> 00:07:50,310
retransmits and more congestion and it

190
00:07:50,310 --> 00:07:52,140
can go on on to the points can cripple

191
00:07:52,140 --> 00:07:54,660
entire networks and has in the past so

192
00:07:54,660 --> 00:07:57,060
as a result congestion controls start

193
00:07:57,060 --> 00:07:58,350
with sending a really small window

194
00:07:58,350 --> 00:07:59,760
saying I'm going to send you a little

195
00:07:59,760 --> 00:08:01,530
bit and then the longer the connection

196
00:08:01,530 --> 00:08:03,510
lives on the mortal sin kind of a test

197
00:08:03,510 --> 00:08:04,890
to see whether capabilities that

198
00:08:04,890 --> 00:08:07,950
bandwidth are and that's interesting

199
00:08:07,950 --> 00:08:10,790
because it end up in this property of

200
00:08:10,790 --> 00:08:14,040
TCP where most internet connect

201
00:08:14,040 --> 00:08:15,900
communication is latency bound an

202
00:08:15,900 --> 00:08:17,970
experiment done at Google a couple years

203
00:08:17,970 --> 00:08:21,000
ago probably while ago now showed that

204
00:08:21,000 --> 00:08:23,250
with increases in bandwidth start show

205
00:08:23,250 --> 00:08:24,990
starring diminishing returns once about

206
00:08:24,990 --> 00:08:27,840
5 megabits per second but increased but

207
00:08:27,840 --> 00:08:30,570
decreases in latency have a linear

208
00:08:30,570 --> 00:08:33,240
increase over time so the more you can

209
00:08:33,240 --> 00:08:34,919
shrink down latency the faster things

210
00:08:34,919 --> 00:08:36,990
get and this is due to the fact

211
00:08:36,990 --> 00:08:38,969
everything requires your back and forth

212
00:08:38,969 --> 00:08:43,120
round trip and the handshake must happen

213
00:08:43,130 --> 00:08:46,440
so one of the things brought into HP 1.1

214
00:08:46,440 --> 00:08:48,270
was you I'd ever keep alive in that you

215
00:08:48,270 --> 00:08:49,320
can connect to a server

216
00:08:49,320 --> 00:08:51,570
and keep that connection open for

217
00:08:51,570 --> 00:08:53,820
multiple requests so still got a request

218
00:08:53,820 --> 00:08:55,740
in what I sort of say please give me the

219
00:08:55,740 --> 00:08:57,660
HTML file now please give me the CSS

220
00:08:57,660 --> 00:08:59,790
file but you save yourself that extra

221
00:08:59,790 --> 00:09:01,320
round trip in every connection each time

222
00:09:01,320 --> 00:09:03,390
a new file until eventually one of this

223
00:09:03,390 --> 00:09:04,980
one of the other client of the service

224
00:09:04,980 --> 00:09:08,610
says ok I'm done close connection an

225
00:09:08,610 --> 00:09:11,130
HTTP 1.1 was tried to bring in this idea

226
00:09:11,130 --> 00:09:13,830
of pipelining extending the keep alive

227
00:09:13,830 --> 00:09:16,290
keeping a connection over but saying hey

228
00:09:16,290 --> 00:09:18,390
I know I need these three files give me

229
00:09:18,390 --> 00:09:21,840
these three files at once and this runs

230
00:09:21,840 --> 00:09:24,240
into the heddle ahead of line problem in

231
00:09:24,240 --> 00:09:28,110
that the server must respond with one of

232
00:09:28,110 --> 00:09:29,850
the files generally the first of all you

233
00:09:29,850 --> 00:09:31,740
send but ice pack that receives an order

234
00:09:31,740 --> 00:09:34,230
so you can't intermix sending those

235
00:09:34,230 --> 00:09:36,300
files they must be sent in order so you

236
00:09:36,300 --> 00:09:39,680
kind of lose a lot of the benefits of

237
00:09:39,680 --> 00:09:43,950
use a lot of benefits of what you expect

238
00:09:43,950 --> 00:09:47,130
miss because you can't multiplex so this

239
00:09:47,130 --> 00:09:48,570
actually did have a lot of benefits in a

240
00:09:48,570 --> 00:09:50,250
lot of cases but it proved really hard

241
00:09:50,250 --> 00:09:53,430
to do well and there are classic cases

242
00:09:53,430 --> 00:09:55,920
in Safari where you would mix up the

243
00:09:55,920 --> 00:09:57,780
filename you requested with the actual

244
00:09:57,780 --> 00:09:59,550
body causing image to show in the wrong

245
00:09:59,550 --> 00:10:02,280
areas and intermediary proxies in the

246
00:10:02,280 --> 00:10:03,780
world of which there are many would

247
00:10:03,780 --> 00:10:05,430
understand these properly and mix up

248
00:10:05,430 --> 00:10:07,110
response and garble responses so

249
00:10:07,110 --> 00:10:08,580
although it actually has a lot of

250
00:10:08,580 --> 00:10:10,230
benefits it's hard to do well and

251
00:10:10,230 --> 00:10:11,580
there's a lot of bad actors in the world

252
00:10:11,580 --> 00:10:13,650
up there that get in the way of it so

253
00:10:13,650 --> 00:10:15,450
most browsers and servers will support

254
00:10:15,450 --> 00:10:17,010
this where divorce turned off and

255
00:10:17,010 --> 00:10:21,900
considered an advanced feature and

256
00:10:21,900 --> 00:10:23,640
keeping these with these things in mind

257
00:10:23,640 --> 00:10:26,460
you can see where when our common best

258
00:10:26,460 --> 00:10:28,320
performance factors come from the exact

259
00:10:28,320 --> 00:10:30,240
concatenations friday in lining and

260
00:10:30,240 --> 00:10:31,920
domain shouting are all ways to work

261
00:10:31,920 --> 00:10:33,690
around opening more connections and

262
00:10:33,690 --> 00:10:37,440
doing more handshakes and avoiding

263
00:10:37,440 --> 00:10:41,280
latency this is critical path is a way

264
00:10:41,280 --> 00:10:42,780
of working around condition control in

265
00:10:42,780 --> 00:10:45,990
the idea being you put C inline CSS into

266
00:10:45,990 --> 00:10:48,180
the into your page but only put enough

267
00:10:48,180 --> 00:10:49,380
in so you give fit within that first

268
00:10:49,380 --> 00:10:51,360
window while toothpaste or testing your

269
00:10:51,360 --> 00:10:55,470
connection so this is where HD video

270
00:10:55,470 --> 00:10:58,760
comes in h2b to like

271
00:10:58,760 --> 00:11:00,770
keeper lives and pipelining go forward

272
00:11:00,770 --> 00:11:02,540
which is under reducing latency ways you

273
00:11:02,540 --> 00:11:05,630
long live connections but something it

274
00:11:05,630 --> 00:11:07,360
does differently is this idea of streams

275
00:11:07,360 --> 00:11:09,830
and that you have one connection to a

276
00:11:09,830 --> 00:11:11,720
server within that connection you have

277
00:11:11,720 --> 00:11:14,090
multiple streams so this is like an

278
00:11:14,090 --> 00:11:17,060
analogy of a kind of lanes on a highway

279
00:11:17,060 --> 00:11:18,350
you have a highway to serve multiple

280
00:11:18,350 --> 00:11:20,360
lanes a communication independent from

281
00:11:20,360 --> 00:11:24,530
each other but they're bi-directional so

282
00:11:24,530 --> 00:11:27,260
I can ask I can ask for three files at

283
00:11:27,260 --> 00:11:29,750
the same time on one stream and get

284
00:11:29,750 --> 00:11:31,490
those responses back on that stream

285
00:11:31,490 --> 00:11:33,830
completely separate from another stream

286
00:11:33,830 --> 00:11:37,640
which is regressing JavaScript and what

287
00:11:37,640 --> 00:11:38,930
it has over pipelining that their of

288
00:11:38,930 --> 00:11:41,150
multiplexing so as a request three CSS

289
00:11:41,150 --> 00:11:43,460
files the server can respond to those

290
00:11:43,460 --> 00:11:45,800
files in any order and in bits of pieces

291
00:11:45,800 --> 00:11:47,810
so I can get the headers for one file

292
00:11:47,810 --> 00:11:49,280
get the headers for another file and

293
00:11:49,280 --> 00:11:51,260
it's part of its content and then after

294
00:11:51,260 --> 00:11:52,610
that the next pack could be the content

295
00:11:52,610 --> 00:11:54,920
of different file and this is baked into

296
00:11:54,920 --> 00:11:56,540
the protocol so the servers and clients

297
00:11:56,540 --> 00:11:58,250
understand how to reassemble these

298
00:11:58,250 --> 00:12:00,710
things and each one of these packets

299
00:12:00,710 --> 00:12:03,500
here is what's called the frame we're

300
00:12:03,500 --> 00:12:04,550
not going to dig into frames too much

301
00:12:04,550 --> 00:12:07,960
for this so as you can see with

302
00:12:07,960 --> 00:12:10,940
multiplexing and a long live connections

303
00:12:10,940 --> 00:12:13,070
and streams we're reducing a lot of

304
00:12:13,070 --> 00:12:15,560
problems with bandwidth and working

305
00:12:15,560 --> 00:12:17,210
around under the issues gesture control

306
00:12:17,210 --> 00:12:19,970
being lots of tiny requests I mean one

307
00:12:19,970 --> 00:12:21,650
on the request we at logic just from

308
00:12:21,650 --> 00:12:23,600
troy windows we go flow more data more

309
00:12:23,600 --> 00:12:26,750
freely and this is why people are

310
00:12:26,750 --> 00:12:29,720
telling us that I really when I

311
00:12:29,720 --> 00:12:31,040
performance is wrong you know I'm going

312
00:12:31,040 --> 00:12:32,240
to worry about latency anyway about

313
00:12:32,240 --> 00:12:34,460
congestion windows or bad with is free

314
00:12:34,460 --> 00:12:38,000
and latency is not a problem and I took

315
00:12:38,000 --> 00:12:41,300
this the research on internet is all in

316
00:12:41,300 --> 00:12:43,460
this behavior it was very little work

317
00:12:43,460 --> 00:12:45,680
bad we said about HTTP so with this

318
00:12:45,680 --> 00:12:48,590
confidence we started moving towards htp

319
00:12:48,590 --> 00:12:53,450
to at 99designs and before switch for

320
00:12:53,450 --> 00:12:55,840
flicking the switch on this I

321
00:12:55,840 --> 00:12:58,430
confidently said to my see to my boss

322
00:12:58,430 --> 00:13:00,170
that it couldn't possibly any slower

323
00:13:00,170 --> 00:13:04,580
we're fine to my chagrin we rapidly

324
00:13:04,580 --> 00:13:07,370
started seeing decreases are we we soon

325
00:13:07,370 --> 00:13:10,310
saw decreases in sight performance so

326
00:13:10,310 --> 00:13:11,640
this next

327
00:13:11,640 --> 00:13:13,500
save 15 minutes of my talk is me

328
00:13:13,500 --> 00:13:17,430
systematically eating my own hat so I

329
00:13:17,430 --> 00:13:20,730
work for 99 designs where a crowdsourced

330
00:13:20,730 --> 00:13:22,320
graphics design marketplace which is

331
00:13:22,320 --> 00:13:23,790
purely to say that images are very

332
00:13:23,790 --> 00:13:25,800
important we have lots and lots of

333
00:13:25,800 --> 00:13:28,650
images and to measure our site

334
00:13:28,650 --> 00:13:32,640
performance we pick some key metrics we

335
00:13:32,640 --> 00:13:34,470
focus more on perceived performance from

336
00:13:34,470 --> 00:13:36,030
the user so we use a couple of ways of

337
00:13:36,030 --> 00:13:37,770
doing this these are dashboards the

338
00:13:37,770 --> 00:13:41,010
float around our office so we look at

339
00:13:41,010 --> 00:13:43,980
content Dom content loaded to determine

340
00:13:43,980 --> 00:13:45,510
if synchronous groups are delaying our

341
00:13:45,510 --> 00:13:48,840
page loads we look at the first paint to

342
00:13:48,840 --> 00:13:50,400
see if delay if rendering is being

343
00:13:50,400 --> 00:13:53,280
delayed by fonts or CSS look at time to

344
00:13:53,280 --> 00:13:55,920
visually complete to look at non blonde

345
00:13:55,920 --> 00:13:57,660
non render blocking resources like

346
00:13:57,660 --> 00:14:00,750
images and asynchronous scripts and one

347
00:14:00,750 --> 00:14:02,910
of our main proxies at a glance is speed

348
00:14:02,910 --> 00:14:04,710
index which gives us a good idea of

349
00:14:04,710 --> 00:14:06,540
visual completion over time our sites

350
00:14:06,540 --> 00:14:08,520
being drawn faster are they finishing

351
00:14:08,520 --> 00:14:11,610
faster and visual pollution is mostly

352
00:14:11,610 --> 00:14:13,440
concerned with what's above the viewport

353
00:14:13,440 --> 00:14:14,610
so the initial viewed as the site

354
00:14:14,610 --> 00:14:17,190
thought look like it loaded fast and to

355
00:14:17,190 --> 00:14:19,560
get a lot of this data we use an app

356
00:14:19,560 --> 00:14:21,540
quad caliber subsidies calabar and we

357
00:14:21,540 --> 00:14:23,360
fetch the data route to store it locally

358
00:14:23,360 --> 00:14:25,350
so before I get to some of the problems

359
00:14:25,350 --> 00:14:27,180
in HD too we did see the great

360
00:14:27,180 --> 00:14:30,320
improvements pages like our designer

361
00:14:30,320 --> 00:14:33,450
portfolios which a typical

362
00:14:33,450 --> 00:14:34,740
representative typical page on our site

363
00:14:34,740 --> 00:14:36,570
you know they're mostly latency bound

364
00:14:36,570 --> 00:14:38,430
lots of really small files need to be

365
00:14:38,430 --> 00:14:40,200
pulled down lots of really small images

366
00:14:40,200 --> 00:14:42,960
and for these pages we saw like a five

367
00:14:42,960 --> 00:14:44,460
percent improvement on speed index so

368
00:14:44,460 --> 00:14:47,180
pages look like that were drawing faster

369
00:14:47,180 --> 00:14:49,440
the time to first paint was comparable

370
00:14:49,440 --> 00:14:51,540
so the first paint would happen around

371
00:14:51,540 --> 00:14:53,220
the same time and HP one versus age to

372
00:14:53,220 --> 00:14:55,050
be too but the page would finish drawing

373
00:14:55,050 --> 00:15:00,240
faster interesting interestingly was the

374
00:15:00,240 --> 00:15:02,280
initial render the first drawer on the

375
00:15:02,280 --> 00:15:04,770
page was macht HDD to which you'd expect

376
00:15:04,770 --> 00:15:06,300
as you'll be getting more data at the

377
00:15:06,300 --> 00:15:10,260
same time one of the bad things and the

378
00:15:10,260 --> 00:15:11,550
thing that really stuck out to us was

379
00:15:11,550 --> 00:15:13,920
our designer galleries these are

380
00:15:13,920 --> 00:15:16,320
extremely me have each pages so between

381
00:15:16,320 --> 00:15:18,690
80 pages on average and a page can be

382
00:15:18,690 --> 00:15:21,150
delay between 500 to 5 to 10 megs of

383
00:15:21,150 --> 00:15:23,940
images and these pages are Bam Bam

384
00:15:23,940 --> 00:15:24,329
whisperer

385
00:15:24,329 --> 00:15:29,100
not latency bound so because there

386
00:15:29,100 --> 00:15:30,420
weren't latency bound we didn't expect

387
00:15:30,420 --> 00:15:32,730
the reduction latency would have much

388
00:15:32,730 --> 00:15:36,869
impact on the performance these pages we

389
00:15:36,869 --> 00:15:39,769
actually saw a five to ten percent

390
00:15:39,769 --> 00:15:42,299
faster time the visual completion speed

391
00:15:42,299 --> 00:15:45,809
index us are slower so these pages would

392
00:15:45,809 --> 00:15:48,480
finish drawing much slower and HP to the

393
00:15:48,480 --> 00:15:51,929
HP one but we did see faster page load

394
00:15:51,929 --> 00:15:54,480
times which suggests that the reduced

395
00:15:54,480 --> 00:15:56,459
latency was having an effect which was

396
00:15:56,459 --> 00:16:00,600
very concentrated to us we also did some

397
00:16:00,600 --> 00:16:02,519
high latency testing because mobile is

398
00:16:02,519 --> 00:16:05,040
important to us and to everybody for

399
00:16:05,040 --> 00:16:07,259
this we use web page tests and compared

400
00:16:07,259 --> 00:16:12,089
to HP 1hp to continue to have more

401
00:16:12,089 --> 00:16:13,769
complete first paints so more data was

402
00:16:13,769 --> 00:16:15,509
getting there sooner and we'll drawing

403
00:16:15,509 --> 00:16:17,040
more complete the very first in the user

404
00:16:17,040 --> 00:16:19,769
saw but they'd happen noticeably later

405
00:16:19,769 --> 00:16:21,569
so the first pen would happen much

406
00:16:21,569 --> 00:16:24,839
before much later than the HP one paints

407
00:16:24,839 --> 00:16:29,040
but they'd be way more complete and we

408
00:16:29,040 --> 00:16:30,419
were continually seeing faster page

409
00:16:30,419 --> 00:16:32,220
loads so all the data was getting to the

410
00:16:32,220 --> 00:16:36,029
user far faster eventually but we were

411
00:16:36,029 --> 00:16:38,970
seeing much slower time to draw the page

412
00:16:38,970 --> 00:16:47,129
completely so to kind of sum that up for

413
00:16:47,129 --> 00:16:48,600
a typical page full of images on our

414
00:16:48,600 --> 00:16:50,699
site ones were latency bound lots of

415
00:16:50,699 --> 00:16:53,339
small farms a lot of small images we

416
00:16:53,339 --> 00:16:55,169
were seeing a five percent faster time

417
00:16:55,169 --> 00:16:58,919
to visually complete the entire page but

418
00:16:58,919 --> 00:17:00,689
for extremely me hedge pages pages that

419
00:17:00,689 --> 00:17:02,489
were latency bound painters it did a lot

420
00:17:02,489 --> 00:17:04,500
of work and transfer a lot of data who

421
00:17:04,500 --> 00:17:07,049
actually saw much slower visual

422
00:17:07,049 --> 00:17:08,250
completion some between five to ten

423
00:17:08,250 --> 00:17:11,970
percent slower than previously and on

424
00:17:11,970 --> 00:17:14,789
high latency connections with low speed

425
00:17:14,789 --> 00:17:18,539
say mobile networks we saw greater

426
00:17:18,539 --> 00:17:20,789
delays in reaching visual completion but

427
00:17:20,789 --> 00:17:23,699
in all tests the initial paints were

428
00:17:23,699 --> 00:17:24,990
more complete even though that happened

429
00:17:24,990 --> 00:17:33,330
much later so to summarize bandwidth

430
00:17:33,330 --> 00:17:35,340
bound pages sniffing it longer to reach

431
00:17:35,340 --> 00:17:37,350
visual completion despite loading way

432
00:17:37,350 --> 00:17:38,160
faster and we

433
00:17:38,160 --> 00:17:39,930
couldn't figure out why initially this

434
00:17:39,930 --> 00:17:42,120
was unexpected to us so our first

435
00:17:42,120 --> 00:17:45,300
hypothesis was network saturation it

436
00:17:45,300 --> 00:17:47,190
could it be that requesting so many

437
00:17:47,190 --> 00:17:50,250
things at once and having a single

438
00:17:50,250 --> 00:17:52,560
connection that could multiplex was that

439
00:17:52,560 --> 00:17:55,080
draining the training resources away

440
00:17:55,080 --> 00:17:57,300
from other things in the page like CSS

441
00:17:57,300 --> 00:17:59,310
and JavaScript that would actually block

442
00:17:59,310 --> 00:18:02,220
the rendering of the page in your

443
00:18:02,220 --> 00:18:03,990
typical hp1 water flow you see things

444
00:18:03,990 --> 00:18:06,930
are staged so things that happen earlier

445
00:18:06,930 --> 00:18:08,400
in the page tend to be loaded earlier

446
00:18:08,400 --> 00:18:10,650
and you get a good distribution of

447
00:18:10,650 --> 00:18:13,710
bandwidth across your requests so

448
00:18:13,710 --> 00:18:15,210
looking at these Network waterfalls we

449
00:18:15,210 --> 00:18:18,300
couldn't actually see that happening z

450
00:18:18,300 --> 00:18:19,380
says with loading when sister should

451
00:18:19,380 --> 00:18:21,090
load just blowing JavaScript reload

452
00:18:21,090 --> 00:18:22,920
image loading image should load and they

453
00:18:22,920 --> 00:18:24,090
think the loading and finishing at the

454
00:18:24,090 --> 00:18:27,870
same time so our next hypothesis with

455
00:18:27,870 --> 00:18:31,740
loading priority in h2 be one you have

456
00:18:31,740 --> 00:18:34,970
this limit of 60 / connections per host

457
00:18:34,970 --> 00:18:37,860
and this creates that first in first out

458
00:18:37,860 --> 00:18:39,690
q are talking about where the first

459
00:18:39,690 --> 00:18:41,460
thing in your page tends to be the first

460
00:18:41,460 --> 00:18:42,900
thing requested and the first thing

461
00:18:42,900 --> 00:18:44,870
responded to then things happen in order

462
00:18:44,870 --> 00:18:48,090
as a result the relation of things in

463
00:18:48,090 --> 00:18:49,800
your document document tend to be the

464
00:18:49,800 --> 00:18:51,180
relation of things will load so you have

465
00:18:51,180 --> 00:18:52,680
some control over the loading order of

466
00:18:52,680 --> 00:18:57,600
things with HTTP to it's a it allows

467
00:18:57,600 --> 00:19:00,390
multiple requests and responses over the

468
00:19:00,390 --> 00:19:01,590
one connection happened at the exact

469
00:19:01,590 --> 00:19:04,200
same time as a result you don't really

470
00:19:04,200 --> 00:19:06,960
get that priority anymore everything

471
00:19:06,960 --> 00:19:08,910
sees you at Oxford at the same time I

472
00:19:08,910 --> 00:19:10,380
said just give me what you got no figure

473
00:19:10,380 --> 00:19:11,880
it out and you kind of lose control of

474
00:19:11,880 --> 00:19:13,350
like what should we loaded first what

475
00:19:13,350 --> 00:19:15,240
should be loaded last what things are

476
00:19:15,240 --> 00:19:18,060
more important than others so the

477
00:19:18,060 --> 00:19:19,110
browsers do you have built-in

478
00:19:19,110 --> 00:19:20,730
prioritization for this but you lose

479
00:19:20,730 --> 00:19:22,230
control any document in your document so

480
00:19:22,230 --> 00:19:24,270
you could very well be that images the

481
00:19:24,270 --> 00:19:25,860
bottom of the page or given the same

482
00:19:25,860 --> 00:19:27,090
priorities images on top of the page

483
00:19:27,090 --> 00:19:29,940
causing those longer-term visual

484
00:19:29,940 --> 00:19:34,470
completion so part of this we'd consider

485
00:19:34,470 --> 00:19:36,390
the putting the best practice of putting

486
00:19:36,390 --> 00:19:38,310
scripts part of our pages was closing

487
00:19:38,310 --> 00:19:39,300
those scripts to get like a higher

488
00:19:39,300 --> 00:19:40,950
priority and actually pushing off image

489
00:19:40,950 --> 00:19:43,950
loading resources but we were able to

490
00:19:43,950 --> 00:19:46,740
figure out this was in the case because

491
00:19:46,740 --> 00:19:48,420
don't complete loaded at the same time

492
00:19:48,420 --> 00:19:50,490
and don't be blocked on these JavaScript

493
00:19:50,490 --> 00:19:52,110
files so with that being in the same

494
00:19:52,110 --> 00:19:53,580
place and ask monitoring that we could

495
00:19:53,580 --> 00:19:55,260
tell that the priority of this group's

496
00:19:55,260 --> 00:19:57,000
weren't being moved and weren't changing

497
00:19:57,000 --> 00:19:59,490
the render properties of the page so I

498
00:19:59,490 --> 00:20:00,840
later came down something happening at

499
00:20:00,840 --> 00:20:02,040
the network layer things just weren't

500
00:20:02,040 --> 00:20:04,080
coming to us the way we expected to as

501
00:20:04,080 --> 00:20:07,770
faster picking to come just release the

502
00:20:07,770 --> 00:20:11,120
idea of resource priority in practice

503
00:20:11,120 --> 00:20:13,110
the browsers download queue is

504
00:20:13,110 --> 00:20:16,049
prioritized so starting a team adding

505
00:20:16,049 --> 00:20:17,790
image requests before final script

506
00:20:17,790 --> 00:20:19,290
bottom of the page doesn't delay script

507
00:20:19,290 --> 00:20:21,420
loading at all these a coding behavioral

508
00:20:21,420 --> 00:20:23,730
resource is undocumented however it

509
00:20:23,730 --> 00:20:25,410
constantly changes our pilot problem is

510
00:20:25,410 --> 00:20:26,730
that browsers have their own heuristics

511
00:20:26,730 --> 00:20:29,220
in how they load things but typically

512
00:20:29,220 --> 00:20:31,440
images have very low priority things

513
00:20:31,440 --> 00:20:32,700
like fonts and java better higher

514
00:20:32,700 --> 00:20:34,440
priority and one of the interesting

515
00:20:34,440 --> 00:20:36,720
about is browser heuristics it developed

516
00:20:36,720 --> 00:20:38,940
by browser vendors over time to suit the

517
00:20:38,940 --> 00:20:40,860
current trends so an interesting one now

518
00:20:40,860 --> 00:20:43,770
is the hero image heuristic so images

519
00:20:43,770 --> 00:20:46,440
get a very low priority browsers will

520
00:20:46,440 --> 00:20:47,730
find the first image in the page and

521
00:20:47,730 --> 00:20:49,710
make it a very high priority the idea

522
00:20:49,710 --> 00:20:51,179
being a lot of sites have is big hero

523
00:20:51,179 --> 00:20:52,950
image and that should load first and

524
00:20:52,950 --> 00:20:54,150
given the same priority assists in

525
00:20:54,150 --> 00:20:57,809
JavaScript so knowing these heuristics

526
00:20:57,809 --> 00:21:00,270
are in play we want to look at the

527
00:21:00,270 --> 00:21:04,230
stream without that limit of six

528
00:21:04,230 --> 00:21:06,179
connections person we get HTTP one we

529
00:21:06,179 --> 00:21:07,799
could see ad image requests all firing

530
00:21:07,799 --> 00:21:10,080
ones to the server and the server would

531
00:21:10,080 --> 00:21:11,250
then respond to them simultaneously

532
00:21:11,250 --> 00:21:12,929
because they wouldn't know which was

533
00:21:12,929 --> 00:21:14,790
more important than the other and the

534
00:21:14,790 --> 00:21:17,660
browser would draw them as they came in

535
00:21:17,660 --> 00:21:19,950
this had an interesting effect and we

536
00:21:19,950 --> 00:21:22,679
see something like this comparing HTTP

537
00:21:22,679 --> 00:21:26,130
one and HTTP two we'd see that the HTTP

538
00:21:26,130 --> 00:21:28,770
one page was drawing this image on the

539
00:21:28,770 --> 00:21:30,990
fire image much slower which meant that

540
00:21:30,990 --> 00:21:33,660
it was getting the packets much slower

541
00:21:33,660 --> 00:21:35,280
but we knew that these pages were

542
00:21:35,280 --> 00:21:37,799
finishing to load generally much faster

543
00:21:37,799 --> 00:21:41,070
which led us into the area that let us

544
00:21:41,070 --> 00:21:43,140
down the track of thinking that there

545
00:21:43,140 --> 00:21:44,970
was some sort of bandwidth contention in

546
00:21:44,970 --> 00:21:46,350
that the browser was treating all images

547
00:21:46,350 --> 00:21:47,970
equally so there were images much

548
00:21:47,970 --> 00:21:49,230
further down the page that were being

549
00:21:49,230 --> 00:21:52,200
rendered and parse problem comes down to

550
00:21:52,200 --> 00:21:54,480
is if all images are the same size and

551
00:21:54,480 --> 00:21:56,549
the bandwidth distributed equally they

552
00:21:56,549 --> 00:21:58,169
should all load equally and this page

553
00:21:58,169 --> 00:22:00,090
would have been faster but in this case

554
00:22:00,090 --> 00:22:02,700
this image on the right is slightly

555
00:22:02,700 --> 00:22:03,970
larger than a 200

556
00:22:03,970 --> 00:22:06,210
left and as a result it has a different

557
00:22:06,210 --> 00:22:08,260
requires more data and is then drawn

558
00:22:08,260 --> 00:22:09,370
differently as different loading

559
00:22:09,370 --> 00:22:11,380
characteristics and because the

560
00:22:11,380 --> 00:22:12,700
bandwidth is being distributed to pages

561
00:22:12,700 --> 00:22:14,940
images off the page we see this kind of

562
00:22:14,940 --> 00:22:17,770
phased loading much slower than an HTTP

563
00:22:17,770 --> 00:22:20,260
one which had a baked in priority saying

564
00:22:20,260 --> 00:22:21,820
this image is more important than images

565
00:22:21,820 --> 00:22:25,750
down the bottom of the page um so there

566
00:22:25,750 --> 00:22:28,240
is some fine print with htp really not

567
00:22:28,240 --> 00:22:30,700
many people talking about an allegra

568
00:22:30,700 --> 00:22:32,920
goreck of the chrome team said this

569
00:22:32,920 --> 00:22:35,500
really well I with HTTP to the browser

570
00:22:35,500 --> 00:22:36,970
relies on the server I to deliver the

571
00:22:36,970 --> 00:22:40,780
responses in optimal way it's not just a

572
00:22:40,780 --> 00:22:42,490
number of bytes or requests per second

573
00:22:42,490 --> 00:22:44,050
by the order in which the bites are

574
00:22:44,050 --> 00:22:46,990
delivered near test rotation carefully

575
00:22:46,990 --> 00:22:50,620
the these loading heuristics that exists

576
00:22:50,620 --> 00:22:53,440
are undocumented and they're

577
00:22:53,440 --> 00:22:56,400
undocumented on purpose the idea is that

578
00:22:56,400 --> 00:22:59,710
browser vendors can choose what

579
00:22:59,710 --> 00:23:00,910
heuristics work better for their

580
00:23:00,910 --> 00:23:02,560
customers in their environments they can

581
00:23:02,560 --> 00:23:05,070
analyze that I'm they know better and

582
00:23:05,070 --> 00:23:07,540
they differ between versions a change in

583
00:23:07,540 --> 00:23:08,920
a heuristic in a version can actually

584
00:23:08,920 --> 00:23:11,410
improve certain sites but significant

585
00:23:11,410 --> 00:23:13,900
affect other sites and they're not

586
00:23:13,900 --> 00:23:15,280
documented and they're not told about

587
00:23:15,280 --> 00:23:17,140
these things and have a general for all

588
00:23:17,140 --> 00:23:20,320
sites so what is good for a big hero

589
00:23:20,320 --> 00:23:21,850
image may not be good for a site that is

590
00:23:21,850 --> 00:23:23,380
an app were single page app and these

591
00:23:23,380 --> 00:23:27,970
are concerns gotta be balanced so HTTP

592
00:23:27,970 --> 00:23:30,430
to took this shift and says as a

593
00:23:30,430 --> 00:23:32,380
developer on your site you know it's

594
00:23:32,380 --> 00:23:34,150
best for your site I change the

595
00:23:34,150 --> 00:23:36,550
landscape of resource prioritization the

596
00:23:36,550 --> 00:23:37,930
responsibilities now shared between the

597
00:23:37,930 --> 00:23:40,660
browser and the server the browser gives

598
00:23:40,660 --> 00:23:43,960
the server hints unlike this stream so

599
00:23:43,960 --> 00:23:45,970
it knows the stream of serving image

600
00:23:45,970 --> 00:23:47,620
user says this stream has a priority

601
00:23:47,620 --> 00:23:49,420
much lower than the priority of the

602
00:23:49,420 --> 00:23:52,120
stream serving CSS and that is low on

603
00:23:52,120 --> 00:23:54,460
the stream serving JavaScript as an

604
00:23:54,460 --> 00:23:55,870
option the browser has whether it works

605
00:23:55,870 --> 00:23:57,850
that way is different and most streams

606
00:23:57,850 --> 00:24:00,160
tend to be the same for the time being

607
00:24:00,160 --> 00:24:02,890
it's a change between browsers but this

608
00:24:02,890 --> 00:24:04,870
is the server can ignore that the server

609
00:24:04,870 --> 00:24:07,960
can just say actually I know that on

610
00:24:07,960 --> 00:24:10,210
this page we have lots of images so

611
00:24:10,210 --> 00:24:12,190
these get a higher priority than the

612
00:24:12,190 --> 00:24:14,080
JavaScript that affects a button at the

613
00:24:14,080 --> 00:24:15,490
bottom of the page and you can build

614
00:24:15,490 --> 00:24:16,820
that control into your own server

615
00:24:16,820 --> 00:24:18,679
in practice is much harder because he

616
00:24:18,679 --> 00:24:19,909
sent you to see the anodyne are in these

617
00:24:19,909 --> 00:24:21,710
servers yourself but if you run her own

618
00:24:21,710 --> 00:24:23,360
HTTP servers you can put in your own

619
00:24:23,360 --> 00:24:24,769
heuristics and it's option you now have

620
00:24:24,769 --> 00:24:28,399
and she didn't have with HTTP one but

621
00:24:28,399 --> 00:24:30,460
this ends up being a double-edged sword

622
00:24:30,460 --> 00:24:32,720
resource prioritization existing in both

623
00:24:32,720 --> 00:24:34,639
the client and the server I can really

624
00:24:34,639 --> 00:24:37,100
muddy the waters and open up way more

625
00:24:37,100 --> 00:24:41,480
problems we weren't aware of and put but

626
00:24:41,480 --> 00:24:42,679
it does give the ability put the

627
00:24:42,679 --> 00:24:44,149
developer in charge and the developer

628
00:24:44,149 --> 00:24:45,590
who knows their site can do really great

629
00:24:45,590 --> 00:24:48,019
things I previously hinted at the idea

630
00:24:48,019 --> 00:24:49,789
of weights and weight as a hint the

631
00:24:49,789 --> 00:24:52,909
browser gives at priority this happens

632
00:24:52,909 --> 00:24:55,250
in HTTP one where the browser uses the

633
00:24:55,250 --> 00:24:57,139
idea of priority to then determine what

634
00:24:57,139 --> 00:25:00,049
order to send requests in in HTTP two we

635
00:25:00,049 --> 00:25:01,940
send all requests the same time but we

636
00:25:01,940 --> 00:25:03,620
apply a weight signifying its priority

637
00:25:03,620 --> 00:25:05,269
something with a lower weight has less

638
00:25:05,269 --> 00:25:06,769
priority and should get less bandwidth

639
00:25:06,769 --> 00:25:08,360
there's something of a higher weight so

640
00:25:08,360 --> 00:25:10,490
images ver CSS for a sponsor JavaScript

641
00:25:10,490 --> 00:25:12,440
the browser can assign these different

642
00:25:12,440 --> 00:25:13,940
streams and different weights and saying

643
00:25:13,940 --> 00:25:17,419
these are more important than others the

644
00:25:17,419 --> 00:25:19,789
servers fries with more all that if you

645
00:25:19,789 --> 00:25:21,289
don't control eserver it's on you to

646
00:25:21,289 --> 00:25:25,820
test your service actually doing and

647
00:25:25,820 --> 00:25:27,740
dependencies so dependencies are

648
00:25:27,740 --> 00:25:29,690
interesting and one of the big things if

649
00:25:29,690 --> 00:25:32,950
HTTP two streams in that we can say that

650
00:25:32,950 --> 00:25:35,539
although something is important it's

651
00:25:35,539 --> 00:25:36,860
only important if its parent has already

652
00:25:36,860 --> 00:25:40,009
loaded this allows you to say that here

653
00:25:40,009 --> 00:25:41,690
all the JavaScript files on my site but

654
00:25:41,690 --> 00:25:42,710
don't wasn't loading anything else

655
00:25:42,710 --> 00:25:44,779
you've loaded jQuery or here are the

656
00:25:44,779 --> 00:25:46,460
images on my site but these three at the

657
00:25:46,460 --> 00:25:47,960
top of the page are way more important

658
00:25:47,960 --> 00:25:49,639
to 32 bottom of the page and you can

659
00:25:49,639 --> 00:25:55,009
describe this with dependencies so some

660
00:25:55,009 --> 00:25:56,480
of the takeaways my investigation was

661
00:25:56,480 --> 00:25:58,309
simply that there's no such thing as

662
00:25:58,309 --> 00:25:59,750
free performance and this is something

663
00:25:59,750 --> 00:26:01,039
our browser vendors have known for a

664
00:26:01,039 --> 00:26:04,029
very long time web performance is a

665
00:26:04,029 --> 00:26:08,029
series of trade-offs and new ones any

666
00:26:08,029 --> 00:26:11,500
heavy image-heavy pages tend to prefer

667
00:26:11,500 --> 00:26:14,299
HTTP two connections only when the bat

668
00:26:14,299 --> 00:26:17,450
total bandwidth is less than the latency

669
00:26:17,450 --> 00:26:19,909
incurred if your server lab which

670
00:26:19,909 --> 00:26:22,429
bandwidth if your bandwidth is less than

671
00:26:22,429 --> 00:26:23,929
the latency would have incurred then you

672
00:26:23,929 --> 00:26:25,159
gain a lot running single long live

673
00:26:25,159 --> 00:26:26,960
connection if you're very bound with

674
00:26:26,960 --> 00:26:28,850
heavy reducing latency

675
00:26:28,850 --> 00:26:31,580
actually save you that much so it's the

676
00:26:31,580 --> 00:26:33,860
right mix of high latency and low

677
00:26:33,860 --> 00:26:36,530
bandwidth you can see really big against

678
00:26:36,530 --> 00:26:38,210
and these are the site lots of small CSS

679
00:26:38,210 --> 00:26:41,780
files a lot of small images another

680
00:26:41,780 --> 00:26:43,220
thing to take away from this is HTTP two

681
00:26:43,220 --> 00:26:45,290
is very new and the surface area for the

682
00:26:45,290 --> 00:26:48,080
protocol is huge you have resource

683
00:26:48,080 --> 00:26:49,940
weight prioritization you have resource

684
00:26:49,940 --> 00:26:51,680
dependency prioritization you have

685
00:26:51,680 --> 00:26:54,020
multiplicity heuristics and you have

686
00:26:54,020 --> 00:26:57,490
streamer connection flows these things

687
00:26:57,490 --> 00:26:59,240
although the implementation is

688
00:26:59,240 --> 00:27:01,130
documented the heuristics art it's

689
00:27:01,130 --> 00:27:04,850
really free to you as developers for

690
00:27:04,850 --> 00:27:07,010
sites people who building servers CDN

691
00:27:07,010 --> 00:27:08,990
owners as on all of you to figure out

692
00:27:08,990 --> 00:27:10,910
what is best for your situation of your

693
00:27:10,910 --> 00:27:14,540
audience I hope and there is work in

694
00:27:14,540 --> 00:27:15,830
browsers coming through to hint at these

695
00:27:15,830 --> 00:27:18,830
so for you in markup or in JavaScript be

696
00:27:18,830 --> 00:27:20,420
able to say these resources are more

697
00:27:20,420 --> 00:27:21,410
important than others and have some

698
00:27:21,410 --> 00:27:23,120
control over that or that appears to be

699
00:27:23,120 --> 00:27:26,150
a while off just yet and there are other

700
00:27:26,150 --> 00:27:28,730
glaring issues with hd2 that make this

701
00:27:28,730 --> 00:27:30,730
really hard one is a lack of visibility

702
00:27:30,730 --> 00:27:33,290
HTTP to unlock a should be one is a

703
00:27:33,290 --> 00:27:35,120
binary protocol it's no longer clear

704
00:27:35,120 --> 00:27:36,800
text over the wire you can't look at

705
00:27:36,800 --> 00:27:38,690
what's happening requires specialized

706
00:27:38,690 --> 00:27:40,550
tools and because it all happens over a

707
00:27:40,550 --> 00:27:43,400
ssl it requires either man in building

708
00:27:43,400 --> 00:27:45,530
your connection or doing it manually via

709
00:27:45,530 --> 00:27:48,050
some sort of CLI that gives you access

710
00:27:48,050 --> 00:27:51,680
to emulate a browser and dev tools

711
00:27:51,680 --> 00:27:53,330
simply haven't caught up here they have

712
00:27:53,330 --> 00:27:55,250
the information but it's very hard to

713
00:27:55,250 --> 00:27:58,370
show to show in the dev console our

714
00:27:58,370 --> 00:28:00,470
minds are programmed our experiences

715
00:28:00,470 --> 00:28:02,450
print program to waterfalls of HTTP one

716
00:28:02,450 --> 00:28:03,860
let us really apply history between

717
00:28:03,860 --> 00:28:05,840
Timor and as a while all the tools still

718
00:28:05,840 --> 00:28:07,520
catching up for a long time tools

719
00:28:07,520 --> 00:28:10,100
reporting collection times being wrong

720
00:28:10,100 --> 00:28:11,990
because of the way then attempted SSL

721
00:28:11,990 --> 00:28:15,620
and these issues are bound and as I

722
00:28:15,620 --> 00:28:17,390
mentioned the binary protocol makes it

723
00:28:17,390 --> 00:28:20,270
very hard to sniff what's happening you

724
00:28:20,270 --> 00:28:22,880
can only have a good intuition of what

725
00:28:22,880 --> 00:28:24,890
what's been what's being sent you can no

726
00:28:24,890 --> 00:28:26,510
longer you can't easily inspect the

727
00:28:26,510 --> 00:28:28,340
heuristic supplier you can't see the

728
00:28:28,340 --> 00:28:29,990
server's prioritizing something over

729
00:28:29,990 --> 00:28:32,060
something else what order their packets

730
00:28:32,060 --> 00:28:34,220
are coming in and that's multiplexing

731
00:28:34,220 --> 00:28:35,390
payback we really important and have

732
00:28:35,390 --> 00:28:39,170
really subtle effects so there's some

733
00:28:39,170 --> 00:28:40,909
great resources in this area

734
00:28:40,909 --> 00:28:44,889
HTTP to 101 is a quick video by soma

735
00:28:44,889 --> 00:28:47,389
hopeful most high-performance browser

736
00:28:47,389 --> 00:28:50,119
networking is must read for anyone who

737
00:28:50,119 --> 00:28:51,710
work in sac performance or you care a

738
00:28:51,710 --> 00:28:53,599
sub performance earlier gorica the

739
00:28:53,599 --> 00:28:55,309
chrome team covers loaders material and

740
00:28:55,309 --> 00:28:57,529
way more detail and is responsible for

741
00:28:57,529 --> 00:28:59,419
much material in the beginning of this

742
00:28:59,419 --> 00:29:02,749
talk has to be to hear is less optimized

743
00:29:02,749 --> 00:29:05,659
is a one hour long talk by Alico gorrik

744
00:29:05,659 --> 00:29:07,009
it's definitely worth watching but is

745
00:29:07,009 --> 00:29:11,840
very in-depth HD 1.5 HP to an 1.5 world

746
00:29:11,840 --> 00:29:13,789
by peter wilson this is a great talk or

747
00:29:13,789 --> 00:29:15,739
not chopping on HP to train just yet and

748
00:29:15,739 --> 00:29:18,320
some of the trade-offs and keeping in

749
00:29:18,320 --> 00:29:19,609
mind that many of our users are still on

750
00:29:19,609 --> 00:29:23,470
HP one it will be for visible future and

751
00:29:23,470 --> 00:29:25,789
this is a blog post i wrote that goes

752
00:29:25,789 --> 00:29:28,309
into many of the things we ran into

753
00:29:28,309 --> 00:29:30,919
secure the hd2 in more detail and some

754
00:29:30,919 --> 00:29:32,509
more waterfalls at some of the quizzes

755
00:29:32,509 --> 00:29:36,859
we came to and thank you that is the

756
00:29:36,859 --> 00:29:46,580
wrong way

