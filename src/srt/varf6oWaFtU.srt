1
00:00:00,560 --> 00:00:10,459

ah

2
00:00:10,469 --> 00:00:25,990
I'm gonna clear we're going to join okay

3
00:00:25,990 --> 00:00:28,080
i'm here to talk about the invented way

4
00:00:28,080 --> 00:00:30,580
pretty much this problem stuff is

5
00:00:30,580 --> 00:00:32,500
happening on the internet and you want

6
00:00:32,500 --> 00:00:35,020
to do stuff when that stuff happens very

7
00:00:35,020 --> 00:00:37,539
descriptive description very technical I

8
00:00:37,539 --> 00:00:40,479
hope everyone you brought that first

9
00:00:40,479 --> 00:00:43,120
morning expected presentation is

10
00:00:43,120 --> 00:00:51,129
unexpected Jr fooled hello hello did

11
00:00:51,129 --> 00:00:52,989
everyone hear me all right all right so

12
00:00:52,989 --> 00:00:54,999
like I was saying stuff is happening on

13
00:00:54,999 --> 00:00:56,409
the internet and you want to do stuff

14
00:00:56,409 --> 00:00:59,199
when that stuff happens a bit of a

15
00:00:59,199 --> 00:01:00,639
warning I did not think I'd be

16
00:01:00,639 --> 00:01:01,959
presenting today I didn't even think I

17
00:01:01,959 --> 00:01:04,360
would be here the tickets sold out for

18
00:01:04,360 --> 00:01:05,619
Jay Escott before i bought low and i

19
00:01:05,619 --> 00:01:07,119
came down on friday i wanted to party

20
00:01:07,119 --> 00:01:09,070
with you guys meet some people and I was

21
00:01:09,070 --> 00:01:10,690
lucky enough to win scurvy comp so I'm

22
00:01:10,690 --> 00:01:13,300
here today there's gonna be some badly

23
00:01:13,300 --> 00:01:14,860
created slides which I made last night

24
00:01:14,860 --> 00:01:17,230
on the boat and this morning and I'm a

25
00:01:17,230 --> 00:01:20,620
little nervous so just bear with me web

26
00:01:20,620 --> 00:01:23,350
books okay so in the world of the

27
00:01:23,350 --> 00:01:25,360
invented web it's really all about web

28
00:01:25,360 --> 00:01:28,600
books so what is a web hook there's no

29
00:01:28,600 --> 00:01:30,460
RFC for web hooks there's no standard

30
00:01:30,460 --> 00:01:33,520
definition there's no committee most

31
00:01:33,520 --> 00:01:34,960
people have dealt with web hooks before

32
00:01:34,960 --> 00:01:37,750
if you do web development usually they

33
00:01:37,750 --> 00:01:39,460
are presented as a restful web hook

34
00:01:39,460 --> 00:01:41,440
there's a bit of information out about

35
00:01:41,440 --> 00:01:44,350
this at web hooks org jeff lindsay is

36
00:01:44,350 --> 00:01:46,060
kind of a pioneer working with this

37
00:01:46,060 --> 00:01:47,500
stuff I haven't seen much other

38
00:01:47,500 --> 00:01:50,500
information out there and yeah the

39
00:01:50,500 --> 00:01:51,790
definition of a web book is kind of

40
00:01:51,790 --> 00:01:54,010
ambiguous right now so most people think

41
00:01:54,010 --> 00:01:56,350
of restful web hooks you have an

42
00:01:56,350 --> 00:01:58,780
arbitrary URL that's not a real URL

43
00:01:58,780 --> 00:02:01,540
don't go there and it's just sitting

44
00:02:01,540 --> 00:02:02,800
there and it's waiting for an HTTP

45
00:02:02,800 --> 00:02:04,810
request when the HTTP request comes in

46
00:02:04,810 --> 00:02:06,729
some arbitrary action is going to happen

47
00:02:06,729 --> 00:02:08,140
and this is kind of how most people

48
00:02:08,140 --> 00:02:10,929
think of web books today so I kind of

49
00:02:10,929 --> 00:02:12,760
disagree with this restful web hooks are

50
00:02:12,760 --> 00:02:15,129
not web hooks they're a type of web hook

51
00:02:15,129 --> 00:02:17,980
they are a of web hook yeah

52
00:02:17,980 --> 00:02:21,800
excellent so yes a restful web hook is

53
00:02:21,800 --> 00:02:24,920
just a type of web hook so we're going

54
00:02:24,920 --> 00:02:27,290
to kind of restate our assertion here

55
00:02:27,290 --> 00:02:29,120
stuff is happening on the internet and

56
00:02:29,120 --> 00:02:31,190
you want to do stuff when that stuff

57
00:02:31,190 --> 00:02:36,440
happens so an incoming HTTP request does

58
00:02:36,440 --> 00:02:38,420
count as stuff but there's way more

59
00:02:38,420 --> 00:02:39,680
things that you could be listening for

60
00:02:39,680 --> 00:02:43,310
not just an incoming HTTP connection so

61
00:02:43,310 --> 00:02:45,650
first who is this guy with the dumbo hat

62
00:02:45,650 --> 00:02:49,670
and who led them on stage hi my name is

63
00:02:49,670 --> 00:02:51,620
maroc Squires I'm a software developer

64
00:02:51,620 --> 00:02:55,160
from NYC I participate in the NYC j/s

65
00:02:55,160 --> 00:02:57,440
group a little bit this is my github I

66
00:02:57,440 --> 00:02:59,630
don't do Twitter I have a fake facebook

67
00:02:59,630 --> 00:03:02,300
can't find me so yeah check me out on

68
00:03:02,300 --> 00:03:06,080
the github I've been involved in a few

69
00:03:06,080 --> 00:03:07,730
internet hijinks for those who know me

70
00:03:07,730 --> 00:03:09,620
they're not really appropriate to be

71
00:03:09,620 --> 00:03:12,230
speaking about here I've been banned

72
00:03:12,230 --> 00:03:14,390
from most online services at least once

73
00:03:14,390 --> 00:03:18,080
that's the banhammer even got banned

74
00:03:18,080 --> 00:03:20,390
from github they unban me thank you very

75
00:03:20,390 --> 00:03:24,140
much for those who don't know the story

76
00:03:24,140 --> 00:03:26,720
i created a bit of a script that worst

77
00:03:26,720 --> 00:03:28,610
people to watch a library that i created

78
00:03:28,610 --> 00:03:30,470
and it went pretty far before they

79
00:03:30,470 --> 00:03:33,230
caught on but uh yeah so i'm not going

80
00:03:33,230 --> 00:03:34,459
to do that again because getting banned

81
00:03:34,459 --> 00:03:35,510
from github would probably be

82
00:03:35,510 --> 00:03:38,540
problematic and I once scurvy comp

83
00:03:38,540 --> 00:03:39,739
because I could yell louder than

84
00:03:39,739 --> 00:03:44,090
everybody else so also i'm here because

85
00:03:44,090 --> 00:03:46,730
of kokia which is a product or a open

86
00:03:46,730 --> 00:03:48,440
source project that i've made i like to

87
00:03:48,440 --> 00:03:51,500
call it yahoo crack pipes the websites

88
00:03:51,500 --> 00:03:53,570
up right now it's hooked I it's pretty

89
00:03:53,570 --> 00:03:54,920
rudimentary you'll probably be able to

90
00:03:54,920 --> 00:03:58,910
break it if you try hard enough so I'm

91
00:03:58,910 --> 00:04:00,290
going to give you a very brief history

92
00:04:00,290 --> 00:04:03,530
of hokey oh this is the github commit

93
00:04:03,530 --> 00:04:05,329
log I've got 88 Watchers I'm pretty

94
00:04:05,329 --> 00:04:06,590
proud of that they're legitimate

95
00:04:06,590 --> 00:04:09,799
Watchers not ones that I forced you can

96
00:04:09,799 --> 00:04:11,450
see from the commit log actually do have

97
00:04:11,450 --> 00:04:13,010
a full-time day job which I'm not

98
00:04:13,010 --> 00:04:15,320
allowed to work on other projects so you

99
00:04:15,320 --> 00:04:19,549
can kind of see I don't sleep much this

100
00:04:19,549 --> 00:04:21,979
is hooky oh the main application it's

101
00:04:21,979 --> 00:04:25,460
about yeah 9000 sir shins this is the

102
00:04:25,460 --> 00:04:27,860
front end for hooky oh another seven

103
00:04:27,860 --> 00:04:30,860
thousand or so and I started this

104
00:04:30,860 --> 00:04:31,650
project two months

105
00:04:31,650 --> 00:04:33,090
and the first line of code went two

106
00:04:33,090 --> 00:04:35,820
months ago so it's been pretty busy for

107
00:04:35,820 --> 00:04:37,560
the past two months with all of these

108
00:04:37,560 --> 00:04:42,630
commits and yes so what's hokey oh

109
00:04:42,630 --> 00:04:44,940
Tokyo's a few things Tokyo is a

110
00:04:44,940 --> 00:04:48,120
standalone server Tokyo is a common j/s

111
00:04:48,120 --> 00:04:50,190
module Tokyo is a freemium

112
00:04:50,190 --> 00:04:52,350
software-as-a-service Tokyo is

113
00:04:52,350 --> 00:04:55,199
open-source MIT license and who Kia was

114
00:04:55,199 --> 00:04:57,030
a standard interface for building web I

115
00:04:57,030 --> 00:05:01,080
oh okay so oh one more thing kokia was

116
00:05:01,080 --> 00:05:04,440
100% javascript in nodejs no JSL

117
00:05:04,440 --> 00:05:08,750
interface that's a Brian as you can see

118
00:05:08,750 --> 00:05:11,130
so I didn't really explain anything I

119
00:05:11,130 --> 00:05:12,150
just kind of threw out a bunch of

120
00:05:12,150 --> 00:05:15,270
buzzwords so yes what exactly is hokey

121
00:05:15,270 --> 00:05:16,470
Oh aside from these things I just

122
00:05:16,470 --> 00:05:18,660
described well Tokyo is a web platform

123
00:05:18,660 --> 00:05:21,750
and yes platform is probably a terrible

124
00:05:21,750 --> 00:05:23,370
word to use maybe it's an application

125
00:05:23,370 --> 00:05:25,050
framework but let's not get bogged down

126
00:05:25,050 --> 00:05:27,060
by the semantics Tokyo is going to

127
00:05:27,060 --> 00:05:28,440
listen for stuff to happen on the

128
00:05:28,440 --> 00:05:29,820
internet and when that stuff happens

129
00:05:29,820 --> 00:05:34,590
it's going to do other stuff so in the

130
00:05:34,590 --> 00:05:35,880
world of hooky oh we have two main

131
00:05:35,880 --> 00:05:38,130
concepts we have web hook definitions

132
00:05:38,130 --> 00:05:41,070
and we have web hook protocols a web

133
00:05:41,070 --> 00:05:43,500
book definition comes in two different

134
00:05:43,500 --> 00:05:45,900
flavors there's a web hook listener and

135
00:05:45,900 --> 00:05:48,360
a web hook action web book definitions

136
00:05:48,360 --> 00:05:53,849
are common j/s modules so pretty much

137
00:05:53,849 --> 00:05:55,320
what happens with a web book is that

138
00:05:55,320 --> 00:05:57,870
it's going to listen for an action for

139
00:05:57,870 --> 00:05:59,280
an event and when that happens it's

140
00:05:59,280 --> 00:06:00,870
going to perform an event or an action

141
00:06:00,870 --> 00:06:02,400
arbitrary it doesn't matter what it

142
00:06:02,400 --> 00:06:03,930
listens for it doesn't matter what the

143
00:06:03,930 --> 00:06:06,630
action is going to be so for the most

144
00:06:06,630 --> 00:06:08,520
part when I say listening there's two

145
00:06:08,520 --> 00:06:09,960
ways that hook EO can listen for events

146
00:06:09,960 --> 00:06:12,479
on the internet it can pull which is not

147
00:06:12,479 --> 00:06:13,680
really a traditional way of listening

148
00:06:13,680 --> 00:06:14,940
since it's actually going out and

149
00:06:14,940 --> 00:06:17,280
pulling a resource but what happens is

150
00:06:17,280 --> 00:06:18,780
that hook you can actively you know

151
00:06:18,780 --> 00:06:21,060
request a resource on an interval which

152
00:06:21,060 --> 00:06:22,650
is polling and it's going to listen for

153
00:06:22,650 --> 00:06:24,479
a change listen for content listen for

154
00:06:24,479 --> 00:06:27,510
something or Tokyo can use sockets ochio

155
00:06:27,510 --> 00:06:29,250
will open up a socket and wait for data

156
00:06:29,250 --> 00:06:31,710
so if you think of a restful web hook

157
00:06:31,710 --> 00:06:33,750
that's really just an HTTP socket

158
00:06:33,750 --> 00:06:37,639
waiting for an incoming connection

159
00:06:37,639 --> 00:06:40,860
actions so in a web hook definition we

160
00:06:40,860 --> 00:06:42,570
have actions well what are they they're

161
00:06:42,570 --> 00:06:43,800
just arbitrary action

162
00:06:43,800 --> 00:06:45,629
they can be literally anything it

163
00:06:45,629 --> 00:06:47,190
doesn't even need to be over the wire it

164
00:06:47,190 --> 00:06:48,539
could be something for system

165
00:06:48,539 --> 00:06:51,659
administration who knows in most cases

166
00:06:51,659 --> 00:06:56,069
it will be an outgoing HTTP request so

167
00:06:56,069 --> 00:06:57,720
kind of look at a little bit of code

168
00:06:57,720 --> 00:06:59,879
here this is a sample hookie Oh webhook

169
00:06:59,879 --> 00:07:03,629
listener this is for incoming HTTP

170
00:07:03,629 --> 00:07:05,639
requests so if you take a look at this

171
00:07:05,639 --> 00:07:07,440
code there's not really too much going

172
00:07:07,440 --> 00:07:10,650
on here we define the definition we give

173
00:07:10,650 --> 00:07:13,319
it a configuration and then we give it a

174
00:07:13,319 --> 00:07:17,550
handler here we have a hook EO webhook

175
00:07:17,550 --> 00:07:20,039
custom action definition and again

176
00:07:20,039 --> 00:07:21,330
there's not really much going on here

177
00:07:21,330 --> 00:07:23,819
this is for sending emails and all we

178
00:07:23,819 --> 00:07:27,360
have is a config 42 and then the body is

179
00:07:27,360 --> 00:07:28,530
very simple I don't think we have a

180
00:07:28,530 --> 00:07:31,889
subject in here yet and yeah as you can

181
00:07:31,889 --> 00:07:33,629
see these are just common J's modules

182
00:07:33,629 --> 00:07:35,069
and a little bit of Jason in a

183
00:07:35,069 --> 00:07:37,860
definition so it doesn't really look

184
00:07:37,860 --> 00:07:39,300
like they do anything it just looks like

185
00:07:39,300 --> 00:07:40,860
their configuration and validation

186
00:07:40,860 --> 00:07:42,060
options and that's kind of the whole

187
00:07:42,060 --> 00:07:45,090
point is that all the business logic is

188
00:07:45,090 --> 00:07:46,680
uploaded to something we call Tokyo

189
00:07:46,680 --> 00:07:50,099
protocols and probably not the best word

190
00:07:50,099 --> 00:07:51,990
a lot of the problem with working on

191
00:07:51,990 --> 00:07:53,699
this project has kind of been defining

192
00:07:53,699 --> 00:07:56,310
new definitions as we go along so a

193
00:07:56,310 --> 00:07:58,500
hookie Oh protocol is just a cluster of

194
00:07:58,500 --> 00:08:00,930
business logic for doing stuff in most

195
00:08:00,930 --> 00:08:03,150
cases your hook yo protocol would be a

196
00:08:03,150 --> 00:08:04,740
thin wrapper for communicating with a

197
00:08:04,740 --> 00:08:07,349
third party aap I also hook your

198
00:08:07,349 --> 00:08:11,479
protocols are valid common J's modules

199
00:08:11,479 --> 00:08:14,699
so what protocols are available in Tokyo

200
00:08:14,699 --> 00:08:16,500
the first version um we've got a bunch

201
00:08:16,500 --> 00:08:18,900
of stuff in here you know we can parse

202
00:08:18,900 --> 00:08:21,060
hamill markdown mustache we can

203
00:08:21,060 --> 00:08:22,889
communicate with s3 we can communicate

204
00:08:22,889 --> 00:08:25,139
with Twitter they're streaming API and

205
00:08:25,139 --> 00:08:27,360
they're playing API we have a timer

206
00:08:27,360 --> 00:08:29,250
which is what a lot of the polling is

207
00:08:29,250 --> 00:08:32,010
based off of it's an interval we have a

208
00:08:32,010 --> 00:08:33,659
documentation protocol which is pretty

209
00:08:33,659 --> 00:08:36,570
sweet recently just got mints going I

210
00:08:36,570 --> 00:08:37,709
don't know if you guys know about this

211
00:08:37,709 --> 00:08:41,909
it's a documentation project for node.js

212
00:08:41,909 --> 00:08:44,039
applications and JavaScript applications

213
00:08:44,039 --> 00:08:45,630
which is pretty sweet so the

214
00:08:45,630 --> 00:08:47,610
documentation protocol every time hook

215
00:08:47,610 --> 00:08:49,110
yo starts up for the first time we

216
00:08:49,110 --> 00:08:51,089
actually auto generate the documentation

217
00:08:51,089 --> 00:08:53,220
based on some static markdown files and

218
00:08:53,220 --> 00:08:54,270
then based on the ex

219
00:08:54,270 --> 00:08:56,520
words from our common J's modules so if

220
00:08:56,520 --> 00:08:58,020
you're making changes in the code and

221
00:08:58,020 --> 00:08:59,670
you restart the application its Auto

222
00:08:59,670 --> 00:09:01,200
documented instantly which is pretty

223
00:09:01,200 --> 00:09:04,320
neat and again protocols are just

224
00:09:04,320 --> 00:09:07,320
clusters of logic so for instance the

225
00:09:07,320 --> 00:09:10,470
HTTP protocol handles incoming HTTP

226
00:09:10,470 --> 00:09:12,180
connections and outgoing HTTP

227
00:09:12,180 --> 00:09:13,950
connections but you can make a hook yo

228
00:09:13,950 --> 00:09:18,420
protocol for anything okay so let's back

229
00:09:18,420 --> 00:09:20,850
up a second how did I build all of these

230
00:09:20,850 --> 00:09:22,950
protocols and right fifteen thousand

231
00:09:22,950 --> 00:09:28,380
lines of code in two months I didn't the

232
00:09:28,380 --> 00:09:31,050
trick is sub modules nodejs has a really

233
00:09:31,050 --> 00:09:32,370
strong community and there's a lot of

234
00:09:32,370 --> 00:09:33,900
really good people doing really good

235
00:09:33,900 --> 00:09:36,980
work and I've just been stealing at all

236
00:09:36,980 --> 00:09:40,230
so um but going back to protocols this

237
00:09:40,230 --> 00:09:41,870
is kind of what we have right now and

238
00:09:41,870 --> 00:09:44,160
what we're planning for the next release

239
00:09:44,160 --> 00:09:47,250
we're going to have github API access

240
00:09:47,250 --> 00:09:49,230
we're going to have a get protocol for

241
00:09:49,230 --> 00:09:52,260
doing system level get stuff working on

242
00:09:52,260 --> 00:09:55,200
a really cool RSS burner parser from you

243
00:09:55,200 --> 00:09:57,780
know aggregating a bunch of RSS feeds we

244
00:09:57,780 --> 00:09:59,010
want to integrate with the Facebook

245
00:09:59,010 --> 00:10:01,410
Connect API and then some of the really

246
00:10:01,410 --> 00:10:02,910
interesting stuff is I've been working

247
00:10:02,910 --> 00:10:06,420
with my friend Eli who did jas Tom he

248
00:10:06,420 --> 00:10:07,950
goes by Templar if anybody knows him

249
00:10:07,950 --> 00:10:10,430
we're working on doing server side

250
00:10:10,430 --> 00:10:13,260
support for Yui which came out a few

251
00:10:13,260 --> 00:10:16,860
weeks ago jquery and just HTML parsing

252
00:10:16,860 --> 00:10:18,690
so the interesting thing here is that we

253
00:10:18,690 --> 00:10:20,610
can begin to scrape pages and then

254
00:10:20,610 --> 00:10:23,010
perform client-side selectors server

255
00:10:23,010 --> 00:10:24,660
side so you don't need to learn any new

256
00:10:24,660 --> 00:10:26,130
selector library if you're familiar with

257
00:10:26,130 --> 00:10:28,650
jquery your sizzle or yui you can start

258
00:10:28,650 --> 00:10:30,840
to use that stuff server side so i'm

259
00:10:30,840 --> 00:10:32,070
sure a lot of people here have had to

260
00:10:32,070 --> 00:10:34,800
deal with scraping static web pages and

261
00:10:34,800 --> 00:10:36,750
it's a pain in the ass the traditional

262
00:10:36,750 --> 00:10:38,670
approach is you know pearl and a whole

263
00:10:38,670 --> 00:10:40,470
bunch of reg ex going back a few years

264
00:10:40,470 --> 00:10:43,080
and it just doesn't work so being able

265
00:10:43,080 --> 00:10:44,460
to leverage some of these existing

266
00:10:44,460 --> 00:10:46,290
technologies which have been really well

267
00:10:46,290 --> 00:10:48,270
defined on the front end is a very

268
00:10:48,270 --> 00:10:52,020
interesting thing so yes the node

269
00:10:52,020 --> 00:10:53,520
community is awesome I've gotten a lot

270
00:10:53,520 --> 00:10:55,020
of help there's a lot of really good

271
00:10:55,020 --> 00:10:57,570
people writing modules github is pretty

272
00:10:57,570 --> 00:10:59,610
amazing as well everyone's on github

273
00:10:59,610 --> 00:11:01,290
that's um involved the node community

274
00:11:01,290 --> 00:11:03,030
you know you can I need to go tell you

275
00:11:03,030 --> 00:11:06,090
guys how github works I like to think

276
00:11:06,090 --> 00:11:07,590
I'm a core contributor but I

277
00:11:07,590 --> 00:11:09,330
and submitted anything to note itself I

278
00:11:09,330 --> 00:11:11,190
just yell at other people to fix their

279
00:11:11,190 --> 00:11:13,680
modules which is kind of fun I'm in the

280
00:11:13,680 --> 00:11:15,600
IRC room all the time I might be the

281
00:11:15,600 --> 00:11:18,180
most active person there in there right

282
00:11:18,180 --> 00:11:22,770
now go back to that so hooky oh the

283
00:11:22,770 --> 00:11:24,650
development plan like I stated before

284
00:11:24,650 --> 00:11:27,930
really I'm not trying to reinvent any

285
00:11:27,930 --> 00:11:30,540
wheels people are doing really good work

286
00:11:30,540 --> 00:11:32,760
and I just want to leverage that so the

287
00:11:32,760 --> 00:11:34,590
current plan is to just fork and steal

288
00:11:34,590 --> 00:11:36,750
all of the best common Jas modules and

289
00:11:36,750 --> 00:11:39,180
then for can steal all the best work

290
00:11:39,180 --> 00:11:41,190
from the node community and then of

291
00:11:41,190 --> 00:11:42,900
course integrate with every single web

292
00:11:42,900 --> 00:11:47,250
service we can find create a lot of

293
00:11:47,250 --> 00:11:49,080
github issues and hope somebody fixes

294
00:11:49,080 --> 00:11:51,810
them I like to join the github IRC room

295
00:11:51,810 --> 00:11:53,520
on occasion and say hey I've been

296
00:11:53,520 --> 00:11:55,440
creating issues on my github project but

297
00:11:55,440 --> 00:12:00,840
nobody's fixing them is github down yeah

298
00:12:00,840 --> 00:12:03,570
they don't like that too much and of

299
00:12:03,570 --> 00:12:05,220
course part of the development plan is

300
00:12:05,220 --> 00:12:08,460
to yell at more people on IRC so now

301
00:12:08,460 --> 00:12:10,050
that we've kind of talked about what

302
00:12:10,050 --> 00:12:11,820
hooky Oh is like well how could we use

303
00:12:11,820 --> 00:12:13,500
it how could I build an application on

304
00:12:13,500 --> 00:12:17,340
hooky Oh as a developer so first I kind

305
00:12:17,340 --> 00:12:20,310
of want to talk about the hook EO API so

306
00:12:20,310 --> 00:12:23,160
the API for hooky o is exposed through

307
00:12:23,160 --> 00:12:25,020
different interfaces so you can

308
00:12:25,020 --> 00:12:26,730
communicate to the API through many

309
00:12:26,730 --> 00:12:29,730
different ways json-rpc is the current

310
00:12:29,730 --> 00:12:31,140
way that it's exposed but we'll get a

311
00:12:31,140 --> 00:12:33,510
little bit into that later so at the

312
00:12:33,510 --> 00:12:35,550
lowest level the hook EO API is exposed

313
00:12:35,550 --> 00:12:37,920
through a common J's module so you just

314
00:12:37,920 --> 00:12:40,140
require hook view of the commonjs module

315
00:12:40,140 --> 00:12:42,510
and then you have access to hook Yoda

316
00:12:42,510 --> 00:12:44,700
API which is the top level API calls

317
00:12:44,700 --> 00:12:47,880
some other interesting things is that if

318
00:12:47,880 --> 00:12:49,470
you're importing hookie Oh as a common

319
00:12:49,470 --> 00:12:51,030
j/s module new tend to use it in that

320
00:12:51,030 --> 00:12:52,650
fashion you also have access to the

321
00:12:52,650 --> 00:12:54,960
underscore library by Jeremy are no fees

322
00:12:54,960 --> 00:12:57,570
in here right now underscore is a

323
00:12:57,570 --> 00:12:59,520
functional library for a JavaScript it's

324
00:12:59,520 --> 00:13:02,190
pretty cool you have access to the raw

325
00:13:02,190 --> 00:13:04,500
DB command so if you want to bypass the

326
00:13:04,500 --> 00:13:06,450
API you can just go straight to the DB

327
00:13:06,450 --> 00:13:08,880
layer and start running queries you have

328
00:13:08,880 --> 00:13:11,100
access to hooky ODOT de bug which is

329
00:13:11,100 --> 00:13:13,590
really neat it's an alias for node debug

330
00:13:13,590 --> 00:13:14,700
which is another project I've been

331
00:13:14,700 --> 00:13:16,860
working on it's a synchronous web

332
00:13:16,860 --> 00:13:18,630
console for debugging for node

333
00:13:18,630 --> 00:13:21,360
s so I actually had a few more options

334
00:13:21,360 --> 00:13:23,550
for hokey oh you can log to a file you

335
00:13:23,550 --> 00:13:25,920
can log to the console and of course to

336
00:13:25,920 --> 00:13:28,440
the asynchronous web console and then I

337
00:13:28,440 --> 00:13:29,790
started to add some flow control

338
00:13:29,790 --> 00:13:31,560
libraries by Tim Casswell step is in

339
00:13:31,560 --> 00:13:34,160
there right now which is pretty neat so

340
00:13:34,160 --> 00:13:36,390
now that we have this idea of the hook

341
00:13:36,390 --> 00:13:39,240
gyo API we're going to talk about using

342
00:13:39,240 --> 00:13:41,400
hokey o as a software-as-a-service so

343
00:13:41,400 --> 00:13:43,680
like I said before ochio is a standalone

344
00:13:43,680 --> 00:13:46,170
application a common J's module and a

345
00:13:46,170 --> 00:13:47,940
software-as-a-service so it's a little

346
00:13:47,940 --> 00:13:49,770
confusing because the name of the

347
00:13:49,770 --> 00:13:51,690
project is also the name of the website

348
00:13:51,690 --> 00:13:53,190
which is also the name of the software

349
00:13:53,190 --> 00:13:54,990
as a service which is also the name of a

350
00:13:54,990 --> 00:13:57,930
common j/s module so if you want to use

351
00:13:57,930 --> 00:13:59,160
the software as a service now it's

352
00:13:59,160 --> 00:14:01,910
available at hook do as the JSON RPC

353
00:14:01,910 --> 00:14:04,470
we're going to be investigating exposing

354
00:14:04,470 --> 00:14:06,510
it you know maybe xml-rpc maybe so if

355
00:14:06,510 --> 00:14:08,600
there's a lot of options we can do

356
00:14:08,600 --> 00:14:11,310
working on Jason P support so you can

357
00:14:11,310 --> 00:14:12,750
start doing some cross browsers to I'm

358
00:14:12,750 --> 00:14:16,020
sorry at cross domain stuff so using

359
00:14:16,020 --> 00:14:17,640
hook yo as the software as a service you

360
00:14:17,640 --> 00:14:20,910
can build a standalone client just on

361
00:14:20,910 --> 00:14:22,020
the front and it's just going to talk

362
00:14:22,020 --> 00:14:24,060
over JavaScript so we have a browser

363
00:14:24,060 --> 00:14:26,970
side JavaScript API which wraps the

364
00:14:26,970 --> 00:14:30,420
Tokyo API in je s and then communicates

365
00:14:30,420 --> 00:14:32,490
over the JSON RPC so if you're using

366
00:14:32,490 --> 00:14:33,900
hookie oh you know as a common J's

367
00:14:33,900 --> 00:14:35,490
module you've become familiar with the

368
00:14:35,490 --> 00:14:37,590
API calls it's going to be identical for

369
00:14:37,590 --> 00:14:39,810
the JSON RPC and pretty much anywhere

370
00:14:39,810 --> 00:14:42,240
you expose the API through any interface

371
00:14:42,240 --> 00:14:43,980
all the calls are one to one so you

372
00:14:43,980 --> 00:14:48,630
don't need to learn different things so

373
00:14:48,630 --> 00:14:50,700
okay hook you as a standalone server

374
00:14:50,700 --> 00:14:52,830
really simple all you have to do is just

375
00:14:52,830 --> 00:14:55,260
clone it run the sub-module update will

376
00:14:55,260 --> 00:14:56,850
be doing packaging for later versions

377
00:14:56,850 --> 00:14:58,620
but for now they're sub modules and then

378
00:14:58,620 --> 00:15:01,170
you just node server j/s so the

379
00:15:01,170 --> 00:15:02,670
interesting thing here is if you look at

380
00:15:02,670 --> 00:15:05,130
the actual server JS file all we're

381
00:15:05,130 --> 00:15:06,630
doing is just requiring hookie oh and

382
00:15:06,630 --> 00:15:15,450
starting it up so part of the problem

383
00:15:15,450 --> 00:15:16,800
when I've been developing hook me oh is

384
00:15:16,800 --> 00:15:18,000
that I'm trying to solve a domain

385
00:15:18,000 --> 00:15:20,040
problem that isn't very well defined and

386
00:15:20,040 --> 00:15:21,630
what I was hoping is that I would kind

387
00:15:21,630 --> 00:15:23,520
of cut my presentation a little bit

388
00:15:23,520 --> 00:15:25,110
short and I want to open this up to a QA

389
00:15:25,110 --> 00:15:26,850
so we can kind of talk about web hooks

390
00:15:26,850 --> 00:15:28,800
and the web hook environment I know a

391
00:15:28,800 --> 00:15:30,050
lot of people here have

392
00:15:30,050 --> 00:15:31,880
to deal with this in applications and

393
00:15:31,880 --> 00:15:33,380
I'm kind of curious and get some

394
00:15:33,380 --> 00:15:35,209
feedback about you know what do you

395
00:15:35,209 --> 00:15:36,709
think of web hooks what do you think

396
00:15:36,709 --> 00:15:39,260
Tokyo would you ever consider using a

397
00:15:39,260 --> 00:15:40,760
service like it and what features would

398
00:15:40,760 --> 00:15:43,790
you like to see so um if anyone has any

399
00:15:43,790 --> 00:15:45,709
questions I'd like to kind of turn this

400
00:15:45,709 --> 00:15:51,170
into a QA that's yeah anybody where do

401
00:15:51,170 --> 00:15:52,910
you sort of see the first potential use

402
00:15:52,910 --> 00:15:55,459
of this and like in the industry right

403
00:15:55,459 --> 00:15:56,750
because right now you just have it as a

404
00:15:56,750 --> 00:15:58,850
more of a private project or public

405
00:15:58,850 --> 00:16:00,890
project rather but where do you see it

406
00:16:00,890 --> 00:16:03,290
kind of being hooked into so if you go

407
00:16:03,290 --> 00:16:04,519
to hook that I oh there's actually a

408
00:16:04,519 --> 00:16:07,610
section called business ideas there's a

409
00:16:07,610 --> 00:16:09,230
lot of businesses right now web

410
00:16:09,230 --> 00:16:11,060
businesses that I consider a subset of

411
00:16:11,060 --> 00:16:12,769
pokeo functionality if you look at

412
00:16:12,769 --> 00:16:14,360
something like bit ly like a URL

413
00:16:14,360 --> 00:16:16,550
shortening service and hook EO all that

414
00:16:16,550 --> 00:16:19,100
is is a listener for a unique URL and

415
00:16:19,100 --> 00:16:20,660
then an action which redirects to

416
00:16:20,660 --> 00:16:23,600
another URL so in theory you know you

417
00:16:23,600 --> 00:16:25,160
just kind of replicated the basic

418
00:16:25,160 --> 00:16:26,690
functionality of bit ly right there and

419
00:16:26,690 --> 00:16:28,820
the way that web hooks work in hookie oh

420
00:16:28,820 --> 00:16:30,500
is that you can chain them so you have

421
00:16:30,500 --> 00:16:32,450
the initial action of an incoming URL

422
00:16:32,450 --> 00:16:34,640
and then a redirection so you could put

423
00:16:34,640 --> 00:16:36,170
a couple of hooks in between and then

424
00:16:36,170 --> 00:16:37,339
you could start logging things like

425
00:16:37,339 --> 00:16:38,930
analytics you know where they came from

426
00:16:38,930 --> 00:16:41,870
and so that's like one specific use case

427
00:16:41,870 --> 00:16:43,160
but um there's probably like eight or

428
00:16:43,160 --> 00:16:45,070
ten of them on there there's a lot of

429
00:16:45,070 --> 00:16:47,120
services right now like people are

430
00:16:47,120 --> 00:16:50,209
parsing and scraping HTML from sites and

431
00:16:50,209 --> 00:16:51,860
then there a cure gating that data and

432
00:16:51,860 --> 00:16:54,050
then pushing it somewhere like Tokyo

433
00:16:54,050 --> 00:16:55,550
could really take over a lot of that

434
00:16:55,550 --> 00:17:01,129
stuff into the question

435
00:17:01,139 --> 00:17:04,649
so the general purpose of it is to kind

436
00:17:04,649 --> 00:17:09,090
of monitor or what a job there and

437
00:17:09,100 --> 00:17:13,070
rules are something that once it catches

438
00:17:13,070 --> 00:17:15,830
that then you perform some punk

439
00:17:15,830 --> 00:17:19,700
interaction on average indeed sure so

440
00:17:19,700 --> 00:17:22,520
monitoring a web page would be polar

441
00:17:22,520 --> 00:17:24,740
you'd be pulling like a static resource

442
00:17:24,740 --> 00:17:26,060
so that's one way that hokey o can

443
00:17:26,060 --> 00:17:28,310
listen for things but again it can also

444
00:17:28,310 --> 00:17:29,630
do sockets oh yeah you're just like

445
00:17:29,630 --> 00:17:31,340
listening for some event and then you're

446
00:17:31,340 --> 00:17:32,960
going to perform some arbitrary action

447
00:17:32,960 --> 00:17:35,360
so a lot of the use cases I think will

448
00:17:35,360 --> 00:17:36,860
be for scraping like you're saying you

449
00:17:36,860 --> 00:17:39,170
can start aggregating information from a

450
00:17:39,170 --> 00:17:41,750
static page or you kind of turn it

451
00:17:41,750 --> 00:17:43,310
dynamic so suppose there was a website

452
00:17:43,310 --> 00:17:45,320
you really liked going to and you wanted

453
00:17:45,320 --> 00:17:46,610
to get updates from it but they didn't

454
00:17:46,610 --> 00:17:48,350
have an RSS feed and they didn't have a

455
00:17:48,350 --> 00:17:50,030
mailing list or anything like that you

456
00:17:50,030 --> 00:17:52,670
could set up a polar to check that page

457
00:17:52,670 --> 00:17:54,350
and then when the content updated you

458
00:17:54,350 --> 00:17:56,150
could fire an action maybe send email

459
00:17:56,150 --> 00:17:57,530
then it would send you the contents of

460
00:17:57,530 --> 00:18:00,980
the page so what's your description

461
00:18:00,980 --> 00:18:03,500
there else I guess I'd probably want to

462
00:18:03,500 --> 00:18:06,440
think more about the similarities

463
00:18:06,450 --> 00:18:09,360
so of course so in one of the future

464
00:18:09,360 --> 00:18:10,590
versions of hook you we haven't really

465
00:18:10,590 --> 00:18:12,060
planned it out I want to make cookie o

466
00:18:12,060 --> 00:18:15,000
itself a pop-up sub of note i guess and

467
00:18:15,000 --> 00:18:16,530
i don't think it would be very difficult

468
00:18:16,530 --> 00:18:18,270
to do because to just push those

469
00:18:18,270 --> 00:18:20,220
messages back and forth is you know we

470
00:18:20,220 --> 00:18:21,360
already have most of the functionality

471
00:18:21,360 --> 00:18:26,280
established another user fee I'll go to

472
00:18:26,280 --> 00:18:30,090
my head of gamer testing content on

473
00:18:30,090 --> 00:18:33,180
holidays like is the API up org or

474
00:18:33,180 --> 00:18:37,710
something like that yeah we still a lot

475
00:18:37,710 --> 00:18:41,340
of unit testing working so then we

476
00:18:41,340 --> 00:18:43,170
always do the testing prior to pushing

477
00:18:43,170 --> 00:18:45,330
the code Apple once it's out there if

478
00:18:45,330 --> 00:18:47,220
you know something changes if you're

479
00:18:47,220 --> 00:18:49,850
including gums for

480
00:18:49,850 --> 00:18:51,940
that's failing for rent

481
00:18:51,940 --> 00:18:54,190
something but is this one this would be

482
00:18:54,190 --> 00:18:58,389
rendered JavaScript but definitely outta

483
00:18:58,389 --> 00:19:02,559
there any other questions you do yeah I

484
00:19:02,559 --> 00:19:04,750
can show the live site I was a little

485
00:19:04,750 --> 00:19:07,450
hesitant to do a demo hopefully nobody's

486
00:19:07,450 --> 00:19:10,600
taking it down yet so this is the live

487
00:19:10,600 --> 00:19:11,889
site right now I'm going to probably

488
00:19:11,889 --> 00:19:14,379
load up the local version so there's a

489
00:19:14,379 --> 00:19:16,899
few things going on here sites down so

490
00:19:16,899 --> 00:19:19,840
see if this is up okay so we have some

491
00:19:19,840 --> 00:19:21,610
API unit tests i think the last ones

492
00:19:21,610 --> 00:19:26,470
failing right now awesome so again kind

493
00:19:26,470 --> 00:19:28,179
of the mantra when something happens do

494
00:19:28,179 --> 00:19:31,110
something else so in this case will say

495
00:19:31,110 --> 00:19:35,620
ochio URL visit i'll just say blah and

496
00:19:35,620 --> 00:19:37,320
then we'll say do something else and

497
00:19:37,320 --> 00:19:40,809
then we could say perform arbitrary HTTP

498
00:19:40,809 --> 00:19:43,960
requests or we can say send an email

499
00:19:43,960 --> 00:19:48,220
this is always fun yeah so i don't think

500
00:19:48,220 --> 00:19:49,809
i have send mail setup on this machine

501
00:19:49,809 --> 00:19:51,399
but the idea would be is you you know

502
00:19:51,399 --> 00:19:52,779
you can figure the listener and then you

503
00:19:52,779 --> 00:19:54,850
can figure the action gives you a little

504
00:19:54,850 --> 00:19:56,350
pretty print confirmation of what's

505
00:19:56,350 --> 00:19:58,960
about to happen here you have your web

506
00:19:58,960 --> 00:20:01,210
hook object you have the listener and

507
00:20:01,210 --> 00:20:03,129
then you have the actions array so the

508
00:20:03,129 --> 00:20:05,980
listener is going to be HTTP and you're

509
00:20:05,980 --> 00:20:07,960
going listen for the path of blah so

510
00:20:07,960 --> 00:20:10,120
this means an incoming HTTP request with

511
00:20:10,120 --> 00:20:11,919
this matching path and when that happens

512
00:20:11,919 --> 00:20:13,240
we're going to perform these actions

513
00:20:13,240 --> 00:20:15,610
which is going to be send email with the

514
00:20:15,610 --> 00:20:18,519
values rocks wires from President Obama

515
00:20:18,519 --> 00:20:22,690
Tokyo is awesome what's wrong

516
00:20:22,690 --> 00:20:26,720
okay so this is the protocol would be

517
00:20:26,720 --> 00:20:30,410
the type so the type is the protocol

518
00:20:30,410 --> 00:20:33,650
HTTP and the action protocol would be

519
00:20:33,650 --> 00:20:35,840
send email so in the web book definition

520
00:20:35,840 --> 00:20:37,850
the listener is going to be listening

521
00:20:37,850 --> 00:20:40,010
using the HTTP protocol which we've

522
00:20:40,010 --> 00:20:41,900
defined with these configurations and

523
00:20:41,900 --> 00:20:44,570
then the sent email for the action is

524
00:20:44,570 --> 00:20:46,780
going to be using the send email

525
00:20:46,780 --> 00:20:48,920
protocol which is a very thin wrapper

526
00:20:48,920 --> 00:20:51,560
for my email protocol which we could

527
00:20:51,560 --> 00:20:52,880
probably abstract into something else

528
00:20:52,880 --> 00:20:55,520
and yeah and it's going to send it out

529
00:20:55,520 --> 00:20:57,470
with this definition that answer your

530
00:20:57,470 --> 00:21:03,430
question and then yeah so create this

531
00:21:03,430 --> 00:21:05,750
confirm successful look is successful

532
00:21:05,750 --> 00:21:11,390
and then if we go to front / blah it

533
00:21:11,390 --> 00:21:12,980
found the hook and right now I don't

534
00:21:12,980 --> 00:21:14,030
think it's actually performing the

535
00:21:14,030 --> 00:21:15,290
action it's just kind of bringing it up

536
00:21:15,290 --> 00:21:16,610
and dumping it and that's the action ID

537
00:21:16,610 --> 00:21:25,980
so any other questions

538
00:21:25,990 --> 00:21:29,650
so I'm curious as to exactly how would

539
00:21:29,650 --> 00:21:32,080
we get from listening to actually

540
00:21:32,080 --> 00:21:36,220
scraping content bulova whistling you so

541
00:21:36,220 --> 00:21:38,620
sure yeah so um it's a little hard to

542
00:21:38,620 --> 00:21:39,940
explain without you know a concrete

543
00:21:39,940 --> 00:21:41,980
example to show you but the idea would

544
00:21:41,980 --> 00:21:43,690
be is that when something happens you

545
00:21:43,690 --> 00:21:47,380
would say on a timer right so you say

546
00:21:47,380 --> 00:21:50,890
every 30 seconds I want to perform an

547
00:21:50,890 --> 00:21:56,410
arbitrary HTTP requests right so now

548
00:21:56,410 --> 00:21:57,730
what we haven't really set up yet in

549
00:21:57,730 --> 00:21:58,840
which we're really working on for the

550
00:21:58,840 --> 00:22:00,520
second version for the scraping and the

551
00:22:00,520 --> 00:22:02,920
server-side Dom parsing would be on the

552
00:22:02,920 --> 00:22:05,770
timer this would hit the URL every 30

553
00:22:05,770 --> 00:22:07,150
seconds and then we would have another

554
00:22:07,150 --> 00:22:09,520
hook that would be chained on to this so

555
00:22:09,520 --> 00:22:10,960
when the response came back and the

556
00:22:10,960 --> 00:22:12,670
timer fire we would say take the payload

557
00:22:12,670 --> 00:22:14,530
from that HTTP request and then perform

558
00:22:14,530 --> 00:22:16,780
some custom validation or parsing on it

559
00:22:16,780 --> 00:22:18,040
and then based off that we can fire

560
00:22:18,040 --> 00:22:23,200
another web book yes that's all I I

561
00:22:23,200 --> 00:22:25,059
didn't really go over it here but that's

562
00:22:25,059 --> 00:22:26,440
really where it's going to be going is

563
00:22:26,440 --> 00:22:27,730
some flow control you know many

564
00:22:27,730 --> 00:22:29,559
listeners to many actions and then you

565
00:22:29,559 --> 00:22:32,290
can create complex chains so by creating

566
00:22:32,290 --> 00:22:33,970
simple web hooks in a chain you can

567
00:22:33,970 --> 00:22:35,770
really make some awesome functionality

568
00:22:35,770 --> 00:22:36,640
and then of course you can start

569
00:22:36,640 --> 00:22:42,490
splitting the chain for and then in the

570
00:22:42,490 --> 00:22:49,280
back network

571
00:22:49,290 --> 00:22:51,720
distribute

572
00:22:51,720 --> 00:22:54,450
so there's UJ totally so there's two

573
00:22:54,450 --> 00:22:56,610
approaches here um you could easily just

574
00:22:56,610 --> 00:22:58,620
set up to wikio instances completely

575
00:22:58,620 --> 00:22:59,760
separately and then make them

576
00:22:59,760 --> 00:23:00,870
communicate with each other through

577
00:23:00,870 --> 00:23:03,090
restful web hooks that's kind of the

578
00:23:03,090 --> 00:23:05,280
cheat you could also have been kind of

579
00:23:05,280 --> 00:23:07,590
thinking about I know that um Rick over

580
00:23:07,590 --> 00:23:08,789
there has been working on something

581
00:23:08,789 --> 00:23:11,460
called dealer j/s so like I'm definitely

582
00:23:11,460 --> 00:23:12,960
thinking of being able to set up

583
00:23:12,960 --> 00:23:15,450
clusters of pokeo servers and actually

584
00:23:15,450 --> 00:23:16,679
have them communicate maybe like you

585
00:23:16,679 --> 00:23:18,419
know through a TCP socket opposed to

586
00:23:18,419 --> 00:23:20,580
doing HTTP requests so there's nothing

587
00:23:20,580 --> 00:23:22,530
available right now but that's

588
00:23:22,530 --> 00:23:27,610
definitely planned for the future

589
00:23:27,620 --> 00:23:32,520
anybody else are we done great well

590
00:23:32,520 --> 00:23:33,990
thanks a lot i'm really glad you guys

591
00:23:33,990 --> 00:23:35,070
voted for me and i got the opportunity

592
00:23:35,070 --> 00:23:37,350
to speak here and yeah check out the

593
00:23:37,350 --> 00:23:39,059
check out the site hooked on Io and

594
00:23:39,059 --> 00:23:41,159
check out check me out on github maroc

