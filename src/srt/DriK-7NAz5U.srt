1
00:00:08,940 --> 00:00:11,769

there's a high-performance cash with up

2
00:00:11,769 --> 00:00:15,429
so well abid laid right so I don't want

3
00:00:15,429 --> 00:00:16,840
to take much of your lunch time and

4
00:00:16,840 --> 00:00:20,200
networking time so hopefully it's a how

5
00:00:20,200 --> 00:00:22,780
to you know improve performance on web

6
00:00:22,780 --> 00:00:25,770
applications web sites from a JavaScript

7
00:00:25,770 --> 00:00:29,080
perspective so hopefully you know most

8
00:00:29,080 --> 00:00:32,380
of these things so let this be kind of a

9
00:00:32,380 --> 00:00:35,080
inspirational talk so you know you're

10
00:00:35,080 --> 00:00:39,610
just getting spire to make your

11
00:00:39,610 --> 00:00:42,580
applications faster in your users

12
00:00:42,580 --> 00:00:45,070
happier right so my name is toy and I

13
00:00:45,070 --> 00:00:46,840
work recently joined the echo search

14
00:00:46,840 --> 00:00:49,150
before that I was working in the

15
00:00:49,150 --> 00:00:51,310
exceptional performance team like a

16
00:00:51,310 --> 00:00:53,350
central group of a kind of in internal

17
00:00:53,350 --> 00:00:55,170
consulting not working on a specific

18
00:00:55,170 --> 00:00:58,210
site or property but that just working

19
00:00:58,210 --> 00:00:59,380
with the different properties and help

20
00:00:59,380 --> 00:01:02,980
them get faster so I worked on the y

21
00:01:02,980 --> 00:01:05,950
slow extension you're probably familiar

22
00:01:05,950 --> 00:01:08,920
with that I also designed the second

23
00:01:08,920 --> 00:01:11,140
version of it which is a complete

24
00:01:11,140 --> 00:01:14,979
rewrite and face Mora actually I want to

25
00:01:14,979 --> 00:01:16,510
talk about this but the thing is it's

26
00:01:16,510 --> 00:01:18,970
not out there yet so it's from what I

27
00:01:18,970 --> 00:01:20,680
understand because I'm a longer in team

28
00:01:20,680 --> 00:01:24,070
it will be out any day now so look out

29
00:01:24,070 --> 00:01:27,640
for that also did this smash it to for

30
00:01:27,640 --> 00:01:29,170
image optimization if you haven't seen

31
00:01:29,170 --> 00:01:33,330
it so why do we care about performance

32
00:01:33,330 --> 00:01:36,250
so there's some some numbers that we

33
00:01:36,250 --> 00:01:41,040
wanted to we like to show around like

34
00:01:41,040 --> 00:01:43,240
there was somebody from google saying

35
00:01:43,240 --> 00:01:46,540
that when their search results page

36
00:01:46,540 --> 00:01:49,930
became a half a second slower they saw

37
00:01:49,930 --> 00:01:54,100
twenty percent drop in traffic for Yahoo

38
00:01:54,100 --> 00:01:55,780
we did an experiment with a property

39
00:01:55,780 --> 00:01:57,880
where we just artificially delayed the

40
00:01:57,880 --> 00:02:01,420
page so it doesn't load as fast so the

41
00:02:01,420 --> 00:02:05,320
first few hundred milliseconds were

42
00:02:05,320 --> 00:02:07,570
cable and when you got to a 400

43
00:02:07,570 --> 00:02:10,209
milliseconds we so five to nine percent

44
00:02:10,209 --> 00:02:12,370
drop in the full page traffic what it

45
00:02:12,370 --> 00:02:14,770
means is people clicking away

46
00:02:14,770 --> 00:02:16,630
you're hitting back or going somewhere

47
00:02:16,630 --> 00:02:18,370
else without before the pages actually

48
00:02:18,370 --> 00:02:21,220
loaded and there is also some some other

49
00:02:21,220 --> 00:02:23,830
number from amazon that are making your

50
00:02:23,830 --> 00:02:27,070
arm making their site only 100

51
00:02:27,070 --> 00:02:29,140
milliseconds floor they saw a one

52
00:02:29,140 --> 00:02:33,130
percent drop in sales so this is a quite

53
00:02:33,130 --> 00:02:39,970
illustrative but so if you want to you

54
00:02:39,970 --> 00:02:41,440
know work with your business folks to

55
00:02:41,440 --> 00:02:43,270
get some time allocated to work on

56
00:02:43,270 --> 00:02:44,380
performance you can show them those

57
00:02:44,380 --> 00:02:46,540
numbers but take those with a grain of

58
00:02:46,540 --> 00:02:49,000
salt right because every application is

59
00:02:49,000 --> 00:02:53,560
different and what well like for example

60
00:02:53,560 --> 00:02:58,710
in the yahoo example the fact that you

61
00:02:58,710 --> 00:03:02,020
will have some full page traffic might

62
00:03:02,020 --> 00:03:06,070
not actually be in any you make any

63
00:03:06,070 --> 00:03:07,510
difference for for specific peppers

64
00:03:07,510 --> 00:03:09,640
allocations if you have ecommerce site

65
00:03:09,640 --> 00:03:11,680
where all you need to show up is the

66
00:03:11,680 --> 00:03:15,070
name of the product they end up by now

67
00:03:15,070 --> 00:03:16,960
button right so you don't really care

68
00:03:16,960 --> 00:03:20,200
about the full page traffic so but one

69
00:03:20,200 --> 00:03:23,050
thing is true is that uh when you when

70
00:03:23,050 --> 00:03:25,180
you make your page slower and you're

71
00:03:25,180 --> 00:03:27,430
losing traffic you losing visitors and

72
00:03:27,430 --> 00:03:29,470
he was degrading the user experience at

73
00:03:29,470 --> 00:03:30,459
the end it's all about the user

74
00:03:30,459 --> 00:03:32,410
experience and speaking with different

75
00:03:32,410 --> 00:03:35,050
companies but notice that it's kind of a

76
00:03:35,050 --> 00:03:37,209
self-regulating system right so when you

77
00:03:37,209 --> 00:03:39,130
when you do something stupid in your

78
00:03:39,130 --> 00:03:42,040
next update of your application and you

79
00:03:42,040 --> 00:03:45,700
make it slower actually nothing in me no

80
00:03:45,700 --> 00:03:48,310
one dies right so the servers are okay

81
00:03:48,310 --> 00:03:50,680
it's just that you have less traffic so

82
00:03:50,680 --> 00:03:53,560
if you if you make it slower then you

83
00:03:53,560 --> 00:03:55,660
just lose visitors yeah you have like

84
00:03:55,660 --> 00:03:57,880
sessions shorter sessions and people

85
00:03:57,880 --> 00:04:00,870
just get irritated from the slow pages

86
00:04:00,870 --> 00:04:05,340
so the or when you when you go into

87
00:04:05,340 --> 00:04:07,720
optimization so that's the first kind of

88
00:04:07,720 --> 00:04:09,550
mantra to remember that a premature

89
00:04:09,550 --> 00:04:10,959
optimization is the root of all evil

90
00:04:10,959 --> 00:04:14,130
right so and/or is good crockford put it

91
00:04:14,130 --> 00:04:16,390
yeah make it right before to make it

92
00:04:16,390 --> 00:04:19,480
fast so don't just brush into an Orion

93
00:04:19,480 --> 00:04:20,750
engine

94
00:04:20,750 --> 00:04:23,340
like spending weeks and introducing new

95
00:04:23,340 --> 00:04:25,380
bugs and fixing those bugs and wake up

96
00:04:25,380 --> 00:04:27,960
unit two weeks later find out that it's

97
00:04:27,960 --> 00:04:29,850
probably working pretty much the same

98
00:04:29,850 --> 00:04:34,639
way so just make sure that your profile

99
00:04:34,639 --> 00:04:37,950
you measure your monitors so basically

100
00:04:37,950 --> 00:04:40,020
pick your battles see where where it

101
00:04:40,020 --> 00:04:44,790
make more sense to spend your time so it

102
00:04:44,790 --> 00:04:46,860
often the performance optimizations are

103
00:04:46,860 --> 00:04:48,990
trade-offs and this is what I was

104
00:04:48,990 --> 00:04:51,540
reading rereading this three men in a

105
00:04:51,540 --> 00:04:52,919
boat or what the guy has to say about

106
00:04:52,919 --> 00:04:55,860
trade-off that everything has its

107
00:04:55,860 --> 00:04:57,990
drawbacks as the men said when his

108
00:04:57,990 --> 00:05:00,180
mother-in-law died and they came upon

109
00:05:00,180 --> 00:05:02,910
him for the funeral expenses so you know

110
00:05:02,910 --> 00:05:09,450
everything gets like two sides so he

111
00:05:09,450 --> 00:05:13,590
keeps on one like a timeline comparison

112
00:05:13,590 --> 00:05:17,310
without the life of the typical page 2

113
00:05:17,310 --> 00:05:19,860
point 0 like with the human life right

114
00:05:19,860 --> 00:05:22,970
you start with with a request or

115
00:05:22,970 --> 00:05:26,580
conception in for human so then your

116
00:05:26,580 --> 00:05:30,030
server sends the HTML which is kind of

117
00:05:30,030 --> 00:05:32,640
like a human birth right so after that

118
00:05:32,640 --> 00:05:35,160
after once the HTML like the backend

119
00:05:35,160 --> 00:05:37,560
works it the queries all those web

120
00:05:37,560 --> 00:05:40,740
services gets data from databases and

121
00:05:40,740 --> 00:05:43,530
since the HTML so then it says the so

122
00:05:43,530 --> 00:05:45,539
called the waterfall like in the HTML

123
00:05:45,539 --> 00:05:47,370
you refer to some JavaScript CSS images

124
00:05:47,370 --> 00:05:50,389
so all those need to be downloaded and

125
00:05:50,389 --> 00:05:53,210
eventually the onload event happens and

126
00:05:53,210 --> 00:05:56,910
in typical modern application that's not

127
00:05:56,910 --> 00:05:59,820
the end of it because then you start

128
00:05:59,820 --> 00:06:02,220
initializing JavaScript's do some

129
00:06:02,220 --> 00:06:04,530
progressive enhancement replace some

130
00:06:04,530 --> 00:06:08,490
some dill note dumb note and eventually

131
00:06:08,490 --> 00:06:11,419
maybe you get some more xhr data and

132
00:06:11,419 --> 00:06:13,830
eventually the page kind of settles and

133
00:06:13,830 --> 00:06:18,570
the user is gauging with the page so the

134
00:06:18,570 --> 00:06:20,880
thing about the unload is an event right

135
00:06:20,880 --> 00:06:22,889
so you know when it happens but what

136
00:06:22,889 --> 00:06:25,260
about the user unload whether the user

137
00:06:25,260 --> 00:06:28,050
things when the pages is loaded is not

138
00:06:28,050 --> 00:06:30,960
quite clear it depends on the page right

139
00:06:30,960 --> 00:06:33,570
if it's an article the page is pretty

140
00:06:33,570 --> 00:06:34,350
much done when

141
00:06:34,350 --> 00:06:35,790
can start reading the article you don't

142
00:06:35,790 --> 00:06:38,070
care about all the ads or badges widget

143
00:06:38,070 --> 00:06:43,260
and so on or the person may wait until

144
00:06:43,260 --> 00:06:45,500
everything like the status bar stops

145
00:06:45,500 --> 00:06:48,900
changing the like everything looks set

146
00:06:48,900 --> 00:06:52,290
out so the user onload really depends on

147
00:06:52,290 --> 00:06:58,410
the depends on the application so first

148
00:06:58,410 --> 00:07:00,780
let's talk about the optimization you

149
00:07:00,780 --> 00:07:03,000
can do to the waterfall right once the

150
00:07:03,000 --> 00:07:08,280
the HTML is sent so you can do a group

151
00:07:08,280 --> 00:07:13,710
of task like we can group them in to

152
00:07:13,710 --> 00:07:15,510
optimize your water for basically one

153
00:07:15,510 --> 00:07:17,580
this waterfall to be shorter right so

154
00:07:17,580 --> 00:07:18,960
that you get all the components in the

155
00:07:18,960 --> 00:07:21,660
pages right in less time so the most

156
00:07:21,660 --> 00:07:24,090
obvious thing is to just put less stuff

157
00:07:24,090 --> 00:07:27,840
in this waterfall like have less less

158
00:07:27,840 --> 00:07:31,950
elements on the page then whatever is

159
00:07:31,950 --> 00:07:34,170
left make sure it's smaller right try to

160
00:07:34,170 --> 00:07:37,560
to minimize the size of it then the next

161
00:07:37,560 --> 00:07:39,210
step will be to make sure that there's

162
00:07:39,210 --> 00:07:42,030
no blocking going on right if one one

163
00:07:42,030 --> 00:07:43,770
component blocks the others make sure

164
00:07:43,770 --> 00:07:45,810
that it's you know don't stay in the way

165
00:07:45,810 --> 00:07:48,150
of the other components and another

166
00:07:48,150 --> 00:07:50,880
optimization is to try to start this

167
00:07:50,880 --> 00:07:53,600
waterfall process as early as possible

168
00:07:53,600 --> 00:07:57,390
so about less stuff so the single most

169
00:07:57,390 --> 00:07:59,310
important thing probably is the the

170
00:07:59,310 --> 00:08:01,830
price of the HTTP request right so just

171
00:08:01,830 --> 00:08:04,380
aim to have as less HTTP requests as

172
00:08:04,380 --> 00:08:08,250
possible so that may mean strip features

173
00:08:08,250 --> 00:08:10,800
but not necessarily you can just combine

174
00:08:10,800 --> 00:08:13,470
the components that you already have so

175
00:08:13,470 --> 00:08:17,460
for example if you have so this is

176
00:08:17,460 --> 00:08:19,610
pretty typical right so you have your

177
00:08:19,610 --> 00:08:22,800
your JavaScript code right here my apt

178
00:08:22,800 --> 00:08:25,650
ogs then you use a third-party library

179
00:08:25,650 --> 00:08:29,190
and this third-party library has some

180
00:08:29,190 --> 00:08:31,140
plug is that you want to use so you end

181
00:08:31,140 --> 00:08:33,900
up with a with a few script tags so

182
00:08:33,900 --> 00:08:36,330
quite easily just concatenate all those

183
00:08:36,330 --> 00:08:39,060
into a single javascript file and have

184
00:08:39,060 --> 00:08:41,789
only one only one file referred in the

185
00:08:41,789 --> 00:08:44,730
head so you just say through HTTP

186
00:08:44,730 --> 00:08:46,710
requests all right just by combining all

187
00:08:46,710 --> 00:08:47,670
those JavaScript

188
00:08:47,670 --> 00:08:49,740
so then you just do the same thing for

189
00:08:49,740 --> 00:08:56,850
CSS yeah so for the images you CSS

190
00:08:56,850 --> 00:08:58,530
sprites for background images so

191
00:08:58,530 --> 00:09:01,350
basically the rule is anything you can

192
00:09:01,350 --> 00:09:03,660
go without like decoration images

193
00:09:03,660 --> 00:09:05,760
background rounded corners and whatnot

194
00:09:05,760 --> 00:09:08,430
put those in a in a sprite in a single

195
00:09:08,430 --> 00:09:11,760
image and then use CSS positioning to

196
00:09:11,760 --> 00:09:15,030
just show part of that image and you can

197
00:09:15,030 --> 00:09:21,150
also use that data URI scheme so that in

198
00:09:21,150 --> 00:09:23,490
using the data you are you can you can

199
00:09:23,490 --> 00:09:28,410
do both in content images from the image

200
00:09:28,410 --> 00:09:30,750
tag or CSS images with a background

201
00:09:30,750 --> 00:09:34,770
image so so how does that work so

202
00:09:34,770 --> 00:09:37,290
basically you have my PNG let's say some

203
00:09:37,290 --> 00:09:39,690
file then so this is just an example

204
00:09:39,690 --> 00:09:41,930
from the PHP command line you can just

205
00:09:41,930 --> 00:09:45,060
get its content and encoded using base

206
00:09:45,060 --> 00:09:47,640
64 encoded and you get you get this sort

207
00:09:47,640 --> 00:09:52,230
of string yeah so then you take this

208
00:09:52,230 --> 00:09:55,370
thing and and use this kind of complex

209
00:09:55,370 --> 00:09:57,840
convoluted syntax and you say data

210
00:09:57,840 --> 00:10:03,240
column content type simcom then base64

211
00:10:03,240 --> 00:10:04,920
the encoding and then the content of it

212
00:10:04,920 --> 00:10:07,890
so this way you in line the image inside

213
00:10:07,890 --> 00:10:09,810
of the CSS so you don't have to make an

214
00:10:09,810 --> 00:10:12,210
extra request to get that image the same

215
00:10:12,210 --> 00:10:13,860
thing with the content images like you

216
00:10:13,860 --> 00:10:17,790
can do it an image SRC attribute then

217
00:10:17,790 --> 00:10:21,270
put in your the data for the rivet so

218
00:10:21,270 --> 00:10:23,580
this is really nice and it even works in

219
00:10:23,580 --> 00:10:26,070
IE but unfortunately nice starting from

220
00:10:26,070 --> 00:10:30,150
eight so for the others there's actually

221
00:10:30,150 --> 00:10:32,190
a workaround that I kind of recently

222
00:10:32,190 --> 00:10:34,710
discovered on a Russian website and I'm

223
00:10:34,710 --> 00:10:36,630
you know kind of translated for the non

224
00:10:36,630 --> 00:10:39,690
Russian speaking community so you have

225
00:10:39,690 --> 00:10:41,940
you can use this thing called mhtml my

226
00:10:41,940 --> 00:10:45,780
HTML so this is like like a email with

227
00:10:45,780 --> 00:10:47,550
attachments like in one email message

228
00:10:47,550 --> 00:10:50,100
you can have plain text HTML one

229
00:10:50,100 --> 00:10:51,990
attachment another attachment files it's

230
00:10:51,990 --> 00:10:53,600
all so everything is in one single

231
00:10:53,600 --> 00:10:56,940
document so the same thing for EM HTML

232
00:10:56,940 --> 00:11:00,660
so you can basically put the put images

233
00:11:00,660 --> 00:11:03,090
inside of the CSS or even inside of HTML

234
00:11:03,090 --> 00:11:07,650
so what I really find what I really like

235
00:11:07,650 --> 00:11:09,630
about is it that means that especially

236
00:11:09,630 --> 00:11:11,220
for for mobile application right when

237
00:11:11,220 --> 00:11:14,490
the HTTP requests you should try to

238
00:11:14,490 --> 00:11:16,140
avoid them as much as possible if you in

239
00:11:16,140 --> 00:11:17,430
line all the JavaScript in line all the

240
00:11:17,430 --> 00:11:19,470
CSS and in light of the images then with

241
00:11:19,470 --> 00:11:20,880
a single HTTP requests you can download

242
00:11:20,880 --> 00:11:23,100
the whole application right then if

243
00:11:23,100 --> 00:11:24,720
you're designing application for the

244
00:11:24,720 --> 00:11:27,090
iPhone like a web web app for the iphone

245
00:11:27,090 --> 00:11:28,730
you don't really need to care about ie

246
00:11:28,730 --> 00:11:33,060
ie before it so another way to have less

247
00:11:33,060 --> 00:11:35,640
stuff on the page is to use the cash all

248
00:11:35,640 --> 00:11:38,850
right so it used to be that people often

249
00:11:38,850 --> 00:11:41,160
thing up but why do I care about the

250
00:11:41,160 --> 00:11:42,990
JavaScript in C says their cash anyway

251
00:11:42,990 --> 00:11:46,410
but uh idea who did an experiment it

252
00:11:46,410 --> 00:11:49,170
show that actually the caching is not so

253
00:11:49,170 --> 00:11:51,960
universal and found out that basically

254
00:11:51,960 --> 00:11:54,320
sixty percent of all the yahoo users

255
00:11:54,320 --> 00:11:56,850
come with a wooden empty cache and

256
00:11:56,850 --> 00:11:59,130
twenty percent of all the page views are

257
00:11:59,130 --> 00:12:02,460
with an empty cache so the cash is not

258
00:12:02,460 --> 00:12:05,820
important is not as universal as we want

259
00:12:05,820 --> 00:12:08,100
it to be right so you can do something

260
00:12:08,100 --> 00:12:10,440
to help and that is set those far future

261
00:12:10,440 --> 00:12:13,470
expires headers alright so that means

262
00:12:13,470 --> 00:12:15,930
say that okay this JavaScript will be

263
00:12:15,930 --> 00:12:18,930
cached for the next ten years so there's

264
00:12:18,930 --> 00:12:21,300
an example saying okay the moment it was

265
00:12:21,300 --> 00:12:23,820
access plus ten years so you can do this

266
00:12:23,820 --> 00:12:26,580
for JavaScript CSS and images drawback

267
00:12:26,580 --> 00:12:28,290
of course is that you cannot change this

268
00:12:28,290 --> 00:12:31,740
image once it's a it's cached forever so

269
00:12:31,740 --> 00:12:34,380
all you have to do is change the name of

270
00:12:34,380 --> 00:12:36,990
it so that introduces a bit of

271
00:12:36,990 --> 00:12:38,580
complexity but again everything's a

272
00:12:38,580 --> 00:12:42,090
trade-off right so what about in line

273
00:12:42,090 --> 00:12:44,580
versus external right so on one hand we

274
00:12:44,580 --> 00:12:47,550
say okay have less HTTP requests which

275
00:12:47,550 --> 00:12:49,320
means in line as much as possible but

276
00:12:49,320 --> 00:12:51,720
then on the other hand we you can cash

277
00:12:51,720 --> 00:12:55,320
those files if their external files so

278
00:12:55,320 --> 00:12:57,510
here's one solution to have both of them

279
00:12:57,510 --> 00:13:00,600
so on the first visit you are you in

280
00:13:00,600 --> 00:13:03,660
line let's say your JavaScript and then

281
00:13:03,660 --> 00:13:06,270
once the page loads with some set a time

282
00:13:06,270 --> 00:13:07,880
out in a second or so they

283
00:13:07,880 --> 00:13:10,670
you lazy load the the actual javascript

284
00:13:10,670 --> 00:13:13,610
file which is the same is that you want

285
00:13:13,610 --> 00:13:16,340
to do just in line in your h0 and then

286
00:13:16,340 --> 00:13:17,630
write a cookie and say okay i'm done

287
00:13:17,630 --> 00:13:20,480
with with the lazy loading so the next

288
00:13:20,480 --> 00:13:24,020
time for the consecutive visits you read

289
00:13:24,020 --> 00:13:25,760
that your server side will read the

290
00:13:25,760 --> 00:13:28,850
cookie and say ok so this this person

291
00:13:28,850 --> 00:13:30,230
already has the external files so I'm

292
00:13:30,230 --> 00:13:32,770
not going to do the interlining anymore

293
00:13:32,770 --> 00:13:35,750
so that about wraps it up for the less

294
00:13:35,750 --> 00:13:38,660
tough in the waterfall so once you have

295
00:13:38,660 --> 00:13:41,930
you know eventually settle for some

296
00:13:41,930 --> 00:13:44,510
stuff to have in the waterfall so your

297
00:13:44,510 --> 00:13:46,430
next task is to make those as small as

298
00:13:46,430 --> 00:13:50,750
possible and the single most important

299
00:13:50,750 --> 00:13:52,400
thing is to gzip right always make sure

300
00:13:52,400 --> 00:13:54,710
that you're sending gzip content so this

301
00:13:54,710 --> 00:13:58,850
is a graph sin shared by bill scott of

302
00:13:58,850 --> 00:14:01,070
netflix so they were not jus zipping

303
00:14:01,070 --> 00:14:03,590
there static components and this drop

304
00:14:03,590 --> 00:14:05,540
here is the the day they turn on g

305
00:14:05,540 --> 00:14:07,640
zipping after you join so basically so

306
00:14:07,640 --> 00:14:11,030
all last fifty percent less traffic you

307
00:14:11,030 --> 00:14:13,520
know then it would a single improvement

308
00:14:13,520 --> 00:14:18,320
so bum for 4g zipping just make sure

309
00:14:18,320 --> 00:14:20,120
that all the text content like

310
00:14:20,120 --> 00:14:21,530
everything that is not already binary

311
00:14:21,530 --> 00:14:23,690
everything does not an image or PDF or

312
00:14:23,690 --> 00:14:26,650
zipper so that means so that the HTML

313
00:14:26,650 --> 00:14:29,750
Javascript CSS any textual content is

314
00:14:29,750 --> 00:14:33,410
sent gzipped and it's a it's a really

315
00:14:33,410 --> 00:14:35,090
simple change or all you need is a

316
00:14:35,090 --> 00:14:38,800
supposed to mean task to enable gzip in

317
00:14:38,800 --> 00:14:41,150
another thing for the javascript to do

318
00:14:41,150 --> 00:14:43,550
to make things smaller is to minify

319
00:14:43,550 --> 00:14:45,950
right so this is an example so what do

320
00:14:45,950 --> 00:14:50,300
you have so this comes from yui so you

321
00:14:50,300 --> 00:14:53,380
have all your comments properly indented

322
00:14:53,380 --> 00:14:56,720
code and like descriptive variables and

323
00:14:56,720 --> 00:14:59,930
so on then you write a mini fire before

324
00:14:59,930 --> 00:15:01,460
you go life and then you end up with

325
00:15:01,460 --> 00:15:02,570
something like this which is much

326
00:15:02,570 --> 00:15:04,130
shorter doesn't have any comments or

327
00:15:04,130 --> 00:15:09,170
anything so no new lines variables are

328
00:15:09,170 --> 00:15:13,550
renamed to two shorter names so what we

329
00:15:13,550 --> 00:15:17,900
use is the yui compressor it's it's

330
00:15:17,900 --> 00:15:20,810
written in java using rhino so it knows

331
00:15:20,810 --> 00:15:21,610
about

332
00:15:21,610 --> 00:15:24,590
it knows about your code so it can pre

333
00:15:24,590 --> 00:15:26,090
optimize something so let's see if you

334
00:15:26,090 --> 00:15:28,460
if you have study your concatenate in

335
00:15:28,460 --> 00:15:31,280
static strings it will pre concatenate

336
00:15:31,280 --> 00:15:33,710
them during the minification so it also

337
00:15:33,710 --> 00:15:36,920
minified CSS and has a tolerance for

338
00:15:36,920 --> 00:15:38,660
those hacks that we've standardized on

339
00:15:38,660 --> 00:15:41,330
using the star in the underscore hack in

340
00:15:41,330 --> 00:15:44,870
CSS and it will also add semi-colons at

341
00:15:44,870 --> 00:15:47,900
the end of if you forget for the CSS so

342
00:15:47,900 --> 00:15:49,580
it has really more than dangers

343
00:15:49,580 --> 00:15:51,740
minification but trying to improve on

344
00:15:51,740 --> 00:15:54,140
like static plays much as it can in your

345
00:15:54,140 --> 00:15:57,700
code so another often overlooked

346
00:15:57,700 --> 00:16:00,380
optimization is to minify your inline

347
00:16:00,380 --> 00:16:02,210
code as well not only external files but

348
00:16:02,210 --> 00:16:04,550
if you have some inline scripts and

349
00:16:04,550 --> 00:16:09,880
styles they should be minified too so

350
00:16:09,880 --> 00:16:13,400
the comparison is so if like some say

351
00:16:13,400 --> 00:16:15,320
some people say okay I'm Gigi being

352
00:16:15,320 --> 00:16:17,090
already I'm sending the compressed

353
00:16:17,090 --> 00:16:18,980
content why do I care about modification

354
00:16:18,980 --> 00:16:24,860
this is Julian during the creator of Yui

355
00:16:24,860 --> 00:16:28,160
compressor so he took the jQuery so it

356
00:16:28,160 --> 00:16:29,930
was expiring back in august two thousand

357
00:16:29,930 --> 00:16:34,400
seven so it became from 60k the gzip

358
00:16:34,400 --> 00:16:38,060
version was 20 k and if you minify and

359
00:16:38,060 --> 00:16:41,870
and then gzip then you get only 10k so

360
00:16:41,870 --> 00:16:45,950
just do both and yeah I have in mind

361
00:16:45,950 --> 00:16:47,660
also that there are some clients that do

362
00:16:47,660 --> 00:16:53,510
not support gzip right so for those it's

363
00:16:53,510 --> 00:16:56,210
better to send a mini fide version so

364
00:16:56,210 --> 00:16:59,060
talking about less smaller component so

365
00:16:59,060 --> 00:17:00,800
this is the smallest component that you

366
00:17:00,800 --> 00:17:03,320
can ever get is basically the component

367
00:17:03,320 --> 00:17:05,630
without any any content without anybody

368
00:17:05,630 --> 00:17:09,770
right so this is a 204 no content HTTP

369
00:17:09,770 --> 00:17:11,870
response so basically so this is an

370
00:17:11,870 --> 00:17:13,970
example some people use those for

371
00:17:13,970 --> 00:17:15,709
beacons let's say if you want to log

372
00:17:15,709 --> 00:17:17,630
something so you want to send a request

373
00:17:17,630 --> 00:17:19,070
but you don't really care about the

374
00:17:19,070 --> 00:17:21,560
response and instead of sending one by

375
00:17:21,560 --> 00:17:24,230
one give something like that or a pic so

376
00:17:24,230 --> 00:17:27,260
give then you can just say okay just

377
00:17:27,260 --> 00:17:29,030
don't send anything and then you then

378
00:17:29,030 --> 00:17:29,490
you

379
00:17:29,490 --> 00:17:34,440
locking them so we talked about less

380
00:17:34,440 --> 00:17:37,500
stuff so next thing is to get out of the

381
00:17:37,500 --> 00:17:40,050
way so you have those waterfalls you

382
00:17:40,050 --> 00:17:42,090
want them as free falling as possible

383
00:17:42,090 --> 00:17:44,340
right to be as quick as as possible so

384
00:17:44,340 --> 00:17:46,890
what can interrupt your and make your

385
00:17:46,890 --> 00:17:50,400
waterfall slower is the dns lookups

386
00:17:50,400 --> 00:17:52,260
because it's not a component by the

387
00:17:52,260 --> 00:17:54,000
browser it still has to look up to the

388
00:17:54,000 --> 00:17:56,429
dns for this component so don't have

389
00:17:56,429 --> 00:18:00,330
more than 22 of 24 dns lookups on a

390
00:18:00,330 --> 00:18:03,210
single page have less redirects because

391
00:18:03,210 --> 00:18:04,830
it just wasted time you know you request

392
00:18:04,830 --> 00:18:07,470
something then and the server says oh no

393
00:18:07,470 --> 00:18:09,330
go somewhere else oh fetch it from there

394
00:18:09,330 --> 00:18:11,670
and the other thing is about to avoid

395
00:18:11,670 --> 00:18:14,580
blocking JavaScript so this is one page

396
00:18:14,580 --> 00:18:18,570
that I just by chance here is violating

397
00:18:18,570 --> 00:18:23,640
all of those so first yeah so first you

398
00:18:23,640 --> 00:18:26,400
make a request and what it does is a

399
00:18:26,400 --> 00:18:28,410
redirect they say okay now go go

400
00:18:28,410 --> 00:18:30,420
somewhere else and get it from from some

401
00:18:30,420 --> 00:18:33,090
other so this is a binocular here this

402
00:18:33,090 --> 00:18:36,240
is a DNS lookup this is a screenshot

403
00:18:36,240 --> 00:18:39,540
from ID and PG Taylor so then it says

404
00:18:39,540 --> 00:18:41,520
redirect so this icon means okey go

405
00:18:41,520 --> 00:18:44,460
somewhere else so it fetches another it

406
00:18:44,460 --> 00:18:46,440
does another DNS lookup because it's a

407
00:18:46,440 --> 00:18:50,490
redirect to another domain so then it it

408
00:18:50,490 --> 00:18:53,280
gets some HTML and apparently this HTML

409
00:18:53,280 --> 00:18:54,929
is doing a JavaScript redirect at this

410
00:18:54,929 --> 00:18:56,940
point because it doesn't have that icon

411
00:18:56,940 --> 00:18:59,010
right so it's redirecting to yet another

412
00:18:59,010 --> 00:19:02,580
HTML and then so basically you can see

413
00:19:02,580 --> 00:19:04,350
that may be one-third or at least

414
00:19:04,350 --> 00:19:07,020
one-fourth of the time in this waterfall

415
00:19:07,020 --> 00:19:08,700
we spent before we actually started

416
00:19:08,700 --> 00:19:10,380
doing anything we're just redirecting

417
00:19:10,380 --> 00:19:13,740
looking up stuff and then then there's

418
00:19:13,740 --> 00:19:16,020
this JavaScript right so you can see

419
00:19:16,020 --> 00:19:18,450
further down how several components are

420
00:19:18,450 --> 00:19:20,820
downloaded in parallel but this

421
00:19:20,820 --> 00:19:23,160
JavaScript here blocks the parallel

422
00:19:23,160 --> 00:19:25,980
downloads and doesn't doesn't let the

423
00:19:25,980 --> 00:19:28,050
others go until the javascript is

424
00:19:28,050 --> 00:19:31,200
finished so you know we all here know

425
00:19:31,200 --> 00:19:33,390
that javascript rocks but it also blocks

426
00:19:33,390 --> 00:19:36,720
right so when when you have javascript

427
00:19:36,720 --> 00:19:39,419
on the page the browser will wait for

428
00:19:39,419 --> 00:19:41,190
for the javascript you will arrive

429
00:19:41,190 --> 00:19:42,510
before it continues

430
00:19:42,510 --> 00:19:44,010
it makes sense because the JavaScript

431
00:19:44,010 --> 00:19:46,170
may change the dome in some way made you

432
00:19:46,170 --> 00:19:48,630
a location nature redirected somewhere

433
00:19:48,630 --> 00:19:50,430
else in which case the browser will

434
00:19:50,430 --> 00:19:53,130
download components for no reason so

435
00:19:53,130 --> 00:19:54,930
this is changing by the way in more

436
00:19:54,930 --> 00:19:57,900
recent browsers but still a large

437
00:19:57,900 --> 00:20:01,890
percent of them are the javascript is

438
00:20:01,890 --> 00:20:04,920
blocking so what you can do is include

439
00:20:04,920 --> 00:20:06,480
the JavaScript with the widow dome

440
00:20:06,480 --> 00:20:08,010
include so basically you create that

441
00:20:08,010 --> 00:20:10,700
script tag on the fly and you set it to

442
00:20:10,700 --> 00:20:16,080
the SRC the source to the file name so

443
00:20:16,080 --> 00:20:18,780
in this case the JavaScript no longer

444
00:20:18,780 --> 00:20:21,030
blocks the down the download so the the

445
00:20:21,030 --> 00:20:23,070
rest of the components can can be

446
00:20:23,070 --> 00:20:24,120
downloaded in parallel with the

447
00:20:24,120 --> 00:20:27,600
JavaScript so then the question is

448
00:20:27,600 --> 00:20:30,630
because if you do it this way like the

449
00:20:30,630 --> 00:20:33,720
normal way then your your page will know

450
00:20:33,720 --> 00:20:35,760
that if you include the JavaScript in

451
00:20:35,760 --> 00:20:37,560
the header page after that in your HTML

452
00:20:37,560 --> 00:20:41,220
you may do some inline JavaScript which

453
00:20:41,220 --> 00:20:44,670
is certain that the code is already

454
00:20:44,670 --> 00:20:47,400
there your dependencies libraries are

455
00:20:47,400 --> 00:20:49,560
all loaded but if you do it this way you

456
00:20:49,560 --> 00:20:53,790
don't know so what about the inline

457
00:20:53,790 --> 00:20:56,100
scripts so you can just set up a simple

458
00:20:56,100 --> 00:20:57,990
collection or a registry of all the

459
00:20:57,990 --> 00:21:02,090
inline scripts that you want to have so

460
00:21:02,090 --> 00:21:05,010
the first thing is to have somewhere up

461
00:21:05,010 --> 00:21:06,450
in the head you have something simple

462
00:21:06,450 --> 00:21:08,940
just just an array that will contain all

463
00:21:08,940 --> 00:21:11,640
your inline code so as you go in the

464
00:21:11,640 --> 00:21:13,890
HTML instead of having inline script

465
00:21:13,890 --> 00:21:16,830
which gets executed right away then you

466
00:21:16,830 --> 00:21:19,530
can instead of that then you you you

467
00:21:19,530 --> 00:21:23,220
push a function to this to this registry

468
00:21:23,220 --> 00:21:25,320
or this collection of all the inline

469
00:21:25,320 --> 00:21:27,510
code that you have and at the end of

470
00:21:27,510 --> 00:21:29,100
your main JavaScript once it arrives

471
00:21:29,100 --> 00:21:30,930
then it will just loop through

472
00:21:30,930 --> 00:21:32,340
everything that you've added to this

473
00:21:32,340 --> 00:21:34,380
collection ended just execute all those

474
00:21:34,380 --> 00:21:38,760
inline functions so we saw that

475
00:21:38,760 --> 00:21:41,490
JavaScript blocks but what about CSS oh

476
00:21:41,490 --> 00:21:43,680
the thing is that it's it's mostly

477
00:21:43,680 --> 00:21:46,080
harmless it most of the browser's are

478
00:21:46,080 --> 00:21:49,200
fine but in Firefox to a CSS will block

479
00:21:49,200 --> 00:21:52,290
the the download of the other components

480
00:21:52,290 --> 00:21:55,049
and also interestingly enough when

481
00:21:55,049 --> 00:21:57,239
when your script is followed directly by

482
00:21:57,239 --> 00:22:00,239
if your style is that followed by a

483
00:22:00,239 --> 00:22:02,669
script tag regardless if it's in line or

484
00:22:02,669 --> 00:22:04,799
external script even if it's an empty

485
00:22:04,799 --> 00:22:08,309
script tag then the CSS will block the

486
00:22:08,309 --> 00:22:13,049
downloads so just don't do that okay

487
00:22:13,049 --> 00:22:16,649
finish this so yeah yet another

488
00:22:16,649 --> 00:22:18,720
improvement the last one we're going to

489
00:22:18,720 --> 00:22:20,730
talk about in the waterfall is to try to

490
00:22:20,730 --> 00:22:22,289
start that waterfall as early as

491
00:22:22,289 --> 00:22:24,779
possible so this is the the first

492
00:22:24,779 --> 00:22:27,509
different diagram here is the normal way

493
00:22:27,509 --> 00:22:31,259
of I know you by your server responds

494
00:22:31,259 --> 00:22:34,049
with an HTML page and then this page

495
00:22:34,049 --> 00:22:36,659
refers to some components and then once

496
00:22:36,659 --> 00:22:39,539
the HTML arrives then the browser will

497
00:22:39,539 --> 00:22:41,879
go and fetch the other components but

498
00:22:41,879 --> 00:22:43,830
you can do something to start this

499
00:22:43,830 --> 00:22:46,639
process earlier so move your waterfall

500
00:22:46,639 --> 00:22:50,909
earlier so this is done by by flushing

501
00:22:50,909 --> 00:22:53,309
the content the HTML that you already

502
00:22:53,309 --> 00:22:56,279
have while your back-end is still

503
00:22:56,279 --> 00:22:58,859
pinning us or costing some more data and

504
00:22:58,859 --> 00:23:02,039
working on the full response then you

505
00:23:02,039 --> 00:23:04,440
can in the same time start downloading

506
00:23:04,440 --> 00:23:07,049
your components so for example this is a

507
00:23:07,049 --> 00:23:09,659
PHP example so it's just a function

508
00:23:09,659 --> 00:23:12,359
called flush right so in in the head of

509
00:23:12,359 --> 00:23:14,609
your document you can you can refer to

510
00:23:14,609 --> 00:23:17,429
your JavaScript your CSS and then

511
00:23:17,429 --> 00:23:20,039
because it doesn't have any doesn't have

512
00:23:20,039 --> 00:23:22,980
any logic here all right nothing nothing

513
00:23:22,980 --> 00:23:25,499
complex it's all just static files so

514
00:23:25,499 --> 00:23:27,659
this can be done instantaneously and

515
00:23:27,659 --> 00:23:29,759
then as the brows as the server is

516
00:23:29,759 --> 00:23:32,070
working on on the full response then the

517
00:23:32,070 --> 00:23:35,909
browser can start loading components

518
00:23:35,909 --> 00:23:39,929
instead of just sitting idle okay so we

519
00:23:39,929 --> 00:23:42,859
talked about on all the waterfall stuff

520
00:23:42,859 --> 00:23:47,580
so what about life after onload so the

521
00:23:47,580 --> 00:23:49,559
optimizing the waterfall is the most

522
00:23:49,559 --> 00:23:51,509
important thing you can do but so

523
00:23:51,509 --> 00:23:53,429
depends on the application then it may

524
00:23:53,429 --> 00:23:57,720
be may be doing a lot more work once

525
00:23:57,720 --> 00:23:59,580
everything is there like if you have

526
00:23:59,580 --> 00:24:00,960
gmail or some

527
00:24:00,960 --> 00:24:05,039
really fat client application it spends

528
00:24:05,039 --> 00:24:07,289
most of the time after the onload so

529
00:24:07,289 --> 00:24:10,260
just a few optimizations that you can do

530
00:24:10,260 --> 00:24:14,399
a first thing is to so we talk about

531
00:24:14,399 --> 00:24:17,429
lazy loading preloading optimizing ex

532
00:24:17,429 --> 00:24:20,929
hrs and some javascript optimizations

533
00:24:20,929 --> 00:24:23,870
the lazy load so basically that means

534
00:24:23,870 --> 00:24:26,909
anything that is not absolutely required

535
00:24:26,909 --> 00:24:29,970
for the first view just download it

536
00:24:29,970 --> 00:24:33,179
right so just split your huge JavaScript

537
00:24:33,179 --> 00:24:36,210
into the absolutely required part in the

538
00:24:36,210 --> 00:24:38,309
more bells and whistles so if you have

539
00:24:38,309 --> 00:24:41,039
on the page like a Twitter badge or

540
00:24:41,039 --> 00:24:43,140
something else that is not really your

541
00:24:43,140 --> 00:24:45,149
page is not really the content if you

542
00:24:45,149 --> 00:24:46,830
have a blog people come to see the

543
00:24:46,830 --> 00:24:49,950
article right so let me get the article

544
00:24:49,950 --> 00:24:52,409
all the way and the ones the person is

545
00:24:52,409 --> 00:24:53,880
engaged with the page then in the

546
00:24:53,880 --> 00:24:55,950
background you start loading the rest of

547
00:24:55,950 --> 00:24:58,289
theta goes to the staff and you can also

548
00:24:58,289 --> 00:25:02,100
sometimes you don't actually need some

549
00:25:02,100 --> 00:25:04,200
content or some functionality before a

550
00:25:04,200 --> 00:25:05,940
user interaction so if you have some

551
00:25:05,940 --> 00:25:09,059
tabs you don't have to actually have the

552
00:25:09,059 --> 00:25:11,279
content of those tabs in the page

553
00:25:11,279 --> 00:25:12,960
because there's a great chance that the

554
00:25:12,960 --> 00:25:15,899
user will never click this tab so just

555
00:25:15,899 --> 00:25:18,090
wait for user interaction before you

556
00:25:18,090 --> 00:25:22,289
load the extra functionality so

557
00:25:22,289 --> 00:25:25,020
pre-loading is actually not helping your

558
00:25:25,020 --> 00:25:26,490
page it's helping the page that comes

559
00:25:26,490 --> 00:25:30,539
after you all right so if you're let's

560
00:25:30,539 --> 00:25:33,090
see if you're on a login page in and the

561
00:25:33,090 --> 00:25:35,730
user starts to type their username so

562
00:25:35,730 --> 00:25:37,470
there's a great chance that unless they

563
00:25:37,470 --> 00:25:38,909
forget their password that they'll go

564
00:25:38,909 --> 00:25:41,340
into the membership area right and in

565
00:25:41,340 --> 00:25:43,440
this inside area will have some some

566
00:25:43,440 --> 00:25:46,070
more functionality maybe more JavaScript

567
00:25:46,070 --> 00:25:49,919
so as the user types or is you're

568
00:25:49,919 --> 00:25:51,510
looking at your page and you can start

569
00:25:51,510 --> 00:25:53,279
in the background with some time out

570
00:25:53,279 --> 00:25:55,289
start pre-loading things that will be

571
00:25:55,289 --> 00:25:57,659
required later so you can preload images

572
00:25:57,659 --> 00:26:00,000
CSS JavaScript you can even Provo just

573
00:26:00,000 --> 00:26:02,279
that just prefetch the DNA

574
00:26:02,279 --> 00:26:04,320
right if you just you know that the next

575
00:26:04,320 --> 00:26:07,229
page will will will need to look up an

576
00:26:07,229 --> 00:26:11,669
extra hostname you send a send an image

577
00:26:11,669 --> 00:26:15,389
request that returns tool for no content

578
00:26:15,389 --> 00:26:17,519
in this way it is that the browser is

579
00:26:17,519 --> 00:26:23,690
has the DNS cache so what about the ajax

580
00:26:23,690 --> 00:26:27,629
xhr optimization so again like the

581
00:26:27,629 --> 00:26:30,210
waterfall make them small and have less

582
00:26:30,210 --> 00:26:32,129
of them right so making small that means

583
00:26:32,129 --> 00:26:34,080
don't forget to gzip because most of the

584
00:26:34,080 --> 00:26:37,289
time the you send a request to get some

585
00:26:37,289 --> 00:26:41,369
JSON data or XML or even text data so

586
00:26:41,369 --> 00:26:44,070
it's mostly just exel data so just make

587
00:26:44,070 --> 00:26:45,749
sure it's it's gzipped as well and

588
00:26:45,749 --> 00:26:47,879
you'll probably want to use Jason

589
00:26:47,879 --> 00:26:50,669
because it's less or both in XML unlike

590
00:26:50,669 --> 00:26:55,619
your body of the response smaller so you

591
00:26:55,619 --> 00:26:58,289
can also use the expires header or you

592
00:26:58,289 --> 00:27:01,919
know just instruct the browser that this

593
00:27:01,919 --> 00:27:04,889
this response is valid for the next even

594
00:27:04,889 --> 00:27:06,269
if it's five minutes for 10 minutes

595
00:27:06,269 --> 00:27:08,519
right if you don't update the server

596
00:27:08,519 --> 00:27:11,549
data that often and all you can live

597
00:27:11,549 --> 00:27:14,309
with with some some latency then just

598
00:27:14,309 --> 00:27:17,580
when you send there yeah the xhr

599
00:27:17,580 --> 00:27:19,589
response you cannot expire skater and

600
00:27:19,589 --> 00:27:23,279
say a kid don't send me don't pick me in

601
00:27:23,279 --> 00:27:24,929
the next 10 minutes because I won't have

602
00:27:24,929 --> 00:27:27,599
any more new data for you and the other

603
00:27:27,599 --> 00:27:29,700
thing is using get over post you

604
00:27:29,700 --> 00:27:32,099
probably have seen this discussion so

605
00:27:32,099 --> 00:27:35,190
why is that it might fall into that kind

606
00:27:35,190 --> 00:27:37,080
of a micro optimization but it depends

607
00:27:37,080 --> 00:27:38,460
on the page right if you have a lot of

608
00:27:38,460 --> 00:27:42,389
requests so a simple xhr request that

609
00:27:42,389 --> 00:27:46,950
that posts something really small like

610
00:27:46,950 --> 00:27:49,950
you just pass test equals one so if you

611
00:27:49,950 --> 00:27:53,399
look at so this is microsoft net monitor

612
00:27:53,399 --> 00:27:55,379
right so if you look at what's going on

613
00:27:55,379 --> 00:27:58,169
here so you have a one tcp packet which

614
00:27:58,169 --> 00:27:59,969
sends the request just like the headers

615
00:27:59,969 --> 00:28:02,759
of the request and one tcp/ip

616
00:28:02,759 --> 00:28:04,739
parqueadero tcp packet that sends the

617
00:28:04,739 --> 00:28:07,080
the payload which means just this

618
00:28:07,080 --> 00:28:09,419
testicles work right so these are two

619
00:28:09,419 --> 00:28:12,850
two packets for for just one request

620
00:28:12,850 --> 00:28:15,940
where if you were using yet then there

621
00:28:15,940 --> 00:28:18,100
will be just one request so this is now

622
00:28:18,100 --> 00:28:22,180
no longer true in Firefox 31 I believe

623
00:28:22,180 --> 00:28:25,330
but IE and other Firefox version

624
00:28:25,330 --> 00:28:27,340
searched you're doing it so when you

625
00:28:27,340 --> 00:28:29,200
don't actually want to post anything if

626
00:28:29,200 --> 00:28:31,090
you just want to retrieve data just use

627
00:28:31,090 --> 00:28:36,520
get and the post so a little bit about

628
00:28:36,520 --> 00:28:40,030
optimizing JavaScript code right so you

629
00:28:40,030 --> 00:28:42,250
know just be careful with that just

630
00:28:42,250 --> 00:28:44,820
don't rush into you know going through

631
00:28:44,820 --> 00:28:48,370
the code and just micro optimizing it's

632
00:28:48,370 --> 00:28:51,040
so easy to you know to just get into it

633
00:28:51,040 --> 00:28:53,650
and spend a lot of time in don't

634
00:28:53,650 --> 00:28:56,500
actually achieve much again depends on

635
00:28:56,500 --> 00:28:58,750
the application but that's a most common

636
00:28:58,750 --> 00:29:00,720
scenario action Microsoft when they were

637
00:29:00,720 --> 00:29:04,680
developing the IE eight they looked at

638
00:29:04,680 --> 00:29:06,520
unfortunately we don't have those tools

639
00:29:06,520 --> 00:29:08,290
to do this ourselves but they look at

640
00:29:08,290 --> 00:29:11,050
the top five hundred or so pages and

641
00:29:11,050 --> 00:29:12,970
looking where the tiny spent on those

642
00:29:12,970 --> 00:29:15,070
pages so it turns out that the time

643
00:29:15,070 --> 00:29:16,690
spending jscript which is there a

644
00:29:16,690 --> 00:29:19,090
JavaScript engine was something like

645
00:29:19,090 --> 00:29:21,880
seven percent or something like that for

646
00:29:21,880 --> 00:29:24,610
them for in a normal sign right and if

647
00:29:24,610 --> 00:29:27,610
you have a very heavy like gmail yahoo

648
00:29:27,610 --> 00:29:29,200
mail something like a very heavy Ajax

649
00:29:29,200 --> 00:29:31,170
the application then it can go up to

650
00:29:31,170 --> 00:29:33,940
give it was 14 something like that the

651
00:29:33,940 --> 00:29:38,590
average so as the crockford puts it if

652
00:29:38,590 --> 00:29:40,870
we just wake up one day and all the

653
00:29:40,870 --> 00:29:42,610
JavaScript engines are indefinitely

654
00:29:42,610 --> 00:29:44,890
faster for most of the sites they will

655
00:29:44,890 --> 00:29:46,900
just work pretty much to say because you

656
00:29:46,900 --> 00:29:49,930
know you cannot get out much improvement

657
00:29:49,930 --> 00:29:51,820
because that's not where the time is

658
00:29:51,820 --> 00:29:55,690
spent in the normal case but again your

659
00:29:55,690 --> 00:29:58,420
application may be different so about

660
00:29:58,420 --> 00:30:00,790
the local variables so you know that the

661
00:30:00,790 --> 00:30:03,670
global variables are not recommended

662
00:30:03,670 --> 00:30:07,690
right because you have maintenance

663
00:30:07,690 --> 00:30:09,640
problems and bugs arise because people

664
00:30:09,640 --> 00:30:12,190
are sharing the global space I given

665
00:30:12,190 --> 00:30:15,190
some library may be using some Global's

666
00:30:15,190 --> 00:30:18,370
that you override by mistake so just get

667
00:30:18,370 --> 00:30:20,710
into the habit of using the bar inside

668
00:30:20,710 --> 00:30:23,789
of the function and

669
00:30:23,789 --> 00:30:25,919
and localize the global variables if you

670
00:30:25,919 --> 00:30:29,279
have a lot of work in your function to

671
00:30:29,279 --> 00:30:30,690
do with global variables then you can

672
00:30:30,690 --> 00:30:33,269
create a local variable assign it the

673
00:30:33,269 --> 00:30:35,460
global value and then work with the with

674
00:30:35,460 --> 00:30:38,970
the local so so here's one example we

675
00:30:38,970 --> 00:30:41,489
have 11 global a variable then we have

676
00:30:41,489 --> 00:30:44,159
another function in which we define a

677
00:30:44,159 --> 00:30:46,049
again and then another function in which

678
00:30:46,049 --> 00:30:49,109
we defy a again so so if you execute

679
00:30:49,109 --> 00:30:51,389
this piece of code it will alert 3 right

680
00:30:51,389 --> 00:30:54,859
so if you come and tell that last a

681
00:30:54,859 --> 00:30:58,499
right so then JavaScript will will look

682
00:30:58,499 --> 00:31:01,320
up the scope chain and say ok inside of

683
00:31:01,320 --> 00:31:03,929
the b function I don't have an a so let

684
00:31:03,929 --> 00:31:07,379
me just look it up and it finds it up

685
00:31:07,379 --> 00:31:08,849
there in the other function so this

686
00:31:08,849 --> 00:31:11,460
order to and naturally the last thing

687
00:31:11,460 --> 00:31:14,639
well when when you comment both those

688
00:31:14,639 --> 00:31:15,960
local variables and just leave the

689
00:31:15,960 --> 00:31:18,419
global variable it will be consulted so

690
00:31:18,419 --> 00:31:20,580
the idea is to to have less of those

691
00:31:20,580 --> 00:31:25,889
chain lookups as much as possible so if

692
00:31:25,889 --> 00:31:27,809
you have you know if you want to refer

693
00:31:27,809 --> 00:31:30,809
to a global variable many times inside

694
00:31:30,809 --> 00:31:33,539
your function then you can assign it to

695
00:31:33,539 --> 00:31:35,909
a local value in a works full function

696
00:31:35,909 --> 00:31:38,399
it right because functions are just

697
00:31:38,399 --> 00:31:40,799
objects in JavaScript so if you look at

698
00:31:40,799 --> 00:31:42,899
that alert function right so the

699
00:31:42,899 --> 00:31:44,820
JavaScript say ok where's this alert

700
00:31:44,820 --> 00:31:47,369
defined it's not here it's not here so

701
00:31:47,369 --> 00:31:49,320
it must be have to look up the global

702
00:31:49,320 --> 00:31:54,149
namespace so not not having global

703
00:31:54,149 --> 00:31:56,519
variables for getting less hearing more

704
00:31:56,519 --> 00:31:58,999
locals it also helps the Yui compressor

705
00:31:58,999 --> 00:32:02,369
because it won't rename global variables

706
00:32:02,369 --> 00:32:05,220
because it's it's too risky right so the

707
00:32:05,220 --> 00:32:07,080
wire compressor if you have a long

708
00:32:07,080 --> 00:32:09,389
variable name it will it will minify to

709
00:32:09,389 --> 00:32:12,749
a let's say but if you have like into

710
00:32:12,749 --> 00:32:17,460
Yui has yahoo dot util don't get X Y so

711
00:32:17,460 --> 00:32:20,549
the wire compressor will not change the

712
00:32:20,549 --> 00:32:25,710
name because it's a global it's a global

713
00:32:25,710 --> 00:32:29,099
probably accessible right so it's risky

714
00:32:29,099 --> 00:32:30,929
to rename any of this because they'll be

715
00:32:30,929 --> 00:32:35,849
breakage so yeah so it's just be careful

716
00:32:35,849 --> 00:32:37,830
with that and don't fall into too much

717
00:32:37,830 --> 00:32:40,559
micro optimization but where it's

718
00:32:40,559 --> 00:32:43,200
important is when you have a lot of dumb

719
00:32:43,200 --> 00:32:45,239
access right so basically that's where

720
00:32:45,239 --> 00:32:48,529
most of the time in in the average

721
00:32:48,529 --> 00:32:50,820
application is paint is modifying the

722
00:32:50,820 --> 00:32:53,639
Dom right and Dom is the most expensive

723
00:32:53,639 --> 00:32:56,989
part so if you just have a look like a

724
00:32:56,989 --> 00:33:01,409
exaggerated loop of 100,000 iterations

725
00:33:01,409 --> 00:33:04,679
and just hitting beer just getting the

726
00:33:04,679 --> 00:33:08,309
the head element I put a pointer to to

727
00:33:08,309 --> 00:33:09,960
all the head elements right get elements

728
00:33:09,960 --> 00:33:14,249
by tag name so if you do this you can

729
00:33:14,249 --> 00:33:17,309
better write it like that where you

730
00:33:17,309 --> 00:33:19,489
create a local variable called get

731
00:33:19,489 --> 00:33:23,820
pointed to to that global method and

732
00:33:23,820 --> 00:33:26,849
then then loop through that using the

733
00:33:26,849 --> 00:33:30,749
just a local local reference so this

734
00:33:30,749 --> 00:33:34,200
thing is four times faster than then if

735
00:33:34,200 --> 00:33:36,779
you don't use the local variable so

736
00:33:36,779 --> 00:33:39,629
again so when you touch the dome again

737
00:33:39,629 --> 00:33:41,940
just be careful and sometimes you touch

738
00:33:41,940 --> 00:33:44,909
it there implicitly right in here i I'm

739
00:33:44,909 --> 00:33:46,820
looking a hundred hunt a thousand times

740
00:33:46,820 --> 00:33:51,599
adding to the documents body in a rich

741
00:33:51,599 --> 00:33:53,789
tml so in this case for every iteration

742
00:33:53,789 --> 00:33:55,919
I'm touching the dome twice wants to

743
00:33:55,919 --> 00:33:58,470
read the volume and wants to update the

744
00:33:58,470 --> 00:34:04,529
value so if you do it this way where you

745
00:34:04,529 --> 00:34:07,080
just have us a local variable you

746
00:34:07,080 --> 00:34:09,059
updated local variable in touch the dome

747
00:34:09,059 --> 00:34:13,020
only twice right instead of two thousand

748
00:34:13,020 --> 00:34:15,869
times so this is actually quite fast

749
00:34:15,869 --> 00:34:18,149
it's a thousand times faster than then

750
00:34:18,149 --> 00:34:22,200
if you access the inner HTML directly so

751
00:34:22,200 --> 00:34:26,250
it's it's quite a quite a change so the

752
00:34:26,250 --> 00:34:28,109
other thing is to clean up after

753
00:34:28,109 --> 00:34:30,349
yourself right because when the when the

754
00:34:30,349 --> 00:34:33,510
garbage collection runs that may cause a

755
00:34:33,510 --> 00:34:35,220
noticeable slow down right so what you

756
00:34:35,220 --> 00:34:37,200
can can do is when you're done with

757
00:34:37,200 --> 00:34:39,629
objects or their properties and they're

758
00:34:39,629 --> 00:34:41,369
big and you know that you don't want

759
00:34:41,369 --> 00:34:45,059
good use them just hint and use the

760
00:34:45,059 --> 00:34:48,659
delete operator to to to say that ok I

761
00:34:48,659 --> 00:34:53,279
no longer do that and so the same thing

762
00:34:53,279 --> 00:34:55,829
with with the Dom element right so when

763
00:34:55,829 --> 00:34:58,920
you when you say ok remove this Dom

764
00:34:58,920 --> 00:35:02,250
element the remove child method will

765
00:35:02,250 --> 00:35:05,329
return a reference to the removed

766
00:35:05,329 --> 00:35:08,579
element right but you in most cases you

767
00:35:08,579 --> 00:35:11,010
don't need that so why have it just

768
00:35:11,010 --> 00:35:13,770
lying around so the better way to remove

769
00:35:13,770 --> 00:35:16,470
nodes is just to prepare it with with

770
00:35:16,470 --> 00:35:19,290
the delete operator so as soon as this

771
00:35:19,290 --> 00:35:21,450
child is removed you also delete the

772
00:35:21,450 --> 00:35:25,599
reference to it you no longer need that

773
00:35:25,609 --> 00:35:30,029
ok a little bit over time branching

774
00:35:30,029 --> 00:35:32,640
during the initialization right so I

775
00:35:32,640 --> 00:35:35,420
guess everybody at some point of the

776
00:35:35,420 --> 00:35:37,859
development life with javascript is done

777
00:35:37,859 --> 00:35:40,380
something like this so attaching events

778
00:35:40,380 --> 00:35:42,420
right is the idea that listener

779
00:35:42,420 --> 00:35:44,970
supported yes then use it oh it's not

780
00:35:44,970 --> 00:35:47,579
then for IE then use a touch event and

781
00:35:47,579 --> 00:35:50,670
so on so every time you you use this my

782
00:35:50,670 --> 00:35:52,799
event function right every time there is

783
00:35:52,799 --> 00:35:54,569
this check performed over and over again

784
00:35:54,569 --> 00:35:57,150
so instead of doing this then you can do

785
00:35:57,150 --> 00:35:59,460
it only once so when you define the

786
00:35:59,460 --> 00:36:02,069
function you say ok if I'd event listen

787
00:36:02,069 --> 00:36:05,010
every supported then you define your my

788
00:36:05,010 --> 00:36:09,299
event function to use that so and this

789
00:36:09,299 --> 00:36:10,980
is basically defining defining the

790
00:36:10,980 --> 00:36:14,309
function depending on what supported and

791
00:36:14,309 --> 00:36:16,380
whatnot so every time then you use my

792
00:36:16,380 --> 00:36:18,839
event it will no longer check every time

793
00:36:18,839 --> 00:36:22,529
is this support it or not so a slight

794
00:36:22,529 --> 00:36:24,210
variation of that is the so called lazy

795
00:36:24,210 --> 00:36:27,599
definition so inside of your my event

796
00:36:27,599 --> 00:36:30,690
functioned the first time you call it it

797
00:36:30,690 --> 00:36:34,140
will overwrite itself depending on what

798
00:36:34,140 --> 00:36:39,180
supported and then return the then

799
00:36:39,180 --> 00:36:41,400
execute right so if you don't use it

800
00:36:41,400 --> 00:36:44,700
this check is never performed or but if

801
00:36:44,700 --> 00:36:46,020
you use it the first time you use it

802
00:36:46,020 --> 00:36:47,390
there's one check and then

803
00:36:47,390 --> 00:36:52,849
from then on there is no memorization if

804
00:36:52,849 --> 00:36:55,490
you have like expensive really

805
00:36:55,490 --> 00:36:58,069
complicated calculations going on and

806
00:36:58,069 --> 00:36:59,900
there's a chance that things will repeat

807
00:36:59,900 --> 00:37:02,630
so you it makes sense to cash the

808
00:37:02,630 --> 00:37:05,089
already calculated value and because you

809
00:37:05,089 --> 00:37:06,950
have a script functions are just objects

810
00:37:06,950 --> 00:37:09,230
right so you can you can add properties

811
00:37:09,230 --> 00:37:12,740
to them so in this case I'm adding a

812
00:37:12,740 --> 00:37:18,740
cash property so the first time so you

813
00:37:18,740 --> 00:37:21,410
run the you run the function with some

814
00:37:21,410 --> 00:37:23,359
parameter and it has some complicated

815
00:37:23,359 --> 00:37:25,880
task to do so it checks first consult

816
00:37:25,880 --> 00:37:27,740
the cash is it is this thing already

817
00:37:27,740 --> 00:37:30,230
being calculated some point of time no

818
00:37:30,230 --> 00:37:31,549
it is and then you start your

819
00:37:31,549 --> 00:37:34,039
complicated task once you're done you

820
00:37:34,039 --> 00:37:35,869
write the result it can be a single

821
00:37:35,869 --> 00:37:37,130
value it can be an object can be

822
00:37:37,130 --> 00:37:39,470
anything your right is to the cash so

823
00:37:39,470 --> 00:37:40,970
the next time you call the same fraction

824
00:37:40,970 --> 00:37:42,760
with the same parameter there's no

825
00:37:42,760 --> 00:37:46,940
additional calculation the threads you

826
00:37:46,940 --> 00:37:48,410
know javascript is a single threaded

827
00:37:48,410 --> 00:37:50,480
language so when you do some really

828
00:37:50,480 --> 00:37:53,000
intensive color computation then the

829
00:37:53,000 --> 00:37:54,500
whole UI freezes it sounds really

830
00:37:54,500 --> 00:37:56,779
friendly so modern browsers like five

831
00:37:56,779 --> 00:37:59,779
thousand three-one in safari for they

832
00:37:59,779 --> 00:38:02,119
support web workers like I think it

833
00:38:02,119 --> 00:38:03,799
started with limit gears but now its

834
00:38:03,799 --> 00:38:06,079
native for the browsers so you can have

835
00:38:06,079 --> 00:38:11,799
a worker thread right and and then send

836
00:38:11,799 --> 00:38:14,329
exchange messages so you let this

837
00:38:14,329 --> 00:38:16,490
complicated task work in the background

838
00:38:16,490 --> 00:38:18,740
and then get a notification one this is

839
00:38:18,740 --> 00:38:22,220
done and for older browsers that do not

840
00:38:22,220 --> 00:38:25,119
support that there was this set timeout

841
00:38:25,119 --> 00:38:28,609
approach because what's a timeout you're

842
00:38:28,609 --> 00:38:31,039
releasing that main thread right so you

843
00:38:31,039 --> 00:38:33,740
do a chunk of work in your function then

844
00:38:33,740 --> 00:38:37,759
you then you schedule with using say

845
00:38:37,759 --> 00:38:40,069
time you schedule the nigga that you run

846
00:38:40,069 --> 00:38:43,250
again in one just one millisecond which

847
00:38:43,250 --> 00:38:46,700
is enough 40 for the you I'd not to be

848
00:38:46,700 --> 00:38:49,039
locked in irresponsible so you just do

849
00:38:49,039 --> 00:38:52,910
work by chunks so this would be covered

850
00:38:52,910 --> 00:38:54,650
for life after unload lazy loading

851
00:38:54,650 --> 00:38:57,650
preloading better xhr and some

852
00:38:57,650 --> 00:38:59,359
JavaScript optimizations and the last

853
00:38:59,359 --> 00:39:00,130
thing

854
00:39:00,130 --> 00:39:02,230
minute I was going to talk more about

855
00:39:02,230 --> 00:39:05,880
why I three but there was a beach track

856
00:39:05,880 --> 00:39:07,960
discussion so I just going to say a few

857
00:39:07,960 --> 00:39:10,480
words about the performance improvements

858
00:39:10,480 --> 00:39:12,760
of Yui 3 so you know how search we are

859
00:39:12,760 --> 00:39:15,070
excited about is because we are using

860
00:39:15,070 --> 00:39:19,720
Yui to and actually one of the Ryan one

861
00:39:19,720 --> 00:39:21,940
of developers went then just comment at

862
00:39:21,940 --> 00:39:22,900
all the things that we don't need

863
00:39:22,900 --> 00:39:25,330
because Yui to comes with ok this is the

864
00:39:25,330 --> 00:39:28,450
functionality but we don't have to you

865
00:39:28,450 --> 00:39:32,170
we don't use all of this so and Yui 3

866
00:39:32,170 --> 00:39:35,170
first of all it's lighter so it's a it's

867
00:39:35,170 --> 00:39:39,880
less unless k by kilobytes over the wire

868
00:39:39,880 --> 00:39:43,240
but it also has more more modularized

869
00:39:43,240 --> 00:39:45,310
and it has modules & sub modules so you

870
00:39:45,310 --> 00:39:48,160
can more specifically define ok this is

871
00:39:48,160 --> 00:39:50,110
just the things that I need I don't need

872
00:39:50,110 --> 00:39:52,270
all of these edges so fine grained

873
00:39:52,270 --> 00:39:54,970
control and there's a configuration

874
00:39:54,970 --> 00:39:56,950
utility you can say okay I want this

875
00:39:56,950 --> 00:40:00,910
isn't daddy to give you URL that you can

876
00:40:00,910 --> 00:40:05,350
use so they took all so it's faster they

877
00:40:05,350 --> 00:40:07,390
took the wire it into the opportunity to

878
00:40:07,390 --> 00:40:10,840
to refactor and like then you can have

879
00:40:10,840 --> 00:40:14,410
these these modules so they can either

880
00:40:14,410 --> 00:40:17,200
be served with with what they call a

881
00:40:17,200 --> 00:40:19,360
combo handler so this is if you host

882
00:40:19,360 --> 00:40:21,790
your libraries that are the yahoo EP is

883
00:40:21,790 --> 00:40:24,940
the main this como handler will merge oh

884
00:40:24,940 --> 00:40:27,280
you're all the little modules that you

885
00:40:27,280 --> 00:40:29,400
want will merge into a single file and

886
00:40:29,400 --> 00:40:32,470
minify them I saw you don't have to

887
00:40:32,470 --> 00:40:34,110
worry about unification and

888
00:40:34,110 --> 00:40:38,020
concatenation is the one and the another

889
00:40:38,020 --> 00:40:41,380
way to load Yui 3 functionalities this

890
00:40:41,380 --> 00:40:43,750
soft self populating so you just include

891
00:40:43,750 --> 00:40:46,630
the minimum the Yui loader and from

892
00:40:46,630 --> 00:40:48,790
there when you can say okay I want the

893
00:40:48,790 --> 00:40:52,600
animation module and it to actually go

894
00:40:52,600 --> 00:40:55,810
ahead and fetch it for you so yeah

895
00:40:55,810 --> 00:40:59,830
that's all I had to say sorry 10 minutes

896
00:40:59,830 --> 00:41:02,380
late okay thank you very much let's get

