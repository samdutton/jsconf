1
00:00:08,799 --> 00:00:12,469

my name is Ayesha costly wall I'm a

2
00:00:12,469 --> 00:00:16,129
senior UI UX designer developer focusing

3
00:00:16,129 --> 00:00:18,439
on design systems at twitch in San

4
00:00:18,439 --> 00:00:22,640
Francisco previously I was a senior UX

5
00:00:22,640 --> 00:00:24,859
engineer on the Lightning design system

6
00:00:24,859 --> 00:00:28,159
team at Salesforce I consider myself a

7
00:00:28,159 --> 00:00:30,769
designer who codes I care deeply about

8
00:00:30,769 --> 00:00:33,650
design and that has what led me to focus

9
00:00:33,650 --> 00:00:36,410
on many of the different aspects of how

10
00:00:36,410 --> 00:00:39,170
design can be informed in tech and

11
00:00:39,170 --> 00:00:42,740
that's why I write code today I want to

12
00:00:42,740 --> 00:00:44,750
talk to you about how typescript can

13
00:00:44,750 --> 00:00:48,290
power Design Systems I know most of the

14
00:00:48,290 --> 00:00:50,870
people in this group are developers but

15
00:00:50,870 --> 00:00:53,260
since design systems are growing so much

16
00:00:53,260 --> 00:00:55,640
ideally you've heard of the term design

17
00:00:55,640 --> 00:00:58,460
system before can you actually raise

18
00:00:58,460 --> 00:01:00,590
your hand if you know what a design

19
00:01:00,590 --> 00:01:06,680
system is so for those of you who don't

20
00:01:06,680 --> 00:01:11,659
a design system is the single source of

21
00:01:11,659 --> 00:01:11,990
truth

22
00:01:11,990 --> 00:01:14,450
which groups all the elements that

23
00:01:14,450 --> 00:01:17,540
allows team to design realize and

24
00:01:17,540 --> 00:01:20,360
develop a product my old teammate and

25
00:01:20,360 --> 00:01:23,240
friend Gina Ann of Design Systems Fame

26
00:01:23,240 --> 00:01:26,000
has very eloquently described design

27
00:01:26,000 --> 00:01:30,290
systems to be composed of tangible and

28
00:01:30,290 --> 00:01:33,710
non tangible elements a design system

29
00:01:33,710 --> 00:01:36,200
offers a consistent and well-designed

30
00:01:36,200 --> 00:01:39,620
pattern library tools for both designers

31
00:01:39,620 --> 00:01:43,810
and developers code ready components

32
00:01:43,810 --> 00:01:47,000
guidelines and plenty of usable

33
00:01:47,000 --> 00:01:50,180
resources at the same time a design

34
00:01:50,180 --> 00:01:52,430
system also offers some abstract

35
00:01:52,430 --> 00:01:55,729
elements like brand values shared ways

36
00:01:55,729 --> 00:01:58,159
of working shared beliefs about the

37
00:01:58,159 --> 00:02:03,570
product UI UX best practices and more

38
00:02:03,580 --> 00:02:07,280
it's where development work intersects

39
00:02:07,280 --> 00:02:11,870
with design work a design system

40
00:02:11,870 --> 00:02:14,120
contains collections of rules which

41
00:02:14,120 --> 00:02:16,430
include guidance as well as strictly

42
00:02:16,430 --> 00:02:19,130
enforced UI UX and code behavior in the

43
00:02:19,130 --> 00:02:23,750
product constraints and principles so

44
00:02:23,750 --> 00:02:25,670
that your team at large is operating

45
00:02:25,670 --> 00:02:27,740
under the same circumstances and

46
00:02:27,740 --> 00:02:32,930
direction that are implemented in design

47
00:02:32,930 --> 00:02:36,530
and in code some of the beauty of Design

48
00:02:36,530 --> 00:02:38,930
Systems lies in the fact that the design

49
00:02:38,930 --> 00:02:42,260
and code of the system carry all of

50
00:02:42,260 --> 00:02:44,870
those rules constraints and guidelines

51
00:02:44,870 --> 00:02:48,200
within them the design and code alone if

52
00:02:48,200 --> 00:02:51,260
used and maintained can afford your

53
00:02:51,260 --> 00:02:55,160
company clarity efficiency a standard

54
00:02:55,160 --> 00:03:00,890
look and feel and unity a design system

55
00:03:00,890 --> 00:03:03,620
actually goes beyond just design and

56
00:03:03,620 --> 00:03:06,830
beyond just code a Design Systems team

57
00:03:06,830 --> 00:03:09,590
like my own has to maintain an entire

58
00:03:09,590 --> 00:03:12,590
product of their own so our customers

59
00:03:12,590 --> 00:03:14,390
end up being designers and developers

60
00:03:14,390 --> 00:03:17,750
that are in our own company my team

61
00:03:17,750 --> 00:03:20,120
operates as a design focused engineering

62
00:03:20,120 --> 00:03:23,060
team and the engineers in the rest of

63
00:03:23,060 --> 00:03:24,890
our company use the components that we

64
00:03:24,890 --> 00:03:27,890
provide because we do this we have to

65
00:03:27,890 --> 00:03:30,049
maintain many aspects of our product

66
00:03:30,049 --> 00:03:33,019
which includes a large variety of

67
00:03:33,019 --> 00:03:34,400
different challenges

68
00:03:34,400 --> 00:03:37,790
to build and maintain from support to

69
00:03:37,790 --> 00:03:40,070
documentation to messaging and

70
00:03:40,070 --> 00:03:42,799
everything in between a design system is

71
00:03:42,799 --> 00:03:46,360
a very large body of work

72
00:03:46,360 --> 00:03:50,740
a lot of companies both big and small

73
00:03:50,740 --> 00:03:54,910
like Amazon Facebook Google and Shopify

74
00:03:54,910 --> 00:03:57,340
have design systems and where I work

75
00:03:57,340 --> 00:03:59,140
which is twitch which some of you may

76
00:03:59,140 --> 00:04:04,660
have heard of does as well a lot of what

77
00:04:04,660 --> 00:04:07,390
we maintain and what I tend to focus on

78
00:04:07,390 --> 00:04:10,000
is component development think of a

79
00:04:10,000 --> 00:04:12,550
component as small as a button or a

80
00:04:12,550 --> 00:04:16,330
component as large as a modal we work to

81
00:04:16,330 --> 00:04:19,299
build and maintain all of it the process

82
00:04:19,299 --> 00:04:22,510
generally starts off as I da ting why a

83
00:04:22,510 --> 00:04:24,940
specific component like a button is

84
00:04:24,940 --> 00:04:28,990
necessary once we deem it important we

85
00:04:28,990 --> 00:04:33,100
move on to design and then before it

86
00:04:33,100 --> 00:04:35,110
goes into production we have to write

87
00:04:35,110 --> 00:04:37,750
the code to build it for many Design

88
00:04:37,750 --> 00:04:40,330
Systems teams the main concern is the

89
00:04:40,330 --> 00:04:42,760
view layer and making sure there's a

90
00:04:42,760 --> 00:04:45,160
clear and consumable API for our

91
00:04:45,160 --> 00:04:47,530
company's engineers we write and

92
00:04:47,530 --> 00:04:50,560
maintain our components in HTML CSS and

93
00:04:50,560 --> 00:04:55,270
JavaScript and it turns out that in our

94
00:04:55,270 --> 00:04:58,030
JavaScript we are able to maintain a lot

95
00:04:58,030 --> 00:05:01,510
of opinions rules and documentation

96
00:05:01,510 --> 00:05:04,450
around our designs and at which were

97
00:05:04,450 --> 00:05:06,910
able to do that by using react j/s and

98
00:05:06,910 --> 00:05:10,600
typescript

99
00:05:10,610 --> 00:05:13,380
here's an example of that process from

100
00:05:13,380 --> 00:05:16,710
our own design system we ideated that we

101
00:05:16,710 --> 00:05:19,470
needed a very small UI element that

102
00:05:19,470 --> 00:05:21,990
could convey status in line with other

103
00:05:21,990 --> 00:05:24,930
elements and based on UX research and

104
00:05:24,930 --> 00:05:27,780
best practices we decided that the best

105
00:05:27,780 --> 00:05:30,990
UI to solve that problem would look like

106
00:05:30,990 --> 00:05:35,430
a pill after I da ting we designed what

107
00:05:35,430 --> 00:05:37,650
the pill component would look like this

108
00:05:37,650 --> 00:05:40,800
is the pill in our figma UI kit that all

109
00:05:40,800 --> 00:05:45,810
of our designers use then we wrote the

110
00:05:45,810 --> 00:05:48,180
code for the pill in typescript which is

111
00:05:48,180 --> 00:05:50,520
on the left side we created

112
00:05:50,520 --> 00:05:52,560
documentation which is on the right side

113
00:05:52,560 --> 00:05:54,930
and luckily because we're using

114
00:05:54,930 --> 00:05:57,650
typescript it's really easy to generate

115
00:05:57,650 --> 00:06:00,960
prop related documentation that's very

116
00:06:00,960 --> 00:06:05,760
detailed and then finally in production

117
00:06:05,760 --> 00:06:08,580
on the website the web app the mobile

118
00:06:08,580 --> 00:06:10,950
app all of our different instances of

119
00:06:10,950 --> 00:06:13,860
twitch the pill is used by designers and

120
00:06:13,860 --> 00:06:15,630
developers when they want to convey

121
00:06:15,630 --> 00:06:17,880
status in their UI so this is one

122
00:06:17,880 --> 00:06:20,220
example of how it's used on our website

123
00:06:20,220 --> 00:06:24,000
and this is another example of how it's

124
00:06:24,000 --> 00:06:29,570
being used in production

125
00:06:29,580 --> 00:06:32,009
so I mentioned that we use typescript in

126
00:06:32,009 --> 00:06:34,050
our JavaScript stack because we believe

127
00:06:34,050 --> 00:06:36,120
that it's a powerful tool when it comes

128
00:06:36,120 --> 00:06:38,939
to design systems development but what

129
00:06:38,939 --> 00:06:43,059
exactly is typescript

130
00:06:43,069 --> 00:06:45,479
typescript is a typed superset of

131
00:06:45,479 --> 00:06:47,669
JavaScript that compiles to plain

132
00:06:47,669 --> 00:06:50,580
JavaScript a good summary of how it's

133
00:06:50,580 --> 00:06:53,129
different from vanilla Jas is that it

134
00:06:53,129 --> 00:06:56,159
provides optional static typing classes

135
00:06:56,159 --> 00:07:00,539
and interfaces when using typescript you

136
00:07:00,539 --> 00:07:02,280
don't have to write all of your code

137
00:07:02,280 --> 00:07:05,340
entirely in typescript if you wanted to

138
00:07:05,340 --> 00:07:07,289
you could have vanilla JavaScript and

139
00:07:07,289 --> 00:07:10,949
typescript in the same file also you can

140
00:07:10,949 --> 00:07:14,190
use typescript with react Jas a couple

141
00:07:14,190 --> 00:07:15,840
of benefits that typescript provides

142
00:07:15,840 --> 00:07:20,599
include style specific typed props

143
00:07:20,599 --> 00:07:23,550
having style specific typed props offers

144
00:07:23,550 --> 00:07:26,430
visual consistency ensures proper piss

145
00:07:26,430 --> 00:07:32,180
and prevents variable mutations

146
00:07:32,190 --> 00:07:35,070
if you use an IDE that is compatible

147
00:07:35,070 --> 00:07:36,990
with typescript which most are at this

148
00:07:36,990 --> 00:07:40,170
point the IDE is informed in real time

149
00:07:40,170 --> 00:07:42,720
by the typescript compiler on its rich

150
00:07:42,720 --> 00:07:43,890
type information

151
00:07:43,890 --> 00:07:46,860
there's better autocomplete snippet

152
00:07:46,860 --> 00:07:49,860
generation renaming and targeting across

153
00:07:49,860 --> 00:07:52,770
the entire code base compilation errors

154
00:07:52,770 --> 00:07:58,650
and more and these are some examples

155
00:07:58,650 --> 00:08:01,230
from our code base directly if we

156
00:08:01,230 --> 00:08:02,880
reference a component that hasn't been

157
00:08:02,880 --> 00:08:06,030
imported the IDE will automatically add

158
00:08:06,030 --> 00:08:12,480
it to our import list for us if you

159
00:08:12,480 --> 00:08:15,420
start typing out an enum the IDE will

160
00:08:15,420 --> 00:08:17,220
automatically reference all of the

161
00:08:17,220 --> 00:08:22,840
possible values that you can use

162
00:08:22,850 --> 00:08:25,080
typescript provides exportable

163
00:08:25,080 --> 00:08:27,660
interfaces which makes communicating the

164
00:08:27,660 --> 00:08:29,490
intents and limits of your component

165
00:08:29,490 --> 00:08:32,300
seamless

166
00:08:32,310 --> 00:08:35,610
an interface is basically the contract

167
00:08:35,610 --> 00:08:37,740
that the component must conform to and

168
00:08:37,740 --> 00:08:40,829
it states what needs to be or could be

169
00:08:40,829 --> 00:08:43,289
done but doesn't specify how it will be

170
00:08:43,289 --> 00:08:46,110
done an interface contains the name of

171
00:08:46,110 --> 00:08:48,420
all of the properties along with all of

172
00:08:48,420 --> 00:08:51,629
their types it also includes a signature

173
00:08:51,629 --> 00:08:53,730
for functions along with the type of

174
00:08:53,730 --> 00:08:56,209
arguments and the return type for

175
00:08:56,209 --> 00:08:59,160
example the title function returns a

176
00:08:59,160 --> 00:09:03,300
string in typescript you can also export

177
00:09:03,300 --> 00:09:05,430
these interfaces allowing similar

178
00:09:05,430 --> 00:09:07,559
components to share the same contracts

179
00:09:07,559 --> 00:09:11,129
ensuring consistency so here we've made

180
00:09:11,129 --> 00:09:13,529
an interface called core interactive

181
00:09:13,529 --> 00:09:15,660
public props for anything that would

182
00:09:15,660 --> 00:09:18,300
need to share link related interaction

183
00:09:18,300 --> 00:09:23,170
design concerns

184
00:09:23,180 --> 00:09:25,940
for our link component we've extended

185
00:09:25,940 --> 00:09:28,760
the core link interface to use the same

186
00:09:28,760 --> 00:09:31,370
core interactive public props so core

187
00:09:31,370 --> 00:09:33,710
link will get things like the title prop

188
00:09:33,710 --> 00:09:36,470
for free with added props that we want

189
00:09:36,470 --> 00:09:38,570
to stay specific to core link like

190
00:09:38,570 --> 00:09:45,200
underlined so how does typescript

191
00:09:45,200 --> 00:09:50,510
specifically help Design Systems more

192
00:09:50,510 --> 00:09:51,230
than anything

193
00:09:51,230 --> 00:09:53,930
typescript helps create trust and a

194
00:09:53,930 --> 00:09:56,090
stronger relationship between design and

195
00:09:56,090 --> 00:09:59,780
development designers can trust that

196
00:09:59,780 --> 00:10:01,460
their designs are being implemented

197
00:10:01,460 --> 00:10:02,180
correctly

198
00:10:02,180 --> 00:10:04,970
and developers can trust that they have

199
00:10:04,970 --> 00:10:07,190
access to all of the information they

200
00:10:07,190 --> 00:10:11,120
need about a component upon usage let me

201
00:10:11,120 --> 00:10:15,080
explain that further as I was

202
00:10:15,080 --> 00:10:17,630
researching typescript I came across a

203
00:10:17,630 --> 00:10:19,820
really great phrase describing what

204
00:10:19,820 --> 00:10:22,760
typescript is like interface oriented

205
00:10:22,760 --> 00:10:26,180
development typescript encourages

206
00:10:26,180 --> 00:10:29,330
developers to develop exposing

207
00:10:29,330 --> 00:10:32,090
interfaces which keeps other developers

208
00:10:32,090 --> 00:10:34,970
who use the components informed of what

209
00:10:34,970 --> 00:10:39,510
the API consists of

210
00:10:39,520 --> 00:10:42,590
typescript allows developers to focus on

211
00:10:42,590 --> 00:10:45,680
exposed API rather than having to know

212
00:10:45,680 --> 00:10:48,820
all the code by heart because of this

213
00:10:48,820 --> 00:10:50,930
typescript can enable a softer

214
00:10:50,930 --> 00:10:54,710
onboarding for code bases and especially

215
00:10:54,710 --> 00:10:56,360
for design related and front-end

216
00:10:56,360 --> 00:10:58,250
specific code which most developers

217
00:10:58,250 --> 00:11:00,950
don't want to focus on the IDE has

218
00:11:00,950 --> 00:11:07,160
really great autocomplete here's an

219
00:11:07,160 --> 00:11:08,570
example of how we're able to achieve

220
00:11:08,570 --> 00:11:11,360
developer trust by using typescript in

221
00:11:11,360 --> 00:11:14,150
our design system like most design

222
00:11:14,150 --> 00:11:16,700
systems we provide documentation for

223
00:11:16,700 --> 00:11:19,550
component usage and guidelines something

224
00:11:19,550 --> 00:11:21,530
great were allowed to do because of

225
00:11:21,530 --> 00:11:23,930
typescript is static code analysis of

226
00:11:23,930 --> 00:11:28,280
each components props so for our

227
00:11:28,280 --> 00:11:30,500
component pagination control which you

228
00:11:30,500 --> 00:11:35,150
saw here we have all of the possible

229
00:11:35,150 --> 00:11:38,000
props you could use on this component

230
00:11:38,000 --> 00:11:43,730
listed out in this interface in our

231
00:11:43,730 --> 00:11:45,410
documentation if you go to the

232
00:11:45,410 --> 00:11:50,210
properties tab of each component you'll

233
00:11:50,210 --> 00:11:52,580
find those same props listed out for our

234
00:11:52,580 --> 00:11:58,620
developers to easily reference

235
00:11:58,630 --> 00:12:01,449
it's the same exact list of props with

236
00:12:01,449 --> 00:12:03,430
additional information about what the

237
00:12:03,430 --> 00:12:05,860
props type is and descriptions that we

238
00:12:05,860 --> 00:12:07,810
generate from comments in the code

239
00:12:07,810 --> 00:12:10,209
itself so you can see that the interface

240
00:12:10,209 --> 00:12:13,269
is there we using static code analysis

241
00:12:13,269 --> 00:12:15,399
took all of those props and turned them

242
00:12:15,399 --> 00:12:21,399
into documentation we've taken it a step

243
00:12:21,399 --> 00:12:23,649
further by also offering developers a

244
00:12:23,649 --> 00:12:25,839
functional prate playground to test

245
00:12:25,839 --> 00:12:28,480
components in with the same prop list as

246
00:12:28,480 --> 00:12:32,399
well on each of our documentation pages

247
00:12:32,399 --> 00:12:35,470
we offer a link to open a playground for

248
00:12:35,470 --> 00:12:40,930
each component this is an example of

249
00:12:40,930 --> 00:12:43,750
what a playground looks like the

250
00:12:43,750 --> 00:12:45,970
playground offers developers a way to

251
00:12:45,970 --> 00:12:49,839
configure all of the props use them and

252
00:12:49,839 --> 00:12:52,779
work with them to create the version of

253
00:12:52,779 --> 00:12:55,449
the component that they need the code

254
00:12:55,449 --> 00:12:58,029
changes in real time as well so that

255
00:12:58,029 --> 00:12:59,740
they could copy and paste the code if

256
00:12:59,740 --> 00:13:02,529
they wanted to by having all of our

257
00:13:02,529 --> 00:13:04,389
props per component listed out in

258
00:13:04,389 --> 00:13:07,240
interfaces we're able to easily make use

259
00:13:07,240 --> 00:13:09,339
of static code analysis and provide

260
00:13:09,339 --> 00:13:11,709
better tooling for our developers and

261
00:13:11,709 --> 00:13:17,680
for our designers

262
00:13:17,690 --> 00:13:20,300
typescript also enables designer trust

263
00:13:20,300 --> 00:13:22,790
take a component design as simple as

264
00:13:22,790 --> 00:13:25,520
this a progress bar which we use on our

265
00:13:25,520 --> 00:13:31,070
twitch website all over the place with

266
00:13:31,070 --> 00:13:35,500
the combination of interfaces and enums

267
00:13:35,500 --> 00:13:38,600
the components can include all possible

268
00:13:38,600 --> 00:13:41,570
variations of design so the developer

269
00:13:41,570 --> 00:13:43,820
can easily get the design right without

270
00:13:43,820 --> 00:13:45,890
having to rely on copying and pasting

271
00:13:45,890 --> 00:13:50,080
code knowing specific class names etc

272
00:13:50,080 --> 00:13:53,270
the IDE will also include all of these

273
00:13:53,270 --> 00:13:55,940
values through autocomplete and smart

274
00:13:55,940 --> 00:13:57,980
suggestions so the designers don't need

275
00:13:57,980 --> 00:14:00,440
to redline all of their design mocks or

276
00:14:00,440 --> 00:14:03,230
their specs and the developers know what

277
00:14:03,230 --> 00:14:05,060
exact variations they could possibly

278
00:14:05,060 --> 00:14:10,840
choose from

279
00:14:10,850 --> 00:14:13,459
our design system also uses strict

280
00:14:13,459 --> 00:14:15,859
naming conventions so that our source of

281
00:14:15,859 --> 00:14:18,259
truth doesn't have to be production code

282
00:14:18,259 --> 00:14:21,529
as it is for many companies our source

283
00:14:21,529 --> 00:14:23,479
of truth can actually start and live in

284
00:14:23,479 --> 00:14:27,350
the design for example in our figma UI

285
00:14:27,350 --> 00:14:29,899
kit we have all of our typography and

286
00:14:29,899 --> 00:14:32,889
all of our colors all of our text types

287
00:14:32,889 --> 00:14:36,289
mapped out and named based on what we

288
00:14:36,289 --> 00:14:38,149
would want the functional color and type

289
00:14:38,149 --> 00:14:41,839
variables to be we then map those

290
00:14:41,839 --> 00:14:46,519
variables to props and provide the exact

291
00:14:46,519 --> 00:14:49,129
the exact same type styles and color

292
00:14:49,129 --> 00:14:52,009
styles to our components because all of

293
00:14:52,009 --> 00:14:54,199
our style opinions get translated to

294
00:14:54,199 --> 00:14:56,959
props in the code we're able to maintain

295
00:14:56,959 --> 00:14:59,899
a strict and defined system for all of

296
00:14:59,899 --> 00:15:03,470
our designs this allows for us to rarely

297
00:15:03,470 --> 00:15:05,720
deviate from the system ensuring

298
00:15:05,720 --> 00:15:08,959
efficiency in code and consistency in

299
00:15:08,959 --> 00:15:14,120
design

300
00:15:14,130 --> 00:15:17,579
as a bonus typescript can also enable

301
00:15:17,579 --> 00:15:21,509
business and user trust according to a

302
00:15:21,509 --> 00:15:23,339
study done by a computer science

303
00:15:23,339 --> 00:15:26,160
researcher Adrian Collier using

304
00:15:26,160 --> 00:15:28,500
typescript results in a 15 percent

305
00:15:28,500 --> 00:15:31,589
decrease of bugs strong typing ensures

306
00:15:31,589 --> 00:15:33,930
that there will be less bugs which helps

307
00:15:33,930 --> 00:15:36,089
PM's and other people focused on the

308
00:15:36,089 --> 00:15:37,370
business side of things

309
00:15:37,370 --> 00:15:39,810
trust that your features will be more

310
00:15:39,810 --> 00:15:42,779
efficient and of course the users will

311
00:15:42,779 --> 00:15:44,970
appreciate experiencing less bugs as

312
00:15:44,970 --> 00:15:50,250
well hopefully by this point I've

313
00:15:50,250 --> 00:15:52,259
convinced you that design systems could

314
00:15:52,259 --> 00:15:54,589
greatly benefit from using typescript

315
00:15:54,589 --> 00:15:57,389
but I want to close out this talk by

316
00:15:57,389 --> 00:15:59,399
expressing that when it comes to writing

317
00:15:59,399 --> 00:16:01,980
code it's important to understand that

318
00:16:01,980 --> 00:16:05,190
form follows function what does this

319
00:16:05,190 --> 00:16:07,920
mean it means that the shape of our

320
00:16:07,920 --> 00:16:10,529
structures and more abstractly the tools

321
00:16:10,529 --> 00:16:12,569
that we choose to use and how we use

322
00:16:12,569 --> 00:16:15,709
them are dictated by their functions

323
00:16:15,709 --> 00:16:18,569
when it comes to web development the

324
00:16:18,569 --> 00:16:21,060
purpose of everything we do is to make a

325
00:16:21,060 --> 00:16:23,610
more useable and safe set of websites

326
00:16:23,610 --> 00:16:27,850
and apps

327
00:16:27,860 --> 00:16:31,010
so to take that a step further intent

328
00:16:31,010 --> 00:16:34,520
follows impact as a developer or even a

329
00:16:34,520 --> 00:16:37,820
designer your intent or lack of intent

330
00:16:37,820 --> 00:16:41,090
behind anything you create follows the

331
00:16:41,090 --> 00:16:43,310
impact that it has on users of the web

332
00:16:43,310 --> 00:16:47,030
and on each other it's always cool to

333
00:16:47,030 --> 00:16:49,270
use the newest libraries or frameworks

334
00:16:49,270 --> 00:16:51,800
but it's important to gauge whether they

335
00:16:51,800 --> 00:16:54,140
actually impact the users and maintain

336
00:16:54,140 --> 00:16:57,020
errs positively and if the creators of

337
00:16:57,020 --> 00:16:59,390
the framework had safety and usability

338
00:16:59,390 --> 00:17:02,570
in mind your intent behind the software

339
00:17:02,570 --> 00:17:04,760
you build and put out into the world

340
00:17:04,760 --> 00:17:07,070
creates more impact than you might

341
00:17:07,070 --> 00:17:09,290
expect so it's important to use the

342
00:17:09,290 --> 00:17:12,350
tools that consider everyone safety and

343
00:17:12,350 --> 00:17:17,859
Trust thank you

