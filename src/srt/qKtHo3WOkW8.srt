1
00:00:00,110 --> 00:00:03,679
Decoupling Applications from Architectures
- Jeff Hoffer

2
00:00:03,679 --> 00:00:05,480
Hello, all right.

3
00:00:05,480 --> 00:00:06,910
Thank you everybody for coming.

4
00:00:06,910 --> 00:00:15,780
My name is Jeff Hoffer, and my talk is decoupling
applications from architecture.

5
00:00:15,780 --> 00:00:24,040
I gave a talk on this side last year and there
was literally 10% of the people in the room

6
00:00:24,040 --> 00:00:26,950
that there is now, so thank you all for showing
up.

7
00:00:26,950 --> 00:00:28,710
I really appreciate it.

8
00:00:28,710 --> 00:00:35,870
The lights are really bright so I can't see
anybody's face, which is probably a good thing.

9
00:00:35,870 --> 00:00:40,370
All right.

10
00:00:40,370 --> 00:00:42,560
So a little bit more about me.

11
00:00:42,560 --> 00:00:49,290
I've been professionally developing software
for 20 years, and I recently joined a company

12
00:00:49,290 --> 00:00:52,649
called bluebeam.

13
00:00:52,649 --> 00:01:06,440
It's for the 
design bid and build phases of projects.

14
00:01:06,440 --> 00:01:15,030
You can find me on GitHub at @eudaimos, it's
a word I made up, kind of.

15
00:01:15,030 --> 00:01:24,540
It was inspired by Aristotle's eudaiminea.

16
00:01:24,540 --> 00:01:34,670
The inspiration is my son Eric who's here
with my wife this week, if you see us around,

17
00:01:34,670 --> 00:01:42,590
he's nine now, please say hi.

18
00:01:42,590 --> 00:01:48,979
So it's appropriate that I work in a software
company for construction.

19
00:01:48,979 --> 00:01:55,479
I notice that as human beings, we've been
in the practice of building things for a long

20
00:01:55,479 --> 00:01:57,909
time.

21
00:01:57,909 --> 00:02:02,979
We built some amazing things that have stood
the test of time, beyond which most of us

22
00:02:02,979 --> 00:02:09,050
can even conceptualize the length of that
time.

23
00:02:09,050 --> 00:02:15,340
And with software we've come up with a single-most
malleable thing which we've ever had to build

24
00:02:15,340 --> 00:02:21,500
anything, and it's been pretty great.

25
00:02:21,500 --> 00:02:25,090
But still there's something not quite right.

26
00:02:25,090 --> 00:02:34,510
When I worked in Santa Monica, there was a
lot of construction nearby all the time, and

27
00:02:34,510 --> 00:02:39,840
as we were walking our VP of Engineering,
my boss used to point out how quickly they

28
00:02:39,840 --> 00:02:46,120
could build these buildings versus how long
it took us to deliver software.

29
00:02:46,120 --> 00:02:53,360
[laughter]
So how do we keep ending up here?

30
00:02:53,360 --> 00:02:59,519
[laughter]
We either build it too slow, we build it wrong,

31
00:02:59,519 --> 00:03:03,350
or both.

32
00:03:03,350 --> 00:03:07,670
And how does that happen?

33
00:03:07,670 --> 00:03:13,940
We get asks from people who don't really know
the difference between building application

34
00:03:13,940 --> 00:03:17,989
and building it well.

35
00:03:17,989 --> 00:03:23,710
But they want to make sure that we don't build
it well, sometimes.

36
00:03:23,710 --> 00:03:31,330
That' d be great.

37
00:03:31,330 --> 00:03:39,440
So we end up in this Kobayashi Maru scenario
and for the younger folks out there who haven't

38
00:03:39,440 --> 00:03:42,849
seen Star Trek II.

39
00:03:42,849 --> 00:03:49,100
It's designed to be a no-win scenario.

40
00:03:49,100 --> 00:03:56,560
It's there to determine how we will respond,
and unfortunately most of our responses are

41
00:03:56,560 --> 00:04:01,989
this.

42
00:04:01,989 --> 00:04:09,290
[laughter]
Where the needs of the many outweigh the needs

43
00:04:09,290 --> 00:04:14,260
of the few, right?

44
00:04:14,260 --> 00:04:27,119
And then we get back to our brittle code.

45
00:04:27,119 --> 00:04:31,279
So what do I mean exactly by application versus
architecture?

46
00:04:31,279 --> 00:04:34,340
So we should probably define this.

47
00:04:34,340 --> 00:04:43,240
And we can take a step and define it based
on who defines each for our software.

48
00:04:43,240 --> 00:04:49,300
Product team will define what the application
does, engineers will build it, QA validate.

49
00:04:49,300 --> 00:04:52,809
Engineers work with software architects to
define the needs.

50
00:04:52,809 --> 00:05:01,729
They build the architecture, QA validates
nonfunctional constraints.

51
00:05:01,729 --> 00:05:07,210
So I'd like to take this and define these
as layers.

52
00:05:07,210 --> 00:05:12,340
So we have an application we call that the
development layer and architecture is the

53
00:05:12,340 --> 00:05:14,069
architecture layer.

54
00:05:14,069 --> 00:05:20,669
And if we can organize these into layers,
then we can separate them like what Docker

55
00:05:20,669 --> 00:05:26,279
was able to do for apps in DevOps.

56
00:05:26,279 --> 00:05:29,809
There's also four aspects of software.

57
00:05:29,809 --> 00:05:37,399
Taking another view here, what an application
represents to a user, how it does its job,

58
00:05:37,399 --> 00:05:45,029
where it executes, and when it does what it's
designed to do.

59
00:05:45,029 --> 00:05:51,990
Unfortunately, when working between the development
and architecture layers, we commingle these

60
00:05:51,990 --> 00:05:58,099
four aspects into a kind of a mess.

61
00:05:58,099 --> 00:06:02,849
So let's go back to our layer definition and
define them using these four aspects.

62
00:06:02,849 --> 00:06:11,399
If we say the development layer is the what
and the when, and the architecture layer is

63
00:06:11,399 --> 00:06:16,710
how and where.

64
00:06:16,710 --> 00:06:23,499
We can organize them this way and if we can
organize them this way, along these layers,

65
00:06:23,499 --> 00:06:31,520
and make them orthogonal to each other, then
we have the decoupling we're looking for.

66
00:06:31,520 --> 00:06:36,309
So if we take these aspects and graft them
on to our layers, the development layer has

67
00:06:36,309 --> 00:06:44,400
what the context of the application is for
a user, when does a user go from one context

68
00:06:44,400 --> 00:06:47,399
to another.

69
00:06:47,399 --> 00:06:53,249
architecturally how will the app move from
context to context and where will the code

70
00:06:53,249 --> 00:06:58,270
reacting to this actually execute?

71
00:06:58,270 --> 00:07:03,619
So if we get into the details of that so that
it actually matters to us who have to build

72
00:07:03,619 --> 00:07:11,059
this stuff, we can borrow some concepts from
computer science where we say the what these

73
00:07:11,059 --> 00:07:19,270
contexts are signals, when is triggering and
the reaction to these signals.

74
00:07:19,270 --> 00:07:26,159
And the how is -- and the where is a signal
network and the implementation of where that

75
00:07:26,159 --> 00:07:34,499
signal network will run.

76
00:07:34,499 --> 00:07:38,860
So I want to introduce a few things for the
demo first.

77
00:07:38,860 --> 00:07:40,020
There's RealWorld.

78
00:07:40,020 --> 00:07:52,619
If you haven't gone to realworld.io, it's
beyond a standard to do app.

79
00:07:52,619 --> 00:07:58,439
It involves conduit which is a Medium-like
blog platform and there's lots of concepts

80
00:07:58,439 --> 00:08:04,211
which are integrating different front ends
and different back ends all doing basically

81
00:08:04,211 --> 00:08:08,059
the same functionality as this Conduit app.

82
00:08:08,059 --> 00:08:12,330
I also wanted to introduce TAO.js.

83
00:08:12,330 --> 00:08:20,439
There's a project that I've been working on
as a solution for this.

84
00:08:20,439 --> 00:08:29,589
It has a meta language for defining signals
that end up in the code, using trigrams.

85
00:08:29,589 --> 00:08:41,909
It provides interaction primitives to determine
when to interact with these signals

86
00:08:41,909 --> 00:08:48,550
and it implements signal networks.

87
00:08:48,550 --> 00:08:59,279
So a trigram, the library TAO actually comes
from term action orient, so we want to describe

88
00:08:59,279 --> 00:09:03,279
these contexts with these three dimensions.

89
00:09:03,279 --> 00:09:09,290
So term is something, action is an action
taking place, and orientation -- orient is

90
00:09:09,290 --> 00:09:12,540
a perspective.

91
00:09:12,540 --> 00:09:19,160
Three ways to interact and respond to signals
is inline, do them in order.

92
00:09:19,160 --> 00:09:24,310
Async, do it in parallel as a side effect.

93
00:09:24,310 --> 00:09:32,350
And intercept is do it first and optionally
you can interrupt the flow.

94
00:09:32,350 --> 00:09:39,891
And implementing signal networks, it abstracts
that away from the application code, and it

95
00:09:39,891 --> 00:09:52,410
also has the implements a signal chaining,
so that if you are reacting to a signal from

96
00:09:52,410 --> 00:09:59,170
the network, you can provide it with another
signal that will chain itself, so this gives

97
00:09:59,170 --> 00:10:05,910
us very small bits of code that we can implement
now as it -- using the signal network as the

98
00:10:05,910 --> 00:10:12,550
medium for the interaction.

99
00:10:12,550 --> 00:10:21,500
So taking this back to our notion of aspects
to layers and now to TAO.js, what we're able

100
00:10:21,500 --> 00:10:28,439
to do with the development layer using TAO.js
is the powers that engineers use to define

101
00:10:28,439 --> 00:10:39,540
these trigrams and define the desired behaviors
when these are signaled in the signal network.

102
00:10:39,540 --> 00:10:45,240
The engineers implement these behaviors in
the code using these interaction primitives

103
00:10:45,240 --> 00:10:46,889
on the signal network.

104
00:10:46,889 --> 00:10:55,980
And the architectural layer, we allow the
architect or whoever's implementing the architecture

105
00:10:55,980 --> 00:11:01,649
to choose the signal network, and implement
using that, and decide where that signal network

106
00:11:01,649 --> 00:11:08,370
will run, so we've now abstracted away where
the code has to run in order to interact and

107
00:11:08,370 --> 00:11:12,720
provide the development layer with what it
needs.

108
00:11:12,720 --> 00:11:21,579
A quick note about trigrams versus an application
context, so think of a trigram, it's a 3-dimensional

109
00:11:21,579 --> 00:11:26,330
signal, also an event.

110
00:11:26,330 --> 00:11:31,980
You can subscribe to trigrams on the signal
network and it's like a class in an OOP where

111
00:11:31,980 --> 00:11:40,029
ar application context would be an object
in OOP, and so it's a specific context and

112
00:11:40,029 --> 00:11:47,540
so it combines this trigram with the actual
data associated with the event that's happening

113
00:11:47,540 --> 00:11:52,190
the signal.

114
00:11:52,190 --> 00:11:59,279
So when going through the real world conduit
application, what we'll do first is define

115
00:11:59,279 --> 00:12:00,279
the terms.

116
00:12:00,279 --> 00:12:05,769
We have an app, user, article, comment.

117
00:12:05,769 --> 00:12:15,660
We'll define some actions, init, load, find,
exit.

118
00:12:15,660 --> 00:12:21,220
We'll define the orientation so we have a
portal and an anonymous orientation, so portal

119
00:12:21,220 --> 00:12:22,379
is when you're logged in.

120
00:12:22,379 --> 00:12:27,600
Anonymous is when you're not.

121
00:12:27,600 --> 00:12:31,339
And then we'll define some paths.

122
00:12:31,339 --> 00:12:37,350
This allows us to understand how to react
to signals on the network, and then throwback

123
00:12:37,350 --> 00:12:41,970
new signals in order to keep this chain going.

124
00:12:41,970 --> 00:12:50,560
And this is why we also develop or define
very granular actions, so that we can have

125
00:12:50,560 --> 00:12:58,579
more granular chains and we can hook into
these at any time.

126
00:12:58,579 --> 00:13:02,319
So I'm going to go into the demo portion.

127
00:13:02,319 --> 00:13:04,189
OK.

128
00:13:04,189 --> 00:13:10,720
So we're going to start with our Conduit app.

129
00:13:10,720 --> 00:13:19,269
And -- of course!
[laughter]

130
00:13:19,269 --> 00:13:22,120
OK.

131
00:13:22,120 --> 00:13:33,529
Oh, I understand why.

132
00:13:33,529 --> 00:13:39,230
All right.

133
00:13:39,230 --> 00:13:48,899
Um, so this is working with their -- with
the default API, which is using a service

134
00:13:48,899 --> 00:13:51,600
somewhere.

135
00:13:51,600 --> 00:14:00,089
And we're going to -- oops, wrong one.

136
00:14:00,089 --> 00:14:01,509
Sorry.

137
00:14:01,509 --> 00:14:19,480
Of course this all worked in the room.

138
00:14:19,480 --> 00:15:07,560
(Whispers) now completely broken.

139
00:15:07,560 --> 00:15:46,490
So I'm going to skip showing it as a ... because
it doesn't seem to want to behave with Redux.

140
00:15:46,490 --> 00:15:50,139
So it was a Redux React based application.

141
00:15:50,139 --> 00:16:32,199
That still doesn't want to play nice.

142
00:16:32,199 --> 00:16:34,249
Very sorry for this.

143
00:16:34,249 --> 00:16:37,470
AUDIENCE: You got it!

144
00:16:37,470 --> 00:16:39,079
>> Thank you.

145
00:16:39,079 --> 00:16:41,459
I can't see who you are.

146
00:16:41,459 --> 00:16:43,870
But thank you.

147
00:16:43,870 --> 00:16:57,959
All right, let's just turn all of it on.

148
00:16:57,959 --> 00:17:12,110
Anybody know which screen I'm on?

149
00:17:12,110 --> 00:17:23,899
I can't imagine what changed.

150
00:17:23,899 --> 00:17:38,049
Oh, I, yeah, now I know.

151
00:17:38,049 --> 00:17:52,720
This is the best!

152
00:17:52,720 --> 00:18:02,460
OK.

153
00:18:02,460 --> 00:18:12,200
[applause]

154
00:18:12,200 --> 00:18:17,350
Getting the applause for code you didn't write,
it's, thank you!

155
00:18:17,350 --> 00:18:19,450
[laughter]
So this is Conduit.

156
00:18:19,450 --> 00:18:25,919
This is the basic React Redux example I think
probably the first one they did.

157
00:18:25,919 --> 00:18:29,790
So we're going to modify this, time willing.

158
00:18:29,790 --> 00:18:33,440
To use TAO.js.

159
00:18:33,440 --> 00:18:44,190
So this is actually hitting the API for that,
we can sign in, go to home page, so you see

160
00:18:44,190 --> 00:18:49,169
there's all this functionality.

161
00:18:49,169 --> 00:19:19,760
There's lots of ...

162
00:19:19,760 --> 00:19:30,559
so this application has a bunch of reducers
that we're used to, all the Redux boilerplating,

163
00:19:30,559 --> 00:19:43,500
the components are React, they have a lot
of baked-in Redux, so we've sort of embedded

164
00:19:43,500 --> 00:19:57,919
all of this together, what these -- how we
call the API, what to do on various -- within

165
00:19:57,919 --> 00:19:59,990
various components.

166
00:19:59,990 --> 00:20:07,130
So if we go ahead and -- I'm going to turn
off Redux logging.

167
00:20:07,130 --> 00:20:25,399
We're going to switch to using 
some alternative components and not all of

168
00:20:25,399 --> 00:20:29,880
them are necessary.

169
00:20:29,880 --> 00:20:35,419
So we notice, still looks the same.

170
00:20:35,419 --> 00:20:36,919
Still works.

171
00:20:36,919 --> 00:20:41,720
I didn't get that tab thing working yet.

172
00:20:41,720 --> 00:20:43,900
We see the results change.

173
00:20:43,900 --> 00:21:04,240
And the way this is implemented is -- so for
the home, the original home is here.

174
00:21:04,240 --> 00:21:12,920
It's home page loaded, home page unloaded,
applying the tag filter, we now take and add

175
00:21:12,920 --> 00:21:15,980
a handler.

176
00:21:15,980 --> 00:21:24,750
We import a TAO signal network that is the
default signal network, and in order to chain

177
00:21:24,750 --> 00:21:34,240
a signal into the network from a handler,
we use this app context constructor to return

178
00:21:34,240 --> 00:21:45,309
that as a new signal to follow, and so when
we receive the signal to enter home, we want

179
00:21:45,309 --> 00:21:51,940
to tell the application to view home.

180
00:21:51,940 --> 00:22:04,510
Alternatively, we use a data handler from
the React library to capture data from a signal,

181
00:22:04,510 --> 00:22:16,210
and store it where we can utilize it again
in our render handler, and this -- you provide

182
00:22:16,210 --> 00:22:22,769
it with a context to say any data handlers
above, they create this context for me, I

183
00:22:22,769 --> 00:22:28,910
will now have these available to me in my
handler that I use.

184
00:22:28,910 --> 00:22:32,200
It's a function as a child component.

185
00:22:32,200 --> 00:22:41,950
And so when it -- this will react when we
reach the trigram -- in the application context

186
00:22:41,950 --> 00:22:47,309
that reaches the trigram of home and view
and we actually don't care about the orientation.

187
00:22:47,309 --> 00:22:54,700
So it allows for wild-carding, so if you don't
provide a term, it's a wild card on that term

188
00:22:54,700 --> 00:23:01,380
-- on that attribute of the trigram.

189
00:23:01,380 --> 00:23:08,020
And so when we render the home, we actually
want to use our home component.

190
00:23:08,020 --> 00:23:10,700
This one's new.

191
00:23:10,700 --> 00:23:18,480
We pass down the token, the app name, we get
from the app data, which tabs are active,

192
00:23:18,480 --> 00:23:25,490
a tag, and then what to do if they click "All"
or click on the feed.

193
00:23:25,490 --> 00:23:28,830
So this is a -- just a standard React component.

194
00:23:28,830 --> 00:23:36,990
There's no logic or anything in here to interact
with the signal layer, signal network and

195
00:23:36,990 --> 00:23:42,730
we can treat our components completely on
their own, makes them easier to test, easier

196
00:23:42,730 --> 00:23:54,590
to design using storybook, and this works
for many things, so this uses a main view.

197
00:23:54,590 --> 00:24:05,880
Vue, and you notice that the interactions
are -- there you go.

198
00:24:05,880 --> 00:24:24,669
We pass down this "Click all" which will then
--

199
00:24:24,669 --> 00:24:26,720
this will create a signal into the network.

200
00:24:26,720 --> 00:24:37,500
Actually, this is not implemented right.

201
00:24:37,500 --> 00:24:54,360
So going in here and signing in, I come back
here and see the signed-in view and we did

202
00:24:54,360 --> 00:25:00,299
that with using a different header.

203
00:25:00,299 --> 00:25:07,120
Nope, wrong window again.

204
00:25:07,120 --> 00:25:16,669
So we have our login component, which is saying
if I'm trying to view -- if I'm trying to

205
00:25:16,669 --> 00:25:23,289
enter a user anonymously, I want to view that
user anonymously, so that's going to render

206
00:25:23,289 --> 00:25:33,299
-- use a render handler, user view, anonymous,
and that will give us our login control.

207
00:25:33,299 --> 00:25:42,200
When we submit, it's going to generate a user
find action anonymously.

208
00:25:42,200 --> 00:25:53,710
Because this is just working with what's already
here, we have these handlers all defined around

209
00:25:53,710 --> 00:25:55,940
users.

210
00:25:55,940 --> 00:26:06,000
So we find a user anonymously, we have a handler
for that, which will grab the email and password

211
00:26:06,000 --> 00:26:12,030
out of the data -- out of the user portion
of the data passed in the application context

212
00:26:12,030 --> 00:26:21,840
to our handler, we will leverage the agent
and do a login, and then based on how that

213
00:26:21,840 --> 00:26:27,690
responds, we'll either get a user or it will
catch an error.

214
00:26:27,690 --> 00:26:33,620
If we get a user, then we want to enter that
user in the portal orientation, and provide

215
00:26:33,620 --> 00:26:39,020
the token so that that can be used.

216
00:26:39,020 --> 00:26:47,720
So what's nice about the ability to have these
wild card handlers, when we pass the token

217
00:26:47,720 --> 00:27:02,720
and we're in the portal orientation for any
of our signals, we make sure to set the token

218
00:27:02,720 --> 00:27:07,210
on the agent every time based on that.

219
00:27:07,210 --> 00:27:11,559
So we don't have to call this anywhere else,
but it will always be accurate.

220
00:27:11,559 --> 00:27:19,600
If we are going anonymous, we change -- we
set the token to empty.

221
00:27:19,600 --> 00:27:30,580
We also can react to initializing the -- so
our initial application context will be appinit

222
00:27:30,580 --> 00:27:41,140
anon, we can grab the token from local storage.

223
00:27:41,140 --> 00:27:45,559
If there is a token, we'll switch to the portal
view.

224
00:27:45,559 --> 00:27:53,720
If there's not, intercept sends nothing back,
it will chain to the next appinit anon.

225
00:27:53,720 --> 00:27:56,940
That's when it will call load.

226
00:27:56,940 --> 00:28:08,330
So using this, we now can refactor all of
the application logic into these handlers

227
00:28:08,330 --> 00:28:16,159
that are small and bite-size and easy to change,
and we don't have to worry about how we're

228
00:28:16,159 --> 00:28:26,870
making calls necessarily to move the user
around the application.

229
00:28:26,870 --> 00:28:33,430
On the -- not sure how much time I have left.

230
00:28:33,430 --> 00:28:54,080
So going into the API side -- so if I switch
this to using the local API -- let me sign

231
00:28:54,080 --> 00:28:57,360
out first.

232
00:28:57,360 --> 00:29:02,289
Clears the token.

233
00:29:02,289 --> 00:29:12,200
And we also see, through logging these, that
these chain to each other, -- now, let's ...

234
00:29:12,200 --> 00:29:19,320
We'll use the local API.

235
00:29:19,320 --> 00:29:38,740
Now for this, with the same user, we set up
-- we convert these routes from the API where

236
00:29:38,740 --> 00:29:47,299
instead of doing what it was -- what it had
here, gets the user find by, it's going directly

237
00:29:47,299 --> 00:29:58,411
against mongo, we can instead create a transponder
on our signal network and what a transponder

238
00:29:58,411 --> 00:30:04,659
does is just provide us with a promise when
we set the context that we can await.

239
00:30:04,659 --> 00:30:13,350
And we add some handlers to the transponder,
so that these will only be handled by the

240
00:30:13,350 --> 00:30:21,679
transponder and do -- perform this action
in other handlers we've added to the signal

241
00:30:21,679 --> 00:30:23,580
network.

242
00:30:23,580 --> 00:30:33,180
They'll all be called except for other transponders
will not see the signal that I put into the

243
00:30:33,180 --> 00:30:37,549
network.

244
00:30:37,549 --> 00:30:46,300
So when we come in here, we want to get the
user, and so this is a -- this is when the

245
00:30:46,300 --> 00:30:53,669
user is coming back to the portal or -- when
the user is coming back to the portal, we

246
00:30:53,669 --> 00:30:58,720
want to be able to retrieve that user from
the portal, so we will send the signal off

247
00:30:58,720 --> 00:31:04,680
to find the user in the portal and we pass
what that user ID came in and what the token

248
00:31:04,680 --> 00:31:08,120
was.

249
00:31:08,120 --> 00:31:22,789
And now in here we have a user find portal,
and here's where we implement going to the

250
00:31:22,789 --> 00:31:24,500
database.

251
00:31:24,500 --> 00:31:29,610
And if they're not found, we say it's a fail.

252
00:31:29,610 --> 00:31:33,570
And that the auth failed.

253
00:31:33,570 --> 00:31:41,700
If it's -- if we did find the user, we grab
that user and we send it back and saying we

254
00:31:41,700 --> 00:31:44,639
retrieved the user from the portal.

255
00:31:44,639 --> 00:31:52,049
So now on a retrieve, we can send that back
in the JSON.

256
00:31:52,049 --> 00:32:02,260
I won't have time to get to it, but what this
allows us to do is because we've put the -- we've

257
00:32:02,260 --> 00:32:12,409
put the actual interaction with Mongo here,
we can add other handlers and one, put an

258
00:32:12,409 --> 00:32:16,320
intercept handler to handle caching.

259
00:32:16,320 --> 00:32:22,580
If we have a token and we already know the
user, we can just get that user from cache,

260
00:32:22,580 --> 00:32:27,399
so return the correct thing and not even go
to Mongo.

261
00:32:27,399 --> 00:32:35,890
Or if we want to change our database from
Mongo to Postgres or mySQL or a relational

262
00:32:35,890 --> 00:32:43,279
store, we can just implement new handlers
and refactor that on the fly without having

263
00:32:43,279 --> 00:32:52,600
to worry about all -- changing the the code
of the actual API that the code is relying

264
00:32:52,600 --> 00:32:56,720
upon.

265
00:32:56,720 --> 00:33:06,990
Now, what I've shown is an example of how
to do this directly inside of an app or an

266
00:33:06,990 --> 00:33:12,770
API, and then they're still using a REST API
as an interface to talk to each other, but

267
00:33:12,770 --> 00:33:25,740
once I have these signals set up on both sides,
then I can use the socket io package

268
00:33:25,740 --> 00:33:32,019
without having to go through this REST medium.

269
00:33:32,019 --> 00:33:33,019
I think I'm almost out of time.

270
00:33:33,019 --> 00:33:35,240
Scoot back to -- -- I really want to thank
a few people.

271
00:33:35,240 --> 00:33:40,720
I want to thank the people at Thinkster.io
for creating the real world app.

272
00:33:40,720 --> 00:33:48,190
I will be developing this further and supplying
it to anybody who wants to see -- oh, is my

273
00:33:48,190 --> 00:33:49,190
display thing?

274
00:33:49,190 --> 00:33:50,190
That's nasty!

275
00:33:50,190 --> 00:33:51,190
Let's go ahead and close out of there.

276
00:33:51,190 --> 00:33:52,250
JSConf for being able to have these talks.

277
00:33:52,250 --> 00:33:59,769
I really appreciate to come up here and share
my work with everyone, and JS.org for hosting

278
00:33:59,769 --> 00:34:02,909
DNS for so many great projects.

279
00:34:02,909 --> 00:34:06,440
A few resources.

280
00:34:06,440 --> 00:34:12,800
The website for the project is tao.js.org.

281
00:34:12,800 --> 00:34:15,390
The GitHub repo.

282
00:34:15,390 --> 00:34:21,620
There are six cores published.

283
00:34:21,620 --> 00:34:27,220
The transponder came out of the utils package.

284
00:34:27,220 --> 00:34:30,930
You don't need it in the core package.

285
00:34:30,930 --> 00:34:34,150
And so the for build extensions on signal
networks.

286
00:34:34,150 --> 00:34:48,190
And the -- and then coming soon, I'll get
the 100% test coverage back on the packages.

287
00:34:48,190 --> 00:34:53,910
I did a lot of building for a little while,
and updated documentation, especially with

288
00:34:53,910 --> 00:35:02,030
this decoupled architecture focus, so thank
you very much for coming, and I really appreciate

289
00:35:02,030 --> 00:35:03,030
it.

