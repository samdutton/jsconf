1
00:00:05,820 --> 00:00:09,940

[Music]

2
00:00:09,950 --> 00:00:13,559
hello Berlin it's such an incredible

3
00:00:13,559 --> 00:00:15,900
privilege to be here and the 10th

4
00:00:15,900 --> 00:00:19,560
anniversary of CSS convey you now I was

5
00:00:19,560 --> 00:00:22,949
here in Berlin at CSS convent je s Conte

6
00:00:22,949 --> 00:00:25,289
for the very first time in my life last

7
00:00:25,289 --> 00:00:27,570
year and it was one of the most amazing

8
00:00:27,570 --> 00:00:30,029
experiences of my life so I really want

9
00:00:30,029 --> 00:00:32,130
to thank the organizers for bringing me

10
00:00:32,130 --> 00:00:34,710
out again and organizing this

11
00:00:34,710 --> 00:00:38,610
spectacular event now I know I

12
00:00:38,610 --> 00:00:40,410
discovered from a colleague of mine Alex

13
00:00:40,410 --> 00:00:43,230
lakatos somewhere in the audience that

14
00:00:43,230 --> 00:00:46,020
the dev tools console can totally be

15
00:00:46,020 --> 00:00:49,170
styled up with CSS case in point this

16
00:00:49,170 --> 00:00:52,949
glorious CSS only talk title in the

17
00:00:52,949 --> 00:00:57,960
console so my name is Wei Jing and I'm a

18
00:00:57,960 --> 00:01:00,059
developer advocate with next MOU if

19
00:01:00,059 --> 00:01:03,300
you've never heard of us well Alex built

20
00:01:03,300 --> 00:01:05,159
this coffee app that some of you will be

21
00:01:05,159 --> 00:01:07,260
using tomorrow to order coffee my

22
00:01:07,260 --> 00:01:09,030
colleague Gavin will also be speaking at

23
00:01:09,030 --> 00:01:11,310
JS conf we're really friendly people and

24
00:01:11,310 --> 00:01:14,400
next Mon does communications api's and

25
00:01:14,400 --> 00:01:16,619
Duke just come say hi if you've got a

26
00:01:16,619 --> 00:01:16,979
minute

27
00:01:16,979 --> 00:01:19,650
right I'm also an avid lover of emojis

28
00:01:19,650 --> 00:01:22,530
and this these pretty much sum up what

29
00:01:22,530 --> 00:01:24,450
Who I am as a person if you're curious

30
00:01:24,450 --> 00:01:26,640
about any one of them you can ask me

31
00:01:26,640 --> 00:01:29,759
about them later and lastly just to

32
00:01:29,759 --> 00:01:30,420
prove a point

33
00:01:30,420 --> 00:01:32,909
that Firefox supports the most CSS

34
00:01:32,909 --> 00:01:36,420
properties in the console I mean it's

35
00:01:36,420 --> 00:01:39,210
vertical writing in the console so I

36
00:01:39,210 --> 00:01:41,970
don't know about you but I love it now

37
00:01:41,970 --> 00:01:44,899
[Applause]

38
00:01:44,899 --> 00:01:47,369
when I started building stuff on the web

39
00:01:47,369 --> 00:01:49,530
I quickly realized that aligning stuff

40
00:01:49,530 --> 00:01:52,670
horizontally was way more easy than

41
00:01:52,670 --> 00:01:55,170
aligning stuff vertically and I started

42
00:01:55,170 --> 00:01:57,840
thinking about why that was now

43
00:01:57,840 --> 00:02:00,240
historically web technology started off

44
00:02:00,240 --> 00:02:02,850
from text document beginnings and a lot

45
00:02:02,850 --> 00:02:05,009
of the initial HTML tags and CSS

46
00:02:05,009 --> 00:02:07,590
properties focused mainly on text

47
00:02:07,590 --> 00:02:09,750
formatting for languages you know like

48
00:02:09,750 --> 00:02:11,310
English and French that were laid out

49
00:02:11,310 --> 00:02:14,160
predominantly from horizontally from top

50
00:02:14,160 --> 00:02:17,700
to bottom so boxes on the web and the

51
00:02:17,700 --> 00:02:20,099
web is made up of boxes right boxes on

52
00:02:20,099 --> 00:02:22,440
the web behaved very similarly but that

53
00:02:22,440 --> 00:02:25,080
was clearly insufficient for what most

54
00:02:25,080 --> 00:02:27,270
designers and developers had in mind

55
00:02:27,270 --> 00:02:29,520
when it came to doing layout on the web

56
00:02:29,520 --> 00:02:32,550
so when I refer to modern CSS layouts

57
00:02:32,550 --> 00:02:34,260
I'm talking about layouts that are built

58
00:02:34,260 --> 00:02:36,690
with Flex box with grid with the box

59
00:02:36,690 --> 00:02:38,250
alignment properties because

60
00:02:38,250 --> 00:02:40,379
conceptually these are the properties

61
00:02:40,379 --> 00:02:43,590
which were crafted especially for doing

62
00:02:43,590 --> 00:02:46,200
layout on the web they were very

63
00:02:46,200 --> 00:02:47,940
different from the prior techniques that

64
00:02:47,940 --> 00:02:51,000
we had like say you know HTML tables for

65
00:02:51,000 --> 00:02:54,120
layout or even floats because those were

66
00:02:54,120 --> 00:02:57,030
more clever uses of properties whose

67
00:02:57,030 --> 00:03:00,209
intended purpose was not for layout to

68
00:03:00,209 --> 00:03:02,580
begin with but resourceful developers

69
00:03:02,580 --> 00:03:05,069
like yourselves found plenty of

70
00:03:05,069 --> 00:03:07,409
workarounds and hacks to work with

71
00:03:07,409 --> 00:03:09,480
whatever features were available at the

72
00:03:09,480 --> 00:03:11,940
time and today we have a much more

73
00:03:11,940 --> 00:03:14,730
robust tool set for doing layouts on the

74
00:03:14,730 --> 00:03:16,290
web so the first thing I want to cover

75
00:03:16,290 --> 00:03:19,709
today is content-based sizing or what I

76
00:03:19,709 --> 00:03:22,709
call letting the browser do more now the

77
00:03:22,709 --> 00:03:24,900
concept of automatic sizing has always

78
00:03:24,900 --> 00:03:25,739
existed

79
00:03:25,739 --> 00:03:28,739
on the web I mean browsers have always

80
00:03:28,739 --> 00:03:30,690
managed to figure out how much space

81
00:03:30,690 --> 00:03:32,700
content should take up without any

82
00:03:32,700 --> 00:03:35,340
intervention from us the content just

83
00:03:35,340 --> 00:03:38,489
reflows without overlapping but what is

84
00:03:38,489 --> 00:03:40,650
introduced in this relatively newer

85
00:03:40,650 --> 00:03:43,379
CSS spec called CSS intrinsic and

86
00:03:43,379 --> 00:03:46,230
extrinsic module level three is that it

87
00:03:46,230 --> 00:03:49,260
introduces some keywords that allow us

88
00:03:49,260 --> 00:03:52,110
to apply automatic widths on to our

89
00:03:52,110 --> 00:03:54,810
elements on the page so now the sizing

90
00:03:54,810 --> 00:03:56,459
properties of width and height

91
00:03:56,459 --> 00:03:58,920
take in three additional keyword values

92
00:03:58,920 --> 00:04:01,769
namely min content max content and

93
00:04:01,769 --> 00:04:04,549
hopefully better support in the future

94
00:04:04,549 --> 00:04:06,930
content so if we look at this first

95
00:04:06,930 --> 00:04:10,860
block of content here I've sized them

96
00:04:10,860 --> 00:04:14,099
with min content and I hope you can sort

97
00:04:14,099 --> 00:04:16,620
of see I'll just pull this up a bit it's

98
00:04:16,620 --> 00:04:18,690
size with min content and min content is

99
00:04:18,690 --> 00:04:19,799
the small

100
00:04:19,799 --> 00:04:22,620
sighs that a box can take which doesn't

101
00:04:22,620 --> 00:04:25,680
lead to overflow so inline content if I

102
00:04:25,680 --> 00:04:28,050
could point your direction here you'll

103
00:04:28,050 --> 00:04:30,000
see that the inline content will break

104
00:04:30,000 --> 00:04:32,300
into multiple lines now line breaking

105
00:04:32,300 --> 00:04:34,980
has a lot more new ones than most people

106
00:04:34,980 --> 00:04:37,290
give it credit for because depending on

107
00:04:37,290 --> 00:04:39,810
the language that is being used

108
00:04:39,810 --> 00:04:42,210
on-screen min content is going to end up

109
00:04:42,210 --> 00:04:43,680
looking very differently and the lines

110
00:04:43,680 --> 00:04:45,570
will break differently as well for a lot

111
00:04:45,570 --> 00:04:47,370
of languages moans mostly the

112
00:04:47,370 --> 00:04:49,110
latin-based scripts like English or

113
00:04:49,110 --> 00:04:51,990
German line breaks will occur at word

114
00:04:51,990 --> 00:04:54,060
boundaries where spaces or punctuation

115
00:04:54,060 --> 00:04:56,490
are used to explicitly separate the

116
00:04:56,490 --> 00:04:58,800
words one key thing to note is that the

117
00:04:58,800 --> 00:05:02,700
browser will not break words so in this

118
00:05:02,700 --> 00:05:06,060
instance the word content plus the . at

119
00:05:06,060 --> 00:05:07,610
the end is treated as a single

120
00:05:07,610 --> 00:05:10,260
unbreakable entity and that is that is

121
00:05:10,260 --> 00:05:14,820
why the this particular box size the

122
00:05:14,820 --> 00:05:17,910
width ends up being the this width of

123
00:05:17,910 --> 00:05:21,750
the content plus the . but for languages

124
00:05:21,750 --> 00:05:25,350
like Chinese or Japanese the line break

125
00:05:25,350 --> 00:05:29,130
is per character usually but not always

126
00:05:29,130 --> 00:05:31,320
because there's there are rules about

127
00:05:31,320 --> 00:05:34,500
certain characters that they are not

128
00:05:34,500 --> 00:05:37,220
allowed to start or end on a line and

129
00:05:37,220 --> 00:05:40,320
East Asian languages also use something

130
00:05:40,320 --> 00:05:42,870
known as a full width punctuation so

131
00:05:42,870 --> 00:05:45,720
let's say I add a comma here so a full

132
00:05:45,720 --> 00:05:47,850
width punctuation will take up the

133
00:05:47,850 --> 00:05:50,039
amount of space as a standard square

134
00:05:50,039 --> 00:05:52,919
hand character so now the min content

135
00:05:52,919 --> 00:05:56,789
becomes 2 m/s instead of 1 now there are

136
00:05:56,789 --> 00:05:58,979
also some Southeast Asian scripts like

137
00:05:58,979 --> 00:06:02,970
thigh which do not have spaces between

138
00:06:02,970 --> 00:06:05,700
words so if you look at the second set

139
00:06:05,700 --> 00:06:07,470
of content that is sized with Max

140
00:06:07,470 --> 00:06:09,210
content and let's talk about Max content

141
00:06:09,210 --> 00:06:09,660
for a bit

142
00:06:09,660 --> 00:06:13,050
max content is a boxer's ideal size in a

143
00:06:13,050 --> 00:06:15,840
given axis when there's unlimited space

144
00:06:15,840 --> 00:06:17,669
so usually what's going to happen is

145
00:06:17,669 --> 00:06:19,410
that the content is going to take up as

146
00:06:19,410 --> 00:06:21,840
much space as required to lay itself out

147
00:06:21,840 --> 00:06:23,970
on one line without breaking so if you

148
00:06:23,970 --> 00:06:25,380
look at the thigh sentence here you'll

149
00:06:25,380 --> 00:06:28,770
notice that no spaces so if you don't

150
00:06:28,770 --> 00:06:30,450
read I and I don't know if anybody beats

151
00:06:30,450 --> 00:06:32,460
Chi in the audience you probably won't

152
00:06:32,460 --> 00:06:33,060
know

153
00:06:33,060 --> 00:06:35,790
we're where the words gonna break but

154
00:06:35,790 --> 00:06:37,500
the longest word in that sentence is

155
00:06:37,500 --> 00:06:39,930
Priok right here and that's what ends up

156
00:06:39,930 --> 00:06:42,690
being the main content of this by

157
00:06:42,690 --> 00:06:46,470
language block so now fit content if you

158
00:06:46,470 --> 00:06:48,510
can see here unfortunately it's not

159
00:06:48,510 --> 00:06:51,150
supported in the browser because if you

160
00:06:51,150 --> 00:06:53,280
look at it the inspector is gonna tell

161
00:06:53,280 --> 00:06:56,610
you oh hey sorry invalid property value

162
00:06:56,610 --> 00:07:01,110
but the content does work in a grid

163
00:07:01,110 --> 00:07:03,000
format in context and so that's what

164
00:07:03,000 --> 00:07:04,230
we're going to be looking at with these

165
00:07:04,230 --> 00:07:06,480
last three pieces of content now I've

166
00:07:06,480 --> 00:07:09,390
got three languages and fit content is

167
00:07:09,390 --> 00:07:12,150
not a fixed value like the previous two

168
00:07:12,150 --> 00:07:14,310
keywords of mean content and Max content

169
00:07:14,310 --> 00:07:17,010
it is a range where the minimum value is

170
00:07:17,010 --> 00:07:20,010
min content while the maximum value is

171
00:07:20,010 --> 00:07:23,760
either the max content value or the

172
00:07:23,760 --> 00:07:26,330
value that you put inside this function

173
00:07:26,330 --> 00:07:29,340
whichever is smaller so this makes more

174
00:07:29,340 --> 00:07:31,530
sense if I show you what's going on now

175
00:07:31,530 --> 00:07:33,170
I think it's better to look at the

176
00:07:33,170 --> 00:07:35,400
second and third because they've exactly

177
00:07:35,400 --> 00:07:38,190
the same content so if I shift this and

178
00:07:38,190 --> 00:07:39,900
we run out of space it's gonna shrink

179
00:07:39,900 --> 00:07:42,270
shrink shrink until it's the main

180
00:07:42,270 --> 00:07:46,350
content width for both but if we expand

181
00:07:46,350 --> 00:07:51,330
it it will grow until so the value that

182
00:07:51,330 --> 00:07:54,420
I've used now here is 300 pixels so it's

183
00:07:54,420 --> 00:07:56,940
going to be 300 I know it's really

184
00:07:56,940 --> 00:07:58,620
really small take my word for it that's

185
00:07:58,620 --> 00:08:03,240
300 same goes for the thigh the thigh

186
00:08:03,240 --> 00:08:06,690
content as well but if I change the fit

187
00:08:06,690 --> 00:08:09,450
content cap to something slightly larger

188
00:08:09,450 --> 00:08:12,060
I'm gonna change it to 500 and then go

189
00:08:12,060 --> 00:08:14,460
grow some more you'll notice that it

190
00:08:14,460 --> 00:08:17,310
doesn't it doesn't reach 500 it actually

191
00:08:17,310 --> 00:08:19,560
stops at the max content in this case

192
00:08:19,560 --> 00:08:23,370
it's 462 in this case it's 320 something

193
00:08:23,370 --> 00:08:26,040
so that's how these three content-based

194
00:08:26,040 --> 00:08:29,430
sizing values work now the next thing I

195
00:08:29,430 --> 00:08:31,590
want to talk about is flexbox

196
00:08:31,590 --> 00:08:33,690
you know the layout model where no one

197
00:08:33,690 --> 00:08:36,690
knows exactly the size of anything but

198
00:08:36,690 --> 00:08:39,000
hopefully I can help shed some light on

199
00:08:39,000 --> 00:08:41,760
this apparent mystery now when we we

200
00:08:41,760 --> 00:08:43,920
want to learn about flexbox Firefox

201
00:08:43,920 --> 00:08:45,660
really shines through because as of now

202
00:08:45,660 --> 00:08:46,500
it's the own

203
00:08:46,500 --> 00:08:49,140
a browser that has a flexbox inspector

204
00:08:49,140 --> 00:08:52,080
so we can find it by going to the layout

205
00:08:52,080 --> 00:08:55,020
panel and you can toggle it by clicking

206
00:08:55,020 --> 00:08:56,790
on this toggle here you can also choose

207
00:08:56,790 --> 00:08:59,880
to click on this I would call it a tag

208
00:08:59,880 --> 00:09:02,220
maybe in the inspector and what happens

209
00:09:02,220 --> 00:09:04,020
when we toggle it is that it will show

210
00:09:04,020 --> 00:09:05,760
you the outline of each of your Flex

211
00:09:05,760 --> 00:09:09,150
items and any free space available as

212
00:09:09,150 --> 00:09:11,610
this kind of a texture thing and if we

213
00:09:11,610 --> 00:09:13,860
look at the layout panel they also tell

214
00:09:13,860 --> 00:09:16,140
you the Flex direction and the wrap

215
00:09:16,140 --> 00:09:19,950
status but more importantly the Flex

216
00:09:19,950 --> 00:09:21,630
Park inspector will tell you what it

217
00:09:21,630 --> 00:09:24,360
does to flex items when they grow or

218
00:09:24,360 --> 00:09:25,800
shrink and we'll cover this in more

219
00:09:25,800 --> 00:09:28,710
detail in the next couple of examples

220
00:09:28,710 --> 00:09:30,510
and one thing I want to remind everyone

221
00:09:30,510 --> 00:09:32,610
is that the specification actually

222
00:09:32,610 --> 00:09:35,970
recommends that we use key word values

223
00:09:35,970 --> 00:09:38,310
on flex items because they cover the

224
00:09:38,310 --> 00:09:41,690
most common use cases and they reset the

225
00:09:41,690 --> 00:09:47,490
values within the three flex flex

226
00:09:47,490 --> 00:09:50,520
properties appropriately so what's going

227
00:09:50,520 --> 00:09:53,400
to happen is that these key words are

228
00:09:53,400 --> 00:09:57,420
initial none auto and a positive integer

229
00:09:57,420 --> 00:09:59,430
which gets resolved to the Flex grow

230
00:09:59,430 --> 00:10:03,570
factor so initial is the default value

231
00:10:03,570 --> 00:10:06,810
for Flex items if say I set a deal

232
00:10:06,810 --> 00:10:09,180
display flex on the parent and then I

233
00:10:09,180 --> 00:10:12,060
don't do anything to the children it

234
00:10:12,060 --> 00:10:15,180
gets a value of display flex and we can

235
00:10:15,180 --> 00:10:17,490
sort of figure out what the browser does

236
00:10:17,490 --> 00:10:19,920
when it encounters such keywords by

237
00:10:19,920 --> 00:10:21,930
going to the computer tab and then you

238
00:10:21,930 --> 00:10:24,180
turn on browser styles because these are

239
00:10:24,180 --> 00:10:25,740
styles that the browser sets we never

240
00:10:25,740 --> 00:10:28,380
explicitly set them you can filter for

241
00:10:28,380 --> 00:10:30,630
flex and what you'll find is that

242
00:10:30,630 --> 00:10:33,060
they'll tell you oh flex grow factor

243
00:10:33,060 --> 00:10:35,850
zero flex rank is one flex basis is auto

244
00:10:35,850 --> 00:10:39,200
when the Flex values initial if I change

245
00:10:39,200 --> 00:10:42,180
this to something else let's say flex

246
00:10:42,180 --> 00:10:45,120
none right which makes your flex items

247
00:10:45,120 --> 00:10:46,860
completely inflexible

248
00:10:46,860 --> 00:10:48,750
and you go back to the computer tab will

249
00:10:48,750 --> 00:10:50,430
tell you that oh now Fred flex go is

250
00:10:50,430 --> 00:10:52,740
your flex shrink is now also zero and

251
00:10:52,740 --> 00:10:55,830
auto and so on so this is pretty useful

252
00:10:55,830 --> 00:10:57,300
if you want to figure out what the

253
00:10:57,300 --> 00:10:59,400
browser's actually doing the exact

254
00:10:59,400 --> 00:11:00,240
algorithm

255
00:11:00,240 --> 00:11:03,000
the browser uses to calculate flex item

256
00:11:03,000 --> 00:11:05,610
sizing is fairly complicated but it is

257
00:11:05,610 --> 00:11:07,860
outlined in the specification if you're

258
00:11:07,860 --> 00:11:10,800
interested now I think the sizing gets

259
00:11:10,800 --> 00:11:13,200
confusing until we get a clearer

260
00:11:13,200 --> 00:11:15,000
understanding of what's going on with

261
00:11:15,000 --> 00:11:18,209
the Flex basis property specifically for

262
00:11:18,209 --> 00:11:20,279
for example if I put a fixed value of a

263
00:11:20,279 --> 00:11:22,830
hundred pixels as the Flex basis it's

264
00:11:22,830 --> 00:11:24,510
not surprising that some people will

265
00:11:24,510 --> 00:11:26,700
expect to see a box of a hundred pixels

266
00:11:26,700 --> 00:11:29,070
because we're very used to being in

267
00:11:29,070 --> 00:11:31,680
control of our sizing instructions but

268
00:11:31,680 --> 00:11:34,560
flex basis is actually the starting

269
00:11:34,560 --> 00:11:37,470
point from which the size of the box is

270
00:11:37,470 --> 00:11:39,899
calculated the key word key to remember

271
00:11:39,899 --> 00:11:42,750
here is the starting point because if

272
00:11:42,750 --> 00:11:44,279
the Flex item is allowed to grow or

273
00:11:44,279 --> 00:11:47,070
shrink odds are the final size will not

274
00:11:47,070 --> 00:11:49,680
be a hundred pixels so let's take a look

275
00:11:49,680 --> 00:11:51,779
at this next example it's a rather basic

276
00:11:51,779 --> 00:11:54,149
example and if you just look at it on

277
00:11:54,149 --> 00:11:56,160
face value it seems like the browser's

278
00:11:56,160 --> 00:11:58,800
allocating space very arbitrarily maybe

279
00:11:58,800 --> 00:12:01,380
based on content but so let's break down

280
00:12:01,380 --> 00:12:03,570
exactly what's happening so a reminder

281
00:12:03,570 --> 00:12:05,070
here is that remember the browser

282
00:12:05,070 --> 00:12:07,079
doesn't break words right so here we've

283
00:12:07,079 --> 00:12:10,380
got two Flex containers and both of them

284
00:12:10,380 --> 00:12:12,329
have a display Flex set on the parent

285
00:12:12,329 --> 00:12:14,520
container nothing on the children which

286
00:12:14,520 --> 00:12:16,920
means they have a flex value of initial

287
00:12:16,920 --> 00:12:21,600
that resolves to 0-1 and auto zero means

288
00:12:21,600 --> 00:12:24,300
that it's not gonna grow beyond whatever

289
00:12:24,300 --> 00:12:26,880
space is required so this space it won't

290
00:12:26,880 --> 00:12:28,410
grow to fill up the space and won't grow

291
00:12:28,410 --> 00:12:29,940
to fill up the space because the Flex

292
00:12:29,940 --> 00:12:32,130
grow you don't know we do not allow the

293
00:12:32,130 --> 00:12:34,050
Flex item to grow but it does have a

294
00:12:34,050 --> 00:12:36,390
flex shrink value of one which means

295
00:12:36,390 --> 00:12:39,360
that if there isn't enough space all the

296
00:12:39,360 --> 00:12:41,459
items are gonna start shrinking at the

297
00:12:41,459 --> 00:12:44,480
same rate so the moment I hit this with

298
00:12:44,480 --> 00:12:47,339
both the second and third items are

299
00:12:47,339 --> 00:12:49,649
going to start shrinking so by the time

300
00:12:49,649 --> 00:12:52,230
I hit this this sort of a layout that we

301
00:12:52,230 --> 00:12:55,140
saw just now you'll notice that the

302
00:12:55,140 --> 00:12:58,320
second item in the in the set has

303
00:12:58,320 --> 00:13:00,720
already shrunk but the one here has not

304
00:13:00,720 --> 00:13:02,910
shrunk at all and that's what that's the

305
00:13:02,910 --> 00:13:05,040
reason why even though there's exactly

306
00:13:05,040 --> 00:13:08,130
the same content the sizing is different

307
00:13:08,130 --> 00:13:12,390
now with a flex basis of auto what's

308
00:13:12,390 --> 00:13:13,160
going to happen is

309
00:13:13,160 --> 00:13:15,680
that this value resolves to content

310
00:13:15,680 --> 00:13:18,319
which is an automatic size based on the

311
00:13:18,319 --> 00:13:20,480
content within the Flex item and

312
00:13:20,480 --> 00:13:22,610
typically this is equivalent to the max

313
00:13:22,610 --> 00:13:25,310
content size so when there is no

314
00:13:25,310 --> 00:13:28,040
explicit with set on a flex item and the

315
00:13:28,040 --> 00:13:30,259
Flex basis is also set to auto the

316
00:13:30,259 --> 00:13:32,600
browser is going to use the content size

317
00:13:32,600 --> 00:13:35,120
as the starting point to calculate the

318
00:13:35,120 --> 00:13:38,240
width of the Flex item but if you have

319
00:13:38,240 --> 00:13:40,339
an explicit with set so I'm gonna do

320
00:13:40,339 --> 00:13:43,459
that for this particular item I'm gonna

321
00:13:43,459 --> 00:13:49,310
set a width of 200 the width becomes the

322
00:13:49,310 --> 00:13:52,279
starting point for the for the

323
00:13:52,279 --> 00:13:54,350
calculation of the Flex item and the

324
00:13:54,350 --> 00:13:56,089
flexbox inspector will tell you this it

325
00:13:56,089 --> 00:13:57,139
will tell you oh hey

326
00:13:57,139 --> 00:14:01,339
base size 200 but if I have an explicit

327
00:14:01,339 --> 00:14:06,439
Flex basis set 0 1 300 this time then

328
00:14:06,439 --> 00:14:08,990
the Flex basis takes precedent trumps

329
00:14:08,990 --> 00:14:11,209
everything and now you'll tell you that

330
00:14:11,209 --> 00:14:14,600
oh the starting size now is 300 instead

331
00:14:14,600 --> 00:14:17,300
so that's basically how it works now if

332
00:14:17,300 --> 00:14:18,680
you look at this the first column

333
00:14:18,680 --> 00:14:20,420
naturally cannot shrink anymore because

334
00:14:20,420 --> 00:14:22,519
you know that's the main content of word

335
00:14:22,519 --> 00:14:27,410
but if we shrink both items will start

336
00:14:27,410 --> 00:14:29,230
to shrink together but eventually

337
00:14:29,230 --> 00:14:31,430
because there's exactly the same amount

338
00:14:31,430 --> 00:14:33,199
of content in both the second both

339
00:14:33,199 --> 00:14:35,029
second items they end up being the same

340
00:14:35,029 --> 00:14:38,410
main content at the end of the day and

341
00:14:38,410 --> 00:14:41,029
the next the next bit I want to explain

342
00:14:41,029 --> 00:14:43,790
is the difference between a Flex basis

343
00:14:43,790 --> 00:14:50,240
of OTO and a Flex basis of 0 because the

344
00:14:50,240 --> 00:14:52,639
B this results in the size of your Flex

345
00:14:52,639 --> 00:14:54,860
items behaving rather differently so now

346
00:14:54,860 --> 00:14:56,809
again I have two sets of 3 items but

347
00:14:56,809 --> 00:14:59,000
this time they both they have the same

348
00:14:59,000 --> 00:15:02,779
content they match in content both sets

349
00:15:02,779 --> 00:15:04,910
of Flex items are allowed to grow and

350
00:15:04,910 --> 00:15:08,149
shrink except that they get different

351
00:15:08,149 --> 00:15:11,540
growth factors so for the first item the

352
00:15:11,540 --> 00:15:14,180
grow factor is 1 the second item growth

353
00:15:14,180 --> 00:15:16,160
factor is 2 third item growth factor is

354
00:15:16,160 --> 00:15:19,129
0 same goes for the second set the

355
00:15:19,129 --> 00:15:21,319
distinction is that Flex basis is auto

356
00:15:21,319 --> 00:15:24,649
for the first set Flex basis is 0 for

357
00:15:24,649 --> 00:15:27,050
the second set so what happens now

358
00:15:27,050 --> 00:15:30,950
is that the available free space is for

359
00:15:30,950 --> 00:15:34,190
the first set of items is calculated

360
00:15:34,190 --> 00:15:37,930
from the total width of the container -

361
00:15:37,930 --> 00:15:40,580
the width of the content in all three

362
00:15:40,580 --> 00:15:43,790
items so this bit of space here and this

363
00:15:43,790 --> 00:15:46,010
bit of space here is the available free

364
00:15:46,010 --> 00:15:48,050
space so this is easier to look at

365
00:15:48,050 --> 00:15:51,500
numbers in this instance so when I when

366
00:15:51,500 --> 00:15:54,500
we select this it tells us that oh some

367
00:15:54,500 --> 00:15:57,800
the Flex item has grown and it has grown

368
00:15:57,800 --> 00:16:02,000
by say about 71.5%

369
00:16:02,000 --> 00:16:04,100
pixels so there's some sub pixel

370
00:16:04,100 --> 00:16:06,079
rounding error so it may not be exactly

371
00:16:06,079 --> 00:16:08,750
exact but you know 0.1 pixels I think is

372
00:16:08,750 --> 00:16:10,790
fine so this is the first this is the

373
00:16:10,790 --> 00:16:12,170
amount of free space that the browser

374
00:16:12,170 --> 00:16:14,630
gave the first item if you look at the

375
00:16:14,630 --> 00:16:18,019
second item it's about 142 143 so it's

376
00:16:18,019 --> 00:16:20,120
exactly double the amount of free space

377
00:16:20,120 --> 00:16:22,899
given but if you look at the final size

378
00:16:22,899 --> 00:16:26,570
it's about 300 to 400 so it's they are

379
00:16:26,570 --> 00:16:29,329
not double of each other if you'd like

380
00:16:29,329 --> 00:16:31,790
the effect of having a flex item that is

381
00:16:31,790 --> 00:16:33,980
double oven and another you'll have to

382
00:16:33,980 --> 00:16:36,260
set the Flex basis to zero which is

383
00:16:36,260 --> 00:16:38,329
what's going to happen in this second

384
00:16:38,329 --> 00:16:41,149
set here when you set the Flex basis to

385
00:16:41,149 --> 00:16:44,390
zero content size is zero so the amount

386
00:16:44,390 --> 00:16:46,040
of free space that the browser starts

387
00:16:46,040 --> 00:16:49,160
allocating is actually the width of all

388
00:16:49,160 --> 00:16:51,709
three the width of the total container -

389
00:16:51,709 --> 00:16:52,640
whatever

390
00:16:52,640 --> 00:16:54,560
main content width is for this

391
00:16:54,560 --> 00:16:58,640
particular third item because that's the

392
00:16:58,640 --> 00:17:00,680
amount that's as small as it's gonna get

393
00:17:00,680 --> 00:17:02,990
the browser's not gonna not gonna break

394
00:17:02,990 --> 00:17:05,720
words so free space is calculated here

395
00:17:05,720 --> 00:17:08,630
and all of this space is up for grabs

396
00:17:08,630 --> 00:17:11,209
so if you look at this it the

397
00:17:11,209 --> 00:17:14,689
flexibility the Flex grow is 300 and

398
00:17:14,689 --> 00:17:18,280
about 314 and for the second item it's

399
00:17:18,280 --> 00:17:22,220
628 so this is exactly double of the

400
00:17:22,220 --> 00:17:23,839
first item so if that's the effect

401
00:17:23,839 --> 00:17:25,550
you're looking for you probably have to

402
00:17:25,550 --> 00:17:28,490
look out for your Flex basis and that's

403
00:17:28,490 --> 00:17:29,750
that's something that I wanted to

404
00:17:29,750 --> 00:17:32,510
clarify another thing another useful

405
00:17:32,510 --> 00:17:35,030
thing with these new modern layouts is

406
00:17:35,030 --> 00:17:37,220
the ability to use box alignment

407
00:17:37,220 --> 00:17:39,820
properties to align items

408
00:17:39,820 --> 00:17:41,920
again we're gonna turn on the Flex

409
00:17:41,920 --> 00:17:43,810
overlay so we can see what's going on

410
00:17:43,810 --> 00:17:48,460
turn it um and the flexbox inspector

411
00:17:48,460 --> 00:17:50,410
again allows us to visualize the space

412
00:17:50,410 --> 00:17:53,590
and how it the free space is distributed

413
00:17:53,590 --> 00:17:56,260
among the items so box alignment

414
00:17:56,260 --> 00:17:58,210
properties were actually meant to be

415
00:17:58,210 --> 00:18:00,220
used across layout models even though

416
00:18:00,220 --> 00:18:02,440
for now they're only applicable for flex

417
00:18:02,440 --> 00:18:04,480
and grid it's written in the spec that

418
00:18:04,480 --> 00:18:06,820
eventually block formatting contexts can

419
00:18:06,820 --> 00:18:09,010
also use them so look out for something

420
00:18:09,010 --> 00:18:11,020
like this in the future hopefully now my

421
00:18:11,020 --> 00:18:13,960
trick for remembering which properties

422
00:18:13,960 --> 00:18:18,010
I'll apply to each axis is that I

423
00:18:18,010 --> 00:18:20,350
personally I associate the word justify

424
00:18:20,350 --> 00:18:24,580
with like text processing text editors

425
00:18:24,580 --> 00:18:26,590
like Microsoft Word where they got those

426
00:18:26,590 --> 00:18:29,560
four icons in the toolbar and that used

427
00:18:29,560 --> 00:18:31,480
first to shift text around in a

428
00:18:31,480 --> 00:18:34,300
horizontal axis so for a language like

429
00:18:34,300 --> 00:18:37,180
say English or German when I see justify

430
00:18:37,180 --> 00:18:38,950
I think oh that's the direction that

431
00:18:38,950 --> 00:18:40,660
text flows and because they're only two

432
00:18:40,660 --> 00:18:43,120
axes right so naturally the other word

433
00:18:43,120 --> 00:18:45,430
which is a line goes along the vertical

434
00:18:45,430 --> 00:18:47,560
axis that really helped me remember who

435
00:18:47,560 --> 00:18:49,300
will help maybe it helps you remember I

436
00:18:49,300 --> 00:18:51,520
don't know but when we're using flexbox

437
00:18:51,520 --> 00:18:53,680
only four out of the six available

438
00:18:53,680 --> 00:18:55,600
alignment properties are available

439
00:18:55,600 --> 00:18:58,480
because justify items and justify self

440
00:18:58,480 --> 00:18:59,440
do not apply

441
00:18:59,440 --> 00:19:02,080
they are meant to justify a box within

442
00:19:02,080 --> 00:19:03,850
its containing block along the main axis

443
00:19:03,850 --> 00:19:06,250
but when you have a flex formatting

444
00:19:06,250 --> 00:19:08,410
context this more than one item in the

445
00:19:08,410 --> 00:19:10,720
main axis so it's a really work what we

446
00:19:10,720 --> 00:19:13,270
can use though is justify content so

447
00:19:13,270 --> 00:19:15,940
what justify content does is that it

448
00:19:15,940 --> 00:19:18,340
allows us to adjust the Flex items along

449
00:19:18,340 --> 00:19:20,260
the main axis so in this particular

450
00:19:20,260 --> 00:19:21,970
instance is the horizontal axis and

451
00:19:21,970 --> 00:19:25,060
there are two categories of values so

452
00:19:25,060 --> 00:19:28,510
we've got things like Center and and

453
00:19:28,510 --> 00:19:30,670
these start Center and end these are

454
00:19:30,670 --> 00:19:33,550
positional keywords which adjust the

455
00:19:33,550 --> 00:19:35,680
Flex children's absolute position within

456
00:19:35,680 --> 00:19:38,470
the Flex container and then we we also

457
00:19:38,470 --> 00:19:41,860
have the space set space around space

458
00:19:41,860 --> 00:19:44,260
between and space evenly and these

459
00:19:44,260 --> 00:19:46,750
disperse the extra space between the

460
00:19:46,750 --> 00:19:49,690
Flex children now when it comes to the

461
00:19:49,690 --> 00:19:52,720
cross axis or the vertical axis

462
00:19:52,720 --> 00:19:56,060
the items are stretched to the full

463
00:19:56,060 --> 00:19:57,740
height of a flex line the moment you

464
00:19:57,740 --> 00:20:00,350
apply a display flex on the parent so

465
00:20:00,350 --> 00:20:01,550
this is these are not the original

466
00:20:01,550 --> 00:20:03,800
heights of my items if I want to see

467
00:20:03,800 --> 00:20:05,990
what the original heights are I'm gonna

468
00:20:05,990 --> 00:20:09,860
apply a turn this off gonna apply a

469
00:20:09,860 --> 00:20:11,390
align items

470
00:20:11,390 --> 00:20:15,170
property let's do end these are actually

471
00:20:15,170 --> 00:20:18,410
the original heights of my elements

472
00:20:18,410 --> 00:20:21,020
right and one interesting value that I

473
00:20:21,020 --> 00:20:23,030
don't see used very often is baseline

474
00:20:23,030 --> 00:20:26,000
because if you have something like what

475
00:20:26,000 --> 00:20:27,890
I have here it's a variety of sizes

476
00:20:27,890 --> 00:20:30,020
variety alignments a variety of font

477
00:20:30,020 --> 00:20:32,390
sizes you see that the text is kind of

478
00:20:32,390 --> 00:20:35,120
like mountainous and it's pretty hard to

479
00:20:35,120 --> 00:20:39,170
read so if you have say text within flex

480
00:20:39,170 --> 00:20:41,000
items that are related to each other and

481
00:20:41,000 --> 00:20:43,700
you want your audience to say comprehend

482
00:20:43,700 --> 00:20:45,620
something from the words you could

483
00:20:45,620 --> 00:20:47,540
consider using baseline and it makes

484
00:20:47,540 --> 00:20:49,550
everything a bit more readable I thought

485
00:20:49,550 --> 00:20:51,080
this property this value was

486
00:20:51,080 --> 00:20:53,750
particularly interesting and one more

487
00:20:53,750 --> 00:20:57,020
thing is align content so what you can

488
00:20:57,020 --> 00:21:01,820
do is say your Flex container is larger

489
00:21:01,820 --> 00:21:03,980
than the size of your Flex lines I'm

490
00:21:03,980 --> 00:21:06,740
just put an arbitrary value of say 90 V

491
00:21:06,740 --> 00:21:10,100
H right so you're gonna get these

492
00:21:10,100 --> 00:21:13,640
unsightly gaps and what the aligned

493
00:21:13,640 --> 00:21:15,920
content property does is that it allows

494
00:21:15,920 --> 00:21:18,800
us to pack the Flex lines so if I set a

495
00:21:18,800 --> 00:21:22,670
value of say star it sort of packs all

496
00:21:22,670 --> 00:21:24,590
your flex lines up to each other if

497
00:21:24,590 --> 00:21:26,360
that's the effect that you want and then

498
00:21:26,360 --> 00:21:27,920
you can sort of shift the entire block

499
00:21:27,920 --> 00:21:31,940
along your Flex container as well so

500
00:21:31,940 --> 00:21:33,800
these flex a lot these box alignment

501
00:21:33,800 --> 00:21:35,840
properties are really handy when it

502
00:21:35,840 --> 00:21:38,360
comes to aligning boxes along a vertical

503
00:21:38,360 --> 00:21:39,920
axis which is something that was really

504
00:21:39,920 --> 00:21:42,890
challenging in the past and now let's

505
00:21:42,890 --> 00:21:45,590
cover some common use cases this is I

506
00:21:45,590 --> 00:21:47,840
know this is probably an example that

507
00:21:47,840 --> 00:21:50,750
everyone has shown but I want to show it

508
00:21:50,750 --> 00:21:52,160
because I really like it and that is

509
00:21:52,160 --> 00:21:54,440
Ottomans again they are your friend if

510
00:21:54,440 --> 00:21:57,470
you had one item in your Flex container

511
00:21:57,470 --> 00:22:01,040
instead of using the box alignment

512
00:22:01,040 --> 00:22:03,200
properties you can just set a margin of

513
00:22:03,200 --> 00:22:06,260
auto to Center it one line

514
00:22:06,260 --> 00:22:07,940
your problems because unlike in the

515
00:22:07,940 --> 00:22:10,220
current implementation of margins in a

516
00:22:10,220 --> 00:22:12,020
block formating context using margin

517
00:22:12,020 --> 00:22:15,320
auto well center the item vertically as

518
00:22:15,320 --> 00:22:19,340
well and if you have an additional item

519
00:22:19,340 --> 00:22:25,820
so let me replicate box in box and when

520
00:22:25,820 --> 00:22:27,530
I highlight it you'll notice that it too

521
00:22:27,530 --> 00:22:30,650
has an equal amount of margin around it

522
00:22:30,650 --> 00:22:34,250
right so this is potentially an easy way

523
00:22:34,250 --> 00:22:36,200
of sort of aligning your stuff like

524
00:22:36,200 --> 00:22:38,840
centering your items now more common a

525
00:22:38,840 --> 00:22:40,580
more practical use case I would say is

526
00:22:40,580 --> 00:22:42,290
like a navigation bar where sometimes

527
00:22:42,290 --> 00:22:44,870
you need in this end link all on its

528
00:22:44,870 --> 00:22:47,450
lows lonesome on the right and rather

529
00:22:47,450 --> 00:22:49,040
than struggling with you know floating

530
00:22:49,040 --> 00:22:51,410
left floating white right whatever you

531
00:22:51,410 --> 00:22:54,050
can just use a margin-left:auto to kick

532
00:22:54,050 --> 00:22:56,120
it all the way to the right and call it

533
00:22:56,120 --> 00:22:59,210
a day you can also make use of the

534
00:22:59,210 --> 00:23:00,530
alignment properties to make sure

535
00:23:00,530 --> 00:23:02,660
everything is centered vertically so

536
00:23:02,660 --> 00:23:04,790
it's like a two line maybe three line

537
00:23:04,790 --> 00:23:07,340
fix for a very common design use case

538
00:23:07,340 --> 00:23:09,950
and then there's also this cut cut style

539
00:23:09,950 --> 00:23:11,870
layouts because you know everyone likes

540
00:23:11,870 --> 00:23:14,570
to design cars these days Rachel did a

541
00:23:14,570 --> 00:23:19,760
very expensive demo earlier so my point

542
00:23:19,760 --> 00:23:21,890
here is just that you can change the

543
00:23:21,890 --> 00:23:24,500
Flex direction whenever necessary so for

544
00:23:24,500 --> 00:23:26,660
example this car I've set the Flex

545
00:23:26,660 --> 00:23:29,510
direction to column and if you like this

546
00:23:29,510 --> 00:23:32,300
button to sort of kiss the bottom of the

547
00:23:32,300 --> 00:23:34,010
container what you do is that you would

548
00:23:34,010 --> 00:23:37,040
want to grow your main content and then

549
00:23:37,040 --> 00:23:40,360
that works of course like Rachel said

550
00:23:40,360 --> 00:23:42,590
it's probably better to just use sub

551
00:23:42,590 --> 00:23:44,900
grid but if you can't use some green

552
00:23:44,900 --> 00:23:47,210
then this is potentially a good solution

553
00:23:47,210 --> 00:23:51,950
for another common design that we have

554
00:23:51,950 --> 00:23:54,200
to build most of the time in our day

555
00:23:54,200 --> 00:23:56,900
jobs and now I think I'm running out of

556
00:23:56,900 --> 00:23:58,670
time so moving on to the next thing I

557
00:23:58,670 --> 00:24:00,350
want to talk about this rather

558
00:24:00,350 --> 00:24:01,970
fascinating thing that I discovered when

559
00:24:01,970 --> 00:24:04,460
I was playing around with CSS modern CSS

560
00:24:04,460 --> 00:24:06,710
layouts is that flexible sizing or what

561
00:24:06,710 --> 00:24:10,700
I call responsive design powered up it's

562
00:24:10,700 --> 00:24:13,490
we've covered some flexible sizing units

563
00:24:13,490 --> 00:24:15,080
when we talk about flex and all these

564
00:24:15,080 --> 00:24:18,050
sizing units are also available in grid

565
00:24:18,050 --> 00:24:18,600
and

566
00:24:18,600 --> 00:24:20,429
what green also introduced us is this

567
00:24:20,429 --> 00:24:22,799
thing called fr unit which is a fraction

568
00:24:22,799 --> 00:24:24,840
of free space it also introduces a

569
00:24:24,840 --> 00:24:26,940
min/max function which is a range of

570
00:24:26,940 --> 00:24:29,789
values so with this with Fr with min Max

571
00:24:29,789 --> 00:24:32,970
with fit content and auto we now have a

572
00:24:32,970 --> 00:24:36,830
set of values that allow us to have

573
00:24:36,830 --> 00:24:40,200
variable rates of change previously what

574
00:24:40,200 --> 00:24:41,880
we've done is we've always used relative

575
00:24:41,880 --> 00:24:44,039
units like percentages or maybe the

576
00:24:44,039 --> 00:24:46,500
newer viewport units but the limitation

577
00:24:46,500 --> 00:24:48,030
is that they make all your elements

578
00:24:48,030 --> 00:24:50,880
change size at the same rate so I'm

579
00:24:50,880 --> 00:24:53,700
gonna show an example so this is a this

580
00:24:53,700 --> 00:24:55,500
is something that size with percentages

581
00:24:55,500 --> 00:24:58,799
so the width of my cat picture is 65

582
00:24:58,799 --> 00:25:00,690
percent while the width of the content

583
00:25:00,690 --> 00:25:03,480
is 35 percent it kind of only works well

584
00:25:03,480 --> 00:25:06,090
within a very limited range so from here

585
00:25:06,090 --> 00:25:08,850
to maybe here it's kind of okay but if

586
00:25:08,850 --> 00:25:10,679
you go any smaller than like you know

587
00:25:10,679 --> 00:25:12,870
the image is too small the words are

588
00:25:12,870 --> 00:25:14,520
weird and then when you go big like no

589
00:25:14,520 --> 00:25:16,110
the image is too big the words are too

590
00:25:16,110 --> 00:25:19,559
small so this is kind of a limitation of

591
00:25:19,559 --> 00:25:22,530
having the same rate of change for all

592
00:25:22,530 --> 00:25:23,130
your items

593
00:25:23,130 --> 00:25:26,100
so what flexible sizing I find extremely

594
00:25:26,100 --> 00:25:28,590
interesting is so to explain it I'm

595
00:25:28,590 --> 00:25:31,049
gonna do some isolated use cases so

596
00:25:31,049 --> 00:25:34,620
first thing let's compare our units

597
00:25:34,620 --> 00:25:38,460
versus auto now because rachel has

598
00:25:38,460 --> 00:25:40,799
already covered how useful the grid

599
00:25:40,799 --> 00:25:42,510
inspector is so I just want to reiterate

600
00:25:42,510 --> 00:25:44,309
her point this morning is that if you're

601
00:25:44,309 --> 00:25:45,720
going to be playing around with grid

602
00:25:45,720 --> 00:25:47,309
whether you're just starting out or

603
00:25:47,309 --> 00:25:49,169
you're already using it for production

604
00:25:49,169 --> 00:25:53,309
you know Firefox probably is your best

605
00:25:53,309 --> 00:25:56,460
bet because of the grid inspector and

606
00:25:56,460 --> 00:25:58,169
again you can toggle it by clicking the

607
00:25:58,169 --> 00:26:00,840
grid tag or you can go to the layout and

608
00:26:00,840 --> 00:26:03,000
that's where you get to select because I

609
00:26:03,000 --> 00:26:05,250
have tons of grids you get to select

610
00:26:05,250 --> 00:26:07,409
multiple grids if if you're using

611
00:26:07,409 --> 00:26:09,270
nestande grids or like multiple grids on

612
00:26:09,270 --> 00:26:10,890
the same page this is pretty useful for

613
00:26:10,890 --> 00:26:14,220
you to check so that's the inspector but

614
00:26:14,220 --> 00:26:15,809
now we're actually going to talk about

615
00:26:15,809 --> 00:26:18,539
how these variable sizing units behave

616
00:26:18,539 --> 00:26:23,039
so green this is the legend green SFR

617
00:26:23,039 --> 00:26:27,000
blue is auto and like I mentioned fr is

618
00:26:27,000 --> 00:26:29,580
a fraction of left over space in a grid

619
00:26:29,580 --> 00:26:31,559
container so whenever there is extra

620
00:26:31,559 --> 00:26:32,180
space

621
00:26:32,180 --> 00:26:34,730
anything sighs with Fr is gonna take all

622
00:26:34,730 --> 00:26:37,340
the content first but it's also the

623
00:26:37,340 --> 00:26:40,460
first to have space taken away when

624
00:26:40,460 --> 00:26:44,780
there's not enough space Otto will take

625
00:26:44,780 --> 00:26:46,970
up as much space as necessary without

626
00:26:46,970 --> 00:26:49,130
breaking lines so it's kind of like max

627
00:26:49,130 --> 00:26:51,920
content but not as rigid so both of

628
00:26:51,920 --> 00:26:54,850
these values they actually do take up

629
00:26:54,850 --> 00:26:57,620
free space when it is available now the

630
00:26:57,620 --> 00:26:59,180
difference you can see the difference

631
00:26:59,180 --> 00:27:02,350
when they're there they work together so

632
00:27:02,350 --> 00:27:05,270
when there's fr fr takes up all the

633
00:27:05,270 --> 00:27:07,580
available space and Otto just you know

634
00:27:07,580 --> 00:27:09,980
stays in its own lane like max content

635
00:27:09,980 --> 00:27:12,020
and that's fine when there's not enough

636
00:27:12,020 --> 00:27:13,730
space however so now I'm referring to

637
00:27:13,730 --> 00:27:17,270
this third set of content fr is gonna

638
00:27:17,270 --> 00:27:19,340
shrink first it's gonna keep shrinking

639
00:27:19,340 --> 00:27:22,100
until it hits its minimum size before

640
00:27:22,100 --> 00:27:24,410
space starts taking getting taken away

641
00:27:24,410 --> 00:27:27,920
from Otto so that's the difference in

642
00:27:27,920 --> 00:27:29,210
the behavior at the end of the day they

643
00:27:29,210 --> 00:27:31,310
all still shrink to a minimum size of

644
00:27:31,310 --> 00:27:34,760
main content but the Otto will hold its

645
00:27:34,760 --> 00:27:37,280
width while all the free space is

646
00:27:37,280 --> 00:27:40,130
absorbed and taken away by fr sized

647
00:27:40,130 --> 00:27:42,860
columns first that's the one thing to

648
00:27:42,860 --> 00:27:45,620
keep in mind the second set of values

649
00:27:45,620 --> 00:27:47,570
that I want to compare is actually fit

650
00:27:47,570 --> 00:27:50,120
content and min content so again it's

651
00:27:50,120 --> 00:27:53,810
orange versus gold so fit content and

652
00:27:53,810 --> 00:27:56,090
min max actually behave very similarly

653
00:27:56,090 --> 00:27:58,220
in that they are both a range of values

654
00:27:58,220 --> 00:28:01,340
with a minimum and a maximum limit so

655
00:28:01,340 --> 00:28:03,410
min max takes two arguments as you can

656
00:28:03,410 --> 00:28:05,870
see here I've set it to a minimum size

657
00:28:05,870 --> 00:28:08,960
of 200 a maximum size of 400 and we've

658
00:28:08,960 --> 00:28:10,580
also covered what fit content does

659
00:28:10,580 --> 00:28:12,620
earlier so I'm not gonna talk about that

660
00:28:12,620 --> 00:28:15,650
so let's just do this resizing thing

661
00:28:15,650 --> 00:28:17,900
again because isn't this what everybody

662
00:28:17,900 --> 00:28:19,730
does now I'm just kidding so when

663
00:28:19,730 --> 00:28:21,620
there's a lot of space fr just takes up

664
00:28:21,620 --> 00:28:22,970
everything I think we've already

665
00:28:22,970 --> 00:28:26,780
established that but when there isn't

666
00:28:26,780 --> 00:28:29,000
enough space again fr is the first to

667
00:28:29,000 --> 00:28:31,820
lose content now if we look at the first

668
00:28:31,820 --> 00:28:34,340
example you'll notice that the moment fr

669
00:28:34,340 --> 00:28:38,630
is done shrinking Auto and fit content

670
00:28:38,630 --> 00:28:42,260
shrink at the same way so essentially

671
00:28:42,260 --> 00:28:44,570
they behave very similarly it's the same

672
00:28:44,570 --> 00:28:45,530
rate

673
00:28:45,530 --> 00:28:47,750
but if you look at the second set where

674
00:28:47,750 --> 00:28:50,900
this gold box is min content and then

675
00:28:50,900 --> 00:28:54,320
it's Auto infant content so I'm going to

676
00:28:54,320 --> 00:28:58,550
do this a bit slowly Auto will auto had

677
00:28:58,550 --> 00:29:00,020
more space hadn't had free space

678
00:29:00,020 --> 00:29:01,670
allocated to it so it's gonna give it up

679
00:29:01,670 --> 00:29:04,570
first give up give up give up give up

680
00:29:04,570 --> 00:29:09,500
when you hit they both they don't shrink

681
00:29:09,500 --> 00:29:10,220
anymore

682
00:29:10,220 --> 00:29:12,920
space starts getting taken away from min

683
00:29:12,920 --> 00:29:15,080
Max because min max is arranged between

684
00:29:15,080 --> 00:29:17,360
400 and 200 so it can move between those

685
00:29:17,360 --> 00:29:20,090
those values it gets taken away but at

686
00:29:20,090 --> 00:29:22,910
some point auto and fit content also

687
00:29:22,910 --> 00:29:25,700
start shrinking specifically what this

688
00:29:25,700 --> 00:29:27,830
point is I can't tell you but what I can

689
00:29:27,830 --> 00:29:29,390
tell you is that all three of these

690
00:29:29,390 --> 00:29:31,670
items are going to hit their minimum

691
00:29:31,670 --> 00:29:35,810
size at the same time so the moment it

692
00:29:35,810 --> 00:29:41,090
goes goes goes hit at the same time so

693
00:29:41,090 --> 00:29:44,900
the the minimum size is 200 so just to

694
00:29:44,900 --> 00:29:47,750
prove a point it is 200 and min content

695
00:29:47,750 --> 00:29:49,310
so I found this really really

696
00:29:49,310 --> 00:29:51,890
interesting and it's the same it's the

697
00:29:51,890 --> 00:29:54,050
same case if you compare Auto and min

698
00:29:54,050 --> 00:29:57,370
Max min max with fit it's the fact that

699
00:29:57,370 --> 00:30:01,550
they behave similarly but there is a

700
00:30:01,550 --> 00:30:05,120
variable weight of change now in a

701
00:30:05,120 --> 00:30:07,640
growth this is in a shrink scenario in a

702
00:30:07,640 --> 00:30:09,410
growth scenario when there's a lot of

703
00:30:09,410 --> 00:30:11,930
space fit content is going to end up

704
00:30:11,930 --> 00:30:15,080
getting capped at its maximum max

705
00:30:15,080 --> 00:30:17,480
content size or whatever's inside fit

706
00:30:17,480 --> 00:30:19,310
content for this particular example it's

707
00:30:19,310 --> 00:30:22,010
max content size because do we like

708
00:30:22,010 --> 00:30:24,170
boxers doesn't make up 200 pixels that's

709
00:30:24,170 --> 00:30:25,120
fine

710
00:30:25,120 --> 00:30:27,260
but if we look back at the second

711
00:30:27,260 --> 00:30:31,790
example as we grow the moment we hit the

712
00:30:31,790 --> 00:30:35,240
cap fit content stops because it's said

713
00:30:35,240 --> 00:30:38,630
what Auto does is that it will hit its

714
00:30:38,630 --> 00:30:40,940
max content width and then again it will

715
00:30:40,940 --> 00:30:43,940
pause growing let min max finish going

716
00:30:43,940 --> 00:30:46,790
to 400 before it starts taking all the

717
00:30:46,790 --> 00:30:49,310
additional space so I think this is a

718
00:30:49,310 --> 00:30:50,930
very interesting behavior that we've

719
00:30:50,930 --> 00:30:52,850
never seen before this is something that

720
00:30:52,850 --> 00:30:54,780
is relatively new

721
00:30:54,780 --> 00:30:57,240
and I think there are a lot of

722
00:30:57,240 --> 00:31:00,500
possibilities when it comes to more

723
00:31:00,500 --> 00:31:03,360
editorial design because it allows us to

724
00:31:03,360 --> 00:31:06,630
do designs that adapt better to a wider

725
00:31:06,630 --> 00:31:09,510
range of viewport sizes so here I have

726
00:31:09,510 --> 00:31:12,660
an example like maybe feature article

727
00:31:12,660 --> 00:31:16,350
and this first bit is percentage sized

728
00:31:16,350 --> 00:31:20,370
the bottom bit uses the newer like

729
00:31:20,370 --> 00:31:22,950
variable sizing units or as I call them

730
00:31:22,950 --> 00:31:25,530
they look fine at this width but the

731
00:31:25,530 --> 00:31:27,300
moment you start to shrink and you hit

732
00:31:27,300 --> 00:31:29,760
more extreme widths you can start to see

733
00:31:29,760 --> 00:31:31,350
that this ends up having the same

734
00:31:31,350 --> 00:31:33,570
problem as the cat example where you

735
00:31:33,570 --> 00:31:36,510
know it doesn't work very well it image

736
00:31:36,510 --> 00:31:39,360
to small content you squashed but if we

737
00:31:39,360 --> 00:31:41,970
just have the ones that is sized with

738
00:31:41,970 --> 00:31:44,580
the newest CSS properties here it's a

739
00:31:44,580 --> 00:31:46,830
grid right okay and you can sort of see

740
00:31:46,830 --> 00:31:48,900
the code it's not that straightforward

741
00:31:48,900 --> 00:31:52,530
but what happens is that it functions a

742
00:31:52,530 --> 00:31:54,810
lot better at the more extreme with

743
00:31:54,810 --> 00:31:57,150
because of this variable sizing behavior

744
00:31:57,150 --> 00:32:00,150
and also a grid makes it very easy to do

745
00:32:00,150 --> 00:32:02,940
overlap so this having a title overlap

746
00:32:02,940 --> 00:32:04,890
your image is a very trivial thing to do

747
00:32:04,890 --> 00:32:09,030
if you're using grid and so I'm very

748
00:32:09,030 --> 00:32:10,740
excited for all of this stuff that I

749
00:32:10,740 --> 00:32:12,150
just mentioned to become more mainstream

750
00:32:12,150 --> 00:32:15,660
and to have more you know designers and

751
00:32:15,660 --> 00:32:17,910
developers start considering the

752
00:32:17,910 --> 00:32:20,670
possibilities in their design so if

753
00:32:20,670 --> 00:32:23,130
you're still on the fence in using any

754
00:32:23,130 --> 00:32:25,980
of these newer CSS layout properties my

755
00:32:25,980 --> 00:32:29,670
message to you is just do it thank you

756
00:32:29,670 --> 00:32:33,950
very much

757
00:32:33,960 --> 00:32:35,130
you

