1
00:00:00,320 --> 00:00:02,070

[Music]

2
00:00:02,070 --> 00:00:03,840
[Applause]

3
00:00:03,840 --> 00:00:05,660
[Music]

4
00:00:05,660 --> 00:00:07,410
[Applause]

5
00:00:07,410 --> 00:00:09,280
[Music]

6
00:00:09,280 --> 00:00:11,020
[Applause]

7
00:00:11,020 --> 00:00:12,780
[Music]

8
00:00:12,780 --> 00:00:16,860
[Applause]

9
00:00:16,870 --> 00:00:22,230
[Music]

10
00:00:22,230 --> 00:00:26,619
hey everybody welcome to track B again

11
00:00:26,619 --> 00:00:28,480
I'm Sonia and I'm really excited we have

12
00:00:28,480 --> 00:00:31,180
Jeff Hoffer here today give our our next

13
00:00:31,180 --> 00:00:33,399
talk I'm really excited about it when I

14
00:00:33,399 --> 00:00:35,559
was chatting well we asked you know Jeff

15
00:00:35,559 --> 00:00:37,540
to share with us some something that you

16
00:00:37,540 --> 00:00:39,160
know people might not know about him and

17
00:00:39,160 --> 00:00:42,219
he he mentioned that he is a really loud

18
00:00:42,219 --> 00:00:45,490
clapper so when I heard this I was like

19
00:00:45,490 --> 00:00:48,640
I also am a really loud clapper so

20
00:00:48,640 --> 00:00:50,620
obviously we have to have a clap off

21
00:00:50,620 --> 00:00:52,239
right all right are you ready

22
00:00:52,239 --> 00:00:53,860
we both practiced a little bit yesterday

23
00:00:53,860 --> 00:00:57,670
so so you ready you want to go first why

24
00:00:57,670 --> 00:00:58,540
do I have to go first

25
00:00:58,540 --> 00:00:59,890
I mean I was gonna just gonna give you

26
00:00:59,890 --> 00:01:01,600
the honor you're our guest here ladies

27
00:01:01,600 --> 00:01:01,989
first

28
00:01:01,989 --> 00:01:03,970
all right all right all right okay all

29
00:01:03,970 --> 00:01:05,890
right it's about Palm death and moisture

30
00:01:05,890 --> 00:01:08,320
okay so there's there she's thought

31
00:01:08,320 --> 00:01:09,969
about this a lot more than I I really

32
00:01:09,969 --> 00:01:17,950
have so it's pretty loud all right all

33
00:01:17,950 --> 00:01:20,049
right maybe I should have gone first I'm

34
00:01:20,049 --> 00:01:27,100
stressing now mine's more like an

35
00:01:27,100 --> 00:01:33,140
audience applause clap thank you for you

36
00:01:33,140 --> 00:01:38,990
[Applause]

37
00:01:39,000 --> 00:01:41,080
exceptional claps I think we have some

38
00:01:41,080 --> 00:01:43,450
competition I know definitely some good

39
00:01:43,450 --> 00:01:45,250
loud clappers out there well thank you

40
00:01:45,250 --> 00:01:48,000
all and without further ado Jeff hopper

41
00:01:48,000 --> 00:01:50,310
thank you thanks everybody for joining

42
00:01:50,310 --> 00:01:53,590
the lights are really bright so if I'm

43
00:01:53,590 --> 00:01:55,330
looking down the whole time that's

44
00:01:55,330 --> 00:01:59,680
pretty much why also this is the first

45
00:01:59,680 --> 00:02:02,530
time giving this talk so I hope that

46
00:02:02,530 --> 00:02:04,690
there aren't moments that I just pause

47
00:02:04,690 --> 00:02:07,090
completely and lose lose my train of

48
00:02:07,090 --> 00:02:11,290
thought so bear with me so the talk is

49
00:02:11,290 --> 00:02:13,630
we're the same you and me a new way to

50
00:02:13,630 --> 00:02:15,520
align programming paradigms across

51
00:02:15,520 --> 00:02:24,370
client and server less so the the the

52
00:02:24,370 --> 00:02:26,800
this talk and the the concepts and ideas

53
00:02:26,800 --> 00:02:29,650
in it are born out of years of

54
00:02:29,650 --> 00:02:31,750
experience working in startups and

55
00:02:31,750 --> 00:02:34,270
working on legacy systems and too often

56
00:02:34,270 --> 00:02:38,020
working in a start-up on a legacy system

57
00:02:38,020 --> 00:02:42,660
that is legacy way too quickly so I

58
00:02:42,660 --> 00:02:44,770
imagine some of you can relate to that

59
00:02:44,770 --> 00:02:46,840
and I hope there's some inspiration

60
00:02:46,840 --> 00:02:51,580
there for all of us when when I talk

61
00:02:51,580 --> 00:02:54,820
about a new way of programming to align

62
00:02:54,820 --> 00:02:57,640
these paradigms and more generally

63
00:02:57,640 --> 00:03:00,880
execution environments I am referring to

64
00:03:00,880 --> 00:03:03,480
something I call the towel model or

65
00:03:03,480 --> 00:03:08,470
towel programming paradigm and it has

66
00:03:08,470 --> 00:03:11,350
three specific parts it provides a

67
00:03:11,350 --> 00:03:14,890
message format three various ways to

68
00:03:14,890 --> 00:03:17,709
handle messages and a signal network

69
00:03:17,709 --> 00:03:23,620
it's the audio okay the towel model

70
00:03:23,620 --> 00:03:27,190
derives its name from an acronym for the

71
00:03:27,190 --> 00:03:29,410
message format to make it easy to

72
00:03:29,410 --> 00:03:32,470
remember especially the ordering of the

73
00:03:32,470 --> 00:03:37,000
parts and every message we're used to

74
00:03:37,000 --> 00:03:39,489
messaging that specifies the action or

75
00:03:39,489 --> 00:03:47,470
operation but the towel message differs

76
00:03:47,470 --> 00:03:50,739
from traditional messaging in a few ways

77
00:03:50,739 --> 00:03:52,780
specifically provides three degrees of

78
00:03:52,780 --> 00:03:56,530
freedom which will make a lot more sense

79
00:03:56,530 --> 00:03:59,709
when you see it using in wildcard

80
00:03:59,709 --> 00:04:03,970
handlers also we embed the subject of

81
00:04:03,970 --> 00:04:06,160
the message within the message itself

82
00:04:06,160 --> 00:04:08,709
whereas most messaging systems or most

83
00:04:08,709 --> 00:04:11,620
messaging we're used to this subject is

84
00:04:11,620 --> 00:04:13,780
either the source or the destination of

85
00:04:13,780 --> 00:04:16,510
the message and the inclusion of a third

86
00:04:16,510 --> 00:04:19,959
dimension the orientation allowing us to

87
00:04:19,959 --> 00:04:21,970
view the description and context of our

88
00:04:21,970 --> 00:04:24,220
application from all angles not just a

89
00:04:24,220 --> 00:04:31,390
two-dimensional view so the towel model

90
00:04:31,390 --> 00:04:34,060
also provides three distinct ways in

91
00:04:34,060 --> 00:04:35,710
which we can attach handlers to our

92
00:04:35,710 --> 00:04:38,380
signal network in line handlers are

93
00:04:38,380 --> 00:04:40,690
those that were most used to invented

94
00:04:40,690 --> 00:04:43,300
systems they happen in an ordered

95
00:04:43,300 --> 00:04:45,730
sequence and these are our order desired

96
00:04:45,730 --> 00:04:49,000
effects but it also provides two other

97
00:04:49,000 --> 00:04:52,360
mechanisms one is an async attachment so

98
00:04:52,360 --> 00:04:55,900
that we can explicitly create

99
00:04:55,900 --> 00:04:57,100
out-of-band

100
00:04:57,100 --> 00:05:00,100
side-effects as well as an intercept

101
00:05:00,100 --> 00:05:02,410
handler that allows us to halt operation

102
00:05:02,410 --> 00:05:10,139
and add guards to our execution flow in

103
00:05:10,139 --> 00:05:13,420
the towel model our trigrams describe

104
00:05:13,420 --> 00:05:21,670
discrete application oh sorry in the

105
00:05:21,670 --> 00:05:23,139
towel model our trigrams to describe

106
00:05:23,139 --> 00:05:26,560
discrete application contexts we use a

107
00:05:26,560 --> 00:05:28,720
signal network that connects those parts

108
00:05:28,720 --> 00:05:30,490
that are generating these application

109
00:05:30,490 --> 00:05:33,330
context to our handler code which is

110
00:05:33,330 --> 00:05:36,070
observing and reacting to these

111
00:05:36,070 --> 00:05:40,750
application contexts our signal network

112
00:05:40,750 --> 00:05:44,639
also provides the ability to chain these

113
00:05:44,639 --> 00:05:49,450
messages in a way simply by returning a

114
00:05:49,450 --> 00:05:52,990
new application context to the signal

115
00:05:52,990 --> 00:05:56,740
network from your handler in this way

116
00:05:56,740 --> 00:05:58,180
our signal network is

117
00:05:58,180 --> 00:06:00,400
implemented the same and has the same

118
00:06:00,400 --> 00:06:01,960
interface no matter whether you're

119
00:06:01,960 --> 00:06:03,580
executing it on the client or a server

120
00:06:03,580 --> 00:06:09,280
or a server loose this the towel model

121
00:06:09,280 --> 00:06:10,979
is currently implemented in JavaScript

122
00:06:10,979 --> 00:06:15,009
under the name of Tao das there are

123
00:06:15,009 --> 00:06:18,850
three packages on NPM published the core

124
00:06:18,850 --> 00:06:20,860
implements the towel model itself and

125
00:06:20,860 --> 00:06:25,960
provides the public API you can include

126
00:06:25,960 --> 00:06:27,820
it in any package you want and start

127
00:06:27,820 --> 00:06:30,160
using it right away

128
00:06:30,160 --> 00:06:33,820
react package provides an adapter to

129
00:06:33,820 --> 00:06:37,169
turn components into towel handlers as

130
00:06:37,169 --> 00:06:40,509
well as a reactor component that will

131
00:06:40,509 --> 00:06:45,099
react to the signal network and render

132
00:06:45,099 --> 00:06:46,750
the correct the component that you'd

133
00:06:46,750 --> 00:06:49,960
like the socket IO package implements

134
00:06:49,960 --> 00:06:53,770
the signal network so that it spans

135
00:06:53,770 --> 00:06:58,389
client and server so let's take a look

136
00:06:58,389 --> 00:07:04,389
at some code y'all can see that okay

137
00:07:04,389 --> 00:07:15,120
should I um

138
00:07:15,130 --> 00:07:32,260
let me move all of these hides ease

139
00:07:32,260 --> 00:07:37,020
how's that a little more a little more

140
00:07:37,020 --> 00:07:42,420
better one bitter to bear one better to

141
00:07:42,420 --> 00:07:46,420
I can't see an optometrist and not crack

142
00:07:46,420 --> 00:07:50,140
up when I'm going through that so simply

143
00:07:50,140 --> 00:07:54,370
tell Jo score we go ahead and import the

144
00:07:54,370 --> 00:07:56,650
tau which is our signal network

145
00:07:56,650 --> 00:07:59,530
implementation here and then there's

146
00:07:59,530 --> 00:08:02,590
another piece that we can import is it

147
00:08:02,590 --> 00:08:06,570
app CT X so that allows us to generate

148
00:08:06,570 --> 00:08:08,950
application context that we can return

149
00:08:08,950 --> 00:08:12,550
from a handler until the signal network

150
00:08:12,550 --> 00:08:16,840
to chain down to this next message or

151
00:08:16,840 --> 00:08:26,140
event or application context in addition

152
00:08:26,140 --> 00:08:31,800
we for up for our server we are

153
00:08:31,800 --> 00:08:36,460
importing our wire tau J s to suck at

154
00:08:36,460 --> 00:08:42,039
i/o and that's all we need from there so

155
00:08:42,039 --> 00:08:43,840
once our server is set up so this is a

156
00:08:43,840 --> 00:08:50,590
KOA server attaching a socket IO for

157
00:08:50,590 --> 00:09:02,080
each each socket that comes in we will

158
00:09:02,080 --> 00:09:05,290
wire it up and use our unconnect method

159
00:09:05,290 --> 00:09:12,040
in it client towel so on the server side

160
00:09:12,040 --> 00:09:14,280
we need we actually end up with two

161
00:09:14,280 --> 00:09:17,380
signal networks one that we can use to

162
00:09:17,380 --> 00:09:21,940
handle all application contexts and ones

163
00:09:21,940 --> 00:09:25,870
that are specific to our client so

164
00:09:25,870 --> 00:09:28,420
whenever a connection occurs this one is

165
00:09:28,420 --> 00:09:29,119
called back

166
00:09:29,119 --> 00:09:32,299
and then we attach our handlers to it on

167
00:09:32,299 --> 00:09:39,289
the client side specifically so our NIC

168
00:09:39,289 --> 00:09:42,519
client ow we get the we get the new

169
00:09:42,519 --> 00:09:47,659
client ow and it has an ID I'll ignore

170
00:09:47,659 --> 00:09:51,529
that for now so we set up some inline

171
00:09:51,529 --> 00:09:53,899
handlers that we need to occur on our

172
00:09:53,899 --> 00:10:00,739
server our example application it's

173
00:10:00,739 --> 00:10:02,869
super bare-bones just to be an example

174
00:10:02,869 --> 00:10:05,929
so that you get the gist of what's

175
00:10:05,929 --> 00:10:08,299
happening and I'm not dazzling you with

176
00:10:08,299 --> 00:10:12,739
my terrible CSS so the concept of behind

177
00:10:12,739 --> 00:10:15,669
it is it's a it's an application for

178
00:10:15,669 --> 00:10:18,469
creating your own spaces of your own

179
00:10:18,469 --> 00:10:22,579
vocabulary words and so it's going to

180
00:10:22,579 --> 00:10:28,219
have spaces and phrases within those

181
00:10:28,219 --> 00:10:31,009
spaces so for for now we're just using

182
00:10:31,009 --> 00:10:33,739
the space as an example so on this we

183
00:10:33,739 --> 00:10:38,179
have a term space an action of find and

184
00:10:38,179 --> 00:10:41,359
our orientation is the portal that most

185
00:10:41,359 --> 00:10:45,019
users will see so we have an async

186
00:10:45,019 --> 00:10:48,349
operation where we're going to take what

187
00:10:48,349 --> 00:10:51,939
we're being asked to find find can be

188
00:10:51,939 --> 00:10:54,789
undefined or it could have a specific ID

189
00:10:54,789 --> 00:10:57,409
which tells our handler to react in

190
00:10:57,409 --> 00:11:01,219
different ways it will use our spaces to

191
00:11:01,219 --> 00:11:02,839
go find the spaces if there's no

192
00:11:02,839 --> 00:11:05,389
specific ID so it'll go get all of the

193
00:11:05,389 --> 00:11:08,539
spaces or it'll return it'll find one

194
00:11:08,539 --> 00:11:12,109
and return it directly if we encounter

195
00:11:12,109 --> 00:11:14,899
any errors we set up in action we we

196
00:11:14,899 --> 00:11:18,489
chain on towards a space of a fail and

197
00:11:18,489 --> 00:11:21,829
we send that message on so that the

198
00:11:21,829 --> 00:11:25,189
client can react so this is very basic

199
00:11:25,189 --> 00:11:35,959
stuff go ahead and lose all that inside

200
00:11:35,959 --> 00:11:50,570
of our web application

201
00:11:50,580 --> 00:11:55,860
so up in here when the client loads

202
00:11:55,860 --> 00:12:00,670
we're going to import this cow in it

203
00:12:00,670 --> 00:12:02,280
which will give us an initial

204
00:12:02,280 --> 00:12:05,530
application context to set to set the

205
00:12:05,530 --> 00:12:08,080
wheels in motion within our signal

206
00:12:08,080 --> 00:12:10,840
network that somebody has entered

207
00:12:10,840 --> 00:12:17,950
entered the application that file looks

208
00:12:17,950 --> 00:12:21,030
like this so this sets up our socket IO

209
00:12:21,030 --> 00:12:30,400
connection and and and then sets up a

210
00:12:30,400 --> 00:12:35,860
series of handlers that will occur as

211
00:12:35,860 --> 00:12:40,600
where as the application is going so we

212
00:12:40,600 --> 00:12:43,300
have an app enter portal app view the

213
00:12:43,300 --> 00:12:46,300
portal session fine portal session

214
00:12:46,300 --> 00:12:51,520
create portal so we add an inline

215
00:12:51,520 --> 00:12:56,280
handler for when somebody enters the app

216
00:12:56,280 --> 00:13:02,440
and we return a view application context

217
00:13:02,440 --> 00:13:04,360
that we want to happen when the app view

218
00:13:04,360 --> 00:13:07,810
portal happens we want to go find spaces

219
00:13:07,810 --> 00:13:11,440
and we don't we don't specify any one

220
00:13:11,440 --> 00:13:13,540
space by giving it an ID so it returns

221
00:13:13,540 --> 00:13:26,120
everything these are old

222
00:13:26,130 --> 00:13:35,670
so as we react to the find oh this is so

223
00:13:35,670 --> 00:13:39,920
once that's how our find method our fine

224
00:13:39,920 --> 00:13:45,209
kicks off what happens on the server so

225
00:13:45,209 --> 00:13:47,910
this is going to respond with a list so

226
00:13:47,910 --> 00:13:51,240
let me start fire these up and pray that

227
00:13:51,240 --> 00:14:04,300
it works should it's pretty simple

228
00:14:04,310 --> 00:14:08,810
it's my fault for commenting out things

229
00:14:08,810 --> 00:14:24,270
I thought I didn't need

230
00:14:24,280 --> 00:14:35,560
okay Cole you're back in actually I'm

231
00:14:35,560 --> 00:14:37,480
just gonna put all this rest stuff back

232
00:14:37,480 --> 00:14:39,760
in so when I first built that I was

233
00:14:39,760 --> 00:14:45,640
testing it out with not using socket IO

234
00:14:45,640 --> 00:14:50,350
but interacting with a REST API which

235
00:14:50,350 --> 00:15:11,240
works just fine there we go now let's

236
00:15:11,250 --> 00:15:35,170
welcome

237
00:15:35,180 --> 00:15:47,010
something I didn't what's that yeah

238
00:15:47,010 --> 00:15:55,650
that's probably probably the best idea

239
00:15:55,660 --> 00:16:21,880
get reset head force force push

240
00:16:21,890 --> 00:16:30,879
see

241
00:16:30,889 --> 00:16:37,920
there we go thank you so what we see

242
00:16:37,920 --> 00:16:41,550
here is and I will just clear the

243
00:16:41,550 --> 00:16:48,750
console refresh a series of series of

244
00:16:48,750 --> 00:16:51,180
events occur as we go through this

245
00:16:51,180 --> 00:16:54,480
process of bootstrapping and rendering

246
00:16:54,480 --> 00:16:59,220
our app good we initially we initially

247
00:16:59,220 --> 00:17:02,839
set off the app enter portal which then

248
00:17:02,839 --> 00:17:07,319
kicks off of trying to find a session

249
00:17:07,319 --> 00:17:13,740
that exists and this is done we have an

250
00:17:13,740 --> 00:17:16,549
async handler for that so we don't block

251
00:17:16,549 --> 00:17:22,020
the app view from happening and we enter

252
00:17:22,020 --> 00:17:24,329
the session when this is found we go

253
00:17:24,329 --> 00:17:27,150
find spaces so that we can list them and

254
00:17:27,150 --> 00:17:34,270
show the ListView

255
00:17:34,280 --> 00:17:40,750
so showing how it integrates with react

256
00:17:40,750 --> 00:17:44,240
in our app we see we simply are grabbing

257
00:17:44,240 --> 00:17:47,360
space from our components and then

258
00:17:47,360 --> 00:17:52,060
rendering it here so in our index here

259
00:17:52,060 --> 00:17:55,580
what we're doing is creating a space

260
00:17:55,580 --> 00:17:58,010
container and we have two different

261
00:17:58,010 --> 00:18:00,980
reactor components that are exported

262
00:18:00,980 --> 00:18:06,710
from our tower dot J's react package

263
00:18:06,710 --> 00:18:10,430
along with the adapter the adapter we

264
00:18:10,430 --> 00:18:17,300
use as a way of adapting we wrap our Tau

265
00:18:17,300 --> 00:18:21,490
signal Network and then set a default

266
00:18:21,490 --> 00:18:25,280
context so that all the all the

267
00:18:25,280 --> 00:18:28,990
component handlers we set I'll use

268
00:18:28,990 --> 00:18:31,640
determine Orient for space and portal so

269
00:18:31,640 --> 00:18:33,190
we don't have to keep repeating those

270
00:18:33,190 --> 00:18:36,410
and then if the action comes in as list

271
00:18:36,410 --> 00:18:38,690
we want to show the list view the list

272
00:18:38,690 --> 00:18:41,030
component if it's a view we want to have

273
00:18:41,030 --> 00:18:43,280
the view component and if it's a new or

274
00:18:43,280 --> 00:18:46,010
edit action we want to show the form

275
00:18:46,010 --> 00:18:51,820
component now if you if you look here

276
00:18:51,820 --> 00:18:56,570
each of these the view components are

277
00:18:56,570 --> 00:18:59,990
just basic react components the space

278
00:18:59,990 --> 00:19:02,360
view is a functional component it has

279
00:19:02,360 --> 00:19:04,810
nothing to do with the Tau except for

280
00:19:04,810 --> 00:19:07,820
using the signal Network to actually set

281
00:19:07,820 --> 00:19:12,390
the context if somebody clicks a button

282
00:19:12,400 --> 00:19:17,600
same with the list it's you know nested

283
00:19:17,600 --> 00:19:20,720
components and then our form component

284
00:19:20,720 --> 00:19:24,440
is you know extends component has an

285
00:19:24,440 --> 00:19:27,080
editable state within it but it's it's

286
00:19:27,080 --> 00:19:29,450
not doing anything with the tau other

287
00:19:29,450 --> 00:19:33,470
than being a handler for an application

288
00:19:33,470 --> 00:19:37,130
context and pretty prettier is

289
00:19:37,130 --> 00:19:42,479
complaining

290
00:19:42,489 --> 00:20:00,979
so if I knew save it we now have that

291
00:20:00,979 --> 00:20:11,639
space and go back to the list can edit

292
00:20:11,649 --> 00:20:22,700
it's there so all of the code is built

293
00:20:22,700 --> 00:20:24,409
using the same paradigm for the

294
00:20:24,409 --> 00:20:27,339
client-side as well as the server-side

295
00:20:27,339 --> 00:20:35,149
and jump back to our presentation so all

296
00:20:35,149 --> 00:20:36,440
of my friends and colleagues that have

297
00:20:36,440 --> 00:20:40,889
shown this to say hey that's really cool

298
00:20:40,899 --> 00:20:46,289
but they always ask me the same question

299
00:20:46,299 --> 00:20:51,979
why do we want this as a as a plucky

300
00:20:51,979 --> 00:20:54,919
recent college grad with my first

301
00:20:54,919 --> 00:20:58,219
corporate job my first corporate boss I

302
00:20:58,219 --> 00:21:01,059
was armed with design patterns as a

303
00:21:01,059 --> 00:21:03,440
solution to all the coding and

304
00:21:03,440 --> 00:21:06,709
architectural problems so when I noticed

305
00:21:06,709 --> 00:21:08,869
that the team wasn't talking about

306
00:21:08,869 --> 00:21:11,929
design patterns in any way and largely

307
00:21:11,929 --> 00:21:13,459
nobody seemed to have heard of them I

308
00:21:13,459 --> 00:21:17,629
went to my boss and I said hey I'd like

309
00:21:17,629 --> 00:21:19,099
to give a presentation on design

310
00:21:19,099 --> 00:21:20,389
patterns I think he would really help

311
00:21:20,389 --> 00:21:21,979
the team I think it would really help us

312
00:21:21,979 --> 00:21:24,709
the applications were building and he

313
00:21:24,709 --> 00:21:29,089
responded with all software approaches a

314
00:21:29,089 --> 00:21:31,009
state of entropy over time so I don't

315
00:21:31,009 --> 00:21:38,769
see any point in design patterns thanks

316
00:21:38,779 --> 00:21:44,149
true story I'm pretty sure he was

317
00:21:44,149 --> 00:21:46,869
talking about the second definition here

318
00:21:46,869 --> 00:21:48,919
since we were talking about how to build

319
00:21:48,919 --> 00:21:53,299
project management software and customer

320
00:21:53,299 --> 00:21:56,629
service software and as much as I didn't

321
00:21:56,629 --> 00:22:00,440
like it he was right all software

322
00:22:00,440 --> 00:22:02,539
systems do end up heading towards

323
00:22:02,539 --> 00:22:08,509
entropy and states of disorder so we

324
00:22:08,509 --> 00:22:10,399
have three major causes of entropy in

325
00:22:10,399 --> 00:22:13,159
our applications most of which are born

326
00:22:13,159 --> 00:22:16,220
out of this need to build and prove our

327
00:22:16,220 --> 00:22:19,940
application and what we want to create

328
00:22:19,940 --> 00:22:22,279
without incurring the overhead of

329
00:22:22,279 --> 00:22:25,429
building it right even in cases where we

330
00:22:25,429 --> 00:22:27,200
set off to build it right because we

331
00:22:27,200 --> 00:22:30,139
have budget and time managing these

332
00:22:30,139 --> 00:22:32,779
three factors through traditional

333
00:22:32,779 --> 00:22:34,549
architectural and design patterns

334
00:22:34,549 --> 00:22:39,960
attempt to control the entropy

335
00:22:39,970 --> 00:22:42,590
microservices is another evolution in

336
00:22:42,590 --> 00:22:44,179
this direction of controlling entropy

337
00:22:44,179 --> 00:22:47,299
and systems but they come with

338
00:22:47,299 --> 00:22:49,519
additional overhead requiring additional

339
00:22:49,519 --> 00:22:52,059
tooling and support and infrastructure

340
00:22:52,059 --> 00:22:59,119
in order to embrace them so what if we

341
00:22:59,119 --> 00:23:04,239
embrace the entropy we know it's coming

342
00:23:04,239 --> 00:23:06,499
what would what would it look like if we

343
00:23:06,499 --> 00:23:08,749
could just embrace the entropy that's

344
00:23:08,749 --> 00:23:11,599
coming in our system we would have to

345
00:23:11,599 --> 00:23:15,289
plan to manage these three aspects of

346
00:23:15,289 --> 00:23:18,200
entropy the tight coupling scaling

347
00:23:18,200 --> 00:23:20,090
across processes and extending our

348
00:23:20,090 --> 00:23:23,879
application beyond its original concept

349
00:23:23,889 --> 00:23:26,330
so in the seminal work that started the

350
00:23:26,330 --> 00:23:30,049
design patterns movement the Gang of

351
00:23:30,049 --> 00:23:34,039
Four put a quote in there that was

352
00:23:34,039 --> 00:23:36,190
designed to make us better developers

353
00:23:36,190 --> 00:23:38,809
it's programmed to an interface and not

354
00:23:38,809 --> 00:23:44,840
an implementation interesting in that in

355
00:23:44,840 --> 00:23:47,659
an interview in 2005 Erich gamma one of

356
00:23:47,659 --> 00:23:49,840
the art of

357
00:23:49,840 --> 00:23:56,619
design patterns book spoke about

358
00:23:56,619 --> 00:23:59,480
interfaces defining the vocabulary of

359
00:23:59,480 --> 00:24:03,379
the collaboration of a system and how

360
00:24:03,379 --> 00:24:07,279
understanding these interfaces you could

361
00:24:07,279 --> 00:24:08,779
get an understanding of the underlying

362
00:24:08,779 --> 00:24:13,789
problem of a system so if we want to

363
00:24:13,789 --> 00:24:18,470
embrace him entropy by avoiding the

364
00:24:18,470 --> 00:24:21,080
tight coupling and elaborating on Eric's

365
00:24:21,080 --> 00:24:22,549
words we need a mechanism for

366
00:24:22,549 --> 00:24:26,629
comprehensive interfaces comprehensive

367
00:24:26,629 --> 00:24:29,029
has two definitions and we want to use

368
00:24:29,029 --> 00:24:31,700
both of them we want our interfaces to

369
00:24:31,700 --> 00:24:33,379
completely define our system while we

370
00:24:33,379 --> 00:24:37,169
also want them to be easily understood

371
00:24:37,179 --> 00:24:39,830
we end up spending time and effort

372
00:24:39,830 --> 00:24:41,960
abstracting the fact that we are using a

373
00:24:41,960 --> 00:24:45,799
REST API as a back-end from our client

374
00:24:45,799 --> 00:24:50,149
app creating overhead and abstraction

375
00:24:50,149 --> 00:24:53,149
for what we never end up swapping out

376
00:24:53,149 --> 00:24:55,539
the REST API for something different

377
00:24:55,539 --> 00:25:01,249
that takes too much time most often

378
00:25:01,249 --> 00:25:02,989
these abstractions and interfaces we

379
00:25:02,989 --> 00:25:04,730
create deal with the Hal of our system

380
00:25:04,730 --> 00:25:07,009
through the point I've seen applications

381
00:25:07,009 --> 00:25:10,369
that have a react client app with three

382
00:25:10,369 --> 00:25:13,279
different mapping layers from Redux to

383
00:25:13,279 --> 00:25:16,340
our component and this ends up just

384
00:25:16,340 --> 00:25:18,919
creating a lot of overhead for the next

385
00:25:18,919 --> 00:25:20,419
developer coming along that has to add

386
00:25:20,419 --> 00:25:23,899
something to it this is where

387
00:25:23,899 --> 00:25:25,850
domain-driven design can help us to find

388
00:25:25,850 --> 00:25:28,549
the what of our system and focus our

389
00:25:28,549 --> 00:25:31,850
interface attention where changes

390
00:25:31,850 --> 00:25:34,190
towards disorder occur most and that is

391
00:25:34,190 --> 00:25:36,669
in the what

392
00:25:36,669 --> 00:25:41,269
so our towel message is the interface we

393
00:25:41,269 --> 00:25:44,330
can use these trigrams of term action

394
00:25:44,330 --> 00:25:48,230
and orient to create an interface

395
00:25:48,230 --> 00:25:50,299
description that anyone else can easily

396
00:25:50,299 --> 00:25:52,909
comprehend as well as create a handler

397
00:25:52,909 --> 00:25:54,129
for it

398
00:25:54,129 --> 00:25:56,389
and we generally think of terms as

399
00:25:56,389 --> 00:25:58,730
entities in our domain from the main

400
00:25:58,730 --> 00:26:00,259
drive in design but it can also

401
00:26:00,259 --> 00:26:02,790
represent a relationship or other

402
00:26:02,790 --> 00:26:05,520
term non domain term that is useful for

403
00:26:05,520 --> 00:26:09,150
our applications by being distinct three

404
00:26:09,150 --> 00:26:12,390
mesthri strings to represent a possible

405
00:26:12,390 --> 00:26:14,760
application context the Tao trigrams are

406
00:26:14,760 --> 00:26:16,400
not bounded to anything other than

407
00:26:16,400 --> 00:26:21,420
representing what your app is doing now

408
00:26:21,420 --> 00:26:23,370
when we're generating an event in our

409
00:26:23,370 --> 00:26:25,200
system all it needs to do is provide

410
00:26:25,200 --> 00:26:27,450
these specific application context of

411
00:26:27,450 --> 00:26:29,790
the event this includes the Tao trigram

412
00:26:29,790 --> 00:26:34,500
and the complete attached data that goes

413
00:26:34,500 --> 00:26:37,890
along with it and our handlers are

414
00:26:37,890 --> 00:26:39,600
called when the trigram matches what

415
00:26:39,600 --> 00:26:41,220
they've subscribed to so they just wait

416
00:26:41,220 --> 00:26:46,020
for the outcome and react to it we know

417
00:26:46,020 --> 00:26:48,030
we have now resolved our tight coupling

418
00:26:48,030 --> 00:26:49,860
problem with a simple mechanism for

419
00:26:49,860 --> 00:26:51,750
defining interfaces that abstract of

420
00:26:51,750 --> 00:26:54,180
what of our application and we didn't

421
00:26:54,180 --> 00:26:55,620
choose a message driven paradigm by

422
00:26:55,620 --> 00:26:57,960
accident the next problem to tackle

423
00:26:57,960 --> 00:26:59,940
entropy in our system is to deal with

424
00:26:59,940 --> 00:27:05,820
the scale problem this problem usually

425
00:27:05,820 --> 00:27:10,290
has shows up in algorithms that are

426
00:27:10,290 --> 00:27:13,620
written that aren't made to deal with

427
00:27:13,620 --> 00:27:17,220
scale and they're deeply embedded and

428
00:27:17,220 --> 00:27:20,130
they calcify to the point where once

429
00:27:20,130 --> 00:27:23,070
it's time to scale we have to pull back

430
00:27:23,070 --> 00:27:25,590
and find and rip these things out deep

431
00:27:25,590 --> 00:27:30,540
within our application architecture so

432
00:27:30,540 --> 00:27:33,600
to embrace the intro this entropic cause

433
00:27:33,600 --> 00:27:37,680
we need to decouple scalability from our

434
00:27:37,680 --> 00:27:39,630
system that we used to build the

435
00:27:39,630 --> 00:27:42,510
application itself and we do this by

436
00:27:42,510 --> 00:27:44,570
using an evented message oriented

437
00:27:44,570 --> 00:27:48,480
architecture baked into the baked into

438
00:27:48,480 --> 00:27:53,790
the towel through the signal network so

439
00:27:53,790 --> 00:27:56,430
this is a quote from Wikipedia I

440
00:27:56,430 --> 00:27:58,620
remember it slightly differently from my

441
00:27:58,620 --> 00:28:01,860
object-oriented class in the reading in

442
00:28:01,860 --> 00:28:06,000
in in college and I was struck by this

443
00:28:06,000 --> 00:28:09,840
concept that when an object calls a

444
00:28:09,840 --> 00:28:12,360
method on another object it is passing a

445
00:28:12,360 --> 00:28:16,649
message to that object and

446
00:28:16,659 --> 00:28:19,580
this original definition came from small

447
00:28:19,580 --> 00:28:21,950
talk where it literally was passing a

448
00:28:21,950 --> 00:28:26,200
message in the implementation but the

449
00:28:26,200 --> 00:28:29,090
the metaphor and the abstraction is the

450
00:28:29,090 --> 00:28:33,619
same so in essence we're already

451
00:28:33,619 --> 00:28:35,749
building message oriented applications

452
00:28:35,749 --> 00:28:38,269
we just don't seem to agree on the

453
00:28:38,269 --> 00:28:40,009
message format and the messaging

454
00:28:40,009 --> 00:28:45,679
paradigm itself so this is not a new

455
00:28:45,679 --> 00:28:48,139
pattern but one which we have separated

456
00:28:48,139 --> 00:28:50,330
client for back-end when we build our

457
00:28:50,330 --> 00:28:53,330
event and message based systems event

458
00:28:53,330 --> 00:28:55,159
that implementations written dated from

459
00:28:55,159 --> 00:28:59,899
user interface designs long ago with the

460
00:28:59,899 --> 00:29:03,019
observer pattern which that's our signal

461
00:29:03,019 --> 00:29:06,769
Network uses to its advantage message

462
00:29:06,769 --> 00:29:09,979
bus systems are prevalent in high skill

463
00:29:09,979 --> 00:29:13,879
high scale backends and using message

464
00:29:13,879 --> 00:29:17,679
buses and the the problem with that

465
00:29:17,679 --> 00:29:21,519
generally that I've come across is that

466
00:29:21,519 --> 00:29:24,259
whenever you decide to go with a message

467
00:29:24,259 --> 00:29:25,879
oriented back-end you then have to

468
00:29:25,879 --> 00:29:27,649
decide what is the format for our

469
00:29:27,649 --> 00:29:31,759
messages every time by leveraging the

470
00:29:31,759 --> 00:29:34,970
Tao trigram message we got the format

471
00:29:34,970 --> 00:29:37,099
figured out it's dynamic enough that we

472
00:29:37,099 --> 00:29:40,879
can allow it to work for any context in

473
00:29:40,879 --> 00:29:45,080
any situation now the flux architecture

474
00:29:45,080 --> 00:29:47,269
introduced a lot of people to the

475
00:29:47,269 --> 00:29:50,690
concept of unidirectional data flow and

476
00:29:50,690 --> 00:29:53,059
it's something that existed in backend

477
00:29:53,059 --> 00:29:56,359
data processing for some time and it's

478
00:29:56,359 --> 00:29:58,039
now a welcome addition and client side

479
00:29:58,039 --> 00:30:00,429
development the DAO embraces

480
00:30:00,429 --> 00:30:03,799
unidirectional data flow in that

481
00:30:03,799 --> 00:30:07,279
handlers when you set the context on the

482
00:30:07,279 --> 00:30:09,889
single network there is no return coming

483
00:30:09,889 --> 00:30:12,320
back to the caller so there's nothing to

484
00:30:12,320 --> 00:30:15,289
sit there and wait for so you're setting

485
00:30:15,289 --> 00:30:17,299
a context and letting it propagate

486
00:30:17,299 --> 00:30:21,859
through your system this allows us to

487
00:30:21,859 --> 00:30:24,440
have a single paradigm across all the

488
00:30:24,440 --> 00:30:27,799
execution environments

489
00:30:27,809 --> 00:30:30,269
so now that we found a wave to decouple

490
00:30:30,269 --> 00:30:31,649
scalability from our application

491
00:30:31,649 --> 00:30:33,869
building system across all environments

492
00:30:33,869 --> 00:30:39,090
to resolve the scale problem we can

493
00:30:39,090 --> 00:30:41,549
embrace the entropy to come we need to

494
00:30:41,549 --> 00:30:43,710
have a way to evolve our application

495
00:30:43,710 --> 00:30:47,580
beyond its original intent again micro

496
00:30:47,580 --> 00:30:49,349
services have come to our aid in this

497
00:30:49,349 --> 00:30:51,090
department but once again on the side of

498
00:30:51,090 --> 00:30:54,359
controlling entropy micro services as an

499
00:30:54,359 --> 00:30:56,580
architectural choice move us back in the

500
00:30:56,580 --> 00:30:59,340
direction towards korba and decom of

501
00:30:59,340 --> 00:31:02,909
distributed components but in this case

502
00:31:02,909 --> 00:31:04,409
we're running them in their own

503
00:31:04,409 --> 00:31:06,479
processes they have ownership of their

504
00:31:06,479 --> 00:31:08,909
own data and they leverage web standards

505
00:31:08,909 --> 00:31:11,580
for their network and interface

506
00:31:11,580 --> 00:31:15,719
definitions but what we're really

507
00:31:15,719 --> 00:31:17,190
looking for is not just the

508
00:31:17,190 --> 00:31:21,210
componentized development but a method

509
00:31:21,210 --> 00:31:25,349
for adding or injecting extensions to

510
00:31:25,349 --> 00:31:27,409
our application and our in our system

511
00:31:27,409 --> 00:31:31,769
that we didn't think of while we were

512
00:31:31,769 --> 00:31:41,889
building it this is to embrace entropy

513
00:31:41,899 --> 00:31:44,489
many frameworks actually provide

514
00:31:44,489 --> 00:31:48,960
extension points within them but all of

515
00:31:48,960 --> 00:31:51,089
these extension points are tied to the

516
00:31:51,089 --> 00:31:52,320
given framework and there's no

517
00:31:52,320 --> 00:31:54,559
standardization across frameworks

518
00:31:54,559 --> 00:31:57,119
there's no standardization of extension

519
00:31:57,119 --> 00:32:04,589
mechanisms from client and server so

520
00:32:04,589 --> 00:32:06,899
there are you guessed it three ways the

521
00:32:06,899 --> 00:32:10,489
Tao implements dynamic extension points

522
00:32:10,489 --> 00:32:12,929
if anybody's counting the number of

523
00:32:12,929 --> 00:32:17,759
times I say three the first is the three

524
00:32:17,759 --> 00:32:20,489
different types of message handlers the

525
00:32:20,489 --> 00:32:23,460
intercept async and inline if you notice

526
00:32:23,460 --> 00:32:25,649
I flipped the order from when I

527
00:32:25,649 --> 00:32:26,999
introduced them at the beginning and

528
00:32:26,999 --> 00:32:31,049
that is because this is in this is in

529
00:32:31,049 --> 00:32:34,190
the priority order in which they are

530
00:32:34,190 --> 00:32:38,639
executed by the signal network and this

531
00:32:38,639 --> 00:32:42,690
gives us a way to deterministically

532
00:32:42,690 --> 00:32:46,480
configure the order in which our

533
00:32:46,480 --> 00:32:48,790
handlers will be called even though

534
00:32:48,790 --> 00:32:53,480
they're added to the system dynamically

535
00:32:53,490 --> 00:32:56,710
the second way is through while the

536
00:32:56,710 --> 00:32:59,080
second way for dynamic extension is

537
00:32:59,080 --> 00:33:01,750
through wildcard handlers so we can add

538
00:33:01,750 --> 00:33:05,620
handlers that can handle in this case

539
00:33:05,620 --> 00:33:08,110
anything anytime anything is added on

540
00:33:08,110 --> 00:33:11,710
the admin or we could have a wildcard

541
00:33:11,710 --> 00:33:15,880
for any of them any any application

542
00:33:15,880 --> 00:33:19,410
context that comes through any message

543
00:33:19,410 --> 00:33:23,890
and the third way is through this

544
00:33:23,890 --> 00:33:27,100
chaining mechanism as we build our

545
00:33:27,100 --> 00:33:28,840
application we're not going to think of

546
00:33:28,840 --> 00:33:31,240
everything ahead of time and that's by

547
00:33:31,240 --> 00:33:31,800
design

548
00:33:31,800 --> 00:33:35,230
entropy occurs when our product managers

549
00:33:35,230 --> 00:33:37,030
come to us and say well I need it to do

550
00:33:37,030 --> 00:33:41,410
this now so we can now inject a new

551
00:33:41,410 --> 00:33:44,110
event in our chain a new message in our

552
00:33:44,110 --> 00:33:46,690
chain and then subscribe to that and add

553
00:33:46,690 --> 00:33:49,030
a new handler and then thus not touching

554
00:33:49,030 --> 00:33:54,400
anything between so aspect oriented

555
00:33:54,400 --> 00:33:56,890
programming is a paradigm that allows a

556
00:33:56,890 --> 00:33:59,260
separation of application logic from

557
00:33:59,260 --> 00:34:01,570
what's called application wide or

558
00:34:01,570 --> 00:34:07,120
cross-cutting concerns like security and

559
00:34:07,120 --> 00:34:11,860
logging most AOP implementations provide

560
00:34:11,860 --> 00:34:14,830
point cut systems that perform cross

561
00:34:14,830 --> 00:34:18,100
compilation to inject code but they're

562
00:34:18,100 --> 00:34:23,070
generally focused on binaries and single

563
00:34:23,070 --> 00:34:27,970
single execution single executables by

564
00:34:27,970 --> 00:34:29,740
broadcasting our town' messages on the

565
00:34:29,740 --> 00:34:32,200
signal network we can have our AOP

566
00:34:32,200 --> 00:34:34,000
cross-cutting concerns handled

567
00:34:34,000 --> 00:34:39,850
system-wide and we get this for free so

568
00:34:39,850 --> 00:34:41,590
now that we've resolved to embrace the

569
00:34:41,590 --> 00:34:43,720
entropy to come of our application by

570
00:34:43,720 --> 00:34:45,910
considering all three major causes of

571
00:34:45,910 --> 00:34:48,550
entropy let's see some examples of

572
00:34:48,550 --> 00:34:50,800
leveraging couches to add our add to our

573
00:34:50,800 --> 00:34:54,390
example app

574
00:34:54,400 --> 00:34:59,600
so now that we've gone through the

575
00:34:59,600 --> 00:35:08,470
process of we want to be able to now add

576
00:35:08,470 --> 00:35:19,010
caching to our server so we're not going

577
00:35:19,010 --> 00:35:20,540
to change anything on the client side

578
00:35:20,540 --> 00:35:26,190
it's still responding to these events

579
00:35:26,200 --> 00:35:44,580
there she's so what I now want to do is

580
00:35:44,590 --> 00:35:47,750
so we had our inline handler for space

581
00:35:47,750 --> 00:35:53,150
find what I'm going to do is add an

582
00:35:53,150 --> 00:35:56,450
intercept handler for space find that's

583
00:35:56,450 --> 00:35:59,480
going to test to see if we're looking

584
00:35:59,480 --> 00:36:03,980
for a specific space and if not we

585
00:36:03,980 --> 00:36:06,680
return and then the in inline handler is

586
00:36:06,680 --> 00:36:11,930
going to be called its then I'm gonna if

587
00:36:11,930 --> 00:36:14,960
if we make it past there I'm gonna go to

588
00:36:14,960 --> 00:36:18,260
Redis and try to get that item if I

589
00:36:18,260 --> 00:36:20,600
didn't find it we missed on the cache

590
00:36:20,600 --> 00:36:24,440
log it and return it'll call the inline

591
00:36:24,440 --> 00:36:27,800
handler if we did we're gonna reset the

592
00:36:27,800 --> 00:36:30,380
contacts to enter Portal and that will

593
00:36:30,380 --> 00:36:34,550
prevent any downstream any downstream

594
00:36:34,550 --> 00:36:43,350
application context from occurring

595
00:36:43,360 --> 00:36:47,110
so that is a cash check now how do we

596
00:36:47,110 --> 00:36:52,540
implement how do we implement storing so

597
00:36:52,540 --> 00:36:58,810
because we're already in our save space

598
00:36:58,810 --> 00:37:02,410
handler we were we were returning the

599
00:37:02,410 --> 00:37:04,960
application context as space stored

600
00:37:04,960 --> 00:37:07,260
we're also broadcasting that on the

601
00:37:07,260 --> 00:37:12,390
server wide signal Network

602
00:37:12,390 --> 00:37:20,510
we'll simply add it at an async handler

603
00:37:20,520 --> 00:37:23,740
globally to anything that's stored and

604
00:37:23,740 --> 00:37:27,850
grab it and stick it in the cache now

605
00:37:27,850 --> 00:37:30,460
this was already working because I undid

606
00:37:30,460 --> 00:37:34,980
all the commenting but I'll go ahead and

607
00:37:34,980 --> 00:37:45,549
show you how that's working

608
00:37:45,559 --> 00:37:54,930
so if we have in Redis we've got our je

609
00:37:54,930 --> 00:38:05,910
s conf we go ahead and hit that and then

610
00:38:05,910 --> 00:38:11,069
we see in our logging cache hit that's

611
00:38:11,069 --> 00:38:17,819
what got returned back to the list this

612
00:38:17,819 --> 00:38:29,410
one due it'll be is not in our cache

613
00:38:29,420 --> 00:38:36,490
will go into that will see cache miss

614
00:38:36,500 --> 00:38:40,549
and by the way all the logging is simply

615
00:38:40,549 --> 00:38:44,730
adding a wild-card handler as an

616
00:38:44,730 --> 00:38:47,369
intercept that never returns anything so

617
00:38:47,369 --> 00:38:49,200
we never intercept we never block we

618
00:38:49,200 --> 00:38:52,349
just see it coming through and that

619
00:38:52,349 --> 00:39:02,520
happens here as well as in our client so

620
00:39:02,520 --> 00:39:04,890
this one was a cache miss but if we go

621
00:39:04,890 --> 00:39:13,109
ahead and edit it will now see that gets

622
00:39:13,109 --> 00:39:20,780
stored in our cache

623
00:39:20,790 --> 00:39:24,710
and the next time we go back to the list

624
00:39:24,710 --> 00:39:37,190
we'll have a cache hit

625
00:39:37,200 --> 00:39:46,770
they come close to at a time ah

626
00:39:46,780 --> 00:39:49,540
so with all this we get a lot of

627
00:39:49,540 --> 00:39:51,700
additional benefits we're building on an

628
00:39:51,700 --> 00:39:55,090
architecture designed to evolve by

629
00:39:55,090 --> 00:39:57,100
embracing the entropy inherent in our

630
00:39:57,100 --> 00:40:00,670
systems it's completely composable and

631
00:40:00,670 --> 00:40:04,300
decoupled from day zero you have the

632
00:40:04,300 --> 00:40:06,340
ability to use the best tool for the job

633
00:40:06,340 --> 00:40:08,590
so because everything is just a handler

634
00:40:08,590 --> 00:40:13,600
you can use whatever you want we get to

635
00:40:13,600 --> 00:40:15,520
build reactive applications that come

636
00:40:15,520 --> 00:40:18,130
with the common semantics across all of

637
00:40:18,130 --> 00:40:21,670
the execution stacks we get like I said

638
00:40:21,670 --> 00:40:23,770
aspect-oriented programming system-wide

639
00:40:23,770 --> 00:40:26,560
for free we're getting a stream of

640
00:40:26,560 --> 00:40:28,480
events with rich metadata that we can

641
00:40:28,480 --> 00:40:31,680
then use for reporting and tracking and

642
00:40:31,680 --> 00:40:35,080
by using this cow message concept these

643
00:40:35,080 --> 00:40:39,190
trigrams it provides a ubiquitous

644
00:40:39,190 --> 00:40:41,410
language like we talked about from

645
00:40:41,410 --> 00:40:44,560
domain-driven design that we get to use

646
00:40:44,560 --> 00:40:47,770
with our non-technical and our product

647
00:40:47,770 --> 00:40:50,260
members of our team and then this same

648
00:40:50,260 --> 00:40:52,690
language ends up translating directly

649
00:40:52,690 --> 00:40:57,370
into the into the code more things to

650
00:40:57,370 --> 00:41:01,000
come tools meta description files

651
00:41:01,000 --> 00:41:03,810
decorators testing and debugging tools

652
00:41:03,810 --> 00:41:06,520
at the moment it's a little verbose but

653
00:41:06,520 --> 00:41:08,860
by creating meta description files we

654
00:41:08,860 --> 00:41:12,360
can wire this stuff up on the side

655
00:41:12,360 --> 00:41:15,340
router for manipulating and reacting to

656
00:41:15,340 --> 00:41:20,290
URL paths middleware and adapters for

657
00:41:20,290 --> 00:41:23,140
different front-end components wrappers

658
00:41:23,140 --> 00:41:27,040
for the different fast providers and a

659
00:41:27,040 --> 00:41:30,930
towel mesh that would be able to conjoin

660
00:41:30,930 --> 00:41:33,580
signal networks to make that aspect

661
00:41:33,580 --> 00:41:35,590
seamless as well as implementations

662
00:41:35,590 --> 00:41:37,440
beyond JavaScript so you can have

663
00:41:37,440 --> 00:41:41,380
handlers implemented in any language

664
00:41:41,380 --> 00:41:43,750
that basically can support this simple

665
00:41:43,750 --> 00:41:48,600
paradigm what do I need from

666
00:41:48,600 --> 00:41:52,950
y'all please try it out this is brand

667
00:41:52,950 --> 00:41:56,160
new this is from a lot of years of me

668
00:41:56,160 --> 00:41:58,620
thinking about this problem and

669
00:41:58,620 --> 00:42:01,440
especially I want you to tell me what's

670
00:42:01,440 --> 00:42:02,220
wrong with it

671
00:42:02,220 --> 00:42:04,680
I do believe in this paradigm as a

672
00:42:04,680 --> 00:42:06,960
simplified way of building applications

673
00:42:06,960 --> 00:42:10,070
and using the strengths of our tools

674
00:42:10,070 --> 00:42:12,570
rather than fighting against them as

675
00:42:12,570 --> 00:42:16,100
we're dealing with various entropy

676
00:42:16,100 --> 00:42:19,590
there is no sponsor it's just me so if

677
00:42:19,590 --> 00:42:21,240
anybody wants to contribute it's all

678
00:42:21,240 --> 00:42:26,070
open source feel free to to share your

679
00:42:26,070 --> 00:42:29,490
feedback and and please come talk to be

680
00:42:29,490 --> 00:42:32,160
more if you're interested in working on

681
00:42:32,160 --> 00:42:36,480
a project that makes that makes it

682
00:42:36,480 --> 00:42:39,420
easier to build applications quickly

683
00:42:39,420 --> 00:42:41,310
where you're not having to worry about

684
00:42:41,310 --> 00:42:43,920
the underlying architecture which can

685
00:42:43,920 --> 00:42:47,250
evolve with you thank you very much I

686
00:42:47,250 --> 00:42:49,110
want to thank everybody at Jay's comp

687
00:42:49,110 --> 00:42:51,500
the hospitality here has been amazing

688
00:42:51,500 --> 00:42:54,890
and thank you all for attending

