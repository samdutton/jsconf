1
00:00:11,400 --> 00:00:12,900

alright can you hear me over there in

2
00:00:12,900 --> 00:00:17,279
the corner do I sound okay perfect um hi

3
00:00:17,279 --> 00:00:20,700
my name is Ray and I'm a web dev and

4
00:00:20,700 --> 00:00:22,980
I've learned a lot of things from

5
00:00:22,980 --> 00:00:26,340
attending previous JSL lays in fact most

6
00:00:26,340 --> 00:00:28,890
of all of the ten secrets to writing

7
00:00:28,890 --> 00:00:30,900
perfect code that I'm going to tell you

8
00:00:30,900 --> 00:00:33,030
tonight have previously been covered at

9
00:00:33,030 --> 00:00:37,949
j SLA so here we go number one practice

10
00:00:37,949 --> 00:00:41,970
practice practice practice just like

11
00:00:41,970 --> 00:00:43,650
everything else in life that's

12
00:00:43,650 --> 00:00:46,379
challenging and rewarding you need to

13
00:00:46,379 --> 00:00:48,989
practice so you can practice with online

14
00:00:48,989 --> 00:00:51,570
tools like notes cool or you can attend

15
00:00:51,570 --> 00:00:53,580
to the upcoming node school or you can

16
00:00:53,580 --> 00:00:55,710
do things like hacker ring you can also

17
00:00:55,710 --> 00:00:58,140
work on side projects that's a great way

18
00:00:58,140 --> 00:01:00,379
to practice and stretch your skill set

19
00:01:00,379 --> 00:01:03,600
another great experience that makes you

20
00:01:03,600 --> 00:01:07,979
learn is to break stuff you're just

21
00:01:07,979 --> 00:01:11,369
laugh okay another thing that makes you

22
00:01:11,369 --> 00:01:13,170
learn is to bring stuff because then you

23
00:01:13,170 --> 00:01:15,650
get to practice putting it back together

24
00:01:15,650 --> 00:01:20,510
so one thing that I'm practicing is

25
00:01:20,510 --> 00:01:22,650
implementing the patterns of early

26
00:01:22,650 --> 00:01:28,530
returns and sensible defaults okay this

27
00:01:28,530 --> 00:01:34,320
slide is what not to do the slide is a

28
00:01:34,320 --> 00:01:36,810
better example in the first slide if

29
00:01:36,810 --> 00:01:39,840
you're given an argument value read the

30
00:01:39,840 --> 00:01:42,409
function still performs an extra check

31
00:01:42,409 --> 00:01:45,630
to see if you can match on the color

32
00:01:45,630 --> 00:01:50,430
green we can do better by using an early

33
00:01:50,430 --> 00:01:52,710
return when I call this function with

34
00:01:52,710 --> 00:01:56,400
the parameter red we skip that second

35
00:01:56,400 --> 00:01:58,590
conditional and we win with more

36
00:01:58,590 --> 00:02:02,220
efficiency also you'll notice in this

37
00:02:02,220 --> 00:02:05,280
first sample we would return an empty

38
00:02:05,280 --> 00:02:07,680
string if we got an argument that wasn't

39
00:02:07,680 --> 00:02:10,080
either red or green that's less than

40
00:02:10,080 --> 00:02:14,069
ideal so in slide two will use a

41
00:02:14,069 --> 00:02:17,710
sensible defaults and will return plan

42
00:02:17,710 --> 00:02:19,540
which is more descriptive than an empty

43
00:02:19,540 --> 00:02:22,180
string another technique that I'm

44
00:02:22,180 --> 00:02:24,730
practicing is brevity for the sake of

45
00:02:24,730 --> 00:02:26,350
clarity this function is actually

46
00:02:26,350 --> 00:02:30,700
relatively short and sweet this one is

47
00:02:30,700 --> 00:02:40,180
more okay number one done on 22 fine and

48
00:02:40,180 --> 00:02:43,720
recognize patterns what's a pattern the

49
00:02:43,720 --> 00:02:45,190
Google dictionary definition of a

50
00:02:45,190 --> 00:02:48,760
pattern is a model or design that's used

51
00:02:48,760 --> 00:02:52,170
as a guide patterns match a sample

52
00:02:52,170 --> 00:02:55,150
design patterns are habits and practices

53
00:02:55,150 --> 00:02:58,060
that other software devs have identified

54
00:02:58,060 --> 00:03:01,270
as being effective you probably brushed

55
00:03:01,270 --> 00:03:03,340
up on design patterns for job interviews

56
00:03:03,340 --> 00:03:06,160
right am i right this is where you hear

57
00:03:06,160 --> 00:03:08,530
about them okay the goal of finding

58
00:03:08,530 --> 00:03:11,320
patterns is to stalk a mental store of

59
00:03:11,320 --> 00:03:13,570
sample solutions to problems so that

60
00:03:13,570 --> 00:03:15,790
when you encounter them you can use what

61
00:03:15,790 --> 00:03:20,350
you know as a frame of reference so in

62
00:03:20,350 --> 00:03:22,110
particular I want to mention to

63
00:03:22,110 --> 00:03:25,650
JavaScript patterns modules and

64
00:03:25,650 --> 00:03:29,470
microservices the characteristics of a

65
00:03:29,470 --> 00:03:32,170
module using the module pattern are that

66
00:03:32,170 --> 00:03:34,720
a module is independent it is

67
00:03:34,720 --> 00:03:37,810
self-contained and it is hopefully

68
00:03:37,810 --> 00:03:41,710
reusable so how you know module you'll

69
00:03:41,710 --> 00:03:43,480
know when you when you see it because it

70
00:03:43,480 --> 00:03:45,580
will probably use the keywords module

71
00:03:45,580 --> 00:03:49,690
export yesous modules are the

72
00:03:49,690 --> 00:03:51,730
fundamental building blocks of our world

73
00:03:51,730 --> 00:03:54,960
like we call them the core modules

74
00:03:54,960 --> 00:03:59,380
microservices value focused products and

75
00:03:59,380 --> 00:04:02,280
services over more monolithic projects

76
00:04:02,280 --> 00:04:04,780
these small contain units of

77
00:04:04,780 --> 00:04:07,360
functionality are more composable and

78
00:04:07,360 --> 00:04:10,870
are able to be reused in meaningful and

79
00:04:10,870 --> 00:04:13,330
reactive ways we'll hear more about

80
00:04:13,330 --> 00:04:15,850
modules and micro services as we explore

81
00:04:15,850 --> 00:04:18,700
the other secrets so knowing the

82
00:04:18,700 --> 00:04:20,830
patterns that we have here modules of

83
00:04:20,830 --> 00:04:23,260
micro services they afford as ultimate

84
00:04:23,260 --> 00:04:26,230
flexibility which brings us to our third

85
00:04:26,230 --> 00:04:27,790
secret

86
00:04:27,790 --> 00:04:32,620
rules rules outlined desired behaviors

87
00:04:32,620 --> 00:04:34,870
and improve the likelihood of good

88
00:04:34,870 --> 00:04:38,260
outcomes standards style guides and

89
00:04:38,260 --> 00:04:40,450
coding conventions are types of rules

90
00:04:40,450 --> 00:04:43,240
that can be as specific as the usage of

91
00:04:43,240 --> 00:04:47,470
spacing or as high level as font and

92
00:04:47,470 --> 00:04:50,380
color requirements like you might have

93
00:04:50,380 --> 00:04:52,510
heard of and I currently use Jes

94
00:04:52,510 --> 00:04:55,540
standard it might work so agreeing on

95
00:04:55,540 --> 00:04:58,510
rules lessens the cognitive work of a

96
00:04:58,510 --> 00:05:01,990
dub when they're reading the code some

97
00:05:01,990 --> 00:05:04,990
general rules of thumb are to match new

98
00:05:04,990 --> 00:05:08,950
additions to the surrounding code also

99
00:05:08,950 --> 00:05:13,810
use meaningful names well what enforces

100
00:05:13,810 --> 00:05:18,670
these rules hello elephant made of dryer

101
00:05:18,670 --> 00:05:22,360
lint a litter is what enforces coding

102
00:05:22,360 --> 00:05:26,860
Convention rules lynching is the process

103
00:05:26,860 --> 00:05:29,920
of running a program to analyze code for

104
00:05:29,920 --> 00:05:34,180
errors and rule exceptions linters help

105
00:05:34,180 --> 00:05:36,580
keep code clean and readable which

106
00:05:36,580 --> 00:05:39,940
brings us to secret number four you were

107
00:05:39,940 --> 00:05:42,570
all waiting for this all month right

108
00:05:42,570 --> 00:05:48,390
okay secret number four read code

109
00:05:48,390 --> 00:05:50,920
personally no right some people this is

110
00:05:50,920 --> 00:05:55,230
controversial personally if I'm curious

111
00:05:55,230 --> 00:05:58,600
I'm likely to try to find something to

112
00:05:58,600 --> 00:06:01,210
read an article with code samples is

113
00:06:01,210 --> 00:06:05,050
great the first page of the github repo

114
00:06:05,050 --> 00:06:09,520
okay possibly the example files and or

115
00:06:09,520 --> 00:06:14,050
the index so I like to read code reading

116
00:06:14,050 --> 00:06:16,540
code is an obvious way to learn syntax

117
00:06:16,540 --> 00:06:20,220
and discover new approaches to problems

118
00:06:20,220 --> 00:06:23,320
the goal of code reading is to observe

119
00:06:23,320 --> 00:06:26,770
patterns and techniques and learn to

120
00:06:26,770 --> 00:06:29,729
recognize when they're useful

121
00:06:29,729 --> 00:06:32,620
ways I also might try to internalize

122
00:06:32,620 --> 00:06:35,889
what I'm seeing is to visualize it by

123
00:06:35,889 --> 00:06:39,460
drawing diagrams making flow charts or

124
00:06:39,460 --> 00:06:44,860
writing stories or use cases so I would

125
00:06:44,860 --> 00:06:47,620
read the package.json and the readme to

126
00:06:47,620 --> 00:06:51,400
get a high level perspective and then

127
00:06:51,400 --> 00:06:53,949
also if I was encountering a new project

128
00:06:53,949 --> 00:06:56,439
that was actually a live production

129
00:06:56,439 --> 00:06:58,870
project I would look for and scan that

130
00:06:58,870 --> 00:07:01,599
configs because the configs might share

131
00:07:01,599 --> 00:07:04,060
details about dependencies between

132
00:07:04,060 --> 00:07:06,759
systems this is a joke you guys upcoming

133
00:07:06,759 --> 00:07:13,539
a joke configs hold all the keys okay

134
00:07:13,539 --> 00:07:16,949
thanks I really wanted to see your lap

135
00:07:16,949 --> 00:07:19,689
okay on to number five functional

136
00:07:19,689 --> 00:07:22,389
programming I'm also working on writing

137
00:07:22,389 --> 00:07:25,569
functions without side effects functions

138
00:07:25,569 --> 00:07:28,050
that are in mutable and stateless

139
00:07:28,050 --> 00:07:30,520
functional programming is about

140
00:07:30,520 --> 00:07:33,879
composability and using small pieces

141
00:07:33,879 --> 00:07:37,539
that do one thing well all right these

142
00:07:37,539 --> 00:07:39,879
two slides might help us conceptualize

143
00:07:39,879 --> 00:07:44,379
this the turtles from XKCD are just one

144
00:07:44,379 --> 00:07:47,020
of the multiple comics of turtles that

145
00:07:47,020 --> 00:07:48,939
are probably the most eloquent

146
00:07:48,939 --> 00:07:51,699
expression that helped me understand how

147
00:07:51,699 --> 00:07:57,330
to think functionally so here's the code

148
00:07:57,330 --> 00:08:01,240
pretend that this is the pile of turtles

149
00:08:01,240 --> 00:08:08,199
the bottom turtle would say the next

150
00:08:08,199 --> 00:08:11,379
turtle would stay ARF because those it

151
00:08:11,379 --> 00:08:14,259
was called and then the cat turtle or

152
00:08:14,259 --> 00:08:16,449
the de bird turtle would say tweet and

153
00:08:16,449 --> 00:08:20,469
then the next one what would happen we

154
00:08:20,469 --> 00:08:23,139
get back to the cat and that's as far as

155
00:08:23,139 --> 00:08:24,879
we have in the picture but you could

156
00:08:24,879 --> 00:08:28,749
imagine that the next turtle that could

157
00:08:28,749 --> 00:08:31,779
be added would be a dog and then a bird

158
00:08:31,779 --> 00:08:34,719
and then a cat and then a dog and then a

159
00:08:34,719 --> 00:08:37,089
bird and you can basically build a

160
00:08:37,089 --> 00:08:37,919
ladder

161
00:08:37,919 --> 00:08:40,950
tall enough to paint a house by

162
00:08:40,950 --> 00:08:42,870
imagining that each turtle is a

163
00:08:42,870 --> 00:08:46,019
different function so can you see how

164
00:08:46,019 --> 00:08:48,510
this chain of functions is a powerful

165
00:08:48,510 --> 00:08:53,360
way to encapsulate logic in the same way

166
00:08:53,360 --> 00:08:56,490
that products and services in an

167
00:08:56,490 --> 00:08:59,370
ecosystem are meaningful together pure

168
00:08:59,370 --> 00:09:02,279
functions are purposely simple building

169
00:09:02,279 --> 00:09:04,889
blocks that can accomplish complicated

170
00:09:04,889 --> 00:09:09,060
objectives in a really concise way for a

171
00:09:09,060 --> 00:09:12,420
great deep dive see it carefully

172
00:09:12,420 --> 00:09:14,760
composed logic of which of the JSL a

173
00:09:14,760 --> 00:09:18,660
talk in the early part of 2015 okay fine

174
00:09:18,660 --> 00:09:20,690
functional programming was really fun

175
00:09:20,690 --> 00:09:25,560
next secrets comment and document all

176
00:09:25,560 --> 00:09:29,820
right actually comments are a lie do not

177
00:09:29,820 --> 00:09:31,829
believe everything you read in the

178
00:09:31,829 --> 00:09:35,940
comments very probably they're a remnant

179
00:09:35,940 --> 00:09:39,480
of an earlier dev possibly your past

180
00:09:39,480 --> 00:09:45,029
self trying to figure stuff out do write

181
00:09:45,029 --> 00:09:47,070
comments if you think it's going to help

182
00:09:47,070 --> 00:09:49,800
you but if you write comments don't

183
00:09:49,800 --> 00:09:52,610
insult yourself in the comments because

184
00:09:52,610 --> 00:09:56,130
someone else might be reading them but

185
00:09:56,130 --> 00:09:58,410
more importantly your future self is now

186
00:09:58,410 --> 00:10:02,760
in charge of handling insults some of

187
00:10:02,760 --> 00:10:05,399
the best commentary is found outside of

188
00:10:05,399 --> 00:10:08,459
the code inside of version control with

189
00:10:08,459 --> 00:10:11,130
get the commit history gives context

190
00:10:11,130 --> 00:10:15,329
about who when and what was going on

191
00:10:15,329 --> 00:10:17,820
when any given line was added or

192
00:10:17,820 --> 00:10:21,600
modified so now we're beginning to talk

193
00:10:21,600 --> 00:10:24,149
about documentation which is sometimes

194
00:10:24,149 --> 00:10:27,930
an afterthought one way to get

195
00:10:27,930 --> 00:10:30,480
documentation done is to consider

196
00:10:30,480 --> 00:10:33,240
reusing the example that you're building

197
00:10:33,240 --> 00:10:36,060
for development you need some way to

198
00:10:36,060 --> 00:10:37,829
test your code no matter what you're

199
00:10:37,829 --> 00:10:40,769
doing something so this can be a unit

200
00:10:40,769 --> 00:10:44,069
test or an example that you could then

201
00:10:44,069 --> 00:10:46,310
convert to the readme

202
00:10:46,310 --> 00:10:49,350
unit tests are developers favorite type

203
00:10:49,350 --> 00:10:53,190
of documentation and last month's JSL a

204
00:10:53,190 --> 00:10:55,230
feature to talk on unit tests by Sarah

205
00:10:55,230 --> 00:10:57,030
Rosh so if you want to learn more go

206
00:10:57,030 --> 00:11:01,590
look that up if you're on a team and you

207
00:11:01,590 --> 00:11:04,020
haven't got any documentation at all and

208
00:11:04,020 --> 00:11:07,350
you are also using github a really easy

209
00:11:07,350 --> 00:11:10,500
way to begin documenting is to use the

210
00:11:10,500 --> 00:11:13,980
wiki feature i also want to mention

211
00:11:13,980 --> 00:11:16,100
while we're talking about documentation

212
00:11:16,100 --> 00:11:20,970
this interactive documentation that is

213
00:11:20,970 --> 00:11:23,880
kind of bleep blending services and

214
00:11:23,880 --> 00:11:26,910
documentation and that's a swagger tool

215
00:11:26,910 --> 00:11:30,050
as something that's some out there so

216
00:11:30,050 --> 00:11:32,910
there's three levels of documentation I

217
00:11:32,910 --> 00:11:36,360
wanted to quickly cover on the method

218
00:11:36,360 --> 00:11:40,020
level you should write down the expected

219
00:11:40,020 --> 00:11:43,530
inputs and outputs on the module level

220
00:11:43,530 --> 00:11:46,980
you should include usage examples and on

221
00:11:46,980 --> 00:11:49,260
the product level for the project level

222
00:11:49,260 --> 00:11:51,660
you want to include environment details

223
00:11:51,660 --> 00:11:54,240
just like what you would want in a bug

224
00:11:54,240 --> 00:11:57,300
report also instructions for how to get

225
00:11:57,300 --> 00:12:00,840
a new instance up and running would you

226
00:12:00,840 --> 00:12:02,340
believe it we're already up to the

227
00:12:02,340 --> 00:12:11,100
seventh secret kiss dry or die all right

228
00:12:11,100 --> 00:12:13,130
kiss you all know what that stands for

229
00:12:13,130 --> 00:12:17,790
keep it simple silly that's not what you

230
00:12:17,790 --> 00:12:20,550
thought it was going to say right but

231
00:12:20,550 --> 00:12:24,650
really really simple takes practice

232
00:12:24,650 --> 00:12:29,760
what's easier than copying code if you

233
00:12:29,760 --> 00:12:32,190
copy and paste something that's pretty

234
00:12:32,190 --> 00:12:34,230
simple it's pretty simple to do and

235
00:12:34,230 --> 00:12:36,740
honestly that is also just fine

236
00:12:36,740 --> 00:12:39,420
sometimes it's perfect and will be all

237
00:12:39,420 --> 00:12:42,930
you ever need to do but if you find you

238
00:12:42,930 --> 00:12:45,030
have to maintain duplicate code you're

239
00:12:45,030 --> 00:12:46,710
probably going to end up doing a

240
00:12:46,710 --> 00:12:50,670
refactor because the golden rule is die

241
00:12:50,670 --> 00:12:55,170
or dry don't repeat yourself also known

242
00:12:55,170 --> 00:12:57,420
as duplication is

243
00:12:57,420 --> 00:13:00,100
the reasons for this are that one

244
00:13:00,100 --> 00:13:02,710
version is more maintainable and it's

245
00:13:02,710 --> 00:13:05,770
easier to reason about well abstracted

246
00:13:05,770 --> 00:13:08,260
code so there is a tension between

247
00:13:08,260 --> 00:13:11,950
what's easy and what's good the secret

248
00:13:11,950 --> 00:13:15,040
is to get it working first then try and

249
00:13:15,040 --> 00:13:16,330
get it right which may include

250
00:13:16,330 --> 00:13:23,190
abstraction great number 8 data rules

251
00:13:23,190 --> 00:13:26,470
okay mostly all systems exist to funnel

252
00:13:26,470 --> 00:13:29,370
data some data flows are bi-directional

253
00:13:29,370 --> 00:13:34,450
others aren't but everyone is unique the

254
00:13:34,450 --> 00:13:37,240
group gathered here tonight has a large

255
00:13:37,240 --> 00:13:39,310
breadth of experience with different

256
00:13:39,310 --> 00:13:41,620
data sources we probably worked with

257
00:13:41,620 --> 00:13:44,920
api's databases and real-time data

258
00:13:44,920 --> 00:13:47,230
streams like with showcase at a previous

259
00:13:47,230 --> 00:13:50,560
JSL a where we saw the custom jawbone

260
00:13:50,560 --> 00:13:52,990
app consuming biometric data from the

261
00:13:52,990 --> 00:13:56,380
device now I don't know if anyone here

262
00:13:56,380 --> 00:13:57,970
would like to share but this is where I

263
00:13:57,970 --> 00:13:59,620
was going to take comments if anybody

264
00:13:59,620 --> 00:14:02,050
wanted to share data war stories now is

265
00:14:02,050 --> 00:14:06,400
your chance anyone have a specially

266
00:14:06,400 --> 00:14:08,530
interesting data story they'd like to

267
00:14:08,530 --> 00:14:15,560
share all right I'll tell you mine

268
00:14:15,570 --> 00:14:41,490
oh yes please tell me

269
00:14:41,500 --> 00:14:50,630
Oh

270
00:14:50,640 --> 00:14:54,790
he gave you a pile of crap this story

271
00:14:54,790 --> 00:14:56,740
here which I don't know if everyone was

272
00:14:56,740 --> 00:14:59,560
able to hear as well as I was he had set

273
00:14:59,560 --> 00:15:02,140
out some code and it was returned with a

274
00:15:02,140 --> 00:15:06,160
function called crap in it so um that's

275
00:15:06,160 --> 00:15:10,350
pretty exciting kind of data experience

276
00:15:10,350 --> 00:15:18,100
alright um another my harrowing tale of

277
00:15:18,100 --> 00:15:21,160
data was actually not quite my own but

278
00:15:21,160 --> 00:15:24,340
another dev told me how they forced

279
00:15:24,340 --> 00:15:27,130
payment from a client by they had a

280
00:15:27,130 --> 00:15:30,310
requirement to host the website on the

281
00:15:30,310 --> 00:15:32,110
clients servers but they had no

282
00:15:32,110 --> 00:15:34,540
requirement to host the database on the

283
00:15:34,540 --> 00:15:37,810
clients servers so they didn't and then

284
00:15:37,810 --> 00:15:41,740
they use the hostage database to force

285
00:15:41,740 --> 00:15:45,250
the payment so what I'm driving at here

286
00:15:45,250 --> 00:15:48,280
and which is leading into the next topic

287
00:15:48,280 --> 00:15:50,620
is that your data is probably your most

288
00:15:50,620 --> 00:15:58,440
valuable resource that brings up logging

289
00:15:58,440 --> 00:16:01,570
you probably have volumes of valuable

290
00:16:01,570 --> 00:16:03,610
log data and elk or maybe you don't but

291
00:16:03,610 --> 00:16:06,400
if you do you're probably already

292
00:16:06,400 --> 00:16:08,770
reaping the benefit of standardized logs

293
00:16:08,770 --> 00:16:12,970
across products and services some of the

294
00:16:12,970 --> 00:16:16,810
secrets to having good logs are to write

295
00:16:16,810 --> 00:16:19,720
log server site at the beginning and end

296
00:16:19,720 --> 00:16:22,780
of processes if it's the long running

297
00:16:22,780 --> 00:16:27,100
process log the process duration also

298
00:16:27,100 --> 00:16:31,150
you should log errors and write logs on

299
00:16:31,150 --> 00:16:34,810
rights it's helpful when you're looking

300
00:16:34,810 --> 00:16:37,450
at some generated file to be able to

301
00:16:37,450 --> 00:16:39,700
refer back to the logs and see what

302
00:16:39,700 --> 00:16:44,320
process made that right on the client

303
00:16:44,320 --> 00:16:48,420
side oh this is the login gesture right

304
00:16:48,420 --> 00:16:52,889
and that's not me I wish it was another

305
00:16:52,889 --> 00:16:55,529
time I'm going to use this chainsaw for

306
00:16:55,529 --> 00:16:58,889
a logs okay on the client side you

307
00:16:58,889 --> 00:17:01,589
should leave commented out console logs

308
00:17:01,589 --> 00:17:03,959
I know previously I had said that

309
00:17:03,959 --> 00:17:07,049
comments are lies but this is the

310
00:17:07,049 --> 00:17:10,230
exception console.log comments are great

311
00:17:10,230 --> 00:17:13,500
they are my favorite kind of comment it

312
00:17:13,500 --> 00:17:18,089
tells you here once was debugging but do

313
00:17:18,089 --> 00:17:20,880
make sure if you leave these logs that

314
00:17:20,880 --> 00:17:23,010
you comment the line out it's not polite

315
00:17:23,010 --> 00:17:26,089
to leave messy trails in the inspector

316
00:17:26,089 --> 00:17:29,490
all right and we have reached number 10

317
00:17:29,490 --> 00:17:34,799
the end the secret here is to listen to

318
00:17:34,799 --> 00:17:38,640
your audience identify stakeholders and

319
00:17:38,640 --> 00:17:41,010
find out how they interact with the code

320
00:17:41,010 --> 00:17:44,490
to learn their expectations we know that

321
00:17:44,490 --> 00:17:46,530
there are three audiences for code like

322
00:17:46,530 --> 00:17:49,559
get developers and the CPU there's

323
00:17:49,559 --> 00:17:52,290
really only one audience for products

324
00:17:52,290 --> 00:17:55,980
that's the users so to play nicely with

325
00:17:55,980 --> 00:17:59,130
stakeholders use their terms and names

326
00:17:59,130 --> 00:18:02,490
or if they have really bad names and

327
00:18:02,490 --> 00:18:05,130
terms feed them good names in terms so

328
00:18:05,130 --> 00:18:08,690
that you can develop a common vocabulary

329
00:18:08,690 --> 00:18:11,850
before I close this listicle adventure I

330
00:18:11,850 --> 00:18:13,620
want to make sure that we share a

331
00:18:13,620 --> 00:18:15,780
sufficiently broad definition of

332
00:18:15,780 --> 00:18:19,770
audience because we have a legal and

333
00:18:19,770 --> 00:18:22,380
ethical requirement to give blind people

334
00:18:22,380 --> 00:18:24,510
and other people who are differently

335
00:18:24,510 --> 00:18:28,080
abled access to the world wild web if

336
00:18:28,080 --> 00:18:30,480
you want to work on the consumer if you

337
00:18:30,480 --> 00:18:32,280
do work on the consumer facing side of a

338
00:18:32,280 --> 00:18:34,559
product the bureau of internet

339
00:18:34,559 --> 00:18:36,380
accessibility offers a free

340
00:18:36,380 --> 00:18:40,080
accessibility grading service but if you

341
00:18:40,080 --> 00:18:41,669
want to make your website immediately

342
00:18:41,669 --> 00:18:44,490
more accessible the top tip is to

343
00:18:44,490 --> 00:18:48,570
include a skip navigation button before

344
00:18:48,570 --> 00:18:52,110
the page nav to save screen readers the

345
00:18:52,110 --> 00:18:55,000
monotony of reading the menu

346
00:18:55,000 --> 00:19:01,810
and again so to wrap up these are the 10

347
00:19:01,810 --> 00:19:04,450
no longer secret tips which I found

348
00:19:04,450 --> 00:19:06,550
useful and trying to create perfectly

349
00:19:06,550 --> 00:19:16,770
good code thank you very much

350
00:19:16,780 --> 00:19:30,930
any questions for right

351
00:19:30,940 --> 00:19:33,559
I'll put him up there for sure I didn't

352
00:19:33,559 --> 00:19:35,119
do that yet but i will do that before i

353
00:19:35,119 --> 00:19:40,009
go home yeah i'll put him in the slack

354
00:19:40,009 --> 00:19:44,780
first great

355
00:19:44,790 --> 00:19:52,850
all right enough array

356
00:19:52,860 --> 00:19:54,929
this is awesome so like I said my name

357
00:19:54,929 --> 00:19:57,210
is Aman I studied physics at University

358
00:19:57,210 --> 00:20:00,240
of Cincinnati I now work for this

359
00:20:00,240 --> 00:20:02,540
company data czar and before i get into

360
00:20:02,540 --> 00:20:05,010
d3 and awesomeness of d3 i want to talk

361
00:20:05,010 --> 00:20:06,540
to you guys about what we do a little

362
00:20:06,540 --> 00:20:09,480
bit so we can get a little context so

363
00:20:09,480 --> 00:20:11,070
days are is a research collaboration or

364
00:20:11,070 --> 00:20:12,929
data collaboration platform we allow

365
00:20:12,929 --> 00:20:15,780
people to upload data analyze that make

366
00:20:15,780 --> 00:20:17,309
visualization stuff like that and share

367
00:20:17,309 --> 00:20:19,620
it back to whoever uploaded the data so

368
00:20:19,620 --> 00:20:21,660
you can kind of see context and I guess

