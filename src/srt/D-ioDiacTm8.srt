1
00:00:37,969 --> 00:00:41,789

so all the most of our previous

2
00:00:41,789 --> 00:00:43,739
communication of react we talked about

3
00:00:43,739 --> 00:00:46,890
big ideas like the virtual Dom we

4
00:00:46,890 --> 00:00:48,839
rendering the entire application on

5
00:00:48,839 --> 00:00:53,069
every single date or don't use template

6
00:00:53,069 --> 00:00:56,129
use JavaScript and in this talk I'm not

7
00:00:56,129 --> 00:00:57,989
going to cover those but I'm going to

8
00:00:57,989 --> 00:01:01,170
talk about all the small details about

9
00:01:01,170 --> 00:01:04,379
the API of react that makes it scale to

10
00:01:04,379 --> 00:01:07,469
Facebook engineering so right now we

11
00:01:07,469 --> 00:01:11,310
have more than we have many subs ins we

12
00:01:11,310 --> 00:01:13,110
are component inside of Facebook and

13
00:01:13,110 --> 00:01:16,140
we're really committed to it and this

14
00:01:16,140 --> 00:01:20,219
requires some things you know to make it

15
00:01:20,219 --> 00:01:25,920
scale and so the best way to make the

16
00:01:25,920 --> 00:01:28,979
project the developers more productive

17
00:01:28,979 --> 00:01:31,590
using react has been to minimize the

18
00:01:31,590 --> 00:01:34,710
time to find the root cause of a bug so

19
00:01:34,710 --> 00:01:37,380
ideally we would like to reduce the

20
00:01:37,380 --> 00:01:39,780
number of bugs in our system and so we

21
00:01:39,780 --> 00:01:43,109
can do that one by not making any more

22
00:01:43,109 --> 00:01:45,570
bugs but this is really hard to do and

23
00:01:45,570 --> 00:01:49,619
the second one is to make fixing bugs a

24
00:01:49,619 --> 00:01:52,530
lot easier so this is what we've been

25
00:01:52,530 --> 00:01:55,289
trying to do with react and the way to

26
00:01:55,289 --> 00:01:59,429
do that is first you need to understand

27
00:01:59,429 --> 00:02:05,280
how a bag is being fixed so for example

28
00:02:05,280 --> 00:02:08,369
in this case we have a 2d MVC with one

29
00:02:08,369 --> 00:02:13,050
element but it says two items left so as

30
00:02:13,050 --> 00:02:14,590
obviously a bug

31
00:02:14,590 --> 00:02:17,560
so as a developer you're first going to

32
00:02:17,560 --> 00:02:20,170
try to reproduce the bug and put your

33
00:02:20,170 --> 00:02:23,020
application in that state and then

34
00:02:23,020 --> 00:02:25,000
you're going to want to find the code

35
00:02:25,000 --> 00:02:27,700
that was being used to generate this

36
00:02:27,700 --> 00:02:30,760
number two and so as a web engineer

37
00:02:30,760 --> 00:02:32,050
you're going to right click inspect

38
00:02:32,050 --> 00:02:34,150
element and they're going to see that

39
00:02:34,150 --> 00:02:37,989
and so now at this point they're going

40
00:02:37,989 --> 00:02:40,840
to find some things that's unique for

41
00:02:40,840 --> 00:02:43,180
example the string to do count and

42
00:02:43,180 --> 00:02:46,090
you're going to wrap on your entire code

43
00:02:46,090 --> 00:02:48,310
base and you're going to look for to the

44
00:02:48,310 --> 00:02:50,319
count and you're going to find all the

45
00:02:50,319 --> 00:02:53,610
matches and try to guess which one is

46
00:02:53,610 --> 00:02:57,640
used to generate it and so it usually

47
00:02:57,640 --> 00:03:00,040
works pretty well but it's a bit of a

48
00:03:00,040 --> 00:03:03,010
eaten miss process and sometimes like

49
00:03:03,010 --> 00:03:05,280
you're going to use a component that's

50
00:03:05,280 --> 00:03:07,810
being used like all over the place and

51
00:03:07,810 --> 00:03:10,540
you're going to have to dig more and you

52
00:03:10,540 --> 00:03:14,080
need an intimate understanding of the

53
00:03:14,080 --> 00:03:15,730
code base that you're looking at in

54
00:03:15,730 --> 00:03:18,489
order to debug so in order to make this

55
00:03:18,489 --> 00:03:21,340
part easier we introduced the reactive

56
00:03:21,340 --> 00:03:24,609
tools so if you install this little

57
00:03:24,609 --> 00:03:28,660
Chrome extension then you can click on

58
00:03:28,660 --> 00:03:32,350
the react app and it's going to give you

59
00:03:32,350 --> 00:03:36,370
the react virtual Dom node that was

60
00:03:36,370 --> 00:03:39,010
being used to generate this element and

61
00:03:39,010 --> 00:03:42,400
so in this case they're going to see to

62
00:03:42,400 --> 00:03:45,639
do footer and the interesting thing with

63
00:03:45,639 --> 00:03:49,120
this is at Facebook we uniquely named

64
00:03:49,120 --> 00:03:52,450
all our react components and so you can

65
00:03:52,450 --> 00:03:55,269
look for the file to do footer digest to

66
00:03:55,269 --> 00:03:56,950
find where the code is being executed

67
00:03:56,950 --> 00:04:00,670
and we've got some nice things as well

68
00:04:00,670 --> 00:04:03,459
which is props and state of your

69
00:04:03,459 --> 00:04:05,709
components available on the right and

70
00:04:05,709 --> 00:04:07,750
they'll live editable so you can change

71
00:04:07,750 --> 00:04:09,760
the count completed count and it's going

72
00:04:09,760 --> 00:04:14,680
to level dates so now we found the file

73
00:04:14,680 --> 00:04:18,700
that was being used and this variable

74
00:04:18,700 --> 00:04:24,310
count is the one that value is two and

75
00:04:24,310 --> 00:04:28,180
we want it to be one and so now when I

76
00:04:28,180 --> 00:04:31,120
ask people how do you debug this like oh

77
00:04:31,120 --> 00:04:33,940
what's of your process they're going to

78
00:04:33,940 --> 00:04:37,030
say oh I'm going to use a debugger and I

79
00:04:37,030 --> 00:04:38,890
often look at them look over the

80
00:04:38,890 --> 00:04:40,930
shoulder and I'm like yeah you're not

81
00:04:40,930 --> 00:04:42,970
doing it right like you're lost and it's

82
00:04:42,970 --> 00:04:44,440
not working and there are two

83
00:04:44,440 --> 00:04:48,430
fundamental issues because with that so

84
00:04:48,430 --> 00:04:50,830
the first one is the debugger is forward

85
00:04:50,830 --> 00:04:52,419
in time so you set a breakpoint

86
00:04:52,419 --> 00:04:55,750
somewhere and you go next was as a

87
00:04:55,750 --> 00:04:58,390
developer what you want to do is to find

88
00:04:58,390 --> 00:05:01,210
the places where this variable has been

89
00:05:01,210 --> 00:05:04,150
updated in the past and so you want to

90
00:05:04,150 --> 00:05:08,620
go backward and the second one is the

91
00:05:08,620 --> 00:05:10,300
debugger you're going to execute like

92
00:05:10,300 --> 00:05:12,940
every single line so you can you have

93
00:05:12,940 --> 00:05:15,219
some control you can skip over function

94
00:05:15,219 --> 00:05:17,710
but like it's really limited and if

95
00:05:17,710 --> 00:05:20,409
somehow you screw up and you press run

96
00:05:20,409 --> 00:05:22,479
one more time like you have to repeat

97
00:05:22,479 --> 00:05:24,460
the process like from the start and very

98
00:05:24,460 --> 00:05:27,460
hammering whereas at the developer you

99
00:05:27,460 --> 00:05:30,070
would like to be able to go back only

100
00:05:30,070 --> 00:05:32,020
where this count variable has been

101
00:05:32,020 --> 00:05:35,289
updated and then and if it has been

102
00:05:35,289 --> 00:05:36,789
updated multiple time you're going to go

103
00:05:36,789 --> 00:05:39,520
back and back and back and you can put a

104
00:05:39,520 --> 00:05:41,409
controller plug and we run and see if

105
00:05:41,409 --> 00:05:44,590
this variable as a right value and once

106
00:05:44,590 --> 00:05:48,099
you see yeah once you isolate where the

107
00:05:48,099 --> 00:05:50,830
Prabhavati curl is then you can do your

108
00:05:50,830 --> 00:05:56,650
things and fix the bug and so now that

109
00:05:56,650 --> 00:05:59,349
we understand the process we need to be

110
00:05:59,349 --> 00:06:03,370
able to actually make it faster so the

111
00:06:03,370 --> 00:06:05,830
first type of variable the account can

112
00:06:05,830 --> 00:06:08,590
be is local variable and local variable

113
00:06:08,590 --> 00:06:11,229
are easy to debug because they are

114
00:06:11,229 --> 00:06:14,800
scoped to a function and most of the

115
00:06:14,800 --> 00:06:17,289
time functions are really small like

116
00:06:17,289 --> 00:06:20,979
less one than one and red lines and so

117
00:06:20,979 --> 00:06:22,659
you can just follow up as a developer

118
00:06:22,659 --> 00:06:25,240
and you're going to see why it's not

119
00:06:25,240 --> 00:06:27,099
working and why the assignment is not

120
00:06:27,099 --> 00:06:33,460
good so at the extreme opposite is the

121
00:06:33,460 --> 00:06:36,550
state of your application and if you

122
00:06:36,550 --> 00:06:38,979
don't do anything on your code base to

123
00:06:38,979 --> 00:06:41,160
structure it correctly

124
00:06:41,160 --> 00:06:44,620
the variable can be updated like form

125
00:06:44,620 --> 00:06:47,470
anywhere like your state can be updated

126
00:06:47,470 --> 00:06:49,240
from anywhere and any file in your

127
00:06:49,240 --> 00:06:51,720
system and this makes it very very hard

128
00:06:51,720 --> 00:06:54,120
to go back one step

129
00:06:54,120 --> 00:06:58,810
so with react what we've done is we

130
00:06:58,810 --> 00:07:03,100
scoped the state to a component a react

131
00:07:03,100 --> 00:07:06,520
component this means that if a state

132
00:07:06,520 --> 00:07:08,890
variable of the react component doesn't

133
00:07:08,890 --> 00:07:11,050
have the right value you only have to

134
00:07:11,050 --> 00:07:12,910
look inside of this component to see why

135
00:07:12,910 --> 00:07:19,900
it was broken so but one file is still

136
00:07:19,900 --> 00:07:24,400
quite big and we with react we added

137
00:07:24,400 --> 00:07:29,020
another constraint which is that the

138
00:07:29,020 --> 00:07:33,130
only ways to modify the states is yet

139
00:07:33,130 --> 00:07:35,530
two functions get initial state and

140
00:07:35,530 --> 00:07:38,800
third state and because we added those

141
00:07:38,800 --> 00:07:41,800
constraints you can just control F under

142
00:07:41,800 --> 00:07:44,050
file and look for set state and you're

143
00:07:44,050 --> 00:07:45,760
going to find all the places where the

144
00:07:45,760 --> 00:07:48,430
state has been updated and this in a

145
00:07:48,430 --> 00:07:51,940
couple of seconds so we reduced the

146
00:07:51,940 --> 00:07:54,310
search space from the entire code base

147
00:07:54,310 --> 00:08:00,600
to a couple of lines in your file and

148
00:08:00,600 --> 00:08:05,950
the second type of variable in a reactor

149
00:08:05,950 --> 00:08:09,580
application is props so props are values

150
00:08:09,580 --> 00:08:11,380
that are being passed from your parents

151
00:08:11,380 --> 00:08:14,290
and one of the great property of props

152
00:08:14,290 --> 00:08:16,750
is that they're immutable so you should

153
00:08:16,750 --> 00:08:19,210
never update your props this means that

154
00:08:19,210 --> 00:08:23,250
if the value of your prop is not correct

155
00:08:23,250 --> 00:08:25,870
you just have to look for your parents

156
00:08:25,870 --> 00:08:30,240
for the call site that was being used

157
00:08:30,240 --> 00:08:34,000
but still the call sites if your

158
00:08:34,000 --> 00:08:36,700
component is only being used one or

159
00:08:36,700 --> 00:08:39,610
twice and it's going to be easy but if

160
00:08:39,610 --> 00:08:42,250
it's a core component then you're going

161
00:08:42,250 --> 00:08:46,810
to have a lot of Co sites and one of the

162
00:08:46,810 --> 00:08:47,320
trade

163
00:08:47,320 --> 00:08:52,720
of passing things program it declare

164
00:08:52,720 --> 00:08:57,070
like of passing things and specifying it

165
00:08:57,070 --> 00:08:59,440
is that it's quite viable for example if

166
00:08:59,440 --> 00:09:01,450
you want to pass an element from a

167
00:09:01,450 --> 00:09:03,750
grandparent or a grandparent to a child

168
00:09:03,750 --> 00:09:07,870
then you need all the elements in the

169
00:09:07,870 --> 00:09:11,530
between to know about it and we look

170
00:09:11,530 --> 00:09:14,560
around and there's actually a solution

171
00:09:14,560 --> 00:09:16,630
that for this which is for example in

172
00:09:16,630 --> 00:09:21,700
angular the scope all the values are in

173
00:09:21,700 --> 00:09:23,350
a rigid from your parent and a

174
00:09:23,350 --> 00:09:24,820
grandparent and you're going one parent

175
00:09:24,820 --> 00:09:27,340
so this has a good effect of reducing

176
00:09:27,340 --> 00:09:29,350
the number of code that you have to

177
00:09:29,350 --> 00:09:31,860
write but it also has a very bad effect

178
00:09:31,860 --> 00:09:35,950
which is that if a perhaps is doesn't

179
00:09:35,950 --> 00:09:38,680
have the right value so now you not only

180
00:09:38,680 --> 00:09:41,290
have to check all the co sites but now

181
00:09:41,290 --> 00:09:43,210
all of their code sites and all of their

182
00:09:43,210 --> 00:09:44,860
whole site and all of the echo sites and

183
00:09:44,860 --> 00:09:47,410
at this point you basically lost you

184
00:09:47,410 --> 00:09:49,540
have to search like a large part of your

185
00:09:49,540 --> 00:09:51,370
code base and it's really hard to track

186
00:09:51,370 --> 00:09:56,500
bugs and as a corollary it's also hard

187
00:09:56,500 --> 00:10:00,790
for someone to change evaluate at a very

188
00:10:00,790 --> 00:10:03,010
root level because you've got no idea

189
00:10:03,010 --> 00:10:06,190
was children and grandchildren and want

190
00:10:06,190 --> 00:10:07,630
grandchildren are going to be affected

191
00:10:07,630 --> 00:10:10,570
so in order to write your you in order

192
00:10:10,570 --> 00:10:12,420
to test if you didn't break anything

193
00:10:12,420 --> 00:10:14,770
like you're going to have to check a lot

194
00:10:14,770 --> 00:10:16,720
of files and usually you're not going to

195
00:10:16,720 --> 00:10:20,110
and you're going to introduce bugs so we

196
00:10:20,110 --> 00:10:22,480
decided not to introduce this feature

197
00:10:22,480 --> 00:10:27,400
and instead having a lot being a bit

198
00:10:27,400 --> 00:10:33,250
more boilerplate and again if you're in

199
00:10:33,250 --> 00:10:38,440
a developer tools you can just press up

200
00:10:38,440 --> 00:10:40,180
and you're going to see which parent

201
00:10:40,180 --> 00:10:42,730
components has been called so if you

202
00:10:42,730 --> 00:10:44,680
ended in this setup you can know

203
00:10:44,680 --> 00:10:49,090
instantly the local sites so it's again

204
00:10:49,090 --> 00:10:55,160
shortening the step

205
00:10:55,170 --> 00:10:58,720
so this is for profs and States and we

206
00:10:58,720 --> 00:11:00,670
also introduced something that's very

207
00:11:00,670 --> 00:11:04,270
unique among JavaScript libraries which

208
00:11:04,270 --> 00:11:09,910
is that you can type your probes and for

209
00:11:09,910 --> 00:11:14,440
example in this case the count value is

210
00:11:14,440 --> 00:11:17,140
a number and is if required and active

211
00:11:17,140 --> 00:11:19,630
to the world is a string and we're doing

212
00:11:19,630 --> 00:11:23,680
at runtime to check those types and in

213
00:11:23,680 --> 00:11:26,230
order to understand why it's useful I'm

214
00:11:26,230 --> 00:11:30,459
going to step back and look at languages

215
00:11:30,459 --> 00:11:33,820
in general so we've got basically like

216
00:11:33,820 --> 00:11:36,810
two main families static languages and

217
00:11:36,810 --> 00:11:40,870
dynamic languages and if you see the

218
00:11:40,870 --> 00:11:43,480
evolution of static languages they're

219
00:11:43,480 --> 00:11:47,770
trying to make you write less types for

220
00:11:47,770 --> 00:11:50,470
example in C++ they recently introduced

221
00:11:50,470 --> 00:11:54,029
the Otaki world which lets the compiler

222
00:11:54,029 --> 00:11:57,010
infer the type of the variable for you

223
00:11:57,010 --> 00:11:59,980
so you have to write it and now if you

224
00:11:59,980 --> 00:12:02,830
look at dynamic languages for example

225
00:12:02,830 --> 00:12:06,910
JavaScript and PHP since you don't write

226
00:12:06,910 --> 00:12:09,190
any type by default we want to write

227
00:12:09,190 --> 00:12:12,430
more types and for example JavaScript

228
00:12:12,430 --> 00:12:16,360
introduced typescript and PHP introduced

229
00:12:16,360 --> 00:12:20,830
AK in order to that and the combine the

230
00:12:20,830 --> 00:12:23,200
and they both converge into what I call

231
00:12:23,200 --> 00:12:26,200
a sweet spot which is that you want

232
00:12:26,200 --> 00:12:28,900
types and function arguments and you

233
00:12:28,900 --> 00:12:34,450
want all everything else being n typed

234
00:12:34,450 --> 00:12:37,120
being inferred by the compiler or by

235
00:12:37,120 --> 00:12:39,820
whatever and there are two reasons for

236
00:12:39,820 --> 00:12:41,070
that

237
00:12:41,070 --> 00:12:45,160
sorry and the interesting thing is that

238
00:12:45,160 --> 00:12:49,120
you could you can compare a function to

239
00:12:49,120 --> 00:12:50,950
a component so if you think about a

240
00:12:50,950 --> 00:12:53,200
react component it's like a function

241
00:12:53,200 --> 00:12:56,860
that takes properties and that returns

242
00:12:56,860 --> 00:13:00,339
of your children and so in that in this

243
00:13:00,339 --> 00:13:03,520
case that makes sense to type component

244
00:13:03,520 --> 00:13:06,250
props like languages type function

245
00:13:06,250 --> 00:13:06,960
argument

246
00:13:06,960 --> 00:13:10,060
and their two main reasons to that the

247
00:13:10,060 --> 00:13:13,200
first one is all about documentation

248
00:13:13,200 --> 00:13:17,020
because the interface of your component

249
00:13:17,020 --> 00:13:20,200
is typed this means that you can as a

250
00:13:20,200 --> 00:13:22,060
developer just look at this file and

251
00:13:22,060 --> 00:13:24,400
you're going to see all the type all the

252
00:13:24,400 --> 00:13:26,590
attribute that it that are required and

253
00:13:26,590 --> 00:13:30,090
you can call this component whistles and

254
00:13:30,090 --> 00:13:34,150
the second one is that it prevents the

255
00:13:34,150 --> 00:13:38,110
propagation of errors so for example if

256
00:13:38,110 --> 00:13:40,270
you have a bad variable in one component

257
00:13:40,270 --> 00:13:43,240
and you pass it to another component and

258
00:13:43,240 --> 00:13:45,160
that passes it to another component and

259
00:13:45,160 --> 00:13:49,000
modify a little bit in JavaScript it's

260
00:13:49,000 --> 00:13:52,150
really going to throw and so this bad

261
00:13:52,150 --> 00:13:56,710
value can like propagate very far and at

262
00:13:56,710 --> 00:14:00,700
one point is going to throw and it's

263
00:14:00,700 --> 00:14:03,220
going to be really hard because it's

264
00:14:03,220 --> 00:14:05,740
going to take a lot of ups you know to

265
00:14:05,740 --> 00:14:11,230
go back to the initial issue and so if

266
00:14:11,230 --> 00:14:13,420
you have exit and so if you have

267
00:14:13,420 --> 00:14:15,790
prototypes then you're going to stop the

268
00:14:15,790 --> 00:14:19,330
propagation of those exceptions exactly

269
00:14:19,330 --> 00:14:21,640
when the parent calls a child so you

270
00:14:21,640 --> 00:14:25,200
know directly whenever is going to be

271
00:14:25,200 --> 00:14:28,390
whenever the problem is happening and

272
00:14:28,390 --> 00:14:36,850
you don't have to do those ops and so

273
00:14:36,850 --> 00:14:40,660
all of those like it's it's really

274
00:14:40,660 --> 00:14:44,440
intuitive to if we have you if your goal

275
00:14:44,440 --> 00:14:48,520
is to reduce the time it takes to trace

276
00:14:48,520 --> 00:14:51,100
back where the variables get set

277
00:14:51,100 --> 00:14:53,830
it's very intuitive to do the step that

278
00:14:53,830 --> 00:14:57,430
we've done but someone on Twitter asked

279
00:14:57,430 --> 00:15:00,880
me I don't like JSX and I don't like the

280
00:15:00,880 --> 00:15:04,900
way the react the is constructed and I

281
00:15:04,900 --> 00:15:08,590
want to use jQuery instead and we've had

282
00:15:08,590 --> 00:15:11,800
great success from from the CoffeeScript

283
00:15:11,800 --> 00:15:13,150
community and the closure scope

284
00:15:13,150 --> 00:15:16,360
committee in coming up with new DSL to

285
00:15:16,360 --> 00:15:19,920
write them elements so it's not so

286
00:15:19,920 --> 00:15:22,769
why not using jQuery but in this case as

287
00:15:22,769 --> 00:15:26,130
a fundamental issue with this is that

288
00:15:26,130 --> 00:15:29,160
you never know when a components using

289
00:15:29,160 --> 00:15:32,100
the jQuery way of doing it is completed

290
00:15:32,100 --> 00:15:35,790
and so at any point in time someone can

291
00:15:35,790 --> 00:15:38,959
add an attribute to that component and

292
00:15:38,959 --> 00:15:42,750
what this means it's someone can for

293
00:15:42,750 --> 00:15:44,579
example in this case override the IG

294
00:15:44,579 --> 00:15:48,860
element and at any point in time and

295
00:15:48,860 --> 00:15:54,899
it's very bad for when you're developing

296
00:15:54,899 --> 00:15:57,660
code because now anytime you have a

297
00:15:57,660 --> 00:16:00,269
function call in your code that passes

298
00:16:00,269 --> 00:16:03,269
the element now you have no idea if the

299
00:16:03,269 --> 00:16:05,250
function call is going or not to mutate

300
00:16:05,250 --> 00:16:08,730
the element and so if you want to know

301
00:16:08,730 --> 00:16:12,029
whether it's mutated or not then you've

302
00:16:12,029 --> 00:16:15,029
got to inspect that function and all the

303
00:16:15,029 --> 00:16:17,100
function trees that is using this

304
00:16:17,100 --> 00:16:20,250
element and we've get we've add in the

305
00:16:20,250 --> 00:16:22,260
past a lot of bugs because of this

306
00:16:22,260 --> 00:16:25,140
because someone deep in the call stack

307
00:16:25,140 --> 00:16:27,720
like this modifies the element and it's

308
00:16:27,720 --> 00:16:32,100
really hard to understand why but at the

309
00:16:32,100 --> 00:16:35,790
same time once an element is form it's

310
00:16:35,790 --> 00:16:38,670
very useful in occasions to be able to

311
00:16:38,670 --> 00:16:41,370
modify it and we need to find a way to

312
00:16:41,370 --> 00:16:44,790
do it in a safer way and for this we

313
00:16:44,790 --> 00:16:48,630
introduced the API clone with props and

314
00:16:48,630 --> 00:16:51,600
clone with props takes an element and it

315
00:16:51,600 --> 00:16:54,510
takes new props like new attributes as

316
00:16:54,510 --> 00:16:56,910
going instead of modifying the element

317
00:16:56,910 --> 00:17:01,949
it's going to create a new element with

318
00:17:01,949 --> 00:17:04,110
all the modified properties and you're

319
00:17:04,110 --> 00:17:09,059
going to assign it to a variable and the

320
00:17:09,059 --> 00:17:12,600
very interesting fact with this is that

321
00:17:12,600 --> 00:17:16,169
now you any call sites that wants to

322
00:17:16,169 --> 00:17:19,260
modify this element is going to return

323
00:17:19,260 --> 00:17:22,230
the modified element and so you only

324
00:17:22,230 --> 00:17:25,860
have to look at this specific call side

325
00:17:25,860 --> 00:17:29,130
pattern if you want to see if an element

326
00:17:29,130 --> 00:17:32,230
has been modified or not and

327
00:17:32,230 --> 00:17:35,950
since this pattern is usually the

328
00:17:35,950 --> 00:17:38,889
exception like you trim down a lot of

329
00:17:38,889 --> 00:17:40,929
potential source of bugs in your

330
00:17:40,929 --> 00:17:47,919
application and one of the one other ID

331
00:17:47,919 --> 00:17:52,809
about this is for props and with this

332
00:17:52,809 --> 00:17:56,499
we're using immutable objects and you

333
00:17:56,499 --> 00:17:58,749
might think that immutable object you

334
00:17:58,749 --> 00:18:01,899
can only get benefits from them using a

335
00:18:01,899 --> 00:18:05,350
scale or Lisp but in fact you can also

336
00:18:05,350 --> 00:18:08,379
use the benefits in JavaScript if you

337
00:18:08,379 --> 00:18:11,200
impose that you can modify object and

338
00:18:11,200 --> 00:18:13,679
they have really really good properties

339
00:18:13,679 --> 00:18:20,470
you know also debug elements so in order

340
00:18:20,470 --> 00:18:22,899
to conclude at Facebook we have a motto

341
00:18:22,899 --> 00:18:24,940
which is move move fast and break things

342
00:18:24,940 --> 00:18:28,690
and what it really means is it's okay to

343
00:18:28,690 --> 00:18:34,049
break things but once you discover that

344
00:18:34,049 --> 00:18:36,309
something is broken you want to fix it

345
00:18:36,309 --> 00:18:39,519
as fast as possible and especially you

346
00:18:39,519 --> 00:18:40,989
want to fix it before it goes to prod

347
00:18:40,989 --> 00:18:43,629
and in order to that we want

348
00:18:43,629 --> 00:18:47,049
I was application we want to be able to

349
00:18:47,049 --> 00:18:51,970
fix bugs in a very fast way but we don't

350
00:18:51,970 --> 00:18:54,190
know how to do it fast so what we want

351
00:18:54,190 --> 00:18:57,820
to do is to be predictable and when

352
00:18:57,820 --> 00:18:59,830
fixing a bug there are two main sources

353
00:18:59,830 --> 00:19:03,429
of in predictability so the first one is

354
00:19:03,429 --> 00:19:05,409
finding the root cause so you got a

355
00:19:05,409 --> 00:19:08,499
repro case and how do you find what was

356
00:19:08,499 --> 00:19:11,399
an issue and so with all the steps I

357
00:19:11,399 --> 00:19:14,950
described we can make this a lot faster

358
00:19:14,950 --> 00:19:20,289
and the second one is and so once you

359
00:19:20,289 --> 00:19:23,049
know the root cause then you want to be

360
00:19:23,049 --> 00:19:26,769
able to find a fix and this part is not

361
00:19:26,769 --> 00:19:29,529
usually the hardest part like all the

362
00:19:29,529 --> 00:19:31,869
interviews and all the school like

363
00:19:31,869 --> 00:19:35,440
you're an engineer too so you can get a

364
00:19:35,440 --> 00:19:38,259
problem and your form to find a solution

365
00:19:38,259 --> 00:19:41,470
so we are pretty good at doing this but

366
00:19:41,470 --> 00:19:45,159
then the second inflexibility is what if

367
00:19:45,159 --> 00:19:45,510
your

368
00:19:45,510 --> 00:19:48,600
fix is going to introduce a mess or bug

369
00:19:48,600 --> 00:19:52,020
and so this is a really bad moment for

370
00:19:52,020 --> 00:19:53,820
example if something is severely broken

371
00:19:53,820 --> 00:19:55,740
in production and you want to like

372
00:19:55,740 --> 00:19:57,810
fixing a fix it as soon as possible and

373
00:19:57,810 --> 00:20:00,210
then you come like you learn to fix and

374
00:20:00,210 --> 00:20:02,550
then you trigger something else another

375
00:20:02,550 --> 00:20:05,340
bug and then it triggers another bug and

376
00:20:05,340 --> 00:20:06,660
then you've got to like figure out

377
00:20:06,660 --> 00:20:09,410
another solution and it turns out that

378
00:20:09,410 --> 00:20:14,280
by making finding the root cause faster

379
00:20:14,280 --> 00:20:16,800
and easier you're also making your

380
00:20:16,800 --> 00:20:20,520
application easier to read and also so

381
00:20:20,520 --> 00:20:23,630
if you're doing a modification to

382
00:20:23,630 --> 00:20:26,490
variable it's really easy for you to

383
00:20:26,490 --> 00:20:29,820
trace back how this variable is being

384
00:20:29,820 --> 00:20:34,320
used and therefore it's also harder to

385
00:20:34,320 --> 00:20:36,600
introduce bugs by modifying this

386
00:20:36,600 --> 00:20:40,770
variable without you knowing about it so

387
00:20:40,770 --> 00:20:43,320
this is what I have I hope it was useful

