1
00:00:07,490 --> 00:00:18,779

so guten tag we get we get so very

2
00:00:18,779 --> 00:00:24,510
speaks torch that's quite many I can't

3
00:00:24,510 --> 00:00:26,130
actually fake a presentation in in

4
00:00:26,130 --> 00:00:29,519
German so I was hoping for fewer hands

5
00:00:29,519 --> 00:00:33,120
and anyway what are we talking about

6
00:00:33,120 --> 00:00:35,550
here today is about well we're

7
00:00:35,550 --> 00:00:38,730
JavaScript comes from and how it works

8
00:00:38,730 --> 00:00:41,790
generally and how you can use it for

9
00:00:41,790 --> 00:00:44,070
pretty interesting stuff and what I

10
00:00:44,070 --> 00:00:47,010
won't be covering is for implementations

11
00:00:47,010 --> 00:00:49,230
in browsers or the Dom or anything other

12
00:00:49,230 --> 00:00:51,660
it's just annoying so I'll just talk

13
00:00:51,660 --> 00:00:56,250
about nice things and in the beginning

14
00:00:56,250 --> 00:00:58,890
we basically as a web developer had

15
00:00:58,890 --> 00:01:01,320
nothing when we're developing web pages

16
00:01:01,320 --> 00:01:05,460
I was only stale great web pages and if

17
00:01:05,460 --> 00:01:07,289
we're really fancy we had some kind of

18
00:01:07,289 --> 00:01:09,539
line going down there in the middle two

19
00:01:09,539 --> 00:01:12,119
separate content and that was it and

20
00:01:12,119 --> 00:01:16,110
then this wonderful man came along by

21
00:01:16,110 --> 00:01:18,270
the name of Brendan I can brandon had a

22
00:01:18,270 --> 00:01:22,740
vision to to make well the content a bit

23
00:01:22,740 --> 00:01:27,270
more alive on the web and the way I see

24
00:01:27,270 --> 00:01:30,630
Brendan to me brendan is yoda brendan is

25
00:01:30,630 --> 00:01:32,700
the master that hopefully I don't know

26
00:01:32,700 --> 00:01:34,770
hopefully lives somewhere out in the

27
00:01:34,770 --> 00:01:36,930
woods and just telling how the force

28
00:01:36,930 --> 00:01:42,030
should work so what is javascript really

29
00:01:42,030 --> 00:01:45,140
it's something Brendan came up with in

30
00:01:45,140 --> 00:01:49,290
1995 and at the end of 95 in beta

31
00:01:49,290 --> 00:01:52,829
Netscape to and first version of

32
00:01:52,829 --> 00:01:56,880
JavaScript slow so alive and well first

33
00:01:56,880 --> 00:01:58,860
was called mocha and live script but

34
00:01:58,860 --> 00:02:02,549
eventually got the name javascript and I

35
00:02:02,549 --> 00:02:05,479
think in august/september of 1996

36
00:02:05,479 --> 00:02:07,680
Microsoft had reverse-engineer

37
00:02:07,680 --> 00:02:11,120
JavaScript and turned it into a script

38
00:02:11,120 --> 00:02:15,420
and where we see JavaScript array is

39
00:02:15,420 --> 00:02:17,730
pretty much everywhere on the web like

40
00:02:17,730 --> 00:02:18,550
you know it

41
00:02:18,550 --> 00:02:21,670
counting characters or small reply

42
00:02:21,670 --> 00:02:23,890
whatever I just like this image because

43
00:02:23,890 --> 00:02:26,290
it seems very cute at first but then if

44
00:02:26,290 --> 00:02:28,030
you look at it it seems like something

45
00:02:28,030 --> 00:02:29,850
you would pay extra for in Bangkok or

46
00:02:29,850 --> 00:02:34,000
Berlin for that matter and we also have

47
00:02:34,000 --> 00:02:36,640
it in more interesting applications like

48
00:02:36,640 --> 00:02:39,550
well gmail I think email is probably the

49
00:02:39,550 --> 00:02:41,380
biggest one that have just shown the

50
00:02:41,380 --> 00:02:43,030
power of JavaScript and to have two

51
00:02:43,030 --> 00:02:50,470
applications on the web so when I was

52
00:02:50,470 --> 00:02:53,050
doing my my research before this talk I

53
00:02:53,050 --> 00:02:55,660
just for fun I searched for JavaScript

54
00:02:55,660 --> 00:02:58,770
and the first hit on google is Java

55
00:02:58,770 --> 00:03:03,580
which is a bit depressing after well 14

56
00:03:03,580 --> 00:03:08,470
years something from 13 and the problem

57
00:03:08,470 --> 00:03:10,510
is there that JavaScript doesn't really

58
00:03:10,510 --> 00:03:13,270
have anything to do with Java and syntax

59
00:03:13,270 --> 00:03:14,950
wise sure I mean we have to call the

60
00:03:14,950 --> 00:03:16,840
races semicolon to that and that's

61
00:03:16,840 --> 00:03:20,020
pretty much it so we're trying to get

62
00:03:20,020 --> 00:03:25,830
rid of that and just move on so and

63
00:03:25,830 --> 00:03:29,440
where we are today is one I think it's

64
00:03:29,440 --> 00:03:31,840
just exploded in the last few years that

65
00:03:31,840 --> 00:03:33,310
JavaScript has become one of the world's

66
00:03:33,310 --> 00:03:36,420
most popular programming languages and

67
00:03:36,420 --> 00:03:38,620
with web browser free have an

68
00:03:38,620 --> 00:03:40,660
interpreter and every machine that can

69
00:03:40,660 --> 00:03:43,440
just run JavaScript and pretty much

70
00:03:43,440 --> 00:03:46,150
everywhere now in our cell phones and

71
00:03:46,150 --> 00:03:49,450
devices and all that there's also some

72
00:03:49,450 --> 00:03:51,640
standard sizes standard sizing going on

73
00:03:51,640 --> 00:03:54,910
with activist crypt which is a work in

74
00:03:54,910 --> 00:03:56,830
progress right now but what's good about

75
00:03:56,830 --> 00:03:59,620
it is that it's being realistic so it's

76
00:03:59,620 --> 00:04:01,420
based on what works now and kind of

77
00:04:01,420 --> 00:04:03,459
bailed on top of that exactly like with

78
00:04:03,459 --> 00:04:06,190
html5 look at what works in browsers now

79
00:04:06,190 --> 00:04:07,570
when building it they said I'm having

80
00:04:07,570 --> 00:04:09,730
some something that would be perfect in

81
00:04:09,730 --> 00:04:11,739
theory but would take about 20 years to

82
00:04:11,739 --> 00:04:15,519
implement in practice also what's very

83
00:04:15,519 --> 00:04:17,560
exciting for me is that I can write the

84
00:04:17,560 --> 00:04:19,480
same code and it just gets faster and

85
00:04:19,480 --> 00:04:21,970
faster because web browsers have sort of

86
00:04:21,970 --> 00:04:23,740
a little JavaScript engine war

87
00:04:23,740 --> 00:04:27,099
going on with Safari and then Google and

88
00:04:27,099 --> 00:04:29,949
Firefox and opera doing a good bit there

89
00:04:29,949 --> 00:04:33,190
too well as well no one of them is a bit

90
00:04:33,190 --> 00:04:36,400
slow otherwise but at least I have some

91
00:04:36,400 --> 00:04:38,800
indication that Microsoft are really

92
00:04:38,800 --> 00:04:41,740
trying about improving performance and

93
00:04:41,740 --> 00:04:43,690
taking some really interesting measures

94
00:04:43,690 --> 00:04:46,300
to make it better as well I just hope

95
00:04:46,300 --> 00:04:50,620
they live up to it another person that I

96
00:04:50,620 --> 00:04:51,789
have to mention we talked about

97
00:04:51,789 --> 00:04:54,780
javascript is if brendan eich is the

98
00:04:54,780 --> 00:04:57,669
godfather or the Yoda of JavaScript

99
00:04:57,669 --> 00:05:01,000
Douglas Crockford has come up with lots

100
00:05:01,000 --> 00:05:03,610
of interesting techniques and ideas how

101
00:05:03,610 --> 00:05:05,560
to use it and how to implement better

102
00:05:05,560 --> 00:05:08,319
and better practices and how to find the

103
00:05:08,319 --> 00:05:12,569
good part in JavaScript so if if Ben is

104
00:05:12,569 --> 00:05:18,220
sorry Douglas is Ben obi-wan Kenobi for

105
00:05:18,220 --> 00:05:24,220
me and some of the things I won't really

106
00:05:24,220 --> 00:05:26,889
go into detail with him but he's behind

107
00:05:26,889 --> 00:05:30,070
Jason or as he humbly would same cells

108
00:05:30,070 --> 00:05:32,800
that he only wrote the spec but the

109
00:05:32,800 --> 00:05:35,979
approach was already there he's also

110
00:05:35,979 --> 00:05:38,770
behind jslint for validating JavaScript

111
00:05:38,770 --> 00:05:41,469
syntax and find out the best way to

112
00:05:41,469 --> 00:05:43,870
write JavaScript to avoid problems and

113
00:05:43,870 --> 00:05:46,210
to work together in teams and similar

114
00:05:46,210 --> 00:05:49,300
and also something like Jas Mann for

115
00:05:49,300 --> 00:05:51,400
just minifying the other script file so

116
00:05:51,400 --> 00:05:53,770
don't weigh as much killed by twice so

117
00:05:53,770 --> 00:05:57,330
it gets faster load them in a web page

118
00:05:57,330 --> 00:06:00,039
so usually when I give presentations I

119
00:06:00,039 --> 00:06:01,930
would like to have a theme so the theme

120
00:06:01,930 --> 00:06:05,979
today is going to be Ben Affleck and the

121
00:06:05,979 --> 00:06:08,440
code would pretty much cover band in his

122
00:06:08,440 --> 00:06:13,690
life I would say so if you start startup

123
00:06:13,690 --> 00:06:19,060
very easy how many here thing okay this

124
00:06:19,060 --> 00:06:20,919
sounds offensive but how many here think

125
00:06:20,919 --> 00:06:26,530
they know JavaScript okay so that was

126
00:06:26,530 --> 00:06:28,120
just scary I think everyone in actually

127
00:06:28,120 --> 00:06:30,759
knows java script so I'll go pretty fast

128
00:06:30,759 --> 00:06:33,039
here in the beginning and I'll kind of

129
00:06:33,039 --> 00:06:36,180
slow down and if it goes weird just way

130
00:06:36,180 --> 00:06:40,919
or won't leave the basics of java script

131
00:06:40,919 --> 00:06:43,830
is well as basic as it gets we can just

132
00:06:43,830 --> 00:06:46,470
define the variable that's it you just

133
00:06:46,470 --> 00:06:48,570
have a VAR keyword a name for it then it

134
00:06:48,570 --> 00:06:52,650
equals a value and the same goes for

135
00:06:52,650 --> 00:06:55,080
functions that's pretty much it we have

136
00:06:55,080 --> 00:06:56,789
a function we have a name and just the

137
00:06:56,789 --> 00:07:00,090
content of the function I know well

138
00:07:00,090 --> 00:07:02,280
worth the money so far probably learning

139
00:07:02,280 --> 00:07:05,850
a lot right now but when it starts to

140
00:07:05,850 --> 00:07:07,169
get interesting is when we talk about

141
00:07:07,169 --> 00:07:09,509
conditionals and we have four types and

142
00:07:09,509 --> 00:07:11,639
conditionals in JavaScript you have if

143
00:07:11,639 --> 00:07:14,250
statements which statements we also have

144
00:07:14,250 --> 00:07:15,840
shortened assignments and ternary

145
00:07:15,840 --> 00:07:17,759
operators and then they're pretty close

146
00:07:17,759 --> 00:07:20,340
to each other and shortened assignment

147
00:07:20,340 --> 00:07:24,180
is basically for us cool developers who

148
00:07:24,180 --> 00:07:26,430
want to do one liners or actually

149
00:07:26,430 --> 00:07:29,789
readable as well is as you see here if

150
00:07:29,789 --> 00:07:31,830
we send in the parameter with Liv Tyler

151
00:07:31,830 --> 00:07:35,820
if that is equals true the value will be

152
00:07:35,820 --> 00:07:38,520
true for the variable lines here we just

153
00:07:38,520 --> 00:07:41,220
have the or in the middle so it goes to

154
00:07:41,220 --> 00:07:42,690
fall so you can just assign something

155
00:07:42,690 --> 00:07:47,520
online it's pretty close to the ternary

156
00:07:47,520 --> 00:07:52,889
operators which is just a small if case

157
00:07:52,889 --> 00:07:55,349
basically so you have within the party

158
00:07:55,349 --> 00:07:58,680
sis you have a value to sorry and

159
00:07:58,680 --> 00:08:01,830
if it equals true that value comes

160
00:08:01,830 --> 00:08:03,180
through otherwise the other things

161
00:08:03,180 --> 00:08:09,000
happen and that's with any other

162
00:08:09,000 --> 00:08:11,370
language we have the one equal sign to

163
00:08:11,370 --> 00:08:13,770
assign the value regular assignment and

164
00:08:13,770 --> 00:08:15,630
two equal science is to check equality

165
00:08:15,630 --> 00:08:18,360
but javascript also has this funky

166
00:08:18,360 --> 00:08:20,699
syntax with three equal signs which

167
00:08:20,699 --> 00:08:22,620
usually mess people up and the reaction

168
00:08:22,620 --> 00:08:24,060
is usually I haven't seen this anywhere

169
00:08:24,060 --> 00:08:26,820
else you know screw it i'll use the two

170
00:08:26,820 --> 00:08:29,039
but it actually makes a difference in

171
00:08:29,039 --> 00:08:32,459
practice and you know one is just

172
00:08:32,459 --> 00:08:34,050
assignment as you see here but the thing

173
00:08:34,050 --> 00:08:36,659
here with equality with two equal signs

174
00:08:36,659 --> 00:08:39,570
is that the number 5 equals the string 5

175
00:08:39,570 --> 00:08:42,719
and that's because javascript is trying

176
00:08:42,719 --> 00:08:45,390
to be nice and kind of figure out what

177
00:08:45,390 --> 00:08:46,470
you actually meant

178
00:08:46,470 --> 00:08:49,410
comparative values so to cover up for

179
00:08:49,410 --> 00:08:51,210
something like that instead you want to

180
00:08:51,210 --> 00:08:53,940
use three equal signs because the three

181
00:08:53,940 --> 00:08:56,460
equal signs will not only compare the

182
00:08:56,460 --> 00:08:59,190
value it will also compare the type of

183
00:08:59,190 --> 00:09:01,560
what you're comparing so both of them

184
00:09:01,560 --> 00:09:04,320
have to be a number or a string to be

185
00:09:04,320 --> 00:09:13,740
true and as with any language javascript

186
00:09:13,740 --> 00:09:16,320
is based on short circuit logic which

187
00:09:16,320 --> 00:09:18,600
means that you don't analysis it all the

188
00:09:18,600 --> 00:09:20,160
time when I work as a consultant than

189
00:09:20,160 --> 00:09:23,340
people are nest about 15 if closest and

190
00:09:23,340 --> 00:09:25,710
it's 400 lines and code you don't need

191
00:09:25,710 --> 00:09:27,810
to do that it just evaluate the first

192
00:09:27,810 --> 00:09:30,960
value and if it doesn't become true it

193
00:09:30,960 --> 00:09:35,190
won't go on in or and similar so as you

194
00:09:35,190 --> 00:09:36,930
see in the last line here you can just

195
00:09:36,930 --> 00:09:38,430
check if the object actually exists

196
00:09:38,430 --> 00:09:40,980
first and if true it goes on you can

197
00:09:40,980 --> 00:09:43,080
check the property without throwing an

198
00:09:43,080 --> 00:09:48,070
error otherwise it'd just be false and

199
00:09:48,080 --> 00:09:50,160
what I was talking about here with the

200
00:09:50,160 --> 00:09:52,890
double and triple equal signs is

201
00:09:52,890 --> 00:09:55,200
something referenced as type coercion

202
00:09:55,200 --> 00:09:58,890
and what type coercion does is is the

203
00:09:58,890 --> 00:10:01,320
magic of trying to help you but just

204
00:10:01,320 --> 00:10:02,910
messing things up for you basically

205
00:10:02,910 --> 00:10:05,340
which is one of the four parts of

206
00:10:05,340 --> 00:10:09,120
JavaScript and as you saw five number

207
00:10:09,120 --> 00:10:11,310
equals five the string and also you

208
00:10:11,310 --> 00:10:12,930
should try to add a string together with

209
00:10:12,930 --> 00:10:15,900
numbers it will become a string because

210
00:10:15,900 --> 00:10:19,740
the string will win in that case so to

211
00:10:19,740 --> 00:10:21,360
cover up for something like that if you

212
00:10:21,360 --> 00:10:22,830
know that the values might be of

213
00:10:22,830 --> 00:10:24,540
different types you don't really want to

214
00:10:24,540 --> 00:10:26,550
rely and you have a script and just hope

215
00:10:26,550 --> 00:10:28,830
it goes well so instead you can use the

216
00:10:28,830 --> 00:10:30,630
parseint method if you actually want the

217
00:10:30,630 --> 00:10:33,000
number and complement it with equal

218
00:10:33,000 --> 00:10:39,300
signs and such another thing that well

219
00:10:39,300 --> 00:10:40,920
it's still a bit scary to me actually

220
00:10:40,920 --> 00:10:42,840
and that is that a number of different

221
00:10:42,840 --> 00:10:46,770
values all equal false or something at

222
00:10:46,770 --> 00:10:49,140
least close to false if I'm trying to

223
00:10:49,140 --> 00:10:52,510
check them with if or something similar

224
00:10:52,510 --> 00:10:55,720
so no undefined 0 false actually an

225
00:10:55,720 --> 00:10:57,130
empty string as well the name of the

226
00:10:57,130 --> 00:10:58,870
string is the same as the building of

227
00:10:58,870 --> 00:11:02,250
false if I try to check the value of it

228
00:11:02,250 --> 00:11:05,830
so all of this code all these different

229
00:11:05,830 --> 00:11:09,730
values when I checking them will not go

230
00:11:09,730 --> 00:11:10,870
through when they will stop the

231
00:11:10,870 --> 00:11:17,070
execution and in JavaScript we have

232
00:11:17,070 --> 00:11:20,920
basically five different data types we

233
00:11:20,920 --> 00:11:23,200
have strings numbers bullion's we have

234
00:11:23,200 --> 00:11:26,380
the interesting value undefined but

235
00:11:26,380 --> 00:11:28,360
beside that everything else is an object

236
00:11:28,360 --> 00:11:30,790
the object is the mother of everything

237
00:11:30,790 --> 00:11:33,880
and JavaScript and different types of

238
00:11:33,880 --> 00:11:37,480
objects are functions arrays data object

239
00:11:37,480 --> 00:11:42,760
reg legs etc and to complement that like

240
00:11:42,760 --> 00:11:44,740
we had an empty string that would equal

241
00:11:44,740 --> 00:11:47,560
false if you want to check the type offf

242
00:11:47,560 --> 00:11:51,100
instead just to see the actual well type

243
00:11:51,100 --> 00:11:53,200
that gets sent in and if it's all right

244
00:11:53,200 --> 00:11:54,970
type and then you can check the value

245
00:11:54,970 --> 00:11:57,100
and it just complements that the

246
00:11:57,100 --> 00:11:58,720
different object types in Java Script we

247
00:11:58,720 --> 00:12:03,430
have strings numbers Foley and etc so if

248
00:12:03,430 --> 00:12:06,550
you look at that in code if a variable

249
00:12:06,550 --> 00:12:09,790
that doesn't have a value yet it will be

250
00:12:09,790 --> 00:12:12,070
undefined a string will naturally be a

251
00:12:12,070 --> 00:12:15,370
string a number will be a number and

252
00:12:15,370 --> 00:12:17,470
also a function will also be a function

253
00:12:17,470 --> 00:12:19,840
I think this is probably good advice as

254
00:12:19,840 --> 00:12:21,400
well to always have a number one go-to

255
00:12:21,400 --> 00:12:23,170
guy if you have a dead hooker in your

256
00:12:23,170 --> 00:12:29,940
hotel room

257
00:12:29,950 --> 00:12:33,920
but we kind of get tricked as if you

258
00:12:33,920 --> 00:12:35,900
have a JavaScript object just an empty

259
00:12:35,900 --> 00:12:39,230
curly braces here you check type of that

260
00:12:39,230 --> 00:12:40,610
will be an object but if you like type

261
00:12:40,610 --> 00:12:43,790
of for an array it will also say object

262
00:12:43,790 --> 00:12:46,580
which is a bit scary because then you

263
00:12:46,580 --> 00:12:48,380
have no idea it doesn't really help it

264
00:12:48,380 --> 00:12:50,270
is more like the null is null error

265
00:12:50,270 --> 00:12:54,800
messages in internet explorer so what

266
00:12:54,800 --> 00:12:56,150
you can do is use something called

267
00:12:56,150 --> 00:12:59,800
instance of the complement type of and

268
00:12:59,800 --> 00:13:02,180
there you can check if it's an instance

269
00:13:02,180 --> 00:13:05,110
of an actual core object in JavaScript

270
00:13:05,110 --> 00:13:07,460
so you have a variable and you have the

271
00:13:07,460 --> 00:13:09,230
object and that's not an instance of an

272
00:13:09,230 --> 00:13:11,540
array but array is an instance of the

273
00:13:11,540 --> 00:13:19,430
module array that exists and there also

274
00:13:19,430 --> 00:13:21,620
a number of different types of functions

275
00:13:21,620 --> 00:13:22,970
you have the regular procedural

276
00:13:22,970 --> 00:13:27,020
functions which is just a function you

277
00:13:27,020 --> 00:13:29,870
can also assign functions directly to a

278
00:13:29,870 --> 00:13:32,420
variable and then just use that variable

279
00:13:32,420 --> 00:13:38,570
name as the new name of the function we

280
00:13:38,570 --> 00:13:40,430
can have anonymous function for those

281
00:13:40,430 --> 00:13:42,170
that don't even deserve a name we're

282
00:13:42,170 --> 00:13:44,120
just going to use them for short amount

283
00:13:44,120 --> 00:13:46,130
of time or just write a little code we

284
00:13:46,130 --> 00:13:48,440
just give it into event or another value

285
00:13:48,440 --> 00:13:53,270
and that's pretty much it but where it

286
00:13:53,270 --> 00:13:54,680
gets a bit interesting is where you have

287
00:13:54,680 --> 00:13:56,800
the self invoking functions that we just

288
00:13:56,800 --> 00:13:59,780
call themselves right away so as we see

289
00:13:59,780 --> 00:14:03,830
here you have a cup of apple so a couple

290
00:14:03,830 --> 00:14:06,620
of parentheses at the end which makes

291
00:14:06,620 --> 00:14:13,680
the function run right away

292
00:14:13,690 --> 00:14:16,630
and when I talk to people that they work

293
00:14:16,630 --> 00:14:19,780
with C++ or Java or similar and they

294
00:14:19,780 --> 00:14:21,370
work with method overloading and

295
00:14:21,370 --> 00:14:23,790
different versions of doing something

296
00:14:23,790 --> 00:14:26,490
that doesn't really exist in JavaScript

297
00:14:26,490 --> 00:14:28,780
so if you have a function you can

298
00:14:28,780 --> 00:14:31,420
actually just omit any argument you want

299
00:14:31,420 --> 00:14:33,610
or you can add some more that the

300
00:14:33,610 --> 00:14:36,540
function doesn't actually expect as well

301
00:14:36,540 --> 00:14:39,190
and what we have instead of overloading

302
00:14:39,190 --> 00:14:40,630
is the arguments collection in

303
00:14:40,630 --> 00:14:45,430
JavaScript so if we have a regular

304
00:14:45,430 --> 00:14:48,760
function here and it's expecting three

305
00:14:48,760 --> 00:14:51,760
values and the ABC the first one will

306
00:14:51,760 --> 00:14:53,230
work because it gets the three well is

307
00:14:53,230 --> 00:14:55,690
it once but last one would just return

308
00:14:55,690 --> 00:15:00,130
the nun which means not a number and to

309
00:15:00,130 --> 00:15:02,020
cover up for that we have the arguments

310
00:15:02,020 --> 00:15:05,320
collection that you can iterate over and

311
00:15:05,320 --> 00:15:06,850
I just want to point out that it's not

312
00:15:06,850 --> 00:15:09,070
an actual array it's a collection so you

313
00:15:09,070 --> 00:15:11,590
can loop through all these values but

314
00:15:11,590 --> 00:15:14,470
you can't use array methods like push or

315
00:15:14,470 --> 00:15:21,880
concat or similar so instead if we had

316
00:15:21,880 --> 00:15:24,580
the concat function here what we can do

317
00:15:24,580 --> 00:15:26,650
is that within every function in

318
00:15:26,650 --> 00:15:28,150
JavaScript you don't need to declare it

319
00:15:28,150 --> 00:15:29,710
at all you have something called

320
00:15:29,710 --> 00:15:31,600
arguments and that will be all the

321
00:15:31,600 --> 00:15:34,480
parameters that get sent in no matter if

322
00:15:34,480 --> 00:15:38,290
it's 115 or 500 well I haven't actually

323
00:15:38,290 --> 00:15:40,860
maxed it out but at least what I think

324
00:15:40,860 --> 00:15:43,660
and then you can send in any values and

325
00:15:43,660 --> 00:15:45,640
kind of use this approach instead and

326
00:15:45,640 --> 00:15:47,680
within the function do you're

327
00:15:47,680 --> 00:15:49,660
overloading instead of having different

328
00:15:49,660 --> 00:15:55,750
sets of the same function

329
00:15:55,760 --> 00:15:58,460
and if you want to construct objects in

330
00:15:58,460 --> 00:16:00,950
JavaScript at Google way that you see it

331
00:16:00,950 --> 00:16:03,890
in every well proper language as some

332
00:16:03,890 --> 00:16:07,040
people see it you have a band object

333
00:16:07,040 --> 00:16:10,160
here and use this keyword to assign

334
00:16:10,160 --> 00:16:13,070
properties to it this dot name is a spam

335
00:16:13,070 --> 00:16:16,880
and got an Oscar etc and at the bottom

336
00:16:16,880 --> 00:16:19,310
here I just create an instance of that

337
00:16:19,310 --> 00:16:21,650
object and then I check the value of a

338
00:16:21,650 --> 00:16:25,520
property of that instance but if you

339
00:16:25,520 --> 00:16:27,710
want of the cool kids that syntax isn't

340
00:16:27,710 --> 00:16:30,740
that really the one that goes you want

341
00:16:30,740 --> 00:16:33,500
to use the object literal instead where

342
00:16:33,500 --> 00:16:35,870
the idea is just a shorter syntax

343
00:16:35,870 --> 00:16:37,580
bicycle that you have the curly braces

344
00:16:37,580 --> 00:16:41,330
instead and we should note also in here

345
00:16:41,330 --> 00:16:43,430
so if you don't have the equal signs for

346
00:16:43,430 --> 00:16:45,410
assigning properties you have the colon

347
00:16:45,410 --> 00:16:47,840
and you don't have a semicolon at the

348
00:16:47,840 --> 00:16:51,710
end of each shrine each line just have

349
00:16:51,710 --> 00:16:54,050
the comma sign but you don't have it

350
00:16:54,050 --> 00:16:56,300
after the last one but if you want to

351
00:16:56,300 --> 00:16:59,510
work with that object it's the same way

352
00:16:59,510 --> 00:17:01,160
you just have the instance name and

353
00:17:01,160 --> 00:17:09,710
check a property on it

354
00:17:09,720 --> 00:17:12,839
and as with any code everywhere there

355
00:17:12,839 --> 00:17:15,539
are also different schools how you want

356
00:17:15,539 --> 00:17:18,289
to assign a value or read the value

357
00:17:18,289 --> 00:17:21,030
personally I prefer the dot notation

358
00:17:21,030 --> 00:17:24,240
that bound the dot arms here but what's

359
00:17:24,240 --> 00:17:26,400
pretty good about the other one here is

360
00:17:26,400 --> 00:17:29,460
that you can a dynamic value sent in so

361
00:17:29,460 --> 00:17:31,470
instead of having lots of lots of lines

362
00:17:31,470 --> 00:17:33,960
checking different properties in a

363
00:17:33,960 --> 00:17:36,330
function and you can just send in a

364
00:17:36,330 --> 00:17:39,450
variable here instead of arms and first

365
00:17:39,450 --> 00:17:41,580
I can check the arms and legs etc in

366
00:17:41,580 --> 00:17:43,530
there and just have one line of code for

367
00:17:43,530 --> 00:17:50,250
it what's also a bit funny about

368
00:17:50,250 --> 00:17:52,860
javascript is that you can extend or

369
00:17:52,860 --> 00:17:54,990
change anything about JavaScript and you

370
00:17:54,990 --> 00:17:56,730
can change anything about core java

371
00:17:56,730 --> 00:17:58,110
script when you run it in a web browser

372
00:17:58,110 --> 00:18:01,169
and just override how JavaScript thought

373
00:18:01,169 --> 00:18:04,110
it would work so if i have an object

374
00:18:04,110 --> 00:18:06,299
error i can have an integral as the

375
00:18:06,299 --> 00:18:09,059
property name like 1972 or a string or i

376
00:18:09,059 --> 00:18:11,159
can actually have a boolean as a

377
00:18:11,159 --> 00:18:16,799
property on an object and i can also do

378
00:18:16,799 --> 00:18:18,960
this to the native objects in JavaScript

379
00:18:18,960 --> 00:18:22,770
like with a string object or the array

380
00:18:22,770 --> 00:18:25,650
object or reggae club yet and you know

381
00:18:25,650 --> 00:18:27,270
just for fun I can have a number here

382
00:18:27,270 --> 00:18:30,659
that has a new value and maybe this just

383
00:18:30,659 --> 00:18:32,880
seems like a geeky thing so yeah I can

384
00:18:32,880 --> 00:18:34,669
break something or make something weird

385
00:18:34,669 --> 00:18:38,100
but where it becomes very useful is that

386
00:18:38,100 --> 00:18:40,110
if you have different web browsers not

387
00:18:40,110 --> 00:18:43,080
dropping any names some of them aren't

388
00:18:43,080 --> 00:18:45,570
as competent as others so if they have

389
00:18:45,570 --> 00:18:48,390
something faulty or not good enough in

390
00:18:48,390 --> 00:18:50,610
their JavaScript implementation I can

391
00:18:50,610 --> 00:18:55,799
override it myself so we had in a web

392
00:18:55,799 --> 00:18:57,510
browser was around for quite a long time

393
00:18:57,510 --> 00:19:00,390
it didn't support the push method on

394
00:19:00,390 --> 00:19:03,150
array objects so instead they can just

395
00:19:03,150 --> 00:19:04,710
write the code and actually implement

396
00:19:04,710 --> 00:19:07,110
the push method on my own then I can use

397
00:19:07,110 --> 00:19:08,940
to push method in all my code and just

398
00:19:08,940 --> 00:19:11,130
kind of fix JavaScript and the web

399
00:19:11,130 --> 00:19:16,979
browser so total freedom

400
00:19:16,989 --> 00:19:19,850
and when we have an object here to check

401
00:19:19,850 --> 00:19:21,980
values it's not like an array that can

402
00:19:21,980 --> 00:19:24,049
iterate over so instead you can just use

403
00:19:24,049 --> 00:19:26,899
a for loop that goes through each item

404
00:19:26,899 --> 00:19:31,159
in that object and just beads out the

405
00:19:31,159 --> 00:19:33,409
name of that property and the value of

406
00:19:33,409 --> 00:19:38,359
that property and as you saw before with

407
00:19:38,359 --> 00:19:40,999
the empty string or undefined or similar

408
00:19:40,999 --> 00:19:43,820
that just equals false if you want to be

409
00:19:43,820 --> 00:19:46,340
sure that that doesn't happen you can

410
00:19:46,340 --> 00:19:48,559
instead use the syntax here to check if

411
00:19:48,559 --> 00:19:50,600
here we're here is the name of the

412
00:19:50,600 --> 00:19:52,840
property and the good movie object

413
00:19:52,840 --> 00:19:55,159
exists and it could be an empty string

414
00:19:55,159 --> 00:19:57,859
then and this if Clause would still

415
00:19:57,859 --> 00:20:01,190
equal true it's just a way to make sure

416
00:20:01,190 --> 00:20:03,559
that it rotor is there and not just

417
00:20:03,559 --> 00:20:12,040
checking it's value

418
00:20:12,050 --> 00:20:15,370
in JavaScript we do something called

419
00:20:15,370 --> 00:20:17,690
prototype based inheritance instead of

420
00:20:17,690 --> 00:20:20,630
classified as we have in virtually any

421
00:20:20,630 --> 00:20:24,560
other language out there and the

422
00:20:24,560 --> 00:20:26,330
interesting thing about prototype it

423
00:20:26,330 --> 00:20:28,730
just shakes it instance and just works

424
00:20:28,730 --> 00:20:31,520
its way up through everything it has

425
00:20:31,520 --> 00:20:36,650
inherited so far so if we start by

426
00:20:36,650 --> 00:20:40,550
creating a simple objectivity super

427
00:20:40,550 --> 00:20:43,250
object if you will called being it has a

428
00:20:43,250 --> 00:20:46,250
property and you just use the prototype

429
00:20:46,250 --> 00:20:48,290
syntax as the being bailed prototype to

430
00:20:48,290 --> 00:20:51,320
assign a method to all instances of the

431
00:20:51,320 --> 00:20:54,260
being object that will just return the

432
00:20:54,260 --> 00:20:57,380
value hello so if you remember this

433
00:20:57,380 --> 00:21:02,540
please we create the band object here

434
00:21:02,540 --> 00:21:05,330
and then we say that the band object is

435
00:21:05,330 --> 00:21:07,970
a prototype of the being object that

436
00:21:07,970 --> 00:21:09,590
means that the band object here will

437
00:21:09,590 --> 00:21:12,170
have everything that the being object

438
00:21:12,170 --> 00:21:15,650
has and more you can override anything

439
00:21:15,650 --> 00:21:17,570
that has been inherited from the being

440
00:21:17,570 --> 00:21:21,140
object if you want to as well and it

441
00:21:21,140 --> 00:21:23,900
also has a method here just to say

442
00:21:23,900 --> 00:21:29,900
something so if we create an instance of

443
00:21:29,900 --> 00:21:31,460
the band now you can always create an

444
00:21:31,460 --> 00:21:35,720
instance by using the new keyword and

445
00:21:35,720 --> 00:21:37,190
then you run the method on the band

446
00:21:37,190 --> 00:21:39,860
object and we'll just return to the

447
00:21:39,860 --> 00:21:41,810
value I feel like famous wasted on me

448
00:21:41,810 --> 00:21:44,390
that's all fine but then if you run the

449
00:21:44,390 --> 00:21:46,340
grid method the greet method doesn't

450
00:21:46,340 --> 00:21:48,380
actually exist on the band object it

451
00:21:48,380 --> 00:21:50,780
came from the being object should have a

452
00:21:50,780 --> 00:21:52,760
JavaScript works is that I first check

453
00:21:52,760 --> 00:21:56,450
the band instance like do does this

454
00:21:56,450 --> 00:21:58,460
specific instance have a great method

455
00:21:58,460 --> 00:22:02,060
now okay just a prototype fell off sorry

456
00:22:02,060 --> 00:22:05,180
for all been objects have it no it goes

457
00:22:05,180 --> 00:22:07,220
up to the being prototype all right

458
00:22:07,220 --> 00:22:09,200
there's a great method fine let's just

459
00:22:09,200 --> 00:22:11,660
execute it down and if the being our

460
00:22:11,660 --> 00:22:13,310
vehicle don't have it either it goes up

461
00:22:13,310 --> 00:22:15,560
to the object because as I said before

462
00:22:15,560 --> 00:22:17,840
object is on the top of it all

463
00:22:17,840 --> 00:22:23,169
everything goes up to object

464
00:22:23,179 --> 00:22:25,799
there are a number of people way smarter

465
00:22:25,799 --> 00:22:29,279
than I am that have tried to implement

466
00:22:29,279 --> 00:22:33,929
it well syntax for use in class based in

467
00:22:33,929 --> 00:22:36,960
heritage in JavaScript so you can write

468
00:22:36,960 --> 00:22:40,139
code the same way and just make sure to

469
00:22:40,139 --> 00:22:42,779
cover up for where javascript doesn't

470
00:22:42,779 --> 00:22:46,830
actually work that way I think the first

471
00:22:46,830 --> 00:22:49,529
example here is done my John Resig who's

472
00:22:49,529 --> 00:22:53,039
actually here somewhere and the other

473
00:22:53,039 --> 00:22:55,320
one is by Dean Edwards who so JavaScript

474
00:22:55,320 --> 00:22:57,389
God and the last one is from the

475
00:22:57,389 --> 00:23:00,389
prototype JavaScript library and why

476
00:23:00,389 --> 00:23:03,629
included this is if you understand the

477
00:23:03,629 --> 00:23:05,549
code in the pages that are linked to

478
00:23:05,549 --> 00:23:07,470
hear you know everything you will ever

479
00:23:07,470 --> 00:23:09,120
need to know about JavaScript and then

480
00:23:09,120 --> 00:23:10,440
you're all set then you can retire

481
00:23:10,440 --> 00:23:12,480
because there's nothing more to learn

482
00:23:12,480 --> 00:23:14,519
but it's interesting to look at it and

483
00:23:14,519 --> 00:23:16,289
take their code and mess it up and kind

484
00:23:16,289 --> 00:23:18,980
of see how JavaScript behaves as well

485
00:23:18,980 --> 00:23:22,350
what I would like to argue for using the

486
00:23:22,350 --> 00:23:25,159
prototype syntax that exists in

487
00:23:25,159 --> 00:23:28,049
JavaScript because even if the other

488
00:23:28,049 --> 00:23:29,700
solutions but other people are very

489
00:23:29,700 --> 00:23:31,799
smart it's not really native JavaScript

490
00:23:31,799 --> 00:23:34,019
it's not the way JavaScript actually

491
00:23:34,019 --> 00:23:36,360
works and if you use the prototype

492
00:23:36,360 --> 00:23:39,450
syntax anyone that knows java script

493
00:23:39,450 --> 00:23:41,370
will understand your code right away

494
00:23:41,370 --> 00:23:44,190
without some special code that you wrote

495
00:23:44,190 --> 00:23:47,389
and just to cover up for it and

496
00:23:47,389 --> 00:23:50,070
especially for me what I say in

497
00:23:50,070 --> 00:23:51,870
different projects like a developer

498
00:23:51,870 --> 00:23:53,399
works on something for about six months

499
00:23:53,399 --> 00:23:55,320
and then he gets thrown into another

500
00:23:55,320 --> 00:23:57,419
project and new developer comes in and

501
00:23:57,419 --> 00:23:59,700
new developer has to learn their own

502
00:23:59,700 --> 00:24:01,889
developers special methods to fix things

503
00:24:01,889 --> 00:24:08,190
and it doesn't really work and well the

504
00:24:08,190 --> 00:24:10,940
Godfather JavaScript Douglas Crockford

505
00:24:10,940 --> 00:24:14,220
is also writing code to do this and his

506
00:24:14,220 --> 00:24:16,860
conclusion is basically that well you

507
00:24:16,860 --> 00:24:19,049
can use a super function or uber

508
00:24:19,049 --> 00:24:21,350
function if you will and call that but

509
00:24:21,350 --> 00:24:23,340
you don't really need it that's not

510
00:24:23,340 --> 00:24:26,000
really how you usually use JavaScript

511
00:24:26,000 --> 00:24:28,620
actually asking about three days ago if

512
00:24:28,620 --> 00:24:31,019
it still stood by the statement and he

513
00:24:31,019 --> 00:24:39,200
seemed to not so this still goes

514
00:24:39,210 --> 00:24:41,980
and something that's very good to know

515
00:24:41,980 --> 00:24:45,310
when javascript is scope like where do

516
00:24:45,310 --> 00:24:48,160
you have access to something and why and

517
00:24:48,160 --> 00:24:50,440
how do you all right things and how can

518
00:24:50,440 --> 00:24:52,870
your code collide with other parts of

519
00:24:52,870 --> 00:24:57,040
your code and basically what what scope

520
00:24:57,040 --> 00:24:59,770
is is for variables and functions are

521
00:24:59,770 --> 00:25:02,050
accessible and what context we are in

522
00:25:02,050 --> 00:25:07,300
right now and it's pretty easy in

523
00:25:07,300 --> 00:25:09,070
JavaScript we have a global scope which

524
00:25:09,070 --> 00:25:10,840
is pretty much everywhere or we have a

525
00:25:10,840 --> 00:25:16,990
local scope in the function you're in so

526
00:25:16,990 --> 00:25:19,450
if you have in a javascript file we just

527
00:25:19,450 --> 00:25:21,670
have a variable that's just lying there

528
00:25:21,670 --> 00:25:23,950
it likes to play it's accessible

529
00:25:23,950 --> 00:25:27,430
everywhere and within a function use the

530
00:25:27,430 --> 00:25:29,890
bar likes to play that makes it local

531
00:25:29,890 --> 00:25:32,050
and a very very common problem in

532
00:25:32,050 --> 00:25:33,760
JavaScript these people forgetting to

533
00:25:33,760 --> 00:25:35,470
use the VAR keyword within a function

534
00:25:35,470 --> 00:25:37,870
and if you forget the VAR keyword in a

535
00:25:37,870 --> 00:25:40,590
function it automatically becomes global

536
00:25:40,590 --> 00:25:43,540
which is messy because people miss it

537
00:25:43,540 --> 00:25:46,270
and they override something else and you

538
00:25:46,270 --> 00:25:50,890
have a problem and also if you come from

539
00:25:50,890 --> 00:25:53,050
other languages you use something called

540
00:25:53,050 --> 00:25:55,570
block scope like you could happen if the

541
00:25:55,570 --> 00:25:56,890
class here and just have something

542
00:25:56,890 --> 00:25:59,260
that's only available in that context

543
00:25:59,260 --> 00:26:01,060
but that's not really not really how

544
00:26:01,060 --> 00:26:03,790
JavaScript works in JavaScript you can

545
00:26:03,790 --> 00:26:05,380
have a nice clothes here and just

546
00:26:05,380 --> 00:26:07,210
decline sort of declare the variable

547
00:26:07,210 --> 00:26:09,580
within there but you can still access it

548
00:26:09,580 --> 00:26:12,340
anywhere outside of it of that clause

549
00:26:12,340 --> 00:26:14,170
anywhere within the function you can

550
00:26:14,170 --> 00:26:16,180
access a variable declared declared

551
00:26:16,180 --> 00:26:22,900
within the function and the same goes

552
00:26:22,900 --> 00:26:25,390
for function is global you can access it

553
00:26:25,390 --> 00:26:29,110
anywhere but then we can you know take a

554
00:26:29,110 --> 00:26:32,020
step forward and just start nesting

555
00:26:32,020 --> 00:26:35,260
functions and this one it becomes a bit

556
00:26:35,260 --> 00:26:36,550
interesting because then you can run

557
00:26:36,550 --> 00:26:38,710
things within a certain context that's

558
00:26:38,710 --> 00:26:41,920
not available anywhere else so the inner

559
00:26:41,920 --> 00:26:44,440
function you can only run it or access

560
00:26:44,440 --> 00:26:50,290
it from within the outer function

561
00:26:50,300 --> 00:26:54,690
and I see a lot of people trying to use

562
00:26:54,690 --> 00:26:56,580
the disc keyword in Java Script like

563
00:26:56,580 --> 00:26:59,970
this dot something and then don't really

564
00:26:59,970 --> 00:27:03,390
know why this is a certain value or how

565
00:27:03,390 --> 00:27:06,780
to control that value so what you can do

566
00:27:06,780 --> 00:27:09,420
with a function is they can use the call

567
00:27:09,420 --> 00:27:13,050
or the apply method on a function to set

568
00:27:13,050 --> 00:27:14,820
the actual context for that function

569
00:27:14,820 --> 00:27:16,950
it's just built in for every function

570
00:27:16,950 --> 00:27:19,070
you don't need to declare it anywhere

571
00:27:19,070 --> 00:27:23,910
and if you generally in a web browser if

572
00:27:23,910 --> 00:27:25,470
you have a function here and you have

573
00:27:25,470 --> 00:27:27,690
the onload event on the window it calls

574
00:27:27,690 --> 00:27:30,120
the function that this keyword here

575
00:27:30,120 --> 00:27:32,850
equals to window object because it's the

576
00:27:32,850 --> 00:27:36,810
global object in a web browser let's say

577
00:27:36,810 --> 00:27:39,810
you want it to be something else then we

578
00:27:39,810 --> 00:27:42,090
can have the on click event here and you

579
00:27:42,090 --> 00:27:44,880
have the set name function and if you

580
00:27:44,880 --> 00:27:46,800
see it at the bottom here is uses dot

581
00:27:46,800 --> 00:27:49,530
call which means that it will call the

582
00:27:49,530 --> 00:27:52,230
set name function in the context I want

583
00:27:52,230 --> 00:27:55,470
it to be so the first parameter here

584
00:27:55,470 --> 00:27:58,200
it's document it could be anything I

585
00:27:58,200 --> 00:28:01,560
want and what I said is the first

586
00:28:01,560 --> 00:28:04,530
parameter here will be the disk keyword

587
00:28:04,530 --> 00:28:07,590
in the receiving function and if I had a

588
00:28:07,590 --> 00:28:09,120
number of parameters up there like you

589
00:28:09,120 --> 00:28:11,700
see the name parameter that will not be

590
00:28:11,700 --> 00:28:13,920
the document name so if you use the call

591
00:28:13,920 --> 00:28:16,260
method the first one only says context

592
00:28:16,260 --> 00:28:18,150
it not the first parameter to the

593
00:28:18,150 --> 00:28:22,020
receiving function and the apply method

594
00:28:22,020 --> 00:28:24,600
is pretty much the same with the call

595
00:28:24,600 --> 00:28:26,330
method yes sending a comma-separated

596
00:28:26,330 --> 00:28:29,490
thing with different values the apply

597
00:28:29,490 --> 00:28:32,310
method is for you send in an array or a

598
00:28:32,310 --> 00:28:35,610
collection instead so what you can use

599
00:28:35,610 --> 00:28:37,530
here we were talking about arguments

600
00:28:37,530 --> 00:28:40,440
before that in the call set names

601
00:28:40,440 --> 00:28:42,720
function here we can just take all the

602
00:28:42,720 --> 00:28:44,640
arguments setting to that function and

603
00:28:44,640 --> 00:28:47,520
just pass them on to the other function

604
00:28:47,520 --> 00:28:50,370
and you supply to run it in the context

605
00:28:50,370 --> 00:28:54,570
of the document object

606
00:28:54,580 --> 00:28:58,039
and then we have closures and closest

607
00:28:58,039 --> 00:29:01,940
are the best thing in the world and then

608
00:29:01,940 --> 00:29:04,279
just to get the right state of mind I

609
00:29:04,279 --> 00:29:06,830
think about closure is I want you to go

610
00:29:06,830 --> 00:29:10,009
to your happy place you know just back

611
00:29:10,009 --> 00:29:14,179
down and feel nice about it what makes

612
00:29:14,179 --> 00:29:15,950
you happy what makes you relax what

613
00:29:15,950 --> 00:29:23,080
makes you what makes you feel good and

614
00:29:23,080 --> 00:29:26,600
when you are in that state you're pretty

615
00:29:26,600 --> 00:29:32,330
much ready to to grasp closures and what

616
00:29:32,330 --> 00:29:36,649
closes are its expressions that you use

617
00:29:36,649 --> 00:29:38,779
to create your own context and where you

618
00:29:38,779 --> 00:29:41,299
can access certain values in a context

619
00:29:41,299 --> 00:29:44,059
that you control and as we saw before

620
00:29:44,059 --> 00:29:46,220
with inner functions nested in outer

621
00:29:46,220 --> 00:29:49,509
functions the inner functions can always

622
00:29:49,509 --> 00:29:52,669
reference something in the containing

623
00:29:52,669 --> 00:29:56,000
function which is just a bunch of words

624
00:29:56,000 --> 00:29:58,759
I'm saying so let's see some code for it

625
00:29:58,759 --> 00:30:04,039
and no it's what's fun presenting when

626
00:30:04,039 --> 00:30:07,429
people just start gaping but the thing

627
00:30:07,429 --> 00:30:09,889
here is that we have the bar add five

628
00:30:09,889 --> 00:30:13,070
variable here which equals a call to the

629
00:30:13,070 --> 00:30:16,220
add method with the value of five as you

630
00:30:16,220 --> 00:30:18,649
see in the add method it returns the

631
00:30:18,649 --> 00:30:21,259
function where it applies an outdoor

632
00:30:21,259 --> 00:30:23,960
value with an inner value and then I can

633
00:30:23,960 --> 00:30:26,570
use it the result to that call in

634
00:30:26,570 --> 00:30:30,169
another function which is usually I

635
00:30:30,169 --> 00:30:32,269
explain it and we're pretty much here in

636
00:30:32,269 --> 00:30:36,350
our relationship so if you break it down

637
00:30:36,350 --> 00:30:40,070
here you send in the x value the first

638
00:30:40,070 --> 00:30:41,990
time the add function is being called

639
00:30:41,990 --> 00:30:44,450
and as you said inner functions can

640
00:30:44,450 --> 00:30:46,370
always reference values of its

641
00:30:46,370 --> 00:30:48,860
containing function so it would remember

642
00:30:48,860 --> 00:30:51,710
the value of x at the time it was being

643
00:30:51,710 --> 00:30:53,690
called and it was always always remember

644
00:30:53,690 --> 00:30:57,350
that so the way javascript actually sees

645
00:30:57,350 --> 00:31:00,440
to add the five function that we declare

646
00:31:00,440 --> 00:31:03,080
with a variable here is like the bottom

647
00:31:03,080 --> 00:31:06,019
here like it remembers the value five

648
00:31:06,019 --> 00:31:06,890
forever

649
00:31:06,890 --> 00:31:09,320
because it was five at the time it was

650
00:31:09,320 --> 00:31:12,200
called and then just applies the new

651
00:31:12,200 --> 00:31:15,260
values you can take this code and mess

652
00:31:15,260 --> 00:31:16,580
around with it and that will make some

653
00:31:16,580 --> 00:31:23,210
more sense I hope and to have a more

654
00:31:23,210 --> 00:31:26,900
real live context words and actually got

655
00:31:26,900 --> 00:31:28,700
this question last night because a

656
00:31:28,700 --> 00:31:31,490
person had this problem which made me

657
00:31:31,490 --> 00:31:34,280
very happy because it it should imply

658
00:31:34,280 --> 00:31:36,980
that this example is good and is that

659
00:31:36,980 --> 00:31:40,340
the people usually have loops in a web

660
00:31:40,340 --> 00:31:42,950
page and they just like here you create

661
00:31:42,950 --> 00:31:46,670
five link elements you will give them a

662
00:31:46,670 --> 00:31:49,940
value like link 0 link 1 etc you also

663
00:31:49,940 --> 00:31:53,510
apply an on-click event to it and you

664
00:31:53,510 --> 00:31:55,400
want when the link is being clicked that

665
00:31:55,400 --> 00:31:57,920
it should say it's number now the first

666
00:31:57,920 --> 00:31:59,780
one should be 0 the next one should be 1

667
00:31:59,780 --> 00:32:03,260
etc but what happens with this code is

668
00:32:03,260 --> 00:32:05,450
that every link you click in the web

669
00:32:05,450 --> 00:32:10,280
page will say 5 which makes people go a

670
00:32:10,280 --> 00:32:12,050
bit crazy because that's not really what

671
00:32:12,050 --> 00:32:14,600
they thought it would be and the reason

672
00:32:14,600 --> 00:32:17,480
here is that the function here that's

673
00:32:17,480 --> 00:32:19,820
applied to the on click event it's not

674
00:32:19,820 --> 00:32:22,700
actually called when you apply it to the

675
00:32:22,700 --> 00:32:25,790
link and that's the key reason here like

676
00:32:25,790 --> 00:32:27,860
we said before it would just remember

677
00:32:27,860 --> 00:32:31,160
the value of its outer function so it

678
00:32:31,160 --> 00:32:34,640
will remember the value of I when the

679
00:32:34,640 --> 00:32:37,940
function is finished so what you would

680
00:32:37,940 --> 00:32:41,000
want to do instead is where we have the

681
00:32:41,000 --> 00:32:43,580
on click event here is that you apply it

682
00:32:43,580 --> 00:32:46,430
to what we talked about before a salt

683
00:32:46,430 --> 00:32:48,710
invoking function that sounds in the

684
00:32:48,710 --> 00:32:52,160
value I at that moment in time at that

685
00:32:52,160 --> 00:32:58,490
specific iteration so as you see here it

686
00:32:58,490 --> 00:33:01,220
linked on click equals function blah

687
00:33:01,220 --> 00:33:03,740
blah blah but it also calls itself right

688
00:33:03,740 --> 00:33:06,910
away at the end with the value of I ok

689
00:33:06,910 --> 00:33:11,270
and the value of I is something as the

690
00:33:11,270 --> 00:33:14,210
parameter nom and then it returns a

691
00:33:14,210 --> 00:33:19,080
function that remembers the value of num

692
00:33:19,080 --> 00:33:22,470
and that what what creating closure is

693
00:33:22,470 --> 00:33:24,870
all about it it just consumed that value

694
00:33:24,870 --> 00:33:26,549
and the inner function will always

695
00:33:26,549 --> 00:33:28,529
remember the value of this outer

696
00:33:28,529 --> 00:33:30,779
function just when it happened not when

697
00:33:30,779 --> 00:33:33,720
you click it or or five years later just

698
00:33:33,720 --> 00:33:41,190
that moment in time and to take use of

699
00:33:41,190 --> 00:33:43,049
all this code its have something

700
00:33:43,049 --> 00:33:45,299
nicknamed at Yahoo JavaScript module

701
00:33:45,299 --> 00:33:49,019
pattern and again mr. Crawford and it's

702
00:33:49,019 --> 00:33:50,880
a singleton pattern to create an object

703
00:33:50,880 --> 00:33:54,029
and two in JavaScript even though is not

704
00:33:54,029 --> 00:33:55,860
supported you can have private members

705
00:33:55,860 --> 00:34:01,860
and public members of an object so I

706
00:34:01,860 --> 00:34:03,539
shouldn't mention first just to be fair

707
00:34:03,539 --> 00:34:05,159
to ban this is actually a good movie I

708
00:34:05,159 --> 00:34:06,960
was a bit scared when I saw it start and

709
00:34:06,960 --> 00:34:10,050
so directed by ben affleck and no damn

710
00:34:10,050 --> 00:34:14,520
but it was actually good anyway what you

711
00:34:14,520 --> 00:34:16,770
do here is we were talking about the

712
00:34:16,770 --> 00:34:18,899
thing of having functions calling

713
00:34:18,899 --> 00:34:21,119
themselves right away to create a

714
00:34:21,119 --> 00:34:24,300
closure I a context where you can just

715
00:34:24,300 --> 00:34:26,310
access whatever you want but not from

716
00:34:26,310 --> 00:34:31,080
the outside so what we have here is just

717
00:34:31,080 --> 00:34:33,179
a regular function but you see down here

718
00:34:33,179 --> 00:34:36,179
that recalls itself right away and it

719
00:34:36,179 --> 00:34:38,210
also has a return statement here and

720
00:34:38,210 --> 00:34:41,060
what you have in the return statement is

721
00:34:41,060 --> 00:34:43,980
what will be global as a result from

722
00:34:43,980 --> 00:34:47,790
this so in practice then everything you

723
00:34:47,790 --> 00:34:49,649
have declared a bomb like the Devourer

724
00:34:49,649 --> 00:34:51,419
keyword for the movie title and they

725
00:34:51,419 --> 00:34:54,510
extracted by van variables that will

726
00:34:54,510 --> 00:34:56,760
only be accessible from within this

727
00:34:56,760 --> 00:34:59,490
function so you have private members of

728
00:34:59,490 --> 00:35:03,930
an object what you could also do just to

729
00:35:03,930 --> 00:35:05,640
show a different version of the syntax

730
00:35:05,640 --> 00:35:08,609
if you have the same property name same

731
00:35:08,609 --> 00:35:13,800
object name is that the return statement

732
00:35:13,800 --> 00:35:17,609
part because some people program ap is

733
00:35:17,609 --> 00:35:19,430
and similar that in the return statement

734
00:35:19,430 --> 00:35:22,349
you only want to have the names of

735
00:35:22,349 --> 00:35:25,380
something that you expose basically it's

736
00:35:25,380 --> 00:35:28,290
just easier to read so if you have heard

737
00:35:28,290 --> 00:35:30,270
a title equals to us

738
00:35:30,270 --> 00:35:33,020
colon title and directed by ben colon

739
00:35:33,020 --> 00:35:35,790
the one behind the colon could be any

740
00:35:35,790 --> 00:35:39,150
name of the function declared above with

741
00:35:39,150 --> 00:35:41,190
the VAR keyword is just to make it

742
00:35:41,190 --> 00:35:49,080
easier and also with we're talking about

743
00:35:49,080 --> 00:35:51,780
the prototype inheritance and also

744
00:35:51,780 --> 00:35:53,100
people coming from or classical

745
00:35:53,100 --> 00:35:56,880
languages inheritance is good but

746
00:35:56,880 --> 00:35:58,650
inheritance is also something that

747
00:35:58,650 --> 00:36:00,930
people seem to keep fixated with and

748
00:36:00,930 --> 00:36:02,850
then you start inheriting things in 10

749
00:36:02,850 --> 00:36:04,950
different lines and you get performance

750
00:36:04,950 --> 00:36:07,650
problem sometimes similar so I just want

751
00:36:07,650 --> 00:36:09,690
to bring up the concept of name spacing

752
00:36:09,690 --> 00:36:11,970
in JavaScript and a name spacing could

753
00:36:11,970 --> 00:36:15,630
pretty much mean anything so what I'm

754
00:36:15,630 --> 00:36:17,550
talking about here is well first we want

755
00:36:17,550 --> 00:36:19,050
to avoid global variables because

756
00:36:19,050 --> 00:36:21,210
they're evil that's one of the things

757
00:36:21,210 --> 00:36:22,890
all the stage started to help us make

758
00:36:22,890 --> 00:36:25,440
sure you're on the same page it was also

759
00:36:25,440 --> 00:36:27,990
about code structure and about extending

760
00:36:27,990 --> 00:36:30,260
code without having an actual

761
00:36:30,260 --> 00:36:35,010
inheritance relationship so if we have

762
00:36:35,010 --> 00:36:36,960
just a regular object air we have a band

763
00:36:36,960 --> 00:36:39,630
object and on the band object you call

764
00:36:39,630 --> 00:36:43,500
something band the dot director and as

765
00:36:43,500 --> 00:36:45,270
you saw before i'm using the module

766
00:36:45,270 --> 00:36:47,010
pattern just to create something with a

767
00:36:47,010 --> 00:36:49,710
private member and then a public method

768
00:36:49,710 --> 00:36:53,850
you can call so the movies method here

769
00:36:53,850 --> 00:36:57,140
you can call it band director dot movies

770
00:36:57,140 --> 00:37:01,020
and say you have another object here the

771
00:37:01,020 --> 00:37:05,340
band dot actor object you can add all

772
00:37:05,340 --> 00:37:07,200
its own methods and variables and

773
00:37:07,200 --> 00:37:09,540
members and all that but if you want to

774
00:37:09,540 --> 00:37:12,120
it could also utilize what the band that

775
00:37:12,120 --> 00:37:14,880
director object offers so we were

776
00:37:14,880 --> 00:37:16,710
talking about using the call method

777
00:37:16,710 --> 00:37:18,240
before to call something in a certain

778
00:37:18,240 --> 00:37:21,720
context so what we do here is if we call

779
00:37:21,720 --> 00:37:24,840
the dot movies method of the director

780
00:37:24,840 --> 00:37:27,330
object but within the context of the

781
00:37:27,330 --> 00:37:32,220
band actor object I should also say that

782
00:37:32,220 --> 00:37:34,320
the top part here is is usually a little

783
00:37:34,320 --> 00:37:36,630
thing just in JavaScript that if you try

784
00:37:36,630 --> 00:37:39,270
to do something like penndot actor and

785
00:37:39,270 --> 00:37:41,160
the band na bo doesn't exist you will

786
00:37:41,160 --> 00:37:42,990
get an error so it's just about creating

787
00:37:42,990 --> 00:37:43,740
an empty

788
00:37:43,740 --> 00:37:52,220
object to avoid us

789
00:37:52,230 --> 00:37:55,420
and when it comes to program we also

790
00:37:55,420 --> 00:37:58,510
want to use all these well different

791
00:37:58,510 --> 00:38:02,440
terms like sugaring and currying which

792
00:38:02,440 --> 00:38:04,150
implies that there's something really

793
00:38:04,150 --> 00:38:07,299
cool going on and sugaring is something

794
00:38:07,299 --> 00:38:09,579
that cover before it's basically that

795
00:38:09,579 --> 00:38:11,619
you kind of sprinkle some sugar on the

796
00:38:11,619 --> 00:38:13,480
existing objects and make them a little

797
00:38:13,480 --> 00:38:16,569
better so string here is the native

798
00:38:16,569 --> 00:38:19,690
JavaScript string object use prototype

799
00:38:19,690 --> 00:38:21,789
on that and you add your own trim method

800
00:38:21,789 --> 00:38:26,170
because it doesn't exist one and then it

801
00:38:26,170 --> 00:38:29,619
will just replace all the well empty

802
00:38:29,619 --> 00:38:31,690
spaces in the beginning or at the end of

803
00:38:31,690 --> 00:38:34,539
that value and return that value that's

804
00:38:34,539 --> 00:38:36,730
sugaring pretty easy pretty now it's

805
00:38:36,730 --> 00:38:41,980
pretty useful for some cases and then

806
00:38:41,980 --> 00:38:43,869
this is probably i usually have it here

807
00:38:43,869 --> 00:38:46,270
just to mess with your minds because i

808
00:38:46,270 --> 00:38:47,920
will present this and you will wonder

809
00:38:47,920 --> 00:38:50,109
what the hell happened and then i will

810
00:38:50,109 --> 00:38:52,930
move on so for you to read the code

811
00:38:52,930 --> 00:38:55,690
later on as well but if you start with a

812
00:38:55,690 --> 00:38:57,579
regular function here we have the add

813
00:38:57,579 --> 00:39:01,270
function and it utilizes the arguments

814
00:39:01,270 --> 00:39:03,250
collection as you said before so it

815
00:39:03,250 --> 00:39:05,819
basically takes any kind of argument in

816
00:39:05,819 --> 00:39:08,319
iterates over that adds them together

817
00:39:08,319 --> 00:39:15,339
and returns the sum ok so then we bring

818
00:39:15,339 --> 00:39:16,900
crockford into the picture again

819
00:39:16,900 --> 00:39:18,880
actually try to write the better version

820
00:39:18,880 --> 00:39:21,880
and I failed side use this version here

821
00:39:21,880 --> 00:39:25,779
and what it does it we have the core

822
00:39:25,779 --> 00:39:27,549
JavaScript object to function object

823
00:39:27,549 --> 00:39:30,819
here you extend it through prototype

824
00:39:30,819 --> 00:39:34,059
with a method called curry and then a

825
00:39:34,059 --> 00:39:36,520
lot of weird goes on here that will

826
00:39:36,520 --> 00:39:41,410
in essence create magic and just to

827
00:39:41,410 --> 00:39:43,180
bring up some of the lines here did the

828
00:39:43,180 --> 00:39:45,339
first one here is a bit funky and we

829
00:39:45,339 --> 00:39:47,380
have the variable slice that equals

830
00:39:47,380 --> 00:39:50,289
array dot prototype tight slice what I

831
00:39:50,289 --> 00:39:52,869
do here is that I'm actually stealing

832
00:39:52,869 --> 00:39:55,150
the slice method from the array object

833
00:39:55,150 --> 00:39:57,430
without having an actual array I can

834
00:39:57,430 --> 00:39:59,230
just pick the Sherry's I want from an

835
00:39:59,230 --> 00:40:01,630
object and put them on my objects or

836
00:40:01,630 --> 00:40:07,309
call them but in my context if I want to

837
00:40:07,319 --> 00:40:10,390
so what I do is after I've stolen the

838
00:40:10,390 --> 00:40:12,309
slice method from the array object is

839
00:40:12,309 --> 00:40:14,829
that I call that slice object with the

840
00:40:14,829 --> 00:40:16,960
apply method that we had before to call

841
00:40:16,960 --> 00:40:19,839
it in a certain context and I call it

842
00:40:19,839 --> 00:40:22,119
with the arguments ie all the params

843
00:40:22,119 --> 00:40:25,420
that were sent into that function so

844
00:40:25,420 --> 00:40:27,009
there's a lot of weird code what it

845
00:40:27,009 --> 00:40:29,470
actually means and why it's being done

846
00:40:29,470 --> 00:40:31,299
is you remember I said before that

847
00:40:31,299 --> 00:40:33,670
arguments is a collection and not an

848
00:40:33,670 --> 00:40:36,640
array anything is I want to use array

849
00:40:36,640 --> 00:40:39,759
methods on it so that's why I use the

850
00:40:39,759 --> 00:40:42,220
slice method because the result of the

851
00:40:42,220 --> 00:40:46,499
slice method will return an array I know

852
00:40:46,499 --> 00:40:50,440
but it goes on we have the disc keyword

853
00:40:50,440 --> 00:40:52,720
and this keyword is for serve and it's

854
00:40:52,720 --> 00:40:55,019
about the context when it's being called

855
00:40:55,019 --> 00:40:57,579
and also with inner functions having

856
00:40:57,579 --> 00:41:00,759
access to outer functions just save it

857
00:41:00,759 --> 00:41:07,599
any variable called at that instead so

858
00:41:07,599 --> 00:41:09,519
what happens every time that we call

859
00:41:09,519 --> 00:41:11,410
this function further on is that we

860
00:41:11,410 --> 00:41:13,839
remember the value of args which is just

861
00:41:13,839 --> 00:41:17,710
the arguments as an array so I can use

862
00:41:17,710 --> 00:41:21,849
the concat method on it and just use

863
00:41:21,849 --> 00:41:24,640
slice again for the new arguments that

864
00:41:24,640 --> 00:41:28,029
get sent in so I can just send them all

865
00:41:28,029 --> 00:41:31,690
together or add them all up and you know

866
00:41:31,690 --> 00:41:35,529
it just seems well annoying and you know

867
00:41:35,529 --> 00:41:37,059
should I really know this and where it

868
00:41:37,059 --> 00:41:39,900
becomes powerful is that it's a bit of a

869
00:41:39,900 --> 00:41:42,660
meta programming in JavaScript just

870
00:41:42,660 --> 00:41:45,190
remembering the result of some action

871
00:41:45,190 --> 00:41:47,079
and then keep on working from that

872
00:41:47,079 --> 00:41:49,239
result so instead of starting from

873
00:41:49,239 --> 00:41:52,599
scratch all the time so what we do here

874
00:41:52,599 --> 00:41:54,910
is that we have just like before when

875
00:41:54,910 --> 00:41:57,849
we're adding up numbers that the first

876
00:41:57,849 --> 00:41:59,769
time we call the chiro method with any

877
00:41:59,769 --> 00:42:01,869
number of arguments we want it will

878
00:42:01,869 --> 00:42:03,940
remember the result to thatís or

879
00:42:03,940 --> 00:42:06,099
actually be the value of all those

880
00:42:06,099 --> 00:42:09,279
parameters then when we call that again

881
00:42:09,279 --> 00:42:10,809
with nother one actually means we can

882
00:42:10,809 --> 00:42:13,180
have two functions called with any

883
00:42:13,180 --> 00:42:14,730
number of arguments and will

884
00:42:14,730 --> 00:42:16,710
just pack it all together and give you

885
00:42:16,710 --> 00:42:25,430
the result of that so this is nice and

886
00:42:25,430 --> 00:42:28,740
if you code HTML or CSS or something you

887
00:42:28,740 --> 00:42:31,020
have validators and you can point out

888
00:42:31,020 --> 00:42:33,060
your own flaws or other people's flaws

889
00:42:33,060 --> 00:42:35,070
if you want to because it says so in the

890
00:42:35,070 --> 00:42:36,830
specification has to be a certain way

891
00:42:36,830 --> 00:42:38,880
it's not really the same way in

892
00:42:38,880 --> 00:42:42,000
JavaScript it's more about best

893
00:42:42,000 --> 00:42:44,869
practices what works what won't crash

894
00:42:44,869 --> 00:42:47,430
over time what what seems to be the most

895
00:42:47,430 --> 00:42:49,350
solid approach and I mentioned before

896
00:42:49,350 --> 00:42:52,800
with gaius lint jslint is a tool just to

897
00:42:52,800 --> 00:42:55,380
check your JavaScript syntax and it

898
00:42:55,380 --> 00:42:57,119
checks for small things like you forgot

899
00:42:57,119 --> 00:42:59,310
a semicolon or similar but it also

900
00:42:59,310 --> 00:43:01,770
checks for regular problems when will

901
00:43:01,770 --> 00:43:03,630
people or make the call to race or

902
00:43:03,630 --> 00:43:06,420
something so the code will run but it

903
00:43:06,420 --> 00:43:08,910
will not run as some people expect so I

904
00:43:08,910 --> 00:43:11,310
strongly recommend trying that too on

905
00:43:11,310 --> 00:43:16,369
your code and just see the feedback and

906
00:43:16,369 --> 00:43:19,560
I guess also my message today because

907
00:43:19,560 --> 00:43:21,380
i'm the boring guy I'm just presenting

908
00:43:21,380 --> 00:43:23,400
JavaScript how it actually works i'm not

909
00:43:23,400 --> 00:43:26,400
showing funky demos or videos or people

910
00:43:26,400 --> 00:43:28,920
moving i pause or telling about how much

911
00:43:28,920 --> 00:43:30,540
sex sells i'm just talking about

912
00:43:30,540 --> 00:43:33,330
javascript but what i wanted you to take

913
00:43:33,330 --> 00:43:36,480
with you it's javascript is something

914
00:43:36,480 --> 00:43:40,650
else it's not see your job hour or any

915
00:43:40,650 --> 00:43:43,050
of those languages and don't truly try

916
00:43:43,050 --> 00:43:45,359
to make it into that as well i mean it's

917
00:43:45,359 --> 00:43:48,119
like in your private life if you move on

918
00:43:48,119 --> 00:43:49,380
from a relationship to a new

919
00:43:49,380 --> 00:43:50,910
relationship i mean you can have them

920
00:43:50,910 --> 00:43:52,560
dye their hair and dress up as a nurse

921
00:43:52,560 --> 00:43:54,869
but it's not the same person so kind of

922
00:43:54,869 --> 00:43:58,980
drop it except javascript and and learn

923
00:43:58,980 --> 00:44:03,570
to love it instead and that's how we

924
00:44:03,570 --> 00:44:08,859
javascript is row thank you

