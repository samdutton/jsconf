1
00:00:09,299 --> 00:00:13,510

ways with the left pad jokes never gonna

2
00:00:13,510 --> 00:00:18,820
hear the end of the left pad jokes can

3
00:00:18,820 --> 00:00:24,039
everyone see that fantastic huh all

4
00:00:24,039 --> 00:00:26,350
right now so not trapped behind a podium

5
00:00:26,350 --> 00:00:28,270
gonna try and use the fancy web app

6
00:00:28,270 --> 00:00:30,160
which requires internet access therefore

7
00:00:30,160 --> 00:00:33,400
it's not gonna work no it's not oh it's

8
00:00:33,400 --> 00:00:34,030
gonna work

9
00:00:34,030 --> 00:00:39,940
Web Apps everyone so I'm Laurie like he

10
00:00:39,940 --> 00:00:41,770
said I'm the CTO of NPM Inc and the

11
00:00:41,770 --> 00:00:43,239
important thing to remember is that I'm

12
00:00:43,239 --> 00:00:45,879
not the famous NPM guy the famous NPM

13
00:00:45,879 --> 00:00:48,280
guy is Isaac Schluter not him I'm just

14
00:00:48,280 --> 00:00:49,690
the guy that he picked to run

15
00:00:49,690 --> 00:00:51,850
engineering and I'm here to talk about

16
00:00:51,850 --> 00:00:53,590
the stuff that everybody should know

17
00:00:53,590 --> 00:00:57,699
about NPM why am I talking about that

18
00:00:57,699 --> 00:01:00,699
stuff because NPM has a lot of users

19
00:01:00,699 --> 00:01:02,500
these days there's something like 4

20
00:01:02,500 --> 00:01:04,989
million NPM users and they download a

21
00:01:04,989 --> 00:01:08,860
billion packages every 7 days how many

22
00:01:08,860 --> 00:01:12,490
of you use NPM raise your hands how many

23
00:01:12,490 --> 00:01:16,630
of you use NPM every single day how many

24
00:01:16,630 --> 00:01:20,020
of you work for NPM you're all buying

25
00:01:20,020 --> 00:01:25,390
that guy a drink but my point is that

26
00:01:25,390 --> 00:01:28,630
the NPM community is growing really fast

27
00:01:28,630 --> 00:01:30,909
half of NPM users have been using it for

28
00:01:30,909 --> 00:01:33,580
less than a year which means that our

29
00:01:33,580 --> 00:01:35,530
Newser base is full of new people and

30
00:01:35,530 --> 00:01:36,369
that is great

31
00:01:36,369 --> 00:01:38,710
welcome to NPM but it means that there

32
00:01:38,710 --> 00:01:40,420
are a bunch of features of NPM that

33
00:01:40,420 --> 00:01:44,290
people who have been using NPM for a

34
00:01:44,290 --> 00:01:46,060
while know about but people who are new

35
00:01:46,060 --> 00:01:47,920
to NPM don't know about and you know

36
00:01:47,920 --> 00:01:50,020
that's more than half of you so that's

37
00:01:50,020 --> 00:01:52,869
what this talk is about fixing and I

38
00:01:52,869 --> 00:01:54,460
think even if you've been using NPM for

39
00:01:54,460 --> 00:01:55,780
a while there will be some stuff in here

40
00:01:55,780 --> 00:02:03,119
you don't know about so come on web apps

41
00:02:03,119 --> 00:02:04,960
let's start with the very most basic

42
00:02:04,960 --> 00:02:08,340
thing this is the architecture of NPM

43
00:02:08,340 --> 00:02:10,720
sitting on your computer is the CLI

44
00:02:10,720 --> 00:02:12,579
that's the command-line client that is

45
00:02:12,579 --> 00:02:15,069
the thing that runs when you run NPM and

46
00:02:15,069 --> 00:02:17,440
when you ask it to install and and when

47
00:02:17,440 --> 00:02:19,959
you ask NPM to install a package

48
00:02:19,959 --> 00:02:22,959
the CLI talks to the registry which is a

49
00:02:22,959 --> 00:02:24,640
set of servers all across the world and

50
00:02:24,640 --> 00:02:26,950
it asks it what versions exist and it

51
00:02:26,950 --> 00:02:29,260
tells them and then NPM picks from that

52
00:02:29,260 --> 00:02:31,120
set of versions the best version that

53
00:02:31,120 --> 00:02:34,000
matches the specifications in your

54
00:02:34,000 --> 00:02:36,790
package JSON and then it downloads it

55
00:02:36,790 --> 00:02:40,299
from one of three possible places first

56
00:02:40,299 --> 00:02:43,510
NPM will check the local cache if you've

57
00:02:43,510 --> 00:02:45,040
ever installed that version of that

58
00:02:45,040 --> 00:02:48,040
package before even if it was for some

59
00:02:48,040 --> 00:02:49,420
other project then it will install from

60
00:02:49,420 --> 00:02:52,060
the local copy this is gonna be super

61
00:02:52,060 --> 00:02:54,589
annoying

62
00:02:54,599 --> 00:02:58,150
so people complain oh NP M downloads the

63
00:02:58,150 --> 00:02:59,440
universe every single time it really

64
00:02:59,440 --> 00:03:00,670
doesn't like if you've ever downloaded

65
00:03:00,670 --> 00:03:02,410
that thing before it doesn't bother to

66
00:03:02,410 --> 00:03:05,019
do it and if it's not in the local cache

67
00:03:05,019 --> 00:03:06,220
it will check the registry and the

68
00:03:06,220 --> 00:03:07,989
registry is behind a very big worldwide

69
00:03:07,989 --> 00:03:10,750
cache called a CDN so usually when you

70
00:03:10,750 --> 00:03:12,640
download a package you're downloading it

71
00:03:12,640 --> 00:03:14,079
from very close to you you're

72
00:03:14,079 --> 00:03:15,489
downloading it from some server that's

73
00:03:15,489 --> 00:03:16,900
in your country which is why it's very

74
00:03:16,900 --> 00:03:19,150
fast and it's only if those other two

75
00:03:19,150 --> 00:03:20,920
fail that we go to our servers which are

76
00:03:20,920 --> 00:03:22,810
in the US and in Australia and in

77
00:03:22,810 --> 00:03:25,180
Germany so you're usually going pretty

78
00:03:25,180 --> 00:03:27,850
fast when all of this may sound really

79
00:03:27,850 --> 00:03:29,799
basic but the reason that I mentioned

80
00:03:29,799 --> 00:03:34,209
this stuff is because about half of NPM

81
00:03:34,209 --> 00:03:35,650
users don't know that the local cache

82
00:03:35,650 --> 00:03:38,319
exists and about 20 percent of NPM users

83
00:03:38,319 --> 00:03:40,959
don't know that the registry exists a

84
00:03:40,959 --> 00:03:43,120
lot of people think that NPM packages

85
00:03:43,120 --> 00:03:46,180
are just hosted on github which github

86
00:03:46,180 --> 00:03:47,859
would be very annoyed about if that were

87
00:03:47,859 --> 00:03:49,480
true because they download a billion

88
00:03:49,480 --> 00:03:51,400
packages every week that would be a lot

89
00:03:51,400 --> 00:03:53,019
of stuff from github for them to serve

90
00:03:53,019 --> 00:03:56,950
for free for no reason of course it is

91
00:03:56,950 --> 00:03:59,440
possible to specify a github URL as a

92
00:03:59,440 --> 00:04:02,139
package dependency and if you do that

93
00:04:02,139 --> 00:04:05,349
NPM will download from github and that

94
00:04:05,349 --> 00:04:07,000
will work with any git hosting service

95
00:04:07,000 --> 00:04:09,340
so you can use it with github gist's you

96
00:04:09,340 --> 00:04:11,260
can install from a gist if that felt

97
00:04:11,260 --> 00:04:13,780
like a good idea to you you can install

98
00:04:13,780 --> 00:04:15,340
from bitbucket you can install from git

99
00:04:15,340 --> 00:04:26,590
lab to my slides if you want to you can

100
00:04:26,590 --> 00:04:28,240
also have your own private copy of NPM

101
00:04:28,240 --> 00:04:31,519
called NPM Enterprise

102
00:04:31,529 --> 00:04:33,990
it sits inside your firewall and it

103
00:04:33,990 --> 00:04:35,569
hosts your packages for you

104
00:04:35,569 --> 00:04:39,029
NPM Enterprise will store copies of

105
00:04:39,029 --> 00:04:40,469
public packages as well as your private

106
00:04:40,469 --> 00:04:42,090
packages and you can apply your own

107
00:04:42,090 --> 00:04:43,770
policies for which of your packages get

108
00:04:43,770 --> 00:04:45,330
married inside your firewall so you can

109
00:04:45,330 --> 00:04:47,370
say just mirror the whole registry I

110
00:04:47,370 --> 00:04:48,960
want some kind of outage insurance you

111
00:04:48,960 --> 00:04:51,120
can say Mira stuff that matches my

112
00:04:51,120 --> 00:04:52,770
security pallas you can say mirrors

113
00:04:52,770 --> 00:04:54,300
stuff that matches my licensing

114
00:04:54,300 --> 00:04:58,899
restrictions whatever you want it to do

115
00:04:58,909 --> 00:05:03,060
and my slides are really messed up but

116
00:05:03,060 --> 00:05:04,560
that's the simplest picture of NPM as

117
00:05:04,560 --> 00:05:07,229
possible architecture so let's get on to

118
00:05:07,229 --> 00:05:08,339
the really interesting stuff which is

119
00:05:08,339 --> 00:05:10,199
the NPM commands starting with the most

120
00:05:10,199 --> 00:05:12,599
important NPM command which is NPM

121
00:05:12,599 --> 00:05:15,449
install NPM dash G this will update your

122
00:05:15,449 --> 00:05:20,310
NPM this will get you NPM 3 which is the

123
00:05:20,310 --> 00:05:22,439
latest NPM and it's not it's not bundled

124
00:05:22,439 --> 00:05:23,999
with anything other than node 4 right

125
00:05:23,999 --> 00:05:26,610
now and we recommend it it is both

126
00:05:26,610 --> 00:05:29,129
faster and more reliable than NPM 2 and

127
00:05:29,129 --> 00:05:31,979
that is you know that fact is new it was

128
00:05:31,979 --> 00:05:34,020
not faster and it was not more reliable

129
00:05:34,020 --> 00:05:37,259
until relatively recently if you're not

130
00:05:37,259 --> 00:05:39,089
yet ready to upgrade to NPM 3 you can

131
00:05:39,089 --> 00:05:40,319
use that command at the bottom which

132
00:05:40,319 --> 00:05:41,909
will give you the latest version of NPM

133
00:05:41,909 --> 00:05:44,460
to both NPM 2 and NPM 3 are updated

134
00:05:44,460 --> 00:05:46,680
every single week with new fixes so lots

135
00:05:46,680 --> 00:05:49,939
of people are dozens of versions behind

136
00:05:49,939 --> 00:05:54,779
this next command that you should know

137
00:05:54,779 --> 00:05:55,680
is NPM in it

138
00:05:55,680 --> 00:05:57,689
NPM and it will start a new package for

139
00:05:57,689 --> 00:06:00,599
you by creating your package JSON it

140
00:06:00,599 --> 00:06:02,099
will ask you a bunch of questions like a

141
00:06:02,099 --> 00:06:04,949
questionnaire but it also has a bunch of

142
00:06:04,949 --> 00:06:07,080
smart defaults so if you're just pretty

143
00:06:07,080 --> 00:06:08,639
sure that NPM init is going to get all

144
00:06:08,639 --> 00:06:10,110
the defaults right which it gets right

145
00:06:10,110 --> 00:06:12,240
most of the time you can just run NPM in

146
00:06:12,240 --> 00:06:16,289
it - - yes don't write your package JSON

147
00:06:16,289 --> 00:06:17,849
yourself this is the thing I'm going to

148
00:06:17,849 --> 00:06:20,310
come back to a couple of times most of

149
00:06:20,310 --> 00:06:22,199
the time NPM has tools that will write

150
00:06:22,199 --> 00:06:23,879
your package JSON for you and it's

151
00:06:23,879 --> 00:06:25,409
better at it than you are so you should

152
00:06:25,409 --> 00:06:30,479
just let it do that a relatively new

153
00:06:30,479 --> 00:06:33,810
feature of NPM is scopes there are so

154
00:06:33,810 --> 00:06:35,399
many packages now there's like 280

155
00:06:35,399 --> 00:06:38,039
thousand packages that if you're trying

156
00:06:38,039 --> 00:06:39,539
to name a new package it can be kind of

157
00:06:39,539 --> 00:06:40,800
a pain in the ass because all of the

158
00:06:40,800 --> 00:06:43,289
good names are taken so the solution is

159
00:06:43,289 --> 00:06:44,540
that you can publish packages

160
00:06:44,540 --> 00:06:46,700
underneath your username and this lets

161
00:06:46,700 --> 00:06:48,380
you use nice descriptive package names

162
00:06:48,380 --> 00:06:49,940
because nothing under your username is

163
00:06:49,940 --> 00:06:53,750
taken and the scope is part of the name

164
00:06:53,750 --> 00:06:55,820
so you publish using the scope and you

165
00:06:55,820 --> 00:06:57,470
install using the scope and you require

166
00:06:57,470 --> 00:06:59,060
the code using the scope it's extremely

167
00:06:59,060 --> 00:07:02,000
simple to use scoped packages can be

168
00:07:02,000 --> 00:07:03,590
public like global packages are and

169
00:07:03,590 --> 00:07:05,450
scoped packages can also be private

170
00:07:05,450 --> 00:07:07,610
which is another paid feature there's a

171
00:07:07,610 --> 00:07:11,810
couple of blogs in here here's an

172
00:07:11,810 --> 00:07:13,430
advanced trick this is the one that I

173
00:07:13,430 --> 00:07:14,870
throw in to make sure that nobody can

174
00:07:14,870 --> 00:07:16,250
say they didn't find anything they never

175
00:07:16,250 --> 00:07:19,640
knew before if you have a big team and

176
00:07:19,640 --> 00:07:22,550
you create packages all the time and you

177
00:07:22,550 --> 00:07:24,080
have some standards about what your

178
00:07:24,080 --> 00:07:26,840
package JSON should look like you can

179
00:07:26,840 --> 00:07:29,390
create a dot NPM init J's file in your

180
00:07:29,390 --> 00:07:32,420
home directory and when NPM in it runs

181
00:07:32,420 --> 00:07:34,160
it will pick up that file and execute it

182
00:07:34,160 --> 00:07:36,260
and change the questionnaire that NPM

183
00:07:36,260 --> 00:07:38,350
init runs which can be extremely useful

184
00:07:38,350 --> 00:07:40,940
you can set defaults that are different

185
00:07:40,940 --> 00:07:43,640
from the standard defaults you can skip

186
00:07:43,640 --> 00:07:45,650
questions you can set a package naming

187
00:07:45,650 --> 00:07:47,000
convention you can do whatever the hell

188
00:07:47,000 --> 00:07:49,190
you want because it's just arbitrary

189
00:07:49,190 --> 00:07:50,600
JavaScript running in there using a

190
00:07:50,600 --> 00:07:52,190
package called prom xored which I'm not

191
00:07:52,190 --> 00:07:54,560
gonna go into but you can do really cool

192
00:07:54,560 --> 00:07:57,350
stuff and just share that your npm in it

193
00:07:57,350 --> 00:07:58,880
with your entire team and sort of

194
00:07:58,880 --> 00:08:00,740
suddenly all of your packages across

195
00:08:00,740 --> 00:08:02,630
your team are initialized in the same

196
00:08:02,630 --> 00:08:06,740
useful way one last thing about MPM in

197
00:08:06,740 --> 00:08:08,420
it that some people don't know is that

198
00:08:08,420 --> 00:08:11,900
npm init can always be safely rerun and

199
00:08:11,900 --> 00:08:13,850
that's useful because npm makes smart

200
00:08:13,850 --> 00:08:16,280
guesses about stuff if you are in a git

201
00:08:16,280 --> 00:08:19,190
git repo and you run npm init and PM

202
00:08:19,190 --> 00:08:20,720
will know that and it will add your git

203
00:08:20,720 --> 00:08:23,450
repo to your repository field if you've

204
00:08:23,450 --> 00:08:25,370
installed stuff into node modules in you

205
00:08:25,370 --> 00:08:27,560
run npm in it it will automatically put

206
00:08:27,560 --> 00:08:29,570
the node modules into your dependencies

207
00:08:29,570 --> 00:08:32,240
field so even if you do that out of

208
00:08:32,240 --> 00:08:34,040
order even if you npm init and then you

209
00:08:34,040 --> 00:08:35,240
install some stuff and then you add a

210
00:08:35,240 --> 00:08:36,860
git repo you can just run NPM at it

211
00:08:36,860 --> 00:08:38,150
again and it will pick that stuff up

212
00:08:38,150 --> 00:08:39,740
again and then will add it to package

213
00:08:39,740 --> 00:08:41,360
JSON without blowing away any of the

214
00:08:41,360 --> 00:08:43,640
stuff that you put in to package JSON so

215
00:08:43,640 --> 00:08:44,960
it's completely safe and you can just

216
00:08:44,960 --> 00:08:46,280
rerun it all the time to make sure that

217
00:08:46,280 --> 00:08:48,440
NPM and it thinks that your package JSON

218
00:08:48,440 --> 00:08:55,280
is up to snuff so like I said never edit

219
00:08:55,280 --> 00:08:57,140
your package JSON yourself here's

220
00:08:57,140 --> 00:08:58,370
another way to avoid doing

221
00:08:58,370 --> 00:08:59,540
which a lot of people don't know which

222
00:08:59,540 --> 00:09:01,550
is npm install' - - save that will

223
00:09:01,550 --> 00:09:03,110
automatically add your package to your

224
00:09:03,110 --> 00:09:05,210
the package - your package JSON for you

225
00:09:05,210 --> 00:09:09,080
you can use - yes for short if you use -

226
00:09:09,080 --> 00:09:10,820
- save Devitt will add it to your dev

227
00:09:10,820 --> 00:09:12,740
dependencies you can also do - D for

228
00:09:12,740 --> 00:09:15,650
short why should you be adding stuff to

229
00:09:15,650 --> 00:09:17,870
your dev dependencies because then you

230
00:09:17,870 --> 00:09:20,110
can skip installing them on production

231
00:09:20,110 --> 00:09:22,610
npm install' - - production will skip it

232
00:09:22,610 --> 00:09:23,990
your dev dependencies which will make

233
00:09:23,990 --> 00:09:25,250
your production installs much much

234
00:09:25,250 --> 00:09:26,750
faster you won't need your testing

235
00:09:26,750 --> 00:09:28,960
framework you won't need a bunch of

236
00:09:28,960 --> 00:09:31,160
helper libraries that you only use in

237
00:09:31,160 --> 00:09:33,170
development on production so you can

238
00:09:33,170 --> 00:09:35,750
just skip installing them and another

239
00:09:35,750 --> 00:09:38,540
way to make installs faster is to use

240
00:09:38,540 --> 00:09:41,480
bundled dependencies bundle dependencies

241
00:09:41,480 --> 00:09:43,279
are included in your package they're

242
00:09:43,279 --> 00:09:45,560
thrown right in there so they don't need

243
00:09:45,560 --> 00:09:47,750
to be downloaded separately if you

244
00:09:47,750 --> 00:09:49,700
bundle all of your dependencies then an

245
00:09:49,700 --> 00:09:52,130
NPM install becomes a single large file

246
00:09:52,130 --> 00:09:53,690
that you download and unpack without

247
00:09:53,690 --> 00:09:55,190
having to do any additional downloads

248
00:09:55,190 --> 00:09:56,960
which can make things a lot faster and

249
00:09:56,960 --> 00:09:59,110
is a big time saver for larger projects

250
00:09:59,110 --> 00:10:02,450
this is how NPM distributes itself and

251
00:10:02,450 --> 00:10:04,310
PM bundles all of its dependencies

252
00:10:04,310 --> 00:10:09,500
together I mentioned earlier that when

253
00:10:09,500 --> 00:10:11,240
NPM installs it checks the server for

254
00:10:11,240 --> 00:10:13,310
the current list of versions this means

255
00:10:13,310 --> 00:10:16,040
that even if you already have the

256
00:10:16,040 --> 00:10:18,589
current version in your local cache it's

257
00:10:18,589 --> 00:10:20,240
still gonna need to check the server and

258
00:10:20,240 --> 00:10:21,650
hit the server and go are there any

259
00:10:21,650 --> 00:10:23,089
newer versions in this version that I

260
00:10:23,089 --> 00:10:26,540
have which means that you still have to

261
00:10:26,540 --> 00:10:28,850
hit the network and that check is

262
00:10:28,850 --> 00:10:30,050
usually very quick because it's just

263
00:10:30,050 --> 00:10:32,390
like a 304 most of the time because it's

264
00:10:32,390 --> 00:10:33,890
not really downloading anything but that

265
00:10:33,890 --> 00:10:35,600
can still be really annoying if you're

266
00:10:35,600 --> 00:10:37,459
in a low bandwidth environment like

267
00:10:37,459 --> 00:10:39,140
airplane Wi-Fi or the nation of

268
00:10:39,140 --> 00:10:43,700
Australia and the cashman option is your

269
00:10:43,700 --> 00:10:45,110
Savior here the catchment option

270
00:10:45,110 --> 00:10:46,820
controls how long NPM weights between

271
00:10:46,820 --> 00:10:48,470
checking the registry to see if there's

272
00:10:48,470 --> 00:10:50,990
a newer version and the default is just

273
00:10:50,990 --> 00:10:53,540
10 seconds so if you've got an install

274
00:10:53,540 --> 00:10:55,670
that's 30 seconds long it can check for

275
00:10:55,670 --> 00:10:57,620
the same package three times within the

276
00:10:57,620 --> 00:10:59,450
same installation sequence which is not

277
00:10:59,450 --> 00:11:02,300
super smart if I'm being honest so you

278
00:11:02,300 --> 00:11:03,860
can set that to 60 seconds or something

279
00:11:03,860 --> 00:11:05,930
else and your installs will often go a

280
00:11:05,930 --> 00:11:15,390
lot faster

281
00:11:15,400 --> 00:11:18,860
but NPM is more than just a way to to

282
00:11:18,860 --> 00:11:20,690
install the pendants ease NPM has a

283
00:11:20,690 --> 00:11:23,870
bunch of other stuff it's also a way to

284
00:11:23,870 --> 00:11:26,060
automate the way that your team uses

285
00:11:26,060 --> 00:11:27,740
your app that's one of the things that

286
00:11:27,740 --> 00:11:29,570
NPM with the features that NPM is sort

287
00:11:29,570 --> 00:11:31,670
of accumulated over the years is it's a

288
00:11:31,670 --> 00:11:33,560
way of crystallizing the best practices

289
00:11:33,560 --> 00:11:36,200
of your team into a machine rather than

290
00:11:36,200 --> 00:11:39,980
just a list and one of the simplest ways

291
00:11:39,980 --> 00:11:42,080
to do that is NPM default run scripts

292
00:11:42,080 --> 00:11:43,820
you can add these to the scripts section

293
00:11:43,820 --> 00:11:45,650
of your package JSON

294
00:11:45,650 --> 00:11:47,570
unfortunately there's no automatic way

295
00:11:47,570 --> 00:11:50,450
of doing it but then you then you and

296
00:11:50,450 --> 00:11:52,520
your team can use NPM start an NPM stop

297
00:11:52,520 --> 00:11:54,950
and restart and test to control the

298
00:11:54,950 --> 00:11:56,390
basic operations of the app that you're

299
00:11:56,390 --> 00:11:57,680
building

300
00:11:57,680 --> 00:12:00,320
NPM tests is also used by CI systems

301
00:12:00,320 --> 00:12:01,730
like Travis to run your tests

302
00:12:01,730 --> 00:12:03,110
automatically so you don't have to tell

303
00:12:03,110 --> 00:12:08,840
Travis how to do that so now you've got

304
00:12:08,840 --> 00:12:14,570
an app or a module wait no hang on there

305
00:12:14,570 --> 00:12:17,390
we go oh one other feature of run

306
00:12:17,390 --> 00:12:18,920
scripts is that they have dev

307
00:12:18,920 --> 00:12:22,730
dependencies in their path so if you

308
00:12:22,730 --> 00:12:24,380
have grunt oh you have gulp or your tap

309
00:12:24,380 --> 00:12:26,390
or you have mocha which you might be

310
00:12:26,390 --> 00:12:28,940
tempted to install globally and run your

311
00:12:28,940 --> 00:12:31,640
test with or run your tooling with you

312
00:12:31,640 --> 00:12:32,780
can install them into your dev

313
00:12:32,780 --> 00:12:35,180
dependencies and you can refer to them

314
00:12:35,180 --> 00:12:37,220
in your run scripts just directly

315
00:12:37,220 --> 00:12:38,360
without needing to know that they're

316
00:12:38,360 --> 00:12:41,750
installed this prevents two problems it

317
00:12:41,750 --> 00:12:43,100
prevents problems with different

318
00:12:43,100 --> 00:12:44,300
projects that you have requiring

319
00:12:44,300 --> 00:12:45,830
different versions of those things if

320
00:12:45,830 --> 00:12:47,360
you've ever had two projects that

321
00:12:47,360 --> 00:12:50,660
require different versions of mocha and

322
00:12:50,660 --> 00:12:52,520
fail your tests in either one then you

323
00:12:52,520 --> 00:12:54,020
can solve it by having them local to

324
00:12:54,020 --> 00:12:56,360
each project and it also saves your

325
00:12:56,360 --> 00:12:57,770
teammates from having to install those

326
00:12:57,770 --> 00:12:59,330
global tools when they install your

327
00:12:59,330 --> 00:13:00,800
project they just come along for the

328
00:13:00,800 --> 00:13:02,210
ride with the rest of the project which

329
00:13:02,210 --> 00:13:04,190
is super useful and it doesn't cost you

330
00:13:04,190 --> 00:13:05,210
anything because their dev dependencies

331
00:13:05,210 --> 00:13:06,800
you can skip installing them in

332
00:13:06,800 --> 00:13:11,990
production so now you've got an app or a

333
00:13:11,990 --> 00:13:13,370
module and you can test it and you can

334
00:13:13,370 --> 00:13:17,000
run it and you'll want to publish it if

335
00:13:17,000 --> 00:13:18,230
it's a package that you want the world

336
00:13:18,230 --> 00:13:19,760
to see then you can do what people have

337
00:13:19,760 --> 00:13:21,020
always done you could just run NPM

338
00:13:21,020 --> 00:13:22,760
publish and using

339
00:13:22,760 --> 00:13:25,610
using a global name but if it's just

340
00:13:25,610 --> 00:13:27,500
your team or if it's a personal app of

341
00:13:27,500 --> 00:13:29,420
yours you'll probably want to put it

342
00:13:29,420 --> 00:13:30,889
under scope and you might want it to be

343
00:13:30,889 --> 00:13:35,680
private so now we've got as far as

344
00:13:35,680 --> 00:13:40,290
publishing the first version of your app

345
00:13:40,300 --> 00:13:43,100
but the pub but the power of NPM comes

346
00:13:43,100 --> 00:13:45,019
from the way that it handles multiple

347
00:13:45,019 --> 00:13:48,199
versions and the root of that is

348
00:13:48,199 --> 00:13:51,139
semantic versioning or semver semantic

349
00:13:51,139 --> 00:13:53,269
versioning at heart is very simple you

350
00:13:53,269 --> 00:13:55,190
know past it's hard it gets very very

351
00:13:55,190 --> 00:13:56,930
complicated but at heart it's very

352
00:13:56,930 --> 00:14:00,290
simple semver is a contract it's a

353
00:14:00,290 --> 00:14:02,060
contract between the author of a package

354
00:14:02,060 --> 00:14:04,880
and the users of the package that says

355
00:14:04,880 --> 00:14:07,070
how big a change happened between two

356
00:14:07,070 --> 00:14:08,720
versions the first number called the

357
00:14:08,720 --> 00:14:11,750
major number is for breaking changes

358
00:14:11,750 --> 00:14:13,399
it's for stuff that requires users to

359
00:14:13,399 --> 00:14:14,660
change their code if they're going to

360
00:14:14,660 --> 00:14:16,760
use this new version the second number

361
00:14:16,760 --> 00:14:18,529
called the minors for feature changes it

362
00:14:18,529 --> 00:14:19,760
means you've added something without

363
00:14:19,760 --> 00:14:21,279
changing anything that was there before

364
00:14:21,279 --> 00:14:24,440
and the last one called the patch number

365
00:14:24,440 --> 00:14:26,480
is for bug and security fixes they

366
00:14:26,480 --> 00:14:28,639
should correct bugs without requiring

367
00:14:28,639 --> 00:14:33,960
people to change their code in any way

368
00:14:33,970 --> 00:14:36,380
when you update your package you have to

369
00:14:36,380 --> 00:14:38,209
update your version and the version is

370
00:14:38,209 --> 00:14:39,889
part of package JSON so like most

371
00:14:39,889 --> 00:14:42,829
changes to package JSON NPM has a way to

372
00:14:42,829 --> 00:14:46,250
do that for you use NPM version major

373
00:14:46,250 --> 00:14:48,290
for breaking changes use NPM version

374
00:14:48,290 --> 00:14:50,089
minor for new features in NPM version

375
00:14:50,089 --> 00:14:53,029
patch for fixes version also supports

376
00:14:53,029 --> 00:14:54,589
all of the other sort of complicated

377
00:14:54,589 --> 00:14:57,199
edge cases of the semper versioning

378
00:14:57,199 --> 00:14:59,240
system but they're complicated so I'm

379
00:14:59,240 --> 00:15:01,269
not going to go into them

380
00:15:01,269 --> 00:15:03,769
version also creates a get tag at the

381
00:15:03,769 --> 00:15:05,899
same time that it that it bumps your

382
00:15:05,899 --> 00:15:07,670
version for you and it tags your your

383
00:15:07,670 --> 00:15:09,410
get repo which is extremely useful so

384
00:15:09,410 --> 00:15:11,720
you can throw in a dash M and that will

385
00:15:11,720 --> 00:15:14,269
be applied to the as the commit message

386
00:15:14,269 --> 00:15:18,800
for that get tag but of course semver is

387
00:15:18,800 --> 00:15:22,000
a promise it's not a guarantee and

388
00:15:22,000 --> 00:15:25,490
sometimes those things that you thought

389
00:15:25,490 --> 00:15:27,589
were features they cause stuff to break

390
00:15:27,589 --> 00:15:29,839
because you didn't do the feature right

391
00:15:29,839 --> 00:15:31,699
and sometimes you're bug fix causes

392
00:15:31,699 --> 00:15:32,899
stuff to break because people were

393
00:15:32,899 --> 00:15:35,050
relying on the broken behavior

394
00:15:35,050 --> 00:15:37,630
that shouldn't happen but it does so

395
00:15:37,630 --> 00:15:39,339
what is a responsible NPM developers

396
00:15:39,339 --> 00:15:40,589
supposed to do

397
00:15:40,589 --> 00:15:43,720
well NPM shrink-wrap was invented to

398
00:15:43,720 --> 00:15:45,550
solve that problem it captures your

399
00:15:45,550 --> 00:15:47,200
entire dependency tree all of their

400
00:15:47,200 --> 00:15:48,670
dependencies and their dependencies all

401
00:15:48,670 --> 00:15:51,820
the way down and it saves them to a

402
00:15:51,820 --> 00:15:53,620
shrink wrap JSON file which it puts in

403
00:15:53,620 --> 00:15:55,450
the root of your package and it once

404
00:15:55,450 --> 00:15:58,000
when you install your package elsewhere

405
00:15:58,000 --> 00:16:00,640
if there's a shrink wrap file there NPM

406
00:16:00,640 --> 00:16:02,620
will install the exact version specified

407
00:16:02,620 --> 00:16:06,130
in the shrink wrap file but there's a

408
00:16:06,130 --> 00:16:07,360
problem with that which is that shrink

409
00:16:07,360 --> 00:16:10,899
wrap is kind of buggy sorry we're

410
00:16:10,899 --> 00:16:12,700
working on that but in the meantime

411
00:16:12,700 --> 00:16:15,370
there's packages like cling wrap and I

412
00:16:15,370 --> 00:16:18,910
think shrunk wrap or something which

413
00:16:18,910 --> 00:16:20,860
have had some success instead of

414
00:16:20,860 --> 00:16:22,570
papering over the holes that exist in

415
00:16:22,570 --> 00:16:24,250
shrink wrap right now but actually

416
00:16:24,250 --> 00:16:25,750
fixing shrink wrap is one of the things

417
00:16:25,750 --> 00:16:28,829
that the team is working on this year

418
00:16:28,829 --> 00:16:31,920
but all of this so far has been assuming

419
00:16:31,920 --> 00:16:34,420
that you're there's just one of you that

420
00:16:34,420 --> 00:16:35,500
you're writing the package and you're

421
00:16:35,500 --> 00:16:37,930
publishing it but in reality you work in

422
00:16:37,930 --> 00:16:40,149
a team and you want other people in your

423
00:16:40,149 --> 00:16:41,560
company to be able to use your package

424
00:16:41,560 --> 00:16:43,329
and some of them should be able to

425
00:16:43,329 --> 00:16:44,620
publish it but some of them should only

426
00:16:44,620 --> 00:16:48,279
be able to install it and this is

427
00:16:48,279 --> 00:16:49,570
especially important when working with

428
00:16:49,570 --> 00:16:52,089
private packages the old way to do this

429
00:16:52,089 --> 00:16:54,160
was NPM owner but there's a better way

430
00:16:54,160 --> 00:16:59,800
now and that is NPM organizations to use

431
00:16:59,800 --> 00:17:01,510
organizations we added two new commands

432
00:17:01,510 --> 00:17:04,209
to NPM NPM team and NPM access these let

433
00:17:04,209 --> 00:17:07,270
you put people into teams and give them

434
00:17:07,270 --> 00:17:08,829
access to packages in a really granular

435
00:17:08,829 --> 00:17:12,010
way NPM organizations are a paid feature

436
00:17:12,010 --> 00:17:15,669
right now we are hoping to change that

437
00:17:15,669 --> 00:17:17,470
so I apologize for this being a slight

438
00:17:17,470 --> 00:17:21,130
plug as well the team command is pretty

439
00:17:21,130 --> 00:17:22,600
self-explanatory you can create and

440
00:17:22,600 --> 00:17:24,640
destroy a team you can add people to the

441
00:17:24,640 --> 00:17:25,839
team with add you can remove them with

442
00:17:25,839 --> 00:17:27,160
RM and you can see who's in the team

443
00:17:27,160 --> 00:17:31,360
with LS NPM access is similarly pretty

444
00:17:31,360 --> 00:17:34,600
self-explanatory access grant gives a

445
00:17:34,600 --> 00:17:36,429
team read-only or read/write access to a

446
00:17:36,429 --> 00:17:38,290
package access revoke takes that

447
00:17:38,290 --> 00:17:42,010
permission away access LS packages shows

448
00:17:42,010 --> 00:17:43,809
you what packages a user or a team can

449
00:17:43,809 --> 00:17:46,929
see and access LS collaborators

450
00:17:46,929 --> 00:17:49,030
it shows you what users and teams

451
00:17:49,030 --> 00:17:52,960
access to a particular package so with

452
00:17:52,960 --> 00:17:55,120
the plug over let's level up again we

453
00:17:55,120 --> 00:17:57,070
went from one user with one package to

454
00:17:57,070 --> 00:17:59,320
multiple users with one package and now

455
00:17:59,320 --> 00:18:01,210
it's time for multiple packages imagine

456
00:18:01,210 --> 00:18:03,700
that you have split up your system into

457
00:18:03,700 --> 00:18:06,730
a micro service architecture you have

458
00:18:06,730 --> 00:18:08,050
several micro services they have shared

459
00:18:08,050 --> 00:18:09,520
logic so you split the code up into

460
00:18:09,520 --> 00:18:14,050
modules that multiple services use so

461
00:18:14,050 --> 00:18:15,730
now you've got an app and you've got sub

462
00:18:15,730 --> 00:18:17,050
modules and you want to be able to work

463
00:18:17,050 --> 00:18:19,420
on them at the same time the command

464
00:18:19,420 --> 00:18:22,920
that you want to do that is NPM link

465
00:18:22,920 --> 00:18:25,060
here's how it works in the root of your

466
00:18:25,060 --> 00:18:28,210
package which is called Alice run NPM

467
00:18:28,210 --> 00:18:31,480
link now go to your other package which

468
00:18:31,480 --> 00:18:34,000
is called Bob and run NPM link Alice and

469
00:18:34,000 --> 00:18:36,250
suddenly Alice is immediately available

470
00:18:36,250 --> 00:18:37,780
in Bob any changes that you make in

471
00:18:37,780 --> 00:18:39,160
Alice will be immediately available in

472
00:18:39,160 --> 00:18:40,300
Bob and you can work on the two at the

473
00:18:40,300 --> 00:18:43,510
same time this is a trivial feature but

474
00:18:43,510 --> 00:18:45,130
it's absolutely essential to working on

475
00:18:45,130 --> 00:18:48,010
large NPM projects NPM itself consists

476
00:18:48,010 --> 00:18:49,480
of dozens of modules and it's impossible

477
00:18:49,480 --> 00:18:51,760
to work on NPM without using lots of NPM

478
00:18:51,760 --> 00:18:56,290
link so cool we've got multiple users

479
00:18:56,290 --> 00:18:58,930
multiple packages if you want to level

480
00:18:58,930 --> 00:19:00,280
up again the next thing is multiple

481
00:19:00,280 --> 00:19:02,410
releases if you have a lot of users

482
00:19:02,410 --> 00:19:03,940
you're gonna find this valuable you're

483
00:19:03,940 --> 00:19:06,100
gonna have the stable version that most

484
00:19:06,100 --> 00:19:07,480
people are using and you're gonna want

485
00:19:07,480 --> 00:19:09,190
to have a next or a beta version that

486
00:19:09,190 --> 00:19:12,820
new people are using of course you could

487
00:19:12,820 --> 00:19:14,290
just tell people which the specific

488
00:19:14,290 --> 00:19:15,610
version is you'd like one point five

489
00:19:15,610 --> 00:19:17,500
point seven that's beta everybody should

490
00:19:17,500 --> 00:19:19,570
try it out but that's kind of a pain in

491
00:19:19,570 --> 00:19:21,370
the ass and NPM is here to remove pains

492
00:19:21,370 --> 00:19:24,610
in your ass so you can use dis tags also

493
00:19:24,610 --> 00:19:28,360
called release tags to do this you can

494
00:19:28,360 --> 00:19:30,880
apply a disc tag at publish time by

495
00:19:30,880 --> 00:19:33,730
using - - tag when you publish by

496
00:19:33,730 --> 00:19:35,500
default every publish gets tagged it

497
00:19:35,500 --> 00:19:37,660
gets tagged as latest and with you NPM

498
00:19:37,660 --> 00:19:39,160
install what you're actually doing is

499
00:19:39,160 --> 00:19:41,230
you're NPM installing at latest whatever

500
00:19:41,230 --> 00:19:43,300
the latest tag points to is what gets

501
00:19:43,300 --> 00:19:47,500
installed so but you can run anything

502
00:19:47,500 --> 00:19:49,270
you can run in NPM install package at

503
00:19:49,270 --> 00:19:51,250
beta NPM install package a test NPM

504
00:19:51,250 --> 00:19:52,750
install package at whatever arbitrary

505
00:19:52,750 --> 00:19:56,170
tag you've made up so once you've done

506
00:19:56,170 --> 00:19:58,540
that you've got this beta tag and you're

507
00:19:58,540 --> 00:20:00,400
like okay cool this version is no longer

508
00:20:00,400 --> 00:20:02,050
beta this version is latest how do you

509
00:20:02,050 --> 00:20:02,710
change

510
00:20:02,710 --> 00:20:04,090
the tag once the thing is already

511
00:20:04,090 --> 00:20:05,680
published that's where the dist Anka

512
00:20:05,680 --> 00:20:09,370
mint comes in this tag ad applies the

513
00:20:09,370 --> 00:20:11,140
tag you specify to the version that you

514
00:20:11,140 --> 00:20:14,170
specify only one version of a package

515
00:20:14,170 --> 00:20:17,200
can have a tag at any one time so if you

516
00:20:17,200 --> 00:20:18,880
add it to a new version it's the same as

517
00:20:18,880 --> 00:20:21,490
moving it from the old version you can

518
00:20:21,490 --> 00:20:23,620
use remove to tack to remove the tag

519
00:20:23,620 --> 00:20:27,910
entirely you can see what tags exist

520
00:20:27,910 --> 00:20:30,610
with LS big packages like babel have

521
00:20:30,610 --> 00:20:32,580
adopted a new release strategy where

522
00:20:32,580 --> 00:20:35,350
they release all of the new versions of

523
00:20:35,350 --> 00:20:37,840
their package on a next tag you know

524
00:20:37,840 --> 00:20:40,090
just as ci passes it gets automatically

525
00:20:40,090 --> 00:20:41,680
published and when everything has

526
00:20:41,680 --> 00:20:43,090
reached the next tag they then do a

527
00:20:43,090 --> 00:20:44,290
single operation that switches

528
00:20:44,290 --> 00:20:45,580
everything on the next tag to the

529
00:20:45,580 --> 00:20:47,920
current tag which is if you've got a big

530
00:20:47,920 --> 00:20:50,380
NPM project can be a nice granular way

531
00:20:50,380 --> 00:20:55,180
of doing that so one other way that you

532
00:20:55,180 --> 00:20:56,410
can use tags is when you're installing

533
00:20:56,410 --> 00:20:58,930
your dependencies you can run npm

534
00:20:58,930 --> 00:21:01,570
install with - - tag and NPM will prefer

535
00:21:01,570 --> 00:21:03,520
versions that have that tag this is

536
00:21:03,520 --> 00:21:05,230
useful if you're working on a big

537
00:21:05,230 --> 00:21:06,610
project with lots of people and some

538
00:21:06,610 --> 00:21:08,380
people have started releasing next stuff

539
00:21:08,380 --> 00:21:09,430
and you don't want to have to update

540
00:21:09,430 --> 00:21:11,950
your dependencies you just say install

541
00:21:11,950 --> 00:21:14,170
this project on the next tag and it will

542
00:21:14,170 --> 00:21:15,820
pull in all of your dependencies on next

543
00:21:15,820 --> 00:21:20,050
tags if you've got them of course

544
00:21:20,050 --> 00:21:22,980
sometimes you make a mistake and you

545
00:21:22,980 --> 00:21:25,150
publish a version by accident or you

546
00:21:25,150 --> 00:21:27,040
have a bug that's gonna take a long time

547
00:21:27,040 --> 00:21:28,690
to fix and you just want that version to

548
00:21:28,690 --> 00:21:31,840
be gone an NPM unpublish lets you do

549
00:21:31,840 --> 00:21:32,590
that

550
00:21:32,590 --> 00:21:35,890
as you may have heard recently and

551
00:21:35,890 --> 00:21:37,480
publishing a package can cause trouble

552
00:21:37,480 --> 00:21:39,820
if there's a bunch of people depending

553
00:21:39,820 --> 00:21:42,370
on that package so recently we made a

554
00:21:42,370 --> 00:21:43,840
change in the way that unpublished works

555
00:21:43,840 --> 00:21:45,310
which is if you unpublished something

556
00:21:45,310 --> 00:21:46,750
you can unpublish it easily for the

557
00:21:46,750 --> 00:21:49,060
first 24 hours and after the first 24

558
00:21:49,060 --> 00:21:51,520
hours you have to contact support to

559
00:21:51,520 --> 00:21:53,890
make sure that this is a thing that you

560
00:21:53,890 --> 00:21:56,380
intended to do and is safe for everyone

561
00:21:56,380 --> 00:21:59,950
to do and we're probably not you know

562
00:21:59,950 --> 00:22:02,050
giving package aways package names away

563
00:22:02,050 --> 00:22:03,550
to corporations anymore that didn't seem

564
00:22:03,550 --> 00:22:07,450
to work out but if you've got a package

565
00:22:07,450 --> 00:22:09,430
or a version that you don't want people

566
00:22:09,430 --> 00:22:11,980
to use anymore rather than on publishing

567
00:22:11,980 --> 00:22:13,780
it the safer and friendlier way is to

568
00:22:13,780 --> 00:22:15,660
use NPM deprecated

569
00:22:15,660 --> 00:22:17,710
people will still be able to install the

570
00:22:17,710 --> 00:22:18,880
package they'll just get a little

571
00:22:18,880 --> 00:22:20,230
friendly notice saying hey you shouldn't

572
00:22:20,230 --> 00:22:21,580
use this package anymore it's much

573
00:22:21,580 --> 00:22:23,470
easier and it's much safer and it

574
00:22:23,470 --> 00:22:24,880
doesn't break the whole universe and

575
00:22:24,880 --> 00:22:27,340
happy you know have to do forever jokes

576
00:22:27,340 --> 00:22:32,650
about left bad so if you've been running

577
00:22:32,650 --> 00:22:34,960
a project for a while you'll find that

578
00:22:34,960 --> 00:22:36,040
some of your dependencies have been

579
00:22:36,040 --> 00:22:37,750
updated but with breaking changes so

580
00:22:37,750 --> 00:22:39,480
they won't automatically be pulled in

581
00:22:39,480 --> 00:22:41,950
how do you find these updates that's

582
00:22:41,950 --> 00:22:44,620
what NPM outdated is for NPM outdid will

583
00:22:44,620 --> 00:22:46,530
give you a list like this one here

584
00:22:46,530 --> 00:22:49,630
current shows you what you have locally

585
00:22:49,630 --> 00:22:52,870
and wanted shows you the version that

586
00:22:52,870 --> 00:22:54,670
would be in the maximum version that

587
00:22:54,670 --> 00:22:56,560
would be installed by your sambara range

588
00:22:56,560 --> 00:22:58,210
so if you've installed recently these

589
00:22:58,210 --> 00:22:59,650
two are usually the same and if they're

590
00:22:59,650 --> 00:23:02,170
not the same NPM update will bring them

591
00:23:02,170 --> 00:23:04,900
into alignment with each other the last

592
00:23:04,900 --> 00:23:07,510
column which is the latest shows if

593
00:23:07,510 --> 00:23:09,520
there's a version that is outside you're

594
00:23:09,520 --> 00:23:13,450
allowed range but still exists like a

595
00:23:13,450 --> 00:23:15,070
breaking change so you can decide if you

596
00:23:15,070 --> 00:23:16,510
want to upgrade without having to you

597
00:23:16,510 --> 00:23:17,890
know just install new things to check

598
00:23:17,890 --> 00:23:25,090
everybody's webpage so there's more

599
00:23:25,090 --> 00:23:26,470
stuff about run scripts I called them

600
00:23:26,470 --> 00:23:27,580
run scripts in here's why I did that

601
00:23:27,580 --> 00:23:29,860
which is that in the script stanza of

602
00:23:29,860 --> 00:23:32,110
your package.json you can define any

603
00:23:32,110 --> 00:23:34,180
scripts at all and then you can run them

604
00:23:34,180 --> 00:23:36,820
using the NPM run command so like start

605
00:23:36,820 --> 00:23:38,920
and stop and test all of these arbitrary

606
00:23:38,920 --> 00:23:40,780
run scripts they get dev dependencies in

607
00:23:40,780 --> 00:23:43,180
their path and you can use them for all

608
00:23:43,180 --> 00:23:45,310
sorts of things at NPM we tend to use

609
00:23:45,310 --> 00:23:48,040
NPM run dev as a shorthand of starting

610
00:23:48,040 --> 00:23:49,630
the server in development mode which is

611
00:23:49,630 --> 00:23:54,520
nice are the people use NPM run set up

612
00:23:54,520 --> 00:23:56,200
to initialize their databases the first

613
00:23:56,200 --> 00:23:58,360
time so that you don't have to have like

614
00:23:58,360 --> 00:24:00,100
a complicated wiki page about you know

615
00:24:00,100 --> 00:24:01,630
here's how you set up your databases for

616
00:24:01,630 --> 00:24:03,070
the first time when you when you hired a

617
00:24:03,070 --> 00:24:05,050
new dev that's what I mean about package

618
00:24:05,050 --> 00:24:06,940
JSON and NPM being a way of

619
00:24:06,940 --> 00:24:09,460
crystallizing your your team's processes

620
00:24:09,460 --> 00:24:12,700
into the code anything that you might

621
00:24:12,700 --> 00:24:14,110
have put in a wiki somewhere you can

622
00:24:14,110 --> 00:24:15,550
just slap it into package JSON and you

623
00:24:15,550 --> 00:24:17,020
can have it version controlled along

624
00:24:17,020 --> 00:24:18,190
with everything else so you no longer

625
00:24:18,190 --> 00:24:20,050
have to tell everybody that's not how we

626
00:24:20,050 --> 00:24:21,520
run tests anymore this is how we run

627
00:24:21,520 --> 00:24:22,930
tests anymore that's not how you set up

628
00:24:22,930 --> 00:24:24,340
the database this is how you set up the

629
00:24:24,340 --> 00:24:26,340
database

630
00:24:26,340 --> 00:24:28,740
so I already mentioned that run scripts

631
00:24:28,740 --> 00:24:30,990
get dev dependencies for free another

632
00:24:30,990 --> 00:24:32,370
useful thing that they get for Frieza

633
00:24:32,370 --> 00:24:34,410
they get a bunch of NPM variables every

634
00:24:34,410 --> 00:24:36,720
key in package JSON is available to your

635
00:24:36,720 --> 00:24:39,360
run scripts in the environment as an NPM

636
00:24:39,360 --> 00:24:42,300
package value and every configuration

637
00:24:42,300 --> 00:24:45,210
value used by NPM is available as an NPM

638
00:24:45,210 --> 00:24:49,380
config value even more usefully if you

639
00:24:49,380 --> 00:24:51,480
create a config key like this one in

640
00:24:51,480 --> 00:24:54,300
your package JSON you can put default

641
00:24:54,300 --> 00:24:55,500
values in there and they will be

642
00:24:55,500 --> 00:24:57,690
overridden by values in NPM s

643
00:24:57,690 --> 00:25:00,000
configuration command configuration

644
00:25:00,000 --> 00:25:02,040
files so as you can see in this example

645
00:25:02,040 --> 00:25:03,960
I set a default port for my thing to run

646
00:25:03,960 --> 00:25:07,050
on to be used by my start script forever

647
00:25:07,050 --> 00:25:08,880
for instance it just wants to know what

648
00:25:08,880 --> 00:25:10,920
port it should run on but somebody can

649
00:25:10,920 --> 00:25:13,860
use NPM config to set the value of that

650
00:25:13,860 --> 00:25:15,810
config and it will be overridden without

651
00:25:15,810 --> 00:25:17,220
you having to constantly swap in

652
00:25:17,220 --> 00:25:21,690
configuration files the final and most

653
00:25:21,690 --> 00:25:23,190
useful feature of NPM run scripts that

654
00:25:23,190 --> 00:25:25,140
I'm going to mention is lifecycle hooks

655
00:25:25,140 --> 00:25:27,150
certain names for run scripts are

656
00:25:27,150 --> 00:25:29,810
special this is the big list of them

657
00:25:29,810 --> 00:25:32,340
these scripts will run automatically in

658
00:25:32,340 --> 00:25:34,380
response to events so events like

659
00:25:34,380 --> 00:25:35,910
publishing your package or running the

660
00:25:35,910 --> 00:25:38,490
version command or running install and

661
00:25:38,490 --> 00:25:40,080
you can use this to do all sorts of

662
00:25:40,080 --> 00:25:42,330
things like really common use of the

663
00:25:42,330 --> 00:25:45,360
install event is two compiled binary

664
00:25:45,360 --> 00:25:47,570
dependencies if your package has those

665
00:25:47,570 --> 00:25:49,830
but you can do other cool stuff you can

666
00:25:49,830 --> 00:25:52,350
force the event to fail if the script

667
00:25:52,350 --> 00:25:55,080
fails so for instance you can put a pre

668
00:25:55,080 --> 00:25:57,390
publish script that runs your tests

669
00:25:57,390 --> 00:25:59,250
which makes it impossible to publish a

670
00:25:59,250 --> 00:26:01,230
version that doesn't pass your test this

671
00:26:01,230 --> 00:26:03,570
can be a nice low friction way of like

672
00:26:03,570 --> 00:26:18,930
ensuring best practices within your team

673
00:26:18,940 --> 00:26:20,560
the other thing that I should talk about

674
00:26:20,560 --> 00:26:23,110
that is super useful is the NPM RC file

675
00:26:23,110 --> 00:26:25,090
or more accurately the NPM RC files

676
00:26:25,090 --> 00:26:26,590
because there are four of them and this

677
00:26:26,590 --> 00:26:30,250
is a frequent source of confusion what

678
00:26:30,250 --> 00:26:32,080
the NPM RC files is they do is they

679
00:26:32,080 --> 00:26:34,060
provide default configuration options

680
00:26:34,060 --> 00:26:36,400
for NPM and NPM accepts over a hundred

681
00:26:36,400 --> 00:26:38,290
configuration options writing them down

682
00:26:38,290 --> 00:26:41,920
in some place is often pretty useful if

683
00:26:41,920 --> 00:26:44,830
you put an NPM LC in your package root

684
00:26:44,830 --> 00:26:46,330
you can that's a good place to put per

685
00:26:46,330 --> 00:26:48,700
package per project configuration

686
00:26:48,700 --> 00:26:49,720
settings that would be shared across

687
00:26:49,720 --> 00:26:51,550
your team if you have stuff that's

688
00:26:51,550 --> 00:26:53,170
relevant just to you like your assets

689
00:26:53,170 --> 00:26:54,640
token and stuff like that you can put it

690
00:26:54,640 --> 00:26:56,490
in the one in your home directory

691
00:26:56,490 --> 00:26:59,290
there's also you know global ones and

692
00:26:59,290 --> 00:27:02,530
and and you can also look at an PM's

693
00:27:02,530 --> 00:27:04,300
built-in ones if that sounds like a good

694
00:27:04,300 --> 00:27:06,670
idea to you

695
00:27:06,670 --> 00:27:09,700
another thing that NPM RC does is it

696
00:27:09,700 --> 00:27:11,860
holds your authentication token you can

697
00:27:11,860 --> 00:27:13,750
use this token to authenticate other

698
00:27:13,750 --> 00:27:16,570
services to NPM a really common use case

699
00:27:16,570 --> 00:27:18,700
for this is CI if you are using private

700
00:27:18,700 --> 00:27:22,090
packages if you don't you don't have put

701
00:27:22,090 --> 00:27:23,650
your auth token directly into your code

702
00:27:23,650 --> 00:27:25,870
you can do something like this where you

703
00:27:25,870 --> 00:27:28,030
put the NPM token variable into your

704
00:27:28,030 --> 00:27:29,950
into your NPM RC file it will get

705
00:27:29,950 --> 00:27:31,930
automatically expanded if you set it as

706
00:27:31,930 --> 00:27:34,080
an environment variable within Travis

707
00:27:34,080 --> 00:27:36,970
this is a really useful thing to do and

708
00:27:36,970 --> 00:27:38,620
Remy's post which I'm linking to there

709
00:27:38,620 --> 00:27:40,240
has a lot of details on how to do that

710
00:27:40,240 --> 00:27:44,320
the best way there are a handful of fun

711
00:27:44,320 --> 00:27:46,030
configuration options which I'm going to

712
00:27:46,030 --> 00:27:47,140
skip because I'm running a little bit

713
00:27:47,140 --> 00:27:51,580
over time and so before I get out of

714
00:27:51,580 --> 00:27:52,630
here I want to mention that there's a

715
00:27:52,630 --> 00:27:54,970
few third-party tools that are not part

716
00:27:54,970 --> 00:27:56,500
of NPM but they're so useful and so

717
00:27:56,500 --> 00:27:58,600
popular that they're becoming intrinsic

718
00:27:58,600 --> 00:28:00,160
to the way people write note code and

719
00:28:00,160 --> 00:28:03,370
use NPM these days the first is bable

720
00:28:03,370 --> 00:28:05,610
bable is a transpiler

721
00:28:05,610 --> 00:28:08,110
it's a tool that transforms next version

722
00:28:08,110 --> 00:28:09,790
JavaScript into JavaScript that can run

723
00:28:09,790 --> 00:28:11,910
today either a note or in your browser

724
00:28:11,910 --> 00:28:14,410
it can also transpile stuff that isn't

725
00:28:14,410 --> 00:28:17,440
JavaScript like JSX or typescript and

726
00:28:17,440 --> 00:28:19,390
lots of projects and tutorials these

727
00:28:19,390 --> 00:28:20,980
days we're seeing just sort of assume

728
00:28:20,980 --> 00:28:22,990
you already know how to transfer your

729
00:28:22,990 --> 00:28:24,430
code and that's a thing that everybody

730
00:28:24,430 --> 00:28:26,590
does so if you've been wondering how the

731
00:28:26,590 --> 00:28:27,850
hell it is that all these people are

732
00:28:27,850 --> 00:28:29,860
using es6 before es6 is globally

733
00:28:29,860 --> 00:28:30,960
available Babel

734
00:28:30,960 --> 00:28:34,080
how they're doing it another thing that

735
00:28:34,080 --> 00:28:36,659
people do and assume that you already

736
00:28:36,659 --> 00:28:38,370
know how to do is to make your note code

737
00:28:38,370 --> 00:28:40,860
available into your browser there are

738
00:28:40,860 --> 00:28:42,120
two popular ways to do this the first

739
00:28:42,120 --> 00:28:44,970
and older one is browserify built by the

740
00:28:44,970 --> 00:28:46,950
wonderful genius sub stack it is an

741
00:28:46,950 --> 00:28:49,860
amazingly powerful flexible tool and the

742
00:28:49,860 --> 00:28:51,480
second one is web pack which is a newer

743
00:28:51,480 --> 00:28:53,429
more sort of batteries included solution

744
00:28:53,429 --> 00:28:55,380
that does much of the same things they

745
00:28:55,380 --> 00:28:56,850
will both help you transpile your code

746
00:28:56,850 --> 00:28:58,289
and make it easily available to your

747
00:28:58,289 --> 00:29:00,380
browser in a predictable way

748
00:29:00,380 --> 00:29:02,640
another tool that we're finding super

749
00:29:02,640 --> 00:29:05,669
useful right now is green keeper green

750
00:29:05,669 --> 00:29:08,640
keeper is like NPM outdated in the cloud

751
00:29:08,640 --> 00:29:11,760
it constantly checks for updates to the

752
00:29:11,760 --> 00:29:13,679
packages that you depend on and it runs

753
00:29:13,679 --> 00:29:16,049
your tests on them to make sure that

754
00:29:16,049 --> 00:29:18,000
minor updates haven't broken you they

755
00:29:18,000 --> 00:29:19,230
said that they weren't going to but they

756
00:29:19,230 --> 00:29:20,610
might have anyway and green keepers

757
00:29:20,610 --> 00:29:22,110
making sure that your tests are always

758
00:29:22,110 --> 00:29:25,289
green get it and it will even submit a

759
00:29:25,289 --> 00:29:27,750
PR to include the new change if it's

760
00:29:27,750 --> 00:29:29,820
safe for your app and we've turned it on

761
00:29:29,820 --> 00:29:32,570
for most of our repos a 10:00 p.m. and

762
00:29:32,570 --> 00:29:34,860
the last third-party thing I want to

763
00:29:34,860 --> 00:29:36,570
mention is the node security project and

764
00:29:36,570 --> 00:29:40,890
they're two NS P n SP consults node

765
00:29:40,890 --> 00:29:42,899
security projects data based of node and

766
00:29:42,899 --> 00:29:44,580
security vulnerabilities when you run an

767
00:29:44,580 --> 00:29:46,770
SP check and it will alert you if you're

768
00:29:46,770 --> 00:29:48,750
using a vulnerable module so if you hook

769
00:29:48,750 --> 00:29:51,299
an SP check into those life cycle events

770
00:29:51,299 --> 00:29:53,130
that I was talking about you can make it

771
00:29:53,130 --> 00:29:54,690
such that it is impossible for you to

772
00:29:54,690 --> 00:29:56,250
publish a version of your code that

773
00:29:56,250 --> 00:29:58,020
contains vulnerable modules which is a

774
00:29:58,020 --> 00:30:02,110
really good idea

775
00:30:02,120 --> 00:30:05,130
so one thing you may be asking at this

776
00:30:05,130 --> 00:30:06,600
point is like I've just given you this

777
00:30:06,600 --> 00:30:08,100
whirlwind tour of like dozens and dozens

778
00:30:08,100 --> 00:30:10,049
of features what on earth is tying all

779
00:30:10,049 --> 00:30:12,809
of these things together it does all

780
00:30:12,809 --> 00:30:15,210
these random things what ties them

781
00:30:15,210 --> 00:30:16,860
together is that they take something

782
00:30:16,860 --> 00:30:18,750
that you had to do all the time and it

783
00:30:18,750 --> 00:30:20,850
turns it into an automatic thing that

784
00:30:20,850 --> 00:30:22,140
happens without you having to think

785
00:30:22,140 --> 00:30:24,360
about it they take things that were hard

786
00:30:24,360 --> 00:30:26,270
and they make them simpler and faster

787
00:30:26,270 --> 00:30:29,100
the message of NPM is that NPM is here

788
00:30:29,100 --> 00:30:30,990
to get out of your way we are not here

789
00:30:30,990 --> 00:30:33,419
to add a bunch of ceremony that is not

790
00:30:33,419 --> 00:30:35,279
what we are about we don't want to tell

791
00:30:35,279 --> 00:30:37,169
you how to do things we want to find out

792
00:30:37,169 --> 00:30:38,700
the things that you're already doing and

793
00:30:38,700 --> 00:30:40,470
make them as simple as we possibly can

794
00:30:40,470 --> 00:30:42,510
so if there's something that you do

795
00:30:42,510 --> 00:30:44,250
every day and it's still really hard you

796
00:30:44,250 --> 00:30:44,610
should

797
00:30:44,610 --> 00:30:46,200
about it you should find me today and

798
00:30:46,200 --> 00:30:48,000
complain to me about it and that's what

799
00:30:48,000 --> 00:30:49,710
NPM will get out of your way to do next

800
00:30:49,710 --> 00:30:53,880
so there you go that is the big recap of

801
00:30:53,880 --> 00:30:55,500
all of the things that we think that

802
00:30:55,500 --> 00:30:57,270
everybody should know about NPM I hope

803
00:30:57,270 --> 00:30:58,590
you all learned at least one useful

804
00:30:58,590 --> 00:31:01,710
thing and if you've got any questions

805
00:31:01,710 --> 00:31:04,080
you should stop me in the hallway good

806
00:31:04,080 --> 00:31:05,910
questions get good NPM swag and I have a

807
00:31:05,910 --> 00:31:07,500
big bag of it to give away that I don't

808
00:31:07,500 --> 00:31:16,100
want to take back thank you very much

