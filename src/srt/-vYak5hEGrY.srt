1
00:00:02,300 --> 00:00:09,129

[Music]

2
00:00:09,139 --> 00:00:13,170
welcome everyone over the next like

3
00:00:13,170 --> 00:00:14,969
that's the official type talk of the

4
00:00:14,969 --> 00:00:16,800
title I didn't bother to write that on

5
00:00:16,800 --> 00:00:19,320
the piece of paper but welcome everyone

6
00:00:19,320 --> 00:00:20,760
I would like to give you over the next

7
00:00:20,760 --> 00:00:22,859
thirty minutes as I said a brief

8
00:00:22,859 --> 00:00:24,630
introduction of like web security and

9
00:00:24,630 --> 00:00:26,310
things that I believe are important for

10
00:00:26,310 --> 00:00:28,019
every web developer no matter whether

11
00:00:28,019 --> 00:00:29,939
you're responsible for security or not

12
00:00:29,939 --> 00:00:31,859
because in my opinion everyone is

13
00:00:31,859 --> 00:00:34,500
responsible for security and not just

14
00:00:34,500 --> 00:00:36,630
the person who has it in their title and

15
00:00:36,630 --> 00:00:38,460
hopefully by the end of the talk

16
00:00:38,460 --> 00:00:40,410
all of these abbreviations gonna make it

17
00:00:40,410 --> 00:00:43,050
a little bit more sense to you but

18
00:00:43,050 --> 00:00:44,160
before we start I would like to

19
00:00:44,160 --> 00:00:46,410
introduce myself so I'm Dominic I live

20
00:00:46,410 --> 00:00:48,360
in Berlin and I work as a weapon as a

21
00:00:48,360 --> 00:00:50,850
developer evangelist for a company

22
00:00:50,850 --> 00:00:53,309
called Twilio we were the ones who put

23
00:00:53,309 --> 00:00:54,930
out the t-shirts if you manage to grab

24
00:00:54,930 --> 00:00:58,170
one and we have we're an API company

25
00:00:58,170 --> 00:01:00,059
that has api's around communications

26
00:01:00,059 --> 00:01:04,799
such as SMS voice video or chat as well

27
00:01:04,799 --> 00:01:06,680
as things like two-factor authentication

28
00:01:06,680 --> 00:01:09,090
but there's one more thing that you

29
00:01:09,090 --> 00:01:10,500
should know about me and I you might

30
00:01:10,500 --> 00:01:12,090
have gotten the hint by me running

31
00:01:12,090 --> 00:01:14,820
around like this I'm part of a group

32
00:01:14,820 --> 00:01:17,909
called one zjs we're just a bunch of

33
00:01:17,909 --> 00:01:19,770
lovely people that you're more than

34
00:01:19,770 --> 00:01:21,590
welcome to come up to and chat with us

35
00:01:21,590 --> 00:01:24,659
that's the first time we have pulled

36
00:01:24,659 --> 00:01:26,640
this off back at row J's which is an

37
00:01:26,640 --> 00:01:28,799
amazing conference organized by Matt

38
00:01:28,799 --> 00:01:31,650
Lane walking over there and now running

39
00:01:31,650 --> 00:01:34,530
away it's a social network for web web

40
00:01:34,530 --> 00:01:37,079
developers who are developers in general

41
00:01:37,079 --> 00:01:39,600
who love onesies and you know being a

42
00:01:39,600 --> 00:01:41,369
developer I obviously made sure that

43
00:01:41,369 --> 00:01:43,200
this is a secure as possible so that

44
00:01:43,200 --> 00:01:45,570
people with bananas come hacker if you

45
00:01:45,570 --> 00:01:48,360
see the banana trying to hack their you

46
00:01:48,360 --> 00:01:49,920
know and I thought of everything so it

47
00:01:49,920 --> 00:01:52,110
uses HTTP and thanks for let's encrypt

48
00:01:52,110 --> 00:01:54,149
there's really no excuse to not using

49
00:01:54,149 --> 00:01:56,880
HTTPS because you can do it for free it

50
00:01:56,880 --> 00:01:57,960
uses HSTs

51
00:01:57,960 --> 00:02:00,320
which is the HTTP strict Transport

52
00:02:00,320 --> 00:02:04,140
protocol which is the thing that makes

53
00:02:04,140 --> 00:02:06,000
sure that you can't go to Google when

54
00:02:06,000 --> 00:02:07,799
you're on an open network that is trying

55
00:02:07,799 --> 00:02:09,619
to redirect you to a captive portal

56
00:02:09,619 --> 00:02:11,640
basically what it makes sure is that

57
00:02:11,640 --> 00:02:12,280
there

58
00:02:12,280 --> 00:02:15,430
no down rate in your connection when you

59
00:02:15,430 --> 00:02:19,540
are from HTTP to HTTPS no mixed content

60
00:02:19,540 --> 00:02:21,840
meaning there's no HTTP content on my

61
00:02:21,840 --> 00:02:24,340
https website

62
00:02:24,340 --> 00:02:26,440
I'm sanitizing the input because as the

63
00:02:26,440 --> 00:02:28,120
social networks obviously you can post

64
00:02:28,120 --> 00:02:30,400
things in my case with markdown and I'm

65
00:02:30,400 --> 00:02:33,160
sanitizing that input and there's no

66
00:02:33,160 --> 00:02:35,140
room for sequel injections because if

67
00:02:35,140 --> 00:02:37,000
you are not using a real database there

68
00:02:37,000 --> 00:02:42,040
are no real sequel injections and I'm

69
00:02:42,040 --> 00:02:43,480
not talking about no sequel databases

70
00:02:43,480 --> 00:02:45,040
because there are no sequel injections

71
00:02:45,040 --> 00:02:47,470
as well but I'm really just using a

72
00:02:47,470 --> 00:02:49,450
plain storage so there's no room for me

73
00:02:49,450 --> 00:02:51,340
to have like any sequel injections or no

74
00:02:51,340 --> 00:02:53,820
sequel injections turns out though that

75
00:02:53,820 --> 00:02:56,590
developing secure web applications isn't

76
00:02:56,590 --> 00:02:59,980
as easy as I thought so I asked my buddy

77
00:02:59,980 --> 00:03:01,870
Bob Ellison to kind of like take a stab

78
00:03:01,870 --> 00:03:04,870
at the application and they found a

79
00:03:04,870 --> 00:03:07,000
bunch of vulnerabilities that I wanted

80
00:03:07,000 --> 00:03:09,250
to share with you and with that let's

81
00:03:09,250 --> 00:03:10,840
actually take a look at the site now you

82
00:03:10,840 --> 00:03:12,190
can actually see it so this is how the

83
00:03:12,190 --> 00:03:14,019
fluffiest social network and the work

84
00:03:14,019 --> 00:03:17,350
looks like I'm gonna switch to cloning

85
00:03:17,350 --> 00:03:20,290
so I can all right so if we go here

86
00:03:20,290 --> 00:03:22,269
that's the login portal and I'm gonna

87
00:03:22,269 --> 00:03:25,390
open the dev tools here and go to the

88
00:03:25,390 --> 00:03:27,190
network tab just so we can see what's

89
00:03:27,190 --> 00:03:30,010
actually happening on the side and I'm

90
00:03:30,010 --> 00:03:32,530
gonna log in here with my super secure

91
00:03:32,530 --> 00:03:35,590
password and what we're doing is we're

92
00:03:35,590 --> 00:03:39,610
doing a normal post request and we're

93
00:03:39,610 --> 00:03:43,540
signing a auth token here which is what

94
00:03:43,540 --> 00:03:46,840
is called a jar to jason JWT or a JSON

95
00:03:46,840 --> 00:03:53,079
web token and if I go to okay installed

96
00:03:53,079 --> 00:03:56,829
a small helper tool here to let me work

97
00:03:56,829 --> 00:03:59,410
better with you tokens but if you never

98
00:03:59,410 --> 00:04:03,239
saw how a JSON web token looked like

99
00:04:03,239 --> 00:04:07,690
there's a nice tool called JWT IO where

100
00:04:07,690 --> 00:04:10,000
we can inspect this and basically a JSON

101
00:04:10,000 --> 00:04:11,440
web token has three different sections

102
00:04:11,440 --> 00:04:14,140
so it has a it has a header which

103
00:04:14,140 --> 00:04:16,299
defines hey this is actually a judge and

104
00:04:16,299 --> 00:04:18,489
then it has an algorithm which is used

105
00:04:18,489 --> 00:04:19,930
to generate a signature which is the

106
00:04:19,930 --> 00:04:22,180
last part of it and then in the middle

107
00:04:22,180 --> 00:04:24,190
we have a payload and this payload you

108
00:04:24,190 --> 00:04:24,880
can have

109
00:04:24,880 --> 00:04:26,950
arbitrary data now the header and the

110
00:04:26,950 --> 00:04:28,720
payload you should be aware are not in

111
00:04:28,720 --> 00:04:31,240
like encrypted they're simply base64

112
00:04:31,240 --> 00:04:33,160
encoded so you should never have like

113
00:04:33,160 --> 00:04:34,960
sensible data in there anyway it's like

114
00:04:34,960 --> 00:04:36,310
there shouldn't be a password in there

115
00:04:36,310 --> 00:04:40,030
please don't put a password in there but

116
00:04:40,030 --> 00:04:41,320
like to make sure that this can't be

117
00:04:41,320 --> 00:04:43,390
like temporary with we actually have a

118
00:04:43,390 --> 00:04:45,730
signature in our case we can see the

119
00:04:45,730 --> 00:04:47,260
signature right now it's invalid because

120
00:04:47,260 --> 00:04:49,390
I'm trying to verify it verified against

121
00:04:49,390 --> 00:04:51,490
a secret called secret and I was smart

122
00:04:51,490 --> 00:04:55,090
enough to not use that as my secret now

123
00:04:55,090 --> 00:04:56,800
the thing is if you if you look at the

124
00:04:56,800 --> 00:04:59,380
spec of jobs there's a bunch of

125
00:04:59,380 --> 00:05:01,240
algorithms that this should support and

126
00:05:01,240 --> 00:05:04,840
one of them is called none which you as

127
00:05:04,840 --> 00:05:06,280
you can see the signature disappears

128
00:05:06,280 --> 00:05:07,990
because we're just simply not generating

129
00:05:07,990 --> 00:05:11,110
a signature and this is sort of meant to

130
00:05:11,110 --> 00:05:14,110
be for you know like non sensitive data

131
00:05:14,110 --> 00:05:15,880
if you just want to try to transmit data

132
00:05:15,880 --> 00:05:18,640
in like a standardized format the thing

133
00:05:18,640 --> 00:05:22,420
though is that we can we can try and see

134
00:05:22,420 --> 00:05:26,230
if my library is weak enough to fail

135
00:05:26,230 --> 00:05:28,830
with this so we switch the role to admin

136
00:05:28,830 --> 00:05:32,920
and just submit this and if we refresh

137
00:05:32,920 --> 00:05:34,900
the page now let's see if you notice any

138
00:05:34,900 --> 00:05:37,720
changes we're now able to authenticate

139
00:05:37,720 --> 00:05:39,790
as an admin in fact we wouldn't have had

140
00:05:39,790 --> 00:05:41,230
to login in the first place we could

141
00:05:41,230 --> 00:05:42,730
have just generated this token um

142
00:05:42,730 --> 00:05:46,120
because I'm verifying this token and

143
00:05:46,120 --> 00:05:47,740
then take that as a source of truth on

144
00:05:47,740 --> 00:05:49,840
my website which is what most websites

145
00:05:49,840 --> 00:05:54,970
actually do and that's as you can see

146
00:05:54,970 --> 00:05:56,920
not great because like we could log in

147
00:05:56,920 --> 00:05:59,500
as any music so how can we protect

148
00:05:59,500 --> 00:06:01,390
ourselves from that the first thing you

149
00:06:01,390 --> 00:06:03,160
should do is you should really use HTTP

150
00:06:03,160 --> 00:06:05,170
only cookies if you're if there's no

151
00:06:05,170 --> 00:06:06,670
reason for it to be accessible in

152
00:06:06,670 --> 00:06:08,320
JavaScript and in this case the

153
00:06:08,320 --> 00:06:10,120
authentication token there is really no

154
00:06:10,120 --> 00:06:12,520
use for it to be access accessible

155
00:06:12,520 --> 00:06:14,170
JavaScript you should also make sure

156
00:06:14,170 --> 00:06:15,940
that it's signed meaning it's signed

157
00:06:15,940 --> 00:06:17,530
with a secret so that nobody else can

158
00:06:17,530 --> 00:06:20,050
temper with it and it's secure meaning

159
00:06:20,050 --> 00:06:21,370
it's only transfer via a secure

160
00:06:21,370 --> 00:06:23,950
connection but then there's also the

161
00:06:23,950 --> 00:06:26,800
fact that you should use as secure jaat

162
00:06:26,800 --> 00:06:28,930
implementations so the library that I

163
00:06:28,930 --> 00:06:30,760
was actually using is Jason web token

164
00:06:30,760 --> 00:06:33,130
but I was using an old version of it and

165
00:06:33,130 --> 00:06:34,870
the old version has two drawbacks it

166
00:06:34,870 --> 00:06:36,400
doesn't allow you to whitelist

167
00:06:36,400 --> 00:06:38,900
algorithms meaning specifying Oh

168
00:06:38,900 --> 00:06:40,250
only the algorithms that should be

169
00:06:40,250 --> 00:06:41,900
supported in this case I really just

170
00:06:41,900 --> 00:06:45,080
want to support HS 256 and then good

171
00:06:45,080 --> 00:06:46,790
implementations also have this fallback

172
00:06:46,790 --> 00:06:49,729
where if you're trying to verify a job

173
00:06:49,729 --> 00:06:52,130
that has no signature and you're trying

174
00:06:52,130 --> 00:06:54,800
to verify it with a like with a secret

175
00:06:54,800 --> 00:06:57,259
then this should fail like if the secret

176
00:06:57,259 --> 00:07:00,139
isn't null this should always fail so if

177
00:07:00,139 --> 00:07:01,580
you're if you're up to date with your

178
00:07:01,580 --> 00:07:04,460
dependencies here you'll be able to have

179
00:07:04,460 --> 00:07:08,270
not even that's Equifax and instead have

180
00:07:08,270 --> 00:07:09,919
like a secure implementation if you're

181
00:07:09,919 --> 00:07:11,360
not familiar with the accurate fact

182
00:07:11,360 --> 00:07:12,949
story you should look that up but

183
00:07:12,949 --> 00:07:14,720
basically that was a massive hack that

184
00:07:14,720 --> 00:07:16,880
happened in the u.s. purely because the

185
00:07:16,880 --> 00:07:18,229
company wasn't up to date with their

186
00:07:18,229 --> 00:07:19,880
with their software and there was a

187
00:07:19,880 --> 00:07:23,810
known vulnerability around this cool so

188
00:07:23,810 --> 00:07:26,090
I said this is a social network so how

189
00:07:26,090 --> 00:07:27,800
busy let me fix this because it's

190
00:07:27,800 --> 00:07:30,560
getting really warm under this so

191
00:07:30,560 --> 00:07:32,360
obviously you're able to post things on

192
00:07:32,360 --> 00:07:34,580
this so if we go back here I said this

193
00:07:34,580 --> 00:07:37,120
is markdown so we can do things like

194
00:07:37,120 --> 00:07:44,510
hello Jess I'm con are you and we can

195
00:07:44,510 --> 00:07:46,639
post this all this does is again it does

196
00:07:46,639 --> 00:07:49,370
an HTTP POST request here with some form

197
00:07:49,370 --> 00:07:51,770
data in the bottom with the actual

198
00:07:51,770 --> 00:07:54,199
message and then we use the auth token

199
00:07:54,199 --> 00:07:56,930
to verify that like on which user's

200
00:07:56,930 --> 00:07:59,599
behalf we should post this now the

201
00:07:59,599 --> 00:08:01,520
problem with that is that this can be

202
00:08:01,520 --> 00:08:03,470
used by attackers to perform so-called

203
00:08:03,470 --> 00:08:06,409
cross-site request forgery since we're

204
00:08:06,409 --> 00:08:08,870
using cookies the browser sort of overly

205
00:08:08,870 --> 00:08:11,599
eager to see hey they're like I have

206
00:08:11,599 --> 00:08:13,039
cookies for this page so I'll just

207
00:08:13,039 --> 00:08:14,330
submit them you know like I will just

208
00:08:14,330 --> 00:08:16,400
send them with every form request even

209
00:08:16,400 --> 00:08:19,159
if they're on a different domain so that

210
00:08:19,159 --> 00:08:20,690
the basically an attacker can

211
00:08:20,690 --> 00:08:23,240
impersonate you by just kind of getting

212
00:08:23,240 --> 00:08:25,039
you to if you're logged in on a page

213
00:08:25,039 --> 00:08:27,020
already to go to a website and then they

214
00:08:27,020 --> 00:08:30,199
can do things on your behalf so the

215
00:08:30,199 --> 00:08:31,430
first thing that happened was when I

216
00:08:31,430 --> 00:08:35,930
went to this page this is a target blank

217
00:08:35,930 --> 00:08:37,729
link so just a normal link that should

218
00:08:37,729 --> 00:08:38,750
open in a new window

219
00:08:38,750 --> 00:08:40,940
the problem with target blank links is

220
00:08:40,940 --> 00:08:44,150
that the new page has access to the

221
00:08:44,150 --> 00:08:46,400
opening page by using window dot opener

222
00:08:46,400 --> 00:08:48,709
and window dot opener has a location

223
00:08:48,709 --> 00:08:50,360
property and that works just like the

224
00:08:50,360 --> 00:08:52,370
location property that you would use

225
00:08:52,370 --> 00:08:54,140
your normal window meaning you can

226
00:08:54,140 --> 00:08:56,839
redirect page requests you can redirect

227
00:08:56,839 --> 00:08:59,450
the original page to anything else and

228
00:08:59,450 --> 00:09:01,279
that's what an attacker could use then

229
00:09:01,279 --> 00:09:03,800
in our case we just navigated it to like

230
00:09:03,800 --> 00:09:05,390
a harmless page but this could be a

231
00:09:05,390 --> 00:09:07,370
phishing page as well and users would

232
00:09:07,370 --> 00:09:09,110
likely not detect that so in the case of

233
00:09:09,110 --> 00:09:11,510
something like Facebook if you would

234
00:09:11,510 --> 00:09:13,220
post a post a link there and they would

235
00:09:13,220 --> 00:09:16,370
use target blank links the new page

236
00:09:16,370 --> 00:09:18,260
could then do window that opener and

237
00:09:18,260 --> 00:09:20,210
have redirect you to something that

238
00:09:20,210 --> 00:09:21,890
looks like Facebook and most users would

239
00:09:21,890 --> 00:09:23,450
not detect this unless they see it in

240
00:09:23,450 --> 00:09:26,480
the URL bar unfortunately there's a way

241
00:09:26,480 --> 00:09:28,520
to protect yourself against that there's

242
00:09:28,520 --> 00:09:33,980
actually yeah there's two properties

243
00:09:33,980 --> 00:09:36,110
that you should add under the rel

244
00:09:36,110 --> 00:09:38,420
attribute which is no opener and no

245
00:09:38,420 --> 00:09:40,400
refers oh no opener make sure in most

246
00:09:40,400 --> 00:09:42,620
browsers to just not give the new page

247
00:09:42,620 --> 00:09:45,230
access to window not opener and then no

248
00:09:45,230 --> 00:09:47,870
refer will make sure that on the

249
00:09:47,870 --> 00:09:49,700
browsers that don't support no opener

250
00:09:49,700 --> 00:09:52,640
that you will actually not have access

251
00:09:52,640 --> 00:09:57,170
to the refer link to protect yourself

252
00:09:57,170 --> 00:09:59,270
from cross-site request forgeries or sea

253
00:09:59,270 --> 00:10:02,480
surface acts this is fairly

254
00:10:02,480 --> 00:10:04,250
straightforward as well it's a bit more

255
00:10:04,250 --> 00:10:06,380
work because what we need to do is when

256
00:10:06,380 --> 00:10:08,180
we get the page that you want to do the

257
00:10:08,180 --> 00:10:10,339
like submission later on we need to

258
00:10:10,339 --> 00:10:12,529
generate a C surf token so that's just a

259
00:10:12,529 --> 00:10:16,279
unique token for the user that we will

260
00:10:16,279 --> 00:10:18,230
set on the one hand as a cookie in our

261
00:10:18,230 --> 00:10:20,450
case underscore C surf and then we will

262
00:10:20,450 --> 00:10:22,450
also submit that as on the page

263
00:10:22,450 --> 00:10:25,010
somewhere as for example a hidden input

264
00:10:25,010 --> 00:10:27,110
field and then when the when we do the

265
00:10:27,110 --> 00:10:28,790
actual post requests instead of just

266
00:10:28,790 --> 00:10:30,650
submitting the cookie we will also

267
00:10:30,650 --> 00:10:32,930
manually submit this value either as a

268
00:10:32,930 --> 00:10:36,320
header or we will submit it as a request

269
00:10:36,320 --> 00:10:39,260
body or query parameter and the reason

270
00:10:39,260 --> 00:10:40,370
why this actually protects you from

271
00:10:40,370 --> 00:10:41,870
these sort of attacks is that the

272
00:10:41,870 --> 00:10:44,360
attacker would be able to kind of

273
00:10:44,360 --> 00:10:46,040
leverage the fact that the browser sends

274
00:10:46,040 --> 00:10:48,110
these cookies automatically but there's

275
00:10:48,110 --> 00:10:50,510
no way for the user to read the attacker

276
00:10:50,510 --> 00:10:52,730
to read the cookie because that's

277
00:10:52,730 --> 00:10:56,180
blocked by only being accessible from

278
00:10:56,180 --> 00:10:58,459
your own domain so that's why this

279
00:10:58,459 --> 00:11:01,760
protection works now let's talk about

280
00:11:01,760 --> 00:11:03,589
little Bobbie tables younger brother the

281
00:11:03,589 --> 00:11:05,870
cross-site scripting attack

282
00:11:05,870 --> 00:11:07,880
if you're not familiar with little Bobby

283
00:11:07,880 --> 00:11:10,580
tables it originates from an xkcd comic

284
00:11:10,580 --> 00:11:14,390
where family of hackers named their kid

285
00:11:14,390 --> 00:11:16,279
like a sequel injection and the director

286
00:11:16,279 --> 00:11:17,839
of the school is sort of mad because it

287
00:11:17,839 --> 00:11:20,690
dropped all the student records because

288
00:11:20,690 --> 00:11:24,050
they weren't sanitizing their inputs and

289
00:11:24,050 --> 00:11:26,180
if we talk about cross-site scripting

290
00:11:26,180 --> 00:11:27,650
this is one of the most famous

291
00:11:27,650 --> 00:11:30,589
cross-site scripting attacks does anyone

292
00:11:30,589 --> 00:11:32,210
have an idea what this source code is

293
00:11:32,210 --> 00:11:34,910
from so if I haven't seen anyone who

294
00:11:34,910 --> 00:11:38,480
guessed this all right so this is from a

295
00:11:38,480 --> 00:11:41,360
famous attack called the myspace war

296
00:11:41,360 --> 00:11:44,660
more Sammy worm or JC JC or worm and

297
00:11:44,660 --> 00:11:46,430
that was a cross-site scripting attack

298
00:11:46,430 --> 00:11:48,890
from 2005 performed by a person called

299
00:11:48,890 --> 00:11:52,250
Sammy and what this would do is if he

300
00:11:52,250 --> 00:11:55,310
posted this on his page and I would send

301
00:11:55,310 --> 00:11:57,230
friend requests to everyone who visited

302
00:11:57,230 --> 00:11:59,330
his page and then post that on their

303
00:11:59,330 --> 00:12:01,070
page and then send friend requests to

304
00:12:01,070 --> 00:12:03,350
them that's also how they caught him

305
00:12:03,350 --> 00:12:05,120
because Sammy had overnight several

306
00:12:05,120 --> 00:12:07,010
million friends on MySpace

307
00:12:07,010 --> 00:12:09,080
which is a slight indicator that there

308
00:12:09,080 --> 00:12:13,010
he did something and the thing with the

309
00:12:13,010 --> 00:12:14,779
reason why this is interesting is that

310
00:12:14,779 --> 00:12:17,140
myspace actually had access s protection

311
00:12:17,140 --> 00:12:21,290
but Sammy was able to circumvent this

312
00:12:21,290 --> 00:12:23,570
XSS protection and two of the tricks

313
00:12:23,570 --> 00:12:25,490
that I personally found interesting were

314
00:12:25,490 --> 00:12:29,420
these two so there wasn't any

315
00:12:29,420 --> 00:12:32,330
possibility to use inline script tags so

316
00:12:32,330 --> 00:12:34,339
Sammy couldn't use that however what

317
00:12:34,339 --> 00:12:37,250
they allow was to use CSS so he created

318
00:12:37,250 --> 00:12:39,860
a div tag and used CSS and specify the

319
00:12:39,860 --> 00:12:42,520
background URL to then have a JavaScript

320
00:12:42,520 --> 00:12:44,870
protocol in there that let him write

321
00:12:44,870 --> 00:12:47,839
JavaScript they disabled though to use

322
00:12:47,839 --> 00:12:50,900
quotes in there so what he had to do is

323
00:12:50,900 --> 00:12:52,850
he had to basically eval another

324
00:12:52,850 --> 00:12:54,709
attribute that he would pick out of the

325
00:12:54,709 --> 00:12:56,870
Dom in this case it was just the same

326
00:12:56,870 --> 00:12:59,510
diff tag and then eval that code where

327
00:12:59,510 --> 00:13:01,279
you could write the code the other thing

328
00:13:01,279 --> 00:13:03,500
is they blocked certain keywords such as

329
00:13:03,500 --> 00:13:06,860
inner HTML or onreadystatechange which

330
00:13:06,860 --> 00:13:09,170
is used on Ajax requests if you are not

331
00:13:09,170 --> 00:13:11,959
using something like jQuery or if you're

332
00:13:11,959 --> 00:13:14,540
not using something like fetch these

333
00:13:14,540 --> 00:13:17,290
days which wasn't around at that time

334
00:13:17,290 --> 00:13:19,520
however he circumvented

335
00:13:19,520 --> 00:13:21,649
by basically turning those words into

336
00:13:21,649 --> 00:13:23,690
strings chopping them in the middle

337
00:13:23,690 --> 00:13:25,160
recon catenae ting them and then

338
00:13:25,160 --> 00:13:26,779
availing that because no regular

339
00:13:26,779 --> 00:13:31,339
expression was able to catch that and he

340
00:13:31,339 --> 00:13:32,660
used a bunch of other tricks as well if

341
00:13:32,660 --> 00:13:34,130
you want to figure if you want to read

342
00:13:34,130 --> 00:13:35,089
about them you should check out that

343
00:13:35,089 --> 00:13:38,390
blog post but the bottom line here is

344
00:13:38,390 --> 00:13:41,420
that it's really hard serve to block XSS

345
00:13:41,420 --> 00:13:43,580
and now you might say well I could just

346
00:13:43,580 --> 00:13:46,100
block eval right but javascript is this

347
00:13:46,100 --> 00:13:48,500
beautiful language that allows you to

348
00:13:48,500 --> 00:13:50,600
write JavaScript code in a million ways

349
00:13:50,600 --> 00:13:54,620
so all of these to eval and those are

350
00:13:54,620 --> 00:13:56,810
not the only four solutions like we can

351
00:13:56,810 --> 00:13:59,120
do way more marching clapper he is

352
00:13:59,120 --> 00:14:00,589
actually from Hamburg he did a great

353
00:14:00,589 --> 00:14:03,529
talk and just come Iceland about how you

354
00:14:03,529 --> 00:14:07,190
grow JavaScript in Hebrew and in sort of

355
00:14:07,190 --> 00:14:08,990
all sorts of other languages including

356
00:14:08,990 --> 00:14:11,110
languages from the Star Wars universe

357
00:14:11,110 --> 00:14:13,370
sort of like you can write this and any

358
00:14:13,370 --> 00:14:14,899
kind of character set so you should

359
00:14:14,899 --> 00:14:17,990
really just not trust that you can just

360
00:14:17,990 --> 00:14:22,279
block things by regular expression so

361
00:14:22,279 --> 00:14:24,230
bottom line is blocking XSS is not

362
00:14:24,230 --> 00:14:26,600
trivial and in fact I have a

363
00:14:26,600 --> 00:14:29,120
vulnerability on here as well so if we

364
00:14:29,120 --> 00:14:32,120
go here the library that I'm using to

365
00:14:32,120 --> 00:14:35,060
convert the markdown to HTML is called

366
00:14:35,060 --> 00:14:37,010
marked it's one of the most popular

367
00:14:37,010 --> 00:14:40,339
libraries on NPM for to do that and the

368
00:14:40,339 --> 00:14:42,829
version that I'm using is not the latest

369
00:14:42,829 --> 00:14:44,720
but the second to latest or something

370
00:14:44,720 --> 00:14:46,399
and that one actually has a

371
00:14:46,399 --> 00:14:48,950
vulnerability so by default it has a

372
00:14:48,950 --> 00:14:52,490
sanitize function so things like alert

373
00:14:52,490 --> 00:14:55,930
hello won't work but let's just be sure

374
00:14:55,930 --> 00:14:58,690
so this doesn't work it's being escaped

375
00:14:58,690 --> 00:15:01,670
now that we can use a similar trick -

376
00:15:01,670 --> 00:15:04,370
Sammis and use the javascript protocol

377
00:15:04,370 --> 00:15:05,779
here and we're just going to create a

378
00:15:05,779 --> 00:15:08,149
link here so that's how you create a

379
00:15:08,149 --> 00:15:11,149
link and markdown and we're going to try

380
00:15:11,149 --> 00:15:14,180
to do alert one here I'm going to copy

381
00:15:14,180 --> 00:15:16,610
this and this is being escaped as well

382
00:15:16,610 --> 00:15:18,649
because the library is smart enough to

383
00:15:18,649 --> 00:15:20,240
detect that that's essentially just

384
00:15:20,240 --> 00:15:23,240
writing inline JavaScript now this is

385
00:15:23,240 --> 00:15:24,829
where it becomes fun I'm just going to

386
00:15:24,829 --> 00:15:28,430
make this a bit bigger I'm not sure how

387
00:15:28,430 --> 00:15:29,600
familiar you are with character

388
00:15:29,600 --> 00:15:32,209
encodings but you can express a closing

389
00:15:32,209 --> 00:15:32,520
prayer and

390
00:15:32,520 --> 00:15:35,490
Jesus as an percent hash 41 semicolon

391
00:15:35,490 --> 00:15:38,340
that's literally the same character and

392
00:15:38,340 --> 00:15:42,470
if you look up your ASCII table colin is

393
00:15:42,470 --> 00:15:47,070
ampersand hash 58 semicolon and we post

394
00:15:47,070 --> 00:15:48,330
this we'll see you that's already a

395
00:15:48,330 --> 00:15:50,280
difference right there is no closing

396
00:15:50,280 --> 00:15:51,600
parenthesis here anymore

397
00:15:51,600 --> 00:15:54,210
there's just no text so we're getting

398
00:15:54,210 --> 00:15:55,500
somewhere

399
00:15:55,500 --> 00:15:56,910
but it's still smart enough to figure

400
00:15:56,910 --> 00:15:59,070
out that like hey ampersand hash 58

401
00:15:59,070 --> 00:16:00,690
that's a semi that's a call in so I'm

402
00:16:00,690 --> 00:16:05,220
just gonna block this however if we add

403
00:16:05,220 --> 00:16:07,560
this small word this the best word than

404
00:16:07,560 --> 00:16:09,510
JavaScript because we never know what it

405
00:16:09,510 --> 00:16:13,710
is the story looks a bit different

406
00:16:13,710 --> 00:16:15,660
because suddenly the link appeared and

407
00:16:15,660 --> 00:16:17,280
what happens here and if we click this

408
00:16:17,280 --> 00:16:20,100
we'll see that it actually works the

409
00:16:20,100 --> 00:16:21,690
reason why this works is that the

410
00:16:21,690 --> 00:16:23,700
browser tries to be helpful and the

411
00:16:23,700 --> 00:16:25,290
browser sees oh yeah you're using

412
00:16:25,290 --> 00:16:28,530
ampersand hash 58 I don't see a

413
00:16:28,530 --> 00:16:30,360
semicolon but I think that's just a typo

414
00:16:30,360 --> 00:16:33,090
so I'll just insert that for you and

415
00:16:33,090 --> 00:16:35,340
then everything afterwards turns valid

416
00:16:35,340 --> 00:16:37,170
JavaScript so that's why I use this in

417
00:16:37,170 --> 00:16:38,460
this case because it's a valid

418
00:16:38,460 --> 00:16:40,440
JavaScript I thought would write some

419
00:16:40,440 --> 00:16:42,060
other things that would fail and

420
00:16:42,060 --> 00:16:44,160
wouldn't execute the next slide but

421
00:16:44,160 --> 00:16:45,810
because it's valid JavaScript this just

422
00:16:45,810 --> 00:16:48,990
works shoutout to guy from sneek who

423
00:16:48,990 --> 00:16:51,180
actually showed this to me they were

424
00:16:51,180 --> 00:16:52,650
also the ones who fixed this in this

425
00:16:52,650 --> 00:16:54,450
library unfortunately there's still a

426
00:16:54,450 --> 00:16:56,820
vulnerability in this library around

427
00:16:56,820 --> 00:16:58,620
data your eyes but it's a bit harder to

428
00:16:58,620 --> 00:17:01,110
demonstrate so I decided to show this

429
00:17:01,110 --> 00:17:03,150
one but the bottom line here is really

430
00:17:03,150 --> 00:17:05,610
that encoding can be really dangerous

431
00:17:05,610 --> 00:17:07,230
and there are a million ways to express

432
00:17:07,230 --> 00:17:10,380
the same code so just never trust user

433
00:17:10,380 --> 00:17:14,610
input be skeptical as you can also don't

434
00:17:14,610 --> 00:17:16,800
trust CSS because CSS can be dangerous

435
00:17:16,800 --> 00:17:18,810
as well Jake Archibald recently

436
00:17:18,810 --> 00:17:20,459
published a nice blog post about this

437
00:17:20,459 --> 00:17:22,650
kind of showing how you should just not

438
00:17:22,650 --> 00:17:25,200
trust third-party CSS because there are

439
00:17:25,200 --> 00:17:26,459
a bunch of things you can do about this

440
00:17:26,459 --> 00:17:29,100
as well there it's that's just an talk

441
00:17:29,100 --> 00:17:32,460
by itself all right let's talk about

442
00:17:32,460 --> 00:17:35,250
Jason P so Jason P if you're not

443
00:17:35,250 --> 00:17:37,770
familiar with that has especially been

444
00:17:37,770 --> 00:17:39,960
used in the past to circumvent same

445
00:17:39,960 --> 00:17:42,030
origin policy so that's the idea of

446
00:17:42,030 --> 00:17:45,690
loading data asynchronously on your page

447
00:17:45,690 --> 00:17:49,710
from from a separate domain and that's

448
00:17:49,710 --> 00:17:51,870
by default blocked with Ajax requests

449
00:17:51,870 --> 00:17:53,429
but there's a way to kind of like

450
00:17:53,429 --> 00:17:55,500
circumvent that and the idea there is

451
00:17:55,500 --> 00:17:58,200
you create a global function and then

452
00:17:58,200 --> 00:18:00,750
you insert dynamically a script tag in

453
00:18:00,750 --> 00:18:04,279
our case we just placed it in there and

454
00:18:04,279 --> 00:18:07,200
this is a JSONP enabled endpoint meaning

455
00:18:07,200 --> 00:18:08,879
it gets some query parameter with a

456
00:18:08,879 --> 00:18:10,950
callback name and what it will do is

457
00:18:10,950 --> 00:18:13,230
instead of returning the plain jason it

458
00:18:13,230 --> 00:18:16,559
will wrap the json into a into a

459
00:18:16,559 --> 00:18:19,379
function call so that basically this is

460
00:18:19,379 --> 00:18:21,769
being triggered as a callback function

461
00:18:21,769 --> 00:18:25,139
now this by itself is harmless unless

462
00:18:25,139 --> 00:18:28,590
you crapoly implement it and that means

463
00:18:28,590 --> 00:18:30,120
that you're not verifying what you're

464
00:18:30,120 --> 00:18:32,789
passing in here is a callback and if we

465
00:18:32,789 --> 00:18:34,500
have that and we have a cross-site

466
00:18:34,500 --> 00:18:36,600
scripting vulnerability this is where

467
00:18:36,600 --> 00:18:38,850
the fun part starts so for whatever

468
00:18:38,850 --> 00:18:43,409
reason I was logged out again so and

469
00:18:43,409 --> 00:18:46,289
again so how many of you are familiar

470
00:18:46,289 --> 00:18:49,740
with service workers all right so if

471
00:18:49,740 --> 00:18:51,090
you're not familiar with service workers

472
00:18:51,090 --> 00:18:53,460
there and network proxy that you can

473
00:18:53,460 --> 00:18:56,129
install meaning it can intercept network

474
00:18:56,129 --> 00:18:59,789
requests and sort of is often being used

475
00:18:59,789 --> 00:19:01,830
to create offline available apps so you

476
00:19:01,830 --> 00:19:03,539
can cache things manually and you can

477
00:19:03,539 --> 00:19:05,789
control the cache now this is a very

478
00:19:05,789 --> 00:19:07,710
powerful feature and that's why the

479
00:19:07,710 --> 00:19:09,600
browser's only allow you to install it

480
00:19:09,600 --> 00:19:13,980
from your own domain now so that an

481
00:19:13,980 --> 00:19:16,259
attacker can install one now if you have

482
00:19:16,259 --> 00:19:18,600
a JSONP implementation that is

483
00:19:18,600 --> 00:19:21,179
vulnerable meaning it doesn't verify

484
00:19:21,179 --> 00:19:22,590
what you're passing and as a callback

485
00:19:22,590 --> 00:19:24,840
you have a page on your own domain that

486
00:19:24,840 --> 00:19:26,610
allows you to generate any JavaScript

487
00:19:26,610 --> 00:19:28,889
and that's what I'm doing here so if I

488
00:19:28,889 --> 00:19:32,970
install this if I post this and we click

489
00:19:32,970 --> 00:19:38,100
this link we will see first nothing but

490
00:19:38,100 --> 00:19:40,500
then I refresh the page and I can

491
00:19:40,500 --> 00:19:42,210
refresh this as often as possible but

492
00:19:42,210 --> 00:19:44,100
I'm only seeing this hacked because what

493
00:19:44,100 --> 00:19:45,299
happened and actually that's where I

494
00:19:45,299 --> 00:19:47,190
need the dev tools but let's see if we

495
00:19:47,190 --> 00:19:50,340
can how they're working again I have no

496
00:19:50,340 --> 00:19:53,190
clue what's happening here so we can see

497
00:19:53,190 --> 00:19:55,529
that it installed a serviceworker and we

498
00:19:55,529 --> 00:19:57,590
can see that this is a very long URL for

499
00:19:57,590 --> 00:19:59,059
Service Worker because what I'm doing is

500
00:19:59,059 --> 00:20:00,950
in the callback I'm specifying the

501
00:20:00,950 --> 00:20:03,230
entire source code of this Service

502
00:20:03,230 --> 00:20:05,360
Worker so we click here that's the

503
00:20:05,360 --> 00:20:08,600
entire code basically it's a bunch of

504
00:20:08,600 --> 00:20:11,630
codes ending with a slash slash to kind

505
00:20:11,630 --> 00:20:13,610
of comment out the entire code mainly

506
00:20:13,610 --> 00:20:15,650
because we don't care about it like the

507
00:20:15,650 --> 00:20:18,380
entire payload but we could also just

508
00:20:18,380 --> 00:20:22,850
keep that going now in here all we do is

509
00:20:22,850 --> 00:20:25,159
we say that like hey any request that

510
00:20:25,159 --> 00:20:28,669
isn't to port 4000 we just override it

511
00:20:28,669 --> 00:20:33,039
with an h1 hacked and some other code

512
00:20:33,039 --> 00:20:36,350
now this is a very obvious one to pull

513
00:20:36,350 --> 00:20:38,480
off with this what you would typically

514
00:20:38,480 --> 00:20:40,730
see an attacker do in this situation

515
00:20:40,730 --> 00:20:43,039
would be to insert a script tag secretly

516
00:20:43,039 --> 00:20:45,860
without you ever noticing it because it

517
00:20:45,860 --> 00:20:47,539
doesn't it they don't have to overwrite

518
00:20:47,539 --> 00:20:50,149
the entire request response they can

519
00:20:50,149 --> 00:20:51,919
just insert something and then keep it

520
00:20:51,919 --> 00:20:53,600
going so you would never notice this

521
00:20:53,600 --> 00:20:55,669
like you if this is installed it's

522
00:20:55,669 --> 00:20:58,820
really hard to detect unless someone

523
00:20:58,820 --> 00:21:00,200
actually reads the source code of the

524
00:21:00,200 --> 00:21:02,120
Service Worker they have installed which

525
00:21:02,120 --> 00:21:04,450
at least I don't do for other websites

526
00:21:04,450 --> 00:21:06,919
I'm not sure if that's something you do

527
00:21:06,919 --> 00:21:11,090
as a hobby but if we unregister this and

528
00:21:11,090 --> 00:21:14,179
refresh the page it works again except

529
00:21:14,179 --> 00:21:15,500
that like you don't see it so I'm gonna

530
00:21:15,500 --> 00:21:19,309
close them there we go there we go so

531
00:21:19,309 --> 00:21:21,950
now you know the page works again cool

532
00:21:21,950 --> 00:21:23,929
so luckily there's a for a lot of these

533
00:21:23,929 --> 00:21:26,690
vulnerabilities there's a sort of hero

534
00:21:26,690 --> 00:21:28,549
in town that can protect you called

535
00:21:28,549 --> 00:21:31,340
content security policy and what this

536
00:21:31,340 --> 00:21:33,409
does is it allows you to specify a set

537
00:21:33,409 --> 00:21:35,149
of rules that the browser should play by

538
00:21:35,149 --> 00:21:38,299
with respect to your resources so if we

539
00:21:38,299 --> 00:21:40,970
go to this page which all it the only

540
00:21:40,970 --> 00:21:43,490
difference it does is it applies ESP on

541
00:21:43,490 --> 00:21:46,390
this so the first thing we see is that

542
00:21:46,390 --> 00:21:49,100
down here there used to be images but

543
00:21:49,100 --> 00:21:51,830
there they disappeared and if we click

544
00:21:51,830 --> 00:21:54,110
here that doesn't work anymore and this

545
00:21:54,110 --> 00:21:57,620
doesn't work either so if we look here

546
00:21:57,620 --> 00:22:00,169
and we go into the console pane we see a

547
00:22:00,169 --> 00:22:01,730
bunch of red messages and all of them

548
00:22:01,730 --> 00:22:03,260
have go in the same direction of saying

549
00:22:03,260 --> 00:22:06,890
hey all of these blocks violate the

550
00:22:06,890 --> 00:22:10,930
content security policy or CSP so

551
00:22:10,930 --> 00:22:13,960
look like it's essentially just an HTTP

552
00:22:13,960 --> 00:22:16,300
header that defines these rules to play

553
00:22:16,300 --> 00:22:19,810
by so in my case the CSP says hey the

554
00:22:19,810 --> 00:22:23,110
default source that we allow is anything

555
00:22:23,110 --> 00:22:25,840
from my own domain however for scripts

556
00:22:25,840 --> 00:22:27,880
and styles I only want to allow things

557
00:22:27,880 --> 00:22:29,770
that use a certain ons so that's

558
00:22:29,770 --> 00:22:32,080
something that changes on every request

559
00:22:32,080 --> 00:22:33,760
so attackers can't hard code this

560
00:22:33,760 --> 00:22:36,130
meaning only things that you on request

561
00:22:36,130 --> 00:22:38,260
are convinced that should be there can

562
00:22:38,260 --> 00:22:39,580
be there

563
00:22:39,580 --> 00:22:42,460
I completely block objects because I

564
00:22:42,460 --> 00:22:44,410
don't see any use case for flash on my

565
00:22:44,410 --> 00:22:47,500
page in fact I don't see a use case for

566
00:22:47,500 --> 00:22:49,660
flash on any page but feel free to

567
00:22:49,660 --> 00:22:52,990
convince me of other things for images I

568
00:22:52,990 --> 00:22:54,460
only allow things that are hosts on my

569
00:22:54,460 --> 00:22:56,830
own domain or if I'm API dot adorable

570
00:22:56,830 --> 00:23:01,000
i/o which I use for these adorable icons

571
00:23:01,000 --> 00:23:03,070
here some of them are adorable some of

572
00:23:03,070 --> 00:23:08,650
them are sort of weird and that's why

573
00:23:08,650 --> 00:23:10,540
for example the Twitter images didn't

574
00:23:10,540 --> 00:23:12,120
work that were further down on the page

575
00:23:12,120 --> 00:23:17,260
I block all fonts or I block all fonts

576
00:23:17,260 --> 00:23:18,940
that are not on my own domain or on

577
00:23:18,940 --> 00:23:21,040
google fonts and I block all mixed

578
00:23:21,040 --> 00:23:23,170
content meaning no HTTP content on the

579
00:23:23,170 --> 00:23:26,080
page as well as a report your I which is

580
00:23:26,080 --> 00:23:27,940
where it would report any kind of like

581
00:23:27,940 --> 00:23:30,220
failed request so if we go to my

582
00:23:30,220 --> 00:23:37,060
terminal we can see we can see all these

583
00:23:37,060 --> 00:23:39,460
requests being made here kind of like

584
00:23:39,460 --> 00:23:40,960
giving you information about hey what

585
00:23:40,960 --> 00:23:43,540
was violated there's a way to run this

586
00:23:43,540 --> 00:23:46,270
in report only mode as well so if you're

587
00:23:46,270 --> 00:23:47,950
trying to gradually move over to that

588
00:23:47,950 --> 00:23:50,350
you can say that like hey just report

589
00:23:50,350 --> 00:23:52,210
don't actually block the resources which

590
00:23:52,210 --> 00:23:53,740
is a good way to kind of like detect

591
00:23:53,740 --> 00:23:55,420
during development and stuff like that

592
00:23:55,420 --> 00:23:57,100
like hey which is like what are actually

593
00:23:57,100 --> 00:23:58,930
things that are being blocked by this

594
00:23:58,930 --> 00:24:01,180
and are we destroying the functionality

595
00:24:01,180 --> 00:24:03,120
or something

596
00:24:03,120 --> 00:24:05,530
CSP though shouldn't be your like

597
00:24:05,530 --> 00:24:08,140
security policy like you shouldn't just

598
00:24:08,140 --> 00:24:10,300
rely on that and be like yep nothing can

599
00:24:10,300 --> 00:24:12,130
happen to me now it should just be a

600
00:24:12,130 --> 00:24:14,710
safety net because writing really good

601
00:24:14,710 --> 00:24:18,100
CSP is hard so if you're relying on that

602
00:24:18,100 --> 00:24:20,170
there was a paper of Google where they

603
00:24:20,170 --> 00:24:23,770
have looked at CSP policies on famous

604
00:24:23,770 --> 00:24:25,540
website and a lot of them were

605
00:24:25,540 --> 00:24:28,090
completely insufficient so you shouldn't

606
00:24:28,090 --> 00:24:30,220
rely on that as like as a security

607
00:24:30,220 --> 00:24:32,470
policy always kind of think of all the

608
00:24:32,470 --> 00:24:34,870
other vulnerabilities I showed you and

609
00:24:34,870 --> 00:24:36,730
try to fix them just have this as a

610
00:24:36,730 --> 00:24:38,590
safety net that in case you screwed up

611
00:24:38,590 --> 00:24:40,120
something or a dependency screwed up

612
00:24:40,120 --> 00:24:42,960
something that you're you're a bit safer

613
00:24:42,960 --> 00:24:45,250
other things you should look out for are

614
00:24:45,250 --> 00:24:47,440
things like click tracking meaning you

615
00:24:47,440 --> 00:24:49,300
shouldn't allow two iframe your page

616
00:24:49,300 --> 00:24:51,880
unless you really have a use case for

617
00:24:51,880 --> 00:24:55,090
that and most pages don't so you can use

618
00:24:55,090 --> 00:24:56,650
that but I'll do that by an HTTP header

619
00:24:56,650 --> 00:24:59,440
they can either be deny or self self

620
00:24:59,440 --> 00:25:00,970
would allow you still to do it on your

621
00:25:00,970 --> 00:25:02,590
own page then I would just completely

622
00:25:02,590 --> 00:25:04,870
block it you should check out a library

623
00:25:04,870 --> 00:25:07,060
libraries like helmet which is a library

624
00:25:07,060 --> 00:25:09,820
for Express that set certain HTTP

625
00:25:09,820 --> 00:25:12,070
headers on your request that are just

626
00:25:12,070 --> 00:25:14,380
good practices for security one of them

627
00:25:14,380 --> 00:25:17,860
is disallowing the I framing don't show

628
00:25:17,860 --> 00:25:19,810
versions of fronted libraries and your

629
00:25:19,810 --> 00:25:21,940
server that's really important because

630
00:25:21,940 --> 00:25:24,250
that's like helping the attackers to

631
00:25:24,250 --> 00:25:26,290
like know exactly what they need to do

632
00:25:26,290 --> 00:25:28,570
because if they know you're using react

633
00:25:28,570 --> 00:25:32,110
versions 16-point whole point - then

634
00:25:32,110 --> 00:25:33,370
they know all right those are the

635
00:25:33,370 --> 00:25:37,090
vulnerabilities I should go for and same

636
00:25:37,090 --> 00:25:38,410
goes for the server if they know your

637
00:25:38,410 --> 00:25:40,510
expressed you're using an express server

638
00:25:40,510 --> 00:25:42,190
they already know that like those are

639
00:25:42,190 --> 00:25:44,500
the things I want to try uncheck for

640
00:25:44,500 --> 00:25:46,000
types of input so if you're expecting

641
00:25:46,000 --> 00:25:48,690
for somewhere parameter to be a string

642
00:25:48,690 --> 00:25:51,040
check that it's really a string because

643
00:25:51,040 --> 00:25:53,020
some libraries try to be nice to you and

644
00:25:53,020 --> 00:25:55,480
parse things as objects if they see

645
00:25:55,480 --> 00:25:58,330
that's a JSON for example with numbers

646
00:25:58,330 --> 00:26:00,490
and especially with objects this can be

647
00:26:00,490 --> 00:26:01,990
really dangerous because if you're

648
00:26:01,990 --> 00:26:04,420
trying to do like no sequel database

649
00:26:04,420 --> 00:26:07,420
lookup for example in MongoDB for like

650
00:26:07,420 --> 00:26:10,480
the password being being a string and I

651
00:26:10,480 --> 00:26:12,400
pass in an object I can do a no sequel

652
00:26:12,400 --> 00:26:14,500
injection and have login as any user

653
00:26:14,500 --> 00:26:17,500
through that other things consider

654
00:26:17,500 --> 00:26:18,520
security audits

655
00:26:18,520 --> 00:26:22,720
security is hard so contact someone who

656
00:26:22,720 --> 00:26:24,430
is a security expert if you have someone

657
00:26:24,430 --> 00:26:26,470
on your team that's great if you don't

658
00:26:26,470 --> 00:26:28,690
hire someone externally because it's a

659
00:26:28,690 --> 00:26:30,630
good investment you don't want to be

660
00:26:30,630 --> 00:26:33,110
thinking about this only when you go

661
00:26:33,110 --> 00:26:34,490
hacked because at that point it gets

662
00:26:34,490 --> 00:26:36,920
really expensive stay up to date with

663
00:26:36,920 --> 00:26:38,809
versions because their dependencies can

664
00:26:38,809 --> 00:26:41,000
introduce a bunch of vulnerabilities

665
00:26:41,000 --> 00:26:44,750
that you just never think of greenkeeper

666
00:26:44,750 --> 00:26:47,150
is a great tool for that and use tools

667
00:26:47,150 --> 00:26:48,860
to detect security vulnerabilities in

668
00:26:48,860 --> 00:26:51,740
your dependencies so NSP or sneak are

669
00:26:51,740 --> 00:26:53,929
great for that sneak in fact even

670
00:26:53,929 --> 00:26:56,059
patches security vulnerabilities for you

671
00:26:56,059 --> 00:26:58,400
like the data URI one and marked is

672
00:26:58,400 --> 00:27:00,799
actually patched if you use sneak even

673
00:27:00,799 --> 00:27:02,090
though it's not patched in the actual

674
00:27:02,090 --> 00:27:06,410
library to wrap this up use HTTP only

675
00:27:06,410 --> 00:27:08,059
cookies if there's no reason for them to

676
00:27:08,059 --> 00:27:10,610
be available in JavaScript be skeptical

677
00:27:10,610 --> 00:27:13,070
of JW TS just don't treat them as a

678
00:27:13,070 --> 00:27:15,590
single source of truth and have like an

679
00:27:15,590 --> 00:27:18,919
up-to-date library use no opener and no

680
00:27:18,919 --> 00:27:22,400
refer on your target blank links UC surf

681
00:27:22,400 --> 00:27:25,270
tokens whenever you have rely on like

682
00:27:25,270 --> 00:27:26,990
cookies for example has an

683
00:27:26,990 --> 00:27:31,220
authentication method blocking XSS isn't

684
00:27:31,220 --> 00:27:33,620
trivial because encoding can be really

685
00:27:33,620 --> 00:27:36,710
dangerous so just don't don't think

686
00:27:36,710 --> 00:27:37,970
you've got that covered

687
00:27:37,970 --> 00:27:40,820
always be skeptical and try to do

688
00:27:40,820 --> 00:27:42,260
different things to kind of circumvent

689
00:27:42,260 --> 00:27:45,470
that be careful of JSONP a callback

690
00:27:45,470 --> 00:27:47,030
should never contain anything that isn't

691
00:27:47,030 --> 00:27:49,340
a word character and here we never even

692
00:27:49,340 --> 00:27:50,780
like a number because we could start

693
00:27:50,780 --> 00:27:53,660
encoding things so just have only word

694
00:27:53,660 --> 00:27:56,210
characters in there UCSB as a safety net

695
00:27:56,210 --> 00:27:59,330
because it's really helpful and most

696
00:27:59,330 --> 00:28:01,820
importantly stay up to date because if

697
00:28:01,820 --> 00:28:03,140
your dependencies have vulnerabilities

698
00:28:03,140 --> 00:28:06,200
you can have the most secure code on

699
00:28:06,200 --> 00:28:08,679
your site you will still be vulnerable

700
00:28:08,679 --> 00:28:11,360
I'll publish those slides after this

701
00:28:11,360 --> 00:28:13,460
talk on this URL and I'll tweet about it

702
00:28:13,460 --> 00:28:16,100
as well so you can take a look the

703
00:28:16,100 --> 00:28:17,390
entire application that I showed you

704
00:28:17,390 --> 00:28:19,669
including documentation resources to

705
00:28:19,669 --> 00:28:22,130
security matters on this URL again I'm

706
00:28:22,130 --> 00:28:25,160
going to tweet this and I have stickers

707
00:28:25,160 --> 00:28:27,890
but both of these so if you find me

708
00:28:27,890 --> 00:28:30,020
later I can give you some of those if

709
00:28:30,020 --> 00:28:32,990
you're a sticker obsessed like I am and

710
00:28:32,990 --> 00:28:34,190
with that thank you everyone for your

711
00:28:34,190 --> 00:28:35,690
attention I'll be around for the rest of

712
00:28:35,690 --> 00:28:41,200
the day if you have any questions

713
00:28:41,210 --> 00:28:48,810
[Applause]

