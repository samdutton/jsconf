1
00:00:11,440 --> 00:00:15,709

thank you okay yeah we'll introduce

2
00:00:15,709 --> 00:00:18,710
myself shortly then I will talk about

3
00:00:18,710 --> 00:00:21,320
where we do come from regarding offline

4
00:00:21,320 --> 00:00:24,829
capabilities of browsers after that I

5
00:00:24,829 --> 00:00:26,779
want to point out what's different now

6
00:00:26,779 --> 00:00:29,450
with service workers and after that we

7
00:00:29,450 --> 00:00:30,710
dive in and I'll show you how to

8
00:00:30,710 --> 00:00:33,500
implement them and yeah after that a

9
00:00:33,500 --> 00:00:36,850
little outlook on what's next so okay

10
00:00:36,850 --> 00:00:39,200
who's talking here yeah my name is

11
00:00:39,200 --> 00:00:42,620
similar ill and I'm a JavaScript

12
00:00:42,620 --> 00:00:44,990
developer here in Hamburg at gym do we

13
00:00:44,990 --> 00:00:47,360
are offering like a website builder for

14
00:00:47,360 --> 00:00:50,060
the common people i'm also on twitter

15
00:00:50,060 --> 00:00:53,239
and get up you can click the link if you

16
00:00:53,239 --> 00:00:55,370
are interested in that i will post the

17
00:00:55,370 --> 00:00:59,600
slides after the talk so okay where do

18
00:00:59,600 --> 00:01:03,440
we come from you already have heard of

19
00:01:03,440 --> 00:01:05,780
it I think it's the app cache manifest I

20
00:01:05,780 --> 00:01:10,159
call it the unloved child well i did i

21
00:01:10,159 --> 00:01:13,340
do that i mean it has a declarative API

22
00:01:13,340 --> 00:01:16,189
that's easy to use on the first glance

23
00:01:16,189 --> 00:01:20,509
you just set up a file like manifest app

24
00:01:20,509 --> 00:01:23,270
cache and put in the path of the files

25
00:01:23,270 --> 00:01:26,659
you want to be cached and after their to

26
00:01:26,659 --> 00:01:29,959
register this fire and by putting this

27
00:01:29,959 --> 00:01:32,630
manifest a tribute to the HTML element

28
00:01:32,630 --> 00:01:36,049
and then you're good to go that's it the

29
00:01:36,049 --> 00:01:38,359
browser parses this file and puts all

30
00:01:38,359 --> 00:01:41,479
the stuff in the app cache sounds great

31
00:01:41,479 --> 00:01:45,709
actually but I have this quote by Jake

32
00:01:45,709 --> 00:01:49,340
Archibald he wrote in an article and he

33
00:01:49,340 --> 00:01:52,369
said the application cares cashback it's

34
00:01:52,369 --> 00:01:54,979
like an onion it has many many layers

35
00:01:54,979 --> 00:01:58,389
and SPS rulem you'll be reduced to tears

36
00:01:58,389 --> 00:02:03,529
which sounds harsh actually yeah why is

37
00:02:03,529 --> 00:02:07,399
that well first of all you actually have

38
00:02:07,399 --> 00:02:09,590
no control over what content is loaded

39
00:02:09,590 --> 00:02:14,420
with the application cache so you can't

40
00:02:14,420 --> 00:02:17,959
be sure or like in other way the

41
00:02:17,959 --> 00:02:20,330
application cache will always serve

42
00:02:20,330 --> 00:02:22,370
cash content even if there's a fresh

43
00:02:22,370 --> 00:02:26,600
version and when the flash version of

44
00:02:26,600 --> 00:02:29,090
the file is loaded from the network then

45
00:02:29,090 --> 00:02:32,060
there's an update ready event and the

46
00:02:32,060 --> 00:02:35,600
user has to reload the page to get the

47
00:02:35,600 --> 00:02:38,420
new version you could do it yourself

48
00:02:38,420 --> 00:02:42,530
with navigator on a location reload but

49
00:02:42,530 --> 00:02:44,270
the problem is the user may already have

50
00:02:44,270 --> 00:02:46,010
interacted with the page and then you

51
00:02:46,010 --> 00:02:49,520
can't just reload it and the user loses

52
00:02:49,520 --> 00:02:51,830
all the stuff he has done till this

53
00:02:51,830 --> 00:02:54,710
moment so yet a little bit complicated

54
00:02:54,710 --> 00:02:58,610
to get new stuff served the other thing

55
00:02:58,610 --> 00:03:03,440
is it is not enough to to change files

56
00:03:03,440 --> 00:03:07,760
and provide them but you have to change

57
00:03:07,760 --> 00:03:10,280
the manifest itself to signal to the

58
00:03:10,280 --> 00:03:12,260
application cat hey there are some

59
00:03:12,260 --> 00:03:16,310
changes please have a look yeah it's not

60
00:03:16,310 --> 00:03:20,320
that nice and the other funny thing is

61
00:03:20,320 --> 00:03:22,940
the application cache interferes with

62
00:03:22,940 --> 00:03:25,459
the normal browser caching so one might

63
00:03:25,459 --> 00:03:29,930
think it is an replacement for the bra

64
00:03:29,930 --> 00:03:31,820
for the browser cache but this is not

65
00:03:31,820 --> 00:03:35,030
the case so even if you manage to tell

66
00:03:35,030 --> 00:03:37,040
the application cache on to load a new

67
00:03:37,040 --> 00:03:41,060
version the browser still might say well

68
00:03:41,060 --> 00:03:43,340
the cache headers say it's valid for

69
00:03:43,340 --> 00:03:46,010
five years I serve the old version so to

70
00:03:46,010 --> 00:03:48,050
prevent this you have to disable the

71
00:03:48,050 --> 00:03:49,820
normal caching for all files that you

72
00:03:49,820 --> 00:03:51,489
want to have on the application cache

73
00:03:51,489 --> 00:03:57,220
the sucks and you don't let at you

74
00:03:57,220 --> 00:03:59,450
content during runtime so we have a

75
00:03:59,450 --> 00:04:02,810
static file the manifest file and that's

76
00:04:02,810 --> 00:04:04,670
it during runtime of your web app

77
00:04:04,670 --> 00:04:06,709
there's no way to edit this fire so if

78
00:04:06,709 --> 00:04:10,220
you want to cache dynamic content

79
00:04:10,220 --> 00:04:13,519
request it during runtime you have to do

80
00:04:13,519 --> 00:04:16,010
some hacking with local host or browser

81
00:04:16,010 --> 00:04:20,120
databases and finally it doesn't require

82
00:04:20,120 --> 00:04:24,050
HTTPS just sounds nice but it leads to

83
00:04:24,050 --> 00:04:28,190
sound security flaws which I don't want

84
00:04:28,190 --> 00:04:29,690
to point out in detail about that you

85
00:04:29,690 --> 00:04:31,170
can google it up

86
00:04:31,170 --> 00:04:34,690
and yeah all these points let mozilla to

87
00:04:34,690 --> 00:04:37,690
even say okay that's enough we remove

88
00:04:37,690 --> 00:04:41,500
the support for app cache well soon you

89
00:04:41,500 --> 00:04:43,510
won't be able to use app cache in

90
00:04:43,510 --> 00:04:45,940
Firefox anymore and maybe other browser

91
00:04:45,940 --> 00:04:47,650
we're not will follow I don't know at

92
00:04:47,650 --> 00:04:53,140
the moment but it is possible so yeah

93
00:04:53,140 --> 00:04:54,640
what is actually different service

94
00:04:54,640 --> 00:04:57,760
workers then service worker it's a new

95
00:04:57,760 --> 00:05:00,580
approach to caching and first of all

96
00:05:00,580 --> 00:05:02,560
they have no declarative API by the

97
00:05:02,560 --> 00:05:05,680
programmatic IPI so you write JavaScript

98
00:05:05,680 --> 00:05:08,410
and tell the browser which files to cash

99
00:05:08,410 --> 00:05:11,860
and when to low load or serve which

100
00:05:11,860 --> 00:05:14,710
contents and this javascript is executed

101
00:05:14,710 --> 00:05:17,830
in a serviceworker threat during the run

102
00:05:17,830 --> 00:05:24,550
time and as a service workers running it

103
00:05:24,550 --> 00:05:26,170
acts like a proxy between your web

104
00:05:26,170 --> 00:05:28,870
application and the network so we have

105
00:05:28,870 --> 00:05:33,280
full control over which requests go go

106
00:05:33,280 --> 00:05:38,710
out and so you can remove files and add

107
00:05:38,710 --> 00:05:41,470
files to the cash during the run time so

108
00:05:41,470 --> 00:05:43,780
you are not limited to static assets

109
00:05:43,780 --> 00:05:46,330
that you define before deploying your

110
00:05:46,330 --> 00:05:48,280
web app but you can do this in the rant

111
00:05:48,280 --> 00:05:52,810
at runtime yeah and finally as the

112
00:05:52,810 --> 00:05:54,910
service work as a proxy you have full

113
00:05:54,910 --> 00:05:58,240
control what to serve there are several

114
00:05:58,240 --> 00:06:01,480
strategies to what serve when if to hit

115
00:06:01,480 --> 00:06:03,460
the cash out forward the request to the

116
00:06:03,460 --> 00:06:09,820
network I will point out that later okay

117
00:06:09,820 --> 00:06:14,080
so that the theoretical background let's

118
00:06:14,080 --> 00:06:16,330
have a look at how to use them there are

119
00:06:16,330 --> 00:06:19,810
some prerequisites and first you need a

120
00:06:19,810 --> 00:06:22,630
secure connection this is learning from

121
00:06:22,630 --> 00:06:26,320
the app cache luckily you don't need it

122
00:06:26,320 --> 00:06:28,540
on the localhost so you don't have to go

123
00:06:28,540 --> 00:06:31,150
through the hassle to install a

124
00:06:31,150 --> 00:06:32,980
certificate when you just want to fill

125
00:06:32,980 --> 00:06:37,630
around on your machine another thing is

126
00:06:37,630 --> 00:06:40,030
the support of the browsers at the

127
00:06:40,030 --> 00:06:41,610
moment only five

128
00:06:41,610 --> 00:06:45,060
and opera and chrome support service

129
00:06:45,060 --> 00:06:49,620
workers log on mobile and desktop

130
00:06:49,620 --> 00:06:52,620
browsers but actually there shouldn't be

131
00:06:52,620 --> 00:06:54,870
a problem so service workers are

132
00:06:54,870 --> 00:06:56,189
regarded as a progressive enhancement

133
00:06:56,189 --> 00:06:59,909
and your web app should we work fine

134
00:06:59,909 --> 00:07:02,550
without them and get even better when

135
00:07:02,550 --> 00:07:04,949
the users browser support service

136
00:07:04,949 --> 00:07:09,000
workers and finally you should have a

137
00:07:09,000 --> 00:07:11,189
basic understanding of promises so the

138
00:07:11,189 --> 00:07:14,580
API around service workers makes heavily

139
00:07:14,580 --> 00:07:16,169
user of them and if you aren't familiar

140
00:07:16,169 --> 00:07:18,539
with promises the code might look a

141
00:07:18,539 --> 00:07:24,180
little awkward okay first of all if you

142
00:07:24,180 --> 00:07:26,340
want to use service workers you have to

143
00:07:26,340 --> 00:07:30,000
register them and yeah as I said it's a

144
00:07:30,000 --> 00:07:32,669
progressive enhancement so we first look

145
00:07:32,669 --> 00:07:35,219
at the the Navigator object if there's

146
00:07:35,219 --> 00:07:38,639
this property service worker and if this

147
00:07:38,639 --> 00:07:40,650
exists the browser should support them

148
00:07:40,650 --> 00:07:43,250
and we call the register method and

149
00:07:43,250 --> 00:07:46,250
register our service worker jas file

150
00:07:46,250 --> 00:07:49,520
that's one thing to have in mind here

151
00:07:49,520 --> 00:07:52,289
the location of this file defines the

152
00:07:52,289 --> 00:07:54,990
scope so if you are used to put all your

153
00:07:54,990 --> 00:07:58,440
javascript in a J a subfolder you might

154
00:07:58,440 --> 00:08:01,469
be tempted to do to do the same with the

155
00:08:01,469 --> 00:08:05,069
service work of fire but then your users

156
00:08:05,069 --> 00:08:07,319
won't have any caching because they

157
00:08:07,319 --> 00:08:10,560
won't go in in the part of your web app

158
00:08:10,560 --> 00:08:13,080
where j/s isn't part of your web app

159
00:08:13,080 --> 00:08:16,469
then for the user so normally I think

160
00:08:16,469 --> 00:08:18,839
you want to do I put this in the root of

161
00:08:18,839 --> 00:08:27,390
your web app

162
00:08:27,400 --> 00:08:29,960
there's also another way in the making

163
00:08:29,960 --> 00:08:33,500
and this isn't supported at the moment

164
00:08:33,500 --> 00:08:35,690
but soon crown was supported in Firefox

165
00:08:35,690 --> 00:08:38,719
signaled that they like this approach as

166
00:08:38,719 --> 00:08:41,769
well and this is a declarative way to

167
00:08:41,769 --> 00:08:43,880
register the service worker with the

168
00:08:43,880 --> 00:08:47,060
link element I just put it here for

169
00:08:47,060 --> 00:08:52,820
completeness then when your service

170
00:08:52,820 --> 00:08:55,220
workers finally registered you can yet

171
00:08:55,220 --> 00:08:59,029
start managing your caches and in the

172
00:08:59,029 --> 00:09:03,200
file first of all you need aversion to

173
00:09:03,200 --> 00:09:06,500
to control which files are cached and

174
00:09:06,500 --> 00:09:08,959
which old files to delete so every time

175
00:09:08,959 --> 00:09:11,899
you edit this version you have the

176
00:09:11,899 --> 00:09:14,750
opportunity to clean up your cash I

177
00:09:14,750 --> 00:09:16,910
choose this number but you can choose

178
00:09:16,910 --> 00:09:19,190
whatever string you want like animal

179
00:09:19,190 --> 00:09:24,550
names or your favorite manga characters

180
00:09:24,550 --> 00:09:26,930
they only have to change when you deploy

181
00:09:26,930 --> 00:09:30,829
a new state yeah after that I define an

182
00:09:30,829 --> 00:09:33,529
area with static assets like the

183
00:09:33,529 --> 00:09:37,040
index.html and some CSS some JavaScript

184
00:09:37,040 --> 00:09:39,920
a nice image to make it more beautiful

185
00:09:39,920 --> 00:09:44,029
and in the life cycle of the

186
00:09:44,029 --> 00:09:45,800
serviceworker there's this installation

187
00:09:45,800 --> 00:09:48,649
process and when this happens the car

188
00:09:48,649 --> 00:09:52,310
back on the lifecycle event is called

189
00:09:52,310 --> 00:09:56,570
and the event object that is passed into

190
00:09:56,570 --> 00:09:59,510
it has this wait until method which

191
00:09:59,510 --> 00:10:02,300
expects the promise so the installation

192
00:10:02,300 --> 00:10:04,310
stops at this moment and we have the

193
00:10:04,310 --> 00:10:07,310
opportunity to put our files into the

194
00:10:07,310 --> 00:10:11,510
cache then the process goes on so we

195
00:10:11,510 --> 00:10:16,100
open the cash and put our static files

196
00:10:16,100 --> 00:10:19,399
into it by the way this caches object

197
00:10:19,399 --> 00:10:21,740
it's not only available in the service

198
00:10:21,740 --> 00:10:24,920
worker but also in your main web

199
00:10:24,920 --> 00:10:26,870
application on the windows object so you

200
00:10:26,870 --> 00:10:29,449
could actually put contents into the

201
00:10:29,449 --> 00:10:33,260
cash from there if this does make sense

202
00:10:33,260 --> 00:10:35,910
in the situation

203
00:10:35,910 --> 00:10:39,120
so yeah we have put our contents into

204
00:10:39,120 --> 00:10:43,320
the cash and the life cycle goes on next

205
00:10:43,320 --> 00:10:45,900
it will be activated and there again we

206
00:10:45,900 --> 00:10:49,080
have a call an event to to attach a call

207
00:10:49,080 --> 00:10:52,170
vector and here we have again our event

208
00:10:52,170 --> 00:10:56,160
wait until method and when the service

209
00:10:56,160 --> 00:10:59,280
worker is activated we can clean the

210
00:10:59,280 --> 00:11:02,760
caches by getting all the keys from it

211
00:11:02,760 --> 00:11:05,750
and compared to our current version and

212
00:11:05,750 --> 00:11:08,190
if the cash doesn't match our current

213
00:11:08,190 --> 00:11:10,410
regime be just deleted stuff and so

214
00:11:10,410 --> 00:11:12,750
everything is tidy and we only have the

215
00:11:12,750 --> 00:11:16,950
latest content in our cash here then

216
00:11:16,950 --> 00:11:19,410
finally after the activation was

217
00:11:19,410 --> 00:11:22,170
successful the service workers start

218
00:11:22,170 --> 00:11:25,200
intercepting event requests and every

219
00:11:25,200 --> 00:11:27,020
time a request is made in our web app

220
00:11:27,020 --> 00:11:29,910
this car baganda fetch event is called

221
00:11:29,910 --> 00:11:32,640
and there we have a respond with method

222
00:11:32,640 --> 00:11:36,200
on our event object which expects a

223
00:11:36,200 --> 00:11:40,380
expected promise which then gets the

224
00:11:40,380 --> 00:11:42,270
contents that are served to the web app

225
00:11:42,270 --> 00:11:46,680
and as I only have static assets in my

226
00:11:46,680 --> 00:11:49,830
cash at the moment I immediately hit the

227
00:11:49,830 --> 00:11:51,570
cash I don't have to go to the network

228
00:11:51,570 --> 00:11:54,690
because I know what is needed actually

229
00:11:54,690 --> 00:11:59,520
there are no requests planned so I look

230
00:11:59,520 --> 00:12:02,340
up with the match method on the cash and

231
00:12:02,340 --> 00:12:05,640
if there's a response I return this and

232
00:12:05,640 --> 00:12:09,140
if there is no fire or no resource found

233
00:12:09,140 --> 00:12:11,760
then the response is undefined and then

234
00:12:11,760 --> 00:12:14,070
I forward to request and to the network

235
00:12:14,070 --> 00:12:21,240
with the fatty function and yeah that's

236
00:12:21,240 --> 00:12:23,670
the basic usage of the service worker

237
00:12:23,670 --> 00:12:26,850
actually what we've seen so far is like

238
00:12:26,850 --> 00:12:31,230
a usage and there is quite similar to

239
00:12:31,230 --> 00:12:33,390
the app cache we have static files I'm

240
00:12:33,390 --> 00:12:37,560
defined before before deployment of our

241
00:12:37,560 --> 00:12:40,260
web app but it all happens with less

242
00:12:40,260 --> 00:12:43,500
pain and more control and hopefully more

243
00:12:43,500 --> 00:12:48,390
security will but what is more

244
00:12:48,390 --> 00:12:49,660
interesting with service work

245
00:12:49,660 --> 00:12:56,770
the caching of dynamic content so let's

246
00:12:56,770 --> 00:13:00,610
go on and look how to do this there are

247
00:13:00,610 --> 00:13:02,830
basically two strategies when it comes

248
00:13:02,830 --> 00:13:06,040
to us dynamic contents requested during

249
00:13:06,040 --> 00:13:08,350
the run time and the first one is

250
00:13:08,350 --> 00:13:13,390
network first so you immediately forward

251
00:13:13,390 --> 00:13:16,000
the request to the network and if it

252
00:13:16,000 --> 00:13:17,860
fails you look up in the cache if you

253
00:13:17,860 --> 00:13:20,830
have an old version and if it succeeds

254
00:13:20,830 --> 00:13:24,310
you update the cache and you serve the

255
00:13:24,310 --> 00:13:28,480
response to the web app yeah this code

256
00:13:28,480 --> 00:13:30,910
is a bit a little bit just a little bit

257
00:13:30,910 --> 00:13:34,360
more code about this approach first of

258
00:13:34,360 --> 00:13:37,030
all we have another version for the

259
00:13:37,030 --> 00:13:38,770
dynamic contents so it doesn't interfere

260
00:13:38,770 --> 00:13:43,360
with our static assets and we

261
00:13:43,360 --> 00:13:46,990
immediately forward the request to the

262
00:13:46,990 --> 00:13:52,930
network and inside the decor back and

263
00:13:52,930 --> 00:13:55,450
the Dan then method and we open our cash

264
00:13:55,450 --> 00:14:00,040
with our current version and update the

265
00:14:00,040 --> 00:14:02,500
cache that matches the requested

266
00:14:02,500 --> 00:14:07,120
resource and we have this funny thing

267
00:14:07,120 --> 00:14:10,870
here we have to clone the response so

268
00:14:10,870 --> 00:14:14,950
responses response objects when they are

269
00:14:14,950 --> 00:14:17,560
used once they're used up and gun so you

270
00:14:17,560 --> 00:14:21,040
can't use the poor response for the cash

271
00:14:21,040 --> 00:14:24,670
and for returning it to the web app we

272
00:14:24,670 --> 00:14:26,320
have to clone it so the cash gets a

273
00:14:26,320 --> 00:14:29,050
clone and the original one gets served

274
00:14:29,050 --> 00:14:33,040
to the web app and finally if this fails

275
00:14:33,040 --> 00:14:35,680
we just look up in the cache if we have

276
00:14:35,680 --> 00:14:39,370
an old version to serve what we see here

277
00:14:39,370 --> 00:14:43,420
is that we don't have to care about the

278
00:14:43,420 --> 00:14:46,570
online status of the user there's this

279
00:14:46,570 --> 00:14:49,870
online property on the navigator object

280
00:14:49,870 --> 00:14:52,180
which tells us if the users online or

281
00:14:52,180 --> 00:14:55,990
not but it isn't reliable so if users

282
00:14:55,990 --> 00:14:58,300
are on shitty mobile connections which

283
00:14:58,300 --> 00:15:01,240
leads to time outs or if they are on an

284
00:15:01,240 --> 00:15:03,480
airport and don't want to pay for

285
00:15:03,480 --> 00:15:06,060
the Wi-Fi this property you will tell us

286
00:15:06,060 --> 00:15:08,100
we are the users online but actually

287
00:15:08,100 --> 00:15:11,220
they aren't and with the service worker

288
00:15:11,220 --> 00:15:14,100
of this approach to hit the network and

289
00:15:14,100 --> 00:15:15,690
then look up in the cash we don't have

290
00:15:15,690 --> 00:15:18,620
to care about that just do our stuff and

291
00:15:18,620 --> 00:15:24,050
finally something will come to the user

292
00:15:24,050 --> 00:15:28,410
yeah when to use this approach this is

293
00:15:28,410 --> 00:15:31,740
good for for data that is updated very

294
00:15:31,740 --> 00:15:35,430
frequently like soccer data at the

295
00:15:35,430 --> 00:15:39,170
weekend so if you have a web app

296
00:15:39,170 --> 00:15:42,570
displaying soccer results you might not

297
00:15:42,570 --> 00:15:44,220
want to show the user the results from

298
00:15:44,220 --> 00:15:46,920
the last weekend but the act the current

299
00:15:46,920 --> 00:15:50,699
want to hit the network and if that

300
00:15:50,699 --> 00:15:53,100
fails yeah you have to go with all data

301
00:15:53,100 --> 00:15:56,699
and weather forecasts and stock market

302
00:15:56,699 --> 00:15:59,100
data are typical examples for this kind

303
00:15:59,100 --> 00:16:03,180
of contents here the other approach

304
00:16:03,180 --> 00:16:05,970
would be to go cash first so just look

305
00:16:05,970 --> 00:16:08,339
up in the cash and serve content really

306
00:16:08,339 --> 00:16:10,860
fast but also do a request to look if

307
00:16:10,860 --> 00:16:15,490
there's a new version of this resource

308
00:16:15,500 --> 00:16:18,120
the code is a little bit different I

309
00:16:18,120 --> 00:16:20,100
have this unavailable function i hope

310
00:16:20,100 --> 00:16:21,870
you can read this from behind actually

311
00:16:21,870 --> 00:16:26,610
this is okay no one said anything that's

312
00:16:26,610 --> 00:16:30,660
good yeah this is unavailable function

313
00:16:30,660 --> 00:16:32,940
which return to response with status are

314
00:16:32,940 --> 00:16:35,220
five or three this is our last resort

315
00:16:35,220 --> 00:16:38,220
but hopefully we'll get contents before

316
00:16:38,220 --> 00:16:41,339
so we immediately start hitting the cash

317
00:16:41,339 --> 00:16:43,949
and look for a resource that matches our

318
00:16:43,949 --> 00:16:47,970
request and at the end you can see we

319
00:16:47,970 --> 00:16:50,699
return this but we also do our request

320
00:16:50,699 --> 00:16:54,779
and again update the cache mr. the

321
00:16:54,779 --> 00:16:58,050
response of the request succeeds and if

322
00:16:58,050 --> 00:17:00,449
the result from the cache is undefined

323
00:17:00,449 --> 00:17:05,280
we will return our fetch promise and if

324
00:17:05,280 --> 00:17:08,459
this fails as well then yeah we have to

325
00:17:08,459 --> 00:17:10,230
take our unavailable function that

326
00:17:10,230 --> 00:17:13,290
returns to five or three so we can

327
00:17:13,290 --> 00:17:16,720
either return all the content fast

328
00:17:16,720 --> 00:17:18,990
or a newer content from the network or

329
00:17:18,990 --> 00:17:24,400
we fail gracefully with a 5 or 3 yeah

330
00:17:24,400 --> 00:17:28,780
this is a good strategy for for contents

331
00:17:28,780 --> 00:17:30,850
that aren't saw updated so frequently

332
00:17:30,850 --> 00:17:35,320
like rock pools and news articles there

333
00:17:35,320 --> 00:17:39,740
you can surf fast which is always good

334
00:17:39,750 --> 00:17:43,299
yeah I kind of lied to you when I said

335
00:17:43,299 --> 00:17:45,039
there are basically two strategies and

336
00:17:45,039 --> 00:17:48,400
there are more you might have contents

337
00:17:48,400 --> 00:17:50,110
where you don't want to serve old stuff

338
00:17:50,110 --> 00:17:52,840
and only hit the network and don't

339
00:17:52,840 --> 00:17:54,909
deserve anything at all if the users not

340
00:17:54,909 --> 00:17:58,659
online you may also have contents where

341
00:17:58,659 --> 00:18:00,820
you only have to hit the cash remember

342
00:18:00,820 --> 00:18:02,860
the first example where I defined the

343
00:18:02,860 --> 00:18:05,980
static assets I can be pretty sure that

344
00:18:05,980 --> 00:18:08,679
they are installed every time the web

345
00:18:08,679 --> 00:18:11,200
app is loaded and the service workers

346
00:18:11,200 --> 00:18:13,750
installed so actually you don't have to

347
00:18:13,750 --> 00:18:16,150
talk about anything and to the network I

348
00:18:16,150 --> 00:18:19,090
just can hit the cash and serve really

349
00:18:19,090 --> 00:18:21,220
fast and boost performance of my web app

350
00:18:21,220 --> 00:18:27,309
and asses fastest approach on some

351
00:18:27,309 --> 00:18:30,100
devices maybe take some time to to read

352
00:18:30,100 --> 00:18:33,549
from disk if the device is old and test

353
00:18:33,549 --> 00:18:37,480
a slow disk i/o operation and if you

354
00:18:37,480 --> 00:18:39,970
request a very small aesthetic asset it

355
00:18:39,970 --> 00:18:41,559
might be faster to get it from the

356
00:18:41,559 --> 00:18:44,860
network so you can start a race and make

357
00:18:44,860 --> 00:18:46,960
the request to the network and ask the

358
00:18:46,960 --> 00:18:50,200
cash and whoever's fastest allowed to

359
00:18:50,200 --> 00:18:56,710
self eventually so this was it yeah

360
00:18:56,710 --> 00:18:59,169
what's next there are some service

361
00:18:59,169 --> 00:19:02,950
worker related specifications for

362
00:19:02,950 --> 00:19:06,370
example they push API which enables you

363
00:19:06,370 --> 00:19:08,799
to annoy your users with push

364
00:19:08,799 --> 00:19:11,350
notifications and what's nice about

365
00:19:11,350 --> 00:19:14,559
service workers is that they they are

366
00:19:14,559 --> 00:19:16,480
running in a threat in the background so

367
00:19:16,480 --> 00:19:19,840
even if the web app is not active they

368
00:19:19,840 --> 00:19:21,610
can receive push notifications and you

369
00:19:21,610 --> 00:19:28,000
can handle them also and it does the

370
00:19:28,000 --> 00:19:30,050
interesting thing is the back

371
00:19:30,050 --> 00:19:35,030
think so the browser can store made

372
00:19:35,030 --> 00:19:37,040
requests like post requests that the

373
00:19:37,040 --> 00:19:39,850
user writes a message or something

374
00:19:39,850 --> 00:19:44,150
similar and if the user then is offline

375
00:19:44,150 --> 00:19:45,890
it's stored in the background and then

376
00:19:45,890 --> 00:19:54,830
zoomed when the user goes online yeah

377
00:19:54,830 --> 00:19:58,130
and finally give a fencing um it's a

378
00:19:58,130 --> 00:20:02,810
good way to react to the the kaiserin

379
00:20:02,810 --> 00:20:05,510
when the user enters or leaves a

380
00:20:05,510 --> 00:20:08,180
specific region you could do this with

381
00:20:08,180 --> 00:20:12,740
geolocation but here again we have this

382
00:20:12,740 --> 00:20:15,170
nice thing that the background the

383
00:20:15,170 --> 00:20:16,610
service worker is running in a

384
00:20:16,610 --> 00:20:19,790
background so the web app doesn't have

385
00:20:19,790 --> 00:20:24,490
to be active and you can react to this

386
00:20:24,490 --> 00:20:30,920
nonetheless yeah what's also next is I

387
00:20:30,920 --> 00:20:33,590
propose you learn more about service

388
00:20:33,590 --> 00:20:35,930
workers and I have a list of resources

389
00:20:35,930 --> 00:20:39,560
which I can recommend like a very good

390
00:20:39,560 --> 00:20:42,050
introduction to the topic on html5 rocks

391
00:20:42,050 --> 00:20:46,130
calm and if you are more into this topic

392
00:20:46,130 --> 00:20:48,080
this offline cookbook by Jake Archibald

393
00:20:48,080 --> 00:20:52,970
is covering some summer strategies to

394
00:20:52,970 --> 00:20:58,310
serve content and they are suspect was

395
00:20:58,310 --> 00:21:02,480
the UL service work ers this is a

396
00:21:02,480 --> 00:21:04,040
collection of some very interesting

397
00:21:04,040 --> 00:21:08,090
recipes it goes really deep into the

398
00:21:08,090 --> 00:21:11,780
topic and also nice is instant loading

399
00:21:11,780 --> 00:21:14,090
with service workers it's a video from a

400
00:21:14,090 --> 00:21:18,200
talk at Google i/o and it also covers

401
00:21:18,200 --> 00:21:20,390
tooling around service workers like

402
00:21:20,390 --> 00:21:22,490
having a guard task building a service

403
00:21:22,490 --> 00:21:24,470
worker including all the aesthetic

404
00:21:24,470 --> 00:21:28,880
assets and fresh version strings and he

405
00:21:28,880 --> 00:21:32,090
talks about the polymer component that

406
00:21:32,090 --> 00:21:35,570
handles service workers declaratively I

407
00:21:35,570 --> 00:21:38,060
recommend this even if you don't want to

408
00:21:38,060 --> 00:21:39,500
use this component but it's interesting

409
00:21:39,500 --> 00:21:42,800
to see how they solve problems coming up

410
00:21:42,800 --> 00:21:46,380
yeah and if you want to see what the

411
00:21:46,380 --> 00:21:48,060
browser supporters have a look at this

412
00:21:48,060 --> 00:21:51,210
website that's interesting to see how

413
00:21:51,210 --> 00:21:55,980
the things develop yeah and finally if

414
00:21:55,980 --> 00:21:58,950
you have your own web app boosted with

415
00:21:58,950 --> 00:22:00,720
service workers you might need a service

416
00:22:00,720 --> 00:22:05,910
with HTTPS I can recommend search dot as

417
00:22:05,910 --> 00:22:08,010
age I put my demos up there you get a

418
00:22:08,010 --> 00:22:12,390
subdomain and can force https or you

419
00:22:12,390 --> 00:22:14,580
want to use cloud sec for your get up

420
00:22:14,580 --> 00:22:18,470
pages with a custom domain or finally

421
00:22:18,470 --> 00:22:21,270
let's encrypt thought the latest

422
00:22:21,270 --> 00:22:24,960
solution for bringing https to the

423
00:22:24,960 --> 00:22:29,070
masses yeah that's finally it thanks for

424
00:22:29,070 --> 00:22:31,170
listening if you have questions then

