1
00:00:21,630 --> 00:00:25,260

you

2
00:00:25,270 --> 00:00:27,610
so I'm Richard this is Daniel and the

3
00:00:27,610 --> 00:00:28,960
wig we took out the circuit breaker

4
00:00:28,960 --> 00:00:31,330
pattern in JavaScript and it's the same

5
00:00:31,330 --> 00:00:32,349
before we probably could have done a

6
00:00:32,349 --> 00:00:33,700
better job of titling this because

7
00:00:33,700 --> 00:00:35,350
unless you know what a circuit breaker

8
00:00:35,350 --> 00:00:37,150
pattern is you it might not be obvious

9
00:00:37,150 --> 00:00:39,460
but it's essentially a way to isolate

10
00:00:39,460 --> 00:00:41,830
communication between web services in a

11
00:00:41,830 --> 00:00:47,260
distributed system so go back a little

12
00:00:47,260 --> 00:00:47,769
way

13
00:00:47,769 --> 00:00:49,989
Yama's started as a pretty standard

14
00:00:49,989 --> 00:00:53,620
rails app but as we start to scale our

15
00:00:53,620 --> 00:00:55,210
project and add features we found that

16
00:00:55,210 --> 00:00:57,909
we hit skating problems pretty soon so

17
00:00:57,909 --> 00:00:59,049
he needs to rethink parts of our

18
00:00:59,049 --> 00:01:02,170
architecture we started by extracting

19
00:01:02,170 --> 00:01:03,940
messaging service called fede which we

20
00:01:03,940 --> 00:01:06,610
built on the JVM so one of the first

21
00:01:06,610 --> 00:01:08,890
game cross we hit was with our how he's

22
00:01:08,890 --> 00:01:11,110
storing messages we actually got to over

23
00:01:11,110 --> 00:01:13,420
a billion rows in Postgres in our

24
00:01:13,420 --> 00:01:15,670
message table so we clearly need to

25
00:01:15,670 --> 00:01:17,790
rethink how we did this and we

26
00:01:17,790 --> 00:01:20,590
implemented fede but to represent a

27
00:01:20,590 --> 00:01:22,930
scalable representation of conversations

28
00:01:22,930 --> 00:01:25,600
using just the message IDs and then the

29
00:01:25,600 --> 00:01:27,010
actual content of the messages was

30
00:01:27,010 --> 00:01:30,579
stored in rails still so whilst that

31
00:01:30,579 --> 00:01:32,829
didn't change things that much moving

32
00:01:32,829 --> 00:01:34,630
this stuff out into a separate service

33
00:01:34,630 --> 00:01:36,909
and a separate data store allow us to

34
00:01:36,909 --> 00:01:38,350
dramatically reduce the load on our

35
00:01:38,350 --> 00:01:40,030
rails app and also reduce the amount of

36
00:01:40,030 --> 00:01:41,740
stuff we need to store in our Postgres

37
00:01:41,740 --> 00:01:45,810
database so fitti worked really well and

38
00:01:45,810 --> 00:01:49,390
as we have continued to scale our system

39
00:01:49,390 --> 00:01:51,909
and add new features we've essentially

40
00:01:51,909 --> 00:01:53,829
fought that same approach so we now have

41
00:01:53,829 --> 00:01:57,340
over 20 services say things like farvel

42
00:01:57,340 --> 00:01:59,920
which is our upload service mug shot

43
00:01:59,920 --> 00:02:03,390
which resizes images paddy which is a

44
00:02:03,390 --> 00:02:07,719
like collaborative editor thing and this

45
00:02:07,719 --> 00:02:09,039
is provide us with quite a few benefits

46
00:02:09,039 --> 00:02:11,530
so the most obvious one probably is

47
00:02:11,530 --> 00:02:13,300
being able to horizontally scale each

48
00:02:13,300 --> 00:02:15,400
service independently so we need to add

49
00:02:15,400 --> 00:02:17,680
capacity for fede we can do that really

50
00:02:17,680 --> 00:02:19,960
easily without increasing capacity over

51
00:02:19,960 --> 00:02:22,480
the whole system it's also nice to

52
00:02:22,480 --> 00:02:25,330
separate concerns so understanding what

53
00:02:25,330 --> 00:02:27,640
each service does is much easier as it's

54
00:02:27,640 --> 00:02:29,380
a separate code base then it would be if

55
00:02:29,380 --> 00:02:32,319
it was part of the like one massive

56
00:02:32,319 --> 00:02:35,350
repository and it's also much easier to

57
00:02:35,350 --> 00:02:37,060
deploy these things so if we make a

58
00:02:37,060 --> 00:02:38,690
change to mug shot we can

59
00:02:38,690 --> 00:02:40,910
deploy that one service without having

60
00:02:40,910 --> 00:02:42,500
to take the risk of deploying the entire

61
00:02:42,500 --> 00:02:47,330
system and finally it also improves the

62
00:02:47,330 --> 00:02:50,180
full torrents of Yama so if one service

63
00:02:50,180 --> 00:02:52,340
goes down ideally at least it shouldn't

64
00:02:52,340 --> 00:02:53,750
bring other things down with it it

65
00:02:53,750 --> 00:02:56,060
should be separated whereas if you have

66
00:02:56,060 --> 00:02:58,370
a single app then that's a single point

67
00:02:58,370 --> 00:02:59,990
of failure and if that goes down then

68
00:02:59,990 --> 00:03:01,790
there's not very much you can do by

69
00:03:01,790 --> 00:03:03,530
separating things out into different

70
00:03:03,530 --> 00:03:06,620
services it's allowed us to degrade

71
00:03:06,620 --> 00:03:11,060
gracefully when things go wrong so this

72
00:03:11,060 --> 00:03:12,890
is a little out of date actually but it

73
00:03:12,890 --> 00:03:14,000
gives you a rough idea of what our

74
00:03:14,000 --> 00:03:16,940
architecture looks like and it also show

75
00:03:16,940 --> 00:03:18,110
you some of the problems with this so

76
00:03:18,110 --> 00:03:21,740
whilst building things in a

77
00:03:21,740 --> 00:03:23,360
service-oriented ways give us a lot

78
00:03:23,360 --> 00:03:25,960
benefits it does it does definitely

79
00:03:25,960 --> 00:03:28,160
increase the complexity of the system as

80
00:03:28,160 --> 00:03:28,610
a whole

81
00:03:28,610 --> 00:03:30,350
so each service is easier to understand

82
00:03:30,350 --> 00:03:32,600
but that largely just pushes stuff out

83
00:03:32,600 --> 00:03:36,770
into complications with how things

84
00:03:36,770 --> 00:03:37,970
communicate with each other and how

85
00:03:37,970 --> 00:03:40,480
those services are coordinated

86
00:03:40,480 --> 00:03:43,160
maintaining API contracts is also much

87
00:03:43,160 --> 00:03:44,989
more difficult because you might make a

88
00:03:44,989 --> 00:03:47,270
change in one part of the system and it

89
00:03:47,270 --> 00:03:51,320
will have very big profound problems in

90
00:03:51,320 --> 00:03:52,250
other parts system that you weren't

91
00:03:52,250 --> 00:03:56,060
aware would would be affected and this

92
00:03:56,060 --> 00:03:57,980
also relates to debugging so when you

93
00:03:57,980 --> 00:04:00,620
get a bug reports tracing those symptoms

94
00:04:00,620 --> 00:04:02,270
back to the actual root cause is far

95
00:04:02,270 --> 00:04:04,040
more difficult because instead of it

96
00:04:04,040 --> 00:04:07,340
being due to a nicely isolated part of

97
00:04:07,340 --> 00:04:09,380
the system is usually a result of lots

98
00:04:09,380 --> 00:04:11,150
of things interacting together and

99
00:04:11,150 --> 00:04:13,430
causing a problem and then finally

100
00:04:13,430 --> 00:04:16,310
handling failing dependencies really

101
00:04:16,310 --> 00:04:18,410
needs to be thought of upfront so the

102
00:04:18,410 --> 00:04:19,880
fault tolerance I mentioned on the

103
00:04:19,880 --> 00:04:21,680
previous slide doesn't really come for

104
00:04:21,680 --> 00:04:23,060
free you've got to think about how to

105
00:04:23,060 --> 00:04:26,030
handle the dependencies of each service

106
00:04:26,030 --> 00:04:28,220
when they go down because if you don't

107
00:04:28,220 --> 00:04:30,140
that will also bring your own service

108
00:04:30,140 --> 00:04:32,060
down and they'll potentially cascade to

109
00:04:32,060 --> 00:04:35,180
the rest of the system so to look at

110
00:04:35,180 --> 00:04:36,260
this in a bit more detail we're going to

111
00:04:36,260 --> 00:04:38,300
take a look at our completely service

112
00:04:38,300 --> 00:04:40,400
which is our web service for providing

113
00:04:40,400 --> 00:04:43,580
autocomplete results so if you pass the

114
00:04:43,580 --> 00:04:46,310
name Bob it would turn all of the Bob's

115
00:04:46,310 --> 00:04:49,090
in your network but on a large network

116
00:04:49,090 --> 00:04:51,380
that could be hundreds of names and we

117
00:04:51,380 --> 00:04:52,280
don't want a force I use

118
00:04:52,280 --> 00:04:56,330
to search through that list so we use

119
00:04:56,330 --> 00:04:57,920
another service called pranky which rec

120
00:04:57,920 --> 00:05:00,950
which ranks things in relation to you so

121
00:05:00,950 --> 00:05:05,000
completely uses this to sort its list

122
00:05:05,000 --> 00:05:06,800
based on how likely you are to want to

123
00:05:06,800 --> 00:05:08,540
come to that person and then passes back

124
00:05:08,540 --> 00:05:10,669
the most ten or like ten or twenty most

125
00:05:10,669 --> 00:05:14,660
relevant users but with this pattern if

126
00:05:14,660 --> 00:05:17,240
Frankie goes down then if we don't think

127
00:05:17,240 --> 00:05:18,560
about this at all and that's also going

128
00:05:18,560 --> 00:05:21,290
to bring down completing if it fails

129
00:05:21,290 --> 00:05:23,300
quickly with a 500 error we can at least

130
00:05:23,300 --> 00:05:25,190
handle the error normally and continue

131
00:05:25,190 --> 00:05:26,440
on

132
00:05:26,440 --> 00:05:29,120
but if prank is just unavailable then

133
00:05:29,120 --> 00:05:31,190
the request is lighters timeout which

134
00:05:31,190 --> 00:05:32,210
means we'll have to wait for that to

135
00:05:32,210 --> 00:05:33,410
complete before we can pass any

136
00:05:33,410 --> 00:05:36,650
information back to the user and we also

137
00:05:36,650 --> 00:05:38,120
need to do this every time so every time

138
00:05:38,120 --> 00:05:39,890
complete it makes a request to Frankie

139
00:05:39,890 --> 00:05:42,020
even if we know that's likely to timeout

140
00:05:42,020 --> 00:05:44,120
we still need to make that call and wait

141
00:05:44,120 --> 00:05:45,860
for it to fail before we can actually

142
00:05:45,860 --> 00:05:49,160
continue and worse than that if anything

143
00:05:49,160 --> 00:05:50,900
actually relies on completely then this

144
00:05:50,900 --> 00:05:53,090
latency could cause failures which then

145
00:05:53,090 --> 00:05:54,500
start to cascade through the rest of the

146
00:05:54,500 --> 00:05:57,320
system so one way of dealing with this

147
00:05:57,320 --> 00:05:59,570
is the circuit breaker pattern circuit

148
00:05:59,570 --> 00:06:02,720
breaker pattern monsters requests being

149
00:06:02,720 --> 00:06:04,580
made between services and records any

150
00:06:04,580 --> 00:06:06,680
errors that are thrown and if enough

151
00:06:06,680 --> 00:06:08,330
errors a throne to go over a specified

152
00:06:08,330 --> 00:06:11,330
error threshold then the circuit breaker

153
00:06:11,330 --> 00:06:13,370
is broken at that point or requests a

154
00:06:13,370 --> 00:06:14,690
short-circuit didn't don't actually get

155
00:06:14,690 --> 00:06:17,860
passed on to the service we then allow

156
00:06:17,860 --> 00:06:20,660
periodic retries to test the current

157
00:06:20,660 --> 00:06:22,729
health of the system so we don't want to

158
00:06:22,729 --> 00:06:25,580
permanently disable a feature for

159
00:06:25,580 --> 00:06:29,150
example so in our example the circuit

160
00:06:29,150 --> 00:06:30,860
breaker was sit between completing and

161
00:06:30,860 --> 00:06:33,530
pranking and as long as these requests

162
00:06:33,530 --> 00:06:35,150
are successful they'll just get passed

163
00:06:35,150 --> 00:06:38,000
through you as normal but if Frankie

164
00:06:38,000 --> 00:06:41,479
goes down then it will let a few more

165
00:06:41,479 --> 00:06:42,500
requests through but it will record

166
00:06:42,500 --> 00:06:44,000
those as errors and once enough errors

167
00:06:44,000 --> 00:06:46,250
have come through it will go over the

168
00:06:46,250 --> 00:06:47,600
error threshold and it will open the

169
00:06:47,600 --> 00:06:50,930
circuit breaker so at that point it will

170
00:06:50,930 --> 00:06:53,450
short-circuit the requests and they

171
00:06:53,450 --> 00:06:55,100
won't actually get passed on to Frankie

172
00:06:55,100 --> 00:06:57,470
this allows completed to fail fast and

173
00:06:57,470 --> 00:07:00,260
not wait for timeouts to occur and you

174
00:07:00,260 --> 00:07:02,150
can actually then specify fallback which

175
00:07:02,150 --> 00:07:03,289
will happen in that case

176
00:07:03,289 --> 00:07:05,660
so in completely sense it will

177
00:07:05,660 --> 00:07:08,729
just return the unsorted list of results

178
00:07:08,729 --> 00:07:10,110
which obviously isn't as good as

179
00:07:10,110 --> 00:07:12,389
returning more relevant results but at

180
00:07:12,389 --> 00:07:14,190
least means that our application can

181
00:07:14,190 --> 00:07:16,259
continue to function in some way when

182
00:07:16,259 --> 00:07:18,139
there's a failure in part of our system

183
00:07:18,139 --> 00:07:20,430
it'll just have some other benefits they

184
00:07:20,430 --> 00:07:22,650
burst and they were handling in that you

185
00:07:22,650 --> 00:07:24,600
can report when a circuit breaker is

186
00:07:24,600 --> 00:07:26,370
opened and then logs out somewhere so

187
00:07:26,370 --> 00:07:28,289
you can get idea of when your system is

188
00:07:28,289 --> 00:07:30,870
facing problems and it also prevents you

189
00:07:30,870 --> 00:07:32,340
from hammering the same service when

190
00:07:32,340 --> 00:07:34,110
it's already down which will make it far

191
00:07:34,110 --> 00:07:35,699
more difficult to recover when there is

192
00:07:35,699 --> 00:07:39,060
a problem so we use hysterics on our

193
00:07:39,060 --> 00:07:40,889
back-end services which is a Java

194
00:07:40,889 --> 00:07:43,680
library built by Netflix there's a few

195
00:07:43,680 --> 00:07:44,940
really good blog post about how its work

196
00:07:44,940 --> 00:07:47,699
and the documentation is really great so

197
00:07:47,699 --> 00:07:50,910
it's free easy to see what it's doing it

198
00:07:50,910 --> 00:07:52,830
also has a sister project which provides

199
00:07:52,830 --> 00:07:54,510
the real-time dashboards so this will

200
00:07:54,510 --> 00:07:57,840
log when any circuit breakers are opened

201
00:07:57,840 --> 00:07:59,760
and you can see that here and monitor

202
00:07:59,760 --> 00:08:00,570
any problems you might have with your

203
00:08:00,570 --> 00:08:04,560
application but we like client side

204
00:08:04,560 --> 00:08:07,710
calls in our application in our example

205
00:08:07,710 --> 00:08:10,440
sorry the completed services in yet ever

206
00:08:10,440 --> 00:08:12,690
called from the browser and if

207
00:08:12,690 --> 00:08:14,729
completely goes down then we're going to

208
00:08:14,729 --> 00:08:15,660
face the same kind of problems that you

209
00:08:15,660 --> 00:08:17,400
would did when Frankie went down we'll

210
00:08:17,400 --> 00:08:19,680
have timeouts delaying user interaction

211
00:08:19,680 --> 00:08:21,060
and we won't actually know that

212
00:08:21,060 --> 00:08:22,590
completey has gone down potentially if

213
00:08:22,590 --> 00:08:25,169
it's in a recoverable State so we really

214
00:08:25,169 --> 00:08:26,880
need something to sit between browser

215
00:08:26,880 --> 00:08:28,860
requests and completing to monitor

216
00:08:28,860 --> 00:08:31,530
request going through recalls any errors

217
00:08:31,530 --> 00:08:34,409
that happen and then deal with that case

218
00:08:34,409 --> 00:08:37,200
when it does so we've essentially

219
00:08:37,200 --> 00:08:39,150
implemented hysterics in the browser or

220
00:08:39,150 --> 00:08:41,250
at least a simplified version of it and

221
00:08:41,250 --> 00:08:43,950
release that github so Daniels going to

222
00:08:43,950 --> 00:08:45,720
talk a bit more about the specifics of

223
00:08:45,720 --> 00:08:49,890
that right so our implementation is

224
00:08:49,890 --> 00:08:52,080
pretty similar to what hystrix is doing

225
00:08:52,080 --> 00:08:54,750
in the Java side of things what we do is

226
00:08:54,750 --> 00:08:57,089
we keep track of the results of every

227
00:08:57,089 --> 00:08:59,190
command that gets executed through the

228
00:08:59,190 --> 00:09:01,290
circuit breaker so we know the number of

229
00:09:01,290 --> 00:09:04,709
successes failures timeouts and short

230
00:09:04,709 --> 00:09:06,839
circuits which are commands that failed

231
00:09:06,839 --> 00:09:10,350
because the circuit was open and we only

232
00:09:10,350 --> 00:09:12,060
keep track of these results for a

233
00:09:12,060 --> 00:09:14,310
certain amount of time which we call the

234
00:09:14,310 --> 00:09:16,410
window which in our example is 10

235
00:09:16,410 --> 00:09:19,260
seconds we divided the window into

236
00:09:19,260 --> 00:09:21,600
buckets in this case into ten buckets so

237
00:09:21,600 --> 00:09:24,660
we have each bucket containing one

238
00:09:24,660 --> 00:09:29,010
second of command executions what

239
00:09:29,010 --> 00:09:31,650
happens is that every second an old

240
00:09:31,650 --> 00:09:34,800
bucket rolls off the window and the new

241
00:09:34,800 --> 00:09:38,040
bucket rolls in so we're only keeping

242
00:09:38,040 --> 00:09:39,900
track of the last 10 seconds of

243
00:09:39,900 --> 00:09:43,890
executions the values in these buckets

244
00:09:43,890 --> 00:09:46,890
determine if the circuit breaker is open

245
00:09:46,890 --> 00:09:49,590
or closed so what we do is after every

246
00:09:49,590 --> 00:09:52,080
command we calculate the percentage of

247
00:09:52,080 --> 00:09:54,290
failed requests so we sum up the

248
00:09:54,290 --> 00:09:56,790
failures and timeouts and divide it by

249
00:09:56,790 --> 00:09:59,790
the total number of executions and that

250
00:09:59,790 --> 00:10:01,770
gives us the error percentage if the

251
00:10:01,770 --> 00:10:04,080
error percentage is under a certain

252
00:10:04,080 --> 00:10:07,350
threshold which may be 50% so if the

253
00:10:07,350 --> 00:10:11,310
error percentage is under 50% then we

254
00:10:11,310 --> 00:10:13,500
let the circuit breaker closed and

255
00:10:13,500 --> 00:10:16,710
commands execute normally but if the

256
00:10:16,710 --> 00:10:18,750
error percentage is over the threshold

257
00:10:18,750 --> 00:10:20,910
then the circuit breaker will open and

258
00:10:20,910 --> 00:10:23,490
any commands that come after this one

259
00:10:23,490 --> 00:10:28,080
will fail instantly but the service may

260
00:10:28,080 --> 00:10:30,750
recover at some point so every once in a

261
00:10:30,750 --> 00:10:33,750
while we have to check the status of the

262
00:10:33,750 --> 00:10:37,230
service somehow what we do is after the

263
00:10:37,230 --> 00:10:40,020
circuit breaker has opened we let we

264
00:10:40,020 --> 00:10:43,110
wait for one full window so in our

265
00:10:43,110 --> 00:10:45,570
example that was 10 seconds so we wait

266
00:10:45,570 --> 00:10:48,300
for 10 seconds and then we let a single

267
00:10:48,300 --> 00:10:51,270
command execute if the service is still

268
00:10:51,270 --> 00:10:53,850
down and the command fails then the

269
00:10:53,850 --> 00:10:56,670
circuit breaker will remain open but if

270
00:10:56,670 --> 00:11:00,240
the service has recovered and the

271
00:11:00,240 --> 00:11:03,510
command executed successfully then the

272
00:11:03,510 --> 00:11:05,310
circuit breaker will become closed and

273
00:11:05,310 --> 00:11:07,080
any commands that come after this one

274
00:11:07,080 --> 00:11:11,970
will execute normally the API is really

275
00:11:11,970 --> 00:11:12,600
straightforward

276
00:11:12,600 --> 00:11:15,360
so you just instantiate a new circuit

277
00:11:15,360 --> 00:11:17,580
breaker for your service here we have

278
00:11:17,580 --> 00:11:20,670
completely breaker and we pass the

279
00:11:20,670 --> 00:11:23,100
necessary configuration so here we're

280
00:11:23,100 --> 00:11:25,440
saying that the length of the window is

281
00:11:25,440 --> 00:11:28,410
10 seconds we're dividing that window

282
00:11:28,410 --> 00:11:30,810
into 10 buckets we're also saying that

283
00:11:30,810 --> 00:11:32,819
the timeout duration is 3

284
00:11:32,819 --> 00:11:34,589
seconds which I'll explain in the next

285
00:11:34,589 --> 00:11:37,439
slide we're also setting the error

286
00:11:37,439 --> 00:11:40,199
threshold to 50% so when we calculate

287
00:11:40,199 --> 00:11:42,600
the error percentage for a window if

288
00:11:42,600 --> 00:11:44,579
it's over this threshold then the

289
00:11:44,579 --> 00:11:47,100
circuit breaker will open and we're also

290
00:11:47,100 --> 00:11:50,160
setting a volume threshold which is the

291
00:11:50,160 --> 00:11:52,169
minimum number of commands that have to

292
00:11:52,169 --> 00:11:54,299
execute before we start calculating

293
00:11:54,299 --> 00:11:57,019
stats and why is this even necessary

294
00:11:57,019 --> 00:12:00,419
well imagine if you instantiate a new

295
00:12:00,419 --> 00:12:02,549
circuit breaker and the first command

296
00:12:02,549 --> 00:12:05,220
that you execute happens to fail then

297
00:12:05,220 --> 00:12:06,359
you would have a one hundred percent

298
00:12:06,359 --> 00:12:09,029
error rate and the circuit breaker would

299
00:12:09,029 --> 00:12:10,919
open immediately so you want to avoid

300
00:12:10,919 --> 00:12:13,139
that situation and that's why we have

301
00:12:13,139 --> 00:12:16,229
the volume threshold we wait for in this

302
00:12:16,229 --> 00:12:18,299
example five commands to execute and

303
00:12:18,299 --> 00:12:24,689
then we start calculating the stats so

304
00:12:24,689 --> 00:12:27,029
now we have our circuit breaker and we

305
00:12:27,029 --> 00:12:28,709
want to run commands through it a

306
00:12:28,709 --> 00:12:30,839
command is just a function which

307
00:12:30,839 --> 00:12:32,549
receives a success and a failure

308
00:12:32,549 --> 00:12:35,999
callback and you can do whatever you

309
00:12:35,999 --> 00:12:38,399
need to do inside that function and then

310
00:12:38,399 --> 00:12:40,079
you just need to notify the circuit

311
00:12:40,079 --> 00:12:42,509
breaker of the result so here we're

312
00:12:42,509 --> 00:12:45,089
calling completely results which is

313
00:12:45,089 --> 00:12:47,100
probably making an ajax request

314
00:12:47,100 --> 00:12:49,409
if the request is successful we call the

315
00:12:49,409 --> 00:12:51,359
success callback if it fails we call the

316
00:12:51,359 --> 00:12:54,659
failure callback and this is where the

317
00:12:54,659 --> 00:12:57,959
timeout comes into play if neither the

318
00:12:57,959 --> 00:12:59,879
success nor the failure callbacks are

319
00:12:59,879 --> 00:13:02,549
called after three seconds then we flag

320
00:13:02,549 --> 00:13:06,299
this command as a timeout so we have our

321
00:13:06,299 --> 00:13:08,249
command to run it through the circuit

322
00:13:08,249 --> 00:13:10,259
breaker we just call breaker that run

323
00:13:10,259 --> 00:13:13,470
and we pass the command we can also pass

324
00:13:13,470 --> 00:13:15,389
an optional second parameter which is

325
00:13:15,389 --> 00:13:17,970
the fallback which only gets executed if

326
00:13:17,970 --> 00:13:20,609
the circuit breaker is open so if the

327
00:13:20,609 --> 00:13:23,279
circuit has broken it keeps the command

328
00:13:23,279 --> 00:13:25,199
execution and invokes the fallback

329
00:13:25,199 --> 00:13:27,779
directly in the fallback you can call

330
00:13:27,779 --> 00:13:30,449
some other service or maybe let the user

331
00:13:30,449 --> 00:13:34,229
know that the system is in a Down State

332
00:13:34,229 --> 00:13:37,709
and after the command has run we update

333
00:13:37,709 --> 00:13:41,909
the statistics and set the state of the

334
00:13:41,909 --> 00:13:44,069
circuit breaker to be open or closed and

335
00:13:44,069 --> 00:13:48,500
that's it really it's pretty simple

336
00:13:48,500 --> 00:13:53,310
all right so in summary circuit breakers

337
00:13:53,310 --> 00:13:54,690
allow you to fail fast when there's a

338
00:13:54,690 --> 00:13:56,910
problem and degrade gracefully to other

339
00:13:56,910 --> 00:13:59,910
solutions they can prevent failures

340
00:13:59,910 --> 00:14:01,260
cascading through your the rest of your

341
00:14:01,260 --> 00:14:02,760
system so you isolate points of

342
00:14:02,760 --> 00:14:05,820
communication to prevent problems going

343
00:14:05,820 --> 00:14:08,070
through to other services and they let

344
00:14:08,070 --> 00:14:09,960
you discover any problems early and

345
00:14:09,960 --> 00:14:11,550
allow you to more easily recover when

346
00:14:11,550 --> 00:14:15,060
they do happen and that's it so yeah

347
00:14:15,060 --> 00:14:23,460
give any questions or that trip pretty

348
00:14:23,460 --> 00:14:24,030
cool

349
00:14:24,030 --> 00:14:26,280
sitting beside Brian here and he had a

350
00:14:26,280 --> 00:14:29,160
question can you go back to that diagram

351
00:14:29,160 --> 00:14:41,140
of services that you have on your slides

352
00:14:41,150 --> 00:14:43,890
is nothing connected to Wario because

353
00:14:43,890 --> 00:14:46,730
he's a jerk

354
00:14:46,740 --> 00:14:49,830
what is why are you I think it's only

355
00:14:49,830 --> 00:14:52,680
accessed by the browser right let's say

356
00:14:52,680 --> 00:15:00,260
it doesn't appear never fails yeah

357
00:15:00,260 --> 00:15:03,210
already exists in the browser sounds

358
00:15:03,210 --> 00:15:03,890
about right

359
00:15:03,890 --> 00:15:07,710
any other questions oh we're five

360
00:15:07,710 --> 00:15:11,010
minutes late really no no we're breaking

361
00:15:11,010 --> 00:15:12,660
until four I think so we got a shitload

362
00:15:12,660 --> 00:15:14,700
of time I'm basically just eating time

363
00:15:14,700 --> 00:15:21,330
right now cool all right thanks guys

364
00:15:21,330 --> 00:15:32,410
we'll be back at 4:00

