1
00:00:09,540 --> 00:00:10,710
>> Am I on?

2
00:00:10,710 --> 00:00:11,710
Nice.

3
00:00:11,710 --> 00:00:12,710
Hi, everyone.

4
00:00:12,710 --> 00:00:15,110
I hope you're having a wonderful JSConf.

5
00:00:15,110 --> 00:00:21,890
I would like to introduce the lovely members
of the TC39 who are joining us today to answer

6
00:00:21,890 --> 00:00:24,160
questions.

7
00:00:24,160 --> 00:00:28,130
It would be great if you could each introduce
yourselves and mention who you're representing

8
00:00:28,130 --> 00:00:30,820
on the TC TC.

9
00:00:30,820 --> 00:00:33,540
>> I work on V8 at Google.

10
00:00:33,540 --> 00:00:37,980
>> I'm Aki, and I work at PayPal.

11
00:00:37,980 --> 00:00:41,310
I work for Google and one of the core contributors
to Babel.

12
00:00:41,310 --> 00:00:46,090
>> I'm Keith, and I work for GitHub.

13
00:00:46,090 --> 00:00:49,930
>> I work at Google.

14
00:00:49,930 --> 00:00:55,240
>> I'm Lynn Clark, I work at Mozilla.

15
00:00:55,240 --> 00:00:57,640
>> ... work at blood glucose berg.

16
00:00:57,640 --> 00:00:59,410
>> Also at Mozilla.

17
00:00:59,410 --> 00:01:07,680
>> I'm Leo, I work at Buku and ... .
>> Now, we've got a lot of really task people

18
00:01:07,680 --> 00:01:13,100
representing a diverse number of companies
and groups, but, in fact, there are more people

19
00:01:13,100 --> 00:01:14,100
here.

20
00:01:14,100 --> 00:01:15,100
They're among you.

21
00:01:15,100 --> 00:01:17,280
We have a number of TC39 members who are not
on stage.

22
00:01:17,280 --> 00:01:21,210
If they could stand up and wave hello?

23
00:01:21,210 --> 00:01:23,540
Yes.

24
00:01:23,540 --> 00:01:29,620
So be if we don't manage to get to your question,
please come and see us after this panel, and

25
00:01:29,620 --> 00:01:30,620
we would love to talk to you.

26
00:01:30,620 --> 00:01:35,060
We will be hanging around the community lounge
just behind the Google booth.

27
00:01:35,060 --> 00:01:36,680
Everyone knows where it is.

28
00:01:36,680 --> 00:01:40,710
Come and say hi.

29
00:01:40,710 --> 00:01:49,240
I'm going to start with a question that the
JSConf EU team had for us which is date.parse.

30
00:01:49,240 --> 00:01:55,150
They had an issue with the website in that
iOS wouldn't volume down to the right spot,

31
00:01:55,150 --> 00:01:57,920
and the question is: date.parse, who did it
wrong?

32
00:01:57,920 --> 00:01:59,670
V8 or Chrome?

33
00:01:59,670 --> 00:02:02,850
>> I can take that one.

34
00:02:02,850 --> 00:02:07,250
So I encourage everyone in the room to go
to their DevTools console after this talk

35
00:02:07,250 --> 00:02:10,929
and try out date.parse 1 octopus 2018.

36
00:02:10,929 --> 00:02:17,090
It works in Chrome, it works in JSC and Safari
and nowhere else.

37
00:02:17,090 --> 00:02:20,780
It turns out based on the spec, everyone is
right.

38
00:02:20,780 --> 00:02:24,090
There are certain date formats guaranteed
to work according to all browsers according

39
00:02:24,090 --> 00:02:32,769
to the spec at least, but when the format
is not matched, it's up to the implementation.

40
00:02:32,769 --> 00:02:39,149
Others still try to parse the date.

41
00:02:39,149 --> 00:02:40,840
>> Let's talk about what we are doing.

42
00:02:40,840 --> 00:02:47,379
Mathias gave us a great explanation about
what the spec is.

43
00:02:47,379 --> 00:02:52,819
It's not an implementation but it tells us
how to implement a JavaScript engine.

44
00:02:52,819 --> 00:03:02,799
Let's just talk about what the TC39 is, and
what the process is and how it works?

45
00:03:02,799 --> 00:03:04,129
>> No!

46
00:03:04,129 --> 00:03:05,459
[Laughter].

47
00:03:05,459 --> 00:03:14,830
>> I will start with a TC39 works and let
someone else explain the stages of the process.

48
00:03:14,830 --> 00:03:20,739
We are a committee of delegates who are representing
members in ... international.

49
00:03:20,739 --> 00:03:26,889
We get together every two months, and we usually
meet for three days.

50
00:03:26,889 --> 00:03:32,859
We discuss what proposals are up, we talk
about the impact of the language, we discuss

51
00:03:32,859 --> 00:03:40,669
what changes need to be made, and we operate
on consensus, which means that we all have

52
00:03:40,669 --> 00:03:45,579
to agree for something to move forward, which
is pretty unique in programming language standards.

53
00:03:45,579 --> 00:03:51,049
So, that's kind of like the basic gist of
what TC39 is and does.

54
00:03:51,049 --> 00:03:53,889
Does anybody else want to go through the proposal
process?

55
00:03:53,889 --> 00:03:57,980
>> Sure, there are four stages.

56
00:03:57,980 --> 00:04:03,090
Stage 0 is like a pseudo stage that is a proposal
exists.

57
00:04:03,090 --> 00:04:09,799
Stage 1 is that the committee has considered
that this is a problem space that we want

58
00:04:09,799 --> 00:04:13,089
to continue to explore, and find a solution
for.

59
00:04:13,089 --> 00:04:20,430
Stage 2 is that there is a draft specification,
so there is some spec text that identifies

60
00:04:20,430 --> 00:04:23,520
what the behaviour should be.

61
00:04:23,520 --> 00:04:30,090
Stage 3 says that there is — there should
be significant in the field implementations,

62
00:04:30,090 --> 00:04:34,760
in other words, some browsers or other engines
should have implemented this feature, and

63
00:04:34,760 --> 00:04:39,100
stage 4 means it's ready to land in the spec.

64
00:04:39,100 --> 00:04:47,200
Every year, we make a cut of the stage 4 features
that are — I think it's somewhere around

65
00:04:47,200 --> 00:05:01,990
March, and, by around June time, that's [sound
feed distorted] .

66
00:05:01,990 --> 00:05:12,340
>> I think it's important to mention that
the meetings happen every two maps, it happens

67
00:05:12,340 --> 00:05:20,070
where we discuss, like, — every to months,
consensus taking stuff, but actual conversation

68
00:05:20,070 --> 00:05:25,930
about how it should be written happens all
the time.

69
00:05:25,930 --> 00:05:31,430
This is not like every two months, we pick
up, "Two months ago, where did we leave off?"

70
00:05:31,430 --> 00:05:32,430
It's not.

71
00:05:32,430 --> 00:05:38,620
It's usually, the meetings that we have are
more like this is what has been happening

72
00:05:38,620 --> 00:05:42,460
on GitHub on the TC39 organisation for two
months.

73
00:05:42,460 --> 00:05:45,979
Let's decide on how to move forward.

74
00:05:45,979 --> 00:05:47,260
>> Great.

75
00:05:47,260 --> 00:05:51,970
We had a couple of community questions about
how the speccing process works.

76
00:05:51,970 --> 00:05:55,300
One person asked: is JavaScript evolving at
the right speed?

77
00:05:55,300 --> 00:06:01,340
Are you in features being sufficiently integrated
with other new and existing features?

78
00:06:01,340 --> 00:06:02,480
>> Yes.

79
00:06:02,480 --> 00:06:03,620
[Laughter].

80
00:06:03,620 --> 00:06:14,950
>> I think one proposal that might be a great
one to illustrate is is the clasp proposal.

81
00:06:14,950 --> 00:06:19,120
One person asked: what is going on with the
private method?

82
00:06:19,120 --> 00:06:23,300
We've got the hash sign which is used to express
private.

83
00:06:23,300 --> 00:06:25,000
Most use the private key word.

84
00:06:25,000 --> 00:06:28,630
How did we come up to the paint that we're
using the hash sign?

85
00:06:28,630 --> 00:06:36,300
>> There is private access which allows you
to get the private property off an object.

86
00:06:36,300 --> 00:06:38,640
There is the private declaration.

87
00:06:38,640 --> 00:06:42,890
The reason we came upon this decision is because
every other language that has private is also

88
00:06:42,890 --> 00:06:44,320
statically typed.

89
00:06:44,320 --> 00:06:50,260
You can figure out exactly what the property
is based on the object it is being called

90
00:06:50,260 --> 00:06:51,260
on.

91
00:06:51,260 --> 00:06:52,730
For JavaScript, we don't have that.

92
00:06:52,730 --> 00:06:55,000
There's no way of knowing what the object
is.

93
00:06:55,000 --> 00:07:01,260
Whether it's supposed to be a private or public
property, based on the base reference, that

94
00:07:01,260 --> 00:07:05,180
this dot object dot whatever.

95
00:07:05,180 --> 00:07:10,600
So we have to have a different sidual to distinguish
between private and property access.

96
00:07:10,600 --> 00:07:17,911
That's how we came on the dot hash, whatever
the name is, to access the properties.

97
00:07:17,911 --> 00:07:25,450
To mirror access, we decided that the declaration
should also include the hash symbol.

98
00:07:25,450 --> 00:07:32,420
It makes it clear up front that this is the
part of the name that the way that you access

99
00:07:32,420 --> 00:07:35,440
it is that you pretend that the hash is part
of the name.

100
00:07:35,440 --> 00:07:37,870
So, if it is hash pro.

101
00:07:37,870 --> 00:07:41,640
You access it by this hash prop.

102
00:07:41,640 --> 00:07:49,160
You think of it that the hash is the name,
not the signatures, the private modifier key,

103
00:07:49,160 --> 00:07:50,800
or anything else.

104
00:07:50,800 --> 00:07:52,030
>> Nice.

105
00:07:52,030 --> 00:07:57,200
The private class field was being proposed
as a single proposal.

106
00:07:57,200 --> 00:08:00,740
However, there were several other class-related
proposals that were being proposed at the

107
00:08:00,740 --> 00:08:03,280
same time such as public fields.

108
00:08:03,280 --> 00:08:07,460
How was the communication across those proposals?

109
00:08:07,460 --> 00:08:11,560
>> We do a lot of work to make sure these
two features are synchronised.

110
00:08:11,560 --> 00:08:17,870
We actually split them and then merged them,
and split them again between public and private,

111
00:08:17,870 --> 00:08:20,330
and instant, and static properties.

112
00:08:20,330 --> 00:08:26,280
Just trying to figure out all of the different
issues that could have happened with either

113
00:08:26,280 --> 00:08:27,280
of them.

114
00:08:27,280 --> 00:08:32,750
Then once we settled upon the semantics that
we were happy with, we merged them all again.

115
00:08:32,750 --> 00:08:34,169
>> Awesome.

116
00:08:34,169 --> 00:08:38,459
I think a natural question that would follow
this, is we've got this hash symbol now, this

117
00:08:38,459 --> 00:08:43,669
could be confusing to newcomers, and another
person has asked us over Twitter: with these

118
00:08:43,669 --> 00:08:48,269
new operators and features being added to
JavaScript, are we at risk of becoming too

119
00:08:48,269 --> 00:08:51,480
cryptic syntax-wise for new developers.

120
00:08:51,480 --> 00:08:56,829
I'm very much in favour of them but web development
it being approachable is a big boon.

121
00:08:56,829 --> 00:09:02,809
>> I guess you could say, it's something that
comes up in the meetings.

122
00:09:02,809 --> 00:09:07,470
It's referred to as the syntax budget, is
a there is only so much syntax you can add

123
00:09:07,470 --> 00:09:12,070
to a language before it becomes ASCII gibberish.

124
00:09:12,070 --> 00:09:18,660
So it is very much a concern, and everybody
pays a lot of attention to it, and we try

125
00:09:18,660 --> 00:09:22,180
to make all of these proposals fit together
as a whole.

126
00:09:22,180 --> 00:09:27,760
>> This is why syntax proposals are different
from new API methods, like array proto-phenotype

127
00:09:27,760 --> 00:09:33,559
or something like — prototype, or you caning
loo up to how to call a method on an array.

128
00:09:33,559 --> 00:09:39,620
When there is a new somebody tax, that produces
a burden on the developers to recognise the

129
00:09:39,620 --> 00:09:42,209
new syntax and its meanings.

130
00:09:42,209 --> 00:09:48,070
Syntax is more complicated to learn as a newcomer
than it is to call another method.

131
00:09:48,070 --> 00:09:52,819
>> Maybe this is also a good point for another
note on the process.

132
00:09:52,819 --> 00:09:58,639
One thing we are trying as a middle ground
between design by committee, either achieving

133
00:09:58,639 --> 00:10:06,350
nothing, because in constant deadlock, or
I get my feature in, and you get yours, we

134
00:10:06,350 --> 00:10:12,709
get this explosion of features that nobody
really needs, we have the so-called champions'

135
00:10:12,709 --> 00:10:13,709
model.

136
00:10:13,709 --> 00:10:21,680
Our proposals have one or more champions who
work on really developing the feature, and

137
00:10:21,680 --> 00:10:28,410
present it to the committee, and by and large,
the committee overall does not do the design.

138
00:10:28,410 --> 00:10:35,230
It needs to achieve consensus, but it is not
like all everybody gets to chime in and say,

139
00:10:35,230 --> 00:10:40,869
"I want this tweak in, and this syntax should
be slightly different," and then I'm happy.

140
00:10:40,869 --> 00:10:49,850
In practice, that works out fairly well to
achieve a manageable complexity budget.

141
00:10:49,850 --> 00:10:54,089
>> Another question that is going around like
the general development of how JavaScript

142
00:10:54,089 --> 00:10:59,670
is designed is a question around what is JavaScript's
identity?

143
00:10:59,670 --> 00:11:06,069
Are we moving towards other non-strongly typed
project language, like object-orientated concepts

144
00:11:06,069 --> 00:11:10,620
like ES6 classes, or more functional?

145
00:11:10,620 --> 00:11:16,190
This is tied to where are we going as a goal
in JavaScript?

146
00:11:16,190 --> 00:11:21,399
What are we aiming for?

147
00:11:21,399 --> 00:11:28,959
>> I think — I believe JavaScript has a
very strong notation on all the behaviours

148
00:11:28,959 --> 00:11:35,920
it does around the types that are well defined
in JavaScript, but I think being a dynamic-type

149
00:11:35,920 --> 00:11:39,899
language, it is one of the highlights of JavaScript
itself.

150
00:11:39,899 --> 00:11:47,180
I don't see this thing happening for now;
I don't expect this to happen in TC39.

151
00:11:47,180 --> 00:11:53,470
I think it's a highlight, and we should consider
all the advantages from using a dynamic language,

152
00:11:53,470 --> 00:11:55,329
and a type language.

153
00:11:55,329 --> 00:12:01,089
Both are fine, but we're on the right place
here.

154
00:12:01,089 --> 00:12:06,879
>> I also think that this is just to some
extent a false distinction.

155
00:12:06,879 --> 00:12:15,790
More modern languages like Swift or Rust are
heavily influenced by both object orientation

156
00:12:15,790 --> 00:12:24,779
and functional design patterns, and you really
take the best of these worlds and make a well-designed

157
00:12:24,779 --> 00:12:25,779
overall languages.

158
00:12:25,779 --> 00:12:33,649
It allows people to express their logic in
ways where it makes sense instead of having

159
00:12:33,649 --> 00:12:39,979
to cram it into some notion of purity.

160
00:12:39,979 --> 00:12:45,800
>> So one of the — one topic that came up
a bit on Twitter was of course about types,

161
00:12:45,800 --> 00:12:50,260
but it was also about typescript, peer script,
and Babel.

162
00:12:50,260 --> 00:12:53,620
These are things that transpiled to JavaScript.

163
00:12:53,620 --> 00:12:59,999
So JavaScript isn't necessarily pure, but
do these other languages that adopt different

164
00:12:59,999 --> 00:13:04,779
paradigms than what JavaScript have, how much
does this influence our work on the language

165
00:13:04,779 --> 00:13:08,099
in general?

166
00:13:08,099 --> 00:13:10,930
>> I think it's great to have all of these
languages.

167
00:13:10,930 --> 00:13:19,679
Even if they are like targeting JavaScript,
I believe they allow the community to bring

168
00:13:19,679 --> 00:13:27,089
feed back as these languages allow, like sandboxing,
we can't do directly on JavaScript.

169
00:13:27,089 --> 00:13:28,999
We can play with these languages.

170
00:13:28,999 --> 00:13:35,110
We feature that we want, and we can make like
proof that they really are necessary if we

171
00:13:35,110 --> 00:13:37,369
want to bring this to JavaScript.

172
00:13:37,369 --> 00:13:44,990
From experience, there's a lot of nice interesting
features that we already have today in JavaScript,

173
00:13:44,990 --> 00:13:48,329
and I really appreciate that.

174
00:13:48,329 --> 00:13:55,240
>> Maybe, on one of the fields where there
is a lot of experimentation in compile to

175
00:13:55,240 --> 00:14:04,389
JS languages, that is types, there is obviously
typescript and Flow and other languages that

176
00:14:04,389 --> 00:14:14,029
add types to JavaScript or JavaScript-like
languages, and so the question comes up, "Why

177
00:14:14,029 --> 00:14:16,610
aren't we adding types to the language itself?"

178
00:14:16,610 --> 00:14:24,449
The reason is quite simply we don't believe
that anybody has come up with a design that

179
00:14:24,449 --> 00:14:30,759
works well enough for JavaScript and is really
universal enough that we are comfortable taking

180
00:14:30,759 --> 00:14:39,290
up the human being design space.

181
00:14:39,290 --> 00:14:45,959
This is a huge decision, and so it is fantastic
that we have this ecosystem of compile to

182
00:14:45,959 --> 00:14:54,970
JS languages that can do the experimentation
they want and scheme can decide to — and

183
00:14:54,970 --> 00:15:02,080
hopefully, eventually, we will converge on
a design where we feel like yes, this really

184
00:15:02,080 --> 00:15:03,490
fits the language.

185
00:15:03,490 --> 00:15:07,939
This is what we should add to the standard
itself.

186
00:15:07,939 --> 00:15:12,889
>> And we have — we also have some people
who are working within the Wasm community

187
00:15:12,889 --> 00:15:13,889
group.

188
00:15:13,889 --> 00:15:17,819
It would be great to hear about what is the
relationship about JavaScript and WASM as

189
00:15:17,819 --> 00:15:19,310
compile targets?

190
00:15:19,310 --> 00:15:26,110
>> We were talking about the explosion of
features in JavaScript earlier.

191
00:15:26,110 --> 00:15:35,600
One of the nice things about having web assembly,
things that don't make sense, you can use

192
00:15:35,600 --> 00:15:42,430
web assembly for the home for that feature
where it might make more sense.

193
00:15:42,430 --> 00:15:51,660
I did — I think that web assembly and JavaScript
are complementary as compile targets and not,

194
00:15:51,660 --> 00:15:56,119
as some people think, competitors.

195
00:15:56,119 --> 00:16:04,720
>> This also affects types again directly,
because for good interaction with web assembly,

196
00:16:04,720 --> 00:16:11,329
that isn't extremely low level on the on the
exchange level.

197
00:16:11,329 --> 00:16:19,470
You want to have the ability to talk about
a type system from both sides.

198
00:16:19,470 --> 00:16:27,999
And there are efforts making that possible,
they don't actually need syntax for those

199
00:16:27,999 --> 00:16:32,220
types, which might be a bit surprising at
first.

200
00:16:32,220 --> 00:16:37,220
This is something where over the next few
months or so, certainly within this year,

201
00:16:37,220 --> 00:16:40,359
we will have more things to show.

202
00:16:40,359 --> 00:16:45,879
>> One thing we got requested from the audience
via Twitter is that we talk more closely into

203
00:16:45,879 --> 00:16:48,809
the mics.

204
00:16:48,809 --> 00:16:51,420
Okay.

205
00:16:51,420 --> 00:16:59,019
So, people have also been asking some things
that are just ideas about what the future

206
00:16:59,019 --> 00:17:02,889
of JavaScript could be like, and one person's
asked: can we have something like a module

207
00:17:02,889 --> 00:17:07,620
key word that makes bundling a first-class
citizen of JavaScript, and allows a single

208
00:17:07,620 --> 00:17:11,900
JS file to ex pose multiple modules as an
interface?

209
00:17:11,900 --> 00:17:16,590
>> Yes, come and see me, because I have a
proposal in the works for that, so, yes, we

210
00:17:16,590 --> 00:17:19,250
can have that.

211
00:17:19,250 --> 00:17:21,680
[Applause].

212
00:17:21,680 --> 00:17:31,330
>> So, moving on to another topic: so, over
the last year, we sort of had a bit of a situation,

213
00:17:31,330 --> 00:17:36,660
and someone asked: can you share your perspectives
on flattened versus smoosh debate.

214
00:17:36,660 --> 00:17:39,760
>> I can give some history here.

215
00:17:39,760 --> 00:17:44,380
What happens is that there was a proposal
to add flatten, and flat maps with the array

216
00:17:44,380 --> 00:17:49,652
prototype, and when it got to stage 3 and
Mozilla implemented it, and started to ship

217
00:17:49,652 --> 00:17:54,510
it in Firefox Nightly, they realised that
it was breaking certain web pages.

218
00:17:54,510 --> 00:17:58,070
They relied on this particular implementation
not being there.

219
00:17:58,070 --> 00:18:01,830
So, of course, this is kind of the worst thing
that can happen to a proposal, like, when

220
00:18:01,830 --> 00:18:03,570
we ship it, we don't want to break the web.

221
00:18:03,570 --> 00:18:05,290
This is not acceptable.

222
00:18:05,290 --> 00:18:08,440
Mozilla unshipped it, but then we have to
go back to the drawing board, and we knew

223
00:18:08,440 --> 00:18:11,570
we had to change the proposal in some way.

224
00:18:11,570 --> 00:18:16,100
Because the name itself was the problem, specifically
for flatten, we had to rename it somehow.

225
00:18:16,100 --> 00:18:21,510
Then the proposal author decided to send a
joke pull request to its proposal calling

226
00:18:21,510 --> 00:18:27,210
it smoosh and smoosh map and you know what
happened next.

227
00:18:27,210 --> 00:18:28,930
It wasn't clear that it was a joke.

228
00:18:28,930 --> 00:18:30,500
People got upset.

229
00:18:30,500 --> 00:18:34,750
I think we learned a lot from it.

230
00:18:34,750 --> 00:18:37,750
I think other people can speak better as to
what happened next.

231
00:18:37,750 --> 00:18:45,200
>> We had a TC39 three-day meeting right after
that event, and I think all of the consensus

232
00:18:45,200 --> 00:18:52,380
was yes, we learned a lot from this interaction,
certain things that we can present, you know,

233
00:18:52,380 --> 00:18:57,520
certain ways that we can communicate with
the community, and it's unfortunate that happened,

234
00:18:57,520 --> 00:19:02,140
but we learned, and hopefully, we will never
do the same thing.

235
00:19:02,140 --> 00:19:05,860
>> One thing that I personally learned from
this is that, for a lot of people, it is not

236
00:19:05,860 --> 00:19:10,700
clear that TC39 is actually representing the
developer community as well.

237
00:19:10,700 --> 00:19:16,010
In fact, some people are entirely just attending
these meetings only specifically to do that.

238
00:19:16,010 --> 00:19:22,250
And, during smoosh-gate, people felt it was
an us versus them kind of thing, which it's

239
00:19:22,250 --> 00:19:23,710
not at all.

240
00:19:23,710 --> 00:19:25,160
We should work on clarifying that.

241
00:19:25,160 --> 00:19:28,549
There is a lot of work we could do there.

242
00:19:28,549 --> 00:19:37,120
>> That's a huge thing we took away from that
realising that we need to be more obvious

243
00:19:37,120 --> 00:19:42,060
about the fact that we as individuals are
involved in TC39, because we are humans, we

244
00:19:42,060 --> 00:19:43,060
are people.

245
00:19:43,060 --> 00:19:47,540
We are people who work on libraries, people
who work on, sites, we are people who work

246
00:19:47,540 --> 00:19:54,800
on browsers, and like, we are human beings
who might make a joke sometimes, but because

247
00:19:54,800 --> 00:19:59,710
it's not super obvious to the community that
we are doing what we are doing, and who is

248
00:19:59,710 --> 00:20:02,580
doing what we are doing, it is pretty easy
to forget that.

249
00:20:02,580 --> 00:20:07,530
It is like some nefarious council somewhere
making the rules!

250
00:20:07,530 --> 00:20:09,420
>> That no-one can attend.

251
00:20:09,420 --> 00:20:13,520
So, there are a couple of people wondering
how do they get involved?

252
00:20:13,520 --> 00:20:20,020
How does someone who is new actually start
talking to the TC39?

253
00:20:20,020 --> 00:20:24,340
>> So we have all of our proposals on the
GitHub.

254
00:20:24,340 --> 00:20:26,029
TC39 repo, organisation.

255
00:20:26,029 --> 00:20:31,770
You can get involved in any one of the proposals
by opening issues, by commenting, by trying

256
00:20:31,770 --> 00:20:36,810
to network to make sure your use case is served,
or you can contribute to Babel to get these

257
00:20:36,810 --> 00:20:41,429
things implemented so you can use them in
your code.

258
00:20:41,429 --> 00:20:49,130
>> And, related question to this is someone
asking about when writing up new features,

259
00:20:49,130 --> 00:20:53,000
like, for example, someone wants to propose
something, where do you look the most for

260
00:20:53,000 --> 00:20:54,000
inspiration?

261
00:20:54,000 --> 00:20:58,320
Are there other languages, and which ones,
or is it mostly driven by requests from the

262
00:20:58,320 --> 00:21:00,700
community?

263
00:21:00,700 --> 00:21:03,980
>> I think it's a little bit of a combination
of both.

264
00:21:03,980 --> 00:21:10,110
But when — what I personally find more expensive
is to start with a problem statement, a problem

265
00:21:10,110 --> 00:21:13,690
that you want to solve, and then you motivate
that problem itself.

266
00:21:13,690 --> 00:21:16,440
Then the solution can take various shapes.

267
00:21:16,440 --> 00:21:21,090
At stage zero, you don't want to say I have
this amazing solution to this problem.

268
00:21:21,090 --> 00:21:23,340
No, you want to say look, there is this problem.

269
00:21:23,340 --> 00:21:26,140
Do we agree that this is a problem in JavaScript?

270
00:21:26,140 --> 00:21:31,170
If so, maybe we can go to stage 1 and discuss
solutions and you've already thought of solutions

271
00:21:31,170 --> 00:21:35,290
but it is important to focus on the problem
rather than the one specific solution to the

272
00:21:35,290 --> 00:21:38,880
problem.

273
00:21:38,880 --> 00:21:44,210
>> I would like to add to that saying that,
so, again, like there is a staging process,

274
00:21:44,210 --> 00:21:49,370
and there is a chub, so usually, it is not
like we meet, and then say what is the problem

275
00:21:49,370 --> 00:21:50,770
in JavaScript community?

276
00:21:50,770 --> 00:21:51,800
What is hard?

277
00:21:51,800 --> 00:21:56,810
No, somebody already came up, like I don't
like this syntax, or this is the source of

278
00:21:56,810 --> 00:21:57,810
my bug.

279
00:21:57,810 --> 00:22:05,130
A new proposal in sometimes about the array
and getting the last item from array, I constantly

280
00:22:05,130 --> 00:22:07,310
stumbled upon the bug because of this.

281
00:22:07,310 --> 00:22:12,080
I want to have new features, so I'm like proposing
is this a valid idea?

282
00:22:12,080 --> 00:22:13,380
Should we discuss this?

283
00:22:13,380 --> 00:22:16,440
That is how things get into the staging process.

284
00:22:16,440 --> 00:22:24,990
So, like, you mentioned, I'm like, a person
who is just going to TC39 meeting, I was like

285
00:22:24,990 --> 00:22:31,070
presenting like web developer point of view,
and I don't go to TC39 meeting because I have

286
00:22:31,070 --> 00:22:34,390
something to proposal, like I'm more like
I want to listen to this conversation and

287
00:22:34,390 --> 00:22:39,870
make sure that our views are respected, so
I feel really inspired.

288
00:22:39,870 --> 00:22:45,230
I'm in such a JavaScript syndrome that I think
it is fine, nothing should be changed, every

289
00:22:45,230 --> 00:22:51,210
time one of these fine people say, "I don't
like this, or this is really annoying" I'm

290
00:22:51,210 --> 00:22:53,600
like, "It IS annoying!"

291
00:22:53,600 --> 00:23:01,470
>> I was going to say to the original question,
once we have that problem statement, and once

292
00:23:01,470 --> 00:23:07,120
we figured out that we want to solve it, from
there, there is a combination of taking inspiration

293
00:23:07,120 --> 00:23:12,340
from other languages, figuring out if there
is a more JavaScript way to solve the problem.

294
00:23:12,340 --> 00:23:17,760
It is it's a huge combination of all the different
ways we could approach it.

295
00:23:17,760 --> 00:23:20,800
We don't restrict ourselves to any one route.

296
00:23:20,800 --> 00:23:22,080
>> Awesome.

297
00:23:22,080 --> 00:23:24,650
Thank you.

298
00:23:24,650 --> 00:23:31,360
So, the next question is related to information
dissemination, and, like, how do people keep

299
00:23:31,360 --> 00:23:33,180
up with proposals specifically?

300
00:23:33,180 --> 00:23:34,820
Where do you keep up with updates?

301
00:23:34,820 --> 00:23:37,260
Do you have a website.

302
00:23:37,260 --> 00:23:41,410
Another question: how do you visually track
all of the new proposals through to the maturity

303
00:23:41,410 --> 00:23:44,130
stages, maybe with a polyfill or Babel plugin?

304
00:23:44,130 --> 00:23:55,110
Up to this point, we have had a GitHub repository,
but we noticed during smoosh-gate that we

305
00:23:55,110 --> 00:23:58,040
had a communication problem with the developer
community.

306
00:23:58,040 --> 00:24:03,260
It is hard to find information about proposals
and what is going on.

307
00:24:03,260 --> 00:24:09,640
What we've been doing for the last little
while is working on — I hope this works.

308
00:24:09,640 --> 00:24:11,230
It doesn't work, okay.

309
00:24:11,230 --> 00:24:16,730
We've been working on as a result is this
project which also doesn't work when I use

310
00:24:16,730 --> 00:24:18,390
my mouse.

311
00:24:18,390 --> 00:24:19,640
Fascinating.

312
00:24:19,640 --> 00:24:22,140
One second.

313
00:24:22,140 --> 00:24:25,900
There we go.

314
00:24:25,900 --> 00:24:32,910
That should work now.

315
00:24:32,910 --> 00:24:35,860
Oh, it doesn't.

316
00:24:35,860 --> 00:24:37,700
Fantastic.

317
00:24:37,700 --> 00:24:40,110
Let's try this one.

318
00:24:40,110 --> 00:24:42,250
Next slide.

319
00:24:42,250 --> 00:24:44,300
Oh.

320
00:24:44,300 --> 00:24:45,440
There we go.

321
00:24:45,440 --> 00:24:47,370
Sorry, everyone.

322
00:24:47,370 --> 00:24:51,990
So, we have built a website for the community,
and this is what it looks like.

323
00:24:51,990 --> 00:24:54,070
It is in beta.

324
00:24:54,070 --> 00:24:55,840
It is something that we are working on.

325
00:24:55,840 --> 00:25:00,310
It is not complete, but what we would really
love is to get feedback from the community

326
00:25:00,310 --> 00:25:05,200
if this is answering your questions, and,
if this is doing what it needs to do, and

327
00:25:05,200 --> 00:25:10,210
if it is not, it would be great to have your
feedback and your comments, and this could

328
00:25:10,210 --> 00:25:15,110
be a great first step for people who are interested
in getting started working with TC39, and

329
00:25:15,110 --> 00:25:16,300
contributing.

330
00:25:16,300 --> 00:25:19,850
Hopefully this now works?

331
00:25:19,850 --> 00:25:22,090
It doesn't work.

332
00:25:22,090 --> 00:25:24,140
Whoops.

333
00:25:24,140 --> 00:25:26,340
Technical issues.

334
00:25:26,340 --> 00:25:30,200
No worries.

335
00:25:30,200 --> 00:25:36,110
So, I would like to say thank you to the contributors
who made this possible within three months.

336
00:25:36,110 --> 00:25:40,890
You can find the URL there at the top if you
want to visit it, and there is also a QR code

337
00:25:40,890 --> 00:25:42,530
there if you want to scan it.

338
00:25:42,530 --> 00:25:50,520
We're trying to improve the information issue,
and namely, we are looking for feedback for

339
00:25:50,520 --> 00:25:54,350
this beta version of a potential community
site.

340
00:25:54,350 --> 00:26:04,570
So, moving on from the website issue, and
straight into the next section of this, which

341
00:26:04,570 --> 00:26:09,430
is just for fun, we got a lot of questions
that were proposal-specific that we can answer

342
00:26:09,430 --> 00:26:14,350
rather quickly, so we're going to do a rapid-fire.

343
00:26:14,350 --> 00:26:16,460
Let's do that with TC39 logo.

344
00:26:16,460 --> 00:26:19,460
Yes, there we go.

345
00:26:19,460 --> 00:26:20,460
Nice.

346
00:26:20,460 --> 00:26:23,910
So, we're going to have three minutes, and
we're going to answer these questions as quickly

347
00:26:23,910 --> 00:26:24,910
as we can.

348
00:26:24,910 --> 00:26:30,430
If we missed your question, please come and
say hi, to us in the community lounge when

349
00:26:30,430 --> 00:26:31,680
we wrap up.

350
00:26:31,680 --> 00:26:33,350
Let's go.

351
00:26:33,350 --> 00:26:38,049
What are some of the most exciting features
coming next?

352
00:26:38,049 --> 00:26:40,180
>> Optional chaining.

353
00:26:40,180 --> 00:26:41,680
[Applause].

354
00:26:41,680 --> 00:26:46,289
>> All right, a couple of people can answer
that one.

355
00:26:46,289 --> 00:26:50,080
>> Personally I love the matching pattern.

356
00:26:50,080 --> 00:26:52,510
>> Pattern-matching is awesome.

357
00:26:52,510 --> 00:26:54,420
[Applause].

358
00:26:54,420 --> 00:26:56,330
>> [Inaudible].

359
00:26:56,330 --> 00:26:58,240
>> Yes.

360
00:26:58,240 --> 00:27:00,020
>> Excited about BigInt.

361
00:27:00,020 --> 00:27:03,110
Finally, integers that make sense.

362
00:27:03,110 --> 00:27:05,860
You can do arithmetic on them and won't get
the wrong result.

363
00:27:05,860 --> 00:27:07,710
That's kind of amazing.

364
00:27:07,710 --> 00:27:09,260
[Applause].

365
00:27:09,260 --> 00:27:15,049
>> Okay, moving on: What is your favourite
JavaScript function?

366
00:27:15,049 --> 00:27:17,270
>> [Inaudible].

367
00:27:17,270 --> 00:27:19,250
>> It's definitely flat, right?

368
00:27:19,250 --> 00:27:20,789
>> Everyone's favourite one is flat.

369
00:27:20,789 --> 00:27:22,340
>> Map and reduce.

370
00:27:22,340 --> 00:27:23,340
[Applause].

371
00:27:23,340 --> 00:27:32,330
>> Is okay, so this question is interesting:
local storage between subdomains would be

372
00:27:32,330 --> 00:27:35,220
awesome.

373
00:27:35,220 --> 00:27:37,200
>> Not something TC39 is involved in.

374
00:27:37,200 --> 00:27:42,870
That's a DOM API and TC39 is really only involved
in the standardisation of the language.

375
00:27:42,870 --> 00:27:47,330
Sometimes, it's hard to say exactly what is
language and isn't, but in this case, it's

376
00:27:47,330 --> 00:27:52,020
about input/output, and that is not in the
language at all.

377
00:27:52,020 --> 00:27:55,850
>> If you had that question, go chat with
the DOM API people, and maybe they can help

378
00:27:55,850 --> 00:27:58,200
you out.

379
00:27:58,200 --> 00:28:02,140
How about a native method for deep-object
cloning?

380
00:28:02,140 --> 00:28:04,680
>> Good idea.

381
00:28:04,680 --> 00:28:05,750
>> Very complex.

382
00:28:05,750 --> 00:28:06,750
>> Yes.

383
00:28:06,750 --> 00:28:07,750
>> Hey!

384
00:28:07,750 --> 00:28:11,580
>> Come and talk to us.

385
00:28:11,580 --> 00:28:16,370
>> The next one is similar: we would love
to have a non-expensive non-library deep object

386
00:28:16,370 --> 00:28:17,370
comparison.

387
00:28:17,370 --> 00:28:18,950
Any hope on that?

388
00:28:18,950 --> 00:28:21,760
>> Again, come and talk to us.

389
00:28:21,760 --> 00:28:25,110
We can go through it.

390
00:28:25,110 --> 00:28:26,960
>> You want to write that proposal?

391
00:28:26,960 --> 00:28:28,820
Go for it!

392
00:28:28,820 --> 00:28:31,890
>> What is the medium turnaround for a proposal
becoming reality time-wise?

393
00:28:31,890 --> 00:28:33,490
Do they follow the same procedure?

394
00:28:33,490 --> 00:28:35,230
Yes, they follow the same procedure.

395
00:28:35,230 --> 00:28:36,850
How long do they take?

396
00:28:36,850 --> 00:28:39,840
>> Some of them take years.

397
00:28:39,840 --> 00:28:44,120
>> I think minimum I saw was like 18 months,
maybe.

398
00:28:44,120 --> 00:28:47,929
>> If you're feeling really ambitious maybe
a year.

399
00:28:47,929 --> 00:28:53,220
>> The absolute minimum would be one stage
per meeting, so maybe you can do it four or

400
00:28:53,220 --> 00:28:56,080
five meetings, eight to ten months, but that's
it.

401
00:28:56,080 --> 00:29:01,320
There's no complex, everybody's on board,
and it just moves right along.

402
00:29:01,320 --> 00:29:06,140
>> Another thing is that, in order to advance
through stage 4, you need two shipping implementations

403
00:29:06,140 --> 00:29:11,060
in browsers which is not always in the control
of the champion or the author, like, unless

404
00:29:11,060 --> 00:29:15,090
you want to go and implement this in two different
JavaScript engines yourself which is a lot

405
00:29:15,090 --> 00:29:19,030
of work on top of the work you're doing writing
a proposal, then you'll just have to wait

406
00:29:19,030 --> 00:29:20,670
until it happens, basically.

407
00:29:20,670 --> 00:29:27,630
You can help that with contributing tests
so that these implementations can just check

408
00:29:27,630 --> 00:29:30,620
if they're correct or not easily.

409
00:29:30,620 --> 00:29:32,970
But still someone needs to do the work and
implement it.

410
00:29:32,970 --> 00:29:35,330
>> We've got a couple of seconds left.

411
00:29:35,330 --> 00:29:39,419
Can we use emojis in function declarations?

412
00:29:39,419 --> 00:29:41,230
>> Please!

413
00:29:41,230 --> 00:29:43,860
>> Right now we can because they're not valid
identified fires.

414
00:29:43,860 --> 00:29:44,860
— you can't.

415
00:29:44,860 --> 00:29:52,280
If you Google valid identifiers, you will
find a tool I built exactly for this purpose.

416
00:29:52,280 --> 00:29:55,320
>> And we've got no time left for one more
question.

417
00:29:55,320 --> 00:29:58,420
Please come and say high-to us.

418
00:29:58,420 --> 00:30:01,480
We would love to meet you.

419
00:30:01,480 --> 00:30:02,480
Thank you.

