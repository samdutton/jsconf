1
00:00:14,570 --> 00:00:18,920
I'm really excited to talk to you, and I'm
going to get started by introducing myself.

2
00:00:18,920 --> 00:00:24,870
My name is Max, and I'm a developer, and I'm
an artist, and my day job is that like lime

3
00:00:24,870 --> 00:00:27,050
a user-experience engineer.

4
00:00:27,050 --> 00:00:32,570
That basically means that I'm an engineer
and build things and it's directly informed

5
00:00:32,570 --> 00:00:38,390
with the way that the user perceives it, and
by the effect that it has on them and their

6
00:00:38,390 --> 00:00:39,390
perceptions.

7
00:00:39,390 --> 00:00:45,400
I also really love websites, particularly
websites which are like useless or weird.

8
00:00:45,400 --> 00:00:52,800
I think those are the most fun thing that
you can build on a computer.

9
00:00:52,800 --> 00:01:04,750
I'm talking today about building inter active
experiences with WebAssembly, and I have to

10
00:01:04,750 --> 00:01:10,139
level with you before we start that this talk
is a little bit like a Trojan horse situation,

11
00:01:10,139 --> 00:01:19,090
so I lured you into the stands with a promise
of exciting web technology like WebAssembly

12
00:01:19,090 --> 00:01:23,420
but I'm really going to talk to you about
my favourite things which are falling sand

13
00:01:23,420 --> 00:01:26,859
games, so I hope that's not a problem!

14
00:01:26,859 --> 00:01:35,549
So, if you hasn't heard of falling sand games,
they are kind of this whole genre of web games

15
00:01:35,549 --> 00:01:49,240
like free flash applet kind of things where
you have a palette of pixelated elements - pixelated

16
00:01:49,240 --> 00:01:54,430
phenomenon.

17
00:01:54,430 --> 00:01:58,450
They interactor with each other and cool things
happen.

18
00:01:58,450 --> 00:02:05,880
They share a lot in common with Conway's Game
of Life, and, in particular, they have the

19
00:02:05,880 --> 00:02:15,990
same kind of really cool behaviour behaviour
where you have simple rules, and when you

20
00:02:15,990 --> 00:02:21,099
let those play out, you get really amazing
complex emergent behaviour.

21
00:02:21,099 --> 00:02:27,450
It can be really surprising to even the person
maybe who set up those rules and certainly

22
00:02:27,450 --> 00:02:31,239
the person watching them play out, because
you could never expect exactly what you would

23
00:02:31,239 --> 00:02:35,480
get just based on reading that it does this,
and these conditions are that.

24
00:02:35,480 --> 00:02:37,349
It's much more complex.

25
00:02:37,349 --> 00:02:44,930
Another thing I love about sand games is they
have a low fidelity visual representation

26
00:02:44,930 --> 00:02:46,430
of what is happening on screen.

27
00:02:46,430 --> 00:02:52,670
You have a couple of coloured pixels maybe
moving around a little bit but there is so

28
00:02:52,670 --> 00:02:58,340
little to go off, that it lets your imagination
run wild and interpret what you're seeing

29
00:02:58,340 --> 00:03:06,230
with its own layer over what is going on,
so you see something much more vivid in your

30
00:03:06,230 --> 00:03:10,560
mind's eye than what is going on in the screen,
and there is a lot of room to play with that,

31
00:03:10,560 --> 00:03:12,159
and that's really fun.

32
00:03:12,159 --> 00:03:18,470
So many people oftentimes ask when they see
these games like how do you win this game?

33
00:03:18,470 --> 00:03:21,030
There is no win condition or score or anything
like that.

34
00:03:21,030 --> 00:03:24,959
The way the games work is that you're making
your own objectives as you play, and that's

35
00:03:24,959 --> 00:03:26,249
part of the game.

36
00:03:26,249 --> 00:03:30,989
Oftentimes, that means understanding what
is going on in front of you, so maybe you're

37
00:03:30,989 --> 00:03:35,970
trying to figure out how a new element works,
or how it interacts with another one.

38
00:03:35,970 --> 00:03:42,430
You might make a hypothesis about what happens,
make an experiment and test it out, or maybe

39
00:03:42,430 --> 00:03:45,989
you will be like telling yourself a story,
and playing it out with the elements in front

40
00:03:45,989 --> 00:03:52,989
of you, and seeing what happens and imagining
your mind, and so on, and so I think it's

41
00:03:52,989 --> 00:03:57,569
really wonderful mode of play, and it is one
where you're not only the player, but literatures

42
00:03:57,569 --> 00:04:07,020
kind of a story-teller for yourself.

43
00:04:07,020 --> 00:04:15,189
So my favourite falling sand game has been
for a long game called the Powder Game.

44
00:04:15,189 --> 00:04:20,950
And it kind of has this really interesting
feature which is that when you make things

45
00:04:20,950 --> 00:04:26,680
in it, right in the game, in the menu, you
can upload them, and they go to a server,

46
00:04:26,680 --> 00:04:29,220
and other people can browse them and see them.

47
00:04:29,220 --> 00:04:34,910
It's got this long-standing weird and thriving
community of people building interesting things,

48
00:04:34,910 --> 00:04:37,700
and uploading them for each other.

49
00:04:37,700 --> 00:04:43,411
And it's really cool to see, given like just
these small tools, the kind of things that

50
00:04:43,411 --> 00:04:46,110
people make for each other to play with.

51
00:04:46,110 --> 00:04:51,540
So you've got like your bog standard is thousands
and thousands of volcanos.

52
00:04:51,540 --> 00:04:57,280
You know, it's like an infinite fourth grade
science fair of different volcanos, but they're

53
00:04:57,280 --> 00:05:00,740
cool, and I can see why people want to make
volcanoes.

54
00:05:00,740 --> 00:05:08,240
People make different destructible structures
so you can load it into your browser and then

55
00:05:08,240 --> 00:05:14,260
have fun setting it on fire, or pouring acid
on it, and that is like a fun way to play

56
00:05:14,260 --> 00:05:16,670
with somebody who you've never met.

57
00:05:16,670 --> 00:05:19,930
People get really creative.

58
00:05:19,930 --> 00:05:23,940
There are all kinds of games that people make
out of the simple elements they have like

59
00:05:23,940 --> 00:05:30,500
mood rings, and you can see this one says
it is clear it won't be accurate of your mood

60
00:05:30,500 --> 00:05:31,880
unless you first vote.

61
00:05:31,880 --> 00:05:34,930
There is a lot of vote-pandering in these
communities.

62
00:05:34,930 --> 00:05:39,890
It's a staple of how they communicate, but
this is a cool game that somebody made inside

63
00:05:39,890 --> 00:05:41,800
another game.

64
00:05:41,800 --> 00:05:48,160
My personal favourite type of sand game upload
is this entire genre called Don't Smoke where

65
00:05:48,160 --> 00:05:55,430
it displays to you anatomical phenomenon that
will that will happen if you smoke a cigarette,

66
00:05:55,430 --> 00:06:03,270
like the lava will travel up and explode your
brain.

67
00:06:03,270 --> 00:06:04,820
These games are awesome.

68
00:06:04,820 --> 00:06:10,940
You can see why I was fascinated with them
for my entire childhood.

69
00:06:10,940 --> 00:06:17,560
As I get older and first learned to programme,
as soon as I could run two for loops together,

70
00:06:17,560 --> 00:06:24,720
I knew I wanted to build a falling sand game
- the best one of, obviously!

71
00:06:24,720 --> 00:06:32,460
I knew a bit of JavaScript and knew how to
use an API, and I looked at other sand games

72
00:06:32,460 --> 00:06:38,170
and how they were working and what the elements
were doing had they were moving around, and

73
00:06:38,170 --> 00:06:43,450
when I was re-implement ing them, I found
they are really simple, and, with just a couple

74
00:06:43,450 --> 00:06:48,880
of low numbers of hundreds of lines of JavaScript,
I suddenly had water moving around the screen.

75
00:06:48,880 --> 00:06:54,370
I was really excited, and I was having so
much fun, but I realised that as I kept adding

76
00:06:54,370 --> 00:06:58,620
new elements to the game, it was getting slower
and slower, and I didn't have a very firm

77
00:06:58,620 --> 00:07:05,610
grasp on concepts such as like functions,
or having your code in more than one file,

78
00:07:05,610 --> 00:07:11,210
and what I was manifesting was as I was adding
more features into this big blob of code,

79
00:07:11,210 --> 00:07:15,140
everything was getting more and more buggy.

80
00:07:15,140 --> 00:07:19,420
You can see this blob on the right-hand side
of the screen was an element that was a mistake

81
00:07:19,420 --> 00:07:28,210
I made decided to domesticate and keep in
the game as the given element.

82
00:07:28,210 --> 00:07:31,110
I couldn't understand what was going on any
more.

83
00:07:31,110 --> 00:07:35,740
So I was okay, I'm going to have to do, refactor
this code somehow and make it good.

84
00:07:35,740 --> 00:07:39,500
I didn't know exactly what that meant but
I knew I needed to be in different tiles,

85
00:07:39,500 --> 00:07:43,350
so I had to set up webpack so I could have
different JavaScript files.

86
00:07:43,350 --> 00:07:47,640
This is the last commit I made to the project
in 2015.

87
00:07:47,640 --> 00:07:50,110
Used webpack for my pending factor which never
happened.

88
00:07:50,110 --> 00:07:54,180
I think this is a common story.

89
00:07:54,180 --> 00:07:59,180
So some time went by, and I got a cat.

90
00:07:59,180 --> 00:08:01,880
I moved to California.

91
00:08:01,880 --> 00:08:06,410
But other things were going on in my life
but I was still thinking about sand games,

92
00:08:06,410 --> 00:08:10,970
and I was noticing a lot of cool projects
that were happening that were letting people

93
00:08:10,970 --> 00:08:19,710
build and code in the browser, and kind of
make programme one element of a larger system.

94
00:08:19,710 --> 00:08:21,670
I thought that was really cool.

95
00:08:21,670 --> 00:08:26,360
So I had this idea that I got excited about
last year which is what if there was a falling

96
00:08:26,360 --> 00:08:32,390
sand game where people could code their own
elements and upload them, and then all those

97
00:08:32,390 --> 00:08:36,910
elements by different people could interact,
and there could be reactions that nobody ever

98
00:08:36,910 --> 00:08:40,190
anticipated, and something could happen?

99
00:08:40,190 --> 00:08:44,920
So I kind of knew that I needed a different
architecture diagram for my game rather than

100
00:08:44,920 --> 00:08:49,380
having anything in one file and one blog,
if people needed to write code, there would

101
00:08:49,380 --> 00:08:57,800
be separation to an engine and maybe the different
elements, and I was maybe inspired by things

102
00:08:57,800 --> 00:09:03,310
like React and I thought okay, there can be
an API that they talk over, and be the framework,

103
00:09:03,310 --> 00:09:05,800
and then the components.

104
00:09:05,800 --> 00:09:09,240
But I also knew that if I wanted people to
actually code and upload their elements, there

105
00:09:09,240 --> 00:09:13,210
would need to be a pleasant and easy experience,
and I don't need to handle as many of the

106
00:09:13,210 --> 00:09:16,350
edge cases as I could for them.

107
00:09:16,350 --> 00:09:23,361
I started to prototype this and trying to
move the gross logic out of the elements and

108
00:09:23,361 --> 00:09:29,190
make them as easy and fun to make and make
the engine, if it had to be gross, that was

109
00:09:29,190 --> 00:09:30,190
fine.

110
00:09:30,190 --> 00:09:33,590
I was really happy with this prototype and
I was having so much fun building elements

111
00:09:33,590 --> 00:09:42,510
in it, I was having a great time thought I
want to keep doing it and if I know anything

112
00:09:42,510 --> 00:09:48,630
about if you want someone to use your thing,
it's got to be on the web as far as I'm concerned,

113
00:09:48,630 --> 00:09:54,370
and so I wanted to start over and build it
so that I could actually share it with people.

114
00:09:54,370 --> 00:09:57,230
So that kind of turned into Sand Spiel.

115
00:09:57,230 --> 00:10:04,160
The rest of my talk is boring, if you want
to do that for the next ten minutes, I'm not

116
00:10:04,160 --> 00:10:05,230
going to judge you!

117
00:10:05,230 --> 00:10:09,850
So, but I will give you a quick demo so you
can see what it looks like.

118
00:10:09,850 --> 00:10:12,890
I will press play.

119
00:10:12,890 --> 00:10:14,029
You've got your different elements.

120
00:10:14,029 --> 00:10:18,220
I will plant some flowers.

121
00:10:18,220 --> 00:10:25,970
And then I think that people then set everything
on fire, but it's okay.

122
00:10:25,970 --> 00:10:28,320
Doesn't release any carbon!

123
00:10:28,320 --> 00:10:33,890
So, that's kind of what the game looks like,
and you can see there is this canvas where

124
00:10:33,890 --> 00:10:40,720
the simulation is happening, and there is
the buttons and the UI.

125
00:10:40,720 --> 00:10:48,430
So, the one of the things that I found when
I was building Sand Spiel that turned out

126
00:10:48,430 --> 00:10:54,820
to be critical and helped me to build it was
that I decided to try to use WebAssembly.

127
00:10:54,820 --> 00:11:00,130
So there is actually WebAssembly in this talk,
I'm sorry.

128
00:11:00,130 --> 00:11:05,240
I've said that word a couple of times now,
maybe you've heard it this week, but just

129
00:11:05,240 --> 00:11:11,050
to, like, rehash, WebAssembly is not really
a language it's an instruction format that

130
00:11:11,050 --> 00:11:16,900
you compile instructions to and has properties
that people are excited about.

131
00:11:16,900 --> 00:11:21,680
First of all, it's fast, so I'm not going
to go into detail here because this is kind

132
00:11:21,680 --> 00:11:30,800
of any kind of performance conversation, but
particular ly it is, if you have a lot - it's

133
00:11:30,800 --> 00:11:32,620
predictable what the performance will be.

134
00:11:32,620 --> 00:11:38,650
With JavaScript, you can make it fast, but
you are relying on the way that it gets optimised,

135
00:11:38,650 --> 00:11:44,490
and you need to write it in a very careful
way, whereas with WebAssembly, there are much

136
00:11:44,490 --> 00:11:48,050
less moving pieces, and, if you write it in
a certain way, you know it will be fast on

137
00:11:48,050 --> 00:11:50,750
everybody's browser.

138
00:11:50,750 --> 00:11:54,620
Another important aspect of WebAssembly is
that it is sandboxed.

139
00:11:54,620 --> 00:12:00,920
So it is safe in WebAssembly to run code written
by someone who you don't necessarily trust

140
00:12:00,920 --> 00:12:07,390
on your machine, or even on your user's machine
sometimes, and it's not going to steal their

141
00:12:07,390 --> 00:12:09,750
passwords necessarily because it's sandboxed.

142
00:12:09,750 --> 00:12:13,780
It can't reach into the rest of the system
like some native code can.

143
00:12:13,780 --> 00:12:17,050
I thought this was going to be an important
thing for my of the game because I thought

144
00:12:17,050 --> 00:12:23,380
I was going to be running people's code they
wrote, and running it on other people's computers,

145
00:12:23,380 --> 00:12:25,000
but it turns out I never got to that part.

146
00:12:25,000 --> 00:12:26,000
That was ambitious.

147
00:12:26,000 --> 00:12:30,730
In the future, this will come in handy, but
just the other factors of WebAssembly were

148
00:12:30,730 --> 00:12:31,920
useful to me.

149
00:12:31,920 --> 00:12:36,660
Lastly, I want to let people know that it
really is ready to use.

150
00:12:36,660 --> 00:12:42,280
I was surprised for this myself, but, you
know, like four major browsers and some other

151
00:12:42,280 --> 00:12:44,860
ones as well have already implemented it.

152
00:12:44,860 --> 00:12:50,790
It works also like a mobile really well, and
I was, I'm surprised by how fast it's moving

153
00:12:50,790 --> 00:12:57,880
and the spec is pragmatic and informed by
what browsers I we already have as far as

154
00:12:57,880 --> 00:13:05,670
structure, and there is a lot of - it so is
it is becoming something that you can ship.

155
00:13:05,670 --> 00:13:09,589
And I had no problems with compatibility,
surprisingly, with WebAssembly.

156
00:13:09,589 --> 00:13:15,900
One more thing about it being ready to use
is that the tooling is, at least in my experience,

157
00:13:15,900 --> 00:13:17,380
was really good.

158
00:13:17,380 --> 00:13:22,230
I wrote some Rust code for Sand Spiel that
was compiled to WebAssembly.

159
00:13:22,230 --> 00:13:28,370
The entire tool chain that I used to do that,
including tools like Wasm and Pack, which

160
00:13:28,370 --> 00:13:39,061
let you respect ively compile Rust code into
a JavaScript file that loads it, and a tool

161
00:13:39,061 --> 00:13:48,160
for kind of calling in between from WebAssembly
and JavaScript, these tools are still like

162
00:13:48,160 --> 00:13:50,020
in beta but nice to use.

163
00:13:50,020 --> 00:13:56,750
There is a lot of shared culture and shared
communication norms within the JavaScript

164
00:13:56,750 --> 00:13:59,080
community and the Rust assembly community.

165
00:13:59,080 --> 00:14:02,930
If you have expectations about how a library
should work and how a documentation should

166
00:14:02,930 --> 00:14:07,490
be and what sort of error messages it should
give you that you're used to from writing

167
00:14:07,490 --> 00:14:14,180
JavaScript, go you go to write Rust in WebAssembly,
you won't be shocked or horrifies because

168
00:14:14,180 --> 00:14:15,470
it's a lot of the same people.

169
00:14:15,470 --> 00:14:21,970
They have the same expectations you do of
what a good user interface is for a tool.

170
00:14:21,970 --> 00:14:26,330
This was really great, and I appreciate being
able to use this.

171
00:14:26,330 --> 00:14:29,912
Another really critical thing about that I
want to tell you about the way that you can

172
00:14:29,912 --> 00:14:34,560
use WebAssembly is that you don't have to
write your whole application in it and it

173
00:14:34,560 --> 00:14:38,810
happens to run in the browser and it's just
a big hunk of Rust or something.

174
00:14:38,810 --> 00:14:44,310
My app is 50 per cent JavaScript and about
50 per cent Rust WebAssembly.

175
00:14:44,310 --> 00:14:49,940
This was awesome because I got to put the
things that needed to run many, many times

176
00:14:49,940 --> 00:14:52,360
a second, and be really fast.

177
00:14:52,360 --> 00:14:54,633
I got to write that in Rust and make it fast.

178
00:14:54,633 --> 00:14:59,200
Then all the things that don't need to be
fast because it's just like, you know, building

179
00:14:59,200 --> 00:15:04,410
user interface, or triggering a network request,
all those things I got to write?

180
00:15:04,410 --> 00:15:09,240
JavaScript and benefit from the fact that
JavaScript is really good at doing these - and

181
00:15:09,240 --> 00:15:14,529
also that I got to use the whole ecosystem
of React in different tools made this really

182
00:15:14,529 --> 00:15:15,529
awesome.

183
00:15:15,529 --> 00:15:20,090
If I had tried to write the whole thing in
Rust, it would have taken longer because it's

184
00:15:20,090 --> 00:15:25,750
like there's no good tools right now for building
interfaces yet, not like the way there are

185
00:15:25,750 --> 00:15:30,320
in JavaScript, and so being able to split
my concerns here was really awesome.

186
00:15:30,320 --> 00:15:36,870
I think you can kind of imagine like the JavaScript
code here is most ly just, you know, React

187
00:15:36,870 --> 00:15:43,850
code like you may have seen before, and the
way it interacts with Rust, is that essentially,

188
00:15:43,850 --> 00:15:50,950
there is a gist-like class that has some functions,
and - and from the respect of the, it, you're

189
00:15:50,950 --> 00:15:52,399
calling the JavaScript functions.

190
00:15:52,399 --> 00:15:59,470
I have a paint method which will draw a circle
on to the screen in a certain element in a

191
00:15:59,470 --> 00:16:05,040
certain radius, or I have one to reset the
canvas, or to calculate a simulation.

192
00:16:05,040 --> 00:16:09,360
From the JavaScript perspective, you're really
just calling some methods and it happens to

193
00:16:09,360 --> 00:16:11,060
be implemented in WebAssembly which is fast.

194
00:16:11,060 --> 00:16:15,630
That is some of the tools like I mention before.

195
00:16:15,630 --> 00:16:21,670
So, as for the WebAssembly code, it looks
like this tick method which ones one frame

196
00:16:21,670 --> 00:16:22,670
per simulation.

197
00:16:22,670 --> 00:16:25,470
I will show you how it works.

198
00:16:25,470 --> 00:16:31,460
This is by the way what powers this part of
the game, where the pixels are moving around

199
00:16:31,460 --> 00:16:32,710
and interacting.

200
00:16:32,710 --> 00:16:37,420
So essentially, I have a data structure which
is like a big two dimensional array of all

201
00:16:37,420 --> 00:16:45,520
the data for my different cells of the grid,
and it goes through, loops through each one

202
00:16:45,520 --> 00:16:50,240
in order, and, when it gets to each one, it
runs an update function based on whatever

203
00:16:50,240 --> 00:16:57,380
the type is of the grid itself, and so you
get to the third one, and it's a sand grid.

204
00:16:57,380 --> 00:17:02,470
It's a piece of sand, so it matches to the
sand update function, and the sand update

205
00:17:02,470 --> 00:17:03,529
function is really simple.

206
00:17:03,529 --> 00:17:12,499
It's like an if-else statement, and the way
that that works is it it looks at its local

207
00:17:12,499 --> 00:17:15,699
co-ordinate system and says what is the cell
below me?

208
00:17:15,699 --> 00:17:17,230
What is the type of that?

209
00:17:17,230 --> 00:17:22,669
If it is empathy, then I can fall down, and
I will just go down there, and I will erase

210
00:17:22,669 --> 00:17:26,209
myself and rate myself one pixel lower.

211
00:17:26,209 --> 00:17:31,770
If that first check failed and there is a
piece of stone underneath you, then it goes

212
00:17:31,770 --> 00:17:35,860
to the second statement, and it checks one
of the diagonals and tries to fall there.

213
00:17:35,860 --> 00:17:37,860
And it does the same thing.

214
00:17:37,860 --> 00:17:42,529
So that is all there is to this algorithm
that lets you do the sand, and kind of the

215
00:17:42,529 --> 00:17:47,929
trick here is that it is happening on every
pixel of the grid, and it is happening at

216
00:17:47,929 --> 00:17:53,360
60 frames a second, and it starts to look
like how you would imagine sand would work.

217
00:17:53,360 --> 00:17:58,379
So there is, like, 18 other elements, and
some are a little more complicated but they

218
00:17:58,379 --> 00:18:03,210
have the same pattern of they're a single
function, they call some APIs to read anywhere

219
00:18:03,210 --> 00:18:06,240
neighbours and to write to their neighbours,
and then you get different behaviour.

220
00:18:06,240 --> 00:18:13,720
So, I mentioned this earlier, but it really
was like the key to being to make this project

221
00:18:13,720 --> 00:18:19,010
quickly, the fact that I could put things
in WebAssembly that needed to be fast and

222
00:18:19,010 --> 00:18:23,950
I could implement everything else in JavaScript,
and use the ecosystem, and not have to worry

223
00:18:23,950 --> 00:18:30,019
about all the type-checking and all of the
other conditions that Rust enforces on your

224
00:18:30,019 --> 00:18:38,539
code that can sometimes slow you down, and,
so another thing that I mentioned is the network

225
00:18:38,539 --> 00:18:47,259
code which is I also build like an upload
and download functionality that I really liked,

226
00:18:47,259 --> 00:18:51,770
and so this has been the most gratifying part
of the project, so, a lot of - it's pretty

227
00:18:51,770 --> 00:18:57,750
much middle-schoolers, but a lot of middle-schoolers
play this game and draw amazing things.

228
00:18:57,750 --> 00:19:03,899
They ignore the fact that there is a simulation
attacked and use it like MS Paint and not

229
00:19:03,899 --> 00:19:10,639
blocked in their computer lab which is maybe
why they use it, but they draw awesome stuff,

230
00:19:10,639 --> 00:19:13,100
and it's fun to see what they do.

231
00:19:13,100 --> 00:19:19,120
I think like maybe one of the - so the most
popular, there's an upvoting system and the

232
00:19:19,120 --> 00:19:25,820
most liked and loved post is this puppy.

233
00:19:25,820 --> 00:19:30,289
I can't explain it, but I also loved this
puppy.

234
00:19:30,289 --> 00:19:35,789
There is fan art and people remixing her and
drawing her in different situation.

235
00:19:35,789 --> 00:19:42,049
On the right, that's Super Duna Luna, the
tall one.

236
00:19:42,049 --> 00:19:51,249
In the Powder Game, there was a rule against
load ing somebody else's submission.

237
00:19:51,249 --> 00:19:58,360
We encourage forking in Sand Spiel which leads
to this fun stuff.

238
00:19:58,360 --> 00:20:03,899
Unfortunately, I mentioned that the best part
of the project has been seeing the things

239
00:20:03,899 --> 00:20:08,299
that people upload, but it's also been the
worst part of the project as well.

240
00:20:08,299 --> 00:20:14,990
Not everybody is nice, and there is like,
I moderate the posts every morning and waking

241
00:20:14,990 --> 00:20:16,520
up to it is not always fun.

242
00:20:16,520 --> 00:20:20,879
Sometimes, I feel like this person where I
feel like these people are ruining the game,

243
00:20:20,879 --> 00:20:25,020
and I wish it had never been created so none
of it would happen.

244
00:20:25,020 --> 00:20:30,470
And so I do do some manual moderation, but
it's really not sustainable, and I'm not sure

245
00:20:30,470 --> 00:20:37,129
what to do, and so I've kind of, like, looked
to where I look for to solve problems when

246
00:20:37,129 --> 00:20:42,130
I have programming problems, and they've not
been useful, like, there's no algorithm that

247
00:20:42,130 --> 00:20:46,259
would be nice for making people be nice to
each other on the internet.

248
00:20:46,259 --> 00:20:51,070
Not even like string-matching algorithms work,
I tried.

249
00:20:51,070 --> 00:20:56,530
And like, nor do other places where who have
usually solved my tough programming problems,

250
00:20:56,530 --> 00:21:02,980
like CSS tricks, they have no button that
will make people be nice to each other, unfortunately.

251
00:21:02,980 --> 00:21:04,409
This is a problem I still have.

252
00:21:04,409 --> 00:21:09,480
I haven't solved it, and I know there are
people who have problems like this, and I'm

253
00:21:09,480 --> 00:21:14,389
definitely curious to hear what they did or
if they're just like there's all this invisible

254
00:21:14,389 --> 00:21:17,289
work that happened behind the scenes that
made it look like things are nice.

255
00:21:17,289 --> 00:21:22,320
I definitely would be interested to talk if
you think you know a solution.

256
00:21:22,320 --> 00:21:26,389
Please do not tell me to use a neural network!

257
00:21:26,389 --> 00:21:28,929
Thank you!

258
00:21:28,929 --> 00:21:34,259
So, please do, I think we have a break after
that, so please play with Sand Spiel if you

259
00:21:34,259 --> 00:21:36,129
want to kill some time and chill out.

260
00:21:36,129 --> 00:21:41,770
I have a longer form blog post that goes into
more of the inspiration for the game and some

261
00:21:41,770 --> 00:21:47,460
of the design decisions, and also into some
of the technical details because I glossed

262
00:21:47,460 --> 00:21:50,580
over some things.

263
00:21:50,580 --> 00:21:54,740
Thank you so much!

