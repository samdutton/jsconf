1
00:00:13,230 --> 00:00:19,440
Being the last one on the last day of the
presentation in the Side Track.

2
00:00:19,440 --> 00:00:24,410
I'm impressed that there are still people
here that are not sleeping.

3
00:00:24,410 --> 00:00:31,040
It's professionally what we call this slot
the twilight zone.

4
00:00:31,040 --> 00:00:38,250
And I know that you guys are tired after two
days of conferencing and learning and JavaScripting.

5
00:00:38,250 --> 00:00:43,290
So, I hope that this talk is going to be a
little fun for you.

6
00:00:43,290 --> 00:00:48,250
That said, you know, like I've added a few
jokes here and there.

7
00:00:48,250 --> 00:00:52,680
But my wife tells me that my dad jokes are
absolutely terrible.

8
00:00:52,680 --> 00:00:57,200
So, we'll see how that works out for you guys.

9
00:00:57,200 --> 00:00:58,200
Nobody laughs.

10
00:00:58,200 --> 00:01:00,309
That's a good start.

11
00:01:00,309 --> 00:01:02,100
Hi.

12
00:01:02,100 --> 00:01:04,921
My name is Pier.

13
00:01:04,921 --> 00:01:14,360
You might remember me from such amazing projects
such as: The Java servlet API.

14
00:01:14,360 --> 00:01:18,720
The Java API for XML.

15
00:01:18,720 --> 00:01:21,810
Java 2 SE 1.5.

16
00:01:21,810 --> 00:01:24,470
And a lot more Java goodness.

17
00:01:24,470 --> 00:01:30,010
I'm sure right now you're actually wondering
whether I am at the right conference here.

18
00:01:30,010 --> 00:01:32,570
Well, I am.

19
00:01:32,570 --> 00:01:36,970
You see, like a few years back when I was
living in Tokyo, I met this fine gentleman.

20
00:01:36,970 --> 00:01:39,590
His name is Jed Schmidt.

21
00:01:39,590 --> 00:01:40,979
We were working together.

22
00:01:40,979 --> 00:01:45,920
And he's one of the creators of, for example,
Brooklyn Jazz.

23
00:01:45,920 --> 00:01:48,520
Quite a famous name over there.

24
00:01:48,520 --> 00:01:57,759
And thanks to the beatings of these fine gentlemen
I kind of like praise the Lord.

25
00:01:57,759 --> 00:01:59,079
I saw the light.

26
00:01:59,079 --> 00:02:04,869
I abandoned the dark side.

27
00:02:04,869 --> 00:02:07,820
And converted to this wonderful world of Node.js.

28
00:02:07,820 --> 00:02:15,650
Let me tell you, life since then has been
all ponies and rainbows.

29
00:02:15,650 --> 00:02:18,269
But I want to point out one thing.

30
00:02:18,269 --> 00:02:20,590
I know that I'm gonna anger some of you here.

31
00:02:20,590 --> 00:02:23,689
I am not a, you know, like I'm definitely
not into Star Wars.

32
00:02:23,689 --> 00:02:27,950
I'm more of a Trekkie myself.

33
00:02:27,950 --> 00:02:30,650
But enough about me.

34
00:02:30,650 --> 00:02:34,819
Let's get into the nitty gritty details of
this talk.

35
00:02:34,819 --> 00:02:42,670
So, today we're talking about the almighty
toilet paper roll.

36
00:02:42,670 --> 00:02:48,169
And now I'm sure that you're really wondering,
am I at the right conference?

37
00:02:48,169 --> 00:02:51,399
How many of you are familiar with this wonderful
object?

38
00:02:51,399 --> 00:02:55,959
[ Laughter ]
I mean, you know, if not this one, we can

39
00:02:55,959 --> 00:02:57,140
get the black one.

40
00:02:57,140 --> 00:02:58,900
It's so Berlin.

41
00:02:58,900 --> 00:03:01,629
You know?

42
00:03:01,629 --> 00:03:02,999
Amazing.

43
00:03:02,999 --> 00:03:07,220
For your health, I really hope that you had
a good use of this today.

44
00:03:07,220 --> 00:03:08,920
You know?

45
00:03:08,920 --> 00:03:12,769
But what about JavaScript?

46
00:03:12,769 --> 00:03:14,569
And toilet paper?

47
00:03:14,569 --> 00:03:17,079
Well, let's take a step back.

48
00:03:17,079 --> 00:03:24,499
You see, a couple of years back I took a job
at a company called Korber, a big giant in

49
00:03:24,499 --> 00:03:28,370
industrial manufacturing in Germany.

50
00:03:28,370 --> 00:03:31,939
They are one of the largest manufacturers
of industrial machines.

51
00:03:31,939 --> 00:03:39,389
Including, amongst a thousand other things,
tobacco machines, palletizing equipment, we

52
00:03:39,389 --> 00:03:44,959
actually do produce machines that produce
toilet paper and kitchen rolls.

53
00:03:44,959 --> 00:03:47,480
I am embedded with their digital lab.

54
00:03:47,480 --> 00:03:49,430
Korber Digital.

55
00:03:49,430 --> 00:03:57,659
And we develop digital applications for our
customers, right?

56
00:03:57,659 --> 00:04:04,409
More specifically, I am in a team that develops
this wonderful app.

57
00:04:04,409 --> 00:04:07,010
What we're building is called K Edge.

58
00:04:07,010 --> 00:04:14,349
K Edge is an app that has been designed to
offer shift support in for the operators of

59
00:04:14,349 --> 00:04:17,079
toilet paper machines, right?

60
00:04:17,079 --> 00:04:22,810
On KEdge, as you can see there, like, you
know, operators of operators of these machines

61
00:04:22,810 --> 00:04:27,620
can actually see their production stats like
how many logs they have produced, the average

62
00:04:27,620 --> 00:04:31,729
speed at which the machine is running, downtimes
and whatnot.

63
00:04:31,729 --> 00:04:34,080
They can see the telemetry from the machine
itself.

64
00:04:34,080 --> 00:04:36,610
You can see actually the graph over there.

65
00:04:36,610 --> 00:04:42,090
We take that graph, we analyze the speed,
we create yellow segments or red segments.

66
00:04:42,090 --> 00:04:46,650
Yellow segments are reduced productivity so
that when we are below that green line you

67
00:04:46,650 --> 00:04:47,979
see over there.

68
00:04:47,979 --> 00:04:50,819
And the red segments is when the machine is
actually stopped.

69
00:04:50,819 --> 00:04:57,060
So, what happens, the operator at that point
has the ability to create a digital report

70
00:04:57,060 --> 00:04:59,610
of their shift, right?

71
00:04:59,610 --> 00:05:08,280
So, KEdge is deployed as on a tablet that
goes alongside the traditional HMI.

72
00:05:08,280 --> 00:05:14,099
The HMI is that big computer you see there
that controls actually the machine itself.

73
00:05:14,099 --> 00:05:21,750
And the operators use the tablet to create
a digital journal of their shift.

74
00:05:21,750 --> 00:05:27,259
And, you know, replace their old paperbased
trail of stuff.

75
00:05:27,259 --> 00:05:28,259
Right?

76
00:05:28,259 --> 00:05:32,199
So, let's look a little bit about how KEdge
is built.

77
00:05:32,199 --> 00:05:36,919
So, this is a quick outline of our architecture.

78
00:05:36,919 --> 00:05:38,650
The frontend is a React app.

79
00:05:38,650 --> 00:05:39,830
So, lots of JavaScript.

80
00:05:39,830 --> 00:05:46,229
It's deployed statically on Amazon S3, served
through Cloud front and a login will be handled

81
00:05:46,229 --> 00:05:49,490
by incognito really soon.

82
00:05:49,490 --> 00:05:57,030
And backup communication goes through Redux
to a bunch of JavaScript microservices which

83
00:05:57,030 --> 00:06:04,360
have been deployed as Amazon Lambda functions
and therefore accessible via the AWS gateway.

84
00:06:04,360 --> 00:06:07,360
Interesting, isn't it?

85
00:06:07,360 --> 00:06:08,360
No.

86
00:06:08,360 --> 00:06:09,909
It's 2019.

87
00:06:09,909 --> 00:06:13,430
Nobody cares about another god damned React
app.

88
00:06:13,430 --> 00:06:18,590
You know, if we were to talk about this, you
might just as well go out to the beach and

89
00:06:18,590 --> 00:06:19,949
catch some sun while you can.

90
00:06:19,949 --> 00:06:22,849
You know, enjoy the heat and so on and so
forth.

91
00:06:22,849 --> 00:06:27,550
And so, what's actually interesting about
what we do?

92
00:06:27,550 --> 00:06:35,319
Well, to figure that out, we have to see how
toilet paper is actually produced, right?

93
00:06:35,319 --> 00:06:41,175
So, thanks to the National Geographic, this
is how a modern toilet paper factory looks

94
00:06:41,175 --> 00:06:42,849
on the inside.

95
00:06:42,849 --> 00:06:53,310
This has been shot at one of the biggest producers
of toilet paper here in the European market.

96
00:06:53,310 --> 00:06:58,029
And you can actually hear how loud this place
is.

97
00:06:58,029 --> 00:07:02,599
Right? [it's loud]
Giant factories, just to make toilet paper.

98
00:07:02,599 --> 00:07:07,150
But easier on the ears, let's look a little
bit at how our production line is actually

99
00:07:07,150 --> 00:07:08,150
configured.

100
00:07:08,150 --> 00:07:12,090
This is a pretty machine, one of ours.

101
00:07:12,090 --> 00:07:17,750
Wonderful piece of equipment that runs at
around 50 kilometers an hour.

102
00:07:17,750 --> 00:07:19,740
And how is toilet paper produced?

103
00:07:19,740 --> 00:07:26,930
We start from the top left with some giant
jumble rolls, we call them.

104
00:07:26,930 --> 00:07:30,789
Those are three tons of paper.

105
00:07:30,789 --> 00:07:32,960
Oneply paper.

106
00:07:32,960 --> 00:07:37,629
To put that into perspective, one of those
rolls is enough for at least three of you

107
00:07:37,629 --> 00:07:40,610
to make toilet paper for the rest of your
life kind of thing.

108
00:07:40,610 --> 00:07:42,379
So, pretty big.

109
00:07:42,379 --> 00:07:44,569
We unwind those ones, right?

110
00:07:44,569 --> 00:07:50,460
And we unwind them one, two, or three or four
of them depending if we want one, two, three

111
00:07:50,460 --> 00:07:53,059
or fourply toilet paper.

112
00:07:53,059 --> 00:07:57,819
After the winders over here, we have what
is called the embosser.

113
00:07:57,819 --> 00:08:04,449
It basically takes the splice of toilet paper,
pushes them together and embosses this nice

114
00:08:04,449 --> 00:08:06,259
pattern over here.

115
00:08:06,259 --> 00:08:10,310
And in the process, it injects air into the
paper.

116
00:08:10,310 --> 00:08:15,719
So, it makes it thicker, it makes it fluffier,
softer, gentler on your rear end, maybe.

117
00:08:15,719 --> 00:08:25,110
And after the paper is embossed, basically
what happens is that the cardboard core here

118
00:08:25,110 --> 00:08:28,999
gets produced by the machine that you see
in the middle over there.

119
00:08:28,999 --> 00:08:33,909
The cardboard core slides in and we actually
start rewinding the embossed paper around

120
00:08:33,909 --> 00:08:38,090
the cardboard core in giant logs.

121
00:08:38,090 --> 00:08:41,400
It's like this, but it's 3 meters wrong.

122
00:08:41,400 --> 00:08:48,930
Those go into the thing that look like a cage,
it's an accumulator, buffering the unwinding

123
00:08:48,930 --> 00:08:55,740
part at the top from the cutting and packaging
at the rear end of the line.

124
00:08:55,740 --> 00:08:59,420
You see at the very top over there, we have
a log saw, which basically take this is log

125
00:08:59,420 --> 00:09:02,560
and cuts it and makes these things.

126
00:09:02,560 --> 00:09:10,190
And then quickly, the at the left no, sorry,
at the right of your screen we see the packager.

127
00:09:10,190 --> 00:09:16,110
That basically, you know, takes four, eight,
12 toilet paper rolls, puts them together,

128
00:09:16,110 --> 00:09:17,250
wraps them around.

129
00:09:17,250 --> 00:09:19,520
Nice package at the supermarket.

130
00:09:19,520 --> 00:09:22,199
And at the bottom, the palletizer.

131
00:09:22,199 --> 00:09:29,210
And they are stacked up and put in a pact
and, boom, ready for shipping.

132
00:09:29,210 --> 00:09:34,070
But now you will be asking, is all of this
controlled with JavaScript?

133
00:09:34,070 --> 00:09:36,110
No.

134
00:09:36,110 --> 00:09:40,190
Production a production line even the modern
production lines are controlled by something

135
00:09:40,190 --> 00:09:44,260
called a PLC or programmable logic controller.

136
00:09:44,260 --> 00:09:48,300
I like to call them legacy hardware from the
last century.

137
00:09:48,300 --> 00:09:54,760
This is a last generation Siemens S7 1500,
top of the line.

138
00:09:54,760 --> 00:09:56,029
Great PLC.

139
00:09:56,029 --> 00:10:02,170
There is one little problem with these beasts
that they are still programmed using a thing

140
00:10:02,170 --> 00:10:05,550
called lather logic.

141
00:10:05,550 --> 00:10:07,560
This is an example of a program.

142
00:10:07,560 --> 00:10:13,160
But, you know, like in the PLCs themselves,
we don't have variables.

143
00:10:13,160 --> 00:10:19,180
In most of the PLCs we address variables are
their location in the memory.

144
00:10:19,180 --> 00:10:22,360
We don't know exactly what's stored here and
there.

145
00:10:22,360 --> 00:10:24,690
This is definitely not for the faint of heart.

146
00:10:24,690 --> 00:10:29,430
Programming one of those things makes COBOL
look so 2019.

147
00:10:29,430 --> 00:10:30,930
You know?

148
00:10:30,930 --> 00:10:35,430
And if it's not bad enough, we actually don't
work on these beautiful brand new machines

149
00:10:35,430 --> 00:10:36,430
most of the time.

150
00:10:36,430 --> 00:10:41,759
We use them on the machines that have been
in the field for like 10, 15 years.

151
00:10:41,759 --> 00:10:44,630
This is normally how we find a PLC.

152
00:10:44,630 --> 00:10:46,100
This is Inga.

153
00:10:46,100 --> 00:10:51,310
It's a machine that I had to connect in order
to extract data from in order for our application

154
00:10:51,310 --> 00:10:53,300
to work correctly, right?

155
00:10:53,300 --> 00:10:55,750
And it's a jungle of wire.

156
00:10:55,750 --> 00:11:01,450
And how do we extract data from this medieval
piece of kit?

157
00:11:01,450 --> 00:11:04,640
Well, we add more wires.

158
00:11:04,640 --> 00:11:10,170
We add, you know, like more wires and an industrial
PC in there which we call the gateway.

159
00:11:10,170 --> 00:11:14,670
And the gateway connected on one side to the
PLC with the beautiful' they are Internet

160
00:11:14,670 --> 00:11:15,670
table.

161
00:11:15,670 --> 00:11:24,899
And thanks to our friends at Twilio, we have
a dedicated connection that pumps the data

162
00:11:24,899 --> 00:11:26,889
down to the cloud, right?

163
00:11:26,889 --> 00:11:31,900
And this, the gateway, is where we run all
this JavaScript goodness that we wrote.

164
00:11:31,900 --> 00:11:35,750
But before we get into the JavaScript part,
like I wanted to show you a little bit the

165
00:11:35,750 --> 00:11:37,920
connectivity scenario.

166
00:11:37,920 --> 00:11:44,399
So, on the left we have the little factory
which is our PLC while in the middle the chip

167
00:11:44,399 --> 00:11:46,649
is our gateway, running node.

168
00:11:46,649 --> 00:11:52,829
And bridges kind of like the time gap between,
you know, like the between the last century

169
00:11:52,829 --> 00:11:54,139
and now.

170
00:11:54,139 --> 00:11:56,819
And obviously we have the cloud.

171
00:11:56,819 --> 00:12:00,790
So, the data flow here is interesting.

172
00:12:00,790 --> 00:12:07,329
Because being stuck in the past, that PLC
does not know anything about encryption, security,

173
00:12:07,329 --> 00:12:08,530
not even a password, right?

174
00:12:08,530 --> 00:12:13,380
If I can read from a PLC, I can write to it,
I can reprogram it, I can do whatever I want

175
00:12:13,380 --> 00:12:14,380
with it.

176
00:12:14,380 --> 00:12:19,040
And the only thing that I need to do that
is an IP address which I can connect to.

177
00:12:19,040 --> 00:12:21,260
Now, this is very insecure.

178
00:12:21,260 --> 00:12:24,360
That has been used many times in the past.

179
00:12:24,360 --> 00:12:31,889
Probably the most famous case is when all
the centrifuges in Iran for processing uranium

180
00:12:31,889 --> 00:12:40,610
were disabled by malicious code by disabling
the PLC that spun up the centrifuges and boom,

181
00:12:40,610 --> 00:12:42,410
it's gone.

182
00:12:42,410 --> 00:12:46,029
But when we push the data through the include,
we want everything to be safe.

183
00:12:46,029 --> 00:12:50,820
So, we started looking at the physical boundaries
of security.

184
00:12:50,820 --> 00:12:55,649
And so, we install our gateway into the cabinet
where the PLC is.

185
00:12:55,649 --> 00:12:57,480
We only have one cable.

186
00:12:57,480 --> 00:12:59,319
Nothing gets in, nothing gets out.

187
00:12:59,319 --> 00:13:04,209
Nobody contacts the PLC from outside of the
cabinet of the PLC itself, right?

188
00:13:04,209 --> 00:13:08,160
And outside when we want to reach through
the cloud, you know, like we have a nice secure

189
00:13:08,160 --> 00:13:14,500
modern Linuxbased like VPN on top of an LTE
link and yada, yada, yada, right?

190
00:13:14,500 --> 00:13:21,010
So, we actually implement we actually define
a security perimeter around the PLC so that

191
00:13:21,010 --> 00:13:23,610
we can protect it from attacks.

192
00:13:23,610 --> 00:13:28,350
And we do this by installing the gateway with
a PLC itself, right?

193
00:13:28,350 --> 00:13:32,440
The gateway itself also serves another bunch
of purposes.

194
00:13:32,440 --> 00:13:34,880
We want to consolidate data.

195
00:13:34,880 --> 00:13:42,829
Because as much as our friends at Twilio advertise
their 4G, in most cases factories are, you

196
00:13:42,829 --> 00:13:46,120
know, they're not very well in terms of reception.

197
00:13:46,120 --> 00:13:50,220
Most of the times we get 2G, 40 kilo bytes
a second.

198
00:13:50,220 --> 00:13:53,690
That's not quite enough to actually have a
full stream of data coming out.

199
00:13:53,690 --> 00:13:57,860
We actually do a lot of the data consolidation
on the gateway itself.

200
00:13:57,860 --> 00:14:01,850
That's why we need the processing power of
JavaScript to do that.

201
00:14:01,850 --> 00:14:07,259
And so, we send only, for example, the data
that changes in the PLC.

202
00:14:07,259 --> 00:14:08,940
And we also do a lot of caching.

203
00:14:08,940 --> 00:14:14,620
So, we do we cache everything that we read
on to the device itself because, well, it's

204
00:14:14,620 --> 00:14:15,620
2G.

205
00:14:15,620 --> 00:14:20,700
When and, you know, whatever connectivity
comes and goes and so on and so forth.

206
00:14:20,700 --> 00:14:25,350
In case of connectivity failures, and some
hiccup occurs, we can quickly, or as quick

207
00:14:25,350 --> 00:14:31,620
as we can, reingest all the data that we've
read while that link was down and then continue

208
00:14:31,620 --> 00:14:33,350
at normal operation, right?

209
00:14:33,350 --> 00:14:40,199
So, we started this thing with a wonderful
program by IBM Research that was called Node

210
00:14:40,199 --> 00:14:41,199
Read.

211
00:14:41,199 --> 00:14:43,600
It's a wonderful tool.

212
00:14:43,600 --> 00:14:47,139
It has libraries that allows us to connect
to the PLC.

213
00:14:47,139 --> 00:14:51,529
And you see here a very easy configuration,
every 10 seconds we have the speed, and we

214
00:14:51,529 --> 00:14:52,600
have the first alarm.

215
00:14:52,600 --> 00:14:54,490
Shift it down to the right.

216
00:14:54,490 --> 00:14:57,190
Send it over to Amazon, right?

217
00:14:57,190 --> 00:14:58,970
This is great.

218
00:14:58,970 --> 00:14:59,970
Nice going.

219
00:14:59,970 --> 00:15:01,930
Can do things very quickly.

220
00:15:01,930 --> 00:15:07,819
It's all based in JavaScript, and it's amazing,
but gets really complicated when we start

221
00:15:07,819 --> 00:15:09,970
reading like a bunch of variables.

222
00:15:09,970 --> 00:15:13,519
This is actually a real configuration file
we had in production when we started reading

223
00:15:13,519 --> 00:15:15,759
more valuables to the thing.

224
00:15:15,759 --> 00:15:16,759
And it really gets a mess.

225
00:15:16,759 --> 00:15:18,550
It becomes like a bunch of wires.

226
00:15:18,550 --> 00:15:20,949
You never know who is changing what.

227
00:15:20,949 --> 00:15:24,350
We cannot manage these files and so on and
so forth.

228
00:15:24,350 --> 00:15:28,300
So, a year ago roughly it dawned on me, you
know what?

229
00:15:28,300 --> 00:15:29,699
We have the technology.

230
00:15:29,699 --> 00:15:32,050
We're going to rebuild it.

231
00:15:32,050 --> 00:15:35,180
And we came up with a thing that is called
the PLC reader.

232
00:15:35,180 --> 00:15:41,570
PLC reader is a wonderful little Node.js application
that we wrote in order to clean up the mess

233
00:15:41,570 --> 00:15:43,560
that was Node Read.

234
00:15:43,560 --> 00:15:44,959
JavaScript, why?

235
00:15:44,959 --> 00:15:48,480
Because it was built in Node.

236
00:15:48,480 --> 00:15:51,660
Continue with Node because we had the reliability
over there.

237
00:15:51,660 --> 00:15:57,170
But we managed to bring some automation into
the world of point and click, right?

238
00:15:57,170 --> 00:15:58,430
It does a very simple job.

239
00:15:58,430 --> 00:16:02,509
It reads values from various sources, which
we call drivers.

240
00:16:02,509 --> 00:16:08,259
And processes in various ways through a pipeline
of what we call processers.

241
00:16:08,259 --> 00:16:09,259
Right?

242
00:16:09,259 --> 00:16:12,410
On top of that, it's easily deployed as a
Debian package.

243
00:16:12,410 --> 00:16:15,089
We bought a tool, Debianize.

244
00:16:15,089 --> 00:16:19,269
It's not point and click, but it's YAML files.

245
00:16:19,269 --> 00:16:26,019
Easy to manage, get, central, we can track
who changes what and convert with CircleCI

246
00:16:26,019 --> 00:16:30,350
and Ansible to anywhere we want.

247
00:16:30,350 --> 00:16:32,680
All right?

248
00:16:32,680 --> 00:16:36,089
So, let's look at one of those configuration
files.

249
00:16:36,089 --> 00:16:39,329
Very, very easily here, we have one driver.

250
00:16:39,329 --> 00:16:42,899
A driver that, guess what, next to a PLC.

251
00:16:42,899 --> 00:16:49,350
A Siemens S7PC, we have the IP address in
the port which we connect to, read and write.

252
00:16:49,350 --> 00:16:57,680
Rack and slot our particular parameters for
the RFC106 protocol that we're using to talk

253
00:16:57,680 --> 00:16:58,680
to these things.

254
00:16:58,680 --> 00:17:03,709
And what's important is that every 2 seconds
we read these variable or better, we read

255
00:17:03,709 --> 00:17:08,620
these memory addresses at DB 5102.

256
00:17:08,620 --> 00:17:11,230
And at offset 12.

257
00:17:11,230 --> 00:17:12,850
That's a word.

258
00:17:12,850 --> 00:17:14,780
And that's basically a sign 16.

259
00:17:14,780 --> 00:17:16,760
That's what we call speed.

260
00:17:16,760 --> 00:17:19,260
That's where we find the speed that the machine
is running.

261
00:17:19,260 --> 00:17:24,890
At offset 36, we see the code of the first
alarm and so on and so forth.

262
00:17:24,890 --> 00:17:26,770
That's one of the drivers.

263
00:17:26,770 --> 00:17:29,080
We have many drivers which we wrote.

264
00:17:29,080 --> 00:17:35,180
And to monitor the performance of the gateway.

265
00:17:35,180 --> 00:17:40,160
Here I just listed like load average
Every 10 seconds we read the load average,

266
00:17:40,160 --> 00:17:44,880
CPU percentages, every 10 seconds, calculate
the percentage of the CPU used.

267
00:17:44,880 --> 00:17:49,820
And we have latency to monitor the connection.

268
00:17:49,820 --> 00:17:52,520
And this is how we start getting data into
the system, right?

269
00:17:52,520 --> 00:18:01,400
Doing that is very easy, we have processers
organized one after the other.

270
00:18:01,400 --> 00:18:08,160
Each process can subscribe to one, two, many,
all of the values that are published by the

271
00:18:08,160 --> 00:18:11,830
drivers or are republished by the processers.

272
00:18:11,830 --> 00:18:18,150
And here we have very simple example of three
processers that we are actually using.

273
00:18:18,150 --> 00:18:19,870
The first one is a function.

274
00:18:19,870 --> 00:18:22,850
The only line of JavaScript that probably
you will see in my talk.

275
00:18:22,850 --> 00:18:27,430
Which takes this speed which in the machine
is published in decimeters per minute.

276
00:18:27,430 --> 00:18:28,890
I don't know why.

277
00:18:28,890 --> 00:18:33,200
But we divide by ten, meters per minute.

278
00:18:33,200 --> 00:18:39,470
And the second one is string, we read alarms
as unsigned 16bit integers.

279
00:18:39,470 --> 00:18:42,970
But they're not numbers, we make an average
on an alarm code.

280
00:18:42,970 --> 00:18:45,640
We convert them into strings and consolidate.

281
00:18:45,640 --> 00:18:50,270
Like I said before, if the alarm changes,
we publish it.

282
00:18:50,270 --> 00:18:55,270
Otherwise, if the alarm is not changed, we
swallow that message, right?

283
00:18:55,270 --> 00:19:00,220
But the most important probably processers
that we have are like the last two that we

284
00:19:00,220 --> 00:19:01,800
use at the end of the pipeline.

285
00:19:01,800 --> 00:19:04,680
The batcher and the MQTT.

286
00:19:04,680 --> 00:19:11,050
The batcher is very simply something that
subscribes to all the messages, accumulates

287
00:19:11,050 --> 00:19:17,270
them, and every 30 seconds pushes out that
thing that you see like over there.

288
00:19:17,270 --> 00:19:18,550
Functions out a message.

289
00:19:18,550 --> 00:19:24,430
Which is no more, no less than an array of
timestamp at which the data was read and the

290
00:19:24,430 --> 00:19:26,650
vault of the data point.

291
00:19:26,650 --> 00:19:27,680
Giant array.

292
00:19:27,680 --> 00:19:33,620
We also compress it so it's nice and tiny
when we send over our 2G link.

293
00:19:33,620 --> 00:19:37,090
And then the MQTT processer does what it's
supposed to be doing.

294
00:19:37,090 --> 00:19:41,630
Sends it over to MQTT secure, blah, blah,
blah, blah.

295
00:19:41,630 --> 00:19:45,900
Very nays, right?

296
00:19:45,900 --> 00:19:47,660
This is how we use JavaScript.

297
00:19:47,660 --> 00:19:54,070
Everything behind this Y ML fuel, ever processer,
every driver, the entire infrastructure to

298
00:19:54,070 --> 00:19:57,180
drive this thing is written in JavaScript.

299
00:19:57,180 --> 00:20:00,990
And we're using it like like it's been a labor
of love.

300
00:20:00,990 --> 00:20:09,850
We are extremely proud that it's running in
production at real customer's sites.

301
00:20:09,850 --> 00:20:13,560
It's feeding KEdge with live real data.

302
00:20:13,560 --> 00:20:16,020
It has been working out great.

303
00:20:16,020 --> 00:20:22,670
If you are a dad and, you know, maybe how
proud you are.

304
00:20:22,670 --> 00:20:25,980
The other thing that I mentioned, there were
a couple of extra things.

305
00:20:25,980 --> 00:20:28,230
Enough with the kit.

306
00:20:28,230 --> 00:20:29,320
YAML.

307
00:20:29,320 --> 00:20:37,420
We've wrote a bunch of YAML extensions which
we needed for these configuration files.

308
00:20:37,420 --> 00:20:39,170
YAML is great, but it's also terrible.

309
00:20:39,170 --> 00:20:42,710
It doesn't allow including, it doesn't allow
a bunch of things.

310
00:20:42,710 --> 00:20:48,150
So, we wrote a little extension over there
to merge a raise over raise.

311
00:20:48,150 --> 00:20:52,510
So, if we have in one file define a list of
drivers and in another file another list of

312
00:20:52,510 --> 00:20:55,540
drivers, we can just merge them together.

313
00:20:55,540 --> 00:20:58,600
It works great, obviously with the include
driver.

314
00:20:58,600 --> 00:21:03,520
So, we include a part a snippet of YAML into
another file.

315
00:21:03,520 --> 00:21:09,260
Making sure that all the variables are visible
by the included files and whatnot.

316
00:21:09,260 --> 00:21:11,430
So, there is a little bit of logic over there.

317
00:21:11,430 --> 00:21:16,140
And then the last one we use a lots for configs
ration is the join which takes a lot of joins

318
00:21:16,140 --> 00:21:18,510
and concatenates them into a giant string.

319
00:21:18,510 --> 00:21:25,910
It's great for variables, a certificate ID
that repeats 25 million times in our configuration

320
00:21:25,910 --> 00:21:26,910
files.

321
00:21:26,910 --> 00:21:27,910
Right?

322
00:21:27,910 --> 00:21:34,530
The other thing that I talked about was Debianize,
it's a tool we wrote in order to take your

323
00:21:34,530 --> 00:21:37,790
npm package and have it as a Deb.

324
00:21:37,790 --> 00:21:39,160
Why?

325
00:21:39,160 --> 00:21:41,430
We use Ubuntu on our gateways.

326
00:21:41,430 --> 00:21:45,060
It was easy to get it out of the way.

327
00:21:45,060 --> 00:21:51,530
You just slap it in your package.JSON, and
then run the npm, this is the configuration

328
00:21:51,530 --> 00:21:53,760
of the PLC reader in itself.

329
00:21:53,760 --> 00:21:54,840
It's very complex.

330
00:21:54,840 --> 00:21:59,020
It has sensible defaults so it's a one line
of addition.

331
00:21:59,020 --> 00:22:01,440
Makes a Debian package for you.

332
00:22:01,440 --> 00:22:04,290
So, what's the state for us?

333
00:22:04,290 --> 00:22:09,490
What's the state in terms of all the stuff
we have wrote so far?

334
00:22:09,490 --> 00:22:12,790
We have PLC reader which is open source.

335
00:22:12,790 --> 00:22:16,510
You can just check it out on npm.

336
00:22:16,510 --> 00:22:20,480
We have Debianize which is out for everybody
to use.

337
00:22:20,480 --> 00:22:27,451
YAML extensions, open source, get them, download
them even if you don't care about PLCs or

338
00:22:27,451 --> 00:22:28,600
industrial machines.

339
00:22:28,600 --> 00:22:29,600
They're there.

340
00:22:29,600 --> 00:22:31,120
They work.

341
00:22:31,120 --> 00:22:35,760
We also throw in because you're such a good
audience, we throw in a freebie, the IRONdb

342
00:22:35,760 --> 00:22:36,760
persister.

343
00:22:36,760 --> 00:22:43,540
That's the time series database we use for
telemetry data.

344
00:22:43,540 --> 00:22:50,590
It was a fantastic database created by a friend
of mine, Theo.

345
00:22:50,590 --> 00:22:55,500
But they had no JavaScript drivers for them,
so we wrote them and they're also available

346
00:22:55,500 --> 00:22:59,410
for you guys to use if you use IRONdb.

347
00:22:59,410 --> 00:23:04,530
And that's pretty much it for me because I
think that I have two minutes and I was wonder

348
00:23:04,530 --> 00:23:07,790
for you guys have any questions?

349
00:23:07,790 --> 00:23:09,830
Sure.

350
00:23:09,830 --> 00:23:23,070
AUDIENCE: [ Away from microphone ]
PIER: Because that's right.

351
00:23:23,070 --> 00:23:30,290
Because actually it is readable enough that
it can be handled by presale support.

352
00:23:30,290 --> 00:23:32,190
Because in most for the inclusions.

353
00:23:32,190 --> 00:23:33,710
That's why we wrote the YAML extensions.

354
00:23:33,710 --> 00:23:37,370
There are parts that people don't touch.

355
00:23:37,370 --> 00:23:42,170
But, for example, the list of addresses in
the memory, in the PLC, that comes from an

356
00:23:42,170 --> 00:23:46,900
Excel file that the machine manufacturer actually
makes.

357
00:23:46,900 --> 00:23:49,340
So, that one is handled by a different team.

358
00:23:49,340 --> 00:23:53,250
When they change the PLC programming, they
can just change that part.

359
00:23:53,250 --> 00:23:55,330
And then, you know, like all the rest flows
together.

360
00:23:55,330 --> 00:24:00,580
So, that's why we chose to use YAML rather
than JavaScript for that.

361
00:24:00,580 --> 00:24:01,990
Yeah.

362
00:24:01,990 --> 00:24:04,810
Anything else?

363
00:24:04,810 --> 00:24:07,670
There was a question over there at the bottom.

364
00:24:07,670 --> 00:24:10,450
But, you know, like I guess, nobody picks
it up.

365
00:24:10,450 --> 00:24:14,590
AUDIENCE: [ Away from microphone ]
PIER: Wow.

366
00:24:14,590 --> 00:24:17,540
Such an amazing question, right?

367
00:24:17,540 --> 00:24:22,580
I spent the first 15 years of my career building
Java systems.

368
00:24:22,580 --> 00:24:27,750
I'm one of the cofounders of Jakarta and the
XML Apache projects and I have been doing

369
00:24:27,750 --> 00:24:30,240
XML since 1997.

370
00:24:30,240 --> 00:24:34,770
For me it's like PLC reader, it's a labor
of love.

371
00:24:34,770 --> 00:24:41,891
The problem over there is that we have seen
that there is an aggressive actor in the Java

372
00:24:41,891 --> 00:24:48,200
world that is actually starting to copyright
and push their copyright of the APIs out.

373
00:24:48,200 --> 00:24:51,310
And we're talking about Oracle over there.

374
00:24:51,310 --> 00:24:57,110
That didn't give us confidence that what we
were building for especially in this case

375
00:24:57,110 --> 00:25:03,420
when these gateways are over a 2G link, we
didn't have the confidence that we could update

376
00:25:03,420 --> 00:25:08,930
the Java virtual machine every six months
like Oracle wants us to do kind of thing.

377
00:25:08,930 --> 00:25:15,720
And I know that Amazon came out with some
wonderful things on their side.

378
00:25:15,720 --> 00:25:19,670
But I wonder how long those are going to last
in a court.

379
00:25:19,670 --> 00:25:25,880
So, JavaScript, on the other hand, you know,
ECMA, pretty much every implementation out

380
00:25:25,880 --> 00:25:27,430
there is open source.

381
00:25:27,430 --> 00:25:32,490
And it gives us the stability that we need.

382
00:25:32,490 --> 00:25:36,710
Thank you very much.

