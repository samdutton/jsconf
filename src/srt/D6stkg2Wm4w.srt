1
00:00:34,420 --> 00:00:37,660

hello everyone so I'm going to start

2
00:00:37,660 --> 00:00:40,449
with a little quiz for you so I'm going

3
00:00:40,449 --> 00:00:43,809
to use some snippets of code and I want

4
00:00:43,809 --> 00:00:46,120
you to tell me what programming language

5
00:00:46,120 --> 00:00:51,200
it is so I start with an easy one

6
00:00:51,210 --> 00:00:55,629
anybody yeah i wish i had some goodies

7
00:00:55,629 --> 00:00:59,019
for words so next one is also an easy

8
00:00:59,019 --> 00:01:09,169
one yeah c++ I what about the last one

9
00:01:09,179 --> 00:01:14,319
yeah it's actually C++ so if you want to

10
00:01:14,319 --> 00:01:16,179
make sure that c++ we just have to

11
00:01:16,179 --> 00:01:20,170
include two things at the at the top and

12
00:01:20,170 --> 00:01:23,950
at the bottom and what's inside looks

13
00:01:23,950 --> 00:01:27,220
like javascript but it's actually C++ so

14
00:01:27,220 --> 00:01:30,759
you can give that 5 2 GC c or g + + is

15
00:01:30,759 --> 00:01:34,539
going to compile binary and execute like

16
00:01:34,539 --> 00:01:37,659
if it was JavaScript so the goal of the

17
00:01:37,659 --> 00:01:40,420
talk is to explain you how I made it

18
00:01:40,420 --> 00:01:45,579
work so you might be wondering why did I

19
00:01:45,579 --> 00:01:48,670
do that because Java sweeping cheapest

20
00:01:48,670 --> 00:01:53,109
price like why the and so I was in

21
00:01:53,109 --> 00:01:55,750
a class and they wanted me to make a

22
00:01:55,750 --> 00:01:59,890
rapper a c++ wrapper around this an ugly

23
00:01:59,890 --> 00:02:03,820
capi so everybody in my class they

24
00:02:03,820 --> 00:02:06,640
weren't like doing a creating like

25
00:02:06,640 --> 00:02:09,100
dozens of files with many classes on

26
00:02:09,100 --> 00:02:12,040
everything and I was like yeah but you

27
00:02:12,040 --> 00:02:15,340
you could just just put a JSON put

28
00:02:15,340 --> 00:02:18,340
everything in a JSON object and oh yeah

29
00:02:18,340 --> 00:02:22,600
it's working so I I try to make it work

30
00:02:22,600 --> 00:02:26,890
in the in C++ and then once i get json

31
00:02:26,890 --> 00:02:28,989
walking i try to do all the pattern of

32
00:02:28,989 --> 00:02:33,160
the language like lambda functions on

33
00:02:33,160 --> 00:02:36,250
protoje Pelini returns so my plan is

34
00:02:36,250 --> 00:02:39,130
going to be first we are going to to

35
00:02:39,130 --> 00:02:44,650
write a json in c++ and then we're going

36
00:02:44,650 --> 00:02:47,950
to imitate the syntax of

37
00:02:47,950 --> 00:02:52,629
c++ 11-under functions into into the

38
00:02:52,629 --> 00:02:55,209
JavaScript syntax and finally we are

39
00:02:55,209 --> 00:02:58,530
going to see how to under prototype I'll

40
00:02:58,530 --> 00:03:02,530
prototypal inheritance so let's start

41
00:03:02,530 --> 00:03:06,580
with Jason so our goal is to make this

42
00:03:06,580 --> 00:03:10,989
or something like this compile in C++ so

43
00:03:10,989 --> 00:03:13,870
the first thing we want to see I want to

44
00:03:13,870 --> 00:03:17,170
check is the general script primitives

45
00:03:17,170 --> 00:03:20,819
so in JavaScript they are undefined no

46
00:03:20,819 --> 00:03:26,140
true false numbers and strings and you

47
00:03:26,140 --> 00:03:30,549
can see on the left you can see how each

48
00:03:30,549 --> 00:03:34,660
other some tax is in JavaScript and we

49
00:03:34,660 --> 00:03:37,870
want it to work on C++ so the first

50
00:03:37,870 --> 00:03:40,620
thing we are going to do is to make a

51
00:03:40,620 --> 00:03:43,420
structure core value that is going to

52
00:03:43,420 --> 00:03:45,390
annul all the different data types

53
00:03:45,390 --> 00:03:48,940
because in C++ everything is strongly

54
00:03:48,940 --> 00:03:52,060
typed and in javascript is dynamically

55
00:03:52,060 --> 00:03:55,299
typed so we want only one that one data

56
00:03:55,299 --> 00:03:58,840
type and at one time we're going to see

57
00:03:58,840 --> 00:04:02,130
which one we have and dispatch like that

58
00:04:02,130 --> 00:04:06,250
so we are going to make a fruit value

59
00:04:06,250 --> 00:04:09,280
and the other way to overload the

60
00:04:09,280 --> 00:04:12,370
constructor so a constructor with zero

61
00:04:12,370 --> 00:04:15,579
argument is going to be undefined with

62
00:04:15,579 --> 00:04:18,430
double is going to be a number an int is

63
00:04:18,430 --> 00:04:20,769
going to be a number a boolean is going

64
00:04:20,769 --> 00:04:23,139
to be a brown and the cost char star is

65
00:04:23,139 --> 00:04:26,350
going to be a string so now how do you

66
00:04:26,350 --> 00:04:28,660
call it in C++ how do you create a new

67
00:04:28,660 --> 00:04:32,080
viable in C++ so there are three ways to

68
00:04:32,080 --> 00:04:35,979
do it so the first one is you put the

69
00:04:35,979 --> 00:04:40,210
type name and the variable name and it

70
00:04:40,210 --> 00:04:42,340
will call the constructor without any

71
00:04:42,340 --> 00:04:45,460
arguments and then you can put the type

72
00:04:45,460 --> 00:04:48,460
the variable name and in parentheses the

73
00:04:48,460 --> 00:04:52,000
value or you can do type viable name

74
00:04:52,000 --> 00:04:55,810
equals to the value so yeah I am pretty

75
00:04:55,810 --> 00:04:58,990
sure you can see I'm targeting now so

76
00:04:58,990 --> 00:05:01,460
we're first going to tag def

77
00:05:01,460 --> 00:05:04,940
you into VAR and the second one is not

78
00:05:04,940 --> 00:05:07,130
very useful so we are going to remove it

79
00:05:07,130 --> 00:05:10,580
and then with only those this simple

80
00:05:10,580 --> 00:05:13,819
class we are able to imitate JavaScript

81
00:05:13,819 --> 00:05:20,060
syntax in C++ and in fact we are able to

82
00:05:20,060 --> 00:05:23,509
write the liquor I just showed before

83
00:05:23,509 --> 00:05:28,310
and it's working but at the moment this

84
00:05:28,310 --> 00:05:31,389
exact code is on compiling because in

85
00:05:31,389 --> 00:05:36,860
C++ you cannot write code and anywhere

86
00:05:36,860 --> 00:05:38,990
you cannot run code anywhere you have to

87
00:05:38,990 --> 00:05:41,090
run code in a function so we are going

88
00:05:41,090 --> 00:05:42,979
to wrap everything into a main function

89
00:05:42,979 --> 00:05:47,389
and basically everything which is int

90
00:05:47,389 --> 00:05:50,449
main and above is going to be our first

91
00:05:50,449 --> 00:05:53,479
include and the last time we to be our

92
00:05:53,479 --> 00:05:57,710
last include so at this point we can

93
00:05:57,710 --> 00:06:00,139
write JavaScript primitives so it's

94
00:06:00,139 --> 00:06:02,900
pretty nice and now we are going to to

95
00:06:02,900 --> 00:06:06,310
see how to make arrays and jason and

96
00:06:06,310 --> 00:06:10,960
objects so it's not it's not going to be

97
00:06:10,960 --> 00:06:14,419
mostly a difficult implementation it's

98
00:06:14,419 --> 00:06:15,740
not going to be difficult to implement

99
00:06:15,740 --> 00:06:18,440
it but we are going to see how to make

100
00:06:18,440 --> 00:06:21,110
it look like JavaScript and so it's

101
00:06:21,110 --> 00:06:24,050
mostly about syntax Mosul implementation

102
00:06:24,050 --> 00:06:28,460
so the first thing i did i tried was to

103
00:06:28,460 --> 00:06:30,650
make a very thick function called a and

104
00:06:30,650 --> 00:06:35,360
then give it a list of arguments and the

105
00:06:35,360 --> 00:06:41,570
problem is raya dick functions in c++

106
00:06:41,570 --> 00:06:44,630
are made with macros and the mac road

107
00:06:44,630 --> 00:06:48,740
don't do any type conversion so here Jes

108
00:06:48,740 --> 00:06:51,139
conf is going to be a cost roster and

109
00:06:51,139 --> 00:06:53,659
not a value so we are kind of stuck and

110
00:06:53,659 --> 00:06:56,870
we cannot reuse this one so the signal

111
00:06:56,870 --> 00:07:00,740
atoms was to use some operator

112
00:07:00,740 --> 00:07:03,919
overloading a curry and I was able to

113
00:07:03,919 --> 00:07:07,340
get back the bracket notation but I

114
00:07:07,340 --> 00:07:10,729
didn't manage to only have the bracket

115
00:07:10,729 --> 00:07:13,800
notation so I have some strange door OH

116
00:07:13,800 --> 00:07:18,270
and underscored coma so it looks a bit

117
00:07:18,270 --> 00:07:21,270
like JavaScript but not quiet and I

118
00:07:21,270 --> 00:07:24,330
wasn't pleased with it but the right the

119
00:07:24,330 --> 00:07:26,789
good part with it is that it does it

120
00:07:26,789 --> 00:07:30,990
does enabled type conversion so a cool

121
00:07:30,990 --> 00:07:33,300
thing we can do is to rewrite the first

122
00:07:33,300 --> 00:07:36,270
one as a macro that generates the second

123
00:07:36,270 --> 00:07:39,349
one and we can get the first one to work

124
00:07:39,349 --> 00:07:44,940
but this is not something I want the

125
00:07:44,940 --> 00:07:48,090
user to type and finally I went to see

126
00:07:48,090 --> 00:07:52,139
press press 11 initializer list and the

127
00:07:52,139 --> 00:07:56,699
just give us something we want it's just

128
00:07:56,699 --> 00:07:59,460
like a JavaScript array instead of the

129
00:07:59,460 --> 00:08:01,469
square brackets you've got curly

130
00:08:01,469 --> 00:08:04,319
brackets so it's pretty much walking and

131
00:08:04,319 --> 00:08:07,259
the implementation is read figure so you

132
00:08:07,259 --> 00:08:09,690
just overrode the value constructor and

133
00:08:09,690 --> 00:08:14,969
to add to to implement an initializer

134
00:08:14,969 --> 00:08:17,400
list of values and it does a time

135
00:08:17,400 --> 00:08:19,620
conversion it under the viatical

136
00:08:19,620 --> 00:08:22,639
agreement so it was working pretty well

137
00:08:22,639 --> 00:08:26,460
so now we are we have the array is

138
00:08:26,460 --> 00:08:31,229
working now we want to make the object

139
00:08:31,229 --> 00:08:34,229
walking and I'm going to go to a fun

140
00:08:34,229 --> 00:08:36,419
fight in the JavaScript first if you

141
00:08:36,419 --> 00:08:41,070
type this in your console is going to be

142
00:08:41,070 --> 00:08:45,000
evaluated to one because curly braces

143
00:08:45,000 --> 00:08:48,540
will be a block and a i'm colonel will

144
00:08:48,540 --> 00:08:51,620
be a level so it's unfortunate

145
00:08:51,620 --> 00:08:54,959
fortunately in javascript if you put a

146
00:08:54,959 --> 00:08:57,449
hey equal to that is going to become

147
00:08:57,449 --> 00:09:01,290
treated as an object but in C++ this is

148
00:09:01,290 --> 00:09:05,699
the standard behavior so II we are not

149
00:09:05,699 --> 00:09:08,760
going to be able to reproduce Jason

150
00:09:08,760 --> 00:09:10,920
notation because of that because we

151
00:09:10,920 --> 00:09:13,320
cannot overload labelled operator which

152
00:09:13,320 --> 00:09:18,769
doesn't exist so we cannot write it so

153
00:09:18,769 --> 00:09:23,110
we're going back to try on the arrow and

154
00:09:23,110 --> 00:09:25,779
the first thing I did was like on the

155
00:09:25,779 --> 00:09:29,950
RAS make an o function that's going to

156
00:09:29,950 --> 00:09:32,769
take multiple arguments and the first

157
00:09:32,769 --> 00:09:34,750
argument is going to be a key the second

158
00:09:34,750 --> 00:09:37,589
a value and then a key and the value etc

159
00:09:37,589 --> 00:09:41,019
so it works with a trick I mentioned

160
00:09:41,019 --> 00:09:44,829
before but it doesn't feel like a key

161
00:09:44,829 --> 00:09:47,560
value pair and if you don't indent your

162
00:09:47,560 --> 00:09:50,800
card or put brakes at the right position

163
00:09:50,800 --> 00:09:55,540
it just just doesn't feel right so next

164
00:09:55,540 --> 00:09:58,209
I was like a crazy into a parrot

165
00:09:58,209 --> 00:10:01,630
overload and I I came up with something

166
00:10:01,630 --> 00:10:04,779
like that but but the prime is it

167
00:10:04,779 --> 00:10:08,440
doesn't really look like JavaScript but

168
00:10:08,440 --> 00:10:11,589
with operator overload we can do some

169
00:10:11,589 --> 00:10:14,950
nice things and in the end I came up

170
00:10:14,950 --> 00:10:18,370
with this one so we are still using the

171
00:10:18,370 --> 00:10:20,769
initializer list with the curly brackets

172
00:10:20,769 --> 00:10:26,170
and in order to get the key value you

173
00:10:26,170 --> 00:10:28,510
are doing underscore bracket key equals

174
00:10:28,510 --> 00:10:31,029
to value so this is a bit more verbose

175
00:10:31,029 --> 00:10:35,500
than key current value but I think it's

176
00:10:35,500 --> 00:10:37,449
a good trade-off or at least it's the

177
00:10:37,449 --> 00:10:40,810
best reader if I could come up with so

178
00:10:40,810 --> 00:10:44,380
if you want to do some crazy things with

179
00:10:44,380 --> 00:10:47,110
presidents with operator overloading you

180
00:10:47,110 --> 00:10:48,910
have to get this president's list in my

181
00:10:48,910 --> 00:10:51,760
you have to have it in mind so here it's

182
00:10:51,760 --> 00:10:55,120
working because the bracket operator has

183
00:10:55,120 --> 00:10:57,640
more present than G equal one which has

184
00:10:57,640 --> 00:11:01,899
more precedence than the comma 1 so we

185
00:11:01,899 --> 00:11:04,240
are going quickly going going to see how

186
00:11:04,240 --> 00:11:07,089
is walking in reality so we've got an

187
00:11:07,089 --> 00:11:08,890
underscore instance of the class

188
00:11:08,890 --> 00:11:14,010
underscore that has a bracket operator

189
00:11:14,010 --> 00:11:18,459
that creates a key value pair on set the

190
00:11:18,459 --> 00:11:22,269
key and then the key value pair as an

191
00:11:22,269 --> 00:11:25,180
equal operator that set the value so now

192
00:11:25,180 --> 00:11:27,699
at this point we've got a key value pair

193
00:11:27,699 --> 00:11:31,300
and we just can give the key value pair

194
00:11:31,300 --> 00:11:33,640
we just can overload the constructor of

195
00:11:33,640 --> 00:11:34,810
the value with

196
00:11:34,810 --> 00:11:38,140
value pair and we got we got it working

197
00:11:38,140 --> 00:11:40,750
so the implementation is a bit tricky

198
00:11:40,750 --> 00:11:45,940
tricky but it's and now the

199
00:11:45,940 --> 00:11:49,150
result is we've got JSON working so it's

200
00:11:49,150 --> 00:11:52,240
not exactly the same syntax but the

201
00:11:52,240 --> 00:11:54,460
great thing is we are the exact same

202
00:11:54,460 --> 00:11:58,810
possibilities as JSON so we can write

203
00:11:58,810 --> 00:12:01,660
the we can put all our JavaScript code

204
00:12:01,660 --> 00:12:04,300
to jason to super stressed with that

205
00:12:04,300 --> 00:12:10,360
it's so now we've got objects

206
00:12:10,360 --> 00:12:15,670
walking and and a big another big part

207
00:12:15,670 --> 00:12:19,540
of of JavaScript our lambda functions so

208
00:12:19,540 --> 00:12:22,660
unfortunately for us in C++ 11 they

209
00:12:22,660 --> 00:12:26,260
introduced lambda functions but we've

210
00:12:26,260 --> 00:12:30,029
got a program which is that the the

211
00:12:30,029 --> 00:12:33,279
syntax is ugly it's like a bracket and

212
00:12:33,279 --> 00:12:36,100
everything so we we don't want to write

213
00:12:36,100 --> 00:12:44,680
the the c++ syntax so what we want to do

214
00:12:44,680 --> 00:12:46,750
is to write function parentage this wife

215
00:12:46,750 --> 00:12:49,870
and get is translated to the thing on

216
00:12:49,870 --> 00:12:55,930
the left so unfortunately the only way I

217
00:12:55,930 --> 00:12:59,020
found to do it was to use a macro so

218
00:12:59,020 --> 00:13:01,810
we're going to make a macro function is

219
00:13:01,810 --> 00:13:03,490
going to take a leave a decrease of

220
00:13:03,490 --> 00:13:05,770
arguments and just copy and paste it and

221
00:13:05,770 --> 00:13:10,540
put the boilerplate around and we have

222
00:13:10,540 --> 00:13:12,370
also ran across the program which is

223
00:13:12,370 --> 00:13:16,120
that c++ you are in suppressed first you

224
00:13:16,120 --> 00:13:18,940
have to type every viable and even in

225
00:13:18,940 --> 00:13:24,850
the arguments so there's a quick ACK so

226
00:13:24,850 --> 00:13:27,640
you have to put VAR before is a viable

227
00:13:27,640 --> 00:13:32,650
name the argument name in our GSP p but

228
00:13:32,650 --> 00:13:35,440
other than that it's working so now

229
00:13:35,440 --> 00:13:38,890
we've got we are able to create lambda

230
00:13:38,890 --> 00:13:44,320
functions that looks like that that

231
00:13:44,320 --> 00:13:46,630
looks like javascript and now we want to

232
00:13:46,630 --> 00:13:47,720
store them

233
00:13:47,720 --> 00:13:51,110
so in so again in C++ everything is from

234
00:13:51,110 --> 00:13:55,009
retyped so we are so two functions with

235
00:13:55,009 --> 00:13:56,750
different arguments have two different

236
00:13:56,750 --> 00:14:00,439
types but we are we are lucky enough

237
00:14:00,439 --> 00:14:02,060
that we have only one data type to

238
00:14:02,060 --> 00:14:05,000
handle which is a type value so at every

239
00:14:05,000 --> 00:14:07,370
function return the value and every

240
00:14:07,370 --> 00:14:11,000
function thanked 0 1 or more values so

241
00:14:11,000 --> 00:14:13,819
we can just overall though the value

242
00:14:13,819 --> 00:14:16,850
constructor with all the rets we want to

243
00:14:16,850 --> 00:14:22,069
support then we want to call the

244
00:14:22,069 --> 00:14:25,639
function we have thought and it's as

245
00:14:25,639 --> 00:14:28,519
another divergence between c++ and java

246
00:14:28,519 --> 00:14:32,990
script in the core semantics so in sip

247
00:14:32,990 --> 00:14:36,410
in c++ if a function takes two arguments

248
00:14:36,410 --> 00:14:39,230
if you give it three is why it won't

249
00:14:39,230 --> 00:14:41,810
work in javascript if you give less

250
00:14:41,810 --> 00:14:45,079
arguments it will feel the other with

251
00:14:45,079 --> 00:14:47,959
undefined and if you give more it will

252
00:14:47,959 --> 00:14:52,459
just in your the last one so we are just

253
00:14:52,459 --> 00:14:56,750
going to to write this so if we've got a

254
00:14:56,750 --> 00:14:59,899
function store that has zero arguments

255
00:14:59,899 --> 00:15:02,389
we just call it with zero argument if it

256
00:15:02,389 --> 00:15:04,550
has one argument we are going to call

257
00:15:04,550 --> 00:15:06,559
with the arguments were given and if it

258
00:15:06,559 --> 00:15:08,870
as two we're going to call with a and

259
00:15:08,870 --> 00:15:12,579
undefined and so we get it working but

260
00:15:12,579 --> 00:15:15,079
if you want to support many averages

261
00:15:15,079 --> 00:15:19,220
it's a lot of copy and paste so the the

262
00:15:19,220 --> 00:15:20,750
implementation is dependent on the

263
00:15:20,750 --> 00:15:23,779
number of of the RET of the maximum

264
00:15:23,779 --> 00:15:28,619
arity of functions you want to support

265
00:15:28,629 --> 00:15:32,389
so now let's get to interesting thing so

266
00:15:32,389 --> 00:15:37,250
we've got Jason we've got functions so

267
00:15:37,250 --> 00:15:40,870
now we can tackle the one things that

268
00:15:40,870 --> 00:15:44,420
javascript stands apart from all of us

269
00:15:44,420 --> 00:15:47,839
or all other languages which is for the

270
00:15:47,839 --> 00:15:51,550
type or inheritance so in order to do it

271
00:15:51,550 --> 00:15:54,259
the concept is very simple when you have

272
00:15:54,259 --> 00:15:56,600
an object and you want to reach with a

273
00:15:56,600 --> 00:15:59,000
property from the subject you're going

274
00:15:59,000 --> 00:15:59,889
to see if

275
00:15:59,889 --> 00:16:03,069
is inside the object and if it if it is

276
00:16:03,069 --> 00:16:05,379
if it is inside the object you're just

277
00:16:05,379 --> 00:16:09,220
going to give it back but now if it

278
00:16:09,220 --> 00:16:11,470
isn't inside you're going to ask the

279
00:16:11,470 --> 00:16:13,720
parent of the object and see if it's

280
00:16:13,720 --> 00:16:16,389
inside and this you are doing do it

281
00:16:16,389 --> 00:16:19,809
going to do it recursively until you

282
00:16:19,809 --> 00:16:23,439
find the object the property you want to

283
00:16:23,439 --> 00:16:26,109
look for and if it doesn't if you if you

284
00:16:26,109 --> 00:16:28,449
if the properties and they're they're

285
00:16:28,449 --> 00:16:32,379
going to return the fine so in a so you

286
00:16:32,379 --> 00:16:34,329
just have to overall the bracket

287
00:16:34,329 --> 00:16:36,639
operator to reproduce prototypal

288
00:16:36,639 --> 00:16:40,209
inheritance and there's only one thing

289
00:16:40,209 --> 00:16:41,709
you have to remember when implant

290
00:16:41,709 --> 00:16:44,619
implementing this is that when you read

291
00:16:44,619 --> 00:16:48,009
a property from an object is going to

292
00:16:48,009 --> 00:16:50,319
climb the prototype chain however if you

293
00:16:50,319 --> 00:16:52,899
set the property to an object is going

294
00:16:52,899 --> 00:16:56,169
to set it on the object itself so I

295
00:16:56,169 --> 00:16:59,019
didn't know about it and now that I know

296
00:16:59,019 --> 00:17:06,760
it seems logical so so yeah and so now

297
00:17:06,760 --> 00:17:09,189
we can retrieve a property from the

298
00:17:09,189 --> 00:17:10,990
deposit I chain but how do you actually

299
00:17:10,990 --> 00:17:13,689
set up to the type shown so I'm pretty

300
00:17:13,689 --> 00:17:17,860
sure all of you I've I've read the do

301
00:17:17,860 --> 00:17:20,169
black Douglas Crockford implementation

302
00:17:20,169 --> 00:17:23,079
of objected create we just with which

303
00:17:23,079 --> 00:17:27,089
does some crazy stuff with prototype new

304
00:17:27,089 --> 00:17:30,460
functions and everything and in fact if

305
00:17:30,460 --> 00:17:33,669
you allow to the user underscore

306
00:17:33,669 --> 00:17:35,500
underscore proto it's really easy to

307
00:17:35,500 --> 00:17:39,429
write so object of crate is a function

308
00:17:39,429 --> 00:17:41,049
that takes a parent and return an object

309
00:17:41,049 --> 00:17:43,000
which has the underscore underscore

310
00:17:43,000 --> 00:17:46,120
proto property set to the parent so ill

311
00:17:46,120 --> 00:17:49,330
we can make it work like in two lines of

312
00:17:49,330 --> 00:17:54,760
code so it's very nice and but it's not

313
00:17:54,760 --> 00:17:57,490
enough all the JavaScript code isn't

314
00:17:57,490 --> 00:17:59,919
using objective trades so you want to be

315
00:17:59,919 --> 00:18:02,470
able to use the new constructor the new

316
00:18:02,470 --> 00:18:05,289
operator so fortunately for us it's also

317
00:18:05,289 --> 00:18:07,419
possible to do to implement it in pure

318
00:18:07,419 --> 00:18:09,820
JavaScript if you are now and does come

319
00:18:09,820 --> 00:18:12,879
on the scalp photo so let's see how we

320
00:18:12,879 --> 00:18:13,750
do it

321
00:18:13,750 --> 00:18:16,110
so new is going to be a function that

322
00:18:16,110 --> 00:18:19,900
takes a constructor and that going to

323
00:18:19,900 --> 00:18:21,040
reach on the function that takes

324
00:18:21,040 --> 00:18:27,880
parameters so we're going to create an

325
00:18:27,880 --> 00:18:30,670
object which has underscore underscore

326
00:18:30,670 --> 00:18:33,100
proto set to the constructor prototype

327
00:18:33,100 --> 00:18:36,400
so we set the prototype chain and then

328
00:18:36,400 --> 00:18:38,620
we are going to call the constructor in

329
00:18:38,620 --> 00:18:41,980
in this case it's going to be point with

330
00:18:41,980 --> 00:18:45,010
this set to be the new object we just

331
00:18:45,010 --> 00:18:48,100
created and all the arguments are going

332
00:18:48,100 --> 00:18:51,400
to be passing so we are just going to do

333
00:18:51,400 --> 00:18:56,590
point apply the new object on 10 and 20

334
00:18:56,590 --> 00:18:59,530
and return the objects so it's a really

335
00:18:59,530 --> 00:19:01,360
nice thing that we are able to do that

336
00:19:01,360 --> 00:19:06,730
in JavaScript well now in C++ and the

337
00:19:06,730 --> 00:19:08,470
only downside is that you have to write

338
00:19:08,470 --> 00:19:10,690
to wrap the constructor name into

339
00:19:10,690 --> 00:19:14,080
parentheses but it's also accept it's

340
00:19:14,080 --> 00:19:20,410
also working in JavaScript it's cool so

341
00:19:20,410 --> 00:19:24,010
now I've been a I've shown you how to

342
00:19:24,010 --> 00:19:30,660
make objects lambda functions and

343
00:19:30,660 --> 00:19:34,620
prototypal inheritance if you ask me a

344
00:19:34,620 --> 00:19:37,690
wet javascript is i would say those

345
00:19:37,690 --> 00:19:41,020
three points because I to me that that's

346
00:19:41,020 --> 00:19:43,140
the only three points that differ from

347
00:19:43,140 --> 00:19:46,690
C++ or any other language so it's it's

348
00:19:46,690 --> 00:19:48,100
really nice that we've been able to

349
00:19:48,100 --> 00:19:51,010
implement them in C++ with a close in

350
00:19:51,010 --> 00:19:53,620
tax so now I don't really have the time

351
00:19:53,620 --> 00:19:57,280
to go into really really death details

352
00:19:57,280 --> 00:19:59,550
when i'm going to show you what other

353
00:19:59,550 --> 00:20:03,370
features we can implement so the first

354
00:20:03,370 --> 00:20:06,160
one is going to be closure so since we

355
00:20:06,160 --> 00:20:09,370
have longer with written in C++ we can

356
00:20:09,370 --> 00:20:12,250
just use lambda closure oh that works

357
00:20:12,250 --> 00:20:15,130
and there's only a little nasty bugs

358
00:20:15,130 --> 00:20:16,930
that I don't have the time to explain

359
00:20:16,930 --> 00:20:18,880
right now but if you want to know more

360
00:20:18,880 --> 00:20:23,320
about it I talk to me offline then we

361
00:20:23,320 --> 00:20:24,640
can set this

362
00:20:24,640 --> 00:20:28,570
in the four way that says RG fine in

363
00:20:28,570 --> 00:20:31,210
JavaScript so the first way is with new

364
00:20:31,210 --> 00:20:35,230
as i showed earlier the second one is an

365
00:20:35,230 --> 00:20:37,810
unbound call the third one is a bound

366
00:20:37,810 --> 00:20:40,900
call like when you do a object dirt

367
00:20:40,900 --> 00:20:44,650
function and you call it and the first

368
00:20:44,650 --> 00:20:47,590
the last one is a using color and apply

369
00:20:47,590 --> 00:20:51,760
and we can do it we can do it using a

370
00:20:51,760 --> 00:20:56,070
little hack so if you remember our

371
00:20:56,070 --> 00:21:00,720
function macro we can insert two

372
00:21:00,720 --> 00:21:03,640
additional arguments which are this an

373
00:21:03,640 --> 00:21:06,220
argument and then when you when we call

374
00:21:06,220 --> 00:21:12,610
it we can add those those arguments in a

375
00:21:12,610 --> 00:21:15,880
hidden way and the they are available to

376
00:21:15,880 --> 00:21:23,530
the user so since we can also overload

377
00:21:23,530 --> 00:21:27,520
all the traditional JavaScript operators

378
00:21:27,520 --> 00:21:30,940
so less than equal plus plus plus equal

379
00:21:30,940 --> 00:21:34,120
plus and you can make it work for all

380
00:21:34,120 --> 00:21:36,700
the data types so a string number and

381
00:21:36,700 --> 00:21:39,100
everything it's just a matter of using

382
00:21:39,100 --> 00:21:43,530
the the jet on reading the JavaScript

383
00:21:43,530 --> 00:21:45,640
specification and implementing all the

384
00:21:45,640 --> 00:21:51,490
other cases we also get with CPS first

385
00:21:51,490 --> 00:21:57,490
11 iteration for free because in C++ 11

386
00:21:57,490 --> 00:22:00,690
you can do for type the viable name

387
00:22:00,690 --> 00:22:04,810
colon and the object and then we can

388
00:22:04,810 --> 00:22:09,010
just define in to be rewriting in colon

389
00:22:09,010 --> 00:22:13,230
and it's working so it's pretty nice and

390
00:22:13,230 --> 00:22:16,900
we've also got exceptions working with a

391
00:22:16,900 --> 00:22:19,090
channel with a c++ exception mechanism

392
00:22:19,090 --> 00:22:21,210
we just have to make sure to typecast

393
00:22:21,210 --> 00:22:25,450
the exception value into a value object

394
00:22:25,450 --> 00:22:29,590
and just rewrite the catch to ignore the

395
00:22:29,590 --> 00:22:36,130
the type so we've got like ninety

396
00:22:36,130 --> 00:22:37,690
percent of

397
00:22:37,690 --> 00:22:41,529
of JavaScript walking in C++ with more

398
00:22:41,529 --> 00:22:43,809
or less the same syntax so I'm really

399
00:22:43,809 --> 00:22:47,139
proud of of it because you can pretty

400
00:22:47,139 --> 00:22:51,610
much run any JavaScript any javascript

401
00:22:51,610 --> 00:22:54,970
file and convert it to 2g SVP and it

402
00:22:54,970 --> 00:22:58,690
just works but there are some divergence

403
00:22:58,690 --> 00:23:01,240
and I couldn't fix so the first one is

404
00:23:01,240 --> 00:23:04,720
there is no evil and you might say evil

405
00:23:04,720 --> 00:23:07,120
is evil so it's not a problem but in

406
00:23:07,120 --> 00:23:09,610
fact we use eval every time in

407
00:23:09,610 --> 00:23:11,980
JavaScript so in the console when you

408
00:23:11,980 --> 00:23:14,320
have a read eval print loop you are

409
00:23:14,320 --> 00:23:17,409
using either and in the browser when you

410
00:23:17,409 --> 00:23:19,779
add a script in line you are using evil

411
00:23:19,779 --> 00:23:22,720
when you require a module file you are

412
00:23:22,720 --> 00:23:26,320
using evil so not having a valley is is

413
00:23:26,320 --> 00:23:30,340
a big issue but if instance if it since

414
00:23:30,340 --> 00:23:33,190
it is simpler stress of does not much we

415
00:23:33,190 --> 00:23:37,659
can do about also one real annoying

416
00:23:37,659 --> 00:23:40,960
thing is there is no implicit return

417
00:23:40,960 --> 00:23:45,129
undefined so in c++ if you say the

418
00:23:45,129 --> 00:23:47,230
function is going to return a value you

419
00:23:47,230 --> 00:23:49,360
have to return something or the compiler

420
00:23:49,360 --> 00:23:52,690
will stop you and I did not realize

421
00:23:52,690 --> 00:23:56,529
until then but you you often an already

422
00:23:56,529 --> 00:23:59,320
often miss and forgot to write a written

423
00:23:59,320 --> 00:24:05,049
something and so it's it it makes some

424
00:24:05,049 --> 00:24:07,120
boilerplate code on your on your GSP

425
00:24:07,120 --> 00:24:10,059
pecan and also as we've seen we're at a

426
00:24:10,059 --> 00:24:11,980
different syntax for ra an object

427
00:24:11,980 --> 00:24:14,409
initialization so there are bunch of

428
00:24:14,409 --> 00:24:16,659
thing on the bottom that you might be

429
00:24:16,659 --> 00:24:18,759
interested in and if you want to know

430
00:24:18,759 --> 00:24:21,340
more about them you can you can see them

431
00:24:21,340 --> 00:24:25,059
in the slides so the other difference is

432
00:24:25,059 --> 00:24:28,179
out there is no dot notation and I

433
00:24:28,179 --> 00:24:33,009
couldn't find a way to emulate it and as

434
00:24:33,009 --> 00:24:36,879
a retail undefined we use that notation

435
00:24:36,879 --> 00:24:39,429
like all the time in JavaScript so

436
00:24:39,429 --> 00:24:41,409
having to go back to the bracket on

437
00:24:41,409 --> 00:24:44,259
string notation is really really really

438
00:24:44,259 --> 00:24:50,580
annoying so and also that there's a

439
00:24:50,580 --> 00:24:54,440
afro name with the empty object notation

440
00:24:54,440 --> 00:24:57,990
since we are using initializer list I'm

441
00:24:57,990 --> 00:25:00,330
two objects is treated as mersing so it

442
00:25:00,330 --> 00:25:02,970
calls the empty constructor and so it's

443
00:25:02,970 --> 00:25:05,039
written undefined instead of an empty

444
00:25:05,039 --> 00:25:08,850
object so you have to just make sure to

445
00:25:08,850 --> 00:25:14,070
know the trick and I'm very sorry but I

446
00:25:14,070 --> 00:25:16,260
know you all like to write for a peacoat

447
00:25:16,260 --> 00:25:19,919
and I couldn't reproduce with statements

448
00:25:19,919 --> 00:25:22,289
so I'm sorry but I have I have a gift

449
00:25:22,289 --> 00:25:27,899
for you so since we are in C++ you can

450
00:25:27,899 --> 00:25:30,389
use go to so it was a bit of a

451
00:25:30,389 --> 00:25:34,740
consolation for me so as a conclusion

452
00:25:34,740 --> 00:25:37,860
I'm going to answer a question of often

453
00:25:37,860 --> 00:25:40,350
asked which when I'm talk about the

454
00:25:40,350 --> 00:25:43,830
project which is it is useful and my

455
00:25:43,830 --> 00:25:46,830
honest answer will be I don't know so at

456
00:25:46,830 --> 00:25:48,450
first when I played with it I was like

457
00:25:48,450 --> 00:25:51,990
oh my god we can we can do everything

458
00:25:51,990 --> 00:25:54,870
that JavaScript can do in C++ and we've

459
00:25:54,870 --> 00:25:58,169
got an ear we have near the same syntax

460
00:25:58,169 --> 00:26:01,950
oh yeah it's awesome but when you start

461
00:26:01,950 --> 00:26:05,580
using it you realize that the absence of

462
00:26:05,580 --> 00:26:07,919
the dot notation and the return on

463
00:26:07,919 --> 00:26:10,740
defines the make your color looks really

464
00:26:10,740 --> 00:26:13,409
like crap and you don't want to write

465
00:26:13,409 --> 00:26:16,260
code like that and also the second

466
00:26:16,260 --> 00:26:19,620
things is like you personally I love

467
00:26:19,620 --> 00:26:20,880
JavaScript because it's a dynamic

468
00:26:20,880 --> 00:26:23,399
language you can just save a file on the

469
00:26:23,399 --> 00:26:26,460
reloads abrazo it's working and having a

470
00:26:26,460 --> 00:26:29,100
10 second compilation step in between

471
00:26:29,100 --> 00:26:33,720
was like I don't know but well if you

472
00:26:33,720 --> 00:26:38,309
really want to use it a good benefit is

473
00:26:38,309 --> 00:26:40,740
that you are you are able to communicate

474
00:26:40,740 --> 00:26:43,880
with all the C++ code that exists and

475
00:26:43,880 --> 00:26:48,090
you can just write C++ and mix C++

476
00:26:48,090 --> 00:26:49,409
course on JavaScript course and

477
00:26:49,409 --> 00:26:52,769
everything and it was also really fun

478
00:26:52,769 --> 00:26:56,760
and also one thing I want to point out

479
00:26:56,760 --> 00:27:01,860
is that c++ 11 is now able to run many

480
00:27:01,860 --> 00:27:02,790
of the same

481
00:27:02,790 --> 00:27:06,000
we used to run to do on JavaScript so

482
00:27:06,000 --> 00:27:07,920
it's I think it's a big step forward at

483
00:27:07,920 --> 00:27:12,330
the server side or our low level stuff

484
00:27:12,330 --> 00:27:16,620
to be able to take paradism from the

485
00:27:16,620 --> 00:27:19,590
dynamic world and put them back to the

486
00:27:19,590 --> 00:27:23,850
static fault so if you want to play with

487
00:27:23,850 --> 00:27:26,250
the code it's available on get up at

488
00:27:26,250 --> 00:27:29,100
this address and if you want to know

489
00:27:29,100 --> 00:27:30,690
more about me i have a blog and you can

