1
00:00:06,350 --> 00:00:10,700

hey everybody everyone hear me okay can

2
00:00:10,700 --> 00:00:17,660
you see my slides awesome so I'm gonna

3
00:00:17,660 --> 00:00:19,820
talk to you tonight about something near

4
00:00:19,820 --> 00:00:20,960
and dear to my heart

5
00:00:20,960 --> 00:00:23,900
testing in JavaScript we're gonna cover

6
00:00:23,900 --> 00:00:27,140
a little about unit tests TDD BDD and I

7
00:00:27,140 --> 00:00:28,970
don't know what the hell I'm doing so

8
00:00:28,970 --> 00:00:38,270
hopefully you'll learn something quick

9
00:00:38,270 --> 00:00:41,420
about me my name is Sara Raasch I am

10
00:00:41,420 --> 00:00:44,090
Sara Raasch on Twitter and Sara forward

11
00:00:44,090 --> 00:00:46,879
and backwards on github I am senior

12
00:00:46,879 --> 00:00:48,739
front-end developer at purebred breeders

13
00:00:48,739 --> 00:00:50,750
and if you are looking for an adorable

14
00:00:50,750 --> 00:00:53,020
purebred puppy we can help you find one

15
00:00:53,020 --> 00:00:55,699
I'm also really into knitting and comic

16
00:00:55,699 --> 00:01:02,059
books a little backstory I worked at an

17
00:01:02,059 --> 00:01:05,750
ad agency for six years it was my first

18
00:01:05,750 --> 00:01:09,020
job out of school I launched somewhere

19
00:01:09,020 --> 00:01:10,759
around a hundred websites in that time

20
00:01:10,759 --> 00:01:13,970
frame across 20 different advertising

21
00:01:13,970 --> 00:01:20,600
campaigns and I thought testing meant

22
00:01:20,600 --> 00:01:22,159
making sure a site worked in Internet

23
00:01:22,159 --> 00:01:33,770
Explorer

24
00:01:33,780 --> 00:01:39,490
or Alec so I left the ad agency and I

25
00:01:39,490 --> 00:01:41,770
really loved to learn testing and there

26
00:01:41,770 --> 00:01:43,360
are three apps that I worked on that

27
00:01:43,360 --> 00:01:46,360
really brought me around to to why

28
00:01:46,360 --> 00:01:48,009
testing is great and why we should all

29
00:01:48,009 --> 00:01:56,160
be doing it so got a new job hooray

30
00:01:56,170 --> 00:01:58,030
I was working on a product no longer

31
00:01:58,030 --> 00:01:59,740
working for clients which meant I got to

32
00:01:59,740 --> 00:02:02,200
work on one thing repeatedly day after

33
00:02:02,200 --> 00:02:05,799
day but the thing I started working on

34
00:02:05,799 --> 00:02:08,979
was a legacy app it had zero tests it

35
00:02:08,979 --> 00:02:11,230
also had zero infrastructure to run

36
00:02:11,230 --> 00:02:12,810
tests

37
00:02:12,810 --> 00:02:16,239
it was jQuery tightly coupled to the Dom

38
00:02:16,239 --> 00:02:18,400
so if you tried to run the script

39
00:02:18,400 --> 00:02:21,120
standalone they sort of all exploded

40
00:02:21,120 --> 00:02:23,620
there were no front-end build tools it

41
00:02:23,620 --> 00:02:26,440
was a dotnet MVC project behind the

42
00:02:26,440 --> 00:02:30,130
scenes so I started working on this the

43
00:02:30,130 --> 00:02:32,049
devs who had initially worked on the

44
00:02:32,049 --> 00:02:33,670
project at all left the company there

45
00:02:33,670 --> 00:02:35,200
was no one there to tell me how to work

46
00:02:35,200 --> 00:02:37,750
on anything so spoiler alert

47
00:02:37,750 --> 00:02:48,579
I broke production it was bad I cried so

48
00:02:48,579 --> 00:02:51,130
I decided to fix this and within the

49
00:02:51,130 --> 00:02:53,440
first six months at that company one of

50
00:02:53,440 --> 00:02:55,540
the key things I really wanted to do was

51
00:02:55,540 --> 00:02:59,200
add modern build tools and get testing

52
00:02:59,200 --> 00:03:03,510
involved in this app so I added in grunt

53
00:03:03,510 --> 00:03:05,980
which was really easy to integrate and

54
00:03:05,980 --> 00:03:09,430
see the legacy framework I installed a

55
00:03:09,430 --> 00:03:12,670
grunt plug-in called a contribute unit

56
00:03:12,670 --> 00:03:17,019
which runs cue unit unit testing I added

57
00:03:17,019 --> 00:03:20,069
in phantom Jas headless browser

58
00:03:20,069 --> 00:03:22,120
integrations so that I could run all my

59
00:03:22,120 --> 00:03:25,540
tests through the command line and then

60
00:03:25,540 --> 00:03:27,160
I was able to write some unit tests and

61
00:03:27,160 --> 00:03:31,060
it was very exciting so here's my super

62
00:03:31,060 --> 00:03:41,820
simple demo

63
00:03:41,830 --> 00:03:46,730
I've got a really basic grunt file and a

64
00:03:46,730 --> 00:03:48,709
really basic package.json

65
00:03:48,709 --> 00:03:51,920
to run these NPM packages it's just

66
00:03:51,920 --> 00:03:54,440
using connect to run a local server and

67
00:03:54,440 --> 00:03:57,620
a queue unit to run the actual queued

68
00:03:57,620 --> 00:04:00,620
unit tests we've got a really simple

69
00:04:00,620 --> 00:04:04,970
HTML file that basically just has a div

70
00:04:04,970 --> 00:04:08,510
that runs the Q unit tests and some

71
00:04:08,510 --> 00:04:10,610
slides in this particular demo I'm

72
00:04:10,610 --> 00:04:12,769
testing revealed J s which I wrote my

73
00:04:12,769 --> 00:04:14,780
slides in because it couldn't think of

74
00:04:14,780 --> 00:04:18,410
anything else to write tested and then

75
00:04:18,410 --> 00:04:20,630
my test file is really simple it's just

76
00:04:20,630 --> 00:04:24,050
checking that when it loads it's on the

77
00:04:24,050 --> 00:04:27,979
Flair slide and not on the last slide so

78
00:04:27,979 --> 00:04:31,040
if I run my Q unit tests in my browser

79
00:04:31,040 --> 00:04:46,730
you can see it's very exciting maybe

80
00:04:46,740 --> 00:05:02,409
ah where did you go

81
00:05:02,419 --> 00:05:04,889
sorry it kind of build my demos at a bar

82
00:05:04,889 --> 00:05:08,130
last night so this is uh a little

83
00:05:08,130 --> 00:05:21,680
unexpected yeah

84
00:05:21,690 --> 00:05:29,710
all right so I'm not on the first flight

85
00:05:29,710 --> 00:05:31,210
I'm on the first line I'm not on the

86
00:05:31,210 --> 00:05:33,730
last slide my code works I can ship it

87
00:05:33,730 --> 00:05:40,850
to production and it won't break maybe

88
00:05:40,860 --> 00:05:42,700
so

89
00:05:42,700 --> 00:05:46,240
woohoo I've got unit tests they're

90
00:05:46,240 --> 00:05:49,840
testing individual units of code is that

91
00:05:49,840 --> 00:05:54,520
what I want oh I guess having some tests

92
00:05:54,520 --> 00:05:56,310
are better than having no tests right

93
00:05:56,310 --> 00:05:59,880
maybe I won't break production this week

94
00:05:59,880 --> 00:06:02,200
but then it turns out the actual tests

95
00:06:02,200 --> 00:06:05,200
the actual site I was working on made a

96
00:06:05,200 --> 00:06:08,370
bunch of authenticated API calls on load

97
00:06:08,370 --> 00:06:12,370
which all required API tokens which

98
00:06:12,370 --> 00:06:14,470
expired so it couldn't hard code them

99
00:06:14,470 --> 00:06:17,110
into my test file and making a call to

100
00:06:17,110 --> 00:06:19,150
get the API token before running the

101
00:06:19,150 --> 00:06:20,830
test wasn't a unit test

102
00:06:20,830 --> 00:06:23,410
that's an integration test how do I do

103
00:06:23,410 --> 00:06:27,640
that well I can't actually do anything

104
00:06:27,640 --> 00:06:29,440
to fix that code without refactoring the

105
00:06:29,440 --> 00:06:31,390
whole app and that takes a lot of time

106
00:06:31,390 --> 00:06:33,940
how can I work around that and make my

107
00:06:33,940 --> 00:06:36,430
test run now there's a really great

108
00:06:36,430 --> 00:06:39,670
library for that called sign in' and

109
00:06:39,670 --> 00:06:42,970
sign in' gives you spies stubs and a

110
00:06:42,970 --> 00:06:45,790
fake HTTP server so you can set it up

111
00:06:45,790 --> 00:06:49,030
that if I hit any API endpoint I want it

112
00:06:49,030 --> 00:06:51,760
returns the data I want so I can have it

113
00:06:51,760 --> 00:06:53,830
pretend to hit my API and give me back

114
00:06:53,830 --> 00:06:56,710
the data I'm expecting at which point my

115
00:06:56,710 --> 00:06:59,140
tests all work again assuming the API

116
00:06:59,140 --> 00:07:01,150
doesn't go down I'm not gonna break

117
00:07:01,150 --> 00:07:06,520
production and everything's happy so the

118
00:07:06,520 --> 00:07:09,940
second app new shiny app should really

119
00:07:09,940 --> 00:07:13,570
stop hitting my tyre touchpad uh-huh the

120
00:07:13,570 --> 00:07:17,110
new shiny app is built in Ember it's got

121
00:07:17,110 --> 00:07:20,350
some tests it's maybe got 50% test

122
00:07:20,350 --> 00:07:23,950
coverage better than no tests and we

123
00:07:23,950 --> 00:07:26,040
start working on it and we decide well

124
00:07:26,040 --> 00:07:29,080
what can we do to make this app better

125
00:07:29,080 --> 00:07:31,840
now that we've got unit tests well let's

126
00:07:31,840 --> 00:07:33,210
start doing test-driven

127
00:07:33,210 --> 00:07:36,479
development okay sometimes we'll do

128
00:07:36,479 --> 00:07:40,050
test-driven development all code

129
00:07:40,050 --> 00:07:41,910
required reviews and you couldn't pass a

130
00:07:41,910 --> 00:07:44,460
review without tests but generally we

131
00:07:44,460 --> 00:07:45,930
wrote the test after we wrote the code

132
00:07:45,930 --> 00:07:47,849
because well we're all kind of lazy

133
00:07:47,849 --> 00:07:53,400
sometimes TDD says you should have three

134
00:07:53,400 --> 00:07:56,610
rules of how to do your tests you can't

135
00:07:56,610 --> 00:07:58,380
write any production code until you

136
00:07:58,380 --> 00:08:01,169
first written a failing test then you

137
00:08:01,169 --> 00:08:03,090
can't write more of a unit test than is

138
00:08:03,090 --> 00:08:05,370
sufficient to fail and not compiling is

139
00:08:05,370 --> 00:08:08,099
failing and finally you can't write more

140
00:08:08,099 --> 00:08:09,780
production code than is sufficient to

141
00:08:09,780 --> 00:08:12,180
pass the currently failing unit tests or

142
00:08:12,180 --> 00:08:14,880
in my paraphrased write failing test

143
00:08:14,880 --> 00:08:17,039
write code to pass fail a test and no

144
00:08:17,039 --> 00:08:21,960
more repeat I don't have a demo for TDD

145
00:08:21,960 --> 00:08:23,669
there was a really good talk here back

146
00:08:23,669 --> 00:08:27,720
in 2014 I believe that went nitty-gritty

147
00:08:27,720 --> 00:08:30,810
into how to do TDD and you should all go

148
00:08:30,810 --> 00:08:35,339
watch it alright so now I've got a new

149
00:08:35,339 --> 00:08:38,360
app it's got good ish test coverage

150
00:08:38,360 --> 00:08:40,800
wrote a bunch of unit tests things feel

151
00:08:40,800 --> 00:08:43,829
stable but what happens when I run into

152
00:08:43,829 --> 00:08:47,250
things I can't read a unit test for and

153
00:08:47,250 --> 00:08:49,070
that happens a lot

154
00:08:49,070 --> 00:08:51,899
that's where integration testing comes

155
00:08:51,899 --> 00:08:55,709
in so integration testing is built into

156
00:08:55,709 --> 00:08:58,920
ember and react and angular and most

157
00:08:58,920 --> 00:09:01,500
large frameworks and libraries but if

158
00:09:01,500 --> 00:09:03,089
not if you're rolling your own framework

159
00:09:03,089 --> 00:09:04,529
or you're in a framework that doesn't

160
00:09:04,529 --> 00:09:07,410
support it karma in turn and Nightwatch

161
00:09:07,410 --> 00:09:09,480
or three really popular libraries that

162
00:09:09,480 --> 00:09:12,890
will do integration testing and

163
00:09:12,890 --> 00:09:15,570
integration testing is going to test how

164
00:09:15,570 --> 00:09:20,570
your units or modules work together so

165
00:09:20,570 --> 00:09:23,220
example of a more advanced sort of

166
00:09:23,220 --> 00:09:25,050
acceptance integration test would be

167
00:09:25,050 --> 00:09:27,420
like visit a page enter some data click

168
00:09:27,420 --> 00:09:28,860
a button and see that the data is

169
00:09:28,860 --> 00:09:32,690
correct and I have a demo for this guy

170
00:09:32,690 --> 00:09:35,370
sorry all my demos are an ember because

171
00:09:35,370 --> 00:09:41,079
that's what I write

172
00:09:41,089 --> 00:09:46,819
um so this is still using Q unit and Q

173
00:09:46,819 --> 00:09:49,819
units assertion library so it's

174
00:09:49,819 --> 00:09:52,670
basically just importing the module I

175
00:09:52,670 --> 00:09:56,029
want to test and testing that it renders

176
00:09:56,029 --> 00:09:58,839
and testing that the text on the page

177
00:09:58,839 --> 00:10:02,480
renders correctly and that it hides if I

178
00:10:02,480 --> 00:10:31,490
click a button so

179
00:10:31,500 --> 00:10:34,750
here's my really great app you can see

180
00:10:34,750 --> 00:10:37,569
my great fancy tax component it makes

181
00:10:37,569 --> 00:10:38,939
text look fancy

182
00:10:38,939 --> 00:10:41,889
and I have a button that is not part of

183
00:10:41,889 --> 00:10:44,470
that component that toggles that text

184
00:10:44,470 --> 00:10:46,420
it's uh pretty much the best website

185
00:10:46,420 --> 00:10:47,769
I've built this week and I'm really

186
00:10:47,769 --> 00:10:52,449
proud of it so the test

187
00:10:52,449 --> 00:10:55,360
I wrote basically makes sure that that

188
00:10:55,360 --> 00:11:01,990
guy renders and that if you pass in the

189
00:11:01,990 --> 00:11:03,610
class that makes it hide it hides

190
00:11:03,610 --> 00:11:07,120
correctly so embers test setup which is

191
00:11:07,120 --> 00:11:07,720
great

192
00:11:07,720 --> 00:11:10,089
automatically runs jacent on all my

193
00:11:10,089 --> 00:11:14,490
stuff so I don't write badly coded code

194
00:11:14,490 --> 00:11:23,649
and I can filter it by the integration

195
00:11:23,649 --> 00:11:26,079
test for my component and you can see it

196
00:11:26,079 --> 00:11:28,180
renders and it hides and it's very

197
00:11:28,180 --> 00:11:37,269
exciting all right so my third app is

198
00:11:37,269 --> 00:11:38,980
the app I'm actually working on right

199
00:11:38,980 --> 00:11:40,660
now which I'd love to show you but I

200
00:11:40,660 --> 00:11:45,459
can't and this app is totally Greenfield

201
00:11:45,459 --> 00:11:48,759
it is an internal tool so I can support

202
00:11:48,759 --> 00:11:50,800
which browsers I want which means new

203
00:11:50,800 --> 00:11:57,610
Chrome and nothing else I get to do so

204
00:11:57,610 --> 00:11:59,319
much TDD because I have a much better

205
00:11:59,319 --> 00:12:02,490
time frame and I can settle my own rules

206
00:12:02,490 --> 00:12:05,230
I've got a hundred percent test coverage

207
00:12:05,230 --> 00:12:07,000
of all three of my JavaScript files

208
00:12:07,000 --> 00:12:12,160
right now it's beautiful and I get to

209
00:12:12,160 --> 00:12:13,870
use the latest everything and pick all

210
00:12:13,870 --> 00:12:16,720
the tools so I wrote in an ember because

211
00:12:16,720 --> 00:12:20,709
it makes me happy so I've got this great

212
00:12:20,709 --> 00:12:23,139
new app it's wonderful how can I make my

213
00:12:23,139 --> 00:12:24,839
tests even better

214
00:12:24,839 --> 00:12:28,269
enter behavioral driven development so

215
00:12:28,269 --> 00:12:30,399
the assertions in the Q unit testing

216
00:12:30,399 --> 00:12:33,459
library are very much does this

217
00:12:33,459 --> 00:12:35,559
equalness that's how the assertions are

218
00:12:35,559 --> 00:12:36,660
written

219
00:12:36,660 --> 00:12:38,399
which as a programmer is easy to

220
00:12:38,399 --> 00:12:41,640
understand but not necessarily a great

221
00:12:41,640 --> 00:12:44,040
way to transfer your requirements into

222
00:12:44,040 --> 00:12:47,310
what you're testing so with BDD I can

223
00:12:47,310 --> 00:12:49,140
describe what I want my app to do in

224
00:12:49,140 --> 00:12:52,260
more readable language and it's easier

225
00:12:52,260 --> 00:12:54,330
to translate acceptance criteria and

226
00:12:54,330 --> 00:13:20,970
requirements into tests so

227
00:13:20,980 --> 00:13:23,600
got another demo app you'll once again

228
00:13:23,600 --> 00:13:25,639
notice my awesome fancy text component

229
00:13:25,639 --> 00:13:28,300
which is still super fancy I can still

230
00:13:28,300 --> 00:13:33,500
toggle my text but instead of the

231
00:13:33,500 --> 00:13:35,750
standard q' unit library and assertions

232
00:13:35,750 --> 00:13:40,940
i replaced it with mocha so mocha is a

233
00:13:40,940 --> 00:13:43,610
BDD testing framework that lets you

234
00:13:43,610 --> 00:13:46,010
choose your assertion library so I am

235
00:13:46,010 --> 00:13:49,699
using chai as my assertion library so

236
00:13:49,699 --> 00:13:53,389
instead of in the Q unit traditional

237
00:13:53,389 --> 00:13:56,389
unit test a sort of syntax where my

238
00:13:56,389 --> 00:13:59,149
certs were assert equal this equals

239
00:13:59,149 --> 00:14:06,199
something else instead my assertions now

240
00:14:06,199 --> 00:14:12,800
look like this I expect this is spans

241
00:14:12,800 --> 00:14:17,389
CSS display to equal none so when I get

242
00:14:17,389 --> 00:14:19,250
requirements from my product people who

243
00:14:19,250 --> 00:14:20,899
say when I click a button something

244
00:14:20,899 --> 00:14:23,660
should hide I go okay I expect the

245
00:14:23,660 --> 00:14:25,850
object to be hidden making it much

246
00:14:25,850 --> 00:14:28,100
easier to have my whole test suite

247
00:14:28,100 --> 00:14:30,170
aligned with the rest of the

248
00:14:30,170 --> 00:14:32,600
requirements for the project it also

249
00:14:32,600 --> 00:14:41,460
looks cooler

250
00:14:41,470 --> 00:14:46,690
um so here is my fancy new mocha and

251
00:14:46,690 --> 00:14:49,980
chai acceptance tests that are failing

252
00:14:49,980 --> 00:15:03,220
so that's great so what's next now that

253
00:15:03,220 --> 00:15:06,700
I've got all these fancy tests I tidy s

254
00:15:06,700 --> 00:15:09,430
hint into my test tasks so that if it

255
00:15:09,430 --> 00:15:11,710
doesn't lint my tests automatically fail

256
00:15:11,710 --> 00:15:15,630
I tied my testing task into a get hook

257
00:15:15,630 --> 00:15:20,440
using an NPM task so that if I try to

258
00:15:20,440 --> 00:15:22,240
commit with failing test my commits

259
00:15:22,240 --> 00:15:24,370
don't go through

260
00:15:24,370 --> 00:15:27,250
I added blanket J s to show my test

261
00:15:27,250 --> 00:15:28,870
coverage so that's how I know that my

262
00:15:28,870 --> 00:15:30,610
three files have a hundred-percent test

263
00:15:30,610 --> 00:15:33,700
coverage right now and I tied all of

264
00:15:33,700 --> 00:15:35,200
this into a continuous integration

265
00:15:35,200 --> 00:15:37,480
environment so failing test break the

266
00:15:37,480 --> 00:15:39,460
build and hopefully no bad code ever

267
00:15:39,460 --> 00:15:41,920
gets out to production and I live in a

268
00:15:41,920 --> 00:15:43,180
happy world where I don't break

269
00:15:43,180 --> 00:15:44,920
production every week and everything is

270
00:15:44,920 --> 00:16:04,610
sunshine and puppy dogs

271
00:16:04,620 --> 00:16:13,769
no question there we go

272
00:16:13,779 --> 00:16:15,850
it not only made it more fun it made it

273
00:16:15,850 --> 00:16:17,949
less terrifying because there was no one

274
00:16:17,949 --> 00:16:19,389
else at the company who knew what was

275
00:16:19,389 --> 00:16:20,709
going on with this code so I'd be like

276
00:16:20,709 --> 00:16:22,569
oh you want me to add this feature okay

277
00:16:22,569 --> 00:16:24,459
I hope this isn't gonna be the time that

278
00:16:24,459 --> 00:16:26,199
I take down all the five web servers cuz

279
00:16:26,199 --> 00:16:28,959
that would be really bad it also makes

280
00:16:28,959 --> 00:16:31,120
it a lot easier to refactor your code so

281
00:16:31,120 --> 00:16:32,889
once you have a good test coverage if I

282
00:16:32,889 --> 00:16:34,449
want to take that Levitt gissy code and

283
00:16:34,449 --> 00:16:36,759
scrap it as long as it still pasts all

284
00:16:36,759 --> 00:16:38,560
the passes all the tests I know that my

285
00:16:38,560 --> 00:16:41,519
code still works like it's supposed to

286
00:16:41,519 --> 00:16:49,889
um I cannot and I'm not on the Wi-Fi

287
00:16:49,889 --> 00:16:53,440
it's on an app that's not live yet so I

288
00:16:53,440 --> 00:16:55,199
can't show anything

289
00:16:55,199 --> 00:17:17,199
yeah sometimes even necessary like for

290
00:17:17,199 --> 00:17:19,240
instance if a client our designers in

291
00:17:19,240 --> 00:17:21,220
able to see premium projects they'll see

292
00:17:21,220 --> 00:17:24,100
difficult formation in a test this one

293
00:17:24,100 --> 00:17:27,309
we did rather nested because you'll have

294
00:17:27,309 --> 00:17:29,049
the main test for me this page right the

295
00:17:29,049 --> 00:17:30,580
dashboard page right and then you'll

296
00:17:30,580 --> 00:17:32,110
have a okay well if you're in the

297
00:17:32,110 --> 00:17:38,020
context of a designer premium designer

298
00:17:38,020 --> 00:17:42,880
or a non designer do you tend to go

299
00:17:42,880 --> 00:17:45,700
heavily Nessun or do you tend to fall in

300
00:17:45,700 --> 00:17:47,250
a singular context

301
00:17:47,250 --> 00:17:50,710
looks like describes of you and then

302
00:17:50,710 --> 00:17:53,080
context when I'm a designer who is

303
00:17:53,080 --> 00:17:56,260
premium enabled or you put them in

304
00:17:56,260 --> 00:17:59,710
I don't nest the nesting is really hard

305
00:17:59,710 --> 00:18:03,120
to maintain and I want not only my

306
00:18:03,120 --> 00:18:05,620
production app code to be clean I want

307
00:18:05,620 --> 00:18:07,480
my test code to be clean

308
00:18:07,480 --> 00:18:10,480
and so I in general try to avoid nesting

309
00:18:10,480 --> 00:18:12,880
if at all possible so if I can separate

310
00:18:12,880 --> 00:18:15,010
those out and use some sort of scheme to

311
00:18:15,010 --> 00:18:17,500
make it load the context of the user

312
00:18:17,500 --> 00:18:20,020
separately that would be the way I would

313
00:18:20,020 --> 00:18:27,940
approach that I outside of my app holder

314
00:18:27,940 --> 00:18:29,260
I have an app holder and then I have a

315
00:18:29,260 --> 00:18:31,539
test folder so that I can publish my app

316
00:18:31,539 --> 00:18:33,370
to production without publishing my

317
00:18:33,370 --> 00:18:56,500
tests going from an environment where I

318
00:18:56,500 --> 00:18:59,020
had zero test coverage to minimal test

319
00:18:59,020 --> 00:19:01,360
coverage to really good test coverage it

320
00:19:01,360 --> 00:19:04,000
has become vital to my development

321
00:19:04,000 --> 00:19:06,789
workflow to have that test coverage not

322
00:19:06,789 --> 00:19:09,070
only for me personally making sure I

323
00:19:09,070 --> 00:19:11,200
don't production break production but I

324
00:19:11,200 --> 00:19:13,210
work in a team and I often work in teams

325
00:19:13,210 --> 00:19:16,270
with junior developers and I want them

326
00:19:16,270 --> 00:19:18,549
to have that confidence to make changes

327
00:19:18,549 --> 00:19:19,990
and not worry that they're gonna break

328
00:19:19,990 --> 00:19:32,250
things

329
00:19:32,260 --> 00:19:34,780
what we got before this was a talk in

330
00:19:34,780 --> 00:19:36,460
the practical about making sure your

331
00:19:36,460 --> 00:19:38,760
stuff works and I'm gonna talk about

332
00:19:38,760 --> 00:19:41,260
making things weird and you want to know

333
00:19:41,260 --> 00:19:42,640
your stuff works when you make things

334
00:19:42,640 --> 00:19:47,050
weird so right test please so the talk

335
00:19:47,050 --> 00:19:49,120
is titled use use people in the modern

336
00:19:49,120 --> 00:19:51,640
working about but the secret title is

337
00:19:51,640 --> 00:19:55,000
future tool ok so just follow me a

338
00:19:55,000 --> 00:19:58,000
little bit as I talk to you about what I

339
00:19:58,000 --> 00:19:59,710
think is like one of the best tools to

340
00:19:59,710 --> 00:20:01,690
come out for modern software development

