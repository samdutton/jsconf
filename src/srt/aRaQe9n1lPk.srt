1
00:00:12,190 --> 00:00:15,260

hi everyone thank you for having me here

2
00:00:15,260 --> 00:00:17,000
today and today we will be talking about

3
00:00:17,000 --> 00:00:19,130
progressive rendering and how to make

4
00:00:19,130 --> 00:00:23,119
your apps render sooner and first let me

5
00:00:23,119 --> 00:00:25,700
introduce myself a little bit and maybe

6
00:00:25,700 --> 00:00:28,220
you find some interesting facts from

7
00:00:28,220 --> 00:00:31,100
here I worked as a dot net developer for

8
00:00:31,100 --> 00:00:33,170
three years sorry for that I was blind

9
00:00:33,170 --> 00:00:36,620
and then I fell in love with no jazz

10
00:00:36,620 --> 00:00:39,590
because of its wonderful not blocking I

11
00:00:39,590 --> 00:00:42,769
oh I really fell off that especially

12
00:00:42,769 --> 00:00:45,110
from after the talk by Brian Dolph who's

13
00:00:45,110 --> 00:00:48,370
a creator of node and then I worked as a

14
00:00:48,370 --> 00:00:51,680
lead developer at flump which is like

15
00:00:51,680 --> 00:00:55,070
really popular service in Russia kind of

16
00:00:55,070 --> 00:01:00,500
like Yelp here and as you might guess I

17
00:01:00,500 --> 00:01:02,330
work as a JavaScript developer already

18
00:01:02,330 --> 00:01:04,850
and now I leave in Berlin and work for

19
00:01:04,850 --> 00:01:08,000
Amazon building UI components for amazon

20
00:01:08,000 --> 00:01:10,659
web services along with my great team

21
00:01:10,659 --> 00:01:13,490
Michael colleagues and you can find me

22
00:01:13,490 --> 00:01:15,380
online by these handle which is

23
00:01:15,380 --> 00:01:17,570
pragmatic on Twitter github medium and

24
00:01:17,570 --> 00:01:22,570
maybe something else give it a try and

25
00:01:22,570 --> 00:01:25,520
we are going to talk about server-side

26
00:01:25,520 --> 00:01:28,789
rendering and I think it's very

27
00:01:28,789 --> 00:01:30,439
important to have service side rendering

28
00:01:30,439 --> 00:01:32,990
today even if you have single page

29
00:01:32,990 --> 00:01:36,859
applications mostly on on the Internet

30
00:01:36,859 --> 00:01:39,679
we need sometimes we need server side

31
00:01:39,679 --> 00:01:44,270
rendering 404 crawlers or maybe other

32
00:01:44,270 --> 00:01:47,439
reasons and there is a good point how to

33
00:01:47,439 --> 00:01:49,899
improve this server side rendering and

34
00:01:49,899 --> 00:01:56,539
make it more film faster for our users

35
00:01:56,539 --> 00:02:01,039
and for this we would talk about typical

36
00:02:01,039 --> 00:02:03,530
server-side rendering today all

37
00:02:03,530 --> 00:02:05,030
developers implement around the world

38
00:02:05,030 --> 00:02:07,490
and why it's not that good for user

39
00:02:07,490 --> 00:02:10,039
experience and how can we make it better

40
00:02:10,039 --> 00:02:12,890
and let's start with a server-side

41
00:02:12,890 --> 00:02:17,270
rendering in general like how typically

42
00:02:17,270 --> 00:02:19,190
people implement server-side rendering

43
00:02:19,190 --> 00:02:22,760
nowadays so usually use expert

44
00:02:22,760 --> 00:02:24,680
is or connect or something like that and

45
00:02:24,680 --> 00:02:28,040
just implement middleware for that and

46
00:02:28,040 --> 00:02:30,700
it's basically a function that takes

47
00:02:30,700 --> 00:02:33,709
HTTP requests HTTP response and

48
00:02:33,709 --> 00:02:36,129
something like next call back if we

49
00:02:36,129 --> 00:02:38,780
don't want to serve a page and just pass

50
00:02:38,780 --> 00:02:43,129
the control to another middleware and in

51
00:02:43,129 --> 00:02:45,890
this case we just parse some parameters

52
00:02:45,890 --> 00:02:50,359
from URL then we just query some data

53
00:02:50,359 --> 00:02:53,659
from the database or maybe a restful api

54
00:02:53,659 --> 00:02:56,629
from somewhere doesn't matter then we

55
00:02:56,629 --> 00:02:58,700
render template for this data and then

56
00:02:58,700 --> 00:03:05,590
just end HTTP response with HTML so um

57
00:03:05,590 --> 00:03:09,920
who has ever implemented rendering like

58
00:03:09,920 --> 00:03:15,859
this raise your hands yeah and you might

59
00:03:15,859 --> 00:03:18,459
be wondering what's wrong with that and

60
00:03:18,459 --> 00:03:22,099
actually there are some things they that

61
00:03:22,099 --> 00:03:25,370
are on so if you have dynamic HTML

62
00:03:25,370 --> 00:03:28,940
document dynamic page we need to render

63
00:03:28,940 --> 00:03:32,419
the whole page in suburbs memory in a

64
00:03:32,419 --> 00:03:36,620
buffer and of course to generate this

65
00:03:36,620 --> 00:03:38,889
page and to render template we need to

66
00:03:38,889 --> 00:03:42,410
go to the database for data or maybe to

67
00:03:42,410 --> 00:03:44,859
restful api just somewhere and

68
00:03:44,859 --> 00:03:48,199
potentially it's a very slow operation

69
00:03:48,199 --> 00:03:50,510
it might last for half a second maybe

70
00:03:50,510 --> 00:03:54,260
more it depends and therefore it's kind

71
00:03:54,260 --> 00:03:56,090
of risky because it depends on your load

72
00:03:56,090 --> 00:03:58,549
on your network and the instant

73
00:03:58,549 --> 00:04:00,139
infrastructure you had where a lot of

74
00:04:00,139 --> 00:04:04,310
the facts of factors can influence um

75
00:04:04,310 --> 00:04:07,459
that and let's imagine that we have up

76
00:04:07,459 --> 00:04:11,780
to 10 requests for data and each of them

77
00:04:11,780 --> 00:04:15,530
depends on a previous one in this

78
00:04:15,530 --> 00:04:19,070
worst-case your users would not see

79
00:04:19,070 --> 00:04:23,599
anything for five seconds and that's

80
00:04:23,599 --> 00:04:26,300
really scary and let's ask our users

81
00:04:26,300 --> 00:04:29,720
what do they think about that so some of

82
00:04:29,720 --> 00:04:33,190
them I just said and they are crying

83
00:04:33,190 --> 00:04:36,110
seeing how our appt renders

84
00:04:36,110 --> 00:04:42,110
but they wait but some of them are very

85
00:04:42,110 --> 00:04:44,870
angry and might be even want to find us

86
00:04:44,870 --> 00:04:46,640
it kill us because we implemented this

87
00:04:46,640 --> 00:04:51,530
up and some of our users are also

88
00:04:51,530 --> 00:04:54,440
developers and might be they know that

89
00:04:54,440 --> 00:04:57,200
progressive rendering exists and they

90
00:04:57,200 --> 00:05:02,980
are just saying that our app is crap and

91
00:05:02,980 --> 00:05:08,140
how can we fix this how can we make our

92
00:05:08,140 --> 00:05:10,820
application render sooner despite these

93
00:05:10,820 --> 00:05:14,300
reasons we have liked for requesting

94
00:05:14,300 --> 00:05:18,740
data and maybe other air conditions we

95
00:05:18,740 --> 00:05:21,620
have in our app instead of sending em

96
00:05:21,620 --> 00:05:24,740
the whole HTML buffer at once like

97
00:05:24,740 --> 00:05:28,700
previous code does we can use a simple

98
00:05:28,700 --> 00:05:33,020
idea instead of trying to serve this

99
00:05:33,020 --> 00:05:36,110
very heavy and slow page like lifting up

100
00:05:36,110 --> 00:05:39,770
is the stadium we can just split this

101
00:05:39,770 --> 00:05:44,870
page and small pieces in chunks and send

102
00:05:44,870 --> 00:05:49,810
this HTML page as multiple chunks and

103
00:05:49,810 --> 00:05:52,490
obviously it looks more powerful right

104
00:05:52,490 --> 00:05:57,830
and easy so and this approach would be

105
00:05:57,830 --> 00:06:04,700
progressive rendering this animation is

106
00:06:04,700 --> 00:06:07,880
trying to explain how that works so on

107
00:06:07,880 --> 00:06:10,760
the left side you have typical rendering

108
00:06:10,760 --> 00:06:13,430
implementation which goes for data

109
00:06:13,430 --> 00:06:15,650
building the page in memory and then

110
00:06:15,650 --> 00:06:18,680
just gives the whole page service from

111
00:06:18,680 --> 00:06:21,890
the server in browser and until this

112
00:06:21,890 --> 00:06:24,980
moment nobody sees anything I mean our

113
00:06:24,980 --> 00:06:28,400
users of course and on the right the app

114
00:06:28,400 --> 00:06:31,610
uses progressive rendering which means

115
00:06:31,610 --> 00:06:35,540
it has last time to first byte and you

116
00:06:35,540 --> 00:06:39,100
have something as soon as your first

117
00:06:39,100 --> 00:06:44,260
portion of data is radiant server and

118
00:06:44,260 --> 00:06:46,850
this is really tricky because from the

119
00:06:46,850 --> 00:06:49,280
performance point of view I mean from

120
00:06:49,280 --> 00:06:51,440
amber's point of view it's kind of maybe

121
00:06:51,440 --> 00:06:55,010
even slower but from the perception

122
00:06:55,010 --> 00:06:58,540
point of view our users they see that

123
00:06:58,540 --> 00:07:01,700
our app works for them and does

124
00:07:01,700 --> 00:07:04,400
something for them and this perception

125
00:07:04,400 --> 00:07:06,950
is much better than seeing nothing for

126
00:07:06,950 --> 00:07:09,410
five seconds even though maybe it's

127
00:07:09,410 --> 00:07:14,410
technically a little bit slower and

128
00:07:14,410 --> 00:07:17,930
there was a talk at last jest Cairo in

129
00:07:17,930 --> 00:07:21,800
Berlin where I unfortunately I can't

130
00:07:21,800 --> 00:07:23,240
remember the name but it was a talk

131
00:07:23,240 --> 00:07:25,400
about perception of performance and that

132
00:07:25,400 --> 00:07:28,580
was a very similar idea that perception

133
00:07:28,580 --> 00:07:32,960
says us that we need to do something as

134
00:07:32,960 --> 00:07:35,150
soon as possible to show that our app

135
00:07:35,150 --> 00:07:37,400
works for our user that we appreciate

136
00:07:37,400 --> 00:07:41,540
that our user uses are up and this

137
00:07:41,540 --> 00:07:46,250
exactly the point so you might be

138
00:07:46,250 --> 00:07:48,020
wondering never heard of it never heard

139
00:07:48,020 --> 00:07:49,790
of progressive rendering is it new or

140
00:07:49,790 --> 00:07:52,310
like something train seeing which

141
00:07:52,310 --> 00:07:57,020
invented recently actually now if we go

142
00:07:57,020 --> 00:08:02,000
back in the history in 1997 HTTP 1.1 was

143
00:08:02,000 --> 00:08:07,340
introduced as RFC and the most important

144
00:08:07,340 --> 00:08:10,220
part in this for us is a Chunkin

145
00:08:10,220 --> 00:08:13,760
encoding and basically what it says that

146
00:08:13,760 --> 00:08:16,280
instead of serving the whole page the

147
00:08:16,280 --> 00:08:19,039
whole buffer to a server you can split

148
00:08:19,039 --> 00:08:22,220
it in several buffers and serve it

149
00:08:22,220 --> 00:08:25,330
specifying length for each of them and

150
00:08:25,330 --> 00:08:28,160
this is kind of a concept concept of

151
00:08:28,160 --> 00:08:30,050
streaming if you are familiar with

152
00:08:30,050 --> 00:08:33,320
Iraq's jazz observable or not jet

153
00:08:33,320 --> 00:08:36,520
streams it's exactly the thing with

154
00:08:36,520 --> 00:08:42,760
serving page in chunks and the first

155
00:08:42,760 --> 00:08:45,200
mentioning of progressive rendering I

156
00:08:45,200 --> 00:08:47,450
managed to find on the Internet is this

157
00:08:47,450 --> 00:08:50,750
blog post by Jeff Atwood but let's call

158
00:08:50,750 --> 00:08:53,450
the lost art of progressive HTML

159
00:08:53,450 --> 00:08:56,660
rendering and it has two very

160
00:08:56,660 --> 00:08:59,810
interesting points the first one is one

161
00:08:59,810 --> 00:09:01,459
thing I dislike about a

162
00:09:01,459 --> 00:09:03,980
dotnet is that it renders the entire web

163
00:09:03,980 --> 00:09:06,740
page in memory before sending one single

164
00:09:06,740 --> 00:09:09,589
bite of the page to the browser I am

165
00:09:09,589 --> 00:09:13,309
totally agree with it and the second one

166
00:09:13,309 --> 00:09:17,119
is what's even more galling is that HTML

167
00:09:17,119 --> 00:09:18,529
was originally designed to render

168
00:09:18,529 --> 00:09:21,230
progressively as content is received

169
00:09:21,230 --> 00:09:24,980
what it means it means that even first

170
00:09:24,980 --> 00:09:27,980
versions of the first browser in the

171
00:09:27,980 --> 00:09:32,360
world Netscape they had support for

172
00:09:32,360 --> 00:09:34,610
progressive rendering even in first

173
00:09:34,610 --> 00:09:37,309
early beta releases that means that

174
00:09:37,309 --> 00:09:41,499
browser goes through iterations

175
00:09:41,499 --> 00:09:44,769
rendering the HTML in browser that means

176
00:09:44,769 --> 00:09:50,920
if you have what partially piece of HTML

177
00:09:50,920 --> 00:09:54,439
that come to you from the server you can

178
00:09:54,439 --> 00:09:57,529
start parsing recognized resources like

179
00:09:57,529 --> 00:10:00,230
screeds images styles and start load-in

180
00:10:00,230 --> 00:10:03,290
them and in this case it works more

181
00:10:03,290 --> 00:10:06,110
efficient because browser goes for for

182
00:10:06,110 --> 00:10:09,470
resources in parallel while your whole

183
00:10:09,470 --> 00:10:15,799
page is not ready yet so if you added

184
00:10:15,799 --> 00:10:17,679
the previous code I showed you before

185
00:10:17,679 --> 00:10:21,199
which looks like this which just ends

186
00:10:21,199 --> 00:10:27,139
HTTP response with a vendor template we

187
00:10:27,139 --> 00:10:31,399
can go further and using a little bit

188
00:10:31,399 --> 00:10:33,529
more logic and maybe more complex

189
00:10:33,529 --> 00:10:37,339
approach we can reach progressive

190
00:10:37,339 --> 00:10:40,429
rendering without any additional tool we

191
00:10:40,429 --> 00:10:44,540
just need to go for data just split our

192
00:10:44,540 --> 00:10:47,209
data in small pieces and go for it in

193
00:10:47,209 --> 00:10:50,990
steps like if we need data for a header

194
00:10:50,990 --> 00:10:54,410
we go for just data for the header and

195
00:10:54,410 --> 00:10:56,600
then render this team played for the

196
00:10:56,600 --> 00:10:58,449
header and then serve the cutter and

197
00:10:58,449 --> 00:11:01,490
this is perfectly done by right function

198
00:11:01,490 --> 00:11:05,540
in response in HTTP response stream as

199
00:11:05,540 --> 00:11:08,600
you can see here and then we go for

200
00:11:08,600 --> 00:11:10,579
another blog another blog and do the

201
00:11:10,579 --> 00:11:13,009
same operation for every blog on the

202
00:11:13,009 --> 00:11:13,590
page

203
00:11:13,590 --> 00:11:16,550
yeah I totally agree that this coat

204
00:11:16,550 --> 00:11:20,460
looks really difficult and more

205
00:11:20,460 --> 00:11:23,610
difficult even to split your every page

206
00:11:23,610 --> 00:11:28,710
in such pieces and then serve it but at

207
00:11:28,710 --> 00:11:31,890
the end we can use wonderful not GS

208
00:11:31,890 --> 00:11:36,780
streams and the previous code would like

209
00:11:36,780 --> 00:11:42,060
like this would look like this so it's

210
00:11:42,060 --> 00:11:48,060
just we create our own stream with the

211
00:11:48,060 --> 00:11:50,790
parameters we got from the URL and then

212
00:11:50,790 --> 00:11:53,250
just pipe this dream through the HTTP

213
00:11:53,250 --> 00:11:57,920
response stream and that's it but the

214
00:11:57,920 --> 00:12:00,780
you might be wondering my response my

215
00:12:00,780 --> 00:12:02,580
breed of all stream how to implement

216
00:12:02,580 --> 00:12:05,910
that for those who is not familiar with

217
00:12:05,910 --> 00:12:08,850
not jet streams API it's quite simple as

218
00:12:08,850 --> 00:12:12,690
that you just extend some built-in class

219
00:12:12,690 --> 00:12:15,600
in node you just implement read function

220
00:12:15,600 --> 00:12:17,820
which allows you to push chunks of data

221
00:12:17,820 --> 00:12:21,870
through the stream and that's of course

222
00:12:21,870 --> 00:12:24,690
a synchronous and you can push whenever

223
00:12:24,690 --> 00:12:28,530
you want and then when you stop pushing

224
00:12:28,530 --> 00:12:30,990
and like the whole page is served you

225
00:12:30,990 --> 00:12:35,640
just push now as a data this is how real

226
00:12:35,640 --> 00:12:37,830
all streams work in not jazz without any

227
00:12:37,830 --> 00:12:43,520
additional libraries just built in so

228
00:12:43,520 --> 00:12:47,310
why progressive rendering is better so

229
00:12:47,310 --> 00:12:49,320
the first thing I already mentioned is

230
00:12:49,320 --> 00:12:53,340
less time to first byte for some

231
00:12:53,340 --> 00:12:55,830
projects it's really an important

232
00:12:55,830 --> 00:13:02,220
metrics used by teams by performance

233
00:13:02,220 --> 00:13:04,980
engineers and other stuff in the company

234
00:13:04,980 --> 00:13:07,620
and also it's very important for our

235
00:13:07,620 --> 00:13:11,220
user experience because users should see

236
00:13:11,220 --> 00:13:14,400
our app as soon as possible even though

237
00:13:14,400 --> 00:13:19,650
it's not completely ready maybe but we

238
00:13:19,650 --> 00:13:21,390
need to show something that we work for

239
00:13:21,390 --> 00:13:24,700
our user

240
00:13:24,710 --> 00:13:28,340
the second thing is browser works more

241
00:13:28,340 --> 00:13:30,170
efficiently loading resources in

242
00:13:30,170 --> 00:13:32,480
parallel and I will show you a

243
00:13:32,480 --> 00:13:36,950
screenshot in a second how that works it

244
00:13:36,950 --> 00:13:39,020
aligns with architecture based on

245
00:13:39,020 --> 00:13:42,500
microservices very well because of the

246
00:13:42,500 --> 00:13:45,770
main idea to split your data in small

247
00:13:45,770 --> 00:13:49,700
pieces and serve them in blocks of your

248
00:13:49,700 --> 00:13:53,540
page it's perfectly fine to have a set

249
00:13:53,540 --> 00:13:55,880
of micro services which you can use

250
00:13:55,880 --> 00:13:58,100
separately and every micro service is

251
00:13:58,100 --> 00:14:03,200
just serves data of scope not going like

252
00:14:03,200 --> 00:14:05,300
using other micro services you can use

253
00:14:05,300 --> 00:14:09,890
them directly to build a page and even

254
00:14:09,890 --> 00:14:12,620
though your API I mean restful api or

255
00:14:12,620 --> 00:14:16,490
database is very very slow a user is

256
00:14:16,490 --> 00:14:19,130
thinking that you're up in general is

257
00:14:19,130 --> 00:14:22,670
really fast it's just technology this is

258
00:14:22,670 --> 00:14:24,410
how it works how the perception of

259
00:14:24,410 --> 00:14:28,730
performance works and this approach is

260
00:14:28,730 --> 00:14:30,770
more scalable than buffering the whole

261
00:14:30,770 --> 00:14:33,710
page why is that because if you add a

262
00:14:33,710 --> 00:14:35,750
new block on your page like at the

263
00:14:35,750 --> 00:14:38,210
bottom with some data if you have a

264
00:14:38,210 --> 00:14:40,880
buffering approach your up would be

265
00:14:40,880 --> 00:14:44,030
rendering slower but if you have

266
00:14:44,030 --> 00:14:46,040
progress if rendering time to first by

267
00:14:46,040 --> 00:14:48,380
it would be the same even though you add

268
00:14:48,380 --> 00:14:50,480
something on the bottom or maybe on the

269
00:14:50,480 --> 00:14:53,420
right of new page the first part of the

270
00:14:53,420 --> 00:14:55,360
page would be delivered at the same time

271
00:14:55,360 --> 00:14:59,750
which is very important and this is the

272
00:14:59,750 --> 00:15:02,300
picture I promised to show this is a

273
00:15:02,300 --> 00:15:05,540
screenshot of a real project built using

274
00:15:05,540 --> 00:15:08,960
progressive rendering and for some

275
00:15:08,960 --> 00:15:11,690
reasons the API of this project doesn't

276
00:15:11,690 --> 00:15:14,990
serve data very fast and you can see

277
00:15:14,990 --> 00:15:17,060
that the whole process of rendering

278
00:15:17,060 --> 00:15:20,660
takes about three and a half seconds but

279
00:15:20,660 --> 00:15:23,960
the first byte the first part of the

280
00:15:23,960 --> 00:15:28,490
page was delivered in 327 milliseconds

281
00:15:28,490 --> 00:15:31,340
which is pretty good like our users

282
00:15:31,340 --> 00:15:33,740
didn't even notice that this app is very

283
00:15:33,740 --> 00:15:36,950
slow and which is more important you can

284
00:15:36,950 --> 00:15:38,030
see that

285
00:15:38,030 --> 00:15:41,210
in parallel browser started involved in

286
00:15:41,210 --> 00:15:43,580
other stuff like images scraped styles

287
00:15:43,580 --> 00:15:46,730
and every browser has this limitation

288
00:15:46,730 --> 00:15:49,880
how many HTTP requests that can do in

289
00:15:49,880 --> 00:15:52,460
this at the same time and in this case

290
00:15:52,460 --> 00:15:55,460
you can see that it's about four HTTP

291
00:15:55,460 --> 00:15:57,820
requests in this tab of a browser

292
00:15:57,820 --> 00:16:01,460
therefore like it blow loads resources

293
00:16:01,460 --> 00:16:04,070
like all these three sources in parallel

294
00:16:04,070 --> 00:16:06,560
then go goes for another three sources

295
00:16:06,560 --> 00:16:15,380
and exactly so but however as all things

296
00:16:15,380 --> 00:16:17,930
in real world it's not perfect and it

297
00:16:17,930 --> 00:16:22,370
has problems that can stop you from

298
00:16:22,370 --> 00:16:27,310
using it this how HTTP protocol works

299
00:16:27,310 --> 00:16:33,470
before we have to specify HTTP status

300
00:16:33,470 --> 00:16:35,510
code and always TP headers we need to

301
00:16:35,510 --> 00:16:37,690
set before sending the first by

302
00:16:37,690 --> 00:16:41,030
otherwise now JCP I just would ignore

303
00:16:41,030 --> 00:16:44,600
all things you said after and even

304
00:16:44,600 --> 00:16:46,910
doesn't throw an error or something we

305
00:16:46,910 --> 00:16:52,310
just downside a cookie but you wouldn't

306
00:16:52,310 --> 00:16:54,740
even notice that and you should keep in

307
00:16:54,740 --> 00:16:58,430
mind that so that means that cookies

308
00:16:58,430 --> 00:17:01,700
Redlegs not found statuses and stuff

309
00:17:01,700 --> 00:17:03,670
like that you need to serve before

310
00:17:03,670 --> 00:17:06,290
sending the first part of the page and

311
00:17:06,290 --> 00:17:09,830
that means that you have to request the

312
00:17:09,830 --> 00:17:13,040
main entity of your page first like if

313
00:17:13,040 --> 00:17:16,160
you have online shop or something like

314
00:17:16,160 --> 00:17:19,400
that you need to request the item of the

315
00:17:19,400 --> 00:17:21,920
like of the shop on the market place

316
00:17:21,920 --> 00:17:26,110
first and decide if the page status is

317
00:17:26,110 --> 00:17:29,750
404 not found or maybe you need to set

318
00:17:29,750 --> 00:17:33,290
some cookie but you would do it anyway

319
00:17:33,290 --> 00:17:35,330
because you need meta tags and other

320
00:17:35,330 --> 00:17:38,810
things in header which include this item

321
00:17:38,810 --> 00:17:43,760
description and other stuff so in

322
00:17:43,760 --> 00:17:46,380
practice it's not a huge deal

323
00:17:46,380 --> 00:17:49,830
and user isn't able to interact with a

324
00:17:49,830 --> 00:17:52,620
page till it's fully loaded I'm not

325
00:17:52,620 --> 00:17:54,990
saying like the full interaction but if

326
00:17:54,990 --> 00:17:59,090
you have JavaScript event handlers or

327
00:17:59,090 --> 00:18:01,920
something related to JavaScript you

328
00:18:01,920 --> 00:18:05,850
would probably need to wait for Adam

329
00:18:05,850 --> 00:18:09,360
ready event and only then subscribe and

330
00:18:09,360 --> 00:18:11,910
events and other things related to

331
00:18:11,910 --> 00:18:15,180
JavaScript logic and that means that

332
00:18:15,180 --> 00:18:18,360
your user would be able to click links

333
00:18:18,360 --> 00:18:21,270
and to open those links on the page and

334
00:18:21,270 --> 00:18:23,490
maybe submit forms all native HTML

335
00:18:23,490 --> 00:18:26,730
experience works till the whole page is

336
00:18:26,730 --> 00:18:30,390
loading and it's not ready yet but if

337
00:18:30,390 --> 00:18:33,120
you have some JavaScript that attached

338
00:18:33,120 --> 00:18:35,940
to an HTML and does something it does it

339
00:18:35,940 --> 00:18:39,660
after dumb radiate end and I've found

340
00:18:39,660 --> 00:18:44,280
some libraries that are still under

341
00:18:44,280 --> 00:18:46,680
development but they make it part make

342
00:18:46,680 --> 00:18:51,390
it possible to have this attachment to

343
00:18:51,390 --> 00:18:54,120
Evans even before the dominant don't

344
00:18:54,120 --> 00:19:00,210
read even I mean but it still up to you

345
00:19:00,210 --> 00:19:05,340
to decide to use them or not and maybe

346
00:19:05,340 --> 00:19:07,680
for someone it would be a decent

347
00:19:07,680 --> 00:19:10,350
villages disadvantage as well but you

348
00:19:10,350 --> 00:19:12,420
have to split your page the page data

349
00:19:12,420 --> 00:19:15,500
into small pieces or microservices and

350
00:19:15,500 --> 00:19:20,160
not I noticed that not everyone wants

351
00:19:20,160 --> 00:19:23,400
that and not everyone likes that but to

352
00:19:23,400 --> 00:19:25,680
have progress a friend when you need to

353
00:19:25,680 --> 00:19:29,190
split your huge data request you have in

354
00:19:29,190 --> 00:19:32,490
small pieces which would serve the page

355
00:19:32,490 --> 00:19:38,660
like step by step chunk by chunk and

356
00:19:38,660 --> 00:19:41,310
what about clients I'd rather you might

357
00:19:41,310 --> 00:19:43,830
be wondering why I'm saying all the

358
00:19:43,830 --> 00:19:45,780
things about server-side rendering and

359
00:19:45,780 --> 00:19:49,620
say nothing about client signed that's

360
00:19:49,620 --> 00:19:52,710
because actually it's very simple and

361
00:19:52,710 --> 00:19:55,590
it's already used by many people in

362
00:19:55,590 --> 00:19:57,690
single page applications like using

363
00:19:57,690 --> 00:19:59,600
react library or

364
00:19:59,600 --> 00:20:03,270
stuff like that and it's simple as just

365
00:20:03,270 --> 00:20:05,840
split your data into small queries

366
00:20:05,840 --> 00:20:08,670
render as soon as you've got its data

367
00:20:08,670 --> 00:20:13,080
and try to make your interface not jumpy

368
00:20:13,080 --> 00:20:16,020
using placeholders because it scans

369
00:20:16,020 --> 00:20:18,780
constantly moving by a login and you

370
00:20:18,780 --> 00:20:21,420
need to reserve the place for the

371
00:20:21,420 --> 00:20:23,790
content like for instance Facebook does

372
00:20:23,790 --> 00:20:25,980
Facebook actually uses progressive

373
00:20:25,980 --> 00:20:28,920
rendering a client signed it and you can

374
00:20:28,920 --> 00:20:32,970
see this like placeholders and your feet

375
00:20:32,970 --> 00:20:36,480
on the right instead of like friends

376
00:20:36,480 --> 00:20:39,320
suggestion or whatever is there and

377
00:20:39,320 --> 00:20:44,670
before all data was loaded you can see

378
00:20:44,670 --> 00:20:48,610
those clicks placeholders on the screen

379
00:20:48,620 --> 00:20:53,790
and another question you might be

380
00:20:53,790 --> 00:20:56,850
wondering is like is there a library of

381
00:20:56,850 --> 00:20:58,560
framework which make it makes it

382
00:20:58,560 --> 00:21:00,960
possible we don't want to read like a

383
00:21:00,960 --> 00:21:04,050
lot of dogs and write this stream I

384
00:21:04,050 --> 00:21:08,250
showed before and of course there are a

385
00:21:08,250 --> 00:21:12,360
lot of ready solutions for that so I've

386
00:21:12,360 --> 00:21:17,640
seen that some enthusiasts makes work on

387
00:21:17,640 --> 00:21:19,710
the rag downstream which is the library

388
00:21:19,710 --> 00:21:23,280
that makes it possible to render virtual

389
00:21:23,280 --> 00:21:26,780
Dom on server like a stream in chunks

390
00:21:26,780 --> 00:21:30,090
but I'm not sure about the lips is there

391
00:21:30,090 --> 00:21:33,720
is library stable or is there any

392
00:21:33,720 --> 00:21:36,030
problem with that I i would recommend to

393
00:21:36,030 --> 00:21:38,970
check it out on your own and see if it

394
00:21:38,970 --> 00:21:44,700
works also if you know the Zoolander

395
00:21:44,700 --> 00:21:48,330
fashion online shop they use a project

396
00:21:48,330 --> 00:21:50,640
called Taylor and what it basically does

397
00:21:50,640 --> 00:21:54,750
just gathers HTML pieces from a set of

398
00:21:54,750 --> 00:21:57,930
micro services every team develops like

399
00:21:57,930 --> 00:22:01,020
a piece of HTML on the page and then

400
00:22:01,020 --> 00:22:03,750
Taylor just gathers everything in one

401
00:22:03,750 --> 00:22:07,430
piece and serves a page also there is a

402
00:22:07,430 --> 00:22:12,240
click quite old team plant engine which

403
00:22:12,240 --> 00:22:13,030
is does Jay

404
00:22:13,030 --> 00:22:16,870
and it's forth by linkedin and what they

405
00:22:16,870 --> 00:22:20,670
do is you can specify a function as a

406
00:22:20,670 --> 00:22:23,920
property of data object when you render

407
00:22:23,920 --> 00:22:26,500
your team played and when template

408
00:22:26,500 --> 00:22:29,320
renders like this function it allows you

409
00:22:29,320 --> 00:22:32,050
to go as synchronous and like request

410
00:22:32,050 --> 00:22:35,350
any data and the stream would be post

411
00:22:35,350 --> 00:22:38,760
till the moment your cut this data and

412
00:22:38,760 --> 00:22:43,540
return is a call back also there is a

413
00:22:43,540 --> 00:22:45,880
template engine called Marco or mark of

414
00:22:45,880 --> 00:22:49,540
idiots it does pretty similar thing it

415
00:22:49,540 --> 00:22:52,150
works as progressive rendering

416
00:22:52,150 --> 00:22:54,070
everywhere on client signed and on

417
00:22:54,070 --> 00:22:58,510
server also there's picking you template

418
00:22:58,510 --> 00:23:00,370
engine called talisman I've just read

419
00:23:00,370 --> 00:23:04,120
about this a month ago on medium and it

420
00:23:04,120 --> 00:23:06,670
looks really promising and also if you

421
00:23:06,670 --> 00:23:08,590
need not just a template engine but the

422
00:23:08,590 --> 00:23:10,270
whole framework for building your art

423
00:23:10,270 --> 00:23:14,230
based on this approach on progressive

424
00:23:14,230 --> 00:23:17,860
rendering you might want to use Cadbury

425
00:23:17,860 --> 00:23:21,190
jazz which is isomorphic framework based

426
00:23:21,190 --> 00:23:24,160
on web components ideology using

427
00:23:24,160 --> 00:23:29,470
progressive rendering let's summarize

428
00:23:29,470 --> 00:23:33,940
the talk if you have many data requests

429
00:23:33,940 --> 00:23:37,210
or a huge request you should plead in

430
00:23:37,210 --> 00:23:39,850
small pieces it means you need

431
00:23:39,850 --> 00:23:41,800
progressive rendering otherwise it would

432
00:23:41,800 --> 00:23:45,580
be not that good user experience the

433
00:23:45,580 --> 00:23:47,730
technology is basically very old and

434
00:23:47,730 --> 00:23:50,980
perfectly supported by browsers since

435
00:23:50,980 --> 00:23:54,870
the Netscape one point 0 therefore

436
00:23:54,870 --> 00:23:59,080
everyone can use that it's not that hard

437
00:23:59,080 --> 00:24:01,720
to implement and you can use not jet

438
00:24:01,720 --> 00:24:06,670
streams for that and even if you don't

439
00:24:06,670 --> 00:24:10,180
want to do that there are a lot of ready

440
00:24:10,180 --> 00:24:13,900
solutions but you have to keep in mind

441
00:24:13,900 --> 00:24:16,240
some disadvantages of that like setting

442
00:24:16,240 --> 00:24:20,220
HTTP status code or HTTP headers cookies

443
00:24:20,220 --> 00:24:22,630
redirects anything like that you have to

444
00:24:22,630 --> 00:24:24,820
do that before the first chunk of data

445
00:24:24,820 --> 00:24:28,460
is searched from the server

446
00:24:28,470 --> 00:24:31,110
there are some existing solutions I

447
00:24:31,110 --> 00:24:35,110
would really recommend them to check

448
00:24:35,110 --> 00:24:37,149
them out and to experiment with them

449
00:24:37,149 --> 00:24:41,710
maybe it's a good use case even not even

450
00:24:41,710 --> 00:24:44,620
but especially for your project and your

451
00:24:44,620 --> 00:24:47,500
company might be it would be better user

452
00:24:47,500 --> 00:24:51,899
experience for your users or customers

453
00:24:51,899 --> 00:24:55,570
but the point of the talk is don't make

454
00:24:55,570 --> 00:24:57,820
your users wait just make your apps

455
00:24:57,820 --> 00:25:00,130
render sooner and let them look like

