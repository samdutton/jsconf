1
00:00:37,890 --> 00:00:40,990

hi I'm John David Dalton and today I'm

2
00:00:40,990 --> 00:00:42,340
going to be talking about fearless

3
00:00:42,340 --> 00:00:48,340
browser test automation so a little bit

4
00:00:48,340 --> 00:00:52,630
of background I am a contributor to

5
00:00:52,630 --> 00:00:57,130
lodash lodash is a before I begin how

6
00:00:57,130 --> 00:01:01,360
many people use lodash alright are how

7
00:01:01,360 --> 00:01:03,820
many people use underscore all right get

8
00:01:03,820 --> 00:01:07,120
out get out it's ready yes no that's

9
00:01:07,120 --> 00:01:09,400
okay you can stay I also help and

10
00:01:09,400 --> 00:01:12,340
contribute to underscore too but today

11
00:01:12,340 --> 00:01:13,810
I'm going to be talking about browser

12
00:01:13,810 --> 00:01:16,360
test automation and what I did with

13
00:01:16,360 --> 00:01:20,350
lodash to to tackle that when i created

14
00:01:20,350 --> 00:01:22,060
lodash one of the things i wanted to do

15
00:01:22,060 --> 00:01:24,100
today to separate myself from the

16
00:01:24,100 --> 00:01:26,500
competition was to list the browser's I

17
00:01:26,500 --> 00:01:29,380
test and that meant testing those

18
00:01:29,380 --> 00:01:32,229
browsers and so when I first released

19
00:01:32,229 --> 00:01:35,159
lodash I was very accommodating to

20
00:01:35,159 --> 00:01:37,240
testing lots of browsers I said I

21
00:01:37,240 --> 00:01:40,770
support chrome 5 and i support firefox

22
00:01:40,770 --> 00:01:43,780
what is it now 29 or something like all

23
00:01:43,780 --> 00:01:46,150
the ranges all the browsers and that

24
00:01:46,150 --> 00:01:49,000
meant testing all of those things and so

25
00:01:49,000 --> 00:01:52,450
that took about two days to do and we

26
00:01:52,450 --> 00:01:56,049
had 38 or 34 releases in that year which

27
00:01:56,049 --> 00:01:58,720
meant a lot of time spent testing and I

28
00:01:58,720 --> 00:02:02,920
knew there had to be a better way but

29
00:02:02,920 --> 00:02:07,810
before I start j/s comp is a conference

30
00:02:07,810 --> 00:02:10,720
of firsts I started lodash after

31
00:02:10,720 --> 00:02:15,400
j/s comp one year and I was inspired by

32
00:02:15,400 --> 00:02:19,420
Jen's talk on George sort so I'd like to

33
00:02:19,420 --> 00:02:21,160
announce that we will be getting short

34
00:02:21,160 --> 00:02:24,550
by it's a it's a drop-in replacement for

35
00:02:24,550 --> 00:02:26,860
George sort but it is faster and more

36
00:02:26,860 --> 00:02:34,870
consistent yeah thank you all right you

37
00:02:34,870 --> 00:02:36,970
can follow along and some of the the Q

38
00:02:36,970 --> 00:02:41,290
A's of the my testing story at sauce

39
00:02:41,290 --> 00:02:43,870
labs they did a blog post where I answer

40
00:02:43,870 --> 00:02:46,390
a lot of the questions I'll be talking

41
00:02:46,390 --> 00:02:48,910
about today so there's the short URL

42
00:02:48,910 --> 00:02:53,980
there bit ly / sauce hyphen loaded with

43
00:02:53,980 --> 00:02:56,350
no hyphen on the low dash all right

44
00:02:56,350 --> 00:03:01,630
manual testing made me do this it was

45
00:03:01,630 --> 00:03:05,950
horrible it's lots of browsers its

46
00:03:05,950 --> 00:03:08,530
variations its versions its virtual

47
00:03:08,530 --> 00:03:10,600
machines and it's time so I mentioned

48
00:03:10,600 --> 00:03:13,300
that I test a lot of browsers and I'm

49
00:03:13,300 --> 00:03:16,180
sure everyone's setup looks like this so

50
00:03:16,180 --> 00:03:19,360
we all have our Chrome browsers right

51
00:03:19,360 --> 00:03:23,709
okay we all have our I ease we all have

52
00:03:23,709 --> 00:03:27,340
our firefox's our operas and our safaris

53
00:03:27,340 --> 00:03:30,160
and I tested on all of those manually

54
00:03:30,160 --> 00:03:32,709
opening up the browser going to the unit

55
00:03:32,709 --> 00:03:35,260
tests running the unit tests doing a

56
00:03:35,260 --> 00:03:37,450
drop-down menu to change out the file in

57
00:03:37,450 --> 00:03:39,519
the build and doing that over and over

58
00:03:39,519 --> 00:03:41,860
and over and over again and that just

59
00:03:41,860 --> 00:03:46,390
sucked up my weekends so so I wanted to

60
00:03:46,390 --> 00:03:49,299
automate this but the problem was it was

61
00:03:49,299 --> 00:03:50,709
intimidating there wasn't a lot of

62
00:03:50,709 --> 00:03:52,330
documentation around browser test

63
00:03:52,330 --> 00:03:55,750
automation I noticed that it seemed to

64
00:03:55,750 --> 00:04:00,190
be mysterious and very hard in fact I

65
00:04:00,190 --> 00:04:02,160
could not do it I had to ask the

66
00:04:02,160 --> 00:04:05,170
twittersphere for help and someone

67
00:04:05,170 --> 00:04:08,440
actually jumped in and fixed bugs in

68
00:04:08,440 --> 00:04:12,459
dependencies of NPM packages and to get

69
00:04:12,459 --> 00:04:14,350
it to work for me and then once they did

70
00:04:14,350 --> 00:04:16,359
that then I was able to kind of refine

71
00:04:16,359 --> 00:04:18,459
it and clean it up and I took it on from

72
00:04:18,459 --> 00:04:21,220
there and so I'm going to be covering

73
00:04:21,220 --> 00:04:23,139
some of the roadblocks that Iran

74
00:04:23,139 --> 00:04:27,669
into getting testing started so let me

75
00:04:27,669 --> 00:04:35,349
go back all right if you noticed I had a

76
00:04:35,349 --> 00:04:37,330
lot of virtual machines to that eats up

77
00:04:37,330 --> 00:04:39,669
my hard drive this box is basically just

78
00:04:39,669 --> 00:04:41,919
good for javascript there's almost no

79
00:04:41,919 --> 00:04:45,449
hard drive space left it's all just VMs

80
00:04:45,449 --> 00:04:49,360
all right so lodash tests on five

81
00:04:49,360 --> 00:04:52,090
browsers that's five environments so

82
00:04:52,090 --> 00:04:55,240
it's not just it's not just note or the

83
00:04:55,240 --> 00:04:58,930
browser's it's Ringo Rhino norwall I'm

84
00:04:58,930 --> 00:05:01,360
about to do Nagy horn which is like the

85
00:05:01,360 --> 00:05:05,199
new rhino and I even test on things like

86
00:05:05,199 --> 00:05:07,360
adobe illustrator but that's not

87
00:05:07,360 --> 00:05:08,740
included in my automation I just

88
00:05:08,740 --> 00:05:11,439
manually do that one there's also build

89
00:05:11,439 --> 00:05:13,539
so it's not just the monolithic bill

90
00:05:13,539 --> 00:05:15,279
because we've had a lot of talks on

91
00:05:15,279 --> 00:05:18,159
modules right so lodash supports custom

92
00:05:18,159 --> 00:05:19,779
builds we're one of the most customized

93
00:05:19,779 --> 00:05:22,180
libraries out there so there's the AMD

94
00:05:22,180 --> 00:05:24,339
build there's the common j/s build which

95
00:05:24,339 --> 00:05:28,089
is different than the MPN build and all

96
00:05:28,089 --> 00:05:30,430
of these are tested and they all run in

97
00:05:30,430 --> 00:05:32,770
the same unit test so I have one unit

98
00:05:32,770 --> 00:05:35,020
test file and every single one of these

99
00:05:35,020 --> 00:05:37,270
bills can run against that unit test so

100
00:05:37,270 --> 00:05:40,949
I know that each one's covered and

101
00:05:40,949 --> 00:05:43,060
testing it in the browser it's the same

102
00:05:43,060 --> 00:05:45,279
thing it's not just the monolithic build

103
00:05:45,279 --> 00:05:47,050
it's the AMD built it's the underscore

104
00:05:47,050 --> 00:05:49,659
build it's the backbone build its it's

105
00:05:49,659 --> 00:05:52,029
the comic the compat build it's the

106
00:05:52,029 --> 00:05:54,310
modern build it's the non minified

107
00:05:54,310 --> 00:05:56,169
version it's the minified version of

108
00:05:56,169 --> 00:05:58,300
each one of these things because bugs

109
00:05:58,300 --> 00:06:00,539
creep in to lots of different areas

110
00:06:00,539 --> 00:06:04,240
closure compiler Advanced Mode likes to

111
00:06:04,240 --> 00:06:06,849
think it knows more than you do and will

112
00:06:06,849 --> 00:06:08,710
say hey this code can never be reached

113
00:06:08,710 --> 00:06:11,110
but engines are buggy and lots of places

114
00:06:11,110 --> 00:06:13,569
where code can should never be reached

115
00:06:13,569 --> 00:06:15,159
can get reached if you're doing a

116
00:06:15,159 --> 00:06:17,439
feature test and so close your compiler

117
00:06:17,439 --> 00:06:19,449
will like to strip out those feature

118
00:06:19,449 --> 00:06:22,029
tests so I have to put them back in and

119
00:06:22,029 --> 00:06:23,560
I have unit tests to make sure that the

120
00:06:23,560 --> 00:06:28,839
minified versions work correctly this

121
00:06:28,839 --> 00:06:31,089
says 30 versions i have since pulled

122
00:06:31,089 --> 00:06:33,250
back because even automating it that's

123
00:06:33,250 --> 00:06:35,259
still a crazy amount of browsers so i

124
00:06:35,259 --> 00:06:36,510
follow the jquery

125
00:06:36,510 --> 00:06:39,360
a method of this which is take the

126
00:06:39,360 --> 00:06:42,090
current browser and go one back so I

127
00:06:42,090 --> 00:06:43,980
test that except for things like IE

128
00:06:43,980 --> 00:06:46,980
where I still support ie6 and Safari

129
00:06:46,980 --> 00:06:49,170
where I support safari five and that's

130
00:06:49,170 --> 00:06:51,630
mainly because things like phantom jas

131
00:06:51,630 --> 00:06:55,050
still use ish five ish for for its

132
00:06:55,050 --> 00:06:56,730
WebKit so I make sure that I support

133
00:06:56,730 --> 00:07:00,030
that too okay so I said there's got to

134
00:07:00,030 --> 00:07:01,710
be a better way and there is and it's

135
00:07:01,710 --> 00:07:04,560
browser test automation there's a couple

136
00:07:04,560 --> 00:07:06,120
of options out there there's there's

137
00:07:06,120 --> 00:07:07,800
sauce labs which I'll be talking about

138
00:07:07,800 --> 00:07:09,960
today and there's Tesla ng which is a

139
00:07:09,960 --> 00:07:13,830
different way to do it just because I'm

140
00:07:13,830 --> 00:07:15,450
talking about sauce labs doesn't mean

141
00:07:15,450 --> 00:07:17,310
it's the one true way it's the way that

142
00:07:17,310 --> 00:07:21,930
I I went if you if you use Tesla ng or

143
00:07:21,930 --> 00:07:23,160
you use browser stack or you use

144
00:07:23,160 --> 00:07:24,660
something else as long as you're doing

145
00:07:24,660 --> 00:07:26,850
test automation you're in a better place

146
00:07:26,850 --> 00:07:29,640
so I would encourage anyone to just to

147
00:07:29,640 --> 00:07:32,520
to read up on these different options

148
00:07:32,520 --> 00:07:33,690
and pick the one that's right for you I

149
00:07:33,690 --> 00:07:36,690
like sauce labs let's see if I get into

150
00:07:36,690 --> 00:07:39,780
that real quick I might because it has a

151
00:07:39,780 --> 00:07:43,290
view of you can do lots of things with

152
00:07:43,290 --> 00:07:45,810
your unit tests so for example here's an

153
00:07:45,810 --> 00:07:49,350
exam I my page layout here for the sauce

154
00:07:49,350 --> 00:07:54,870
labs you can go along our play along

155
00:07:54,870 --> 00:07:57,480
with me here and follow along that is

156
00:07:57,480 --> 00:08:00,630
and go to sauce lab / you / lodash to

157
00:08:00,630 --> 00:08:02,550
see the recently run unit tests I ran

158
00:08:02,550 --> 00:08:05,250
these tests about 30 minutes ago so it

159
00:08:05,250 --> 00:08:07,290
was a really big chance because there

160
00:08:07,290 --> 00:08:08,940
could have been mass fails there could

161
00:08:08,940 --> 00:08:10,920
have been instability and the the test

162
00:08:10,920 --> 00:08:13,290
automation but in a little bit i'll

163
00:08:13,290 --> 00:08:15,000
explain why that wasn't the case and why

164
00:08:15,000 --> 00:08:17,910
they're all green you'll notice that it

165
00:08:17,910 --> 00:08:20,820
has the name of the test it has the OS

166
00:08:20,820 --> 00:08:23,190
it has tags with it too so you can

167
00:08:23,190 --> 00:08:25,110
associate with your unit test run

168
00:08:25,110 --> 00:08:27,900
keywords so for example when I'm testing

169
00:08:27,900 --> 00:08:29,970
the compat build and the minified build

170
00:08:29,970 --> 00:08:32,700
its compat production and it's also the

171
00:08:32,700 --> 00:08:35,400
underscore unit test suite so it says

172
00:08:35,400 --> 00:08:37,800
underscore and so using that on the

173
00:08:37,800 --> 00:08:40,260
search session name I can I can narrow

174
00:08:40,260 --> 00:08:44,130
down tests by the tags and the tests I

175
00:08:44,130 --> 00:08:46,620
can also you'll see here it has the

176
00:08:46,620 --> 00:08:48,330
commit hash there too so I can look up

177
00:08:48,330 --> 00:08:48,720
test

178
00:08:48,720 --> 00:08:50,730
by commit hash and then of course it has

179
00:08:50,730 --> 00:08:52,829
the the name of the test so it has

180
00:08:52,829 --> 00:08:54,660
things like the underscore test the

181
00:08:54,660 --> 00:08:56,490
backbone tests and the low dash test

182
00:08:56,490 --> 00:08:58,199
because lodash tests against underscores

183
00:08:58,199 --> 00:09:00,300
unit tests it also test against backbone

184
00:09:00,300 --> 00:09:01,589
to to make sure that there's that

185
00:09:01,589 --> 00:09:07,740
compatibility there all right so to get

186
00:09:07,740 --> 00:09:12,899
started I used Travis CI qunit sauce

187
00:09:12,899 --> 00:09:16,110
labs supports jasmine mocha and a few

188
00:09:16,110 --> 00:09:21,000
others it also supports custom unit

189
00:09:21,000 --> 00:09:22,920
testing libraries and I'll kinda I'll go

190
00:09:22,920 --> 00:09:25,470
into that a little bit later too i use i

191
00:09:25,470 --> 00:09:28,139
don't use grunt but it is optional how

192
00:09:28,139 --> 00:09:30,509
many people are using current all right

193
00:09:30,509 --> 00:09:31,829
so if you're using front there's a

194
00:09:31,829 --> 00:09:33,720
really easy way to get browser test

195
00:09:33,720 --> 00:09:35,730
automation set up and i'll talk about

196
00:09:35,730 --> 00:09:37,439
that too and then you'll need a sauce

197
00:09:37,439 --> 00:09:39,389
labs account and that's just real easy

198
00:09:39,389 --> 00:09:41,040
you sign up you get your account you get

199
00:09:41,040 --> 00:09:44,329
a AP I key and that's what you'll need

200
00:09:44,329 --> 00:09:47,670
okay so i make travis CI do all the

201
00:09:47,670 --> 00:09:50,160
things i don't do I don't use grunt in

202
00:09:50,160 --> 00:09:52,410
my case because grunt traditionally has

203
00:09:52,410 --> 00:09:54,750
used lodash too and I kind of wanted to

204
00:09:54,750 --> 00:09:57,149
have this pure dependency stack where I

205
00:09:57,149 --> 00:09:58,529
wasn't using anything else that was

206
00:09:58,529 --> 00:10:02,220
using me to test myself so I i make

207
00:10:02,220 --> 00:10:04,410
grunt Travis do it and that looks

208
00:10:04,410 --> 00:10:08,100
something like this this massive yml

209
00:10:08,100 --> 00:10:13,709
file go to my github repo for lodash and

210
00:10:13,709 --> 00:10:17,100
it's lodash / Travis yml to see this

211
00:10:17,100 --> 00:10:19,680
this pretty hefty yml file and what it's

212
00:10:19,680 --> 00:10:22,410
doing is it's running each one of these

213
00:10:22,410 --> 00:10:24,329
various versions of the build so it's

214
00:10:24,329 --> 00:10:29,309
running phantom Jas norwall rhino it's

215
00:10:29,309 --> 00:10:31,350
running the various builds as well too

216
00:10:31,350 --> 00:10:33,120
and then somewhere in there towards the

217
00:10:33,120 --> 00:10:36,089
bottom you'll see the sauce labs runs

218
00:10:36,089 --> 00:10:41,059
too so I throw my command in there to

219
00:10:41,059 --> 00:10:44,519
call a helper file which establishes the

220
00:10:44,519 --> 00:10:48,449
tunnel sets up the tests runs the tests

221
00:10:48,449 --> 00:10:50,689
and will actually reach fry the test two

222
00:10:50,689 --> 00:10:53,129
all right so this is what it looks like

223
00:10:53,129 --> 00:10:55,139
on Travis CI when it's actually running

224
00:10:55,139 --> 00:10:57,569
the jobs you'll see it says the name of

225
00:10:57,569 --> 00:10:58,720
the browser the version

226
00:10:58,720 --> 00:11:00,459
and past and if there was an issue there

227
00:11:00,459 --> 00:11:02,439
it would say failed at how many if there

228
00:11:02,439 --> 00:11:04,689
was a connection issue it would say what

229
00:11:04,689 --> 00:11:06,009
the connection is she was it may even

230
00:11:06,009 --> 00:11:07,600
give you a link for more information

231
00:11:07,600 --> 00:11:10,569
about that issue too but when I when

232
00:11:10,569 --> 00:11:12,009
everything is good you'll see things

233
00:11:12,009 --> 00:11:14,410
like this where just says past and

234
00:11:14,410 --> 00:11:15,699
you'll see there too that I have the

235
00:11:15,699 --> 00:11:17,230
fancy colors and that's because chalk

236
00:11:17,230 --> 00:11:20,800
which I mentioned earlier here oops it's

237
00:11:20,800 --> 00:11:23,829
not there it's over here somewhere I use

238
00:11:23,829 --> 00:11:25,709
chalk to color that again optional

239
00:11:25,709 --> 00:11:29,439
alright what I do now is I I take it up

240
00:11:29,439 --> 00:11:31,750
a notch and I do code coverage too so

241
00:11:31,750 --> 00:11:35,019
not only is it test automation it's code

242
00:11:35,019 --> 00:11:38,279
coverage as well and i use istanbul to

243
00:11:38,279 --> 00:11:42,189
do a passover lodash and then i feed

244
00:11:42,189 --> 00:11:43,750
that to coveralls and what's nice about

245
00:11:43,750 --> 00:11:46,240
coveralls coveralls is kind of a bit

246
00:11:46,240 --> 00:11:49,750
beta ish but for me at least with the

247
00:11:49,750 --> 00:11:51,699
modular build so the modular eyes build

248
00:11:51,699 --> 00:11:53,379
is the screenshot that i'm showing here

249
00:11:53,379 --> 00:11:56,439
it can show module per module or in this

250
00:11:56,439 --> 00:11:58,240
case like method / method and show me

251
00:11:58,240 --> 00:12:00,730
how much i have coverage for that method

252
00:12:00,730 --> 00:12:02,980
and i just used that today to find dead

253
00:12:02,980 --> 00:12:05,199
code in two of my methods which was a

254
00:12:05,199 --> 00:12:07,569
sign and merge I had a little if

255
00:12:07,569 --> 00:12:09,189
statement that was never being hit and

256
00:12:09,189 --> 00:12:12,459
it wasn't a coverage gap it was a

257
00:12:12,459 --> 00:12:14,170
usability gap like there's no way to

258
00:12:14,170 --> 00:12:15,939
actually get to that chunk of code so i

259
00:12:15,939 --> 00:12:18,129
was able to spot dead code and remove it

260
00:12:18,129 --> 00:12:20,620
from my build and then of course that

261
00:12:20,620 --> 00:12:23,410
increases the coverage percent as well

262
00:12:23,410 --> 00:12:26,649
so this says ninety percent in this file

263
00:12:26,649 --> 00:12:28,990
or that file overall it's Tildy a

264
00:12:28,990 --> 00:12:30,790
hundred percent so if you go to the

265
00:12:30,790 --> 00:12:32,500
actual interface it says a hundred

266
00:12:32,500 --> 00:12:34,660
percent so I'm rocking about a hundred

267
00:12:34,660 --> 00:12:39,490
percent test coverage there so to do

268
00:12:39,490 --> 00:12:41,170
this the MPN depths this is the one

269
00:12:41,170 --> 00:12:43,990
where chalk was there I use chalk I use

270
00:12:43,990 --> 00:12:46,389
a static file server this case was

271
00:12:46,389 --> 00:12:49,300
ecstatic I tried a few others and I'm

272
00:12:49,300 --> 00:12:51,970
not a pro at like all things server

273
00:12:51,970 --> 00:12:55,500
related so I found one that worked a

274
00:12:55,500 --> 00:12:59,620
request and then sauce tunnel now just a

275
00:12:59,620 --> 00:13:01,300
just a few weeks ago I would have had to

276
00:13:01,300 --> 00:13:03,189
put like an astronaut a sauce tunnel

277
00:13:03,189 --> 00:13:05,860
about connection problems and using a

278
00:13:05,860 --> 00:13:07,240
very specific patch which was a

279
00:13:07,240 --> 00:13:08,980
roadblock that I had to overcome but

280
00:13:08,980 --> 00:13:10,720
they have since fixed that so now you

281
00:13:10,720 --> 00:13:12,490
just use sauce tunnel

282
00:13:12,490 --> 00:13:14,020
and everything works it's using soft

283
00:13:14,020 --> 00:13:17,260
connect version 4 which is an updated

284
00:13:17,260 --> 00:13:19,740
version should be faster more reliable

285
00:13:19,740 --> 00:13:24,700
all the things so some of the cool

286
00:13:24,700 --> 00:13:26,080
things you can do with browser test

287
00:13:26,080 --> 00:13:28,120
automation and one of the reasons i use

288
00:13:28,120 --> 00:13:30,040
sauce labs is because it gives you more

289
00:13:30,040 --> 00:13:33,610
control I did not want to do I did not

290
00:13:33,610 --> 00:13:35,500
want as much control as like webdriver

291
00:13:35,500 --> 00:13:37,540
so that's like scripting all kinds of

292
00:13:37,540 --> 00:13:39,550
things and I did not want that but I

293
00:13:39,550 --> 00:13:41,680
wanted a little bit more control because

294
00:13:41,680 --> 00:13:43,570
one of the things I test is ie compat

295
00:13:43,570 --> 00:13:45,580
ones so you all know that there's

296
00:13:45,580 --> 00:13:48,310
there's compat modes in IE and that

297
00:13:48,310 --> 00:13:50,410
they're not exact emulations of their

298
00:13:50,410 --> 00:13:52,810
mode so if you're running IE 11 as ie8

299
00:13:52,810 --> 00:13:55,270
that's not really ie8 that's an emulator

300
00:13:55,270 --> 00:13:58,330
form of ie8 it's a compat mode and

301
00:13:58,330 --> 00:14:00,700
there's bugs in the compat mode that

302
00:14:00,700 --> 00:14:02,860
don't show up in the normal version and

303
00:14:02,860 --> 00:14:06,490
underscore and lodash patch issues with

304
00:14:06,490 --> 00:14:08,890
that and it's in the library and so I

305
00:14:08,890 --> 00:14:13,209
need to test that and with with salsa

306
00:14:13,209 --> 00:14:15,130
labs I can I basically detect a query

307
00:14:15,130 --> 00:14:17,529
string I set the header for the file

308
00:14:17,529 --> 00:14:19,450
because you you can set compat modes

309
00:14:19,450 --> 00:14:21,730
inside a meta tag or you can set compat

310
00:14:21,730 --> 00:14:26,050
modes with the HD HTML header for the

311
00:14:26,050 --> 00:14:28,329
header for the HTML file and so I do it

312
00:14:28,329 --> 00:14:30,459
that way so I can have the exact same

313
00:14:30,459 --> 00:14:32,050
unit test that's running all of my

314
00:14:32,050 --> 00:14:33,640
browser tests also run the compat mode

315
00:14:33,640 --> 00:14:36,760
tests too what's also nice is concurrent

316
00:14:36,760 --> 00:14:39,730
tunnels so it's not just run one unit

317
00:14:39,730 --> 00:14:42,850
test suite wait for it to complete start

318
00:14:42,850 --> 00:14:44,800
another started another that would take

319
00:14:44,800 --> 00:14:47,200
forever this allows concurrent test

320
00:14:47,200 --> 00:14:50,649
tunnels so you can have tests running at

321
00:14:50,649 --> 00:14:54,190
the same time there's limits for the

322
00:14:54,190 --> 00:14:55,480
free account there's like a limit of

323
00:14:55,480 --> 00:14:59,920
three I opted mine to 10 but 10 has been

324
00:14:59,920 --> 00:15:01,390
more than I've ever needed and I do a

325
00:15:01,390 --> 00:15:03,760
lot of variations here like I mentioned

326
00:15:03,760 --> 00:15:05,529
earlier with all of the builds and the

327
00:15:05,529 --> 00:15:08,440
minified and all of that automatic

328
00:15:08,440 --> 00:15:10,300
retries so this is something I've been

329
00:15:10,300 --> 00:15:12,970
working on it's it's not available in

330
00:15:12,970 --> 00:15:18,339
the grunt plugin yet but it's what it

331
00:15:18,339 --> 00:15:21,160
does is this this is running tests from

332
00:15:21,160 --> 00:15:22,959
travis CI its opening a tunnel from

333
00:15:22,959 --> 00:15:25,120
travis CI to sauce labs

334
00:15:25,120 --> 00:15:27,279
and running unit tests and a lot of

335
00:15:27,279 --> 00:15:29,740
weird stuff can happen on the net like

336
00:15:29,740 --> 00:15:31,060
some connections could be dropped

337
00:15:31,060 --> 00:15:32,350
something could be hanging somewhere

338
00:15:32,350 --> 00:15:35,110
causing it to fail and it's not my fault

339
00:15:35,110 --> 00:15:37,150
it's not that it's not my codes fault

340
00:15:37,150 --> 00:15:39,130
it's not failing unit tests there's a

341
00:15:39,130 --> 00:15:41,589
connection issue and normally that would

342
00:15:41,589 --> 00:15:43,330
that would cause the the test run to

343
00:15:43,330 --> 00:15:45,130
fail and that would cause my Travis job

344
00:15:45,130 --> 00:15:46,900
to fail and each one of them i have

345
00:15:46,900 --> 00:15:49,240
three Travis runs for the the monolithic

346
00:15:49,240 --> 00:15:52,330
build and that's each one has like eight

347
00:15:52,330 --> 00:15:55,360
sauce labs connections and so that means

348
00:15:55,360 --> 00:15:57,339
if one of those eight fail my entire

349
00:15:57,339 --> 00:15:59,620
Travis job fails and it says my unit

350
00:15:59,620 --> 00:16:01,960
tests fail for that so it's very

351
00:16:01,960 --> 00:16:03,460
important that I don't have false

352
00:16:03,460 --> 00:16:05,140
positives keeping up because it could be

353
00:16:05,140 --> 00:16:07,150
very chatty and making me always have to

354
00:16:07,150 --> 00:16:08,940
double check my work which is annoying

355
00:16:08,940 --> 00:16:12,040
so what I've added was retries in all

356
00:16:12,040 --> 00:16:13,690
the place and all the things so it does

357
00:16:13,690 --> 00:16:15,700
things like qunit how many people use

358
00:16:15,700 --> 00:16:20,010
qunit whew not a lot I tell you what I

359
00:16:20,010 --> 00:16:22,330
qunit because it was available at the

360
00:16:22,330 --> 00:16:25,900
time and because underscore and backbone

361
00:16:25,900 --> 00:16:27,490
use it and I want compatibility with

362
00:16:27,490 --> 00:16:30,160
them so what I did was I made qunit work

363
00:16:30,160 --> 00:16:31,900
in all the environments that it doesn't

364
00:16:31,900 --> 00:16:33,580
naturally work it so I made it work a

365
00:16:33,580 --> 00:16:36,630
note I made it work in Java ooh by

366
00:16:36,630 --> 00:16:40,360
shimming set timeout set interval and

367
00:16:40,360 --> 00:16:41,350
clear timeout and all of those things

368
00:16:41,350 --> 00:16:43,779
and get got it working there so I'm i

369
00:16:43,779 --> 00:16:46,779
found this this this way to make it work

370
00:16:46,779 --> 00:16:50,080
I use it it's called qunit extras which

371
00:16:50,080 --> 00:16:51,520
is the note on the bottom there and

372
00:16:51,520 --> 00:16:54,310
that's my shim for adding things like

373
00:16:54,310 --> 00:16:56,260
retries to qunit so one of the things

374
00:16:56,260 --> 00:16:58,810
that bit me with browser test automation

375
00:16:58,810 --> 00:17:01,120
is asynchronous tests anything that

376
00:17:01,120 --> 00:17:03,490
relies on set timeout and solo dash has

377
00:17:03,490 --> 00:17:06,490
the bounce and throttle and I have unit

378
00:17:06,490 --> 00:17:09,429
tests that rely on pauses there and when

379
00:17:09,429 --> 00:17:11,530
you're testing in old browsers those

380
00:17:11,530 --> 00:17:13,420
timeouts and those timers have really

381
00:17:13,420 --> 00:17:14,860
poor resolution and there could be

382
00:17:14,860 --> 00:17:16,990
things going on in the background that

383
00:17:16,990 --> 00:17:19,270
caused them to drift and when they drift

384
00:17:19,270 --> 00:17:21,939
you get false fails so what I've added

385
00:17:21,939 --> 00:17:26,140
was qunit config async retries and so

386
00:17:26,140 --> 00:17:27,790
you can specify how many times you want

387
00:17:27,790 --> 00:17:30,429
an async test to retry before it gives

388
00:17:30,429 --> 00:17:33,550
up and so in my case it's ten times so

389
00:17:33,550 --> 00:17:35,740
if any one of those ten times

390
00:17:35,740 --> 00:17:39,040
asses I get a pass from the test I don't

391
00:17:39,040 --> 00:17:41,110
have a problem with false positives it's

392
00:17:41,110 --> 00:17:43,120
always been false negatives if the test

393
00:17:43,120 --> 00:17:44,950
is going to fail it's always going to

394
00:17:44,950 --> 00:17:47,559
fail but the timer drift could cause

395
00:17:47,559 --> 00:17:50,050
false fails every once in a while so I

396
00:17:50,050 --> 00:17:52,630
need to try that the other thing I've

397
00:17:52,630 --> 00:17:55,120
added was retries two jobs so before I

398
00:17:55,120 --> 00:17:56,020
said hey there could be a connection

399
00:17:56,020 --> 00:17:59,230
issue and that could cause a job to hang

400
00:17:59,230 --> 00:18:02,500
so I detect that and if there's a

401
00:18:02,500 --> 00:18:04,030
problem with the job that's not test

402
00:18:04,030 --> 00:18:06,400
related I retry the job and so that

403
00:18:06,400 --> 00:18:09,730
requires stopping the job deleting the

404
00:18:09,730 --> 00:18:12,280
job creating a new job and continuing on

405
00:18:12,280 --> 00:18:14,530
and if there's a lot of problems with

406
00:18:14,530 --> 00:18:16,330
the jobs it could mean there's a problem

407
00:18:16,330 --> 00:18:18,670
with the tunnel the tunnel connection

408
00:18:18,670 --> 00:18:20,290
could be corrupt and if there's a

409
00:18:20,290 --> 00:18:22,210
problem with the tunnel then I stopped

410
00:18:22,210 --> 00:18:24,340
all the jobs remove all the jobs and

411
00:18:24,340 --> 00:18:26,050
then restart the tunnel and continue

412
00:18:26,050 --> 00:18:29,020
where I left off so when I've done that

413
00:18:29,020 --> 00:18:33,070
I get a super stable browser test

414
00:18:33,070 --> 00:18:35,050
automation I don't get false fails I've

415
00:18:35,050 --> 00:18:36,429
been tweeting about this recently where

416
00:18:36,429 --> 00:18:38,980
I had like a hundred runs with no false

417
00:18:38,980 --> 00:18:40,660
fails and then I had two weeks with no

418
00:18:40,660 --> 00:18:42,700
false fails and so I just keep refining

419
00:18:42,700 --> 00:18:44,860
that and getting it more and more stable

420
00:18:44,860 --> 00:18:46,360
and I've even added mobile testing which

421
00:18:46,360 --> 00:18:48,100
I'll cover in a bit and even that

422
00:18:48,100 --> 00:18:50,500
completely stable just I know if it

423
00:18:50,500 --> 00:18:52,390
fails its unit test related and it's not

424
00:18:52,390 --> 00:18:55,360
just the setup tailored platforms so

425
00:18:55,360 --> 00:18:58,000
before I said hey you can do compat

426
00:18:58,000 --> 00:19:00,429
testing right for IE but if i'm doing

427
00:19:00,429 --> 00:19:02,020
compat mode testing that means i'm not

428
00:19:02,020 --> 00:19:03,790
interested in firefox and chrome and

429
00:19:03,790 --> 00:19:05,860
safari right because this is IE compat

430
00:19:05,860 --> 00:19:08,440
modes so you can do things like say okay

431
00:19:08,440 --> 00:19:12,190
i'm testing IE compat modes i know i

432
00:19:12,190 --> 00:19:13,720
don't need those browsers or i'm testing

433
00:19:13,720 --> 00:19:15,490
AMD modules right so then I know I don't

434
00:19:15,490 --> 00:19:17,020
need some old version of opera that

435
00:19:17,020 --> 00:19:18,700
doesn't work with that so you can tailor

436
00:19:18,700 --> 00:19:20,830
based on what you're testing and so I

437
00:19:20,830 --> 00:19:22,809
can I can detect that by the tags that I

438
00:19:22,809 --> 00:19:24,580
assigned to things and only and make

439
00:19:24,580 --> 00:19:27,040
sure that of my browser matrix I only

440
00:19:27,040 --> 00:19:31,900
test the ones that it's relevant to next

441
00:19:31,900 --> 00:19:35,200
so going into some of the cool here's an

442
00:19:35,200 --> 00:19:39,010
example of the tiny bit of code that is

443
00:19:39,010 --> 00:19:43,270
required to set the header for the IE

444
00:19:43,270 --> 00:19:45,429
compat mode and you can see there if you

445
00:19:45,429 --> 00:19:46,110
want to go to my

446
00:19:46,110 --> 00:19:49,710
repo which is a low dash / lodash and

447
00:19:49,710 --> 00:19:52,140
then go to test in sauce labs jes you'll

448
00:19:52,140 --> 00:19:54,630
see this in there too and that actually

449
00:19:54,630 --> 00:19:57,480
does the the sniff for the dot HTML and

450
00:19:57,480 --> 00:19:59,820
then sets the header for compat mode and

451
00:19:59,820 --> 00:20:02,370
that's all you do I'm not sure you can

452
00:20:02,370 --> 00:20:03,600
do that with something like Tesla ng

453
00:20:03,600 --> 00:20:05,549
which is why i like i like sauce labs

454
00:20:05,549 --> 00:20:07,140
sauce labs also allows me to do things

455
00:20:07,140 --> 00:20:10,049
like have a screencast of my failed test

456
00:20:10,049 --> 00:20:12,210
so i can run it and see exactly what

457
00:20:12,210 --> 00:20:13,860
error didn't win and what's helpful

458
00:20:13,860 --> 00:20:16,170
there is to say for AG least for Q unit

459
00:20:16,170 --> 00:20:18,840
is to say hide passing tests so it only

460
00:20:18,840 --> 00:20:20,970
shows the ones that have failed you can

461
00:20:20,970 --> 00:20:23,309
actually go a step further and intel

462
00:20:23,309 --> 00:20:25,140
sauce labs which tests have failed and

463
00:20:25,140 --> 00:20:26,460
they'll do a really pretty print out

464
00:20:26,460 --> 00:20:28,200
that doesn't require a screencast or

465
00:20:28,200 --> 00:20:31,280
anything i just haven't done that yet so

466
00:20:31,280 --> 00:20:35,580
okay five minutes alright that's awesome

467
00:20:35,580 --> 00:20:37,860
so here's here's the always think i'm

468
00:20:37,860 --> 00:20:39,030
going to be short on time but this is

469
00:20:39,030 --> 00:20:42,470
cool this is an example of filtering

470
00:20:42,470 --> 00:20:44,640
platforms here so i just say hey if it's

471
00:20:44,640 --> 00:20:46,290
a compact mode I filter it down to the

472
00:20:46,290 --> 00:20:50,549
relevant user agents and browsers and

473
00:20:50,549 --> 00:20:52,860
this is the secret sauce to doing

474
00:20:52,860 --> 00:20:55,200
anything with sauce labs and that was

475
00:20:55,200 --> 00:20:56,640
something that I had to kind of find out

476
00:20:56,640 --> 00:20:58,980
on my own it's better documented now but

477
00:20:58,980 --> 00:21:01,500
at the time it wasn't and that is if you

478
00:21:01,500 --> 00:21:03,660
even have a custom unit testing

479
00:21:03,660 --> 00:21:05,429
framework you just have to set global

480
00:21:05,429 --> 00:21:07,760
test results which is a global variable

481
00:21:07,760 --> 00:21:12,120
to your details object so and your

482
00:21:12,120 --> 00:21:13,860
details object can have a pass in a

483
00:21:13,860 --> 00:21:15,960
failed count and that's the minimum it

484
00:21:15,960 --> 00:21:17,820
needs right but you can add like a error

485
00:21:17,820 --> 00:21:20,100
message too if you want but that's all

486
00:21:20,100 --> 00:21:22,020
you need no matter what unit testing

487
00:21:22,020 --> 00:21:23,850
your framework you're using as soon as

488
00:21:23,850 --> 00:21:25,169
you set that global object it will

489
00:21:25,169 --> 00:21:28,590
detect it and then close out that

490
00:21:28,590 --> 00:21:30,150
connection for that browser and say all

491
00:21:30,150 --> 00:21:35,820
right and report back the results so the

492
00:21:35,820 --> 00:21:37,650
other option instead of making travesty

493
00:21:37,650 --> 00:21:40,080
i do and if you've seen the hefty travis

494
00:21:40,080 --> 00:21:42,000
yml you're probably thinking well that's

495
00:21:42,000 --> 00:21:45,630
not for me well i made up for me for you

496
00:21:45,630 --> 00:21:47,640
you might like the grunt way to do it in

497
00:21:47,640 --> 00:21:49,470
the grunt way to do it is fairly

498
00:21:49,470 --> 00:21:53,400
straightforward there's a project by

499
00:21:53,400 --> 00:21:57,780
parish rum a ms open Tek employee i

500
00:21:57,780 --> 00:21:59,370
believe this might be on his own

501
00:21:59,370 --> 00:22:01,680
I'm though and it's called grunt sauce

502
00:22:01,680 --> 00:22:06,450
labs and this allows you to fairly

503
00:22:06,450 --> 00:22:09,360
easily by configuring a config that

504
00:22:09,360 --> 00:22:11,390
looks a lot like just a regular object

505
00:22:11,390 --> 00:22:14,130
with you or your the unit testing

506
00:22:14,130 --> 00:22:16,650
framework you want to use some pads some

507
00:22:16,650 --> 00:22:18,450
browser names inversions you want to use

508
00:22:18,450 --> 00:22:20,400
and that's it it handles a lot of the

509
00:22:20,400 --> 00:22:22,740
stuff that i had to stumble along the

510
00:22:22,740 --> 00:22:24,870
way for you in fact i was really

511
00:22:24,870 --> 00:22:26,640
surprised when i started doing research

512
00:22:26,640 --> 00:22:29,760
for this that the thing that I came up

513
00:22:29,760 --> 00:22:32,070
with looks really close to the thing

514
00:22:32,070 --> 00:22:33,600
that they have except there's uses

515
00:22:33,600 --> 00:22:36,660
grunted mine uses traffic see I so I

516
00:22:36,660 --> 00:22:39,660
would recommend using this this project

517
00:22:39,660 --> 00:22:45,620
for that here's an example of just of

518
00:22:45,620 --> 00:22:48,090
what it would look like the config you

519
00:22:48,090 --> 00:22:49,860
can see you just specify your browser's

520
00:22:49,860 --> 00:22:52,080
your platform your version and maybe

521
00:22:52,080 --> 00:22:56,100
some pads in there and a port and and

522
00:22:56,100 --> 00:22:57,840
that's really it this is taken from when

523
00:22:57,840 --> 00:22:59,880
j/s which was recently open sourced they

524
00:22:59,880 --> 00:23:03,510
use the grunt sauce labs as well and

525
00:23:03,510 --> 00:23:06,210
they use cue units here and so that's

526
00:23:06,210 --> 00:23:08,160
really all you have to do to set up your

527
00:23:08,160 --> 00:23:12,090
stuff which makes it very nice so some

528
00:23:12,090 --> 00:23:13,950
of the things that made me go hmm these

529
00:23:13,950 --> 00:23:16,140
are more of the stumbling blocks you'll

530
00:23:16,140 --> 00:23:17,880
see at the bottom I've crossed out some

531
00:23:17,880 --> 00:23:20,400
I'll cover those in a bit so I'm not a

532
00:23:20,400 --> 00:23:24,030
ruby dev I'm JavaScript all the way but

533
00:23:24,030 --> 00:23:25,830
in order to get this to work for Travis

534
00:23:25,830 --> 00:23:29,580
CI I had to do gem install Travis mess

535
00:23:29,580 --> 00:23:33,390
with encrypted strings so here I those

536
00:23:33,390 --> 00:23:35,460
questions like does secure inside your

537
00:23:35,460 --> 00:23:37,590
Travis yml work with multiple variables

538
00:23:37,590 --> 00:23:40,140
does it environment variables how does

539
00:23:40,140 --> 00:23:42,690
all of that sort out so the the basic

540
00:23:42,690 --> 00:23:45,390
ideas is you go Travis encrypt sauce

541
00:23:45,390 --> 00:23:48,210
that capitalized sauce access key and

542
00:23:48,210 --> 00:23:50,850
your access key from your account and

543
00:23:50,850 --> 00:23:52,350
then it you can put that in your Travis

544
00:23:52,350 --> 00:23:55,679
yml with dash secure and whatever that

545
00:23:55,679 --> 00:23:58,320
encrypted string is and so what Travis

546
00:23:58,320 --> 00:24:01,050
CI does on the back end is take that and

547
00:24:01,050 --> 00:24:02,850
actually turn that into the legit

548
00:24:02,850 --> 00:24:04,920
environment variable the global test

549
00:24:04,920 --> 00:24:07,140
results I've already covered and Android

550
00:24:07,140 --> 00:24:10,020
testing was a big pain and what the

551
00:24:10,020 --> 00:24:12,669
problem there was is that I believe

552
00:24:12,669 --> 00:24:15,279
has to deal with HTTP or I'm sorry HTML

553
00:24:15,279 --> 00:24:20,049
headers and headers for JavaScript files

554
00:24:20,049 --> 00:24:21,789
it seems to be very picky about that so

555
00:24:21,789 --> 00:24:23,230
what I was getting in my mobile testing

556
00:24:23,230 --> 00:24:25,539
were files that would load as valid

557
00:24:25,539 --> 00:24:27,399
JavaScript but only partially load the

558
00:24:27,399 --> 00:24:29,769
file and then throw syntax errors which

559
00:24:29,769 --> 00:24:32,499
was really frustrating to to solve so

560
00:24:32,499 --> 00:24:35,200
what I do is I add an on a window on

561
00:24:35,200 --> 00:24:37,080
error handler that detects the error

562
00:24:37,080 --> 00:24:39,100
tells the unit test that it's done

563
00:24:39,100 --> 00:24:40,899
running and reports the error back and

564
00:24:40,899 --> 00:24:42,879
then my retry logic goes hey there was

565
00:24:42,879 --> 00:24:44,529
an error running this test why don't you

566
00:24:44,529 --> 00:24:46,779
retry that test and then I retry it and

567
00:24:46,779 --> 00:24:48,489
hopefully that issue is resolved it's

568
00:24:48,489 --> 00:24:51,039
not a very consistent issue but that

569
00:24:51,039 --> 00:24:52,299
mobile testing one that was really

570
00:24:52,299 --> 00:24:54,190
tricky there's no longer an issue with

571
00:24:54,190 --> 00:24:55,509
sauce tunnels so you don't have to worry

572
00:24:55,509 --> 00:24:57,190
about that special version and there's

573
00:24:57,190 --> 00:24:58,749
no longer an issue with an undocumented

574
00:24:58,749 --> 00:25:02,499
tunnel idkey that was fun to find that's

575
00:25:02,499 --> 00:25:03,879
been resolved to there they just

576
00:25:03,879 --> 00:25:05,799
refreshed the documentation it made

577
00:25:05,799 --> 00:25:08,649
everything super easy for more

578
00:25:08,649 --> 00:25:10,119
information on their docs you can go to

579
00:25:10,119 --> 00:25:13,210
docs / rest / additional config /

580
00:25:13,210 --> 00:25:15,460
connect and get tons and tons of

581
00:25:15,460 --> 00:25:16,929
information this thing is super

582
00:25:16,929 --> 00:25:18,970
configurable the rest api is what i use

583
00:25:18,970 --> 00:25:20,970
because i didn't want to deal with

584
00:25:20,970 --> 00:25:24,609
webdriver so i just i take the URL i I

585
00:25:24,609 --> 00:25:27,340
post a request with a JSON object and

586
00:25:27,340 --> 00:25:30,190
then I just check it and I do everything

587
00:25:30,190 --> 00:25:32,049
from there you can delete jobs you can

588
00:25:32,049 --> 00:25:34,149
rename jobs the list kind of goes on and

589
00:25:34,149 --> 00:25:35,619
on and on with how configurable these

590
00:25:35,619 --> 00:25:37,629
things are so i would say check that out

591
00:25:37,629 --> 00:25:41,019
and i think i'm done and there is no

592
00:25:41,019 --> 00:26:22,159
questions so that's it

