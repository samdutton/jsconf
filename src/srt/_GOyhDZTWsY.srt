1
00:00:00,000 --> 00:00:04,040

um so yeah hi my name is Adam Brett's

2
00:00:04,040 --> 00:00:07,950
that's a or b on github and a or b on

3
00:00:07,950 --> 00:00:11,160
IRC and the happy channel and Adam

4
00:00:11,160 --> 00:00:14,130
Brett's on the Twitter so I work at

5
00:00:14,130 --> 00:00:16,650
Walmart on the open source team believe

6
00:00:16,650 --> 00:00:19,439
it or not that is a real thing and so I

7
00:00:19,439 --> 00:00:22,500
pretty much spent my day working on the

8
00:00:22,500 --> 00:00:24,869
happy basically universe and everything

9
00:00:24,869 --> 00:00:27,480
that sort of goes along with it if you

10
00:00:27,480 --> 00:00:30,689
follow any of the activity stream for

11
00:00:30,689 --> 00:00:32,160
that you'll notice I do a lot of work on

12
00:00:32,160 --> 00:00:36,059
the good ops monitoring plug-in and sort

13
00:00:36,059 --> 00:00:38,550
of the the pieces that make that up so

14
00:00:38,550 --> 00:00:40,020
as you can probably guess I'm here to

15
00:00:40,020 --> 00:00:44,100
talk to you about lab so lab is the

16
00:00:44,100 --> 00:00:47,070
testing framework that we use at walmart

17
00:00:47,070 --> 00:00:49,969
we use it both internally and externally

18
00:00:49,969 --> 00:00:53,820
for the entire happy j/s stack before i

19
00:00:53,820 --> 00:00:57,050
get too far into this all the examples

20
00:00:57,050 --> 00:01:00,180
are for lab version 5 so if you're using

21
00:01:00,180 --> 00:01:03,300
an older version yeah you're encouraged

22
00:01:03,300 --> 00:01:07,320
to move to five there's read me Thanks

23
00:01:07,320 --> 00:01:09,750
there's read Me's and sort of help as to

24
00:01:09,750 --> 00:01:11,490
how to do that it's it's pretty easy

25
00:01:11,490 --> 00:01:15,270
though so today I'm going to talk

26
00:01:15,270 --> 00:01:18,270
basically about three things why use lab

27
00:01:18,270 --> 00:01:22,049
at all talk about a new assertion module

28
00:01:22,049 --> 00:01:24,570
named code and then I'm going to give

29
00:01:24,570 --> 00:01:30,780
you a pep talk so why use lab three

30
00:01:30,780 --> 00:01:33,420
things three main points really it's

31
00:01:33,420 --> 00:01:37,020
been battle-tested it's easy to use like

32
00:01:37,020 --> 00:01:38,490
hopefully you find the other happy

33
00:01:38,490 --> 00:01:41,759
modules to use and it's got useful

34
00:01:41,759 --> 00:01:44,130
options and features that are you know

35
00:01:44,130 --> 00:01:51,390
enterprise-grade so all the all the 30

36
00:01:51,390 --> 00:01:54,360
or more it keeps changing open-source

37
00:01:54,360 --> 00:01:57,000
repos under the happy j/s umbrella all

38
00:01:57,000 --> 00:02:00,119
use lab in addition to that every

39
00:02:00,119 --> 00:02:03,950
project inside walmart uses lab as well

40
00:02:03,950 --> 00:02:07,110
so you know labs been built to test high

41
00:02:07,110 --> 00:02:09,989
demand high uptime systems like happy

42
00:02:09,989 --> 00:02:13,470
and the servers that run inside

43
00:02:13,470 --> 00:02:16,230
that that power the walmart sites so you

44
00:02:16,230 --> 00:02:18,210
know it's really been been run through

45
00:02:18,210 --> 00:02:23,730
the ringer so um these are just two

46
00:02:23,730 --> 00:02:25,760
examples to make sure that one plus one

47
00:02:25,760 --> 00:02:30,750
does equal to and if you look at them

48
00:02:30,750 --> 00:02:34,020
one is TDD ones BDD I don't know which

49
00:02:34,020 --> 00:02:35,430
one I don't really understand the

50
00:02:35,430 --> 00:02:37,620
difference but ones one and one is the

51
00:02:37,620 --> 00:02:42,210
other so it's on a pit onion opinionated

52
00:02:42,210 --> 00:02:44,220
how you build and lay out your tests if

53
00:02:44,220 --> 00:02:47,400
you can see you kind of sort of can it's

54
00:02:47,400 --> 00:02:49,230
basically just aliases you flip around

55
00:02:49,230 --> 00:02:53,640
to make it TDD or BDD and so change it

56
00:02:53,640 --> 00:02:57,540
to to suit suit your needs all right so

57
00:02:57,540 --> 00:02:59,310
some of those features i mentioned

58
00:02:59,310 --> 00:03:01,290
earlier we have talked about some of the

59
00:03:01,290 --> 00:03:05,190
really handy ones these are all like CLI

60
00:03:05,190 --> 00:03:08,400
options the dash C and T sets this is

61
00:03:08,400 --> 00:03:11,910
all CLI stuff the next few slides so

62
00:03:11,910 --> 00:03:14,910
dash C and dash T for coverage and

63
00:03:14,910 --> 00:03:18,510
threshold so r out of the box lad gives

64
00:03:18,510 --> 00:03:21,840
you code coverage basically is their cup

65
00:03:21,840 --> 00:03:24,300
is their lines of code being hit in the

66
00:03:24,300 --> 00:03:27,120
test context that you have define yes or

67
00:03:27,120 --> 00:03:31,170
no the dash t sets up the threshold for

68
00:03:31,170 --> 00:03:33,840
a failed versus passed test so if your

69
00:03:33,840 --> 00:03:36,660
code coverage is less than X then you

70
00:03:36,660 --> 00:03:39,840
get you know a frowny face your tests do

71
00:03:39,840 --> 00:03:42,750
not pass once you start using it you

72
00:03:42,750 --> 00:03:44,519
will find that the code coverage is

73
00:03:44,519 --> 00:03:48,180
annoyingly thorough so in this example

74
00:03:48,180 --> 00:03:50,610
I've got here you will need code that

75
00:03:50,610 --> 00:03:52,739
exercises both sides of that or

76
00:03:52,739 --> 00:03:55,500
statement for settings both sides of the

77
00:03:55,500 --> 00:03:57,810
ternary operator for results and all

78
00:03:57,810 --> 00:04:02,610
three sides of that if statement it's

79
00:04:02,610 --> 00:04:04,620
annoying but it's no way to know for

80
00:04:04,620 --> 00:04:08,310
sure that you've hit everything so

81
00:04:08,310 --> 00:04:10,440
there's built-in linting right out of

82
00:04:10,440 --> 00:04:14,040
the box it comes lab comes default with

83
00:04:14,040 --> 00:04:18,120
a as a lint file that sort of matches

84
00:04:18,120 --> 00:04:21,299
the happy style guide it uses es Lynn as

85
00:04:21,299 --> 00:04:24,060
the rule engine if you don't like our

86
00:04:24,060 --> 00:04:25,410
style guide which I don't know why you

87
00:04:25,410 --> 00:04:27,030
wouldn't but if you don't

88
00:04:27,030 --> 00:04:30,030
you can override it with your own es

89
00:04:30,030 --> 00:04:31,830
lint our C file at the root of your

90
00:04:31,830 --> 00:04:34,980
project and one thing I want to note

91
00:04:34,980 --> 00:04:36,540
there if you do that you need to supply

92
00:04:36,540 --> 00:04:38,550
your own entire file it doesn't like

93
00:04:38,550 --> 00:04:40,620
merge or anything wacky like that so if

94
00:04:40,620 --> 00:04:41,820
you want to use your own you've got

95
00:04:41,820 --> 00:04:43,889
right you're your own and this example

96
00:04:43,889 --> 00:04:45,690
here is basically what what it looks

97
00:04:45,690 --> 00:04:51,330
like if lint is mad so this is new in

98
00:04:51,330 --> 00:04:53,970
five the dash a option you basically

99
00:04:53,970 --> 00:04:56,639
tell lab the name of the assertion

100
00:04:56,639 --> 00:04:59,430
library using and that is helpful

101
00:04:59,430 --> 00:05:00,960
because then it can keep track of how

102
00:05:00,960 --> 00:05:04,140
many assertions you've run it doesn't

103
00:05:04,140 --> 00:05:06,060
sound very useful but sometimes you

104
00:05:06,060 --> 00:05:07,590
think you've run an assertion but you

105
00:05:07,590 --> 00:05:09,570
actually don't and you can sometimes get

106
00:05:09,570 --> 00:05:11,790
like a mysterious test that pasts but

107
00:05:11,790 --> 00:05:13,290
you don't end up actually testing

108
00:05:13,290 --> 00:05:15,660
anything so the dash day is a very

109
00:05:15,660 --> 00:05:22,020
powerful new feature to lab so we got

110
00:05:22,020 --> 00:05:24,810
verbose and ID verbose prints out all

111
00:05:24,810 --> 00:05:27,300
that test verbiage you spent time

112
00:05:27,300 --> 00:05:30,540
reading for your t dds and BDDs it

113
00:05:30,540 --> 00:05:33,419
prints out you know math module shump

114
00:05:33,419 --> 00:05:35,430
sums numbers it does not crash on empty

115
00:05:35,430 --> 00:05:37,440
raised it prints out how long it took to

116
00:05:37,440 --> 00:05:40,050
run the test a little glyph for past

117
00:05:40,050 --> 00:05:43,310
fails and it also prints out a test ID

118
00:05:43,310 --> 00:05:46,800
that test ID is useful for the ID flag

119
00:05:46,800 --> 00:05:49,979
so that lets you basically run specific

120
00:05:49,979 --> 00:05:52,919
subsets of tests if you're trying to get

121
00:05:52,919 --> 00:05:54,750
coverage or make a particular feature

122
00:05:54,750 --> 00:05:57,360
work you can run an ID and just keep

123
00:05:57,360 --> 00:05:59,580
hitting the one or two tests over and

124
00:05:59,580 --> 00:06:00,720
over again instead of rewriting the

125
00:06:00,720 --> 00:06:04,650
entire suite and I'll take a range 1

126
00:06:04,650 --> 00:06:07,560
through 2 1 & 2 it'll also take a little

127
00:06:07,560 --> 00:06:10,140
mix and match so you can do 1 comma 2 3

128
00:06:10,140 --> 00:06:14,760
through four let's see so there's a few

129
00:06:14,760 --> 00:06:17,160
other quick features that I want to

130
00:06:17,160 --> 00:06:18,770
mention that don't need a whole slide

131
00:06:18,770 --> 00:06:21,570
async testing is easy because every test

132
00:06:21,570 --> 00:06:23,970
is passed a call back I know some other

133
00:06:23,970 --> 00:06:26,669
testing frameworks it's you do something

134
00:06:26,669 --> 00:06:28,470
a little different to get a sink testing

135
00:06:28,470 --> 00:06:30,840
in lab everything's already assumed to

136
00:06:30,840 --> 00:06:32,820
be a sink you have a bunch of different

137
00:06:32,820 --> 00:06:35,310
output options not just console so if

138
00:06:35,310 --> 00:06:37,860
you have a very involved project manager

139
00:06:37,860 --> 00:06:40,090
who wants to see graphs and charts

140
00:06:40,090 --> 00:06:42,600
you can print it out to HTML or

141
00:06:42,600 --> 00:06:45,070
coveralls there's a bunch of different

142
00:06:45,070 --> 00:06:51,340
reporting options as well so how we use

143
00:06:51,340 --> 00:06:53,590
lab and again when i say we i really

144
00:06:53,590 --> 00:06:55,540
mean walmart internally and externally

145
00:06:55,540 --> 00:06:59,470
and again it's the same pretty much in

146
00:06:59,470 --> 00:07:01,900
both cases so that dash t option i

147
00:07:01,900 --> 00:07:05,260
talked about threshold is 100 so the

148
00:07:05,260 --> 00:07:07,120
threshold for code coverage always has

149
00:07:07,120 --> 00:07:09,760
to be a hundred if you've ever made any

150
00:07:09,760 --> 00:07:12,490
PRS into the happy universe and I hope

151
00:07:12,490 --> 00:07:14,610
you have and encourage you to do so you

152
00:07:14,610 --> 00:07:17,770
will probably get comments about hey

153
00:07:17,770 --> 00:07:20,139
this is missing coverage or tests don't

154
00:07:20,139 --> 00:07:22,450
pass taking you to add test it's the

155
00:07:22,450 --> 00:07:26,229
dash t 100 that that's doing that to you

156
00:07:26,229 --> 00:07:29,190
so that that's where that comes from

157
00:07:29,190 --> 00:07:31,990
always use a CI server that runs a

158
00:07:31,990 --> 00:07:35,169
designated test command and we have we

159
00:07:35,169 --> 00:07:36,580
use a make file but the make thought

160
00:07:36,580 --> 00:07:38,729
really just has different lab configs

161
00:07:38,729 --> 00:07:41,740
but NPM test is usually fine for most

162
00:07:41,740 --> 00:07:46,030
people and nothing ever no PR ever gets

163
00:07:46,030 --> 00:07:48,340
merged in unless the CI server says that

164
00:07:48,340 --> 00:07:50,860
everything passed so you have to meet

165
00:07:50,860 --> 00:07:52,870
that coverage dress threshold you have

166
00:07:52,870 --> 00:07:54,599
to pass linting rules if you use it

167
00:07:54,599 --> 00:07:56,800
unless your errand then you can merge

168
00:07:56,800 --> 00:08:00,820
anything so what you get from all this

169
00:08:00,820 --> 00:08:04,450
you get the sort of neat automatic

170
00:08:04,450 --> 00:08:05,889
feedback loop that doesn't require

171
00:08:05,889 --> 00:08:08,770
humans so you open a pull request

172
00:08:08,770 --> 00:08:11,440
against something your CI server will

173
00:08:11,440 --> 00:08:14,560
run and you'll see that little glyph on

174
00:08:14,560 --> 00:08:16,900
github warning you that it can't be

175
00:08:16,900 --> 00:08:19,510
merged in and so then hopefully you look

176
00:08:19,510 --> 00:08:21,250
at the details and see hey coverage is

177
00:08:21,250 --> 00:08:23,080
less than one hundred percent or your

178
00:08:23,080 --> 00:08:25,360
linting failed or you know you're

179
00:08:25,360 --> 00:08:28,570
missing a test entirely and so the you

180
00:08:28,570 --> 00:08:30,039
know the cool thing there is that you

181
00:08:30,039 --> 00:08:31,630
have this feedback loop it's pretty much

182
00:08:31,630 --> 00:08:34,360
automatic and you kind of pull people

183
00:08:34,360 --> 00:08:37,150
through writing better code without

184
00:08:37,150 --> 00:08:39,880
having to harass them to do it so it's a

185
00:08:39,880 --> 00:08:42,729
pretty pretty nice little cycle and it's

186
00:08:42,729 --> 00:08:44,290
definitely worth setting up just for

187
00:08:44,290 --> 00:08:45,880
that alone you get higher quality code

188
00:08:45,880 --> 00:08:48,940
and you sort of get that for free by

189
00:08:48,940 --> 00:08:50,950
having this sort of come continuous

190
00:08:50,950 --> 00:08:53,470
feedback loop

191
00:08:53,470 --> 00:08:56,270
so quickly going to touch on the this

192
00:08:56,270 --> 00:08:59,720
code module I talked about so that's a

193
00:08:59,720 --> 00:09:03,170
new one and yeah it's just a base a

194
00:09:03,170 --> 00:09:06,110
pretty simple assertion library lab

195
00:09:06,110 --> 00:09:10,160
formally came bundled with chai but but

196
00:09:10,160 --> 00:09:12,140
we broke that out because child was kind

197
00:09:12,140 --> 00:09:14,270
of a little more than what we really

198
00:09:14,270 --> 00:09:18,080
needed at a lab and it was also he sort

199
00:09:18,080 --> 00:09:20,360
of this problem here where you couldn't

200
00:09:20,360 --> 00:09:22,070
remember if it was a property or a

201
00:09:22,070 --> 00:09:25,820
method so encode every like assertion is

202
00:09:25,820 --> 00:09:28,280
always a method and this also goes back

203
00:09:28,280 --> 00:09:30,830
to that assert command I mentioned

204
00:09:30,830 --> 00:09:33,620
earlier where this expect property

205
00:09:33,620 --> 00:09:37,130
versus expect method if you didn't if it

206
00:09:37,130 --> 00:09:38,570
was a method but it wasn't supposed to

207
00:09:38,570 --> 00:09:41,420
be you could inadvertently get a a true

208
00:09:41,420 --> 00:09:43,310
test when you actually didn't assert

209
00:09:43,310 --> 00:09:45,680
anything because that exists might not

210
00:09:45,680 --> 00:09:48,890
actually be a property so yeah codes

211
00:09:48,890 --> 00:09:51,140
cool it's consistent everything is

212
00:09:51,140 --> 00:09:52,840
always a method and there's a lot fewer

213
00:09:52,840 --> 00:09:55,220
human words to sort memorized so it's

214
00:09:55,220 --> 00:10:01,910
easy to to commit to memory okay so how

215
00:10:01,910 --> 00:10:04,430
can you get started hopefully you have

216
00:10:04,430 --> 00:10:07,010
tests already but if you don't this is

217
00:10:07,010 --> 00:10:08,660
supposed to make you go and do that now

218
00:10:08,660 --> 00:10:14,560
if you don't so number one do something

219
00:10:14,560 --> 00:10:16,790
yeah you're not getting one hundred

220
00:10:16,790 --> 00:10:19,250
percent coverage and tests that say it

221
00:10:19,250 --> 00:10:22,010
work is going to take some time so just

222
00:10:22,010 --> 00:10:25,730
start small write the test that the it

223
00:10:25,730 --> 00:10:28,820
works type of tests and you know just

224
00:10:28,820 --> 00:10:30,530
the simple sort of integration tests

225
00:10:30,530 --> 00:10:33,200
like that you'll probably hit 50 60 even

226
00:10:33,200 --> 00:10:34,910
70 percent code coverage right out of

227
00:10:34,910 --> 00:10:39,050
the gate once you get there you know

228
00:10:39,050 --> 00:10:41,510
change your process if you don't if

229
00:10:41,510 --> 00:10:43,190
testing is not part of your process now

230
00:10:43,190 --> 00:10:45,470
make it part your process new feature

231
00:10:45,470 --> 00:10:47,840
you you don't nothing ever happens and I

232
00:10:47,840 --> 00:10:49,010
should have a test to prove the feature

233
00:10:49,010 --> 00:10:51,890
works if you fix a bug either create or

234
00:10:51,890 --> 00:10:54,800
add a test to make sure that the test is

235
00:10:54,800 --> 00:10:56,390
good and doesn't cause any regressions

236
00:10:56,390 --> 00:10:58,520
once you change your process and get

237
00:10:58,520 --> 00:11:00,770
that part of it code coverage will go up

238
00:11:00,770 --> 00:11:05,300
and and you'll be happy and once you put

239
00:11:05,300 --> 00:11:06,170
that time into

240
00:11:06,170 --> 00:11:08,450
get you know testing built in your

241
00:11:08,450 --> 00:11:10,610
process get coverage up the rest is easy

242
00:11:10,610 --> 00:11:15,269
it's just maintenance from there and

243
00:11:15,279 --> 00:11:19,790
yeah so 87.5 percent they probably

244
00:11:19,790 --> 00:11:21,380
thought this truck was okay but it

245
00:11:21,380 --> 00:11:22,790
doesn't really look like it still works

246
00:11:22,790 --> 00:11:25,940
so one hundred percent should probably

247
00:11:25,940 --> 00:11:29,209
be your goal or close to it and that's

248
00:11:29,209 --> 00:11:33,920
probably not good enough 87.5 okay

249
00:11:33,920 --> 00:11:36,199
that's the end if you want this deck

250
00:11:36,199 --> 00:11:37,730
i'll send it out there's some links to

251
00:11:37,730 --> 00:11:41,870
the deck to the lab repo and to the code

