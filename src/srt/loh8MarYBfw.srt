1
00:00:19,120 --> 00:00:21,950

my name is ash will I work for thought

2
00:00:21,950 --> 00:00:24,170
works as a developer so I've spent a

3
00:00:24,170 --> 00:00:26,330
little about 12 years in the industry I

4
00:00:26,330 --> 00:00:29,210
spent most of my career working on back

5
00:00:29,210 --> 00:00:32,689
in Java and.net applications but over

6
00:00:32,689 --> 00:00:35,060
the last few years I have worked a lot

7
00:00:35,060 --> 00:00:36,740
in front in JavaScript applications

8
00:00:36,740 --> 00:00:40,070
within large enterprises and it's been a

9
00:00:40,070 --> 00:00:41,450
lot of fun working with JavaScript

10
00:00:41,450 --> 00:00:43,460
within the enterprise but at the same

11
00:00:43,460 --> 00:00:45,350
time there are a few lessons that I've

12
00:00:45,350 --> 00:00:47,090
learned that I'd like to share with

13
00:00:47,090 --> 00:00:49,520
y'all the intent is so that when you

14
00:00:49,520 --> 00:00:51,440
take JavaScript into the enterprise you

15
00:00:51,440 --> 00:00:52,760
are more productive within the

16
00:00:52,760 --> 00:00:55,460
enterprise you also reduce risk for an

17
00:00:55,460 --> 00:00:57,829
enterprise and at the same time enjoy

18
00:00:57,829 --> 00:00:59,750
working with JavaScript within the

19
00:00:59,750 --> 00:01:04,009
enterprise so I'm going to be primarily

20
00:01:04,009 --> 00:01:06,830
focusing on three things the first one

21
00:01:06,830 --> 00:01:08,600
is expectations within an enterprise

22
00:01:08,600 --> 00:01:11,710
when it comes to building software and

23
00:01:11,710 --> 00:01:14,210
then I'm going to go over enterprise

24
00:01:14,210 --> 00:01:16,790
planning and the impact of JavaScript

25
00:01:16,790 --> 00:01:18,979
when it comes to planning within an

26
00:01:18,979 --> 00:01:21,140
enterprise and then I'm going to talk

27
00:01:21,140 --> 00:01:22,760
about certain constraints that are

28
00:01:22,760 --> 00:01:25,190
present in large enterprises that can

29
00:01:25,190 --> 00:01:30,200
act as barriers at times so let me start

30
00:01:30,200 --> 00:01:33,200
with the enterprise expectations these

31
00:01:33,200 --> 00:01:35,119
are things that need to be managed well

32
00:01:35,119 --> 00:01:37,400
if not the reality ends up in the

33
00:01:37,400 --> 00:01:41,869
opposite direction at times so the first

34
00:01:41,869 --> 00:01:44,840
one I want to focus on is there's an

35
00:01:44,840 --> 00:01:46,310
expectation within enterprises of

36
00:01:46,310 --> 00:01:49,189
modularization enterprises by the nature

37
00:01:49,189 --> 00:01:50,840
of their size and their geographical

38
00:01:50,840 --> 00:01:53,210
distribution often run similar

39
00:01:53,210 --> 00:01:55,540
businesses in different regions and

40
00:01:55,540 --> 00:01:58,640
there is always high appetite for reuse

41
00:01:58,640 --> 00:02:00,830
within an enterprise an application

42
00:02:00,830 --> 00:02:02,900
built in one place they want the same

43
00:02:02,900 --> 00:02:04,670
look and feel similar experience in

44
00:02:04,670 --> 00:02:05,990
other regions so they want to reuse a

45
00:02:05,990 --> 00:02:08,499
lot of the code that is being used

46
00:02:08,499 --> 00:02:10,879
sometimes these things in large

47
00:02:10,879 --> 00:02:13,270
enterprises are not use case drivel

48
00:02:13,270 --> 00:02:15,650
so if we don't put a thought towards

49
00:02:15,650 --> 00:02:19,300
modularization or we use a bad use case

50
00:02:19,300 --> 00:02:22,100
you can end up with very high costs when

51
00:02:22,100 --> 00:02:23,390
it comes to reuse of your code across

52
00:02:23,390 --> 00:02:25,640
regions and this is something that

53
00:02:25,640 --> 00:02:28,430
enterprises don't like at the same time

54
00:02:28,430 --> 00:02:30,110
if you don't have a proper use case for

55
00:02:30,110 --> 00:02:33,260
this reuse you end up over engineering

56
00:02:33,260 --> 00:02:37,220
the concept of modularization so how do

57
00:02:37,220 --> 00:02:39,470
we r immediate this right so what we can

58
00:02:39,470 --> 00:02:41,330
do is we can try and prepare for this

59
00:02:41,330 --> 00:02:44,450
modularization not overthink it so you

60
00:02:44,450 --> 00:02:47,959
favor building loosely coupled code try

61
00:02:47,959 --> 00:02:50,870
and build modules in JavaScript but at

62
00:02:50,870 --> 00:02:52,750
the same time make sure these modules

63
00:02:52,750 --> 00:02:54,650
communicate with other modules through

64
00:02:54,650 --> 00:02:56,870
events rather than point-to-point

65
00:02:56,870 --> 00:02:59,000
communication for example if you have a

66
00:02:59,000 --> 00:03:01,700
module that logs in that it raised an

67
00:03:01,700 --> 00:03:03,230
event once you're successfully logged in

68
00:03:03,230 --> 00:03:04,910
and people who are interested in that

69
00:03:04,910 --> 00:03:07,550
event can then react that way this code

70
00:03:07,550 --> 00:03:09,560
is much more reusable than coupling your

71
00:03:09,560 --> 00:03:12,950
login module two different modules try

72
00:03:12,950 --> 00:03:16,610
and share your code as widgets rather

73
00:03:16,610 --> 00:03:19,750
than as big modules that have

74
00:03:19,750 --> 00:03:23,239
functionality so these widgets can be

75
00:03:23,239 --> 00:03:25,730
configurable you can have them as

76
00:03:25,730 --> 00:03:28,010
resealable widgets make them responsive

77
00:03:28,010 --> 00:03:29,989
then these widgets can be used in

78
00:03:29,989 --> 00:03:31,250
different applications within an

79
00:03:31,250 --> 00:03:35,030
enterprise at the same time start by

80
00:03:35,030 --> 00:03:38,209
packaging your code so you can share

81
00:03:38,209 --> 00:03:40,430
your code as bower components you can

82
00:03:40,430 --> 00:03:42,890
share them as node modules use a package

83
00:03:42,890 --> 00:03:45,980
manager such as you know npm we heard a

84
00:03:45,980 --> 00:03:49,760
lot about n p.m. today at the same time

85
00:03:49,760 --> 00:03:52,310
within enterprises if you see it's very

86
00:03:52,310 --> 00:03:53,989
difficult to create a module and and

87
00:03:53,989 --> 00:03:55,579
upload it onto the internet into a

88
00:03:55,579 --> 00:03:57,380
public repository this is something that

89
00:03:57,380 --> 00:04:00,320
enterprises wouldn't allow and in this

90
00:04:00,320 --> 00:04:02,540
case it's important that if you want to

91
00:04:02,540 --> 00:04:05,989
do node or power you have an internal

92
00:04:05,989 --> 00:04:08,239
module depository so you can use a tool

93
00:04:08,239 --> 00:04:10,700
such as artifactory and artifactory

94
00:04:10,700 --> 00:04:13,459
supports power and npm so you can upload

95
00:04:13,459 --> 00:04:15,920
your notice your modules to a private

96
00:04:15,920 --> 00:04:18,350
repository within an enterprise so

97
00:04:18,350 --> 00:04:23,150
factor this very early the next thing

98
00:04:23,150 --> 00:04:25,340
I'll focus on is non-functional

99
00:04:25,340 --> 00:04:26,420
requirements

100
00:04:26,420 --> 00:04:29,600
right so within an enterprise we often

101
00:04:29,600 --> 00:04:31,280
underestimate these non functional

102
00:04:31,280 --> 00:04:32,630
requirements there are quite a few of

103
00:04:32,630 --> 00:04:35,000
them and primarily around custom

104
00:04:35,000 --> 00:04:38,270
analytics many enterprises do not allow

105
00:04:38,270 --> 00:04:39,770
their data to be sent out over the

106
00:04:39,770 --> 00:04:41,930
Internet so your access to analytic

107
00:04:41,930 --> 00:04:44,240
tools that are available is less more

108
00:04:44,240 --> 00:04:46,070
often than ever they have solutions for

109
00:04:46,070 --> 00:04:49,220
this different solutions you know paid

110
00:04:49,220 --> 00:04:50,840
solutions running in different parts of

111
00:04:50,840 --> 00:04:53,300
the world so they would like you to

112
00:04:53,300 --> 00:04:55,810
integrate with these solutions

113
00:04:55,810 --> 00:04:58,160
authentication and authorization again

114
00:04:58,160 --> 00:05:00,230
they have third-party software that does

115
00:05:00,230 --> 00:05:01,910
it for them we need to integrate with

116
00:05:01,910 --> 00:05:04,190
this there is always a requirement for a

117
00:05:04,190 --> 00:05:09,110
lot of auditing within an enterprise so

118
00:05:09,110 --> 00:05:10,970
if we don't deal with this early you

119
00:05:10,970 --> 00:05:13,310
often find that we grossly underestimate

120
00:05:13,310 --> 00:05:14,690
the amount of work involved in

121
00:05:14,690 --> 00:05:17,210
non-functional requirements and what we

122
00:05:17,210 --> 00:05:18,950
build is sometimes not reusable across

123
00:05:18,950 --> 00:05:24,500
regions so a few suggestions to

124
00:05:24,500 --> 00:05:27,860
remediate this is try and build your non

125
00:05:27,860 --> 00:05:29,000
functional requirements in a

126
00:05:29,000 --> 00:05:32,090
non-invasive fashion in JavaScript so

127
00:05:32,090 --> 00:05:33,890
you can use similar service head

128
00:05:33,890 --> 00:05:35,480
concepts that you have in Java or.net

129
00:05:35,480 --> 00:05:37,370
you can do aspect-oriented programming

130
00:05:37,370 --> 00:05:40,910
within javascript as well and what this

131
00:05:40,910 --> 00:05:43,130
tends to do is it decouples a lot of

132
00:05:43,130 --> 00:05:44,480
these non functional requirements from

133
00:05:44,480 --> 00:05:46,520
your functional code hence making it

134
00:05:46,520 --> 00:05:48,350
easier to change and it doesn't pollute

135
00:05:48,350 --> 00:05:50,720
your main business functionality right

136
00:05:50,720 --> 00:05:53,920
because these are horizontal concerns

137
00:05:53,920 --> 00:05:57,470
there are many aop frameworks available

138
00:05:57,470 --> 00:06:00,320
I have worked with angular aop primarily

139
00:06:00,320 --> 00:06:02,120
there is meld and aspect chase as well

140
00:06:02,120 --> 00:06:04,520
some of these frameworks also support

141
00:06:04,520 --> 00:06:07,790
promises so you have a handle to send

142
00:06:07,790 --> 00:06:09,050
out data once a promise has been

143
00:06:09,050 --> 00:06:12,080
resolved or rejected right so they have

144
00:06:12,080 --> 00:06:13,760
support for it so try not to build your

145
00:06:13,760 --> 00:06:15,760
own use some of these frameworks and

146
00:06:15,760 --> 00:06:19,040
lastly unit tests your non functional

147
00:06:19,040 --> 00:06:21,440
requirements because these are very hard

148
00:06:21,440 --> 00:06:23,900
to debug because they are instrumented

149
00:06:23,900 --> 00:06:30,170
around your code the next expectation

150
00:06:30,170 --> 00:06:32,720
within enterprises is often metrics and

151
00:06:32,720 --> 00:06:35,240
documentation so enterprise is large

152
00:06:35,240 --> 00:06:37,790
enterprises often have a lot of vendors

153
00:06:37,790 --> 00:06:39,840
that build things for them

154
00:06:39,840 --> 00:06:42,590
and they experience vendor churn so

155
00:06:42,590 --> 00:06:45,389
there is always a risk of losing

156
00:06:45,389 --> 00:06:47,430
knowledge right which is why there is a

157
00:06:47,430 --> 00:06:49,220
lot of emphasis on documentation

158
00:06:49,220 --> 00:06:52,770
sometimes enterprises like to own or

159
00:06:52,770 --> 00:06:54,960
transfer that ownership to themselves

160
00:06:54,960 --> 00:06:56,790
once they feel they are ready to take

161
00:06:56,790 --> 00:06:58,800
over the code at that point they look

162
00:06:58,800 --> 00:07:01,380
out for documentation and there are

163
00:07:01,380 --> 00:07:04,290
always kpi's link towards quality of

164
00:07:04,290 --> 00:07:06,180
what is being generated and it's

165
00:07:06,180 --> 00:07:08,400
important that we build the same kind of

166
00:07:08,400 --> 00:07:10,320
quality metrics into our JavaScript code

167
00:07:10,320 --> 00:07:12,780
that we use for our back-end server side

168
00:07:12,780 --> 00:07:18,690
code as well so if we don't deal with

169
00:07:18,690 --> 00:07:21,479
this early it could result in a lot of

170
00:07:21,479 --> 00:07:23,400
risk to an enterprise and a lot of cost

171
00:07:23,400 --> 00:07:24,990
as well because the knowledge transfer

172
00:07:24,990 --> 00:07:27,270
doesn't happen in an effective way so

173
00:07:27,270 --> 00:07:28,440
there is an expectation for

174
00:07:28,440 --> 00:07:31,169
documentation if we don't have metrics

175
00:07:31,169 --> 00:07:33,479
or tools that can give us metrics on the

176
00:07:33,479 --> 00:07:35,039
kind of quality of the code we are

177
00:07:35,039 --> 00:07:36,930
writing you would end up with poor

178
00:07:36,930 --> 00:07:39,539
quality and the most boring thing that

179
00:07:39,539 --> 00:07:41,729
you will find is having to write a lot

180
00:07:41,729 --> 00:07:43,250
of documentation towards the end

181
00:07:43,250 --> 00:07:47,840
right when a lot of context is lost so

182
00:07:47,840 --> 00:07:50,610
how do we r immediate this start right

183
00:07:50,610 --> 00:07:53,370
at the beginning do not allow this to

184
00:07:53,370 --> 00:07:54,870
pile up towards the end be aware that

185
00:07:54,870 --> 00:07:56,010
this is an expectation within

186
00:07:56,010 --> 00:07:58,710
enterprises choose a JavaScript analysis

187
00:07:58,710 --> 00:08:02,010
tool such as say plateau or sonar aureus

188
00:08:02,010 --> 00:08:05,220
lint and set good thresholds for your

189
00:08:05,220 --> 00:08:07,500
code quality so lot of these tools are

190
00:08:07,500 --> 00:08:08,940
able to analyze your cyclomatic

191
00:08:08,940 --> 00:08:11,880
complexity duplication and structure of

192
00:08:11,880 --> 00:08:13,410
your code and you know the cleanliness

193
00:08:13,410 --> 00:08:15,270
of your code they give you very good

194
00:08:15,270 --> 00:08:18,349
metrics another important thing is

195
00:08:18,349 --> 00:08:20,490
within enterprises there's always a

196
00:08:20,490 --> 00:08:22,229
demand to have a holistic view of your

197
00:08:22,229 --> 00:08:24,090
software quality guide so they have

198
00:08:24,090 --> 00:08:26,550
tools that generate quality reports for

199
00:08:26,550 --> 00:08:28,800
their back-end software they do not want

200
00:08:28,800 --> 00:08:30,660
reports for a front end to be separated

201
00:08:30,660 --> 00:08:32,940
out from the back end so see always

202
00:08:32,940 --> 00:08:34,890
within an enterprise go find out what is

203
00:08:34,890 --> 00:08:36,089
the current tools that are being used

204
00:08:36,089 --> 00:08:38,159
for analysis see if you can integrate

205
00:08:38,159 --> 00:08:39,690
your front-end reports with that so you

206
00:08:39,690 --> 00:08:42,839
get a holistic picture of quality you

207
00:08:42,839 --> 00:08:45,060
could J stock have comments that

208
00:08:45,060 --> 00:08:47,790
document your code or even more fun is

209
00:08:47,790 --> 00:08:50,209
if you can build live documentation that

210
00:08:50,209 --> 00:08:52,440
stays current with

211
00:08:52,440 --> 00:08:55,010
the code that you write so there are

212
00:08:55,010 --> 00:08:57,240
runtimes that allow you to inspect them

213
00:08:57,240 --> 00:09:02,250
and you can generate documentation the

214
00:09:02,250 --> 00:09:03,540
next part I am going to focus on is

215
00:09:03,540 --> 00:09:08,100
enterprise planning many enterprises

216
00:09:08,100 --> 00:09:10,230
budget once a year they budget for an

217
00:09:10,230 --> 00:09:12,810
entire year and they plan for a year's

218
00:09:12,810 --> 00:09:15,660
worth of work and these promises are

219
00:09:15,660 --> 00:09:17,070
then made by the business to their

220
00:09:17,070 --> 00:09:19,080
customers and once that is done you will

221
00:09:19,080 --> 00:09:21,390
find that functional delivery often

222
00:09:21,390 --> 00:09:27,960
takes assumes priority JavaScript world

223
00:09:27,960 --> 00:09:29,670
is a lot of fun but there's also a lot

224
00:09:29,670 --> 00:09:33,030
of churn and this churn could result in

225
00:09:33,030 --> 00:09:34,680
frequent rewrites and this is often

226
00:09:34,680 --> 00:09:36,660
unanticipated when it comes to a

227
00:09:36,660 --> 00:09:40,680
year-long worth of work right and just

228
00:09:40,680 --> 00:09:42,120
to pursue that your long worth of work

229
00:09:42,120 --> 00:09:43,920
if we don't stay on the upgrade path

230
00:09:43,920 --> 00:09:45,930
this is going to increase the cost and

231
00:09:45,930 --> 00:09:53,610
risk of delaying this sorry so how do we

232
00:09:53,610 --> 00:09:56,280
r immediate this situation right so it

233
00:09:56,280 --> 00:09:57,750
would be good if we can prepare for this

234
00:09:57,750 --> 00:10:01,050
churn you know and then protect yourself

235
00:10:01,050 --> 00:10:03,720
from the churn and create a Java Script

236
00:10:03,720 --> 00:10:09,360
decorator within the enterprise so I'll

237
00:10:09,360 --> 00:10:10,530
talk a bit about preparing for this

238
00:10:10,530 --> 00:10:14,060
journal so often front-end code has been

239
00:10:14,060 --> 00:10:16,470
mainly for validation purposes but

240
00:10:16,470 --> 00:10:17,970
things have changed right we are now

241
00:10:17,970 --> 00:10:19,500
using frameworks such as angular or

242
00:10:19,500 --> 00:10:21,780
ember wherein you can have a lot of

243
00:10:21,780 --> 00:10:23,850
logic sitting within the front end now I

244
00:10:23,850 --> 00:10:25,950
think a lot of the programming

245
00:10:25,950 --> 00:10:27,390
principles that apply to back-end code

246
00:10:27,390 --> 00:10:28,940
apply to your front and software as well

247
00:10:28,940 --> 00:10:31,920
so within your MVC framework as well you

248
00:10:31,920 --> 00:10:34,320
can layer your code into controllers

249
00:10:34,320 --> 00:10:36,720
that manage your UI and then you can

250
00:10:36,720 --> 00:10:38,640
have layers of code such as facades that

251
00:10:38,640 --> 00:10:40,560
you know delegate to a service layer

252
00:10:40,560 --> 00:10:44,370
which then talk to your back-end now if

253
00:10:44,370 --> 00:10:46,650
you do not want to couple yourself to a

254
00:10:46,650 --> 00:10:48,930
framework try and keep your facade

255
00:10:48,930 --> 00:10:51,470
services etc and plain old JavaScript

256
00:10:51,470 --> 00:10:53,580
because then it makes it easier to

257
00:10:53,580 --> 00:10:55,260
change because only your controllers

258
00:10:55,260 --> 00:10:56,640
then are coupled to a framework that's

259
00:10:56,640 --> 00:11:00,660
undergoing the chump also try and use

260
00:11:00,660 --> 00:11:02,820
dependency injection for whatever

261
00:11:02,820 --> 00:11:05,850
objects that you build things like xmas

262
00:11:05,850 --> 00:11:08,370
six modules or required a system days

263
00:11:08,370 --> 00:11:10,440
these help you inject dependencies and

264
00:11:10,440 --> 00:11:11,819
makes it much more easy to unit test

265
00:11:11,819 --> 00:11:13,500
your code right and swapping out

266
00:11:13,500 --> 00:11:17,759
dependencies becomes easier once you are

267
00:11:17,759 --> 00:11:20,399
prepared protect yourself as well from

268
00:11:20,399 --> 00:11:24,800
this Joan so favor hi unit test coverage

269
00:11:24,800 --> 00:11:28,079
at the same time try and make sure that

270
00:11:28,079 --> 00:11:29,490
your unit tests are not coupled to the

271
00:11:29,490 --> 00:11:30,779
framework that's undergoing shown

272
00:11:30,779 --> 00:11:33,779
because these are your safety net and if

273
00:11:33,779 --> 00:11:35,819
they break when the framework changes

274
00:11:35,819 --> 00:11:37,709
then you do not have anything to verify

275
00:11:37,709 --> 00:11:39,000
that your code is still doing what it

276
00:11:39,000 --> 00:11:42,360
was supposed to write so and then have

277
00:11:42,360 --> 00:11:43,920
high functional test coverage as well

278
00:11:43,920 --> 00:11:45,810
these often don't tend to make

279
00:11:45,810 --> 00:11:47,940
assumptions of the underlying tech

280
00:11:47,940 --> 00:11:50,069
that's being used so when you change a

281
00:11:50,069 --> 00:11:51,240
framework these tests hopefully

282
00:11:51,240 --> 00:11:53,220
shouldn't change and they can be your

283
00:11:53,220 --> 00:11:56,459
safety net lastly to work well with the

284
00:11:56,459 --> 00:11:58,259
business make sure that you factor the

285
00:11:58,259 --> 00:12:00,000
upgrades for the software choices that

286
00:12:00,000 --> 00:12:03,750
you've made into the plan and plan your

287
00:12:03,750 --> 00:12:05,790
work accordingly make sure you include

288
00:12:05,790 --> 00:12:07,740
your tests and documentation because

289
00:12:07,740 --> 00:12:09,060
these two might change because of the

290
00:12:09,060 --> 00:12:13,179
churn we often tend to miss these out

291
00:12:13,189 --> 00:12:17,310
create a jace TechRadar what does this

292
00:12:17,310 --> 00:12:20,389
radar do this radar would help you

293
00:12:20,389 --> 00:12:22,889
standardize within the enterprise what

294
00:12:22,889 --> 00:12:25,529
frameworks you want to adopt right my

295
00:12:25,529 --> 00:12:26,939
adopt what I mean is these are things

296
00:12:26,939 --> 00:12:27,810
that have worked well with and

297
00:12:27,810 --> 00:12:29,370
enterprise have been very productive

298
00:12:29,370 --> 00:12:31,199
than an enterprise so you continue to

299
00:12:31,199 --> 00:12:33,959
use it within the enterprise trial is

300
00:12:33,959 --> 00:12:35,430
somewhere where you have projects that

301
00:12:35,430 --> 00:12:37,199
can absorb a bit of risk you believe

302
00:12:37,199 --> 00:12:38,759
something will work and you can try it

303
00:12:38,759 --> 00:12:43,380
out then SS is where you're actually

304
00:12:43,380 --> 00:12:45,329
just spiking out with this piece of

305
00:12:45,329 --> 00:12:46,620
software and trying to find out whether

306
00:12:46,620 --> 00:12:48,089
this is going to help within an

307
00:12:48,089 --> 00:12:50,880
enterprise hold is a recommendation that

308
00:12:50,880 --> 00:12:52,709
you're making stop using something

309
00:12:52,709 --> 00:12:55,110
within an enterprise all right so this

310
00:12:55,110 --> 00:12:57,060
helps in bringing about some consistency

311
00:12:57,060 --> 00:12:59,939
in the choice of frameworks because we

312
00:12:59,939 --> 00:13:01,290
are spoiled by choice in the JavaScript

313
00:13:01,290 --> 00:13:04,050
world periodically try and refine this

314
00:13:04,050 --> 00:13:06,180
radar so that it stays current this can

315
00:13:06,180 --> 00:13:07,709
be curated by a group of key people

316
00:13:07,709 --> 00:13:14,069
within the enterprise lastly focus on

317
00:13:14,069 --> 00:13:17,069
enterprise constraints so the first

318
00:13:17,069 --> 00:13:19,279
constraint is the browser ecosystem

319
00:13:19,279 --> 00:13:22,829
now enterprises always want their

320
00:13:22,829 --> 00:13:24,180
software to be supported on all versions

321
00:13:24,180 --> 00:13:27,060
of available process read ie6 not

322
00:13:27,060 --> 00:13:28,829
anymore but I have been in those

323
00:13:28,829 --> 00:13:32,639
situations right and unfortunately some

324
00:13:32,639 --> 00:13:34,200
of these browsers are not even available

325
00:13:34,200 --> 00:13:36,300
within the enterprise so enterprises

326
00:13:36,300 --> 00:13:38,519
have a way of you know installing

327
00:13:38,519 --> 00:13:40,380
software and it's very hard to get the

328
00:13:40,380 --> 00:13:43,709
kind of version that you want and based

329
00:13:43,709 --> 00:13:45,870
on this browser choice the choice of

330
00:13:45,870 --> 00:13:47,610
frameworks that you use might end up

331
00:13:47,610 --> 00:13:50,040
with need for poly filling which we know

332
00:13:50,040 --> 00:13:51,899
is not very performant in browsers such

333
00:13:51,899 --> 00:13:58,889
as I now this could result in high

334
00:13:58,889 --> 00:14:04,139
maintenance and low performance one of

335
00:14:04,139 --> 00:14:08,220
the ways to remediate this is you could

336
00:14:08,220 --> 00:14:10,800
use analytics from applications that

337
00:14:10,800 --> 00:14:11,730
have already been built in the

338
00:14:11,730 --> 00:14:14,070
enterprise to know what is the browser

339
00:14:14,070 --> 00:14:15,449
said that your customers are currently

340
00:14:15,449 --> 00:14:17,850
using use this to drive your technical

341
00:14:17,850 --> 00:14:20,250
choices and make choices where you can

342
00:14:20,250 --> 00:14:23,220
avoid poly filling set up a process for

343
00:14:23,220 --> 00:14:26,010
installing the supported browsers so

344
00:14:26,010 --> 00:14:27,720
that you can deliver in an agile fashion

345
00:14:27,720 --> 00:14:28,890
and you don't know how to have to delay

346
00:14:28,890 --> 00:14:34,730
your testing to the end and lastly

347
00:14:34,730 --> 00:14:37,470
focus on a constraint which is

348
00:14:37,470 --> 00:14:39,329
enterprises have a lockdown environment

349
00:14:39,329 --> 00:14:41,970
when it comes to internet access so it's

350
00:14:41,970 --> 00:14:43,440
often very difficult to just get into an

351
00:14:43,440 --> 00:14:44,940
enterprise and do an NPM install and it

352
00:14:44,940 --> 00:14:48,029
will not work so there is always limited

353
00:14:48,029 --> 00:14:49,699
internet access within an enterprise

354
00:14:49,699 --> 00:14:51,990
there are lengthy software approval

355
00:14:51,990 --> 00:14:53,699
processes for installing any piece of

356
00:14:53,699 --> 00:14:58,050
software this becomes a barrier using

357
00:14:58,050 --> 00:15:01,350
open source and also results in a lot of

358
00:15:01,350 --> 00:15:05,970
loss of productivity so remediation is

359
00:15:05,970 --> 00:15:08,160
prepared for open source as i said

360
00:15:08,160 --> 00:15:09,990
earlier provision and internal package

361
00:15:09,990 --> 00:15:12,120
repository such as artifactory which can

362
00:15:12,120 --> 00:15:15,079
get you your Bower and NPM modules

363
00:15:15,079 --> 00:15:17,399
request for read-only access to github

364
00:15:17,399 --> 00:15:19,350
so that you can install things from the

365
00:15:19,350 --> 00:15:21,510
internet and also a soft and internet

366
00:15:21,510 --> 00:15:23,040
access because for open source to be

367
00:15:23,040 --> 00:15:26,360
successful you need good forum support

368
00:15:26,360 --> 00:15:29,040
I'll finish by talking about the last

369
00:15:29,040 --> 00:15:30,600
constraint which is compliance and

370
00:15:30,600 --> 00:15:31,939
security

371
00:15:31,939 --> 00:15:34,619
with front-end JavaScript applications

372
00:15:34,619 --> 00:15:36,899
some part of your enterprise data now

373
00:15:36,899 --> 00:15:39,480
begins to reside in the browser they

374
00:15:39,480 --> 00:15:40,920
reside in browser caches they could

375
00:15:40,920 --> 00:15:44,129
reside on the disk of the user now if

376
00:15:44,129 --> 00:15:47,189
this is not secure then it could result

377
00:15:47,189 --> 00:15:48,779
in a regulatory violation for

378
00:15:48,779 --> 00:15:50,699
enterprises which can bring a lot of

379
00:15:50,699 --> 00:15:53,309
risk financial risk and reputational

380
00:15:53,309 --> 00:15:57,989
risk to an enterprise so you can

381
00:15:57,989 --> 00:15:59,549
remediate this by setting up a

382
00:15:59,549 --> 00:16:01,230
certification and approval process right

383
00:16:01,230 --> 00:16:03,869
at the beginning make sure that you have

384
00:16:03,869 --> 00:16:05,699
competent people or bodies to certify

385
00:16:05,699 --> 00:16:06,959
that whatever data you are going to be

386
00:16:06,959 --> 00:16:09,269
storing now in the front end is secure

387
00:16:09,269 --> 00:16:11,220
and it is compliant with the policies

388
00:16:11,220 --> 00:16:13,679
that govern the enterprise and also put

389
00:16:13,679 --> 00:16:15,540
in a licence approval process to make

390
00:16:15,540 --> 00:16:17,220
sure that the enterprise is safe from

391
00:16:17,220 --> 00:16:19,160
the kind of software that you are using

392
00:16:19,160 --> 00:16:22,679
we often minify a JavaScript code there

393
00:16:22,679 --> 00:16:25,139
are options to include the licenses and

394
00:16:25,139 --> 00:16:27,089
not have them removed from the software

395
00:16:27,089 --> 00:16:29,819
so just be aware about this so this is

396
00:16:29,819 --> 00:16:31,589
all I have to share with you folks thank

