1
00:00:09,469 --> 00:00:13,230

alright so you know this is the theme of

2
00:00:13,230 --> 00:00:15,660
my talk and I like to start off with the

3
00:00:15,660 --> 00:00:17,250
subtitle is why you know give me one

4
00:00:17,250 --> 00:00:21,119
point though and when I when I say that

5
00:00:21,119 --> 00:00:22,830
I guess I'm just really talking about

6
00:00:22,830 --> 00:00:26,070
how do we stabilize something that is by

7
00:00:26,070 --> 00:00:28,230
definition unstable right how many

8
00:00:28,230 --> 00:00:30,330
people are familiar with Denver a little

9
00:00:30,330 --> 00:00:33,780
bit heard of it that is way too few of

10
00:00:33,780 --> 00:00:35,880
you that is unacceptable sember org you

11
00:00:35,880 --> 00:00:38,100
all have laptops right now because the

12
00:00:38,100 --> 00:00:39,840
fact that it is zero point four point

13
00:00:39,840 --> 00:00:42,480
zero means that it is unstable anything

14
00:00:42,480 --> 00:00:43,890
could change at any time the fact that

15
00:00:43,890 --> 00:00:45,989
we have you know stable releases and

16
00:00:45,989 --> 00:00:47,520
unstable releases just something nice

17
00:00:47,520 --> 00:00:49,920
that ride does for us but it could just

18
00:00:49,920 --> 00:00:52,289
change it anytime and so how do you deal

19
00:00:52,289 --> 00:00:54,239
with that it's actually a complicated

20
00:00:54,239 --> 00:00:56,640
problem let's start kind of small a

21
00:00:56,640 --> 00:00:59,100
couple of I don't know caveats that I've

22
00:00:59,100 --> 00:01:01,230
seen in terms of code usage that comes

23
00:01:01,230 --> 00:01:03,600
up on the mailing list a lot and things

24
00:01:03,600 --> 00:01:06,030
you should just generally not do right

25
00:01:06,030 --> 00:01:09,420
or should do and just do them right this

26
00:01:09,420 --> 00:01:11,189
is a great example right like oh if

27
00:01:11,189 --> 00:01:12,330
something goes wrong I want to know

28
00:01:12,330 --> 00:01:14,520
about it I want to say hey we're just

29
00:01:14,520 --> 00:01:15,810
going to log that error I think that's

30
00:01:15,810 --> 00:01:18,150
been a common theme overall today is

31
00:01:18,150 --> 00:01:20,610
logging but the problem here is that

32
00:01:20,610 --> 00:01:22,380
you're not exiting the process right

33
00:01:22,380 --> 00:01:24,180
it's just like oh yeah no no did

34
00:01:24,180 --> 00:01:26,220
something wrong and it'll probably work

35
00:01:26,220 --> 00:01:28,710
itself out no it is not going to work

36
00:01:28,710 --> 00:01:31,619
itself out you need to say stop exit

37
00:01:31,619 --> 00:01:33,930
time restart the process all right let

38
00:01:33,930 --> 00:01:35,970
everything reset it's important remember

39
00:01:35,970 --> 00:01:40,020
this and so you really need to listen

40
00:01:40,020 --> 00:01:42,390
for these errors and this is this

41
00:01:42,390 --> 00:01:43,890
actually from the docs I mean how many

42
00:01:43,890 --> 00:01:45,380
people have seen this snippet of code

43
00:01:45,380 --> 00:01:48,060
you all should be raising your hands

44
00:01:48,060 --> 00:01:50,790
okay that's sad but it's all right I'll

45
00:01:50,790 --> 00:01:53,399
forgive you the thing is that there's

46
00:01:53,399 --> 00:01:57,180
actually sort of a sneaky sneaky error

47
00:01:57,180 --> 00:01:59,100
that's not trapped here and you would

48
00:01:59,100 --> 00:02:01,320
probably see this in your code if you

49
00:02:01,320 --> 00:02:03,360
use this in production and the reason

50
00:02:03,360 --> 00:02:05,040
for that is that the underlying socket

51
00:02:05,040 --> 00:02:07,020
can throw errors and that error will be

52
00:02:07,020 --> 00:02:10,379
bubbled up to the request and so I will

53
00:02:10,379 --> 00:02:12,030
give a node jitsu beta account to the

54
00:02:12,030 --> 00:02:13,180
first person who changed

55
00:02:13,180 --> 00:02:15,549
usage to this which is that you should

56
00:02:15,549 --> 00:02:17,680
have the error event handler there and

57
00:02:17,680 --> 00:02:19,930
if you don't believe me why I have the

58
00:02:19,930 --> 00:02:23,319
source code line cited so I'm not

59
00:02:23,319 --> 00:02:25,599
kidding and these are just sneaky things

60
00:02:25,599 --> 00:02:28,000
right I think forgot who said it today

61
00:02:28,000 --> 00:02:29,590
but it just just said assume you're

62
00:02:29,590 --> 00:02:31,719
 and that's totally true like you

63
00:02:31,719 --> 00:02:33,189
and that's totally true like you
never know what's going to go on I

64
00:02:33,189 --> 00:02:36,280
solutely seen Ryan matt raney debugging

65
00:02:36,280 --> 00:02:38,530
assess Scylla all week and like you just

66
00:02:38,530 --> 00:02:40,060
never know the socket could just be like

67
00:02:40,060 --> 00:02:41,530
oh you know the colonel just decided to

68
00:02:41,530 --> 00:02:43,510
panic it's not notes fault but you got

69
00:02:43,510 --> 00:02:47,620
to handle it next big one is event

70
00:02:47,620 --> 00:02:49,840
emitters I mean a vented programming is

71
00:02:49,840 --> 00:02:51,730
great but it's really dangerous and

72
00:02:51,730 --> 00:02:54,549
we've seen this pop up a few times in a

73
00:02:54,549 --> 00:02:55,959
library that we have written and

74
00:02:55,959 --> 00:02:58,239
maintained for the last year called node

75
00:02:58,239 --> 00:03:01,000
HTTP proxy that's a pretty full featured

76
00:03:01,000 --> 00:03:02,919
reverse proxy and node kind of like the

77
00:03:02,919 --> 00:03:06,250
sweet spot for fast asynchronous i/o but

78
00:03:06,250 --> 00:03:07,510
the problem with that is that if you

79
00:03:07,510 --> 00:03:09,969
start listening to events and don't

80
00:03:09,969 --> 00:03:12,700
remove those listeners eventually you're

81
00:03:12,700 --> 00:03:14,109
going to have some leaks and that's not

82
00:03:14,109 --> 00:03:16,419
good right thankfully node will warn you

83
00:03:16,419 --> 00:03:18,010
about this so maybe you'll see something

84
00:03:18,010 --> 00:03:21,040
like this and by the way this this is

85
00:03:21,040 --> 00:03:23,470
fixed so don't be afraid and you should

86
00:03:23,470 --> 00:03:28,359
also upgrade to 5x so let's let's say we

87
00:03:28,359 --> 00:03:29,949
had some code like this right you want

88
00:03:29,949 --> 00:03:31,479
to do something and then notify the

89
00:03:31,479 --> 00:03:35,470
person that you're done normal naive

90
00:03:35,470 --> 00:03:37,720
approach would just say ok when I'm done

91
00:03:37,720 --> 00:03:40,449
call this function but why are you using

92
00:03:40,449 --> 00:03:43,090
dot on right event cardinality is

93
00:03:43,090 --> 00:03:45,370
important if you're only expecting one

94
00:03:45,370 --> 00:03:49,900
done event then only do this once right

95
00:03:49,900 --> 00:03:51,759
and this gets important when you start

96
00:03:51,759 --> 00:03:53,680
to think about closure scope because if

97
00:03:53,680 --> 00:03:55,599
you're using something in the scope of

98
00:03:55,599 --> 00:03:59,229
the callback and that event emitter that

99
00:03:59,229 --> 00:04:01,389
event handler is never removed then that

100
00:04:01,389 --> 00:04:03,639
can never be free because it still needs

101
00:04:03,639 --> 00:04:06,430
to be kept around to maybe be used in

102
00:04:06,430 --> 00:04:07,720
that function that will never be called

103
00:04:07,720 --> 00:04:10,659
later on right seeing a lot of blank

104
00:04:10,659 --> 00:04:12,370
stares I'm hoping I'm hoping this gets

105
00:04:12,370 --> 00:04:17,199
through maybe not use a process monitor

106
00:04:17,199 --> 00:04:19,359
you know I think most people do this

107
00:04:19,359 --> 00:04:21,940
probably monitor upstart I wrote this

108
00:04:21,940 --> 00:04:23,950
thing called forever that people use I

109
00:04:23,950 --> 00:04:24,960
think I hope

110
00:04:24,960 --> 00:04:28,410
I use it and you just start it and when

111
00:04:28,410 --> 00:04:30,360
your app crashes you can restart it and

112
00:04:30,360 --> 00:04:31,919
that's why that first slide that I

113
00:04:31,919 --> 00:04:33,690
showed where you just eagerly exit the

114
00:04:33,690 --> 00:04:36,120
process makes sense because I gots not a

115
00:04:36,120 --> 00:04:37,949
big deal we're going to restart you

116
00:04:37,949 --> 00:04:39,810
probably have your application states to

117
00:04:39,810 --> 00:04:41,220
realize to some sort of remote database

118
00:04:41,220 --> 00:04:44,130
like Redis or a file maybe if you're not

119
00:04:44,130 --> 00:04:47,610
feeling that adventurous and you know

120
00:04:47,610 --> 00:04:51,300
just do it and stabilize your

121
00:04:51,300 --> 00:04:52,770
dependencies and this is this is a great

122
00:04:52,770 --> 00:04:54,330
topic this has come up a couple of times

123
00:04:54,330 --> 00:04:55,979
today I know Isaac talked about it and

124
00:04:55,979 --> 00:04:58,229
this is kind of the power of node conf

125
00:04:58,229 --> 00:04:59,490
this is stuff that I learned in the last

126
00:04:59,490 --> 00:05:01,289
like 48 hours like I've actually been

127
00:05:01,289 --> 00:05:03,990
doing this wrong for the last year up

128
00:05:03,990 --> 00:05:07,560
until two days ago and the reason that

129
00:05:07,560 --> 00:05:09,030
you want to stabilize your dependencies

130
00:05:09,030 --> 00:05:10,910
is so you don't see things like this so

131
00:05:10,910 --> 00:05:13,110
okay I have it installed on my local

132
00:05:13,110 --> 00:05:14,759
machine and then I push your production

133
00:05:14,759 --> 00:05:16,289
and whoops I forgot to put it in my

134
00:05:16,289 --> 00:05:18,990
package about JSON and okay that's

135
00:05:18,990 --> 00:05:21,090
whoops ok now it's not installed on my

136
00:05:21,090 --> 00:05:22,800
production box and you know you start it

137
00:05:22,800 --> 00:05:24,150
up with forever and all of a sudden you

138
00:05:24,150 --> 00:05:25,620
see it's spin restarting because you

139
00:05:25,620 --> 00:05:26,970
just don't have that module installed

140
00:05:26,970 --> 00:05:29,789
and this local installation doesn't

141
00:05:29,789 --> 00:05:31,830
solve this because the workflow that I

142
00:05:31,830 --> 00:05:33,360
see it from a lot of people as they will

143
00:05:33,360 --> 00:05:35,280
say hey I'm going to require this module

144
00:05:35,280 --> 00:05:36,840
I'm going to try and run my program oh

145
00:05:36,840 --> 00:05:39,030
my program doesn't run I'm not going to

146
00:05:39,030 --> 00:05:41,070
do the smart thing and go update my

147
00:05:41,070 --> 00:05:44,009
package.json and then use NPM install to

148
00:05:44,009 --> 00:05:45,630
install it from there I'm just going to

149
00:05:45,630 --> 00:05:47,550
do NPM install package name and not

150
00:05:47,550 --> 00:05:50,039
update the relative dependencies in my

151
00:05:50,039 --> 00:05:53,039
package.json and that's exactly why we

152
00:05:53,039 --> 00:05:55,199
wrote this tool and so what this will do

153
00:05:55,199 --> 00:05:57,169
is it will spawn up your child process

154
00:05:57,169 --> 00:05:59,820
for your application figure out what the

155
00:05:59,820 --> 00:06:01,680
dependencies are and update them for you

156
00:06:01,680 --> 00:06:03,719
so this one's actually pretty neat

157
00:06:03,719 --> 00:06:05,849
pretty useful but there's actually one

158
00:06:05,849 --> 00:06:07,710
problem with this and it's a problem

159
00:06:07,710 --> 00:06:10,080
that i found on the last 48 hours that

160
00:06:10,080 --> 00:06:12,150
happens to be the dependencies that have

161
00:06:12,150 --> 00:06:14,789
been listed here and i'm not even going

162
00:06:14,789 --> 00:06:16,259
to ask for a show of hands here because

163
00:06:16,259 --> 00:06:17,909
I didn't even know for two days ago so

164
00:06:17,909 --> 00:06:19,590
the problem here is that I'm being

165
00:06:19,590 --> 00:06:23,719
really really conservative and for a

166
00:06:23,719 --> 00:06:26,159
ecosystem that moves as fast as the node

167
00:06:26,159 --> 00:06:28,050
dutchess community you can't be this

168
00:06:28,050 --> 00:06:30,690
conservative I'm saying I only want zero

169
00:06:30,690 --> 00:06:32,759
point zero point three that's it nothing

170
00:06:32,759 --> 00:06:34,110
nothing greater than that nothing

171
00:06:34,110 --> 00:06:36,500
less than that has to be that version

172
00:06:36,500 --> 00:06:38,670
alternatively you could be really really

173
00:06:38,670 --> 00:06:41,130
optimistic and say anything greater than

174
00:06:41,130 --> 00:06:42,750
or equal to zero point zero point three

175
00:06:42,750 --> 00:06:44,970
neither of those are a really good

176
00:06:44,970 --> 00:06:47,340
middle ground because you need to figure

177
00:06:47,340 --> 00:06:49,890
out what semantic versioning really

178
00:06:49,890 --> 00:06:52,110
means and so let's take a look at this

179
00:06:52,110 --> 00:06:54,000
this is the incorrect way that I have

180
00:06:54,000 --> 00:06:55,200
done this on every single one of my

181
00:06:55,200 --> 00:06:57,150
modules or not necessarily incorrect

182
00:06:57,150 --> 00:07:00,390
just overly optimistic and so you know

183
00:07:00,390 --> 00:07:02,220
if one of these gets updated to say hits

184
00:07:02,220 --> 00:07:03,360
a one point oh and there's a breaking

185
00:07:03,360 --> 00:07:05,310
API a change in here you're not going to

186
00:07:05,310 --> 00:07:06,870
know if you're going to deploy to

187
00:07:06,870 --> 00:07:08,880
production and have five or six

188
00:07:08,880 --> 00:07:10,830
application servers running that may

189
00:07:10,830 --> 00:07:12,180
have been started up at different

190
00:07:12,180 --> 00:07:14,130
periods of time they may have different

191
00:07:14,130 --> 00:07:15,990
versions of that dependency installed on

192
00:07:15,990 --> 00:07:18,060
each server if you do this and that's

193
00:07:18,060 --> 00:07:19,740
really dangerous because you're back oh

194
00:07:19,740 --> 00:07:22,230
I have six servers and now one in six

195
00:07:22,230 --> 00:07:24,180
connections is failing and I don't know

196
00:07:24,180 --> 00:07:25,620
why and i'm just going to log into the

197
00:07:25,620 --> 00:07:27,840
first server i feel like and say oh the

198
00:07:27,840 --> 00:07:29,070
dependency is installed here in the

199
00:07:29,070 --> 00:07:30,990
correct one it's just not that easy what

200
00:07:30,990 --> 00:07:33,630
you should be doing is this I was doing

201
00:07:33,630 --> 00:07:36,840
it wrong do you you should be doing this

202
00:07:36,840 --> 00:07:39,870
the X indicates that you will accept any

203
00:07:39,870 --> 00:07:42,570
version of up to the greatest version at

204
00:07:42,570 --> 00:07:45,630
that minor version level so in semantic

205
00:07:45,630 --> 00:07:48,720
versioning your major minor patch the

206
00:07:48,720 --> 00:07:51,090
second X or start of the last x is patch

207
00:07:51,090 --> 00:07:53,100
versions so I basically say I know

208
00:07:53,100 --> 00:07:54,720
there'll be no breaking changes in patch

209
00:07:54,720 --> 00:07:56,880
versions that's by definition defined in

210
00:07:56,880 --> 00:07:59,310
cember and I'm just going to accept any

211
00:07:59,310 --> 00:08:00,660
of those but if there's anything greater

212
00:08:00,660 --> 00:08:03,090
than that like a 0.24 eyes for example

213
00:08:03,090 --> 00:08:05,820
not going to accept that because there

214
00:08:05,820 --> 00:08:07,260
might be a breaking change in there and

215
00:08:07,260 --> 00:08:08,730
I'm running this in production and that

216
00:08:08,730 --> 00:08:11,280
could be really really dangerous but for

217
00:08:11,280 --> 00:08:13,020
something like colors which has a

218
00:08:13,020 --> 00:08:15,300
ridiculously simple API which is never

219
00:08:15,300 --> 00:08:17,730
going to change and those major versions

220
00:08:17,730 --> 00:08:19,740
or minor versions rather probably won't

221
00:08:19,740 --> 00:08:21,990
affect the core API that I use I'm going

222
00:08:21,990 --> 00:08:23,760
to be a little bit more optimistic there

223
00:08:23,760 --> 00:08:25,290
and say I'm going to accept anything up

224
00:08:25,290 --> 00:08:29,220
to a major version release

225
00:08:29,230 --> 00:08:32,229
so just a little bit Isaac talked about

226
00:08:32,229 --> 00:08:33,490
this earlier today you really should

227
00:08:33,490 --> 00:08:34,720
just pop in and start playing with

228
00:08:34,720 --> 00:08:37,270
sember it's really helpful really you

229
00:08:37,270 --> 00:08:39,100
know package managers and package

230
00:08:39,100 --> 00:08:40,390
writers out there you should know about

231
00:08:40,390 --> 00:08:41,979
this and you should think about this

232
00:08:41,979 --> 00:08:43,720
when you're determining versions for

233
00:08:43,720 --> 00:08:45,160
your packages you know there are

234
00:08:45,160 --> 00:08:47,500
nineteen hundred packages on NPM I

235
00:08:47,500 --> 00:08:49,210
wonder how many of them are version

236
00:08:49,210 --> 00:08:51,010
correctly considering the fact that like

237
00:08:51,010 --> 00:08:52,720
my twenty were not versioned right and

238
00:08:52,720 --> 00:08:55,290
I've been trying to do write her a year

239
00:08:55,290 --> 00:08:59,410
so play with it use it love it let's

240
00:08:59,410 --> 00:09:03,040
have better versioning find the best

241
00:09:03,040 --> 00:09:04,870
tool for the job so this is kind of a

242
00:09:04,870 --> 00:09:06,070
mini announcement we're going to be

243
00:09:06,070 --> 00:09:07,420
putting this on all the projects that we

244
00:09:07,420 --> 00:09:10,540
maintain later this week and so I think

245
00:09:10,540 --> 00:09:12,640
it was Paul kerna who said earlier today

246
00:09:12,640 --> 00:09:14,740
that you know be where the single module

247
00:09:14,740 --> 00:09:17,230
authors you know that I'm just learning

248
00:09:17,230 --> 00:09:19,420
node module authors it's not bad I'm

249
00:09:19,420 --> 00:09:21,490
really happy that you're learning node

250
00:09:21,490 --> 00:09:24,310
but just be aware that if that author

251
00:09:24,310 --> 00:09:26,080
disappears or decides they don't like

252
00:09:26,080 --> 00:09:27,880
node and goes back to PHP you're

253
00:09:27,880 --> 00:09:30,310
maintaining that but anything that you

254
00:09:30,310 --> 00:09:32,530
see with this seal we maintain I stay up

255
00:09:32,530 --> 00:09:33,880
till six in the morning fixing that's

256
00:09:33,880 --> 00:09:36,010
eastern time so you know now you know

257
00:09:36,010 --> 00:09:40,600
why I am structure your code this came

258
00:09:40,600 --> 00:09:43,930
up i think in md's talk one of the great

259
00:09:43,930 --> 00:09:45,370
things about node is that it doesn't

260
00:09:45,370 --> 00:09:48,190
enforce any code structure for you but

261
00:09:48,190 --> 00:09:49,810
you really need to think about it this

262
00:09:49,810 --> 00:09:51,790
is a pretty common template that i use

263
00:09:51,790 --> 00:09:53,110
for most of my libraries and

264
00:09:53,110 --> 00:09:55,180
applications you've got some sort of

265
00:09:55,180 --> 00:09:56,830
tooling and your bin folder you've got

266
00:09:56,830 --> 00:09:59,560
some sort of configuration / environment

267
00:09:59,560 --> 00:10:02,200
you have some sort of lib maybe some

268
00:10:02,200 --> 00:10:05,050
static files tests i do do integration

269
00:10:05,050 --> 00:10:09,700
testing sorry Felix and then of course

270
00:10:09,700 --> 00:10:12,340
any sort of sub modules you have there

271
00:10:12,340 --> 00:10:13,750
of course some people are starting to

272
00:10:13,750 --> 00:10:16,000
put things in node underscore modules as

273
00:10:16,000 --> 00:10:19,150
per NPM one point oh that's something

274
00:10:19,150 --> 00:10:21,310
that's still kind of experimentation I

275
00:10:21,310 --> 00:10:23,440
some people do it I don't do it it could

276
00:10:23,440 --> 00:10:26,200
be a good thing to do moving on but he

277
00:10:26,200 --> 00:10:30,670
did just release that this week I decide

278
00:10:30,670 --> 00:10:33,520
on a network architecture and what do I

279
00:10:33,520 --> 00:10:35,770
mean by that if you're running something

280
00:10:35,770 --> 00:10:38,320
that can run on one machine you probably

281
00:10:38,320 --> 00:10:40,830
want to use cluster

282
00:10:40,830 --> 00:10:43,110
and what that does is it uses shield

283
00:10:43,110 --> 00:10:45,960
shared file descriptors to you know

284
00:10:45,960 --> 00:10:48,360
basically open up a socket pass that to

285
00:10:48,360 --> 00:10:50,640
the STD end of any child process this

286
00:10:50,640 --> 00:10:54,150
has come up a few times today cluster

287
00:10:54,150 --> 00:10:56,100
seems to be the best implementation of

288
00:10:56,100 --> 00:10:58,080
it out there right now spark obviously

289
00:10:58,080 --> 00:11:00,750
was the predecessor which still is a

290
00:11:00,750 --> 00:11:03,300
good example in code reading you know

291
00:11:03,300 --> 00:11:05,580
RTF see we're all here at a dev

292
00:11:05,580 --> 00:11:09,720
conference the other one is to do some

293
00:11:09,720 --> 00:11:12,510
sort of proxying and you know this is

294
00:11:12,510 --> 00:11:14,670
what we do it no Jitsu this is an

295
00:11:14,670 --> 00:11:17,450
extremely simple round-robin proxy

296
00:11:17,450 --> 00:11:19,170
that's one of the great things about

297
00:11:19,170 --> 00:11:22,500
node because this request handler in the

298
00:11:22,500 --> 00:11:25,590
HTTP proxy creates or actually runs

299
00:11:25,590 --> 00:11:27,300
synchronously right so you can just pop

300
00:11:27,300 --> 00:11:28,890
it off and put it back on and you can be

301
00:11:28,890 --> 00:11:31,110
assured that there is order here so you

302
00:11:31,110 --> 00:11:32,370
know you're going to remove it and then

303
00:11:32,370 --> 00:11:33,930
always add it to the end so there's no

304
00:11:33,930 --> 00:11:35,070
need to worry about any sort of

305
00:11:35,070 --> 00:11:36,510
threading or things like that you just

306
00:11:36,510 --> 00:11:39,060
say remove it proxy to it put it back on

307
00:11:39,060 --> 00:11:41,640
there and just cycle that set of servers

308
00:11:41,640 --> 00:11:45,210
overall now you know what if there was

309
00:11:45,210 --> 00:11:47,520
just some tool out there that did all of

310
00:11:47,520 --> 00:11:49,710
this for you I mean wouldn't that be

311
00:11:49,710 --> 00:11:55,710
great there's more so we have been

312
00:11:55,710 --> 00:11:58,130
working on hibu for about a year now and

313
00:11:58,130 --> 00:12:01,350
I'm pretty excited to announce that we

314
00:12:01,350 --> 00:12:04,290
are releasing it today so what is it

315
00:12:04,290 --> 00:12:07,410
right it is an application server for

316
00:12:07,410 --> 00:12:10,410
nodejs that's based on the package JSON

317
00:12:10,410 --> 00:12:14,130
format and so let's run through a little

318
00:12:14,130 --> 00:12:17,940
demo so essentially it's two servers

319
00:12:17,940 --> 00:12:20,040
right you have a basically the high

320
00:12:20,040 --> 00:12:21,330
boost server which i'm going to start up

321
00:12:21,330 --> 00:12:25,170
first after i do this so that's going to

322
00:12:25,170 --> 00:12:26,610
run and i'm not going to show you a port

323
00:12:26,610 --> 00:12:28,410
it's running on so nobody tries and gets

324
00:12:28,410 --> 00:12:32,160
me over the network and everybody read

325
00:12:32,160 --> 00:12:35,730
this is that good okay good great so

326
00:12:35,730 --> 00:12:37,890
what this does is that this will respond

327
00:12:37,890 --> 00:12:41,550
to incoming requests for a rest api if

328
00:12:41,550 --> 00:12:42,990
anybody went to the cast talk today i

329
00:12:42,990 --> 00:12:44,310
think there's definitely some overlap

330
00:12:44,310 --> 00:12:46,440
there but we're definitely focused on

331
00:12:46,440 --> 00:12:48,450
just note and not supporting everything

332
00:12:48,450 --> 00:12:50,730
else so that gives us some flexibility

333
00:12:50,730 --> 00:12:52,800
in that we can just say we only support

334
00:12:52,800 --> 00:12:54,209
package.json formats

335
00:12:54,209 --> 00:12:59,679
and so what would one of those look like

336
00:12:59,689 --> 00:13:04,559
and so let's jump into an example is

337
00:13:04,559 --> 00:13:07,920
this Oh drat I changed everything else

338
00:13:07,920 --> 00:13:12,389
except for this sorry basic I don't even

339
00:13:12,389 --> 00:13:15,839
know another one classic there we go so

340
00:13:15,839 --> 00:13:17,999
here's a pretty simple package.json

341
00:13:17,999 --> 00:13:21,480
right it has some sort of repository I

342
00:13:21,480 --> 00:13:23,160
think this is actually the simplest node

343
00:13:23,160 --> 00:13:24,749
application on the planet if you go to

344
00:13:24,749 --> 00:13:27,300
it but it has a good package.json with

345
00:13:27,300 --> 00:13:30,449
proper versions so essentially we're

346
00:13:30,449 --> 00:13:32,879
going to say hey now that I want the API

347
00:13:32,879 --> 00:13:35,069
client for hi boo on oh now you know my

348
00:13:35,069 --> 00:13:39,089
port drat and I'm going to say hey I

349
00:13:39,089 --> 00:13:40,800
want to start this application right

350
00:13:40,800 --> 00:13:52,319
let's do that yes okay yeah its bond

351
00:13:52,319 --> 00:13:54,929
okay and so you can sort of see from

352
00:13:54,929 --> 00:13:56,970
this example that its bonds it using

353
00:13:56,970 --> 00:13:58,499
forever so that means if it goes down

354
00:13:58,499 --> 00:13:59,970
it's going to restart it and does all

355
00:13:59,970 --> 00:14:02,069
that process management for you it

356
00:14:02,069 --> 00:14:04,199
spawns it on a unique port for that IP

357
00:14:04,199 --> 00:14:07,799
so you always have things isolated and

358
00:14:07,799 --> 00:14:09,569
then you can actually start this up

359
00:14:09,569 --> 00:14:11,519
again right so now I have two of these

360
00:14:11,519 --> 00:14:13,470
things running now i have three of these

361
00:14:13,470 --> 00:14:15,449
things running all from the same call

362
00:14:15,449 --> 00:14:17,939
and you know now that i have them

363
00:14:17,939 --> 00:14:19,799
running i might actually want to access

364
00:14:19,799 --> 00:14:23,309
them and to do that I need to run the

365
00:14:23,309 --> 00:14:25,980
load balancer and this uses a modified

366
00:14:25,980 --> 00:14:28,499
version of the very simple load balancer

367
00:14:28,499 --> 00:14:30,509
script that I show you before and this

368
00:14:30,509 --> 00:14:34,290
will all be released in about nine

369
00:14:34,290 --> 00:14:37,170
minutes so now the balance is running

370
00:14:37,170 --> 00:14:40,649
and as we can see the domain of this

371
00:14:40,649 --> 00:14:43,439
particular application happens to be dev

372
00:14:43,439 --> 00:14:48,360
jitsu and what I have in my etsy hosts

373
00:14:48,360 --> 00:14:52,870
file

374
00:14:52,880 --> 00:14:57,420
is that I have a bunch of dev ji to

375
00:14:57,420 --> 00:14:59,459
stuff set up so I'm just going to hit

376
00:14:59,459 --> 00:15:03,330
one of those sites and I'm going to see

377
00:15:03,330 --> 00:15:06,779
my app right good stuff but now I may

378
00:15:06,779 --> 00:15:16,529
want to later on stop my app so I'm

379
00:15:16,529 --> 00:15:30,710
going to stop my app right now

380
00:15:30,720 --> 00:15:33,190
and now it stopped

381
00:15:33,190 --> 00:15:41,170
well maybe it's not do it live and now

382
00:15:41,170 --> 00:15:50,230
it started so Oh three two one file

383
00:15:50,230 --> 00:15:53,020
descriptor reload now it's tough uses a

384
00:15:53,020 --> 00:15:55,210
file watcher so it takes a split second

385
00:15:55,210 --> 00:15:57,430
it could easily plugged out to use Redis

386
00:15:57,430 --> 00:15:59,950
and be much faster so yeah we just

387
00:15:59,950 --> 00:16:02,440
stopped a node.js application and

388
00:16:02,440 --> 00:16:04,900
restart it and did all that stuff little

389
00:16:04,900 --> 00:16:07,060
known fact in the node community is that

390
00:16:07,060 --> 00:16:08,410
I actually wrote the programmatic

391
00:16:08,410 --> 00:16:11,050
support for NPM or helped Isaac write it

392
00:16:11,050 --> 00:16:12,630
I guess it since Isaac writes everything

393
00:16:12,630 --> 00:16:15,160
so what this will do is actually install

394
00:16:15,160 --> 00:16:16,870
all of your NPM dependencies for you

395
00:16:16,870 --> 00:16:18,820
automatically get the right versions

396
00:16:18,820 --> 00:16:20,860
this is why I harp so much on the

397
00:16:20,860 --> 00:16:23,470
package.json dependencies because if you

398
00:16:23,470 --> 00:16:24,910
don't have the right dependencies and

399
00:16:24,910 --> 00:16:26,440
you decide to start multiple ones of

400
00:16:26,440 --> 00:16:27,850
these overtime on different machines

401
00:16:27,850 --> 00:16:30,040
that is a really difficult problem to

402
00:16:30,040 --> 00:16:33,670
the bug and so I guess in closing before

403
00:16:33,670 --> 00:16:37,600
I hit some questions I just was really

404
00:16:37,600 --> 00:16:49,470
looking forward to doing this

405
00:16:49,480 --> 00:16:51,880
yeah I've got I've got one more slide

406
00:16:51,880 --> 00:16:53,320
which is another one of my favorite

407
00:16:53,320 --> 00:16:55,810
lines you know why why you know make

408
00:16:55,810 --> 00:17:02,019
questions trademark anybody cool man

409
00:17:02,019 --> 00:17:03,339
that's great no questions I'm yeah

410
00:17:03,339 --> 00:17:08,710
that's that's oh wait now I got 10

411
00:17:08,720 --> 00:17:11,209
yeah yeah it's all round robin and just

412
00:17:11,209 --> 00:17:14,449
oh I'm sorry the question was is that

413
00:17:14,449 --> 00:17:16,699
load balancer doing rabid proxying and

414
00:17:16,699 --> 00:17:19,819
the answer is yes and so the thing about

415
00:17:19,819 --> 00:17:21,740
the stop request that came in when you

416
00:17:21,740 --> 00:17:23,209
tell it to stop it will stop all

417
00:17:23,209 --> 00:17:26,059
instances it's not really refined enough

418
00:17:26,059 --> 00:17:27,439
to say oh I want to stop this one

419
00:17:27,439 --> 00:17:29,090
particular drone or that one particular

420
00:17:29,090 --> 00:17:30,950
drone and they're jitsu we generally

421
00:17:30,950 --> 00:17:32,390
have multiple machines running and we'll

422
00:17:32,390 --> 00:17:34,700
just say Oh turn off that machine which

423
00:17:34,700 --> 00:17:35,929
might have two or three processes

424
00:17:35,929 --> 00:17:38,539
running on it and scale in that way per

425
00:17:38,539 --> 00:17:42,710
machine horizontally how much each

426
00:17:42,710 --> 00:17:45,260
process uses so this is actually a

427
00:17:45,260 --> 00:17:46,549
feature that I'm working on it forever

428
00:17:46,549 --> 00:17:48,049
for the next version which is to just

429
00:17:48,049 --> 00:17:50,900
monitor things by the OS module but

430
00:17:50,900 --> 00:17:54,020
that's not in there yet so that the

431
00:17:54,020 --> 00:17:56,179
question was is there an option in hibu

432
00:17:56,179 --> 00:17:59,120
for doing rolling restarts so kind of

433
00:17:59,120 --> 00:18:00,830
the way so I've got a few minutes left

434
00:18:00,830 --> 00:18:03,650
let's just jump into the code so

435
00:18:03,650 --> 00:18:05,840
essentially it all the way I like to say

436
00:18:05,840 --> 00:18:08,210
about this this project is that it all

437
00:18:08,210 --> 00:18:11,000
wraps this one function which is the

438
00:18:11,000 --> 00:18:13,280
spawn function and this does a bunch of

439
00:18:13,280 --> 00:18:14,510
stuff to figure out where your app is

440
00:18:14,510 --> 00:18:16,070
and you know install the dependencies

441
00:18:16,070 --> 00:18:17,929
and do all those sorts of things but at

442
00:18:17,929 --> 00:18:20,059
the end of the day it just spawns this

443
00:18:20,059 --> 00:18:22,760
thing called the carapace and it's fully

444
00:18:22,760 --> 00:18:25,370
pluggable so I have a chroot plug-in

445
00:18:25,370 --> 00:18:26,750
which is a good example like sometimes

446
00:18:26,750 --> 00:18:28,549
you want to be in chroot sometimes you

447
00:18:28,549 --> 00:18:31,190
don't depending on who you are and so

448
00:18:31,190 --> 00:18:32,659
plugins can say oh I want to spawn with

449
00:18:32,659 --> 00:18:34,730
these options and these can actually be

450
00:18:34,730 --> 00:18:37,370
used by the carapace file so you know

451
00:18:37,370 --> 00:18:40,370
because this is designed to spawn any

452
00:18:40,370 --> 00:18:42,650
node application not necessarily a

453
00:18:42,650 --> 00:18:45,200
server that's not baked in but one could

454
00:18:45,200 --> 00:18:47,179
easily write a cluster plugin that

455
00:18:47,179 --> 00:18:49,340
utilize cluster for particular HTTP

456
00:18:49,340 --> 00:18:51,620
servers that does rolling restart

457
00:18:51,620 --> 00:18:53,390
cluster does rolling restart for you so

458
00:18:53,390 --> 00:18:54,620
if you are going to be running a lot of

459
00:18:54,620 --> 00:18:56,570
HTTP servers you should write that

460
00:18:56,570 --> 00:18:58,309
plugin because I haven't had the time to

461
00:18:58,309 --> 00:19:02,990
yet but I plan on it all right anything

462
00:19:02,990 --> 00:19:04,179
else

