1
00:00:11,680 --> 00:00:15,830

hi welcome everyone who are few things

2
00:00:15,830 --> 00:00:17,960
that front end development has become

3
00:00:17,960 --> 00:00:23,110
more complex in the past 45 years okay

4
00:00:23,110 --> 00:00:27,259
you're not alone I think 2015 was the

5
00:00:27,259 --> 00:00:29,689
year of JavaScript fatigue and the term

6
00:00:29,689 --> 00:00:32,360
was coined by an excellent article by

7
00:00:32,360 --> 00:00:35,000
Eric Clemens it was published in

8
00:00:35,000 --> 00:00:38,930
December 20 2015 and it was about the

9
00:00:38,930 --> 00:00:42,740
explosion of libraries and tools that he

10
00:00:42,740 --> 00:00:44,870
had experienced when starting with react

11
00:00:44,870 --> 00:00:48,310
and he certainly right so I try to

12
00:00:48,310 --> 00:00:51,500
collect all the truths it's just a small

13
00:00:51,500 --> 00:00:54,320
collection we have custom languages we

14
00:00:54,320 --> 00:00:56,600
have linters we have bundlers we have

15
00:00:56,600 --> 00:00:59,300
many fires we have def troops to support

16
00:00:59,300 --> 00:01:01,880
our development workflow we have task

17
00:01:01,880 --> 00:01:04,699
runners we have Tom libraries routing

18
00:01:04,699 --> 00:01:07,340
libraries state libraries and of course

19
00:01:07,340 --> 00:01:09,439
we have package managers to install all

20
00:01:09,439 --> 00:01:14,270
these things so a lot of tools and but I

21
00:01:14,270 --> 00:01:18,409
think this was in the end of 2015 but

22
00:01:18,409 --> 00:01:22,030
now it's 2016 so we in the future right

23
00:01:22,030 --> 00:01:25,009
there are a lot of exciting new

24
00:01:25,009 --> 00:01:28,810
technologies coming up like HTTP two or

25
00:01:28,810 --> 00:01:32,689
es2015 or web components and the browser

26
00:01:32,689 --> 00:01:38,600
support is getting better each day so in

27
00:01:38,600 --> 00:01:41,299
modern browsers so how do these new

28
00:01:41,299 --> 00:01:44,899
features change the way we work and do

29
00:01:44,899 --> 00:01:47,420
we need even to even eat these tools

30
00:01:47,420 --> 00:01:50,749
that I've mentioned before but it become

31
00:01:50,749 --> 00:01:52,819
natively available through the platform

32
00:01:52,819 --> 00:01:55,189
and that's actually the topic of my talk

33
00:01:55,189 --> 00:01:57,709
it's about the future of front and

34
00:01:57,709 --> 00:02:00,529
chilling and my name is Johanna say but

35
00:02:00,529 --> 00:02:04,189
i founded a company in Germany with my

36
00:02:04,189 --> 00:02:06,619
friends it's called Paragon and this is

37
00:02:06,619 --> 00:02:09,349
my twitter handle and yes it's 3m

38
00:02:09,349 --> 00:02:14,120
because 2n was already taking yeah and

39
00:02:14,120 --> 00:02:17,240
we do also a lot of open source we are

40
00:02:17,240 --> 00:02:19,190
very passionate about all source I think

41
00:02:19,190 --> 00:02:22,760
every company should do more open source

42
00:02:22,760 --> 00:02:25,580
and I'm also happy to be a member of the

43
00:02:25,580 --> 00:02:29,450
web pack core team and now we do weekly

44
00:02:29,450 --> 00:02:32,510
meetups and talk about a new stuff in

45
00:02:32,510 --> 00:02:35,989
backpack so let's explore these new

46
00:02:35,989 --> 00:02:38,840
technologies and we start with East 2015

47
00:02:38,840 --> 00:02:41,090
modules because I think they are really

48
00:02:41,090 --> 00:02:43,430
great and you probably have seen them

49
00:02:43,430 --> 00:02:47,930
already if not I just show it to you you

50
00:02:47,930 --> 00:02:50,180
have an export statement and you can

51
00:02:50,180 --> 00:02:53,870
import stuff and directly and it's a

52
00:02:53,870 --> 00:02:55,879
real nice syntax it avoids naming

53
00:02:55,879 --> 00:02:58,819
collisions and I think that's one of the

54
00:02:58,819 --> 00:03:01,519
biggest parts that has been missing to

55
00:03:01,519 --> 00:03:05,269
JavaScript and actually it looks pretty

56
00:03:05,269 --> 00:03:07,220
similar to come and guess what we are

57
00:03:07,220 --> 00:03:12,560
used to write in nodejs so it looks

58
00:03:12,560 --> 00:03:16,159
almost the same but actually there's a

59
00:03:16,159 --> 00:03:20,030
big difference there are two important

60
00:03:20,030 --> 00:03:24,379
differences so in common j/s you can do

61
00:03:24,379 --> 00:03:27,919
dynamic imports like this one where you

62
00:03:27,919 --> 00:03:30,620
require just a variable you don't know

63
00:03:30,620 --> 00:03:33,310
what the path will be it will be

64
00:03:33,310 --> 00:03:35,900
determined on ranch I'm so it's totally

65
00:03:35,900 --> 00:03:39,019
valid but you can't do that with is 2015

66
00:03:39,019 --> 00:03:41,930
modules this would be a syntax error if

67
00:03:41,930 --> 00:03:45,139
you import a variable you need to name

68
00:03:45,139 --> 00:03:50,930
the exact half up front and another

69
00:03:50,930 --> 00:03:54,440
difference is that with come on Jas you

70
00:03:54,440 --> 00:03:57,019
actually get a copied value so if you

71
00:03:57,019 --> 00:03:59,660
import a number you get a copy of that

72
00:03:59,660 --> 00:04:01,940
number and if you import a function you

73
00:04:01,940 --> 00:04:04,910
get a copy of the reference to that

74
00:04:04,910 --> 00:04:10,489
function so in this example when I

75
00:04:10,489 --> 00:04:14,299
increment when I call increment and the

76
00:04:14,299 --> 00:04:16,810
number will not actually be incremented

77
00:04:16,810 --> 00:04:20,180
incremented in maine j/s because i got a

78
00:04:20,180 --> 00:04:24,650
copy and with is 2015 you get life

79
00:04:24,650 --> 00:04:26,750
values which means that you get the

80
00:04:26,750 --> 00:04:29,750
actual value into the module scope it's

81
00:04:29,750 --> 00:04:32,389
like like it has been defined in the

82
00:04:32,389 --> 00:04:34,849
extra scope so that's a real difference

83
00:04:34,849 --> 00:04:36,200
and you could not

84
00:04:36,200 --> 00:04:39,590
really do that without the native

85
00:04:39,590 --> 00:04:44,510
support these properties make is 2015

86
00:04:44,510 --> 00:04:47,500
modules less flexible than comment yes

87
00:04:47,500 --> 00:04:50,300
but they are also the foundation for

88
00:04:50,300 --> 00:04:54,830
three shaking and three shaking is let

89
00:04:54,830 --> 00:04:57,350
me explain that so for instance if you

90
00:04:57,350 --> 00:05:01,460
have a module that has a value and we

91
00:05:01,460 --> 00:05:03,050
have two functions increment and

92
00:05:03,050 --> 00:05:06,080
decrement but we only use the function

93
00:05:06,080 --> 00:05:09,290
increment so we don't really need to

94
00:05:09,290 --> 00:05:13,160
include the function decrement and with

95
00:05:13,160 --> 00:05:16,220
tree shaking and is 23 modules we are

96
00:05:16,220 --> 00:05:19,490
able to resolve that because we can just

97
00:05:19,490 --> 00:05:21,800
just by looking at the source code we

98
00:05:21,800 --> 00:05:23,390
know that the function decrement is

99
00:05:23,390 --> 00:05:26,120
never called so we can just remove it

100
00:05:26,120 --> 00:05:28,010
from the code and this is called tree

101
00:05:28,010 --> 00:05:33,590
shaking so the static nature of is 2015

102
00:05:33,590 --> 00:05:35,960
modules makes it possible to trace all

103
00:05:35,960 --> 00:05:40,310
the exports that are actually used but

104
00:05:40,310 --> 00:05:42,560
with a static model system how do we

105
00:05:42,560 --> 00:05:45,260
load things on demand that's still

106
00:05:45,260 --> 00:05:47,330
important especially in the front end

107
00:05:47,330 --> 00:05:52,370
and so there's another tool it's called

108
00:05:52,370 --> 00:05:55,340
system import so system import all

109
00:05:55,340 --> 00:05:59,080
things and that's a way to load

110
00:05:59,080 --> 00:06:01,970
asynchronously and in a dynamic way and

111
00:06:01,970 --> 00:06:06,260
to load modules into the program it

112
00:06:06,260 --> 00:06:08,480
looks like this where you call system

113
00:06:08,480 --> 00:06:11,270
import and you specify the module and

114
00:06:11,270 --> 00:06:13,610
you get back a promise and of course

115
00:06:13,610 --> 00:06:16,010
this could fail because network is down

116
00:06:16,010 --> 00:06:17,900
or something or the money could not be

117
00:06:17,900 --> 00:06:20,690
found so we have also to handle the

118
00:06:20,690 --> 00:06:26,870
error but unfortunately things aren't

119
00:06:26,870 --> 00:06:30,950
finalized yet so that's because system

120
00:06:30,950 --> 00:06:33,400
import is very platform specific and

121
00:06:33,400 --> 00:06:35,780
many things need to be consistent

122
00:06:35,780 --> 00:06:38,150
considered so system import works

123
00:06:38,150 --> 00:06:40,310
different in node then it works in the

124
00:06:40,310 --> 00:06:43,040
browser so it's hard to get these things

125
00:06:43,040 --> 00:06:47,720
right and that's why the tc39 decided to

126
00:06:47,720 --> 00:06:48,620
exclude

127
00:06:48,620 --> 00:06:52,210
is 2015 and it is now currently

128
00:06:52,210 --> 00:06:56,630
specified as separate loader standard so

129
00:06:56,630 --> 00:06:58,430
once we can load more is natively in the

130
00:06:58,430 --> 00:07:00,139
browser do we need tools like browser

131
00:07:00,139 --> 00:07:04,190
fire or web pack anymore well to answer

132
00:07:04,190 --> 00:07:06,350
this question we should take a look at

133
00:07:06,350 --> 00:07:08,300
another technology first and this is

134
00:07:08,300 --> 00:07:11,660
HTTP two and I will not talk about all

135
00:07:11,660 --> 00:07:13,100
the new features of HTTP true there are

136
00:07:13,100 --> 00:07:15,020
a lot of creatures like header

137
00:07:15,020 --> 00:07:17,720
compression but I don't think this would

138
00:07:17,720 --> 00:07:21,139
be another talk so I just keep my focus

139
00:07:21,139 --> 00:07:23,510
on features that are important for the

140
00:07:23,510 --> 00:07:27,710
front and tooling so first feature HTTP

141
00:07:27,710 --> 00:07:30,470
two is a binary protocol you know HTTP

142
00:07:30,470 --> 00:07:35,060
one is a text based protocol so requests

143
00:07:35,060 --> 00:07:38,229
and responses are actually streams and

144
00:07:38,229 --> 00:07:42,710
you screams can be divided into frames

145
00:07:42,710 --> 00:07:47,060
and frames can be interleaved so now we

146
00:07:47,060 --> 00:07:49,690
have multiple requests and responses

147
00:07:49,690 --> 00:07:51,949
simultaneously on a single TCP

148
00:07:51,949 --> 00:07:55,750
connection and this actually eliminates

149
00:07:55,750 --> 00:07:58,190
HTTP one's problem of head of line

150
00:07:58,190 --> 00:08:00,460
blocking where you had to wait for the

151
00:08:00,460 --> 00:08:03,080
response to be finished to send the next

152
00:08:03,080 --> 00:08:06,349
request and this actually invalidates

153
00:08:06,349 --> 00:08:08,960
some of our best practices like bundling

154
00:08:08,960 --> 00:08:11,150
multiple resources into one file to

155
00:08:11,150 --> 00:08:13,550
avoid requests or domain sharding where

156
00:08:13,550 --> 00:08:18,070
you put your assets on different domains

157
00:08:18,070 --> 00:08:21,020
great so let's get rid of all the

158
00:08:21,020 --> 00:08:22,610
bundles and just include our development

159
00:08:22,610 --> 00:08:26,630
files well not so fast there are

160
00:08:26,630 --> 00:08:29,990
problems first one tree shaking when

161
00:08:29,990 --> 00:08:31,970
there are no bundles who is doing the

162
00:08:31,970 --> 00:08:34,190
tree shaking we still need a tool that

163
00:08:34,190 --> 00:08:37,330
figure out all the dependencies and

164
00:08:37,330 --> 00:08:41,209
resource all the imports and then that's

165
00:08:41,209 --> 00:08:44,900
the tree shaking on a moral code the

166
00:08:44,900 --> 00:08:46,700
second problem is minification we also

167
00:08:46,700 --> 00:08:51,080
need to minify the HTML CSS and

168
00:08:51,080 --> 00:08:56,690
JavaScript we still there we also have

169
00:08:56,690 --> 00:08:59,450
compression and choose the compression

170
00:08:59,450 --> 00:09:02,800
is better if the

171
00:09:02,800 --> 00:09:04,730
choo-choos the compression is good at

172
00:09:04,730 --> 00:09:07,640
removing repetition so when we have a

173
00:09:07,640 --> 00:09:10,820
big file it's more efficient if we then

174
00:09:10,820 --> 00:09:13,910
compared to compressing many small files

175
00:09:13,910 --> 00:09:16,820
so it may be still a good idea to put

176
00:09:16,820 --> 00:09:19,960
all the files into one file probably and

177
00:09:19,960 --> 00:09:23,720
the last problem is the round trip the

178
00:09:23,720 --> 00:09:25,010
browser can only discover additional

179
00:09:25,010 --> 00:09:27,920
dependencies after the response has been

180
00:09:27,920 --> 00:09:31,550
received and passed so I call this the

181
00:09:31,550 --> 00:09:34,790
A&D problem like the client says oh give

182
00:09:34,790 --> 00:09:38,870
me HS and services here we go oh I see

183
00:09:38,870 --> 00:09:42,340
now I also need pjs no prop here you go

184
00:09:42,340 --> 00:09:45,290
sorry do you also have CJ s so it goes

185
00:09:45,290 --> 00:09:49,820
all the way like this and that's where

186
00:09:49,820 --> 00:09:52,040
another feature of HTTP comes into play

187
00:09:52,040 --> 00:09:57,860
it's called server push and with the

188
00:09:57,860 --> 00:09:59,780
server push we are able to push

189
00:09:59,780 --> 00:10:03,410
resources proactively to the client so

190
00:10:03,410 --> 00:10:05,810
now when the when the client tries to

191
00:10:05,810 --> 00:10:08,090
request that file it is instantly

192
00:10:08,090 --> 00:10:11,390
available available and can be cashed so

193
00:10:11,390 --> 00:10:18,140
then yeah so what do we need to provide

194
00:10:18,140 --> 00:10:23,780
sort of push and for instance we could

195
00:10:23,780 --> 00:10:26,360
use a dependency tree like if we have

196
00:10:26,360 --> 00:10:30,260
index HTML we have an index.html and we

197
00:10:30,260 --> 00:10:33,590
know this index HTML imports or requires

198
00:10:33,590 --> 00:10:37,040
a style sheet and it requires JavaScript

199
00:10:37,040 --> 00:10:39,470
we can put that into one chasing file

200
00:10:39,470 --> 00:10:43,310
and just let us serve a handle that

201
00:10:43,310 --> 00:10:46,250
manifest so this is actually a proposal

202
00:10:46,250 --> 00:10:48,110
from google it's called the push

203
00:10:48,110 --> 00:10:51,620
manifest proposal and then for we have

204
00:10:51,620 --> 00:10:55,250
this dependency tree for each file for

205
00:10:55,250 --> 00:10:59,180
instance for the app CSS there's also an

206
00:10:59,180 --> 00:11:04,040
else statement that imports the image so

207
00:11:04,040 --> 00:11:09,970
we have to do that for every file

208
00:11:09,980 --> 00:11:12,770
and how do we get this depends tree so

209
00:11:12,770 --> 00:11:16,340
there are two ways to do that we could

210
00:11:16,340 --> 00:11:18,740
analyze the traffic using the referer

211
00:11:18,740 --> 00:11:23,390
header and see where the requests are

212
00:11:23,390 --> 00:11:26,390
coming from or we could use a tool like

213
00:11:26,390 --> 00:11:28,280
a bundler that figures out the

214
00:11:28,280 --> 00:11:30,530
dependency graph the dependency graph is

215
00:11:30,530 --> 00:11:32,750
the data model where you say oh this

216
00:11:32,750 --> 00:11:34,580
fire requires this file this file

217
00:11:34,580 --> 00:11:39,170
requires this file and so on okay so

218
00:11:39,170 --> 00:11:40,850
great let's figure out the dependency

219
00:11:40,850 --> 00:11:42,590
graph and push everything to the client

220
00:11:42,590 --> 00:11:45,580
oh not so fast there are still problems

221
00:11:45,580 --> 00:11:48,370
the first problem is responsive images

222
00:11:48,370 --> 00:11:50,780
we need information about the client

223
00:11:50,780 --> 00:11:51,770
because we don't want to push

224
00:11:51,770 --> 00:11:53,540
high-resolution images to small screens

225
00:11:53,540 --> 00:11:57,230
for instance the second problem is the

226
00:11:57,230 --> 00:11:59,420
cash we don't know what the client has

227
00:11:59,420 --> 00:12:02,540
already cashed so we cannot just push

228
00:12:02,540 --> 00:12:04,340
all the things to the client because

229
00:12:04,340 --> 00:12:07,150
maybe it has it has cashed it already so

230
00:12:07,150 --> 00:12:09,320
we don't want to waste that precious

231
00:12:09,320 --> 00:12:12,650
bandwidth and there's a proposal for a

232
00:12:12,650 --> 00:12:14,660
proposed solution for this it's called

233
00:12:14,660 --> 00:12:18,370
cash digest the next problem is

234
00:12:18,370 --> 00:12:21,110
authorization so we need to make sure

235
00:12:21,110 --> 00:12:22,910
that we don't push confidential

236
00:12:22,910 --> 00:12:25,310
resources to the client so push

237
00:12:25,310 --> 00:12:27,200
basically requires the same of a

238
00:12:27,200 --> 00:12:34,120
relation flow as requests and we can't

239
00:12:34,120 --> 00:12:37,010
we can't push resources from third

240
00:12:37,010 --> 00:12:39,260
parties or so if we are using a CDN and

241
00:12:39,260 --> 00:12:43,720
our own server we see the end can't push

242
00:12:43,720 --> 00:12:46,610
just push a resource to the client there

243
00:12:46,610 --> 00:12:51,010
must be one initial request first and

244
00:12:51,010 --> 00:12:54,250
the last problem is prioritization

245
00:12:54,250 --> 00:12:56,750
because if we just push all the

246
00:12:56,750 --> 00:12:59,690
resources without prioritization it

247
00:12:59,690 --> 00:13:02,420
actually harms performance so for

248
00:13:02,420 --> 00:13:04,550
instance if we have an HTML file like

249
00:13:04,550 --> 00:13:07,940
this where we include a main CSS and in

250
00:13:07,940 --> 00:13:11,020
the main.css there is a phone face

251
00:13:11,020 --> 00:13:15,220
included and we have two heavy images

252
00:13:15,220 --> 00:13:19,010
now CSS and fonts a render blocking and

253
00:13:19,010 --> 00:13:23,930
images or not but if you just push

254
00:13:23,930 --> 00:13:27,110
everything to the client the images

255
00:13:27,110 --> 00:13:29,870
would waste our precious spent if so the

256
00:13:29,870 --> 00:13:34,580
initial render would be way slower than

257
00:13:34,580 --> 00:13:36,680
with HTTP one because we are wasting

258
00:13:36,680 --> 00:13:39,970
bandwidth on images but we should push

259
00:13:39,970 --> 00:13:43,420
the style sheets and fonts first and

260
00:13:43,420 --> 00:13:46,490
that's why hcp provides a way to weigh

261
00:13:46,490 --> 00:13:50,270
each stream and pause resume and pencil

262
00:13:50,270 --> 00:13:53,870
extreme but a good implementation that

263
00:13:53,870 --> 00:13:56,149
takes everything into account is very

264
00:13:56,149 --> 00:13:59,420
challenging and complex and actually

265
00:13:59,420 --> 00:14:01,670
with HPV one with the head of line

266
00:14:01,670 --> 00:14:04,160
blocking it actually prevented this kind

267
00:14:04,160 --> 00:14:07,820
of wrong prioritization because if we

268
00:14:07,820 --> 00:14:10,730
had an HTML file like this we knew

269
00:14:10,730 --> 00:14:12,529
exactly in which order the files are

270
00:14:12,529 --> 00:14:16,190
requested so maybe the head of line

271
00:14:16,190 --> 00:14:18,680
blocking was not so bad at least it was

272
00:14:18,680 --> 00:14:22,550
predictable what will happen so in this

273
00:14:22,550 --> 00:14:26,270
case we can even include dimensions to

274
00:14:26,270 --> 00:14:30,350
the image so the image layout is already

275
00:14:30,350 --> 00:14:32,800
rendered and the browser chest needs to

276
00:14:32,800 --> 00:14:35,660
actually render the image but it already

277
00:14:35,660 --> 00:14:43,000
can build the layout of the page then as

278
00:14:43,000 --> 00:14:46,040
next and last technology we have web

279
00:14:46,040 --> 00:14:51,320
components and the vision of web

280
00:14:51,320 --> 00:14:54,650
components is you can think of web

281
00:14:54,650 --> 00:14:57,380
components as reusable user interface

282
00:14:57,380 --> 00:15:00,260
which is that I created using open web

283
00:15:00,260 --> 00:15:02,990
technology they are part of the browser

284
00:15:02,990 --> 00:15:05,000
and so they do not need external

285
00:15:05,000 --> 00:15:07,100
libraries like jQuery or dojo an

286
00:15:07,100 --> 00:15:08,930
existing web permanent can be used

287
00:15:08,930 --> 00:15:10,910
without writing code simply by adding an

288
00:15:10,910 --> 00:15:13,160
import statement to an HTML page I've

289
00:15:13,160 --> 00:15:15,620
copied that from the Mozilla developer

290
00:15:15,620 --> 00:15:19,790
Network but actually web components is a

291
00:15:19,790 --> 00:15:23,480
bit as a fuzzy term because it refers to

292
00:15:23,480 --> 00:15:26,899
four different technologies we have HTML

293
00:15:26,899 --> 00:15:29,899
templates we have HTML custom elements

294
00:15:29,899 --> 00:15:32,600
we have the shadow DOM and we have HTML

295
00:15:32,600 --> 00:15:37,610
imports and actually custom elements

296
00:15:37,610 --> 00:15:39,589
HTML imports and the shadow Dom have

297
00:15:39,589 --> 00:15:41,529
already gone through several revisions

298
00:15:41,529 --> 00:15:43,910
which makes it really hard to find

299
00:15:43,910 --> 00:15:46,910
up-to-date information when I was

300
00:15:46,910 --> 00:15:50,779
preparing the talk it was very confusing

301
00:15:50,779 --> 00:15:52,970
for me too and I was not sure if this is

302
00:15:52,970 --> 00:15:56,899
the current draft so and even Mozilla

303
00:15:56,899 --> 00:15:59,870
Microsoft decided to post development on

304
00:15:59,870 --> 00:16:02,570
HTML imports entirely because they

305
00:16:02,570 --> 00:16:05,000
thought that the es lo de spec has too

306
00:16:05,000 --> 00:16:10,180
much overlap with HTML imports so yes

307
00:16:10,180 --> 00:16:16,220
this spec is currently paused but let's

308
00:16:16,220 --> 00:16:18,769
start with HTML templates they provide a

309
00:16:18,769 --> 00:16:21,380
way to define HTML fragments that are

310
00:16:21,380 --> 00:16:25,220
parts but all interpreted so these

311
00:16:25,220 --> 00:16:29,240
templates are inert which means that no

312
00:16:29,240 --> 00:16:31,970
markup is displayed no styles are

313
00:16:31,970 --> 00:16:34,100
applied no images are loaded no

314
00:16:34,100 --> 00:16:37,010
javascript is executed and the inner

315
00:16:37,010 --> 00:16:38,899
contents of the templates are invisible

316
00:16:38,899 --> 00:16:42,320
to selectors so it's just an inactive

317
00:16:42,320 --> 00:16:45,949
part of the page and we can get that

318
00:16:45,949 --> 00:16:51,320
into the drum by importing it into the

319
00:16:51,320 --> 00:16:53,540
drum and now we get real Dom nodes and

320
00:16:53,540 --> 00:16:59,990
then it will get active the second part

321
00:16:59,990 --> 00:17:03,230
is custom elements it's in a JavaScript

322
00:17:03,230 --> 00:17:05,299
API to register custom implementation

323
00:17:05,299 --> 00:17:08,329
for arbitrary elements and the current

324
00:17:08,329 --> 00:17:10,669
draft looks like this we define a class

325
00:17:10,669 --> 00:17:13,309
my button that extends the HTML button

326
00:17:13,309 --> 00:17:15,640
element for instance and we have

327
00:17:15,640 --> 00:17:18,650
lifecycle hooks like connected callback

328
00:17:18,650 --> 00:17:22,040
disconnected call that it looks a bit

329
00:17:22,040 --> 00:17:25,790
like a react component and then we can

330
00:17:25,790 --> 00:17:28,309
register the element by calling custom

331
00:17:28,309 --> 00:17:31,570
elements that define and we can even

332
00:17:31,570 --> 00:17:36,200
extend built-in texts like the button

333
00:17:36,200 --> 00:17:43,460
and like this the next part of the web

334
00:17:43,460 --> 00:17:45,410
components back is the shadow DOM and I

335
00:17:45,410 --> 00:17:47,540
think this the heart of the web

336
00:17:47,540 --> 00:17:49,400
components and the

337
00:17:49,400 --> 00:17:51,560
most it's difficult to polyfill this

338
00:17:51,560 --> 00:17:55,670
because it's encapsulated in heitz

339
00:17:55,670 --> 00:17:57,500
elements styles and events behind a

340
00:17:57,500 --> 00:18:00,650
single element and it also describes how

341
00:18:00,650 --> 00:18:02,750
content of the documentary is trans

342
00:18:02,750 --> 00:18:05,330
cluded into the shadow tree it's a bit

343
00:18:05,330 --> 00:18:07,970
complicated and I will not go much into

344
00:18:07,970 --> 00:18:12,620
detail here but it's looked it looks

345
00:18:12,620 --> 00:18:15,560
like this where you attach a shadow Dom

346
00:18:15,560 --> 00:18:20,120
it's like encapsulated part of the DOM

347
00:18:20,120 --> 00:18:24,370
and that's where all the styles and all

348
00:18:24,370 --> 00:18:31,720
all the texts are just encapsulated and

349
00:18:31,720 --> 00:18:35,030
last part is HTML imports where you can

350
00:18:35,030 --> 00:18:37,340
import other HTML documents into the

351
00:18:37,340 --> 00:18:39,530
current one including all the templates

352
00:18:39,530 --> 00:18:43,970
styles and scripts so for instance if we

353
00:18:43,970 --> 00:18:47,990
have a link tag here and we import blog

354
00:18:47,990 --> 00:18:53,200
post dot HTML all these styles are

355
00:18:53,200 --> 00:18:55,670
immediately applied to the importing

356
00:18:55,670 --> 00:18:58,040
document all the scripts are executed in

357
00:18:58,040 --> 00:19:01,370
the important documents context but all

358
00:19:01,370 --> 00:19:03,770
the HTML needs to be appended to the

359
00:19:03,770 --> 00:19:08,120
dome via JavaScript great so let's get

360
00:19:08,120 --> 00:19:09,740
rid of all the frameworks and just write

361
00:19:09,740 --> 00:19:13,390
native web components well not so fast

362
00:19:13,390 --> 00:19:17,360
the first problem I see is the data flow

363
00:19:17,360 --> 00:19:21,110
with web components data is usually

364
00:19:21,110 --> 00:19:23,270
provided as strings by attributes on the

365
00:19:23,270 --> 00:19:27,100
shadow host like this in this example I

366
00:19:27,100 --> 00:19:29,210
think this may work for simple

367
00:19:29,210 --> 00:19:31,100
components but not for more complex ones

368
00:19:31,100 --> 00:19:34,610
like higher-order components and I don't

369
00:19:34,610 --> 00:19:36,280
really want to write code like this

370
00:19:36,280 --> 00:19:40,570
where you have to write a chase and

371
00:19:40,570 --> 00:19:44,690
attribute value the second problem is

372
00:19:44,690 --> 00:19:48,620
it's still very imperative so with web

373
00:19:48,620 --> 00:19:50,600
forum frameworks we get a declarative

374
00:19:50,600 --> 00:19:56,200
way to to describe Dom manipulations but

375
00:19:56,200 --> 00:19:59,770
with web components it's just like

376
00:19:59,770 --> 00:20:02,320
manual Dom manipulation and where

377
00:20:02,320 --> 00:20:04,299
imperative way so personally I don't

378
00:20:04,299 --> 00:20:06,340
want to go back to that kind of style

379
00:20:06,340 --> 00:20:12,130
and they are self-contained which sounds

380
00:20:12,130 --> 00:20:14,889
nice but my encapsulation is a good

381
00:20:14,889 --> 00:20:17,889
thing true self contained web components

382
00:20:17,889 --> 00:20:19,450
from different sources may not be

383
00:20:19,450 --> 00:20:22,720
desirable so for instance we may end up

384
00:20:22,720 --> 00:20:24,549
with different versions of react angular

385
00:20:24,549 --> 00:20:26,500
and ember on the same page and I don't

386
00:20:26,500 --> 00:20:30,370
know if we really want that and the

387
00:20:30,370 --> 00:20:33,820
second a fourth problem is global

388
00:20:33,820 --> 00:20:36,820
namespace it's like the mistakes from

389
00:20:36,820 --> 00:20:39,909
the past where we always have to care

390
00:20:39,909 --> 00:20:42,039
about conflicting namespaces and to

391
00:20:42,039 --> 00:20:45,100
prefix all the stuff so hmm imports

392
00:20:45,100 --> 00:20:50,200
don't really solve that well we may have

393
00:20:50,200 --> 00:20:53,200
a fly flash of unstyled content if we

394
00:20:53,200 --> 00:20:54,879
fail to deliver the implementation of a

395
00:20:54,879 --> 00:20:57,820
custom element fast enough the browser

396
00:20:57,820 --> 00:20:59,799
will display the custom element is HTML

397
00:20:59,799 --> 00:21:02,350
unknown element which is not not good

398
00:21:02,350 --> 00:21:07,000
and last but at least we don't really

399
00:21:07,000 --> 00:21:09,070
have a path for progressive enhancement

400
00:21:09,070 --> 00:21:11,919
so web components are defined via

401
00:21:11,919 --> 00:21:14,830
JavaScript and if something goes wrong

402
00:21:14,830 --> 00:21:17,559
our web app will be problem and of

403
00:21:17,559 --> 00:21:19,629
course that's also the case with a

404
00:21:19,629 --> 00:21:22,210
single page application frameworks but I

405
00:21:22,210 --> 00:21:25,360
think Universal javascript is a good way

406
00:21:25,360 --> 00:21:29,320
to always fall back to server side

407
00:21:29,320 --> 00:21:31,000
rendering if something goes wrong on the

408
00:21:31,000 --> 00:21:35,320
client so I still think we should keep

409
00:21:35,320 --> 00:21:36,610
the idea of progressive enhancement

410
00:21:36,610 --> 00:21:44,590
alive okay so the conclusion will is

411
00:21:44,590 --> 00:21:47,620
2015 models change the way we work yes

412
00:21:47,620 --> 00:21:49,659
of course finally we have a universal

413
00:21:49,659 --> 00:21:52,149
module format for JavaScript it's a

414
00:21:52,149 --> 00:21:54,220
great sin tax it avoids typical problems

415
00:21:54,220 --> 00:21:57,460
like namespace conflicts it enables tree

416
00:21:57,460 --> 00:21:59,440
shaking through static analysis so I

417
00:21:59,440 --> 00:22:02,950
just have i can write choose that reads

418
00:22:02,950 --> 00:22:05,799
the code and understands what what the

419
00:22:05,799 --> 00:22:08,919
code is importing and then we can remove

420
00:22:08,919 --> 00:22:13,480
all the unused stuff and i think it's a

421
00:22:13,480 --> 00:22:15,580
good idea to encapsulate platform

422
00:22:15,580 --> 00:22:16,120
semantics

423
00:22:16,120 --> 00:22:18,640
into a separate lower spec so we can

424
00:22:18,640 --> 00:22:21,610
define all things for the browser in a

425
00:22:21,610 --> 00:22:24,910
in the Lotus back and for node and maybe

426
00:22:24,910 --> 00:22:27,070
whatever need JavaScript environment

427
00:22:27,070 --> 00:22:32,200
will come up we'll hdb to change the way

428
00:22:32,200 --> 00:22:34,690
we work yes of course by new streams

429
00:22:34,690 --> 00:22:37,240
invalidate former best practices we have

430
00:22:37,240 --> 00:22:41,230
to rethink all of them again we have a

431
00:22:41,230 --> 00:22:43,290
more fine-grained control over

432
00:22:43,290 --> 00:22:47,500
optimization and so approach provides a

433
00:22:47,500 --> 00:22:49,600
new way to deliver resources separately

434
00:22:49,600 --> 00:22:53,080
but in order to leverage streams and

435
00:22:53,080 --> 00:22:55,600
server push we need to weigh in control

436
00:22:55,600 --> 00:22:57,460
these streams we need sophisticated

437
00:22:57,460 --> 00:23:00,400
server implementations and we need tools

438
00:23:00,400 --> 00:23:02,290
that feed these servers with relative

439
00:23:02,290 --> 00:23:05,020
information about our web app and of

440
00:23:05,020 --> 00:23:07,690
course we need careful and hopefully our

441
00:23:07,690 --> 00:23:11,680
automated testing to check if the

442
00:23:11,680 --> 00:23:15,610
performance is still good and went up we

443
00:23:15,610 --> 00:23:17,800
should stick to all that best practices

444
00:23:17,800 --> 00:23:20,530
where appropriate so we should not throw

445
00:23:20,530 --> 00:23:25,120
all the way well that components change

446
00:23:25,120 --> 00:23:28,420
the way work yes they provide new dawn

447
00:23:28,420 --> 00:23:30,490
parameters for future frameworks they

448
00:23:30,490 --> 00:23:31,990
make the platform itself more

449
00:23:31,990 --> 00:23:33,640
customizable and I think that's a good

450
00:23:33,640 --> 00:23:36,520
idea to explain the internals of the

451
00:23:36,520 --> 00:23:40,510
browser true to ask developers and that

452
00:23:40,510 --> 00:23:44,320
we can extend the browser but I think

453
00:23:44,320 --> 00:23:45,820
they don't provide choose to actually

454
00:23:45,820 --> 00:23:48,190
compose a more complex web app so we

455
00:23:48,190 --> 00:23:51,390
probably still will be using frameworks

456
00:23:51,390 --> 00:23:54,250
they don't provide ways to deliver these

457
00:23:54,250 --> 00:23:55,900
compliments companies efficiently

458
00:23:55,900 --> 00:23:58,930
especially with HTML imports I don't

459
00:23:58,930 --> 00:24:01,450
know and I think they can also make the

460
00:24:01,450 --> 00:24:03,940
platform or fragile because there's no

461
00:24:03,940 --> 00:24:09,340
path for progressive enhancement so how

462
00:24:09,340 --> 00:24:11,020
will front and develop and look like in

463
00:24:11,020 --> 00:24:13,650
the next year's and this is of course a

464
00:24:13,650 --> 00:24:18,040
biased view my biased view and you may

465
00:24:18,040 --> 00:24:19,960
have a different opinion on that so you

466
00:24:19,960 --> 00:24:23,200
can come to me and talk after the talk

467
00:24:23,200 --> 00:24:26,620
and we can discuss about that I think we

468
00:24:26,620 --> 00:24:30,040
will use tools like Babel post CSS and

469
00:24:30,040 --> 00:24:33,430
and that expose hackable abstract syntax

470
00:24:33,430 --> 00:24:38,440
trees and that provides plugins and

471
00:24:38,440 --> 00:24:41,890
presets for instance Babel and Eastland

472
00:24:41,890 --> 00:24:45,900
have have and posters as they have a

473
00:24:45,900 --> 00:24:51,100
common way to extend the features so

474
00:24:51,100 --> 00:24:52,750
Babel for instance if you don't apply

475
00:24:52,750 --> 00:24:54,790
any plugins it will do nothing on the

476
00:24:54,790 --> 00:24:59,360
source code you have to apply plugins I

477
00:24:59,370 --> 00:25:02,200
think we will be using languages with

478
00:25:02,200 --> 00:25:04,900
explicit exports and imports that avoid

479
00:25:04,900 --> 00:25:08,320
name space in collisions we had them too

480
00:25:08,320 --> 00:25:10,600
long and I think we want to get rid of

481
00:25:10,600 --> 00:25:13,090
them and year's 2015 models are a great

482
00:25:13,090 --> 00:25:17,380
way to do that and languages that allow

483
00:25:17,380 --> 00:25:21,400
static analysis that our truths can

484
00:25:21,400 --> 00:25:23,530
understand our source code and optimize

485
00:25:23,530 --> 00:25:29,080
it for us I think we will be using

486
00:25:29,080 --> 00:25:31,690
languages like chase X that embed other

487
00:25:31,690 --> 00:25:34,710
languages into is 2050 modules because

488
00:25:34,710 --> 00:25:38,620
then we get things like tree shaking for

489
00:25:38,620 --> 00:25:41,770
free and we really use bundlers that

490
00:25:41,770 --> 00:25:45,220
compose is 2015 modules and tree shake

491
00:25:45,220 --> 00:25:51,450
and use parts and now we have these

492
00:25:51,450 --> 00:25:55,420
syntax and these languages that can be

493
00:25:55,420 --> 00:25:59,590
analyzed statically we can create rules

494
00:25:59,590 --> 00:26:02,080
that analyze the critical rendering path

495
00:26:02,080 --> 00:26:05,020
and optimized for it so we don't have to

496
00:26:05,020 --> 00:26:10,330
do that by hand and optimized for the

497
00:26:10,330 --> 00:26:14,620
first meaningful paint and I think that

498
00:26:14,620 --> 00:26:17,070
a universal javascript is a good idea

499
00:26:17,070 --> 00:26:21,310
where we can always fall back so even if

500
00:26:21,310 --> 00:26:22,900
the client does not have enabled

501
00:26:22,900 --> 00:26:24,820
JavaScript or if something goes wrong

502
00:26:24,820 --> 00:26:27,640
the site will still be usable so I

503
00:26:27,640 --> 00:26:29,140
really think that server side rendering

504
00:26:29,140 --> 00:26:33,510
as a fallback strategy is a good idea so

505
00:26:33,510 --> 00:26:37,200
let's go and build these new things

506
00:26:37,200 --> 00:26:39,680
thank you

