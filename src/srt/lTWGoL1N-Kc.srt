1
00:00:00,650 --> 00:00:10,290

ah

2
00:00:10,300 --> 00:00:18,949
are are really so JavaScript who'd have

3
00:00:18,949 --> 00:00:20,360
thought that you could get a bunch of

4
00:00:20,360 --> 00:00:21,949
people together in any city to talk

5
00:00:21,949 --> 00:00:24,140
about JavaScript how really unlikely it

6
00:00:24,140 --> 00:00:26,089
has become the world's most popular

7
00:00:26,089 --> 00:00:28,250
programming language they're more of you

8
00:00:28,250 --> 00:00:30,380
writing in JavaScript today than any

9
00:00:30,380 --> 00:00:33,290
other programming language if they're

10
00:00:33,290 --> 00:00:34,760
it's running on more systems than

11
00:00:34,760 --> 00:00:38,120
anything else and it's not just in the

12
00:00:38,120 --> 00:00:40,220
browser it's all over the place at the

13
00:00:40,220 --> 00:00:41,710
same time it's the world's most

14
00:00:41,710 --> 00:00:43,910
unpopular programming language if you

15
00:00:43,910 --> 00:00:45,650
ask any group of programmers what

16
00:00:45,650 --> 00:00:47,930
language do you hate the most by far the

17
00:00:47,930 --> 00:00:48,980
most common answer is going to be

18
00:00:48,980 --> 00:00:51,530
JavaScript probably pretty equally

19
00:00:51,530 --> 00:00:53,180
between people use the language and

20
00:00:53,180 --> 00:00:55,310
people who don't um

21
00:00:55,310 --> 00:00:57,230
and it's all because of this guy this is

22
00:00:57,230 --> 00:01:00,020
Brendan Eich he was hired at Netscape to

23
00:01:00,020 --> 00:01:02,690
make the Netscape Browser work like

24
00:01:02,690 --> 00:01:05,500
hyper card and the approach that he took

25
00:01:05,500 --> 00:01:08,479
was really audacious he started with

26
00:01:08,479 --> 00:01:09,860
Java because they told him it had to

27
00:01:09,860 --> 00:01:12,980
look like Java took the best parts of

28
00:01:12,980 --> 00:01:15,440
scheme and the best parts of self which

29
00:01:15,440 --> 00:01:17,210
were two languages which had no

30
00:01:17,210 --> 00:01:19,940
commercial success but he poached

31
00:01:19,940 --> 00:01:21,380
features from them and put them together

32
00:01:21,380 --> 00:01:23,590
into a new language called live script

33
00:01:23,590 --> 00:01:26,600
never told anybody exactly what he had

34
00:01:26,600 --> 00:01:28,370
done and what the consequences of his

35
00:01:28,370 --> 00:01:29,930
design decisions were but they were

36
00:01:29,930 --> 00:01:35,690
amazing for reasons we don't have time

37
00:01:35,690 --> 00:01:39,740
to discuss today it was renamed as

38
00:01:39,740 --> 00:01:42,350
JavaScript in order to deceive the world

39
00:01:42,350 --> 00:01:45,130
as to the importance of the language and

40
00:01:45,130 --> 00:01:48,799
that very nearly succeeded it then

41
00:01:48,799 --> 00:01:51,290
became one of the problems with the word

42
00:01:51,290 --> 00:01:53,870
JavaScript beyond the obvious ones is

43
00:01:53,870 --> 00:01:56,090
that it's not open it's a proprietary

44
00:01:56,090 --> 00:01:58,549
trademark which now belongs to Oracle

45
00:01:58,549 --> 00:02:01,670
Corporation so you know it's the

46
00:02:01,670 --> 00:02:04,220
language of the open systems but it is

47
00:02:04,220 --> 00:02:07,820
not itself an open name so it may have

48
00:02:07,820 --> 00:02:09,349
become generic by now it may have been

49
00:02:09,349 --> 00:02:13,489
aspirin dorkly next or xeroxed but just

50
00:02:13,489 --> 00:02:16,400
in case it hasn't we can always call it

51
00:02:16,400 --> 00:02:18,530
Xmas crypt which is another synonym for

52
00:02:18,530 --> 00:02:23,000
the same silly language now I don't know

53
00:02:23,000 --> 00:02:24,590
if you remember the dot-com bubble

54
00:02:24,590 --> 00:02:29,120
anybody alive when that was going on the

55
00:02:29,120 --> 00:02:31,400
web was a big disappointment as an

56
00:02:31,400 --> 00:02:33,980
application delivery system page

57
00:02:33,980 --> 00:02:36,640
replacement was obviously too expensive

58
00:02:36,640 --> 00:02:39,470
Java applets failed the java community

59
00:02:39,470 --> 00:02:41,690
doesn't like to remember this but java

60
00:02:41,690 --> 00:02:43,760
had the first shot at being the language

61
00:02:43,760 --> 00:02:46,670
of the internet fell flat on its face

62
00:02:46,670 --> 00:02:49,069
hard one of the most amazing significant

63
00:02:49,069 --> 00:02:50,570
profound failures in the history of

64
00:02:50,570 --> 00:02:53,870
software not well remembered but in fact

65
00:02:53,870 --> 00:02:58,040
it happened and javascript was there too

66
00:02:58,040 --> 00:02:59,840
but nobody understood javascript at the

67
00:02:59,840 --> 00:03:02,090
time so it was pretty clear that the web

68
00:03:02,090 --> 00:03:05,500
failed as an application delivery system

69
00:03:05,500 --> 00:03:08,209
the consensus at the time this was

70
00:03:08,209 --> 00:03:10,850
around 2000 was that the web was dead

71
00:03:10,850 --> 00:03:14,510
that it was going to be replaced similar

72
00:03:14,510 --> 00:03:16,459
to the way that hypercard had been

73
00:03:16,459 --> 00:03:18,440
replaced that things are great for a

74
00:03:18,440 --> 00:03:20,360
while and then something will come and

75
00:03:20,360 --> 00:03:23,120
go better so the future was obviously

76
00:03:23,120 --> 00:03:25,010
not document retrieval it was going to

77
00:03:25,010 --> 00:03:27,230
be distributed programming what some

78
00:03:27,230 --> 00:03:28,940
people at the time were calling the X

79
00:03:28,940 --> 00:03:29,890
Internet

80
00:03:29,890 --> 00:03:32,239
one of the proponents of that was George

81
00:03:32,239 --> 00:03:35,690
colony who was the CEO of Forrester

82
00:03:35,690 --> 00:03:38,120
Research and he wrote on their website

83
00:03:38,120 --> 00:03:40,430
another software technology will come

84
00:03:40,430 --> 00:03:42,140
along and kill off the web and the

85
00:03:42,140 --> 00:03:43,790
Judgment Day will arrive very soon

86
00:03:43,790 --> 00:03:48,739
in the next two to three years he was

87
00:03:48,739 --> 00:03:51,019
right and he was also not completely

88
00:03:51,019 --> 00:03:54,350
right but he was influential by the way

89
00:03:54,350 --> 00:03:55,670
this is not on the Forrester site

90
00:03:55,670 --> 00:03:57,549
anymore but you can find it on

91
00:03:57,549 --> 00:04:02,150
archive.org so it's still out there so

92
00:04:02,150 --> 00:04:04,609
Microsoft heard this and believed it ok

93
00:04:04,609 --> 00:04:07,250
the web's gone just like everything else

94
00:04:07,250 --> 00:04:08,870
goes away so we'll start working on

95
00:04:08,870 --> 00:04:11,780
everything else so they disbanded the IE

96
00:04:11,780 --> 00:04:13,609
team because the web was finished and

97
00:04:13,609 --> 00:04:15,049
put them to work on Avalon and other

98
00:04:15,049 --> 00:04:16,450
things which are going to be more

99
00:04:16,450 --> 00:04:20,120
focused at the X Internet and then we're

100
00:04:20,120 --> 00:04:22,700
blindsided by the web a second time when

101
00:04:22,700 --> 00:04:28,130
Ajax came up in 2005 with that

102
00:04:28,130 --> 00:04:31,460
JavaScript got a rare second chance

103
00:04:31,460 --> 00:04:33,229
in a perfect world javascript would have

104
00:04:33,229 --> 00:04:35,389
died as a proprietary language with

105
00:04:35,389 --> 00:04:37,970
Netscape when Netscape died but it

106
00:04:37,970 --> 00:04:40,160
didn't it got a second chance and Ajax

107
00:04:40,160 --> 00:04:42,710
succeeded because of the goodness in

108
00:04:42,710 --> 00:04:44,870
JavaScript if JavaScript had been as

109
00:04:44,870 --> 00:04:46,819
crappy as everybody had thought it was

110
00:04:46,819 --> 00:04:47,660
from the beginning

111
00:04:47,660 --> 00:04:50,150
Ajax could not possibly have succeeded

112
00:04:50,150 --> 00:04:52,130
but it did succeed because of that

113
00:04:52,130 --> 00:04:55,819
goodness so despite that a lot of people

114
00:04:55,819 --> 00:04:58,430
hate JavaScript and there may be some

115
00:04:58,430 --> 00:05:01,460
good reasons and some bad reasons the

116
00:05:01,460 --> 00:05:03,560
good reasons are that it has bad parts

117
00:05:03,560 --> 00:05:05,479
it has a lot of really bad parts some

118
00:05:05,479 --> 00:05:07,160
the worst ideas and history programming

119
00:05:07,160 --> 00:05:09,740
languages can be found in JavaScript and

120
00:05:09,740 --> 00:05:11,479
this is a direct consequence of the

121
00:05:11,479 --> 00:05:13,370
language having been designed in about

122
00:05:13,370 --> 00:05:16,580
ten days I challenge any language

123
00:05:16,580 --> 00:05:19,310
designer it's not engineering it's a

124
00:05:19,310 --> 00:05:23,330
quickfire challenge it's a stunt and

125
00:05:23,330 --> 00:05:25,610
it's amazing that he managed to get as

126
00:05:25,610 --> 00:05:27,740
much goodness into a language given the

127
00:05:27,740 --> 00:05:29,919
amount of time he had to think about it

128
00:05:29,919 --> 00:05:32,419
some people hate JavaScript because the

129
00:05:32,419 --> 00:05:35,570
Dom is so awful um and that's a good

130
00:05:35,570 --> 00:05:37,400
reason to hate the Dom it's not a good

131
00:05:37,400 --> 00:05:40,130
reason to hate JavaScript a lot of

132
00:05:40,130 --> 00:05:41,750
people hate JavaScript because it isn't

133
00:05:41,750 --> 00:05:44,300
C or C sharp as C++ or Python or Ruby

134
00:05:44,300 --> 00:05:46,039
because it isn't a language that they

135
00:05:46,039 --> 00:05:49,969
know and like again what can you do

136
00:05:49,969 --> 00:05:51,860
about that and there's some people hate

137
00:05:51,860 --> 00:05:56,270
JavaScript because it didn't die but it

138
00:05:56,270 --> 00:05:58,550
had good reasons to not die on the other

139
00:05:58,550 --> 00:05:59,599
hand they're good reasons to like

140
00:05:59,599 --> 00:06:02,389
JavaScript it has good parts on the best

141
00:06:02,389 --> 00:06:04,460
parts I've incorporated in a programming

142
00:06:04,460 --> 00:06:06,590
language and the combination of those

143
00:06:06,590 --> 00:06:08,590
parts is absolutely amazing

144
00:06:08,590 --> 00:06:11,960
what JavaScript is fundamentally is a

145
00:06:11,960 --> 00:06:14,479
functional language with dynamic objects

146
00:06:14,479 --> 00:06:17,150
and familiar syntax and if that's all

147
00:06:17,150 --> 00:06:19,039
javascript is it's an amazing

148
00:06:19,039 --> 00:06:21,259
accomplishment and and that's why it

149
00:06:21,259 --> 00:06:24,889
works it scales from beginners to

150
00:06:24,889 --> 00:06:27,800
masters which is very rare it's hard to

151
00:06:27,800 --> 00:06:29,840
make a language which is suitable for

152
00:06:29,840 --> 00:06:32,240
either of those extremes but JavaScript

153
00:06:32,240 --> 00:06:33,949
meets those and everybody in the middle

154
00:06:33,949 --> 00:06:36,860
at the same time that's again an amazing

155
00:06:36,860 --> 00:06:38,860
thing

156
00:06:38,860 --> 00:06:41,210
javascript is especially effective in

157
00:06:41,210 --> 00:06:43,750
event-driven applications which

158
00:06:43,750 --> 00:06:47,650
is a lot of what we're doing functions

159
00:06:47,650 --> 00:06:50,650
with callbacks that's a very easy thing

160
00:06:50,650 --> 00:06:52,840
to express in this language and it is

161
00:06:52,840 --> 00:06:55,240
the right way to write interactive

162
00:06:55,240 --> 00:06:58,510
applications programs in JavaScript can

163
00:06:58,510 --> 00:07:00,420
be significantly smaller than equivalent

164
00:07:00,420 --> 00:07:03,430
programs in other languages but only if

165
00:07:03,430 --> 00:07:05,890
you think in JavaScript you can come to

166
00:07:05,890 --> 00:07:08,890
JavaScript thinking in Java or thinking

167
00:07:08,890 --> 00:07:10,840
in Python and you can actually make a

168
00:07:10,840 --> 00:07:13,570
lot of progress but you're not going to

169
00:07:13,570 --> 00:07:15,040
get the great efficiencies that this

170
00:07:15,040 --> 00:07:16,600
language provides you unless you can

171
00:07:16,600 --> 00:07:21,970
think in JavaScript the language is now

172
00:07:21,970 --> 00:07:25,420
finding success in lots of non browser

173
00:07:25,420 --> 00:07:28,930
venues it's been in desktop applications

174
00:07:28,930 --> 00:07:30,550
for a long time for example most of the

175
00:07:30,550 --> 00:07:32,830
Adobe suite has JavaScript built into it

176
00:07:32,830 --> 00:07:35,590
it's built into operating systems now

177
00:07:35,590 --> 00:07:38,200
their widget systems in both Windows and

178
00:07:38,200 --> 00:07:40,930
Macintosh that use JavaScript it's in

179
00:07:40,930 --> 00:07:44,610
databases now like couchdb lets you run

180
00:07:44,610 --> 00:07:48,100
javascript in the database amazing it's

181
00:07:48,100 --> 00:07:50,380
finding a lot of use in mobile

182
00:07:50,380 --> 00:07:52,419
applications it's finding its way into

183
00:07:52,419 --> 00:07:53,919
consumer electronics there are now

184
00:07:53,919 --> 00:07:55,950
television sets with javascript in them

185
00:07:55,950 --> 00:07:58,570
and perhaps the most interesting thing

186
00:07:58,570 --> 00:08:01,690
is we're now in servers javascript was

187
00:08:01,690 --> 00:08:03,850
in the first commercial web server I

188
00:08:03,850 --> 00:08:05,229
don't know if anybody remembers that the

189
00:08:05,229 --> 00:08:08,550
original netscape livewire server had

190
00:08:08,550 --> 00:08:10,960
server-side javascript the sun

191
00:08:10,960 --> 00:08:12,280
eventually got control of that project

192
00:08:12,280 --> 00:08:13,720
and killed it off replaced it with a

193
00:08:13,720 --> 00:08:17,430
java and that's where j2ee came from but

194
00:08:17,430 --> 00:08:19,870
server-side javascript is back there's a

195
00:08:19,870 --> 00:08:21,460
lot of really interesting work going in

196
00:08:21,460 --> 00:08:27,210
there I'm very encouraged by that so

197
00:08:27,210 --> 00:08:29,320
javascript obviously has a lot of bad

198
00:08:29,320 --> 00:08:31,570
parts so the constantly raises the

199
00:08:31,570 --> 00:08:34,060
question can we make JavaScript a better

200
00:08:34,060 --> 00:08:35,469
language there are certainly good

201
00:08:35,469 --> 00:08:36,880
reasons to want to do that

202
00:08:36,880 --> 00:08:40,870
the difficulty is the web itself once

203
00:08:40,870 --> 00:08:43,539
something gets into the web it's really

204
00:08:43,539 --> 00:08:46,150
hard to change it in particular their

205
00:08:46,150 --> 00:08:48,580
older browsers out there that will

206
00:08:48,580 --> 00:08:50,680
continue to run so you can have a new

207
00:08:50,680 --> 00:08:54,560
language or new versions of language

208
00:08:54,560 --> 00:08:57,019
but the old browsers won't understand it

209
00:08:57,019 --> 00:08:59,360
and so that introduces a lot of pain and

210
00:08:59,360 --> 00:09:02,930
misery for web developers I found that

211
00:09:02,930 --> 00:09:04,189
the most effective way to make

212
00:09:04,189 --> 00:09:06,379
JavaScript a better language is to

213
00:09:06,379 --> 00:09:08,689
simply remove the bad parts and that's a

214
00:09:08,689 --> 00:09:11,990
difficult thing for ACMA to do we can't

215
00:09:11,990 --> 00:09:13,910
easily remove bad parts from the

216
00:09:13,910 --> 00:09:16,249
standard because the bad parts are not

217
00:09:16,249 --> 00:09:19,160
useless parts they're just unnecessary

218
00:09:19,160 --> 00:09:21,470
and dangerous and because they're

219
00:09:21,470 --> 00:09:24,620
unnecessary and dangerous they're widely

220
00:09:24,620 --> 00:09:26,180
used all over the web because that's

221
00:09:26,180 --> 00:09:29,809
sort of the way the web works and you

222
00:09:29,809 --> 00:09:31,579
could argue that the programs that are

223
00:09:31,579 --> 00:09:33,949
written using those bad features deserve

224
00:09:33,949 --> 00:09:38,089
to be broken but a tech now we believe

225
00:09:38,089 --> 00:09:40,160
that we should try to not break the web

226
00:09:40,160 --> 00:09:41,720
and so we can't take those things out

227
00:09:41,720 --> 00:09:44,329
but you can as developers you get to

228
00:09:44,329 --> 00:09:46,309
choose what subset of the language you

229
00:09:46,309 --> 00:09:49,100
want to use so simply by saying I will

230
00:09:49,100 --> 00:09:51,620
not use the bad parts you get to use a

231
00:09:51,620 --> 00:09:54,139
better language and that's a great thing

232
00:09:54,139 --> 00:09:56,389
and to help you do that I wrote a

233
00:09:56,389 --> 00:09:58,519
program called jslint which will read

234
00:09:58,519 --> 00:10:00,949
your programs for you and painfully

235
00:10:00,949 --> 00:10:02,809
point out the cases where you're using

236
00:10:02,809 --> 00:10:04,910
the bad parts I highly recommend you use

237
00:10:04,910 --> 00:10:07,759
jslint part of the bargain that you have

238
00:10:07,759 --> 00:10:10,519
to make with jslint is that you have to

239
00:10:10,519 --> 00:10:12,439
avoid forms that are difficult to

240
00:10:12,439 --> 00:10:15,230
distinguish from common errors which is

241
00:10:15,230 --> 00:10:17,120
something you should be doing anyway you

242
00:10:17,120 --> 00:10:18,939
don't want to be writing programs that

243
00:10:18,939 --> 00:10:23,379
can't be easily distinguished from bugs

244
00:10:23,379 --> 00:10:25,879
the less your program looks like a bug

245
00:10:25,879 --> 00:10:28,660
probably the more likely it isn't buggy

246
00:10:28,660 --> 00:10:31,430
so if you can do that jaslyne can help

247
00:10:31,430 --> 00:10:35,870
you write much better programs so there

248
00:10:35,870 --> 00:10:41,139
are so the ACMA script committee tc39 is

249
00:10:41,139 --> 00:10:43,040
now working on our project called

250
00:10:43,040 --> 00:10:44,929
harmony which could become the next

251
00:10:44,929 --> 00:10:47,629
edition of the language it's difficult

252
00:10:47,629 --> 00:10:49,309
to talk about what's going to be in the

253
00:10:49,309 --> 00:10:51,889
next edition it's irresponsible for a

254
00:10:51,889 --> 00:10:54,740
standards body to pre-announce what's

255
00:10:54,740 --> 00:10:56,449
going to be in a standard before the

256
00:10:56,449 --> 00:10:57,559
static standard has been ratified

257
00:10:57,559 --> 00:10:59,509
because you don't know if it's actually

258
00:10:59,509 --> 00:11:02,629
going to ever happen there are some

259
00:11:02,629 --> 00:11:04,639
things that we're looking at which are

260
00:11:04,639 --> 00:11:06,560
likely to be put in and there

261
00:11:06,560 --> 00:11:09,649
other things that were debating so we'll

262
00:11:09,649 --> 00:11:13,129
go through some of that first we'd like

263
00:11:13,129 --> 00:11:14,990
to correct the block scoped problem as

264
00:11:14,990 --> 00:11:18,290
you may have discovered JavaScript

265
00:11:18,290 --> 00:11:20,420
syntax appears to support block scope

266
00:11:20,420 --> 00:11:23,240
but in fact it doesn't so a block in

267
00:11:23,240 --> 00:11:25,069
javascript is not scoped only functions

268
00:11:25,069 --> 00:11:27,709
have scope so a var which is declared

269
00:11:27,709 --> 00:11:29,749
anywhere is visible everywhere within a

270
00:11:29,749 --> 00:11:33,199
function and it turns out you don't need

271
00:11:33,199 --> 00:11:34,970
block scope in order to write good

272
00:11:34,970 --> 00:11:37,699
programs so that's good but if you think

273
00:11:37,699 --> 00:11:39,259
a language has block scope and it

274
00:11:39,259 --> 00:11:40,939
doesn't then that's a source of errors

275
00:11:40,939 --> 00:11:43,699
and we'd like to fix that so we'll

276
00:11:43,699 --> 00:11:46,040
probably be adding a new left statement

277
00:11:46,040 --> 00:11:48,139
and a Const statement which will replace

278
00:11:48,139 --> 00:11:51,800
the current var statement and those will

279
00:11:51,800 --> 00:11:56,089
respect blocks we're looking at better

280
00:11:56,089 --> 00:11:58,430
support for functions with a variable

281
00:11:58,430 --> 00:12:00,170
number of arguments right now we've got

282
00:12:00,170 --> 00:12:02,600
the arguments array which never worked

283
00:12:02,600 --> 00:12:04,430
right and has some really really bad

284
00:12:04,430 --> 00:12:05,899
implications it's terrible for

285
00:12:05,899 --> 00:12:08,089
performance so we want to get rid of

286
00:12:08,089 --> 00:12:10,850
that and add some new syntax which will

287
00:12:10,850 --> 00:12:12,589
let you deal with variable number of

288
00:12:12,589 --> 00:12:14,240
parameters in a much nicer way so you

289
00:12:14,240 --> 00:12:15,649
don't have to splice the parameters

290
00:12:15,649 --> 00:12:16,970
anymore to get the stuff you want you

291
00:12:16,970 --> 00:12:19,790
can just ask for it and get it now the

292
00:12:19,790 --> 00:12:22,069
problem with both of those things is

293
00:12:22,069 --> 00:12:24,980
that they require new syntax and new

294
00:12:24,980 --> 00:12:29,149
syntax is completely useless if you must

295
00:12:29,149 --> 00:12:31,459
support the older browsers new syntax is

296
00:12:31,459 --> 00:12:34,879
a syntax error on browsers that don't

297
00:12:34,879 --> 00:12:37,540
recognize it you can't if around syntax

298
00:12:37,540 --> 00:12:40,189
means the whole thing doesn't run and

299
00:12:40,189 --> 00:12:42,350
where I work if we get a syntax error on

300
00:12:42,350 --> 00:12:45,079
the page we don't get paid so we can't

301
00:12:45,079 --> 00:12:49,250
tolerate that so the problem that the

302
00:12:49,250 --> 00:12:52,490
major problem is ie6 ie6 is fading very

303
00:12:52,490 --> 00:12:55,490
slowly five years ago I predicted that

304
00:12:55,490 --> 00:12:58,100
it would take five years for ie6 to fade

305
00:12:58,100 --> 00:13:02,360
away it's still here it its market share

306
00:13:02,360 --> 00:13:04,459
has diminish some since then but it's

307
00:13:04,459 --> 00:13:06,230
still hanging on and it looks like it's

308
00:13:06,230 --> 00:13:08,949
going to be hanging on for a lot longer

309
00:13:08,949 --> 00:13:12,050
there are more obsolete versions are

310
00:13:12,050 --> 00:13:17,120
more obsolete ie users out there than

311
00:13:17,120 --> 00:13:19,750
users of opera Safari and chrome

312
00:13:19,750 --> 00:13:22,149
combined so if you're making decisions

313
00:13:22,149 --> 00:13:23,800
about which browsers do we want to

314
00:13:23,800 --> 00:13:25,959
support it's really hard to say we're

315
00:13:25,959 --> 00:13:27,399
going to support opera and Chrome and

316
00:13:27,399 --> 00:13:31,420
Safari and not support ie6 but ie6 comes

317
00:13:31,420 --> 00:13:32,949
with this terrible backward

318
00:13:32,949 --> 00:13:37,060
compatibility burden ie6 is hanging on

319
00:13:37,060 --> 00:13:39,610
basically because we we are allowing it

320
00:13:39,610 --> 00:13:42,189
to hang on because we've done such a

321
00:13:42,189 --> 00:13:44,879
good job of supporting it and keeping it

322
00:13:44,879 --> 00:13:49,930
going it's going and so we can talk

323
00:13:49,930 --> 00:13:51,819
about changing the language and adding

324
00:13:51,819 --> 00:13:53,410
new features and removing the bad

325
00:13:53,410 --> 00:13:55,060
features and correcting all that stuff

326
00:13:55,060 --> 00:13:57,670
but it's just a waste of time as long as

327
00:13:57,670 --> 00:14:02,519
ie6 still has dominant market share so

328
00:14:02,519 --> 00:14:04,660
that's why I come to you and say that

329
00:14:04,660 --> 00:14:08,500
ie6 must die we need to get rid of it

330
00:14:08,500 --> 00:14:13,149
it's causing us a lot of pain and we'll

331
00:14:13,149 --> 00:14:17,860
get back to this in a moment so the one

332
00:14:17,860 --> 00:14:19,839
of the most reported bugs or the most

333
00:14:19,839 --> 00:14:21,790
reported bug in javascript is a

334
00:14:21,790 --> 00:14:24,519
variation of the problem point 1 plus

335
00:14:24,519 --> 00:14:27,540
point 2 is not exactly equal to point 3

336
00:14:27,540 --> 00:14:30,250
which would only be a problem if you're

337
00:14:30,250 --> 00:14:31,839
living on a planet where people use the

338
00:14:31,839 --> 00:14:35,410
decimal system and you know where we are

339
00:14:35,410 --> 00:14:39,759
on one of those planets this is

340
00:14:39,759 --> 00:14:41,589
obviously wrong it's wrong because we

341
00:14:41,589 --> 00:14:43,839
are using the I Triple E binary

342
00:14:43,839 --> 00:14:46,269
floating-point standard and this is not

343
00:14:46,269 --> 00:14:48,160
just wrong in JavaScript it's wrong in

344
00:14:48,160 --> 00:14:50,470
every language that uses it which is

345
00:14:50,470 --> 00:14:52,149
basically every language that was

346
00:14:52,149 --> 00:14:55,899
designed over the last 20 years it was a

347
00:14:55,899 --> 00:14:57,550
bad design choice it was a popular

348
00:14:57,550 --> 00:15:01,629
design choice but we need to get rid of

349
00:15:01,629 --> 00:15:05,699
it we had considered replacing the

350
00:15:05,699 --> 00:15:08,439
JavaScript has one number type and that

351
00:15:08,439 --> 00:15:10,209
turns out to be a huge advantage most

352
00:15:10,209 --> 00:15:11,889
languages come with a lot of member

353
00:15:11,889 --> 00:15:15,189
types basically a call back to assembly

354
00:15:15,189 --> 00:15:18,220
language and most of them work wrong

355
00:15:18,220 --> 00:15:22,149
like most integers if you it's possible

356
00:15:22,149 --> 00:15:24,459
to add two positive numbers and get a

357
00:15:24,459 --> 00:15:25,180
negative result

358
00:15:25,180 --> 00:15:27,459
that's insane how could anybody have

359
00:15:27,459 --> 00:15:29,620
ever thought how could any engineer any

360
00:15:29,620 --> 00:15:31,470
mathematician think that's a good idea

361
00:15:31,470 --> 00:15:34,050
javascript does not have that defect so

362
00:15:34,050 --> 00:15:38,370
hooray for JavaScript I Triple E

363
00:15:38,370 --> 00:15:41,790
proposed another standard for a decimal

364
00:15:41,790 --> 00:15:47,040
floating point type which solves this

365
00:15:47,040 --> 00:15:50,610
problem so that's good but in current

366
00:15:50,610 --> 00:15:52,079
implementations it comes with a

367
00:15:52,079 --> 00:15:55,439
performance penalty of hundreds hundreds

368
00:15:55,439 --> 00:15:57,389
so we couldn't convince any of the

369
00:15:57,389 --> 00:15:59,699
browser makers to implement it so we had

370
00:15:59,699 --> 00:16:02,670
to reject it the reason we were looking

371
00:16:02,670 --> 00:16:04,920
at that format was IBM was saying you

372
00:16:04,920 --> 00:16:08,069
have to use that format we're hoping IBM

373
00:16:08,069 --> 00:16:09,509
will become more reasonable now that we

374
00:16:09,509 --> 00:16:11,189
can consider other decimal formats and

375
00:16:11,189 --> 00:16:14,250
we can go on with something better

376
00:16:14,250 --> 00:16:15,990
there's a lot of interest in making

377
00:16:15,990 --> 00:16:17,430
javascript a better target for

378
00:16:17,430 --> 00:16:19,860
implementation it has become the virtual

379
00:16:19,860 --> 00:16:22,079
language of the web we always thought it

380
00:16:22,079 --> 00:16:24,319
would be the the Java VM or maybe the

381
00:16:24,319 --> 00:16:27,300
the CLR but it turns out javascript is

382
00:16:27,300 --> 00:16:31,980
the common runtime so we've been there's

383
00:16:31,980 --> 00:16:33,870
a lot of interest in adding new features

384
00:16:33,870 --> 00:16:35,730
to the language to make it easier to

385
00:16:35,730 --> 00:16:37,709
compile other languages into JavaScript

386
00:16:37,709 --> 00:16:41,370
for example putting in int so that the

387
00:16:41,370 --> 00:16:42,899
errors that are in other languages can

388
00:16:42,899 --> 00:16:45,060
be more easily reproduced in JavaScript

389
00:16:45,060 --> 00:16:49,199
programs we're probably not going to do

390
00:16:49,199 --> 00:16:51,149
that our first mission has to be to the

391
00:16:51,149 --> 00:16:54,060
web and to the users of the language as

392
00:16:54,060 --> 00:16:57,630
the language but we still feel a lot of

393
00:16:57,630 --> 00:17:00,420
pressure there there's also a lot of

394
00:17:00,420 --> 00:17:01,829
interest in an intermediate

395
00:17:01,829 --> 00:17:04,439
representation the theory being that if

396
00:17:04,439 --> 00:17:07,620
we could right now in JavaScript you

397
00:17:07,620 --> 00:17:11,459
send the source file to the browser it

398
00:17:11,459 --> 00:17:13,740
gets compiled and executed on the

399
00:17:13,740 --> 00:17:15,329
browser if we could send some

400
00:17:15,329 --> 00:17:17,669
intermediate representation then we

401
00:17:17,669 --> 00:17:19,110
don't have to pay for the compilation

402
00:17:19,110 --> 00:17:21,289
step and everything should go faster

403
00:17:21,289 --> 00:17:24,030
Java made it really clear that that just

404
00:17:24,030 --> 00:17:24,720
isn't true

405
00:17:24,720 --> 00:17:26,909
when Java does that in the startup time

406
00:17:26,909 --> 00:17:29,220
for Java applications is appallingly

407
00:17:29,220 --> 00:17:33,030
slow so Java Script actually got that

408
00:17:33,030 --> 00:17:35,159
right and I think will probably continue

409
00:17:35,159 --> 00:17:37,110
to get that right another reason for

410
00:17:37,110 --> 00:17:38,640
having an intermediate representation

411
00:17:38,640 --> 00:17:42,570
for example abstract parse trees would

412
00:17:42,570 --> 00:17:43,830
be that

413
00:17:43,830 --> 00:17:45,840
you'd have a version of the program

414
00:17:45,840 --> 00:17:48,000
which is more easily manipulated and

415
00:17:48,000 --> 00:17:49,920
there might be some value in that

416
00:17:49,920 --> 00:17:51,990
particularly if we used it to create a

417
00:17:51,990 --> 00:17:54,150
macro system we're under a lot of

418
00:17:54,150 --> 00:17:55,470
pressure to add new features to the

419
00:17:55,470 --> 00:17:56,880
language but a lot of those features

420
00:17:56,880 --> 00:17:59,250
would be made unnecessary if we had

421
00:17:59,250 --> 00:18:01,170
macros in the language so essentially

422
00:18:01,170 --> 00:18:03,510
you could define your own language in

423
00:18:03,510 --> 00:18:06,810
the language and then the committee

424
00:18:06,810 --> 00:18:08,010
doesn't have to worry about that stuff

425
00:18:08,010 --> 00:18:10,290
anymore and one way that macros might

426
00:18:10,290 --> 00:18:14,340
work is by working on the syntax trees

427
00:18:14,340 --> 00:18:18,240
so that's something we're looking at we

428
00:18:18,240 --> 00:18:20,130
get a lot of requests for having threads

429
00:18:20,130 --> 00:18:22,470
and I'm pretty confident we will never

430
00:18:22,470 --> 00:18:24,810
do that because threads are evil like

431
00:18:24,810 --> 00:18:26,640
many evils they're sometimes a necessary

432
00:18:26,640 --> 00:18:27,150
evil

433
00:18:27,150 --> 00:18:29,430
and so in operating systems at the

434
00:18:29,430 --> 00:18:31,230
system level it makes sense maybe to

435
00:18:31,230 --> 00:18:32,670
have threads in the system at the

436
00:18:32,670 --> 00:18:35,130
application level it makes no sense at

437
00:18:35,130 --> 00:18:36,540
all you should never have threads in the

438
00:18:36,540 --> 00:18:38,310
application though and I think one of

439
00:18:38,310 --> 00:18:40,620
the design errors of Java was that it's

440
00:18:40,620 --> 00:18:42,660
trying to be a system language and an

441
00:18:42,660 --> 00:18:44,280
application language at the same time

442
00:18:44,280 --> 00:18:45,690
and so threads leaked into the

443
00:18:45,690 --> 00:18:50,550
application level where they're evil one

444
00:18:50,550 --> 00:18:52,320
feature I'd like to get in is tail calls

445
00:18:52,320 --> 00:18:54,540
which is the optimization of the form

446
00:18:54,540 --> 00:18:57,090
where you return the result of calling a

447
00:18:57,090 --> 00:19:00,150
function it turns into a go to basically

448
00:19:00,150 --> 00:19:03,720
so it can make recursion a lot faster

449
00:19:03,720 --> 00:19:08,040
and it can introduce new versions or new

450
00:19:08,040 --> 00:19:10,950
programming models like the continuation

451
00:19:10,950 --> 00:19:13,740
passing style which is a really elegant

452
00:19:13,740 --> 00:19:16,560
and wonderful way to write programs it

453
00:19:16,560 --> 00:19:18,270
comes with a terrible cost though and

454
00:19:18,270 --> 00:19:20,730
the terrible cost is that debugging

455
00:19:20,730 --> 00:19:22,770
becomes more difficult because we

456
00:19:22,770 --> 00:19:24,540
short-circuit these calls turning them

457
00:19:24,540 --> 00:19:26,820
turning them into jumps and so the call

458
00:19:26,820 --> 00:19:31,410
stack is incomplete so you can't look at

459
00:19:31,410 --> 00:19:33,480
how you got here you know you were here

460
00:19:33,480 --> 00:19:35,460
then somehow you got there and there's

461
00:19:35,460 --> 00:19:37,380
no record that the debugger can see that

462
00:19:37,380 --> 00:19:39,440
shows how you got from there to there

463
00:19:39,440 --> 00:19:42,480
that's a huge trade-off and we haven't

464
00:19:42,480 --> 00:19:45,020
figured out how to resolve that yet

465
00:19:45,020 --> 00:19:46,860
there's a lot of interest in making

466
00:19:46,860 --> 00:19:50,280
JavaScript more like other languages my

467
00:19:50,280 --> 00:19:51,840
advice to people who want to be writing

468
00:19:51,840 --> 00:19:53,970
in other languages is write in those

469
00:19:53,970 --> 00:19:55,650
languages I mean there's no reason why

470
00:19:55,650 --> 00:19:56,590
you shouldn't be able to do that

471
00:19:56,590 --> 00:19:58,800
we shouldn't have to make this one

472
00:19:58,800 --> 00:20:01,570
assume all of the features of every

473
00:20:01,570 --> 00:20:03,130
other language I think that's an unfair

474
00:20:03,130 --> 00:20:06,850
burden to put on any language there's a

475
00:20:06,850 --> 00:20:09,450
lot of interest in exciting new features

476
00:20:09,450 --> 00:20:11,980
but it's really easy to go off the rails

477
00:20:11,980 --> 00:20:14,230
with that kind of stuff so in reviewing

478
00:20:14,230 --> 00:20:16,420
those my personal criteria for for

479
00:20:16,420 --> 00:20:18,190
improvements that are worth considering

480
00:20:18,190 --> 00:20:21,690
are changes to the language witching

481
00:20:21,690 --> 00:20:23,590
significantly increase the readability

482
00:20:23,590 --> 00:20:26,170
of programs if we can read programs and

483
00:20:26,170 --> 00:20:28,090
understand what they're doing better

484
00:20:28,090 --> 00:20:30,970
than we can now then that's maybe a

485
00:20:30,970 --> 00:20:34,270
worthwhile thing to do also if we can

486
00:20:34,270 --> 00:20:35,980
significantly increase the productivity

487
00:20:35,980 --> 00:20:39,640
of the programmer so that something that

488
00:20:39,640 --> 00:20:41,500
you'd now do in ten lines you can now do

489
00:20:41,500 --> 00:20:43,780
in one line go yeah that kind of

490
00:20:43,780 --> 00:20:46,900
amplification I like that so taking

491
00:20:46,900 --> 00:20:48,850
something you can do in ten lines and

492
00:20:48,850 --> 00:20:51,190
doing it in nine lines I don't think

493
00:20:51,190 --> 00:20:53,110
that's a win I think that's probably not

494
00:20:53,110 --> 00:20:58,330
worth doing the most important thing and

495
00:20:58,330 --> 00:21:00,430
possibly the only thing I think we

496
00:21:00,430 --> 00:21:02,190
should be considering is security

497
00:21:02,190 --> 00:21:05,740
because the biggest problem in in the

498
00:21:05,740 --> 00:21:08,410
browser platform is its susceptibility

499
00:21:08,410 --> 00:21:12,040
to cross-site scripting attacks there is

500
00:21:12,040 --> 00:21:15,430
no more urgent thing to work on than

501
00:21:15,430 --> 00:21:17,130
that

502
00:21:17,130 --> 00:21:19,450
so cross-site scripting attack means

503
00:21:19,450 --> 00:21:21,040
that an attacker can get some script

504
00:21:21,040 --> 00:21:23,500
onto your page and then he essentially

505
00:21:23,500 --> 00:21:25,780
gets control of everything so what

506
00:21:25,780 --> 00:21:29,680
exactly does he get to do first off the

507
00:21:29,680 --> 00:21:31,420
attacker can request additional scripts

508
00:21:31,420 --> 00:21:33,580
from any server in the world there's the

509
00:21:33,580 --> 00:21:35,710
same origin policy in the browser it

510
00:21:35,710 --> 00:21:37,600
does not restrict his ability to go

511
00:21:37,600 --> 00:21:39,100
anywhere in the world to get more script

512
00:21:39,100 --> 00:21:40,780
it takes only a tiny amount of

513
00:21:40,780 --> 00:21:43,420
JavaScript or a tiny amount of HTML and

514
00:21:43,420 --> 00:21:46,450
you can then load megabytes of

515
00:21:46,450 --> 00:21:49,150
additional programming that can come in

516
00:21:49,150 --> 00:21:52,780
and and complete the attack once it gets

517
00:21:52,780 --> 00:21:55,750
a foothold it can obtain all the

518
00:21:55,750 --> 00:21:58,660
additional script it needs the attacker

519
00:21:58,660 --> 00:22:00,370
can read the document the attacker can

520
00:22:00,370 --> 00:22:03,580
see everything the user can see and also

521
00:22:03,580 --> 00:22:04,810
things they use it can't see you can see

522
00:22:04,810 --> 00:22:07,630
all of the source you can see all the

523
00:22:07,630 --> 00:22:08,840
comments it

524
00:22:08,840 --> 00:22:10,760
can see the hidden fields' and the

525
00:22:10,760 --> 00:22:12,590
values in those fields it sees

526
00:22:12,590 --> 00:22:14,870
everything that was delivered to the

527
00:22:14,870 --> 00:22:16,240
browser

528
00:22:16,240 --> 00:22:19,220
the attacker can make requests of your

529
00:22:19,220 --> 00:22:23,480
server now if you're smart your server

530
00:22:23,480 --> 00:22:25,730
is looking for secret tokens of

531
00:22:25,730 --> 00:22:29,390
authorization which say this is an

532
00:22:29,390 --> 00:22:31,309
authentic request and I will only

533
00:22:31,309 --> 00:22:34,250
respond to these things but the attacker

534
00:22:34,250 --> 00:22:36,440
has access to those same tokens there is

535
00:22:36,440 --> 00:22:39,980
no way you can distinguish honest

536
00:22:39,980 --> 00:22:42,770
requests from evil requests you cannot

537
00:22:42,770 --> 00:22:45,260
tell if you're using SSL and you should

538
00:22:45,260 --> 00:22:48,909
he gets access to your secure channel

539
00:22:48,909 --> 00:22:51,500
your server cannot detect that the

540
00:22:51,500 --> 00:22:52,909
request did not originate with your

541
00:22:52,909 --> 00:22:57,260
application if your server accepts SQL

542
00:22:57,260 --> 00:22:59,210
queries then you have given the attacker

543
00:22:59,210 --> 00:23:01,940
access to your database now if you're

544
00:23:01,940 --> 00:23:04,940
constructing SQL queries using

545
00:23:04,940 --> 00:23:06,110
information that you obtain from the

546
00:23:06,110 --> 00:23:08,600
browser you probably gave him access to

547
00:23:08,600 --> 00:23:11,929
the database it's because SQL was

548
00:23:11,929 --> 00:23:16,340
optimized for SQL injection attacks the

549
00:23:16,340 --> 00:23:17,929
attacker has control over the display

550
00:23:17,929 --> 00:23:19,760
and can request additional information

551
00:23:19,760 --> 00:23:22,299
from the user one common technique when

552
00:23:22,299 --> 00:23:24,649
an important request comes from the

553
00:23:24,649 --> 00:23:28,279
server you ask the user or it comes from

554
00:23:28,279 --> 00:23:29,659
the browser you ask the user to enter

555
00:23:29,659 --> 00:23:31,490
their password on the assumption that

556
00:23:31,490 --> 00:23:32,899
the attacker doesn't know the users

557
00:23:32,899 --> 00:23:34,700
password but the attacker has control

558
00:23:34,700 --> 00:23:36,710
over the display so the attacker can ask

559
00:23:36,710 --> 00:23:38,809
the user what's your password and the

560
00:23:38,809 --> 00:23:44,210
user will tell them because particularly

561
00:23:44,210 --> 00:23:46,549
if you have a site which routinely asks

562
00:23:46,549 --> 00:23:48,470
the user for the password what you're

563
00:23:48,470 --> 00:23:50,750
really doing is training the user to

564
00:23:50,750 --> 00:23:52,820
give up the password anytime anybody

565
00:23:52,820 --> 00:23:55,309
asks because that's just how it works so

566
00:23:55,309 --> 00:23:57,080
it makes it really easy for the attacker

567
00:23:57,080 --> 00:24:00,200
to get at that now browsers today are

568
00:24:00,200 --> 00:24:02,960
coming with a lot of anti-phishing

569
00:24:02,960 --> 00:24:04,490
chrome which is a really nice thing

570
00:24:04,490 --> 00:24:06,169
except most users don't pay any

571
00:24:06,169 --> 00:24:08,299
attention to it but if they are paying

572
00:24:08,299 --> 00:24:09,799
attention to it that chrome will say

573
00:24:09,799 --> 00:24:13,480
this is a legitimate request give it up

574
00:24:13,480 --> 00:24:16,179
the attacker can then send all the

575
00:24:16,179 --> 00:24:18,169
information it has obtained from

576
00:24:18,169 --> 00:24:20,390
scanning the page from querying the user

577
00:24:20,390 --> 00:24:20,840
in

578
00:24:20,840 --> 00:24:23,360
from attacking your database and send it

579
00:24:23,360 --> 00:24:25,130
to any server in the world again the

580
00:24:25,130 --> 00:24:27,470
same origin policy does not restrict his

581
00:24:27,470 --> 00:24:29,570
ability to distribute this ill-gotten

582
00:24:29,570 --> 00:24:33,710
information the browser does not prevent

583
00:24:33,710 --> 00:24:36,440
any of these things now I'm not talking

584
00:24:36,440 --> 00:24:38,240
about bugs you know obviously there are

585
00:24:38,240 --> 00:24:42,020
the web is famous for its bugs and there

586
00:24:42,020 --> 00:24:43,549
been lots of security mishaps but I'm

587
00:24:43,549 --> 00:24:44,809
not talking about that I'm talking about

588
00:24:44,809 --> 00:24:47,720
standards the problems that I'm talking

589
00:24:47,720 --> 00:24:50,330
about are a direct consequence of the

590
00:24:50,330 --> 00:24:52,520
web standards web standards require

591
00:24:52,520 --> 00:24:55,730
these weaknesses if you do not have

592
00:24:55,730 --> 00:24:57,080
these vulnerabilities in your browser

593
00:24:57,080 --> 00:25:00,529
you are not web standards compliant the

594
00:25:00,529 --> 00:25:02,690
web standards are wrong and have to be

595
00:25:02,690 --> 00:25:06,140
fixed the consequences of an attack are

596
00:25:06,140 --> 00:25:08,179
horrible there can be harm to customers

597
00:25:08,179 --> 00:25:11,059
there can be a loss of trust there can

598
00:25:11,059 --> 00:25:13,250
be legal liabilities in some cases there

599
00:25:13,250 --> 00:25:16,010
can be criminal liabilities and it's

600
00:25:16,010 --> 00:25:17,169
just waiting

601
00:25:17,169 --> 00:25:19,909
everybody here is susceptible to these

602
00:25:19,909 --> 00:25:21,649
attacks and it's just a matter of time

603
00:25:21,649 --> 00:25:24,350
before you get clobbered cross-site

604
00:25:24,350 --> 00:25:26,690
scripting attacks were invented in 1995

605
00:25:26,690 --> 00:25:29,390
they were enabled by the Netscape 2

606
00:25:29,390 --> 00:25:31,669
browser have been copied into every

607
00:25:31,669 --> 00:25:34,490
browser since then we have made no

608
00:25:34,490 --> 00:25:36,740
progress on the fundamental problems in

609
00:25:36,740 --> 00:25:39,470
14 years and this is intolerable we've

610
00:25:39,470 --> 00:25:43,700
got to change this so why do we have XSS

611
00:25:43,700 --> 00:25:45,909
what what are the causes of it with it

612
00:25:45,909 --> 00:25:48,919
in any complicated problem that you

613
00:25:48,919 --> 00:25:51,020
can't identify a single cause but these

614
00:25:51,020 --> 00:25:53,480
are the major contributors first the web

615
00:25:53,480 --> 00:25:55,909
stack is way too complicated there are

616
00:25:55,909 --> 00:25:59,320
too many languages like HTTP HTML CSS

617
00:25:59,320 --> 00:26:04,130
JavaScript URLs all with their own

618
00:26:04,130 --> 00:26:08,000
encoding commenting escapement

619
00:26:08,000 --> 00:26:09,770
conventions they can all be nested

620
00:26:09,770 --> 00:26:11,779
inside of each other as a consequence

621
00:26:11,779 --> 00:26:14,090
it's really really hard to look at a

622
00:26:14,090 --> 00:26:15,559
piece of text and determine if it's

623
00:26:15,559 --> 00:26:19,270
benign or not in addition that the

624
00:26:19,270 --> 00:26:22,220
browser's do heroic things to try to

625
00:26:22,220 --> 00:26:25,100
make sense of malformed content they did

626
00:26:25,100 --> 00:26:27,230
that early on to gain market share so

627
00:26:27,230 --> 00:26:33,799
that incompetent webmasters would

628
00:26:33,799 --> 00:26:39,320
not make them look bad but today those

629
00:26:39,320 --> 00:26:41,869
features really benefit nobody except

630
00:26:41,869 --> 00:26:43,549
the bad guys but they're still there and

631
00:26:43,549 --> 00:26:46,789
are now being institutionalized in html5

632
00:26:46,789 --> 00:26:49,549
we have dependence on template based web

633
00:26:49,549 --> 00:26:51,860
frameworks that are optimized for XSS

634
00:26:51,860 --> 00:26:56,379
injection on all of the peas ASP JSP PHP

635
00:26:56,379 --> 00:27:00,049
all these templating systems make it

636
00:27:00,049 --> 00:27:03,440
really easy to insert evil script and

637
00:27:03,440 --> 00:27:05,299
send it back it's possible to use all of

638
00:27:05,299 --> 00:27:08,619
these frameworks correctly but it's much

639
00:27:08,619 --> 00:27:11,090
easier to use them incorrectly and so

640
00:27:11,090 --> 00:27:14,299
that's the way they're often used the

641
00:27:14,299 --> 00:27:16,519
JavaScript global object gives every

642
00:27:16,519 --> 00:27:18,440
scrap of script the same powerful set of

643
00:27:18,440 --> 00:27:21,139
capabilities so all script is the same

644
00:27:21,139 --> 00:27:24,350
on now as bad as the browser is at

645
00:27:24,350 --> 00:27:26,419
security it is a vast improvement over

646
00:27:26,419 --> 00:27:28,700
everything else it's way better than the

647
00:27:28,700 --> 00:27:30,950
desktop in terms of managing the

648
00:27:30,950 --> 00:27:33,340
security of the user

649
00:27:33,340 --> 00:27:37,239
the problem with the browser is that it

650
00:27:37,239 --> 00:27:39,379
does not anticipate that there are

651
00:27:39,379 --> 00:27:41,330
multiple interests on the page more

652
00:27:41,330 --> 00:27:44,830
interests than the user and the site and

653
00:27:44,830 --> 00:27:48,919
that is the the root cause of the cross

654
00:27:48,919 --> 00:27:51,919
side scripting problem so fundamentally

655
00:27:51,919 --> 00:27:54,649
cross-site scripting is a confusion of

656
00:27:54,649 --> 00:27:57,619
interests it's dangerous it needs to be

657
00:27:57,619 --> 00:28:01,519
corrected now solving the XSS problem

658
00:28:01,519 --> 00:28:03,470
should be our number one priority in

659
00:28:03,470 --> 00:28:05,389
looking at web standards we cannot

660
00:28:05,389 --> 00:28:07,399
tolerate web standards that make things

661
00:28:07,399 --> 00:28:11,119
worse which so mashups are

662
00:28:11,119 --> 00:28:13,070
self-inflicted cross-site scripting

663
00:28:13,070 --> 00:28:16,340
attack mashup is an application made up

664
00:28:16,340 --> 00:28:18,559
of programs representing multiple

665
00:28:18,559 --> 00:28:20,659
interests that cooperate together in

666
00:28:20,659 --> 00:28:22,580
order to create some benefit for the

667
00:28:22,580 --> 00:28:24,739
user it's the most interesting thing

668
00:28:24,739 --> 00:28:26,179
we've seen in software development I

669
00:28:26,179 --> 00:28:30,590
think in 20 years but it's not safe yet

670
00:28:30,590 --> 00:28:33,259
because of the cross site scripting

671
00:28:33,259 --> 00:28:36,379
problem turns out advertising is a

672
00:28:36,379 --> 00:28:40,159
mash-up and advertising is the way the

673
00:28:40,159 --> 00:28:43,609
web pays for itself but advertising is

674
00:28:43,609 --> 00:28:45,259
another self-inflicted cross-site

675
00:28:45,259 --> 00:28:46,789
scripting attack and we've seen lots of

676
00:28:46,789 --> 00:28:47,790
cases where

677
00:28:47,790 --> 00:28:49,890
problems in the ad system have caused

678
00:28:49,890 --> 00:28:53,760
sites to get attacked we have made a

679
00:28:53,760 --> 00:28:55,170
little bit of progress on the mashup

680
00:28:55,170 --> 00:28:58,110
problem with the security avec subsets

681
00:28:58,110 --> 00:29:00,270
there are a number of these two of them

682
00:29:00,270 --> 00:29:03,990
are kaha which is a Google system it's

683
00:29:03,990 --> 00:29:06,000
being used heavily at Yahoo and my own

684
00:29:06,000 --> 00:29:08,550
ad safe they're both based on the same

685
00:29:08,550 --> 00:29:10,890
theory but take different approaches to

686
00:29:10,890 --> 00:29:15,930
achieving it kaha translates JavaScript

687
00:29:15,930 --> 00:29:20,220
into JavaScript adding stuff which adds

688
00:29:20,220 --> 00:29:22,110
indirection to access of global

689
00:29:22,110 --> 00:29:24,810
variables inserts runtime checks to make

690
00:29:24,810 --> 00:29:26,280
sure that this doesn't get bound to the

691
00:29:26,280 --> 00:29:27,980
global object things like that

692
00:29:27,980 --> 00:29:30,480
unfortunately that causes a lot of

693
00:29:30,480 --> 00:29:33,320
inconvenience to the developer and can

694
00:29:33,320 --> 00:29:37,230
make the code run more slowly ad safe is

695
00:29:37,230 --> 00:29:39,360
a static verifier it's built into J's

696
00:29:39,360 --> 00:29:42,000
lint it enforces that you're using a

697
00:29:42,000 --> 00:29:44,550
smaller subset of the language which

698
00:29:44,550 --> 00:29:46,140
excludes use of global variables

699
00:29:46,140 --> 00:29:49,200
excludes use of this and limits use of

700
00:29:49,200 --> 00:29:52,170
bracket notation so there's some

701
00:29:52,170 --> 00:29:54,570
inconvenience there but there's no

702
00:29:54,570 --> 00:29:58,260
runtime penalty both work both make it

703
00:29:58,260 --> 00:30:00,750
possible to add third-party code to any

704
00:30:00,750 --> 00:30:02,760
page and have confidence that that

705
00:30:02,760 --> 00:30:04,320
third-party code cannot get out of

706
00:30:04,320 --> 00:30:05,970
control and do all the things I just

707
00:30:05,970 --> 00:30:09,890
described both have informed

708
00:30:09,890 --> 00:30:13,580
Eckman Script fifth edition strict mode

709
00:30:13,580 --> 00:30:16,200
which ACMA script fifth edition was

710
00:30:16,200 --> 00:30:19,740
approved last November features of it

711
00:30:19,740 --> 00:30:21,270
are starting to appear in the newer

712
00:30:21,270 --> 00:30:24,840
browsers now hopefully by the end of the

713
00:30:24,840 --> 00:30:26,760
year we should start seeing it

714
00:30:26,760 --> 00:30:30,930
completely implemented es5 strict makes

715
00:30:30,930 --> 00:30:33,810
it possible to have static verification

716
00:30:33,810 --> 00:30:36,060
of third-party code without over

717
00:30:36,060 --> 00:30:37,560
constraining the programming model so

718
00:30:37,560 --> 00:30:39,690
basically we get the best of kaha and

719
00:30:39,690 --> 00:30:41,220
add safe where we can do static

720
00:30:41,220 --> 00:30:45,450
validation on some guest code but

721
00:30:45,450 --> 00:30:47,430
allowed to use a much larger fragment of

722
00:30:47,430 --> 00:30:51,180
the language there's still a lot of work

723
00:30:51,180 --> 00:30:54,300
left to do yes five strict does not

724
00:30:54,300 --> 00:30:56,850
protect pages from cross-site scripting

725
00:30:56,850 --> 00:30:58,380
injections so that's still a

726
00:30:58,380 --> 00:31:01,199
vulnerability we still need to fix that

727
00:31:01,199 --> 00:31:02,969
it can protect the page from widgets but

728
00:31:02,969 --> 00:31:04,469
it cannot protect the widgets from the

729
00:31:04,469 --> 00:31:06,449
page so that means you can't put a

730
00:31:06,449 --> 00:31:10,070
banking widget where or an add-on to a

731
00:31:10,070 --> 00:31:12,449
potentially dangerous page so that's

732
00:31:12,449 --> 00:31:15,929
still a problem but it is an important

733
00:31:15,929 --> 00:31:18,299
step toward a programming model in which

734
00:31:18,299 --> 00:31:20,729
multiple interests can cooperate for the

735
00:31:20,729 --> 00:31:22,679
users benefit without compromising each

736
00:31:22,679 --> 00:31:28,109
other or the user so again ie6 must die

737
00:31:28,109 --> 00:31:31,919
because we can't use any of this es 5

738
00:31:31,919 --> 00:31:34,139
strict mode doesn't do us any good if

739
00:31:34,139 --> 00:31:36,479
people are still running ie6 because it

740
00:31:36,479 --> 00:31:39,299
will never have us 5 on it so we have to

741
00:31:39,299 --> 00:31:43,769
get rid of ie6 the the right thing to do

742
00:31:43,769 --> 00:31:47,789
would be to have everybody look at what

743
00:31:47,789 --> 00:31:49,679
browser is coming to them and if it's

744
00:31:49,679 --> 00:31:53,219
ie6 send them to a page saying here are

745
00:31:53,219 --> 00:31:54,779
five new browsers that you can download

746
00:31:54,779 --> 00:31:56,999
in their free go and do one of those and

747
00:31:56,999 --> 00:32:00,179
come back right now nobody is doing that

748
00:32:00,179 --> 00:32:03,179
because basically Google doesn't want to

749
00:32:03,179 --> 00:32:05,399
be sending its ie6 users to Bing and

750
00:32:05,399 --> 00:32:07,379
Amazon doesn't want to be sending them

751
00:32:07,379 --> 00:32:08,429
to Barnes & Noble

752
00:32:08,429 --> 00:32:11,039
so we all have to agree to do it at the

753
00:32:11,039 --> 00:32:15,719
same time and I proposed the day we do

754
00:32:15,719 --> 00:32:19,519
that is 30 days after es5 is complete in

755
00:32:19,519 --> 00:32:23,190
all five browsers that day is not far

756
00:32:23,190 --> 00:32:35,949
away and when that day happens ie6 dies

757
00:32:35,959 --> 00:32:41,789
um now es5 strict does not solve the XSS

758
00:32:41,789 --> 00:32:44,279
problem that's still there it only works

759
00:32:44,279 --> 00:32:46,859
for good guy code code that we invited

760
00:32:46,859 --> 00:32:48,269
onto the page code that we did not

761
00:32:48,269 --> 00:32:49,649
invite is still there and it's still

762
00:32:49,649 --> 00:32:53,629
dangerous so we still need to fix that

763
00:32:53,629 --> 00:32:57,149
and we're looking at doing things in the

764
00:32:57,149 --> 00:32:59,909
next edition of Vecna script that will

765
00:32:59,909 --> 00:33:01,259
solve that getting rid of the global

766
00:33:01,259 --> 00:33:03,839
object entirely stuff like that but we

767
00:33:03,839 --> 00:33:06,029
also have to fix the Dom fixing Xmas

768
00:33:06,029 --> 00:33:07,679
script and not fixing the Dom doesn't

769
00:33:07,679 --> 00:33:11,700
accomplish anything so I don't want to

770
00:33:11,700 --> 00:33:14,020
risk anybody in these bubbles but

771
00:33:14,020 --> 00:33:16,390
the DOM is an awful API is anyone

772
00:33:16,390 --> 00:33:20,380
discovered that yet it inflicts

773
00:33:20,380 --> 00:33:22,990
tremendous pain on developers and it

774
00:33:22,990 --> 00:33:25,840
enables XSS attacks it's bad it's got to

775
00:33:25,840 --> 00:33:31,270
go so that brings us to html5 html5 is a

776
00:33:31,270 --> 00:33:34,030
big step in the wrong direction there's

777
00:33:34,030 --> 00:33:38,800
a lot of stuff in html5 but security was

778
00:33:38,800 --> 00:33:40,720
not solving the cross side scripting

779
00:33:40,720 --> 00:33:42,970
problem was not one of the goals of

780
00:33:42,970 --> 00:33:45,730
html5 they did not accomplish it I think

781
00:33:45,730 --> 00:33:47,020
instead they make matters significantly

782
00:33:47,020 --> 00:33:49,420
worse and they make things worse in

783
00:33:49,420 --> 00:33:50,290
three ways

784
00:33:50,290 --> 00:33:53,920
first html5 is complicated complexity is

785
00:33:53,920 --> 00:33:56,950
the enemy of security they significantly

786
00:33:56,950 --> 00:33:58,809
increase the size of the attack surface

787
00:33:58,809 --> 00:34:00,010
which is going to make it even easier

788
00:34:00,010 --> 00:34:02,830
now for the evildoers to hide their

789
00:34:02,830 --> 00:34:05,650
stuff and get it in their second when

790
00:34:05,650 --> 00:34:09,310
the attackers are in there they get more

791
00:34:09,310 --> 00:34:10,869
capabilities because they get to take

792
00:34:10,869 --> 00:34:12,070
advantage of all the new stuff that

793
00:34:12,070 --> 00:34:14,710
html5 provides which cannot be

794
00:34:14,710 --> 00:34:16,780
restricted from the attackers and so

795
00:34:16,780 --> 00:34:18,280
they get access to your local database

796
00:34:18,280 --> 00:34:20,109
they now have sockets they now have

797
00:34:20,109 --> 00:34:22,359
inter-process communication they can do

798
00:34:22,359 --> 00:34:24,369
a lot more bad stuff and they used to be

799
00:34:24,369 --> 00:34:28,720
able to do third html5 is going to take

800
00:34:28,720 --> 00:34:30,940
a long time to complete because it's so

801
00:34:30,940 --> 00:34:35,320
bloated and grotesquely big so if the

802
00:34:35,320 --> 00:34:36,820
solution to this problem has to wait

803
00:34:36,820 --> 00:34:39,550
till HTML six how many years do we have

804
00:34:39,550 --> 00:34:41,490
to wait before we can start work on that

805
00:34:41,490 --> 00:34:44,919
so I think we need to do a reset on

806
00:34:44,919 --> 00:34:47,800
html5 I recommend that we throw the

807
00:34:47,800 --> 00:34:50,139
current html5 proposal out and start

808
00:34:50,139 --> 00:34:53,889
over from scratch we start with a new

809
00:34:53,889 --> 00:34:55,840
charter which makes the timely solution

810
00:34:55,840 --> 00:34:58,180
of the XSS problem the highest priority

811
00:34:58,180 --> 00:35:01,270
and the old html5 set can be mined for

812
00:35:01,270 --> 00:35:03,550
good ideas as long as they do not

813
00:35:03,550 --> 00:35:08,500
undermine the prime objective so my

814
00:35:08,500 --> 00:35:10,180
proposal for the next browser standard

815
00:35:10,180 --> 00:35:13,510
is that it have two modes in it first

816
00:35:13,510 --> 00:35:15,580
the compatibility mode which contains

817
00:35:15,580 --> 00:35:19,390
HTML 4 and Ekman script 5 and that's

818
00:35:19,390 --> 00:35:21,340
there to support the old application so

819
00:35:21,340 --> 00:35:23,970
that we can have continuity on the web

820
00:35:23,970 --> 00:35:26,440
more importantly it's got a new opt-in

821
00:35:26,440 --> 00:35:27,520
safe mode

822
00:35:27,520 --> 00:35:31,000
that has a new HTML language which has

823
00:35:31,000 --> 00:35:33,490
Ekman script six or seven or whatever

824
00:35:33,490 --> 00:35:36,280
the next number turns out to be and a

825
00:35:36,280 --> 00:35:39,150
new Dom and I recommend that the new Dom

826
00:35:39,150 --> 00:35:41,619
should look like an ajax library because

827
00:35:41,619 --> 00:35:44,020
the old Dom doesn't really work it's up

828
00:35:44,020 --> 00:35:46,090
the wrong level of abstraction Ajax

829
00:35:46,090 --> 00:35:50,410
libraries are wonderful the current Ajax

830
00:35:50,410 --> 00:35:51,580
libraries were not designed for

831
00:35:51,580 --> 00:35:54,820
capability security but I think we can

832
00:35:54,820 --> 00:35:56,140
take the things we've learned from the

833
00:35:56,140 --> 00:35:58,240
Ajax libraries and make one that's good

834
00:35:58,240 --> 00:36:02,850
easy to use powerful expressive and safe

835
00:36:02,850 --> 00:36:05,440
now a lot of people despair when you

836
00:36:05,440 --> 00:36:07,240
talk about security because nothing has

837
00:36:07,240 --> 00:36:11,170
ever worked you know there is security

838
00:36:11,170 --> 00:36:12,940
by inconvenience which you see at the

839
00:36:12,940 --> 00:36:16,980
airport where they qsr like cattle and

840
00:36:16,980 --> 00:36:20,280
it's provably

841
00:36:20,280 --> 00:36:23,590
inadequate it does not work but they

842
00:36:23,590 --> 00:36:25,570
make us take our shoes off anyway

843
00:36:25,570 --> 00:36:28,090
because they have to have the appearance

844
00:36:28,090 --> 00:36:30,850
that they're doing something that turns

845
00:36:30,850 --> 00:36:33,930
out doesn't work in computer systems

846
00:36:33,930 --> 00:36:37,300
we've seen secured security by obscurity

847
00:36:37,300 --> 00:36:39,850
which doesn't work we've seen confusion

848
00:36:39,850 --> 00:36:41,650
of identity that if somehow we know who

849
00:36:41,650 --> 00:36:43,150
everybody is then we can make good

850
00:36:43,150 --> 00:36:44,890
decisions about security that turns out

851
00:36:44,890 --> 00:36:48,190
not to work so we're reduced to security

852
00:36:48,190 --> 00:36:49,810
by vigilance which means you have to be

853
00:36:49,810 --> 00:36:51,670
aware of every potential thing that can

854
00:36:51,670 --> 00:36:54,640
go wrong and actively work against that

855
00:36:54,640 --> 00:36:56,770
now the corpus of things that can go

856
00:36:56,770 --> 00:36:59,500
wrong in the browser platform is way too

857
00:36:59,500 --> 00:37:03,220
big for developers to manage we're

858
00:37:03,220 --> 00:37:05,710
constantly learning new things that are

859
00:37:05,710 --> 00:37:07,359
wrong with the browser and expecting

860
00:37:07,359 --> 00:37:08,950
everybody to stay current is just

861
00:37:08,950 --> 00:37:10,600
impossible so we've gone to

862
00:37:10,600 --> 00:37:11,980
specializations and now we have

863
00:37:11,980 --> 00:37:14,170
computers but our security specialists

864
00:37:14,170 --> 00:37:16,960
and the developers but that doesn't work

865
00:37:16,960 --> 00:37:18,100
either because it's too difficult

866
00:37:18,100 --> 00:37:20,590
because now the developers are not

867
00:37:20,590 --> 00:37:22,619
responsible for security someone else is

868
00:37:22,619 --> 00:37:26,200
and it just doesn't work it turns out

869
00:37:26,200 --> 00:37:27,940
everybody needs to be responsible for

870
00:37:27,940 --> 00:37:29,980
security but in order for that to work

871
00:37:29,980 --> 00:37:32,230
that the whole process has to get

872
00:37:32,230 --> 00:37:36,040
simpler the good news is that I think

873
00:37:36,040 --> 00:37:38,170
security can fall out of good software

874
00:37:38,170 --> 00:37:41,170
design it turns out really good software

875
00:37:41,170 --> 00:37:44,200
is also secure software and if security

876
00:37:44,200 --> 00:37:46,330
becomes part of your design model then

877
00:37:46,330 --> 00:37:52,690
it it's a lot easier to manage so I'm

878
00:37:52,690 --> 00:37:54,370
going to share with you a model of

879
00:37:54,370 --> 00:37:56,860
computer security based on information

880
00:37:56,860 --> 00:37:59,890
hiding information hiding means

881
00:37:59,890 --> 00:38:01,630
need-to-know

882
00:38:01,630 --> 00:38:03,760
I highly recommend that you go to Yahoo

883
00:38:03,760 --> 00:38:06,970
in Google for this paper David Parnas on

884
00:38:06,970 --> 00:38:09,340
the criteria to be used in decomposing

885
00:38:09,340 --> 00:38:10,990
systems into modules it's an old paper

886
00:38:10,990 --> 00:38:13,270
it's from 72 it's one of the software

887
00:38:13,270 --> 00:38:15,340
engineering classics you really need to

888
00:38:15,340 --> 00:38:19,000
read this paper um parts of it are dated

889
00:38:19,000 --> 00:38:21,760
for example he he says that you

890
00:38:21,760 --> 00:38:23,800
shouldn't do flow charting when he wrote

891
00:38:23,800 --> 00:38:25,480
the paper everybody did flow charting

892
00:38:25,480 --> 00:38:27,700
that was the way we were told to design

893
00:38:27,700 --> 00:38:30,640
software we don't do it today because of

894
00:38:30,640 --> 00:38:33,460
this paper you know so the things in

895
00:38:33,460 --> 00:38:35,350
this paper that are dated are because

896
00:38:35,350 --> 00:38:38,650
the paper was so good so you need to

897
00:38:38,650 --> 00:38:42,280
read that um taking the stuff that

898
00:38:42,280 --> 00:38:45,670
Parnassus suggests and taking it forward

899
00:38:45,670 --> 00:38:48,490
a reference to an object or a reference

900
00:38:48,490 --> 00:38:50,860
to a function becomes a capability the

901
00:38:50,860 --> 00:38:53,560
right to interact with that function or

902
00:38:53,560 --> 00:38:56,470
object and that becomes the basis of

903
00:38:56,470 --> 00:38:58,660
security so now we're not just doing

904
00:38:58,660 --> 00:38:59,800
information hiding we're doing

905
00:38:59,800 --> 00:39:02,320
capability hiding and distributing

906
00:39:02,320 --> 00:39:05,070
capabilities but on a need to do basis

907
00:39:05,070 --> 00:39:08,410
um so in an object capability system

908
00:39:08,410 --> 00:39:10,660
which is what we're evolving ECMO script

909
00:39:10,660 --> 00:39:12,160
into they're exactly three ways to

910
00:39:12,160 --> 00:39:15,850
obtain a reference by creation by

911
00:39:15,850 --> 00:39:18,310
construction and by introduction so by

912
00:39:18,310 --> 00:39:19,870
creation means that if a function

913
00:39:19,870 --> 00:39:23,140
creates an object it gets a reference to

914
00:39:23,140 --> 00:39:26,460
that object and that's just necessary

915
00:39:26,460 --> 00:39:28,840
construction means that an object may be

916
00:39:28,840 --> 00:39:30,550
endowed by its constructor with

917
00:39:30,550 --> 00:39:32,530
references that this could include

918
00:39:32,530 --> 00:39:34,750
references in the Constructors context

919
00:39:34,750 --> 00:39:37,660
and inherited references and then three

920
00:39:37,660 --> 00:39:39,720
the interesting one is by introduction

921
00:39:39,720 --> 00:39:42,250
so here we've got three functions a B

922
00:39:42,250 --> 00:39:46,540
and C a has references to B and C B and

923
00:39:46,540 --> 00:39:48,050
C do not

924
00:39:48,050 --> 00:39:51,350
but it's an eighth interest for B to be

925
00:39:51,350 --> 00:39:54,620
able to call C so a does an introduction

926
00:39:54,620 --> 00:39:59,060
a calls be passing it as a parameter a

927
00:39:59,060 --> 00:40:02,060
reference to C and when that call

928
00:40:02,060 --> 00:40:05,420
completes B now has the ability to call

929
00:40:05,420 --> 00:40:08,480
C it has the capability to call C so

930
00:40:08,480 --> 00:40:10,130
that's why the style of security is

931
00:40:10,130 --> 00:40:13,190
called capability security this is

932
00:40:13,190 --> 00:40:14,600
really simple stuff I mean you do this

933
00:40:14,600 --> 00:40:16,070
stuff all the time this is what happens

934
00:40:16,070 --> 00:40:18,110
with callbacks this is what happens when

935
00:40:18,110 --> 00:40:21,080
you store a function into an object it

936
00:40:21,080 --> 00:40:22,910
turns out you can build secure systems

937
00:40:22,910 --> 00:40:24,590
out of this stuff if you just put some

938
00:40:24,590 --> 00:40:27,170
constraints on it if references can be

939
00:40:27,170 --> 00:40:29,810
obtained by creation construction and

940
00:40:29,810 --> 00:40:32,030
introduction then you may have a

941
00:40:32,030 --> 00:40:35,210
capability safe system and if references

942
00:40:35,210 --> 00:40:37,370
can be obtained in any other way you do

943
00:40:37,370 --> 00:40:39,080
not have a safe system and that's where

944
00:40:39,080 --> 00:40:39,860
we are today

945
00:40:39,860 --> 00:40:41,480
that's why cross-site scripting attacks

946
00:40:41,480 --> 00:40:45,530
happen so ACMA script is being

947
00:40:45,530 --> 00:40:47,660
transformed into an object capability

948
00:40:47,660 --> 00:40:49,820
language we made some important steps

949
00:40:49,820 --> 00:40:52,730
toward that with es5 strict I expect

950
00:40:52,730 --> 00:40:54,500
will do even better

951
00:40:54,500 --> 00:40:56,000
eventually removing the global object

952
00:40:56,000 --> 00:41:00,430
which is the primary source of of

953
00:41:00,430 --> 00:41:03,200
capability leakage remove that from the

954
00:41:03,200 --> 00:41:09,320
language and we must also transform the

955
00:41:09,320 --> 00:41:11,330
browser into an object capability system

956
00:41:11,330 --> 00:41:13,790
I believe that we can do that in our

957
00:41:13,790 --> 00:41:16,910
lifetimes I think we could even do that

958
00:41:16,910 --> 00:41:18,800
before the decade is out I don't think

959
00:41:18,800 --> 00:41:20,900
it's all that hard we just need to make

960
00:41:20,900 --> 00:41:24,500
it our first priority for more

961
00:41:24,500 --> 00:41:27,170
information on on the object capability

962
00:41:27,170 --> 00:41:29,360
programming model I highly recommend

963
00:41:29,360 --> 00:41:30,290
marks tiegler's

964
00:41:30,290 --> 00:41:32,810
talk they gave it at Google last month

965
00:41:32,810 --> 00:41:35,300
you can find it at YouTube the lazy

966
00:41:35,300 --> 00:41:36,980
programmers guide to secure computing

967
00:41:36,980 --> 00:41:41,420
really really good talk so now in

968
00:41:41,420 --> 00:41:43,100
conclusion the web is important enough

969
00:41:43,100 --> 00:41:46,460
to fix html5 does not fix the web I

970
00:41:46,460 --> 00:41:48,100
think it makes it worse

971
00:41:48,100 --> 00:41:52,120
we need to reset html5 and start over

972
00:41:52,120 --> 00:42:02,880
thank you and good night

973
00:42:02,890 --> 00:42:05,660
so are we doing questions we do

974
00:42:05,660 --> 00:42:10,790
questions yeah okay yes so I'm

975
00:42:10,790 --> 00:42:11,960
interested in what you're saying about

976
00:42:11,960 --> 00:42:14,300
trying to solve XSS but you seem to be

977
00:42:14,300 --> 00:42:16,730
kind of putting two issues together

978
00:42:16,730 --> 00:42:19,930
there's in a mash-up you have code and

979
00:42:19,930 --> 00:42:22,849
resources from multiple sources multiple

980
00:42:22,849 --> 00:42:25,580
interests and you want to shelter them

981
00:42:25,580 --> 00:42:27,290
from each other so they can't interfere

982
00:42:27,290 --> 00:42:29,210
that's a very noble goal but as somebody

983
00:42:29,210 --> 00:42:31,250
who professionally broke into a web app

984
00:42:31,250 --> 00:42:33,020
for eight years like it's like the main

985
00:42:33,020 --> 00:42:35,390
way we dead end is through in motivation

986
00:42:35,390 --> 00:42:39,050
we inject code in and so we are in the

987
00:42:39,050 --> 00:42:41,390
interest of the application so doing

988
00:42:41,390 --> 00:42:42,859
things like removing the global object

989
00:42:42,859 --> 00:42:45,619
or this kind of sequestering it doesn't

990
00:42:45,619 --> 00:42:47,390
happen we get around it does matter in

991
00:42:47,390 --> 00:42:49,910
the capability model you could sneak

992
00:42:49,910 --> 00:42:52,849
some new text in there but that text you

993
00:42:52,849 --> 00:42:54,859
know each of those pieces of text is

994
00:42:54,859 --> 00:42:56,390
going to be a separate compilation unit

995
00:42:56,390 --> 00:42:58,160
will not have access to the global

996
00:42:58,160 --> 00:43:01,310
object so um if anything could cause it

997
00:43:01,310 --> 00:43:03,830
to run it'll run but it cannot

998
00:43:03,830 --> 00:43:05,660
communicate with anything else on the

999
00:43:05,660 --> 00:43:09,050
page so but a lot of times what

1000
00:43:09,050 --> 00:43:10,970
cross-site scripting attacks can do is

1001
00:43:10,970 --> 00:43:12,800
not necessarily steal information from

1002
00:43:12,800 --> 00:43:14,990
the page for example you can use making

1003
00:43:14,990 --> 00:43:17,900
image requests and on error and onload

1004
00:43:17,900 --> 00:43:19,730
actually ports and internal networks

1005
00:43:19,730 --> 00:43:21,440
right I'm saying it doesn't get access

1006
00:43:21,440 --> 00:43:23,210
to those because those are on the global

1007
00:43:23,210 --> 00:43:25,160
object it can't see them so what would

1008
00:43:25,160 --> 00:43:27,890
be the model of saying this or this

1009
00:43:27,890 --> 00:43:30,740
operation unit how do you I'm saying all

1010
00:43:30,740 --> 00:43:32,839
compilation units nothing has access to

1011
00:43:32,839 --> 00:43:37,339
the global environment so the page can

1012
00:43:37,339 --> 00:43:40,310
then explicitly introduce each of the

1013
00:43:40,310 --> 00:43:41,869
compilation units that it wants to have

1014
00:43:41,869 --> 00:43:45,770
access to those capabilities but nothing

1015
00:43:45,770 --> 00:43:47,900
gets those capabilities by default and

1016
00:43:47,900 --> 00:43:50,420
if there's code on the page that the

1017
00:43:50,420 --> 00:43:52,760
page is unaware of it doesn't have the

1018
00:43:52,760 --> 00:43:54,980
capability to give it an introduction so

1019
00:43:54,980 --> 00:43:57,890
that page is necessarily isolated or

1020
00:43:57,890 --> 00:44:00,500
that code is isolated cannot cause any

1021
00:44:00,500 --> 00:44:05,330
damage

1022
00:44:05,340 --> 00:44:08,290
yes follow up on that a little bit it

1023
00:44:08,290 --> 00:44:10,090
seems like it'd be tricky reconcile with

1024
00:44:10,090 --> 00:44:13,630
having generic code like xmlhttprequest

1025
00:44:13,630 --> 00:44:15,520
that you can use to make a request

1026
00:44:15,520 --> 00:44:17,530
against any string URL that's on the

1027
00:44:17,530 --> 00:44:19,150
current domain so if that got passed you

1028
00:44:19,150 --> 00:44:22,330
got a service to that website right so

1029
00:44:22,330 --> 00:44:23,860
one of the capabilities in the system is

1030
00:44:23,860 --> 00:44:26,290
going to have to be the ability to

1031
00:44:26,290 --> 00:44:30,640
communicate and be able to further

1032
00:44:30,640 --> 00:44:33,730
constrain what you can communicate with

1033
00:44:33,730 --> 00:44:36,730
so having all code instantly being able

1034
00:44:36,730 --> 00:44:38,770
to communicate globally that's probably

1035
00:44:38,770 --> 00:44:42,950
a capability we need to shut down

1036
00:44:42,960 --> 00:44:51,430
anybody else yeah yeah um it's really

1037
00:44:51,430 --> 00:44:53,350
hard to say the html5 committee is

1038
00:44:53,350 --> 00:44:55,710
behaving as though it's a done deal

1039
00:44:55,710 --> 00:44:59,170
w3c appears to be powerless to inject

1040
00:44:59,170 --> 00:45:01,030
any management responsibility or

1041
00:45:01,030 --> 00:45:05,110
discipline on the process so there's

1042
00:45:05,110 --> 00:45:06,700
some view which says it's doomed to

1043
00:45:06,700 --> 00:45:12,010
succeed the thing that could derail it

1044
00:45:12,010 --> 00:45:13,720
is if this community if the web

1045
00:45:13,720 --> 00:45:16,270
community stands up and says no this is

1046
00:45:16,270 --> 00:45:18,070
not responsive to our problems we need

1047
00:45:18,070 --> 00:45:18,850
something better

1048
00:45:18,850 --> 00:45:27,820
I think w3c would listen to that yes as

1049
00:45:27,820 --> 00:45:30,370
far as the beaches of they were looking

1050
00:45:30,370 --> 00:45:33,280
for I mentioned very attic functions is

1051
00:45:33,280 --> 00:45:35,790
there any support method

1052
00:45:35,790 --> 00:45:38,410
yeah we are looking very carefully at

1053
00:45:38,410 --> 00:45:41,080
that that turns out to be a useful

1054
00:45:41,080 --> 00:45:42,910
capability pattern you have an object

1055
00:45:42,910 --> 00:45:46,710
that wants to be able to relay requests

1056
00:45:46,710 --> 00:45:50,260
filtering some and passing through

1057
00:45:50,260 --> 00:45:51,670
others and so having that kind of

1058
00:45:51,670 --> 00:45:56,780
mechanism is going to be very important

