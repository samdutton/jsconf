1
00:00:02,500 --> 00:00:06,450
Values Influence Practices
By

2
00:00:30,900 --> 00:00:31,900
[ Applause ]
>> All right.

3
00:00:31,900 --> 00:00:32,900
Thanks for coming.

4
00:00:32,900 --> 00:00:38,190
I continue this theme of speaking about community,
but I look at it from a different perspective.

5
00:00:38,190 --> 00:00:43,600
We look at the culture of communities in terms
of norms and values that are established in

6
00:00:43,600 --> 00:00:51,399
communities and how in different communities
have usually fairly cohesive values and practices,

7
00:00:51,399 --> 00:00:55,080
but among different communities you see huge
differences.

8
00:00:55,080 --> 00:00:59,900
And I want to talk about some of those effects
and what you can learn from looking into other

9
00:00:59,900 --> 00:01:00,960
communities.

10
00:01:00,960 --> 00:01:04,699
This is joint with Chris, Anna, James and
Ferdian.

11
00:01:04,699 --> 00:01:09,350
I'm at Carnegie Mellon University.

12
00:01:09,350 --> 00:01:12,630
This is not with experience.

13
00:01:12,630 --> 00:01:16,000
I don't have much experience with JavaScript
to be honest.

14
00:01:16,000 --> 00:01:18,670
This is from an outsider's perspective.

15
00:01:18,670 --> 00:01:29,450
We study ecosystems as an outsider, and we
hope we have an idea of comparing ecosystems

16
00:01:29,450 --> 00:01:31,310
learning about this from the outside.

17
00:01:31,310 --> 00:01:37,221
And we have been looking into this as a research
project which we called breaking APIs for

18
00:01:37,221 --> 00:01:41,860
the last couple of years and we have a Twitter
account and web page based on this that I'm

19
00:01:41,860 --> 00:01:45,680
going to advertise a little bit later.

20
00:01:45,680 --> 00:01:48,390
So we looked broadly at ecosystems.

21
00:01:48,390 --> 00:01:59,470
And they form around platforms and products
where you have a network structure of dependencies.

22
00:01:59,470 --> 00:02:04,170
You can depend on a package, and that package
can depend on other packages.

23
00:02:04,170 --> 00:02:10,020
And you have many of those communities around
in different languages and different products.

24
00:02:10,020 --> 00:02:16,060
The main point of this talk is that the culture
of the ecosystem matters.

25
00:02:16,060 --> 00:02:21,260
There are lots of different values, different
ecosystems adopt different values.

26
00:02:21,260 --> 00:02:23,890
Different things are more important than other
things.

27
00:02:23,890 --> 00:02:26,680
And leads to different tradeoffs.

28
00:02:26,680 --> 00:02:29,730
You can't achieve everything perfectly.

29
00:02:29,730 --> 00:02:33,420
Some communities favor some things over others.

30
00:02:33,420 --> 00:02:38,190
And following this, different cost allocations,
some people have an easier time.

31
00:02:38,190 --> 00:02:44,680
People are new to an ecosystem or people establish
or put into an ecosystem.

32
00:02:44,680 --> 00:02:49,489
And you often see consequences in terms of
what we call ecosystem health.

33
00:02:49,489 --> 00:02:54,590
So are there specific problems that you see
in ecosystems, like it's hard to retain developers

34
00:02:54,590 --> 00:02:55,709
in this ecosystem?

35
00:02:55,709 --> 00:03:00,460
Or a lot of packages are generally considered
low quality, things like that.

36
00:03:00,460 --> 00:03:03,870
And why would you want to learn about this?

37
00:03:03,870 --> 00:03:07,500
There are lots of different issues where this
might be interesting.

38
00:03:07,500 --> 00:03:11,540
Let's say you want to change a policy or introduce
a new policy.

39
00:03:11,540 --> 00:03:17,250
Say you want to change the versioning rules
in your ecosystem or the way� how you upload

40
00:03:17,250 --> 00:03:18,250
packages.

41
00:03:18,250 --> 00:03:20,530
Packages need to be reviewed first in some
way.

42
00:03:20,530 --> 00:03:21,830
How you make this decision?

43
00:03:21,830 --> 00:03:23,750
How do you think about those tradeoffs?

44
00:03:23,750 --> 00:03:26,560
How do you decide whether this is a good idea?

45
00:03:26,560 --> 00:03:28,580
What are the consequences based on this?

46
00:03:28,580 --> 00:03:32,510
So understanding the space, understanding
tradeoffs can be a help.

47
00:03:32,510 --> 00:03:35,540
Or you want to fight a health issue.

48
00:03:35,540 --> 00:03:38,810
You have problems retaining and recruiting
new developers.

49
00:03:38,810 --> 00:03:44,489
What design decision in your ecosystem might
be contributing to this?

50
00:03:44,489 --> 00:03:48,690
How can you debug your community to figure
out what to change?

51
00:03:48,690 --> 00:03:50,870
Or design a new community.

52
00:03:50,870 --> 00:03:56,351
I don't think any of us will design the next
npm, but there might be a chance where we

53
00:03:56,351 --> 00:04:02,659
are focusing on sub communities, say Hoodie
or some number of packages where you want

54
00:04:02,659 --> 00:04:04,349
to push specific values.

55
00:04:04,349 --> 00:04:08,410
What can you do to foster goals in one community?

56
00:04:08,410 --> 00:04:13,070
And, again, for this, culture really matters.

57
00:04:13,070 --> 00:04:17,180
It's important to understand the values that�
it's important to understand the tradeoffs.

58
00:04:17,180 --> 00:04:22,370
And we have been doing research on this for
a while.

59
00:04:22,370 --> 00:04:26,520
What I'm going to talk about is mostly based
on interviews and surveys that we have conducted

60
00:04:26,520 --> 00:04:28,620
throughout the last couple of years.

61
00:04:28,620 --> 00:04:32,130
And we looked at this through one specific
lens.

62
00:04:32,130 --> 00:04:34,780
And that's breaking changes.

63
00:04:34,780 --> 00:04:40,310
The idea here is that if you use a package,
there are lots of dependencies often mind

64
00:04:40,310 --> 00:04:43,250
that package and you depend on a number of
packages.

65
00:04:43,250 --> 00:04:47,250
And all of those packages have maintainers,
and they could make just changes to their

66
00:04:47,250 --> 00:04:48,250
packages.

67
00:04:48,250 --> 00:04:49,990
And some of those changes are modular.

68
00:04:49,990 --> 00:04:54,430
So you just update and have the great new
version and everything works fine.

69
00:04:54,430 --> 00:04:57,080
But some of those changes are breaking changes.

70
00:04:57,080 --> 00:04:59,880
So they may change some of their APIs.

71
00:04:59,880 --> 00:05:02,780
So when you update, your code isn't working
anymore.

72
00:05:02,780 --> 00:05:05,710
You have to invest some time, get interrupted.

73
00:05:05,710 --> 00:05:10,830
You need to invest in new code when you want
to migrate.

74
00:05:10,830 --> 00:05:12,340
This can rip through the ecosystem.

75
00:05:12,340 --> 00:05:13,980
It can have consequences.

76
00:05:13,980 --> 00:05:19,990
A single change can affect hundreds of developers
and their packages.

77
00:05:19,990 --> 00:05:22,889
So you can start thinking about costs.

78
00:05:22,889 --> 00:05:25,690
What's the cost of a breaking change in this
sense?

79
00:05:25,690 --> 00:05:30,820
And we think about this as kind of a balance
of who takes cost� it's somewhat an abstract

80
00:05:30,820 --> 00:05:31,910
concept.

81
00:05:31,910 --> 00:05:37,560
But in the extreme case, it's really easy
to make a change and impact hundreds of thousands

82
00:05:37,560 --> 00:05:44,130
of developers out there who all get interrupted
and who all need to invest in doing some rework.

83
00:05:44,130 --> 00:05:49,160
So it makes it really easy for maintainers
to break something and puts the cost on the

84
00:05:49,160 --> 00:05:50,160
users.

85
00:05:50,160 --> 00:05:51,750
That's one extreme.

86
00:05:51,750 --> 00:05:56,770
The opposite extreme would be you refrain
from making a change even though it's really

87
00:05:56,770 --> 00:05:58,740
important to you.

88
00:05:58,740 --> 00:06:00,610
There are lots of reasons for making changes.

89
00:06:00,610 --> 00:06:07,000
Nothing is really ever stable, but if you
are not allowed to make breaking changes,

90
00:06:07,000 --> 00:06:12,680
if you really refrain from this, you're taking
on costs, mostly technical debt, opportunity

91
00:06:12,680 --> 00:06:16,760
costs, maybe have some performance problems
that you could fix with an API change, but

92
00:06:16,760 --> 00:06:18,490
you can't really do that.

93
00:06:18,490 --> 00:06:19,490
Right?

94
00:06:19,490 --> 00:06:24,440
So it be really costly for you and maybe in
the longterm also for your users not to break

95
00:06:24,440 --> 00:06:25,600
anything.

96
00:06:25,600 --> 00:06:31,009
And then there's a lot of passes in the middle
where you kind of, as a maintainer, you break

97
00:06:31,009 --> 00:06:36,530
something, but you try to reduce the cost
for your users by mitigating some of those

98
00:06:36,530 --> 00:06:37,530
changes.

99
00:06:37,530 --> 00:06:43,250
A typical example is you invest some effort
in writing a migration grade to make it easier

100
00:06:43,250 --> 00:06:45,250
for your users to update.

101
00:06:45,250 --> 00:06:49,380
You might synchronize releases with other
packages or on a schedule to make it easier

102
00:06:49,380 --> 00:06:51,520
to make changes and not get interrupted.

103
00:06:51,520 --> 00:07:00,520
And processes like backporting and deprecation,
how you can delay the impact of changes.

104
00:07:00,520 --> 00:07:01,650
So it's not as immediate.

105
00:07:01,650 --> 00:07:05,270
And there are hundreds of those practices.

106
00:07:05,270 --> 00:07:11,370
And, again, what I want to show is that different
communities have different cost allocations,

107
00:07:11,370 --> 00:07:15,860
use different practices, and kind of really
negotiate differently in this space.

108
00:07:15,860 --> 00:07:20,139
So in this talk I'm primarily going to talk
about three ecosystems.

109
00:07:20,139 --> 00:07:22,340
There are many more.

110
00:07:22,340 --> 00:07:27,169
Our web page contains survey data on 18 ecosystems
in total.

111
00:07:27,169 --> 00:07:31,380
But I want to dive in a little bit deeper
on three of those.

112
00:07:31,380 --> 00:07:36,320
And I'm going to start with Eclipse and them
assuming you know less about them than NodeJS.

113
00:07:36,320 --> 00:07:43,730
When I'm talking about those ecosystems, think
about your community and what practices you

114
00:07:43,730 --> 00:07:47,900
do and how this is different from what you
see in those ecosystems.

115
00:07:47,900 --> 00:07:50,080
And think about why.

116
00:07:50,080 --> 00:07:51,629
Is this a good idea?

117
00:07:51,629 --> 00:07:52,629
Should this be different?

118
00:07:52,629 --> 00:07:59,520
Should we copy things that I'm going to show
you Eclipse?

119
00:07:59,520 --> 00:08:04,160
Let's start with Eclipse.

120
00:08:04,160 --> 00:08:06,910
You have probably heard of it.

121
00:08:06,910 --> 00:08:09,270
Originally for Java programming.

122
00:08:09,270 --> 00:08:11,389
Has hundreds of plugins.

123
00:08:11,389 --> 00:08:13,020
These plugins can depend on other plugins.

124
00:08:13,020 --> 00:08:16,160
So you have this ecosystem structure.

125
00:08:16,160 --> 00:08:22,020
And if you look into this community, if you
talk to people, or even if you just look at

126
00:08:22,020 --> 00:08:28,669
their web page, you realize what values are
important in this community.

127
00:08:28,669 --> 00:08:34,060
So one important value is backward compatibility.

128
00:08:34,060 --> 00:08:40,159
They say on their web page extremely explicitly,
as the API prime director, when involving

129
00:08:40,159 --> 00:08:46,560
the component API from release to release,
do not break existing clients, right?

130
00:08:46,560 --> 00:08:48,670
They really focus on stability.

131
00:08:48,670 --> 00:08:50,540
And that's not something that they just say.

132
00:08:50,540 --> 00:08:52,920
This is a culture that they live.

133
00:08:52,920 --> 00:08:55,670
And here I can show you some data from our
survey.

134
00:08:55,670 --> 00:08:58,320
And I'm going to show you more plots like
this.

135
00:08:58,320 --> 00:09:04,920
But how to read this is mostly� so we ask,
how important is stability to your community?

136
00:09:04,920 --> 00:09:08,550
And the higher up they are, the more important
it is.

137
00:09:08,550 --> 00:09:10,250
These are all positive values.

138
00:09:10,250 --> 00:09:14,290
So we ask pretty from a little bit important
to very important.

139
00:09:14,290 --> 00:09:17,240
And most people say, yes, stability is important.

140
00:09:17,240 --> 00:09:22,270
But what you still see are differences among
ecosystems, and we have sorted this by average

141
00:09:22,270 --> 00:09:23,410
rank.

142
00:09:23,410 --> 00:09:28,500
And what you see is that Eclipse is really
on the far end here.

143
00:09:28,500 --> 00:09:35,810
Eclipse is the ecosystem on which developers
rate stability as the most important practice.

144
00:09:35,810 --> 00:09:38,050
Way more than other ecosystems.

145
00:09:38,050 --> 00:09:41,270
And this is consistent� largely consistent
within this community.

146
00:09:41,270 --> 00:09:48,120
So this value that's communicated is actually
accepted by the community and you see consequences.

147
00:09:48,120 --> 00:09:53,529
So when we ask them, for example, about how
often are you making breaking changes?

148
00:09:53,529 --> 00:09:56,910
Or how often are you faced by breaking changes?

149
00:09:56,910 --> 00:10:02,790
You see answers that Eclipse� changes in
other ecosystems.

150
00:10:02,790 --> 00:10:07,010
So this is actually a best practice.

151
00:10:07,010 --> 00:10:10,450
In terms of cost distribution, what I have
shown you in the beginning, this is pretty

152
00:10:10,450 --> 00:10:18,110
much on the extreme side whereas a developer,
you are not allowed to make breaking changes.

153
00:10:18,110 --> 00:10:24,940
Use a lot of work arounds, a lot of creative
hacking and getting around limitations.

154
00:10:24,940 --> 00:10:30,060
And there's the reduction of the impact of
releases.

155
00:10:30,060 --> 00:10:33,250
A fixed schedule, once a year there's a big
release.

156
00:10:33,250 --> 00:10:41,860
And large parts of the community synchronize
and go through a month-long process of checking

157
00:10:41,860 --> 00:10:44,660
things and so on.

158
00:10:44,660 --> 00:10:45,890
So severing a tradeoff.

159
00:10:45,890 --> 00:10:49,120
What can they achieve and what are the problems
here?

160
00:10:49,120 --> 00:10:51,630
So Eclipse is extremely stable.

161
00:10:51,630 --> 00:10:53,399
It's convenient to use.

162
00:10:53,399 --> 00:11:00,600
You can put packets written 13 years ago in
a new version of Eclipse, and they work.

163
00:11:00,600 --> 00:11:05,450
Try doing this with JavaScript packages.

164
00:11:05,450 --> 00:11:08,300
Yearly updates are sufficient for many in
the community.

165
00:11:08,300 --> 00:11:12,920
You don't need to update from week to week
to see the next update.

166
00:11:12,920 --> 00:11:14,950
But this has consequences.

167
00:11:14,950 --> 00:11:21,800
Eclipse is seen by many we spoke to as is
stagnant and staid platform.

168
00:11:21,800 --> 00:11:27,650
They have it without the generics, they couldn't
update those.

169
00:11:27,650 --> 00:11:34,110
And if I take my students as references, I
would say they are not using Eclipse anymore

170
00:11:34,110 --> 00:11:35,110
these days.

171
00:11:35,110 --> 00:11:37,680
So at least in Java, people have switched
to IntelliJ.

172
00:11:37,680 --> 00:11:49,290
Not sure it's a good example, but by that
example Twitter is pretty much dead.

173
00:11:49,290 --> 00:11:52,760
I'm not sure with the students these days.

174
00:11:52,760 --> 00:11:58,840
Eclipse reports that they have difficulty
recruiting and retaining developers�and

175
00:11:58,840 --> 00:12:03,500
that also these coordinated releases are kind
of a pain point for them� for the community.

176
00:12:03,500 --> 00:12:07,790
So they invest a lot of evident, but it's
also painful.

177
00:12:07,790 --> 00:12:10,050
When we ask the question about health.

178
00:12:10,050 --> 00:12:13,760
How much do you face the difficulty of recruiting
new developers?

179
00:12:13,760 --> 00:12:15,870
It's on the far end.

180
00:12:15,870 --> 00:12:21,810
If we ask about how much do you feel limited
in innovating in your ecosystem, it's on the

181
00:12:21,810 --> 00:12:31,940
far end, but on the other side if you ask�
What I have shown you here is one end.

182
00:12:31,940 --> 00:12:36,790
Eclipse has made specific decisions which
I guess you see as very different from your

183
00:12:36,790 --> 00:12:42,709
community and they have accepted certain tradeoffs
and have certain goals with this.

184
00:12:42,709 --> 00:12:49,209
I want to talk about the second ecosystem,
R, kind of the npm for R.

185
00:12:49,209 --> 00:12:53,320
R is a language for statistically computation.

186
00:12:53,320 --> 00:12:59,340
And there are a couple of thousand packages
on CRAN that are usually cutting edge research

187
00:12:59,340 --> 00:13:00,400
and statistics.

188
00:13:00,400 --> 00:13:07,180
So when you interview people in this community
you often speak to physicists or soil analysis,

189
00:13:07,180 --> 00:13:13,709
researchers, retired professors who maintain
some packages in this community.

190
00:13:13,709 --> 00:13:18,209
And they do something pretty interesting about
dependencies and about versioning.

191
00:13:18,209 --> 00:13:20,269
We call it the snapshot consistency.

192
00:13:20,269 --> 00:13:27,220
The goal is the most recent version of all
packages on the ecosystem should be compatible.

193
00:13:27,220 --> 00:13:31,931
So it doesn't matter that the newest version
of package A is compatible with an older version

194
00:13:31,931 --> 00:13:37,829
of package B, it just has to be compatible
with the newest version of package B at this

195
00:13:37,829 --> 00:13:38,829
time.

196
00:13:38,829 --> 00:13:44,710
So at any point you should be able to install
any packages in that ecosystem, update all

197
00:13:44,710 --> 00:13:48,180
at once, and it should be compatible.

198
00:13:48,180 --> 00:13:51,449
So to achieve this, this requires coordination.

199
00:13:51,449 --> 00:13:56,279
So what typically happens here is you are
allowed to break things, but when you break

200
00:13:56,279 --> 00:14:00,959
something, you reach out to people in that
community that are affected.

201
00:14:00,959 --> 00:14:02,140
You coordinate.

202
00:14:02,140 --> 00:14:06,080
And then you typically more or less publish
both packages.

203
00:14:06,080 --> 00:14:08,889
Your package and the affected package at the
same time.

204
00:14:08,889 --> 00:14:10,930
So there's kind of a sliding window.

205
00:14:10,930 --> 00:14:14,550
Typically three or four weeks until you have
to do this.

206
00:14:14,550 --> 00:14:17,220
But as a maintainer you have to react.

207
00:14:17,220 --> 00:14:20,620
There's a threat you can get thrown out.

208
00:14:20,620 --> 00:14:25,600
Your package can be taken over or get thrown
out if you don't react and somebody depends

209
00:14:25,600 --> 00:14:30,620
on you makes a breaking change and you can't
coordinate with them.

210
00:14:30,620 --> 00:14:36,920
To make this work, there's a strong culture
of gatekeeping and enforcement of this.

211
00:14:36,920 --> 00:14:39,720
Some volunteers review changes.

212
00:14:39,720 --> 00:14:42,770
So you don't just upload things as an npm.

213
00:14:42,770 --> 00:14:45,000
But you actually submit your changes.

214
00:14:45,000 --> 00:14:49,320
Somebody review this is, run tests on the
entire ecosystem to see whether something

215
00:14:49,320 --> 00:14:52,220
breaks.

216
00:14:52,220 --> 00:14:55,170
In terms of costs, we have a different picture.

217
00:14:55,170 --> 00:15:00,420
So you can make breaking changes, but you
have to reach out and some volunteers take

218
00:15:00,420 --> 00:15:01,880
on some of the additional costs.

219
00:15:01,880 --> 00:15:06,459
And you cannot have the constant synchronization
here.

220
00:15:06,459 --> 00:15:10,149
In terms of values, it's not quite that obvious
as in Eclipse.

221
00:15:10,149 --> 00:15:13,709
It's not strongly communicated on their web
page.

222
00:15:13,709 --> 00:15:19,060
When we talk to people that are kind of core
members of this community, they say they want

223
00:15:19,060 --> 00:15:23,980
to make it easy for end users to install and
update packages.

224
00:15:23,980 --> 00:15:29,980
And one of our interviews said CRAN primarily
has the academic user in mind who want timely

225
00:15:29,980 --> 00:15:31,860
access to current research.

226
00:15:31,860 --> 00:15:38,360
And this timely access reflects the contrast,
let's say to Eclipse, where you have releases

227
00:15:38,360 --> 00:15:39,820
once a year.

228
00:15:39,820 --> 00:15:44,320
These people are doing research and want to
publish things and get them out there.

229
00:15:44,320 --> 00:15:49,410
It's a review process, but much faster than
yearly rearrests.

230
00:15:49,410 --> 00:15:53,779
interestingly, and I don't have much time
to talk about this, this is a value that's

231
00:15:53,779 --> 00:15:56,870
not communicated on their Website.

232
00:15:56,870 --> 00:15:57,870
It's not transparent.

233
00:15:57,870 --> 00:16:03,230
And if you ask people, rapid access or quick
release is actually not showing up as one

234
00:16:03,230 --> 00:16:06,709
of the key values that the community as a
whole shares.

235
00:16:06,709 --> 00:16:11,660
It's somewhere between Eclipse and bioconducter
that both have yearly releases.

236
00:16:11,660 --> 00:16:20,160
I think that to the developers of the community,
the idea is we want to be faster than the

237
00:16:20,160 --> 00:16:22,610
turnaround than those yearly releases.

238
00:16:22,610 --> 00:16:29,029
But to package maintainers, it's slower than
npm where you can upload things.

239
00:16:29,029 --> 00:16:31,089
You have to go through a review process.

240
00:16:31,089 --> 00:16:36,449
There are certain values where we speculate
they are not communicated well, so people

241
00:16:36,449 --> 00:16:40,320
don't see why the ecosystem is designed this
way.

242
00:16:40,320 --> 00:16:46,160
So, again, there are tradeoffs and costs and
benefits.

243
00:16:46,160 --> 00:16:49,590
So they have relatively short release cycles.

244
00:16:49,590 --> 00:16:50,709
They achieve compatibility.

245
00:16:50,709 --> 00:16:53,649
It's actually pretty good usually at that.

246
00:16:53,649 --> 00:16:59,830
But at the same time, you have this urgency
in� this burden to react to updates.

247
00:16:59,830 --> 00:17:04,159
So, at any time there could be a breaking
change that if you depend on that package

248
00:17:04,159 --> 00:17:10,339
you may need to coordinate, you may get interrupted.

249
00:17:10,339 --> 00:17:16,650
And this leads to other consequences where
people aggressively reduce the number of dependencies

250
00:17:16,650 --> 00:17:20,919
that they want to depend� they would rather
copy and paste code from another package than

251
00:17:20,919 --> 00:17:25,530
being exposed to this change is something
we heard repeatedly.

252
00:17:25,530 --> 00:17:31,140
And this gatekeeping causes additional effort
and causes friction in this community.

253
00:17:31,140 --> 00:17:34,410
So, this is always a contested point.

254
00:17:34,410 --> 00:17:39,789
So, again, I have shown you another example
that's probably very different from what you

255
00:17:39,789 --> 00:17:41,200
know.

256
00:17:41,200 --> 00:17:45,290
And I think I can make this shorter on Node
because, I guess, you know the community much

257
00:17:45,290 --> 00:17:48,480
better there than me.

258
00:17:48,480 --> 00:17:53,220
But my first contact with node was something
like this.

259
00:17:53,220 --> 00:17:54,220
Right?

260
00:17:54,220 --> 00:17:56,370
Last week's tutorial is out of date today.

261
00:17:56,370 --> 00:17:59,280
This is a couple of years ago that I heard
this.

262
00:17:59,280 --> 00:18:02,919
I forgot who the source was.

263
00:18:02,919 --> 00:18:08,330
But then you also saw things like this which
I think is insane, or unique.

264
00:18:08,330 --> 00:18:14,820
That people actually started documenting the
APIs, at least of the Node APIs, with stability

265
00:18:14,820 --> 00:18:15,820
indicators.

266
00:18:15,820 --> 00:18:21,270
They have� it's simpler these days� but
this entire infrastructure about things we

267
00:18:21,270 --> 00:18:22,670
are experimenting with this API.

268
00:18:22,670 --> 00:18:26,820
You can use it, it might change, and at some
point we mark it stable.

269
00:18:26,820 --> 00:18:34,220
So implicitly you can see values of people
open to rapid change and they are open to

270
00:18:34,220 --> 00:18:37,330
experiment with APIs to get things right.

271
00:18:37,330 --> 00:18:40,539
It's a more of innovative community, in a
sense.

272
00:18:40,539 --> 00:18:46,570
I thought design decisions are really trying
to lower the barrier to entry.

273
00:18:46,570 --> 00:18:49,610
It's really easy to publish your first package
on npm.

274
00:18:49,610 --> 00:18:51,740
A really low bar.

275
00:18:51,740 --> 00:18:56,179
Also, you hear this in interviews with Isaac.

276
00:18:56,179 --> 00:19:03,990
And the goal is to make it easy and fast for
developers and publish and use packages.

277
00:19:03,990 --> 00:19:08,799
If you look at stability, Node is not in the
top space.

278
00:19:08,799 --> 00:19:12,900
This is not the value that is most important
in this community.

279
00:19:12,900 --> 00:19:17,370
But if you look at innovation, this is where
Node is at the far end.

280
00:19:17,370 --> 00:19:23,340
Where the community thinks innovation is a
key or is a very important value for us, among

281
00:19:23,340 --> 00:19:25,770
other ones as well.

282
00:19:25,770 --> 00:19:31,530
In terms of costs, though, it's pretty much
on the extreme where it's really easy to just

283
00:19:31,530 --> 00:19:34,740
break something and let other people deal
with it.

284
00:19:34,740 --> 00:19:39,289
The main saving grace is you're not forced
to update, right?

285
00:19:39,289 --> 00:19:44,320
So you can stick to an old version when you
can't really do in CRAN that much.

286
00:19:44,320 --> 00:19:46,150
And Eclipse in way.

287
00:19:46,150 --> 00:19:50,510
You can't really stay behind or partially
stay behind on some packages.

288
00:19:50,510 --> 00:19:51,640
Which is easy here.

289
00:19:51,640 --> 00:19:53,600
So there's some technology behind it.

290
00:19:53,600 --> 00:19:56,510
And there's a bunch of practices around this.

291
00:19:56,510 --> 00:20:02,020
So the semantic versioning is broadly adopted
as signaling what's breaking and what's not

292
00:20:02,020 --> 00:20:03,140
breaking.

293
00:20:03,140 --> 00:20:07,620
This is something that doesn't make sense
to people in CRAN and R. To them version numbers

294
00:20:07,620 --> 00:20:09,720
are just increasing.

295
00:20:09,720 --> 00:20:11,990
You don't try to communicate what's breaking
or not.

296
00:20:11,990 --> 00:20:13,100
It doesn't matter.

297
00:20:13,100 --> 00:20:16,830
The newest version of our packages should
be compatible.

298
00:20:16,830 --> 00:20:22,820
Node or npm has this technology infrastructure
to allow you to use multiple versions of the

299
00:20:22,820 --> 00:20:27,330
same package, which helps you to solve the
diamond dependency problem, which is pretty

300
00:20:27,330 --> 00:20:32,870
unique and very hard to translate to other
languages, which is a key feature here.

301
00:20:32,870 --> 00:20:37,840
And then there's a lot of grassroots tool
building from the community that tries to

302
00:20:37,840 --> 00:20:41,500
build tooling to kind of cope with large amounts
of changes.

303
00:20:41,500 --> 00:20:47,809
Things like Greenkeeper and a bunch of these
security projects that try to fit changes

304
00:20:47,809 --> 00:20:51,890
for you which are important and which are
not.

305
00:20:51,890 --> 00:20:54,720
So in terms of tradeoffs, again, there are
costs and benefits.

306
00:20:54,720 --> 00:20:57,600
It's certainly a much more open community.

307
00:20:57,600 --> 00:20:58,600
It's easier to get in.

308
00:20:58,600 --> 00:21:03,490
It's attractive to new developers, at least
compared to others.

309
00:21:03,490 --> 00:21:09,390
But it's perceived somewhat as unstable and
having little quality control, right?

310
00:21:09,390 --> 00:21:12,900
There's a lot of junk on npm.

311
00:21:12,900 --> 00:21:17,720
And the rapid changes out there require constant
maintenance, right?

312
00:21:17,720 --> 00:21:22,880
So at least if you decide to keep up, and
that's usually a good idea, I guess, if you

313
00:21:22,880 --> 00:21:26,200
decide to keep up, you have a lot of changes
to deal with dependencies.

314
00:21:26,200 --> 00:21:30,110
There are often a large number of dependencies.

315
00:21:30,110 --> 00:21:35,809
And then the community helps with tooling
and community efforts.

316
00:21:35,809 --> 00:21:42,480
So from an outsider's perspective, I have
the impression that the amount of change in

317
00:21:42,480 --> 00:21:46,200
Node and in this ecosystem is slowing down
a little bit.

318
00:21:46,200 --> 00:21:50,840
Potentially because there are more commercial
users who want more stability.

319
00:21:50,840 --> 00:21:52,070
More users in general.

320
00:21:52,070 --> 00:21:54,140
Maybe a larger community.

321
00:21:54,140 --> 00:22:00,590
So is Node actually getting more stable and,
more importantly, should it get more stable?

322
00:22:00,590 --> 00:22:05,570
And think this is an interesting question
for the community to ask because stability

323
00:22:05,570 --> 00:22:09,340
can be a nice value, but it also has its cost.

324
00:22:09,340 --> 00:22:13,690
And we have seen the extreme in Eclipse.

325
00:22:13,690 --> 00:22:16,720
And this might be worse to think about.

326
00:22:16,720 --> 00:22:21,150
So what I tried to show here is that culture
really matters for an ecosystem.

327
00:22:21,150 --> 00:22:22,150
Right?

328
00:22:22,150 --> 00:22:23,150
There are tradeoffs.

329
00:22:23,150 --> 00:22:28,170
I have shown you three very different examples
with different cost allocations, different

330
00:22:28,170 --> 00:22:31,120
people who are favored in this ecosystem.

331
00:22:31,120 --> 00:22:34,390
We can speculate about the reasons if you're
interested.

332
00:22:34,390 --> 00:22:38,140
And in the survey, you see a number of other
things that might stand out in one or the

333
00:22:38,140 --> 00:22:39,860
other direction.

334
00:22:39,860 --> 00:22:44,590
Rust really values community, that's communicates.

335
00:22:44,590 --> 00:22:52,600
Ruby are fun, a pretty unique versioning strategy.

336
00:22:52,600 --> 00:23:00,440
People are really aware about the difference
[audio cut out]� out of the same thing over

337
00:23:00,440 --> 00:23:04,030
a conflict on how to deal with compatibility.

338
00:23:04,030 --> 00:23:12,140
And Maven is interesting, most people perceive
it as a tool for replicability.

339
00:23:12,140 --> 00:23:16,230
And you can explore the page to see the others.

340
00:23:16,230 --> 00:23:22,510
So, again, community, culture, of an ecosystem
really matters.

341
00:23:22,510 --> 00:23:25,510
The values, the practices matter.

342
00:23:25,510 --> 00:23:28,900
Everything is a tradeoff and it helps to know
the design space.

343
00:23:28,900 --> 00:23:34,179
It helps to know what other possibilities
we can reduce the amount of changes.

344
00:23:34,179 --> 00:23:38,860
What are the different mechanisms of how we
can make it easier for users to update.

345
00:23:38,860 --> 00:23:39,860
Things like this.

346
00:23:39,860 --> 00:23:41,900
And understand the tradeoffs behind them.

347
00:23:41,900 --> 00:23:47,570
And our hope is in the longterm, when we understand
those things, we're just in the beginning,

348
00:23:47,570 --> 00:23:48,570
unfortunately.

349
00:23:48,570 --> 00:23:53,470
When we understand those things, we can deliberately
design communities this we can think about

350
00:23:53,470 --> 00:23:55,370
we can achieve this goal.

351
00:23:55,370 --> 00:23:56,549
What other practices?

352
00:23:56,549 --> 00:23:58,780
How can we encourage people to do this.

353
00:23:58,780 --> 00:24:01,720
And we can debug communities.

354
00:24:01,720 --> 00:24:03,679
If we see certain health issues.

355
00:24:03,679 --> 00:24:06,460
Like people are running away.

356
00:24:06,460 --> 00:24:08,710
People find this all low quality.

357
00:24:08,710 --> 00:24:09,710
What can we do?

358
00:24:09,710 --> 00:24:14,470
What might be effective things to change that
have worked in other communities?

359
00:24:14,470 --> 00:24:16,750
Most people don't know that many communities.

360
00:24:16,750 --> 00:24:18,750
One, two, three, maybe.

361
00:24:18,750 --> 00:24:21,810
And don't often think about the explicit differences.

362
00:24:21,810 --> 00:24:26,950
So we think it really helps to understand
the space and to understand.

363
00:24:26,950 --> 00:24:30,890
As I mentioned a couple of times, there's
much more data behind this.

364
00:24:30,890 --> 00:24:36,289
There's also academic papers behind this and
we have created a web page, breaking API's.org,

365
00:24:36,289 --> 00:24:40,000
we just released all the results of the survey.

366
00:24:40,000 --> 00:24:46,270
A large number of plots where you can compare
different ecosystems, and personal values

367
00:24:46,270 --> 00:24:47,920
against community values.

368
00:24:47,920 --> 00:24:49,250
Things like this.

369
00:24:49,250 --> 00:24:52,010
So feel free to have a look at this, explore
this.

370
00:24:52,010 --> 00:24:53,180
Explore the data.

371
00:24:53,180 --> 00:24:55,240
And we are always looking for feedback.

372
00:24:55,240 --> 00:24:58,490
Always looking to discuss things.

373
00:24:58,490 --> 00:25:01,610
If you have a specific insight, share this.

374
00:25:01,610 --> 00:25:03,910
We would be happy to interview people.

375
00:25:03,910 --> 00:25:06,950
Also learn more about those things.

376
00:25:06,950 --> 00:25:10,190
And with this I get to my last slide.

377
00:25:10,190 --> 00:25:12,799
Because in the title of the talk I asked how
to break an API.

378
00:25:12,799 --> 00:25:18,419
Now I can at least answer this for three ecosystems
I discussed.

379
00:25:18,419 --> 00:25:21,610
In Eclipse, you just don't.

380
00:25:21,610 --> 00:25:25,450
[ Laughter ]
In CRAN, You reach out to affected developers

381
00:25:25,450 --> 00:25:30,100
and release simultaneously.

382
00:25:30,100 --> 00:25:34,370
And in Node, you increase the major version
number and you move on.

383
00:25:34,370 --> 00:25:35,370
That's it.

384
00:25:35,370 --> 00:25:36,370
Thanks.

385
00:25:36,370 --> 00:25:37,370
[ Applause ]
>> Okay.

386
00:25:37,370 --> 00:25:38,370
So we've got a break now.

387
00:25:38,370 --> 00:25:39,370
Both tracks start at 5:45.

388
00:25:39,370 --> 00:25:40,370
But during the break also there is a what
is live JS?

389
00:25:40,370 --> 00:25:41,370
Which is a lightning talk over by where we
have been doing the live music in the back

390
00:25:41,370 --> 00:25:42,370
like near registration.

391
00:25:42,370 --> 00:25:43,370
See you in a bit.

