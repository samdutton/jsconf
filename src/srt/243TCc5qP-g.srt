1
00:00:00,320 --> 00:00:02,070

[Music]

2
00:00:02,070 --> 00:00:03,840
[Applause]

3
00:00:03,840 --> 00:00:05,660
[Music]

4
00:00:05,660 --> 00:00:07,410
[Applause]

5
00:00:07,410 --> 00:00:09,280
[Music]

6
00:00:09,280 --> 00:00:11,020
[Applause]

7
00:00:11,020 --> 00:00:12,780
[Music]

8
00:00:12,780 --> 00:00:16,860
[Applause]

9
00:00:16,870 --> 00:00:26,479
[Music]

10
00:00:26,489 --> 00:00:29,590
well awesome I'm happy to be here thank

11
00:00:29,590 --> 00:00:33,579
you for coming to my talk I did not plan

12
00:00:33,579 --> 00:00:35,110
the talk before me so if you were here

13
00:00:35,110 --> 00:00:36,910
before and it's all to talk about Cyprus

14
00:00:36,910 --> 00:00:39,040
we're gonna be talking about testing and

15
00:00:39,040 --> 00:00:41,200
we're gonna be talking about not end to

16
00:00:41,200 --> 00:00:42,610
end but we are going to be talking and

17
00:00:42,610 --> 00:00:44,500
we are going to be testing a to do NBC

18
00:00:44,500 --> 00:00:47,079
app so in Cyprus will be mentioned in

19
00:00:47,079 --> 00:00:48,760
this talk so that was kind of a perfect

20
00:00:48,760 --> 00:00:51,790
setup so my talk is about testing big

21
00:00:51,790 --> 00:00:55,329
and with big tests and hello everyone

22
00:00:55,329 --> 00:00:57,940
I'm Robert De Luca you can find me at

23
00:00:57,940 --> 00:00:59,980
Rob Dell 12 on the internet anywhere

24
00:00:59,980 --> 00:01:03,520
basically github Twitter anything on the

25
00:01:03,520 --> 00:01:06,159
internet I work for a consultancy called

26
00:01:06,159 --> 00:01:08,229
the front side we build software that

27
00:01:08,229 --> 00:01:09,790
you can secure your future on we do

28
00:01:09,790 --> 00:01:12,340
basically UI and JavaScript consulting

29
00:01:12,340 --> 00:01:14,380
and at the front side we care deeply

30
00:01:14,380 --> 00:01:18,370
about testing and specifically is unit

31
00:01:18,370 --> 00:01:21,880
tests or integration tests I ran across

32
00:01:21,880 --> 00:01:24,390
this tweet that I know Kent C Dodds

33
00:01:24,390 --> 00:01:26,770
really likes and I also really like it

34
00:01:26,770 --> 00:01:29,680
write tests not too many

35
00:01:29,680 --> 00:01:32,530
mostly integration and I agree with this

36
00:01:32,530 --> 00:01:35,140
so much and so much so in some of our

37
00:01:35,140 --> 00:01:36,760
applications we probably have about five

38
00:01:36,760 --> 00:01:38,470
or six unit tests and the rest ring in

39
00:01:38,470 --> 00:01:40,150
our integration tests and I'll show you

40
00:01:40,150 --> 00:01:42,970
at the end of this talk about how how we

41
00:01:42,970 --> 00:01:45,760
get there so to kind of get on the same

42
00:01:45,760 --> 00:01:48,610
page I want to talk about UI tests what

43
00:01:48,610 --> 00:01:51,040
are you eye tests so yeah let's make

44
00:01:51,040 --> 00:01:52,530
sure we get on the same page about it

45
00:01:52,530 --> 00:01:55,540
I'm talking about rendering the full

46
00:01:55,540 --> 00:01:58,000
application in the browser not just a

47
00:01:58,000 --> 00:02:00,150
single component the whole enchilada

48
00:02:00,150 --> 00:02:04,030
and I want to rerender a fresh

49
00:02:04,030 --> 00:02:06,100
application for each assertion I don't

50
00:02:06,100 --> 00:02:07,840
want any leftover State from the

51
00:02:07,840 --> 00:02:10,260
previous test run I want to make sure

52
00:02:10,260 --> 00:02:12,489
that I can put the application

53
00:02:12,489 --> 00:02:14,290
repeatedly into the same exact state

54
00:02:14,290 --> 00:02:17,920
each time I want to test the application

55
00:02:17,920 --> 00:02:19,930
like it's used a user isn't going to be

56
00:02:19,930 --> 00:02:21,640
unit testing your app they're not going

57
00:02:21,640 --> 00:02:22,690
to be looking up a function that's

58
00:02:22,690 --> 00:02:23,260
passed

59
00:02:23,260 --> 00:02:24,819
click Handler and calling that directly

60
00:02:24,819 --> 00:02:26,560
they're gonna be clicking there to be

61
00:02:26,560 --> 00:02:29,709
typing they're gonna be scrolling I want

62
00:02:29,709 --> 00:02:32,349
to mock my network requests this is the

63
00:02:32,349 --> 00:02:34,269
big difference between a dentists and UI

64
00:02:34,269 --> 00:02:38,590
tests and an dentist can be slow and it

65
00:02:38,590 --> 00:02:40,269
requires some work to set up and

66
00:02:40,269 --> 00:02:41,680
sanitizer data to make sure that you

67
00:02:41,680 --> 00:02:42,959
don't have any leftover data that's

68
00:02:42,959 --> 00:02:46,480
control you and future tests which is

69
00:02:46,480 --> 00:02:49,930
not fun so what are the benefits of UI

70
00:02:49,930 --> 00:02:50,730
testing

71
00:02:50,730 --> 00:02:53,650
well they test the integration of all

72
00:02:53,650 --> 00:02:55,000
the components together I want to make

73
00:02:55,000 --> 00:02:56,769
sure that my application works together

74
00:02:56,769 --> 00:02:59,909
as a whole not individually in pieces

75
00:02:59,909 --> 00:03:01,989
like I talked about earlier I want to

76
00:03:01,989 --> 00:03:03,639
test like a user I want to be clicking I

77
00:03:03,639 --> 00:03:05,019
want to be scrolling I want to be

78
00:03:05,019 --> 00:03:06,760
dragging and dropping I want to be doing

79
00:03:06,760 --> 00:03:08,409
all the things that I do while I

80
00:03:08,409 --> 00:03:10,000
interact with my app and I want to test

81
00:03:10,000 --> 00:03:13,060
that way and test test the loop between

82
00:03:13,060 --> 00:03:16,090
the browser and application I want to

83
00:03:16,090 --> 00:03:17,620
make sure when the browser sends an

84
00:03:17,620 --> 00:03:20,079
event my application can handle that

85
00:03:20,079 --> 00:03:22,569
properly we all know cross browser bugs

86
00:03:22,569 --> 00:03:24,609
exists and sometimes an event that's

87
00:03:24,609 --> 00:03:27,310
sent has different properties than other

88
00:03:27,310 --> 00:03:29,139
browsers or something quirky will go on

89
00:03:29,139 --> 00:03:31,389
even though there's a spec there's still

90
00:03:31,389 --> 00:03:34,239
bugs I want to test on many different

91
00:03:34,239 --> 00:03:36,940
browsers and platforms my my users

92
00:03:36,940 --> 00:03:38,049
aren't going to be just using Chrome

93
00:03:38,049 --> 00:03:39,370
they're not going to be just using

94
00:03:39,370 --> 00:03:41,440
Firefox and they definitely are not

95
00:03:41,440 --> 00:03:44,669
using jsm I want to test an IE edge

96
00:03:44,669 --> 00:03:49,540
Firefox iOS Chrome or iOS Safari Android

97
00:03:49,540 --> 00:03:52,599
Chrome I want to test on all of those so

98
00:03:52,599 --> 00:03:55,629
that's great but what are the trade-offs

99
00:03:55,629 --> 00:04:00,190
here UI tests can be hard to set up a

100
00:04:00,190 --> 00:04:01,810
lot of times you can end up in

101
00:04:01,810 --> 00:04:04,750
configuration hell and I think some of

102
00:04:04,750 --> 00:04:06,480
us have probably been there before

103
00:04:06,480 --> 00:04:08,829
they're typically hard to maintain I've

104
00:04:08,829 --> 00:04:11,650
been on - I've worked the two companies

105
00:04:11,650 --> 00:04:14,230
that have entire teams dedicated to

106
00:04:14,230 --> 00:04:16,150
writing these Suites and maintaining

107
00:04:16,150 --> 00:04:19,079
them they can be slow we've all seen

108
00:04:19,079 --> 00:04:21,970
sleep 10 or you know when they somebody

109
00:04:21,970 --> 00:04:23,560
commits something and it broke a test or

110
00:04:23,560 --> 00:04:25,330
it broke a test and they just increment

111
00:04:25,330 --> 00:04:29,919
the sleep I don't want that you can have

112
00:04:29,919 --> 00:04:31,840
flaky tests false positives or false

113
00:04:31,840 --> 00:04:34,860
negatives the elements are not existing

114
00:04:34,860 --> 00:04:36,590
but

115
00:04:36,590 --> 00:04:38,720
that that's something that we don't want

116
00:04:38,720 --> 00:04:41,690
in our tests so what what frameworks can

117
00:04:41,690 --> 00:04:44,330
do this UI testing all of these they can

118
00:04:44,330 --> 00:04:46,160
do UI testing I'm gonna mention a lot of

119
00:04:46,160 --> 00:04:47,690
these I can do and n testing but you can

120
00:04:47,690 --> 00:04:49,880
mock the network as you wish

121
00:04:49,880 --> 00:04:52,790
so with whatever method you want so the

122
00:04:52,790 --> 00:04:53,960
first one everybody's probably heard of

123
00:04:53,960 --> 00:04:56,870
is selenium or at least I worked with or

124
00:04:56,870 --> 00:04:59,120
at least heard of the new kid on the

125
00:04:59,120 --> 00:05:00,380
block which we just heard about which

126
00:05:00,380 --> 00:05:03,800
was Cypress and then protractor which is

127
00:05:03,800 --> 00:05:06,200
pretty popular with angular apps just

128
00:05:06,200 --> 00:05:09,470
and puppeteer which is interesting set

129
00:05:09,470 --> 00:05:11,000
up I've seen a couple articles pop up

130
00:05:11,000 --> 00:05:15,020
about this but as a whole UI testing

131
00:05:15,020 --> 00:05:17,900
hasn't changed very much so this is what

132
00:05:17,900 --> 00:05:20,780
some tests with like in selenium you're

133
00:05:20,780 --> 00:05:22,640
gonna get the browser you're gonna set

134
00:05:22,640 --> 00:05:23,900
up the driver or you get a drive it

135
00:05:23,900 --> 00:05:25,970
around with Cypress everything's

136
00:05:25,970 --> 00:05:28,910
prefixed through the side command and so

137
00:05:28,910 --> 00:05:32,600
I thought get side I contains those

138
00:05:32,600 --> 00:05:35,450
things I got paws protractor is a little

139
00:05:35,450 --> 00:05:37,790
bit more towards the modern scale like a

140
00:05:37,790 --> 00:05:39,370
modern scale however you want to

141
00:05:39,370 --> 00:05:42,200
classify that it has some page object II

142
00:05:42,200 --> 00:05:44,360
like things like it number but you still

143
00:05:44,360 --> 00:05:46,370
see in there like browser dot get title

144
00:05:46,370 --> 00:05:49,400
browser go here and then just then

145
00:05:49,400 --> 00:05:53,150
puppeteer which I I don't think you can

146
00:05:53,150 --> 00:05:54,230
see it up there in the slides but

147
00:05:54,230 --> 00:05:57,740
there's two sleeps in there that are 1.6

148
00:05:57,740 --> 00:05:59,150
million milliseconds which is about a

149
00:05:59,150 --> 00:06:02,870
half hour that's that's pretty high so

150
00:06:02,870 --> 00:06:05,300
it's just a lot of directing the browser

151
00:06:05,300 --> 00:06:07,640
to do things browser do this browser do

152
00:06:07,640 --> 00:06:10,550
that wait for this element but the way

153
00:06:10,550 --> 00:06:13,070
we've built UI has changed in a really

154
00:06:13,070 --> 00:06:16,130
big way and the way we have tested

155
00:06:16,130 --> 00:06:18,770
typically hasn't and we can thank

156
00:06:18,770 --> 00:06:21,260
libraries like this backbone view and

157
00:06:21,260 --> 00:06:24,860
Euler ember react and like a hundred

158
00:06:24,860 --> 00:06:26,090
thousand other JavaScript libraries that

159
00:06:26,090 --> 00:06:28,880
are out there I learned today that dojo

160
00:06:28,880 --> 00:06:30,800
has made a big comeback so we could

161
00:06:30,800 --> 00:06:33,890
throw that in there and the changes that

162
00:06:33,890 --> 00:06:36,490
they've brought are faster rendering

163
00:06:36,490 --> 00:06:38,540
components everywhere in a very

164
00:06:38,540 --> 00:06:41,060
componentized world everything can be

165
00:06:41,060 --> 00:06:42,560
broken down into digestible and

166
00:06:42,560 --> 00:06:44,360
shareable and composable components

167
00:06:44,360 --> 00:06:47,300
there's a lot more asynchrony we're

168
00:06:47,300 --> 00:06:49,010
doing a lot more get requests and a lot

169
00:06:49,010 --> 00:06:50,059
more

170
00:06:50,059 --> 00:06:53,069
Ajax and generally just became more

171
00:06:53,069 --> 00:06:56,669
interactive and basically the too long

172
00:06:56,669 --> 00:06:57,899
didn't read it is their more

173
00:06:57,899 --> 00:06:59,969
feature-rich we've been racing towards

174
00:06:59,969 --> 00:07:02,189
becoming as feature-rich as native apps

175
00:07:02,189 --> 00:07:05,399
and with that there's been massive

176
00:07:05,399 --> 00:07:09,059
booming boom and tooling to become more

177
00:07:09,059 --> 00:07:12,119
feature-rich and and handle all of the

178
00:07:12,119 --> 00:07:13,529
problems that come along with being more

179
00:07:13,529 --> 00:07:15,959
feature-rich in our ecosystem so tools

180
00:07:15,959 --> 00:07:19,859
like babel web pack yes land parcel type

181
00:07:19,859 --> 00:07:21,809
scripts all the things that we all

182
00:07:21,809 --> 00:07:23,639
probably use or use one of these tools

183
00:07:23,639 --> 00:07:26,999
daily has really changed the way that

184
00:07:26,999 --> 00:07:29,549
we've developed java scripts in the past

185
00:07:29,549 --> 00:07:33,359
10 years but UI testing tools haven't

186
00:07:33,359 --> 00:07:35,669
necessarily moved or evolved with the

187
00:07:35,669 --> 00:07:37,289
the front-end tooling world and that's

188
00:07:37,289 --> 00:07:41,099
that's a pretty bold claim right so what

189
00:07:41,099 --> 00:07:43,109
are we looking for what's missing then

190
00:07:43,109 --> 00:07:45,899
well I want my test framework to be it

191
00:07:45,899 --> 00:07:48,329
will be built with components in mind I

192
00:07:48,329 --> 00:07:51,209
want composability in my tests that are

193
00:07:51,209 --> 00:07:53,399
similar to composability and our

194
00:07:53,399 --> 00:07:54,269
components

195
00:07:54,269 --> 00:07:57,569
I want reliable Dom interactions I don't

196
00:07:57,569 --> 00:07:59,009
want anything flaky of course I don't

197
00:07:59,009 --> 00:08:01,379
want false positives or false negatives

198
00:08:01,379 --> 00:08:04,019
I want chainable interactions when I'm

199
00:08:04,019 --> 00:08:06,239
running a test that's filling in a form

200
00:08:06,239 --> 00:08:07,799
I want to be able to fill in a couple

201
00:08:07,799 --> 00:08:09,869
inputs chain one off one after another

202
00:08:09,869 --> 00:08:14,039
and then click Submit and of course we

203
00:08:14,039 --> 00:08:16,349
all want speed that's just a given I

204
00:08:16,349 --> 00:08:18,389
feel like I probably didn't even need to

205
00:08:18,389 --> 00:08:20,669
put that in my slides but we all want

206
00:08:20,669 --> 00:08:23,639
speed and I want to take advantage of

207
00:08:23,639 --> 00:08:24,959
our modern tooling things like

208
00:08:24,959 --> 00:08:27,389
typescript anything like that and when

209
00:08:27,389 --> 00:08:29,209
I'm thinking about this specifically

210
00:08:29,209 --> 00:08:31,559
things like stripping data attributes

211
00:08:31,559 --> 00:08:33,719
out of your your application for a

212
00:08:33,719 --> 00:08:35,729
production build so when you're testing

213
00:08:35,729 --> 00:08:37,349
you're not using brittle CSS selectors

214
00:08:37,349 --> 00:08:39,360
that are also testing or that are also

215
00:08:39,360 --> 00:08:41,159
providing style right like if I have a

216
00:08:41,159 --> 00:08:43,439
button that is read with the class name

217
00:08:43,439 --> 00:08:45,749
read and I wrote a test that selects

218
00:08:45,749 --> 00:08:47,309
from that and I change the color and the

219
00:08:47,309 --> 00:08:49,620
behavior didn't change my test shouldn't

220
00:08:49,620 --> 00:08:52,470
fail I want maintainability and

221
00:08:52,470 --> 00:08:55,920
scalability UI tests tend to become very

222
00:08:55,920 --> 00:08:58,769
fragile a lot of the time there are

223
00:08:58,769 --> 00:09:00,269
those dedicated teams that are writing

224
00:09:00,269 --> 00:09:03,149
those tests and not developed by

225
00:09:03,149 --> 00:09:04,499
the team that's actually developing the

226
00:09:04,499 --> 00:09:06,809
code and that's not something that we

227
00:09:06,809 --> 00:09:08,160
like to do with the front side we think

228
00:09:08,160 --> 00:09:10,079
that the developers should be writing

229
00:09:10,079 --> 00:09:12,120
the tests alongside of implementing the

230
00:09:12,120 --> 00:09:13,220
features because they know the features

231
00:09:13,220 --> 00:09:17,009
I want full control over the network I

232
00:09:17,009 --> 00:09:18,720
want to be able to create data as I need

233
00:09:18,720 --> 00:09:20,519
to put the application in the weirdest

234
00:09:20,519 --> 00:09:22,319
States at that that the user finds

235
00:09:22,319 --> 00:09:24,930
themselves in I want to be able to slow

236
00:09:24,930 --> 00:09:27,600
timings down increase or make the

237
00:09:27,600 --> 00:09:29,309
timings faster to test different loading

238
00:09:29,309 --> 00:09:33,209
States I want it to be cross framework

239
00:09:33,209 --> 00:09:35,759
we're consultants so we want something

240
00:09:35,759 --> 00:09:37,439
that we can take on any client project

241
00:09:37,439 --> 00:09:39,569
so that means it needs to work and react

242
00:09:39,569 --> 00:09:41,999
or view or basically anywhere there's

243
00:09:41,999 --> 00:09:45,389
Dom or JavaScript and we're consultants

244
00:09:45,389 --> 00:09:47,069
and we want it to work across test

245
00:09:47,069 --> 00:09:48,990
frameworks too because we're typically

246
00:09:48,990 --> 00:09:50,459
not able to be there in a greenfield

247
00:09:50,459 --> 00:09:52,110
project to make that decision or help

248
00:09:52,110 --> 00:09:54,089
them make that decision there's a little

249
00:09:54,089 --> 00:09:57,720
asterisk there on just because I am

250
00:09:57,720 --> 00:09:59,129
talking about UI testing in the browser

251
00:09:59,129 --> 00:10:00,779
and technically just can't run on the

252
00:10:00,779 --> 00:10:04,559
browser but you you can tack it I wanted

253
00:10:04,559 --> 00:10:05,399
to be cross browser

254
00:10:05,399 --> 00:10:08,189
this is a hard requirement we must be

255
00:10:08,189 --> 00:10:09,569
able to test in many different browsers

256
00:10:09,569 --> 00:10:11,249
and in today's day and age a lot of our

257
00:10:11,249 --> 00:10:12,839
users are using mobile so I want to be

258
00:10:12,839 --> 00:10:15,120
able to I must be able to test and

259
00:10:15,120 --> 00:10:17,790
mobile our users aren't going to be

260
00:10:17,790 --> 00:10:21,269
using JSON like I said and none of these

261
00:10:21,269 --> 00:10:23,160
frame current frameworks out there kind

262
00:10:23,160 --> 00:10:25,679
of meet these criteria for us each one

263
00:10:25,679 --> 00:10:27,870
check a few of the boxes Cypress is

264
00:10:27,870 --> 00:10:30,509
absolutely the closest but as far as I

265
00:10:30,509 --> 00:10:32,160
can tell her I know it only works in

266
00:10:32,160 --> 00:10:34,980
Chrome and Firefox is hot on its heels

267
00:10:34,980 --> 00:10:36,600
but it also doesn't really take

268
00:10:36,600 --> 00:10:40,620
components into consideration so we set

269
00:10:40,620 --> 00:10:42,149
out and built the thing that we wanted

270
00:10:42,149 --> 00:10:46,529
and the name of that is big tests it's

271
00:10:46,529 --> 00:10:47,970
called big tests because we're testing

272
00:10:47,970 --> 00:10:51,600
Bigley right unit tests are small and UI

273
00:10:51,600 --> 00:10:54,809
tests are big big tests can work

274
00:10:54,809 --> 00:10:57,209
anywhere there's Dom or JavaScript we

275
00:10:57,209 --> 00:10:59,459
use a server to run the tests so if your

276
00:10:59,459 --> 00:11:01,740
browser can visit a URL it can run the

277
00:11:01,740 --> 00:11:04,980
tests I wanted to be cross framework

278
00:11:04,980 --> 00:11:07,529
it's so or it is cross framework so it

279
00:11:07,529 --> 00:11:09,689
is written and plain JavaScript it can

280
00:11:09,689 --> 00:11:12,120
be used and adapted in any any frame

281
00:11:12,120 --> 00:11:14,579
to use and is cross test framework bring

282
00:11:14,579 --> 00:11:16,790
your favorite test framework or a runner

283
00:11:16,790 --> 00:11:19,800
and we tend to like mocha so that's

284
00:11:19,800 --> 00:11:21,509
that's what we're gonna be using in the

285
00:11:21,509 --> 00:11:24,629
future examples give you we give you

286
00:11:24,629 --> 00:11:26,790
full control over the network so you can

287
00:11:26,790 --> 00:11:28,350
create data as you wish you can slow

288
00:11:28,350 --> 00:11:30,269
those timings down you can throw 500

289
00:11:30,269 --> 00:11:32,399
errors to test that your client side you

290
00:11:32,399 --> 00:11:34,379
error handling is working you can do

291
00:11:34,379 --> 00:11:36,749
whatever you wish and it's built with

292
00:11:36,749 --> 00:11:39,449
components in mind components are at the

293
00:11:39,449 --> 00:11:41,670
center of big tests we ship these things

294
00:11:41,670 --> 00:11:44,339
called interactors with our component

295
00:11:44,339 --> 00:11:46,680
framework and the consuming app can

296
00:11:46,680 --> 00:11:49,050
import those interactors and use them

297
00:11:49,050 --> 00:11:51,689
directly because the the component

298
00:11:51,689 --> 00:11:53,129
framework is already testing its

299
00:11:53,129 --> 00:11:54,779
components rights so i don't need to

300
00:11:54,779 --> 00:11:56,730
write tests specifically around

301
00:11:56,730 --> 00:11:58,680
interacting with that component i can

302
00:11:58,680 --> 00:12:00,829
just import it and use what they wrote

303
00:12:00,829 --> 00:12:04,199
so someone once told me if you have a

304
00:12:04,199 --> 00:12:06,470
complicated problem such as UI testing

305
00:12:06,470 --> 00:12:08,939
give a simple example don't use a

306
00:12:08,939 --> 00:12:10,790
complicated example with a complicated

307
00:12:10,790 --> 00:12:14,309
testing so UI testing got me in my

308
00:12:14,309 --> 00:12:15,029
feelings

309
00:12:15,029 --> 00:12:18,329
everybody likes some Drake so I'm going

310
00:12:18,329 --> 00:12:20,699
to use to do MVC as a simple example and

311
00:12:20,699 --> 00:12:23,040
I'm gonna do it a little bit harder I'm

312
00:12:23,040 --> 00:12:25,559
going to a big test to two MVC with an

313
00:12:25,559 --> 00:12:31,019
API so this is a gift example of what

314
00:12:31,019 --> 00:12:34,399
these tests might look like when running

315
00:12:34,399 --> 00:12:36,779
so what are our goals here what do we

316
00:12:36,779 --> 00:12:37,949
want to accomplish by the end of this

317
00:12:37,949 --> 00:12:38,610
talk

318
00:12:38,610 --> 00:12:42,779
well I want to set up big test in an

319
00:12:42,779 --> 00:12:46,290
existing project I want to introduce and

320
00:12:46,290 --> 00:12:48,329
build a component interactors together

321
00:12:48,329 --> 00:12:50,519
I want to mock the network layer and

322
00:12:50,519 --> 00:12:54,569
let's write some big tests so we have a

323
00:12:54,569 --> 00:12:57,720
to do MVC starter app and what's the

324
00:12:57,720 --> 00:13:01,110
structure there it's kind of just a

325
00:13:01,110 --> 00:13:03,839
typical react up there we have a source

326
00:13:03,839 --> 00:13:05,429
folder with components inside of it we

327
00:13:05,429 --> 00:13:09,329
have a models folder for handling state

328
00:13:09,329 --> 00:13:10,769
in this application and then we have an

329
00:13:10,769 --> 00:13:12,540
index and some some styles and stuff so

330
00:13:12,540 --> 00:13:14,490
it's just basically a typical react

331
00:13:14,490 --> 00:13:16,740
project you might run across we use

332
00:13:16,740 --> 00:13:18,720
parcel to build because parcel is

333
00:13:18,720 --> 00:13:20,819
awesome you can use webpack or whatever

334
00:13:20,819 --> 00:13:22,259
you want but in this example we're using

335
00:13:22,259 --> 00:13:24,520
parcel if people

336
00:13:24,520 --> 00:13:27,970
familiar with what to do MVC is this is

337
00:13:27,970 --> 00:13:29,230
how the app works right you can create

338
00:13:29,230 --> 00:13:31,210
some - dues you can filter them and you

339
00:13:31,210 --> 00:13:34,780
can complete them so let's get big test

340
00:13:34,780 --> 00:13:37,360
set up this has no test it's just a

341
00:13:37,360 --> 00:13:39,280
fresh project so we need to install some

342
00:13:39,280 --> 00:13:40,780
dependencies we're going to install the

343
00:13:40,780 --> 00:13:43,150
big test CLI the big test interactors

344
00:13:43,150 --> 00:13:45,700
are a wrapper around mocha which is not

345
00:13:45,700 --> 00:13:48,460
necessarily needed but if you use mocha

346
00:13:48,460 --> 00:13:51,070
and you want to write in that style go

347
00:13:51,070 --> 00:13:52,330
ahead and use it and then we're going to

348
00:13:52,330 --> 00:13:55,000
include the big test react helper we're

349
00:13:55,000 --> 00:13:57,550
going to use MPX to run the init command

350
00:13:57,550 --> 00:13:59,350
which is going to create all the files

351
00:13:59,350 --> 00:14:01,750
that we need if you haven't used MPX

352
00:14:01,750 --> 00:14:05,590
it's pretty rad should use it so when we

353
00:14:05,590 --> 00:14:07,240
run big tests in it it's going to create

354
00:14:07,240 --> 00:14:10,450
this folder structure in your project so

355
00:14:10,450 --> 00:14:11,740
we have the big test folder and then we

356
00:14:11,740 --> 00:14:13,120
have our helpers folder inside of that

357
00:14:13,120 --> 00:14:15,220
which one helper and then we have our

358
00:14:15,220 --> 00:14:16,600
interactors folder which is where all

359
00:14:16,600 --> 00:14:17,980
interactions happen where our

360
00:14:17,980 --> 00:14:21,160
application and all of our tests so

361
00:14:21,160 --> 00:14:22,240
that's the test that are actually

362
00:14:22,240 --> 00:14:23,920
running and it also creates an index

363
00:14:23,920 --> 00:14:28,480
file and a big test options file so we

364
00:14:28,480 --> 00:14:30,790
need to tell big test launcher how to

365
00:14:30,790 --> 00:14:32,920
serve our application big test works by

366
00:14:32,920 --> 00:14:34,150
bundling all your tests together

367
00:14:34,150 --> 00:14:37,480
alongside your application so we need to

368
00:14:37,480 --> 00:14:39,370
change your bundlers entry point to the

369
00:14:39,370 --> 00:14:42,220
big test folder with parcel that's

370
00:14:42,220 --> 00:14:44,860
pretty easy because it's parcel right so

371
00:14:44,860 --> 00:14:46,930
we're going to create an index.html file

372
00:14:46,930 --> 00:14:48,160
because that's what they recommend to

373
00:14:48,160 --> 00:14:51,550
serve from an HTML and we're gonna point

374
00:14:51,550 --> 00:14:55,360
the entry of that that of the parcel

375
00:14:55,360 --> 00:14:56,800
want alert to our big test file that we

376
00:14:56,800 --> 00:14:59,590
just created so if we look at our npm or

377
00:14:59,590 --> 00:15:02,470
package JSON file and our scripts we've

378
00:15:02,470 --> 00:15:04,240
created a new script that is start :

379
00:15:04,240 --> 00:15:07,110
tests and points to the big test

380
00:15:07,110 --> 00:15:09,310
index.html this is gonna bundle all our

381
00:15:09,310 --> 00:15:13,360
things together if you're using webpack

382
00:15:13,360 --> 00:15:16,210
you can or whatever you want you can do

383
00:15:16,210 --> 00:15:18,850
it in this style the runner and CLI when

384
00:15:18,850 --> 00:15:20,320
you run it automatically sets the node M

385
00:15:20,320 --> 00:15:22,690
to test so you can just change when

386
00:15:22,690 --> 00:15:25,600
you're in test mode to change the entry

387
00:15:25,600 --> 00:15:27,610
from just the normal entry to the big

388
00:15:27,610 --> 00:15:30,130
tests entry file so the next thing we

389
00:15:30,130 --> 00:15:32,950
need to do is set up big test run which

390
00:15:32,950 --> 00:15:35,350
actually runs the tests we're going to

391
00:15:35,350 --> 00:15:36,370
go back into our scripts file we're

392
00:15:36,370 --> 00:15:37,710
going to add a new test command here

393
00:15:37,710 --> 00:15:40,740
five which just does big test run which

394
00:15:40,740 --> 00:15:41,760
is good to call it directly from the

395
00:15:41,760 --> 00:15:44,100
binary that's installed on our project

396
00:15:44,100 --> 00:15:46,320
from the dependencies and then we're

397
00:15:46,320 --> 00:15:47,430
gonna edit our big test

398
00:15:47,430 --> 00:15:49,410
ops file we have to tell the launcher

399
00:15:49,410 --> 00:15:52,770
how to do three things for us the first

400
00:15:52,770 --> 00:15:55,020
thing is how to serve that app and we're

401
00:15:55,020 --> 00:15:57,630
going to point it to the command that we

402
00:15:57,630 --> 00:15:58,830
just created if you're using webpack

403
00:15:58,830 --> 00:16:00,060
like you showed earlier you don't even

404
00:16:00,060 --> 00:16:02,010
have to you can just pass yarn tests or

405
00:16:02,010 --> 00:16:03,930
yarn start just like you would normally

406
00:16:03,930 --> 00:16:05,700
start your application the next one

407
00:16:05,700 --> 00:16:07,140
we're gonna do is we're gonna tell the

408
00:16:07,140 --> 00:16:08,720
application where to actually serve to

409
00:16:08,720 --> 00:16:11,970
and in our case it's going to be

410
00:16:11,970 --> 00:16:13,440
localhost one-two-three-four because

411
00:16:13,440 --> 00:16:15,090
that's a default port number for parcel

412
00:16:15,090 --> 00:16:18,120
which i think is awesome and lastly

413
00:16:18,120 --> 00:16:21,030
you're gonna tell big test what adaptor

414
00:16:21,030 --> 00:16:22,470
and what framework test framework you're

415
00:16:22,470 --> 00:16:24,330
using I'm like I said you can use any

416
00:16:24,330 --> 00:16:25,890
one that you want so we're gonna pass

417
00:16:25,890 --> 00:16:28,290
mocha here and currently we only have

418
00:16:28,290 --> 00:16:31,020
support for mocha but as I talk right

419
00:16:31,020 --> 00:16:33,060
now one of my co-workers is building

420
00:16:33,060 --> 00:16:36,120
other adapters so let's take a look at

421
00:16:36,120 --> 00:16:38,490
these test files they're just it's just

422
00:16:38,490 --> 00:16:41,280
a fresh sweet these are our mocha tests

423
00:16:41,280 --> 00:16:44,460
and in this test on line 15 we are

424
00:16:44,460 --> 00:16:45,930
asserting that the title of the

425
00:16:45,930 --> 00:16:47,730
application equals to do and it has an

426
00:16:47,730 --> 00:16:51,060
h1 and this is what an interact or looks

427
00:16:51,060 --> 00:16:54,510
like we have a class that has a property

428
00:16:54,510 --> 00:16:56,310
on it called title title text and we're

429
00:16:56,310 --> 00:16:58,260
gonna grab the text from the h1 element

430
00:16:58,260 --> 00:17:00,930
on the page now we're going to learn a

431
00:17:00,930 --> 00:17:02,190
lot more about interactors in a little

432
00:17:02,190 --> 00:17:04,650
bit so let's finish setting up last

433
00:17:04,650 --> 00:17:07,440
thing we need to do is set up the setup

434
00:17:07,440 --> 00:17:09,180
app helper this is this is the thing

435
00:17:09,180 --> 00:17:11,339
that actually renders your application

436
00:17:11,339 --> 00:17:14,010
into the browser and this is what that

437
00:17:14,010 --> 00:17:16,620
that that file looks like we're going to

438
00:17:16,620 --> 00:17:18,570
import our route app for a route

439
00:17:18,570 --> 00:17:21,930
component and pass it to set up a for

440
00:17:21,930 --> 00:17:23,430
testing the helper that we provide for

441
00:17:23,430 --> 00:17:25,830
from big tests react this is typically

442
00:17:25,830 --> 00:17:29,220
whatever you pass to react Dom but in

443
00:17:29,220 --> 00:17:30,630
some cases and applications that we've

444
00:17:30,630 --> 00:17:32,520
seen you might wrap it around with the

445
00:17:32,520 --> 00:17:33,630
test harness component that provides

446
00:17:33,630 --> 00:17:35,490
some other things and like fake loggers

447
00:17:35,490 --> 00:17:38,030
and in redux or whatever you might want

448
00:17:38,030 --> 00:17:40,200
big tests react also provides other

449
00:17:40,200 --> 00:17:42,390
things like you can pass props to it

450
00:17:42,390 --> 00:17:44,040
initial props or whatever you want and

451
00:17:44,040 --> 00:17:46,650
you can also if you're using react

452
00:17:46,650 --> 00:17:48,030
router it'll automatically hook in a

453
00:17:48,030 --> 00:17:49,559
reactor outer for you so you can use the

454
00:17:49,559 --> 00:17:52,409
at command to visit relics in your tests

455
00:17:52,409 --> 00:17:57,720
so let's run some tests and we have a

456
00:17:57,720 --> 00:17:59,210
single passing test

457
00:17:59,210 --> 00:18:02,009
so let's there's a good place to take a

458
00:18:02,009 --> 00:18:03,960
break and review where we're at we have

459
00:18:03,960 --> 00:18:05,309
successfully set up big tests and

460
00:18:05,309 --> 00:18:07,980
existing project the next thing we're

461
00:18:07,980 --> 00:18:10,110
gonna do is build some component

462
00:18:10,110 --> 00:18:12,179
interactors together so I think this is

463
00:18:12,179 --> 00:18:15,120
a good spot to pause and and talk about

464
00:18:15,120 --> 00:18:16,399
interactors and what they are

465
00:18:16,399 --> 00:18:19,200
interactors allow you to think about how

466
00:18:19,200 --> 00:18:21,389
to interact with your component and your

467
00:18:21,389 --> 00:18:24,299
application as a whole click this drag

468
00:18:24,299 --> 00:18:27,629
this scroll here focus this they will

469
00:18:27,629 --> 00:18:29,039
wait for elements to exist before

470
00:18:29,039 --> 00:18:30,450
interacting with them so you don't have

471
00:18:30,450 --> 00:18:34,230
to worry about timing or or getting to

472
00:18:34,230 --> 00:18:35,399
sync up with a run loop or anything

473
00:18:35,399 --> 00:18:38,429
it'll just work for you I don't have

474
00:18:38,429 --> 00:18:40,289
enough time to get into how it all

475
00:18:40,289 --> 00:18:41,759
actually works in the architecture

476
00:18:41,759 --> 00:18:43,619
underneath that's a whole talk in itself

477
00:18:43,619 --> 00:18:45,899
but just know that it takes care of that

478
00:18:45,899 --> 00:18:48,720
for you interactors our core two big

479
00:18:48,720 --> 00:18:50,639
tests they're the heart and soul of a

480
00:18:50,639 --> 00:18:52,769
big test and I think arguably probably

481
00:18:52,769 --> 00:18:55,830
the coolest feature and even though

482
00:18:55,830 --> 00:18:57,869
we're saying the big test is a testing

483
00:18:57,869 --> 00:19:00,059
framework you could take interactors and

484
00:19:00,059 --> 00:19:01,889
plug it into Cypress if you want or

485
00:19:01,889 --> 00:19:03,600
whatever testing framework that you want

486
00:19:03,600 --> 00:19:05,009
because these are just a collection of

487
00:19:05,009 --> 00:19:09,240
modules so you don't have to wait for

488
00:19:09,240 --> 00:19:12,149
the ability to interact and interactors

489
00:19:12,149 --> 00:19:13,499
abstract that away for you so you don't

490
00:19:13,499 --> 00:19:14,850
have to worry about that timing or

491
00:19:14,850 --> 00:19:17,100
anything it'll do it interact or

492
00:19:17,100 --> 00:19:19,409
properties are lazy so they don't

493
00:19:19,409 --> 00:19:21,240
actually run until you try to access the

494
00:19:21,240 --> 00:19:22,309
getter on it

495
00:19:22,309 --> 00:19:24,929
they're composable and they are

496
00:19:24,929 --> 00:19:29,549
chainable and I think very powerful so

497
00:19:29,549 --> 00:19:31,230
if you want to go check out the API dots

498
00:19:31,230 --> 00:19:33,809
and go to big tests JSI o slash guides

499
00:19:33,809 --> 00:19:36,269
to interactors and we have three or four

500
00:19:36,269 --> 00:19:38,369
guides there for you about creating

501
00:19:38,369 --> 00:19:40,110
custom interactors composing them with

502
00:19:40,110 --> 00:19:42,749
other interactors if you want to go and

503
00:19:42,749 --> 00:19:44,759
learn at your own pace or take a look at

504
00:19:44,759 --> 00:19:47,179
the all the API Doc's that we have so

505
00:19:47,179 --> 00:19:50,610
let's start filling in our interactor we

506
00:19:50,610 --> 00:19:54,480
to give like a simplest view of what we

507
00:19:54,480 --> 00:19:56,549
were doing here is where we have set up

508
00:19:56,549 --> 00:19:58,080
our application where we've rendered it

509
00:19:58,080 --> 00:19:59,909
into the browser and now we're gonna

510
00:19:59,909 --> 00:20:02,250
start driving the application around

511
00:20:02,250 --> 00:20:06,300
with interactors so this begs a question

512
00:20:06,300 --> 00:20:09,120
of how do we actually even interact with

513
00:20:09,120 --> 00:20:12,090
our application and even for something

514
00:20:12,090 --> 00:20:15,480
that's as simple as to do MVC there's a

515
00:20:15,480 --> 00:20:16,860
lot that's going on here there's a lot

516
00:20:16,860 --> 00:20:18,270
of different ways you can interact with

517
00:20:18,270 --> 00:20:21,510
your application so let's stop and break

518
00:20:21,510 --> 00:20:22,950
this down and just tackle adding it to

519
00:20:22,950 --> 00:20:26,100
do first let's look back at the slim

520
00:20:26,100 --> 00:20:27,990
diagram here just for adding it to do

521
00:20:27,990 --> 00:20:31,620
you have input here where you type it in

522
00:20:31,620 --> 00:20:33,000
the input and then you press ENTER to

523
00:20:33,000 --> 00:20:36,630
submit you can also toggle a button on

524
00:20:36,630 --> 00:20:40,980
the left to complete all to Do's so

525
00:20:40,980 --> 00:20:43,590
we're at the top here we're already

526
00:20:43,590 --> 00:20:46,110
asserting that we have our two dues or

527
00:20:46,110 --> 00:20:48,240
two dues title there so that's done for

528
00:20:48,240 --> 00:20:49,410
us now we just need to wire up our

529
00:20:49,410 --> 00:20:52,340
interactor for actually submitting or

530
00:20:52,340 --> 00:20:54,660
actually entering data into the input

531
00:20:54,660 --> 00:20:58,170
and then submitting that that to do so

532
00:20:58,170 --> 00:21:00,410
our actor is grown a little bit here I

533
00:21:00,410 --> 00:21:03,600
want to call out line 12 we have a new

534
00:21:03,600 --> 00:21:05,250
to do property which is equal to a

535
00:21:05,250 --> 00:21:07,290
fillable method that we provide from

536
00:21:07,290 --> 00:21:09,180
interactor and what fillable is going to

537
00:21:09,180 --> 00:21:11,100
do is allow you to fill an input with

538
00:21:11,100 --> 00:21:13,680
whatever data you want in your test and

539
00:21:13,680 --> 00:21:16,170
then here on lines 15 to 17 we have a

540
00:21:16,170 --> 00:21:18,000
submit to do property that we have equal

541
00:21:18,000 --> 00:21:20,070
to a trigger Abul method that's provided

542
00:21:20,070 --> 00:21:23,160
from interactor also which allows us to

543
00:21:23,160 --> 00:21:24,810
trigger whatever event that we want in

544
00:21:24,810 --> 00:21:26,640
this case we're going to trigger a

545
00:21:26,640 --> 00:21:29,550
keydown event and send the key code 13

546
00:21:29,550 --> 00:21:32,250
which is the enter key on the new to do

547
00:21:32,250 --> 00:21:36,060
input field so that's that's great I

548
00:21:36,060 --> 00:21:37,410
guess

549
00:21:37,410 --> 00:21:40,140
so let's route this in reality and see

550
00:21:40,140 --> 00:21:43,650
how we actually use this in a test so

551
00:21:43,650 --> 00:21:45,780
same from earlier test suite that we

552
00:21:45,780 --> 00:21:47,370
have right but we have a new describe

553
00:21:47,370 --> 00:21:48,630
block and I want to kind of walk through

554
00:21:48,630 --> 00:21:50,460
how interactors are playing a role here

555
00:21:50,460 --> 00:21:52,830
first we're going to import the

556
00:21:52,830 --> 00:21:55,260
interactor from the folder and at the

557
00:21:55,260 --> 00:21:56,400
very top of the file we're going to

558
00:21:56,400 --> 00:21:59,370
instantiate our enter actor and then

559
00:21:59,370 --> 00:22:03,300
down here on lines 22 23 we're gonna

560
00:22:03,300 --> 00:22:04,710
actually start interacting with our app

561
00:22:04,710 --> 00:22:08,460
we named our to do to the or interact or

562
00:22:08,460 --> 00:22:10,890
to do app so when we call that

563
00:22:10,890 --> 00:22:12,570
interactor we're gonna do to do app dot

564
00:22:12,570 --> 00:22:14,110
new to do and then

565
00:22:14,110 --> 00:22:15,640
we passed two is actually going to be

566
00:22:15,640 --> 00:22:16,870
the value of that's entered into the

567
00:22:16,870 --> 00:22:18,970
input fields and then we just chain on a

568
00:22:18,970 --> 00:22:22,030
submit to do interactor and bam we're

569
00:22:22,030 --> 00:22:25,960
going to submit so we actually don't

570
00:22:25,960 --> 00:22:27,340
have anything to assert against right

571
00:22:27,340 --> 00:22:29,350
now all right if we look back at the

572
00:22:29,350 --> 00:22:31,030
tests here you can see the assertion

573
00:22:31,030 --> 00:22:32,920
down at the bottom is just a comment

574
00:22:32,920 --> 00:22:36,640
that says oh so let's take a look back

575
00:22:36,640 --> 00:22:42,130
at our diagram here and look at a to-do

576
00:22:42,130 --> 00:22:44,950
item so we have our adding it to do

577
00:22:44,950 --> 00:22:47,740
interactor kind of all fleshed out so in

578
00:22:47,740 --> 00:22:50,850
order for us to assert we have an

579
00:22:50,850 --> 00:22:53,440
infinite number of to-do items in this

580
00:22:53,440 --> 00:22:56,520
list and when we built this application

581
00:22:56,520 --> 00:22:59,020
we recognized that we could pull that

582
00:22:59,020 --> 00:23:01,390
out onto a component right we could

583
00:23:01,390 --> 00:23:03,640
build something and it's called to do I

584
00:23:03,640 --> 00:23:07,270
don't so naturally with each component

585
00:23:07,270 --> 00:23:09,400
there can be an interact or that maps

586
00:23:09,400 --> 00:23:10,929
directly to and how you interact with

587
00:23:10,929 --> 00:23:13,179
that component so we're going to try and

588
00:23:13,179 --> 00:23:15,280
we're going to match that composability

589
00:23:15,280 --> 00:23:17,049
that we get from the component with our

590
00:23:17,049 --> 00:23:19,780
tests so let's create a new interactor

591
00:23:19,780 --> 00:23:22,780
called to-do item and we're gonna create

592
00:23:22,780 --> 00:23:24,669
one property for now on it called to do

593
00:23:24,669 --> 00:23:26,650
text and that's just going to grab text

594
00:23:26,650 --> 00:23:28,450
from the label element on the to-do item

595
00:23:28,450 --> 00:23:32,200
and then we're to compose or to do item

596
00:23:32,200 --> 00:23:34,419
interactor with our to-do MVC interactor

597
00:23:34,419 --> 00:23:36,669
the same way that we compose the to-do

598
00:23:36,669 --> 00:23:39,190
item component in the two MVC

599
00:23:39,190 --> 00:23:41,830
application when we built it so we're

600
00:23:41,830 --> 00:23:43,210
going to go back to the to-do MVC

601
00:23:43,210 --> 00:23:45,520
interactor and add a new property on

602
00:23:45,520 --> 00:23:47,679
line 16 called to-do list and it's going

603
00:23:47,679 --> 00:23:49,200
to be set to a collection and

604
00:23:49,200 --> 00:23:51,820
collections from interactor are just a

605
00:23:51,820 --> 00:23:53,410
way for you to scope your nested

606
00:23:53,410 --> 00:23:56,500
interactors to a specific selector so if

607
00:23:56,500 --> 00:23:58,450
we go back here you remember how I'm

608
00:23:58,450 --> 00:24:00,880
just pulling off text from a label which

609
00:24:00,880 --> 00:24:03,070
is pretty vague right we can do that

610
00:24:03,070 --> 00:24:06,340
because we have we have it scoped with a

611
00:24:06,340 --> 00:24:08,169
collection and it's only going to look

612
00:24:08,169 --> 00:24:11,980
for the label inside of to-do list Li so

613
00:24:11,980 --> 00:24:13,210
we don't have to worry about it trying

614
00:24:13,210 --> 00:24:15,520
to grab some label that's way out of the

615
00:24:15,520 --> 00:24:18,580
scope of the component now we can assert

616
00:24:18,580 --> 00:24:20,770
that the to do was created right so

617
00:24:20,770 --> 00:24:22,660
let's fill in that test since our to-do

618
00:24:22,660 --> 00:24:25,390
list is a collection when we select from

619
00:24:25,390 --> 00:24:26,790
what we're going to do

620
00:24:26,790 --> 00:24:29,370
to do app dot to-do list and pass the

621
00:24:29,370 --> 00:24:31,050
index of the item in the list that we

622
00:24:31,050 --> 00:24:32,700
want to select so we want to select the

623
00:24:32,700 --> 00:24:33,690
first one so we're going to pass the

624
00:24:33,690 --> 00:24:36,120
zero index and then from there we can

625
00:24:36,120 --> 00:24:38,010
just call the properties of the interact

626
00:24:38,010 --> 00:24:39,810
on it so we're going to do to-do list

627
00:24:39,810 --> 00:24:42,570
item zero the part the first item and

628
00:24:42,570 --> 00:24:44,070
then get the text off of it and we're to

629
00:24:44,070 --> 00:24:46,920
assert that equals my to do so let's run

630
00:24:46,920 --> 00:24:51,540
the tests BAM there the other thing

631
00:24:51,540 --> 00:24:53,220
about big test is is super fast or that

632
00:24:53,220 --> 00:24:56,040
that ran on about three milliseconds I

633
00:24:56,040 --> 00:24:57,650
think it says up there it's pretty best

634
00:24:57,650 --> 00:25:00,420
so let's fill in the rest of our to-do

635
00:25:00,420 --> 00:25:02,280
item interactor and and think about all

636
00:25:02,280 --> 00:25:04,110
the ways that we can interact with just

637
00:25:04,110 --> 00:25:08,160
a to-do item we can click the check box

638
00:25:08,160 --> 00:25:11,580
to toggle the item so on line 13 there

639
00:25:11,580 --> 00:25:13,500
we're setting a property called toggle

640
00:25:13,500 --> 00:25:15,270
to a clickable element so it's going to

641
00:25:15,270 --> 00:25:18,090
click that item when we call it we can

642
00:25:18,090 --> 00:25:19,590
delete the item doing the same thing by

643
00:25:19,590 --> 00:25:22,020
clicking we can check properties on

644
00:25:22,020 --> 00:25:24,620
different elements and attributes also

645
00:25:24,620 --> 00:25:26,700
but for this instance we're going to

646
00:25:26,700 --> 00:25:28,470
check if the to do is completed by

647
00:25:28,470 --> 00:25:30,870
checking the checked property on the

648
00:25:30,870 --> 00:25:33,750
checkbox we're going to double click in

649
00:25:33,750 --> 00:25:35,670
to and we're going to trigger a double

650
00:25:35,670 --> 00:25:37,800
click event by to enter into edit mode

651
00:25:37,800 --> 00:25:39,540
and then we're going to fill in that

652
00:25:39,540 --> 00:25:42,240
edit input to edit it and then we can

653
00:25:42,240 --> 00:25:46,860
press ENTER to submit that edit so let's

654
00:25:46,860 --> 00:25:48,720
take a second there's a lot being thrown

655
00:25:48,720 --> 00:25:51,390
at you and it's just positive check our

656
00:25:51,390 --> 00:25:54,210
progress we've set a big test in an

657
00:25:54,210 --> 00:25:56,220
existing project and we've kind of

658
00:25:56,220 --> 00:25:58,080
introduced interactors and built some

659
00:25:58,080 --> 00:25:58,940
together

660
00:25:58,940 --> 00:26:02,040
so let's write some more tests for this

661
00:26:02,040 --> 00:26:04,800
application right let's write test for

662
00:26:04,800 --> 00:26:06,980
editing completing and deleting it to do

663
00:26:06,980 --> 00:26:09,390
but we have a problem here

664
00:26:09,390 --> 00:26:11,310
all these tests are end to end right now

665
00:26:11,310 --> 00:26:14,370
and leftover data is causing issues and

666
00:26:14,370 --> 00:26:16,380
we're still technically in this instance

667
00:26:16,380 --> 00:26:17,910
of the application these are going

668
00:26:17,910 --> 00:26:20,130
straight to production so that's not

669
00:26:20,130 --> 00:26:23,100
good if you look at the gif here each

670
00:26:23,100 --> 00:26:24,930
time i refresh the page here it's going

671
00:26:24,930 --> 00:26:26,520
to make a network request and actually

672
00:26:26,520 --> 00:26:28,500
submit it to do so by the time I'm done

673
00:26:28,500 --> 00:26:30,240
refreshing here we have 6 to do's there

674
00:26:30,240 --> 00:26:32,220
which isn't good if you're trying to

675
00:26:32,220 --> 00:26:35,040
test the state in between each tests so

676
00:26:35,040 --> 00:26:36,840
we're to use a thing called big test

677
00:26:36,840 --> 00:26:37,920
Mirage

678
00:26:37,920 --> 00:26:40,590
and what Mirage does is it creates a

679
00:26:40,590 --> 00:26:42,900
client-side server that mimics your API

680
00:26:42,900 --> 00:26:47,580
it has a fully featured database ORM and

681
00:26:47,580 --> 00:26:49,380
allows you to have full control over the

682
00:26:49,380 --> 00:26:51,600
data in your tests do you need 200

683
00:26:51,600 --> 00:26:53,790
records the test pagination go for it

684
00:26:53,790 --> 00:26:56,280
do you need zero records the check to

685
00:26:56,280 --> 00:26:58,380
test an empty State awesome what about

686
00:26:58,380 --> 00:26:59,760
throwing a 500 error from when

687
00:26:59,760 --> 00:27:02,220
submitting at a forum and making sure

688
00:27:02,220 --> 00:27:04,140
that your client side validation is

689
00:27:04,140 --> 00:27:06,800
worked there great go for it it'll work

690
00:27:06,800 --> 00:27:09,330
so I want to give a shout out to Sam

691
00:27:09,330 --> 00:27:11,700
Celica for building Mirage if your an

692
00:27:11,700 --> 00:27:13,830
ember developer you might be familiar

693
00:27:13,830 --> 00:27:14,550
with that name

694
00:27:14,550 --> 00:27:17,040
he built ember CLI Mirage and we just

695
00:27:17,040 --> 00:27:18,420
pulled it out into a base JavaScript

696
00:27:18,420 --> 00:27:20,100
library so everybody that uses

697
00:27:20,100 --> 00:27:22,770
JavaScript can benefit from this awesome

698
00:27:22,770 --> 00:27:26,100
library so we're to use big tests in it

699
00:27:26,100 --> 00:27:28,020
and we're going to pass a network flag

700
00:27:28,020 --> 00:27:29,550
here now so it can do all the

701
00:27:29,550 --> 00:27:31,560
bootstrapping that we need because we

702
00:27:31,560 --> 00:27:32,760
don't want to do all this work manually

703
00:27:32,760 --> 00:27:34,830
and then we're going to add the big test

704
00:27:34,830 --> 00:27:36,920
Mirage dependency as a dev dependency

705
00:27:36,920 --> 00:27:39,630
and what that does is it creates this

706
00:27:39,630 --> 00:27:42,360
this structure with some with some more

707
00:27:42,360 --> 00:27:45,390
full subfolders here so alongside of our

708
00:27:45,390 --> 00:27:47,460
helpers interactors and test file we

709
00:27:47,460 --> 00:27:49,470
also have a network folder now that has

710
00:27:49,470 --> 00:27:50,880
a bunch of other folders inside of it

711
00:27:50,880 --> 00:27:52,080
but just you don't have to worry about

712
00:27:52,080 --> 00:27:55,620
that right now just know it exists when

713
00:27:55,620 --> 00:27:58,050
we run the big test in it with Network

714
00:27:58,050 --> 00:28:00,690
it does update the setup app helper with

715
00:28:00,690 --> 00:28:02,760
a few changes so let's take a look at

716
00:28:02,760 --> 00:28:04,380
that the first thing that changes is

717
00:28:04,380 --> 00:28:06,300
we're importing a start Mirage command

718
00:28:06,300 --> 00:28:09,630
from the network folder and then we have

719
00:28:09,630 --> 00:28:12,030
two new methods on the setup app for

720
00:28:12,030 --> 00:28:14,910
testing helper here one is setup and one

721
00:28:14,910 --> 00:28:16,980
is teardown so setup is called before

722
00:28:16,980 --> 00:28:18,420
the application is actually rendered and

723
00:28:18,420 --> 00:28:20,550
we're going to start the Mirage server

724
00:28:20,550 --> 00:28:22,590
the client-side server we're gonna turn

725
00:28:22,590 --> 00:28:23,850
logging off because that can be annoying

726
00:28:23,850 --> 00:28:26,040
to see your test output but you can turn

727
00:28:26,040 --> 00:28:28,890
that back on if you are debugging and

728
00:28:28,890 --> 00:28:30,780
then after the test run we're going to

729
00:28:30,780 --> 00:28:32,220
clean up after ourselves and shut down

730
00:28:32,220 --> 00:28:35,970
the test server so what happens now that

731
00:28:35,970 --> 00:28:37,830
we've run the big test in the command

732
00:28:37,830 --> 00:28:39,270
with network and

733
00:28:39,270 --> 00:28:41,640
I set up this and what happens when we

734
00:28:41,640 --> 00:28:45,900
run our tests they're gonna fail and

735
00:28:45,900 --> 00:28:47,400
something funny is going on here we're

736
00:28:47,400 --> 00:28:49,350
gonna see a ton of errors here in our

737
00:28:49,350 --> 00:28:50,870
console what's what's up with that

738
00:28:50,870 --> 00:28:54,150
so Mirage intercepts all of your network

739
00:28:54,150 --> 00:28:56,070
requests it's not gonna let any of them

740
00:28:56,070 --> 00:28:58,950
out unless you actually let it or want

741
00:28:58,950 --> 00:29:00,510
it so you can do a pass-through and or

742
00:29:00,510 --> 00:29:03,060
actually talk to the real network but by

743
00:29:03,060 --> 00:29:04,170
the default state it's not gonna let

744
00:29:04,170 --> 00:29:07,410
anything talk to the network so let's go

745
00:29:07,410 --> 00:29:10,290
ahead and mock our get endpoint so when

746
00:29:10,290 --> 00:29:11,670
the application actually loads it's

747
00:29:11,670 --> 00:29:13,170
gonna fetch all the to Do's

748
00:29:13,170 --> 00:29:15,960
so let's mock that if we go into our big

749
00:29:15,960 --> 00:29:18,930
test Network config folder or file we're

750
00:29:18,930 --> 00:29:21,300
going to I'm gonna explain a couple

751
00:29:21,300 --> 00:29:23,970
things here first thing you notice here

752
00:29:23,970 --> 00:29:25,530
on line two is we're setting a URL

753
00:29:25,530 --> 00:29:27,390
prefix which is a fully qualified URL

754
00:29:27,390 --> 00:29:29,580
and this is a URL of our API this is

755
00:29:29,580 --> 00:29:31,110
where an actual network request is going

756
00:29:31,110 --> 00:29:34,260
out to and then here on line four since

757
00:29:34,260 --> 00:29:36,420
we pass the URL the fully qualified URLs

758
00:29:36,420 --> 00:29:38,400
or prefix we don't have to actually use

759
00:29:38,400 --> 00:29:39,990
that in each endpoint that we're mocking

760
00:29:39,990 --> 00:29:41,850
and we can just say that we're getting

761
00:29:41,850 --> 00:29:43,920
on the route from that and when that

762
00:29:43,920 --> 00:29:45,510
function is invoked you get a two

763
00:29:45,510 --> 00:29:47,070
arguments to your function which is the

764
00:29:47,070 --> 00:29:48,900
schema and the request that was actually

765
00:29:48,900 --> 00:29:52,710
sent along with that network request and

766
00:29:52,710 --> 00:29:54,300
in our case we're just going to return

767
00:29:54,300 --> 00:29:55,710
some fixture data it's going to be an

768
00:29:55,710 --> 00:29:59,880
array of one item that says my to do so

769
00:29:59,880 --> 00:30:02,820
if we run the test again we get a little

770
00:30:02,820 --> 00:30:05,700
bit further but it's still some errors

771
00:30:05,700 --> 00:30:09,600
so let's mock the post endpoint and do

772
00:30:09,600 --> 00:30:11,640
the same thing so we're gonna do the

773
00:30:11,640 --> 00:30:12,990
exact same thing we're gonna pass the

774
00:30:12,990 --> 00:30:15,120
same exact data back through and these

775
00:30:15,120 --> 00:30:18,030
tests well pass right in this exact

776
00:30:18,030 --> 00:30:20,760
configuration they will always pass no

777
00:30:20,760 --> 00:30:22,500
matter what you do

778
00:30:22,500 --> 00:30:27,000
since we're posting and getting the same

779
00:30:27,000 --> 00:30:29,670
exact data type or the data style it

780
00:30:29,670 --> 00:30:32,310
would always pass and fixtures just

781
00:30:32,310 --> 00:30:33,870
don't get us very far

782
00:30:33,870 --> 00:30:35,580
the second you need to test a different

783
00:30:35,580 --> 00:30:38,370
state of your application it's gonna get

784
00:30:38,370 --> 00:30:40,530
very complicated we managed fixtures and

785
00:30:40,530 --> 00:30:42,450
an application about three years ago and

786
00:30:42,450 --> 00:30:45,120
it was a nightmare to say the least so

787
00:30:45,120 --> 00:30:46,890
let's just do some dynamic factories

788
00:30:46,890 --> 00:30:48,630
factories allow us to create specific

789
00:30:48,630 --> 00:30:51,040
data as we need throughout

790
00:30:51,040 --> 00:30:53,110
our tests and have full control over the

791
00:30:53,110 --> 00:30:56,140
data so if we look back at our folder

792
00:30:56,140 --> 00:30:57,700
structure here we have two folders that

793
00:30:57,700 --> 00:31:00,160
we're going to care about here it's a we

794
00:31:00,160 --> 00:31:02,070
need to create a model and any factory

795
00:31:02,070 --> 00:31:05,110
in the very near future probably like in

796
00:31:05,110 --> 00:31:08,020
a week or two from now the CLI will take

797
00:31:08,020 --> 00:31:10,150
care of this for us but conference

798
00:31:10,150 --> 00:31:12,250
driven development isn't good enough for

799
00:31:12,250 --> 00:31:14,290
for me here so we have to mean then we

800
00:31:14,290 --> 00:31:17,410
water this up so we're gonna go into our

801
00:31:17,410 --> 00:31:18,940
models folder and our index file and

802
00:31:18,940 --> 00:31:20,919
we're going to uncomment and export the

803
00:31:20,919 --> 00:31:23,080
file that we're about to create and then

804
00:31:23,080 --> 00:31:24,010
we're going to go into our models

805
00:31:24,010 --> 00:31:26,740
directory and create it to do model and

806
00:31:26,740 --> 00:31:28,150
this is a place where you can create

807
00:31:28,150 --> 00:31:30,760
relationships to other models and other

808
00:31:30,760 --> 00:31:32,710
other data that you might have that your

809
00:31:32,710 --> 00:31:35,470
application has or epi might have but

810
00:31:35,470 --> 00:31:36,490
we're not doing anything special so

811
00:31:36,490 --> 00:31:37,720
we're just gonna extend the model and

812
00:31:37,720 --> 00:31:39,760
send it through we're gonna do the same

813
00:31:39,760 --> 00:31:42,070
thing with factories and index and then

814
00:31:42,070 --> 00:31:45,160
in our to do J's Factory we're gonna do

815
00:31:45,160 --> 00:31:47,350
we're gonna create a factory that

816
00:31:47,350 --> 00:31:50,230
matches the shape of our api's data I

817
00:31:50,230 --> 00:31:52,840
want to call out something here for the

818
00:31:52,840 --> 00:31:55,150
title you notice that we're using faker

819
00:31:55,150 --> 00:31:59,049
which we import from Vic tests Mirage to

820
00:31:59,049 --> 00:32:00,549
create something random so each time we

821
00:32:00,549 --> 00:32:02,530
create a factory it's gonna create a

822
00:32:02,530 --> 00:32:04,570
random title and at any given point if

823
00:32:04,570 --> 00:32:06,250
you want you can override these by

824
00:32:06,250 --> 00:32:07,840
passing a second argument to the create

825
00:32:07,840 --> 00:32:09,669
command and you can create whatever

826
00:32:09,669 --> 00:32:11,320
title you want whatever I do you want

827
00:32:11,320 --> 00:32:13,030
whatever could state that you want you

828
00:32:13,030 --> 00:32:15,700
have full control over that the last

829
00:32:15,700 --> 00:32:16,840
thing that we need to do is we need to

830
00:32:16,840 --> 00:32:19,210
uncomment imports and our big test

831
00:32:19,210 --> 00:32:22,299
networks start file so we're gonna go in

832
00:32:22,299 --> 00:32:24,760
and alliance 514 and set 16 and

833
00:32:24,760 --> 00:32:27,700
uncomment those and make sure that those

834
00:32:27,700 --> 00:32:29,200
those imports are being passed to the

835
00:32:29,200 --> 00:32:31,000
Mirage constructor like I said in a very

836
00:32:31,000 --> 00:32:32,890
very future that will be taken care of

837
00:32:32,890 --> 00:32:34,390
for you but if you do this right now you

838
00:32:34,390 --> 00:32:37,570
have to do it manually so now we can

839
00:32:37,570 --> 00:32:39,880
manage dynamic data creation we don't

840
00:32:39,880 --> 00:32:42,040
have to return fixtures from our API

841
00:32:42,040 --> 00:32:45,760
mocks anymore right so with this updated

842
00:32:45,760 --> 00:32:49,059
we are in our get we are destructuring

843
00:32:49,059 --> 00:32:51,220
the to dues collection from the schema

844
00:32:51,220 --> 00:32:54,429
that's passed to us and then since I get

845
00:32:54,429 --> 00:32:55,960
we're just going to return to dues at

846
00:32:55,960 --> 00:32:57,340
all I'll just return all of the to dues

847
00:32:57,340 --> 00:32:59,830
that are in the database which is the

848
00:32:59,830 --> 00:33:02,480
fake database right and then for our

849
00:33:02,480 --> 00:33:05,179
host we're going to do the same thing in

850
00:33:05,179 --> 00:33:06,290
destructuring out of the database

851
00:33:06,290 --> 00:33:08,450
collection but we're also going to use

852
00:33:08,450 --> 00:33:12,620
the request body from the request which

853
00:33:12,620 --> 00:33:14,240
is what's sent along with your post

854
00:33:14,240 --> 00:33:15,950
request and we're going to parse that

855
00:33:15,950 --> 00:33:18,650
and then create a new to do based off of

856
00:33:18,650 --> 00:33:20,179
that so it's all dynamic data for you

857
00:33:20,179 --> 00:33:22,070
and then in the middle there we do some

858
00:33:22,070 --> 00:33:23,570
updating of the record to make sure that

859
00:33:23,570 --> 00:33:26,000
has the right property on it that our

860
00:33:26,000 --> 00:33:28,700
API expects since we're using a MongoDB

861
00:33:28,700 --> 00:33:32,860
here so Mirage has a concept of

862
00:33:32,860 --> 00:33:35,510
scenarios where you can well create

863
00:33:35,510 --> 00:33:37,250
scenarios from the data that you need

864
00:33:37,250 --> 00:33:40,490
these can be really useful i we have an

865
00:33:40,490 --> 00:33:42,080
application that uses all of this and

866
00:33:42,080 --> 00:33:43,669
it's really nice when you're developing

867
00:33:43,669 --> 00:33:46,340
new features I keep on giving the

868
00:33:46,340 --> 00:33:48,440
client-side error handling example

869
00:33:48,440 --> 00:33:49,460
because that's something that I actually

870
00:33:49,460 --> 00:33:50,929
had to do I to make sure that I added

871
00:33:50,929 --> 00:33:53,450
all of those improperly responded to the

872
00:33:53,450 --> 00:33:56,600
API 500 errors so instead of actually

873
00:33:56,600 --> 00:33:58,280
going through and trying to make the API

874
00:33:58,280 --> 00:34:00,470
break I just created a Mirage scenario

875
00:34:00,470 --> 00:34:02,630
and went to town on making sure that all

876
00:34:02,630 --> 00:34:04,730
worked so we're going to create a

877
00:34:04,730 --> 00:34:07,220
default scenario which is created by the

878
00:34:07,220 --> 00:34:10,460
the CLI for you you can leave this blank

879
00:34:10,460 --> 00:34:13,129
this will create this data for each test

880
00:34:13,129 --> 00:34:14,929
run so be very sure this is what you

881
00:34:14,929 --> 00:34:18,139
want to do if not you can create data

882
00:34:18,139 --> 00:34:20,060
for your tests you need as you need when

883
00:34:20,060 --> 00:34:22,609
you go to write those tests so in this

884
00:34:22,609 --> 00:34:24,260
scenario we're just going to create four

885
00:34:24,260 --> 00:34:25,970
to do's and it's just going to create

886
00:34:25,970 --> 00:34:29,090
what's back and gave it so let's run the

887
00:34:29,090 --> 00:34:31,520
test this year well that's that's a

888
00:34:31,520 --> 00:34:34,570
weird error what's going on there oh

889
00:34:34,570 --> 00:34:35,720
okay

890
00:34:35,720 --> 00:34:38,480
so our response here from Mirage it has

891
00:34:38,480 --> 00:34:42,139
a root object on it right as a to do key

892
00:34:42,139 --> 00:34:44,210
and then inside of it an array of to

893
00:34:44,210 --> 00:34:45,980
Do's and we're not expecting that we're

894
00:34:45,980 --> 00:34:48,320
just expecting an array of objects so

895
00:34:48,320 --> 00:34:50,659
let's we need to serialize our data to

896
00:34:50,659 --> 00:34:52,429
match the shape that our API has that's

897
00:34:52,429 --> 00:34:54,169
create a serialize err Mirage you can do

898
00:34:54,169 --> 00:34:57,619
this for us so Mirage comes with three

899
00:34:57,619 --> 00:34:59,210
serializers out-of-the-box for you you

900
00:34:59,210 --> 00:35:01,310
can use a rest an active model or a JSON

901
00:35:01,310 --> 00:35:04,070
API to réaliser you can also write your

902
00:35:04,070 --> 00:35:05,270
own so you realize err if you really

903
00:35:05,270 --> 00:35:08,000
want what we're just gonna use the basic

904
00:35:08,000 --> 00:35:09,680
rest adapter here and

905
00:35:09,680 --> 00:35:11,609
the same story here you have to make

906
00:35:11,609 --> 00:35:13,200
sure the update your index file and I

907
00:35:13,200 --> 00:35:15,420
make sure you import that to the Mirage

908
00:35:15,420 --> 00:35:18,530
constructor so if we run the tests here

909
00:35:18,530 --> 00:35:21,150
they're gonna pass and we have some fake

910
00:35:21,150 --> 00:35:22,320
data in there so you can see that we

911
00:35:22,320 --> 00:35:24,090
have a bunch of faker created records

912
00:35:24,090 --> 00:35:27,359
there so congratulations we have

913
00:35:27,359 --> 00:35:29,070
successfully mocked the network layer of

914
00:35:29,070 --> 00:35:31,380
this really simple app that was a lot to

915
00:35:31,380 --> 00:35:34,350
cover there I know but it's fully setup

916
00:35:34,350 --> 00:35:35,850
with dynamic data that we can create

917
00:35:35,850 --> 00:35:38,160
control whatever test scenario we please

918
00:35:38,160 --> 00:35:41,100
like if we wanted to create 9002 dues we

919
00:35:41,100 --> 00:35:43,290
can do that I don't recommend it though

920
00:35:43,290 --> 00:35:46,680
it sounds like like a lot of anxiety so

921
00:35:46,680 --> 00:35:48,660
now we can fill in the rest of our tests

922
00:35:48,660 --> 00:35:50,820
things like editing toggling deleting

923
00:35:50,820 --> 00:35:53,400
whatever you want to do with - dues so

924
00:35:53,400 --> 00:35:55,650
nested interactors are pretty awesome

925
00:35:55,650 --> 00:35:57,690
right so you can see they're on lines 4

926
00:35:57,690 --> 00:36:01,560
to 7 we're doing some some nesting calls

927
00:36:01,560 --> 00:36:03,570
to our to-do item interactor that we

928
00:36:03,570 --> 00:36:06,930
created but writing to-do lists zero for

929
00:36:06,930 --> 00:36:07,980
each interaction that we're gonna

930
00:36:07,980 --> 00:36:09,780
perform is a little bit verbose and a

931
00:36:09,780 --> 00:36:13,020
little bit annoying so let's let's not

932
00:36:13,020 --> 00:36:15,300
do that and interactor provides us a way

933
00:36:15,300 --> 00:36:17,100
to not have to do that we can just pass

934
00:36:17,100 --> 00:36:20,010
and only after the chained interactor or

935
00:36:20,010 --> 00:36:22,320
the Nessen interactor and now all the

936
00:36:22,320 --> 00:36:23,430
interactions that we have under there

937
00:36:23,430 --> 00:36:25,560
which is a double click filling the

938
00:36:25,560 --> 00:36:27,480
input and then press enter will all

939
00:36:27,480 --> 00:36:29,940
happen on the nested a nested interactor

940
00:36:29,940 --> 00:36:37,500
there so let's skip the slide so this is

941
00:36:37,500 --> 00:36:39,570
what our mocking endpoint looks like for

942
00:36:39,570 --> 00:36:42,660
the edit which is a patch and deleting

943
00:36:42,660 --> 00:36:45,600
which is a delete we're going to find

944
00:36:45,600 --> 00:36:51,119
the parameter in our database collection

945
00:36:51,119 --> 00:36:52,650
and then just pass it along and update

946
00:36:52,650 --> 00:36:54,030
it with the attributes that are given in

947
00:36:54,030 --> 00:36:56,790
the request and then similar story for

948
00:36:56,790 --> 00:36:58,200
the delete we're gonna look up the

949
00:36:58,200 --> 00:36:59,970
request ID and then actually just

950
00:36:59,970 --> 00:37:01,710
destroy and then return the collection

951
00:37:01,710 --> 00:37:05,340
that has the destroyed look so let's go

952
00:37:05,340 --> 00:37:09,300
run our tests we have about 13 tests

953
00:37:09,300 --> 00:37:10,890
here I didn't write a full-on test suite

954
00:37:10,890 --> 00:37:12,700
but I could have

955
00:37:12,700 --> 00:37:16,010
and I think those run pretty fast and so

956
00:37:16,010 --> 00:37:18,290
you don't think I'm lying to you here is

957
00:37:18,290 --> 00:37:22,130
big test running an iOS Safari Firefox

958
00:37:22,130 --> 00:37:26,060
and Chrome also here so these are all

959
00:37:26,060 --> 00:37:27,890
running our tests anywhere there's a

960
00:37:27,890 --> 00:37:29,210
browser you could actually run this on a

961
00:37:29,210 --> 00:37:32,590
physical device so like if you had my

962
00:37:32,590 --> 00:37:35,270
network IP address and I started the

963
00:37:35,270 --> 00:37:37,070
server you all could start running tests

964
00:37:37,070 --> 00:37:40,370
just by visiting that URL so you can

965
00:37:40,370 --> 00:37:41,840
find the full suite I can't fit it all

966
00:37:41,840 --> 00:37:45,800
into a slide here at my github Rockdale

967
00:37:45,800 --> 00:37:48,500
12 and big desk to do MVC so you can

968
00:37:48,500 --> 00:37:53,060
check that out so we did it we set up

969
00:37:53,060 --> 00:37:55,100
two MVC running big tests running in

970
00:37:55,100 --> 00:37:58,400
cross browser and we learned how to what

971
00:37:58,400 --> 00:38:00,170
interactor is we mocked our entire

972
00:38:00,170 --> 00:38:01,310
network layers so we don't have to

973
00:38:01,310 --> 00:38:04,400
actually talk to a real network and we

974
00:38:04,400 --> 00:38:07,450
wrote some big tests so coming back to

975
00:38:07,450 --> 00:38:09,440
complicated problems needs simple

976
00:38:09,440 --> 00:38:12,040
examples I want to show a couple more

977
00:38:12,040 --> 00:38:14,270
examples of what big test looks like in

978
00:38:14,270 --> 00:38:16,310
interactors in a real production app

979
00:38:16,310 --> 00:38:18,230
that we've been developing for one of

980
00:38:18,230 --> 00:38:20,660
our clients so the first one would be

981
00:38:20,660 --> 00:38:24,440
here where we're actually creating data

982
00:38:24,440 --> 00:38:26,480
that we specifically need for this test

983
00:38:26,480 --> 00:38:29,000
so we're testing that this thing called

984
00:38:29,000 --> 00:38:30,260
a resource I'm not going to get into the

985
00:38:30,260 --> 00:38:31,400
data model of this application because

986
00:38:31,400 --> 00:38:33,110
it's really complicated but we're gonna

987
00:38:33,110 --> 00:38:34,850
create a resource and create that it's

988
00:38:34,850 --> 00:38:35,930
hidden and we're going to make some

989
00:38:35,930 --> 00:38:38,000
assertions that in the UI that it

990
00:38:38,000 --> 00:38:40,430
actually hides this thing from us and

991
00:38:40,430 --> 00:38:42,290
then when we create that data we're

992
00:38:42,290 --> 00:38:44,660
going to visit the URL of that data

993
00:38:44,660 --> 00:38:48,080
that's created so on line 5 we set the

994
00:38:48,080 --> 00:38:51,800
resource variable equal to the data that

995
00:38:51,800 --> 00:38:54,440
we created and then when we visit that

996
00:38:54,440 --> 00:38:56,750
route on line 11 we're actually picking

997
00:38:56,750 --> 00:38:58,550
the ID off that that record that we

998
00:38:58,550 --> 00:39:00,440
created and visiting it so it's the it's

999
00:39:00,440 --> 00:39:03,820
a full control over the data there I

1000
00:39:03,820 --> 00:39:06,470
wanted to show you what filling in a

1001
00:39:06,470 --> 00:39:09,110
form looks like with an interactive so

1002
00:39:09,110 --> 00:39:12,530
we can change things as long as we want

1003
00:39:12,530 --> 00:39:14,480
here and the thing I kinda want to point

1004
00:39:14,480 --> 00:39:16,910
out here is this is interacting with a

1005
00:39:16,910 --> 00:39:18,920
date picker component which is actually

1006
00:39:18,920 --> 00:39:20,510
taken from our component library that's

1007
00:39:20,510 --> 00:39:22,099
shared between many like

1008
00:39:22,099 --> 00:39:23,839
ten or fifteen other UI applications

1009
00:39:23,839 --> 00:39:25,849
when we just import that interactor and

1010
00:39:25,849 --> 00:39:27,499
then just using our test suite we didn't

1011
00:39:27,499 --> 00:39:29,059
have to write interactions for how to

1012
00:39:29,059 --> 00:39:31,009
fill in and in a date picker for

1013
00:39:31,009 --> 00:39:32,269
selecting dates or anything like that

1014
00:39:32,269 --> 00:39:33,499
because that was already written for us

1015
00:39:33,499 --> 00:39:36,319
when we built the the component in our

1016
00:39:36,319 --> 00:39:39,170
component library so we fill in what

1017
00:39:39,170 --> 00:39:40,460
we're doing here is we're testing that

1018
00:39:40,460 --> 00:39:44,359
the application when we fill in a bunch

1019
00:39:44,359 --> 00:39:45,710
of bad data it'll give us client-side

1020
00:39:45,710 --> 00:39:48,229
errors so this is what the tests looked

1021
00:39:48,229 --> 00:39:50,269
like when they run as soon as I

1022
00:39:50,269 --> 00:39:52,720
interacted like interaction pops in and

1023
00:39:52,720 --> 00:39:55,460
we assert that those errors exist on the

1024
00:39:55,460 --> 00:39:58,700
page and the last one I wanted to give

1025
00:39:58,700 --> 00:40:00,799
as a more complicated example as

1026
00:40:00,799 --> 00:40:02,329
accessibility because I love

1027
00:40:02,329 --> 00:40:04,549
accessibility it's very near and dear to

1028
00:40:04,549 --> 00:40:07,220
my heart and this application we're

1029
00:40:07,220 --> 00:40:09,049
we're testing that our focus management

1030
00:40:09,049 --> 00:40:11,119
for the single page app actually still

1031
00:40:11,119 --> 00:40:15,769
works so when we travel our routes we're

1032
00:40:15,769 --> 00:40:17,119
making sure that it's focusing the

1033
00:40:17,119 --> 00:40:19,400
proper thing from each route transition

1034
00:40:19,400 --> 00:40:22,489
and making sure that it when we go from

1035
00:40:22,489 --> 00:40:23,960
one route on the transition back it's

1036
00:40:23,960 --> 00:40:25,339
selecting the the right item and an

1037
00:40:25,339 --> 00:40:28,969
infinite scrolling list so that's this

1038
00:40:28,969 --> 00:40:32,690
is what these tests look like so it's

1039
00:40:32,690 --> 00:40:33,979
running through all those navigating

1040
00:40:33,979 --> 00:40:35,299
routes going back and forth and making

1041
00:40:35,299 --> 00:40:36,829
sure that the focus is actually still

1042
00:40:36,829 --> 00:40:37,190
there

1043
00:40:37,190 --> 00:40:40,789
so I singled those tests out for you if

1044
00:40:40,789 --> 00:40:42,710
you want to see this application it's a

1045
00:40:42,710 --> 00:40:45,200
hundred percent open source so this is

1046
00:40:45,200 --> 00:40:47,150
where it lives its folio org folio

1047
00:40:47,150 --> 00:40:48,650
stands for the future of libraries is

1048
00:40:48,650 --> 00:40:51,440
open and we're building the holdings

1049
00:40:51,440 --> 00:40:53,719
application this app uses big tests

1050
00:40:53,719 --> 00:40:54,799
that's actually where big test was

1051
00:40:54,799 --> 00:40:57,559
developed it has over a thousand UI

1052
00:40:57,559 --> 00:40:59,930
tests and they all run about six minutes

1053
00:40:59,930 --> 00:41:02,930
on CI which are slower machines and your

1054
00:41:02,930 --> 00:41:04,039
local machine

1055
00:41:04,039 --> 00:41:06,559
we have 96% test coverage there we have

1056
00:41:06,559 --> 00:41:08,210
all kinds of tests there ranging from

1057
00:41:08,210 --> 00:41:09,680
all kinds of complexity so if you want

1058
00:41:09,680 --> 00:41:11,359
to dip your toes in and see what that

1059
00:41:11,359 --> 00:41:14,059
actually looks like go ahead and take a

1060
00:41:14,059 --> 00:41:16,759
look there are they're about like five

1061
00:41:16,759 --> 00:41:20,029
unit tests there and that's for testing

1062
00:41:20,029 --> 00:41:23,690
the Redux relationship merging so the

1063
00:41:23,690 --> 00:41:25,609
one question I get a lot is what about

1064
00:41:25,609 --> 00:41:28,130
graphic UL well with graph QL it's

1065
00:41:28,130 --> 00:41:29,869
actually even easier to use with big

1066
00:41:29,869 --> 00:41:32,089
tests and mock your data layer they have

1067
00:41:32,089 --> 00:41:33,890
helpers out there for creating a mock

1068
00:41:33,890 --> 00:41:34,820
server and

1069
00:41:34,820 --> 00:41:36,560
QL has a schema you just pass your

1070
00:41:36,560 --> 00:41:38,750
schema from your your epi and it can

1071
00:41:38,750 --> 00:41:39,980
come off all that data for you so you

1072
00:41:39,980 --> 00:41:42,980
just skip more lunch basically so

1073
00:41:42,980 --> 00:41:45,230
interactors are awesome and it seems

1074
00:41:45,230 --> 00:41:46,460
like they're a great pairing for testing

1075
00:41:46,460 --> 00:41:49,100
just components and you absolutely can

1076
00:41:49,100 --> 00:41:51,020
do that and we do do that like I

1077
00:41:51,020 --> 00:41:52,760
mentioned earlier so instead of

1078
00:41:52,760 --> 00:41:56,060
importing the setup app for testing

1079
00:41:56,060 --> 00:41:58,000
we're going to import the amount

1080
00:41:58,000 --> 00:42:00,260
component and a helper and we're just

1081
00:42:00,260 --> 00:42:03,790
going to mount a component here and I

1082
00:42:03,790 --> 00:42:05,870
wanted to point this one out so it's

1083
00:42:05,870 --> 00:42:08,360
from the same component here we're we're

1084
00:42:08,360 --> 00:42:10,880
passing a prop here called warning and

1085
00:42:10,880 --> 00:42:12,560
then on line 13 we're asserting that

1086
00:42:12,560 --> 00:42:15,020
that Prop exists with a feedback text

1087
00:42:15,020 --> 00:42:17,480
item on our interactor and if you look

1088
00:42:17,480 --> 00:42:20,390
at feedback text here on line 22 it's

1089
00:42:20,390 --> 00:42:22,010
actually using a CSS module so

1090
00:42:22,010 --> 00:42:24,440
interactors work with CSS modules -

1091
00:42:24,440 --> 00:42:26,480
those were built with in mind with them

1092
00:42:26,480 --> 00:42:28,430
in mind so you can just import those CSS

1093
00:42:28,430 --> 00:42:31,010
modules and use them as selectors so you

1094
00:42:31,010 --> 00:42:32,840
can get started by visiting big tests GS

1095
00:42:32,840 --> 00:42:36,680
do the CLI isn't quite ready yet but

1096
00:42:36,680 --> 00:42:39,320
give it like a week and we'll be there I

1097
00:42:39,320 --> 00:42:42,290
promise and big test is still in its

1098
00:42:42,290 --> 00:42:43,610
early days and we would love to have you

1099
00:42:43,610 --> 00:42:45,110
as a contributor if you're interested

1100
00:42:45,110 --> 00:42:48,110
I'm always open to pair and and help

1101
00:42:48,110 --> 00:42:51,110
people get there getting into it and get

1102
00:42:51,110 --> 00:42:53,390
their feet wet I love I love working

1103
00:42:53,390 --> 00:42:55,640
with anybody in the community so we

1104
00:42:55,640 --> 00:42:56,900
still have a lot of work to do this is

1105
00:42:56,900 --> 00:42:59,240
what our fully fleshed out emoji map

1106
00:42:59,240 --> 00:43:02,150
looks like so with zero config in mind

1107
00:43:02,150 --> 00:43:03,920
we want to build CLI that will handle

1108
00:43:03,920 --> 00:43:05,960
all the most mundane tasks for you you

1109
00:43:05,960 --> 00:43:07,760
don't so you can focus on writing tests

1110
00:43:07,760 --> 00:43:10,070
boilerplate snow fun we want to have

1111
00:43:10,070 --> 00:43:12,710
computers take care of that for you CLI

1112
00:43:12,710 --> 00:43:15,370
will also help and take care of

1113
00:43:15,370 --> 00:43:17,180
launching for you so you don't have to

1114
00:43:17,180 --> 00:43:18,560
use karma or test them but if you would

1115
00:43:18,560 --> 00:43:20,600
like you can still use those launchers

1116
00:43:20,600 --> 00:43:24,080
for your project also if you want the

1117
00:43:24,080 --> 00:43:25,250
last two items on this list are

1118
00:43:25,250 --> 00:43:27,770
longer-term goals we want to replace

1119
00:43:27,770 --> 00:43:29,300
mirage with something more modern that

1120
00:43:29,300 --> 00:43:31,400
uses serviceworkers and intercept

1121
00:43:31,400 --> 00:43:33,470
network requests so you have full access

1122
00:43:33,470 --> 00:43:37,550
to your network pane but for now mirage

1123
00:43:37,550 --> 00:43:40,310
does an amazing job for us and we don't

1124
00:43:40,310 --> 00:43:41,540
need to replace that so that's a

1125
00:43:41,540 --> 00:43:43,190
longer-term goal we have a lot of cool

1126
00:43:43,190 --> 00:43:44,660
ideas for what we can do with service

1127
00:43:44,660 --> 00:43:46,280
workers but

1128
00:43:46,280 --> 00:43:48,080
that's in the future and the last one

1129
00:43:48,080 --> 00:43:50,180
which is even further out maybe like mid

1130
00:43:50,180 --> 00:43:53,660
or early 2019 would be writing our own

1131
00:43:53,660 --> 00:43:55,880
runner so while you can still use it

1132
00:43:55,880 --> 00:43:57,860
with mocha or jasmine or jest or

1133
00:43:57,860 --> 00:43:59,390
whatever you want we want to write our

1134
00:43:59,390 --> 00:44:01,490
own runner that we can smartly split

1135
00:44:01,490 --> 00:44:02,900
your tests and paralyze them to make it

1136
00:44:02,900 --> 00:44:05,570
even faster like like I said we have

1137
00:44:05,570 --> 00:44:07,940
like 1,200 1,100 tests and that sweet

1138
00:44:07,940 --> 00:44:09,350
and they run in about six minutes we

1139
00:44:09,350 --> 00:44:10,580
think we can probably cut that down to

1140
00:44:10,580 --> 00:44:13,640
about two and we're looking at adding

1141
00:44:13,640 --> 00:44:16,400
other features like recording or honest

1142
00:44:16,400 --> 00:44:20,360
fail or screenshotting on fail but those

1143
00:44:20,360 --> 00:44:21,800
are further down the road I would like

1144
00:44:21,800 --> 00:44:23,780
to give a big thanks to will Lisbon he

1145
00:44:23,780 --> 00:44:27,350
basically wrote big tests himself I have

1146
00:44:27,350 --> 00:44:29,510
helped a little bit but this is all

1147
00:44:29,510 --> 00:44:31,610
mostly his work so I'd like to give big

1148
00:44:31,610 --> 00:44:33,440
thanks to him and I'd like you to give a

1149
00:44:33,440 --> 00:44:35,150
big thanks to front side for sponsoring

1150
00:44:35,150 --> 00:44:36,440
all the work on this for us to be able

1151
00:44:36,440 --> 00:44:38,690
to do it so thanks

