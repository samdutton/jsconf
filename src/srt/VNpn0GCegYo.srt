1
00:00:07,240 --> 00:00:09,410

so fuzzy thank you for having me

2
00:00:09,410 --> 00:00:11,419
pictures you inviting me Nicole Leah

3
00:00:11,419 --> 00:00:13,190
Chris this has been an amazing

4
00:00:13,190 --> 00:00:15,230
conference I've been amazed by the

5
00:00:15,230 --> 00:00:17,000
location and all of the guests and all

6
00:00:17,000 --> 00:00:19,360
the talks have been having so thank you

7
00:00:19,360 --> 00:00:22,040
so I'm Patrick Hammond as Jen mentioned

8
00:00:22,040 --> 00:00:24,050
you can get me on twitter there and i'm

9
00:00:24,050 --> 00:00:26,330
here to talk to you today about CSS and

10
00:00:26,330 --> 00:00:27,950
the critical path now what does that

11
00:00:27,950 --> 00:00:30,170
mean i don't really know I hope you'll

12
00:00:30,170 --> 00:00:31,400
know what that means by the end of this

13
00:00:31,400 --> 00:00:34,070
talk so as done mentioned it's a talker

14
00:00:34,070 --> 00:00:36,800
it's really a bit of a ruse I'm here CSS

15
00:00:36,800 --> 00:00:39,050
confer I'm actually here not really to

16
00:00:39,050 --> 00:00:40,969
talk to you about CSS but more about

17
00:00:40,969 --> 00:00:42,499
performance and importance but

18
00:00:42,499 --> 00:00:45,739
importantly how CSS is intertwined and

19
00:00:45,739 --> 00:00:48,050
tightly coupled with our critical path

20
00:00:48,050 --> 00:00:49,999
the path from which a browser takes to

21
00:00:49,999 --> 00:00:52,069
render to our screen so have you haven't

22
00:00:52,069 --> 00:00:54,039
guessed already a work for the Guardian

23
00:00:54,039 --> 00:00:58,489
it's a national UK newspaper which is

24
00:00:58,489 --> 00:01:00,889
now a international media organization

25
00:01:00,889 --> 00:01:03,229
we have offices in New York Australia

26
00:01:03,229 --> 00:01:05,930
and London and and I work on the cool

27
00:01:05,930 --> 00:01:07,219
web team there which were helping to

28
00:01:07,219 --> 00:01:08,689
make the next generation of the Guardian

29
00:01:08,689 --> 00:01:10,340
website we've spent the last 18 months

30
00:01:10,340 --> 00:01:13,670
completely re-engineering from scratch

31
00:01:13,670 --> 00:01:15,770
the Guardian website used to be before

32
00:01:15,770 --> 00:01:17,990
horrible large Java and monolithic

33
00:01:17,990 --> 00:01:20,270
application and we're now moving to a

34
00:01:20,270 --> 00:01:23,119
mobile-first responsive website as Brad

35
00:01:23,119 --> 00:01:24,969
force one scrape coined the phrase

36
00:01:24,969 --> 00:01:27,380
planting the responsive seed it's very

37
00:01:27,380 --> 00:01:30,859
hard for large organizations to shift to

38
00:01:30,859 --> 00:01:33,320
responsive so actually we kind of took

39
00:01:33,320 --> 00:01:35,930
tiptoed along the way we first replace

40
00:01:35,930 --> 00:01:38,329
our end sub domain with a responsive

41
00:01:38,329 --> 00:01:39,799
site which it's going to become the

42
00:01:39,799 --> 00:01:41,810
platform on the basis to take eventually

43
00:01:41,810 --> 00:01:43,340
hopefully this summer we're going to

44
00:01:43,340 --> 00:01:45,439
completely remove the old site and have

45
00:01:45,439 --> 00:01:49,609
one single platform and so today I'm

46
00:01:49,609 --> 00:01:50,929
going to talk to you about some of the

47
00:01:50,929 --> 00:01:54,829
lessons I've learnt building this last

48
00:01:54,829 --> 00:01:56,509
month we broke a record at the Guardian

49
00:01:56,509 --> 00:01:58,700
we had 100 million unique users within

50
00:01:58,700 --> 00:02:00,829
the first month that makes us now one of

51
00:02:00,829 --> 00:02:02,240
the largest new yours I license in the

52
00:02:02,240 --> 00:02:05,960
world but on the flip side of that those

53
00:02:05,960 --> 00:02:08,240
100 million are being made up of

54
00:02:08,240 --> 00:02:10,909
accessing our site from over 6,000

55
00:02:10,909 --> 00:02:13,459
different devices and our current

56
00:02:13,459 --> 00:02:14,060
platform

57
00:02:14,060 --> 00:02:15,770
the old site is there for 10 years

58
00:02:15,770 --> 00:02:18,560
wasn't designed they can't cater for

59
00:02:18,560 --> 00:02:21,349
this array of devices and it's just not

60
00:02:21,349 --> 00:02:23,000
acceptable what we are serving to these

61
00:02:23,000 --> 00:02:25,010
devices and we had to do something about

62
00:02:25,010 --> 00:02:27,739
that but more importantly the site is

63
00:02:27,739 --> 00:02:31,700
extremely slow so here you'll see on the

64
00:02:31,700 --> 00:02:33,349
left-hand side our old site and the

65
00:02:33,349 --> 00:02:35,510
right-hand side our new site and the

66
00:02:35,510 --> 00:02:36,950
difference in the rendering speed

67
00:02:36,950 --> 00:02:39,290
between the two of them just hit see how

68
00:02:39,290 --> 00:02:41,750
how what you think yourself so within

69
00:02:41,750 --> 00:02:43,910
three seconds we've finished painting

70
00:02:43,910 --> 00:02:45,500
and rendering and freely complete

71
00:02:45,500 --> 00:02:47,780
loading of the whole site whilst we're

72
00:02:47,780 --> 00:02:50,989
still chugging along on the outside and

73
00:02:50,989 --> 00:02:53,480
that that's a median average it takes 12

74
00:02:53,480 --> 00:02:56,030
seconds to paint and finish loading of

75
00:02:56,030 --> 00:02:58,400
our website to the user now I just don't

76
00:02:58,400 --> 00:03:00,560
think that's acceptable and I hope you

77
00:03:00,560 --> 00:03:02,420
guys don't too but you know it's not

78
00:03:02,420 --> 00:03:04,549
just us at the Guardian see this problem

79
00:03:04,549 --> 00:03:07,010
use the low time expectations us as uses

80
00:03:07,010 --> 00:03:09,620
our expectation of how fast a web site

81
00:03:09,620 --> 00:03:11,810
takes a render is reducing you know from

82
00:03:11,810 --> 00:03:13,819
2,000 it was nine seconds all the way

83
00:03:13,819 --> 00:03:16,790
until 2012 it's just two seconds that

84
00:03:16,790 --> 00:03:19,250
your users expect your website to load

85
00:03:19,250 --> 00:03:21,950
in and again the problems not just ours

86
00:03:21,950 --> 00:03:24,650
this is for taken from mates be archived

87
00:03:24,650 --> 00:03:26,630
or great Google initiative that they

88
00:03:26,630 --> 00:03:28,940
index data from the top two hundred

89
00:03:28,940 --> 00:03:31,160
thousand websites and I ran this query

90
00:03:31,160 --> 00:03:34,459
on big queries last month to ask ask it

91
00:03:34,459 --> 00:03:36,739
hey what is the speed index I eat the

92
00:03:36,739 --> 00:03:39,920
speed index is a metric that is in

93
00:03:39,920 --> 00:03:42,319
milliseconds how fast your site takes

94
00:03:42,319 --> 00:03:44,510
the fully render and the top ten

95
00:03:44,510 --> 00:03:46,310
thousand websites the median average is

96
00:03:46,310 --> 00:03:48,200
nine thousand milliseconds right nine

97
00:03:48,200 --> 00:03:51,769
seconds whereas we know that our users

98
00:03:51,769 --> 00:03:54,920
want it to load in under two can you see

99
00:03:54,920 --> 00:03:57,079
where I'm going here with this so but

100
00:03:57,079 --> 00:03:58,730
the Guardian you know how we have to

101
00:03:58,730 --> 00:04:00,319
relate this back to our business so when

102
00:04:00,319 --> 00:04:01,940
we are starting out on the new projects

103
00:04:01,940 --> 00:04:05,120
we surveyed 3,000 of our users and ask

104
00:04:05,120 --> 00:04:08,660
them about 17 core KPIs product

105
00:04:08,660 --> 00:04:10,430
indicators of which one of them was

106
00:04:10,430 --> 00:04:13,760
speed and unsurprisingly to me those

107
00:04:13,760 --> 00:04:15,980
users rated speed as a feature the

108
00:04:15,980 --> 00:04:18,350
second most important thing only after

109
00:04:18,350 --> 00:04:21,620
easy to find content you'd hope on a

110
00:04:21,620 --> 00:04:23,599
news website that the content is easy to

111
00:04:23,599 --> 00:04:25,909
find although that did surprise the

112
00:04:25,909 --> 00:04:27,470
business though but it was great for me

113
00:04:27,470 --> 00:04:27,920
because

114
00:04:27,920 --> 00:04:30,200
allowed as a leverage to really drill

115
00:04:30,200 --> 00:04:31,940
into them that we need to make this new

116
00:04:31,940 --> 00:04:35,960
platform fast and it's not just that as

117
00:04:35,960 --> 00:04:37,370
well there's have been a lot of HCI

118
00:04:37,370 --> 00:04:39,290
research recently that has gone into the

119
00:04:39,290 --> 00:04:40,910
fact that the cognitive levels of us as

120
00:04:40,910 --> 00:04:43,910
users how how we perceive speed on

121
00:04:43,910 --> 00:04:46,450
machines this is taken from Illig agaric

122
00:04:46,450 --> 00:04:48,380
high-performance browser networking he

123
00:04:48,380 --> 00:04:50,600
works on the Google make web faster team

124
00:04:50,600 --> 00:04:53,000
it's a strongly advise you read that

125
00:04:53,000 --> 00:04:55,820
book but here it says that for a mission

126
00:04:55,820 --> 00:04:57,800
for us as uses for field that a machine

127
00:04:57,800 --> 00:05:00,470
is actually functioning and working any

128
00:05:00,470 --> 00:05:03,290
action you perform must respond within a

129
00:05:03,290 --> 00:05:05,840
thousand milliseconds 1000 milliseconds

130
00:05:05,840 --> 00:05:07,460
and that's not just you can't just

131
00:05:07,460 --> 00:05:08,600
relate that to websites you can relate

132
00:05:08,600 --> 00:05:10,400
that at home I'm sitting on the couch on

133
00:05:10,400 --> 00:05:12,800
watching TV I change the TV channel I

134
00:05:12,800 --> 00:05:15,290
want that TV that TV needs to respond

135
00:05:15,290 --> 00:05:17,240
within a thousand milliseconds for me to

136
00:05:17,240 --> 00:05:19,370
deem the machine working and after 10

137
00:05:19,370 --> 00:05:21,980
seconds but my mental subconscious just

138
00:05:21,980 --> 00:05:23,510
moves on and that task is completely

139
00:05:23,510 --> 00:05:27,500
abandoned and so Tim cowlicks been

140
00:05:27,500 --> 00:05:28,640
talking about this a lot recent so you

141
00:05:28,640 --> 00:05:30,560
talked so now we know that a thousand

142
00:05:30,560 --> 00:05:31,790
milliseconds is what we're trying to

143
00:05:31,790 --> 00:05:34,670
reach our website should render within a

144
00:05:34,670 --> 00:05:36,950
thousand milliseconds what if we were to

145
00:05:36,950 --> 00:05:39,230
set a budget to enforce that in our

146
00:05:39,230 --> 00:05:41,540
development workflow every new feature

147
00:05:41,540 --> 00:05:45,410
every new page we make has to hit that

148
00:05:45,410 --> 00:05:48,290
budget so that's exactly what we did at

149
00:05:48,290 --> 00:05:49,670
the Guardian we've set ourselves a

150
00:05:49,670 --> 00:05:51,890
budget of ensuring that all pages render

151
00:05:51,890 --> 00:05:54,590
within a thousand milliseconds no longer

152
00:05:54,590 --> 00:05:57,500
we can think in seconds as web

153
00:05:57,500 --> 00:05:59,240
developers we really need to start

154
00:05:59,240 --> 00:06:03,110
thinking in milliseconds so let's dive a

155
00:06:03,110 --> 00:06:04,640
little bit deeper into this for us to be

156
00:06:04,640 --> 00:06:06,530
able to understand how we can paint

157
00:06:06,530 --> 00:06:07,760
within a thousand milliseconds we need

158
00:06:07,760 --> 00:06:09,740
to understand what's going on in behind

159
00:06:09,740 --> 00:06:12,260
the scenes how the browser goes from

160
00:06:12,260 --> 00:06:13,730
that and you clicking on that link to

161
00:06:13,730 --> 00:06:15,470
being able to paint on the screen but

162
00:06:15,470 --> 00:06:18,200
also knowing how the browser works makes

163
00:06:18,200 --> 00:06:19,910
us as web developers make better

164
00:06:19,910 --> 00:06:22,910
decisions when we build our web

165
00:06:22,910 --> 00:06:25,310
applications so hopefully you will see

166
00:06:25,310 --> 00:06:28,160
one of these before this is a waterfall

167
00:06:28,160 --> 00:06:29,720
chart taken from web page test as a

168
00:06:29,720 --> 00:06:32,060
segment explaining the network each bit

169
00:06:32,060 --> 00:06:34,220
of the network's made up the DNS lookup

170
00:06:34,220 --> 00:06:36,230
so converting the nice the Guardian com

171
00:06:36,230 --> 00:06:39,320
string into an IP address we then can go

172
00:06:39,320 --> 00:06:40,610
the computer can use that IP address

173
00:06:40,610 --> 00:06:41,540
again make a tee

174
00:06:41,540 --> 00:06:43,670
TP socket connection a freeway handshake

175
00:06:43,670 --> 00:06:46,070
and then finally I can make the actual

176
00:06:46,070 --> 00:06:47,870
Haiti request i can say hey give me

177
00:06:47,870 --> 00:06:50,630
index dot HTML and when the server deals

178
00:06:50,630 --> 00:06:52,430
of that it responds and finally we can

179
00:06:52,430 --> 00:06:54,560
download the content and so all of that

180
00:06:54,560 --> 00:06:57,380
has to happen before we can even start

181
00:06:57,380 --> 00:07:01,640
creating a Dom but our physical tavera

182
00:07:01,640 --> 00:07:04,010
files a millisecond barrier 600

183
00:07:04,010 --> 00:07:06,170
milliseconds of that on average is

184
00:07:06,170 --> 00:07:07,790
already taken up this is on a free

185
00:07:07,790 --> 00:07:10,820
average 3g mobile connection 600 of that

186
00:07:10,820 --> 00:07:14,090
is already taken up by latency we've

187
00:07:14,090 --> 00:07:15,980
heard this before latency is the biggest

188
00:07:15,980 --> 00:07:18,530
killer to performance and especially on

189
00:07:18,530 --> 00:07:20,630
mobile so every network you request you

190
00:07:20,630 --> 00:07:22,460
make you're incurring the 600

191
00:07:22,460 --> 00:07:24,320
milliseconds and so that leaves us with

192
00:07:24,320 --> 00:07:26,930
only 400 milliseconds to really paint to

193
00:07:26,930 --> 00:07:28,940
the screen and now you start to think of

194
00:07:28,940 --> 00:07:33,500
how important it is to rendering so this

195
00:07:33,500 --> 00:07:35,480
is being very simplified but this is

196
00:07:35,480 --> 00:07:37,880
what the critical rendering path is this

197
00:07:37,880 --> 00:07:39,440
is what your browser has to go through

198
00:07:39,440 --> 00:07:41,540
to be able to paint for to the screen so

199
00:07:41,540 --> 00:07:42,920
let's look a bit deeper than that so I

200
00:07:42,920 --> 00:07:45,470
asked for my index page I perform the

201
00:07:45,470 --> 00:07:47,080
network on it incur the 600 milliseconds

202
00:07:47,080 --> 00:07:50,030
once I've got the HTML fortunately i can

203
00:07:50,030 --> 00:07:52,100
start parsing the HTML and creating a

204
00:07:52,100 --> 00:07:53,870
Dom structure now one of the greatest

205
00:07:53,870 --> 00:07:55,640
things about the HTML spec is that a

206
00:07:55,640 --> 00:07:57,740
dumb construction and hates them are

207
00:07:57,740 --> 00:07:59,570
pausing can happen incrementally so we

208
00:07:59,570 --> 00:08:01,310
don't have to wait for the whole file to

209
00:08:01,310 --> 00:08:02,600
be downloaded we can actually start

210
00:08:02,600 --> 00:08:04,850
creating the Dom as the packets come in

211
00:08:04,850 --> 00:08:07,130
and this is amazing feature so I'm

212
00:08:07,130 --> 00:08:08,990
sitting there I packets come in I'm

213
00:08:08,990 --> 00:08:11,030
constructing a DOM and boom my browser

214
00:08:11,030 --> 00:08:13,310
hits a script or a link element it has

215
00:08:13,310 --> 00:08:15,110
to stop it can't construct the Dom

216
00:08:15,110 --> 00:08:17,270
anymore had to stop blocking it has to

217
00:08:17,270 --> 00:08:19,700
go back and perform the networking to go

218
00:08:19,700 --> 00:08:22,130
and get that CSS file so I download the

219
00:08:22,130 --> 00:08:23,960
CSS file to create the CSS object model

220
00:08:23,960 --> 00:08:26,150
now the CSS object model and the Dom

221
00:08:26,150 --> 00:08:27,860
together create a render tree said

222
00:08:27,860 --> 00:08:29,390
another tree like structure that has all

223
00:08:29,390 --> 00:08:30,710
of the information about the nodes on

224
00:08:30,710 --> 00:08:32,479
your page from the top left to bottom

225
00:08:32,479 --> 00:08:36,740
right and but the due to the cascading

226
00:08:36,740 --> 00:08:39,620
nature of CSS we can't parse the CSS

227
00:08:39,620 --> 00:08:41,450
incrementally like we did with the HTML

228
00:08:41,450 --> 00:08:43,490
file because of the Cascade so styles at

229
00:08:43,490 --> 00:08:44,900
the top of the page might be overwritten

230
00:08:44,900 --> 00:08:46,850
further down in a media query or

231
00:08:46,850 --> 00:08:48,200
something like that so and that would

232
00:08:48,200 --> 00:08:50,090
actually constantly stop painting and

233
00:08:50,090 --> 00:08:51,170
flashing to the screen and causing

234
00:08:51,170 --> 00:08:53,210
reflows so you know actually be a

235
00:08:53,210 --> 00:08:55,290
negative user experience so we have

236
00:08:55,290 --> 00:08:57,089
to wait for the whole CSS file to be

237
00:08:57,089 --> 00:08:59,730
downloaded before we can construct the

238
00:08:59,730 --> 00:09:02,880
CSS object model and then our lovely

239
00:09:02,880 --> 00:09:06,779
friend and foe JavaScript now if we find

240
00:09:06,779 --> 00:09:09,660
a script element JavaScript blocks Dom

241
00:09:09,660 --> 00:09:11,459
construction because of that that great

242
00:09:11,459 --> 00:09:14,370
feature document dot write JavaScript

243
00:09:14,370 --> 00:09:16,440
can alter the dong and so because of

244
00:09:16,440 --> 00:09:19,199
that the Dom can't continue to pass but

245
00:09:19,199 --> 00:09:21,180
javascript is tightly coupled with CSS

246
00:09:21,180 --> 00:09:23,160
because this year it has to block and

247
00:09:23,160 --> 00:09:24,660
wait for the CSS object model to be

248
00:09:24,660 --> 00:09:27,630
created because what is javascript was

249
00:09:27,630 --> 00:09:30,269
the query is style on a node and this is

250
00:09:30,269 --> 00:09:32,490
why the age-old best practice of putting

251
00:09:32,490 --> 00:09:34,230
JavaScript to the bottom or even more

252
00:09:34,230 --> 00:09:36,899
importantly declaring it as a sink your

253
00:09:36,899 --> 00:09:38,459
you're making a promise with the browser

254
00:09:38,459 --> 00:09:40,170
saying I know this javascript is not

255
00:09:40,170 --> 00:09:42,569
going to do need anything dodgy you you

256
00:09:42,569 --> 00:09:44,009
can just take it off the critical path

257
00:09:44,009 --> 00:09:47,399
and but it's really interesting this

258
00:09:47,399 --> 00:09:49,589
relationship it's into tying tightly

259
00:09:49,589 --> 00:09:52,110
coupled and I ask this in an interview

260
00:09:52,110 --> 00:09:53,850
quite a lot to people I'm interviewing

261
00:09:53,850 --> 00:09:56,130
so yeah so yeah yeah I put job descrip

262
00:09:56,130 --> 00:09:57,480
to the bottom of page why deeper

263
00:09:57,480 --> 00:09:59,670
JavaScript oh because it looks why does

264
00:09:59,670 --> 00:10:02,100
it block and they never know it's

265
00:10:02,100 --> 00:10:03,420
surprising how many people don't

266
00:10:03,420 --> 00:10:05,430
actually know what is the actual reason

267
00:10:05,430 --> 00:10:06,990
why javascript blocked our browser

268
00:10:06,990 --> 00:10:09,779
rendering so we've done the good thing

269
00:10:09,779 --> 00:10:11,190
we've taken javascript off the only

270
00:10:11,190 --> 00:10:12,660
thing we're left with is the CSS object

271
00:10:12,660 --> 00:10:16,740
model we need that and so finally we can

272
00:10:16,740 --> 00:10:18,870
then perform layout and paint and you

273
00:10:18,870 --> 00:10:21,029
can see here how this is all traditional

274
00:10:21,029 --> 00:10:22,230
websites look like this we've got our

275
00:10:22,230 --> 00:10:24,060
HTML within download our CSS and a

276
00:10:24,060 --> 00:10:25,829
transcript if we make the JavaScript

277
00:10:25,829 --> 00:10:27,600
asynchronous take it off the critical

278
00:10:27,600 --> 00:10:30,660
path now we've already shaved off a lot

279
00:10:30,660 --> 00:10:32,040
of milliseconds there to be able to

280
00:10:32,040 --> 00:10:37,649
paint so we know we have to get CSS down

281
00:10:37,649 --> 00:10:41,069
as soon as possible it should be the

282
00:10:41,069 --> 00:10:43,560
only thing on your critical path and in

283
00:10:43,560 --> 00:10:48,930
my opinion it is the critical path but

284
00:10:48,930 --> 00:10:52,670
how can we optimize our CSS for this

285
00:10:52,670 --> 00:10:55,560
start to answer ask that question what

286
00:10:55,560 --> 00:10:57,839
actually is your critical CSS and

287
00:10:57,839 --> 00:11:00,569
especially on a responsive website you

288
00:11:00,569 --> 00:11:02,310
know that concept of above the fold no

289
00:11:02,310 --> 00:11:04,889
longer exists something that is above

290
00:11:04,889 --> 00:11:06,180
the fold and the mobile might not be

291
00:11:06,180 --> 00:11:09,059
above the fold on your desktop so here's

292
00:11:09,059 --> 00:11:10,739
which guard in article page is my

293
00:11:10,739 --> 00:11:12,569
critical CSS the sharing widget or the

294
00:11:12,569 --> 00:11:15,509
popular content or the comments none of

295
00:11:15,509 --> 00:11:19,229
this is only the article the user came

296
00:11:19,229 --> 00:11:20,909
there to read the news that is the only

297
00:11:20,909 --> 00:11:23,219
critical CSS that you require to paint

298
00:11:23,219 --> 00:11:25,619
to that screen and it should be the only

299
00:11:25,619 --> 00:11:28,559
thing so we take that one step further

300
00:11:28,559 --> 00:11:29,699
at the Guardian that you know we

301
00:11:29,699 --> 00:11:31,649
actually ajax in and progressively

302
00:11:31,649 --> 00:11:32,759
hearts with the rest of the initial

303
00:11:32,759 --> 00:11:35,639
payload actually only has the HDH ml for

304
00:11:35,639 --> 00:11:37,829
the article in it this is our non

305
00:11:37,829 --> 00:11:42,359
critical CSS verses are non critical and

306
00:11:42,359 --> 00:11:44,699
so Angelina just up before me and

307
00:11:44,699 --> 00:11:47,249
started to allude to this fact of so we

308
00:11:47,249 --> 00:11:50,969
now know what our critical CSS is but

309
00:11:50,969 --> 00:11:54,239
what if we were to inline that CSS into

310
00:11:54,239 --> 00:11:57,299
the head of the document knowing what we

311
00:11:57,299 --> 00:11:58,619
just we just learnt from browser

312
00:11:58,619 --> 00:12:00,629
rendering then the browser has

313
00:12:00,629 --> 00:12:02,729
everything it needs to be able to create

314
00:12:02,729 --> 00:12:06,289
the render tree within one HTTP request

315
00:12:06,289 --> 00:12:08,969
everything we don't need to wait that

316
00:12:08,969 --> 00:12:11,069
incur that 600 milliseconds again to go

317
00:12:11,069 --> 00:12:12,959
and download the rest of the CSS file

318
00:12:12,959 --> 00:12:15,509
all of our styles the critical ones were

319
00:12:15,509 --> 00:12:17,279
above the full content are delivered in

320
00:12:17,279 --> 00:12:20,369
the first payload now we know it's very

321
00:12:20,369 --> 00:12:22,859
controversial but that's exactly what we

322
00:12:22,859 --> 00:12:26,219
started to do at the Guardian so we've

323
00:12:26,219 --> 00:12:27,629
got the styling them at the top this

324
00:12:27,629 --> 00:12:29,039
goes against everything we've been

325
00:12:29,039 --> 00:12:31,609
taught as good web developers you know

326
00:12:31,609 --> 00:12:34,829
separation of concerns styles and CSS

327
00:12:34,829 --> 00:12:36,509
behavior in JavaScript files and

328
00:12:36,509 --> 00:12:39,449
completely separate but if you want your

329
00:12:39,449 --> 00:12:41,819
page to paint within a thousand

330
00:12:41,819 --> 00:12:43,949
milliseconds this is what you have to do

331
00:12:43,949 --> 00:12:47,039
so if you go to the Guardian be decide

332
00:12:47,039 --> 00:12:49,019
right now you'll find this disgustingly

333
00:12:49,019 --> 00:12:52,889
an ugly blob of JavaScript to the top

334
00:12:52,889 --> 00:12:55,439
compressed into 14 K so if you've got a

335
00:12:55,439 --> 00:12:59,129
full TCP connection window open you'll

336
00:12:59,129 --> 00:13:01,619
have enough information within the first

337
00:13:01,619 --> 00:13:04,139
packet for the browser to render to the

338
00:13:04,139 --> 00:13:06,719
screen so that's enough about what is

339
00:13:06,719 --> 00:13:10,649
that actually like to the user so the

340
00:13:10,649 --> 00:13:12,449
top doesn't have any in line the bottom

341
00:13:12,449 --> 00:13:15,449
does we've rendered in 600 milliseconds

342
00:13:15,449 --> 00:13:18,569
there and we basically nearly finished

343
00:13:18,569 --> 00:13:20,970
painting and the one without hasn't even

344
00:13:20,970 --> 00:13:22,760
started

345
00:13:22,760 --> 00:13:26,910
but for their though that observant ones

346
00:13:26,910 --> 00:13:28,170
of you in the in the audience would

347
00:13:28,170 --> 00:13:30,090
notice that I still have to load the

348
00:13:30,090 --> 00:13:31,680
rest of them right I've got my critical

349
00:13:31,680 --> 00:13:33,210
styles but I need to be able to load the

350
00:13:33,210 --> 00:13:34,980
rest of them in and so we now at the

351
00:13:34,980 --> 00:13:37,650
bottom of the page we have to a sink in

352
00:13:37,650 --> 00:13:40,320
the JavaScript and then create a style

353
00:13:40,320 --> 00:13:43,070
element and inject it into the head

354
00:13:43,070 --> 00:13:45,480
therefore completely taking the rest of

355
00:13:45,480 --> 00:13:50,130
those styles off the critical part even

356
00:13:50,130 --> 00:13:51,690
more observant in the audience with we

357
00:13:51,690 --> 00:13:53,100
start to thinking about that ever hang

358
00:13:53,100 --> 00:13:55,080
on a second if you do a sink in the rest

359
00:13:55,080 --> 00:13:56,580
of your global styles isn't that going

360
00:13:56,580 --> 00:13:59,070
to cause a massive ugly reflow or

361
00:13:59,070 --> 00:14:00,990
repaint once those new styles come in

362
00:14:00,990 --> 00:14:03,030
and you're in fact correct that's

363
00:14:03,030 --> 00:14:05,550
exactly what happens and once we first

364
00:14:05,550 --> 00:14:07,290
implemented this a couple a week later

365
00:14:07,290 --> 00:14:09,150
I'm a great director of The Guardian

366
00:14:09,150 --> 00:14:11,160
came walking in and said what the hell

367
00:14:11,160 --> 00:14:13,860
is this ugly flash on my website and he

368
00:14:13,860 --> 00:14:15,330
was right you know this it wasn't

369
00:14:15,330 --> 00:14:17,160
acceptable that the users was yes we

370
00:14:17,160 --> 00:14:19,260
managed to if we optimize it well enough

371
00:14:19,260 --> 00:14:20,610
you know they wouldn't see it but if

372
00:14:20,610 --> 00:14:21,810
they started scrolling soon enough

373
00:14:21,810 --> 00:14:24,290
they'd see that horrible paint instantly

374
00:14:24,290 --> 00:14:26,910
so the only way to get around this is

375
00:14:26,910 --> 00:14:28,410
that we obviously have to manage that

376
00:14:28,410 --> 00:14:30,600
somehow we have to cash it and so we

377
00:14:30,600 --> 00:14:32,490
looked to local storage to act as a

378
00:14:32,490 --> 00:14:34,710
cache that what if we could once we've a

379
00:14:34,710 --> 00:14:37,260
synced all of that CSS in we could then

380
00:14:37,260 --> 00:14:39,480
cash it in the users local storage and

381
00:14:39,480 --> 00:14:41,490
the next time round we have all of the

382
00:14:41,490 --> 00:14:43,590
information within the first request to

383
00:14:43,590 --> 00:14:45,240
be able to paint to the screen avoiding

384
00:14:45,240 --> 00:14:47,870
any paint any flash of unstyled content

385
00:14:47,870 --> 00:14:50,700
so first we we asked if the browser

386
00:14:50,700 --> 00:14:52,740
modern enough the BBC's cut the mustard

387
00:14:52,740 --> 00:14:55,110
test you know does it have XHTML OHV

388
00:14:55,110 --> 00:14:56,670
object does it have event listener if

389
00:14:56,670 --> 00:14:59,310
not no just user normal non word link

390
00:14:59,310 --> 00:15:02,910
and but is there already stars in local

391
00:15:02,910 --> 00:15:06,750
storage yes great there's paint if not

392
00:15:06,750 --> 00:15:08,910
do they have local space storage now

393
00:15:08,910 --> 00:15:10,320
this is an interesting one we found that

394
00:15:10,320 --> 00:15:12,630
a large percent is an especially iphone

395
00:15:12,630 --> 00:15:15,750
users have a quota exceeded already on

396
00:15:15,750 --> 00:15:18,300
there on the local storage if so

397
00:15:18,300 --> 00:15:20,760
requested with Ajax cash it in the local

398
00:15:20,760 --> 00:15:23,100
storage and then paint again and then on

399
00:15:23,100 --> 00:15:24,870
the next time round we can instantly

400
00:15:24,870 --> 00:15:26,400
just go straight to instant painting

401
00:15:26,400 --> 00:15:28,470
with all of our Styles not making a

402
00:15:28,470 --> 00:15:32,340
single request to to a stylesheet so

403
00:15:32,340 --> 00:15:34,680
here we've just a on to our top back in

404
00:15:34,680 --> 00:15:35,670
the head

405
00:15:35,670 --> 00:15:37,290
now check to see if this the storage

406
00:15:37,290 --> 00:15:40,080
items are there if it is inject it into

407
00:15:40,080 --> 00:15:43,650
a style node there instantly all of your

408
00:15:43,650 --> 00:15:45,450
styles within the first hey tbo press

409
00:15:45,450 --> 00:15:47,370
and enough to deliver the news to the

410
00:15:47,370 --> 00:15:50,720
user within a thousand milliseconds

411
00:15:50,720 --> 00:15:53,220
again now down the bottom so we've now

412
00:15:53,220 --> 00:15:55,410
we've done our normal age acting but we

413
00:15:55,410 --> 00:15:58,740
now have to store it so here we're

414
00:15:58,740 --> 00:16:00,270
actually doing a bit of cache

415
00:16:00,270 --> 00:16:01,950
invalidation for free at the same time

416
00:16:01,950 --> 00:16:03,900
here if they've managed to get into this

417
00:16:03,900 --> 00:16:05,400
block it means that they're either this

418
00:16:05,400 --> 00:16:07,680
the style is outdated or they don't have

419
00:16:07,680 --> 00:16:09,900
any so we first loop through all of the

420
00:16:09,900 --> 00:16:11,670
local storage items to check if they

421
00:16:11,670 --> 00:16:13,770
match against our pattern if they do we

422
00:16:13,770 --> 00:16:15,810
clear it and then load in the new one

423
00:16:15,810 --> 00:16:18,600
and store it again so we're using an md5

424
00:16:18,600 --> 00:16:21,180
hash here of the file so every time we

425
00:16:21,180 --> 00:16:22,500
practice continued continuous delivery

426
00:16:22,500 --> 00:16:24,000
with deploying about four or five times

427
00:16:24,000 --> 00:16:26,160
a day now and so instantly we can

428
00:16:26,160 --> 00:16:28,500
invalidate that CSS the old global to

429
00:16:28,500 --> 00:16:31,460
assessing get the new ones straight away

430
00:16:31,460 --> 00:16:35,670
but what does this mean since actually

431
00:16:35,670 --> 00:16:37,530
again to our users so here we're using

432
00:16:37,530 --> 00:16:40,260
web page test here this is a UK cable

433
00:16:40,260 --> 00:16:44,940
connection and so before we've got we're

434
00:16:44,940 --> 00:16:47,130
still blocking rendering waiting for all

435
00:16:47,130 --> 00:16:50,370
of our CSS and I Josh get to download we

436
00:16:50,370 --> 00:16:52,860
async the JavaScript and then we in line

437
00:16:52,860 --> 00:16:55,160
the CSS and cash it in local storage

438
00:16:55,160 --> 00:16:57,090
instantly look at the difference to the

439
00:16:57,090 --> 00:16:59,130
waterfall here we've gotta start render

440
00:16:59,130 --> 00:17:00,420
event right there even though we're a

441
00:17:00,420 --> 00:17:02,280
sinking in the rest the bounders doesn't

442
00:17:02,280 --> 00:17:03,690
need it because it's got its inline

443
00:17:03,690 --> 00:17:06,200
Styles here we've managed to shave over

444
00:17:06,200 --> 00:17:08,880
500 milliseconds off I start render

445
00:17:08,880 --> 00:17:12,120
event just by inlining the CSS from

446
00:17:12,120 --> 00:17:16,350
cashing in local storage breaking our

447
00:17:16,350 --> 00:17:19,170
1000 millisecond so again if you go and

448
00:17:19,170 --> 00:17:20,940
look at the site now you'll notice that

449
00:17:20,940 --> 00:17:22,860
in the style sheet tab in any inspector

450
00:17:22,860 --> 00:17:24,930
you won't see any physical files

451
00:17:24,930 --> 00:17:26,970
downloaded but if you go and check the

452
00:17:26,970 --> 00:17:29,550
local storage you've got your CSS right

453
00:17:29,550 --> 00:17:31,410
there interestingly we also do the same

454
00:17:31,410 --> 00:17:33,990
with our fonts to avoid any flash of

455
00:17:33,990 --> 00:17:37,130
unstyled text with the front loading now

456
00:17:37,130 --> 00:17:41,310
as well as having fast papers this also

457
00:17:41,310 --> 00:17:44,010
creates a much more resilient system a

458
00:17:44,010 --> 00:17:46,620
system in which I'm traveling on the

459
00:17:46,620 --> 00:17:49,380
train a friend of mine shares

460
00:17:49,380 --> 00:17:50,970
82 a cool article on twitter i click on

461
00:17:50,970 --> 00:17:53,820
it but boom or go into a tunnel now

462
00:17:53,820 --> 00:17:56,550
fortunately my my mobile had enough

463
00:17:56,550 --> 00:17:58,020
networking to perform the network

464
00:17:58,020 --> 00:18:00,210
requests that first HTML press but but

465
00:18:00,210 --> 00:18:02,670
normally I'd go into the tunnel and then

466
00:18:02,670 --> 00:18:04,050
it would find the CSS file and try and

467
00:18:04,050 --> 00:18:05,310
make the downloading for that but you

468
00:18:05,310 --> 00:18:07,230
can't because you're in the tunnel and

469
00:18:07,230 --> 00:18:09,600
that's that big white blank screen that

470
00:18:09,600 --> 00:18:11,720
we're all so familiar about with this

471
00:18:11,720 --> 00:18:15,270
technique we've created a Sicilian to

472
00:18:15,270 --> 00:18:17,070
failure that I only need to make that

473
00:18:17,070 --> 00:18:18,330
one request and I have all of the

474
00:18:18,330 --> 00:18:22,860
information Google did to do this google

475
00:18:22,860 --> 00:18:24,810
and bing have also do this you know it's

476
00:18:24,810 --> 00:18:26,670
why i repeat one of Google's search

477
00:18:26,670 --> 00:18:28,050
results pages the fastest paid in the

478
00:18:28,050 --> 00:18:29,880
world what they do is actually more

479
00:18:29,880 --> 00:18:31,230
interestingly send down all of the

480
00:18:31,230 --> 00:18:33,750
styles in the first request and then

481
00:18:33,750 --> 00:18:34,950
they put it in local storage but they

482
00:18:34,950 --> 00:18:37,500
set a cookie so that request it again

483
00:18:37,500 --> 00:18:39,720
any other knows all the subsequent

484
00:18:39,720 --> 00:18:41,760
requests after that have already got all

485
00:18:41,760 --> 00:18:43,890
of the slides we can't actually do that

486
00:18:43,890 --> 00:18:45,540
at garden because we keep a completely

487
00:18:45,540 --> 00:18:46,980
stateless domain so we don't use any

488
00:18:46,980 --> 00:18:51,020
cookie so that we can patch our HTML on

489
00:18:51,020 --> 00:18:53,730
so with all the performance techniques

490
00:18:53,730 --> 00:18:57,420
you have must monitor these and optimize

491
00:18:57,420 --> 00:19:00,960
and repeat so to do this I built a grunt

492
00:19:00,960 --> 00:19:03,600
task that in the CI now I'm monitoring

493
00:19:03,600 --> 00:19:05,400
the size of those of those hedge files

494
00:19:05,400 --> 00:19:08,040
and so whenever a developer updates the

495
00:19:08,040 --> 00:19:09,900
size of those files I can get alerted to

496
00:19:09,900 --> 00:19:11,100
see if it goes too big because obviously

497
00:19:11,100 --> 00:19:13,050
we don't want to go in the negative

498
00:19:13,050 --> 00:19:15,000
opposite way that the file gets too big

499
00:19:15,000 --> 00:19:16,140
and then we're actually bloating our

500
00:19:16,140 --> 00:19:18,180
pages and slowing them down so in the CI

501
00:19:18,180 --> 00:19:21,000
we monitor these and I now know the raw

502
00:19:21,000 --> 00:19:22,860
and the gzip file size and it gives me

503
00:19:22,860 --> 00:19:25,260
and I can trend this over time and set

504
00:19:25,260 --> 00:19:28,140
and a threshold alert knowing when our

505
00:19:28,140 --> 00:19:32,280
assets get too big again on in pool

506
00:19:32,280 --> 00:19:34,230
repair is this is a big code smell to me

507
00:19:34,230 --> 00:19:35,430
when someone's adding something to the

508
00:19:35,430 --> 00:19:37,830
head file you have to ask them is that

509
00:19:37,830 --> 00:19:40,800
your critical CSS does that feature

510
00:19:40,800 --> 00:19:47,480
really deemed to be in the head and so

511
00:19:47,480 --> 00:19:49,440
monitoring assets like that is all well

512
00:19:49,440 --> 00:19:51,240
and good but actually what a real users

513
00:19:51,240 --> 00:19:53,490
seeing and especially across the world

514
00:19:53,490 --> 00:19:55,890
so today is we use a tool put speed

515
00:19:55,890 --> 00:19:59,490
curve and this this uses clusters or web

516
00:19:59,490 --> 00:20:01,410
page test instances around the world and

517
00:20:01,410 --> 00:20:02,750
we can

518
00:20:02,750 --> 00:20:05,730
it tracks and trends analysis for us but

519
00:20:05,730 --> 00:20:07,320
I'm like I can filter this by our start

520
00:20:07,320 --> 00:20:09,630
render event or our speed index and I

521
00:20:09,630 --> 00:20:12,030
instantly know how our page is

522
00:20:12,030 --> 00:20:13,860
performing over the last two weeks but

523
00:20:13,860 --> 00:20:15,690
more importantly again I can set

524
00:20:15,690 --> 00:20:18,150
thresholds on this and compare my sense

525
00:20:18,150 --> 00:20:20,400
against our own competitor which is our

526
00:20:20,400 --> 00:20:22,710
old site or even our competitors and

527
00:20:22,710 --> 00:20:28,380
business competitors in the world if you

528
00:20:28,380 --> 00:20:29,850
have tools like this is really really

529
00:20:29,850 --> 00:20:32,820
important that you then facility spread

530
00:20:32,820 --> 00:20:34,680
this around the department so now every

531
00:20:34,680 --> 00:20:37,110
week all of our everyone in the

532
00:20:37,110 --> 00:20:38,670
department from our project managers to

533
00:20:38,670 --> 00:20:41,220
our design is get this report telling us

534
00:20:41,220 --> 00:20:43,230
how fast the website is and if we've

535
00:20:43,230 --> 00:20:45,150
broken anything and this is really

536
00:20:45,150 --> 00:20:47,280
really important making everyone in the

537
00:20:47,280 --> 00:20:48,810
team accountable for performance is the

538
00:20:48,810 --> 00:20:51,330
only way that you can ensure that you

539
00:20:51,330 --> 00:20:53,130
maintain that and it's been really

540
00:20:53,130 --> 00:20:54,780
interesting having product managers come

541
00:20:54,780 --> 00:20:56,160
up to us and say hey what happened last

542
00:20:56,160 --> 00:20:58,500
week why have we slowed down by 100

543
00:20:58,500 --> 00:21:00,720
milliseconds and it's great to see them

544
00:21:00,720 --> 00:21:02,730
actually caring about that getting

545
00:21:02,730 --> 00:21:07,770
everyone involved now I've talked a lot

546
00:21:07,770 --> 00:21:10,320
about our technique but what are some of

547
00:21:10,320 --> 00:21:13,710
the alternatives out there Google

548
00:21:13,710 --> 00:21:16,530
PageSpeed module for Apache or genetics

549
00:21:16,530 --> 00:21:18,900
has a feature to be able to in line on

550
00:21:18,900 --> 00:21:21,780
the fly so they actually render the page

551
00:21:21,780 --> 00:21:24,150
work out what the inline styles are and

552
00:21:24,150 --> 00:21:25,620
inject them into your page so this is at

553
00:21:25,620 --> 00:21:28,710
a proxy level so you can sit sit this

554
00:21:28,710 --> 00:21:31,200
engine X proxy in front of your systems

555
00:21:31,200 --> 00:21:34,260
now there's reasons why i love PageSpeed

556
00:21:34,260 --> 00:21:35,910
it does a lot of good optimizations but

557
00:21:35,910 --> 00:21:37,830
the specific inlining CSS feature

558
00:21:37,830 --> 00:21:39,180
there's some reasons why I don't like it

559
00:21:39,180 --> 00:21:40,790
i like have to have a lot more fine

560
00:21:40,790 --> 00:21:43,110
granular control level being in the head

561
00:21:43,110 --> 00:21:47,310
or not uncie SS and grunt uncie SS task

562
00:21:47,310 --> 00:21:50,430
by addy Osmani this you can pass it a

563
00:21:50,430 --> 00:21:52,770
multiple files on your website and it

564
00:21:52,770 --> 00:21:55,320
will actually work out what is the CSS

565
00:21:55,320 --> 00:21:57,450
required for this nicolette nicole

566
00:21:57,450 --> 00:21:59,250
earlier on mentioned that she did all

567
00:21:59,250 --> 00:22:00,960
the great work to optimize the CSS file

568
00:22:00,960 --> 00:22:02,580
but it was actually bootstrap in the end

569
00:22:02,580 --> 00:22:05,280
that was weighing up fifty percent with

570
00:22:05,280 --> 00:22:08,160
this as a as a post optimization her

571
00:22:08,160 --> 00:22:10,590
worries where she doesn't want to delete

572
00:22:10,590 --> 00:22:11,760
some of bootstrap because it would make

573
00:22:11,760 --> 00:22:13,230
upgrading in the future if you have this

574
00:22:13,230 --> 00:22:15,570
as a post optimization you can get it to

575
00:22:15,570 --> 00:22:16,410
strip out your see

576
00:22:16,410 --> 00:22:17,580
test far and you just have a new

577
00:22:17,580 --> 00:22:20,010
minified one that only has the bits of

578
00:22:20,010 --> 00:22:21,540
bootstrap in it that you are using

579
00:22:21,540 --> 00:22:25,620
across your core templates basket Jas

580
00:22:25,620 --> 00:22:27,480
again by our owes money this uses

581
00:22:27,480 --> 00:22:29,550
exactly the same pattern of using local

582
00:22:29,550 --> 00:22:32,340
storage as a cash management in a

583
00:22:32,340 --> 00:22:36,810
validation layer but all of this seems

584
00:22:36,810 --> 00:22:39,570
like a hack we shouldn't be having to do

585
00:22:39,570 --> 00:22:41,580
this as their developers take these

586
00:22:41,580 --> 00:22:44,940
extreme things breaking everything that

587
00:22:44,940 --> 00:22:46,860
we've learnt to be able to to get that

588
00:22:46,860 --> 00:22:48,360
last couple of milliseconds out of our

589
00:22:48,360 --> 00:22:52,470
performance fortunately there's been a

590
00:22:52,470 --> 00:22:53,490
lot of thinking around this area

591
00:22:53,490 --> 00:22:56,940
recently so HTTP two which is the HP the

592
00:22:56,940 --> 00:22:59,370
underlying transfer protocol layer of

593
00:22:59,370 --> 00:23:01,560
the web we're actually carrying 1.1 that

594
00:23:01,560 --> 00:23:04,890
respect in 1997 it's now 2014 and we

595
00:23:04,890 --> 00:23:07,980
finally got a new point a major version

596
00:23:07,980 --> 00:23:10,290
this is actually near to finishing of

597
00:23:10,290 --> 00:23:11,580
the standard it will be finished by the

598
00:23:11,580 --> 00:23:13,800
end of this year but how does this

599
00:23:13,800 --> 00:23:15,720
relate back to what I've mentioned is

600
00:23:15,720 --> 00:23:17,160
there's a great feature in it called

601
00:23:17,160 --> 00:23:19,890
server push now hcp to the biggest

602
00:23:19,890 --> 00:23:22,050
benefit to us and as we know latency is

603
00:23:22,050 --> 00:23:23,520
the biggest killer how do we reduce

604
00:23:23,520 --> 00:23:25,680
those round trips and the latency is

605
00:23:25,680 --> 00:23:27,800
that you can have multiple

606
00:23:27,800 --> 00:23:30,840
bi-directional messages on the same TTP

607
00:23:30,840 --> 00:23:33,390
connection so for my HTML file my CSS

608
00:23:33,390 --> 00:23:35,220
file on my javascript file I don't have

609
00:23:35,220 --> 00:23:37,560
to open up three different TCP

610
00:23:37,560 --> 00:23:40,140
connections I can send them all down and

611
00:23:40,140 --> 00:23:43,980
currently down the same socket but we've

612
00:23:43,980 --> 00:23:45,720
got this traditional flow right we ask

613
00:23:45,720 --> 00:23:48,480
for the HTML file the server gives it

614
00:23:48,480 --> 00:23:50,730
back your browser then parses the HTML

615
00:23:50,730 --> 00:23:52,140
finds the CSS file and then goes and

616
00:23:52,140 --> 00:23:54,270
request it again but as web developers

617
00:23:54,270 --> 00:23:57,450
we know that the browser is about to

618
00:23:57,450 --> 00:23:59,700
then request the CSS file or your core

619
00:23:59,700 --> 00:24:01,410
javascript file so knowing those

620
00:24:01,410 --> 00:24:04,140
decisions what if we could push them

621
00:24:04,140 --> 00:24:07,530
down with the initial HTTP request so

622
00:24:07,530 --> 00:24:08,820
this is a new feature put server push

623
00:24:08,820 --> 00:24:12,570
that completely forgets the need of any

624
00:24:12,570 --> 00:24:13,830
of our techniques here because I can say

625
00:24:13,830 --> 00:24:15,990
hey browser when it when you ask for the

626
00:24:15,990 --> 00:24:17,340
initial HTML file you can say hey and

627
00:24:17,340 --> 00:24:19,320
here's all of my other core assets I

628
00:24:19,320 --> 00:24:20,790
know you're going to need them and let

629
00:24:20,790 --> 00:24:22,650
the browser do the cache invalidation or

630
00:24:22,650 --> 00:24:25,620
work out of it Nathan or not service

631
00:24:25,620 --> 00:24:28,530
workers now this to me hb2 and service

632
00:24:28,530 --> 00:24:30,340
worker among one of

633
00:24:30,340 --> 00:24:33,220
the most important features coming to

634
00:24:33,220 --> 00:24:35,169
the standards that we're going to have

635
00:24:35,169 --> 00:24:36,809
within these next five to ten years

636
00:24:36,809 --> 00:24:38,950
service work it's being worked on by

637
00:24:38,950 --> 00:24:40,929
alice russell and from the chrome team

638
00:24:40,929 --> 00:24:42,190
and Jake Archibald and they actually

639
00:24:42,190 --> 00:24:44,350
interestingly really the ping the whole

640
00:24:44,350 --> 00:24:46,120
spec out in the open and github I

641
00:24:46,120 --> 00:24:47,470
strongly advise you to go and check it

642
00:24:47,470 --> 00:24:50,890
out but so service worker is a request

643
00:24:50,890 --> 00:24:53,230
handling with a persistent cash so you

644
00:24:53,230 --> 00:24:56,049
can create a worker level that handles

645
00:24:56,049 --> 00:24:57,760
all of the requests was in your browser

646
00:24:57,760 --> 00:25:00,220
and deem whether or not you want to go

647
00:25:00,220 --> 00:25:01,929
back to the network or return something

648
00:25:01,929 --> 00:25:03,700
from the cash so basically it's app

649
00:25:03,700 --> 00:25:06,370
cache on steroids or the better app

650
00:25:06,370 --> 00:25:09,399
cache and so here's the traditional

651
00:25:09,399 --> 00:25:11,860
model again I request my CSS file and

652
00:25:11,860 --> 00:25:13,630
then we go off to the server to go and

653
00:25:13,630 --> 00:25:16,990
get it but what did the serviceworker

654
00:25:16,990 --> 00:25:19,870
already had one in its cache or you know

655
00:25:19,870 --> 00:25:22,240
we were using local storage abusing

656
00:25:22,240 --> 00:25:24,039
local storage for this pattern hit now

657
00:25:24,039 --> 00:25:26,770
we actually have a new cache object in

658
00:25:26,770 --> 00:25:29,200
CSS and service workers that have the

659
00:25:29,200 --> 00:25:31,299
native new promises spec built in it

660
00:25:31,299 --> 00:25:33,220
said right if I've got that in my cache

661
00:25:33,220 --> 00:25:37,600
object return it and so now we don't

662
00:25:37,600 --> 00:25:39,880
have to ever even talked to the server

663
00:25:39,880 --> 00:25:42,340
again having all of the information the

664
00:25:42,340 --> 00:25:44,230
CSS to be able to paint within our

665
00:25:44,230 --> 00:25:49,750
thousand milliseconds so just to

666
00:25:49,750 --> 00:25:52,179
summarize that you can really really

667
00:25:52,179 --> 00:25:56,200
fast and here are some of the things

668
00:25:56,200 --> 00:25:57,429
that I've learned along the way and that

669
00:25:57,429 --> 00:26:01,990
I hope you do take away from this please

670
00:26:01,990 --> 00:26:04,179
have a think about in lining your

671
00:26:04,179 --> 00:26:06,940
critical CSS and deferring all

672
00:26:06,940 --> 00:26:10,240
non-critical assets the your critical

673
00:26:10,240 --> 00:26:12,610
rendering path is the most important

674
00:26:12,610 --> 00:26:14,980
thing to getting your content in front

675
00:26:14,980 --> 00:26:17,409
of your users and anything you put in

676
00:26:17,409 --> 00:26:19,480
front of it it's going to block them and

677
00:26:19,480 --> 00:26:21,970
as we know that 600 round millisecond

678
00:26:21,970 --> 00:26:24,190
round trip for every request it's just

679
00:26:24,190 --> 00:26:26,220
bolting on to your millisecond budget

680
00:26:26,220 --> 00:26:28,390
where possible always in cash

681
00:26:28,390 --> 00:26:30,309
aggressively and maybe in local storage

682
00:26:30,309 --> 00:26:31,990
or hopefully in the future and service

683
00:26:31,990 --> 00:26:36,640
worker and set a performance budget on

684
00:26:36,640 --> 00:26:39,730
your sites but once you've got that you

685
00:26:39,730 --> 00:26:42,730
need to always measure optimize and

686
00:26:42,730 --> 00:26:43,810
repeat

687
00:26:43,810 --> 00:26:46,360
you know our websites gets low on a

688
00:26:46,360 --> 00:26:48,580
day-by-day basis as we add features to

689
00:26:48,580 --> 00:26:51,160
them you need to constantly be measuring

690
00:26:51,160 --> 00:26:53,050
that or thinking about when I add a new

691
00:26:53,050 --> 00:26:54,910
feature do we actually need this feature

692
00:26:54,910 --> 00:26:56,500
or how can I better optimize this

693
00:26:56,500 --> 00:26:57,850
feature make it fast before we include

694
00:26:57,850 --> 00:27:01,240
it or is this feature going to detriment

695
00:27:01,240 --> 00:27:03,100
I'll are loading or the performance of

696
00:27:03,100 --> 00:27:07,210
other features but most importantly

697
00:27:07,210 --> 00:27:09,670
feature performance is a requirement

698
00:27:09,670 --> 00:27:15,160
it's not a feature you can't retrofit it

699
00:27:15,160 --> 00:27:16,810
you can't part oh don't worry the ops

700
00:27:16,810 --> 00:27:19,480
team are going to handle it we all as

701
00:27:19,480 --> 00:27:20,920
web developers must be worrying about

702
00:27:20,920 --> 00:27:23,560
this and as I said before if the more

703
00:27:23,560 --> 00:27:25,630
you make this information available to

704
00:27:25,630 --> 00:27:27,310
the rest of your business the more the

705
00:27:27,310 --> 00:27:30,060
rest of your business will start caring

