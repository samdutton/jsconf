1
00:00:31,789 --> 00:00:34,640

yes so as Brendan said I work on Jess

2
00:00:34,640 --> 00:00:38,660
next so today I want to talk about

3
00:00:38,660 --> 00:00:40,910
modules that we work on a lot of stuff

4
00:00:40,910 --> 00:00:42,860
for Jaya snacks and I'm happy to talk

5
00:00:42,860 --> 00:00:45,199
with people about any of it but uh but

6
00:00:45,199 --> 00:00:46,670
for today I want to I want to talk about

7
00:00:46,670 --> 00:00:47,750
modules because I think it's really

8
00:00:47,750 --> 00:00:50,870
important so so modules are all about

9
00:00:50,870 --> 00:00:54,530
great libraries and languages is really

10
00:00:54,530 --> 00:00:56,449
nothing without its libraries it's the

11
00:00:56,449 --> 00:01:00,769
lifeblood of a language and a javascript

12
00:01:00,769 --> 00:01:03,019
is doing well for libraries we've got

13
00:01:03,019 --> 00:01:06,020
we've got an impressive field and it's

14
00:01:06,020 --> 00:01:08,600
growing all the time it's exciting to

15
00:01:08,600 --> 00:01:14,080
see I think it's only getting better but

16
00:01:14,080 --> 00:01:16,700
if we're really honest with ourselves we

17
00:01:16,700 --> 00:01:18,020
have to admit that we're kind of getting

18
00:01:18,020 --> 00:01:23,479
pummeled by our older siblings so this

19
00:01:23,479 --> 00:01:26,960
guy over here as of this morning they're

20
00:01:26,960 --> 00:01:32,990
up to 20 2529 packages on Sipan this guy

21
00:01:32,990 --> 00:01:37,600
over here closing in on 14,500 packages

22
00:01:37,600 --> 00:01:41,300
for python and of course he wasn't in

23
00:01:41,300 --> 00:01:43,700
the original picture but this guy is

24
00:01:43,700 --> 00:01:46,100
actually the the big heavyweight here as

25
00:01:46,100 --> 00:01:48,790
of this morning Ruby gems are up to 20

26
00:01:48,790 --> 00:01:53,390
3501 those are those are impressive

27
00:01:53,390 --> 00:01:54,890
numbers but I don't see any reason why

28
00:01:54,890 --> 00:01:56,540
we shouldn't be able to to reach those

29
00:01:56,540 --> 00:01:58,400
numbers ourselves with JavaScript I mean

30
00:01:58,400 --> 00:02:00,470
we got the whole web behind us so it's

31
00:02:00,470 --> 00:02:01,750
not like we're talking about a small

32
00:02:01,750 --> 00:02:05,390
playing field so I want to argue that

33
00:02:05,390 --> 00:02:07,130
the language is actually not quite

34
00:02:07,130 --> 00:02:10,729
giving us the tools that we need to to

35
00:02:10,729 --> 00:02:13,519
support it now on the server side we're

36
00:02:13,519 --> 00:02:16,310
catching up so we're sort of we're still

37
00:02:16,310 --> 00:02:19,250
the little brother but but NPM is

38
00:02:19,250 --> 00:02:20,720
catching up fast i think we're closing

39
00:02:20,720 --> 00:02:23,810
in on about 2,000 packages for npm so

40
00:02:23,810 --> 00:02:27,650
that's that's getting better but

41
00:02:27,650 --> 00:02:29,959
especially when you're talking about

42
00:02:29,959 --> 00:02:34,670
writing a library for the browser or

43
00:02:34,670 --> 00:02:36,080
even worse if you're trying to write a

44
00:02:36,080 --> 00:02:39,200
library that works in in any environment

45
00:02:39,200 --> 00:02:40,999
that's the significant its host

46
00:02:40,999 --> 00:02:42,889
environment the language isn't really

47
00:02:42,889 --> 00:02:45,380
helping you right now so JavaScript kind

48
00:02:45,380 --> 00:02:47,330
hands you this this little ball of clay

49
00:02:47,330 --> 00:02:50,510
and it's a very malleable ball of clay

50
00:02:50,510 --> 00:02:52,880
we've actually figured out how to do a

51
00:02:52,880 --> 00:02:54,230
lot with this ball of clay but every

52
00:02:54,230 --> 00:02:55,640
time you start your new application or

53
00:02:55,640 --> 00:02:57,170
your new library you've got that same

54
00:02:57,170 --> 00:03:00,080
little lump of clay and and it's kind of

55
00:03:00,080 --> 00:03:05,930
all up to you so so let's see what you

56
00:03:05,930 --> 00:03:07,520
know what what you have to do if you

57
00:03:07,520 --> 00:03:09,500
want to write your own module so the

58
00:03:09,500 --> 00:03:11,200
first approach that that we've kind of

59
00:03:11,200 --> 00:03:15,440
all learned is the module pattern and

60
00:03:15,440 --> 00:03:19,820
this this lets this makes life nice for

61
00:03:19,820 --> 00:03:21,980
the client it means the client can

62
00:03:21,980 --> 00:03:23,240
really do something as simple as a

63
00:03:23,240 --> 00:03:25,970
script source equals and just add your

64
00:03:25,970 --> 00:03:27,710
library to their program and everything

65
00:03:27,710 --> 00:03:29,770
works fine for them for the most part

66
00:03:29,770 --> 00:03:31,850
but for you as the library writer

67
00:03:31,850 --> 00:03:33,350
there's a whole lot of bookkeeping you

68
00:03:33,350 --> 00:03:36,260
have to do this is kind of like the bare

69
00:03:36,260 --> 00:03:38,540
minimum of what you need to write a

70
00:03:38,540 --> 00:03:45,130
library for the browser so to start with

71
00:03:45,130 --> 00:03:47,240
my highlighting isn't going to show up

72
00:03:47,240 --> 00:03:49,400
very well that's all right so to start

73
00:03:49,400 --> 00:03:50,900
with you you wrap everything in the

74
00:03:50,900 --> 00:03:54,820
immediately invoked function expression

75
00:03:54,820 --> 00:03:57,830
down here we pass in the global object

76
00:03:57,830 --> 00:03:59,870
this won't even work if you're trying to

77
00:03:59,870 --> 00:04:02,150
create something that's that's multi

78
00:04:02,150 --> 00:04:04,250
environment so you have to play even

79
00:04:04,250 --> 00:04:06,950
more trickery to get at the window I

80
00:04:06,950 --> 00:04:08,870
were to get at the global object if it's

81
00:04:08,870 --> 00:04:13,540
not called window may be up here you uh

82
00:04:13,540 --> 00:04:17,600
so yeah down here you actually put all

83
00:04:17,600 --> 00:04:19,700
your exports in an object up here at the

84
00:04:19,700 --> 00:04:22,220
top you might save a local copy of your

85
00:04:22,220 --> 00:04:23,870
library in case you need to refer to it

86
00:04:23,870 --> 00:04:25,970
during the body and then the most

87
00:04:25,970 --> 00:04:27,350
miserable part is this uninstallation

88
00:04:27,350 --> 00:04:29,120
process that you need to do to be a good

89
00:04:29,120 --> 00:04:32,900
citizen so just in case the global name

90
00:04:32,900 --> 00:04:34,670
that you chose is the same global name

91
00:04:34,670 --> 00:04:37,550
that somebody else chose or maybe you

92
00:04:37,550 --> 00:04:39,830
just have a user that doesn't want to

93
00:04:39,830 --> 00:04:41,570
trash the global namespace and they'd

94
00:04:41,570 --> 00:04:43,010
like to be able to get at your library

95
00:04:43,010 --> 00:04:45,350
without it trashing the namespace you

96
00:04:45,350 --> 00:04:49,250
have to sort of create this little do

97
00:04:49,250 --> 00:04:52,280
this little dance to restore the global

98
00:04:52,280 --> 00:04:53,419
object to whatever state it was in

99
00:04:53,419 --> 00:04:57,100
before your library got installed and

100
00:04:57,100 --> 00:04:59,240
right here in the middle

101
00:04:59,240 --> 00:05:00,680
these three lines that's sort of like

102
00:05:00,680 --> 00:05:02,150
the core of the library that's the

103
00:05:02,150 --> 00:05:03,919
actual contents here the rest of this is

104
00:05:03,919 --> 00:05:07,009
just boilerplate this is a huge amount

105
00:05:07,009 --> 00:05:08,120
of overhead that you have to pay every

106
00:05:08,120 --> 00:05:10,460
time you want to create a library that's

107
00:05:10,460 --> 00:05:13,009
just too expensive and just the fact

108
00:05:13,009 --> 00:05:15,800
that it's a pattern language geeks like

109
00:05:15,800 --> 00:05:17,330
me when we when we whenever we hear

110
00:05:17,330 --> 00:05:19,970
people say design pattern it sort of

111
00:05:19,970 --> 00:05:22,819
sends off a red alarm in our head I like

112
00:05:22,819 --> 00:05:25,340
this quote from Paul Graham he says I

113
00:05:25,340 --> 00:05:26,539
wonder if these patterns are not

114
00:05:26,539 --> 00:05:28,370
sometimes evidence of the human compiler

115
00:05:28,370 --> 00:05:30,470
at work I don't want to be a compiler I

116
00:05:30,470 --> 00:05:31,789
don't think anyone should be a compiler

117
00:05:31,789 --> 00:05:32,840
I think your compiler should be a

118
00:05:32,840 --> 00:05:36,800
compiler so if you don't want to go

119
00:05:36,800 --> 00:05:38,389
through all of that pain another choice

120
00:05:38,389 --> 00:05:40,909
another option that you have is to take

121
00:05:40,909 --> 00:05:43,580
some existing framework and just write

122
00:05:43,580 --> 00:05:45,259
your your library as a plug-in for that

123
00:05:45,259 --> 00:05:49,639
framework so if you are willing to make

124
00:05:49,639 --> 00:05:52,550
the assumption that your users will use

125
00:05:52,550 --> 00:05:55,400
jQuery for example or that they'll have

126
00:05:55,400 --> 00:05:57,199
to use jQuery to use your library you

127
00:05:57,199 --> 00:05:59,720
can just extend jQuery through their

128
00:05:59,720 --> 00:06:03,199
their plug-in mechanism that's lower

129
00:06:03,199 --> 00:06:05,210
overhead on your part for creating a

130
00:06:05,210 --> 00:06:08,240
library but it's a crappy deal that that

131
00:06:08,240 --> 00:06:09,740
you just had to make which was basically

132
00:06:09,740 --> 00:06:11,389
i'm willing to restrict myself to only

133
00:06:11,389 --> 00:06:12,800
those users who are using this

134
00:06:12,800 --> 00:06:15,520
particular framework so that's no fun

135
00:06:15,520 --> 00:06:18,889
now on the on the server side common j/s

136
00:06:18,889 --> 00:06:20,690
has really drastically improved the

137
00:06:20,690 --> 00:06:24,110
state of things so common Jas is is very

138
00:06:24,110 --> 00:06:26,300
much a big deal when you when you write

139
00:06:26,300 --> 00:06:27,949
your note j/s app it's really as simple

140
00:06:27,949 --> 00:06:31,430
as sticking it in a separate file making

141
00:06:31,430 --> 00:06:33,740
sure it's in the right directory and you

142
00:06:33,740 --> 00:06:37,280
can just say require and common GS is is

143
00:06:37,280 --> 00:06:39,530
starting to pick up steam in the browser

144
00:06:39,530 --> 00:06:43,490
but this is what it looks like when you

145
00:06:43,490 --> 00:06:48,110
want to use a common j/s library in the

146
00:06:48,110 --> 00:06:49,880
browser environment and the reason for

147
00:06:49,880 --> 00:06:51,199
this of course is because of the

148
00:06:51,199 --> 00:06:55,250
non-blocking i/o and javascript so we

149
00:06:55,250 --> 00:06:57,800
all know the the pain of the nested call

150
00:06:57,800 --> 00:07:03,050
back issue in javascript and james burke

151
00:07:03,050 --> 00:07:05,060
has done a good job and required j/s of

152
00:07:05,060 --> 00:07:07,130
making it a little less painful because

153
00:07:07,130 --> 00:07:09,820
you can sort of you can give an array of

154
00:07:09,820 --> 00:07:13,190
modules that you want to to require so

155
00:07:13,190 --> 00:07:15,230
there's only one nested call back but

156
00:07:15,230 --> 00:07:17,930
this idea that you have to slap this

157
00:07:17,930 --> 00:07:19,820
boilerplate boilerplate around your

158
00:07:19,820 --> 00:07:21,710
program and nest your program into the

159
00:07:21,710 --> 00:07:25,340
middle there is is really just too high

160
00:07:25,340 --> 00:07:26,810
of an overhead especially because now

161
00:07:26,810 --> 00:07:28,100
we're talking about overhead on the part

162
00:07:28,100 --> 00:07:30,290
of the clients so now you're saying if

163
00:07:30,290 --> 00:07:32,630
you want to use my library you every

164
00:07:32,630 --> 00:07:34,430
single one of you users of my library

165
00:07:34,430 --> 00:07:38,150
you're going to have to pay this cost to

166
00:07:38,150 --> 00:07:41,510
buy into it so I think we we need to be

167
00:07:41,510 --> 00:07:44,420
able to do better than that and on top

168
00:07:44,420 --> 00:07:45,770
of that there are just certain things

169
00:07:45,770 --> 00:07:47,330
about the semantics of JavaScript that

170
00:07:47,330 --> 00:07:49,700
are that are not ideal that common J's

171
00:07:49,700 --> 00:07:51,020
can't really do anything about because

172
00:07:51,020 --> 00:07:53,030
common Jas didn't didn't have the luxury

173
00:07:53,030 --> 00:07:55,610
of changing the language so when you

174
00:07:55,610 --> 00:07:56,990
create your separate module and you put

175
00:07:56,990 --> 00:07:58,400
it in a separate file there's still

176
00:07:58,400 --> 00:08:00,050
nothing common j/s can do to stop you

177
00:08:00,050 --> 00:08:02,450
from making a mistake and assigning to a

178
00:08:02,450 --> 00:08:05,720
global variable so if i accidentally

179
00:08:05,720 --> 00:08:08,270
assign to I in inside of my common J's

180
00:08:08,270 --> 00:08:11,240
library I'm going to create a global

181
00:08:11,240 --> 00:08:13,610
variable and have all the the trouble

182
00:08:13,610 --> 00:08:18,470
that global variables cause so this is

183
00:08:18,470 --> 00:08:20,990
sort of all prelude to why I think

184
00:08:20,990 --> 00:08:23,050
modules for Jas next are important and

185
00:08:23,050 --> 00:08:27,140
why on TC 39 the the ACMA script

186
00:08:27,140 --> 00:08:30,440
committee we've been working on this so

187
00:08:30,440 --> 00:08:34,160
in our design creating a module is

188
00:08:34,160 --> 00:08:37,700
really as simple as this you just use

189
00:08:37,700 --> 00:08:39,800
the new module keyword you give it a

190
00:08:39,800 --> 00:08:42,200
name you put a couple of braces and then

191
00:08:42,200 --> 00:08:43,610
you put whatever you want inside the

192
00:08:43,610 --> 00:08:46,280
body and by default when you put a

193
00:08:46,280 --> 00:08:47,630
variable declaration that variable

194
00:08:47,630 --> 00:08:49,760
declaration is local to the module it's

195
00:08:49,760 --> 00:08:51,890
not exported so if you want to export

196
00:08:51,890 --> 00:08:53,180
something with the rest of the world you

197
00:08:53,180 --> 00:08:56,240
say export so this immediately gets you

198
00:08:56,240 --> 00:08:58,790
away from the iffy the immediately

199
00:08:58,790 --> 00:09:01,910
invoked function expression but it's

200
00:09:01,910 --> 00:09:03,200
still creating that that one global

201
00:09:03,200 --> 00:09:06,170
variable and I think the common JSO

202
00:09:06,170 --> 00:09:07,760
approach is a good one where you might

203
00:09:07,760 --> 00:09:09,920
also like to just put the contents of

204
00:09:09,920 --> 00:09:11,990
your module in another file and now you

205
00:09:11,990 --> 00:09:13,730
don't even have to name the module now

206
00:09:13,730 --> 00:09:15,800
you can let your client just import it

207
00:09:15,800 --> 00:09:18,170
however they were require your module

208
00:09:18,170 --> 00:09:20,030
however they want to so this is sort of

209
00:09:20,030 --> 00:09:21,710
the equivalent of the previous slide

210
00:09:21,710 --> 00:09:24,400
it's just being done in a separate file

211
00:09:24,400 --> 00:09:26,990
so the client now just gets to say

212
00:09:26,990 --> 00:09:29,029
something like this I should say that

213
00:09:29,029 --> 00:09:30,740
like none of the none of the syntax is

214
00:09:30,740 --> 00:09:35,390
absolutely set in stone and people like

215
00:09:35,390 --> 00:09:37,250
to argue about the syntax and and you

216
00:09:37,250 --> 00:09:39,050
know we may continue discussing the

217
00:09:39,050 --> 00:09:41,180
syntax but this hopefully gives you a

218
00:09:41,180 --> 00:09:43,660
flavor of what it is we're trying to do

219
00:09:43,660 --> 00:09:46,190
so again we have this new module keyword

220
00:09:46,190 --> 00:09:48,770
and the client can say i'm going to call

221
00:09:48,770 --> 00:09:50,690
their lip my lib and i'm going to

222
00:09:50,690 --> 00:09:52,970
require it from the separate file so

223
00:09:52,970 --> 00:09:55,940
notice now you get to do external module

224
00:09:55,940 --> 00:09:58,070
loading from within javascript no more

225
00:09:58,070 --> 00:10:02,330
script tag necessary this also means

226
00:10:02,330 --> 00:10:04,010
that it's one solution for the language

227
00:10:04,010 --> 00:10:06,380
that works whether it's a nodejs or in

228
00:10:06,380 --> 00:10:11,000
the browser in a mobile app whatever the

229
00:10:11,000 --> 00:10:13,279
next school thing is that you can put as

230
00:10:13,279 --> 00:10:14,870
many of these module declarations in a

231
00:10:14,870 --> 00:10:16,850
row as you want without having to do any

232
00:10:16,850 --> 00:10:20,209
of those nested callbacks so we're doing

233
00:10:20,209 --> 00:10:22,850
io here so what's the trick how did I do

234
00:10:22,850 --> 00:10:25,970
this without avoiding blocking the whole

235
00:10:25,970 --> 00:10:28,220
browser the answer is that there's

236
00:10:28,220 --> 00:10:31,040
really two stages involved in running a

237
00:10:31,040 --> 00:10:32,750
JavaScript program and this is true in

238
00:10:32,750 --> 00:10:35,480
all modern JavaScript engines even

239
00:10:35,480 --> 00:10:37,100
though it's you know we think of it as

240
00:10:37,100 --> 00:10:38,839
an interpreted language every JavaScript

241
00:10:38,839 --> 00:10:39,890
engine actually has a really

242
00:10:39,890 --> 00:10:42,500
sophisticated compiler in it so when

243
00:10:42,500 --> 00:10:44,570
javascript code comes into the engine

244
00:10:44,570 --> 00:10:46,209
the engine actually compiles it first

245
00:10:46,209 --> 00:10:48,110
turns it into some sort of intermediate

246
00:10:48,110 --> 00:10:50,060
representation or maybe into assembly

247
00:10:50,060 --> 00:10:52,250
and then every time you call that code

248
00:10:52,250 --> 00:10:53,750
it's actually going to run the compiled

249
00:10:53,750 --> 00:10:57,740
code so we want to exploit that fact

250
00:10:57,740 --> 00:11:00,950
that there's compilation involved so we

251
00:11:00,950 --> 00:11:04,820
actually shove the i/o portion into the

252
00:11:04,820 --> 00:11:07,399
compilation phase so all of these

253
00:11:07,399 --> 00:11:09,470
requires are happening before any of the

254
00:11:09,470 --> 00:11:11,770
code starts running and that's the trick

255
00:11:11,770 --> 00:11:14,990
when you shove that into for example the

256
00:11:14,990 --> 00:11:17,000
browser the browser can do the i/o in a

257
00:11:17,000 --> 00:11:18,620
separate thread it doesn't have to block

258
00:11:18,620 --> 00:11:22,220
the main UI thread so we have this

259
00:11:22,220 --> 00:11:24,800
compilation phase that does all of the

260
00:11:24,800 --> 00:11:26,870
loading in whatever order it wants on

261
00:11:26,870 --> 00:11:28,430
whatever threads background threads at

262
00:11:28,430 --> 00:11:30,589
once and then we have the separate

263
00:11:30,589 --> 00:11:33,050
execution phase and that's where we once

264
00:11:33,050 --> 00:11:35,300
again will enforce the sequential order

265
00:11:35,300 --> 00:11:38,329
of execution like 0 is in JavaScript so

266
00:11:38,329 --> 00:11:40,850
by introducing news

267
00:11:40,850 --> 00:11:43,009
tax into the language and and extending

268
00:11:43,009 --> 00:11:45,500
the existing compilers we actually will

269
00:11:45,500 --> 00:11:47,870
allow you to write your requires just

270
00:11:47,870 --> 00:11:49,910
the way you want to write them without

271
00:11:49,910 --> 00:11:55,190
blocking the UI thread some more

272
00:11:55,190 --> 00:11:57,290
features of the module system we can

273
00:11:57,290 --> 00:11:58,730
nest module so here's a module

274
00:11:58,730 --> 00:12:00,589
declaration inside of another file that

275
00:12:00,589 --> 00:12:04,459
itself is defining a module and you can

276
00:12:04,459 --> 00:12:06,079
refer to modules by name just like any

277
00:12:06,079 --> 00:12:07,940
other binding in the language so so here

278
00:12:07,940 --> 00:12:09,170
we're just sort of treating this module

279
00:12:09,170 --> 00:12:12,680
like an object and its export map is

280
00:12:12,680 --> 00:12:14,720
like a property of that object so we can

281
00:12:14,720 --> 00:12:19,519
just refer to it as utila but we can

282
00:12:19,519 --> 00:12:21,199
also get compile time checking again

283
00:12:21,199 --> 00:12:23,660
we're extending the compiler here so we

284
00:12:23,660 --> 00:12:25,670
know what these modules are at compile

285
00:12:25,670 --> 00:12:28,180
time the compiler can actually tell us

286
00:12:28,180 --> 00:12:30,649
exactly what the exports of that module

287
00:12:30,649 --> 00:12:33,649
are so here we're saying import utilizzo

288
00:12:33,649 --> 00:12:35,810
variable binding but if we misspelled

289
00:12:35,810 --> 00:12:39,410
map the compiler will tell us right away

290
00:12:39,410 --> 00:12:41,690
before it starts running the program you

291
00:12:41,690 --> 00:12:44,209
got a you got a variable name wrong so

292
00:12:44,209 --> 00:12:45,800
one of the most annoying bugs I find

293
00:12:45,800 --> 00:12:47,470
when I'm writing JavaScript code is

294
00:12:47,470 --> 00:12:50,029
whenever I fat finger a variable name I

295
00:12:50,029 --> 00:12:51,860
don't find out till somewhere in testing

296
00:12:51,860 --> 00:12:53,540
or if I forgot to test that particular

297
00:12:53,540 --> 00:12:56,089
path I don't find out till the codes

298
00:12:56,089 --> 00:12:59,389
already out there and running in in

299
00:12:59,389 --> 00:13:01,899
harmony and jace next we're actually

300
00:13:01,899 --> 00:13:05,389
designing it so that all unbound

301
00:13:05,389 --> 00:13:07,220
variables will give you an early error

302
00:13:07,220 --> 00:13:09,319
or compile time error and that includes

303
00:13:09,319 --> 00:13:14,660
a bogus imports the other thing we can

304
00:13:14,660 --> 00:13:16,939
do again exploiting this compile time

305
00:13:16,939 --> 00:13:18,680
information we can say import util dot

306
00:13:18,680 --> 00:13:21,199
star which you know some people think

307
00:13:21,199 --> 00:13:22,759
that's bad style but for scripting

308
00:13:22,759 --> 00:13:25,040
that's often just really useful if

309
00:13:25,040 --> 00:13:26,630
you've got some module that has 200

310
00:13:26,630 --> 00:13:28,970
exports and you want to use 120 of them

311
00:13:28,970 --> 00:13:30,709
and you don't want to name them all by

312
00:13:30,709 --> 00:13:33,410
name you can just say import that module

313
00:13:33,410 --> 00:13:36,709
dot star and this doesn't have all the

314
00:13:36,709 --> 00:13:41,540
problems that with has so with is you

315
00:13:41,540 --> 00:13:43,069
know the problems of width come from the

316
00:13:43,069 --> 00:13:44,750
fact that it's doing dynamic variable

317
00:13:44,750 --> 00:13:46,069
binding what we're doing here is

318
00:13:46,069 --> 00:13:47,990
completely compile-time variable binding

319
00:13:47,990 --> 00:13:50,000
so the compiler knows what all of those

320
00:13:50,000 --> 00:13:53,860
variables are

321
00:13:53,870 --> 00:13:56,300
another thing that we are inheriting

322
00:13:56,300 --> 00:14:00,700
from common Jas here is the notion that

323
00:14:00,700 --> 00:14:02,810
models that you require our Singleton's

324
00:14:02,810 --> 00:14:05,870
so if you require the same the same

325
00:14:05,870 --> 00:14:08,210
module multiple times in the same

326
00:14:08,210 --> 00:14:10,190
program you'll get one single instance

327
00:14:10,190 --> 00:14:13,700
of that module which is just it's just

328
00:14:13,700 --> 00:14:19,160
what you want so those were all sort of

329
00:14:19,160 --> 00:14:23,300
static patterns but of course for you

330
00:14:23,300 --> 00:14:28,400
know real serious JavaScript apps you

331
00:14:28,400 --> 00:14:30,650
often need to be able to do dynamic or

332
00:14:30,650 --> 00:14:33,230
lazy or conditional loading of modules

333
00:14:33,230 --> 00:14:36,770
so the static modules that I was showing

334
00:14:36,770 --> 00:14:39,200
you were sort of the simple easy way to

335
00:14:39,200 --> 00:14:41,360
do the common cases but if you want to

336
00:14:41,360 --> 00:14:44,270
do dynamic loading we also have an API

337
00:14:44,270 --> 00:14:46,880
included in the design that lets you do

338
00:14:46,880 --> 00:14:49,100
make dynamic decisions about requiring

339
00:14:49,100 --> 00:14:50,570
and that's where you actually do have to

340
00:14:50,570 --> 00:14:52,760
use the callbacks so for example if you

341
00:14:52,760 --> 00:14:54,290
have some easter egg on your site and

342
00:14:54,290 --> 00:14:56,360
you don't expect it to be clicked very

343
00:14:56,360 --> 00:14:57,770
often and you don't want everyone to pay

344
00:14:57,770 --> 00:14:59,870
the cost of loading the easter egg

345
00:14:59,870 --> 00:15:03,020
module you can do you know on click for

346
00:15:03,020 --> 00:15:06,230
the the easter egg element you'll then

347
00:15:06,230 --> 00:15:08,510
make the dynamic decision to call this

348
00:15:08,510 --> 00:15:10,670
require method on a module loader object

349
00:15:10,670 --> 00:15:12,620
which I'll talk about in a minute give

350
00:15:12,620 --> 00:15:14,930
it the URL and the callback that takes

351
00:15:14,930 --> 00:15:17,420
the dynamically loaded module okay so

352
00:15:17,420 --> 00:15:19,940
the design accommodates both static uses

353
00:15:19,940 --> 00:15:23,410
of modules and dynamic uses of modules

354
00:15:23,410 --> 00:15:28,270
okay that's sort of the basic highlights

355
00:15:28,270 --> 00:15:31,850
this might get a little Trippier now I

356
00:15:31,850 --> 00:15:37,070
hope that's okay I hope it's fun there's

357
00:15:37,070 --> 00:15:38,570
there's something kind of lurking

358
00:15:38,570 --> 00:15:41,390
underneath here that gets at the heart

359
00:15:41,390 --> 00:15:43,610
of one of the really mind twisting

360
00:15:43,610 --> 00:15:47,920
aspects of javascript javascript

361
00:15:47,920 --> 00:15:50,720
actually gives you this crazy ability to

362
00:15:50,720 --> 00:15:54,709
eval inside of your eval I'll spare you

363
00:15:54,709 --> 00:16:02,600
the the yo dog jokes but so we can do

364
00:16:02,600 --> 00:16:04,459
things like eval of eval of eval of eval

365
00:16:04,459 --> 00:16:06,500
in JavaScript and this this might seem

366
00:16:06,500 --> 00:16:07,790
like a crazy parlor trick

367
00:16:07,790 --> 00:16:12,680
um and in fact you know there's there's

368
00:16:12,680 --> 00:16:14,060
lots of people who have learned that

369
00:16:14,060 --> 00:16:16,670
that we should never touch eval eval is

370
00:16:16,670 --> 00:16:18,350
evil all of those things we've all heard

371
00:16:18,350 --> 00:16:21,530
it and I'm so inspired by Andrew DuPont

372
00:16:21,530 --> 00:16:23,510
who who's telling us all relax

373
00:16:23,510 --> 00:16:25,610
everything is ok you just got to know

374
00:16:25,610 --> 00:16:29,180
what you're doing so I personally don't

375
00:16:29,180 --> 00:16:31,370
want to see eval go away I think eval is

376
00:16:31,370 --> 00:16:33,800
an incredibly powerful tool that's not

377
00:16:33,800 --> 00:16:36,410
always the right tool so you know we all

378
00:16:36,410 --> 00:16:38,680
know we've all seen these examples of

379
00:16:38,680 --> 00:16:41,090
ridiculous programs that use eval where

380
00:16:41,090 --> 00:16:44,000
they had no business doing so you know

381
00:16:44,000 --> 00:16:45,170
when you can use bracket notation

382
00:16:45,170 --> 00:16:47,480
there's absolutely no reason to be using

383
00:16:47,480 --> 00:16:51,560
eval but that said there's plenty of

384
00:16:51,560 --> 00:16:53,360
examples where I can't think of anything

385
00:16:53,360 --> 00:16:55,190
other than eval that will do the trick

386
00:16:55,190 --> 00:16:58,720
so if i want to write a little

387
00:16:58,720 --> 00:17:01,070
command-line interface for javascript a

388
00:17:01,070 --> 00:17:02,810
little JavaScript shell how am I going

389
00:17:02,810 --> 00:17:04,580
to do that without evil am I going to

390
00:17:04,580 --> 00:17:07,130
write my own JavaScript interpreter just

391
00:17:07,130 --> 00:17:09,530
to implement that that seems absurd

392
00:17:09,530 --> 00:17:11,390
that's exactly what eval was built for

393
00:17:11,390 --> 00:17:13,430
and this I mean this site you know is

394
00:17:13,430 --> 00:17:17,210
maybe not the most you know full scale

395
00:17:17,210 --> 00:17:20,210
web app in the world but there are real

396
00:17:20,210 --> 00:17:21,860
web apps that need to evaluate

397
00:17:21,860 --> 00:17:24,440
JavaScript code for real serious

398
00:17:24,440 --> 00:17:27,200
purposes we've seen some some awesome

399
00:17:27,200 --> 00:17:34,040
demos yesterday of the ACE editor of

400
00:17:34,040 --> 00:17:37,100
course there's code mirror and when you

401
00:17:37,100 --> 00:17:38,810
have an IDE that somebody's editing

402
00:17:38,810 --> 00:17:40,160
their JavaScript code and they want to

403
00:17:40,160 --> 00:17:42,020
run that JavaScript code well that's

404
00:17:42,020 --> 00:17:43,910
that's evil right the the cloud-based

405
00:17:43,910 --> 00:17:45,710
editors are written in JavaScript

406
00:17:45,710 --> 00:17:47,930
they're taking JavaScript code and

407
00:17:47,930 --> 00:17:49,850
running that JavaScript code so that's

408
00:17:49,850 --> 00:17:52,250
an eval inside of an eval there's sort

409
00:17:52,250 --> 00:17:54,380
of a hidden inception inside of every

410
00:17:54,380 --> 00:17:58,100
one of these web apps but there is kind

411
00:17:58,100 --> 00:18:00,530
of a nuisance of that eval which is the

412
00:18:00,530 --> 00:18:02,570
fact that every one of them is sort of

413
00:18:02,570 --> 00:18:04,690
sharing this one single global namespace

414
00:18:04,690 --> 00:18:08,600
so if I'm writing my own cloud-based ide

415
00:18:08,600 --> 00:18:10,490
and I'm taking some arbitrary strangers

416
00:18:10,490 --> 00:18:12,350
JavaScript code and I'm running it I'd

417
00:18:12,350 --> 00:18:14,210
really rather run it inside of some sort

418
00:18:14,210 --> 00:18:16,040
of a sandbox so that i can make sure

419
00:18:16,040 --> 00:18:17,510
that their codes not accidentally going

420
00:18:17,510 --> 00:18:19,130
to trip up on the javascript code that

421
00:18:19,130 --> 00:18:21,230
implemented the ide itself

422
00:18:21,230 --> 00:18:23,630
and if they're going to do things like

423
00:18:23,630 --> 00:18:26,720
hack the the prototypes of the standard

424
00:18:26,720 --> 00:18:28,850
built-ins I don't want that to mess up

425
00:18:28,850 --> 00:18:32,299
the operation of the IDE itself so I'd

426
00:18:32,299 --> 00:18:35,270
really like to be able to kind of create

427
00:18:35,270 --> 00:18:37,130
these nested evals and somewhat of a

428
00:18:37,130 --> 00:18:39,950
more protected setting so I showed you

429
00:18:39,950 --> 00:18:42,220
that module loader dot require before

430
00:18:42,220 --> 00:18:47,330
module loaders are actually the the way

431
00:18:47,330 --> 00:18:49,549
that we can do nested evaluation in a

432
00:18:49,549 --> 00:18:51,230
more protected sandbox a module loader

433
00:18:51,230 --> 00:18:54,740
is itself a sandbox so it's module

434
00:18:54,740 --> 00:18:58,820
loaders all the way down and we can take

435
00:18:58,820 --> 00:19:00,620
an existing loader say parent loader and

436
00:19:00,620 --> 00:19:03,890
create a new one and we get a lot of

437
00:19:03,890 --> 00:19:05,510
bells and whistles where we can control

438
00:19:05,510 --> 00:19:08,929
exactly what that sandbox does and

439
00:19:08,929 --> 00:19:10,460
doesn't allow what it shares with its

440
00:19:10,460 --> 00:19:12,200
parent and what it doesn't and we can

441
00:19:12,200 --> 00:19:14,030
and we can eval inside of that loader or

442
00:19:14,030 --> 00:19:15,980
we can require external modules with

443
00:19:15,980 --> 00:19:18,020
that loader so some of the things that

444
00:19:18,020 --> 00:19:21,080
these sandboxes let you do you can

445
00:19:21,080 --> 00:19:23,240
control the instance caching that that

446
00:19:23,240 --> 00:19:27,410
makes the singleton behavior work you

447
00:19:27,410 --> 00:19:28,970
can create custom loading behavior so

448
00:19:28,970 --> 00:19:30,860
you could decide that you want to

449
00:19:30,860 --> 00:19:35,419
redirect load requests to some CDN or to

450
00:19:35,419 --> 00:19:37,070
some local storage where you've been

451
00:19:37,070 --> 00:19:39,440
cashing it you can you can put whatever

452
00:19:39,440 --> 00:19:41,780
custom behavior you want there you can

453
00:19:41,780 --> 00:19:43,309
create a separate global object so that

454
00:19:43,309 --> 00:19:45,830
it's completely isolated from the parent

455
00:19:45,830 --> 00:19:48,260
loader you can create fresh built-ins so

456
00:19:48,260 --> 00:19:50,510
that prototype hacking doesn't interfere

457
00:19:50,510 --> 00:19:52,700
with each other and you can even do

458
00:19:52,700 --> 00:19:54,950
compiler hooks so you can actually add

459
00:19:54,950 --> 00:19:58,610
your own compile time checking like a

460
00:19:58,610 --> 00:20:00,350
lint tool or you could even add your own

461
00:20:00,350 --> 00:20:02,299
arbitrary compilation where you can say

462
00:20:02,299 --> 00:20:03,530
hey I want a module loader that

463
00:20:03,530 --> 00:20:05,000
understands CoffeeScript instead of

464
00:20:05,000 --> 00:20:09,950
JavaScript so uh where we are right now

465
00:20:09,950 --> 00:20:14,090
we've prototyped this in a meta circular

466
00:20:14,090 --> 00:20:15,350
evaluator for java script called

467
00:20:15,350 --> 00:20:18,530
narcissus I've built the the core module

468
00:20:18,530 --> 00:20:19,910
system and parts of the the module

469
00:20:19,910 --> 00:20:22,850
letters as well and for the sake of demo

470
00:20:22,850 --> 00:20:26,720
we also have an add-on for a Firefox

471
00:20:26,720 --> 00:20:29,809
called Zaphod that takes narcissus and

472
00:20:29,809 --> 00:20:32,600
drops it in as a replacement for spider

473
00:20:32,600 --> 00:20:34,580
monkey

474
00:20:34,580 --> 00:20:39,529
so I'd like to do a demo just showing

475
00:20:39,529 --> 00:20:41,899
you a little bit of some of the kinds of

476
00:20:41,899 --> 00:20:45,130
cool things you can do alright so here

477
00:20:45,130 --> 00:20:47,390
I've heard people saying they don't like

478
00:20:47,390 --> 00:20:51,190
live coding I hope this isn't unpleasant

479
00:20:51,190 --> 00:20:58,669
okay so here we've got a little tiny web

480
00:20:58,669 --> 00:21:11,059
page let's call this one harmony okay so

481
00:21:11,059 --> 00:21:15,429
here's a little div called harmony and

482
00:21:15,429 --> 00:21:17,929
just to show you that we're working with

483
00:21:17,929 --> 00:21:21,559
narcissus type equals script narcissist

484
00:21:21,559 --> 00:21:23,360
this is what Zaphod does is it lets you

485
00:21:23,360 --> 00:21:32,159
use this sorry application narcissus

486
00:21:32,169 --> 00:21:48,360
right so of our element equals document

487
00:21:48,370 --> 00:21:51,160
okay so that code was actually not

488
00:21:51,160 --> 00:21:52,030
running through spider monkey but

489
00:21:52,030 --> 00:21:54,280
running through narcissus so so this is

490
00:21:54,280 --> 00:21:55,870
actually the extended that the language

491
00:21:55,870 --> 00:22:01,030
extended with the module system so one

492
00:22:01,030 --> 00:22:06,220
thing that I've done is well here let me

493
00:22:06,220 --> 00:22:08,530
show you know it's still like this

494
00:22:08,530 --> 00:22:13,860
script type equals application or cissus

495
00:22:13,860 --> 00:22:17,410
source equals coffee so I've implemented

496
00:22:17,410 --> 00:22:20,590
a little module loader for coffee script

497
00:22:20,590 --> 00:22:23,380
and it's not the full coffeescript it's

498
00:22:23,380 --> 00:22:33,429
just enough to demo so I could do just

499
00:22:33,429 --> 00:22:35,520
to show you that it really is there

500
00:22:35,520 --> 00:22:42,160
alert coffeescript okay so there's a

501
00:22:42,160 --> 00:22:44,800
module loader called coffee script that

502
00:22:44,800 --> 00:22:48,880
I brought into scope so I don't know if

503
00:22:48,880 --> 00:22:51,610
this exactly will be something we could

504
00:22:51,610 --> 00:22:53,140
do for HTML but I would really love it

505
00:22:53,140 --> 00:22:56,080
if we could if we could just take an

506
00:22:56,080 --> 00:22:58,030
existing module loader that's already

507
00:22:58,030 --> 00:23:00,160
been defined and say that's the loader I

508
00:23:00,160 --> 00:23:02,830
want to use for this script tag so then

509
00:23:02,830 --> 00:23:06,840
I could do element equals document Oh

510
00:23:06,840 --> 00:23:31,260
should create that element

511
00:23:31,270 --> 00:23:33,160
okay so there's some coffee script code

512
00:23:33,160 --> 00:23:37,720
just embedded in my web page and there

513
00:23:37,720 --> 00:23:42,550
it is okay and just to show you that I'm

514
00:23:42,550 --> 00:23:59,310
really weird I've got 14 scheme as well

515
00:23:59,320 --> 00:24:02,950
okay so here's some scheme code to find

516
00:24:02,950 --> 00:24:19,549
element

517
00:24:19,559 --> 00:24:27,670
oh yeah

518
00:24:27,680 --> 00:24:32,160
Thanks pair programming document dot get

519
00:24:32,160 --> 00:24:37,050
element by ID scheme set bang element

520
00:24:37,050 --> 00:24:41,880
that entry channel oh man the dot should

521
00:24:41,880 --> 00:24:45,300
work let's look at my backup file and

522
00:24:45,300 --> 00:24:47,820
see what I did wrong scheme dash loader

523
00:24:47,820 --> 00:24:51,780
is it's always good to have a cheat

524
00:24:51,780 --> 00:25:00,880
sheet there we go alright

525
00:25:00,890 --> 00:25:03,150
okay so as I say I don't know if the

526
00:25:03,150 --> 00:25:06,060
HTML extensions here are going to fly I

527
00:25:06,060 --> 00:25:09,690
have not yet pitched that to anybody but

528
00:25:09,690 --> 00:25:12,060
that's kind of my goal here is that I'd

529
00:25:12,060 --> 00:25:14,070
like to be able to let you write your

530
00:25:14,070 --> 00:25:16,710
own language extensions and then plug

531
00:25:16,710 --> 00:25:19,110
them directly declaratively into the

532
00:25:19,110 --> 00:25:21,270
into your HTML so that you can put

533
00:25:21,270 --> 00:25:22,920
whatever languages you want or whatever

534
00:25:22,920 --> 00:25:26,280
extensions to javascript you want this

535
00:25:26,280 --> 00:25:27,360
of course is going to have a performance

536
00:25:27,360 --> 00:25:30,270
cost so it may not always be viable in

537
00:25:30,270 --> 00:25:33,090
production but what it does mean is that

538
00:25:33,090 --> 00:25:36,030
when you're when you're in development

539
00:25:36,030 --> 00:25:37,920
you don't have to run your own

540
00:25:37,920 --> 00:25:39,600
preprocessor on the code before you

541
00:25:39,600 --> 00:25:42,150
before you can actually keep reloading

542
00:25:42,150 --> 00:25:44,730
it means that you can do that the more

543
00:25:44,730 --> 00:25:47,160
dynamic shift reload style that that

544
00:25:47,160 --> 00:25:49,620
will know and love for the development

545
00:25:49,620 --> 00:25:59,070
process okay so that was the demo all

546
00:25:59,070 --> 00:26:00,930
right so I actually don't have too much

547
00:26:00,930 --> 00:26:03,480
more might run a little under but I want

548
00:26:03,480 --> 00:26:05,190
to address head on something that you

549
00:26:05,190 --> 00:26:07,110
know I always hear a fair amount of

550
00:26:07,110 --> 00:26:10,920
angst about you know I I'm not trying to

551
00:26:10,920 --> 00:26:13,440
taunt you with things that that you

552
00:26:13,440 --> 00:26:15,960
can't have tomorrow but at the same time

553
00:26:15,960 --> 00:26:17,640
I can't promise you that these things

554
00:26:17,640 --> 00:26:24,630
are going to happen overnight so the the

555
00:26:24,630 --> 00:26:26,610
life cycle of the standards process is

556
00:26:26,610 --> 00:26:29,910
long and and it means that that these

557
00:26:29,910 --> 00:26:35,130
things take some time but but here's my

558
00:26:35,130 --> 00:26:37,650
plan this is this is my answer to that

559
00:26:37,650 --> 00:26:40,770
question I've got to work hard and the

560
00:26:40,770 --> 00:26:42,630
rest of tc39 s gotta work hard and we

561
00:26:42,630 --> 00:26:45,950
are working hard on specking prototyping

562
00:26:45,950 --> 00:26:49,380
building in real browsers and then

563
00:26:49,380 --> 00:26:52,740
deploying so we've moved at Mozilla to a

564
00:26:52,740 --> 00:26:55,200
faster release cycle that's more in line

565
00:26:55,200 --> 00:26:57,270
with the the speed of the chrome

566
00:26:57,270 --> 00:27:00,390
lifecycle and so we're not waiting for

567
00:27:00,390 --> 00:27:02,070
the full standard to come out to start

568
00:27:02,070 --> 00:27:04,950
deploying these features so we're hoping

569
00:27:04,950 --> 00:27:07,620
to try to ship modules somewhere around

570
00:27:07,620 --> 00:27:09,660
Firefox seven or so that is not a

571
00:27:09,660 --> 00:27:12,820
promise but

572
00:27:12,820 --> 00:27:16,179
firefox 7 is actually scheduled to be

573
00:27:16,179 --> 00:27:19,659
later this year so it's our hope to get

574
00:27:19,659 --> 00:27:21,340
this in the hands of developers as soon

575
00:27:21,340 --> 00:27:23,409
as as humanly possible now that'll be

576
00:27:23,409 --> 00:27:25,269
sort of the initial release out of you

577
00:27:25,269 --> 00:27:26,980
know maybe be unstable as the standards

578
00:27:26,980 --> 00:27:28,840
process continues we'll have to keep

579
00:27:28,840 --> 00:27:30,880
refining you may not be able to build

580
00:27:30,880 --> 00:27:32,500
production code that depends on it

581
00:27:32,500 --> 00:27:34,059
immediately but it does mean that you'll

582
00:27:34,059 --> 00:27:37,120
be able to try it out soon but there's

583
00:27:37,120 --> 00:27:39,850
also you know just just because it's

584
00:27:39,850 --> 00:27:43,509
it's released in 2011 or 2012 in modern

585
00:27:43,509 --> 00:27:45,580
web browsers doesn't mean that every web

586
00:27:45,580 --> 00:27:47,889
app will be able to depend on it because

587
00:27:47,889 --> 00:27:49,600
you're going to have to wait for non

588
00:27:49,600 --> 00:27:52,419
modern web browsers to catch up but

589
00:27:52,419 --> 00:27:54,220
there is a polyfill answer even for

590
00:27:54,220 --> 00:27:55,360
language extensions and this is

591
00:27:55,360 --> 00:27:57,250
something that Brendan mentioned just

592
00:27:57,250 --> 00:27:59,740
briefly yesterday but but i really want

593
00:27:59,740 --> 00:28:04,269
to hammer on it just sort of like I was

594
00:28:04,269 --> 00:28:06,009
showing with with module odors that we

595
00:28:06,009 --> 00:28:08,830
could you know you could use it for

596
00:28:08,830 --> 00:28:13,450
development as a quick reloading process

597
00:28:13,450 --> 00:28:15,100
a quick debugging process but you could

598
00:28:15,100 --> 00:28:18,070
still do an offline compiler we can do

599
00:28:18,070 --> 00:28:19,480
offline compilers just like coffee

600
00:28:19,480 --> 00:28:24,190
script for Jace next and we can even do

601
00:28:24,190 --> 00:28:26,769
tricks like we did with Zaphod to let

602
00:28:26,769 --> 00:28:28,840
you do that in a really convenient way

603
00:28:28,840 --> 00:28:30,340
in development but then you could run

604
00:28:30,340 --> 00:28:32,799
the preprocessor offline for for

605
00:28:32,799 --> 00:28:38,110
deployment so my hope is that shims will

606
00:28:38,110 --> 00:28:39,909
help that that people will be able to

607
00:28:39,909 --> 00:28:41,320
start using the new features knowing

608
00:28:41,320 --> 00:28:43,389
that ultimately the web browsers will

609
00:28:43,389 --> 00:28:44,799
actually have built-in support for it

610
00:28:44,799 --> 00:28:47,350
but until they do they can precompile I

611
00:28:47,350 --> 00:28:49,419
think that's going to help but the last

612
00:28:49,419 --> 00:28:52,450
point I hope advocacy is not a dirty

613
00:28:52,450 --> 00:28:55,840
word but the developer community has a

614
00:28:55,840 --> 00:28:59,019
really strong voice and what what

615
00:28:59,019 --> 00:29:01,690
developers clamor for browser vendors

616
00:29:01,690 --> 00:29:06,460
have to build so if you demand it that

617
00:29:06,460 --> 00:29:09,389
will help bring the better future faster

618
00:29:09,389 --> 00:29:12,159
so that's a taste of the module system

619
00:29:12,159 --> 00:29:15,399
I'm happy to to dive deeper with people

620
00:29:15,399 --> 00:29:17,379
offline and I'm happy to take any

621
00:29:17,379 --> 00:29:20,110
questions about Jace next at all thanks

622
00:29:20,110 --> 00:29:22,620
very much what's going on with proxies

623
00:29:22,620 --> 00:29:26,880
proxies are in so proxies are

624
00:29:26,880 --> 00:29:31,920
a fairly stable design at this point

625
00:29:31,920 --> 00:29:35,280
they're they're widely lights on the

626
00:29:35,280 --> 00:29:37,980
committee they're very very powerful and

627
00:29:37,980 --> 00:29:39,540
we can do a lot of cool things with them

628
00:29:39,540 --> 00:29:42,990
and Firefox 4 is shipping with them as I

629
00:29:42,990 --> 00:29:44,910
said there may be some some API changes

630
00:29:44,910 --> 00:29:47,270
so it's not completely stable yet but

631
00:29:47,270 --> 00:29:50,550
but you can you can use them today and

632
00:29:50,550 --> 00:29:52,170
it's my understanding that there are

633
00:29:52,170 --> 00:29:53,760
chrome developers who are interested in

634
00:29:53,760 --> 00:29:56,070
building it soon v8 developers who are

635
00:29:56,070 --> 00:29:57,060
interested in building it soon but I

636
00:29:57,060 --> 00:29:59,760
don't want to speak for them but yeah

637
00:29:59,760 --> 00:30:01,700
they are they are harmonious they are

638
00:30:01,700 --> 00:30:06,060
agreed upon by the whole committee so

639
00:30:06,060 --> 00:30:07,830
the question is is an import that star

640
00:30:07,830 --> 00:30:10,200
dangerous because names you didn't

641
00:30:10,200 --> 00:30:13,920
expect can get injected so import that

642
00:30:13,920 --> 00:30:16,290
star is not something that's happening

643
00:30:16,290 --> 00:30:17,640
at runtime it's happening at compile

644
00:30:17,640 --> 00:30:20,730
time so it's not like running code can

645
00:30:20,730 --> 00:30:23,220
suddenly inject new things into into the

646
00:30:23,220 --> 00:30:26,570
namespace but there is you know there is

647
00:30:26,570 --> 00:30:28,590
somewhat of a hazard that you might get

648
00:30:28,590 --> 00:30:30,060
it you might get in scope a name that

649
00:30:30,060 --> 00:30:33,060
you didn't expect however part of the

650
00:30:33,060 --> 00:30:35,580
design and modules is that if you have a

651
00:30:35,580 --> 00:30:37,260
name collision where you imported the

652
00:30:37,260 --> 00:30:39,420
same name from multiple places it's

653
00:30:39,420 --> 00:30:41,940
going to give you an early error instead

654
00:30:41,940 --> 00:30:45,420
of just sort of silently picking one so

655
00:30:45,420 --> 00:30:46,590
somebody's not going to be able to

656
00:30:46,590 --> 00:30:50,550
secretly override the name via import

657
00:30:50,550 --> 00:30:53,760
star that said I fully expect that there

658
00:30:53,760 --> 00:30:55,380
will be people building lint tools that

659
00:30:55,380 --> 00:30:57,780
say you shouldn't use import star just

660
00:30:57,780 --> 00:30:59,700
like they say you shouldn't use minus

661
00:30:59,700 --> 00:31:01,440
minus and I think we're all grown-ups

662
00:31:01,440 --> 00:31:03,330
and we can we can make those decisions

663
00:31:03,330 --> 00:31:05,640
for ourselves I think imports star

664
00:31:05,640 --> 00:31:08,610
import that star is just too useful for

665
00:31:08,610 --> 00:31:12,210
scripting for rapid development and for

666
00:31:12,210 --> 00:31:13,340
cases where you know what you're doing

667
00:31:13,340 --> 00:31:16,200
but I certainly can understand that a

668
00:31:16,200 --> 00:31:18,750
development shop might decide that you

669
00:31:18,750 --> 00:31:20,520
know their coding practices say don't

670
00:31:20,520 --> 00:31:24,480
use it I know what the question is

671
00:31:24,480 --> 00:31:26,130
though is what's what's the deal with

672
00:31:26,130 --> 00:31:28,170
require being a keyword requires a

673
00:31:28,170 --> 00:31:30,150
contextual keyword here not a keyword so

674
00:31:30,150 --> 00:31:31,350
the module for my should have said this

675
00:31:31,350 --> 00:31:33,090
the module forum is a special form and

676
00:31:33,090 --> 00:31:34,860
what's on the right-hand side of the

677
00:31:34,860 --> 00:31:37,110
equals is not a arbitrary JavaScript

678
00:31:37,110 --> 00:31:39,930
expression it's a module expression and

679
00:31:39,930 --> 00:31:40,230
so

680
00:31:40,230 --> 00:31:42,720
it's a limited sub grammar and require

681
00:31:42,720 --> 00:31:45,049
is only special in that context so

682
00:31:45,049 --> 00:31:47,190
there's no backwards compatibility

683
00:31:47,190 --> 00:31:50,160
issues with the syntax of require there

684
00:31:50,160 --> 00:31:51,570
are potentially some compatibility

685
00:31:51,570 --> 00:31:55,380
issues with this syntax of module first

686
00:31:55,380 --> 00:31:57,150
of all I should point out that this is

687
00:31:57,150 --> 00:32:01,320
an opt-in new language so so j/s next is

688
00:32:01,320 --> 00:32:02,429
going to be something that's not going

689
00:32:02,429 --> 00:32:04,020
to just get turned on by default in the

690
00:32:04,020 --> 00:32:05,280
browser it's going to be something that

691
00:32:05,280 --> 00:32:07,580
you have to choose via a new script type

692
00:32:07,580 --> 00:32:10,799
so we are allowing some level of

693
00:32:10,799 --> 00:32:13,200
backwards and compatibility to try to

694
00:32:13,200 --> 00:32:15,750
fix things that that you know that we

695
00:32:15,750 --> 00:32:17,130
really want to fix that people really

696
00:32:17,130 --> 00:32:20,280
want fixed but we'd also like to keep

697
00:32:20,280 --> 00:32:22,200
the migration costs low so we don't want

698
00:32:22,200 --> 00:32:25,040
too many you know really unnecessary

699
00:32:25,040 --> 00:32:28,530
gratuitous incompatibilities so we'll

700
00:32:28,530 --> 00:32:30,270
look at possible ways of finessing the

701
00:32:30,270 --> 00:32:31,770
module keyword to make it a little bit

702
00:32:31,770 --> 00:32:33,690
less incompatible but the require

703
00:32:33,690 --> 00:32:36,630
keyword there's there's no problem I did

704
00:32:36,630 --> 00:32:39,270
can you talk about how the require

705
00:32:39,270 --> 00:32:42,510
system plays with with packaging systems

706
00:32:42,510 --> 00:32:43,620
that people are using today where you

707
00:32:43,620 --> 00:32:48,520
may have many modules in a single file

708
00:32:48,530 --> 00:32:51,210
it's a good question I think I think to

709
00:32:51,210 --> 00:32:52,980
some degree what we're trying to do is

710
00:32:52,980 --> 00:32:56,460
not solve the packaging system problem

711
00:32:56,460 --> 00:32:59,940
and let people continue to create their

712
00:32:59,940 --> 00:33:04,980
own packaging systems as far as oh did

713
00:33:04,980 --> 00:33:07,290
you mean like like like bundles like

714
00:33:07,290 --> 00:33:08,910
that or maybe in a jar file or a zip

715
00:33:08,910 --> 00:33:16,410
file or something like that so as if

716
00:33:16,410 --> 00:33:18,419
it's in source form you can have many

717
00:33:18,419 --> 00:33:21,299
modules either required by one rapper

718
00:33:21,299 --> 00:33:23,640
module or even just nested inside of it

719
00:33:23,640 --> 00:33:26,370
but if it's in some other form like zip

720
00:33:26,370 --> 00:33:29,610
or jar or something like that I don't

721
00:33:29,610 --> 00:33:31,890
have any plans for anything built in but

722
00:33:31,890 --> 00:33:33,960
module letters do let you write your own

723
00:33:33,960 --> 00:33:36,390
custom loading semantics so that was one

724
00:33:36,390 --> 00:33:38,940
of those like circling the sandbox there

725
00:33:38,940 --> 00:33:41,580
were all these different knobs that you

726
00:33:41,580 --> 00:33:44,580
could customize one of them is the

727
00:33:44,580 --> 00:33:46,380
loading semantics you can write your own

728
00:33:46,380 --> 00:33:49,260
code that maybe uses some of the new

729
00:33:49,260 --> 00:33:51,990
binary data and IO facilities to read

730
00:33:51,990 --> 00:33:53,490
whatever source format you

731
00:33:53,490 --> 00:33:56,400
recognized so that's why I say we're

732
00:33:56,400 --> 00:33:59,100
sort of leaving that to continue to be

733
00:33:59,100 --> 00:34:01,679
explored by the community rather than

734
00:34:01,679 --> 00:34:04,080
trying to solve it here and now but it

735
00:34:04,080 --> 00:34:06,120
is a very very extensible system so

736
00:34:06,120 --> 00:34:08,030
hopefully people should be able to write

737
00:34:08,030 --> 00:34:12,899
their own loaders for that some of that

738
00:34:12,899 --> 00:34:15,720
is already possible with jar your eyes

739
00:34:15,720 --> 00:34:18,810
using the bank syntax okay loan member

740
00:34:18,810 --> 00:34:21,780
so you could try to factor it out of any

741
00:34:21,780 --> 00:34:23,850
languages module system and into the URI

742
00:34:23,850 --> 00:34:29,550
and the browser's URI handling but yeah

743
00:34:29,550 --> 00:34:30,750
there's still some pieces we need to

744
00:34:30,750 --> 00:34:33,060
work out of the the exact behavior of

745
00:34:33,060 --> 00:34:34,980
the of the standard web module loader

746
00:34:34,980 --> 00:34:37,110
and maybe some of that stuff we can

747
00:34:37,110 --> 00:34:38,669
actually just have work out of the box

748
00:34:38,669 --> 00:34:45,889
and we definitely welcome feedback hi

749
00:34:45,889 --> 00:34:48,300
just wondering if you could expand a

750
00:34:48,300 --> 00:34:51,450
little bit more on you know commonjs and

751
00:34:51,450 --> 00:34:53,190
AMD in a month the migration strategy

752
00:34:53,190 --> 00:34:55,679
because the module loader a.p I looked a

753
00:34:55,679 --> 00:34:59,670
lot like the AMD one and and also we

754
00:34:59,670 --> 00:35:04,020
have plugins on AMD to allow people to

755
00:35:04,020 --> 00:35:06,390
do that either server side or client

756
00:35:06,390 --> 00:35:08,460
side you know cross-compilation as well

757
00:35:08,460 --> 00:35:11,400
there's CoffeeScript plugins as well so

758
00:35:11,400 --> 00:35:14,670
20 have had any other comments about the

759
00:35:14,670 --> 00:35:16,470
migration strategy itself you guys

760
00:35:16,470 --> 00:35:18,330
thought about that yeah I mean I think I

761
00:35:18,330 --> 00:35:20,880
can only speak broadly because I have a

762
00:35:20,880 --> 00:35:24,300
lot more to learn and we have a lot more

763
00:35:24,300 --> 00:35:30,630
conversations left to be had but I do

764
00:35:30,630 --> 00:35:32,609
see a place for tools for migration

765
00:35:32,609 --> 00:35:35,130
tools in this I think so much of the

766
00:35:35,130 --> 00:35:38,609
semantics of what we're doing and the

767
00:35:38,609 --> 00:35:41,040
semantics of modules of comm jas modules

768
00:35:41,040 --> 00:35:43,680
and Andy are very compatible with each

769
00:35:43,680 --> 00:35:46,470
other that hopefully people should be

770
00:35:46,470 --> 00:35:48,090
able to continue writing with the tools

771
00:35:48,090 --> 00:35:50,369
that they have today and we should be

772
00:35:50,369 --> 00:35:51,600
able to build migration tools to help

773
00:35:51,600 --> 00:35:57,000
them move to that tomorrow oh and I

774
00:35:57,000 --> 00:35:58,230
think Wes garland has actually even

775
00:35:58,230 --> 00:36:00,080
started working on some of those tools

776
00:36:00,080 --> 00:36:02,850
but as I say there's more there's more

777
00:36:02,850 --> 00:36:05,609
conversations left to have

778
00:36:05,609 --> 00:36:08,269
I don't know where we are on time but

779
00:36:08,269 --> 00:36:10,470
yeah I think we're just at out of time

780
00:36:10,470 --> 00:36:12,630
so yeah I'm happy to talk more offline

781
00:36:12,630 --> 00:36:19,890
thank you thank you very much happy

