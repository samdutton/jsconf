1
00:00:10,320 --> 00:00:11,900

[Music]

2
00:00:11,900 --> 00:00:15,389
usually drive down the coast I came here

3
00:00:15,389 --> 00:00:21,359
the long way I've been building software

4
00:00:21,359 --> 00:00:23,550
professionally since 1996

5
00:00:23,550 --> 00:00:25,980
I am the organizer of Santa Barbara

6
00:00:25,980 --> 00:00:29,730
JavaScript up the coast I love jazz

7
00:00:29,730 --> 00:00:30,990
music if I were stranded on a desert

8
00:00:30,990 --> 00:00:32,880
island and could take only one genre of

9
00:00:32,880 --> 00:00:33,510
music with me

10
00:00:33,510 --> 00:00:35,040
it'll be jazz it's America's greatest

11
00:00:35,040 --> 00:00:37,050
gift for the world and I'm a dad of two

12
00:00:37,050 --> 00:00:39,540
school-aged kids step-dad to a 19 year

13
00:00:39,540 --> 00:00:41,850
old college student and husband of my

14
00:00:41,850 --> 00:00:43,260
beautiful wife for five years that's me

15
00:00:43,260 --> 00:00:44,879
on twitter follow me there for all sorts

16
00:00:44,879 --> 00:00:48,629
of non sexy cold textured so I'm a

17
00:00:48,629 --> 00:00:50,760
software architecture and pro core

18
00:00:50,760 --> 00:00:51,960
technologies where cloud-based

19
00:00:51,960 --> 00:00:53,850
constructions offer our company and

20
00:00:53,850 --> 00:00:54,960
we're growing like wildfire

21
00:00:54,960 --> 00:00:56,969
Glassdoor meaning us the number four

22
00:00:56,969 --> 00:00:58,920
place overall to work in the US this

23
00:00:58,920 --> 00:01:00,480
year number two in tech ahead of

24
00:01:00,480 --> 00:01:01,949
heavyweights like Facebook Google

25
00:01:01,949 --> 00:01:04,860
Microsoft Amazon etc and we're actively

26
00:01:04,860 --> 00:01:07,290
hiring we got a large react codebase

27
00:01:07,290 --> 00:01:09,600
you're interested in that see me after

28
00:01:09,600 --> 00:01:10,950
the talker in the hallways I'll be happy

29
00:01:10,950 --> 00:01:11,820
to put you in touch with the right

30
00:01:11,820 --> 00:01:13,590
people and I do have some pro core

31
00:01:13,590 --> 00:01:16,020
keychain bottle openers so hit me up

32
00:01:16,020 --> 00:01:18,810
afterwards if you want to try when I'm

33
00:01:18,810 --> 00:01:21,030
not geeking out over tech I'm an avid

34
00:01:21,030 --> 00:01:26,009
scuba diver it's a bad habit don't get

35
00:01:26,009 --> 00:01:28,590
into it it's a major waste of money but

36
00:01:28,590 --> 00:01:31,590
it's a lot of fun all right so why

37
00:01:31,590 --> 00:01:33,720
test-driven development well let's take

38
00:01:33,720 --> 00:01:35,430
a step back for a moment for those who

39
00:01:35,430 --> 00:01:37,290
aren't familiar and let's ask what is

40
00:01:37,290 --> 00:01:39,900
test-driven development well it's a

41
00:01:39,900 --> 00:01:41,430
software development methodology

42
00:01:41,430 --> 00:01:43,799
agnostic and language technology

43
00:01:43,799 --> 00:01:45,689
platform etc and it consists of

44
00:01:45,689 --> 00:01:46,920
repeating a really short development

45
00:01:46,920 --> 00:01:48,250
cycle

46
00:01:48,250 --> 00:01:52,150
red green refactor read is writing a

47
00:01:52,150 --> 00:01:53,590
failing test and watching it fail

48
00:01:53,590 --> 00:01:54,970
knowing it's going to fail

49
00:01:54,970 --> 00:01:57,550
Green is writing just enough code to

50
00:01:57,550 --> 00:01:59,230
make that test pass and committing all

51
00:01:59,230 --> 00:02:01,660
manner of sins to get there and refactor

52
00:02:01,660 --> 00:02:03,400
is changing the internals or optimizing

53
00:02:03,400 --> 00:02:04,750
the internals without breaking the

54
00:02:04,750 --> 00:02:07,420
interface under tests so there's all

55
00:02:07,420 --> 00:02:09,220
sorts of benefits to this methodology

56
00:02:09,220 --> 00:02:11,440
some are technical some are process

57
00:02:11,440 --> 00:02:13,930
based but in my mind the most important

58
00:02:13,930 --> 00:02:15,910
outcome of test-driven development is

59
00:02:15,910 --> 00:02:17,650
that a well-written suite becomes a

60
00:02:17,650 --> 00:02:20,050
shared self documenting understanding of

61
00:02:20,050 --> 00:02:21,540
the problem to me

62
00:02:21,540 --> 00:02:24,280
so it's true that you can actually write

63
00:02:24,280 --> 00:02:26,140
decent tests after the fact and you

64
00:02:26,140 --> 00:02:28,000
could definitely get equivalent coverage

65
00:02:28,000 --> 00:02:29,830
code coverage after the fact the problem

66
00:02:29,830 --> 00:02:31,240
is you may be just asserting the

67
00:02:31,240 --> 00:02:33,190
correctness of bad code or code that

68
00:02:33,190 --> 00:02:35,440
solves the wrong problem in fact you're

69
00:02:35,440 --> 00:02:36,970
kind of just verifying that the monster

70
00:02:36,970 --> 00:02:41,380
lives okay wake up everybody I realized

71
00:02:41,380 --> 00:02:42,970
that this sounds really dry and boring

72
00:02:42,970 --> 00:02:45,550
but the truth is TDD can and should be

73
00:02:45,550 --> 00:02:49,390
fun we first off we get to hook into the

74
00:02:49,390 --> 00:02:51,430
brains own reward system we get to kick

75
00:02:51,430 --> 00:02:53,080
that little dopamine rush off for each

76
00:02:53,080 --> 00:02:55,180
passing test and then when we get a

77
00:02:55,180 --> 00:02:56,769
whole suite of them it makes our

78
00:02:56,769 --> 00:02:59,890
developer brains happy so we all agree

79
00:02:59,890 --> 00:03:01,690
that test-driven development is awesome

80
00:03:01,690 --> 00:03:03,519
right so why would you not want to do

81
00:03:03,519 --> 00:03:06,220
this it turns out a few decades later

82
00:03:06,220 --> 00:03:08,680
this practice is still controversial out

83
00:03:08,680 --> 00:03:10,540
in the wild and there's various

84
00:03:10,540 --> 00:03:12,580
different push backs most of which can

85
00:03:12,580 --> 00:03:14,980
be pretty pretty easily countered it

86
00:03:14,980 --> 00:03:16,630
does definitely feel wrong when you're

87
00:03:16,630 --> 00:03:18,580
first doing it the rest of these can

88
00:03:18,580 --> 00:03:20,650
easily be countered by the benefits that

89
00:03:20,650 --> 00:03:22,630
are given in fact the the last couple

90
00:03:22,630 --> 00:03:24,430
change happens to quickly solution isn't

91
00:03:24,430 --> 00:03:26,590
clear TDD strength as it lets you

92
00:03:26,590 --> 00:03:28,360
systematically close the knowledge gap

93
00:03:28,360 --> 00:03:29,890
between where you are and where you want

94
00:03:29,890 --> 00:03:31,420
to get to so I think you could pretty

95
00:03:31,420 --> 00:03:33,010
easily throw these all in episode of

96
00:03:33,010 --> 00:03:36,549
mythbusters' and maybe firmly busted so

97
00:03:36,549 --> 00:03:38,500
we agree TDD is awesome

98
00:03:38,500 --> 00:03:41,140
why test react components well to start

99
00:03:41,140 --> 00:03:43,299
with there web technologies that we all

100
00:03:43,299 --> 00:03:45,850
know and love are hard and at the end of

101
00:03:45,850 --> 00:03:47,459
the day we're building user interfaces

102
00:03:47,459 --> 00:03:49,750
right we're building something visual

103
00:03:49,750 --> 00:03:51,760
and everybody and their mother has an

104
00:03:51,760 --> 00:03:53,620
opinion on things that are visual and

105
00:03:53,620 --> 00:03:56,049
then in react land we also have this

106
00:03:56,049 --> 00:03:59,260
beast called JSX JSX looks an awful lot

107
00:03:59,260 --> 00:04:00,960
like their web technologies

108
00:04:00,960 --> 00:04:02,460
we're already familiar with it but in

109
00:04:02,460 --> 00:04:06,540
fact it's not these things JSX is just

110
00:04:06,540 --> 00:04:08,790
XML like extensions to the JavaScript

111
00:04:08,790 --> 00:04:11,040
language it's syntactic sugar for the

112
00:04:11,040 --> 00:04:12,360
create element method which just

113
00:04:12,360 --> 00:04:15,120
produces react elements it's not HTML

114
00:04:15,120 --> 00:04:18,350
it's not CSS I think it is JavaScript

115
00:04:18,350 --> 00:04:24,150
got it awesome alright so we agree TDD

116
00:04:24,150 --> 00:04:25,860
is awesome we think we should test our

117
00:04:25,860 --> 00:04:29,790
react components how do we do that when

118
00:04:29,790 --> 00:04:31,560
we think about testing react components

119
00:04:31,560 --> 00:04:33,450
it helps to take a moment think about

120
00:04:33,450 --> 00:04:35,520
the abstractions the react provides and

121
00:04:35,520 --> 00:04:37,560
the primary abstraction that react

122
00:04:37,560 --> 00:04:39,300
provides for us is to model a user

123
00:04:39,300 --> 00:04:42,230
interface as a tree of components and

124
00:04:42,230 --> 00:04:44,670
the docs actually give us some really

125
00:04:44,670 --> 00:04:46,260
helpful little tidbits as we read

126
00:04:46,260 --> 00:04:47,130
through them they tell us that

127
00:04:47,130 --> 00:04:49,530
components are like functions they take

128
00:04:49,530 --> 00:04:51,510
inputs and they return outputs that are

129
00:04:51,510 --> 00:04:54,330
react elements and they go on to say

130
00:04:54,330 --> 00:04:57,450
that they those react elements aren't

131
00:04:57,450 --> 00:05:00,150
dominant they're plain objects and it's

132
00:05:00,150 --> 00:05:01,560
not our responsibility to update the

133
00:05:01,560 --> 00:05:03,260
don't react Dom will do that for us so

134
00:05:03,260 --> 00:05:05,580
there's some really good little nuggets

135
00:05:05,580 --> 00:05:06,960
in there that help us frame this

136
00:05:06,960 --> 00:05:08,280
discussion around how to test react

137
00:05:08,280 --> 00:05:10,260
components the first is components are

138
00:05:10,260 --> 00:05:12,090
like functions they take inputs in

139
00:05:12,090 --> 00:05:14,160
return outputs and there's a little

140
00:05:14,160 --> 00:05:16,890
easier to test than a peer function the

141
00:05:16,890 --> 00:05:18,900
outputs are react elements not Dom

142
00:05:18,900 --> 00:05:21,750
elements those react elements are plain

143
00:05:21,750 --> 00:05:24,030
objects and the Dom is none of your

144
00:05:24,030 --> 00:05:24,570
business

145
00:05:24,570 --> 00:05:26,730
I want to dig into that last point a

146
00:05:26,730 --> 00:05:28,050
little bit more because it's important

147
00:05:28,050 --> 00:05:30,660
it's reflected in the design of react we

148
00:05:30,660 --> 00:05:32,220
actually get one package called react

149
00:05:32,220 --> 00:05:34,500
and that is the core component hash

150
00:05:34,500 --> 00:05:36,330
function and we get a completely

151
00:05:36,330 --> 00:05:38,670
separate package called react Dom that's

152
00:05:38,670 --> 00:05:40,350
responsible for the details of rendering

153
00:05:40,350 --> 00:05:41,880
to the Dom because the Dom is an

154
00:05:41,880 --> 00:05:45,000
implementation detail okay so we saw

155
00:05:45,000 --> 00:05:47,820
from the docs that it's like react

156
00:05:47,820 --> 00:05:49,560
components like a function take inputs

157
00:05:49,560 --> 00:05:51,510
and returns outputs so if we take a

158
00:05:51,510 --> 00:05:54,150
component in its simplest form this is a

159
00:05:54,150 --> 00:05:55,980
basic function component from the docs

160
00:05:55,980 --> 00:05:58,500
and if we just invoke that and pass it

161
00:05:58,500 --> 00:06:01,020
an object with props what we get back is

162
00:06:01,020 --> 00:06:03,240
a react element it's a plane object that

163
00:06:03,240 --> 00:06:05,520
describes what might happen later if we

164
00:06:05,520 --> 00:06:08,280
hand that off to react on this is not

165
00:06:08,280 --> 00:06:10,290
super useful on its own from a testing

166
00:06:10,290 --> 00:06:12,180
point of view there's no API here we

167
00:06:12,180 --> 00:06:13,290
might be able to make some useful

168
00:06:13,290 --> 00:06:14,110
assertions but we're

169
00:06:14,110 --> 00:06:16,450
limited in what we can do so react ships

170
00:06:16,450 --> 00:06:18,670
a package called react test renderer we

171
00:06:18,670 --> 00:06:21,280
speak to it in JSX and we get back an

172
00:06:21,280 --> 00:06:22,990
object with some methods on it like this

173
00:06:22,990 --> 00:06:25,360
- tree method and we get back again a

174
00:06:25,360 --> 00:06:26,980
plane object with a little bit more

175
00:06:26,980 --> 00:06:29,770
detail and it also gives us an API by

176
00:06:29,770 --> 00:06:31,870
which we can query the returned element

177
00:06:31,870 --> 00:06:34,570
and make assertions about it so the docs

178
00:06:34,570 --> 00:06:36,670
don't stop there they go further and

179
00:06:36,670 --> 00:06:38,200
they tell us that if you're writing unit

180
00:06:38,200 --> 00:06:40,630
tests shallow rendering can be helpful

181
00:06:40,630 --> 00:06:42,160
because it frees us from worrying about

182
00:06:42,160 --> 00:06:44,760
child components now this assumes that

183
00:06:44,760 --> 00:06:47,710
unit testing is valuable to you and this

184
00:06:47,710 --> 00:06:48,970
is another thing that's controversial

185
00:06:48,970 --> 00:06:51,370
still out in the wild I believe that

186
00:06:51,370 --> 00:06:52,930
years of testing experience have taught

187
00:06:52,930 --> 00:06:55,570
us that based on cost and speed you

188
00:06:55,570 --> 00:06:57,280
should spend most of your time at the

189
00:06:57,280 --> 00:06:59,220
bottom of the test pyramid on unit tests

190
00:06:59,220 --> 00:07:02,800
UI tests are important and then tests

191
00:07:02,800 --> 00:07:04,180
service and integration tests are

192
00:07:04,180 --> 00:07:05,680
important but they're more expensive

193
00:07:05,680 --> 00:07:07,540
they're slower tend to be more brittle

194
00:07:07,540 --> 00:07:09,820
and from a TDD perspective you're

195
00:07:09,820 --> 00:07:11,800
starting at nothing so you're going to

196
00:07:11,800 --> 00:07:14,560
be building unit tests first so with

197
00:07:14,560 --> 00:07:16,510
that in mind the react test renderer

198
00:07:16,510 --> 00:07:18,910
packages it ships a shallow render very

199
00:07:18,910 --> 00:07:20,980
similar you talk to it in JSX and you

200
00:07:20,980 --> 00:07:23,290
get back a plain object that you can

201
00:07:23,290 --> 00:07:25,300
query it just doesn't render or

202
00:07:25,300 --> 00:07:28,120
instantiate child objects the API is

203
00:07:28,120 --> 00:07:30,370
fairly limited and the docs tell us that

204
00:07:30,370 --> 00:07:32,200
if you want a more robust experience

205
00:07:32,200 --> 00:07:33,940
with shallow rendering to use the

206
00:07:33,940 --> 00:07:35,740
shallow render from enzyme this is a

207
00:07:35,740 --> 00:07:38,650
package from Airbnb this library is also

208
00:07:38,650 --> 00:07:40,240
not without its own controversy and

209
00:07:40,240 --> 00:07:42,190
there are shinier new toys making their

210
00:07:42,190 --> 00:07:43,620
way around the JavaScript ecosystem

211
00:07:43,620 --> 00:07:45,880
there's definitely some legitimate

212
00:07:45,880 --> 00:07:47,800
criticisms of enzyme but on the whole

213
00:07:47,800 --> 00:07:49,810
especially for shallow rendering I think

214
00:07:49,810 --> 00:07:51,460
the pros far outweigh the cons I

215
00:07:51,460 --> 00:07:53,530
wholeheartedly recommend it and it's

216
00:07:53,530 --> 00:07:54,610
what I'm gonna use for the rest of this

217
00:07:54,610 --> 00:07:59,140
talk so all that said we now know the

218
00:07:59,140 --> 00:08:01,360
TDD is awesome we all agree we should be

219
00:08:01,360 --> 00:08:02,980
testing our react components we have

220
00:08:02,980 --> 00:08:04,360
some idea how to do it

221
00:08:04,360 --> 00:08:06,910
what do I mean then by testers and

222
00:08:06,910 --> 00:08:09,100
component development what I'm really

223
00:08:09,100 --> 00:08:11,340
getting at is this tendency to conflate

224
00:08:11,340 --> 00:08:13,480
behavioral and presentational concerns

225
00:08:13,480 --> 00:08:16,240
it's really easy especially in this

226
00:08:16,240 --> 00:08:17,320
world of JSX

227
00:08:17,320 --> 00:08:20,380
to go down the rabbit hole when you

228
00:08:20,380 --> 00:08:22,060
should be testing the behavior or

229
00:08:22,060 --> 00:08:23,440
verifying the behavior of the component

230
00:08:23,440 --> 00:08:24,880
nobody's ever done that right they've

231
00:08:24,880 --> 00:08:25,780
been in the middle of trying to make

232
00:08:25,780 --> 00:08:27,310
something work and then they set it up

233
00:08:27,310 --> 00:08:27,860
on the brows

234
00:08:27,860 --> 00:08:29,419
and that should have a drop shadow that

235
00:08:29,419 --> 00:08:30,830
should be three pictures to the left it

236
00:08:30,830 --> 00:08:32,510
should be red etc

237
00:08:32,510 --> 00:08:35,329
nobody's ever guilty of that so this is

238
00:08:35,329 --> 00:08:36,950
basically applying the methodology of

239
00:08:36,950 --> 00:08:39,829
TDD to focus entirely on the behavior of

240
00:08:39,829 --> 00:08:41,719
a component first without worrying at

241
00:08:41,719 --> 00:08:43,849
all about what it looks like we'll do

242
00:08:43,849 --> 00:08:44,450
that later

243
00:08:44,450 --> 00:08:50,390
we know that TDD forces us to compose or

244
00:08:50,390 --> 00:08:52,130
output small modular single

245
00:08:52,130 --> 00:08:54,230
responsibility units in this case react

246
00:08:54,230 --> 00:08:57,500
components we can then compose those

247
00:08:57,500 --> 00:08:59,510
together and write tests further up the

248
00:08:59,510 --> 00:09:01,459
tree to verify the composition of those

249
00:09:01,459 --> 00:09:03,440
and then we can focus on how they look

250
00:09:03,440 --> 00:09:05,660
we already know that HTML and CSS are

251
00:09:05,660 --> 00:09:08,180
hard so let's put our brains on the back

252
00:09:08,180 --> 00:09:10,160
burner with a bunch of tests running on

253
00:09:10,160 --> 00:09:11,959
the behavioral side of things and then

254
00:09:11,959 --> 00:09:15,230
we can focus solely on the appearance so

255
00:09:15,230 --> 00:09:17,140
what do you think should give a shot

256
00:09:17,140 --> 00:09:20,420
cool so we know that the first thing

257
00:09:20,420 --> 00:09:22,190
we're going to do is we're gonna write a

258
00:09:22,190 --> 00:09:24,410
failing test but first let's have a

259
00:09:24,410 --> 00:09:27,800
little context so we have a small bright

260
00:09:27,800 --> 00:09:30,260
hungry development team and we've been

261
00:09:30,260 --> 00:09:32,240
approached by a client with a unique

262
00:09:32,240 --> 00:09:34,310
problem the clients told us they're

263
00:09:34,310 --> 00:09:36,110
super busy they have a really hard time

264
00:09:36,110 --> 00:09:37,490
keeping track of all the things they

265
00:09:37,490 --> 00:09:40,040
have to do and what they want is an

266
00:09:40,040 --> 00:09:41,930
application where they can type in tasks

267
00:09:41,930 --> 00:09:44,060
they can mark them as complete they can

268
00:09:44,060 --> 00:09:45,829
see which ones have done and not and

269
00:09:45,829 --> 00:09:47,570
they could remove old done tasks and

270
00:09:47,570 --> 00:09:50,029
since nobody in the history of software

271
00:09:50,029 --> 00:09:51,560
engineering has ever built anything like

272
00:09:51,560 --> 00:09:55,070
this our team has agreed that we can

273
00:09:55,070 --> 00:09:56,449
step up to the plate and even though we

274
00:09:56,449 --> 00:09:57,740
don't know how to get there we can use

275
00:09:57,740 --> 00:10:01,420
TDD to bridge that knowledge gap so

276
00:10:01,420 --> 00:10:05,269
we're gonna jump in six months into the

277
00:10:05,269 --> 00:10:06,620
development cycle we're gonna see where

278
00:10:06,620 --> 00:10:09,380
our team is so we know that test-driven

279
00:10:09,380 --> 00:10:12,230
development produces as an artifact a

280
00:10:12,230 --> 00:10:14,930
self documenting shared understanding of

281
00:10:14,930 --> 00:10:17,949
the domain so let's run the tests and

282
00:10:17,949 --> 00:10:22,430
what might be wrong here doesn't

283
00:10:22,430 --> 00:10:27,860
recognize that let's run the tests and

284
00:10:27,860 --> 00:10:29,899
let's see what we get and what we should

285
00:10:29,899 --> 00:10:31,699
get is you should get some idea of what

286
00:10:31,699 --> 00:10:33,170
the team has been up to in the past six

287
00:10:33,170 --> 00:10:35,570
months all right so we've got some

288
00:10:35,570 --> 00:10:37,010
output here let's see what they've been

289
00:10:37,010 --> 00:10:39,500
doing so we can see sort of in plain

290
00:10:39,500 --> 00:10:41,730
English that they've written this to do

291
00:10:41,730 --> 00:10:43,649
component given a place to enter a new

292
00:10:43,649 --> 00:10:45,420
task when a user presses enter and the

293
00:10:45,420 --> 00:10:47,190
task is not empty responds with the task

294
00:10:47,190 --> 00:10:49,670
it looks like they've also created a

295
00:10:49,670 --> 00:10:52,320
component to hold a single to do give it

296
00:10:52,320 --> 00:10:54,089
a task when displayed it shows the name

297
00:10:54,089 --> 00:10:55,410
and whether it's complete or not and

298
00:10:55,410 --> 00:10:56,940
they've written a button that bottom

299
00:10:56,940 --> 00:10:59,010
navigation to switch between active and

300
00:10:59,010 --> 00:11:01,740
completed - dues cool so that gives us

301
00:11:01,740 --> 00:11:04,350
some idea of what they've been up to so

302
00:11:04,350 --> 00:11:06,060
what we're gonna do as we're stepping in

303
00:11:06,060 --> 00:11:08,550
here to help the team out glute for

304
00:11:08,550 --> 00:11:09,750
those things and put them together into

305
00:11:09,750 --> 00:11:11,790
a - duze component that has the input

306
00:11:11,790 --> 00:11:13,920
that shows individual - dues and lets us

307
00:11:13,920 --> 00:11:16,350
toggle between the views so the first

308
00:11:16,350 --> 00:11:17,579
thing we know is we're gonna have to

309
00:11:17,579 --> 00:11:27,839
write a failing test so let's do that so

310
00:11:27,839 --> 00:11:34,350
let's say given a list of tasks when

311
00:11:34,350 --> 00:11:43,519
displayed it shows each task in the list

312
00:11:43,519 --> 00:11:45,680
sounds like a reasonable test right

313
00:11:45,680 --> 00:11:49,170
everyone agree excellent ok so that

314
00:11:49,170 --> 00:11:50,970
means that we're gonna need some tasks

315
00:11:50,970 --> 00:11:55,160
to give this guy so let's add some tasks

316
00:11:55,160 --> 00:12:02,430
so let's create some - dues and we'll

317
00:12:02,430 --> 00:12:15,910
call them nonsensical names

318
00:12:15,920 --> 00:12:18,720
okay cool now we can pass these to our

319
00:12:18,720 --> 00:12:24,540
to do component so let's do that alright

320
00:12:24,540 --> 00:12:27,090
so we've set up our test now we need to

321
00:12:27,090 --> 00:12:28,680
make an assertion about it so what's a

322
00:12:28,680 --> 00:12:29,970
reasonable assertion there we've given

323
00:12:29,970 --> 00:12:32,490
it five to Do's why don't we say that

324
00:12:32,490 --> 00:12:34,350
there's five individual to do components

325
00:12:34,350 --> 00:12:35,970
one for each in the list sound

326
00:12:35,970 --> 00:12:39,420
reasonable let's do it so we're going to

327
00:12:39,420 --> 00:12:44,670
use an enzyme method called find and

328
00:12:44,670 --> 00:12:46,500
we're gonna find our previously written

329
00:12:46,500 --> 00:12:49,110
to do component and we're going to

330
00:12:49,110 --> 00:12:50,910
verify that we have the right number of

331
00:12:50,910 --> 00:13:09,110
them typos at all

332
00:13:09,120 --> 00:13:11,380
okay let's run it and we should expect

333
00:13:11,380 --> 00:13:13,990
that test to fail and it does it

334
00:13:13,990 --> 00:13:16,600
definitely fails it fails with a syntax

335
00:13:16,600 --> 00:13:19,450
error let's fix that first don't you

336
00:13:19,450 --> 00:13:20,800
love that where's my syntax error

337
00:13:20,800 --> 00:13:23,080
everyone help me out here this is the

338
00:13:23,080 --> 00:13:25,690
perils of live coding oh I broke I broke

339
00:13:25,690 --> 00:13:30,550
my my render area denied not to sought

340
00:13:30,550 --> 00:13:37,210
hard let's do two do's that should fix

341
00:13:37,210 --> 00:13:40,030
that okay that's better alright so it

342
00:13:40,030 --> 00:13:41,770
still fails and it gives us this really

343
00:13:41,770 --> 00:13:44,170
cryptic error react creat element type

344
00:13:44,170 --> 00:13:46,090
is invalid so for those who have ever

345
00:13:46,090 --> 00:13:47,590
worked in a statically typed languages

346
00:13:47,590 --> 00:13:48,520
this is the equivalent of like a

347
00:13:48,520 --> 00:13:50,770
compiler what it's telling us is that

348
00:13:50,770 --> 00:13:52,720
the file that has our component and it

349
00:13:52,720 --> 00:13:54,910
has nothing in it and our test run our

350
00:13:54,910 --> 00:13:56,830
just is super helpful in that case gives

351
00:13:56,830 --> 00:13:58,780
us a plain object and react has no idea

352
00:13:58,780 --> 00:14:00,460
what to do with that so let's get

353
00:14:00,460 --> 00:14:02,260
ourselves to at least a meaningful test

354
00:14:02,260 --> 00:14:04,540
here I think that's gonna help us along

355
00:14:04,540 --> 00:14:07,030
so let's grab our to Do's component and

356
00:14:07,030 --> 00:14:09,100
let's just give it a basic react

357
00:14:09,100 --> 00:14:13,090
component call to do's let's save that

358
00:14:13,090 --> 00:14:14,620
now we should have a more meaningful air

359
00:14:14,620 --> 00:14:17,080
great so it says give it a list of tasks

360
00:14:17,080 --> 00:14:19,390
when displayed shows each in the list we

361
00:14:19,390 --> 00:14:24,330
expected 5 we got 0 our test fails

362
00:14:24,330 --> 00:14:27,070
alright and so armed with our failing

363
00:14:27,070 --> 00:14:29,380
test we begin to cry we feel like

364
00:14:29,380 --> 00:14:31,510
perhaps impostor syndrome is real maybe

365
00:14:31,510 --> 00:14:33,160
we can't not cut out for this programmer

366
00:14:33,160 --> 00:14:34,630
thing after all and we should maybe find

367
00:14:34,630 --> 00:14:35,320
a new job

368
00:14:35,320 --> 00:14:37,960
don't despair it's ok this is actually

369
00:14:37,960 --> 00:14:40,750
progress a concrete failure is way

370
00:14:40,750 --> 00:14:42,220
better than some sense that things are

371
00:14:42,220 --> 00:14:43,720
failing and not knowing what's going on

372
00:14:43,720 --> 00:14:47,290
and also and I can't under underscore

373
00:14:47,290 --> 00:14:49,300
this enough if you've never seen a test

374
00:14:49,300 --> 00:14:51,370
fail it's really hard to have confidence

375
00:14:51,370 --> 00:14:53,410
that it's a valid test if you have a

376
00:14:53,410 --> 00:14:55,450
whole suite of tests running in CI and

377
00:14:55,450 --> 00:14:57,160
they always pass and you've never seen

378
00:14:57,160 --> 00:14:57,730
one failed

379
00:14:57,730 --> 00:14:59,860
chances are you have at least some false

380
00:14:59,860 --> 00:15:01,840
positives and one of the things that TDD

381
00:15:01,840 --> 00:15:04,060
gives us is the ability to verify up

382
00:15:04,060 --> 00:15:06,130
front that a test can fail it's a super

383
00:15:06,130 --> 00:15:09,580
important all right so the next step in

384
00:15:09,580 --> 00:15:11,530
our short development cycle is the green

385
00:15:11,530 --> 00:15:13,120
step and that's writing just enough code

386
00:15:13,120 --> 00:15:15,370
to make this test to pass

387
00:15:15,370 --> 00:15:17,450
and that's what we're gonna do and we're

388
00:15:17,450 --> 00:15:18,980
gonna commit all manner of sins and

389
00:15:18,980 --> 00:15:21,890
atrocities to get there so we have this

390
00:15:21,890 --> 00:15:23,690
test it's failing um

391
00:15:23,690 --> 00:15:25,580
I think probably the simplest thing that

392
00:15:25,580 --> 00:15:27,560
we can do to make this test pass is just

393
00:15:27,560 --> 00:15:29,870
a spit out five to do component do we

394
00:15:29,870 --> 00:15:32,420
agree cool let's do it

395
00:15:32,420 --> 00:15:38,840
so let's grab our to do component and

396
00:15:38,840 --> 00:15:52,380
let's just spit out five of them

397
00:15:52,390 --> 00:15:59,050
look bear with me there we go

398
00:15:59,050 --> 00:16:02,180
let's run it and voila it passes

399
00:16:02,180 --> 00:16:03,950
outstanding we got some console errors

400
00:16:03,950 --> 00:16:04,970
there from prop type-checking

401
00:16:04,970 --> 00:16:07,250
fix those later the point is our test

402
00:16:07,250 --> 00:16:12,320
passes you would be cool so what do we

403
00:16:12,320 --> 00:16:14,750
do there we did what's called a

404
00:16:14,750 --> 00:16:16,880
shameless green or sinful green right

405
00:16:16,880 --> 00:16:20,030
and even though the test passes the

406
00:16:20,030 --> 00:16:21,350
implementation is not very useful

407
00:16:21,350 --> 00:16:22,550
because it's very tightly coupled to

408
00:16:22,550 --> 00:16:24,590
that test case if we wrote another test

409
00:16:24,590 --> 00:16:26,810
case and threw it 6 - duze the test

410
00:16:26,810 --> 00:16:28,250
would fail right there tightly coupled

411
00:16:28,250 --> 00:16:30,200
so obviously this is not going to help

412
00:16:30,200 --> 00:16:32,300
us much but what we did was we described

413
00:16:32,300 --> 00:16:33,980
this perfect interface that we want for

414
00:16:33,980 --> 00:16:35,900
our component and we achieved it with a

415
00:16:35,900 --> 00:16:39,170
passing test more importantly we got

416
00:16:39,170 --> 00:16:40,640
that little dopamine rush from our

417
00:16:40,640 --> 00:16:42,440
passing tests our developer brain is

418
00:16:42,440 --> 00:16:44,420
happy we no longer feel like failures

419
00:16:44,420 --> 00:16:46,130
maybe this imposter syndrome thing is

420
00:16:46,130 --> 00:16:47,720
not real maybe we don't have to quit our

421
00:16:47,720 --> 00:16:51,170
jobs we can proceed cool so now the next

422
00:16:51,170 --> 00:16:53,210
step is we're gonna optimize the code

423
00:16:53,210 --> 00:16:54,980
under tests without breaking the test

424
00:16:54,980 --> 00:16:56,960
this is the refactor step so let's go

425
00:16:56,960 --> 00:17:00,170
ahead and do that so I think what we

426
00:17:00,170 --> 00:17:01,700
know what we need to do here right we

427
00:17:01,700 --> 00:17:03,050
can't hard code these to do is we

428
00:17:03,050 --> 00:17:04,760
probably just need to map over that to

429
00:17:04,760 --> 00:17:07,820
dues that were given to us and output

430
00:17:07,820 --> 00:17:14,240
those so let's do that so we have this

431
00:17:14,240 --> 00:17:18,380
to do prop it's a map so we'll get its

432
00:17:18,380 --> 00:17:24,230
entries array and then it will pluck

433
00:17:24,230 --> 00:17:26,210
apart the values in there we've got a

434
00:17:26,210 --> 00:17:28,610
key we'll call it task and we're gonna

435
00:17:28,610 --> 00:17:29,900
have a boolean whether it's complete or

436
00:17:29,900 --> 00:17:32,270
not okay so since we're mapping over

437
00:17:32,270 --> 00:17:33,920
something here we're gonna need a key

438
00:17:33,920 --> 00:17:36,850
and we have a map that has unique keys

439
00:17:36,850 --> 00:17:43,490
so we can use that as our key so we use

440
00:17:43,490 --> 00:17:47,780
the task as the key and then each one

441
00:17:47,780 --> 00:17:49,970
needs it to do which is going to be the

442
00:17:49,970 --> 00:17:52,490
same task and then each one has it is

443
00:17:52,490 --> 00:17:57,140
complete okay and see what we got the

444
00:17:57,140 --> 00:17:59,120
excellent we got a passing test Col

445
00:17:59,120 --> 00:18:00,410
let's just while we're at it let's get

446
00:18:00,410 --> 00:18:04,190
rid of those console warnings and we

447
00:18:04,190 --> 00:18:06,020
know from reading the docs and the tests

448
00:18:06,020 --> 00:18:09,080
that we have an unchanged event we don't

449
00:18:09,080 --> 00:18:10,310
need to implement it right now we just

450
00:18:10,310 --> 00:18:14,390
want to verify that the council warnings

451
00:18:14,390 --> 00:18:19,890
are gone and we also have an on remove

452
00:18:19,900 --> 00:18:21,140
cool

453
00:18:21,140 --> 00:18:23,180
we have passing tests outstanding with

454
00:18:23,180 --> 00:18:25,490
no council warnings so what did we do

455
00:18:25,490 --> 00:18:28,220
there we committed this sinful green the

456
00:18:28,220 --> 00:18:30,080
shameless green that got us to a passing

457
00:18:30,080 --> 00:18:32,240
test and then we went back and fixed it

458
00:18:32,240 --> 00:18:34,460
but chances are if you've been writing

459
00:18:34,460 --> 00:18:36,320
react components for a while you know

460
00:18:36,320 --> 00:18:38,060
what to do right the obvious the clean

461
00:18:38,060 --> 00:18:39,890
implementation is obvious you should

462
00:18:39,890 --> 00:18:40,460
just do it

463
00:18:40,460 --> 00:18:41,930
so I'm not recommending that you

464
00:18:41,930 --> 00:18:43,640
necessarily do these silly little in

465
00:18:43,640 --> 00:18:46,310
between steps unless you don't know how

466
00:18:46,310 --> 00:18:48,380
to reach the optimal solution sometimes

467
00:18:48,380 --> 00:18:49,760
it won't be clear how to get from your

468
00:18:49,760 --> 00:18:51,500
perfect interface to the right clean

469
00:18:51,500 --> 00:18:53,810
solution so you get to refactor in small

470
00:18:53,810 --> 00:18:56,060
steps until you get there and the

471
00:18:56,060 --> 00:18:57,590
gentleman that coined the term

472
00:18:57,590 --> 00:18:59,540
test-driven development guy named by the

473
00:18:59,540 --> 00:19:01,520
neighbor Kent back in his book TDD by

474
00:19:01,520 --> 00:19:04,100
example says that and he says this over

475
00:19:04,100 --> 00:19:05,330
and over and over again throughout the

476
00:19:05,330 --> 00:19:07,880
book TDD is not about taking teeny tiny

477
00:19:07,880 --> 00:19:09,710
steps it's about being able to take

478
00:19:09,710 --> 00:19:11,630
teeny tiny steps and he goes on to say

479
00:19:11,630 --> 00:19:13,820
that if you all you ever do is take

480
00:19:13,820 --> 00:19:15,770
large steps how would you know that a

481
00:19:15,770 --> 00:19:17,510
smaller step might actually solve the

482
00:19:17,510 --> 00:19:20,570
problem better so that's it in a

483
00:19:20,570 --> 00:19:22,070
nutshell that's TDD

484
00:19:22,070 --> 00:19:23,990
it's just that cycle and then you just

485
00:19:23,990 --> 00:19:26,300
repeat it over and over and over again

486
00:19:26,300 --> 00:19:28,580
till your application is done so in the

487
00:19:28,580 --> 00:19:30,440
spirit of that let's go ahead and do so

488
00:19:30,440 --> 00:19:32,660
let's repeat it and we have one test

489
00:19:32,660 --> 00:19:35,300
right now this component is not super

490
00:19:35,300 --> 00:19:37,940
useful for us we can display some to

491
00:19:37,940 --> 00:19:39,560
do's but right now the user can't

492
00:19:39,560 --> 00:19:40,910
interact with it so let's write another

493
00:19:40,910 --> 00:19:42,920
test probably the first thing a user is

494
00:19:42,920 --> 00:19:44,810
going to want to do is to add a new task

495
00:19:44,810 --> 00:19:46,640
so let's go ahead and do that let's

496
00:19:46,640 --> 00:19:49,610
write a test for that let's say when a

497
00:19:49,610 --> 00:19:56,550
user chooses to add a new task

498
00:19:56,560 --> 00:20:03,740
it shows the new task in the list so

499
00:20:03,740 --> 00:20:07,160
good cool so we're gonna need to render

500
00:20:07,160 --> 00:20:12,200
out the component again and we'll

501
00:20:12,200 --> 00:20:13,910
bootstrap it with that same set of -

502
00:20:13,910 --> 00:20:16,100
duze okay there's our arrangement by the

503
00:20:16,100 --> 00:20:17,720
way a test a good test usually is in

504
00:20:17,720 --> 00:20:19,130
three phases arranged

505
00:20:19,130 --> 00:20:19,820
acta sir

506
00:20:19,820 --> 00:20:21,470
so here's our arrangement now we're

507
00:20:21,470 --> 00:20:23,749
gonna need to act so we already have

508
00:20:23,749 --> 00:20:27,019
some components pre-built by our team we

509
00:20:27,019 --> 00:20:28,489
have that individual to do component

510
00:20:28,489 --> 00:20:29,989
we've also got this to do input

511
00:20:29,989 --> 00:20:32,059
component and it's been tested we know

512
00:20:32,059 --> 00:20:34,100
that it works and has a public contract

513
00:20:34,100 --> 00:20:36,889
and in that public contract is a prop

514
00:20:36,889 --> 00:20:39,409
called unchanged so here we're unit

515
00:20:39,409 --> 00:20:41,210
testing this component in isolation we

516
00:20:41,210 --> 00:20:42,289
don't need to worry about how that

517
00:20:42,289 --> 00:20:43,879
internals with that other component

518
00:20:43,879 --> 00:20:46,669
behave we're verifying that a callback

519
00:20:46,669 --> 00:20:48,590
this component provides - it works

520
00:20:48,590 --> 00:20:50,840
correctly and results in the right

521
00:20:50,840 --> 00:20:52,549
output so what we're gonna do is we're

522
00:20:52,549 --> 00:20:54,769
gonna find that to do input and we're

523
00:20:54,769 --> 00:20:55,970
just going to directly call its on

524
00:20:55,970 --> 00:20:57,950
change problem the unchanged prop is

525
00:20:57,950 --> 00:21:00,470
provided by this component so we are

526
00:21:00,470 --> 00:21:05,950
going to find that to do input component

527
00:21:05,950 --> 00:21:11,659
and then we're going to get its props

528
00:21:11,659 --> 00:21:15,529
collection and then we're just going to

529
00:21:15,529 --> 00:21:17,989
call the unchanged method now but we're

530
00:21:17,989 --> 00:21:21,019
gonna need to call it with something now

531
00:21:21,019 --> 00:21:23,090
we're gonna need a new to do let's say

532
00:21:23,090 --> 00:21:24,440
we're just gonna call it to do and let's

533
00:21:24,440 --> 00:21:26,509
create that above so let's create a new

534
00:21:26,509 --> 00:21:39,649
to do and we're gonna do something and

535
00:21:39,649 --> 00:21:41,179
we're gonna fix that little typo there

536
00:21:41,179 --> 00:21:43,009
okay cool so we're gonna cast it back

537
00:21:43,009 --> 00:21:44,629
into the fiery chasm from whence it came

538
00:21:44,629 --> 00:21:46,369
all right so at this point we've acted

539
00:21:46,369 --> 00:21:47,570
now now we're gonna rush search

540
00:21:47,570 --> 00:21:49,099
something about our action so there's

541
00:21:49,099 --> 00:21:50,809
probably two assertions we could make

542
00:21:50,809 --> 00:21:52,759
here that would be equally valid we

543
00:21:52,759 --> 00:21:54,649
bootstrap this thing with five - duze we

544
00:21:54,649 --> 00:21:56,090
can assert that now there's six and

545
00:21:56,090 --> 00:21:58,639
that's a perfectly valid assertion but I

546
00:21:58,639 --> 00:22:00,529
always prefer specificity and I think

547
00:22:00,529 --> 00:22:01,879
there's a more specific assertion we

548
00:22:01,879 --> 00:22:03,049
could make here and that's that we can

549
00:22:03,049 --> 00:22:04,999
find it to do whose to do prop matches

550
00:22:04,999 --> 00:22:08,119
that exactly so we're gonna do that so

551
00:22:08,119 --> 00:22:12,779
let's make an assertion let's expect

552
00:22:12,789 --> 00:22:15,619
that this is a really odd angle to type

553
00:22:15,619 --> 00:22:16,099
AB

554
00:22:16,099 --> 00:22:18,440
pardon my typos so we're gonna do first

555
00:22:18,440 --> 00:22:24,629
is we're going to find all the to Do's

556
00:22:24,639 --> 00:22:26,989
and then we're gonna call a more

557
00:22:26,989 --> 00:22:28,940
granular version of find called find

558
00:22:28,940 --> 00:22:29,820
where

559
00:22:29,820 --> 00:22:33,749
and find where lets you run a predicate

560
00:22:33,749 --> 00:22:35,609
over all the nodes all the children in

561
00:22:35,609 --> 00:22:37,529
the tree and then it'll return those

562
00:22:37,529 --> 00:22:38,729
that match the predicate so our

563
00:22:38,729 --> 00:22:40,289
predicate is going to be that there's a

564
00:22:40,289 --> 00:22:46,259
prop called or a azaab we're gonna find

565
00:22:46,259 --> 00:22:49,619
a prop called to do

566
00:22:49,619 --> 00:22:53,100
oops pardon me we're going to find a

567
00:22:53,100 --> 00:22:55,289
prop called to do and that we're gonna

568
00:22:55,289 --> 00:22:58,379
expect that it matches exactly but to do

569
00:22:58,379 --> 00:23:01,049
that we just defined and then we're

570
00:23:01,049 --> 00:23:03,809
gonna check that it exists and this is

571
00:23:03,809 --> 00:23:04,859
going to tell us that at least one of

572
00:23:04,859 --> 00:23:06,599
them exists or we'll expect that to be

573
00:23:06,599 --> 00:23:13,019
true cool and let's run the test and we

574
00:23:13,019 --> 00:23:15,570
should expect the test to fail and we

575
00:23:15,570 --> 00:23:17,249
have an unexpected token so it's

576
00:23:17,249 --> 00:23:18,690
definitely going to fail where did we

577
00:23:18,690 --> 00:23:23,279
break it helped me out folks first one

578
00:23:23,279 --> 00:23:25,080
to spot it gets a prize it looks like

579
00:23:25,080 --> 00:23:30,119
it's here right there's the problem all

580
00:23:30,119 --> 00:23:30,450
right

581
00:23:30,450 --> 00:23:32,519
good okay cool so we got a failure as

582
00:23:32,519 --> 00:23:35,940
expected and the failure tells us that

583
00:23:35,940 --> 00:23:38,159
method props is meant to be run on one

584
00:23:38,159 --> 00:23:41,580
node zero found instead and then it

585
00:23:41,580 --> 00:23:42,659
shows us the line where that occurs

586
00:23:42,659 --> 00:23:44,669
basically it's telling us it can't find

587
00:23:44,669 --> 00:23:46,649
to do input right because we haven't

588
00:23:46,649 --> 00:23:48,419
implemented it yet so let's go ahead and

589
00:23:48,419 --> 00:23:51,119
implement it let's go back to our unit

590
00:23:51,119 --> 00:23:53,609
under test so we're gonna need to import

591
00:23:53,609 --> 00:24:00,929
that and then we're gonna need to render

592
00:24:00,929 --> 00:24:08,129
one out right okay and then we also know

593
00:24:08,129 --> 00:24:09,869
because we're invoking it that we're

594
00:24:09,869 --> 00:24:10,889
gonna have to cut we're gonna have to

595
00:24:10,889 --> 00:24:13,379
give it a non change and for the sake of

596
00:24:13,379 --> 00:24:15,090
simplicity let's just call it on change

597
00:24:15,090 --> 00:24:17,779
and then our job is going to be to

598
00:24:17,779 --> 00:24:21,869
implement that so we know what's going

599
00:24:21,869 --> 00:24:26,429
to take it to do now what are we gonna

600
00:24:26,429 --> 00:24:30,380
do here

601
00:24:30,390 --> 00:24:32,670
well we have some idea because we've

602
00:24:32,670 --> 00:24:34,470
described the behavior that we want in

603
00:24:34,470 --> 00:24:36,960
our test we basically have said that

604
00:24:36,960 --> 00:24:40,230
when the user triggers this change event

605
00:24:40,230 --> 00:24:41,970
that our new to do just magically

606
00:24:41,970 --> 00:24:43,260
appears right

607
00:24:43,260 --> 00:24:46,230
which probably implies some state we

608
00:24:46,230 --> 00:24:47,610
can't mutate the props that are passed

609
00:24:47,610 --> 00:24:50,280
in so it probably implies that we're

610
00:24:50,280 --> 00:24:51,840
gonna have state means we're gonna need

611
00:24:51,840 --> 00:24:54,720
a stateful component now in the old days

612
00:24:54,720 --> 00:24:58,500
say in our last October that would have

613
00:24:58,500 --> 00:24:59,550
meant that we would need a class

614
00:24:59,550 --> 00:25:01,820
component that extends react component

615
00:25:01,820 --> 00:25:04,320
but the folks at Facebook that work on

616
00:25:04,320 --> 00:25:04,860
react

617
00:25:04,860 --> 00:25:06,720
came up with an alternative API that

618
00:25:06,720 --> 00:25:08,670
lets you hook into things like state

619
00:25:08,670 --> 00:25:10,260
management from function components it's

620
00:25:10,260 --> 00:25:12,360
called the hooks API this is good

621
00:25:12,360 --> 00:25:15,240
because the overhead of classes is often

622
00:25:15,240 --> 00:25:16,560
not needed and more importantly

623
00:25:16,560 --> 00:25:18,210
javascript doesn't have classes

624
00:25:18,210 --> 00:25:20,340
javascript just has syntax sugar on top

625
00:25:20,340 --> 00:25:22,410
of constructors and prototype chains so

626
00:25:22,410 --> 00:25:25,320
we're gonna use the use state hook so

627
00:25:25,320 --> 00:25:30,770
we're gonna need to import it first and

628
00:25:30,770 --> 00:25:33,830
it looks something like this

629
00:25:33,830 --> 00:25:36,000
you give it the name of the state

630
00:25:36,000 --> 00:25:37,980
container there's a setter provided for

631
00:25:37,980 --> 00:25:39,390
you and then we'll initialize it with

632
00:25:39,390 --> 00:25:41,820
the two dews that are passed in or we

633
00:25:41,820 --> 00:25:44,400
don't get one we'll just initialize it

634
00:25:44,400 --> 00:25:46,980
with a new map and then what that means

635
00:25:46,980 --> 00:25:48,960
is that we should just be able to call

636
00:25:48,960 --> 00:25:51,000
the setter or the mutated collection so

637
00:25:51,000 --> 00:25:52,500
we should just be able to do set to dues

638
00:25:52,500 --> 00:25:57,300
and just add our new one initialize to

639
00:25:57,300 --> 00:26:00,390
false okay and we're almost done there's

640
00:26:00,390 --> 00:26:01,560
just one more thing here that we're

641
00:26:01,560 --> 00:26:03,990
gonna need to do to make this work first

642
00:26:03,990 --> 00:26:07,260
one the spot it gets extra credit it's

643
00:26:07,260 --> 00:26:08,580
alright I'll give it away right now

644
00:26:08,580 --> 00:26:10,140
we're still reading off off the props

645
00:26:10,140 --> 00:26:11,940
the read-only props that are passed in

646
00:26:11,940 --> 00:26:13,710
so we actually need to read from our new

647
00:26:13,710 --> 00:26:19,650
State container okay now we have syntax

648
00:26:19,650 --> 00:26:21,380
errors all over the place what do we do

649
00:26:21,380 --> 00:26:29,980
we broke something oh I know what it is

650
00:26:29,990 --> 00:26:31,999
all right we're still broken would it be

651
00:26:31,999 --> 00:26:36,580
break now we broke something

652
00:26:36,580 --> 00:26:39,200
we broke one of our previous tests right

653
00:26:39,200 --> 00:26:43,820
yeah no that's it help me out folks what

654
00:26:43,820 --> 00:26:47,619
did we break hmm

655
00:26:47,619 --> 00:26:56,809
we're in the source of the test right

656
00:26:56,809 --> 00:27:10,279
here right here ah yeah thank you that

657
00:27:10,279 --> 00:27:11,740
is outstanding thanks for the help

658
00:27:11,740 --> 00:27:13,340
thanks for the assist

659
00:27:13,340 --> 00:27:16,549
all right cool all right

660
00:27:16,549 --> 00:27:19,519
so we have now what we're gonna do is

661
00:27:19,519 --> 00:27:21,409
we're gonna fast forward another six

662
00:27:21,409 --> 00:27:23,149
months you can tell like these things

663
00:27:23,149 --> 00:27:24,200
take a long time for anyone that

664
00:27:24,200 --> 00:27:25,429
actually works in the real world knows

665
00:27:25,429 --> 00:27:27,019
that simple things take a long time in

666
00:27:27,019 --> 00:27:28,820
the real world um we're gonna fast

667
00:27:28,820 --> 00:27:30,649
forward six months and we're gonna let

668
00:27:30,649 --> 00:27:32,119
our team continue along this journey of

669
00:27:32,119 --> 00:27:33,440
test-driven development before they've

670
00:27:33,440 --> 00:27:35,330
even looked at it in a browser and then

671
00:27:35,330 --> 00:27:36,289
what's going to happen is they're gonna

672
00:27:36,289 --> 00:27:38,059
have a fully functional application and

673
00:27:38,059 --> 00:27:39,440
they haven't yet looked at it in the

674
00:27:39,440 --> 00:27:41,539
browser it's probably going to look like

675
00:27:41,539 --> 00:27:46,039
crap this is amazon.com when it launched

676
00:27:46,039 --> 00:27:48,590
in 1999 by today's standards this looks

677
00:27:48,590 --> 00:27:50,960
like absolute rubbish but it was a very

678
00:27:50,960 --> 00:27:52,549
successful e-commerce site that allowed

679
00:27:52,549 --> 00:27:54,679
Amazon to become the juggernaut that

680
00:27:54,679 --> 00:27:57,320
they are today and this leads us then to

681
00:27:57,320 --> 00:27:59,360
the really neat thing about test-driven

682
00:27:59,360 --> 00:28:01,159
component development and that is that

683
00:28:01,159 --> 00:28:04,490
we can treat the visual look and feel

684
00:28:04,490 --> 00:28:06,769
portion of it as refactoring with

685
00:28:06,769 --> 00:28:09,350
passing tests so we've already proven

686
00:28:09,350 --> 00:28:12,679
that it works right now we can actually

687
00:28:12,679 --> 00:28:14,330
set aside the behavioural part which was

688
00:28:14,330 --> 00:28:16,519
hard right and we can let our tests run

689
00:28:16,519 --> 00:28:18,019
and now we can focus on something else

690
00:28:18,019 --> 00:28:20,480
that's hard which is CSS and HTML making

691
00:28:20,480 --> 00:28:23,570
things look great so let's catch up with

692
00:28:23,570 --> 00:28:31,930
the team and

693
00:28:31,930 --> 00:28:34,780
see how they've done so the first thing

694
00:28:34,780 --> 00:28:37,300
we're gonna do of course is to run our

695
00:28:37,300 --> 00:28:39,970
tests and see how far they've come on

696
00:28:39,970 --> 00:28:41,710
that component that we started helping

697
00:28:41,710 --> 00:28:44,860
them with and what we can see is that

698
00:28:44,860 --> 00:28:47,740
they were able to select only the active

699
00:28:47,740 --> 00:28:50,980
tasks complete one and verify that it is

700
00:28:50,980 --> 00:28:52,930
removed from the active tasks if you do

701
00:28:52,930 --> 00:28:54,490
the opposite with completed tasks they

702
00:28:54,490 --> 00:28:56,320
can delete one and they can remove one

703
00:28:56,320 --> 00:28:57,790
so we're gonna do here is I'm going to

704
00:28:57,790 --> 00:29:00,160
shrink these tests down not important

705
00:29:00,160 --> 00:29:01,540
that you guys can read the individual

706
00:29:01,540 --> 00:29:02,890
tests out there we just want to verify

707
00:29:02,890 --> 00:29:05,620
that they're not breaking and then we

708
00:29:05,620 --> 00:29:07,810
are going to stand up a browser over

709
00:29:07,810 --> 00:29:12,190
here and we are going to let's go ahead

710
00:29:12,190 --> 00:29:18,250
and get this guy here and I've got the

711
00:29:18,250 --> 00:29:20,190
dev server running in the background and

712
00:29:20,190 --> 00:29:23,320
the first thing we're gonna do is verify

713
00:29:23,320 --> 00:29:25,030
that it in fact it actually does work

714
00:29:25,030 --> 00:29:26,830
we've made this bold claim that we could

715
00:29:26,830 --> 00:29:28,600
build an application without looking at

716
00:29:28,600 --> 00:29:29,830
it so let's just see

717
00:29:29,830 --> 00:29:32,050
can we add a new task it looks like we

718
00:29:32,050 --> 00:29:34,300
can this is good this is progress

719
00:29:34,300 --> 00:29:36,280
can't wait let's see all the active one

720
00:29:36,280 --> 00:29:38,230
to see if we can complete one it looks

721
00:29:38,230 --> 00:29:41,620
like we can looks good and let's see if

722
00:29:41,620 --> 00:29:43,510
we can remove that it looks like it's

723
00:29:43,510 --> 00:29:46,000
gone and then let's see if we can remove

724
00:29:46,000 --> 00:29:48,970
them all okay cool so it worked it looks

725
00:29:48,970 --> 00:29:51,310
like crap it's all just basic HTML

726
00:29:51,310 --> 00:29:53,050
components there's no real pizzazz here

727
00:29:53,050 --> 00:29:54,790
no style if we put different links

728
00:29:54,790 --> 00:29:57,280
strings they're all off they're not

729
00:29:57,280 --> 00:29:58,720
lined up it looks kind of like rubbish

730
00:29:58,720 --> 00:30:01,840
so with that in mind let's do a little

731
00:30:01,840 --> 00:30:03,490
bit of visual refactoring I'm gonna

732
00:30:03,490 --> 00:30:05,980
cheat here and I'm gonna use component

733
00:30:05,980 --> 00:30:08,590
library for some prettiness I'm gonna

734
00:30:08,590 --> 00:30:10,870
use material your eye not because I

735
00:30:10,870 --> 00:30:14,200
recommend it over other libraries the

736
00:30:14,200 --> 00:30:16,180
real reason is a lot more practical and

737
00:30:16,180 --> 00:30:17,710
that is that it's the one that's easiest

738
00:30:17,710 --> 00:30:19,510
to drop into a project with no config

739
00:30:19,510 --> 00:30:20,800
and no style sheets and it just looks

740
00:30:20,800 --> 00:30:24,280
good so I'm gonna use that and I think

741
00:30:24,280 --> 00:30:28,510
what we can do here let's go ahead swap

742
00:30:28,510 --> 00:30:31,330
that out for a card all right let's make

743
00:30:31,330 --> 00:30:42,910
it a flexbox

744
00:30:42,920 --> 00:30:46,350
and let's make it not fill the whole

745
00:30:46,350 --> 00:30:56,530
width let's say 90% let's line it laughs

746
00:30:56,540 --> 00:30:59,840
this is a really odd angle to type from

747
00:30:59,840 --> 00:31:01,440
all right that should be good enough

748
00:31:01,440 --> 00:31:03,600
cool and then I think if we just wrap

749
00:31:03,600 --> 00:31:08,460
these guys in their own container and

750
00:31:08,460 --> 00:31:21,540
give it a flex of one

751
00:31:21,550 --> 00:31:23,650
unless see what that looks like

752
00:31:23,650 --> 00:31:27,500
good said here we go okay alright we're

753
00:31:27,500 --> 00:31:28,190
getting somewhere

754
00:31:28,190 --> 00:31:32,059
cool all right so we can also if we want

755
00:31:32,059 --> 00:31:34,280
so we've just changed the mark up we

756
00:31:34,280 --> 00:31:36,970
could also or like wrap this in a span

757
00:31:36,970 --> 00:31:39,740
and everything should still work let's

758
00:31:39,740 --> 00:31:41,630
just make sure that it works first and

759
00:31:41,630 --> 00:31:44,150
then we'll prove it by looking at the

760
00:31:44,150 --> 00:31:45,320
tests and the tests are all still

761
00:31:45,320 --> 00:31:47,840
passing so if you've written good tests

762
00:31:47,840 --> 00:31:48,710
if you've written tests that are

763
00:31:48,710 --> 00:31:50,870
agnostic of implementation details you

764
00:31:50,870 --> 00:31:52,190
can you should be able to move your

765
00:31:52,190 --> 00:31:55,130
markup around style it add additional

766
00:31:55,130 --> 00:31:56,690
wrapper components and everything should

767
00:31:56,690 --> 00:32:00,650
still just work cool so let's jump ahead

768
00:32:00,650 --> 00:32:04,790
just one more time here let's see what

769
00:32:04,790 --> 00:32:07,250
the team has been up to for the next six

770
00:32:07,250 --> 00:32:10,190
months just doing visual refactoring

771
00:32:10,190 --> 00:32:14,720
working with the client and let's see

772
00:32:14,720 --> 00:32:18,080
what we get let's run the tests just

773
00:32:18,080 --> 00:32:19,220
make sure everything is still running

774
00:32:19,220 --> 00:32:21,350
and you can see now our UI looks a

775
00:32:21,350 --> 00:32:22,700
little bit glossy err we've got these

776
00:32:22,700 --> 00:32:25,010
great little animated radio buttons

777
00:32:25,010 --> 00:32:26,750
everything looks pretty cool so let's

778
00:32:26,750 --> 00:32:33,200
just add one more task whoops well Jess

779
00:32:33,200 --> 00:32:35,510
Kong is close enough let's mark that

780
00:32:35,510 --> 00:32:36,910
sucker off the list

781
00:32:36,910 --> 00:32:39,350
alright cool the perils of live coding

782
00:32:39,350 --> 00:32:41,900
and so what did we do here we learned

783
00:32:41,900 --> 00:32:44,900
that test-driven development is a thing

784
00:32:44,900 --> 00:32:47,750
that it's good that testing react

785
00:32:47,750 --> 00:32:49,490
components is worthwhile and important

786
00:32:49,490 --> 00:32:52,580
we learned that using this technique we

787
00:32:52,580 --> 00:32:54,020
could free ourselves from completing

788
00:32:54,020 --> 00:32:55,790
behavior own presentational concerns

789
00:32:55,790 --> 00:32:57,350
even though they're co-located in one

790
00:32:57,350 --> 00:32:59,360
file we could focus on making components

791
00:32:59,360 --> 00:33:01,670
work and then we could free ourselves to

792
00:33:01,670 --> 00:33:04,429
focus on how they look we're happy our

793
00:33:04,429 --> 00:33:06,520
customers happy and now we can get paid

794
00:33:06,520 --> 00:33:08,330
and that's all I got

795
00:33:08,330 --> 00:33:10,250
thanks a lot there's the repo that's me

796
00:33:10,250 --> 00:33:10,770
on Twitter

797
00:33:10,770 --> 00:33:14,270
[Applause]

