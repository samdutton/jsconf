1
00:00:08,530 --> 00:00:12,010

Aloha everyone thank you for singing

2
00:00:12,010 --> 00:00:16,090
to me this is called the perfect the

3
00:00:16,090 --> 00:00:19,510
perfect JavaScript library because in

4
00:00:19,510 --> 00:00:21,610
JavaScript tooling because it's

5
00:00:21,610 --> 00:00:23,920
obviously highly subjective right like

6
00:00:23,920 --> 00:00:27,010
these are my natural naturally my own

7
00:00:27,010 --> 00:00:30,039
opinions about what we should choose but

8
00:00:30,039 --> 00:00:31,570
it's the talk that I wish I would have

9
00:00:31,570 --> 00:00:34,510
heard three four years ago I first

10
00:00:34,510 --> 00:00:36,190
started building out JavaScript

11
00:00:36,190 --> 00:00:39,580
libraries because libraries have vastly

12
00:00:39,580 --> 00:00:41,860
different concerns than apps that we

13
00:00:41,860 --> 00:00:44,769
build for users so these are the

14
00:00:44,769 --> 00:00:46,449
learnings that I've kind of picked up

15
00:00:46,449 --> 00:00:48,909
over time building tooling type things

16
00:00:48,909 --> 00:00:52,680
both an open source on the job as

17
00:00:52,680 --> 00:00:54,909
watching other people and seeing what

18
00:00:54,909 --> 00:00:56,830
they did in order to build their

19
00:00:56,830 --> 00:00:57,580
libraries

20
00:00:57,580 --> 00:00:59,799
so I've already tweeted up link to the

21
00:00:59,799 --> 00:01:01,870
slides if you want to follow along I'm

22
00:01:01,870 --> 00:01:04,120
going to have tons of resources and

23
00:01:04,120 --> 00:01:05,770
links to other things that I can't deep

24
00:01:05,770 --> 00:01:07,720
dive into so if you go to my Twitter

25
00:01:07,720 --> 00:01:11,170
been MVP you should already see a tweet

26
00:01:11,170 --> 00:01:14,260
there so whenever we're talking about

27
00:01:14,260 --> 00:01:17,350
non end user features like building up

28
00:01:17,350 --> 00:01:20,440
tooling we need to ask ourselves like

29
00:01:20,440 --> 00:01:22,960
what's the benefit of all this like do

30
00:01:22,960 --> 00:01:24,850
these decisions that we're going to do

31
00:01:24,850 --> 00:01:27,430
they really really matter because if

32
00:01:27,430 --> 00:01:30,820
it's not a feature for the end user then

33
00:01:30,820 --> 00:01:32,680
it needs to be a feature for the

34
00:01:32,680 --> 00:01:35,080
developer so that they can then give

35
00:01:35,080 --> 00:01:37,990
value to the end user otherwise we find

36
00:01:37,990 --> 00:01:40,240
ourselves bike shedding and arguing over

37
00:01:40,240 --> 00:01:42,610
things that really don't matter so this

38
00:01:42,610 --> 00:01:44,770
article by Kent C Dodds that basically

39
00:01:44,770 --> 00:01:48,790
says exactly that it says basically we

40
00:01:48,790 --> 00:01:51,670
need to measure our success how well we

41
00:01:51,670 --> 00:01:54,510
can deliver what the end user wants

42
00:01:54,510 --> 00:01:57,340
therefore our choice of tooling should

43
00:01:57,340 --> 00:02:00,600
be based upon that goal and nothing else

44
00:02:00,600 --> 00:02:07,090
so then as a result our kind of focused

45
00:02:07,090 --> 00:02:10,479
on the user mentality it still applies

46
00:02:10,479 --> 00:02:13,629
for the tooling of libraries except that

47
00:02:13,629 --> 00:02:15,849
the user in this case or other

48
00:02:15,849 --> 00:02:18,040
developers those developers that are

49
00:02:18,040 --> 00:02:20,409
going to build things use our library

50
00:02:20,409 --> 00:02:23,489
and their apps for other users so

51
00:02:23,489 --> 00:02:25,420
instead about

52
00:02:25,420 --> 00:02:27,130
think about how we should write the code

53
00:02:27,130 --> 00:02:29,500
in this talk Malta already talked

54
00:02:29,500 --> 00:02:31,989
already covered some of that stuff we're

55
00:02:31,989 --> 00:02:33,730
going to focus on everything else that's

56
00:02:33,730 --> 00:02:36,640
related to the library and to the repo

57
00:02:36,640 --> 00:02:41,020
so everything that enables developers to

58
00:02:41,020 --> 00:02:45,780
build user experiences using our library

59
00:02:45,780 --> 00:02:48,430
but first can I get everyone to stand up

60
00:02:48,430 --> 00:02:50,230
real quick I'm gonna get everyone to

61
00:02:50,230 --> 00:02:52,030
stand up I know we're about to have

62
00:02:52,030 --> 00:02:56,050
lunch and such so what I like to do and

63
00:02:56,050 --> 00:02:58,450
the beginning of my talks is to have

64
00:02:58,450 --> 00:03:00,970
everybody do 10 squats together just

65
00:03:00,970 --> 00:03:03,549
like this okay so it's just something to

66
00:03:03,549 --> 00:03:04,959
have fun you know if you don't want to

67
00:03:04,959 --> 00:03:06,430
you could totally sit down and not do it

68
00:03:06,430 --> 00:03:08,350
you could just move your arms or

69
00:03:08,350 --> 00:03:09,850
whatever but something to get the blood

70
00:03:09,850 --> 00:03:12,819
flowing right before we have lunch so we

71
00:03:12,819 --> 00:03:14,860
can you know have more space to have

72
00:03:14,860 --> 00:03:18,489
lunch so let's do the Tin Tin squats

73
00:03:18,489 --> 00:03:20,769
together we'll start with zero okay

74
00:03:20,769 --> 00:03:23,590
because it's JavaScript right and we'll

75
00:03:23,590 --> 00:03:26,280
count out together here we go ready zero

76
00:03:26,280 --> 00:03:32,410
yeah that's weird one two three nice

77
00:03:32,410 --> 00:03:36,720
nice four I think we're halfway yep five

78
00:03:36,720 --> 00:03:43,989
six almost there seven yes eight nine oh

79
00:03:43,989 --> 00:03:46,030
yeah that's it okay all right

80
00:03:46,030 --> 00:03:47,950
obviously everyone have a seat nicely

81
00:03:47,950 --> 00:03:53,109
done nicely done okay so just to

82
00:03:53,109 --> 00:03:55,209
formally introduce myself my name is

83
00:03:55,209 --> 00:03:57,670
Benna leg to do I'm a Christian a

84
00:03:57,670 --> 00:04:01,720
husband and a father this is my family

85
00:04:01,720 --> 00:04:03,489
right here it's my wife Rashida

86
00:04:03,489 --> 00:04:05,350
we've been married nine years we'll be

87
00:04:05,350 --> 00:04:07,959
10 years in September our oldest

88
00:04:07,959 --> 00:04:11,410
daughter Simone she will be six next

89
00:04:11,410 --> 00:04:14,590
month our middle daughter Avery next to

90
00:04:14,590 --> 00:04:17,739
me she is three and a half and then our

91
00:04:17,739 --> 00:04:20,229
youngest son Asher who's looking very

92
00:04:20,229 --> 00:04:23,139
confused in this picture he turned one

93
00:04:23,139 --> 00:04:26,139
last year so we live in the San

94
00:04:26,139 --> 00:04:29,080
Francisco Bay Area in a small town

95
00:04:29,080 --> 00:04:31,660
called Pittsburgh not to be confused

96
00:04:31,660 --> 00:04:33,160
with Pittsburgh Pennsylvania

97
00:04:33,160 --> 00:04:37,210
but it's Pittsburgh California and I'm

98
00:04:37,210 --> 00:04:39,189
also a Google developer expert

99
00:04:39,189 --> 00:04:42,909
Microsoft MVP both in web technologies

100
00:04:42,909 --> 00:04:45,199
so as you might have guessed for my

101
00:04:45,199 --> 00:04:48,080
t-shirt I work at stitch fix I'm a

102
00:04:48,080 --> 00:04:50,930
principal front-end engineer there for

103
00:04:50,930 --> 00:04:52,129
those of you who haven't heard of stitch

104
00:04:52,129 --> 00:04:54,650
fix it's an online personal styling

105
00:04:54,650 --> 00:04:58,009
service so basically take the bird out

106
00:04:58,009 --> 00:05:01,310
of shopping so that you can get quality

107
00:05:01,310 --> 00:05:03,259
clothes for yourselves so we combine

108
00:05:03,259 --> 00:05:07,340
technology data science with actual real

109
00:05:07,340 --> 00:05:10,029
human stylists in order to bring you

110
00:05:10,029 --> 00:05:13,699
awesome clothes oh I want to mention

111
00:05:13,699 --> 00:05:15,110
that we're three right

112
00:05:15,110 --> 00:05:17,539
our headquarters is in San Francisco but

113
00:05:17,539 --> 00:05:20,139
we have a huge remote culture so we have

114
00:05:20,139 --> 00:05:22,360
engineers throughout the whole country

115
00:05:22,360 --> 00:05:25,729
in fact to my colleagues James and

116
00:05:25,729 --> 00:05:31,370
Nathan are Nolan are here here at the

117
00:05:31,370 --> 00:05:32,870
conference they're actually way in the

118
00:05:32,870 --> 00:05:34,789
back there so it's my first time getting

119
00:05:34,789 --> 00:05:37,520
to see them in person except not on blue

120
00:05:37,520 --> 00:05:40,120
jeans so that will be super fun

121
00:05:40,120 --> 00:05:43,909
so anyway enough about me let's talk

122
00:05:43,909 --> 00:05:46,669
about building this perfect javascript

123
00:05:46,669 --> 00:05:50,210
library right so the the info applies

124
00:05:50,210 --> 00:05:52,039
whether you're creating an open-source

125
00:05:52,039 --> 00:05:55,879
library or even an internal library

126
00:05:55,879 --> 00:05:58,789
within your your company so remember

127
00:05:58,789 --> 00:06:01,430
we're shifting our focus to what the

128
00:06:01,430 --> 00:06:04,839
users our developers need not what we

129
00:06:04,839 --> 00:06:07,099
particularly care about okay

130
00:06:07,099 --> 00:06:10,550
so let's jump right in the first thing

131
00:06:10,550 --> 00:06:12,500
that I suggest that we need is we need

132
00:06:12,500 --> 00:06:16,039
helpful Docs bucks that explain how to

133
00:06:16,039 --> 00:06:17,599
install the library

134
00:06:17,599 --> 00:06:21,349
examples of use the library and and then

135
00:06:21,349 --> 00:06:23,120
once you finally figure out how the

136
00:06:23,120 --> 00:06:27,199
library works a full API spec so the

137
00:06:27,199 --> 00:06:30,259
question for us then is what makes it

138
00:06:30,259 --> 00:06:33,979
possible to have helpful ducks well my

139
00:06:33,979 --> 00:06:35,810
suggestion is that we write the docs

140
00:06:35,810 --> 00:06:39,919
before the implementation why because

141
00:06:39,919 --> 00:06:42,860
writing good Docs is actually really

142
00:06:42,860 --> 00:06:45,710
hard so writing the docs beforehand

143
00:06:45,710 --> 00:06:48,969
makes it a little bit easier I suggest

144
00:06:48,969 --> 00:06:51,889
because one we're more likely to have

145
00:06:51,889 --> 00:06:52,490
cohesive

146
00:06:52,490 --> 00:06:55,610
DOX if we write it all up front the

147
00:06:55,610 --> 00:06:57,590
formatting of the docs the inclusion of

148
00:06:57,590 --> 00:07:00,229
examples if they'll all be consistent to

149
00:07:00,229 --> 00:07:03,349
all be the same and then secondly when

150
00:07:03,349 --> 00:07:08,030
we write the docs when we know ahead of

151
00:07:08,030 --> 00:07:09,830
time we know about how the library works

152
00:07:09,830 --> 00:07:12,740
the least right so we're able to have

153
00:07:12,740 --> 00:07:14,720
empathy for newcomers which was also

154
00:07:14,720 --> 00:07:16,849
what malted mentioned in this talk as

155
00:07:16,849 --> 00:07:17,630
well

156
00:07:17,630 --> 00:07:20,599
and then lastly number three we can get

157
00:07:20,599 --> 00:07:22,789
feedback from theirs before we do the

158
00:07:22,789 --> 00:07:25,159
implementation and we'll be able to just

159
00:07:25,159 --> 00:07:27,139
give them the docs in the format that

160
00:07:27,139 --> 00:07:29,509
anybody using the library would read

161
00:07:29,509 --> 00:07:31,580
them so that they'll be able to really

162
00:07:31,580 --> 00:07:34,819
understand how how things work and it's

163
00:07:34,819 --> 00:07:36,110
much better than trying to give them

164
00:07:36,110 --> 00:07:40,009
give them an implementation spec so then

165
00:07:40,009 --> 00:07:41,389
the question is like what kind of Docs

166
00:07:41,389 --> 00:07:44,060
should you write I want you to keep in

167
00:07:44,060 --> 00:07:46,190
mind that they're at least four types of

168
00:07:46,190 --> 00:07:48,740
Docs there are tutorials there how to

169
00:07:48,740 --> 00:07:53,479
guys explanations and references so if

170
00:07:53,479 --> 00:07:55,150
I'm using lodash as an example

171
00:07:55,150 --> 00:07:58,099
references would be the traditional API

172
00:07:58,099 --> 00:08:02,090
Docs for lo - how two guys would be

173
00:08:02,090 --> 00:08:05,599
example showing common use cases for lo

174
00:08:05,599 --> 00:08:10,090
- functions like pick for instance

175
00:08:10,090 --> 00:08:13,509
explanations on the other hand our blogs

176
00:08:13,509 --> 00:08:17,419
videos talks at conferences to explain

177
00:08:17,419 --> 00:08:21,759
maybe why using lodash chain is poor

178
00:08:21,759 --> 00:08:24,430
performing there so they're really

179
00:08:24,430 --> 00:08:28,759
opinionated in their topic and it's

180
00:08:28,759 --> 00:08:30,800
stuff that you wouldn't necessarily put

181
00:08:30,800 --> 00:08:35,300
in API Docs and then tutorials would be

182
00:08:35,300 --> 00:08:38,510
low - workshops that we'd find on

183
00:08:38,510 --> 00:08:42,770
egghead or front-end masters online to

184
00:08:42,770 --> 00:08:46,640
help guide the user step-by-step so for

185
00:08:46,640 --> 00:08:49,730
your perfect library you should at least

186
00:08:49,730 --> 00:08:52,940
have references and how-to guides so the

187
00:08:52,940 --> 00:08:57,709
API Docs and the examples so in summary

188
00:08:57,709 --> 00:08:59,720
for the docs my suggestion for your

189
00:08:59,720 --> 00:09:03,589
repose read me md file is to have things

190
00:09:03,589 --> 00:09:06,410
in this order write badges description

191
00:09:06,410 --> 00:09:09,790
installation quick guide then the API

192
00:09:09,790 --> 00:09:12,829
technical details contributing and

193
00:09:12,829 --> 00:09:15,290
license and I want to call out that the

194
00:09:15,290 --> 00:09:17,480
technical details should be at the

195
00:09:17,480 --> 00:09:20,149
bottom right usually the library gets

196
00:09:20,149 --> 00:09:22,009
created because they want to solve some

197
00:09:22,009 --> 00:09:24,290
kind of technical problem make something

198
00:09:24,290 --> 00:09:26,480
faster or make something better so it

199
00:09:26,480 --> 00:09:28,759
gets put at the top of the readme and

200
00:09:28,759 --> 00:09:31,009
it's like paragraphs and paragraphs and

201
00:09:31,009 --> 00:09:33,110
nobody wants to read that stuff only you

202
00:09:33,110 --> 00:09:34,399
care about that stuff

203
00:09:34,399 --> 00:09:37,069
so put that at the bottom and you know

204
00:09:37,069 --> 00:09:41,000
show me how to install your library ok

205
00:09:41,000 --> 00:09:43,790
so then with helpful Doc's I'm now able

206
00:09:43,790 --> 00:09:47,000
to use your library write and develop

207
00:09:47,000 --> 00:09:49,040
but then the next thing that I would

208
00:09:49,040 --> 00:09:52,939
need is I would need typescript types so

209
00:09:52,939 --> 00:09:54,920
for those who don't know typescript is a

210
00:09:54,920 --> 00:09:58,069
type superset of JavaScript that

211
00:09:58,069 --> 00:10:01,279
compiles down to plain JavaScript though

212
00:10:01,279 --> 00:10:03,829
this suggestion may be a little bit

213
00:10:03,829 --> 00:10:05,959
controversial right it's certainly my

214
00:10:05,959 --> 00:10:07,779
own bias because I love using typescript

215
00:10:07,779 --> 00:10:10,189
but the numbers from the state of

216
00:10:10,189 --> 00:10:11,089
JavaScript

217
00:10:11,089 --> 00:10:14,360
Servais kind of backed me up typescript

218
00:10:14,360 --> 00:10:18,380
has become super duper popular in 2018 I

219
00:10:18,380 --> 00:10:20,529
consider it the year that everyone

220
00:10:20,529 --> 00:10:24,290
discovered typescript right so only a

221
00:10:24,290 --> 00:10:26,839
third of people in 2017 were using

222
00:10:26,839 --> 00:10:28,880
typescript then the number jumped to

223
00:10:28,880 --> 00:10:33,259
almost half in 2018 and then last year

224
00:10:33,259 --> 00:10:35,750
it was nearly 60% of people using

225
00:10:35,750 --> 00:10:38,029
typescript and when you add in all

226
00:10:38,029 --> 00:10:40,759
people who want to learn how to use

227
00:10:40,759 --> 00:10:44,389
typescript the number jumps to 80% so

228
00:10:44,389 --> 00:10:47,240
that means 8 out of every 10 developers

229
00:10:47,240 --> 00:10:50,600
will need typescript definitions from

230
00:10:50,600 --> 00:10:52,639
your library in order to develop in

231
00:10:52,639 --> 00:10:56,959
typescript so then the question is what

232
00:10:56,959 --> 00:10:59,809
makes it possible to make typescript

233
00:10:59,809 --> 00:11:02,949
definitions available to the developers

234
00:11:02,949 --> 00:11:06,949
well one option is you could build your

235
00:11:06,949 --> 00:11:11,470
app build your library rather in

236
00:11:11,470 --> 00:11:14,089
JavaScript regular JavaScript and then

237
00:11:14,089 --> 00:11:16,220
add typescript definitions too

238
00:11:16,220 --> 00:11:19,309
definitely typed it's this repo of high

239
00:11:19,309 --> 00:11:20,270
quality

240
00:11:20,270 --> 00:11:22,930
typescript definitions so they're like

241
00:11:22,930 --> 00:11:26,390
7,000 typescript definite in that repo

242
00:11:26,390 --> 00:11:29,120
react is in their lo dashes in their

243
00:11:29,120 --> 00:11:30,680
various different libraries that are

244
00:11:30,680 --> 00:11:31,970
written that are not written in

245
00:11:31,970 --> 00:11:33,890
typescript but have typescript types

246
00:11:33,890 --> 00:11:34,640
available

247
00:11:34,640 --> 00:11:37,430
the only drawback or one of the

248
00:11:37,430 --> 00:11:39,260
drawbacks with this really is that you

249
00:11:39,260 --> 00:11:41,300
have to know typescript really well in

250
00:11:41,300 --> 00:11:43,310
order to create typescript definitions

251
00:11:43,310 --> 00:11:46,460
so my suggestion is you just might as

252
00:11:46,460 --> 00:11:48,790
well write it in typescript right

253
00:11:48,790 --> 00:11:51,130
there's definitely a learning curve with

254
00:11:51,130 --> 00:11:54,800
using typescript no doubt but in the

255
00:11:54,800 --> 00:11:57,980
interest of serving your users the other

256
00:11:57,980 --> 00:11:59,930
developers who want to use your library

257
00:11:59,930 --> 00:12:02,810
writing in typescript is the best way to

258
00:12:02,810 --> 00:12:06,230
provide type definition files because

259
00:12:06,230 --> 00:12:07,940
they're going to get auto-generated and

260
00:12:07,940 --> 00:12:09,950
I'll talk a little bit later about about

261
00:12:09,950 --> 00:12:12,320
how that happens it's also really

262
00:12:12,320 --> 00:12:16,490
difficult to write types for untyped

263
00:12:16,490 --> 00:12:20,150
code because when we have untyped code

264
00:12:20,150 --> 00:12:22,670
we're able to make some shortcuts and

265
00:12:22,670 --> 00:12:25,040
assumptions about how things work but

266
00:12:25,040 --> 00:12:26,330
those things aren't allowed and

267
00:12:26,330 --> 00:12:28,940
typescript because we have to be type

268
00:12:28,940 --> 00:12:34,030
safe so typescript also in addition

269
00:12:34,030 --> 00:12:38,300
gives us modern JavaScript so all of the

270
00:12:38,300 --> 00:12:40,310
nice features that are coming out and

271
00:12:40,310 --> 00:12:43,190
new versions of Okuma script those are

272
00:12:43,190 --> 00:12:46,580
also available in typescript so it not

273
00:12:46,580 --> 00:12:48,620
only a win because we give type

274
00:12:48,620 --> 00:12:51,230
definitions to our users but we also get

275
00:12:51,230 --> 00:12:54,500
to develop with matcha it's kind of

276
00:12:54,500 --> 00:12:58,700
everybody's winning in that sense all

277
00:12:58,700 --> 00:13:01,630
right so now let's get a little bit

278
00:13:01,630 --> 00:13:05,750
tactical here so now I know how to use

279
00:13:05,750 --> 00:13:07,610
your Lib because you gave me helpful

280
00:13:07,610 --> 00:13:10,970
docs I you provided typescript

281
00:13:10,970 --> 00:13:12,500
definitions because you wrote in

282
00:13:12,500 --> 00:13:16,220
typescript so now I'm good I can just

283
00:13:16,220 --> 00:13:18,200
build my app and continue to use your

284
00:13:18,200 --> 00:13:22,750
awesome library but while developing

285
00:13:22,750 --> 00:13:25,570
there's nothing more frustrating than

286
00:13:25,570 --> 00:13:30,050
running into a library bug right and in

287
00:13:30,050 --> 00:13:31,940
the beginning you know we're trusting we

288
00:13:31,940 --> 00:13:33,590
assume the libraries

289
00:13:33,590 --> 00:13:36,200
perfect so the problem is with us so

290
00:13:36,200 --> 00:13:38,270
we're spending hours and hours wondering

291
00:13:38,270 --> 00:13:39,830
why you know I'm giving all this

292
00:13:39,830 --> 00:13:42,890
information are providing the parameters

293
00:13:42,890 --> 00:13:44,630
that the library says and those helpful

294
00:13:44,630 --> 00:13:46,160
Docs and I'm not getting the help the

295
00:13:46,160 --> 00:13:47,630
answer that I was supposed to like

296
00:13:47,630 --> 00:13:49,550
what's going on

297
00:13:49,550 --> 00:13:52,640
so we really want our library to be

298
00:13:52,640 --> 00:13:55,970
perfect like bug free we need to do our

299
00:13:55,970 --> 00:13:57,920
absolute best to make sure that there

300
00:13:57,920 --> 00:14:00,380
are no bugs so then the question of

301
00:14:00,380 --> 00:14:01,880
course is like what do we have to do in

302
00:14:01,880 --> 00:14:05,720
order to make our library as bug free as

303
00:14:05,720 --> 00:14:09,110
possible well it starts with the

304
00:14:09,110 --> 00:14:11,990
three-headed monster of unit test

305
00:14:11,990 --> 00:14:15,740
testing with coverage from jest linting

306
00:14:15,740 --> 00:14:19,190
from es lint and then type checking from

307
00:14:19,190 --> 00:14:22,340
typescript so I want to call out the

308
00:14:22,340 --> 00:14:25,010
type checking because not only is

309
00:14:25,010 --> 00:14:26,510
developing an typescript

310
00:14:26,510 --> 00:14:29,360
like good for providing type definitions

311
00:14:29,360 --> 00:14:31,430
like we talked about it's also good

312
00:14:31,430 --> 00:14:33,290
because it helps ru it's also good for

313
00:14:33,290 --> 00:14:35,030
our users because it helps to prevent

314
00:14:35,030 --> 00:14:37,760
bugs so those like edge cases where

315
00:14:37,760 --> 00:14:39,770
something was undefined when you didn't

316
00:14:39,770 --> 00:14:42,260
expect it to be undefined or you were

317
00:14:42,260 --> 00:14:44,120
factor a function but forget to change

318
00:14:44,120 --> 00:14:46,340
one of the places where you called it

319
00:14:46,340 --> 00:14:48,140
like typescript will catch all of those

320
00:14:48,140 --> 00:14:51,380
different things and with Visual Studio

321
00:14:51,380 --> 00:14:54,890
code you can get type checking happening

322
00:14:54,890 --> 00:14:57,560
as you're coding so you're like fixing

323
00:14:57,560 --> 00:14:59,390
problems or catching problems as you're

324
00:14:59,390 --> 00:15:04,100
coding but I'm guessing most of you knew

325
00:15:04,100 --> 00:15:06,820
that already

326
00:15:06,830 --> 00:15:09,020
what I'm more interested in is taking it

327
00:15:09,020 --> 00:15:11,810
to a kind of a next level so typically

328
00:15:11,810 --> 00:15:14,180
you would run linting and type checking

329
00:15:14,180 --> 00:15:16,640
and unit testing with three separate

330
00:15:16,640 --> 00:15:19,580
commands like I mentioned but with a

331
00:15:19,580 --> 00:15:22,430
feature ingest called Jeff's projects

332
00:15:22,430 --> 00:15:25,760
you can run them all through just so

333
00:15:25,760 --> 00:15:28,190
gest has been a refactored maybe a year

334
00:15:28,190 --> 00:15:31,760
ago into a platform so in the beginning

335
00:15:31,760 --> 00:15:36,230
you have what I call the file collector

336
00:15:36,230 --> 00:15:39,080
and that determines like what files

337
00:15:39,080 --> 00:15:41,860
should be run in order to be tested and

338
00:15:41,860 --> 00:15:45,710
then at the end part have what I call

339
00:15:45,710 --> 00:15:47,180
the error reporter that

340
00:15:47,180 --> 00:15:49,940
shows what errors happened and what

341
00:15:49,940 --> 00:15:52,850
passed and all those things and then in

342
00:15:52,850 --> 00:15:55,700
the middle there's the runner which is

343
00:15:55,700 --> 00:15:58,910
the actual thing we're running so

344
00:15:58,910 --> 00:16:01,040
typically that's just been a unit test

345
00:16:01,040 --> 00:16:03,800
runner in the middle but now you can

346
00:16:03,800 --> 00:16:05,450
have different plugins to run other

347
00:16:05,450 --> 00:16:08,690
things so you can have an es Lindt

348
00:16:08,690 --> 00:16:11,270
runner or you can have a TS c a

349
00:16:11,270 --> 00:16:14,260
typescript compiler runner in the middle

350
00:16:14,260 --> 00:16:17,210
so what now when you use that set of

351
00:16:17,210 --> 00:16:20,900
thing now you can have es Lindt run in

352
00:16:20,900 --> 00:16:23,120
watch mode which is not possible with

353
00:16:23,120 --> 00:16:26,690
the es let command-line because just

354
00:16:26,690 --> 00:16:29,810
runs in in wash watch mode you can also

355
00:16:29,810 --> 00:16:32,540
run all of the things in parallel as

356
00:16:32,540 --> 00:16:35,450
well because that's how just runs and

357
00:16:35,450 --> 00:16:37,790
then you get a consistent error

358
00:16:37,790 --> 00:16:40,760
reporting at the end about which things

359
00:16:40,760 --> 00:16:44,870
failed so simply you call just drop your

360
00:16:44,870 --> 00:16:47,330
test script in your npm script and

361
00:16:47,330 --> 00:16:49,820
you're off to the races and everything

362
00:16:49,820 --> 00:16:52,190
will be tested there and then you can

363
00:16:52,190 --> 00:16:55,190
take that test script and you can run it

364
00:16:55,190 --> 00:16:57,110
in your CI or your continuous

365
00:16:57,110 --> 00:16:59,870
integration environment so there are

366
00:16:59,870 --> 00:17:02,330
many CI services out there like Travis

367
00:17:02,330 --> 00:17:05,480
or circle CI but lately I have been

368
00:17:05,480 --> 00:17:07,670
using github actions and github

369
00:17:07,670 --> 00:17:10,130
workflows and and really really loving

370
00:17:10,130 --> 00:17:12,950
it because I can just use git up

371
00:17:12,950 --> 00:17:14,990
github actions and not have to sign up

372
00:17:14,990 --> 00:17:17,750
for a different service and connect it

373
00:17:17,750 --> 00:17:20,300
to my repo so here's an example of a

374
00:17:20,300 --> 00:17:22,700
github workflow that runs the tests on

375
00:17:22,700 --> 00:17:27,020
no 10 on no 12 and 13 so whenever I'm

376
00:17:27,020 --> 00:17:29,390
running my tests part of it is I run it

377
00:17:29,390 --> 00:17:32,330
on all the LTS versions so that'll be

378
00:17:32,330 --> 00:17:34,160
ten and twelve the even numbers because

379
00:17:34,160 --> 00:17:36,740
eight just got dropped and then I run it

380
00:17:36,740 --> 00:17:39,200
on the latest odd to see if there are

381
00:17:39,200 --> 00:17:41,510
any new things backwards-compatible

382
00:17:41,510 --> 00:17:43,490
changes that I got it kind of catch as

383
00:17:43,490 --> 00:17:44,690
quickly as possible

384
00:17:44,690 --> 00:17:47,120
so it's important to run on multiple

385
00:17:47,120 --> 00:17:49,490
versions of node for your library

386
00:17:49,490 --> 00:17:50,720
because you don't know which versions

387
00:17:50,720 --> 00:17:54,440
your developers are going to use so I

388
00:17:54,440 --> 00:17:56,180
really want to spend more time unpacking

389
00:17:56,180 --> 00:17:57,770
some of those things that I talked about

390
00:17:57,770 --> 00:17:59,000
but I don't

391
00:17:59,000 --> 00:18:01,640
time to go into those details so here

392
00:18:01,640 --> 00:18:03,530
are a bunch of links to resources that

393
00:18:03,530 --> 00:18:08,780
kind of go more into those all right so

394
00:18:08,780 --> 00:18:12,409
we've discussed helpful Docs we talked

395
00:18:12,409 --> 00:18:16,070
about typescript types and then how our

396
00:18:16,070 --> 00:18:18,919
library could be bug free let's bring it

397
00:18:18,919 --> 00:18:22,100
home with the last one so no matter how

398
00:18:22,100 --> 00:18:26,179
hard you test and test and test there

399
00:18:26,179 --> 00:18:29,390
are inevitably be bugs you know we're

400
00:18:29,390 --> 00:18:31,250
still gonna be bugs no matter how well

401
00:18:31,250 --> 00:18:34,250
we write our code so or even if you

402
00:18:34,250 --> 00:18:35,570
write perfect code they're still gonna

403
00:18:35,570 --> 00:18:37,640
be a feature request from someone that's

404
00:18:37,640 --> 00:18:39,049
a really good idea that you want to

405
00:18:39,049 --> 00:18:42,950
implement so you want to be able changes

406
00:18:42,950 --> 00:18:45,320
out to your users out to those

407
00:18:45,320 --> 00:18:48,230
developers as quickly as possible so

408
00:18:48,230 --> 00:18:50,960
from their initial request to when it's

409
00:18:50,960 --> 00:18:56,120
published on the registry we want to

410
00:18:56,120 --> 00:18:58,549
make that as quick as possible so the

411
00:18:58,549 --> 00:19:00,500
question for us is like what makes those

412
00:19:00,500 --> 00:19:03,580
changes get there as quickly as possible

413
00:19:03,580 --> 00:19:06,110
the first it starts with the issue

414
00:19:06,110 --> 00:19:09,020
itself okay whether it's a bug or a

415
00:19:09,020 --> 00:19:11,150
feature request we want is money as much

416
00:19:11,150 --> 00:19:13,700
in detail as possible so with github

417
00:19:13,700 --> 00:19:15,919
issue templates you can guide the

418
00:19:15,919 --> 00:19:18,679
developer into a flow based upon their

419
00:19:18,679 --> 00:19:21,110
need so whether it's a bug report or a

420
00:19:21,110 --> 00:19:23,419
feature request and then with each of

421
00:19:23,419 --> 00:19:26,390
those templates you can have labels tied

422
00:19:26,390 --> 00:19:28,190
to them so things are automatically

423
00:19:28,190 --> 00:19:30,200
categorized for you when you're

424
00:19:30,200 --> 00:19:32,500
filtering through different problems and

425
00:19:32,500 --> 00:19:35,510
one thing I do want to call out is

426
00:19:35,510 --> 00:19:38,360
specifically for bugs you can suggest

427
00:19:38,360 --> 00:19:42,919
that the developers and run the end info

428
00:19:42,919 --> 00:19:46,159
package and include its results and it

429
00:19:46,159 --> 00:19:48,669
provides all this information about

430
00:19:48,669 --> 00:19:51,080
their environment so whether they're

431
00:19:51,080 --> 00:19:53,870
Windows or Mac or you know what versions

432
00:19:53,870 --> 00:19:55,820
of node and yarn and NPM they have

433
00:19:55,820 --> 00:19:57,140
installed and there's plenty of other

434
00:19:57,140 --> 00:19:59,210
things in the CLI that you can configure

435
00:19:59,210 --> 00:20:01,970
so you can go to their helpful Docs and

436
00:20:01,970 --> 00:20:04,880
find out more about it but it kind of

437
00:20:04,880 --> 00:20:07,250
just answers a lot of the questions from

438
00:20:07,250 --> 00:20:12,440
the start ok so there are various

439
00:20:12,440 --> 00:20:14,480
communication files to streamline the

440
00:20:14,480 --> 00:20:15,890
process thank you very much

441
00:20:15,890 --> 00:20:18,020
so I want to call out the prettier

442
00:20:18,020 --> 00:20:21,200
config file especially if you're not

443
00:20:21,200 --> 00:20:22,820
familiar with prettier it provides

444
00:20:22,820 --> 00:20:24,680
consistent formatting to all of your

445
00:20:24,680 --> 00:20:28,070
files JavaScript CSS like markdown files

446
00:20:28,070 --> 00:20:31,190
everything so now there's no time wasted

447
00:20:31,190 --> 00:20:35,690
arguing over the format of your code but

448
00:20:35,690 --> 00:20:37,580
it also makes development super fast

449
00:20:37,580 --> 00:20:38,840
because you no longer have to think

450
00:20:38,840 --> 00:20:41,480
about formatting your code just if you

451
00:20:41,480 --> 00:20:42,890
have an editor that automatically

452
00:20:42,890 --> 00:20:46,690
formats unsaved or on paste or whenever

453
00:20:46,690 --> 00:20:48,950
your code gets formatted so you don't

454
00:20:48,950 --> 00:20:51,050
have to spend time you know adding a new

455
00:20:51,050 --> 00:20:53,810
line and then tabbing in three times and

456
00:20:53,810 --> 00:20:55,400
moving the curly brace like it'll do all

457
00:20:55,400 --> 00:20:59,540
that stuff for you in fact if you're

458
00:20:59,540 --> 00:21:01,010
starting out with the library there are

459
00:21:01,010 --> 00:21:02,900
a couple of scripts that you can run as

460
00:21:02,900 --> 00:21:04,760
a way to just kind of bootstrap your

461
00:21:04,760 --> 00:21:07,670
library so you can run the license

462
00:21:07,670 --> 00:21:09,980
package to give you whatever license you

463
00:21:09,980 --> 00:21:11,660
want and that becomes your license that

464
00:21:11,660 --> 00:21:14,660
MD you can run the git ignore package

465
00:21:14,660 --> 00:21:16,730
and I'll give you a good ignore based

466
00:21:16,730 --> 00:21:18,860
upon your environment most likely node

467
00:21:18,860 --> 00:21:21,770
you can generate a code of conduct with

468
00:21:21,770 --> 00:21:25,100
the cough gin or Cove gin package then

469
00:21:25,100 --> 00:21:27,440
you run goodd in it you run NPM in it

470
00:21:27,440 --> 00:21:31,430
and you're off to the races there so

471
00:21:31,430 --> 00:21:33,140
then after the code is written the PR

472
00:21:33,140 --> 00:21:37,730
passes it gets merged into master or

473
00:21:37,730 --> 00:21:39,740
whatever your release branch is we need

474
00:21:39,740 --> 00:21:42,110
to get that code out to the registry as

475
00:21:42,110 --> 00:21:45,140
soon as possible so the first step is

476
00:21:45,140 --> 00:21:47,240
ensuring that we're generating the

477
00:21:47,240 --> 00:21:51,350
actual target formats module formats so

478
00:21:51,350 --> 00:21:53,270
that they can be consumed by the

479
00:21:53,270 --> 00:21:56,990
developers app so these days for modern

480
00:21:56,990 --> 00:21:59,390
j/s I suggest two formats

481
00:21:59,390 --> 00:22:03,380
that's Atma script module format or ESM

482
00:22:03,380 --> 00:22:05,950
mainly for tree shaking and then

483
00:22:05,950 --> 00:22:09,890
commonjs or CJ s which is for a lot of

484
00:22:09,890 --> 00:22:13,630
the standard node of applications so

485
00:22:13,630 --> 00:22:16,790
first you have the main field that's for

486
00:22:16,790 --> 00:22:20,180
your CJ s endpoint then you want to have

487
00:22:20,180 --> 00:22:23,940
the module and J s next

488
00:22:23,940 --> 00:22:26,170
properties that's the entry point for

489
00:22:26,170 --> 00:22:28,900
ESM and then there's also the side

490
00:22:28,900 --> 00:22:31,300
effects property that webpack uses for

491
00:22:31,300 --> 00:22:33,790
Atma script modules as well I have a

492
00:22:33,790 --> 00:22:36,700
link a resource that explains the neset

493
00:22:36,700 --> 00:22:40,350
then necessary the need for that then

494
00:22:40,350 --> 00:22:43,360
you have the type field that points to

495
00:22:43,360 --> 00:22:45,640
your type script definitions there that

496
00:22:45,640 --> 00:22:48,520
we talked about in part two you have the

497
00:22:48,520 --> 00:22:51,610
files field that points to where the

498
00:22:51,610 --> 00:22:55,510
built files are located and we use that

499
00:22:55,510 --> 00:22:58,600
instead of using NPM ignore which is

500
00:22:58,600 --> 00:23:00,520
what's traditionally used and I have an

501
00:23:00,520 --> 00:23:03,300
article that explains why that is and

502
00:23:03,300 --> 00:23:08,650
then now we use babel to transpile our

503
00:23:08,650 --> 00:23:11,800
typescript into vanilla Jas so both the

504
00:23:11,800 --> 00:23:15,340
ESM and the CJ s targets you just use a

505
00:23:15,340 --> 00:23:17,760
typescript plug-in in order to do it and

506
00:23:17,760 --> 00:23:22,179
then we use TSC TSC the typescript

507
00:23:22,179 --> 00:23:24,100
compiler to build the typescript

508
00:23:24,100 --> 00:23:27,190
definitions and lastly wrap it all up

509
00:23:27,190 --> 00:23:31,150
into a nice build script that can be run

510
00:23:31,150 --> 00:23:34,420
to run all of those together and then

511
00:23:34,420 --> 00:23:37,090
with that build script in place we can

512
00:23:37,090 --> 00:23:40,900
achieve continuous delivery or the CD

513
00:23:40,900 --> 00:23:45,309
side of CIN CD so first we run the build

514
00:23:45,309 --> 00:23:47,740
to generate all those files and then

515
00:23:47,740 --> 00:23:50,230
secondly we use a package called

516
00:23:50,230 --> 00:23:53,410
semantic reliefs to actually release to

517
00:23:53,410 --> 00:23:56,260
the package registry so it's meant to be

518
00:23:56,260 --> 00:23:58,540
executed in your CI environment after

519
00:23:58,540 --> 00:24:00,640
every successful build to your release

520
00:24:00,640 --> 00:24:04,350
branch most likely master so it makes

521
00:24:04,350 --> 00:24:07,950
releases what they say unromantic and

522
00:24:07,950 --> 00:24:11,980
unsentimental so the cool thing about

523
00:24:11,980 --> 00:24:15,550
this is that I can merge a PR for my

524
00:24:15,550 --> 00:24:18,850
library from my phone and it gets

525
00:24:18,850 --> 00:24:22,000
automatically released to NPM within

526
00:24:22,000 --> 00:24:24,160
five minutes like I don't have to be on

527
00:24:24,160 --> 00:24:27,550
my computer and do a NPM version and

528
00:24:27,550 --> 00:24:29,679
push something out like it all happens

529
00:24:29,679 --> 00:24:33,580
inside of CI which is pretty cool and

530
00:24:33,580 --> 00:24:35,620
then lastly you should probably verify

531
00:24:35,620 --> 00:24:37,660
that what she released was actually good

532
00:24:37,660 --> 00:24:41,350
so you can use unpackage or je s deliver

533
00:24:41,350 --> 00:24:43,660
or even on NPM they have this new

534
00:24:43,660 --> 00:24:47,560
Explorer tab to browse your package to

535
00:24:47,560 --> 00:24:50,650
make sure all the files were there so

536
00:24:50,650 --> 00:24:52,030
here are all the resources that I was

537
00:24:52,030 --> 00:24:54,880
alluding to as I was going on please get

538
00:24:54,880 --> 00:24:58,480
the slides and check those out to click

539
00:24:58,480 --> 00:25:00,690
through ok

540
00:25:00,690 --> 00:25:03,790
whoo ok that was a lot of stuff right

541
00:25:03,790 --> 00:25:07,900
and chances are that you probably missed

542
00:25:07,900 --> 00:25:09,490
something when you're responding to that

543
00:25:09,490 --> 00:25:12,010
slack message right I know some of you

544
00:25:12,010 --> 00:25:14,170
are doing it I can see some of you are

545
00:25:14,170 --> 00:25:18,520
doing it ok but let's quickly recap but

546
00:25:18,520 --> 00:25:20,500
instead of going it by user need I'm

547
00:25:20,500 --> 00:25:22,750
gonna group it by what we care about now

548
00:25:22,750 --> 00:25:27,070
so we can be a little bit selfish now so

549
00:25:27,070 --> 00:25:30,010
and we'll see that the what makes up a

550
00:25:30,010 --> 00:25:33,220
perfect library a perfect repo is a mix

551
00:25:33,220 --> 00:25:35,500
of communication tools as well as

552
00:25:35,500 --> 00:25:39,640
technical things just like the perfect

553
00:25:39,640 --> 00:25:42,070
developer is a mix of technical skills

554
00:25:42,070 --> 00:25:45,640
and communication skills I'm not gonna

555
00:25:45,640 --> 00:25:47,860
spend time talking about 10x or nothing

556
00:25:47,860 --> 00:25:50,080
nothing like that ok so here we go this

557
00:25:50,080 --> 00:25:52,150
is everything on one slide so you have

558
00:25:52,150 --> 00:25:54,490
your development experience that starts

559
00:25:54,490 --> 00:25:56,590
with being able to write modern j/s and

560
00:25:56,590 --> 00:25:59,080
if you're using a nice editor like PS

561
00:25:59,080 --> 00:26:01,780
code prettier es LAN type chucking

562
00:26:01,780 --> 00:26:04,390
happens while you develop then we have

563
00:26:04,390 --> 00:26:07,510
testing and continuous integration I

564
00:26:07,510 --> 00:26:10,390
suggest using github actions and running

565
00:26:10,390 --> 00:26:12,370
just as a platform so everything works

566
00:26:12,370 --> 00:26:15,370
together for building and continuous

567
00:26:15,370 --> 00:26:19,170
delivery we use babble for transpiling

568
00:26:19,170 --> 00:26:23,380
typescript for type definitions and then

569
00:26:23,380 --> 00:26:25,120
a whole bunch of fields in your package

570
00:26:25,120 --> 00:26:28,450
JSON in order to use semantic release

571
00:26:28,450 --> 00:26:31,210
and release automatically and then

572
00:26:31,210 --> 00:26:33,700
lastly there are a bunch of reef repo

573
00:26:33,700 --> 00:26:36,970
files as I call it that are basically

574
00:26:36,970 --> 00:26:39,910
all around communication and allowing

575
00:26:39,910 --> 00:26:42,790
the developers ease and using your

576
00:26:42,790 --> 00:26:49,450
library so that was all the info that I

577
00:26:49,450 --> 00:26:51,549
needed like three or four years ago and

578
00:26:51,549 --> 00:26:52,960
when I was trying to build my first

579
00:26:52,960 --> 00:26:54,999
library and I was trying to do it the

580
00:26:54,999 --> 00:26:57,820
correct way from the beginning but to be

581
00:26:57,820 --> 00:26:59,590
honest I probably would have been too

582
00:26:59,590 --> 00:27:03,489
overwhelmed at that point like I counted

583
00:27:03,489 --> 00:27:05,549
in that previous slide like 20 different

584
00:27:05,549 --> 00:27:08,259
suggestions that I had in order to build

585
00:27:08,259 --> 00:27:11,769
that perfect repo and at that time even

586
00:27:11,769 --> 00:27:13,570
though I wanted to do it right I was

587
00:27:13,570 --> 00:27:15,460
more focused on actually building the

588
00:27:15,460 --> 00:27:17,610
library itself not all this tooling

589
00:27:17,610 --> 00:27:19,509
infrastructure because I didn't care

590
00:27:19,509 --> 00:27:21,429
about it then as much as I care about it

591
00:27:21,429 --> 00:27:25,059
now and even now like I don't want to go

592
00:27:25,059 --> 00:27:27,009
through all those 20 things every time

593
00:27:27,009 --> 00:27:29,980
I'm building a library so I created this

594
00:27:29,980 --> 00:27:32,859
zero config CLI tool I call it

595
00:27:32,859 --> 00:27:37,600
Bennett in VP CLI after myself yes and

596
00:27:37,600 --> 00:27:40,389
it abstract all of that work for all the

597
00:27:40,389 --> 00:27:42,879
libraries that I'm building so it does

598
00:27:42,879 --> 00:27:45,070
everything but write the docs and

599
00:27:45,070 --> 00:27:47,830
obviously the source code should write

600
00:27:47,830 --> 00:27:49,090
the source code that would be amazing

601
00:27:49,090 --> 00:27:53,559
but it's not it's not sentient yet okay

602
00:27:53,559 --> 00:27:56,619
so the CLI does have some options right

603
00:27:56,619 --> 00:27:59,590
so you could totally use it for your

604
00:27:59,590 --> 00:28:02,830
library but it's called the bit MVP CLI

605
00:28:02,830 --> 00:28:05,649
for a reason it's for me and for my

606
00:28:05,649 --> 00:28:08,200
library so you know I'm not gonna accept

607
00:28:08,200 --> 00:28:10,119
any issue tickets to make it more

608
00:28:10,119 --> 00:28:12,129
configurable I'm just telling you right

609
00:28:12,129 --> 00:28:14,289
now that's not going to happen

610
00:28:14,289 --> 00:28:16,600
so if it works kind of like a react

611
00:28:16,600 --> 00:28:18,220
scripts if you ever have used that

612
00:28:18,220 --> 00:28:20,859
before if with create react app you can

613
00:28:20,859 --> 00:28:24,460
run NPM been MVP CLI create with the

614
00:28:24,460 --> 00:28:26,470
name of your library and it will create

615
00:28:26,470 --> 00:28:30,119
the whole folder all the github

616
00:28:30,119 --> 00:28:33,489
workflows all the templates package.json

617
00:28:33,489 --> 00:28:36,249
with all the fields and then it installs

618
00:28:36,249 --> 00:28:39,759
the package the CLI as a dependency so

619
00:28:39,759 --> 00:28:41,529
that it could run all of the other

620
00:28:41,529 --> 00:28:44,499
scripts as well so the test script and

621
00:28:44,499 --> 00:28:46,389
the build script do basically what I

622
00:28:46,389 --> 00:28:49,389
talked about before this dart script is

623
00:28:49,389 --> 00:28:51,639
for development which basically runs

624
00:28:51,639 --> 00:28:55,419
tests in watch mode so it just checks

625
00:28:55,419 --> 00:28:58,239
whatever you've done and your get

626
00:28:58,239 --> 00:29:00,340
changes and it will run the tests based

627
00:29:00,340 --> 00:29:03,909
upon that changed code but the most

628
00:29:03,909 --> 00:29:05,440
interesting thing which I really

629
00:29:05,440 --> 00:29:06,850
really really wish I could spend more

630
00:29:06,850 --> 00:29:10,560
time on as the integrate command and

631
00:29:10,560 --> 00:29:14,710
basically what it does is it packages up

632
00:29:14,710 --> 00:29:16,300
the library in a tarball

633
00:29:16,300 --> 00:29:18,310
the same tarball that gets pushed up to

634
00:29:18,310 --> 00:29:20,620
the registry but instead of pushing it

635
00:29:20,620 --> 00:29:23,290
to the registry and you'll have a

636
00:29:23,290 --> 00:29:25,870
separate app that it will install your

637
00:29:25,870 --> 00:29:28,360
library into so you can install

638
00:29:28,360 --> 00:29:30,640
something from a tar ball from the file

639
00:29:30,640 --> 00:29:34,510
system and then I run tests and import

640
00:29:34,510 --> 00:29:37,120
the library as if I was using it like a

641
00:29:37,120 --> 00:29:39,550
application and I run tests that way to

642
00:29:39,550 --> 00:29:42,040
make sure that like I exported all the

643
00:29:42,040 --> 00:29:44,800
methods correctly my dev dependencies

644
00:29:44,800 --> 00:29:46,750
and dependencies have been set up the

645
00:29:46,750 --> 00:29:48,430
right way because sometimes I put them

646
00:29:48,430 --> 00:29:50,650
in the wrong place so to make sure that

647
00:29:50,650 --> 00:29:52,780
when developers using the library that

648
00:29:52,780 --> 00:29:55,420
have everything that they need so if

649
00:29:55,420 --> 00:29:56,830
you're interested in that you can check

650
00:29:56,830 --> 00:30:02,430
check out the library and lastly the CLI

651
00:30:02,430 --> 00:30:06,730
uses itself for development and testing

652
00:30:06,730 --> 00:30:09,580
and building so it's kind of like the

653
00:30:09,580 --> 00:30:12,850
original perfect library that's enabling

654
00:30:12,850 --> 00:30:16,840
other perfect libraries to be created so

655
00:30:16,840 --> 00:30:19,930
one last thing friend of mine Jonathan

656
00:30:19,930 --> 00:30:22,180
creamer he is really passionate about

657
00:30:22,180 --> 00:30:24,730
front-end tooling as am I so he's

658
00:30:24,730 --> 00:30:26,440
wanting to create this community around

659
00:30:26,440 --> 00:30:29,470
front-end tooling he's coined the term

660
00:30:29,470 --> 00:30:32,980
div ops instead of DevOps for this type

661
00:30:32,980 --> 00:30:35,650
of thing so he has a blog about it and

662
00:30:35,650 --> 00:30:37,780
there's a slack group and there's a

663
00:30:37,780 --> 00:30:40,950
subreddit that you can join for that

664
00:30:40,950 --> 00:30:42,670
okay so that's it

665
00:30:42,670 --> 00:30:44,050
I just flooded you with all this

666
00:30:44,050 --> 00:30:46,480
information I want to remind you that

667
00:30:46,480 --> 00:30:49,810
the slides I tweeted out a link to the

668
00:30:49,810 --> 00:30:51,520
slide so you can totally follow it there

669
00:30:51,520 --> 00:30:53,890
hopefully there's stuff that you learned

670
00:30:53,890 --> 00:30:56,410
right there's also likely stuff that I

671
00:30:56,410 --> 00:30:58,660
forgotten so I welcome your feedback to

672
00:30:58,660 --> 00:31:00,850
tell me some things that could be added

673
00:31:00,850 --> 00:31:03,430
to make it even better I want to thank

674
00:31:03,430 --> 00:31:05,410
the conference the conference organizers

675
00:31:05,410 --> 00:31:07,960
for inviting me to share my knowledge

676
00:31:07,960 --> 00:31:10,780
with all of you and I want to thank you

677
00:31:10,780 --> 00:31:13,600
all too for coming to the talk because

678
00:31:13,600 --> 00:31:15,820
you know the hallway track is real like

679
00:31:15,820 --> 00:31:17,950
you could have been there you know you

680
00:31:17,950 --> 00:31:19,240
could have gone to get ahead

681
00:31:19,240 --> 00:31:21,970
start on lunch like some people have

682
00:31:21,970 --> 00:31:25,390
done you can't see them but I totally

683
00:31:25,390 --> 00:31:28,210
can see them but it's okay I'm not hurt

684
00:31:28,210 --> 00:31:28,929
at all

685
00:31:28,929 --> 00:31:30,820
and it's Hawaii right so you could

686
00:31:30,820 --> 00:31:32,290
totally be anywhere else but here but

687
00:31:32,290 --> 00:31:34,270
you're still here so I really really

688
00:31:34,270 --> 00:31:36,429
appreciate it so if you've got any

689
00:31:36,429 --> 00:31:38,320
questions feel free to find me

690
00:31:38,320 --> 00:31:39,670
afterwards

691
00:31:39,670 --> 00:31:41,920
I have swag that I'm givin away like

692
00:31:41,920 --> 00:31:45,190
this hat so I'll give that out or if

693
00:31:45,190 --> 00:31:46,840
you're introverted you can ping me on

694
00:31:46,840 --> 00:31:50,140
Twitter so thank you very much enjoy the

695
00:31:50,140 --> 00:31:52,070
rest of the conference in Mahalo

