1
00:00:19,220 --> 00:00:22,289

so my talk is called down the rabbit

2
00:00:22,289 --> 00:00:25,289
hole it's a little story about a crazy

3
00:00:25,289 --> 00:00:30,060
bug I was chasing around for two and a

4
00:00:30,060 --> 00:00:34,980
half months earlier this year my wife I

5
00:00:34,980 --> 00:00:37,559
came home from work up for like three

6
00:00:37,559 --> 00:00:39,269
days in a row my wife asked me what I

7
00:00:39,269 --> 00:00:41,010
was doing at work I said chasing a bug

8
00:00:41,010 --> 00:00:43,680
and finally she was like why shouldn't

9
00:00:43,680 --> 00:00:45,420
you be working why are you chasing a bug

10
00:00:45,420 --> 00:00:47,610
around the office it's like I've done

11
00:00:47,610 --> 00:00:53,519
right so this is like a little play sort

12
00:00:53,519 --> 00:00:58,589
of there are six acts I have a cast I am

13
00:00:58,589 --> 00:01:00,510
in the cast that's me that's what I look

14
00:01:00,510 --> 00:01:04,739
like on the internet I work for a

15
00:01:04,739 --> 00:01:06,869
company called a lark we put live chat

16
00:01:06,869 --> 00:01:10,950
on websites so this use a little chat

17
00:01:10,950 --> 00:01:12,689
box in the lower right-hand corner you

18
00:01:12,689 --> 00:01:15,000
might have seen it around it's popular

19
00:01:15,000 --> 00:01:20,520
among the startup community this little

20
00:01:20,520 --> 00:01:21,840
bird is going to help give advice

21
00:01:21,840 --> 00:01:28,770
throughout the talk and this is the app

22
00:01:28,770 --> 00:01:32,520
that had the bug it's it's an odious

23
00:01:32,520 --> 00:01:38,789
based app that allows our operators to

24
00:01:38,789 --> 00:01:40,469
chat with the visitors on their website

25
00:01:40,469 --> 00:01:42,479
from their web browser so they don't

26
00:01:42,479 --> 00:01:44,759
have to download any software on their

27
00:01:44,759 --> 00:01:47,850
computer it's basically a jabber client

28
00:01:47,850 --> 00:01:51,450
that runs in your web browser it's built

29
00:01:51,450 --> 00:01:54,149
on nodejs and socket i/o among other

30
00:01:54,149 --> 00:01:57,749
things all right so let's get started

31
00:01:57,749 --> 00:02:03,210
Act one is denial a few months ago a

32
00:02:03,210 --> 00:02:05,700
customer came to me and said the chatwal

33
00:02:05,700 --> 00:02:07,139
crying it keeps disconnecting and

34
00:02:07,139 --> 00:02:10,800
reconnecting I said my code is perfect

35
00:02:10,800 --> 00:02:13,500
there's no way that's happening it must

36
00:02:13,500 --> 00:02:14,970
be your problem

37
00:02:14,970 --> 00:02:16,920
for those of you who don't know what

38
00:02:16,920 --> 00:02:19,890
pebkac is it means that the problem

39
00:02:19,890 --> 00:02:22,550
exists between the keyboard and chair

40
00:02:22,550 --> 00:02:25,890
this is my problem that often exists

41
00:02:25,890 --> 00:02:30,660
between my keyboard and chair anyhow

42
00:02:30,660 --> 00:02:35,400
it's basically just user error well then

43
00:02:35,400 --> 00:02:37,890
a couple days later another customer

44
00:02:37,890 --> 00:02:40,290
came to me and said hey the cat chat

45
00:02:40,290 --> 00:02:42,090
client keeps disconnecting and

46
00:02:42,090 --> 00:02:48,860
reconnecting yeah absolutely sure maybe

47
00:02:48,860 --> 00:02:51,000
that maybe it's just a crappy internet

48
00:02:51,000 --> 00:02:54,930
connection a couple days later one of my

49
00:02:54,930 --> 00:02:56,820
co-workers came to me and said hey my

50
00:02:56,820 --> 00:02:58,290
chat client keeps disconnecting and

51
00:02:58,290 --> 00:03:00,930
reconnecting it's definitely easier this

52
00:03:00,930 --> 00:03:06,360
time just kidding sorry Sam but he did

53
00:03:06,360 --> 00:03:08,340
say hey my internet has been flaky

54
00:03:08,340 --> 00:03:11,430
lately and so I said sweet flaky

55
00:03:11,430 --> 00:03:15,660
internet problem hi thought so so

56
00:03:15,660 --> 00:03:21,000
problem solved get better internet its

57
00:03:21,000 --> 00:03:24,220
end of my talk no

58
00:03:24,230 --> 00:03:29,580
just kidding so first piece of advice

59
00:03:29,580 --> 00:03:32,910
from the OL ark advice bird is to listen

60
00:03:32,910 --> 00:03:35,489
to your users they actually use your app

61
00:03:35,489 --> 00:03:38,510
probably a lot more than you do so

62
00:03:38,510 --> 00:03:40,950
sometimes they actually are telling the

63
00:03:40,950 --> 00:03:47,510
truth so on to act to acceptance fine

64
00:03:47,510 --> 00:03:52,709
there is a bug so I wonder how often

65
00:03:52,709 --> 00:03:54,180
this bug is happening like it was just

66
00:03:54,180 --> 00:03:58,080
two people in my coworker than yeah okay

67
00:03:58,080 --> 00:04:00,450
maybe it's not super high priority but

68
00:04:00,450 --> 00:04:03,120
if it's like everybody then all right

69
00:04:03,120 --> 00:04:08,250
you should probably fix it so my first

70
00:04:08,250 --> 00:04:11,069
instinct is all right let's go look at

71
00:04:11,069 --> 00:04:14,910
logs we have logs logs the big they're

72
00:04:14,910 --> 00:04:19,330
helpful they're text

73
00:04:19,340 --> 00:04:26,580
blogs and arts happen to be in JSON and

74
00:04:26,580 --> 00:04:29,520
they have hashtags in them because

75
00:04:29,520 --> 00:04:31,770
that's just what we do so we actually

76
00:04:31,770 --> 00:04:34,620
were logging an op disconnected hashtag

77
00:04:34,620 --> 00:04:39,660
every time someone disconnect so if you

78
00:04:39,660 --> 00:04:43,440
stuck this log or if you graphed every

79
00:04:43,440 --> 00:04:45,960
time someone disconnected it looks

80
00:04:45,960 --> 00:04:50,760
something like this peeking around 30 or

81
00:04:50,760 --> 00:04:53,729
so per minute if you look at our total

82
00:04:53,729 --> 00:04:56,669
connection graph it's roughly in the 350

83
00:04:56,669 --> 00:04:59,580
range at a maximum so if we have a

84
00:04:59,580 --> 00:05:02,300
maximum of 350 connections and

85
00:05:02,300 --> 00:05:05,430
disconnects around 30 that means ten

86
00:05:05,430 --> 00:05:07,190
percent of our users are disconnecting

87
00:05:07,190 --> 00:05:12,210
every minute which is actually like fine

88
00:05:12,210 --> 00:05:17,820
it's a problem yeah great lesson number

89
00:05:17,820 --> 00:05:20,190
two and I'm going to lose count of these

90
00:05:20,190 --> 00:05:23,550
so I'm stopped counting but graphing is

91
00:05:23,550 --> 00:05:27,090
really helpful it only took a few

92
00:05:27,090 --> 00:05:29,250
minutes for me to figure out how many

93
00:05:29,250 --> 00:05:33,270
people were being affected once I need

94
00:05:33,270 --> 00:05:36,479
to look basically and we have a lot of

95
00:05:36,479 --> 00:05:40,240
graphs like this for this particular out

96
00:05:40,250 --> 00:05:44,300
can you read that

97
00:05:44,310 --> 00:05:48,280
anyhow these come in very handy like

98
00:05:48,280 --> 00:05:49,930
after deploy to check and see if

99
00:05:49,930 --> 00:05:52,150
everything is gone okay or if you've got

100
00:05:52,150 --> 00:05:54,190
a higher rate or whatever I highly

101
00:05:54,190 --> 00:05:56,050
recommend having some dashboard with

102
00:05:56,050 --> 00:06:01,510
graphs on it for your app now let's go

103
00:06:01,510 --> 00:06:07,810
back to logs so this is a UNIX system

104
00:06:07,810 --> 00:06:11,770
and I know how to use this stuff so

105
00:06:11,770 --> 00:06:16,570
let's take the log look for all the

106
00:06:16,570 --> 00:06:19,960
optics connects it happen in it and this

107
00:06:19,960 --> 00:06:22,270
is not a standard UNIX tool but since

108
00:06:22,270 --> 00:06:23,620
their logs are in Jason there's this

109
00:06:23,620 --> 00:06:25,330
cool thing called Jason tool that you

110
00:06:25,330 --> 00:06:27,610
should look at if you are in a similar

111
00:06:27,610 --> 00:06:30,610
situation and you can basically pick out

112
00:06:30,610 --> 00:06:33,930
pieces of your adjacent particular keys

113
00:06:33,930 --> 00:06:38,140
in the object and get rid of everything

114
00:06:38,140 --> 00:06:41,320
else it's like you know it's what you

115
00:06:41,320 --> 00:06:42,910
wish you could do with XML easily on the

116
00:06:42,910 --> 00:06:47,890
commandment and probably but anyhow so

117
00:06:47,890 --> 00:06:50,080
this basically up to this point will

118
00:06:50,080 --> 00:06:53,890
give us a list of all the usernames

119
00:06:53,890 --> 00:06:56,020
every day every time a user name gets

120
00:06:56,020 --> 00:06:57,280
disconnected it prints out their

121
00:06:57,280 --> 00:07:01,200
username so if we sort it by username

122
00:07:01,200 --> 00:07:07,470
and then count up all of the unique

123
00:07:07,470 --> 00:07:12,040
instances of that username and then sort

124
00:07:12,040 --> 00:07:15,820
it again by the number the count of that

125
00:07:15,820 --> 00:07:18,940
thing oh yeah you need to do that if you

126
00:07:18,940 --> 00:07:22,030
want to actually run that we get

127
00:07:22,030 --> 00:07:24,490
something that looks like this it's like

128
00:07:24,490 --> 00:07:27,400
in this log file Steve disconnected once

129
00:07:27,400 --> 00:07:30,520
John disconnected twice and Susie

130
00:07:30,520 --> 00:07:39,410
disconnected 512 x so okay

131
00:07:39,410 --> 00:07:41,580
Susie obviously is having something

132
00:07:41,580 --> 00:07:44,340
crazy going on so let's go back to more

133
00:07:44,340 --> 00:07:51,900
eunuchs okay this slide is not working

134
00:07:51,900 --> 00:07:58,490
there we go okay so get the disconnects

135
00:07:58,490 --> 00:08:05,490
again this presenter cool thing has

136
00:08:05,490 --> 00:08:09,330
totally failed this time we will get the

137
00:08:09,330 --> 00:08:12,060
timestamp and the user name out of the

138
00:08:12,060 --> 00:08:16,620
Jason and then filter just Susie stuff

139
00:08:16,620 --> 00:08:19,560
and take the first field which is just

140
00:08:19,560 --> 00:08:21,240
the timestamp so really all we're

141
00:08:21,240 --> 00:08:23,610
looking at is what are the times that

142
00:08:23,610 --> 00:08:28,620
Susie's client disconnected and when I

143
00:08:28,620 --> 00:08:32,070
looked at this I noticed this is

144
00:08:32,070 --> 00:08:34,260
happening almost exactly every minute

145
00:08:34,260 --> 00:08:36,450
plus like a tiny little millisecond

146
00:08:36,450 --> 00:08:40,770
delta it's going for 45 or 46 for 47 and

147
00:08:40,770 --> 00:08:44,130
448 so that's kind of weird like a

148
00:08:44,130 --> 00:08:49,560
minute is sort of a big coincidence if

149
00:08:49,560 --> 00:08:57,720
you ask me so the bird says log things

150
00:08:57,720 --> 00:09:00,330
because it's really useful to look at

151
00:09:00,330 --> 00:09:02,520
the logs and be able to figure something

152
00:09:02,520 --> 00:09:05,850
out without just like sticking in print

153
00:09:05,850 --> 00:09:08,760
statements or something and also know

154
00:09:08,760 --> 00:09:11,310
how to use your tools so you can take

155
00:09:11,310 --> 00:09:13,080
your logs throw it through a thing I

156
00:09:13,080 --> 00:09:14,339
mean the command line and all that

157
00:09:14,339 --> 00:09:15,480
command line stuff took me a couple

158
00:09:15,480 --> 00:09:17,100
minutes to put together if I had to like

159
00:09:17,100 --> 00:09:18,720
write some program to do that would

160
00:09:18,720 --> 00:09:25,830
taking a lot longer all right so Susie's

161
00:09:25,830 --> 00:09:28,770
definitely having a problem none of us

162
00:09:28,770 --> 00:09:31,290
except for my co-workers to near had

163
00:09:31,290 --> 00:09:34,230
actually seen this on our computers and

164
00:09:34,230 --> 00:09:36,180
we'd been using for a couple of months

165
00:09:36,180 --> 00:09:38,010
before we released it to any customers

166
00:09:38,010 --> 00:09:43,709
so but sooner did say something that was

167
00:09:43,709 --> 00:09:47,970
interesting he has flaky internet so how

168
00:09:47,970 --> 00:09:49,829
can we simulate flaky internet and see

169
00:09:49,829 --> 00:09:51,350
if we can reproduce it

170
00:09:51,350 --> 00:09:58,139
I tried doing stuff with iptables about

171
00:09:58,139 --> 00:10:00,209
a half an hour I said screw it I

172
00:10:00,209 --> 00:10:04,470
unplugged my ethernet cable and I had

173
00:10:04,470 --> 00:10:14,430
flaky internet success unplug ethernet

174
00:10:14,430 --> 00:10:16,800
cable wait plug ethernet cable back in

175
00:10:16,800 --> 00:10:18,899
and it reproduced the issue it got into

176
00:10:18,899 --> 00:10:21,389
the reboot reboot loop and was doing all

177
00:10:21,389 --> 00:10:27,149
its stupid annoying stuff that I want it

178
00:10:27,149 --> 00:10:31,680
to do so the lesson here is just do

179
00:10:31,680 --> 00:10:35,009
something like you know at some point if

180
00:10:35,009 --> 00:10:36,240
there's something stupid you can do

181
00:10:36,240 --> 00:10:37,800
that's going to work when you're chasing

182
00:10:37,800 --> 00:10:40,500
a bug especially I mean you know maybe

183
00:10:40,500 --> 00:10:41,730
not when you're writing like nice

184
00:10:41,730 --> 00:10:44,879
production code but but if you're

185
00:10:44,879 --> 00:10:46,889
chasing around a bug like just do what

186
00:10:46,889 --> 00:10:48,149
you need to do to figure out what's

187
00:10:48,149 --> 00:10:51,120
going on and worry about later maybe

188
00:10:51,120 --> 00:10:56,459
also learn your tools later why is this

189
00:10:56,459 --> 00:11:00,480
thing working ok anyhow next to act

190
00:11:00,480 --> 00:11:02,129
trying to figure out what is actually

191
00:11:02,129 --> 00:11:04,769
going on so I looked in Chrome's

192
00:11:04,769 --> 00:11:09,019
developer tools you can read this right

193
00:11:09,019 --> 00:11:11,879
and so if you click on the network tab

194
00:11:11,879 --> 00:11:14,519
in Chrome's developer tools you can then

195
00:11:14,519 --> 00:11:17,250
click on the web sockets tab down there

196
00:11:17,250 --> 00:11:19,259
which will filter the list at the left

197
00:11:19,259 --> 00:11:22,079
for websites is a very intuitive UI that

198
00:11:22,079 --> 00:11:28,589
like that filters that and if you click

199
00:11:28,589 --> 00:11:31,410
on frames you can see each little bit of

200
00:11:31,410 --> 00:11:33,720
data that's transmitted through the web

201
00:11:33,720 --> 00:11:35,730
socket it's very useful for web sockets

202
00:11:35,730 --> 00:11:39,089
debugging I figured it out about like

203
00:11:39,089 --> 00:11:42,050
two days after I needed to figure it out

204
00:11:42,050 --> 00:11:46,500
but in retrospect very useful but

205
00:11:46,500 --> 00:11:48,329
there's no closed event that happens at

206
00:11:48,329 --> 00:11:50,939
the bottom so like it just the WebSocket

207
00:11:50,939 --> 00:11:54,560
just sort of stopped at some point

208
00:11:54,560 --> 00:12:01,160
so I decided okay I'm gonna figure out

209
00:12:01,160 --> 00:12:05,510
what's going on one way or another I got

210
00:12:05,510 --> 00:12:10,690
wire shot going I TCP dump hey hello

211
00:12:10,690 --> 00:12:18,040
where are you I guess I have to do this

212
00:12:18,040 --> 00:12:22,330
right so this is a Wireshark dump of one

213
00:12:22,330 --> 00:12:25,220
reboot loop that happened and if you

214
00:12:25,220 --> 00:12:27,770
look here this is the WebSocket being

215
00:12:27,770 --> 00:12:31,580
forcibly closed on the client side I

216
00:12:31,580 --> 00:12:33,560
happen to know that because I know the

217
00:12:33,560 --> 00:12:35,660
IP addresses but Wireshark is like a

218
00:12:35,660 --> 00:12:38,240
super awesome tool if something is going

219
00:12:38,240 --> 00:12:41,000
weird at the protocol level you know

220
00:12:41,000 --> 00:12:45,500
other idea what's going on the newest

221
00:12:45,500 --> 00:12:48,529
version can dissect WebSocket stuff so

222
00:12:48,529 --> 00:12:50,210
it'll tell you like everything that's

223
00:12:50,210 --> 00:12:52,580
being sent through here like in the

224
00:12:52,580 --> 00:12:54,710
payload it knows all this stuff so it's

225
00:12:54,710 --> 00:12:58,010
like five colon colon colon name visit

226
00:12:58,010 --> 00:12:59,990
blah blah like this is this is the data

227
00:12:59,990 --> 00:13:03,800
that's going across the protocol and its

228
00:13:03,800 --> 00:13:08,330
really really helpful for when you're

229
00:13:08,330 --> 00:13:10,100
logging and stuff is not enough and

230
00:13:10,100 --> 00:13:12,200
chrome developer tools not enough to

231
00:13:12,200 --> 00:13:15,890
figure out what's actually going on so

232
00:13:15,890 --> 00:13:18,130
check out Wireshark if you got some

233
00:13:18,130 --> 00:13:22,460
really weird protocol thing going on so

234
00:13:22,460 --> 00:13:24,620
anyhow I looked at that and basically

235
00:13:24,620 --> 00:13:26,990
what it told me is that the client side

236
00:13:26,990 --> 00:13:29,360
was what was closing the connection it

237
00:13:29,360 --> 00:13:31,280
was not the server dropping it or

238
00:13:31,280 --> 00:13:35,900
kicking anyone off so I'd at that point

239
00:13:35,900 --> 00:13:38,570
I that's like a small amount of useful

240
00:13:38,570 --> 00:13:40,400
information at least I don't have to

241
00:13:40,400 --> 00:13:41,980
mess around with the server side and

242
00:13:41,980 --> 00:13:44,030
thanks chrome for not telling me that

243
00:13:44,030 --> 00:13:45,260
the client side was the one that was

244
00:13:45,260 --> 00:13:49,880
classic section so I just decided to do

245
00:13:49,880 --> 00:13:51,589
what I call Shotgun debugging and stick

246
00:13:51,589 --> 00:13:53,150
break points everywhere in the socket

247
00:13:53,150 --> 00:13:54,320
i/o a source code that said close

248
00:13:54,320 --> 00:13:57,529
because you know at some point when I

249
00:13:57,529 --> 00:13:59,720
was being a called let me be able to

250
00:13:59,720 --> 00:14:03,350
trace it back and this actually worked

251
00:14:03,350 --> 00:14:05,580
it took me a long time to turn all the

252
00:14:05,580 --> 00:14:10,019
breakpoints off later it's probably bad

253
00:14:10,019 --> 00:14:14,700
with that and basically the issue was

254
00:14:14,700 --> 00:14:16,920
that the old web socket was being

255
00:14:16,920 --> 00:14:18,839
swapped out for a new web socket when

256
00:14:18,839 --> 00:14:21,570
like when the client reconnected and

257
00:14:21,570 --> 00:14:23,130
this was supposed to build in one at a

258
00:14:23,130 --> 00:14:27,470
time but revealed ijs is being broken so

259
00:14:27,470 --> 00:14:30,690
the old website there the old websockets

260
00:14:30,690 --> 00:14:32,579
heartbeat does not get properly cleaned

261
00:14:32,579 --> 00:14:38,880
up and the old heartbeat happens after a

262
00:14:38,880 --> 00:14:41,490
minute later the disconnect heartbeat

263
00:14:41,490 --> 00:14:45,990
gets executed so then it kills the

264
00:14:45,990 --> 00:14:48,269
WebSocket the new WebSocket that's there

265
00:14:48,269 --> 00:14:51,779
and then new web sockets like oh hey I

266
00:14:51,779 --> 00:14:53,810
got disconnected I better reconnect and

267
00:14:53,810 --> 00:14:57,060
then its heartbeat I thought doesn't get

268
00:14:57,060 --> 00:15:00,209
cleaned up so then every 60 seconds when

269
00:15:00,209 --> 00:15:02,360
the heartbeat time out finally times out

270
00:15:02,360 --> 00:15:05,480
kills the WebSocket starts over again so

271
00:15:05,480 --> 00:15:07,860
we actually had some cases where there

272
00:15:07,860 --> 00:15:12,329
were oh this happened to people had

273
00:15:12,329 --> 00:15:15,630
flaky enough internet that they they

274
00:15:15,630 --> 00:15:17,130
were getting disconnected four or five

275
00:15:17,130 --> 00:15:18,930
times per minute and so like there would

276
00:15:18,930 --> 00:15:20,790
be a timer at like four seconds eight

277
00:15:20,790 --> 00:15:24,630
seconds 30 seconds 42 seconds and it

278
00:15:24,630 --> 00:15:26,940
would just like keep killing over and

279
00:15:26,940 --> 00:15:32,760
over again those bats bad bad bug that

280
00:15:32,760 --> 00:15:39,020
was affecting quite a few users and so

281
00:15:39,020 --> 00:15:44,130
the fix was basically just I mean this

282
00:15:44,130 --> 00:15:47,040
is an absolutely terrible fix because

283
00:15:47,040 --> 00:15:49,320
like I didn't actually fix the heartbeat

284
00:15:49,320 --> 00:15:53,220
time out or whatever like basically I

285
00:15:53,220 --> 00:15:55,620
just wrapped the thing like that calls a

286
00:15:55,620 --> 00:15:57,300
heartbeat I'm out to make sure that's

287
00:15:57,300 --> 00:15:58,980
actually closing the socket of a

288
00:15:58,980 --> 00:16:04,079
heartbeat time I've got fired on and it

289
00:16:04,079 --> 00:16:12,390
worked

290
00:16:12,400 --> 00:16:19,240
are you kidding me

291
00:16:19,250 --> 00:16:29,500
just a second

292
00:16:29,510 --> 00:16:31,930
this is a cached or something I swear

293
00:16:31,930 --> 00:16:34,790
there is literally a graph in here and I

294
00:16:34,790 --> 00:16:52,160
saw it like ten Mohs

295
00:16:52,170 --> 00:16:54,760
yeah i'm gonna i'm gonna Wireshark this

296
00:16:54,760 --> 00:16:57,000
real quick I don't know I don't know why

297
00:16:57,000 --> 00:17:23,309
oh there's zero indexed

298
00:17:23,319 --> 00:17:26,429
yeah it's probably also flaky Internet

299
00:17:26,429 --> 00:17:31,000
hey did have another graph that was just

300
00:17:31,000 --> 00:17:33,429
like said graph and didn't like this

301
00:17:33,429 --> 00:17:37,149
should have been other graphs anyway so

302
00:17:37,149 --> 00:17:39,070
we deployed this and it was up around 30

303
00:17:39,070 --> 00:17:42,639
and it went down to like one so so it

304
00:17:42,639 --> 00:17:44,230
was really obvious when it happened

305
00:17:44,230 --> 00:17:46,299
because we had these these grafts here

306
00:17:46,299 --> 00:17:52,179
so my point about graphs is is a good

307
00:17:52,179 --> 00:17:58,549
one I think anyhow sorry about that

308
00:17:58,559 --> 00:18:01,149
basically I I came up with a few life

309
00:18:01,149 --> 00:18:03,820
lessons after this this two-month run

310
00:18:03,820 --> 00:18:07,330
around with this bug like I added a lot

311
00:18:07,330 --> 00:18:08,679
more graphs so I could see what was

312
00:18:08,679 --> 00:18:13,179
going on all the time I logged all sorts

313
00:18:13,179 --> 00:18:15,220
of added a bunch more logging about

314
00:18:15,220 --> 00:18:17,289
events that were going on so we could so

315
00:18:17,289 --> 00:18:22,299
we could trace future issues I have been

316
00:18:22,299 --> 00:18:25,720
much more willing to just pull my

317
00:18:25,720 --> 00:18:27,429
ethernet cable out instead of trying to

318
00:18:27,429 --> 00:18:30,179
figure out iptables when I'm trying to

319
00:18:30,179 --> 00:18:35,559
chase down a nasty bug i also meant to

320
00:18:35,559 --> 00:18:38,019
go back and figure out how how to

321
00:18:38,019 --> 00:18:42,419
actually do it in iptables maybe later

322
00:18:42,419 --> 00:18:48,639
but most importantly I learn to listen

323
00:18:48,639 --> 00:18:51,370
to my users more because they definitely

324
00:18:51,370 --> 00:18:55,679
is this a lot more than I do we're up to

325
00:18:55,679 --> 00:18:58,330
900 concurrent connections at peak now

326
00:18:58,330 --> 00:19:02,320
so this there's 900 more people than me

327
00:19:02,320 --> 00:19:22,190
who's using it and that's it

