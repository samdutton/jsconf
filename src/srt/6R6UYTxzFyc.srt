1
00:00:09,690 --> 00:00:12,910

Jeff it's one of those cool languages

2
00:00:12,910 --> 00:00:15,460
that sort of no one really noticed for a

3
00:00:15,460 --> 00:00:17,619
long time it was it was launched in 1995

4
00:00:17,619 --> 00:00:21,640
his Netscape to beta 3 that's almost 14

5
00:00:21,640 --> 00:00:23,470
years ago which is pretty astonishing

6
00:00:23,470 --> 00:00:25,300
really i sort of i don't think of

7
00:00:25,300 --> 00:00:27,369
javascript as being over a decade old

8
00:00:27,369 --> 00:00:31,390
but it is interestingly enough two

9
00:00:31,390 --> 00:00:34,120
months three months after javascript

10
00:00:34,120 --> 00:00:37,300
launched ruby launched as well the first

11
00:00:37,300 --> 00:00:40,929
public release in February of 1996 and I

12
00:00:40,929 --> 00:00:42,460
sort of remember at the time being a lot

13
00:00:42,460 --> 00:00:44,940
more interested in Ruby than JavaScript

14
00:00:44,940 --> 00:00:49,089
but that changed that's why I'm here um

15
00:00:49,089 --> 00:00:53,050
and we all know the history or I hope we

16
00:00:53,050 --> 00:00:54,579
all know the history the sort of naming

17
00:00:54,579 --> 00:00:58,089
kuffel inside netscape livewire all

18
00:00:58,089 --> 00:01:00,309
sorts of or live can something like that

19
00:01:00,309 --> 00:01:03,760
all sorts of naming problems um and the

20
00:01:03,760 --> 00:01:05,320
reason why the name JavaScript came

21
00:01:05,320 --> 00:01:07,510
about of courses because of the big Sun

22
00:01:07,510 --> 00:01:09,970
launch of java at the same time Java's

23
00:01:09,970 --> 00:01:13,630
appearance in the browser for my

24
00:01:13,630 --> 00:01:17,100
purposes that actually sort of suits me

25
00:01:17,100 --> 00:01:20,560
if you look at the history of javascript

26
00:01:20,560 --> 00:01:23,140
and how it's come to where it is i sort

27
00:01:23,140 --> 00:01:26,800
of equate it to point cast and RSS for

28
00:01:26,800 --> 00:01:28,450
those of you that don't know or don't

29
00:01:28,450 --> 00:01:30,670
remember point cast was this like crazy

30
00:01:30,670 --> 00:01:33,220
screensaver that took news syndication

31
00:01:33,220 --> 00:01:36,310
feeds and displayed them as it turned

32
00:01:36,310 --> 00:01:38,250
out it wasn't a very good business

33
00:01:38,250 --> 00:01:40,780
displaying advertising while someone's

34
00:01:40,780 --> 00:01:42,820
away from their computer doesn't attract

35
00:01:42,820 --> 00:01:45,790
that many advertisers but um but here's

36
00:01:45,790 --> 00:01:49,120
the thing it introduced the idea of news

37
00:01:49,120 --> 00:01:51,400
syndication it sort of got us thinking

38
00:01:51,400 --> 00:01:53,950
about that and RSS came along and won it

39
00:01:53,950 --> 00:01:56,140
was an open standard the web decided

40
00:01:56,140 --> 00:01:57,880
that that was the way it should be and I

41
00:01:57,880 --> 00:01:59,170
sort of see the same thing with

42
00:01:59,170 --> 00:02:01,420
JavaScript and Java the the web has

43
00:02:01,420 --> 00:02:07,830
decided that javascript is the answer um

44
00:02:07,830 --> 00:02:09,119
so

45
00:02:09,119 --> 00:02:11,640
if we think about you know what

46
00:02:11,640 --> 00:02:13,440
JavaScript's role was for a long time

47
00:02:13,440 --> 00:02:15,780
you know had a single domain it was a

48
00:02:15,780 --> 00:02:19,739
web page that was it and and that was it

49
00:02:19,739 --> 00:02:22,220
you know Java had the dancing Duke and

50
00:02:22,220 --> 00:02:24,780
JavaScript gave us mouse overs and

51
00:02:24,780 --> 00:02:26,940
pop-ups that's that's what we wanted at

52
00:02:26,940 --> 00:02:29,670
the time and that didn't really change

53
00:02:29,670 --> 00:02:31,409
until nineteen ninety nine when

54
00:02:31,409 --> 00:02:34,019
xmlhttprequest came along Thank You

55
00:02:34,019 --> 00:02:38,099
Microsoft every now and again um but no

56
00:02:38,099 --> 00:02:42,950
one really noticed until gmail and

57
00:02:42,950 --> 00:02:46,920
google maps of course but around that

58
00:02:46,920 --> 00:02:48,599
time I've been working with JavaScript

59
00:02:48,599 --> 00:02:51,359
on the server or not necessarily the

60
00:02:51,359 --> 00:02:53,129
server but not in a browser for quite a

61
00:02:53,129 --> 00:02:54,690
while I'd been working for a company

62
00:02:54,690 --> 00:02:56,370
called photon go in London we've been

63
00:02:56,370 --> 00:02:58,620
building up where I'd been building sort

64
00:02:58,620 --> 00:03:01,620
of workflow tools to join together rest

65
00:03:01,620 --> 00:03:03,989
services and think about workflow tools

66
00:03:03,989 --> 00:03:06,359
is workflows lovely until something goes

67
00:03:06,359 --> 00:03:08,220
wrong and then all of a sudden you need

68
00:03:08,220 --> 00:03:10,440
to make a decision and you can't really

69
00:03:10,440 --> 00:03:11,700
do that without some sort of

70
00:03:11,700 --> 00:03:13,950
decision-making tool a programming

71
00:03:13,950 --> 00:03:15,630
language and so I was embedding

72
00:03:15,630 --> 00:03:17,549
javascript in all sorts of stuff and

73
00:03:17,549 --> 00:03:20,099
then a little bit later on for tango is

74
00:03:20,099 --> 00:03:21,840
looking for a new product and we launch

75
00:03:21,840 --> 00:03:25,230
this thing called Zemke it was probably

76
00:03:25,230 --> 00:03:27,150
the first platform as a service out

77
00:03:27,150 --> 00:03:31,590
there way before anyone was ready for it

78
00:03:31,590 --> 00:03:33,419
and I spent a lot of the next couple of

79
00:03:33,419 --> 00:03:34,980
years talking about how JavaScript on

80
00:03:34,980 --> 00:03:36,690
the server side made a lot of sense and

81
00:03:36,690 --> 00:03:38,239
everyone looked at me as if I was crazy

82
00:03:38,239 --> 00:03:42,780
and and that's changed so that I called

83
00:03:42,780 --> 00:03:45,030
this slight rise and fall it's actually

84
00:03:45,030 --> 00:03:48,660
rise and fall and rise again just don't

85
00:03:48,660 --> 00:03:54,989
have that much room so in them in 2007

86
00:03:54,989 --> 00:03:58,260
Zemke had sort of vanished I moved back

87
00:03:58,260 --> 00:04:01,109
to Canada from London as tired of London

88
00:04:01,109 --> 00:04:03,840
really it gets tiresome big city and

89
00:04:03,840 --> 00:04:05,370
anyway I'd moved to my mountain retreat

90
00:04:05,370 --> 00:04:08,040
and I found myself with some time on my

91
00:04:08,040 --> 00:04:10,919
hands and I had a whole bunch of ideas

92
00:04:10,919 --> 00:04:13,410
and I wanted to implement them sighs you

93
00:04:13,410 --> 00:04:14,579
know I did what everyone else was doing

94
00:04:14,579 --> 00:04:16,889
at the time is doing now for the large

95
00:04:16,889 --> 00:04:18,630
part and I picked up a copy of Ruby and

96
00:04:18,630 --> 00:04:20,459
you know browse through the rail you

97
00:04:20,459 --> 00:04:22,180
know the rails documentation

98
00:04:22,180 --> 00:04:24,280
started to hack the ideas together what

99
00:04:24,280 --> 00:04:25,810
I found was it was actually really

100
00:04:25,810 --> 00:04:29,830
painful you know for for everything that

101
00:04:29,830 --> 00:04:31,600
everyone says about Ruby illa it's

102
00:04:31,600 --> 00:04:33,460
wonderful blah blah blah but you know I

103
00:04:33,460 --> 00:04:35,830
actually found it really painful and one

104
00:04:35,830 --> 00:04:37,720
of the reasons i found it painful was

105
00:04:37,720 --> 00:04:40,330
because I've come from this world where

106
00:04:40,330 --> 00:04:42,130
I could write almost everything I wanted

107
00:04:42,130 --> 00:04:46,509
in JavaScript um so while I was while I

108
00:04:46,509 --> 00:04:48,430
was trying to hack these ideas together

109
00:04:48,430 --> 00:04:51,250
i was using get not yet had sort of come

110
00:04:51,250 --> 00:04:53,350
up at the same time and I've sort of you

111
00:04:53,350 --> 00:04:55,720
know out of that those experiments I

112
00:04:55,720 --> 00:04:57,460
realized that actually get was what i

113
00:04:57,460 --> 00:04:59,470
wanted to deploy things into the cloud

114
00:04:59,470 --> 00:05:01,810
it was such a wonderful tool i could

115
00:05:01,810 --> 00:05:05,680
just push things um and that gave rise

116
00:05:05,680 --> 00:05:08,800
to a company I started with a colleague

117
00:05:08,800 --> 00:05:11,380
who's here Brian called reasonably smart

118
00:05:11,380 --> 00:05:13,870
in June of last year which was

119
00:05:13,870 --> 00:05:16,180
JavaScript on the server side a managed

120
00:05:16,180 --> 00:05:18,490
platform-as-a-service you deploy with

121
00:05:18,490 --> 00:05:21,250
get but to understand why this is timely

122
00:05:21,250 --> 00:05:22,750
you really have to understand why a

123
00:05:22,750 --> 00:05:24,849
platform as a service is a timely idea

124
00:05:24,849 --> 00:05:26,770
and it's about economics and

125
00:05:26,770 --> 00:05:30,760
commoditization that line was supposed

126
00:05:30,760 --> 00:05:34,180
to be earlier so um this my former

127
00:05:34,180 --> 00:05:36,729
colleague of mine Simon wardley he

128
00:05:36,729 --> 00:05:38,849
actually does a really great talk about

129
00:05:38,849 --> 00:05:41,740
these ideas about commoditization about

130
00:05:41,740 --> 00:05:43,120
economics if you haven't had the

131
00:05:43,120 --> 00:05:46,060
opportunity to see him speak do so it's

132
00:05:46,060 --> 00:05:49,030
well worth it and if you don't ever get

133
00:05:49,030 --> 00:05:50,560
the chance his talks are all over the

134
00:05:50,560 --> 00:05:56,699
web it's easy to find Simon wortley so

135
00:05:56,699 --> 00:05:59,949
one of Simon's big themes in his talk is

136
00:05:59,949 --> 00:06:01,930
pointing out that electricity was once

137
00:06:01,930 --> 00:06:04,840
really hot technology like it was it was

138
00:06:04,840 --> 00:06:06,190
a competitive advantage to have

139
00:06:06,190 --> 00:06:09,220
electricity in your factory but these

140
00:06:09,220 --> 00:06:11,139
days we don't really think about it we

141
00:06:11,139 --> 00:06:12,940
have wall sockets we plug stuff in

142
00:06:12,940 --> 00:06:14,979
electricity comes out and we don't care

143
00:06:14,979 --> 00:06:16,990
where it comes from or why it comes from

144
00:06:16,990 --> 00:06:18,699
there or how they generate it for the

145
00:06:18,699 --> 00:06:20,320
most part i mean there's a slight

146
00:06:20,320 --> 00:06:21,970
movement now to want green electricity

147
00:06:21,970 --> 00:06:24,130
but let's face it when we plug something

148
00:06:24,130 --> 00:06:26,199
into the wall all we care about is that

149
00:06:26,199 --> 00:06:27,880
electricity comes out in the same format

150
00:06:27,880 --> 00:06:30,599
it wasn't always the case as i mentioned

151
00:06:30,599 --> 00:06:34,360
the place where electricity is a public

152
00:06:34,360 --> 00:06:35,750
utility first started

153
00:06:35,750 --> 00:06:37,580
was this little town called Godalming in

154
00:06:37,580 --> 00:06:40,310
Surrey in the UK it's tiny little talent

155
00:06:40,310 --> 00:06:41,900
to drive through it these days you

156
00:06:41,900 --> 00:06:43,910
really wouldn't think that it was sort

157
00:06:43,910 --> 00:06:48,500
of the center of the world in 1881 but

158
00:06:48,500 --> 00:06:52,730
it was a company started providing

159
00:06:52,730 --> 00:06:55,880
electricity to the entire town and it

160
00:06:55,880 --> 00:06:57,530
was it was fantastic they had

161
00:06:57,530 --> 00:07:00,470
streetlights no more gas is awesome and

162
00:07:00,470 --> 00:07:04,100
then they had a big flood and in 1884

163
00:07:04,100 --> 00:07:05,900
they basically bailed and no electricity

164
00:07:05,900 --> 00:07:09,620
came back to the dorm until 1904 but in

165
00:07:09,620 --> 00:07:12,290
the meantime what was happening was the

166
00:07:12,290 --> 00:07:13,970
sort of rise of all these public

167
00:07:13,970 --> 00:07:16,190
utilities public utility power

168
00:07:16,190 --> 00:07:17,810
generators they were popping up left

169
00:07:17,810 --> 00:07:20,150
right and center and by 1926 there was

170
00:07:20,150 --> 00:07:24,169
600 of them in the UK thing was they all

171
00:07:24,169 --> 00:07:25,610
operated on different standards

172
00:07:25,610 --> 00:07:28,280
different frequencies ac/dc you name it

173
00:07:28,280 --> 00:07:31,820
and in 1926 that what changed was the

174
00:07:31,820 --> 00:07:33,530
Central Electricity Board was set up in

175
00:07:33,530 --> 00:07:35,360
the UK it fixed all of that it's

176
00:07:35,360 --> 00:07:37,040
standardized what the output should be

177
00:07:37,040 --> 00:07:40,070
it it standardized how you would get

178
00:07:40,070 --> 00:07:41,780
electricity out of a wall it's

179
00:07:41,780 --> 00:07:46,729
standardized AC / DC etc etc um but the

180
00:07:46,729 --> 00:07:49,100
thing is this you know factories up

181
00:07:49,100 --> 00:07:50,960
until this point hadn't really changed

182
00:07:50,960 --> 00:07:53,240
for years they'd been generating all the

183
00:07:53,240 --> 00:07:55,490
sort of motion they needed with steam

184
00:07:55,490 --> 00:07:57,590
engines and these great big steam

185
00:07:57,590 --> 00:08:00,169
engines had engineers on site they had

186
00:08:00,169 --> 00:08:02,030
their fuel on site you shovel coal into

187
00:08:02,030 --> 00:08:03,770
a burner which heated up the water which

188
00:08:03,770 --> 00:08:05,960
spun a flywheel which drove a belt which

189
00:08:05,960 --> 00:08:07,340
drove all the machines in the factory

190
00:08:07,340 --> 00:08:09,800
and the steam engine had really

191
00:08:09,800 --> 00:08:12,260
revolutionized industry have changed it

192
00:08:12,260 --> 00:08:13,940
completely in much the same way that

193
00:08:13,940 --> 00:08:16,850
sort of having a server changed the way

194
00:08:16,850 --> 00:08:18,890
we do computing rather than going to a

195
00:08:18,890 --> 00:08:22,700
mainframe um and the sort of non

196
00:08:22,700 --> 00:08:25,280
mechanized factory had vanished they had

197
00:08:25,280 --> 00:08:27,530
all been sort of you know competed out

198
00:08:27,530 --> 00:08:31,790
of existence the thing was when the

199
00:08:31,790 --> 00:08:33,380
steam engine broke down the engineers

200
00:08:33,380 --> 00:08:35,930
who were on site all of a sudden had to

201
00:08:35,930 --> 00:08:38,300
get their stuff together you know they

202
00:08:38,300 --> 00:08:39,789
took the blame they pulled an allnighter

203
00:08:39,789 --> 00:08:42,200
sorted it out factory was running the

204
00:08:42,200 --> 00:08:44,600
next morning it sounds familiar doesn't

205
00:08:44,600 --> 00:08:47,660
it yeah um

206
00:08:47,670 --> 00:08:50,670
we've all sort of done those as

207
00:08:50,670 --> 00:08:53,740
programmers as engineers we've all had

208
00:08:53,740 --> 00:08:55,450
the situation where something's gone

209
00:08:55,450 --> 00:08:57,130
horrendously wrong and we need to sort

210
00:08:57,130 --> 00:09:01,990
of out and and that's something that's

211
00:09:01,990 --> 00:09:03,430
starting to change now and that's

212
00:09:03,430 --> 00:09:05,440
something that starts to change with a

213
00:09:05,440 --> 00:09:07,720
platform as a service just as when

214
00:09:07,720 --> 00:09:09,430
electricity from a public utility

215
00:09:09,430 --> 00:09:11,530
started changing factories from the

216
00:09:11,530 --> 00:09:13,180
steam engine to machines that could be

217
00:09:13,180 --> 00:09:14,620
bought off the shelf and plugged into a

218
00:09:14,620 --> 00:09:20,580
wall or the proverbial shelf the the

219
00:09:20,580 --> 00:09:22,810
platforms of service is changing how we

220
00:09:22,810 --> 00:09:26,770
deploy and manage our software no more

221
00:09:26,770 --> 00:09:29,320
engineers on site no more steam engines

222
00:09:29,320 --> 00:09:32,260
on site and cloud really means the same

223
00:09:32,260 --> 00:09:34,840
thing about computing we just don't have

224
00:09:34,840 --> 00:09:38,440
to shovel coal anymore now often people

225
00:09:38,440 --> 00:09:40,690
think cloud they think things like ec2

226
00:09:40,690 --> 00:09:42,670
and that's it you know that's probably

227
00:09:42,670 --> 00:09:44,440
one of the first things that pops into

228
00:09:44,440 --> 00:09:46,090
people's head but that still means

229
00:09:46,090 --> 00:09:49,770
managing machines and we can do better

230
00:09:49,770 --> 00:09:52,840
and what we can do is platform as a

231
00:09:52,840 --> 00:09:55,780
service we don't want to and shouldn't

232
00:09:55,780 --> 00:09:58,420
have to want to to met worried about

233
00:09:58,420 --> 00:10:00,790
scale or managing individual machines or

234
00:10:00,790 --> 00:10:03,100
patching security or you know figuring

235
00:10:03,100 --> 00:10:04,870
out how many database servers or app

236
00:10:04,870 --> 00:10:06,610
servers we need and then load balancing

237
00:10:06,610 --> 00:10:08,590
all of those things those are those are

238
00:10:08,590 --> 00:10:10,390
things that give us no competitive

239
00:10:10,390 --> 00:10:13,090
advantage whatsoever we you know

240
00:10:13,090 --> 00:10:14,470
everyone has to do it there's no point

241
00:10:14,470 --> 00:10:16,840
of us doing it and with things like easy

242
00:10:16,840 --> 00:10:19,090
to you're still having to do that you're

243
00:10:19,090 --> 00:10:20,860
still having to consider that you're

244
00:10:20,860 --> 00:10:21,940
still having to make those decisions

245
00:10:21,940 --> 00:10:23,980
spin up machines tear them back down to

246
00:10:23,980 --> 00:10:27,690
you so with the platforms of service and

247
00:10:27,690 --> 00:10:30,040
specifically with a smart platform you

248
00:10:30,040 --> 00:10:31,630
write your code you push it to the cloud

249
00:10:31,630 --> 00:10:35,140
with get and it just runs you pay for

250
00:10:35,140 --> 00:10:36,850
only only for what you use and I don't

251
00:10:36,850 --> 00:10:39,220
mean like a small subscription such as

252
00:10:39,220 --> 00:10:41,980
ec2 I mean genuinely when something's

253
00:10:41,980 --> 00:10:44,020
used you pay for it and when it's not

254
00:10:44,020 --> 00:10:47,440
you don't metered billing much like

255
00:10:47,440 --> 00:10:51,100
electricity so I'm not suggesting that

256
00:10:51,100 --> 00:10:53,560
there is no place for having a server or

257
00:10:53,560 --> 00:10:55,870
data center of your own what I'm saying

258
00:10:55,870 --> 00:10:57,310
is that they're going to slowly

259
00:10:57,310 --> 00:10:59,920
disappear and maybe they'll never vanish

260
00:10:59,920 --> 00:11:01,779
I'm sure they'll never vanish but for

261
00:11:01,779 --> 00:11:03,430
the majority of us we don't need to be

262
00:11:03,430 --> 00:11:07,260
doing that stuff it gives us no benefit

263
00:11:07,260 --> 00:11:10,360
so really it's a matter of economics

264
00:11:10,360 --> 00:11:12,250
it's an inevitability whether you like

265
00:11:12,250 --> 00:11:13,660
it or not if you're managing your

266
00:11:13,660 --> 00:11:15,639
servers for the most part it's costing

267
00:11:15,639 --> 00:11:17,110
you money that you just don't need to

268
00:11:17,110 --> 00:11:22,149
spend but why javascript coming back to

269
00:11:22,149 --> 00:11:24,459
the theme of the day well to me it just

270
00:11:24,459 --> 00:11:28,060
sort of makes sense let's look at Java

271
00:11:28,060 --> 00:11:29,949
scripts sort of common place in the

272
00:11:29,949 --> 00:11:31,779
world it's in the browser has the Dom

273
00:11:31,779 --> 00:11:34,240
it's got great libraries for the browser

274
00:11:34,240 --> 00:11:37,420
like jQuery and prototype and all dojo

275
00:11:37,420 --> 00:11:41,139
all those sort of things um hope I got

276
00:11:41,139 --> 00:11:44,380
everyone there um but here's the thing

277
00:11:44,380 --> 00:11:46,690
the Dom sucks we all know it that's why

278
00:11:46,690 --> 00:11:48,730
we have these libraries but it doesn't

279
00:11:48,730 --> 00:11:50,260
have to be on the server and in fact

280
00:11:50,260 --> 00:11:52,180
it's not on the server the DOM is just

281
00:11:52,180 --> 00:11:54,519
something that the Mozilla engineers and

282
00:11:54,519 --> 00:11:57,130
the IE engineers and the Safari guys

283
00:11:57,130 --> 00:12:01,180
exposed into the JavaScript space um in

284
00:12:01,180 --> 00:12:03,220
and of itself javascript is simple and

285
00:12:03,220 --> 00:12:05,920
it's beautiful and and I don't need to

286
00:12:05,920 --> 00:12:07,449
tell you how I hope we all know

287
00:12:07,449 --> 00:12:10,959
JavaScript that's why we're here and the

288
00:12:10,959 --> 00:12:12,850
strange thing is everyone else knows

289
00:12:12,850 --> 00:12:15,640
that to everyone not in this room almost

290
00:12:15,640 --> 00:12:17,620
every internal IT shop these days has

291
00:12:17,620 --> 00:12:19,690
given up the sort of desktop app as a

292
00:12:19,690 --> 00:12:21,100
paradigm what they're doing is they're

293
00:12:21,100 --> 00:12:22,959
writing web applications if they're

294
00:12:22,959 --> 00:12:24,699
writing web applications then chances

295
00:12:24,699 --> 00:12:26,680
are in fact I'd almost say it's

296
00:12:26,680 --> 00:12:28,630
guaranteed that they've got people in

297
00:12:28,630 --> 00:12:32,980
that shop that no JavaScript and if you

298
00:12:32,980 --> 00:12:34,480
think about JavaScript on the server it

299
00:12:34,480 --> 00:12:35,860
means you're not context switching all

300
00:12:35,860 --> 00:12:37,240
the time you're not switching between

301
00:12:37,240 --> 00:12:39,430
pearl or Python or Ruby and JavaScript

302
00:12:39,430 --> 00:12:41,709
you're just going back and forth between

303
00:12:41,709 --> 00:12:43,329
the server and the client and it doesn't

304
00:12:43,329 --> 00:12:44,800
really matter and that gives you code

305
00:12:44,800 --> 00:12:48,040
reuse as well so there are two others

306
00:12:48,040 --> 00:12:49,930
sneaky reasons why Java scripts going to

307
00:12:49,930 --> 00:12:53,440
win the first is that it's where the

308
00:12:53,440 --> 00:12:56,410
money is trace monkey and v8 and space

309
00:12:56,410 --> 00:12:58,240
needle or squirrelfish or whatever the

310
00:12:58,240 --> 00:13:02,440
call in it there's there's loads of

311
00:13:02,440 --> 00:13:04,209
money being spent on making these things

312
00:13:04,209 --> 00:13:06,639
really really fast and I'd say if you

313
00:13:06,639 --> 00:13:09,880
look at ruby in the end python perl and

314
00:13:09,880 --> 00:13:12,640
all the other dynamic languages over the

315
00:13:12,640 --> 00:13:13,300
sort of

316
00:13:13,300 --> 00:13:15,640
10-15 years of their development they've

317
00:13:15,640 --> 00:13:18,029
had less time and focus spent on

318
00:13:18,029 --> 00:13:21,399
actually pushing the boundaries of what

319
00:13:21,399 --> 00:13:22,620
you can do with a dynamic language

320
00:13:22,620 --> 00:13:24,940
compared to JavaScript which has only

321
00:13:24,940 --> 00:13:26,709
really had that time and energy and

322
00:13:26,709 --> 00:13:29,110
focus in the last two or three years

323
00:13:29,110 --> 00:13:33,430
let's say it's really incredible how far

324
00:13:33,430 --> 00:13:35,200
JavaScript has come in a really short

325
00:13:35,200 --> 00:13:38,589
time um there's another sneaky reason

326
00:13:38,589 --> 00:13:40,420
from a platform provider perspective and

327
00:13:40,420 --> 00:13:43,029
that is that JavaScript does nothing out

328
00:13:43,029 --> 00:13:44,920
of the box there's no I of there's no I

329
00:13:44,920 --> 00:13:47,110
pc there's no threads there's no process

330
00:13:47,110 --> 00:13:50,019
management it does nothing it's

331
00:13:50,019 --> 00:13:52,300
turing-complete but can't do much with

332
00:13:52,300 --> 00:13:54,339
it unless you tell it it can do

333
00:13:54,339 --> 00:13:57,459
something so as an embed of the language

334
00:13:57,459 --> 00:14:00,279
in environment where I'm not vetting all

335
00:14:00,279 --> 00:14:02,170
the code I can pretty much guarantee

336
00:14:02,170 --> 00:14:04,870
that you can't do anything bad so

337
00:14:04,870 --> 00:14:06,220
there's a lot of good reasons for

338
00:14:06,220 --> 00:14:10,480
javascript in a platform as a service so

339
00:14:10,480 --> 00:14:13,180
you know I am here from joint they're

340
00:14:13,180 --> 00:14:15,399
paying for me to be here so let's talk

341
00:14:15,399 --> 00:14:17,399
about the smart platform specifically

342
00:14:17,399 --> 00:14:20,200
its utility build like I said you pay

343
00:14:20,200 --> 00:14:22,930
only for what you use you build your app

344
00:14:22,930 --> 00:14:24,970
you deploy it to the cloud with get and

345
00:14:24,970 --> 00:14:28,270
that's it the key point and the

346
00:14:28,270 --> 00:14:29,920
differentiating point I think is that

347
00:14:29,920 --> 00:14:32,260
you can move away if you want the entire

348
00:14:32,260 --> 00:14:34,720
stack is open-source the platform's open

349
00:14:34,720 --> 00:14:36,760
source there's no lock in if you don't

350
00:14:36,760 --> 00:14:38,440
like what we're doing or how we're doing

351
00:14:38,440 --> 00:14:40,450
it you can take it and run it on your

352
00:14:40,450 --> 00:14:42,100
own machines we think we'll do a better

353
00:14:42,100 --> 00:14:45,850
job than you that's all we're saying so

354
00:14:45,850 --> 00:14:49,360
in London there's a term that we use to

355
00:14:49,360 --> 00:14:51,940
describe all the sort of stuff that you

356
00:14:51,940 --> 00:14:53,589
have to do to run a web app it's called

357
00:14:53,589 --> 00:14:58,000
the action and the idea is that for all

358
00:14:58,000 --> 00:14:59,649
you know you wake up in the morning you

359
00:14:59,649 --> 00:15:01,720
want a cup of coffee you are you find

360
00:15:01,720 --> 00:15:03,850
you don't have any milk so you go to the

361
00:15:03,850 --> 00:15:05,350
store doesn't get some milk and you find

362
00:15:05,350 --> 00:15:06,640
you don't have any money so you go to

363
00:15:06,640 --> 00:15:08,620
the ATM you put your car in you get the

364
00:15:08,620 --> 00:15:10,480
money out your back to the store and you

365
00:15:10,480 --> 00:15:12,459
go get and get the milk you take it back

366
00:15:12,459 --> 00:15:13,779
home you make you a cup of coffee and

367
00:15:13,779 --> 00:15:15,790
really all that other stuff other than

368
00:15:15,790 --> 00:15:17,589
making the cup of coffee for the good it

369
00:15:17,589 --> 00:15:18,699
was doing you you might as well have

370
00:15:18,699 --> 00:15:19,990
been shaving it yak that's where the

371
00:15:19,990 --> 00:15:22,180
phrase comes from but that's how I think

372
00:15:22,180 --> 00:15:25,120
of what we're doing with a platform

373
00:15:25,120 --> 00:15:26,830
we're taking away the need for you to

374
00:15:26,830 --> 00:15:29,470
worry about all those all the Yak

375
00:15:29,470 --> 00:15:31,300
shaving I was gonna say something really

376
00:15:31,300 --> 00:15:34,420
rude there yeah we're just we're just

377
00:15:34,420 --> 00:15:35,770
meaning we're just making it so you

378
00:15:35,770 --> 00:15:37,540
don't need to worry about it so you know

379
00:15:37,540 --> 00:15:39,730
like said adding removing machines load

380
00:15:39,730 --> 00:15:43,290
balancing data storage multi data center

381
00:15:43,290 --> 00:15:45,970
having to worry about backups caching

382
00:15:45,970 --> 00:15:48,160
data storage all that sort of stuff it

383
00:15:48,160 --> 00:15:49,390
just does the right thing without

384
00:15:49,390 --> 00:15:51,070
developer interaction and it's because

385
00:15:51,070 --> 00:15:53,680
we can abstract away behind what's going

386
00:15:53,680 --> 00:15:55,750
on inside the jig the JavaScript virtual

387
00:15:55,750 --> 00:15:59,710
machine nearly set JVM there um this

388
00:15:59,710 --> 00:16:01,360
slide isn't all that interesting but it

389
00:16:01,360 --> 00:16:02,860
does let me bring up a point that I

390
00:16:02,860 --> 00:16:05,470
actually saw someone Twitter or tweet or

391
00:16:05,470 --> 00:16:08,710
whatever the verb is this week yesterday

392
00:16:08,710 --> 00:16:11,890
after the axiom stack talk which was

393
00:16:11,890 --> 00:16:14,560
about performance and someone saying you

394
00:16:14,560 --> 00:16:16,690
know really is JavaScript faster than

395
00:16:16,690 --> 00:16:20,710
PHP you know blah blah blah um my answer

396
00:16:20,710 --> 00:16:24,460
is yes and if you really if you really

397
00:16:24,460 --> 00:16:26,620
find a way that it isn't wait a couple

398
00:16:26,620 --> 00:16:28,750
of weeks and it will be faster it's just

399
00:16:28,750 --> 00:16:31,360
going to happen all that all that money

400
00:16:31,360 --> 00:16:34,779
being spent means yes so as a absolute

401
00:16:34,779 --> 00:16:38,020
statistic with JavaScript contexts in

402
00:16:38,020 --> 00:16:42,760
spider monkey I can create 797 797 of

403
00:16:42,760 --> 00:16:45,279
them a second and that's in serial a

404
00:16:45,279 --> 00:16:47,260
single thread spinning them up and

405
00:16:47,260 --> 00:16:50,040
tearing them down so yes it's fast

406
00:16:50,040 --> 00:16:52,990
anyway so here's the simplest piece of

407
00:16:52,990 --> 00:16:55,150
software that runs on the smart cloud

408
00:16:55,150 --> 00:16:57,580
it's really simple it's going to spit

409
00:16:57,580 --> 00:16:59,230
out hello world to the requesting

410
00:16:59,230 --> 00:17:03,910
browser not much to it really I think we

411
00:17:03,910 --> 00:17:06,240
can all understand what it's doing there

412
00:17:06,240 --> 00:17:08,679
it's a function called main it takes a

413
00:17:08,679 --> 00:17:10,600
request object it returns the response

414
00:17:10,600 --> 00:17:14,920
that's it um here's another version this

415
00:17:14,920 --> 00:17:17,709
is just demonstrating efore xe4 x is

416
00:17:17,709 --> 00:17:21,429
super cool it makes XML first class

417
00:17:21,429 --> 00:17:23,770
objects if you don't know inside

418
00:17:23,770 --> 00:17:26,920
JavaScript and then given that object

419
00:17:26,920 --> 00:17:28,150
you can actually walk through the tree

420
00:17:28,150 --> 00:17:31,000
it's awesome it has its problems as well

421
00:17:31,000 --> 00:17:33,400
some weird things but for the most part

422
00:17:33,400 --> 00:17:37,150
it's great and here's a slightly more

423
00:17:37,150 --> 00:17:38,080
complex

424
00:17:38,080 --> 00:17:42,280
main function it's returning more a more

425
00:17:42,280 --> 00:17:45,500
specific HTTP response you can see how

426
00:17:45,500 --> 00:17:47,210
you could build up almost any response

427
00:17:47,210 --> 00:17:48,980
you at one the really interesting thing

428
00:17:48,980 --> 00:17:51,110
about all of those three functions is

429
00:17:51,110 --> 00:17:54,080
that they scale you can make one request

430
00:17:54,080 --> 00:17:56,240
or you can make 100 million requests

431
00:17:56,240 --> 00:17:58,370
through the smart platform and it will

432
00:17:58,370 --> 00:17:59,960
scale and you've done nothing to make it

433
00:17:59,960 --> 00:18:03,170
scale all that effort is taken place

434
00:18:03,170 --> 00:18:05,270
beyond the scenes now yes I know that

435
00:18:05,270 --> 00:18:07,790
you could write a PHP app or a ruby app

436
00:18:07,790 --> 00:18:10,460
or Python or whatever app that scaled

437
00:18:10,460 --> 00:18:12,740
because it just doesn't do that much but

438
00:18:12,740 --> 00:18:14,450
you'd have to worry about a number of

439
00:18:14,450 --> 00:18:16,340
machines you'd have to worry about all

440
00:18:16,340 --> 00:18:18,200
the load balancing and stuff that goes

441
00:18:18,200 --> 00:18:19,700
on with that with a smart platform you

442
00:18:19,700 --> 00:18:22,580
don't it doesn't matter one hip or a

443
00:18:22,580 --> 00:18:26,020
billion hits a second it'll scale so

444
00:18:26,020 --> 00:18:28,640
this is the contents of the request

445
00:18:28,640 --> 00:18:32,030
object it's got all the stuff that you'd

446
00:18:32,030 --> 00:18:35,630
find an HTTP request you can dig out and

447
00:18:35,630 --> 00:18:37,610
I've emitted the headers because they

448
00:18:37,610 --> 00:18:39,740
kind of took up all the slide and tiny

449
00:18:39,740 --> 00:18:44,810
font bad so the the body and the content

450
00:18:44,810 --> 00:18:48,500
or in there the query string pretty much

451
00:18:48,500 --> 00:18:52,610
everything the URI of course the the

452
00:18:52,610 --> 00:18:54,140
type is an interesting one we're going

453
00:18:54,140 --> 00:18:57,650
to make it so that you can request make

454
00:18:57,650 --> 00:18:59,660
requests into the platform through XMPP

455
00:18:59,660 --> 00:19:02,390
or through smtp or almost anything

456
00:19:02,390 --> 00:19:04,040
basically if we can figure out a way to

457
00:19:04,040 --> 00:19:06,110
hook it up we'll send a request in and

458
00:19:06,110 --> 00:19:08,350
you'll be able to serve stuff from it

459
00:19:08,350 --> 00:19:11,570
but the question probably all asking

460
00:19:11,570 --> 00:19:13,340
yourself is how do you make stuff like

461
00:19:13,340 --> 00:19:16,550
data storage and all that work well we

462
00:19:16,550 --> 00:19:19,150
like to said we extend JavaScript so a

463
00:19:19,150 --> 00:19:22,970
couple of examples here readwrite search

464
00:19:22,970 --> 00:19:27,230
remove you don't have a huge API into

465
00:19:27,230 --> 00:19:29,360
the data storage system but if you're

466
00:19:29,360 --> 00:19:30,740
working with things like active record

467
00:19:30,740 --> 00:19:33,620
you don't have that big of an API into

468
00:19:33,620 --> 00:19:35,480
that either it's abstracted away from

469
00:19:35,480 --> 00:19:37,580
you so this really lets you take

470
00:19:37,580 --> 00:19:39,800
advantage of the fact that we can

471
00:19:39,800 --> 00:19:43,160
introspect objects we can we control the

472
00:19:43,160 --> 00:19:46,430
line between JavaScript space and the

473
00:19:46,430 --> 00:19:50,300
and the actual data storage layer pretty

474
00:19:50,300 --> 00:19:51,590
completely we can

475
00:19:51,590 --> 00:19:54,020
make decisions as to how to store it and

476
00:19:54,020 --> 00:19:56,120
why to store it in a certain way and you

477
00:19:56,120 --> 00:19:57,260
know how you're going to query it later

478
00:19:57,260 --> 00:19:59,090
on all that sort of stuff we can

479
00:19:59,090 --> 00:20:01,309
introspect on the wire and take care of

480
00:20:01,309 --> 00:20:04,640
it for you so the API while it looks

481
00:20:04,640 --> 00:20:06,860
quite small does everything you need it

482
00:20:06,860 --> 00:20:12,409
to and it scales similarly HTTP HTTP

483
00:20:12,409 --> 00:20:15,140
requests out that gives you a response

484
00:20:15,140 --> 00:20:16,940
which looks much like the response you

485
00:20:16,940 --> 00:20:19,240
would return from your main function

486
00:20:19,240 --> 00:20:22,370
blah blah blah la la la la there's not

487
00:20:22,370 --> 00:20:24,020
much to say about that it's just sort of

488
00:20:24,020 --> 00:20:29,570
interesting because it's in there that's

489
00:20:29,570 --> 00:20:31,210
synchronous you're on the server eight

490
00:20:31,210 --> 00:20:34,510
we're going to so as part of i'll

491
00:20:34,510 --> 00:20:37,250
mention it later on again but as part of

492
00:20:37,250 --> 00:20:38,270
what we're doing we're going to have

493
00:20:38,270 --> 00:20:40,370
asynchronous workers on this on the

494
00:20:40,370 --> 00:20:41,750
server so if you wanted to make it a

495
00:20:41,750 --> 00:20:43,429
synchronous you could it's just that

496
00:20:43,429 --> 00:20:45,350
it's out of band from the rest of the

497
00:20:45,350 --> 00:20:48,950
requests as well you can always cash it

498
00:20:48,950 --> 00:20:53,730
and pull it out in a synchronous request

499
00:20:53,740 --> 00:20:56,929
so there's a bunch of other extensions

500
00:20:56,929 --> 00:20:58,580
stuff that you probably wouldn't want to

501
00:20:58,580 --> 00:21:02,960
implement in JavaScript yeah H max sha-1

502
00:21:02,960 --> 00:21:06,620
that sort of stuff javascript not so

503
00:21:06,620 --> 00:21:11,240
good at binary there's also a media

504
00:21:11,240 --> 00:21:13,399
store so dumping large content items

505
00:21:13,399 --> 00:21:15,950
similar to how you would treat s3

506
00:21:15,950 --> 00:21:19,220
remotely you just put stuff in you get

507
00:21:19,220 --> 00:21:23,419
stuff out it's easy huh but the thing is

508
00:21:23,419 --> 00:21:26,330
um importantly you don't want to do

509
00:21:26,330 --> 00:21:28,250
everything yourself so we're including a

510
00:21:28,250 --> 00:21:30,890
bunch of libraries we're trying where

511
00:21:30,890 --> 00:21:32,419
possible to find these libraries the

512
00:21:32,419 --> 00:21:34,640
third parties have written we've written

513
00:21:34,640 --> 00:21:37,899
some ourselves so templating there's an

514
00:21:37,899 --> 00:21:41,539
application framework whatever that

515
00:21:41,539 --> 00:21:45,140
means Jason parsing beyond just eval and

516
00:21:45,140 --> 00:21:46,850
json string of occasion that sort of

517
00:21:46,850 --> 00:21:49,039
string encoding there's a great library

518
00:21:49,039 --> 00:21:51,260
called date j/s which does all sorts of

519
00:21:51,260 --> 00:21:53,690
crazy formatting on dates and wiki

520
00:21:53,690 --> 00:21:55,340
markup which serve brings me to the next

521
00:21:55,340 --> 00:21:57,649
slide because i'm going to write or

522
00:21:57,649 --> 00:22:01,820
demonstrate the writing of a wiki so i'm

523
00:22:01,820 --> 00:22:03,620
going to use a couple of libraries and

524
00:22:03,620 --> 00:22:05,240
this there's the

525
00:22:05,240 --> 00:22:08,600
Sammy library which named Sammy sort of

526
00:22:08,600 --> 00:22:11,270
half sarcastically after Sammy Davis jr.

527
00:22:11,270 --> 00:22:13,460
because it looks a lot like the Sinatra

528
00:22:13,460 --> 00:22:18,770
framework for Ruby and there's the the

529
00:22:18,770 --> 00:22:20,240
resource library which sort of takes the

530
00:22:20,240 --> 00:22:22,730
data store which is there and just wraps

531
00:22:22,730 --> 00:22:26,330
it in some nicer nicer stuff as you can

532
00:22:26,330 --> 00:22:28,040
see in the next line down which is

533
00:22:28,040 --> 00:22:31,310
creating a sort of page page namespace

534
00:22:31,310 --> 00:22:35,990
for objects so here's my first function

535
00:22:35,990 --> 00:22:39,320
it's not as complicated as it looks i'm

536
00:22:39,320 --> 00:22:41,600
giving a regular expression as the first

537
00:22:41,600 --> 00:22:44,540
argument and the second argument is a

538
00:22:44,540 --> 00:22:46,670
function that will execute when the

539
00:22:46,670 --> 00:22:50,320
machine takes a request a get request

540
00:22:50,320 --> 00:22:53,000
that matches that regex so that regex

541
00:22:53,000 --> 00:22:56,300
will match / and anything after /

542
00:22:56,300 --> 00:22:59,510
basically so typical wiki style page

543
00:22:59,510 --> 00:23:02,840
names if there's not if it just matches

544
00:23:02,840 --> 00:23:04,580
the / and there's nothing else after it

545
00:23:04,580 --> 00:23:08,570
it goes through loading the homepage it

546
00:23:08,570 --> 00:23:11,420
tries to get the page out of the data

547
00:23:11,420 --> 00:23:13,250
store if that fails it'll throw an

548
00:23:13,250 --> 00:23:17,210
exception it just create a fake one and

549
00:23:17,210 --> 00:23:21,320
it returns a template that sort of mobs

550
00:23:21,320 --> 00:23:23,240
that all up and dumps it out to the

551
00:23:23,240 --> 00:23:26,900
browser in the pretty form and so

552
00:23:26,900 --> 00:23:29,150
there's another library usage there the

553
00:23:29,150 --> 00:23:31,340
wiki library that just does some wiki

554
00:23:31,340 --> 00:23:34,880
markup conversion and it wiki markup

555
00:23:34,880 --> 00:23:36,800
converts the the content of that object

556
00:23:36,800 --> 00:23:41,690
and spits it out to the template so wiki

557
00:23:41,690 --> 00:23:43,580
need to be able to edit it sort of the

558
00:23:43,580 --> 00:23:47,660
point if it finds a slash edit at the

559
00:23:47,660 --> 00:23:50,900
end of one of those URLs then it pulls

560
00:23:50,900 --> 00:23:53,450
up an editor page again if it doesn't

561
00:23:53,450 --> 00:23:55,610
have a page name it looks for actually

562
00:23:55,610 --> 00:23:57,650
that's a kind of miss line so I take

563
00:23:57,650 --> 00:24:00,800
care of that later on doesn't matter so

564
00:24:00,800 --> 00:24:02,540
again try and get the page out of the

565
00:24:02,540 --> 00:24:05,450
data store you return the template that

566
00:24:05,450 --> 00:24:08,150
is the editor and if you don't have the

567
00:24:08,150 --> 00:24:09,980
page name or if you don't have the page

568
00:24:09,980 --> 00:24:12,200
then just redirect to slash go back to

569
00:24:12,200 --> 00:24:14,660
the homepage someone was trying to do

570
00:24:14,660 --> 00:24:17,309
something bad um

571
00:24:17,309 --> 00:24:20,820
saving again similar to Sinatra we're

572
00:24:20,820 --> 00:24:24,539
dealing with a post opposed to the page

573
00:24:24,539 --> 00:24:26,610
name take the page as the first argument

574
00:24:26,610 --> 00:24:29,009
as a function that's that so I should

575
00:24:29,009 --> 00:24:30,029
probably explain that a little better

576
00:24:30,029 --> 00:24:32,850
that a page variable that is the first

577
00:24:32,850 --> 00:24:34,529
argument to the function is actually the

578
00:24:34,529 --> 00:24:37,289
capture from the regex pulled out and it

579
00:24:37,289 --> 00:24:39,450
goes in order of the name of the

580
00:24:39,450 --> 00:24:41,580
captures so if you had more than one

581
00:24:41,580 --> 00:24:43,620
capture put more than one argument you

582
00:24:43,620 --> 00:24:47,580
can get the data out like that it

583
00:24:47,580 --> 00:24:50,940
ignores the first sort of this is

584
00:24:50,940 --> 00:24:52,289
everything I was matching against

585
00:24:52,289 --> 00:24:55,610
response of an regular expression match

586
00:24:55,610 --> 00:24:59,789
so anyway get the page out if you don't

587
00:24:59,789 --> 00:25:03,090
have it create a new one set up the ID

588
00:25:03,090 --> 00:25:06,389
if you do have it or either way dump the

589
00:25:06,389 --> 00:25:08,490
content in save it and then redirect

590
00:25:08,490 --> 00:25:11,509
back to it it's really quite simple and

591
00:25:11,509 --> 00:25:14,730
that's a wiki that's that's everything

592
00:25:14,730 --> 00:25:18,480
it works there's some HTML template

593
00:25:18,480 --> 00:25:23,830
e-type code but that's pretty much it

594
00:25:23,840 --> 00:25:27,029
again the point here with this is that

595
00:25:27,029 --> 00:25:29,730
in none of that code have I gone out of

596
00:25:29,730 --> 00:25:32,210
my way to make it you know quote unquote

597
00:25:32,210 --> 00:25:34,950
scalable I'm not really worrying about

598
00:25:34,950 --> 00:25:38,240
that at all I'm not writing to a

599
00:25:38,240 --> 00:25:41,850
memcache first I'm not doing anything

600
00:25:41,850 --> 00:25:44,460
clever i'm not writing to a message

601
00:25:44,460 --> 00:25:46,769
queue to save the page at a date so i'm

602
00:25:46,769 --> 00:25:50,490
not blocking etc etc i'm doing nothing

603
00:25:50,490 --> 00:25:53,159
particularly sensible for a large scale

604
00:25:53,159 --> 00:25:54,539
app not about not that I'm suggesting

605
00:25:54,539 --> 00:25:56,970
this wiki will ever be a large scale app

606
00:25:56,970 --> 00:25:59,730
but but if it was I wouldn't have to

607
00:25:59,730 --> 00:26:02,610
worry about it because the platform's

608
00:26:02,610 --> 00:26:04,350
taking care of it all it's going to make

609
00:26:04,350 --> 00:26:07,080
it scale just like the initial main

610
00:26:07,080 --> 00:26:09,029
function all that stuff in there the

611
00:26:09,029 --> 00:26:11,279
performance should remain constant no

612
00:26:11,279 --> 00:26:14,220
matter what so I think that's pretty

613
00:26:14,220 --> 00:26:17,129
cool I've spent most of my career sort

614
00:26:17,129 --> 00:26:18,840
of trying to make things scale and what

615
00:26:18,840 --> 00:26:21,809
you find is that as time goes by most

616
00:26:21,809 --> 00:26:23,549
your application is taken up with code

617
00:26:23,549 --> 00:26:26,190
to make things scale rather than for the

618
00:26:26,190 --> 00:26:27,600
business logic the functionality that

619
00:26:27,600 --> 00:26:29,920
makes you different

620
00:26:29,920 --> 00:26:32,560
and so yeah I like the fact I don't be

621
00:26:32,560 --> 00:26:35,890
too worried about that we've got a lot

622
00:26:35,890 --> 00:26:37,540
of things that we're going to add to the

623
00:26:37,540 --> 00:26:40,540
core offering work use were one that i

624
00:26:40,540 --> 00:26:42,280
mentioned to make it if you want to do

625
00:26:42,280 --> 00:26:44,680
asynchronous stuff scheduled execution

626
00:26:44,680 --> 00:26:46,780
is another one you know I want to run I

627
00:26:46,780 --> 00:26:49,180
want to run this at one o'clock every

628
00:26:49,180 --> 00:26:51,010
morning or every 10 minutes six cetera

629
00:26:51,010 --> 00:26:55,300
et cetera more libraries that was a big

630
00:26:55,300 --> 00:27:00,550
point xmpp and smtp i mentioned as well

631
00:27:00,550 --> 00:27:02,290
I'd love to get video encoding in there

632
00:27:02,290 --> 00:27:03,970
one extension I didn't mention that we

633
00:27:03,970 --> 00:27:06,340
have is you know image manipulation flip

634
00:27:06,340 --> 00:27:10,900
rotate crop blower all you have to be

635
00:27:10,900 --> 00:27:13,620
able to do that these days apparently

636
00:27:13,620 --> 00:27:15,850
video if we could do the same with video

637
00:27:15,850 --> 00:27:19,300
we're not far off it's actually big

638
00:27:19,300 --> 00:27:20,590
problem with video is making it possible

639
00:27:20,590 --> 00:27:22,840
to have a downloadable version that just

640
00:27:22,840 --> 00:27:24,220
works because of all the libraries that

641
00:27:24,220 --> 00:27:28,810
are involved so just to sort of

642
00:27:28,810 --> 00:27:32,530
summarize where we are we're just a

643
00:27:32,530 --> 00:27:34,630
short way away from release originally

644
00:27:34,630 --> 00:27:37,480
when well originally this had been live

645
00:27:37,480 --> 00:27:38,830
i'm running and then when joint bought

646
00:27:38,830 --> 00:27:41,650
reasonably smart we renamed to the smart

647
00:27:41,650 --> 00:27:44,560
platform instead it's difference we

648
00:27:44,560 --> 00:27:48,910
Canadians and Americans I guess yeah we

649
00:27:48,910 --> 00:27:50,650
so it was renamed smart platform we

650
00:27:50,650 --> 00:27:52,030
actually took it offline because we want

651
00:27:52,030 --> 00:27:53,920
to focus on getting it right before we

652
00:27:53,920 --> 00:27:55,510
released it to the world so very very

653
00:27:55,510 --> 00:27:57,630
shortly you'll be able to download a

654
00:27:57,630 --> 00:27:59,800
desktop version you'll be able to check

655
00:27:59,800 --> 00:28:01,960
the source out of gip you'll know it'll

656
00:28:01,960 --> 00:28:03,310
all be available and then shortly after

657
00:28:03,310 --> 00:28:05,140
that when people have had chance to sort

658
00:28:05,140 --> 00:28:06,730
of play around it with it and build

659
00:28:06,730 --> 00:28:08,050
their apps you'll be able to just push

660
00:28:08,050 --> 00:28:10,740
those applications right up to the cloud

661
00:28:10,740 --> 00:28:13,060
so the workflow is kind of cool you know

662
00:28:13,060 --> 00:28:14,710
you sit on your own laptop you do your

663
00:28:14,710 --> 00:28:16,510
development you push the code up to the

664
00:28:16,510 --> 00:28:19,420
cloud and it should just work exactly

665
00:28:19,420 --> 00:28:21,370
the same if it doesn't it's my fault

666
00:28:21,370 --> 00:28:24,970
sorry but you know don't envisage that

667
00:28:24,970 --> 00:28:27,040
that's why we haven't done things like

668
00:28:27,040 --> 00:28:28,510
the video extension I want to make sure

669
00:28:28,510 --> 00:28:34,150
that works but the key point from all of

670
00:28:34,150 --> 00:28:35,560
this is we're at a fascinating point

671
00:28:35,560 --> 00:28:37,600
with JavaScript as a language we're

672
00:28:37,600 --> 00:28:39,370
really coming to a point where we're

673
00:28:39,370 --> 00:28:41,320
we're looking at it differently and not

674
00:28:41,320 --> 00:28:42,870
only us who are involved

675
00:28:42,870 --> 00:28:45,090
javascript but everyone is looking at it

676
00:28:45,090 --> 00:28:47,550
differently just the number of people

677
00:28:47,550 --> 00:28:48,900
who said they didn't know about this

678
00:28:48,900 --> 00:28:51,570
conference I wanted to be here shows how

679
00:28:51,570 --> 00:28:53,940
prevalent this thinking is the world is

680
00:28:53,940 --> 00:28:56,370
really changing and people have been

681
00:28:56,370 --> 00:28:57,840
volt involved in JavaScript for a long

682
00:28:57,840 --> 00:28:59,520
time or best place to take advantage of

683
00:28:59,520 --> 00:29:03,420
it that's all i have for you if there's

684
00:29:03,420 --> 00:29:05,190
any questions I'm happy to answer and

685
00:29:05,190 --> 00:29:08,280
meantime thank you very much one last

686
00:29:08,280 --> 00:29:11,070
thing I have to do to obey the Creative

687
00:29:11,070 --> 00:29:14,460
Commons these people deserve attribution

688
00:29:14,460 --> 00:29:24,220
images from Flickr thank you very much

689
00:29:24,230 --> 00:29:29,070
any questions before I hand over to yes

690
00:29:29,070 --> 00:29:31,920
yeah i don't know if i missed it but is

691
00:29:31,920 --> 00:29:34,010
there a way to include your own library

692
00:29:34,010 --> 00:29:37,590
absolutely um yeah I it's it's an

693
00:29:37,590 --> 00:29:39,179
extension but it didn't seem like a very

694
00:29:39,179 --> 00:29:41,429
interesting one there is a way to pull

695
00:29:41,429 --> 00:29:43,559
source code from other places in the git

696
00:29:43,559 --> 00:29:46,970
repository that is your your application

697
00:29:46,970 --> 00:29:50,429
so yeah you just use it it pulls it into

698
00:29:50,429 --> 00:29:52,830
the into the system eventually we'll

699
00:29:52,830 --> 00:29:55,440
have a way of submitting libraries into

700
00:29:55,440 --> 00:29:58,290
the sort of platform library store not

701
00:29:58,290 --> 00:29:59,460
going to have that from day one just

702
00:29:59,460 --> 00:30:02,190
because it requires more bodies and more

703
00:30:02,190 --> 00:30:04,230
time than i'm prepared to dedicate it to

704
00:30:04,230 --> 00:30:10,410
it right now um but yeah in your wiki

705
00:30:10,410 --> 00:30:14,280
example is this ready single frame so

706
00:30:14,280 --> 00:30:15,960
the question was in the wiki event

707
00:30:15,960 --> 00:30:18,120
example is the threading just single

708
00:30:18,120 --> 00:30:22,020
threading yes from the purpose of any

709
00:30:22,020 --> 00:30:24,750
given request with the asynchronous work

710
00:30:24,750 --> 00:30:26,670
use if you wanted to do other stuff you

711
00:30:26,670 --> 00:30:28,380
could spin it out but what you got to

712
00:30:28,380 --> 00:30:30,059
remember is for that application there

713
00:30:30,059 --> 00:30:31,740
could be one or a thousand machines

714
00:30:31,740 --> 00:30:36,770
running it and it so you have you have

715
00:30:36,770 --> 00:30:39,059
multithreading by transaction if you

716
00:30:39,059 --> 00:30:41,850
like it's not the only one visitor can

717
00:30:41,850 --> 00:30:45,720
be serviced at a time yeah threadings

718
00:30:45,720 --> 00:30:50,270
kind of a key topic in JavaScript have

719
00:30:50,270 --> 00:30:52,620
Brendan Eich I think that's how you

720
00:30:52,620 --> 00:30:54,960
pronounce his name pretty sure it is had

721
00:30:54,960 --> 00:30:56,480
a pretty good rant about

722
00:30:56,480 --> 00:31:00,049
how threading over my dead body and I

723
00:31:00,049 --> 00:31:01,850
tend to agree with them asynchronous

724
00:31:01,850 --> 00:31:03,530
work use just tend to work a lot better

725
00:31:03,530 --> 00:31:05,419
than than threading in a server

726
00:31:05,419 --> 00:31:11,450
application nope oh go ahead let's let

727
00:31:11,450 --> 00:31:13,130
I'll get you and then one of the back of

728
00:31:13,130 --> 00:31:15,320
a time frame was arrested me about your

729
00:31:15,320 --> 00:31:17,900
analogy for electricity and then

730
00:31:17,900 --> 00:31:21,890
monetization of the actual machine book

731
00:31:21,890 --> 00:31:26,140
is the time because the rate of change

732
00:31:26,140 --> 00:31:28,610
my chance you know it differently how

733
00:31:28,610 --> 00:31:30,950
long did it take for the commoditization

734
00:31:30,950 --> 00:31:34,030
of electricity versus modernization of

735
00:31:34,030 --> 00:31:37,130
machines it seemed like me much so so

736
00:31:37,130 --> 00:31:40,130
the question was how long did it take to

737
00:31:40,130 --> 00:31:41,990
with the commoditization of electricity

738
00:31:41,990 --> 00:31:44,990
what how is that analogous to the time

739
00:31:44,990 --> 00:31:46,040
frame that we've seen for the

740
00:31:46,040 --> 00:31:48,710
commoditization of servers and actually

741
00:31:48,710 --> 00:31:50,900
if you think about I think 1881 was

742
00:31:50,900 --> 00:31:52,610
badal mming the first public provider

743
00:31:52,610 --> 00:31:56,419
like I said 1926 was when it was

744
00:31:56,419 --> 00:31:58,610
effectively commoditized later on it was

745
00:31:58,610 --> 00:32:01,940
nationalized or monopolized but but

746
00:32:01,940 --> 00:32:06,200
early on you know 1926 was when the

747
00:32:06,200 --> 00:32:07,700
standard emerged that made it a

748
00:32:07,700 --> 00:32:10,790
commodity so that's really not all

749
00:32:10,790 --> 00:32:12,679
that's 40 years if you think about

750
00:32:12,679 --> 00:32:16,130
computing we're not that far off 40

751
00:32:16,130 --> 00:32:20,000
years since you know the the room in the

752
00:32:20,000 --> 00:32:21,799
corner with all the lab techs wearing

753
00:32:21,799 --> 00:32:24,140
white coats to the desktop and now to

754
00:32:24,140 --> 00:32:26,179
just some random provider in the cloud

755
00:32:26,179 --> 00:32:28,220
when we're not really that far away from

756
00:32:28,220 --> 00:32:31,850
the same time frame although in saying

757
00:32:31,850 --> 00:32:35,630
that I wouldn't be surprised if it was a

758
00:32:35,630 --> 00:32:37,549
much smaller time frame in computing

759
00:32:37,549 --> 00:32:39,200
what you're seeing in industry in

760
00:32:39,200 --> 00:32:41,929
general with commoditization is the time

761
00:32:41,929 --> 00:32:44,750
for something to be a have a you know a

762
00:32:44,750 --> 00:32:46,700
WOW factor to being a commodity is

763
00:32:46,700 --> 00:32:48,679
collapsing a great deal look at the

764
00:32:48,679 --> 00:32:51,169
iphone you know when when the iphone

765
00:32:51,169 --> 00:32:52,549
came out is only the people waiting in

766
00:32:52,549 --> 00:32:54,770
line now i think probably about eighty

767
00:32:54,770 --> 00:32:56,090
percent of the people in this room have

768
00:32:56,090 --> 00:32:59,210
an iphone it's a similar commoditization

769
00:32:59,210 --> 00:33:00,860
you know when i when i first got the

770
00:33:00,860 --> 00:33:02,390
iphone i played with it for hours it's

771
00:33:02,390 --> 00:33:04,790
awesome now I sort of like shove it in

772
00:33:04,790 --> 00:33:07,309
my pocket I drop it it's become a

773
00:33:07,309 --> 00:33:10,100
commodity too so yeah in general within

774
00:33:10,100 --> 00:33:12,080
three we're seeing monetization really

775
00:33:12,080 --> 00:33:14,840
speed up we treat things like commodity

776
00:33:14,840 --> 00:33:17,809
much much faster last question the back

777
00:33:17,809 --> 00:33:19,789
yeah you mentioned how much brain power

778
00:33:19,789 --> 00:33:22,190
is being expended on advantage

779
00:33:22,190 --> 00:33:26,480
JavaScript engines did you mention which

780
00:33:26,480 --> 00:33:28,789
one you're using can we choose I mean

781
00:33:28,789 --> 00:33:31,910
I'm gonna be very interested so yeah the

782
00:33:31,910 --> 00:33:34,179
question is did I did I mention which

783
00:33:34,179 --> 00:33:36,500
JavaScript engine I'm choosing not

784
00:33:36,500 --> 00:33:38,570
explicitly I didn't mention it we're

785
00:33:38,570 --> 00:33:40,940
using spider monkey and as a consequence

786
00:33:40,940 --> 00:33:44,000
we're using trace monkey simply because

787
00:33:44,000 --> 00:33:46,520
well you know that we've had discussions

788
00:33:46,520 --> 00:33:47,990
about this you know should we be using

789
00:33:47,990 --> 00:33:49,820
rhino it means we can use all the stuff

790
00:33:49,820 --> 00:33:51,679
in all the jars blah blah blah blah blah

791
00:33:51,679 --> 00:33:54,980
just embed java stuff the big problem

792
00:33:54,980 --> 00:33:57,530
with rhino is it's not in a browser it's

793
00:33:57,530 --> 00:33:58,640
not going to get the same amount of

794
00:33:58,640 --> 00:34:01,730
eyeball time that spider monkey gets and

795
00:34:01,730 --> 00:34:05,120
so to get those sort of benefits we're

796
00:34:05,120 --> 00:34:07,789
better off we're better off using spider

797
00:34:07,789 --> 00:34:10,790
monkey than rhino choosing spider monkey

798
00:34:10,790 --> 00:34:14,359
over v8 or squirrelfish the the real

799
00:34:14,359 --> 00:34:17,899
reason for that I suppose is that if you

800
00:34:17,899 --> 00:34:19,909
look at the history of the Mozilla

801
00:34:19,909 --> 00:34:23,030
project the spider monkey API really

802
00:34:23,030 --> 00:34:25,429
hasn't changed very much it's an old

803
00:34:25,429 --> 00:34:28,250
comparatively old projects you know that

804
00:34:28,250 --> 00:34:29,450
has its roots in the first

805
00:34:29,450 --> 00:34:31,550
implementation and the API has been

806
00:34:31,550 --> 00:34:34,250
pretty stable throughout and so that

807
00:34:34,250 --> 00:34:37,220
gives me a confidence that it's not

808
00:34:37,220 --> 00:34:38,659
going to change that much in fact the

809
00:34:38,659 --> 00:34:40,220
one of the biggest changes has been

810
00:34:40,220 --> 00:34:43,129
recently with the 1.8 and all the trace

811
00:34:43,129 --> 00:34:44,840
monkey work that's going on we've had to

812
00:34:44,840 --> 00:34:47,000
deal with more changes than the almost

813
00:34:47,000 --> 00:34:48,830
ever before in its history but I think

814
00:34:48,830 --> 00:34:50,540
that's a pretty compelling reason why

815
00:34:50,540 --> 00:34:53,450
shouldn't switch to something else for

816
00:34:53,450 --> 00:34:55,879
this sort of stuff I'm not you know I'm

817
00:34:55,879 --> 00:34:58,280
not a language guy when it comes to the

818
00:34:58,280 --> 00:34:59,630
smart platform so I don't want to spend

819
00:34:59,630 --> 00:35:02,750
my time you know rewriting code that

820
00:35:02,750 --> 00:35:07,790
just embeds the language couple more go

821
00:35:07,790 --> 00:35:10,280
there so you ready you're right nice

822
00:35:10,280 --> 00:35:13,089
library

823
00:35:13,099 --> 00:35:16,109
absolutely as I mentioned everything we

824
00:35:16,109 --> 00:35:17,460
do the smart platform will be open

825
00:35:17,460 --> 00:35:20,309
source so they will be absolutely opened

826
00:35:20,309 --> 00:35:23,460
up no doubt so I think my question is

827
00:35:23,460 --> 00:35:25,259
related I was curious some of the

828
00:35:25,259 --> 00:35:28,319
scaling tactics that you guys use is the

829
00:35:28,319 --> 00:35:33,509
release going to UM there will be some

830
00:35:33,509 --> 00:35:36,420
things which we keep as not necessarily

831
00:35:36,420 --> 00:35:39,239
secret sauce but you know because we're

832
00:35:39,239 --> 00:35:41,549
a big provider if we go off and buy a

833
00:35:41,549 --> 00:35:44,069
big object database for example for any

834
00:35:44,069 --> 00:35:46,079
particular reason of course that's going

835
00:35:46,079 --> 00:35:47,309
to be closed and the code that's going

836
00:35:47,309 --> 00:35:49,849
to make the decision is going to be

837
00:35:49,849 --> 00:35:53,940
consequently closed but you know right

838
00:35:53,940 --> 00:35:56,700
out of the box they'll be less local

839
00:35:56,700 --> 00:35:58,410
sequel light store there'll be a local

840
00:35:58,410 --> 00:36:00,269
my sequel store there'll be a MongoDB

841
00:36:00,269 --> 00:36:02,519
store that you can you know chop and

842
00:36:02,519 --> 00:36:05,700
change of we're you know we're not

843
00:36:05,700 --> 00:36:07,410
trying to protect our position in any

844
00:36:07,410 --> 00:36:10,019
way with the source code now because we

845
00:36:10,019 --> 00:36:11,970
don't see there being really a position

846
00:36:11,970 --> 00:36:14,369
to protect we're competing on quality of

847
00:36:14,369 --> 00:36:23,759
service not anything else yes very soon

848
00:36:23,759 --> 00:36:25,410
we actually really hoped we'd be able to

849
00:36:25,410 --> 00:36:28,559
announce here's the download here we

850
00:36:28,559 --> 00:36:29,999
just had to be just going through an

851
00:36:29,999 --> 00:36:32,670
internal QA basically and then it'll be

852
00:36:32,670 --> 00:36:35,579
absolutely available lexa really wanted

853
00:36:35,579 --> 00:36:39,210
it here couldn't quite pull it off maybe

854
00:36:39,210 --> 00:36:42,599
next year I'll have more actual you know

855
00:36:42,599 --> 00:36:44,369
visible you can download this here you

856
00:36:44,369 --> 00:36:47,609
go I think I'm just about out of time

857
00:36:47,609 --> 00:36:57,890
again thank you very much

