1
00:00:21,410 --> 00:00:25,620

you

2
00:00:25,630 --> 00:00:28,940
good morning Jace comes so you already

3
00:00:28,940 --> 00:00:29,960
know my name

4
00:00:29,960 --> 00:00:33,020
I've never seen it this big can someone

5
00:00:33,020 --> 00:00:34,520
take a picture of it for me I'll be

6
00:00:34,520 --> 00:00:37,489
grateful okay

7
00:00:37,489 --> 00:00:39,230
today I'd like to share with you some of

8
00:00:39,230 --> 00:00:40,910
the questions I was asking myself about

9
00:00:40,910 --> 00:00:44,270
numbers in JavaScript because even

10
00:00:44,270 --> 00:00:46,309
Brendan Eich yesterday at least keynote

11
00:00:46,309 --> 00:00:49,340
told us that the numbers are not really

12
00:00:49,340 --> 00:00:51,590
perfect currently that's why all these

13
00:00:51,590 --> 00:00:53,330
new types of numbers are being

14
00:00:53,330 --> 00:00:57,020
introduced for future versions but today

15
00:00:57,020 --> 00:00:59,030
I like to focus on what currently we

16
00:00:59,030 --> 00:01:02,149
have in JavaScript in terms of numbers

17
00:01:02,149 --> 00:01:04,160
because if you ever tried to do some

18
00:01:04,160 --> 00:01:06,290
computations on decimal fractions or

19
00:01:06,290 --> 00:01:09,050
large integers in JavaScript you

20
00:01:09,050 --> 00:01:11,030
probably noticed that they are not

21
00:01:11,030 --> 00:01:13,280
really precise and may lead to some

22
00:01:13,280 --> 00:01:16,550
quite unexpected results let me give you

23
00:01:16,550 --> 00:01:22,789
some examples of that if we try to add

24
00:01:22,789 --> 00:01:25,910
zero point one to zero points to you

25
00:01:25,910 --> 00:01:27,619
would expect it will be equal to zero

26
00:01:27,619 --> 00:01:30,920
point three but it's not what it's

27
00:01:30,920 --> 00:01:33,770
actually equal to it's a number very

28
00:01:33,770 --> 00:01:37,340
close to zero point three on the other

29
00:01:37,340 --> 00:01:39,830
hand if you take quite a large integer

30
00:01:39,830 --> 00:01:46,400
like for example this one and you try to

31
00:01:46,400 --> 00:01:50,750
add one to it you will get exactly the

32
00:01:50,750 --> 00:01:54,920
same number but if you add 2 to it you

33
00:01:54,920 --> 00:01:58,340
get the result as expected but it's not

34
00:01:58,340 --> 00:02:01,430
only about inaccurate results of some

35
00:02:01,430 --> 00:02:04,490
computations there are many different

36
00:02:04,490 --> 00:02:06,439
weird things about the numbers in

37
00:02:06,439 --> 00:02:09,860
JavaScript like this in famous not a

38
00:02:09,860 --> 00:02:15,140
number value so not a number is a value

39
00:02:15,140 --> 00:02:17,390
you will get if you try to turn into

40
00:02:17,390 --> 00:02:20,000
Java in to a number something that is

41
00:02:20,000 --> 00:02:21,420
not

42
00:02:21,420 --> 00:02:25,020
so let's try something like this but if

43
00:02:25,020 --> 00:02:26,880
you try to check the type of not a

44
00:02:26,880 --> 00:02:32,430
number it will tell you it's a number

45
00:02:32,430 --> 00:02:35,970
and every time I stumbled upon something

46
00:02:35,970 --> 00:02:38,460
like this happening Gong I was asking

47
00:02:38,460 --> 00:02:40,770
myself why does it happen because there

48
00:02:40,770 --> 00:02:42,570
has to be a reason right things like

49
00:02:42,570 --> 00:02:45,090
that don't happen without the reason at

50
00:02:45,090 --> 00:02:48,300
least in most cases and if you're asking

51
00:02:48,300 --> 00:02:49,500
yourself a question about JavaScript

52
00:02:49,500 --> 00:02:52,290
there is one sure place to look for the

53
00:02:52,290 --> 00:02:52,830
answer

54
00:02:52,830 --> 00:02:56,880
the ACMA script standard but all the

55
00:02:56,880 --> 00:02:59,370
standard says about the numbers is that

56
00:02:59,370 --> 00:03:00,990
they are represented by the double

57
00:03:00,990 --> 00:03:05,630
precision 64-bit format I Triple E 754

58
00:03:05,630 --> 00:03:08,250
binary floating-point arithmetic

59
00:03:08,250 --> 00:03:10,440
actually yeah it's just a little bit

60
00:03:10,440 --> 00:03:13,680
more than that but nothing about how the

61
00:03:13,680 --> 00:03:15,360
numbers are represented in the memory

62
00:03:15,360 --> 00:03:20,100
how the calculations are done so I had

63
00:03:20,100 --> 00:03:24,000
to look the further but it turns out

64
00:03:24,000 --> 00:03:25,620
that javascript is not the first

65
00:03:25,620 --> 00:03:28,470
language that uses this standard there

66
00:03:28,470 --> 00:03:34,180
are many others if you try for example

67
00:03:34,190 --> 00:03:41,160
Python we have exactly the same problems

68
00:03:41,160 --> 00:03:46,130
in here

69
00:03:46,140 --> 00:03:54,830
something more modern like Ruby nope

70
00:03:54,830 --> 00:04:02,400
and of course Java actually I had to

71
00:04:02,400 --> 00:04:04,380
read write a class to add these two

72
00:04:04,380 --> 00:04:13,950
numbers in Java anyway it turns out that

73
00:04:13,950 --> 00:04:16,019
we have these kind of numbers in

74
00:04:16,019 --> 00:04:18,060
JavaScript because they were in Java at

75
00:04:18,060 --> 00:04:22,500
the first place right so I was still

76
00:04:22,500 --> 00:04:24,690
asking myself why does it happen what is

77
00:04:24,690 --> 00:04:28,020
wrong with this representation of the

78
00:04:28,020 --> 00:04:30,570
numbers that we have such imprecise

79
00:04:30,570 --> 00:04:32,790
results and the first step I wanted to

80
00:04:32,790 --> 00:04:36,000
make was to see how a given number looks

81
00:04:36,000 --> 00:04:37,919
like in this binary representation I

82
00:04:37,919 --> 00:04:40,650
wanted to see every single bit of this

83
00:04:40,650 --> 00:04:43,460
64 bit representation

84
00:04:43,460 --> 00:04:45,840
unfortunately in JavaScript we don't

85
00:04:45,840 --> 00:04:48,780
really have easy direct access to bits

86
00:04:48,780 --> 00:04:52,380
in memory but with a little help from my

87
00:04:52,380 --> 00:04:55,680
friends typed our eyes I was able to

88
00:04:55,680 --> 00:05:08,040
create myself a little utility function

89
00:05:08,050 --> 00:05:11,560
so now we can turn any number let's say

90
00:05:11,560 --> 00:05:15,639
our 0.3 and see how it looks in its

91
00:05:15,639 --> 00:05:18,370
binary representation so these are all

92
00:05:18,370 --> 00:05:21,039
64 bits of binary representation of

93
00:05:21,039 --> 00:05:24,159
number 0.3 in this double precision

94
00:05:24,159 --> 00:05:26,849
floating point so let's compare it to

95
00:05:26,849 --> 00:05:29,830
result of the computation of 0.1 plus

96
00:05:29,830 --> 00:05:34,599
0.2 it's almost the same but if you look

97
00:05:34,599 --> 00:05:37,090
at the last three bits on the right side

98
00:05:37,090 --> 00:05:39,610
you will see that there is a little

99
00:05:39,610 --> 00:05:43,360
difference there and yeah we can take

100
00:05:43,360 --> 00:05:46,199
any number we want like I don't know

101
00:05:46,199 --> 00:05:49,720
2013 0 9 and see how it looks like but

102
00:05:49,720 --> 00:05:53,020
looking at these zeros and ones doesn't

103
00:05:53,020 --> 00:05:55,090
really give us any kind of understanding

104
00:05:55,090 --> 00:05:56,860
what is going on there how these numbers

105
00:05:56,860 --> 00:06:01,659
are computed fortunately because this

106
00:06:01,659 --> 00:06:05,199
standard is used in many languages there

107
00:06:05,199 --> 00:06:07,840
are quite a few resources online that

108
00:06:07,840 --> 00:06:10,080
tell us how does the standard work I

109
00:06:10,080 --> 00:06:14,069
gathered a couple of these here but

110
00:06:14,069 --> 00:06:16,930
unfortunately they are full of crazy

111
00:06:16,930 --> 00:06:19,690
equations and operations on binary

112
00:06:19,690 --> 00:06:22,840
numbers and it took me quite a few long

113
00:06:22,840 --> 00:06:26,289
evenings a lot of paper to get my head

114
00:06:26,289 --> 00:06:30,039
around how it really works so here I am

115
00:06:30,039 --> 00:06:32,710
to save you the trouble and hopefully

116
00:06:32,710 --> 00:06:34,240
after this talk you will actually be

117
00:06:34,240 --> 00:06:36,870
able to understand this Wikipedia page

118
00:06:36,870 --> 00:06:40,569
so let's see how this representation

119
00:06:40,569 --> 00:06:44,560
works so as I already mentioned a couple

120
00:06:44,560 --> 00:06:47,259
of times we have 64 bits to represent

121
00:06:47,259 --> 00:06:49,960
our number and they can be divided into

122
00:06:49,960 --> 00:06:53,800
three parts there is one bit for a sign

123
00:06:53,800 --> 00:06:58,509
is this guy in here it tells us if the

124
00:06:58,509 --> 00:07:00,400
number is positive or negative negative

125
00:07:00,400 --> 00:07:04,509
there is this big chunk on the right 52

126
00:07:04,509 --> 00:07:06,819
bits actually it's 53 because one of

127
00:07:06,819 --> 00:07:08,680
them is hidden I will talk about this

128
00:07:08,680 --> 00:07:11,759
guy later this part is called

129
00:07:11,759 --> 00:07:15,310
significant if you are American English

130
00:07:15,310 --> 00:07:17,430
user you probably call it mantissa

131
00:07:17,430 --> 00:07:19,580
sometimes it's referred as

132
00:07:19,580 --> 00:07:22,930
fraction but basically this 52 bits are

133
00:07:22,930 --> 00:07:25,550
representing the binary digits of our

134
00:07:25,550 --> 00:07:27,830
number and some of them are used to

135
00:07:27,830 --> 00:07:30,139
represent the integer part of our number

136
00:07:30,139 --> 00:07:33,349
and the others are for the fraction and

137
00:07:33,349 --> 00:07:36,259
I use this this point in here to show

138
00:07:36,259 --> 00:07:38,569
where this split happens so this bits on

139
00:07:38,569 --> 00:07:40,759
the left of this point are used to

140
00:07:40,759 --> 00:07:43,520
represent the integer part and the rest

141
00:07:43,520 --> 00:07:47,990
is for the fraction and the remaining 11

142
00:07:47,990 --> 00:07:51,919
bits is the exponent and the exponent is

143
00:07:51,919 --> 00:07:54,680
kind of a multiplier that is used to

144
00:07:54,680 --> 00:07:57,349
scale the value given by the significant

145
00:07:57,349 --> 00:07:59,990
to give us the final value of our number

146
00:07:59,990 --> 00:08:02,690
and I'm pretty sure it's quite confusing

147
00:08:02,690 --> 00:08:06,139
at this point so let me give you a

148
00:08:06,139 --> 00:08:11,599
little bit of analogy I hope that you've

149
00:08:11,599 --> 00:08:14,539
at least at some point of your life seen

150
00:08:14,539 --> 00:08:17,569
a number written like this it's so

151
00:08:17,569 --> 00:08:19,610
called exponential or scientific

152
00:08:19,610 --> 00:08:23,240
notation so in this notation we also

153
00:08:23,240 --> 00:08:25,430
have a number divided into two parts

154
00:08:25,430 --> 00:08:29,090
this is there is this part it represents

155
00:08:29,090 --> 00:08:31,520
the significant digits of our numbers so

156
00:08:31,520 --> 00:08:33,380
all the digits we want to have in our

157
00:08:33,380 --> 00:08:36,169
number and it's also called significant

158
00:08:36,169 --> 00:08:39,740
and we compute number by multiplying it

159
00:08:39,740 --> 00:08:42,680
times 10 to the power of the exponent so

160
00:08:42,680 --> 00:08:45,339
the exponent is kind of a scaling factor

161
00:08:45,339 --> 00:08:48,769
so the bigger the exponent gets the

162
00:08:48,769 --> 00:08:50,839
bigger our number will be and the

163
00:08:50,839 --> 00:08:53,089
smaller the exponent gets the smaller

164
00:08:53,089 --> 00:08:56,810
value of our number will have and we can

165
00:08:56,810 --> 00:08:58,670
look at this exponent as kind of

166
00:08:58,670 --> 00:09:00,920
defining the position of the point in

167
00:09:00,920 --> 00:09:04,880
our representation because when the

168
00:09:04,880 --> 00:09:07,279
exponent gets higher the point kind of

169
00:09:07,279 --> 00:09:10,160
moves to the right and makes this number

170
00:09:10,160 --> 00:09:13,190
bigger and when the exponent gets

171
00:09:13,190 --> 00:09:14,990
smaller it kind of moves the point to

172
00:09:14,990 --> 00:09:17,329
the left making the numbers smaller and

173
00:09:17,329 --> 00:09:20,149
smaller and actually the roles of

174
00:09:20,149 --> 00:09:23,089
significant and exponent in this binary

175
00:09:23,089 --> 00:09:24,980
notation for the floating point numbers

176
00:09:24,980 --> 00:09:28,220
are exactly the same so let's get back

177
00:09:28,220 --> 00:09:30,390
to it and see how it works and more

178
00:09:30,390 --> 00:09:35,310
details so design bit there is not much

179
00:09:35,310 --> 00:09:38,670
to say about this guy if its value is

180
00:09:38,670 --> 00:09:41,400
zero the number is positive because it's

181
00:09:41,400 --> 00:09:44,130
counted as the power of minus one and if

182
00:09:44,130 --> 00:09:46,770
we turn it to one our number becomes

183
00:09:46,770 --> 00:09:49,070
negative simple as that

184
00:09:49,070 --> 00:09:51,420
exponent is a little bit more

185
00:09:51,420 --> 00:09:54,630
interesting so we have eleven bits to

186
00:09:54,630 --> 00:09:56,580
represent the exponent and the exponent

187
00:09:56,580 --> 00:09:59,130
that is an integer value so we can

188
00:09:59,130 --> 00:10:01,980
represent the number from zero to 2047

189
00:10:01,980 --> 00:10:05,070
but we would actually want exponent to

190
00:10:05,070 --> 00:10:08,550
have negative and positive values so

191
00:10:08,550 --> 00:10:10,950
what is actually used in so called

192
00:10:10,950 --> 00:10:14,370
offset binary notation so we take the

193
00:10:14,370 --> 00:10:16,560
number computed from the powers of two

194
00:10:16,560 --> 00:10:18,960
of the from the bits of exponent this

195
00:10:18,960 --> 00:10:22,620
one and we subtract 1023 from it it's

196
00:10:22,620 --> 00:10:26,250
exactly the health of the range so when

197
00:10:26,250 --> 00:10:28,200
our value computed from the exponent

198
00:10:28,200 --> 00:10:33,810
bits gets exactly to this point of 1022

199
00:10:33,810 --> 00:10:37,230
three our exponent will be zero and when

200
00:10:37,230 --> 00:10:39,510
it gets lower the exponent will be

201
00:10:39,510 --> 00:10:42,000
negative when it's higher the exponent

202
00:10:42,000 --> 00:10:45,090
will be positive and this number the

203
00:10:45,090 --> 00:10:47,670
value for the exponent is actually

204
00:10:47,670 --> 00:10:50,130
defining the position of this point in

205
00:10:50,130 --> 00:10:54,330
the significant so it defines how many

206
00:10:54,330 --> 00:10:56,730
bits we have for the integer part of the

207
00:10:56,730 --> 00:10:58,560
number and how many are left for the

208
00:10:58,560 --> 00:11:01,950
fraction part so the bigger our exponent

209
00:11:01,950 --> 00:11:04,290
gets the more bits we have for the

210
00:11:04,290 --> 00:11:06,240
integer part and the bigger our integer

211
00:11:06,240 --> 00:11:10,890
value gets the smaller exponent is the

212
00:11:10,890 --> 00:11:13,200
point will move to the left making

213
00:11:13,200 --> 00:11:15,630
giving us less bits for the integer part

214
00:11:15,630 --> 00:11:18,510
and actually that's why it's called the

215
00:11:18,510 --> 00:11:20,790
floating point because the position of

216
00:11:20,790 --> 00:11:23,970
the point is depends on the value of the

217
00:11:23,970 --> 00:11:28,050
exponent so now let's have a look at the

218
00:11:28,050 --> 00:11:32,910
most important part the significant as I

219
00:11:32,910 --> 00:11:36,240
told you already we have 52 bits these

220
00:11:36,240 --> 00:11:39,210
are these red ones and here this first

221
00:11:39,210 --> 00:11:41,370
guy is this hidden

222
00:11:41,370 --> 00:11:46,690
we can save him here yeah and we can

223
00:11:46,690 --> 00:11:48,160
stick him because we don't actually

224
00:11:48,160 --> 00:11:51,130
control its value its value is always

225
00:11:51,130 --> 00:11:53,650
assumed to be one so that's why we don't

226
00:11:53,650 --> 00:11:56,620
have to put them into 64 bits because we

227
00:11:56,620 --> 00:12:02,020
can't change it to zero so to explain

228
00:12:02,020 --> 00:12:04,180
you how this significant works let's

229
00:12:04,180 --> 00:12:06,070
start with something simple like number

230
00:12:06,070 --> 00:12:09,820
one so for number one our exponent is

231
00:12:09,820 --> 00:12:10,420
zero

232
00:12:10,420 --> 00:12:14,560
so it puts our point in here so we have

233
00:12:14,560 --> 00:12:17,860
one bit on the left hand side this one

234
00:12:17,860 --> 00:12:20,320
bit representing our integer part and it

235
00:12:20,320 --> 00:12:22,840
represents two to the power of zero so

236
00:12:22,840 --> 00:12:25,930
it's one but we have only one bit for

237
00:12:25,930 --> 00:12:27,610
the integer we can't represent any

238
00:12:27,610 --> 00:12:30,010
bigger number so if we try to represent

239
00:12:30,010 --> 00:12:32,680
the number two we have to move the point

240
00:12:32,680 --> 00:12:35,830
to the right by changing the exponent so

241
00:12:35,830 --> 00:12:37,750
now we have two bits for the integer

242
00:12:37,750 --> 00:12:41,110
part this first bit is representing 2 to

243
00:12:41,110 --> 00:12:43,450
the power of 1 at this point so it gives

244
00:12:43,450 --> 00:12:46,810
us 2 and the other one is representing 2

245
00:12:46,810 --> 00:12:48,910
to the power of 0 so we can represent

246
00:12:48,910 --> 00:12:52,690
also number 3 but again we just used our

247
00:12:52,690 --> 00:12:55,720
2 bits in the integer part so to

248
00:12:55,720 --> 00:12:59,470
represent number 4 we have to again move

249
00:12:59,470 --> 00:13:01,030
the point to the right by changing the

250
00:13:01,030 --> 00:13:16,040
exponent so now we have oops sorry

251
00:13:16,050 --> 00:13:21,980
yeah I was at for ideas so now we have

252
00:13:21,980 --> 00:13:25,709
three bits for the integer part the

253
00:13:25,709 --> 00:13:27,329
first one represents two to the power of

254
00:13:27,329 --> 00:13:29,550
two the last one represents two to the

255
00:13:29,550 --> 00:13:33,389
power of zero so the bigger number we

256
00:13:33,389 --> 00:13:34,829
want to represent in terms of the

257
00:13:34,829 --> 00:13:37,259
integer value the more bits we will need

258
00:13:37,259 --> 00:13:41,100
for the integer part now let's see how

259
00:13:41,100 --> 00:13:43,889
the fraction part works the first bit

260
00:13:43,889 --> 00:13:47,220
after the point represents two to the

261
00:13:47,220 --> 00:13:51,360
power of minus one so it gives us 1/2 to

262
00:13:51,360 --> 00:13:53,249
the power of one so it gives us a half

263
00:13:53,249 --> 00:13:56,069
so by changing this first bit after the

264
00:13:56,069 --> 00:14:00,600
point we can represent 0.5 fraction the

265
00:14:00,600 --> 00:14:03,119
next one is representing 2 to the power

266
00:14:03,119 --> 00:14:06,480
of minus 2 so it gives us a quarter next

267
00:14:06,480 --> 00:14:08,850
one is 2 to the power of minus 3

268
00:14:08,850 --> 00:14:11,699
it's 1/8 and so on and so on every

269
00:14:11,699 --> 00:14:13,799
single bit and the fraction part

270
00:14:13,799 --> 00:14:16,199
represents smaller and smaller fraction

271
00:14:16,199 --> 00:14:20,279
based on the inverse power of 2 so what

272
00:14:20,279 --> 00:14:23,160
it tells us is that we can only build

273
00:14:23,160 --> 00:14:26,429
the fraction of our number by adding up

274
00:14:26,429 --> 00:14:29,299
these inverted powers of 2 and

275
00:14:29,299 --> 00:14:31,920
unfortunately not all of decimal

276
00:14:31,920 --> 00:14:34,740
fractions can be represented this way so

277
00:14:34,740 --> 00:14:39,660
if we take our zero point one example we

278
00:14:39,660 --> 00:14:41,730
can see that to form zero point one we

279
00:14:41,730 --> 00:14:44,189
are adding smaller and smaller powers of

280
00:14:44,189 --> 00:14:44,639
two

281
00:14:44,639 --> 00:14:48,179
but actually they will never add up to

282
00:14:48,179 --> 00:14:51,299
exactly zero point one value so this

283
00:14:51,299 --> 00:14:53,670
value is already stored in this

284
00:14:53,670 --> 00:14:55,439
representation with a little bit of

285
00:14:55,439 --> 00:14:58,470
error and these errors add up when we do

286
00:14:58,470 --> 00:15:00,209
some computations on these numbers and

287
00:15:00,209 --> 00:15:05,100
at some point they they show up so the

288
00:15:05,100 --> 00:15:07,649
limit of this representation in terms of

289
00:15:07,649 --> 00:15:10,079
accuracy of the fractions is based on

290
00:15:10,079 --> 00:15:12,809
two factors first factor is that we are

291
00:15:12,809 --> 00:15:14,759
building our fraction from the inverse

292
00:15:14,759 --> 00:15:17,129
power of Paris of two and the other

293
00:15:17,129 --> 00:15:19,589
factor is that we actually have quite

294
00:15:19,589 --> 00:15:22,499
limited 52 bits of significant we can't

295
00:15:22,499 --> 00:15:26,490
represent the smaller values what is

296
00:15:26,490 --> 00:15:28,330
even more important is that

297
00:15:28,330 --> 00:15:32,420
the bigger number we get in terms of the

298
00:15:32,420 --> 00:15:34,670
integer value so when we need more and

299
00:15:34,670 --> 00:15:37,070
more bits for the integer part the less

300
00:15:37,070 --> 00:15:39,230
bits we have left for the fraction part

301
00:15:39,230 --> 00:15:42,470
so when we move the point right to the

302
00:15:42,470 --> 00:15:46,370
end of this representation let's see to

303
00:15:46,370 --> 00:15:49,010
this point for such a large integer

304
00:15:49,010 --> 00:15:51,620
value we have only one bit left for the

305
00:15:51,620 --> 00:15:53,930
fraction part so we can only represent

306
00:15:53,930 --> 00:15:55,340
the house

307
00:15:55,340 --> 00:15:57,470
we can't represent any other fraction

308
00:15:57,470 --> 00:16:02,660
for such a large numbers so what happens

309
00:16:02,660 --> 00:16:04,340
if we move the point even more to the

310
00:16:04,340 --> 00:16:08,210
right if the exponent is equal to 52 we

311
00:16:08,210 --> 00:16:10,190
have all the bits of the significant

312
00:16:10,190 --> 00:16:12,440
used for the integer value there is no

313
00:16:12,440 --> 00:16:15,440
bit left for the fraction part so from

314
00:16:15,440 --> 00:16:16,910
this point we can only represent

315
00:16:16,910 --> 00:16:23,930
integers value so the biggest integer

316
00:16:23,930 --> 00:16:26,270
value that actually fits into this

317
00:16:26,270 --> 00:16:31,040
significant is this one we've used all

318
00:16:31,040 --> 00:16:33,050
the bits in the significant part to

319
00:16:33,050 --> 00:16:35,600
represent this number now what would

320
00:16:35,600 --> 00:16:37,850
happen if we try to represent the bigger

321
00:16:37,850 --> 00:16:42,350
number let's see let's change that what

322
00:16:42,350 --> 00:16:44,600
happens is kind of what we expected we

323
00:16:44,600 --> 00:16:46,520
moved the point to the right to make a

324
00:16:46,520 --> 00:16:49,100
more space for the integer part so we

325
00:16:49,100 --> 00:16:53,330
have right now 53 bits for the integer

326
00:16:53,330 --> 00:16:56,210
part but actually there is no bit left

327
00:16:56,210 --> 00:17:00,350
there so how the number is computed so

328
00:17:00,350 --> 00:17:03,470
what happens is that it's assumed that

329
00:17:03,470 --> 00:17:06,140
all these bits that are missing are

330
00:17:06,140 --> 00:17:09,520
zeros so this number is actually

331
00:17:09,520 --> 00:17:13,340
accurately represented because this last

332
00:17:13,340 --> 00:17:16,490
bit is assumed to be zero but what would

333
00:17:16,490 --> 00:17:19,100
happen if we try to add one to it again

334
00:17:19,100 --> 00:17:22,160
we can't because we can't change the

335
00:17:22,160 --> 00:17:24,320
value of this last bit because we don't

336
00:17:24,320 --> 00:17:27,410
control it it's it's always zero so the

337
00:17:27,410 --> 00:17:29,540
last bit we actually control is this one

338
00:17:29,540 --> 00:17:31,970
and it represents two to the power of

339
00:17:31,970 --> 00:17:34,400
one so we can only add two to this

340
00:17:34,400 --> 00:17:37,640
number so so from this point when the

341
00:17:37,640 --> 00:17:40,790
exponent is equal to 53 we can

342
00:17:40,790 --> 00:17:43,390
only represent every second integer

343
00:17:43,390 --> 00:17:49,550
until we get to this point and again to

344
00:17:49,550 --> 00:17:53,090
represent the bigger number we again

345
00:17:53,090 --> 00:17:55,930
have to add 2 to it we will move point

346
00:17:55,930 --> 00:17:59,750
to the right so right now we have 2 bits

347
00:17:59,750 --> 00:18:03,500
that are assumed to be 0 so the last

348
00:18:03,500 --> 00:18:06,260
value the last bit of we control is

349
00:18:06,260 --> 00:18:08,510
representing 2 to the power of 2 so it's

350
00:18:08,510 --> 00:18:11,840
4 so we can represent only every 4th

351
00:18:11,840 --> 00:18:16,640
integer for exponent equal to 54 so the

352
00:18:16,640 --> 00:18:20,570
bigger the exponent gets the bigger gaps

353
00:18:20,570 --> 00:18:23,060
we will have between the integers values

354
00:18:23,060 --> 00:18:25,790
we can represent so actually starting

355
00:18:25,790 --> 00:18:31,340
from this exponent 52 we already have

356
00:18:31,340 --> 00:18:33,290
gaps between the numbers so actually any

357
00:18:33,290 --> 00:18:35,660
operations on on such a large integers

358
00:18:35,660 --> 00:18:39,890
will have some error and similar thing

359
00:18:39,890 --> 00:18:41,900
happens on the other side of the

360
00:18:41,900 --> 00:18:51,110
significant if we make it smaller when

361
00:18:51,110 --> 00:18:53,870
we have the exponent value of minus 1 so

362
00:18:53,870 --> 00:18:57,290
our point is right before the hidden bit

363
00:18:57,290 --> 00:19:01,160
this hidden bit represents 1/2 and every

364
00:19:01,160 --> 00:19:03,110
other bit in the significant represents

365
00:19:03,110 --> 00:19:06,140
smaller and smaller powers of 2 and when

366
00:19:06,140 --> 00:19:09,860
we move the point the left we are

367
00:19:09,860 --> 00:19:12,170
getting some missing bits assumes to be

368
00:19:12,170 --> 00:19:16,040
zeros our first bit insignificant

369
00:19:16,040 --> 00:19:18,080
represents smaller and smaller power of

370
00:19:18,080 --> 00:19:21,890
2 so we are getting closer and closer to

371
00:19:21,890 --> 00:19:29,180
0 but when we have this bit the hidden

372
00:19:29,180 --> 00:19:33,050
bit assumed to be 1 it always represents

373
00:19:33,050 --> 00:19:36,560
some power of 2 it can be very small but

374
00:19:36,560 --> 00:19:38,600
there will be always some value in here

375
00:19:38,600 --> 00:19:42,080
all right so we will never be able to

376
00:19:42,080 --> 00:19:45,020
represent number 0 because we'll always

377
00:19:45,020 --> 00:19:48,280
have some value given by this bit

378
00:19:48,280 --> 00:19:51,559
fortunately this representation has a

379
00:19:51,559 --> 00:19:55,159
section for death so when our exponent

380
00:19:55,159 --> 00:19:57,769
gets his lowest possible value so when

381
00:19:57,769 --> 00:20:00,879
the all bits of the exponent are zero so

382
00:20:00,879 --> 00:20:05,149
our exponent is minus 1023 the hidden

383
00:20:05,149 --> 00:20:10,519
bits also turns to zero so this way we

384
00:20:10,519 --> 00:20:13,370
can represent zero as all the bits being

385
00:20:13,370 --> 00:20:18,110
zero and we can of course change some

386
00:20:18,110 --> 00:20:20,779
bits and significant to represent

387
00:20:20,779 --> 00:20:24,379
numbers very close to zero they are

388
00:20:24,379 --> 00:20:27,529
called sub normal values because of this

389
00:20:27,529 --> 00:20:34,970
hidden bit being 0 but you may remember

390
00:20:34,970 --> 00:20:37,549
this sign guy in here and I told you

391
00:20:37,549 --> 00:20:41,509
that we can use it to change the sign of

392
00:20:41,509 --> 00:20:43,159
any number represented in this

393
00:20:43,159 --> 00:20:45,440
representation so what would happen if

394
00:20:45,440 --> 00:20:49,519
we change the sign of 0 yeah we will get

395
00:20:49,519 --> 00:20:52,009
minus 0 actually the floating point

396
00:20:52,009 --> 00:20:54,499
representation defines two zeros

397
00:20:54,499 --> 00:20:58,909
positive and negative one in JavaScript

398
00:20:58,909 --> 00:21:01,039
it's not very easy to notice this

399
00:21:01,039 --> 00:21:03,320
negative zero because there are only

400
00:21:03,320 --> 00:21:06,019
certain operations that return it like

401
00:21:06,019 --> 00:21:11,029
dividing by minus infinity but it's

402
00:21:11,029 --> 00:21:14,080
there and the difference between

403
00:21:14,080 --> 00:21:16,909
negative 0 and positive 0 can be

404
00:21:16,909 --> 00:21:21,169
actually detected so we've seen what

405
00:21:21,169 --> 00:21:25,700
happens when the exponent is again when

406
00:21:25,700 --> 00:21:28,850
the exponent is at its lowest value so

407
00:21:28,850 --> 00:21:31,610
now let's see the other side of the

408
00:21:31,610 --> 00:21:37,369
extreme when we have all the bits of the

409
00:21:37,369 --> 00:21:40,460
exponent set to 1 for the highest

410
00:21:40,460 --> 00:21:43,159
exponent value this is the value

411
00:21:43,159 --> 00:21:47,960
reserved for the Infinity positive or

412
00:21:47,960 --> 00:21:51,619
negative infinity so that's how the

413
00:21:51,619 --> 00:21:53,899
Infinity looks like all the exponent

414
00:21:53,899 --> 00:21:56,749
bits set to 1 and all the significant

415
00:21:56,749 --> 00:22:00,409
bits set to 0 and what will happen if we

416
00:22:00,409 --> 00:22:03,950
try to change this significant bits to

417
00:22:03,950 --> 00:22:07,710
Banke we get to now and it's not because

418
00:22:07,710 --> 00:22:11,280
there is some error actually floating

419
00:22:11,280 --> 00:22:13,950
point representation defines not a

420
00:22:13,950 --> 00:22:17,640
number value so if all the exponent bits

421
00:22:17,640 --> 00:22:20,520
are set to 1 and any bit in the

422
00:22:20,520 --> 00:22:23,309
significant is set to 1 it's not a

423
00:22:23,309 --> 00:22:27,660
number value so it kind of explains why

424
00:22:27,660 --> 00:22:31,559
not a number type is a number because

425
00:22:31,559 --> 00:22:34,020
not a number is a value defined by the

426
00:22:34,020 --> 00:22:36,480
floating point representation it's

427
00:22:36,480 --> 00:22:40,580
defined by 64 bits like any other number

428
00:22:40,580 --> 00:22:44,730
actually this we have 52 bits in

429
00:22:44,730 --> 00:22:46,710
significance so there are quite many not

430
00:22:46,710 --> 00:22:48,480
a number values defined in this

431
00:22:48,480 --> 00:22:51,000
representation fortunately to us Java

432
00:22:51,000 --> 00:22:53,549
Script simplifies it to only one not a

433
00:22:53,549 --> 00:23:01,610
number yeah but let's get maybe back to

434
00:23:01,610 --> 00:23:05,580
numbers and summarize it what we already

435
00:23:05,580 --> 00:23:11,880
heard here so for any given number we

436
00:23:11,880 --> 00:23:16,080
can compute its value by computing the

437
00:23:16,080 --> 00:23:19,860
values of the significant bits with the

438
00:23:19,860 --> 00:23:22,830
position of the point based on the value

439
00:23:22,830 --> 00:23:25,919
from the exponent and design defining a

440
00:23:25,919 --> 00:23:29,640
design of our number but as I told you

441
00:23:29,640 --> 00:23:31,380
at the very beginning we can treat the

442
00:23:31,380 --> 00:23:34,830
exponent as kind of a multiplier so if

443
00:23:34,830 --> 00:23:38,100
we take it out of this parenthesis and

444
00:23:38,100 --> 00:23:41,460
treat it as a multiplier we start to

445
00:23:41,460 --> 00:23:43,559
compute the significant value always

446
00:23:43,559 --> 00:23:45,720
starting with two to the power of zero

447
00:23:45,720 --> 00:23:48,620
it's the value given by this hidden bit

448
00:23:48,620 --> 00:23:57,000
so we can always set it to 1 because you

449
00:23:57,000 --> 00:23:59,429
know 2 to the power of 0 is 1

450
00:23:59,429 --> 00:24:01,590
so that's the one given by the hidden

451
00:24:01,590 --> 00:24:05,700
bit and here we have the value computed

452
00:24:05,700 --> 00:24:09,929
for the exponent and this way we kind of

453
00:24:09,929 --> 00:24:14,590
reverse engineered the equation for

454
00:24:14,590 --> 00:24:16,510
how the numbers are computed in double

455
00:24:16,510 --> 00:24:19,720
floating-point representation and that's

456
00:24:19,720 --> 00:24:24,220
the equation you can find in similar

457
00:24:24,220 --> 00:24:29,350
fashion on this Wikipedia page so I know

458
00:24:29,350 --> 00:24:31,990
it was quite a hardcore topic for a

459
00:24:31,990 --> 00:24:34,750
Sunday morning after the great party but

460
00:24:34,750 --> 00:24:38,950
I hope that I have given you at least a

461
00:24:38,950 --> 00:24:41,950
little bit of understanding how numbers

462
00:24:41,950 --> 00:24:45,250
in JavaScript work and why we have all

463
00:24:45,250 --> 00:24:47,799
these problems we've done and hopefully

464
00:24:47,799 --> 00:24:49,539
after this talk we can all think about

465
00:24:49,539 --> 00:24:53,730
ourselves as those who understand binary

466
00:24:53,730 --> 00:24:57,549
and maybe next time you stumble upon

467
00:24:57,549 --> 00:25:00,309
some weird behavior with numbers or with

468
00:25:00,309 --> 00:25:02,799
JavaScript and you will ask yourself why

469
00:25:02,799 --> 00:25:07,059
because answers and reasons are out

470
00:25:07,059 --> 00:25:10,299
there waiting for us to find them so be

471
00:25:10,299 --> 00:25:12,669
curious because there is hell a lot of

472
00:25:12,669 --> 00:25:14,520
interesting things you can learn and

473
00:25:14,520 --> 00:25:17,320
sometimes quite unexpected answers you

474
00:25:17,320 --> 00:25:22,080
can get so that was all I had for you

475
00:25:22,080 --> 00:25:34,390
you can follow me on Twitter

476
00:25:34,400 --> 00:25:36,840
do any questions is there anything left

477
00:25:36,840 --> 00:25:37,950
that you didn't want to know about

478
00:25:37,950 --> 00:25:39,570
numbers that you somehow wanna know now

479
00:25:39,570 --> 00:25:48,210
yes sorry can you keep your hand up I

480
00:25:48,210 --> 00:25:50,760
there we go sorry my Tracking's not so

481
00:25:50,760 --> 00:25:57,810
good right I mean from some cloud thanks

482
00:25:57,810 --> 00:26:00,630
for the talk was great I just want to

483
00:26:00,630 --> 00:26:03,480
add something if you would want to work

484
00:26:03,480 --> 00:26:05,370
with big numbers you can actually use

485
00:26:05,370 --> 00:26:07,740
libraries for that which are called big

486
00:26:07,740 --> 00:26:10,170
naam libraries these exist in most

487
00:26:10,170 --> 00:26:12,630
languages and yeah I found myself in a

488
00:26:12,630 --> 00:26:16,200
situation won't yeah thanks

489
00:26:16,200 --> 00:26:18,570
yeah that's true I was just focusing on

490
00:26:18,570 --> 00:26:20,490
the numbers representation how they're

491
00:26:20,490 --> 00:26:28,350
in this floating point right okay thank

492
00:26:28,350 --> 00:26:40,360
you so much Bartok

