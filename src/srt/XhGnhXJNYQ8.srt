1
00:00:08,120 --> 00:00:13,710

hi everyone first I want to sq oh excuse

2
00:00:13,710 --> 00:00:16,440
me my English is very hard so if you did

3
00:00:16,440 --> 00:00:19,080
understand anything please manifest

4
00:00:19,080 --> 00:00:26,470
yourself well I am q a Mac go I am oh

5
00:00:26,480 --> 00:00:32,099
let's forget it I am Kira max no one's

6
00:00:32,099 --> 00:00:37,219
no knows me by dulles that's okay I work

7
00:00:37,219 --> 00:00:40,350
basically all my free time I'm open

8
00:00:40,350 --> 00:00:42,870
source i'm kinda objected i recommend

9
00:00:42,870 --> 00:00:45,050
the service to anyone that wants to

10
00:00:45,050 --> 00:00:48,539
evolve on the career or to learn tons of

11
00:00:48,539 --> 00:00:51,270
things so gap get involved with a

12
00:00:51,270 --> 00:00:53,300
non-person open source stuff i

13
00:00:53,300 --> 00:00:57,210
contributed a really project la with

14
00:00:57,210 --> 00:01:01,289
this kind of stuff like the players

15
00:01:01,289 --> 00:01:03,870
generation and whatever and I'm a Java

16
00:01:03,870 --> 00:01:07,610
developer so you can throw the tomatoes

17
00:01:07,610 --> 00:01:11,010
the question is why to build a new

18
00:01:11,010 --> 00:01:13,920
JavaScript implementation so why no this

19
00:01:13,920 --> 00:01:16,799
is all ok but it's complete it's pretty

20
00:01:16,799 --> 00:01:20,540
complete even it even has the e 4x

21
00:01:20,540 --> 00:01:23,460
extensions like no I don't think that

22
00:01:23,460 --> 00:01:27,119
the he was a it was the first one if I

23
00:01:27,119 --> 00:01:30,659
believe and that is why why build a new

24
00:01:30,659 --> 00:01:34,500
implementation just the geek appeal just

25
00:01:34,500 --> 00:01:36,900
because it's fun to write some kind of

26
00:01:36,900 --> 00:01:41,040
this kind of software so the main reason

27
00:01:41,040 --> 00:01:44,490
was it's because it's fun in all open

28
00:01:44,490 --> 00:01:47,189
source projects in growing extended to

29
00:01:47,189 --> 00:01:49,229
my life if i don't have fun with

30
00:01:49,229 --> 00:01:50,420
something there is something wrong

31
00:01:50,420 --> 00:01:54,149
definitely so i want to have some fun

32
00:01:54,149 --> 00:01:59,310
and my main motivation was because of

33
00:01:59,310 --> 00:02:02,430
this i love a bench source so i started

34
00:02:02,430 --> 00:02:04,800
to find some project to experiment

35
00:02:04,800 --> 00:02:07,890
if the Evoque 10mg stuff and I think you

36
00:02:07,890 --> 00:02:10,530
probably aren't really able to read

37
00:02:10,530 --> 00:02:15,270
anything I'm surg ok this is the commit

38
00:02:15,270 --> 00:02:19,460
log from rhinos open-source degrees

39
00:02:19,460 --> 00:02:23,550
circa nine ish nine solar I know is

40
00:02:23,550 --> 00:02:30,750
nearly a very very elder project when

41
00:02:30,750 --> 00:02:35,610
one who was release it we got nearly the

42
00:02:35,610 --> 00:02:38,330
release of Java ciao that's slow

43
00:02:38,330 --> 00:02:42,570
painfully slow this GV m it was on the

44
00:02:42,570 --> 00:02:45,270
beginning it has very cool features very

45
00:02:45,270 --> 00:02:49,410
interesting ideas so before more worried

46
00:02:49,410 --> 00:02:52,910
about the write once run anywhere stuff

47
00:02:52,910 --> 00:02:58,490
but you also so we can say that Rhino

48
00:02:58,490 --> 00:03:00,930
developers are the miracle guys they

49
00:03:00,930 --> 00:03:03,680
made amazing things to make this happen

50
00:03:03,680 --> 00:03:07,950
like optimizing things by hand bypassing

51
00:03:07,950 --> 00:03:11,790
all the limitations of this GV m to get

52
00:03:11,790 --> 00:03:13,590
some performance some at least some

53
00:03:13,590 --> 00:03:18,780
decent performance so I ask you let's

54
00:03:18,780 --> 00:03:20,760
collect further right guys they made an

55
00:03:20,760 --> 00:03:23,370
awesome job without Souls without

56
00:03:23,370 --> 00:03:25,980
everything they could have they could

57
00:03:25,980 --> 00:03:29,190
have today so my main idea I don't want

58
00:03:29,190 --> 00:03:32,100
to bash Rhino project or not this means

59
00:03:32,100 --> 00:03:35,730
they were amazing the problem is we are

60
00:03:35,730 --> 00:03:39,239
talking about ten years more than 10

61
00:03:39,239 --> 00:03:41,400
years of software developments and all

62
00:03:41,400 --> 00:03:44,040
softwares open source software or

63
00:03:44,040 --> 00:03:46,410
commercial software whatever suffers

64
00:03:46,410 --> 00:03:50,190
from bit were odd usually time spaces

65
00:03:50,190 --> 00:03:53,130
and people Oh every factors is tomorrow

66
00:03:53,130 --> 00:03:56,280
or this tomorrow is about two years

67
00:03:56,280 --> 00:03:59,310
after that but that's not that's lots of

68
00:03:59,310 --> 00:04:04,019
question so Java 7 came with all lots of

69
00:04:04,019 --> 00:04:08,610
new features very cool stuff i like

70
00:04:08,610 --> 00:04:13,010
javascript is away why not try to put

71
00:04:13,010 --> 00:04:16,489
invoke dynamic in the coast of Java 7

72
00:04:16,489 --> 00:04:19,579
the support for dynamic language support

73
00:04:19,579 --> 00:04:24,320
inside of rhino well when they get dry

74
00:04:24,320 --> 00:04:25,970
no they didn't have the tools we have

75
00:04:25,970 --> 00:04:30,260
today so the majority of things that

76
00:04:30,260 --> 00:04:32,780
were hard like generating by travelpod

77
00:04:32,780 --> 00:04:35,720
coach are generating deep low level

78
00:04:35,720 --> 00:04:39,520
stuff we're done by themselves they

79
00:04:39,520 --> 00:04:42,830
basically they are they were generating

80
00:04:42,830 --> 00:04:44,750
bites and deeds and all that stuff

81
00:04:44,750 --> 00:04:47,570
directly to files to emulate what the

82
00:04:47,570 --> 00:04:49,789
java the java matching would expect

83
00:04:49,789 --> 00:04:53,810
that's pretty steep to learn so i

84
00:04:53,810 --> 00:04:56,270
managed to run to understand the code

85
00:04:56,270 --> 00:04:58,490
base but i have you frustrated because

86
00:04:58,490 --> 00:05:01,340
well we have better tools today and

87
00:05:01,340 --> 00:05:03,979
that's the main motivation i wanted to

88
00:05:03,979 --> 00:05:06,590
have fun i wanted to contribute to open

89
00:05:06,590 --> 00:05:10,460
source learn new stuff so that's the

90
00:05:10,460 --> 00:05:12,860
challenge I want to build an

91
00:05:12,860 --> 00:05:19,310
implementation but why not so I took the

92
00:05:19,310 --> 00:05:23,750
challenge and made three premises for my

93
00:05:23,750 --> 00:05:29,360
development I assumed that at first I

94
00:05:29,360 --> 00:05:32,630
wanted to have fun on the second I

95
00:05:32,630 --> 00:05:35,900
wanted to learn something new that took

96
00:05:35,900 --> 00:05:39,139
me a whole lot of work and the best of

97
00:05:39,139 --> 00:05:41,330
all if possible have beautiful codes

98
00:05:41,330 --> 00:05:43,699
that makes things easier for these

99
00:05:43,699 --> 00:05:48,260
people but having beautiful cousin

100
00:05:48,260 --> 00:05:52,340
compilers compiler is usually are things

101
00:05:52,340 --> 00:05:55,370
they had some guys with long birds and

102
00:05:55,370 --> 00:05:57,919
stuff like that though on the dungeons

103
00:05:57,919 --> 00:06:00,860
or something like that so

104
00:06:00,860 --> 00:06:02,960
yes you can we can have beautiful code

105
00:06:02,960 --> 00:06:05,719
or at least we can try hard to have it

106
00:06:05,719 --> 00:06:09,229
so I started to try to write a

107
00:06:09,229 --> 00:06:12,770
friendlier compiler why not again we

108
00:06:12,770 --> 00:06:16,490
have the GPM the GPM is a very beautiful

109
00:06:16,490 --> 00:06:19,729
piece of software ok it's damn hard it's

110
00:06:19,729 --> 00:06:23,150
them complicated they did lots and lots

111
00:06:23,150 --> 00:06:27,199
and lots of optimizations this means

112
00:06:27,199 --> 00:06:31,580
that they optimized at the GPM for one

113
00:06:31,580 --> 00:06:34,069
language that begins with j ends not

114
00:06:34,069 --> 00:06:38,810
JavaScript unfortunately so they make

115
00:06:38,810 --> 00:06:41,689
some structure to make the language

116
00:06:41,689 --> 00:06:44,060
runnin and runnin fast we're talking

117
00:06:44,060 --> 00:06:48,620
about what how the invocation of code

118
00:06:48,620 --> 00:06:52,159
works on the gvn when you need to make

119
00:06:52,159 --> 00:06:54,560
an invocation the JVM on the compile

120
00:06:54,560 --> 00:06:57,050
time need to be aware of what types are

121
00:06:57,050 --> 00:06:59,990
involved so we're talking about static

122
00:06:59,990 --> 00:07:04,099
typing that usually works with dynamic

123
00:07:04,099 --> 00:07:07,069
language don't like it majority of

124
00:07:07,069 --> 00:07:09,400
people i like both but anyway anyways

125
00:07:09,400 --> 00:07:13,310
the idea is the tvm needs to know the

126
00:07:13,310 --> 00:07:16,250
type that's calling and the tower type

127
00:07:16,250 --> 00:07:21,830
that will be called so this made this

128
00:07:21,830 --> 00:07:24,919
makes the gvm aware of types and put

129
00:07:24,919 --> 00:07:28,159
opens the possibility of very specific

130
00:07:28,159 --> 00:07:32,740
and powerful positions when you have

131
00:07:32,740 --> 00:07:37,310
object object orientation you have some

132
00:07:37,310 --> 00:07:40,370
invocations own instances are like

133
00:07:40,370 --> 00:07:43,520
objects by the way you need to know the

134
00:07:43,520 --> 00:07:46,279
object that contains the method why

135
00:07:46,279 --> 00:07:48,680
let's see let's imagine that seeds a

136
00:07:48,680 --> 00:07:51,199
function and I need to know where this

137
00:07:51,199 --> 00:07:54,560
function are I just can invoke it alone

138
00:07:54,560 --> 00:07:59,449
I have another case on Java that we try

139
00:07:59,449 --> 00:08:01,219
to implement some kind of duck typing

140
00:08:01,219 --> 00:08:04,939
but it's nearly impossible to have its

141
00:08:04,939 --> 00:08:07,370
unfortunately because of the static

142
00:08:07,370 --> 00:08:09,729
static typing so when I

143
00:08:09,729 --> 00:08:12,849
also has polymer fees I need to use some

144
00:08:12,849 --> 00:08:16,830
stuff like interfaces that this guy

145
00:08:16,830 --> 00:08:21,219
swear that his be but on the reality

146
00:08:21,219 --> 00:08:27,309
he's just implementing Twitter open so

147
00:08:27,309 --> 00:08:31,089
on the truth is that he is implementing

148
00:08:31,089 --> 00:08:35,620
a contract ok that's pretty full of

149
00:08:35,620 --> 00:08:38,199
boilerplate let's see what we have new

150
00:08:38,199 --> 00:08:42,250
on the GDK 7 we have dynamic invocation

151
00:08:42,250 --> 00:08:47,980
what does this means i don't know this d

152
00:08:47,980 --> 00:08:51,040
type it's whatever i don't have any idea

153
00:08:51,040 --> 00:08:53,680
of what type is that when I want to make

154
00:08:53,680 --> 00:08:58,870
the invocation of the c function the

155
00:08:58,870 --> 00:09:01,389
promise of the GPM is that we need to

156
00:09:01,389 --> 00:09:03,310
know the both sides of the conversation

157
00:09:03,310 --> 00:09:05,529
like we are talking about objects

158
00:09:05,529 --> 00:09:08,410
passing messages so when i try to make

159
00:09:08,410 --> 00:09:11,110
this invocation it won't even compile so

160
00:09:11,110 --> 00:09:13,209
the invoke dynamic instruction and all

161
00:09:13,209 --> 00:09:16,149
the gvm support means that now i can

162
00:09:16,149 --> 00:09:18,220
have an intermediate partner on this

163
00:09:18,220 --> 00:09:20,949
conversation that will knows how to find

164
00:09:20,949 --> 00:09:24,399
the target method that i want so when I

165
00:09:24,399 --> 00:09:27,790
made this invocation after passing with

166
00:09:27,790 --> 00:09:30,670
this guy I'm able to make a direct

167
00:09:30,670 --> 00:09:32,829
invocation without now in the other side

168
00:09:32,829 --> 00:09:35,529
that's huge that's huge because we can t

169
00:09:35,529 --> 00:09:38,350
move tons of calls that were use it

170
00:09:38,350 --> 00:09:40,899
before just to make City vocation happen

171
00:09:40,899 --> 00:09:46,139
so I we have on 0 be like for example

172
00:09:46,139 --> 00:09:49,089
lots of evo caters classes that we

173
00:09:49,089 --> 00:09:52,480
generate only fly just to glue some Ruby

174
00:09:52,480 --> 00:09:55,240
code with some Java code and begin

175
00:09:55,240 --> 00:09:57,130
passing methods between them that's

176
00:09:57,130 --> 00:10:01,389
pretty huge about 3,000 files we've

177
00:10:01,389 --> 00:10:04,199
invoked dynamic we can remove everything

178
00:10:04,199 --> 00:10:06,730
that's great

179
00:10:06,730 --> 00:10:10,490
but unfortunately there is a catch this

180
00:10:10,490 --> 00:10:13,579
is vm only supports so I don't have a

181
00:10:13,579 --> 00:10:16,970
like new invoke dynamic on the Java code

182
00:10:16,970 --> 00:10:20,060
we know that Java language sucks its

183
00:10:20,060 --> 00:10:23,420
effect we can do pretty awesome things

184
00:10:23,420 --> 00:10:25,670
with it we can we can even do awesome

185
00:10:25,670 --> 00:10:29,899
pretty things with vb vb yeah so the

186
00:10:29,899 --> 00:10:34,029
idea is that even if java language sucks

187
00:10:34,029 --> 00:10:38,540
we can make it work like as we have vm

188
00:10:38,540 --> 00:10:41,240
supports the true language of the gvm is

189
00:10:41,240 --> 00:10:45,290
byte code that's binary stuff hard stuff

190
00:10:45,290 --> 00:10:49,610
and pretty complicated to do this is an

191
00:10:49,610 --> 00:10:54,199
excerpt of the bytecode basically it's

192
00:10:54,199 --> 00:10:57,139
binary data I don't want to do that the

193
00:10:57,139 --> 00:11:00,199
Rhino guys go very closer to that they

194
00:11:00,199 --> 00:11:03,740
have some helper classes that that

195
00:11:03,740 --> 00:11:06,290
generates that kind of stuff so we have

196
00:11:06,290 --> 00:11:09,769
better tools now I want beautiful coat I

197
00:11:09,769 --> 00:11:15,140
don't mess with binary data so i started

198
00:11:15,140 --> 00:11:17,180
to think about abstraction how could I

199
00:11:17,180 --> 00:11:19,910
abstract the byte code generation that

200
00:11:19,910 --> 00:11:25,220
it could be better so we begin to see

201
00:11:25,220 --> 00:11:30,199
the Enterprise enterprise labels that

202
00:11:30,199 --> 00:11:32,269
people gave but anyways I made the

203
00:11:32,269 --> 00:11:35,300
internal language inside jvm to make the

204
00:11:35,300 --> 00:11:37,370
byte code generation a little bit

205
00:11:37,370 --> 00:11:39,829
friendly that's tight script it's

206
00:11:39,829 --> 00:11:42,500
another project that makes things a

207
00:11:42,500 --> 00:11:44,600
little bit easier let's take for example

208
00:11:44,600 --> 00:11:48,740
this JavaScript code I'm not making the

209
00:11:48,740 --> 00:11:52,130
compiler yet I just making what I want

210
00:11:52,130 --> 00:11:55,040
to do I want to print something in bytes

211
00:11:55,040 --> 00:12:00,410
colder will do that ok forget it when I

212
00:12:00,410 --> 00:12:03,019
go to the high level of these are single

213
00:12:03,019 --> 00:12:06,050
byte codes I will get some instructions

214
00:12:06,050 --> 00:12:09,620
like the final constant find the system

215
00:12:09,620 --> 00:12:11,640
out people that

216
00:12:11,640 --> 00:12:15,240
every student Java knowing noses I get

217
00:12:15,240 --> 00:12:19,020
out very able on the dividing the

218
00:12:19,020 --> 00:12:22,800
outfield on the system then I turned in

219
00:12:22,800 --> 00:12:25,140
on the stack and make the invocation to

220
00:12:25,140 --> 00:12:27,360
the print method that's pretty usually

221
00:12:27,360 --> 00:12:30,360
forget it I have a better form to do

222
00:12:30,360 --> 00:12:35,070
that I want to use as I I have a static

223
00:12:35,070 --> 00:12:37,020
language I want to use what I have on

224
00:12:37,020 --> 00:12:40,020
the ides and that stuff to make my life

225
00:12:40,020 --> 00:12:44,130
easier so I didn't dsl this is the same

226
00:12:44,130 --> 00:12:47,610
cold this decoder generates they're ugly

227
00:12:47,610 --> 00:12:50,700
bytecode so you can have a new code

228
00:12:50,700 --> 00:12:54,750
block and all the constructs on the tjs

229
00:12:54,750 --> 00:12:57,510
you use this code box as building blocks

230
00:12:57,510 --> 00:12:59,430
so if you take you have a big problem

231
00:12:59,430 --> 00:13:02,400
you split season be smaller part and

232
00:13:02,400 --> 00:13:05,120
this makes things a lot of either so I

233
00:13:05,120 --> 00:13:08,610
don't want you as generously JavaScript

234
00:13:08,610 --> 00:13:11,250
developers to understand jeez just

235
00:13:11,250 --> 00:13:15,060
compare that's all a lot easier to read

236
00:13:15,060 --> 00:13:18,210
and makes easier to explain what's

237
00:13:18,210 --> 00:13:23,250
happening under the hood so I can let's

238
00:13:23,250 --> 00:13:25,560
see you on the simple further the reward

239
00:13:25,560 --> 00:13:27,540
and this time we're talking about the

240
00:13:27,540 --> 00:13:32,670
ggs aot compiler ahead of time so i have

241
00:13:32,670 --> 00:13:35,540
this code that stupid javascript code

242
00:13:35,540 --> 00:13:38,550
what i need to do to make this work i

243
00:13:38,550 --> 00:13:41,550
need to define this decimal little and

244
00:13:41,550 --> 00:13:45,960
it's retrieve the current scope we have

245
00:13:45,960 --> 00:13:47,940
the global scope on JavaScript I don't

246
00:13:47,940 --> 00:13:50,040
like it most people don't like to but

247
00:13:50,040 --> 00:13:54,200
anyways there's n I need to assign this

248
00:13:54,200 --> 00:13:57,060
new object that i just created or in

249
00:13:57,060 --> 00:14:00,240
this case a primitive type to disco so i

250
00:14:00,240 --> 00:14:02,850
define the literal which this is moral

251
00:14:02,850 --> 00:14:09,270
amount of code then i find in fetch

252
00:14:09,270 --> 00:14:13,680
minded microscope and finally I quard

253
00:14:13,680 --> 00:14:14,970
the variable the

254
00:14:14,970 --> 00:14:17,759
Valerie on the score three snippets of

255
00:14:17,759 --> 00:14:23,220
code it's complicated I know but at the

256
00:14:23,220 --> 00:14:25,319
same time I have comments and I have

257
00:14:25,319 --> 00:14:29,160
very small splitted parts so we can

258
00:14:29,160 --> 00:14:36,060
start talking and that's it there's more

259
00:14:36,060 --> 00:14:42,060
there's more we did I don't know if we

260
00:14:42,060 --> 00:14:44,550
will be able to read but there is an

261
00:14:44,550 --> 00:14:47,610
invoke dynamic instruction with a string

262
00:14:47,610 --> 00:14:50,129
passing like ding j has a scope define

263
00:14:50,129 --> 00:14:53,430
where did this thing go when I make this

264
00:14:53,430 --> 00:14:56,490
invocation I'm sending such a GVM and

265
00:14:56,490 --> 00:15:00,180
instruction to do that stuff and that

266
00:15:00,180 --> 00:15:04,410
stuff has a signature I thought that it

267
00:15:04,410 --> 00:15:07,290
returns nothing it receives an open

268
00:15:07,290 --> 00:15:10,560
string and Nadine Adam is the common

269
00:15:10,560 --> 00:15:12,810
type for all the objects and primitive

270
00:15:12,810 --> 00:15:16,649
types on the ice cream on the ggs so

271
00:15:16,649 --> 00:15:21,870
this code will go to this framework that

272
00:15:21,870 --> 00:15:24,990
was released it on the GPM language

273
00:15:24,990 --> 00:15:28,019
sandwich a very deeply technical

274
00:15:28,019 --> 00:15:29,879
Congress that happiness I don't know why

275
00:15:29,879 --> 00:15:35,040
I wasn't there so this framework is mean

276
00:15:35,040 --> 00:15:39,120
to make dynamic link possible so i can

277
00:15:39,120 --> 00:15:42,569
have on piling face like generates in my

278
00:15:42,569 --> 00:15:44,579
bytecode I don't have the type

279
00:15:44,579 --> 00:15:48,149
information but I can make the linking

280
00:15:48,149 --> 00:15:51,360
of some dynamic code with some static

281
00:15:51,360 --> 00:15:56,699
calls at runtime so I get building type

282
00:15:56,699 --> 00:15:59,939
conversion for free I just need to tell

283
00:15:59,939 --> 00:16:02,490
the framework like I have a primitive

284
00:16:02,490 --> 00:16:05,819
like string when I when we try to call

285
00:16:05,819 --> 00:16:08,279
some metal on that primitive string it

286
00:16:08,279 --> 00:16:12,689
gets out a box it oh I made wrong okay

287
00:16:12,689 --> 00:16:16,980
it's even a number it's the same thing I

288
00:16:16,980 --> 00:16:20,970
will take this primitive do a new number

289
00:16:20,970 --> 00:16:23,639
and then invoke the method or something

290
00:16:23,639 --> 00:16:24,290
like that

291
00:16:24,290 --> 00:16:27,259
I just can't convert the types even two

292
00:16:27,259 --> 00:16:29,240
classes I can compare it in the make out

293
00:16:29,240 --> 00:16:31,579
the conversion under the hood so on the

294
00:16:31,579 --> 00:16:33,139
invocation patch I don't need to worry

295
00:16:33,139 --> 00:16:37,040
about that if the type is a even a

296
00:16:37,040 --> 00:16:40,579
superclass of the number or whatever the

297
00:16:40,579 --> 00:16:43,040
framework will take care for me i have

298
00:16:43,040 --> 00:16:46,550
another thing for free gene Dinah link

299
00:16:46,550 --> 00:16:49,850
comes with from monomorphic in mind what

300
00:16:49,850 --> 00:16:56,540
hell is death so the idea is that I do

301
00:16:56,540 --> 00:17:02,000
remember GS is dynamic we like it so but

302
00:17:02,000 --> 00:17:05,750
we need to know the types how do we get

303
00:17:05,750 --> 00:17:13,679
from the agency we need whoa whoa whoa

304
00:17:13,689 --> 00:17:18,890
problems we when we want to go to see we

305
00:17:18,890 --> 00:17:23,179
should instruction like scope define and

306
00:17:23,179 --> 00:17:27,230
will receive this call scope define as

307
00:17:27,230 --> 00:17:30,470
this linker the cause inside because

308
00:17:30,470 --> 00:17:32,720
base and let's not worry about that but

309
00:17:32,720 --> 00:17:35,960
I instead of I needing to have now the

310
00:17:35,960 --> 00:17:38,360
times before hands I can do this linking

311
00:17:38,360 --> 00:17:43,280
with a nice ugly if code that apparently

312
00:17:43,280 --> 00:17:46,940
six but the truth is that we are not

313
00:17:46,940 --> 00:17:49,040
making the invocation by ourselves we

314
00:17:49,040 --> 00:17:51,559
are just in passing pointers to the jvm

315
00:17:51,559 --> 00:17:53,690
do you remember these pointers that's

316
00:17:53,690 --> 00:17:58,190
awesome the c pointer is a poor boy a

317
00:17:58,190 --> 00:18:00,169
pointers for functions and that stuff

318
00:18:00,169 --> 00:18:03,650
now on the gvm because of java 7 we have

319
00:18:03,650 --> 00:18:07,190
pointers to methods they are called

320
00:18:07,190 --> 00:18:09,530
method handles I don't even know how to

321
00:18:09,530 --> 00:18:11,799
translate these super cookies thank God

322
00:18:11,799 --> 00:18:15,260
so I need to find that targets for my

323
00:18:15,260 --> 00:18:19,010
invocation then I I want this target i

324
00:18:19,010 --> 00:18:21,169
have a method on the scope class name it

325
00:18:21,169 --> 00:18:22,880
define that receives the name of the

326
00:18:22,880 --> 00:18:24,770
variable and whatever that i want to put

327
00:18:24,770 --> 00:18:28,580
on my scope so i get the pointer

328
00:18:28,580 --> 00:18:32,330
this weird API I just need I tell what

329
00:18:32,330 --> 00:18:34,370
the second nature I want to find what's

330
00:18:34,370 --> 00:18:36,350
the name of the method where is that

331
00:18:36,350 --> 00:18:38,870
matter if I know this class even though

332
00:18:38,870 --> 00:18:40,669
we have some freaks chew even not

333
00:18:40,669 --> 00:18:43,549
passages and these will be returning me

334
00:18:43,549 --> 00:18:46,610
just the pointer I I won't make the

335
00:18:46,610 --> 00:18:48,980
invocation the framework will make the

336
00:18:48,980 --> 00:18:53,000
invocation for me so the GTM do all the

337
00:18:53,000 --> 00:18:56,029
hard work for us in the sense that I

338
00:18:56,029 --> 00:19:00,200
don't need to worry about if Michael be

339
00:19:00,200 --> 00:19:03,049
slow when I make these pointers the gvm

340
00:19:03,049 --> 00:19:06,260
looks like looks it as if in he knows

341
00:19:06,260 --> 00:19:09,019
that news that I beforehand and this

342
00:19:09,019 --> 00:19:13,630
invocation will be potential alignable

343
00:19:13,630 --> 00:19:18,049
because of this we have a new idea lying

344
00:19:18,049 --> 00:19:20,990
around we have more language on TBN like

345
00:19:20,990 --> 00:19:26,960
Ruby and Jay ruby Psion we had Ryan Ryan

346
00:19:26,960 --> 00:19:30,559
itself is walking slowly on to invoke

347
00:19:30,559 --> 00:19:33,049
dynamic and we have now done ginger yes

348
00:19:33,049 --> 00:19:36,260
ji ji is that I can they are trying to

349
00:19:36,260 --> 00:19:38,480
agree on a common protocol for our

350
00:19:38,480 --> 00:19:41,600
object object oriented language so that

351
00:19:41,600 --> 00:19:44,299
I can make an invocation between jruby

352
00:19:44,299 --> 00:19:49,039
in chin jsr JRuby in Ryan or rot every

353
00:19:49,039 --> 00:19:50,809
all the language that implements this

354
00:19:50,809 --> 00:19:53,330
protocol will benefit from all the GI

355
00:19:53,330 --> 00:19:55,669
chi that GV m has the just-in-time

356
00:19:55,669 --> 00:19:58,820
compiler announcing lining even beating

357
00:19:58,820 --> 00:20:01,279
language we are starting to cross the

358
00:20:01,279 --> 00:20:03,639
bridge meeting between the language and

359
00:20:03,639 --> 00:20:08,000
G charter this game so we can go get

360
00:20:08,000 --> 00:20:14,179
lots of performance when how much time I

361
00:20:14,179 --> 00:20:20,840
have five that's great gjs is being

362
00:20:20,840 --> 00:20:26,000
released it no I just who do the push

363
00:20:26,000 --> 00:20:30,090
it's open source as it should be I am

364
00:20:30,090 --> 00:20:32,970
listening it now under an oppressive

365
00:20:32,970 --> 00:20:36,870
list and so do whatever it was it's a

366
00:20:36,870 --> 00:20:42,600
little better than the wtp that worldly

367
00:20:42,600 --> 00:20:44,820
sense that the guy talk talking before

368
00:20:44,820 --> 00:20:49,320
so that's it the current status gres is

369
00:20:49,320 --> 00:20:53,370
a beginning project I do the most part

370
00:20:53,370 --> 00:20:55,650
with a friends for a leash and report

371
00:20:55,650 --> 00:20:59,370
jelly a very smart guy so we are walking

372
00:20:59,370 --> 00:21:02,850
slowly it's nowhere near to complete I'm

373
00:21:02,850 --> 00:21:04,860
even it struggling to have something

374
00:21:04,860 --> 00:21:08,190
working on that but it's huge it has a

375
00:21:08,190 --> 00:21:10,740
lot of potential and I need to remark

376
00:21:10,740 --> 00:21:13,970
something I was talking on Brady vs

377
00:21:13,970 --> 00:21:16,620
conference that happens happening in

378
00:21:16,620 --> 00:21:19,170
bridges ear on March about this project

379
00:21:19,170 --> 00:21:22,710
and three months later who have the same

380
00:21:22,710 --> 00:21:27,120
idea the big fat Oracle so i might be on

381
00:21:27,120 --> 00:21:30,929
something don't don't you think the

382
00:21:30,929 --> 00:21:32,850
current stops what works and what won't

383
00:21:32,850 --> 00:21:37,710
work we have an es 3 grammar because we

384
00:21:37,710 --> 00:21:40,020
we wanted to go straight to the six but

385
00:21:40,020 --> 00:21:43,890
it was not so well defined it so Brandon

386
00:21:43,890 --> 00:21:46,710
like help at me like I go when he when

387
00:21:46,710 --> 00:21:48,150
he talked oh we're we're getting there

388
00:21:48,150 --> 00:21:51,690
so we probably will move to es6 some

389
00:21:51,690 --> 00:21:55,980
very awesome we have a perch away or chi

390
00:21:55,980 --> 00:21:58,500
compiler so every time you create a

391
00:21:58,500 --> 00:22:00,620
function we strike on pilot to bytecode

392
00:22:00,620 --> 00:22:04,350
so you will have an lit overhead when we

393
00:22:04,350 --> 00:22:06,210
start your program but for a long

394
00:22:06,210 --> 00:22:08,760
running applications like no like stuff

395
00:22:08,760 --> 00:22:12,480
you will be better spot because the gvm

396
00:22:12,480 --> 00:22:14,820
will take care of much of the patrons

397
00:22:14,820 --> 00:22:18,300
ations you can do we have this auto

398
00:22:18,300 --> 00:22:20,490
boxing stuff so i can pay as a preemie

399
00:22:20,490 --> 00:22:22,920
chief to a metal that receives the

400
00:22:22,920 --> 00:22:26,040
number instance and visa versa and

401
00:22:26,040 --> 00:22:29,180
whatever and we start tingling means

402
00:22:29,180 --> 00:22:32,810
boolean stuff that Aoki em if string and

403
00:22:32,810 --> 00:22:35,510
gather get some results like that we

404
00:22:35,510 --> 00:22:37,490
have the prototype I'd prototype chain

405
00:22:37,490 --> 00:22:41,810
working to closing the stock why did I

406
00:22:41,810 --> 00:22:44,960
is it gene J is because I want to have

407
00:22:44,960 --> 00:22:48,200
fun believe me if you are not making

408
00:22:48,200 --> 00:22:51,800
things worrying I know we have works

409
00:22:51,800 --> 00:22:54,080
that need sometimes we need to do things

410
00:22:54,080 --> 00:22:55,970
that we don't like but we need to try

411
00:22:55,970 --> 00:22:59,750
after all usually we are done worth

412
00:22:59,750 --> 00:23:01,730
working only for money we're working

413
00:23:01,730 --> 00:23:04,520
because we like to program usually if

414
00:23:04,520 --> 00:23:07,640
you don't actually recommends Ruby make

415
00:23:07,640 --> 00:23:09,740
you a better person a better programmer

416
00:23:09,740 --> 00:23:13,340
and second learn something new never

417
00:23:13,340 --> 00:23:18,110
stop learning i wanna i wanted to use

418
00:23:18,110 --> 00:23:20,060
good abstractions and i'll learn it a

419
00:23:20,060 --> 00:23:23,540
lot on the process keep it simple I get

420
00:23:23,540 --> 00:23:27,440
myself straight Rapids on my arm be a

421
00:23:27,440 --> 00:23:30,200
design Frome's so I need to basically

422
00:23:30,200 --> 00:23:33,410
here right from scratch two times that's

423
00:23:33,410 --> 00:23:37,220
learning and finally why not make

424
00:23:37,220 --> 00:23:40,430
beautiful codes that's the whole idea so

425
00:23:40,430 --> 00:23:53,970
there's on Marty we have unwrapped oh so

426
00:23:53,980 --> 00:24:04,789
let's see if I big to be readable does

427
00:24:04,789 --> 00:24:06,700
anyone knows then were the

428
00:24:06,700 --> 00:24:16,520
transparencies sorry whoa thank thank

429
00:24:16,520 --> 00:24:20,929
you so the results from NGS compilation

430
00:24:20,929 --> 00:24:25,400
is there ginger yes Oh dejar Dodger so I

431
00:24:25,400 --> 00:24:32,720
just run this and we have a nice help

432
00:24:32,720 --> 00:24:36,070
telling us we have a repo in this rebel

433
00:24:36,070 --> 00:24:39,169
shows us what's happening under the hood

434
00:24:39,169 --> 00:24:41,630
by now we are on the development phase

435
00:24:41,630 --> 00:24:44,630
so we have the beginning fo been split

436
00:24:44,630 --> 00:24:46,850
all over the console so I can make

437
00:24:46,850 --> 00:24:51,440
something fun do you remember the code

438
00:24:51,440 --> 00:24:53,450
that I talked before the stupid verge

439
00:24:53,450 --> 00:24:59,169
cheese equals 1 let's do it looks like

440
00:24:59,169 --> 00:25:03,440
what is it for us that's the idea I have

441
00:25:03,440 --> 00:25:07,929
this a symbol dump of bytes code so we

442
00:25:07,929 --> 00:25:10,669
did assign the variable but let's

443
00:25:10,669 --> 00:25:20,090
printed so that is it I hope you gotta

444
00:25:20,090 --> 00:25:22,700
love this project it's it has a lot of

445
00:25:22,700 --> 00:25:26,299
work to do yet but I I can see the

446
00:25:26,299 --> 00:25:29,659
potential because when you try to be

447
00:25:29,659 --> 00:25:33,409
careful about having more clean code

448
00:25:33,409 --> 00:25:36,200
base you can have more contributors you

449
00:25:36,200 --> 00:25:38,179
can get people to understand what's

450
00:25:38,179 --> 00:25:41,179
happening in everything wins everyone

451
00:25:41,179 --> 00:25:44,450
wins so that's it people that's all

452
00:25:44,450 --> 00:25:53,779
thank you

453
00:25:53,789 --> 00:25:56,559
little question

454
00:25:56,559 --> 00:26:03,970
I don't want to even talk about

455
00:26:03,970 --> 00:26:07,509
performance now just because have you

456
00:26:07,509 --> 00:26:09,879
ever seen that I didn't put performance

457
00:26:09,879 --> 00:26:13,629
on my main goals the idea is you need to

458
00:26:13,629 --> 00:26:18,519
make it clear we often Charlie Nutter a

459
00:26:18,519 --> 00:26:21,730
guy would admire a lot told me one time

460
00:26:21,730 --> 00:26:25,720
that if i want to make java faster java

461
00:26:25,720 --> 00:26:28,740
coach i should write code sickos on java

462
00:26:28,740 --> 00:26:31,659
so that's the idea we are trading off

463
00:26:31,659 --> 00:26:34,690
for now building isn't clear the

464
00:26:34,690 --> 00:26:36,970
clearness for performance but this thing

465
00:26:36,970 --> 00:26:39,639
will change because the gvm are making

466
00:26:39,639 --> 00:26:42,009
tons of work that i wasn't doing that

467
00:26:42,009 --> 00:26:45,220
people from wine we're doing it's than

468
00:26:45,220 --> 00:26:48,519
themselves so things tend to improve on

469
00:26:48,519 --> 00:26:51,369
general codes that was simpler and clear

470
00:26:51,369 --> 00:26:54,549
run about four to eight times faster

471
00:26:54,549 --> 00:26:57,159
than JRuby so there's no reason that we

472
00:26:57,159 --> 00:26:59,519
can couldn't get this benefit here to

473
00:26:59,519 --> 00:27:03,100
societal I will worry with performance

474
00:27:03,100 --> 00:27:05,860
after we get expect compliant that's the

475
00:27:05,860 --> 00:27:14,649
idea any questions

476
00:27:14,659 --> 00:27:17,509
though so thank you I have one more

477
00:27:17,509 --> 00:27:20,539
question okay uh is this a full free

478
00:27:20,539 --> 00:27:23,539
time project or full trying through full

479
00:27:23,539 --> 00:27:26,409
free time I have some friends helping me

480
00:27:26,409 --> 00:27:29,090
the Jane on this thing and I hope we

481
00:27:29,090 --> 00:27:32,749
have got mark on triple trees now right

